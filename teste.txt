make: Entering directory '/home/daniel/Daedalus/build'
make[1]: Entering directory '/home/daniel/Daedalus/build'
make[2]: Entering directory '/home/daniel/Daedalus/build'
make[2]: Leaving directory '/home/daniel/Daedalus/build'
[100%] Built target daedalus
make[1]: Leaving directory '/home/daniel/Daedalus/build'
make: Leaving directory '/home/daniel/Daedalus/build'
PHI FUNC HERE:   %sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ]
ENDF
define internal i32 @_wyvern_slice_foo_sum.0_57799407(i32 %x, i32 %N, i32 %i.0) {
_wyvern_unreachable:
  unreachable

sliceclone_for.inc:                               ; preds = %sliceclone_for.body
  br label %sliceclone_for.cond

sliceclone_for.cond:                              ; preds = %sliceclone_for.inc, %sliceclone_entry
  %0 = phi i32 [ 0, %sliceclone_entry ], [ %2, %sliceclone_for.inc ]
  %1 = icmp slt i32 %i.0, %N
  ret i32 %0

sliceclone_entry:                                 ; No predecessors!
  br label %sliceclone_for.cond

sliceclone_for.body:                              ; No predecessors!
  %2 = add nsw i32 %0, %x
  br label %sliceclone_for.inc
}

PHI FUNC HERE:   %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
ENDF
define internal i32 @_wyvern_slice_foo_i.0_448061406(i32 %N) {
_wyvern_unreachable:
  unreachable

sliceclone_for.inc:                               ; No predecessors!
  %0 = add nsw i32 %1, 1
  br label %sliceclone_for.cond

sliceclone_for.cond:                              ; preds = %sliceclone_for.inc, %sliceclone_entry
  %1 = phi i32 [ 0, %sliceclone_entry ], [ %0, %sliceclone_for.inc ]
  %2 = icmp slt i32 %1, %N
  ret i32 %1

sliceclone_entry:                                 ; No predecessors!
  br label %sliceclone_for.cond
}

ENDF
define internal i1 @_wyvern_slice_foo_cmp_21671474(i32 %N) {
_wyvern_unreachable:
  unreachable

sliceclone_for.inc:                               ; No predecessors!
  %0 = add nsw i32 %1, 1
  br label %sliceclone_for.cond

sliceclone_for.cond:                              ; preds = %sliceclone_for.inc, %sliceclone_entry
  %1 = phi i32 [ 0, %sliceclone_entry ], [ %0, %sliceclone_for.inc ]
  %2 = icmp slt i32 %1, %N
  ret i1 %2

sliceclone_entry:                                 ; No predecessors!
  br label %sliceclone_for.cond
}

ENDF
define internal i32 @_wyvern_slice_foo_add_453218727(i32 %x, i32 %sum.0) {
sliceclone_for.body:
  %0 = add nsw i32 %sum.0, %x
  ret i32 %0
}

ENDF
define internal i32 @_wyvern_slice_foo_inc_194886380(i32 %i.0) {
sliceclone_for.inc:
  %0 = add nsw i32 %i.0, 1
  ret i32 %0
}

PHI FUNC HERE:   %sum.0.lcssa = phi i32 [ %sum.0, %for.cond ]
ENDF
define internal i32 @_wyvern_slice_foo_sum.0.lcssa_155313011(i32 %x, i32 %N) {
sliceclone_entry:
  br label %sliceclone_for.cond

sliceclone_for.inc:                               ; preds = %sliceclone_for.body
  %0 = add nsw i32 %2, 1
  br label %sliceclone_for.cond

sliceclone_for.cond:                              ; preds = %sliceclone_for.inc, %sliceclone_entry
  %1 = phi i32 [ 0, %sliceclone_entry ], [ %4, %sliceclone_for.inc ]
  %2 = phi i32 [ 0, %sliceclone_entry ], [ %0, %sliceclone_for.inc ]
  %3 = icmp slt i32 %2, %N
  br i1 %3, label %sliceclone_for.body, label %sliceclone_for.end

sliceclone_for.body:                              ; preds = %sliceclone_for.cond
  %4 = add nsw i32 %1, %x
  br label %sliceclone_for.inc

sliceclone_for.end:                               ; preds = %sliceclone_for.cond
  %5 = phi i32 [ %1, %sliceclone_for.cond ]
  ret i32 %5
}

PHI FUNC HERE:   %sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ]
ENDF
define internal i32 @_wyvern_slice_bar_sum.0_826877704(i32 %y, i32 %SIZE, i32 %i.0) {
_wyvern_unreachable:
  unreachable

sliceclone_entry:                                 ; No predecessors!
  br label %sliceclone_for.cond

sliceclone_for.cond:                              ; preds = %sliceclone_for.inc, %sliceclone_entry
  %0 = phi i32 [ 0, %sliceclone_entry ], [ %2, %sliceclone_for.inc ]
  %1 = icmp slt i32 %i.0, %SIZE
  ret i32 %0

sliceclone_for.inc:                               ; preds = %sliceclone_for.body
  br label %sliceclone_for.cond

sliceclone_for.body:                              ; No predecessors!
  %2 = add nsw i32 %0, %y
  br label %sliceclone_for.inc
}

PHI FUNC HERE:   %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
ENDF
define internal i32 @_wyvern_slice_bar_i.0_121508109(i32 %SIZE) {
_wyvern_unreachable:
  unreachable

sliceclone_entry:                                 ; No predecessors!
  br label %sliceclone_for.cond

sliceclone_for.cond:                              ; preds = %sliceclone_for.inc, %sliceclone_entry
  %0 = phi i32 [ 0, %sliceclone_entry ], [ %2, %sliceclone_for.inc ]
  %1 = icmp slt i32 %0, %SIZE
  ret i32 %0

sliceclone_for.inc:                               ; No predecessors!
  %2 = add nsw i32 %0, 1
  br label %sliceclone_for.cond
}

ENDF
define internal i1 @_wyvern_slice_bar_cmp_869764285(i32 %SIZE) {
_wyvern_unreachable:
  unreachable

sliceclone_entry:                                 ; No predecessors!
  br label %sliceclone_for.cond

sliceclone_for.cond:                              ; preds = %sliceclone_for.inc, %sliceclone_entry
  %0 = phi i32 [ 0, %sliceclone_entry ], [ %2, %sliceclone_for.inc ]
  %1 = icmp slt i32 %0, %SIZE
  ret i1 %1

sliceclone_for.inc:                               ; No predecessors!
  %2 = add nsw i32 %0, 1
  br label %sliceclone_for.cond
}

ENDF
define internal i32 @_wyvern_slice_bar_add_522330604(i32 %y, i32 %sum.0) {
sliceclone_for.body:
  %0 = add nsw i32 %sum.0, %y
  ret i32 %0
}

ENDF
define internal i32 @_wyvern_slice_bar_inc_111988924(i32 %i.0) {
sliceclone_for.inc:
  %0 = add nsw i32 %i.0, 1
  ret i32 %0
}

PHI FUNC HERE:   %sum.0.lcssa = phi i32 [ %sum.0, %for.cond ]
ENDF
define internal i32 @_wyvern_slice_bar_sum.0.lcssa_609071724(i32 %y, i32 %SIZE) {
sliceclone_entry:
  br label %sliceclone_for.cond

sliceclone_for.cond:                              ; preds = %sliceclone_for.inc, %sliceclone_entry
  %0 = phi i32 [ 0, %sliceclone_entry ], [ %4, %sliceclone_for.inc ]
  %1 = phi i32 [ 0, %sliceclone_entry ], [ %3, %sliceclone_for.inc ]
  %2 = icmp slt i32 %1, %SIZE
  br i1 %2, label %sliceclone_for.body, label %sliceclone_for.end

sliceclone_for.inc:                               ; preds = %sliceclone_for.body
  %3 = add nsw i32 %1, 1
  br label %sliceclone_for.cond

sliceclone_for.body:                              ; preds = %sliceclone_for.cond
  %4 = add nsw i32 %0, %y
  br label %sliceclone_for.inc

sliceclone_for.end:                               ; preds = %sliceclone_for.cond
  %5 = phi i32 [ %0, %sliceclone_for.cond ]
  ret i32 %5
}

ENDF
define internal i32 @_wyvern_slice_bar_mul_367706111(i32 %y, i32 %SIZE, i32 %v) {
sliceclone_entry:
  br label %sliceclone_for.cond

sliceclone_for.cond:                              ; preds = %sliceclone_for.inc, %sliceclone_entry
  %0 = phi i32 [ 0, %sliceclone_entry ], [ %4, %sliceclone_for.inc ]
  %1 = phi i32 [ 0, %sliceclone_entry ], [ %3, %sliceclone_for.inc ]
  %2 = icmp slt i32 %1, %SIZE
  br i1 %2, label %sliceclone_for.body, label %sliceclone_for.end

sliceclone_for.inc:                               ; preds = %sliceclone_for.body
  %3 = add nsw i32 %1, 1
  br label %sliceclone_for.cond

sliceclone_for.body:                              ; preds = %sliceclone_for.cond
  %4 = add nsw i32 %0, %y
  br label %sliceclone_for.inc

sliceclone_for.end:                               ; preds = %sliceclone_for.cond
  %5 = phi i32 [ %0, %sliceclone_for.cond ]
  %6 = mul nsw i32 %v, %5
  ret i32 %6
}

Cannot outline because inst may not return:   %call2 = call i32 @bar(i32 noundef %argc, i32 noundef %add1, i32 noundef 2)
CANNOT OUTLINE:   %call2 = call i32 @bar(i32 noundef %argc, i32 noundef %add1, i32 noundef 2)
ENDF
define internal i32 @_wyvern_slice_main_add_324652155(i32 %argc) {
sliceclone_entry:
  %0 = add nsw i32 %argc, 10
  ret i32 %0
}

Cannot outline because inst may not return:   %call = call i32 @foo(i32 noundef %argc, i32 noundef %add)
CANNOT OUTLINE:   %call = call i32 @foo(i32 noundef %argc, i32 noundef %add)
ENDF
define internal i32 @_wyvern_slice_main_add1_160920691(i32 %argc) {
sliceclone_entry:
  %0 = add nsw i32 %argc, 20
  ret i32 %0
}

Cannot outline because inst may not return:   %call2 = call i32 @bar(i32 noundef %argc, i32 noundef %add1, i32 noundef 2)
CANNOT OUTLINE:   %add3 = add nsw i32 %call, %call2
; ModuleID = 'New_tests/test19.ll'
source_filename = "New_tests/test19.ll"
Instruction does not dominate all uses!
  %i.02 = call i32 @_wyvern_slice_foo_i.0_448061406(i32 %N)
  %sum.01 = call i32 @_wyvern_slice_foo_sum.0_57799407(i32 %x, i32 %N, i32 %i.02)
Instruction does not dominate all uses!
  %i.02 = call i32 @_wyvern_slice_bar_i.0_121508109(i32 %SIZE)
  %sum.01 = call i32 @_wyvern_slice_bar_sum.0_826877704(i32 %y, i32 %SIZE, i32 %i.02)
LLVM ERROR: Broken module found, compilation aborted!
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: opt -load-pass-plugin build/lib/libdaedalus.so -passes=daedalus -S tests/test19.ll -o tests/test19_F.ll
 #0 0x00007f688a944e78 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /home/daniel/llvm-project/llvm/lib/Support/Unix/Signals.inc:602:22
 #1 0x00007f688a94524c PrintStackTraceSignalHandler(void*) /home/daniel/llvm-project/llvm/lib/Support/Unix/Signals.inc:675:1
 #2 0x00007f688a942a42 llvm::sys::RunSignalHandlers() /home/daniel/llvm-project/llvm/lib/Support/Signals.cpp:104:20
 #3 0x00007f688a9447ac SignalHandler(int) /home/daniel/llvm-project/llvm/lib/Support/Unix/Signals.inc:413:1
 #4 0x00007f688a18b090 (/lib/x86_64-linux-gnu/libc.so.6+0x43090)
 #5 0x00007f688a18b00b raise /build/glibc-e2p3jK/glibc-2.31/signal/../sysdeps/unix/sysv/linux/raise.c:51:1
 #6 0x00007f688a16a859 abort /build/glibc-e2p3jK/glibc-2.31/stdlib/abort.c:81:7
 #7 0x00007f688a815ccf llvm::report_fatal_error(llvm::Twine const&, bool) /home/daniel/llvm-project/llvm/lib/Support/ErrorHandling.cpp:125:9
 #8 0x00007f688a815ab2 llvm::report_fatal_error(llvm::StringRef, bool) /home/daniel/llvm-project/llvm/lib/Support/ErrorHandling.cpp:86:68
 #9 0x00007f688b351c75 llvm::VerifierPass::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) /home/daniel/llvm-project/llvm/lib/IR/Verifier.cpp:7136:33
#10 0x000055a3827d5f67 llvm::detail::PassModel<llvm::Module, llvm::VerifierPass, llvm::PreservedAnalyses, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) /home/daniel/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:90:3
#11 0x00007f688b2abc99 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) /home/daniel/llvm-project/llvm/include/llvm/IR/PassManager.h:521:7
#12 0x000055a3827afe26 llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) /home/daniel/llvm-project/llvm/tools/opt/NewPMDriver.cpp:527:10
#13 0x000055a3827dceb7 main /home/daniel/llvm-project/llvm/tools/opt/opt.cpp:709:27
#14 0x00007f688a16c083 __libc_start_main /build/glibc-e2p3jK/glibc-2.31/csu/../csu/libc-start.c:342:3
#15 0x000055a3827ad24e _start (/home/daniel/llvm-project/build/bin/opt+0x7224e)
Aborted (core dumped)

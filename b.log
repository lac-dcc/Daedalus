== OUTLINING INST PHASE ==
Instruction:	  %div = fdiv float %conv, 1.000000e+06
[31m[0m[32moutlined![0m
Instruction:	  %sub = fsub float %call12, %call11
[31m[0m[32moutlined![0m
Instruction:	  %mul = mul nsw i32 %7, %8
[31m[0m[32moutlined![0m
Instruction:	  %mul5 = mul nsw i32 %mul, %9
[31m[0m[32moutlined![0m
Instruction:	  %mul6 = fmul double 2.000000e+00, %conv
[31m[0m[32moutlined![0m
Instruction:	  %div = fdiv double %mul6, 3.000000e+00
[31m[0m[32moutlined![0m
Instruction:	  %mul7 = mul nsw i32 %10, %11
[31m[0m[32moutlined![0m
Instruction:	  %sub15 = fsub float %call14, %call13
[31m[0m[32moutlined![0m
Instruction:	  %add = fadd float %19, %20
[31m[0m[32moutlined![0m
Instruction:	  %inc = add nsw i32 %26, 1
[31m[0m[32moutlined![0m
Instruction:	  %inc28 = add nsw i32 %34, 1
[31m[0m[32moutlined![0m
Instruction:	  %add126 = add nsw i32 %pass.1, 1
[31m[0m[32moutlined![0m
Instruction:	  %inc61 = add nsw i32 %52, 1
[31m[0m[32moutlined![0m
Instruction:	  %mul65 = fmul float %conv64, %54
[31m[0m[32moutlined![0m
Instruction:	  %mul66 = fmul float %mul65, %normx.0.lcssa
[31m[0m[32moutlined![0m
Instruction:	  %mul67 = fmul float %mul66, %call63
[31m[0m[32moutlined![0m
Instruction:	  %div68 = fdiv float %resid.0.lcssa, %mul67
[31m[0m[32moutlined![0m
Instruction:	  %sub69 = fsub float %55, 1.000000e+00
[31m[0m[32moutlined![0m
Instruction:	  %sub70 = sub nsw i32 %56, 1
[31m[0m[32moutlined![0m
Instruction:	  %sub73 = fsub float %57, 1.000000e+00
[31m[0m[32moutlined![0m
Instruction:	  %div172 = fdiv float %sub170, %conv171
[31m[0m[32moutlined![0m
Instruction:	  %mul91 = fmul double 1.000000e+06, %conv90
[31m[0m[32moutlined![0m
Instruction:	  %div92 = fdiv double %conv89, %mul91
[31m[0m[32moutlined![0m
Instruction:	  %div95 = fdiv double 2.000000e+00, %conv94
[31m[0m[32moutlined![0m
Instruction:	  %div97 = fdiv float %add, 0x3FACAC0840000000
[31m[0m[32moutlined![0m
Instruction:	  %add100 = add nsw i32 %pass.0, 1
[31m[0m[32moutlined![0m
Instruction:	  %inc106 = add nsw i32 %72, 1
[31m[0m[32moutlined![0m
Instruction:	  %sub109 = fsub float %call108, %call99
[31m[0m[32moutlined![0m
Instruction:	  %mul114 = mul nsw i32 %loop.0, 2
[31m[0mInstruction:	  %div120 = fdiv double %conv118, %conv119
[31m[0m[32moutlined![0m
Instruction:	  %inc132 = add nsw i32 %82, 1
[31m[0m[32moutlined![0m
Instruction:	  %sub135 = fsub float %call134, %call125
[31m[0m[32moutlined![0m
Instruction:	  %mul140 = mul nsw i32 %85, 2
[31m[0m[32moutlined![0m
Instruction:	  %mul155 = fmul float %conv154, %conv121
[31m[0m[32moutlined![0m
Instruction:	  %inc166 = add nsw i32 %100, 1
[31m[0m[32moutlined![0m
Instruction:	  %sub169 = fsub float %call168, %call160
[31m[0m[32moutlined![0m
Instruction:	  %sub170 = fsub float %sub169, %mul155
[31m[0m[32moutlined![0m
Instruction:	  %inc181 = add nsw i32 %107, 1
[31m[0m[32moutlined![0m
Instruction:	  %sub184 = fsub float %call183, %call175
[31m[0m[32moutlined![0m
Instruction:	  %div186 = fdiv float %sub184, %conv185
[31m[0m[32moutlined![0m
Instruction:	  %add193 = fadd float %111, %113
[31m[0m[32moutlined![0m
Instruction:	  %mul198 = fmul double 1.000000e+06, %conv197
[31m[0m[32moutlined![0m
Instruction:	  %div199 = fdiv double %conv196, %mul198
[31m[0m[32moutlined![0m
Instruction:	  %div206 = fdiv double 2.000000e+00, %conv205
[31m[0m[32moutlined![0m
Instruction:	  %div210 = fdiv float %add193, 0x3FACAC0840000000
[31m[0m[32moutlined![0m
Instruction:	  %add215 = fadd float %120, %122
[31m[0m[32moutlined![0m
Instruction:	  %inc217 = add nsw i32 %124, 1
[31m[0m[32moutlined![0m
Instruction:	  %div220 = fdiv double %conv219, 5.000000e+00
[31m[0m[32moutlined![0m
Instruction:	  %inc230 = add nsw i32 %131, 1
[31m[0m[32moutlined![0m
Instruction:	  %sub233 = fsub float %call232, %call224
[31m[0m[32moutlined![0m
Instruction:	  %div236 = fdiv double %conv234, %conv235
[31m[0m[32moutlined![0m
Instruction:	  %mul243 = fmul float %conv242, %conv237
[31m[0m[32moutlined![0m
Instruction:	  %inc254 = add nsw i32 %145, 1
[31m[0m[32moutlined![0m
Instruction:	  %sub257 = fsub float %call256, %call248
[31m[0m[32moutlined![0m
Instruction:	  %sub258 = fsub float %sub257, %mul243
[31m[0m[32moutlined![0m
Instruction:	  %div260 = fdiv float %sub258, %conv259
[31m[0m[32moutlined![0m
Instruction:	  %inc269 = add nsw i32 %152, 1
[31m[0m[32moutlined![0m
Instruction:	  %sub272 = fsub float %call271, %call263
[31m[0m[32moutlined![0m
Instruction:	  %div274 = fdiv float %sub272, %conv273
[31m[0m[32moutlined![0m
Instruction:	  %add281 = fadd float %156, %158
[31m[0m[32moutlined![0m
Instruction:	  %mul286 = fmul double 1.000000e+06, %conv285
[31m[0m[32moutlined![0m
Instruction:	  %div287 = fdiv double %conv284, %mul286
[31m[0m[32moutlined![0m
Instruction:	  %div294 = fdiv double 2.000000e+00, %conv293
[31m[0m[32moutlined![0m
Instruction:	  %div298 = fdiv float %add281, 0x3FACAC0840000000
[31m[0m[32moutlined![0m
Instruction:	  %add303 = fadd float %165, %167
[31m[0m[32moutlined![0m
Instruction:	  %inc305 = add nsw i32 %169, 1
[31m[0m[32moutlined![0m
Instruction:	  %div308 = fdiv double %conv307, 5.000000e+00
[31m[0m[32moutlined![0m
Instruction:	  %mul = mul nsw i32 3125, %init.1
[31m[0mInstruction:	  %rem = srem i32 %mul, 65536
[31m[0m[32moutlined![0m
Instruction:	  %sub = fsub double %conv, 3.276800e+04
[31m[0m[32moutlined![0m
Instruction:	  %div = fdiv double %sub, 1.638400e+04
[31m[0m[32moutlined![0m
Instruction:	  %mul5 = mul nsw i32 %lda, %j.0
[31m[0mInstruction:	  %add = add nsw i32 %mul5, %i.0
[31m[0m[32moutlined![0m
Instruction:	  %mul6 = mul nsw i32 %lda, %j.0
[31m[0mInstruction:	  %add7 = add nsw i32 %mul6, %i.0
[31m[0m[32moutlined![0m
Instruction:	  %mul12 = mul nsw i32 %lda, %j.0
[31m[0mInstruction:	  %add13 = add nsw i32 %mul12, %i.0
[31m[0m[32moutlined![0m
Instruction:	  %inc = add nsw i32 %i.0, 1
[31m[0mInstruction:	  %inc17 = add nsw i32 %j.0, 1
[31m[0mInstruction:	  %inc26 = add nsw i32 %i.1, 1
[31m[0mInstruction:	  %mul38 = mul nsw i32 %lda, %j.1
[31m[0mInstruction:	  %add39 = add nsw i32 %mul38, %i.2
[31m[0m[32moutlined![0m
Instruction:	  %add42 = fadd float %4, %5
[31m[0m[32moutlined![0m
Instruction:	  %inc46 = add nsw i32 %i.2, 1
[31m[0mInstruction:	  %inc49 = add nsw i32 %j.1, 1
[31m[0mInstruction:	  %sub = sub nsw i32 %n, 1
[31m[0mInstruction:	  %add = add nsw i32 %k.0, 1
[31m[0mInstruction:	  %sub2 = sub nsw i32 %n, %k.0
[31m[0mInstruction:	  %mul = mul nsw i32 %lda, %k.0
[31m[0mInstruction:	  %add3 = add nsw i32 %mul, %k.0
[31m[0m[32moutlined![0m
Instruction:	  %add4 = add nsw i32 %call, %k.0
[31m[0m[32moutlined![0m
Instruction:	  %mul7 = mul nsw i32 %lda, %k.0
[31m[0mInstruction:	  %add8 = add nsw i32 %mul7, %add4
[31m[0m[32moutlined![0m
Instruction:	  %mul17 = mul nsw i32 %lda, %k.0
[31m[0mInstruction:	  %add18 = add nsw i32 %mul17, %add4
[31m[0m[32moutlined![0m
Instruction:	  %mul21 = mul nsw i32 %lda, %k.0
[31m[0mInstruction:	  %add22 = add nsw i32 %mul21, %k.0
[31m[0m[32moutlined![0m
Instruction:	  %mul25 = mul nsw i32 %lda, %k.0
[31m[0mInstruction:	  %add26 = add nsw i32 %mul25, %add4
[31m[0m[32moutlined![0m
Instruction:	  %mul77 = mul nsw i32 %lda, %j.0
[31m[0mInstruction:	  %add78 = add nsw i32 %mul77, %k.0
[31m[0m[32moutlined![0m
Instruction:	  %add79 = add nsw i32 %add78, 1
[31m[0m[32moutlined![0m
Instruction:	  %mul29 = mul nsw i32 %lda, %k.0
[31m[0mInstruction:	  %add30 = add nsw i32 %mul29, %k.0
[31m[0m[32moutlined![0m
Instruction:	  %mul33 = mul nsw i32 %lda, %k.0
[31m[0mInstruction:	  %add34 = add nsw i32 %mul33, %k.0
[31m[0m[32moutlined![0m
Instruction:	  %div = fdiv double -1.000000e+00, %conv37
[31m[0m[32moutlined![0m
Instruction:	  %add39 = add nsw i32 %k.0, 1
[31m[0mInstruction:	  %sub40 = sub nsw i32 %n, %add39
[31m[0m[32moutlined![0m
Instruction:	  %mul41 = mul nsw i32 %lda, %k.0
[31m[0mInstruction:	  %add42 = add nsw i32 %mul41, %k.0
[31m[0m[32moutlined![0m
Instruction:	  %add43 = add nsw i32 %add42, 1
[31m[0m[32moutlined![0m
Instruction:	  %mul50 = mul nsw i32 %lda, %j.0
[31m[0mInstruction:	  %add51 = add nsw i32 %mul50, %add4
[31m[0m[32moutlined![0m
Instruction:	  %mul57 = mul nsw i32 %lda, %j.0
[31m[0mInstruction:	  %add58 = add nsw i32 %mul57, %k.0
[31m[0m[32moutlined![0m
Instruction:	  %mul61 = mul nsw i32 %lda, %j.0
[31m[0mInstruction:	  %add62 = add nsw i32 %mul61, %add4
[31m[0m[32moutlined![0m
Instruction:	  %mul65 = mul nsw i32 %lda, %j.0
[31m[0mInstruction:	  %add66 = add nsw i32 %mul65, %k.0
[31m[0m[32moutlined![0m
Instruction:	  %add70 = add nsw i32 %k.0, 1
[31m[0mInstruction:	  %sub71 = sub nsw i32 %n, %add70
[31m[0m[32moutlined![0m
Instruction:	  %mul72 = mul nsw i32 %lda, %k.0
[31m[0mInstruction:	  %add73 = add nsw i32 %mul72, %k.0
[31m[0m[32moutlined![0m
Instruction:	  %add74 = add nsw i32 %add73, 1
[31m[0m[32moutlined![0m
Instruction:	  %inc = add nsw i32 %j.0, 1
[31m[0mInstruction:	  %inc84 = add nsw i32 %k.0, 1
[31m[0mInstruction:	  %sub87 = sub nsw i32 %n, 1
[31m[0mInstruction:	  %sub88 = sub nsw i32 %n, 1
[31m[0mInstruction:	  %sub91 = sub nsw i32 %n, 1
[31m[0mInstruction:	  %mul92 = mul nsw i32 %lda, %sub91
[31m[0m[32moutlined![0m
Instruction:	  %sub93 = sub nsw i32 %n, 1
[31m[0mInstruction:	  %add94 = add nsw i32 %mul92, %sub93
[31m[0m[32moutlined![0m
Instruction:	  %sub101 = sub nsw i32 %n, 1
[31m[0mInstruction:	  %sub = sub nsw i32 %n, 1
[31m[0mInstruction:	  %add = add nsw i32 %k.0, 1
[31m[0mInstruction:	  %sub14 = sub nsw i32 %n, %add
[31m[0m[32moutlined![0m
Instruction:	  %mul = mul nsw i32 %lda, %k.0
[31m[0mInstruction:	  %add15 = add nsw i32 %mul, %k.0
[31m[0m[32moutlined![0m
Instruction:	  %add16 = add nsw i32 %add15, 1
[31m[0m[32moutlined![0m
Instruction:	  %add19 = add nsw i32 %k.0, 1
[31m[0mInstruction:	  %inc = add nsw i32 %k.0, 1
[31m[0mInstruction:	  %add26 = add nsw i32 %kb.0, 1
[31m[0mInstruction:	  %sub27 = sub nsw i32 %n, %add26
[31m[0m[32moutlined![0m
Instruction:	  %mul30 = mul nsw i32 %lda, %sub27
[31m[0m[32moutlined![0m
Instruction:	  %add31 = add nsw i32 %mul30, %sub27
[31m[0m[32moutlined![0m
Instruction:	  %div = fdiv float %3, %4
[31m[0m[32moutlined![0m
Instruction:	  %mul38 = mul nsw i32 %lda, %sub27
[31m[0m[32moutlined![0m
Instruction:	  %add39 = add nsw i32 %mul38, 0
[31m[0m[32moutlined![0m
Instruction:	  %inc44 = add nsw i32 %kb.0, 1
[31m[0mInstruction:	  %mul49 = mul nsw i32 %lda, %k.1
[31m[0mInstruction:	  %add50 = add nsw i32 %mul49, 0
[31m[0m[32moutlined![0m
Instruction:	  %sub56 = fsub float %6, %call
[31m[0m[32moutlined![0m
Instruction:	  %mul57 = mul nsw i32 %lda, %k.1
[31m[0mInstruction:	  %add58 = add nsw i32 %mul57, %k.1
[31m[0m[32moutlined![0m
Instruction:	  %div61 = fdiv float %sub56, %7
[31m[0m[32moutlined![0m
Instruction:	  %inc65 = add nsw i32 %k.1, 1
[31m[0mInstruction:	  %add72 = add nsw i32 %kb.1, 1
[31m[0mInstruction:	  %sub73 = sub nsw i32 %n, %add72
[31m[0m[32moutlined![0m
Instruction:	  %add76 = add nsw i32 %sub73, 1
[31m[0m[32moutlined![0m
Instruction:	  %sub77 = sub nsw i32 %n, %add76
[31m[0m[32moutlined![0m
Instruction:	  %mul78 = mul nsw i32 %lda, %sub73
[31m[0m[32moutlined![0m
Instruction:	  %add79 = add nsw i32 %mul78, %sub73
[31m[0m[32moutlined![0m
Instruction:	  %add80 = add nsw i32 %add79, 1
[31m[0m[32moutlined![0m
Instruction:	  %add83 = add nsw i32 %sub73, 1
[31m[0m[32moutlined![0m
Instruction:	  %add87 = fadd float %8, %call86
[31m[0m[32moutlined![0m
Instruction:	  %inc104 = add nsw i32 %kb.1, 1
[31m[0mInstruction:	  %add30 = add nsw i32 %mul29, %i.1
[31m[0m[32moutlined![0m
Instruction:	  %inc37 = add nsw i32 %i.1, 1
[31m[0mInstruction:	  %rem40 = srem i32 %n2, 8
[31m[0mInstruction:	  %sub43 = sub nsw i32 %rem40, 1
[31m[0m[32moutlined![0m
Instruction:	  %sub49 = sub nsw i32 %sub43, 3
[31m[0m[32moutlined![0m
Instruction:	  %sub52 = sub nsw i32 %sub43, 3
[31m[0m[32moutlined![0m
Instruction:	  %mul53 = mul nsw i32 %ldm, %sub52
[31m[0m[32moutlined![0m
Instruction:	  %add54 = add nsw i32 %mul53, %i.2
[31m[0m[32moutlined![0m
Instruction:	  %sub58 = sub nsw i32 %sub43, 2
[31m[0m[32moutlined![0m
Instruction:	  %sub61 = sub nsw i32 %sub43, 2
[31m[0m[32moutlined![0m
Instruction:	  %mul62 = mul nsw i32 %ldm, %sub61
[31m[0m[32moutlined![0m
Instruction:	  %add63 = add nsw i32 %mul62, %i.2
[31m[0m[32moutlined![0m
Instruction:	  %sub70 = sub nsw i32 %sub43, 1
[31m[0m[32moutlined![0m
Instruction:	  %mul71 = mul nsw i32 %ldm, %sub70
[31m[0m[32moutlined![0m
Instruction:	  %add72 = add nsw i32 %mul71, %i.2
[31m[0m[32moutlined![0m
Instruction:	  %sub185 = sub nsw i32 %j.0, 15
[31m[0mInstruction:	  %sub188 = sub nsw i32 %j.0, 15
[31m[0mInstruction:	  %mul189 = mul nsw i32 %ldm, %sub188
[31m[0m[32moutlined![0m
Instruction:	  %add190 = add nsw i32 %mul189, %i.4
[31m[0m[32moutlined![0m
Instruction:	  %inc86 = add nsw i32 %i.2, 1
[31m[0mInstruction:	  %rem89 = srem i32 %n2, 16
[31m[0mInstruction:	  %sub92 = sub nsw i32 %rem89, 1
[31m[0m[32moutlined![0m
Instruction:	  %rem = srem i32 %n2, 2
[31m[0mInstruction:	  %sub = sub nsw i32 %rem, 1
[31m[0m[32moutlined![0m
Instruction:	  %mul = mul nsw i32 %ldm, %sub
[31m[0m[32moutlined![0m
Instruction:	  %add = add nsw i32 %mul, %i.0
[31m[0m[32moutlined![0m
Instruction:	  %inc = add nsw i32 %i.0, 1
[31m[0mInstruction:	  %rem9 = srem i32 %n2, 4
[31m[0mInstruction:	  %sub12 = sub nsw i32 %rem9, 1
[31m[0m[32moutlined![0m
Instruction:	  %sub18 = sub nsw i32 %sub12, 1
[31m[0m[32moutlined![0m
Instruction:	  %sub21 = sub nsw i32 %sub12, 1
[31m[0m[32moutlined![0m
Instruction:	  %mul22 = mul nsw i32 %ldm, %sub21
[31m[0m[32moutlined![0m
Instruction:	  %add23 = add nsw i32 %mul22, %i.1
[31m[0m[32moutlined![0m
Instruction:	  %mul78 = mul nsw i32 %ldm, %sub43
[31m[0m[32moutlined![0m
Instruction:	  %add79 = add nsw i32 %mul78, %i.2
[31m[0m[32moutlined![0m
Instruction:	  %sub67 = sub nsw i32 %sub43, 1
[31m[0m[32moutlined![0m
Instruction:	  %mul29 = mul nsw i32 %ldm, %sub12
[31m[0m[32moutlined![0m
Instruction:	  %sub98 = sub nsw i32 %sub92, 7
[31m[0m[32moutlined![0m
Instruction:	  %sub101 = sub nsw i32 %sub92, 7
[31m[0m[32moutlined![0m
Instruction:	  %mul102 = mul nsw i32 %ldm, %sub101
[31m[0m[32moutlined![0m
Instruction:	  %add103 = add nsw i32 %mul102, %i.3
[31m[0m[32moutlined![0m
Instruction:	  %sub107 = sub nsw i32 %sub92, 6
[31m[0m[32moutlined![0m
Instruction:	  %sub110 = sub nsw i32 %sub92, 6
[31m[0m[32moutlined![0m
Instruction:	  %mul111 = mul nsw i32 %ldm, %sub110
[31m[0m[32moutlined![0m
Instruction:	  %add112 = add nsw i32 %mul111, %i.3
[31m[0m[32moutlined![0m
Instruction:	  %sub116 = sub nsw i32 %sub92, 5
[31m[0m[32moutlined![0m
Instruction:	  %sub119 = sub nsw i32 %sub92, 5
[31m[0m[32moutlined![0m
Instruction:	  %mul120 = mul nsw i32 %ldm, %sub119
[31m[0m[32moutlined![0m
Instruction:	  %add121 = add nsw i32 %mul120, %i.3
[31m[0m[32moutlined![0m
Instruction:	  %sub125 = sub nsw i32 %sub92, 4
[31m[0m[32moutlined![0m
Instruction:	  %sub128 = sub nsw i32 %sub92, 4
[31m[0m[32moutlined![0m
Instruction:	  %mul129 = mul nsw i32 %ldm, %sub128
[31m[0m[32moutlined![0m
Instruction:	  %add130 = add nsw i32 %mul129, %i.3
[31m[0m[32moutlined![0m
Instruction:	  %sub134 = sub nsw i32 %sub92, 3
[31m[0m[32moutlined![0m
Instruction:	  %sub137 = sub nsw i32 %sub92, 3
[31m[0m[32moutlined![0m
Instruction:	  %mul138 = mul nsw i32 %ldm, %sub137
[31m[0m[32moutlined![0m
Instruction:	  %add139 = add nsw i32 %mul138, %i.3
[31m[0m[32moutlined![0m
Instruction:	  %sub143 = sub nsw i32 %sub92, 2
[31m[0m[32moutlined![0m
Instruction:	  %sub146 = sub nsw i32 %sub92, 2
[31m[0m[32moutlined![0m
Instruction:	  %mul147 = mul nsw i32 %ldm, %sub146
[31m[0m[32moutlined![0m
Instruction:	  %add148 = add nsw i32 %mul147, %i.3
[31m[0m[32moutlined![0m
Instruction:	  %sub152 = sub nsw i32 %sub92, 1
[31m[0m[32moutlined![0m
Instruction:	  %sub155 = sub nsw i32 %sub92, 1
[31m[0m[32moutlined![0m
Instruction:	  %mul156 = mul nsw i32 %ldm, %sub155
[31m[0m[32moutlined![0m
Instruction:	  %add157 = add nsw i32 %mul156, %i.3
[31m[0m[32moutlined![0m
Instruction:	  %mul163 = mul nsw i32 %ldm, %sub92
[31m[0m[32moutlined![0m
Instruction:	  %add164 = add nsw i32 %mul163, %i.3
[31m[0m[32moutlined![0m
Instruction:	  %inc171 = add nsw i32 %i.3, 1
[31m[0mInstruction:	  %rem174 = srem i32 %n2, 16
[31m[0mInstruction:	  %add175 = add nsw i32 %rem174, 16
[31m[0m[32moutlined![0m
Instruction:	  %sub176 = sub nsw i32 %add175, 1
[31m[0m[32moutlined![0m
Instruction:	  %sub194 = sub nsw i32 %j.0, 14
[31m[0mInstruction:	  %sub197 = sub nsw i32 %j.0, 14
[31m[0mInstruction:	  %mul198 = mul nsw i32 %ldm, %sub197
[31m[0m[32moutlined![0m
Instruction:	  %add199 = add nsw i32 %mul198, %i.4
[31m[0m[32moutlined![0m
Instruction:	  %sub203 = sub nsw i32 %j.0, 13
[31m[0mInstruction:	  %sub206 = sub nsw i32 %j.0, 13
[31m[0mInstruction:	  %mul207 = mul nsw i32 %ldm, %sub206
[31m[0m[32moutlined![0m
Instruction:	  %add208 = add nsw i32 %mul207, %i.4
[31m[0m[32moutlined![0m
Instruction:	  %sub212 = sub nsw i32 %j.0, 12
[31m[0mInstruction:	  %sub215 = sub nsw i32 %j.0, 12
[31m[0mInstruction:	  %mul216 = mul nsw i32 %ldm, %sub215
[31m[0m[32moutlined![0m
Instruction:	  %add217 = add nsw i32 %mul216, %i.4
[31m[0m[32moutlined![0m
Instruction:	  %sub221 = sub nsw i32 %j.0, 11
[31m[0mInstruction:	  %sub224 = sub nsw i32 %j.0, 11
[31m[0mInstruction:	  %mul225 = mul nsw i32 %ldm, %sub224
[31m[0m[32moutlined![0m
Instruction:	  %add226 = add nsw i32 %mul225, %i.4
[31m[0m[32moutlined![0m
Instruction:	  %sub230 = sub nsw i32 %j.0, 10
[31m[0mInstruction:	  %sub233 = sub nsw i32 %j.0, 10
[31m[0mInstruction:	  %mul234 = mul nsw i32 %ldm, %sub233
[31m[0m[32moutlined![0m
Instruction:	  %add235 = add nsw i32 %mul234, %i.4
[31m[0m[32moutlined![0m
Instruction:	  %sub239 = sub nsw i32 %j.0, 9
[31m[0mInstruction:	  %sub242 = sub nsw i32 %j.0, 9
[31m[0mInstruction:	  %mul243 = mul nsw i32 %ldm, %sub242
[31m[0m[32moutlined![0m
Instruction:	  %add244 = add nsw i32 %mul243, %i.4
[31m[0m[32moutlined![0m
Instruction:	  %sub248 = sub nsw i32 %j.0, 8
[31m[0mInstruction:	  %sub251 = sub nsw i32 %j.0, 8
[31m[0mInstruction:	  %mul252 = mul nsw i32 %ldm, %sub251
[31m[0m[32moutlined![0m
Instruction:	  %add253 = add nsw i32 %mul252, %i.4
[31m[0m[32moutlined![0m
Instruction:	  %sub257 = sub nsw i32 %j.0, 7
[31m[0mInstruction:	  %sub260 = sub nsw i32 %j.0, 7
[31m[0mInstruction:	  %mul261 = mul nsw i32 %ldm, %sub260
[31m[0m[32moutlined![0m
Instruction:	  %add262 = add nsw i32 %mul261, %i.4
[31m[0m[32moutlined![0m
Instruction:	  %sub266 = sub nsw i32 %j.0, 6
[31m[0mInstruction:	  %sub269 = sub nsw i32 %j.0, 6
[31m[0mInstruction:	  %mul270 = mul nsw i32 %ldm, %sub269
[31m[0m[32moutlined![0m
Instruction:	  %add271 = add nsw i32 %mul270, %i.4
[31m[0m[32moutlined![0m
Instruction:	  %sub275 = sub nsw i32 %j.0, 5
[31m[0mInstruction:	  %sub278 = sub nsw i32 %j.0, 5
[31m[0mInstruction:	  %mul279 = mul nsw i32 %ldm, %sub278
[31m[0m[32moutlined![0m
Instruction:	  %add280 = add nsw i32 %mul279, %i.4
[31m[0m[32moutlined![0m
Instruction:	  %sub284 = sub nsw i32 %j.0, 4
[31m[0mInstruction:	  %sub287 = sub nsw i32 %j.0, 4
[31m[0mInstruction:	  %mul288 = mul nsw i32 %ldm, %sub287
[31m[0m[32moutlined![0m
Instruction:	  %add289 = add nsw i32 %mul288, %i.4
[31m[0m[32moutlined![0m
Instruction:	  %sub293 = sub nsw i32 %j.0, 3
[31m[0mInstruction:	  %sub296 = sub nsw i32 %j.0, 3
[31m[0mInstruction:	  %mul297 = mul nsw i32 %ldm, %sub296
[31m[0m[32moutlined![0m
Instruction:	  %add298 = add nsw i32 %mul297, %i.4
[31m[0m[32moutlined![0m
Instruction:	  %sub302 = sub nsw i32 %j.0, 2
[31m[0mInstruction:	  %sub305 = sub nsw i32 %j.0, 2
[31m[0mInstruction:	  %mul306 = mul nsw i32 %ldm, %sub305
[31m[0m[32moutlined![0m
Instruction:	  %add307 = add nsw i32 %mul306, %i.4
[31m[0m[32moutlined![0m
Instruction:	  %sub311 = sub nsw i32 %j.0, 1
[31m[0mInstruction:	  %sub314 = sub nsw i32 %j.0, 1
[31m[0mInstruction:	  %mul315 = mul nsw i32 %ldm, %sub314
[31m[0m[32moutlined![0m
Instruction:	  %add316 = add nsw i32 %mul315, %i.4
[31m[0m[32moutlined![0m
Instruction:	  %mul322 = mul nsw i32 %ldm, %j.0
[31m[0mInstruction:	  %add323 = add nsw i32 %mul322, %i.4
[31m[0m[32moutlined![0m
Instruction:	  %inc330 = add nsw i32 %i.4, 1
[31m[0mInstruction:	  %add333 = add nsw i32 %j.0, 16
[31m[0mInstruction:	  %sub = fsub double %conv2, 1.000000e+00
[31m[0m[32moutlined![0m
Instruction:	  %add = fadd float %conv3, %conv3
[31m[0m[32moutlined![0m
Instruction:	  %add4 = fadd float %add, %conv3
[31m[0m[32moutlined![0m
Instruction:	  %sub6 = fsub double %conv5, 1.000000e+00
[31m[0m[32moutlined![0m
Instruction:	  %mul = fmul double %conv8, %1
[31m[0m[32moutlined![0m
Instruction:	  %add = add nsw i32 1, %incx
[31m[0mInstruction:	  %add20 = add nsw i32 %ix.0, %incx
[31m[0mInstruction:	  %inc = add nsw i32 %i.0, 1
[31m[0mInstruction:	  %inc41 = add nsw i32 %i.1, 1
[31m[0mInstruction:	  %mul = mul nsw i32 %n, %incx
[31m[0mInstruction:	  %mul4 = fmul float %da, %0
[31m[0m[32moutlined![0m
Instruction:	  %add = add nsw i32 %i.0, %incx
[31m[0mInstruction:	  %mul13 = fmul float %da, %1
[31m[0m[32moutlined![0m
Instruction:	  %inc = add nsw i32 %i.1, 1
[31m[0mInstruction:	  %mul = mul nsw i32 %add, %incx
[31m[0m[32moutlined![0m
Instruction:	  %sub = sub nsw i32 0, %n
[31m[0mInstruction:	  %add = add nsw i32 %sub, 1
[31m[0m[32moutlined![0m
Instruction:	  %add29 = add nsw i32 %iy.1, %incy
[31m[0mInstruction:	  %inc = add nsw i32 %i.0, 1
[31m[0mInstruction:	  %sub17 = sub nsw i32 0, %n
[31m[0mInstruction:	  %add18 = add nsw i32 %sub17, 1
[31m[0m[32moutlined![0m
Instruction:	  %mul19 = mul nsw i32 %add18, %incy
[31m[0m[32moutlined![0m
Instruction:	  %add28 = add nsw i32 %ix.1, %incx
[31m[0mInstruction:	  %inc43 = add nsw i32 %i.1, 1
[31m[0mInstruction:	  %sub9 = sub nsw i32 0, %n
[31m[0mInstruction:	  %sub = sub nsw i32 0, %n
[31m[0mInstruction:	  %add = add nsw i32 %sub, 1
[31m[0m[32moutlined![0m
Instruction:	  %mul = mul nsw i32 %add, %incx
[31m[0m[32moutlined![0m
Instruction:	  %add10 = add nsw i32 %sub9, 1
[31m[0m[32moutlined![0m
Instruction:	  %mul11 = mul nsw i32 %add10, %incy
[31m[0m[32moutlined![0m
Instruction:	  %add17 = add nsw i32 %ix.1, %incx
[31m[0mInstruction:	  %add18 = add nsw i32 %iy.1, %incy
[31m[0mInstruction:	  %inc = add nsw i32 %i.0, 1
[31m[0mInstruction:	  %inc29 = add nsw i32 %i.1, 1
[31m[0m== REMOVING MERGE PHASE ==
== REMOVING INST PHASE ==
TO remove:
	  %div = fdiv float %conv, 1.000000e+06 from: second
removed!

	  %call = call i64 @clock() #6 from: second
removed!

	  %conv = sitofp i64 undef to float from: second
removed!

	  %7 = load i32, ptr @main.n, align 4 from: main
removed!

	  %7 = load i32, ptr @main.n, align 4 from: main
removed!

	  %sub = fsub float %call12, %call11 from: main
removed!

	  %mul = mul nsw i32 undef, undef from: main
removed!

	  %7 = load i32, ptr @main.n, align 4 from: main
removed!

	  %mul5 = mul nsw i32 %mul2, undef from: main
removed!

	  %conv = sitofp i32 %mul53 to double from: main
removed!

	  %mul6 = fmul double 2.000000e+00, undef from: main
removed!

	  %div = fdiv double %mul64, 3.000000e+00 from: main
removed!

	  %7 = load i32, ptr @main.n, align 4 from: main
removed!

	  %7 = load i32, ptr @main.n, align 4 from: main
removed!

	  %mul7 = mul nsw i32 undef, undef from: main
removed!

	  %call11 = call float @second() from: main
removed!

	  %call12 = call float @second() from: main
removed!

	  %call13 = call float @second() from: main
removed!

	  %call14 = call float @second() from: main
removed!

	  %sub15 = fsub float undef, undef from: main
removed!

	  %14 = load float, ptr @atime, align 16 from: main
removed!

	  %14 = load float, ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 1), align 4 from: main
removed!

	  %add = fadd float undef, undef from: main
removed!

	  %19 = load i32, ptr @main.i, align 4 from: main
removed!

	  %inc = add nsw i32 undef, 1 from: main
removed!

	  %26 = load i32, ptr @main.i, align 4 from: main
removed!

	  %inc28 = add nsw i32 undef, 1 from: main
removed!

	  %conv121 = fptrunc double %div12028 to float from: main
removed!

	  %pass.1 = phi i32 [ -3, %do.end ], [ %add12611, %do.cond142 ] from: main
removed!

	  %call125 = call float @second() from: main
removed!

	  %add126 = add nsw i32 undef, 1 from: main
removed!

	  %43 = load i32, ptr @main.i, align 4 from: main
removed!

	  %inc61 = add nsw i32 undef, 1 from: main
removed!

	  %normx.0.lcssa = phi float [ %normx.0, %for.cond30 ] from: main
removed!

	  %43 = load i32, ptr @main.n, align 4 from: main
removed!

	  %conv64 = sitofp i32 undef to float from: main
removed!

	  %43 = load float, ptr %norma, align 4 from: main
removed!

	  %mul65 = fmul float undef, undef from: main
removed!

	  %mul66 = fmul float %mul6513, undef from: main
removed!

	  %mul67 = fmul float %mul6614, %call63 from: main
removed!

	  %div68 = fdiv float %resid.0.lcssa, %mul6715 from: main
removed!

	  %43 = load float, ptr @main.x, align 16 from: main
removed!

	  %sub69 = fsub float undef, 1.000000e+00 from: main
removed!

	  %43 = load i32, ptr @main.n, align 4 from: main
removed!

	  %sub70 = sub nsw i32 undef, 1 from: main
removed!

	  %idxprom71 = sext i32 %sub7018 to i64 from: main
removed!

	  %arrayidx72 = getelementptr inbounds [200 x float], ptr @main.x, i64 0, i64 undef from: main
removed!

	  %43 = load float, ptr undef, align 4 from: main
removed!

	  %sub73 = fsub float undef, 1.000000e+00 from: main
removed!

	  %86 = load i32, ptr @main.ntimes, align 4 from: main
removed!

	  %conv171 = sitofp i32 undef to float from: main
removed!

	  %div172 = fdiv float %sub17035, undef from: main
removed!

	  %call175 = call float @second() from: main
removed!

	  %conv89 = fpext float %conv10 to double from: main
removed!

	  %conv90 = fpext float %add8 to double from: main
removed!

	  %mul91 = fmul double 1.000000e+06, undef from: main
removed!

	  %div92 = fdiv double undef, %mul9121 from: main
removed!

	  %52 = load float, ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 3), align 4 from: main
removed!

	  %conv94 = fpext float undef to double from: main
removed!

	  %div95 = fdiv double 2.000000e+00, undef from: main
removed!

	  %div97 = fdiv float %add8, 0x3FACAC0840000000 from: main
removed!

	  %pass.0 = phi i32 [ -3, %if.end ], [ %add10025, %do.cond ] from: main
removed!

	  %call99 = call float @second() from: main
removed!

	  %add100 = add nsw i32 undef, 1 from: main
removed!

	  %56 = load i32, ptr @main.i, align 4 from: main
removed!

	  %inc106 = add nsw i32 undef, 1 from: main
removed!

	  %call108 = call float @second() from: main
removed!

	  %sub109 = fsub float undef, undef from: main
removed!

	  %sub109.lcssa = phi float [ %sub10927, %do.cond ] from: main
removed!

	  %conv118 = fpext float undef to double from: main
removed!

	  %conv119 = sitofp i32 %loop.1.lcssa to double from: main
removed!

	  %div120 = fdiv double undef, undef from: main
removed!

	  %mul = mul nsw i32 3125, %init.1 from: matgen
removed!

	  %rem = srem i32 undef, 65536 from: matgen
removed!

	  %conv = sitofp i32 %rem1 to double from: matgen
removed!

	  %sub = fsub double undef, 3.276800e+04 from: matgen
removed!

	  %div = fdiv double %sub2, 1.638400e+04 from: matgen
removed!

	  %mul5 = mul nsw i32 %lda, %j.0 from: matgen
removed!

	  %add = add nsw i32 undef, %i.0 from: matgen
removed!

	  %mul6 = mul nsw i32 %lda, %j.0 from: matgen
removed!

	  %add7 = add nsw i32 undef, %i.0 from: matgen
removed!

	  %mul12 = mul nsw i32 %lda, %j.0 from: matgen
removed!

	  %add13 = add nsw i32 undef, %i.0 from: matgen
removed!

	  %65 = load i32, ptr @main.i, align 4 from: main
removed!

	  %inc132 = add nsw i32 undef, 1 from: main
removed!

	  %call134 = call float @second() from: main
removed!

	  %sub135 = fsub float undef, undef from: main
removed!

	  %67 = load i32, ptr @main.ntimes, align 4 from: main
removed!

	  %mul140 = mul nsw i32 undef, 2 from: main
removed!

	  %73 = load i32, ptr @main.ntimes, align 4 from: main
removed!

	  %conv154 = sitofp i32 undef to float from: main
removed!

	  %mul155 = fmul float undef, undef from: main
removed!

	  %call160 = call float @second() from: main
removed!

	  %80 = load i32, ptr @main.i, align 4 from: main
removed!

	  %inc166 = add nsw i32 undef, 1 from: main
removed!

	  %call168 = call float @second() from: main
removed!

	  %sub169 = fsub float undef, undef from: main
removed!

	  %sub170 = fsub float %sub16934, %mul15532 from: main
removed!

	  %85 = load i32, ptr @main.i, align 4 from: main
removed!

	  %inc181 = add nsw i32 undef, 1 from: main
removed!

	  %call183 = call float @second() from: main
removed!

	  %sub184 = fsub float undef, undef from: main
removed!

	  %85 = load i32, ptr @main.ntimes, align 4 from: main
removed!

	  %conv185 = sitofp i32 undef to float from: main
removed!

	  %div186 = fdiv float %sub18437, undef from: main
removed!

	  %86 = load i32, ptr @main.j, align 4 from: main
removed!

	  %idxprom189 = sext i32 undef to i64 from: main
removed!

	  %arrayidx190 = getelementptr inbounds [15 x float], ptr @atime, i64 0, i64 undef from: main
removed!

	  %86 = load float, ptr undef, align 4 from: main
removed!

	  %86 = load i32, ptr @main.j, align 4 from: main
removed!

	  %idxprom191 = sext i32 undef to i64 from: main
removed!

	  %arrayidx192 = getelementptr inbounds [15 x float], ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 1), i64 0, i64 undef from: main
removed!

	  %86 = load float, ptr undef, align 4 from: main
removed!

	  %add193 = fadd float undef, undef from: main
removed!

	  %conv196 = fpext float %conv10 to double from: main
removed!

	  %conv197 = fpext float %add19339 to double from: main
removed!

	  %mul198 = fmul double 1.000000e+06, undef from: main
removed!

	  %div199 = fdiv double undef, %mul19840 from: main
removed!

	  %88 = load i32, ptr @main.j, align 4 from: main
removed!

	  %idxprom203 = sext i32 undef to i64 from: main
removed!

	  %arrayidx204 = getelementptr inbounds [15 x float], ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 3), i64 0, i64 undef from: main
removed!

	  %88 = load float, ptr undef, align 4 from: main
removed!

	  %conv205 = fpext float undef to double from: main
removed!

	  %div206 = fdiv double 2.000000e+00, undef from: main
removed!

	  %div210 = fdiv float %add19339, 0x3FACAC0840000000 from: main
removed!

	  %90 = load float, ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 3, i64 6), align 4 from: main
removed!

	  %90 = load i32, ptr @main.j, align 4 from: main
removed!

	  %idxprom213 = sext i32 undef to i64 from: main
removed!

	  %arrayidx214 = getelementptr inbounds [15 x float], ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 3), i64 0, i64 undef from: main
removed!

	  %90 = load float, ptr undef, align 4 from: main
removed!

	  %add215 = fadd float undef, undef from: main
removed!

	  %91 = load i32, ptr @main.j, align 4 from: main
removed!

	  %inc217 = add nsw i32 undef, 1 from: main
removed!

	  %91 = load float, ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 3, i64 6), align 4 from: main
removed!

	  %conv219 = fpext float undef to double from: main
removed!

	  %div220 = fdiv double undef, 5.000000e+00 from: main
removed!

	  %call224 = call float @second() from: main
removed!

	  %96 = load i32, ptr @main.i, align 4 from: main
removed!

	  %inc230 = add nsw i32 undef, 1 from: main
removed!

	  %call232 = call float @second() from: main
removed!

	  %sub233 = fsub float undef, undef from: main
removed!

	  %conv234 = fpext float %sub23348 to double from: main
removed!

	  %conv235 = sitofp i32 %loop.1.lcssa to double from: main
removed!

	  %div236 = fdiv double undef, undef from: main
removed!

	  %conv237 = fptrunc double %div23649 to float from: main
removed!

	  %101 = load i32, ptr @main.ntimes, align 4 from: main
removed!

	  %conv242 = sitofp i32 undef to float from: main
removed!

	  %mul243 = fmul float undef, undef from: main
removed!

	  %call248 = call float @second() from: main
removed!

	  %108 = load i32, ptr @main.i, align 4 from: main
removed!

	  %inc254 = add nsw i32 undef, 1 from: main
removed!

	  %call256 = call float @second() from: main
removed!

	  %sub257 = fsub float undef, undef from: main
removed!

	  %sub258 = fsub float %sub25752, %mul24350 from: main
removed!

	  %108 = load i32, ptr @main.ntimes, align 4 from: main
removed!

	  %conv259 = sitofp i32 undef to float from: main
removed!

	  %div260 = fdiv float %sub25853, undef from: main
removed!

	  %call263 = call float @second() from: main
removed!

	  %113 = load i32, ptr @main.i, align 4 from: main
removed!

	  %inc269 = add nsw i32 undef, 1 from: main
removed!

	  %call271 = call float @second() from: main
removed!

	  %sub272 = fsub float undef, undef from: main
removed!

	  %113 = load i32, ptr @main.ntimes, align 4 from: main
removed!

	  %conv273 = sitofp i32 undef to float from: main
removed!

	  %div274 = fdiv float %sub27256, undef from: main
removed!

	  %114 = load i32, ptr @main.j, align 4 from: main
removed!

	  %idxprom277 = sext i32 undef to i64 from: main
removed!

	  %arrayidx278 = getelementptr inbounds [15 x float], ptr @atime, i64 0, i64 undef from: main
removed!

	  %114 = load float, ptr undef, align 4 from: main
removed!

	  %114 = load i32, ptr @main.j, align 4 from: main
removed!

	  %idxprom279 = sext i32 undef to i64 from: main
removed!

	  %arrayidx280 = getelementptr inbounds [15 x float], ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 1), i64 0, i64 undef from: main
removed!

	  %114 = load float, ptr undef, align 4 from: main
removed!

	  %add281 = fadd float undef, undef from: main
removed!

	  %conv284 = fpext float %conv10 to double from: main
removed!

	  %conv285 = fpext float %add28158 to double from: main
removed!

	  %mul286 = fmul double 1.000000e+06, undef from: main
removed!

	  %div287 = fdiv double undef, %mul28659 from: main
removed!

	  %116 = load i32, ptr @main.j, align 4 from: main
removed!

	  %idxprom291 = sext i32 undef to i64 from: main
removed!

	  %arrayidx292 = getelementptr inbounds [15 x float], ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 3), i64 0, i64 undef from: main
removed!

	  %116 = load float, ptr undef, align 4 from: main
removed!

	  %conv293 = fpext float undef to double from: main
removed!

	  %div294 = fdiv double 2.000000e+00, undef from: main
removed!

	  %div298 = fdiv float %add28158, 0x3FACAC0840000000 from: main
removed!

	  %118 = load float, ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 3, i64 12), align 4 from: main
removed!

	  %118 = load i32, ptr @main.j, align 4 from: main
removed!

	  %idxprom301 = sext i32 undef to i64 from: main
removed!

	  %arrayidx302 = getelementptr inbounds [15 x float], ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 3), i64 0, i64 undef from: main
removed!

	  %118 = load float, ptr undef, align 4 from: main
removed!

	  %add303 = fadd float undef, undef from: main
removed!

	  %119 = load i32, ptr @main.j, align 4 from: main
removed!

	  %inc305 = add nsw i32 undef, 1 from: main
removed!

	  %119 = load float, ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 3, i64 12), align 4 from: main
removed!

	  %conv307 = fpext float undef to double from: main
removed!

	  %div308 = fdiv double undef, 5.000000e+00 from: main
removed!

	  %add30 = add nsw i32 %mul2928, %i.1 from: dmxpy
removed!

	  %sub43 = sub nsw i32 %rem40, 1 from: dmxpy
removed!

	  %sub49 = sub nsw i32 %sub432, 3 from: dmxpy
removed!

	  %sub52 = sub nsw i32 %sub432, 3 from: dmxpy
removed!

	  %mul53 = mul nsw i32 %ldm, %sub524 from: dmxpy
removed!

	  %add54 = add nsw i32 %mul535, %i.2 from: dmxpy
removed!

	  %sub58 = sub nsw i32 %sub432, 2 from: dmxpy
removed!

	  %sub61 = sub nsw i32 %sub432, 2 from: dmxpy
removed!

	  %mul62 = mul nsw i32 %ldm, %sub618 from: dmxpy
removed!

	  %add63 = add nsw i32 %mul629, %i.2 from: dmxpy
removed!

	  %sub70 = sub nsw i32 %sub432, 1 from: dmxpy
removed!

	  %mul71 = mul nsw i32 %ldm, %sub7011 from: dmxpy
removed!

	  %add72 = add nsw i32 %mul7112, %i.2 from: dmxpy
removed!

	  %sub188 = sub nsw i32 %j.0, 15 from: dmxpy
removed!

	  %mul189 = mul nsw i32 %ldm, undef from: dmxpy
removed!

	  %add190 = add nsw i32 %mul18914, %i.4 from: dmxpy
removed!

	  %sub92 = sub nsw i32 %rem89, 1 from: dmxpy
removed!

	  %idxprom36 = sext i32 %i.2 to i64 from: matgen
removed!

	  %arrayidx37 = getelementptr inbounds float, ptr %b, i64 undef from: matgen
removed!

	  %4 = load float, ptr undef, align 4 from: matgen
removed!

	  %mul38 = mul nsw i32 %lda, %j.1 from: matgen
removed!

	  %add39 = add nsw i32 undef, %i.2 from: matgen
removed!

	  %idxprom40 = sext i32 %add397 to i64 from: matgen
removed!

	  %arrayidx41 = getelementptr inbounds float, ptr %a, i64 undef from: matgen
removed!

	  %4 = load float, ptr undef, align 4 from: matgen
removed!

	  %add42 = fadd float undef, undef from: matgen
removed!

	  %call = call i32 @idamax(i32 noundef %sub2, ptr noundef %arrayidx, i32 noundef 1) from: dgefa
removed!

	  %sub2 = sub nsw i32 %n, %k.0 from: dgefa
removed!

	  %mul = mul nsw i32 %lda, %k.0 from: dgefa
removed!

	  %add3 = add nsw i32 undef, %k.0 from: dgefa
removed!

	  %idxprom = sext i32 %add31 to i64 from: dgefa
removed!

	  %arrayidx = getelementptr inbounds float, ptr %a, i64 undef from: dgefa
removed!

	  %add4 = add nsw i32 undef, %k.0 from: dgefa
removed!

	  %mul7 = mul nsw i32 %lda, %k.0 from: dgefa
removed!

	  %add8 = add nsw i32 undef, %add44 from: dgefa
removed!

	  %mul17 = mul nsw i32 %lda, %k.0 from: dgefa
removed!

	  %add18 = add nsw i32 undef, %add44 from: dgefa
removed!

	  %mul21 = mul nsw i32 %lda, %k.0 from: dgefa
removed!

	  %add22 = add nsw i32 undef, %k.0 from: dgefa
removed!

	  %mul25 = mul nsw i32 %lda, %k.0 from: dgefa
removed!

	  %add26 = add nsw i32 undef, %add44 from: dgefa
removed!

	  %mul77 = mul nsw i32 %lda, %j.0 from: dgefa
removed!

	  %add78 = add nsw i32 undef, %k.0 from: dgefa
removed!

	  %add79 = add nsw i32 %add789, 1 from: dgefa
removed!

	  %mul29 = mul nsw i32 %lda, %k.0 from: dgefa
removed!

	  %add30 = add nsw i32 undef, %k.0 from: dgefa
removed!

	  %mul33 = mul nsw i32 %lda, %k.0 from: dgefa
removed!

	  %add34 = add nsw i32 undef, %k.0 from: dgefa
removed!

	  %idxprom35 = sext i32 %add3412 to i64 from: dgefa
removed!

	  %arrayidx36 = getelementptr inbounds float, ptr %a, i64 undef from: dgefa
removed!

	  %3 = load float, ptr undef, align 4 from: dgefa
removed!

	  %conv37 = fpext float undef to double from: dgefa
removed!

	  %div = fdiv double -1.000000e+00, undef from: dgefa
removed!

	  %add39 = add nsw i32 %k.0, 1 from: dgefa
removed!

	  %sub40 = sub nsw i32 %n, undef from: dgefa
removed!

	  %mul41 = mul nsw i32 %lda, %k.0 from: dgefa
removed!

	  %add42 = add nsw i32 undef, %k.0 from: dgefa
removed!

	  %add43 = add nsw i32 %add4215, 1 from: dgefa
removed!

	  %mul50 = mul nsw i32 %lda, %j.0 from: dgefa
removed!

	  %add51 = add nsw i32 undef, %add44 from: dgefa
removed!

	  %mul57 = mul nsw i32 %lda, %j.0 from: dgefa
removed!

	  %add58 = add nsw i32 undef, %k.0 from: dgefa
removed!

	  %mul61 = mul nsw i32 %lda, %j.0 from: dgefa
removed!

	  %add62 = add nsw i32 undef, %add44 from: dgefa
removed!

	  %mul65 = mul nsw i32 %lda, %j.0 from: dgefa
removed!

	  %add66 = add nsw i32 undef, %k.0 from: dgefa
removed!

	  %add70 = add nsw i32 %k.0, 1 from: dgefa
removed!

	  %sub71 = sub nsw i32 %n, undef from: dgefa
removed!

	  %mul72 = mul nsw i32 %lda, %k.0 from: dgefa
removed!

	  %add73 = add nsw i32 undef, %k.0 from: dgefa
removed!

	  %add74 = add nsw i32 %add7322, 1 from: dgefa
removed!

	  %sub91 = sub nsw i32 %n, 1 from: dgefa
removed!

	  %mul92 = mul nsw i32 %lda, undef from: dgefa
removed!

	  %sub93 = sub nsw i32 %n, 1 from: dgefa
removed!

	  %add94 = add nsw i32 %mul9224, undef from: dgefa
removed!

	  %add = add nsw i32 %k.0, 1 from: dgesl
removed!

	  %sub14 = sub nsw i32 %n, undef from: dgesl
removed!

	  %mul = mul nsw i32 %lda, %k.0 from: dgesl
removed!

	  %add15 = add nsw i32 undef, %k.0 from: dgesl
removed!

	  %add16 = add nsw i32 %add152, 1 from: dgesl
removed!

	  %add26 = add nsw i32 %kb.0, 1 from: dgesl
removed!

	  %sub27 = sub nsw i32 %n, undef from: dgesl
removed!

	  %idxprom28 = sext i32 %sub274 to i64 from: dgesl
removed!

	  %arrayidx29 = getelementptr inbounds float, ptr %b, i64 undef from: dgesl
removed!

	  %3 = load float, ptr undef, align 4 from: dgesl
removed!

	  %mul30 = mul nsw i32 %lda, %sub274 from: dgesl
removed!

	  %add31 = add nsw i32 %mul305, %sub274 from: dgesl
removed!

	  %idxprom32 = sext i32 %add316 to i64 from: dgesl
removed!

	  %arrayidx33 = getelementptr inbounds float, ptr %a, i64 undef from: dgesl
removed!

	  %3 = load float, ptr undef, align 4 from: dgesl
removed!

	  %div = fdiv float undef, undef from: dgesl
removed!

	  %mul38 = mul nsw i32 %lda, %sub274 from: dgesl
removed!

	  %add39 = add nsw i32 %mul388, 0 from: dgesl
removed!

	  %mul49 = mul nsw i32 %lda, %k.1 from: dgesl
removed!

	  %add50 = add nsw i32 undef, 0 from: dgesl
removed!

	  %idxprom51 = sext i32 %add5010 to i64 from: dgesl
removed!

	  %arrayidx52 = getelementptr inbounds float, ptr %a, i64 undef from: dgesl
removed!

	  %arrayidx53 = getelementptr inbounds float, ptr %b, i64 0 from: dgesl
removed!

	  %call = call float @ddot(i32 noundef %k.1, ptr noundef undef, i32 noundef 1, ptr noundef undef, i32 noundef 1) from: dgesl
removed!

	  %idxprom54 = sext i32 %k.1 to i64 from: dgesl
removed!

	  %arrayidx55 = getelementptr inbounds float, ptr %b, i64 undef from: dgesl
removed!

	  %4 = load float, ptr undef, align 4 from: dgesl
removed!

	  %sub56 = fsub float undef, undef from: dgesl
removed!

	  %mul57 = mul nsw i32 %lda, %k.1 from: dgesl
removed!

	  %add58 = add nsw i32 undef, %k.1 from: dgesl
removed!

	  %idxprom59 = sext i32 %add5812 to i64 from: dgesl
removed!

	  %arrayidx60 = getelementptr inbounds float, ptr %a, i64 undef from: dgesl
removed!

	  %4 = load float, ptr undef, align 4 from: dgesl
removed!

	  %div61 = fdiv float %sub5611, undef from: dgesl
removed!

	  %add72 = add nsw i32 %kb.1, 1 from: dgesl
removed!

	  %sub73 = sub nsw i32 %n, undef from: dgesl
removed!

	  %idxprom74 = sext i32 %sub7314 to i64 from: dgesl
removed!

	  %arrayidx75 = getelementptr inbounds float, ptr %b, i64 undef from: dgesl
removed!

	  %4 = load float, ptr undef, align 4 from: dgesl
removed!

	  %add76 = add nsw i32 %sub7314, 1 from: dgesl
removed!

	  %sub77 = sub nsw i32 %n, %add7615 from: dgesl
removed!

	  %mul78 = mul nsw i32 %lda, %sub7314 from: dgesl
removed!

	  %add79 = add nsw i32 %mul7817, %sub7314 from: dgesl
removed!

	  %add80 = add nsw i32 %add7918, 1 from: dgesl
removed!

	  %idxprom81 = sext i32 %add8019 to i64 from: dgesl
removed!

	  %arrayidx82 = getelementptr inbounds float, ptr %a, i64 undef from: dgesl
removed!

	  %add83 = add nsw i32 %sub7314, 1 from: dgesl
removed!

	  %idxprom84 = sext i32 %add8320 to i64 from: dgesl
removed!

	  %arrayidx85 = getelementptr inbounds float, ptr %b, i64 undef from: dgesl
removed!

	  %call86 = call float @ddot(i32 noundef %sub7716, ptr noundef undef, i32 noundef 1, ptr noundef undef, i32 noundef 1) from: dgesl
removed!

	  %add87 = fadd float undef, undef from: dgesl
removed!

	  %sub = sub nsw i32 %rem, 1 from: dmxpy
removed!

	  %mul = mul nsw i32 %ldm, %sub17 from: dmxpy
removed!

	  %add = add nsw i32 %mul18, %i.0 from: dmxpy
removed!

	  %sub12 = sub nsw i32 %rem9, 1 from: dmxpy
removed!

	  %sub18 = sub nsw i32 %sub1220, 1 from: dmxpy
removed!

	  %sub21 = sub nsw i32 %sub1220, 1 from: dmxpy
removed!

	  %mul22 = mul nsw i32 %ldm, %sub2122 from: dmxpy
removed!

	  %add23 = add nsw i32 %mul2223, %i.1 from: dmxpy
removed!

	  %mul78 = mul nsw i32 %ldm, %sub432 from: dmxpy
removed!

	  %add79 = add nsw i32 %mul7825, %i.2 from: dmxpy
removed!

	  %sub67 = sub nsw i32 %sub432, 1 from: dmxpy
removed!

	  %mul29 = mul nsw i32 %ldm, %sub1220 from: dmxpy
removed!

	  %sub98 = sub nsw i32 %sub9216, 7 from: dmxpy
removed!

	  %sub101 = sub nsw i32 %sub9216, 7 from: dmxpy
removed!

	  %mul102 = mul nsw i32 %ldm, %sub10130 from: dmxpy
removed!

	  %add103 = add nsw i32 %mul10231, %i.3 from: dmxpy
removed!

	  %sub107 = sub nsw i32 %sub9216, 6 from: dmxpy
removed!

	  %sub110 = sub nsw i32 %sub9216, 6 from: dmxpy
removed!

	  %mul111 = mul nsw i32 %ldm, %sub11034 from: dmxpy
removed!

	  %add112 = add nsw i32 %mul11135, %i.3 from: dmxpy
removed!

	  %sub116 = sub nsw i32 %sub9216, 5 from: dmxpy
removed!

	  %sub119 = sub nsw i32 %sub9216, 5 from: dmxpy
removed!

	  %mul120 = mul nsw i32 %ldm, %sub11938 from: dmxpy
removed!

	  %add121 = add nsw i32 %mul12039, %i.3 from: dmxpy
removed!

	  %sub125 = sub nsw i32 %sub9216, 4 from: dmxpy
removed!

	  %sub128 = sub nsw i32 %sub9216, 4 from: dmxpy
removed!

	  %mul129 = mul nsw i32 %ldm, %sub12842 from: dmxpy
removed!

	  %add130 = add nsw i32 %mul12943, %i.3 from: dmxpy
removed!

	  %sub134 = sub nsw i32 %sub9216, 3 from: dmxpy
removed!

	  %sub137 = sub nsw i32 %sub9216, 3 from: dmxpy
removed!

	  %mul138 = mul nsw i32 %ldm, %sub13746 from: dmxpy
removed!

	  %add139 = add nsw i32 %mul13847, %i.3 from: dmxpy
removed!

	  %sub143 = sub nsw i32 %sub9216, 2 from: dmxpy
removed!

	  %sub146 = sub nsw i32 %sub9216, 2 from: dmxpy
removed!

	  %mul147 = mul nsw i32 %ldm, %sub14650 from: dmxpy
removed!

	  %add148 = add nsw i32 %mul14751, %i.3 from: dmxpy
removed!

	  %sub152 = sub nsw i32 %sub9216, 1 from: dmxpy
removed!

	  %sub155 = sub nsw i32 %sub9216, 1 from: dmxpy
removed!

	  %mul156 = mul nsw i32 %ldm, %sub15554 from: dmxpy
removed!

	  %add157 = add nsw i32 %mul15655, %i.3 from: dmxpy
removed!

	  %mul163 = mul nsw i32 %ldm, %sub9216 from: dmxpy
removed!

	  %add164 = add nsw i32 %mul16357, %i.3 from: dmxpy
removed!

	  %rem174 = srem i32 %n2, 16 from: dmxpy
removed!

	  %add175 = add nsw i32 undef, 16 from: dmxpy
removed!

	  %sub176 = sub nsw i32 %add17559, 1 from: dmxpy
removed!

	  %sub197 = sub nsw i32 %j.0, 14 from: dmxpy
removed!

	  %mul198 = mul nsw i32 %ldm, undef from: dmxpy
removed!

	  %add199 = add nsw i32 %mul19861, %i.4 from: dmxpy
removed!

	  %sub206 = sub nsw i32 %j.0, 13 from: dmxpy
removed!

	  %mul207 = mul nsw i32 %ldm, undef from: dmxpy
removed!

	  %add208 = add nsw i32 %mul20763, %i.4 from: dmxpy
removed!

	  %sub215 = sub nsw i32 %j.0, 12 from: dmxpy
removed!

	  %mul216 = mul nsw i32 %ldm, undef from: dmxpy
removed!

	  %add217 = add nsw i32 %mul21665, %i.4 from: dmxpy
removed!

	  %sub224 = sub nsw i32 %j.0, 11 from: dmxpy
removed!

	  %mul225 = mul nsw i32 %ldm, undef from: dmxpy
removed!

	  %add226 = add nsw i32 %mul22567, %i.4 from: dmxpy
removed!

	  %sub233 = sub nsw i32 %j.0, 10 from: dmxpy
removed!

	  %mul234 = mul nsw i32 %ldm, undef from: dmxpy
removed!

	  %add235 = add nsw i32 %mul23469, %i.4 from: dmxpy
removed!

	  %sub242 = sub nsw i32 %j.0, 9 from: dmxpy
removed!

	  %mul243 = mul nsw i32 %ldm, undef from: dmxpy
removed!

	  %add244 = add nsw i32 %mul24371, %i.4 from: dmxpy
removed!

	  %sub251 = sub nsw i32 %j.0, 8 from: dmxpy
removed!

	  %mul252 = mul nsw i32 %ldm, undef from: dmxpy
removed!

	  %add253 = add nsw i32 %mul25273, %i.4 from: dmxpy
removed!

	  %sub260 = sub nsw i32 %j.0, 7 from: dmxpy
removed!

	  %mul261 = mul nsw i32 %ldm, undef from: dmxpy
removed!

	  %add262 = add nsw i32 %mul26175, %i.4 from: dmxpy
removed!

	  %sub269 = sub nsw i32 %j.0, 6 from: dmxpy
removed!

	  %mul270 = mul nsw i32 %ldm, undef from: dmxpy
removed!

	  %add271 = add nsw i32 %mul27077, %i.4 from: dmxpy
removed!

	  %sub278 = sub nsw i32 %j.0, 5 from: dmxpy
removed!

	  %mul279 = mul nsw i32 %ldm, undef from: dmxpy
removed!

	  %add280 = add nsw i32 %mul27979, %i.4 from: dmxpy
removed!

	  %sub287 = sub nsw i32 %j.0, 4 from: dmxpy
removed!

	  %mul288 = mul nsw i32 %ldm, undef from: dmxpy
removed!

	  %add289 = add nsw i32 %mul28881, %i.4 from: dmxpy
removed!

	  %sub296 = sub nsw i32 %j.0, 3 from: dmxpy
removed!

	  %mul297 = mul nsw i32 %ldm, undef from: dmxpy
removed!

	  %add298 = add nsw i32 %mul29783, %i.4 from: dmxpy
removed!

	  %sub305 = sub nsw i32 %j.0, 2 from: dmxpy
removed!

	  %mul306 = mul nsw i32 %ldm, undef from: dmxpy
removed!

	  %add307 = add nsw i32 %mul30685, %i.4 from: dmxpy
removed!

	  %sub314 = sub nsw i32 %j.0, 1 from: dmxpy
removed!

	  %mul315 = mul nsw i32 %ldm, undef from: dmxpy
removed!

	  %add316 = add nsw i32 %mul31587, %i.4 from: dmxpy
removed!

	  %mul322 = mul nsw i32 %ldm, %j.0 from: dmxpy
removed!

	  %add323 = add nsw i32 undef, %i.4 from: dmxpy
removed!

	  %conv2 = fpext float 0x3FF5555560000000 to double from: epslon
removed!

	  %sub = fsub double undef, 1.000000e+00 from: epslon
removed!

	  %conv3 = fptrunc double %sub1 to float from: epslon
removed!

	  %add = fadd float undef, undef from: epslon
removed!

	  %add4 = fadd float %add2, undef from: epslon
removed!

	  %conv5 = fpext float %add43 to double from: epslon
removed!

	  %sub6 = fsub double undef, 1.000000e+00 from: epslon
removed!

	  %eps.0.lcssa = phi float [ %eps.0, %while.cond ] from: epslon
removed!

	  %conv8 = fpext float undef to double from: epslon
removed!

	  %conv9 = fpext float %x to double from: epslon
removed!

	  %1 = call double @llvm.fabs.f64(double undef) from: epslon
removed!

	  %mul = fmul double undef, undef from: epslon
removed!

	  %idxprom = sext i32 %i.0 to i64 from: dscal
removed!

	  %arrayidx = getelementptr inbounds float, ptr %dx, i64 undef from: dscal
removed!

	  %0 = load float, ptr undef, align 4 from: dscal
removed!

	  %mul4 = fmul float %da, undef from: dscal
removed!

	  %idxprom11 = sext i32 %i.1 to i64 from: dscal
removed!

	  %arrayidx12 = getelementptr inbounds float, ptr %dx, i64 undef from: dscal
removed!

	  %0 = load float, ptr undef, align 4 from: dscal
removed!

	  %mul13 = fmul float %da, undef from: dscal
removed!

	  %mul = mul nsw i32 %add2, %incx from: daxpy
removed!

	  %sub = sub nsw i32 0, %n from: daxpy
removed!

	  %add = add nsw i32 undef, 1 from: daxpy
removed!

	  %sub17 = sub nsw i32 0, %n from: daxpy
removed!

	  %add18 = add nsw i32 undef, 1 from: daxpy
removed!

	  %mul19 = mul nsw i32 %add183, %incy from: daxpy
removed!

	  %sub9 = sub nsw i32 0, %n from: ddot
removed!

	  %sub = sub nsw i32 0, %n from: ddot
removed!

	  %add = add nsw i32 undef, 1 from: ddot
removed!

	  %mul = mul nsw i32 %add1, %incx from: ddot
removed!

	  %add10 = add nsw i32 undef, 1 from: ddot
removed!

	  %mul11 = mul nsw i32 %add103, %incy from: ddot
removed!

ENDFILE
; Function Attrs: noinline nounwind uwtable
define dso_local float @second() #0 {
entry:
  %div1 = call float @_wyvern_slice_second_div_471812276()
  ret float %div1
}

; Function Attrs: nounwind
declare i64 @clock() #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @what_date() #0 {
entry:
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
entry:
  %norma = alloca float, align 4
  %general = alloca [9 x [80 x i8]], align 16
  call void @llvm.memset.p0.i64(ptr align 16 %general, i8 0, i64 720, i1 false)
  %0 = getelementptr inbounds <{ [80 x i8], [8 x [80 x i8]] }>, ptr %general, i32 0, i32 0
  %1 = getelementptr inbounds [80 x i8], ptr %0, i32 0, i32 0
  store i8 32, ptr %1, align 16
  store i32 201, ptr @main.lda, align 4
  store i32 200, ptr @main.ldaa, align 4
  store i32 100, ptr @main.n, align 4
  %2 = load ptr, ptr @stderr, align 8
  %call = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %2, ptr noundef @.str.2)
  %3 = load ptr, ptr @stderr, align 8
  %call1 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %3, ptr noundef @.str.3)
  %4 = load ptr, ptr @stderr, align 8
  %call2 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %4, ptr noundef @.str.4)
  %5 = load ptr, ptr @stderr, align 8
  %call3 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %5, ptr noundef @.str.5, ptr noundef @.str)
  %6 = load ptr, ptr @stderr, align 8
  %call4 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %6, ptr noundef @.str.6, ptr noundef @.str.1)
  %mul2 = call i32 @_wyvern_slice_main_mul_263102754()
  %mul53 = call i32 @_wyvern_slice_main_mul5_784233157()
  %mul64 = call double @_wyvern_slice_main_mul6_976711012()
  %div5 = call double @_wyvern_slice_main_div_816001860()
  %mul76 = call i32 @_wyvern_slice_main_mul7_315192754()
  %conv8 = sitofp i32 %mul76 to double
  %7 = call double @llvm.fmuladd.f64(double 2.000000e+00, double %conv8, double %div5)
  %conv10 = fptrunc double %7 to float
  %8 = load i32, ptr @main.lda, align 4
  %9 = load i32, ptr @main.n, align 4
  call void @matgen(ptr noundef @main.a, i32 noundef %8, i32 noundef %9, ptr noundef @main.b, ptr noundef %norma)
  %10 = load i32, ptr @main.lda, align 4
  %11 = load i32, ptr @main.n, align 4
  call void @dgefa(ptr noundef @main.a, i32 noundef %10, i32 noundef %11, ptr noundef @main.ipvt, ptr noundef @main.info)
  %sub1 = call float @_wyvern_slice_main_sub_552063494()
  store float %sub1, ptr @atime, align 16
  %12 = load i32, ptr @main.lda, align 4
  %13 = load i32, ptr @main.n, align 4
  call void @dgesl(ptr noundef @main.a, i32 noundef %12, i32 noundef %13, ptr noundef @main.ipvt, ptr noundef @main.b, i32 noundef 0)
  %sub157 = call float @_wyvern_slice_main_sub15_683772791()
  store float %sub157, ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 1), align 4
  %add8 = call float @_wyvern_slice_main_add_648505538()
  store i32 0, ptr @main.i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.body, %entry
  %14 = load i32, ptr @main.i, align 4
  %15 = load i32, ptr @main.n, align 4
  %cmp = icmp slt i32 %14, %15
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load i32, ptr @main.i, align 4
  %idxprom = sext i32 %16 to i64
  %arrayidx = getelementptr inbounds [200 x float], ptr @main.b, i64 0, i64 %idxprom
  %17 = load float, ptr %arrayidx, align 4
  %18 = load i32, ptr @main.i, align 4
  %idxprom17 = sext i32 %18 to i64
  %arrayidx18 = getelementptr inbounds [200 x float], ptr @main.x, i64 0, i64 %idxprom17
  store float %17, ptr %arrayidx18, align 4
  %inc9 = call i32 @_wyvern_slice_main_inc_193947325()
  store i32 %inc9, ptr @main.i, align 4
  br label %for.cond, !llvm.loop !6

for.end:                                          ; preds = %for.cond
  %19 = load i32, ptr @main.lda, align 4
  %20 = load i32, ptr @main.n, align 4
  call void @matgen(ptr noundef @main.a, i32 noundef %19, i32 noundef %20, ptr noundef @main.b, ptr noundef %norma)
  store i32 0, ptr @main.i, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.body22, %for.end
  %21 = load i32, ptr @main.i, align 4
  %22 = load i32, ptr @main.n, align 4
  %cmp20 = icmp slt i32 %21, %22
  br i1 %cmp20, label %for.body22, label %for.end29

for.body22:                                       ; preds = %for.cond19
  %23 = load i32, ptr @main.i, align 4
  %idxprom23 = sext i32 %23 to i64
  %arrayidx24 = getelementptr inbounds [200 x float], ptr @main.b, i64 0, i64 %idxprom23
  %24 = load float, ptr %arrayidx24, align 4
  %fneg = fneg float %24
  %25 = load i32, ptr @main.i, align 4
  %idxprom25 = sext i32 %25 to i64
  %arrayidx26 = getelementptr inbounds [200 x float], ptr @main.b, i64 0, i64 %idxprom25
  store float %fneg, ptr %arrayidx26, align 4
  %inc2810 = call i32 @_wyvern_slice_main_inc28_15705297()
  store i32 %inc2810, ptr @main.i, align 4
  br label %for.cond19, !llvm.loop !8

for.end29:                                        ; preds = %for.cond19
  %26 = load i32, ptr @main.n, align 4
  %27 = load i32, ptr @main.n, align 4
  %28 = load i32, ptr @main.lda, align 4
  call void @dmxpy(i32 noundef %26, ptr noundef @main.b, i32 noundef %27, i32 noundef %28, ptr noundef @main.x, ptr noundef @main.a)
  store i32 0, ptr @main.i, align 4
  br label %for.cond30

for.cond30:                                       ; preds = %cond.end57, %for.end29
  %resid.0 = phi float [ 0.000000e+00, %for.end29 ], [ %conv44, %cond.end57 ]
  %normx.0 = phi float [ 0.000000e+00, %for.end29 ], [ %conv59, %cond.end57 ]
  %29 = load i32, ptr @main.i, align 4
  %30 = load i32, ptr @main.n, align 4
  %cmp31 = icmp slt i32 %29, %30
  br i1 %cmp31, label %for.body33, label %for.end62

for.body33:                                       ; preds = %for.cond30
  %conv34 = fpext float %resid.0 to double
  %31 = load i32, ptr @main.i, align 4
  %idxprom35 = sext i32 %31 to i64
  %arrayidx36 = getelementptr inbounds [200 x float], ptr @main.b, i64 0, i64 %idxprom35
  %32 = load float, ptr %arrayidx36, align 4
  %conv37 = fpext float %32 to double
  %33 = call double @llvm.fabs.f64(double %conv37)
  %cmp38 = fcmp ogt double %conv34, %33
  br i1 %cmp38, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body33
  %conv40 = fpext float %resid.0 to double
  br label %cond.end

cond.false:                                       ; preds = %for.body33
  %34 = load i32, ptr @main.i, align 4
  %idxprom41 = sext i32 %34 to i64
  %arrayidx42 = getelementptr inbounds [200 x float], ptr @main.b, i64 0, i64 %idxprom41
  %35 = load float, ptr %arrayidx42, align 4
  %conv43 = fpext float %35 to double
  %36 = call double @llvm.fabs.f64(double %conv43)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %conv40, %cond.true ], [ %36, %cond.false ]
  %conv44 = fptrunc double %cond to float
  %conv45 = fpext float %normx.0 to double
  %37 = load i32, ptr @main.i, align 4
  %idxprom46 = sext i32 %37 to i64
  %arrayidx47 = getelementptr inbounds [200 x float], ptr @main.x, i64 0, i64 %idxprom46
  %38 = load float, ptr %arrayidx47, align 4
  %conv48 = fpext float %38 to double
  %39 = call double @llvm.fabs.f64(double %conv48)
  %cmp49 = fcmp ogt double %conv45, %39
  br i1 %cmp49, label %cond.true51, label %cond.false53

cond.true51:                                      ; preds = %cond.end
  %conv52 = fpext float %normx.0 to double
  br label %cond.end57

cond.false53:                                     ; preds = %cond.end
  %40 = load i32, ptr @main.i, align 4
  %idxprom54 = sext i32 %40 to i64
  %arrayidx55 = getelementptr inbounds [200 x float], ptr @main.x, i64 0, i64 %idxprom54
  %41 = load float, ptr %arrayidx55, align 4
  %conv56 = fpext float %41 to double
  %42 = call double @llvm.fabs.f64(double %conv56)
  br label %cond.end57

cond.end57:                                       ; preds = %cond.false53, %cond.true51
  %cond58 = phi double [ %conv52, %cond.true51 ], [ %42, %cond.false53 ]
  %conv59 = fptrunc double %cond58 to float
  %inc6112 = call i32 @_wyvern_slice_main_inc61_463502538()
  store i32 %inc6112, ptr @main.i, align 4
  br label %for.cond30, !llvm.loop !9

for.end62:                                        ; preds = %for.cond30
  %resid.0.lcssa = phi float [ %resid.0, %for.cond30 ]
  %call63 = call float @epslon(float noundef 1.000000e+00)
  %mul6513 = call float @_wyvern_slice_main_mul65_916447110()
  %mul6614 = call float @_wyvern_slice_main_mul66_947720023()
  %mul6715 = call float @_wyvern_slice_main_mul67_315845599()
  %div6816 = call float @_wyvern_slice_main_div68_196771227()
  %sub6917 = call float @_wyvern_slice_main_sub69_997496440()
  %sub7018 = call i32 @_wyvern_slice_main_sub70_913439000()
  %sub7319 = call float @_wyvern_slice_main_sub73_64617973()
  %43 = load ptr, ptr @stderr, align 8
  %call74 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %43, ptr noundef @.str.7)
  %44 = load ptr, ptr @stderr, align 8
  %call75 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %44, ptr noundef @.str.8)
  %45 = load ptr, ptr @stderr, align 8
  %conv76 = fpext float %div6816 to double
  %conv77 = fpext float %resid.0.lcssa to double
  %conv78 = fpext float %call63 to double
  %conv79 = fpext float %sub6917 to double
  %conv80 = fpext float %sub7319 to double
  %call81 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %45, ptr noundef @.str.9, double noundef %conv76, double noundef %conv77, double noundef %conv78, double noundef %conv79, double noundef %conv80)
  %46 = load ptr, ptr @stderr, align 8
  %47 = load i32, ptr @main.n, align 4
  %call82 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %46, ptr noundef @.str.10, i32 noundef %47)
  %48 = load ptr, ptr @stderr, align 8
  %49 = load i32, ptr @main.lda, align 4
  %call83 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %48, ptr noundef @.str.11, i32 noundef %49)
  %50 = load ptr, ptr @stderr, align 8
  %call84 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %50, ptr noundef @.str.12)
  %51 = load ptr, ptr @stderr, align 8
  %call85 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %51, ptr noundef @.str.13)
  store float %add8, ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 2), align 8
  %conv86 = fpext float %add8 to double
  %cmp87 = fcmp ogt double %conv86, 0.000000e+00
  br i1 %cmp87, label %if.then, label %if.else

if.then:                                          ; preds = %for.end62
  %mul9121 = call double @_wyvern_slice_main_mul91_867475532()
  %div9222 = call double @_wyvern_slice_main_div92_545530184()
  %conv93 = fptrunc double %div9222 to float
  store float %conv93, ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 3), align 4
  %div9523 = call double @_wyvern_slice_main_div95_720136546()
  %conv96 = fptrunc double %div9523 to float
  store float %conv96, ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 4), align 16
  br label %if.end

if.else:                                          ; preds = %for.end62
  store float 0.000000e+00, ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 3), align 4
  store float 0.000000e+00, ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 4), align 16
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %div9724 = call float @_wyvern_slice_main_div97_843632470()
  store float %div9724, ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 5), align 4
  call void @print_time(i32 noundef 0)
  %52 = load ptr, ptr @stderr, align 8
  %call98 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %52, ptr noundef @.str.14)
  br label %do.body

do.body:                                          ; preds = %for.end107, %if.end
  %loop.0 = phi i32 [ 100, %if.end ], [ %spec.select, %for.end107 ]
  %add10025 = call i32 @_wyvern_slice_main_add100_87663418()
  store i32 0, ptr @main.i, align 4
  br label %for.cond101

for.cond101:                                      ; preds = %for.body104, %do.body
  %53 = load i32, ptr @main.i, align 4
  %cmp102 = icmp slt i32 %53, %loop.0
  br i1 %cmp102, label %for.body104, label %for.end107

for.body104:                                      ; preds = %for.cond101
  %54 = load i32, ptr @main.lda, align 4
  %55 = load i32, ptr @main.n, align 4
  call void @matgen(ptr noundef @main.a, i32 noundef %54, i32 noundef %55, ptr noundef @main.b, ptr noundef %norma)
  %inc10626 = call i32 @_wyvern_slice_main_inc106_475240382()
  store i32 %inc10626, ptr @main.i, align 4
  br label %for.cond101, !llvm.loop !10

for.end107:                                       ; preds = %for.cond101
  %sub10927 = call float @_wyvern_slice_main_sub109_564756160()
  %56 = load ptr, ptr @stderr, align 8
  %call110 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %56, ptr noundef @.str.15, i32 noundef %loop.0, double noundef 0.000000e+00)
  %cmp111 = icmp slt i32 %add10025, 0
  %mul114 = mul nsw i32 %loop.0, 2
  %spec.select = select i1 %cmp111, i32 %mul114, i32 %loop.0
  %cmp116 = icmp slt i32 %add10025, 0
  br i1 %cmp116, label %do.body, label %do.end, !llvm.loop !11

do.end:                                           ; preds = %for.end107
  %loop.1.lcssa = phi i32 [ %spec.select, %for.end107 ]
  %div12028 = call double @_wyvern_slice_main_div120_187195479()
  %57 = load ptr, ptr @stderr, align 8
  %call122 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %57, ptr noundef @.str.16, double noundef 0.000000e+00)
  %58 = load ptr, ptr @stderr, align 8
  %call123 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %58, ptr noundef @.str.17)
  store i32 100, ptr @main.ntimes, align 4
  br label %do.body124

do.body124:                                       ; preds = %do.cond142, %do.end
  %add12611 = call i32 @_wyvern_slice_main_add126_966623549()
  store i32 0, ptr @main.i, align 4
  br label %for.cond127

for.cond127:                                      ; preds = %for.body130, %do.body124
  %59 = load i32, ptr @main.i, align 4
  %60 = load i32, ptr @main.ntimes, align 4
  %cmp128 = icmp slt i32 %59, %60
  br i1 %cmp128, label %for.body130, label %for.end133

for.body130:                                      ; preds = %for.cond127
  %61 = load i32, ptr @main.lda, align 4
  %62 = load i32, ptr @main.n, align 4
  call void @matgen(ptr noundef @main.a, i32 noundef %61, i32 noundef %62, ptr noundef @main.b, ptr noundef %norma)
  %63 = load i32, ptr @main.lda, align 4
  %64 = load i32, ptr @main.n, align 4
  call void @dgefa(ptr noundef @main.a, i32 noundef %63, i32 noundef %64, ptr noundef @main.ipvt, ptr noundef @main.info)
  %inc13229 = call i32 @_wyvern_slice_main_inc132_368844482()
  store i32 %inc13229, ptr @main.i, align 4
  br label %for.cond127, !llvm.loop !12

for.end133:                                       ; preds = %for.cond127
  %sub13530 = call float @_wyvern_slice_main_sub135_181101865()
  %65 = load ptr, ptr @stderr, align 8
  %66 = load i32, ptr @main.ntimes, align 4
  %call136 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %65, ptr noundef @.str.15, i32 noundef %66, double noundef 0.000000e+00)
  %cmp137 = icmp slt i32 %add12611, 0
  br i1 %cmp137, label %if.then139, label %do.cond142

if.then139:                                       ; preds = %for.end133
  %mul14031 = call i32 @_wyvern_slice_main_mul140_856636967()
  store i32 %mul14031, ptr @main.ntimes, align 4
  br label %do.cond142

do.cond142:                                       ; preds = %for.end133, %if.then139
  %cmp143 = icmp slt i32 %add12611, 0
  br i1 %cmp143, label %do.body124, label %do.end145, !llvm.loop !13

do.end145:                                        ; preds = %do.cond142
  store i32 1000, ptr @main.ntimes, align 4
  %67 = load i32, ptr @main.ntimes, align 4
  %cmp146 = icmp eq i32 %67, 0
  %spec.store.select = select i1 %cmp146, i32 1, i32 1000
  store i32 %spec.store.select, ptr @main.ntimes, align 4
  %68 = load ptr, ptr @stderr, align 8
  %call150 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %68, ptr noundef @.str.18, i32 noundef 0)
  %69 = load ptr, ptr @stderr, align 8
  %70 = load i32, ptr @main.lda, align 4
  %call151 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %69, ptr noundef @.str.19, i32 noundef %70)
  %71 = load ptr, ptr @stderr, align 8
  %call152 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %71, ptr noundef @.str.12)
  %72 = load ptr, ptr @stderr, align 8
  %call153 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %72, ptr noundef @.str.13)
  %mul15532 = call float @_wyvern_slice_main_mul155_963719496()
  store float 0.000000e+00, ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 3, i64 6), align 4
  store i32 1, ptr @main.j, align 4
  br label %for.cond156

for.cond156:                                      ; preds = %for.end182, %do.end145
  %73 = load i32, ptr @main.j, align 4
  %cmp157 = icmp slt i32 %73, 6
  br i1 %cmp157, label %for.body159, label %for.end218

for.body159:                                      ; preds = %for.cond156
  store i32 0, ptr @main.i, align 4
  br label %for.cond161

for.cond161:                                      ; preds = %for.body164, %for.body159
  %74 = load i32, ptr @main.i, align 4
  %75 = load i32, ptr @main.ntimes, align 4
  %cmp162 = icmp slt i32 %74, %75
  br i1 %cmp162, label %for.body164, label %for.end167

for.body164:                                      ; preds = %for.cond161
  %76 = load i32, ptr @main.lda, align 4
  %77 = load i32, ptr @main.n, align 4
  call void @matgen(ptr noundef @main.a, i32 noundef %76, i32 noundef %77, ptr noundef @main.b, ptr noundef %norma)
  %78 = load i32, ptr @main.lda, align 4
  %79 = load i32, ptr @main.n, align 4
  call void @dgefa(ptr noundef @main.a, i32 noundef %78, i32 noundef %79, ptr noundef @main.ipvt, ptr noundef @main.info)
  %inc16633 = call i32 @_wyvern_slice_main_inc166_38138018()
  store i32 %inc16633, ptr @main.i, align 4
  br label %for.cond161, !llvm.loop !14

for.end167:                                       ; preds = %for.cond161
  %sub16934 = call float @_wyvern_slice_main_sub169_939910741()
  %sub17035 = call float @_wyvern_slice_main_sub170_68603189(float %sub109.lcssa, i32 %loop.1.lcssa)
  %div17220 = call float @_wyvern_slice_main_div172_928543120(i32 %loop.1.lcssa, float %sub109.lcssa)
  %80 = load i32, ptr @main.j, align 4
  %idxprom173 = sext i32 %80 to i64
  %arrayidx174 = getelementptr inbounds [15 x float], ptr @atime, i64 0, i64 %idxprom173
  store float %div17220, ptr %arrayidx174, align 4
  store i32 0, ptr @main.i, align 4
  br label %for.cond176

for.cond176:                                      ; preds = %for.body179, %for.end167
  %81 = load i32, ptr @main.i, align 4
  %82 = load i32, ptr @main.ntimes, align 4
  %cmp177 = icmp slt i32 %81, %82
  br i1 %cmp177, label %for.body179, label %for.end182

for.body179:                                      ; preds = %for.cond176
  %83 = load i32, ptr @main.lda, align 4
  %84 = load i32, ptr @main.n, align 4
  call void @dgesl(ptr noundef @main.a, i32 noundef %83, i32 noundef %84, ptr noundef @main.ipvt, ptr noundef @main.b, i32 noundef 0)
  %inc18136 = call i32 @_wyvern_slice_main_inc181_894747152()
  store i32 %inc18136, ptr @main.i, align 4
  br label %for.cond176, !llvm.loop !15

for.end182:                                       ; preds = %for.cond176
  %sub18437 = call float @_wyvern_slice_main_sub184_400690708()
  %div18638 = call float @_wyvern_slice_main_div186_459450643()
  %85 = load i32, ptr @main.j, align 4
  %idxprom187 = sext i32 %85 to i64
  %arrayidx188 = getelementptr inbounds [15 x float], ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 1), i64 0, i64 %idxprom187
  store float %div18638, ptr %arrayidx188, align 4
  %add19339 = call float @_wyvern_slice_main_add193_611298782()
  %86 = load i32, ptr @main.j, align 4
  %idxprom194 = sext i32 %86 to i64
  %arrayidx195 = getelementptr inbounds [15 x float], ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 2), i64 0, i64 %idxprom194
  store float %add19339, ptr %arrayidx195, align 4
  %mul19840 = call double @_wyvern_slice_main_mul198_678994001()
  %div19941 = call double @_wyvern_slice_main_div199_455960808()
  %conv200 = fptrunc double %div19941 to float
  %87 = load i32, ptr @main.j, align 4
  %idxprom201 = sext i32 %87 to i64
  %arrayidx202 = getelementptr inbounds [15 x float], ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 3), i64 0, i64 %idxprom201
  store float %conv200, ptr %arrayidx202, align 4
  %div20642 = call double @_wyvern_slice_main_div206_681765010()
  %conv207 = fptrunc double %div20642 to float
  %88 = load i32, ptr @main.j, align 4
  %idxprom208 = sext i32 %88 to i64
  %arrayidx209 = getelementptr inbounds [15 x float], ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 4), i64 0, i64 %idxprom208
  store float %conv207, ptr %arrayidx209, align 4
  %div21043 = call float @_wyvern_slice_main_div210_116622323()
  %89 = load i32, ptr @main.j, align 4
  %idxprom211 = sext i32 %89 to i64
  %arrayidx212 = getelementptr inbounds [15 x float], ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 5), i64 0, i64 %idxprom211
  store float %div21043, ptr %arrayidx212, align 4
  %add21544 = call float @_wyvern_slice_main_add215_688878443()
  store float %add21544, ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 3, i64 6), align 4
  %90 = load i32, ptr @main.j, align 4
  call void @print_time(i32 noundef %90)
  %inc21745 = call i32 @_wyvern_slice_main_inc217_747929526()
  store i32 %inc21745, ptr @main.j, align 4
  br label %for.cond156, !llvm.loop !16

for.end218:                                       ; preds = %for.cond156
  %div22046 = call double @_wyvern_slice_main_div220_579938798()
  %conv221 = fptrunc double %div22046 to float
  store float %conv221, ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 3, i64 6), align 4
  %91 = load ptr, ptr @stderr, align 8
  %call222 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %91, ptr noundef @.str.20, double noundef 0.000000e+00)
  %92 = load ptr, ptr @stderr, align 8
  %call223 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %92, ptr noundef @.str.21)
  store i32 0, ptr @main.i, align 4
  br label %for.cond225

for.cond225:                                      ; preds = %for.body228, %for.end218
  %93 = load i32, ptr @main.i, align 4
  %cmp226 = icmp slt i32 %93, %loop.1.lcssa
  br i1 %cmp226, label %for.body228, label %for.end231

for.body228:                                      ; preds = %for.cond225
  %94 = load i32, ptr @main.ldaa, align 4
  %95 = load i32, ptr @main.n, align 4
  call void @matgen(ptr noundef @main.aa, i32 noundef %94, i32 noundef %95, ptr noundef @main.b, ptr noundef %norma)
  %inc23047 = call i32 @_wyvern_slice_main_inc230_703557289()
  store i32 %inc23047, ptr @main.i, align 4
  br label %for.cond225, !llvm.loop !17

for.end231:                                       ; preds = %for.cond225
  %sub23348 = call float @_wyvern_slice_main_sub233_530999804()
  %div23649 = call double @_wyvern_slice_main_div236_727910455()
  %96 = load ptr, ptr @stderr, align 8
  %call238 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %96, ptr noundef @.str.16, double noundef 0.000000e+00)
  %97 = load ptr, ptr @stderr, align 8
  %98 = load i32, ptr @main.ldaa, align 4
  %call239 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %97, ptr noundef @.str.19, i32 noundef %98)
  %99 = load ptr, ptr @stderr, align 8
  %call240 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %99, ptr noundef @.str.12)
  %100 = load ptr, ptr @stderr, align 8
  %call241 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %100, ptr noundef @.str.13)
  %mul24350 = call float @_wyvern_slice_main_mul243_953256468()
  store float 0.000000e+00, ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 3, i64 12), align 4
  store i32 7, ptr @main.j, align 4
  br label %for.cond244

for.cond244:                                      ; preds = %for.end270, %for.end231
  %101 = load i32, ptr @main.j, align 4
  %cmp245 = icmp slt i32 %101, 12
  br i1 %cmp245, label %for.body247, label %for.end306

for.body247:                                      ; preds = %for.cond244
  store i32 0, ptr @main.i, align 4
  br label %for.cond249

for.cond249:                                      ; preds = %for.body252, %for.body247
  %102 = load i32, ptr @main.i, align 4
  %103 = load i32, ptr @main.ntimes, align 4
  %cmp250 = icmp slt i32 %102, %103
  br i1 %cmp250, label %for.body252, label %for.end255

for.body252:                                      ; preds = %for.cond249
  %104 = load i32, ptr @main.ldaa, align 4
  %105 = load i32, ptr @main.n, align 4
  call void @matgen(ptr noundef @main.aa, i32 noundef %104, i32 noundef %105, ptr noundef @main.b, ptr noundef %norma)
  %106 = load i32, ptr @main.ldaa, align 4
  %107 = load i32, ptr @main.n, align 4
  call void @dgefa(ptr noundef @main.aa, i32 noundef %106, i32 noundef %107, ptr noundef @main.ipvt, ptr noundef @main.info)
  %inc25451 = call i32 @_wyvern_slice_main_inc254_837923623()
  store i32 %inc25451, ptr @main.i, align 4
  br label %for.cond249, !llvm.loop !18

for.end255:                                       ; preds = %for.cond249
  %sub25752 = call float @_wyvern_slice_main_sub257_516487268()
  %sub25853 = call float @_wyvern_slice_main_sub258_158656160(i32 %loop.1.lcssa)
  %div26054 = call float @_wyvern_slice_main_div260_339933047(i32 %loop.1.lcssa)
  %108 = load i32, ptr @main.j, align 4
  %idxprom261 = sext i32 %108 to i64
  %arrayidx262 = getelementptr inbounds [15 x float], ptr @atime, i64 0, i64 %idxprom261
  store float %div26054, ptr %arrayidx262, align 4
  store i32 0, ptr @main.i, align 4
  br label %for.cond264

for.cond264:                                      ; preds = %for.body267, %for.end255
  %109 = load i32, ptr @main.i, align 4
  %110 = load i32, ptr @main.ntimes, align 4
  %cmp265 = icmp slt i32 %109, %110
  br i1 %cmp265, label %for.body267, label %for.end270

for.body267:                                      ; preds = %for.cond264
  %111 = load i32, ptr @main.ldaa, align 4
  %112 = load i32, ptr @main.n, align 4
  call void @dgesl(ptr noundef @main.aa, i32 noundef %111, i32 noundef %112, ptr noundef @main.ipvt, ptr noundef @main.b, i32 noundef 0)
  %inc26955 = call i32 @_wyvern_slice_main_inc269_430562307()
  store i32 %inc26955, ptr @main.i, align 4
  br label %for.cond264, !llvm.loop !19

for.end270:                                       ; preds = %for.cond264
  %sub27256 = call float @_wyvern_slice_main_sub272_361312646()
  %div27457 = call float @_wyvern_slice_main_div274_910938677()
  %113 = load i32, ptr @main.j, align 4
  %idxprom275 = sext i32 %113 to i64
  %arrayidx276 = getelementptr inbounds [15 x float], ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 1), i64 0, i64 %idxprom275
  store float %div27457, ptr %arrayidx276, align 4
  %add28158 = call float @_wyvern_slice_main_add281_983116037()
  %114 = load i32, ptr @main.j, align 4
  %idxprom282 = sext i32 %114 to i64
  %arrayidx283 = getelementptr inbounds [15 x float], ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 2), i64 0, i64 %idxprom282
  store float %add28158, ptr %arrayidx283, align 4
  %mul28659 = call double @_wyvern_slice_main_mul286_931926408()
  %div28760 = call double @_wyvern_slice_main_div287_98444235()
  %conv288 = fptrunc double %div28760 to float
  %115 = load i32, ptr @main.j, align 4
  %idxprom289 = sext i32 %115 to i64
  %arrayidx290 = getelementptr inbounds [15 x float], ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 3), i64 0, i64 %idxprom289
  store float %conv288, ptr %arrayidx290, align 4
  %div29461 = call double @_wyvern_slice_main_div294_915286852()
  %conv295 = fptrunc double %div29461 to float
  %116 = load i32, ptr @main.j, align 4
  %idxprom296 = sext i32 %116 to i64
  %arrayidx297 = getelementptr inbounds [15 x float], ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 4), i64 0, i64 %idxprom296
  store float %conv295, ptr %arrayidx297, align 4
  %div29862 = call float @_wyvern_slice_main_div298_789996571()
  %117 = load i32, ptr @main.j, align 4
  %idxprom299 = sext i32 %117 to i64
  %arrayidx300 = getelementptr inbounds [15 x float], ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 5), i64 0, i64 %idxprom299
  store float %div29862, ptr %arrayidx300, align 4
  %add30363 = call float @_wyvern_slice_main_add303_123099858()
  store float %add30363, ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 3, i64 12), align 4
  %118 = load i32, ptr @main.j, align 4
  call void @print_time(i32 noundef %118)
  %inc30564 = call i32 @_wyvern_slice_main_inc305_176404041()
  store i32 %inc30564, ptr @main.j, align 4
  br label %for.cond244, !llvm.loop !20

for.end306:                                       ; preds = %for.cond244
  %div30865 = call double @_wyvern_slice_main_div308_957628793()
  %conv309 = fptrunc double %div30865 to float
  store float %conv309, ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 3, i64 12), align 4
  %119 = load ptr, ptr @stderr, align 8
  %call310 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %119, ptr noundef @.str.20, double noundef 0.000000e+00)
  ret i32 0
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #2

declare i32 @fprintf(ptr noundef, ptr noundef, ...) #3

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.fmuladd.f64(double, double, double) #4

; Function Attrs: noinline nounwind uwtable
define dso_local void @matgen(ptr noundef %a, i32 noundef %lda, i32 noundef %n, ptr noundef %b, ptr noundef %norma) #0 {
entry:
  store float 0.000000e+00, ptr %norma, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc16, %entry
  %init.0 = phi i32 [ 1325, %entry ], [ %init.1.lcssa, %for.inc16 ]
  %j.0 = phi i32 [ 0, %entry ], [ %inc17, %for.inc16 ]
  %cmp = icmp slt i32 %j.0, %n
  br i1 %cmp, label %for.cond1, label %for.cond19

for.cond1:                                        ; preds = %for.cond, %cond.end
  %init.1 = phi i32 [ %rem1, %cond.end ], [ %init.0, %for.cond ]
  %i.0 = phi i32 [ %inc, %cond.end ], [ 0, %for.cond ]
  %cmp2 = icmp slt i32 %i.0, %n
  br i1 %cmp2, label %for.body3, label %for.inc16

for.body3:                                        ; preds = %for.cond1
  %rem1 = call i32 @_wyvern_slice_matgen_rem_676876598(i32 %init.1)
  %sub2 = call double @_wyvern_slice_matgen_sub_607114077(i32 %init.1)
  %div3 = call double @_wyvern_slice_matgen_div_141687584(i32 %init.1)
  %conv4 = fptrunc double %div3 to float
  %add4 = call i32 @_wyvern_slice_matgen_add_953808474(i32 %lda, i32 %j.0, i32 %i.0)
  %idxprom = sext i32 %add4 to i64
  %arrayidx = getelementptr inbounds float, ptr %a, i64 %idxprom
  store float %conv4, ptr %arrayidx, align 4
  %add75 = call i32 @_wyvern_slice_matgen_add7_157167714(i32 %lda, i32 %j.0, i32 %i.0)
  %idxprom8 = sext i32 %add75 to i64
  %arrayidx9 = getelementptr inbounds float, ptr %a, i64 %idxprom8
  %0 = load float, ptr %arrayidx9, align 4
  %1 = load float, ptr %norma, align 4
  %cmp10 = fcmp ogt float %0, %1
  br i1 %cmp10, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body3
  %add136 = call i32 @_wyvern_slice_matgen_add13_487537076(i32 %lda, i32 %j.0, i32 %i.0)
  %idxprom14 = sext i32 %add136 to i64
  %arrayidx15 = getelementptr inbounds float, ptr %a, i64 %idxprom14
  %2 = load float, ptr %arrayidx15, align 4
  br label %cond.end

cond.false:                                       ; preds = %for.body3
  %3 = load float, ptr %norma, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %2, %cond.true ], [ %3, %cond.false ]
  store float %cond, ptr %norma, align 4
  %inc = add nsw i32 %i.0, 1
  br label %for.cond1, !llvm.loop !21

for.inc16:                                        ; preds = %for.cond1
  %init.1.lcssa = phi i32 [ %init.1, %for.cond1 ]
  %inc17 = add nsw i32 %j.0, 1
  br label %for.cond, !llvm.loop !22

for.cond19:                                       ; preds = %for.cond, %for.body22
  %i.1 = phi i32 [ %inc26, %for.body22 ], [ 0, %for.cond ]
  %cmp20 = icmp slt i32 %i.1, %n
  br i1 %cmp20, label %for.body22, label %for.cond28

for.body22:                                       ; preds = %for.cond19
  %idxprom23 = sext i32 %i.1 to i64
  %arrayidx24 = getelementptr inbounds float, ptr %b, i64 %idxprom23
  store float 0.000000e+00, ptr %arrayidx24, align 4
  %inc26 = add nsw i32 %i.1, 1
  br label %for.cond19, !llvm.loop !23

for.cond28:                                       ; preds = %for.cond19, %for.inc48
  %j.1 = phi i32 [ %inc49, %for.inc48 ], [ 0, %for.cond19 ]
  %cmp29 = icmp slt i32 %j.1, %n
  br i1 %cmp29, label %for.cond32, label %for.end50

for.cond32:                                       ; preds = %for.cond28, %for.body35
  %i.2 = phi i32 [ %inc46, %for.body35 ], [ 0, %for.cond28 ]
  %cmp33 = icmp slt i32 %i.2, %n
  br i1 %cmp33, label %for.body35, label %for.inc48

for.body35:                                       ; preds = %for.cond32
  %add397 = call i32 @_wyvern_slice_matgen_add39_621693369(i32 %lda, i32 %i.2, i32 %j.1)
  %add428 = call float @_wyvern_slice_matgen_add42_749532836(ptr %a, i32 %lda, ptr %b, i32 %i.2, i32 %j.1)
  %idxprom43 = sext i32 %i.2 to i64
  %arrayidx44 = getelementptr inbounds float, ptr %b, i64 %idxprom43
  store float %add428, ptr %arrayidx44, align 4
  %inc46 = add nsw i32 %i.2, 1
  br label %for.cond32, !llvm.loop !24

for.inc48:                                        ; preds = %for.cond32
  %inc49 = add nsw i32 %j.1, 1
  br label %for.cond28, !llvm.loop !25

for.end50:                                        ; preds = %for.cond28
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dgefa(ptr noundef %a, i32 noundef %lda, i32 noundef %n, ptr noundef %ipvt, ptr noundef %info) #0 {
entry:
  store i32 0, ptr %info, align 4
  %sub = sub nsw i32 %n, 1
  %cmp = icmp sge i32 %sub, 0
  br i1 %cmp, label %for.cond, label %if.end86

for.cond:                                         ; preds = %entry, %for.inc83
  %k.0 = phi i32 [ %inc84, %for.inc83 ], [ 0, %entry ]
  %cmp1 = icmp slt i32 %k.0, %sub
  br i1 %cmp1, label %for.body, label %if.end86

for.body:                                         ; preds = %for.cond
  %add = add nsw i32 %k.0, 1
  %add31 = call i32 @_wyvern_slice_dgefa_add3_386390882(i32 %lda, i32 %k.0)
  %add44 = call i32 @_wyvern_slice_dgefa_add4_146454525(ptr %a, i32 %lda, i32 %n, i32 %k.0)
  %idxprom5 = sext i32 %k.0 to i64
  %arrayidx6 = getelementptr inbounds i32, ptr %ipvt, i64 %idxprom5
  store i32 %add44, ptr %arrayidx6, align 4
  %add85 = call i32 @_wyvern_slice_dgefa_add8_952057497(ptr %a, i32 %lda, i32 %n, i32 %k.0)
  %idxprom9 = sext i32 %add85 to i64
  %arrayidx10 = getelementptr inbounds float, ptr %a, i64 %idxprom9
  %0 = load float, ptr %arrayidx10, align 4
  %conv = fpext float %0 to double
  %cmp11 = fcmp une double %conv, 0.000000e+00
  br i1 %cmp11, label %if.then13, label %if.else

if.then13:                                        ; preds = %for.body
  %cmp14 = icmp ne i32 %add44, %k.0
  br i1 %cmp14, label %if.then16, label %if.end

if.then16:                                        ; preds = %if.then13
  %add186 = call i32 @_wyvern_slice_dgefa_add18_588778258(ptr %a, i32 %lda, i32 %n, i32 %k.0)
  %idxprom19 = sext i32 %add186 to i64
  %arrayidx20 = getelementptr inbounds float, ptr %a, i64 %idxprom19
  %1 = load float, ptr %arrayidx20, align 4
  %add227 = call i32 @_wyvern_slice_dgefa_add22_476085177(i32 %lda, i32 %k.0)
  %idxprom23 = sext i32 %add227 to i64
  %arrayidx24 = getelementptr inbounds float, ptr %a, i64 %idxprom23
  %2 = load float, ptr %arrayidx24, align 4
  %add268 = call i32 @_wyvern_slice_dgefa_add26_300950970(ptr %a, i32 %lda, i32 %n, i32 %k.0)
  %idxprom27 = sext i32 %add268 to i64
  %arrayidx28 = getelementptr inbounds float, ptr %a, i64 %idxprom27
  store float %2, ptr %arrayidx28, align 4
  %add3011 = call i32 @_wyvern_slice_dgefa_add30_684802309(i32 %lda, i32 %k.0)
  %idxprom31 = sext i32 %add3011 to i64
  %arrayidx32 = getelementptr inbounds float, ptr %a, i64 %idxprom31
  store float %1, ptr %arrayidx32, align 4
  br label %if.end

if.end:                                           ; preds = %if.then16, %if.then13
  %add3412 = call i32 @_wyvern_slice_dgefa_add34_427964677(i32 %lda, i32 %k.0)
  %div13 = call double @_wyvern_slice_dgefa_div_499376790(ptr %a, i32 %lda, i32 %k.0)
  %conv38 = fptrunc double %div13 to float
  %sub4014 = call i32 @_wyvern_slice_dgefa_sub40_822253393(i32 %n, i32 %k.0)
  %add4215 = call i32 @_wyvern_slice_dgefa_add42_386700733(i32 %lda, i32 %k.0)
  %add4316 = call i32 @_wyvern_slice_dgefa_add43_912299541(i32 %lda, i32 %k.0)
  %idxprom44 = sext i32 %add4316 to i64
  %arrayidx45 = getelementptr inbounds float, ptr %a, i64 %idxprom44
  call void @dscal(i32 noundef %sub4014, float noundef %conv38, ptr noundef %arrayidx45, i32 noundef 1)
  br label %for.cond46

for.cond46:                                       ; preds = %if.end69, %if.end
  %j.0 = phi i32 [ %add, %if.end ], [ %inc, %if.end69 ]
  %cmp47 = icmp slt i32 %j.0, %n
  br i1 %cmp47, label %for.body49, label %for.inc83

for.body49:                                       ; preds = %for.cond46
  %add5117 = call i32 @_wyvern_slice_dgefa_add51_891415967(ptr %a, i32 %lda, i32 %n, i32 %k.0, i32 %j.0)
  %idxprom52 = sext i32 %add5117 to i64
  %arrayidx53 = getelementptr inbounds float, ptr %a, i64 %idxprom52
  %3 = load float, ptr %arrayidx53, align 4
  %cmp54 = icmp ne i32 %add44, %k.0
  br i1 %cmp54, label %if.then56, label %if.end69

if.then56:                                        ; preds = %for.body49
  %add5818 = call i32 @_wyvern_slice_dgefa_add58_347905256(i32 %lda, i32 %k.0, i32 %j.0)
  %idxprom59 = sext i32 %add5818 to i64
  %arrayidx60 = getelementptr inbounds float, ptr %a, i64 %idxprom59
  %4 = load float, ptr %arrayidx60, align 4
  %add6219 = call i32 @_wyvern_slice_dgefa_add62_972361408(ptr %a, i32 %lda, i32 %n, i32 %k.0, i32 %j.0)
  %idxprom63 = sext i32 %add6219 to i64
  %arrayidx64 = getelementptr inbounds float, ptr %a, i64 %idxprom63
  store float %4, ptr %arrayidx64, align 4
  %add6620 = call i32 @_wyvern_slice_dgefa_add66_385924889(i32 %lda, i32 %k.0, i32 %j.0)
  %idxprom67 = sext i32 %add6620 to i64
  %arrayidx68 = getelementptr inbounds float, ptr %a, i64 %idxprom67
  store float %3, ptr %arrayidx68, align 4
  br label %if.end69

if.end69:                                         ; preds = %if.then56, %for.body49
  %sub7121 = call i32 @_wyvern_slice_dgefa_sub71_500951990(i32 %n, i32 %k.0)
  %add7322 = call i32 @_wyvern_slice_dgefa_add73_706187030(i32 %lda, i32 %k.0)
  %add7423 = call i32 @_wyvern_slice_dgefa_add74_354139871(i32 %lda, i32 %k.0)
  %idxprom75 = sext i32 %add7423 to i64
  %arrayidx76 = getelementptr inbounds float, ptr %a, i64 %idxprom75
  %add789 = call i32 @_wyvern_slice_dgefa_add78_644844423(i32 %lda, i32 %k.0, i32 %j.0)
  %add7910 = call i32 @_wyvern_slice_dgefa_add79_727821797(i32 %lda, i32 %j.0, i32 %k.0)
  %idxprom80 = sext i32 %add7910 to i64
  %arrayidx81 = getelementptr inbounds float, ptr %a, i64 %idxprom80
  call void @daxpy(i32 noundef %sub7121, float noundef %3, ptr noundef %arrayidx76, i32 noundef 1, ptr noundef %arrayidx81, i32 noundef 1)
  %inc = add nsw i32 %j.0, 1
  br label %for.cond46, !llvm.loop !26

if.else:                                          ; preds = %for.body
  store i32 %k.0, ptr %info, align 4
  br label %for.inc83

for.inc83:                                        ; preds = %if.else, %for.cond46
  %inc84 = add nsw i32 %k.0, 1
  br label %for.cond, !llvm.loop !27

if.end86:                                         ; preds = %for.cond, %entry
  %sub87 = sub nsw i32 %n, 1
  %sub88 = sub nsw i32 %n, 1
  %idxprom89 = sext i32 %sub88 to i64
  %arrayidx90 = getelementptr inbounds i32, ptr %ipvt, i64 %idxprom89
  store i32 %sub87, ptr %arrayidx90, align 4
  %mul9224 = call i32 @_wyvern_slice_dgefa_mul92_177505405(i32 %lda, i32 %n)
  %add9425 = call i32 @_wyvern_slice_dgefa_add94_375406982(i32 %lda, i32 %n)
  %idxprom95 = sext i32 %add9425 to i64
  %arrayidx96 = getelementptr inbounds float, ptr %a, i64 %idxprom95
  %5 = load float, ptr %arrayidx96, align 4
  %conv97 = fpext float %5 to double
  %cmp98 = fcmp oeq double %conv97, 0.000000e+00
  br i1 %cmp98, label %if.then100, label %if.end102

if.then100:                                       ; preds = %if.end86
  %sub101 = sub nsw i32 %n, 1
  store i32 %sub101, ptr %info, align 4
  br label %if.end102

if.end102:                                        ; preds = %if.then100, %if.end86
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dgesl(ptr noundef %a, i32 noundef %lda, i32 noundef %n, ptr noundef %ipvt, ptr noundef %b, i32 noundef %job) #0 {
entry:
  %sub = sub nsw i32 %n, 1
  %cmp = icmp eq i32 %job, 0
  br i1 %cmp, label %if.then, label %for.cond46

if.then:                                          ; preds = %entry
  %cmp1 = icmp sge i32 %sub, 1
  br i1 %cmp1, label %for.cond, label %for.cond23

for.cond:                                         ; preds = %if.then, %if.end
  %k.0 = phi i32 [ %inc, %if.end ], [ 0, %if.then ]
  %cmp3 = icmp slt i32 %k.0, %sub
  br i1 %cmp3, label %for.body, label %for.cond23

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %k.0 to i64
  %arrayidx = getelementptr inbounds i32, ptr %ipvt, i64 %idxprom
  %0 = load i32, ptr %arrayidx, align 4
  %idxprom4 = sext i32 %0 to i64
  %arrayidx5 = getelementptr inbounds float, ptr %b, i64 %idxprom4
  %1 = load float, ptr %arrayidx5, align 4
  %cmp6 = icmp ne i32 %0, %k.0
  br i1 %cmp6, label %if.then7, label %if.end

if.then7:                                         ; preds = %for.body
  %idxprom8 = sext i32 %k.0 to i64
  %arrayidx9 = getelementptr inbounds float, ptr %b, i64 %idxprom8
  %2 = load float, ptr %arrayidx9, align 4
  %idxprom10 = sext i32 %0 to i64
  %arrayidx11 = getelementptr inbounds float, ptr %b, i64 %idxprom10
  store float %2, ptr %arrayidx11, align 4
  %idxprom12 = sext i32 %k.0 to i64
  %arrayidx13 = getelementptr inbounds float, ptr %b, i64 %idxprom12
  store float %1, ptr %arrayidx13, align 4
  br label %if.end

if.end:                                           ; preds = %if.then7, %for.body
  %sub141 = call i32 @_wyvern_slice_dgesl_sub14_582048061(i32 %n, i32 %k.0)
  %add152 = call i32 @_wyvern_slice_dgesl_add15_850974775(i32 %lda, i32 %k.0)
  %add163 = call i32 @_wyvern_slice_dgesl_add16_970515763(i32 %lda, i32 %k.0)
  %idxprom17 = sext i32 %add163 to i64
  %arrayidx18 = getelementptr inbounds float, ptr %a, i64 %idxprom17
  %add19 = add nsw i32 %k.0, 1
  %idxprom20 = sext i32 %add19 to i64
  %arrayidx21 = getelementptr inbounds float, ptr %b, i64 %idxprom20
  call void @daxpy(i32 noundef %sub141, float noundef %1, ptr noundef %arrayidx18, i32 noundef 1, ptr noundef %arrayidx21, i32 noundef 1)
  %inc = add nsw i32 %k.0, 1
  br label %for.cond, !llvm.loop !28

for.cond23:                                       ; preds = %if.then, %for.cond, %for.body25
  %kb.0 = phi i32 [ %inc44, %for.body25 ], [ 0, %for.cond ], [ 0, %if.then ]
  %cmp24 = icmp slt i32 %kb.0, %n
  br i1 %cmp24, label %for.body25, label %if.end107

for.body25:                                       ; preds = %for.cond23
  %sub274 = call i32 @_wyvern_slice_dgesl_sub27_147291810(i32 %n, i32 %kb.0)
  %mul305 = call i32 @_wyvern_slice_dgesl_mul30_862369790(i32 %lda, i32 %n, i32 %kb.0)
  %add316 = call i32 @_wyvern_slice_dgesl_add31_438618812(i32 %lda, i32 %n, i32 %kb.0)
  %div7 = call float @_wyvern_slice_dgesl_div_838594577(ptr %a, i32 %lda, i32 %n, ptr %b, i32 %kb.0)
  %idxprom34 = sext i32 %sub274 to i64
  %arrayidx35 = getelementptr inbounds float, ptr %b, i64 %idxprom34
  store float %div7, ptr %arrayidx35, align 4
  %idxprom36 = sext i32 %sub274 to i64
  %arrayidx37 = getelementptr inbounds float, ptr %b, i64 %idxprom36
  %3 = load float, ptr %arrayidx37, align 4
  %fneg = fneg float %3
  %mul388 = call i32 @_wyvern_slice_dgesl_mul38_703590186(i32 %lda, i32 %n, i32 %kb.0)
  %add399 = call i32 @_wyvern_slice_dgesl_add39_104735537(i32 %lda, i32 %n, i32 %kb.0)
  %idxprom40 = sext i32 %add399 to i64
  %arrayidx41 = getelementptr inbounds float, ptr %a, i64 %idxprom40
  %arrayidx42 = getelementptr inbounds float, ptr %b, i64 0
  call void @daxpy(i32 noundef %sub274, float noundef %fneg, ptr noundef %arrayidx41, i32 noundef 1, ptr noundef %arrayidx42, i32 noundef 1)
  %inc44 = add nsw i32 %kb.0, 1
  br label %for.cond23, !llvm.loop !29

for.cond46:                                       ; preds = %entry, %for.body48
  %k.1 = phi i32 [ %inc65, %for.body48 ], [ 0, %entry ]
  %cmp47 = icmp slt i32 %k.1, %n
  br i1 %cmp47, label %for.body48, label %for.end66

for.body48:                                       ; preds = %for.cond46
  %add5010 = call i32 @_wyvern_slice_dgesl_add50_131654661(i32 %lda, i32 %k.1)
  %sub5611 = call float @_wyvern_slice_dgesl_sub56_332495788(ptr %a, i32 %lda, ptr %b, i32 %k.1)
  %add5812 = call i32 @_wyvern_slice_dgesl_add58_246920969(i32 %lda, i32 %k.1)
  %div6113 = call float @_wyvern_slice_dgesl_div61_158471803(ptr %a, i32 %lda, ptr %b, i32 %k.1)
  %idxprom62 = sext i32 %k.1 to i64
  %arrayidx63 = getelementptr inbounds float, ptr %b, i64 %idxprom62
  store float %div6113, ptr %arrayidx63, align 4
  %inc65 = add nsw i32 %k.1, 1
  br label %for.cond46, !llvm.loop !30

for.end66:                                        ; preds = %for.cond46
  %cmp67 = icmp sge i32 %sub, 1
  br i1 %cmp67, label %for.cond69, label %if.end107

for.cond69:                                       ; preds = %for.end66, %for.inc103
  %kb.1 = phi i32 [ %inc104, %for.inc103 ], [ 1, %for.end66 ]
  %cmp70 = icmp slt i32 %kb.1, %sub
  br i1 %cmp70, label %for.body71, label %if.end107

for.body71:                                       ; preds = %for.cond69
  %sub7314 = call i32 @_wyvern_slice_dgesl_sub73_179918054(i32 %n, i32 %kb.1)
  %add7615 = call i32 @_wyvern_slice_dgesl_add76_170848176(i32 %n, i32 %kb.1)
  %sub7716 = call i32 @_wyvern_slice_dgesl_sub77_59893004(i32 %n, i32 %kb.1)
  %mul7817 = call i32 @_wyvern_slice_dgesl_mul78_740081816(i32 %lda, i32 %n, i32 %kb.1)
  %add7918 = call i32 @_wyvern_slice_dgesl_add79_902667212(i32 %lda, i32 %n, i32 %kb.1)
  %add8019 = call i32 @_wyvern_slice_dgesl_add80_917971863(i32 %lda, i32 %n, i32 %kb.1)
  %add8320 = call i32 @_wyvern_slice_dgesl_add83_744827942(i32 %n, i32 %kb.1)
  %add8721 = call float @_wyvern_slice_dgesl_add87_777761192(ptr %a, i32 %lda, i32 %n, ptr %b, i32 %kb.1)
  %idxprom88 = sext i32 %sub7314 to i64
  %arrayidx89 = getelementptr inbounds float, ptr %b, i64 %idxprom88
  store float %add8721, ptr %arrayidx89, align 4
  %idxprom90 = sext i32 %sub7314 to i64
  %arrayidx91 = getelementptr inbounds i32, ptr %ipvt, i64 %idxprom90
  %4 = load i32, ptr %arrayidx91, align 4
  %cmp92 = icmp ne i32 %4, %sub7314
  br i1 %cmp92, label %if.then93, label %for.inc103

if.then93:                                        ; preds = %for.body71
  %idxprom94 = sext i32 %4 to i64
  %arrayidx95 = getelementptr inbounds float, ptr %b, i64 %idxprom94
  %5 = load float, ptr %arrayidx95, align 4
  %idxprom96 = sext i32 %sub7314 to i64
  %arrayidx97 = getelementptr inbounds float, ptr %b, i64 %idxprom96
  %6 = load float, ptr %arrayidx97, align 4
  %idxprom98 = sext i32 %4 to i64
  %arrayidx99 = getelementptr inbounds float, ptr %b, i64 %idxprom98
  store float %6, ptr %arrayidx99, align 4
  %idxprom100 = sext i32 %sub7314 to i64
  %arrayidx101 = getelementptr inbounds float, ptr %b, i64 %idxprom100
  store float %5, ptr %arrayidx101, align 4
  br label %for.inc103

for.inc103:                                       ; preds = %for.body71, %if.then93
  %inc104 = add nsw i32 %kb.1, 1
  br label %for.cond69, !llvm.loop !31

if.end107:                                        ; preds = %for.end66, %for.cond69, %for.cond23
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dmxpy(i32 noundef %n1, ptr noundef %y, i32 noundef %n2, i32 noundef %ldm, ptr noundef %x, ptr noundef %m) #0 {
entry:
  %rem = srem i32 %n2, 2
  %cmp = icmp sge i32 %rem, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %sub17 = call i32 @_wyvern_slice_dmxpy_sub_879752752(i32 %n2)
  br label %for.cond

for.cond:                                         ; preds = %for.body, %if.then
  %i.0 = phi i32 [ 0, %if.then ], [ %inc, %for.body ]
  %cmp1 = icmp slt i32 %i.0, %n1
  br i1 %cmp1, label %for.body, label %if.end

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %i.0 to i64
  %arrayidx = getelementptr inbounds float, ptr %y, i64 %idxprom
  %0 = load float, ptr %arrayidx, align 4
  %idxprom2 = sext i32 %sub17 to i64
  %arrayidx3 = getelementptr inbounds float, ptr %x, i64 %idxprom2
  %1 = load float, ptr %arrayidx3, align 4
  %mul18 = call i32 @_wyvern_slice_dmxpy_mul_840533345(i32 %n2, i32 %ldm)
  %add19 = call i32 @_wyvern_slice_dmxpy_add_545537352(i32 %n2, i32 %ldm, i32 %i.0)
  %idxprom4 = sext i32 %add19 to i64
  %arrayidx5 = getelementptr inbounds float, ptr %m, i64 %idxprom4
  %2 = load float, ptr %arrayidx5, align 4
  %3 = call float @llvm.fmuladd.f32(float %1, float %2, float %0)
  %idxprom7 = sext i32 %i.0 to i64
  %arrayidx8 = getelementptr inbounds float, ptr %y, i64 %idxprom7
  store float %3, ptr %arrayidx8, align 4
  %inc = add nsw i32 %i.0, 1
  br label %for.cond, !llvm.loop !32

if.end:                                           ; preds = %for.cond, %entry
  %rem9 = srem i32 %n2, 4
  %cmp10 = icmp sge i32 %rem9, 2
  br i1 %cmp10, label %if.then11, label %if.end39

if.then11:                                        ; preds = %if.end
  %sub1220 = call i32 @_wyvern_slice_dmxpy_sub12_744077589(i32 %n2)
  br label %for.cond13

for.cond13:                                       ; preds = %for.body15, %if.then11
  %i.1 = phi i32 [ 0, %if.then11 ], [ %inc37, %for.body15 ]
  %cmp14 = icmp slt i32 %i.1, %n1
  br i1 %cmp14, label %for.body15, label %if.end39

for.body15:                                       ; preds = %for.cond13
  %idxprom16 = sext i32 %i.1 to i64
  %arrayidx17 = getelementptr inbounds float, ptr %y, i64 %idxprom16
  %4 = load float, ptr %arrayidx17, align 4
  %sub1821 = call i32 @_wyvern_slice_dmxpy_sub18_726573646(i32 %n2)
  %idxprom19 = sext i32 %sub1821 to i64
  %arrayidx20 = getelementptr inbounds float, ptr %x, i64 %idxprom19
  %5 = load float, ptr %arrayidx20, align 4
  %sub2122 = call i32 @_wyvern_slice_dmxpy_sub21_799345465(i32 %n2)
  %mul2223 = call i32 @_wyvern_slice_dmxpy_mul22_272507817(i32 %n2, i32 %ldm)
  %add2324 = call i32 @_wyvern_slice_dmxpy_add23_83250034(i32 %n2, i32 %ldm, i32 %i.1)
  %idxprom24 = sext i32 %add2324 to i64
  %arrayidx25 = getelementptr inbounds float, ptr %m, i64 %idxprom24
  %6 = load float, ptr %arrayidx25, align 4
  %7 = call float @llvm.fmuladd.f32(float %5, float %6, float %4)
  %idxprom27 = sext i32 %sub1220 to i64
  %arrayidx28 = getelementptr inbounds float, ptr %x, i64 %idxprom27
  %8 = load float, ptr %arrayidx28, align 4
  %mul2928 = call i32 @_wyvern_slice_dmxpy_mul29_944943901(i32 %n2, i32 %ldm)
  %add301 = call i32 @_wyvern_slice_dmxpy_add30_478369933(i32 %n2, i32 %ldm, i32 %i.1)
  %idxprom31 = sext i32 %add301 to i64
  %arrayidx32 = getelementptr inbounds float, ptr %m, i64 %idxprom31
  %9 = load float, ptr %arrayidx32, align 4
  %10 = call float @llvm.fmuladd.f32(float %8, float %9, float %7)
  %idxprom34 = sext i32 %i.1 to i64
  %arrayidx35 = getelementptr inbounds float, ptr %y, i64 %idxprom34
  store float %10, ptr %arrayidx35, align 4
  %inc37 = add nsw i32 %i.1, 1
  br label %for.cond13, !llvm.loop !33

if.end39:                                         ; preds = %for.cond13, %if.end
  %rem40 = srem i32 %n2, 8
  %cmp41 = icmp sge i32 %rem40, 4
  br i1 %cmp41, label %if.then42, label %if.end88

if.then42:                                        ; preds = %if.end39
  %sub432 = call i32 @_wyvern_slice_dmxpy_sub43_358206540(i32 %n2)
  br label %for.cond44

for.cond44:                                       ; preds = %for.body46, %if.then42
  %i.2 = phi i32 [ 0, %if.then42 ], [ %inc86, %for.body46 ]
  %cmp45 = icmp slt i32 %i.2, %n1
  br i1 %cmp45, label %for.body46, label %if.end88

for.body46:                                       ; preds = %for.cond44
  %idxprom47 = sext i32 %i.2 to i64
  %arrayidx48 = getelementptr inbounds float, ptr %y, i64 %idxprom47
  %11 = load float, ptr %arrayidx48, align 4
  %sub493 = call i32 @_wyvern_slice_dmxpy_sub49_541652788(i32 %n2)
  %idxprom50 = sext i32 %sub493 to i64
  %arrayidx51 = getelementptr inbounds float, ptr %x, i64 %idxprom50
  %12 = load float, ptr %arrayidx51, align 4
  %sub524 = call i32 @_wyvern_slice_dmxpy_sub52_372613453(i32 %n2)
  %mul535 = call i32 @_wyvern_slice_dmxpy_mul53_390311578(i32 %n2, i32 %ldm)
  %add546 = call i32 @_wyvern_slice_dmxpy_add54_507936757(i32 %n2, i32 %ldm, i32 %i.2)
  %idxprom55 = sext i32 %add546 to i64
  %arrayidx56 = getelementptr inbounds float, ptr %m, i64 %idxprom55
  %13 = load float, ptr %arrayidx56, align 4
  %14 = call float @llvm.fmuladd.f32(float %12, float %13, float %11)
  %sub587 = call i32 @_wyvern_slice_dmxpy_sub58_823375766(i32 %n2)
  %idxprom59 = sext i32 %sub587 to i64
  %arrayidx60 = getelementptr inbounds float, ptr %x, i64 %idxprom59
  %15 = load float, ptr %arrayidx60, align 4
  %sub618 = call i32 @_wyvern_slice_dmxpy_sub61_308606464(i32 %n2)
  %mul629 = call i32 @_wyvern_slice_dmxpy_mul62_193041403(i32 %n2, i32 %ldm)
  %add6310 = call i32 @_wyvern_slice_dmxpy_add63_580518408(i32 %n2, i32 %ldm, i32 %i.2)
  %idxprom64 = sext i32 %add6310 to i64
  %arrayidx65 = getelementptr inbounds float, ptr %m, i64 %idxprom64
  %16 = load float, ptr %arrayidx65, align 4
  %17 = call float @llvm.fmuladd.f32(float %15, float %16, float %14)
  %sub6727 = call i32 @_wyvern_slice_dmxpy_sub67_238225996(i32 %n2)
  %idxprom68 = sext i32 %sub6727 to i64
  %arrayidx69 = getelementptr inbounds float, ptr %x, i64 %idxprom68
  %18 = load float, ptr %arrayidx69, align 4
  %sub7011 = call i32 @_wyvern_slice_dmxpy_sub70_802609421(i32 %n2)
  %mul7112 = call i32 @_wyvern_slice_dmxpy_mul71_616759750(i32 %n2, i32 %ldm)
  %add7213 = call i32 @_wyvern_slice_dmxpy_add72_889151331(i32 %n2, i32 %ldm, i32 %i.2)
  %idxprom73 = sext i32 %add7213 to i64
  %arrayidx74 = getelementptr inbounds float, ptr %m, i64 %idxprom73
  %19 = load float, ptr %arrayidx74, align 4
  %20 = call float @llvm.fmuladd.f32(float %18, float %19, float %17)
  %idxprom76 = sext i32 %sub432 to i64
  %arrayidx77 = getelementptr inbounds float, ptr %x, i64 %idxprom76
  %21 = load float, ptr %arrayidx77, align 4
  %mul7825 = call i32 @_wyvern_slice_dmxpy_mul78_75766944(i32 %n2, i32 %ldm)
  %add7926 = call i32 @_wyvern_slice_dmxpy_add79_788907381(i32 %n2, i32 %ldm, i32 %i.2)
  %idxprom80 = sext i32 %add7926 to i64
  %arrayidx81 = getelementptr inbounds float, ptr %m, i64 %idxprom80
  %22 = load float, ptr %arrayidx81, align 4
  %23 = call float @llvm.fmuladd.f32(float %21, float %22, float %20)
  %idxprom83 = sext i32 %i.2 to i64
  %arrayidx84 = getelementptr inbounds float, ptr %y, i64 %idxprom83
  store float %23, ptr %arrayidx84, align 4
  %inc86 = add nsw i32 %i.2, 1
  br label %for.cond44, !llvm.loop !34

if.end88:                                         ; preds = %for.cond44, %if.end39
  %rem89 = srem i32 %n2, 16
  %cmp90 = icmp sge i32 %rem89, 8
  br i1 %cmp90, label %if.then91, label %if.end173

if.then91:                                        ; preds = %if.end88
  %sub9216 = call i32 @_wyvern_slice_dmxpy_sub92_3329530(i32 %n2)
  br label %for.cond93

for.cond93:                                       ; preds = %for.body95, %if.then91
  %i.3 = phi i32 [ 0, %if.then91 ], [ %inc171, %for.body95 ]
  %cmp94 = icmp slt i32 %i.3, %n1
  br i1 %cmp94, label %for.body95, label %if.end173

for.body95:                                       ; preds = %for.cond93
  %idxprom96 = sext i32 %i.3 to i64
  %arrayidx97 = getelementptr inbounds float, ptr %y, i64 %idxprom96
  %24 = load float, ptr %arrayidx97, align 4
  %sub9829 = call i32 @_wyvern_slice_dmxpy_sub98_815870782(i32 %n2)
  %idxprom99 = sext i32 %sub9829 to i64
  %arrayidx100 = getelementptr inbounds float, ptr %x, i64 %idxprom99
  %25 = load float, ptr %arrayidx100, align 4
  %sub10130 = call i32 @_wyvern_slice_dmxpy_sub101_291652743(i32 %n2)
  %mul10231 = call i32 @_wyvern_slice_dmxpy_mul102_344759632(i32 %n2, i32 %ldm)
  %add10332 = call i32 @_wyvern_slice_dmxpy_add103_796979373(i32 %n2, i32 %ldm, i32 %i.3)
  %idxprom104 = sext i32 %add10332 to i64
  %arrayidx105 = getelementptr inbounds float, ptr %m, i64 %idxprom104
  %26 = load float, ptr %arrayidx105, align 4
  %27 = call float @llvm.fmuladd.f32(float %25, float %26, float %24)
  %sub10733 = call i32 @_wyvern_slice_dmxpy_sub107_628482736(i32 %n2)
  %idxprom108 = sext i32 %sub10733 to i64
  %arrayidx109 = getelementptr inbounds float, ptr %x, i64 %idxprom108
  %28 = load float, ptr %arrayidx109, align 4
  %sub11034 = call i32 @_wyvern_slice_dmxpy_sub110_16396768(i32 %n2)
  %mul11135 = call i32 @_wyvern_slice_dmxpy_mul111_146391586(i32 %n2, i32 %ldm)
  %add11236 = call i32 @_wyvern_slice_dmxpy_add112_742745332(i32 %n2, i32 %ldm, i32 %i.3)
  %idxprom113 = sext i32 %add11236 to i64
  %arrayidx114 = getelementptr inbounds float, ptr %m, i64 %idxprom113
  %29 = load float, ptr %arrayidx114, align 4
  %30 = call float @llvm.fmuladd.f32(float %28, float %29, float %27)
  %sub11637 = call i32 @_wyvern_slice_dmxpy_sub116_573276428(i32 %n2)
  %idxprom117 = sext i32 %sub11637 to i64
  %arrayidx118 = getelementptr inbounds float, ptr %x, i64 %idxprom117
  %31 = load float, ptr %arrayidx118, align 4
  %sub11938 = call i32 @_wyvern_slice_dmxpy_sub119_941449438(i32 %n2)
  %mul12039 = call i32 @_wyvern_slice_dmxpy_mul120_464775094(i32 %n2, i32 %ldm)
  %add12140 = call i32 @_wyvern_slice_dmxpy_add121_748931020(i32 %n2, i32 %ldm, i32 %i.3)
  %idxprom122 = sext i32 %add12140 to i64
  %arrayidx123 = getelementptr inbounds float, ptr %m, i64 %idxprom122
  %32 = load float, ptr %arrayidx123, align 4
  %33 = call float @llvm.fmuladd.f32(float %31, float %32, float %30)
  %sub12541 = call i32 @_wyvern_slice_dmxpy_sub125_193254380(i32 %n2)
  %idxprom126 = sext i32 %sub12541 to i64
  %arrayidx127 = getelementptr inbounds float, ptr %x, i64 %idxprom126
  %34 = load float, ptr %arrayidx127, align 4
  %sub12842 = call i32 @_wyvern_slice_dmxpy_sub128_386432065(i32 %n2)
  %mul12943 = call i32 @_wyvern_slice_dmxpy_mul129_977732795(i32 %n2, i32 %ldm)
  %add13044 = call i32 @_wyvern_slice_dmxpy_add130_732461276(i32 %n2, i32 %ldm, i32 %i.3)
  %idxprom131 = sext i32 %add13044 to i64
  %arrayidx132 = getelementptr inbounds float, ptr %m, i64 %idxprom131
  %35 = load float, ptr %arrayidx132, align 4
  %36 = call float @llvm.fmuladd.f32(float %34, float %35, float %33)
  %sub13445 = call i32 @_wyvern_slice_dmxpy_sub134_320360820(i32 %n2)
  %idxprom135 = sext i32 %sub13445 to i64
  %arrayidx136 = getelementptr inbounds float, ptr %x, i64 %idxprom135
  %37 = load float, ptr %arrayidx136, align 4
  %sub13746 = call i32 @_wyvern_slice_dmxpy_sub137_903890759(i32 %n2)
  %mul13847 = call i32 @_wyvern_slice_dmxpy_mul138_942486145(i32 %n2, i32 %ldm)
  %add13948 = call i32 @_wyvern_slice_dmxpy_add139_33132056(i32 %n2, i32 %ldm, i32 %i.3)
  %idxprom140 = sext i32 %add13948 to i64
  %arrayidx141 = getelementptr inbounds float, ptr %m, i64 %idxprom140
  %38 = load float, ptr %arrayidx141, align 4
  %39 = call float @llvm.fmuladd.f32(float %37, float %38, float %36)
  %sub14349 = call i32 @_wyvern_slice_dmxpy_sub143_739020676(i32 %n2)
  %idxprom144 = sext i32 %sub14349 to i64
  %arrayidx145 = getelementptr inbounds float, ptr %x, i64 %idxprom144
  %40 = load float, ptr %arrayidx145, align 4
  %sub14650 = call i32 @_wyvern_slice_dmxpy_sub146_57397985(i32 %n2)
  %mul14751 = call i32 @_wyvern_slice_dmxpy_mul147_955744658(i32 %n2, i32 %ldm)
  %add14852 = call i32 @_wyvern_slice_dmxpy_add148_798855112(i32 %n2, i32 %ldm, i32 %i.3)
  %idxprom149 = sext i32 %add14852 to i64
  %arrayidx150 = getelementptr inbounds float, ptr %m, i64 %idxprom149
  %41 = load float, ptr %arrayidx150, align 4
  %42 = call float @llvm.fmuladd.f32(float %40, float %41, float %39)
  %sub15253 = call i32 @_wyvern_slice_dmxpy_sub152_741799869(i32 %n2)
  %idxprom153 = sext i32 %sub15253 to i64
  %arrayidx154 = getelementptr inbounds float, ptr %x, i64 %idxprom153
  %43 = load float, ptr %arrayidx154, align 4
  %sub15554 = call i32 @_wyvern_slice_dmxpy_sub155_804915847(i32 %n2)
  %mul15655 = call i32 @_wyvern_slice_dmxpy_mul156_901244996(i32 %n2, i32 %ldm)
  %add15756 = call i32 @_wyvern_slice_dmxpy_add157_510722904(i32 %n2, i32 %ldm, i32 %i.3)
  %idxprom158 = sext i32 %add15756 to i64
  %arrayidx159 = getelementptr inbounds float, ptr %m, i64 %idxprom158
  %44 = load float, ptr %arrayidx159, align 4
  %45 = call float @llvm.fmuladd.f32(float %43, float %44, float %42)
  %idxprom161 = sext i32 %sub9216 to i64
  %arrayidx162 = getelementptr inbounds float, ptr %x, i64 %idxprom161
  %46 = load float, ptr %arrayidx162, align 4
  %mul16357 = call i32 @_wyvern_slice_dmxpy_mul163_969901572(i32 %n2, i32 %ldm)
  %add16458 = call i32 @_wyvern_slice_dmxpy_add164_848391465(i32 %n2, i32 %ldm, i32 %i.3)
  %idxprom165 = sext i32 %add16458 to i64
  %arrayidx166 = getelementptr inbounds float, ptr %m, i64 %idxprom165
  %47 = load float, ptr %arrayidx166, align 4
  %48 = call float @llvm.fmuladd.f32(float %46, float %47, float %45)
  %idxprom168 = sext i32 %i.3 to i64
  %arrayidx169 = getelementptr inbounds float, ptr %y, i64 %idxprom168
  store float %48, ptr %arrayidx169, align 4
  %inc171 = add nsw i32 %i.3, 1
  br label %for.cond93, !llvm.loop !35

if.end173:                                        ; preds = %for.cond93, %if.end88
  %add17559 = call i32 @_wyvern_slice_dmxpy_add175_580918282(i32 %n2)
  %sub17660 = call i32 @_wyvern_slice_dmxpy_sub176_51020702(i32 %n2)
  br label %for.cond177

for.cond177:                                      ; preds = %for.inc332, %if.end173
  %j.0 = phi i32 [ %sub17660, %if.end173 ], [ %add333, %for.inc332 ]
  %cmp178 = icmp slt i32 %j.0, %n2
  br i1 %cmp178, label %for.cond180, label %for.end334

for.cond180:                                      ; preds = %for.cond177, %for.body182
  %i.4 = phi i32 [ %inc330, %for.body182 ], [ 0, %for.cond177 ]
  %cmp181 = icmp slt i32 %i.4, %n1
  br i1 %cmp181, label %for.body182, label %for.inc332

for.body182:                                      ; preds = %for.cond180
  %idxprom183 = sext i32 %i.4 to i64
  %arrayidx184 = getelementptr inbounds float, ptr %y, i64 %idxprom183
  %49 = load float, ptr %arrayidx184, align 4
  %sub185 = sub nsw i32 %j.0, 15
  %idxprom186 = sext i32 %sub185 to i64
  %arrayidx187 = getelementptr inbounds float, ptr %x, i64 %idxprom186
  %50 = load float, ptr %arrayidx187, align 4
  %mul18914 = call i32 @_wyvern_slice_dmxpy_mul189_820532626(i32 %ldm, i32 %j.0)
  %add19015 = call i32 @_wyvern_slice_dmxpy_add190_140795342(i32 %ldm, i32 %i.4, i32 %j.0)
  %idxprom191 = sext i32 %add19015 to i64
  %arrayidx192 = getelementptr inbounds float, ptr %m, i64 %idxprom191
  %51 = load float, ptr %arrayidx192, align 4
  %52 = call float @llvm.fmuladd.f32(float %50, float %51, float %49)
  %sub194 = sub nsw i32 %j.0, 14
  %idxprom195 = sext i32 %sub194 to i64
  %arrayidx196 = getelementptr inbounds float, ptr %x, i64 %idxprom195
  %53 = load float, ptr %arrayidx196, align 4
  %mul19861 = call i32 @_wyvern_slice_dmxpy_mul198_179268158(i32 %ldm, i32 %j.0)
  %add19962 = call i32 @_wyvern_slice_dmxpy_add199_675601854(i32 %ldm, i32 %j.0, i32 %i.4)
  %idxprom200 = sext i32 %add19962 to i64
  %arrayidx201 = getelementptr inbounds float, ptr %m, i64 %idxprom200
  %54 = load float, ptr %arrayidx201, align 4
  %55 = call float @llvm.fmuladd.f32(float %53, float %54, float %52)
  %sub203 = sub nsw i32 %j.0, 13
  %idxprom204 = sext i32 %sub203 to i64
  %arrayidx205 = getelementptr inbounds float, ptr %x, i64 %idxprom204
  %56 = load float, ptr %arrayidx205, align 4
  %mul20763 = call i32 @_wyvern_slice_dmxpy_mul207_842229387(i32 %ldm, i32 %j.0)
  %add20864 = call i32 @_wyvern_slice_dmxpy_add208_475539213(i32 %ldm, i32 %j.0, i32 %i.4)
  %idxprom209 = sext i32 %add20864 to i64
  %arrayidx210 = getelementptr inbounds float, ptr %m, i64 %idxprom209
  %57 = load float, ptr %arrayidx210, align 4
  %58 = call float @llvm.fmuladd.f32(float %56, float %57, float %55)
  %sub212 = sub nsw i32 %j.0, 12
  %idxprom213 = sext i32 %sub212 to i64
  %arrayidx214 = getelementptr inbounds float, ptr %x, i64 %idxprom213
  %59 = load float, ptr %arrayidx214, align 4
  %mul21665 = call i32 @_wyvern_slice_dmxpy_mul216_343920980(i32 %ldm, i32 %j.0)
  %add21766 = call i32 @_wyvern_slice_dmxpy_add217_425288724(i32 %ldm, i32 %i.4, i32 %j.0)
  %idxprom218 = sext i32 %add21766 to i64
  %arrayidx219 = getelementptr inbounds float, ptr %m, i64 %idxprom218
  %60 = load float, ptr %arrayidx219, align 4
  %61 = call float @llvm.fmuladd.f32(float %59, float %60, float %58)
  %sub221 = sub nsw i32 %j.0, 11
  %idxprom222 = sext i32 %sub221 to i64
  %arrayidx223 = getelementptr inbounds float, ptr %x, i64 %idxprom222
  %62 = load float, ptr %arrayidx223, align 4
  %mul22567 = call i32 @_wyvern_slice_dmxpy_mul225_76952825(i32 %ldm, i32 %j.0)
  %add22668 = call i32 @_wyvern_slice_dmxpy_add226_813812623(i32 %ldm, i32 %j.0, i32 %i.4)
  %idxprom227 = sext i32 %add22668 to i64
  %arrayidx228 = getelementptr inbounds float, ptr %m, i64 %idxprom227
  %63 = load float, ptr %arrayidx228, align 4
  %64 = call float @llvm.fmuladd.f32(float %62, float %63, float %61)
  %sub230 = sub nsw i32 %j.0, 10
  %idxprom231 = sext i32 %sub230 to i64
  %arrayidx232 = getelementptr inbounds float, ptr %x, i64 %idxprom231
  %65 = load float, ptr %arrayidx232, align 4
  %mul23469 = call i32 @_wyvern_slice_dmxpy_mul234_798994111(i32 %ldm, i32 %j.0)
  %add23570 = call i32 @_wyvern_slice_dmxpy_add235_536843926(i32 %ldm, i32 %j.0, i32 %i.4)
  %idxprom236 = sext i32 %add23570 to i64
  %arrayidx237 = getelementptr inbounds float, ptr %m, i64 %idxprom236
  %66 = load float, ptr %arrayidx237, align 4
  %67 = call float @llvm.fmuladd.f32(float %65, float %66, float %64)
  %sub239 = sub nsw i32 %j.0, 9
  %idxprom240 = sext i32 %sub239 to i64
  %arrayidx241 = getelementptr inbounds float, ptr %x, i64 %idxprom240
  %68 = load float, ptr %arrayidx241, align 4
  %mul24371 = call i32 @_wyvern_slice_dmxpy_mul243_792524180(i32 %ldm, i32 %j.0)
  %add24472 = call i32 @_wyvern_slice_dmxpy_add244_70040385(i32 %ldm, i32 %i.4, i32 %j.0)
  %idxprom245 = sext i32 %add24472 to i64
  %arrayidx246 = getelementptr inbounds float, ptr %m, i64 %idxprom245
  %69 = load float, ptr %arrayidx246, align 4
  %70 = call float @llvm.fmuladd.f32(float %68, float %69, float %67)
  %sub248 = sub nsw i32 %j.0, 8
  %idxprom249 = sext i32 %sub248 to i64
  %arrayidx250 = getelementptr inbounds float, ptr %x, i64 %idxprom249
  %71 = load float, ptr %arrayidx250, align 4
  %mul25273 = call i32 @_wyvern_slice_dmxpy_mul252_686323520(i32 %ldm, i32 %j.0)
  %add25374 = call i32 @_wyvern_slice_dmxpy_add253_51947678(i32 %ldm, i32 %j.0, i32 %i.4)
  %idxprom254 = sext i32 %add25374 to i64
  %arrayidx255 = getelementptr inbounds float, ptr %m, i64 %idxprom254
  %72 = load float, ptr %arrayidx255, align 4
  %73 = call float @llvm.fmuladd.f32(float %71, float %72, float %70)
  %sub257 = sub nsw i32 %j.0, 7
  %idxprom258 = sext i32 %sub257 to i64
  %arrayidx259 = getelementptr inbounds float, ptr %x, i64 %idxprom258
  %74 = load float, ptr %arrayidx259, align 4
  %mul26175 = call i32 @_wyvern_slice_dmxpy_mul261_701724331(i32 %ldm, i32 %j.0)
  %add26276 = call i32 @_wyvern_slice_dmxpy_add262_1124158(i32 %ldm, i32 %j.0, i32 %i.4)
  %idxprom263 = sext i32 %add26276 to i64
  %arrayidx264 = getelementptr inbounds float, ptr %m, i64 %idxprom263
  %75 = load float, ptr %arrayidx264, align 4
  %76 = call float @llvm.fmuladd.f32(float %74, float %75, float %73)
  %sub266 = sub nsw i32 %j.0, 6
  %idxprom267 = sext i32 %sub266 to i64
  %arrayidx268 = getelementptr inbounds float, ptr %x, i64 %idxprom267
  %77 = load float, ptr %arrayidx268, align 4
  %mul27077 = call i32 @_wyvern_slice_dmxpy_mul270_697825643(i32 %ldm, i32 %j.0)
  %add27178 = call i32 @_wyvern_slice_dmxpy_add271_873451641(i32 %ldm, i32 %j.0, i32 %i.4)
  %idxprom272 = sext i32 %add27178 to i64
  %arrayidx273 = getelementptr inbounds float, ptr %m, i64 %idxprom272
  %78 = load float, ptr %arrayidx273, align 4
  %79 = call float @llvm.fmuladd.f32(float %77, float %78, float %76)
  %sub275 = sub nsw i32 %j.0, 5
  %idxprom276 = sext i32 %sub275 to i64
  %arrayidx277 = getelementptr inbounds float, ptr %x, i64 %idxprom276
  %80 = load float, ptr %arrayidx277, align 4
  %mul27979 = call i32 @_wyvern_slice_dmxpy_mul279_681316345(i32 %ldm, i32 %j.0)
  %add28080 = call i32 @_wyvern_slice_dmxpy_add280_491607708(i32 %ldm, i32 %j.0, i32 %i.4)
  %idxprom281 = sext i32 %add28080 to i64
  %arrayidx282 = getelementptr inbounds float, ptr %m, i64 %idxprom281
  %81 = load float, ptr %arrayidx282, align 4
  %82 = call float @llvm.fmuladd.f32(float %80, float %81, float %79)
  %sub284 = sub nsw i32 %j.0, 4
  %idxprom285 = sext i32 %sub284 to i64
  %arrayidx286 = getelementptr inbounds float, ptr %x, i64 %idxprom285
  %83 = load float, ptr %arrayidx286, align 4
  %mul28881 = call i32 @_wyvern_slice_dmxpy_mul288_757232504(i32 %ldm, i32 %j.0)
  %add28982 = call i32 @_wyvern_slice_dmxpy_add289_360977474(i32 %ldm, i32 %i.4, i32 %j.0)
  %idxprom290 = sext i32 %add28982 to i64
  %arrayidx291 = getelementptr inbounds float, ptr %m, i64 %idxprom290
  %84 = load float, ptr %arrayidx291, align 4
  %85 = call float @llvm.fmuladd.f32(float %83, float %84, float %82)
  %sub293 = sub nsw i32 %j.0, 3
  %idxprom294 = sext i32 %sub293 to i64
  %arrayidx295 = getelementptr inbounds float, ptr %x, i64 %idxprom294
  %86 = load float, ptr %arrayidx295, align 4
  %mul29783 = call i32 @_wyvern_slice_dmxpy_mul297_616306903(i32 %ldm, i32 %j.0)
  %add29884 = call i32 @_wyvern_slice_dmxpy_add298_673247117(i32 %ldm, i32 %i.4, i32 %j.0)
  %idxprom299 = sext i32 %add29884 to i64
  %arrayidx300 = getelementptr inbounds float, ptr %m, i64 %idxprom299
  %87 = load float, ptr %arrayidx300, align 4
  %88 = call float @llvm.fmuladd.f32(float %86, float %87, float %85)
  %sub302 = sub nsw i32 %j.0, 2
  %idxprom303 = sext i32 %sub302 to i64
  %arrayidx304 = getelementptr inbounds float, ptr %x, i64 %idxprom303
  %89 = load float, ptr %arrayidx304, align 4
  %mul30685 = call i32 @_wyvern_slice_dmxpy_mul306_291477368(i32 %ldm, i32 %j.0)
  %add30786 = call i32 @_wyvern_slice_dmxpy_add307_833147128(i32 %ldm, i32 %j.0, i32 %i.4)
  %idxprom308 = sext i32 %add30786 to i64
  %arrayidx309 = getelementptr inbounds float, ptr %m, i64 %idxprom308
  %90 = load float, ptr %arrayidx309, align 4
  %91 = call float @llvm.fmuladd.f32(float %89, float %90, float %88)
  %sub311 = sub nsw i32 %j.0, 1
  %idxprom312 = sext i32 %sub311 to i64
  %arrayidx313 = getelementptr inbounds float, ptr %x, i64 %idxprom312
  %92 = load float, ptr %arrayidx313, align 4
  %mul31587 = call i32 @_wyvern_slice_dmxpy_mul315_510816481(i32 %ldm, i32 %j.0)
  %add31688 = call i32 @_wyvern_slice_dmxpy_add316_16065317(i32 %ldm, i32 %j.0, i32 %i.4)
  %idxprom317 = sext i32 %add31688 to i64
  %arrayidx318 = getelementptr inbounds float, ptr %m, i64 %idxprom317
  %93 = load float, ptr %arrayidx318, align 4
  %94 = call float @llvm.fmuladd.f32(float %92, float %93, float %91)
  %idxprom320 = sext i32 %j.0 to i64
  %arrayidx321 = getelementptr inbounds float, ptr %x, i64 %idxprom320
  %95 = load float, ptr %arrayidx321, align 4
  %add32389 = call i32 @_wyvern_slice_dmxpy_add323_432786739(i32 %ldm, i32 %i.4, i32 %j.0)
  %idxprom324 = sext i32 %add32389 to i64
  %arrayidx325 = getelementptr inbounds float, ptr %m, i64 %idxprom324
  %96 = load float, ptr %arrayidx325, align 4
  %97 = call float @llvm.fmuladd.f32(float %95, float %96, float %94)
  %idxprom327 = sext i32 %i.4 to i64
  %arrayidx328 = getelementptr inbounds float, ptr %y, i64 %idxprom327
  store float %97, ptr %arrayidx328, align 4
  %inc330 = add nsw i32 %i.4, 1
  br label %for.cond180, !llvm.loop !36

for.inc332:                                       ; preds = %for.cond180
  %add333 = add nsw i32 %j.0, 16
  br label %for.cond177, !llvm.loop !37

for.end334:                                       ; preds = %for.cond177
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.fabs.f64(double) #4

; Function Attrs: noinline nounwind uwtable
define dso_local float @epslon(float noundef %x) #0 {
entry:
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %eps.0 = phi float [ 0.000000e+00, %entry ], [ %conv7, %while.body ]
  %conv = fpext float %eps.0 to double
  %cmp = fcmp oeq double %conv, 0.000000e+00
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %sub1 = call double @_wyvern_slice_epslon_sub_474671349()
  %add2 = call float @_wyvern_slice_epslon_add_916032433()
  %add43 = call float @_wyvern_slice_epslon_add4_757652586()
  %sub64 = call double @_wyvern_slice_epslon_sub6_115714779()
  %0 = call double @llvm.fabs.f64(double %sub64)
  %conv7 = fptrunc double %0 to float
  br label %while.cond, !llvm.loop !38

while.end:                                        ; preds = %while.cond
  %mul5 = call double @_wyvern_slice_epslon_mul_613108716(float %x)
  %conv10 = fptrunc double %mul5 to float
  ret float %conv10
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @print_time(i32 noundef %row) #0 {
entry:
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @idamax(i32 noundef %n, ptr noundef %dx, i32 noundef %incx) #0 {
entry:
  %cmp = icmp slt i32 %n, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %cmp1 = icmp eq i32 %n, 1
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  br label %return

if.end3:                                          ; preds = %if.end
  %cmp4 = icmp ne i32 %incx, 1
  br i1 %cmp4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.end3
  %arrayidx = getelementptr inbounds float, ptr %dx, i64 0
  %0 = load float, ptr %arrayidx, align 4
  %conv = fpext float %0 to double
  %1 = call double @llvm.fabs.f64(double %conv)
  %conv6 = fptrunc double %1 to float
  %add = add nsw i32 1, %incx
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then5
  %dmax.0 = phi float [ %conv6, %if.then5 ], [ %dmax.1, %for.inc ]
  %i.0 = phi i32 [ 1, %if.then5 ], [ %inc, %for.inc ]
  %ix.0 = phi i32 [ %add, %if.then5 ], [ %add20, %for.inc ]
  %itemp.0 = phi i32 [ undef, %if.then5 ], [ %itemp.1, %for.inc ]
  %cmp7 = icmp slt i32 %i.0, %n
  br i1 %cmp7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %ix.0 to i64
  %arrayidx9 = getelementptr inbounds float, ptr %dx, i64 %idxprom
  %2 = load float, ptr %arrayidx9, align 4
  %conv10 = fpext float %2 to double
  %3 = call double @llvm.fabs.f64(double %conv10)
  %conv11 = fpext float %dmax.0 to double
  %cmp12 = fcmp ogt double %3, %conv11
  br i1 %cmp12, label %if.then14, label %if.end19

if.then14:                                        ; preds = %for.body
  %idxprom15 = sext i32 %ix.0 to i64
  %arrayidx16 = getelementptr inbounds float, ptr %dx, i64 %idxprom15
  %4 = load float, ptr %arrayidx16, align 4
  %conv17 = fpext float %4 to double
  %5 = call double @llvm.fabs.f64(double %conv17)
  %conv18 = fptrunc double %5 to float
  br label %if.end19

if.end19:                                         ; preds = %if.then14, %for.body
  %dmax.1 = phi float [ %conv18, %if.then14 ], [ %dmax.0, %for.body ]
  %itemp.1 = phi i32 [ %i.0, %if.then14 ], [ %itemp.0, %for.body ]
  %add20 = add nsw i32 %ix.0, %incx
  br label %for.inc

for.inc:                                          ; preds = %if.end19
  %inc = add nsw i32 %i.0, 1
  br label %for.cond, !llvm.loop !39

for.end:                                          ; preds = %for.cond
  %itemp.0.lcssa = phi i32 [ %itemp.0, %for.cond ]
  br label %if.end43

if.else:                                          ; preds = %if.end3
  %arrayidx21 = getelementptr inbounds float, ptr %dx, i64 0
  %6 = load float, ptr %arrayidx21, align 4
  %conv22 = fpext float %6 to double
  %7 = call double @llvm.fabs.f64(double %conv22)
  %conv23 = fptrunc double %7 to float
  br label %for.cond24

for.cond24:                                       ; preds = %for.inc40, %if.else
  %dmax.2 = phi float [ %conv23, %if.else ], [ %dmax.3, %for.inc40 ]
  %i.1 = phi i32 [ 1, %if.else ], [ %inc41, %for.inc40 ]
  %itemp.2 = phi i32 [ 0, %if.else ], [ %itemp.3, %for.inc40 ]
  %cmp25 = icmp slt i32 %i.1, %n
  br i1 %cmp25, label %for.body27, label %for.end42

for.body27:                                       ; preds = %for.cond24
  %idxprom28 = sext i32 %i.1 to i64
  %arrayidx29 = getelementptr inbounds float, ptr %dx, i64 %idxprom28
  %8 = load float, ptr %arrayidx29, align 4
  %conv30 = fpext float %8 to double
  %9 = call double @llvm.fabs.f64(double %conv30)
  %conv31 = fpext float %dmax.2 to double
  %cmp32 = fcmp ogt double %9, %conv31
  br i1 %cmp32, label %if.then34, label %if.end39

if.then34:                                        ; preds = %for.body27
  %idxprom35 = sext i32 %i.1 to i64
  %arrayidx36 = getelementptr inbounds float, ptr %dx, i64 %idxprom35
  %10 = load float, ptr %arrayidx36, align 4
  %conv37 = fpext float %10 to double
  %11 = call double @llvm.fabs.f64(double %conv37)
  %conv38 = fptrunc double %11 to float
  br label %if.end39

if.end39:                                         ; preds = %if.then34, %for.body27
  %dmax.3 = phi float [ %conv38, %if.then34 ], [ %dmax.2, %for.body27 ]
  %itemp.3 = phi i32 [ %i.1, %if.then34 ], [ %itemp.2, %for.body27 ]
  br label %for.inc40

for.inc40:                                        ; preds = %if.end39
  %inc41 = add nsw i32 %i.1, 1
  br label %for.cond24, !llvm.loop !40

for.end42:                                        ; preds = %for.cond24
  %itemp.2.lcssa = phi i32 [ %itemp.2, %for.cond24 ]
  br label %if.end43

if.end43:                                         ; preds = %for.end42, %for.end
  %itemp.4 = phi i32 [ %itemp.0.lcssa, %for.end ], [ %itemp.2.lcssa, %for.end42 ]
  br label %return

return:                                           ; preds = %if.end43, %if.then2, %if.then
  %retval.0 = phi i32 [ -1, %if.then ], [ 0, %if.then2 ], [ %itemp.4, %if.end43 ]
  ret i32 %retval.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dscal(i32 noundef %n, float noundef %da, ptr noundef %dx, i32 noundef %incx) #0 {
entry:
  %cmp = icmp sle i32 %n, 0
  br i1 %cmp, label %for.end17, label %if.end

if.end:                                           ; preds = %entry
  %cmp1 = icmp ne i32 %incx, 1
  br i1 %cmp1, label %if.then2, label %for.cond8

if.then2:                                         ; preds = %if.end
  %mul = mul nsw i32 %n, %incx
  br label %for.cond

for.cond:                                         ; preds = %for.body, %if.then2
  %i.0 = phi i32 [ 0, %if.then2 ], [ %add, %for.body ]
  %cmp3 = icmp slt i32 %i.0, %mul
  br i1 %cmp3, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  %mul41 = call float @_wyvern_slice_dscal_mul4_669263809(float %da, ptr %dx, i32 %i.0)
  %idxprom5 = sext i32 %i.0 to i64
  %arrayidx6 = getelementptr inbounds float, ptr %dx, i64 %idxprom5
  store float %mul41, ptr %arrayidx6, align 4
  %add = add nsw i32 %i.0, %incx
  br label %for.cond, !llvm.loop !41

for.cond8:                                        ; preds = %if.end, %for.body10
  %i.1 = phi i32 [ %inc, %for.body10 ], [ 0, %if.end ]
  %cmp9 = icmp slt i32 %i.1, %n
  br i1 %cmp9, label %for.body10, label %for.end17

for.body10:                                       ; preds = %for.cond8
  %mul132 = call float @_wyvern_slice_dscal_mul13_899663080(float %da, ptr %dx, i32 %i.1)
  %idxprom14 = sext i32 %i.1 to i64
  %arrayidx15 = getelementptr inbounds float, ptr %dx, i64 %idxprom14
  store float %mul132, ptr %arrayidx15, align 4
  %inc = add nsw i32 %i.1, 1
  br label %for.cond8, !llvm.loop !42

for.end17:                                        ; preds = %for.cond, %entry, %for.cond8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @daxpy(i32 noundef %n, float noundef %da, ptr noundef %dx, i32 noundef %incx, ptr noundef %dy, i32 noundef %incy) #0 {
entry:
  %cmp = icmp sle i32 %n, 0
  %conv = fpext float %da to double
  %cmp1 = fcmp oeq double %conv, 0.000000e+00
  %or.cond5 = or i1 %cmp, %cmp1
  br i1 %or.cond5, label %return, label %if.end4

if.end4:                                          ; preds = %entry
  %cmp5 = icmp ne i32 %incx, 1
  %cmp7 = icmp ne i32 %incy, 1
  %or.cond = or i1 %cmp5, %cmp7
  br i1 %or.cond, label %if.then9, label %for.cond31

if.then9:                                         ; preds = %if.end4
  %cmp10 = icmp slt i32 %incx, 0
  br i1 %cmp10, label %if.then12, label %if.end13

if.then12:                                        ; preds = %if.then9
  %add2 = call i32 @_wyvern_slice_daxpy_add_615765200(i32 %n)
  %mul1 = call i32 @_wyvern_slice_daxpy_mul_886033286(i32 %n, i32 %incx)
  br label %if.end13

if.end13:                                         ; preds = %if.then12, %if.then9
  %ix.0 = phi i32 [ %mul1, %if.then12 ], [ 0, %if.then9 ]
  %cmp14 = icmp slt i32 %incy, 0
  br i1 %cmp14, label %if.then16, label %for.cond

if.then16:                                        ; preds = %if.end13
  %add183 = call i32 @_wyvern_slice_daxpy_add18_38705089(i32 %n)
  %mul194 = call i32 @_wyvern_slice_daxpy_mul19_514446073(i32 %n, i32 %incy)
  br label %for.cond

for.cond:                                         ; preds = %if.end13, %if.then16, %for.body
  %i.0 = phi i32 [ %inc, %for.body ], [ 0, %if.then16 ], [ 0, %if.end13 ]
  %ix.1 = phi i32 [ %add28, %for.body ], [ %ix.0, %if.then16 ], [ %ix.0, %if.end13 ]
  %iy.1 = phi i32 [ %add29, %for.body ], [ %mul194, %if.then16 ], [ 0, %if.end13 ]
  %cmp21 = icmp slt i32 %i.0, %n
  br i1 %cmp21, label %for.body, label %return

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %iy.1 to i64
  %arrayidx = getelementptr inbounds float, ptr %dy, i64 %idxprom
  %0 = load float, ptr %arrayidx, align 4
  %idxprom23 = sext i32 %ix.1 to i64
  %arrayidx24 = getelementptr inbounds float, ptr %dx, i64 %idxprom23
  %1 = load float, ptr %arrayidx24, align 4
  %2 = call float @llvm.fmuladd.f32(float %da, float %1, float %0)
  %idxprom26 = sext i32 %iy.1 to i64
  %arrayidx27 = getelementptr inbounds float, ptr %dy, i64 %idxprom26
  store float %2, ptr %arrayidx27, align 4
  %add28 = add nsw i32 %ix.1, %incx
  %add29 = add nsw i32 %iy.1, %incy
  %inc = add nsw i32 %i.0, 1
  br label %for.cond, !llvm.loop !43

for.cond31:                                       ; preds = %if.end4, %for.body34
  %i.1 = phi i32 [ %inc43, %for.body34 ], [ 0, %if.end4 ]
  %cmp32 = icmp slt i32 %i.1, %n
  br i1 %cmp32, label %for.body34, label %return

for.body34:                                       ; preds = %for.cond31
  %idxprom35 = sext i32 %i.1 to i64
  %arrayidx36 = getelementptr inbounds float, ptr %dy, i64 %idxprom35
  %3 = load float, ptr %arrayidx36, align 4
  %idxprom37 = sext i32 %i.1 to i64
  %arrayidx38 = getelementptr inbounds float, ptr %dx, i64 %idxprom37
  %4 = load float, ptr %arrayidx38, align 4
  %5 = call float @llvm.fmuladd.f32(float %da, float %4, float %3)
  %idxprom40 = sext i32 %i.1 to i64
  %arrayidx41 = getelementptr inbounds float, ptr %dy, i64 %idxprom40
  store float %5, ptr %arrayidx41, align 4
  %inc43 = add nsw i32 %i.1, 1
  br label %for.cond31, !llvm.loop !44

return:                                           ; preds = %for.cond31, %for.cond, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local float @ddot(i32 noundef %n, ptr noundef %dx, i32 noundef %incx, ptr noundef %dy, i32 noundef %incy) #0 {
entry:
  %cmp = icmp sle i32 %n, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1 = icmp ne i32 %incx, 1
  %cmp2 = icmp ne i32 %incy, 1
  %or.cond = or i1 %cmp1, %cmp2
  br i1 %or.cond, label %if.then3, label %for.cond20

if.then3:                                         ; preds = %if.end
  %cmp4 = icmp slt i32 %incx, 0
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.then3
  %add1 = call i32 @_wyvern_slice_ddot_add_738487739(i32 %n)
  %mul2 = call i32 @_wyvern_slice_ddot_mul_716862352(i32 %n, i32 %incx)
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %if.then3
  %ix.0 = phi i32 [ %mul2, %if.then5 ], [ 0, %if.then3 ]
  %cmp7 = icmp slt i32 %incy, 0
  br i1 %cmp7, label %if.then8, label %for.cond

if.then8:                                         ; preds = %if.end6
  %add103 = call i32 @_wyvern_slice_ddot_add10_821618860(i32 %n)
  %mul114 = call i32 @_wyvern_slice_ddot_mul11_984953664(i32 %n, i32 %incy)
  br label %for.cond

for.cond:                                         ; preds = %if.end6, %if.then8, %for.body
  %dtemp.0 = phi float [ %2, %for.body ], [ 0.000000e+00, %if.then8 ], [ 0.000000e+00, %if.end6 ]
  %i.0 = phi i32 [ %inc, %for.body ], [ 0, %if.then8 ], [ 0, %if.end6 ]
  %ix.1 = phi i32 [ %add17, %for.body ], [ %ix.0, %if.then8 ], [ %ix.0, %if.end6 ]
  %iy.1 = phi i32 [ %add18, %for.body ], [ %mul114, %if.then8 ], [ 0, %if.end6 ]
  %cmp13 = icmp slt i32 %i.0, %n
  br i1 %cmp13, label %for.body, label %return

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %ix.1 to i64
  %arrayidx = getelementptr inbounds float, ptr %dx, i64 %idxprom
  %0 = load float, ptr %arrayidx, align 4
  %idxprom14 = sext i32 %iy.1 to i64
  %arrayidx15 = getelementptr inbounds float, ptr %dy, i64 %idxprom14
  %1 = load float, ptr %arrayidx15, align 4
  %2 = call float @llvm.fmuladd.f32(float %0, float %1, float %dtemp.0)
  %add17 = add nsw i32 %ix.1, %incx
  %add18 = add nsw i32 %iy.1, %incy
  %inc = add nsw i32 %i.0, 1
  br label %for.cond, !llvm.loop !45

for.cond20:                                       ; preds = %if.end, %for.body22
  %dtemp.1 = phi float [ %5, %for.body22 ], [ 0.000000e+00, %if.end ]
  %i.1 = phi i32 [ %inc29, %for.body22 ], [ 0, %if.end ]
  %cmp21 = icmp slt i32 %i.1, %n
  br i1 %cmp21, label %for.body22, label %return

for.body22:                                       ; preds = %for.cond20
  %idxprom23 = sext i32 %i.1 to i64
  %arrayidx24 = getelementptr inbounds float, ptr %dx, i64 %idxprom23
  %3 = load float, ptr %arrayidx24, align 4
  %idxprom25 = sext i32 %i.1 to i64
  %arrayidx26 = getelementptr inbounds float, ptr %dy, i64 %idxprom25
  %4 = load float, ptr %arrayidx26, align 4
  %5 = call float @llvm.fmuladd.f32(float %3, float %4, float %dtemp.1)
  %inc29 = add nsw i32 %i.1, 1
  br label %for.cond20, !llvm.loop !46

return:                                           ; preds = %for.cond20, %for.cond, %entry
  %retval.0 = phi float [ 0.000000e+00, %entry ], [ %dtemp.0, %for.cond ], [ %dtemp.1, %for.cond20 ]
  ret float %retval.0
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fmuladd.f32(float, float, float) #4

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_second_div_471812276() #5 {
sliceclone_entry:
  %0 = call i64 @clock() #6
  %1 = sitofp i64 %0 to float
  %2 = fdiv float %1, 1.000000e+06
  ret float %2
}

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_main_sub_552063494() #5 {
sliceclone_entry:
  %0 = call float @second()
  %1 = call float @second()
  %2 = fsub float %1, %0
  ret float %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_main_mul_263102754() #5 {
sliceclone_entry:
  %0 = load i32, ptr @main.n, align 4
  %1 = load i32, ptr @main.n, align 4
  %2 = mul nsw i32 %0, %1
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_main_mul5_784233157() #5 {
sliceclone_entry:
  %0 = load i32, ptr @main.n, align 4
  %1 = load i32, ptr @main.n, align 4
  %2 = mul nsw i32 %0, %1
  %3 = load i32, ptr @main.n, align 4
  %4 = mul nsw i32 %2, %3
  ret i32 %4
}

; Function Attrs: nounwind willreturn
define internal double @_wyvern_slice_main_mul6_976711012() #5 {
sliceclone_entry:
  %0 = load i32, ptr @main.n, align 4
  %1 = load i32, ptr @main.n, align 4
  %2 = mul nsw i32 %0, %1
  %3 = load i32, ptr @main.n, align 4
  %4 = mul nsw i32 %2, %3
  %5 = sitofp i32 %4 to double
  %6 = fmul double 2.000000e+00, %5
  ret double %6
}

; Function Attrs: nounwind willreturn
define internal double @_wyvern_slice_main_div_816001860() #5 {
sliceclone_entry:
  %0 = load i32, ptr @main.n, align 4
  %1 = load i32, ptr @main.n, align 4
  %2 = mul nsw i32 %0, %1
  %3 = load i32, ptr @main.n, align 4
  %4 = mul nsw i32 %2, %3
  %5 = sitofp i32 %4 to double
  %6 = fmul double 2.000000e+00, %5
  %7 = fdiv double %6, 3.000000e+00
  ret double %7
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_main_mul7_315192754() #5 {
sliceclone_entry:
  %0 = load i32, ptr @main.n, align 4
  %1 = load i32, ptr @main.n, align 4
  %2 = mul nsw i32 %0, %1
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_main_sub15_683772791() #5 {
sliceclone_entry:
  %0 = call float @second()
  %1 = call float @second()
  %2 = fsub float %1, %0
  ret float %2
}

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_main_add_648505538() #5 {
sliceclone_entry:
  %0 = load float, ptr @atime, align 16
  %1 = load float, ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 1), align 4
  %2 = fadd float %0, %1
  ret float %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_main_inc_193947325() #5 {
sliceclone_for.inc:
  %0 = load i32, ptr @main.i, align 4
  %1 = add nsw i32 %0, 1
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_main_inc28_15705297() #5 {
sliceclone_for.inc27:
  %0 = load i32, ptr @main.i, align 4
  %1 = add nsw i32 %0, 1
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_main_add126_966623549() #5 {
sliceclone_do.end:
  %0 = add nsw i32 -3, 1
  ret i32 %0
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_main_inc61_463502538() #5 {
sliceclone_for.inc60:
  %0 = load i32, ptr @main.i, align 4
  %1 = add nsw i32 %0, 1
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_main_mul65_916447110() #5 {
sliceclone_entry:
  %0 = alloca float, align 4
  %1 = load i32, ptr @main.n, align 4
  %2 = sitofp i32 %1 to float
  %3 = load float, ptr %0, align 4
  %4 = fmul float %2, %3
  ret float %4
}

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_main_mul66_947720023() #5 {
sliceclone_entry:
  %0 = alloca float, align 4
  br label %sliceclone_for.cond30

sliceclone_for.end62:                             ; preds = %sliceclone_for.cond30
  %1 = phi float [ %7, %sliceclone_for.cond30 ]
  %2 = load i32, ptr @main.n, align 4
  %3 = sitofp i32 %2 to float
  %4 = load float, ptr %0, align 4
  %5 = fmul float %3, %4
  %6 = fmul float %5, %1
  ret float %6

sliceclone_for.cond30:                            ; preds = %sliceclone_cond.end57, %sliceclone_entry
  %7 = phi float [ 0.000000e+00, %sliceclone_entry ], [ %27, %sliceclone_cond.end57 ]
  %8 = load i32, ptr @main.i, align 4
  %9 = load i32, ptr @main.n, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %sliceclone_cond.end, label %sliceclone_for.end62

sliceclone_cond.end:                              ; preds = %sliceclone_for.cond30
  %11 = fpext float %7 to double
  %12 = load i32, ptr @main.i, align 4
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds [200 x float], ptr @main.x, i64 0, i64 %13
  %15 = load float, ptr %14, align 4
  %16 = fpext float %15 to double
  %17 = call double @llvm.fabs.f64(double %16)
  %18 = fcmp ogt double %11, %17
  br i1 %18, label %sliceclone_cond.true51, label %sliceclone_cond.false53

sliceclone_cond.true51:                           ; preds = %sliceclone_cond.end
  %19 = fpext float %7 to double
  br label %sliceclone_cond.end57

sliceclone_cond.false53:                          ; preds = %sliceclone_cond.end
  %20 = load i32, ptr @main.i, align 4
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds [200 x float], ptr @main.x, i64 0, i64 %21
  %23 = load float, ptr %22, align 4
  %24 = fpext float %23 to double
  %25 = call double @llvm.fabs.f64(double %24)
  br label %sliceclone_cond.end57

sliceclone_cond.end57:                            ; preds = %sliceclone_cond.false53, %sliceclone_cond.true51
  %26 = phi double [ %19, %sliceclone_cond.true51 ], [ %25, %sliceclone_cond.false53 ]
  %27 = fptrunc double %26 to float
  br label %sliceclone_for.cond30
}

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_main_mul67_315845599() #5 {
sliceclone_entry:
  %0 = alloca float, align 4
  br label %sliceclone_for.cond30

sliceclone_for.end62:                             ; preds = %sliceclone_for.cond30
  %1 = phi float [ %9, %sliceclone_for.cond30 ]
  %2 = call float @epslon(float noundef 1.000000e+00)
  %3 = load i32, ptr @main.n, align 4
  %4 = sitofp i32 %3 to float
  %5 = load float, ptr %0, align 4
  %6 = fmul float %4, %5
  %7 = fmul float %6, %1
  %8 = fmul float %7, %2
  ret float %8

sliceclone_for.cond30:                            ; preds = %sliceclone_cond.end57, %sliceclone_entry
  %9 = phi float [ 0.000000e+00, %sliceclone_entry ], [ %29, %sliceclone_cond.end57 ]
  %10 = load i32, ptr @main.i, align 4
  %11 = load i32, ptr @main.n, align 4
  %12 = icmp slt i32 %10, %11
  br i1 %12, label %sliceclone_cond.end, label %sliceclone_for.end62

sliceclone_cond.end:                              ; preds = %sliceclone_for.cond30
  %13 = fpext float %9 to double
  %14 = load i32, ptr @main.i, align 4
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds [200 x float], ptr @main.x, i64 0, i64 %15
  %17 = load float, ptr %16, align 4
  %18 = fpext float %17 to double
  %19 = call double @llvm.fabs.f64(double %18)
  %20 = fcmp ogt double %13, %19
  br i1 %20, label %sliceclone_cond.true51, label %sliceclone_cond.false53

sliceclone_cond.true51:                           ; preds = %sliceclone_cond.end
  %21 = fpext float %9 to double
  br label %sliceclone_cond.end57

sliceclone_cond.false53:                          ; preds = %sliceclone_cond.end
  %22 = load i32, ptr @main.i, align 4
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds [200 x float], ptr @main.x, i64 0, i64 %23
  %25 = load float, ptr %24, align 4
  %26 = fpext float %25 to double
  %27 = call double @llvm.fabs.f64(double %26)
  br label %sliceclone_cond.end57

sliceclone_cond.end57:                            ; preds = %sliceclone_cond.false53, %sliceclone_cond.true51
  %28 = phi double [ %21, %sliceclone_cond.true51 ], [ %27, %sliceclone_cond.false53 ]
  %29 = fptrunc double %28 to float
  br label %sliceclone_for.cond30
}

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_main_div68_196771227() #5 {
sliceclone_entry:
  %0 = alloca float, align 4
  br label %sliceclone_for.cond30

sliceclone_for.body33:                            ; preds = %sliceclone_for.cond30
  %1 = fpext float %20 to double
  %2 = load i32, ptr @main.i, align 4
  %3 = sext i32 %2 to i64
  %4 = getelementptr inbounds [200 x float], ptr @main.b, i64 0, i64 %3
  %5 = load float, ptr %4, align 4
  %6 = fpext float %5 to double
  %7 = call double @llvm.fabs.f64(double %6)
  %8 = fcmp ogt double %1, %7
  br i1 %8, label %sliceclone_cond.true, label %sliceclone_cond.false

sliceclone_for.end62:                             ; preds = %sliceclone_for.cond30
  %9 = phi float [ %20, %sliceclone_for.cond30 ]
  %10 = phi float [ %21, %sliceclone_for.cond30 ]
  %11 = call float @epslon(float noundef 1.000000e+00)
  %12 = load i32, ptr @main.n, align 4
  %13 = sitofp i32 %12 to float
  %14 = load float, ptr %0, align 4
  %15 = fmul float %13, %14
  %16 = fmul float %15, %10
  %17 = fmul float %16, %11
  %18 = fdiv float %9, %17
  ret float %18

sliceclone_cond.true:                             ; preds = %sliceclone_for.body33
  %19 = fpext float %20 to double
  br label %sliceclone_cond.end

sliceclone_for.cond30:                            ; preds = %sliceclone_cond.end57, %sliceclone_entry
  %20 = phi float [ 0.000000e+00, %sliceclone_entry ], [ %32, %sliceclone_cond.end57 ]
  %21 = phi float [ 0.000000e+00, %sliceclone_entry ], [ %49, %sliceclone_cond.end57 ]
  %22 = load i32, ptr @main.i, align 4
  %23 = load i32, ptr @main.n, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %sliceclone_for.body33, label %sliceclone_for.end62

sliceclone_cond.false:                            ; preds = %sliceclone_for.body33
  %25 = load i32, ptr @main.i, align 4
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds [200 x float], ptr @main.b, i64 0, i64 %26
  %28 = load float, ptr %27, align 4
  %29 = fpext float %28 to double
  %30 = call double @llvm.fabs.f64(double %29)
  br label %sliceclone_cond.end

sliceclone_cond.end:                              ; preds = %sliceclone_cond.false, %sliceclone_cond.true
  %31 = phi double [ %19, %sliceclone_cond.true ], [ %30, %sliceclone_cond.false ]
  %32 = fptrunc double %31 to float
  %33 = fpext float %21 to double
  %34 = load i32, ptr @main.i, align 4
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds [200 x float], ptr @main.x, i64 0, i64 %35
  %37 = load float, ptr %36, align 4
  %38 = fpext float %37 to double
  %39 = call double @llvm.fabs.f64(double %38)
  %40 = fcmp ogt double %33, %39
  br i1 %40, label %sliceclone_cond.true51, label %sliceclone_cond.false53

sliceclone_cond.true51:                           ; preds = %sliceclone_cond.end
  %41 = fpext float %21 to double
  br label %sliceclone_cond.end57

sliceclone_cond.false53:                          ; preds = %sliceclone_cond.end
  %42 = load i32, ptr @main.i, align 4
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds [200 x float], ptr @main.x, i64 0, i64 %43
  %45 = load float, ptr %44, align 4
  %46 = fpext float %45 to double
  %47 = call double @llvm.fabs.f64(double %46)
  br label %sliceclone_cond.end57

sliceclone_cond.end57:                            ; preds = %sliceclone_cond.false53, %sliceclone_cond.true51
  %48 = phi double [ %41, %sliceclone_cond.true51 ], [ %47, %sliceclone_cond.false53 ]
  %49 = fptrunc double %48 to float
  br label %sliceclone_for.cond30
}

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_main_sub69_997496440() #5 {
sliceclone_for.end62:
  %0 = load float, ptr @main.x, align 16
  %1 = fsub float %0, 1.000000e+00
  ret float %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_main_sub70_913439000() #5 {
sliceclone_for.end62:
  %0 = load i32, ptr @main.n, align 4
  %1 = sub nsw i32 %0, 1
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_main_sub73_64617973() #5 {
sliceclone_for.end62:
  %0 = load i32, ptr @main.n, align 4
  %1 = sub nsw i32 %0, 1
  %2 = sext i32 %1 to i64
  %3 = getelementptr inbounds [200 x float], ptr @main.x, i64 0, i64 %2
  %4 = load float, ptr %3, align 4
  %5 = fsub float %4, 1.000000e+00
  ret float %5
}

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_main_div172_928543120(i32 %loop.1.lcssa, float %sub109.lcssa) #5 {
sliceclone_do.end:
  %0 = fpext float %sub109.lcssa to double
  %1 = sitofp i32 %loop.1.lcssa to double
  %2 = fdiv double %0, %1
  %3 = fptrunc double %2 to float
  %4 = load i32, ptr @main.ntimes, align 4
  %5 = sitofp i32 %4 to float
  %6 = fmul float %5, %3
  %7 = call float @second()
  %8 = call float @second()
  %9 = fsub float %8, %7
  %10 = fsub float %9, %6
  %11 = load i32, ptr @main.ntimes, align 4
  %12 = sitofp i32 %11 to float
  %13 = fdiv float %10, %12
  ret float %13
}

; Function Attrs: nounwind willreturn
define internal double @_wyvern_slice_main_mul91_867475532() #5 {
sliceclone_entry:
  %0 = load float, ptr @atime, align 16
  %1 = load float, ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 1), align 4
  %2 = fadd float %0, %1
  %3 = fpext float %2 to double
  %4 = fmul double 1.000000e+06, %3
  ret double %4
}

; Function Attrs: nounwind willreturn
define internal double @_wyvern_slice_main_div92_545530184() #5 {
sliceclone_entry:
  %0 = load i32, ptr @main.n, align 4
  %1 = load i32, ptr @main.n, align 4
  %2 = mul nsw i32 %0, %1
  %3 = load i32, ptr @main.n, align 4
  %4 = mul nsw i32 %2, %3
  %5 = sitofp i32 %4 to double
  %6 = fmul double 2.000000e+00, %5
  %7 = fdiv double %6, 3.000000e+00
  %8 = load i32, ptr @main.n, align 4
  %9 = load i32, ptr @main.n, align 4
  %10 = mul nsw i32 %8, %9
  %11 = sitofp i32 %10 to double
  %12 = call double @llvm.fmuladd.f64(double 2.000000e+00, double %11, double %7)
  %13 = fptrunc double %12 to float
  %14 = load float, ptr @atime, align 16
  %15 = load float, ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 1), align 4
  %16 = fadd float %14, %15
  %17 = fpext float %13 to double
  %18 = fpext float %16 to double
  %19 = fmul double 1.000000e+06, %18
  %20 = fdiv double %17, %19
  ret double %20
}

; Function Attrs: nounwind willreturn
define internal double @_wyvern_slice_main_div95_720136546() #5 {
sliceclone_if.then:
  %0 = load float, ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 3), align 4
  %1 = fpext float %0 to double
  %2 = fdiv double 2.000000e+00, %1
  ret double %2
}

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_main_div97_843632470() #5 {
sliceclone_entry:
  %0 = load float, ptr @atime, align 16
  %1 = load float, ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 1), align 4
  %2 = fadd float %0, %1
  %3 = fdiv float %2, 0x3FACAC0840000000
  ret float %3
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_main_add100_87663418() #5 {
sliceclone_do.cond:
  %0 = add nsw i32 %0, 1
  ret i32 %0
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_main_inc106_475240382() #5 {
sliceclone_for.inc105:
  %0 = load i32, ptr @main.i, align 4
  %1 = add nsw i32 %0, 1
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_main_sub109_564756160() #5 {
sliceclone_do.body:
  %0 = call float @second()
  %1 = call float @second()
  %2 = fsub float %1, %0
  ret float %2
}

; Function Attrs: nounwind willreturn
define internal double @_wyvern_slice_main_div120_187195479() #5 {
sliceclone_if.end:
  %0 = call float @second()
  %1 = add nsw i32 -3, 1
  %2 = call float @second()
  %3 = fsub float %2, %0
  %4 = icmp slt i32 %1, 0
  %5 = mul nsw i32 100, 2
  %6 = select i1 %4, i32 %5, i32 100
  %7 = fpext float %3 to double
  %8 = sitofp i32 %6 to double
  %9 = fdiv double %7, %8
  ret double %9
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_main_inc132_368844482() #5 {
sliceclone_for.inc131:
  %0 = load i32, ptr @main.i, align 4
  %1 = add nsw i32 %0, 1
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_main_sub135_181101865() #5 {
sliceclone_do.body124:
  %0 = call float @second()
  %1 = call float @second()
  %2 = fsub float %1, %0
  ret float %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_main_mul140_856636967() #5 {
sliceclone_if.then139:
  %0 = load i32, ptr @main.ntimes, align 4
  %1 = mul nsw i32 %0, 2
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_main_mul155_963719496() #5 {
sliceclone_if.end:
  %0 = call float @second()
  %1 = add nsw i32 -3, 1
  %2 = call float @second()
  %3 = fsub float %2, %0
  %4 = icmp slt i32 %1, 0
  %5 = mul nsw i32 100, 2
  %6 = select i1 %4, i32 %5, i32 100
  %7 = fpext float %3 to double
  %8 = sitofp i32 %6 to double
  %9 = fdiv double %7, %8
  %10 = fptrunc double %9 to float
  %11 = load i32, ptr @main.ntimes, align 4
  %12 = sitofp i32 %11 to float
  %13 = fmul float %12, %10
  ret float %13
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_main_inc166_38138018() #5 {
sliceclone_for.inc165:
  %0 = load i32, ptr @main.i, align 4
  %1 = add nsw i32 %0, 1
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_main_sub169_939910741() #5 {
sliceclone_for.body159:
  %0 = call float @second()
  %1 = call float @second()
  %2 = fsub float %1, %0
  ret float %2
}

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_main_sub170_68603189(float %sub109.lcssa, i32 %loop.1.lcssa) #5 {
sliceclone_do.end:
  %0 = fpext float %sub109.lcssa to double
  %1 = sitofp i32 %loop.1.lcssa to double
  %2 = fdiv double %0, %1
  %3 = fptrunc double %2 to float
  %4 = load i32, ptr @main.ntimes, align 4
  %5 = sitofp i32 %4 to float
  %6 = fmul float %5, %3
  %7 = call float @second()
  %8 = call float @second()
  %9 = fsub float %8, %7
  %10 = fsub float %9, %6
  ret float %10
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_main_inc181_894747152() #5 {
sliceclone_for.inc180:
  %0 = load i32, ptr @main.i, align 4
  %1 = add nsw i32 %0, 1
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_main_sub184_400690708() #5 {
sliceclone_for.end167:
  %0 = call float @second()
  %1 = call float @second()
  %2 = fsub float %1, %0
  ret float %2
}

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_main_div186_459450643() #5 {
sliceclone_for.end167:
  %0 = call float @second()
  %1 = call float @second()
  %2 = fsub float %1, %0
  %3 = load i32, ptr @main.ntimes, align 4
  %4 = sitofp i32 %3 to float
  %5 = fdiv float %2, %4
  ret float %5
}

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_main_add193_611298782() #5 {
sliceclone_for.end182:
  %0 = load i32, ptr @main.j, align 4
  %1 = sext i32 %0 to i64
  %2 = getelementptr inbounds [15 x float], ptr @atime, i64 0, i64 %1
  %3 = load float, ptr %2, align 4
  %4 = load i32, ptr @main.j, align 4
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds [15 x float], ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 1), i64 0, i64 %5
  %7 = load float, ptr %6, align 4
  %8 = fadd float %3, %7
  ret float %8
}

; Function Attrs: nounwind willreturn
define internal double @_wyvern_slice_main_mul198_678994001() #5 {
sliceclone_for.end182:
  %0 = load i32, ptr @main.j, align 4
  %1 = sext i32 %0 to i64
  %2 = getelementptr inbounds [15 x float], ptr @atime, i64 0, i64 %1
  %3 = load float, ptr %2, align 4
  %4 = load i32, ptr @main.j, align 4
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds [15 x float], ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 1), i64 0, i64 %5
  %7 = load float, ptr %6, align 4
  %8 = fadd float %3, %7
  %9 = fpext float %8 to double
  %10 = fmul double 1.000000e+06, %9
  ret double %10
}

; Function Attrs: nounwind willreturn
define internal double @_wyvern_slice_main_div199_455960808() #5 {
sliceclone_entry:
  %0 = load i32, ptr @main.n, align 4
  %1 = load i32, ptr @main.n, align 4
  %2 = mul nsw i32 %0, %1
  %3 = load i32, ptr @main.n, align 4
  %4 = mul nsw i32 %2, %3
  %5 = sitofp i32 %4 to double
  %6 = fmul double 2.000000e+00, %5
  %7 = fdiv double %6, 3.000000e+00
  %8 = load i32, ptr @main.n, align 4
  %9 = load i32, ptr @main.n, align 4
  %10 = mul nsw i32 %8, %9
  %11 = sitofp i32 %10 to double
  %12 = call double @llvm.fmuladd.f64(double 2.000000e+00, double %11, double %7)
  %13 = fptrunc double %12 to float
  %14 = load i32, ptr @main.j, align 4
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds [15 x float], ptr @atime, i64 0, i64 %15
  %17 = load float, ptr %16, align 4
  %18 = load i32, ptr @main.j, align 4
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds [15 x float], ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 1), i64 0, i64 %19
  %21 = load float, ptr %20, align 4
  %22 = fadd float %17, %21
  %23 = fpext float %13 to double
  %24 = fpext float %22 to double
  %25 = fmul double 1.000000e+06, %24
  %26 = fdiv double %23, %25
  ret double %26
}

; Function Attrs: nounwind willreturn
define internal double @_wyvern_slice_main_div206_681765010() #5 {
sliceclone_for.end182:
  %0 = load i32, ptr @main.j, align 4
  %1 = sext i32 %0 to i64
  %2 = getelementptr inbounds [15 x float], ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 3), i64 0, i64 %1
  %3 = load float, ptr %2, align 4
  %4 = fpext float %3 to double
  %5 = fdiv double 2.000000e+00, %4
  ret double %5
}

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_main_div210_116622323() #5 {
sliceclone_for.end182:
  %0 = load i32, ptr @main.j, align 4
  %1 = sext i32 %0 to i64
  %2 = getelementptr inbounds [15 x float], ptr @atime, i64 0, i64 %1
  %3 = load float, ptr %2, align 4
  %4 = load i32, ptr @main.j, align 4
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds [15 x float], ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 1), i64 0, i64 %5
  %7 = load float, ptr %6, align 4
  %8 = fadd float %3, %7
  %9 = fdiv float %8, 0x3FACAC0840000000
  ret float %9
}

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_main_add215_688878443() #5 {
sliceclone_for.end182:
  %0 = load float, ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 3, i64 6), align 4
  %1 = load i32, ptr @main.j, align 4
  %2 = sext i32 %1 to i64
  %3 = getelementptr inbounds [15 x float], ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 3), i64 0, i64 %2
  %4 = load float, ptr %3, align 4
  %5 = fadd float %0, %4
  ret float %5
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_main_inc217_747929526() #5 {
sliceclone_for.inc216:
  %0 = load i32, ptr @main.j, align 4
  %1 = add nsw i32 %0, 1
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal double @_wyvern_slice_main_div220_579938798() #5 {
sliceclone_for.end218:
  %0 = load float, ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 3, i64 6), align 4
  %1 = fpext float %0 to double
  %2 = fdiv double %1, 5.000000e+00
  ret double %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_main_inc230_703557289() #5 {
sliceclone_for.inc229:
  %0 = load i32, ptr @main.i, align 4
  %1 = add nsw i32 %0, 1
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_main_sub233_530999804() #5 {
sliceclone_for.end218:
  %0 = call float @second()
  %1 = call float @second()
  %2 = fsub float %1, %0
  ret float %2
}

; Function Attrs: nounwind willreturn
define internal double @_wyvern_slice_main_div236_727910455() #5 {
sliceclone_if.end:
  %0 = add nsw i32 -3, 1
  %1 = icmp slt i32 %0, 0
  %2 = mul nsw i32 100, 2
  %3 = select i1 %1, i32 %2, i32 100
  %4 = call float @second()
  %5 = call float @second()
  %6 = fsub float %5, %4
  %7 = fpext float %6 to double
  %8 = sitofp i32 %3 to double
  %9 = fdiv double %7, %8
  ret double %9
}

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_main_mul243_953256468() #5 {
sliceclone_if.end:
  %0 = add nsw i32 -3, 1
  %1 = icmp slt i32 %0, 0
  %2 = mul nsw i32 100, 2
  %3 = select i1 %1, i32 %2, i32 100
  %4 = call float @second()
  %5 = call float @second()
  %6 = fsub float %5, %4
  %7 = fpext float %6 to double
  %8 = sitofp i32 %3 to double
  %9 = fdiv double %7, %8
  %10 = fptrunc double %9 to float
  %11 = load i32, ptr @main.ntimes, align 4
  %12 = sitofp i32 %11 to float
  %13 = fmul float %12, %10
  ret float %13
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_main_inc254_837923623() #5 {
sliceclone_for.inc253:
  %0 = load i32, ptr @main.i, align 4
  %1 = add nsw i32 %0, 1
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_main_sub257_516487268() #5 {
sliceclone_for.body247:
  %0 = call float @second()
  %1 = call float @second()
  %2 = fsub float %1, %0
  ret float %2
}

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_main_sub258_158656160(i32 %loop.1.lcssa) #5 {
sliceclone_for.end218:
  %0 = call float @second()
  %1 = call float @second()
  %2 = fsub float %1, %0
  %3 = fpext float %2 to double
  %4 = sitofp i32 %loop.1.lcssa to double
  %5 = fdiv double %3, %4
  %6 = fptrunc double %5 to float
  %7 = load i32, ptr @main.ntimes, align 4
  %8 = sitofp i32 %7 to float
  %9 = fmul float %8, %6
  %10 = call float @second()
  %11 = call float @second()
  %12 = fsub float %11, %10
  %13 = fsub float %12, %9
  ret float %13
}

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_main_div260_339933047(i32 %loop.1.lcssa) #5 {
sliceclone_for.end218:
  %0 = call float @second()
  %1 = call float @second()
  %2 = fsub float %1, %0
  %3 = fpext float %2 to double
  %4 = sitofp i32 %loop.1.lcssa to double
  %5 = fdiv double %3, %4
  %6 = fptrunc double %5 to float
  %7 = load i32, ptr @main.ntimes, align 4
  %8 = sitofp i32 %7 to float
  %9 = fmul float %8, %6
  %10 = call float @second()
  %11 = call float @second()
  %12 = fsub float %11, %10
  %13 = fsub float %12, %9
  %14 = load i32, ptr @main.ntimes, align 4
  %15 = sitofp i32 %14 to float
  %16 = fdiv float %13, %15
  ret float %16
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_main_inc269_430562307() #5 {
sliceclone_for.inc268:
  %0 = load i32, ptr @main.i, align 4
  %1 = add nsw i32 %0, 1
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_main_sub272_361312646() #5 {
sliceclone_for.end255:
  %0 = call float @second()
  %1 = call float @second()
  %2 = fsub float %1, %0
  ret float %2
}

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_main_div274_910938677() #5 {
sliceclone_for.end255:
  %0 = call float @second()
  %1 = call float @second()
  %2 = fsub float %1, %0
  %3 = load i32, ptr @main.ntimes, align 4
  %4 = sitofp i32 %3 to float
  %5 = fdiv float %2, %4
  ret float %5
}

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_main_add281_983116037() #5 {
sliceclone_for.end270:
  %0 = load i32, ptr @main.j, align 4
  %1 = sext i32 %0 to i64
  %2 = getelementptr inbounds [15 x float], ptr @atime, i64 0, i64 %1
  %3 = load float, ptr %2, align 4
  %4 = load i32, ptr @main.j, align 4
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds [15 x float], ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 1), i64 0, i64 %5
  %7 = load float, ptr %6, align 4
  %8 = fadd float %3, %7
  ret float %8
}

; Function Attrs: nounwind willreturn
define internal double @_wyvern_slice_main_mul286_931926408() #5 {
sliceclone_for.end270:
  %0 = load i32, ptr @main.j, align 4
  %1 = sext i32 %0 to i64
  %2 = getelementptr inbounds [15 x float], ptr @atime, i64 0, i64 %1
  %3 = load float, ptr %2, align 4
  %4 = load i32, ptr @main.j, align 4
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds [15 x float], ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 1), i64 0, i64 %5
  %7 = load float, ptr %6, align 4
  %8 = fadd float %3, %7
  %9 = fpext float %8 to double
  %10 = fmul double 1.000000e+06, %9
  ret double %10
}

; Function Attrs: nounwind willreturn
define internal double @_wyvern_slice_main_div287_98444235() #5 {
sliceclone_entry:
  %0 = load i32, ptr @main.n, align 4
  %1 = load i32, ptr @main.n, align 4
  %2 = mul nsw i32 %0, %1
  %3 = load i32, ptr @main.n, align 4
  %4 = mul nsw i32 %2, %3
  %5 = sitofp i32 %4 to double
  %6 = fmul double 2.000000e+00, %5
  %7 = fdiv double %6, 3.000000e+00
  %8 = load i32, ptr @main.n, align 4
  %9 = load i32, ptr @main.n, align 4
  %10 = mul nsw i32 %8, %9
  %11 = sitofp i32 %10 to double
  %12 = call double @llvm.fmuladd.f64(double 2.000000e+00, double %11, double %7)
  %13 = fptrunc double %12 to float
  %14 = load i32, ptr @main.j, align 4
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds [15 x float], ptr @atime, i64 0, i64 %15
  %17 = load float, ptr %16, align 4
  %18 = load i32, ptr @main.j, align 4
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds [15 x float], ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 1), i64 0, i64 %19
  %21 = load float, ptr %20, align 4
  %22 = fadd float %17, %21
  %23 = fpext float %13 to double
  %24 = fpext float %22 to double
  %25 = fmul double 1.000000e+06, %24
  %26 = fdiv double %23, %25
  ret double %26
}

; Function Attrs: nounwind willreturn
define internal double @_wyvern_slice_main_div294_915286852() #5 {
sliceclone_for.end270:
  %0 = load i32, ptr @main.j, align 4
  %1 = sext i32 %0 to i64
  %2 = getelementptr inbounds [15 x float], ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 3), i64 0, i64 %1
  %3 = load float, ptr %2, align 4
  %4 = fpext float %3 to double
  %5 = fdiv double 2.000000e+00, %4
  ret double %5
}

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_main_div298_789996571() #5 {
sliceclone_for.end270:
  %0 = load i32, ptr @main.j, align 4
  %1 = sext i32 %0 to i64
  %2 = getelementptr inbounds [15 x float], ptr @atime, i64 0, i64 %1
  %3 = load float, ptr %2, align 4
  %4 = load i32, ptr @main.j, align 4
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds [15 x float], ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 1), i64 0, i64 %5
  %7 = load float, ptr %6, align 4
  %8 = fadd float %3, %7
  %9 = fdiv float %8, 0x3FACAC0840000000
  ret float %9
}

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_main_add303_123099858() #5 {
sliceclone_for.end270:
  %0 = load float, ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 3, i64 12), align 4
  %1 = load i32, ptr @main.j, align 4
  %2 = sext i32 %1 to i64
  %3 = getelementptr inbounds [15 x float], ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 3), i64 0, i64 %2
  %4 = load float, ptr %3, align 4
  %5 = fadd float %0, %4
  ret float %5
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_main_inc305_176404041() #5 {
sliceclone_for.inc304:
  %0 = load i32, ptr @main.j, align 4
  %1 = add nsw i32 %0, 1
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal double @_wyvern_slice_main_div308_957628793() #5 {
sliceclone_for.end306:
  %0 = load float, ptr getelementptr inbounds ([9 x [15 x float]], ptr @atime, i64 0, i64 3, i64 12), align 4
  %1 = fpext float %0 to double
  %2 = fdiv double %1, 5.000000e+00
  ret double %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_matgen_rem_676876598(i32 %init.1) #5 {
sliceclone_for.body3:
  %0 = mul nsw i32 3125, %init.1
  %1 = srem i32 %0, 65536
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal double @_wyvern_slice_matgen_sub_607114077(i32 %init.1) #5 {
sliceclone_for.body3:
  %0 = mul nsw i32 3125, %init.1
  %1 = srem i32 %0, 65536
  %2 = sitofp i32 %1 to double
  %3 = fsub double %2, 3.276800e+04
  ret double %3
}

; Function Attrs: nounwind willreturn
define internal double @_wyvern_slice_matgen_div_141687584(i32 %init.1) #5 {
sliceclone_for.body3:
  %0 = mul nsw i32 3125, %init.1
  %1 = srem i32 %0, 65536
  %2 = sitofp i32 %1 to double
  %3 = fsub double %2, 3.276800e+04
  %4 = fdiv double %3, 1.638400e+04
  ret double %4
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_matgen_add_953808474(i32 %lda, i32 %j.0, i32 %i.0) #5 {
sliceclone_for.body3:
  %0 = mul nsw i32 %lda, %j.0
  %1 = add nsw i32 %0, %i.0
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_matgen_add7_157167714(i32 %lda, i32 %j.0, i32 %i.0) #5 {
sliceclone_for.body3:
  %0 = mul nsw i32 %lda, %j.0
  %1 = add nsw i32 %0, %i.0
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_matgen_add13_487537076(i32 %lda, i32 %j.0, i32 %i.0) #5 {
sliceclone_cond.true:
  %0 = mul nsw i32 %lda, %j.0
  %1 = add nsw i32 %0, %i.0
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_matgen_add39_621693369(i32 %lda, i32 %i.2, i32 %j.1) #5 {
sliceclone_for.body35:
  %0 = mul nsw i32 %lda, %j.1
  %1 = add nsw i32 %0, %i.2
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_matgen_add42_749532836(ptr %a, i32 %lda, ptr %b, i32 %i.2, i32 %j.1) #5 {
sliceclone_for.body35:
  %0 = sext i32 %i.2 to i64
  %1 = getelementptr inbounds float, ptr %b, i64 %0
  %2 = load float, ptr %1, align 4
  %3 = mul nsw i32 %lda, %j.1
  %4 = add nsw i32 %3, %i.2
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds float, ptr %a, i64 %5
  %7 = load float, ptr %6, align 4
  %8 = fadd float %2, %7
  ret float %8
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dgefa_add3_386390882(i32 %lda, i32 %k.0) #5 {
sliceclone_for.body:
  %0 = mul nsw i32 %lda, %k.0
  %1 = add nsw i32 %0, %k.0
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dgefa_add4_146454525(ptr %a, i32 %lda, i32 %n, i32 %k.0) #5 {
sliceclone_for.body:
  %0 = sub nsw i32 %n, %k.0
  %1 = mul nsw i32 %lda, %k.0
  %2 = add nsw i32 %1, %k.0
  %3 = sext i32 %2 to i64
  %4 = getelementptr inbounds float, ptr %a, i64 %3
  %5 = call i32 @idamax(i32 noundef %0, ptr noundef %4, i32 noundef 1)
  %6 = add nsw i32 %5, %k.0
  ret i32 %6
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dgefa_add8_952057497(ptr %a, i32 %lda, i32 %n, i32 %k.0) #5 {
sliceclone_for.body:
  %0 = sub nsw i32 %n, %k.0
  %1 = mul nsw i32 %lda, %k.0
  %2 = add nsw i32 %1, %k.0
  %3 = sext i32 %2 to i64
  %4 = getelementptr inbounds float, ptr %a, i64 %3
  %5 = call i32 @idamax(i32 noundef %0, ptr noundef %4, i32 noundef 1)
  %6 = add nsw i32 %5, %k.0
  %7 = mul nsw i32 %lda, %k.0
  %8 = add nsw i32 %7, %6
  ret i32 %8
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dgefa_add18_588778258(ptr %a, i32 %lda, i32 %n, i32 %k.0) #5 {
sliceclone_for.body:
  %0 = sub nsw i32 %n, %k.0
  %1 = mul nsw i32 %lda, %k.0
  %2 = add nsw i32 %1, %k.0
  %3 = sext i32 %2 to i64
  %4 = getelementptr inbounds float, ptr %a, i64 %3
  %5 = call i32 @idamax(i32 noundef %0, ptr noundef %4, i32 noundef 1)
  %6 = add nsw i32 %5, %k.0
  %7 = mul nsw i32 %lda, %k.0
  %8 = add nsw i32 %7, %6
  ret i32 %8
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dgefa_add22_476085177(i32 %lda, i32 %k.0) #5 {
sliceclone_if.then16:
  %0 = mul nsw i32 %lda, %k.0
  %1 = add nsw i32 %0, %k.0
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dgefa_add26_300950970(ptr %a, i32 %lda, i32 %n, i32 %k.0) #5 {
sliceclone_for.body:
  %0 = sub nsw i32 %n, %k.0
  %1 = mul nsw i32 %lda, %k.0
  %2 = add nsw i32 %1, %k.0
  %3 = sext i32 %2 to i64
  %4 = getelementptr inbounds float, ptr %a, i64 %3
  %5 = call i32 @idamax(i32 noundef %0, ptr noundef %4, i32 noundef 1)
  %6 = add nsw i32 %5, %k.0
  %7 = mul nsw i32 %lda, %k.0
  %8 = add nsw i32 %7, %6
  ret i32 %8
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dgefa_add78_644844423(i32 %lda, i32 %k.0, i32 %j.0) #5 {
sliceclone_if.end69:
  %0 = mul nsw i32 %lda, %j.0
  %1 = add nsw i32 %0, %k.0
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dgefa_add79_727821797(i32 %lda, i32 %j.0, i32 %k.0) #5 {
sliceclone_if.end69:
  %0 = mul nsw i32 %lda, %j.0
  %1 = add nsw i32 %0, %k.0
  %2 = add nsw i32 %1, 1
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dgefa_add30_684802309(i32 %lda, i32 %k.0) #5 {
sliceclone_if.then16:
  %0 = mul nsw i32 %lda, %k.0
  %1 = add nsw i32 %0, %k.0
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dgefa_add34_427964677(i32 %lda, i32 %k.0) #5 {
sliceclone_if.end:
  %0 = mul nsw i32 %lda, %k.0
  %1 = add nsw i32 %0, %k.0
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal double @_wyvern_slice_dgefa_div_499376790(ptr %a, i32 %lda, i32 %k.0) #5 {
sliceclone_if.end:
  %0 = mul nsw i32 %lda, %k.0
  %1 = add nsw i32 %0, %k.0
  %2 = sext i32 %1 to i64
  %3 = getelementptr inbounds float, ptr %a, i64 %2
  %4 = load float, ptr %3, align 4
  %5 = fpext float %4 to double
  %6 = fdiv double -1.000000e+00, %5
  ret double %6
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dgefa_sub40_822253393(i32 %n, i32 %k.0) #5 {
sliceclone_if.end:
  %0 = add nsw i32 %k.0, 1
  %1 = sub nsw i32 %n, %0
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dgefa_add42_386700733(i32 %lda, i32 %k.0) #5 {
sliceclone_if.end:
  %0 = mul nsw i32 %lda, %k.0
  %1 = add nsw i32 %0, %k.0
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dgefa_add43_912299541(i32 %lda, i32 %k.0) #5 {
sliceclone_if.end:
  %0 = mul nsw i32 %lda, %k.0
  %1 = add nsw i32 %0, %k.0
  %2 = add nsw i32 %1, 1
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dgefa_add51_891415967(ptr %a, i32 %lda, i32 %n, i32 %k.0, i32 %j.0) #5 {
sliceclone_for.body:
  %0 = sub nsw i32 %n, %k.0
  %1 = mul nsw i32 %lda, %k.0
  %2 = add nsw i32 %1, %k.0
  %3 = sext i32 %2 to i64
  %4 = getelementptr inbounds float, ptr %a, i64 %3
  %5 = call i32 @idamax(i32 noundef %0, ptr noundef %4, i32 noundef 1)
  %6 = add nsw i32 %5, %k.0
  %7 = mul nsw i32 %lda, %j.0
  %8 = add nsw i32 %7, %6
  ret i32 %8
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dgefa_add58_347905256(i32 %lda, i32 %k.0, i32 %j.0) #5 {
sliceclone_if.then56:
  %0 = mul nsw i32 %lda, %j.0
  %1 = add nsw i32 %0, %k.0
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dgefa_add62_972361408(ptr %a, i32 %lda, i32 %n, i32 %k.0, i32 %j.0) #5 {
sliceclone_for.body:
  %0 = sub nsw i32 %n, %k.0
  %1 = mul nsw i32 %lda, %k.0
  %2 = add nsw i32 %1, %k.0
  %3 = sext i32 %2 to i64
  %4 = getelementptr inbounds float, ptr %a, i64 %3
  %5 = call i32 @idamax(i32 noundef %0, ptr noundef %4, i32 noundef 1)
  %6 = add nsw i32 %5, %k.0
  %7 = mul nsw i32 %lda, %j.0
  %8 = add nsw i32 %7, %6
  ret i32 %8
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dgefa_add66_385924889(i32 %lda, i32 %k.0, i32 %j.0) #5 {
sliceclone_if.then56:
  %0 = mul nsw i32 %lda, %j.0
  %1 = add nsw i32 %0, %k.0
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dgefa_sub71_500951990(i32 %n, i32 %k.0) #5 {
sliceclone_if.end69:
  %0 = add nsw i32 %k.0, 1
  %1 = sub nsw i32 %n, %0
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dgefa_add73_706187030(i32 %lda, i32 %k.0) #5 {
sliceclone_if.end69:
  %0 = mul nsw i32 %lda, %k.0
  %1 = add nsw i32 %0, %k.0
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dgefa_add74_354139871(i32 %lda, i32 %k.0) #5 {
sliceclone_if.end69:
  %0 = mul nsw i32 %lda, %k.0
  %1 = add nsw i32 %0, %k.0
  %2 = add nsw i32 %1, 1
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dgefa_mul92_177505405(i32 %lda, i32 %n) #5 {
sliceclone_if.end86:
  %0 = sub nsw i32 %n, 1
  %1 = mul nsw i32 %lda, %0
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dgefa_add94_375406982(i32 %lda, i32 %n) #5 {
sliceclone_if.end86:
  %0 = sub nsw i32 %n, 1
  %1 = mul nsw i32 %lda, %0
  %2 = sub nsw i32 %n, 1
  %3 = add nsw i32 %1, %2
  ret i32 %3
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dgesl_sub14_582048061(i32 %n, i32 %k.0) #5 {
sliceclone_if.end:
  %0 = add nsw i32 %k.0, 1
  %1 = sub nsw i32 %n, %0
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dgesl_add15_850974775(i32 %lda, i32 %k.0) #5 {
sliceclone_if.end:
  %0 = mul nsw i32 %lda, %k.0
  %1 = add nsw i32 %0, %k.0
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dgesl_add16_970515763(i32 %lda, i32 %k.0) #5 {
sliceclone_if.end:
  %0 = mul nsw i32 %lda, %k.0
  %1 = add nsw i32 %0, %k.0
  %2 = add nsw i32 %1, 1
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dgesl_sub27_147291810(i32 %n, i32 %kb.0) #5 {
sliceclone_for.body25:
  %0 = add nsw i32 %kb.0, 1
  %1 = sub nsw i32 %n, %0
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dgesl_mul30_862369790(i32 %lda, i32 %n, i32 %kb.0) #5 {
sliceclone_for.body25:
  %0 = add nsw i32 %kb.0, 1
  %1 = sub nsw i32 %n, %0
  %2 = mul nsw i32 %lda, %1
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dgesl_add31_438618812(i32 %lda, i32 %n, i32 %kb.0) #5 {
sliceclone_for.body25:
  %0 = add nsw i32 %kb.0, 1
  %1 = sub nsw i32 %n, %0
  %2 = mul nsw i32 %lda, %1
  %3 = add nsw i32 %2, %1
  ret i32 %3
}

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_dgesl_div_838594577(ptr %a, i32 %lda, i32 %n, ptr %b, i32 %kb.0) #5 {
sliceclone_for.body25:
  %0 = add nsw i32 %kb.0, 1
  %1 = sub nsw i32 %n, %0
  %2 = sext i32 %1 to i64
  %3 = getelementptr inbounds float, ptr %b, i64 %2
  %4 = load float, ptr %3, align 4
  %5 = mul nsw i32 %lda, %1
  %6 = add nsw i32 %5, %1
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds float, ptr %a, i64 %7
  %9 = load float, ptr %8, align 4
  %10 = fdiv float %4, %9
  ret float %10
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dgesl_mul38_703590186(i32 %lda, i32 %n, i32 %kb.0) #5 {
sliceclone_for.body25:
  %0 = add nsw i32 %kb.0, 1
  %1 = sub nsw i32 %n, %0
  %2 = mul nsw i32 %lda, %1
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dgesl_add39_104735537(i32 %lda, i32 %n, i32 %kb.0) #5 {
sliceclone_for.body25:
  %0 = add nsw i32 %kb.0, 1
  %1 = sub nsw i32 %n, %0
  %2 = mul nsw i32 %lda, %1
  %3 = add nsw i32 %2, 0
  ret i32 %3
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dgesl_add50_131654661(i32 %lda, i32 %k.1) #5 {
sliceclone_for.body48:
  %0 = mul nsw i32 %lda, %k.1
  %1 = add nsw i32 %0, 0
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_dgesl_sub56_332495788(ptr %a, i32 %lda, ptr %b, i32 %k.1) #5 {
sliceclone_for.body48:
  %0 = mul nsw i32 %lda, %k.1
  %1 = add nsw i32 %0, 0
  %2 = sext i32 %1 to i64
  %3 = getelementptr inbounds float, ptr %a, i64 %2
  %4 = getelementptr inbounds float, ptr %b, i64 0
  %5 = call float @ddot(i32 noundef %k.1, ptr noundef %3, i32 noundef 1, ptr noundef %4, i32 noundef 1)
  %6 = sext i32 %k.1 to i64
  %7 = getelementptr inbounds float, ptr %b, i64 %6
  %8 = load float, ptr %7, align 4
  %9 = fsub float %8, %5
  ret float %9
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dgesl_add58_246920969(i32 %lda, i32 %k.1) #5 {
sliceclone_for.body48:
  %0 = mul nsw i32 %lda, %k.1
  %1 = add nsw i32 %0, %k.1
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_dgesl_div61_158471803(ptr %a, i32 %lda, ptr %b, i32 %k.1) #5 {
sliceclone_for.body48:
  %0 = mul nsw i32 %lda, %k.1
  %1 = add nsw i32 %0, 0
  %2 = sext i32 %1 to i64
  %3 = getelementptr inbounds float, ptr %a, i64 %2
  %4 = getelementptr inbounds float, ptr %b, i64 0
  %5 = call float @ddot(i32 noundef %k.1, ptr noundef %3, i32 noundef 1, ptr noundef %4, i32 noundef 1)
  %6 = sext i32 %k.1 to i64
  %7 = getelementptr inbounds float, ptr %b, i64 %6
  %8 = load float, ptr %7, align 4
  %9 = fsub float %8, %5
  %10 = mul nsw i32 %lda, %k.1
  %11 = add nsw i32 %10, %k.1
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds float, ptr %a, i64 %12
  %14 = load float, ptr %13, align 4
  %15 = fdiv float %9, %14
  ret float %15
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dgesl_sub73_179918054(i32 %n, i32 %kb.1) #5 {
sliceclone_for.body71:
  %0 = add nsw i32 %kb.1, 1
  %1 = sub nsw i32 %n, %0
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dgesl_add76_170848176(i32 %n, i32 %kb.1) #5 {
sliceclone_for.body71:
  %0 = add nsw i32 %kb.1, 1
  %1 = sub nsw i32 %n, %0
  %2 = add nsw i32 %1, 1
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dgesl_sub77_59893004(i32 %n, i32 %kb.1) #5 {
sliceclone_for.body71:
  %0 = add nsw i32 %kb.1, 1
  %1 = sub nsw i32 %n, %0
  %2 = add nsw i32 %1, 1
  %3 = sub nsw i32 %n, %2
  ret i32 %3
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dgesl_mul78_740081816(i32 %lda, i32 %n, i32 %kb.1) #5 {
sliceclone_for.body71:
  %0 = add nsw i32 %kb.1, 1
  %1 = sub nsw i32 %n, %0
  %2 = mul nsw i32 %lda, %1
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dgesl_add79_902667212(i32 %lda, i32 %n, i32 %kb.1) #5 {
sliceclone_for.body71:
  %0 = add nsw i32 %kb.1, 1
  %1 = sub nsw i32 %n, %0
  %2 = mul nsw i32 %lda, %1
  %3 = add nsw i32 %2, %1
  ret i32 %3
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dgesl_add80_917971863(i32 %lda, i32 %n, i32 %kb.1) #5 {
sliceclone_for.body71:
  %0 = add nsw i32 %kb.1, 1
  %1 = sub nsw i32 %n, %0
  %2 = mul nsw i32 %lda, %1
  %3 = add nsw i32 %2, %1
  %4 = add nsw i32 %3, 1
  ret i32 %4
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dgesl_add83_744827942(i32 %n, i32 %kb.1) #5 {
sliceclone_for.body71:
  %0 = add nsw i32 %kb.1, 1
  %1 = sub nsw i32 %n, %0
  %2 = add nsw i32 %1, 1
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_dgesl_add87_777761192(ptr %a, i32 %lda, i32 %n, ptr %b, i32 %kb.1) #5 {
sliceclone_for.body71:
  %0 = add nsw i32 %kb.1, 1
  %1 = sub nsw i32 %n, %0
  %2 = sext i32 %1 to i64
  %3 = getelementptr inbounds float, ptr %b, i64 %2
  %4 = load float, ptr %3, align 4
  %5 = add nsw i32 %1, 1
  %6 = sub nsw i32 %n, %5
  %7 = mul nsw i32 %lda, %1
  %8 = add nsw i32 %7, %1
  %9 = add nsw i32 %8, 1
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds float, ptr %a, i64 %10
  %12 = add nsw i32 %1, 1
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds float, ptr %b, i64 %13
  %15 = call float @ddot(i32 noundef %6, ptr noundef %11, i32 noundef 1, ptr noundef %14, i32 noundef 1)
  %16 = fadd float %4, %15
  ret float %16
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_add30_478369933(i32 %n2, i32 %ldm, i32 %i.1) #5 {
sliceclone_if.end:
  %0 = srem i32 %n2, 4
  %1 = sub nsw i32 %0, 1
  %2 = mul nsw i32 %ldm, %1
  %3 = add nsw i32 %2, %i.1
  ret i32 %3
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_sub43_358206540(i32 %n2) #5 {
sliceclone_if.end39:
  %0 = srem i32 %n2, 8
  %1 = sub nsw i32 %0, 1
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_sub49_541652788(i32 %n2) #5 {
sliceclone_if.end39:
  %0 = srem i32 %n2, 8
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 3
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_sub52_372613453(i32 %n2) #5 {
sliceclone_if.end39:
  %0 = srem i32 %n2, 8
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 3
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_mul53_390311578(i32 %n2, i32 %ldm) #5 {
sliceclone_if.end39:
  %0 = srem i32 %n2, 8
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 3
  %3 = mul nsw i32 %ldm, %2
  ret i32 %3
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_add54_507936757(i32 %n2, i32 %ldm, i32 %i.2) #5 {
sliceclone_if.end39:
  %0 = srem i32 %n2, 8
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 3
  %3 = mul nsw i32 %ldm, %2
  %4 = add nsw i32 %3, %i.2
  ret i32 %4
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_sub58_823375766(i32 %n2) #5 {
sliceclone_if.end39:
  %0 = srem i32 %n2, 8
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 2
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_sub61_308606464(i32 %n2) #5 {
sliceclone_if.end39:
  %0 = srem i32 %n2, 8
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 2
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_mul62_193041403(i32 %n2, i32 %ldm) #5 {
sliceclone_if.end39:
  %0 = srem i32 %n2, 8
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 2
  %3 = mul nsw i32 %ldm, %2
  ret i32 %3
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_add63_580518408(i32 %n2, i32 %ldm, i32 %i.2) #5 {
sliceclone_if.end39:
  %0 = srem i32 %n2, 8
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 2
  %3 = mul nsw i32 %ldm, %2
  %4 = add nsw i32 %3, %i.2
  ret i32 %4
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_sub70_802609421(i32 %n2) #5 {
sliceclone_if.end39:
  %0 = srem i32 %n2, 8
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 1
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_mul71_616759750(i32 %n2, i32 %ldm) #5 {
sliceclone_if.end39:
  %0 = srem i32 %n2, 8
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 1
  %3 = mul nsw i32 %ldm, %2
  ret i32 %3
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_add72_889151331(i32 %n2, i32 %ldm, i32 %i.2) #5 {
sliceclone_if.end39:
  %0 = srem i32 %n2, 8
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 1
  %3 = mul nsw i32 %ldm, %2
  %4 = add nsw i32 %3, %i.2
  ret i32 %4
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_mul189_820532626(i32 %ldm, i32 %j.0) #5 {
sliceclone_for.body182:
  %0 = sub nsw i32 %j.0, 15
  %1 = mul nsw i32 %ldm, %0
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_add190_140795342(i32 %ldm, i32 %i.4, i32 %j.0) #5 {
sliceclone_for.body182:
  %0 = sub nsw i32 %j.0, 15
  %1 = mul nsw i32 %ldm, %0
  %2 = add nsw i32 %1, %i.4
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_sub92_3329530(i32 %n2) #5 {
sliceclone_if.end88:
  %0 = srem i32 %n2, 16
  %1 = sub nsw i32 %0, 1
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_sub_879752752(i32 %n2) #5 {
sliceclone_entry:
  %0 = srem i32 %n2, 2
  %1 = sub nsw i32 %0, 1
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_mul_840533345(i32 %n2, i32 %ldm) #5 {
sliceclone_entry:
  %0 = srem i32 %n2, 2
  %1 = sub nsw i32 %0, 1
  %2 = mul nsw i32 %ldm, %1
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_add_545537352(i32 %n2, i32 %ldm, i32 %i.0) #5 {
sliceclone_entry:
  %0 = srem i32 %n2, 2
  %1 = sub nsw i32 %0, 1
  %2 = mul nsw i32 %ldm, %1
  %3 = add nsw i32 %2, %i.0
  ret i32 %3
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_sub12_744077589(i32 %n2) #5 {
sliceclone_if.end:
  %0 = srem i32 %n2, 4
  %1 = sub nsw i32 %0, 1
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_sub18_726573646(i32 %n2) #5 {
sliceclone_if.end:
  %0 = srem i32 %n2, 4
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 1
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_sub21_799345465(i32 %n2) #5 {
sliceclone_if.end:
  %0 = srem i32 %n2, 4
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 1
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_mul22_272507817(i32 %n2, i32 %ldm) #5 {
sliceclone_if.end:
  %0 = srem i32 %n2, 4
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 1
  %3 = mul nsw i32 %ldm, %2
  ret i32 %3
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_add23_83250034(i32 %n2, i32 %ldm, i32 %i.1) #5 {
sliceclone_if.end:
  %0 = srem i32 %n2, 4
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 1
  %3 = mul nsw i32 %ldm, %2
  %4 = add nsw i32 %3, %i.1
  ret i32 %4
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_mul78_75766944(i32 %n2, i32 %ldm) #5 {
sliceclone_if.end39:
  %0 = srem i32 %n2, 8
  %1 = sub nsw i32 %0, 1
  %2 = mul nsw i32 %ldm, %1
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_add79_788907381(i32 %n2, i32 %ldm, i32 %i.2) #5 {
sliceclone_if.end39:
  %0 = srem i32 %n2, 8
  %1 = sub nsw i32 %0, 1
  %2 = mul nsw i32 %ldm, %1
  %3 = add nsw i32 %2, %i.2
  ret i32 %3
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_sub67_238225996(i32 %n2) #5 {
sliceclone_if.end39:
  %0 = srem i32 %n2, 8
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 1
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_mul29_944943901(i32 %n2, i32 %ldm) #5 {
sliceclone_if.end:
  %0 = srem i32 %n2, 4
  %1 = sub nsw i32 %0, 1
  %2 = mul nsw i32 %ldm, %1
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_sub98_815870782(i32 %n2) #5 {
sliceclone_if.end88:
  %0 = srem i32 %n2, 16
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 7
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_sub101_291652743(i32 %n2) #5 {
sliceclone_if.end88:
  %0 = srem i32 %n2, 16
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 7
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_mul102_344759632(i32 %n2, i32 %ldm) #5 {
sliceclone_if.end88:
  %0 = srem i32 %n2, 16
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 7
  %3 = mul nsw i32 %ldm, %2
  ret i32 %3
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_add103_796979373(i32 %n2, i32 %ldm, i32 %i.3) #5 {
sliceclone_if.end88:
  %0 = srem i32 %n2, 16
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 7
  %3 = mul nsw i32 %ldm, %2
  %4 = add nsw i32 %3, %i.3
  ret i32 %4
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_sub107_628482736(i32 %n2) #5 {
sliceclone_if.end88:
  %0 = srem i32 %n2, 16
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 6
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_sub110_16396768(i32 %n2) #5 {
sliceclone_if.end88:
  %0 = srem i32 %n2, 16
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 6
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_mul111_146391586(i32 %n2, i32 %ldm) #5 {
sliceclone_if.end88:
  %0 = srem i32 %n2, 16
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 6
  %3 = mul nsw i32 %ldm, %2
  ret i32 %3
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_add112_742745332(i32 %n2, i32 %ldm, i32 %i.3) #5 {
sliceclone_if.end88:
  %0 = srem i32 %n2, 16
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 6
  %3 = mul nsw i32 %ldm, %2
  %4 = add nsw i32 %3, %i.3
  ret i32 %4
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_sub116_573276428(i32 %n2) #5 {
sliceclone_if.end88:
  %0 = srem i32 %n2, 16
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 5
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_sub119_941449438(i32 %n2) #5 {
sliceclone_if.end88:
  %0 = srem i32 %n2, 16
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 5
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_mul120_464775094(i32 %n2, i32 %ldm) #5 {
sliceclone_if.end88:
  %0 = srem i32 %n2, 16
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 5
  %3 = mul nsw i32 %ldm, %2
  ret i32 %3
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_add121_748931020(i32 %n2, i32 %ldm, i32 %i.3) #5 {
sliceclone_if.end88:
  %0 = srem i32 %n2, 16
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 5
  %3 = mul nsw i32 %ldm, %2
  %4 = add nsw i32 %3, %i.3
  ret i32 %4
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_sub125_193254380(i32 %n2) #5 {
sliceclone_if.end88:
  %0 = srem i32 %n2, 16
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 4
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_sub128_386432065(i32 %n2) #5 {
sliceclone_if.end88:
  %0 = srem i32 %n2, 16
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 4
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_mul129_977732795(i32 %n2, i32 %ldm) #5 {
sliceclone_if.end88:
  %0 = srem i32 %n2, 16
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 4
  %3 = mul nsw i32 %ldm, %2
  ret i32 %3
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_add130_732461276(i32 %n2, i32 %ldm, i32 %i.3) #5 {
sliceclone_if.end88:
  %0 = srem i32 %n2, 16
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 4
  %3 = mul nsw i32 %ldm, %2
  %4 = add nsw i32 %3, %i.3
  ret i32 %4
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_sub134_320360820(i32 %n2) #5 {
sliceclone_if.end88:
  %0 = srem i32 %n2, 16
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 3
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_sub137_903890759(i32 %n2) #5 {
sliceclone_if.end88:
  %0 = srem i32 %n2, 16
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 3
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_mul138_942486145(i32 %n2, i32 %ldm) #5 {
sliceclone_if.end88:
  %0 = srem i32 %n2, 16
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 3
  %3 = mul nsw i32 %ldm, %2
  ret i32 %3
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_add139_33132056(i32 %n2, i32 %ldm, i32 %i.3) #5 {
sliceclone_if.end88:
  %0 = srem i32 %n2, 16
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 3
  %3 = mul nsw i32 %ldm, %2
  %4 = add nsw i32 %3, %i.3
  ret i32 %4
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_sub143_739020676(i32 %n2) #5 {
sliceclone_if.end88:
  %0 = srem i32 %n2, 16
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 2
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_sub146_57397985(i32 %n2) #5 {
sliceclone_if.end88:
  %0 = srem i32 %n2, 16
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 2
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_mul147_955744658(i32 %n2, i32 %ldm) #5 {
sliceclone_if.end88:
  %0 = srem i32 %n2, 16
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 2
  %3 = mul nsw i32 %ldm, %2
  ret i32 %3
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_add148_798855112(i32 %n2, i32 %ldm, i32 %i.3) #5 {
sliceclone_if.end88:
  %0 = srem i32 %n2, 16
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 2
  %3 = mul nsw i32 %ldm, %2
  %4 = add nsw i32 %3, %i.3
  ret i32 %4
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_sub152_741799869(i32 %n2) #5 {
sliceclone_if.end88:
  %0 = srem i32 %n2, 16
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 1
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_sub155_804915847(i32 %n2) #5 {
sliceclone_if.end88:
  %0 = srem i32 %n2, 16
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 1
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_mul156_901244996(i32 %n2, i32 %ldm) #5 {
sliceclone_if.end88:
  %0 = srem i32 %n2, 16
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 1
  %3 = mul nsw i32 %ldm, %2
  ret i32 %3
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_add157_510722904(i32 %n2, i32 %ldm, i32 %i.3) #5 {
sliceclone_if.end88:
  %0 = srem i32 %n2, 16
  %1 = sub nsw i32 %0, 1
  %2 = sub nsw i32 %1, 1
  %3 = mul nsw i32 %ldm, %2
  %4 = add nsw i32 %3, %i.3
  ret i32 %4
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_mul163_969901572(i32 %n2, i32 %ldm) #5 {
sliceclone_if.end88:
  %0 = srem i32 %n2, 16
  %1 = sub nsw i32 %0, 1
  %2 = mul nsw i32 %ldm, %1
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_add164_848391465(i32 %n2, i32 %ldm, i32 %i.3) #5 {
sliceclone_if.end88:
  %0 = srem i32 %n2, 16
  %1 = sub nsw i32 %0, 1
  %2 = mul nsw i32 %ldm, %1
  %3 = add nsw i32 %2, %i.3
  ret i32 %3
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_add175_580918282(i32 %n2) #5 {
sliceclone_if.end173:
  %0 = srem i32 %n2, 16
  %1 = add nsw i32 %0, 16
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_sub176_51020702(i32 %n2) #5 {
sliceclone_if.end173:
  %0 = srem i32 %n2, 16
  %1 = add nsw i32 %0, 16
  %2 = sub nsw i32 %1, 1
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_mul198_179268158(i32 %ldm, i32 %j.0) #5 {
sliceclone_for.body182:
  %0 = sub nsw i32 %j.0, 14
  %1 = mul nsw i32 %ldm, %0
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_add199_675601854(i32 %ldm, i32 %j.0, i32 %i.4) #5 {
sliceclone_for.body182:
  %0 = sub nsw i32 %j.0, 14
  %1 = mul nsw i32 %ldm, %0
  %2 = add nsw i32 %1, %i.4
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_mul207_842229387(i32 %ldm, i32 %j.0) #5 {
sliceclone_for.body182:
  %0 = sub nsw i32 %j.0, 13
  %1 = mul nsw i32 %ldm, %0
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_add208_475539213(i32 %ldm, i32 %j.0, i32 %i.4) #5 {
sliceclone_for.body182:
  %0 = sub nsw i32 %j.0, 13
  %1 = mul nsw i32 %ldm, %0
  %2 = add nsw i32 %1, %i.4
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_mul216_343920980(i32 %ldm, i32 %j.0) #5 {
sliceclone_for.body182:
  %0 = sub nsw i32 %j.0, 12
  %1 = mul nsw i32 %ldm, %0
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_add217_425288724(i32 %ldm, i32 %i.4, i32 %j.0) #5 {
sliceclone_for.body182:
  %0 = sub nsw i32 %j.0, 12
  %1 = mul nsw i32 %ldm, %0
  %2 = add nsw i32 %1, %i.4
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_mul225_76952825(i32 %ldm, i32 %j.0) #5 {
sliceclone_for.body182:
  %0 = sub nsw i32 %j.0, 11
  %1 = mul nsw i32 %ldm, %0
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_add226_813812623(i32 %ldm, i32 %j.0, i32 %i.4) #5 {
sliceclone_for.body182:
  %0 = sub nsw i32 %j.0, 11
  %1 = mul nsw i32 %ldm, %0
  %2 = add nsw i32 %1, %i.4
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_mul234_798994111(i32 %ldm, i32 %j.0) #5 {
sliceclone_for.body182:
  %0 = sub nsw i32 %j.0, 10
  %1 = mul nsw i32 %ldm, %0
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_add235_536843926(i32 %ldm, i32 %j.0, i32 %i.4) #5 {
sliceclone_for.body182:
  %0 = sub nsw i32 %j.0, 10
  %1 = mul nsw i32 %ldm, %0
  %2 = add nsw i32 %1, %i.4
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_mul243_792524180(i32 %ldm, i32 %j.0) #5 {
sliceclone_for.body182:
  %0 = sub nsw i32 %j.0, 9
  %1 = mul nsw i32 %ldm, %0
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_add244_70040385(i32 %ldm, i32 %i.4, i32 %j.0) #5 {
sliceclone_for.body182:
  %0 = sub nsw i32 %j.0, 9
  %1 = mul nsw i32 %ldm, %0
  %2 = add nsw i32 %1, %i.4
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_mul252_686323520(i32 %ldm, i32 %j.0) #5 {
sliceclone_for.body182:
  %0 = sub nsw i32 %j.0, 8
  %1 = mul nsw i32 %ldm, %0
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_add253_51947678(i32 %ldm, i32 %j.0, i32 %i.4) #5 {
sliceclone_for.body182:
  %0 = sub nsw i32 %j.0, 8
  %1 = mul nsw i32 %ldm, %0
  %2 = add nsw i32 %1, %i.4
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_mul261_701724331(i32 %ldm, i32 %j.0) #5 {
sliceclone_for.body182:
  %0 = sub nsw i32 %j.0, 7
  %1 = mul nsw i32 %ldm, %0
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_add262_1124158(i32 %ldm, i32 %j.0, i32 %i.4) #5 {
sliceclone_for.body182:
  %0 = sub nsw i32 %j.0, 7
  %1 = mul nsw i32 %ldm, %0
  %2 = add nsw i32 %1, %i.4
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_mul270_697825643(i32 %ldm, i32 %j.0) #5 {
sliceclone_for.body182:
  %0 = sub nsw i32 %j.0, 6
  %1 = mul nsw i32 %ldm, %0
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_add271_873451641(i32 %ldm, i32 %j.0, i32 %i.4) #5 {
sliceclone_for.body182:
  %0 = sub nsw i32 %j.0, 6
  %1 = mul nsw i32 %ldm, %0
  %2 = add nsw i32 %1, %i.4
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_mul279_681316345(i32 %ldm, i32 %j.0) #5 {
sliceclone_for.body182:
  %0 = sub nsw i32 %j.0, 5
  %1 = mul nsw i32 %ldm, %0
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_add280_491607708(i32 %ldm, i32 %j.0, i32 %i.4) #5 {
sliceclone_for.body182:
  %0 = sub nsw i32 %j.0, 5
  %1 = mul nsw i32 %ldm, %0
  %2 = add nsw i32 %1, %i.4
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_mul288_757232504(i32 %ldm, i32 %j.0) #5 {
sliceclone_for.body182:
  %0 = sub nsw i32 %j.0, 4
  %1 = mul nsw i32 %ldm, %0
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_add289_360977474(i32 %ldm, i32 %i.4, i32 %j.0) #5 {
sliceclone_for.body182:
  %0 = sub nsw i32 %j.0, 4
  %1 = mul nsw i32 %ldm, %0
  %2 = add nsw i32 %1, %i.4
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_mul297_616306903(i32 %ldm, i32 %j.0) #5 {
sliceclone_for.body182:
  %0 = sub nsw i32 %j.0, 3
  %1 = mul nsw i32 %ldm, %0
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_add298_673247117(i32 %ldm, i32 %i.4, i32 %j.0) #5 {
sliceclone_for.body182:
  %0 = sub nsw i32 %j.0, 3
  %1 = mul nsw i32 %ldm, %0
  %2 = add nsw i32 %1, %i.4
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_mul306_291477368(i32 %ldm, i32 %j.0) #5 {
sliceclone_for.body182:
  %0 = sub nsw i32 %j.0, 2
  %1 = mul nsw i32 %ldm, %0
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_add307_833147128(i32 %ldm, i32 %j.0, i32 %i.4) #5 {
sliceclone_for.body182:
  %0 = sub nsw i32 %j.0, 2
  %1 = mul nsw i32 %ldm, %0
  %2 = add nsw i32 %1, %i.4
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_mul315_510816481(i32 %ldm, i32 %j.0) #5 {
sliceclone_for.body182:
  %0 = sub nsw i32 %j.0, 1
  %1 = mul nsw i32 %ldm, %0
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_add316_16065317(i32 %ldm, i32 %j.0, i32 %i.4) #5 {
sliceclone_for.body182:
  %0 = sub nsw i32 %j.0, 1
  %1 = mul nsw i32 %ldm, %0
  %2 = add nsw i32 %1, %i.4
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_dmxpy_add323_432786739(i32 %ldm, i32 %i.4, i32 %j.0) #5 {
sliceclone_for.body182:
  %0 = mul nsw i32 %ldm, %j.0
  %1 = add nsw i32 %0, %i.4
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal double @_wyvern_slice_epslon_sub_474671349() #5 {
sliceclone_while.body:
  %0 = fpext float 0x3FF5555560000000 to double
  %1 = fsub double %0, 1.000000e+00
  ret double %1
}

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_epslon_add_916032433() #5 {
sliceclone_while.body:
  %0 = fpext float 0x3FF5555560000000 to double
  %1 = fsub double %0, 1.000000e+00
  %2 = fptrunc double %1 to float
  %3 = fadd float %2, %2
  ret float %3
}

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_epslon_add4_757652586() #5 {
sliceclone_while.body:
  %0 = fpext float 0x3FF5555560000000 to double
  %1 = fsub double %0, 1.000000e+00
  %2 = fptrunc double %1 to float
  %3 = fadd float %2, %2
  %4 = fadd float %3, %2
  ret float %4
}

; Function Attrs: nounwind willreturn
define internal double @_wyvern_slice_epslon_sub6_115714779() #5 {
sliceclone_while.body:
  %0 = fpext float 0x3FF5555560000000 to double
  %1 = fsub double %0, 1.000000e+00
  %2 = fptrunc double %1 to float
  %3 = fadd float %2, %2
  %4 = fadd float %3, %2
  %5 = fpext float %4 to double
  %6 = fsub double %5, 1.000000e+00
  ret double %6
}

; Function Attrs: nounwind willreturn
define internal double @_wyvern_slice_epslon_mul_613108716(float %x) #5 {
sliceclone_entry:
  br label %sliceclone_while.cond

sliceclone_while.cond:                            ; preds = %sliceclone_while.body, %sliceclone_entry
  %0 = phi float [ 0.000000e+00, %sliceclone_entry ], [ %11, %sliceclone_while.body ]
  %1 = fpext float %0 to double
  %2 = fcmp oeq double %1, 0.000000e+00
  br i1 %2, label %sliceclone_while.body, label %sliceclone_while.end

sliceclone_while.body:                            ; preds = %sliceclone_while.cond
  %3 = fpext float 0x3FF5555560000000 to double
  %4 = fsub double %3, 1.000000e+00
  %5 = fptrunc double %4 to float
  %6 = fadd float %5, %5
  %7 = fadd float %6, %5
  %8 = fpext float %7 to double
  %9 = fsub double %8, 1.000000e+00
  %10 = call double @llvm.fabs.f64(double %9)
  %11 = fptrunc double %10 to float
  br label %sliceclone_while.cond

sliceclone_while.end:                             ; preds = %sliceclone_while.cond
  %12 = phi float [ %0, %sliceclone_while.cond ]
  %13 = fpext float %12 to double
  %14 = fpext float %x to double
  %15 = call double @llvm.fabs.f64(double %14)
  %16 = fmul double %13, %15
  ret double %16
}

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_dscal_mul4_669263809(float %da, ptr %dx, i32 %i.0) #5 {
sliceclone_for.body:
  %0 = sext i32 %i.0 to i64
  %1 = getelementptr inbounds float, ptr %dx, i64 %0
  %2 = load float, ptr %1, align 4
  %3 = fmul float %da, %2
  ret float %3
}

; Function Attrs: nounwind willreturn
define internal float @_wyvern_slice_dscal_mul13_899663080(float %da, ptr %dx, i32 %i.1) #5 {
sliceclone_for.body10:
  %0 = sext i32 %i.1 to i64
  %1 = getelementptr inbounds float, ptr %dx, i64 %0
  %2 = load float, ptr %1, align 4
  %3 = fmul float %da, %2
  ret float %3
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_daxpy_mul_886033286(i32 %n, i32 %incx) #5 {
sliceclone_if.then12:
  %0 = sub nsw i32 0, %n
  %1 = add nsw i32 %0, 1
  %2 = mul nsw i32 %1, %incx
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_daxpy_add_615765200(i32 %n) #5 {
sliceclone_if.then12:
  %0 = sub nsw i32 0, %n
  %1 = add nsw i32 %0, 1
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_daxpy_add18_38705089(i32 %n) #5 {
sliceclone_if.then16:
  %0 = sub nsw i32 0, %n
  %1 = add nsw i32 %0, 1
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_daxpy_mul19_514446073(i32 %n, i32 %incy) #5 {
sliceclone_if.then16:
  %0 = sub nsw i32 0, %n
  %1 = add nsw i32 %0, 1
  %2 = mul nsw i32 %1, %incy
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_ddot_add_738487739(i32 %n) #5 {
sliceclone_if.then5:
  %0 = sub nsw i32 0, %n
  %1 = add nsw i32 %0, 1
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_ddot_mul_716862352(i32 %n, i32 %incx) #5 {
sliceclone_if.then5:
  %0 = sub nsw i32 0, %n
  %1 = add nsw i32 %0, 1
  %2 = mul nsw i32 %1, %incx
  ret i32 %2
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_ddot_add10_821618860(i32 %n) #5 {
sliceclone_if.then8:
  %0 = sub nsw i32 0, %n
  %1 = add nsw i32 %0, 1
  ret i32 %1
}

; Function Attrs: nounwind willreturn
define internal i32 @_wyvern_slice_ddot_mul11_984953664(i32 %n, i32 %incy) #5 {
sliceclone_if.then8:
  %0 = sub nsw i32 0, %n
  %1 = add nsw i32 %0, 1
  %2 = mul nsw i32 %1, %incy
  ret i32 %2
}

; ModuleID = 'New_tests/linpack-pc.ll'
source_filename = "New_tests/linpack-pc.ll"
Referring to an argument in another function!
  %sub17035 = call float @_wyvern_slice_main_sub170_68603189(float %sub109.lcssa, i32 %loop.1.lcssa)
Referring to an argument in another function!
  %div17220 = call float @_wyvern_slice_main_div172_928543120(i32 %loop.1.lcssa, float %sub109.lcssa)
Referring to an argument in another function!
  %sub25853 = call float @_wyvern_slice_main_sub258_158656160(i32 %loop.1.lcssa)
Referring to an argument in another function!
  %div26054 = call float @_wyvern_slice_main_div260_339933047(i32 %loop.1.lcssa)
Referring to an argument in another function!
  %rem1 = call i32 @_wyvern_slice_matgen_rem_676876598(i32 %init.1)
Referring to an argument in another function!
  %sub2 = call double @_wyvern_slice_matgen_sub_607114077(i32 %init.1)
Referring to an argument in another function!
  %div3 = call double @_wyvern_slice_matgen_div_141687584(i32 %init.1)
Referring to an argument in another function!
  %add4 = call i32 @_wyvern_slice_matgen_add_953808474(i32 %lda, i32 %j.0, i32 %i.0)
Referring to an argument in another function!
  %add75 = call i32 @_wyvern_slice_matgen_add7_157167714(i32 %lda, i32 %j.0, i32 %i.0)
Referring to an argument in another function!
  %add136 = call i32 @_wyvern_slice_matgen_add13_487537076(i32 %lda, i32 %j.0, i32 %i.0)
Referring to an argument in another function!
  %add397 = call i32 @_wyvern_slice_matgen_add39_621693369(i32 %lda, i32 %i.2, i32 %j.1)
Referring to an argument in another function!
  %add428 = call float @_wyvern_slice_matgen_add42_749532836(ptr %a, i32 %lda, ptr %b, i32 %i.2, i32 %j.1)
Referring to an argument in another function!
  %add31 = call i32 @_wyvern_slice_dgefa_add3_386390882(i32 %lda, i32 %k.0)
Referring to an argument in another function!
  %add44 = call i32 @_wyvern_slice_dgefa_add4_146454525(ptr %a, i32 %lda, i32 %n, i32 %k.0)
Referring to an argument in another function!
  %add85 = call i32 @_wyvern_slice_dgefa_add8_952057497(ptr %a, i32 %lda, i32 %n, i32 %k.0)
Referring to an argument in another function!
  %add186 = call i32 @_wyvern_slice_dgefa_add18_588778258(ptr %a, i32 %lda, i32 %n, i32 %k.0)
Referring to an argument in another function!
  %add227 = call i32 @_wyvern_slice_dgefa_add22_476085177(i32 %lda, i32 %k.0)
Referring to an argument in another function!
  %add268 = call i32 @_wyvern_slice_dgefa_add26_300950970(ptr %a, i32 %lda, i32 %n, i32 %k.0)
Referring to an argument in another function!
  %add3011 = call i32 @_wyvern_slice_dgefa_add30_684802309(i32 %lda, i32 %k.0)
Referring to an argument in another function!
  %add3412 = call i32 @_wyvern_slice_dgefa_add34_427964677(i32 %lda, i32 %k.0)
Referring to an argument in another function!
  %div13 = call double @_wyvern_slice_dgefa_div_499376790(ptr %a, i32 %lda, i32 %k.0)
Referring to an argument in another function!
  %sub4014 = call i32 @_wyvern_slice_dgefa_sub40_822253393(i32 %n, i32 %k.0)
Referring to an argument in another function!
  %add4215 = call i32 @_wyvern_slice_dgefa_add42_386700733(i32 %lda, i32 %k.0)
Referring to an argument in another function!
  %add4316 = call i32 @_wyvern_slice_dgefa_add43_912299541(i32 %lda, i32 %k.0)
Referring to an argument in another function!
  %add5117 = call i32 @_wyvern_slice_dgefa_add51_891415967(ptr %a, i32 %lda, i32 %n, i32 %k.0, i32 %j.0)
Referring to an argument in another function!
  %add5818 = call i32 @_wyvern_slice_dgefa_add58_347905256(i32 %lda, i32 %k.0, i32 %j.0)
Referring to an argument in another function!
  %add6219 = call i32 @_wyvern_slice_dgefa_add62_972361408(ptr %a, i32 %lda, i32 %n, i32 %k.0, i32 %j.0)
Referring to an argument in another function!
  %add6620 = call i32 @_wyvern_slice_dgefa_add66_385924889(i32 %lda, i32 %k.0, i32 %j.0)
Referring to an argument in another function!
  %sub7121 = call i32 @_wyvern_slice_dgefa_sub71_500951990(i32 %n, i32 %k.0)
Referring to an argument in another function!
  %add7322 = call i32 @_wyvern_slice_dgefa_add73_706187030(i32 %lda, i32 %k.0)
Referring to an argument in another function!
  %add7423 = call i32 @_wyvern_slice_dgefa_add74_354139871(i32 %lda, i32 %k.0)
Referring to an argument in another function!
  %add789 = call i32 @_wyvern_slice_dgefa_add78_644844423(i32 %lda, i32 %k.0, i32 %j.0)
Referring to an argument in another function!
  %add7910 = call i32 @_wyvern_slice_dgefa_add79_727821797(i32 %lda, i32 %j.0, i32 %k.0)
Referring to an argument in another function!
  %sub141 = call i32 @_wyvern_slice_dgesl_sub14_582048061(i32 %n, i32 %k.0)
Referring to an argument in another function!
  %add152 = call i32 @_wyvern_slice_dgesl_add15_850974775(i32 %lda, i32 %k.0)
Referring to an argument in another function!
  %add163 = call i32 @_wyvern_slice_dgesl_add16_970515763(i32 %lda, i32 %k.0)
Referring to an argument in another function!
  %sub274 = call i32 @_wyvern_slice_dgesl_sub27_147291810(i32 %n, i32 %kb.0)
Referring to an argument in another function!
  %mul305 = call i32 @_wyvern_slice_dgesl_mul30_862369790(i32 %lda, i32 %n, i32 %kb.0)
Referring to an argument in another function!
  %add316 = call i32 @_wyvern_slice_dgesl_add31_438618812(i32 %lda, i32 %n, i32 %kb.0)
Referring to an argument in another function!
  %div7 = call float @_wyvern_slice_dgesl_div_838594577(ptr %a, i32 %lda, i32 %n, ptr %b, i32 %kb.0)
Referring to an argument in another function!
  %mul388 = call i32 @_wyvern_slice_dgesl_mul38_703590186(i32 %lda, i32 %n, i32 %kb.0)
Referring to an argument in another function!
  %add399 = call i32 @_wyvern_slice_dgesl_add39_104735537(i32 %lda, i32 %n, i32 %kb.0)
Referring to an argument in another function!
  %add5010 = call i32 @_wyvern_slice_dgesl_add50_131654661(i32 %lda, i32 %k.1)
Referring to an argument in another function!
  %sub5611 = call float @_wyvern_slice_dgesl_sub56_332495788(ptr %a, i32 %lda, ptr %b, i32 %k.1)
Referring to an argument in another function!
  %add5812 = call i32 @_wyvern_slice_dgesl_add58_246920969(i32 %lda, i32 %k.1)
Referring to an argument in another function!
  %div6113 = call float @_wyvern_slice_dgesl_div61_158471803(ptr %a, i32 %lda, ptr %b, i32 %k.1)
Referring to an argument in another function!
  %sub7314 = call i32 @_wyvern_slice_dgesl_sub73_179918054(i32 %n, i32 %kb.1)
Referring to an argument in another function!
  %add7615 = call i32 @_wyvern_slice_dgesl_add76_170848176(i32 %n, i32 %kb.1)
Referring to an argument in another function!
  %sub7716 = call i32 @_wyvern_slice_dgesl_sub77_59893004(i32 %n, i32 %kb.1)
Referring to an argument in another function!
  %mul7817 = call i32 @_wyvern_slice_dgesl_mul78_740081816(i32 %lda, i32 %n, i32 %kb.1)
Referring to an argument in another function!
  %add7918 = call i32 @_wyvern_slice_dgesl_add79_902667212(i32 %lda, i32 %n, i32 %kb.1)
Referring to an argument in another function!
  %add8019 = call i32 @_wyvern_slice_dgesl_add80_917971863(i32 %lda, i32 %n, i32 %kb.1)
Referring to an argument in another function!
  %add8320 = call i32 @_wyvern_slice_dgesl_add83_744827942(i32 %n, i32 %kb.1)
Referring to an argument in another function!
  %add8721 = call float @_wyvern_slice_dgesl_add87_777761192(ptr %a, i32 %lda, i32 %n, ptr %b, i32 %kb.1)
Referring to an argument in another function!
  %add19 = call i32 @_wyvern_slice_dmxpy_add_545537352(i32 %n2, i32 %ldm, i32 %i.0)
Referring to an argument in another function!
  %add2324 = call i32 @_wyvern_slice_dmxpy_add23_83250034(i32 %n2, i32 %ldm, i32 %i.1)
Referring to an argument in another function!
  %add301 = call i32 @_wyvern_slice_dmxpy_add30_478369933(i32 %n2, i32 %ldm, i32 %i.1)
Referring to an argument in another function!
  %add546 = call i32 @_wyvern_slice_dmxpy_add54_507936757(i32 %n2, i32 %ldm, i32 %i.2)
Referring to an argument in another function!
  %add6310 = call i32 @_wyvern_slice_dmxpy_add63_580518408(i32 %n2, i32 %ldm, i32 %i.2)
Referring to an argument in another function!
  %add7213 = call i32 @_wyvern_slice_dmxpy_add72_889151331(i32 %n2, i32 %ldm, i32 %i.2)
Referring to an argument in another function!
  %add7926 = call i32 @_wyvern_slice_dmxpy_add79_788907381(i32 %n2, i32 %ldm, i32 %i.2)
Referring to an argument in another function!
  %add10332 = call i32 @_wyvern_slice_dmxpy_add103_796979373(i32 %n2, i32 %ldm, i32 %i.3)
Referring to an argument in another function!
  %add11236 = call i32 @_wyvern_slice_dmxpy_add112_742745332(i32 %n2, i32 %ldm, i32 %i.3)
Referring to an argument in another function!
  %add12140 = call i32 @_wyvern_slice_dmxpy_add121_748931020(i32 %n2, i32 %ldm, i32 %i.3)
Referring to an argument in another function!
  %add13044 = call i32 @_wyvern_slice_dmxpy_add130_732461276(i32 %n2, i32 %ldm, i32 %i.3)
Referring to an argument in another function!
  %add13948 = call i32 @_wyvern_slice_dmxpy_add139_33132056(i32 %n2, i32 %ldm, i32 %i.3)
Referring to an argument in another function!
  %add14852 = call i32 @_wyvern_slice_dmxpy_add148_798855112(i32 %n2, i32 %ldm, i32 %i.3)
Referring to an argument in another function!
  %add15756 = call i32 @_wyvern_slice_dmxpy_add157_510722904(i32 %n2, i32 %ldm, i32 %i.3)
Referring to an argument in another function!
  %add16458 = call i32 @_wyvern_slice_dmxpy_add164_848391465(i32 %n2, i32 %ldm, i32 %i.3)
Referring to an argument in another function!
  %mul18914 = call i32 @_wyvern_slice_dmxpy_mul189_820532626(i32 %ldm, i32 %j.0)
Referring to an argument in another function!
  %add19015 = call i32 @_wyvern_slice_dmxpy_add190_140795342(i32 %ldm, i32 %i.4, i32 %j.0)
Referring to an argument in another function!
  %mul19861 = call i32 @_wyvern_slice_dmxpy_mul198_179268158(i32 %ldm, i32 %j.0)
Referring to an argument in another function!
  %add19962 = call i32 @_wyvern_slice_dmxpy_add199_675601854(i32 %ldm, i32 %j.0, i32 %i.4)
Referring to an argument in another function!
  %mul20763 = call i32 @_wyvern_slice_dmxpy_mul207_842229387(i32 %ldm, i32 %j.0)
Referring to an argument in another function!
  %add20864 = call i32 @_wyvern_slice_dmxpy_add208_475539213(i32 %ldm, i32 %j.0, i32 %i.4)
Referring to an argument in another function!
  %mul21665 = call i32 @_wyvern_slice_dmxpy_mul216_343920980(i32 %ldm, i32 %j.0)
Referring to an argument in another function!
  %add21766 = call i32 @_wyvern_slice_dmxpy_add217_425288724(i32 %ldm, i32 %i.4, i32 %j.0)
Referring to an argument in another function!
  %mul22567 = call i32 @_wyvern_slice_dmxpy_mul225_76952825(i32 %ldm, i32 %j.0)
Referring to an argument in another function!
  %add22668 = call i32 @_wyvern_slice_dmxpy_add226_813812623(i32 %ldm, i32 %j.0, i32 %i.4)
Referring to an argument in another function!
  %mul23469 = call i32 @_wyvern_slice_dmxpy_mul234_798994111(i32 %ldm, i32 %j.0)
Referring to an argument in another function!
  %add23570 = call i32 @_wyvern_slice_dmxpy_add235_536843926(i32 %ldm, i32 %j.0, i32 %i.4)
Referring to an argument in another function!
  %mul24371 = call i32 @_wyvern_slice_dmxpy_mul243_792524180(i32 %ldm, i32 %j.0)
Referring to an argument in another function!
  %add24472 = call i32 @_wyvern_slice_dmxpy_add244_70040385(i32 %ldm, i32 %i.4, i32 %j.0)
Referring to an argument in another function!
  %mul25273 = call i32 @_wyvern_slice_dmxpy_mul252_686323520(i32 %ldm, i32 %j.0)
Referring to an argument in another function!
  %add25374 = call i32 @_wyvern_slice_dmxpy_add253_51947678(i32 %ldm, i32 %j.0, i32 %i.4)
Referring to an argument in another function!
  %mul26175 = call i32 @_wyvern_slice_dmxpy_mul261_701724331(i32 %ldm, i32 %j.0)
Referring to an argument in another function!
  %add26276 = call i32 @_wyvern_slice_dmxpy_add262_1124158(i32 %ldm, i32 %j.0, i32 %i.4)
Referring to an argument in another function!
  %mul27077 = call i32 @_wyvern_slice_dmxpy_mul270_697825643(i32 %ldm, i32 %j.0)
Referring to an argument in another function!
  %add27178 = call i32 @_wyvern_slice_dmxpy_add271_873451641(i32 %ldm, i32 %j.0, i32 %i.4)
Referring to an argument in another function!
  %mul27979 = call i32 @_wyvern_slice_dmxpy_mul279_681316345(i32 %ldm, i32 %j.0)
Referring to an argument in another function!
  %add28080 = call i32 @_wyvern_slice_dmxpy_add280_491607708(i32 %ldm, i32 %j.0, i32 %i.4)
Referring to an argument in another function!
  %mul28881 = call i32 @_wyvern_slice_dmxpy_mul288_757232504(i32 %ldm, i32 %j.0)
Referring to an argument in another function!
  %add28982 = call i32 @_wyvern_slice_dmxpy_add289_360977474(i32 %ldm, i32 %i.4, i32 %j.0)
Referring to an argument in another function!
  %mul29783 = call i32 @_wyvern_slice_dmxpy_mul297_616306903(i32 %ldm, i32 %j.0)
Referring to an argument in another function!
  %add29884 = call i32 @_wyvern_slice_dmxpy_add298_673247117(i32 %ldm, i32 %i.4, i32 %j.0)
Referring to an argument in another function!
  %mul30685 = call i32 @_wyvern_slice_dmxpy_mul306_291477368(i32 %ldm, i32 %j.0)
Referring to an argument in another function!
  %add30786 = call i32 @_wyvern_slice_dmxpy_add307_833147128(i32 %ldm, i32 %j.0, i32 %i.4)
Referring to an argument in another function!
  %mul31587 = call i32 @_wyvern_slice_dmxpy_mul315_510816481(i32 %ldm, i32 %j.0)
Referring to an argument in another function!
  %add31688 = call i32 @_wyvern_slice_dmxpy_add316_16065317(i32 %ldm, i32 %j.0, i32 %i.4)
Referring to an argument in another function!
  %add32389 = call i32 @_wyvern_slice_dmxpy_add323_432786739(i32 %ldm, i32 %i.4, i32 %j.0)
Referring to an argument in another function!
  %mul41 = call float @_wyvern_slice_dscal_mul4_669263809(float %da, ptr %dx, i32 %i.0)
Referring to an argument in another function!
  %mul132 = call float @_wyvern_slice_dscal_mul13_899663080(float %da, ptr %dx, i32 %i.1)
Only PHI nodes may reference their own value!
  %0 = add nsw i32 %0, 1
LLVM ERROR: Broken module found, compilation aborted!
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: opt -passes=daedalus -load-pass-plugin build/lib/libdaedalus.so -disable-output tests/linpack-pc.ll -debug-only=daedalus
 #0 0x00007879ffc65b70 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /home/pc2/llvm17/llvm-project/llvm/lib/Support/Unix/Signals.inc:602:22
 #1 0x00007879ffc65f41 PrintStackTraceSignalHandler(void*) /home/pc2/llvm17/llvm-project/llvm/lib/Support/Unix/Signals.inc:675:1
 #2 0x00007879ffc63601 llvm::sys::RunSignalHandlers() /home/pc2/llvm17/llvm-project/llvm/lib/Support/Signals.cpp:104:20
 #3 0x00007879ffc654d5 SignalHandler(int) /home/pc2/llvm17/llvm-project/llvm/lib/Support/Unix/Signals.inc:413:1
 #4 0x00007879ff44c1d0 (/usr/lib/libc.so.6+0x3d1d0)
 #5 0x00007879ff4a53f4 (/usr/lib/libc.so.6+0x963f4)
 #6 0x00007879ff44c120 raise (/usr/lib/libc.so.6+0x3d120)
 #7 0x00007879ff4334c3 abort (/usr/lib/libc.so.6+0x244c3)
 #8 0x00007879ffb3e9a1 llvm::report_fatal_error(llvm::Twine const&, bool) /home/pc2/llvm17/llvm-project/llvm/lib/Support/ErrorHandling.cpp:125:9
 #9 0x00007879ffb3e77d llvm::report_fatal_error(llvm::StringRef, bool) /home/pc2/llvm17/llvm-project/llvm/lib/Support/ErrorHandling.cpp:86:68
#10 0x0000787a0054136a llvm::VerifierPass::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) /home/pc2/llvm17/llvm-project/llvm/lib/IR/Verifier.cpp:7136:33
#11 0x000064a7550a23cf llvm::detail::PassModel<llvm::Module, llvm::VerifierPass, llvm::PreservedAnalyses, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) /home/pc2/llvm17/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:90:3
#12 0x0000787a0049e0d9 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) /home/pc2/llvm17/llvm-project/llvm/include/llvm/IR/PassManager.h:521:20
#13 0x000064a75507d1ca llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) /home/pc2/llvm17/llvm-project/llvm/tools/opt/NewPMDriver.cpp:527:10
#14 0x000064a7550a8ca7 main /home/pc2/llvm17/llvm-project/llvm/tools/opt/opt.cpp:709:27
#15 0x00007879ff434e08 (/usr/lib/libc.so.6+0x25e08)
#16 0x00007879ff434ecc __libc_start_main (/usr/lib/libc.so.6+0x25ecc)
#17 0x000064a75507a445 _start (/home/pc2/llvm17/llvm-project/build/bin/opt+0x1a445)
./comp.sh: line 4: 43475 Aborted                 (core dumped) opt -passes=daedalus -load-pass-plugin build/lib/libdaedalus.so -disable-output "$1" -debug-only=daedalus

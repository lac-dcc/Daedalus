make: Entering directory '/home/daniel/Daedalus/build'
make[1]: Entering directory '/home/daniel/Daedalus/build'
make[2]: Entering directory '/home/daniel/Daedalus/build'
make[2]: Leaving directory '/home/daniel/Daedalus/build'
[100%] Built target daedalus
make[1]: Leaving directory '/home/daniel/Daedalus/build'
make: Leaving directory '/home/daniel/Daedalus/build'
PHI FUNC HERE:   %sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ]
ENDF
define internal i32 @_wyvern_slice_foo_sum.0_186934838(i32 %x, i32 %N, i32 %i.0) {
_wyvern_unreachable:
  unreachable

sliceclone_for.inc:                               ; preds = %sliceclone_for.body
  br label %sliceclone_for.cond

sliceclone_for.cond:                              ; preds = %sliceclone_for.inc, %sliceclone_entry
  %0 = phi i32 [ 0, %sliceclone_entry ], [ %2, %sliceclone_for.inc ]
  %1 = icmp slt i32 %i.0, %N
  ret i32 %0

sliceclone_entry:                                 ; No predecessors!
  br label %sliceclone_for.cond

sliceclone_for.body:                              ; No predecessors!
  %2 = add nsw i32 %0, %x
  br label %sliceclone_for.inc
}

PHI FUNC HERE:   %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
ENDF
define internal i32 @_wyvern_slice_foo_i.0_219394788(i32 %N) {
_wyvern_unreachable:
  unreachable

sliceclone_for.inc:                               ; No predecessors!
  %0 = add nsw i32 %1, 1
  br label %sliceclone_for.cond

sliceclone_for.cond:                              ; preds = %sliceclone_for.inc, %sliceclone_entry
  %1 = phi i32 [ 0, %sliceclone_entry ], [ %0, %sliceclone_for.inc ]
  %2 = icmp slt i32 %1, %N
  ret i32 %1

sliceclone_entry:                                 ; No predecessors!
  br label %sliceclone_for.cond
}

ENDF
define internal i1 @_wyvern_slice_foo_cmp_186436367(i32 %N) {
_wyvern_unreachable:
  unreachable

sliceclone_for.inc:                               ; No predecessors!
  %0 = add nsw i32 %1, 1
  br label %sliceclone_for.cond

sliceclone_for.cond:                              ; preds = %sliceclone_for.inc, %sliceclone_entry
  %1 = phi i32 [ 0, %sliceclone_entry ], [ %0, %sliceclone_for.inc ]
  %2 = icmp slt i32 %1, %N
  ret i1 %2

sliceclone_entry:                                 ; No predecessors!
  br label %sliceclone_for.cond
}

ENDF
define internal i32 @_wyvern_slice_foo_add_435643587(i32 %x, i32 %sum.0) {
sliceclone_for.body:
  %0 = add nsw i32 %sum.0, %x
  ret i32 %0
}

ENDF
define internal i32 @_wyvern_slice_foo_inc_193645259(i32 %i.0) {
sliceclone_for.inc:
  %0 = add nsw i32 %i.0, 1
  ret i32 %0
}

PHI FUNC HERE:   %sum.0.lcssa = phi i32 [ %sum.0, %for.cond ]
ENDF
define internal i32 @_wyvern_slice_foo_sum.0.lcssa_885511021(i32 %x, i32 %N) {
sliceclone_entry:
  br label %sliceclone_for.cond

sliceclone_for.inc:                               ; preds = %sliceclone_for.body
  %0 = add nsw i32 %2, 1
  br label %sliceclone_for.cond

sliceclone_for.cond:                              ; preds = %sliceclone_for.inc, %sliceclone_entry
  %1 = phi i32 [ 0, %sliceclone_entry ], [ %4, %sliceclone_for.inc ]
  %2 = phi i32 [ 0, %sliceclone_entry ], [ %0, %sliceclone_for.inc ]
  %3 = icmp slt i32 %2, %N
  br i1 %3, label %sliceclone_for.body, label %sliceclone_for.end

sliceclone_for.body:                              ; preds = %sliceclone_for.cond
  %4 = add nsw i32 %1, %x
  br label %sliceclone_for.inc

sliceclone_for.end:                               ; preds = %sliceclone_for.cond
  %5 = phi i32 [ %1, %sliceclone_for.cond ]
  ret i32 %5
}

PHI FUNC HERE:   %sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ]
ENDF
define internal i32 @_wyvern_slice_bar_sum.0_81710320(i32 %y, i32 %SIZE, i32 %i.0) {
_wyvern_unreachable:
  unreachable

sliceclone_entry:                                 ; No predecessors!
  br label %sliceclone_for.cond

sliceclone_for.cond:                              ; preds = %sliceclone_for.inc, %sliceclone_entry
  %0 = phi i32 [ 0, %sliceclone_entry ], [ %2, %sliceclone_for.inc ]
  %1 = icmp slt i32 %i.0, %SIZE
  ret i32 %0

sliceclone_for.inc:                               ; preds = %sliceclone_for.body
  br label %sliceclone_for.cond

sliceclone_for.body:                              ; No predecessors!
  %2 = add nsw i32 %0, %y
  br label %sliceclone_for.inc
}

PHI FUNC HERE:   %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
ENDF
define internal i32 @_wyvern_slice_bar_i.0_440671233(i32 %SIZE) {
_wyvern_unreachable:
  unreachable

sliceclone_entry:                                 ; No predecessors!
  br label %sliceclone_for.cond

sliceclone_for.cond:                              ; preds = %sliceclone_for.inc, %sliceclone_entry
  %0 = phi i32 [ 0, %sliceclone_entry ], [ %2, %sliceclone_for.inc ]
  %1 = icmp slt i32 %0, %SIZE
  ret i32 %0

sliceclone_for.inc:                               ; No predecessors!
  %2 = add nsw i32 %0, 1
  br label %sliceclone_for.cond
}

ENDF
define internal i1 @_wyvern_slice_bar_cmp_922165468(i32 %SIZE) {
_wyvern_unreachable:
  unreachable

sliceclone_entry:                                 ; No predecessors!
  br label %sliceclone_for.cond

sliceclone_for.cond:                              ; preds = %sliceclone_for.inc, %sliceclone_entry
  %0 = phi i32 [ 0, %sliceclone_entry ], [ %2, %sliceclone_for.inc ]
  %1 = icmp slt i32 %0, %SIZE
  ret i1 %1

sliceclone_for.inc:                               ; No predecessors!
  %2 = add nsw i32 %0, 1
  br label %sliceclone_for.cond
}

ENDF
define internal i32 @_wyvern_slice_bar_add_869035501(i32 %y, i32 %sum.0) {
sliceclone_for.body:
  %0 = add nsw i32 %sum.0, %y
  ret i32 %0
}

ENDF
define internal i32 @_wyvern_slice_bar_inc_988530954(i32 %i.0) {
sliceclone_for.inc:
  %0 = add nsw i32 %i.0, 1
  ret i32 %0
}

PHI FUNC HERE:   %sum.0.lcssa = phi i32 [ %sum.0, %for.cond ]
ENDF
define internal i32 @_wyvern_slice_bar_sum.0.lcssa_15705576(i32 %y, i32 %SIZE) {
sliceclone_entry:
  br label %sliceclone_for.cond

sliceclone_for.cond:                              ; preds = %sliceclone_for.inc, %sliceclone_entry
  %0 = phi i32 [ 0, %sliceclone_entry ], [ %4, %sliceclone_for.inc ]
  %1 = phi i32 [ 0, %sliceclone_entry ], [ %3, %sliceclone_for.inc ]
  %2 = icmp slt i32 %1, %SIZE
  br i1 %2, label %sliceclone_for.body, label %sliceclone_for.end

sliceclone_for.inc:                               ; preds = %sliceclone_for.body
  %3 = add nsw i32 %1, 1
  br label %sliceclone_for.cond

sliceclone_for.body:                              ; preds = %sliceclone_for.cond
  %4 = add nsw i32 %0, %y
  br label %sliceclone_for.inc

sliceclone_for.end:                               ; preds = %sliceclone_for.cond
  %5 = phi i32 [ %0, %sliceclone_for.cond ]
  ret i32 %5
}

ENDF
define internal i32 @_wyvern_slice_bar_mul_374743469(i32 %y, i32 %SIZE, i32 %v) {
sliceclone_entry:
  br label %sliceclone_for.cond

sliceclone_for.cond:                              ; preds = %sliceclone_for.inc, %sliceclone_entry
  %0 = phi i32 [ 0, %sliceclone_entry ], [ %4, %sliceclone_for.inc ]
  %1 = phi i32 [ 0, %sliceclone_entry ], [ %3, %sliceclone_for.inc ]
  %2 = icmp slt i32 %1, %SIZE
  br i1 %2, label %sliceclone_for.body, label %sliceclone_for.end

sliceclone_for.inc:                               ; preds = %sliceclone_for.body
  %3 = add nsw i32 %1, 1
  br label %sliceclone_for.cond

sliceclone_for.body:                              ; preds = %sliceclone_for.cond
  %4 = add nsw i32 %0, %y
  br label %sliceclone_for.inc

sliceclone_for.end:                               ; preds = %sliceclone_for.cond
  %5 = phi i32 [ %0, %sliceclone_for.cond ]
  %6 = mul nsw i32 %v, %5
  ret i32 %6
}

ENDF
define internal i32 @_wyvern_slice_main_call2_818278118(i32 %argc) {
sliceclone_entry:
  %0 = add nsw i32 %argc, 20
  %1 = call i32 @bar(i32 noundef %argc, i32 noundef %0, i32 noundef 2)
  ret i32 %1
}

ENDF
define internal i32 @_wyvern_slice_main_add_948833439(i32 %argc) {
sliceclone_entry:
  %0 = add nsw i32 %argc, 10
  ret i32 %0
}

ENDF
define internal i32 @_wyvern_slice_main_call_999382422(i32 %argc) {
sliceclone_entry:
  %0 = add nsw i32 %argc, 10
  %1 = call i32 @foo(i32 noundef %argc, i32 noundef %0)
  ret i32 %1
}

ENDF
define internal i32 @_wyvern_slice_main_add1_998899701(i32 %argc) {
sliceclone_entry:
  %0 = add nsw i32 %argc, 20
  ret i32 %0
}

ENDF
define internal i32 @_wyvern_slice_main_add3_147200714(i32 %argc) {
sliceclone_entry:
  %0 = add nsw i32 %argc, 10
  %1 = call i32 @foo(i32 noundef %argc, i32 noundef %0)
  %2 = add nsw i32 %argc, 20
  %3 = call i32 @bar(i32 noundef %argc, i32 noundef %2, i32 noundef 2)
  %4 = add nsw i32 %1, %3
  ret i32 %4
}

; ModuleID = 'New_tests/test19.ll'
source_filename = "New_tests/test19.ll"
Instruction does not dominate all uses!
  %i.02 = call i32 @_wyvern_slice_foo_i.0_219394788(i32 %N)
  %sum.01 = call i32 @_wyvern_slice_foo_sum.0_186934838(i32 %x, i32 %N, i32 %i.02)
Instruction does not dominate all uses!
  %i.02 = call i32 @_wyvern_slice_bar_i.0_440671233(i32 %SIZE)
  %sum.01 = call i32 @_wyvern_slice_bar_sum.0_81710320(i32 %y, i32 %SIZE, i32 %i.02)
LLVM ERROR: Broken module found, compilation aborted!
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: opt -load-pass-plugin build/lib/libdaedalus.so -passes=daedalus -S tests/test19.ll -o tests/test19_F.ll
 #0 0x00007f8c02f68e78 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /home/daniel/llvm-project/llvm/lib/Support/Unix/Signals.inc:602:22
 #1 0x00007f8c02f6924c PrintStackTraceSignalHandler(void*) /home/daniel/llvm-project/llvm/lib/Support/Unix/Signals.inc:675:1
 #2 0x00007f8c02f66a42 llvm::sys::RunSignalHandlers() /home/daniel/llvm-project/llvm/lib/Support/Signals.cpp:104:20
 #3 0x00007f8c02f687ac SignalHandler(int) /home/daniel/llvm-project/llvm/lib/Support/Unix/Signals.inc:413:1
 #4 0x00007f8c027af090 (/lib/x86_64-linux-gnu/libc.so.6+0x43090)
 #5 0x00007f8c027af00b raise /build/glibc-e2p3jK/glibc-2.31/signal/../sysdeps/unix/sysv/linux/raise.c:51:1
 #6 0x00007f8c0278e859 abort /build/glibc-e2p3jK/glibc-2.31/stdlib/abort.c:81:7
 #7 0x00007f8c02e39ccf llvm::report_fatal_error(llvm::Twine const&, bool) /home/daniel/llvm-project/llvm/lib/Support/ErrorHandling.cpp:125:9
 #8 0x00007f8c02e39ab2 llvm::report_fatal_error(llvm::StringRef, bool) /home/daniel/llvm-project/llvm/lib/Support/ErrorHandling.cpp:86:68
 #9 0x00007f8c03975c75 llvm::VerifierPass::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) /home/daniel/llvm-project/llvm/lib/IR/Verifier.cpp:7136:33
#10 0x0000556a1c6d0f67 llvm::detail::PassModel<llvm::Module, llvm::VerifierPass, llvm::PreservedAnalyses, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) /home/daniel/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:90:3
#11 0x00007f8c038cfc99 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) /home/daniel/llvm-project/llvm/include/llvm/IR/PassManager.h:521:7
#12 0x0000556a1c6aae26 llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) /home/daniel/llvm-project/llvm/tools/opt/NewPMDriver.cpp:527:10
#13 0x0000556a1c6d7eb7 main /home/daniel/llvm-project/llvm/tools/opt/opt.cpp:709:27
#14 0x00007f8c02790083 __libc_start_main /build/glibc-e2p3jK/glibc-2.31/csu/../csu/libc-start.c:342:3
#15 0x0000556a1c6a824e _start (/home/daniel/llvm-project/build/bin/opt+0x7224e)
Aborted (core dumped)

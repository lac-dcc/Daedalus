; CHECK: ; Function Attrs: noinline nounwind optsize willreturn
; CHECK-NEXT: define internal i32 @_daedalus_slice_passShort__[[ID:[0-9]+]](i16 %0, i8 %1) #4 {
; CHECK-NEXT: sliceclone_BB_0:
; CHECK-NEXT:   %2 = sext i16 %0 to i32
; CHECK-NEXT:   %3 = sext i8 %1 to i32
; CHECK-NEXT:   %4 = mul nsw i32 %2, %3
; CHECK-NEXT:   ret i32 %4
; CHECK-NEXT: }
; CHECK-EMPTY:
; CHECK-NEXT: ; Function Attrs: noinline nounwind optsize willreturn
; CHECK-NEXT: define internal i32 @_daedalus_slice_getShort__[[ID:[0-9]+]](i8 %0, i8 %1) #4 {
; CHECK-NEXT: sliceclone_BB_0:
; CHECK-NEXT:   %2 = sext i8 %1 to i32
; CHECK-NEXT:   %3 = sext i8 %0 to i32
; CHECK-NEXT:   %4 = add nsw i32 %3, %2
; CHECK-NEXT:   ret i32 %4
; CHECK-NEXT: }
; CHECK-EMPTY:
; CHECK-NEXT: ; Function Attrs: noinline nounwind optsize willreturn
; CHECK-NEXT: define internal i32 @_daedalus_slice_getShort__[[ID:[0-9]+]](i8 %0, i8 %1, i8 %2) #4 {
; CHECK-NEXT: sliceclone_BB_0:
; CHECK-NEXT:   %3 = sext i8 %2 to i32
; CHECK-NEXT:   %4 = call i32 @_daedalus_slice_getShort__[[ID:[0-9]+]](i8 %0, i8 %1)
; CHECK-NEXT:   %5 = add nsw i32 %4, %3
; CHECK-NEXT:   ret i32 %5
; CHECK-NEXT: }
; CHECK-EMPTY:
; CHECK-NEXT: ; Function Attrs: noinline nounwind optsize willreturn
; CHECK-NEXT: define internal i32 @_daedalus_slice_getShort__[[ID:[0-9]+]](i8 %0, i8 %1, i8 %2, i16 %3) #4 {
; CHECK-NEXT: sliceclone_BB_0:
; CHECK-NEXT:   %4 = sext i16 %3 to i32
; CHECK-NEXT:   %5 = call i32 @_daedalus_slice_getShort__[[ID:[0-9]+]](i8 %0, i8 %1, i8 %2)
; CHECK-NEXT:   %6 = add nsw i32 %5, %4
; CHECK-NEXT:   ret i32 %6
; CHECK-NEXT: }
; CHECK-EMPTY:
; CHECK-NEXT: ; Function Attrs: noinline nounwind optsize willreturn
; CHECK-NEXT: define internal i32 @_daedalus_slice_getShort__[[ID:[0-9]+]](i8 %0, i8 %1, i8 %2, i16 %3, i16 %4) #4 {
; CHECK-NEXT: sliceclone_BB_0:
; CHECK-NEXT:   %5 = sext i16 %4 to i32
; CHECK-NEXT:   %6 = call i32 @_daedalus_slice_getShort__[[ID:[0-9]+]](i8 %0, i8 %1, i8 %2, i16 %3)
; CHECK-NEXT:   %7 = add nsw i32 %6, %5
; CHECK-NEXT:   ret i32 %7
; CHECK-NEXT: }
; CHECK-EMPTY:
; CHECK-NEXT: ; Function Attrs: noinline nounwind optsize willreturn
; CHECK-NEXT: define internal i32 @_daedalus_slice_getUnknown__[[ID:[0-9]+]]() #4 {
; CHECK-NEXT: sliceclone_BB_0:
; CHECK-NEXT:   %0 = alloca [1 x %struct.__va_list_tag], align 16
; CHECK-NEXT:   %1 = load i32, ptr %0, align 16
; CHECK-NEXT:   br label %sliceclone_BB_2
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_2:                                  ; preds = %sliceclone_BB_0
; CHECK-NEXT:   %2 = add nuw nsw i32 %1, 8
; CHECK-NEXT:   ret i32 %2
; CHECK-NEXT: }
; CHECK-EMPTY:
; CHECK-NEXT: ; Function Attrs: noinline nounwind optsize willreturn
; CHECK-NEXT: define internal i32 @_daedalus_slice_getUnknown__[[ID:[0-9]+]]() #4 {
; CHECK-NEXT: sliceclone_BB_0:
; CHECK-NEXT:   %0 = alloca [1 x %struct.__va_list_tag], align 16
; CHECK-NEXT:   %1 = load i32, ptr %0, align 16
; CHECK-NEXT:   br label %sliceclone_BB_4
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_4:                                  ; preds = %sliceclone_BB_0
; CHECK-NEXT:   %2 = add nuw nsw i32 %1, 16
; CHECK-NEXT:   ret i32 %2
; CHECK-NEXT: }
; CHECK-EMPTY:
; CHECK-NEXT: ; Function Attrs: noinline nounwind optsize willreturn
; CHECK-NEXT: define internal i32 @_daedalus_slice_getUnknown__[[ID:[0-9]+]]() #4 {
; CHECK-NEXT: sliceclone_BB_0:
; CHECK-NEXT:   %0 = alloca [1 x %struct.__va_list_tag], align 16
; CHECK-NEXT:   %1 = load i32, ptr %0, align 16
; CHECK-NEXT:   br label %sliceclone_BB_6
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_6:                                  ; preds = %sliceclone_BB_0
; CHECK-NEXT:   %2 = add nuw nsw i32 %1, 24
; CHECK-NEXT:   ret i32 %2
; CHECK-NEXT: }
; CHECK-EMPTY:
; CHECK-NEXT: ; Function Attrs: noinline nounwind optsize willreturn
; CHECK-NEXT: define internal i32 @_daedalus_slice_getUnknown__[[ID:[0-9]+]]() #4 {
; CHECK-NEXT: sliceclone_BB_0:
; CHECK-NEXT:   %0 = alloca [1 x %struct.__va_list_tag], align 16
; CHECK-NEXT:   %1 = load i32, ptr %0, align 16
; CHECK-NEXT:   br label %sliceclone_BB_8
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_8:                                  ; preds = %sliceclone_BB_0
; CHECK-NEXT:   %2 = add nuw nsw i32 %1, 32
; CHECK-NEXT:   ret i32 %2
; CHECK-NEXT: }
; CHECK-EMPTY:
; CHECK-NEXT: ; Function Attrs: noinline nounwind optsize willreturn
; CHECK-NEXT: define internal i32 @_daedalus_slice_getUnknown__[[ID:[0-9]+]]() #4 {
; CHECK-NEXT: sliceclone_BB_0:
; CHECK-NEXT:   %0 = alloca [1 x %struct.__va_list_tag], align 16
; CHECK-NEXT:   %1 = load i32, ptr %0, align 16
; CHECK-NEXT:   br label %sliceclone_BB_10
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_10:                                 ; preds = %sliceclone_BB_0
; CHECK-NEXT:   %2 = add nuw nsw i32 %1, 40
; CHECK-NEXT:   ret i32 %2
; CHECK-NEXT: }
; CHECK-EMPTY:
; CHECK-NEXT: ; Function Attrs: noinline nounwind optsize willreturn
; CHECK-NEXT: define internal i32 @_daedalus_slice_getUnknown__[[ID:[0-9]+]]() #4 {
; CHECK-NEXT: sliceclone_BB_0:
; CHECK-NEXT:   %0 = alloca [1 x %struct.__va_list_tag], align 16
; CHECK-NEXT:   %1 = load i32, ptr %0, align 16
; CHECK-NEXT:   br label %sliceclone_BB_11
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_11:                                 ; preds = %sliceclone_BB_0
; CHECK-NEXT:   %2 = add nuw nsw i32 %1, 48
; CHECK-NEXT:   ret i32 %2
; CHECK-NEXT: }
; CHECK-EMPTY:
; CHECK-NEXT: ; Function Attrs: noinline nounwind optsize willreturn
; CHECK-NEXT: define internal i32 @_daedalus_slice_getUnknown__[[ID:[0-9]+]]() #4 {
; CHECK-NEXT: sliceclone_BB_0:
; CHECK-NEXT:   %0 = alloca [1 x %struct.__va_list_tag], align 16
; CHECK-NEXT:   %1 = load i32, ptr %0, align 16
; CHECK-NEXT:   %2 = icmp ult i32 %1, 41
; CHECK-NEXT:   br i1 %2, label %sliceclone_BB_2, label %sliceclone_BB_1
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_3:                                  ; preds = %sliceclone_BB_1, %sliceclone_BB_2
; CHECK-NEXT:   %3 = phi i32 [ %12, %sliceclone_BB_1 ], [ %8, %sliceclone_BB_2 ]
; CHECK-NEXT:   br label %sliceclone_BB_5
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_2:                                  ; preds = %sliceclone_BB_0
; CHECK-NEXT:   %4 = getelementptr inbounds %struct.__va_list_tag, ptr %0, i64 0, i32 3
; CHECK-NEXT:   %5 = load ptr, ptr %4, align 16
; CHECK-NEXT:   %6 = zext i32 %1 to i64
; CHECK-NEXT:   %7 = getelementptr i8, ptr %5, i64 %6
; CHECK-NEXT:   %8 = load i32, ptr %7, align 4
; CHECK-NEXT:   %9 = icmp ult i32 %1, 33
; CHECK-NEXT:   br i1 %9, label %sliceclone_BB_4, label %sliceclone_BB_3
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_1:                                  ; preds = %sliceclone_BB_0
; CHECK-NEXT:   %10 = getelementptr inbounds %struct.__va_list_tag, ptr %0, i64 0, i32 2
; CHECK-NEXT:   %11 = load ptr, ptr %10, align 8
; CHECK-NEXT:   %12 = load i32, ptr %11, align 4
; CHECK-NEXT:   br label %sliceclone_BB_3
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_4:                                  ; preds = %sliceclone_BB_2
; CHECK-NEXT:   %13 = icmp ult i32 %1, 25
; CHECK-NEXT:   br i1 %13, label %sliceclone_BB_6, label %sliceclone_BB_5
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_5:                                  ; preds = %sliceclone_BB_4, %sliceclone_BB_3
; CHECK-NEXT:   %14 = phi i32 [ %3, %sliceclone_BB_3 ], [ %8, %sliceclone_BB_4 ]
; CHECK-NEXT:   br label %sliceclone_BB_7
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_6:                                  ; preds = %sliceclone_BB_4
; CHECK-NEXT:   %15 = icmp ult i32 %1, 17
; CHECK-NEXT:   br i1 %15, label %sliceclone_BB_8, label %sliceclone_BB_7
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_7:                                  ; preds = %sliceclone_BB_6, %sliceclone_BB_5
; CHECK-NEXT:   %16 = phi i32 [ %14, %sliceclone_BB_5 ], [ %8, %sliceclone_BB_6 ]
; CHECK-NEXT:   br label %sliceclone_BB_9
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_8:                                  ; preds = %sliceclone_BB_6
; CHECK-NEXT:   %17 = icmp ult i32 %1, 9
; CHECK-NEXT:   br i1 %17, label %sliceclone_BB_10, label %sliceclone_BB_9
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_9:                                  ; preds = %sliceclone_BB_8, %sliceclone_BB_7
; CHECK-NEXT:   %18 = phi i32 [ %16, %sliceclone_BB_7 ], [ %8, %sliceclone_BB_8 ]
; CHECK-NEXT:   br label %sliceclone_BB_12
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_10:                                 ; preds = %sliceclone_BB_8
; CHECK-NEXT:   %19 = icmp eq i32 %1, 0
; CHECK-NEXT:   br i1 %19, label %sliceclone_BB_11, label %sliceclone_BB_12
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_12:                                 ; preds = %sliceclone_BB_10, %sliceclone_BB_9
; CHECK-NEXT:   %20 = phi i32 [ %18, %sliceclone_BB_9 ], [ %8, %sliceclone_BB_10 ]
; CHECK-NEXT:   br label %sliceclone_BB_13
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_11:                                 ; preds = %sliceclone_BB_10
; CHECK-NEXT:   br label %sliceclone_BB_13
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_13:                                 ; preds = %sliceclone_BB_11, %sliceclone_BB_12
; CHECK-NEXT:   %21 = phi i32 [ %8, %sliceclone_BB_11 ], [ %20, %sliceclone_BB_12 ]
; CHECK-NEXT:   %22 = shl i32 %21, 24
; CHECK-NEXT:   ret i32 %22
; CHECK-NEXT: }
; CHECK-EMPTY:
; CHECK-NEXT: ; Function Attrs: noinline nounwind optsize willreturn
; CHECK-NEXT: define internal i32 @_daedalus_slice_getUnknown__[[ID:[0-9]+]]() #4 {
; CHECK-NEXT: sliceclone_BB_0:
; CHECK-NEXT:   %0 = alloca [1 x %struct.__va_list_tag], align 16
; CHECK-NEXT:   %1 = load i32, ptr %0, align 16
; CHECK-NEXT:   %2 = icmp ult i32 %1, 41
; CHECK-NEXT:   br i1 %2, label %sliceclone_BB_2, label %sliceclone_BB_3
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_3:                                  ; preds = %sliceclone_BB_2, %sliceclone_BB_0
; CHECK-NEXT:   %3 = getelementptr inbounds %struct.__va_list_tag, ptr %0, i64 0, i32 2
; CHECK-NEXT:   %4 = load ptr, ptr %3, align 8
; CHECK-NEXT:   %5 = load i32, ptr %4, align 4
; CHECK-NEXT:   br label %sliceclone_BB_5
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_2:                                  ; preds = %sliceclone_BB_0
; CHECK-NEXT:   %6 = call i32 @_daedalus_slice_getUnknown__[[ID:[0-9]+]]()
; CHECK-NEXT:   %7 = icmp ult i32 %1, 33
; CHECK-NEXT:   br i1 %7, label %sliceclone_BB_4, label %sliceclone_BB_3
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_4:                                  ; preds = %sliceclone_BB_2
; CHECK-NEXT:   %8 = getelementptr inbounds %struct.__va_list_tag, ptr %0, i64 0, i32 3
; CHECK-NEXT:   %9 = load ptr, ptr %8, align 16
; CHECK-NEXT:   %10 = zext i32 %6 to i64
; CHECK-NEXT:   %11 = getelementptr i8, ptr %9, i64 %10
; CHECK-NEXT:   %12 = load i32, ptr %11, align 4
; CHECK-NEXT:   %13 = icmp ult i32 %1, 25
; CHECK-NEXT:   br i1 %13, label %sliceclone_BB_6, label %sliceclone_BB_5
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_5:                                  ; preds = %sliceclone_BB_4, %sliceclone_BB_3
; CHECK-NEXT:   %14 = phi i32 [ %5, %sliceclone_BB_3 ], [ %12, %sliceclone_BB_4 ]
; CHECK-NEXT:   br label %sliceclone_BB_7
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_6:                                  ; preds = %sliceclone_BB_4
; CHECK-NEXT:   %15 = icmp ult i32 %1, 17
; CHECK-NEXT:   br i1 %15, label %sliceclone_BB_8, label %sliceclone_BB_7
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_7:                                  ; preds = %sliceclone_BB_6, %sliceclone_BB_5
; CHECK-NEXT:   %16 = phi i32 [ %14, %sliceclone_BB_5 ], [ %12, %sliceclone_BB_6 ]
; CHECK-NEXT:   br label %sliceclone_BB_9
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_8:                                  ; preds = %sliceclone_BB_6
; CHECK-NEXT:   %17 = icmp ult i32 %1, 9
; CHECK-NEXT:   br i1 %17, label %sliceclone_BB_10, label %sliceclone_BB_9
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_9:                                  ; preds = %sliceclone_BB_8, %sliceclone_BB_7
; CHECK-NEXT:   %18 = phi i32 [ %16, %sliceclone_BB_7 ], [ %12, %sliceclone_BB_8 ]
; CHECK-NEXT:   br label %sliceclone_BB_12
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_10:                                 ; preds = %sliceclone_BB_8
; CHECK-NEXT:   %19 = icmp eq i32 %1, 0
; CHECK-NEXT:   br i1 %19, label %sliceclone_BB_11, label %sliceclone_BB_12
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_12:                                 ; preds = %sliceclone_BB_10, %sliceclone_BB_9
; CHECK-NEXT:   %20 = phi i32 [ %18, %sliceclone_BB_9 ], [ %12, %sliceclone_BB_10 ]
; CHECK-NEXT:   br label %sliceclone_BB_13
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_11:                                 ; preds = %sliceclone_BB_10
; CHECK-NEXT:   br label %sliceclone_BB_13
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_13:                                 ; preds = %sliceclone_BB_11, %sliceclone_BB_12
; CHECK-NEXT:   %21 = phi i32 [ %12, %sliceclone_BB_11 ], [ %20, %sliceclone_BB_12 ]
; CHECK-NEXT:   %22 = shl i32 %21, 24
; CHECK-NEXT:   ret i32 %22
; CHECK-NEXT: }
; CHECK-EMPTY:
; CHECK-NEXT: ; Function Attrs: noinline nounwind optsize willreturn
; CHECK-NEXT: define internal i32 @_daedalus_slice_getUnknown__[[ID:[0-9]+]]() #4 {
; CHECK-NEXT: sliceclone_BB_0:
; CHECK-NEXT:   %0 = alloca [1 x %struct.__va_list_tag], align 16
; CHECK-NEXT:   %1 = load i32, ptr %0, align 16
; CHECK-NEXT:   %2 = icmp ult i32 %1, 41
; CHECK-NEXT:   br i1 %2, label %sliceclone_BB_2, label %sliceclone_BB_5
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_2:                                  ; preds = %sliceclone_BB_0
; CHECK-NEXT:   %3 = icmp ult i32 %1, 33
; CHECK-NEXT:   br i1 %3, label %sliceclone_BB_4, label %sliceclone_BB_5
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_4:                                  ; preds = %sliceclone_BB_2
; CHECK-NEXT:   %4 = call i32 @_daedalus_slice_getUnknown__[[ID:[0-9]+]]()
; CHECK-NEXT:   %5 = icmp ult i32 %1, 25
; CHECK-NEXT:   br i1 %5, label %sliceclone_BB_6, label %sliceclone_BB_5
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_5:                                  ; preds = %sliceclone_BB_4, %sliceclone_BB_2, %sliceclone_BB_0
; CHECK-NEXT:   %6 = getelementptr inbounds %struct.__va_list_tag, ptr %0, i64 0, i32 2
; CHECK-NEXT:   %7 = load ptr, ptr %6, align 8
; CHECK-NEXT:   %8 = load i32, ptr %7, align 4
; CHECK-NEXT:   br label %sliceclone_BB_7
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_6:                                  ; preds = %sliceclone_BB_4
; CHECK-NEXT:   %9 = getelementptr inbounds %struct.__va_list_tag, ptr %0, i64 0, i32 3
; CHECK-NEXT:   %10 = load ptr, ptr %9, align 16
; CHECK-NEXT:   %11 = zext i32 %4 to i64
; CHECK-NEXT:   %12 = getelementptr i8, ptr %10, i64 %11
; CHECK-NEXT:   %13 = load i32, ptr %12, align 4
; CHECK-NEXT:   %14 = icmp ult i32 %1, 17
; CHECK-NEXT:   br i1 %14, label %sliceclone_BB_8, label %sliceclone_BB_7
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_7:                                  ; preds = %sliceclone_BB_6, %sliceclone_BB_5
; CHECK-NEXT:   %15 = phi i32 [ %8, %sliceclone_BB_5 ], [ %13, %sliceclone_BB_6 ]
; CHECK-NEXT:   br label %sliceclone_BB_9
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_8:                                  ; preds = %sliceclone_BB_6
; CHECK-NEXT:   %16 = icmp ult i32 %1, 9
; CHECK-NEXT:   br i1 %16, label %sliceclone_BB_10, label %sliceclone_BB_9
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_9:                                  ; preds = %sliceclone_BB_8, %sliceclone_BB_7
; CHECK-NEXT:   %17 = phi i32 [ %15, %sliceclone_BB_7 ], [ %13, %sliceclone_BB_8 ]
; CHECK-NEXT:   br label %sliceclone_BB_12
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_10:                                 ; preds = %sliceclone_BB_8
; CHECK-NEXT:   %18 = icmp eq i32 %1, 0
; CHECK-NEXT:   br i1 %18, label %sliceclone_BB_11, label %sliceclone_BB_12
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_12:                                 ; preds = %sliceclone_BB_10, %sliceclone_BB_9
; CHECK-NEXT:   %19 = phi i32 [ %17, %sliceclone_BB_9 ], [ %13, %sliceclone_BB_10 ]
; CHECK-NEXT:   br label %sliceclone_BB_13
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_11:                                 ; preds = %sliceclone_BB_10
; CHECK-NEXT:   br label %sliceclone_BB_13
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_13:                                 ; preds = %sliceclone_BB_11, %sliceclone_BB_12
; CHECK-NEXT:   %20 = phi i32 [ %13, %sliceclone_BB_11 ], [ %19, %sliceclone_BB_12 ]
; CHECK-NEXT:   %21 = shl i32 %20, 16
; CHECK-NEXT:   ret i32 %21
; CHECK-NEXT: }
; CHECK-EMPTY:
; CHECK-NEXT: ; Function Attrs: noinline nounwind optsize willreturn
; CHECK-NEXT: define internal i32 @_daedalus_slice_getUnknown__[[ID:[0-9]+]]() #4 {
; CHECK-NEXT: sliceclone_BB_0:
; CHECK-NEXT:   %0 = alloca [1 x %struct.__va_list_tag], align 16
; CHECK-NEXT:   %1 = load i32, ptr %0, align 16
; CHECK-NEXT:   %2 = icmp ult i32 %1, 41
; CHECK-NEXT:   br i1 %2, label %sliceclone_BB_2, label %sliceclone_BB_7
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_2:                                  ; preds = %sliceclone_BB_0
; CHECK-NEXT:   %3 = icmp ult i32 %1, 33
; CHECK-NEXT:   br i1 %3, label %sliceclone_BB_4, label %sliceclone_BB_7
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_4:                                  ; preds = %sliceclone_BB_2
; CHECK-NEXT:   %4 = icmp ult i32 %1, 25
; CHECK-NEXT:   br i1 %4, label %sliceclone_BB_6, label %sliceclone_BB_7
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_6:                                  ; preds = %sliceclone_BB_4
; CHECK-NEXT:   %5 = call i32 @_daedalus_slice_getUnknown__[[ID:[0-9]+]]()
; CHECK-NEXT:   %6 = icmp ult i32 %1, 17
; CHECK-NEXT:   br i1 %6, label %sliceclone_BB_8, label %sliceclone_BB_7
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_7:                                  ; preds = %sliceclone_BB_6, %sliceclone_BB_4, %sliceclone_BB_2, %sliceclone_BB_0
; CHECK-NEXT:   %7 = getelementptr inbounds %struct.__va_list_tag, ptr %0, i64 0, i32 2
; CHECK-NEXT:   %8 = load ptr, ptr %7, align 8
; CHECK-NEXT:   %9 = load i32, ptr %8, align 4
; CHECK-NEXT:   br label %sliceclone_BB_9
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_8:                                  ; preds = %sliceclone_BB_6
; CHECK-NEXT:   %10 = getelementptr inbounds %struct.__va_list_tag, ptr %0, i64 0, i32 3
; CHECK-NEXT:   %11 = load ptr, ptr %10, align 16
; CHECK-NEXT:   %12 = zext i32 %5 to i64
; CHECK-NEXT:   %13 = getelementptr i8, ptr %11, i64 %12
; CHECK-NEXT:   %14 = load i32, ptr %13, align 4
; CHECK-NEXT:   %15 = icmp ult i32 %1, 9
; CHECK-NEXT:   br i1 %15, label %sliceclone_BB_10, label %sliceclone_BB_9
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_9:                                  ; preds = %sliceclone_BB_8, %sliceclone_BB_7
; CHECK-NEXT:   %16 = phi i32 [ %9, %sliceclone_BB_7 ], [ %14, %sliceclone_BB_8 ]
; CHECK-NEXT:   br label %sliceclone_BB_12
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_10:                                 ; preds = %sliceclone_BB_8
; CHECK-NEXT:   %17 = icmp eq i32 %1, 0
; CHECK-NEXT:   br i1 %17, label %sliceclone_BB_11, label %sliceclone_BB_12
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_12:                                 ; preds = %sliceclone_BB_10, %sliceclone_BB_9
; CHECK-NEXT:   %18 = phi i32 [ %16, %sliceclone_BB_9 ], [ %14, %sliceclone_BB_10 ]
; CHECK-NEXT:   br label %sliceclone_BB_13
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_11:                                 ; preds = %sliceclone_BB_10
; CHECK-NEXT:   br label %sliceclone_BB_13
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_13:                                 ; preds = %sliceclone_BB_11, %sliceclone_BB_12
; CHECK-NEXT:   %19 = phi i32 [ %14, %sliceclone_BB_11 ], [ %18, %sliceclone_BB_12 ]
; CHECK-NEXT:   %20 = shl i32 %19, 16
; CHECK-NEXT:   ret i32 %20
; CHECK-NEXT: }
; CHECK-EMPTY:
; CHECK-NEXT: ; Function Attrs: noinline nounwind optsize willreturn
; CHECK-NEXT: define internal i32 @_daedalus_slice_getUnknown__[[ID:[0-9]+]]() #4 {
; CHECK-NEXT: sliceclone_BB_0:
; CHECK-NEXT:   %0 = alloca [1 x %struct.__va_list_tag], align 16
; CHECK-NEXT:   %1 = load i32, ptr %0, align 16
; CHECK-NEXT:   %2 = icmp ult i32 %1, 41
; CHECK-NEXT:   br i1 %2, label %sliceclone_BB_2, label %sliceclone_BB_9
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_2:                                  ; preds = %sliceclone_BB_0
; CHECK-NEXT:   %3 = icmp ult i32 %1, 33
; CHECK-NEXT:   br i1 %3, label %sliceclone_BB_4, label %sliceclone_BB_9
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_4:                                  ; preds = %sliceclone_BB_2
; CHECK-NEXT:   %4 = icmp ult i32 %1, 25
; CHECK-NEXT:   br i1 %4, label %sliceclone_BB_6, label %sliceclone_BB_9
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_6:                                  ; preds = %sliceclone_BB_4
; CHECK-NEXT:   %5 = icmp ult i32 %1, 17
; CHECK-NEXT:   br i1 %5, label %sliceclone_BB_8, label %sliceclone_BB_9
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_8:                                  ; preds = %sliceclone_BB_6
; CHECK-NEXT:   %6 = call i32 @_daedalus_slice_getUnknown__[[ID:[0-9]+]]()
; CHECK-NEXT:   %7 = icmp ult i32 %1, 9
; CHECK-NEXT:   br i1 %7, label %sliceclone_BB_10, label %sliceclone_BB_9
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_9:                                  ; preds = %sliceclone_BB_8, %sliceclone_BB_6, %sliceclone_BB_4, %sliceclone_BB_2, %sliceclone_BB_0
; CHECK-NEXT:   %8 = getelementptr inbounds %struct.__va_list_tag, ptr %0, i64 0, i32 2
; CHECK-NEXT:   %9 = load ptr, ptr %8, align 8
; CHECK-NEXT:   %10 = load i32, ptr %9, align 4
; CHECK-NEXT:   br label %sliceclone_BB_12
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_10:                                 ; preds = %sliceclone_BB_8
; CHECK-NEXT:   %11 = getelementptr inbounds %struct.__va_list_tag, ptr %0, i64 0, i32 3
; CHECK-NEXT:   %12 = load ptr, ptr %11, align 16
; CHECK-NEXT:   %13 = zext i32 %6 to i64
; CHECK-NEXT:   %14 = getelementptr i8, ptr %12, i64 %13
; CHECK-NEXT:   %15 = load i32, ptr %14, align 4
; CHECK-NEXT:   %16 = icmp eq i32 %1, 0
; CHECK-NEXT:   br i1 %16, label %sliceclone_BB_11, label %sliceclone_BB_12
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_12:                                 ; preds = %sliceclone_BB_10, %sliceclone_BB_9
; CHECK-NEXT:   %17 = phi i32 [ %10, %sliceclone_BB_9 ], [ %15, %sliceclone_BB_10 ]
; CHECK-NEXT:   br label %sliceclone_BB_13
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_11:                                 ; preds = %sliceclone_BB_10
; CHECK-NEXT:   br label %sliceclone_BB_13
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_13:                                 ; preds = %sliceclone_BB_11, %sliceclone_BB_12
; CHECK-NEXT:   %18 = phi i32 [ %15, %sliceclone_BB_11 ], [ %17, %sliceclone_BB_12 ]
; CHECK-NEXT:   %19 = shl i32 %18, 16
; CHECK-NEXT:   ret i32 %19
; CHECK-NEXT: }
; CHECK-EMPTY:
; CHECK-NEXT: ; Function Attrs: noinline nounwind optsize willreturn
; CHECK-NEXT: define internal i32 @_daedalus_slice_getUnknown__[[ID:[0-9]+]](i8 %0) #4 {
; CHECK-NEXT: sliceclone_BB_13:
; CHECK-NEXT:   %1 = sext i8 %0 to i32
; CHECK-NEXT:   %2 = call i32 @_daedalus_slice_getUnknown__[[ID:[0-9]+]]()
; CHECK-NEXT:   %3 = ashr exact i32 %2, 24
; CHECK-NEXT:   %4 = add nsw i32 %3, %1
; CHECK-NEXT:   ret i32 %4
; CHECK-NEXT: }
; CHECK-EMPTY:
; CHECK-NEXT: ; Function Attrs: noinline nounwind optsize willreturn
; CHECK-NEXT: define internal i32 @_daedalus_slice_getUnknown__[[ID:[0-9]+]](i8 %0) #4 {
; CHECK-NEXT: sliceclone_BB_13:
; CHECK-NEXT:   %1 = call i32 @_daedalus_slice_getUnknown__[[ID:[0-9]+]]()
; CHECK-NEXT:   %2 = ashr exact i32 %1, 24
; CHECK-NEXT:   %3 = call i32 @_daedalus_slice_getUnknown__[[ID:[0-9]+]](i8 %0)
; CHECK-NEXT:   %4 = add nsw i32 %3, %2
; CHECK-NEXT:   ret i32 %4
; CHECK-NEXT: }
; CHECK-EMPTY:
; CHECK-NEXT: ; Function Attrs: noinline nounwind optsize willreturn
; CHECK-NEXT: define internal i32 @_daedalus_slice_getUnknown__[[ID:[0-9]+]](i8 %0) #4 {
; CHECK-NEXT: sliceclone_BB_13:
; CHECK-NEXT:   %1 = call i32 @_daedalus_slice_getUnknown__[[ID:[0-9]+]]()
; CHECK-NEXT:   %2 = ashr exact i32 %1, 16
; CHECK-NEXT:   %3 = call i32 @_daedalus_slice_getUnknown__[[ID:[0-9]+]](i8 %0)
; CHECK-NEXT:   %4 = add nsw i32 %3, %2
; CHECK-NEXT:   ret i32 %4
; CHECK-NEXT: }
; CHECK-EMPTY:
; CHECK-NEXT: ; Function Attrs: noinline nounwind optsize willreturn
; CHECK-NEXT: define internal i32 @_daedalus_slice_getUnknown__[[ID:[0-9]+]](i8 %0) #4 {
; CHECK-NEXT: sliceclone_BB_13:
; CHECK-NEXT:   %1 = call i32 @_daedalus_slice_getUnknown__[[ID:[0-9]+]]()
; CHECK-NEXT:   %2 = ashr exact i32 %1, 16
; CHECK-NEXT:   %3 = call i32 @_daedalus_slice_getUnknown__[[ID:[0-9]+]](i8 %0)
; CHECK-NEXT:   %4 = add nsw i32 %3, %2
; CHECK-NEXT:   ret i32 %4
; CHECK-NEXT: }
; CHECK-EMPTY:
; CHECK-NEXT: ; Function Attrs: noinline nounwind optsize willreturn
; CHECK-NEXT: define internal i32 @_daedalus_slice_getUnknown__[[ID:[0-9]+]](i8 %0) #4 {
; CHECK-NEXT: sliceclone_BB_13:
; CHECK-NEXT:   %1 = call i32 @_daedalus_slice_getUnknown__[[ID:[0-9]+]]()
; CHECK-NEXT:   %2 = ashr exact i32 %1, 16
; CHECK-NEXT:   %3 = call i32 @_daedalus_slice_getUnknown__[[ID:[0-9]+]](i8 %0)
; CHECK-NEXT:   %4 = add nsw i32 %3, %2
; CHECK-NEXT:   ret i32 %4
; CHECK-NEXT: }
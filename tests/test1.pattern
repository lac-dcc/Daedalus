; CHECK: ; Function Attrs: nofree nounwind optsize uwtable
; CHECK-NEXT: define dso_local i32 @main(i32 noundef %0, ptr nocapture noundef readnone %1) #0 {
; CHECK-NEXT: BB_0:
; CHECK-NEXT:   %2 = icmp sgt i32 %0, 0
; CHECK-NEXT:   br i1 %2, label %BB_1, label %BB_2
; CHECK-EMPTY: 
; CHECK-NEXT: BB_1:                                             ; preds = %BB_0
; CHECK-NEXT:   %3 = add i32 %0, 1
; CHECK-NEXT:   %4 = add i32 %0, 1
; CHECK-NEXT:   br label %BB_3
; CHECK-EMPTY: 
; CHECK-NEXT: BB_2:                                             ; preds = %BB_3, %BB_0
; CHECK-NEXT:   %5 = phi i32 [ 0, %BB_0 ], [ %13, %BB_3 ]
; CHECK-NEXT:   %6 = phi i32 [ 0, %BB_0 ], [ %15, %BB_3 ]
; CHECK-NEXT:   %7 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %5) #2
; CHECK-NEXT:   %8 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %6) #2
; CHECK-NEXT:   ret i32 0
; CHECK-EMPTY: 
; CHECK-NEXT: BB_3:                                             ; preds = %BB_3, %BB_1
; CHECK-NEXT:   %9 = phi i32 [ %16, %BB_3 ], [ 0, %BB_1 ]
; CHECK-NEXT:   %10 = phi i32 [ %15, %BB_3 ], [ 0, %BB_1 ]
; CHECK-NEXT:   %11 = phi i32 [ %13, %BB_3 ], [ 0, %BB_1 ]
; CHECK-NEXT:   %12 = add i32 %11, 1
; CHECK-NEXT:   %13 = mul i32 %12, %3
; CHECK-NEXT:   %14 = add i32 %10, 1
; CHECK-NEXT:   %15 = mul i32 %14, %4
; CHECK-NEXT:   %16 = add nuw nsw i32 %9, 1
; CHECK-NEXT:   %17 = icmp eq i32 %16, %0
; CHECK-NEXT:   br i1 %17, label %BB_2, label %BB_3, !llvm.loop !7
; CHECK-NEXT: }
; CHECK: ; Function Attrs: noinline nounwind optsize willreturn
; CHECK-NEXT: define internal i64 @_daedalus_slice_main__[[ID:[0-9]+]](i32 %0, ptr %1) #6 {
; CHECK-NEXT: sliceclone_BB_0:
; CHECK-NEXT:   %2 = icmp sgt i32 %0, 1
; CHECK-NEXT:   br i1 %2, label %sliceclone_BB_1, label %sliceclone_BB_12
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_1:                                  ; preds = %sliceclone_BB_11, %sliceclone_BB_0
; CHECK-NEXT:   %3 = phi i32 [ %12, %sliceclone_BB_11 ], [ 1, %sliceclone_BB_0 ]
; CHECK-NEXT:   %4 = phi i32 [ %11, %sliceclone_BB_11 ], [ 196, %sliceclone_BB_0 ]
; CHECK-NEXT:   %5 = sext i32 %3 to i64
; CHECK-NEXT:   %6 = getelementptr inbounds ptr, ptr %1, i64 %5
; CHECK-NEXT:   %7 = load ptr, ptr %6, align 8, !tbaa !7
; CHECK-NEXT:   br label %sliceclone_BB_4
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_12:                                 ; preds = %sliceclone_BB_11, %sliceclone_BB_0
; CHECK-NEXT:   %8 = phi i32 [ 196, %sliceclone_BB_0 ], [ %11, %sliceclone_BB_11 ]
; CHECK-NEXT:   %9 = sext i32 %8 to i64
; CHECK-NEXT:   %10 = shl nsw i64 %9, 3
; CHECK-NEXT:   ret i64 %10
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_11:                                 ; preds = %sliceclone_BB_9, %sliceclone_BB_8, %sliceclone_BB_7, %sliceclone_BB_6, %sliceclone_BB_5, %sliceclone_BB_4, %sliceclone_BB_4
; CHECK-NEXT:   %11 = phi i32 [ %4, %sliceclone_BB_9 ], [ %25, %sliceclone_BB_8 ], [ %4, %sliceclone_BB_7 ], [ %4, %sliceclone_BB_6 ], [ %4, %sliceclone_BB_5 ], [ %4, %sliceclone_BB_4 ], [ %4, %sliceclone_BB_4 ]
; CHECK-NEXT:   %12 = phi i32 [ %26, %sliceclone_BB_9 ], [ %21, %sliceclone_BB_8 ], [ %20, %sliceclone_BB_7 ], [ %19, %sliceclone_BB_6 ], [ %18, %sliceclone_BB_5 ], [ %16, %sliceclone_BB_4 ], [ %16, %sliceclone_BB_4 ]
; CHECK-NEXT:   %13 = icmp slt i32 %12, %0
; CHECK-NEXT:   br i1 %13, label %sliceclone_BB_1, label %sliceclone_BB_12, !llvm.loop !14
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_4:                                  ; preds = %sliceclone_BB_1
; CHECK-NEXT:   %14 = getelementptr inbounds i8, ptr %7, i64 1
; CHECK-NEXT:   %15 = load i8, ptr %14, align 1, !tbaa !11
; CHECK-NEXT:   %16 = add nsw i32 %3, 1
; CHECK-NEXT:   %17 = sext i8 %15 to i32
; CHECK-NEXT:   switch i32 %17, label %_daedalus_unreachable [
; CHECK-NEXT:     i32 100, label %sliceclone_BB_11
; CHECK-NEXT:     i32 103, label %sliceclone_BB_5
; CHECK-NEXT:     i32 105, label %sliceclone_BB_6
; CHECK-NEXT:     i32 108, label %sliceclone_BB_7
; CHECK-NEXT:     i32 110, label %sliceclone_BB_8
; CHECK-NEXT:     i32 115, label %sliceclone_BB_9
; CHECK-NEXT:     i32 116, label %sliceclone_BB_11
; CHECK-NEXT:   ]
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_5:                                  ; preds = %sliceclone_BB_4
; CHECK-NEXT:   %18 = add nsw i32 %3, 2
; CHECK-NEXT:   br label %sliceclone_BB_11
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_6:                                  ; preds = %sliceclone_BB_4
; CHECK-NEXT:   %19 = add nsw i32 %3, 2
; CHECK-NEXT:   br label %sliceclone_BB_11
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_7:                                  ; preds = %sliceclone_BB_4
; CHECK-NEXT:   %20 = add nsw i32 %3, 2
; CHECK-NEXT:   br label %sliceclone_BB_11
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_8:                                  ; preds = %sliceclone_BB_4
; CHECK-NEXT:   %21 = add nsw i32 %3, 2
; CHECK-NEXT:   %22 = sext i32 %16 to i64
; CHECK-NEXT:   %23 = getelementptr inbounds ptr, ptr %1, i64 %22
; CHECK-NEXT:   %24 = load ptr, ptr %23, align 8, !tbaa !7
; CHECK-NEXT:   %25 = tail call i32 @atoi(ptr nocapture noundef %24) #8
; CHECK-NEXT:   br label %sliceclone_BB_11
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_9:                                  ; preds = %sliceclone_BB_4
; CHECK-NEXT:   %26 = add nsw i32 %3, 2
; CHECK-NEXT:   br label %sliceclone_BB_11
; CHECK-EMPTY:
; CHECK-NEXT: _daedalus_unreachable:                            ; preds = %sliceclone_BB_4
; CHECK-NEXT:   unreachable
; CHECK-NEXT: }
; CHECK-EMPTY:
; CHECK-NEXT: ; Function Attrs: noinline nounwind optsize willreturn
; CHECK-NEXT: define internal i64 @_daedalus_slice_main__[[ID:[0-9]+]](i32 %0, ptr %1) #6 {
; CHECK-NEXT: sliceclone_BB_0:
; CHECK-NEXT:   %2 = icmp sgt i32 %0, 1
; CHECK-NEXT:   br i1 %2, label %sliceclone_BB_1, label %sliceclone_BB_12
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_1:                                  ; preds = %sliceclone_BB_11, %sliceclone_BB_0
; CHECK-NEXT:   %3 = phi i32 [ %10, %sliceclone_BB_11 ], [ 1, %sliceclone_BB_0 ]
; CHECK-NEXT:   %4 = phi i32 [ %9, %sliceclone_BB_11 ], [ 196, %sliceclone_BB_0 ]
; CHECK-NEXT:   %5 = sext i32 %3 to i64
; CHECK-NEXT:   %6 = getelementptr inbounds ptr, ptr %1, i64 %5
; CHECK-NEXT:   %7 = load ptr, ptr %6, align 8, !tbaa !7
; CHECK-NEXT:   br label %sliceclone_BB_4
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_12:                                 ; preds = %sliceclone_BB_11, %sliceclone_BB_0
; CHECK-NEXT:   %8 = phi i32 [ 196, %sliceclone_BB_0 ], [ %9, %sliceclone_BB_11 ]
; CHECK-NEXT:   br label %sliceclone_BB_13
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_11:                                 ; preds = %sliceclone_BB_9, %sliceclone_BB_8, %sliceclone_BB_7, %sliceclone_BB_6, %sliceclone_BB_5, %sliceclone_BB_4, %sliceclone_BB_4
; CHECK-NEXT:   %9 = phi i32 [ %4, %sliceclone_BB_9 ], [ %23, %sliceclone_BB_8 ], [ %4, %sliceclone_BB_7 ], [ %4, %sliceclone_BB_6 ], [ %4, %sliceclone_BB_5 ], [ %4, %sliceclone_BB_4 ], [ %4, %sliceclone_BB_4 ]
; CHECK-NEXT:   %10 = phi i32 [ %24, %sliceclone_BB_9 ], [ %19, %sliceclone_BB_8 ], [ %18, %sliceclone_BB_7 ], [ %17, %sliceclone_BB_6 ], [ %16, %sliceclone_BB_5 ], [ %14, %sliceclone_BB_4 ], [ %14, %sliceclone_BB_4 ]
; CHECK-NEXT:   %11 = icmp slt i32 %10, %0
; CHECK-NEXT:   br i1 %11, label %sliceclone_BB_1, label %sliceclone_BB_12, !llvm.loop !14
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_4:                                  ; preds = %sliceclone_BB_1
; CHECK-NEXT:   %12 = getelementptr inbounds i8, ptr %7, i64 1
; CHECK-NEXT:   %13 = load i8, ptr %12, align 1, !tbaa !11
; CHECK-NEXT:   %14 = add nsw i32 %3, 1
; CHECK-NEXT:   %15 = sext i8 %13 to i32
; CHECK-NEXT:   switch i32 %15, label %_daedalus_unreachable [
; CHECK-NEXT:     i32 100, label %sliceclone_BB_11
; CHECK-NEXT:     i32 103, label %sliceclone_BB_5
; CHECK-NEXT:     i32 105, label %sliceclone_BB_6
; CHECK-NEXT:     i32 108, label %sliceclone_BB_7
; CHECK-NEXT:     i32 110, label %sliceclone_BB_8
; CHECK-NEXT:     i32 115, label %sliceclone_BB_9
; CHECK-NEXT:     i32 116, label %sliceclone_BB_11
; CHECK-NEXT:   ]
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_5:                                  ; preds = %sliceclone_BB_4
; CHECK-NEXT:   %16 = add nsw i32 %3, 2
; CHECK-NEXT:   br label %sliceclone_BB_11
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_6:                                  ; preds = %sliceclone_BB_4
; CHECK-NEXT:   %17 = add nsw i32 %3, 2
; CHECK-NEXT:   br label %sliceclone_BB_11
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_7:                                  ; preds = %sliceclone_BB_4
; CHECK-NEXT:   %18 = add nsw i32 %3, 2
; CHECK-NEXT:   br label %sliceclone_BB_11
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_8:                                  ; preds = %sliceclone_BB_4
; CHECK-NEXT:   %19 = add nsw i32 %3, 2
; CHECK-NEXT:   %20 = sext i32 %14 to i64
; CHECK-NEXT:   %21 = getelementptr inbounds ptr, ptr %1, i64 %20
; CHECK-NEXT:   %22 = load ptr, ptr %21, align 8, !tbaa !7
; CHECK-NEXT:   %23 = tail call i32 @atoi(ptr nocapture noundef %22) #8
; CHECK-NEXT:   br label %sliceclone_BB_11
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_9:                                  ; preds = %sliceclone_BB_4
; CHECK-NEXT:   %24 = add nsw i32 %3, 2
; CHECK-NEXT:   br label %sliceclone_BB_11
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_13:                                 ; preds = %sliceclone_BB_12
; CHECK-NEXT:   %25 = zext i32 %8 to i64
; CHECK-NEXT:   %26 = shl nuw nsw i64 %25, 3
; CHECK-NEXT:   ret i64 %26
; CHECK-EMPTY:
; CHECK-NEXT: _daedalus_unreachable:                            ; preds = %sliceclone_BB_4
; CHECK-NEXT:   unreachable
; CHECK-NEXT: }
; CHECK-EMPTY:
; CHECK-NEXT: ; Function Attrs: noinline nounwind optsize willreturn
; CHECK-NEXT: define internal i32 @_daedalus_slice_main__[[ID:[0-9]+]](i32 %0, ptr %1) #6 {
; CHECK-NEXT: sliceclone_BB_26:
; CHECK-NEXT:   %2 = getelementptr inbounds %struct.element, ptr %1, i64 0, i32 1
; CHECK-NEXT:   %3 = load i32, ptr %2, align 8, !tbaa !18
; CHECK-NEXT:   %4 = add nsw i32 %3, %0
; CHECK-NEXT:   ret i32 %4
; CHECK-NEXT: }
; CHECK-EMPTY:
; CHECK-NEXT: ; Function Attrs: noinline nounwind optsize willreturn
; CHECK-NEXT: define internal i32 @_daedalus_slice_main__[[ID:[0-9]+]](ptr %0) #6 {
; CHECK-NEXT: sliceclone_BB_26:
; CHECK-NEXT:   %1 = getelementptr inbounds %struct.element, ptr %0, i64 0, i32 1
; CHECK-NEXT:   %2 = load i32, ptr %1, align 8, !tbaa !18
; CHECK-NEXT:   %3 = add nsw i32 %2, 1
; CHECK-NEXT:   ret i32 %3
; CHECK-NEXT: }
; CHECK: ; Function Attrs: noinline nounwind optsize willreturn
; CHECK-NEXT: define internal i32 @_daedalus_slice_main__[[ID:[0-9]+]](i64 %0, i64 %1) #9 {
; CHECK-NEXT: sliceclone_BB_2:
; CHECK-NEXT:   %2 = mul nuw nsw i64 %0, %1
; CHECK-NEXT:   %3 = trunc i64 %2 to i32
; CHECK-NEXT:   %4 = and i32 %3, 1
; CHECK-NEXT:   ret i32 %4
; CHECK-NEXT: }
; CHECK-EMPTY:
; CHECK: ; Function Attrs: noinline nounwind optsize willreturn
; CHECK-NEXT: define internal i32 @_daedalus_slice_main__[[ID:[0-9]+]](i64 %0, i64 %1) #9 {
; CHECK-NEXT: sliceclone_BB_2:
; CHECK-NEXT:   %2 = sub nsw i64 %0, %1
; CHECK-NEXT:   %3 = trunc i64 %2 to i32
; CHECK-NEXT:   %4 = sdiv i32 %3, 50
; CHECK-NEXT:   ret i32 %4
; CHECK-NEXT: }
; CHECK-EMPTY:
; CHECK: ; Function Attrs: noinline nounwind optsize willreturn
; CHECK-NEXT: define internal i32 @_daedalus_slice_main__[[ID:[0-9]+]](i64 %0, i64 %1) #9 {
; CHECK-NEXT: sliceclone_BB_6:
; CHECK-NEXT:   %2 = mul nuw nsw i64 %0, %1
; CHECK-NEXT:   %3 = trunc i64 %2 to i32
; CHECK-NEXT:   %4 = and i32 %3, 1
; CHECK-NEXT:   ret i32 %4
; CHECK-NEXT: }
; CHECK-EMPTY:
; CHECK: ; Function Attrs: noinline nounwind optsize willreturn
; CHECK-NEXT: define internal i32 @_daedalus_slice_main__[[ID:[0-9]+]](i64 %0, i64 %1) #9 {
; CHECK-NEXT: sliceclone_BB_6:
; CHECK-NEXT:   %2 = sub nsw i64 %0, %1
; CHECK-NEXT:   %3 = trunc i64 %2 to i32
; CHECK-NEXT:   %4 = sdiv i32 %3, 50
; CHECK-NEXT:   ret i32 %4
; CHECK-NEXT: }
; CHECK-EMPTY:
; CHECK: ; Function Attrs: noinline nounwind optsize willreturn
; CHECK-NEXT: define internal double @_daedalus_slice_main__[[ID:[0-9]+]]() #9 {
; CHECK-NEXT: sliceclone_BB_0:
; CHECK-NEXT:   %0 = alloca i32, align 4
; CHECK-NEXT:   %1 = alloca i32, align 4
; CHECK-NEXT:   br label %sliceclone_BB_8
; CHECK-EMPTY:
; CHECK-NEXT: sliceclone_BB_8:                                  ; preds = %sliceclone_BB_0
; CHECK-NEXT:   %2 = load i32, ptr %0, align 4, !tbaa !11
; CHECK-NEXT:   %3 = load i32, ptr %1, align 4, !tbaa !11
; CHECK-NEXT:   %4 = sitofp i32 %2 to double
; CHECK-NEXT:   %5 = sitofp i32 %3 to double
; CHECK-NEXT:   %6 = fsub double %4, %5
; CHECK-NEXT:   ret double %6
; CHECK-NEXT: }
; CHECK-EMPTY:
; CHECK: ; Function Attrs: noinline nounwind optsize willreturn
; CHECK-NEXT: define internal i32 @_daedalus_slice_kernel_dynprog__[[ID:[0-9]+]](ptr %0, i32 %1, i64 %2, i64 %3) #9 {
; CHECK-NEXT: sliceclone_BB_6:
; CHECK-NEXT:   %4 = getelementptr inbounds [50 x i32], ptr %0, i64 %2, i64 %3
; CHECK-NEXT:   %5 = load i32, ptr %4, align 4, !tbaa !11
; CHECK-NEXT:   %6 = add nsw i32 %5, %1
; CHECK-NEXT:   ret i32 %6
; CHECK-NEXT: }
; CHECK-EMPTY:
; CHECK: ; Function Attrs: noinline nounwind optsize willreturn
; CHECK-NEXT: define internal i32 @_daedalus_slice_kernel_dynprog__[[ID:[0-9]+]](ptr %0, i32 %1, i64 %2, i64 %3, i64 %4) #9 {
; CHECK-NEXT: sliceclone_BB_6:
; CHECK-NEXT:   %5 = call i32 @_daedalus_slice_kernel_dynprog__[[ID:[0-9]+]](ptr %0, i32 %1, i64 %2, i64 %3)
; CHECK-NEXT:   %6 = getelementptr inbounds [50 x i32], ptr %0, i64 %3, i64 %4
; CHECK-NEXT:   %7 = load i32, ptr %6, align 4, !tbaa !11
; CHECK-NEXT:   %8 = add nsw i32 %5, %7
; CHECK-NEXT:   ret i32 %8
; CHECK-NEXT: }
; CHECK-EMPTY:
; CHECK: ; Function Attrs: noinline nounwind optsize willreturn
; CHECK-NEXT: define internal i32 @_daedalus_slice_kernel_dynprog__[[ID:[0-9]+]](ptr %0, ptr %1, i64 %2, i64 %3) #9 {
; CHECK-NEXT: sliceclone_BB_7:
; CHECK-NEXT:   %4 = add nsw i64 %3, -1
; CHECK-NEXT:   %5 = getelementptr inbounds [50 x [50 x i32]], ptr %1, i64 %2, i64 %3, i64 %4
; CHECK-NEXT:   %6 = load i32, ptr %5, align 4, !tbaa !11
; CHECK-NEXT:   %7 = getelementptr inbounds [50 x i32], ptr %0, i64 %2, i64 %3
; CHECK-NEXT:   %8 = load i32, ptr %7, align 4, !tbaa !11
; CHECK-NEXT:   %9 = add nsw i32 %8, %6
; CHECK-NEXT:   ret i32 %9
; CHECK-NEXT: }
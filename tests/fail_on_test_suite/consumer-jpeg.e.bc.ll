; ModuleID = '/src/llvm-test-suite/build/MultiSource/Benchmarks/MiBench/consumer-jpeg/consumer-jpeg.e.bc'
source_filename = "ld-temp.o"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.jpeg_decompress_struct = type { ptr, ptr, ptr, i32, i32, ptr, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, i32, i32, i32, i32, i32, ptr, [4 x ptr], [4 x ptr], [4 x ptr], i32, ptr, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i16, i16, i32, i8, i32, i32, i32, i32, i32, ptr, i32, [4 x ptr], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.jpeg_error_mgr = type { ptr, ptr, ptr, ptr, ptr, i32, %union.anon, i32, i64, ptr, i32, ptr, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.djpeg_dest_struct = type { ptr, ptr, ptr, ptr, ptr, i32 }
%struct.jpeg_memory_mgr = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i64 }
%struct.jpeg_source_mgr = type { ptr, i64, ptr, ptr, ptr, ptr, ptr }
%struct.jpeg_common_struct = type { ptr, ptr, ptr, i32, i32 }
%struct.JQUANT_TBL.58 = type { [64 x i16], i32 }
%struct.JHUFF_TBL.59 = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_marker_reader = type { ptr, ptr, ptr, ptr, [16 x ptr], i32, i32, i32, i32 }
%struct.jpeg_input_controller = type { ptr, ptr, ptr, ptr, i32, i32 }
%struct.jpeg_component_info.102 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr }
%struct.jpeg_decomp_master = type { ptr, ptr, i32 }
%struct.jpeg_progress_mgr.105 = type { ptr, i64, i64, i32, i32 }
%struct.jpeg_d_main_controller = type { ptr, ptr }
%struct.my_source_mgr = type { %struct.jpeg_source_mgr, ptr, ptr, i32 }
%struct.jpeg_d_coef_controller.118 = type { ptr, ptr, ptr, ptr, ptr }
%struct.my_coef_controller.119 = type { %struct.jpeg_d_coef_controller.118, i32, i32, i32, [10 x ptr], [10 x ptr], ptr }
%struct.jpeg_inverse_dct = type { ptr, [10 x ptr] }
%struct.my_color_deconverter = type { %struct.jpeg_d_main_controller, ptr, ptr, ptr, ptr }
%struct.my_idct_controller = type { %struct.jpeg_inverse_dct, [10 x i32] }
%struct.d_derived_tbl = type { [17 x i64], [18 x i64], [17 x i32], ptr, [256 x i32], [256 x i8] }
%struct.bitread_working_state = type { ptr, i64, i32, i64, i32, ptr, ptr }
%struct.huff_entropy_decoder = type { %struct.jpeg_d_main_controller, %struct.bitread_perm_state, %struct.savable_state.138, i32, [4 x ptr], [4 x ptr] }
%struct.bitread_perm_state = type { i64, i32, i32 }
%struct.savable_state.138 = type { [4 x i32] }
%struct.my_input_controller = type { %struct.jpeg_input_controller, i32 }
%struct.my_main_controller.152 = type { %struct.jpeg_d_main_controller, [10 x ptr], i32, i32, [2 x ptr], i32, i32, i32, i32 }
%struct.my_decomp_master = type { %struct.jpeg_decomp_master, i32, i32, ptr, ptr }
%struct.jpeg_color_quantizer = type { ptr, ptr, ptr, ptr }
%struct.my_upsampler = type { %struct.jpeg_decomp_master, ptr, ptr, ptr, ptr, ptr, ptr, i32, i32, i32 }
%struct.phuff_entropy_decoder = type { %struct.jpeg_d_main_controller, %struct.bitread_perm_state, %struct.savable_state.181, i32, [4 x ptr], ptr }
%struct.savable_state.181 = type { i32, [4 x i32] }
%struct.my_post_controller = type { %struct.jpeg_d_main_controller, ptr, ptr, i32, i32, i32 }
%struct.my_upsampler.198 = type { %struct.jpeg_decomp_master, [10 x ptr], [10 x ptr], i32, i32, [10 x i32], [10 x i8], [10 x i8] }
%struct.my_memory_mgr = type { %struct.jpeg_memory_mgr, [2 x ptr], [2 x ptr], ptr, ptr, i64, i32 }
%struct.anon.0 = type { ptr, i64, i64 }
%union.large_pool_struct = type { %struct.anon.0 }
%struct.jvirt_sarray_control = type { ptr, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, %struct.backing_store_struct }
%struct.backing_store_struct = type { ptr, ptr, ptr, ptr, [64 x i8] }
%struct.my_cquantizer = type { %struct.jpeg_color_quantizer, ptr, i32, ptr, i32, [4 x i32], i32, [4 x ptr], [4 x ptr], i32 }
%struct.my_cquantizer.231 = type { %struct.jpeg_color_quantizer, ptr, i32, ptr, i32, ptr, i32, ptr }
%struct.box = type { i32, i32, i32, i32, i32, i32, i64, i64 }
%struct.bmp_dest_struct = type { %struct.djpeg_dest_struct, i32, ptr, i32, i32, i32, i32 }
%struct.cdjpeg_progress_mgr = type { %struct.jpeg_progress_mgr.105, i32, i32, i32 }
%struct.gif_dest_struct = type { %struct.djpeg_dest_struct, ptr, i32, i16, i32, i64, i32, i16, i32, i16, i16, i16, ptr, ptr, i32, [256 x i8] }
%struct.ppm_dest_struct = type { %struct.djpeg_dest_struct, ptr, ptr, i64, i32 }
%struct.tga_dest_struct = type { %struct.djpeg_dest_struct, ptr, i32 }

@progname = internal unnamed_addr global ptr null, align 8
@.str = private unnamed_addr constant [6 x i8] c"djpeg\00", align 1
@cdjpeg_message_table = internal constant [44 x ptr] [ptr null, ptr @.str.5, ptr @.str.6, ptr @.str.7, ptr @.str.8, ptr @.str.9, ptr @.str.10, ptr @.str.11, ptr @.str.12, ptr @.str.13, ptr @.str.14, ptr @.str.15, ptr @.str.16, ptr @.str.17, ptr @.str.18, ptr @.str.19, ptr @.str.20, ptr @.str.21, ptr @.str.22, ptr @.str.23, ptr @.str.24, ptr @.str.25, ptr @.str.26, ptr @.str.27, ptr @.str.28, ptr @.str.29, ptr @.str.30, ptr @.str.31, ptr @.str.32, ptr @.str.33, ptr @.str.34, ptr @.str.35, ptr @.str.36, ptr @.str.37, ptr @.str.38, ptr @.str.39, ptr @.str.40, ptr @.str.41, ptr @.str.42, ptr @.str.43, ptr @.str.44, ptr @.str.45, ptr @.str.46, ptr null], align 16
@.str.1 = private unnamed_addr constant [25 x i8] c"%s: only one input file\0A\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@.str.3 = private unnamed_addr constant [19 x i8] c"%s: can't open %s\0A\00", align 1
@outfilename = internal unnamed_addr global ptr null, align 8
@.str.4 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@requested_fmt = internal unnamed_addr global i32 0, align 4
@stdin = external local_unnamed_addr global ptr, align 8
@stdout = external local_unnamed_addr global ptr, align 8
@.str.5 = private unnamed_addr constant [32 x i8] c"Unsupported BMP colormap format\00", align 1
@.str.6 = private unnamed_addr constant [43 x i8] c"Only 8- and 24-bit BMP files are supported\00", align 1
@.str.7 = private unnamed_addr constant [36 x i8] c"Invalid BMP file: bad header length\00", align 1
@.str.8 = private unnamed_addr constant [42 x i8] c"Invalid BMP file: biPlanes not equal to 1\00", align 1
@.str.9 = private unnamed_addr constant [36 x i8] c"BMP output must be grayscale or RGB\00", align 1
@.str.10 = private unnamed_addr constant [41 x i8] c"Sorry, compressed BMPs not yet supported\00", align 1
@.str.11 = private unnamed_addr constant [40 x i8] c"Not a BMP file - does not start with BM\00", align 1
@.str.12 = private unnamed_addr constant [23 x i8] c"%ux%u 24-bit BMP image\00", align 1
@.str.13 = private unnamed_addr constant [34 x i8] c"%ux%u 8-bit colormapped BMP image\00", align 1
@.str.14 = private unnamed_addr constant [27 x i8] c"%ux%u 24-bit OS2 BMP image\00", align 1
@.str.15 = private unnamed_addr constant [38 x i8] c"%ux%u 8-bit colormapped OS2 BMP image\00", align 1
@.str.16 = private unnamed_addr constant [24 x i8] c"GIF output got confused\00", align 1
@.str.17 = private unnamed_addr constant [22 x i8] c"Bogus GIF codesize %d\00", align 1
@.str.18 = private unnamed_addr constant [36 x i8] c"GIF output must be grayscale or RGB\00", align 1
@.str.19 = private unnamed_addr constant [27 x i8] c"Too few images in GIF file\00", align 1
@.str.20 = private unnamed_addr constant [15 x i8] c"Not a GIF file\00", align 1
@.str.21 = private unnamed_addr constant [19 x i8] c"%ux%ux%d GIF image\00", align 1
@.str.22 = private unnamed_addr constant [48 x i8] c"Warning: unexpected GIF version number '%c%c%c'\00", align 1
@.str.23 = private unnamed_addr constant [44 x i8] c"Ignoring GIF extension block of type 0x%02x\00", align 1
@.str.24 = private unnamed_addr constant [35 x i8] c"Caution: nonsquare pixels in input\00", align 1
@.str.25 = private unnamed_addr constant [25 x i8] c"Corrupt data in GIF file\00", align 1
@.str.26 = private unnamed_addr constant [40 x i8] c"Bogus char 0x%02x in GIF file, ignoring\00", align 1
@.str.27 = private unnamed_addr constant [27 x i8] c"Premature end of GIF image\00", align 1
@.str.28 = private unnamed_addr constant [20 x i8] c"Ran out of GIF bits\00", align 1
@.str.29 = private unnamed_addr constant [36 x i8] c"PPM output must be grayscale or RGB\00", align 1
@.str.30 = private unnamed_addr constant [28 x i8] c"Nonnumeric data in PPM file\00", align 1
@.str.31 = private unnamed_addr constant [15 x i8] c"Not a PPM file\00", align 1
@.str.32 = private unnamed_addr constant [16 x i8] c"%ux%u PGM image\00", align 1
@.str.33 = private unnamed_addr constant [21 x i8] c"%ux%u text PGM image\00", align 1
@.str.34 = private unnamed_addr constant [16 x i8] c"%ux%u PPM image\00", align 1
@.str.35 = private unnamed_addr constant [21 x i8] c"%ux%u text PPM image\00", align 1
@.str.36 = private unnamed_addr constant [34 x i8] c"Unsupported Targa colormap format\00", align 1
@.str.37 = private unnamed_addr constant [34 x i8] c"Invalid or unsupported Targa file\00", align 1
@.str.38 = private unnamed_addr constant [38 x i8] c"Targa output must be grayscale or RGB\00", align 1
@.str.39 = private unnamed_addr constant [22 x i8] c"%ux%u RGB Targa image\00", align 1
@.str.40 = private unnamed_addr constant [28 x i8] c"%ux%u grayscale Targa image\00", align 1
@.str.41 = private unnamed_addr constant [30 x i8] c"%ux%u colormapped Targa image\00", align 1
@.str.42 = private unnamed_addr constant [51 x i8] c"Color map file is invalid or of unsupported format\00", align 1
@.str.43 = private unnamed_addr constant [53 x i8] c"Output file format cannot handle %d colormap entries\00", align 1
@.str.44 = private unnamed_addr constant [14 x i8] c"ungetc failed\00", align 1
@.str.45 = private unnamed_addr constant [59 x i8] c"Unrecognized input file format --- perhaps you need -targa\00", align 1
@.str.46 = private unnamed_addr constant [31 x i8] c"Unsupported output file format\00", align 1
@.str.47 = private unnamed_addr constant [22 x i8] c"Comment, length %ld:\0A\00", align 1
@.str.49 = private unnamed_addr constant [3 x i8] c"\\\\\00", align 1
@.str.50 = private unnamed_addr constant [6 x i8] c"\\%03o\00", align 1
@.str.51 = private unnamed_addr constant [4 x i8] c"bmp\00", align 1
@.str.52 = private unnamed_addr constant [7 x i8] c"colors\00", align 1
@.str.53 = private unnamed_addr constant [8 x i8] c"colours\00", align 1
@.str.54 = private unnamed_addr constant [9 x i8] c"quantize\00", align 1
@.str.55 = private unnamed_addr constant [9 x i8] c"quantise\00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.57 = private unnamed_addr constant [4 x i8] c"dct\00", align 1
@.str.58 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@.str.59 = private unnamed_addr constant [5 x i8] c"fast\00", align 1
@.str.60 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.61 = private unnamed_addr constant [7 x i8] c"dither\00", align 1
@.str.62 = private unnamed_addr constant [3 x i8] c"fs\00", align 1
@.str.63 = private unnamed_addr constant [5 x i8] c"none\00", align 1
@.str.64 = private unnamed_addr constant [8 x i8] c"ordered\00", align 1
@.str.65 = private unnamed_addr constant [6 x i8] c"debug\00", align 1
@.str.66 = private unnamed_addr constant [8 x i8] c"verbose\00", align 1
@parse_switches.printed_version = internal unnamed_addr global i1 false, align 4
@.str.67 = private unnamed_addr constant [47 x i8] c"Independent JPEG Group's DJPEG, version %s\0A%s\0A\00", align 1
@.str.68 = private unnamed_addr constant [13 x i8] c"6a  7-Feb-96\00", align 1
@.str.69 = private unnamed_addr constant [35 x i8] c"Copyright (C) 1996, Thomas G. Lane\00", align 1
@.str.70 = private unnamed_addr constant [4 x i8] c"gif\00", align 1
@.str.71 = private unnamed_addr constant [10 x i8] c"grayscale\00", align 1
@.str.72 = private unnamed_addr constant [10 x i8] c"greyscale\00", align 1
@.str.73 = private unnamed_addr constant [4 x i8] c"map\00", align 1
@.str.74 = private unnamed_addr constant [10 x i8] c"maxmemory\00", align 1
@.str.75 = private unnamed_addr constant [6 x i8] c"%ld%c\00", align 1
@.str.76 = private unnamed_addr constant [9 x i8] c"nosmooth\00", align 1
@.str.77 = private unnamed_addr constant [8 x i8] c"onepass\00", align 1
@.str.78 = private unnamed_addr constant [4 x i8] c"os2\00", align 1
@.str.79 = private unnamed_addr constant [8 x i8] c"outfile\00", align 1
@.str.80 = private unnamed_addr constant [4 x i8] c"pnm\00", align 1
@.str.81 = private unnamed_addr constant [4 x i8] c"ppm\00", align 1
@.str.82 = private unnamed_addr constant [4 x i8] c"rle\00", align 1
@.str.83 = private unnamed_addr constant [6 x i8] c"scale\00", align 1
@.str.84 = private unnamed_addr constant [6 x i8] c"%d/%d\00", align 1
@.str.85 = private unnamed_addr constant [6 x i8] c"targa\00", align 1
@.str.86 = private unnamed_addr constant [22 x i8] c"usage: %s [switches] \00", align 1
@.str.87 = private unnamed_addr constant [13 x i8] c"[inputfile]\0A\00", align 1
@.str.88 = private unnamed_addr constant [38 x i8] c"Switches (names may be abbreviated):\0A\00", align 1
@.str.89 = private unnamed_addr constant [56 x i8] c"  -colors N      Reduce image to no more than N colors\0A\00", align 1
@.str.90 = private unnamed_addr constant [47 x i8] c"  -fast          Fast, low-quality processing\0A\00", align 1
@.str.91 = private unnamed_addr constant [41 x i8] c"  -grayscale     Force grayscale output\0A\00", align 1
@.str.92 = private unnamed_addr constant [62 x i8] c"  -scale M/N     Scale output image by fraction M/N, eg, 1/8\0A\00", align 1
@.str.93 = private unnamed_addr constant [61 x i8] c"  -bmp           Select BMP output format (Windows style)%s\0A\00", align 1
@.str.94 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.95 = private unnamed_addr constant [45 x i8] c"  -gif           Select GIF output format%s\0A\00", align 1
@.str.96 = private unnamed_addr constant [58 x i8] c"  -os2           Select BMP output format (OS/2 style)%s\0A\00", align 1
@.str.97 = private unnamed_addr constant [59 x i8] c"  -pnm           Select PBMPLUS (PPM/PGM) output format%s\0A\00", align 1
@.str.98 = private unnamed_addr constant [11 x i8] c" (default)\00", align 1
@.str.99 = private unnamed_addr constant [47 x i8] c"  -targa         Select Targa output format%s\0A\00", align 1
@.str.100 = private unnamed_addr constant [30 x i8] c"Switches for advanced users:\0A\00", align 1
@.str.101 = private unnamed_addr constant [43 x i8] c"  -dct int       Use integer DCT method%s\0A\00", align 1
@.str.102 = private unnamed_addr constant [57 x i8] c"  -dct fast      Use fast integer DCT (less accurate)%s\0A\00", align 1
@.str.103 = private unnamed_addr constant [50 x i8] c"  -dct float     Use floating-point DCT method%s\0A\00", align 1
@.str.104 = private unnamed_addr constant [46 x i8] c"  -dither fs     Use F-S dithering (default)\0A\00", align 1
@.str.105 = private unnamed_addr constant [54 x i8] c"  -dither none   Don't use dithering in quantization\0A\00", align 1
@.str.106 = private unnamed_addr constant [63 x i8] c"  -dither ordered  Use ordered dither (medium speed, quality)\0A\00", align 1
@.str.107 = private unnamed_addr constant [57 x i8] c"  -map FILE      Map to colors used in named image file\0A\00", align 1
@.str.108 = private unnamed_addr constant [52 x i8] c"  -nosmooth      Don't use high-quality upsampling\0A\00", align 1
@.str.109 = private unnamed_addr constant [62 x i8] c"  -onepass       Use 1-pass quantization (fast, low quality)\0A\00", align 1
@.str.110 = private unnamed_addr constant [52 x i8] c"  -maxmemory N   Maximum memory to use (in kbytes)\0A\00", align 1
@.str.111 = private unnamed_addr constant [47 x i8] c"  -outfile name  Specify name for output file\0A\00", align 1
@.str.112 = private unnamed_addr constant [44 x i8] c"  -verbose  or  -debug   Emit debug output\0A\00", align 1
@start_pass.aanscales = internal unnamed_addr constant [64 x i16] [i16 16384, i16 22725, i16 21407, i16 19266, i16 16384, i16 12873, i16 8867, i16 4520, i16 22725, i16 31521, i16 29692, i16 26722, i16 22725, i16 17855, i16 12299, i16 6270, i16 21407, i16 29692, i16 27969, i16 25172, i16 21407, i16 16819, i16 11585, i16 5906, i16 19266, i16 26722, i16 25172, i16 22654, i16 19266, i16 15137, i16 10426, i16 5315, i16 16384, i16 22725, i16 21407, i16 19266, i16 16384, i16 12873, i16 8867, i16 4520, i16 12873, i16 17855, i16 16819, i16 15137, i16 12873, i16 10114, i16 6967, i16 3552, i16 8867, i16 12299, i16 11585, i16 10426, i16 8867, i16 6967, i16 4799, i16 2446, i16 4520, i16 6270, i16 5906, i16 5315, i16 4520, i16 3552, i16 2446, i16 1247], align 16
@start_pass.aanscalefactor = internal unnamed_addr constant [8 x double] [double 1.000000e+00, double 0x3FF63150B14861EF, double 0x3FF4E7AE914D6FCA, double 0x3FF2D062EF6C11AA, double 1.000000e+00, double 0x3FE92469C0A7BF3B, double 0x3FE1517A7BC720BB, double 0x3FD1A855DE72AB5D], align 16
@switch.table.start_pass = private unnamed_addr constant [3 x ptr] [ptr @jpeg_idct_islow, ptr @jpeg_idct_ifast, ptr @jpeg_idct_float], align 8
@extend_test = internal unnamed_addr constant [16 x i32] [i32 0, i32 1, i32 2, i32 4, i32 8, i32 16, i32 32, i32 64, i32 128, i32 256, i32 512, i32 1024, i32 2048, i32 4096, i32 8192, i32 16384], align 16
@extend_offset = internal unnamed_addr constant [16 x i32] [i32 0, i32 -1, i32 -3, i32 -7, i32 -15, i32 -31, i32 -63, i32 -127, i32 -255, i32 -511, i32 -1023, i32 -2047, i32 -4095, i32 -8191, i32 -16383, i32 -32767], align 16
@switch.table.jpeg_calc_output_dimensions = private unnamed_addr constant [5 x i32] [i32 1, i32 3, i32 3, i32 4, i32 4], align 4
@extend_test.30 = internal unnamed_addr constant [16 x i32] [i32 0, i32 1, i32 2, i32 4, i32 8, i32 16, i32 32, i32 64, i32 128, i32 256, i32 512, i32 1024, i32 2048, i32 4096, i32 8192, i32 16384], align 16
@extend_offset.31 = internal unnamed_addr constant [16 x i32] [i32 0, i32 -1, i32 -3, i32 -7, i32 -15, i32 -31, i32 -63, i32 -127, i32 -255, i32 -511, i32 -1023, i32 -2047, i32 -4095, i32 -8191, i32 -16383, i32 -32767], align 16
@.str.48 = private unnamed_addr constant [22 x i8] c"Bogus message code %d\00", align 1
@.str.1.49 = private unnamed_addr constant [57 x i8] c"Sorry, there are legal restrictions on arithmetic coding\00", align 1
@.str.2.50 = private unnamed_addr constant [32 x i8] c"ALIGN_TYPE is wrong, please fix\00", align 1
@.str.3.51 = private unnamed_addr constant [37 x i8] c"MAX_ALLOC_CHUNK is wrong, please fix\00", align 1
@.str.4.52 = private unnamed_addr constant [26 x i8] c"Bogus buffer control mode\00", align 1
@.str.5.53 = private unnamed_addr constant [31 x i8] c"Invalid component ID %d in SOS\00", align 1
@.str.6.54 = private unnamed_addr constant [40 x i8] c"IDCT output block size %d not supported\00", align 1
@.str.7.55 = private unnamed_addr constant [23 x i8] c"Bogus input colorspace\00", align 1
@.str.8.56 = private unnamed_addr constant [22 x i8] c"Bogus JPEG colorspace\00", align 1
@.str.9.57 = private unnamed_addr constant [20 x i8] c"Bogus marker length\00", align 1
@.str.10.58 = private unnamed_addr constant [61 x i8] c"Wrong JPEG library version: library is %d, caller expects %d\00", align 1
@.str.11.59 = private unnamed_addr constant [48 x i8] c"Sampling factors too large for interleaved scan\00", align 1
@.str.12.60 = private unnamed_addr constant [28 x i8] c"Invalid memory pool code %d\00", align 1
@.str.13.61 = private unnamed_addr constant [35 x i8] c"Unsupported JPEG data precision %d\00", align 1
@.str.14.62 = private unnamed_addr constant [55 x i8] c"Invalid progressive parameters Ss=%d Se=%d Ah=%d Al=%d\00", align 1
@.str.15.63 = private unnamed_addr constant [55 x i8] c"Invalid progressive parameters at scan script entry %d\00", align 1
@.str.16.64 = private unnamed_addr constant [23 x i8] c"Bogus sampling factors\00", align 1
@.str.17.65 = private unnamed_addr constant [32 x i8] c"Invalid scan script at entry %d\00", align 1
@.str.18.66 = private unnamed_addr constant [42 x i8] c"Improper call to JPEG library in state %d\00", align 1
@.str.19.67 = private unnamed_addr constant [77 x i8] c"JPEG parameter struct mismatch: library thinks size is %u, caller expects %u\00", align 1
@.str.20.68 = private unnamed_addr constant [27 x i8] c"Bogus virtual array access\00", align 1
@.str.21.69 = private unnamed_addr constant [43 x i8] c"Buffer passed to JPEG library is too small\00", align 1
@.str.22.70 = private unnamed_addr constant [28 x i8] c"Suspension not allowed here\00", align 1
@.str.23.71 = private unnamed_addr constant [37 x i8] c"CCIR601 sampling not implemented yet\00", align 1
@.str.24.72 = private unnamed_addr constant [38 x i8] c"Too many color components: %d, max %d\00", align 1
@.str.25.73 = private unnamed_addr constant [37 x i8] c"Unsupported color conversion request\00", align 1
@.str.26.74 = private unnamed_addr constant [19 x i8] c"Bogus DAC index %d\00", align 1
@.str.27.75 = private unnamed_addr constant [21 x i8] c"Bogus DAC value 0x%x\00", align 1
@.str.28.76 = private unnamed_addr constant [17 x i8] c"Bogus DHT counts\00", align 1
@.str.29.77 = private unnamed_addr constant [19 x i8] c"Bogus DHT index %d\00", align 1
@.str.30.78 = private unnamed_addr constant [19 x i8] c"Bogus DQT index %d\00", align 1
@.str.31.79 = private unnamed_addr constant [37 x i8] c"Empty JPEG image (DNL not supported)\00", align 1
@.str.32.80 = private unnamed_addr constant [21 x i8] c"Read from EMS failed\00", align 1
@.str.33.81 = private unnamed_addr constant [20 x i8] c"Write to EMS failed\00", align 1
@.str.34.82 = private unnamed_addr constant [33 x i8] c"Didn't expect more than one scan\00", align 1
@.str.35.83 = private unnamed_addr constant [22 x i8] c"Input file read error\00", align 1
@.str.36.84 = private unnamed_addr constant [47 x i8] c"Output file write error --- out of disk space?\00", align 1
@.str.37.85 = private unnamed_addr constant [40 x i8] c"Fractional sampling not implemented yet\00", align 1
@.str.38.86 = private unnamed_addr constant [33 x i8] c"Huffman code size table overflow\00", align 1
@.str.39.87 = private unnamed_addr constant [33 x i8] c"Missing Huffman code table entry\00", align 1
@.str.40.88 = private unnamed_addr constant [47 x i8] c"Maximum supported image dimension is %u pixels\00", align 1
@.str.41.89 = private unnamed_addr constant [17 x i8] c"Empty input file\00", align 1
@.str.42.90 = private unnamed_addr constant [28 x i8] c"Premature end of input file\00", align 1
@.str.43.91 = private unnamed_addr constant [62 x i8] c"Cannot transcode due to multiple use of quantization table %d\00", align 1
@.str.44.92 = private unnamed_addr constant [39 x i8] c"Scan script does not transmit all data\00", align 1
@.str.45.93 = private unnamed_addr constant [39 x i8] c"Invalid color quantization mode change\00", align 1
@.str.46.94 = private unnamed_addr constant [20 x i8] c"Not implemented yet\00", align 1
@.str.47.95 = private unnamed_addr constant [46 x i8] c"Requested feature was omitted at compile time\00", align 1
@.str.48.96 = private unnamed_addr constant [28 x i8] c"Backing store not supported\00", align 1
@.str.49.97 = private unnamed_addr constant [37 x i8] c"Huffman table 0x%02x was not defined\00", align 1
@.str.50.98 = private unnamed_addr constant [34 x i8] c"JPEG datastream contains no image\00", align 1
@.str.51.99 = private unnamed_addr constant [42 x i8] c"Quantization table 0x%02x was not defined\00", align 1
@.str.52.100 = private unnamed_addr constant [43 x i8] c"Not a JPEG file: starts with 0x%02x 0x%02x\00", align 1
@.str.53.101 = private unnamed_addr constant [30 x i8] c"Insufficient memory (case %d)\00", align 1
@.str.54.102 = private unnamed_addr constant [46 x i8] c"Cannot quantize more than %d color components\00", align 1
@.str.55.103 = private unnamed_addr constant [40 x i8] c"Cannot quantize to fewer than %d colors\00", align 1
@.str.56.104 = private unnamed_addr constant [39 x i8] c"Cannot quantize to more than %d colors\00", align 1
@.str.57.105 = private unnamed_addr constant [45 x i8] c"Invalid JPEG file structure: two SOF markers\00", align 1
@.str.58.106 = private unnamed_addr constant [48 x i8] c"Invalid JPEG file structure: missing SOS marker\00", align 1
@.str.59.107 = private unnamed_addr constant [42 x i8] c"Unsupported JPEG process: SOF type 0x%02x\00", align 1
@.str.60.108 = private unnamed_addr constant [45 x i8] c"Invalid JPEG file structure: two SOI markers\00", align 1
@.str.61.109 = private unnamed_addr constant [44 x i8] c"Invalid JPEG file structure: SOS before SOF\00", align 1
@.str.62.110 = private unnamed_addr constant [35 x i8] c"Failed to create temporary file %s\00", align 1
@.str.63.111 = private unnamed_addr constant [30 x i8] c"Read failed on temporary file\00", align 1
@.str.64.112 = private unnamed_addr constant [30 x i8] c"Seek failed on temporary file\00", align 1
@.str.65.113 = private unnamed_addr constant [54 x i8] c"Write failed on temporary file --- out of disk space?\00", align 1
@.str.66.114 = private unnamed_addr constant [42 x i8] c"Application transferred too few scanlines\00", align 1
@.str.67.115 = private unnamed_addr constant [31 x i8] c"Unsupported marker type 0x%02x\00", align 1
@.str.68.116 = private unnamed_addr constant [35 x i8] c"Virtual array controller messed up\00", align 1
@.str.69.117 = private unnamed_addr constant [39 x i8] c"Image too wide for this implementation\00", align 1
@.str.70.118 = private unnamed_addr constant [21 x i8] c"Read from XMS failed\00", align 1
@.str.71.119 = private unnamed_addr constant [20 x i8] c"Write to XMS failed\00", align 1
@.str.72.120 = private unnamed_addr constant [35 x i8] c"Copyright (C) 1996, Thomas G. Lane\00", align 1
@.str.73.121 = private unnamed_addr constant [13 x i8] c"6a  7-Feb-96\00", align 1
@.str.74.122 = private unnamed_addr constant [62 x i8] c"Caution: quantization tables are too coarse for baseline JPEG\00", align 1
@.str.75.123 = private unnamed_addr constant [66 x i8] c"Adobe APP14 marker: version %d, flags 0x%04x 0x%04x, transform %d\00", align 1
@.str.76.124 = private unnamed_addr constant [42 x i8] c"Unknown APP0 marker (not JFIF), length %u\00", align 1
@.str.77.125 = private unnamed_addr constant [44 x i8] c"Unknown APP14 marker (not Adobe), length %u\00", align 1
@.str.78.126 = private unnamed_addr constant [39 x i8] c"Define Arithmetic Table 0x%02x: 0x%02x\00", align 1
@.str.79.127 = private unnamed_addr constant [28 x i8] c"Define Huffman Table 0x%02x\00", align 1
@.str.80.128 = private unnamed_addr constant [43 x i8] c"Define Quantization Table %d  precision %d\00", align 1
@.str.81.129 = private unnamed_addr constant [27 x i8] c"Define Restart Interval %u\00", align 1
@.str.82.130 = private unnamed_addr constant [20 x i8] c"Freed EMS handle %u\00", align 1
@.str.83.131 = private unnamed_addr constant [23 x i8] c"Obtained EMS handle %u\00", align 1
@.str.84.132 = private unnamed_addr constant [13 x i8] c"End Of Image\00", align 1
@.str.85.133 = private unnamed_addr constant [40 x i8] c"        %3d %3d %3d %3d %3d %3d %3d %3d\00", align 1
@.str.86.134 = private unnamed_addr constant [36 x i8] c"JFIF APP0 marker, density %dx%d  %d\00", align 1
@.str.87.135 = private unnamed_addr constant [60 x i8] c"Warning: thumbnail image size does not match data length %u\00", align 1
@.str.88.136 = private unnamed_addr constant [43 x i8] c"Unknown JFIF minor revision number %d.%02d\00", align 1
@.str.89.137 = private unnamed_addr constant [33 x i8] c"    with %d x %d thumbnail image\00", align 1
@.str.90.138 = private unnamed_addr constant [34 x i8] c"Skipping marker 0x%02x, length %u\00", align 1
@.str.91.139 = private unnamed_addr constant [25 x i8] c"Unexpected marker 0x%02x\00", align 1
@.str.92.140 = private unnamed_addr constant [40 x i8] c"        %4u %4u %4u %4u %4u %4u %4u %4u\00", align 1
@.str.93.141 = private unnamed_addr constant [35 x i8] c"Quantizing to %d = %d*%d*%d colors\00", align 1
@.str.94.142 = private unnamed_addr constant [24 x i8] c"Quantizing to %d colors\00", align 1
@.str.95.143 = private unnamed_addr constant [36 x i8] c"Selected %d colors for quantization\00", align 1
@.str.96.144 = private unnamed_addr constant [37 x i8] c"At marker 0x%02x, recovery action %d\00", align 1
@.str.97.145 = private unnamed_addr constant [6 x i8] c"RST%d\00", align 1
@.str.98.146 = private unnamed_addr constant [57 x i8] c"Smoothing not supported with nonstandard sampling ratios\00", align 1
@.str.99.147 = private unnamed_addr constant [58 x i8] c"Start Of Frame 0x%02x: width=%u, height=%u, components=%d\00", align 1
@.str.100.148 = private unnamed_addr constant [31 x i8] c"    Component %d: %dhx%dv q=%d\00", align 1
@.str.101.149 = private unnamed_addr constant [15 x i8] c"Start of Image\00", align 1
@.str.102.150 = private unnamed_addr constant [29 x i8] c"Start Of Scan: %d components\00", align 1
@.str.103.151 = private unnamed_addr constant [30 x i8] c"    Component %d: dc=%d ac=%d\00", align 1
@.str.104.152 = private unnamed_addr constant [29 x i8] c"  Ss=%d, Se=%d, Ah=%d, Al=%d\00", align 1
@.str.105.153 = private unnamed_addr constant [25 x i8] c"Closed temporary file %s\00", align 1
@.str.106.154 = private unnamed_addr constant [25 x i8] c"Opened temporary file %s\00", align 1
@.str.107.155 = private unnamed_addr constant [52 x i8] c"Unrecognized component IDs %d %d %d, assuming YCbCr\00", align 1
@.str.108.156 = private unnamed_addr constant [20 x i8] c"Freed XMS handle %u\00", align 1
@.str.109.157 = private unnamed_addr constant [23 x i8] c"Obtained XMS handle %u\00", align 1
@.str.110.158 = private unnamed_addr constant [38 x i8] c"Unknown Adobe color transform code %d\00", align 1
@.str.111.159 = private unnamed_addr constant [66 x i8] c"Inconsistent progression sequence for component %d coefficient %d\00", align 1
@.str.112.160 = private unnamed_addr constant [60 x i8] c"Corrupt JPEG data: %u extraneous bytes before marker 0x%02x\00", align 1
@.str.113 = private unnamed_addr constant [49 x i8] c"Corrupt JPEG data: premature end of data segment\00", align 1
@.str.114 = private unnamed_addr constant [36 x i8] c"Corrupt JPEG data: bad Huffman code\00", align 1
@.str.115 = private unnamed_addr constant [46 x i8] c"Warning: unknown JFIF revision number %d.%02d\00", align 1
@.str.116 = private unnamed_addr constant [27 x i8] c"Premature end of JPEG file\00", align 1
@.str.117 = private unnamed_addr constant [56 x i8] c"Corrupt JPEG data: found marker 0x%02x instead of RST%d\00", align 1
@.str.118 = private unnamed_addr constant [43 x i8] c"Invalid SOS parameters for sequential JPEG\00", align 1
@.str.119 = private unnamed_addr constant [43 x i8] c"Application transferred too many scanlines\00", align 1
@jpeg_std_message_table = internal constant [121 x ptr] [ptr @.str.48, ptr @.str.1.49, ptr @.str.2.50, ptr @.str.3.51, ptr @.str.4.52, ptr @.str.5.53, ptr @.str.6.54, ptr @.str.7.55, ptr @.str.8.56, ptr @.str.9.57, ptr @.str.10.58, ptr @.str.11.59, ptr @.str.12.60, ptr @.str.13.61, ptr @.str.14.62, ptr @.str.15.63, ptr @.str.16.64, ptr @.str.17.65, ptr @.str.18.66, ptr @.str.19.67, ptr @.str.20.68, ptr @.str.21.69, ptr @.str.22.70, ptr @.str.23.71, ptr @.str.24.72, ptr @.str.25.73, ptr @.str.26.74, ptr @.str.27.75, ptr @.str.28.76, ptr @.str.29.77, ptr @.str.30.78, ptr @.str.31.79, ptr @.str.32.80, ptr @.str.33.81, ptr @.str.34.82, ptr @.str.35.83, ptr @.str.36.84, ptr @.str.37.85, ptr @.str.38.86, ptr @.str.39.87, ptr @.str.40.88, ptr @.str.41.89, ptr @.str.42.90, ptr @.str.43.91, ptr @.str.44.92, ptr @.str.45.93, ptr @.str.46.94, ptr @.str.47.95, ptr @.str.48.96, ptr @.str.49.97, ptr @.str.50.98, ptr @.str.51.99, ptr @.str.52.100, ptr @.str.53.101, ptr @.str.54.102, ptr @.str.55.103, ptr @.str.56.104, ptr @.str.57.105, ptr @.str.58.106, ptr @.str.59.107, ptr @.str.60.108, ptr @.str.61.109, ptr @.str.62.110, ptr @.str.63.111, ptr @.str.64.112, ptr @.str.65.113, ptr @.str.66.114, ptr @.str.67.115, ptr @.str.68.116, ptr @.str.69.117, ptr @.str.70.118, ptr @.str.71.119, ptr @.str.72.120, ptr @.str.73.121, ptr @.str.74.122, ptr @.str.75.123, ptr @.str.76.124, ptr @.str.77.125, ptr @.str.78.126, ptr @.str.79.127, ptr @.str.80.128, ptr @.str.81.129, ptr @.str.82.130, ptr @.str.83.131, ptr @.str.84.132, ptr @.str.85.133, ptr @.str.86.134, ptr @.str.87.135, ptr @.str.88.136, ptr @.str.89.137, ptr @.str.90.138, ptr @.str.91.139, ptr @.str.92.140, ptr @.str.93.141, ptr @.str.94.142, ptr @.str.95.143, ptr @.str.96.144, ptr @.str.97.145, ptr @.str.98.146, ptr @.str.99.147, ptr @.str.100.148, ptr @.str.101.149, ptr @.str.102.150, ptr @.str.103.151, ptr @.str.104.152, ptr @.str.105.153, ptr @.str.106.154, ptr @.str.107.155, ptr @.str.108.156, ptr @.str.109.157, ptr @.str.110.158, ptr @.str.111.159, ptr @.str.112.160, ptr @.str.113, ptr @.str.114, ptr @.str.115, ptr @.str.116, ptr @.str.117, ptr @.str.118, ptr @.str.119, ptr null], align 16
@stderr = external local_unnamed_addr global ptr, align 8
@.str.120 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.175 = private unnamed_addr constant [8 x i8] c"JPEGMEM\00", align 1
@.str.1.176 = private unnamed_addr constant [6 x i8] c"%ld%c\00", align 1
@first_pool_slop = internal unnamed_addr constant [2 x i64] [i64 1600, i64 16000], align 16
@extra_pool_slop = internal unnamed_addr constant [2 x i64] [i64 0, i64 5000], align 16
@base_dither_matrix = internal unnamed_addr constant [16 x [16 x i8]] [[16 x i8] c"\00\C00\F0\0C\CC<\FC\03\C33\F3\0F\CF?\FF", [16 x i8] c"\80@\B0p\8CL\BC|\83C\B3s\8FO\BF\7F", [16 x i8] c" \E0\10\D0,\EC\1C\DC#\E3\13\D3/\EF\1F\DF", [16 x i8] c"\A0`\90P\ACl\9C\\\A3c\93S\AFo\9F_", [16 x i8] c"\08\C88\F8\04\C44\F4\0B\CB;\FB\07\C77\F7", [16 x i8] c"\88H\B8x\84D\B4t\8BK\BB{\87G\B7w", [16 x i8] c"(\E8\18\D8$\E4\14\D4+\EB\1B\DB'\E7\17\D7", [16 x i8] c"\A8h\98X\A4d\94T\ABk\9B[\A7g\97W", [16 x i8] c"\02\C22\F2\0E\CE>\FE\01\C11\F1\0D\CD=\FD", [16 x i8] c"\82B\B2r\8EN\BE~\81A\B1q\8DM\BD}", [16 x i8] c"\22\E2\12\D2.\EE\1E\DE!\E1\11\D1-\ED\1D\DD", [16 x i8] c"\A2b\92R\AEn\9E^\A1a\91Q\ADm\9D]", [16 x i8] c"\0A\CA:\FA\06\C66\F6\09\C99\F9\05\C55\F5", [16 x i8] c"\8AJ\BAz\86F\B6v\89I\B9y\85E\B5u", [16 x i8] c"*\EA\1A\DA&\E6\16\D6)\E9\19\D9%\E5\15\D5", [16 x i8] c"\AAj\9AZ\A6f\96V\A9i\99Y\A5e\95U"], align 16
@select_ncolors.RGB_order = internal unnamed_addr constant [3 x i32] [i32 1, i32 0, i32 2], align 4
@jpeg_natural_order = internal constant [80 x i32] [i32 0, i32 1, i32 8, i32 16, i32 9, i32 2, i32 3, i32 10, i32 17, i32 24, i32 32, i32 25, i32 18, i32 11, i32 4, i32 5, i32 12, i32 19, i32 26, i32 33, i32 40, i32 48, i32 41, i32 34, i32 27, i32 20, i32 13, i32 6, i32 7, i32 14, i32 21, i32 28, i32 35, i32 42, i32 49, i32 56, i32 57, i32 50, i32 43, i32 36, i32 29, i32 22, i32 15, i32 23, i32 30, i32 37, i32 44, i32 51, i32 58, i32 59, i32 52, i32 45, i32 38, i32 31, i32 39, i32 46, i32 53, i32 60, i32 61, i32 54, i32 47, i32 55, i32 62, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63], align 16
@.str.219 = private unnamed_addr constant [15 x i8] c"P5\0A%ld %ld\0A%d\0A\00", align 1
@.str.1.220 = private unnamed_addr constant [15 x i8] c"P6\0A%ld %ld\0A%d\0A\00", align 1

; Function Attrs: nofree nounwind optsize memory(read) uwtable
define internal i32 @keymatch(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 noundef %2) #0 {
  %4 = load i8, ptr %0, align 1, !tbaa !7
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %34, label %6

6:                                                ; preds = %30, %3
  %7 = phi i8 [ %32, %30 ], [ %4, %3 ]
  %8 = phi ptr [ %11, %30 ], [ %0, %3 ]
  %9 = phi i32 [ %31, %30 ], [ 0, %3 ]
  %10 = phi ptr [ %13, %30 ], [ %1, %3 ]
  %11 = getelementptr inbounds i8, ptr %8, i64 1
  %12 = sext i8 %7 to i32
  %13 = getelementptr inbounds i8, ptr %10, i64 1
  %14 = load i8, ptr %10, align 1, !tbaa !7
  %15 = sext i8 %14 to i32
  %16 = icmp eq i8 %14, 0
  br i1 %16, label %38, label %17

17:                                               ; preds = %6
  %18 = tail call ptr @__ctype_b_loc() #29
  %19 = load ptr, ptr %18, align 8, !tbaa !10
  %20 = sext i8 %7 to i64
  %21 = getelementptr inbounds i16, ptr %19, i64 %20
  %22 = load i16, ptr %21, align 2, !tbaa !12
  %23 = and i16 %22, 256
  %24 = icmp eq i16 %23, 0
  br i1 %24, label %27, label %25

25:                                               ; preds = %17
  %26 = tail call i32 @tolower(i32 noundef %12) #30
  br label %27

27:                                               ; preds = %25, %17
  %28 = phi i32 [ %12, %17 ], [ %26, %25 ]
  %29 = icmp eq i32 %28, %15
  br i1 %29, label %30, label %38

30:                                               ; preds = %27
  %31 = add nuw nsw i32 %9, 1
  %32 = load i8, ptr %11, align 1, !tbaa !7
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %34, label %6, !llvm.loop !14

34:                                               ; preds = %30, %3
  %35 = phi i32 [ 0, %3 ], [ %31, %30 ]
  %36 = icmp sge i32 %35, %2
  %37 = zext i1 %36 to i32
  br label %38

38:                                               ; preds = %34, %27, %6
  %39 = phi i32 [ %37, %34 ], [ 0, %6 ], [ 0, %27 ]
  ret i32 %39
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(none)
declare ptr @__ctype_b_loc() local_unnamed_addr #1

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(read)
declare i32 @tolower(i32 noundef) local_unnamed_addr #2

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, argmem: none, inaccessiblemem: none) uwtable
define internal ptr @read_stdin() #3 {
  %1 = load ptr, ptr @stdin, align 8, !tbaa !10
  ret ptr %1
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, argmem: none, inaccessiblemem: none) uwtable
define internal ptr @write_stdout() #3 {
  %1 = load ptr, ptr @stdout, align 8, !tbaa !10
  ret ptr %1
}

; Function Attrs: noreturn nounwind optsize uwtable
define dso_local i32 @main(i32 noundef %0, ptr nocapture noundef readonly %1) #4 {
  %3 = alloca %struct.jpeg_decompress_struct, align 8
  %4 = alloca %struct.jpeg_error_mgr, align 8
  call void @llvm.lifetime.start.p0(i64 616, ptr nonnull %3) #31
  call void @llvm.lifetime.start.p0(i64 168, ptr nonnull %4) #31
  %5 = load ptr, ptr %1, align 8, !tbaa !10
  store ptr %5, ptr @progname, align 8, !tbaa !10
  %6 = icmp eq ptr %5, null
  br i1 %6, label %10, label %7

7:                                                ; preds = %2
  %8 = load i8, ptr %5, align 1, !tbaa !7
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %7, %2
  store ptr @.str, ptr @progname, align 8, !tbaa !10
  br label %11

11:                                               ; preds = %10, %7
  %12 = call ptr @jpeg_std_error(ptr noundef nonnull %4) #32
  store ptr %12, ptr %3, align 8, !tbaa !16
  call void @jpeg_CreateDecompress(ptr noundef nonnull %3, i32 noundef 61, i64 noundef 616) #32
  %13 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %4, i64 0, i32 11
  store ptr @cdjpeg_message_table, ptr %13, align 8, !tbaa !20
  %14 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %4, i64 0, i32 12
  store i32 1000, ptr %14, align 8, !tbaa !23
  %15 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %4, i64 0, i32 13
  store i32 1043, ptr %15, align 4, !tbaa !24
  call void @jpeg_set_marker_processor(ptr noundef nonnull %3, i32 noundef 254, ptr noundef nonnull @COM_handler) #32
  %16 = call fastcc i32 @parse_switches(ptr noundef nonnull %3, i32 noundef %0, ptr noundef nonnull %1, i32 noundef 0) #33
  %17 = add nsw i32 %0, -1
  %18 = icmp slt i32 %16, %17
  br i1 %18, label %19, label %23

19:                                               ; preds = %11
  %20 = load ptr, ptr @stderr, align 8, !tbaa !10
  %21 = load ptr, ptr @progname, align 8, !tbaa !10
  %22 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %20, ptr noundef nonnull @.str.1, ptr noundef %21) #34
  call fastcc void @usage() #33
  unreachable

23:                                               ; preds = %11
  %24 = icmp slt i32 %16, %0
  br i1 %24, label %25, label %36

25:                                               ; preds = %23
  %26 = sext i32 %16 to i64
  %27 = getelementptr inbounds ptr, ptr %1, i64 %26
  %28 = load ptr, ptr %27, align 8, !tbaa !10
  %29 = call noalias ptr @fopen(ptr noundef %28, ptr noundef nonnull @.str.2) #33
  %30 = icmp eq ptr %29, null
  br i1 %30, label %31, label %38

31:                                               ; preds = %25
  %32 = load ptr, ptr @stderr, align 8, !tbaa !10
  %33 = load ptr, ptr @progname, align 8, !tbaa !10
  %34 = load ptr, ptr %27, align 8, !tbaa !10
  %35 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %32, ptr noundef nonnull @.str.3, ptr noundef %33, ptr noundef %34) #34
  call void @exit(i32 noundef 1) #35
  unreachable

36:                                               ; preds = %23
  %37 = call ptr @read_stdin() #32
  br label %38

38:                                               ; preds = %36, %25
  %39 = phi ptr [ %29, %25 ], [ %37, %36 ]
  %40 = load ptr, ptr @outfilename, align 8, !tbaa !10
  %41 = icmp eq ptr %40, null
  br i1 %41, label %50, label %42

42:                                               ; preds = %38
  %43 = call noalias ptr @fopen(ptr noundef nonnull %40, ptr noundef nonnull @.str.4) #33
  %44 = icmp eq ptr %43, null
  br i1 %44, label %45, label %52

45:                                               ; preds = %42
  %46 = load ptr, ptr @stderr, align 8, !tbaa !10
  %47 = load ptr, ptr @progname, align 8, !tbaa !10
  %48 = load ptr, ptr @outfilename, align 8, !tbaa !10
  %49 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %46, ptr noundef nonnull @.str.3, ptr noundef %47, ptr noundef %48) #34
  call void @exit(i32 noundef 1) #35
  unreachable

50:                                               ; preds = %38
  %51 = call ptr @write_stdout() #32
  br label %52

52:                                               ; preds = %50, %42
  %53 = phi ptr [ %43, %42 ], [ %51, %50 ]
  call void @jpeg_stdio_src(ptr noundef nonnull %3, ptr noundef %39) #32
  %54 = call i32 @jpeg_read_header(ptr noundef nonnull %3, i32 noundef 1) #32
  %55 = call fastcc i32 @parse_switches(ptr noundef nonnull %3, i32 noundef %0, ptr noundef nonnull %1, i32 noundef 1) #33
  %56 = load i32, ptr @requested_fmt, align 4, !tbaa !7
  switch i32 %56, label %67 [
    i32 0, label %57
    i32 2, label %59
    i32 1, label %61
    i32 3, label %63
    i32 5, label %65
  ]

57:                                               ; preds = %52
  %58 = call ptr @jinit_write_bmp(ptr noundef nonnull %3, i32 noundef 0) #32
  br label %71

59:                                               ; preds = %52
  %60 = call ptr @jinit_write_bmp(ptr noundef nonnull %3, i32 noundef 1) #32
  br label %71

61:                                               ; preds = %52
  %62 = call ptr @jinit_write_gif(ptr noundef nonnull %3) #32
  br label %71

63:                                               ; preds = %52
  %64 = call ptr @jinit_write_ppm(ptr noundef nonnull %3) #32
  br label %71

65:                                               ; preds = %52
  %66 = call ptr @jinit_write_targa(ptr noundef nonnull %3) #32
  br label %71

67:                                               ; preds = %52
  %68 = load ptr, ptr %3, align 8, !tbaa !16
  %69 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %68, i64 0, i32 5
  store i32 1042, ptr %69, align 8, !tbaa !25
  %70 = load ptr, ptr %68, align 8, !tbaa !26
  call void %70(ptr noundef nonnull %3) #32
  br label %71

71:                                               ; preds = %67, %65, %63, %61, %59, %57
  %72 = phi ptr [ null, %67 ], [ %66, %65 ], [ %64, %63 ], [ %62, %61 ], [ %60, %59 ], [ %58, %57 ]
  %73 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %72, i64 0, i32 3
  store ptr %53, ptr %73, align 8, !tbaa !27
  %74 = call i32 @jpeg_start_decompress(ptr noundef nonnull %3) #32
  %75 = load ptr, ptr %72, align 8, !tbaa !29
  call void %75(ptr noundef nonnull %3, ptr noundef nonnull %72) #32
  %76 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %3, i64 0, i32 33
  %77 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %3, i64 0, i32 27
  %78 = load i32, ptr %76, align 8, !tbaa !30
  %79 = load i32, ptr %77, align 4, !tbaa !31
  %80 = icmp ult i32 %78, %79
  br i1 %80, label %81, label %93

81:                                               ; preds = %71
  %82 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %72, i64 0, i32 4
  %83 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %72, i64 0, i32 5
  %84 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %72, i64 0, i32 1
  br label %85

85:                                               ; preds = %85, %81
  %86 = load ptr, ptr %82, align 8, !tbaa !32
  %87 = load i32, ptr %83, align 8, !tbaa !33
  %88 = call i32 @jpeg_read_scanlines(ptr noundef nonnull %3, ptr noundef %86, i32 noundef %87) #32
  %89 = load ptr, ptr %84, align 8, !tbaa !34
  call void %89(ptr noundef nonnull %3, ptr noundef nonnull %72, i32 noundef %88) #32
  %90 = load i32, ptr %76, align 8, !tbaa !30
  %91 = load i32, ptr %77, align 4, !tbaa !31
  %92 = icmp ult i32 %90, %91
  br i1 %92, label %85, label %93, !llvm.loop !35

93:                                               ; preds = %85, %71
  %94 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %72, i64 0, i32 2
  %95 = load ptr, ptr %94, align 8, !tbaa !36
  call void %95(ptr noundef nonnull %3, ptr noundef nonnull %72) #32
  %96 = call i32 @jpeg_finish_decompress(ptr noundef nonnull %3) #32
  call void @jpeg_destroy_decompress(ptr noundef nonnull %3) #32
  %97 = load ptr, ptr @stdin, align 8, !tbaa !10
  %98 = icmp eq ptr %39, %97
  br i1 %98, label %101, label %99

99:                                               ; preds = %93
  %100 = call i32 @fclose(ptr noundef %39) #33
  br label %101

101:                                              ; preds = %99, %93
  %102 = load ptr, ptr @stdout, align 8, !tbaa !10
  %103 = icmp eq ptr %53, %102
  br i1 %103, label %106, label %104

104:                                              ; preds = %101
  %105 = call i32 @fclose(ptr noundef %53) #33
  br label %106

106:                                              ; preds = %104, %101
  %107 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %4, i64 0, i32 8
  %108 = load i64, ptr %107, align 8, !tbaa !37
  %109 = icmp eq i64 %108, 0
  %110 = select i1 %109, i32 0, i32 2
  call void @exit(i32 noundef %110) #35
  unreachable
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #5

; Function Attrs: nounwind optsize uwtable
define internal i32 @COM_handler(ptr noundef %0) #6 {
  %2 = load ptr, ptr %0, align 8, !tbaa !16
  %3 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %2, i64 0, i32 7
  %4 = load i32, ptr %3, align 4, !tbaa !38
  %5 = icmp sgt i32 %4, 0
  %6 = tail call fastcc i32 @jpeg_getc(ptr noundef nonnull %0) #33, !range !39
  %7 = shl nuw nsw i32 %6, 8
  %8 = tail call fastcc i32 @jpeg_getc(ptr noundef nonnull %0) #33, !range !39
  %9 = or i32 %7, %8
  %10 = zext i32 %9 to i64
  br i1 %5, label %11, label %15

11:                                               ; preds = %1
  %12 = add nsw i64 %10, -2
  %13 = load ptr, ptr @stderr, align 8, !tbaa !10
  %14 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %13, ptr noundef nonnull @.str.47, i64 noundef %12) #34
  br label %15

15:                                               ; preds = %11, %1
  %16 = icmp ugt i32 %9, 2
  br i1 %16, label %17, label %53

17:                                               ; preds = %15
  %18 = add nsw i64 %10, -3
  br label %19

19:                                               ; preds = %49, %17
  %20 = phi i64 [ %51, %49 ], [ %18, %17 ]
  %21 = phi i32 [ %50, %49 ], [ 0, %17 ]
  %22 = tail call fastcc i32 @jpeg_getc(ptr noundef nonnull %0) #33, !range !39
  br i1 %5, label %23, label %49

23:                                               ; preds = %19
  %24 = trunc i32 %22 to i8
  switch i8 %24, label %36 [
    i8 13, label %25
    i8 10, label %28
    i8 92, label %33
  ]

25:                                               ; preds = %23
  %26 = load ptr, ptr @stderr, align 8, !tbaa !10
  %27 = tail call i32 @fputc(i32 10, ptr %26)
  br label %49

28:                                               ; preds = %23
  %29 = icmp eq i32 %21, 13
  br i1 %29, label %49, label %30

30:                                               ; preds = %28
  %31 = load ptr, ptr @stderr, align 8, !tbaa !10
  %32 = tail call i32 @fputc(i32 10, ptr %31)
  br label %49

33:                                               ; preds = %23
  %34 = load ptr, ptr @stderr, align 8, !tbaa !10
  %35 = tail call i64 @fwrite(ptr nonnull @.str.49, i64 2, i64 1, ptr %34) #36
  br label %49

36:                                               ; preds = %23
  %37 = tail call ptr @__ctype_b_loc() #29
  %38 = load ptr, ptr %37, align 8, !tbaa !10
  %39 = zext i32 %22 to i64
  %40 = getelementptr inbounds i16, ptr %38, i64 %39
  %41 = load i16, ptr %40, align 2, !tbaa !12
  %42 = and i16 %41, 16384
  %43 = icmp eq i16 %42, 0
  %44 = load ptr, ptr @stderr, align 8, !tbaa !10
  br i1 %43, label %47, label %45

45:                                               ; preds = %36
  %46 = tail call i32 @putc(i32 noundef %22, ptr noundef %44) #33
  br label %49

47:                                               ; preds = %36
  %48 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %44, ptr noundef nonnull @.str.50, i32 noundef %22) #34
  br label %49

49:                                               ; preds = %47, %45, %33, %30, %28, %25, %19
  %50 = phi i32 [ %21, %19 ], [ 10, %30 ], [ 10, %28 ], [ %22, %45 ], [ %22, %47 ], [ 92, %33 ], [ 13, %25 ]
  %51 = add nsw i64 %20, -1
  %52 = icmp sgt i64 %20, 0
  br i1 %52, label %19, label %53, !llvm.loop !40

53:                                               ; preds = %49, %15
  br i1 %5, label %54, label %57

54:                                               ; preds = %53
  %55 = load ptr, ptr @stderr, align 8, !tbaa !10
  %56 = tail call i32 @fputc(i32 10, ptr %55)
  br label %57

57:                                               ; preds = %54, %53
  ret i32 1
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc i32 @parse_switches(ptr noundef %0, i32 noundef %1, ptr nocapture noundef readonly %2, i32 noundef %3) unnamed_addr #6 {
  %5 = alloca i32, align 4
  %6 = alloca i64, align 8
  %7 = alloca i8, align 1
  store i32 3, ptr @requested_fmt, align 4, !tbaa !7
  store ptr null, ptr @outfilename, align 8, !tbaa !10
  %8 = load ptr, ptr %0, align 8, !tbaa !16
  %9 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %8, i64 0, i32 7
  store i32 0, ptr %9, align 4, !tbaa !38
  %10 = icmp sgt i32 %1, 1
  br i1 %10, label %11, label %251

11:                                               ; preds = %4
  %12 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 22
  %13 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 19
  %14 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 16
  %15 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 20
  %16 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 21
  %17 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 17
  %18 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 10
  %19 = icmp eq i32 %3, 0
  %20 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  %21 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 11
  %22 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 12
  br label %23

23:                                               ; preds = %247, %11
  %24 = phi i32 [ 1, %11 ], [ %249, %247 ]
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds ptr, ptr %2, i64 %25
  %27 = load ptr, ptr %26, align 8, !tbaa !10
  %28 = load i8, ptr %27, align 1, !tbaa !7
  %29 = icmp eq i8 %28, 45
  br i1 %29, label %33, label %30

30:                                               ; preds = %23
  %31 = icmp slt i32 %24, 1
  br i1 %31, label %32, label %251

32:                                               ; preds = %30
  store ptr null, ptr @outfilename, align 8, !tbaa !10
  br label %247

33:                                               ; preds = %23
  %34 = getelementptr inbounds i8, ptr %27, i64 1
  %35 = call i32 @keymatch(ptr noundef nonnull %34, ptr noundef nonnull @.str.51, i32 noundef 1) #32
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %38, label %37

37:                                               ; preds = %33
  store i32 0, ptr @requested_fmt, align 4, !tbaa !7
  br label %247

38:                                               ; preds = %33
  %39 = call i32 @keymatch(ptr noundef nonnull %34, ptr noundef nonnull @.str.52, i32 noundef 1) #32
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %50

41:                                               ; preds = %38
  %42 = call i32 @keymatch(ptr noundef nonnull %34, ptr noundef nonnull @.str.53, i32 noundef 1) #32
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %50

44:                                               ; preds = %41
  %45 = call i32 @keymatch(ptr noundef nonnull %34, ptr noundef nonnull @.str.54, i32 noundef 1) #32
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %50

47:                                               ; preds = %44
  %48 = call i32 @keymatch(ptr noundef nonnull %34, ptr noundef nonnull @.str.55, i32 noundef 1) #32
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %63, label %50

50:                                               ; preds = %47, %44, %41, %38
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5) #31
  %51 = add nsw i32 %24, 1
  %52 = icmp slt i32 %51, %1
  br i1 %52, label %54, label %53

53:                                               ; preds = %50
  call fastcc void @usage() #33
  unreachable

54:                                               ; preds = %50
  %55 = sext i32 %51 to i64
  %56 = getelementptr inbounds ptr, ptr %2, i64 %55
  %57 = load ptr, ptr %56, align 8, !tbaa !10
  %58 = call i32 (ptr, ptr, ...) @__isoc99_sscanf(ptr noundef %57, ptr noundef nonnull @.str.56, ptr noundef nonnull %5) #32
  %59 = icmp eq i32 %58, 1
  br i1 %59, label %61, label %60

60:                                               ; preds = %54
  call fastcc void @usage() #33
  unreachable

61:                                               ; preds = %54
  %62 = load i32, ptr %5, align 4, !tbaa !41
  store i32 %62, ptr %12, align 8, !tbaa !42
  store i32 1, ptr %13, align 4, !tbaa !43
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5) #31
  br label %247

63:                                               ; preds = %47
  %64 = call i32 @keymatch(ptr noundef nonnull %34, ptr noundef nonnull @.str.57, i32 noundef 2) #32
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %88, label %66

66:                                               ; preds = %63
  %67 = add nsw i32 %24, 1
  %68 = icmp slt i32 %67, %1
  br i1 %68, label %70, label %69

69:                                               ; preds = %66
  call fastcc void @usage() #33
  unreachable

70:                                               ; preds = %66
  %71 = sext i32 %67 to i64
  %72 = getelementptr inbounds ptr, ptr %2, i64 %71
  %73 = load ptr, ptr %72, align 8, !tbaa !10
  %74 = call i32 @keymatch(ptr noundef %73, ptr noundef nonnull @.str.58, i32 noundef 1) #32
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %77, label %76

76:                                               ; preds = %70
  store i32 0, ptr %14, align 8, !tbaa !44
  br label %247

77:                                               ; preds = %70
  %78 = load ptr, ptr %72, align 8, !tbaa !10
  %79 = call i32 @keymatch(ptr noundef %78, ptr noundef nonnull @.str.59, i32 noundef 2) #32
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %82, label %81

81:                                               ; preds = %77
  store i32 1, ptr %14, align 8, !tbaa !44
  br label %247

82:                                               ; preds = %77
  %83 = load ptr, ptr %72, align 8, !tbaa !10
  %84 = call i32 @keymatch(ptr noundef %83, ptr noundef nonnull @.str.60, i32 noundef 2) #32
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %87, label %86

86:                                               ; preds = %82
  store i32 2, ptr %14, align 8, !tbaa !44
  br label %247

87:                                               ; preds = %82
  call fastcc void @usage() #33
  unreachable

88:                                               ; preds = %63
  %89 = call i32 @keymatch(ptr noundef nonnull %34, ptr noundef nonnull @.str.61, i32 noundef 2) #32
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %113, label %91

91:                                               ; preds = %88
  %92 = add nsw i32 %24, 1
  %93 = icmp slt i32 %92, %1
  br i1 %93, label %95, label %94

94:                                               ; preds = %91
  call fastcc void @usage() #33
  unreachable

95:                                               ; preds = %91
  %96 = sext i32 %92 to i64
  %97 = getelementptr inbounds ptr, ptr %2, i64 %96
  %98 = load ptr, ptr %97, align 8, !tbaa !10
  %99 = call i32 @keymatch(ptr noundef %98, ptr noundef nonnull @.str.62, i32 noundef 2) #32
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %102, label %101

101:                                              ; preds = %95
  store i32 2, ptr %15, align 8, !tbaa !45
  br label %247

102:                                              ; preds = %95
  %103 = load ptr, ptr %97, align 8, !tbaa !10
  %104 = call i32 @keymatch(ptr noundef %103, ptr noundef nonnull @.str.63, i32 noundef 2) #32
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %107, label %106

106:                                              ; preds = %102
  store i32 0, ptr %15, align 8, !tbaa !45
  br label %247

107:                                              ; preds = %102
  %108 = load ptr, ptr %97, align 8, !tbaa !10
  %109 = call i32 @keymatch(ptr noundef %108, ptr noundef nonnull @.str.64, i32 noundef 2) #32
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %112, label %111

111:                                              ; preds = %107
  store i32 1, ptr %15, align 8, !tbaa !45
  br label %247

112:                                              ; preds = %107
  call fastcc void @usage() #33
  unreachable

113:                                              ; preds = %88
  %114 = call i32 @keymatch(ptr noundef nonnull %34, ptr noundef nonnull @.str.65, i32 noundef 1) #32
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %116, label %119

116:                                              ; preds = %113
  %117 = call i32 @keymatch(ptr noundef nonnull %34, ptr noundef nonnull @.str.66, i32 noundef 1) #32
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %129, label %119

119:                                              ; preds = %116, %113
  %120 = load i1, ptr @parse_switches.printed_version, align 4
  br i1 %120, label %124, label %121

121:                                              ; preds = %119
  %122 = load ptr, ptr @stderr, align 8, !tbaa !10
  %123 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %122, ptr noundef nonnull @.str.67, ptr noundef nonnull @.str.68, ptr noundef nonnull @.str.69) #34
  store i1 true, ptr @parse_switches.printed_version, align 4
  br label %124

124:                                              ; preds = %121, %119
  %125 = load ptr, ptr %0, align 8, !tbaa !16
  %126 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %125, i64 0, i32 7
  %127 = load i32, ptr %126, align 4, !tbaa !38
  %128 = add nsw i32 %127, 1
  store i32 %128, ptr %126, align 4, !tbaa !38
  br label %247

129:                                              ; preds = %116
  %130 = call i32 @keymatch(ptr noundef nonnull %34, ptr noundef nonnull @.str.59, i32 noundef 1) #32
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %137, label %132

132:                                              ; preds = %129
  store i32 0, ptr %16, align 4, !tbaa !46
  store i32 1, ptr %15, align 8, !tbaa !45
  %133 = load i32, ptr %13, align 4, !tbaa !43
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %135, label %136

135:                                              ; preds = %132
  store i32 216, ptr %12, align 8, !tbaa !42
  br label %136

136:                                              ; preds = %135, %132
  store i32 1, ptr %14, align 8, !tbaa !44
  store i32 0, ptr %17, align 4, !tbaa !47
  br label %247

137:                                              ; preds = %129
  %138 = call i32 @keymatch(ptr noundef nonnull %34, ptr noundef nonnull @.str.70, i32 noundef 1) #32
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %141, label %140

140:                                              ; preds = %137
  store i32 1, ptr @requested_fmt, align 4, !tbaa !7
  br label %247

141:                                              ; preds = %137
  %142 = call i32 @keymatch(ptr noundef nonnull %34, ptr noundef nonnull @.str.71, i32 noundef 2) #32
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %144, label %147

144:                                              ; preds = %141
  %145 = call i32 @keymatch(ptr noundef nonnull %34, ptr noundef nonnull @.str.72, i32 noundef 2) #32
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %148, label %147

147:                                              ; preds = %144, %141
  store i32 1, ptr %18, align 8, !tbaa !48
  br label %247

148:                                              ; preds = %144
  %149 = call i32 @keymatch(ptr noundef nonnull %34, ptr noundef nonnull @.str.73, i32 noundef 3) #32
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %170, label %151

151:                                              ; preds = %148
  %152 = add nsw i32 %24, 1
  %153 = icmp slt i32 %152, %1
  br i1 %153, label %155, label %154

154:                                              ; preds = %151
  call fastcc void @usage() #33
  unreachable

155:                                              ; preds = %151
  br i1 %19, label %247, label %156

156:                                              ; preds = %155
  %157 = sext i32 %152 to i64
  %158 = getelementptr inbounds ptr, ptr %2, i64 %157
  %159 = load ptr, ptr %158, align 8, !tbaa !10
  %160 = call noalias ptr @fopen(ptr noundef %159, ptr noundef nonnull @.str.2) #33
  %161 = icmp eq ptr %160, null
  br i1 %161, label %162, label %168

162:                                              ; preds = %156
  %.lcssa = phi i64 [ %157, %156 ]
  %163 = getelementptr inbounds ptr, ptr %2, i64 %.lcssa
  %164 = load ptr, ptr @stderr, align 8, !tbaa !10
  %165 = load ptr, ptr @progname, align 8, !tbaa !10
  %166 = load ptr, ptr %163, align 8, !tbaa !10
  %167 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %164, ptr noundef nonnull @.str.3, ptr noundef %165, ptr noundef %166) #34
  call void @exit(i32 noundef 1) #35
  unreachable

168:                                              ; preds = %156
  call void @read_color_map(ptr noundef nonnull %0, ptr noundef nonnull %160) #32
  %169 = call i32 @fclose(ptr noundef nonnull %160) #33
  store i32 1, ptr %13, align 4, !tbaa !43
  br label %247

170:                                              ; preds = %148
  %171 = call i32 @keymatch(ptr noundef nonnull %34, ptr noundef nonnull @.str.74, i32 noundef 3) #32
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %194, label %173

173:                                              ; preds = %170
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #31
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %7) #31
  store i8 120, ptr %7, align 1, !tbaa !7
  %174 = add nsw i32 %24, 1
  %175 = icmp slt i32 %174, %1
  br i1 %175, label %177, label %176

176:                                              ; preds = %173
  call fastcc void @usage() #33
  unreachable

177:                                              ; preds = %173
  %178 = sext i32 %174 to i64
  %179 = getelementptr inbounds ptr, ptr %2, i64 %178
  %180 = load ptr, ptr %179, align 8, !tbaa !10
  %181 = call i32 (ptr, ptr, ...) @__isoc99_sscanf(ptr noundef %180, ptr noundef nonnull @.str.75, ptr noundef nonnull %6, ptr noundef nonnull %7) #32
  %182 = icmp slt i32 %181, 1
  br i1 %182, label %183, label %184

183:                                              ; preds = %177
  call fastcc void @usage() #33
  unreachable

184:                                              ; preds = %177
  %185 = load i8, ptr %7, align 1
  %186 = and i8 %185, -33
  %187 = icmp eq i8 %186, 77
  %188 = load i64, ptr %6, align 8, !tbaa !49
  %189 = mul nsw i64 %188, 1000
  %190 = select i1 %187, i64 %189, i64 %188
  %191 = mul nsw i64 %190, 1000
  %192 = load ptr, ptr %20, align 8, !tbaa !50
  %193 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %192, i64 0, i32 11
  store i64 %191, ptr %193, align 8, !tbaa !51
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %7) #31
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #31
  br label %247

194:                                              ; preds = %170
  %195 = call i32 @keymatch(ptr noundef nonnull %34, ptr noundef nonnull @.str.76, i32 noundef 3) #32
  %196 = icmp eq i32 %195, 0
  br i1 %196, label %198, label %197

197:                                              ; preds = %194
  store i32 0, ptr %17, align 4, !tbaa !47
  br label %247

198:                                              ; preds = %194
  %199 = call i32 @keymatch(ptr noundef nonnull %34, ptr noundef nonnull @.str.77, i32 noundef 3) #32
  %200 = icmp eq i32 %199, 0
  br i1 %200, label %202, label %201

201:                                              ; preds = %198
  store i32 0, ptr %16, align 4, !tbaa !46
  br label %247

202:                                              ; preds = %198
  %203 = call i32 @keymatch(ptr noundef nonnull %34, ptr noundef nonnull @.str.78, i32 noundef 3) #32
  %204 = icmp eq i32 %203, 0
  br i1 %204, label %206, label %205

205:                                              ; preds = %202
  store i32 2, ptr @requested_fmt, align 4, !tbaa !7
  br label %247

206:                                              ; preds = %202
  %207 = call i32 @keymatch(ptr noundef nonnull %34, ptr noundef nonnull @.str.79, i32 noundef 4) #32
  %208 = icmp eq i32 %207, 0
  br i1 %208, label %217, label %209

209:                                              ; preds = %206
  %210 = add nsw i32 %24, 1
  %211 = icmp slt i32 %210, %1
  br i1 %211, label %213, label %212

212:                                              ; preds = %209
  call fastcc void @usage() #33
  unreachable

213:                                              ; preds = %209
  %214 = sext i32 %210 to i64
  %215 = getelementptr inbounds ptr, ptr %2, i64 %214
  %216 = load ptr, ptr %215, align 8, !tbaa !10
  store ptr %216, ptr @outfilename, align 8, !tbaa !10
  br label %247

217:                                              ; preds = %206
  %218 = call i32 @keymatch(ptr noundef nonnull %34, ptr noundef nonnull @.str.80, i32 noundef 1) #32
  %219 = icmp eq i32 %218, 0
  br i1 %219, label %220, label %223

220:                                              ; preds = %217
  %221 = call i32 @keymatch(ptr noundef nonnull %34, ptr noundef nonnull @.str.81, i32 noundef 1) #32
  %222 = icmp eq i32 %221, 0
  br i1 %222, label %224, label %223

223:                                              ; preds = %220, %217
  store i32 3, ptr @requested_fmt, align 4, !tbaa !7
  br label %247

224:                                              ; preds = %220
  %225 = call i32 @keymatch(ptr noundef nonnull %34, ptr noundef nonnull @.str.82, i32 noundef 1) #32
  %226 = icmp eq i32 %225, 0
  br i1 %226, label %228, label %227

227:                                              ; preds = %224
  store i32 4, ptr @requested_fmt, align 4, !tbaa !7
  br label %247

228:                                              ; preds = %224
  %229 = call i32 @keymatch(ptr noundef nonnull %34, ptr noundef nonnull @.str.83, i32 noundef 1) #32
  %230 = icmp eq i32 %229, 0
  br i1 %230, label %242, label %231

231:                                              ; preds = %228
  %232 = add nsw i32 %24, 1
  %233 = icmp slt i32 %232, %1
  br i1 %233, label %235, label %234

234:                                              ; preds = %231
  call fastcc void @usage() #33
  unreachable

235:                                              ; preds = %231
  %236 = sext i32 %232 to i64
  %237 = getelementptr inbounds ptr, ptr %2, i64 %236
  %238 = load ptr, ptr %237, align 8, !tbaa !10
  %239 = call i32 (ptr, ptr, ...) @__isoc99_sscanf(ptr noundef %238, ptr noundef nonnull @.str.84, ptr noundef nonnull %21, ptr noundef nonnull %22) #32
  %240 = icmp eq i32 %239, 2
  br i1 %240, label %247, label %241

241:                                              ; preds = %235
  call fastcc void @usage() #33
  unreachable

242:                                              ; preds = %228
  %243 = call i32 @keymatch(ptr noundef nonnull %34, ptr noundef nonnull @.str.85, i32 noundef 1) #32
  %244 = icmp eq i32 %243, 0
  br i1 %244, label %246, label %245

245:                                              ; preds = %242
  store i32 5, ptr @requested_fmt, align 4, !tbaa !7
  br label %247

246:                                              ; preds = %242
  call fastcc void @usage() #33
  unreachable

247:                                              ; preds = %245, %235, %227, %223, %213, %205, %201, %197, %184, %168, %155, %147, %140, %136, %124, %111, %106, %101, %86, %81, %76, %61, %37, %32
  %248 = phi i32 [ %24, %32 ], [ %24, %37 ], [ %51, %61 ], [ %67, %76 ], [ %67, %81 ], [ %67, %86 ], [ %92, %101 ], [ %92, %106 ], [ %92, %111 ], [ %24, %124 ], [ %24, %136 ], [ %24, %140 ], [ %24, %147 ], [ %152, %168 ], [ %152, %155 ], [ %174, %184 ], [ %24, %197 ], [ %24, %201 ], [ %24, %205 ], [ %210, %213 ], [ %24, %223 ], [ %24, %227 ], [ %232, %235 ], [ %24, %245 ]
  %249 = add nsw i32 %248, 1
  %250 = icmp slt i32 %249, %1
  br i1 %250, label %23, label %251, !llvm.loop !53

251:                                              ; preds = %247, %30, %4
  %252 = phi i32 [ 1, %4 ], [ %24, %30 ], [ %249, %247 ]
  ret i32 %252
}

; Function Attrs: nofree nounwind optsize
declare noundef i32 @fprintf(ptr nocapture noundef, ptr nocapture noundef readonly, ...) local_unnamed_addr #7

; Function Attrs: noreturn nounwind optsize uwtable
define internal fastcc void @usage() unnamed_addr #4 {
  %1 = load ptr, ptr @stderr, align 8, !tbaa !10
  %2 = load ptr, ptr @progname, align 8, !tbaa !10
  %3 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %1, ptr noundef nonnull @.str.86, ptr noundef %2) #34
  %4 = load ptr, ptr @stderr, align 8, !tbaa !10
  %5 = tail call i64 @fwrite(ptr nonnull @.str.87, i64 12, i64 1, ptr %4) #36
  %6 = load ptr, ptr @stderr, align 8, !tbaa !10
  %7 = tail call i64 @fwrite(ptr nonnull @.str.88, i64 37, i64 1, ptr %6) #36
  %8 = load ptr, ptr @stderr, align 8, !tbaa !10
  %9 = tail call i64 @fwrite(ptr nonnull @.str.89, i64 55, i64 1, ptr %8) #36
  %10 = load ptr, ptr @stderr, align 8, !tbaa !10
  %11 = tail call i64 @fwrite(ptr nonnull @.str.90, i64 46, i64 1, ptr %10) #36
  %12 = load ptr, ptr @stderr, align 8, !tbaa !10
  %13 = tail call i64 @fwrite(ptr nonnull @.str.91, i64 40, i64 1, ptr %12) #36
  %14 = load ptr, ptr @stderr, align 8, !tbaa !10
  %15 = tail call i64 @fwrite(ptr nonnull @.str.92, i64 61, i64 1, ptr %14) #36
  %16 = load ptr, ptr @stderr, align 8, !tbaa !10
  %17 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %16, ptr noundef nonnull @.str.93, ptr noundef nonnull @.str.94) #34
  %18 = load ptr, ptr @stderr, align 8, !tbaa !10
  %19 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %18, ptr noundef nonnull @.str.95, ptr noundef nonnull @.str.94) #34
  %20 = load ptr, ptr @stderr, align 8, !tbaa !10
  %21 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %20, ptr noundef nonnull @.str.96, ptr noundef nonnull @.str.94) #34
  %22 = load ptr, ptr @stderr, align 8, !tbaa !10
  %23 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.97, ptr noundef nonnull @.str.98) #34
  %24 = load ptr, ptr @stderr, align 8, !tbaa !10
  %25 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %24, ptr noundef nonnull @.str.99, ptr noundef nonnull @.str.94) #34
  %26 = load ptr, ptr @stderr, align 8, !tbaa !10
  %27 = tail call i64 @fwrite(ptr nonnull @.str.100, i64 29, i64 1, ptr %26) #36
  %28 = load ptr, ptr @stderr, align 8, !tbaa !10
  %29 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %28, ptr noundef nonnull @.str.101, ptr noundef nonnull @.str.98) #34
  %30 = load ptr, ptr @stderr, align 8, !tbaa !10
  %31 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %30, ptr noundef nonnull @.str.102, ptr noundef nonnull @.str.94) #34
  %32 = load ptr, ptr @stderr, align 8, !tbaa !10
  %33 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %32, ptr noundef nonnull @.str.103, ptr noundef nonnull @.str.94) #34
  %34 = load ptr, ptr @stderr, align 8, !tbaa !10
  %35 = tail call i64 @fwrite(ptr nonnull @.str.104, i64 45, i64 1, ptr %34) #36
  %36 = load ptr, ptr @stderr, align 8, !tbaa !10
  %37 = tail call i64 @fwrite(ptr nonnull @.str.105, i64 53, i64 1, ptr %36) #36
  %38 = load ptr, ptr @stderr, align 8, !tbaa !10
  %39 = tail call i64 @fwrite(ptr nonnull @.str.106, i64 62, i64 1, ptr %38) #36
  %40 = load ptr, ptr @stderr, align 8, !tbaa !10
  %41 = tail call i64 @fwrite(ptr nonnull @.str.107, i64 56, i64 1, ptr %40) #36
  %42 = load ptr, ptr @stderr, align 8, !tbaa !10
  %43 = tail call i64 @fwrite(ptr nonnull @.str.108, i64 51, i64 1, ptr %42) #36
  %44 = load ptr, ptr @stderr, align 8, !tbaa !10
  %45 = tail call i64 @fwrite(ptr nonnull @.str.109, i64 61, i64 1, ptr %44) #36
  %46 = load ptr, ptr @stderr, align 8, !tbaa !10
  %47 = tail call i64 @fwrite(ptr nonnull @.str.110, i64 51, i64 1, ptr %46) #36
  %48 = load ptr, ptr @stderr, align 8, !tbaa !10
  %49 = tail call i64 @fwrite(ptr nonnull @.str.111, i64 46, i64 1, ptr %48) #36
  %50 = load ptr, ptr @stderr, align 8, !tbaa !10
  %51 = tail call i64 @fwrite(ptr nonnull @.str.112, i64 43, i64 1, ptr %50) #36
  tail call void @exit(i32 noundef 1) #35
  unreachable
}

; Function Attrs: nofree nounwind optsize
declare noalias noundef ptr @fopen(ptr nocapture noundef readonly, ptr nocapture noundef readonly) local_unnamed_addr #7

; Function Attrs: noreturn nounwind optsize
declare void @exit(i32 noundef) local_unnamed_addr #8

; Function Attrs: nofree nounwind optsize
declare noundef i32 @fclose(ptr nocapture noundef) local_unnamed_addr #7

; Function Attrs: nofree nounwind
declare noundef i64 @fwrite(ptr nocapture noundef, i64 noundef, i64 noundef, ptr nocapture noundef) local_unnamed_addr #9

; Function Attrs: nofree nounwind optsize
declare noundef i32 @__isoc99_sscanf(ptr nocapture noundef readonly, ptr nocapture noundef readonly, ...) local_unnamed_addr #7

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #5

; Function Attrs: nounwind optsize uwtable
define internal fastcc i32 @jpeg_getc(ptr noundef %0) unnamed_addr #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 5
  %3 = load ptr, ptr %2, align 8, !tbaa !54
  %4 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %3, i64 0, i32 1
  %5 = load i64, ptr %4, align 8, !tbaa !55
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %16

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %3, i64 0, i32 3
  %9 = load ptr, ptr %8, align 8, !tbaa !57
  %10 = tail call i32 %9(ptr noundef nonnull %0) #32
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %16

12:                                               ; preds = %7
  %13 = load ptr, ptr %0, align 8, !tbaa !16
  %14 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %13, i64 0, i32 5
  store i32 22, ptr %14, align 8, !tbaa !25
  %15 = load ptr, ptr %13, align 8, !tbaa !26
  tail call void %15(ptr noundef nonnull %0) #32
  br label %16

16:                                               ; preds = %12, %7, %1
  %17 = load i64, ptr %4, align 8, !tbaa !55
  %18 = add i64 %17, -1
  store i64 %18, ptr %4, align 8, !tbaa !55
  %19 = load ptr, ptr %3, align 8, !tbaa !58
  %20 = getelementptr inbounds i8, ptr %19, i64 1
  store ptr %20, ptr %3, align 8, !tbaa !58
  %21 = load i8, ptr %19, align 1, !tbaa !7
  %22 = zext i8 %21 to i32
  ret i32 %22
}

; Function Attrs: nofree nounwind
declare noundef i32 @fputc(i32 noundef, ptr nocapture noundef) local_unnamed_addr #9

; Function Attrs: nofree nounwind optsize
declare noundef i32 @putc(i32 noundef, ptr nocapture noundef) local_unnamed_addr #7

; Function Attrs: nounwind optsize uwtable
define internal void @jpeg_abort(ptr noundef %0) #6 {
  %2 = getelementptr inbounds %struct.jpeg_common_struct, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !59
  %4 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %3, i64 0, i32 9
  %5 = load ptr, ptr %4, align 8, !tbaa !61
  tail call void %5(ptr noundef %0, i32 noundef 1) #32
  %6 = getelementptr inbounds %struct.jpeg_common_struct, ptr %0, i64 0, i32 3
  %7 = load i32, ptr %6, align 8, !tbaa !62
  %8 = icmp eq i32 %7, 0
  %9 = select i1 %8, i32 100, i32 200
  %10 = getelementptr inbounds %struct.jpeg_common_struct, ptr %0, i64 0, i32 4
  store i32 %9, ptr %10, align 4, !tbaa !63
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @jpeg_destroy(ptr noundef %0) #6 {
  %2 = getelementptr inbounds %struct.jpeg_common_struct, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !59
  %4 = icmp eq ptr %3, null
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %3, i64 0, i32 10
  %7 = load ptr, ptr %6, align 8, !tbaa !64
  tail call void %7(ptr noundef nonnull %0) #32
  br label %8

8:                                                ; preds = %5, %1
  store ptr null, ptr %2, align 8, !tbaa !59
  %9 = getelementptr inbounds %struct.jpeg_common_struct, ptr %0, i64 0, i32 4
  store i32 0, ptr %9, align 4, !tbaa !63
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @jpeg_alloc_quant_table(ptr noundef %0) #6 {
  %2 = getelementptr inbounds %struct.jpeg_common_struct, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !59
  %4 = load ptr, ptr %3, align 8, !tbaa !65
  %5 = tail call ptr %4(ptr noundef %0, i32 noundef 0, i64 noundef 132) #32
  %6 = getelementptr inbounds %struct.JQUANT_TBL.58, ptr %5, i64 0, i32 1
  store i32 0, ptr %6, align 4, !tbaa !66
  ret ptr %5
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @jpeg_alloc_huff_table(ptr noundef %0) #6 {
  %2 = getelementptr inbounds %struct.jpeg_common_struct, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !59
  %4 = load ptr, ptr %3, align 8, !tbaa !65
  %5 = tail call ptr %4(ptr noundef %0, i32 noundef 0, i64 noundef 280) #32
  %6 = getelementptr inbounds %struct.JHUFF_TBL.59, ptr %5, i64 0, i32 2
  store i32 0, ptr %6, align 4, !tbaa !68
  ret ptr %5
}

; Function Attrs: nounwind optsize uwtable
define internal void @jpeg_CreateDecompress(ptr noundef %0, i32 noundef %1, i64 noundef %2) #6 {
  %4 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  store ptr null, ptr %4, align 8, !tbaa !50
  %5 = icmp eq i32 %1, 61
  br i1 %5, label %14, label %6

6:                                                ; preds = %3
  %7 = load ptr, ptr %0, align 8, !tbaa !16
  %8 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %7, i64 0, i32 5
  store i32 10, ptr %8, align 8, !tbaa !25
  %9 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %7, i64 0, i32 6
  store i32 61, ptr %9, align 4, !tbaa !7
  %10 = load ptr, ptr %0, align 8, !tbaa !16
  %11 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %10, i64 0, i32 6, i32 0, i64 1
  store i32 %1, ptr %11, align 4, !tbaa !7
  %12 = load ptr, ptr %0, align 8, !tbaa !16
  %13 = load ptr, ptr %12, align 8, !tbaa !26
  tail call void %13(ptr noundef nonnull %0) #32
  br label %14

14:                                               ; preds = %6, %3
  %15 = icmp eq i64 %2, 616
  br i1 %15, label %25, label %16

16:                                               ; preds = %14
  %17 = load ptr, ptr %0, align 8, !tbaa !16
  %18 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %17, i64 0, i32 5
  store i32 19, ptr %18, align 8, !tbaa !25
  %19 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %17, i64 0, i32 6
  store i32 616, ptr %19, align 4, !tbaa !7
  %20 = trunc i64 %2 to i32
  %21 = load ptr, ptr %0, align 8, !tbaa !16
  %22 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %21, i64 0, i32 6, i32 0, i64 1
  store i32 %20, ptr %22, align 4, !tbaa !7
  %23 = load ptr, ptr %0, align 8, !tbaa !16
  %24 = load ptr, ptr %23, align 8, !tbaa !26
  tail call void %24(ptr noundef nonnull %0) #32
  br label %25

25:                                               ; preds = %16, %14
  %26 = load ptr, ptr %0, align 8, !tbaa !16
  %27 = getelementptr inbounds i8, ptr %0, i64 8
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(616) %27, i8 0, i64 608, i1 false)
  store ptr %26, ptr %0, align 8, !tbaa !16
  %28 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 3
  store i32 1, ptr %28, align 8, !tbaa !70
  tail call void @jinit_memory_mgr(ptr noundef nonnull %0) #32
  %29 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 2
  store ptr null, ptr %29, align 8, !tbaa !71
  %30 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 5
  store ptr null, ptr %30, align 8, !tbaa !54
  %31 = getelementptr i8, ptr %0, i64 192
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(96) %31, i8 0, i64 96, i1 false)
  tail call void @jinit_marker_reader(ptr noundef nonnull %0) #32
  tail call void @jinit_input_controller(ptr noundef nonnull %0) #32
  %32 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 4
  store i32 200, ptr %32, align 4, !tbaa !72
  ret void
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #10

; Function Attrs: nounwind optsize uwtable
define internal void @jpeg_destroy_decompress(ptr noundef %0) #6 {
  tail call void @jpeg_destroy(ptr noundef %0) #32
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @jpeg_set_marker_processor(ptr noundef %0, i32 noundef %1, ptr noundef %2) #6 {
  %4 = icmp eq i32 %1, 254
  br i1 %4, label %5, label %9

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 78
  %7 = load ptr, ptr %6, align 8, !tbaa !73
  %8 = getelementptr inbounds %struct.jpeg_marker_reader, ptr %7, i64 0, i32 3
  store ptr %2, ptr %8, align 8, !tbaa !74
  br label %24

9:                                                ; preds = %3
  %10 = and i32 %1, -16
  %11 = icmp eq i32 %10, 224
  br i1 %11, label %12, label %18

12:                                               ; preds = %9
  %13 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 78
  %14 = load ptr, ptr %13, align 8, !tbaa !73
  %15 = add nsw i32 %1, -224
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds %struct.jpeg_marker_reader, ptr %14, i64 0, i32 4, i64 %16
  store ptr %2, ptr %17, align 8, !tbaa !10
  br label %24

18:                                               ; preds = %9
  %19 = load ptr, ptr %0, align 8, !tbaa !16
  %20 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %19, i64 0, i32 5
  store i32 67, ptr %20, align 8, !tbaa !25
  %21 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %19, i64 0, i32 6
  store i32 %1, ptr %21, align 4, !tbaa !7
  %22 = load ptr, ptr %0, align 8, !tbaa !16
  %23 = load ptr, ptr %22, align 8, !tbaa !26
  tail call void %23(ptr noundef nonnull %0) #32
  br label %24

24:                                               ; preds = %18, %12, %5
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @jpeg_read_header(ptr noundef %0, i32 noundef %1) #6 {
  %3 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 4
  %4 = load i32, ptr %3, align 4, !tbaa !72
  %5 = and i32 %4, -2
  %6 = icmp eq i32 %5, 200
  br i1 %6, label %13, label %7

7:                                                ; preds = %2
  %8 = load ptr, ptr %0, align 8, !tbaa !16
  %9 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %8, i64 0, i32 5
  store i32 18, ptr %9, align 8, !tbaa !25
  %10 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %8, i64 0, i32 6
  store i32 %4, ptr %10, align 4, !tbaa !7
  %11 = load ptr, ptr %0, align 8, !tbaa !16
  %12 = load ptr, ptr %11, align 8, !tbaa !26
  tail call void %12(ptr noundef nonnull %0) #32
  br label %13

13:                                               ; preds = %7, %2
  %14 = tail call i32 @jpeg_consume_input(ptr noundef nonnull %0) #33
  %15 = icmp eq i32 %14, 2
  br i1 %15, label %16, label %23

16:                                               ; preds = %13
  %17 = icmp eq i32 %1, 0
  br i1 %17, label %22, label %18

18:                                               ; preds = %16
  %19 = load ptr, ptr %0, align 8, !tbaa !16
  %20 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %19, i64 0, i32 5
  store i32 50, ptr %20, align 8, !tbaa !25
  %21 = load ptr, ptr %19, align 8, !tbaa !26
  tail call void %21(ptr noundef nonnull %0) #32
  br label %22

22:                                               ; preds = %18, %16
  tail call void @jpeg_abort(ptr noundef nonnull %0) #32
  br label %23

23:                                               ; preds = %22, %13
  ret i32 %14
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @jpeg_consume_input(ptr noundef %0) #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 4
  %3 = load i32, ptr %2, align 4, !tbaa !72
  switch i32 %3, label %103 [
    i32 200, label %4
    i32 201, label %13
    i32 202, label %109
    i32 203, label %98
    i32 204, label %98
    i32 205, label %98
    i32 206, label %98
    i32 207, label %98
    i32 208, label %98
    i32 210, label %98
  ]

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 77
  %6 = load ptr, ptr %5, align 8, !tbaa !76
  %7 = getelementptr inbounds %struct.jpeg_input_controller, ptr %6, i64 0, i32 1
  %8 = load ptr, ptr %7, align 8, !tbaa !77
  tail call void %8(ptr noundef nonnull %0) #32
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 5
  %10 = load ptr, ptr %9, align 8, !tbaa !54
  %11 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %10, i64 0, i32 2
  %12 = load ptr, ptr %11, align 8, !tbaa !79
  tail call void %12(ptr noundef nonnull %0) #32
  store i32 201, ptr %2, align 4, !tbaa !72
  br label %13

13:                                               ; preds = %4, %1
  %14 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 77
  %15 = load ptr, ptr %14, align 8, !tbaa !76
  %16 = load ptr, ptr %15, align 8, !tbaa !80
  %17 = tail call i32 %16(ptr noundef nonnull %0) #32
  %18 = icmp eq i32 %17, 1
  br i1 %18, label %19, label %109

19:                                               ; preds = %13
  %20 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 8
  %21 = load i32, ptr %20, align 8, !tbaa !81
  switch i32 %21, label %85 [
    i32 1, label %86
    i32 3, label %22
    i32 4, label %69
  ]

22:                                               ; preds = %19
  %23 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 50
  %24 = load i32, ptr %23, align 4, !tbaa !82
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %86

26:                                               ; preds = %22
  %27 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 54
  %28 = load i32, ptr %27, align 8, !tbaa !83
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %42, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 55
  %32 = load i8, ptr %31, align 4, !tbaa !84
  switch i8 %32, label %34 [
    i8 0, label %86
    i8 1, label %33
  ]

33:                                               ; preds = %30
  br label %86

34:                                               ; preds = %30
  %35 = load ptr, ptr %0, align 8, !tbaa !16
  %36 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %35, i64 0, i32 5
  store i32 110, ptr %36, align 8, !tbaa !25
  %37 = zext i8 %32 to i32
  %38 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %35, i64 0, i32 6
  store i32 %37, ptr %38, align 4, !tbaa !7
  %39 = load ptr, ptr %0, align 8, !tbaa !16
  %40 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %39, i64 0, i32 1
  %41 = load ptr, ptr %40, align 8, !tbaa !85
  tail call void %41(ptr noundef nonnull %0, i32 noundef -1) #32
  br label %86

42:                                               ; preds = %26
  %43 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 43
  %44 = load ptr, ptr %43, align 8, !tbaa !86
  %45 = load i32, ptr %44, align 8, !tbaa !87
  %46 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %44, i64 1
  %47 = load i32, ptr %46, align 8, !tbaa !87
  %48 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %44, i64 2
  %49 = load i32, ptr %48, align 8, !tbaa !87
  %50 = icmp eq i32 %45, 1
  %51 = icmp eq i32 %47, 2
  %52 = select i1 %50, i1 %51, i1 false
  %53 = icmp eq i32 %49, 3
  %54 = select i1 %52, i1 %53, i1 false
  br i1 %54, label %86, label %55

55:                                               ; preds = %42
  %56 = icmp eq i32 %45, 82
  %57 = icmp eq i32 %47, 71
  %58 = select i1 %56, i1 %57, i1 false
  %59 = icmp eq i32 %49, 66
  %60 = select i1 %58, i1 %59, i1 false
  br i1 %60, label %86, label %61

61:                                               ; preds = %55
  %62 = load ptr, ptr %0, align 8, !tbaa !16
  %63 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %62, i64 0, i32 6
  store i32 %45, ptr %63, align 4, !tbaa !41
  %64 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %62, i64 0, i32 6, i32 0, i64 1
  store i32 %47, ptr %64, align 4, !tbaa !41
  %65 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %62, i64 0, i32 6, i32 0, i64 2
  store i32 %49, ptr %65, align 4, !tbaa !41
  %66 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %62, i64 0, i32 5
  store i32 107, ptr %66, align 8, !tbaa !25
  %67 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %62, i64 0, i32 1
  %68 = load ptr, ptr %67, align 8, !tbaa !85
  tail call void %68(ptr noundef nonnull %0, i32 noundef 1) #32
  br label %86

69:                                               ; preds = %19
  %70 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 54
  %71 = load i32, ptr %70, align 8, !tbaa !83
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %86, label %73

73:                                               ; preds = %69
  %74 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 55
  %75 = load i8, ptr %74, align 4, !tbaa !84
  switch i8 %75, label %77 [
    i8 0, label %86
    i8 2, label %76
  ]

76:                                               ; preds = %73
  br label %86

77:                                               ; preds = %73
  %78 = load ptr, ptr %0, align 8, !tbaa !16
  %79 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %78, i64 0, i32 5
  store i32 110, ptr %79, align 8, !tbaa !25
  %80 = zext i8 %75 to i32
  %81 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %78, i64 0, i32 6
  store i32 %80, ptr %81, align 4, !tbaa !7
  %82 = load ptr, ptr %0, align 8, !tbaa !16
  %83 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %82, i64 0, i32 1
  %84 = load ptr, ptr %83, align 8, !tbaa !85
  tail call void %84(ptr noundef nonnull %0, i32 noundef -1) #32
  br label %86

85:                                               ; preds = %19
  br label %86

86:                                               ; preds = %85, %77, %76, %73, %69, %61, %55, %42, %34, %33, %30, %22, %19
  %87 = phi i32 [ 0, %85 ], [ %21, %19 ], [ 3, %61 ], [ 3, %34 ], [ 3, %33 ], [ 3, %22 ], [ 2, %30 ], [ 3, %42 ], [ 2, %55 ], [ 5, %76 ], [ 5, %77 ], [ 4, %73 ], [ 4, %69 ]
  %88 = phi i32 [ 0, %85 ], [ %21, %19 ], [ 2, %61 ], [ 2, %34 ], [ 2, %33 ], [ 2, %22 ], [ 2, %30 ], [ 2, %42 ], [ 2, %55 ], [ 4, %76 ], [ 4, %77 ], [ 4, %73 ], [ 4, %69 ]
  %89 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 9
  store i32 %87, ptr %89, align 4, !tbaa !89
  %90 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 10
  store i32 %88, ptr %90, align 8, !tbaa !48
  %91 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 11
  store i32 1, ptr %91, align 4, !tbaa !90
  %92 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 12
  store i32 1, ptr %92, align 8, !tbaa !91
  %93 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 13
  store double 1.000000e+00, ptr %93, align 8, !tbaa !92
  %94 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 14
  store <4 x i32> <i32 0, i32 0, i32 0, i32 1>, ptr %94, align 8, !tbaa !7
  %95 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 18
  store <4 x i32> <i32 1, i32 0, i32 2, i32 1>, ptr %95, align 8, !tbaa !7
  %96 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 22
  %97 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 32
  store ptr null, ptr %97, align 8, !tbaa !93
  store <4 x i32> <i32 256, i32 0, i32 0, i32 0>, ptr %96, align 8, !tbaa !41
  store i32 202, ptr %2, align 4, !tbaa !72
  br label %109

98:                                               ; preds = %1, %1, %1, %1, %1, %1, %1
  %99 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 77
  %100 = load ptr, ptr %99, align 8, !tbaa !76
  %101 = load ptr, ptr %100, align 8, !tbaa !80
  %102 = tail call i32 %101(ptr noundef nonnull %0) #32
  br label %109

103:                                              ; preds = %1
  %104 = load ptr, ptr %0, align 8, !tbaa !16
  %105 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %104, i64 0, i32 5
  store i32 18, ptr %105, align 8, !tbaa !25
  %106 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %104, i64 0, i32 6
  store i32 %3, ptr %106, align 4, !tbaa !7
  %107 = load ptr, ptr %0, align 8, !tbaa !16
  %108 = load ptr, ptr %107, align 8, !tbaa !26
  tail call void %108(ptr noundef nonnull %0) #32
  br label %109

109:                                              ; preds = %103, %98, %86, %13, %1
  %110 = phi i32 [ 0, %103 ], [ %102, %98 ], [ 1, %86 ], [ %17, %13 ], [ 1, %1 ]
  ret i32 %110
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @jpeg_finish_decompress(ptr noundef %0) #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 4
  %3 = load i32, ptr %2, align 4, !tbaa !72
  %4 = add i32 %3, -205
  %5 = icmp ult i32 %4, 2
  br i1 %5, label %6, label %25

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 14
  %8 = load i32, ptr %7, align 8, !tbaa !94
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %25

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 33
  %12 = load i32, ptr %11, align 8, !tbaa !30
  %13 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 27
  %14 = load i32, ptr %13, align 4, !tbaa !31
  %15 = icmp ult i32 %12, %14
  br i1 %15, label %16, label %20

16:                                               ; preds = %10
  %17 = load ptr, ptr %0, align 8, !tbaa !16
  %18 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %17, i64 0, i32 5
  store i32 66, ptr %18, align 8, !tbaa !25
  %19 = load ptr, ptr %17, align 8, !tbaa !26
  tail call void %19(ptr noundef nonnull %0) #32
  br label %20

20:                                               ; preds = %16, %10
  %21 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 73
  %22 = load ptr, ptr %21, align 8, !tbaa !95
  %23 = getelementptr inbounds %struct.jpeg_decomp_master, ptr %22, i64 0, i32 1
  %24 = load ptr, ptr %23, align 8, !tbaa !96
  tail call void %24(ptr noundef nonnull %0) #32
  store i32 210, ptr %2, align 4, !tbaa !72
  br label %33

25:                                               ; preds = %6, %1
  switch i32 %3, label %27 [
    i32 207, label %26
    i32 210, label %33
  ]

26:                                               ; preds = %25
  store i32 210, ptr %2, align 4, !tbaa !72
  br label %33

27:                                               ; preds = %25
  %28 = load ptr, ptr %0, align 8, !tbaa !16
  %29 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %28, i64 0, i32 5
  store i32 18, ptr %29, align 8, !tbaa !25
  %30 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %28, i64 0, i32 6
  store i32 %3, ptr %30, align 4, !tbaa !7
  %31 = load ptr, ptr %0, align 8, !tbaa !16
  %32 = load ptr, ptr %31, align 8, !tbaa !26
  tail call void %32(ptr noundef nonnull %0) #32
  br label %33

33:                                               ; preds = %27, %26, %25, %20
  %34 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 77
  br label %35

35:                                               ; preds = %40, %33
  %36 = load ptr, ptr %34, align 8, !tbaa !76
  %37 = getelementptr inbounds %struct.jpeg_input_controller, ptr %36, i64 0, i32 5
  %38 = load i32, ptr %37, align 4, !tbaa !98
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %44

40:                                               ; preds = %35
  %41 = load ptr, ptr %36, align 8, !tbaa !80
  %42 = tail call i32 %41(ptr noundef nonnull %0) #32
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %49, label %35, !llvm.loop !99

44:                                               ; preds = %35
  %45 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 5
  %46 = load ptr, ptr %45, align 8, !tbaa !54
  %47 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %46, i64 0, i32 6
  %48 = load ptr, ptr %47, align 8, !tbaa !100
  tail call void %48(ptr noundef nonnull %0) #32
  tail call void @jpeg_abort(ptr noundef nonnull %0) #32
  br label %49

49:                                               ; preds = %44, %40
  %50 = phi i32 [ 1, %44 ], [ 0, %40 ]
  ret i32 %50
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @jpeg_start_decompress(ptr noundef %0) #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 4
  %3 = load i32, ptr %2, align 4, !tbaa !72
  switch i32 %3, label %51 [
    i32 202, label %4
    i32 203, label %10
    i32 204, label %57
  ]

4:                                                ; preds = %1
  tail call void @jinit_master_decompress(ptr noundef nonnull %0) #32
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 14
  %6 = load i32, ptr %5, align 8, !tbaa !94
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %9, label %8

8:                                                ; preds = %4
  store i32 207, ptr %2, align 4, !tbaa !72
  br label %59

9:                                                ; preds = %4
  store i32 203, ptr %2, align 4, !tbaa !72
  br label %10

10:                                               ; preds = %9, %1
  %11 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 77
  %12 = load ptr, ptr %11, align 8, !tbaa !76
  %13 = getelementptr inbounds %struct.jpeg_input_controller, ptr %12, i64 0, i32 4
  %14 = load i32, ptr %13, align 8, !tbaa !101
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %47, label %16

16:                                               ; preds = %10
  %17 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 2
  %18 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 60
  %19 = load ptr, ptr %17, align 8, !tbaa !71
  br label %20

20:                                               ; preds = %35, %16
  %21 = phi ptr [ %19, %16 ], [ %30, %35 ]
  %22 = icmp eq ptr %21, null
  br i1 %22, label %25, label %23

23:                                               ; preds = %20
  %24 = load ptr, ptr %21, align 8, !tbaa !102
  tail call void %24(ptr noundef nonnull %0) #32
  br label %25

25:                                               ; preds = %23, %20
  %26 = load ptr, ptr %11, align 8, !tbaa !76
  %27 = load ptr, ptr %26, align 8, !tbaa !80
  %28 = tail call i32 %27(ptr noundef nonnull %0) #32
  switch i32 %28, label %29 [
    i32 0, label %59
    i32 2, label %47
  ]

29:                                               ; preds = %25
  %30 = load ptr, ptr %17, align 8, !tbaa !71
  %31 = icmp ne ptr %30, null
  %32 = and i32 %28, -3
  %33 = icmp eq i32 %32, 1
  %34 = and i1 %33, %31
  br i1 %34, label %36, label %35

35:                                               ; preds = %43, %36, %29
  br label %20

36:                                               ; preds = %29
  %37 = getelementptr inbounds %struct.jpeg_progress_mgr.105, ptr %30, i64 0, i32 1
  %38 = load i64, ptr %37, align 8, !tbaa !104
  %39 = add nsw i64 %38, 1
  store i64 %39, ptr %37, align 8, !tbaa !104
  %40 = getelementptr inbounds %struct.jpeg_progress_mgr.105, ptr %30, i64 0, i32 2
  %41 = load i64, ptr %40, align 8, !tbaa !105
  %42 = icmp slt i64 %39, %41
  br i1 %42, label %35, label %43

43:                                               ; preds = %36
  %44 = load i32, ptr %18, align 8, !tbaa !106
  %45 = zext i32 %44 to i64
  %46 = add nsw i64 %41, %45
  store i64 %46, ptr %40, align 8, !tbaa !105
  br label %35

47:                                               ; preds = %25, %10
  %48 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 34
  %49 = load i32, ptr %48, align 4, !tbaa !107
  %50 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 36
  store i32 %49, ptr %50, align 4, !tbaa !108
  br label %57

51:                                               ; preds = %1
  %52 = load ptr, ptr %0, align 8, !tbaa !16
  %53 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %52, i64 0, i32 5
  store i32 18, ptr %53, align 8, !tbaa !25
  %54 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %52, i64 0, i32 6
  store i32 %3, ptr %54, align 4, !tbaa !7
  %55 = load ptr, ptr %0, align 8, !tbaa !16
  %56 = load ptr, ptr %55, align 8, !tbaa !26
  tail call void %56(ptr noundef nonnull %0) #32
  br label %57

57:                                               ; preds = %51, %47, %1
  %58 = tail call fastcc i32 @output_pass_setup(ptr noundef nonnull %0) #33
  br label %59

59:                                               ; preds = %57, %25, %8
  %60 = phi i32 [ 1, %8 ], [ %58, %57 ], [ %28, %25 ]
  ret i32 %60
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc i32 @output_pass_setup(ptr noundef %0) unnamed_addr #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 4
  %3 = load i32, ptr %2, align 4, !tbaa !72
  %4 = icmp eq i32 %3, 204
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 73
  %7 = load ptr, ptr %6, align 8, !tbaa !95
  %8 = load ptr, ptr %7, align 8, !tbaa !109
  tail call void %8(ptr noundef nonnull %0) #32
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 33
  store i32 0, ptr %9, align 8, !tbaa !30
  store i32 204, ptr %2, align 4, !tbaa !72
  br label %10

10:                                               ; preds = %5, %1
  %11 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 73
  %12 = load ptr, ptr %11, align 8, !tbaa !95
  %13 = getelementptr inbounds %struct.jpeg_decomp_master, ptr %12, i64 0, i32 2
  %14 = load i32, ptr %13, align 8, !tbaa !110
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %55, label %16

16:                                               ; preds = %10
  %17 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 33
  %18 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 27
  %19 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 2
  %20 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 74
  %21 = load i32, ptr %17, align 8, !tbaa !30
  br label %22

22:                                               ; preds = %43, %16
  %23 = phi i32 [ %21, %16 ], [ %44, %43 ]
  %24 = load i32, ptr %18, align 4, !tbaa !31
  %25 = icmp ult i32 %23, %24
  br i1 %25, label %26, label %45

26:                                               ; preds = %22
  %27 = load ptr, ptr %19, align 8, !tbaa !71
  %28 = icmp eq ptr %27, null
  br i1 %28, label %36, label %29

29:                                               ; preds = %26
  %30 = zext i32 %23 to i64
  %31 = getelementptr inbounds %struct.jpeg_progress_mgr.105, ptr %27, i64 0, i32 1
  store i64 %30, ptr %31, align 8, !tbaa !104
  %32 = zext i32 %24 to i64
  %33 = getelementptr inbounds %struct.jpeg_progress_mgr.105, ptr %27, i64 0, i32 2
  store i64 %32, ptr %33, align 8, !tbaa !105
  %34 = load ptr, ptr %27, align 8, !tbaa !102
  tail call void %34(ptr noundef nonnull %0) #32
  %35 = load i32, ptr %17, align 8, !tbaa !30
  br label %36

36:                                               ; preds = %29, %26
  %37 = phi i32 [ %35, %29 ], [ %23, %26 ]
  %38 = load ptr, ptr %20, align 8, !tbaa !111
  %39 = getelementptr inbounds %struct.jpeg_d_main_controller, ptr %38, i64 0, i32 1
  %40 = load ptr, ptr %39, align 8, !tbaa !112
  tail call void %40(ptr noundef nonnull %0, ptr noundef null, ptr noundef nonnull %17, i32 noundef 0) #32
  %41 = load i32, ptr %17, align 8, !tbaa !30
  %42 = icmp eq i32 %41, %37
  br i1 %42, label %60, label %43

43:                                               ; preds = %45, %36
  %44 = phi i32 [ %41, %36 ], [ 0, %45 ]
  br label %22, !llvm.loop !114

45:                                               ; preds = %22
  %46 = load ptr, ptr %11, align 8, !tbaa !95
  %47 = getelementptr inbounds %struct.jpeg_decomp_master, ptr %46, i64 0, i32 1
  %48 = load ptr, ptr %47, align 8, !tbaa !96
  tail call void %48(ptr noundef nonnull %0) #32
  %49 = load ptr, ptr %11, align 8, !tbaa !95
  %50 = load ptr, ptr %49, align 8, !tbaa !109
  tail call void %50(ptr noundef nonnull %0) #32
  store i32 0, ptr %17, align 8, !tbaa !30
  %51 = load ptr, ptr %11, align 8, !tbaa !95
  %52 = getelementptr inbounds %struct.jpeg_decomp_master, ptr %51, i64 0, i32 2
  %53 = load i32, ptr %52, align 8, !tbaa !110
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %43

55:                                               ; preds = %45, %10
  %56 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 15
  %57 = load i32, ptr %56, align 4, !tbaa !115
  %58 = icmp eq i32 %57, 0
  %59 = select i1 %58, i32 205, i32 206
  store i32 %59, ptr %2, align 4, !tbaa !72
  br label %60

60:                                               ; preds = %55, %36
  %61 = phi i32 [ 1, %55 ], [ 0, %36 ]
  ret i32 %61
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @jpeg_read_scanlines(ptr noundef %0, ptr noundef %1, i32 noundef %2) #6 {
  %4 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4) #31
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 4
  %6 = load i32, ptr %5, align 4, !tbaa !72
  %7 = icmp eq i32 %6, 205
  br i1 %7, label %14, label %8

8:                                                ; preds = %3
  %9 = load ptr, ptr %0, align 8, !tbaa !16
  %10 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %9, i64 0, i32 5
  store i32 18, ptr %10, align 8, !tbaa !25
  %11 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %9, i64 0, i32 6
  store i32 %6, ptr %11, align 4, !tbaa !7
  %12 = load ptr, ptr %0, align 8, !tbaa !16
  %13 = load ptr, ptr %12, align 8, !tbaa !26
  tail call void %13(ptr noundef nonnull %0) #32
  br label %14

14:                                               ; preds = %8, %3
  %15 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 33
  %16 = load i32, ptr %15, align 8, !tbaa !30
  %17 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 27
  %18 = load i32, ptr %17, align 4, !tbaa !31
  %19 = icmp ult i32 %16, %18
  br i1 %19, label %25, label %20

20:                                               ; preds = %14
  %21 = load ptr, ptr %0, align 8, !tbaa !16
  %22 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %21, i64 0, i32 5
  store i32 119, ptr %22, align 8, !tbaa !25
  %23 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %21, i64 0, i32 1
  %24 = load ptr, ptr %23, align 8, !tbaa !85
  tail call void %24(ptr noundef nonnull %0, i32 noundef -1) #32
  br label %43

25:                                               ; preds = %14
  %26 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 2
  %27 = load ptr, ptr %26, align 8, !tbaa !71
  %28 = icmp eq ptr %27, null
  br i1 %28, label %35, label %29

29:                                               ; preds = %25
  %30 = zext i32 %16 to i64
  %31 = getelementptr inbounds %struct.jpeg_progress_mgr.105, ptr %27, i64 0, i32 1
  store i64 %30, ptr %31, align 8, !tbaa !104
  %32 = zext i32 %18 to i64
  %33 = getelementptr inbounds %struct.jpeg_progress_mgr.105, ptr %27, i64 0, i32 2
  store i64 %32, ptr %33, align 8, !tbaa !105
  %34 = load ptr, ptr %27, align 8, !tbaa !102
  tail call void %34(ptr noundef nonnull %0) #32
  br label %35

35:                                               ; preds = %29, %25
  store i32 0, ptr %4, align 4, !tbaa !41
  %36 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 74
  %37 = load ptr, ptr %36, align 8, !tbaa !111
  %38 = getelementptr inbounds %struct.jpeg_d_main_controller, ptr %37, i64 0, i32 1
  %39 = load ptr, ptr %38, align 8, !tbaa !112
  call void %39(ptr noundef nonnull %0, ptr noundef %1, ptr noundef nonnull %4, i32 noundef %2) #32
  %40 = load i32, ptr %4, align 4, !tbaa !41
  %41 = load i32, ptr %15, align 8, !tbaa !30
  %42 = add i32 %41, %40
  store i32 %42, ptr %15, align 8, !tbaa !30
  br label %43

43:                                               ; preds = %35, %20
  %44 = phi i32 [ 0, %20 ], [ %40, %35 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4) #31
  ret i32 %44
}

; Function Attrs: nounwind optsize uwtable
define internal void @jpeg_stdio_src(ptr noundef %0, ptr noundef %1) #6 {
  %3 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 5
  %4 = load ptr, ptr %3, align 8, !tbaa !54
  %5 = icmp eq ptr %4, null
  br i1 %5, label %6, label %16

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  %8 = load ptr, ptr %7, align 8, !tbaa !50
  %9 = load ptr, ptr %8, align 8, !tbaa !65
  %10 = tail call ptr %9(ptr noundef nonnull %0, i32 noundef 0, i64 noundef 80) #32
  store ptr %10, ptr %3, align 8, !tbaa !54
  %11 = load ptr, ptr %7, align 8, !tbaa !50
  %12 = load ptr, ptr %11, align 8, !tbaa !65
  %13 = tail call ptr %12(ptr noundef nonnull %0, i32 noundef 0, i64 noundef 4096) #32
  %14 = getelementptr inbounds %struct.my_source_mgr, ptr %10, i64 0, i32 2
  store ptr %13, ptr %14, align 8, !tbaa !116
  %15 = load ptr, ptr %3, align 8, !tbaa !54
  br label %16

16:                                               ; preds = %6, %2
  %17 = phi ptr [ %15, %6 ], [ %4, %2 ]
  %18 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %17, i64 0, i32 2
  store ptr @init_source, ptr %18, align 8, !tbaa !118
  %19 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %17, i64 0, i32 3
  store ptr @fill_input_buffer, ptr %19, align 8, !tbaa !119
  %20 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %17, i64 0, i32 4
  store ptr @skip_input_data, ptr %20, align 8, !tbaa !120
  %21 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %17, i64 0, i32 5
  store ptr @jpeg_resync_to_restart, ptr %21, align 8, !tbaa !121
  %22 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %17, i64 0, i32 6
  store ptr @term_source, ptr %22, align 8, !tbaa !122
  %23 = getelementptr inbounds %struct.my_source_mgr, ptr %17, i64 0, i32 1
  store ptr %1, ptr %23, align 8, !tbaa !123
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %17, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(write, argmem: readwrite, inaccessiblemem: none) uwtable
define internal void @init_source(ptr nocapture noundef readonly %0) #11 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 5
  %3 = load ptr, ptr %2, align 8, !tbaa !54
  %4 = getelementptr inbounds %struct.my_source_mgr, ptr %3, i64 0, i32 3
  store i32 1, ptr %4, align 8, !tbaa !124
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @fill_input_buffer(ptr noundef %0) #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 5
  %3 = load ptr, ptr %2, align 8, !tbaa !54
  %4 = getelementptr inbounds %struct.my_source_mgr, ptr %3, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !116
  %6 = getelementptr inbounds %struct.my_source_mgr, ptr %3, i64 0, i32 1
  %7 = load ptr, ptr %6, align 8, !tbaa !123
  %8 = tail call i64 @fread(ptr noundef %5, i64 noundef 1, i64 noundef 4096, ptr noundef %7) #33
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %10, label %26

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.my_source_mgr, ptr %3, i64 0, i32 3
  %12 = load i32, ptr %11, align 8, !tbaa !124
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %18, label %14

14:                                               ; preds = %10
  %15 = load ptr, ptr %0, align 8, !tbaa !16
  %16 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %15, i64 0, i32 5
  store i32 41, ptr %16, align 8, !tbaa !25
  %17 = load ptr, ptr %15, align 8, !tbaa !26
  tail call void %17(ptr noundef nonnull %0) #32
  br label %18

18:                                               ; preds = %14, %10
  %19 = load ptr, ptr %0, align 8, !tbaa !16
  %20 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %19, i64 0, i32 5
  store i32 116, ptr %20, align 8, !tbaa !25
  %21 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %19, i64 0, i32 1
  %22 = load ptr, ptr %21, align 8, !tbaa !85
  tail call void %22(ptr noundef nonnull %0, i32 noundef -1) #32
  %23 = load ptr, ptr %4, align 8, !tbaa !116
  store i8 -1, ptr %23, align 1, !tbaa !7
  %24 = load ptr, ptr %4, align 8, !tbaa !116
  %25 = getelementptr inbounds i8, ptr %24, i64 1
  store i8 -39, ptr %25, align 1, !tbaa !7
  br label %26

26:                                               ; preds = %18, %1
  %27 = phi i64 [ 2, %18 ], [ %8, %1 ]
  %28 = load ptr, ptr %4, align 8, !tbaa !116
  store ptr %28, ptr %3, align 8, !tbaa !125
  %29 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %3, i64 0, i32 1
  store i64 %27, ptr %29, align 8, !tbaa !126
  %30 = getelementptr inbounds %struct.my_source_mgr, ptr %3, i64 0, i32 3
  store i32 0, ptr %30, align 8, !tbaa !124
  ret i32 1
}

; Function Attrs: nounwind optsize uwtable
define internal void @skip_input_data(ptr noundef %0, i64 noundef %1) #6 {
  %3 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 5
  %4 = load ptr, ptr %3, align 8, !tbaa !54
  %5 = icmp sgt i64 %1, 0
  br i1 %5, label %6, label %23

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %4, i64 0, i32 1
  %8 = load i64, ptr %7, align 8, !tbaa !126
  %9 = icmp slt i64 %8, %1
  br i1 %9, label %10, label %17

10:                                               ; preds = %10, %6
  %11 = phi i64 [ %15, %10 ], [ %8, %6 ]
  %12 = phi i64 [ %13, %10 ], [ %1, %6 ]
  %13 = sub nsw i64 %12, %11
  %14 = tail call i32 @fill_input_buffer(ptr noundef %0) #33
  %15 = load i64, ptr %7, align 8, !tbaa !126
  %16 = icmp sgt i64 %13, %15
  br i1 %16, label %10, label %17, !llvm.loop !127

17:                                               ; preds = %10, %6
  %18 = phi i64 [ %1, %6 ], [ %13, %10 ]
  %19 = phi i64 [ %8, %6 ], [ %15, %10 ]
  %20 = load ptr, ptr %4, align 8, !tbaa !125
  %21 = getelementptr inbounds i8, ptr %20, i64 %18
  store ptr %21, ptr %4, align 8, !tbaa !125
  %22 = sub i64 %19, %18
  store i64 %22, ptr %7, align 8, !tbaa !126
  br label %23

23:                                               ; preds = %17, %2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal void @term_source(ptr nocapture %0) #12 {
  ret void
}

; Function Attrs: nofree nounwind optsize
declare noundef i64 @fread(ptr nocapture noundef, i64 noundef, i64 noundef, ptr nocapture noundef) local_unnamed_addr #7

; Function Attrs: nounwind optsize uwtable
define internal void @jinit_d_coef_controller(ptr noundef %0, i32 noundef %1) #6 {
  %3 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %3, align 8, !tbaa !50
  %5 = load ptr, ptr %4, align 8, !tbaa !65
  %6 = tail call ptr %5(ptr noundef %0, i32 noundef 1, i64 noundef 224) #32
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 75
  store ptr %6, ptr %7, align 8, !tbaa !128
  store ptr @start_input_pass, ptr %6, align 8, !tbaa !129
  %8 = getelementptr inbounds %struct.jpeg_d_coef_controller.118, ptr %6, i64 0, i32 2
  store ptr @start_output_pass, ptr %8, align 8, !tbaa !132
  %9 = getelementptr inbounds %struct.my_coef_controller.119, ptr %6, i64 0, i32 6
  store ptr null, ptr %9, align 8, !tbaa !133
  %10 = icmp eq i32 %1, 0
  br i1 %10, label %57, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 8
  %13 = load i32, ptr %12, align 8, !tbaa !81
  %14 = icmp sgt i32 %13, 0
  br i1 %14, label %15, label %53

15:                                               ; preds = %11
  %16 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 43
  %17 = load ptr, ptr %16, align 8, !tbaa !86
  %18 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 44
  br label %19

19:                                               ; preds = %19, %15
  %20 = phi i64 [ 0, %15 ], [ %48, %19 ]
  %21 = phi ptr [ %17, %15 ], [ %49, %19 ]
  %22 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %21, i64 0, i32 3
  %23 = load i32, ptr %22, align 4, !tbaa !134
  %24 = load i32, ptr %18, align 8, !tbaa !135
  %25 = icmp eq i32 %24, 0
  %26 = mul nsw i32 %23, 3
  %27 = select i1 %25, i32 %23, i32 %26
  %28 = load ptr, ptr %3, align 8, !tbaa !50
  %29 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %28, i64 0, i32 5
  %30 = load ptr, ptr %29, align 8, !tbaa !136
  %31 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %21, i64 0, i32 7
  %32 = load i32, ptr %31, align 4, !tbaa !137
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %21, i64 0, i32 2
  %35 = load i32, ptr %34, align 8, !tbaa !138
  %36 = sext i32 %35 to i64
  %37 = tail call i64 @jround_up(i64 noundef %33, i64 noundef %36) #32
  %38 = trunc i64 %37 to i32
  %39 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %21, i64 0, i32 8
  %40 = load i32, ptr %39, align 8, !tbaa !139
  %41 = zext i32 %40 to i64
  %42 = load i32, ptr %22, align 4, !tbaa !134
  %43 = sext i32 %42 to i64
  %44 = tail call i64 @jround_up(i64 noundef %41, i64 noundef %43) #32
  %45 = trunc i64 %44 to i32
  %46 = tail call ptr %30(ptr noundef nonnull %0, i32 noundef 1, i32 noundef 1, i32 noundef %38, i32 noundef %45, i32 noundef %27) #32
  %47 = getelementptr inbounds %struct.my_coef_controller.119, ptr %6, i64 0, i32 5, i64 %20
  store ptr %46, ptr %47, align 8, !tbaa !10
  %48 = add nuw nsw i64 %20, 1
  %49 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %21, i64 1
  %50 = load i32, ptr %12, align 8, !tbaa !81
  %51 = sext i32 %50 to i64
  %52 = icmp slt i64 %48, %51
  br i1 %52, label %19, label %53, !llvm.loop !140

53:                                               ; preds = %19, %11
  %54 = getelementptr inbounds %struct.jpeg_d_coef_controller.118, ptr %6, i64 0, i32 1
  store ptr @consume_data, ptr %54, align 8, !tbaa !141
  %55 = getelementptr inbounds %struct.jpeg_d_coef_controller.118, ptr %6, i64 0, i32 3
  store ptr @decompress_data, ptr %55, align 8, !tbaa !142
  %56 = getelementptr inbounds %struct.my_coef_controller.119, ptr %6, i64 0, i32 5
  br label %73

57:                                               ; preds = %2
  %58 = load ptr, ptr %3, align 8, !tbaa !50
  %59 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %58, i64 0, i32 1
  %60 = load ptr, ptr %59, align 8, !tbaa !143
  %61 = tail call ptr %60(ptr noundef nonnull %0, i32 noundef 1, i64 noundef 1280) #32
  br label %62

62:                                               ; preds = %62, %57
  %63 = phi i64 [ 0, %57 ], [ %67, %62 ]
  %64 = phi <2 x i64> [ <i64 0, i64 1>, %57 ], [ %68, %62 ]
  %65 = getelementptr inbounds [64 x i16], ptr %61, <2 x i64> %64
  %66 = getelementptr inbounds %struct.my_coef_controller.119, ptr %6, i64 0, i32 4, i64 %63
  store <2 x ptr> %65, ptr %66, align 8, !tbaa !10
  %67 = add nuw i64 %63, 2
  %68 = add <2 x i64> %64, <i64 2, i64 2>
  %69 = icmp eq i64 %67, 10
  br i1 %69, label %70, label %62, !llvm.loop !144

70:                                               ; preds = %62
  %71 = getelementptr inbounds %struct.jpeg_d_coef_controller.118, ptr %6, i64 0, i32 1
  store ptr @dummy_consume_data, ptr %71, align 8, !tbaa !141
  %72 = getelementptr inbounds %struct.jpeg_d_coef_controller.118, ptr %6, i64 0, i32 3
  store ptr @decompress_onepass, ptr %72, align 8, !tbaa !142
  br label %73

73:                                               ; preds = %70, %53
  %74 = phi ptr [ null, %70 ], [ %56, %53 ]
  %75 = getelementptr inbounds %struct.jpeg_d_coef_controller.118, ptr %6, i64 0, i32 4
  store ptr %74, ptr %75, align 8, !tbaa !147
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal void @start_input_pass(ptr nocapture noundef %0) #13 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 35
  store i32 0, ptr %2, align 8, !tbaa !148
  tail call fastcc void @start_iMCU_row(ptr noundef %0) #33
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @start_output_pass(ptr noundef %0) #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 75
  %3 = load ptr, ptr %2, align 8, !tbaa !128
  %4 = getelementptr inbounds %struct.jpeg_d_coef_controller.118, ptr %3, i64 0, i32 4
  %5 = load ptr, ptr %4, align 8, !tbaa !147
  %6 = icmp eq ptr %5, null
  br i1 %6, label %100, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 18
  %9 = load i32, ptr %8, align 8, !tbaa !149
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %96, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 44
  %13 = load i32, ptr %12, align 8, !tbaa !135
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %96, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 38
  %17 = load ptr, ptr %16, align 8, !tbaa !150
  %18 = icmp eq ptr %17, null
  br i1 %18, label %96, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.my_coef_controller.119, ptr %3, i64 0, i32 6
  %21 = load ptr, ptr %20, align 8, !tbaa !133
  %22 = icmp eq ptr %21, null
  br i1 %22, label %23, label %32

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  %25 = load ptr, ptr %24, align 8, !tbaa !50
  %26 = load ptr, ptr %25, align 8, !tbaa !65
  %27 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 8
  %28 = load i32, ptr %27, align 8, !tbaa !81
  %29 = sext i32 %28 to i64
  %30 = mul nsw i64 %29, 24
  %31 = tail call ptr %26(ptr noundef nonnull %0, i32 noundef 1, i64 noundef %30) #32
  store ptr %31, ptr %20, align 8, !tbaa !133
  br label %32

32:                                               ; preds = %23, %19
  %33 = phi ptr [ %31, %23 ], [ %21, %19 ]
  %34 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 8
  %35 = load i32, ptr %34, align 8, !tbaa !81
  %36 = icmp sgt i32 %35, 0
  br i1 %36, label %37, label %96

37:                                               ; preds = %32
  %38 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 43
  %39 = load ptr, ptr %38, align 8, !tbaa !86
  br label %40

40:                                               ; preds = %87, %37
  %41 = phi i64 [ 0, %37 ], [ %89, %87 ]
  %42 = phi ptr [ %33, %37 ], [ %88, %87 ]
  %43 = phi i32 [ 0, %37 ], [ %.lcssa, %87 ]
  %44 = phi ptr [ %39, %37 ], [ %90, %87 ]
  %45 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %44, i64 0, i32 19
  %46 = load ptr, ptr %45, align 8, !tbaa !151
  %47 = icmp eq ptr %46, null
  br i1 %47, label %96, label %48

48:                                               ; preds = %40
  %49 = load i16, ptr %46, align 4, !tbaa !12
  %50 = icmp eq i16 %49, 0
  br i1 %50, label %96, label %51

51:                                               ; preds = %48
  %52 = getelementptr inbounds [64 x i16], ptr %46, i64 0, i64 1
  %53 = load i16, ptr %52, align 2, !tbaa !12
  %54 = icmp eq i16 %53, 0
  br i1 %54, label %96, label %55

55:                                               ; preds = %51
  %56 = getelementptr inbounds [64 x i16], ptr %46, i64 0, i64 8
  %57 = load i16, ptr %56, align 4, !tbaa !12
  %58 = icmp eq i16 %57, 0
  br i1 %58, label %96, label %59

59:                                               ; preds = %55
  %60 = getelementptr inbounds [64 x i16], ptr %46, i64 0, i64 16
  %61 = load i16, ptr %60, align 4, !tbaa !12
  %62 = icmp eq i16 %61, 0
  br i1 %62, label %96, label %63

63:                                               ; preds = %59
  %64 = getelementptr inbounds [64 x i16], ptr %46, i64 0, i64 9
  %65 = load i16, ptr %64, align 2, !tbaa !12
  %66 = icmp eq i16 %65, 0
  br i1 %66, label %96, label %67

67:                                               ; preds = %63
  %68 = getelementptr inbounds [64 x i16], ptr %46, i64 0, i64 2
  %69 = load i16, ptr %68, align 4, !tbaa !12
  %70 = icmp eq i16 %69, 0
  br i1 %70, label %96, label %71

71:                                               ; preds = %67
  %72 = load ptr, ptr %16, align 8, !tbaa !150
  %73 = getelementptr inbounds [64 x i32], ptr %72, i64 %41
  %74 = load i32, ptr %73, align 4, !tbaa !41
  %75 = icmp slt i32 %74, 0
  br i1 %75, label %96, label %76

76:                                               ; preds = %76, %71
  %77 = phi i64 [ %85, %76 ], [ 1, %71 ]
  %78 = phi i32 [ %84, %76 ], [ %43, %71 ]
  %79 = getelementptr inbounds i32, ptr %73, i64 %77
  %80 = load i32, ptr %79, align 4, !tbaa !41
  %81 = getelementptr inbounds i32, ptr %42, i64 %77
  store i32 %80, ptr %81, align 4, !tbaa !41
  %82 = load i32, ptr %79, align 4, !tbaa !41
  %83 = icmp eq i32 %82, 0
  %84 = select i1 %83, i32 %78, i32 1
  %85 = add nuw nsw i64 %77, 1
  %86 = icmp eq i64 %85, 6
  br i1 %86, label %87, label %76, !llvm.loop !152

87:                                               ; preds = %76
  %.lcssa = phi i32 [ %84, %76 ]
  %88 = getelementptr inbounds i32, ptr %42, i64 6
  %89 = add nuw nsw i64 %41, 1
  %90 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %44, i64 1
  %91 = load i32, ptr %34, align 8, !tbaa !81
  %92 = sext i32 %91 to i64
  %93 = icmp slt i64 %89, %92
  br i1 %93, label %40, label %94, !llvm.loop !153

94:                                               ; preds = %87
  %.lcssa.lcssa = phi i32 [ %.lcssa, %87 ]
  %95 = icmp eq i32 %.lcssa.lcssa, 0
  br i1 %95, label %96, label %97

96:                                               ; preds = %94, %71, %67, %63, %59, %55, %51, %48, %40, %32, %15, %11, %7
  br label %97

97:                                               ; preds = %96, %94
  %98 = phi ptr [ @decompress_data, %96 ], [ @decompress_smooth_data, %94 ]
  %99 = getelementptr inbounds %struct.jpeg_d_coef_controller.118, ptr %3, i64 0, i32 3
  store ptr %98, ptr %99, align 8, !tbaa !142
  br label %100

100:                                              ; preds = %97, %1
  %101 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 37
  store i32 0, ptr %101, align 8, !tbaa !154
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @consume_data(ptr noundef %0) #6 {
  %2 = alloca [4 x ptr], align 16
  %3 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 75
  %4 = load ptr, ptr %3, align 8, !tbaa !128
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %2) #31
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 62
  %6 = load i32, ptr %5, align 8, !tbaa !155
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %33

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 35
  br label %11

11:                                               ; preds = %11, %8
  %12 = phi i64 [ 0, %8 ], [ %29, %11 ]
  %13 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 63, i64 %12
  %14 = load ptr, ptr %13, align 8, !tbaa !10
  %15 = load ptr, ptr %9, align 8, !tbaa !50
  %16 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %15, i64 0, i32 8
  %17 = load ptr, ptr %16, align 8, !tbaa !156
  %18 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %14, i64 0, i32 1
  %19 = load i32, ptr %18, align 4, !tbaa !157
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds %struct.my_coef_controller.119, ptr %4, i64 0, i32 5, i64 %20
  %22 = load ptr, ptr %21, align 8, !tbaa !10
  %23 = load i32, ptr %10, align 8, !tbaa !148
  %24 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %14, i64 0, i32 3
  %25 = load i32, ptr %24, align 4, !tbaa !134
  %26 = mul i32 %25, %23
  %27 = tail call ptr %17(ptr noundef nonnull %0, ptr noundef %22, i32 noundef %26, i32 noundef %25, i32 noundef 1) #32
  %28 = getelementptr inbounds [4 x ptr], ptr %2, i64 0, i64 %12
  store ptr %27, ptr %28, align 8, !tbaa !10
  %29 = add nuw nsw i64 %12, 1
  %30 = load i32, ptr %5, align 8, !tbaa !155
  %31 = sext i32 %30 to i64
  %32 = icmp slt i64 %29, %31
  br i1 %32, label %11, label %33, !llvm.loop !158

33:                                               ; preds = %11, %1
  %34 = getelementptr inbounds %struct.my_coef_controller.119, ptr %4, i64 0, i32 2
  %35 = load i32, ptr %34, align 4, !tbaa !159
  %36 = getelementptr inbounds %struct.my_coef_controller.119, ptr %4, i64 0, i32 3
  %37 = load i32, ptr %36, align 8, !tbaa !160
  %38 = icmp slt i32 %35, %37
  br i1 %38, label %39, label %124

39:                                               ; preds = %33
  %40 = getelementptr inbounds %struct.my_coef_controller.119, ptr %4, i64 0, i32 1
  %41 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 64
  %42 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 79
  %43 = getelementptr inbounds %struct.my_coef_controller.119, ptr %4, i64 0, i32 4
  %44 = sext i32 %35 to i64
  %45 = load i32, ptr %40, align 8, !tbaa !161
  %46 = load i32, ptr %41, align 8, !tbaa !162
  br label %47

47:                                               ; preds = %118, %39
  %48 = phi i32 [ %37, %39 ], [ %119, %118 ]
  %49 = phi i32 [ %46, %39 ], [ %120, %118 ]
  %50 = phi i32 [ %45, %39 ], [ 0, %118 ]
  %51 = phi i64 [ %44, %39 ], [ %121, %118 ]
  %52 = icmp ult i32 %50, %49
  br i1 %52, label %53, label %118

53:                                               ; preds = %112, %47
  %54 = phi i32 [ %113, %112 ], [ %50, %47 ]
  %55 = load i32, ptr %5, align 8, !tbaa !155
  %56 = icmp sgt i32 %55, 0
  br i1 %56, label %57, label %104

57:                                               ; preds = %53
  %58 = zext i32 %55 to i64
  br label %59

59:                                               ; preds = %100, %57
  %60 = phi i64 [ 0, %57 ], [ %102, %100 ]
  %61 = phi i32 [ 0, %57 ], [ %101, %100 ]
  %62 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 63, i64 %60
  %63 = load ptr, ptr %62, align 8, !tbaa !10
  %64 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %63, i64 0, i32 13
  %65 = load i32, ptr %64, align 4, !tbaa !163
  %66 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %63, i64 0, i32 14
  %67 = load i32, ptr %66, align 8, !tbaa !164
  %68 = icmp sgt i32 %67, 0
  br i1 %68, label %69, label %100

69:                                               ; preds = %59
  %70 = mul i32 %65, %54
  %71 = getelementptr inbounds [4 x ptr], ptr %2, i64 0, i64 %60
  %72 = load ptr, ptr %71, align 8, !tbaa !10
  %73 = zext i32 %70 to i64
  %74 = icmp sgt i32 %65, 0
  %75 = zext i32 %67 to i64
  br label %76

76:                                               ; preds = %96, %69
  %77 = phi i64 [ 0, %69 ], [ %98, %96 ]
  %78 = phi i32 [ %61, %69 ], [ %97, %96 ]
  br i1 %74, label %79, label %96

79:                                               ; preds = %76
  %80 = add nsw i64 %77, %51
  %81 = getelementptr inbounds ptr, ptr %72, i64 %80
  %82 = load ptr, ptr %81, align 8, !tbaa !10
  %83 = getelementptr inbounds [64 x i16], ptr %82, i64 %73
  %84 = sext i32 %78 to i64
  br label %85

85:                                               ; preds = %85, %79
  %86 = phi i64 [ %84, %79 ], [ %90, %85 ]
  %87 = phi ptr [ %83, %79 ], [ %89, %85 ]
  %88 = phi i32 [ 0, %79 ], [ %92, %85 ]
  %89 = getelementptr inbounds [64 x i16], ptr %87, i64 1
  %90 = add nsw i64 %86, 1
  %91 = getelementptr inbounds %struct.my_coef_controller.119, ptr %4, i64 0, i32 4, i64 %86
  store ptr %87, ptr %91, align 8, !tbaa !10
  %92 = add nuw nsw i32 %88, 1
  %93 = icmp eq i32 %92, %65
  br i1 %93, label %94, label %85, !llvm.loop !165

94:                                               ; preds = %85
  %.lcssa = phi i64 [ %90, %85 ]
  %95 = trunc i64 %.lcssa to i32
  br label %96

96:                                               ; preds = %94, %76
  %97 = phi i32 [ %78, %76 ], [ %95, %94 ]
  %98 = add nuw nsw i64 %77, 1
  %99 = icmp eq i64 %98, %75
  br i1 %99, label %100, label %76, !llvm.loop !166

100:                                              ; preds = %96, %59
  %101 = phi i32 [ %61, %59 ], [ %97, %96 ]
  %102 = add nuw nsw i64 %60, 1
  %103 = icmp eq i64 %102, %58
  br i1 %103, label %104, label %59, !llvm.loop !167

104:                                              ; preds = %100, %53
  %105 = load ptr, ptr %42, align 8, !tbaa !168
  %106 = getelementptr inbounds %struct.jpeg_d_main_controller, ptr %105, i64 0, i32 1
  %107 = load ptr, ptr %106, align 8, !tbaa !169
  %108 = tail call i32 %107(ptr noundef nonnull %0, ptr noundef nonnull %43) #32
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %110, label %112

110:                                              ; preds = %104
  %.lcssa4 = phi i64 [ %51, %104 ]
  %.lcssa1 = phi i32 [ %54, %104 ]
  %111 = trunc i64 %.lcssa4 to i32
  store i32 %111, ptr %34, align 4, !tbaa !159
  store i32 %.lcssa1, ptr %40, align 8, !tbaa !161
  br label %137

112:                                              ; preds = %104
  %113 = add nuw i32 %54, 1
  %114 = load i32, ptr %41, align 8, !tbaa !162
  %115 = icmp ult i32 %113, %114
  br i1 %115, label %53, label %116, !llvm.loop !171

116:                                              ; preds = %112
  %.lcssa3 = phi i32 [ %114, %112 ]
  %117 = load i32, ptr %36, align 8, !tbaa !160
  br label %118

118:                                              ; preds = %116, %47
  %119 = phi i32 [ %117, %116 ], [ %48, %47 ]
  %120 = phi i32 [ %.lcssa3, %116 ], [ %49, %47 ]
  store i32 0, ptr %40, align 8, !tbaa !161
  %121 = add nsw i64 %51, 1
  %122 = sext i32 %119 to i64
  %123 = icmp slt i64 %121, %122
  br i1 %123, label %47, label %124, !llvm.loop !172

124:                                              ; preds = %118, %33
  %125 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 35
  %126 = load i32, ptr %125, align 8, !tbaa !148
  %127 = add i32 %126, 1
  store i32 %127, ptr %125, align 8, !tbaa !148
  %128 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 60
  %129 = load i32, ptr %128, align 8, !tbaa !106
  %130 = icmp ult i32 %127, %129
  br i1 %130, label %131, label %132

131:                                              ; preds = %124
  tail call fastcc void @start_iMCU_row(ptr noundef nonnull %0) #33
  br label %137

132:                                              ; preds = %124
  %133 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 77
  %134 = load ptr, ptr %133, align 8, !tbaa !76
  %135 = getelementptr inbounds %struct.jpeg_input_controller, ptr %134, i64 0, i32 3
  %136 = load ptr, ptr %135, align 8, !tbaa !173
  tail call void %136(ptr noundef nonnull %0) #32
  br label %137

137:                                              ; preds = %132, %131, %110
  %138 = phi i32 [ 0, %110 ], [ 3, %131 ], [ 4, %132 ]
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %2) #31
  ret i32 %138
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @decompress_data(ptr noundef %0, ptr nocapture noundef readonly %1) #6 {
  %3 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 75
  %4 = load ptr, ptr %3, align 8, !tbaa !128
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 60
  %6 = load i32, ptr %5, align 8, !tbaa !106
  %7 = add i32 %6, -1
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 34
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 36
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 35
  %11 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 37
  %12 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 77
  br label %13

13:                                               ; preds = %23, %2
  %14 = load i32, ptr %8, align 4, !tbaa !107
  %15 = load i32, ptr %9, align 4, !tbaa !108
  %16 = icmp slt i32 %14, %15
  br i1 %16, label %23, label %17

17:                                               ; preds = %13
  %18 = icmp eq i32 %14, %15
  br i1 %18, label %19, label %28

19:                                               ; preds = %17
  %20 = load i32, ptr %10, align 8, !tbaa !148
  %21 = load i32, ptr %11, align 8, !tbaa !154
  %22 = icmp ugt i32 %20, %21
  br i1 %22, label %28, label %23

23:                                               ; preds = %19, %13
  %24 = load ptr, ptr %12, align 8, !tbaa !76
  %25 = load ptr, ptr %24, align 8, !tbaa !80
  %26 = tail call i32 %25(ptr noundef nonnull %0) #32
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %117, label %13, !llvm.loop !174

28:                                               ; preds = %19, %17
  %29 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 8
  %30 = load i32, ptr %29, align 8, !tbaa !81
  %31 = icmp sgt i32 %30, 0
  br i1 %31, label %32, label %111

32:                                               ; preds = %28
  %33 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 43
  %34 = load ptr, ptr %33, align 8, !tbaa !86
  %35 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  %36 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 80
  br label %37

37:                                               ; preds = %105, %32
  %38 = phi i64 [ 0, %32 ], [ %106, %105 ]
  %39 = phi ptr [ %34, %32 ], [ %107, %105 ]
  %40 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %39, i64 0, i32 12
  %41 = load i32, ptr %40, align 8, !tbaa !175
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %105, label %43

43:                                               ; preds = %37
  %44 = load ptr, ptr %35, align 8, !tbaa !50
  %45 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %44, i64 0, i32 8
  %46 = load ptr, ptr %45, align 8, !tbaa !156
  %47 = getelementptr inbounds %struct.my_coef_controller.119, ptr %4, i64 0, i32 5, i64 %38
  %48 = load ptr, ptr %47, align 8, !tbaa !10
  %49 = load i32, ptr %11, align 8, !tbaa !154
  %50 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %39, i64 0, i32 3
  %51 = load i32, ptr %50, align 4, !tbaa !134
  %52 = mul i32 %51, %49
  %53 = tail call ptr %46(ptr noundef nonnull %0, ptr noundef %48, i32 noundef %52, i32 noundef %51, i32 noundef 0) #32
  %54 = load i32, ptr %11, align 8, !tbaa !154
  %55 = icmp ult i32 %54, %7
  br i1 %55, label %56, label %58

56:                                               ; preds = %43
  %57 = load i32, ptr %50, align 4, !tbaa !134
  br label %65

58:                                               ; preds = %43
  %59 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %39, i64 0, i32 8
  %60 = load i32, ptr %59, align 8, !tbaa !139
  %61 = load i32, ptr %50, align 4, !tbaa !134
  %62 = urem i32 %60, %61
  %63 = icmp eq i32 %62, 0
  %64 = select i1 %63, i32 %61, i32 %62
  br label %65

65:                                               ; preds = %58, %56
  %66 = phi i32 [ %57, %56 ], [ %64, %58 ]
  %67 = load ptr, ptr %36, align 8, !tbaa !176
  %68 = getelementptr inbounds %struct.jpeg_inverse_dct, ptr %67, i64 0, i32 1, i64 %38
  %69 = load ptr, ptr %68, align 8, !tbaa !10
  %70 = icmp sgt i32 %66, 0
  br i1 %70, label %71, label %105

71:                                               ; preds = %65
  %72 = getelementptr inbounds ptr, ptr %1, i64 %38
  %73 = load ptr, ptr %72, align 8, !tbaa !10
  %74 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %39, i64 0, i32 7
  %75 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %39, i64 0, i32 9
  %76 = zext i32 %66 to i64
  %77 = load i32, ptr %74, align 4, !tbaa !137
  br label %78

78:                                               ; preds = %98, %71
  %79 = phi i32 [ %77, %71 ], [ %100, %98 ]
  %80 = phi i64 [ 0, %71 ], [ %103, %98 ]
  %81 = phi ptr [ %73, %71 ], [ %102, %98 ]
  %82 = icmp eq i32 %79, 0
  br i1 %82, label %83, label %85

83:                                               ; preds = %78
  %84 = load i32, ptr %75, align 4, !tbaa !177
  br label %98

85:                                               ; preds = %78
  %86 = getelementptr inbounds ptr, ptr %53, i64 %80
  %87 = load ptr, ptr %86, align 8, !tbaa !10
  br label %88

88:                                               ; preds = %88, %85
  %89 = phi i32 [ %94, %88 ], [ 0, %85 ]
  %90 = phi ptr [ %92, %88 ], [ %87, %85 ]
  %91 = phi i32 [ %95, %88 ], [ 0, %85 ]
  tail call void %69(ptr noundef %0, ptr noundef nonnull %39, ptr noundef %90, ptr noundef %81, i32 noundef %89) #32
  %92 = getelementptr inbounds [64 x i16], ptr %90, i64 1
  %93 = load i32, ptr %75, align 4, !tbaa !177
  %94 = add i32 %93, %89
  %95 = add nuw i32 %91, 1
  %96 = load i32, ptr %74, align 4, !tbaa !137
  %97 = icmp ult i32 %95, %96
  br i1 %97, label %88, label %98, !llvm.loop !178

98:                                               ; preds = %88, %83
  %99 = phi i32 [ %84, %83 ], [ %93, %88 ]
  %100 = phi i32 [ 0, %83 ], [ %96, %88 ]
  %101 = sext i32 %99 to i64
  %102 = getelementptr inbounds ptr, ptr %81, i64 %101
  %103 = add nuw nsw i64 %80, 1
  %104 = icmp eq i64 %103, %76
  br i1 %104, label %105, label %78, !llvm.loop !179

105:                                              ; preds = %98, %65, %37
  %106 = add nuw nsw i64 %38, 1
  %107 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %39, i64 1
  %108 = load i32, ptr %29, align 8, !tbaa !81
  %109 = sext i32 %108 to i64
  %110 = icmp slt i64 %106, %109
  br i1 %110, label %37, label %111, !llvm.loop !180

111:                                              ; preds = %105, %28
  %112 = load i32, ptr %11, align 8, !tbaa !154
  %113 = add i32 %112, 1
  store i32 %113, ptr %11, align 8, !tbaa !154
  %114 = load i32, ptr %5, align 8, !tbaa !106
  %115 = icmp ult i32 %113, %114
  %116 = select i1 %115, i32 3, i32 4
  br label %117

117:                                              ; preds = %111, %23
  %118 = phi i32 [ %116, %111 ], [ 0, %23 ]
  ret i32 %118
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @dummy_consume_data(ptr nocapture readnone %0) #12 {
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @decompress_onepass(ptr noundef %0, ptr nocapture noundef readonly %1) #6 {
  %3 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 75
  %4 = load ptr, ptr %3, align 8, !tbaa !128
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 64
  %6 = load i32, ptr %5, align 8, !tbaa !162
  %7 = add i32 %6, -1
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 60
  %9 = load i32, ptr %8, align 8, !tbaa !106
  %10 = add i32 %9, -1
  %11 = getelementptr inbounds %struct.my_coef_controller.119, ptr %4, i64 0, i32 2
  %12 = load i32, ptr %11, align 4, !tbaa !159
  %13 = getelementptr inbounds %struct.my_coef_controller.119, ptr %4, i64 0, i32 3
  %14 = load i32, ptr %13, align 8, !tbaa !160
  %15 = icmp slt i32 %12, %14
  br i1 %15, label %16, label %145

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.my_coef_controller.119, ptr %4, i64 0, i32 1
  %18 = getelementptr inbounds %struct.my_coef_controller.119, ptr %4, i64 0, i32 4
  %19 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 66
  %20 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 79
  %21 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 62
  %22 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 80
  %23 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 35
  %24 = load i32, ptr %17, align 8, !tbaa !161
  br label %25

25:                                               ; preds = %139, %16
  %26 = phi i32 [ %14, %16 ], [ %140, %139 ]
  %27 = phi i32 [ %24, %16 ], [ 0, %139 ]
  %28 = phi i32 [ %12, %16 ], [ %141, %139 ]
  %29 = icmp ugt i32 %27, %7
  br i1 %29, label %139, label %30

30:                                               ; preds = %134, %25
  %31 = phi i32 [ %135, %134 ], [ %27, %25 ]
  %32 = load ptr, ptr %18, align 8, !tbaa !10
  %33 = load i32, ptr %19, align 8, !tbaa !181
  %34 = sext i32 %33 to i64
  %35 = shl nsw i64 %34, 7
  tail call void @jzero_far(ptr noundef %32, i64 noundef %35) #32
  %36 = load ptr, ptr %20, align 8, !tbaa !168
  %37 = getelementptr inbounds %struct.jpeg_d_main_controller, ptr %36, i64 0, i32 1
  %38 = load ptr, ptr %37, align 8, !tbaa !169
  %39 = tail call i32 %38(ptr noundef %0, ptr noundef nonnull %18) #32
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %46, label %41

41:                                               ; preds = %30
  %42 = load i32, ptr %21, align 8, !tbaa !155
  %43 = icmp sgt i32 %42, 0
  br i1 %43, label %44, label %134

44:                                               ; preds = %41
  %45 = icmp ult i32 %31, %7
  br label %47

46:                                               ; preds = %30
  %.lcssa4 = phi i32 [ %28, %30 ]
  %.lcssa2 = phi i32 [ %31, %30 ]
  store i32 %.lcssa4, ptr %11, align 4, !tbaa !159
  store i32 %.lcssa2, ptr %17, align 8, !tbaa !161
  br label %160

47:                                               ; preds = %128, %44
  %48 = phi i32 [ %42, %44 ], [ %129, %128 ]
  %49 = phi i64 [ 0, %44 ], [ %131, %128 ]
  %50 = phi i32 [ 0, %44 ], [ %130, %128 ]
  %51 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 63, i64 %49
  %52 = load ptr, ptr %51, align 8, !tbaa !10
  %53 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %52, i64 0, i32 12
  %54 = load i32, ptr %53, align 8, !tbaa !175
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %60

56:                                               ; preds = %47
  %57 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %52, i64 0, i32 15
  %58 = load i32, ptr %57, align 4, !tbaa !182
  %59 = add nsw i32 %58, %50
  br label %128

60:                                               ; preds = %47
  %61 = load ptr, ptr %22, align 8, !tbaa !176
  %62 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %52, i64 0, i32 1
  %63 = load i32, ptr %62, align 4, !tbaa !157
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds %struct.jpeg_inverse_dct, ptr %61, i64 0, i32 1, i64 %64
  %66 = load ptr, ptr %65, align 8, !tbaa !10
  %67 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %52, i64 0, i32 13
  %68 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %52, i64 0, i32 9
  %69 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %52, i64 0, i32 16
  %70 = load i32, ptr %69, align 8, !tbaa !183
  %71 = mul i32 %70, %31
  %72 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %52, i64 0, i32 14
  %73 = load i32, ptr %72, align 8, !tbaa !164
  %74 = icmp sgt i32 %73, 0
  br i1 %74, label %75, label %128

75:                                               ; preds = %60
  %76 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %52, i64 0, i32 17
  %77 = select i1 %45, ptr %67, ptr %76
  %78 = load i32, ptr %77, align 4, !tbaa !41
  %79 = getelementptr inbounds ptr, ptr %1, i64 %49
  %80 = load ptr, ptr %79, align 8, !tbaa !10
  %81 = load i32, ptr %68, align 4, !tbaa !177
  %82 = mul nsw i32 %81, %28
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds ptr, ptr %80, i64 %83
  %85 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %52, i64 0, i32 18
  %86 = icmp slt i32 %78, 1
  %87 = tail call i32 @llvm.smax.i32(i32 %78, i32 1)
  %88 = zext i32 %87 to i64
  br label %89

89:                                               ; preds = %117, %75
  %90 = phi i32 [ %73, %75 ], [ %118, %117 ]
  %91 = phi i32 [ %81, %75 ], [ %119, %117 ]
  %92 = phi i32 [ %50, %75 ], [ %121, %117 ]
  %93 = phi ptr [ %84, %75 ], [ %123, %117 ]
  %94 = phi i32 [ 0, %75 ], [ %124, %117 ]
  %95 = load i32, ptr %23, align 8, !tbaa !148
  %96 = icmp ult i32 %95, %10
  br i1 %96, label %102, label %97

97:                                               ; preds = %89
  %98 = add nsw i32 %94, %28
  %99 = load i32, ptr %85, align 8, !tbaa !184
  %100 = icmp sge i32 %98, %99
  %101 = select i1 %100, i1 true, i1 %86
  br i1 %101, label %117, label %103

102:                                              ; preds = %89
  br i1 %86, label %117, label %103

103:                                              ; preds = %102, %97
  %104 = sext i32 %92 to i64
  br label %105

105:                                              ; preds = %105, %103
  %106 = phi i64 [ 0, %103 ], [ %113, %105 ]
  %107 = phi i32 [ %71, %103 ], [ %112, %105 ]
  %108 = add nsw i64 %106, %104
  %109 = getelementptr inbounds %struct.my_coef_controller.119, ptr %4, i64 0, i32 4, i64 %108
  %110 = load ptr, ptr %109, align 8, !tbaa !10
  tail call void %66(ptr noundef %0, ptr noundef nonnull %52, ptr noundef %110, ptr noundef %93, i32 noundef %107) #32
  %111 = load i32, ptr %68, align 4, !tbaa !177
  %112 = add i32 %111, %107
  %113 = add nuw nsw i64 %106, 1
  %114 = icmp eq i64 %113, %88
  br i1 %114, label %115, label %105, !llvm.loop !185

115:                                              ; preds = %105
  %.lcssa = phi i32 [ %111, %105 ]
  %116 = load i32, ptr %72, align 8, !tbaa !164
  br label %117

117:                                              ; preds = %115, %102, %97
  %118 = phi i32 [ %116, %115 ], [ %90, %97 ], [ %90, %102 ]
  %119 = phi i32 [ %.lcssa, %115 ], [ %91, %97 ], [ %91, %102 ]
  %120 = load i32, ptr %67, align 4, !tbaa !163
  %121 = add nsw i32 %120, %92
  %122 = sext i32 %119 to i64
  %123 = getelementptr inbounds ptr, ptr %93, i64 %122
  %124 = add nuw nsw i32 %94, 1
  %125 = icmp slt i32 %124, %118
  br i1 %125, label %89, label %126, !llvm.loop !186

126:                                              ; preds = %117
  %.lcssa1 = phi i32 [ %121, %117 ]
  %127 = load i32, ptr %21, align 8, !tbaa !155
  br label %128

128:                                              ; preds = %126, %60, %56
  %129 = phi i32 [ %48, %56 ], [ %48, %60 ], [ %127, %126 ]
  %130 = phi i32 [ %59, %56 ], [ %50, %60 ], [ %.lcssa1, %126 ]
  %131 = add nuw nsw i64 %49, 1
  %132 = sext i32 %129 to i64
  %133 = icmp slt i64 %131, %132
  br i1 %133, label %47, label %134, !llvm.loop !187

134:                                              ; preds = %128, %41
  %135 = add i32 %31, 1
  %136 = icmp ugt i32 %135, %7
  br i1 %136, label %137, label %30, !llvm.loop !188

137:                                              ; preds = %134
  %138 = load i32, ptr %13, align 8, !tbaa !160
  br label %139

139:                                              ; preds = %137, %25
  %140 = phi i32 [ %138, %137 ], [ %26, %25 ]
  store i32 0, ptr %17, align 8, !tbaa !161
  %141 = add nsw i32 %28, 1
  %142 = icmp slt i32 %141, %140
  br i1 %142, label %25, label %143, !llvm.loop !189

143:                                              ; preds = %139
  %144 = load i32, ptr %8, align 8, !tbaa !106
  br label %145

145:                                              ; preds = %143, %2
  %146 = phi i32 [ %144, %143 ], [ %9, %2 ]
  %147 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 37
  %148 = load i32, ptr %147, align 8, !tbaa !154
  %149 = add i32 %148, 1
  store i32 %149, ptr %147, align 8, !tbaa !154
  %150 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 35
  %151 = load i32, ptr %150, align 8, !tbaa !148
  %152 = add i32 %151, 1
  store i32 %152, ptr %150, align 8, !tbaa !148
  %153 = icmp ult i32 %152, %146
  br i1 %153, label %154, label %155

154:                                              ; preds = %145
  tail call fastcc void @start_iMCU_row(ptr noundef nonnull %0) #33
  br label %160

155:                                              ; preds = %145
  %156 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 77
  %157 = load ptr, ptr %156, align 8, !tbaa !76
  %158 = getelementptr inbounds %struct.jpeg_input_controller, ptr %157, i64 0, i32 3
  %159 = load ptr, ptr %158, align 8, !tbaa !173
  tail call void %159(ptr noundef nonnull %0) #32
  br label %160

160:                                              ; preds = %155, %154, %46
  %161 = phi i32 [ 0, %46 ], [ 3, %154 ], [ 4, %155 ]
  ret i32 %161
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #14

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal fastcc void @start_iMCU_row(ptr nocapture noundef readonly %0) unnamed_addr #13 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 75
  %3 = load ptr, ptr %2, align 8, !tbaa !128
  %4 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 62
  %5 = load i32, ptr %4, align 8, !tbaa !155
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %7, label %9

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.my_coef_controller.119, ptr %3, i64 0, i32 3
  store i32 1, ptr %8, align 8, !tbaa !160
  br label %25

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 35
  %11 = load i32, ptr %10, align 8, !tbaa !148
  %12 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 60
  %13 = load i32, ptr %12, align 8, !tbaa !106
  %14 = add i32 %13, -1
  %15 = icmp ult i32 %11, %14
  %16 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 63
  %17 = load ptr, ptr %16, align 8, !tbaa !10
  %18 = getelementptr inbounds %struct.my_coef_controller.119, ptr %3, i64 0, i32 3
  br i1 %15, label %19, label %22

19:                                               ; preds = %9
  %20 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %17, i64 0, i32 3
  %21 = load i32, ptr %20, align 4, !tbaa !134
  store i32 %21, ptr %18, align 8, !tbaa !160
  br label %25

22:                                               ; preds = %9
  %23 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %17, i64 0, i32 18
  %24 = load i32, ptr %23, align 8, !tbaa !184
  store i32 %24, ptr %18, align 8, !tbaa !160
  br label %25

25:                                               ; preds = %22, %19, %7
  %26 = getelementptr inbounds %struct.my_coef_controller.119, ptr %3, i64 0, i32 1
  store i32 0, ptr %26, align 8, !tbaa !161
  %27 = getelementptr inbounds %struct.my_coef_controller.119, ptr %3, i64 0, i32 2
  store i32 0, ptr %27, align 4, !tbaa !159
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @decompress_smooth_data(ptr noundef %0, ptr nocapture noundef readonly %1) #6 {
  %3 = alloca [64 x i16], align 16
  %4 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 75
  %5 = load ptr, ptr %4, align 8, !tbaa !128
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 60
  %7 = load i32, ptr %6, align 8, !tbaa !106
  %8 = add i32 %7, -1
  call void @llvm.lifetime.start.p0(i64 128, ptr nonnull %3) #31
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 34
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 36
  %11 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 77
  %12 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 68
  %13 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 35
  %14 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 37
  br label %15

15:                                               ; preds = %34, %2
  %16 = load i32, ptr %9, align 4, !tbaa !107
  %17 = load i32, ptr %10, align 4, !tbaa !108
  %18 = icmp sgt i32 %16, %17
  br i1 %18, label %38, label %19

19:                                               ; preds = %15
  %20 = load ptr, ptr %11, align 8, !tbaa !76
  %21 = getelementptr inbounds %struct.jpeg_input_controller, ptr %20, i64 0, i32 5
  %22 = load i32, ptr %21, align 4, !tbaa !98
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %38

24:                                               ; preds = %19
  %25 = icmp eq i32 %16, %17
  br i1 %25, label %26, label %34

26:                                               ; preds = %24
  %27 = load i32, ptr %12, align 4, !tbaa !190
  %28 = icmp eq i32 %27, 0
  %29 = zext i1 %28 to i32
  %30 = load i32, ptr %13, align 8, !tbaa !148
  %31 = load i32, ptr %14, align 8, !tbaa !154
  %32 = add i32 %31, %29
  %33 = icmp ugt i32 %30, %32
  br i1 %33, label %38, label %34

34:                                               ; preds = %26, %24
  %35 = load ptr, ptr %20, align 8, !tbaa !80
  %36 = tail call i32 %35(ptr noundef nonnull %0) #32
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %412, label %15, !llvm.loop !191

38:                                               ; preds = %26, %19, %15
  %39 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 8
  %40 = load i32, ptr %39, align 8, !tbaa !81
  %41 = icmp sgt i32 %40, 0
  br i1 %41, label %42, label %406

42:                                               ; preds = %38
  %43 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 43
  %44 = load ptr, ptr %43, align 8, !tbaa !86
  %45 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  %46 = getelementptr inbounds %struct.my_coef_controller.119, ptr %5, i64 0, i32 6
  %47 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 80
  %48 = getelementptr inbounds [64 x i16], ptr %3, i64 0, i64 1
  %49 = getelementptr inbounds [64 x i16], ptr %3, i64 0, i64 8
  %50 = getelementptr inbounds [64 x i16], ptr %3, i64 0, i64 16
  %51 = getelementptr inbounds [64 x i16], ptr %3, i64 0, i64 9
  %52 = getelementptr inbounds [64 x i16], ptr %3, i64 0, i64 2
  br label %53

53:                                               ; preds = %400, %42
  %54 = phi i64 [ 0, %42 ], [ %401, %400 ]
  %55 = phi ptr [ %44, %42 ], [ %402, %400 ]
  %56 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %55, i64 0, i32 12
  %57 = load i32, ptr %56, align 8, !tbaa !175
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %400, label %59

59:                                               ; preds = %53
  %60 = load i32, ptr %14, align 8, !tbaa !154
  %61 = icmp uge i32 %60, %8
  br i1 %61, label %66, label %62

62:                                               ; preds = %59
  %63 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %55, i64 0, i32 3
  %64 = load i32, ptr %63, align 4, !tbaa !134
  %65 = shl nsw i32 %64, 1
  br label %74

66:                                               ; preds = %59
  %67 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %55, i64 0, i32 8
  %68 = load i32, ptr %67, align 8, !tbaa !139
  %69 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %55, i64 0, i32 3
  %70 = load i32, ptr %69, align 4, !tbaa !134
  %71 = urem i32 %68, %70
  %72 = icmp eq i32 %71, 0
  %73 = select i1 %72, i32 %70, i32 %71
  br label %74

74:                                               ; preds = %66, %62
  %75 = phi i32 [ %64, %62 ], [ %70, %66 ]
  %76 = phi i32 [ %65, %62 ], [ %73, %66 ]
  %77 = phi i32 [ %64, %62 ], [ %73, %66 ]
  %78 = icmp eq i32 %60, 0
  br i1 %78, label %93, label %79

79:                                               ; preds = %74
  %80 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %55, i64 0, i32 3
  %81 = add nsw i32 %75, %76
  %82 = load ptr, ptr %45, align 8, !tbaa !50
  %83 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %82, i64 0, i32 8
  %84 = load ptr, ptr %83, align 8, !tbaa !156
  %85 = getelementptr inbounds %struct.my_coef_controller.119, ptr %5, i64 0, i32 5, i64 %54
  %86 = load ptr, ptr %85, align 8, !tbaa !10
  %87 = add i32 %60, -1
  %88 = mul i32 %75, %87
  %89 = call ptr %84(ptr noundef nonnull %0, ptr noundef %86, i32 noundef %88, i32 noundef %81, i32 noundef 0) #32
  %90 = load i32, ptr %80, align 4, !tbaa !134
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds ptr, ptr %89, i64 %91
  br label %100

93:                                               ; preds = %74
  %94 = load ptr, ptr %45, align 8, !tbaa !50
  %95 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %94, i64 0, i32 8
  %96 = load ptr, ptr %95, align 8, !tbaa !156
  %97 = getelementptr inbounds %struct.my_coef_controller.119, ptr %5, i64 0, i32 5, i64 %54
  %98 = load ptr, ptr %97, align 8, !tbaa !10
  %99 = call ptr %96(ptr noundef nonnull %0, ptr noundef %98, i32 noundef 0, i32 noundef %76, i32 noundef 0) #32
  br label %100

100:                                              ; preds = %93, %79
  %101 = phi ptr [ %92, %79 ], [ %99, %93 ]
  %102 = load ptr, ptr %47, align 8, !tbaa !176
  %103 = getelementptr inbounds %struct.jpeg_inverse_dct, ptr %102, i64 0, i32 1, i64 %54
  %104 = load ptr, ptr %103, align 8, !tbaa !10
  %105 = icmp sgt i32 %77, 0
  br i1 %105, label %106, label %400

106:                                              ; preds = %100
  %107 = getelementptr inbounds ptr, ptr %1, i64 %54
  %108 = load ptr, ptr %107, align 8, !tbaa !10
  %109 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %55, i64 0, i32 19
  %110 = load ptr, ptr %109, align 8, !tbaa !151
  %111 = getelementptr inbounds [64 x i16], ptr %110, i64 0, i64 2
  %112 = load i16, ptr %111, align 4, !tbaa !12
  %113 = zext i16 %112 to i64
  %114 = getelementptr inbounds [64 x i16], ptr %110, i64 0, i64 9
  %115 = load i16, ptr %114, align 2, !tbaa !12
  %116 = zext i16 %115 to i64
  %117 = getelementptr inbounds [64 x i16], ptr %110, i64 0, i64 16
  %118 = load i16, ptr %117, align 4, !tbaa !12
  %119 = zext i16 %118 to i64
  %120 = getelementptr inbounds [64 x i16], ptr %110, i64 0, i64 8
  %121 = load i16, ptr %120, align 4, !tbaa !12
  %122 = zext i16 %121 to i64
  %123 = getelementptr inbounds [64 x i16], ptr %110, i64 0, i64 1
  %124 = load i16, ptr %123, align 2, !tbaa !12
  %125 = zext i16 %124 to i64
  %126 = load i16, ptr %110, align 4, !tbaa !12
  %127 = zext i16 %126 to i64
  %128 = load ptr, ptr %46, align 8, !tbaa !133
  %129 = mul i64 %54, 6
  %130 = and i64 %129, 4294967294
  %131 = getelementptr inbounds i32, ptr %128, i64 %130
  %132 = add nsw i32 %77, -1
  %133 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %55, i64 0, i32 7
  %134 = getelementptr inbounds i32, ptr %131, i64 1
  %135 = mul nuw nsw i64 %127, 36
  %136 = shl nuw nsw i64 %125, 7
  %137 = shl nuw nsw i64 %125, 8
  %138 = getelementptr inbounds i32, ptr %131, i64 2
  %139 = shl nuw nsw i64 %122, 7
  %140 = shl nuw nsw i64 %122, 8
  %141 = getelementptr inbounds i32, ptr %131, i64 3
  %142 = mul nuw nsw i64 %127, 9
  %143 = shl nuw nsw i64 %119, 7
  %144 = shl nuw nsw i64 %119, 8
  %145 = getelementptr inbounds i32, ptr %131, i64 4
  %146 = mul nuw nsw i64 %127, 5
  %147 = shl nuw nsw i64 %116, 7
  %148 = shl nuw nsw i64 %116, 8
  %149 = getelementptr inbounds i32, ptr %131, i64 5
  %150 = shl nuw nsw i64 %113, 7
  %151 = shl nuw nsw i64 %113, 8
  %152 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %55, i64 0, i32 9
  %153 = zext i32 %132 to i64
  %154 = zext i32 %77 to i64
  br label %155

155:                                              ; preds = %395, %106
  %156 = phi i64 [ 0, %106 ], [ %398, %395 ]
  %157 = phi ptr [ %108, %106 ], [ %397, %395 ]
  %158 = getelementptr inbounds ptr, ptr %101, i64 %156
  %159 = load ptr, ptr %158, align 8, !tbaa !10
  %160 = trunc i64 %156 to i32
  %161 = or i32 %60, %160
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %167, label %163

163:                                              ; preds = %155
  %164 = add nsw i64 %156, -1
  %165 = getelementptr inbounds ptr, ptr %101, i64 %164
  %166 = load ptr, ptr %165, align 8, !tbaa !10
  br label %167

167:                                              ; preds = %163, %155
  %168 = phi ptr [ %166, %163 ], [ %159, %155 ]
  %169 = icmp eq i64 %156, %153
  %170 = select i1 %61, i1 %169, i1 false
  br i1 %170, label %175, label %171

171:                                              ; preds = %167
  %172 = add nuw nsw i64 %156, 1
  %173 = getelementptr inbounds ptr, ptr %101, i64 %172
  %174 = load ptr, ptr %173, align 8, !tbaa !10
  br label %175

175:                                              ; preds = %171, %167
  %176 = phi ptr [ %174, %171 ], [ %159, %167 ]
  %177 = load i16, ptr %168, align 2, !tbaa !12
  %178 = sext i16 %177 to i32
  %179 = load i16, ptr %159, align 2, !tbaa !12
  %180 = sext i16 %179 to i32
  %181 = load i16, ptr %176, align 2, !tbaa !12
  %182 = sext i16 %181 to i32
  %183 = load i32, ptr %133, align 4, !tbaa !137
  %184 = add i32 %183, -1
  br label %185

185:                                              ; preds = %387, %175
  %186 = phi i32 [ %182, %175 ], [ %211, %387 ]
  %187 = phi i32 [ %182, %175 ], [ %186, %387 ]
  %188 = phi i32 [ %180, %175 ], [ %210, %387 ]
  %189 = phi i32 [ %180, %175 ], [ %188, %387 ]
  %190 = phi i32 [ %178, %175 ], [ %209, %387 ]
  %191 = phi i32 [ %178, %175 ], [ %190, %387 ]
  %192 = phi i32 [ 0, %175 ], [ %393, %387 ]
  %193 = phi ptr [ %159, %175 ], [ %388, %387 ]
  %194 = phi ptr [ %168, %175 ], [ %389, %387 ]
  %195 = phi ptr [ %176, %175 ], [ %390, %387 ]
  %196 = phi i32 [ 0, %175 ], [ %392, %387 ]
  call void @jcopy_block_row(ptr noundef nonnull %193, ptr noundef nonnull %3, i32 noundef 1) #32
  %197 = icmp ult i32 %192, %184
  br i1 %197, label %198, label %208

198:                                              ; preds = %185
  %199 = getelementptr inbounds [64 x i16], ptr %194, i64 1
  %200 = load i16, ptr %199, align 2, !tbaa !12
  %201 = sext i16 %200 to i32
  %202 = getelementptr inbounds [64 x i16], ptr %193, i64 1
  %203 = load i16, ptr %202, align 2, !tbaa !12
  %204 = sext i16 %203 to i32
  %205 = getelementptr inbounds [64 x i16], ptr %195, i64 1
  %206 = load i16, ptr %205, align 2, !tbaa !12
  %207 = sext i16 %206 to i32
  br label %208

208:                                              ; preds = %198, %185
  %209 = phi i32 [ %201, %198 ], [ %190, %185 ]
  %210 = phi i32 [ %204, %198 ], [ %188, %185 ]
  %211 = phi i32 [ %207, %198 ], [ %186, %185 ]
  %212 = load i32, ptr %134, align 4, !tbaa !41
  %213 = icmp ne i32 %212, 0
  %214 = load i16, ptr %48, align 2
  %215 = icmp eq i16 %214, 0
  %216 = select i1 %213, i1 %215, i1 false
  br i1 %216, label %217, label %245

217:                                              ; preds = %208
  %218 = sub nsw i32 %189, %210
  %219 = sext i32 %218 to i64
  %220 = mul nsw i64 %135, %219
  %221 = icmp sgt i64 %220, -1
  %222 = icmp sgt i32 %212, 0
  br i1 %221, label %223, label %232

223:                                              ; preds = %217
  %224 = add nuw nsw i64 %220, %136
  %225 = udiv i64 %224, %137
  %226 = trunc i64 %225 to i32
  br i1 %222, label %227, label %242

227:                                              ; preds = %223
  %228 = shl nuw i32 1, %212
  %229 = icmp sgt i32 %228, %226
  %230 = add nsw i32 %228, -1
  %231 = select i1 %229, i32 %226, i32 %230
  br label %242

232:                                              ; preds = %217
  %233 = sub nsw i64 %136, %220
  %234 = udiv i64 %233, %137
  %235 = trunc i64 %234 to i32
  %236 = shl nuw i32 1, %212
  %237 = icmp sgt i32 %236, %235
  %238 = add nsw i32 %236, -1
  %239 = select i1 %237, i32 %235, i32 %238
  %240 = select i1 %222, i32 %239, i32 %235
  %241 = sub nsw i32 0, %240
  br label %242

242:                                              ; preds = %232, %227, %223
  %243 = phi i32 [ %226, %223 ], [ %241, %232 ], [ %231, %227 ]
  %244 = trunc i32 %243 to i16
  store i16 %244, ptr %48, align 2, !tbaa !12
  br label %245

245:                                              ; preds = %242, %208
  %246 = load i32, ptr %138, align 4, !tbaa !41
  %247 = icmp ne i32 %246, 0
  %248 = load i16, ptr %49, align 16
  %249 = icmp eq i16 %248, 0
  %250 = select i1 %247, i1 %249, i1 false
  br i1 %250, label %251, label %279

251:                                              ; preds = %245
  %252 = sub nsw i32 %190, %186
  %253 = sext i32 %252 to i64
  %254 = mul nsw i64 %135, %253
  %255 = icmp sgt i64 %254, -1
  %256 = icmp sgt i32 %246, 0
  br i1 %255, label %257, label %266

257:                                              ; preds = %251
  %258 = add nuw nsw i64 %254, %139
  %259 = udiv i64 %258, %140
  %260 = trunc i64 %259 to i32
  br i1 %256, label %261, label %276

261:                                              ; preds = %257
  %262 = shl nuw i32 1, %246
  %263 = icmp sgt i32 %262, %260
  %264 = add nsw i32 %262, -1
  %265 = select i1 %263, i32 %260, i32 %264
  br label %276

266:                                              ; preds = %251
  %267 = sub nsw i64 %139, %254
  %268 = udiv i64 %267, %140
  %269 = trunc i64 %268 to i32
  %270 = shl nuw i32 1, %246
  %271 = icmp sgt i32 %270, %269
  %272 = add nsw i32 %270, -1
  %273 = select i1 %271, i32 %269, i32 %272
  %274 = select i1 %256, i32 %273, i32 %269
  %275 = sub nsw i32 0, %274
  br label %276

276:                                              ; preds = %266, %261, %257
  %277 = phi i32 [ %260, %257 ], [ %275, %266 ], [ %265, %261 ]
  %278 = trunc i32 %277 to i16
  store i16 %278, ptr %49, align 16, !tbaa !12
  br label %279

279:                                              ; preds = %276, %245
  %280 = load i32, ptr %141, align 4, !tbaa !41
  %281 = icmp ne i32 %280, 0
  %282 = load i16, ptr %50, align 16
  %283 = icmp eq i16 %282, 0
  %284 = select i1 %281, i1 %283, i1 false
  br i1 %284, label %285, label %315

285:                                              ; preds = %279
  %286 = shl nsw i32 %188, 1
  %287 = sub i32 %190, %286
  %288 = add i32 %287, %186
  %289 = sext i32 %288 to i64
  %290 = mul nsw i64 %142, %289
  %291 = icmp sgt i64 %290, -1
  %292 = icmp sgt i32 %280, 0
  br i1 %291, label %293, label %302

293:                                              ; preds = %285
  %294 = add nuw nsw i64 %290, %143
  %295 = udiv i64 %294, %144
  %296 = trunc i64 %295 to i32
  br i1 %292, label %297, label %312

297:                                              ; preds = %293
  %298 = shl nuw i32 1, %280
  %299 = icmp sgt i32 %298, %296
  %300 = add nsw i32 %298, -1
  %301 = select i1 %299, i32 %296, i32 %300
  br label %312

302:                                              ; preds = %285
  %303 = sub nsw i64 %143, %290
  %304 = udiv i64 %303, %144
  %305 = trunc i64 %304 to i32
  %306 = shl nuw i32 1, %280
  %307 = icmp sgt i32 %306, %305
  %308 = add nsw i32 %306, -1
  %309 = select i1 %307, i32 %305, i32 %308
  %310 = select i1 %292, i32 %309, i32 %305
  %311 = sub nsw i32 0, %310
  br label %312

312:                                              ; preds = %302, %297, %293
  %313 = phi i32 [ %296, %293 ], [ %311, %302 ], [ %301, %297 ]
  %314 = trunc i32 %313 to i16
  store i16 %314, ptr %50, align 16, !tbaa !12
  br label %315

315:                                              ; preds = %312, %279
  %316 = load i32, ptr %145, align 4, !tbaa !41
  %317 = icmp ne i32 %316, 0
  %318 = load i16, ptr %51, align 2
  %319 = icmp eq i16 %318, 0
  %320 = select i1 %317, i1 %319, i1 false
  br i1 %320, label %321, label %351

321:                                              ; preds = %315
  %322 = add nsw i32 %187, %209
  %323 = sub nsw i32 %191, %322
  %324 = add nsw i32 %323, %211
  %325 = sext i32 %324 to i64
  %326 = mul nsw i64 %146, %325
  %327 = icmp sgt i64 %326, -1
  %328 = icmp sgt i32 %316, 0
  br i1 %327, label %329, label %338

329:                                              ; preds = %321
  %330 = add nuw nsw i64 %326, %147
  %331 = udiv i64 %330, %148
  %332 = trunc i64 %331 to i32
  br i1 %328, label %333, label %348

333:                                              ; preds = %329
  %334 = shl nuw i32 1, %316
  %335 = icmp sgt i32 %334, %332
  %336 = add nsw i32 %334, -1
  %337 = select i1 %335, i32 %332, i32 %336
  br label %348

338:                                              ; preds = %321
  %339 = sub nsw i64 %147, %326
  %340 = udiv i64 %339, %148
  %341 = trunc i64 %340 to i32
  %342 = shl nuw i32 1, %316
  %343 = icmp sgt i32 %342, %341
  %344 = add nsw i32 %342, -1
  %345 = select i1 %343, i32 %341, i32 %344
  %346 = select i1 %328, i32 %345, i32 %341
  %347 = sub nsw i32 0, %346
  br label %348

348:                                              ; preds = %338, %333, %329
  %349 = phi i32 [ %332, %329 ], [ %347, %338 ], [ %337, %333 ]
  %350 = trunc i32 %349 to i16
  store i16 %350, ptr %51, align 2, !tbaa !12
  br label %351

351:                                              ; preds = %348, %315
  %352 = load i32, ptr %149, align 4, !tbaa !41
  %353 = icmp ne i32 %352, 0
  %354 = load i16, ptr %52, align 4
  %355 = icmp eq i16 %354, 0
  %356 = select i1 %353, i1 %355, i1 false
  br i1 %356, label %357, label %387

357:                                              ; preds = %351
  %358 = shl nsw i32 %188, 1
  %359 = sub i32 %189, %358
  %360 = add i32 %359, %210
  %361 = sext i32 %360 to i64
  %362 = mul nsw i64 %142, %361
  %363 = icmp sgt i64 %362, -1
  %364 = icmp sgt i32 %352, 0
  br i1 %363, label %365, label %374

365:                                              ; preds = %357
  %366 = add nuw nsw i64 %362, %150
  %367 = udiv i64 %366, %151
  %368 = trunc i64 %367 to i32
  br i1 %364, label %369, label %384

369:                                              ; preds = %365
  %370 = shl nuw i32 1, %352
  %371 = icmp sgt i32 %370, %368
  %372 = add nsw i32 %370, -1
  %373 = select i1 %371, i32 %368, i32 %372
  br label %384

374:                                              ; preds = %357
  %375 = sub nsw i64 %150, %362
  %376 = udiv i64 %375, %151
  %377 = trunc i64 %376 to i32
  %378 = shl nuw i32 1, %352
  %379 = icmp sgt i32 %378, %377
  %380 = add nsw i32 %378, -1
  %381 = select i1 %379, i32 %377, i32 %380
  %382 = select i1 %364, i32 %381, i32 %377
  %383 = sub nsw i32 0, %382
  br label %384

384:                                              ; preds = %374, %369, %365
  %385 = phi i32 [ %368, %365 ], [ %383, %374 ], [ %373, %369 ]
  %386 = trunc i32 %385 to i16
  store i16 %386, ptr %52, align 4, !tbaa !12
  br label %387

387:                                              ; preds = %384, %351
  call void %104(ptr noundef %0, ptr noundef nonnull %55, ptr noundef nonnull %3, ptr noundef %157, i32 noundef %196) #32
  %388 = getelementptr inbounds [64 x i16], ptr %193, i64 1
  %389 = getelementptr inbounds [64 x i16], ptr %194, i64 1
  %390 = getelementptr inbounds [64 x i16], ptr %195, i64 1
  %391 = load i32, ptr %152, align 4, !tbaa !177
  %392 = add i32 %391, %196
  %393 = add i32 %192, 1
  %394 = icmp ugt i32 %393, %184
  br i1 %394, label %395, label %185, !llvm.loop !192

395:                                              ; preds = %387
  %.lcssa = phi i32 [ %391, %387 ]
  %396 = sext i32 %.lcssa to i64
  %397 = getelementptr inbounds ptr, ptr %157, i64 %396
  %398 = add nuw nsw i64 %156, 1
  %399 = icmp eq i64 %398, %154
  br i1 %399, label %400, label %155, !llvm.loop !193

400:                                              ; preds = %395, %100, %53
  %401 = add nuw nsw i64 %54, 1
  %402 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %55, i64 1
  %403 = load i32, ptr %39, align 8, !tbaa !81
  %404 = sext i32 %403 to i64
  %405 = icmp slt i64 %401, %404
  br i1 %405, label %53, label %406, !llvm.loop !194

406:                                              ; preds = %400, %38
  %407 = load i32, ptr %14, align 8, !tbaa !154
  %408 = add i32 %407, 1
  store i32 %408, ptr %14, align 8, !tbaa !154
  %409 = load i32, ptr %6, align 8, !tbaa !106
  %410 = icmp ult i32 %408, %409
  %411 = select i1 %410, i32 3, i32 4
  br label %412

412:                                              ; preds = %406, %34
  %413 = phi i32 [ %411, %406 ], [ 0, %34 ]
  call void @llvm.lifetime.end.p0(i64 128, ptr nonnull %3) #31
  ret i32 %413
}

; Function Attrs: nounwind optsize uwtable
define internal void @jinit_color_deconverter(ptr noundef %0) #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !50
  %4 = load ptr, ptr %3, align 8, !tbaa !65
  %5 = tail call ptr %4(ptr noundef %0, i32 noundef 1, i64 noundef 48) #32
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 82
  store ptr %5, ptr %6, align 8, !tbaa !195
  store ptr @start_pass_dcolor, ptr %5, align 8, !tbaa !196
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 9
  %8 = load i32, ptr %7, align 4, !tbaa !89
  switch i32 %8, label %21 [
    i32 1, label %9
    i32 2, label %13
    i32 3, label %13
    i32 4, label %17
    i32 5, label %17
  ]

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 8
  %11 = load i32, ptr %10, align 8, !tbaa !81
  %12 = icmp eq i32 %11, 1
  br i1 %12, label %29, label %25

13:                                               ; preds = %1, %1
  %14 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 8
  %15 = load i32, ptr %14, align 8, !tbaa !81
  %16 = icmp eq i32 %15, 3
  br i1 %16, label %29, label %25

17:                                               ; preds = %1, %1
  %18 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 8
  %19 = load i32, ptr %18, align 8, !tbaa !81
  %20 = icmp eq i32 %19, 4
  br i1 %20, label %29, label %25

21:                                               ; preds = %1
  %22 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 8
  %23 = load i32, ptr %22, align 8, !tbaa !81
  %24 = icmp slt i32 %23, 1
  br i1 %24, label %25, label %29

25:                                               ; preds = %21, %17, %13, %9
  %26 = load ptr, ptr %0, align 8, !tbaa !16
  %27 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %26, i64 0, i32 5
  store i32 8, ptr %27, align 8, !tbaa !25
  %28 = load ptr, ptr %26, align 8, !tbaa !26
  tail call void %28(ptr noundef nonnull %0) #32
  br label %29

29:                                               ; preds = %25, %21, %17, %13, %9
  %30 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 10
  %31 = load i32, ptr %30, align 8, !tbaa !48
  switch i32 %31, label %75 [
    i32 1, label %32
    i32 2, label %53
    i32 4, label %64
  ]

32:                                               ; preds = %29
  %33 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 28
  store i32 1, ptr %33, align 8, !tbaa !199
  %34 = load i32, ptr %7, align 4, !tbaa !89
  switch i32 %34, label %49 [
    i32 1, label %35
    i32 3, label %35
  ]

35:                                               ; preds = %32, %32
  %36 = getelementptr inbounds %struct.jpeg_d_main_controller, ptr %5, i64 0, i32 1
  store ptr @grayscale_convert, ptr %36, align 8, !tbaa !200
  %37 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 8
  %38 = load i32, ptr %37, align 8, !tbaa !81
  %39 = icmp sgt i32 %38, 1
  br i1 %39, label %40, label %87

40:                                               ; preds = %35
  %41 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 43
  %42 = load ptr, ptr %41, align 8, !tbaa !86
  %43 = zext i32 %38 to i64
  br label %44

44:                                               ; preds = %44, %40
  %45 = phi i64 [ 1, %40 ], [ %47, %44 ]
  %46 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %42, i64 %45, i32 12
  store i32 0, ptr %46, align 8, !tbaa !175
  %47 = add nuw nsw i64 %45, 1
  %48 = icmp eq i64 %47, %43
  br i1 %48, label %87, label %44, !llvm.loop !201

49:                                               ; preds = %32
  %50 = load ptr, ptr %0, align 8, !tbaa !16
  %51 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %50, i64 0, i32 5
  store i32 25, ptr %51, align 8, !tbaa !25
  %52 = load ptr, ptr %50, align 8, !tbaa !26
  tail call void %52(ptr noundef nonnull %0) #32
  br label %87

53:                                               ; preds = %29
  %54 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 28
  store i32 3, ptr %54, align 8, !tbaa !199
  %55 = load i32, ptr %7, align 4, !tbaa !89
  switch i32 %55, label %60 [
    i32 3, label %56
    i32 2, label %58
  ]

56:                                               ; preds = %53
  %57 = getelementptr inbounds %struct.jpeg_d_main_controller, ptr %5, i64 0, i32 1
  store ptr @ycc_rgb_convert, ptr %57, align 8, !tbaa !200
  tail call fastcc void @build_ycc_rgb_table(ptr noundef nonnull %0) #33
  br label %87

58:                                               ; preds = %53
  %59 = getelementptr inbounds %struct.jpeg_d_main_controller, ptr %5, i64 0, i32 1
  store ptr @null_convert, ptr %59, align 8, !tbaa !200
  br label %87

60:                                               ; preds = %53
  %61 = load ptr, ptr %0, align 8, !tbaa !16
  %62 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %61, i64 0, i32 5
  store i32 25, ptr %62, align 8, !tbaa !25
  %63 = load ptr, ptr %61, align 8, !tbaa !26
  tail call void %63(ptr noundef nonnull %0) #32
  br label %87

64:                                               ; preds = %29
  %65 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 28
  store i32 4, ptr %65, align 8, !tbaa !199
  %66 = load i32, ptr %7, align 4, !tbaa !89
  switch i32 %66, label %71 [
    i32 5, label %67
    i32 4, label %69
  ]

67:                                               ; preds = %64
  %68 = getelementptr inbounds %struct.jpeg_d_main_controller, ptr %5, i64 0, i32 1
  store ptr @ycck_cmyk_convert, ptr %68, align 8, !tbaa !200
  tail call fastcc void @build_ycc_rgb_table(ptr noundef nonnull %0) #33
  br label %87

69:                                               ; preds = %64
  %70 = getelementptr inbounds %struct.jpeg_d_main_controller, ptr %5, i64 0, i32 1
  store ptr @null_convert, ptr %70, align 8, !tbaa !200
  br label %87

71:                                               ; preds = %64
  %72 = load ptr, ptr %0, align 8, !tbaa !16
  %73 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %72, i64 0, i32 5
  store i32 25, ptr %73, align 8, !tbaa !25
  %74 = load ptr, ptr %72, align 8, !tbaa !26
  tail call void %74(ptr noundef nonnull %0) #32
  br label %87

75:                                               ; preds = %29
  %76 = load i32, ptr %7, align 4, !tbaa !89
  %77 = icmp eq i32 %31, %76
  br i1 %77, label %78, label %83

78:                                               ; preds = %75
  %79 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 8
  %80 = load i32, ptr %79, align 8, !tbaa !81
  %81 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 28
  store i32 %80, ptr %81, align 8, !tbaa !199
  %82 = getelementptr inbounds %struct.jpeg_d_main_controller, ptr %5, i64 0, i32 1
  store ptr @null_convert, ptr %82, align 8, !tbaa !200
  br label %87

83:                                               ; preds = %75
  %84 = load ptr, ptr %0, align 8, !tbaa !16
  %85 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %84, i64 0, i32 5
  store i32 25, ptr %85, align 8, !tbaa !25
  %86 = load ptr, ptr %84, align 8, !tbaa !26
  tail call void %86(ptr noundef nonnull %0) #32
  br label %87

87:                                               ; preds = %83, %78, %71, %69, %67, %60, %58, %56, %49, %44, %35
  %88 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 19
  %89 = load i32, ptr %88, align 4, !tbaa !43
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %94

91:                                               ; preds = %87
  %92 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 28
  %93 = load i32, ptr %92, align 8, !tbaa !199
  br label %94

94:                                               ; preds = %91, %87
  %95 = phi i32 [ %93, %91 ], [ 1, %87 ]
  %96 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 29
  store i32 %95, ptr %96, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal void @start_pass_dcolor(ptr nocapture %0) #12 {
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @grayscale_convert(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 noundef %2, ptr noundef %3, i32 noundef %4) #6 {
  %6 = load ptr, ptr %1, align 8, !tbaa !10
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  %8 = load i32, ptr %7, align 8, !tbaa !202
  tail call void @jcopy_sample_rows(ptr noundef %6, i32 noundef %2, ptr noundef %3, i32 noundef 0, i32 noundef %4, i32 noundef %8) #32
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @ycc_rgb_convert(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 noundef %2, ptr nocapture noundef readonly %3, i32 noundef %4) #15 {
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 82
  %7 = load ptr, ptr %6, align 8, !tbaa !195
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 61
  %9 = load ptr, ptr %8, align 8, !tbaa !203
  %10 = getelementptr inbounds %struct.my_color_deconverter, ptr %7, i64 0, i32 1
  %11 = load ptr, ptr %10, align 8, !tbaa !204
  %12 = getelementptr inbounds %struct.my_color_deconverter, ptr %7, i64 0, i32 2
  %13 = load ptr, ptr %12, align 8, !tbaa !205
  %14 = getelementptr inbounds %struct.my_color_deconverter, ptr %7, i64 0, i32 3
  %15 = load ptr, ptr %14, align 8, !tbaa !206
  %16 = getelementptr inbounds %struct.my_color_deconverter, ptr %7, i64 0, i32 4
  %17 = load ptr, ptr %16, align 8, !tbaa !207
  %18 = icmp sgt i32 %4, 0
  br i1 %18, label %19, label %87

19:                                               ; preds = %5
  %20 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  %21 = load i32, ptr %20, align 8, !tbaa !202
  %22 = getelementptr inbounds ptr, ptr %1, i64 1
  %23 = getelementptr inbounds ptr, ptr %1, i64 2
  %24 = icmp eq i32 %21, 0
  %25 = zext i32 %21 to i64
  br label %28

26:                                               ; preds = %47, %28
  %27 = icmp sgt i32 %29, 1
  br i1 %27, label %28, label %87, !llvm.loop !208

28:                                               ; preds = %26, %19
  %29 = phi i32 [ %4, %19 ], [ %32, %26 ]
  %30 = phi i32 [ %2, %19 ], [ %43, %26 ]
  %31 = phi ptr [ %3, %19 ], [ %44, %26 ]
  %32 = add nsw i32 %29, -1
  %33 = load ptr, ptr %1, align 8, !tbaa !10
  %34 = zext i32 %30 to i64
  %35 = getelementptr inbounds ptr, ptr %33, i64 %34
  %36 = load ptr, ptr %35, align 8, !tbaa !10
  %37 = load ptr, ptr %22, align 8, !tbaa !10
  %38 = getelementptr inbounds ptr, ptr %37, i64 %34
  %39 = load ptr, ptr %38, align 8, !tbaa !10
  %40 = load ptr, ptr %23, align 8, !tbaa !10
  %41 = getelementptr inbounds ptr, ptr %40, i64 %34
  %42 = load ptr, ptr %41, align 8, !tbaa !10
  %43 = add i32 %30, 1
  %44 = getelementptr inbounds ptr, ptr %31, i64 1
  br i1 %24, label %26, label %45

45:                                               ; preds = %28
  %46 = load ptr, ptr %31, align 8, !tbaa !10
  br label %47

47:                                               ; preds = %47, %45
  %48 = phi i64 [ 0, %45 ], [ %85, %47 ]
  %49 = phi ptr [ %46, %45 ], [ %84, %47 ]
  %50 = getelementptr inbounds i8, ptr %36, i64 %48
  %51 = load i8, ptr %50, align 1, !tbaa !7
  %52 = zext i8 %51 to i32
  %53 = getelementptr inbounds i8, ptr %39, i64 %48
  %54 = load i8, ptr %53, align 1, !tbaa !7
  %55 = getelementptr inbounds i8, ptr %42, i64 %48
  %56 = load i8, ptr %55, align 1, !tbaa !7
  %57 = zext i8 %56 to i64
  %58 = getelementptr inbounds i32, ptr %11, i64 %57
  %59 = load i32, ptr %58, align 4, !tbaa !41
  %60 = add nsw i32 %59, %52
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i8, ptr %9, i64 %61
  %63 = load i8, ptr %62, align 1, !tbaa !7
  store i8 %63, ptr %49, align 1, !tbaa !7
  %64 = zext i8 %54 to i64
  %65 = getelementptr inbounds i64, ptr %17, i64 %64
  %66 = load i64, ptr %65, align 8, !tbaa !49
  %67 = getelementptr inbounds i64, ptr %15, i64 %57
  %68 = load i64, ptr %67, align 8, !tbaa !49
  %69 = add nsw i64 %68, %66
  %70 = lshr i64 %69, 16
  %71 = trunc i64 %70 to i32
  %72 = add nsw i32 %71, %52
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds i8, ptr %9, i64 %73
  %75 = load i8, ptr %74, align 1, !tbaa !7
  %76 = getelementptr inbounds i8, ptr %49, i64 1
  store i8 %75, ptr %76, align 1, !tbaa !7
  %77 = getelementptr inbounds i32, ptr %13, i64 %64
  %78 = load i32, ptr %77, align 4, !tbaa !41
  %79 = add nsw i32 %78, %52
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds i8, ptr %9, i64 %80
  %82 = load i8, ptr %81, align 1, !tbaa !7
  %83 = getelementptr inbounds i8, ptr %49, i64 2
  store i8 %82, ptr %83, align 1, !tbaa !7
  %84 = getelementptr inbounds i8, ptr %49, i64 3
  %85 = add nuw nsw i64 %48, 1
  %86 = icmp eq i64 %85, %25
  br i1 %86, label %26, label %47, !llvm.loop !209

87:                                               ; preds = %26, %5
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @build_ycc_rgb_table(ptr noundef %0) unnamed_addr #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 82
  %3 = load ptr, ptr %2, align 8, !tbaa !195
  %4 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8, !tbaa !50
  %6 = load ptr, ptr %5, align 8, !tbaa !65
  %7 = tail call ptr %6(ptr noundef %0, i32 noundef 1, i64 noundef 1024) #32
  %8 = getelementptr inbounds %struct.my_color_deconverter, ptr %3, i64 0, i32 1
  store ptr %7, ptr %8, align 8, !tbaa !204
  %9 = load ptr, ptr %4, align 8, !tbaa !50
  %10 = load ptr, ptr %9, align 8, !tbaa !65
  %11 = tail call ptr %10(ptr noundef %0, i32 noundef 1, i64 noundef 1024) #32
  %12 = getelementptr inbounds %struct.my_color_deconverter, ptr %3, i64 0, i32 2
  store ptr %11, ptr %12, align 8, !tbaa !205
  %13 = load ptr, ptr %4, align 8, !tbaa !50
  %14 = load ptr, ptr %13, align 8, !tbaa !65
  %15 = tail call ptr %14(ptr noundef %0, i32 noundef 1, i64 noundef 2048) #32
  %16 = getelementptr inbounds %struct.my_color_deconverter, ptr %3, i64 0, i32 3
  store ptr %15, ptr %16, align 8, !tbaa !206
  %17 = load ptr, ptr %4, align 8, !tbaa !50
  %18 = load ptr, ptr %17, align 8, !tbaa !65
  %19 = tail call ptr %18(ptr noundef %0, i32 noundef 1, i64 noundef 2048) #32
  %20 = getelementptr inbounds %struct.my_color_deconverter, ptr %3, i64 0, i32 4
  store ptr %19, ptr %20, align 8, !tbaa !207
  %21 = load ptr, ptr %8, align 8, !tbaa !204
  %22 = load ptr, ptr %12, align 8, !tbaa !205
  %23 = load ptr, ptr %16, align 8, !tbaa !206
  br label %24

24:                                               ; preds = %24, %1
  %25 = phi i64 [ 0, %1 ], [ %42, %24 ]
  %26 = phi i64 [ -128, %1 ], [ %43, %24 ]
  %27 = mul nsw i64 %26, 91881
  %28 = add nsw i64 %27, 32768
  %29 = lshr i64 %28, 16
  %30 = trunc i64 %29 to i32
  %31 = getelementptr inbounds i32, ptr %21, i64 %25
  store i32 %30, ptr %31, align 4, !tbaa !41
  %32 = mul nsw i64 %26, 116130
  %33 = add nsw i64 %32, 32768
  %34 = lshr i64 %33, 16
  %35 = trunc i64 %34 to i32
  %36 = getelementptr inbounds i32, ptr %22, i64 %25
  store i32 %35, ptr %36, align 4, !tbaa !41
  %37 = mul nsw i64 %26, -46802
  %38 = getelementptr inbounds i64, ptr %23, i64 %25
  store i64 %37, ptr %38, align 8, !tbaa !49
  %39 = mul nsw i64 %26, -22554
  %40 = add nsw i64 %39, 32768
  %41 = getelementptr inbounds i64, ptr %19, i64 %25
  store i64 %40, ptr %41, align 8, !tbaa !49
  %42 = add nuw nsw i64 %25, 1
  %43 = add nsw i64 %26, 1
  %44 = icmp eq i64 %42, 256
  br i1 %44, label %45, label %24, !llvm.loop !210

45:                                               ; preds = %24
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @null_convert(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 noundef %2, ptr nocapture noundef readonly %3, i32 noundef %4) #15 {
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  %7 = load i32, ptr %6, align 8, !tbaa !202
  %8 = icmp sgt i32 %4, 0
  br i1 %8, label %9, label %48

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 8
  %11 = load i32, ptr %10, align 8, !tbaa !81
  %12 = icmp sgt i32 %11, 0
  %13 = icmp eq i32 %7, 0
  %14 = sext i32 %11 to i64
  %15 = zext i32 %11 to i64
  br label %16

16:                                               ; preds = %44, %9
  %17 = phi i32 [ %4, %9 ], [ %20, %44 ]
  %18 = phi i32 [ %2, %9 ], [ %45, %44 ]
  %19 = phi ptr [ %3, %9 ], [ %46, %44 ]
  %20 = add nsw i32 %17, -1
  br i1 %12, label %21, label %44

21:                                               ; preds = %16
  %22 = zext i32 %18 to i64
  br label %23

23:                                               ; preds = %41, %21
  %24 = phi i64 [ 0, %21 ], [ %42, %41 ]
  br i1 %13, label %41, label %25

25:                                               ; preds = %23
  %26 = load ptr, ptr %19, align 8, !tbaa !10
  %27 = getelementptr inbounds i8, ptr %26, i64 %24
  %28 = getelementptr inbounds ptr, ptr %1, i64 %24
  %29 = load ptr, ptr %28, align 8, !tbaa !10
  %30 = getelementptr inbounds ptr, ptr %29, i64 %22
  %31 = load ptr, ptr %30, align 8, !tbaa !10
  br label %32

32:                                               ; preds = %32, %25
  %33 = phi i32 [ %39, %32 ], [ %7, %25 ]
  %34 = phi ptr [ %38, %32 ], [ %27, %25 ]
  %35 = phi ptr [ %36, %32 ], [ %31, %25 ]
  %36 = getelementptr inbounds i8, ptr %35, i64 1
  %37 = load i8, ptr %35, align 1, !tbaa !7
  store i8 %37, ptr %34, align 1, !tbaa !7
  %38 = getelementptr inbounds i8, ptr %34, i64 %14
  %39 = add i32 %33, -1
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %32, !llvm.loop !211

41:                                               ; preds = %32, %23
  %42 = add nuw nsw i64 %24, 1
  %43 = icmp eq i64 %42, %15
  br i1 %43, label %44, label %23, !llvm.loop !212

44:                                               ; preds = %41, %16
  %45 = add i32 %18, 1
  %46 = getelementptr inbounds ptr, ptr %19, i64 1
  %47 = icmp sgt i32 %17, 1
  br i1 %47, label %16, label %48, !llvm.loop !213

48:                                               ; preds = %44, %5
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @ycck_cmyk_convert(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 noundef %2, ptr nocapture noundef readonly %3, i32 noundef %4) #15 {
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 82
  %7 = load ptr, ptr %6, align 8, !tbaa !195
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 61
  %9 = load ptr, ptr %8, align 8, !tbaa !203
  %10 = getelementptr inbounds %struct.my_color_deconverter, ptr %7, i64 0, i32 1
  %11 = load ptr, ptr %10, align 8, !tbaa !204
  %12 = getelementptr inbounds %struct.my_color_deconverter, ptr %7, i64 0, i32 2
  %13 = load ptr, ptr %12, align 8, !tbaa !205
  %14 = getelementptr inbounds %struct.my_color_deconverter, ptr %7, i64 0, i32 3
  %15 = load ptr, ptr %14, align 8, !tbaa !206
  %16 = getelementptr inbounds %struct.my_color_deconverter, ptr %7, i64 0, i32 4
  %17 = load ptr, ptr %16, align 8, !tbaa !207
  %18 = icmp sgt i32 %4, 0
  br i1 %18, label %19, label %95

19:                                               ; preds = %5
  %20 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  %21 = load i32, ptr %20, align 8, !tbaa !202
  %22 = getelementptr inbounds ptr, ptr %1, i64 1
  %23 = getelementptr inbounds ptr, ptr %1, i64 2
  %24 = getelementptr inbounds ptr, ptr %1, i64 3
  %25 = icmp eq i32 %21, 0
  %26 = zext i32 %21 to i64
  br label %29

27:                                               ; preds = %51, %29
  %28 = icmp sgt i32 %30, 1
  br i1 %28, label %29, label %95, !llvm.loop !214

29:                                               ; preds = %27, %19
  %30 = phi i32 [ %4, %19 ], [ %33, %27 ]
  %31 = phi i32 [ %2, %19 ], [ %47, %27 ]
  %32 = phi ptr [ %3, %19 ], [ %48, %27 ]
  %33 = add nsw i32 %30, -1
  %34 = load ptr, ptr %1, align 8, !tbaa !10
  %35 = zext i32 %31 to i64
  %36 = getelementptr inbounds ptr, ptr %34, i64 %35
  %37 = load ptr, ptr %36, align 8, !tbaa !10
  %38 = load ptr, ptr %22, align 8, !tbaa !10
  %39 = getelementptr inbounds ptr, ptr %38, i64 %35
  %40 = load ptr, ptr %39, align 8, !tbaa !10
  %41 = load ptr, ptr %23, align 8, !tbaa !10
  %42 = getelementptr inbounds ptr, ptr %41, i64 %35
  %43 = load ptr, ptr %42, align 8, !tbaa !10
  %44 = load ptr, ptr %24, align 8, !tbaa !10
  %45 = getelementptr inbounds ptr, ptr %44, i64 %35
  %46 = load ptr, ptr %45, align 8, !tbaa !10
  %47 = add i32 %31, 1
  %48 = getelementptr inbounds ptr, ptr %32, i64 1
  br i1 %25, label %27, label %49

49:                                               ; preds = %29
  %50 = load ptr, ptr %32, align 8, !tbaa !10
  br label %51

51:                                               ; preds = %51, %49
  %52 = phi i64 [ 0, %49 ], [ %93, %51 ]
  %53 = phi ptr [ %50, %49 ], [ %92, %51 ]
  %54 = getelementptr inbounds i8, ptr %37, i64 %52
  %55 = load i8, ptr %54, align 1, !tbaa !7
  %56 = getelementptr inbounds i8, ptr %40, i64 %52
  %57 = load i8, ptr %56, align 1, !tbaa !7
  %58 = getelementptr inbounds i8, ptr %43, i64 %52
  %59 = load i8, ptr %58, align 1, !tbaa !7
  %60 = zext i8 %59 to i64
  %61 = getelementptr inbounds i32, ptr %11, i64 %60
  %62 = load i32, ptr %61, align 4, !tbaa !41
  %63 = xor i8 %55, -1
  %64 = zext i8 %63 to i32
  %65 = sub i32 %64, %62
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds i8, ptr %9, i64 %66
  %68 = load i8, ptr %67, align 1, !tbaa !7
  store i8 %68, ptr %53, align 1, !tbaa !7
  %69 = zext i8 %57 to i64
  %70 = getelementptr inbounds i64, ptr %17, i64 %69
  %71 = load i64, ptr %70, align 8, !tbaa !49
  %72 = getelementptr inbounds i64, ptr %15, i64 %60
  %73 = load i64, ptr %72, align 8, !tbaa !49
  %74 = add nsw i64 %73, %71
  %75 = lshr i64 %74, 16
  %76 = trunc i64 %75 to i32
  %77 = sub i32 %64, %76
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds i8, ptr %9, i64 %78
  %80 = load i8, ptr %79, align 1, !tbaa !7
  %81 = getelementptr inbounds i8, ptr %53, i64 1
  store i8 %80, ptr %81, align 1, !tbaa !7
  %82 = getelementptr inbounds i32, ptr %13, i64 %69
  %83 = load i32, ptr %82, align 4, !tbaa !41
  %84 = sub i32 %64, %83
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds i8, ptr %9, i64 %85
  %87 = load i8, ptr %86, align 1, !tbaa !7
  %88 = getelementptr inbounds i8, ptr %53, i64 2
  store i8 %87, ptr %88, align 1, !tbaa !7
  %89 = getelementptr inbounds i8, ptr %46, i64 %52
  %90 = load i8, ptr %89, align 1, !tbaa !7
  %91 = getelementptr inbounds i8, ptr %53, i64 3
  store i8 %90, ptr %91, align 1, !tbaa !7
  %92 = getelementptr inbounds i8, ptr %53, i64 4
  %93 = add nuw nsw i64 %52, 1
  %94 = icmp eq i64 %93, %26
  br i1 %94, label %27, label %51, !llvm.loop !215

95:                                               ; preds = %27, %5
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @jinit_inverse_dct(ptr noundef %0) #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !50
  %4 = load ptr, ptr %3, align 8, !tbaa !65
  %5 = tail call ptr %4(ptr noundef %0, i32 noundef 1, i64 noundef 128) #32
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 80
  store ptr %5, ptr %6, align 8, !tbaa !176
  store ptr @start_pass, ptr %5, align 8, !tbaa !216
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 8
  %8 = load i32, ptr %7, align 8, !tbaa !81
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %26

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 43
  %12 = load ptr, ptr %11, align 8, !tbaa !86
  br label %13

13:                                               ; preds = %13, %10
  %14 = phi i64 [ 0, %10 ], [ %21, %13 ]
  %15 = phi ptr [ %12, %10 ], [ %22, %13 ]
  %16 = load ptr, ptr %2, align 8, !tbaa !50
  %17 = load ptr, ptr %16, align 8, !tbaa !65
  %18 = tail call ptr %17(ptr noundef nonnull %0, i32 noundef 1, i64 noundef 256) #32
  %19 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %15, i64 0, i32 20
  store ptr %18, ptr %19, align 8, !tbaa !219
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(256) %18, i8 0, i64 256, i1 false)
  %20 = getelementptr inbounds %struct.my_idct_controller, ptr %5, i64 0, i32 1, i64 %14
  store i32 -1, ptr %20, align 4, !tbaa !41
  %21 = add nuw nsw i64 %14, 1
  %22 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %15, i64 1
  %23 = load i32, ptr %7, align 8, !tbaa !81
  %24 = sext i32 %23 to i64
  %25 = icmp slt i64 %21, %24
  br i1 %25, label %13, label %26, !llvm.loop !220

26:                                               ; preds = %13, %1
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @start_pass(ptr noundef %0) #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 80
  %3 = load ptr, ptr %2, align 8, !tbaa !176
  %4 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 8
  %5 = load i32, ptr %4, align 8, !tbaa !81
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %122

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 43
  %9 = load ptr, ptr %8, align 8, !tbaa !86
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 16
  br label %11

11:                                               ; preds = %116, %7
  %12 = phi i64 [ 0, %7 ], [ %117, %116 ]
  %13 = phi ptr [ %9, %7 ], [ %118, %116 ]
  %14 = phi i32 [ 0, %7 ], [ %39, %116 ]
  %15 = phi ptr [ null, %7 ], [ %38, %116 ]
  %16 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %13, i64 0, i32 9
  %17 = load i32, ptr %16, align 4, !tbaa !177
  switch i32 %17, label %27 [
    i32 1, label %37
    i32 2, label %18
    i32 4, label %19
    i32 8, label %20
  ]

18:                                               ; preds = %11
  br label %37

19:                                               ; preds = %11
  br label %37

20:                                               ; preds = %11
  %21 = load i32, ptr %10, align 8, !tbaa !44
  %22 = icmp ult i32 %21, 3
  br i1 %22, label %33, label %23

23:                                               ; preds = %20
  %24 = load ptr, ptr %0, align 8, !tbaa !16
  %25 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %24, i64 0, i32 5
  store i32 47, ptr %25, align 8, !tbaa !25
  %26 = load ptr, ptr %24, align 8, !tbaa !26
  tail call void %26(ptr noundef nonnull %0) #32
  br label %37

27:                                               ; preds = %11
  %28 = load ptr, ptr %0, align 8, !tbaa !16
  %29 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %28, i64 0, i32 5
  store i32 6, ptr %29, align 8, !tbaa !25
  %30 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %28, i64 0, i32 6
  store i32 %17, ptr %30, align 4, !tbaa !7
  %31 = load ptr, ptr %0, align 8, !tbaa !16
  %32 = load ptr, ptr %31, align 8, !tbaa !26
  tail call void %32(ptr noundef nonnull %0) #32
  br label %37

33:                                               ; preds = %20
  %34 = sext i32 %21 to i64
  %35 = getelementptr inbounds [3 x ptr], ptr @switch.table.start_pass, i64 0, i64 %34
  %36 = load ptr, ptr %35, align 8
  br label %37

37:                                               ; preds = %33, %27, %23, %19, %18, %11
  %38 = phi ptr [ %15, %27 ], [ %15, %23 ], [ @jpeg_idct_4x4, %19 ], [ @jpeg_idct_2x2, %18 ], [ @jpeg_idct_1x1, %11 ], [ %36, %33 ]
  %39 = phi i32 [ %14, %27 ], [ %14, %23 ], [ 0, %19 ], [ 0, %18 ], [ 0, %11 ], [ %21, %33 ]
  %40 = getelementptr inbounds %struct.jpeg_inverse_dct, ptr %3, i64 0, i32 1, i64 %12
  store ptr %38, ptr %40, align 8, !tbaa !10
  %41 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %13, i64 0, i32 12
  %42 = load i32, ptr %41, align 8, !tbaa !175
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %116, label %44

44:                                               ; preds = %37
  %45 = getelementptr inbounds %struct.my_idct_controller, ptr %3, i64 0, i32 1, i64 %12
  %46 = load i32, ptr %45, align 4, !tbaa !41
  %47 = icmp eq i32 %46, %39
  br i1 %47, label %116, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %13, i64 0, i32 19
  %50 = load ptr, ptr %49, align 8, !tbaa !151
  %51 = icmp eq ptr %50, null
  br i1 %51, label %116, label %52

52:                                               ; preds = %48
  store i32 %39, ptr %45, align 4, !tbaa !41
  switch i32 %39, label %112 [
    i32 0, label %53
    i32 1, label %64
    i32 2, label %82
  ]

53:                                               ; preds = %52
  %54 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %13, i64 0, i32 20
  %55 = load ptr, ptr %54, align 8, !tbaa !219
  br label %56

56:                                               ; preds = %56, %53
  %57 = phi i64 [ 0, %53 ], [ %62, %56 ]
  %58 = getelementptr inbounds [64 x i16], ptr %50, i64 0, i64 %57
  %59 = load <4 x i16>, ptr %58, align 2, !tbaa !12
  %60 = zext <4 x i16> %59 to <4 x i32>
  %61 = getelementptr inbounds i32, ptr %55, i64 %57
  store <4 x i32> %60, ptr %61, align 4, !tbaa !41
  %62 = add nuw i64 %57, 4
  %63 = icmp eq i64 %62, 64
  br i1 %63, label %116, label %56, !llvm.loop !221

64:                                               ; preds = %52
  %65 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %13, i64 0, i32 20
  %66 = load ptr, ptr %65, align 8, !tbaa !219
  br label %67

67:                                               ; preds = %67, %64
  %68 = phi i64 [ 0, %64 ], [ %80, %67 ]
  %69 = getelementptr inbounds [64 x i16], ptr %50, i64 0, i64 %68
  %70 = load i16, ptr %69, align 2, !tbaa !12
  %71 = zext i16 %70 to i64
  %72 = getelementptr inbounds [64 x i16], ptr @start_pass.aanscales, i64 0, i64 %68
  %73 = load i16, ptr %72, align 2, !tbaa !12
  %74 = sext i16 %73 to i64
  %75 = mul nsw i64 %74, %71
  %76 = add nsw i64 %75, 2048
  %77 = ashr i64 %76, 12
  %78 = trunc i64 %77 to i32
  %79 = getelementptr inbounds i32, ptr %66, i64 %68
  store i32 %78, ptr %79, align 4, !tbaa !41
  %80 = add nuw nsw i64 %68, 1
  %81 = icmp eq i64 %80, 64
  br i1 %81, label %116, label %67, !llvm.loop !222

82:                                               ; preds = %52
  %83 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %13, i64 0, i32 20
  %84 = load ptr, ptr %83, align 8, !tbaa !219
  br label %85

85:                                               ; preds = %109, %82
  %86 = phi i64 [ 0, %82 ], [ %110, %109 ]
  %87 = phi i64 [ 0, %82 ], [ %92, %109 ]
  %88 = shl i64 %87, 32
  %89 = ashr exact i64 %88, 32
  %90 = getelementptr inbounds [8 x double], ptr @start_pass.aanscalefactor, i64 0, i64 %86
  %91 = load double, ptr %90, align 8, !tbaa !223
  %92 = add nsw i64 %89, 8
  %93 = insertelement <2 x double> poison, double %91, i64 0
  %94 = shufflevector <2 x double> %93, <2 x double> poison, <2 x i32> zeroinitializer
  br label %95

95:                                               ; preds = %95, %85
  %96 = phi i64 [ 0, %85 ], [ %107, %95 ]
  %97 = add i64 %89, %96
  %98 = getelementptr inbounds [64 x i16], ptr %50, i64 0, i64 %97
  %99 = load <2 x i16>, ptr %98, align 2, !tbaa !12
  %100 = uitofp <2 x i16> %99 to <2 x double>
  %101 = fmul <2 x double> %94, %100
  %102 = getelementptr inbounds [8 x double], ptr @start_pass.aanscalefactor, i64 0, i64 %96
  %103 = load <2 x double>, ptr %102, align 16, !tbaa !223
  %104 = fmul <2 x double> %101, %103
  %105 = fptrunc <2 x double> %104 to <2 x float>
  %106 = getelementptr inbounds float, ptr %84, i64 %97
  store <2 x float> %105, ptr %106, align 4, !tbaa !224
  %107 = add nuw i64 %96, 2
  %108 = icmp eq i64 %107, 8
  br i1 %108, label %109, label %95, !llvm.loop !226

109:                                              ; preds = %95
  %110 = add nuw nsw i64 %86, 1
  %111 = icmp eq i64 %110, 8
  br i1 %111, label %116, label %85, !llvm.loop !227

112:                                              ; preds = %52
  %113 = load ptr, ptr %0, align 8, !tbaa !16
  %114 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %113, i64 0, i32 5
  store i32 47, ptr %114, align 8, !tbaa !25
  %115 = load ptr, ptr %113, align 8, !tbaa !26
  tail call void %115(ptr noundef nonnull %0) #32
  br label %116

116:                                              ; preds = %112, %109, %67, %56, %48, %44, %37
  %117 = add nuw nsw i64 %12, 1
  %118 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %13, i64 1
  %119 = load i32, ptr %4, align 8, !tbaa !81
  %120 = sext i32 %119 to i64
  %121 = icmp slt i64 %117, %120
  br i1 %121, label %11, label %122, !llvm.loop !228

122:                                              ; preds = %116, %1
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @jpeg_make_d_derived_tbl(ptr noundef %0, ptr noundef %1, ptr nocapture noundef %2) #6 {
  %4 = alloca [257 x i8], align 16
  %5 = alloca [257 x i32], align 16
  call void @llvm.lifetime.start.p0(i64 257, ptr nonnull %4) #31
  call void @llvm.lifetime.start.p0(i64 1028, ptr nonnull %5) #31
  %6 = load ptr, ptr %2, align 8, !tbaa !10
  %7 = icmp eq ptr %6, null
  br i1 %7, label %8, label %13

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  %10 = load ptr, ptr %9, align 8, !tbaa !50
  %11 = load ptr, ptr %10, align 8, !tbaa !65
  %12 = tail call ptr %11(ptr noundef %0, i32 noundef 1, i64 noundef 1640) #32
  store ptr %12, ptr %2, align 8, !tbaa !10
  br label %13

13:                                               ; preds = %8, %3
  %14 = phi ptr [ %12, %8 ], [ %6, %3 ]
  %15 = getelementptr inbounds %struct.d_derived_tbl, ptr %14, i64 0, i32 3
  store ptr %1, ptr %15, align 8, !tbaa !229
  br label %16

16:                                               ; preds = %29, %13
  %17 = phi i64 [ 1, %13 ], [ %31, %29 ]
  %18 = phi i32 [ 0, %13 ], [ %30, %29 ]
  %19 = getelementptr inbounds [17 x i8], ptr %1, i64 0, i64 %17
  %20 = load i8, ptr %19, align 1, !tbaa !7
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %29, label %22

22:                                               ; preds = %16
  %23 = zext i8 %20 to i32
  %24 = trunc i64 %17 to i8
  %25 = sext i32 %18 to i64
  %26 = getelementptr i8, ptr %4, i64 %25
  %27 = zext i8 %20 to i64
  call void @llvm.memset.p0.i64(ptr align 1 %26, i8 %24, i64 %27, i1 false), !tbaa !7
  %28 = add i32 %18, %23
  br label %29

29:                                               ; preds = %22, %16
  %30 = phi i32 [ %18, %16 ], [ %28, %22 ]
  %31 = add nuw nsw i64 %17, 1
  %32 = icmp eq i64 %31, 17
  br i1 %32, label %33, label %16, !llvm.loop !231

33:                                               ; preds = %29
  %.lcssa3 = phi i32 [ %30, %29 ]
  %34 = sext i32 %.lcssa3 to i64
  %35 = getelementptr inbounds [257 x i8], ptr %4, i64 0, i64 %34
  store i8 0, ptr %35, align 1, !tbaa !7
  %36 = load i8, ptr %4, align 16, !tbaa !7
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %72, label %38

38:                                               ; preds = %33
  %39 = sext i8 %36 to i32
  br label %40

40:                                               ; preds = %65, %38
  %41 = phi i8 [ %66, %65 ], [ %36, %38 ]
  %42 = phi i32 [ %69, %65 ], [ 0, %38 ]
  %43 = phi i32 [ %70, %65 ], [ %39, %38 ]
  %44 = phi i32 [ %67, %65 ], [ 0, %38 ]
  %45 = sext i8 %41 to i32
  %46 = icmp eq i32 %43, %45
  br i1 %46, label %47, label %65

47:                                               ; preds = %40
  %48 = sext i32 %44 to i64
  br label %49

49:                                               ; preds = %49, %47
  %50 = phi i64 [ %48, %47 ], [ %52, %49 ]
  %51 = phi i32 [ %42, %47 ], [ %54, %49 ]
  %52 = add i64 %50, 1
  %53 = getelementptr inbounds [257 x i32], ptr %5, i64 0, i64 %50
  store i32 %51, ptr %53, align 4, !tbaa !41
  %54 = add i32 %51, 1
  %55 = getelementptr inbounds [257 x i8], ptr %4, i64 0, i64 %52
  %56 = load i8, ptr %55, align 1, !tbaa !7
  %57 = sext i8 %56 to i32
  %58 = icmp eq i32 %43, %57
  br i1 %58, label %49, label %59, !llvm.loop !232

59:                                               ; preds = %49
  %.lcssa2 = phi i64 [ %52, %49 ]
  %.lcssa1 = phi i32 [ %54, %49 ]
  %60 = trunc i64 %.lcssa2 to i32
  %61 = shl i64 %.lcssa2, 32
  %62 = ashr exact i64 %61, 32
  %63 = getelementptr inbounds [257 x i8], ptr %4, i64 0, i64 %62
  %64 = load i8, ptr %63, align 1, !tbaa !7
  br label %65

65:                                               ; preds = %59, %40
  %66 = phi i8 [ %64, %59 ], [ %41, %40 ]
  %67 = phi i32 [ %60, %59 ], [ %44, %40 ]
  %68 = phi i32 [ %.lcssa1, %59 ], [ %42, %40 ]
  %69 = shl i32 %68, 1
  %70 = add nsw i32 %43, 1
  %71 = icmp eq i8 %66, 0
  br i1 %71, label %72, label %40, !llvm.loop !233

72:                                               ; preds = %65, %33
  br label %73

73:                                               ; preds = %94, %72
  %74 = phi i64 [ %98, %94 ], [ 1, %72 ]
  %75 = phi i32 [ %96, %94 ], [ 0, %72 ]
  %76 = getelementptr inbounds [17 x i8], ptr %1, i64 0, i64 %74
  %77 = load i8, ptr %76, align 1, !tbaa !7
  %78 = icmp eq i8 %77, 0
  br i1 %78, label %94, label %79

79:                                               ; preds = %73
  %80 = getelementptr inbounds %struct.d_derived_tbl, ptr %14, i64 0, i32 2, i64 %74
  store i32 %75, ptr %80, align 4, !tbaa !41
  %81 = sext i32 %75 to i64
  %82 = getelementptr inbounds [257 x i32], ptr %5, i64 0, i64 %81
  %83 = load i32, ptr %82, align 4, !tbaa !41
  %84 = zext i32 %83 to i64
  %85 = getelementptr inbounds [17 x i64], ptr %14, i64 0, i64 %74
  store i64 %84, ptr %85, align 8, !tbaa !49
  %86 = load i8, ptr %76, align 1, !tbaa !7
  %87 = zext i8 %86 to i32
  %88 = add nsw i32 %75, %87
  %89 = add nsw i32 %88, -1
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds [257 x i32], ptr %5, i64 0, i64 %90
  %92 = load i32, ptr %91, align 4, !tbaa !41
  %93 = zext i32 %92 to i64
  br label %94

94:                                               ; preds = %79, %73
  %95 = phi i64 [ %93, %79 ], [ -1, %73 ]
  %96 = phi i32 [ %88, %79 ], [ %75, %73 ]
  %97 = getelementptr inbounds %struct.d_derived_tbl, ptr %14, i64 0, i32 1, i64 %74
  store i64 %95, ptr %97, align 8
  %98 = add nuw nsw i64 %74, 1
  %99 = icmp eq i64 %98, 17
  br i1 %99, label %100, label %73, !llvm.loop !234

100:                                              ; preds = %94
  %101 = getelementptr inbounds %struct.d_derived_tbl, ptr %14, i64 0, i32 1, i64 17
  store i64 1048575, ptr %101, align 8, !tbaa !49
  %102 = getelementptr inbounds %struct.d_derived_tbl, ptr %14, i64 0, i32 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(1024) %102, i8 0, i64 1024, i1 false)
  br label %103

103:                                              ; preds = %140, %100
  %104 = phi i64 [ 1, %100 ], [ %142, %140 ]
  %105 = phi i32 [ 0, %100 ], [ %141, %140 ]
  %106 = getelementptr inbounds [17 x i8], ptr %1, i64 0, i64 %104
  %107 = load i8, ptr %106, align 1, !tbaa !7
  %108 = icmp eq i8 %107, 0
  br i1 %108, label %140, label %109

109:                                              ; preds = %103
  %110 = trunc i64 %104 to i32
  %111 = sub i32 8, %110
  %112 = shl nuw i32 1, %111
  %113 = sext i32 %105 to i64
  %114 = trunc i64 %104 to i32
  br label %115

115:                                              ; preds = %132, %109
  %116 = phi i64 [ %113, %109 ], [ %135, %132 ]
  %117 = phi i32 [ 1, %109 ], [ %134, %132 ]
  %118 = getelementptr inbounds [257 x i32], ptr %5, i64 0, i64 %116
  %119 = load i32, ptr %118, align 4, !tbaa !41
  %120 = shl i32 %119, %111
  %121 = getelementptr inbounds %struct.JHUFF_TBL.59, ptr %1, i64 0, i32 1, i64 %116
  %122 = sext i32 %120 to i64
  br label %123

123:                                              ; preds = %123, %115
  %124 = phi i64 [ %122, %115 ], [ %129, %123 ]
  %125 = phi i32 [ %112, %115 ], [ %130, %123 ]
  %126 = getelementptr inbounds %struct.d_derived_tbl, ptr %14, i64 0, i32 4, i64 %124
  store i32 %114, ptr %126, align 4, !tbaa !41
  %127 = load i8, ptr %121, align 1, !tbaa !7
  %128 = getelementptr inbounds %struct.d_derived_tbl, ptr %14, i64 0, i32 5, i64 %124
  store i8 %127, ptr %128, align 1, !tbaa !7
  %129 = add nsw i64 %124, 1
  %130 = add nsw i32 %125, -1
  %131 = icmp sgt i32 %125, 1
  br i1 %131, label %123, label %132, !llvm.loop !235

132:                                              ; preds = %123
  %133 = load i8, ptr %106, align 1, !tbaa !7
  %134 = add nuw nsw i32 %117, 1
  %135 = add nsw i64 %116, 1
  %136 = zext i8 %133 to i32
  %137 = icmp ult i32 %117, %136
  br i1 %137, label %115, label %138, !llvm.loop !236

138:                                              ; preds = %132
  %.lcssa = phi i64 [ %135, %132 ]
  %139 = trunc i64 %.lcssa to i32
  br label %140

140:                                              ; preds = %138, %103
  %141 = phi i32 [ %105, %103 ], [ %139, %138 ]
  %142 = add nuw nsw i64 %104, 1
  %143 = icmp eq i64 %142, 9
  br i1 %143, label %144, label %103, !llvm.loop !237

144:                                              ; preds = %140
  call void @llvm.lifetime.end.p0(i64 1028, ptr nonnull %5) #31
  call void @llvm.lifetime.end.p0(i64 257, ptr nonnull %4) #31
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @jpeg_fill_bit_buffer(ptr nocapture noundef %0, i64 noundef %1, i32 noundef %2, i32 noundef %3) #6 {
  %5 = load ptr, ptr %0, align 8, !tbaa !238
  %6 = getelementptr inbounds %struct.bitread_working_state, ptr %0, i64 0, i32 1
  %7 = load i64, ptr %6, align 8, !tbaa !240
  %8 = icmp slt i32 %2, 25
  br i1 %8, label %9, label %95

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.bitread_working_state, ptr %0, i64 0, i32 2
  %11 = getelementptr inbounds %struct.bitread_working_state, ptr %0, i64 0, i32 5
  %12 = getelementptr inbounds %struct.bitread_working_state, ptr %0, i64 0, i32 6
  br label %13

13:                                               ; preds = %87, %9
  %14 = phi i64 [ %7, %9 ], [ %89, %87 ]
  %15 = phi ptr [ %5, %9 ], [ %88, %87 ]
  %16 = phi i32 [ %2, %9 ], [ %93, %87 ]
  %17 = phi i64 [ %1, %9 ], [ %92, %87 ]
  %18 = load i32, ptr %10, align 8, !tbaa !241
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %72

20:                                               ; preds = %13
  %21 = icmp eq i64 %14, 0
  br i1 %21, label %22, label %37

22:                                               ; preds = %20
  %23 = load ptr, ptr %11, align 8, !tbaa !242
  %24 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %23, i64 0, i32 5
  %25 = load ptr, ptr %24, align 8, !tbaa !54
  %26 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %25, i64 0, i32 3
  %27 = load ptr, ptr %26, align 8, !tbaa !57
  %28 = tail call i32 %27(ptr noundef %23) #32
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %102, label %30

30:                                               ; preds = %22
  %31 = load ptr, ptr %11, align 8, !tbaa !242
  %32 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %31, i64 0, i32 5
  %33 = load ptr, ptr %32, align 8, !tbaa !54
  %34 = load ptr, ptr %33, align 8, !tbaa !58
  %35 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %33, i64 0, i32 1
  %36 = load i64, ptr %35, align 8, !tbaa !55
  br label %37

37:                                               ; preds = %30, %20
  %38 = phi ptr [ %34, %30 ], [ %15, %20 ]
  %39 = phi i64 [ %36, %30 ], [ %14, %20 ]
  %40 = add i64 %39, -1
  %41 = getelementptr inbounds i8, ptr %38, i64 1
  %42 = load i8, ptr %38, align 1, !tbaa !7
  %43 = zext i8 %42 to i64
  %44 = icmp eq i8 %42, -1
  br i1 %44, label %45, label %87

45:                                               ; preds = %64, %37
  %46 = phi ptr [ %68, %64 ], [ %41, %37 ]
  %47 = phi i64 [ %67, %64 ], [ %40, %37 ]
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %49, label %64

49:                                               ; preds = %45
  %50 = load ptr, ptr %11, align 8, !tbaa !242
  %51 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %50, i64 0, i32 5
  %52 = load ptr, ptr %51, align 8, !tbaa !54
  %53 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %52, i64 0, i32 3
  %54 = load ptr, ptr %53, align 8, !tbaa !57
  %55 = tail call i32 %54(ptr noundef %50) #32
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %102, label %57

57:                                               ; preds = %49
  %58 = load ptr, ptr %11, align 8, !tbaa !242
  %59 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %58, i64 0, i32 5
  %60 = load ptr, ptr %59, align 8, !tbaa !54
  %61 = load ptr, ptr %60, align 8, !tbaa !58
  %62 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %60, i64 0, i32 1
  %63 = load i64, ptr %62, align 8, !tbaa !55
  br label %64

64:                                               ; preds = %57, %45
  %65 = phi ptr [ %61, %57 ], [ %46, %45 ]
  %66 = phi i64 [ %63, %57 ], [ %47, %45 ]
  %67 = add i64 %66, -1
  %68 = getelementptr inbounds i8, ptr %65, i64 1
  %69 = load i8, ptr %65, align 1, !tbaa !7
  switch i8 %69, label %70 [
    i8 -1, label %45
    i8 0, label %87
  ]

70:                                               ; preds = %64
  %.lcssa2 = phi i64 [ %67, %64 ]
  %.lcssa1 = phi ptr [ %68, %64 ]
  %.lcssa = phi i8 [ %69, %64 ]
  %71 = zext i8 %.lcssa to i32
  store i32 %71, ptr %10, align 8, !tbaa !241
  br label %72

72:                                               ; preds = %70, %13
  %73 = phi ptr [ %15, %13 ], [ %.lcssa1, %70 ]
  %74 = phi i64 [ %14, %13 ], [ %.lcssa2, %70 ]
  %75 = icmp slt i32 %16, %3
  br i1 %75, label %76, label %95

76:                                               ; preds = %72
  %77 = load ptr, ptr %12, align 8, !tbaa !243
  %78 = load i32, ptr %77, align 4, !tbaa !41
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %87

80:                                               ; preds = %76
  %81 = load ptr, ptr %11, align 8, !tbaa !242
  %82 = load ptr, ptr %81, align 8, !tbaa !16
  %83 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %82, i64 0, i32 5
  store i32 113, ptr %83, align 8, !tbaa !25
  %84 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %82, i64 0, i32 1
  %85 = load ptr, ptr %84, align 8, !tbaa !85
  tail call void %85(ptr noundef nonnull %81, i32 noundef -1) #32
  %86 = load ptr, ptr %12, align 8, !tbaa !243
  store i32 1, ptr %86, align 4, !tbaa !41
  br label %87

87:                                               ; preds = %80, %76, %64, %37
  %88 = phi ptr [ %41, %37 ], [ %73, %80 ], [ %73, %76 ], [ %68, %64 ]
  %89 = phi i64 [ %40, %37 ], [ %74, %80 ], [ %74, %76 ], [ %67, %64 ]
  %90 = phi i64 [ %43, %37 ], [ 0, %80 ], [ 0, %76 ], [ 255, %64 ]
  %91 = shl i64 %17, 8
  %92 = or i64 %90, %91
  %93 = add nsw i32 %16, 8
  %94 = icmp slt i32 %16, 17
  br i1 %94, label %13, label %95, !llvm.loop !244

95:                                               ; preds = %87, %72, %4
  %96 = phi i64 [ %1, %4 ], [ %17, %72 ], [ %92, %87 ]
  %97 = phi i32 [ %2, %4 ], [ %16, %72 ], [ %93, %87 ]
  %98 = phi ptr [ %5, %4 ], [ %73, %72 ], [ %88, %87 ]
  %99 = phi i64 [ %7, %4 ], [ %74, %72 ], [ %89, %87 ]
  store ptr %98, ptr %0, align 8, !tbaa !238
  store i64 %99, ptr %6, align 8, !tbaa !240
  %100 = getelementptr inbounds %struct.bitread_working_state, ptr %0, i64 0, i32 3
  store i64 %96, ptr %100, align 8, !tbaa !245
  %101 = getelementptr inbounds %struct.bitread_working_state, ptr %0, i64 0, i32 4
  store i32 %97, ptr %101, align 8, !tbaa !246
  br label %102

102:                                              ; preds = %95, %49, %22
  %103 = phi i32 [ 1, %95 ], [ 0, %49 ], [ 0, %22 ]
  ret i32 %103
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @jpeg_huff_decode(ptr nocapture noundef %0, i64 noundef %1, i32 noundef %2, ptr nocapture noundef readonly %3, i32 noundef %4) #6 {
  %6 = icmp slt i32 %2, %4
  br i1 %6, label %7, label %15

7:                                                ; preds = %5
  %8 = tail call i32 @jpeg_fill_bit_buffer(ptr noundef %0, i64 noundef %1, i32 noundef %2, i32 noundef %4) #33, !range !247
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %90, label %10

10:                                               ; preds = %7
  %11 = getelementptr inbounds %struct.bitread_working_state, ptr %0, i64 0, i32 3
  %12 = load i64, ptr %11, align 8, !tbaa !245
  %13 = getelementptr inbounds %struct.bitread_working_state, ptr %0, i64 0, i32 4
  %14 = load i32, ptr %13, align 8, !tbaa !246
  br label %15

15:                                               ; preds = %10, %5
  %16 = phi i32 [ %14, %10 ], [ %2, %5 ]
  %17 = phi i64 [ %12, %10 ], [ %1, %5 ]
  %18 = sub nsw i32 %16, %4
  %19 = zext i32 %18 to i64
  %20 = ashr i64 %17, %19
  %21 = trunc i64 %20 to i32
  %22 = shl nsw i32 -1, %4
  %23 = xor i32 %22, -1
  %24 = and i32 %21, %23
  %25 = zext i32 %24 to i64
  %26 = sext i32 %4 to i64
  %27 = getelementptr inbounds %struct.d_derived_tbl, ptr %3, i64 0, i32 1, i64 %26
  %28 = load i64, ptr %27, align 8, !tbaa !49
  %29 = icmp slt i64 %28, %25
  br i1 %29, label %30, label %60

30:                                               ; preds = %15
  %31 = getelementptr inbounds %struct.bitread_working_state, ptr %0, i64 0, i32 3
  %32 = getelementptr inbounds %struct.bitread_working_state, ptr %0, i64 0, i32 4
  br label %33

33:                                               ; preds = %46, %30
  %34 = phi i64 [ %26, %30 ], [ %54, %46 ]
  %35 = phi i64 [ %25, %30 ], [ %53, %46 ]
  %36 = phi i64 [ %17, %30 ], [ %48, %46 ]
  %37 = phi i32 [ %18, %30 ], [ %49, %46 ]
  %38 = shl i64 %35, 1
  %39 = icmp slt i32 %37, 1
  br i1 %39, label %40, label %46

40:                                               ; preds = %33
  %41 = tail call i32 @jpeg_fill_bit_buffer(ptr noundef %0, i64 noundef %36, i32 noundef %37, i32 noundef 1) #33, !range !247
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %90, label %43

43:                                               ; preds = %40
  %44 = load i64, ptr %31, align 8, !tbaa !245
  %45 = load i32, ptr %32, align 8, !tbaa !246
  br label %46

46:                                               ; preds = %43, %33
  %47 = phi i32 [ %45, %43 ], [ %37, %33 ]
  %48 = phi i64 [ %44, %43 ], [ %36, %33 ]
  %49 = add nsw i32 %47, -1
  %50 = zext i32 %49 to i64
  %51 = lshr i64 %48, %50
  %52 = and i64 %51, 1
  %53 = or i64 %52, %38
  %54 = add i64 %34, 1
  %55 = getelementptr inbounds %struct.d_derived_tbl, ptr %3, i64 0, i32 1, i64 %54
  %56 = load i64, ptr %55, align 8, !tbaa !49
  %57 = icmp sgt i64 %53, %56
  br i1 %57, label %33, label %58, !llvm.loop !248

58:                                               ; preds = %46
  %.lcssa3 = phi i64 [ %48, %46 ]
  %.lcssa2 = phi i32 [ %49, %46 ]
  %.lcssa1 = phi i64 [ %53, %46 ]
  %.lcssa = phi i64 [ %54, %46 ]
  %59 = trunc i64 %.lcssa to i32
  br label %60

60:                                               ; preds = %58, %15
  %61 = phi i32 [ %18, %15 ], [ %.lcssa2, %58 ]
  %62 = phi i64 [ %17, %15 ], [ %.lcssa3, %58 ]
  %63 = phi i32 [ %4, %15 ], [ %59, %58 ]
  %64 = phi i64 [ %25, %15 ], [ %.lcssa1, %58 ]
  %65 = phi i64 [ %26, %15 ], [ %.lcssa, %58 ]
  %66 = getelementptr inbounds %struct.bitread_working_state, ptr %0, i64 0, i32 3
  store i64 %62, ptr %66, align 8, !tbaa !245
  %67 = getelementptr inbounds %struct.bitread_working_state, ptr %0, i64 0, i32 4
  store i32 %61, ptr %67, align 8, !tbaa !246
  %68 = icmp sgt i32 %63, 16
  br i1 %68, label %69, label %76

69:                                               ; preds = %60
  %70 = getelementptr inbounds %struct.bitread_working_state, ptr %0, i64 0, i32 5
  %71 = load ptr, ptr %70, align 8, !tbaa !242
  %72 = load ptr, ptr %71, align 8, !tbaa !16
  %73 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %72, i64 0, i32 5
  store i32 114, ptr %73, align 8, !tbaa !25
  %74 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %72, i64 0, i32 1
  %75 = load ptr, ptr %74, align 8, !tbaa !85
  tail call void %75(ptr noundef nonnull %71, i32 noundef -1) #32
  br label %90

76:                                               ; preds = %60
  %77 = getelementptr inbounds %struct.d_derived_tbl, ptr %3, i64 0, i32 3
  %78 = load ptr, ptr %77, align 8, !tbaa !229
  %79 = getelementptr inbounds %struct.d_derived_tbl, ptr %3, i64 0, i32 2, i64 %65
  %80 = load i32, ptr %79, align 4, !tbaa !41
  %81 = getelementptr inbounds [17 x i64], ptr %3, i64 0, i64 %65
  %82 = load i64, ptr %81, align 8, !tbaa !49
  %83 = sub nsw i64 %64, %82
  %84 = trunc i64 %83 to i32
  %85 = add nsw i32 %80, %84
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds %struct.JHUFF_TBL.59, ptr %78, i64 0, i32 1, i64 %86
  %88 = load i8, ptr %87, align 1, !tbaa !7
  %89 = zext i8 %88 to i32
  br label %90

90:                                               ; preds = %76, %69, %40, %7
  %91 = phi i32 [ 0, %69 ], [ %89, %76 ], [ -1, %7 ], [ -1, %40 ]
  ret i32 %91
}

; Function Attrs: nounwind optsize uwtable
define internal void @jinit_huff_decoder(ptr noundef %0) #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !50
  %4 = load ptr, ptr %3, align 8, !tbaa !65
  %5 = tail call ptr %4(ptr noundef %0, i32 noundef 1, i64 noundef 120) #32
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 79
  store ptr %5, ptr %6, align 8, !tbaa !168
  store ptr @start_pass_huff_decoder, ptr %5, align 8, !tbaa !249
  %7 = getelementptr inbounds %struct.jpeg_d_main_controller, ptr %5, i64 0, i32 1
  store ptr @decode_mcu, ptr %7, align 8, !tbaa !253
  %8 = getelementptr i8, ptr %5, i64 56
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %8, i8 0, i64 32, i1 false), !tbaa !10
  %9 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %5, i64 0, i32 5, i64 0
  store <2 x ptr> zeroinitializer, ptr %9, align 8, !tbaa !10
  %10 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %5, i64 0, i32 5, i64 2
  store <2 x ptr> zeroinitializer, ptr %10, align 8, !tbaa !10
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @start_pass_huff_decoder(ptr noundef %0) #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 79
  %3 = load ptr, ptr %2, align 8, !tbaa !168
  %4 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 68
  %5 = load i32, ptr %4, align 4, !tbaa !190
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %19

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 69
  %9 = load i32, ptr %8, align 8, !tbaa !254
  %10 = icmp eq i32 %9, 63
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 70
  %13 = load i32, ptr %12, align 4, !tbaa !255
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %19

15:                                               ; preds = %11
  %16 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 71
  %17 = load i32, ptr %16, align 8, !tbaa !256
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %24, label %19

19:                                               ; preds = %15, %11, %7, %1
  %20 = load ptr, ptr %0, align 8, !tbaa !16
  %21 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %20, i64 0, i32 5
  store i32 118, ptr %21, align 8, !tbaa !25
  %22 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %20, i64 0, i32 1
  %23 = load ptr, ptr %22, align 8, !tbaa !85
  tail call void %23(ptr noundef nonnull %0, i32 noundef -1) #32
  br label %24

24:                                               ; preds = %19, %15
  %25 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 62
  %26 = load i32, ptr %25, align 8, !tbaa !155
  %27 = icmp sgt i32 %26, 0
  br i1 %27, label %28, label %77

28:                                               ; preds = %24
  %29 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %3, i64 0, i32 2
  br label %30

30:                                               ; preds = %63, %28
  %31 = phi i64 [ 0, %28 ], [ %73, %63 ]
  %32 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 63, i64 %31
  %33 = load ptr, ptr %32, align 8, !tbaa !10
  %34 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %33, i64 0, i32 5
  %35 = load i32, ptr %34, align 4, !tbaa !257
  %36 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %33, i64 0, i32 6
  %37 = load i32, ptr %36, align 8, !tbaa !258
  %38 = icmp ugt i32 %35, 3
  br i1 %38, label %44, label %39

39:                                               ; preds = %30
  %40 = zext i32 %35 to i64
  %41 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 40, i64 %40
  %42 = load ptr, ptr %41, align 8, !tbaa !10
  %43 = icmp eq ptr %42, null
  br i1 %43, label %44, label %50

44:                                               ; preds = %39, %30
  %45 = load ptr, ptr %0, align 8, !tbaa !16
  %46 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %45, i64 0, i32 5
  store i32 49, ptr %46, align 8, !tbaa !25
  %47 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %45, i64 0, i32 6
  store i32 %35, ptr %47, align 4, !tbaa !7
  %48 = load ptr, ptr %0, align 8, !tbaa !16
  %49 = load ptr, ptr %48, align 8, !tbaa !26
  tail call void %49(ptr noundef nonnull %0) #32
  br label %50

50:                                               ; preds = %44, %39
  %51 = icmp ugt i32 %37, 3
  br i1 %51, label %57, label %52

52:                                               ; preds = %50
  %53 = zext i32 %37 to i64
  %54 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 41, i64 %53
  %55 = load ptr, ptr %54, align 8, !tbaa !10
  %56 = icmp eq ptr %55, null
  br i1 %56, label %57, label %63

57:                                               ; preds = %52, %50
  %58 = load ptr, ptr %0, align 8, !tbaa !16
  %59 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %58, i64 0, i32 5
  store i32 49, ptr %59, align 8, !tbaa !25
  %60 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %58, i64 0, i32 6
  store i32 %37, ptr %60, align 4, !tbaa !7
  %61 = load ptr, ptr %0, align 8, !tbaa !16
  %62 = load ptr, ptr %61, align 8, !tbaa !26
  tail call void %62(ptr noundef nonnull %0) #32
  br label %63

63:                                               ; preds = %57, %52
  %64 = sext i32 %35 to i64
  %65 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 40, i64 %64
  %66 = load ptr, ptr %65, align 8, !tbaa !10
  %67 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %3, i64 0, i32 4, i64 %64
  tail call void @jpeg_make_d_derived_tbl(ptr noundef nonnull %0, ptr noundef %66, ptr noundef nonnull %67) #33
  %68 = sext i32 %37 to i64
  %69 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 41, i64 %68
  %70 = load ptr, ptr %69, align 8, !tbaa !10
  %71 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %3, i64 0, i32 5, i64 %68
  tail call void @jpeg_make_d_derived_tbl(ptr noundef nonnull %0, ptr noundef %70, ptr noundef nonnull %71) #33
  %72 = getelementptr inbounds [4 x i32], ptr %29, i64 0, i64 %31
  store i32 0, ptr %72, align 4, !tbaa !41
  %73 = add nuw nsw i64 %31, 1
  %74 = load i32, ptr %25, align 8, !tbaa !155
  %75 = sext i32 %74 to i64
  %76 = icmp slt i64 %73, %75
  br i1 %76, label %30, label %77, !llvm.loop !259

77:                                               ; preds = %63, %24
  %78 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %3, i64 0, i32 1
  %79 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 49
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %78, i8 0, i64 16, i1 false)
  %80 = load i32, ptr %79, align 8, !tbaa !260
  %81 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %3, i64 0, i32 3
  store i32 %80, ptr %81, align 8, !tbaa !261
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @decode_mcu(ptr noundef %0, ptr nocapture noundef readonly %1) #6 {
  %3 = alloca %struct.bitread_working_state, align 8
  %4 = alloca %struct.savable_state.138, align 4
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 79
  %6 = load ptr, ptr %5, align 8, !tbaa !168
  call void @llvm.lifetime.start.p0(i64 56, ptr nonnull %3) #31
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %4) #31
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 49
  %8 = load i32, ptr %7, align 8, !tbaa !260
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %43, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %6, i64 0, i32 3
  %12 = load i32, ptr %11, align 8, !tbaa !261
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %43

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %6, i64 0, i32 1, i32 1
  %16 = load i32, ptr %15, align 8, !tbaa !262
  %17 = sdiv i32 %16, 8
  %18 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 78
  %19 = load ptr, ptr %18, align 8, !tbaa !73
  %20 = getelementptr inbounds %struct.jpeg_marker_reader, ptr %19, i64 0, i32 8
  %21 = load i32, ptr %20, align 4, !tbaa !263
  %22 = add i32 %21, %17
  store i32 %22, ptr %20, align 4, !tbaa !263
  store i32 0, ptr %15, align 8, !tbaa !262
  %23 = getelementptr inbounds %struct.jpeg_marker_reader, ptr %19, i64 0, i32 2
  %24 = load ptr, ptr %23, align 8, !tbaa !264
  %25 = tail call i32 %24(ptr noundef nonnull %0) #32
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %341, label %27

27:                                               ; preds = %14
  %28 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 62
  %29 = load i32, ptr %28, align 8, !tbaa !155
  %30 = icmp sgt i32 %29, 0
  br i1 %30, label %31, label %40

31:                                               ; preds = %27
  %32 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %6, i64 0, i32 2
  br label %33

33:                                               ; preds = %33, %31
  %34 = phi i64 [ 0, %31 ], [ %36, %33 ]
  %35 = getelementptr inbounds [4 x i32], ptr %32, i64 0, i64 %34
  store i32 0, ptr %35, align 4, !tbaa !41
  %36 = add nuw nsw i64 %34, 1
  %37 = load i32, ptr %28, align 8, !tbaa !155
  %38 = sext i32 %37 to i64
  %39 = icmp slt i64 %36, %38
  br i1 %39, label %33, label %40, !llvm.loop !265

40:                                               ; preds = %33, %27
  %41 = load i32, ptr %7, align 8, !tbaa !260
  store i32 %41, ptr %11, align 8, !tbaa !261
  %42 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %6, i64 0, i32 1, i32 2
  store i32 0, ptr %42, align 4, !tbaa !266
  br label %43

43:                                               ; preds = %40, %10, %2
  %44 = getelementptr inbounds %struct.bitread_working_state, ptr %3, i64 0, i32 5
  store ptr %0, ptr %44, align 8, !tbaa !242
  %45 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 5
  %46 = load ptr, ptr %45, align 8, !tbaa !54
  %47 = load ptr, ptr %46, align 8, !tbaa !58
  store ptr %47, ptr %3, align 8, !tbaa !238
  %48 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %46, i64 0, i32 1
  %49 = load i64, ptr %48, align 8, !tbaa !55
  %50 = getelementptr inbounds %struct.bitread_working_state, ptr %3, i64 0, i32 1
  store i64 %49, ptr %50, align 8, !tbaa !240
  %51 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 72
  %52 = load i32, ptr %51, align 4, !tbaa !267
  %53 = getelementptr inbounds %struct.bitread_working_state, ptr %3, i64 0, i32 2
  store i32 %52, ptr %53, align 8, !tbaa !241
  %54 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %6, i64 0, i32 1
  %55 = load i64, ptr %54, align 8, !tbaa !268
  %56 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %6, i64 0, i32 1, i32 1
  %57 = load i32, ptr %56, align 8, !tbaa !262
  %58 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %6, i64 0, i32 1, i32 2
  %59 = getelementptr inbounds %struct.bitread_working_state, ptr %3, i64 0, i32 6
  store ptr %58, ptr %59, align 8, !tbaa !243
  %60 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %6, i64 0, i32 2
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %4, ptr noundef nonnull align 8 dereferenceable(16) %60, i64 16, i1 false), !tbaa.struct !269
  %61 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 66
  %62 = load i32, ptr %61, align 8, !tbaa !181
  %63 = icmp sgt i32 %62, 0
  br i1 %63, label %64, label %330

64:                                               ; preds = %43
  %65 = getelementptr inbounds %struct.bitread_working_state, ptr %3, i64 0, i32 3
  %66 = getelementptr inbounds %struct.bitread_working_state, ptr %3, i64 0, i32 4
  br label %67

67:                                               ; preds = %318, %64
  %68 = phi i64 [ 0, %64 ], [ %321, %318 ]
  %69 = phi i64 [ %55, %64 ], [ %320, %318 ]
  %70 = phi i32 [ %57, %64 ], [ %319, %318 ]
  %71 = getelementptr inbounds ptr, ptr %1, i64 %68
  %72 = load ptr, ptr %71, align 8, !tbaa !10
  %73 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 67, i64 %68
  %74 = load i32, ptr %73, align 4, !tbaa !41
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 63, i64 %75
  %77 = load ptr, ptr %76, align 8, !tbaa !10
  %78 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %77, i64 0, i32 5
  %79 = load i32, ptr %78, align 4, !tbaa !257
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %6, i64 0, i32 4, i64 %80
  %82 = load ptr, ptr %81, align 8, !tbaa !10
  %83 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %77, i64 0, i32 6
  %84 = load i32, ptr %83, align 8, !tbaa !258
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %6, i64 0, i32 5, i64 %85
  %87 = load ptr, ptr %86, align 8, !tbaa !10
  %88 = icmp slt i32 %70, 8
  br i1 %88, label %89, label %96

89:                                               ; preds = %67
  %90 = call i32 @jpeg_fill_bit_buffer(ptr noundef nonnull %3, i64 noundef %69, i32 noundef %70, i32 noundef 0) #33, !range !247
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %341, label %92

92:                                               ; preds = %89
  %93 = load i64, ptr %65, align 8, !tbaa !245
  %94 = load i32, ptr %66, align 8, !tbaa !246
  %95 = icmp slt i32 %94, 8
  br i1 %95, label %111, label %96

96:                                               ; preds = %92, %67
  %97 = phi i32 [ %94, %92 ], [ %70, %67 ]
  %98 = phi i64 [ %93, %92 ], [ %69, %67 ]
  %99 = add nsw i32 %97, -8
  %100 = zext i32 %99 to i64
  %101 = ashr i64 %98, %100
  %102 = and i64 %101, 255
  %103 = getelementptr inbounds %struct.d_derived_tbl, ptr %82, i64 0, i32 4, i64 %102
  %104 = load i32, ptr %103, align 4, !tbaa !41
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %111, label %106

106:                                              ; preds = %96
  %107 = sub nsw i32 %97, %104
  %108 = getelementptr inbounds %struct.d_derived_tbl, ptr %82, i64 0, i32 5, i64 %102
  %109 = load i8, ptr %108, align 1, !tbaa !7
  %110 = zext i8 %109 to i32
  br label %120

111:                                              ; preds = %96, %92
  %112 = phi i32 [ %94, %92 ], [ %97, %96 ]
  %113 = phi i64 [ %93, %92 ], [ %98, %96 ]
  %114 = phi i32 [ 1, %92 ], [ 9, %96 ]
  %115 = call i32 @jpeg_huff_decode(ptr noundef nonnull %3, i64 noundef %113, i32 noundef %112, ptr noundef %82, i32 noundef %114) #33, !range !270
  %116 = icmp slt i32 %115, 0
  br i1 %116, label %341, label %117

117:                                              ; preds = %111
  %118 = load i64, ptr %65, align 8, !tbaa !245
  %119 = load i32, ptr %66, align 8, !tbaa !246
  br label %120

120:                                              ; preds = %117, %106
  %121 = phi i32 [ %107, %106 ], [ %119, %117 ]
  %122 = phi i64 [ %98, %106 ], [ %118, %117 ]
  %123 = phi i32 [ %110, %106 ], [ %115, %117 ]
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %151, label %125

125:                                              ; preds = %120
  %126 = icmp slt i32 %121, %123
  br i1 %126, label %127, label %133

127:                                              ; preds = %125
  %128 = call i32 @jpeg_fill_bit_buffer(ptr noundef nonnull %3, i64 noundef %122, i32 noundef %121, i32 noundef %123) #33, !range !247
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %341, label %130

130:                                              ; preds = %127
  %131 = load i64, ptr %65, align 8, !tbaa !245
  %132 = load i32, ptr %66, align 8, !tbaa !246
  br label %133

133:                                              ; preds = %130, %125
  %134 = phi i32 [ %132, %130 ], [ %121, %125 ]
  %135 = phi i64 [ %131, %130 ], [ %122, %125 ]
  %136 = sub nsw i32 %134, %123
  %137 = zext i32 %136 to i64
  %138 = ashr i64 %135, %137
  %139 = trunc i64 %138 to i32
  %140 = shl nsw i32 -1, %123
  %141 = xor i32 %140, -1
  %142 = and i32 %139, %141
  %143 = zext i32 %123 to i64
  %144 = getelementptr inbounds [16 x i32], ptr @extend_test, i64 0, i64 %143
  %145 = load i32, ptr %144, align 4, !tbaa !41
  %146 = icmp slt i32 %142, %145
  br i1 %146, label %147, label %151

147:                                              ; preds = %133
  %148 = getelementptr inbounds [16 x i32], ptr @extend_offset, i64 0, i64 %143
  %149 = load i32, ptr %148, align 4, !tbaa !41
  %150 = add nsw i32 %149, %142
  br label %151

151:                                              ; preds = %147, %133, %120
  %152 = phi i32 [ %121, %120 ], [ %136, %133 ], [ %136, %147 ]
  %153 = phi i64 [ %122, %120 ], [ %135, %133 ], [ %135, %147 ]
  %154 = phi i32 [ 0, %120 ], [ %142, %133 ], [ %150, %147 ]
  %155 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %77, i64 0, i32 12
  %156 = load i32, ptr %155, align 8, !tbaa !175
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %158, label %159

158:                                              ; preds = %159, %151
  br label %255

159:                                              ; preds = %151
  %160 = getelementptr inbounds [4 x i32], ptr %4, i64 0, i64 %75
  %161 = load i32, ptr %160, align 4, !tbaa !41
  %162 = add nsw i32 %161, %154
  store i32 %162, ptr %160, align 4, !tbaa !41
  %163 = trunc i32 %162 to i16
  store i16 %163, ptr %72, align 2, !tbaa !12
  %164 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %77, i64 0, i32 9
  %165 = load i32, ptr %164, align 4, !tbaa !177
  %166 = icmp sgt i32 %165, 1
  br i1 %166, label %167, label %158

167:                                              ; preds = %249, %159
  %168 = phi i32 [ %253, %249 ], [ 1, %159 ]
  %169 = phi i64 [ %251, %249 ], [ %153, %159 ]
  %170 = phi i32 [ %250, %249 ], [ %152, %159 ]
  %171 = icmp slt i32 %170, 8
  br i1 %171, label %172, label %179

172:                                              ; preds = %167
  %173 = call i32 @jpeg_fill_bit_buffer(ptr noundef nonnull %3, i64 noundef %169, i32 noundef %170, i32 noundef 0) #33, !range !247
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %341, label %175

175:                                              ; preds = %172
  %176 = load i64, ptr %65, align 8, !tbaa !245
  %177 = load i32, ptr %66, align 8, !tbaa !246
  %178 = icmp slt i32 %177, 8
  br i1 %178, label %194, label %179

179:                                              ; preds = %175, %167
  %180 = phi i32 [ %177, %175 ], [ %170, %167 ]
  %181 = phi i64 [ %176, %175 ], [ %169, %167 ]
  %182 = add nsw i32 %180, -8
  %183 = zext i32 %182 to i64
  %184 = ashr i64 %181, %183
  %185 = and i64 %184, 255
  %186 = getelementptr inbounds %struct.d_derived_tbl, ptr %87, i64 0, i32 4, i64 %185
  %187 = load i32, ptr %186, align 4, !tbaa !41
  %188 = icmp eq i32 %187, 0
  br i1 %188, label %194, label %189

189:                                              ; preds = %179
  %190 = sub nsw i32 %180, %187
  %191 = getelementptr inbounds %struct.d_derived_tbl, ptr %87, i64 0, i32 5, i64 %185
  %192 = load i8, ptr %191, align 1, !tbaa !7
  %193 = zext i8 %192 to i32
  br label %203

194:                                              ; preds = %179, %175
  %195 = phi i32 [ %177, %175 ], [ %180, %179 ]
  %196 = phi i64 [ %176, %175 ], [ %181, %179 ]
  %197 = phi i32 [ 1, %175 ], [ 9, %179 ]
  %198 = call i32 @jpeg_huff_decode(ptr noundef nonnull %3, i64 noundef %196, i32 noundef %195, ptr noundef %87, i32 noundef %197) #33, !range !270
  %199 = icmp slt i32 %198, 0
  br i1 %199, label %341, label %200

200:                                              ; preds = %194
  %201 = load i64, ptr %65, align 8, !tbaa !245
  %202 = load i32, ptr %66, align 8, !tbaa !246
  br label %203

203:                                              ; preds = %200, %189
  %204 = phi i32 [ %190, %189 ], [ %202, %200 ]
  %205 = phi i64 [ %181, %189 ], [ %201, %200 ]
  %206 = phi i32 [ %193, %189 ], [ %198, %200 ]
  %207 = lshr i32 %206, 4
  %208 = and i32 %206, 15
  %209 = icmp eq i32 %208, 0
  br i1 %209, label %245, label %210

210:                                              ; preds = %203
  %211 = add nsw i32 %207, %168
  %212 = icmp slt i32 %204, %208
  br i1 %212, label %213, label %219

213:                                              ; preds = %210
  %214 = call i32 @jpeg_fill_bit_buffer(ptr noundef nonnull %3, i64 noundef %205, i32 noundef %204, i32 noundef %208) #33, !range !247
  %215 = icmp eq i32 %214, 0
  br i1 %215, label %341, label %216

216:                                              ; preds = %213
  %217 = load i64, ptr %65, align 8, !tbaa !245
  %218 = load i32, ptr %66, align 8, !tbaa !246
  br label %219

219:                                              ; preds = %216, %210
  %220 = phi i32 [ %218, %216 ], [ %204, %210 ]
  %221 = phi i64 [ %217, %216 ], [ %205, %210 ]
  %222 = sub nsw i32 %220, %208
  %223 = zext i32 %222 to i64
  %224 = ashr i64 %221, %223
  %225 = trunc i64 %224 to i32
  %226 = shl nsw i32 -1, %208
  %227 = xor i32 %226, -1
  %228 = and i32 %225, %227
  %229 = zext i32 %208 to i64
  %230 = getelementptr inbounds [16 x i32], ptr @extend_test, i64 0, i64 %229
  %231 = load i32, ptr %230, align 4, !tbaa !41
  %232 = icmp slt i32 %228, %231
  br i1 %232, label %233, label %237

233:                                              ; preds = %219
  %234 = getelementptr inbounds [16 x i32], ptr @extend_offset, i64 0, i64 %229
  %235 = load i32, ptr %234, align 4, !tbaa !41
  %236 = add nsw i32 %235, %228
  br label %237

237:                                              ; preds = %233, %219
  %238 = phi i32 [ %236, %233 ], [ %228, %219 ]
  %239 = trunc i32 %238 to i16
  %240 = sext i32 %211 to i64
  %241 = getelementptr inbounds [0 x i32], ptr @jpeg_natural_order, i64 0, i64 %240
  %242 = load i32, ptr %241, align 4, !tbaa !41
  %243 = sext i32 %242 to i64
  %244 = getelementptr inbounds [64 x i16], ptr %72, i64 0, i64 %243
  store i16 %239, ptr %244, align 2, !tbaa !12
  br label %249

245:                                              ; preds = %203
  %246 = icmp eq i32 %207, 15
  br i1 %246, label %247, label %318

247:                                              ; preds = %245
  %248 = add nsw i32 %168, 15
  br label %249

249:                                              ; preds = %247, %237
  %250 = phi i32 [ %222, %237 ], [ %204, %247 ]
  %251 = phi i64 [ %221, %237 ], [ %205, %247 ]
  %252 = phi i32 [ %211, %237 ], [ %248, %247 ]
  %253 = add nsw i32 %252, 1
  %254 = icmp slt i32 %252, 63
  br i1 %254, label %167, label %318, !llvm.loop !271

255:                                              ; preds = %312, %158
  %256 = phi i32 [ %316, %312 ], [ 1, %158 ]
  %257 = phi i64 [ %314, %312 ], [ %153, %158 ]
  %258 = phi i32 [ %313, %312 ], [ %152, %158 ]
  %259 = icmp slt i32 %258, 8
  br i1 %259, label %260, label %267

260:                                              ; preds = %255
  %261 = call i32 @jpeg_fill_bit_buffer(ptr noundef nonnull %3, i64 noundef %257, i32 noundef %258, i32 noundef 0) #33, !range !247
  %262 = icmp eq i32 %261, 0
  br i1 %262, label %341, label %263

263:                                              ; preds = %260
  %264 = load i64, ptr %65, align 8, !tbaa !245
  %265 = load i32, ptr %66, align 8, !tbaa !246
  %266 = icmp slt i32 %265, 8
  br i1 %266, label %282, label %267

267:                                              ; preds = %263, %255
  %268 = phi i32 [ %265, %263 ], [ %258, %255 ]
  %269 = phi i64 [ %264, %263 ], [ %257, %255 ]
  %270 = add nsw i32 %268, -8
  %271 = zext i32 %270 to i64
  %272 = ashr i64 %269, %271
  %273 = and i64 %272, 255
  %274 = getelementptr inbounds %struct.d_derived_tbl, ptr %87, i64 0, i32 4, i64 %273
  %275 = load i32, ptr %274, align 4, !tbaa !41
  %276 = icmp eq i32 %275, 0
  br i1 %276, label %282, label %277

277:                                              ; preds = %267
  %278 = sub nsw i32 %268, %275
  %279 = getelementptr inbounds %struct.d_derived_tbl, ptr %87, i64 0, i32 5, i64 %273
  %280 = load i8, ptr %279, align 1, !tbaa !7
  %281 = zext i8 %280 to i32
  br label %291

282:                                              ; preds = %267, %263
  %283 = phi i32 [ %265, %263 ], [ %268, %267 ]
  %284 = phi i64 [ %264, %263 ], [ %269, %267 ]
  %285 = phi i32 [ 1, %263 ], [ 9, %267 ]
  %286 = call i32 @jpeg_huff_decode(ptr noundef nonnull %3, i64 noundef %284, i32 noundef %283, ptr noundef %87, i32 noundef %285) #33, !range !270
  %287 = icmp slt i32 %286, 0
  br i1 %287, label %341, label %288

288:                                              ; preds = %282
  %289 = load i64, ptr %65, align 8, !tbaa !245
  %290 = load i32, ptr %66, align 8, !tbaa !246
  br label %291

291:                                              ; preds = %288, %277
  %292 = phi i32 [ %278, %277 ], [ %290, %288 ]
  %293 = phi i64 [ %269, %277 ], [ %289, %288 ]
  %294 = phi i32 [ %281, %277 ], [ %286, %288 ]
  %295 = lshr i32 %294, 4
  %296 = and i32 %294, 15
  %297 = icmp eq i32 %296, 0
  br i1 %297, label %310, label %298

298:                                              ; preds = %291
  %299 = icmp slt i32 %292, %296
  br i1 %299, label %300, label %306

300:                                              ; preds = %298
  %301 = call i32 @jpeg_fill_bit_buffer(ptr noundef nonnull %3, i64 noundef %293, i32 noundef %292, i32 noundef %296) #33, !range !247
  %302 = icmp eq i32 %301, 0
  br i1 %302, label %341, label %303

303:                                              ; preds = %300
  %304 = load i64, ptr %65, align 8, !tbaa !245
  %305 = load i32, ptr %66, align 8, !tbaa !246
  br label %306

306:                                              ; preds = %303, %298
  %307 = phi i32 [ %305, %303 ], [ %292, %298 ]
  %308 = phi i64 [ %304, %303 ], [ %293, %298 ]
  %309 = sub nsw i32 %307, %296
  br label %312

310:                                              ; preds = %291
  %311 = icmp eq i32 %295, 15
  br i1 %311, label %312, label %318

312:                                              ; preds = %310, %306
  %313 = phi i32 [ %309, %306 ], [ %292, %310 ]
  %314 = phi i64 [ %308, %306 ], [ %293, %310 ]
  %315 = add nsw i32 %256, 1
  %316 = add nsw i32 %315, %295
  %317 = icmp slt i32 %316, 64
  br i1 %317, label %255, label %318, !llvm.loop !272

318:                                              ; preds = %312, %310, %249, %245
  %319 = phi i32 [ %313, %312 ], [ %292, %310 ], [ %250, %249 ], [ %204, %245 ]
  %320 = phi i64 [ %314, %312 ], [ %293, %310 ], [ %251, %249 ], [ %205, %245 ]
  %321 = add nuw nsw i64 %68, 1
  %322 = load i32, ptr %61, align 8, !tbaa !181
  %323 = sext i32 %322 to i64
  %324 = icmp slt i64 %321, %323
  br i1 %324, label %67, label %325, !llvm.loop !273

325:                                              ; preds = %318
  %.lcssa1 = phi i32 [ %319, %318 ]
  %.lcssa = phi i64 [ %320, %318 ]
  %326 = load ptr, ptr %3, align 8, !tbaa !238
  %327 = load ptr, ptr %45, align 8, !tbaa !54
  %328 = load i64, ptr %50, align 8, !tbaa !240
  %329 = load i32, ptr %53, align 8, !tbaa !241
  br label %330

330:                                              ; preds = %325, %43
  %331 = phi i32 [ %52, %43 ], [ %329, %325 ]
  %332 = phi i64 [ %49, %43 ], [ %328, %325 ]
  %333 = phi ptr [ %46, %43 ], [ %327, %325 ]
  %334 = phi ptr [ %47, %43 ], [ %326, %325 ]
  %335 = phi i32 [ %57, %43 ], [ %.lcssa1, %325 ]
  %336 = phi i64 [ %55, %43 ], [ %.lcssa, %325 ]
  store ptr %334, ptr %333, align 8, !tbaa !58
  %337 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %333, i64 0, i32 1
  store i64 %332, ptr %337, align 8, !tbaa !55
  store i32 %331, ptr %51, align 4, !tbaa !267
  store i64 %336, ptr %54, align 8, !tbaa !268
  store i32 %335, ptr %56, align 8, !tbaa !262
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %60, ptr noundef nonnull align 4 dereferenceable(16) %4, i64 16, i1 false), !tbaa.struct !269
  %338 = getelementptr inbounds %struct.huff_entropy_decoder, ptr %6, i64 0, i32 3
  %339 = load i32, ptr %338, align 8, !tbaa !261
  %340 = add i32 %339, -1
  store i32 %340, ptr %338, align 8, !tbaa !261
  br label %341

341:                                              ; preds = %330, %300, %282, %260, %213, %194, %172, %127, %111, %89, %14
  %342 = phi i32 [ 1, %330 ], [ 0, %14 ], [ 0, %300 ], [ 0, %282 ], [ 0, %260 ], [ 0, %213 ], [ 0, %194 ], [ 0, %172 ], [ 0, %127 ], [ 0, %111 ], [ 0, %89 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %4) #31
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %3) #31
  ret i32 %342
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #16

; Function Attrs: nounwind optsize uwtable
define internal void @jinit_input_controller(ptr noundef %0) #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !50
  %4 = load ptr, ptr %3, align 8, !tbaa !65
  %5 = tail call ptr %4(ptr noundef %0, i32 noundef 0, i64 noundef 48) #32
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 77
  store ptr %5, ptr %6, align 8, !tbaa !76
  store ptr @consume_markers, ptr %5, align 8, !tbaa !274
  %7 = getelementptr inbounds %struct.jpeg_input_controller, ptr %5, i64 0, i32 1
  store ptr @reset_input_controller, ptr %7, align 8, !tbaa !276
  %8 = getelementptr inbounds %struct.jpeg_input_controller, ptr %5, i64 0, i32 2
  store ptr @start_input_pass.19, ptr %8, align 8, !tbaa !277
  %9 = getelementptr inbounds %struct.jpeg_input_controller, ptr %5, i64 0, i32 3
  store ptr @finish_input_pass, ptr %9, align 8, !tbaa !278
  %10 = getelementptr inbounds %struct.jpeg_input_controller, ptr %5, i64 0, i32 4
  store i32 0, ptr %10, align 8, !tbaa !279
  %11 = getelementptr inbounds %struct.jpeg_input_controller, ptr %5, i64 0, i32 5
  store i32 0, ptr %11, align 4, !tbaa !280
  %12 = getelementptr inbounds %struct.my_input_controller, ptr %5, i64 0, i32 1
  store i32 1, ptr %12, align 8, !tbaa !281
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @consume_markers(ptr noundef %0) #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 77
  %3 = load ptr, ptr %2, align 8, !tbaa !76
  %4 = getelementptr inbounds %struct.jpeg_input_controller, ptr %3, i64 0, i32 5
  %5 = load i32, ptr %4, align 4, !tbaa !280
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %213

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 78
  %9 = load ptr, ptr %8, align 8, !tbaa !73
  %10 = getelementptr inbounds %struct.jpeg_marker_reader, ptr %9, i64 0, i32 1
  %11 = load ptr, ptr %10, align 8, !tbaa !282
  %12 = tail call i32 %11(ptr noundef nonnull %0) #32
  switch i32 %12, label %213 [
    i32 1, label %13
    i32 2, label %193
  ]

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.my_input_controller, ptr %3, i64 0, i32 1
  %15 = load i32, ptr %14, align 8, !tbaa !281
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %184, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 7
  %19 = load i32, ptr %18, align 4, !tbaa !283
  %20 = icmp ugt i32 %19, 65500
  br i1 %20, label %25, label %21

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 6
  %23 = load i32, ptr %22, align 8, !tbaa !284
  %24 = icmp ugt i32 %23, 65500
  br i1 %24, label %25, label %31

25:                                               ; preds = %21, %17
  %26 = load ptr, ptr %0, align 8, !tbaa !16
  %27 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %26, i64 0, i32 5
  store i32 40, ptr %27, align 8, !tbaa !25
  %28 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %26, i64 0, i32 6
  store i32 65500, ptr %28, align 4, !tbaa !7
  %29 = load ptr, ptr %0, align 8, !tbaa !16
  %30 = load ptr, ptr %29, align 8, !tbaa !26
  tail call void %30(ptr noundef nonnull %0) #32
  br label %31

31:                                               ; preds = %25, %21
  %32 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 42
  %33 = load i32, ptr %32, align 8, !tbaa !285
  %34 = icmp eq i32 %33, 8
  br i1 %34, label %41, label %35

35:                                               ; preds = %31
  %36 = load ptr, ptr %0, align 8, !tbaa !16
  %37 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %36, i64 0, i32 5
  store i32 13, ptr %37, align 8, !tbaa !25
  %38 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %36, i64 0, i32 6
  store i32 %33, ptr %38, align 4, !tbaa !7
  %39 = load ptr, ptr %0, align 8, !tbaa !16
  %40 = load ptr, ptr %39, align 8, !tbaa !26
  tail call void %40(ptr noundef nonnull %0) #32
  br label %41

41:                                               ; preds = %35, %31
  %42 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 8
  %43 = load i32, ptr %42, align 8, !tbaa !81
  %44 = icmp sgt i32 %43, 10
  br i1 %44, label %45, label %54

45:                                               ; preds = %41
  %46 = load ptr, ptr %0, align 8, !tbaa !16
  %47 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %46, i64 0, i32 5
  store i32 24, ptr %47, align 8, !tbaa !25
  %48 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %46, i64 0, i32 6
  store i32 %43, ptr %48, align 4, !tbaa !7
  %49 = load ptr, ptr %0, align 8, !tbaa !16
  %50 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %49, i64 0, i32 6, i32 0, i64 1
  store i32 10, ptr %50, align 4, !tbaa !7
  %51 = load ptr, ptr %0, align 8, !tbaa !16
  %52 = load ptr, ptr %51, align 8, !tbaa !26
  tail call void %52(ptr noundef nonnull %0) #32
  %53 = load i32, ptr %42, align 8, !tbaa !81
  br label %54

54:                                               ; preds = %45, %41
  %55 = phi i32 [ %53, %45 ], [ %43, %41 ]
  %56 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 57
  store i32 1, ptr %56, align 4, !tbaa !286
  %57 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 58
  store i32 1, ptr %57, align 8, !tbaa !287
  %58 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 43
  %59 = icmp sgt i32 %55, 0
  br i1 %59, label %62, label %60

60:                                               ; preds = %54
  %61 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 59
  store i32 8, ptr %61, align 4, !tbaa !288
  br label %162

62:                                               ; preds = %54
  %63 = load ptr, ptr %58, align 8, !tbaa !86
  br label %64

64:                                               ; preds = %89, %62
  %65 = phi i32 [ %90, %89 ], [ %55, %62 ]
  %66 = phi i32 [ %96, %89 ], [ 1, %62 ]
  %67 = phi i32 [ %95, %89 ], [ 1, %62 ]
  %68 = phi ptr [ %98, %89 ], [ %63, %62 ]
  %69 = phi i32 [ %97, %89 ], [ 0, %62 ]
  %70 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %68, i64 0, i32 2
  %71 = load i32, ptr %70, align 8, !tbaa !138
  %72 = add i32 %71, -5
  %73 = icmp ult i32 %72, -4
  br i1 %73, label %79, label %74

74:                                               ; preds = %64
  %75 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %68, i64 0, i32 3
  %76 = load i32, ptr %75, align 4, !tbaa !134
  %77 = add i32 %76, -5
  %78 = icmp ult i32 %77, -4
  br i1 %78, label %79, label %89

79:                                               ; preds = %74, %64
  %80 = load ptr, ptr %0, align 8, !tbaa !16
  %81 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %80, i64 0, i32 5
  store i32 16, ptr %81, align 8, !tbaa !25
  %82 = load ptr, ptr %80, align 8, !tbaa !26
  tail call void %82(ptr noundef nonnull %0) #32
  %83 = load i32, ptr %56, align 4, !tbaa !286
  %84 = load i32, ptr %70, align 8, !tbaa !138
  %85 = load i32, ptr %57, align 8, !tbaa !287
  %86 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %68, i64 0, i32 3
  %87 = load i32, ptr %86, align 4, !tbaa !134
  %88 = load i32, ptr %42, align 8, !tbaa !81
  br label %89

89:                                               ; preds = %79, %74
  %90 = phi i32 [ %65, %74 ], [ %88, %79 ]
  %91 = phi i32 [ %76, %74 ], [ %87, %79 ]
  %92 = phi i32 [ %66, %74 ], [ %85, %79 ]
  %93 = phi i32 [ %71, %74 ], [ %84, %79 ]
  %94 = phi i32 [ %67, %74 ], [ %83, %79 ]
  %95 = tail call i32 @llvm.smax.i32(i32 %94, i32 %93)
  store i32 %95, ptr %56, align 4, !tbaa !286
  %96 = tail call i32 @llvm.smax.i32(i32 %92, i32 %91)
  store i32 %96, ptr %57, align 8, !tbaa !287
  %97 = add nuw nsw i32 %69, 1
  %98 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %68, i64 1
  %99 = icmp slt i32 %97, %90
  br i1 %99, label %64, label %100, !llvm.loop !289

100:                                              ; preds = %89
  %.lcssa1 = phi i32 [ %90, %89 ]
  %.lcssa = phi i32 [ %96, %89 ]
  %101 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 59
  store i32 8, ptr %101, align 4, !tbaa !288
  %102 = icmp sgt i32 %.lcssa1, 0
  br i1 %102, label %103, label %162

103:                                              ; preds = %100
  %104 = load ptr, ptr %58, align 8, !tbaa !86
  %105 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 6
  br label %106

106:                                              ; preds = %106, %103
  %107 = phi ptr [ %104, %103 ], [ %157, %106 ]
  %108 = phi i32 [ 0, %103 ], [ %156, %106 ]
  %109 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %107, i64 0, i32 9
  store i32 8, ptr %109, align 4, !tbaa !177
  %110 = load i32, ptr %105, align 8, !tbaa !284
  %111 = zext i32 %110 to i64
  %112 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %107, i64 0, i32 2
  %113 = load i32, ptr %112, align 8, !tbaa !138
  %114 = sext i32 %113 to i64
  %115 = mul nsw i64 %114, %111
  %116 = load i32, ptr %56, align 4, !tbaa !286
  %117 = shl nsw i32 %116, 3
  %118 = sext i32 %117 to i64
  %119 = tail call i64 @jdiv_round_up(i64 noundef %115, i64 noundef %118) #32
  %120 = trunc i64 %119 to i32
  %121 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %107, i64 0, i32 7
  store i32 %120, ptr %121, align 4, !tbaa !137
  %122 = load i32, ptr %18, align 4, !tbaa !283
  %123 = zext i32 %122 to i64
  %124 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %107, i64 0, i32 3
  %125 = load i32, ptr %124, align 4, !tbaa !134
  %126 = sext i32 %125 to i64
  %127 = mul nsw i64 %126, %123
  %128 = load i32, ptr %57, align 8, !tbaa !287
  %129 = shl nsw i32 %128, 3
  %130 = sext i32 %129 to i64
  %131 = tail call i64 @jdiv_round_up(i64 noundef %127, i64 noundef %130) #32
  %132 = trunc i64 %131 to i32
  %133 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %107, i64 0, i32 8
  store i32 %132, ptr %133, align 8, !tbaa !139
  %134 = load i32, ptr %105, align 8, !tbaa !284
  %135 = zext i32 %134 to i64
  %136 = load i32, ptr %112, align 8, !tbaa !138
  %137 = sext i32 %136 to i64
  %138 = mul nsw i64 %137, %135
  %139 = load i32, ptr %56, align 4, !tbaa !286
  %140 = sext i32 %139 to i64
  %141 = tail call i64 @jdiv_round_up(i64 noundef %138, i64 noundef %140) #32
  %142 = trunc i64 %141 to i32
  %143 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %107, i64 0, i32 10
  store i32 %142, ptr %143, align 8, !tbaa !290
  %144 = load i32, ptr %18, align 4, !tbaa !283
  %145 = zext i32 %144 to i64
  %146 = load i32, ptr %124, align 4, !tbaa !134
  %147 = sext i32 %146 to i64
  %148 = mul nsw i64 %147, %145
  %149 = load i32, ptr %57, align 8, !tbaa !287
  %150 = sext i32 %149 to i64
  %151 = tail call i64 @jdiv_round_up(i64 noundef %148, i64 noundef %150) #32
  %152 = trunc i64 %151 to i32
  %153 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %107, i64 0, i32 11
  store i32 %152, ptr %153, align 4, !tbaa !291
  %154 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %107, i64 0, i32 12
  store i32 1, ptr %154, align 8, !tbaa !175
  %155 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %107, i64 0, i32 19
  store ptr null, ptr %155, align 8, !tbaa !151
  %156 = add nuw nsw i32 %108, 1
  %157 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %107, i64 1
  %158 = load i32, ptr %42, align 8, !tbaa !81
  %159 = icmp slt i32 %156, %158
  br i1 %159, label %106, label %160, !llvm.loop !292

160:                                              ; preds = %106
  %161 = load i32, ptr %57, align 8, !tbaa !287
  br label %162

162:                                              ; preds = %160, %100, %60
  %163 = phi i32 [ %161, %160 ], [ %.lcssa, %100 ], [ 1, %60 ]
  %164 = load i32, ptr %18, align 4, !tbaa !283
  %165 = zext i32 %164 to i64
  %166 = shl nsw i32 %163, 3
  %167 = sext i32 %166 to i64
  %168 = tail call i64 @jdiv_round_up(i64 noundef %165, i64 noundef %167) #32
  %169 = trunc i64 %168 to i32
  %170 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 60
  store i32 %169, ptr %170, align 8, !tbaa !106
  %171 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 62
  %172 = load i32, ptr %171, align 8, !tbaa !155
  %173 = load i32, ptr %42, align 8, !tbaa !81
  %174 = icmp slt i32 %172, %173
  br i1 %174, label %180, label %175

175:                                              ; preds = %162
  %176 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 44
  %177 = load i32, ptr %176, align 8, !tbaa !135
  %178 = icmp ne i32 %177, 0
  %179 = zext i1 %178 to i32
  br label %180

180:                                              ; preds = %175, %162
  %181 = phi i32 [ 1, %162 ], [ %179, %175 ]
  %182 = load ptr, ptr %2, align 8, !tbaa !76
  %183 = getelementptr inbounds %struct.jpeg_input_controller, ptr %182, i64 0, i32 4
  store i32 %181, ptr %183, align 8, !tbaa !101
  store i32 0, ptr %14, align 8, !tbaa !281
  br label %213

184:                                              ; preds = %13
  %185 = getelementptr inbounds %struct.jpeg_input_controller, ptr %3, i64 0, i32 4
  %186 = load i32, ptr %185, align 8, !tbaa !279
  %187 = icmp eq i32 %186, 0
  br i1 %187, label %188, label %192

188:                                              ; preds = %184
  %189 = load ptr, ptr %0, align 8, !tbaa !16
  %190 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %189, i64 0, i32 5
  store i32 34, ptr %190, align 8, !tbaa !25
  %191 = load ptr, ptr %189, align 8, !tbaa !26
  tail call void %191(ptr noundef nonnull %0) #32
  br label %192

192:                                              ; preds = %188, %184
  tail call void @start_input_pass.19(ptr noundef nonnull %0) #33
  br label %213

193:                                              ; preds = %7
  store i32 1, ptr %4, align 4, !tbaa !280
  %194 = getelementptr inbounds %struct.my_input_controller, ptr %3, i64 0, i32 1
  %195 = load i32, ptr %194, align 8, !tbaa !281
  %196 = icmp eq i32 %195, 0
  br i1 %196, label %206, label %197

197:                                              ; preds = %193
  %198 = load ptr, ptr %8, align 8, !tbaa !73
  %199 = getelementptr inbounds %struct.jpeg_marker_reader, ptr %198, i64 0, i32 6
  %200 = load i32, ptr %199, align 4, !tbaa !293
  %201 = icmp eq i32 %200, 0
  br i1 %201, label %213, label %202

202:                                              ; preds = %197
  %203 = load ptr, ptr %0, align 8, !tbaa !16
  %204 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %203, i64 0, i32 5
  store i32 58, ptr %204, align 8, !tbaa !25
  %205 = load ptr, ptr %203, align 8, !tbaa !26
  tail call void %205(ptr noundef nonnull %0) #32
  br label %213

206:                                              ; preds = %193
  %207 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 36
  %208 = load i32, ptr %207, align 4, !tbaa !108
  %209 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 34
  %210 = load i32, ptr %209, align 4, !tbaa !107
  %211 = icmp sgt i32 %208, %210
  br i1 %211, label %212, label %213

212:                                              ; preds = %206
  store i32 %210, ptr %207, align 4, !tbaa !108
  br label %213

213:                                              ; preds = %212, %206, %202, %197, %192, %180, %7, %1
  %214 = phi i32 [ 2, %1 ], [ 2, %202 ], [ 2, %197 ], [ 2, %212 ], [ 2, %206 ], [ 1, %180 ], [ 1, %192 ], [ %12, %7 ]
  ret i32 %214
}

; Function Attrs: nounwind optsize uwtable
define internal void @reset_input_controller(ptr noundef %0) #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 77
  %3 = load ptr, ptr %2, align 8, !tbaa !76
  store ptr @consume_markers, ptr %3, align 8, !tbaa !274
  %4 = getelementptr inbounds %struct.jpeg_input_controller, ptr %3, i64 0, i32 4
  store i32 0, ptr %4, align 8, !tbaa !279
  %5 = getelementptr inbounds %struct.jpeg_input_controller, ptr %3, i64 0, i32 5
  store i32 0, ptr %5, align 4, !tbaa !280
  %6 = getelementptr inbounds %struct.my_input_controller, ptr %3, i64 0, i32 1
  store i32 1, ptr %6, align 8, !tbaa !281
  %7 = load ptr, ptr %0, align 8, !tbaa !16
  %8 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %7, i64 0, i32 4
  %9 = load ptr, ptr %8, align 8, !tbaa !294
  tail call void %9(ptr noundef nonnull %0) #32
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 78
  %11 = load ptr, ptr %10, align 8, !tbaa !73
  %12 = load ptr, ptr %11, align 8, !tbaa !295
  tail call void %12(ptr noundef nonnull %0) #32
  %13 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 38
  store ptr null, ptr %13, align 8, !tbaa !150
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @start_input_pass.19(ptr noundef %0) #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 62
  %3 = load i32, ptr %2, align 8, !tbaa !155
  %4 = icmp eq i32 %3, 1
  br i1 %4, label %5, label %29

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 63
  %7 = load ptr, ptr %6, align 8, !tbaa !10
  %8 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %7, i64 0, i32 7
  %9 = load i32, ptr %8, align 4, !tbaa !137
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 64
  store i32 %9, ptr %10, align 8, !tbaa !162
  %11 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %7, i64 0, i32 8
  %12 = load i32, ptr %11, align 8, !tbaa !139
  %13 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 65
  store i32 %12, ptr %13, align 4, !tbaa !296
  %14 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %7, i64 0, i32 13
  store i32 1, ptr %14, align 4, !tbaa !163
  %15 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %7, i64 0, i32 14
  store i32 1, ptr %15, align 8, !tbaa !164
  %16 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %7, i64 0, i32 15
  store i32 1, ptr %16, align 4, !tbaa !182
  %17 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %7, i64 0, i32 9
  %18 = load i32, ptr %17, align 4, !tbaa !177
  %19 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %7, i64 0, i32 16
  store i32 %18, ptr %19, align 8, !tbaa !183
  %20 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %7, i64 0, i32 17
  store i32 1, ptr %20, align 4, !tbaa !297
  %21 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %7, i64 0, i32 3
  %22 = load i32, ptr %21, align 4, !tbaa !134
  %23 = urem i32 %12, %22
  %24 = icmp eq i32 %23, 0
  %25 = select i1 %24, i32 %22, i32 %23
  %26 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %7, i64 0, i32 18
  store i32 %25, ptr %26, align 8, !tbaa !184
  %27 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 66
  store i32 1, ptr %27, align 8, !tbaa !181
  %28 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 67
  store i32 0, ptr %28, align 4, !tbaa !41
  br label %118

29:                                               ; preds = %1
  %30 = add i32 %3, -5
  %31 = icmp ult i32 %30, -4
  br i1 %31, label %32, label %40

32:                                               ; preds = %29
  %33 = load ptr, ptr %0, align 8, !tbaa !16
  %34 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %33, i64 0, i32 5
  store i32 24, ptr %34, align 8, !tbaa !25
  %35 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %33, i64 0, i32 6
  store i32 %3, ptr %35, align 4, !tbaa !7
  %36 = load ptr, ptr %0, align 8, !tbaa !16
  %37 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %36, i64 0, i32 6, i32 0, i64 1
  store i32 4, ptr %37, align 4, !tbaa !7
  %38 = load ptr, ptr %0, align 8, !tbaa !16
  %39 = load ptr, ptr %38, align 8, !tbaa !26
  tail call void %39(ptr noundef nonnull %0) #32
  br label %40

40:                                               ; preds = %32, %29
  %41 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 6
  %42 = load i32, ptr %41, align 8, !tbaa !284
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 57
  %45 = load i32, ptr %44, align 4, !tbaa !286
  %46 = shl nsw i32 %45, 3
  %47 = sext i32 %46 to i64
  %48 = tail call i64 @jdiv_round_up(i64 noundef %43, i64 noundef %47) #32
  %49 = trunc i64 %48 to i32
  %50 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 64
  store i32 %49, ptr %50, align 8, !tbaa !162
  %51 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 7
  %52 = load i32, ptr %51, align 4, !tbaa !283
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 58
  %55 = load i32, ptr %54, align 8, !tbaa !287
  %56 = shl nsw i32 %55, 3
  %57 = sext i32 %56 to i64
  %58 = tail call i64 @jdiv_round_up(i64 noundef %53, i64 noundef %57) #32
  %59 = trunc i64 %58 to i32
  %60 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 65
  store i32 %59, ptr %60, align 4, !tbaa !296
  %61 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 66
  store i32 0, ptr %61, align 8, !tbaa !181
  %62 = load i32, ptr %2, align 8, !tbaa !155
  %63 = icmp sgt i32 %62, 0
  br i1 %63, label %64, label %157

64:                                               ; preds = %111, %40
  %65 = phi i64 [ %112, %111 ], [ 0, %40 ]
  %66 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 63, i64 %65
  %67 = load ptr, ptr %66, align 8, !tbaa !10
  %68 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %67, i64 0, i32 2
  %69 = load i32, ptr %68, align 8, !tbaa !138
  %70 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %67, i64 0, i32 13
  store i32 %69, ptr %70, align 4, !tbaa !163
  %71 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %67, i64 0, i32 3
  %72 = load i32, ptr %71, align 4, !tbaa !134
  %73 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %67, i64 0, i32 14
  store i32 %72, ptr %73, align 8, !tbaa !164
  %74 = mul nsw i32 %72, %69
  %75 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %67, i64 0, i32 15
  store i32 %74, ptr %75, align 4, !tbaa !182
  %76 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %67, i64 0, i32 9
  %77 = load i32, ptr %76, align 4, !tbaa !177
  %78 = mul nsw i32 %77, %69
  %79 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %67, i64 0, i32 16
  store i32 %78, ptr %79, align 8, !tbaa !183
  %80 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %67, i64 0, i32 7
  %81 = load i32, ptr %80, align 4, !tbaa !137
  %82 = urem i32 %81, %69
  %83 = icmp eq i32 %82, 0
  %84 = select i1 %83, i32 %69, i32 %82
  %85 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %67, i64 0, i32 17
  store i32 %84, ptr %85, align 4, !tbaa !297
  %86 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %67, i64 0, i32 8
  %87 = load i32, ptr %86, align 8, !tbaa !139
  %88 = urem i32 %87, %72
  %89 = icmp eq i32 %88, 0
  %90 = select i1 %89, i32 %72, i32 %88
  %91 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %67, i64 0, i32 18
  store i32 %90, ptr %91, align 8, !tbaa !184
  %92 = load i32, ptr %61, align 8, !tbaa !181
  %93 = add nsw i32 %92, %74
  %94 = icmp sgt i32 %93, 10
  br i1 %94, label %95, label %99

95:                                               ; preds = %64
  %96 = load ptr, ptr %0, align 8, !tbaa !16
  %97 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %96, i64 0, i32 5
  store i32 11, ptr %97, align 8, !tbaa !25
  %98 = load ptr, ptr %96, align 8, !tbaa !26
  tail call void %98(ptr noundef nonnull %0) #32
  br label %99

99:                                               ; preds = %95, %64
  %100 = icmp sgt i32 %74, 0
  br i1 %100, label %101, label %111

101:                                              ; preds = %99
  %102 = trunc i64 %65 to i32
  br label %103

103:                                              ; preds = %103, %101
  %104 = phi i32 [ %105, %103 ], [ %74, %101 ]
  %105 = add nsw i32 %104, -1
  %106 = load i32, ptr %61, align 8, !tbaa !181
  %107 = add nsw i32 %106, 1
  store i32 %107, ptr %61, align 8, !tbaa !181
  %108 = sext i32 %106 to i64
  %109 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 67, i64 %108
  store i32 %102, ptr %109, align 4, !tbaa !41
  %110 = icmp ugt i32 %104, 1
  br i1 %110, label %103, label %111, !llvm.loop !298

111:                                              ; preds = %103, %99
  %112 = add nuw nsw i64 %65, 1
  %113 = load i32, ptr %2, align 8, !tbaa !155
  %114 = sext i32 %113 to i64
  %115 = icmp slt i64 %112, %114
  br i1 %115, label %64, label %116, !llvm.loop !299

116:                                              ; preds = %111
  %.lcssa = phi i32 [ %113, %111 ]
  %117 = icmp sgt i32 %.lcssa, 0
  br i1 %117, label %118, label %157

118:                                              ; preds = %116, %5
  %119 = phi i32 [ 1, %5 ], [ %.lcssa, %116 ]
  %120 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  br label %121

121:                                              ; preds = %152, %118
  %122 = phi i32 [ %119, %118 ], [ %153, %152 ]
  %123 = phi i64 [ 0, %118 ], [ %154, %152 ]
  %124 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 63, i64 %123
  %125 = load ptr, ptr %124, align 8, !tbaa !10
  %126 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %125, i64 0, i32 19
  %127 = load ptr, ptr %126, align 8, !tbaa !151
  %128 = icmp eq ptr %127, null
  br i1 %128, label %129, label %152

129:                                              ; preds = %121
  %130 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %125, i64 0, i32 4
  %131 = load i32, ptr %130, align 8, !tbaa !300
  %132 = icmp ugt i32 %131, 3
  br i1 %132, label %138, label %133

133:                                              ; preds = %129
  %134 = zext i32 %131 to i64
  %135 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 39, i64 %134
  %136 = load ptr, ptr %135, align 8, !tbaa !10
  %137 = icmp eq ptr %136, null
  br i1 %137, label %138, label %144

138:                                              ; preds = %133, %129
  %139 = load ptr, ptr %0, align 8, !tbaa !16
  %140 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %139, i64 0, i32 5
  store i32 51, ptr %140, align 8, !tbaa !25
  %141 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %139, i64 0, i32 6
  store i32 %131, ptr %141, align 4, !tbaa !7
  %142 = load ptr, ptr %0, align 8, !tbaa !16
  %143 = load ptr, ptr %142, align 8, !tbaa !26
  tail call void %143(ptr noundef nonnull %0) #32
  br label %144

144:                                              ; preds = %138, %133
  %145 = load ptr, ptr %120, align 8, !tbaa !50
  %146 = load ptr, ptr %145, align 8, !tbaa !65
  %147 = tail call ptr %146(ptr noundef nonnull %0, i32 noundef 1, i64 noundef 132) #32
  %148 = sext i32 %131 to i64
  %149 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 39, i64 %148
  %150 = load ptr, ptr %149, align 8, !tbaa !10
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(132) %147, ptr noundef nonnull align 1 dereferenceable(132) %150, i64 132, i1 false)
  store ptr %147, ptr %126, align 8, !tbaa !151
  %151 = load i32, ptr %2, align 8, !tbaa !155
  br label %152

152:                                              ; preds = %144, %121
  %153 = phi i32 [ %122, %121 ], [ %151, %144 ]
  %154 = add nuw nsw i64 %123, 1
  %155 = sext i32 %153 to i64
  %156 = icmp slt i64 %154, %155
  br i1 %156, label %121, label %157, !llvm.loop !301

157:                                              ; preds = %152, %116, %40
  %158 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 79
  %159 = load ptr, ptr %158, align 8, !tbaa !168
  %160 = load ptr, ptr %159, align 8, !tbaa !302
  tail call void %160(ptr noundef %0) #32
  %161 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 75
  %162 = load ptr, ptr %161, align 8, !tbaa !128
  %163 = load ptr, ptr %162, align 8, !tbaa !303
  tail call void %163(ptr noundef %0) #32
  %164 = load ptr, ptr %161, align 8, !tbaa !128
  %165 = getelementptr inbounds %struct.jpeg_d_coef_controller.118, ptr %164, i64 0, i32 1
  %166 = load ptr, ptr %165, align 8, !tbaa !304
  %167 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 77
  %168 = load ptr, ptr %167, align 8, !tbaa !76
  store ptr %166, ptr %168, align 8, !tbaa !80
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(write, argmem: readwrite, inaccessiblemem: none) uwtable
define internal void @finish_input_pass(ptr nocapture noundef readonly %0) #11 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 77
  %3 = load ptr, ptr %2, align 8, !tbaa !76
  store ptr @consume_markers, ptr %3, align 8, !tbaa !80
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @jinit_d_main_controller(ptr noundef %0, i32 noundef %1) #6 {
  %3 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %3, align 8, !tbaa !50
  %5 = load ptr, ptr %4, align 8, !tbaa !65
  %6 = tail call ptr %5(ptr noundef %0, i32 noundef 1, i64 noundef 136) #32
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 74
  store ptr %6, ptr %7, align 8, !tbaa !111
  store ptr @start_pass_main, ptr %6, align 8, !tbaa !305
  %8 = icmp eq i32 %1, 0
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = load ptr, ptr %0, align 8, !tbaa !16
  %11 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %10, i64 0, i32 5
  store i32 4, ptr %11, align 8, !tbaa !25
  %12 = load ptr, ptr %10, align 8, !tbaa !26
  tail call void %12(ptr noundef nonnull %0) #32
  br label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 81
  %15 = load ptr, ptr %14, align 8, !tbaa !307
  %16 = getelementptr inbounds %struct.jpeg_decomp_master, ptr %15, i64 0, i32 2
  %17 = load i32, ptr %16, align 8, !tbaa !308
  %18 = icmp eq i32 %17, 0
  %19 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 59
  %20 = load i32, ptr %19, align 4, !tbaa !288
  br i1 %18, label %83, label %21

21:                                               ; preds = %13
  %22 = icmp slt i32 %20, 2
  br i1 %22, label %23, label %28

23:                                               ; preds = %21
  %24 = load ptr, ptr %0, align 8, !tbaa !16
  %25 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %24, i64 0, i32 5
  store i32 46, ptr %25, align 8, !tbaa !25
  %26 = load ptr, ptr %24, align 8, !tbaa !26
  tail call void %26(ptr noundef nonnull %0) #32
  %27 = load i32, ptr %19, align 4, !tbaa !288
  br label %28

28:                                               ; preds = %23, %21
  %29 = phi i32 [ %27, %23 ], [ %20, %21 ]
  %30 = load ptr, ptr %7, align 8, !tbaa !111
  %31 = load ptr, ptr %3, align 8, !tbaa !50
  %32 = load ptr, ptr %31, align 8, !tbaa !65
  %33 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 8
  %34 = load i32, ptr %33, align 8, !tbaa !81
  %35 = shl nsw i32 %34, 1
  %36 = sext i32 %35 to i64
  %37 = shl nsw i64 %36, 3
  %38 = tail call ptr %32(ptr noundef nonnull %0, i32 noundef 1, i64 noundef %37) #32
  %39 = getelementptr inbounds %struct.my_main_controller.152, ptr %30, i64 0, i32 4
  store ptr %38, ptr %39, align 8, !tbaa !10
  %40 = load i32, ptr %33, align 8, !tbaa !81
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds ptr, ptr %38, i64 %41
  %43 = getelementptr inbounds %struct.my_main_controller.152, ptr %30, i64 0, i32 4, i64 1
  store ptr %42, ptr %43, align 8, !tbaa !10
  %44 = icmp sgt i32 %40, 0
  br i1 %44, label %45, label %79

45:                                               ; preds = %28
  %46 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 43
  %47 = load ptr, ptr %46, align 8, !tbaa !86
  %48 = add nsw i32 %29, 4
  br label %49

49:                                               ; preds = %49, %45
  %50 = phi i64 [ 0, %45 ], [ %74, %49 ]
  %51 = phi ptr [ %47, %45 ], [ %75, %49 ]
  %52 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %51, i64 0, i32 3
  %53 = load i32, ptr %52, align 4, !tbaa !134
  %54 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %51, i64 0, i32 9
  %55 = load i32, ptr %54, align 4, !tbaa !177
  %56 = mul nsw i32 %55, %53
  %57 = load i32, ptr %19, align 4, !tbaa !288
  %58 = sdiv i32 %56, %57
  %59 = load ptr, ptr %3, align 8, !tbaa !50
  %60 = load ptr, ptr %59, align 8, !tbaa !65
  %61 = mul nsw i32 %58, %48
  %62 = shl nsw i32 %61, 1
  %63 = sext i32 %62 to i64
  %64 = shl nsw i64 %63, 3
  %65 = tail call ptr %60(ptr noundef nonnull %0, i32 noundef 1, i64 noundef %64) #32
  %66 = sext i32 %58 to i64
  %67 = getelementptr inbounds ptr, ptr %65, i64 %66
  %68 = load ptr, ptr %39, align 8, !tbaa !10
  %69 = getelementptr inbounds ptr, ptr %68, i64 %50
  store ptr %67, ptr %69, align 8, !tbaa !10
  %70 = sext i32 %61 to i64
  %71 = getelementptr inbounds ptr, ptr %67, i64 %70
  %72 = load ptr, ptr %43, align 8, !tbaa !10
  %73 = getelementptr inbounds ptr, ptr %72, i64 %50
  store ptr %71, ptr %73, align 8, !tbaa !10
  %74 = add nuw nsw i64 %50, 1
  %75 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %51, i64 1
  %76 = load i32, ptr %33, align 8, !tbaa !81
  %77 = sext i32 %76 to i64
  %78 = icmp slt i64 %74, %77
  br i1 %78, label %49, label %79, !llvm.loop !310

79:                                               ; preds = %49, %28
  %80 = phi i32 [ %40, %28 ], [ %76, %49 ]
  %81 = load i32, ptr %19, align 4, !tbaa !288
  %82 = add nsw i32 %81, 2
  br label %86

83:                                               ; preds = %13
  %84 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 8
  %85 = load i32, ptr %84, align 8, !tbaa !81
  br label %86

86:                                               ; preds = %83, %79
  %87 = phi i32 [ %80, %79 ], [ %85, %83 ]
  %88 = phi i32 [ %82, %79 ], [ %20, %83 ]
  %89 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 8
  %90 = icmp sgt i32 %87, 0
  br i1 %90, label %91, label %119

91:                                               ; preds = %86
  %92 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 43
  %93 = load ptr, ptr %92, align 8, !tbaa !86
  %94 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 59
  br label %95

95:                                               ; preds = %95, %91
  %96 = phi i64 [ 0, %91 ], [ %114, %95 ]
  %97 = phi ptr [ %93, %91 ], [ %115, %95 ]
  %98 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %97, i64 0, i32 3
  %99 = load i32, ptr %98, align 4, !tbaa !134
  %100 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %97, i64 0, i32 9
  %101 = load i32, ptr %100, align 4, !tbaa !177
  %102 = mul nsw i32 %101, %99
  %103 = load i32, ptr %94, align 4, !tbaa !288
  %104 = sdiv i32 %102, %103
  %105 = load ptr, ptr %3, align 8, !tbaa !50
  %106 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %105, i64 0, i32 2
  %107 = load ptr, ptr %106, align 8, !tbaa !311
  %108 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %97, i64 0, i32 7
  %109 = load i32, ptr %108, align 4, !tbaa !137
  %110 = mul i32 %109, %101
  %111 = mul nsw i32 %104, %88
  %112 = tail call ptr %107(ptr noundef nonnull %0, i32 noundef 1, i32 noundef %110, i32 noundef %111) #32
  %113 = getelementptr inbounds %struct.my_main_controller.152, ptr %6, i64 0, i32 1, i64 %96
  store ptr %112, ptr %113, align 8, !tbaa !10
  %114 = add nuw nsw i64 %96, 1
  %115 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %97, i64 1
  %116 = load i32, ptr %89, align 8, !tbaa !81
  %117 = sext i32 %116 to i64
  %118 = icmp slt i64 %114, %117
  br i1 %118, label %95, label %119, !llvm.loop !312

119:                                              ; preds = %95, %86
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @start_pass_main(ptr noundef %0, i32 noundef %1) #6 {
  %3 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 74
  %4 = load ptr, ptr %3, align 8, !tbaa !111
  switch i32 %1, label %100 [
    i32 0, label %5
    i32 2, label %98
  ]

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 81
  %7 = load ptr, ptr %6, align 8, !tbaa !307
  %8 = getelementptr inbounds %struct.jpeg_decomp_master, ptr %7, i64 0, i32 2
  %9 = load i32, ptr %8, align 8, !tbaa !308
  %10 = icmp eq i32 %9, 0
  %11 = getelementptr inbounds %struct.jpeg_d_main_controller, ptr %4, i64 0, i32 1
  br i1 %10, label %94, label %12

12:                                               ; preds = %5
  store ptr @process_data_context_main, ptr %11, align 8, !tbaa !313
  %13 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 59
  %14 = load i32, ptr %13, align 4, !tbaa !288
  %15 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 8
  %16 = load i32, ptr %15, align 8, !tbaa !81
  %17 = icmp sgt i32 %16, 0
  br i1 %17, label %18, label %90

18:                                               ; preds = %12
  %19 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 43
  %20 = load ptr, ptr %19, align 8, !tbaa !86
  %21 = getelementptr inbounds %struct.my_main_controller.152, ptr %4, i64 0, i32 4
  %22 = getelementptr inbounds %struct.my_main_controller.152, ptr %4, i64 0, i32 4, i64 1
  %23 = add nsw i32 %14, 2
  %24 = add nsw i32 %14, -2
  %25 = zext i32 %16 to i64
  br label %26

26:                                               ; preds = %86, %18
  %27 = phi i64 [ 0, %18 ], [ %87, %86 ]
  %28 = phi ptr [ %20, %18 ], [ %88, %86 ]
  %29 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %28, i64 0, i32 3
  %30 = load i32, ptr %29, align 4, !tbaa !134
  %31 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %28, i64 0, i32 9
  %32 = load i32, ptr %31, align 4, !tbaa !177
  %33 = mul nsw i32 %32, %30
  %34 = sdiv i32 %33, %14
  %35 = load ptr, ptr %21, align 8, !tbaa !10
  %36 = getelementptr inbounds ptr, ptr %35, i64 %27
  %37 = load ptr, ptr %36, align 8, !tbaa !10
  %38 = load ptr, ptr %22, align 8, !tbaa !10
  %39 = getelementptr inbounds ptr, ptr %38, i64 %27
  %40 = load ptr, ptr %39, align 8, !tbaa !10
  %41 = getelementptr inbounds %struct.my_main_controller.152, ptr %4, i64 0, i32 1, i64 %27
  %42 = load ptr, ptr %41, align 8, !tbaa !10
  %43 = mul nsw i32 %34, %23
  %44 = icmp sgt i32 %43, 0
  br i1 %44, label %45, label %47

45:                                               ; preds = %26
  %46 = zext i32 %43 to i64
  br label %57

47:                                               ; preds = %57, %26
  %48 = icmp sgt i32 %34, 0
  br i1 %48, label %49, label %86

49:                                               ; preds = %47
  %50 = shl nuw i32 %34, 1
  %51 = mul nsw i32 %34, %14
  %52 = mul nsw i32 %34, %24
  %53 = sext i32 %51 to i64
  %54 = sext i32 %52 to i64
  %55 = tail call i32 @llvm.smax.i32(i32 %50, i32 1)
  %56 = zext i32 %55 to i64
  br label %67

57:                                               ; preds = %57, %45
  %58 = phi i64 [ 0, %45 ], [ %63, %57 ]
  %59 = getelementptr inbounds ptr, ptr %42, i64 %58
  %60 = load ptr, ptr %59, align 8, !tbaa !10
  %61 = getelementptr inbounds ptr, ptr %40, i64 %58
  store ptr %60, ptr %61, align 8, !tbaa !10
  %62 = getelementptr inbounds ptr, ptr %37, i64 %58
  store ptr %60, ptr %62, align 8, !tbaa !10
  %63 = add nuw nsw i64 %58, 1
  %64 = icmp eq i64 %63, %46
  br i1 %64, label %47, label %57, !llvm.loop !314

65:                                               ; preds = %67
  %66 = zext i32 %34 to i64
  br label %79

67:                                               ; preds = %67, %49
  %68 = phi i64 [ 0, %49 ], [ %77, %67 ]
  %69 = add nsw i64 %68, %53
  %70 = getelementptr inbounds ptr, ptr %42, i64 %69
  %71 = load ptr, ptr %70, align 8, !tbaa !10
  %72 = add nsw i64 %68, %54
  %73 = getelementptr inbounds ptr, ptr %40, i64 %72
  store ptr %71, ptr %73, align 8, !tbaa !10
  %74 = getelementptr inbounds ptr, ptr %42, i64 %72
  %75 = load ptr, ptr %74, align 8, !tbaa !10
  %76 = getelementptr inbounds ptr, ptr %40, i64 %69
  store ptr %75, ptr %76, align 8, !tbaa !10
  %77 = add nuw nsw i64 %68, 1
  %78 = icmp eq i64 %77, %56
  br i1 %78, label %65, label %67, !llvm.loop !315

79:                                               ; preds = %79, %65
  %80 = phi i64 [ 0, %65 ], [ %84, %79 ]
  %81 = load ptr, ptr %37, align 8, !tbaa !10
  %82 = sub nsw i64 %80, %66
  %83 = getelementptr inbounds ptr, ptr %37, i64 %82
  store ptr %81, ptr %83, align 8, !tbaa !10
  %84 = add nuw nsw i64 %80, 1
  %85 = icmp eq i64 %84, %66
  br i1 %85, label %86, label %79, !llvm.loop !316

86:                                               ; preds = %79, %47
  %87 = add nuw nsw i64 %27, 1
  %88 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %28, i64 1
  %89 = icmp eq i64 %87, %25
  br i1 %89, label %90, label %26, !llvm.loop !317

90:                                               ; preds = %86, %12
  %91 = getelementptr inbounds %struct.my_main_controller.152, ptr %4, i64 0, i32 5
  store i32 0, ptr %91, align 8, !tbaa !318
  %92 = getelementptr inbounds %struct.my_main_controller.152, ptr %4, i64 0, i32 6
  store i32 0, ptr %92, align 4, !tbaa !319
  %93 = getelementptr inbounds %struct.my_main_controller.152, ptr %4, i64 0, i32 8
  store i32 0, ptr %93, align 4, !tbaa !320
  br label %95

94:                                               ; preds = %5
  store ptr @process_data_simple_main, ptr %11, align 8, !tbaa !313
  br label %95

95:                                               ; preds = %94, %90
  %96 = getelementptr inbounds %struct.my_main_controller.152, ptr %4, i64 0, i32 2
  store i32 0, ptr %96, align 8, !tbaa !321
  %97 = getelementptr inbounds %struct.my_main_controller.152, ptr %4, i64 0, i32 3
  store i32 0, ptr %97, align 4, !tbaa !322
  br label %104

98:                                               ; preds = %2
  %99 = getelementptr inbounds %struct.jpeg_d_main_controller, ptr %4, i64 0, i32 1
  store ptr @process_data_crank_post, ptr %99, align 8, !tbaa !313
  br label %104

100:                                              ; preds = %2
  %101 = load ptr, ptr %0, align 8, !tbaa !16
  %102 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %101, i64 0, i32 5
  store i32 4, ptr %102, align 8, !tbaa !25
  %103 = load ptr, ptr %101, align 8, !tbaa !26
  tail call void %103(ptr noundef nonnull %0) #32
  br label %104

104:                                              ; preds = %100, %98, %95
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @process_data_context_main(ptr noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %3) #6 {
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 74
  %6 = load ptr, ptr %5, align 8, !tbaa !111
  %7 = getelementptr inbounds %struct.my_main_controller.152, ptr %6, i64 0, i32 2
  %8 = load i32, ptr %7, align 8, !tbaa !321
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %26

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 75
  %12 = load ptr, ptr %11, align 8, !tbaa !128
  %13 = getelementptr inbounds %struct.jpeg_d_coef_controller.118, ptr %12, i64 0, i32 3
  %14 = load ptr, ptr %13, align 8, !tbaa !323
  %15 = getelementptr inbounds %struct.my_main_controller.152, ptr %6, i64 0, i32 5
  %16 = load i32, ptr %15, align 8, !tbaa !318
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds %struct.my_main_controller.152, ptr %6, i64 0, i32 4, i64 %17
  %19 = load ptr, ptr %18, align 8, !tbaa !10
  %20 = tail call i32 %14(ptr noundef nonnull %0, ptr noundef %19) #32
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %202, label %22

22:                                               ; preds = %10
  store i32 1, ptr %7, align 8, !tbaa !321
  %23 = getelementptr inbounds %struct.my_main_controller.152, ptr %6, i64 0, i32 8
  %24 = load i32, ptr %23, align 4, !tbaa !320
  %25 = add i32 %24, 1
  store i32 %25, ptr %23, align 4, !tbaa !320
  br label %26

26:                                               ; preds = %22, %4
  %27 = getelementptr inbounds %struct.my_main_controller.152, ptr %6, i64 0, i32 6
  %28 = load i32, ptr %27, align 4, !tbaa !319
  switch i32 %28, label %202 [
    i32 2, label %29
    i32 0, label %48
    i32 1, label %117
  ]

29:                                               ; preds = %26
  %30 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 76
  %31 = load ptr, ptr %30, align 8, !tbaa !324
  %32 = getelementptr inbounds %struct.jpeg_d_main_controller, ptr %31, i64 0, i32 1
  %33 = load ptr, ptr %32, align 8, !tbaa !325
  %34 = getelementptr inbounds %struct.my_main_controller.152, ptr %6, i64 0, i32 5
  %35 = load i32, ptr %34, align 8, !tbaa !318
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds %struct.my_main_controller.152, ptr %6, i64 0, i32 4, i64 %36
  %38 = load ptr, ptr %37, align 8, !tbaa !10
  %39 = getelementptr inbounds %struct.my_main_controller.152, ptr %6, i64 0, i32 3
  %40 = getelementptr inbounds %struct.my_main_controller.152, ptr %6, i64 0, i32 7
  %41 = load i32, ptr %40, align 8, !tbaa !327
  tail call void %33(ptr noundef nonnull %0, ptr noundef %38, ptr noundef nonnull %39, i32 noundef %41, ptr noundef %1, ptr noundef %2, i32 noundef %3) #32
  %42 = load i32, ptr %39, align 4, !tbaa !322
  %43 = load i32, ptr %40, align 8, !tbaa !327
  %44 = icmp ult i32 %42, %43
  br i1 %44, label %202, label %45

45:                                               ; preds = %29
  store i32 0, ptr %27, align 4, !tbaa !319
  %46 = load i32, ptr %2, align 4, !tbaa !41
  %47 = icmp ult i32 %46, %3
  br i1 %47, label %48, label %202

48:                                               ; preds = %45, %26
  %49 = getelementptr inbounds %struct.my_main_controller.152, ptr %6, i64 0, i32 3
  store i32 0, ptr %49, align 4, !tbaa !322
  %50 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 59
  %51 = load i32, ptr %50, align 4, !tbaa !288
  %52 = add nsw i32 %51, -1
  %53 = getelementptr inbounds %struct.my_main_controller.152, ptr %6, i64 0, i32 7
  store i32 %52, ptr %53, align 8, !tbaa !327
  %54 = getelementptr inbounds %struct.my_main_controller.152, ptr %6, i64 0, i32 8
  %55 = load i32, ptr %54, align 4, !tbaa !320
  %56 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 60
  %57 = load i32, ptr %56, align 8, !tbaa !106
  %58 = icmp eq i32 %55, %57
  br i1 %58, label %59, label %116

59:                                               ; preds = %48
  %60 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 8
  %61 = load i32, ptr %60, align 8, !tbaa !81
  %62 = icmp sgt i32 %61, 0
  br i1 %62, label %63, label %116

63:                                               ; preds = %59
  %64 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 43
  %65 = load ptr, ptr %64, align 8, !tbaa !86
  %66 = load ptr, ptr %5, align 8, !tbaa !111
  %67 = getelementptr inbounds %struct.my_main_controller.152, ptr %66, i64 0, i32 7
  %68 = getelementptr inbounds %struct.my_main_controller.152, ptr %66, i64 0, i32 5
  %69 = load i32, ptr %68, align 8, !tbaa !318
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds %struct.my_main_controller.152, ptr %66, i64 0, i32 4, i64 %70
  %72 = zext i32 %61 to i64
  br label %73

73:                                               ; preds = %112, %63
  %74 = phi i64 [ 0, %63 ], [ %113, %112 ]
  %75 = phi ptr [ %65, %63 ], [ %114, %112 ]
  %76 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %75, i64 0, i32 3
  %77 = load i32, ptr %76, align 4, !tbaa !134
  %78 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %75, i64 0, i32 9
  %79 = load i32, ptr %78, align 4, !tbaa !177
  %80 = mul nsw i32 %79, %77
  %81 = sdiv i32 %80, %51
  %82 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %75, i64 0, i32 11
  %83 = load i32, ptr %82, align 4, !tbaa !291
  %84 = urem i32 %83, %80
  %85 = icmp eq i32 %84, 0
  %86 = select i1 %85, i32 %80, i32 %84
  %87 = icmp eq i64 %74, 0
  br i1 %87, label %88, label %92

88:                                               ; preds = %73
  %89 = add nsw i32 %86, -1
  %90 = sdiv i32 %89, %81
  %91 = add nsw i32 %90, 1
  store i32 %91, ptr %67, align 8, !tbaa !327
  br label %92

92:                                               ; preds = %88, %73
  %93 = load ptr, ptr %71, align 8, !tbaa !10
  %94 = getelementptr inbounds ptr, ptr %93, i64 %74
  %95 = load ptr, ptr %94, align 8, !tbaa !10
  %96 = icmp sgt i32 %81, 0
  br i1 %96, label %97, label %112

97:                                               ; preds = %92
  %98 = shl nuw i32 %81, 1
  %99 = add nsw i32 %86, -1
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds ptr, ptr %95, i64 %100
  %102 = sext i32 %86 to i64
  %103 = tail call i32 @llvm.smax.i32(i32 %98, i32 1)
  %104 = zext i32 %103 to i64
  br label %105

105:                                              ; preds = %105, %97
  %106 = phi i64 [ 0, %97 ], [ %110, %105 ]
  %107 = load ptr, ptr %101, align 8, !tbaa !10
  %108 = add nsw i64 %106, %102
  %109 = getelementptr inbounds ptr, ptr %95, i64 %108
  store ptr %107, ptr %109, align 8, !tbaa !10
  %110 = add nuw nsw i64 %106, 1
  %111 = icmp eq i64 %110, %104
  br i1 %111, label %112, label %105, !llvm.loop !328

112:                                              ; preds = %105, %92
  %113 = add nuw nsw i64 %74, 1
  %114 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %75, i64 1
  %115 = icmp eq i64 %113, %72
  br i1 %115, label %116, label %73, !llvm.loop !329

116:                                              ; preds = %112, %59, %48
  store i32 1, ptr %27, align 4, !tbaa !319
  br label %117

117:                                              ; preds = %116, %26
  %118 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 76
  %119 = load ptr, ptr %118, align 8, !tbaa !324
  %120 = getelementptr inbounds %struct.jpeg_d_main_controller, ptr %119, i64 0, i32 1
  %121 = load ptr, ptr %120, align 8, !tbaa !325
  %122 = getelementptr inbounds %struct.my_main_controller.152, ptr %6, i64 0, i32 5
  %123 = load i32, ptr %122, align 8, !tbaa !318
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds %struct.my_main_controller.152, ptr %6, i64 0, i32 4, i64 %124
  %126 = load ptr, ptr %125, align 8, !tbaa !10
  %127 = getelementptr inbounds %struct.my_main_controller.152, ptr %6, i64 0, i32 3
  %128 = getelementptr inbounds %struct.my_main_controller.152, ptr %6, i64 0, i32 7
  %129 = load i32, ptr %128, align 8, !tbaa !327
  tail call void %121(ptr noundef %0, ptr noundef %126, ptr noundef nonnull %127, i32 noundef %129, ptr noundef %1, ptr noundef %2, i32 noundef %3) #32
  %130 = load i32, ptr %127, align 4, !tbaa !322
  %131 = load i32, ptr %128, align 8, !tbaa !327
  %132 = icmp ult i32 %130, %131
  br i1 %132, label %202, label %133

133:                                              ; preds = %117
  %134 = getelementptr inbounds %struct.my_main_controller.152, ptr %6, i64 0, i32 8
  %135 = load i32, ptr %134, align 4, !tbaa !320
  %136 = icmp eq i32 %135, 1
  %137 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 59
  %138 = load i32, ptr %137, align 4, !tbaa !288
  br i1 %136, label %139, label %197

139:                                              ; preds = %133
  %140 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 8
  %141 = load i32, ptr %140, align 8, !tbaa !81
  %142 = icmp sgt i32 %141, 0
  br i1 %142, label %143, label %197

143:                                              ; preds = %139
  %144 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 43
  %145 = load ptr, ptr %144, align 8, !tbaa !86
  %146 = load ptr, ptr %5, align 8, !tbaa !111
  %147 = getelementptr inbounds %struct.my_main_controller.152, ptr %146, i64 0, i32 4
  %148 = getelementptr inbounds %struct.my_main_controller.152, ptr %146, i64 0, i32 4, i64 1
  %149 = add nsw i32 %138, 1
  %150 = add nsw i32 %138, 2
  %151 = zext i32 %141 to i64
  br label %152

152:                                              ; preds = %193, %143
  %153 = phi i64 [ 0, %143 ], [ %194, %193 ]
  %154 = phi ptr [ %145, %143 ], [ %195, %193 ]
  %155 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %154, i64 0, i32 3
  %156 = load i32, ptr %155, align 4, !tbaa !134
  %157 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %154, i64 0, i32 9
  %158 = load i32, ptr %157, align 4, !tbaa !177
  %159 = mul nsw i32 %158, %156
  %160 = sdiv i32 %159, %138
  %161 = load ptr, ptr %147, align 8, !tbaa !10
  %162 = getelementptr inbounds ptr, ptr %161, i64 %153
  %163 = load ptr, ptr %162, align 8, !tbaa !10
  %164 = load ptr, ptr %148, align 8, !tbaa !10
  %165 = getelementptr inbounds ptr, ptr %164, i64 %153
  %166 = load ptr, ptr %165, align 8, !tbaa !10
  %167 = icmp sgt i32 %160, 0
  br i1 %167, label %168, label %193

168:                                              ; preds = %152
  %169 = mul nsw i32 %160, %149
  %170 = mul nsw i32 %160, %150
  %171 = sext i32 %169 to i64
  %172 = zext i32 %160 to i64
  %173 = sext i32 %170 to i64
  br label %174

174:                                              ; preds = %174, %168
  %175 = phi i64 [ 0, %168 ], [ %191, %174 ]
  %176 = add nsw i64 %175, %171
  %177 = getelementptr inbounds ptr, ptr %163, i64 %176
  %178 = load ptr, ptr %177, align 8, !tbaa !10
  %179 = sub nsw i64 %175, %172
  %180 = getelementptr inbounds ptr, ptr %163, i64 %179
  store ptr %178, ptr %180, align 8, !tbaa !10
  %181 = getelementptr inbounds ptr, ptr %166, i64 %176
  %182 = load ptr, ptr %181, align 8, !tbaa !10
  %183 = getelementptr inbounds ptr, ptr %166, i64 %179
  store ptr %182, ptr %183, align 8, !tbaa !10
  %184 = getelementptr inbounds ptr, ptr %163, i64 %175
  %185 = load ptr, ptr %184, align 8, !tbaa !10
  %186 = add nsw i64 %175, %173
  %187 = getelementptr inbounds ptr, ptr %163, i64 %186
  store ptr %185, ptr %187, align 8, !tbaa !10
  %188 = getelementptr inbounds ptr, ptr %166, i64 %175
  %189 = load ptr, ptr %188, align 8, !tbaa !10
  %190 = getelementptr inbounds ptr, ptr %166, i64 %186
  store ptr %189, ptr %190, align 8, !tbaa !10
  %191 = add nuw nsw i64 %175, 1
  %192 = icmp eq i64 %191, %172
  br i1 %192, label %193, label %174, !llvm.loop !330

193:                                              ; preds = %174, %152
  %194 = add nuw nsw i64 %153, 1
  %195 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %154, i64 1
  %196 = icmp eq i64 %194, %151
  br i1 %196, label %197, label %152, !llvm.loop !331

197:                                              ; preds = %193, %139, %133
  %198 = load i32, ptr %122, align 8, !tbaa !318
  %199 = xor i32 %198, 1
  store i32 %199, ptr %122, align 8, !tbaa !318
  store i32 0, ptr %7, align 8, !tbaa !321
  %200 = add nsw i32 %138, 1
  store i32 %200, ptr %127, align 4, !tbaa !322
  %201 = add nsw i32 %138, 2
  store i32 %201, ptr %128, align 8, !tbaa !327
  store i32 2, ptr %27, align 4, !tbaa !319
  br label %202

202:                                              ; preds = %197, %117, %45, %29, %26, %10
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @process_data_simple_main(ptr noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %3) #6 {
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 74
  %6 = load ptr, ptr %5, align 8, !tbaa !111
  %7 = getelementptr inbounds %struct.my_main_controller.152, ptr %6, i64 0, i32 2
  %8 = load i32, ptr %7, align 8, !tbaa !321
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %19

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 75
  %12 = load ptr, ptr %11, align 8, !tbaa !128
  %13 = getelementptr inbounds %struct.jpeg_d_coef_controller.118, ptr %12, i64 0, i32 3
  %14 = load ptr, ptr %13, align 8, !tbaa !323
  %15 = getelementptr inbounds %struct.my_main_controller.152, ptr %6, i64 0, i32 1
  %16 = tail call i32 %14(ptr noundef nonnull %0, ptr noundef nonnull %15) #32
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %31, label %18

18:                                               ; preds = %10
  store i32 1, ptr %7, align 8, !tbaa !321
  br label %19

19:                                               ; preds = %18, %4
  %20 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 59
  %21 = load i32, ptr %20, align 4, !tbaa !288
  %22 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 76
  %23 = load ptr, ptr %22, align 8, !tbaa !324
  %24 = getelementptr inbounds %struct.jpeg_d_main_controller, ptr %23, i64 0, i32 1
  %25 = load ptr, ptr %24, align 8, !tbaa !325
  %26 = getelementptr inbounds %struct.my_main_controller.152, ptr %6, i64 0, i32 1
  %27 = getelementptr inbounds %struct.my_main_controller.152, ptr %6, i64 0, i32 3
  tail call void %25(ptr noundef nonnull %0, ptr noundef nonnull %26, ptr noundef nonnull %27, i32 noundef %21, ptr noundef %1, ptr noundef %2, i32 noundef %3) #32
  %28 = load i32, ptr %27, align 4, !tbaa !322
  %29 = icmp ult i32 %28, %21
  br i1 %29, label %31, label %30

30:                                               ; preds = %19
  store i32 0, ptr %7, align 8, !tbaa !321
  store i32 0, ptr %27, align 4, !tbaa !322
  br label %31

31:                                               ; preds = %30, %19, %10
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @process_data_crank_post(ptr noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %3) #6 {
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 76
  %6 = load ptr, ptr %5, align 8, !tbaa !324
  %7 = getelementptr inbounds %struct.jpeg_d_main_controller, ptr %6, i64 0, i32 1
  %8 = load ptr, ptr %7, align 8, !tbaa !325
  tail call void %8(ptr noundef %0, ptr noundef null, ptr noundef null, i32 noundef 0, ptr noundef %1, ptr noundef %2, i32 noundef %3) #32
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @jpeg_resync_to_restart(ptr noundef %0, i32 noundef %1) #6 {
  %3 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 72
  %4 = load i32, ptr %3, align 4, !tbaa !267
  %5 = load ptr, ptr %0, align 8, !tbaa !16
  %6 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %5, i64 0, i32 5
  store i32 117, ptr %6, align 8, !tbaa !25
  %7 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %5, i64 0, i32 6
  store i32 %4, ptr %7, align 4, !tbaa !7
  %8 = load ptr, ptr %0, align 8, !tbaa !16
  %9 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %8, i64 0, i32 6, i32 0, i64 1
  store i32 %1, ptr %9, align 4, !tbaa !7
  %10 = load ptr, ptr %0, align 8, !tbaa !16
  %11 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %10, i64 0, i32 1
  %12 = load ptr, ptr %11, align 8, !tbaa !85
  tail call void %12(ptr noundef nonnull %0, i32 noundef -1) #32
  %13 = add nsw i32 %1, 1
  %14 = and i32 %13, 7
  %15 = or i32 %14, 208
  %16 = add nsw i32 %1, 2
  %17 = and i32 %16, 7
  %18 = or i32 %17, 208
  %19 = add i32 %1, 7
  %20 = and i32 %19, 7
  %21 = or i32 %20, 208
  %22 = add i32 %1, 6
  %23 = and i32 %22, 7
  %24 = or i32 %23, 208
  br label %25

25:                                               ; preds = %68, %2
  %26 = phi i32 [ %4, %2 ], [ %69, %68 ]
  %27 = icmp slt i32 %26, 192
  br i1 %27, label %57, label %28

28:                                               ; preds = %25
  %29 = add nsw i32 %26, -216
  %30 = icmp ult i32 %29, -8
  %31 = icmp eq i32 %26, %15
  %32 = select i1 %30, i1 true, i1 %31
  %33 = icmp eq i32 %26, %18
  %34 = select i1 %32, i1 true, i1 %33
  br i1 %34, label %39, label %35

35:                                               ; preds = %28
  %36 = icmp eq i32 %26, %21
  %37 = icmp eq i32 %26, %24
  %38 = or i1 %36, %37
  br i1 %38, label %57, label %48

39:                                               ; preds = %28
  %.lcssa = phi i32 [ %26, %28 ]
  %40 = load ptr, ptr %0, align 8, !tbaa !16
  %41 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %40, i64 0, i32 5
  store i32 96, ptr %41, align 8, !tbaa !25
  %42 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %40, i64 0, i32 6
  store i32 %.lcssa, ptr %42, align 4, !tbaa !7
  %43 = load ptr, ptr %0, align 8, !tbaa !16
  %44 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %43, i64 0, i32 6, i32 0, i64 1
  store i32 3, ptr %44, align 4, !tbaa !7
  %45 = load ptr, ptr %0, align 8, !tbaa !16
  %46 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %45, i64 0, i32 1
  %47 = load ptr, ptr %46, align 8, !tbaa !85
  tail call void %47(ptr noundef nonnull %0, i32 noundef 4) #32
  br label %70

48:                                               ; preds = %35
  %.lcssa1 = phi i32 [ %26, %35 ]
  %49 = load ptr, ptr %0, align 8, !tbaa !16
  %50 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %49, i64 0, i32 5
  store i32 96, ptr %50, align 8, !tbaa !25
  %51 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %49, i64 0, i32 6
  store i32 %.lcssa1, ptr %51, align 4, !tbaa !7
  %52 = load ptr, ptr %0, align 8, !tbaa !16
  %53 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %52, i64 0, i32 6, i32 0, i64 1
  store i32 1, ptr %53, align 4, !tbaa !7
  %54 = load ptr, ptr %0, align 8, !tbaa !16
  %55 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %54, i64 0, i32 1
  %56 = load ptr, ptr %55, align 8, !tbaa !85
  tail call void %56(ptr noundef nonnull %0, i32 noundef 4) #32
  store i32 0, ptr %3, align 4, !tbaa !267
  br label %70

57:                                               ; preds = %35, %25
  %58 = load ptr, ptr %0, align 8, !tbaa !16
  %59 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %58, i64 0, i32 5
  store i32 96, ptr %59, align 8, !tbaa !25
  %60 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %58, i64 0, i32 6
  store i32 %26, ptr %60, align 4, !tbaa !7
  %61 = load ptr, ptr %0, align 8, !tbaa !16
  %62 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %61, i64 0, i32 6, i32 0, i64 1
  store i32 2, ptr %62, align 4, !tbaa !7
  %63 = load ptr, ptr %0, align 8, !tbaa !16
  %64 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %63, i64 0, i32 1
  %65 = load ptr, ptr %64, align 8, !tbaa !85
  tail call void %65(ptr noundef nonnull %0, i32 noundef 4) #32
  %66 = tail call fastcc i32 @next_marker(ptr noundef nonnull %0) #33, !range !247
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %70, label %68

68:                                               ; preds = %57
  %69 = load i32, ptr %3, align 4, !tbaa !267
  br label %25

70:                                               ; preds = %57, %48, %39
  %71 = phi i32 [ 1, %48 ], [ 1, %39 ], [ 0, %57 ]
  ret i32 %71
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc i32 @next_marker(ptr noundef %0) unnamed_addr #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 5
  %3 = load ptr, ptr %2, align 8, !tbaa !54
  %4 = load ptr, ptr %3, align 8, !tbaa !58
  %5 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %3, i64 0, i32 1
  %6 = load i64, ptr %5, align 8, !tbaa !55
  %7 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %3, i64 0, i32 3
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 78
  br label %9

9:                                                ; preds = %69, %1
  %10 = phi ptr [ %4, %1 ], [ %.lcssa3, %69 ]
  %11 = phi i64 [ %6, %1 ], [ %.lcssa5, %69 ]
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %13, label %20

13:                                               ; preds = %9
  %14 = load ptr, ptr %7, align 8, !tbaa !57
  %15 = tail call i32 %14(ptr noundef nonnull %0) #32
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %93, label %17

17:                                               ; preds = %13
  %18 = load ptr, ptr %3, align 8, !tbaa !58
  %19 = load i64, ptr %5, align 8, !tbaa !55
  br label %20

20:                                               ; preds = %17, %9
  %21 = phi ptr [ %18, %17 ], [ %10, %9 ]
  %22 = phi i64 [ %19, %17 ], [ %11, %9 ]
  %23 = getelementptr inbounds i8, ptr %21, i64 1
  %24 = add i64 %22, -1
  %25 = load i8, ptr %21, align 1, !tbaa !7
  %26 = icmp eq i8 %25, -1
  br i1 %26, label %49, label %27

27:                                               ; preds = %42, %20
  %28 = phi i64 [ %46, %42 ], [ %24, %20 ]
  %29 = phi ptr [ %45, %42 ], [ %23, %20 ]
  %30 = load ptr, ptr %8, align 8, !tbaa !73
  %31 = getelementptr inbounds %struct.jpeg_marker_reader, ptr %30, i64 0, i32 8
  %32 = load i32, ptr %31, align 4, !tbaa !263
  %33 = add i32 %32, 1
  store i32 %33, ptr %31, align 4, !tbaa !263
  store ptr %29, ptr %3, align 8, !tbaa !58
  store i64 %28, ptr %5, align 8, !tbaa !55
  %34 = icmp eq i64 %28, 0
  br i1 %34, label %35, label %42

35:                                               ; preds = %27
  %36 = load ptr, ptr %7, align 8, !tbaa !57
  %37 = tail call i32 %36(ptr noundef nonnull %0) #32
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %93, label %39

39:                                               ; preds = %35
  %40 = load ptr, ptr %3, align 8, !tbaa !58
  %41 = load i64, ptr %5, align 8, !tbaa !55
  br label %42

42:                                               ; preds = %39, %27
  %43 = phi ptr [ %40, %39 ], [ %29, %27 ]
  %44 = phi i64 [ %41, %39 ], [ %28, %27 ]
  %45 = getelementptr inbounds i8, ptr %43, i64 1
  %46 = add i64 %44, -1
  %47 = load i8, ptr %43, align 1, !tbaa !7
  %48 = icmp eq i8 %47, -1
  br i1 %48, label %49, label %27, !llvm.loop !332

49:                                               ; preds = %42, %20
  %50 = phi ptr [ %23, %20 ], [ %45, %42 ]
  %51 = phi i64 [ %24, %20 ], [ %46, %42 ]
  br label %52

52:                                               ; preds = %63, %49
  %53 = phi ptr [ %67, %63 ], [ %50, %49 ]
  %54 = phi i64 [ %66, %63 ], [ %51, %49 ]
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %56, label %63

56:                                               ; preds = %52
  %57 = load ptr, ptr %7, align 8, !tbaa !57
  %58 = tail call i32 %57(ptr noundef %0) #32
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %93, label %60

60:                                               ; preds = %56
  %61 = load ptr, ptr %3, align 8, !tbaa !58
  %62 = load i64, ptr %5, align 8, !tbaa !55
  br label %63

63:                                               ; preds = %60, %52
  %64 = phi ptr [ %61, %60 ], [ %53, %52 ]
  %65 = phi i64 [ %62, %60 ], [ %54, %52 ]
  %66 = add i64 %65, -1
  %67 = getelementptr inbounds i8, ptr %64, i64 1
  %68 = load i8, ptr %64, align 1, !tbaa !7
  switch i8 %68, label %74 [
    i8 -1, label %52
    i8 0, label %69
  ]

69:                                               ; preds = %63
  %.lcssa5 = phi i64 [ %66, %63 ]
  %.lcssa3 = phi ptr [ %67, %63 ]
  %70 = load ptr, ptr %8, align 8, !tbaa !73
  %71 = getelementptr inbounds %struct.jpeg_marker_reader, ptr %70, i64 0, i32 8
  %72 = load i32, ptr %71, align 4, !tbaa !263
  %73 = add i32 %72, 2
  store i32 %73, ptr %71, align 4, !tbaa !263
  store ptr %.lcssa3, ptr %3, align 8, !tbaa !58
  store i64 %.lcssa5, ptr %5, align 8, !tbaa !55
  br label %9

74:                                               ; preds = %63
  %.lcssa4 = phi i64 [ %66, %63 ]
  %.lcssa2 = phi ptr [ %67, %63 ]
  %.lcssa = phi i8 [ %68, %63 ]
  %75 = zext i8 %.lcssa to i32
  %76 = load ptr, ptr %8, align 8, !tbaa !73
  %77 = getelementptr inbounds %struct.jpeg_marker_reader, ptr %76, i64 0, i32 8
  %78 = load i32, ptr %77, align 4, !tbaa !263
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %91, label %80

80:                                               ; preds = %74
  %81 = load ptr, ptr %0, align 8, !tbaa !16
  %82 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %81, i64 0, i32 5
  store i32 112, ptr %82, align 8, !tbaa !25
  %83 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %81, i64 0, i32 6
  store i32 %78, ptr %83, align 4, !tbaa !7
  %84 = load ptr, ptr %0, align 8, !tbaa !16
  %85 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %84, i64 0, i32 6, i32 0, i64 1
  store i32 %75, ptr %85, align 4, !tbaa !7
  %86 = load ptr, ptr %0, align 8, !tbaa !16
  %87 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %86, i64 0, i32 1
  %88 = load ptr, ptr %87, align 8, !tbaa !85
  tail call void %88(ptr noundef nonnull %0, i32 noundef -1) #32
  %89 = load ptr, ptr %8, align 8, !tbaa !73
  %90 = getelementptr inbounds %struct.jpeg_marker_reader, ptr %89, i64 0, i32 8
  store i32 0, ptr %90, align 4, !tbaa !263
  br label %91

91:                                               ; preds = %80, %74
  %92 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 72
  store i32 %75, ptr %92, align 4, !tbaa !267
  store ptr %.lcssa2, ptr %3, align 8, !tbaa !58
  store i64 %.lcssa4, ptr %5, align 8, !tbaa !55
  br label %93

93:                                               ; preds = %91, %56, %35, %13
  %94 = phi i32 [ 1, %91 ], [ 0, %56 ], [ 0, %35 ], [ 0, %13 ]
  ret i32 %94
}

; Function Attrs: nounwind optsize uwtable
define internal void @jinit_marker_reader(ptr noundef %0) #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !50
  %4 = load ptr, ptr %3, align 8, !tbaa !65
  %5 = tail call ptr %4(ptr noundef %0, i32 noundef 0, i64 noundef 176) #32
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 78
  store ptr %5, ptr %6, align 8, !tbaa !73
  store ptr @reset_marker_reader, ptr %5, align 8, !tbaa !295
  %7 = getelementptr inbounds %struct.jpeg_marker_reader, ptr %5, i64 0, i32 1
  store ptr @read_markers, ptr %7, align 8, !tbaa !282
  %8 = getelementptr inbounds %struct.jpeg_marker_reader, ptr %5, i64 0, i32 2
  store ptr @read_restart_marker, ptr %8, align 8, !tbaa !264
  %9 = getelementptr inbounds %struct.jpeg_marker_reader, ptr %5, i64 0, i32 3
  store ptr @skip_variable, ptr %9, align 8, !tbaa !74
  br label %10

10:                                               ; preds = %10, %1
  %11 = phi i64 [ 0, %1 ], [ %14, %10 ]
  %12 = load ptr, ptr %6, align 8, !tbaa !73
  %13 = getelementptr inbounds %struct.jpeg_marker_reader, ptr %12, i64 0, i32 4, i64 %11
  store ptr @skip_variable, ptr %13, align 8, !tbaa !10
  %14 = add nuw nsw i64 %11, 1
  %15 = icmp eq i64 %14, 16
  br i1 %15, label %16, label %10, !llvm.loop !333

16:                                               ; preds = %10
  %17 = load ptr, ptr %6, align 8, !tbaa !73
  %18 = getelementptr inbounds %struct.jpeg_marker_reader, ptr %17, i64 0, i32 4
  store ptr @get_app0, ptr %18, align 8, !tbaa !10
  %19 = load ptr, ptr %6, align 8, !tbaa !73
  %20 = getelementptr inbounds %struct.jpeg_marker_reader, ptr %19, i64 0, i32 4, i64 14
  store ptr @get_app14, ptr %20, align 8, !tbaa !10
  %21 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 43
  store ptr null, ptr %21, align 8, !tbaa !86
  %22 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 34
  store i32 0, ptr %22, align 4, !tbaa !107
  %23 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 72
  store i32 0, ptr %23, align 4, !tbaa !267
  %24 = load ptr, ptr %6, align 8, !tbaa !73
  %25 = getelementptr inbounds %struct.jpeg_marker_reader, ptr %24, i64 0, i32 5
  store i32 0, ptr %25, align 8, !tbaa !334
  %26 = getelementptr inbounds %struct.jpeg_marker_reader, ptr %24, i64 0, i32 6
  store i32 0, ptr %26, align 4, !tbaa !293
  %27 = getelementptr inbounds %struct.jpeg_marker_reader, ptr %24, i64 0, i32 8
  store i32 0, ptr %27, align 4, !tbaa !263
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(write, argmem: readwrite, inaccessiblemem: none) uwtable
define internal void @reset_marker_reader(ptr nocapture noundef %0) #11 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 43
  store ptr null, ptr %2, align 8, !tbaa !86
  %3 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 34
  store i32 0, ptr %3, align 4, !tbaa !107
  %4 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 72
  store i32 0, ptr %4, align 4, !tbaa !267
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 78
  %6 = load ptr, ptr %5, align 8, !tbaa !73
  %7 = getelementptr inbounds %struct.jpeg_marker_reader, ptr %6, i64 0, i32 5
  store i32 0, ptr %7, align 8, !tbaa !334
  %8 = getelementptr inbounds %struct.jpeg_marker_reader, ptr %6, i64 0, i32 6
  store i32 0, ptr %8, align 4, !tbaa !293
  %9 = getelementptr inbounds %struct.jpeg_marker_reader, ptr %6, i64 0, i32 8
  store i32 0, ptr %9, align 4, !tbaa !263
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @read_markers(ptr noundef %0) #6 {
  %2 = alloca [17 x i8], align 16
  %3 = alloca [256 x i8], align 16
  %4 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 72
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 78
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 5
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 49
  %8 = getelementptr inbounds [17 x i8], ptr %2, i64 0, i64 1
  %9 = getelementptr inbounds [17 x i8], ptr %2, i64 0, i64 5
  %10 = getelementptr inbounds [17 x i8], ptr %2, i64 0, i64 9
  %11 = getelementptr inbounds [17 x i8], ptr %2, i64 0, i64 13
  %12 = getelementptr i8, ptr %0, i64 312
  %13 = getelementptr i8, ptr %0, i64 328
  %14 = getelementptr i8, ptr %0, i64 344
  %15 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 9
  %16 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 56
  %17 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 52
  %18 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 53
  %19 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 54
  %20 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 55
  %21 = load i32, ptr %4, align 4, !tbaa !267
  br label %22

22:                                               ; preds = %939, %1
  %23 = phi i32 [ 0, %939 ], [ %21, %1 ]
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %82

25:                                               ; preds = %22
  %26 = load ptr, ptr %5, align 8, !tbaa !73
  %27 = getelementptr inbounds %struct.jpeg_marker_reader, ptr %26, i64 0, i32 5
  %28 = load i32, ptr %27, align 8, !tbaa !334
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %77

30:                                               ; preds = %25
  %31 = load ptr, ptr %6, align 8, !tbaa !54
  %32 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %31, i64 0, i32 1
  %33 = load i64, ptr %32, align 8, !tbaa !55
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %35, label %42

35:                                               ; preds = %30
  %36 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %31, i64 0, i32 3
  %37 = load ptr, ptr %36, align 8, !tbaa !57
  %38 = tail call i32 %37(ptr noundef nonnull %0) #32
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %940, label %40

40:                                               ; preds = %35
  %41 = load i64, ptr %32, align 8, !tbaa !55
  br label %42

42:                                               ; preds = %40, %30
  %43 = phi i64 [ %41, %40 ], [ %33, %30 ]
  %44 = load ptr, ptr %31, align 8, !tbaa !58
  %45 = add i64 %43, -1
  %46 = getelementptr inbounds i8, ptr %44, i64 1
  %47 = load i8, ptr %44, align 1, !tbaa !7
  %48 = zext i8 %47 to i32
  %49 = icmp eq i64 %45, 0
  br i1 %49, label %50, label %58

50:                                               ; preds = %42
  %51 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %31, i64 0, i32 3
  %52 = load ptr, ptr %51, align 8, !tbaa !57
  %53 = tail call i32 %52(ptr noundef nonnull %0) #32
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %940, label %55

55:                                               ; preds = %50
  %56 = load ptr, ptr %31, align 8, !tbaa !58
  %57 = load i64, ptr %32, align 8, !tbaa !55
  br label %58

58:                                               ; preds = %55, %42
  %59 = phi ptr [ %56, %55 ], [ %46, %42 ]
  %60 = phi i64 [ %57, %55 ], [ %45, %42 ]
  %61 = add i64 %60, -1
  %62 = getelementptr inbounds i8, ptr %59, i64 1
  %63 = load i8, ptr %59, align 1, !tbaa !7
  %64 = zext i8 %63 to i32
  %65 = icmp ne i8 %47, -1
  %66 = icmp ne i8 %63, -40
  %67 = select i1 %65, i1 true, i1 %66
  br i1 %67, label %68, label %76

68:                                               ; preds = %58
  %69 = load ptr, ptr %0, align 8, !tbaa !16
  %70 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %69, i64 0, i32 5
  store i32 52, ptr %70, align 8, !tbaa !25
  %71 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %69, i64 0, i32 6
  store i32 %48, ptr %71, align 4, !tbaa !7
  %72 = load ptr, ptr %0, align 8, !tbaa !16
  %73 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %72, i64 0, i32 6, i32 0, i64 1
  store i32 %64, ptr %73, align 4, !tbaa !7
  %74 = load ptr, ptr %0, align 8, !tbaa !16
  %75 = load ptr, ptr %74, align 8, !tbaa !26
  tail call void %75(ptr noundef nonnull %0) #32
  br label %76

76:                                               ; preds = %68, %58
  store i32 %64, ptr %4, align 4, !tbaa !267
  store ptr %62, ptr %31, align 8, !tbaa !58
  store i64 %61, ptr %32, align 8, !tbaa !55
  br label %82

77:                                               ; preds = %25
  %78 = tail call fastcc i32 @next_marker(ptr noundef nonnull %0) #33, !range !247
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %940, label %80

80:                                               ; preds = %77
  %81 = load i32, ptr %4, align 4, !tbaa !267
  br label %82

82:                                               ; preds = %80, %76, %22
  %83 = phi i32 [ %81, %80 ], [ %64, %76 ], [ %23, %22 ]
  switch i32 %83, label %933 [
    i32 216, label %84
    i32 192, label %101
    i32 193, label %101
    i32 194, label %104
    i32 201, label %107
    i32 202, label %110
    i32 195, label %113
    i32 197, label %113
    i32 198, label %113
    i32 199, label %113
    i32 200, label %113
    i32 203, label %113
    i32 205, label %113
    i32 206, label %113
    i32 207, label %113
    i32 218, label %119
    i32 217, label %354
    i32 204, label %359
    i32 196, label %473
    i32 219, label %650
    i32 221, label %826
    i32 224, label %909
    i32 225, label %909
    i32 226, label %909
    i32 227, label %909
    i32 228, label %909
    i32 229, label %909
    i32 230, label %909
    i32 231, label %909
    i32 232, label %909
    i32 233, label %909
    i32 234, label %909
    i32 235, label %909
    i32 236, label %909
    i32 237, label %909
    i32 238, label %909
    i32 239, label %909
    i32 254, label %917
    i32 208, label %923
    i32 209, label %923
    i32 210, label %923
    i32 211, label %923
    i32 212, label %923
    i32 213, label %923
    i32 214, label %923
    i32 215, label %923
    i32 1, label %923
    i32 220, label %930
  ]

84:                                               ; preds = %82
  %85 = load ptr, ptr %0, align 8, !tbaa !16
  %86 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %85, i64 0, i32 5
  store i32 101, ptr %86, align 8, !tbaa !25
  %87 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %85, i64 0, i32 1
  %88 = load ptr, ptr %87, align 8, !tbaa !85
  tail call void %88(ptr noundef nonnull %0, i32 noundef 1) #32
  %89 = load ptr, ptr %5, align 8, !tbaa !73
  %90 = getelementptr inbounds %struct.jpeg_marker_reader, ptr %89, i64 0, i32 5
  %91 = load i32, ptr %90, align 8, !tbaa !334
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %98, label %93

93:                                               ; preds = %84
  %94 = load ptr, ptr %0, align 8, !tbaa !16
  %95 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %94, i64 0, i32 5
  store i32 60, ptr %95, align 8, !tbaa !25
  %96 = load ptr, ptr %94, align 8, !tbaa !26
  tail call void %96(ptr noundef nonnull %0) #32
  %97 = load ptr, ptr %5, align 8, !tbaa !73
  br label %98

98:                                               ; preds = %93, %84
  %99 = phi ptr [ %97, %93 ], [ %89, %84 ]
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(16) %12, i8 0, i64 16, i1 false), !tbaa !7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(16) %13, i8 1, i64 16, i1 false), !tbaa !7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(16) %14, i8 5, i64 16, i1 false), !tbaa !7
  store i32 0, ptr %15, align 4, !tbaa !89
  store i32 0, ptr %16, align 8, !tbaa !335
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(9) %7, i8 0, i64 9, i1 false)
  store i16 1, ptr %17, align 2, !tbaa !336
  store i16 1, ptr %18, align 4, !tbaa !337
  store i32 0, ptr %19, align 8, !tbaa !83
  store i8 0, ptr %20, align 4, !tbaa !84
  %100 = getelementptr inbounds %struct.jpeg_marker_reader, ptr %99, i64 0, i32 5
  store i32 1, ptr %100, align 8, !tbaa !334
  br label %939

101:                                              ; preds = %82, %82
  %102 = tail call fastcc i32 @get_sof(ptr noundef %0, i32 noundef 0, i32 noundef 0) #33, !range !247
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %940, label %939

104:                                              ; preds = %82
  %105 = tail call fastcc i32 @get_sof(ptr noundef %0, i32 noundef 1, i32 noundef 0) #33, !range !247
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %940, label %939

107:                                              ; preds = %82
  %108 = tail call fastcc i32 @get_sof(ptr noundef %0, i32 noundef 0, i32 noundef 1) #33, !range !247
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %940, label %939

110:                                              ; preds = %82
  %111 = tail call fastcc i32 @get_sof(ptr noundef %0, i32 noundef 1, i32 noundef 1) #33, !range !247
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %940, label %939

113:                                              ; preds = %82, %82, %82, %82, %82, %82, %82, %82, %82
  %114 = load ptr, ptr %0, align 8, !tbaa !16
  %115 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %114, i64 0, i32 5
  store i32 59, ptr %115, align 8, !tbaa !25
  %116 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %114, i64 0, i32 6
  store i32 %83, ptr %116, align 4, !tbaa !7
  %117 = load ptr, ptr %0, align 8, !tbaa !16
  %118 = load ptr, ptr %117, align 8, !tbaa !26
  tail call void %118(ptr noundef nonnull %0) #32
  br label %939

119:                                              ; preds = %82
  %120 = load ptr, ptr %6, align 8, !tbaa !54
  %121 = load ptr, ptr %120, align 8, !tbaa !58
  %122 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %120, i64 0, i32 1
  %123 = load i64, ptr %122, align 8, !tbaa !55
  %124 = load ptr, ptr %5, align 8, !tbaa !73
  %125 = getelementptr inbounds %struct.jpeg_marker_reader, ptr %124, i64 0, i32 6
  %126 = load i32, ptr %125, align 4, !tbaa !293
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %128, label %132

128:                                              ; preds = %119
  %129 = load ptr, ptr %0, align 8, !tbaa !16
  %130 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %129, i64 0, i32 5
  store i32 61, ptr %130, align 8, !tbaa !25
  %131 = load ptr, ptr %129, align 8, !tbaa !26
  tail call void %131(ptr noundef nonnull %0) #32
  br label %132

132:                                              ; preds = %128, %119
  %133 = icmp eq i64 %123, 0
  br i1 %133, label %134, label %142

134:                                              ; preds = %132
  %135 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %120, i64 0, i32 3
  %136 = load ptr, ptr %135, align 8, !tbaa !57
  %137 = tail call i32 %136(ptr noundef nonnull %0) #32
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %940, label %139

139:                                              ; preds = %134
  %140 = load ptr, ptr %120, align 8, !tbaa !58
  %141 = load i64, ptr %122, align 8, !tbaa !55
  br label %142

142:                                              ; preds = %139, %132
  %143 = phi ptr [ %140, %139 ], [ %121, %132 ]
  %144 = phi i64 [ %141, %139 ], [ %123, %132 ]
  %145 = add i64 %144, -1
  %146 = getelementptr inbounds i8, ptr %143, i64 1
  %147 = load i8, ptr %143, align 1, !tbaa !7
  %148 = zext i8 %147 to i64
  %149 = shl nuw nsw i64 %148, 8
  %150 = icmp eq i64 %145, 0
  br i1 %150, label %151, label %159

151:                                              ; preds = %142
  %152 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %120, i64 0, i32 3
  %153 = load ptr, ptr %152, align 8, !tbaa !57
  %154 = tail call i32 %153(ptr noundef nonnull %0) #32
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %940, label %156

156:                                              ; preds = %151
  %157 = load ptr, ptr %120, align 8, !tbaa !58
  %158 = load i64, ptr %122, align 8, !tbaa !55
  br label %159

159:                                              ; preds = %156, %142
  %160 = phi ptr [ %157, %156 ], [ %146, %142 ]
  %161 = phi i64 [ %158, %156 ], [ %145, %142 ]
  %162 = add i64 %161, -1
  %163 = getelementptr inbounds i8, ptr %160, i64 1
  %164 = load i8, ptr %160, align 1, !tbaa !7
  %165 = zext i8 %164 to i64
  %166 = or i64 %149, %165
  %167 = icmp eq i64 %162, 0
  br i1 %167, label %168, label %176

168:                                              ; preds = %159
  %169 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %120, i64 0, i32 3
  %170 = load ptr, ptr %169, align 8, !tbaa !57
  %171 = tail call i32 %170(ptr noundef nonnull %0) #32
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %940, label %173

173:                                              ; preds = %168
  %174 = load ptr, ptr %120, align 8, !tbaa !58
  %175 = load i64, ptr %122, align 8, !tbaa !55
  br label %176

176:                                              ; preds = %173, %159
  %177 = phi ptr [ %174, %173 ], [ %163, %159 ]
  %178 = phi i64 [ %175, %173 ], [ %162, %159 ]
  %179 = load i8, ptr %177, align 1, !tbaa !7
  %180 = zext i8 %179 to i32
  %181 = shl nuw nsw i32 %180, 1
  %182 = add nuw nsw i32 %181, 6
  %183 = zext i32 %182 to i64
  %184 = icmp ne i64 %166, %183
  %185 = add i8 %179, -5
  %186 = icmp ult i8 %185, -4
  %187 = or i1 %186, %184
  %188 = load ptr, ptr %0, align 8, !tbaa !16
  br i1 %187, label %189, label %193

189:                                              ; preds = %176
  %190 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %188, i64 0, i32 5
  store i32 9, ptr %190, align 8, !tbaa !25
  %191 = load ptr, ptr %188, align 8, !tbaa !26
  tail call void %191(ptr noundef nonnull %0) #32
  %192 = load ptr, ptr %0, align 8, !tbaa !16
  br label %193

193:                                              ; preds = %189, %176
  %194 = phi ptr [ %192, %189 ], [ %188, %176 ]
  %195 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %194, i64 0, i32 5
  store i32 102, ptr %195, align 8, !tbaa !25
  %196 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %194, i64 0, i32 6
  store i32 %180, ptr %196, align 4, !tbaa !7
  %197 = load ptr, ptr %0, align 8, !tbaa !16
  %198 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %197, i64 0, i32 1
  %199 = load ptr, ptr %198, align 8, !tbaa !85
  tail call void %199(ptr noundef nonnull %0, i32 noundef 1) #32
  %200 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 62
  store i32 %180, ptr %200, align 8, !tbaa !155
  %201 = getelementptr inbounds i8, ptr %177, i64 1
  %202 = add i64 %178, -1
  %203 = icmp eq i8 %179, 0
  br i1 %203, label %280, label %204

204:                                              ; preds = %193
  %205 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %120, i64 0, i32 3
  %206 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 43
  %207 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 8
  %208 = zext i8 %179 to i64
  br label %209

209:                                              ; preds = %260, %204
  %210 = phi i64 [ 0, %204 ], [ %276, %260 ]
  %211 = phi i64 [ %202, %204 ], [ %278, %260 ]
  %212 = phi ptr [ %201, %204 ], [ %277, %260 ]
  %213 = icmp eq i64 %211, 0
  br i1 %213, label %214, label %221

214:                                              ; preds = %209
  %215 = load ptr, ptr %205, align 8, !tbaa !57
  %216 = tail call i32 %215(ptr noundef nonnull %0) #32
  %217 = icmp eq i32 %216, 0
  br i1 %217, label %940, label %218

218:                                              ; preds = %214
  %219 = load ptr, ptr %120, align 8, !tbaa !58
  %220 = load i64, ptr %122, align 8, !tbaa !55
  br label %221

221:                                              ; preds = %218, %209
  %222 = phi ptr [ %219, %218 ], [ %212, %209 ]
  %223 = phi i64 [ %220, %218 ], [ %211, %209 ]
  %224 = add i64 %223, -1
  %225 = getelementptr inbounds i8, ptr %222, i64 1
  %226 = load i8, ptr %222, align 1, !tbaa !7
  %227 = zext i8 %226 to i32
  %228 = icmp eq i64 %224, 0
  br i1 %228, label %229, label %236

229:                                              ; preds = %221
  %230 = load ptr, ptr %205, align 8, !tbaa !57
  %231 = tail call i32 %230(ptr noundef nonnull %0) #32
  %232 = icmp eq i32 %231, 0
  br i1 %232, label %940, label %233

233:                                              ; preds = %229
  %234 = load ptr, ptr %120, align 8, !tbaa !58
  %235 = load i64, ptr %122, align 8, !tbaa !55
  br label %236

236:                                              ; preds = %233, %221
  %237 = phi ptr [ %234, %233 ], [ %225, %221 ]
  %238 = phi i64 [ %235, %233 ], [ %224, %221 ]
  %239 = load i8, ptr %237, align 1, !tbaa !7
  %240 = zext i8 %239 to i32
  %241 = load ptr, ptr %206, align 8, !tbaa !86
  %242 = load i32, ptr %207, align 8, !tbaa !81
  %243 = icmp sgt i32 %242, 0
  br i1 %243, label %244, label %253

244:                                              ; preds = %249, %236
  %245 = phi ptr [ %251, %249 ], [ %241, %236 ]
  %246 = phi i32 [ %250, %249 ], [ 0, %236 ]
  %247 = load i32, ptr %245, align 8, !tbaa !87
  %248 = icmp eq i32 %247, %227
  br i1 %248, label %260, label %249

249:                                              ; preds = %244
  %250 = add nuw nsw i32 %246, 1
  %251 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %245, i64 1
  %252 = icmp eq i32 %250, %242
  br i1 %252, label %253, label %244, !llvm.loop !338

253:                                              ; preds = %249, %236
  %254 = phi ptr [ %241, %236 ], [ %251, %249 ]
  %255 = load ptr, ptr %0, align 8, !tbaa !16
  %256 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %255, i64 0, i32 5
  store i32 5, ptr %256, align 8, !tbaa !25
  %257 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %255, i64 0, i32 6
  store i32 %227, ptr %257, align 4, !tbaa !7
  %258 = load ptr, ptr %0, align 8, !tbaa !16
  %259 = load ptr, ptr %258, align 8, !tbaa !26
  tail call void %259(ptr noundef nonnull %0) #32
  br label %260

260:                                              ; preds = %253, %244
  %261 = phi ptr [ %254, %253 ], [ %245, %244 ]
  %262 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 63, i64 %210
  store ptr %261, ptr %262, align 8, !tbaa !10
  %263 = lshr i32 %240, 4
  %264 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %261, i64 0, i32 5
  store i32 %263, ptr %264, align 4, !tbaa !257
  %265 = and i32 %240, 15
  %266 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %261, i64 0, i32 6
  store i32 %265, ptr %266, align 8, !tbaa !258
  %267 = load ptr, ptr %0, align 8, !tbaa !16
  %268 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %267, i64 0, i32 6
  store i32 %227, ptr %268, align 4, !tbaa !41
  %269 = load i32, ptr %264, align 4, !tbaa !257
  %270 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %267, i64 0, i32 6, i32 0, i64 1
  store i32 %269, ptr %270, align 4, !tbaa !41
  %271 = load i32, ptr %266, align 8, !tbaa !258
  %272 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %267, i64 0, i32 6, i32 0, i64 2
  store i32 %271, ptr %272, align 4, !tbaa !41
  %273 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %267, i64 0, i32 5
  store i32 103, ptr %273, align 8, !tbaa !25
  %274 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %267, i64 0, i32 1
  %275 = load ptr, ptr %274, align 8, !tbaa !85
  tail call void %275(ptr noundef nonnull %0, i32 noundef 1) #32
  %276 = add nuw nsw i64 %210, 1
  %277 = getelementptr inbounds i8, ptr %237, i64 1
  %278 = add i64 %238, -1
  %279 = icmp eq i64 %276, %208
  br i1 %279, label %280, label %209, !llvm.loop !339

280:                                              ; preds = %260, %193
  %281 = phi ptr [ %201, %193 ], [ %277, %260 ]
  %282 = phi i64 [ %202, %193 ], [ %278, %260 ]
  %283 = icmp eq i64 %282, 0
  br i1 %283, label %284, label %292

284:                                              ; preds = %280
  %285 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %120, i64 0, i32 3
  %286 = load ptr, ptr %285, align 8, !tbaa !57
  %287 = tail call i32 %286(ptr noundef nonnull %0) #32
  %288 = icmp eq i32 %287, 0
  br i1 %288, label %940, label %289

289:                                              ; preds = %284
  %290 = load ptr, ptr %120, align 8, !tbaa !58
  %291 = load i64, ptr %122, align 8, !tbaa !55
  br label %292

292:                                              ; preds = %289, %280
  %293 = phi ptr [ %290, %289 ], [ %281, %280 ]
  %294 = phi i64 [ %291, %289 ], [ %282, %280 ]
  %295 = add i64 %294, -1
  %296 = getelementptr inbounds i8, ptr %293, i64 1
  %297 = load i8, ptr %293, align 1, !tbaa !7
  %298 = zext i8 %297 to i32
  %299 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 68
  store i32 %298, ptr %299, align 4, !tbaa !190
  %300 = icmp eq i64 %295, 0
  br i1 %300, label %301, label %309

301:                                              ; preds = %292
  %302 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %120, i64 0, i32 3
  %303 = load ptr, ptr %302, align 8, !tbaa !57
  %304 = tail call i32 %303(ptr noundef nonnull %0) #32
  %305 = icmp eq i32 %304, 0
  br i1 %305, label %940, label %306

306:                                              ; preds = %301
  %307 = load ptr, ptr %120, align 8, !tbaa !58
  %308 = load i64, ptr %122, align 8, !tbaa !55
  br label %309

309:                                              ; preds = %306, %292
  %310 = phi ptr [ %307, %306 ], [ %296, %292 ]
  %311 = phi i64 [ %308, %306 ], [ %295, %292 ]
  %312 = add i64 %311, -1
  %313 = getelementptr inbounds i8, ptr %310, i64 1
  %314 = load i8, ptr %310, align 1, !tbaa !7
  %315 = zext i8 %314 to i32
  %316 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 69
  store i32 %315, ptr %316, align 8, !tbaa !254
  %317 = icmp eq i64 %312, 0
  br i1 %317, label %318, label %326

318:                                              ; preds = %309
  %319 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %120, i64 0, i32 3
  %320 = load ptr, ptr %319, align 8, !tbaa !57
  %321 = tail call i32 %320(ptr noundef nonnull %0) #32
  %322 = icmp eq i32 %321, 0
  br i1 %322, label %940, label %323

323:                                              ; preds = %318
  %324 = load ptr, ptr %120, align 8, !tbaa !58
  %325 = load i64, ptr %122, align 8, !tbaa !55
  br label %326

326:                                              ; preds = %323, %309
  %327 = phi ptr [ %324, %323 ], [ %313, %309 ]
  %328 = phi i64 [ %325, %323 ], [ %312, %309 ]
  %329 = add i64 %328, -1
  %330 = getelementptr inbounds i8, ptr %327, i64 1
  %331 = load i8, ptr %327, align 1, !tbaa !7
  %332 = zext i8 %331 to i32
  %333 = lshr i32 %332, 4
  %334 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 70
  store i32 %333, ptr %334, align 4, !tbaa !255
  %335 = and i32 %332, 15
  %336 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 71
  store i32 %335, ptr %336, align 8, !tbaa !256
  %337 = load ptr, ptr %0, align 8, !tbaa !16
  %338 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %337, i64 0, i32 6
  %339 = load i32, ptr %299, align 4, !tbaa !190
  store i32 %339, ptr %338, align 4, !tbaa !41
  %340 = load i32, ptr %316, align 8, !tbaa !254
  %341 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %337, i64 0, i32 6, i32 0, i64 1
  store i32 %340, ptr %341, align 4, !tbaa !41
  %342 = load i32, ptr %334, align 4, !tbaa !255
  %343 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %337, i64 0, i32 6, i32 0, i64 2
  store i32 %342, ptr %343, align 4, !tbaa !41
  %344 = load i32, ptr %336, align 8, !tbaa !256
  %345 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %337, i64 0, i32 6, i32 0, i64 3
  store i32 %344, ptr %345, align 4, !tbaa !41
  %346 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %337, i64 0, i32 5
  store i32 104, ptr %346, align 8, !tbaa !25
  %347 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %337, i64 0, i32 1
  %348 = load ptr, ptr %347, align 8, !tbaa !85
  tail call void %348(ptr noundef nonnull %0, i32 noundef 1) #32
  %349 = load ptr, ptr %5, align 8, !tbaa !73
  %350 = getelementptr inbounds %struct.jpeg_marker_reader, ptr %349, i64 0, i32 7
  store i32 0, ptr %350, align 8, !tbaa !340
  %351 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 34
  %352 = load i32, ptr %351, align 4, !tbaa !107
  %353 = add nsw i32 %352, 1
  store i32 %353, ptr %351, align 4, !tbaa !107
  store ptr %330, ptr %120, align 8, !tbaa !58
  store i64 %329, ptr %122, align 8, !tbaa !55
  store i32 0, ptr %4, align 4, !tbaa !267
  br label %940

354:                                              ; preds = %82
  %355 = load ptr, ptr %0, align 8, !tbaa !16
  %356 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %355, i64 0, i32 5
  store i32 84, ptr %356, align 8, !tbaa !25
  %357 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %355, i64 0, i32 1
  %358 = load ptr, ptr %357, align 8, !tbaa !85
  tail call void %358(ptr noundef nonnull %0, i32 noundef 1) #32
  store i32 0, ptr %4, align 4, !tbaa !267
  br label %940

359:                                              ; preds = %82
  %360 = load ptr, ptr %6, align 8, !tbaa !54
  %361 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %360, i64 0, i32 1
  %362 = load i64, ptr %361, align 8, !tbaa !55
  %363 = icmp eq i64 %362, 0
  br i1 %363, label %364, label %371

364:                                              ; preds = %359
  %365 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %360, i64 0, i32 3
  %366 = load ptr, ptr %365, align 8, !tbaa !57
  %367 = tail call i32 %366(ptr noundef nonnull %0) #32
  %368 = icmp eq i32 %367, 0
  br i1 %368, label %940, label %369

369:                                              ; preds = %364
  %370 = load i64, ptr %361, align 8, !tbaa !55
  br label %371

371:                                              ; preds = %369, %359
  %372 = phi i64 [ %370, %369 ], [ %362, %359 ]
  %373 = load ptr, ptr %360, align 8, !tbaa !58
  %374 = add i64 %372, -1
  %375 = getelementptr inbounds i8, ptr %373, i64 1
  %376 = load i8, ptr %373, align 1, !tbaa !7
  %377 = zext i8 %376 to i64
  %378 = shl nuw nsw i64 %377, 8
  %379 = icmp eq i64 %374, 0
  br i1 %379, label %380, label %388

380:                                              ; preds = %371
  %381 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %360, i64 0, i32 3
  %382 = load ptr, ptr %381, align 8, !tbaa !57
  %383 = tail call i32 %382(ptr noundef nonnull %0) #32
  %384 = icmp eq i32 %383, 0
  br i1 %384, label %940, label %385

385:                                              ; preds = %380
  %386 = load ptr, ptr %360, align 8, !tbaa !58
  %387 = load i64, ptr %361, align 8, !tbaa !55
  br label %388

388:                                              ; preds = %385, %371
  %389 = phi ptr [ %386, %385 ], [ %375, %371 ]
  %390 = phi i64 [ %387, %385 ], [ %374, %371 ]
  %391 = load i8, ptr %389, align 1, !tbaa !7
  %392 = zext i8 %391 to i64
  %393 = or i64 %378, %392
  %394 = getelementptr inbounds i8, ptr %389, i64 1
  %395 = add i64 %390, -1
  %396 = icmp ugt i64 %393, 2
  br i1 %396, label %397, label %470

397:                                              ; preds = %388
  %398 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %360, i64 0, i32 3
  br label %399

399:                                              ; preds = %466, %397
  %400 = phi i64 [ %395, %397 ], [ %468, %466 ]
  %401 = phi ptr [ %394, %397 ], [ %467, %466 ]
  %402 = phi i64 [ %393, %397 ], [ %403, %466 ]
  %403 = add nsw i64 %402, -2
  %404 = icmp eq i64 %400, 0
  br i1 %404, label %405, label %412

405:                                              ; preds = %399
  %406 = load ptr, ptr %398, align 8, !tbaa !57
  %407 = tail call i32 %406(ptr noundef nonnull %0) #32
  %408 = icmp eq i32 %407, 0
  br i1 %408, label %940, label %409

409:                                              ; preds = %405
  %410 = load ptr, ptr %360, align 8, !tbaa !58
  %411 = load i64, ptr %361, align 8, !tbaa !55
  br label %412

412:                                              ; preds = %409, %399
  %413 = phi ptr [ %410, %409 ], [ %401, %399 ]
  %414 = phi i64 [ %411, %409 ], [ %400, %399 ]
  %415 = add i64 %414, -1
  %416 = getelementptr inbounds i8, ptr %413, i64 1
  %417 = load i8, ptr %413, align 1, !tbaa !7
  %418 = zext i8 %417 to i32
  %419 = icmp eq i64 %415, 0
  br i1 %419, label %420, label %427

420:                                              ; preds = %412
  %421 = load ptr, ptr %398, align 8, !tbaa !57
  %422 = tail call i32 %421(ptr noundef nonnull %0) #32
  %423 = icmp eq i32 %422, 0
  br i1 %423, label %940, label %424

424:                                              ; preds = %420
  %425 = load ptr, ptr %360, align 8, !tbaa !58
  %426 = load i64, ptr %361, align 8, !tbaa !55
  br label %427

427:                                              ; preds = %424, %412
  %428 = phi ptr [ %425, %424 ], [ %416, %412 ]
  %429 = phi i64 [ %426, %424 ], [ %415, %412 ]
  %430 = load i8, ptr %428, align 1, !tbaa !7
  %431 = zext i8 %430 to i32
  %432 = load ptr, ptr %0, align 8, !tbaa !16
  %433 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %432, i64 0, i32 5
  store i32 78, ptr %433, align 8, !tbaa !25
  %434 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %432, i64 0, i32 6
  store i32 %418, ptr %434, align 4, !tbaa !7
  %435 = load ptr, ptr %0, align 8, !tbaa !16
  %436 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %435, i64 0, i32 6, i32 0, i64 1
  store i32 %431, ptr %436, align 4, !tbaa !7
  %437 = load ptr, ptr %0, align 8, !tbaa !16
  %438 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %437, i64 0, i32 1
  %439 = load ptr, ptr %438, align 8, !tbaa !85
  tail call void %439(ptr noundef nonnull %0, i32 noundef 1) #32
  %440 = icmp ugt i8 %417, 31
  br i1 %440, label %441, label %447

441:                                              ; preds = %427
  %442 = load ptr, ptr %0, align 8, !tbaa !16
  %443 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %442, i64 0, i32 5
  store i32 26, ptr %443, align 8, !tbaa !25
  %444 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %442, i64 0, i32 6
  store i32 %418, ptr %444, align 4, !tbaa !7
  %445 = load ptr, ptr %0, align 8, !tbaa !16
  %446 = load ptr, ptr %445, align 8, !tbaa !26
  tail call void %446(ptr noundef nonnull %0) #32
  br label %449

447:                                              ; preds = %427
  %448 = icmp ugt i8 %417, 15
  br i1 %448, label %449, label %453

449:                                              ; preds = %447, %441
  %450 = add nsw i32 %418, -16
  %451 = zext i32 %450 to i64
  %452 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 48, i64 %451
  store i8 %430, ptr %452, align 1, !tbaa !7
  br label %466

453:                                              ; preds = %447
  %454 = and i8 %430, 15
  %455 = zext i8 %417 to i64
  %456 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 46, i64 %455
  store i8 %454, ptr %456, align 1, !tbaa !7
  %457 = lshr i8 %430, 4
  %458 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 47, i64 %455
  store i8 %457, ptr %458, align 1, !tbaa !7
  %459 = icmp ugt i8 %454, %457
  br i1 %459, label %460, label %466

460:                                              ; preds = %453
  %461 = load ptr, ptr %0, align 8, !tbaa !16
  %462 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %461, i64 0, i32 5
  store i32 27, ptr %462, align 8, !tbaa !25
  %463 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %461, i64 0, i32 6
  store i32 %431, ptr %463, align 4, !tbaa !7
  %464 = load ptr, ptr %0, align 8, !tbaa !16
  %465 = load ptr, ptr %464, align 8, !tbaa !26
  tail call void %465(ptr noundef nonnull %0) #32
  br label %466

466:                                              ; preds = %460, %453, %449
  %467 = getelementptr inbounds i8, ptr %428, i64 1
  %468 = add i64 %429, -1
  %469 = icmp ugt i64 %402, 4
  br i1 %469, label %399, label %470, !llvm.loop !341

470:                                              ; preds = %466, %388
  %471 = phi ptr [ %394, %388 ], [ %467, %466 ]
  %472 = phi i64 [ %395, %388 ], [ %468, %466 ]
  store ptr %471, ptr %360, align 8, !tbaa !58
  store i64 %472, ptr %361, align 8, !tbaa !55
  br label %939

473:                                              ; preds = %82
  call void @llvm.lifetime.start.p0(i64 17, ptr nonnull %2) #31
  call void @llvm.lifetime.start.p0(i64 256, ptr nonnull %3) #31
  %474 = load ptr, ptr %6, align 8, !tbaa !54
  %475 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %474, i64 0, i32 1
  %476 = load i64, ptr %475, align 8, !tbaa !55
  %477 = icmp eq i64 %476, 0
  br i1 %477, label %478, label %485

478:                                              ; preds = %473
  %479 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %474, i64 0, i32 3
  %480 = load ptr, ptr %479, align 8, !tbaa !57
  %481 = tail call i32 %480(ptr noundef nonnull %0) #32
  %482 = icmp eq i32 %481, 0
  br i1 %482, label %646, label %483

483:                                              ; preds = %478
  %484 = load i64, ptr %475, align 8, !tbaa !55
  br label %485

485:                                              ; preds = %483, %473
  %486 = phi i64 [ %484, %483 ], [ %476, %473 ]
  %487 = load ptr, ptr %474, align 8, !tbaa !58
  %488 = add i64 %486, -1
  %489 = getelementptr inbounds i8, ptr %487, i64 1
  %490 = load i8, ptr %487, align 1, !tbaa !7
  %491 = zext i8 %490 to i64
  %492 = shl nuw nsw i64 %491, 8
  %493 = icmp eq i64 %488, 0
  br i1 %493, label %494, label %502

494:                                              ; preds = %485
  %495 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %474, i64 0, i32 3
  %496 = load ptr, ptr %495, align 8, !tbaa !57
  %497 = tail call i32 %496(ptr noundef nonnull %0) #32
  %498 = icmp eq i32 %497, 0
  br i1 %498, label %646, label %499

499:                                              ; preds = %494
  %500 = load ptr, ptr %474, align 8, !tbaa !58
  %501 = load i64, ptr %475, align 8, !tbaa !55
  br label %502

502:                                              ; preds = %499, %485
  %503 = phi ptr [ %500, %499 ], [ %489, %485 ]
  %504 = phi i64 [ %501, %499 ], [ %488, %485 ]
  %505 = add i64 %504, -1
  %506 = getelementptr inbounds i8, ptr %503, i64 1
  %507 = load i8, ptr %503, align 1, !tbaa !7
  %508 = zext i8 %507 to i64
  %509 = or i64 %492, %508
  %510 = icmp ugt i64 %509, 2
  br i1 %510, label %511, label %647

511:                                              ; preds = %502
  %512 = add nsw i64 %509, -2
  %513 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %474, i64 0, i32 3
  br label %514

514:                                              ; preds = %641, %511
  %515 = phi i64 [ %512, %511 ], [ %619, %641 ]
  %516 = phi i64 [ %505, %511 ], [ %618, %641 ]
  %517 = phi ptr [ %506, %511 ], [ %617, %641 ]
  %518 = icmp eq i64 %516, 0
  br i1 %518, label %519, label %526

519:                                              ; preds = %514
  %520 = load ptr, ptr %513, align 8, !tbaa !57
  %521 = tail call i32 %520(ptr noundef %0) #32
  %522 = icmp eq i32 %521, 0
  br i1 %522, label %646, label %523

523:                                              ; preds = %519
  %524 = load ptr, ptr %474, align 8, !tbaa !58
  %525 = load i64, ptr %475, align 8, !tbaa !55
  br label %526

526:                                              ; preds = %523, %514
  %527 = phi ptr [ %524, %523 ], [ %517, %514 ]
  %528 = phi i64 [ %525, %523 ], [ %516, %514 ]
  %529 = load i8, ptr %527, align 1, !tbaa !7
  %530 = zext i8 %529 to i32
  %531 = load ptr, ptr %0, align 8, !tbaa !16
  %532 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %531, i64 0, i32 5
  store i32 79, ptr %532, align 8, !tbaa !25
  %533 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %531, i64 0, i32 6
  store i32 %530, ptr %533, align 4, !tbaa !7
  %534 = load ptr, ptr %0, align 8, !tbaa !16
  %535 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %534, i64 0, i32 1
  %536 = load ptr, ptr %535, align 8, !tbaa !85
  tail call void %536(ptr noundef nonnull %0, i32 noundef 1) #32
  store i8 0, ptr %2, align 16, !tbaa !7
  %537 = getelementptr inbounds i8, ptr %527, i64 1
  %538 = add i64 %528, -1
  br label %539

539:                                              ; preds = %552, %526
  %540 = phi i64 [ 1, %526 ], [ %559, %552 ]
  %541 = phi i64 [ %538, %526 ], [ %561, %552 ]
  %542 = phi ptr [ %537, %526 ], [ %560, %552 ]
  %543 = phi i32 [ 0, %526 ], [ %558, %552 ]
  %544 = icmp eq i64 %541, 0
  br i1 %544, label %545, label %552

545:                                              ; preds = %539
  %546 = load ptr, ptr %513, align 8, !tbaa !57
  %547 = tail call i32 %546(ptr noundef nonnull %0) #32
  %548 = icmp eq i32 %547, 0
  br i1 %548, label %646, label %549

549:                                              ; preds = %545
  %550 = load ptr, ptr %474, align 8, !tbaa !58
  %551 = load i64, ptr %475, align 8, !tbaa !55
  br label %552

552:                                              ; preds = %549, %539
  %553 = phi ptr [ %550, %549 ], [ %542, %539 ]
  %554 = phi i64 [ %551, %549 ], [ %541, %539 ]
  %555 = load i8, ptr %553, align 1, !tbaa !7
  %556 = getelementptr inbounds [17 x i8], ptr %2, i64 0, i64 %540
  store i8 %555, ptr %556, align 1, !tbaa !7
  %557 = zext i8 %555 to i32
  %558 = add nuw nsw i32 %543, %557
  %559 = add nuw nsw i64 %540, 1
  %560 = getelementptr inbounds i8, ptr %553, i64 1
  %561 = add i64 %554, -1
  %562 = icmp eq i64 %559, 17
  br i1 %562, label %563, label %539, !llvm.loop !342

563:                                              ; preds = %552
  %.lcssa4 = phi i32 [ %558, %552 ]
  %.lcssa3 = phi ptr [ %560, %552 ]
  %.lcssa2 = phi i64 [ %561, %552 ]
  %564 = add nsw i64 %515, -17
  %565 = load ptr, ptr %0, align 8, !tbaa !16
  %566 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %565, i64 0, i32 6
  %567 = load <4 x i8>, ptr %8, align 1, !tbaa !7
  %568 = zext <4 x i8> %567 to <4 x i32>
  store <4 x i32> %568, ptr %566, align 4, !tbaa !41
  %569 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %565, i64 0, i32 6, i32 0, i64 4
  %570 = load <4 x i8>, ptr %9, align 1, !tbaa !7
  %571 = zext <4 x i8> %570 to <4 x i32>
  store <4 x i32> %571, ptr %569, align 4, !tbaa !41
  %572 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %565, i64 0, i32 5
  store i32 85, ptr %572, align 8, !tbaa !25
  %573 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %565, i64 0, i32 1
  %574 = load ptr, ptr %573, align 8, !tbaa !85
  tail call void %574(ptr noundef nonnull %0, i32 noundef 2) #32
  %575 = load ptr, ptr %0, align 8, !tbaa !16
  %576 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %575, i64 0, i32 6
  %577 = load <4 x i8>, ptr %10, align 1, !tbaa !7
  %578 = zext <4 x i8> %577 to <4 x i32>
  store <4 x i32> %578, ptr %576, align 4, !tbaa !41
  %579 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %575, i64 0, i32 6, i32 0, i64 4
  %580 = load <4 x i8>, ptr %11, align 1, !tbaa !7
  %581 = zext <4 x i8> %580 to <4 x i32>
  store <4 x i32> %581, ptr %579, align 4, !tbaa !41
  %582 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %575, i64 0, i32 5
  store i32 85, ptr %582, align 8, !tbaa !25
  %583 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %575, i64 0, i32 1
  %584 = load ptr, ptr %583, align 8, !tbaa !85
  tail call void %584(ptr noundef nonnull %0, i32 noundef 2) #32
  %585 = icmp ugt i32 %.lcssa4, 256
  %586 = zext i32 %.lcssa4 to i64
  %587 = icmp slt i64 %564, %586
  %588 = select i1 %585, i1 true, i1 %587
  br i1 %588, label %589, label %593

589:                                              ; preds = %563
  %590 = load ptr, ptr %0, align 8, !tbaa !16
  %591 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %590, i64 0, i32 5
  store i32 28, ptr %591, align 8, !tbaa !25
  %592 = load ptr, ptr %590, align 8, !tbaa !26
  tail call void %592(ptr noundef nonnull %0) #32
  br label %593

593:                                              ; preds = %589, %563
  %594 = icmp eq i32 %.lcssa4, 0
  br i1 %594, label %616, label %595

595:                                              ; preds = %607, %593
  %596 = phi i64 [ %614, %607 ], [ 0, %593 ]
  %597 = phi i64 [ %610, %607 ], [ %.lcssa2, %593 ]
  %598 = phi ptr [ %611, %607 ], [ %.lcssa3, %593 ]
  %599 = icmp eq i64 %597, 0
  br i1 %599, label %600, label %607

600:                                              ; preds = %595
  %601 = load ptr, ptr %513, align 8, !tbaa !57
  %602 = tail call i32 %601(ptr noundef nonnull %0) #32
  %603 = icmp eq i32 %602, 0
  br i1 %603, label %646, label %604

604:                                              ; preds = %600
  %605 = load ptr, ptr %474, align 8, !tbaa !58
  %606 = load i64, ptr %475, align 8, !tbaa !55
  br label %607

607:                                              ; preds = %604, %595
  %608 = phi ptr [ %605, %604 ], [ %598, %595 ]
  %609 = phi i64 [ %606, %604 ], [ %597, %595 ]
  %610 = add i64 %609, -1
  %611 = getelementptr inbounds i8, ptr %608, i64 1
  %612 = load i8, ptr %608, align 1, !tbaa !7
  %613 = getelementptr inbounds [256 x i8], ptr %3, i64 0, i64 %596
  store i8 %612, ptr %613, align 1, !tbaa !7
  %614 = add nuw nsw i64 %596, 1
  %615 = icmp eq i64 %614, %586
  br i1 %615, label %616, label %595, !llvm.loop !343

616:                                              ; preds = %607, %593
  %617 = phi ptr [ %.lcssa3, %593 ], [ %611, %607 ]
  %618 = phi i64 [ %.lcssa2, %593 ], [ %610, %607 ]
  %619 = sub nsw i64 %564, %586
  %620 = and i32 %530, 16
  %621 = icmp eq i32 %620, 0
  %622 = add nsw i32 %530, -16
  %623 = sext i32 %622 to i64
  %624 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 41, i64 %623
  %625 = zext i8 %529 to i64
  %626 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 40, i64 %625
  %627 = select i1 %621, i32 %530, i32 %622
  %628 = select i1 %621, ptr %626, ptr %624
  %629 = icmp ugt i32 %627, 3
  br i1 %629, label %630, label %636

630:                                              ; preds = %616
  %631 = load ptr, ptr %0, align 8, !tbaa !16
  %632 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %631, i64 0, i32 5
  store i32 29, ptr %632, align 8, !tbaa !25
  %633 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %631, i64 0, i32 6
  store i32 %627, ptr %633, align 4, !tbaa !7
  %634 = load ptr, ptr %0, align 8, !tbaa !16
  %635 = load ptr, ptr %634, align 8, !tbaa !26
  tail call void %635(ptr noundef nonnull %0) #32
  br label %636

636:                                              ; preds = %630, %616
  %637 = load ptr, ptr %628, align 8, !tbaa !10
  %638 = icmp eq ptr %637, null
  br i1 %638, label %639, label %641

639:                                              ; preds = %636
  %640 = tail call ptr @jpeg_alloc_huff_table(ptr noundef nonnull %0) #32
  store ptr %640, ptr %628, align 8, !tbaa !10
  br label %641

641:                                              ; preds = %639, %636
  %642 = phi ptr [ %640, %639 ], [ %637, %636 ]
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(17) %642, ptr noundef nonnull align 16 dereferenceable(17) %2, i64 17, i1 false)
  %643 = load ptr, ptr %628, align 8, !tbaa !10
  %644 = getelementptr inbounds %struct.JHUFF_TBL.59, ptr %643, i64 0, i32 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(256) %644, ptr noundef nonnull align 16 dereferenceable(256) %3, i64 256, i1 false)
  %645 = icmp sgt i64 %619, 0
  br i1 %645, label %514, label %647, !llvm.loop !344

646:                                              ; preds = %600, %545, %519, %494, %478
  call void @llvm.lifetime.end.p0(i64 256, ptr nonnull %3) #31
  call void @llvm.lifetime.end.p0(i64 17, ptr nonnull %2) #31
  br label %940

647:                                              ; preds = %641, %502
  %648 = phi ptr [ %506, %502 ], [ %617, %641 ]
  %649 = phi i64 [ %505, %502 ], [ %618, %641 ]
  store ptr %648, ptr %474, align 8, !tbaa !58
  store i64 %649, ptr %475, align 8, !tbaa !55
  call void @llvm.lifetime.end.p0(i64 256, ptr nonnull %3) #31
  call void @llvm.lifetime.end.p0(i64 17, ptr nonnull %2) #31
  br label %939

650:                                              ; preds = %82
  %651 = load ptr, ptr %6, align 8, !tbaa !54
  %652 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %651, i64 0, i32 1
  %653 = load i64, ptr %652, align 8, !tbaa !55
  %654 = icmp eq i64 %653, 0
  br i1 %654, label %655, label %662

655:                                              ; preds = %650
  %656 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %651, i64 0, i32 3
  %657 = load ptr, ptr %656, align 8, !tbaa !57
  %658 = tail call i32 %657(ptr noundef nonnull %0) #32
  %659 = icmp eq i32 %658, 0
  br i1 %659, label %940, label %660

660:                                              ; preds = %655
  %661 = load i64, ptr %652, align 8, !tbaa !55
  br label %662

662:                                              ; preds = %660, %650
  %663 = phi i64 [ %661, %660 ], [ %653, %650 ]
  %664 = load ptr, ptr %651, align 8, !tbaa !58
  %665 = add i64 %663, -1
  %666 = getelementptr inbounds i8, ptr %664, i64 1
  %667 = load i8, ptr %664, align 1, !tbaa !7
  %668 = zext i8 %667 to i64
  %669 = shl nuw nsw i64 %668, 8
  %670 = icmp eq i64 %665, 0
  br i1 %670, label %671, label %679

671:                                              ; preds = %662
  %672 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %651, i64 0, i32 3
  %673 = load ptr, ptr %672, align 8, !tbaa !57
  %674 = tail call i32 %673(ptr noundef nonnull %0) #32
  %675 = icmp eq i32 %674, 0
  br i1 %675, label %940, label %676

676:                                              ; preds = %671
  %677 = load ptr, ptr %651, align 8, !tbaa !58
  %678 = load i64, ptr %652, align 8, !tbaa !55
  br label %679

679:                                              ; preds = %676, %662
  %680 = phi ptr [ %677, %676 ], [ %666, %662 ]
  %681 = phi i64 [ %678, %676 ], [ %665, %662 ]
  %682 = add i64 %681, -1
  %683 = getelementptr inbounds i8, ptr %680, i64 1
  %684 = load i8, ptr %680, align 1, !tbaa !7
  %685 = zext i8 %684 to i64
  %686 = or i64 %669, %685
  %687 = icmp ugt i64 %686, 2
  br i1 %687, label %688, label %823

688:                                              ; preds = %679
  %689 = add nsw i64 %686, -2
  %690 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %651, i64 0, i32 3
  br label %691

691:                                              ; preds = %819, %688
  %692 = phi i64 [ %682, %688 ], [ %.lcssa, %819 ]
  %693 = phi ptr [ %683, %688 ], [ %.lcssa1, %819 ]
  %694 = phi i64 [ %689, %688 ], [ %821, %819 ]
  %695 = icmp eq i64 %692, 0
  br i1 %695, label %696, label %703

696:                                              ; preds = %691
  %697 = load ptr, ptr %690, align 8, !tbaa !57
  %698 = tail call i32 %697(ptr noundef nonnull %0) #32
  %699 = icmp eq i32 %698, 0
  br i1 %699, label %940, label %700

700:                                              ; preds = %696
  %701 = load ptr, ptr %651, align 8, !tbaa !58
  %702 = load i64, ptr %652, align 8, !tbaa !55
  br label %703

703:                                              ; preds = %700, %691
  %704 = phi ptr [ %701, %700 ], [ %693, %691 ]
  %705 = phi i64 [ %702, %700 ], [ %692, %691 ]
  %706 = load i8, ptr %704, align 1, !tbaa !7
  %707 = zext i8 %706 to i32
  %708 = lshr i32 %707, 4
  %709 = and i32 %707, 15
  %710 = load ptr, ptr %0, align 8, !tbaa !16
  %711 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %710, i64 0, i32 5
  store i32 80, ptr %711, align 8, !tbaa !25
  %712 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %710, i64 0, i32 6
  store i32 %709, ptr %712, align 4, !tbaa !7
  %713 = load ptr, ptr %0, align 8, !tbaa !16
  %714 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %713, i64 0, i32 6, i32 0, i64 1
  store i32 %708, ptr %714, align 4, !tbaa !7
  %715 = load ptr, ptr %0, align 8, !tbaa !16
  %716 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %715, i64 0, i32 1
  %717 = load ptr, ptr %716, align 8, !tbaa !85
  tail call void %717(ptr noundef nonnull %0, i32 noundef 1) #32
  %718 = icmp ugt i32 %709, 3
  br i1 %718, label %719, label %725

719:                                              ; preds = %703
  %720 = load ptr, ptr %0, align 8, !tbaa !16
  %721 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %720, i64 0, i32 5
  store i32 30, ptr %721, align 8, !tbaa !25
  %722 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %720, i64 0, i32 6
  store i32 %709, ptr %722, align 4, !tbaa !7
  %723 = load ptr, ptr %0, align 8, !tbaa !16
  %724 = load ptr, ptr %723, align 8, !tbaa !26
  tail call void %724(ptr noundef nonnull %0) #32
  br label %725

725:                                              ; preds = %719, %703
  %726 = zext i32 %709 to i64
  %727 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 39, i64 %726
  %728 = load ptr, ptr %727, align 8, !tbaa !10
  %729 = icmp eq ptr %728, null
  br i1 %729, label %730, label %732

730:                                              ; preds = %725
  %731 = tail call ptr @jpeg_alloc_quant_table(ptr noundef nonnull %0) #32
  store ptr %731, ptr %727, align 8, !tbaa !10
  br label %732

732:                                              ; preds = %730, %725
  %733 = phi ptr [ %731, %730 ], [ %728, %725 ]
  %734 = icmp ult i8 %706, 16
  %735 = getelementptr inbounds i8, ptr %704, i64 1
  %736 = add i64 %705, -1
  br label %737

737:                                              ; preds = %785, %732
  %738 = phi i64 [ 0, %732 ], [ %793, %785 ]
  %739 = phi i64 [ %736, %732 ], [ %795, %785 ]
  %740 = phi ptr [ %735, %732 ], [ %794, %785 ]
  %741 = icmp eq i64 %739, 0
  br i1 %734, label %772, label %742

742:                                              ; preds = %737
  br i1 %741, label %743, label %750

743:                                              ; preds = %742
  %744 = load ptr, ptr %690, align 8, !tbaa !57
  %745 = tail call i32 %744(ptr noundef nonnull %0) #32
  %746 = icmp eq i32 %745, 0
  br i1 %746, label %940, label %747

747:                                              ; preds = %743
  %748 = load ptr, ptr %651, align 8, !tbaa !58
  %749 = load i64, ptr %652, align 8, !tbaa !55
  br label %750

750:                                              ; preds = %747, %742
  %751 = phi ptr [ %748, %747 ], [ %740, %742 ]
  %752 = phi i64 [ %749, %747 ], [ %739, %742 ]
  %753 = add i64 %752, -1
  %754 = getelementptr inbounds i8, ptr %751, i64 1
  %755 = load i8, ptr %751, align 1, !tbaa !7
  %756 = zext i8 %755 to i16
  %757 = shl nuw i16 %756, 8
  %758 = icmp eq i64 %753, 0
  br i1 %758, label %759, label %766

759:                                              ; preds = %750
  %760 = load ptr, ptr %690, align 8, !tbaa !57
  %761 = tail call i32 %760(ptr noundef nonnull %0) #32
  %762 = icmp eq i32 %761, 0
  br i1 %762, label %940, label %763

763:                                              ; preds = %759
  %764 = load ptr, ptr %651, align 8, !tbaa !58
  %765 = load i64, ptr %652, align 8, !tbaa !55
  br label %766

766:                                              ; preds = %763, %750
  %767 = phi ptr [ %764, %763 ], [ %754, %750 ]
  %768 = phi i64 [ %765, %763 ], [ %753, %750 ]
  %769 = load i8, ptr %767, align 1, !tbaa !7
  %770 = zext i8 %769 to i16
  %771 = or i16 %757, %770
  br label %785

772:                                              ; preds = %737
  br i1 %741, label %773, label %780

773:                                              ; preds = %772
  %774 = load ptr, ptr %690, align 8, !tbaa !57
  %775 = tail call i32 %774(ptr noundef nonnull %0) #32
  %776 = icmp eq i32 %775, 0
  br i1 %776, label %940, label %777

777:                                              ; preds = %773
  %778 = load ptr, ptr %651, align 8, !tbaa !58
  %779 = load i64, ptr %652, align 8, !tbaa !55
  br label %780

780:                                              ; preds = %777, %772
  %781 = phi ptr [ %778, %777 ], [ %740, %772 ]
  %782 = phi i64 [ %779, %777 ], [ %739, %772 ]
  %783 = load i8, ptr %781, align 1, !tbaa !7
  %784 = zext i8 %783 to i16
  br label %785

785:                                              ; preds = %780, %766
  %786 = phi i16 [ %771, %766 ], [ %784, %780 ]
  %787 = phi ptr [ %767, %766 ], [ %781, %780 ]
  %788 = phi i64 [ %768, %766 ], [ %782, %780 ]
  %789 = getelementptr inbounds [0 x i32], ptr @jpeg_natural_order, i64 0, i64 %738
  %790 = load i32, ptr %789, align 4, !tbaa !41
  %791 = sext i32 %790 to i64
  %792 = getelementptr inbounds [64 x i16], ptr %733, i64 0, i64 %791
  store i16 %786, ptr %792, align 2, !tbaa !12
  %793 = add nuw nsw i64 %738, 1
  %794 = getelementptr inbounds i8, ptr %787, i64 1
  %795 = add i64 %788, -1
  %796 = icmp eq i64 %793, 64
  br i1 %796, label %797, label %737, !llvm.loop !345

797:                                              ; preds = %785
  %.lcssa1 = phi ptr [ %794, %785 ]
  %.lcssa = phi i64 [ %795, %785 ]
  %798 = load ptr, ptr %0, align 8, !tbaa !16
  %799 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %798, i64 0, i32 7
  %800 = load i32, ptr %799, align 4, !tbaa !38
  %801 = icmp sgt i32 %800, 1
  br i1 %801, label %802, label %819

802:                                              ; preds = %802, %797
  %803 = phi i64 [ %817, %802 ], [ 0, %797 ]
  %804 = load ptr, ptr %0, align 8, !tbaa !16
  %805 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %804, i64 0, i32 6
  %806 = getelementptr inbounds [64 x i16], ptr %733, i64 0, i64 %803
  %807 = load <4 x i16>, ptr %806, align 2, !tbaa !12
  %808 = zext <4 x i16> %807 to <4 x i32>
  store <4 x i32> %808, ptr %805, align 4, !tbaa !41
  %809 = or i64 %803, 4
  %810 = getelementptr inbounds [64 x i16], ptr %733, i64 0, i64 %809
  %811 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %804, i64 0, i32 6, i32 0, i64 4
  %812 = load <4 x i16>, ptr %810, align 2, !tbaa !12
  %813 = zext <4 x i16> %812 to <4 x i32>
  store <4 x i32> %813, ptr %811, align 4, !tbaa !41
  %814 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %804, i64 0, i32 5
  store i32 92, ptr %814, align 8, !tbaa !25
  %815 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %804, i64 0, i32 1
  %816 = load ptr, ptr %815, align 8, !tbaa !85
  tail call void %816(ptr noundef nonnull %0, i32 noundef 2) #32
  %817 = add nuw nsw i64 %803, 8
  %818 = icmp ult i64 %803, 56
  br i1 %818, label %802, label %819, !llvm.loop !346

819:                                              ; preds = %802, %797
  %820 = select i1 %734, i64 -65, i64 -129
  %821 = add nsw i64 %820, %694
  %822 = icmp sgt i64 %821, 0
  br i1 %822, label %691, label %823, !llvm.loop !347

823:                                              ; preds = %819, %679
  %824 = phi ptr [ %683, %679 ], [ %.lcssa1, %819 ]
  %825 = phi i64 [ %682, %679 ], [ %.lcssa, %819 ]
  store ptr %824, ptr %651, align 8, !tbaa !58
  store i64 %825, ptr %652, align 8, !tbaa !55
  br label %939

826:                                              ; preds = %82
  %827 = load ptr, ptr %6, align 8, !tbaa !54
  %828 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %827, i64 0, i32 1
  %829 = load i64, ptr %828, align 8, !tbaa !55
  %830 = icmp eq i64 %829, 0
  br i1 %830, label %831, label %838

831:                                              ; preds = %826
  %832 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %827, i64 0, i32 3
  %833 = load ptr, ptr %832, align 8, !tbaa !57
  %834 = tail call i32 %833(ptr noundef nonnull %0) #32
  %835 = icmp eq i32 %834, 0
  br i1 %835, label %940, label %836

836:                                              ; preds = %831
  %837 = load i64, ptr %828, align 8, !tbaa !55
  br label %838

838:                                              ; preds = %836, %826
  %839 = phi i64 [ %837, %836 ], [ %829, %826 ]
  %840 = load ptr, ptr %827, align 8, !tbaa !58
  %841 = add i64 %839, -1
  %842 = getelementptr inbounds i8, ptr %840, i64 1
  %843 = load i8, ptr %840, align 1, !tbaa !7
  %844 = zext i8 %843 to i64
  %845 = shl nuw nsw i64 %844, 8
  %846 = icmp eq i64 %841, 0
  br i1 %846, label %847, label %855

847:                                              ; preds = %838
  %848 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %827, i64 0, i32 3
  %849 = load ptr, ptr %848, align 8, !tbaa !57
  %850 = tail call i32 %849(ptr noundef nonnull %0) #32
  %851 = icmp eq i32 %850, 0
  br i1 %851, label %940, label %852

852:                                              ; preds = %847
  %853 = load ptr, ptr %827, align 8, !tbaa !58
  %854 = load i64, ptr %828, align 8, !tbaa !55
  br label %855

855:                                              ; preds = %852, %838
  %856 = phi ptr [ %853, %852 ], [ %842, %838 ]
  %857 = phi i64 [ %854, %852 ], [ %841, %838 ]
  %858 = add i64 %857, -1
  %859 = getelementptr inbounds i8, ptr %856, i64 1
  %860 = load i8, ptr %856, align 1, !tbaa !7
  %861 = zext i8 %860 to i64
  %862 = or i64 %845, %861
  %863 = icmp eq i64 %862, 4
  br i1 %863, label %868, label %864

864:                                              ; preds = %855
  %865 = load ptr, ptr %0, align 8, !tbaa !16
  %866 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %865, i64 0, i32 5
  store i32 9, ptr %866, align 8, !tbaa !25
  %867 = load ptr, ptr %865, align 8, !tbaa !26
  tail call void %867(ptr noundef nonnull %0) #32
  br label %868

868:                                              ; preds = %864, %855
  %869 = icmp eq i64 %858, 0
  br i1 %869, label %870, label %878

870:                                              ; preds = %868
  %871 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %827, i64 0, i32 3
  %872 = load ptr, ptr %871, align 8, !tbaa !57
  %873 = tail call i32 %872(ptr noundef nonnull %0) #32
  %874 = icmp eq i32 %873, 0
  br i1 %874, label %940, label %875

875:                                              ; preds = %870
  %876 = load ptr, ptr %827, align 8, !tbaa !58
  %877 = load i64, ptr %828, align 8, !tbaa !55
  br label %878

878:                                              ; preds = %875, %868
  %879 = phi ptr [ %876, %875 ], [ %859, %868 ]
  %880 = phi i64 [ %877, %875 ], [ %858, %868 ]
  %881 = add i64 %880, -1
  %882 = getelementptr inbounds i8, ptr %879, i64 1
  %883 = load i8, ptr %879, align 1, !tbaa !7
  %884 = zext i8 %883 to i32
  %885 = shl nuw nsw i32 %884, 8
  %886 = icmp eq i64 %881, 0
  br i1 %886, label %887, label %895

887:                                              ; preds = %878
  %888 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %827, i64 0, i32 3
  %889 = load ptr, ptr %888, align 8, !tbaa !57
  %890 = tail call i32 %889(ptr noundef nonnull %0) #32
  %891 = icmp eq i32 %890, 0
  br i1 %891, label %940, label %892

892:                                              ; preds = %887
  %893 = load ptr, ptr %827, align 8, !tbaa !58
  %894 = load i64, ptr %828, align 8, !tbaa !55
  br label %895

895:                                              ; preds = %892, %878
  %896 = phi ptr [ %893, %892 ], [ %882, %878 ]
  %897 = phi i64 [ %894, %892 ], [ %881, %878 ]
  %898 = add i64 %897, -1
  %899 = getelementptr inbounds i8, ptr %896, i64 1
  %900 = load i8, ptr %896, align 1, !tbaa !7
  %901 = zext i8 %900 to i32
  %902 = or i32 %885, %901
  %903 = load ptr, ptr %0, align 8, !tbaa !16
  %904 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %903, i64 0, i32 5
  store i32 81, ptr %904, align 8, !tbaa !25
  %905 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %903, i64 0, i32 6
  store i32 %902, ptr %905, align 4, !tbaa !7
  %906 = load ptr, ptr %0, align 8, !tbaa !16
  %907 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %906, i64 0, i32 1
  %908 = load ptr, ptr %907, align 8, !tbaa !85
  tail call void %908(ptr noundef nonnull %0, i32 noundef 1) #32
  store i32 %902, ptr %7, align 8, !tbaa !260
  store ptr %899, ptr %827, align 8, !tbaa !58
  store i64 %898, ptr %828, align 8, !tbaa !55
  br label %939

909:                                              ; preds = %82, %82, %82, %82, %82, %82, %82, %82, %82, %82, %82, %82, %82, %82, %82, %82
  %910 = load ptr, ptr %5, align 8, !tbaa !73
  %911 = add nsw i32 %83, -224
  %912 = zext i32 %911 to i64
  %913 = getelementptr inbounds %struct.jpeg_marker_reader, ptr %910, i64 0, i32 4, i64 %912
  %914 = load ptr, ptr %913, align 8, !tbaa !10
  %915 = tail call i32 %914(ptr noundef %0) #32
  %916 = icmp eq i32 %915, 0
  br i1 %916, label %940, label %939

917:                                              ; preds = %82
  %918 = load ptr, ptr %5, align 8, !tbaa !73
  %919 = getelementptr inbounds %struct.jpeg_marker_reader, ptr %918, i64 0, i32 3
  %920 = load ptr, ptr %919, align 8, !tbaa !74
  %921 = tail call i32 %920(ptr noundef %0) #32
  %922 = icmp eq i32 %921, 0
  br i1 %922, label %940, label %939

923:                                              ; preds = %82, %82, %82, %82, %82, %82, %82, %82, %82
  %924 = load ptr, ptr %0, align 8, !tbaa !16
  %925 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %924, i64 0, i32 5
  store i32 91, ptr %925, align 8, !tbaa !25
  %926 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %924, i64 0, i32 6
  store i32 %83, ptr %926, align 4, !tbaa !7
  %927 = load ptr, ptr %0, align 8, !tbaa !16
  %928 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %927, i64 0, i32 1
  %929 = load ptr, ptr %928, align 8, !tbaa !85
  tail call void %929(ptr noundef nonnull %0, i32 noundef 1) #32
  br label %939

930:                                              ; preds = %82
  %931 = tail call i32 @skip_variable(ptr noundef %0) #33, !range !247
  %932 = icmp eq i32 %931, 0
  br i1 %932, label %940, label %939

933:                                              ; preds = %82
  %934 = load ptr, ptr %0, align 8, !tbaa !16
  %935 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %934, i64 0, i32 5
  store i32 67, ptr %935, align 8, !tbaa !25
  %936 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %934, i64 0, i32 6
  store i32 %83, ptr %936, align 4, !tbaa !7
  %937 = load ptr, ptr %0, align 8, !tbaa !16
  %938 = load ptr, ptr %937, align 8, !tbaa !26
  tail call void %938(ptr noundef nonnull %0) #32
  br label %939

939:                                              ; preds = %933, %930, %923, %917, %909, %895, %823, %647, %470, %113, %110, %107, %104, %101, %98
  store i32 0, ptr %4, align 4, !tbaa !267
  br label %22

940:                                              ; preds = %930, %917, %909, %887, %870, %847, %831, %773, %759, %743, %696, %671, %655, %646, %420, %405, %380, %364, %354, %326, %318, %301, %284, %229, %214, %168, %151, %134, %110, %107, %104, %101, %77, %50, %35
  %941 = phi i32 [ 2, %354 ], [ 1, %326 ], [ 0, %646 ], [ 0, %134 ], [ 0, %151 ], [ 0, %168 ], [ 0, %284 ], [ 0, %301 ], [ 0, %318 ], [ 0, %214 ], [ 0, %229 ], [ 0, %743 ], [ 0, %759 ], [ 0, %773 ], [ 0, %405 ], [ 0, %420 ], [ 0, %696 ], [ 0, %77 ], [ 0, %101 ], [ 0, %104 ], [ 0, %107 ], [ 0, %110 ], [ 0, %909 ], [ 0, %917 ], [ 0, %930 ], [ 0, %35 ], [ 0, %50 ], [ 0, %364 ], [ 0, %380 ], [ 0, %655 ], [ 0, %671 ], [ 0, %831 ], [ 0, %847 ], [ 0, %870 ], [ 0, %887 ]
  ret i32 %941
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @read_restart_marker(ptr noundef %0) #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 72
  %3 = load i32, ptr %2, align 4, !tbaa !267
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %10

5:                                                ; preds = %1
  %6 = tail call fastcc i32 @next_marker(ptr noundef nonnull %0) #33, !range !247
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %38, label %8

8:                                                ; preds = %5
  %9 = load i32, ptr %2, align 4, !tbaa !267
  br label %10

10:                                               ; preds = %8, %1
  %11 = phi i32 [ %9, %8 ], [ %3, %1 ]
  %12 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 78
  %13 = load ptr, ptr %12, align 8, !tbaa !73
  %14 = getelementptr inbounds %struct.jpeg_marker_reader, ptr %13, i64 0, i32 7
  %15 = load i32, ptr %14, align 8, !tbaa !340
  %16 = add nsw i32 %15, 208
  %17 = icmp eq i32 %11, %16
  br i1 %17, label %18, label %25

18:                                               ; preds = %10
  %19 = load ptr, ptr %0, align 8, !tbaa !16
  %20 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %19, i64 0, i32 5
  store i32 97, ptr %20, align 8, !tbaa !25
  %21 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %19, i64 0, i32 6
  store i32 %15, ptr %21, align 4, !tbaa !7
  %22 = load ptr, ptr %0, align 8, !tbaa !16
  %23 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %22, i64 0, i32 1
  %24 = load ptr, ptr %23, align 8, !tbaa !85
  tail call void %24(ptr noundef nonnull %0, i32 noundef 3) #32
  store i32 0, ptr %2, align 4, !tbaa !267
  br label %32

25:                                               ; preds = %10
  %26 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 5
  %27 = load ptr, ptr %26, align 8, !tbaa !54
  %28 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %27, i64 0, i32 5
  %29 = load ptr, ptr %28, align 8, !tbaa !348
  %30 = tail call i32 %29(ptr noundef nonnull %0, i32 noundef %15) #32
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %38, label %32

32:                                               ; preds = %25, %18
  %33 = load ptr, ptr %12, align 8, !tbaa !73
  %34 = getelementptr inbounds %struct.jpeg_marker_reader, ptr %33, i64 0, i32 7
  %35 = load i32, ptr %34, align 8, !tbaa !340
  %36 = add nsw i32 %35, 1
  %37 = and i32 %36, 7
  store i32 %37, ptr %34, align 8, !tbaa !340
  br label %38

38:                                               ; preds = %32, %25, %5
  %39 = phi i32 [ 1, %32 ], [ 0, %5 ], [ 0, %25 ]
  ret i32 %39
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @skip_variable(ptr noundef %0) #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 5
  %3 = load ptr, ptr %2, align 8, !tbaa !54
  %4 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %3, i64 0, i32 1
  %5 = load i64, ptr %4, align 8, !tbaa !55
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %14

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %3, i64 0, i32 3
  %9 = load ptr, ptr %8, align 8, !tbaa !57
  %10 = tail call i32 %9(ptr noundef nonnull %0) #32
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %54, label %12

12:                                               ; preds = %7
  %13 = load i64, ptr %4, align 8, !tbaa !55
  br label %14

14:                                               ; preds = %12, %1
  %15 = phi i64 [ %13, %12 ], [ %5, %1 ]
  %16 = load ptr, ptr %3, align 8, !tbaa !58
  %17 = add i64 %15, -1
  %18 = getelementptr inbounds i8, ptr %16, i64 1
  %19 = load i8, ptr %16, align 1, !tbaa !7
  %20 = zext i8 %19 to i64
  %21 = shl nuw nsw i64 %20, 8
  %22 = icmp eq i64 %17, 0
  br i1 %22, label %23, label %31

23:                                               ; preds = %14
  %24 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %3, i64 0, i32 3
  %25 = load ptr, ptr %24, align 8, !tbaa !57
  %26 = tail call i32 %25(ptr noundef nonnull %0) #32
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %54, label %28

28:                                               ; preds = %23
  %29 = load ptr, ptr %3, align 8, !tbaa !58
  %30 = load i64, ptr %4, align 8, !tbaa !55
  br label %31

31:                                               ; preds = %28, %14
  %32 = phi ptr [ %29, %28 ], [ %18, %14 ]
  %33 = phi i64 [ %30, %28 ], [ %17, %14 ]
  %34 = add i64 %33, -1
  %35 = getelementptr inbounds i8, ptr %32, i64 1
  %36 = load i8, ptr %32, align 1, !tbaa !7
  %37 = zext i8 %36 to i64
  %38 = or i64 %21, %37
  %39 = load ptr, ptr %0, align 8, !tbaa !16
  %40 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %39, i64 0, i32 5
  store i32 90, ptr %40, align 8, !tbaa !25
  %41 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 72
  %42 = load i32, ptr %41, align 4, !tbaa !267
  %43 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %39, i64 0, i32 6
  store i32 %42, ptr %43, align 4, !tbaa !7
  %44 = trunc i64 %38 to i32
  %45 = load ptr, ptr %0, align 8, !tbaa !16
  %46 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %45, i64 0, i32 6, i32 0, i64 1
  store i32 %44, ptr %46, align 4, !tbaa !7
  %47 = load ptr, ptr %0, align 8, !tbaa !16
  %48 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %47, i64 0, i32 1
  %49 = load ptr, ptr %48, align 8, !tbaa !85
  tail call void %49(ptr noundef nonnull %0, i32 noundef 1) #32
  store ptr %35, ptr %3, align 8, !tbaa !58
  store i64 %34, ptr %4, align 8, !tbaa !55
  %50 = load ptr, ptr %2, align 8, !tbaa !54
  %51 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %50, i64 0, i32 4
  %52 = load ptr, ptr %51, align 8, !tbaa !349
  %53 = add nsw i64 %38, -2
  tail call void %52(ptr noundef nonnull %0, i64 noundef %53) #32
  br label %54

54:                                               ; preds = %31, %23, %7
  %55 = phi i32 [ 1, %31 ], [ 0, %7 ], [ 0, %23 ]
  ret i32 %55
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @get_app0(ptr noundef %0) #6 {
  %2 = alloca [14 x i8], align 4
  call void @llvm.lifetime.start.p0(i64 14, ptr nonnull %2) #31
  %3 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 5
  %4 = load ptr, ptr %3, align 8, !tbaa !54
  %5 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %4, i64 0, i32 1
  %6 = load i64, ptr %5, align 8, !tbaa !55
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %8, label %15

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %4, i64 0, i32 3
  %10 = load ptr, ptr %9, align 8, !tbaa !57
  %11 = tail call i32 %10(ptr noundef nonnull %0) #32
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %191, label %13

13:                                               ; preds = %8
  %14 = load i64, ptr %5, align 8, !tbaa !55
  br label %15

15:                                               ; preds = %13, %1
  %16 = phi i64 [ %14, %13 ], [ %6, %1 ]
  %17 = load ptr, ptr %4, align 8, !tbaa !58
  %18 = add i64 %16, -1
  %19 = getelementptr inbounds i8, ptr %17, i64 1
  %20 = load i8, ptr %17, align 1, !tbaa !7
  %21 = zext i8 %20 to i64
  %22 = shl nuw nsw i64 %21, 8
  %23 = icmp eq i64 %18, 0
  br i1 %23, label %24, label %32

24:                                               ; preds = %15
  %25 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %4, i64 0, i32 3
  %26 = load ptr, ptr %25, align 8, !tbaa !57
  %27 = tail call i32 %26(ptr noundef nonnull %0) #32
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %191, label %29

29:                                               ; preds = %24
  %30 = load ptr, ptr %4, align 8, !tbaa !58
  %31 = load i64, ptr %5, align 8, !tbaa !55
  br label %32

32:                                               ; preds = %29, %15
  %33 = phi ptr [ %30, %29 ], [ %19, %15 ]
  %34 = phi i64 [ %31, %29 ], [ %18, %15 ]
  %35 = add i64 %34, -1
  %36 = getelementptr inbounds i8, ptr %33, i64 1
  %37 = load i8, ptr %33, align 1, !tbaa !7
  %38 = zext i8 %37 to i64
  %39 = or i64 %22, %38
  %40 = icmp ugt i64 %39, 15
  br i1 %40, label %41, label %167

41:                                               ; preds = %32
  %42 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %4, i64 0, i32 3
  br label %43

43:                                               ; preds = %55, %41
  %44 = phi i64 [ 0, %41 ], [ %62, %55 ]
  %45 = phi i64 [ %35, %41 ], [ %58, %55 ]
  %46 = phi ptr [ %36, %41 ], [ %59, %55 ]
  %47 = icmp eq i64 %45, 0
  br i1 %47, label %48, label %55

48:                                               ; preds = %43
  %49 = load ptr, ptr %42, align 8, !tbaa !57
  %50 = tail call i32 %49(ptr noundef %0) #32
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %191, label %52

52:                                               ; preds = %48
  %53 = load ptr, ptr %4, align 8, !tbaa !58
  %54 = load i64, ptr %5, align 8, !tbaa !55
  br label %55

55:                                               ; preds = %52, %43
  %56 = phi ptr [ %53, %52 ], [ %46, %43 ]
  %57 = phi i64 [ %54, %52 ], [ %45, %43 ]
  %58 = add i64 %57, -1
  %59 = getelementptr inbounds i8, ptr %56, i64 1
  %60 = load i8, ptr %56, align 1, !tbaa !7
  %61 = getelementptr inbounds [14 x i8], ptr %2, i64 0, i64 %44
  store i8 %60, ptr %61, align 1, !tbaa !7
  %62 = add nuw nsw i64 %44, 1
  %63 = icmp eq i64 %62, 14
  br i1 %63, label %64, label %43, !llvm.loop !350

64:                                               ; preds = %55
  %.lcssa1 = phi i64 [ %58, %55 ]
  %.lcssa = phi ptr [ %59, %55 ]
  %65 = add nsw i64 %39, -16
  %66 = load <4 x i8>, ptr %2, align 4
  %67 = freeze <4 x i8> %66
  %68 = getelementptr inbounds [14 x i8], ptr %2, i64 0, i64 4
  %69 = load i8, ptr %68, align 4
  %70 = icmp eq i8 %69, 0
  %71 = bitcast <4 x i8> %67 to i32
  %72 = icmp eq i32 %71, 1179207242
  %73 = select i1 %72, i1 %70, i1 false
  br i1 %73, label %74, label %162

74:                                               ; preds = %64
  %75 = getelementptr inbounds [14 x i8], ptr %2, i64 0, i64 5
  %76 = load i8, ptr %75, align 1, !tbaa !7
  %77 = icmp eq i8 %76, 1
  br i1 %77, label %85, label %78

78:                                               ; preds = %74
  %79 = load ptr, ptr %0, align 8, !tbaa !16
  %80 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %79, i64 0, i32 5
  store i32 115, ptr %80, align 8, !tbaa !25
  %81 = zext i8 %76 to i32
  %82 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %79, i64 0, i32 6
  store i32 %81, ptr %82, align 4, !tbaa !7
  %83 = getelementptr inbounds [14 x i8], ptr %2, i64 0, i64 6
  %84 = load i8, ptr %83, align 2, !tbaa !7
  br label %93

85:                                               ; preds = %74
  %86 = getelementptr inbounds [14 x i8], ptr %2, i64 0, i64 6
  %87 = load i8, ptr %86, align 2, !tbaa !7
  %88 = icmp ugt i8 %87, 2
  br i1 %88, label %89, label %102

89:                                               ; preds = %85
  %90 = load ptr, ptr %0, align 8, !tbaa !16
  %91 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %90, i64 0, i32 5
  store i32 88, ptr %91, align 8, !tbaa !25
  %92 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %90, i64 0, i32 6
  store i32 1, ptr %92, align 4, !tbaa !7
  br label %93

93:                                               ; preds = %89, %78
  %94 = phi i8 [ %87, %89 ], [ %84, %78 ]
  %95 = phi i32 [ 1, %89 ], [ -1, %78 ]
  %96 = zext i8 %94 to i32
  %97 = load ptr, ptr %0, align 8, !tbaa !16
  %98 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %97, i64 0, i32 6, i32 0, i64 1
  store i32 %96, ptr %98, align 4, !tbaa !7
  %99 = load ptr, ptr %0, align 8, !tbaa !16
  %100 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %99, i64 0, i32 1
  %101 = load ptr, ptr %100, align 8, !tbaa !85
  tail call void %101(ptr noundef nonnull %0, i32 noundef %95) #32
  br label %102

102:                                              ; preds = %93, %85
  %103 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 50
  store i32 1, ptr %103, align 4, !tbaa !82
  %104 = getelementptr inbounds [14 x i8], ptr %2, i64 0, i64 7
  %105 = load i8, ptr %104, align 1, !tbaa !7
  %106 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 51
  store i8 %105, ptr %106, align 8, !tbaa !351
  %107 = getelementptr inbounds [14 x i8], ptr %2, i64 0, i64 8
  %108 = load i8, ptr %107, align 4, !tbaa !7
  %109 = zext i8 %108 to i16
  %110 = shl nuw i16 %109, 8
  %111 = getelementptr inbounds [14 x i8], ptr %2, i64 0, i64 9
  %112 = load i8, ptr %111, align 1, !tbaa !7
  %113 = zext i8 %112 to i16
  %114 = or i16 %110, %113
  %115 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 52
  store i16 %114, ptr %115, align 2, !tbaa !336
  %116 = getelementptr inbounds [14 x i8], ptr %2, i64 0, i64 10
  %117 = load i8, ptr %116, align 2, !tbaa !7
  %118 = zext i8 %117 to i16
  %119 = shl nuw i16 %118, 8
  %120 = getelementptr inbounds [14 x i8], ptr %2, i64 0, i64 11
  %121 = load i8, ptr %120, align 1, !tbaa !7
  %122 = zext i8 %121 to i16
  %123 = or i16 %119, %122
  %124 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 53
  store i16 %123, ptr %124, align 4, !tbaa !337
  %125 = load ptr, ptr %0, align 8, !tbaa !16
  %126 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %125, i64 0, i32 6
  %127 = zext i16 %114 to i32
  store i32 %127, ptr %126, align 4, !tbaa !41
  %128 = zext i16 %123 to i32
  %129 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %125, i64 0, i32 6, i32 0, i64 1
  store i32 %128, ptr %129, align 4, !tbaa !41
  %130 = zext i8 %105 to i32
  %131 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %125, i64 0, i32 6, i32 0, i64 2
  store i32 %130, ptr %131, align 4, !tbaa !41
  %132 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %125, i64 0, i32 5
  store i32 86, ptr %132, align 8, !tbaa !25
  %133 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %125, i64 0, i32 1
  %134 = load ptr, ptr %133, align 8, !tbaa !85
  tail call void %134(ptr noundef nonnull %0, i32 noundef 1) #32
  %135 = getelementptr inbounds [14 x i8], ptr %2, i64 0, i64 12
  %136 = load i8, ptr %135, align 4, !tbaa !7
  %137 = getelementptr inbounds [14 x i8], ptr %2, i64 0, i64 13
  %138 = load i8, ptr %137, align 1, !tbaa !7
  %139 = or i8 %138, %136
  %140 = icmp eq i8 %139, 0
  br i1 %140, label %152, label %141

141:                                              ; preds = %102
  %142 = load ptr, ptr %0, align 8, !tbaa !16
  %143 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %142, i64 0, i32 5
  store i32 89, ptr %143, align 8, !tbaa !25
  %144 = zext i8 %136 to i32
  %145 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %142, i64 0, i32 6
  store i32 %144, ptr %145, align 4, !tbaa !7
  %146 = zext i8 %138 to i32
  %147 = load ptr, ptr %0, align 8, !tbaa !16
  %148 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %147, i64 0, i32 6, i32 0, i64 1
  store i32 %146, ptr %148, align 4, !tbaa !7
  %149 = load ptr, ptr %0, align 8, !tbaa !16
  %150 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %149, i64 0, i32 1
  %151 = load ptr, ptr %150, align 8, !tbaa !85
  tail call void %151(ptr noundef nonnull %0, i32 noundef 1) #32
  br label %152

152:                                              ; preds = %141, %102
  %153 = zext i8 %136 to i64
  %154 = zext i8 %138 to i64
  %155 = mul nuw nsw i64 %153, 3
  %156 = mul nuw nsw i64 %155, %154
  %157 = icmp eq i64 %65, %156
  br i1 %157, label %182, label %158

158:                                              ; preds = %152
  %159 = load ptr, ptr %0, align 8, !tbaa !16
  %160 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %159, i64 0, i32 5
  store i32 87, ptr %160, align 8, !tbaa !25
  %161 = trunc i64 %65 to i32
  br label %172

162:                                              ; preds = %64
  %163 = load ptr, ptr %0, align 8, !tbaa !16
  %164 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %163, i64 0, i32 5
  store i32 76, ptr %164, align 8, !tbaa !25
  %165 = trunc i64 %65 to i32
  %166 = add nuw nsw i32 %165, 14
  br label %172

167:                                              ; preds = %32
  %168 = add nsw i64 %39, -2
  %169 = load ptr, ptr %0, align 8, !tbaa !16
  %170 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %169, i64 0, i32 5
  store i32 76, ptr %170, align 8, !tbaa !25
  %171 = trunc i64 %168 to i32
  br label %172

172:                                              ; preds = %167, %162, %158
  %173 = phi ptr [ %163, %162 ], [ %159, %158 ], [ %169, %167 ]
  %174 = phi i32 [ %166, %162 ], [ %161, %158 ], [ %171, %167 ]
  %175 = phi i64 [ %65, %162 ], [ %65, %158 ], [ %168, %167 ]
  %176 = phi ptr [ %.lcssa, %162 ], [ %.lcssa, %158 ], [ %36, %167 ]
  %177 = phi i64 [ %.lcssa1, %162 ], [ %.lcssa1, %158 ], [ %35, %167 ]
  %178 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %173, i64 0, i32 6
  store i32 %174, ptr %178, align 4, !tbaa !7
  %179 = load ptr, ptr %0, align 8, !tbaa !16
  %180 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %179, i64 0, i32 1
  %181 = load ptr, ptr %180, align 8, !tbaa !85
  tail call void %181(ptr noundef nonnull %0, i32 noundef 1) #32
  br label %182

182:                                              ; preds = %172, %152
  %183 = phi i64 [ %65, %152 ], [ %175, %172 ]
  %184 = phi ptr [ %.lcssa, %152 ], [ %176, %172 ]
  %185 = phi i64 [ %.lcssa1, %152 ], [ %177, %172 ]
  store ptr %184, ptr %4, align 8, !tbaa !58
  store i64 %185, ptr %5, align 8, !tbaa !55
  %186 = icmp sgt i64 %183, 0
  br i1 %186, label %187, label %191

187:                                              ; preds = %182
  %188 = load ptr, ptr %3, align 8, !tbaa !54
  %189 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %188, i64 0, i32 4
  %190 = load ptr, ptr %189, align 8, !tbaa !349
  tail call void %190(ptr noundef nonnull %0, i64 noundef %183) #32
  br label %191

191:                                              ; preds = %187, %182, %48, %24, %8
  %192 = phi i32 [ 0, %8 ], [ 0, %24 ], [ 1, %187 ], [ 1, %182 ], [ 0, %48 ]
  call void @llvm.lifetime.end.p0(i64 14, ptr nonnull %2) #31
  ret i32 %192
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @get_app14(ptr noundef %0) #6 {
  %2 = alloca [12 x i8], align 4
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %2) #31
  %3 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 5
  %4 = load ptr, ptr %3, align 8, !tbaa !54
  %5 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %4, i64 0, i32 1
  %6 = load i64, ptr %5, align 8, !tbaa !55
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %8, label %15

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %4, i64 0, i32 3
  %10 = load ptr, ptr %9, align 8, !tbaa !57
  %11 = tail call i32 %10(ptr noundef nonnull %0) #32
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %139, label %13

13:                                               ; preds = %8
  %14 = load i64, ptr %5, align 8, !tbaa !55
  br label %15

15:                                               ; preds = %13, %1
  %16 = phi i64 [ %14, %13 ], [ %6, %1 ]
  %17 = load ptr, ptr %4, align 8, !tbaa !58
  %18 = add i64 %16, -1
  %19 = getelementptr inbounds i8, ptr %17, i64 1
  %20 = load i8, ptr %17, align 1, !tbaa !7
  %21 = zext i8 %20 to i64
  %22 = shl nuw nsw i64 %21, 8
  %23 = icmp eq i64 %18, 0
  br i1 %23, label %24, label %32

24:                                               ; preds = %15
  %25 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %4, i64 0, i32 3
  %26 = load ptr, ptr %25, align 8, !tbaa !57
  %27 = tail call i32 %26(ptr noundef nonnull %0) #32
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %139, label %29

29:                                               ; preds = %24
  %30 = load ptr, ptr %4, align 8, !tbaa !58
  %31 = load i64, ptr %5, align 8, !tbaa !55
  br label %32

32:                                               ; preds = %29, %15
  %33 = phi ptr [ %30, %29 ], [ %19, %15 ]
  %34 = phi i64 [ %31, %29 ], [ %18, %15 ]
  %35 = add i64 %34, -1
  %36 = getelementptr inbounds i8, ptr %33, i64 1
  %37 = load i8, ptr %33, align 1, !tbaa !7
  %38 = zext i8 %37 to i64
  %39 = or i64 %22, %38
  %40 = icmp ugt i64 %39, 13
  br i1 %40, label %41, label %121

41:                                               ; preds = %32
  %42 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %4, i64 0, i32 3
  br label %43

43:                                               ; preds = %55, %41
  %44 = phi i64 [ 0, %41 ], [ %62, %55 ]
  %45 = phi i64 [ %35, %41 ], [ %58, %55 ]
  %46 = phi ptr [ %36, %41 ], [ %59, %55 ]
  %47 = icmp eq i64 %45, 0
  br i1 %47, label %48, label %55

48:                                               ; preds = %43
  %49 = load ptr, ptr %42, align 8, !tbaa !57
  %50 = tail call i32 %49(ptr noundef %0) #32
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %139, label %52

52:                                               ; preds = %48
  %53 = load ptr, ptr %4, align 8, !tbaa !58
  %54 = load i64, ptr %5, align 8, !tbaa !55
  br label %55

55:                                               ; preds = %52, %43
  %56 = phi ptr [ %53, %52 ], [ %46, %43 ]
  %57 = phi i64 [ %54, %52 ], [ %45, %43 ]
  %58 = add i64 %57, -1
  %59 = getelementptr inbounds i8, ptr %56, i64 1
  %60 = load i8, ptr %56, align 1, !tbaa !7
  %61 = getelementptr inbounds [12 x i8], ptr %2, i64 0, i64 %44
  store i8 %60, ptr %61, align 1, !tbaa !7
  %62 = add nuw nsw i64 %44, 1
  %63 = icmp eq i64 %62, 12
  br i1 %63, label %64, label %43, !llvm.loop !352

64:                                               ; preds = %55
  %.lcssa1 = phi i64 [ %58, %55 ]
  %.lcssa = phi ptr [ %59, %55 ]
  %65 = add nsw i64 %39, -14
  %66 = load <4 x i8>, ptr %2, align 4
  %67 = freeze <4 x i8> %66
  %68 = getelementptr inbounds [12 x i8], ptr %2, i64 0, i64 4
  %69 = load i8, ptr %68, align 4
  %70 = icmp eq i8 %69, 101
  %71 = bitcast <4 x i8> %67 to i32
  %72 = icmp eq i32 %71, 1651467329
  %73 = select i1 %72, i1 %70, i1 false
  br i1 %73, label %74, label %112

74:                                               ; preds = %64
  %75 = getelementptr inbounds [12 x i8], ptr %2, i64 0, i64 5
  %76 = load i8, ptr %75, align 1, !tbaa !7
  %77 = zext i8 %76 to i32
  %78 = shl nuw nsw i32 %77, 8
  %79 = getelementptr inbounds [12 x i8], ptr %2, i64 0, i64 6
  %80 = load i8, ptr %79, align 2, !tbaa !7
  %81 = zext i8 %80 to i32
  %82 = or i32 %78, %81
  %83 = getelementptr inbounds [12 x i8], ptr %2, i64 0, i64 7
  %84 = load i8, ptr %83, align 1, !tbaa !7
  %85 = zext i8 %84 to i32
  %86 = shl nuw nsw i32 %85, 8
  %87 = getelementptr inbounds [12 x i8], ptr %2, i64 0, i64 8
  %88 = load i8, ptr %87, align 4, !tbaa !7
  %89 = zext i8 %88 to i32
  %90 = or i32 %86, %89
  %91 = getelementptr inbounds [12 x i8], ptr %2, i64 0, i64 9
  %92 = load i8, ptr %91, align 1, !tbaa !7
  %93 = zext i8 %92 to i32
  %94 = shl nuw nsw i32 %93, 8
  %95 = getelementptr inbounds [12 x i8], ptr %2, i64 0, i64 10
  %96 = load i8, ptr %95, align 2, !tbaa !7
  %97 = zext i8 %96 to i32
  %98 = or i32 %94, %97
  %99 = getelementptr inbounds [12 x i8], ptr %2, i64 0, i64 11
  %100 = load i8, ptr %99, align 1, !tbaa !7
  %101 = zext i8 %100 to i32
  %102 = load ptr, ptr %0, align 8, !tbaa !16
  %103 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %102, i64 0, i32 6
  store i32 %82, ptr %103, align 4, !tbaa !41
  %104 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %102, i64 0, i32 6, i32 0, i64 1
  store i32 %90, ptr %104, align 4, !tbaa !41
  %105 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %102, i64 0, i32 6, i32 0, i64 2
  store i32 %98, ptr %105, align 4, !tbaa !41
  %106 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %102, i64 0, i32 6, i32 0, i64 3
  store i32 %101, ptr %106, align 4, !tbaa !41
  %107 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %102, i64 0, i32 5
  store i32 75, ptr %107, align 8, !tbaa !25
  %108 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %102, i64 0, i32 1
  %109 = load ptr, ptr %108, align 8, !tbaa !85
  tail call void %109(ptr noundef nonnull %0, i32 noundef 1) #32
  %110 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 54
  store i32 1, ptr %110, align 8, !tbaa !83
  %111 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 55
  store i8 %100, ptr %111, align 4, !tbaa !84
  br label %130

112:                                              ; preds = %64
  %113 = load ptr, ptr %0, align 8, !tbaa !16
  %114 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %113, i64 0, i32 5
  store i32 77, ptr %114, align 8, !tbaa !25
  %115 = trunc i64 %65 to i32
  %116 = add nuw nsw i32 %115, 12
  %117 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %113, i64 0, i32 6
  store i32 %116, ptr %117, align 4, !tbaa !7
  %118 = load ptr, ptr %0, align 8, !tbaa !16
  %119 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %118, i64 0, i32 1
  %120 = load ptr, ptr %119, align 8, !tbaa !85
  tail call void %120(ptr noundef nonnull %0, i32 noundef 1) #32
  br label %130

121:                                              ; preds = %32
  %122 = add nsw i64 %39, -2
  %123 = load ptr, ptr %0, align 8, !tbaa !16
  %124 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %123, i64 0, i32 5
  store i32 77, ptr %124, align 8, !tbaa !25
  %125 = trunc i64 %122 to i32
  %126 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %123, i64 0, i32 6
  store i32 %125, ptr %126, align 4, !tbaa !7
  %127 = load ptr, ptr %0, align 8, !tbaa !16
  %128 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %127, i64 0, i32 1
  %129 = load ptr, ptr %128, align 8, !tbaa !85
  tail call void %129(ptr noundef nonnull %0, i32 noundef 1) #32
  br label %130

130:                                              ; preds = %121, %112, %74
  %131 = phi i64 [ %65, %74 ], [ %65, %112 ], [ %122, %121 ]
  %132 = phi ptr [ %.lcssa, %74 ], [ %.lcssa, %112 ], [ %36, %121 ]
  %133 = phi i64 [ %.lcssa1, %74 ], [ %.lcssa1, %112 ], [ %35, %121 ]
  store ptr %132, ptr %4, align 8, !tbaa !58
  store i64 %133, ptr %5, align 8, !tbaa !55
  %134 = icmp sgt i64 %131, 0
  br i1 %134, label %135, label %139

135:                                              ; preds = %130
  %136 = load ptr, ptr %3, align 8, !tbaa !54
  %137 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %136, i64 0, i32 4
  %138 = load ptr, ptr %137, align 8, !tbaa !349
  tail call void %138(ptr noundef nonnull %0, i64 noundef %131) #32
  br label %139

139:                                              ; preds = %135, %130, %48, %24, %8
  %140 = phi i32 [ 0, %8 ], [ 0, %24 ], [ 1, %135 ], [ 1, %130 ], [ 0, %48 ]
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %2) #31
  ret i32 %140
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc i32 @get_sof(ptr noundef %0, i32 noundef %1, i32 noundef %2) unnamed_addr #6 {
  %4 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 5
  %5 = load ptr, ptr %4, align 8, !tbaa !54
  %6 = load ptr, ptr %5, align 8, !tbaa !58
  %7 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %5, i64 0, i32 1
  %8 = load i64, ptr %7, align 8, !tbaa !55
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 44
  store i32 %1, ptr %9, align 8, !tbaa !135
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 45
  store i32 %2, ptr %10, align 4, !tbaa !353
  %11 = icmp eq i64 %8, 0
  br i1 %11, label %12, label %20

12:                                               ; preds = %3
  %13 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %5, i64 0, i32 3
  %14 = load ptr, ptr %13, align 8, !tbaa !57
  %15 = tail call i32 %14(ptr noundef nonnull %0) #32
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %296, label %17

17:                                               ; preds = %12
  %18 = load ptr, ptr %5, align 8, !tbaa !58
  %19 = load i64, ptr %7, align 8, !tbaa !55
  br label %20

20:                                               ; preds = %17, %3
  %21 = phi ptr [ %18, %17 ], [ %6, %3 ]
  %22 = phi i64 [ %19, %17 ], [ %8, %3 ]
  %23 = add i64 %22, -1
  %24 = getelementptr inbounds i8, ptr %21, i64 1
  %25 = load i8, ptr %21, align 1, !tbaa !7
  %26 = zext i8 %25 to i64
  %27 = shl nuw nsw i64 %26, 8
  %28 = icmp eq i64 %23, 0
  br i1 %28, label %29, label %37

29:                                               ; preds = %20
  %30 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %5, i64 0, i32 3
  %31 = load ptr, ptr %30, align 8, !tbaa !57
  %32 = tail call i32 %31(ptr noundef nonnull %0) #32
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %296, label %34

34:                                               ; preds = %29
  %35 = load ptr, ptr %5, align 8, !tbaa !58
  %36 = load i64, ptr %7, align 8, !tbaa !55
  br label %37

37:                                               ; preds = %34, %20
  %38 = phi ptr [ %35, %34 ], [ %24, %20 ]
  %39 = phi i64 [ %36, %34 ], [ %23, %20 ]
  %40 = add i64 %39, -1
  %41 = getelementptr inbounds i8, ptr %38, i64 1
  %42 = load i8, ptr %38, align 1, !tbaa !7
  %43 = zext i8 %42 to i64
  %44 = or i64 %27, %43
  %45 = icmp eq i64 %40, 0
  br i1 %45, label %46, label %54

46:                                               ; preds = %37
  %47 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %5, i64 0, i32 3
  %48 = load ptr, ptr %47, align 8, !tbaa !57
  %49 = tail call i32 %48(ptr noundef nonnull %0) #32
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %296, label %51

51:                                               ; preds = %46
  %52 = load ptr, ptr %5, align 8, !tbaa !58
  %53 = load i64, ptr %7, align 8, !tbaa !55
  br label %54

54:                                               ; preds = %51, %37
  %55 = phi ptr [ %52, %51 ], [ %41, %37 ]
  %56 = phi i64 [ %53, %51 ], [ %40, %37 ]
  %57 = add i64 %56, -1
  %58 = getelementptr inbounds i8, ptr %55, i64 1
  %59 = load i8, ptr %55, align 1, !tbaa !7
  %60 = zext i8 %59 to i32
  %61 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 42
  store i32 %60, ptr %61, align 8, !tbaa !285
  %62 = icmp eq i64 %57, 0
  br i1 %62, label %63, label %71

63:                                               ; preds = %54
  %64 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %5, i64 0, i32 3
  %65 = load ptr, ptr %64, align 8, !tbaa !57
  %66 = tail call i32 %65(ptr noundef nonnull %0) #32
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %296, label %68

68:                                               ; preds = %63
  %69 = load ptr, ptr %5, align 8, !tbaa !58
  %70 = load i64, ptr %7, align 8, !tbaa !55
  br label %71

71:                                               ; preds = %68, %54
  %72 = phi ptr [ %69, %68 ], [ %58, %54 ]
  %73 = phi i64 [ %70, %68 ], [ %57, %54 ]
  %74 = add i64 %73, -1
  %75 = getelementptr inbounds i8, ptr %72, i64 1
  %76 = load i8, ptr %72, align 1, !tbaa !7
  %77 = zext i8 %76 to i32
  %78 = shl nuw nsw i32 %77, 8
  %79 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 7
  store i32 %78, ptr %79, align 4, !tbaa !283
  %80 = icmp eq i64 %74, 0
  br i1 %80, label %81, label %90

81:                                               ; preds = %71
  %82 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %5, i64 0, i32 3
  %83 = load ptr, ptr %82, align 8, !tbaa !57
  %84 = tail call i32 %83(ptr noundef nonnull %0) #32
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %296, label %86

86:                                               ; preds = %81
  %87 = load ptr, ptr %5, align 8, !tbaa !58
  %88 = load i64, ptr %7, align 8, !tbaa !55
  %89 = load i32, ptr %79, align 4, !tbaa !283
  br label %90

90:                                               ; preds = %86, %71
  %91 = phi i32 [ %89, %86 ], [ %78, %71 ]
  %92 = phi ptr [ %87, %86 ], [ %75, %71 ]
  %93 = phi i64 [ %88, %86 ], [ %74, %71 ]
  %94 = add i64 %93, -1
  %95 = getelementptr inbounds i8, ptr %92, i64 1
  %96 = load i8, ptr %92, align 1, !tbaa !7
  %97 = zext i8 %96 to i32
  %98 = add i32 %91, %97
  store i32 %98, ptr %79, align 4, !tbaa !283
  %99 = icmp eq i64 %94, 0
  br i1 %99, label %100, label %108

100:                                              ; preds = %90
  %101 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %5, i64 0, i32 3
  %102 = load ptr, ptr %101, align 8, !tbaa !57
  %103 = tail call i32 %102(ptr noundef nonnull %0) #32
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %296, label %105

105:                                              ; preds = %100
  %106 = load ptr, ptr %5, align 8, !tbaa !58
  %107 = load i64, ptr %7, align 8, !tbaa !55
  br label %108

108:                                              ; preds = %105, %90
  %109 = phi ptr [ %106, %105 ], [ %95, %90 ]
  %110 = phi i64 [ %107, %105 ], [ %94, %90 ]
  %111 = add i64 %110, -1
  %112 = getelementptr inbounds i8, ptr %109, i64 1
  %113 = load i8, ptr %109, align 1, !tbaa !7
  %114 = zext i8 %113 to i32
  %115 = shl nuw nsw i32 %114, 8
  %116 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 6
  store i32 %115, ptr %116, align 8, !tbaa !284
  %117 = icmp eq i64 %111, 0
  br i1 %117, label %118, label %127

118:                                              ; preds = %108
  %119 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %5, i64 0, i32 3
  %120 = load ptr, ptr %119, align 8, !tbaa !57
  %121 = tail call i32 %120(ptr noundef nonnull %0) #32
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %296, label %123

123:                                              ; preds = %118
  %124 = load ptr, ptr %5, align 8, !tbaa !58
  %125 = load i64, ptr %7, align 8, !tbaa !55
  %126 = load i32, ptr %116, align 8, !tbaa !284
  br label %127

127:                                              ; preds = %123, %108
  %128 = phi i32 [ %126, %123 ], [ %115, %108 ]
  %129 = phi ptr [ %124, %123 ], [ %112, %108 ]
  %130 = phi i64 [ %125, %123 ], [ %111, %108 ]
  %131 = add i64 %130, -1
  %132 = getelementptr inbounds i8, ptr %129, i64 1
  %133 = load i8, ptr %129, align 1, !tbaa !7
  %134 = zext i8 %133 to i32
  %135 = add i32 %128, %134
  store i32 %135, ptr %116, align 8, !tbaa !284
  %136 = icmp eq i64 %131, 0
  br i1 %136, label %137, label %145

137:                                              ; preds = %127
  %138 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %5, i64 0, i32 3
  %139 = load ptr, ptr %138, align 8, !tbaa !57
  %140 = tail call i32 %139(ptr noundef nonnull %0) #32
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %296, label %142

142:                                              ; preds = %137
  %143 = load ptr, ptr %5, align 8, !tbaa !58
  %144 = load i64, ptr %7, align 8, !tbaa !55
  br label %145

145:                                              ; preds = %142, %127
  %146 = phi ptr [ %143, %142 ], [ %132, %127 ]
  %147 = phi i64 [ %144, %142 ], [ %131, %127 ]
  %148 = load i8, ptr %146, align 1, !tbaa !7
  %149 = zext i8 %148 to i32
  %150 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 8
  store i32 %149, ptr %150, align 8, !tbaa !81
  %151 = add nsw i64 %44, -8
  %152 = load ptr, ptr %0, align 8, !tbaa !16
  %153 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %152, i64 0, i32 6
  %154 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 72
  %155 = load i32, ptr %154, align 4, !tbaa !267
  store i32 %155, ptr %153, align 4, !tbaa !41
  %156 = load i32, ptr %116, align 8, !tbaa !284
  %157 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %152, i64 0, i32 6, i32 0, i64 1
  store i32 %156, ptr %157, align 4, !tbaa !41
  %158 = load i32, ptr %79, align 4, !tbaa !283
  %159 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %152, i64 0, i32 6, i32 0, i64 2
  store i32 %158, ptr %159, align 4, !tbaa !41
  %160 = load i32, ptr %150, align 8, !tbaa !81
  %161 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %152, i64 0, i32 6, i32 0, i64 3
  store i32 %160, ptr %161, align 4, !tbaa !41
  %162 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %152, i64 0, i32 5
  store i32 99, ptr %162, align 8, !tbaa !25
  %163 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %152, i64 0, i32 1
  %164 = load ptr, ptr %163, align 8, !tbaa !85
  tail call void %164(ptr noundef nonnull %0, i32 noundef 1) #32
  %165 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 78
  %166 = load ptr, ptr %165, align 8, !tbaa !73
  %167 = getelementptr inbounds %struct.jpeg_marker_reader, ptr %166, i64 0, i32 6
  %168 = load i32, ptr %167, align 4, !tbaa !293
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %174, label %170

170:                                              ; preds = %145
  %171 = load ptr, ptr %0, align 8, !tbaa !16
  %172 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %171, i64 0, i32 5
  store i32 57, ptr %172, align 8, !tbaa !25
  %173 = load ptr, ptr %171, align 8, !tbaa !26
  tail call void %173(ptr noundef nonnull %0) #32
  br label %174

174:                                              ; preds = %170, %145
  %175 = load i32, ptr %79, align 4, !tbaa !283
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %183, label %177

177:                                              ; preds = %174
  %178 = load i32, ptr %116, align 8, !tbaa !284
  %179 = icmp eq i32 %178, 0
  br i1 %179, label %183, label %180

180:                                              ; preds = %177
  %181 = load i32, ptr %150, align 8, !tbaa !81
  %182 = icmp slt i32 %181, 1
  br i1 %182, label %183, label %188

183:                                              ; preds = %180, %177, %174
  %184 = load ptr, ptr %0, align 8, !tbaa !16
  %185 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %184, i64 0, i32 5
  store i32 31, ptr %185, align 8, !tbaa !25
  %186 = load ptr, ptr %184, align 8, !tbaa !26
  tail call void %186(ptr noundef nonnull %0) #32
  %187 = load i32, ptr %150, align 8, !tbaa !81
  br label %188

188:                                              ; preds = %183, %180
  %189 = phi i32 [ %187, %183 ], [ %181, %180 ]
  %190 = mul nsw i32 %189, 3
  %191 = sext i32 %190 to i64
  %192 = icmp eq i64 %151, %191
  br i1 %192, label %198, label %193

193:                                              ; preds = %188
  %194 = load ptr, ptr %0, align 8, !tbaa !16
  %195 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %194, i64 0, i32 5
  store i32 9, ptr %195, align 8, !tbaa !25
  %196 = load ptr, ptr %194, align 8, !tbaa !26
  tail call void %196(ptr noundef nonnull %0) #32
  %197 = load i32, ptr %150, align 8, !tbaa !81
  br label %198

198:                                              ; preds = %193, %188
  %199 = phi i32 [ %197, %193 ], [ %189, %188 ]
  %200 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 43
  %201 = load ptr, ptr %200, align 8, !tbaa !86
  %202 = icmp eq ptr %201, null
  br i1 %202, label %203, label %211

203:                                              ; preds = %198
  %204 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  %205 = load ptr, ptr %204, align 8, !tbaa !50
  %206 = load ptr, ptr %205, align 8, !tbaa !65
  %207 = sext i32 %199 to i64
  %208 = mul nsw i64 %207, 96
  %209 = tail call ptr %206(ptr noundef nonnull %0, i32 noundef 1, i64 noundef %208) #32
  store ptr %209, ptr %200, align 8, !tbaa !86
  %210 = load i32, ptr %150, align 8, !tbaa !81
  br label %211

211:                                              ; preds = %203, %198
  %212 = phi ptr [ %209, %203 ], [ %201, %198 ]
  %213 = phi i32 [ %210, %203 ], [ %199, %198 ]
  %214 = getelementptr inbounds i8, ptr %146, i64 1
  %215 = add i64 %147, -1
  %216 = icmp sgt i32 %213, 0
  br i1 %216, label %217, label %291

217:                                              ; preds = %211
  %218 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %5, i64 0, i32 3
  br label %219

219:                                              ; preds = %267, %217
  %220 = phi i64 [ %215, %217 ], [ %288, %267 ]
  %221 = phi ptr [ %214, %217 ], [ %287, %267 ]
  %222 = phi i32 [ 0, %217 ], [ %285, %267 ]
  %223 = phi ptr [ %212, %217 ], [ %286, %267 ]
  %224 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %223, i64 0, i32 1
  store i32 %222, ptr %224, align 4, !tbaa !157
  %225 = icmp eq i64 %220, 0
  br i1 %225, label %226, label %233

226:                                              ; preds = %219
  %227 = load ptr, ptr %218, align 8, !tbaa !57
  %228 = tail call i32 %227(ptr noundef nonnull %0) #32
  %229 = icmp eq i32 %228, 0
  br i1 %229, label %296, label %230

230:                                              ; preds = %226
  %231 = load ptr, ptr %5, align 8, !tbaa !58
  %232 = load i64, ptr %7, align 8, !tbaa !55
  br label %233

233:                                              ; preds = %230, %219
  %234 = phi ptr [ %231, %230 ], [ %221, %219 ]
  %235 = phi i64 [ %232, %230 ], [ %220, %219 ]
  %236 = add i64 %235, -1
  %237 = getelementptr inbounds i8, ptr %234, i64 1
  %238 = load i8, ptr %234, align 1, !tbaa !7
  %239 = zext i8 %238 to i32
  store i32 %239, ptr %223, align 8, !tbaa !87
  %240 = icmp eq i64 %236, 0
  br i1 %240, label %241, label %248

241:                                              ; preds = %233
  %242 = load ptr, ptr %218, align 8, !tbaa !57
  %243 = tail call i32 %242(ptr noundef nonnull %0) #32
  %244 = icmp eq i32 %243, 0
  br i1 %244, label %296, label %245

245:                                              ; preds = %241
  %246 = load ptr, ptr %5, align 8, !tbaa !58
  %247 = load i64, ptr %7, align 8, !tbaa !55
  br label %248

248:                                              ; preds = %245, %233
  %249 = phi ptr [ %246, %245 ], [ %237, %233 ]
  %250 = phi i64 [ %247, %245 ], [ %236, %233 ]
  %251 = add i64 %250, -1
  %252 = getelementptr inbounds i8, ptr %249, i64 1
  %253 = load i8, ptr %249, align 1, !tbaa !7
  %254 = zext i8 %253 to i32
  %255 = lshr i32 %254, 4
  %256 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %223, i64 0, i32 2
  store i32 %255, ptr %256, align 8, !tbaa !138
  %257 = and i32 %254, 15
  %258 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %223, i64 0, i32 3
  store i32 %257, ptr %258, align 4, !tbaa !134
  %259 = icmp eq i64 %251, 0
  br i1 %259, label %260, label %267

260:                                              ; preds = %248
  %261 = load ptr, ptr %218, align 8, !tbaa !57
  %262 = tail call i32 %261(ptr noundef nonnull %0) #32
  %263 = icmp eq i32 %262, 0
  br i1 %263, label %296, label %264

264:                                              ; preds = %260
  %265 = load ptr, ptr %5, align 8, !tbaa !58
  %266 = load i64, ptr %7, align 8, !tbaa !55
  br label %267

267:                                              ; preds = %264, %248
  %268 = phi ptr [ %265, %264 ], [ %252, %248 ]
  %269 = phi i64 [ %266, %264 ], [ %251, %248 ]
  %270 = load i8, ptr %268, align 1, !tbaa !7
  %271 = zext i8 %270 to i32
  %272 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %223, i64 0, i32 4
  store i32 %271, ptr %272, align 8, !tbaa !300
  %273 = load ptr, ptr %0, align 8, !tbaa !16
  %274 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %273, i64 0, i32 6
  %275 = load i32, ptr %223, align 8, !tbaa !87
  store i32 %275, ptr %274, align 4, !tbaa !41
  %276 = load i32, ptr %256, align 8, !tbaa !138
  %277 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %273, i64 0, i32 6, i32 0, i64 1
  store i32 %276, ptr %277, align 4, !tbaa !41
  %278 = load i32, ptr %258, align 4, !tbaa !134
  %279 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %273, i64 0, i32 6, i32 0, i64 2
  store i32 %278, ptr %279, align 4, !tbaa !41
  %280 = load i32, ptr %272, align 8, !tbaa !300
  %281 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %273, i64 0, i32 6, i32 0, i64 3
  store i32 %280, ptr %281, align 4, !tbaa !41
  %282 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %273, i64 0, i32 5
  store i32 100, ptr %282, align 8, !tbaa !25
  %283 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %273, i64 0, i32 1
  %284 = load ptr, ptr %283, align 8, !tbaa !85
  tail call void %284(ptr noundef nonnull %0, i32 noundef 1) #32
  %285 = add nuw nsw i32 %222, 1
  %286 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %223, i64 1
  %287 = getelementptr inbounds i8, ptr %268, i64 1
  %288 = add i64 %269, -1
  %289 = load i32, ptr %150, align 8, !tbaa !81
  %290 = icmp slt i32 %285, %289
  br i1 %290, label %219, label %291, !llvm.loop !354

291:                                              ; preds = %267, %211
  %292 = phi ptr [ %214, %211 ], [ %287, %267 ]
  %293 = phi i64 [ %215, %211 ], [ %288, %267 ]
  %294 = load ptr, ptr %165, align 8, !tbaa !73
  %295 = getelementptr inbounds %struct.jpeg_marker_reader, ptr %294, i64 0, i32 6
  store i32 1, ptr %295, align 4, !tbaa !293
  store ptr %292, ptr %5, align 8, !tbaa !58
  store i64 %293, ptr %7, align 8, !tbaa !55
  br label %296

296:                                              ; preds = %291, %260, %241, %226, %137, %118, %100, %81, %63, %46, %29, %12
  %297 = phi i32 [ 1, %291 ], [ 0, %12 ], [ 0, %29 ], [ 0, %46 ], [ 0, %63 ], [ 0, %81 ], [ 0, %100 ], [ 0, %118 ], [ 0, %137 ], [ 0, %226 ], [ 0, %241 ], [ 0, %260 ]
  ret i32 %297
}

; Function Attrs: nounwind optsize uwtable
define internal void @jpeg_calc_output_dimensions(ptr noundef %0) #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 4
  %3 = load i32, ptr %2, align 4, !tbaa !72
  %4 = icmp eq i32 %3, 202
  br i1 %4, label %11, label %5

5:                                                ; preds = %1
  %6 = load ptr, ptr %0, align 8, !tbaa !16
  %7 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %6, i64 0, i32 5
  store i32 18, ptr %7, align 8, !tbaa !25
  %8 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %6, i64 0, i32 6
  store i32 %3, ptr %8, align 4, !tbaa !7
  %9 = load ptr, ptr %0, align 8, !tbaa !16
  %10 = load ptr, ptr %9, align 8, !tbaa !26
  tail call void %10(ptr noundef nonnull %0) #32
  br label %11

11:                                               ; preds = %5, %1
  %12 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 11
  %13 = load i32, ptr %12, align 4, !tbaa !90
  %14 = shl i32 %13, 3
  %15 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 12
  %16 = load i32, ptr %15, align 8, !tbaa !91
  %17 = icmp ugt i32 %14, %16
  br i1 %17, label %30, label %18

18:                                               ; preds = %11
  %19 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 6
  %20 = load i32, ptr %19, align 8, !tbaa !284
  %21 = zext i32 %20 to i64
  %22 = tail call i64 @jdiv_round_up(i64 noundef %21, i64 noundef 8) #32
  %23 = trunc i64 %22 to i32
  %24 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  store i32 %23, ptr %24, align 8, !tbaa !202
  %25 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 7
  %26 = load i32, ptr %25, align 4, !tbaa !283
  %27 = zext i32 %26 to i64
  %28 = tail call i64 @jdiv_round_up(i64 noundef %27, i64 noundef 8) #32
  %29 = trunc i64 %28 to i32
  br label %64

30:                                               ; preds = %11
  %31 = shl i32 %13, 2
  %32 = icmp ugt i32 %31, %16
  br i1 %32, label %45, label %33

33:                                               ; preds = %30
  %34 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 6
  %35 = load i32, ptr %34, align 8, !tbaa !284
  %36 = zext i32 %35 to i64
  %37 = tail call i64 @jdiv_round_up(i64 noundef %36, i64 noundef 4) #32
  %38 = trunc i64 %37 to i32
  %39 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  store i32 %38, ptr %39, align 8, !tbaa !202
  %40 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 7
  %41 = load i32, ptr %40, align 4, !tbaa !283
  %42 = zext i32 %41 to i64
  %43 = tail call i64 @jdiv_round_up(i64 noundef %42, i64 noundef 4) #32
  %44 = trunc i64 %43 to i32
  br label %64

45:                                               ; preds = %30
  %46 = shl i32 %13, 1
  %47 = icmp ugt i32 %46, %16
  %48 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 6
  %49 = load i32, ptr %48, align 8, !tbaa !284
  br i1 %47, label %60, label %50

50:                                               ; preds = %45
  %51 = zext i32 %49 to i64
  %52 = tail call i64 @jdiv_round_up(i64 noundef %51, i64 noundef 2) #32
  %53 = trunc i64 %52 to i32
  %54 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  store i32 %53, ptr %54, align 8, !tbaa !202
  %55 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 7
  %56 = load i32, ptr %55, align 4, !tbaa !283
  %57 = zext i32 %56 to i64
  %58 = tail call i64 @jdiv_round_up(i64 noundef %57, i64 noundef 2) #32
  %59 = trunc i64 %58 to i32
  br label %64

60:                                               ; preds = %45
  %61 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  store i32 %49, ptr %61, align 8, !tbaa !202
  %62 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 7
  %63 = load i32, ptr %62, align 4, !tbaa !283
  br label %64

64:                                               ; preds = %60, %50, %33, %18
  %65 = phi i32 [ %44, %33 ], [ %63, %60 ], [ %59, %50 ], [ %29, %18 ]
  %66 = phi i32 [ 2, %33 ], [ 8, %60 ], [ 4, %50 ], [ 1, %18 ]
  %67 = phi i1 [ true, %33 ], [ false, %60 ], [ true, %50 ], [ true, %18 ]
  %68 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 27
  store i32 %65, ptr %68, align 4, !tbaa !31
  %69 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 59
  store i32 %66, ptr %69, align 4, !tbaa !288
  %70 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 43
  %71 = load ptr, ptr %70, align 8, !tbaa !86
  %72 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 8
  %73 = load i32, ptr %72, align 8, !tbaa !81
  %74 = icmp sgt i32 %73, 0
  br i1 %74, label %75, label %148

75:                                               ; preds = %64
  %76 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 57
  %77 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 58
  br label %84

78:                                               ; preds = %106
  br i1 %74, label %79, label %148

79:                                               ; preds = %78
  %80 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 6
  %81 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 57
  %82 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 7
  %83 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 58
  br label %112

84:                                               ; preds = %106, %75
  %85 = phi ptr [ %71, %75 ], [ %110, %106 ]
  %86 = phi i32 [ 0, %75 ], [ %109, %106 ]
  %87 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %85, i64 0, i32 3
  br i1 %67, label %88, label %106

88:                                               ; preds = %84
  %89 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %85, i64 0, i32 2
  %90 = load i32, ptr %89, align 8, !tbaa !138
  %91 = load i32, ptr %76, align 4, !tbaa !286
  %92 = mul nsw i32 %91, %66
  br label %93

93:                                               ; preds = %104, %88
  %94 = phi i32 [ %66, %88 ], [ %95, %104 ]
  %95 = shl i32 %94, 1
  %96 = mul i32 %95, %90
  %97 = icmp sgt i32 %96, %92
  br i1 %97, label %106, label %98

98:                                               ; preds = %93
  %99 = load i32, ptr %87, align 4, !tbaa !134
  %100 = mul i32 %95, %99
  %101 = load i32, ptr %77, align 8, !tbaa !287
  %102 = mul nsw i32 %101, %66
  %103 = icmp sgt i32 %100, %102
  br i1 %103, label %106, label %104

104:                                              ; preds = %98
  %105 = icmp slt i32 %94, 4
  br i1 %105, label %93, label %106, !llvm.loop !355

106:                                              ; preds = %104, %98, %93, %84
  %107 = phi i32 [ %66, %84 ], [ %94, %93 ], [ %95, %104 ], [ %94, %98 ]
  %108 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %85, i64 0, i32 9
  store i32 %107, ptr %108, align 4, !tbaa !177
  %109 = add nuw nsw i32 %86, 1
  %110 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %85, i64 1
  %111 = icmp eq i32 %109, %73
  br i1 %111, label %78, label %84, !llvm.loop !356

112:                                              ; preds = %112, %79
  %113 = phi ptr [ %71, %79 ], [ %145, %112 ]
  %114 = phi i32 [ 0, %79 ], [ %144, %112 ]
  %115 = load i32, ptr %80, align 8, !tbaa !284
  %116 = zext i32 %115 to i64
  %117 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %113, i64 0, i32 2
  %118 = load i32, ptr %117, align 8, !tbaa !138
  %119 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %113, i64 0, i32 9
  %120 = load i32, ptr %119, align 4, !tbaa !177
  %121 = mul nsw i32 %120, %118
  %122 = sext i32 %121 to i64
  %123 = mul nsw i64 %122, %116
  %124 = load i32, ptr %81, align 4, !tbaa !286
  %125 = shl nsw i32 %124, 3
  %126 = sext i32 %125 to i64
  %127 = tail call i64 @jdiv_round_up(i64 noundef %123, i64 noundef %126) #32
  %128 = trunc i64 %127 to i32
  %129 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %113, i64 0, i32 10
  store i32 %128, ptr %129, align 8, !tbaa !290
  %130 = load i32, ptr %82, align 4, !tbaa !283
  %131 = zext i32 %130 to i64
  %132 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %113, i64 0, i32 3
  %133 = load i32, ptr %132, align 4, !tbaa !134
  %134 = load i32, ptr %119, align 4, !tbaa !177
  %135 = mul nsw i32 %134, %133
  %136 = sext i32 %135 to i64
  %137 = mul nsw i64 %136, %131
  %138 = load i32, ptr %83, align 8, !tbaa !287
  %139 = shl nsw i32 %138, 3
  %140 = sext i32 %139 to i64
  %141 = tail call i64 @jdiv_round_up(i64 noundef %137, i64 noundef %140) #32
  %142 = trunc i64 %141 to i32
  %143 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %113, i64 0, i32 11
  store i32 %142, ptr %143, align 4, !tbaa !291
  %144 = add nuw nsw i32 %114, 1
  %145 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %113, i64 1
  %146 = load i32, ptr %72, align 8, !tbaa !81
  %147 = icmp slt i32 %144, %146
  br i1 %147, label %112, label %148, !llvm.loop !357

148:                                              ; preds = %112, %78, %64
  %149 = phi i32 [ %73, %78 ], [ %73, %64 ], [ %146, %112 ]
  %150 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 10
  %151 = load i32, ptr %150, align 8, !tbaa !48
  %152 = add i32 %151, -1
  %153 = icmp ult i32 %152, 5
  br i1 %153, label %154, label %158

154:                                              ; preds = %148
  %155 = sext i32 %152 to i64
  %156 = getelementptr inbounds [5 x i32], ptr @switch.table.jpeg_calc_output_dimensions, i64 0, i64 %155
  %157 = load i32, ptr %156, align 4
  br label %158

158:                                              ; preds = %154, %148
  %159 = phi i32 [ %157, %154 ], [ %149, %148 ]
  %160 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 28
  store i32 %159, ptr %160, align 8, !tbaa !199
  %161 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 19
  %162 = load i32, ptr %161, align 4, !tbaa !43
  %163 = icmp eq i32 %162, 0
  %164 = select i1 %163, i32 %159, i32 1
  %165 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 29
  store i32 %164, ptr %165, align 4, !tbaa !358
  %166 = tail call fastcc i32 @use_merged_upsample(ptr noundef nonnull %0) #33, !range !247
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %171, label %168

168:                                              ; preds = %158
  %169 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 58
  %170 = load i32, ptr %169, align 8, !tbaa !287
  br label %171

171:                                              ; preds = %168, %158
  %172 = phi i32 [ %170, %168 ], [ 1, %158 ]
  %173 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 30
  store i32 %172, ptr %173, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, inaccessiblemem: none) uwtable
define internal fastcc i32 @use_merged_upsample(ptr nocapture noundef readonly %0) unnamed_addr #17 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 17
  %3 = load i32, ptr %2, align 4, !tbaa !47
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %66

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 56
  %7 = load i32, ptr %6, align 8, !tbaa !335
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %66

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 9
  %11 = load i32, ptr %10, align 4, !tbaa !89
  %12 = icmp eq i32 %11, 3
  br i1 %12, label %13, label %66

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 8
  %15 = load i32, ptr %14, align 8, !tbaa !81
  %16 = icmp eq i32 %15, 3
  br i1 %16, label %17, label %66

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 10
  %19 = load i32, ptr %18, align 8, !tbaa !48
  %20 = icmp eq i32 %19, 2
  br i1 %20, label %21, label %66

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 28
  %23 = load i32, ptr %22, align 8, !tbaa !199
  %24 = icmp eq i32 %23, 3
  br i1 %24, label %25, label %66

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 43
  %27 = load ptr, ptr %26, align 8, !tbaa !86
  %28 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %27, i64 0, i32 2
  %29 = load i32, ptr %28, align 8, !tbaa !138
  %30 = icmp eq i32 %29, 2
  br i1 %30, label %31, label %66

31:                                               ; preds = %25
  %32 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %27, i64 1, i32 2
  %33 = load i32, ptr %32, align 8, !tbaa !138
  %34 = icmp eq i32 %33, 1
  br i1 %34, label %35, label %66

35:                                               ; preds = %31
  %36 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %27, i64 2, i32 2
  %37 = load i32, ptr %36, align 8, !tbaa !138
  %38 = icmp eq i32 %37, 1
  br i1 %38, label %39, label %66

39:                                               ; preds = %35
  %40 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %27, i64 0, i32 3
  %41 = load i32, ptr %40, align 4, !tbaa !134
  %42 = icmp sgt i32 %41, 2
  br i1 %42, label %66, label %43

43:                                               ; preds = %39
  %44 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %27, i64 1, i32 3
  %45 = load i32, ptr %44, align 4, !tbaa !134
  %46 = icmp eq i32 %45, 1
  br i1 %46, label %47, label %66

47:                                               ; preds = %43
  %48 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %27, i64 2, i32 3
  %49 = load i32, ptr %48, align 4, !tbaa !134
  %50 = icmp eq i32 %49, 1
  br i1 %50, label %51, label %66

51:                                               ; preds = %47
  %52 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %27, i64 0, i32 9
  %53 = load i32, ptr %52, align 4, !tbaa !177
  %54 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 59
  %55 = load i32, ptr %54, align 4, !tbaa !288
  %56 = icmp eq i32 %53, %55
  br i1 %56, label %57, label %66

57:                                               ; preds = %51
  %58 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %27, i64 1, i32 9
  %59 = load i32, ptr %58, align 4, !tbaa !177
  %60 = icmp eq i32 %59, %53
  br i1 %60, label %61, label %66

61:                                               ; preds = %57
  %62 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %27, i64 2, i32 9
  %63 = load i32, ptr %62, align 4, !tbaa !177
  %64 = icmp eq i32 %63, %53
  %65 = zext i1 %64 to i32
  br label %66

66:                                               ; preds = %61, %57, %51, %47, %43, %39, %35, %31, %25, %21, %17, %13, %9, %5, %1
  %67 = phi i32 [ 0, %5 ], [ 0, %1 ], [ 0, %21 ], [ 0, %17 ], [ 0, %13 ], [ 0, %9 ], [ 0, %47 ], [ 0, %43 ], [ 0, %39 ], [ 0, %35 ], [ 0, %31 ], [ 0, %25 ], [ 0, %57 ], [ 0, %51 ], [ %65, %61 ]
  ret i32 %67
}

; Function Attrs: nounwind optsize uwtable
define internal void @jinit_master_decompress(ptr noundef %0) #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !50
  %4 = load ptr, ptr %3, align 8, !tbaa !65
  %5 = tail call ptr %4(ptr noundef %0, i32 noundef 1, i64 noundef 48) #32
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 73
  store ptr %5, ptr %6, align 8, !tbaa !95
  store ptr @prepare_for_output_pass, ptr %5, align 8, !tbaa !359
  %7 = getelementptr inbounds %struct.jpeg_decomp_master, ptr %5, i64 0, i32 1
  store ptr @finish_output_pass, ptr %7, align 8, !tbaa !361
  %8 = getelementptr inbounds %struct.jpeg_decomp_master, ptr %5, i64 0, i32 2
  store i32 0, ptr %8, align 8, !tbaa !362
  tail call void @jpeg_calc_output_dimensions(ptr noundef %0) #33
  %9 = load ptr, ptr %2, align 8, !tbaa !50
  %10 = load ptr, ptr %9, align 8, !tbaa !65
  %11 = tail call ptr %10(ptr noundef %0, i32 noundef 1, i64 noundef 1408) #32
  %12 = getelementptr inbounds i8, ptr %11, i64 256
  %13 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 61
  store ptr %12, ptr %13, align 8, !tbaa !203
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(256) %11, i8 0, i64 256, i1 false)
  br label %14

14:                                               ; preds = %14, %1
  %15 = phi i64 [ 0, %1 ], [ %18, %14 ]
  %16 = phi <16 x i8> [ <i8 0, i8 1, i8 2, i8 3, i8 4, i8 5, i8 6, i8 7, i8 8, i8 9, i8 10, i8 11, i8 12, i8 13, i8 14, i8 15>, %1 ], [ %19, %14 ]
  %17 = getelementptr inbounds i8, ptr %12, i64 %15
  store <16 x i8> %16, ptr %17, align 1, !tbaa !7
  %18 = add nuw i64 %15, 16
  %19 = add <16 x i8> %16, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %20 = icmp eq i64 %18, 256
  br i1 %20, label %21, label %14, !llvm.loop !363

21:                                               ; preds = %14
  %22 = getelementptr i8, ptr %11, i64 512
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(384) %22, i8 -1, i64 384, i1 false), !tbaa !7
  %23 = getelementptr inbounds i8, ptr %11, i64 896
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(384) %23, i8 0, i64 384, i1 false)
  %24 = getelementptr inbounds i8, ptr %11, i64 1280
  %25 = load ptr, ptr %13, align 8, !tbaa !203
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(128) %24, ptr noundef nonnull align 1 dereferenceable(128) %25, i64 128, i1 false)
  %26 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  %27 = load i32, ptr %26, align 8, !tbaa !202
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 28
  %30 = load i32, ptr %29, align 8, !tbaa !199
  %31 = sext i32 %30 to i64
  %32 = mul nsw i64 %31, %28
  %33 = icmp ult i64 %32, 4294967296
  br i1 %33, label %38, label %34

34:                                               ; preds = %21
  %35 = load ptr, ptr %0, align 8, !tbaa !16
  %36 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %35, i64 0, i32 5
  store i32 69, ptr %36, align 8, !tbaa !25
  %37 = load ptr, ptr %35, align 8, !tbaa !26
  tail call void %37(ptr noundef nonnull %0) #32
  br label %38

38:                                               ; preds = %34, %21
  %39 = getelementptr inbounds %struct.my_decomp_master, ptr %5, i64 0, i32 1
  store i32 0, ptr %39, align 8, !tbaa !364
  %40 = tail call fastcc i32 @use_merged_upsample(ptr noundef nonnull %0) #33, !range !247
  %41 = getelementptr inbounds %struct.my_decomp_master, ptr %5, i64 0, i32 2
  store i32 %40, ptr %41, align 4, !tbaa !365
  %42 = getelementptr inbounds %struct.my_decomp_master, ptr %5, i64 0, i32 3
  %43 = getelementptr inbounds %struct.my_decomp_master, ptr %5, i64 0, i32 4
  %44 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 19
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %42, i8 0, i64 16, i1 false)
  %45 = load i32, ptr %44, align 4, !tbaa !43
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %51

47:                                               ; preds = %38
  %48 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 23
  store i32 0, ptr %48, align 4, !tbaa !366
  %49 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 24
  store i32 0, ptr %49, align 8, !tbaa !367
  %50 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 25
  store i32 0, ptr %50, align 4, !tbaa !368
  br label %107

51:                                               ; preds = %38
  %52 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 14
  %53 = load i32, ptr %52, align 8, !tbaa !94
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %59

55:                                               ; preds = %51
  %56 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 23
  store i32 0, ptr %56, align 4, !tbaa !366
  %57 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 24
  store i32 0, ptr %57, align 8, !tbaa !367
  %58 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 25
  store i32 0, ptr %58, align 4, !tbaa !368
  br label %59

59:                                               ; preds = %55, %51
  %60 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 15
  %61 = load i32, ptr %60, align 4, !tbaa !115
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %67, label %63

63:                                               ; preds = %59
  %64 = load ptr, ptr %0, align 8, !tbaa !16
  %65 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %64, i64 0, i32 5
  store i32 46, ptr %65, align 8, !tbaa !25
  %66 = load ptr, ptr %64, align 8, !tbaa !26
  tail call void %66(ptr noundef nonnull %0) #32
  br label %67

67:                                               ; preds = %63, %59
  %68 = load i32, ptr %29, align 8, !tbaa !199
  %69 = icmp eq i32 %68, 3
  br i1 %69, label %75, label %70

70:                                               ; preds = %67
  %71 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 23
  store i32 1, ptr %71, align 4, !tbaa !366
  %72 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 24
  store i32 0, ptr %72, align 8, !tbaa !367
  %73 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 25
  store i32 0, ptr %73, align 4, !tbaa !368
  %74 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 32
  store ptr null, ptr %74, align 8, !tbaa !93
  br label %89

75:                                               ; preds = %67
  %76 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 32
  %77 = load ptr, ptr %76, align 8, !tbaa !93
  %78 = icmp eq ptr %77, null
  br i1 %78, label %81, label %79

79:                                               ; preds = %75
  %80 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 24
  store i32 1, ptr %80, align 8, !tbaa !367
  br label %89

81:                                               ; preds = %75
  %82 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 21
  %83 = load i32, ptr %82, align 4, !tbaa !46
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %87, label %85

85:                                               ; preds = %81
  %86 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 25
  store i32 1, ptr %86, align 4, !tbaa !368
  br label %89

87:                                               ; preds = %81
  %88 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 23
  store i32 1, ptr %88, align 4, !tbaa !366
  br label %89

89:                                               ; preds = %87, %85, %79, %70
  %90 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 23
  %91 = load i32, ptr %90, align 4, !tbaa !366
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %96, label %93

93:                                               ; preds = %89
  tail call void @jinit_1pass_quantizer(ptr noundef nonnull %0) #32
  %94 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 83
  %95 = load ptr, ptr %94, align 8, !tbaa !369
  store ptr %95, ptr %42, align 8, !tbaa !370
  br label %96

96:                                               ; preds = %93, %89
  %97 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 25
  %98 = load i32, ptr %97, align 4, !tbaa !368
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %100, label %104

100:                                              ; preds = %96
  %101 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 24
  %102 = load i32, ptr %101, align 8, !tbaa !367
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %107, label %104

104:                                              ; preds = %100, %96
  tail call void @jinit_2pass_quantizer(ptr noundef nonnull %0) #32
  %105 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 83
  %106 = load ptr, ptr %105, align 8, !tbaa !369
  store ptr %106, ptr %43, align 8, !tbaa !371
  br label %107

107:                                              ; preds = %104, %100, %47
  %108 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 15
  %109 = load i32, ptr %108, align 4, !tbaa !115
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %111, label %119

111:                                              ; preds = %107
  %112 = load i32, ptr %41, align 4, !tbaa !365
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %115, label %114

114:                                              ; preds = %111
  tail call void @jinit_merged_upsampler(ptr noundef nonnull %0) #32
  br label %116

115:                                              ; preds = %111
  tail call void @jinit_color_deconverter(ptr noundef nonnull %0) #32
  tail call void @jinit_upsampler(ptr noundef nonnull %0) #32
  br label %116

116:                                              ; preds = %115, %114
  %117 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 25
  %118 = load i32, ptr %117, align 4, !tbaa !368
  tail call void @jinit_d_post_controller(ptr noundef nonnull %0, i32 noundef %118) #32
  br label %119

119:                                              ; preds = %116, %107
  tail call void @jinit_inverse_dct(ptr noundef nonnull %0) #32
  %120 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 45
  %121 = load i32, ptr %120, align 4, !tbaa !353
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %127, label %123

123:                                              ; preds = %119
  %124 = load ptr, ptr %0, align 8, !tbaa !16
  %125 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %124, i64 0, i32 5
  store i32 1, ptr %125, align 8, !tbaa !25
  %126 = load ptr, ptr %124, align 8, !tbaa !26
  tail call void %126(ptr noundef nonnull %0) #32
  br label %133

127:                                              ; preds = %119
  %128 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 44
  %129 = load i32, ptr %128, align 8, !tbaa !135
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %132, label %131

131:                                              ; preds = %127
  tail call void @jinit_phuff_decoder(ptr noundef nonnull %0) #32
  br label %133

132:                                              ; preds = %127
  tail call void @jinit_huff_decoder(ptr noundef nonnull %0) #32
  br label %133

133:                                              ; preds = %132, %131, %123
  %134 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 77
  %135 = load ptr, ptr %134, align 8, !tbaa !76
  %136 = getelementptr inbounds %struct.jpeg_input_controller, ptr %135, i64 0, i32 4
  %137 = load i32, ptr %136, align 8, !tbaa !101
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %139, label %144

139:                                              ; preds = %133
  %140 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 14
  %141 = load i32, ptr %140, align 8, !tbaa !94
  %142 = icmp ne i32 %141, 0
  %143 = zext i1 %142 to i32
  br label %144

144:                                              ; preds = %139, %133
  %145 = phi i32 [ 1, %133 ], [ %143, %139 ]
  tail call void @jinit_d_coef_controller(ptr noundef nonnull %0, i32 noundef %145) #32
  %146 = load i32, ptr %108, align 4, !tbaa !115
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %148, label %149

148:                                              ; preds = %144
  tail call void @jinit_d_main_controller(ptr noundef nonnull %0, i32 noundef 0) #32
  br label %149

149:                                              ; preds = %148, %144
  %150 = load ptr, ptr %2, align 8, !tbaa !50
  %151 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %150, i64 0, i32 6
  %152 = load ptr, ptr %151, align 8, !tbaa !372
  tail call void %152(ptr noundef nonnull %0) #32
  %153 = load ptr, ptr %134, align 8, !tbaa !76
  %154 = getelementptr inbounds %struct.jpeg_input_controller, ptr %153, i64 0, i32 2
  %155 = load ptr, ptr %154, align 8, !tbaa !373
  tail call void %155(ptr noundef nonnull %0) #32
  %156 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 2
  %157 = load ptr, ptr %156, align 8, !tbaa !71
  %158 = icmp eq ptr %157, null
  br i1 %158, label %192, label %159

159:                                              ; preds = %149
  %160 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 14
  %161 = load i32, ptr %160, align 8, !tbaa !94
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %163, label %192

163:                                              ; preds = %159
  %164 = load ptr, ptr %134, align 8, !tbaa !76
  %165 = getelementptr inbounds %struct.jpeg_input_controller, ptr %164, i64 0, i32 4
  %166 = load i32, ptr %165, align 8, !tbaa !101
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %192, label %168

168:                                              ; preds = %163
  %169 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 44
  %170 = load i32, ptr %169, align 8, !tbaa !135
  %171 = icmp eq i32 %170, 0
  %172 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 8
  %173 = load i32, ptr %172, align 8, !tbaa !81
  %174 = mul nsw i32 %173, 3
  %175 = add nsw i32 %174, 2
  %176 = select i1 %171, i32 %173, i32 %175
  %177 = getelementptr inbounds %struct.jpeg_progress_mgr.105, ptr %157, i64 0, i32 1
  store i64 0, ptr %177, align 8, !tbaa !104
  %178 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 60
  %179 = load i32, ptr %178, align 8, !tbaa !106
  %180 = zext i32 %179 to i64
  %181 = sext i32 %176 to i64
  %182 = mul nsw i64 %181, %180
  %183 = getelementptr inbounds %struct.jpeg_progress_mgr.105, ptr %157, i64 0, i32 2
  store i64 %182, ptr %183, align 8, !tbaa !105
  %184 = getelementptr inbounds %struct.jpeg_progress_mgr.105, ptr %157, i64 0, i32 3
  store i32 0, ptr %184, align 8, !tbaa !374
  %185 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 25
  %186 = load i32, ptr %185, align 4, !tbaa !368
  %187 = icmp eq i32 %186, 0
  %188 = select i1 %187, i32 2, i32 3
  %189 = getelementptr inbounds %struct.jpeg_progress_mgr.105, ptr %157, i64 0, i32 4
  store i32 %188, ptr %189, align 4, !tbaa !375
  %190 = load i32, ptr %39, align 8, !tbaa !364
  %191 = add nsw i32 %190, 1
  store i32 %191, ptr %39, align 8, !tbaa !364
  br label %192

192:                                              ; preds = %168, %163, %159, %149
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @prepare_for_output_pass(ptr noundef %0) #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 73
  %3 = load ptr, ptr %2, align 8, !tbaa !95
  %4 = getelementptr inbounds %struct.jpeg_decomp_master, ptr %3, i64 0, i32 2
  %5 = load i32, ptr %4, align 8, !tbaa !362
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %14, label %7

7:                                                ; preds = %1
  store i32 0, ptr %4, align 8, !tbaa !362
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 83
  %9 = load ptr, ptr %8, align 8, !tbaa !369
  %10 = load ptr, ptr %9, align 8, !tbaa !376
  tail call void %10(ptr noundef nonnull %0, i32 noundef 0) #32
  %11 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 76
  %12 = load ptr, ptr %11, align 8, !tbaa !324
  %13 = load ptr, ptr %12, align 8, !tbaa !378
  tail call void %13(ptr noundef nonnull %0, i32 noundef 2) #32
  br label %83

14:                                               ; preds = %1
  %15 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 19
  %16 = load i32, ptr %15, align 4, !tbaa !43
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %46, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 32
  %20 = load ptr, ptr %19, align 8, !tbaa !93
  %21 = icmp eq ptr %20, null
  br i1 %21, label %22, label %46

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 21
  %24 = load i32, ptr %23, align 4, !tbaa !46
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %22
  %27 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 25
  %28 = load i32, ptr %27, align 4, !tbaa !368
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %34, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.my_decomp_master, ptr %3, i64 0, i32 4
  %32 = load ptr, ptr %31, align 8, !tbaa !371
  %33 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 83
  store ptr %32, ptr %33, align 8, !tbaa !369
  store i32 1, ptr %4, align 8, !tbaa !362
  br label %46

34:                                               ; preds = %26, %22
  %35 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 23
  %36 = load i32, ptr %35, align 4, !tbaa !366
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %42, label %38

38:                                               ; preds = %34
  %39 = getelementptr inbounds %struct.my_decomp_master, ptr %3, i64 0, i32 3
  %40 = load ptr, ptr %39, align 8, !tbaa !370
  %41 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 83
  store ptr %40, ptr %41, align 8, !tbaa !369
  br label %46

42:                                               ; preds = %34
  %43 = load ptr, ptr %0, align 8, !tbaa !16
  %44 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %43, i64 0, i32 5
  store i32 45, ptr %44, align 8, !tbaa !25
  %45 = load ptr, ptr %43, align 8, !tbaa !26
  tail call void %45(ptr noundef nonnull %0) #32
  br label %46

46:                                               ; preds = %42, %38, %30, %18, %14
  %47 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 80
  %48 = load ptr, ptr %47, align 8, !tbaa !176
  %49 = load ptr, ptr %48, align 8, !tbaa !379
  tail call void %49(ptr noundef nonnull %0) #32
  %50 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 75
  %51 = load ptr, ptr %50, align 8, !tbaa !128
  %52 = getelementptr inbounds %struct.jpeg_d_coef_controller.118, ptr %51, i64 0, i32 2
  %53 = load ptr, ptr %52, align 8, !tbaa !380
  tail call void %53(ptr noundef nonnull %0) #32
  %54 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 15
  %55 = load i32, ptr %54, align 4, !tbaa !115
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %88

57:                                               ; preds = %46
  %58 = getelementptr inbounds %struct.my_decomp_master, ptr %3, i64 0, i32 2
  %59 = load i32, ptr %58, align 4, !tbaa !365
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %65

61:                                               ; preds = %57
  %62 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 82
  %63 = load ptr, ptr %62, align 8, !tbaa !195
  %64 = load ptr, ptr %63, align 8, !tbaa !381
  tail call void %64(ptr noundef nonnull %0) #32
  br label %65

65:                                               ; preds = %61, %57
  %66 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 81
  %67 = load ptr, ptr %66, align 8, !tbaa !307
  %68 = load ptr, ptr %67, align 8, !tbaa !382
  tail call void %68(ptr noundef nonnull %0) #32
  %69 = load i32, ptr %15, align 4, !tbaa !43
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %76, label %71

71:                                               ; preds = %65
  %72 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 83
  %73 = load ptr, ptr %72, align 8, !tbaa !369
  %74 = load ptr, ptr %73, align 8, !tbaa !376
  %75 = load i32, ptr %4, align 8, !tbaa !362
  tail call void %74(ptr noundef nonnull %0, i32 noundef %75) #32
  br label %76

76:                                               ; preds = %71, %65
  %77 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 76
  %78 = load ptr, ptr %77, align 8, !tbaa !324
  %79 = load ptr, ptr %78, align 8, !tbaa !378
  %80 = load i32, ptr %4, align 8, !tbaa !362
  %81 = icmp eq i32 %80, 0
  %82 = select i1 %81, i32 0, i32 3
  tail call void %79(ptr noundef nonnull %0, i32 noundef %82) #32
  br label %83

83:                                               ; preds = %76, %7
  %84 = phi i32 [ 0, %76 ], [ 2, %7 ]
  %85 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 74
  %86 = load ptr, ptr %85, align 8, !tbaa !111
  %87 = load ptr, ptr %86, align 8, !tbaa !383
  tail call void %87(ptr noundef nonnull %0, i32 noundef %84) #32
  br label %88

88:                                               ; preds = %83, %46
  %89 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 2
  %90 = load ptr, ptr %89, align 8, !tbaa !71
  %91 = icmp eq ptr %90, null
  br i1 %91, label %116, label %92

92:                                               ; preds = %88
  %93 = getelementptr inbounds %struct.my_decomp_master, ptr %3, i64 0, i32 1
  %94 = load i32, ptr %93, align 8, !tbaa !364
  %95 = getelementptr inbounds %struct.jpeg_progress_mgr.105, ptr %90, i64 0, i32 3
  store i32 %94, ptr %95, align 8, !tbaa !374
  %96 = load i32, ptr %4, align 8, !tbaa !362
  %97 = icmp eq i32 %96, 0
  %98 = select i1 %97, i32 1, i32 2
  %99 = add nsw i32 %98, %94
  %100 = getelementptr inbounds %struct.jpeg_progress_mgr.105, ptr %90, i64 0, i32 4
  store i32 %99, ptr %100, align 4, !tbaa !375
  %101 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 14
  %102 = load i32, ptr %101, align 8, !tbaa !94
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %116, label %104

104:                                              ; preds = %92
  %105 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 77
  %106 = load ptr, ptr %105, align 8, !tbaa !76
  %107 = getelementptr inbounds %struct.jpeg_input_controller, ptr %106, i64 0, i32 5
  %108 = load i32, ptr %107, align 4, !tbaa !98
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %110, label %116

110:                                              ; preds = %104
  %111 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 25
  %112 = load i32, ptr %111, align 4, !tbaa !368
  %113 = icmp eq i32 %112, 0
  %114 = select i1 %113, i32 1, i32 2
  %115 = add nsw i32 %114, %99
  store i32 %115, ptr %100, align 4, !tbaa !375
  br label %116

116:                                              ; preds = %110, %104, %92, %88
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @finish_output_pass(ptr noundef %0) #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 73
  %3 = load ptr, ptr %2, align 8, !tbaa !95
  %4 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 19
  %5 = load i32, ptr %4, align 4, !tbaa !43
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %12, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 83
  %9 = load ptr, ptr %8, align 8, !tbaa !369
  %10 = getelementptr inbounds %struct.jpeg_color_quantizer, ptr %9, i64 0, i32 2
  %11 = load ptr, ptr %10, align 8, !tbaa !384
  tail call void %11(ptr noundef nonnull %0) #32
  br label %12

12:                                               ; preds = %7, %1
  %13 = getelementptr inbounds %struct.my_decomp_master, ptr %3, i64 0, i32 1
  %14 = load i32, ptr %13, align 8, !tbaa !364
  %15 = add nsw i32 %14, 1
  store i32 %15, ptr %13, align 8, !tbaa !364
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @jinit_merged_upsampler(ptr noundef %0) #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !50
  %4 = load ptr, ptr %3, align 8, !tbaa !65
  %5 = tail call ptr %4(ptr noundef %0, i32 noundef 1, i64 noundef 88) #32
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 81
  store ptr %5, ptr %6, align 8, !tbaa !307
  store ptr @start_pass_merged_upsample, ptr %5, align 8, !tbaa !385
  %7 = getelementptr inbounds %struct.jpeg_decomp_master, ptr %5, i64 0, i32 2
  store i32 0, ptr %7, align 8, !tbaa !387
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  %9 = load i32, ptr %8, align 8, !tbaa !202
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 28
  %11 = load i32, ptr %10, align 8, !tbaa !199
  %12 = mul i32 %11, %9
  %13 = getelementptr inbounds %struct.my_upsampler, ptr %5, i64 0, i32 8
  store i32 %12, ptr %13, align 4, !tbaa !388
  %14 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 58
  %15 = load i32, ptr %14, align 8, !tbaa !287
  %16 = icmp eq i32 %15, 2
  %17 = getelementptr inbounds %struct.jpeg_decomp_master, ptr %5, i64 0, i32 1
  %18 = getelementptr inbounds %struct.my_upsampler, ptr %5, i64 0, i32 1
  br i1 %16, label %19, label %25

19:                                               ; preds = %1
  store ptr @merged_2v_upsample, ptr %17, align 8, !tbaa !389
  store ptr @h2v2_merged_upsample, ptr %18, align 8, !tbaa !390
  %20 = load ptr, ptr %2, align 8, !tbaa !50
  %21 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %20, i64 0, i32 1
  %22 = load ptr, ptr %21, align 8, !tbaa !143
  %23 = zext i32 %12 to i64
  %24 = tail call ptr %22(ptr noundef nonnull %0, i32 noundef 1, i64 noundef %23) #32
  br label %26

25:                                               ; preds = %1
  store ptr @merged_1v_upsample, ptr %17, align 8, !tbaa !389
  store ptr @h2v1_merged_upsample, ptr %18, align 8, !tbaa !390
  br label %26

26:                                               ; preds = %25, %19
  %27 = phi ptr [ %24, %19 ], [ null, %25 ]
  %28 = getelementptr inbounds %struct.my_upsampler, ptr %5, i64 0, i32 6
  store ptr %27, ptr %28, align 8
  %29 = load ptr, ptr %6, align 8, !tbaa !307
  %30 = load ptr, ptr %2, align 8, !tbaa !50
  %31 = load ptr, ptr %30, align 8, !tbaa !65
  %32 = tail call ptr %31(ptr noundef nonnull %0, i32 noundef 1, i64 noundef 1024) #32
  %33 = getelementptr inbounds %struct.my_upsampler, ptr %29, i64 0, i32 2
  store ptr %32, ptr %33, align 8, !tbaa !391
  %34 = load ptr, ptr %2, align 8, !tbaa !50
  %35 = load ptr, ptr %34, align 8, !tbaa !65
  %36 = tail call ptr %35(ptr noundef nonnull %0, i32 noundef 1, i64 noundef 1024) #32
  %37 = getelementptr inbounds %struct.my_upsampler, ptr %29, i64 0, i32 3
  store ptr %36, ptr %37, align 8, !tbaa !392
  %38 = load ptr, ptr %2, align 8, !tbaa !50
  %39 = load ptr, ptr %38, align 8, !tbaa !65
  %40 = tail call ptr %39(ptr noundef nonnull %0, i32 noundef 1, i64 noundef 2048) #32
  %41 = getelementptr inbounds %struct.my_upsampler, ptr %29, i64 0, i32 4
  store ptr %40, ptr %41, align 8, !tbaa !393
  %42 = load ptr, ptr %2, align 8, !tbaa !50
  %43 = load ptr, ptr %42, align 8, !tbaa !65
  %44 = tail call ptr %43(ptr noundef nonnull %0, i32 noundef 1, i64 noundef 2048) #32
  %45 = getelementptr inbounds %struct.my_upsampler, ptr %29, i64 0, i32 5
  store ptr %44, ptr %45, align 8, !tbaa !394
  %46 = load ptr, ptr %33, align 8, !tbaa !391
  %47 = load ptr, ptr %37, align 8, !tbaa !392
  %48 = load ptr, ptr %41, align 8, !tbaa !393
  br label %49

49:                                               ; preds = %49, %26
  %50 = phi i64 [ 0, %26 ], [ %67, %49 ]
  %51 = phi i64 [ -128, %26 ], [ %68, %49 ]
  %52 = mul nsw i64 %51, 91881
  %53 = add nsw i64 %52, 32768
  %54 = lshr i64 %53, 16
  %55 = trunc i64 %54 to i32
  %56 = getelementptr inbounds i32, ptr %46, i64 %50
  store i32 %55, ptr %56, align 4, !tbaa !41
  %57 = mul nsw i64 %51, 116130
  %58 = add nsw i64 %57, 32768
  %59 = lshr i64 %58, 16
  %60 = trunc i64 %59 to i32
  %61 = getelementptr inbounds i32, ptr %47, i64 %50
  store i32 %60, ptr %61, align 4, !tbaa !41
  %62 = mul nsw i64 %51, -46802
  %63 = getelementptr inbounds i64, ptr %48, i64 %50
  store i64 %62, ptr %63, align 8, !tbaa !49
  %64 = mul nsw i64 %51, -22554
  %65 = add nsw i64 %64, 32768
  %66 = getelementptr inbounds i64, ptr %44, i64 %50
  store i64 %65, ptr %66, align 8, !tbaa !49
  %67 = add nuw nsw i64 %50, 1
  %68 = add nsw i64 %51, 1
  %69 = icmp eq i64 %67, 256
  br i1 %69, label %70, label %49, !llvm.loop !395

70:                                               ; preds = %49
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(write, argmem: readwrite, inaccessiblemem: none) uwtable
define internal void @start_pass_merged_upsample(ptr nocapture noundef readonly %0) #11 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 81
  %3 = load ptr, ptr %2, align 8, !tbaa !307
  %4 = getelementptr inbounds %struct.my_upsampler, ptr %3, i64 0, i32 7
  store i32 0, ptr %4, align 8, !tbaa !396
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 27
  %6 = load i32, ptr %5, align 4, !tbaa !31
  %7 = getelementptr inbounds %struct.my_upsampler, ptr %3, i64 0, i32 9
  store i32 %6, ptr %7, align 8, !tbaa !397
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @merged_2v_upsample(ptr noundef %0, ptr noundef %1, ptr nocapture noundef %2, i32 %3, ptr noundef %4, ptr nocapture noundef %5, i32 noundef %6) #6 {
  %8 = alloca [2 x ptr], align 16
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 81
  %10 = load ptr, ptr %9, align 8, !tbaa !307
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %8) #31
  %11 = getelementptr inbounds %struct.my_upsampler, ptr %10, i64 0, i32 7
  %12 = load i32, ptr %11, align 8, !tbaa !396
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %21, label %14

14:                                               ; preds = %7
  %15 = getelementptr inbounds %struct.my_upsampler, ptr %10, i64 0, i32 6
  %16 = load i32, ptr %5, align 4, !tbaa !41
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds ptr, ptr %4, i64 %17
  %19 = getelementptr inbounds %struct.my_upsampler, ptr %10, i64 0, i32 8
  %20 = load i32, ptr %19, align 4, !tbaa !388
  tail call void @jcopy_sample_rows(ptr noundef nonnull %15, i32 noundef 0, ptr noundef %18, i32 noundef 0, i32 noundef 1, i32 noundef %20) #32
  store i32 0, ptr %11, align 8, !tbaa !396
  br label %46

21:                                               ; preds = %7
  %22 = getelementptr inbounds %struct.my_upsampler, ptr %10, i64 0, i32 9
  %23 = load i32, ptr %22, align 8, !tbaa !397
  %24 = load i32, ptr %5, align 4, !tbaa !41
  %25 = sub i32 %6, %24
  %26 = tail call i32 @llvm.umin.i32(i32 %23, i32 %25)
  %27 = tail call i32 @llvm.umin.i32(i32 %26, i32 2)
  %28 = zext i32 %24 to i64
  %29 = getelementptr inbounds ptr, ptr %4, i64 %28
  %30 = load ptr, ptr %29, align 8, !tbaa !10
  store ptr %30, ptr %8, align 16, !tbaa !10
  %31 = icmp ugt i32 %27, 1
  br i1 %31, label %32, label %37

32:                                               ; preds = %21
  %33 = add i32 %24, 1
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds ptr, ptr %4, i64 %34
  %36 = load ptr, ptr %35, align 8, !tbaa !10
  br label %40

37:                                               ; preds = %21
  %38 = getelementptr inbounds %struct.my_upsampler, ptr %10, i64 0, i32 6
  %39 = load ptr, ptr %38, align 8, !tbaa !398
  store i32 1, ptr %11, align 8, !tbaa !396
  br label %40

40:                                               ; preds = %37, %32
  %41 = phi ptr [ %36, %32 ], [ %39, %37 ]
  %42 = getelementptr inbounds [2 x ptr], ptr %8, i64 0, i64 1
  store ptr %41, ptr %42, align 8
  %43 = getelementptr inbounds %struct.my_upsampler, ptr %10, i64 0, i32 1
  %44 = load ptr, ptr %43, align 8, !tbaa !390
  %45 = load i32, ptr %2, align 4, !tbaa !41
  call void %44(ptr noundef nonnull %0, ptr noundef %1, i32 noundef %45, ptr noundef nonnull %8) #32
  br label %46

46:                                               ; preds = %40, %14
  %47 = phi i32 [ 1, %14 ], [ %27, %40 ]
  %48 = load i32, ptr %5, align 4, !tbaa !41
  %49 = add i32 %48, %47
  store i32 %49, ptr %5, align 4, !tbaa !41
  %50 = getelementptr inbounds %struct.my_upsampler, ptr %10, i64 0, i32 9
  %51 = load i32, ptr %50, align 8, !tbaa !397
  %52 = sub i32 %51, %47
  store i32 %52, ptr %50, align 8, !tbaa !397
  %53 = load i32, ptr %11, align 8, !tbaa !396
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %58

55:                                               ; preds = %46
  %56 = load i32, ptr %2, align 4, !tbaa !41
  %57 = add i32 %56, 1
  store i32 %57, ptr %2, align 4, !tbaa !41
  br label %58

58:                                               ; preds = %55, %46
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %8) #31
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @h2v2_merged_upsample(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 noundef %2, ptr nocapture noundef readonly %3) #15 {
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 81
  %6 = load ptr, ptr %5, align 8, !tbaa !307
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 61
  %8 = load ptr, ptr %7, align 8, !tbaa !203
  %9 = getelementptr inbounds %struct.my_upsampler, ptr %6, i64 0, i32 2
  %10 = load ptr, ptr %9, align 8, !tbaa !391
  %11 = getelementptr inbounds %struct.my_upsampler, ptr %6, i64 0, i32 3
  %12 = load ptr, ptr %11, align 8, !tbaa !392
  %13 = getelementptr inbounds %struct.my_upsampler, ptr %6, i64 0, i32 4
  %14 = load ptr, ptr %13, align 8, !tbaa !393
  %15 = getelementptr inbounds %struct.my_upsampler, ptr %6, i64 0, i32 5
  %16 = load ptr, ptr %15, align 8, !tbaa !394
  %17 = load ptr, ptr %1, align 8, !tbaa !10
  %18 = shl i32 %2, 1
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds ptr, ptr %17, i64 %19
  %21 = load ptr, ptr %20, align 8, !tbaa !10
  %22 = or i32 %18, 1
  %23 = zext i32 %22 to i64
  %24 = getelementptr inbounds ptr, ptr %17, i64 %23
  %25 = load ptr, ptr %24, align 8, !tbaa !10
  %26 = getelementptr inbounds ptr, ptr %1, i64 1
  %27 = load ptr, ptr %26, align 8, !tbaa !10
  %28 = zext i32 %2 to i64
  %29 = getelementptr inbounds ptr, ptr %27, i64 %28
  %30 = load ptr, ptr %29, align 8, !tbaa !10
  %31 = getelementptr inbounds ptr, ptr %1, i64 2
  %32 = load ptr, ptr %31, align 8, !tbaa !10
  %33 = getelementptr inbounds ptr, ptr %32, i64 %28
  %34 = load ptr, ptr %33, align 8, !tbaa !10
  %35 = load ptr, ptr %3, align 8, !tbaa !10
  %36 = getelementptr inbounds ptr, ptr %3, i64 1
  %37 = load ptr, ptr %36, align 8, !tbaa !10
  %38 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  %39 = load i32, ptr %38, align 8, !tbaa !202
  %40 = icmp ult i32 %39, 2
  br i1 %40, label %144, label %41

41:                                               ; preds = %4
  %42 = lshr i32 %39, 1
  br label %43

43:                                               ; preds = %43, %41
  %44 = phi i32 [ %140, %43 ], [ %42, %41 ]
  %45 = phi ptr [ %53, %43 ], [ %34, %41 ]
  %46 = phi ptr [ %51, %43 ], [ %30, %41 ]
  %47 = phi ptr [ %122, %43 ], [ %25, %41 ]
  %48 = phi ptr [ %86, %43 ], [ %21, %41 ]
  %49 = phi ptr [ %139, %43 ], [ %37, %41 ]
  %50 = phi ptr [ %103, %43 ], [ %35, %41 ]
  %51 = getelementptr inbounds i8, ptr %46, i64 1
  %52 = load i8, ptr %46, align 1, !tbaa !7
  %53 = getelementptr inbounds i8, ptr %45, i64 1
  %54 = load i8, ptr %45, align 1, !tbaa !7
  %55 = zext i8 %54 to i64
  %56 = getelementptr inbounds i32, ptr %10, i64 %55
  %57 = load i32, ptr %56, align 4, !tbaa !41
  %58 = zext i8 %52 to i64
  %59 = getelementptr inbounds i64, ptr %16, i64 %58
  %60 = load i64, ptr %59, align 8, !tbaa !49
  %61 = getelementptr inbounds i64, ptr %14, i64 %55
  %62 = load i64, ptr %61, align 8, !tbaa !49
  %63 = add nsw i64 %62, %60
  %64 = lshr i64 %63, 16
  %65 = trunc i64 %64 to i32
  %66 = getelementptr inbounds i32, ptr %12, i64 %58
  %67 = load i32, ptr %66, align 4, !tbaa !41
  %68 = getelementptr inbounds i8, ptr %48, i64 1
  %69 = load i8, ptr %48, align 1, !tbaa !7
  %70 = zext i8 %69 to i32
  %71 = add nsw i32 %57, %70
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds i8, ptr %8, i64 %72
  %74 = load i8, ptr %73, align 1, !tbaa !7
  store i8 %74, ptr %50, align 1, !tbaa !7
  %75 = add nsw i32 %70, %65
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds i8, ptr %8, i64 %76
  %78 = load i8, ptr %77, align 1, !tbaa !7
  %79 = getelementptr inbounds i8, ptr %50, i64 1
  store i8 %78, ptr %79, align 1, !tbaa !7
  %80 = add nsw i32 %67, %70
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds i8, ptr %8, i64 %81
  %83 = load i8, ptr %82, align 1, !tbaa !7
  %84 = getelementptr inbounds i8, ptr %50, i64 2
  store i8 %83, ptr %84, align 1, !tbaa !7
  %85 = getelementptr inbounds i8, ptr %50, i64 3
  %86 = getelementptr inbounds i8, ptr %48, i64 2
  %87 = load i8, ptr %68, align 1, !tbaa !7
  %88 = zext i8 %87 to i32
  %89 = add nsw i32 %57, %88
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds i8, ptr %8, i64 %90
  %92 = load i8, ptr %91, align 1, !tbaa !7
  store i8 %92, ptr %85, align 1, !tbaa !7
  %93 = add nsw i32 %88, %65
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds i8, ptr %8, i64 %94
  %96 = load i8, ptr %95, align 1, !tbaa !7
  %97 = getelementptr inbounds i8, ptr %50, i64 4
  store i8 %96, ptr %97, align 1, !tbaa !7
  %98 = add nsw i32 %67, %88
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i8, ptr %8, i64 %99
  %101 = load i8, ptr %100, align 1, !tbaa !7
  %102 = getelementptr inbounds i8, ptr %50, i64 5
  store i8 %101, ptr %102, align 1, !tbaa !7
  %103 = getelementptr inbounds i8, ptr %50, i64 6
  %104 = getelementptr inbounds i8, ptr %47, i64 1
  %105 = load i8, ptr %47, align 1, !tbaa !7
  %106 = zext i8 %105 to i32
  %107 = add nsw i32 %57, %106
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds i8, ptr %8, i64 %108
  %110 = load i8, ptr %109, align 1, !tbaa !7
  store i8 %110, ptr %49, align 1, !tbaa !7
  %111 = add nsw i32 %106, %65
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds i8, ptr %8, i64 %112
  %114 = load i8, ptr %113, align 1, !tbaa !7
  %115 = getelementptr inbounds i8, ptr %49, i64 1
  store i8 %114, ptr %115, align 1, !tbaa !7
  %116 = add nsw i32 %67, %106
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds i8, ptr %8, i64 %117
  %119 = load i8, ptr %118, align 1, !tbaa !7
  %120 = getelementptr inbounds i8, ptr %49, i64 2
  store i8 %119, ptr %120, align 1, !tbaa !7
  %121 = getelementptr inbounds i8, ptr %49, i64 3
  %122 = getelementptr inbounds i8, ptr %47, i64 2
  %123 = load i8, ptr %104, align 1, !tbaa !7
  %124 = zext i8 %123 to i32
  %125 = add nsw i32 %57, %124
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds i8, ptr %8, i64 %126
  %128 = load i8, ptr %127, align 1, !tbaa !7
  store i8 %128, ptr %121, align 1, !tbaa !7
  %129 = add nsw i32 %124, %65
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds i8, ptr %8, i64 %130
  %132 = load i8, ptr %131, align 1, !tbaa !7
  %133 = getelementptr inbounds i8, ptr %49, i64 4
  store i8 %132, ptr %133, align 1, !tbaa !7
  %134 = add nsw i32 %67, %124
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds i8, ptr %8, i64 %135
  %137 = load i8, ptr %136, align 1, !tbaa !7
  %138 = getelementptr inbounds i8, ptr %49, i64 5
  store i8 %137, ptr %138, align 1, !tbaa !7
  %139 = getelementptr inbounds i8, ptr %49, i64 6
  %140 = add nsw i32 %44, -1
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %142, label %43, !llvm.loop !399

142:                                              ; preds = %43
  %.lcssa5 = phi ptr [ %51, %43 ]
  %.lcssa4 = phi ptr [ %53, %43 ]
  %.lcssa3 = phi ptr [ %86, %43 ]
  %.lcssa2 = phi ptr [ %103, %43 ]
  %.lcssa1 = phi ptr [ %122, %43 ]
  %.lcssa = phi ptr [ %139, %43 ]
  %143 = load i32, ptr %38, align 8, !tbaa !202
  br label %144

144:                                              ; preds = %142, %4
  %145 = phi i32 [ %39, %4 ], [ %143, %142 ]
  %146 = phi ptr [ %35, %4 ], [ %.lcssa2, %142 ]
  %147 = phi ptr [ %37, %4 ], [ %.lcssa, %142 ]
  %148 = phi ptr [ %21, %4 ], [ %.lcssa3, %142 ]
  %149 = phi ptr [ %25, %4 ], [ %.lcssa1, %142 ]
  %150 = phi ptr [ %30, %4 ], [ %.lcssa5, %142 ]
  %151 = phi ptr [ %34, %4 ], [ %.lcssa4, %142 ]
  %152 = and i32 %145, 1
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %202, label %154

154:                                              ; preds = %144
  %155 = load i8, ptr %150, align 1, !tbaa !7
  %156 = load i8, ptr %151, align 1, !tbaa !7
  %157 = zext i8 %156 to i64
  %158 = getelementptr inbounds i32, ptr %10, i64 %157
  %159 = load i32, ptr %158, align 4, !tbaa !41
  %160 = zext i8 %155 to i64
  %161 = getelementptr inbounds i64, ptr %16, i64 %160
  %162 = load i64, ptr %161, align 8, !tbaa !49
  %163 = getelementptr inbounds i64, ptr %14, i64 %157
  %164 = load i64, ptr %163, align 8, !tbaa !49
  %165 = add nsw i64 %164, %162
  %166 = lshr i64 %165, 16
  %167 = trunc i64 %166 to i32
  %168 = getelementptr inbounds i32, ptr %12, i64 %160
  %169 = load i32, ptr %168, align 4, !tbaa !41
  %170 = load i8, ptr %148, align 1, !tbaa !7
  %171 = zext i8 %170 to i32
  %172 = add nsw i32 %159, %171
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds i8, ptr %8, i64 %173
  %175 = load i8, ptr %174, align 1, !tbaa !7
  store i8 %175, ptr %146, align 1, !tbaa !7
  %176 = add nsw i32 %171, %167
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds i8, ptr %8, i64 %177
  %179 = load i8, ptr %178, align 1, !tbaa !7
  %180 = getelementptr inbounds i8, ptr %146, i64 1
  store i8 %179, ptr %180, align 1, !tbaa !7
  %181 = add nsw i32 %169, %171
  %182 = sext i32 %181 to i64
  %183 = getelementptr inbounds i8, ptr %8, i64 %182
  %184 = load i8, ptr %183, align 1, !tbaa !7
  %185 = getelementptr inbounds i8, ptr %146, i64 2
  store i8 %184, ptr %185, align 1, !tbaa !7
  %186 = load i8, ptr %149, align 1, !tbaa !7
  %187 = zext i8 %186 to i32
  %188 = add nsw i32 %159, %187
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds i8, ptr %8, i64 %189
  %191 = load i8, ptr %190, align 1, !tbaa !7
  store i8 %191, ptr %147, align 1, !tbaa !7
  %192 = add nsw i32 %187, %167
  %193 = sext i32 %192 to i64
  %194 = getelementptr inbounds i8, ptr %8, i64 %193
  %195 = load i8, ptr %194, align 1, !tbaa !7
  %196 = getelementptr inbounds i8, ptr %147, i64 1
  store i8 %195, ptr %196, align 1, !tbaa !7
  %197 = add nsw i32 %169, %187
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds i8, ptr %8, i64 %198
  %200 = load i8, ptr %199, align 1, !tbaa !7
  %201 = getelementptr inbounds i8, ptr %147, i64 2
  store i8 %200, ptr %201, align 1, !tbaa !7
  br label %202

202:                                              ; preds = %154, %144
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @merged_1v_upsample(ptr noundef %0, ptr noundef %1, ptr nocapture noundef %2, i32 %3, ptr noundef %4, ptr nocapture noundef %5, i32 %6) #6 {
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 81
  %9 = load ptr, ptr %8, align 8, !tbaa !307
  %10 = getelementptr inbounds %struct.my_upsampler, ptr %9, i64 0, i32 1
  %11 = load ptr, ptr %10, align 8, !tbaa !390
  %12 = load i32, ptr %2, align 4, !tbaa !41
  %13 = load i32, ptr %5, align 4, !tbaa !41
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds ptr, ptr %4, i64 %14
  tail call void %11(ptr noundef %0, ptr noundef %1, i32 noundef %12, ptr noundef %15) #32
  %16 = load i32, ptr %5, align 4, !tbaa !41
  %17 = add i32 %16, 1
  store i32 %17, ptr %5, align 4, !tbaa !41
  %18 = load i32, ptr %2, align 4, !tbaa !41
  %19 = add i32 %18, 1
  store i32 %19, ptr %2, align 4, !tbaa !41
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @h2v1_merged_upsample(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 noundef %2, ptr nocapture noundef readonly %3) #15 {
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 81
  %6 = load ptr, ptr %5, align 8, !tbaa !307
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 61
  %8 = load ptr, ptr %7, align 8, !tbaa !203
  %9 = getelementptr inbounds %struct.my_upsampler, ptr %6, i64 0, i32 2
  %10 = load ptr, ptr %9, align 8, !tbaa !391
  %11 = getelementptr inbounds %struct.my_upsampler, ptr %6, i64 0, i32 3
  %12 = load ptr, ptr %11, align 8, !tbaa !392
  %13 = getelementptr inbounds %struct.my_upsampler, ptr %6, i64 0, i32 4
  %14 = load ptr, ptr %13, align 8, !tbaa !393
  %15 = getelementptr inbounds %struct.my_upsampler, ptr %6, i64 0, i32 5
  %16 = load ptr, ptr %15, align 8, !tbaa !394
  %17 = load ptr, ptr %1, align 8, !tbaa !10
  %18 = zext i32 %2 to i64
  %19 = getelementptr inbounds ptr, ptr %17, i64 %18
  %20 = load ptr, ptr %19, align 8, !tbaa !10
  %21 = getelementptr inbounds ptr, ptr %1, i64 1
  %22 = load ptr, ptr %21, align 8, !tbaa !10
  %23 = getelementptr inbounds ptr, ptr %22, i64 %18
  %24 = load ptr, ptr %23, align 8, !tbaa !10
  %25 = getelementptr inbounds ptr, ptr %1, i64 2
  %26 = load ptr, ptr %25, align 8, !tbaa !10
  %27 = getelementptr inbounds ptr, ptr %26, i64 %18
  %28 = load ptr, ptr %27, align 8, !tbaa !10
  %29 = load ptr, ptr %3, align 8, !tbaa !10
  %30 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  %31 = load i32, ptr %30, align 8, !tbaa !202
  %32 = icmp ult i32 %31, 2
  br i1 %32, label %98, label %33

33:                                               ; preds = %4
  %34 = lshr i32 %31, 1
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i32 [ %94, %35 ], [ %34, %33 ]
  %37 = phi ptr [ %43, %35 ], [ %28, %33 ]
  %38 = phi ptr [ %41, %35 ], [ %24, %33 ]
  %39 = phi ptr [ %76, %35 ], [ %20, %33 ]
  %40 = phi ptr [ %93, %35 ], [ %29, %33 ]
  %41 = getelementptr inbounds i8, ptr %38, i64 1
  %42 = load i8, ptr %38, align 1, !tbaa !7
  %43 = getelementptr inbounds i8, ptr %37, i64 1
  %44 = load i8, ptr %37, align 1, !tbaa !7
  %45 = zext i8 %44 to i64
  %46 = getelementptr inbounds i32, ptr %10, i64 %45
  %47 = load i32, ptr %46, align 4, !tbaa !41
  %48 = zext i8 %42 to i64
  %49 = getelementptr inbounds i64, ptr %16, i64 %48
  %50 = load i64, ptr %49, align 8, !tbaa !49
  %51 = getelementptr inbounds i64, ptr %14, i64 %45
  %52 = load i64, ptr %51, align 8, !tbaa !49
  %53 = add nsw i64 %52, %50
  %54 = lshr i64 %53, 16
  %55 = trunc i64 %54 to i32
  %56 = getelementptr inbounds i32, ptr %12, i64 %48
  %57 = load i32, ptr %56, align 4, !tbaa !41
  %58 = getelementptr inbounds i8, ptr %39, i64 1
  %59 = load i8, ptr %39, align 1, !tbaa !7
  %60 = zext i8 %59 to i32
  %61 = add nsw i32 %47, %60
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds i8, ptr %8, i64 %62
  %64 = load i8, ptr %63, align 1, !tbaa !7
  store i8 %64, ptr %40, align 1, !tbaa !7
  %65 = add nsw i32 %60, %55
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds i8, ptr %8, i64 %66
  %68 = load i8, ptr %67, align 1, !tbaa !7
  %69 = getelementptr inbounds i8, ptr %40, i64 1
  store i8 %68, ptr %69, align 1, !tbaa !7
  %70 = add nsw i32 %57, %60
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds i8, ptr %8, i64 %71
  %73 = load i8, ptr %72, align 1, !tbaa !7
  %74 = getelementptr inbounds i8, ptr %40, i64 2
  store i8 %73, ptr %74, align 1, !tbaa !7
  %75 = getelementptr inbounds i8, ptr %40, i64 3
  %76 = getelementptr inbounds i8, ptr %39, i64 2
  %77 = load i8, ptr %58, align 1, !tbaa !7
  %78 = zext i8 %77 to i32
  %79 = add nsw i32 %47, %78
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds i8, ptr %8, i64 %80
  %82 = load i8, ptr %81, align 1, !tbaa !7
  store i8 %82, ptr %75, align 1, !tbaa !7
  %83 = add nsw i32 %78, %55
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds i8, ptr %8, i64 %84
  %86 = load i8, ptr %85, align 1, !tbaa !7
  %87 = getelementptr inbounds i8, ptr %40, i64 4
  store i8 %86, ptr %87, align 1, !tbaa !7
  %88 = add nsw i32 %57, %78
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i8, ptr %8, i64 %89
  %91 = load i8, ptr %90, align 1, !tbaa !7
  %92 = getelementptr inbounds i8, ptr %40, i64 5
  store i8 %91, ptr %92, align 1, !tbaa !7
  %93 = getelementptr inbounds i8, ptr %40, i64 6
  %94 = add nsw i32 %36, -1
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %35, !llvm.loop !400

96:                                               ; preds = %35
  %.lcssa3 = phi ptr [ %41, %35 ]
  %.lcssa2 = phi ptr [ %43, %35 ]
  %.lcssa1 = phi ptr [ %76, %35 ]
  %.lcssa = phi ptr [ %93, %35 ]
  %97 = load i32, ptr %30, align 8, !tbaa !202
  br label %98

98:                                               ; preds = %96, %4
  %99 = phi i32 [ %31, %4 ], [ %97, %96 ]
  %100 = phi ptr [ %29, %4 ], [ %.lcssa, %96 ]
  %101 = phi ptr [ %20, %4 ], [ %.lcssa1, %96 ]
  %102 = phi ptr [ %24, %4 ], [ %.lcssa3, %96 ]
  %103 = phi ptr [ %28, %4 ], [ %.lcssa2, %96 ]
  %104 = and i32 %99, 1
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %138, label %106

106:                                              ; preds = %98
  %107 = load i8, ptr %102, align 1, !tbaa !7
  %108 = load i8, ptr %103, align 1, !tbaa !7
  %109 = zext i8 %108 to i64
  %110 = getelementptr inbounds i32, ptr %10, i64 %109
  %111 = load i32, ptr %110, align 4, !tbaa !41
  %112 = zext i8 %107 to i64
  %113 = getelementptr inbounds i64, ptr %16, i64 %112
  %114 = load i64, ptr %113, align 8, !tbaa !49
  %115 = getelementptr inbounds i64, ptr %14, i64 %109
  %116 = load i64, ptr %115, align 8, !tbaa !49
  %117 = add nsw i64 %116, %114
  %118 = lshr i64 %117, 16
  %119 = trunc i64 %118 to i32
  %120 = getelementptr inbounds i32, ptr %12, i64 %112
  %121 = load i32, ptr %120, align 4, !tbaa !41
  %122 = load i8, ptr %101, align 1, !tbaa !7
  %123 = zext i8 %122 to i32
  %124 = add nsw i32 %111, %123
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds i8, ptr %8, i64 %125
  %127 = load i8, ptr %126, align 1, !tbaa !7
  store i8 %127, ptr %100, align 1, !tbaa !7
  %128 = add nsw i32 %123, %119
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds i8, ptr %8, i64 %129
  %131 = load i8, ptr %130, align 1, !tbaa !7
  %132 = getelementptr inbounds i8, ptr %100, i64 1
  store i8 %131, ptr %132, align 1, !tbaa !7
  %133 = add nsw i32 %121, %123
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds i8, ptr %8, i64 %134
  %136 = load i8, ptr %135, align 1, !tbaa !7
  %137 = getelementptr inbounds i8, ptr %100, i64 2
  store i8 %136, ptr %137, align 1, !tbaa !7
  br label %138

138:                                              ; preds = %106, %98
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.umin.i32(i32, i32) #14

; Function Attrs: nounwind optsize uwtable
define internal void @jinit_phuff_decoder(ptr noundef %0) #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !50
  %4 = load ptr, ptr %3, align 8, !tbaa !65
  %5 = tail call ptr %4(ptr noundef %0, i32 noundef 1, i64 noundef 96) #32
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 79
  store ptr %5, ptr %6, align 8, !tbaa !168
  store ptr @start_pass_phuff_decoder, ptr %5, align 8, !tbaa !401
  %7 = getelementptr i8, ptr %5, i64 56
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %7, i8 0, i64 32, i1 false), !tbaa !10
  %8 = load ptr, ptr %2, align 8, !tbaa !50
  %9 = load ptr, ptr %8, align 8, !tbaa !65
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 8
  %11 = load i32, ptr %10, align 8, !tbaa !81
  %12 = shl nsw i32 %11, 6
  %13 = sext i32 %12 to i64
  %14 = shl nsw i64 %13, 2
  %15 = tail call ptr %9(ptr noundef %0, i32 noundef 1, i64 noundef %14) #32
  %16 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 38
  store ptr %15, ptr %16, align 8, !tbaa !150
  %17 = load i32, ptr %10, align 8, !tbaa !81
  %18 = icmp sgt i32 %17, 0
  br i1 %18, label %19, label %26

19:                                               ; preds = %19, %1
  %20 = phi i32 [ %23, %19 ], [ 0, %1 ]
  %21 = phi ptr [ %22, %19 ], [ %15, %1 ]
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(256) %21, i8 -1, i64 256, i1 false), !tbaa !41
  %22 = getelementptr i8, ptr %21, i64 256
  %23 = add nuw nsw i32 %20, 1
  %24 = load i32, ptr %10, align 8, !tbaa !81
  %25 = icmp slt i32 %23, %24
  br i1 %25, label %19, label %26, !llvm.loop !404

26:                                               ; preds = %19, %1
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @start_pass_phuff_decoder(ptr noundef %0) #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 79
  %3 = load ptr, ptr %2, align 8, !tbaa !168
  %4 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 68
  %5 = load i32, ptr %4, align 4, !tbaa !190
  %6 = icmp eq i32 %5, 0
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 69
  %8 = load i32, ptr %7, align 8, !tbaa !254
  br i1 %6, label %9, label %11

9:                                                ; preds = %1
  %10 = icmp ne i32 %8, 0
  br label %19

11:                                               ; preds = %1
  %12 = icmp sgt i32 %5, %8
  %13 = icmp sgt i32 %8, 63
  %14 = or i1 %12, %13
  %15 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 62
  %16 = load i32, ptr %15, align 8, !tbaa !155
  %17 = icmp ne i32 %16, 1
  %18 = select i1 %17, i1 true, i1 %14
  br label %19

19:                                               ; preds = %11, %9
  %20 = phi i1 [ %10, %9 ], [ %18, %11 ]
  %21 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 70
  %22 = load i32, ptr %21, align 4, !tbaa !255
  %23 = icmp ne i32 %22, 0
  %24 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 71
  %25 = load i32, ptr %24, align 8, !tbaa !256
  %26 = add nsw i32 %22, -1
  %27 = icmp ne i32 %25, %26
  %28 = select i1 %23, i1 %27, i1 false
  %29 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 71
  %30 = icmp sgt i32 %25, 13
  %31 = select i1 %30, i1 true, i1 %28
  %32 = select i1 %31, i1 true, i1 %20
  br i1 %32, label %33, label %49

33:                                               ; preds = %19
  %34 = load ptr, ptr %0, align 8, !tbaa !16
  %35 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %34, i64 0, i32 5
  store i32 14, ptr %35, align 8, !tbaa !25
  %36 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %34, i64 0, i32 6
  store i32 %5, ptr %36, align 4, !tbaa !7
  %37 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 69
  %38 = load i32, ptr %37, align 8, !tbaa !254
  %39 = load ptr, ptr %0, align 8, !tbaa !16
  %40 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %39, i64 0, i32 6, i32 0, i64 1
  store i32 %38, ptr %40, align 4, !tbaa !7
  %41 = load i32, ptr %21, align 4, !tbaa !255
  %42 = load ptr, ptr %0, align 8, !tbaa !16
  %43 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %42, i64 0, i32 6, i32 0, i64 2
  store i32 %41, ptr %43, align 4, !tbaa !7
  %44 = load i32, ptr %29, align 8, !tbaa !256
  %45 = load ptr, ptr %0, align 8, !tbaa !16
  %46 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %45, i64 0, i32 6, i32 0, i64 3
  store i32 %44, ptr %46, align 4, !tbaa !7
  %47 = load ptr, ptr %0, align 8, !tbaa !16
  %48 = load ptr, ptr %47, align 8, !tbaa !26
  tail call void %48(ptr noundef nonnull %0) #32
  br label %49

49:                                               ; preds = %33, %19
  %50 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 62
  %51 = load i32, ptr %50, align 8, !tbaa !155
  %52 = icmp sgt i32 %51, 0
  br i1 %52, label %53, label %111

53:                                               ; preds = %49
  %54 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 38
  %55 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 69
  br label %56

56:                                               ; preds = %106, %53
  %57 = phi i64 [ 0, %53 ], [ %107, %106 ]
  %58 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 63, i64 %57
  %59 = load ptr, ptr %58, align 8, !tbaa !10
  %60 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %59, i64 0, i32 1
  %61 = load i32, ptr %60, align 4, !tbaa !157
  %62 = load ptr, ptr %54, align 8, !tbaa !150
  %63 = sext i32 %61 to i64
  %64 = getelementptr inbounds [64 x i32], ptr %62, i64 %63
  br i1 %6, label %77, label %65

65:                                               ; preds = %56
  %66 = load i32, ptr %64, align 4, !tbaa !41
  %67 = icmp slt i32 %66, 0
  br i1 %67, label %68, label %77

68:                                               ; preds = %65
  %69 = load ptr, ptr %0, align 8, !tbaa !16
  %70 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %69, i64 0, i32 5
  store i32 111, ptr %70, align 8, !tbaa !25
  %71 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %69, i64 0, i32 6
  store i32 %61, ptr %71, align 4, !tbaa !7
  %72 = load ptr, ptr %0, align 8, !tbaa !16
  %73 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %72, i64 0, i32 6, i32 0, i64 1
  store i32 0, ptr %73, align 4, !tbaa !7
  %74 = load ptr, ptr %0, align 8, !tbaa !16
  %75 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %74, i64 0, i32 1
  %76 = load ptr, ptr %75, align 8, !tbaa !85
  tail call void %76(ptr noundef nonnull %0, i32 noundef -1) #32
  br label %77

77:                                               ; preds = %68, %65, %56
  %78 = load i32, ptr %4, align 4, !tbaa !190
  %79 = load i32, ptr %55, align 8, !tbaa !254
  %80 = icmp sgt i32 %78, %79
  br i1 %80, label %106, label %81

81:                                               ; preds = %77
  %82 = sext i32 %78 to i64
  br label %83

83:                                               ; preds = %100, %81
  %84 = phi i64 [ %82, %81 ], [ %102, %100 ]
  %85 = getelementptr inbounds i32, ptr %64, i64 %84
  %86 = load i32, ptr %85, align 4, !tbaa !41
  %87 = tail call i32 @llvm.smax.i32(i32 %86, i32 0)
  %88 = load i32, ptr %21, align 4, !tbaa !255
  %89 = icmp eq i32 %88, %87
  br i1 %89, label %100, label %90

90:                                               ; preds = %83
  %91 = load ptr, ptr %0, align 8, !tbaa !16
  %92 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %91, i64 0, i32 5
  store i32 111, ptr %92, align 8, !tbaa !25
  %93 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %91, i64 0, i32 6
  store i32 %61, ptr %93, align 4, !tbaa !7
  %94 = load ptr, ptr %0, align 8, !tbaa !16
  %95 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %94, i64 0, i32 6, i32 0, i64 1
  %96 = trunc i64 %84 to i32
  store i32 %96, ptr %95, align 4, !tbaa !7
  %97 = load ptr, ptr %0, align 8, !tbaa !16
  %98 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %97, i64 0, i32 1
  %99 = load ptr, ptr %98, align 8, !tbaa !85
  tail call void %99(ptr noundef nonnull %0, i32 noundef -1) #32
  br label %100

100:                                              ; preds = %90, %83
  %101 = load i32, ptr %29, align 8, !tbaa !256
  store i32 %101, ptr %85, align 4, !tbaa !41
  %102 = add nsw i64 %84, 1
  %103 = load i32, ptr %55, align 8, !tbaa !254
  %104 = sext i32 %103 to i64
  %105 = icmp slt i64 %84, %104
  br i1 %105, label %83, label %106, !llvm.loop !405

106:                                              ; preds = %100, %77
  %107 = add nuw nsw i64 %57, 1
  %108 = load i32, ptr %50, align 8, !tbaa !155
  %109 = sext i32 %108 to i64
  %110 = icmp slt i64 %107, %109
  br i1 %110, label %56, label %111, !llvm.loop !406

111:                                              ; preds = %106, %49
  %112 = phi i32 [ %51, %49 ], [ %108, %106 ]
  %113 = load i32, ptr %21, align 4, !tbaa !255
  %114 = icmp eq i32 %113, 0
  %115 = getelementptr inbounds %struct.jpeg_d_main_controller, ptr %3, i64 0, i32 1
  %116 = select i1 %6, ptr @decode_mcu_DC_first, ptr @decode_mcu_AC_first
  %117 = select i1 %6, ptr @decode_mcu_DC_refine, ptr @decode_mcu_AC_refine
  %118 = select i1 %114, ptr %116, ptr %117
  store ptr %118, ptr %115, align 8, !tbaa !407
  %119 = icmp sgt i32 %112, 0
  br i1 %119, label %120, label %176

120:                                              ; preds = %111
  %121 = getelementptr inbounds %struct.phuff_entropy_decoder, ptr %3, i64 0, i32 5
  br label %122

122:                                              ; preds = %170, %120
  %123 = phi i64 [ 0, %120 ], [ %172, %170 ]
  %124 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 63, i64 %123
  %125 = load ptr, ptr %124, align 8, !tbaa !10
  br i1 %6, label %126, label %149

126:                                              ; preds = %122
  %127 = load i32, ptr %21, align 4, !tbaa !255
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %129, label %170

129:                                              ; preds = %126
  %130 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %125, i64 0, i32 5
  %131 = load i32, ptr %130, align 4, !tbaa !257
  %132 = icmp ugt i32 %131, 3
  br i1 %132, label %138, label %133

133:                                              ; preds = %129
  %134 = zext i32 %131 to i64
  %135 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 40, i64 %134
  %136 = load ptr, ptr %135, align 8, !tbaa !10
  %137 = icmp eq ptr %136, null
  br i1 %137, label %138, label %144

138:                                              ; preds = %133, %129
  %139 = load ptr, ptr %0, align 8, !tbaa !16
  %140 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %139, i64 0, i32 5
  store i32 49, ptr %140, align 8, !tbaa !25
  %141 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %139, i64 0, i32 6
  store i32 %131, ptr %141, align 4, !tbaa !7
  %142 = load ptr, ptr %0, align 8, !tbaa !16
  %143 = load ptr, ptr %142, align 8, !tbaa !26
  tail call void %143(ptr noundef nonnull %0) #32
  br label %144

144:                                              ; preds = %138, %133
  %145 = sext i32 %131 to i64
  %146 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 40, i64 %145
  %147 = load ptr, ptr %146, align 8, !tbaa !10
  %148 = getelementptr inbounds %struct.phuff_entropy_decoder, ptr %3, i64 0, i32 4, i64 %145
  tail call void @jpeg_make_d_derived_tbl(ptr noundef nonnull %0, ptr noundef %147, ptr noundef nonnull %148) #32
  br label %170

149:                                              ; preds = %122
  %150 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %125, i64 0, i32 6
  %151 = load i32, ptr %150, align 8, !tbaa !258
  %152 = icmp ugt i32 %151, 3
  br i1 %152, label %158, label %153

153:                                              ; preds = %149
  %154 = zext i32 %151 to i64
  %155 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 41, i64 %154
  %156 = load ptr, ptr %155, align 8, !tbaa !10
  %157 = icmp eq ptr %156, null
  br i1 %157, label %158, label %164

158:                                              ; preds = %153, %149
  %159 = load ptr, ptr %0, align 8, !tbaa !16
  %160 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %159, i64 0, i32 5
  store i32 49, ptr %160, align 8, !tbaa !25
  %161 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %159, i64 0, i32 6
  store i32 %151, ptr %161, align 4, !tbaa !7
  %162 = load ptr, ptr %0, align 8, !tbaa !16
  %163 = load ptr, ptr %162, align 8, !tbaa !26
  tail call void %163(ptr noundef nonnull %0) #32
  br label %164

164:                                              ; preds = %158, %153
  %165 = sext i32 %151 to i64
  %166 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 41, i64 %165
  %167 = load ptr, ptr %166, align 8, !tbaa !10
  %168 = getelementptr inbounds %struct.phuff_entropy_decoder, ptr %3, i64 0, i32 4, i64 %165
  tail call void @jpeg_make_d_derived_tbl(ptr noundef nonnull %0, ptr noundef %167, ptr noundef nonnull %168) #32
  %169 = load ptr, ptr %168, align 8, !tbaa !10
  store ptr %169, ptr %121, align 8, !tbaa !408
  br label %170

170:                                              ; preds = %164, %144, %126
  %171 = getelementptr inbounds %struct.phuff_entropy_decoder, ptr %3, i64 0, i32 2, i32 1, i64 %123
  store i32 0, ptr %171, align 4, !tbaa !41
  %172 = add nuw nsw i64 %123, 1
  %173 = load i32, ptr %50, align 8, !tbaa !155
  %174 = sext i32 %173 to i64
  %175 = icmp slt i64 %172, %174
  br i1 %175, label %122, label %176, !llvm.loop !409

176:                                              ; preds = %170, %111
  %177 = getelementptr inbounds %struct.phuff_entropy_decoder, ptr %3, i64 0, i32 1
  %178 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 49
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(20) %177, i8 0, i64 20, i1 false)
  %179 = load i32, ptr %178, align 8, !tbaa !260
  %180 = getelementptr inbounds %struct.phuff_entropy_decoder, ptr %3, i64 0, i32 3
  store i32 %179, ptr %180, align 4, !tbaa !410
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @decode_mcu_DC_first(ptr noundef %0, ptr nocapture noundef readonly %1) #6 {
  %3 = alloca %struct.bitread_working_state, align 8
  %4 = alloca %struct.savable_state.181, align 4
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 79
  %6 = load ptr, ptr %5, align 8, !tbaa !168
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 71
  %8 = load i32, ptr %7, align 8, !tbaa !256
  call void @llvm.lifetime.start.p0(i64 56, ptr nonnull %3) #31
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %4) #31
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 49
  %10 = load i32, ptr %9, align 8, !tbaa !260
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %19, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.phuff_entropy_decoder, ptr %6, i64 0, i32 3
  %14 = load i32, ptr %13, align 4, !tbaa !410
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %12
  %17 = tail call fastcc i32 @process_restart(ptr noundef nonnull %0) #33, !range !247
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %151, label %19

19:                                               ; preds = %16, %12, %2
  %20 = getelementptr inbounds %struct.bitread_working_state, ptr %3, i64 0, i32 5
  store ptr %0, ptr %20, align 8, !tbaa !242
  %21 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 5
  %22 = load ptr, ptr %21, align 8, !tbaa !54
  %23 = load ptr, ptr %22, align 8, !tbaa !58
  store ptr %23, ptr %3, align 8, !tbaa !238
  %24 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %22, i64 0, i32 1
  %25 = load i64, ptr %24, align 8, !tbaa !55
  %26 = getelementptr inbounds %struct.bitread_working_state, ptr %3, i64 0, i32 1
  store i64 %25, ptr %26, align 8, !tbaa !240
  %27 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 72
  %28 = load i32, ptr %27, align 4, !tbaa !267
  %29 = getelementptr inbounds %struct.bitread_working_state, ptr %3, i64 0, i32 2
  store i32 %28, ptr %29, align 8, !tbaa !241
  %30 = getelementptr inbounds %struct.phuff_entropy_decoder, ptr %6, i64 0, i32 1
  %31 = load i64, ptr %30, align 8, !tbaa !411
  %32 = getelementptr inbounds %struct.phuff_entropy_decoder, ptr %6, i64 0, i32 1, i32 1
  %33 = load i32, ptr %32, align 8, !tbaa !412
  %34 = getelementptr inbounds %struct.phuff_entropy_decoder, ptr %6, i64 0, i32 1, i32 2
  %35 = getelementptr inbounds %struct.bitread_working_state, ptr %3, i64 0, i32 6
  store ptr %34, ptr %35, align 8, !tbaa !243
  %36 = getelementptr inbounds %struct.phuff_entropy_decoder, ptr %6, i64 0, i32 2
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(20) %4, ptr noundef nonnull align 8 dereferenceable(20) %36, i64 20, i1 false), !tbaa.struct !413
  %37 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 66
  %38 = load i32, ptr %37, align 8, !tbaa !181
  %39 = icmp sgt i32 %38, 0
  br i1 %39, label %40, label %140

40:                                               ; preds = %19
  %41 = getelementptr inbounds %struct.bitread_working_state, ptr %3, i64 0, i32 3
  %42 = getelementptr inbounds %struct.bitread_working_state, ptr %3, i64 0, i32 4
  br label %43

43:                                               ; preds = %122, %40
  %44 = phi i64 [ 0, %40 ], [ %131, %122 ]
  %45 = phi i32 [ %33, %40 ], [ %124, %122 ]
  %46 = phi i64 [ %31, %40 ], [ %123, %122 ]
  %47 = getelementptr inbounds ptr, ptr %1, i64 %44
  %48 = load ptr, ptr %47, align 8, !tbaa !10
  %49 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 67, i64 %44
  %50 = load i32, ptr %49, align 4, !tbaa !41
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 63, i64 %51
  %53 = load ptr, ptr %52, align 8, !tbaa !10
  %54 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %53, i64 0, i32 5
  %55 = load i32, ptr %54, align 4, !tbaa !257
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds %struct.phuff_entropy_decoder, ptr %6, i64 0, i32 4, i64 %56
  %58 = load ptr, ptr %57, align 8, !tbaa !10
  %59 = icmp slt i32 %45, 8
  br i1 %59, label %60, label %67

60:                                               ; preds = %43
  %61 = call i32 @jpeg_fill_bit_buffer(ptr noundef nonnull %3, i64 noundef %46, i32 noundef %45, i32 noundef 0) #32
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %151, label %63

63:                                               ; preds = %60
  %64 = load i64, ptr %41, align 8, !tbaa !245
  %65 = load i32, ptr %42, align 8, !tbaa !246
  %66 = icmp slt i32 %65, 8
  br i1 %66, label %82, label %67

67:                                               ; preds = %63, %43
  %68 = phi i64 [ %64, %63 ], [ %46, %43 ]
  %69 = phi i32 [ %65, %63 ], [ %45, %43 ]
  %70 = add nsw i32 %69, -8
  %71 = zext i32 %70 to i64
  %72 = ashr i64 %68, %71
  %73 = and i64 %72, 255
  %74 = getelementptr inbounds %struct.d_derived_tbl, ptr %58, i64 0, i32 4, i64 %73
  %75 = load i32, ptr %74, align 4, !tbaa !41
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %82, label %77

77:                                               ; preds = %67
  %78 = sub nsw i32 %69, %75
  %79 = getelementptr inbounds %struct.d_derived_tbl, ptr %58, i64 0, i32 5, i64 %73
  %80 = load i8, ptr %79, align 1, !tbaa !7
  %81 = zext i8 %80 to i32
  br label %91

82:                                               ; preds = %67, %63
  %83 = phi i64 [ %64, %63 ], [ %68, %67 ]
  %84 = phi i32 [ %65, %63 ], [ %69, %67 ]
  %85 = phi i32 [ 1, %63 ], [ 9, %67 ]
  %86 = call i32 @jpeg_huff_decode(ptr noundef nonnull %3, i64 noundef %83, i32 noundef %84, ptr noundef %58, i32 noundef %85) #32
  %87 = icmp slt i32 %86, 0
  br i1 %87, label %151, label %88

88:                                               ; preds = %82
  %89 = load i64, ptr %41, align 8, !tbaa !245
  %90 = load i32, ptr %42, align 8, !tbaa !246
  br label %91

91:                                               ; preds = %88, %77
  %92 = phi i64 [ %68, %77 ], [ %89, %88 ]
  %93 = phi i32 [ %78, %77 ], [ %90, %88 ]
  %94 = phi i32 [ %81, %77 ], [ %86, %88 ]
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %122, label %96

96:                                               ; preds = %91
  %97 = icmp slt i32 %93, %94
  br i1 %97, label %98, label %104

98:                                               ; preds = %96
  %99 = call i32 @jpeg_fill_bit_buffer(ptr noundef nonnull %3, i64 noundef %92, i32 noundef %93, i32 noundef %94) #32
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %151, label %101

101:                                              ; preds = %98
  %102 = load i64, ptr %41, align 8, !tbaa !245
  %103 = load i32, ptr %42, align 8, !tbaa !246
  br label %104

104:                                              ; preds = %101, %96
  %105 = phi i64 [ %102, %101 ], [ %92, %96 ]
  %106 = phi i32 [ %103, %101 ], [ %93, %96 ]
  %107 = sub nsw i32 %106, %94
  %108 = zext i32 %107 to i64
  %109 = ashr i64 %105, %108
  %110 = trunc i64 %109 to i32
  %111 = shl nsw i32 -1, %94
  %112 = xor i32 %111, -1
  %113 = and i32 %110, %112
  %114 = zext i32 %94 to i64
  %115 = getelementptr inbounds [16 x i32], ptr @extend_test.30, i64 0, i64 %114
  %116 = load i32, ptr %115, align 4, !tbaa !41
  %117 = icmp slt i32 %113, %116
  br i1 %117, label %118, label %122

118:                                              ; preds = %104
  %119 = getelementptr inbounds [16 x i32], ptr @extend_offset.31, i64 0, i64 %114
  %120 = load i32, ptr %119, align 4, !tbaa !41
  %121 = add nsw i32 %120, %113
  br label %122

122:                                              ; preds = %118, %104, %91
  %123 = phi i64 [ %92, %91 ], [ %105, %104 ], [ %105, %118 ]
  %124 = phi i32 [ %93, %91 ], [ %107, %104 ], [ %107, %118 ]
  %125 = phi i32 [ 0, %91 ], [ %113, %104 ], [ %121, %118 ]
  %126 = getelementptr inbounds %struct.savable_state.181, ptr %4, i64 0, i32 1, i64 %51
  %127 = load i32, ptr %126, align 4, !tbaa !41
  %128 = add nsw i32 %127, %125
  store i32 %128, ptr %126, align 4, !tbaa !41
  %129 = shl i32 %128, %8
  %130 = trunc i32 %129 to i16
  store i16 %130, ptr %48, align 2, !tbaa !12
  %131 = add nuw nsw i64 %44, 1
  %132 = load i32, ptr %37, align 8, !tbaa !181
  %133 = sext i32 %132 to i64
  %134 = icmp slt i64 %131, %133
  br i1 %134, label %43, label %135, !llvm.loop !414

135:                                              ; preds = %122
  %.lcssa1 = phi i64 [ %123, %122 ]
  %.lcssa = phi i32 [ %124, %122 ]
  %136 = load ptr, ptr %3, align 8, !tbaa !238
  %137 = load ptr, ptr %21, align 8, !tbaa !54
  %138 = load i64, ptr %26, align 8, !tbaa !240
  %139 = load i32, ptr %29, align 8, !tbaa !241
  br label %140

140:                                              ; preds = %135, %19
  %141 = phi i32 [ %28, %19 ], [ %139, %135 ]
  %142 = phi i64 [ %25, %19 ], [ %138, %135 ]
  %143 = phi ptr [ %22, %19 ], [ %137, %135 ]
  %144 = phi ptr [ %23, %19 ], [ %136, %135 ]
  %145 = phi i64 [ %31, %19 ], [ %.lcssa1, %135 ]
  %146 = phi i32 [ %33, %19 ], [ %.lcssa, %135 ]
  store ptr %144, ptr %143, align 8, !tbaa !58
  %147 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %143, i64 0, i32 1
  store i64 %142, ptr %147, align 8, !tbaa !55
  store i32 %141, ptr %27, align 4, !tbaa !267
  store i64 %145, ptr %30, align 8, !tbaa !411
  store i32 %146, ptr %32, align 8, !tbaa !412
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(20) %36, ptr noundef nonnull align 4 dereferenceable(20) %4, i64 20, i1 false), !tbaa.struct !413
  %148 = getelementptr inbounds %struct.phuff_entropy_decoder, ptr %6, i64 0, i32 3
  %149 = load i32, ptr %148, align 4, !tbaa !410
  %150 = add i32 %149, -1
  store i32 %150, ptr %148, align 4, !tbaa !410
  br label %151

151:                                              ; preds = %140, %98, %82, %60, %16
  %152 = phi i32 [ 1, %140 ], [ 0, %16 ], [ 0, %98 ], [ 0, %82 ], [ 0, %60 ]
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %4) #31
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %3) #31
  ret i32 %152
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @decode_mcu_AC_first(ptr noundef %0, ptr nocapture noundef readonly %1) #6 {
  %3 = alloca %struct.bitread_working_state, align 8
  %4 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 79
  %5 = load ptr, ptr %4, align 8, !tbaa !168
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 69
  %7 = load i32, ptr %6, align 8, !tbaa !254
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 71
  %9 = load i32, ptr %8, align 8, !tbaa !256
  call void @llvm.lifetime.start.p0(i64 56, ptr nonnull %3) #31
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 49
  %11 = load i32, ptr %10, align 8, !tbaa !260
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %20, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %struct.phuff_entropy_decoder, ptr %5, i64 0, i32 3
  %15 = load i32, ptr %14, align 4, !tbaa !410
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %20

17:                                               ; preds = %13
  %18 = tail call fastcc i32 @process_restart(ptr noundef nonnull %0) #33, !range !247
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %181, label %20

20:                                               ; preds = %17, %13, %2
  %21 = getelementptr inbounds %struct.phuff_entropy_decoder, ptr %5, i64 0, i32 2
  %22 = load i32, ptr %21, align 8, !tbaa !415
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %26, label %24

24:                                               ; preds = %20
  %25 = add i32 %22, -1
  br label %176

26:                                               ; preds = %20
  %27 = getelementptr inbounds %struct.bitread_working_state, ptr %3, i64 0, i32 5
  store ptr %0, ptr %27, align 8, !tbaa !242
  %28 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 5
  %29 = load ptr, ptr %28, align 8, !tbaa !54
  %30 = load ptr, ptr %29, align 8, !tbaa !58
  store ptr %30, ptr %3, align 8, !tbaa !238
  %31 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %29, i64 0, i32 1
  %32 = load i64, ptr %31, align 8, !tbaa !55
  %33 = getelementptr inbounds %struct.bitread_working_state, ptr %3, i64 0, i32 1
  store i64 %32, ptr %33, align 8, !tbaa !240
  %34 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 72
  %35 = load i32, ptr %34, align 4, !tbaa !267
  %36 = getelementptr inbounds %struct.bitread_working_state, ptr %3, i64 0, i32 2
  store i32 %35, ptr %36, align 8, !tbaa !241
  %37 = getelementptr inbounds %struct.phuff_entropy_decoder, ptr %5, i64 0, i32 1
  %38 = load i64, ptr %37, align 8, !tbaa !411
  %39 = getelementptr inbounds %struct.phuff_entropy_decoder, ptr %5, i64 0, i32 1, i32 1
  %40 = load i32, ptr %39, align 8, !tbaa !412
  %41 = getelementptr inbounds %struct.phuff_entropy_decoder, ptr %5, i64 0, i32 1, i32 2
  %42 = getelementptr inbounds %struct.bitread_working_state, ptr %3, i64 0, i32 6
  store ptr %41, ptr %42, align 8, !tbaa !243
  %43 = load ptr, ptr %1, align 8, !tbaa !10
  %44 = getelementptr inbounds %struct.phuff_entropy_decoder, ptr %5, i64 0, i32 5
  %45 = load ptr, ptr %44, align 8, !tbaa !408
  %46 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 68
  %47 = load i32, ptr %46, align 4, !tbaa !190
  %48 = icmp sgt i32 %47, %7
  br i1 %48, label %167, label %49

49:                                               ; preds = %26
  %50 = getelementptr inbounds %struct.bitread_working_state, ptr %3, i64 0, i32 3
  %51 = getelementptr inbounds %struct.bitread_working_state, ptr %3, i64 0, i32 4
  br label %52

52:                                               ; preds = %161, %49
  %53 = phi i32 [ %40, %49 ], [ %164, %161 ]
  %54 = phi i64 [ %38, %49 ], [ %163, %161 ]
  %55 = phi i32 [ %47, %49 ], [ %165, %161 ]
  %56 = icmp slt i32 %53, 8
  br i1 %56, label %57, label %64

57:                                               ; preds = %52
  %58 = call i32 @jpeg_fill_bit_buffer(ptr noundef nonnull %3, i64 noundef %54, i32 noundef %53, i32 noundef 0) #32
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %181, label %60

60:                                               ; preds = %57
  %61 = load i64, ptr %50, align 8, !tbaa !245
  %62 = load i32, ptr %51, align 8, !tbaa !246
  %63 = icmp slt i32 %62, 8
  br i1 %63, label %79, label %64

64:                                               ; preds = %60, %52
  %65 = phi i64 [ %61, %60 ], [ %54, %52 ]
  %66 = phi i32 [ %62, %60 ], [ %53, %52 ]
  %67 = add nsw i32 %66, -8
  %68 = zext i32 %67 to i64
  %69 = ashr i64 %65, %68
  %70 = and i64 %69, 255
  %71 = getelementptr inbounds %struct.d_derived_tbl, ptr %45, i64 0, i32 4, i64 %70
  %72 = load i32, ptr %71, align 4, !tbaa !41
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %79, label %74

74:                                               ; preds = %64
  %75 = sub nsw i32 %66, %72
  %76 = getelementptr inbounds %struct.d_derived_tbl, ptr %45, i64 0, i32 5, i64 %70
  %77 = load i8, ptr %76, align 1, !tbaa !7
  %78 = zext i8 %77 to i32
  br label %88

79:                                               ; preds = %64, %60
  %80 = phi i64 [ %61, %60 ], [ %65, %64 ]
  %81 = phi i32 [ %62, %60 ], [ %66, %64 ]
  %82 = phi i32 [ 1, %60 ], [ 9, %64 ]
  %83 = call i32 @jpeg_huff_decode(ptr noundef nonnull %3, i64 noundef %80, i32 noundef %81, ptr noundef %45, i32 noundef %82) #32
  %84 = icmp slt i32 %83, 0
  br i1 %84, label %181, label %85

85:                                               ; preds = %79
  %86 = load i64, ptr %50, align 8, !tbaa !245
  %87 = load i32, ptr %51, align 8, !tbaa !246
  br label %88

88:                                               ; preds = %85, %74
  %89 = phi i64 [ %65, %74 ], [ %86, %85 ]
  %90 = phi i32 [ %75, %74 ], [ %87, %85 ]
  %91 = phi i32 [ %78, %74 ], [ %83, %85 ]
  %92 = lshr i32 %91, 4
  %93 = and i32 %91, 15
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %131, label %95

95:                                               ; preds = %88
  %96 = add nsw i32 %92, %55
  %97 = icmp slt i32 %90, %93
  br i1 %97, label %98, label %104

98:                                               ; preds = %95
  %99 = call i32 @jpeg_fill_bit_buffer(ptr noundef nonnull %3, i64 noundef %89, i32 noundef %90, i32 noundef %93) #32
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %181, label %101

101:                                              ; preds = %98
  %102 = load i64, ptr %50, align 8, !tbaa !245
  %103 = load i32, ptr %51, align 8, !tbaa !246
  br label %104

104:                                              ; preds = %101, %95
  %105 = phi i64 [ %102, %101 ], [ %89, %95 ]
  %106 = phi i32 [ %103, %101 ], [ %90, %95 ]
  %107 = sub nsw i32 %106, %93
  %108 = zext i32 %107 to i64
  %109 = ashr i64 %105, %108
  %110 = trunc i64 %109 to i32
  %111 = shl nsw i32 -1, %93
  %112 = xor i32 %111, -1
  %113 = and i32 %110, %112
  %114 = zext i32 %93 to i64
  %115 = getelementptr inbounds [16 x i32], ptr @extend_test.30, i64 0, i64 %114
  %116 = load i32, ptr %115, align 4, !tbaa !41
  %117 = icmp slt i32 %113, %116
  br i1 %117, label %118, label %122

118:                                              ; preds = %104
  %119 = getelementptr inbounds [16 x i32], ptr @extend_offset.31, i64 0, i64 %114
  %120 = load i32, ptr %119, align 4, !tbaa !41
  %121 = add nsw i32 %120, %113
  br label %122

122:                                              ; preds = %118, %104
  %123 = phi i32 [ %121, %118 ], [ %113, %104 ]
  %124 = shl i32 %123, %9
  %125 = trunc i32 %124 to i16
  %126 = sext i32 %96 to i64
  %127 = getelementptr inbounds [0 x i32], ptr @jpeg_natural_order, i64 0, i64 %126
  %128 = load i32, ptr %127, align 4, !tbaa !41
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds [64 x i16], ptr %43, i64 0, i64 %129
  store i16 %125, ptr %130, align 2, !tbaa !12
  br label %161

131:                                              ; preds = %88
  %132 = icmp eq i32 %92, 15
  br i1 %132, label %133, label %135

133:                                              ; preds = %131
  %134 = add nsw i32 %55, 15
  br label %161

135:                                              ; preds = %131
  %.lcssa3 = phi i64 [ %89, %131 ]
  %.lcssa2 = phi i32 [ %90, %131 ]
  %.lcssa1 = phi i32 [ %91, %131 ]
  %.lcssa = phi i32 [ %92, %131 ]
  %136 = shl nuw i32 1, %.lcssa
  %137 = icmp ult i32 %.lcssa1, 16
  br i1 %137, label %156, label %138

138:                                              ; preds = %135
  %139 = icmp slt i32 %.lcssa2, %.lcssa
  br i1 %139, label %140, label %146

140:                                              ; preds = %138
  %141 = call i32 @jpeg_fill_bit_buffer(ptr noundef nonnull %3, i64 noundef %.lcssa3, i32 noundef %.lcssa2, i32 noundef %.lcssa) #32
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %181, label %143

143:                                              ; preds = %140
  %144 = load i64, ptr %50, align 8, !tbaa !245
  %145 = load i32, ptr %51, align 8, !tbaa !246
  br label %146

146:                                              ; preds = %143, %138
  %147 = phi i64 [ %144, %143 ], [ %.lcssa3, %138 ]
  %148 = phi i32 [ %145, %143 ], [ %.lcssa2, %138 ]
  %149 = sub nsw i32 %148, %.lcssa
  %150 = zext i32 %149 to i64
  %151 = ashr i64 %147, %150
  %152 = trunc i64 %151 to i32
  %153 = add nsw i32 %136, -1
  %154 = and i32 %153, %152
  %155 = add i32 %154, %136
  br label %156

156:                                              ; preds = %146, %135
  %157 = phi i32 [ %155, %146 ], [ %136, %135 ]
  %158 = phi i64 [ %147, %146 ], [ %.lcssa3, %135 ]
  %159 = phi i32 [ %149, %146 ], [ %.lcssa2, %135 ]
  %160 = add i32 %157, -1
  br label %167

161:                                              ; preds = %133, %122
  %162 = phi i32 [ %96, %122 ], [ %134, %133 ]
  %163 = phi i64 [ %105, %122 ], [ %89, %133 ]
  %164 = phi i32 [ %107, %122 ], [ %90, %133 ]
  %165 = add nsw i32 %162, 1
  %166 = icmp slt i32 %162, %7
  br i1 %166, label %52, label %167, !llvm.loop !416

167:                                              ; preds = %161, %156, %26
  %168 = phi i32 [ %160, %156 ], [ 0, %26 ], [ 0, %161 ]
  %169 = phi i64 [ %158, %156 ], [ %38, %26 ], [ %163, %161 ]
  %170 = phi i32 [ %159, %156 ], [ %40, %26 ], [ %164, %161 ]
  %171 = load ptr, ptr %3, align 8, !tbaa !238
  %172 = load ptr, ptr %28, align 8, !tbaa !54
  store ptr %171, ptr %172, align 8, !tbaa !58
  %173 = load i64, ptr %33, align 8, !tbaa !240
  %174 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %172, i64 0, i32 1
  store i64 %173, ptr %174, align 8, !tbaa !55
  %175 = load i32, ptr %36, align 8, !tbaa !241
  store i32 %175, ptr %34, align 4, !tbaa !267
  store i64 %169, ptr %37, align 8, !tbaa !411
  store i32 %170, ptr %39, align 8, !tbaa !412
  br label %176

176:                                              ; preds = %167, %24
  %177 = phi i32 [ %25, %24 ], [ %168, %167 ]
  store i32 %177, ptr %21, align 8, !tbaa !415
  %178 = getelementptr inbounds %struct.phuff_entropy_decoder, ptr %5, i64 0, i32 3
  %179 = load i32, ptr %178, align 4, !tbaa !410
  %180 = add i32 %179, -1
  store i32 %180, ptr %178, align 4, !tbaa !410
  br label %181

181:                                              ; preds = %176, %140, %98, %79, %57, %17
  %182 = phi i32 [ 1, %176 ], [ 0, %17 ], [ 0, %140 ], [ 0, %98 ], [ 0, %79 ], [ 0, %57 ]
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %3) #31
  ret i32 %182
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @decode_mcu_DC_refine(ptr noundef %0, ptr nocapture noundef readonly %1) #6 {
  %3 = alloca %struct.bitread_working_state, align 8
  %4 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 79
  %5 = load ptr, ptr %4, align 8, !tbaa !168
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 71
  %7 = load i32, ptr %6, align 8, !tbaa !256
  %8 = shl nuw i32 1, %7
  call void @llvm.lifetime.start.p0(i64 56, ptr nonnull %3) #31
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 49
  %10 = load i32, ptr %9, align 8, !tbaa !260
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %19, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.phuff_entropy_decoder, ptr %5, i64 0, i32 3
  %14 = load i32, ptr %13, align 4, !tbaa !410
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %12
  %17 = tail call fastcc i32 @process_restart(ptr noundef nonnull %0) #33, !range !247
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %88, label %19

19:                                               ; preds = %16, %12, %2
  %20 = getelementptr inbounds %struct.bitread_working_state, ptr %3, i64 0, i32 5
  store ptr %0, ptr %20, align 8, !tbaa !242
  %21 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 5
  %22 = load ptr, ptr %21, align 8, !tbaa !54
  %23 = load ptr, ptr %22, align 8, !tbaa !58
  store ptr %23, ptr %3, align 8, !tbaa !238
  %24 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %22, i64 0, i32 1
  %25 = load i64, ptr %24, align 8, !tbaa !55
  %26 = getelementptr inbounds %struct.bitread_working_state, ptr %3, i64 0, i32 1
  store i64 %25, ptr %26, align 8, !tbaa !240
  %27 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 72
  %28 = load i32, ptr %27, align 4, !tbaa !267
  %29 = getelementptr inbounds %struct.bitread_working_state, ptr %3, i64 0, i32 2
  store i32 %28, ptr %29, align 8, !tbaa !241
  %30 = getelementptr inbounds %struct.phuff_entropy_decoder, ptr %5, i64 0, i32 1
  %31 = load i64, ptr %30, align 8, !tbaa !411
  %32 = getelementptr inbounds %struct.phuff_entropy_decoder, ptr %5, i64 0, i32 1, i32 1
  %33 = load i32, ptr %32, align 8, !tbaa !412
  %34 = getelementptr inbounds %struct.phuff_entropy_decoder, ptr %5, i64 0, i32 1, i32 2
  %35 = getelementptr inbounds %struct.bitread_working_state, ptr %3, i64 0, i32 6
  store ptr %34, ptr %35, align 8, !tbaa !243
  %36 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 66
  %37 = load i32, ptr %36, align 8, !tbaa !181
  %38 = icmp sgt i32 %37, 0
  br i1 %38, label %39, label %77

39:                                               ; preds = %19
  %40 = getelementptr inbounds %struct.bitread_working_state, ptr %3, i64 0, i32 3
  %41 = getelementptr inbounds %struct.bitread_working_state, ptr %3, i64 0, i32 4
  %42 = trunc i32 %8 to i16
  br label %43

43:                                               ; preds = %67, %39
  %44 = phi i64 [ 0, %39 ], [ %68, %67 ]
  %45 = phi i32 [ %33, %39 ], [ %59, %67 ]
  %46 = phi i64 [ %31, %39 ], [ %57, %67 ]
  %47 = getelementptr inbounds ptr, ptr %1, i64 %44
  %48 = load ptr, ptr %47, align 8, !tbaa !10
  %49 = icmp slt i32 %45, 1
  br i1 %49, label %50, label %56

50:                                               ; preds = %43
  %51 = call i32 @jpeg_fill_bit_buffer(ptr noundef nonnull %3, i64 noundef %46, i32 noundef %45, i32 noundef 1) #32
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %88, label %53

53:                                               ; preds = %50
  %54 = load i64, ptr %40, align 8, !tbaa !245
  %55 = load i32, ptr %41, align 8, !tbaa !246
  br label %56

56:                                               ; preds = %53, %43
  %57 = phi i64 [ %54, %53 ], [ %46, %43 ]
  %58 = phi i32 [ %55, %53 ], [ %45, %43 ]
  %59 = add nsw i32 %58, -1
  %60 = zext i32 %59 to i64
  %61 = shl nuw i64 1, %60
  %62 = and i64 %61, %57
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %67, label %64

64:                                               ; preds = %56
  %65 = load i16, ptr %48, align 2, !tbaa !12
  %66 = or i16 %65, %42
  store i16 %66, ptr %48, align 2, !tbaa !12
  br label %67

67:                                               ; preds = %64, %56
  %68 = add nuw nsw i64 %44, 1
  %69 = load i32, ptr %36, align 8, !tbaa !181
  %70 = sext i32 %69 to i64
  %71 = icmp slt i64 %68, %70
  br i1 %71, label %43, label %72, !llvm.loop !417

72:                                               ; preds = %67
  %.lcssa1 = phi i64 [ %57, %67 ]
  %.lcssa = phi i32 [ %59, %67 ]
  %73 = load ptr, ptr %3, align 8, !tbaa !238
  %74 = load ptr, ptr %21, align 8, !tbaa !54
  %75 = load i64, ptr %26, align 8, !tbaa !240
  %76 = load i32, ptr %29, align 8, !tbaa !241
  br label %77

77:                                               ; preds = %72, %19
  %78 = phi i32 [ %28, %19 ], [ %76, %72 ]
  %79 = phi i64 [ %25, %19 ], [ %75, %72 ]
  %80 = phi ptr [ %22, %19 ], [ %74, %72 ]
  %81 = phi ptr [ %23, %19 ], [ %73, %72 ]
  %82 = phi i64 [ %31, %19 ], [ %.lcssa1, %72 ]
  %83 = phi i32 [ %33, %19 ], [ %.lcssa, %72 ]
  store ptr %81, ptr %80, align 8, !tbaa !58
  %84 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %80, i64 0, i32 1
  store i64 %79, ptr %84, align 8, !tbaa !55
  store i32 %78, ptr %27, align 4, !tbaa !267
  store i64 %82, ptr %30, align 8, !tbaa !411
  store i32 %83, ptr %32, align 8, !tbaa !412
  %85 = getelementptr inbounds %struct.phuff_entropy_decoder, ptr %5, i64 0, i32 3
  %86 = load i32, ptr %85, align 4, !tbaa !410
  %87 = add i32 %86, -1
  store i32 %87, ptr %85, align 4, !tbaa !410
  br label %88

88:                                               ; preds = %77, %50, %16
  %89 = phi i32 [ 1, %77 ], [ 0, %16 ], [ 0, %50 ]
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %3) #31
  ret i32 %89
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @decode_mcu_AC_refine(ptr noundef %0, ptr nocapture noundef readonly %1) #6 {
  %3 = alloca %struct.bitread_working_state, align 8
  %4 = alloca [64 x i32], align 16
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 79
  %6 = load ptr, ptr %5, align 8, !tbaa !168
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 69
  %8 = load i32, ptr %7, align 8, !tbaa !254
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 71
  %10 = load i32, ptr %9, align 8, !tbaa !256
  %11 = shl nuw i32 1, %10
  %12 = shl nsw i32 -1, %10
  call void @llvm.lifetime.start.p0(i64 56, ptr nonnull %3) #31
  call void @llvm.lifetime.start.p0(i64 256, ptr nonnull %4) #31
  %13 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 49
  %14 = load i32, ptr %13, align 8, !tbaa !260
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %23, label %16

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.phuff_entropy_decoder, ptr %6, i64 0, i32 3
  %18 = load i32, ptr %17, align 4, !tbaa !410
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %23

20:                                               ; preds = %16
  %21 = tail call fastcc i32 @process_restart(ptr noundef nonnull %0) #33, !range !247
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %307, label %23

23:                                               ; preds = %20, %16, %2
  %24 = getelementptr inbounds %struct.bitread_working_state, ptr %3, i64 0, i32 5
  store ptr %0, ptr %24, align 8, !tbaa !242
  %25 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 5
  %26 = load ptr, ptr %25, align 8, !tbaa !54
  %27 = load ptr, ptr %26, align 8, !tbaa !58
  store ptr %27, ptr %3, align 8, !tbaa !238
  %28 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %26, i64 0, i32 1
  %29 = load i64, ptr %28, align 8, !tbaa !55
  %30 = getelementptr inbounds %struct.bitread_working_state, ptr %3, i64 0, i32 1
  store i64 %29, ptr %30, align 8, !tbaa !240
  %31 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 72
  %32 = load i32, ptr %31, align 4, !tbaa !267
  %33 = getelementptr inbounds %struct.bitread_working_state, ptr %3, i64 0, i32 2
  store i32 %32, ptr %33, align 8, !tbaa !241
  %34 = getelementptr inbounds %struct.phuff_entropy_decoder, ptr %6, i64 0, i32 1
  %35 = load i64, ptr %34, align 8, !tbaa !411
  %36 = getelementptr inbounds %struct.phuff_entropy_decoder, ptr %6, i64 0, i32 1, i32 1
  %37 = load i32, ptr %36, align 8, !tbaa !412
  %38 = getelementptr inbounds %struct.phuff_entropy_decoder, ptr %6, i64 0, i32 1, i32 2
  %39 = getelementptr inbounds %struct.bitread_working_state, ptr %3, i64 0, i32 6
  store ptr %38, ptr %39, align 8, !tbaa !243
  %40 = getelementptr inbounds %struct.phuff_entropy_decoder, ptr %6, i64 0, i32 2
  %41 = load i32, ptr %40, align 8, !tbaa !415
  %42 = load ptr, ptr %1, align 8, !tbaa !10
  %43 = getelementptr inbounds %struct.phuff_entropy_decoder, ptr %6, i64 0, i32 5
  %44 = load ptr, ptr %43, align 8, !tbaa !408
  %45 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 68
  %46 = load i32, ptr %45, align 4, !tbaa !190
  %47 = icmp ne i32 %41, 0
  %48 = icmp sgt i32 %46, %8
  %49 = select i1 %47, i1 true, i1 %48
  br i1 %49, label %216, label %50

50:                                               ; preds = %23
  %51 = getelementptr inbounds %struct.bitread_working_state, ptr %3, i64 0, i32 3
  %52 = getelementptr inbounds %struct.bitread_working_state, ptr %3, i64 0, i32 4
  %53 = sext i32 %8 to i64
  br label %54

54:                                               ; preds = %212, %50
  %55 = phi i32 [ 0, %50 ], [ %213, %212 ]
  %56 = phi i32 [ %46, %50 ], [ %214, %212 ]
  %57 = phi i32 [ %37, %50 ], [ %199, %212 ]
  %58 = phi i64 [ %35, %50 ], [ %198, %212 ]
  %59 = icmp slt i32 %57, 8
  br i1 %59, label %60, label %67

60:                                               ; preds = %54
  %61 = call i32 @jpeg_fill_bit_buffer(ptr noundef nonnull %3, i64 noundef %58, i32 noundef %57, i32 noundef 0) #32
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %293, label %63

63:                                               ; preds = %60
  %64 = load i64, ptr %51, align 8, !tbaa !245
  %65 = load i32, ptr %52, align 8, !tbaa !246
  %66 = icmp slt i32 %65, 8
  br i1 %66, label %82, label %67

67:                                               ; preds = %63, %54
  %68 = phi i64 [ %64, %63 ], [ %58, %54 ]
  %69 = phi i32 [ %65, %63 ], [ %57, %54 ]
  %70 = add nsw i32 %69, -8
  %71 = zext i32 %70 to i64
  %72 = ashr i64 %68, %71
  %73 = and i64 %72, 255
  %74 = getelementptr inbounds %struct.d_derived_tbl, ptr %44, i64 0, i32 4, i64 %73
  %75 = load i32, ptr %74, align 4, !tbaa !41
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %82, label %77

77:                                               ; preds = %67
  %78 = sub nsw i32 %69, %75
  %79 = getelementptr inbounds %struct.d_derived_tbl, ptr %44, i64 0, i32 5, i64 %73
  %80 = load i8, ptr %79, align 1, !tbaa !7
  %81 = zext i8 %80 to i32
  br label %91

82:                                               ; preds = %67, %63
  %83 = phi i64 [ %64, %63 ], [ %68, %67 ]
  %84 = phi i32 [ %65, %63 ], [ %69, %67 ]
  %85 = phi i32 [ 1, %63 ], [ 9, %67 ]
  %86 = call i32 @jpeg_huff_decode(ptr noundef nonnull %3, i64 noundef %83, i32 noundef %84, ptr noundef %44, i32 noundef %85) #32
  %87 = icmp slt i32 %86, 0
  br i1 %87, label %293, label %88

88:                                               ; preds = %82
  %89 = load i64, ptr %51, align 8, !tbaa !245
  %90 = load i32, ptr %52, align 8, !tbaa !246
  br label %91

91:                                               ; preds = %88, %77
  %92 = phi i64 [ %68, %77 ], [ %89, %88 ]
  %93 = phi i32 [ %78, %77 ], [ %90, %88 ]
  %94 = phi i32 [ %81, %77 ], [ %86, %88 ]
  %95 = lshr i32 %94, 4
  %96 = and i32 %94, 15
  switch i32 %96, label %97 [
    i32 0, label %119
    i32 1, label %102
  ]

97:                                               ; preds = %91
  %98 = load ptr, ptr %0, align 8, !tbaa !16
  %99 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %98, i64 0, i32 5
  store i32 114, ptr %99, align 8, !tbaa !25
  %100 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %98, i64 0, i32 1
  %101 = load ptr, ptr %100, align 8, !tbaa !85
  call void %101(ptr noundef nonnull %0, i32 noundef -1) #32
  br label %102

102:                                              ; preds = %97, %91
  %103 = icmp slt i32 %93, 1
  br i1 %103, label %104, label %110

104:                                              ; preds = %102
  %105 = call i32 @jpeg_fill_bit_buffer(ptr noundef nonnull %3, i64 noundef %92, i32 noundef %93, i32 noundef 1) #32
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %293, label %107

107:                                              ; preds = %104
  %108 = load i64, ptr %51, align 8, !tbaa !245
  %109 = load i32, ptr %52, align 8, !tbaa !246
  br label %110

110:                                              ; preds = %107, %102
  %111 = phi i64 [ %108, %107 ], [ %92, %102 ]
  %112 = phi i32 [ %109, %107 ], [ %93, %102 ]
  %113 = add nsw i32 %112, -1
  %114 = zext i32 %113 to i64
  %115 = shl nuw i64 1, %114
  %116 = and i64 %115, %111
  %117 = icmp eq i64 %116, 0
  %118 = select i1 %117, i32 %12, i32 %11
  br label %142

119:                                              ; preds = %91
  %120 = icmp eq i32 %95, 15
  br i1 %120, label %142, label %121

121:                                              ; preds = %119
  %.lcssa11 = phi i64 [ %92, %119 ]
  %.lcssa10 = phi i32 [ %93, %119 ]
  %.lcssa9 = phi i32 [ %94, %119 ]
  %.lcssa8 = phi i32 [ %95, %119 ]
  %.lcssa7 = phi i32 [ %55, %119 ]
  %.lcssa6 = phi i32 [ %56, %119 ]
  %122 = shl nuw i32 1, %.lcssa8
  %123 = icmp ult i32 %.lcssa9, 16
  br i1 %123, label %223, label %124

124:                                              ; preds = %121
  %125 = icmp slt i32 %.lcssa10, %.lcssa8
  br i1 %125, label %126, label %132

126:                                              ; preds = %124
  %127 = call i32 @jpeg_fill_bit_buffer(ptr noundef nonnull %3, i64 noundef %.lcssa11, i32 noundef %.lcssa10, i32 noundef %.lcssa8) #32
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %293, label %129

129:                                              ; preds = %126
  %130 = load i64, ptr %51, align 8, !tbaa !245
  %131 = load i32, ptr %52, align 8, !tbaa !246
  br label %132

132:                                              ; preds = %129, %124
  %133 = phi i64 [ %130, %129 ], [ %.lcssa11, %124 ]
  %134 = phi i32 [ %131, %129 ], [ %.lcssa10, %124 ]
  %135 = sub nsw i32 %134, %.lcssa8
  %136 = zext i32 %135 to i64
  %137 = ashr i64 %133, %136
  %138 = trunc i64 %137 to i32
  %139 = add nsw i32 %122, -1
  %140 = and i32 %139, %138
  %141 = add i32 %140, %122
  br label %216

142:                                              ; preds = %119, %110
  %143 = phi i64 [ %92, %119 ], [ %111, %110 ]
  %144 = phi i32 [ %93, %119 ], [ %113, %110 ]
  %145 = phi i32 [ 0, %119 ], [ %118, %110 ]
  %146 = sext i32 %56 to i64
  %147 = call i32 @llvm.smax.i32(i32 %56, i32 %8)
  %148 = add i32 %147, 1
  br label %149

149:                                              ; preds = %189, %142
  %150 = phi i64 [ %193, %189 ], [ %146, %142 ]
  %151 = phi i32 [ %190, %189 ], [ %95, %142 ]
  %152 = phi i64 [ %191, %189 ], [ %143, %142 ]
  %153 = phi i32 [ %192, %189 ], [ %144, %142 ]
  %154 = getelementptr inbounds [0 x i32], ptr @jpeg_natural_order, i64 0, i64 %150
  %155 = load i32, ptr %154, align 4, !tbaa !41
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds i16, ptr %42, i64 %156
  %158 = load i16, ptr %157, align 2, !tbaa !12
  %159 = icmp eq i16 %158, 0
  br i1 %159, label %186, label %160

160:                                              ; preds = %149
  %161 = icmp slt i32 %153, 1
  br i1 %161, label %162, label %168

162:                                              ; preds = %160
  %163 = call i32 @jpeg_fill_bit_buffer(ptr noundef nonnull %3, i64 noundef %152, i32 noundef %153, i32 noundef 1) #32
  %164 = icmp eq i32 %163, 0
  br i1 %164, label %293, label %165

165:                                              ; preds = %162
  %166 = load i64, ptr %51, align 8, !tbaa !245
  %167 = load i32, ptr %52, align 8, !tbaa !246
  br label %168

168:                                              ; preds = %165, %160
  %169 = phi i64 [ %166, %165 ], [ %152, %160 ]
  %170 = phi i32 [ %167, %165 ], [ %153, %160 ]
  %171 = add nsw i32 %170, -1
  %172 = zext i32 %171 to i64
  %173 = shl nuw i64 1, %172
  %174 = and i64 %173, %169
  %175 = icmp eq i64 %174, 0
  br i1 %175, label %189, label %176

176:                                              ; preds = %168
  %177 = load i16, ptr %157, align 2, !tbaa !12
  %178 = sext i16 %177 to i32
  %179 = and i32 %11, %178
  %180 = icmp eq i32 %179, 0
  br i1 %180, label %181, label %189

181:                                              ; preds = %176
  %182 = icmp slt i16 %177, 0
  %183 = select i1 %182, i32 %12, i32 %11
  %184 = trunc i32 %183 to i16
  %185 = add i16 %177, %184
  store i16 %185, ptr %157, align 2, !tbaa !12
  br label %189

186:                                              ; preds = %149
  %187 = add nsw i32 %151, -1
  %188 = icmp slt i32 %151, 1
  br i1 %188, label %195, label %189

189:                                              ; preds = %186, %181, %176, %168
  %190 = phi i32 [ %151, %176 ], [ %151, %168 ], [ %187, %186 ], [ %151, %181 ]
  %191 = phi i64 [ %169, %176 ], [ %169, %168 ], [ %152, %186 ], [ %169, %181 ]
  %192 = phi i32 [ %171, %176 ], [ %171, %168 ], [ %153, %186 ], [ %171, %181 ]
  %193 = add nsw i64 %150, 1
  %194 = icmp slt i64 %150, %53
  br i1 %194, label %149, label %197, !llvm.loop !418

195:                                              ; preds = %186
  %.lcssa4 = phi i64 [ %150, %186 ]
  %.lcssa2 = phi i64 [ %152, %186 ]
  %.lcssa = phi i32 [ %153, %186 ]
  %196 = trunc i64 %.lcssa4 to i32
  br label %197

197:                                              ; preds = %195, %189
  %198 = phi i64 [ %.lcssa2, %195 ], [ %191, %189 ]
  %199 = phi i32 [ %.lcssa, %195 ], [ %192, %189 ]
  %200 = phi i32 [ %196, %195 ], [ %148, %189 ]
  %201 = icmp eq i32 %145, 0
  br i1 %201, label %212, label %202

202:                                              ; preds = %197
  %203 = sext i32 %200 to i64
  %204 = getelementptr inbounds [0 x i32], ptr @jpeg_natural_order, i64 0, i64 %203
  %205 = load i32, ptr %204, align 4, !tbaa !41
  %206 = trunc i32 %145 to i16
  %207 = sext i32 %205 to i64
  %208 = getelementptr inbounds [64 x i16], ptr %42, i64 0, i64 %207
  store i16 %206, ptr %208, align 2, !tbaa !12
  %209 = add nsw i32 %55, 1
  %210 = sext i32 %55 to i64
  %211 = getelementptr inbounds [64 x i32], ptr %4, i64 0, i64 %210
  store i32 %205, ptr %211, align 4, !tbaa !41
  br label %212

212:                                              ; preds = %202, %197
  %213 = phi i32 [ %209, %202 ], [ %55, %197 ]
  %214 = add nsw i32 %200, 1
  %215 = icmp slt i32 %200, %8
  br i1 %215, label %54, label %281, !llvm.loop !419

216:                                              ; preds = %132, %23
  %217 = phi i32 [ %141, %132 ], [ %41, %23 ]
  %218 = phi i64 [ %133, %132 ], [ %35, %23 ]
  %219 = phi i32 [ %135, %132 ], [ %37, %23 ]
  %220 = phi i32 [ %.lcssa6, %132 ], [ %46, %23 ]
  %221 = phi i32 [ %.lcssa7, %132 ], [ 0, %23 ]
  %222 = icmp eq i32 %217, 0
  br i1 %222, label %281, label %223

223:                                              ; preds = %216, %121
  %224 = phi i32 [ %221, %216 ], [ %.lcssa7, %121 ]
  %225 = phi i32 [ %220, %216 ], [ %.lcssa6, %121 ]
  %226 = phi i32 [ %219, %216 ], [ %.lcssa10, %121 ]
  %227 = phi i64 [ %218, %216 ], [ %.lcssa11, %121 ]
  %228 = phi i32 [ %217, %216 ], [ %122, %121 ]
  %229 = icmp sgt i32 %225, %8
  br i1 %229, label %277, label %230

230:                                              ; preds = %223
  %231 = getelementptr inbounds %struct.bitread_working_state, ptr %3, i64 0, i32 3
  %232 = getelementptr inbounds %struct.bitread_working_state, ptr %3, i64 0, i32 4
  %233 = sext i32 %225 to i64
  %234 = add i32 %8, 1
  br label %235

235:                                              ; preds = %271, %230
  %236 = phi i64 [ %233, %230 ], [ %274, %271 ]
  %237 = phi i32 [ %226, %230 ], [ %273, %271 ]
  %238 = phi i64 [ %227, %230 ], [ %272, %271 ]
  %239 = getelementptr inbounds [0 x i32], ptr @jpeg_natural_order, i64 0, i64 %236
  %240 = load i32, ptr %239, align 4, !tbaa !41
  %241 = sext i32 %240 to i64
  %242 = getelementptr inbounds i16, ptr %42, i64 %241
  %243 = load i16, ptr %242, align 2, !tbaa !12
  %244 = icmp eq i16 %243, 0
  br i1 %244, label %271, label %245

245:                                              ; preds = %235
  %246 = icmp slt i32 %237, 1
  br i1 %246, label %247, label %253

247:                                              ; preds = %245
  %248 = call i32 @jpeg_fill_bit_buffer(ptr noundef nonnull %3, i64 noundef %238, i32 noundef %237, i32 noundef 1) #32
  %249 = icmp eq i32 %248, 0
  br i1 %249, label %293, label %250

250:                                              ; preds = %247
  %251 = load i64, ptr %231, align 8, !tbaa !245
  %252 = load i32, ptr %232, align 8, !tbaa !246
  br label %253

253:                                              ; preds = %250, %245
  %254 = phi i64 [ %251, %250 ], [ %238, %245 ]
  %255 = phi i32 [ %252, %250 ], [ %237, %245 ]
  %256 = add nsw i32 %255, -1
  %257 = zext i32 %256 to i64
  %258 = shl nuw i64 1, %257
  %259 = and i64 %258, %254
  %260 = icmp eq i64 %259, 0
  br i1 %260, label %271, label %261

261:                                              ; preds = %253
  %262 = load i16, ptr %242, align 2, !tbaa !12
  %263 = sext i16 %262 to i32
  %264 = and i32 %11, %263
  %265 = icmp eq i32 %264, 0
  br i1 %265, label %266, label %271

266:                                              ; preds = %261
  %267 = icmp slt i16 %262, 0
  %268 = select i1 %267, i32 %12, i32 %11
  %269 = trunc i32 %268 to i16
  %270 = add i16 %262, %269
  store i16 %270, ptr %242, align 2, !tbaa !12
  br label %271

271:                                              ; preds = %266, %261, %253, %235
  %272 = phi i64 [ %254, %261 ], [ %254, %253 ], [ %238, %235 ], [ %254, %266 ]
  %273 = phi i32 [ %256, %261 ], [ %256, %253 ], [ %237, %235 ], [ %256, %266 ]
  %274 = add nsw i64 %236, 1
  %275 = trunc i64 %274 to i32
  %276 = icmp eq i32 %234, %275
  br i1 %276, label %277, label %235, !llvm.loop !420

277:                                              ; preds = %271, %223
  %278 = phi i64 [ %227, %223 ], [ %272, %271 ]
  %279 = phi i32 [ %226, %223 ], [ %273, %271 ]
  %280 = add i32 %228, -1
  br label %281

281:                                              ; preds = %277, %216, %212
  %282 = phi i32 [ %280, %277 ], [ 0, %216 ], [ 0, %212 ]
  %283 = phi i64 [ %278, %277 ], [ %218, %216 ], [ %198, %212 ]
  %284 = phi i32 [ %279, %277 ], [ %219, %216 ], [ %199, %212 ]
  %285 = load ptr, ptr %3, align 8, !tbaa !238
  %286 = load ptr, ptr %25, align 8, !tbaa !54
  store ptr %285, ptr %286, align 8, !tbaa !58
  %287 = load i64, ptr %30, align 8, !tbaa !240
  %288 = getelementptr inbounds %struct.jpeg_source_mgr, ptr %286, i64 0, i32 1
  store i64 %287, ptr %288, align 8, !tbaa !55
  %289 = load i32, ptr %33, align 8, !tbaa !241
  store i32 %289, ptr %31, align 4, !tbaa !267
  store i64 %283, ptr %34, align 8, !tbaa !411
  store i32 %284, ptr %36, align 8, !tbaa !412
  store i32 %282, ptr %40, align 8, !tbaa !415
  %290 = getelementptr inbounds %struct.phuff_entropy_decoder, ptr %6, i64 0, i32 3
  %291 = load i32, ptr %290, align 4, !tbaa !410
  %292 = add i32 %291, -1
  store i32 %292, ptr %290, align 4, !tbaa !410
  br label %307

293:                                              ; preds = %247, %162, %126, %104, %82, %60
  %294 = phi i32 [ %.lcssa7, %126 ], [ %224, %247 ], [ %55, %162 ], [ %55, %104 ], [ %55, %82 ], [ %55, %60 ]
  %295 = icmp sgt i32 %294, 0
  br i1 %295, label %296, label %307

296:                                              ; preds = %293
  %297 = zext i32 %294 to i64
  br label %298

298:                                              ; preds = %298, %296
  %299 = phi i64 [ %297, %296 ], [ %300, %298 ]
  %300 = add nsw i64 %299, -1
  %301 = and i64 %300, 4294967295
  %302 = getelementptr inbounds [64 x i32], ptr %4, i64 0, i64 %301
  %303 = load i32, ptr %302, align 4, !tbaa !41
  %304 = sext i32 %303 to i64
  %305 = getelementptr inbounds [64 x i16], ptr %42, i64 0, i64 %304
  store i16 0, ptr %305, align 2, !tbaa !12
  %306 = icmp ugt i64 %299, 1
  br i1 %306, label %298, label %307, !llvm.loop !421

307:                                              ; preds = %298, %293, %281, %20
  %308 = phi i32 [ 1, %281 ], [ 0, %20 ], [ 0, %293 ], [ 0, %298 ]
  call void @llvm.lifetime.end.p0(i64 256, ptr nonnull %4) #31
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %3) #31
  ret i32 %308
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc i32 @process_restart(ptr noundef %0) unnamed_addr #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 79
  %3 = load ptr, ptr %2, align 8, !tbaa !168
  %4 = getelementptr inbounds %struct.phuff_entropy_decoder, ptr %3, i64 0, i32 1, i32 1
  %5 = load i32, ptr %4, align 8, !tbaa !412
  %6 = sdiv i32 %5, 8
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 78
  %8 = load ptr, ptr %7, align 8, !tbaa !73
  %9 = getelementptr inbounds %struct.jpeg_marker_reader, ptr %8, i64 0, i32 8
  %10 = load i32, ptr %9, align 4, !tbaa !263
  %11 = add i32 %10, %6
  store i32 %11, ptr %9, align 4, !tbaa !263
  store i32 0, ptr %4, align 8, !tbaa !412
  %12 = getelementptr inbounds %struct.jpeg_marker_reader, ptr %8, i64 0, i32 2
  %13 = load ptr, ptr %12, align 8, !tbaa !264
  %14 = tail call i32 %13(ptr noundef %0) #32
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %33, label %16

16:                                               ; preds = %1
  %17 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 62
  %18 = load i32, ptr %17, align 8, !tbaa !155
  %19 = icmp sgt i32 %18, 0
  br i1 %19, label %20, label %27

20:                                               ; preds = %20, %16
  %21 = phi i64 [ %23, %20 ], [ 0, %16 ]
  %22 = getelementptr inbounds %struct.phuff_entropy_decoder, ptr %3, i64 0, i32 2, i32 1, i64 %21
  store i32 0, ptr %22, align 4, !tbaa !41
  %23 = add nuw nsw i64 %21, 1
  %24 = load i32, ptr %17, align 8, !tbaa !155
  %25 = sext i32 %24 to i64
  %26 = icmp slt i64 %23, %25
  br i1 %26, label %20, label %27, !llvm.loop !422

27:                                               ; preds = %20, %16
  %28 = getelementptr inbounds %struct.phuff_entropy_decoder, ptr %3, i64 0, i32 2
  store i32 0, ptr %28, align 8, !tbaa !415
  %29 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 49
  %30 = load i32, ptr %29, align 8, !tbaa !260
  %31 = getelementptr inbounds %struct.phuff_entropy_decoder, ptr %3, i64 0, i32 3
  store i32 %30, ptr %31, align 4, !tbaa !410
  %32 = getelementptr inbounds %struct.phuff_entropy_decoder, ptr %3, i64 0, i32 1, i32 2
  store i32 0, ptr %32, align 4, !tbaa !423
  br label %33

33:                                               ; preds = %27, %1
  %34 = phi i32 [ 1, %27 ], [ 0, %1 ]
  ret i32 %34
}

; Function Attrs: nounwind optsize uwtable
define internal void @jinit_d_post_controller(ptr noundef %0, i32 noundef %1) #6 {
  %3 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %3, align 8, !tbaa !50
  %5 = load ptr, ptr %4, align 8, !tbaa !65
  %6 = tail call ptr %5(ptr noundef %0, i32 noundef 1, i64 noundef 48) #32
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 76
  store ptr %6, ptr %7, align 8, !tbaa !324
  store ptr @start_pass_dpost, ptr %6, align 8, !tbaa !424
  %8 = getelementptr inbounds %struct.my_post_controller, ptr %6, i64 0, i32 1
  %9 = getelementptr inbounds %struct.my_post_controller, ptr %6, i64 0, i32 2
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 19
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %8, i8 0, i64 16, i1 false)
  %11 = load i32, ptr %10, align 4, !tbaa !43
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %39, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 58
  %15 = load i32, ptr %14, align 8, !tbaa !287
  %16 = getelementptr inbounds %struct.my_post_controller, ptr %6, i64 0, i32 3
  store i32 %15, ptr %16, align 8, !tbaa !426
  %17 = icmp eq i32 %1, 0
  %18 = load ptr, ptr %3, align 8, !tbaa !50
  %19 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  %20 = load i32, ptr %19, align 8, !tbaa !202
  %21 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 28
  %22 = load i32, ptr %21, align 8, !tbaa !199
  %23 = mul i32 %22, %20
  br i1 %17, label %35, label %24

24:                                               ; preds = %13
  %25 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %18, i64 0, i32 4
  %26 = load ptr, ptr %25, align 8, !tbaa !427
  %27 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 27
  %28 = load i32, ptr %27, align 4, !tbaa !31
  %29 = zext i32 %28 to i64
  %30 = zext i32 %15 to i64
  %31 = tail call i64 @jround_up(i64 noundef %29, i64 noundef %30) #32
  %32 = trunc i64 %31 to i32
  %33 = load i32, ptr %16, align 8, !tbaa !426
  %34 = tail call ptr %26(ptr noundef nonnull %0, i32 noundef 1, i32 noundef 0, i32 noundef %23, i32 noundef %32, i32 noundef %33) #32
  store ptr %34, ptr %8, align 8, !tbaa !428
  br label %39

35:                                               ; preds = %13
  %36 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %18, i64 0, i32 2
  %37 = load ptr, ptr %36, align 8, !tbaa !311
  %38 = tail call ptr %37(ptr noundef nonnull %0, i32 noundef 1, i32 noundef %23, i32 noundef %15) #32
  store ptr %38, ptr %9, align 8, !tbaa !429
  br label %39

39:                                               ; preds = %35, %24, %2
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @start_pass_dpost(ptr noundef %0, i32 noundef %1) #6 {
  %3 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 76
  %4 = load ptr, ptr %3, align 8, !tbaa !324
  switch i32 %1, label %50 [
    i32 0, label %5
    i32 3, label %30
    i32 2, label %40
  ]

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 19
  %7 = load i32, ptr %6, align 4, !tbaa !43
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %24, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.jpeg_d_main_controller, ptr %4, i64 0, i32 1
  store ptr @post_process_1pass, ptr %10, align 8, !tbaa !430
  %11 = getelementptr inbounds %struct.my_post_controller, ptr %4, i64 0, i32 2
  %12 = load ptr, ptr %11, align 8, !tbaa !429
  %13 = icmp eq ptr %12, null
  br i1 %13, label %14, label %54

14:                                               ; preds = %9
  %15 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  %16 = load ptr, ptr %15, align 8, !tbaa !50
  %17 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %16, i64 0, i32 7
  %18 = load ptr, ptr %17, align 8, !tbaa !431
  %19 = getelementptr inbounds %struct.my_post_controller, ptr %4, i64 0, i32 1
  %20 = load ptr, ptr %19, align 8, !tbaa !428
  %21 = getelementptr inbounds %struct.my_post_controller, ptr %4, i64 0, i32 3
  %22 = load i32, ptr %21, align 8, !tbaa !426
  %23 = tail call ptr %18(ptr noundef nonnull %0, ptr noundef %20, i32 noundef 0, i32 noundef %22, i32 noundef 1) #32
  store ptr %23, ptr %11, align 8, !tbaa !429
  br label %54

24:                                               ; preds = %5
  %25 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 81
  %26 = load ptr, ptr %25, align 8, !tbaa !307
  %27 = getelementptr inbounds %struct.jpeg_decomp_master, ptr %26, i64 0, i32 1
  %28 = load ptr, ptr %27, align 8, !tbaa !432
  %29 = getelementptr inbounds %struct.jpeg_d_main_controller, ptr %4, i64 0, i32 1
  store ptr %28, ptr %29, align 8, !tbaa !430
  br label %54

30:                                               ; preds = %2
  %31 = getelementptr inbounds %struct.my_post_controller, ptr %4, i64 0, i32 1
  %32 = load ptr, ptr %31, align 8, !tbaa !428
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %38

34:                                               ; preds = %30
  %35 = load ptr, ptr %0, align 8, !tbaa !16
  %36 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %35, i64 0, i32 5
  store i32 4, ptr %36, align 8, !tbaa !25
  %37 = load ptr, ptr %35, align 8, !tbaa !26
  tail call void %37(ptr noundef nonnull %0) #32
  br label %38

38:                                               ; preds = %34, %30
  %39 = getelementptr inbounds %struct.jpeg_d_main_controller, ptr %4, i64 0, i32 1
  store ptr @post_process_prepass, ptr %39, align 8, !tbaa !430
  br label %54

40:                                               ; preds = %2
  %41 = getelementptr inbounds %struct.my_post_controller, ptr %4, i64 0, i32 1
  %42 = load ptr, ptr %41, align 8, !tbaa !428
  %43 = icmp eq ptr %42, null
  br i1 %43, label %44, label %48

44:                                               ; preds = %40
  %45 = load ptr, ptr %0, align 8, !tbaa !16
  %46 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %45, i64 0, i32 5
  store i32 4, ptr %46, align 8, !tbaa !25
  %47 = load ptr, ptr %45, align 8, !tbaa !26
  tail call void %47(ptr noundef nonnull %0) #32
  br label %48

48:                                               ; preds = %44, %40
  %49 = getelementptr inbounds %struct.jpeg_d_main_controller, ptr %4, i64 0, i32 1
  store ptr @post_process_2pass, ptr %49, align 8, !tbaa !430
  br label %54

50:                                               ; preds = %2
  %51 = load ptr, ptr %0, align 8, !tbaa !16
  %52 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %51, i64 0, i32 5
  store i32 4, ptr %52, align 8, !tbaa !25
  %53 = load ptr, ptr %51, align 8, !tbaa !26
  tail call void %53(ptr noundef nonnull %0) #32
  br label %54

54:                                               ; preds = %50, %48, %38, %24, %14, %9
  %55 = getelementptr inbounds %struct.my_post_controller, ptr %4, i64 0, i32 5
  store i32 0, ptr %55, align 8, !tbaa !433
  %56 = getelementptr inbounds %struct.my_post_controller, ptr %4, i64 0, i32 4
  store i32 0, ptr %56, align 4, !tbaa !434
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @post_process_1pass(ptr noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %3, ptr noundef %4, ptr nocapture noundef %5, i32 noundef %6) #6 {
  %8 = alloca i32, align 4
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 76
  %10 = load ptr, ptr %9, align 8, !tbaa !324
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %8) #31
  %11 = load i32, ptr %5, align 4, !tbaa !41
  %12 = sub i32 %6, %11
  %13 = getelementptr inbounds %struct.my_post_controller, ptr %10, i64 0, i32 3
  %14 = load i32, ptr %13, align 8, !tbaa !426
  %15 = tail call i32 @llvm.umin.i32(i32 %12, i32 %14)
  store i32 0, ptr %8, align 4, !tbaa !41
  %16 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 81
  %17 = load ptr, ptr %16, align 8, !tbaa !307
  %18 = getelementptr inbounds %struct.jpeg_decomp_master, ptr %17, i64 0, i32 1
  %19 = load ptr, ptr %18, align 8, !tbaa !432
  %20 = getelementptr inbounds %struct.my_post_controller, ptr %10, i64 0, i32 2
  %21 = load ptr, ptr %20, align 8, !tbaa !429
  call void %19(ptr noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %3, ptr noundef %21, ptr noundef nonnull %8, i32 noundef %15) #32
  %22 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 83
  %23 = load ptr, ptr %22, align 8, !tbaa !369
  %24 = getelementptr inbounds %struct.jpeg_color_quantizer, ptr %23, i64 0, i32 1
  %25 = load ptr, ptr %24, align 8, !tbaa !435
  %26 = load ptr, ptr %20, align 8, !tbaa !429
  %27 = load i32, ptr %5, align 4, !tbaa !41
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds ptr, ptr %4, i64 %28
  %30 = load i32, ptr %8, align 4, !tbaa !41
  call void %25(ptr noundef %0, ptr noundef %26, ptr noundef %29, i32 noundef %30) #32
  %31 = load i32, ptr %8, align 4, !tbaa !41
  %32 = load i32, ptr %5, align 4, !tbaa !41
  %33 = add i32 %32, %31
  store i32 %33, ptr %5, align 4, !tbaa !41
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8) #31
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @post_process_prepass(ptr noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %3, ptr nocapture readnone %4, ptr nocapture noundef %5, i32 %6) #6 {
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 76
  %9 = load ptr, ptr %8, align 8, !tbaa !324
  %10 = getelementptr inbounds %struct.my_post_controller, ptr %9, i64 0, i32 5
  %11 = load i32, ptr %10, align 8, !tbaa !433
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %16, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.my_post_controller, ptr %9, i64 0, i32 2
  %15 = load ptr, ptr %14, align 8, !tbaa !429
  br label %30

16:                                               ; preds = %7
  %17 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  %18 = load ptr, ptr %17, align 8, !tbaa !50
  %19 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %18, i64 0, i32 7
  %20 = load ptr, ptr %19, align 8, !tbaa !431
  %21 = getelementptr inbounds %struct.my_post_controller, ptr %9, i64 0, i32 1
  %22 = load ptr, ptr %21, align 8, !tbaa !428
  %23 = getelementptr inbounds %struct.my_post_controller, ptr %9, i64 0, i32 4
  %24 = load i32, ptr %23, align 4, !tbaa !434
  %25 = getelementptr inbounds %struct.my_post_controller, ptr %9, i64 0, i32 3
  %26 = load i32, ptr %25, align 8, !tbaa !426
  %27 = tail call ptr %20(ptr noundef nonnull %0, ptr noundef %22, i32 noundef %24, i32 noundef %26, i32 noundef 1) #32
  %28 = getelementptr inbounds %struct.my_post_controller, ptr %9, i64 0, i32 2
  store ptr %27, ptr %28, align 8, !tbaa !429
  %29 = load i32, ptr %10, align 8, !tbaa !433
  br label %30

30:                                               ; preds = %16, %13
  %31 = phi ptr [ %27, %16 ], [ %15, %13 ]
  %32 = phi i32 [ %29, %16 ], [ %11, %13 ]
  %33 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 81
  %34 = load ptr, ptr %33, align 8, !tbaa !307
  %35 = getelementptr inbounds %struct.jpeg_decomp_master, ptr %34, i64 0, i32 1
  %36 = load ptr, ptr %35, align 8, !tbaa !432
  %37 = getelementptr inbounds %struct.my_post_controller, ptr %9, i64 0, i32 3
  %38 = load i32, ptr %37, align 8, !tbaa !426
  tail call void %36(ptr noundef nonnull %0, ptr noundef %1, ptr noundef %2, i32 noundef %3, ptr noundef %31, ptr noundef nonnull %10, i32 noundef %38) #32
  %39 = load i32, ptr %10, align 8, !tbaa !433
  %40 = icmp ugt i32 %39, %32
  br i1 %40, label %41, label %54

41:                                               ; preds = %30
  %42 = getelementptr inbounds %struct.my_post_controller, ptr %9, i64 0, i32 2
  %43 = sub i32 %39, %32
  %44 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 83
  %45 = load ptr, ptr %44, align 8, !tbaa !369
  %46 = getelementptr inbounds %struct.jpeg_color_quantizer, ptr %45, i64 0, i32 1
  %47 = load ptr, ptr %46, align 8, !tbaa !435
  %48 = load ptr, ptr %42, align 8, !tbaa !429
  %49 = zext i32 %32 to i64
  %50 = getelementptr inbounds ptr, ptr %48, i64 %49
  tail call void %47(ptr noundef nonnull %0, ptr noundef %50, ptr noundef null, i32 noundef %43) #32
  %51 = load i32, ptr %5, align 4, !tbaa !41
  %52 = add i32 %51, %43
  store i32 %52, ptr %5, align 4, !tbaa !41
  %53 = load i32, ptr %10, align 8, !tbaa !433
  br label %54

54:                                               ; preds = %41, %30
  %55 = phi i32 [ %53, %41 ], [ %39, %30 ]
  %56 = load i32, ptr %37, align 8, !tbaa !426
  %57 = icmp ult i32 %55, %56
  br i1 %57, label %62, label %58

58:                                               ; preds = %54
  %59 = getelementptr inbounds %struct.my_post_controller, ptr %9, i64 0, i32 4
  %60 = load i32, ptr %59, align 4, !tbaa !434
  %61 = add i32 %60, %56
  store i32 %61, ptr %59, align 4, !tbaa !434
  store i32 0, ptr %10, align 8, !tbaa !433
  br label %62

62:                                               ; preds = %58, %54
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @post_process_2pass(ptr noundef %0, ptr nocapture readnone %1, ptr nocapture readnone %2, i32 %3, ptr noundef %4, ptr nocapture noundef %5, i32 noundef %6) #6 {
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 76
  %9 = load ptr, ptr %8, align 8, !tbaa !324
  %10 = getelementptr inbounds %struct.my_post_controller, ptr %9, i64 0, i32 5
  %11 = load i32, ptr %10, align 8, !tbaa !433
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %16, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.my_post_controller, ptr %9, i64 0, i32 2
  %15 = load ptr, ptr %14, align 8, !tbaa !429
  br label %30

16:                                               ; preds = %7
  %17 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  %18 = load ptr, ptr %17, align 8, !tbaa !50
  %19 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %18, i64 0, i32 7
  %20 = load ptr, ptr %19, align 8, !tbaa !431
  %21 = getelementptr inbounds %struct.my_post_controller, ptr %9, i64 0, i32 1
  %22 = load ptr, ptr %21, align 8, !tbaa !428
  %23 = getelementptr inbounds %struct.my_post_controller, ptr %9, i64 0, i32 4
  %24 = load i32, ptr %23, align 4, !tbaa !434
  %25 = getelementptr inbounds %struct.my_post_controller, ptr %9, i64 0, i32 3
  %26 = load i32, ptr %25, align 8, !tbaa !426
  %27 = tail call ptr %20(ptr noundef nonnull %0, ptr noundef %22, i32 noundef %24, i32 noundef %26, i32 noundef 0) #32
  %28 = getelementptr inbounds %struct.my_post_controller, ptr %9, i64 0, i32 2
  store ptr %27, ptr %28, align 8, !tbaa !429
  %29 = load i32, ptr %10, align 8, !tbaa !433
  br label %30

30:                                               ; preds = %16, %13
  %31 = phi ptr [ %27, %16 ], [ %15, %13 ]
  %32 = phi i32 [ %29, %16 ], [ %11, %13 ]
  %33 = getelementptr inbounds %struct.my_post_controller, ptr %9, i64 0, i32 3
  %34 = load i32, ptr %33, align 8, !tbaa !426
  %35 = sub i32 %34, %32
  %36 = load i32, ptr %5, align 4, !tbaa !41
  %37 = sub i32 %6, %36
  %38 = tail call i32 @llvm.umin.i32(i32 %35, i32 %37)
  %39 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 27
  %40 = load i32, ptr %39, align 4, !tbaa !31
  %41 = getelementptr inbounds %struct.my_post_controller, ptr %9, i64 0, i32 4
  %42 = load i32, ptr %41, align 4, !tbaa !434
  %43 = sub i32 %40, %42
  %44 = tail call i32 @llvm.umin.i32(i32 %38, i32 %43)
  %45 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 83
  %46 = load ptr, ptr %45, align 8, !tbaa !369
  %47 = getelementptr inbounds %struct.jpeg_color_quantizer, ptr %46, i64 0, i32 1
  %48 = load ptr, ptr %47, align 8, !tbaa !435
  %49 = zext i32 %32 to i64
  %50 = getelementptr inbounds ptr, ptr %31, i64 %49
  %51 = zext i32 %36 to i64
  %52 = getelementptr inbounds ptr, ptr %4, i64 %51
  tail call void %48(ptr noundef nonnull %0, ptr noundef %50, ptr noundef %52, i32 noundef %44) #32
  %53 = load i32, ptr %5, align 4, !tbaa !41
  %54 = add i32 %53, %44
  store i32 %54, ptr %5, align 4, !tbaa !41
  %55 = load i32, ptr %10, align 8, !tbaa !433
  %56 = add i32 %55, %44
  store i32 %56, ptr %10, align 8, !tbaa !433
  %57 = load i32, ptr %33, align 8, !tbaa !426
  %58 = icmp ult i32 %56, %57
  br i1 %58, label %62, label %59

59:                                               ; preds = %30
  %60 = load i32, ptr %41, align 4, !tbaa !434
  %61 = add i32 %60, %57
  store i32 %61, ptr %41, align 4, !tbaa !434
  store i32 0, ptr %10, align 8, !tbaa !433
  br label %62

62:                                               ; preds = %59, %30
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @jinit_upsampler(ptr noundef %0) #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !50
  %4 = load ptr, ptr %3, align 8, !tbaa !65
  %5 = tail call ptr %4(ptr noundef %0, i32 noundef 1, i64 noundef 256) #32
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 81
  store ptr %5, ptr %6, align 8, !tbaa !307
  store ptr @start_pass_upsample, ptr %5, align 8, !tbaa !436
  %7 = getelementptr inbounds %struct.jpeg_decomp_master, ptr %5, i64 0, i32 1
  store ptr @sep_upsample, ptr %7, align 8, !tbaa !438
  %8 = getelementptr inbounds %struct.jpeg_decomp_master, ptr %5, i64 0, i32 2
  store i32 0, ptr %8, align 8, !tbaa !439
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 56
  %10 = load i32, ptr %9, align 8, !tbaa !335
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %16, label %12

12:                                               ; preds = %1
  %13 = load ptr, ptr %0, align 8, !tbaa !16
  %14 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %13, i64 0, i32 5
  store i32 23, ptr %14, align 8, !tbaa !25
  %15 = load ptr, ptr %13, align 8, !tbaa !26
  tail call void %15(ptr noundef nonnull %0) #32
  br label %16

16:                                               ; preds = %12, %1
  %17 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 17
  %18 = load i32, ptr %17, align 4, !tbaa !47
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %24, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 59
  %22 = load i32, ptr %21, align 4, !tbaa !288
  %23 = icmp sgt i32 %22, 1
  br label %24

24:                                               ; preds = %20, %16
  %25 = phi i1 [ false, %16 ], [ %23, %20 ]
  %26 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 8
  %27 = load i32, ptr %26, align 8, !tbaa !81
  %28 = icmp sgt i32 %27, 0
  br i1 %28, label %29, label %127

29:                                               ; preds = %24
  %30 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 43
  %31 = load ptr, ptr %30, align 8, !tbaa !86
  %32 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 59
  %33 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 57
  %34 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 58
  %35 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  br label %36

36:                                               ; preds = %121, %29
  %37 = phi i64 [ 0, %29 ], [ %122, %121 ]
  %38 = phi ptr [ %31, %29 ], [ %123, %121 ]
  %39 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %38, i64 0, i32 2
  %40 = load i32, ptr %39, align 8, !tbaa !138
  %41 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %38, i64 0, i32 9
  %42 = load i32, ptr %41, align 4, !tbaa !177
  %43 = mul nsw i32 %42, %40
  %44 = load i32, ptr %32, align 4, !tbaa !288
  %45 = sdiv i32 %43, %44
  %46 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %38, i64 0, i32 3
  %47 = load i32, ptr %46, align 4, !tbaa !134
  %48 = mul nsw i32 %47, %42
  %49 = sdiv i32 %48, %44
  %50 = load i32, ptr %33, align 4, !tbaa !286
  %51 = load i32, ptr %34, align 8, !tbaa !287
  %52 = getelementptr inbounds %struct.my_upsampler.198, ptr %5, i64 0, i32 5, i64 %37
  store i32 %49, ptr %52, align 4, !tbaa !41
  %53 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %38, i64 0, i32 12
  %54 = load i32, ptr %53, align 8, !tbaa !175
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %58

56:                                               ; preds = %36
  %57 = getelementptr inbounds %struct.my_upsampler.198, ptr %5, i64 0, i32 2, i64 %37
  store ptr @noop_upsample, ptr %57, align 8, !tbaa !10
  br label %121

58:                                               ; preds = %36
  %59 = icmp eq i32 %45, %50
  %60 = icmp eq i32 %49, %51
  %61 = select i1 %59, i1 %60, i1 false
  br i1 %61, label %62, label %64

62:                                               ; preds = %58
  %63 = getelementptr inbounds %struct.my_upsampler.198, ptr %5, i64 0, i32 2, i64 %37
  store ptr @fullsize_upsample, ptr %63, align 8, !tbaa !10
  br label %121

64:                                               ; preds = %58
  %65 = shl nsw i32 %45, 1
  %66 = icmp eq i32 %65, %50
  %67 = select i1 %66, i1 %60, i1 false
  br i1 %67, label %68, label %77

68:                                               ; preds = %64
  br i1 %25, label %69, label %75

69:                                               ; preds = %68
  %70 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %38, i64 0, i32 10
  %71 = load i32, ptr %70, align 8, !tbaa !290
  %72 = icmp ugt i32 %71, 2
  br i1 %72, label %73, label %75

73:                                               ; preds = %69
  %74 = getelementptr inbounds %struct.my_upsampler.198, ptr %5, i64 0, i32 2, i64 %37
  store ptr @h2v1_fancy_upsample, ptr %74, align 8, !tbaa !10
  br label %108

75:                                               ; preds = %69, %68
  %76 = getelementptr inbounds %struct.my_upsampler.198, ptr %5, i64 0, i32 2, i64 %37
  store ptr @h2v1_upsample, ptr %76, align 8, !tbaa !10
  br label %108

77:                                               ; preds = %64
  %78 = shl nsw i32 %49, 1
  %79 = icmp eq i32 %78, %51
  %80 = select i1 %66, i1 %79, i1 false
  br i1 %80, label %81, label %90

81:                                               ; preds = %77
  br i1 %25, label %82, label %88

82:                                               ; preds = %81
  %83 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %38, i64 0, i32 10
  %84 = load i32, ptr %83, align 8, !tbaa !290
  %85 = icmp ugt i32 %84, 2
  br i1 %85, label %86, label %88

86:                                               ; preds = %82
  %87 = getelementptr inbounds %struct.my_upsampler.198, ptr %5, i64 0, i32 2, i64 %37
  store ptr @h2v2_fancy_upsample, ptr %87, align 8, !tbaa !10
  store i32 1, ptr %8, align 8, !tbaa !439
  br label %108

88:                                               ; preds = %82, %81
  %89 = getelementptr inbounds %struct.my_upsampler.198, ptr %5, i64 0, i32 2, i64 %37
  store ptr @h2v2_upsample, ptr %89, align 8, !tbaa !10
  br label %108

90:                                               ; preds = %77
  %91 = srem i32 %50, %45
  %92 = sdiv i32 %50, %45
  %93 = icmp eq i32 %91, 0
  br i1 %93, label %94, label %104

94:                                               ; preds = %90
  %95 = srem i32 %51, %49
  %96 = sdiv i32 %51, %49
  %97 = icmp eq i32 %95, 0
  br i1 %97, label %98, label %104

98:                                               ; preds = %94
  %99 = getelementptr inbounds %struct.my_upsampler.198, ptr %5, i64 0, i32 2, i64 %37
  store ptr @int_upsample, ptr %99, align 8, !tbaa !10
  %100 = trunc i32 %92 to i8
  %101 = getelementptr inbounds %struct.my_upsampler.198, ptr %5, i64 0, i32 6, i64 %37
  store i8 %100, ptr %101, align 1, !tbaa !7
  %102 = trunc i32 %96 to i8
  %103 = getelementptr inbounds %struct.my_upsampler.198, ptr %5, i64 0, i32 7, i64 %37
  store i8 %102, ptr %103, align 1, !tbaa !7
  br label %108

104:                                              ; preds = %94, %90
  %105 = load ptr, ptr %0, align 8, !tbaa !16
  %106 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %105, i64 0, i32 5
  store i32 37, ptr %106, align 8, !tbaa !25
  %107 = load ptr, ptr %105, align 8, !tbaa !26
  tail call void %107(ptr noundef nonnull %0) #32
  br label %108

108:                                              ; preds = %104, %98, %88, %86, %75, %73
  %109 = load ptr, ptr %2, align 8, !tbaa !50
  %110 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %109, i64 0, i32 2
  %111 = load ptr, ptr %110, align 8, !tbaa !311
  %112 = load i32, ptr %35, align 8, !tbaa !202
  %113 = zext i32 %112 to i64
  %114 = load i32, ptr %33, align 4, !tbaa !286
  %115 = sext i32 %114 to i64
  %116 = tail call i64 @jround_up(i64 noundef %113, i64 noundef %115) #32
  %117 = trunc i64 %116 to i32
  %118 = load i32, ptr %34, align 8, !tbaa !287
  %119 = tail call ptr %111(ptr noundef nonnull %0, i32 noundef 1, i32 noundef %117, i32 noundef %118) #32
  %120 = getelementptr inbounds %struct.my_upsampler.198, ptr %5, i64 0, i32 1, i64 %37
  store ptr %119, ptr %120, align 8, !tbaa !10
  br label %121

121:                                              ; preds = %108, %62, %56
  %122 = add nuw nsw i64 %37, 1
  %123 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %38, i64 1
  %124 = load i32, ptr %26, align 8, !tbaa !81
  %125 = sext i32 %124 to i64
  %126 = icmp slt i64 %122, %125
  br i1 %126, label %36, label %127, !llvm.loop !440

127:                                              ; preds = %121, %24
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(write, argmem: readwrite, inaccessiblemem: none) uwtable
define internal void @start_pass_upsample(ptr nocapture noundef readonly %0) #11 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 81
  %3 = load ptr, ptr %2, align 8, !tbaa !307
  %4 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 58
  %5 = load i32, ptr %4, align 8, !tbaa !287
  %6 = getelementptr inbounds %struct.my_upsampler.198, ptr %3, i64 0, i32 3
  store i32 %5, ptr %6, align 8, !tbaa !441
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 27
  %8 = load i32, ptr %7, align 4, !tbaa !31
  %9 = getelementptr inbounds %struct.my_upsampler.198, ptr %3, i64 0, i32 4
  store i32 %8, ptr %9, align 4, !tbaa !442
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @sep_upsample(ptr noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef %2, i32 %3, ptr noundef %4, ptr nocapture noundef %5, i32 noundef %6) #6 {
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 81
  %9 = load ptr, ptr %8, align 8, !tbaa !307
  %10 = getelementptr inbounds %struct.my_upsampler.198, ptr %9, i64 0, i32 3
  %11 = load i32, ptr %10, align 8, !tbaa !441
  %12 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 58
  %13 = load i32, ptr %12, align 8, !tbaa !287
  %14 = icmp slt i32 %11, %13
  br i1 %14, label %46, label %15

15:                                               ; preds = %7
  %16 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 8
  %17 = load i32, ptr %16, align 8, !tbaa !81
  %18 = icmp sgt i32 %17, 0
  br i1 %18, label %19, label %44

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 43
  %21 = load ptr, ptr %20, align 8, !tbaa !86
  %22 = getelementptr inbounds %struct.my_upsampler.198, ptr %9, i64 0, i32 1
  br label %23

23:                                               ; preds = %23, %19
  %24 = phi i64 [ 0, %19 ], [ %37, %23 ]
  %25 = phi ptr [ %21, %19 ], [ %38, %23 ]
  %26 = getelementptr inbounds %struct.my_upsampler.198, ptr %9, i64 0, i32 2, i64 %24
  %27 = load ptr, ptr %26, align 8, !tbaa !10
  %28 = getelementptr inbounds ptr, ptr %1, i64 %24
  %29 = load ptr, ptr %28, align 8, !tbaa !10
  %30 = load i32, ptr %2, align 4, !tbaa !41
  %31 = getelementptr inbounds %struct.my_upsampler.198, ptr %9, i64 0, i32 5, i64 %24
  %32 = load i32, ptr %31, align 4, !tbaa !41
  %33 = mul i32 %32, %30
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds ptr, ptr %29, i64 %34
  %36 = getelementptr inbounds ptr, ptr %22, i64 %24
  tail call void %27(ptr noundef nonnull %0, ptr noundef %25, ptr noundef %35, ptr noundef nonnull %36) #32
  %37 = add nuw nsw i64 %24, 1
  %38 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %25, i64 1
  %39 = load i32, ptr %16, align 8, !tbaa !81
  %40 = sext i32 %39 to i64
  %41 = icmp slt i64 %37, %40
  br i1 %41, label %23, label %42, !llvm.loop !443

42:                                               ; preds = %23
  %43 = load i32, ptr %12, align 8, !tbaa !287
  br label %44

44:                                               ; preds = %42, %15
  %45 = phi i32 [ %43, %42 ], [ %13, %15 ]
  store i32 0, ptr %10, align 8, !tbaa !441
  br label %46

46:                                               ; preds = %44, %7
  %47 = phi i32 [ 0, %44 ], [ %11, %7 ]
  %48 = phi i32 [ %45, %44 ], [ %13, %7 ]
  %49 = sub nsw i32 %48, %47
  %50 = getelementptr inbounds %struct.my_upsampler.198, ptr %9, i64 0, i32 4
  %51 = load i32, ptr %50, align 4, !tbaa !442
  %52 = tail call i32 @llvm.umin.i32(i32 %49, i32 %51)
  %53 = load i32, ptr %5, align 4, !tbaa !41
  %54 = sub i32 %6, %53
  %55 = tail call i32 @llvm.umin.i32(i32 %52, i32 %54)
  %56 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 82
  %57 = load ptr, ptr %56, align 8, !tbaa !195
  %58 = getelementptr inbounds %struct.jpeg_d_main_controller, ptr %57, i64 0, i32 1
  %59 = load ptr, ptr %58, align 8, !tbaa !444
  %60 = getelementptr inbounds %struct.my_upsampler.198, ptr %9, i64 0, i32 1
  %61 = zext i32 %53 to i64
  %62 = getelementptr inbounds ptr, ptr %4, i64 %61
  tail call void %59(ptr noundef nonnull %0, ptr noundef nonnull %60, i32 noundef %47, ptr noundef %62, i32 noundef %55) #32
  %63 = load i32, ptr %5, align 4, !tbaa !41
  %64 = add i32 %63, %55
  store i32 %64, ptr %5, align 4, !tbaa !41
  %65 = load i32, ptr %50, align 4, !tbaa !442
  %66 = sub i32 %65, %55
  store i32 %66, ptr %50, align 4, !tbaa !442
  %67 = load i32, ptr %10, align 8, !tbaa !441
  %68 = add i32 %67, %55
  store i32 %68, ptr %10, align 8, !tbaa !441
  %69 = load i32, ptr %12, align 8, !tbaa !287
  %70 = icmp slt i32 %68, %69
  br i1 %70, label %74, label %71

71:                                               ; preds = %46
  %72 = load i32, ptr %2, align 4, !tbaa !41
  %73 = add i32 %72, 1
  store i32 %73, ptr %2, align 4, !tbaa !41
  br label %74

74:                                               ; preds = %71, %46
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal void @noop_upsample(ptr nocapture readnone %0, ptr nocapture readnone %1, ptr nocapture readnone %2, ptr nocapture noundef writeonly %3) #18 {
  store ptr null, ptr %3, align 8, !tbaa !10
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal void @fullsize_upsample(ptr nocapture readnone %0, ptr nocapture readnone %1, ptr noundef %2, ptr nocapture noundef writeonly %3) #18 {
  store ptr %2, ptr %3, align 8, !tbaa !10
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @h2v1_fancy_upsample(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3) #15 {
  %5 = load ptr, ptr %3, align 8, !tbaa !10
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 58
  %7 = load i32, ptr %6, align 8, !tbaa !287
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %77

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %1, i64 0, i32 10
  br label %11

11:                                               ; preds = %58, %9
  %12 = phi i64 [ 0, %9 ], [ %73, %58 ]
  %13 = getelementptr inbounds ptr, ptr %2, i64 %12
  %14 = load ptr, ptr %13, align 8, !tbaa !10
  %15 = getelementptr inbounds ptr, ptr %5, i64 %12
  %16 = load ptr, ptr %15, align 8, !tbaa !10
  %17 = getelementptr inbounds i8, ptr %14, i64 1
  %18 = load i8, ptr %14, align 1, !tbaa !7
  %19 = zext i8 %18 to i16
  %20 = getelementptr inbounds i8, ptr %16, i64 1
  store i8 %18, ptr %16, align 1, !tbaa !7
  %21 = mul nuw nsw i16 %19, 3
  %22 = load i8, ptr %17, align 1, !tbaa !7
  %23 = zext i8 %22 to i16
  %24 = add nuw nsw i16 %21, 2
  %25 = add nuw nsw i16 %24, %23
  %26 = lshr i16 %25, 2
  %27 = trunc i16 %26 to i8
  store i8 %27, ptr %20, align 1, !tbaa !7
  %28 = load i32, ptr %10, align 8, !tbaa !290
  %29 = add i32 %28, -2
  %30 = getelementptr inbounds i8, ptr %16, i64 2
  %31 = icmp eq i32 %29, 0
  br i1 %31, label %58, label %32

32:                                               ; preds = %32, %11
  %33 = phi ptr [ %56, %32 ], [ %30, %11 ]
  %34 = phi i32 [ %55, %32 ], [ %29, %11 ]
  %35 = phi ptr [ %33, %32 ], [ %16, %11 ]
  %36 = phi ptr [ %37, %32 ], [ %17, %11 ]
  %37 = getelementptr inbounds i8, ptr %36, i64 1
  %38 = load i8, ptr %36, align 1, !tbaa !7
  %39 = zext i8 %38 to i32
  %40 = mul nuw nsw i32 %39, 3
  %41 = getelementptr inbounds i8, ptr %36, i64 -1
  %42 = load i8, ptr %41, align 1, !tbaa !7
  %43 = zext i8 %42 to i32
  %44 = add nuw nsw i32 %43, 1
  %45 = add nuw nsw i32 %44, %40
  %46 = lshr i32 %45, 2
  %47 = trunc i32 %46 to i8
  %48 = getelementptr inbounds i8, ptr %35, i64 3
  store i8 %47, ptr %33, align 1, !tbaa !7
  %49 = load i8, ptr %37, align 1, !tbaa !7
  %50 = zext i8 %49 to i32
  %51 = add nuw nsw i32 %40, 2
  %52 = add nuw nsw i32 %51, %50
  %53 = lshr i32 %52, 2
  %54 = trunc i32 %53 to i8
  store i8 %54, ptr %48, align 1, !tbaa !7
  %55 = add i32 %34, -1
  %56 = getelementptr inbounds i8, ptr %33, i64 2
  %57 = icmp eq i32 %55, 0
  br i1 %57, label %58, label %32, !llvm.loop !445

58:                                               ; preds = %32, %11
  %59 = phi ptr [ %17, %11 ], [ %37, %32 ]
  %60 = phi ptr [ %16, %11 ], [ %33, %32 ]
  %61 = phi ptr [ %30, %11 ], [ %56, %32 ]
  %62 = load i8, ptr %59, align 1, !tbaa !7
  %63 = zext i8 %62 to i16
  %64 = mul nuw nsw i16 %63, 3
  %65 = getelementptr inbounds i8, ptr %59, i64 -1
  %66 = load i8, ptr %65, align 1, !tbaa !7
  %67 = zext i8 %66 to i16
  %68 = add nuw nsw i16 %67, 1
  %69 = add nuw nsw i16 %68, %64
  %70 = lshr i16 %69, 2
  %71 = trunc i16 %70 to i8
  %72 = getelementptr inbounds i8, ptr %60, i64 3
  store i8 %71, ptr %61, align 1, !tbaa !7
  store i8 %62, ptr %72, align 1, !tbaa !7
  %73 = add nuw nsw i64 %12, 1
  %74 = load i32, ptr %6, align 8, !tbaa !287
  %75 = sext i32 %74 to i64
  %76 = icmp slt i64 %73, %75
  br i1 %76, label %11, label %77, !llvm.loop !446

77:                                               ; preds = %58, %4
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @h2v1_upsample(ptr nocapture noundef readonly %0, ptr nocapture readnone %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3) #15 {
  %5 = load ptr, ptr %3, align 8, !tbaa !10
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 58
  %7 = load i32, ptr %6, align 8, !tbaa !287
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %38

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  br label %11

11:                                               ; preds = %33, %9
  %12 = phi i32 [ %7, %9 ], [ %34, %33 ]
  %13 = phi i64 [ 0, %9 ], [ %35, %33 ]
  %14 = getelementptr inbounds ptr, ptr %5, i64 %13
  %15 = load ptr, ptr %14, align 8, !tbaa !10
  %16 = load i32, ptr %10, align 8, !tbaa !202
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds i8, ptr %15, i64 %17
  %19 = icmp eq i32 %16, 0
  br i1 %19, label %33, label %20

20:                                               ; preds = %11
  %21 = getelementptr inbounds ptr, ptr %2, i64 %13
  %22 = load ptr, ptr %21, align 8, !tbaa !10
  br label %23

23:                                               ; preds = %23, %20
  %24 = phi ptr [ %26, %23 ], [ %22, %20 ]
  %25 = phi ptr [ %29, %23 ], [ %15, %20 ]
  %26 = getelementptr inbounds i8, ptr %24, i64 1
  %27 = load i8, ptr %24, align 1, !tbaa !7
  %28 = getelementptr inbounds i8, ptr %25, i64 1
  store i8 %27, ptr %25, align 1, !tbaa !7
  %29 = getelementptr inbounds i8, ptr %25, i64 2
  store i8 %27, ptr %28, align 1, !tbaa !7
  %30 = icmp ult ptr %29, %18
  br i1 %30, label %23, label %31, !llvm.loop !447

31:                                               ; preds = %23
  %32 = load i32, ptr %6, align 8, !tbaa !287
  br label %33

33:                                               ; preds = %31, %11
  %34 = phi i32 [ %32, %31 ], [ %12, %11 ]
  %35 = add nuw nsw i64 %13, 1
  %36 = sext i32 %34 to i64
  %37 = icmp slt i64 %35, %36
  br i1 %37, label %11, label %38, !llvm.loop !448

38:                                               ; preds = %33, %4
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @h2v2_fancy_upsample(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3) #15 {
  %5 = load ptr, ptr %3, align 8, !tbaa !10
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 58
  %7 = load i32, ptr %6, align 8, !tbaa !287
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %109

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %1, i64 0, i32 10
  br label %11

11:                                               ; preds = %105, %9
  %12 = phi i64 [ 0, %9 ], [ %16, %105 ]
  %13 = phi i64 [ 0, %9 ], [ %.lcssa, %105 ]
  %14 = getelementptr inbounds ptr, ptr %2, i64 %12
  %15 = add nsw i64 %12, -1
  %16 = add nuw i64 %12, 1
  %17 = and i64 %16, 4294967295
  %18 = shl i64 %13, 32
  %19 = ashr exact i64 %18, 32
  br label %20

20:                                               ; preds = %90, %11
  %21 = phi i64 [ %19, %11 ], [ %27, %90 ]
  %22 = phi i1 [ true, %11 ], [ false, %90 ]
  %23 = load ptr, ptr %14, align 8, !tbaa !10
  %24 = select i1 %22, i64 %15, i64 %17
  %25 = getelementptr inbounds ptr, ptr %2, i64 %24
  %26 = load ptr, ptr %25, align 8, !tbaa !10
  %27 = add nsw i64 %21, 1
  %28 = getelementptr inbounds ptr, ptr %5, i64 %21
  %29 = load ptr, ptr %28, align 8, !tbaa !10
  %30 = getelementptr inbounds i8, ptr %23, i64 1
  %31 = load i8, ptr %23, align 1, !tbaa !7
  %32 = zext i8 %31 to i32
  %33 = mul nuw nsw i32 %32, 3
  %34 = getelementptr inbounds i8, ptr %26, i64 1
  %35 = load i8, ptr %26, align 1, !tbaa !7
  %36 = zext i8 %35 to i32
  %37 = add nuw nsw i32 %33, %36
  %38 = load i8, ptr %30, align 1, !tbaa !7
  %39 = zext i8 %38 to i32
  %40 = mul nuw nsw i32 %39, 3
  %41 = load i8, ptr %34, align 1, !tbaa !7
  %42 = zext i8 %41 to i32
  %43 = add nuw nsw i32 %40, %42
  %44 = shl nuw nsw i32 %37, 2
  %45 = add nuw nsw i32 %44, 8
  %46 = lshr i32 %45, 4
  %47 = trunc i32 %46 to i8
  %48 = getelementptr inbounds i8, ptr %29, i64 1
  store i8 %47, ptr %29, align 1, !tbaa !7
  %49 = mul nuw nsw i32 %37, 3
  %50 = add nuw nsw i32 %49, 7
  %51 = add nuw nsw i32 %50, %43
  %52 = lshr i32 %51, 4
  %53 = trunc i32 %52 to i8
  store i8 %53, ptr %48, align 1, !tbaa !7
  %54 = load i32, ptr %10, align 8, !tbaa !290
  %55 = add i32 %54, -2
  %56 = getelementptr inbounds i8, ptr %29, i64 2
  %57 = icmp eq i32 %55, 0
  br i1 %57, label %90, label %58

58:                                               ; preds = %20
  %59 = getelementptr inbounds i8, ptr %26, i64 2
  %60 = getelementptr inbounds i8, ptr %23, i64 2
  br label %61

61:                                               ; preds = %61, %58
  %62 = phi ptr [ %88, %61 ], [ %56, %58 ]
  %63 = phi i32 [ %87, %61 ], [ %55, %58 ]
  %64 = phi i32 [ %65, %61 ], [ %37, %58 ]
  %65 = phi i32 [ %76, %61 ], [ %43, %58 ]
  %66 = phi ptr [ %62, %61 ], [ %29, %58 ]
  %67 = phi ptr [ %73, %61 ], [ %59, %58 ]
  %68 = phi ptr [ %69, %61 ], [ %60, %58 ]
  %69 = getelementptr inbounds i8, ptr %68, i64 1
  %70 = load i8, ptr %68, align 1, !tbaa !7
  %71 = zext i8 %70 to i32
  %72 = mul nuw nsw i32 %71, 3
  %73 = getelementptr inbounds i8, ptr %67, i64 1
  %74 = load i8, ptr %67, align 1, !tbaa !7
  %75 = zext i8 %74 to i32
  %76 = add nuw nsw i32 %72, %75
  %77 = mul nuw nsw i32 %65, 3
  %78 = add nuw nsw i32 %64, 8
  %79 = add nuw nsw i32 %78, %77
  %80 = lshr i32 %79, 4
  %81 = trunc i32 %80 to i8
  %82 = getelementptr inbounds i8, ptr %66, i64 3
  store i8 %81, ptr %62, align 1, !tbaa !7
  %83 = add nuw nsw i32 %77, 7
  %84 = add nuw nsw i32 %83, %76
  %85 = lshr i32 %84, 4
  %86 = trunc i32 %85 to i8
  store i8 %86, ptr %82, align 1, !tbaa !7
  %87 = add i32 %63, -1
  %88 = getelementptr inbounds i8, ptr %62, i64 2
  %89 = icmp eq i32 %87, 0
  br i1 %89, label %90, label %61, !llvm.loop !449

90:                                               ; preds = %61, %20
  %91 = phi ptr [ %29, %20 ], [ %62, %61 ]
  %92 = phi i32 [ %43, %20 ], [ %76, %61 ]
  %93 = phi i32 [ %37, %20 ], [ %65, %61 ]
  %94 = phi ptr [ %56, %20 ], [ %88, %61 ]
  %95 = mul nuw nsw i32 %92, 3
  %96 = add nuw nsw i32 %93, 8
  %97 = add nuw nsw i32 %96, %95
  %98 = lshr i32 %97, 4
  %99 = trunc i32 %98 to i8
  %100 = getelementptr inbounds i8, ptr %91, i64 3
  store i8 %99, ptr %94, align 1, !tbaa !7
  %101 = shl nuw nsw i32 %92, 2
  %102 = add nuw nsw i32 %101, 7
  %103 = lshr i32 %102, 4
  %104 = trunc i32 %103 to i8
  store i8 %104, ptr %100, align 1, !tbaa !7
  br i1 %22, label %20, label %105, !llvm.loop !450

105:                                              ; preds = %90
  %.lcssa = phi i64 [ %27, %90 ]
  %106 = trunc i64 %.lcssa to i32
  %107 = load i32, ptr %6, align 8, !tbaa !287
  %108 = icmp sgt i32 %107, %106
  br i1 %108, label %11, label %109, !llvm.loop !451

109:                                              ; preds = %105, %4
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @h2v2_upsample(ptr nocapture noundef readonly %0, ptr nocapture readnone %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3) #6 {
  %5 = load ptr, ptr %3, align 8, !tbaa !10
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 58
  %7 = load i32, ptr %6, align 8, !tbaa !287
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %42

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  br label %11

11:                                               ; preds = %34, %9
  %12 = phi i64 [ 0, %9 ], [ %37, %34 ]
  %13 = phi i64 [ 0, %9 ], [ %38, %34 ]
  %14 = trunc i64 %13 to i32
  %15 = getelementptr inbounds ptr, ptr %5, i64 %13
  %16 = load ptr, ptr %15, align 8, !tbaa !10
  %17 = load i32, ptr %10, align 8, !tbaa !202
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds i8, ptr %16, i64 %18
  %20 = icmp eq i32 %17, 0
  br i1 %20, label %34, label %21

21:                                               ; preds = %11
  %22 = getelementptr inbounds ptr, ptr %2, i64 %12
  %23 = load ptr, ptr %22, align 8, !tbaa !10
  br label %24

24:                                               ; preds = %24, %21
  %25 = phi ptr [ %27, %24 ], [ %23, %21 ]
  %26 = phi ptr [ %30, %24 ], [ %16, %21 ]
  %27 = getelementptr inbounds i8, ptr %25, i64 1
  %28 = load i8, ptr %25, align 1, !tbaa !7
  %29 = getelementptr inbounds i8, ptr %26, i64 1
  store i8 %28, ptr %26, align 1, !tbaa !7
  %30 = getelementptr inbounds i8, ptr %26, i64 2
  store i8 %28, ptr %29, align 1, !tbaa !7
  %31 = icmp ult ptr %30, %19
  br i1 %31, label %24, label %32, !llvm.loop !452

32:                                               ; preds = %24
  %33 = load i32, ptr %10, align 8, !tbaa !202
  br label %34

34:                                               ; preds = %32, %11
  %35 = phi i32 [ %33, %32 ], [ 0, %11 ]
  %36 = or i32 %14, 1
  tail call void @jcopy_sample_rows(ptr noundef %5, i32 noundef %14, ptr noundef %5, i32 noundef %36, i32 noundef 1, i32 noundef %35) #32
  %37 = add nuw i64 %12, 1
  %38 = add nuw i64 %13, 2
  %39 = load i32, ptr %6, align 8, !tbaa !287
  %40 = trunc i64 %38 to i32
  %41 = icmp sgt i32 %39, %40
  br i1 %41, label %11, label %42, !llvm.loop !453

42:                                               ; preds = %34, %4
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @int_upsample(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3) #6 {
  %5 = load ptr, ptr %3, align 8, !tbaa !10
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 58
  %7 = load i32, ptr %6, align 8, !tbaa !287
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %63

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 81
  %11 = load ptr, ptr %10, align 8, !tbaa !307
  %12 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %1, i64 0, i32 1
  %13 = load i32, ptr %12, align 4, !tbaa !157
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds %struct.my_upsampler.198, ptr %11, i64 0, i32 7, i64 %14
  %16 = load i8, ptr %15, align 1, !tbaa !7
  %17 = zext i8 %16 to i32
  %18 = getelementptr inbounds %struct.my_upsampler.198, ptr %11, i64 0, i32 6, i64 %14
  %19 = load i8, ptr %18, align 1, !tbaa !7
  %20 = zext i8 %19 to i64
  %21 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  %22 = icmp eq i8 %19, 0
  %23 = icmp ugt i8 %16, 1
  %24 = add nsw i32 %17, -1
  %25 = zext i8 %19 to i64
  %26 = add nuw nsw i64 %20, 4294967295
  %27 = and i64 %26, 4294967295
  %28 = add nuw nsw i64 %27, 1
  %29 = zext i8 %16 to i64
  br label %30

30:                                               ; preds = %57, %9
  %31 = phi i64 [ 0, %9 ], [ %58, %57 ]
  %32 = phi i64 [ 0, %9 ], [ %59, %57 ]
  %33 = trunc i64 %32 to i32
  %34 = getelementptr inbounds ptr, ptr %5, i64 %32
  %35 = load ptr, ptr %34, align 8, !tbaa !10
  %36 = load i32, ptr %21, align 8, !tbaa !202
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds i8, ptr %35, i64 %37
  %39 = icmp eq i32 %36, 0
  br i1 %39, label %53, label %40

40:                                               ; preds = %30
  %41 = getelementptr inbounds ptr, ptr %2, i64 %31
  %42 = load ptr, ptr %41, align 8, !tbaa !10
  br label %46

43:                                               ; preds = %50, %46
  %44 = phi ptr [ %48, %46 ], [ %52, %50 ]
  %45 = icmp ult ptr %44, %38
  br i1 %45, label %46, label %53, !llvm.loop !454

46:                                               ; preds = %43, %40
  %47 = phi ptr [ %49, %43 ], [ %42, %40 ]
  %48 = phi ptr [ %44, %43 ], [ %35, %40 ]
  %49 = getelementptr inbounds i8, ptr %47, i64 1
  br i1 %22, label %43, label %50

50:                                               ; preds = %46
  %51 = load i8, ptr %47, align 1, !tbaa !7
  tail call void @llvm.memset.p0.i64(ptr align 1 %48, i8 %51, i64 %25, i1 false), !tbaa !7
  %52 = getelementptr i8, ptr %48, i64 %28
  br label %43

53:                                               ; preds = %43, %30
  br i1 %23, label %54, label %57

54:                                               ; preds = %53
  %55 = add nuw nsw i32 %33, 1
  %56 = load i32, ptr %21, align 8, !tbaa !202
  tail call void @jcopy_sample_rows(ptr noundef %5, i32 noundef %33, ptr noundef %5, i32 noundef %55, i32 noundef %24, i32 noundef %56) #32
  br label %57

57:                                               ; preds = %54, %53
  %58 = add nuw i64 %31, 1
  %59 = add i64 %32, %29
  %60 = load i32, ptr %6, align 8, !tbaa !287
  %61 = trunc i64 %59 to i32
  %62 = icmp sgt i32 %60, %61
  br i1 %62, label %30, label %63, !llvm.loop !455

63:                                               ; preds = %57, %4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal ptr @jpeg_std_error(ptr noundef returned writeonly %0) #19 {
  store ptr @error_exit, ptr %0, align 8, !tbaa !26
  %2 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %0, i64 0, i32 1
  store ptr @emit_message, ptr %2, align 8, !tbaa !85
  %3 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %0, i64 0, i32 2
  store ptr @output_message, ptr %3, align 8, !tbaa !456
  %4 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %0, i64 0, i32 3
  store ptr @format_message, ptr %4, align 8, !tbaa !457
  %5 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %0, i64 0, i32 4
  store ptr @reset_error_mgr, ptr %5, align 8, !tbaa !294
  %6 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %0, i64 0, i32 7
  store i32 0, ptr %6, align 4, !tbaa !38
  %7 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %0, i64 0, i32 8
  store i64 0, ptr %7, align 8, !tbaa !37
  %8 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %0, i64 0, i32 5
  store i32 0, ptr %8, align 8, !tbaa !25
  %9 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %0, i64 0, i32 9
  store ptr @jpeg_std_message_table, ptr %9, align 8, !tbaa !458
  %10 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %0, i64 0, i32 10
  store i32 119, ptr %10, align 8, !tbaa !459
  %11 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %0, i64 0, i32 11
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %11, i8 0, i64 16, i1 false)
  ret ptr %0
}

; Function Attrs: noreturn nounwind optsize uwtable
define internal void @error_exit(ptr noundef %0) #4 {
  %2 = load ptr, ptr %0, align 8, !tbaa !460
  %3 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %2, i64 0, i32 2
  %4 = load ptr, ptr %3, align 8, !tbaa !456
  tail call void %4(ptr noundef nonnull %0) #32
  tail call void @jpeg_destroy(ptr noundef nonnull %0) #32
  tail call void @exit(i32 noundef 1) #35
  unreachable
}

; Function Attrs: nounwind optsize uwtable
define internal void @emit_message(ptr noundef %0, i32 noundef %1) #6 {
  %3 = load ptr, ptr %0, align 8, !tbaa !460
  %4 = icmp slt i32 %1, 0
  br i1 %4, label %5, label %20

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %3, i64 0, i32 8
  %7 = load i64, ptr %6, align 8, !tbaa !37
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %13, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %3, i64 0, i32 7
  %11 = load i32, ptr %10, align 4, !tbaa !38
  %12 = icmp sgt i32 %11, 2
  br i1 %12, label %13, label %17

13:                                               ; preds = %9, %5
  %14 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %3, i64 0, i32 2
  %15 = load ptr, ptr %14, align 8, !tbaa !456
  tail call void %15(ptr noundef nonnull %0) #32
  %16 = load i64, ptr %6, align 8, !tbaa !37
  br label %17

17:                                               ; preds = %13, %9
  %18 = phi i64 [ %16, %13 ], [ %7, %9 ]
  %19 = add nsw i64 %18, 1
  store i64 %19, ptr %6, align 8, !tbaa !37
  br label %27

20:                                               ; preds = %2
  %21 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %3, i64 0, i32 7
  %22 = load i32, ptr %21, align 4, !tbaa !38
  %23 = icmp slt i32 %22, %1
  br i1 %23, label %27, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %3, i64 0, i32 2
  %26 = load ptr, ptr %25, align 8, !tbaa !456
  tail call void %26(ptr noundef nonnull %0) #32
  br label %27

27:                                               ; preds = %24, %20, %17
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @output_message(ptr noundef %0) #6 {
  %2 = alloca [200 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 200, ptr nonnull %2) #31
  %3 = load ptr, ptr %0, align 8, !tbaa !460
  %4 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %3, i64 0, i32 3
  %5 = load ptr, ptr %4, align 8, !tbaa !457
  call void %5(ptr noundef nonnull %0, ptr noundef nonnull %2) #32
  %6 = load ptr, ptr @stderr, align 8, !tbaa !10
  %7 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %6, ptr noundef nonnull @.str.120, ptr noundef nonnull %2) #34
  call void @llvm.lifetime.end.p0(i64 200, ptr nonnull %2) #31
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @format_message(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1) #20 {
  %3 = load ptr, ptr %0, align 8, !tbaa !460
  %4 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %3, i64 0, i32 5
  %5 = load i32, ptr %4, align 8, !tbaa !25
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %16

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %3, i64 0, i32 10
  %9 = load i32, ptr %8, align 8, !tbaa !459
  %10 = icmp sgt i32 %5, %9
  br i1 %10, label %16, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %3, i64 0, i32 9
  %13 = load ptr, ptr %12, align 8, !tbaa !458
  %14 = zext i32 %5 to i64
  %15 = getelementptr inbounds ptr, ptr %13, i64 %14
  br label %32

16:                                               ; preds = %7, %2
  %17 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %3, i64 0, i32 11
  %18 = load ptr, ptr %17, align 8, !tbaa !20
  %19 = icmp eq ptr %18, null
  br i1 %19, label %36, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %3, i64 0, i32 12
  %22 = load i32, ptr %21, align 8, !tbaa !23
  %23 = icmp slt i32 %5, %22
  br i1 %23, label %36, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %3, i64 0, i32 13
  %26 = load i32, ptr %25, align 4, !tbaa !24
  %27 = icmp sgt i32 %5, %26
  br i1 %27, label %36, label %28

28:                                               ; preds = %24
  %29 = sub nsw i32 %5, %22
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds ptr, ptr %18, i64 %30
  br label %32

32:                                               ; preds = %28, %11
  %33 = phi ptr [ %15, %11 ], [ %31, %28 ]
  %34 = load ptr, ptr %33, align 8, !tbaa !10
  %35 = icmp eq ptr %34, null
  br i1 %35, label %36, label %41

36:                                               ; preds = %32, %24, %20, %16
  %37 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %3, i64 0, i32 6
  store i32 %5, ptr %37, align 4, !tbaa !7
  %38 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %3, i64 0, i32 9
  %39 = load ptr, ptr %38, align 8, !tbaa !458
  %40 = load ptr, ptr %39, align 8, !tbaa !10
  br label %41

41:                                               ; preds = %36, %32
  %42 = phi ptr [ %40, %36 ], [ %34, %32 ]
  br label %43

43:                                               ; preds = %43, %41
  %44 = phi ptr [ %42, %41 ], [ %45, %43 ]
  %45 = getelementptr inbounds i8, ptr %44, i64 1
  %46 = load i8, ptr %44, align 1, !tbaa !7
  switch i8 %46, label %43 [
    i8 0, label %53
    i8 37, label %47
  ]

47:                                               ; preds = %43
  %.lcssa1 = phi ptr [ %45, %43 ]
  %48 = load i8, ptr %.lcssa1, align 1, !tbaa !7
  %49 = icmp eq i8 %48, 115
  br i1 %49, label %50, label %53

50:                                               ; preds = %47
  %51 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %3, i64 0, i32 6
  %52 = tail call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %1, ptr noundef nonnull dereferenceable(1) %42, ptr noundef nonnull %51) #32
  br label %71

53:                                               ; preds = %47, %43
  %54 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %3, i64 0, i32 6
  %55 = load i32, ptr %54, align 4, !tbaa !7
  %56 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %3, i64 0, i32 6, i32 0, i64 1
  %57 = load i32, ptr %56, align 4, !tbaa !7
  %58 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %3, i64 0, i32 6, i32 0, i64 2
  %59 = load i32, ptr %58, align 4, !tbaa !7
  %60 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %3, i64 0, i32 6, i32 0, i64 3
  %61 = load i32, ptr %60, align 4, !tbaa !7
  %62 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %3, i64 0, i32 6, i32 0, i64 4
  %63 = load i32, ptr %62, align 4, !tbaa !7
  %64 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %3, i64 0, i32 6, i32 0, i64 5
  %65 = load i32, ptr %64, align 4, !tbaa !7
  %66 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %3, i64 0, i32 6, i32 0, i64 6
  %67 = load i32, ptr %66, align 4, !tbaa !7
  %68 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %3, i64 0, i32 6, i32 0, i64 7
  %69 = load i32, ptr %68, align 4, !tbaa !7
  %70 = tail call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %1, ptr noundef nonnull dereferenceable(1) %42, i32 noundef %55, i32 noundef %57, i32 noundef %59, i32 noundef %61, i32 noundef %63, i32 noundef %65, i32 noundef %67, i32 noundef %69) #32
  br label %71

71:                                               ; preds = %53, %50
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(write, argmem: readwrite, inaccessiblemem: none) uwtable
define internal void @reset_error_mgr(ptr nocapture noundef readonly %0) #11 {
  %2 = load ptr, ptr %0, align 8, !tbaa !460
  %3 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %2, i64 0, i32 8
  store i64 0, ptr %3, align 8, !tbaa !37
  %4 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %2, i64 0, i32 5
  store i32 0, ptr %4, align 8, !tbaa !25
  ret void
}

; Function Attrs: nofree nounwind optsize
declare noundef i32 @sprintf(ptr noalias nocapture noundef writeonly, ptr nocapture noundef readonly, ...) local_unnamed_addr #7

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @jpeg_idct_float(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, i32 noundef %4) #21 {
  %6 = alloca [64 x float], align 16
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 61
  %8 = load ptr, ptr %7, align 8, !tbaa !203
  call void @llvm.lifetime.start.p0(i64 256, ptr nonnull %6) #31
  %9 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %1, i64 0, i32 20
  %10 = load ptr, ptr %9, align 8, !tbaa !219
  br label %14

11:                                               ; preds = %128
  %12 = getelementptr inbounds i8, ptr %8, i64 128
  %13 = zext i32 %4 to i64
  br label %143

14:                                               ; preds = %128, %5
  %15 = phi i32 [ 8, %5 ], [ %141, %128 ]
  %16 = phi ptr [ %6, %5 ], [ %138, %128 ]
  %17 = phi ptr [ %10, %5 ], [ %139, %128 ]
  %18 = phi ptr [ %2, %5 ], [ %140, %128 ]
  %19 = getelementptr inbounds i16, ptr %18, i64 8
  %20 = load i16, ptr %19, align 2, !tbaa !12
  %21 = getelementptr inbounds i16, ptr %18, i64 16
  %22 = load i16, ptr %21, align 2, !tbaa !12
  %23 = or i16 %22, %20
  %24 = getelementptr inbounds i16, ptr %18, i64 24
  %25 = load i16, ptr %24, align 2, !tbaa !12
  %26 = or i16 %23, %25
  %27 = getelementptr inbounds i16, ptr %18, i64 32
  %28 = load i16, ptr %27, align 2, !tbaa !12
  %29 = or i16 %26, %28
  %30 = getelementptr inbounds i16, ptr %18, i64 40
  %31 = load i16, ptr %30, align 2, !tbaa !12
  %32 = or i16 %29, %31
  %33 = getelementptr inbounds i16, ptr %18, i64 48
  %34 = load i16, ptr %33, align 2, !tbaa !12
  %35 = or i16 %32, %34
  %36 = getelementptr inbounds i16, ptr %18, i64 56
  %37 = load i16, ptr %36, align 2, !tbaa !12
  %38 = or i16 %35, %37
  %39 = icmp eq i16 %38, 0
  %40 = load i16, ptr %18, align 2, !tbaa !12
  %41 = sitofp i16 %40 to float
  %42 = load float, ptr %17, align 4, !tbaa !224
  %43 = fmul float %42, %41
  br i1 %39, label %44, label %48

44:                                               ; preds = %14
  store float %43, ptr %16, align 4, !tbaa !224
  %45 = getelementptr inbounds float, ptr %16, i64 8
  store float %43, ptr %45, align 4, !tbaa !224
  %46 = getelementptr inbounds float, ptr %16, i64 16
  store float %43, ptr %46, align 4, !tbaa !224
  %47 = getelementptr inbounds float, ptr %16, i64 24
  store float %43, ptr %47, align 4, !tbaa !224
  br label %128

48:                                               ; preds = %14
  %49 = insertelement <2 x i16> poison, i16 %28, i64 0
  %50 = insertelement <2 x i16> %49, i16 %22, i64 1
  %51 = sitofp <2 x i16> %50 to <2 x float>
  %52 = getelementptr inbounds float, ptr %17, i64 16
  %53 = load float, ptr %52, align 4, !tbaa !224
  %54 = getelementptr inbounds float, ptr %17, i64 32
  %55 = load float, ptr %54, align 4, !tbaa !224
  %56 = sitofp i16 %34 to float
  %57 = getelementptr inbounds float, ptr %17, i64 48
  %58 = load float, ptr %57, align 4, !tbaa !224
  %59 = fmul float %58, %56
  %60 = insertelement <2 x float> poison, float %55, i64 0
  %61 = insertelement <2 x float> %60, float %53, i64 1
  %62 = fmul <2 x float> %61, %51
  %63 = extractelement <2 x float> %62, i64 0
  %64 = fsub float %43, %63
  %65 = insertelement <2 x float> poison, float %43, i64 0
  %66 = insertelement <2 x float> %65, float %59, i64 1
  %67 = fadd <2 x float> %66, %62
  %68 = extractelement <2 x float> %62, i64 1
  %69 = fsub float %68, %59
  %70 = extractelement <2 x float> %67, i64 1
  %71 = fneg float %70
  %72 = tail call float @llvm.fmuladd.f32(float %69, float 0x3FF6A09E60000000, float %71)
  %73 = extractelement <2 x float> %67, i64 0
  %74 = fadd float %73, %70
  %75 = fsub float %73, %70
  %76 = fadd float %64, %72
  %77 = fsub float %64, %72
  %78 = insertelement <2 x i16> poison, i16 %20, i64 0
  %79 = insertelement <2 x i16> %78, i16 %37, i64 1
  %80 = sitofp <2 x i16> %79 to <2 x float>
  %81 = getelementptr inbounds float, ptr %17, i64 8
  %82 = load float, ptr %81, align 4, !tbaa !224
  %83 = insertelement <2 x i16> poison, i16 %25, i64 0
  %84 = insertelement <2 x i16> %83, i16 %31, i64 1
  %85 = sitofp <2 x i16> %84 to <2 x float>
  %86 = getelementptr inbounds float, ptr %17, i64 24
  %87 = load float, ptr %86, align 4, !tbaa !224
  %88 = getelementptr inbounds float, ptr %17, i64 40
  %89 = load float, ptr %88, align 4, !tbaa !224
  %90 = insertelement <2 x float> poison, float %87, i64 0
  %91 = insertelement <2 x float> %90, float %89, i64 1
  %92 = fmul <2 x float> %91, %85
  %93 = getelementptr inbounds float, ptr %17, i64 56
  %94 = load float, ptr %93, align 4, !tbaa !224
  %95 = insertelement <2 x float> poison, float %82, i64 0
  %96 = insertelement <2 x float> %95, float %94, i64 1
  %97 = fmul <2 x float> %96, %80
  %98 = extractelement <2 x float> %92, i64 0
  %99 = extractelement <2 x float> %92, i64 1
  %100 = fadd float %98, %99
  %101 = fsub float %99, %98
  %102 = extractelement <2 x float> %97, i64 0
  %103 = extractelement <2 x float> %97, i64 1
  %104 = fadd float %102, %103
  %105 = fsub float %102, %103
  %106 = fadd float %100, %104
  %107 = fsub float %104, %100
  %108 = fmul float %107, 0x3FF6A09E60000000
  %109 = fadd float %101, %105
  %110 = fmul float %109, 0x3FFD906BC0000000
  %111 = fneg float %110
  %112 = tail call float @llvm.fmuladd.f32(float %105, float 0x3FF1517A80000000, float %111)
  %113 = tail call float @llvm.fmuladd.f32(float %101, float 0xC004E7AEA0000000, float %110)
  %114 = fsub float %113, %106
  %115 = fsub float %108, %114
  %116 = fadd float %112, %115
  %117 = fadd float %74, %106
  store float %117, ptr %16, align 4, !tbaa !224
  %118 = fsub float %74, %106
  %119 = fadd float %76, %114
  %120 = getelementptr inbounds float, ptr %16, i64 8
  store float %119, ptr %120, align 4, !tbaa !224
  %121 = fsub float %76, %114
  %122 = fadd float %77, %115
  %123 = getelementptr inbounds float, ptr %16, i64 16
  store float %122, ptr %123, align 4, !tbaa !224
  %124 = fsub float %77, %115
  %125 = fadd float %75, %116
  %126 = getelementptr inbounds float, ptr %16, i64 32
  store float %125, ptr %126, align 4, !tbaa !224
  %127 = fsub float %75, %116
  br label %128

128:                                              ; preds = %48, %44
  %129 = phi i64 [ 24, %48 ], [ 32, %44 ]
  %130 = phi float [ %127, %48 ], [ %43, %44 ]
  %131 = phi float [ %124, %48 ], [ %43, %44 ]
  %132 = phi float [ %121, %48 ], [ %43, %44 ]
  %133 = phi float [ %118, %48 ], [ %43, %44 ]
  %134 = getelementptr inbounds float, ptr %16, i64 %129
  store float %130, ptr %134, align 4, !tbaa !224
  %135 = getelementptr inbounds float, ptr %16, i64 40
  store float %131, ptr %135, align 4
  %136 = getelementptr inbounds float, ptr %16, i64 48
  store float %132, ptr %136, align 4
  %137 = getelementptr inbounds float, ptr %16, i64 56
  store float %133, ptr %137, align 4
  %138 = getelementptr inbounds float, ptr %16, i64 1
  %139 = getelementptr inbounds float, ptr %17, i64 1
  %140 = getelementptr inbounds i16, ptr %18, i64 1
  %141 = add nsw i32 %15, -1
  %142 = icmp ugt i32 %15, 1
  br i1 %142, label %14, label %11, !llvm.loop !461

143:                                              ; preds = %143, %11
  %144 = phi i64 [ 0, %11 ], [ %253, %143 ]
  %145 = phi ptr [ %6, %11 ], [ %252, %143 ]
  %146 = getelementptr inbounds ptr, ptr %3, i64 %144
  %147 = load ptr, ptr %146, align 8, !tbaa !10
  %148 = getelementptr inbounds i8, ptr %147, i64 %13
  %149 = load float, ptr %145, align 4, !tbaa !224
  %150 = getelementptr inbounds float, ptr %145, i64 4
  %151 = load float, ptr %150, align 4, !tbaa !224
  %152 = fadd float %149, %151
  %153 = fsub float %149, %151
  %154 = getelementptr inbounds float, ptr %145, i64 2
  %155 = load float, ptr %154, align 4, !tbaa !224
  %156 = getelementptr inbounds float, ptr %145, i64 6
  %157 = load float, ptr %156, align 4, !tbaa !224
  %158 = fadd float %155, %157
  %159 = fsub float %155, %157
  %160 = fneg float %158
  %161 = tail call float @llvm.fmuladd.f32(float %159, float 0x3FF6A09E60000000, float %160)
  %162 = fadd float %152, %158
  %163 = fsub float %152, %158
  %164 = fadd float %153, %161
  %165 = fsub float %153, %161
  %166 = getelementptr inbounds float, ptr %145, i64 5
  %167 = load float, ptr %166, align 4, !tbaa !224
  %168 = getelementptr inbounds float, ptr %145, i64 3
  %169 = load float, ptr %168, align 4, !tbaa !224
  %170 = fadd float %167, %169
  %171 = fsub float %167, %169
  %172 = getelementptr inbounds float, ptr %145, i64 1
  %173 = load float, ptr %172, align 4, !tbaa !224
  %174 = getelementptr inbounds float, ptr %145, i64 7
  %175 = load float, ptr %174, align 4, !tbaa !224
  %176 = fadd float %173, %175
  %177 = fsub float %173, %175
  %178 = fadd float %170, %176
  %179 = fsub float %176, %170
  %180 = fmul float %179, 0x3FF6A09E60000000
  %181 = fadd float %171, %177
  %182 = fmul float %181, 0x3FFD906BC0000000
  %183 = fneg float %182
  %184 = tail call float @llvm.fmuladd.f32(float %177, float 0x3FF1517A80000000, float %183)
  %185 = tail call float @llvm.fmuladd.f32(float %171, float 0xC004E7AEA0000000, float %182)
  %186 = fsub float %185, %178
  %187 = fsub float %180, %186
  %188 = fadd float %184, %187
  %189 = fadd float %162, %178
  %190 = fptosi float %189 to i64
  %191 = add i64 %190, 4
  %192 = lshr i64 %191, 3
  %193 = and i64 %192, 1023
  %194 = getelementptr inbounds i8, ptr %12, i64 %193
  %195 = load i8, ptr %194, align 1, !tbaa !7
  store i8 %195, ptr %148, align 1, !tbaa !7
  %196 = fsub float %162, %178
  %197 = fptosi float %196 to i64
  %198 = add i64 %197, 4
  %199 = lshr i64 %198, 3
  %200 = and i64 %199, 1023
  %201 = getelementptr inbounds i8, ptr %12, i64 %200
  %202 = load i8, ptr %201, align 1, !tbaa !7
  %203 = getelementptr inbounds i8, ptr %148, i64 7
  store i8 %202, ptr %203, align 1, !tbaa !7
  %204 = fadd float %164, %186
  %205 = fptosi float %204 to i64
  %206 = add i64 %205, 4
  %207 = lshr i64 %206, 3
  %208 = and i64 %207, 1023
  %209 = getelementptr inbounds i8, ptr %12, i64 %208
  %210 = load i8, ptr %209, align 1, !tbaa !7
  %211 = getelementptr inbounds i8, ptr %148, i64 1
  store i8 %210, ptr %211, align 1, !tbaa !7
  %212 = fsub float %164, %186
  %213 = fptosi float %212 to i64
  %214 = add i64 %213, 4
  %215 = lshr i64 %214, 3
  %216 = and i64 %215, 1023
  %217 = getelementptr inbounds i8, ptr %12, i64 %216
  %218 = load i8, ptr %217, align 1, !tbaa !7
  %219 = getelementptr inbounds i8, ptr %148, i64 6
  store i8 %218, ptr %219, align 1, !tbaa !7
  %220 = fadd float %165, %187
  %221 = fptosi float %220 to i64
  %222 = add i64 %221, 4
  %223 = lshr i64 %222, 3
  %224 = and i64 %223, 1023
  %225 = getelementptr inbounds i8, ptr %12, i64 %224
  %226 = load i8, ptr %225, align 1, !tbaa !7
  %227 = getelementptr inbounds i8, ptr %148, i64 2
  store i8 %226, ptr %227, align 1, !tbaa !7
  %228 = fsub float %165, %187
  %229 = fptosi float %228 to i64
  %230 = add i64 %229, 4
  %231 = lshr i64 %230, 3
  %232 = and i64 %231, 1023
  %233 = getelementptr inbounds i8, ptr %12, i64 %232
  %234 = load i8, ptr %233, align 1, !tbaa !7
  %235 = getelementptr inbounds i8, ptr %148, i64 5
  store i8 %234, ptr %235, align 1, !tbaa !7
  %236 = fadd float %163, %188
  %237 = fptosi float %236 to i64
  %238 = add i64 %237, 4
  %239 = lshr i64 %238, 3
  %240 = and i64 %239, 1023
  %241 = getelementptr inbounds i8, ptr %12, i64 %240
  %242 = load i8, ptr %241, align 1, !tbaa !7
  %243 = getelementptr inbounds i8, ptr %148, i64 4
  store i8 %242, ptr %243, align 1, !tbaa !7
  %244 = fsub float %163, %188
  %245 = fptosi float %244 to i64
  %246 = add i64 %245, 4
  %247 = lshr i64 %246, 3
  %248 = and i64 %247, 1023
  %249 = getelementptr inbounds i8, ptr %12, i64 %248
  %250 = load i8, ptr %249, align 1, !tbaa !7
  %251 = getelementptr inbounds i8, ptr %148, i64 3
  store i8 %250, ptr %251, align 1, !tbaa !7
  %252 = getelementptr inbounds float, ptr %145, i64 8
  %253 = add nuw nsw i64 %144, 1
  %254 = icmp eq i64 %253, 8
  br i1 %254, label %255, label %143, !llvm.loop !462

255:                                              ; preds = %143
  call void @llvm.lifetime.end.p0(i64 256, ptr nonnull %6) #31
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fmuladd.f32(float, float, float) #14

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @jpeg_idct_ifast(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, i32 noundef %4) #21 {
  %6 = alloca [64 x i32], align 16
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 61
  %8 = load ptr, ptr %7, align 8, !tbaa !203
  call void @llvm.lifetime.start.p0(i64 256, ptr nonnull %6) #31
  %9 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %1, i64 0, i32 20
  %10 = load ptr, ptr %9, align 8, !tbaa !219
  br label %14

11:                                               ; preds = %131
  %12 = getelementptr inbounds i8, ptr %8, i64 128
  %13 = zext i32 %4 to i64
  br label %144

14:                                               ; preds = %131, %5
  %15 = phi i32 [ 8, %5 ], [ %142, %131 ]
  %16 = phi ptr [ %6, %5 ], [ %139, %131 ]
  %17 = phi ptr [ %10, %5 ], [ %140, %131 ]
  %18 = phi ptr [ %2, %5 ], [ %141, %131 ]
  %19 = getelementptr inbounds i16, ptr %18, i64 8
  %20 = load i16, ptr %19, align 2, !tbaa !12
  %21 = sext i16 %20 to i32
  %22 = getelementptr inbounds i16, ptr %18, i64 16
  %23 = load i16, ptr %22, align 2, !tbaa !12
  %24 = sext i16 %23 to i32
  %25 = or i32 %24, %21
  %26 = getelementptr inbounds i16, ptr %18, i64 24
  %27 = load i16, ptr %26, align 2, !tbaa !12
  %28 = sext i16 %27 to i32
  %29 = or i32 %25, %28
  %30 = getelementptr inbounds i16, ptr %18, i64 32
  %31 = load i16, ptr %30, align 2, !tbaa !12
  %32 = sext i16 %31 to i32
  %33 = or i32 %29, %32
  %34 = getelementptr inbounds i16, ptr %18, i64 40
  %35 = load i16, ptr %34, align 2, !tbaa !12
  %36 = sext i16 %35 to i32
  %37 = or i32 %33, %36
  %38 = getelementptr inbounds i16, ptr %18, i64 48
  %39 = load i16, ptr %38, align 2, !tbaa !12
  %40 = sext i16 %39 to i32
  %41 = or i32 %37, %40
  %42 = getelementptr inbounds i16, ptr %18, i64 56
  %43 = load i16, ptr %42, align 2, !tbaa !12
  %44 = sext i16 %43 to i32
  %45 = or i32 %41, %44
  %46 = icmp eq i32 %45, 0
  %47 = load i16, ptr %18, align 2, !tbaa !12
  %48 = sext i16 %47 to i32
  %49 = load i32, ptr %17, align 4, !tbaa !41
  %50 = mul nsw i32 %49, %48
  br i1 %46, label %51, label %56

51:                                               ; preds = %14
  store i32 %50, ptr %16, align 4, !tbaa !41
  %52 = getelementptr inbounds i32, ptr %16, i64 8
  store i32 %50, ptr %52, align 4, !tbaa !41
  %53 = getelementptr inbounds i32, ptr %16, i64 16
  store i32 %50, ptr %53, align 4, !tbaa !41
  %54 = getelementptr inbounds i32, ptr %16, i64 24
  store i32 %50, ptr %54, align 4, !tbaa !41
  %55 = getelementptr inbounds i32, ptr %16, i64 32
  store i32 %50, ptr %55, align 4, !tbaa !41
  br label %131

56:                                               ; preds = %14
  %57 = getelementptr inbounds i32, ptr %17, i64 16
  %58 = load i32, ptr %57, align 4, !tbaa !41
  %59 = mul nsw i32 %58, %24
  %60 = getelementptr inbounds i32, ptr %17, i64 32
  %61 = load i32, ptr %60, align 4, !tbaa !41
  %62 = mul nsw i32 %61, %32
  %63 = getelementptr inbounds i32, ptr %17, i64 48
  %64 = load i32, ptr %63, align 4, !tbaa !41
  %65 = mul nsw i32 %64, %40
  %66 = add nsw i32 %62, %50
  %67 = sub nsw i32 %50, %62
  %68 = add nsw i32 %65, %59
  %69 = sub nsw i32 %59, %65
  %70 = sext i32 %69 to i64
  %71 = mul nsw i64 %70, 362
  %72 = lshr i64 %71, 8
  %73 = trunc i64 %72 to i32
  %74 = sub nsw i32 %73, %68
  %75 = add nsw i32 %68, %66
  %76 = sub nsw i32 %66, %68
  %77 = add nsw i32 %74, %67
  %78 = sub nsw i32 %67, %74
  %79 = getelementptr inbounds i32, ptr %17, i64 8
  %80 = load i32, ptr %79, align 4, !tbaa !41
  %81 = mul nsw i32 %80, %21
  %82 = getelementptr inbounds i32, ptr %17, i64 24
  %83 = load i32, ptr %82, align 4, !tbaa !41
  %84 = mul nsw i32 %83, %28
  %85 = getelementptr inbounds i32, ptr %17, i64 40
  %86 = load i32, ptr %85, align 4, !tbaa !41
  %87 = mul nsw i32 %86, %36
  %88 = getelementptr inbounds i32, ptr %17, i64 56
  %89 = load i32, ptr %88, align 4, !tbaa !41
  %90 = mul nsw i32 %89, %44
  %91 = add nsw i32 %87, %84
  %92 = sub nsw i32 %87, %84
  %93 = add nsw i32 %90, %81
  %94 = sub nsw i32 %81, %90
  %95 = add nsw i32 %93, %91
  %96 = sub nsw i32 %93, %91
  %97 = sext i32 %96 to i64
  %98 = mul nsw i64 %97, 362
  %99 = lshr i64 %98, 8
  %100 = trunc i64 %99 to i32
  %101 = add nsw i32 %94, %92
  %102 = sext i32 %101 to i64
  %103 = mul nsw i64 %102, 473
  %104 = lshr i64 %103, 8
  %105 = trunc i64 %104 to i32
  %106 = sext i32 %94 to i64
  %107 = mul nsw i64 %106, 277
  %108 = lshr i64 %107, 8
  %109 = trunc i64 %108 to i32
  %110 = sub nsw i32 %109, %105
  %111 = sext i32 %92 to i64
  %112 = mul i64 %111, 1099511627107
  %113 = lshr i64 %112, 8
  %114 = trunc i64 %113 to i32
  %115 = sub i32 %114, %95
  %116 = add i32 %115, %105
  %117 = sub nsw i32 %100, %116
  %118 = add nsw i32 %117, %110
  %119 = add nsw i32 %95, %75
  store i32 %119, ptr %16, align 4, !tbaa !41
  %120 = sub nsw i32 %75, %95
  %121 = add nsw i32 %116, %77
  %122 = getelementptr inbounds i32, ptr %16, i64 8
  store i32 %121, ptr %122, align 4, !tbaa !41
  %123 = sub nsw i32 %77, %116
  %124 = add nsw i32 %117, %78
  %125 = getelementptr inbounds i32, ptr %16, i64 16
  store i32 %124, ptr %125, align 4, !tbaa !41
  %126 = sub nsw i32 %78, %117
  %127 = getelementptr inbounds i32, ptr %16, i64 40
  store i32 %126, ptr %127, align 4, !tbaa !41
  %128 = add nsw i32 %118, %76
  %129 = getelementptr inbounds i32, ptr %16, i64 32
  store i32 %128, ptr %129, align 4, !tbaa !41
  %130 = sub nsw i32 %76, %118
  br label %131

131:                                              ; preds = %56, %51
  %132 = phi i64 [ 24, %56 ], [ 40, %51 ]
  %133 = phi i32 [ %130, %56 ], [ %50, %51 ]
  %134 = phi i32 [ %123, %56 ], [ %50, %51 ]
  %135 = phi i32 [ %120, %56 ], [ %50, %51 ]
  %136 = getelementptr inbounds i32, ptr %16, i64 %132
  store i32 %133, ptr %136, align 4, !tbaa !41
  %137 = getelementptr inbounds i32, ptr %16, i64 48
  store i32 %134, ptr %137, align 4
  %138 = getelementptr inbounds i32, ptr %16, i64 56
  store i32 %135, ptr %138, align 4
  %139 = getelementptr inbounds i32, ptr %16, i64 1
  %140 = getelementptr inbounds i32, ptr %17, i64 1
  %141 = getelementptr inbounds i16, ptr %18, i64 1
  %142 = add nsw i32 %15, -1
  %143 = icmp ugt i32 %15, 1
  br i1 %143, label %14, label %11, !llvm.loop !463

144:                                              ; preds = %279, %11
  %145 = phi i64 [ 0, %11 ], [ %284, %279 ]
  %146 = phi ptr [ %6, %11 ], [ %283, %279 ]
  %147 = getelementptr inbounds ptr, ptr %3, i64 %145
  %148 = load ptr, ptr %147, align 8, !tbaa !10
  %149 = getelementptr inbounds i8, ptr %148, i64 %13
  %150 = getelementptr inbounds i32, ptr %146, i64 1
  %151 = load i32, ptr %150, align 4, !tbaa !41
  %152 = getelementptr inbounds i32, ptr %146, i64 2
  %153 = load i32, ptr %152, align 4, !tbaa !41
  %154 = or i32 %153, %151
  %155 = getelementptr inbounds i32, ptr %146, i64 3
  %156 = load i32, ptr %155, align 4, !tbaa !41
  %157 = or i32 %154, %156
  %158 = getelementptr inbounds i32, ptr %146, i64 4
  %159 = load i32, ptr %158, align 4, !tbaa !41
  %160 = or i32 %157, %159
  %161 = getelementptr inbounds i32, ptr %146, i64 5
  %162 = load i32, ptr %161, align 4, !tbaa !41
  %163 = or i32 %160, %162
  %164 = getelementptr inbounds i32, ptr %146, i64 6
  %165 = load i32, ptr %164, align 4, !tbaa !41
  %166 = or i32 %163, %165
  %167 = getelementptr inbounds i32, ptr %146, i64 7
  %168 = load i32, ptr %167, align 4, !tbaa !41
  %169 = or i32 %166, %168
  %170 = icmp eq i32 %169, 0
  %171 = load i32, ptr %146, align 4, !tbaa !41
  br i1 %170, label %172, label %183

172:                                              ; preds = %144
  %173 = lshr i32 %171, 5
  %174 = and i32 %173, 1023
  %175 = zext i32 %174 to i64
  %176 = getelementptr inbounds i8, ptr %12, i64 %175
  %177 = load i8, ptr %176, align 1, !tbaa !7
  %178 = insertelement <4 x i8> poison, i8 %177, i64 0
  %179 = shufflevector <4 x i8> %178, <4 x i8> poison, <4 x i32> zeroinitializer
  store <4 x i8> %179, ptr %149, align 1, !tbaa !7
  %180 = getelementptr inbounds i8, ptr %149, i64 4
  store i8 %177, ptr %180, align 1, !tbaa !7
  %181 = getelementptr inbounds i8, ptr %149, i64 5
  store i8 %177, ptr %181, align 1, !tbaa !7
  %182 = getelementptr inbounds i8, ptr %149, i64 6
  store i8 %177, ptr %182, align 1, !tbaa !7
  br label %279

183:                                              ; preds = %144
  %184 = add nsw i32 %171, %159
  %185 = sub nsw i32 %171, %159
  %186 = add nsw i32 %165, %153
  %187 = sub nsw i32 %153, %165
  %188 = zext i32 %187 to i64
  %189 = mul nuw nsw i64 %188, 362
  %190 = lshr i64 %189, 8
  %191 = trunc i64 %190 to i32
  %192 = sub i32 %191, %186
  %193 = add nsw i32 %184, %186
  %194 = sub nsw i32 %184, %186
  %195 = add i32 %185, %192
  %196 = sub i32 %185, %192
  %197 = add nsw i32 %162, %156
  %198 = sub nsw i32 %162, %156
  %199 = add nsw i32 %168, %151
  %200 = sub nsw i32 %151, %168
  %201 = add nsw i32 %199, %197
  %202 = sub nsw i32 %199, %197
  %203 = zext i32 %202 to i64
  %204 = mul nuw nsw i64 %203, 362
  %205 = lshr i64 %204, 8
  %206 = trunc i64 %205 to i32
  %207 = add nsw i32 %200, %198
  %208 = zext i32 %207 to i64
  %209 = mul nuw nsw i64 %208, 473
  %210 = lshr i64 %209, 8
  %211 = trunc i64 %210 to i32
  %212 = zext i32 %200 to i64
  %213 = mul nuw nsw i64 %212, 277
  %214 = lshr i64 %213, 8
  %215 = trunc i64 %214 to i32
  %216 = sub i32 %215, %211
  %217 = zext i32 %198 to i64
  %218 = mul i64 %217, 1099511627107
  %219 = lshr i64 %218, 8
  %220 = trunc i64 %219 to i32
  %221 = sub i32 %220, %201
  %222 = add i32 %221, %211
  %223 = sub i32 %206, %222
  %224 = add i32 %223, %216
  %225 = add nsw i32 %193, %201
  %226 = lshr i32 %225, 5
  %227 = and i32 %226, 1023
  %228 = zext i32 %227 to i64
  %229 = getelementptr inbounds i8, ptr %12, i64 %228
  %230 = load i8, ptr %229, align 1, !tbaa !7
  store i8 %230, ptr %149, align 1, !tbaa !7
  %231 = sub nsw i32 %193, %201
  %232 = lshr i32 %231, 5
  %233 = and i32 %232, 1023
  %234 = zext i32 %233 to i64
  %235 = getelementptr inbounds i8, ptr %12, i64 %234
  %236 = load i8, ptr %235, align 1, !tbaa !7
  %237 = getelementptr inbounds i8, ptr %149, i64 7
  store i8 %236, ptr %237, align 1, !tbaa !7
  %238 = add i32 %195, %222
  %239 = lshr i32 %238, 5
  %240 = and i32 %239, 1023
  %241 = zext i32 %240 to i64
  %242 = getelementptr inbounds i8, ptr %12, i64 %241
  %243 = load i8, ptr %242, align 1, !tbaa !7
  %244 = getelementptr inbounds i8, ptr %149, i64 1
  store i8 %243, ptr %244, align 1, !tbaa !7
  %245 = sub i32 %195, %222
  %246 = lshr i32 %245, 5
  %247 = and i32 %246, 1023
  %248 = zext i32 %247 to i64
  %249 = getelementptr inbounds i8, ptr %12, i64 %248
  %250 = load i8, ptr %249, align 1, !tbaa !7
  %251 = getelementptr inbounds i8, ptr %149, i64 6
  store i8 %250, ptr %251, align 1, !tbaa !7
  %252 = add i32 %196, %223
  %253 = lshr i32 %252, 5
  %254 = and i32 %253, 1023
  %255 = zext i32 %254 to i64
  %256 = getelementptr inbounds i8, ptr %12, i64 %255
  %257 = load i8, ptr %256, align 1, !tbaa !7
  %258 = getelementptr inbounds i8, ptr %149, i64 2
  store i8 %257, ptr %258, align 1, !tbaa !7
  %259 = sub i32 %196, %223
  %260 = lshr i32 %259, 5
  %261 = and i32 %260, 1023
  %262 = zext i32 %261 to i64
  %263 = getelementptr inbounds i8, ptr %12, i64 %262
  %264 = load i8, ptr %263, align 1, !tbaa !7
  %265 = getelementptr inbounds i8, ptr %149, i64 5
  store i8 %264, ptr %265, align 1, !tbaa !7
  %266 = add i32 %194, %224
  %267 = lshr i32 %266, 5
  %268 = and i32 %267, 1023
  %269 = zext i32 %268 to i64
  %270 = getelementptr inbounds i8, ptr %12, i64 %269
  %271 = load i8, ptr %270, align 1, !tbaa !7
  %272 = getelementptr inbounds i8, ptr %149, i64 4
  store i8 %271, ptr %272, align 1, !tbaa !7
  %273 = sub i32 %194, %224
  %274 = lshr i32 %273, 5
  %275 = and i32 %274, 1023
  %276 = zext i32 %275 to i64
  %277 = getelementptr inbounds i8, ptr %12, i64 %276
  %278 = load i8, ptr %277, align 1, !tbaa !7
  br label %279

279:                                              ; preds = %183, %172
  %280 = phi i64 [ 3, %183 ], [ 7, %172 ]
  %281 = phi i8 [ %278, %183 ], [ %177, %172 ]
  %282 = getelementptr inbounds i8, ptr %149, i64 %280
  store i8 %281, ptr %282, align 1, !tbaa !7
  %283 = getelementptr inbounds i32, ptr %146, i64 8
  %284 = add nuw nsw i64 %145, 1
  %285 = icmp eq i64 %284, 8
  br i1 %285, label %286, label %144, !llvm.loop !464

286:                                              ; preds = %279
  call void @llvm.lifetime.end.p0(i64 256, ptr nonnull %6) #31
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @jpeg_idct_islow(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, i32 noundef %4) #21 {
  %6 = alloca [64 x i32], align 16
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 61
  %8 = load ptr, ptr %7, align 8, !tbaa !203
  call void @llvm.lifetime.start.p0(i64 256, ptr nonnull %6) #31
  %9 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %1, i64 0, i32 20
  %10 = load ptr, ptr %9, align 8, !tbaa !219
  br label %14

11:                                               ; preds = %161
  %12 = getelementptr inbounds i8, ptr %8, i64 128
  %13 = zext i32 %4 to i64
  br label %174

14:                                               ; preds = %161, %5
  %15 = phi i32 [ 8, %5 ], [ %172, %161 ]
  %16 = phi ptr [ %6, %5 ], [ %169, %161 ]
  %17 = phi ptr [ %10, %5 ], [ %170, %161 ]
  %18 = phi ptr [ %2, %5 ], [ %171, %161 ]
  %19 = getelementptr inbounds i16, ptr %18, i64 8
  %20 = load i16, ptr %19, align 2, !tbaa !12
  %21 = sext i16 %20 to i32
  %22 = getelementptr inbounds i16, ptr %18, i64 16
  %23 = load i16, ptr %22, align 2, !tbaa !12
  %24 = sext i16 %23 to i32
  %25 = or i32 %24, %21
  %26 = getelementptr inbounds i16, ptr %18, i64 24
  %27 = load i16, ptr %26, align 2, !tbaa !12
  %28 = sext i16 %27 to i32
  %29 = or i32 %25, %28
  %30 = getelementptr inbounds i16, ptr %18, i64 32
  %31 = load i16, ptr %30, align 2, !tbaa !12
  %32 = sext i16 %31 to i32
  %33 = or i32 %29, %32
  %34 = getelementptr inbounds i16, ptr %18, i64 40
  %35 = load i16, ptr %34, align 2, !tbaa !12
  %36 = sext i16 %35 to i32
  %37 = or i32 %33, %36
  %38 = getelementptr inbounds i16, ptr %18, i64 48
  %39 = load i16, ptr %38, align 2, !tbaa !12
  %40 = sext i16 %39 to i32
  %41 = or i32 %37, %40
  %42 = getelementptr inbounds i16, ptr %18, i64 56
  %43 = load i16, ptr %42, align 2, !tbaa !12
  %44 = sext i16 %43 to i32
  %45 = or i32 %41, %44
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %57

47:                                               ; preds = %14
  %48 = load i16, ptr %18, align 2, !tbaa !12
  %49 = sext i16 %48 to i32
  %50 = load i32, ptr %17, align 4, !tbaa !41
  %51 = shl nsw i32 %49, 2
  %52 = mul i32 %51, %50
  store i32 %52, ptr %16, align 4, !tbaa !41
  %53 = getelementptr inbounds i32, ptr %16, i64 8
  store i32 %52, ptr %53, align 4, !tbaa !41
  %54 = getelementptr inbounds i32, ptr %16, i64 16
  store i32 %52, ptr %54, align 4, !tbaa !41
  %55 = getelementptr inbounds i32, ptr %16, i64 24
  store i32 %52, ptr %55, align 4, !tbaa !41
  %56 = getelementptr inbounds i32, ptr %16, i64 32
  store i32 %52, ptr %56, align 4, !tbaa !41
  br label %161

57:                                               ; preds = %14
  %58 = getelementptr inbounds i32, ptr %17, i64 16
  %59 = load i32, ptr %58, align 4, !tbaa !41
  %60 = mul nsw i32 %59, %24
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i32, ptr %17, i64 48
  %63 = load i32, ptr %62, align 4, !tbaa !41
  %64 = mul nsw i32 %63, %40
  %65 = sext i32 %64 to i64
  %66 = add nsw i64 %65, %61
  %67 = mul nsw i64 %66, 4433
  %68 = mul nsw i64 %65, -15137
  %69 = add nsw i64 %67, %68
  %70 = mul nsw i64 %61, 6270
  %71 = add nsw i64 %67, %70
  %72 = load i16, ptr %18, align 2, !tbaa !12
  %73 = sext i16 %72 to i32
  %74 = load i32, ptr %17, align 4, !tbaa !41
  %75 = mul nsw i32 %74, %73
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds i32, ptr %17, i64 32
  %78 = load i32, ptr %77, align 4, !tbaa !41
  %79 = mul nsw i32 %78, %32
  %80 = sext i32 %79 to i64
  %81 = add nsw i64 %80, %76
  %82 = shl nsw i64 %81, 13
  %83 = sub nsw i64 %76, %80
  %84 = shl nsw i64 %83, 13
  %85 = add nsw i64 %82, %71
  %86 = sub nsw i64 %82, %71
  %87 = add nsw i64 %84, %69
  %88 = sub nsw i64 %84, %69
  %89 = getelementptr inbounds i32, ptr %17, i64 56
  %90 = load i32, ptr %89, align 4, !tbaa !41
  %91 = mul nsw i32 %90, %44
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds i32, ptr %17, i64 40
  %94 = load i32, ptr %93, align 4, !tbaa !41
  %95 = mul nsw i32 %94, %36
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds i32, ptr %17, i64 24
  %98 = load i32, ptr %97, align 4, !tbaa !41
  %99 = mul nsw i32 %98, %28
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds i32, ptr %17, i64 8
  %102 = load i32, ptr %101, align 4, !tbaa !41
  %103 = mul nsw i32 %102, %21
  %104 = sext i32 %103 to i64
  %105 = add nsw i64 %104, %92
  %106 = add nsw i64 %100, %96
  %107 = add nsw i64 %100, %92
  %108 = add nsw i64 %104, %96
  %109 = add nsw i64 %108, %107
  %110 = mul nsw i64 %109, 9633
  %111 = mul nsw i64 %92, 2446
  %112 = mul nsw i64 %96, 16819
  %113 = mul nsw i64 %100, 25172
  %114 = mul nsw i64 %104, 12299
  %115 = mul nsw i64 %105, -7373
  %116 = mul nsw i64 %106, -20995
  %117 = mul nsw i64 %107, -16069
  %118 = mul nsw i64 %108, -3196
  %119 = add nsw i64 %110, %117
  %120 = add nsw i64 %110, %118
  %121 = add nsw i64 %115, %111
  %122 = add nsw i64 %121, %119
  %123 = add nsw i64 %116, %112
  %124 = add nsw i64 %123, %120
  %125 = add nsw i64 %116, %113
  %126 = add nsw i64 %125, %119
  %127 = add nsw i64 %115, %114
  %128 = add nsw i64 %127, %120
  %129 = add nsw i64 %85, 1024
  %130 = add nsw i64 %129, %128
  %131 = lshr i64 %130, 11
  %132 = trunc i64 %131 to i32
  store i32 %132, ptr %16, align 4, !tbaa !41
  %133 = sub nsw i64 %129, %128
  %134 = lshr i64 %133, 11
  %135 = trunc i64 %134 to i32
  %136 = add nsw i64 %87, 1024
  %137 = add nsw i64 %136, %126
  %138 = lshr i64 %137, 11
  %139 = trunc i64 %138 to i32
  %140 = getelementptr inbounds i32, ptr %16, i64 8
  store i32 %139, ptr %140, align 4, !tbaa !41
  %141 = sub nsw i64 %136, %126
  %142 = lshr i64 %141, 11
  %143 = trunc i64 %142 to i32
  %144 = add nsw i64 %88, 1024
  %145 = add nsw i64 %144, %124
  %146 = lshr i64 %145, 11
  %147 = trunc i64 %146 to i32
  %148 = getelementptr inbounds i32, ptr %16, i64 16
  store i32 %147, ptr %148, align 4, !tbaa !41
  %149 = sub nsw i64 %144, %124
  %150 = lshr i64 %149, 11
  %151 = trunc i64 %150 to i32
  %152 = getelementptr inbounds i32, ptr %16, i64 40
  store i32 %151, ptr %152, align 4, !tbaa !41
  %153 = add nsw i64 %86, 1024
  %154 = add nsw i64 %153, %122
  %155 = lshr i64 %154, 11
  %156 = trunc i64 %155 to i32
  %157 = getelementptr inbounds i32, ptr %16, i64 24
  store i32 %156, ptr %157, align 4, !tbaa !41
  %158 = sub nsw i64 %153, %122
  %159 = lshr i64 %158, 11
  %160 = trunc i64 %159 to i32
  br label %161

161:                                              ; preds = %57, %47
  %162 = phi i64 [ 32, %57 ], [ 40, %47 ]
  %163 = phi i32 [ %160, %57 ], [ %52, %47 ]
  %164 = phi i32 [ %143, %57 ], [ %52, %47 ]
  %165 = phi i32 [ %135, %57 ], [ %52, %47 ]
  %166 = getelementptr inbounds i32, ptr %16, i64 %162
  store i32 %163, ptr %166, align 4, !tbaa !41
  %167 = getelementptr inbounds i32, ptr %16, i64 48
  store i32 %164, ptr %167, align 4
  %168 = getelementptr inbounds i32, ptr %16, i64 56
  store i32 %165, ptr %168, align 4
  %169 = getelementptr inbounds i32, ptr %16, i64 1
  %170 = getelementptr inbounds i32, ptr %17, i64 1
  %171 = getelementptr inbounds i16, ptr %18, i64 1
  %172 = add nsw i32 %15, -1
  %173 = icmp ugt i32 %15, 1
  br i1 %173, label %14, label %11, !llvm.loop !465

174:                                              ; preds = %316, %11
  %175 = phi i64 [ 0, %11 ], [ %321, %316 ]
  %176 = phi ptr [ %6, %11 ], [ %320, %316 ]
  %177 = getelementptr inbounds ptr, ptr %3, i64 %175
  %178 = load ptr, ptr %177, align 8, !tbaa !10
  %179 = getelementptr inbounds i8, ptr %178, i64 %13
  %180 = getelementptr inbounds i32, ptr %176, i64 1
  %181 = load i32, ptr %180, align 4, !tbaa !41
  %182 = getelementptr inbounds i32, ptr %176, i64 2
  %183 = load i32, ptr %182, align 4, !tbaa !41
  %184 = or i32 %183, %181
  %185 = getelementptr inbounds i32, ptr %176, i64 3
  %186 = load i32, ptr %185, align 4, !tbaa !41
  %187 = or i32 %184, %186
  %188 = getelementptr inbounds i32, ptr %176, i64 4
  %189 = load i32, ptr %188, align 4, !tbaa !41
  %190 = or i32 %187, %189
  %191 = getelementptr inbounds i32, ptr %176, i64 5
  %192 = load i32, ptr %191, align 4, !tbaa !41
  %193 = or i32 %190, %192
  %194 = getelementptr inbounds i32, ptr %176, i64 6
  %195 = load i32, ptr %194, align 4, !tbaa !41
  %196 = or i32 %193, %195
  %197 = getelementptr inbounds i32, ptr %176, i64 7
  %198 = load i32, ptr %197, align 4, !tbaa !41
  %199 = or i32 %196, %198
  %200 = icmp eq i32 %199, 0
  br i1 %200, label %201, label %214

201:                                              ; preds = %174
  %202 = load i32, ptr %176, align 4, !tbaa !41
  %203 = add i32 %202, 16
  %204 = lshr i32 %203, 5
  %205 = and i32 %204, 1023
  %206 = zext i32 %205 to i64
  %207 = getelementptr inbounds i8, ptr %12, i64 %206
  %208 = load i8, ptr %207, align 1, !tbaa !7
  %209 = insertelement <4 x i8> poison, i8 %208, i64 0
  %210 = shufflevector <4 x i8> %209, <4 x i8> poison, <4 x i32> zeroinitializer
  store <4 x i8> %210, ptr %179, align 1, !tbaa !7
  %211 = getelementptr inbounds i8, ptr %179, i64 4
  store i8 %208, ptr %211, align 1, !tbaa !7
  %212 = getelementptr inbounds i8, ptr %179, i64 5
  store i8 %208, ptr %212, align 1, !tbaa !7
  %213 = getelementptr inbounds i8, ptr %179, i64 6
  store i8 %208, ptr %213, align 1, !tbaa !7
  br label %316

214:                                              ; preds = %174
  %215 = zext i32 %183 to i64
  %216 = zext i32 %195 to i64
  %217 = add nuw nsw i64 %216, %215
  %218 = mul nuw nsw i64 %217, 4433
  %219 = mul nsw i64 %216, -15137
  %220 = add nsw i64 %218, %219
  %221 = mul nuw nsw i64 %215, 6270
  %222 = add nuw nsw i64 %218, %221
  %223 = load i32, ptr %176, align 4, !tbaa !41
  %224 = sext i32 %223 to i64
  %225 = sext i32 %189 to i64
  %226 = add nsw i64 %224, %225
  %227 = shl nsw i64 %226, 13
  %228 = sub nsw i64 %224, %225
  %229 = shl nsw i64 %228, 13
  %230 = add nsw i64 %227, %222
  %231 = sub nsw i64 %227, %222
  %232 = add nsw i64 %229, %220
  %233 = sub nsw i64 %229, %220
  %234 = zext i32 %198 to i64
  %235 = zext i32 %192 to i64
  %236 = zext i32 %186 to i64
  %237 = zext i32 %181 to i64
  %238 = add nuw nsw i64 %234, %237
  %239 = add nuw nsw i64 %235, %236
  %240 = add nuw nsw i64 %234, %236
  %241 = add nuw nsw i64 %235, %237
  %242 = add nuw nsw i64 %240, %241
  %243 = mul nuw nsw i64 %242, 9633
  %244 = mul nuw nsw i64 %234, 2446
  %245 = mul nuw nsw i64 %235, 16819
  %246 = mul nuw nsw i64 %236, 25172
  %247 = mul nuw nsw i64 %237, 12299
  %248 = mul nsw i64 %238, -7373
  %249 = mul nsw i64 %239, -20995
  %250 = mul nsw i64 %240, -16069
  %251 = mul nsw i64 %241, -3196
  %252 = add nsw i64 %243, %250
  %253 = add nsw i64 %243, %251
  %254 = add nsw i64 %248, %244
  %255 = add nsw i64 %254, %252
  %256 = add nsw i64 %249, %245
  %257 = add nsw i64 %256, %253
  %258 = add nsw i64 %249, %246
  %259 = add nsw i64 %258, %252
  %260 = add nsw i64 %248, %247
  %261 = add nsw i64 %260, %253
  %262 = add nsw i64 %261, 131072
  %263 = add i64 %262, %230
  %264 = lshr i64 %263, 18
  %265 = and i64 %264, 1023
  %266 = getelementptr inbounds i8, ptr %12, i64 %265
  %267 = load i8, ptr %266, align 1, !tbaa !7
  store i8 %267, ptr %179, align 1, !tbaa !7
  %268 = sub nsw i64 %230, %261
  %269 = add i64 %268, 131072
  %270 = lshr i64 %269, 18
  %271 = and i64 %270, 1023
  %272 = getelementptr inbounds i8, ptr %12, i64 %271
  %273 = load i8, ptr %272, align 1, !tbaa !7
  %274 = getelementptr inbounds i8, ptr %179, i64 7
  store i8 %273, ptr %274, align 1, !tbaa !7
  %275 = add nsw i64 %259, 131072
  %276 = add i64 %275, %232
  %277 = lshr i64 %276, 18
  %278 = and i64 %277, 1023
  %279 = getelementptr inbounds i8, ptr %12, i64 %278
  %280 = load i8, ptr %279, align 1, !tbaa !7
  %281 = getelementptr inbounds i8, ptr %179, i64 1
  store i8 %280, ptr %281, align 1, !tbaa !7
  %282 = sub nsw i64 %232, %259
  %283 = add i64 %282, 131072
  %284 = lshr i64 %283, 18
  %285 = and i64 %284, 1023
  %286 = getelementptr inbounds i8, ptr %12, i64 %285
  %287 = load i8, ptr %286, align 1, !tbaa !7
  %288 = getelementptr inbounds i8, ptr %179, i64 6
  store i8 %287, ptr %288, align 1, !tbaa !7
  %289 = add nsw i64 %257, 131072
  %290 = add i64 %289, %233
  %291 = lshr i64 %290, 18
  %292 = and i64 %291, 1023
  %293 = getelementptr inbounds i8, ptr %12, i64 %292
  %294 = load i8, ptr %293, align 1, !tbaa !7
  %295 = getelementptr inbounds i8, ptr %179, i64 2
  store i8 %294, ptr %295, align 1, !tbaa !7
  %296 = sub nsw i64 %233, %257
  %297 = add i64 %296, 131072
  %298 = lshr i64 %297, 18
  %299 = and i64 %298, 1023
  %300 = getelementptr inbounds i8, ptr %12, i64 %299
  %301 = load i8, ptr %300, align 1, !tbaa !7
  %302 = getelementptr inbounds i8, ptr %179, i64 5
  store i8 %301, ptr %302, align 1, !tbaa !7
  %303 = add nsw i64 %255, 131072
  %304 = add i64 %303, %231
  %305 = lshr i64 %304, 18
  %306 = and i64 %305, 1023
  %307 = getelementptr inbounds i8, ptr %12, i64 %306
  %308 = load i8, ptr %307, align 1, !tbaa !7
  %309 = getelementptr inbounds i8, ptr %179, i64 3
  store i8 %308, ptr %309, align 1, !tbaa !7
  %310 = sub nsw i64 %231, %255
  %311 = add i64 %310, 131072
  %312 = lshr i64 %311, 18
  %313 = and i64 %312, 1023
  %314 = getelementptr inbounds i8, ptr %12, i64 %313
  %315 = load i8, ptr %314, align 1, !tbaa !7
  br label %316

316:                                              ; preds = %214, %201
  %317 = phi i64 [ 4, %214 ], [ 7, %201 ]
  %318 = phi i8 [ %315, %214 ], [ %208, %201 ]
  %319 = getelementptr inbounds i8, ptr %179, i64 %317
  store i8 %318, ptr %319, align 1, !tbaa !7
  %320 = getelementptr inbounds i32, ptr %176, i64 8
  %321 = add nuw nsw i64 %175, 1
  %322 = icmp eq i64 %321, 8
  br i1 %322, label %323, label %174, !llvm.loop !466

323:                                              ; preds = %316
  call void @llvm.lifetime.end.p0(i64 256, ptr nonnull %6) #31
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @jpeg_idct_4x4(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, i32 noundef %4) #21 {
  %6 = alloca [32 x i32], align 16
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 61
  %8 = load ptr, ptr %7, align 8, !tbaa !203
  call void @llvm.lifetime.start.p0(i64 128, ptr nonnull %6) #31
  %9 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %1, i64 0, i32 20
  %10 = load ptr, ptr %9, align 8, !tbaa !219
  br label %14

11:                                               ; preds = %120
  %12 = getelementptr inbounds i8, ptr %8, i64 128
  %13 = zext i32 %4 to i64
  br label %126

14:                                               ; preds = %120, %5
  %15 = phi i32 [ 8, %5 ], [ %124, %120 ]
  %16 = phi ptr [ %6, %5 ], [ %123, %120 ]
  %17 = phi ptr [ %10, %5 ], [ %122, %120 ]
  %18 = phi ptr [ %2, %5 ], [ %121, %120 ]
  %19 = icmp eq i32 %15, 4
  br i1 %19, label %120, label %20

20:                                               ; preds = %14
  %21 = getelementptr inbounds i16, ptr %18, i64 8
  %22 = load i16, ptr %21, align 2, !tbaa !12
  %23 = sext i16 %22 to i32
  %24 = getelementptr inbounds i16, ptr %18, i64 16
  %25 = load i16, ptr %24, align 2, !tbaa !12
  %26 = sext i16 %25 to i32
  %27 = or i32 %26, %23
  %28 = getelementptr inbounds i16, ptr %18, i64 24
  %29 = load i16, ptr %28, align 2, !tbaa !12
  %30 = sext i16 %29 to i32
  %31 = or i32 %27, %30
  %32 = getelementptr inbounds i16, ptr %18, i64 40
  %33 = load i16, ptr %32, align 2, !tbaa !12
  %34 = sext i16 %33 to i32
  %35 = or i32 %31, %34
  %36 = getelementptr inbounds i16, ptr %18, i64 48
  %37 = load i16, ptr %36, align 2, !tbaa !12
  %38 = sext i16 %37 to i32
  %39 = or i32 %35, %38
  %40 = getelementptr inbounds i16, ptr %18, i64 56
  %41 = load i16, ptr %40, align 2, !tbaa !12
  %42 = sext i16 %41 to i32
  %43 = or i32 %39, %42
  %44 = icmp eq i32 %43, 0
  %45 = load i16, ptr %18, align 2, !tbaa !12
  %46 = sext i16 %45 to i32
  %47 = load i32, ptr %17, align 4, !tbaa !41
  br i1 %44, label %48, label %53

48:                                               ; preds = %20
  %49 = shl nsw i32 %46, 2
  %50 = mul i32 %49, %47
  store i32 %50, ptr %16, align 4, !tbaa !41
  %51 = getelementptr inbounds i32, ptr %16, i64 8
  store i32 %50, ptr %51, align 4, !tbaa !41
  %52 = getelementptr inbounds i32, ptr %16, i64 16
  store i32 %50, ptr %52, align 4, !tbaa !41
  br label %116

53:                                               ; preds = %20
  %54 = mul nsw i32 %47, %46
  %55 = sext i32 %54 to i64
  %56 = shl nsw i64 %55, 14
  %57 = getelementptr inbounds i32, ptr %17, i64 16
  %58 = load i32, ptr %57, align 4, !tbaa !41
  %59 = mul nsw i32 %58, %26
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds i32, ptr %17, i64 48
  %62 = load i32, ptr %61, align 4, !tbaa !41
  %63 = mul nsw i32 %62, %38
  %64 = sext i32 %63 to i64
  %65 = mul nsw i64 %60, 15137
  %66 = mul nsw i64 %64, -6270
  %67 = add nsw i64 %66, %65
  %68 = add nsw i64 %67, %56
  %69 = sub nsw i64 %56, %67
  %70 = getelementptr inbounds i32, ptr %17, i64 56
  %71 = load i32, ptr %70, align 4, !tbaa !41
  %72 = mul nsw i32 %71, %42
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds i32, ptr %17, i64 40
  %75 = load i32, ptr %74, align 4, !tbaa !41
  %76 = mul nsw i32 %75, %34
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds i32, ptr %17, i64 24
  %79 = load i32, ptr %78, align 4, !tbaa !41
  %80 = mul nsw i32 %79, %30
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds i32, ptr %17, i64 8
  %83 = load i32, ptr %82, align 4, !tbaa !41
  %84 = mul nsw i32 %83, %23
  %85 = sext i32 %84 to i64
  %86 = mul nsw i64 %73, -1730
  %87 = mul nsw i64 %77, 11893
  %88 = add nsw i64 %87, %86
  %89 = mul nsw i64 %81, -17799
  %90 = add nsw i64 %88, %89
  %91 = mul nsw i64 %85, 8697
  %92 = add nsw i64 %90, %91
  %93 = mul nsw i64 %73, -4176
  %94 = mul nsw i64 %77, -4926
  %95 = add nsw i64 %94, %93
  %96 = mul nsw i64 %81, 7373
  %97 = add nsw i64 %95, %96
  %98 = mul nsw i64 %85, 20995
  %99 = add nsw i64 %97, %98
  %100 = add nsw i64 %68, 2048
  %101 = add nsw i64 %100, %99
  %102 = lshr i64 %101, 12
  %103 = trunc i64 %102 to i32
  store i32 %103, ptr %16, align 4, !tbaa !41
  %104 = sub nsw i64 %100, %99
  %105 = lshr i64 %104, 12
  %106 = trunc i64 %105 to i32
  %107 = getelementptr inbounds i32, ptr %16, i64 24
  store i32 %106, ptr %107, align 4, !tbaa !41
  %108 = add nsw i64 %69, 2048
  %109 = add nsw i64 %108, %92
  %110 = lshr i64 %109, 12
  %111 = trunc i64 %110 to i32
  %112 = getelementptr inbounds i32, ptr %16, i64 8
  store i32 %111, ptr %112, align 4, !tbaa !41
  %113 = sub nsw i64 %108, %92
  %114 = lshr i64 %113, 12
  %115 = trunc i64 %114 to i32
  br label %116

116:                                              ; preds = %53, %48
  %117 = phi i64 [ 16, %53 ], [ 24, %48 ]
  %118 = phi i32 [ %115, %53 ], [ %50, %48 ]
  %119 = getelementptr inbounds i32, ptr %16, i64 %117
  store i32 %118, ptr %119, align 4, !tbaa !41
  br label %120

120:                                              ; preds = %116, %14
  %121 = getelementptr inbounds i16, ptr %18, i64 1
  %122 = getelementptr inbounds i32, ptr %17, i64 1
  %123 = getelementptr inbounds i32, ptr %16, i64 1
  %124 = add nsw i32 %15, -1
  %125 = icmp ugt i32 %15, 1
  br i1 %125, label %14, label %11, !llvm.loop !467

126:                                              ; preds = %214, %11
  %127 = phi i64 [ 0, %11 ], [ %218, %214 ]
  %128 = phi ptr [ %6, %11 ], [ %217, %214 ]
  %129 = getelementptr inbounds ptr, ptr %3, i64 %127
  %130 = load ptr, ptr %129, align 8, !tbaa !10
  %131 = getelementptr inbounds i8, ptr %130, i64 %13
  %132 = getelementptr inbounds i32, ptr %128, i64 1
  %133 = load i32, ptr %132, align 4, !tbaa !41
  %134 = getelementptr inbounds i32, ptr %128, i64 2
  %135 = load i32, ptr %134, align 4, !tbaa !41
  %136 = or i32 %135, %133
  %137 = getelementptr inbounds i32, ptr %128, i64 3
  %138 = load i32, ptr %137, align 4, !tbaa !41
  %139 = or i32 %136, %138
  %140 = getelementptr inbounds i32, ptr %128, i64 5
  %141 = load i32, ptr %140, align 4, !tbaa !41
  %142 = or i32 %139, %141
  %143 = getelementptr inbounds i32, ptr %128, i64 6
  %144 = load i32, ptr %143, align 4, !tbaa !41
  %145 = or i32 %142, %144
  %146 = getelementptr inbounds i32, ptr %128, i64 7
  %147 = load i32, ptr %146, align 4, !tbaa !41
  %148 = or i32 %145, %147
  %149 = icmp eq i32 %148, 0
  %150 = load i32, ptr %128, align 4, !tbaa !41
  br i1 %149, label %151, label %160

151:                                              ; preds = %126
  %152 = add i32 %150, 16
  %153 = lshr i32 %152, 5
  %154 = and i32 %153, 1023
  %155 = zext i32 %154 to i64
  %156 = getelementptr inbounds i8, ptr %12, i64 %155
  %157 = load i8, ptr %156, align 1, !tbaa !7
  store i8 %157, ptr %131, align 1, !tbaa !7
  %158 = getelementptr inbounds i8, ptr %131, i64 1
  store i8 %157, ptr %158, align 1, !tbaa !7
  %159 = getelementptr inbounds i8, ptr %131, i64 3
  store i8 %157, ptr %159, align 1, !tbaa !7
  br label %214

160:                                              ; preds = %126
  %161 = sext i32 %150 to i64
  %162 = shl nsw i64 %161, 14
  %163 = zext i32 %135 to i64
  %164 = mul nuw nsw i64 %163, 15137
  %165 = zext i32 %144 to i64
  %166 = mul nsw i64 %165, -6270
  %167 = add nsw i64 %166, %164
  %168 = add nsw i64 %162, %167
  %169 = sub nsw i64 %162, %167
  %170 = zext i32 %147 to i64
  %171 = zext i32 %141 to i64
  %172 = zext i32 %138 to i64
  %173 = zext i32 %133 to i64
  %174 = mul nsw i64 %170, -1730
  %175 = mul nuw nsw i64 %171, 11893
  %176 = mul nsw i64 %172, -17799
  %177 = mul nuw nsw i64 %173, 8697
  %178 = add nsw i64 %176, %177
  %179 = add nsw i64 %178, %175
  %180 = add nsw i64 %179, %174
  %181 = mul nsw i64 %170, -4176
  %182 = mul nsw i64 %171, -4926
  %183 = mul nuw nsw i64 %172, 7373
  %184 = mul nuw nsw i64 %173, 20995
  %185 = add nuw nsw i64 %183, %184
  %186 = add nsw i64 %185, %182
  %187 = add nsw i64 %186, %181
  %188 = add nsw i64 %187, 262144
  %189 = add nsw i64 %188, %168
  %190 = lshr i64 %189, 19
  %191 = and i64 %190, 1023
  %192 = getelementptr inbounds i8, ptr %12, i64 %191
  %193 = load i8, ptr %192, align 1, !tbaa !7
  store i8 %193, ptr %131, align 1, !tbaa !7
  %194 = sub nsw i64 %168, %187
  %195 = add nsw i64 %194, 262144
  %196 = lshr i64 %195, 19
  %197 = and i64 %196, 1023
  %198 = getelementptr inbounds i8, ptr %12, i64 %197
  %199 = load i8, ptr %198, align 1, !tbaa !7
  %200 = getelementptr inbounds i8, ptr %131, i64 3
  store i8 %199, ptr %200, align 1, !tbaa !7
  %201 = add nsw i64 %180, 262144
  %202 = add nsw i64 %201, %169
  %203 = lshr i64 %202, 19
  %204 = and i64 %203, 1023
  %205 = getelementptr inbounds i8, ptr %12, i64 %204
  %206 = load i8, ptr %205, align 1, !tbaa !7
  %207 = getelementptr inbounds i8, ptr %131, i64 1
  store i8 %206, ptr %207, align 1, !tbaa !7
  %208 = sub nsw i64 %169, %180
  %209 = add nsw i64 %208, 262144
  %210 = lshr i64 %209, 19
  %211 = and i64 %210, 1023
  %212 = getelementptr inbounds i8, ptr %12, i64 %211
  %213 = load i8, ptr %212, align 1, !tbaa !7
  br label %214

214:                                              ; preds = %160, %151
  %215 = phi i8 [ %157, %151 ], [ %213, %160 ]
  %216 = getelementptr inbounds i8, ptr %131, i64 2
  store i8 %215, ptr %216, align 1
  %217 = getelementptr inbounds i32, ptr %128, i64 8
  %218 = add nuw nsw i64 %127, 1
  %219 = icmp eq i64 %218, 4
  br i1 %219, label %220, label %126, !llvm.loop !468

220:                                              ; preds = %214
  call void @llvm.lifetime.end.p0(i64 128, ptr nonnull %6) #31
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @jpeg_idct_2x2(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, i32 noundef %4) #21 {
  %6 = alloca [16 x i32], align 16
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 61
  %8 = load ptr, ptr %7, align 8, !tbaa !203
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %6) #31
  %9 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %1, i64 0, i32 20
  %10 = load ptr, ptr %9, align 8, !tbaa !219
  br label %14

11:                                               ; preds = %79
  %12 = getelementptr inbounds i8, ptr %8, i64 128
  %13 = zext i32 %4 to i64
  br label %85

14:                                               ; preds = %79, %5
  %15 = phi i32 [ 8, %5 ], [ %83, %79 ]
  %16 = phi ptr [ %2, %5 ], [ %80, %79 ]
  %17 = phi ptr [ %10, %5 ], [ %81, %79 ]
  %18 = phi ptr [ %6, %5 ], [ %82, %79 ]
  switch i32 %15, label %19 [
    i32 6, label %79
    i32 4, label %79
    i32 2, label %79
  ]

19:                                               ; preds = %14
  %20 = getelementptr inbounds i16, ptr %16, i64 8
  %21 = load i16, ptr %20, align 2, !tbaa !12
  %22 = sext i16 %21 to i32
  %23 = getelementptr inbounds i16, ptr %16, i64 24
  %24 = load i16, ptr %23, align 2, !tbaa !12
  %25 = sext i16 %24 to i32
  %26 = or i32 %25, %22
  %27 = getelementptr inbounds i16, ptr %16, i64 40
  %28 = load i16, ptr %27, align 2, !tbaa !12
  %29 = sext i16 %28 to i32
  %30 = or i32 %26, %29
  %31 = getelementptr inbounds i16, ptr %16, i64 56
  %32 = load i16, ptr %31, align 2, !tbaa !12
  %33 = sext i16 %32 to i32
  %34 = or i32 %30, %33
  %35 = icmp eq i32 %34, 0
  %36 = load i16, ptr %16, align 2, !tbaa !12
  %37 = sext i16 %36 to i32
  %38 = load i32, ptr %17, align 4, !tbaa !41
  br i1 %35, label %39, label %42

39:                                               ; preds = %19
  %40 = shl nsw i32 %37, 2
  %41 = mul i32 %40, %38
  store i32 %41, ptr %18, align 4, !tbaa !41
  br label %76

42:                                               ; preds = %19
  %43 = mul nsw i32 %38, %37
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 15
  %46 = getelementptr inbounds i32, ptr %17, i64 56
  %47 = load i32, ptr %46, align 4, !tbaa !41
  %48 = mul nsw i32 %47, %33
  %49 = sext i32 %48 to i64
  %50 = mul nsw i64 %49, -5906
  %51 = getelementptr inbounds i32, ptr %17, i64 40
  %52 = load i32, ptr %51, align 4, !tbaa !41
  %53 = mul nsw i32 %52, %29
  %54 = sext i32 %53 to i64
  %55 = mul nsw i64 %54, 6967
  %56 = add nsw i64 %55, %50
  %57 = getelementptr inbounds i32, ptr %17, i64 24
  %58 = load i32, ptr %57, align 4, !tbaa !41
  %59 = mul nsw i32 %58, %25
  %60 = sext i32 %59 to i64
  %61 = mul nsw i64 %60, -10426
  %62 = add nsw i64 %56, %61
  %63 = getelementptr inbounds i32, ptr %17, i64 8
  %64 = load i32, ptr %63, align 4, !tbaa !41
  %65 = mul nsw i32 %64, %22
  %66 = sext i32 %65 to i64
  %67 = mul nsw i64 %66, 29692
  %68 = add nsw i64 %62, %67
  %69 = or i64 %45, 4096
  %70 = add nsw i64 %69, %68
  %71 = lshr i64 %70, 13
  %72 = trunc i64 %71 to i32
  store i32 %72, ptr %18, align 4, !tbaa !41
  %73 = sub nsw i64 %69, %68
  %74 = lshr i64 %73, 13
  %75 = trunc i64 %74 to i32
  br label %76

76:                                               ; preds = %42, %39
  %77 = phi i32 [ %75, %42 ], [ %41, %39 ]
  %78 = getelementptr inbounds i32, ptr %18, i64 8
  store i32 %77, ptr %78, align 4, !tbaa !41
  br label %79

79:                                               ; preds = %76, %14, %14, %14
  %80 = getelementptr inbounds i16, ptr %16, i64 1
  %81 = getelementptr inbounds i32, ptr %17, i64 1
  %82 = getelementptr inbounds i32, ptr %18, i64 1
  %83 = add nsw i32 %15, -1
  %84 = icmp ugt i32 %15, 1
  br i1 %84, label %14, label %11, !llvm.loop !469

85:                                               ; preds = %138, %11
  %86 = phi i1 [ true, %11 ], [ false, %138 ]
  %87 = phi i64 [ 0, %11 ], [ 1, %138 ]
  %88 = phi ptr [ %6, %11 ], [ %141, %138 ]
  %89 = getelementptr inbounds ptr, ptr %3, i64 %87
  %90 = load ptr, ptr %89, align 8, !tbaa !10
  %91 = getelementptr inbounds i8, ptr %90, i64 %13
  %92 = getelementptr inbounds i32, ptr %88, i64 1
  %93 = load i32, ptr %92, align 4, !tbaa !41
  %94 = getelementptr inbounds i32, ptr %88, i64 3
  %95 = load i32, ptr %94, align 4, !tbaa !41
  %96 = or i32 %95, %93
  %97 = getelementptr inbounds i32, ptr %88, i64 5
  %98 = load i32, ptr %97, align 4, !tbaa !41
  %99 = or i32 %96, %98
  %100 = getelementptr inbounds i32, ptr %88, i64 7
  %101 = load i32, ptr %100, align 4, !tbaa !41
  %102 = or i32 %99, %101
  %103 = icmp eq i32 %102, 0
  %104 = load i32, ptr %88, align 4, !tbaa !41
  br i1 %103, label %105, label %112

105:                                              ; preds = %85
  %106 = add i32 %104, 16
  %107 = lshr i32 %106, 5
  %108 = and i32 %107, 1023
  %109 = zext i32 %108 to i64
  %110 = getelementptr inbounds i8, ptr %12, i64 %109
  %111 = load i8, ptr %110, align 1, !tbaa !7
  store i8 %111, ptr %91, align 1, !tbaa !7
  br label %138

112:                                              ; preds = %85
  %113 = sext i32 %104 to i64
  %114 = shl nsw i64 %113, 15
  %115 = zext i32 %101 to i64
  %116 = mul nsw i64 %115, -5906
  %117 = zext i32 %98 to i64
  %118 = mul nuw nsw i64 %117, 6967
  %119 = zext i32 %95 to i64
  %120 = mul nsw i64 %119, -10426
  %121 = zext i32 %93 to i64
  %122 = mul nuw nsw i64 %121, 29692
  %123 = add nsw i64 %120, %122
  %124 = add nsw i64 %123, %118
  %125 = add nsw i64 %124, %116
  %126 = add nsw i64 %125, 524288
  %127 = add nsw i64 %126, %114
  %128 = lshr i64 %127, 20
  %129 = and i64 %128, 1023
  %130 = getelementptr inbounds i8, ptr %12, i64 %129
  %131 = load i8, ptr %130, align 1, !tbaa !7
  store i8 %131, ptr %91, align 1, !tbaa !7
  %132 = sub nsw i64 %114, %125
  %133 = add nsw i64 %132, 524288
  %134 = lshr i64 %133, 20
  %135 = and i64 %134, 1023
  %136 = getelementptr inbounds i8, ptr %12, i64 %135
  %137 = load i8, ptr %136, align 1, !tbaa !7
  br label %138

138:                                              ; preds = %112, %105
  %139 = phi i8 [ %111, %105 ], [ %137, %112 ]
  %140 = getelementptr inbounds i8, ptr %91, i64 1
  store i8 %139, ptr %140, align 1
  %141 = getelementptr inbounds i32, ptr %88, i64 8
  br i1 %86, label %85, label %142, !llvm.loop !470

142:                                              ; preds = %138
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %6) #31
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal void @jpeg_idct_1x1(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, i32 noundef %4) #13 {
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 61
  %7 = load ptr, ptr %6, align 8, !tbaa !203
  %8 = getelementptr inbounds i8, ptr %7, i64 128
  %9 = getelementptr inbounds %struct.jpeg_component_info.102, ptr %1, i64 0, i32 20
  %10 = load ptr, ptr %9, align 8, !tbaa !219
  %11 = load i16, ptr %2, align 2, !tbaa !12
  %12 = zext i16 %11 to i32
  %13 = load i32, ptr %10, align 4, !tbaa !41
  %14 = mul i32 %13, %12
  %15 = add i32 %14, 4
  %16 = lshr i32 %15, 3
  %17 = and i32 %16, 1023
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds i8, ptr %8, i64 %18
  %20 = load i8, ptr %19, align 1, !tbaa !7
  %21 = load ptr, ptr %3, align 8, !tbaa !10
  %22 = zext i32 %4 to i64
  %23 = getelementptr inbounds i8, ptr %21, i64 %22
  store i8 %20, ptr %23, align 1, !tbaa !7
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @jinit_memory_mgr(ptr noundef %0) #6 {
  %2 = alloca i64, align 8
  %3 = alloca i8, align 1
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #31
  %4 = getelementptr inbounds %struct.jpeg_common_struct, ptr %0, i64 0, i32 1
  store ptr null, ptr %4, align 8, !tbaa !59
  %5 = tail call i64 @jpeg_mem_init(ptr noundef %0) #32
  store i64 %5, ptr %2, align 8, !tbaa !49
  %6 = tail call ptr @jpeg_get_small(ptr noundef %0, i64 noundef 160) #32
  %7 = icmp eq ptr %6, null
  br i1 %7, label %8, label %14

8:                                                ; preds = %1
  tail call void @jpeg_mem_term(ptr noundef nonnull %0) #32
  %9 = load ptr, ptr %0, align 8, !tbaa !460
  %10 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %9, i64 0, i32 5
  store i32 53, ptr %10, align 8, !tbaa !25
  %11 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %9, i64 0, i32 6
  store i32 0, ptr %11, align 4, !tbaa !7
  %12 = load ptr, ptr %0, align 8, !tbaa !460
  %13 = load ptr, ptr %12, align 8, !tbaa !26
  tail call void %13(ptr noundef nonnull %0) #32
  br label %14

14:                                               ; preds = %8, %1
  store ptr @alloc_small, ptr %6, align 8, !tbaa !471
  %15 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %6, i64 0, i32 1
  store ptr @alloc_large, ptr %15, align 8, !tbaa !473
  %16 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %6, i64 0, i32 2
  store ptr @alloc_sarray, ptr %16, align 8, !tbaa !474
  %17 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %6, i64 0, i32 3
  store ptr @alloc_barray, ptr %17, align 8, !tbaa !475
  %18 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %6, i64 0, i32 4
  store ptr @request_virt_sarray, ptr %18, align 8, !tbaa !476
  %19 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %6, i64 0, i32 5
  store ptr @request_virt_barray, ptr %19, align 8, !tbaa !477
  %20 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %6, i64 0, i32 6
  store ptr @realize_virt_arrays, ptr %20, align 8, !tbaa !478
  %21 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %6, i64 0, i32 7
  store ptr @access_virt_sarray, ptr %21, align 8, !tbaa !479
  %22 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %6, i64 0, i32 8
  store ptr @access_virt_barray, ptr %22, align 8, !tbaa !480
  %23 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %6, i64 0, i32 9
  store ptr @free_pool, ptr %23, align 8, !tbaa !481
  %24 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %6, i64 0, i32 10
  store ptr @self_destruct, ptr %24, align 8, !tbaa !482
  %25 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %6, i64 0, i32 11
  store i64 %5, ptr %25, align 8, !tbaa !483
  %26 = getelementptr i8, ptr %6, i64 96
  %27 = getelementptr inbounds %struct.my_memory_mgr, ptr %6, i64 0, i32 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(48) %26, i8 0, i64 48, i1 false)
  store i64 160, ptr %27, align 8, !tbaa !484
  store ptr %6, ptr %4, align 8, !tbaa !59
  %28 = tail call ptr @getenv(ptr noundef nonnull @.str.175) #32
  %29 = icmp eq ptr %28, null
  br i1 %29, label %42, label %30

30:                                               ; preds = %14
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %3) #31
  store i8 120, ptr %3, align 1, !tbaa !7
  %31 = call i32 (ptr, ptr, ...) @__isoc99_sscanf(ptr noundef nonnull %28, ptr noundef nonnull @.str.1.176, ptr noundef nonnull %2, ptr noundef nonnull %3) #32
  %32 = icmp sgt i32 %31, 0
  br i1 %32, label %33, label %41

33:                                               ; preds = %30
  %34 = load i8, ptr %3, align 1
  %35 = and i8 %34, -33
  %36 = icmp eq i8 %35, 77
  %37 = load i64, ptr %2, align 8, !tbaa !49
  %38 = mul nsw i64 %37, 1000
  %39 = select i1 %36, i64 %38, i64 %37
  %40 = mul nsw i64 %39, 1000
  store i64 %40, ptr %25, align 8, !tbaa !483
  br label %41

41:                                               ; preds = %33, %30
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %3) #31
  br label %42

42:                                               ; preds = %41, %14
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #31
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @alloc_small(ptr noundef %0, i32 noundef %1, i64 noundef %2) #6 {
  %4 = getelementptr inbounds %struct.jpeg_common_struct, ptr %0, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8, !tbaa !59
  %6 = icmp ugt i64 %2, 999999976
  br i1 %6, label %7, label %13

7:                                                ; preds = %3
  %8 = load ptr, ptr %0, align 8, !tbaa !460
  %9 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %8, i64 0, i32 5
  store i32 53, ptr %9, align 8, !tbaa !25
  %10 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %8, i64 0, i32 6
  store i32 1, ptr %10, align 4, !tbaa !7
  %11 = load ptr, ptr %0, align 8, !tbaa !460
  %12 = load ptr, ptr %11, align 8, !tbaa !26
  tail call void %12(ptr noundef nonnull %0) #32
  br label %13

13:                                               ; preds = %7, %3
  %14 = add i64 %2, 7
  %15 = and i64 %14, -8
  %16 = icmp ugt i32 %1, 1
  br i1 %16, label %17, label %23

17:                                               ; preds = %13
  %18 = load ptr, ptr %0, align 8, !tbaa !460
  %19 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %18, i64 0, i32 5
  store i32 12, ptr %19, align 8, !tbaa !25
  %20 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %18, i64 0, i32 6
  store i32 %1, ptr %20, align 4, !tbaa !7
  %21 = load ptr, ptr %0, align 8, !tbaa !460
  %22 = load ptr, ptr %21, align 8, !tbaa !26
  tail call void %22(ptr noundef nonnull %0) #32
  br label %23

23:                                               ; preds = %17, %13
  %24 = sext i32 %1 to i64
  %25 = getelementptr inbounds %struct.my_memory_mgr, ptr %5, i64 0, i32 1, i64 %24
  %26 = load ptr, ptr %25, align 8, !tbaa !7
  %27 = icmp eq ptr %26, null
  br i1 %27, label %36, label %31

28:                                               ; preds = %31
  %29 = load ptr, ptr %32, align 8, !tbaa !7
  %30 = icmp eq ptr %29, null
  br i1 %30, label %36, label %31, !llvm.loop !485

31:                                               ; preds = %28, %23
  %32 = phi ptr [ %29, %28 ], [ %26, %23 ]
  %33 = getelementptr inbounds %struct.anon.0, ptr %32, i64 0, i32 2
  %34 = load i64, ptr %33, align 8, !tbaa !7
  %35 = icmp ult i64 %34, %15
  br i1 %35, label %28, label %67, !llvm.loop !485

36:                                               ; preds = %28, %23
  %37 = phi ptr [ null, %23 ], [ %32, %28 ]
  %38 = add i64 %15, 24
  %39 = icmp eq ptr %37, null
  %40 = select i1 %39, ptr @first_pool_slop, ptr @extra_pool_slop
  %41 = getelementptr inbounds [2 x i64], ptr %40, i64 0, i64 %24
  %42 = load i64, ptr %41, align 8, !tbaa !49
  %43 = sub i64 999999976, %15
  %44 = tail call i64 @llvm.umin.i64(i64 %42, i64 %43)
  br label %45

45:                                               ; preds = %59, %36
  %46 = phi i64 [ %44, %36 ], [ %51, %59 ]
  %47 = add i64 %38, %46
  %48 = tail call ptr @jpeg_get_small(ptr noundef %0, i64 noundef %47) #32
  %49 = icmp eq ptr %48, null
  br i1 %49, label %50, label %60

50:                                               ; preds = %45
  %51 = lshr i64 %46, 1
  %52 = icmp ult i64 %46, 100
  br i1 %52, label %53, label %59

53:                                               ; preds = %50
  %54 = load ptr, ptr %0, align 8, !tbaa !460
  %55 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %54, i64 0, i32 5
  store i32 53, ptr %55, align 8, !tbaa !25
  %56 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %54, i64 0, i32 6
  store i32 2, ptr %56, align 4, !tbaa !7
  %57 = load ptr, ptr %0, align 8, !tbaa !460
  %58 = load ptr, ptr %57, align 8, !tbaa !26
  tail call void %58(ptr noundef nonnull %0) #32
  br label %59

59:                                               ; preds = %53, %50
  br label %45

60:                                               ; preds = %45
  %.lcssa2 = phi i64 [ %46, %45 ]
  %.lcssa1 = phi i64 [ %47, %45 ]
  %.lcssa = phi ptr [ %48, %45 ]
  %61 = getelementptr inbounds %struct.my_memory_mgr, ptr %5, i64 0, i32 5
  %62 = load i64, ptr %61, align 8, !tbaa !484
  %63 = add i64 %62, %.lcssa1
  store i64 %63, ptr %61, align 8, !tbaa !484
  %64 = add i64 %.lcssa2, %15
  %65 = getelementptr inbounds %struct.anon.0, ptr %.lcssa, i64 0, i32 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %.lcssa, i8 0, i64 16, i1 false)
  store i64 %64, ptr %65, align 8, !tbaa !7
  %66 = select i1 %39, ptr %25, ptr %37
  store ptr %.lcssa, ptr %66, align 8, !tbaa !7
  br label %67

67:                                               ; preds = %60, %31
  %68 = phi ptr [ %.lcssa, %60 ], [ %32, %31 ]
  %69 = getelementptr inbounds %union.large_pool_struct, ptr %68, i64 1
  %70 = getelementptr inbounds %struct.anon.0, ptr %68, i64 0, i32 1
  %71 = load i64, ptr %70, align 8, !tbaa !7
  %72 = getelementptr inbounds i8, ptr %69, i64 %71
  %73 = add i64 %71, %15
  store i64 %73, ptr %70, align 8, !tbaa !7
  %74 = getelementptr inbounds %struct.anon.0, ptr %68, i64 0, i32 2
  %75 = load i64, ptr %74, align 8, !tbaa !7
  %76 = sub i64 %75, %15
  store i64 %76, ptr %74, align 8, !tbaa !7
  ret ptr %72
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @alloc_large(ptr noundef %0, i32 noundef %1, i64 noundef %2) #6 {
  %4 = getelementptr inbounds %struct.jpeg_common_struct, ptr %0, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8, !tbaa !59
  %6 = icmp ugt i64 %2, 999999976
  br i1 %6, label %7, label %13

7:                                                ; preds = %3
  %8 = load ptr, ptr %0, align 8, !tbaa !460
  %9 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %8, i64 0, i32 5
  store i32 53, ptr %9, align 8, !tbaa !25
  %10 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %8, i64 0, i32 6
  store i32 3, ptr %10, align 4, !tbaa !7
  %11 = load ptr, ptr %0, align 8, !tbaa !460
  %12 = load ptr, ptr %11, align 8, !tbaa !26
  tail call void %12(ptr noundef nonnull %0) #32
  br label %13

13:                                               ; preds = %7, %3
  %14 = add i64 %2, 7
  %15 = and i64 %14, -8
  %16 = icmp ugt i32 %1, 1
  br i1 %16, label %17, label %23

17:                                               ; preds = %13
  %18 = load ptr, ptr %0, align 8, !tbaa !460
  %19 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %18, i64 0, i32 5
  store i32 12, ptr %19, align 8, !tbaa !25
  %20 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %18, i64 0, i32 6
  store i32 %1, ptr %20, align 4, !tbaa !7
  %21 = load ptr, ptr %0, align 8, !tbaa !460
  %22 = load ptr, ptr %21, align 8, !tbaa !26
  tail call void %22(ptr noundef nonnull %0) #32
  br label %23

23:                                               ; preds = %17, %13
  %24 = add i64 %15, 24
  %25 = tail call ptr @jpeg_get_large(ptr noundef nonnull %0, i64 noundef %24) #32
  %26 = icmp eq ptr %25, null
  br i1 %26, label %27, label %33

27:                                               ; preds = %23
  %28 = load ptr, ptr %0, align 8, !tbaa !460
  %29 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %28, i64 0, i32 5
  store i32 53, ptr %29, align 8, !tbaa !25
  %30 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %28, i64 0, i32 6
  store i32 4, ptr %30, align 4, !tbaa !7
  %31 = load ptr, ptr %0, align 8, !tbaa !460
  %32 = load ptr, ptr %31, align 8, !tbaa !26
  tail call void %32(ptr noundef nonnull %0) #32
  br label %33

33:                                               ; preds = %27, %23
  %34 = getelementptr inbounds %struct.my_memory_mgr, ptr %5, i64 0, i32 5
  %35 = load i64, ptr %34, align 8, !tbaa !484
  %36 = add i64 %35, %24
  store i64 %36, ptr %34, align 8, !tbaa !484
  %37 = sext i32 %1 to i64
  %38 = getelementptr inbounds %struct.my_memory_mgr, ptr %5, i64 0, i32 2, i64 %37
  %39 = load ptr, ptr %38, align 8, !tbaa !10
  store ptr %39, ptr %25, align 8, !tbaa !7
  %40 = getelementptr inbounds %struct.anon.0, ptr %25, i64 0, i32 1
  store i64 %15, ptr %40, align 8, !tbaa !7
  %41 = getelementptr inbounds %struct.anon.0, ptr %25, i64 0, i32 2
  store i64 0, ptr %41, align 8, !tbaa !7
  store ptr %25, ptr %38, align 8, !tbaa !10
  %42 = getelementptr inbounds %union.large_pool_struct, ptr %25, i64 1
  ret ptr %42
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @alloc_sarray(ptr noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3) #6 {
  %5 = getelementptr inbounds %struct.jpeg_common_struct, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8, !tbaa !59
  %7 = zext i32 %2 to i64
  %8 = udiv i32 999999976, %2
  %9 = icmp ugt i32 %2, 999999976
  br i1 %9, label %10, label %14

10:                                               ; preds = %4
  %11 = load ptr, ptr %0, align 8, !tbaa !460
  %12 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %11, i64 0, i32 5
  store i32 69, ptr %12, align 8, !tbaa !25
  %13 = load ptr, ptr %11, align 8, !tbaa !26
  tail call void %13(ptr noundef nonnull %0) #32
  br label %14

14:                                               ; preds = %10, %4
  %15 = zext i32 %3 to i64
  %16 = tail call i32 @llvm.umin.i32(i32 %8, i32 %3)
  %17 = getelementptr inbounds %struct.my_memory_mgr, ptr %6, i64 0, i32 6
  store i32 %16, ptr %17, align 8, !tbaa !486
  %18 = shl nuw nsw i64 %15, 3
  %19 = tail call ptr @alloc_small(ptr noundef nonnull %0, i32 noundef %1, i64 noundef %18) #33
  %20 = icmp eq i32 %3, 0
  br i1 %20, label %43, label %24

21:                                               ; preds = %33, %24
  %22 = phi i32 [ %25, %24 ], [ %37, %33 ]
  %23 = icmp ult i32 %22, %3
  br i1 %23, label %24, label %43, !llvm.loop !487

24:                                               ; preds = %21, %14
  %25 = phi i32 [ %22, %21 ], [ 0, %14 ]
  %26 = phi i32 [ %28, %21 ], [ %16, %14 ]
  %27 = sub i32 %3, %25
  %28 = tail call i32 @llvm.umin.i32(i32 %26, i32 %27)
  %29 = zext i32 %28 to i64
  %30 = mul nuw nsw i64 %29, %7
  %31 = tail call ptr @alloc_large(ptr noundef %0, i32 noundef %1, i64 noundef %30) #33
  %32 = icmp eq i32 %28, 0
  br i1 %32, label %21, label %33

33:                                               ; preds = %33, %24
  %34 = phi ptr [ %40, %33 ], [ %31, %24 ]
  %35 = phi i32 [ %41, %33 ], [ %28, %24 ]
  %36 = phi i32 [ %37, %33 ], [ %25, %24 ]
  %37 = add i32 %36, 1
  %38 = zext i32 %36 to i64
  %39 = getelementptr inbounds ptr, ptr %19, i64 %38
  store ptr %34, ptr %39, align 8, !tbaa !10
  %40 = getelementptr inbounds i8, ptr %34, i64 %7
  %41 = add i32 %35, -1
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %21, label %33, !llvm.loop !488

43:                                               ; preds = %21, %14
  ret ptr %19
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @alloc_barray(ptr noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3) #6 {
  %5 = getelementptr inbounds %struct.jpeg_common_struct, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8, !tbaa !59
  %7 = zext i32 %2 to i64
  %8 = shl nuw nsw i64 %7, 7
  %9 = udiv i64 999999976, %8
  %10 = icmp ugt i32 %2, 7812499
  br i1 %10, label %11, label %15

11:                                               ; preds = %4
  %12 = load ptr, ptr %0, align 8, !tbaa !460
  %13 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %12, i64 0, i32 5
  store i32 69, ptr %13, align 8, !tbaa !25
  %14 = load ptr, ptr %12, align 8, !tbaa !26
  tail call void %14(ptr noundef nonnull %0) #32
  br label %15

15:                                               ; preds = %11, %4
  %16 = zext i32 %3 to i64
  %17 = icmp ult i64 %9, %16
  %18 = trunc i64 %9 to i32
  %19 = select i1 %17, i32 %18, i32 %3
  %20 = getelementptr inbounds %struct.my_memory_mgr, ptr %6, i64 0, i32 6
  store i32 %19, ptr %20, align 8, !tbaa !486
  %21 = shl nuw nsw i64 %16, 3
  %22 = tail call ptr @alloc_small(ptr noundef nonnull %0, i32 noundef %1, i64 noundef %21) #33
  %23 = icmp eq i32 %3, 0
  br i1 %23, label %46, label %27

24:                                               ; preds = %36, %27
  %25 = phi i32 [ %28, %27 ], [ %40, %36 ]
  %26 = icmp ult i32 %25, %3
  br i1 %26, label %27, label %46, !llvm.loop !489

27:                                               ; preds = %24, %15
  %28 = phi i32 [ %25, %24 ], [ 0, %15 ]
  %29 = phi i32 [ %31, %24 ], [ %19, %15 ]
  %30 = sub i32 %3, %28
  %31 = tail call i32 @llvm.umin.i32(i32 %29, i32 %30)
  %32 = zext i32 %31 to i64
  %33 = mul i64 %8, %32
  %34 = tail call ptr @alloc_large(ptr noundef %0, i32 noundef %1, i64 noundef %33) #33
  %35 = icmp eq i32 %31, 0
  br i1 %35, label %24, label %36

36:                                               ; preds = %36, %27
  %37 = phi ptr [ %43, %36 ], [ %34, %27 ]
  %38 = phi i32 [ %44, %36 ], [ %31, %27 ]
  %39 = phi i32 [ %40, %36 ], [ %28, %27 ]
  %40 = add i32 %39, 1
  %41 = zext i32 %39 to i64
  %42 = getelementptr inbounds ptr, ptr %22, i64 %41
  store ptr %37, ptr %42, align 8, !tbaa !10
  %43 = getelementptr inbounds [64 x i16], ptr %37, i64 %7
  %44 = add i32 %38, -1
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %24, label %36, !llvm.loop !490

46:                                               ; preds = %24, %15
  ret ptr %22
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @request_virt_sarray(ptr noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5) #6 {
  %7 = getelementptr inbounds %struct.jpeg_common_struct, ptr %0, i64 0, i32 1
  %8 = load ptr, ptr %7, align 8, !tbaa !59
  %9 = icmp eq i32 %1, 1
  br i1 %9, label %16, label %10

10:                                               ; preds = %6
  %11 = load ptr, ptr %0, align 8, !tbaa !460
  %12 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %11, i64 0, i32 5
  store i32 12, ptr %12, align 8, !tbaa !25
  %13 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %11, i64 0, i32 6
  store i32 %1, ptr %13, align 4, !tbaa !7
  %14 = load ptr, ptr %0, align 8, !tbaa !460
  %15 = load ptr, ptr %14, align 8, !tbaa !26
  tail call void %15(ptr noundef nonnull %0) #32
  br label %16

16:                                               ; preds = %10, %6
  %17 = tail call ptr @alloc_small(ptr noundef nonnull %0, i32 noundef %1, i64 noundef 152) #33
  store ptr null, ptr %17, align 8, !tbaa !491
  %18 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %17, i64 0, i32 1
  store i32 %4, ptr %18, align 8, !tbaa !494
  %19 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %17, i64 0, i32 2
  store i32 %3, ptr %19, align 4, !tbaa !495
  %20 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %17, i64 0, i32 3
  store i32 %5, ptr %20, align 8, !tbaa !496
  %21 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %17, i64 0, i32 8
  store i32 %2, ptr %21, align 4, !tbaa !497
  %22 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %17, i64 0, i32 10
  store i32 0, ptr %22, align 4, !tbaa !498
  %23 = getelementptr inbounds %struct.my_memory_mgr, ptr %8, i64 0, i32 3
  %24 = load ptr, ptr %23, align 8, !tbaa !499
  %25 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %17, i64 0, i32 11
  store ptr %24, ptr %25, align 8, !tbaa !500
  store ptr %17, ptr %23, align 8, !tbaa !499
  ret ptr %17
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @request_virt_barray(ptr noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5) #6 {
  %7 = getelementptr inbounds %struct.jpeg_common_struct, ptr %0, i64 0, i32 1
  %8 = load ptr, ptr %7, align 8, !tbaa !59
  %9 = icmp eq i32 %1, 1
  br i1 %9, label %16, label %10

10:                                               ; preds = %6
  %11 = load ptr, ptr %0, align 8, !tbaa !460
  %12 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %11, i64 0, i32 5
  store i32 12, ptr %12, align 8, !tbaa !25
  %13 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %11, i64 0, i32 6
  store i32 %1, ptr %13, align 4, !tbaa !7
  %14 = load ptr, ptr %0, align 8, !tbaa !460
  %15 = load ptr, ptr %14, align 8, !tbaa !26
  tail call void %15(ptr noundef nonnull %0) #32
  br label %16

16:                                               ; preds = %10, %6
  %17 = tail call ptr @alloc_small(ptr noundef nonnull %0, i32 noundef %1, i64 noundef 152) #33
  store ptr null, ptr %17, align 8, !tbaa !501
  %18 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %17, i64 0, i32 1
  store i32 %4, ptr %18, align 8, !tbaa !503
  %19 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %17, i64 0, i32 2
  store i32 %3, ptr %19, align 4, !tbaa !504
  %20 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %17, i64 0, i32 3
  store i32 %5, ptr %20, align 8, !tbaa !505
  %21 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %17, i64 0, i32 8
  store i32 %2, ptr %21, align 4, !tbaa !506
  %22 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %17, i64 0, i32 10
  store i32 0, ptr %22, align 4, !tbaa !507
  %23 = getelementptr inbounds %struct.my_memory_mgr, ptr %8, i64 0, i32 4
  %24 = load ptr, ptr %23, align 8, !tbaa !508
  %25 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %17, i64 0, i32 11
  store ptr %24, ptr %25, align 8, !tbaa !509
  store ptr %17, ptr %23, align 8, !tbaa !508
  ret ptr %17
}

; Function Attrs: nounwind optsize uwtable
define internal void @realize_virt_arrays(ptr noundef %0) #6 {
  %2 = getelementptr inbounds %struct.jpeg_common_struct, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !59
  %4 = getelementptr inbounds %struct.my_memory_mgr, ptr %3, i64 0, i32 3
  %5 = load ptr, ptr %4, align 8, !tbaa !10
  %6 = icmp eq ptr %5, null
  br i1 %6, label %33, label %7

7:                                                ; preds = %27, %1
  %8 = phi ptr [ %31, %27 ], [ %5, %1 ]
  %9 = phi i64 [ %29, %27 ], [ 0, %1 ]
  %10 = phi i64 [ %28, %27 ], [ 0, %1 ]
  %11 = load ptr, ptr %8, align 8, !tbaa !491
  %12 = icmp eq ptr %11, null
  br i1 %12, label %13, label %27

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %8, i64 0, i32 3
  %15 = load i32, ptr %14, align 8, !tbaa !496
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %8, i64 0, i32 2
  %18 = load i32, ptr %17, align 4, !tbaa !495
  %19 = zext i32 %18 to i64
  %20 = mul nuw nsw i64 %19, %16
  %21 = add i64 %20, %9
  %22 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %8, i64 0, i32 1
  %23 = load i32, ptr %22, align 8, !tbaa !494
  %24 = zext i32 %23 to i64
  %25 = mul nuw nsw i64 %24, %19
  %26 = add i64 %25, %10
  br label %27

27:                                               ; preds = %13, %7
  %28 = phi i64 [ %26, %13 ], [ %10, %7 ]
  %29 = phi i64 [ %21, %13 ], [ %9, %7 ]
  %30 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %8, i64 0, i32 11
  %31 = load ptr, ptr %30, align 8, !tbaa !10
  %32 = icmp eq ptr %31, null
  br i1 %32, label %33, label %7, !llvm.loop !510

33:                                               ; preds = %27, %1
  %34 = phi i64 [ 0, %1 ], [ %28, %27 ]
  %35 = phi i64 [ 0, %1 ], [ %29, %27 ]
  %36 = getelementptr inbounds %struct.my_memory_mgr, ptr %3, i64 0, i32 4
  %37 = load ptr, ptr %36, align 8, !tbaa !10
  %38 = icmp eq ptr %37, null
  br i1 %38, label %67, label %39

39:                                               ; preds = %61, %33
  %40 = phi ptr [ %65, %61 ], [ %37, %33 ]
  %41 = phi i64 [ %63, %61 ], [ %35, %33 ]
  %42 = phi i64 [ %62, %61 ], [ %34, %33 ]
  %43 = load ptr, ptr %40, align 8, !tbaa !501
  %44 = icmp eq ptr %43, null
  br i1 %44, label %45, label %61

45:                                               ; preds = %39
  %46 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %40, i64 0, i32 3
  %47 = load i32, ptr %46, align 8, !tbaa !505
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %40, i64 0, i32 2
  %50 = load i32, ptr %49, align 4, !tbaa !504
  %51 = zext i32 %50 to i64
  %52 = shl nuw nsw i64 %48, 7
  %53 = mul i64 %52, %51
  %54 = add i64 %53, %41
  %55 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %40, i64 0, i32 1
  %56 = load i32, ptr %55, align 8, !tbaa !503
  %57 = zext i32 %56 to i64
  %58 = shl nuw nsw i64 %51, 7
  %59 = mul i64 %58, %57
  %60 = add i64 %59, %42
  br label %61

61:                                               ; preds = %45, %39
  %62 = phi i64 [ %60, %45 ], [ %42, %39 ]
  %63 = phi i64 [ %54, %45 ], [ %41, %39 ]
  %64 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %40, i64 0, i32 11
  %65 = load ptr, ptr %64, align 8, !tbaa !10
  %66 = icmp eq ptr %65, null
  br i1 %66, label %67, label %39, !llvm.loop !511

67:                                               ; preds = %61, %33
  %68 = phi i64 [ %34, %33 ], [ %62, %61 ]
  %69 = phi i64 [ %35, %33 ], [ %63, %61 ]
  %70 = icmp slt i64 %69, 1
  br i1 %70, label %173, label %71

71:                                               ; preds = %67
  %72 = getelementptr inbounds %struct.my_memory_mgr, ptr %3, i64 0, i32 5
  %73 = load i64, ptr %72, align 8, !tbaa !484
  %74 = tail call i64 @jpeg_mem_available(ptr noundef %0, i64 noundef %69, i64 noundef %68, i64 noundef %73) #32
  %75 = icmp slt i64 %74, %68
  br i1 %75, label %76, label %79

76:                                               ; preds = %71
  %77 = sdiv i64 %74, %69
  %78 = tail call i64 @llvm.smax.i64(i64 %77, i64 1)
  br label %79

79:                                               ; preds = %76, %71
  %80 = phi i64 [ %78, %76 ], [ 1000000000, %71 ]
  %81 = load ptr, ptr %4, align 8, !tbaa !10
  %82 = icmp eq ptr %81, null
  br i1 %82, label %86, label %83

83:                                               ; preds = %79
  %84 = trunc i64 %80 to i32
  %85 = getelementptr inbounds %struct.my_memory_mgr, ptr %3, i64 0, i32 6
  br label %92

86:                                               ; preds = %128, %79
  %87 = load ptr, ptr %36, align 8, !tbaa !10
  %88 = icmp eq ptr %87, null
  br i1 %88, label %173, label %89

89:                                               ; preds = %86
  %90 = trunc i64 %80 to i32
  %91 = getelementptr inbounds %struct.my_memory_mgr, ptr %3, i64 0, i32 6
  br label %132

92:                                               ; preds = %128, %83
  %93 = phi ptr [ %81, %83 ], [ %130, %128 ]
  %94 = load ptr, ptr %93, align 8, !tbaa !491
  %95 = icmp eq ptr %94, null
  br i1 %95, label %96, label %128

96:                                               ; preds = %92
  %97 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %93, i64 0, i32 1
  %98 = load i32, ptr %97, align 8, !tbaa !494
  %99 = zext i32 %98 to i64
  %100 = add nsw i64 %99, -1
  %101 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %93, i64 0, i32 3
  %102 = load i32, ptr %101, align 8, !tbaa !496
  %103 = zext i32 %102 to i64
  %104 = sdiv i64 %100, %103
  %105 = icmp slt i64 %104, %80
  br i1 %105, label %106, label %108

106:                                              ; preds = %96
  %107 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %93, i64 0, i32 4
  store i32 %98, ptr %107, align 4, !tbaa !512
  br label %118

108:                                              ; preds = %96
  %109 = mul i32 %102, %84
  %110 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %93, i64 0, i32 4
  store i32 %109, ptr %110, align 4, !tbaa !512
  %111 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %93, i64 0, i32 12
  %112 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %93, i64 0, i32 2
  %113 = load i32, ptr %112, align 4, !tbaa !495
  %114 = zext i32 %113 to i64
  %115 = mul nuw nsw i64 %114, %99
  tail call void @jpeg_open_backing_store(ptr noundef %0, ptr noundef nonnull %111, i64 noundef %115) #32
  %116 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %93, i64 0, i32 10
  store i32 1, ptr %116, align 4, !tbaa !498
  %117 = load i32, ptr %110, align 4, !tbaa !512
  br label %118

118:                                              ; preds = %108, %106
  %119 = phi i32 [ %117, %108 ], [ %98, %106 ]
  %120 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %93, i64 0, i32 2
  %121 = load i32, ptr %120, align 4, !tbaa !495
  %122 = tail call ptr @alloc_sarray(ptr noundef %0, i32 noundef 1, i32 noundef %121, i32 noundef %119) #33
  store ptr %122, ptr %93, align 8, !tbaa !491
  %123 = load i32, ptr %85, align 8, !tbaa !486
  %124 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %93, i64 0, i32 5
  store i32 %123, ptr %124, align 8, !tbaa !513
  %125 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %93, i64 0, i32 6
  store i32 0, ptr %125, align 4, !tbaa !514
  %126 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %93, i64 0, i32 7
  store i32 0, ptr %126, align 8, !tbaa !515
  %127 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %93, i64 0, i32 9
  store i32 0, ptr %127, align 8, !tbaa !516
  br label %128

128:                                              ; preds = %118, %92
  %129 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %93, i64 0, i32 11
  %130 = load ptr, ptr %129, align 8, !tbaa !10
  %131 = icmp eq ptr %130, null
  br i1 %131, label %86, label %92, !llvm.loop !517

132:                                              ; preds = %169, %89
  %133 = phi ptr [ %87, %89 ], [ %171, %169 ]
  %134 = load ptr, ptr %133, align 8, !tbaa !501
  %135 = icmp eq ptr %134, null
  br i1 %135, label %136, label %169

136:                                              ; preds = %132
  %137 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %133, i64 0, i32 1
  %138 = load i32, ptr %137, align 8, !tbaa !503
  %139 = zext i32 %138 to i64
  %140 = add nsw i64 %139, -1
  %141 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %133, i64 0, i32 3
  %142 = load i32, ptr %141, align 8, !tbaa !505
  %143 = zext i32 %142 to i64
  %144 = sdiv i64 %140, %143
  %145 = icmp slt i64 %144, %80
  br i1 %145, label %146, label %148

146:                                              ; preds = %136
  %147 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %133, i64 0, i32 4
  store i32 %138, ptr %147, align 4, !tbaa !518
  br label %159

148:                                              ; preds = %136
  %149 = mul i32 %142, %90
  %150 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %133, i64 0, i32 4
  store i32 %149, ptr %150, align 4, !tbaa !518
  %151 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %133, i64 0, i32 12
  %152 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %133, i64 0, i32 2
  %153 = load i32, ptr %152, align 4, !tbaa !504
  %154 = zext i32 %153 to i64
  %155 = shl nuw nsw i64 %139, 7
  %156 = mul i64 %155, %154
  tail call void @jpeg_open_backing_store(ptr noundef %0, ptr noundef nonnull %151, i64 noundef %156) #32
  %157 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %133, i64 0, i32 10
  store i32 1, ptr %157, align 4, !tbaa !507
  %158 = load i32, ptr %150, align 4, !tbaa !518
  br label %159

159:                                              ; preds = %148, %146
  %160 = phi i32 [ %158, %148 ], [ %138, %146 ]
  %161 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %133, i64 0, i32 2
  %162 = load i32, ptr %161, align 4, !tbaa !504
  %163 = tail call ptr @alloc_barray(ptr noundef %0, i32 noundef 1, i32 noundef %162, i32 noundef %160) #33
  store ptr %163, ptr %133, align 8, !tbaa !501
  %164 = load i32, ptr %91, align 8, !tbaa !486
  %165 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %133, i64 0, i32 5
  store i32 %164, ptr %165, align 8, !tbaa !519
  %166 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %133, i64 0, i32 6
  store i32 0, ptr %166, align 4, !tbaa !520
  %167 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %133, i64 0, i32 7
  store i32 0, ptr %167, align 8, !tbaa !521
  %168 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %133, i64 0, i32 9
  store i32 0, ptr %168, align 8, !tbaa !522
  br label %169

169:                                              ; preds = %159, %132
  %170 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %133, i64 0, i32 11
  %171 = load ptr, ptr %170, align 8, !tbaa !10
  %172 = icmp eq ptr %171, null
  br i1 %172, label %173, label %132, !llvm.loop !523

173:                                              ; preds = %169, %86, %67
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @access_virt_sarray(ptr noundef %0, ptr noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4) #6 {
  %6 = add i32 %3, %2
  %7 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 1
  %8 = load i32, ptr %7, align 8, !tbaa !494
  %9 = icmp ugt i32 %6, %8
  br i1 %9, label %17, label %10

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 3
  %12 = load i32, ptr %11, align 8, !tbaa !496
  %13 = icmp ult i32 %12, %3
  br i1 %13, label %17, label %14

14:                                               ; preds = %10
  %15 = load ptr, ptr %1, align 8, !tbaa !491
  %16 = icmp eq ptr %15, null
  br i1 %16, label %17, label %21

17:                                               ; preds = %14, %10, %5
  %18 = load ptr, ptr %0, align 8, !tbaa !460
  %19 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %18, i64 0, i32 5
  store i32 20, ptr %19, align 8, !tbaa !25
  %20 = load ptr, ptr %18, align 8, !tbaa !26
  tail call void %20(ptr noundef nonnull %0) #32
  br label %21

21:                                               ; preds = %17, %14
  %22 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 6
  %23 = load i32, ptr %22, align 4, !tbaa !514
  %24 = icmp ugt i32 %23, %2
  br i1 %24, label %30, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 4
  %27 = load i32, ptr %26, align 4, !tbaa !512
  %28 = add i32 %27, %23
  %29 = icmp ugt i32 %6, %28
  br i1 %29, label %30, label %56

30:                                               ; preds = %25, %21
  %31 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 10
  %32 = load i32, ptr %31, align 4, !tbaa !498
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %38

34:                                               ; preds = %30
  %35 = load ptr, ptr %0, align 8, !tbaa !460
  %36 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %35, i64 0, i32 5
  store i32 68, ptr %36, align 8, !tbaa !25
  %37 = load ptr, ptr %35, align 8, !tbaa !26
  tail call void %37(ptr noundef nonnull %0) #32
  br label %38

38:                                               ; preds = %34, %30
  %39 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 9
  %40 = load i32, ptr %39, align 8, !tbaa !516
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %43, label %42

42:                                               ; preds = %38
  tail call fastcc void @do_sarray_io(ptr noundef %0, ptr noundef nonnull %1, i32 noundef 1) #33
  store i32 0, ptr %39, align 8, !tbaa !516
  br label %43

43:                                               ; preds = %42, %38
  %44 = load i32, ptr %22, align 4, !tbaa !514
  %45 = icmp ult i32 %44, %2
  br i1 %45, label %54, label %46

46:                                               ; preds = %43
  %47 = zext i32 %6 to i64
  %48 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 4
  %49 = load i32, ptr %48, align 4, !tbaa !512
  %50 = zext i32 %49 to i64
  %51 = sub nsw i64 %47, %50
  %52 = tail call i64 @llvm.smax.i64(i64 %51, i64 0)
  %53 = trunc i64 %52 to i32
  br label %54

54:                                               ; preds = %46, %43
  %55 = phi i32 [ %53, %46 ], [ %2, %43 ]
  store i32 %55, ptr %22, align 4, !tbaa !514
  tail call fastcc void @do_sarray_io(ptr noundef %0, ptr noundef nonnull %1, i32 noundef 0) #33
  br label %56

56:                                               ; preds = %54, %25
  %57 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 7
  %58 = load i32, ptr %57, align 8, !tbaa !515
  %59 = icmp ult i32 %58, %6
  br i1 %59, label %60, label %105

60:                                               ; preds = %56
  %61 = icmp ult i32 %58, %2
  %62 = icmp eq i32 %4, 0
  br i1 %61, label %63, label %68

63:                                               ; preds = %60
  br i1 %62, label %78, label %64

64:                                               ; preds = %63
  %65 = load ptr, ptr %0, align 8, !tbaa !460
  %66 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %65, i64 0, i32 5
  store i32 20, ptr %66, align 8, !tbaa !25
  %67 = load ptr, ptr %65, align 8, !tbaa !26
  tail call void %67(ptr noundef nonnull %0) #32
  br label %73

68:                                               ; preds = %60
  br i1 %62, label %69, label %73

69:                                               ; preds = %68
  %70 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 8
  %71 = load i32, ptr %70, align 4, !tbaa !497
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %101, label %82

73:                                               ; preds = %68, %64
  %74 = phi i32 [ %2, %64 ], [ %58, %68 ]
  store i32 %6, ptr %57, align 8, !tbaa !515
  %75 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 8
  %76 = load i32, ptr %75, align 4, !tbaa !497
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %107, label %82

78:                                               ; preds = %63
  %79 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 8
  %80 = load i32, ptr %79, align 4, !tbaa !497
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %101, label %82

82:                                               ; preds = %78, %73, %69
  %83 = phi i32 [ %2, %78 ], [ %58, %69 ], [ %74, %73 ]
  %84 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 2
  %85 = load i32, ptr %84, align 4, !tbaa !495
  %86 = zext i32 %85 to i64
  %87 = load i32, ptr %22, align 4, !tbaa !514
  %88 = sub i32 %83, %87
  %89 = sub i32 %6, %87
  %90 = icmp ult i32 %88, %89
  br i1 %90, label %91, label %105

91:                                               ; preds = %82
  %92 = zext i32 %88 to i64
  br label %93

93:                                               ; preds = %93, %91
  %94 = phi i64 [ %92, %91 ], [ %98, %93 ]
  %95 = load ptr, ptr %1, align 8, !tbaa !491
  %96 = getelementptr inbounds ptr, ptr %95, i64 %94
  %97 = load ptr, ptr %96, align 8, !tbaa !10
  tail call void @jzero_far(ptr noundef %97, i64 noundef %86) #32
  %98 = add nuw nsw i64 %94, 1
  %99 = trunc i64 %98 to i32
  %100 = icmp eq i32 %89, %99
  br i1 %100, label %105, label %93, !llvm.loop !524

101:                                              ; preds = %78, %69
  %102 = load ptr, ptr %0, align 8, !tbaa !460
  %103 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %102, i64 0, i32 5
  store i32 20, ptr %103, align 8, !tbaa !25
  %104 = load ptr, ptr %102, align 8, !tbaa !26
  tail call void %104(ptr noundef nonnull %0) #32
  br label %109

105:                                              ; preds = %93, %82, %56
  %106 = icmp eq i32 %4, 0
  br i1 %106, label %109, label %107

107:                                              ; preds = %105, %73
  %108 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 9
  store i32 1, ptr %108, align 8, !tbaa !516
  br label %109

109:                                              ; preds = %107, %105, %101
  %110 = load ptr, ptr %1, align 8, !tbaa !491
  %111 = load i32, ptr %22, align 4, !tbaa !514
  %112 = sub i32 %2, %111
  %113 = zext i32 %112 to i64
  %114 = getelementptr inbounds ptr, ptr %110, i64 %113
  ret ptr %114
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @access_virt_barray(ptr noundef %0, ptr noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4) #6 {
  %6 = add i32 %3, %2
  %7 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 1
  %8 = load i32, ptr %7, align 8, !tbaa !503
  %9 = icmp ugt i32 %6, %8
  br i1 %9, label %17, label %10

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 3
  %12 = load i32, ptr %11, align 8, !tbaa !505
  %13 = icmp ult i32 %12, %3
  br i1 %13, label %17, label %14

14:                                               ; preds = %10
  %15 = load ptr, ptr %1, align 8, !tbaa !501
  %16 = icmp eq ptr %15, null
  br i1 %16, label %17, label %21

17:                                               ; preds = %14, %10, %5
  %18 = load ptr, ptr %0, align 8, !tbaa !460
  %19 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %18, i64 0, i32 5
  store i32 20, ptr %19, align 8, !tbaa !25
  %20 = load ptr, ptr %18, align 8, !tbaa !26
  tail call void %20(ptr noundef nonnull %0) #32
  br label %21

21:                                               ; preds = %17, %14
  %22 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 6
  %23 = load i32, ptr %22, align 4, !tbaa !520
  %24 = icmp ugt i32 %23, %2
  br i1 %24, label %30, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 4
  %27 = load i32, ptr %26, align 4, !tbaa !518
  %28 = add i32 %27, %23
  %29 = icmp ugt i32 %6, %28
  br i1 %29, label %30, label %56

30:                                               ; preds = %25, %21
  %31 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 10
  %32 = load i32, ptr %31, align 4, !tbaa !507
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %38

34:                                               ; preds = %30
  %35 = load ptr, ptr %0, align 8, !tbaa !460
  %36 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %35, i64 0, i32 5
  store i32 68, ptr %36, align 8, !tbaa !25
  %37 = load ptr, ptr %35, align 8, !tbaa !26
  tail call void %37(ptr noundef nonnull %0) #32
  br label %38

38:                                               ; preds = %34, %30
  %39 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 9
  %40 = load i32, ptr %39, align 8, !tbaa !522
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %43, label %42

42:                                               ; preds = %38
  tail call fastcc void @do_barray_io(ptr noundef %0, ptr noundef nonnull %1, i32 noundef 1) #33
  store i32 0, ptr %39, align 8, !tbaa !522
  br label %43

43:                                               ; preds = %42, %38
  %44 = load i32, ptr %22, align 4, !tbaa !520
  %45 = icmp ult i32 %44, %2
  br i1 %45, label %54, label %46

46:                                               ; preds = %43
  %47 = zext i32 %6 to i64
  %48 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 4
  %49 = load i32, ptr %48, align 4, !tbaa !518
  %50 = zext i32 %49 to i64
  %51 = sub nsw i64 %47, %50
  %52 = tail call i64 @llvm.smax.i64(i64 %51, i64 0)
  %53 = trunc i64 %52 to i32
  br label %54

54:                                               ; preds = %46, %43
  %55 = phi i32 [ %53, %46 ], [ %2, %43 ]
  store i32 %55, ptr %22, align 4, !tbaa !520
  tail call fastcc void @do_barray_io(ptr noundef %0, ptr noundef nonnull %1, i32 noundef 0) #33
  br label %56

56:                                               ; preds = %54, %25
  %57 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 7
  %58 = load i32, ptr %57, align 8, !tbaa !521
  %59 = icmp ult i32 %58, %6
  br i1 %59, label %60, label %106

60:                                               ; preds = %56
  %61 = icmp ult i32 %58, %2
  %62 = icmp eq i32 %4, 0
  br i1 %61, label %63, label %68

63:                                               ; preds = %60
  br i1 %62, label %78, label %64

64:                                               ; preds = %63
  %65 = load ptr, ptr %0, align 8, !tbaa !460
  %66 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %65, i64 0, i32 5
  store i32 20, ptr %66, align 8, !tbaa !25
  %67 = load ptr, ptr %65, align 8, !tbaa !26
  tail call void %67(ptr noundef nonnull %0) #32
  br label %73

68:                                               ; preds = %60
  br i1 %62, label %69, label %73

69:                                               ; preds = %68
  %70 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 8
  %71 = load i32, ptr %70, align 4, !tbaa !506
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %102, label %82

73:                                               ; preds = %68, %64
  %74 = phi i32 [ %2, %64 ], [ %58, %68 ]
  store i32 %6, ptr %57, align 8, !tbaa !521
  %75 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 8
  %76 = load i32, ptr %75, align 4, !tbaa !506
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %108, label %82

78:                                               ; preds = %63
  %79 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 8
  %80 = load i32, ptr %79, align 4, !tbaa !506
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %102, label %82

82:                                               ; preds = %78, %73, %69
  %83 = phi i32 [ %2, %78 ], [ %58, %69 ], [ %74, %73 ]
  %84 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 2
  %85 = load i32, ptr %84, align 4, !tbaa !504
  %86 = zext i32 %85 to i64
  %87 = shl nuw nsw i64 %86, 7
  %88 = load i32, ptr %22, align 4, !tbaa !520
  %89 = sub i32 %83, %88
  %90 = sub i32 %6, %88
  %91 = icmp ult i32 %89, %90
  br i1 %91, label %92, label %106

92:                                               ; preds = %82
  %93 = zext i32 %89 to i64
  br label %94

94:                                               ; preds = %94, %92
  %95 = phi i64 [ %93, %92 ], [ %99, %94 ]
  %96 = load ptr, ptr %1, align 8, !tbaa !501
  %97 = getelementptr inbounds ptr, ptr %96, i64 %95
  %98 = load ptr, ptr %97, align 8, !tbaa !10
  tail call void @jzero_far(ptr noundef %98, i64 noundef %87) #32
  %99 = add nuw nsw i64 %95, 1
  %100 = trunc i64 %99 to i32
  %101 = icmp eq i32 %90, %100
  br i1 %101, label %106, label %94, !llvm.loop !525

102:                                              ; preds = %78, %69
  %103 = load ptr, ptr %0, align 8, !tbaa !460
  %104 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %103, i64 0, i32 5
  store i32 20, ptr %104, align 8, !tbaa !25
  %105 = load ptr, ptr %103, align 8, !tbaa !26
  tail call void %105(ptr noundef nonnull %0) #32
  br label %110

106:                                              ; preds = %94, %82, %56
  %107 = icmp eq i32 %4, 0
  br i1 %107, label %110, label %108

108:                                              ; preds = %106, %73
  %109 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 9
  store i32 1, ptr %109, align 8, !tbaa !522
  br label %110

110:                                              ; preds = %108, %106, %102
  %111 = load ptr, ptr %1, align 8, !tbaa !501
  %112 = load i32, ptr %22, align 4, !tbaa !520
  %113 = sub i32 %2, %112
  %114 = zext i32 %113 to i64
  %115 = getelementptr inbounds ptr, ptr %111, i64 %114
  ret ptr %115
}

; Function Attrs: nounwind optsize uwtable
define internal void @free_pool(ptr noundef %0, i32 noundef %1) #6 {
  %3 = getelementptr inbounds %struct.jpeg_common_struct, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %3, align 8, !tbaa !59
  %5 = icmp ugt i32 %1, 1
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = load ptr, ptr %0, align 8, !tbaa !460
  %8 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %7, i64 0, i32 5
  store i32 12, ptr %8, align 8, !tbaa !25
  %9 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %7, i64 0, i32 6
  store i32 %1, ptr %9, align 4, !tbaa !7
  %10 = load ptr, ptr %0, align 8, !tbaa !460
  %11 = load ptr, ptr %10, align 8, !tbaa !26
  tail call void %11(ptr noundef nonnull %0) #32
  br label %49

12:                                               ; preds = %2
  %13 = icmp eq i32 %1, 1
  br i1 %13, label %14, label %49

14:                                               ; preds = %12
  %15 = getelementptr inbounds %struct.my_memory_mgr, ptr %4, i64 0, i32 3
  %16 = load ptr, ptr %15, align 8, !tbaa !10
  %17 = icmp eq ptr %16, null
  br i1 %17, label %31, label %18

18:                                               ; preds = %27, %14
  %19 = phi ptr [ %29, %27 ], [ %16, %14 ]
  %20 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %19, i64 0, i32 10
  %21 = load i32, ptr %20, align 4, !tbaa !498
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %27, label %23

23:                                               ; preds = %18
  store i32 0, ptr %20, align 4, !tbaa !498
  %24 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %19, i64 0, i32 12
  %25 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %19, i64 0, i32 12, i32 2
  %26 = load ptr, ptr %25, align 8, !tbaa !526
  tail call void %26(ptr noundef %0, ptr noundef nonnull %24) #32
  br label %27

27:                                               ; preds = %23, %18
  %28 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %19, i64 0, i32 11
  %29 = load ptr, ptr %28, align 8, !tbaa !10
  %30 = icmp eq ptr %29, null
  br i1 %30, label %31, label %18, !llvm.loop !527

31:                                               ; preds = %27, %14
  store ptr null, ptr %15, align 8, !tbaa !499
  %32 = getelementptr inbounds %struct.my_memory_mgr, ptr %4, i64 0, i32 4
  %33 = load ptr, ptr %32, align 8, !tbaa !10
  %34 = icmp eq ptr %33, null
  br i1 %34, label %48, label %35

35:                                               ; preds = %44, %31
  %36 = phi ptr [ %46, %44 ], [ %33, %31 ]
  %37 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %36, i64 0, i32 10
  %38 = load i32, ptr %37, align 4, !tbaa !507
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %44, label %40

40:                                               ; preds = %35
  store i32 0, ptr %37, align 4, !tbaa !507
  %41 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %36, i64 0, i32 12
  %42 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %36, i64 0, i32 12, i32 2
  %43 = load ptr, ptr %42, align 8, !tbaa !528
  tail call void %43(ptr noundef %0, ptr noundef nonnull %41) #32
  br label %44

44:                                               ; preds = %40, %35
  %45 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %36, i64 0, i32 11
  %46 = load ptr, ptr %45, align 8, !tbaa !10
  %47 = icmp eq ptr %46, null
  br i1 %47, label %48, label %35, !llvm.loop !529

48:                                               ; preds = %44, %31
  store ptr null, ptr %32, align 8, !tbaa !508
  br label %49

49:                                               ; preds = %48, %12, %6
  %50 = sext i32 %1 to i64
  %51 = getelementptr inbounds %struct.my_memory_mgr, ptr %4, i64 0, i32 2, i64 %50
  %52 = load ptr, ptr %51, align 8, !tbaa !10
  store ptr null, ptr %51, align 8, !tbaa !10
  %53 = icmp eq ptr %52, null
  br i1 %53, label %68, label %54

54:                                               ; preds = %49
  %55 = getelementptr inbounds %struct.my_memory_mgr, ptr %4, i64 0, i32 5
  br label %56

56:                                               ; preds = %56, %54
  %57 = phi ptr [ %52, %54 ], [ %58, %56 ]
  %58 = load ptr, ptr %57, align 8, !tbaa !7
  %59 = getelementptr inbounds %struct.anon.0, ptr %57, i64 0, i32 1
  %60 = load i64, ptr %59, align 8, !tbaa !7
  %61 = getelementptr inbounds %struct.anon.0, ptr %57, i64 0, i32 2
  %62 = load i64, ptr %61, align 8, !tbaa !7
  %63 = add i64 %60, 24
  %64 = add i64 %63, %62
  tail call void @jpeg_free_large(ptr noundef %0, ptr noundef nonnull %57, i64 noundef %64) #32
  %65 = load i64, ptr %55, align 8, !tbaa !484
  %66 = sub i64 %65, %64
  store i64 %66, ptr %55, align 8, !tbaa !484
  %67 = icmp eq ptr %58, null
  br i1 %67, label %68, label %56, !llvm.loop !530

68:                                               ; preds = %56, %49
  %69 = getelementptr inbounds %struct.my_memory_mgr, ptr %4, i64 0, i32 1, i64 %50
  %70 = load ptr, ptr %69, align 8, !tbaa !10
  store ptr null, ptr %69, align 8, !tbaa !10
  %71 = icmp eq ptr %70, null
  br i1 %71, label %86, label %72

72:                                               ; preds = %68
  %73 = getelementptr inbounds %struct.my_memory_mgr, ptr %4, i64 0, i32 5
  br label %74

74:                                               ; preds = %74, %72
  %75 = phi ptr [ %70, %72 ], [ %76, %74 ]
  %76 = load ptr, ptr %75, align 8, !tbaa !7
  %77 = getelementptr inbounds %struct.anon.0, ptr %75, i64 0, i32 1
  %78 = load i64, ptr %77, align 8, !tbaa !7
  %79 = getelementptr inbounds %struct.anon.0, ptr %75, i64 0, i32 2
  %80 = load i64, ptr %79, align 8, !tbaa !7
  %81 = add i64 %78, 24
  %82 = add i64 %81, %80
  tail call void @jpeg_free_small(ptr noundef %0, ptr noundef nonnull %75, i64 noundef %82) #32
  %83 = load i64, ptr %73, align 8, !tbaa !484
  %84 = sub i64 %83, %82
  store i64 %84, ptr %73, align 8, !tbaa !484
  %85 = icmp eq ptr %76, null
  br i1 %85, label %86, label %74, !llvm.loop !531

86:                                               ; preds = %74, %68
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @self_destruct(ptr noundef %0) #6 {
  br label %2

2:                                                ; preds = %2, %1
  %3 = phi i32 [ 1, %1 ], [ %4, %2 ]
  tail call void @free_pool(ptr noundef %0, i32 noundef %3) #33
  %4 = add nsw i32 %3, -1
  %5 = icmp eq i32 %3, 0
  br i1 %5, label %6, label %2, !llvm.loop !532

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.jpeg_common_struct, ptr %0, i64 0, i32 1
  %8 = load ptr, ptr %7, align 8, !tbaa !59
  tail call void @jpeg_free_small(ptr noundef %0, ptr noundef %8, i64 noundef 160) #32
  store ptr null, ptr %7, align 8, !tbaa !59
  tail call void @jpeg_mem_term(ptr noundef %0) #32
  ret void
}

; Function Attrs: nofree nounwind optsize memory(read)
declare noundef ptr @getenv(ptr nocapture noundef) local_unnamed_addr #22

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @do_barray_io(ptr noundef %0, ptr noundef %1, i32 noundef %2) unnamed_addr #6 {
  %4 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 2
  %5 = load i32, ptr %4, align 4, !tbaa !504
  %6 = zext i32 %5 to i64
  %7 = shl nuw nsw i64 %6, 7
  %8 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 6
  %9 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 5
  %10 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 4
  %11 = load i32, ptr %10, align 4, !tbaa !518
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %58, label %13

13:                                               ; preds = %3
  %14 = zext i32 %11 to i64
  %15 = load i32, ptr %8, align 4, !tbaa !520
  %16 = zext i32 %15 to i64
  %17 = mul nsw i64 %7, %16
  %18 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 7
  %19 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 1
  %20 = icmp eq i32 %2, 0
  %21 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 12
  %22 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 12, i32 1
  %23 = load i32, ptr %9, align 8, !tbaa !519
  %24 = select i1 %20, ptr %21, ptr %22
  br label %25

25:                                               ; preds = %45, %13
  %26 = phi i32 [ %23, %13 ], [ %52, %45 ]
  %27 = phi i64 [ %14, %13 ], [ %56, %45 ]
  %28 = phi i64 [ 0, %13 ], [ %54, %45 ]
  %29 = phi i64 [ %17, %13 ], [ %51, %45 ]
  %30 = zext i32 %26 to i64
  %31 = sub nsw i64 %27, %28
  %32 = tail call i64 @llvm.smin.i64(i64 %31, i64 %30)
  %33 = load i32, ptr %8, align 4, !tbaa !520
  %34 = zext i32 %33 to i64
  %35 = add nuw nsw i64 %28, %34
  %36 = load i32, ptr %18, align 8, !tbaa !521
  %37 = zext i32 %36 to i64
  %38 = sub nsw i64 %37, %35
  %39 = tail call i64 @llvm.smin.i64(i64 %32, i64 %38)
  %40 = load i32, ptr %19, align 8, !tbaa !503
  %41 = zext i32 %40 to i64
  %42 = sub nsw i64 %41, %35
  %43 = tail call i64 @llvm.smin.i64(i64 %39, i64 %42)
  %44 = icmp slt i64 %43, 1
  br i1 %44, label %58, label %45

45:                                               ; preds = %25
  %46 = mul nsw i64 %43, %7
  %47 = load ptr, ptr %1, align 8, !tbaa !501
  %48 = getelementptr inbounds ptr, ptr %47, i64 %28
  %49 = load ptr, ptr %48, align 8, !tbaa !10
  %50 = load ptr, ptr %24, align 8, !tbaa !10
  tail call void %50(ptr noundef %0, ptr noundef nonnull %21, ptr noundef %49, i64 noundef %29, i64 noundef %46) #32
  %51 = add nsw i64 %46, %29
  %52 = load i32, ptr %9, align 8, !tbaa !519
  %53 = zext i32 %52 to i64
  %54 = add nuw nsw i64 %28, %53
  %55 = load i32, ptr %10, align 4, !tbaa !518
  %56 = zext i32 %55 to i64
  %57 = icmp ult i64 %54, %56
  br i1 %57, label %25, label %58, !llvm.loop !533

58:                                               ; preds = %45, %25, %3
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smax.i64(i64, i64) #14

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #14

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @do_sarray_io(ptr noundef %0, ptr noundef %1, i32 noundef %2) unnamed_addr #6 {
  %4 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 2
  %5 = load i32, ptr %4, align 4, !tbaa !495
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 6
  %8 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 5
  %9 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 4
  %10 = load i32, ptr %9, align 4, !tbaa !512
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %57, label %12

12:                                               ; preds = %3
  %13 = zext i32 %10 to i64
  %14 = load i32, ptr %7, align 4, !tbaa !514
  %15 = zext i32 %14 to i64
  %16 = mul nuw nsw i64 %15, %6
  %17 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 7
  %18 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 1
  %19 = icmp eq i32 %2, 0
  %20 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 12
  %21 = getelementptr inbounds %struct.jvirt_sarray_control, ptr %1, i64 0, i32 12, i32 1
  %22 = load i32, ptr %8, align 8, !tbaa !513
  %23 = select i1 %19, ptr %20, ptr %21
  br label %24

24:                                               ; preds = %44, %12
  %25 = phi i32 [ %22, %12 ], [ %51, %44 ]
  %26 = phi i64 [ %13, %12 ], [ %55, %44 ]
  %27 = phi i64 [ 0, %12 ], [ %53, %44 ]
  %28 = phi i64 [ %16, %12 ], [ %50, %44 ]
  %29 = zext i32 %25 to i64
  %30 = sub nsw i64 %26, %27
  %31 = tail call i64 @llvm.smin.i64(i64 %30, i64 %29)
  %32 = load i32, ptr %7, align 4, !tbaa !514
  %33 = zext i32 %32 to i64
  %34 = add nuw nsw i64 %27, %33
  %35 = load i32, ptr %17, align 8, !tbaa !515
  %36 = zext i32 %35 to i64
  %37 = sub nsw i64 %36, %34
  %38 = tail call i64 @llvm.smin.i64(i64 %31, i64 %37)
  %39 = load i32, ptr %18, align 8, !tbaa !494
  %40 = zext i32 %39 to i64
  %41 = sub nsw i64 %40, %34
  %42 = tail call i64 @llvm.smin.i64(i64 %38, i64 %41)
  %43 = icmp slt i64 %42, 1
  br i1 %43, label %57, label %44

44:                                               ; preds = %24
  %45 = mul nuw nsw i64 %42, %6
  %46 = load ptr, ptr %1, align 8, !tbaa !491
  %47 = getelementptr inbounds ptr, ptr %46, i64 %27
  %48 = load ptr, ptr %47, align 8, !tbaa !10
  %49 = load ptr, ptr %23, align 8, !tbaa !10
  tail call void %49(ptr noundef %0, ptr noundef nonnull %20, ptr noundef %48, i64 noundef %28, i64 noundef %45) #32
  %50 = add nsw i64 %45, %28
  %51 = load i32, ptr %8, align 8, !tbaa !513
  %52 = zext i32 %51 to i64
  %53 = add nuw nsw i64 %27, %52
  %54 = load i32, ptr %9, align 4, !tbaa !512
  %55 = zext i32 %54 to i64
  %56 = icmp ult i64 %53, %55
  br i1 %56, label %24, label %57, !llvm.loop !534

57:                                               ; preds = %44, %24, %3
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.umin.i64(i64, i64) #14

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(inaccessiblemem: readwrite) uwtable
define internal noalias ptr @jpeg_get_small(ptr nocapture noundef readnone %0, i64 noundef %1) #23 {
  %3 = tail call noalias ptr @malloc(i64 noundef %1) #37
  ret ptr %3
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #24

; Function Attrs: mustprogress nounwind optsize willreturn memory(argmem: readwrite, inaccessiblemem: readwrite) uwtable
define internal void @jpeg_free_small(ptr nocapture noundef readnone %0, ptr nocapture noundef %1, i64 noundef %2) #25 {
  tail call void @free(ptr noundef %1) #32
  ret void
}

; Function Attrs: mustprogress nounwind optsize willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) local_unnamed_addr #26

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(inaccessiblemem: readwrite) uwtable
define internal noalias ptr @jpeg_get_large(ptr nocapture noundef readnone %0, i64 noundef %1) #23 {
  %3 = tail call noalias ptr @malloc(i64 noundef %1) #37
  ret ptr %3
}

; Function Attrs: mustprogress nounwind optsize willreturn memory(argmem: readwrite, inaccessiblemem: readwrite) uwtable
define internal void @jpeg_free_large(ptr nocapture noundef readnone %0, ptr nocapture noundef %1, i64 noundef %2) #25 {
  tail call void @free(ptr noundef %1) #32
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i64 @jpeg_mem_available(ptr nocapture noundef readnone %0, i64 noundef %1, i64 noundef returned %2, i64 noundef %3) #12 {
  ret i64 %2
}

; Function Attrs: nounwind optsize uwtable
define internal void @jpeg_open_backing_store(ptr noundef %0, ptr nocapture noundef readnone %1, i64 noundef %2) #6 {
  %4 = load ptr, ptr %0, align 8, !tbaa !460
  %5 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %4, i64 0, i32 5
  store i32 48, ptr %5, align 8, !tbaa !25
  %6 = load ptr, ptr %4, align 8, !tbaa !26
  tail call void %6(ptr noundef nonnull %0) #32
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i64 @jpeg_mem_init(ptr nocapture noundef readnone %0) #12 {
  ret i64 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal void @jpeg_mem_term(ptr nocapture noundef %0) #12 {
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @jinit_1pass_quantizer(ptr noundef %0) #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !50
  %4 = load ptr, ptr %3, align 8, !tbaa !65
  %5 = tail call ptr %4(ptr noundef %0, i32 noundef 1, i64 noundef 152) #32
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 83
  store ptr %5, ptr %6, align 8, !tbaa !369
  store ptr @start_pass_1_quant, ptr %5, align 8, !tbaa !535
  %7 = getelementptr inbounds %struct.jpeg_color_quantizer, ptr %5, i64 0, i32 2
  store ptr @finish_pass_1_quant, ptr %7, align 8, !tbaa !537
  %8 = getelementptr inbounds %struct.jpeg_color_quantizer, ptr %5, i64 0, i32 3
  store ptr @new_color_map_1_quant, ptr %8, align 8, !tbaa !538
  %9 = getelementptr inbounds %struct.my_cquantizer, ptr %5, i64 0, i32 8
  store ptr null, ptr %9, align 8, !tbaa !10
  %10 = getelementptr inbounds %struct.my_cquantizer, ptr %5, i64 0, i32 7
  store ptr null, ptr %10, align 8, !tbaa !10
  %11 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 28
  %12 = load i32, ptr %11, align 8, !tbaa !199
  %13 = icmp sgt i32 %12, 4
  br i1 %13, label %14, label %20

14:                                               ; preds = %1
  %15 = load ptr, ptr %0, align 8, !tbaa !16
  %16 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %15, i64 0, i32 5
  store i32 54, ptr %16, align 8, !tbaa !25
  %17 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %15, i64 0, i32 6
  store i32 4, ptr %17, align 4, !tbaa !7
  %18 = load ptr, ptr %0, align 8, !tbaa !16
  %19 = load ptr, ptr %18, align 8, !tbaa !26
  tail call void %19(ptr noundef nonnull %0) #32
  br label %20

20:                                               ; preds = %14, %1
  %21 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 22
  %22 = load i32, ptr %21, align 8, !tbaa !42
  %23 = icmp sgt i32 %22, 256
  br i1 %23, label %24, label %31

24:                                               ; preds = %20
  %25 = load ptr, ptr %0, align 8, !tbaa !16
  %26 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %25, i64 0, i32 5
  store i32 56, ptr %26, align 8, !tbaa !25
  %27 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %25, i64 0, i32 6
  store i32 256, ptr %27, align 4, !tbaa !7
  %28 = load ptr, ptr %0, align 8, !tbaa !16
  %29 = load ptr, ptr %28, align 8, !tbaa !26
  tail call void %29(ptr noundef nonnull %0) #32
  %30 = load i32, ptr %21, align 8, !tbaa !42
  br label %31

31:                                               ; preds = %24, %20
  %32 = phi i32 [ %30, %24 ], [ %22, %20 ]
  %33 = load ptr, ptr %6, align 8, !tbaa !369
  %34 = load i32, ptr %11, align 8, !tbaa !199
  %35 = sext i32 %32 to i64
  %36 = icmp sgt i32 %34, 1
  br label %37

37:                                               ; preds = %46, %31
  %38 = phi i64 [ %39, %46 ], [ 1, %31 ]
  %39 = add nuw i64 %38, 1
  br i1 %36, label %40, label %46

40:                                               ; preds = %40, %37
  %41 = phi i64 [ %43, %40 ], [ %39, %37 ]
  %42 = phi i32 [ %44, %40 ], [ 1, %37 ]
  %43 = mul nsw i64 %41, %39
  %44 = add nuw nsw i32 %42, 1
  %45 = icmp eq i32 %44, %34
  br i1 %45, label %46, label %40, !llvm.loop !539

46:                                               ; preds = %40, %37
  %47 = phi i64 [ %39, %37 ], [ %43, %40 ]
  %48 = icmp sgt i64 %47, %35
  br i1 %48, label %49, label %37, !llvm.loop !540

49:                                               ; preds = %46
  %.lcssa4 = phi i64 [ %47, %46 ]
  %.lcssa3 = phi i64 [ %38, %46 ]
  %50 = getelementptr inbounds %struct.my_cquantizer, ptr %33, i64 0, i32 5
  %51 = trunc i64 %.lcssa3 to i32
  %52 = icmp ult i32 %51, 2
  br i1 %52, label %53, label %60

53:                                               ; preds = %49
  %54 = load ptr, ptr %0, align 8, !tbaa !16
  %55 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %54, i64 0, i32 5
  store i32 55, ptr %55, align 8, !tbaa !25
  %56 = trunc i64 %.lcssa4 to i32
  %57 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %54, i64 0, i32 6
  store i32 %56, ptr %57, align 4, !tbaa !7
  %58 = load ptr, ptr %0, align 8, !tbaa !16
  %59 = load ptr, ptr %58, align 8, !tbaa !26
  tail call void %59(ptr noundef nonnull %0) #32
  br label %60

60:                                               ; preds = %53, %49
  %61 = icmp sgt i32 %34, 0
  %62 = zext i32 %34 to i64
  br i1 %61, label %63, label %136

63:                                               ; preds = %60
  %64 = add nuw nsw i64 %62, 3
  %65 = and i64 %64, 8589934588
  %66 = add nsw i64 %62, -1
  %67 = insertelement <4 x i64> poison, i64 %66, i64 0
  %68 = shufflevector <4 x i64> %67, <4 x i64> poison, <4 x i32> zeroinitializer
  %69 = insertelement <4 x i32> poison, i32 %51, i64 0
  %70 = shufflevector <4 x i32> %69, <4 x i32> poison, <4 x i32> zeroinitializer
  br label %71

71:                                               ; preds = %94, %63
  %72 = phi i64 [ 0, %63 ], [ %96, %94 ]
  %73 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %63 ], [ %97, %94 ]
  %74 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %63 ], [ %95, %94 ]
  %75 = icmp ule <4 x i64> %73, %68
  %76 = extractelement <4 x i1> %75, i64 0
  br i1 %76, label %77, label %79

77:                                               ; preds = %71
  %78 = getelementptr inbounds i32, ptr %50, i64 %72
  store i32 %51, ptr %78, align 4, !tbaa !41
  br label %79

79:                                               ; preds = %77, %71
  %80 = extractelement <4 x i1> %75, i64 1
  br i1 %80, label %81, label %84

81:                                               ; preds = %79
  %82 = or i64 %72, 1
  %83 = getelementptr inbounds i32, ptr %50, i64 %82
  store i32 %51, ptr %83, align 4, !tbaa !41
  br label %84

84:                                               ; preds = %81, %79
  %85 = extractelement <4 x i1> %75, i64 2
  br i1 %85, label %86, label %89

86:                                               ; preds = %84
  %87 = or i64 %72, 2
  %88 = getelementptr inbounds i32, ptr %50, i64 %87
  store i32 %51, ptr %88, align 4, !tbaa !41
  br label %89

89:                                               ; preds = %86, %84
  %90 = extractelement <4 x i1> %75, i64 3
  br i1 %90, label %91, label %94

91:                                               ; preds = %89
  %92 = or i64 %72, 3
  %93 = getelementptr inbounds i32, ptr %50, i64 %92
  store i32 %51, ptr %93, align 4, !tbaa !41
  br label %94

94:                                               ; preds = %91, %89
  %95 = mul <4 x i32> %74, %70
  %96 = add i64 %72, 4
  %97 = add <4 x i64> %73, <i64 4, i64 4, i64 4, i64 4>
  %98 = icmp eq i64 %96, %65
  br i1 %98, label %99, label %71, !llvm.loop !541

99:                                               ; preds = %94
  %.lcssa2 = phi <4 x i32> [ %95, %94 ]
  %.lcssa1 = phi <4 x i32> [ %74, %94 ]
  %.lcssa = phi <4 x i1> [ %75, %94 ]
  %100 = select <4 x i1> %.lcssa, <4 x i32> %.lcssa2, <4 x i32> %.lcssa1
  %101 = tail call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %100)
  br i1 %61, label %102, label %136

102:                                              ; preds = %99
  %103 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 10
  %104 = load i32, ptr %103, align 8, !tbaa !48
  %105 = icmp eq i32 %104, 2
  br label %106

106:                                              ; preds = %129, %102
  %107 = phi i64 [ 0, %102 ], [ %130, %129 ]
  %108 = phi i1 [ true, %102 ], [ %131, %129 ]
  %109 = phi i32 [ %101, %102 ], [ %132, %129 ]
  %110 = trunc i64 %107 to i32
  br i1 %105, label %111, label %114

111:                                              ; preds = %106
  %112 = getelementptr inbounds [3 x i32], ptr @select_ncolors.RGB_order, i64 0, i64 %107
  %113 = load i32, ptr %112, align 4, !tbaa !41
  br label %114

114:                                              ; preds = %111, %106
  %115 = phi i32 [ %113, %111 ], [ %110, %106 ]
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds i32, ptr %50, i64 %116
  %118 = load i32, ptr %117, align 4, !tbaa !41
  %119 = sdiv i32 %109, %118
  %120 = sext i32 %119 to i64
  %121 = add nsw i32 %118, 1
  %122 = sext i32 %121 to i64
  %123 = mul nsw i64 %120, %122
  %124 = icmp sgt i64 %123, %35
  br i1 %124, label %133, label %125

125:                                              ; preds = %114
  store i32 %121, ptr %117, align 4, !tbaa !41
  %126 = trunc i64 %123 to i32
  %127 = add nuw nsw i64 %107, 1
  %128 = icmp eq i64 %127, %62
  br i1 %128, label %133, label %129

129:                                              ; preds = %133, %125
  %130 = phi i64 [ %127, %125 ], [ 0, %133 ]
  %131 = phi i1 [ false, %125 ], [ true, %133 ]
  %132 = phi i32 [ %126, %125 ], [ %134, %133 ]
  br label %106, !llvm.loop !542

133:                                              ; preds = %125, %114
  %134 = phi i32 [ %109, %114 ], [ %126, %125 ]
  %135 = phi i1 [ %108, %114 ], [ false, %125 ]
  br i1 %135, label %136, label %129

136:                                              ; preds = %133, %99, %60
  %137 = phi i32 [ %101, %99 ], [ 1, %60 ], [ %134, %133 ]
  %138 = load i32, ptr %11, align 8, !tbaa !199
  %139 = icmp eq i32 %138, 3
  %140 = load ptr, ptr %0, align 8, !tbaa !16
  %141 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %140, i64 0, i32 6
  store i32 %137, ptr %141, align 4, !tbaa !7
  br i1 %139, label %142, label %151

142:                                              ; preds = %136
  %143 = load i32, ptr %50, align 4, !tbaa !41
  %144 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %140, i64 0, i32 6, i32 0, i64 1
  store i32 %143, ptr %144, align 4, !tbaa !41
  %145 = getelementptr inbounds %struct.my_cquantizer, ptr %33, i64 0, i32 5, i64 1
  %146 = load i32, ptr %145, align 4, !tbaa !41
  %147 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %140, i64 0, i32 6, i32 0, i64 2
  store i32 %146, ptr %147, align 4, !tbaa !41
  %148 = getelementptr inbounds %struct.my_cquantizer, ptr %33, i64 0, i32 5, i64 2
  %149 = load i32, ptr %148, align 4, !tbaa !41
  %150 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %140, i64 0, i32 6, i32 0, i64 3
  store i32 %149, ptr %150, align 4, !tbaa !41
  br label %153

151:                                              ; preds = %136
  %152 = load ptr, ptr %0, align 8, !tbaa !16
  br label %153

153:                                              ; preds = %151, %142
  %154 = phi i32 [ 93, %142 ], [ 94, %151 ]
  %155 = phi ptr [ %140, %142 ], [ %152, %151 ]
  %156 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %140, i64 0, i32 5
  store i32 %154, ptr %156, align 8
  %157 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %155, i64 0, i32 1
  %158 = load ptr, ptr %157, align 8, !tbaa !85
  tail call void %158(ptr noundef nonnull %0, i32 noundef 1) #32
  %159 = load ptr, ptr %2, align 8, !tbaa !50
  %160 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %159, i64 0, i32 2
  %161 = load ptr, ptr %160, align 8, !tbaa !311
  %162 = load i32, ptr %11, align 8, !tbaa !199
  %163 = tail call ptr %161(ptr noundef nonnull %0, i32 noundef 1, i32 noundef %137, i32 noundef %162) #32
  %164 = load i32, ptr %11, align 8, !tbaa !199
  %165 = icmp sgt i32 %164, 0
  br i1 %165, label %166, label %220

166:                                              ; preds = %153
  %167 = sext i32 %137 to i64
  br label %168

168:                                              ; preds = %215, %166
  %169 = phi i32 [ %164, %166 ], [ %216, %215 ]
  %170 = phi i64 [ 0, %166 ], [ %217, %215 ]
  %171 = phi i32 [ %137, %166 ], [ %174, %215 ]
  %172 = getelementptr inbounds %struct.my_cquantizer, ptr %33, i64 0, i32 5, i64 %170
  %173 = load i32, ptr %172, align 4, !tbaa !41
  %174 = sdiv i32 %171, %173
  %175 = icmp sgt i32 %173, 0
  br i1 %175, label %176, label %215

176:                                              ; preds = %168
  %177 = add nsw i32 %173, -1
  %178 = lshr i32 %177, 1
  %179 = zext i32 %178 to i64
  %180 = zext i32 %177 to i64
  %181 = icmp sgt i32 %174, 0
  %182 = getelementptr inbounds ptr, ptr %163, i64 %170
  %183 = sext i32 %174 to i64
  %184 = sext i32 %171 to i64
  %185 = zext i32 %173 to i64
  %186 = zext i32 %174 to i64
  br label %187

187:                                              ; preds = %209, %176
  %188 = phi i64 [ 0, %176 ], [ %210, %209 ]
  %189 = phi i64 [ 0, %176 ], [ %211, %209 ]
  %190 = mul nsw i64 %188, %183
  %191 = icmp slt i64 %190, %167
  br i1 %191, label %192, label %209

192:                                              ; preds = %187
  %193 = mul nuw nsw i64 %188, 255
  %194 = add nuw nsw i64 %193, %179
  %195 = udiv i64 %194, %180
  %196 = trunc i64 %195 to i8
  br label %197

197:                                              ; preds = %206, %192
  %198 = phi i64 [ %189, %192 ], [ %207, %206 ]
  br i1 %181, label %199, label %206

199:                                              ; preds = %199, %197
  %200 = phi i64 [ %204, %199 ], [ 0, %197 ]
  %201 = load ptr, ptr %182, align 8, !tbaa !10
  %202 = add nsw i64 %200, %198
  %203 = getelementptr inbounds i8, ptr %201, i64 %202
  store i8 %196, ptr %203, align 1, !tbaa !7
  %204 = add nuw nsw i64 %200, 1
  %205 = icmp eq i64 %204, %186
  br i1 %205, label %206, label %199, !llvm.loop !543

206:                                              ; preds = %199, %197
  %207 = add i64 %198, %184
  %208 = icmp slt i64 %207, %167
  br i1 %208, label %197, label %209, !llvm.loop !544

209:                                              ; preds = %206, %187
  %210 = add nuw nsw i64 %188, 1
  %211 = add i64 %189, %183
  %212 = icmp eq i64 %210, %185
  br i1 %212, label %213, label %187, !llvm.loop !545

213:                                              ; preds = %209
  %214 = load i32, ptr %11, align 8, !tbaa !199
  br label %215

215:                                              ; preds = %213, %168
  %216 = phi i32 [ %214, %213 ], [ %169, %168 ]
  %217 = add nuw nsw i64 %170, 1
  %218 = sext i32 %216 to i64
  %219 = icmp slt i64 %217, %218
  br i1 %219, label %168, label %220, !llvm.loop !546

220:                                              ; preds = %215, %153
  %221 = getelementptr inbounds %struct.my_cquantizer, ptr %33, i64 0, i32 1
  store ptr %163, ptr %221, align 8, !tbaa !547
  %222 = getelementptr inbounds %struct.my_cquantizer, ptr %33, i64 0, i32 2
  store i32 %137, ptr %222, align 8, !tbaa !548
  tail call fastcc void @create_colorindex(ptr noundef nonnull %0) #33
  %223 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 20
  %224 = load i32, ptr %223, align 8, !tbaa !45
  %225 = icmp eq i32 %224, 2
  br i1 %225, label %226, label %227

226:                                              ; preds = %220
  tail call fastcc void @alloc_fs_workspace(ptr noundef nonnull %0) #33
  br label %227

227:                                              ; preds = %226, %220
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @start_pass_1_quant(ptr noundef %0, i32 %1) #6 {
  %3 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 83
  %4 = load ptr, ptr %3, align 8, !tbaa !369
  %5 = getelementptr inbounds %struct.my_cquantizer, ptr %4, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8, !tbaa !547
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 32
  store ptr %6, ptr %7, align 8, !tbaa !93
  %8 = getelementptr inbounds %struct.my_cquantizer, ptr %4, i64 0, i32 2
  %9 = load i32, ptr %8, align 8, !tbaa !548
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 31
  store i32 %9, ptr %10, align 4, !tbaa !549
  %11 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 20
  %12 = load i32, ptr %11, align 8, !tbaa !45
  switch i32 %12, label %118 [
    i32 0, label %13
    i32 1, label %20
    i32 2, label %94
  ]

13:                                               ; preds = %2
  %14 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 28
  %15 = load i32, ptr %14, align 8, !tbaa !199
  %16 = icmp eq i32 %15, 3
  %17 = getelementptr inbounds %struct.jpeg_color_quantizer, ptr %4, i64 0, i32 1
  br i1 %16, label %18, label %19

18:                                               ; preds = %13
  store ptr @color_quantize3, ptr %17, align 8, !tbaa !550
  br label %122

19:                                               ; preds = %13
  store ptr @color_quantize, ptr %17, align 8, !tbaa !550
  br label %122

20:                                               ; preds = %2
  %21 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 28
  %22 = load i32, ptr %21, align 8, !tbaa !199
  %23 = icmp eq i32 %22, 3
  %24 = select i1 %23, ptr @quantize3_ord_dither, ptr @quantize_ord_dither
  %25 = getelementptr inbounds %struct.jpeg_color_quantizer, ptr %4, i64 0, i32 1
  store ptr %24, ptr %25, align 8
  %26 = getelementptr inbounds %struct.my_cquantizer, ptr %4, i64 0, i32 6
  store i32 0, ptr %26, align 4, !tbaa !551
  %27 = getelementptr inbounds %struct.my_cquantizer, ptr %4, i64 0, i32 4
  %28 = load i32, ptr %27, align 8, !tbaa !552
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %31

30:                                               ; preds = %20
  tail call fastcc void @create_colorindex(ptr noundef nonnull %0) #33
  br label %31

31:                                               ; preds = %30, %20
  %32 = getelementptr inbounds %struct.my_cquantizer, ptr %4, i64 0, i32 7
  %33 = load ptr, ptr %32, align 8, !tbaa !10
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %122

35:                                               ; preds = %31
  %36 = load ptr, ptr %3, align 8, !tbaa !369
  %37 = load i32, ptr %21, align 8, !tbaa !199
  %38 = icmp sgt i32 %37, 0
  br i1 %38, label %39, label %122

39:                                               ; preds = %35
  %40 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  br label %41

41:                                               ; preds = %87, %39
  %42 = phi i32 [ %37, %39 ], [ %88, %87 ]
  %43 = phi i64 [ 0, %39 ], [ %91, %87 ]
  %44 = getelementptr inbounds %struct.my_cquantizer, ptr %36, i64 0, i32 5, i64 %43
  %45 = load i32, ptr %44, align 4, !tbaa !41
  %46 = icmp eq i64 %43, 0
  br i1 %46, label %59, label %50

47:                                               ; preds = %50
  %48 = add nuw nsw i64 %51, 1
  %49 = icmp eq i64 %48, %43
  br i1 %49, label %59, label %50, !llvm.loop !553

50:                                               ; preds = %47, %41
  %51 = phi i64 [ %48, %47 ], [ 0, %41 ]
  %52 = getelementptr inbounds %struct.my_cquantizer, ptr %36, i64 0, i32 5, i64 %51
  %53 = load i32, ptr %52, align 4, !tbaa !41
  %54 = icmp eq i32 %45, %53
  br i1 %54, label %55, label %47

55:                                               ; preds = %50
  %.lcssa = phi i64 [ %51, %50 ]
  %56 = getelementptr inbounds %struct.my_cquantizer, ptr %36, i64 0, i32 7, i64 %.lcssa
  %57 = load ptr, ptr %56, align 8, !tbaa !10
  %58 = icmp eq ptr %57, null
  br i1 %58, label %59, label %87

59:                                               ; preds = %55, %47, %41
  %60 = load ptr, ptr %40, align 8, !tbaa !50
  %61 = load ptr, ptr %60, align 8, !tbaa !65
  %62 = tail call ptr %61(ptr noundef %0, i32 noundef 1, i64 noundef 1024) #32
  %63 = add nsw i32 %45, -1
  %64 = sext i32 %63 to i64
  %65 = shl nsw i64 %64, 9
  br label %66

66:                                               ; preds = %82, %59
  %67 = phi i64 [ 0, %59 ], [ %83, %82 ]
  br label %68

68:                                               ; preds = %68, %66
  %69 = phi i64 [ 0, %66 ], [ %80, %68 ]
  %70 = getelementptr inbounds [16 x [16 x i8]], ptr @base_dither_matrix, i64 0, i64 %67, i64 %69
  %71 = load i8, ptr %70, align 1, !tbaa !7
  %72 = zext i8 %71 to i32
  %73 = shl nuw nsw i32 %72, 1
  %74 = sub nsw i32 255, %73
  %75 = mul nsw i32 %74, 255
  %76 = sext i32 %75 to i64
  %77 = sdiv i64 %76, %65
  %78 = trunc i64 %77 to i32
  %79 = getelementptr inbounds [16 x i32], ptr %62, i64 %67, i64 %69
  store i32 %78, ptr %79, align 4, !tbaa !41
  %80 = add nuw nsw i64 %69, 1
  %81 = icmp eq i64 %80, 16
  br i1 %81, label %82, label %68, !llvm.loop !554

82:                                               ; preds = %68
  %83 = add nuw nsw i64 %67, 1
  %84 = icmp eq i64 %83, 16
  br i1 %84, label %85, label %66, !llvm.loop !555

85:                                               ; preds = %82
  %86 = load i32, ptr %21, align 8, !tbaa !199
  br label %87

87:                                               ; preds = %85, %55
  %88 = phi i32 [ %42, %55 ], [ %86, %85 ]
  %89 = phi ptr [ %57, %55 ], [ %62, %85 ]
  %90 = getelementptr inbounds %struct.my_cquantizer, ptr %36, i64 0, i32 7, i64 %43
  store ptr %89, ptr %90, align 8, !tbaa !10
  %91 = add nuw nsw i64 %43, 1
  %92 = sext i32 %88 to i64
  %93 = icmp slt i64 %91, %92
  br i1 %93, label %41, label %122, !llvm.loop !556

94:                                               ; preds = %2
  %95 = getelementptr inbounds %struct.jpeg_color_quantizer, ptr %4, i64 0, i32 1
  store ptr @quantize_fs_dither, ptr %95, align 8, !tbaa !550
  %96 = getelementptr inbounds %struct.my_cquantizer, ptr %4, i64 0, i32 9
  store i32 0, ptr %96, align 8, !tbaa !557
  %97 = getelementptr inbounds %struct.my_cquantizer, ptr %4, i64 0, i32 8
  %98 = load ptr, ptr %97, align 8, !tbaa !10
  %99 = icmp eq ptr %98, null
  br i1 %99, label %100, label %101

100:                                              ; preds = %94
  tail call fastcc void @alloc_fs_workspace(ptr noundef nonnull %0) #33
  br label %101

101:                                              ; preds = %100, %94
  %102 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  %103 = load i32, ptr %102, align 8, !tbaa !202
  %104 = add i32 %103, 2
  %105 = zext i32 %104 to i64
  %106 = shl nuw nsw i64 %105, 1
  %107 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 28
  %108 = load i32, ptr %107, align 8, !tbaa !199
  %109 = icmp sgt i32 %108, 0
  br i1 %109, label %110, label %122

110:                                              ; preds = %110, %101
  %111 = phi i64 [ %114, %110 ], [ 0, %101 ]
  %112 = getelementptr inbounds %struct.my_cquantizer, ptr %4, i64 0, i32 8, i64 %111
  %113 = load ptr, ptr %112, align 8, !tbaa !10
  tail call void @jzero_far(ptr noundef %113, i64 noundef %106) #32
  %114 = add nuw nsw i64 %111, 1
  %115 = load i32, ptr %107, align 8, !tbaa !199
  %116 = sext i32 %115 to i64
  %117 = icmp slt i64 %114, %116
  br i1 %117, label %110, label %122, !llvm.loop !558

118:                                              ; preds = %2
  %119 = load ptr, ptr %0, align 8, !tbaa !16
  %120 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %119, i64 0, i32 5
  store i32 47, ptr %120, align 8, !tbaa !25
  %121 = load ptr, ptr %119, align 8, !tbaa !26
  tail call void %121(ptr noundef nonnull %0) #32
  br label %122

122:                                              ; preds = %118, %110, %101, %87, %35, %31, %19, %18
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal void @finish_pass_1_quant(ptr nocapture %0) #12 {
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @new_color_map_1_quant(ptr noundef %0) #6 {
  %2 = load ptr, ptr %0, align 8, !tbaa !16
  %3 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %2, i64 0, i32 5
  store i32 45, ptr %3, align 8, !tbaa !25
  %4 = load ptr, ptr %2, align 8, !tbaa !26
  tail call void %4(ptr noundef nonnull %0) #32
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.vector.reduce.mul.v4i32(<4 x i32>) #14

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @create_colorindex(ptr noundef %0) unnamed_addr #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 83
  %3 = load ptr, ptr %2, align 8, !tbaa !369
  %4 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 20
  %5 = load i32, ptr %4, align 8, !tbaa !45
  %6 = icmp eq i32 %5, 1
  %7 = zext i1 %6 to i32
  %8 = select i1 %6, i32 766, i32 256
  %9 = getelementptr inbounds %struct.my_cquantizer, ptr %3, i64 0, i32 4
  store i32 %7, ptr %9, align 8
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  %11 = load ptr, ptr %10, align 8, !tbaa !50
  %12 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %11, i64 0, i32 2
  %13 = load ptr, ptr %12, align 8, !tbaa !311
  %14 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 28
  %15 = load i32, ptr %14, align 8, !tbaa !199
  %16 = tail call ptr %13(ptr noundef nonnull %0, i32 noundef 1, i32 noundef %8, i32 noundef %15) #32
  %17 = getelementptr inbounds %struct.my_cquantizer, ptr %3, i64 0, i32 3
  store ptr %16, ptr %17, align 8, !tbaa !559
  %18 = load i32, ptr %14, align 8, !tbaa !199
  %19 = icmp sgt i32 %18, 0
  br i1 %19, label %20, label %95

20:                                               ; preds = %1
  %21 = getelementptr inbounds %struct.my_cquantizer, ptr %3, i64 0, i32 2
  %22 = load i32, ptr %21, align 8, !tbaa !548
  br label %23

23:                                               ; preds = %90, %20
  %24 = phi i64 [ 0, %20 ], [ %91, %90 ]
  %25 = phi i32 [ %22, %20 ], [ %28, %90 ]
  %26 = getelementptr inbounds %struct.my_cquantizer, ptr %3, i64 0, i32 5, i64 %24
  %27 = load i32, ptr %26, align 4, !tbaa !41
  %28 = sdiv i32 %25, %27
  %29 = load ptr, ptr %17, align 8, !tbaa !559
  br i1 %6, label %30, label %35

30:                                               ; preds = %23
  %31 = getelementptr inbounds ptr, ptr %29, i64 %24
  %32 = load ptr, ptr %31, align 8, !tbaa !10
  %33 = getelementptr inbounds i8, ptr %32, i64 255
  store ptr %33, ptr %31, align 8, !tbaa !10
  %34 = load ptr, ptr %17, align 8, !tbaa !559
  br label %35

35:                                               ; preds = %30, %23
  %36 = phi ptr [ %34, %30 ], [ %29, %23 ]
  %37 = getelementptr inbounds ptr, ptr %36, i64 %24
  %38 = load ptr, ptr %37, align 8, !tbaa !10
  %39 = add nsw i32 %27, -1
  %40 = sext i32 %39 to i64
  %41 = add nsw i64 %40, 255
  %42 = shl nsw i32 %39, 1
  %43 = sext i32 %42 to i64
  %44 = sdiv i64 %41, %43
  %45 = trunc i64 %44 to i32
  br label %46

46:                                               ; preds = %69, %35
  %47 = phi i64 [ 0, %35 ], [ %75, %69 ]
  %48 = phi i32 [ 0, %35 ], [ %71, %69 ]
  %49 = phi i32 [ %45, %35 ], [ %70, %69 ]
  %50 = sext i32 %49 to i64
  %51 = icmp sgt i64 %47, %50
  br i1 %51, label %52, label %69

52:                                               ; preds = %46
  %53 = zext i32 %48 to i64
  br label %54

54:                                               ; preds = %54, %52
  %55 = phi i64 [ %53, %52 ], [ %56, %54 ]
  %56 = add i64 %55, 1
  %57 = trunc i64 %56 to i32
  %58 = shl nsw i32 %57, 1
  %59 = or i32 %58, 1
  %60 = sext i32 %59 to i64
  %61 = mul nsw i64 %60, 255
  %62 = add nsw i64 %61, %40
  %63 = sdiv i64 %62, %43
  %64 = shl i64 %63, 32
  %65 = ashr exact i64 %64, 32
  %66 = icmp sgt i64 %47, %65
  br i1 %66, label %54, label %67, !llvm.loop !560

67:                                               ; preds = %54
  %.lcssa1 = phi i32 [ %57, %54 ]
  %.lcssa = phi i64 [ %63, %54 ]
  %68 = trunc i64 %.lcssa to i32
  br label %69

69:                                               ; preds = %67, %46
  %70 = phi i32 [ %49, %46 ], [ %68, %67 ]
  %71 = phi i32 [ %48, %46 ], [ %.lcssa1, %67 ]
  %72 = mul nsw i32 %71, %28
  %73 = trunc i32 %72 to i8
  %74 = getelementptr inbounds i8, ptr %38, i64 %47
  store i8 %73, ptr %74, align 1, !tbaa !7
  %75 = add nuw nsw i64 %47, 1
  %76 = icmp eq i64 %75, 256
  br i1 %76, label %77, label %46, !llvm.loop !561

77:                                               ; preds = %69
  br i1 %6, label %78, label %90

78:                                               ; preds = %77
  %79 = getelementptr inbounds i8, ptr %38, i64 255
  %80 = load i8, ptr %38, align 1, !tbaa !7
  br label %81

81:                                               ; preds = %81, %78
  %82 = phi i64 [ 1, %78 ], [ %88, %81 ]
  %83 = sub nsw i64 0, %82
  %84 = getelementptr inbounds i8, ptr %38, i64 %83
  store i8 %80, ptr %84, align 1, !tbaa !7
  %85 = load i8, ptr %79, align 1, !tbaa !7
  %86 = add nuw nsw i64 %82, 255
  %87 = getelementptr inbounds i8, ptr %38, i64 %86
  store i8 %85, ptr %87, align 1, !tbaa !7
  %88 = add nuw nsw i64 %82, 1
  %89 = icmp eq i64 %88, 256
  br i1 %89, label %90, label %81, !llvm.loop !562

90:                                               ; preds = %81, %77
  %91 = add nuw nsw i64 %24, 1
  %92 = load i32, ptr %14, align 8, !tbaa !199
  %93 = sext i32 %92 to i64
  %94 = icmp slt i64 %91, %93
  br i1 %94, label %23, label %95, !llvm.loop !563

95:                                               ; preds = %90, %1
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @alloc_fs_workspace(ptr noundef %0) unnamed_addr #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 83
  %3 = load ptr, ptr %2, align 8, !tbaa !369
  %4 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  %5 = load i32, ptr %4, align 8, !tbaa !202
  %6 = add i32 %5, 2
  %7 = zext i32 %6 to i64
  %8 = shl nuw nsw i64 %7, 1
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 28
  %10 = load i32, ptr %9, align 8, !tbaa !199
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %12, label %25

12:                                               ; preds = %1
  %13 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  br label %14

14:                                               ; preds = %14, %12
  %15 = phi i64 [ 0, %12 ], [ %21, %14 ]
  %16 = load ptr, ptr %13, align 8, !tbaa !50
  %17 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %16, i64 0, i32 1
  %18 = load ptr, ptr %17, align 8, !tbaa !143
  %19 = tail call ptr %18(ptr noundef nonnull %0, i32 noundef 1, i64 noundef %8) #32
  %20 = getelementptr inbounds %struct.my_cquantizer, ptr %3, i64 0, i32 8, i64 %15
  store ptr %19, ptr %20, align 8, !tbaa !10
  %21 = add nuw nsw i64 %15, 1
  %22 = load i32, ptr %9, align 8, !tbaa !199
  %23 = sext i32 %22 to i64
  %24 = icmp slt i64 %21, %23
  br i1 %24, label %14, label %25, !llvm.loop !564

25:                                               ; preds = %14, %1
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @color_quantize3(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, i32 noundef %3) #15 {
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 83
  %6 = load ptr, ptr %5, align 8, !tbaa !369
  %7 = getelementptr inbounds %struct.my_cquantizer, ptr %6, i64 0, i32 3
  %8 = load ptr, ptr %7, align 8, !tbaa !559
  %9 = load ptr, ptr %8, align 8, !tbaa !10
  %10 = getelementptr inbounds ptr, ptr %8, i64 1
  %11 = load ptr, ptr %10, align 8, !tbaa !10
  %12 = getelementptr inbounds ptr, ptr %8, i64 2
  %13 = load ptr, ptr %12, align 8, !tbaa !10
  %14 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  %15 = load i32, ptr %14, align 8, !tbaa !202
  %16 = icmp sgt i32 %3, 0
  br i1 %16, label %17, label %54

17:                                               ; preds = %4
  %18 = icmp eq i32 %15, 0
  %19 = zext i32 %3 to i64
  br label %20

20:                                               ; preds = %51, %17
  %21 = phi i64 [ 0, %17 ], [ %52, %51 ]
  br i1 %18, label %51, label %22

22:                                               ; preds = %20
  %23 = getelementptr inbounds ptr, ptr %2, i64 %21
  %24 = load ptr, ptr %23, align 8, !tbaa !10
  %25 = getelementptr inbounds ptr, ptr %1, i64 %21
  %26 = load ptr, ptr %25, align 8, !tbaa !10
  br label %27

27:                                               ; preds = %27, %22
  %28 = phi ptr [ %42, %27 ], [ %26, %22 ]
  %29 = phi i32 [ %49, %27 ], [ %15, %22 ]
  %30 = phi ptr [ %48, %27 ], [ %24, %22 ]
  %31 = getelementptr inbounds i8, ptr %28, i64 1
  %32 = load i8, ptr %28, align 1, !tbaa !7
  %33 = zext i8 %32 to i64
  %34 = getelementptr inbounds i8, ptr %9, i64 %33
  %35 = load i8, ptr %34, align 1, !tbaa !7
  %36 = getelementptr inbounds i8, ptr %28, i64 2
  %37 = load i8, ptr %31, align 1, !tbaa !7
  %38 = zext i8 %37 to i64
  %39 = getelementptr inbounds i8, ptr %11, i64 %38
  %40 = load i8, ptr %39, align 1, !tbaa !7
  %41 = add i8 %40, %35
  %42 = getelementptr inbounds i8, ptr %28, i64 3
  %43 = load i8, ptr %36, align 1, !tbaa !7
  %44 = zext i8 %43 to i64
  %45 = getelementptr inbounds i8, ptr %13, i64 %44
  %46 = load i8, ptr %45, align 1, !tbaa !7
  %47 = add i8 %41, %46
  %48 = getelementptr inbounds i8, ptr %30, i64 1
  store i8 %47, ptr %30, align 1, !tbaa !7
  %49 = add i32 %29, -1
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %27, !llvm.loop !565

51:                                               ; preds = %27, %20
  %52 = add nuw nsw i64 %21, 1
  %53 = icmp eq i64 %52, %19
  br i1 %53, label %54, label %20, !llvm.loop !566

54:                                               ; preds = %51, %4
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @color_quantize(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, i32 noundef %3) #15 {
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 83
  %6 = load ptr, ptr %5, align 8, !tbaa !369
  %7 = getelementptr inbounds %struct.my_cquantizer, ptr %6, i64 0, i32 3
  %8 = load ptr, ptr %7, align 8, !tbaa !559
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  %10 = load i32, ptr %9, align 8, !tbaa !202
  %11 = icmp sgt i32 %3, 0
  br i1 %11, label %12, label %58

12:                                               ; preds = %4
  %13 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 28
  %14 = load i32, ptr %13, align 8, !tbaa !199
  %15 = icmp eq i32 %10, 0
  %16 = icmp sgt i32 %14, 0
  %17 = add i32 %14, -1
  %18 = zext i32 %17 to i64
  %19 = add nuw nsw i64 %18, 1
  %20 = zext i32 %3 to i64
  %21 = zext i32 %14 to i64
  br label %22

22:                                               ; preds = %55, %12
  %23 = phi i64 [ 0, %12 ], [ %56, %55 ]
  br i1 %15, label %55, label %24

24:                                               ; preds = %22
  %25 = getelementptr inbounds ptr, ptr %2, i64 %23
  %26 = load ptr, ptr %25, align 8, !tbaa !10
  %27 = getelementptr inbounds ptr, ptr %1, i64 %23
  %28 = load ptr, ptr %27, align 8, !tbaa !10
  br label %29

29:                                               ; preds = %49, %24
  %30 = phi i32 [ %53, %49 ], [ %10, %24 ]
  %31 = phi ptr [ %52, %49 ], [ %26, %24 ]
  %32 = phi ptr [ %50, %49 ], [ %28, %24 ]
  br i1 %16, label %33, label %49

33:                                               ; preds = %33, %29
  %34 = phi i64 [ %45, %33 ], [ 0, %29 ]
  %35 = phi i8 [ %44, %33 ], [ 0, %29 ]
  %36 = phi ptr [ %39, %33 ], [ %32, %29 ]
  %37 = getelementptr inbounds ptr, ptr %8, i64 %34
  %38 = load ptr, ptr %37, align 8, !tbaa !10
  %39 = getelementptr inbounds i8, ptr %36, i64 1
  %40 = load i8, ptr %36, align 1, !tbaa !7
  %41 = zext i8 %40 to i64
  %42 = getelementptr inbounds i8, ptr %38, i64 %41
  %43 = load i8, ptr %42, align 1, !tbaa !7
  %44 = add i8 %43, %35
  %45 = add nuw nsw i64 %34, 1
  %46 = icmp eq i64 %45, %21
  br i1 %46, label %47, label %33, !llvm.loop !567

47:                                               ; preds = %33
  %.lcssa = phi i8 [ %44, %33 ]
  %48 = getelementptr i8, ptr %32, i64 %19
  br label %49

49:                                               ; preds = %47, %29
  %50 = phi ptr [ %32, %29 ], [ %48, %47 ]
  %51 = phi i8 [ 0, %29 ], [ %.lcssa, %47 ]
  %52 = getelementptr inbounds i8, ptr %31, i64 1
  store i8 %51, ptr %31, align 1, !tbaa !7
  %53 = add i32 %30, -1
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %29, !llvm.loop !568

55:                                               ; preds = %49, %22
  %56 = add nuw nsw i64 %23, 1
  %57 = icmp eq i64 %56, %20
  br i1 %57, label %58, label %22, !llvm.loop !569

58:                                               ; preds = %55, %4
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @quantize3_ord_dither(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, i32 noundef %3) #15 {
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 83
  %6 = load ptr, ptr %5, align 8, !tbaa !369
  %7 = getelementptr inbounds %struct.my_cquantizer, ptr %6, i64 0, i32 3
  %8 = load ptr, ptr %7, align 8, !tbaa !559
  %9 = load ptr, ptr %8, align 8, !tbaa !10
  %10 = getelementptr inbounds ptr, ptr %8, i64 1
  %11 = load ptr, ptr %10, align 8, !tbaa !10
  %12 = getelementptr inbounds ptr, ptr %8, i64 2
  %13 = load ptr, ptr %12, align 8, !tbaa !10
  %14 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  %15 = load i32, ptr %14, align 8, !tbaa !202
  %16 = icmp sgt i32 %3, 0
  br i1 %16, label %17, label %85

17:                                               ; preds = %4
  %18 = getelementptr inbounds %struct.my_cquantizer, ptr %6, i64 0, i32 6
  %19 = getelementptr inbounds %struct.my_cquantizer, ptr %6, i64 0, i32 7
  %20 = getelementptr inbounds %struct.my_cquantizer, ptr %6, i64 0, i32 7, i64 1
  %21 = getelementptr inbounds %struct.my_cquantizer, ptr %6, i64 0, i32 7, i64 2
  %22 = icmp eq i32 %15, 0
  %23 = zext i32 %3 to i64
  %24 = load i32, ptr %18, align 4, !tbaa !551
  br label %25

25:                                               ; preds = %80, %17
  %26 = phi i32 [ %24, %17 ], [ %82, %80 ]
  %27 = phi i64 [ 0, %17 ], [ %83, %80 ]
  %28 = load ptr, ptr %19, align 8, !tbaa !10
  %29 = sext i32 %26 to i64
  %30 = getelementptr inbounds [16 x i32], ptr %28, i64 %29
  %31 = load ptr, ptr %20, align 8, !tbaa !10
  %32 = getelementptr inbounds [16 x i32], ptr %31, i64 %29
  %33 = load ptr, ptr %21, align 8, !tbaa !10
  %34 = getelementptr inbounds [16 x i32], ptr %33, i64 %29
  br i1 %22, label %80, label %35

35:                                               ; preds = %25
  %36 = getelementptr inbounds ptr, ptr %2, i64 %27
  %37 = load ptr, ptr %36, align 8, !tbaa !10
  %38 = getelementptr inbounds ptr, ptr %1, i64 %27
  %39 = load ptr, ptr %38, align 8, !tbaa !10
  br label %40

40:                                               ; preds = %40, %35
  %41 = phi ptr [ %65, %40 ], [ %39, %35 ]
  %42 = phi i32 [ %78, %40 ], [ %15, %35 ]
  %43 = phi i32 [ %77, %40 ], [ 0, %35 ]
  %44 = phi ptr [ %75, %40 ], [ %37, %35 ]
  %45 = getelementptr inbounds i8, ptr %41, i64 1
  %46 = load i8, ptr %41, align 1, !tbaa !7
  %47 = zext i8 %46 to i32
  %48 = zext i32 %43 to i64
  %49 = getelementptr inbounds i32, ptr %30, i64 %48
  %50 = load i32, ptr %49, align 4, !tbaa !41
  %51 = add nsw i32 %50, %47
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i8, ptr %9, i64 %52
  %54 = load i8, ptr %53, align 1, !tbaa !7
  %55 = getelementptr inbounds i8, ptr %41, i64 2
  %56 = load i8, ptr %45, align 1, !tbaa !7
  %57 = zext i8 %56 to i32
  %58 = getelementptr inbounds i32, ptr %32, i64 %48
  %59 = load i32, ptr %58, align 4, !tbaa !41
  %60 = add nsw i32 %59, %57
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i8, ptr %11, i64 %61
  %63 = load i8, ptr %62, align 1, !tbaa !7
  %64 = add i8 %63, %54
  %65 = getelementptr inbounds i8, ptr %41, i64 3
  %66 = load i8, ptr %55, align 1, !tbaa !7
  %67 = zext i8 %66 to i32
  %68 = getelementptr inbounds i32, ptr %34, i64 %48
  %69 = load i32, ptr %68, align 4, !tbaa !41
  %70 = add nsw i32 %69, %67
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds i8, ptr %13, i64 %71
  %73 = load i8, ptr %72, align 1, !tbaa !7
  %74 = add i8 %64, %73
  %75 = getelementptr inbounds i8, ptr %44, i64 1
  store i8 %74, ptr %44, align 1, !tbaa !7
  %76 = add nuw nsw i32 %43, 1
  %77 = and i32 %76, 15
  %78 = add i32 %42, -1
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %40, !llvm.loop !570

80:                                               ; preds = %40, %25
  %81 = add nsw i32 %26, 1
  %82 = and i32 %81, 15
  store i32 %82, ptr %18, align 4, !tbaa !551
  %83 = add nuw nsw i64 %27, 1
  %84 = icmp eq i64 %83, %23
  br i1 %84, label %85, label %25, !llvm.loop !571

85:                                               ; preds = %80, %4
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @quantize_ord_dither(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, i32 noundef %3) #6 {
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 83
  %6 = load ptr, ptr %5, align 8, !tbaa !369
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  %8 = load i32, ptr %7, align 8, !tbaa !202
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %10, label %71

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 28
  %12 = load i32, ptr %11, align 8, !tbaa !199
  %13 = zext i32 %8 to i64
  %14 = getelementptr inbounds %struct.my_cquantizer, ptr %6, i64 0, i32 6
  %15 = icmp sgt i32 %12, 0
  %16 = getelementptr inbounds %struct.my_cquantizer, ptr %6, i64 0, i32 3
  %17 = icmp eq i32 %8, 0
  %18 = sext i32 %12 to i64
  %19 = zext i32 %3 to i64
  %20 = zext i32 %12 to i64
  br label %21

21:                                               ; preds = %66, %10
  %22 = phi i64 [ 0, %10 ], [ %69, %66 ]
  %23 = getelementptr inbounds ptr, ptr %2, i64 %22
  %24 = load ptr, ptr %23, align 8, !tbaa !10
  tail call void @jzero_far(ptr noundef %24, i64 noundef %13) #32
  %25 = load i32, ptr %14, align 4, !tbaa !551
  br i1 %15, label %26, label %66

26:                                               ; preds = %21
  %27 = getelementptr inbounds ptr, ptr %1, i64 %22
  %28 = sext i32 %25 to i64
  br label %29

29:                                               ; preds = %63, %26
  %30 = phi i64 [ 0, %26 ], [ %64, %63 ]
  %31 = load ptr, ptr %16, align 8, !tbaa !559
  %32 = getelementptr inbounds ptr, ptr %31, i64 %30
  %33 = load ptr, ptr %32, align 8, !tbaa !10
  %34 = getelementptr inbounds %struct.my_cquantizer, ptr %6, i64 0, i32 7, i64 %30
  %35 = load ptr, ptr %34, align 8, !tbaa !10
  %36 = getelementptr inbounds [16 x i32], ptr %35, i64 %28
  br i1 %17, label %63, label %37

37:                                               ; preds = %29
  %38 = load ptr, ptr %23, align 8, !tbaa !10
  %39 = load ptr, ptr %27, align 8, !tbaa !10
  %40 = getelementptr inbounds i8, ptr %39, i64 %30
  br label %41

41:                                               ; preds = %41, %37
  %42 = phi ptr [ %57, %41 ], [ %40, %37 ]
  %43 = phi i32 [ %61, %41 ], [ %8, %37 ]
  %44 = phi ptr [ %58, %41 ], [ %38, %37 ]
  %45 = phi i32 [ %60, %41 ], [ 0, %37 ]
  %46 = load i8, ptr %42, align 1, !tbaa !7
  %47 = zext i8 %46 to i32
  %48 = zext i32 %45 to i64
  %49 = getelementptr inbounds i32, ptr %36, i64 %48
  %50 = load i32, ptr %49, align 4, !tbaa !41
  %51 = add nsw i32 %50, %47
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i8, ptr %33, i64 %52
  %54 = load i8, ptr %53, align 1, !tbaa !7
  %55 = load i8, ptr %44, align 1, !tbaa !7
  %56 = add i8 %55, %54
  store i8 %56, ptr %44, align 1, !tbaa !7
  %57 = getelementptr inbounds i8, ptr %42, i64 %18
  %58 = getelementptr inbounds i8, ptr %44, i64 1
  %59 = add nuw nsw i32 %45, 1
  %60 = and i32 %59, 15
  %61 = add i32 %43, -1
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %41, !llvm.loop !572

63:                                               ; preds = %41, %29
  %64 = add nuw nsw i64 %30, 1
  %65 = icmp eq i64 %64, %20
  br i1 %65, label %66, label %29, !llvm.loop !573

66:                                               ; preds = %63, %21
  %67 = add nsw i32 %25, 1
  %68 = and i32 %67, 15
  store i32 %68, ptr %14, align 4, !tbaa !551
  %69 = add nuw nsw i64 %22, 1
  %70 = icmp eq i64 %69, %19
  br i1 %70, label %71, label %21, !llvm.loop !574

71:                                               ; preds = %66, %4
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @quantize_fs_dither(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, i32 noundef %3) #6 {
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 83
  %6 = load ptr, ptr %5, align 8, !tbaa !369
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 28
  %8 = load i32, ptr %7, align 8, !tbaa !199
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  %10 = load i32, ptr %9, align 8, !tbaa !202
  %11 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 61
  %12 = load ptr, ptr %11, align 8, !tbaa !203
  %13 = icmp sgt i32 %3, 0
  br i1 %13, label %14, label %119

14:                                               ; preds = %4
  %15 = zext i32 %10 to i64
  %16 = icmp sgt i32 %8, 0
  %17 = getelementptr inbounds %struct.my_cquantizer, ptr %6, i64 0, i32 9
  %18 = add i32 %10, -1
  %19 = mul i32 %18, %8
  %20 = zext i32 %19 to i64
  %21 = zext i32 %18 to i64
  %22 = sub nsw i32 0, %8
  %23 = add i32 %10, 1
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %struct.my_cquantizer, ptr %6, i64 0, i32 3
  %26 = getelementptr inbounds %struct.my_cquantizer, ptr %6, i64 0, i32 1
  %27 = icmp eq i32 %10, 0
  %28 = zext i32 %3 to i64
  %29 = zext i32 %8 to i64
  br label %30

30:                                               ; preds = %113, %14
  %31 = phi i64 [ 0, %14 ], [ %117, %113 ]
  %32 = getelementptr inbounds ptr, ptr %2, i64 %31
  %33 = load ptr, ptr %32, align 8, !tbaa !10
  tail call void @jzero_far(ptr noundef %33, i64 noundef %15) #32
  br i1 %16, label %34, label %113

34:                                               ; preds = %30
  %35 = getelementptr inbounds ptr, ptr %1, i64 %31
  br label %36

36:                                               ; preds = %107, %34
  %37 = phi i64 [ 0, %34 ], [ %111, %107 ]
  %38 = load ptr, ptr %35, align 8, !tbaa !10
  %39 = getelementptr inbounds i8, ptr %38, i64 %37
  %40 = load ptr, ptr %32, align 8, !tbaa !10
  %41 = load i32, ptr %17, align 8, !tbaa !557
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %49, label %43

43:                                               ; preds = %36
  %44 = getelementptr inbounds i8, ptr %39, i64 %20
  %45 = getelementptr inbounds i8, ptr %40, i64 %21
  %46 = getelementptr inbounds %struct.my_cquantizer, ptr %6, i64 0, i32 8, i64 %37
  %47 = load ptr, ptr %46, align 8, !tbaa !10
  %48 = getelementptr inbounds i16, ptr %47, i64 %24
  br label %52

49:                                               ; preds = %36
  %50 = getelementptr inbounds %struct.my_cquantizer, ptr %6, i64 0, i32 8, i64 %37
  %51 = load ptr, ptr %50, align 8, !tbaa !10
  br label %52

52:                                               ; preds = %49, %43
  %53 = phi ptr [ %45, %43 ], [ %40, %49 ]
  %54 = phi ptr [ %44, %43 ], [ %39, %49 ]
  %55 = phi ptr [ %48, %43 ], [ %51, %49 ]
  %56 = phi i64 [ -1, %43 ], [ 1, %49 ]
  %57 = phi i32 [ %22, %43 ], [ %8, %49 ]
  %58 = load ptr, ptr %25, align 8, !tbaa !559
  %59 = getelementptr inbounds ptr, ptr %58, i64 %37
  %60 = load ptr, ptr %59, align 8, !tbaa !10
  %61 = load ptr, ptr %26, align 8, !tbaa !547
  %62 = getelementptr inbounds ptr, ptr %61, i64 %37
  %63 = load ptr, ptr %62, align 8, !tbaa !10
  br i1 %27, label %107, label %64

64:                                               ; preds = %52
  %65 = sext i32 %57 to i64
  br label %66

66:                                               ; preds = %66, %64
  %67 = phi i32 [ 0, %64 ], [ %102, %66 ]
  %68 = phi i32 [ 0, %64 ], [ %96, %66 ]
  %69 = phi i32 [ %10, %64 ], [ %105, %66 ]
  %70 = phi i32 [ 0, %64 ], [ %101, %66 ]
  %71 = phi ptr [ %55, %64 ], [ %74, %66 ]
  %72 = phi ptr [ %54, %64 ], [ %103, %66 ]
  %73 = phi ptr [ %53, %64 ], [ %104, %66 ]
  %74 = getelementptr inbounds i16, ptr %71, i64 %56
  %75 = load i16, ptr %74, align 2, !tbaa !12
  %76 = sext i16 %75 to i32
  %77 = add nsw i32 %67, 8
  %78 = add nsw i32 %77, %76
  %79 = ashr i32 %78, 4
  %80 = load i8, ptr %72, align 1, !tbaa !7
  %81 = zext i8 %80 to i32
  %82 = add nsw i32 %79, %81
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds i8, ptr %12, i64 %83
  %85 = load i8, ptr %84, align 1, !tbaa !7
  %86 = zext i8 %85 to i32
  %87 = zext i8 %85 to i64
  %88 = getelementptr inbounds i8, ptr %60, i64 %87
  %89 = load i8, ptr %88, align 1, !tbaa !7
  %90 = load i8, ptr %73, align 1, !tbaa !7
  %91 = add i8 %90, %89
  store i8 %91, ptr %73, align 1, !tbaa !7
  %92 = zext i8 %89 to i64
  %93 = getelementptr inbounds i8, ptr %63, i64 %92
  %94 = load i8, ptr %93, align 1, !tbaa !7
  %95 = zext i8 %94 to i32
  %96 = sub nsw i32 %86, %95
  %97 = mul nsw i32 %96, 3
  %98 = add nsw i32 %97, %70
  %99 = trunc i32 %98 to i16
  store i16 %99, ptr %71, align 2, !tbaa !12
  %100 = mul nsw i32 %96, 5
  %101 = add nsw i32 %100, %68
  %102 = mul nsw i32 %96, 7
  %103 = getelementptr inbounds i8, ptr %72, i64 %65
  %104 = getelementptr inbounds i8, ptr %73, i64 %56
  %105 = add i32 %69, -1
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %66, !llvm.loop !575

107:                                              ; preds = %66, %52
  %108 = phi ptr [ %55, %52 ], [ %74, %66 ]
  %109 = phi i32 [ 0, %52 ], [ %101, %66 ]
  %110 = trunc i32 %109 to i16
  store i16 %110, ptr %108, align 2, !tbaa !12
  %111 = add nuw nsw i64 %37, 1
  %112 = icmp eq i64 %111, %29
  br i1 %112, label %113, label %36, !llvm.loop !576

113:                                              ; preds = %107, %30
  %114 = load i32, ptr %17, align 8, !tbaa !557
  %115 = icmp eq i32 %114, 0
  %116 = zext i1 %115 to i32
  store i32 %116, ptr %17, align 8, !tbaa !557
  %117 = add nuw nsw i64 %31, 1
  %118 = icmp eq i64 %117, %28
  br i1 %118, label %119, label %30, !llvm.loop !577

119:                                              ; preds = %113, %4
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @jinit_2pass_quantizer(ptr noundef %0) #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !50
  %4 = load ptr, ptr %3, align 8, !tbaa !65
  %5 = tail call ptr %4(ptr noundef %0, i32 noundef 1, i64 noundef 88) #32
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 83
  store ptr %5, ptr %6, align 8, !tbaa !369
  store ptr @start_pass_2_quant, ptr %5, align 8, !tbaa !578
  %7 = getelementptr inbounds %struct.jpeg_color_quantizer, ptr %5, i64 0, i32 3
  store ptr @new_color_map_2_quant, ptr %7, align 8, !tbaa !580
  %8 = getelementptr inbounds %struct.my_cquantizer.231, ptr %5, i64 0, i32 5
  store ptr null, ptr %8, align 8, !tbaa !581
  %9 = getelementptr inbounds %struct.my_cquantizer.231, ptr %5, i64 0, i32 7
  store ptr null, ptr %9, align 8, !tbaa !582
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 28
  %11 = load i32, ptr %10, align 8, !tbaa !199
  %12 = icmp eq i32 %11, 3
  br i1 %12, label %17, label %13

13:                                               ; preds = %1
  %14 = load ptr, ptr %0, align 8, !tbaa !16
  %15 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %14, i64 0, i32 5
  store i32 46, ptr %15, align 8, !tbaa !25
  %16 = load ptr, ptr %14, align 8, !tbaa !26
  tail call void %16(ptr noundef nonnull %0) #32
  br label %17

17:                                               ; preds = %13, %1
  %18 = load ptr, ptr %2, align 8, !tbaa !50
  %19 = load ptr, ptr %18, align 8, !tbaa !65
  %20 = tail call ptr %19(ptr noundef nonnull %0, i32 noundef 1, i64 noundef 256) #32
  %21 = getelementptr inbounds %struct.my_cquantizer.231, ptr %5, i64 0, i32 3
  store ptr %20, ptr %21, align 8, !tbaa !583
  br label %22

22:                                               ; preds = %22, %17
  %23 = phi i64 [ 0, %17 ], [ %30, %22 ]
  %24 = load ptr, ptr %2, align 8, !tbaa !50
  %25 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %24, i64 0, i32 1
  %26 = load ptr, ptr %25, align 8, !tbaa !143
  %27 = tail call ptr %26(ptr noundef nonnull %0, i32 noundef 1, i64 noundef 4096) #32
  %28 = load ptr, ptr %21, align 8, !tbaa !583
  %29 = getelementptr inbounds ptr, ptr %28, i64 %23
  store ptr %27, ptr %29, align 8, !tbaa !10
  %30 = add nuw nsw i64 %23, 1
  %31 = icmp eq i64 %30, 32
  br i1 %31, label %32, label %22, !llvm.loop !584

32:                                               ; preds = %22
  %33 = getelementptr inbounds %struct.my_cquantizer.231, ptr %5, i64 0, i32 4
  store i32 1, ptr %33, align 8, !tbaa !585
  %34 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 25
  %35 = load i32, ptr %34, align 4, !tbaa !368
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %56, label %37

37:                                               ; preds = %32
  %38 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 22
  %39 = load i32, ptr %38, align 8, !tbaa !42
  %40 = icmp slt i32 %39, 8
  br i1 %40, label %43, label %41

41:                                               ; preds = %37
  %42 = icmp ugt i32 %39, 256
  br i1 %42, label %43, label %49

43:                                               ; preds = %41, %37
  %44 = phi <2 x i32> [ <i32 55, i32 8>, %37 ], [ <i32 56, i32 256>, %41 ]
  %45 = load ptr, ptr %0, align 8, !tbaa !16
  %46 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %45, i64 0, i32 5
  store <2 x i32> %44, ptr %46, align 8, !tbaa !7
  %47 = load ptr, ptr %0, align 8, !tbaa !16
  %48 = load ptr, ptr %47, align 8, !tbaa !26
  tail call void %48(ptr noundef nonnull %0) #32
  br label %49

49:                                               ; preds = %43, %41
  %50 = load ptr, ptr %2, align 8, !tbaa !50
  %51 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %50, i64 0, i32 2
  %52 = load ptr, ptr %51, align 8, !tbaa !311
  %53 = tail call ptr %52(ptr noundef nonnull %0, i32 noundef 1, i32 noundef %39, i32 noundef 3) #32
  %54 = getelementptr inbounds %struct.my_cquantizer.231, ptr %5, i64 0, i32 1
  store ptr %53, ptr %54, align 8, !tbaa !586
  %55 = getelementptr inbounds %struct.my_cquantizer.231, ptr %5, i64 0, i32 2
  store i32 %39, ptr %55, align 8, !tbaa !587
  br label %58

56:                                               ; preds = %32
  %57 = getelementptr inbounds %struct.my_cquantizer.231, ptr %5, i64 0, i32 1
  store ptr null, ptr %57, align 8, !tbaa !586
  br label %58

58:                                               ; preds = %56, %49
  %59 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 20
  %60 = load i32, ptr %59, align 8, !tbaa !45
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %72, label %62

62:                                               ; preds = %58
  store i32 2, ptr %59, align 8, !tbaa !45
  %63 = load ptr, ptr %2, align 8, !tbaa !50
  %64 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %63, i64 0, i32 1
  %65 = load ptr, ptr %64, align 8, !tbaa !143
  %66 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  %67 = load i32, ptr %66, align 8, !tbaa !202
  %68 = add i32 %67, 2
  %69 = zext i32 %68 to i64
  %70 = mul nuw nsw i64 %69, 6
  %71 = tail call ptr %65(ptr noundef nonnull %0, i32 noundef 1, i64 noundef %70) #32
  store ptr %71, ptr %8, align 8, !tbaa !581
  tail call fastcc void @init_error_limit(ptr noundef nonnull %0) #33
  br label %72

72:                                               ; preds = %62, %58
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @start_pass_2_quant(ptr noundef %0, i32 noundef %1) #6 {
  %3 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 83
  %4 = load ptr, ptr %3, align 8, !tbaa !369
  %5 = getelementptr inbounds %struct.my_cquantizer.231, ptr %4, i64 0, i32 3
  %6 = load ptr, ptr %5, align 8, !tbaa !583
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 20
  %8 = load i32, ptr %7, align 8, !tbaa !45
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %2
  %11 = icmp eq i32 %1, 0
  br i1 %11, label %18, label %14

12:                                               ; preds = %2
  store i32 2, ptr %7, align 8, !tbaa !45
  %13 = icmp eq i32 %1, 0
  br i1 %13, label %18, label %14

14:                                               ; preds = %12, %10
  %15 = getelementptr inbounds %struct.jpeg_color_quantizer, ptr %4, i64 0, i32 1
  store ptr @prescan_quantize, ptr %15, align 8, !tbaa !588
  %16 = getelementptr inbounds %struct.jpeg_color_quantizer, ptr %4, i64 0, i32 2
  store ptr @finish_pass1, ptr %16, align 8, !tbaa !589
  %17 = getelementptr inbounds %struct.my_cquantizer.231, ptr %4, i64 0, i32 4
  store i32 1, ptr %17, align 8, !tbaa !585
  br label %59

18:                                               ; preds = %12, %10
  %19 = phi ptr [ @pass2_fs_dither, %12 ], [ @pass2_no_dither, %10 ]
  %20 = getelementptr inbounds %struct.jpeg_color_quantizer, ptr %4, i64 0, i32 1
  store ptr %19, ptr %20, align 8
  %21 = getelementptr inbounds %struct.jpeg_color_quantizer, ptr %4, i64 0, i32 2
  store ptr @finish_pass2, ptr %21, align 8, !tbaa !589
  %22 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 31
  %23 = load i32, ptr %22, align 4, !tbaa !549
  %24 = icmp slt i32 %23, 1
  br i1 %24, label %27, label %25

25:                                               ; preds = %18
  %26 = icmp ugt i32 %23, 256
  br i1 %26, label %27, label %33

27:                                               ; preds = %25, %18
  %28 = phi <2 x i32> [ <i32 55, i32 1>, %18 ], [ <i32 56, i32 256>, %25 ]
  %29 = load ptr, ptr %0, align 8, !tbaa !16
  %30 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %29, i64 0, i32 5
  store <2 x i32> %28, ptr %30, align 8, !tbaa !7
  %31 = load ptr, ptr %0, align 8, !tbaa !16
  %32 = load ptr, ptr %31, align 8, !tbaa !26
  tail call void %32(ptr noundef nonnull %0) #32
  br label %33

33:                                               ; preds = %27, %25
  %34 = load i32, ptr %7, align 8, !tbaa !45
  %35 = icmp eq i32 %34, 2
  br i1 %35, label %36, label %59

36:                                               ; preds = %33
  %37 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  %38 = load i32, ptr %37, align 8, !tbaa !202
  %39 = add i32 %38, 2
  %40 = zext i32 %39 to i64
  %41 = mul nuw nsw i64 %40, 6
  %42 = getelementptr inbounds %struct.my_cquantizer.231, ptr %4, i64 0, i32 5
  %43 = load ptr, ptr %42, align 8, !tbaa !581
  %44 = icmp eq ptr %43, null
  br i1 %44, label %45, label %51

45:                                               ; preds = %36
  %46 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  %47 = load ptr, ptr %46, align 8, !tbaa !50
  %48 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %47, i64 0, i32 1
  %49 = load ptr, ptr %48, align 8, !tbaa !143
  %50 = tail call ptr %49(ptr noundef nonnull %0, i32 noundef 1, i64 noundef %41) #32
  store ptr %50, ptr %42, align 8, !tbaa !581
  br label %51

51:                                               ; preds = %45, %36
  %52 = phi ptr [ %50, %45 ], [ %43, %36 ]
  tail call void @jzero_far(ptr noundef %52, i64 noundef %41) #32
  %53 = getelementptr inbounds %struct.my_cquantizer.231, ptr %4, i64 0, i32 7
  %54 = load ptr, ptr %53, align 8, !tbaa !582
  %55 = icmp eq ptr %54, null
  br i1 %55, label %56, label %57

56:                                               ; preds = %51
  tail call fastcc void @init_error_limit(ptr noundef nonnull %0) #33
  br label %57

57:                                               ; preds = %56, %51
  %58 = getelementptr inbounds %struct.my_cquantizer.231, ptr %4, i64 0, i32 6
  store i32 0, ptr %58, align 8, !tbaa !590
  br label %59

59:                                               ; preds = %57, %33, %14
  %60 = getelementptr inbounds %struct.my_cquantizer.231, ptr %4, i64 0, i32 4
  %61 = load i32, ptr %60, align 8, !tbaa !585
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %70, label %63

63:                                               ; preds = %63, %59
  %64 = phi i64 [ %67, %63 ], [ 0, %59 ]
  %65 = getelementptr inbounds ptr, ptr %6, i64 %64
  %66 = load ptr, ptr %65, align 8, !tbaa !10
  tail call void @jzero_far(ptr noundef %66, i64 noundef 4096) #32
  %67 = add nuw nsw i64 %64, 1
  %68 = icmp eq i64 %67, 32
  br i1 %68, label %69, label %63, !llvm.loop !591

69:                                               ; preds = %63
  store i32 0, ptr %60, align 8, !tbaa !585
  br label %70

70:                                               ; preds = %69, %59
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(write, argmem: readwrite, inaccessiblemem: none) uwtable
define internal void @new_color_map_2_quant(ptr nocapture noundef readonly %0) #11 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 83
  %3 = load ptr, ptr %2, align 8, !tbaa !369
  %4 = getelementptr inbounds %struct.my_cquantizer.231, ptr %3, i64 0, i32 4
  store i32 1, ptr %4, align 8, !tbaa !585
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @init_error_limit(ptr noundef %0) unnamed_addr #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 83
  %3 = load ptr, ptr %2, align 8, !tbaa !369
  %4 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8, !tbaa !50
  %6 = load ptr, ptr %5, align 8, !tbaa !65
  %7 = tail call ptr %6(ptr noundef %0, i32 noundef 1, i64 noundef 2044) #32
  %8 = getelementptr inbounds i32, ptr %7, i64 255
  %9 = getelementptr inbounds %struct.my_cquantizer.231, ptr %3, i64 0, i32 7
  store ptr %8, ptr %9, align 8, !tbaa !582
  br label %10

10:                                               ; preds = %10, %1
  %11 = phi i64 [ 0, %1 ], [ %17, %10 ]
  %12 = trunc i64 %11 to i32
  %13 = getelementptr inbounds i32, ptr %8, i64 %11
  store i32 %12, ptr %13, align 4, !tbaa !41
  %14 = sub nsw i32 0, %12
  %15 = sub nsw i64 0, %11
  %16 = getelementptr inbounds i32, ptr %8, i64 %15
  store i32 %14, ptr %16, align 4, !tbaa !41
  %17 = add nuw nsw i64 %11, 1
  %18 = icmp eq i64 %17, 16
  br i1 %18, label %19, label %10, !llvm.loop !592

19:                                               ; preds = %19, %10
  %20 = phi i64 [ %26, %19 ], [ 16, %10 ]
  %21 = phi i32 [ %30, %19 ], [ 16, %10 ]
  %22 = getelementptr inbounds i32, ptr %8, i64 %20
  store i32 %21, ptr %22, align 4, !tbaa !41
  %23 = sub nsw i32 0, %21
  %24 = sub nsw i64 0, %20
  %25 = getelementptr inbounds i32, ptr %8, i64 %24
  store i32 %23, ptr %25, align 4, !tbaa !41
  %26 = add nuw nsw i64 %20, 1
  %27 = trunc i64 %26 to i32
  %28 = and i32 %27, 1
  %29 = xor i32 %28, 1
  %30 = add nuw nsw i32 %29, %21
  %31 = icmp eq i64 %26, 48
  br i1 %31, label %32, label %19, !llvm.loop !593

32:                                               ; preds = %32, %19
  %33 = phi i64 [ %37, %32 ], [ 48, %19 ]
  %34 = getelementptr inbounds i32, ptr %8, i64 %33
  store i32 32, ptr %34, align 4, !tbaa !41
  %35 = sub nsw i64 0, %33
  %36 = getelementptr inbounds i32, ptr %8, i64 %35
  store i32 -32, ptr %36, align 4, !tbaa !41
  %37 = add nuw nsw i64 %33, 1
  %38 = icmp eq i64 %37, 256
  br i1 %38, label %39, label %32, !llvm.loop !594

39:                                               ; preds = %32
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @prescan_quantize(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture readnone %2, i32 noundef %3) #15 {
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 83
  %6 = load ptr, ptr %5, align 8, !tbaa !369
  %7 = getelementptr inbounds %struct.my_cquantizer.231, ptr %6, i64 0, i32 3
  %8 = load ptr, ptr %7, align 8, !tbaa !583
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  %10 = load i32, ptr %9, align 8, !tbaa !202
  %11 = icmp sgt i32 %3, 0
  br i1 %11, label %12, label %47

12:                                               ; preds = %4
  %13 = icmp eq i32 %10, 0
  %14 = zext i32 %3 to i64
  br label %15

15:                                               ; preds = %44, %12
  %16 = phi i64 [ 0, %12 ], [ %45, %44 ]
  br i1 %13, label %44, label %17

17:                                               ; preds = %15
  %18 = getelementptr inbounds ptr, ptr %1, i64 %16
  %19 = load ptr, ptr %18, align 8, !tbaa !10
  br label %20

20:                                               ; preds = %20, %17
  %21 = phi ptr [ %41, %20 ], [ %19, %17 ]
  %22 = phi i32 [ %42, %20 ], [ %10, %17 ]
  %23 = load i8, ptr %21, align 1, !tbaa !7
  %24 = lshr i8 %23, 3
  %25 = zext i8 %24 to i64
  %26 = getelementptr inbounds ptr, ptr %8, i64 %25
  %27 = load ptr, ptr %26, align 8, !tbaa !10
  %28 = getelementptr inbounds i8, ptr %21, i64 1
  %29 = load i8, ptr %28, align 1, !tbaa !7
  %30 = lshr i8 %29, 2
  %31 = zext i8 %30 to i64
  %32 = getelementptr inbounds i8, ptr %21, i64 2
  %33 = load i8, ptr %32, align 1, !tbaa !7
  %34 = lshr i8 %33, 3
  %35 = zext i8 %34 to i64
  %36 = getelementptr inbounds [32 x i16], ptr %27, i64 %31, i64 %35
  %37 = load i16, ptr %36, align 2, !tbaa !12
  %38 = add i16 %37, 1
  %39 = icmp eq i16 %38, 0
  %40 = select i1 %39, i16 %37, i16 %38
  store i16 %40, ptr %36, align 2, !tbaa !12
  %41 = getelementptr inbounds i8, ptr %21, i64 3
  %42 = add i32 %22, -1
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %20, !llvm.loop !595

44:                                               ; preds = %20, %15
  %45 = add nuw nsw i64 %16, 1
  %46 = icmp eq i64 %45, %14
  br i1 %46, label %47, label %15, !llvm.loop !596

47:                                               ; preds = %44, %4
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @finish_pass1(ptr noundef %0) #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 83
  %3 = load ptr, ptr %2, align 8, !tbaa !369
  %4 = getelementptr inbounds %struct.my_cquantizer.231, ptr %3, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8, !tbaa !586
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 32
  store ptr %5, ptr %6, align 8, !tbaa !93
  %7 = getelementptr inbounds %struct.my_cquantizer.231, ptr %3, i64 0, i32 2
  %8 = load i32, ptr %7, align 8, !tbaa !587
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  %10 = load ptr, ptr %9, align 8, !tbaa !50
  %11 = load ptr, ptr %10, align 8, !tbaa !65
  %12 = sext i32 %8 to i64
  %13 = mul nsw i64 %12, 40
  %14 = tail call ptr %11(ptr noundef %0, i32 noundef 1, i64 noundef %13) #32
  store <4 x i32> <i32 0, i32 31, i32 0, i32 63>, ptr %14, align 8, !tbaa !41
  %15 = getelementptr inbounds %struct.box, ptr %14, i64 0, i32 4
  store i32 0, ptr %15, align 8, !tbaa !597
  %16 = getelementptr inbounds %struct.box, ptr %14, i64 0, i32 5
  store i32 31, ptr %16, align 4, !tbaa !599
  tail call fastcc void @update_box(ptr noundef %0, ptr noundef nonnull %14) #33
  %17 = icmp sgt i32 %8, 1
  br i1 %17, label %18, label %111

18:                                               ; preds = %1
  %19 = zext i32 %8 to i64
  br label %20

20:                                               ; preds = %103, %18
  %21 = phi i64 [ 1, %18 ], [ %104, %103 ]
  %22 = shl nuw nsw i64 %21, 1
  %23 = icmp ugt i64 %22, %19
  br i1 %23, label %44, label %24

24:                                               ; preds = %38, %20
  %25 = phi i64 [ %41, %38 ], [ 0, %20 ]
  %26 = phi ptr [ %40, %38 ], [ null, %20 ]
  %27 = phi i64 [ %39, %38 ], [ 0, %20 ]
  %28 = phi ptr [ %42, %38 ], [ %14, %20 ]
  %29 = getelementptr inbounds %struct.box, ptr %28, i64 0, i32 7
  %30 = load i64, ptr %29, align 8, !tbaa !600
  %31 = icmp sgt i64 %30, %27
  br i1 %31, label %32, label %38

32:                                               ; preds = %24
  %33 = getelementptr inbounds %struct.box, ptr %28, i64 0, i32 6
  %34 = load i64, ptr %33, align 8, !tbaa !601
  %35 = icmp sgt i64 %34, 0
  %36 = select i1 %35, i64 %30, i64 %27
  %37 = select i1 %35, ptr %28, ptr %26
  br label %38

38:                                               ; preds = %32, %24
  %39 = phi i64 [ %27, %24 ], [ %36, %32 ]
  %40 = phi ptr [ %26, %24 ], [ %37, %32 ]
  %41 = add nuw nsw i64 %25, 1
  %42 = getelementptr inbounds %struct.box, ptr %28, i64 1
  %43 = icmp eq i64 %21, %41
  br i1 %43, label %57, label %24, !llvm.loop !602

44:                                               ; preds = %44, %20
  %45 = phi i64 [ %54, %44 ], [ 0, %20 ]
  %46 = phi ptr [ %53, %44 ], [ null, %20 ]
  %47 = phi i64 [ %52, %44 ], [ 0, %20 ]
  %48 = phi ptr [ %55, %44 ], [ %14, %20 ]
  %49 = getelementptr inbounds %struct.box, ptr %48, i64 0, i32 6
  %50 = load i64, ptr %49, align 8, !tbaa !601
  %51 = icmp sgt i64 %50, %47
  %52 = tail call i64 @llvm.smax.i64(i64 %50, i64 %47)
  %53 = select i1 %51, ptr %48, ptr %46
  %54 = add nuw nsw i64 %45, 1
  %55 = getelementptr inbounds %struct.box, ptr %48, i64 1
  %56 = icmp eq i64 %21, %54
  br i1 %56, label %57, label %44, !llvm.loop !603

57:                                               ; preds = %44, %38
  %58 = phi ptr [ %53, %44 ], [ %40, %38 ]
  %59 = icmp eq ptr %58, null
  br i1 %59, label %106, label %60

60:                                               ; preds = %57
  %61 = getelementptr inbounds %struct.box, ptr %14, i64 %21
  %62 = getelementptr inbounds %struct.box, ptr %58, i64 0, i32 1
  %63 = getelementptr inbounds %struct.box, ptr %58, i64 0, i32 3
  %64 = getelementptr inbounds %struct.box, ptr %58, i64 0, i32 5
  %65 = load i32, ptr %64, align 4, !tbaa !599
  %66 = getelementptr inbounds %struct.box, ptr %14, i64 %21, i32 5
  store i32 %65, ptr %66, align 4, !tbaa !599
  %67 = getelementptr inbounds %struct.box, ptr %58, i64 0, i32 2
  %68 = load <4 x i32>, ptr %58, align 8, !tbaa !41
  store <4 x i32> %68, ptr %61, align 8, !tbaa !41
  %69 = getelementptr inbounds %struct.box, ptr %58, i64 0, i32 4
  %70 = load i32, ptr %69, align 8, !tbaa !597
  %71 = getelementptr inbounds %struct.box, ptr %14, i64 %21, i32 4
  store i32 %70, ptr %71, align 8, !tbaa !597
  %72 = load i32, ptr %62, align 4, !tbaa !604
  %73 = load i32, ptr %58, align 8, !tbaa !605
  %74 = sub nsw i32 %72, %73
  %75 = shl i32 %74, 4
  %76 = load i32, ptr %63, align 4, !tbaa !606
  %77 = load i32, ptr %67, align 8, !tbaa !607
  %78 = sub nsw i32 %76, %77
  %79 = mul i32 %78, 12
  %80 = load i32, ptr %64, align 4, !tbaa !599
  %81 = load i32, ptr %69, align 8, !tbaa !597
  %82 = sub nsw i32 %80, %81
  %83 = shl i32 %82, 3
  %84 = icmp sle i32 %75, %79
  %85 = zext i1 %84 to i32
  %86 = tail call i32 @llvm.smax.i32(i32 %75, i32 %79)
  %87 = icmp sgt i32 %83, %86
  %88 = select i1 %87, i32 2, i32 %85
  switch i32 %88, label %103 [
    i32 0, label %89
    i32 1, label %92
    i32 2, label %96
  ]

89:                                               ; preds = %60
  %90 = add nsw i32 %73, %72
  %91 = sdiv i32 %90, 2
  store i32 %91, ptr %62, align 4, !tbaa !604
  br label %99

92:                                               ; preds = %60
  %93 = getelementptr inbounds %struct.box, ptr %14, i64 %21, i32 2
  %94 = add nsw i32 %77, %76
  %95 = sdiv i32 %94, 2
  store i32 %95, ptr %63, align 4, !tbaa !606
  br label %99

96:                                               ; preds = %60
  %97 = add nsw i32 %81, %80
  %98 = sdiv i32 %97, 2
  store i32 %98, ptr %64, align 4, !tbaa !599
  br label %99

99:                                               ; preds = %96, %92, %89
  %100 = phi i32 [ %98, %96 ], [ %95, %92 ], [ %91, %89 ]
  %101 = phi ptr [ %71, %96 ], [ %93, %92 ], [ %61, %89 ]
  %102 = add nsw i32 %100, 1
  store i32 %102, ptr %101, align 8, !tbaa !41
  br label %103

103:                                              ; preds = %99, %60
  tail call fastcc void @update_box(ptr noundef %0, ptr noundef nonnull %58) #33
  tail call fastcc void @update_box(ptr noundef %0, ptr noundef nonnull %61) #33
  %104 = add nuw nsw i64 %21, 1
  %105 = icmp eq i64 %104, %19
  br i1 %105, label %108, label %20, !llvm.loop !608

106:                                              ; preds = %57
  %.lcssa = phi i64 [ %21, %57 ]
  %107 = trunc i64 %.lcssa to i32
  br label %108

108:                                              ; preds = %106, %103
  %109 = phi i32 [ %107, %106 ], [ %8, %103 ]
  %110 = icmp sgt i32 %109, 0
  br i1 %110, label %111, label %241

111:                                              ; preds = %108, %1
  %112 = phi i32 [ %109, %108 ], [ 1, %1 ]
  %113 = zext i32 %112 to i64
  br label %114

114:                                              ; preds = %213, %111
  %115 = phi i64 [ 0, %111 ], [ %239, %213 ]
  %116 = getelementptr inbounds %struct.box, ptr %14, i64 %115
  %117 = load ptr, ptr %2, align 8, !tbaa !369
  %118 = getelementptr inbounds %struct.my_cquantizer.231, ptr %117, i64 0, i32 3
  %119 = load ptr, ptr %118, align 8, !tbaa !583
  %120 = load i32, ptr %116, align 8, !tbaa !605
  %121 = getelementptr inbounds %struct.box, ptr %14, i64 %115, i32 1
  %122 = load i32, ptr %121, align 4, !tbaa !604
  %123 = icmp sgt i32 %120, %122
  br i1 %123, label %213, label %124

124:                                              ; preds = %114
  %125 = getelementptr inbounds %struct.box, ptr %14, i64 %115, i32 5
  %126 = load i32, ptr %125, align 4, !tbaa !599
  %127 = getelementptr inbounds %struct.box, ptr %14, i64 %115, i32 4
  %128 = load i32, ptr %127, align 8, !tbaa !597
  %129 = getelementptr inbounds %struct.box, ptr %14, i64 %115, i32 3
  %130 = load i32, ptr %129, align 4, !tbaa !606
  %131 = getelementptr inbounds %struct.box, ptr %14, i64 %115, i32 2
  %132 = load i32, ptr %131, align 8, !tbaa !607
  %133 = icmp sgt i32 %132, %130
  %134 = sext i32 %128 to i64
  %135 = icmp sgt i32 %128, %126
  %136 = add i32 %126, 1
  %137 = sext i32 %132 to i64
  %138 = add i32 %130, 1
  %139 = sext i32 %120 to i64
  %140 = add i32 %122, 1
  br label %141

141:                                              ; preds = %205, %124
  %142 = phi i64 [ %139, %124 ], [ %210, %205 ]
  %143 = phi i64 [ 0, %124 ], [ %209, %205 ]
  %144 = phi i64 [ 0, %124 ], [ %208, %205 ]
  %145 = phi i64 [ 0, %124 ], [ %207, %205 ]
  %146 = phi i64 [ 0, %124 ], [ %206, %205 ]
  br i1 %133, label %205, label %147

147:                                              ; preds = %141
  %148 = getelementptr inbounds ptr, ptr %119, i64 %142
  %149 = load ptr, ptr %148, align 8, !tbaa !10
  %150 = trunc i64 %142 to i32
  %151 = shl i32 %150, 3
  %152 = or i32 %151, 4
  %153 = sext i32 %152 to i64
  br label %154

154:                                              ; preds = %197, %147
  %155 = phi i64 [ %137, %147 ], [ %202, %197 ]
  %156 = phi i64 [ %143, %147 ], [ %201, %197 ]
  %157 = phi i64 [ %144, %147 ], [ %200, %197 ]
  %158 = phi i64 [ %145, %147 ], [ %199, %197 ]
  %159 = phi i64 [ %146, %147 ], [ %198, %197 ]
  br i1 %135, label %197, label %160

160:                                              ; preds = %154
  %161 = getelementptr inbounds [32 x i16], ptr %149, i64 %155, i64 %134
  %162 = trunc i64 %155 to i32
  %163 = shl i32 %162, 2
  %164 = or i32 %163, 2
  %165 = sext i32 %164 to i64
  br label %166

166:                                              ; preds = %189, %160
  %167 = phi i64 [ %134, %160 ], [ %194, %189 ]
  %168 = phi i64 [ %156, %160 ], [ %193, %189 ]
  %169 = phi i64 [ %157, %160 ], [ %192, %189 ]
  %170 = phi i64 [ %158, %160 ], [ %191, %189 ]
  %171 = phi i64 [ %159, %160 ], [ %190, %189 ]
  %172 = phi ptr [ %161, %160 ], [ %173, %189 ]
  %173 = getelementptr inbounds i16, ptr %172, i64 1
  %174 = load i16, ptr %172, align 2, !tbaa !12
  %175 = icmp eq i16 %174, 0
  br i1 %175, label %189, label %176

176:                                              ; preds = %166
  %177 = zext i16 %174 to i64
  %178 = add nsw i64 %171, %177
  %179 = mul nsw i64 %177, %153
  %180 = add nsw i64 %179, %170
  %181 = mul nsw i64 %177, %165
  %182 = add nsw i64 %181, %169
  %183 = trunc i64 %167 to i32
  %184 = shl i32 %183, 3
  %185 = or i32 %184, 4
  %186 = sext i32 %185 to i64
  %187 = mul nsw i64 %177, %186
  %188 = add nsw i64 %187, %168
  br label %189

189:                                              ; preds = %176, %166
  %190 = phi i64 [ %178, %176 ], [ %171, %166 ]
  %191 = phi i64 [ %180, %176 ], [ %170, %166 ]
  %192 = phi i64 [ %182, %176 ], [ %169, %166 ]
  %193 = phi i64 [ %188, %176 ], [ %168, %166 ]
  %194 = add nsw i64 %167, 1
  %195 = trunc i64 %194 to i32
  %196 = icmp eq i32 %136, %195
  br i1 %196, label %197, label %166, !llvm.loop !609

197:                                              ; preds = %189, %154
  %198 = phi i64 [ %159, %154 ], [ %190, %189 ]
  %199 = phi i64 [ %158, %154 ], [ %191, %189 ]
  %200 = phi i64 [ %157, %154 ], [ %192, %189 ]
  %201 = phi i64 [ %156, %154 ], [ %193, %189 ]
  %202 = add nsw i64 %155, 1
  %203 = trunc i64 %202 to i32
  %204 = icmp eq i32 %138, %203
  br i1 %204, label %205, label %154, !llvm.loop !610

205:                                              ; preds = %197, %141
  %206 = phi i64 [ %146, %141 ], [ %198, %197 ]
  %207 = phi i64 [ %145, %141 ], [ %199, %197 ]
  %208 = phi i64 [ %144, %141 ], [ %200, %197 ]
  %209 = phi i64 [ %143, %141 ], [ %201, %197 ]
  %210 = add nsw i64 %142, 1
  %211 = trunc i64 %210 to i32
  %212 = icmp eq i32 %140, %211
  br i1 %212, label %213, label %141, !llvm.loop !611

213:                                              ; preds = %205, %114
  %214 = phi i64 [ 0, %114 ], [ %206, %205 ]
  %215 = phi i64 [ 0, %114 ], [ %207, %205 ]
  %216 = phi i64 [ 0, %114 ], [ %208, %205 ]
  %217 = phi i64 [ 0, %114 ], [ %209, %205 ]
  %218 = ashr i64 %214, 1
  %219 = add nsw i64 %215, %218
  %220 = sdiv i64 %219, %214
  %221 = trunc i64 %220 to i8
  %222 = load ptr, ptr %6, align 8, !tbaa !93
  %223 = load ptr, ptr %222, align 8, !tbaa !10
  %224 = getelementptr inbounds i8, ptr %223, i64 %115
  store i8 %221, ptr %224, align 1, !tbaa !7
  %225 = add nsw i64 %216, %218
  %226 = sdiv i64 %225, %214
  %227 = trunc i64 %226 to i8
  %228 = load ptr, ptr %6, align 8, !tbaa !93
  %229 = getelementptr inbounds ptr, ptr %228, i64 1
  %230 = load ptr, ptr %229, align 8, !tbaa !10
  %231 = getelementptr inbounds i8, ptr %230, i64 %115
  store i8 %227, ptr %231, align 1, !tbaa !7
  %232 = add nsw i64 %217, %218
  %233 = sdiv i64 %232, %214
  %234 = trunc i64 %233 to i8
  %235 = load ptr, ptr %6, align 8, !tbaa !93
  %236 = getelementptr inbounds ptr, ptr %235, i64 2
  %237 = load ptr, ptr %236, align 8, !tbaa !10
  %238 = getelementptr inbounds i8, ptr %237, i64 %115
  store i8 %234, ptr %238, align 1, !tbaa !7
  %239 = add nuw nsw i64 %115, 1
  %240 = icmp eq i64 %239, %113
  br i1 %240, label %241, label %114, !llvm.loop !612

241:                                              ; preds = %213, %108
  %242 = phi i32 [ %109, %108 ], [ %112, %213 ]
  %243 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 31
  store i32 %242, ptr %243, align 4, !tbaa !549
  %244 = load ptr, ptr %0, align 8, !tbaa !16
  %245 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %244, i64 0, i32 5
  store i32 95, ptr %245, align 8, !tbaa !25
  %246 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %244, i64 0, i32 6
  store i32 %242, ptr %246, align 4, !tbaa !7
  %247 = load ptr, ptr %0, align 8, !tbaa !16
  %248 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %247, i64 0, i32 1
  %249 = load ptr, ptr %248, align 8, !tbaa !85
  tail call void %249(ptr noundef nonnull %0, i32 noundef 1) #32
  %250 = getelementptr inbounds %struct.my_cquantizer.231, ptr %3, i64 0, i32 4
  store i32 1, ptr %250, align 8, !tbaa !585
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @pass2_fs_dither(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, i32 noundef %3) #21 {
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 83
  %6 = load ptr, ptr %5, align 8, !tbaa !369
  %7 = getelementptr inbounds %struct.my_cquantizer.231, ptr %6, i64 0, i32 3
  %8 = load ptr, ptr %7, align 8, !tbaa !583
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  %10 = load i32, ptr %9, align 8, !tbaa !202
  %11 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 61
  %12 = load ptr, ptr %11, align 8, !tbaa !203
  %13 = getelementptr inbounds %struct.my_cquantizer.231, ptr %6, i64 0, i32 7
  %14 = load ptr, ptr %13, align 8, !tbaa !582
  %15 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 32
  %16 = load ptr, ptr %15, align 8, !tbaa !93
  %17 = load ptr, ptr %16, align 8, !tbaa !10
  %18 = getelementptr inbounds ptr, ptr %16, i64 1
  %19 = load ptr, ptr %18, align 8, !tbaa !10
  %20 = getelementptr inbounds ptr, ptr %16, i64 2
  %21 = load ptr, ptr %20, align 8, !tbaa !10
  %22 = icmp sgt i32 %3, 0
  br i1 %22, label %23, label %194

23:                                               ; preds = %4
  %24 = getelementptr inbounds %struct.my_cquantizer.231, ptr %6, i64 0, i32 6
  %25 = add i32 %10, -1
  %26 = mul i32 %25, 3
  %27 = zext i32 %26 to i64
  %28 = zext i32 %25 to i64
  %29 = getelementptr inbounds %struct.my_cquantizer.231, ptr %6, i64 0, i32 5
  %30 = mul i32 %10, 3
  %31 = add i32 %30, 3
  %32 = zext i32 %31 to i64
  %33 = icmp eq i32 %10, 0
  %34 = zext i32 %3 to i64
  br label %35

35:                                               ; preds = %182, %23
  %36 = phi i64 [ 0, %23 ], [ %192, %182 ]
  %37 = getelementptr inbounds ptr, ptr %1, i64 %36
  %38 = load ptr, ptr %37, align 8, !tbaa !10
  %39 = getelementptr inbounds ptr, ptr %2, i64 %36
  %40 = load ptr, ptr %39, align 8, !tbaa !10
  %41 = load i32, ptr %24, align 8, !tbaa !590
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %48, label %43

43:                                               ; preds = %35
  %44 = getelementptr inbounds i8, ptr %38, i64 %27
  %45 = getelementptr inbounds i8, ptr %40, i64 %28
  %46 = load ptr, ptr %29, align 8, !tbaa !581
  %47 = getelementptr inbounds i16, ptr %46, i64 %32
  br label %50

48:                                               ; preds = %35
  %49 = load ptr, ptr %29, align 8, !tbaa !581
  br label %50

50:                                               ; preds = %48, %43
  %51 = phi i32 [ 1, %48 ], [ 0, %43 ]
  %52 = phi ptr [ %38, %48 ], [ %44, %43 ]
  %53 = phi ptr [ %40, %48 ], [ %45, %43 ]
  %54 = phi ptr [ %49, %48 ], [ %47, %43 ]
  %55 = phi i64 [ 1, %48 ], [ -1, %43 ]
  %56 = phi i32 [ 3, %48 ], [ -3, %43 ]
  store i32 %51, ptr %24, align 8, !tbaa !590
  br i1 %33, label %182, label %57

57:                                               ; preds = %50
  %58 = sext i32 %56 to i64
  %59 = add nsw i32 %56, 1
  %60 = sext i32 %59 to i64
  %61 = add nsw i32 %56, 2
  %62 = sext i32 %61 to i64
  br label %63

63:                                               ; preds = %140, %57
  %64 = phi i32 [ 0, %57 ], [ %163, %140 ]
  %65 = phi i32 [ 0, %57 ], [ %170, %140 ]
  %66 = phi i32 [ 0, %57 ], [ %177, %140 ]
  %67 = phi i32 [ 0, %57 ], [ %149, %140 ]
  %68 = phi i32 [ 0, %57 ], [ %153, %140 ]
  %69 = phi i32 [ 0, %57 ], [ %157, %140 ]
  %70 = phi i32 [ 0, %57 ], [ %162, %140 ]
  %71 = phi i32 [ 0, %57 ], [ %169, %140 ]
  %72 = phi i32 [ 0, %57 ], [ %176, %140 ]
  %73 = phi i32 [ %10, %57 ], [ %180, %140 ]
  %74 = phi ptr [ %54, %57 ], [ %77, %140 ]
  %75 = phi ptr [ %53, %57 ], [ %179, %140 ]
  %76 = phi ptr [ %52, %57 ], [ %178, %140 ]
  %77 = getelementptr inbounds i16, ptr %74, i64 %58
  %78 = load i16, ptr %77, align 2, !tbaa !12
  %79 = sext i16 %78 to i32
  %80 = add nsw i32 %64, 8
  %81 = add nsw i32 %80, %79
  %82 = ashr i32 %81, 4
  %83 = getelementptr inbounds i16, ptr %74, i64 %60
  %84 = load i16, ptr %83, align 2, !tbaa !12
  %85 = sext i16 %84 to i32
  %86 = add nsw i32 %65, 8
  %87 = add nsw i32 %86, %85
  %88 = ashr i32 %87, 4
  %89 = getelementptr inbounds i16, ptr %74, i64 %62
  %90 = load i16, ptr %89, align 2, !tbaa !12
  %91 = sext i16 %90 to i32
  %92 = add nsw i32 %66, 8
  %93 = add nsw i32 %92, %91
  %94 = ashr i32 %93, 4
  %95 = sext i32 %82 to i64
  %96 = getelementptr inbounds i32, ptr %14, i64 %95
  %97 = load i32, ptr %96, align 4, !tbaa !41
  %98 = sext i32 %88 to i64
  %99 = getelementptr inbounds i32, ptr %14, i64 %98
  %100 = load i32, ptr %99, align 4, !tbaa !41
  %101 = sext i32 %94 to i64
  %102 = getelementptr inbounds i32, ptr %14, i64 %101
  %103 = load i32, ptr %102, align 4, !tbaa !41
  %104 = load i8, ptr %76, align 1, !tbaa !7
  %105 = zext i8 %104 to i32
  %106 = add nsw i32 %97, %105
  %107 = getelementptr inbounds i8, ptr %76, i64 1
  %108 = load i8, ptr %107, align 1, !tbaa !7
  %109 = zext i8 %108 to i32
  %110 = add nsw i32 %100, %109
  %111 = getelementptr inbounds i8, ptr %76, i64 2
  %112 = load i8, ptr %111, align 1, !tbaa !7
  %113 = zext i8 %112 to i32
  %114 = add nsw i32 %103, %113
  %115 = sext i32 %106 to i64
  %116 = getelementptr inbounds i8, ptr %12, i64 %115
  %117 = load i8, ptr %116, align 1, !tbaa !7
  %118 = zext i8 %117 to i32
  %119 = sext i32 %110 to i64
  %120 = getelementptr inbounds i8, ptr %12, i64 %119
  %121 = load i8, ptr %120, align 1, !tbaa !7
  %122 = zext i8 %121 to i32
  %123 = sext i32 %114 to i64
  %124 = getelementptr inbounds i8, ptr %12, i64 %123
  %125 = load i8, ptr %124, align 1, !tbaa !7
  %126 = zext i8 %125 to i32
  %127 = lshr i32 %118, 3
  %128 = zext i32 %127 to i64
  %129 = getelementptr inbounds ptr, ptr %8, i64 %128
  %130 = load ptr, ptr %129, align 8, !tbaa !10
  %131 = lshr i32 %122, 2
  %132 = zext i32 %131 to i64
  %133 = lshr i32 %126, 3
  %134 = zext i32 %133 to i64
  %135 = getelementptr inbounds [32 x i16], ptr %130, i64 %132, i64 %134
  %136 = load i16, ptr %135, align 2, !tbaa !12
  %137 = icmp eq i16 %136, 0
  br i1 %137, label %138, label %140

138:                                              ; preds = %63
  tail call fastcc void @fill_inverse_cmap(ptr noundef %0, i32 noundef %127, i32 noundef %131, i32 noundef %133) #33
  %139 = load i16, ptr %135, align 2, !tbaa !12
  br label %140

140:                                              ; preds = %138, %63
  %141 = phi i16 [ %139, %138 ], [ %136, %63 ]
  %142 = zext i16 %141 to i32
  %143 = add nsw i32 %142, -1
  %144 = trunc i32 %143 to i8
  store i8 %144, ptr %75, align 1, !tbaa !7
  %145 = sext i32 %143 to i64
  %146 = getelementptr inbounds i8, ptr %17, i64 %145
  %147 = load i8, ptr %146, align 1, !tbaa !7
  %148 = zext i8 %147 to i32
  %149 = sub nsw i32 %118, %148
  %150 = getelementptr inbounds i8, ptr %19, i64 %145
  %151 = load i8, ptr %150, align 1, !tbaa !7
  %152 = zext i8 %151 to i32
  %153 = sub nsw i32 %122, %152
  %154 = getelementptr inbounds i8, ptr %21, i64 %145
  %155 = load i8, ptr %154, align 1, !tbaa !7
  %156 = zext i8 %155 to i32
  %157 = sub nsw i32 %126, %156
  %158 = mul nsw i32 %149, 3
  %159 = add nsw i32 %158, %70
  %160 = trunc i32 %159 to i16
  store i16 %160, ptr %74, align 2, !tbaa !12
  %161 = mul nsw i32 %149, 5
  %162 = add nsw i32 %161, %67
  %163 = mul nsw i32 %149, 7
  %164 = mul nsw i32 %153, 3
  %165 = add nsw i32 %164, %71
  %166 = trunc i32 %165 to i16
  %167 = getelementptr inbounds i16, ptr %74, i64 1
  store i16 %166, ptr %167, align 2, !tbaa !12
  %168 = mul nsw i32 %153, 5
  %169 = add nsw i32 %168, %68
  %170 = mul nsw i32 %153, 7
  %171 = mul nsw i32 %157, 3
  %172 = add nsw i32 %171, %72
  %173 = trunc i32 %172 to i16
  %174 = getelementptr inbounds i16, ptr %74, i64 2
  store i16 %173, ptr %174, align 2, !tbaa !12
  %175 = mul nsw i32 %157, 5
  %176 = add nsw i32 %175, %69
  %177 = mul nsw i32 %157, 7
  %178 = getelementptr inbounds i8, ptr %76, i64 %58
  %179 = getelementptr inbounds i8, ptr %75, i64 %55
  %180 = add i32 %73, -1
  %181 = icmp eq i32 %180, 0
  br i1 %181, label %182, label %63, !llvm.loop !613

182:                                              ; preds = %140, %50
  %183 = phi ptr [ %54, %50 ], [ %77, %140 ]
  %184 = phi i32 [ 0, %50 ], [ %176, %140 ]
  %185 = phi i32 [ 0, %50 ], [ %169, %140 ]
  %186 = phi i32 [ 0, %50 ], [ %162, %140 ]
  %187 = trunc i32 %186 to i16
  store i16 %187, ptr %183, align 2, !tbaa !12
  %188 = trunc i32 %185 to i16
  %189 = getelementptr inbounds i16, ptr %183, i64 1
  store i16 %188, ptr %189, align 2, !tbaa !12
  %190 = trunc i32 %184 to i16
  %191 = getelementptr inbounds i16, ptr %183, i64 2
  store i16 %190, ptr %191, align 2, !tbaa !12
  %192 = add nuw nsw i64 %36, 1
  %193 = icmp eq i64 %192, %34
  br i1 %193, label %194, label %35, !llvm.loop !614

194:                                              ; preds = %182, %4
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @pass2_no_dither(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, i32 noundef %3) #21 {
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 83
  %6 = load ptr, ptr %5, align 8, !tbaa !369
  %7 = getelementptr inbounds %struct.my_cquantizer.231, ptr %6, i64 0, i32 3
  %8 = load ptr, ptr %7, align 8, !tbaa !583
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  %10 = load i32, ptr %9, align 8, !tbaa !202
  %11 = icmp sgt i32 %3, 0
  br i1 %11, label %12, label %58

12:                                               ; preds = %4
  %13 = icmp eq i32 %10, 0
  %14 = zext i32 %3 to i64
  br label %15

15:                                               ; preds = %55, %12
  %16 = phi i64 [ 0, %12 ], [ %56, %55 ]
  br i1 %13, label %55, label %17

17:                                               ; preds = %15
  %18 = getelementptr inbounds ptr, ptr %2, i64 %16
  %19 = load ptr, ptr %18, align 8, !tbaa !10
  %20 = getelementptr inbounds ptr, ptr %1, i64 %16
  %21 = load ptr, ptr %20, align 8, !tbaa !10
  br label %22

22:                                               ; preds = %48, %17
  %23 = phi ptr [ %32, %48 ], [ %21, %17 ]
  %24 = phi i32 [ %53, %48 ], [ %10, %17 ]
  %25 = phi ptr [ %52, %48 ], [ %19, %17 ]
  %26 = getelementptr inbounds i8, ptr %23, i64 1
  %27 = load i8, ptr %23, align 1, !tbaa !7
  %28 = lshr i8 %27, 3
  %29 = getelementptr inbounds i8, ptr %23, i64 2
  %30 = load i8, ptr %26, align 1, !tbaa !7
  %31 = lshr i8 %30, 2
  %32 = getelementptr inbounds i8, ptr %23, i64 3
  %33 = load i8, ptr %29, align 1, !tbaa !7
  %34 = lshr i8 %33, 3
  %35 = zext i8 %28 to i64
  %36 = getelementptr inbounds ptr, ptr %8, i64 %35
  %37 = load ptr, ptr %36, align 8, !tbaa !10
  %38 = zext i8 %31 to i64
  %39 = zext i8 %34 to i64
  %40 = getelementptr inbounds [32 x i16], ptr %37, i64 %38, i64 %39
  %41 = load i16, ptr %40, align 2, !tbaa !12
  %42 = icmp eq i16 %41, 0
  br i1 %42, label %43, label %48

43:                                               ; preds = %22
  %44 = zext i8 %34 to i32
  %45 = zext i8 %31 to i32
  %46 = zext i8 %28 to i32
  tail call fastcc void @fill_inverse_cmap(ptr noundef %0, i32 noundef %46, i32 noundef %45, i32 noundef %44) #33
  %47 = load i16, ptr %40, align 2, !tbaa !12
  br label %48

48:                                               ; preds = %43, %22
  %49 = phi i16 [ %47, %43 ], [ %41, %22 ]
  %50 = trunc i16 %49 to i8
  %51 = add i8 %50, -1
  %52 = getelementptr inbounds i8, ptr %25, i64 1
  store i8 %51, ptr %25, align 1, !tbaa !7
  %53 = add i32 %24, -1
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %22, !llvm.loop !615

55:                                               ; preds = %48, %15
  %56 = add nuw nsw i64 %16, 1
  %57 = icmp eq i64 %56, %14
  br i1 %57, label %58, label %15, !llvm.loop !616

58:                                               ; preds = %55, %4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal void @finish_pass2(ptr nocapture %0) #12 {
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal fastcc void @fill_inverse_cmap(ptr nocapture noundef readonly %0, i32 noundef %1, i32 noundef %2, i32 noundef %3) unnamed_addr #21 {
  %5 = alloca [128 x i64], align 16
  %6 = alloca [256 x i64], align 16
  %7 = alloca [256 x i8], align 16
  %8 = alloca [128 x i8], align 16
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 83
  %10 = load ptr, ptr %9, align 8, !tbaa !369
  %11 = getelementptr inbounds %struct.my_cquantizer.231, ptr %10, i64 0, i32 3
  %12 = load ptr, ptr %11, align 8, !tbaa !583
  call void @llvm.lifetime.start.p0(i64 256, ptr nonnull %7) #31
  call void @llvm.lifetime.start.p0(i64 128, ptr nonnull %8) #31
  %13 = shl i32 %1, 3
  %14 = and i32 %13, -32
  %15 = or i32 %14, 4
  %16 = shl i32 %2, 2
  %17 = and i32 %16, -32
  %18 = or i32 %17, 2
  %19 = shl i32 %3, 3
  %20 = and i32 %19, -32
  %21 = or i32 %20, 4
  %22 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 31
  %23 = load i32, ptr %22, align 4, !tbaa !549
  call void @llvm.lifetime.start.p0(i64 2048, ptr nonnull %6) #31
  %24 = or i32 %13, 28
  %25 = add nuw nsw i32 %15, %24
  %26 = lshr exact i32 %25, 1
  %27 = or i32 %16, 30
  %28 = add nuw nsw i32 %18, %27
  %29 = lshr exact i32 %28, 1
  %30 = or i32 %19, 28
  %31 = add nuw nsw i32 %21, %30
  %32 = lshr exact i32 %31, 1
  %33 = icmp sgt i32 %23, 0
  br i1 %33, label %34, label %182

34:                                               ; preds = %4
  %35 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 32
  %36 = load ptr, ptr %35, align 8, !tbaa !93
  %37 = load ptr, ptr %36, align 8, !tbaa !10
  %38 = getelementptr inbounds ptr, ptr %36, i64 1
  %39 = load ptr, ptr %38, align 8, !tbaa !10
  %40 = getelementptr inbounds ptr, ptr %36, i64 2
  %41 = load ptr, ptr %40, align 8, !tbaa !10
  %42 = zext i32 %23 to i64
  br label %43

43:                                               ; preds = %159, %34
  %44 = phi i64 [ 0, %34 ], [ %165, %159 ]
  %45 = phi i64 [ 2147483647, %34 ], [ %164, %159 ]
  %46 = getelementptr inbounds i8, ptr %37, i64 %44
  %47 = load i8, ptr %46, align 1, !tbaa !7
  %48 = zext i8 %47 to i32
  %49 = icmp sgt i32 %15, %48
  br i1 %49, label %50, label %59

50:                                               ; preds = %43
  %51 = sub nsw i32 %48, %15
  %52 = shl nsw i32 %51, 1
  %53 = sext i32 %52 to i64
  %54 = mul nsw i64 %53, %53
  %55 = sub nsw i32 %48, %24
  %56 = shl nsw i32 %55, 1
  %57 = sext i32 %56 to i64
  %58 = mul nsw i64 %57, %57
  br label %82

59:                                               ; preds = %43
  %60 = icmp slt i32 %24, %48
  br i1 %60, label %61, label %70

61:                                               ; preds = %59
  %62 = sub nsw i32 %48, %24
  %63 = shl nsw i32 %62, 1
  %64 = sext i32 %63 to i64
  %65 = mul nsw i64 %64, %64
  %66 = sub nsw i32 %48, %15
  %67 = shl nsw i32 %66, 1
  %68 = sext i32 %67 to i64
  %69 = mul nsw i64 %68, %68
  br label %82

70:                                               ; preds = %59
  %71 = icmp ult i32 %26, %48
  br i1 %71, label %77, label %72

72:                                               ; preds = %70
  %73 = sub nsw i32 %48, %24
  %74 = shl nsw i32 %73, 1
  %75 = sext i32 %74 to i64
  %76 = mul nsw i64 %75, %75
  br label %82

77:                                               ; preds = %70
  %78 = sub nsw i32 %48, %15
  %79 = shl nsw i32 %78, 1
  %80 = sext i32 %79 to i64
  %81 = mul nsw i64 %80, %80
  br label %82

82:                                               ; preds = %77, %72, %61, %50
  %83 = phi i64 [ %54, %50 ], [ %65, %61 ], [ 0, %72 ], [ 0, %77 ]
  %84 = phi i64 [ %58, %50 ], [ %69, %61 ], [ %76, %72 ], [ %81, %77 ]
  %85 = getelementptr inbounds i8, ptr %39, i64 %44
  %86 = load i8, ptr %85, align 1, !tbaa !7
  %87 = zext i8 %86 to i32
  %88 = icmp sgt i32 %18, %87
  br i1 %88, label %89, label %99

89:                                               ; preds = %82
  %90 = sub nsw i32 %87, %18
  %91 = mul nsw i32 %90, 3
  %92 = sext i32 %91 to i64
  %93 = mul nsw i64 %92, %92
  %94 = add nuw nsw i64 %93, %83
  %95 = sub nsw i32 %87, %27
  %96 = mul nsw i32 %95, 3
  %97 = sext i32 %96 to i64
  %98 = mul nsw i64 %97, %97
  br label %123

99:                                               ; preds = %82
  %100 = icmp slt i32 %27, %87
  br i1 %100, label %101, label %111

101:                                              ; preds = %99
  %102 = sub nsw i32 %87, %27
  %103 = mul nsw i32 %102, 3
  %104 = sext i32 %103 to i64
  %105 = mul nsw i64 %104, %104
  %106 = add nuw nsw i64 %105, %83
  %107 = sub nsw i32 %87, %18
  %108 = mul nsw i32 %107, 3
  %109 = sext i32 %108 to i64
  %110 = mul nsw i64 %109, %109
  br label %123

111:                                              ; preds = %99
  %112 = icmp ult i32 %29, %87
  br i1 %112, label %118, label %113

113:                                              ; preds = %111
  %114 = sub nsw i32 %87, %27
  %115 = mul nsw i32 %114, 3
  %116 = sext i32 %115 to i64
  %117 = mul nsw i64 %116, %116
  br label %123

118:                                              ; preds = %111
  %119 = sub nsw i32 %87, %18
  %120 = mul nsw i32 %119, 3
  %121 = sext i32 %120 to i64
  %122 = mul nsw i64 %121, %121
  br label %123

123:                                              ; preds = %118, %113, %101, %89
  %124 = phi i64 [ %94, %89 ], [ %106, %101 ], [ %83, %113 ], [ %83, %118 ]
  %125 = phi i64 [ %98, %89 ], [ %110, %101 ], [ %117, %113 ], [ %122, %118 ]
  %126 = add nuw nsw i64 %125, %84
  %127 = getelementptr inbounds i8, ptr %41, i64 %44
  %128 = load i8, ptr %127, align 1, !tbaa !7
  %129 = zext i8 %128 to i32
  %130 = icmp sgt i32 %21, %129
  br i1 %130, label %131, label %139

131:                                              ; preds = %123
  %132 = sub nsw i32 %129, %21
  %133 = sext i32 %132 to i64
  %134 = mul nsw i64 %133, %133
  %135 = add nsw i64 %134, %124
  %136 = sub nsw i32 %129, %30
  %137 = sext i32 %136 to i64
  %138 = mul nsw i64 %137, %137
  br label %159

139:                                              ; preds = %123
  %140 = icmp slt i32 %30, %129
  br i1 %140, label %141, label %149

141:                                              ; preds = %139
  %142 = sub nsw i32 %129, %30
  %143 = sext i32 %142 to i64
  %144 = mul nsw i64 %143, %143
  %145 = add nsw i64 %144, %124
  %146 = sub nsw i32 %129, %21
  %147 = sext i32 %146 to i64
  %148 = mul nsw i64 %147, %147
  br label %159

149:                                              ; preds = %139
  %150 = icmp ult i32 %32, %129
  br i1 %150, label %155, label %151

151:                                              ; preds = %149
  %152 = sub nsw i32 %129, %30
  %153 = sext i32 %152 to i64
  %154 = mul nsw i64 %153, %153
  br label %159

155:                                              ; preds = %149
  %156 = sub nsw i32 %129, %21
  %157 = sext i32 %156 to i64
  %158 = mul nsw i64 %157, %157
  br label %159

159:                                              ; preds = %155, %151, %141, %131
  %160 = phi i64 [ %135, %131 ], [ %145, %141 ], [ %124, %151 ], [ %124, %155 ]
  %161 = phi i64 [ %138, %131 ], [ %148, %141 ], [ %154, %151 ], [ %158, %155 ]
  %162 = add nuw nsw i64 %126, %161
  %163 = getelementptr inbounds [256 x i64], ptr %6, i64 0, i64 %44
  store i64 %160, ptr %163, align 8, !tbaa !49
  %164 = tail call i64 @llvm.smin.i64(i64 %162, i64 %45)
  %165 = add nuw nsw i64 %44, 1
  %166 = icmp eq i64 %165, %42
  br i1 %166, label %167, label %43, !llvm.loop !617

167:                                              ; preds = %178, %159
  %.lcssa3 = phi i64 [ %.lcssa3, %178 ], [ %164, %159 ]
  %168 = phi i64 [ %180, %178 ], [ 0, %159 ]
  %169 = phi i32 [ %179, %178 ], [ 0, %159 ]
  %170 = getelementptr inbounds [256 x i64], ptr %6, i64 0, i64 %168
  %171 = load i64, ptr %170, align 8, !tbaa !49
  %172 = icmp sgt i64 %171, %.lcssa3
  br i1 %172, label %178, label %173

173:                                              ; preds = %167
  %174 = trunc i64 %168 to i8
  %175 = add nsw i32 %169, 1
  %176 = sext i32 %169 to i64
  %177 = getelementptr inbounds i8, ptr %7, i64 %176
  store i8 %174, ptr %177, align 1, !tbaa !7
  br label %178

178:                                              ; preds = %173, %167
  %179 = phi i32 [ %175, %173 ], [ %169, %167 ]
  %180 = add nuw nsw i64 %168, 1
  %181 = icmp eq i64 %180, %42
  br i1 %181, label %182, label %167, !llvm.loop !618

182:                                              ; preds = %178, %4
  %183 = phi i32 [ 0, %4 ], [ %179, %178 ]
  call void @llvm.lifetime.end.p0(i64 2048, ptr nonnull %6) #31
  call void @llvm.lifetime.start.p0(i64 1024, ptr nonnull %5) #31
  br label %184

184:                                              ; preds = %184, %182
  %185 = phi i64 [ 0, %182 ], [ %188, %184 ]
  %186 = shl i64 %185, 3
  %187 = getelementptr i8, ptr %5, i64 %186
  store <2 x i64> <i64 2147483647, i64 2147483647>, ptr %187, align 16, !tbaa !49
  %188 = add nuw i64 %185, 2
  %189 = icmp eq i64 %188, 128
  br i1 %189, label %190, label %184, !llvm.loop !619

190:                                              ; preds = %184
  %191 = icmp sgt i32 %183, 0
  br i1 %191, label %192, label %275

192:                                              ; preds = %190
  %193 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 32
  %194 = zext i32 %183 to i64
  br label %195

195:                                              ; preds = %272, %192
  %196 = phi i64 [ 0, %192 ], [ %273, %272 ]
  %197 = getelementptr inbounds i8, ptr %7, i64 %196
  %198 = load i8, ptr %197, align 1, !tbaa !7
  %199 = load ptr, ptr %193, align 8, !tbaa !93
  %200 = load ptr, ptr %199, align 8, !tbaa !10
  %201 = zext i8 %198 to i64
  %202 = getelementptr inbounds i8, ptr %200, i64 %201
  %203 = load i8, ptr %202, align 1, !tbaa !7
  %204 = zext i8 %203 to i32
  %205 = sub nsw i32 %15, %204
  %206 = shl nsw i32 %205, 1
  %207 = sext i32 %206 to i64
  %208 = mul nsw i64 %207, %207
  %209 = getelementptr inbounds ptr, ptr %199, i64 1
  %210 = load ptr, ptr %209, align 8, !tbaa !10
  %211 = getelementptr inbounds i8, ptr %210, i64 %201
  %212 = load i8, ptr %211, align 1, !tbaa !7
  %213 = zext i8 %212 to i32
  %214 = sub nsw i32 %18, %213
  %215 = mul nsw i32 %214, 3
  %216 = sext i32 %215 to i64
  %217 = mul nsw i64 %216, %216
  %218 = add nuw nsw i64 %217, %208
  %219 = getelementptr inbounds ptr, ptr %199, i64 2
  %220 = load ptr, ptr %219, align 8, !tbaa !10
  %221 = getelementptr inbounds i8, ptr %220, i64 %201
  %222 = load i8, ptr %221, align 1, !tbaa !7
  %223 = zext i8 %222 to i32
  %224 = sub nsw i32 %21, %223
  %225 = sext i32 %224 to i64
  %226 = mul nsw i64 %225, %225
  %227 = add nuw nsw i64 %218, %226
  %228 = shl nsw i64 %207, 5
  %229 = add nsw i64 %228, 256
  %230 = mul nsw i64 %216, 24
  %231 = add nsw i64 %230, 144
  %232 = shl nsw i64 %225, 4
  %233 = add nsw i64 %232, 64
  br label %234

234:                                              ; preds = %267, %195
  %235 = phi i32 [ 3, %195 ], [ %270, %267 ]
  %236 = phi i64 [ %229, %195 ], [ %269, %267 ]
  %237 = phi i64 [ %227, %195 ], [ %268, %267 ]
  %238 = phi ptr [ %8, %195 ], [ %.lcssa1.lcssa, %267 ]
  %239 = phi ptr [ %5, %195 ], [ %.lcssa2.lcssa, %267 ]
  br label %240

240:                                              ; preds = %262, %234
  %241 = phi i64 [ %231, %234 ], [ %264, %262 ]
  %242 = phi i64 [ %237, %234 ], [ %263, %262 ]
  %243 = phi ptr [ %238, %234 ], [ %.lcssa1, %262 ]
  %244 = phi ptr [ %239, %234 ], [ %.lcssa2, %262 ]
  %245 = phi i32 [ 7, %234 ], [ %265, %262 ]
  br label %246

246:                                              ; preds = %255, %240
  %247 = phi i64 [ %233, %240 ], [ %257, %255 ]
  %248 = phi i64 [ %242, %240 ], [ %256, %255 ]
  %249 = phi ptr [ %243, %240 ], [ %259, %255 ]
  %250 = phi ptr [ %244, %240 ], [ %258, %255 ]
  %251 = phi i32 [ 3, %240 ], [ %260, %255 ]
  %252 = load i64, ptr %250, align 8, !tbaa !49
  %253 = icmp slt i64 %248, %252
  br i1 %253, label %254, label %255

254:                                              ; preds = %246
  store i64 %248, ptr %250, align 8, !tbaa !49
  store i8 %198, ptr %249, align 1, !tbaa !7
  br label %255

255:                                              ; preds = %254, %246
  %256 = add nsw i64 %248, %247
  %257 = add nsw i64 %247, 128
  %258 = getelementptr inbounds i64, ptr %250, i64 1
  %259 = getelementptr inbounds i8, ptr %249, i64 1
  %260 = add nsw i32 %251, -1
  %261 = icmp eq i32 %251, 0
  br i1 %261, label %262, label %246, !llvm.loop !620

262:                                              ; preds = %255
  %.lcssa2 = phi ptr [ %258, %255 ]
  %.lcssa1 = phi ptr [ %259, %255 ]
  %263 = add nsw i64 %242, %241
  %264 = add nsw i64 %241, 288
  %265 = add nsw i32 %245, -1
  %266 = icmp eq i32 %245, 0
  br i1 %266, label %267, label %240, !llvm.loop !621

267:                                              ; preds = %262
  %.lcssa2.lcssa = phi ptr [ %.lcssa2, %262 ]
  %.lcssa1.lcssa = phi ptr [ %.lcssa1, %262 ]
  %268 = add nsw i64 %237, %236
  %269 = add nsw i64 %236, 512
  %270 = add nsw i32 %235, -1
  %271 = icmp eq i32 %235, 0
  br i1 %271, label %272, label %234, !llvm.loop !622

272:                                              ; preds = %267
  %273 = add nuw nsw i64 %196, 1
  %274 = icmp eq i64 %273, %194
  br i1 %274, label %275, label %195, !llvm.loop !623

275:                                              ; preds = %272, %190
  call void @llvm.lifetime.end.p0(i64 1024, ptr nonnull %5) #31
  %276 = and i32 %1, -4
  %277 = and i32 %2, -8
  %278 = and i32 %3, -4
  %279 = zext i32 %278 to i64
  %280 = sext i32 %277 to i64
  %281 = sext i32 %276 to i64
  br label %282

282:                                              ; preds = %306, %275
  %283 = phi i64 [ 0, %275 ], [ %307, %306 ]
  %284 = phi ptr [ %8, %275 ], [ %.lcssa.lcssa, %306 ]
  %285 = add nuw nsw i64 %283, %281
  %286 = getelementptr inbounds ptr, ptr %12, i64 %285
  %287 = load ptr, ptr %286, align 8, !tbaa !10
  br label %288

288:                                              ; preds = %303, %282
  %289 = phi i64 [ 0, %282 ], [ %304, %303 ]
  %290 = phi ptr [ %284, %282 ], [ %.lcssa, %303 ]
  %291 = add nuw nsw i64 %289, %280
  %292 = getelementptr inbounds [32 x i16], ptr %287, i64 %291, i64 %279
  %293 = getelementptr i8, ptr %290, i64 3
  br label %294

294:                                              ; preds = %294, %288
  %295 = phi ptr [ %292, %288 ], [ %301, %294 ]
  %296 = phi ptr [ %290, %288 ], [ %297, %294 ]
  %297 = getelementptr inbounds i8, ptr %296, i64 1
  %298 = load i8, ptr %296, align 1, !tbaa !7
  %299 = zext i8 %298 to i16
  %300 = add nuw nsw i16 %299, 1
  %301 = getelementptr inbounds i16, ptr %295, i64 1
  store i16 %300, ptr %295, align 2, !tbaa !12
  %302 = icmp eq ptr %296, %293
  br i1 %302, label %303, label %294, !llvm.loop !624

303:                                              ; preds = %294
  %.lcssa = phi ptr [ %297, %294 ]
  %304 = add nuw nsw i64 %289, 1
  %305 = icmp eq i64 %304, 8
  br i1 %305, label %306, label %288, !llvm.loop !625

306:                                              ; preds = %303
  %.lcssa.lcssa = phi ptr [ %.lcssa, %303 ]
  %307 = add nuw nsw i64 %283, 1
  %308 = icmp eq i64 %307, 4
  br i1 %308, label %309, label %282, !llvm.loop !626

309:                                              ; preds = %306
  call void @llvm.lifetime.end.p0(i64 128, ptr nonnull %8) #31
  call void @llvm.lifetime.end.p0(i64 256, ptr nonnull %7) #31
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal fastcc void @update_box(ptr nocapture noundef readonly %0, ptr nocapture noundef %1) unnamed_addr #27 {
  %3 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 83
  %4 = load ptr, ptr %3, align 8, !tbaa !369
  %5 = getelementptr inbounds %struct.my_cquantizer.231, ptr %4, i64 0, i32 3
  %6 = load ptr, ptr %5, align 8, !tbaa !583
  %7 = load i32, ptr %1, align 8, !tbaa !605
  %8 = getelementptr inbounds %struct.box, ptr %1, i64 0, i32 1
  %9 = load i32, ptr %8, align 4, !tbaa !604
  %10 = getelementptr inbounds %struct.box, ptr %1, i64 0, i32 2
  %11 = load i32, ptr %10, align 8, !tbaa !607
  %12 = getelementptr inbounds %struct.box, ptr %1, i64 0, i32 3
  %13 = load i32, ptr %12, align 4, !tbaa !606
  %14 = getelementptr inbounds %struct.box, ptr %1, i64 0, i32 4
  %15 = load i32, ptr %14, align 8, !tbaa !597
  %16 = getelementptr inbounds %struct.box, ptr %1, i64 0, i32 5
  %17 = load i32, ptr %16, align 4, !tbaa !599
  %18 = icmp sgt i32 %9, %7
  br i1 %18, label %19, label %55

19:                                               ; preds = %2
  %20 = icmp sgt i32 %11, %13
  %21 = sext i32 %15 to i64
  %22 = icmp sgt i32 %15, %17
  %23 = sext i32 %11 to i64
  %24 = add i32 %13, 1
  %25 = sext i32 %7 to i64
  %26 = add i32 %9, 1
  br label %27

27:                                               ; preds = %51, %19
  %28 = phi i64 [ %25, %19 ], [ %52, %51 ]
  br i1 %20, label %51, label %29

29:                                               ; preds = %27
  %30 = getelementptr inbounds ptr, ptr %6, i64 %28
  %31 = load ptr, ptr %30, align 8, !tbaa !10
  br label %32

32:                                               ; preds = %47, %29
  %33 = phi i64 [ %23, %29 ], [ %48, %47 ]
  br i1 %22, label %47, label %34

34:                                               ; preds = %32
  %35 = getelementptr inbounds [32 x i16], ptr %31, i64 %33, i64 %21
  br label %36

36:                                               ; preds = %43, %34
  %37 = phi ptr [ %44, %43 ], [ %35, %34 ]
  %38 = phi i32 [ %45, %43 ], [ %15, %34 ]
  %39 = load i16, ptr %37, align 2, !tbaa !12
  %40 = icmp eq i16 %39, 0
  br i1 %40, label %43, label %41

41:                                               ; preds = %36
  %.lcssa5 = phi i64 [ %28, %36 ]
  %42 = trunc i64 %.lcssa5 to i32
  store i32 %42, ptr %1, align 8, !tbaa !605
  br label %55

43:                                               ; preds = %36
  %44 = getelementptr inbounds i16, ptr %37, i64 1
  %45 = add i32 %38, 1
  %46 = icmp eq i32 %38, %17
  br i1 %46, label %47, label %36, !llvm.loop !627

47:                                               ; preds = %43, %32
  %48 = add nsw i64 %33, 1
  %49 = trunc i64 %48 to i32
  %50 = icmp eq i32 %24, %49
  br i1 %50, label %51, label %32, !llvm.loop !628

51:                                               ; preds = %47, %27
  %52 = add nsw i64 %28, 1
  %53 = trunc i64 %52 to i32
  %54 = icmp eq i32 %26, %53
  br i1 %54, label %55, label %27, !llvm.loop !629

55:                                               ; preds = %51, %41, %2
  %56 = phi i32 [ %42, %41 ], [ %7, %2 ], [ %7, %51 ]
  %57 = icmp sgt i32 %9, %56
  br i1 %57, label %58, label %93

58:                                               ; preds = %55
  %59 = icmp sgt i32 %11, %13
  %60 = sext i32 %15 to i64
  %61 = icmp sgt i32 %15, %17
  %62 = sext i32 %11 to i64
  %63 = add i32 %13, 1
  %64 = sext i32 %9 to i64
  %65 = sext i32 %56 to i64
  br label %66

66:                                               ; preds = %90, %58
  %67 = phi i64 [ %64, %58 ], [ %91, %90 ]
  br i1 %59, label %90, label %68

68:                                               ; preds = %66
  %69 = getelementptr inbounds ptr, ptr %6, i64 %67
  %70 = load ptr, ptr %69, align 8, !tbaa !10
  br label %71

71:                                               ; preds = %86, %68
  %72 = phi i64 [ %62, %68 ], [ %87, %86 ]
  br i1 %61, label %86, label %73

73:                                               ; preds = %71
  %74 = getelementptr inbounds [32 x i16], ptr %70, i64 %72, i64 %60
  br label %75

75:                                               ; preds = %82, %73
  %76 = phi ptr [ %83, %82 ], [ %74, %73 ]
  %77 = phi i32 [ %84, %82 ], [ %15, %73 ]
  %78 = load i16, ptr %76, align 2, !tbaa !12
  %79 = icmp eq i16 %78, 0
  br i1 %79, label %82, label %80

80:                                               ; preds = %75
  %.lcssa4 = phi i64 [ %67, %75 ]
  %81 = trunc i64 %.lcssa4 to i32
  store i32 %81, ptr %8, align 4, !tbaa !604
  br label %93

82:                                               ; preds = %75
  %83 = getelementptr inbounds i16, ptr %76, i64 1
  %84 = add i32 %77, 1
  %85 = icmp eq i32 %77, %17
  br i1 %85, label %86, label %75, !llvm.loop !630

86:                                               ; preds = %82, %71
  %87 = add nsw i64 %72, 1
  %88 = trunc i64 %87 to i32
  %89 = icmp eq i32 %63, %88
  br i1 %89, label %90, label %71, !llvm.loop !631

90:                                               ; preds = %86, %66
  %91 = add nsw i64 %67, -1
  %92 = icmp sgt i64 %67, %65
  br i1 %92, label %66, label %93, !llvm.loop !632

93:                                               ; preds = %90, %80, %55
  %94 = phi i32 [ %81, %80 ], [ %9, %55 ], [ %9, %90 ]
  %95 = icmp sgt i32 %13, %11
  br i1 %95, label %96, label %131

96:                                               ; preds = %93
  %97 = icmp sgt i32 %56, %94
  %98 = sext i32 %15 to i64
  %99 = icmp sgt i32 %15, %17
  %100 = sext i32 %56 to i64
  %101 = add i32 %94, 1
  %102 = sext i32 %11 to i64
  %103 = add i32 %13, 1
  br label %104

104:                                              ; preds = %127, %96
  %105 = phi i64 [ %102, %96 ], [ %128, %127 ]
  br i1 %97, label %127, label %106

106:                                              ; preds = %123, %104
  %107 = phi i64 [ %124, %123 ], [ %100, %104 ]
  br i1 %99, label %123, label %108

108:                                              ; preds = %106
  %109 = getelementptr inbounds ptr, ptr %6, i64 %107
  %110 = load ptr, ptr %109, align 8, !tbaa !10
  %111 = getelementptr inbounds [32 x i16], ptr %110, i64 %105, i64 %98
  br label %112

112:                                              ; preds = %119, %108
  %113 = phi ptr [ %120, %119 ], [ %111, %108 ]
  %114 = phi i32 [ %121, %119 ], [ %15, %108 ]
  %115 = load i16, ptr %113, align 2, !tbaa !12
  %116 = icmp eq i16 %115, 0
  br i1 %116, label %119, label %117

117:                                              ; preds = %112
  %.lcssa3 = phi i64 [ %105, %112 ]
  %118 = trunc i64 %.lcssa3 to i32
  store i32 %118, ptr %10, align 8, !tbaa !607
  br label %131

119:                                              ; preds = %112
  %120 = getelementptr inbounds i16, ptr %113, i64 1
  %121 = add i32 %114, 1
  %122 = icmp eq i32 %114, %17
  br i1 %122, label %123, label %112, !llvm.loop !633

123:                                              ; preds = %119, %106
  %124 = add nsw i64 %107, 1
  %125 = trunc i64 %124 to i32
  %126 = icmp eq i32 %101, %125
  br i1 %126, label %127, label %106, !llvm.loop !634

127:                                              ; preds = %123, %104
  %128 = add nsw i64 %105, 1
  %129 = trunc i64 %128 to i32
  %130 = icmp eq i32 %103, %129
  br i1 %130, label %131, label %104, !llvm.loop !635

131:                                              ; preds = %127, %117, %93
  %132 = phi i32 [ %118, %117 ], [ %11, %93 ], [ %11, %127 ]
  %133 = icmp sgt i32 %13, %132
  br i1 %133, label %134, label %168

134:                                              ; preds = %131
  %135 = icmp sgt i32 %56, %94
  %136 = sext i32 %15 to i64
  %137 = icmp sgt i32 %15, %17
  %138 = sext i32 %56 to i64
  %139 = add i32 %94, 1
  %140 = sext i32 %13 to i64
  %141 = sext i32 %132 to i64
  br label %142

142:                                              ; preds = %165, %134
  %143 = phi i64 [ %140, %134 ], [ %166, %165 ]
  br i1 %135, label %165, label %144

144:                                              ; preds = %161, %142
  %145 = phi i64 [ %162, %161 ], [ %138, %142 ]
  br i1 %137, label %161, label %146

146:                                              ; preds = %144
  %147 = getelementptr inbounds ptr, ptr %6, i64 %145
  %148 = load ptr, ptr %147, align 8, !tbaa !10
  %149 = getelementptr inbounds [32 x i16], ptr %148, i64 %143, i64 %136
  br label %150

150:                                              ; preds = %157, %146
  %151 = phi ptr [ %158, %157 ], [ %149, %146 ]
  %152 = phi i32 [ %159, %157 ], [ %15, %146 ]
  %153 = load i16, ptr %151, align 2, !tbaa !12
  %154 = icmp eq i16 %153, 0
  br i1 %154, label %157, label %155

155:                                              ; preds = %150
  %.lcssa2 = phi i64 [ %143, %150 ]
  %156 = trunc i64 %.lcssa2 to i32
  store i32 %156, ptr %12, align 4, !tbaa !606
  br label %168

157:                                              ; preds = %150
  %158 = getelementptr inbounds i16, ptr %151, i64 1
  %159 = add i32 %152, 1
  %160 = icmp eq i32 %152, %17
  br i1 %160, label %161, label %150, !llvm.loop !636

161:                                              ; preds = %157, %144
  %162 = add nsw i64 %145, 1
  %163 = trunc i64 %162 to i32
  %164 = icmp eq i32 %139, %163
  br i1 %164, label %165, label %144, !llvm.loop !637

165:                                              ; preds = %161, %142
  %166 = add nsw i64 %143, -1
  %167 = icmp sgt i64 %143, %141
  br i1 %167, label %142, label %168, !llvm.loop !638

168:                                              ; preds = %165, %155, %131
  %169 = phi i32 [ %156, %155 ], [ %13, %131 ], [ %13, %165 ]
  %170 = icmp sgt i32 %17, %15
  br i1 %170, label %171, label %206

171:                                              ; preds = %168
  %172 = icmp sgt i32 %56, %94
  %173 = sext i32 %132 to i64
  %174 = icmp sgt i32 %132, %169
  %175 = sext i32 %56 to i64
  %176 = add i32 %94, 1
  %177 = sext i32 %15 to i64
  %178 = add i32 %17, 1
  br label %179

179:                                              ; preds = %202, %171
  %180 = phi i64 [ %177, %171 ], [ %203, %202 ]
  br i1 %172, label %202, label %181

181:                                              ; preds = %198, %179
  %182 = phi i64 [ %199, %198 ], [ %175, %179 ]
  br i1 %174, label %198, label %183

183:                                              ; preds = %181
  %184 = getelementptr inbounds ptr, ptr %6, i64 %182
  %185 = load ptr, ptr %184, align 8, !tbaa !10
  %186 = getelementptr inbounds [32 x i16], ptr %185, i64 %173, i64 %180
  br label %187

187:                                              ; preds = %194, %183
  %188 = phi ptr [ %196, %194 ], [ %186, %183 ]
  %189 = phi i32 [ %195, %194 ], [ %132, %183 ]
  %190 = load i16, ptr %188, align 2, !tbaa !12
  %191 = icmp eq i16 %190, 0
  br i1 %191, label %194, label %192

192:                                              ; preds = %187
  %.lcssa1 = phi i64 [ %180, %187 ]
  %193 = trunc i64 %.lcssa1 to i32
  store i32 %193, ptr %14, align 8, !tbaa !597
  br label %206

194:                                              ; preds = %187
  %195 = add i32 %189, 1
  %196 = getelementptr inbounds i16, ptr %188, i64 32
  %197 = icmp eq i32 %189, %169
  br i1 %197, label %198, label %187, !llvm.loop !639

198:                                              ; preds = %194, %181
  %199 = add nsw i64 %182, 1
  %200 = trunc i64 %199 to i32
  %201 = icmp eq i32 %176, %200
  br i1 %201, label %202, label %181, !llvm.loop !640

202:                                              ; preds = %198, %179
  %203 = add nsw i64 %180, 1
  %204 = trunc i64 %203 to i32
  %205 = icmp eq i32 %178, %204
  br i1 %205, label %206, label %179, !llvm.loop !641

206:                                              ; preds = %202, %192, %168
  %207 = phi i32 [ %193, %192 ], [ %15, %168 ], [ %15, %202 ]
  %208 = icmp sgt i32 %17, %207
  br i1 %208, label %209, label %243

209:                                              ; preds = %206
  %210 = icmp sgt i32 %56, %94
  %211 = sext i32 %132 to i64
  %212 = icmp sgt i32 %132, %169
  %213 = sext i32 %56 to i64
  %214 = add i32 %94, 1
  %215 = sext i32 %17 to i64
  %216 = sext i32 %207 to i64
  br label %217

217:                                              ; preds = %240, %209
  %218 = phi i64 [ %215, %209 ], [ %241, %240 ]
  br i1 %210, label %240, label %219

219:                                              ; preds = %236, %217
  %220 = phi i64 [ %237, %236 ], [ %213, %217 ]
  br i1 %212, label %236, label %221

221:                                              ; preds = %219
  %222 = getelementptr inbounds ptr, ptr %6, i64 %220
  %223 = load ptr, ptr %222, align 8, !tbaa !10
  %224 = getelementptr inbounds [32 x i16], ptr %223, i64 %211, i64 %218
  br label %225

225:                                              ; preds = %232, %221
  %226 = phi ptr [ %234, %232 ], [ %224, %221 ]
  %227 = phi i32 [ %233, %232 ], [ %132, %221 ]
  %228 = load i16, ptr %226, align 2, !tbaa !12
  %229 = icmp eq i16 %228, 0
  br i1 %229, label %232, label %230

230:                                              ; preds = %225
  %.lcssa = phi i64 [ %218, %225 ]
  %231 = trunc i64 %.lcssa to i32
  store i32 %231, ptr %16, align 4, !tbaa !599
  br label %243

232:                                              ; preds = %225
  %233 = add i32 %227, 1
  %234 = getelementptr inbounds i16, ptr %226, i64 32
  %235 = icmp eq i32 %227, %169
  br i1 %235, label %236, label %225, !llvm.loop !642

236:                                              ; preds = %232, %219
  %237 = add nsw i64 %220, 1
  %238 = trunc i64 %237 to i32
  %239 = icmp eq i32 %214, %238
  br i1 %239, label %240, label %219, !llvm.loop !643

240:                                              ; preds = %236, %217
  %241 = add nsw i64 %218, -1
  %242 = icmp sgt i64 %218, %216
  br i1 %242, label %217, label %243, !llvm.loop !644

243:                                              ; preds = %240, %230, %206
  %244 = phi i32 [ %231, %230 ], [ %17, %206 ], [ %17, %240 ]
  %245 = sub nsw i32 %94, %56
  %246 = shl i32 %245, 4
  %247 = sext i32 %246 to i64
  %248 = sub nsw i32 %169, %132
  %249 = mul i32 %248, 12
  %250 = sext i32 %249 to i64
  %251 = sub nsw i32 %244, %207
  %252 = shl i32 %251, 3
  %253 = sext i32 %252 to i64
  %254 = mul nsw i64 %247, %247
  %255 = mul nsw i64 %250, %250
  %256 = add nuw nsw i64 %255, %254
  %257 = mul nsw i64 %253, %253
  %258 = add nuw nsw i64 %256, %257
  %259 = getelementptr inbounds %struct.box, ptr %1, i64 0, i32 6
  store i64 %258, ptr %259, align 8, !tbaa !601
  %260 = icmp sgt i32 %56, %94
  br i1 %260, label %301, label %261

261:                                              ; preds = %243
  %262 = icmp sgt i32 %132, %169
  %263 = sext i32 %207 to i64
  %264 = icmp sgt i32 %207, %244
  %265 = sext i32 %132 to i64
  %266 = add i32 %169, 1
  %267 = sext i32 %56 to i64
  %268 = add i32 %94, 1
  br label %269

269:                                              ; preds = %296, %261
  %270 = phi i64 [ %267, %261 ], [ %298, %296 ]
  %271 = phi i64 [ 0, %261 ], [ %297, %296 ]
  br i1 %262, label %296, label %272

272:                                              ; preds = %269
  %273 = getelementptr inbounds ptr, ptr %6, i64 %270
  %274 = load ptr, ptr %273, align 8, !tbaa !10
  br label %275

275:                                              ; preds = %291, %272
  %276 = phi i64 [ %265, %272 ], [ %293, %291 ]
  %277 = phi i64 [ %271, %272 ], [ %292, %291 ]
  br i1 %264, label %291, label %278

278:                                              ; preds = %275
  %279 = getelementptr inbounds [32 x i16], ptr %274, i64 %276, i64 %263
  br label %280

280:                                              ; preds = %280, %278
  %281 = phi i64 [ %287, %280 ], [ %277, %278 ]
  %282 = phi ptr [ %289, %280 ], [ %279, %278 ]
  %283 = phi i32 [ %288, %280 ], [ %207, %278 ]
  %284 = load i16, ptr %282, align 2, !tbaa !12
  %285 = icmp ne i16 %284, 0
  %286 = zext i1 %285 to i64
  %287 = add nsw i64 %281, %286
  %288 = add i32 %283, 1
  %289 = getelementptr inbounds i16, ptr %282, i64 1
  %290 = icmp eq i32 %283, %244
  br i1 %290, label %291, label %280, !llvm.loop !645

291:                                              ; preds = %280, %275
  %292 = phi i64 [ %277, %275 ], [ %287, %280 ]
  %293 = add nsw i64 %276, 1
  %294 = trunc i64 %293 to i32
  %295 = icmp eq i32 %266, %294
  br i1 %295, label %296, label %275, !llvm.loop !646

296:                                              ; preds = %291, %269
  %297 = phi i64 [ %271, %269 ], [ %292, %291 ]
  %298 = add nsw i64 %270, 1
  %299 = trunc i64 %298 to i32
  %300 = icmp eq i32 %268, %299
  br i1 %300, label %301, label %269, !llvm.loop !647

301:                                              ; preds = %296, %243
  %302 = phi i64 [ 0, %243 ], [ %297, %296 ]
  %303 = getelementptr inbounds %struct.box, ptr %1, i64 0, i32 7
  store i64 %302, ptr %303, align 8, !tbaa !600
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i64 @jdiv_round_up(i64 noundef %0, i64 noundef %1) #12 {
  %3 = add i64 %0, -1
  %4 = add i64 %3, %1
  %5 = sdiv i64 %4, %1
  ret i64 %5
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i64 @jround_up(i64 noundef %0, i64 noundef %1) #12 {
  %3 = add i64 %0, -1
  %4 = add i64 %3, %1
  %5 = srem i64 %4, %1
  %6 = sub nsw i64 %4, %5
  ret i64 %6
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @jcopy_sample_rows(ptr nocapture noundef readonly %0, i32 noundef %1, ptr nocapture noundef readonly %2, i32 noundef %3, i32 noundef %4, i32 noundef %5) #21 {
  %7 = zext i32 %5 to i64
  %8 = icmp sgt i32 %4, 0
  br i1 %8, label %9, label %24

9:                                                ; preds = %6
  %10 = sext i32 %3 to i64
  %11 = getelementptr inbounds ptr, ptr %2, i64 %10
  %12 = sext i32 %1 to i64
  %13 = getelementptr inbounds ptr, ptr %0, i64 %12
  br label %14

14:                                               ; preds = %14, %9
  %15 = phi i32 [ %22, %14 ], [ %4, %9 ]
  %16 = phi ptr [ %18, %14 ], [ %13, %9 ]
  %17 = phi ptr [ %20, %14 ], [ %11, %9 ]
  %18 = getelementptr inbounds ptr, ptr %16, i64 1
  %19 = load ptr, ptr %16, align 8, !tbaa !10
  %20 = getelementptr inbounds ptr, ptr %17, i64 1
  %21 = load ptr, ptr %17, align 8, !tbaa !10
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 1 %21, ptr align 1 %19, i64 %7, i1 false)
  %22 = add nsw i32 %15, -1
  %23 = icmp ugt i32 %15, 1
  br i1 %23, label %14, label %24, !llvm.loop !648

24:                                               ; preds = %14, %6
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal void @jcopy_block_row(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1, i32 noundef %2) #28 {
  %4 = zext i32 %2 to i64
  %5 = shl nuw nsw i64 %4, 7
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 1 %1, ptr align 1 %0, i64 %5, i1 false)
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal void @jzero_far(ptr nocapture noundef writeonly %0, i64 noundef %1) #19 {
  tail call void @llvm.memset.p0.i64(ptr align 1 %0, i8 0, i64 %1, i1 false)
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @read_color_map(ptr noundef %0, ptr nocapture noundef %1) #6 {
  %3 = alloca [13 x i32], align 16
  %4 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8, !tbaa !50
  %6 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %5, i64 0, i32 2
  %7 = load ptr, ptr %6, align 8, !tbaa !311
  %8 = tail call ptr %7(ptr noundef %0, i32 noundef 1, i32 noundef 256, i32 noundef 3) #32
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 32
  store ptr %8, ptr %9, align 8, !tbaa !93
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 31
  store i32 0, ptr %10, align 4, !tbaa !549
  %11 = tail call i32 @getc(ptr noundef %1) #33
  switch i32 %11, label %128 [
    i32 71, label %12
    i32 80, label %67
  ]

12:                                               ; preds = %2
  call void @llvm.lifetime.start.p0(i64 52, ptr nonnull %3) #31
  br label %13

13:                                               ; preds = %22, %12
  %14 = phi i64 [ 1, %12 ], [ %23, %22 ]
  %15 = tail call i32 @getc(ptr noundef %1) #33
  %16 = getelementptr inbounds [13 x i32], ptr %3, i64 0, i64 %14
  store i32 %15, ptr %16, align 4, !tbaa !41
  %17 = icmp eq i32 %15, -1
  br i1 %17, label %18, label %22

18:                                               ; preds = %13
  %19 = load ptr, ptr %0, align 8, !tbaa !16
  %20 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %19, i64 0, i32 5
  store i32 1038, ptr %20, align 8, !tbaa !25
  %21 = load ptr, ptr %19, align 8, !tbaa !26
  tail call void %21(ptr noundef nonnull %0) #32
  br label %22

22:                                               ; preds = %18, %13
  %23 = add nuw nsw i64 %14, 1
  %24 = icmp eq i64 %23, 13
  br i1 %24, label %25, label %13, !llvm.loop !649

25:                                               ; preds = %22
  %26 = getelementptr inbounds [13 x i32], ptr %3, i64 0, i64 1
  %27 = load i32, ptr %26, align 4, !tbaa !41
  %28 = icmp ne i32 %27, 73
  %29 = getelementptr inbounds [13 x i32], ptr %3, i64 0, i64 2
  %30 = load i32, ptr %29, align 8
  %31 = icmp ne i32 %30, 70
  %32 = select i1 %28, i1 true, i1 %31
  br i1 %32, label %33, label %37

33:                                               ; preds = %25
  %34 = load ptr, ptr %0, align 8, !tbaa !16
  %35 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %34, i64 0, i32 5
  store i32 1038, ptr %35, align 8, !tbaa !25
  %36 = load ptr, ptr %34, align 8, !tbaa !26
  tail call void %36(ptr noundef nonnull %0) #32
  br label %37

37:                                               ; preds = %33, %25
  %38 = getelementptr inbounds [13 x i32], ptr %3, i64 0, i64 10
  %39 = load i32, ptr %38, align 8, !tbaa !41
  %40 = and i32 %39, 128
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %46

42:                                               ; preds = %37
  %43 = load ptr, ptr %0, align 8, !tbaa !16
  %44 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %43, i64 0, i32 5
  store i32 1038, ptr %44, align 8, !tbaa !25
  %45 = load ptr, ptr %43, align 8, !tbaa !26
  tail call void %45(ptr noundef nonnull %0) #32
  br label %46

46:                                               ; preds = %42, %37
  %47 = and i32 %39, 7
  %48 = shl nuw nsw i32 2, %47
  br label %49

49:                                               ; preds = %63, %46
  %50 = phi i32 [ 0, %46 ], [ %64, %63 ]
  %51 = tail call i32 @getc(ptr noundef %1) #33
  %52 = tail call i32 @getc(ptr noundef %1) #33
  %53 = tail call i32 @getc(ptr noundef %1) #33
  %54 = icmp eq i32 %51, -1
  %55 = icmp eq i32 %52, -1
  %56 = or i1 %54, %55
  %57 = icmp eq i32 %53, -1
  %58 = or i1 %56, %57
  br i1 %58, label %59, label %63

59:                                               ; preds = %49
  %60 = load ptr, ptr %0, align 8, !tbaa !16
  %61 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %60, i64 0, i32 5
  store i32 1038, ptr %61, align 8, !tbaa !25
  %62 = load ptr, ptr %60, align 8, !tbaa !26
  tail call void %62(ptr noundef nonnull %0) #32
  br label %63

63:                                               ; preds = %59, %49
  tail call fastcc void @add_map_entry(ptr noundef %0, i32 noundef %51, i32 noundef %52, i32 noundef %53) #33
  %64 = add nuw nsw i32 %50, 1
  %65 = icmp eq i32 %64, %48
  br i1 %65, label %66, label %49, !llvm.loop !650

66:                                               ; preds = %63
  call void @llvm.lifetime.end.p0(i64 52, ptr nonnull %3) #31
  br label %132

67:                                               ; preds = %2
  %68 = tail call i32 @getc(ptr noundef %1) #33
  %69 = tail call fastcc i32 @read_pbm_integer(ptr noundef nonnull %0, ptr noundef %1) #33
  %70 = tail call fastcc i32 @read_pbm_integer(ptr noundef nonnull %0, ptr noundef %1) #33
  %71 = tail call fastcc i32 @read_pbm_integer(ptr noundef nonnull %0, ptr noundef %1) #33
  %72 = icmp eq i32 %69, 0
  %73 = icmp eq i32 %70, 0
  %74 = select i1 %72, i1 true, i1 %73
  %75 = icmp eq i32 %71, 0
  %76 = select i1 %74, i1 true, i1 %75
  br i1 %76, label %77, label %81

77:                                               ; preds = %67
  %78 = load ptr, ptr %0, align 8, !tbaa !16
  %79 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %78, i64 0, i32 5
  store i32 1038, ptr %79, align 8, !tbaa !25
  %80 = load ptr, ptr %78, align 8, !tbaa !26
  tail call void %80(ptr noundef nonnull %0) #32
  br label %81

81:                                               ; preds = %77, %67
  %82 = icmp eq i32 %71, 255
  br i1 %82, label %87, label %83

83:                                               ; preds = %81
  %84 = load ptr, ptr %0, align 8, !tbaa !16
  %85 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %84, i64 0, i32 5
  store i32 1038, ptr %85, align 8, !tbaa !25
  %86 = load ptr, ptr %84, align 8, !tbaa !26
  tail call void %86(ptr noundef nonnull %0) #32
  br label %87

87:                                               ; preds = %83, %81
  switch i32 %68, label %124 [
    i32 51, label %89
    i32 54, label %88
  ]

88:                                               ; preds = %87
  br i1 %73, label %132, label %102

89:                                               ; preds = %87
  br i1 %73, label %132, label %90

90:                                               ; preds = %99, %89
  %91 = phi i32 [ %100, %99 ], [ 0, %89 ]
  br i1 %72, label %99, label %92

92:                                               ; preds = %92, %90
  %93 = phi i32 [ %97, %92 ], [ 0, %90 ]
  %94 = tail call fastcc i32 @read_pbm_integer(ptr noundef %0, ptr noundef %1) #33
  %95 = tail call fastcc i32 @read_pbm_integer(ptr noundef %0, ptr noundef %1) #33
  %96 = tail call fastcc i32 @read_pbm_integer(ptr noundef %0, ptr noundef %1) #33
  tail call fastcc void @add_map_entry(ptr noundef %0, i32 noundef %94, i32 noundef %95, i32 noundef %96) #33
  %97 = add nuw i32 %93, 1
  %98 = icmp eq i32 %97, %69
  br i1 %98, label %99, label %92, !llvm.loop !651

99:                                               ; preds = %92, %90
  %100 = add nuw i32 %91, 1
  %101 = icmp eq i32 %100, %70
  br i1 %101, label %132, label %90, !llvm.loop !652

102:                                              ; preds = %121, %88
  %103 = phi i32 [ %122, %121 ], [ 0, %88 ]
  br i1 %72, label %121, label %104

104:                                              ; preds = %118, %102
  %105 = phi i32 [ %119, %118 ], [ 0, %102 ]
  %106 = tail call fastcc i32 @pbm_getc(ptr noundef %1) #33
  %107 = tail call fastcc i32 @pbm_getc(ptr noundef %1) #33
  %108 = tail call fastcc i32 @pbm_getc(ptr noundef %1) #33
  %109 = icmp eq i32 %106, -1
  %110 = icmp eq i32 %107, -1
  %111 = select i1 %109, i1 true, i1 %110
  %112 = icmp eq i32 %108, -1
  %113 = select i1 %111, i1 true, i1 %112
  br i1 %113, label %114, label %118

114:                                              ; preds = %104
  %115 = load ptr, ptr %0, align 8, !tbaa !16
  %116 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %115, i64 0, i32 5
  store i32 1038, ptr %116, align 8, !tbaa !25
  %117 = load ptr, ptr %115, align 8, !tbaa !26
  tail call void %117(ptr noundef nonnull %0) #32
  br label %118

118:                                              ; preds = %114, %104
  tail call fastcc void @add_map_entry(ptr noundef %0, i32 noundef %106, i32 noundef %107, i32 noundef %108) #33
  %119 = add nuw i32 %105, 1
  %120 = icmp eq i32 %119, %69
  br i1 %120, label %121, label %104, !llvm.loop !653

121:                                              ; preds = %118, %102
  %122 = add nuw i32 %103, 1
  %123 = icmp eq i32 %122, %70
  br i1 %123, label %132, label %102, !llvm.loop !654

124:                                              ; preds = %87
  %125 = load ptr, ptr %0, align 8, !tbaa !16
  %126 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %125, i64 0, i32 5
  store i32 1038, ptr %126, align 8, !tbaa !25
  %127 = load ptr, ptr %125, align 8, !tbaa !26
  tail call void %127(ptr noundef nonnull %0) #32
  br label %132

128:                                              ; preds = %2
  %129 = load ptr, ptr %0, align 8, !tbaa !16
  %130 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %129, i64 0, i32 5
  store i32 1038, ptr %130, align 8, !tbaa !25
  %131 = load ptr, ptr %129, align 8, !tbaa !26
  tail call void %131(ptr noundef nonnull %0) #32
  br label %132

132:                                              ; preds = %128, %124, %121, %99, %89, %88, %66
  ret void
}

; Function Attrs: nofree nounwind optsize
declare noundef i32 @getc(ptr nocapture noundef) local_unnamed_addr #7

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @add_map_entry(ptr noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3) unnamed_addr #6 {
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 32
  %6 = load ptr, ptr %5, align 8, !tbaa !93
  %7 = load ptr, ptr %6, align 8, !tbaa !10
  %8 = getelementptr inbounds ptr, ptr %6, i64 1
  %9 = load ptr, ptr %8, align 8, !tbaa !10
  %10 = getelementptr inbounds ptr, ptr %6, i64 2
  %11 = load ptr, ptr %10, align 8, !tbaa !10
  %12 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 31
  %13 = load i32, ptr %12, align 4, !tbaa !549
  %14 = icmp sgt i32 %13, 0
  br i1 %14, label %15, label %44

15:                                               ; preds = %4
  %16 = zext i32 %13 to i64
  br label %17

17:                                               ; preds = %33, %15
  %18 = phi i64 [ 0, %15 ], [ %34, %33 ]
  %19 = getelementptr inbounds i8, ptr %7, i64 %18
  %20 = load i8, ptr %19, align 1, !tbaa !7
  %21 = zext i8 %20 to i32
  %22 = icmp eq i32 %21, %1
  br i1 %22, label %23, label %33

23:                                               ; preds = %17
  %24 = getelementptr inbounds i8, ptr %9, i64 %18
  %25 = load i8, ptr %24, align 1, !tbaa !7
  %26 = zext i8 %25 to i32
  %27 = icmp eq i32 %26, %2
  br i1 %27, label %28, label %33

28:                                               ; preds = %23
  %29 = getelementptr inbounds i8, ptr %11, i64 %18
  %30 = load i8, ptr %29, align 1, !tbaa !7
  %31 = zext i8 %30 to i32
  %32 = icmp eq i32 %31, %3
  br i1 %32, label %54, label %33

33:                                               ; preds = %28, %23, %17
  %34 = add nuw nsw i64 %18, 1
  %35 = icmp eq i64 %34, %16
  br i1 %35, label %36, label %17, !llvm.loop !655

36:                                               ; preds = %33
  %37 = icmp sgt i32 %13, 255
  br i1 %37, label %38, label %44

38:                                               ; preds = %36
  %39 = load ptr, ptr %0, align 8, !tbaa !16
  %40 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %39, i64 0, i32 5
  store i32 56, ptr %40, align 8, !tbaa !25
  %41 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %39, i64 0, i32 6
  store i32 256, ptr %41, align 4, !tbaa !7
  %42 = load ptr, ptr %0, align 8, !tbaa !16
  %43 = load ptr, ptr %42, align 8, !tbaa !26
  tail call void %43(ptr noundef nonnull %0) #32
  br label %44

44:                                               ; preds = %38, %36, %4
  %45 = trunc i32 %1 to i8
  %46 = sext i32 %13 to i64
  %47 = getelementptr inbounds i8, ptr %7, i64 %46
  store i8 %45, ptr %47, align 1, !tbaa !7
  %48 = trunc i32 %2 to i8
  %49 = getelementptr inbounds i8, ptr %9, i64 %46
  store i8 %48, ptr %49, align 1, !tbaa !7
  %50 = trunc i32 %3 to i8
  %51 = getelementptr inbounds i8, ptr %11, i64 %46
  store i8 %50, ptr %51, align 1, !tbaa !7
  %52 = load i32, ptr %12, align 4, !tbaa !549
  %53 = add nsw i32 %52, 1
  store i32 %53, ptr %12, align 4, !tbaa !549
  br label %54

54:                                               ; preds = %44, %28
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc i32 @read_pbm_integer(ptr noundef %0, ptr nocapture noundef %1) unnamed_addr #6 {
  br label %3

3:                                                ; preds = %5, %2
  %4 = tail call fastcc i32 @pbm_getc(ptr noundef %1) #33
  switch i32 %4, label %10 [
    i32 -1, label %6
    i32 32, label %5
    i32 13, label %5
    i32 10, label %5
    i32 9, label %5
  ]

5:                                                ; preds = %3, %3, %3, %3
  br label %3

6:                                                ; preds = %3
  %.lcssa2 = phi i32 [ %4, %3 ]
  %7 = load ptr, ptr %0, align 8, !tbaa !16
  %8 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %7, i64 0, i32 5
  store i32 1038, ptr %8, align 8, !tbaa !25
  %9 = load ptr, ptr %7, align 8, !tbaa !26
  tail call void %9(ptr noundef nonnull %0) #32
  br label %13

10:                                               ; preds = %3
  %.lcssa1 = phi i32 [ %4, %3 ]
  %11 = add i32 %.lcssa1, -58
  %12 = icmp ult i32 %11, -10
  br i1 %12, label %13, label %18

13:                                               ; preds = %10, %6
  %14 = phi i32 [ %.lcssa1, %10 ], [ %.lcssa2, %6 ]
  %15 = load ptr, ptr %0, align 8, !tbaa !16
  %16 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %15, i64 0, i32 5
  store i32 1038, ptr %16, align 8, !tbaa !25
  %17 = load ptr, ptr %15, align 8, !tbaa !26
  tail call void %17(ptr noundef nonnull %0) #32
  br label %18

18:                                               ; preds = %13, %10
  %19 = phi i32 [ %14, %13 ], [ %.lcssa1, %10 ]
  %20 = add nsw i32 %19, -48
  br label %21

21:                                               ; preds = %26, %18
  %22 = phi i32 [ %20, %18 ], [ %28, %26 ]
  %23 = tail call fastcc i32 @pbm_getc(ptr noundef %1) #33
  %24 = add i32 %23, -48
  %25 = icmp ult i32 %24, 10
  br i1 %25, label %26, label %29

26:                                               ; preds = %21
  %27 = mul i32 %22, 10
  %28 = add i32 %24, %27
  br label %21, !llvm.loop !656

29:                                               ; preds = %21
  %.lcssa = phi i32 [ %22, %21 ]
  ret i32 %.lcssa
}

; Function Attrs: nofree nounwind optsize uwtable
define internal fastcc i32 @pbm_getc(ptr nocapture noundef %0) unnamed_addr #20 {
  %2 = tail call i32 @getc(ptr noundef %0) #33
  %3 = icmp eq i32 %2, 35
  br i1 %3, label %4, label %6

4:                                                ; preds = %4, %1
  %5 = tail call i32 @getc(ptr noundef %0) #33
  switch i32 %5, label %4 [
    i32 -1, label %6
    i32 10, label %6
  ]

6:                                                ; preds = %4, %4, %1
  %7 = phi i32 [ %2, %1 ], [ %5, %4 ], [ %5, %4 ]
  ret i32 %7
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @jinit_write_bmp(ptr noundef %0, i32 noundef %1) #6 {
  %3 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %3, align 8, !tbaa !50
  %5 = load ptr, ptr %4, align 8, !tbaa !65
  %6 = tail call ptr %5(ptr noundef %0, i32 noundef 1, i64 noundef 80) #32
  store ptr @start_output_bmp, ptr %6, align 8, !tbaa !657
  %7 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %6, i64 0, i32 2
  store ptr @finish_output_bmp, ptr %7, align 8, !tbaa !659
  %8 = getelementptr inbounds %struct.bmp_dest_struct, ptr %6, i64 0, i32 1
  store i32 %1, ptr %8, align 8, !tbaa !660
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 10
  %10 = load i32, ptr %9, align 8, !tbaa !48
  switch i32 %10, label %20 [
    i32 1, label %11
    i32 2, label %13
  ]

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %6, i64 0, i32 1
  store ptr @put_gray_rows, ptr %12, align 8, !tbaa !661
  br label %24

13:                                               ; preds = %2
  %14 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 19
  %15 = load i32, ptr %14, align 4, !tbaa !43
  %16 = icmp eq i32 %15, 0
  %17 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %6, i64 0, i32 1
  br i1 %16, label %19, label %18

18:                                               ; preds = %13
  store ptr @put_gray_rows, ptr %17, align 8, !tbaa !661
  br label %24

19:                                               ; preds = %13
  store ptr @put_pixel_rows, ptr %17, align 8, !tbaa !661
  br label %24

20:                                               ; preds = %2
  %21 = load ptr, ptr %0, align 8, !tbaa !16
  %22 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %21, i64 0, i32 5
  store i32 1005, ptr %22, align 8, !tbaa !25
  %23 = load ptr, ptr %21, align 8, !tbaa !26
  tail call void %23(ptr noundef nonnull %0) #32
  br label %24

24:                                               ; preds = %20, %19, %18, %11
  tail call void @jpeg_calc_output_dimensions(ptr noundef nonnull %0) #32
  %25 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  %26 = load i32, ptr %25, align 8, !tbaa !202
  %27 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 29
  %28 = load i32, ptr %27, align 4, !tbaa !358
  %29 = mul i32 %28, %26
  %30 = getelementptr inbounds %struct.bmp_dest_struct, ptr %6, i64 0, i32 3
  store i32 %29, ptr %30, align 8, !tbaa !662
  %31 = sub i32 0, %29
  %32 = and i32 %31, 3
  %33 = add i32 %29, %32
  %34 = getelementptr inbounds %struct.bmp_dest_struct, ptr %6, i64 0, i32 4
  store i32 %33, ptr %34, align 4, !tbaa !663
  %35 = getelementptr inbounds %struct.bmp_dest_struct, ptr %6, i64 0, i32 5
  store i32 %32, ptr %35, align 8, !tbaa !664
  %36 = load ptr, ptr %3, align 8, !tbaa !50
  %37 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %36, i64 0, i32 4
  %38 = load ptr, ptr %37, align 8, !tbaa !427
  %39 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 27
  %40 = load i32, ptr %39, align 4, !tbaa !31
  %41 = tail call ptr %38(ptr noundef nonnull %0, i32 noundef 1, i32 noundef 0, i32 noundef %33, i32 noundef %40, i32 noundef 1) #32
  %42 = getelementptr inbounds %struct.bmp_dest_struct, ptr %6, i64 0, i32 2
  store ptr %41, ptr %42, align 8, !tbaa !665
  %43 = getelementptr inbounds %struct.bmp_dest_struct, ptr %6, i64 0, i32 6
  store i32 0, ptr %43, align 4, !tbaa !666
  %44 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 2
  %45 = load ptr, ptr %44, align 8, !tbaa !71
  %46 = icmp eq ptr %45, null
  br i1 %46, label %51, label %47

47:                                               ; preds = %24
  %48 = getelementptr inbounds %struct.cdjpeg_progress_mgr, ptr %45, i64 0, i32 2
  %49 = load i32, ptr %48, align 4, !tbaa !667
  %50 = add nsw i32 %49, 1
  store i32 %50, ptr %48, align 4, !tbaa !667
  br label %51

51:                                               ; preds = %47, %24
  %52 = load ptr, ptr %3, align 8, !tbaa !50
  %53 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %52, i64 0, i32 2
  %54 = load ptr, ptr %53, align 8, !tbaa !311
  %55 = tail call ptr %54(ptr noundef nonnull %0, i32 noundef 1, i32 noundef %33, i32 noundef 1) #32
  %56 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %6, i64 0, i32 4
  store ptr %55, ptr %56, align 8, !tbaa !669
  %57 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %6, i64 0, i32 5
  store i32 1, ptr %57, align 8, !tbaa !670
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal void @start_output_bmp(ptr nocapture %0, ptr nocapture %1) #12 {
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @finish_output_bmp(ptr noundef %0, ptr nocapture noundef readonly %1) #6 {
  %3 = alloca [14 x i8], align 1
  %4 = alloca [40 x i8], align 16
  %5 = alloca [14 x i8], align 1
  %6 = alloca [12 x i8], align 1
  %7 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %1, i64 0, i32 3
  %8 = load ptr, ptr %7, align 8, !tbaa !671
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 2
  %10 = load ptr, ptr %9, align 8, !tbaa !71
  %11 = getelementptr inbounds %struct.bmp_dest_struct, ptr %1, i64 0, i32 1
  %12 = load i32, ptr %11, align 8, !tbaa !660
  %13 = icmp eq i32 %12, 0
  %14 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 10
  br i1 %13, label %93, label %15

15:                                               ; preds = %2
  call void @llvm.lifetime.start.p0(i64 14, ptr nonnull %5) #31
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %6) #31
  %16 = load i32, ptr %14, align 8, !tbaa !48
  %17 = icmp eq i32 %16, 2
  br i1 %17, label %18, label %24

18:                                               ; preds = %15
  %19 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 19
  %20 = load i32, ptr %19, align 4, !tbaa !43
  %21 = icmp ne i32 %20, 0
  %22 = select i1 %21, i8 8, i8 24
  %23 = select i1 %21, i32 256, i32 0
  br label %24

24:                                               ; preds = %18, %15
  %25 = phi i8 [ %22, %18 ], [ 8, %15 ]
  %26 = phi i1 [ %21, %18 ], [ true, %15 ]
  %27 = phi i32 [ %23, %18 ], [ 256, %15 ]
  %28 = mul nuw nsw i32 %27, 3
  %29 = or i32 %28, 26
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds %struct.bmp_dest_struct, ptr %1, i64 0, i32 4
  %32 = load i32, ptr %31, align 4, !tbaa !663
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 27
  %35 = load i32, ptr %34, align 4, !tbaa !31
  %36 = zext i32 %35 to i64
  %37 = mul nuw nsw i64 %36, %33
  %38 = add nuw nsw i64 %37, %30
  %39 = getelementptr inbounds i8, ptr %5, i64 6
  store i32 0, ptr %39, align 1
  %40 = getelementptr inbounds i8, ptr %6, i64 2
  store i16 0, ptr %40, align 1
  store i8 66, ptr %5, align 1, !tbaa !7
  %41 = getelementptr inbounds [14 x i8], ptr %5, i64 0, i64 1
  store i8 77, ptr %41, align 1, !tbaa !7
  %42 = trunc i64 %38 to i8
  %43 = getelementptr inbounds [14 x i8], ptr %5, i64 0, i64 2
  store i8 %42, ptr %43, align 1, !tbaa !7
  %44 = lshr i64 %38, 8
  %45 = trunc i64 %44 to i8
  %46 = getelementptr inbounds [14 x i8], ptr %5, i64 0, i64 3
  store i8 %45, ptr %46, align 1, !tbaa !7
  %47 = lshr i64 %38, 16
  %48 = trunc i64 %47 to i8
  %49 = getelementptr inbounds [14 x i8], ptr %5, i64 0, i64 4
  store i8 %48, ptr %49, align 1, !tbaa !7
  %50 = lshr i64 %38, 24
  %51 = trunc i64 %50 to i8
  %52 = getelementptr inbounds [14 x i8], ptr %5, i64 0, i64 5
  store i8 %51, ptr %52, align 1, !tbaa !7
  %53 = getelementptr inbounds [14 x i8], ptr %5, i64 0, i64 10
  store i8 26, ptr %53, align 1, !tbaa !7
  %54 = lshr i64 %30, 8
  %55 = trunc i64 %54 to i8
  %56 = getelementptr inbounds [14 x i8], ptr %5, i64 0, i64 11
  store i8 %55, ptr %56, align 1, !tbaa !7
  %57 = getelementptr inbounds [14 x i8], ptr %5, i64 0, i64 12
  store i8 0, ptr %57, align 1, !tbaa !7
  %58 = getelementptr inbounds [14 x i8], ptr %5, i64 0, i64 13
  store i8 0, ptr %58, align 1, !tbaa !7
  store i8 12, ptr %6, align 1, !tbaa !7
  %59 = getelementptr inbounds [12 x i8], ptr %6, i64 0, i64 1
  store i8 0, ptr %59, align 1, !tbaa !7
  %60 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  %61 = load i32, ptr %60, align 8, !tbaa !202
  %62 = trunc i32 %61 to i8
  %63 = getelementptr inbounds [12 x i8], ptr %6, i64 0, i64 4
  store i8 %62, ptr %63, align 1, !tbaa !7
  %64 = lshr i32 %61, 8
  %65 = trunc i32 %64 to i8
  %66 = getelementptr inbounds [12 x i8], ptr %6, i64 0, i64 5
  store i8 %65, ptr %66, align 1, !tbaa !7
  %67 = trunc i32 %35 to i8
  %68 = getelementptr inbounds [12 x i8], ptr %6, i64 0, i64 6
  store i8 %67, ptr %68, align 1, !tbaa !7
  %69 = lshr i32 %35, 8
  %70 = trunc i32 %69 to i8
  %71 = getelementptr inbounds [12 x i8], ptr %6, i64 0, i64 7
  store i8 %70, ptr %71, align 1, !tbaa !7
  %72 = getelementptr inbounds [12 x i8], ptr %6, i64 0, i64 8
  store i8 1, ptr %72, align 1, !tbaa !7
  %73 = getelementptr inbounds [12 x i8], ptr %6, i64 0, i64 9
  store i8 0, ptr %73, align 1, !tbaa !7
  %74 = getelementptr inbounds [12 x i8], ptr %6, i64 0, i64 10
  store i8 %25, ptr %74, align 1, !tbaa !7
  %75 = getelementptr inbounds [12 x i8], ptr %6, i64 0, i64 11
  store i8 0, ptr %75, align 1, !tbaa !7
  %76 = call i64 @fwrite(ptr noundef nonnull %5, i64 noundef 1, i64 noundef 14, ptr noundef %8) #33
  %77 = icmp eq i64 %76, 14
  br i1 %77, label %82, label %78

78:                                               ; preds = %24
  %79 = load ptr, ptr %0, align 8, !tbaa !16
  %80 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %79, i64 0, i32 5
  store i32 36, ptr %80, align 8, !tbaa !25
  %81 = load ptr, ptr %79, align 8, !tbaa !26
  tail call void %81(ptr noundef nonnull %0) #32
  br label %82

82:                                               ; preds = %78, %24
  %83 = load ptr, ptr %7, align 8, !tbaa !671
  %84 = call i64 @fwrite(ptr noundef nonnull %6, i64 noundef 1, i64 noundef 12, ptr noundef %83) #33
  %85 = icmp eq i64 %84, 12
  br i1 %85, label %90, label %86

86:                                               ; preds = %82
  %87 = load ptr, ptr %0, align 8, !tbaa !16
  %88 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %87, i64 0, i32 5
  store i32 36, ptr %88, align 8, !tbaa !25
  %89 = load ptr, ptr %87, align 8, !tbaa !26
  tail call void %89(ptr noundef nonnull %0) #32
  br label %90

90:                                               ; preds = %86, %82
  br i1 %26, label %91, label %92

91:                                               ; preds = %90
  tail call fastcc void @write_colormap(ptr noundef nonnull %0, ptr noundef nonnull %1, i32 noundef %27, i32 noundef 3) #33
  br label %92

92:                                               ; preds = %91, %90
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %6) #31
  call void @llvm.lifetime.end.p0(i64 14, ptr nonnull %5) #31
  br label %216

93:                                               ; preds = %2
  call void @llvm.lifetime.start.p0(i64 14, ptr nonnull %3) #31
  call void @llvm.lifetime.start.p0(i64 40, ptr nonnull %4) #31
  %94 = load i32, ptr %14, align 8, !tbaa !48
  %95 = icmp eq i32 %94, 2
  br i1 %95, label %96, label %102

96:                                               ; preds = %93
  %97 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 19
  %98 = load i32, ptr %97, align 4, !tbaa !43
  %99 = icmp ne i32 %98, 0
  %100 = select i1 %99, i8 8, i8 24
  %101 = select i1 %99, i32 256, i32 0
  br label %102

102:                                              ; preds = %96, %93
  %103 = phi i8 [ %100, %96 ], [ 8, %93 ]
  %104 = phi i1 [ %99, %96 ], [ true, %93 ]
  %105 = phi i32 [ %101, %96 ], [ 256, %93 ]
  %106 = shl nuw nsw i32 %105, 2
  %107 = or i32 %106, 54
  %108 = zext i32 %107 to i64
  %109 = getelementptr inbounds %struct.bmp_dest_struct, ptr %1, i64 0, i32 4
  %110 = load i32, ptr %109, align 4, !tbaa !663
  %111 = zext i32 %110 to i64
  %112 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 27
  %113 = load i32, ptr %112, align 4, !tbaa !31
  %114 = zext i32 %113 to i64
  %115 = mul nuw nsw i64 %114, %111
  %116 = add nuw nsw i64 %115, %108
  %117 = getelementptr inbounds i8, ptr %3, i64 6
  store i32 0, ptr %117, align 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(40) %4, i8 0, i64 40, i1 false)
  store i8 66, ptr %3, align 1, !tbaa !7
  %118 = getelementptr inbounds [14 x i8], ptr %3, i64 0, i64 1
  store i8 77, ptr %118, align 1, !tbaa !7
  %119 = trunc i64 %116 to i8
  %120 = getelementptr inbounds [14 x i8], ptr %3, i64 0, i64 2
  store i8 %119, ptr %120, align 1, !tbaa !7
  %121 = lshr i64 %116, 8
  %122 = trunc i64 %121 to i8
  %123 = getelementptr inbounds [14 x i8], ptr %3, i64 0, i64 3
  store i8 %122, ptr %123, align 1, !tbaa !7
  %124 = lshr i64 %116, 16
  %125 = trunc i64 %124 to i8
  %126 = getelementptr inbounds [14 x i8], ptr %3, i64 0, i64 4
  store i8 %125, ptr %126, align 1, !tbaa !7
  %127 = lshr i64 %116, 24
  %128 = trunc i64 %127 to i8
  %129 = getelementptr inbounds [14 x i8], ptr %3, i64 0, i64 5
  store i8 %128, ptr %129, align 1, !tbaa !7
  %130 = getelementptr inbounds [14 x i8], ptr %3, i64 0, i64 10
  store i8 54, ptr %130, align 1, !tbaa !7
  %131 = lshr i64 %108, 8
  %132 = trunc i64 %131 to i8
  %133 = getelementptr inbounds [14 x i8], ptr %3, i64 0, i64 11
  store i8 %132, ptr %133, align 1, !tbaa !7
  %134 = getelementptr inbounds [14 x i8], ptr %3, i64 0, i64 12
  store i8 0, ptr %134, align 1, !tbaa !7
  %135 = getelementptr inbounds [14 x i8], ptr %3, i64 0, i64 13
  store i8 0, ptr %135, align 1, !tbaa !7
  store i8 40, ptr %4, align 16, !tbaa !7
  %136 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  %137 = load i32, ptr %136, align 8, !tbaa !202
  %138 = trunc i32 %137 to i8
  %139 = getelementptr inbounds [40 x i8], ptr %4, i64 0, i64 4
  store i8 %138, ptr %139, align 4, !tbaa !7
  %140 = lshr i32 %137, 8
  %141 = trunc i32 %140 to i8
  %142 = getelementptr inbounds [40 x i8], ptr %4, i64 0, i64 5
  store i8 %141, ptr %142, align 1, !tbaa !7
  %143 = lshr i32 %137, 16
  %144 = trunc i32 %143 to i8
  %145 = getelementptr inbounds [40 x i8], ptr %4, i64 0, i64 6
  store i8 %144, ptr %145, align 2, !tbaa !7
  %146 = lshr i32 %137, 24
  %147 = trunc i32 %146 to i8
  %148 = getelementptr inbounds [40 x i8], ptr %4, i64 0, i64 7
  store i8 %147, ptr %148, align 1, !tbaa !7
  %149 = trunc i32 %113 to i8
  %150 = getelementptr inbounds [40 x i8], ptr %4, i64 0, i64 8
  store i8 %149, ptr %150, align 8, !tbaa !7
  %151 = lshr i32 %113, 8
  %152 = trunc i32 %151 to i8
  %153 = getelementptr inbounds [40 x i8], ptr %4, i64 0, i64 9
  store i8 %152, ptr %153, align 1, !tbaa !7
  %154 = lshr i32 %113, 16
  %155 = trunc i32 %154 to i8
  %156 = getelementptr inbounds [40 x i8], ptr %4, i64 0, i64 10
  store i8 %155, ptr %156, align 2, !tbaa !7
  %157 = lshr i32 %113, 24
  %158 = trunc i32 %157 to i8
  %159 = getelementptr inbounds [40 x i8], ptr %4, i64 0, i64 11
  store i8 %158, ptr %159, align 1, !tbaa !7
  %160 = getelementptr inbounds [40 x i8], ptr %4, i64 0, i64 12
  store i8 1, ptr %160, align 4, !tbaa !7
  %161 = getelementptr inbounds [40 x i8], ptr %4, i64 0, i64 14
  store i8 %103, ptr %161, align 2, !tbaa !7
  %162 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 51
  %163 = load i8, ptr %162, align 8, !tbaa !351
  %164 = icmp eq i8 %163, 2
  br i1 %164, label %165, label %194

165:                                              ; preds = %102
  %166 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 52
  %167 = load i16, ptr %166, align 2, !tbaa !336
  %168 = trunc i16 %167 to i8
  %169 = mul i8 %168, 100
  %170 = getelementptr inbounds [40 x i8], ptr %4, i64 0, i64 24
  store i8 %169, ptr %170, align 8, !tbaa !7
  %171 = zext i16 %167 to i64
  %172 = mul nuw nsw i64 %171, 100
  %173 = lshr i64 %172, 8
  %174 = trunc i64 %173 to i8
  %175 = getelementptr inbounds [40 x i8], ptr %4, i64 0, i64 25
  store i8 %174, ptr %175, align 1, !tbaa !7
  %176 = lshr i64 %172, 16
  %177 = trunc i64 %176 to i8
  %178 = getelementptr inbounds [40 x i8], ptr %4, i64 0, i64 26
  store i8 %177, ptr %178, align 2, !tbaa !7
  %179 = getelementptr inbounds [40 x i8], ptr %4, i64 0, i64 27
  store i8 0, ptr %179, align 1, !tbaa !7
  %180 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 53
  %181 = load i16, ptr %180, align 4, !tbaa !337
  %182 = trunc i16 %181 to i8
  %183 = mul i8 %182, 100
  %184 = getelementptr inbounds [40 x i8], ptr %4, i64 0, i64 28
  store i8 %183, ptr %184, align 4, !tbaa !7
  %185 = zext i16 %181 to i64
  %186 = mul nuw nsw i64 %185, 100
  %187 = lshr i64 %186, 8
  %188 = trunc i64 %187 to i8
  %189 = getelementptr inbounds [40 x i8], ptr %4, i64 0, i64 29
  store i8 %188, ptr %189, align 1, !tbaa !7
  %190 = lshr i64 %186, 16
  %191 = trunc i64 %190 to i8
  %192 = getelementptr inbounds [40 x i8], ptr %4, i64 0, i64 30
  store i8 %191, ptr %192, align 2, !tbaa !7
  %193 = getelementptr inbounds [40 x i8], ptr %4, i64 0, i64 31
  store i8 0, ptr %193, align 1, !tbaa !7
  br label %194

194:                                              ; preds = %165, %102
  %195 = getelementptr inbounds [40 x i8], ptr %4, i64 0, i64 32
  store i8 0, ptr %195, align 16, !tbaa !7
  %196 = lshr exact i32 %105, 8
  %197 = trunc i32 %196 to i8
  %198 = getelementptr inbounds [40 x i8], ptr %4, i64 0, i64 33
  store i8 %197, ptr %198, align 1, !tbaa !7
  %199 = call i64 @fwrite(ptr noundef nonnull %3, i64 noundef 1, i64 noundef 14, ptr noundef %8) #33
  %200 = icmp eq i64 %199, 14
  br i1 %200, label %205, label %201

201:                                              ; preds = %194
  %202 = load ptr, ptr %0, align 8, !tbaa !16
  %203 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %202, i64 0, i32 5
  store i32 36, ptr %203, align 8, !tbaa !25
  %204 = load ptr, ptr %202, align 8, !tbaa !26
  tail call void %204(ptr noundef nonnull %0) #32
  br label %205

205:                                              ; preds = %201, %194
  %206 = load ptr, ptr %7, align 8, !tbaa !671
  %207 = call i64 @fwrite(ptr noundef nonnull %4, i64 noundef 1, i64 noundef 40, ptr noundef %206) #33
  %208 = icmp eq i64 %207, 40
  br i1 %208, label %213, label %209

209:                                              ; preds = %205
  %210 = load ptr, ptr %0, align 8, !tbaa !16
  %211 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %210, i64 0, i32 5
  store i32 36, ptr %211, align 8, !tbaa !25
  %212 = load ptr, ptr %210, align 8, !tbaa !26
  tail call void %212(ptr noundef nonnull %0) #32
  br label %213

213:                                              ; preds = %209, %205
  br i1 %104, label %214, label %215

214:                                              ; preds = %213
  tail call fastcc void @write_colormap(ptr noundef nonnull %0, ptr noundef nonnull %1, i32 noundef %105, i32 noundef 4) #33
  br label %215

215:                                              ; preds = %214, %213
  call void @llvm.lifetime.end.p0(i64 40, ptr nonnull %4) #31
  call void @llvm.lifetime.end.p0(i64 14, ptr nonnull %3) #31
  br label %216

216:                                              ; preds = %215, %92
  %217 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 27
  %218 = load i32, ptr %217, align 4, !tbaa !31
  %219 = icmp eq i32 %218, 0
  br i1 %219, label %257, label %220

220:                                              ; preds = %216
  %221 = icmp eq ptr %10, null
  %222 = getelementptr inbounds %struct.jpeg_progress_mgr.105, ptr %10, i64 0, i32 1
  %223 = getelementptr inbounds %struct.jpeg_progress_mgr.105, ptr %10, i64 0, i32 2
  %224 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  %225 = getelementptr inbounds %struct.bmp_dest_struct, ptr %1, i64 0, i32 2
  %226 = getelementptr inbounds %struct.bmp_dest_struct, ptr %1, i64 0, i32 4
  br label %229

227:                                              ; preds = %248, %237
  %228 = icmp eq i32 %242, 0
  br i1 %228, label %257, label %229, !llvm.loop !672

229:                                              ; preds = %227, %220
  %230 = phi i32 [ %218, %220 ], [ %242, %227 ]
  br i1 %221, label %237, label %231

231:                                              ; preds = %229
  %232 = load i32, ptr %217, align 4, !tbaa !31
  %233 = sub i32 %232, %230
  %234 = zext i32 %233 to i64
  store i64 %234, ptr %222, align 8, !tbaa !673
  %235 = zext i32 %232 to i64
  store i64 %235, ptr %223, align 8, !tbaa !674
  %236 = load ptr, ptr %10, align 8, !tbaa !675
  tail call void %236(ptr noundef %0) #32
  br label %237

237:                                              ; preds = %231, %229
  %238 = load ptr, ptr %224, align 8, !tbaa !50
  %239 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %238, i64 0, i32 7
  %240 = load ptr, ptr %239, align 8, !tbaa !431
  %241 = load ptr, ptr %225, align 8, !tbaa !665
  %242 = add i32 %230, -1
  %243 = tail call ptr %240(ptr noundef %0, ptr noundef %241, i32 noundef %242, i32 noundef 1, i32 noundef 0) #32
  %244 = load i32, ptr %226, align 4, !tbaa !663
  %245 = icmp eq i32 %244, 0
  br i1 %245, label %227, label %246

246:                                              ; preds = %237
  %247 = load ptr, ptr %243, align 8, !tbaa !10
  br label %248

248:                                              ; preds = %248, %246
  %249 = phi ptr [ %254, %248 ], [ %247, %246 ]
  %250 = phi i32 [ %255, %248 ], [ %244, %246 ]
  %251 = load i8, ptr %249, align 1, !tbaa !7
  %252 = zext i8 %251 to i32
  %253 = tail call i32 @putc(i32 noundef %252, ptr noundef %8) #33
  %254 = getelementptr inbounds i8, ptr %249, i64 1
  %255 = add i32 %250, -1
  %256 = icmp eq i32 %255, 0
  br i1 %256, label %227, label %248, !llvm.loop !676

257:                                              ; preds = %227, %216
  %258 = icmp eq ptr %10, null
  br i1 %258, label %263, label %259

259:                                              ; preds = %257
  %260 = getelementptr inbounds %struct.cdjpeg_progress_mgr, ptr %10, i64 0, i32 1
  %261 = load i32, ptr %260, align 8, !tbaa !677
  %262 = add nsw i32 %261, 1
  store i32 %262, ptr %260, align 8, !tbaa !677
  br label %263

263:                                              ; preds = %259, %257
  %264 = tail call i32 @fflush(ptr noundef %8) #33
  %265 = tail call i32 @ferror(ptr noundef %8) #32
  %266 = icmp eq i32 %265, 0
  br i1 %266, label %271, label %267

267:                                              ; preds = %263
  %268 = load ptr, ptr %0, align 8, !tbaa !16
  %269 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %268, i64 0, i32 5
  store i32 36, ptr %269, align 8, !tbaa !25
  %270 = load ptr, ptr %268, align 8, !tbaa !26
  tail call void %270(ptr noundef nonnull %0) #32
  br label %271

271:                                              ; preds = %267, %263
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @put_gray_rows(ptr noundef %0, ptr nocapture noundef %1, i32 %2) #6 {
  %4 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8, !tbaa !50
  %6 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %5, i64 0, i32 7
  %7 = load ptr, ptr %6, align 8, !tbaa !431
  %8 = getelementptr inbounds %struct.bmp_dest_struct, ptr %1, i64 0, i32 2
  %9 = load ptr, ptr %8, align 8, !tbaa !665
  %10 = getelementptr inbounds %struct.bmp_dest_struct, ptr %1, i64 0, i32 6
  %11 = load i32, ptr %10, align 4, !tbaa !666
  %12 = tail call ptr %7(ptr noundef %0, ptr noundef %9, i32 noundef %11, i32 noundef 1, i32 noundef 1) #32
  %13 = load i32, ptr %10, align 4, !tbaa !666
  %14 = add i32 %13, 1
  store i32 %14, ptr %10, align 4, !tbaa !666
  %15 = load ptr, ptr %12, align 8, !tbaa !10
  %16 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  %17 = load i32, ptr %16, align 8, !tbaa !202
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %32, label %19

19:                                               ; preds = %3
  %20 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %1, i64 0, i32 4
  %21 = load ptr, ptr %20, align 8, !tbaa !669
  %22 = load ptr, ptr %21, align 8, !tbaa !10
  br label %23

23:                                               ; preds = %23, %19
  %24 = phi i32 [ %30, %23 ], [ %17, %19 ]
  %25 = phi ptr [ %29, %23 ], [ %15, %19 ]
  %26 = phi ptr [ %27, %23 ], [ %22, %19 ]
  %27 = getelementptr inbounds i8, ptr %26, i64 1
  %28 = load i8, ptr %26, align 1, !tbaa !7
  %29 = getelementptr inbounds i8, ptr %25, i64 1
  store i8 %28, ptr %25, align 1, !tbaa !7
  %30 = add i32 %24, -1
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %23, !llvm.loop !678

32:                                               ; preds = %23, %3
  %33 = phi ptr [ %15, %3 ], [ %29, %23 ]
  %34 = getelementptr inbounds %struct.bmp_dest_struct, ptr %1, i64 0, i32 5
  %35 = load i32, ptr %34, align 8, !tbaa !664
  %36 = icmp sgt i32 %35, 0
  br i1 %36, label %37, label %39

37:                                               ; preds = %32
  %38 = zext i32 %35 to i64
  tail call void @llvm.memset.p0.i64(ptr align 1 %33, i8 0, i64 %38, i1 false), !tbaa !7
  br label %39

39:                                               ; preds = %37, %32
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @put_pixel_rows(ptr noundef %0, ptr nocapture noundef %1, i32 %2) #6 {
  %4 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8, !tbaa !50
  %6 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %5, i64 0, i32 7
  %7 = load ptr, ptr %6, align 8, !tbaa !431
  %8 = getelementptr inbounds %struct.bmp_dest_struct, ptr %1, i64 0, i32 2
  %9 = load ptr, ptr %8, align 8, !tbaa !665
  %10 = getelementptr inbounds %struct.bmp_dest_struct, ptr %1, i64 0, i32 6
  %11 = load i32, ptr %10, align 4, !tbaa !666
  %12 = tail call ptr %7(ptr noundef %0, ptr noundef %9, i32 noundef %11, i32 noundef 1, i32 noundef 1) #32
  %13 = load i32, ptr %10, align 4, !tbaa !666
  %14 = add i32 %13, 1
  store i32 %14, ptr %10, align 4, !tbaa !666
  %15 = load ptr, ptr %12, align 8, !tbaa !10
  %16 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  %17 = load i32, ptr %16, align 8, !tbaa !202
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %38, label %19

19:                                               ; preds = %3
  %20 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %1, i64 0, i32 4
  %21 = load ptr, ptr %20, align 8, !tbaa !669
  %22 = load ptr, ptr %21, align 8, !tbaa !10
  br label %23

23:                                               ; preds = %23, %19
  %24 = phi i32 [ %36, %23 ], [ %17, %19 ]
  %25 = phi ptr [ %35, %23 ], [ %15, %19 ]
  %26 = phi ptr [ %33, %23 ], [ %22, %19 ]
  %27 = getelementptr inbounds i8, ptr %26, i64 1
  %28 = load i8, ptr %26, align 1, !tbaa !7
  %29 = getelementptr inbounds i8, ptr %25, i64 2
  store i8 %28, ptr %29, align 1, !tbaa !7
  %30 = getelementptr inbounds i8, ptr %26, i64 2
  %31 = load i8, ptr %27, align 1, !tbaa !7
  %32 = getelementptr inbounds i8, ptr %25, i64 1
  store i8 %31, ptr %32, align 1, !tbaa !7
  %33 = getelementptr inbounds i8, ptr %26, i64 3
  %34 = load i8, ptr %30, align 1, !tbaa !7
  store i8 %34, ptr %25, align 1, !tbaa !7
  %35 = getelementptr inbounds i8, ptr %25, i64 3
  %36 = add i32 %24, -1
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %23, !llvm.loop !679

38:                                               ; preds = %23, %3
  %39 = phi ptr [ %15, %3 ], [ %35, %23 ]
  %40 = getelementptr inbounds %struct.bmp_dest_struct, ptr %1, i64 0, i32 5
  %41 = load i32, ptr %40, align 8, !tbaa !664
  %42 = icmp sgt i32 %41, 0
  br i1 %42, label %43, label %45

43:                                               ; preds = %38
  %44 = zext i32 %41 to i64
  tail call void @llvm.memset.p0.i64(ptr align 1 %39, i8 0, i64 %44, i1 false), !tbaa !7
  br label %45

45:                                               ; preds = %43, %38
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @write_colormap(ptr noundef %0, ptr nocapture noundef readonly %1, i32 noundef %2, i32 noundef %3) unnamed_addr #6 {
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 32
  %6 = load ptr, ptr %5, align 8, !tbaa !93
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 31
  %8 = load i32, ptr %7, align 4, !tbaa !549
  %9 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %1, i64 0, i32 3
  %10 = load ptr, ptr %9, align 8, !tbaa !671
  %11 = icmp eq ptr %6, null
  br i1 %11, label %12, label %14

12:                                               ; preds = %4
  %13 = icmp eq i32 %3, 4
  br label %73

14:                                               ; preds = %4
  %15 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 28
  %16 = load i32, ptr %15, align 8, !tbaa !199
  %17 = icmp eq i32 %16, 3
  %18 = icmp sgt i32 %8, 0
  br i1 %17, label %23, label %19

19:                                               ; preds = %14
  br i1 %18, label %20, label %83

20:                                               ; preds = %19
  %21 = icmp eq i32 %3, 4
  %22 = zext i32 %8 to i64
  br label %51

23:                                               ; preds = %14
  br i1 %18, label %24, label %83

24:                                               ; preds = %23
  %25 = getelementptr inbounds ptr, ptr %6, i64 2
  %26 = getelementptr inbounds ptr, ptr %6, i64 1
  %27 = icmp eq i32 %3, 4
  %28 = zext i32 %8 to i64
  br label %29

29:                                               ; preds = %48, %24
  %30 = phi i64 [ 0, %24 ], [ %49, %48 ]
  %31 = load ptr, ptr %25, align 8, !tbaa !10
  %32 = getelementptr inbounds i8, ptr %31, i64 %30
  %33 = load i8, ptr %32, align 1, !tbaa !7
  %34 = zext i8 %33 to i32
  %35 = tail call i32 @putc(i32 noundef %34, ptr noundef %10) #33
  %36 = load ptr, ptr %26, align 8, !tbaa !10
  %37 = getelementptr inbounds i8, ptr %36, i64 %30
  %38 = load i8, ptr %37, align 1, !tbaa !7
  %39 = zext i8 %38 to i32
  %40 = tail call i32 @putc(i32 noundef %39, ptr noundef %10) #33
  %41 = load ptr, ptr %6, align 8, !tbaa !10
  %42 = getelementptr inbounds i8, ptr %41, i64 %30
  %43 = load i8, ptr %42, align 1, !tbaa !7
  %44 = zext i8 %43 to i32
  %45 = tail call i32 @putc(i32 noundef %44, ptr noundef %10) #33
  br i1 %27, label %46, label %48

46:                                               ; preds = %29
  %47 = tail call i32 @putc(i32 noundef 0, ptr noundef %10) #33
  br label %48

48:                                               ; preds = %46, %29
  %49 = add nuw nsw i64 %30, 1
  %50 = icmp eq i64 %49, %28
  br i1 %50, label %83, label %29, !llvm.loop !680

51:                                               ; preds = %70, %20
  %52 = phi i64 [ 0, %20 ], [ %71, %70 ]
  %53 = load ptr, ptr %6, align 8, !tbaa !10
  %54 = getelementptr inbounds i8, ptr %53, i64 %52
  %55 = load i8, ptr %54, align 1, !tbaa !7
  %56 = zext i8 %55 to i32
  %57 = tail call i32 @putc(i32 noundef %56, ptr noundef %10) #33
  %58 = load ptr, ptr %6, align 8, !tbaa !10
  %59 = getelementptr inbounds i8, ptr %58, i64 %52
  %60 = load i8, ptr %59, align 1, !tbaa !7
  %61 = zext i8 %60 to i32
  %62 = tail call i32 @putc(i32 noundef %61, ptr noundef %10) #33
  %63 = load ptr, ptr %6, align 8, !tbaa !10
  %64 = getelementptr inbounds i8, ptr %63, i64 %52
  %65 = load i8, ptr %64, align 1, !tbaa !7
  %66 = zext i8 %65 to i32
  %67 = tail call i32 @putc(i32 noundef %66, ptr noundef %10) #33
  br i1 %21, label %68, label %70

68:                                               ; preds = %51
  %69 = tail call i32 @putc(i32 noundef 0, ptr noundef %10) #33
  br label %70

70:                                               ; preds = %68, %51
  %71 = add nuw nsw i64 %52, 1
  %72 = icmp eq i64 %71, %22
  br i1 %72, label %83, label %51, !llvm.loop !681

73:                                               ; preds = %80, %12
  %74 = phi i32 [ 0, %12 ], [ %81, %80 ]
  %75 = tail call i32 @putc(i32 noundef %74, ptr noundef %10) #33
  %76 = tail call i32 @putc(i32 noundef %74, ptr noundef %10) #33
  %77 = tail call i32 @putc(i32 noundef %74, ptr noundef %10) #33
  br i1 %13, label %78, label %80

78:                                               ; preds = %73
  %79 = tail call i32 @putc(i32 noundef 0, ptr noundef %10) #33
  br label %80

80:                                               ; preds = %78, %73
  %81 = add nuw nsw i32 %74, 1
  %82 = icmp eq i32 %81, 256
  br i1 %82, label %83, label %73, !llvm.loop !682

83:                                               ; preds = %80, %70, %48, %23, %19
  %84 = phi i32 [ 0, %23 ], [ 0, %19 ], [ 256, %80 ], [ %8, %48 ], [ %8, %70 ]
  %85 = icmp sgt i32 %84, %2
  br i1 %85, label %86, label %92

86:                                               ; preds = %83
  %87 = load ptr, ptr %0, align 8, !tbaa !16
  %88 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %87, i64 0, i32 5
  store i32 1039, ptr %88, align 8, !tbaa !25
  %89 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %87, i64 0, i32 6
  store i32 %84, ptr %89, align 4, !tbaa !7
  %90 = load ptr, ptr %0, align 8, !tbaa !16
  %91 = load ptr, ptr %90, align 8, !tbaa !26
  tail call void %91(ptr noundef nonnull %0) #32
  br label %92

92:                                               ; preds = %86, %83
  %93 = icmp slt i32 %84, %2
  br i1 %93, label %94, label %106

94:                                               ; preds = %92
  %95 = icmp eq i32 %3, 4
  br label %96

96:                                               ; preds = %103, %94
  %97 = phi i32 [ %84, %94 ], [ %104, %103 ]
  %98 = tail call i32 @putc(i32 noundef 0, ptr noundef %10) #33
  %99 = tail call i32 @putc(i32 noundef 0, ptr noundef %10) #33
  %100 = tail call i32 @putc(i32 noundef 0, ptr noundef %10) #33
  br i1 %95, label %101, label %103

101:                                              ; preds = %96
  %102 = tail call i32 @putc(i32 noundef 0, ptr noundef %10) #33
  br label %103

103:                                              ; preds = %101, %96
  %104 = add nuw i32 %97, 1
  %105 = icmp eq i32 %104, %2
  br i1 %105, label %106, label %96, !llvm.loop !683

106:                                              ; preds = %103, %92
  ret void
}

; Function Attrs: nofree nounwind optsize
declare noundef i32 @fflush(ptr nocapture noundef) local_unnamed_addr #7

; Function Attrs: nofree nounwind optsize memory(read)
declare noundef i32 @ferror(ptr nocapture noundef) local_unnamed_addr #22

; Function Attrs: nounwind optsize uwtable
define internal ptr @jinit_write_gif(ptr noundef %0) #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !50
  %4 = load ptr, ptr %3, align 8, !tbaa !65
  %5 = tail call ptr %4(ptr noundef %0, i32 noundef 1, i64 noundef 384) #32
  %6 = getelementptr inbounds %struct.gif_dest_struct, ptr %5, i64 0, i32 1
  store ptr %0, ptr %6, align 8, !tbaa !684
  store ptr @start_output_gif, ptr %5, align 8, !tbaa !686
  %7 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %5, i64 0, i32 1
  store ptr @put_pixel_rows.215, ptr %7, align 8, !tbaa !687
  %8 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %5, i64 0, i32 2
  store ptr @finish_output_gif, ptr %8, align 8, !tbaa !688
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 10
  %10 = load i32, ptr %9, align 8, !tbaa !48
  %11 = add i32 %10, -1
  %12 = icmp ult i32 %11, 2
  br i1 %12, label %18, label %13

13:                                               ; preds = %1
  %14 = load ptr, ptr %0, align 8, !tbaa !16
  %15 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %14, i64 0, i32 5
  store i32 1014, ptr %15, align 8, !tbaa !25
  %16 = load ptr, ptr %14, align 8, !tbaa !26
  tail call void %16(ptr noundef nonnull %0) #32
  %17 = load i32, ptr %9, align 8, !tbaa !48
  br label %18

18:                                               ; preds = %13, %1
  %19 = phi i32 [ %10, %1 ], [ %17, %13 ]
  %20 = icmp eq i32 %19, 1
  br i1 %20, label %21, label %25

21:                                               ; preds = %18
  %22 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 42
  %23 = load i32, ptr %22, align 8, !tbaa !285
  %24 = icmp sgt i32 %23, 8
  br i1 %24, label %25, label %31

25:                                               ; preds = %21, %18
  %26 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 19
  store i32 1, ptr %26, align 4, !tbaa !43
  %27 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 22
  %28 = load i32, ptr %27, align 8, !tbaa !42
  %29 = icmp sgt i32 %28, 256
  br i1 %29, label %30, label %31

30:                                               ; preds = %25
  store i32 256, ptr %27, align 8, !tbaa !42
  br label %31

31:                                               ; preds = %30, %25, %21
  tail call void @jpeg_calc_output_dimensions(ptr noundef nonnull %0) #32
  %32 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 29
  %33 = load i32, ptr %32, align 4, !tbaa !358
  %34 = icmp eq i32 %33, 1
  br i1 %34, label %39, label %35

35:                                               ; preds = %31
  %36 = load ptr, ptr %0, align 8, !tbaa !16
  %37 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %36, i64 0, i32 5
  store i32 1012, ptr %37, align 8, !tbaa !25
  %38 = load ptr, ptr %36, align 8, !tbaa !26
  tail call void %38(ptr noundef nonnull %0) #32
  br label %39

39:                                               ; preds = %35, %31
  %40 = load ptr, ptr %2, align 8, !tbaa !50
  %41 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %40, i64 0, i32 2
  %42 = load ptr, ptr %41, align 8, !tbaa !311
  %43 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  %44 = load i32, ptr %43, align 8, !tbaa !202
  %45 = tail call ptr %42(ptr noundef nonnull %0, i32 noundef 1, i32 noundef %44, i32 noundef 1) #32
  %46 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %5, i64 0, i32 4
  store ptr %45, ptr %46, align 8, !tbaa !689
  %47 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %5, i64 0, i32 5
  store i32 1, ptr %47, align 8, !tbaa !690
  %48 = load ptr, ptr %2, align 8, !tbaa !50
  %49 = load ptr, ptr %48, align 8, !tbaa !65
  %50 = tail call ptr %49(ptr noundef nonnull %0, i32 noundef 1, i64 noundef 10006) #32
  %51 = getelementptr inbounds %struct.gif_dest_struct, ptr %5, i64 0, i32 12
  store ptr %50, ptr %51, align 8, !tbaa !691
  %52 = load ptr, ptr %2, align 8, !tbaa !50
  %53 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %52, i64 0, i32 1
  %54 = load ptr, ptr %53, align 8, !tbaa !143
  %55 = tail call ptr %54(ptr noundef nonnull %0, i32 noundef 1, i64 noundef 40024) #32
  %56 = getelementptr inbounds %struct.gif_dest_struct, ptr %5, i64 0, i32 13
  store ptr %55, ptr %56, align 8, !tbaa !692
  ret ptr %5
}

; Function Attrs: nounwind optsize uwtable
define internal void @start_output_gif(ptr nocapture noundef readonly %0, ptr nocapture noundef %1) #6 {
  %3 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 19
  %4 = load i32, ptr %3, align 4, !tbaa !43
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %11, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 31
  %8 = load i32, ptr %7, align 4, !tbaa !549
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 32
  %10 = load ptr, ptr %9, align 8, !tbaa !93
  tail call fastcc void @emit_header(ptr noundef %1, i32 noundef %8, ptr noundef %10) #33
  br label %12

11:                                               ; preds = %2
  tail call fastcc void @emit_header(ptr noundef %1, i32 noundef 256, ptr noundef null) #33
  br label %12

12:                                               ; preds = %11, %6
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @put_pixel_rows.215(ptr nocapture noundef readonly %0, ptr nocapture noundef %1, i32 %2) #6 {
  %4 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  %5 = load i32, ptr %4, align 8, !tbaa !202
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %96, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %1, i64 0, i32 4
  %9 = load ptr, ptr %8, align 8, !tbaa !689
  %10 = load ptr, ptr %9, align 8, !tbaa !10
  %11 = getelementptr inbounds %struct.gif_dest_struct, ptr %1, i64 0, i32 8
  %12 = getelementptr inbounds %struct.gif_dest_struct, ptr %1, i64 0, i32 7
  %13 = getelementptr inbounds %struct.gif_dest_struct, ptr %1, i64 0, i32 12
  %14 = getelementptr inbounds %struct.gif_dest_struct, ptr %1, i64 0, i32 13
  %15 = getelementptr inbounds %struct.gif_dest_struct, ptr %1, i64 0, i32 11
  %16 = getelementptr inbounds %struct.gif_dest_struct, ptr %1, i64 0, i32 9
  %17 = getelementptr inbounds %struct.gif_dest_struct, ptr %1, i64 0, i32 4
  %18 = getelementptr inbounds %struct.gif_dest_struct, ptr %1, i64 0, i32 2
  %19 = getelementptr inbounds %struct.gif_dest_struct, ptr %1, i64 0, i32 3
  br label %20

20:                                               ; preds = %93, %7
  %21 = phi i32 [ %5, %7 ], [ %94, %93 ]
  %22 = phi ptr [ %10, %7 ], [ %23, %93 ]
  %23 = getelementptr inbounds i8, ptr %22, i64 1
  %24 = load i8, ptr %22, align 1, !tbaa !7
  %25 = load i32, ptr %11, align 8, !tbaa !693
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %29, label %27

27:                                               ; preds = %20
  %28 = zext i8 %24 to i16
  store i16 %28, ptr %12, align 4, !tbaa !694
  store i32 0, ptr %11, align 8, !tbaa !693
  br label %93

29:                                               ; preds = %20
  %30 = zext i8 %24 to i32
  %31 = shl nuw nsw i32 %30, 4
  %32 = load i16, ptr %12, align 4, !tbaa !694
  %33 = sext i16 %32 to i32
  %34 = add nsw i32 %31, %33
  %35 = icmp sgt i32 %34, 5002
  %36 = add nsw i32 %34, -5003
  %37 = select i1 %35, i32 %36, i32 %34
  %38 = sext i16 %32 to i64
  %39 = shl nsw i64 %38, 8
  %40 = zext i8 %24 to i64
  %41 = or i64 %39, %40
  %42 = load ptr, ptr %13, align 8, !tbaa !691
  %43 = sext i32 %37 to i64
  %44 = getelementptr inbounds i16, ptr %42, i64 %43
  %45 = load i16, ptr %44, align 2, !tbaa !12
  %46 = icmp eq i16 %45, 0
  br i1 %46, label %72, label %47

47:                                               ; preds = %29
  %48 = load ptr, ptr %14, align 8, !tbaa !692
  %49 = getelementptr inbounds i64, ptr %48, i64 %43
  %50 = load i64, ptr %49, align 8, !tbaa !49
  %51 = icmp eq i64 %50, %41
  br i1 %51, label %52, label %53

52:                                               ; preds = %47
  store i16 %45, ptr %12, align 4, !tbaa !694
  br label %93

53:                                               ; preds = %47
  %54 = icmp eq i32 %37, 0
  %55 = add nsw i32 %37, -5003
  %56 = select i1 %54, i32 -1, i32 %55
  br label %57

57:                                               ; preds = %67, %53
  %58 = phi i32 [ %37, %53 ], [ %62, %67 ]
  %59 = add i32 %58, %56
  %60 = icmp slt i32 %59, 0
  %61 = add nsw i32 %59, 5003
  %62 = select i1 %60, i32 %61, i32 %59
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds i16, ptr %42, i64 %63
  %65 = load i16, ptr %64, align 2, !tbaa !12
  %66 = icmp eq i16 %65, 0
  br i1 %66, label %72, label %67

67:                                               ; preds = %57
  %68 = getelementptr inbounds i64, ptr %48, i64 %63
  %69 = load i64, ptr %68, align 8, !tbaa !49
  %70 = icmp eq i64 %69, %41
  br i1 %70, label %71, label %57

71:                                               ; preds = %67
  %.lcssa = phi i16 [ %65, %67 ]
  store i16 %.lcssa, ptr %12, align 4, !tbaa !694
  br label %93

72:                                               ; preds = %57, %29
  %73 = phi i32 [ %37, %29 ], [ %62, %57 ]
  tail call fastcc void @output(ptr noundef %1, i16 noundef signext %32) #33
  %74 = load i16, ptr %15, align 8, !tbaa !695
  %75 = icmp slt i16 %74, 4096
  br i1 %75, label %76, label %83

76:                                               ; preds = %72
  %77 = add nsw i16 %74, 1
  store i16 %77, ptr %15, align 8, !tbaa !695
  %78 = load ptr, ptr %13, align 8, !tbaa !691
  %79 = sext i32 %73 to i64
  %80 = getelementptr inbounds i16, ptr %78, i64 %79
  store i16 %74, ptr %80, align 2, !tbaa !12
  %81 = load ptr, ptr %14, align 8, !tbaa !692
  %82 = getelementptr inbounds i64, ptr %81, i64 %79
  store i64 %41, ptr %82, align 8, !tbaa !49
  br label %91

83:                                               ; preds = %72
  %84 = load ptr, ptr %13, align 8, !tbaa !691
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(10006) %84, i8 0, i64 10006, i1 false)
  %85 = load i16, ptr %16, align 4, !tbaa !696
  %86 = add i16 %85, 2
  store i16 %86, ptr %15, align 8, !tbaa !695
  tail call fastcc void @output(ptr noundef nonnull %1, i16 noundef signext %85) #33
  %87 = load i32, ptr %17, align 8, !tbaa !697
  store i32 %87, ptr %18, align 8, !tbaa !698
  %88 = shl nsw i32 -1, %87
  %89 = trunc i32 %88 to i16
  %90 = xor i16 %89, -1
  store i16 %90, ptr %19, align 4, !tbaa !699
  br label %91

91:                                               ; preds = %83, %76
  %92 = zext i8 %24 to i16
  store i16 %92, ptr %12, align 4, !tbaa !694
  br label %93

93:                                               ; preds = %91, %71, %52, %27
  %94 = add i32 %21, -1
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %20, !llvm.loop !700

96:                                               ; preds = %93, %3
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @finish_output_gif(ptr noundef %0, ptr nocapture noundef %1) #6 {
  %3 = getelementptr inbounds %struct.gif_dest_struct, ptr %1, i64 0, i32 8
  %4 = load i32, ptr %3, align 8, !tbaa !693
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.gif_dest_struct, ptr %1, i64 0, i32 7
  %8 = load i16, ptr %7, align 4, !tbaa !694
  tail call fastcc void @output(ptr noundef nonnull %1, i16 noundef signext %8) #33
  br label %9

9:                                                ; preds = %6, %2
  %10 = getelementptr inbounds %struct.gif_dest_struct, ptr %1, i64 0, i32 10
  %11 = load i16, ptr %10, align 2, !tbaa !701
  tail call fastcc void @output(ptr noundef nonnull %1, i16 noundef signext %11) #33
  %12 = getelementptr inbounds %struct.gif_dest_struct, ptr %1, i64 0, i32 6
  %13 = load i32, ptr %12, align 8, !tbaa !702
  %14 = icmp sgt i32 %13, 0
  br i1 %14, label %15, label %27

15:                                               ; preds = %9
  %16 = getelementptr inbounds %struct.gif_dest_struct, ptr %1, i64 0, i32 5
  %17 = load i64, ptr %16, align 8, !tbaa !703
  %18 = trunc i64 %17 to i8
  %19 = getelementptr inbounds %struct.gif_dest_struct, ptr %1, i64 0, i32 14
  %20 = load i32, ptr %19, align 8, !tbaa !704
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %19, align 8, !tbaa !704
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds %struct.gif_dest_struct, ptr %1, i64 0, i32 15, i64 %22
  store i8 %18, ptr %23, align 1, !tbaa !7
  %24 = load i32, ptr %19, align 8, !tbaa !704
  %25 = icmp sgt i32 %24, 254
  br i1 %25, label %26, label %27

26:                                               ; preds = %15
  tail call fastcc void @flush_packet(ptr noundef nonnull %1) #33
  br label %27

27:                                               ; preds = %26, %15, %9
  tail call fastcc void @flush_packet(ptr noundef nonnull %1) #33
  %28 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %1, i64 0, i32 3
  %29 = load ptr, ptr %28, align 8, !tbaa !705
  %30 = tail call i32 @putc(i32 noundef 0, ptr noundef %29) #33
  %31 = load ptr, ptr %28, align 8, !tbaa !705
  %32 = tail call i32 @putc(i32 noundef 59, ptr noundef %31) #33
  %33 = load ptr, ptr %28, align 8, !tbaa !705
  %34 = tail call i32 @fflush(ptr noundef %33) #33
  %35 = load ptr, ptr %28, align 8, !tbaa !705
  %36 = tail call i32 @ferror(ptr noundef %35) #32
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %42, label %38

38:                                               ; preds = %27
  %39 = load ptr, ptr %0, align 8, !tbaa !16
  %40 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %39, i64 0, i32 5
  store i32 36, ptr %40, align 8, !tbaa !25
  %41 = load ptr, ptr %39, align 8, !tbaa !26
  tail call void %41(ptr noundef nonnull %0) #32
  br label %42

42:                                               ; preds = %38, %27
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @output(ptr nocapture noundef %0, i16 noundef signext %1) unnamed_addr #6 {
  %3 = sext i16 %1 to i64
  %4 = getelementptr inbounds %struct.gif_dest_struct, ptr %0, i64 0, i32 6
  %5 = load i32, ptr %4, align 8, !tbaa !702
  %6 = zext i32 %5 to i64
  %7 = shl i64 %3, %6
  %8 = getelementptr inbounds %struct.gif_dest_struct, ptr %0, i64 0, i32 5
  %9 = load i64, ptr %8, align 8, !tbaa !703
  %10 = or i64 %7, %9
  store i64 %10, ptr %8, align 8, !tbaa !703
  %11 = getelementptr inbounds %struct.gif_dest_struct, ptr %0, i64 0, i32 2
  %12 = load i32, ptr %11, align 8, !tbaa !698
  %13 = add nsw i32 %12, %5
  store i32 %13, ptr %4, align 8, !tbaa !702
  %14 = icmp sgt i32 %13, 7
  br i1 %14, label %15, label %33

15:                                               ; preds = %2
  %16 = getelementptr inbounds %struct.gif_dest_struct, ptr %0, i64 0, i32 14
  br label %17

17:                                               ; preds = %27, %15
  %18 = phi i64 [ %10, %15 ], [ %29, %27 ]
  %19 = trunc i64 %18 to i8
  %20 = load i32, ptr %16, align 8, !tbaa !704
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %16, align 8, !tbaa !704
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds %struct.gif_dest_struct, ptr %0, i64 0, i32 15, i64 %22
  store i8 %19, ptr %23, align 1, !tbaa !7
  %24 = load i32, ptr %16, align 8, !tbaa !704
  %25 = icmp sgt i32 %24, 254
  br i1 %25, label %26, label %27

26:                                               ; preds = %17
  tail call fastcc void @flush_packet(ptr noundef nonnull %0) #33
  br label %27

27:                                               ; preds = %26, %17
  %28 = load i64, ptr %8, align 8, !tbaa !703
  %29 = ashr i64 %28, 8
  store i64 %29, ptr %8, align 8, !tbaa !703
  %30 = load i32, ptr %4, align 8, !tbaa !702
  %31 = add nsw i32 %30, -8
  store i32 %31, ptr %4, align 8, !tbaa !702
  %32 = icmp sgt i32 %30, 15
  br i1 %32, label %17, label %33, !llvm.loop !706

33:                                               ; preds = %27, %2
  %34 = getelementptr inbounds %struct.gif_dest_struct, ptr %0, i64 0, i32 11
  %35 = load i16, ptr %34, align 8, !tbaa !695
  %36 = getelementptr inbounds %struct.gif_dest_struct, ptr %0, i64 0, i32 3
  %37 = load i16, ptr %36, align 4, !tbaa !699
  %38 = icmp sgt i16 %35, %37
  br i1 %38, label %39, label %47

39:                                               ; preds = %33
  %40 = load i32, ptr %11, align 8, !tbaa !698
  %41 = add nsw i32 %40, 1
  store i32 %41, ptr %11, align 8, !tbaa !698
  %42 = icmp eq i32 %41, 12
  %43 = shl nsw i32 -1, %41
  %44 = trunc i32 %43 to i16
  %45 = xor i16 %44, -1
  %46 = select i1 %42, i16 4096, i16 %45
  store i16 %46, ptr %36, align 4, !tbaa !699
  br label %47

47:                                               ; preds = %39, %33
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @flush_packet(ptr nocapture noundef %0) unnamed_addr #6 {
  %2 = getelementptr inbounds %struct.gif_dest_struct, ptr %0, i64 0, i32 14
  %3 = load i32, ptr %2, align 8, !tbaa !704
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %5, label %23

5:                                                ; preds = %1
  %6 = add nuw nsw i32 %3, 1
  store i32 %6, ptr %2, align 8, !tbaa !704
  %7 = trunc i32 %3 to i8
  %8 = getelementptr inbounds %struct.gif_dest_struct, ptr %0, i64 0, i32 15
  store i8 %7, ptr %8, align 4, !tbaa !7
  %9 = zext i32 %6 to i64
  %10 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %0, i64 0, i32 3
  %11 = load ptr, ptr %10, align 8, !tbaa !705
  %12 = tail call i64 @fwrite(ptr noundef nonnull %8, i64 noundef 1, i64 noundef %9, ptr noundef %11) #33
  %13 = load i32, ptr %2, align 8, !tbaa !704
  %14 = sext i32 %13 to i64
  %15 = icmp eq i64 %12, %14
  br i1 %15, label %22, label %16

16:                                               ; preds = %5
  %17 = getelementptr inbounds %struct.gif_dest_struct, ptr %0, i64 0, i32 1
  %18 = load ptr, ptr %17, align 8, !tbaa !684
  %19 = load ptr, ptr %18, align 8, !tbaa !16
  %20 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %19, i64 0, i32 5
  store i32 36, ptr %20, align 8, !tbaa !25
  %21 = load ptr, ptr %19, align 8, !tbaa !26
  tail call void %21(ptr noundef nonnull %18) #32
  br label %22

22:                                               ; preds = %16, %5
  store i32 0, ptr %2, align 8, !tbaa !704
  br label %23

23:                                               ; preds = %22, %1
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @emit_header(ptr nocapture noundef %0, i32 noundef %1, ptr noundef readonly %2) unnamed_addr #6 {
  %4 = getelementptr inbounds %struct.gif_dest_struct, ptr %0, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8, !tbaa !684
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %5, i64 0, i32 42
  %7 = load i32, ptr %6, align 8, !tbaa !285
  %8 = add nsw i32 %7, -8
  %9 = icmp sgt i32 %1, 256
  br i1 %9, label %10, label %17

10:                                               ; preds = %3
  %11 = load ptr, ptr %5, align 8, !tbaa !16
  %12 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %11, i64 0, i32 5
  store i32 1039, ptr %12, align 8, !tbaa !25
  %13 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %11, i64 0, i32 6
  store i32 %1, ptr %13, align 4, !tbaa !7
  %14 = load ptr, ptr %4, align 8, !tbaa !684
  %15 = load ptr, ptr %14, align 8, !tbaa !16
  %16 = load ptr, ptr %15, align 8, !tbaa !26
  tail call void %16(ptr noundef nonnull %14) #32
  br label %17

17:                                               ; preds = %10, %3
  br label %18

18:                                               ; preds = %18, %17
  %19 = phi i32 [ %22, %18 ], [ 1, %17 ]
  %20 = shl nuw i32 1, %19
  %21 = icmp slt i32 %20, %1
  %22 = add nuw nsw i32 %19, 1
  br i1 %21, label %18, label %23, !llvm.loop !707

23:                                               ; preds = %18
  %.lcssa1 = phi i32 [ %19, %18 ]
  %.lcssa = phi i32 [ %20, %18 ]
  %24 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %0, i64 0, i32 3
  %25 = load ptr, ptr %24, align 8, !tbaa !705
  %26 = tail call i32 @putc(i32 noundef 71, ptr noundef %25) #33
  %27 = load ptr, ptr %24, align 8, !tbaa !705
  %28 = tail call i32 @putc(i32 noundef 73, ptr noundef %27) #33
  %29 = load ptr, ptr %24, align 8, !tbaa !705
  %30 = tail call i32 @putc(i32 noundef 70, ptr noundef %29) #33
  %31 = load ptr, ptr %24, align 8, !tbaa !705
  %32 = tail call i32 @putc(i32 noundef 56, ptr noundef %31) #33
  %33 = load ptr, ptr %24, align 8, !tbaa !705
  %34 = tail call i32 @putc(i32 noundef 55, ptr noundef %33) #33
  %35 = load ptr, ptr %24, align 8, !tbaa !705
  %36 = tail call i32 @putc(i32 noundef 97, ptr noundef %35) #33
  %37 = load ptr, ptr %4, align 8, !tbaa !684
  %38 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %37, i64 0, i32 26
  %39 = load i32, ptr %38, align 8, !tbaa !202
  %40 = and i32 %39, 255
  %41 = load ptr, ptr %24, align 8, !tbaa !705
  %42 = tail call i32 @putc(i32 noundef %40, ptr noundef %41) #33
  %43 = lshr i32 %39, 8
  %44 = and i32 %43, 255
  %45 = load ptr, ptr %24, align 8, !tbaa !705
  %46 = tail call i32 @putc(i32 noundef %44, ptr noundef %45) #33
  %47 = load ptr, ptr %4, align 8, !tbaa !684
  %48 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %47, i64 0, i32 27
  %49 = load i32, ptr %48, align 4, !tbaa !31
  %50 = and i32 %49, 255
  %51 = load ptr, ptr %24, align 8, !tbaa !705
  %52 = tail call i32 @putc(i32 noundef %50, ptr noundef %51) #33
  %53 = lshr i32 %49, 8
  %54 = and i32 %53, 255
  %55 = load ptr, ptr %24, align 8, !tbaa !705
  %56 = tail call i32 @putc(i32 noundef %54, ptr noundef %55) #33
  %57 = add nsw i32 %.lcssa1, -1
  %58 = shl i32 %57, 4
  %59 = or i32 %57, %58
  %60 = or i32 %59, 128
  %61 = load ptr, ptr %24, align 8, !tbaa !705
  %62 = tail call i32 @putc(i32 noundef %60, ptr noundef %61) #33
  %63 = load ptr, ptr %24, align 8, !tbaa !705
  %64 = tail call i32 @putc(i32 noundef 0, ptr noundef %63) #33
  %65 = load ptr, ptr %24, align 8, !tbaa !705
  %66 = tail call i32 @putc(i32 noundef 0, ptr noundef %65) #33
  %67 = icmp eq i32 %.lcssa1, 31
  br i1 %67, label %118, label %68

68:                                               ; preds = %23
  %69 = icmp eq ptr %2, null
  %70 = getelementptr inbounds ptr, ptr %2, i64 1
  %71 = getelementptr inbounds ptr, ptr %2, i64 2
  %72 = add nsw i32 %1, -1
  %73 = sdiv i32 %72, 2
  %74 = sext i32 %1 to i64
  %75 = tail call i32 @llvm.smax.i32(i32 %.lcssa, i32 1)
  %76 = zext i32 %75 to i64
  br label %77

77:                                               ; preds = %115, %68
  %78 = phi i64 [ 0, %68 ], [ %116, %115 ]
  %79 = icmp slt i64 %78, %74
  br i1 %79, label %80, label %114

80:                                               ; preds = %77
  br i1 %69, label %109, label %81

81:                                               ; preds = %80
  %82 = load ptr, ptr %4, align 8, !tbaa !684
  %83 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %82, i64 0, i32 10
  %84 = load i32, ptr %83, align 8, !tbaa !48
  %85 = icmp eq i32 %84, 2
  %86 = load ptr, ptr %2, align 8, !tbaa !10
  %87 = getelementptr inbounds i8, ptr %86, i64 %78
  %88 = load i8, ptr %87, align 1, !tbaa !7
  %89 = zext i8 %88 to i32
  %90 = lshr i32 %89, %8
  br i1 %85, label %91, label %108

91:                                               ; preds = %81
  %92 = load ptr, ptr %24, align 8, !tbaa !705
  %93 = tail call i32 @putc(i32 noundef %90, ptr noundef %92) #33
  %94 = load ptr, ptr %70, align 8, !tbaa !10
  %95 = getelementptr inbounds i8, ptr %94, i64 %78
  %96 = load i8, ptr %95, align 1, !tbaa !7
  %97 = zext i8 %96 to i32
  %98 = lshr i32 %97, %8
  %99 = load ptr, ptr %24, align 8, !tbaa !705
  %100 = tail call i32 @putc(i32 noundef %98, ptr noundef %99) #33
  %101 = load ptr, ptr %71, align 8, !tbaa !10
  %102 = getelementptr inbounds i8, ptr %101, i64 %78
  %103 = load i8, ptr %102, align 1, !tbaa !7
  %104 = zext i8 %103 to i32
  %105 = lshr i32 %104, %8
  %106 = load ptr, ptr %24, align 8, !tbaa !705
  %107 = tail call i32 @putc(i32 noundef %105, ptr noundef %106) #33
  br label %115

108:                                              ; preds = %81
  tail call fastcc void @put_3bytes(ptr noundef nonnull %0, i32 noundef %90) #33
  br label %115

109:                                              ; preds = %80
  %110 = trunc i64 %78 to i32
  %111 = mul nsw i32 %110, 255
  %112 = add nsw i32 %111, %73
  %113 = sdiv i32 %112, %72
  tail call fastcc void @put_3bytes(ptr noundef %0, i32 noundef %113) #33
  br label %115

114:                                              ; preds = %77
  tail call fastcc void @put_3bytes(ptr noundef %0, i32 noundef 0) #33
  br label %115

115:                                              ; preds = %114, %109, %108, %91
  %116 = add nuw nsw i64 %78, 1
  %117 = icmp eq i64 %116, %76
  br i1 %117, label %118, label %77, !llvm.loop !708

118:                                              ; preds = %115, %23
  %119 = tail call i32 @llvm.umax.i32(i32 %.lcssa1, i32 2)
  %120 = load ptr, ptr %24, align 8, !tbaa !705
  %121 = tail call i32 @putc(i32 noundef 44, ptr noundef %120) #33
  %122 = load ptr, ptr %24, align 8, !tbaa !705
  %123 = tail call i32 @putc(i32 noundef 0, ptr noundef %122) #33
  %124 = load ptr, ptr %24, align 8, !tbaa !705
  %125 = tail call i32 @putc(i32 noundef 0, ptr noundef %124) #33
  %126 = load ptr, ptr %24, align 8, !tbaa !705
  %127 = tail call i32 @putc(i32 noundef 0, ptr noundef %126) #33
  %128 = load ptr, ptr %24, align 8, !tbaa !705
  %129 = tail call i32 @putc(i32 noundef 0, ptr noundef %128) #33
  %130 = load ptr, ptr %4, align 8, !tbaa !684
  %131 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %130, i64 0, i32 26
  %132 = load i32, ptr %131, align 8, !tbaa !202
  %133 = and i32 %132, 255
  %134 = load ptr, ptr %24, align 8, !tbaa !705
  %135 = tail call i32 @putc(i32 noundef %133, ptr noundef %134) #33
  %136 = lshr i32 %132, 8
  %137 = and i32 %136, 255
  %138 = load ptr, ptr %24, align 8, !tbaa !705
  %139 = tail call i32 @putc(i32 noundef %137, ptr noundef %138) #33
  %140 = load ptr, ptr %4, align 8, !tbaa !684
  %141 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %140, i64 0, i32 27
  %142 = load i32, ptr %141, align 4, !tbaa !31
  %143 = and i32 %142, 255
  %144 = load ptr, ptr %24, align 8, !tbaa !705
  %145 = tail call i32 @putc(i32 noundef %143, ptr noundef %144) #33
  %146 = lshr i32 %142, 8
  %147 = and i32 %146, 255
  %148 = load ptr, ptr %24, align 8, !tbaa !705
  %149 = tail call i32 @putc(i32 noundef %147, ptr noundef %148) #33
  %150 = load ptr, ptr %24, align 8, !tbaa !705
  %151 = tail call i32 @putc(i32 noundef 0, ptr noundef %150) #33
  %152 = load ptr, ptr %24, align 8, !tbaa !705
  %153 = tail call i32 @putc(i32 noundef %119, ptr noundef %152) #33
  %154 = add nuw nsw i32 %119, 1
  %155 = getelementptr inbounds %struct.gif_dest_struct, ptr %0, i64 0, i32 4
  store i32 %154, ptr %155, align 8, !tbaa !697
  %156 = getelementptr inbounds %struct.gif_dest_struct, ptr %0, i64 0, i32 2
  store i32 %154, ptr %156, align 8, !tbaa !698
  %157 = shl i32 -2, %119
  %158 = trunc i32 %157 to i16
  %159 = xor i16 %158, -1
  %160 = getelementptr inbounds %struct.gif_dest_struct, ptr %0, i64 0, i32 3
  store i16 %159, ptr %160, align 4, !tbaa !699
  %161 = shl nuw i32 1, %119
  %162 = trunc i32 %161 to i16
  %163 = getelementptr inbounds %struct.gif_dest_struct, ptr %0, i64 0, i32 9
  store i16 %162, ptr %163, align 4, !tbaa !696
  %164 = add i16 %162, 1
  %165 = getelementptr inbounds %struct.gif_dest_struct, ptr %0, i64 0, i32 10
  store i16 %164, ptr %165, align 2, !tbaa !701
  %166 = add i16 %162, 2
  %167 = getelementptr inbounds %struct.gif_dest_struct, ptr %0, i64 0, i32 11
  store i16 %166, ptr %167, align 8, !tbaa !695
  %168 = getelementptr inbounds %struct.gif_dest_struct, ptr %0, i64 0, i32 8
  store i32 1, ptr %168, align 8, !tbaa !693
  %169 = getelementptr inbounds %struct.gif_dest_struct, ptr %0, i64 0, i32 14
  store i32 0, ptr %169, align 8, !tbaa !704
  %170 = getelementptr inbounds %struct.gif_dest_struct, ptr %0, i64 0, i32 5
  store i64 0, ptr %170, align 8, !tbaa !703
  %171 = getelementptr inbounds %struct.gif_dest_struct, ptr %0, i64 0, i32 6
  store i32 0, ptr %171, align 8, !tbaa !702
  %172 = getelementptr inbounds %struct.gif_dest_struct, ptr %0, i64 0, i32 12
  %173 = load ptr, ptr %172, align 8, !tbaa !691
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(10006) %173, i8 0, i64 10006, i1 false)
  %174 = load i16, ptr %163, align 4, !tbaa !696
  tail call fastcc void @output(ptr noundef %0, i16 noundef signext %174) #33
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal fastcc void @put_3bytes(ptr nocapture noundef readonly %0, i32 noundef %1) unnamed_addr #20 {
  %3 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %0, i64 0, i32 3
  %4 = load ptr, ptr %3, align 8, !tbaa !705
  %5 = tail call i32 @putc(i32 noundef %1, ptr noundef %4) #33
  %6 = load ptr, ptr %3, align 8, !tbaa !705
  %7 = tail call i32 @putc(i32 noundef %1, ptr noundef %6) #33
  %8 = load ptr, ptr %3, align 8, !tbaa !705
  %9 = tail call i32 @putc(i32 noundef %1, ptr noundef %8) #33
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.umax.i32(i32, i32) #14

; Function Attrs: nounwind optsize uwtable
define internal ptr @jinit_write_ppm(ptr noundef %0) #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !50
  %4 = load ptr, ptr %3, align 8, !tbaa !65
  %5 = tail call ptr %4(ptr noundef %0, i32 noundef 1, i64 noundef 80) #32
  store ptr @start_output_ppm, ptr %5, align 8, !tbaa !709
  %6 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %5, i64 0, i32 2
  store ptr @finish_output_ppm, ptr %6, align 8, !tbaa !711
  tail call void @jpeg_calc_output_dimensions(ptr noundef %0) #32
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  %8 = load i32, ptr %7, align 8, !tbaa !202
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 28
  %10 = load i32, ptr %9, align 8, !tbaa !199
  %11 = mul i32 %10, %8
  %12 = getelementptr inbounds %struct.ppm_dest_struct, ptr %5, i64 0, i32 4
  store i32 %11, ptr %12, align 8, !tbaa !712
  %13 = zext i32 %11 to i64
  %14 = getelementptr inbounds %struct.ppm_dest_struct, ptr %5, i64 0, i32 3
  store i64 %13, ptr %14, align 8, !tbaa !713
  %15 = load ptr, ptr %2, align 8, !tbaa !50
  %16 = load ptr, ptr %15, align 8, !tbaa !65
  %17 = tail call ptr %16(ptr noundef %0, i32 noundef 1, i64 noundef %13) #32
  %18 = getelementptr inbounds %struct.ppm_dest_struct, ptr %5, i64 0, i32 1
  store ptr %17, ptr %18, align 8, !tbaa !714
  %19 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 19
  %20 = load i32, ptr %19, align 4, !tbaa !43
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %44, label %22

22:                                               ; preds = %1
  %23 = load ptr, ptr %2, align 8, !tbaa !50
  %24 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %23, i64 0, i32 2
  %25 = load ptr, ptr %24, align 8, !tbaa !311
  %26 = load i32, ptr %7, align 8, !tbaa !202
  %27 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 29
  %28 = load i32, ptr %27, align 4, !tbaa !358
  %29 = mul i32 %28, %26
  %30 = tail call ptr %25(ptr noundef nonnull %0, i32 noundef 1, i32 noundef %29, i32 noundef 1) #32
  %31 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %5, i64 0, i32 4
  store ptr %30, ptr %31, align 8, !tbaa !715
  %32 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %5, i64 0, i32 5
  store i32 1, ptr %32, align 8, !tbaa !716
  %33 = load i32, ptr %19, align 4, !tbaa !43
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %37

35:                                               ; preds = %22
  %36 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %5, i64 0, i32 1
  store ptr @copy_pixel_rows, ptr %36, align 8, !tbaa !717
  br label %49

37:                                               ; preds = %22
  %38 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 10
  %39 = load i32, ptr %38, align 8, !tbaa !48
  %40 = icmp eq i32 %39, 1
  %41 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %5, i64 0, i32 1
  br i1 %40, label %42, label %43

42:                                               ; preds = %37
  store ptr @put_demapped_gray, ptr %41, align 8, !tbaa !717
  br label %49

43:                                               ; preds = %37
  store ptr @put_demapped_rgb, ptr %41, align 8, !tbaa !717
  br label %49

44:                                               ; preds = %1
  %45 = getelementptr inbounds %struct.ppm_dest_struct, ptr %5, i64 0, i32 2
  store ptr %17, ptr %45, align 8, !tbaa !718
  %46 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %5, i64 0, i32 4
  store ptr %45, ptr %46, align 8, !tbaa !715
  %47 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %5, i64 0, i32 5
  store i32 1, ptr %47, align 8, !tbaa !716
  %48 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %5, i64 0, i32 1
  store ptr @put_pixel_rows.218, ptr %48, align 8, !tbaa !717
  br label %49

49:                                               ; preds = %44, %43, %42, %35
  ret ptr %5
}

; Function Attrs: nounwind optsize uwtable
define internal void @start_output_ppm(ptr noundef %0, ptr nocapture noundef readonly %1) #6 {
  %3 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 10
  %4 = load i32, ptr %3, align 8, !tbaa !48
  switch i32 %4, label %25 [
    i32 1, label %5
    i32 2, label %15
  ]

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %1, i64 0, i32 3
  %7 = load ptr, ptr %6, align 8, !tbaa !719
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  %9 = load i32, ptr %8, align 8, !tbaa !202
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 27
  %12 = load i32, ptr %11, align 4, !tbaa !31
  %13 = zext i32 %12 to i64
  %14 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %7, ptr noundef nonnull @.str.219, i64 noundef %10, i64 noundef %13, i32 noundef 255) #33
  br label %29

15:                                               ; preds = %2
  %16 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %1, i64 0, i32 3
  %17 = load ptr, ptr %16, align 8, !tbaa !719
  %18 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  %19 = load i32, ptr %18, align 8, !tbaa !202
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 27
  %22 = load i32, ptr %21, align 4, !tbaa !31
  %23 = zext i32 %22 to i64
  %24 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %17, ptr noundef nonnull @.str.1.220, i64 noundef %20, i64 noundef %23, i32 noundef 255) #33
  br label %29

25:                                               ; preds = %2
  %26 = load ptr, ptr %0, align 8, !tbaa !16
  %27 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %26, i64 0, i32 5
  store i32 1025, ptr %27, align 8, !tbaa !25
  %28 = load ptr, ptr %26, align 8, !tbaa !26
  tail call void %28(ptr noundef nonnull %0) #32
  br label %29

29:                                               ; preds = %25, %15, %5
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @finish_output_ppm(ptr noundef %0, ptr nocapture noundef readonly %1) #6 {
  %3 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %1, i64 0, i32 3
  %4 = load ptr, ptr %3, align 8, !tbaa !27
  %5 = tail call i32 @fflush(ptr noundef %4) #33
  %6 = load ptr, ptr %3, align 8, !tbaa !27
  %7 = tail call i32 @ferror(ptr noundef %6) #32
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = load ptr, ptr %0, align 8, !tbaa !16
  %11 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %10, i64 0, i32 5
  store i32 36, ptr %11, align 8, !tbaa !25
  %12 = load ptr, ptr %10, align 8, !tbaa !26
  tail call void %12(ptr noundef nonnull %0) #32
  br label %13

13:                                               ; preds = %9, %2
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @copy_pixel_rows(ptr nocapture readnone %0, ptr nocapture noundef readonly %1, i32 %2) #20 {
  %4 = getelementptr inbounds %struct.ppm_dest_struct, ptr %1, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8, !tbaa !714
  %6 = getelementptr inbounds %struct.ppm_dest_struct, ptr %1, i64 0, i32 4
  %7 = load i32, ptr %6, align 8, !tbaa !712
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %24, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %1, i64 0, i32 4
  %11 = load ptr, ptr %10, align 8, !tbaa !715
  %12 = load ptr, ptr %11, align 8, !tbaa !10
  br label %13

13:                                               ; preds = %13, %9
  %14 = phi i32 [ %20, %13 ], [ %7, %9 ]
  %15 = phi ptr [ %17, %13 ], [ %12, %9 ]
  %16 = phi ptr [ %19, %13 ], [ %5, %9 ]
  %17 = getelementptr inbounds i8, ptr %15, i64 1
  %18 = load i8, ptr %15, align 1, !tbaa !7
  %19 = getelementptr inbounds i8, ptr %16, i64 1
  store i8 %18, ptr %16, align 1, !tbaa !7
  %20 = add i32 %14, -1
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %13, !llvm.loop !720

22:                                               ; preds = %13
  %23 = load ptr, ptr %4, align 8, !tbaa !714
  br label %24

24:                                               ; preds = %22, %3
  %25 = phi ptr [ %23, %22 ], [ %5, %3 ]
  %26 = getelementptr inbounds %struct.ppm_dest_struct, ptr %1, i64 0, i32 3
  %27 = load i64, ptr %26, align 8, !tbaa !713
  %28 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %1, i64 0, i32 3
  %29 = load ptr, ptr %28, align 8, !tbaa !719
  %30 = tail call i64 @fwrite(ptr noundef %25, i64 noundef 1, i64 noundef %27, ptr noundef %29) #33
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @put_demapped_gray(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 %2) #20 {
  %4 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 32
  %5 = load ptr, ptr %4, align 8, !tbaa !93
  %6 = load ptr, ptr %5, align 8, !tbaa !10
  %7 = getelementptr inbounds %struct.ppm_dest_struct, ptr %1, i64 0, i32 1
  %8 = load ptr, ptr %7, align 8, !tbaa !714
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  %10 = load i32, ptr %9, align 8, !tbaa !202
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %30, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %1, i64 0, i32 4
  %14 = load ptr, ptr %13, align 8, !tbaa !715
  %15 = load ptr, ptr %14, align 8, !tbaa !10
  br label %16

16:                                               ; preds = %16, %12
  %17 = phi i32 [ %26, %16 ], [ %10, %12 ]
  %18 = phi ptr [ %25, %16 ], [ %8, %12 ]
  %19 = phi ptr [ %20, %16 ], [ %15, %12 ]
  %20 = getelementptr inbounds i8, ptr %19, i64 1
  %21 = load i8, ptr %19, align 1, !tbaa !7
  %22 = zext i8 %21 to i64
  %23 = getelementptr inbounds i8, ptr %6, i64 %22
  %24 = load i8, ptr %23, align 1, !tbaa !7
  %25 = getelementptr inbounds i8, ptr %18, i64 1
  store i8 %24, ptr %18, align 1, !tbaa !7
  %26 = add i32 %17, -1
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %16, !llvm.loop !721

28:                                               ; preds = %16
  %29 = load ptr, ptr %7, align 8, !tbaa !714
  br label %30

30:                                               ; preds = %28, %3
  %31 = phi ptr [ %29, %28 ], [ %8, %3 ]
  %32 = getelementptr inbounds %struct.ppm_dest_struct, ptr %1, i64 0, i32 3
  %33 = load i64, ptr %32, align 8, !tbaa !713
  %34 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %1, i64 0, i32 3
  %35 = load ptr, ptr %34, align 8, !tbaa !719
  %36 = tail call i64 @fwrite(ptr noundef %31, i64 noundef 1, i64 noundef %33, ptr noundef %35) #33
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @put_demapped_rgb(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 %2) #20 {
  %4 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 32
  %5 = load ptr, ptr %4, align 8, !tbaa !93
  %6 = load ptr, ptr %5, align 8, !tbaa !10
  %7 = getelementptr inbounds ptr, ptr %5, i64 1
  %8 = load ptr, ptr %7, align 8, !tbaa !10
  %9 = getelementptr inbounds ptr, ptr %5, i64 2
  %10 = load ptr, ptr %9, align 8, !tbaa !10
  %11 = getelementptr inbounds %struct.ppm_dest_struct, ptr %1, i64 0, i32 1
  %12 = load ptr, ptr %11, align 8, !tbaa !714
  %13 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  %14 = load i32, ptr %13, align 8, !tbaa !202
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %40, label %16

16:                                               ; preds = %3
  %17 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %1, i64 0, i32 4
  %18 = load ptr, ptr %17, align 8, !tbaa !715
  %19 = load ptr, ptr %18, align 8, !tbaa !10
  br label %20

20:                                               ; preds = %20, %16
  %21 = phi i32 [ %36, %20 ], [ %14, %16 ]
  %22 = phi ptr [ %35, %20 ], [ %12, %16 ]
  %23 = phi ptr [ %24, %20 ], [ %19, %16 ]
  %24 = getelementptr inbounds i8, ptr %23, i64 1
  %25 = load i8, ptr %23, align 1, !tbaa !7
  %26 = zext i8 %25 to i64
  %27 = getelementptr inbounds i8, ptr %6, i64 %26
  %28 = load i8, ptr %27, align 1, !tbaa !7
  %29 = getelementptr inbounds i8, ptr %22, i64 1
  store i8 %28, ptr %22, align 1, !tbaa !7
  %30 = getelementptr inbounds i8, ptr %8, i64 %26
  %31 = load i8, ptr %30, align 1, !tbaa !7
  %32 = getelementptr inbounds i8, ptr %22, i64 2
  store i8 %31, ptr %29, align 1, !tbaa !7
  %33 = getelementptr inbounds i8, ptr %10, i64 %26
  %34 = load i8, ptr %33, align 1, !tbaa !7
  %35 = getelementptr inbounds i8, ptr %22, i64 3
  store i8 %34, ptr %32, align 1, !tbaa !7
  %36 = add i32 %21, -1
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %20, !llvm.loop !722

38:                                               ; preds = %20
  %39 = load ptr, ptr %11, align 8, !tbaa !714
  br label %40

40:                                               ; preds = %38, %3
  %41 = phi ptr [ %39, %38 ], [ %12, %3 ]
  %42 = getelementptr inbounds %struct.ppm_dest_struct, ptr %1, i64 0, i32 3
  %43 = load i64, ptr %42, align 8, !tbaa !713
  %44 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %1, i64 0, i32 3
  %45 = load ptr, ptr %44, align 8, !tbaa !719
  %46 = tail call i64 @fwrite(ptr noundef %41, i64 noundef 1, i64 noundef %43, ptr noundef %45) #33
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @put_pixel_rows.218(ptr nocapture readnone %0, ptr nocapture noundef readonly %1, i32 %2) #20 {
  %4 = getelementptr inbounds %struct.ppm_dest_struct, ptr %1, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8, !tbaa !714
  %6 = getelementptr inbounds %struct.ppm_dest_struct, ptr %1, i64 0, i32 3
  %7 = load i64, ptr %6, align 8, !tbaa !713
  %8 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %1, i64 0, i32 3
  %9 = load ptr, ptr %8, align 8, !tbaa !719
  %10 = tail call i64 @fwrite(ptr noundef %5, i64 noundef 1, i64 noundef %7, ptr noundef %9) #33
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @jinit_write_targa(ptr noundef %0) #6 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !50
  %4 = load ptr, ptr %3, align 8, !tbaa !65
  %5 = tail call ptr %4(ptr noundef %0, i32 noundef 1, i64 noundef 64) #32
  store ptr @start_output_tga, ptr %5, align 8, !tbaa !723
  %6 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %5, i64 0, i32 2
  store ptr @finish_output_tga, ptr %6, align 8, !tbaa !725
  tail call void @jpeg_calc_output_dimensions(ptr noundef %0) #32
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  %8 = load i32, ptr %7, align 8, !tbaa !202
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 29
  %10 = load i32, ptr %9, align 4, !tbaa !358
  %11 = mul i32 %10, %8
  %12 = getelementptr inbounds %struct.tga_dest_struct, ptr %5, i64 0, i32 2
  store i32 %11, ptr %12, align 8, !tbaa !726
  %13 = load ptr, ptr %2, align 8, !tbaa !50
  %14 = load ptr, ptr %13, align 8, !tbaa !65
  %15 = zext i32 %11 to i64
  %16 = tail call ptr %14(ptr noundef %0, i32 noundef 1, i64 noundef %15) #32
  %17 = getelementptr inbounds %struct.tga_dest_struct, ptr %5, i64 0, i32 1
  store ptr %16, ptr %17, align 8, !tbaa !727
  %18 = load ptr, ptr %2, align 8, !tbaa !50
  %19 = getelementptr inbounds %struct.jpeg_memory_mgr, ptr %18, i64 0, i32 2
  %20 = load ptr, ptr %19, align 8, !tbaa !311
  %21 = load i32, ptr %12, align 8, !tbaa !726
  %22 = tail call ptr %20(ptr noundef %0, i32 noundef 1, i32 noundef %21, i32 noundef 1) #32
  %23 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %5, i64 0, i32 4
  store ptr %22, ptr %23, align 8, !tbaa !728
  %24 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %5, i64 0, i32 5
  store i32 1, ptr %24, align 8, !tbaa !729
  ret ptr %5
}

; Function Attrs: nounwind optsize uwtable
define internal void @start_output_tga(ptr noundef %0, ptr nocapture noundef %1) #6 {
  %3 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 10
  %4 = load i32, ptr %3, align 8, !tbaa !48
  switch i32 %4, label %61 [
    i32 1, label %5
    i32 2, label %12
  ]

5:                                                ; preds = %2
  tail call fastcc void @write_header(ptr noundef nonnull %0, ptr noundef %1, i32 noundef 0) #33
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 19
  %7 = load i32, ptr %6, align 4, !tbaa !43
  %8 = icmp eq i32 %7, 0
  %9 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %1, i64 0, i32 1
  br i1 %8, label %11, label %10

10:                                               ; preds = %5
  store ptr @put_demapped_gray.223, ptr %9, align 8, !tbaa !730
  br label %65

11:                                               ; preds = %5
  store ptr @put_gray_rows.224, ptr %9, align 8, !tbaa !730
  br label %65

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 19
  %14 = load i32, ptr %13, align 4, !tbaa !43
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %59, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 31
  %18 = load i32, ptr %17, align 4, !tbaa !549
  %19 = icmp sgt i32 %18, 256
  br i1 %19, label %20, label %26

20:                                               ; preds = %16
  %21 = load ptr, ptr %0, align 8, !tbaa !16
  %22 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %21, i64 0, i32 5
  store i32 1039, ptr %22, align 8, !tbaa !25
  %23 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %21, i64 0, i32 6
  store i32 %18, ptr %23, align 4, !tbaa !7
  %24 = load ptr, ptr %0, align 8, !tbaa !16
  %25 = load ptr, ptr %24, align 8, !tbaa !26
  tail call void %25(ptr noundef nonnull %0) #32
  tail call fastcc void @write_header(ptr noundef nonnull %0, ptr noundef %1, i32 noundef %18) #33
  br label %28

26:                                               ; preds = %16
  tail call fastcc void @write_header(ptr noundef nonnull %0, ptr noundef %1, i32 noundef %18) #33
  %27 = icmp sgt i32 %18, 0
  br i1 %27, label %28, label %57

28:                                               ; preds = %26, %20
  %29 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %1, i64 0, i32 3
  %30 = load ptr, ptr %29, align 8, !tbaa !731
  %31 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 32
  %32 = zext i32 %18 to i64
  br label %33

33:                                               ; preds = %33, %28
  %34 = phi i64 [ 0, %28 ], [ %55, %33 ]
  %35 = load ptr, ptr %31, align 8, !tbaa !93
  %36 = getelementptr inbounds ptr, ptr %35, i64 2
  %37 = load ptr, ptr %36, align 8, !tbaa !10
  %38 = getelementptr inbounds i8, ptr %37, i64 %34
  %39 = load i8, ptr %38, align 1, !tbaa !7
  %40 = zext i8 %39 to i32
  %41 = tail call i32 @putc(i32 noundef %40, ptr noundef %30) #33
  %42 = load ptr, ptr %31, align 8, !tbaa !93
  %43 = getelementptr inbounds ptr, ptr %42, i64 1
  %44 = load ptr, ptr %43, align 8, !tbaa !10
  %45 = getelementptr inbounds i8, ptr %44, i64 %34
  %46 = load i8, ptr %45, align 1, !tbaa !7
  %47 = zext i8 %46 to i32
  %48 = tail call i32 @putc(i32 noundef %47, ptr noundef %30) #33
  %49 = load ptr, ptr %31, align 8, !tbaa !93
  %50 = load ptr, ptr %49, align 8, !tbaa !10
  %51 = getelementptr inbounds i8, ptr %50, i64 %34
  %52 = load i8, ptr %51, align 1, !tbaa !7
  %53 = zext i8 %52 to i32
  %54 = tail call i32 @putc(i32 noundef %53, ptr noundef %30) #33
  %55 = add nuw nsw i64 %34, 1
  %56 = icmp eq i64 %55, %32
  br i1 %56, label %57, label %33, !llvm.loop !732

57:                                               ; preds = %33, %26
  %58 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %1, i64 0, i32 1
  store ptr @put_gray_rows.224, ptr %58, align 8, !tbaa !730
  br label %65

59:                                               ; preds = %12
  tail call fastcc void @write_header(ptr noundef nonnull %0, ptr noundef %1, i32 noundef 0) #33
  %60 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %1, i64 0, i32 1
  store ptr @put_pixel_rows.225, ptr %60, align 8, !tbaa !730
  br label %65

61:                                               ; preds = %2
  %62 = load ptr, ptr %0, align 8, !tbaa !16
  %63 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %62, i64 0, i32 5
  store i32 1034, ptr %63, align 8, !tbaa !25
  %64 = load ptr, ptr %62, align 8, !tbaa !26
  tail call void %64(ptr noundef nonnull %0) #32
  br label %65

65:                                               ; preds = %61, %59, %57, %11, %10
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @finish_output_tga(ptr noundef %0, ptr nocapture noundef readonly %1) #6 {
  %3 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %1, i64 0, i32 3
  %4 = load ptr, ptr %3, align 8, !tbaa !27
  %5 = tail call i32 @fflush(ptr noundef %4) #33
  %6 = load ptr, ptr %3, align 8, !tbaa !27
  %7 = tail call i32 @ferror(ptr noundef %6) #32
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = load ptr, ptr %0, align 8, !tbaa !16
  %11 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %10, i64 0, i32 5
  store i32 36, ptr %11, align 8, !tbaa !25
  %12 = load ptr, ptr %10, align 8, !tbaa !26
  tail call void %12(ptr noundef nonnull %0) #32
  br label %13

13:                                               ; preds = %9, %2
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @write_header(ptr noundef %0, ptr nocapture noundef readonly %1, i32 noundef %2) unnamed_addr #6 {
  %4 = alloca [18 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 18, ptr nonnull %4) #31
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(18) %4, i8 0, i64 18, i1 false)
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %14

6:                                                ; preds = %3
  %7 = getelementptr inbounds [18 x i8], ptr %4, i64 0, i64 1
  store i8 1, ptr %7, align 1, !tbaa !7
  %8 = trunc i32 %2 to i8
  %9 = getelementptr inbounds [18 x i8], ptr %4, i64 0, i64 5
  store i8 %8, ptr %9, align 1, !tbaa !7
  %10 = lshr i32 %2, 8
  %11 = trunc i32 %10 to i8
  %12 = getelementptr inbounds [18 x i8], ptr %4, i64 0, i64 6
  store i8 %11, ptr %12, align 2, !tbaa !7
  %13 = getelementptr inbounds [18 x i8], ptr %4, i64 0, i64 7
  store i8 24, ptr %13, align 1, !tbaa !7
  br label %14

14:                                               ; preds = %6, %3
  %15 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  %16 = load i32, ptr %15, align 8, !tbaa !202
  %17 = trunc i32 %16 to i8
  %18 = getelementptr inbounds [18 x i8], ptr %4, i64 0, i64 12
  store i8 %17, ptr %18, align 4, !tbaa !7
  %19 = lshr i32 %16, 8
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds [18 x i8], ptr %4, i64 0, i64 13
  store i8 %20, ptr %21, align 1, !tbaa !7
  %22 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 27
  %23 = load i32, ptr %22, align 4, !tbaa !31
  %24 = trunc i32 %23 to i8
  %25 = getelementptr inbounds [18 x i8], ptr %4, i64 0, i64 14
  store i8 %24, ptr %25, align 2, !tbaa !7
  %26 = lshr i32 %23, 8
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds [18 x i8], ptr %4, i64 0, i64 15
  store i8 %27, ptr %28, align 1, !tbaa !7
  %29 = getelementptr inbounds [18 x i8], ptr %4, i64 0, i64 17
  store i8 32, ptr %29, align 1, !tbaa !7
  %30 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 10
  %31 = load i32, ptr %30, align 8, !tbaa !48
  %32 = icmp eq i32 %31, 1
  %33 = getelementptr inbounds [18 x i8], ptr %4, i64 0, i64 2
  br i1 %32, label %34, label %36

34:                                               ; preds = %14
  store i8 3, ptr %33, align 2, !tbaa !7
  %35 = getelementptr inbounds [18 x i8], ptr %4, i64 0, i64 16
  store i8 8, ptr %35, align 16, !tbaa !7
  br label %40

36:                                               ; preds = %14
  %37 = getelementptr inbounds [18 x i8], ptr %4, i64 0, i64 16
  br i1 %5, label %38, label %39

38:                                               ; preds = %36
  store i8 1, ptr %33, align 2, !tbaa !7
  store i8 8, ptr %37, align 16, !tbaa !7
  br label %40

39:                                               ; preds = %36
  store i8 2, ptr %33, align 2, !tbaa !7
  store i8 24, ptr %37, align 16, !tbaa !7
  br label %40

40:                                               ; preds = %39, %38, %34
  %41 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %1, i64 0, i32 3
  %42 = load ptr, ptr %41, align 8, !tbaa !27
  %43 = call i64 @fwrite(ptr noundef nonnull %4, i64 noundef 1, i64 noundef 18, ptr noundef %42) #33
  %44 = icmp eq i64 %43, 18
  br i1 %44, label %49, label %45

45:                                               ; preds = %40
  %46 = load ptr, ptr %0, align 8, !tbaa !16
  %47 = getelementptr inbounds %struct.jpeg_error_mgr, ptr %46, i64 0, i32 5
  store i32 36, ptr %47, align 8, !tbaa !25
  %48 = load ptr, ptr %46, align 8, !tbaa !26
  tail call void %48(ptr noundef nonnull %0) #32
  br label %49

49:                                               ; preds = %45, %40
  call void @llvm.lifetime.end.p0(i64 18, ptr nonnull %4) #31
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @put_demapped_gray.223(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 %2) #20 {
  %4 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 32
  %5 = load ptr, ptr %4, align 8, !tbaa !93
  %6 = load ptr, ptr %5, align 8, !tbaa !10
  %7 = getelementptr inbounds %struct.tga_dest_struct, ptr %1, i64 0, i32 1
  %8 = load ptr, ptr %7, align 8, !tbaa !727
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  %10 = load i32, ptr %9, align 8, !tbaa !202
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %30, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %1, i64 0, i32 4
  %14 = load ptr, ptr %13, align 8, !tbaa !728
  %15 = load ptr, ptr %14, align 8, !tbaa !10
  br label %16

16:                                               ; preds = %16, %12
  %17 = phi i32 [ %26, %16 ], [ %10, %12 ]
  %18 = phi ptr [ %20, %16 ], [ %15, %12 ]
  %19 = phi ptr [ %25, %16 ], [ %8, %12 ]
  %20 = getelementptr inbounds i8, ptr %18, i64 1
  %21 = load i8, ptr %18, align 1, !tbaa !7
  %22 = zext i8 %21 to i64
  %23 = getelementptr inbounds i8, ptr %6, i64 %22
  %24 = load i8, ptr %23, align 1, !tbaa !7
  %25 = getelementptr inbounds i8, ptr %19, i64 1
  store i8 %24, ptr %19, align 1, !tbaa !7
  %26 = add i32 %17, -1
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %16, !llvm.loop !733

28:                                               ; preds = %16
  %29 = load ptr, ptr %7, align 8, !tbaa !727
  br label %30

30:                                               ; preds = %28, %3
  %31 = phi ptr [ %29, %28 ], [ %8, %3 ]
  %32 = getelementptr inbounds %struct.tga_dest_struct, ptr %1, i64 0, i32 2
  %33 = load i32, ptr %32, align 8, !tbaa !726
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %1, i64 0, i32 3
  %36 = load ptr, ptr %35, align 8, !tbaa !731
  %37 = tail call i64 @fwrite(ptr noundef %31, i64 noundef 1, i64 noundef %34, ptr noundef %36) #33
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @put_gray_rows.224(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 %2) #20 {
  %4 = getelementptr inbounds %struct.tga_dest_struct, ptr %1, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8, !tbaa !727
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  %7 = load i32, ptr %6, align 8, !tbaa !202
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %24, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %1, i64 0, i32 4
  %11 = load ptr, ptr %10, align 8, !tbaa !728
  %12 = load ptr, ptr %11, align 8, !tbaa !10
  br label %13

13:                                               ; preds = %13, %9
  %14 = phi i32 [ %20, %13 ], [ %7, %9 ]
  %15 = phi ptr [ %19, %13 ], [ %5, %9 ]
  %16 = phi ptr [ %17, %13 ], [ %12, %9 ]
  %17 = getelementptr inbounds i8, ptr %16, i64 1
  %18 = load i8, ptr %16, align 1, !tbaa !7
  %19 = getelementptr inbounds i8, ptr %15, i64 1
  store i8 %18, ptr %15, align 1, !tbaa !7
  %20 = add i32 %14, -1
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %13, !llvm.loop !734

22:                                               ; preds = %13
  %23 = load ptr, ptr %4, align 8, !tbaa !727
  br label %24

24:                                               ; preds = %22, %3
  %25 = phi ptr [ %23, %22 ], [ %5, %3 ]
  %26 = getelementptr inbounds %struct.tga_dest_struct, ptr %1, i64 0, i32 2
  %27 = load i32, ptr %26, align 8, !tbaa !726
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %1, i64 0, i32 3
  %30 = load ptr, ptr %29, align 8, !tbaa !731
  %31 = tail call i64 @fwrite(ptr noundef %25, i64 noundef 1, i64 noundef %28, ptr noundef %30) #33
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @put_pixel_rows.225(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 %2) #20 {
  %4 = getelementptr inbounds %struct.tga_dest_struct, ptr %1, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8, !tbaa !727
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, ptr %0, i64 0, i32 26
  %7 = load i32, ptr %6, align 8, !tbaa !202
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %30, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %1, i64 0, i32 4
  %11 = load ptr, ptr %10, align 8, !tbaa !728
  %12 = load ptr, ptr %11, align 8, !tbaa !10
  br label %13

13:                                               ; preds = %13, %9
  %14 = phi i32 [ %26, %13 ], [ %7, %9 ]
  %15 = phi ptr [ %25, %13 ], [ %5, %9 ]
  %16 = phi ptr [ %24, %13 ], [ %12, %9 ]
  %17 = getelementptr inbounds i8, ptr %16, i64 2
  %18 = load i8, ptr %17, align 1, !tbaa !7
  store i8 %18, ptr %15, align 1, !tbaa !7
  %19 = getelementptr inbounds i8, ptr %16, i64 1
  %20 = load i8, ptr %19, align 1, !tbaa !7
  %21 = getelementptr inbounds i8, ptr %15, i64 1
  store i8 %20, ptr %21, align 1, !tbaa !7
  %22 = load i8, ptr %16, align 1, !tbaa !7
  %23 = getelementptr inbounds i8, ptr %15, i64 2
  store i8 %22, ptr %23, align 1, !tbaa !7
  %24 = getelementptr inbounds i8, ptr %16, i64 3
  %25 = getelementptr inbounds i8, ptr %15, i64 3
  %26 = add i32 %14, -1
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %13, !llvm.loop !735

28:                                               ; preds = %13
  %29 = load ptr, ptr %4, align 8, !tbaa !727
  br label %30

30:                                               ; preds = %28, %3
  %31 = phi ptr [ %29, %28 ], [ %5, %3 ]
  %32 = getelementptr inbounds %struct.tga_dest_struct, ptr %1, i64 0, i32 2
  %33 = load i32, ptr %32, align 8, !tbaa !726
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds %struct.djpeg_dest_struct, ptr %1, i64 0, i32 3
  %36 = load ptr, ptr %35, align 8, !tbaa !731
  %37 = tail call i64 @fwrite(ptr noundef %31, i64 noundef 1, i64 noundef %34, ptr noundef %36) #33
  ret void
}

attributes #0 = { nofree nounwind optsize memory(read) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { mustprogress nofree nosync nounwind optsize willreturn memory(none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { mustprogress nofree nounwind optsize willreturn memory(read) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, argmem: none, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { noreturn nounwind optsize uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #6 = { nounwind optsize uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { nofree nounwind optsize "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { noreturn nounwind optsize "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #9 = { nofree nounwind }
attributes #10 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #11 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(write, argmem: readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #12 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #13 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #14 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #15 = { nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #16 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #17 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #18 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #19 = { mustprogress nofree nosync nounwind optsize willreturn memory(argmem: write) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #20 = { nofree nounwind optsize uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #21 = { nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #22 = { nofree nounwind optsize memory(read) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #23 = { mustprogress nofree nounwind optsize willreturn memory(inaccessiblemem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #24 = { mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #25 = { mustprogress nounwind optsize willreturn memory(argmem: readwrite, inaccessiblemem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #26 = { mustprogress nounwind optsize willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #27 = { nofree norecurse nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #28 = { mustprogress nofree nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #29 = { nounwind optsize willreturn memory(none) }
attributes #30 = { nounwind optsize willreturn memory(read) }
attributes #31 = { nounwind }
attributes #32 = { nounwind optsize }
attributes #33 = { optsize }
attributes #34 = { cold optsize }
attributes #35 = { noreturn nounwind optsize }
attributes #36 = { cold }
attributes #37 = { nounwind optsize allocsize(0) }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0}
!llvm.module.flags = !{!1, !2, !3, !4, !5, !6}

!0 = !{!"clang version 17.0.6 (https://github.com/Casperento/llvm-project.git 9b0073551ece0d22bf3378af2b03e456a26031b6)"}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 8, !"PIC Level", i32 2}
!3 = !{i32 7, !"PIE Level", i32 2}
!4 = !{i32 7, !"uwtable", i32 2}
!5 = !{i32 1, !"ThinLTO", i32 0}
!6 = !{i32 1, !"EnableSplitLTOUnit", i32 1}
!7 = !{!8, !8, i64 0}
!8 = !{!"omnipotent char", !9, i64 0}
!9 = !{!"Simple C/C++ TBAA"}
!10 = !{!11, !11, i64 0}
!11 = !{!"any pointer", !8, i64 0}
!12 = !{!13, !13, i64 0}
!13 = !{!"short", !8, i64 0}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.mustprogress"}
!16 = !{!17, !11, i64 0}
!17 = !{!"jpeg_decompress_struct", !11, i64 0, !11, i64 8, !11, i64 16, !18, i64 24, !18, i64 28, !11, i64 32, !18, i64 40, !18, i64 44, !18, i64 48, !8, i64 52, !8, i64 56, !18, i64 60, !18, i64 64, !19, i64 72, !18, i64 80, !18, i64 84, !8, i64 88, !18, i64 92, !18, i64 96, !18, i64 100, !8, i64 104, !18, i64 108, !18, i64 112, !18, i64 116, !18, i64 120, !18, i64 124, !18, i64 128, !18, i64 132, !18, i64 136, !18, i64 140, !18, i64 144, !18, i64 148, !11, i64 152, !18, i64 160, !18, i64 164, !18, i64 168, !18, i64 172, !18, i64 176, !11, i64 184, !8, i64 192, !8, i64 224, !8, i64 256, !18, i64 288, !11, i64 296, !18, i64 304, !18, i64 308, !8, i64 312, !8, i64 328, !8, i64 344, !18, i64 360, !18, i64 364, !8, i64 368, !13, i64 370, !13, i64 372, !18, i64 376, !8, i64 380, !18, i64 384, !18, i64 388, !18, i64 392, !18, i64 396, !18, i64 400, !11, i64 408, !18, i64 416, !8, i64 424, !18, i64 456, !18, i64 460, !18, i64 464, !8, i64 468, !18, i64 508, !18, i64 512, !18, i64 516, !18, i64 520, !18, i64 524, !11, i64 528, !11, i64 536, !11, i64 544, !11, i64 552, !11, i64 560, !11, i64 568, !11, i64 576, !11, i64 584, !11, i64 592, !11, i64 600, !11, i64 608}
!18 = !{!"int", !8, i64 0}
!19 = !{!"double", !8, i64 0}
!20 = !{!21, !11, i64 152}
!21 = !{!"jpeg_error_mgr", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !18, i64 40, !8, i64 44, !18, i64 124, !22, i64 128, !11, i64 136, !18, i64 144, !11, i64 152, !18, i64 160, !18, i64 164}
!22 = !{!"long", !8, i64 0}
!23 = !{!21, !18, i64 160}
!24 = !{!21, !18, i64 164}
!25 = !{!21, !18, i64 40}
!26 = !{!21, !11, i64 0}
!27 = !{!28, !11, i64 24}
!28 = !{!"djpeg_dest_struct", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !18, i64 40}
!29 = !{!28, !11, i64 0}
!30 = !{!17, !18, i64 160}
!31 = !{!17, !18, i64 132}
!32 = !{!28, !11, i64 32}
!33 = !{!28, !18, i64 40}
!34 = !{!28, !11, i64 8}
!35 = distinct !{!35, !15}
!36 = !{!28, !11, i64 16}
!37 = !{!21, !22, i64 128}
!38 = !{!21, !18, i64 124}
!39 = !{i32 0, i32 256}
!40 = distinct !{!40, !15}
!41 = !{!18, !18, i64 0}
!42 = !{!17, !18, i64 112}
!43 = !{!17, !18, i64 100}
!44 = !{!17, !8, i64 88}
!45 = !{!17, !8, i64 104}
!46 = !{!17, !18, i64 108}
!47 = !{!17, !18, i64 92}
!48 = !{!17, !8, i64 56}
!49 = !{!22, !22, i64 0}
!50 = !{!17, !11, i64 8}
!51 = !{!52, !22, i64 88}
!52 = !{!"jpeg_memory_mgr", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !11, i64 72, !11, i64 80, !22, i64 88}
!53 = distinct !{!53, !15}
!54 = !{!17, !11, i64 32}
!55 = !{!56, !22, i64 8}
!56 = !{!"jpeg_source_mgr", !11, i64 0, !22, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48}
!57 = !{!56, !11, i64 24}
!58 = !{!56, !11, i64 0}
!59 = !{!60, !11, i64 8}
!60 = !{!"jpeg_common_struct", !11, i64 0, !11, i64 8, !11, i64 16, !18, i64 24, !18, i64 28}
!61 = !{!52, !11, i64 72}
!62 = !{!60, !18, i64 24}
!63 = !{!60, !18, i64 28}
!64 = !{!52, !11, i64 80}
!65 = !{!52, !11, i64 0}
!66 = !{!67, !18, i64 128}
!67 = !{!"", !8, i64 0, !18, i64 128}
!68 = !{!69, !18, i64 276}
!69 = !{!"", !8, i64 0, !8, i64 17, !18, i64 276}
!70 = !{!17, !18, i64 24}
!71 = !{!17, !11, i64 16}
!72 = !{!17, !18, i64 28}
!73 = !{!17, !11, i64 568}
!74 = !{!75, !11, i64 24}
!75 = !{!"jpeg_marker_reader", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !8, i64 32, !18, i64 160, !18, i64 164, !18, i64 168, !18, i64 172}
!76 = !{!17, !11, i64 560}
!77 = !{!78, !11, i64 8}
!78 = !{!"jpeg_input_controller", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !18, i64 32, !18, i64 36}
!79 = !{!56, !11, i64 16}
!80 = !{!78, !11, i64 0}
!81 = !{!17, !18, i64 48}
!82 = !{!17, !18, i64 364}
!83 = !{!17, !18, i64 376}
!84 = !{!17, !8, i64 380}
!85 = !{!21, !11, i64 8}
!86 = !{!17, !11, i64 296}
!87 = !{!88, !18, i64 0}
!88 = !{!"", !18, i64 0, !18, i64 4, !18, i64 8, !18, i64 12, !18, i64 16, !18, i64 20, !18, i64 24, !18, i64 28, !18, i64 32, !18, i64 36, !18, i64 40, !18, i64 44, !18, i64 48, !18, i64 52, !18, i64 56, !18, i64 60, !18, i64 64, !18, i64 68, !18, i64 72, !11, i64 80, !11, i64 88}
!89 = !{!17, !8, i64 52}
!90 = !{!17, !18, i64 60}
!91 = !{!17, !18, i64 64}
!92 = !{!17, !19, i64 72}
!93 = !{!17, !11, i64 152}
!94 = !{!17, !18, i64 80}
!95 = !{!17, !11, i64 528}
!96 = !{!97, !11, i64 8}
!97 = !{!"jpeg_decomp_master", !11, i64 0, !11, i64 8, !18, i64 16}
!98 = !{!78, !18, i64 36}
!99 = distinct !{!99, !15}
!100 = !{!56, !11, i64 48}
!101 = !{!78, !18, i64 32}
!102 = !{!103, !11, i64 0}
!103 = !{!"jpeg_progress_mgr", !11, i64 0, !22, i64 8, !22, i64 16, !18, i64 24, !18, i64 28}
!104 = !{!103, !22, i64 8}
!105 = !{!103, !22, i64 16}
!106 = !{!17, !18, i64 400}
!107 = !{!17, !18, i64 164}
!108 = !{!17, !18, i64 172}
!109 = !{!97, !11, i64 0}
!110 = !{!97, !18, i64 16}
!111 = !{!17, !11, i64 536}
!112 = !{!113, !11, i64 8}
!113 = !{!"jpeg_d_main_controller", !11, i64 0, !11, i64 8}
!114 = distinct !{!114, !15}
!115 = !{!17, !18, i64 84}
!116 = !{!117, !11, i64 64}
!117 = !{!"", !56, i64 0, !11, i64 56, !11, i64 64, !18, i64 72}
!118 = !{!117, !11, i64 16}
!119 = !{!117, !11, i64 24}
!120 = !{!117, !11, i64 32}
!121 = !{!117, !11, i64 40}
!122 = !{!117, !11, i64 48}
!123 = !{!117, !11, i64 56}
!124 = !{!117, !18, i64 72}
!125 = !{!117, !11, i64 0}
!126 = !{!117, !22, i64 8}
!127 = distinct !{!127, !15}
!128 = !{!17, !11, i64 544}
!129 = !{!130, !11, i64 0}
!130 = !{!"", !131, i64 0, !18, i64 40, !18, i64 44, !18, i64 48, !8, i64 56, !8, i64 136, !11, i64 216}
!131 = !{!"jpeg_d_coef_controller", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32}
!132 = !{!130, !11, i64 16}
!133 = !{!130, !11, i64 216}
!134 = !{!88, !18, i64 12}
!135 = !{!17, !18, i64 304}
!136 = !{!52, !11, i64 40}
!137 = !{!88, !18, i64 28}
!138 = !{!88, !18, i64 8}
!139 = !{!88, !18, i64 32}
!140 = distinct !{!140, !15}
!141 = !{!130, !11, i64 8}
!142 = !{!130, !11, i64 24}
!143 = !{!52, !11, i64 8}
!144 = distinct !{!144, !15, !145, !146}
!145 = !{!"llvm.loop.isvectorized", i32 1}
!146 = !{!"llvm.loop.unroll.runtime.disable"}
!147 = !{!130, !11, i64 32}
!148 = !{!17, !18, i64 168}
!149 = !{!17, !18, i64 96}
!150 = !{!17, !11, i64 184}
!151 = !{!88, !11, i64 80}
!152 = distinct !{!152, !15}
!153 = distinct !{!153, !15}
!154 = !{!17, !18, i64 176}
!155 = !{!17, !18, i64 416}
!156 = !{!52, !11, i64 64}
!157 = !{!88, !18, i64 4}
!158 = distinct !{!158, !15}
!159 = !{!130, !18, i64 44}
!160 = !{!130, !18, i64 48}
!161 = !{!130, !18, i64 40}
!162 = !{!17, !18, i64 456}
!163 = !{!88, !18, i64 52}
!164 = !{!88, !18, i64 56}
!165 = distinct !{!165, !15}
!166 = distinct !{!166, !15}
!167 = distinct !{!167, !15}
!168 = !{!17, !11, i64 576}
!169 = !{!170, !11, i64 8}
!170 = !{!"jpeg_entropy_decoder", !11, i64 0, !11, i64 8}
!171 = distinct !{!171, !15}
!172 = distinct !{!172, !15}
!173 = !{!78, !11, i64 24}
!174 = distinct !{!174, !15}
!175 = !{!88, !18, i64 48}
!176 = !{!17, !11, i64 584}
!177 = !{!88, !18, i64 36}
!178 = distinct !{!178, !15}
!179 = distinct !{!179, !15}
!180 = distinct !{!180, !15}
!181 = !{!17, !18, i64 464}
!182 = !{!88, !18, i64 60}
!183 = !{!88, !18, i64 64}
!184 = !{!88, !18, i64 72}
!185 = distinct !{!185, !15}
!186 = distinct !{!186, !15}
!187 = distinct !{!187, !15}
!188 = distinct !{!188, !15}
!189 = distinct !{!189, !15}
!190 = !{!17, !18, i64 508}
!191 = distinct !{!191, !15}
!192 = distinct !{!192, !15}
!193 = distinct !{!193, !15}
!194 = distinct !{!194, !15}
!195 = !{!17, !11, i64 600}
!196 = !{!197, !11, i64 0}
!197 = !{!"", !198, i64 0, !11, i64 16, !11, i64 24, !11, i64 32, !11, i64 40}
!198 = !{!"jpeg_color_deconverter", !11, i64 0, !11, i64 8}
!199 = !{!17, !18, i64 136}
!200 = !{!197, !11, i64 8}
!201 = distinct !{!201, !15}
!202 = !{!17, !18, i64 128}
!203 = !{!17, !11, i64 408}
!204 = !{!197, !11, i64 16}
!205 = !{!197, !11, i64 24}
!206 = !{!197, !11, i64 32}
!207 = !{!197, !11, i64 40}
!208 = distinct !{!208, !15}
!209 = distinct !{!209, !15}
!210 = distinct !{!210, !15}
!211 = distinct !{!211, !15}
!212 = distinct !{!212, !15}
!213 = distinct !{!213, !15}
!214 = distinct !{!214, !15}
!215 = distinct !{!215, !15}
!216 = !{!217, !11, i64 0}
!217 = !{!"", !218, i64 0, !8, i64 88}
!218 = !{!"jpeg_inverse_dct", !11, i64 0, !8, i64 8}
!219 = !{!88, !11, i64 88}
!220 = distinct !{!220, !15}
!221 = distinct !{!221, !15, !145, !146}
!222 = distinct !{!222, !15}
!223 = !{!19, !19, i64 0}
!224 = !{!225, !225, i64 0}
!225 = !{!"float", !8, i64 0}
!226 = distinct !{!226, !15, !145, !146}
!227 = distinct !{!227, !15}
!228 = distinct !{!228, !15}
!229 = !{!230, !11, i64 352}
!230 = !{!"", !8, i64 0, !8, i64 136, !8, i64 280, !11, i64 352, !8, i64 360, !8, i64 1384}
!231 = distinct !{!231, !15}
!232 = distinct !{!232, !15}
!233 = distinct !{!233, !15}
!234 = distinct !{!234, !15}
!235 = distinct !{!235, !15}
!236 = distinct !{!236, !15}
!237 = distinct !{!237, !15}
!238 = !{!239, !11, i64 0}
!239 = !{!"", !11, i64 0, !22, i64 8, !18, i64 16, !22, i64 24, !18, i64 32, !11, i64 40, !11, i64 48}
!240 = !{!239, !22, i64 8}
!241 = !{!239, !18, i64 16}
!242 = !{!239, !11, i64 40}
!243 = !{!239, !11, i64 48}
!244 = distinct !{!244, !15}
!245 = !{!239, !22, i64 24}
!246 = !{!239, !18, i64 32}
!247 = !{i32 0, i32 2}
!248 = distinct !{!248, !15}
!249 = !{!250, !11, i64 0}
!250 = !{!"", !170, i64 0, !251, i64 16, !252, i64 32, !18, i64 48, !8, i64 56, !8, i64 88}
!251 = !{!"", !22, i64 0, !18, i64 8, !18, i64 12}
!252 = !{!"", !8, i64 0}
!253 = !{!250, !11, i64 8}
!254 = !{!17, !18, i64 512}
!255 = !{!17, !18, i64 516}
!256 = !{!17, !18, i64 520}
!257 = !{!88, !18, i64 20}
!258 = !{!88, !18, i64 24}
!259 = distinct !{!259, !15}
!260 = !{!17, !18, i64 360}
!261 = !{!250, !18, i64 48}
!262 = !{!250, !18, i64 24}
!263 = !{!75, !18, i64 172}
!264 = !{!75, !11, i64 16}
!265 = distinct !{!265, !15}
!266 = !{!250, !18, i64 28}
!267 = !{!17, !18, i64 524}
!268 = !{!250, !22, i64 16}
!269 = !{i64 0, i64 16, !7}
!270 = !{i32 -1, i32 256}
!271 = distinct !{!271, !15}
!272 = distinct !{!272, !15}
!273 = distinct !{!273, !15}
!274 = !{!275, !11, i64 0}
!275 = !{!"", !78, i64 0, !18, i64 40}
!276 = !{!275, !11, i64 8}
!277 = !{!275, !11, i64 16}
!278 = !{!275, !11, i64 24}
!279 = !{!275, !18, i64 32}
!280 = !{!275, !18, i64 36}
!281 = !{!275, !18, i64 40}
!282 = !{!75, !11, i64 8}
!283 = !{!17, !18, i64 44}
!284 = !{!17, !18, i64 40}
!285 = !{!17, !18, i64 288}
!286 = !{!17, !18, i64 388}
!287 = !{!17, !18, i64 392}
!288 = !{!17, !18, i64 396}
!289 = distinct !{!289, !15}
!290 = !{!88, !18, i64 40}
!291 = !{!88, !18, i64 44}
!292 = distinct !{!292, !15}
!293 = !{!75, !18, i64 164}
!294 = !{!21, !11, i64 32}
!295 = !{!75, !11, i64 0}
!296 = !{!17, !18, i64 460}
!297 = !{!88, !18, i64 68}
!298 = distinct !{!298, !15}
!299 = distinct !{!299, !15}
!300 = !{!88, !18, i64 16}
!301 = distinct !{!301, !15}
!302 = !{!170, !11, i64 0}
!303 = !{!131, !11, i64 0}
!304 = !{!131, !11, i64 8}
!305 = !{!306, !11, i64 0}
!306 = !{!"", !113, i64 0, !8, i64 16, !18, i64 96, !18, i64 100, !8, i64 104, !18, i64 120, !18, i64 124, !18, i64 128, !18, i64 132}
!307 = !{!17, !11, i64 592}
!308 = !{!309, !18, i64 16}
!309 = !{!"jpeg_upsampler", !11, i64 0, !11, i64 8, !18, i64 16}
!310 = distinct !{!310, !15}
!311 = !{!52, !11, i64 16}
!312 = distinct !{!312, !15}
!313 = !{!306, !11, i64 8}
!314 = distinct !{!314, !15}
!315 = distinct !{!315, !15}
!316 = distinct !{!316, !15}
!317 = distinct !{!317, !15}
!318 = !{!306, !18, i64 120}
!319 = !{!306, !18, i64 124}
!320 = !{!306, !18, i64 132}
!321 = !{!306, !18, i64 96}
!322 = !{!306, !18, i64 100}
!323 = !{!131, !11, i64 24}
!324 = !{!17, !11, i64 552}
!325 = !{!326, !11, i64 8}
!326 = !{!"jpeg_d_post_controller", !11, i64 0, !11, i64 8}
!327 = !{!306, !18, i64 128}
!328 = distinct !{!328, !15}
!329 = distinct !{!329, !15}
!330 = distinct !{!330, !15}
!331 = distinct !{!331, !15}
!332 = distinct !{!332, !15}
!333 = distinct !{!333, !15}
!334 = !{!75, !18, i64 160}
!335 = !{!17, !18, i64 384}
!336 = !{!17, !13, i64 370}
!337 = !{!17, !13, i64 372}
!338 = distinct !{!338, !15}
!339 = distinct !{!339, !15}
!340 = !{!75, !18, i64 168}
!341 = distinct !{!341, !15}
!342 = distinct !{!342, !15}
!343 = distinct !{!343, !15}
!344 = distinct !{!344, !15}
!345 = distinct !{!345, !15}
!346 = distinct !{!346, !15}
!347 = distinct !{!347, !15}
!348 = !{!56, !11, i64 40}
!349 = !{!56, !11, i64 32}
!350 = distinct !{!350, !15}
!351 = !{!17, !8, i64 368}
!352 = distinct !{!352, !15}
!353 = !{!17, !18, i64 308}
!354 = distinct !{!354, !15}
!355 = distinct !{!355, !15}
!356 = distinct !{!356, !15}
!357 = distinct !{!357, !15}
!358 = !{!17, !18, i64 140}
!359 = !{!360, !11, i64 0}
!360 = !{!"", !97, i64 0, !18, i64 24, !18, i64 28, !11, i64 32, !11, i64 40}
!361 = !{!360, !11, i64 8}
!362 = !{!360, !18, i64 16}
!363 = distinct !{!363, !15, !145, !146}
!364 = !{!360, !18, i64 24}
!365 = !{!360, !18, i64 28}
!366 = !{!17, !18, i64 116}
!367 = !{!17, !18, i64 120}
!368 = !{!17, !18, i64 124}
!369 = !{!17, !11, i64 608}
!370 = !{!360, !11, i64 32}
!371 = !{!360, !11, i64 40}
!372 = !{!52, !11, i64 48}
!373 = !{!78, !11, i64 16}
!374 = !{!103, !18, i64 24}
!375 = !{!103, !18, i64 28}
!376 = !{!377, !11, i64 0}
!377 = !{!"jpeg_color_quantizer", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24}
!378 = !{!326, !11, i64 0}
!379 = !{!218, !11, i64 0}
!380 = !{!131, !11, i64 16}
!381 = !{!198, !11, i64 0}
!382 = !{!309, !11, i64 0}
!383 = !{!113, !11, i64 0}
!384 = !{!377, !11, i64 16}
!385 = !{!386, !11, i64 0}
!386 = !{!"", !309, i64 0, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !18, i64 72, !18, i64 76, !18, i64 80}
!387 = !{!386, !18, i64 16}
!388 = !{!386, !18, i64 76}
!389 = !{!386, !11, i64 8}
!390 = !{!386, !11, i64 24}
!391 = !{!386, !11, i64 32}
!392 = !{!386, !11, i64 40}
!393 = !{!386, !11, i64 48}
!394 = !{!386, !11, i64 56}
!395 = distinct !{!395, !15}
!396 = !{!386, !18, i64 72}
!397 = !{!386, !18, i64 80}
!398 = !{!386, !11, i64 64}
!399 = distinct !{!399, !15}
!400 = distinct !{!400, !15}
!401 = !{!402, !11, i64 0}
!402 = !{!"", !170, i64 0, !251, i64 16, !403, i64 32, !18, i64 52, !8, i64 56, !11, i64 88}
!403 = !{!"", !18, i64 0, !8, i64 4}
!404 = distinct !{!404, !15}
!405 = distinct !{!405, !15}
!406 = distinct !{!406, !15}
!407 = !{!402, !11, i64 8}
!408 = !{!402, !11, i64 88}
!409 = distinct !{!409, !15}
!410 = !{!402, !18, i64 52}
!411 = !{!402, !22, i64 16}
!412 = !{!402, !18, i64 24}
!413 = !{i64 0, i64 4, !41, i64 4, i64 16, !7}
!414 = distinct !{!414, !15}
!415 = !{!402, !18, i64 32}
!416 = distinct !{!416, !15}
!417 = distinct !{!417, !15}
!418 = distinct !{!418, !15}
!419 = distinct !{!419, !15}
!420 = distinct !{!420, !15}
!421 = distinct !{!421, !15}
!422 = distinct !{!422, !15}
!423 = !{!402, !18, i64 28}
!424 = !{!425, !11, i64 0}
!425 = !{!"", !326, i64 0, !11, i64 16, !11, i64 24, !18, i64 32, !18, i64 36, !18, i64 40}
!426 = !{!425, !18, i64 32}
!427 = !{!52, !11, i64 32}
!428 = !{!425, !11, i64 16}
!429 = !{!425, !11, i64 24}
!430 = !{!425, !11, i64 8}
!431 = !{!52, !11, i64 56}
!432 = !{!309, !11, i64 8}
!433 = !{!425, !18, i64 40}
!434 = !{!425, !18, i64 36}
!435 = !{!377, !11, i64 8}
!436 = !{!437, !11, i64 0}
!437 = !{!"", !309, i64 0, !8, i64 24, !8, i64 104, !18, i64 184, !18, i64 188, !8, i64 192, !8, i64 232, !8, i64 242}
!438 = !{!437, !11, i64 8}
!439 = !{!437, !18, i64 16}
!440 = distinct !{!440, !15}
!441 = !{!437, !18, i64 184}
!442 = !{!437, !18, i64 188}
!443 = distinct !{!443, !15}
!444 = !{!198, !11, i64 8}
!445 = distinct !{!445, !15}
!446 = distinct !{!446, !15}
!447 = distinct !{!447, !15}
!448 = distinct !{!448, !15}
!449 = distinct !{!449, !15}
!450 = distinct !{!450, !15}
!451 = distinct !{!451, !15}
!452 = distinct !{!452, !15}
!453 = distinct !{!453, !15}
!454 = distinct !{!454, !15}
!455 = distinct !{!455, !15}
!456 = !{!21, !11, i64 16}
!457 = !{!21, !11, i64 24}
!458 = !{!21, !11, i64 136}
!459 = !{!21, !18, i64 144}
!460 = !{!60, !11, i64 0}
!461 = distinct !{!461, !15}
!462 = distinct !{!462, !15}
!463 = distinct !{!463, !15}
!464 = distinct !{!464, !15}
!465 = distinct !{!465, !15}
!466 = distinct !{!466, !15}
!467 = distinct !{!467, !15}
!468 = distinct !{!468, !15}
!469 = distinct !{!469, !15}
!470 = distinct !{!470, !15}
!471 = !{!472, !11, i64 0}
!472 = !{!"", !52, i64 0, !8, i64 96, !8, i64 112, !11, i64 128, !11, i64 136, !22, i64 144, !18, i64 152}
!473 = !{!472, !11, i64 8}
!474 = !{!472, !11, i64 16}
!475 = !{!472, !11, i64 24}
!476 = !{!472, !11, i64 32}
!477 = !{!472, !11, i64 40}
!478 = !{!472, !11, i64 48}
!479 = !{!472, !11, i64 56}
!480 = !{!472, !11, i64 64}
!481 = !{!472, !11, i64 72}
!482 = !{!472, !11, i64 80}
!483 = !{!472, !22, i64 88}
!484 = !{!472, !22, i64 144}
!485 = distinct !{!485, !15}
!486 = !{!472, !18, i64 152}
!487 = distinct !{!487, !15}
!488 = distinct !{!488, !15}
!489 = distinct !{!489, !15}
!490 = distinct !{!490, !15}
!491 = !{!492, !11, i64 0}
!492 = !{!"jvirt_sarray_control", !11, i64 0, !18, i64 8, !18, i64 12, !18, i64 16, !18, i64 20, !18, i64 24, !18, i64 28, !18, i64 32, !18, i64 36, !18, i64 40, !18, i64 44, !11, i64 48, !493, i64 56}
!493 = !{!"backing_store_struct", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !8, i64 32}
!494 = !{!492, !18, i64 8}
!495 = !{!492, !18, i64 12}
!496 = !{!492, !18, i64 16}
!497 = !{!492, !18, i64 36}
!498 = !{!492, !18, i64 44}
!499 = !{!472, !11, i64 128}
!500 = !{!492, !11, i64 48}
!501 = !{!502, !11, i64 0}
!502 = !{!"jvirt_barray_control", !11, i64 0, !18, i64 8, !18, i64 12, !18, i64 16, !18, i64 20, !18, i64 24, !18, i64 28, !18, i64 32, !18, i64 36, !18, i64 40, !18, i64 44, !11, i64 48, !493, i64 56}
!503 = !{!502, !18, i64 8}
!504 = !{!502, !18, i64 12}
!505 = !{!502, !18, i64 16}
!506 = !{!502, !18, i64 36}
!507 = !{!502, !18, i64 44}
!508 = !{!472, !11, i64 136}
!509 = !{!502, !11, i64 48}
!510 = distinct !{!510, !15}
!511 = distinct !{!511, !15}
!512 = !{!492, !18, i64 20}
!513 = !{!492, !18, i64 24}
!514 = !{!492, !18, i64 28}
!515 = !{!492, !18, i64 32}
!516 = !{!492, !18, i64 40}
!517 = distinct !{!517, !15}
!518 = !{!502, !18, i64 20}
!519 = !{!502, !18, i64 24}
!520 = !{!502, !18, i64 28}
!521 = !{!502, !18, i64 32}
!522 = !{!502, !18, i64 40}
!523 = distinct !{!523, !15}
!524 = distinct !{!524, !15}
!525 = distinct !{!525, !15}
!526 = !{!492, !11, i64 72}
!527 = distinct !{!527, !15}
!528 = !{!502, !11, i64 72}
!529 = distinct !{!529, !15}
!530 = distinct !{!530, !15}
!531 = distinct !{!531, !15}
!532 = distinct !{!532, !15}
!533 = distinct !{!533, !15}
!534 = distinct !{!534, !15}
!535 = !{!536, !11, i64 0}
!536 = !{!"", !377, i64 0, !11, i64 32, !18, i64 40, !11, i64 48, !18, i64 56, !8, i64 60, !18, i64 76, !8, i64 80, !8, i64 112, !18, i64 144}
!537 = !{!536, !11, i64 16}
!538 = !{!536, !11, i64 24}
!539 = distinct !{!539, !15}
!540 = distinct !{!540, !15}
!541 = distinct !{!541, !15, !145, !146}
!542 = distinct !{!542, !15}
!543 = distinct !{!543, !15}
!544 = distinct !{!544, !15}
!545 = distinct !{!545, !15}
!546 = distinct !{!546, !15}
!547 = !{!536, !11, i64 32}
!548 = !{!536, !18, i64 40}
!549 = !{!17, !18, i64 148}
!550 = !{!536, !11, i64 8}
!551 = !{!536, !18, i64 76}
!552 = !{!536, !18, i64 56}
!553 = distinct !{!553, !15}
!554 = distinct !{!554, !15}
!555 = distinct !{!555, !15}
!556 = distinct !{!556, !15}
!557 = !{!536, !18, i64 144}
!558 = distinct !{!558, !15}
!559 = !{!536, !11, i64 48}
!560 = distinct !{!560, !15}
!561 = distinct !{!561, !15}
!562 = distinct !{!562, !15}
!563 = distinct !{!563, !15}
!564 = distinct !{!564, !15}
!565 = distinct !{!565, !15}
!566 = distinct !{!566, !15}
!567 = distinct !{!567, !15}
!568 = distinct !{!568, !15}
!569 = distinct !{!569, !15}
!570 = distinct !{!570, !15}
!571 = distinct !{!571, !15}
!572 = distinct !{!572, !15}
!573 = distinct !{!573, !15}
!574 = distinct !{!574, !15}
!575 = distinct !{!575, !15}
!576 = distinct !{!576, !15}
!577 = distinct !{!577, !15}
!578 = !{!579, !11, i64 0}
!579 = !{!"", !377, i64 0, !11, i64 32, !18, i64 40, !11, i64 48, !18, i64 56, !11, i64 64, !18, i64 72, !11, i64 80}
!580 = !{!579, !11, i64 24}
!581 = !{!579, !11, i64 64}
!582 = !{!579, !11, i64 80}
!583 = !{!579, !11, i64 48}
!584 = distinct !{!584, !15}
!585 = !{!579, !18, i64 56}
!586 = !{!579, !11, i64 32}
!587 = !{!579, !18, i64 40}
!588 = !{!579, !11, i64 8}
!589 = !{!579, !11, i64 16}
!590 = !{!579, !18, i64 72}
!591 = distinct !{!591, !15}
!592 = distinct !{!592, !15}
!593 = distinct !{!593, !15}
!594 = distinct !{!594, !15}
!595 = distinct !{!595, !15}
!596 = distinct !{!596, !15}
!597 = !{!598, !18, i64 16}
!598 = !{!"", !18, i64 0, !18, i64 4, !18, i64 8, !18, i64 12, !18, i64 16, !18, i64 20, !22, i64 24, !22, i64 32}
!599 = !{!598, !18, i64 20}
!600 = !{!598, !22, i64 32}
!601 = !{!598, !22, i64 24}
!602 = distinct !{!602, !15}
!603 = distinct !{!603, !15}
!604 = !{!598, !18, i64 4}
!605 = !{!598, !18, i64 0}
!606 = !{!598, !18, i64 12}
!607 = !{!598, !18, i64 8}
!608 = distinct !{!608, !15}
!609 = distinct !{!609, !15}
!610 = distinct !{!610, !15}
!611 = distinct !{!611, !15}
!612 = distinct !{!612, !15}
!613 = distinct !{!613, !15}
!614 = distinct !{!614, !15}
!615 = distinct !{!615, !15}
!616 = distinct !{!616, !15}
!617 = distinct !{!617, !15}
!618 = distinct !{!618, !15}
!619 = distinct !{!619, !15, !145, !146}
!620 = distinct !{!620, !15}
!621 = distinct !{!621, !15}
!622 = distinct !{!622, !15}
!623 = distinct !{!623, !15}
!624 = distinct !{!624, !15}
!625 = distinct !{!625, !15}
!626 = distinct !{!626, !15}
!627 = distinct !{!627, !15}
!628 = distinct !{!628, !15}
!629 = distinct !{!629, !15}
!630 = distinct !{!630, !15}
!631 = distinct !{!631, !15}
!632 = distinct !{!632, !15}
!633 = distinct !{!633, !15}
!634 = distinct !{!634, !15}
!635 = distinct !{!635, !15}
!636 = distinct !{!636, !15}
!637 = distinct !{!637, !15}
!638 = distinct !{!638, !15}
!639 = distinct !{!639, !15}
!640 = distinct !{!640, !15}
!641 = distinct !{!641, !15}
!642 = distinct !{!642, !15}
!643 = distinct !{!643, !15}
!644 = distinct !{!644, !15}
!645 = distinct !{!645, !15}
!646 = distinct !{!646, !15}
!647 = distinct !{!647, !15}
!648 = distinct !{!648, !15}
!649 = distinct !{!649, !15}
!650 = distinct !{!650, !15}
!651 = distinct !{!651, !15}
!652 = distinct !{!652, !15}
!653 = distinct !{!653, !15}
!654 = distinct !{!654, !15}
!655 = distinct !{!655, !15}
!656 = distinct !{!656, !15}
!657 = !{!658, !11, i64 0}
!658 = !{!"", !28, i64 0, !18, i64 48, !11, i64 56, !18, i64 64, !18, i64 68, !18, i64 72, !18, i64 76}
!659 = !{!658, !11, i64 16}
!660 = !{!658, !18, i64 48}
!661 = !{!658, !11, i64 8}
!662 = !{!658, !18, i64 64}
!663 = !{!658, !18, i64 68}
!664 = !{!658, !18, i64 72}
!665 = !{!658, !11, i64 56}
!666 = !{!658, !18, i64 76}
!667 = !{!668, !18, i64 36}
!668 = !{!"cdjpeg_progress_mgr", !103, i64 0, !18, i64 32, !18, i64 36, !18, i64 40}
!669 = !{!658, !11, i64 32}
!670 = !{!658, !18, i64 40}
!671 = !{!658, !11, i64 24}
!672 = distinct !{!672, !15}
!673 = !{!668, !22, i64 8}
!674 = !{!668, !22, i64 16}
!675 = !{!668, !11, i64 0}
!676 = distinct !{!676, !15}
!677 = !{!668, !18, i64 32}
!678 = distinct !{!678, !15}
!679 = distinct !{!679, !15}
!680 = distinct !{!680, !15}
!681 = distinct !{!681, !15}
!682 = distinct !{!682, !15}
!683 = distinct !{!683, !15}
!684 = !{!685, !11, i64 48}
!685 = !{!"", !28, i64 0, !11, i64 48, !18, i64 56, !13, i64 60, !18, i64 64, !22, i64 72, !18, i64 80, !13, i64 84, !18, i64 88, !13, i64 92, !13, i64 94, !13, i64 96, !11, i64 104, !11, i64 112, !18, i64 120, !8, i64 124}
!686 = !{!685, !11, i64 0}
!687 = !{!685, !11, i64 8}
!688 = !{!685, !11, i64 16}
!689 = !{!685, !11, i64 32}
!690 = !{!685, !18, i64 40}
!691 = !{!685, !11, i64 104}
!692 = !{!685, !11, i64 112}
!693 = !{!685, !18, i64 88}
!694 = !{!685, !13, i64 84}
!695 = !{!685, !13, i64 96}
!696 = !{!685, !13, i64 92}
!697 = !{!685, !18, i64 64}
!698 = !{!685, !18, i64 56}
!699 = !{!685, !13, i64 60}
!700 = distinct !{!700, !15}
!701 = !{!685, !13, i64 94}
!702 = !{!685, !18, i64 80}
!703 = !{!685, !22, i64 72}
!704 = !{!685, !18, i64 120}
!705 = !{!685, !11, i64 24}
!706 = distinct !{!706, !15}
!707 = distinct !{!707, !15}
!708 = distinct !{!708, !15}
!709 = !{!710, !11, i64 0}
!710 = !{!"", !28, i64 0, !11, i64 48, !11, i64 56, !22, i64 64, !18, i64 72}
!711 = !{!710, !11, i64 16}
!712 = !{!710, !18, i64 72}
!713 = !{!710, !22, i64 64}
!714 = !{!710, !11, i64 48}
!715 = !{!710, !11, i64 32}
!716 = !{!710, !18, i64 40}
!717 = !{!710, !11, i64 8}
!718 = !{!710, !11, i64 56}
!719 = !{!710, !11, i64 24}
!720 = distinct !{!720, !15}
!721 = distinct !{!721, !15}
!722 = distinct !{!722, !15}
!723 = !{!724, !11, i64 0}
!724 = !{!"", !28, i64 0, !11, i64 48, !18, i64 56}
!725 = !{!724, !11, i64 16}
!726 = !{!724, !18, i64 56}
!727 = !{!724, !11, i64 48}
!728 = !{!724, !11, i64 32}
!729 = !{!724, !18, i64 40}
!730 = !{!724, !11, i64 8}
!731 = !{!724, !11, i64 24}
!732 = distinct !{!732, !15}
!733 = distinct !{!733, !15}
!734 = distinct !{!734, !15}
!735 = distinct !{!735, !15}

; ModuleID = '/src/llvm-test-suite/build/MultiSource/Benchmarks/Prolangs-C/TimberWolfMC/timberwolfmc.e.bc'
source_filename = "ld-temp.o"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.tnode = type { i32, i32, ptr, ptr, ptr, ptr, ptr, i32, i32, ptr }
%struct.plist = type { i32, ptr }
%struct.dimbox = type { ptr, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, double, ptr }
%struct.cellbox = type { ptr, i32, i32, i32, [9 x i32], i32, i32, i32, i32, i32, i32, i32, double, double, double, double, double, i32, i32, ptr, ptr, [8 x ptr], ptr }
%struct.tilebox = type { ptr, double, double, double, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr }
%struct.termbox = type { ptr, i32, i32, i32, i32, i32 }
%struct.netbox = type { ptr, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.bellbox = type { i32, i32 }
%struct.wcbox = type { i32, i32, ptr, i32, ptr }
%struct.ebox = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr }
%struct.rect = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.dlink2 = type { i32, ptr, ptr }
%struct.edgebox = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.nrbox = type { ptr, i32, i32, i32 }
%struct.altbox = type { ptr, i32, ptr }
%struct.chanbox = type { i32, i32, i32, i32, ptr }
%struct.clbox = type { i32, i32, i32, i32, i32, i32, i32, ptr }
%struct.uncombox.25 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.contentbox = type { i32, i32, i32, i32, i32 }
%struct.locbox.26 = type { i32, i32, i32, i32 }
%struct.psidebox = type { i32, double, i32, i32 }
%struct.nodbox = type { ptr, ptr, i32 }
%struct.quad = type { i32, i32, i32, i32, ptr, ptr }
%struct.nnode = type { i32, i32, i16, i16 }
%struct.path = type { ptr, i32, i32, i32, [5 x i32] }
%struct.MT = type { i32, [100 x [3 x [3 x i32]]], [3 x [3 x i32]], [3 x [3 x i32]] }
%struct.array3d = type { i32, double }

@how_many = internal global ptr null, align 8
@.str = private unnamed_addr constant [41 x i8] c"\0A\0A*************************************\0A\00", align 1
@.str.1 = private unnamed_addr constant [37 x i8] c"AVERAGE NUMBER OF CELLS PER NET: %f\0A\00", align 1
@.str.2 = private unnamed_addr constant [41 x i8] c"*************************************\0A\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [51 x i8] c"Expected Wire Reduction Relative to Random:%6.2f\0A\0A\00", align 1
@qsz = internal global i32 0, align 4
@thresh = internal global i32 0, align 4
@mthresh = internal global i32 0, align 4
@.str.4 = private unnamed_addr constant [52 x i8] c"Longest Hori. Path in Circuit Graph has span: <%d>\0A\00", align 1
@.str.1.5 = private unnamed_addr constant [52 x i8] c"Longest Vert. Path in Circuit Graph has span: <%d>\0A\00", align 1
@.str.6 = private unnamed_addr constant [22 x i8] c"CHANNEL-GRAPH NODES:\0A\00", align 1
@.str.1.7 = private unnamed_addr constant [47 x i8] c"rect Node: %d  at: %d %d  width:%d  height:%d\0A\00", align 1
@totChanLen = internal global i32 0, align 4
@.str.8 = private unnamed_addr constant [49 x i8] c"\0A\0AConfiguration Data\0AInternal Channel Length:%d\0A\00", align 1
@.str.1.9 = private unnamed_addr constant [43 x i8] c"Average Channel Width (un-normalized):%d\0A\0A\00", align 1
@.str.2.10 = private unnamed_addr constant [27 x i8] c"Average Channel Width:%d\0A\0A\00", align 1
@expandExtra = internal global double 0.000000e+00, align 8
@.str.3.11 = private unnamed_addr constant [27 x i8] c"Core Expansion Factor: %f\0A\00", align 1
@.str.12 = private unnamed_addr constant [20 x i8] c"CHANNEL DENSITIES:\0A\00", align 1
@.str.1.13 = private unnamed_addr constant [44 x i8] c"channel:%d  node1:%d  node2:%d  density:%d\0A\00", align 1
@.str.2.14 = private unnamed_addr constant [12 x i8] c"CELL: <%d>\0A\00", align 1
@.str.3.15 = private unnamed_addr constant [25 x i8] c"edge:%d  extraSpace:%d  \00", align 1
@.str.4.16 = private unnamed_addr constant [28 x i8] c"HorV:%d  loc:%d  start:%d  \00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"end:%d\0A\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"%s.cel\00", align 1
@.str.1.18 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.2.19 = private unnamed_addr constant [31 x i8] c"\0A\0ANew Value for lapFactor: %f\0A\00", align 1
@.str.3.20 = private unnamed_addr constant [27 x i8] c"New Value for offset: %d\0A\0A\00", align 1
@.str.4.21 = private unnamed_addr constant [48 x i8] c"TimberWolf failed to resolve overlap problem.\0A\0A\00", align 1
@.str.5.22 = private unnamed_addr constant [38 x i8] c"\0A\0APotential Overlap Problem Averted\0A\0A\00", align 1
@stderr = external local_unnamed_addr global ptr, align 8
@.str.6.23 = private unnamed_addr constant [30 x i8] c"Cannot execute system calls!\0A\00", align 1
@.str.26 = private unnamed_addr constant [17 x i8] c"OOPs: a endSeqs \00", align 1
@.str.1.27 = private unnamed_addr constant [18 x i8] c"cannot fit in the\00", align 1
@.str.2.28 = private unnamed_addr constant [10 x i8] c" site:%d\0A\00", align 1
@.str.3.29 = private unnamed_addr constant [16 x i8] c"TimberWolf has \00", align 1
@.str.4.30 = private unnamed_addr constant [17 x i8] c"to leave it out\0A\00", align 1
@.str.5.31 = private unnamed_addr constant [18 x i8] c"Current cell: %d\0A\00", align 1
@.str.6.32 = private unnamed_addr constant [17 x i8] c"OOPs: a begSeqs \00", align 1
@.str.7 = private unnamed_addr constant [15 x i8] c"cannot fit in \00", align 1
@.str.8.33 = private unnamed_addr constant [17 x i8] c"TimberWolf has t\00", align 1
@.str.9 = private unnamed_addr constant [16 x i8] c"o leave it out\0A\00", align 1
@.str.10 = private unnamed_addr constant [17 x i8] c"Current cell:%d\0A\00", align 1
@.str.11 = private unnamed_addr constant [40 x i8] c"OOPs: an endSeqs cannot fit in site:%d\0A\00", align 1
@.str.12.34 = private unnamed_addr constant [38 x i8] c"TimberWolf will have to leave it out\0A\00", align 1
@.str.13 = private unnamed_addr constant [39 x i8] c"OOPs: a begSeqs cannot fit in site:%d\0A\00", align 1
@.str.14 = private unnamed_addr constant [35 x i8] c"OOPs: TimberWolf has to ignore a \0A\00", align 1
@.str.15 = private unnamed_addr constant [31 x i8] c"contained sequence in site:%d\0A\00", align 1
@.str.16 = private unnamed_addr constant [37 x i8] c"OOPs: isolated pin(s) cannot fit in \00", align 1
@.str.17.35 = private unnamed_addr constant [14 x i8] c"the site: %d\0A\00", align 1
@.str.18 = private unnamed_addr constant [37 x i8] c"TimberWolf will have to ignore this \00", align 1
@.str.19 = private unnamed_addr constant [20 x i8] c"number of pins: %d\0A\00", align 1
@.str.36 = private unnamed_addr constant [7 x i8] c"%s.wat\00", align 1
@.str.1.37 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.2.38 = private unnamed_addr constant [50 x i8] c"Cell wire estimation weighting factors per side:\0A\00", align 1
@.str.3.39 = private unnamed_addr constant [12 x i8] c"  Cell: %s\0A\00", align 1
@.str.4.40 = private unnamed_addr constant [43 x i8] c"        Border for left:%d  Pin_Factor:%g\0A\00", align 1
@.str.5.41 = private unnamed_addr constant [43 x i8] c"        Border for rite:%d  Pin_Factor:%g\0A\00", align 1
@.str.6.42 = private unnamed_addr constant [43 x i8] c"        Border for  bot:%d  Pin_Factor:%g\0A\00", align 1
@.str.7.43 = private unnamed_addr constant [43 x i8] c"        Border for  top:%d  Pin_Factor:%g\0A\00", align 1
@.str.8.44 = private unnamed_addr constant [43 x i8] c"\0AFinal Overlap Penalty Function Value: %d\0A\00", align 1
@UCptr = internal global ptr null, align 8
@HorV = internal global i32 0, align 4
@lArray = internal global ptr null, align 8
@nPinLocs = internal global i32 0, align 4
@.str.49 = private unnamed_addr constant [26 x i8] c"rect Node: %d  at: %d %d \00", align 1
@.str.1.50 = private unnamed_addr constant [23 x i8] c"  width:%d  height:%d\0A\00", align 1
@.str.2.51 = private unnamed_addr constant [21 x i8] c"L NC;\0A94 X%d %d %d;\0A\00", align 1
@.str.3.52 = private unnamed_addr constant [3 x i8] c"E\0A\00", align 1
@dx = internal global i32 0, align 4
@dy = internal global i32 0, align 4
@.str.55 = private unnamed_addr constant [39 x i8] c"range limiter:%d units either way in x\00", align 1
@.str.1.56 = private unnamed_addr constant [29 x i8] c"   compared to bdxlength:%d\0A\00", align 1
@.str.2.57 = private unnamed_addr constant [39 x i8] c"range limiter:%d units either way in y\00", align 1
@.str.3.58 = private unnamed_addr constant [29 x i8] c"   compared to bdylength:%d\0A\00", align 1
@.str.4.59 = private unnamed_addr constant [22 x i8] c"scalex:%d  scaley:%d\0A\00", align 1
@.str.5.60 = private unnamed_addr constant [23 x i8] c"acceptance breakdown:\0A\00", align 1
@.str.6.61 = private unnamed_addr constant [36 x i8] c"              single cell: %d / %d\0A\00", align 1
@.str.7.62 = private unnamed_addr constant [28 x i8] c"\09no. of accepted flips: %d\0A\00", align 1
@switch.table.genorient = private unnamed_addr constant [7 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 7, i32 6], align 4
@.str.63 = private unnamed_addr constant [7 x i8] c"%s.pin\00", align 1
@.str.1.64 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.2.65 = private unnamed_addr constant [7 x i8] c"%s.twf\00", align 1
@.str.3.66 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.4.67 = private unnamed_addr constant [5 x i8] c" %s \00", align 1
@.str.5.68 = private unnamed_addr constant [4 x i8] c"net\00", align 1
@.str.6.69 = private unnamed_addr constant [9 x i8] c"\0Anet %s\0A\00", align 1
@.str.7.70 = private unnamed_addr constant [4 x i8] c"pin\00", align 1
@.str.8.71 = private unnamed_addr constant [27 x i8] c"%s %s %d %s %d %s %d %s %d\00", align 1
@.str.9.72 = private unnamed_addr constant [23 x i8] c"    pin   %s  nodes   \00", align 1
@.str.10.73 = private unnamed_addr constant [23 x i8] c"    equiv %s  nodes   \00", align 1
@.str.12.74 = private unnamed_addr constant [40 x i8] c"Pin: %s has location outside the range\0A\00", align 1
@.str.13.75 = private unnamed_addr constant [45 x i8] c"of the edge: %d %d to which it was assigned\0A\00", align 1
@.str.14.76 = private unnamed_addr constant [18 x i8] c"by an amount: %d\0A\00", align 1
@TWsignal = internal global i32 0, align 4
@.str.16.77 = private unnamed_addr constant [16 x i8] c"%d  %d  at  %d\0A\00", align 1
@str = private unnamed_addr constant [6 x i8] c"\0A\0A\0A\0A\0A\00", align 1
@str.19 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@hRectRoot = internal global ptr null, align 8
@vRectRoot = internal global ptr null, align 8
@.str.272 = private unnamed_addr constant [9 x i8] c"%s.debug\00", align 1
@.str.1.273 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.2.274 = private unnamed_addr constant [15 x i8] c"can't open %s\0A\00", align 1
@.str.3.275 = private unnamed_addr constant [7 x i8] c"%s.geo\00", align 1
@.str.4.276 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.5.277 = private unnamed_addr constant [29 x i8] c"Error: file: %s not present\0A\00", align 1
@HRlist = internal global ptr null, align 8
@VRlist = internal global ptr null, align 8
@LEptrs = internal global ptr null, align 8
@BEptrs = internal global ptr null, align 8
@LEroot = internal global ptr null, align 8
@BEroot = internal global ptr null, align 8
@VDptrs = internal global ptr null, align 8
@HRptrs = internal global ptr null, align 8
@VDroot = internal global ptr null, align 8
@HRroot = internal global ptr null, align 8
@.str.282 = private unnamed_addr constant [37 x i8] c"Overlap condition: cell1:%d cell2:%d\00", align 1
@.str.1.283 = private unnamed_addr constant [25 x i8] c"   value:%d   amount:%d\0A\00", align 1
@.str.288 = private unnamed_addr constant [5 x i8] c" %s \00", align 1
@.str.1.289 = private unnamed_addr constant [5 x i8] c"cell\00", align 1
@.str.2.290 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.3.291 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.4.292 = private unnamed_addr constant [5 x i8] c" %d \00", align 1
@.str.5.293 = private unnamed_addr constant [8 x i8] c" %d %d \00", align 1
@.str.7.294 = private unnamed_addr constant [6 x i8] c"equiv\00", align 1
@.str.8.295 = private unnamed_addr constant [9 x i8] c"softcell\00", align 1
@.str.9.296 = private unnamed_addr constant [4 x i8] c"%lf\00", align 1
@.str.10.297 = private unnamed_addr constant [9 x i8] c"sequence\00", align 1
@.str.11.298 = private unnamed_addr constant [6 x i8] c"group\00", align 1
@.str.13.299 = private unnamed_addr constant [10 x i8] c"sidespace\00", align 1
@.str.14.300 = private unnamed_addr constant [6 x i8] c" %lf \00", align 1
@ecount = internal global i32 0, align 4
@.str.305 = private unnamed_addr constant [5 x i8] c" %s \00", align 1
@.str.1.306 = private unnamed_addr constant [5 x i8] c"cell\00", align 1
@.str.2.307 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.3.308 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.4.309 = private unnamed_addr constant [5 x i8] c" %d \00", align 1
@.str.5.310 = private unnamed_addr constant [8 x i8] c" %d %d \00", align 1
@.str.8.311 = private unnamed_addr constant [10 x i8] c"sidespace\00", align 1
@.str.9.312 = private unnamed_addr constant [6 x i8] c" %lf \00", align 1
@.str.10.313 = private unnamed_addr constant [9 x i8] c"softcell\00", align 1
@.str.12.314 = private unnamed_addr constant [6 x i8] c"equiv\00", align 1
@.str.13.315 = private unnamed_addr constant [6 x i8] c"asplb\00", align 1
@.str.14.316 = private unnamed_addr constant [4 x i8] c"%lf\00", align 1
@.str.15.317 = private unnamed_addr constant [6 x i8] c"aspub\00", align 1
@.str.16.318 = private unnamed_addr constant [9 x i8] c"sequence\00", align 1
@.str.17.319 = private unnamed_addr constant [6 x i8] c"group\00", align 1
@hashtab = internal global ptr null, align 8
@.str.330 = private unnamed_addr constant [12 x i8] c"hprobe:%d  \00", align 1
@.str.1.331 = private unnamed_addr constant [35 x i8] c"start:%d  end:%d  loc:%d  UorR:%d\0A\00", align 1
@.str.2.332 = private unnamed_addr constant [46 x i8] c"hprobe:%d  start:%d  end:%d  loc:%d  UorR:%d\0A\00", align 1
@.str.335 = private unnamed_addr constant [43 x i8] c"pin number: %d of net: %d was supposed to \00", align 1
@.str.1.336 = private unnamed_addr constant [30 x i8] c"lie between nodes: %d and %d\0A\00", align 1
@.str.2.337 = private unnamed_addr constant [41 x i8] c"However, the graph doesn't have an edge \00", align 1
@.str.3.338 = private unnamed_addr constant [25 x i8] c"between these two nodes\0A\00", align 1
@.str.4.339 = private unnamed_addr constant [27 x i8] c"pin number: %d of net: %d \00", align 1
@.str.5.340 = private unnamed_addr constant [43 x i8] c"specified to lie between nodes: %d and %d\0A\00", align 1
@.str.6.341 = private unnamed_addr constant [41 x i8] c"is not within the scope of this channel\0A\00", align 1
@layersFactor = internal global i32 0, align 4
@totNetLen = internal global i32 0, align 4
@.str.2.343 = private unnamed_addr constant [7 x i8] c"%s.out\00", align 1
@.str.3.344 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.4.345 = private unnamed_addr constant [15 x i8] c"can't open %s\0A\00", align 1
@.str.5.346 = private unnamed_addr constant [34 x i8] c"TimberWolfMC dated: June 29 1986\0A\00", align 1
@overlapf = internal global ptr null, align 8
@.str.6.349 = private unnamed_addr constant [36 x i8] c"\0AThe rand generator seed was: %d\0A\0A\0A\00", align 1
@.str.7.350 = private unnamed_addr constant [7 x i8] c"%s.cel\00", align 1
@.str.8.351 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.9.352 = private unnamed_addr constant [30 x i8] c"bdxlength:%d    bdylength:%d\0A\00", align 1
@.str.10.353 = private unnamed_addr constant [7 x i8] c"%s.net\00", align 1
@.str.11.354 = private unnamed_addr constant [7 x i8] c"%s.sav\00", align 1
@.str.12.355 = private unnamed_addr constant [48 x i8] c"\0A\0A\0ATHE ROUTE COST OF THE CURRENT PLACEMENT: %d\0A\00", align 1
@.str.13.356 = private unnamed_addr constant [43 x i8] c"\0ATHE PENALTY OF THE CURRENT PLACEMENT: %d\0A\00", align 1
@.str.14.357 = private unnamed_addr constant [48 x i8] c"\0ATHE OVERFILL OF THE CURRENT PIN PLACEMENT: %d\0A\00", align 1
@aveCellSide = internal global double 0.000000e+00, align 8
@.str.15.358 = private unnamed_addr constant [4 x i8] c"\0A\0A\0A\00", align 1
@.str.16.359 = private unnamed_addr constant [53 x i8] c"parameter adjust: route:%d  penalty:%d  overfill:%d\0A\00", align 1
@.str.17.360 = private unnamed_addr constant [36 x i8] c"nets.per.cell:%g  ave.cell.side:%g\0A\00", align 1
@.str.18.361 = private unnamed_addr constant [35 x i8] c"\0A\0AOVERLAP FACTOR (COMPUTED) : %f\0A\0A\00", align 1
@.str.19.362 = private unnamed_addr constant [51 x i8] c"MEAN AND STANDARD DEVIATION OF SQRT OF CELL AREA:\0A\00", align 1
@.str.20 = private unnamed_addr constant [35 x i8] c"MEAN: %g   STANDARD DEVIATION: %g\0A\00", align 1
@.str.21 = private unnamed_addr constant [45 x i8] c"\0A\0A\0AThe New Cost Values after readjustment:\0A\0A\00", align 1
@.str.22 = private unnamed_addr constant [37 x i8] c"route:%d  penalty:%d  overfill:%d\0A\0A\0A\00", align 1
@.str.23 = private unnamed_addr constant [7 x i8] c"%s.res\00", align 1
@.str.24 = private unnamed_addr constant [34 x i8] c"restart file: %s  wasn't present\0A\00", align 1
@.str.25 = private unnamed_addr constant [22 x i8] c"reading data from %s\0A\00", align 1
@.str.26.365 = private unnamed_addr constant [44 x i8] c"\0A\0ATHE PENALTY OF THE CURRENT PLACEMENT: %d\0A\00", align 1
@.str.27 = private unnamed_addr constant [49 x i8] c"\0A\0ATHE OVERFILL OF THE CURRENT PIN PLACEMENT: %d\0A\00", align 1
@.str.28 = private unnamed_addr constant [48 x i8] c"\0ATimberWolfMC Cell Placement Ready for Action\0A\0A\00", align 1
@.str.29 = private unnamed_addr constant [42 x i8] c"\0A\0A************************************ \0A\0A\00", align 1
@.str.30 = private unnamed_addr constant [40 x i8] c"TimberWolfMC has completed its mission\0A\00", align 1
@numXspots = internal global i32 0, align 4
@numYspots = internal global i32 0, align 4
@.str.31 = private unnamed_addr constant [34 x i8] c"numXspots:%d       numYspots:%d\0A\0A\00", align 1
@spotPenalty = internal global i32 0, align 4
@.str.32 = private unnamed_addr constant [27 x i8] c"Value of Spot Control: %f\0A\00", align 1
@.str.33 = private unnamed_addr constant [24 x i8] c"Value of Spot Size: %d\0A\00", align 1
@.str.34 = private unnamed_addr constant [36 x i8] c"Initial Value of Spot Penalty: %d\0A\0A\00", align 1
@str.342 = private unnamed_addr constant [48 x i8] c"TimberWolf usage:  TimberWolf circuitName <CR> \00", align 1
@.str.390 = private unnamed_addr constant [34 x i8] c"numBinsX automatically set to:%d\0A\00", align 1
@.str.1.391 = private unnamed_addr constant [34 x i8] c"numBinsY automatically set to:%d\0A\00", align 1
@vFixedEnd = internal global ptr null, align 8
@Vroot = internal global ptr null, align 8
@Vptrs = internal global ptr null, align 8
@val1 = internal global double 0.000000e+00, align 8
@val2 = internal global double 0.000000e+00, align 8
@mt = internal unnamed_addr global ptr null, align 8
@.str.414 = private unnamed_addr constant [7 x i8] c"%s.cfb\00", align 1
@.str.1.415 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.2.416 = private unnamed_addr constant [15 x i8] c"can't open %s\0A\00", align 1
@.str.3.417 = private unnamed_addr constant [20 x i8] c"L NC;\0A94 %s %d %d;\0A\00", align 1
@.str.4.418 = private unnamed_addr constant [11 x i8] c"L NC;\0AW %d\00", align 1
@.str.5.419 = private unnamed_addr constant [7 x i8] c" %d %d\00", align 1
@.str.6.420 = private unnamed_addr constant [9 x i8] c" %d %d;\0A\00", align 1
@.str.7.421 = private unnamed_addr constant [8 x i8] c"PHANTOM\00", align 1
@.str.8.422 = private unnamed_addr constant [7 x i8] c"L NC;\0A\00", align 1
@.str.9.423 = private unnamed_addr constant [37 x i8] c"W %d %d %d %d %d %d %d %d %d %d %d;\0A\00", align 1
@.str.10.424 = private unnamed_addr constant [3 x i8] c"E\0A\00", align 1
@.str.427 = private unnamed_addr constant [7 x i8] c"%s.geo\00", align 1
@.str.1.428 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.2.429 = private unnamed_addr constant [15 x i8] c"can't open %s\0A\00", align 1
@.str.3.430 = private unnamed_addr constant [10 x i8] c"cell %s \0A\00", align 1
@.str.4.431 = private unnamed_addr constant [13 x i8] c"%d vertices \00", align 1
@.str.5.432 = private unnamed_addr constant [7 x i8] c" %d %d\00", align 1
@.str.7.433 = private unnamed_addr constant [12 x i8] c"pad.macro.l\00", align 1
@.str.8.434 = private unnamed_addr constant [12 x i8] c"4 vertices \00", align 1
@.str.9.435 = private unnamed_addr constant [26 x i8] c" %d %d %d %d %d %d %d %d\0A\00", align 1
@.str.10.436 = private unnamed_addr constant [12 x i8] c"pad.macro.t\00", align 1
@.str.11.437 = private unnamed_addr constant [12 x i8] c"pad.macro.r\00", align 1
@.str.12.438 = private unnamed_addr constant [12 x i8] c"pad.macro.b\00", align 1
@.str.441 = private unnamed_addr constant [7 x i8] c"%s.pin\00", align 1
@.str.1.442 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.2.443 = private unnamed_addr constant [15 x i8] c"can't open %s\0A\00", align 1
@.str.3.444 = private unnamed_addr constant [8 x i8] c"net %s\0A\00", align 1
@.str.4.445 = private unnamed_addr constant [44 x i8] c"pin %s  x %d  y %d  cell %d  PinOrEquiv %d\0A\00", align 1
@.str.448 = private unnamed_addr constant [7 x i8] c"%s.dat\00", align 1
@.str.1.449 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.2.450 = private unnamed_addr constant [15 x i8] c"can't open %s\0A\00", align 1
@.str.3.451 = private unnamed_addr constant [25 x i8] c"cell %s  orientation %d\0A\00", align 1
@.str.4.453 = private unnamed_addr constant [10 x i8] c"vertices \00", align 1
@.str.5.452 = private unnamed_addr constant [8 x i8] c"pad %s\0A\00", align 1
@.str.6.454 = private unnamed_addr constant [7 x i8] c" %d %d\00", align 1
@.str.8.455 = private unnamed_addr constant [8 x i8] c"PHANTOM\00", align 1
@.str.9.456 = private unnamed_addr constant [17 x i8] c"pin %s %s %d %d\0A\00", align 1
@.str.459 = private unnamed_addr constant [7 x i8] c"%s.cfs\00", align 1
@.str.1.460 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.2.461 = private unnamed_addr constant [15 x i8] c"can't open %s\0A\00", align 1
@redoFlag = internal global i32 0, align 4
@fpNodes = internal global ptr null, align 8
@.str.3.464 = private unnamed_addr constant [20 x i8] c"L NC;\0A94 %s %d %d;\0A\00", align 1
@.str.4.465 = private unnamed_addr constant [11 x i8] c"L NC;\0AW %d\00", align 1
@.str.5.466 = private unnamed_addr constant [7 x i8] c" %d %d\00", align 1
@.str.6.467 = private unnamed_addr constant [9 x i8] c" %d %d;\0A\00", align 1
@.str.7.468 = private unnamed_addr constant [8 x i8] c"PHANTOM\00", align 1
@.str.8.469 = private unnamed_addr constant [7 x i8] c"L NC;\0A\00", align 1
@.str.9.470 = private unnamed_addr constant [37 x i8] c"W %d %d %d %d %d %d %d %d %d %d %d;\0A\00", align 1
@.str.471 = private unnamed_addr constant [5 x i8] c" %s \00", align 1
@.str.1.472 = private unnamed_addr constant [5 x i8] c"cell\00", align 1
@.str.2.473 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.3.474 = private unnamed_addr constant [41 x i8] c"Failed to input cell # in the .cel file\0A\00", align 1
@.str.4.475 = private unnamed_addr constant [9 x i8] c"cell:%d\0A\00", align 1
@.str.5.476 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.6.477 = private unnamed_addr constant [31 x i8] c"Failed to input keyword name \0A\00", align 1
@.str.7.478 = private unnamed_addr constant [28 x i8] c" in the .cel file; cell:%d\0A\00", align 1
@.str.8.479 = private unnamed_addr constant [5 x i8] c"name\00", align 1
@.str.9.480 = private unnamed_addr constant [27 x i8] c"in the .cel file; cell:%d\0A\00", align 1
@.str.10.481 = private unnamed_addr constant [44 x i8] c"Failed to input cell name in the .cel file\0A\00", align 1
@.str.11.482 = private unnamed_addr constant [5 x i8] c" %d \00", align 1
@.str.12.483 = private unnamed_addr constant [42 x i8] c"Failed to input corners in the .cel file\0A\00", align 1
@.str.13.484 = private unnamed_addr constant [35 x i8] c"Failed to input at least 4 corners\00", align 1
@.str.15.485 = private unnamed_addr constant [32 x i8] c"parser failed to find: corners \00", align 1
@.str.16.486 = private unnamed_addr constant [18 x i8] c"in the .cel file\0A\00", align 1
@.str.17.487 = private unnamed_addr constant [8 x i8] c" %d %d \00", align 1
@.str.18.488 = private unnamed_addr constant [36 x i8] c"Failed to input corner coordinates\0A\00", align 1
@.str.19.489 = private unnamed_addr constant [6 x i8] c"class\00", align 1
@.str.20.490 = private unnamed_addr constant [30 x i8] c"parser failed to find: class \00", align 1
@.str.21.491 = private unnamed_addr constant [40 x i8] c"Failed to input class in the .cel file\0A\00", align 1
@.str.22.492 = private unnamed_addr constant [47 x i8] c"Failed to input orientations in the .cel file\0A\00", align 1
@.str.23.493 = private unnamed_addr constant [44 x i8] c"Failed to input orientations between 1 and \00", align 1
@.str.24.494 = private unnamed_addr constant [29 x i8] c"8 in the .cel file; cell:%d\0A\00", align 1
@.str.25.495 = private unnamed_addr constant [13 x i8] c"orientations\00", align 1
@.str.26.496 = private unnamed_addr constant [37 x i8] c"parser failed to find: orientations \00", align 1
@.str.27.497 = private unnamed_addr constant [39 x i8] c"Failed to input expected orientations\0A\00", align 1
@.str.29.498 = private unnamed_addr constant [32 x i8] c"parser unexpectedly found: pin \00", align 1
@.str.30.499 = private unnamed_addr constant [37 x i8] c"parser failed to find keyword: name \00", align 1
@.str.31.500 = private unnamed_addr constant [36 x i8] c"in the .cel file; instead found:%s\0A\00", align 1
@.str.32.501 = private unnamed_addr constant [32 x i8] c"parser failed to find pin name \00", align 1
@.str.33.502 = private unnamed_addr constant [39 x i8] c"parser failed to find keyword: signal \00", align 1
@.str.34.503 = private unnamed_addr constant [7 x i8] c"signal\00", align 1
@.str.35 = private unnamed_addr constant [35 x i8] c"parser failed to find signal name \00", align 1
@.str.36.504 = private unnamed_addr constant [39 x i8] c"Failed to input coordinates for a pin\0A\00", align 1
@.str.37 = private unnamed_addr constant [6 x i8] c"equiv\00", align 1
@.str.38 = private unnamed_addr constant [9 x i8] c"softcell\00", align 1
@.str.39 = private unnamed_addr constant [30 x i8] c"Failed to input cell number \0A\00", align 1
@.str.40 = private unnamed_addr constant [6 x i8] c"asplb\00", align 1
@.str.41 = private unnamed_addr constant [4 x i8] c"%lf\00", align 1
@.str.42 = private unnamed_addr constant [40 x i8] c"Failed to input asplb in the .cel file\0A\00", align 1
@.str.43 = private unnamed_addr constant [30 x i8] c"parser failed to find: asplb \00", align 1
@.str.44 = private unnamed_addr constant [6 x i8] c"aspub\00", align 1
@.str.45 = private unnamed_addr constant [40 x i8] c"Failed to input aspub in the .cel file\0A\00", align 1
@.str.46 = private unnamed_addr constant [30 x i8] c"parser failed to find: aspub \00", align 1
@.str.47 = private unnamed_addr constant [9 x i8] c"sequence\00", align 1
@.str.48 = private unnamed_addr constant [6 x i8] c"group\00", align 1
@.str.49.505 = private unnamed_addr constant [43 x i8] c"parser unexpectedly found: sequence/group \00", align 1
@.str.50 = private unnamed_addr constant [42 x i8] c"Failed to input a seq/group in .cel file\0A\00", align 1
@.str.51 = private unnamed_addr constant [30 x i8] c"parser did not find keyword: \00", align 1
@.str.52 = private unnamed_addr constant [23 x i8] c"name in the .cel file\0A\00", align 1
@.str.53 = private unnamed_addr constant [32 x i8] c"parser failed to find keyword: \00", align 1
@.str.54 = private unnamed_addr constant [23 x i8] c"name in the .cel file:\00", align 1
@.str.55.506 = private unnamed_addr constant [19 x i8] c" instead found:%s\0A\00", align 1
@.str.56 = private unnamed_addr constant [25 x i8] c"signal in the .cel file\0A\00", align 1
@.str.57 = private unnamed_addr constant [26 x i8] c"signal in the .cel file;\0A\00", align 1
@.str.58 = private unnamed_addr constant [30 x i8] c"parser failed to find signal \00", align 1
@.str.59 = private unnamed_addr constant [28 x i8] c"parser failed to find: pin \00", align 1
@.str.60 = private unnamed_addr constant [17 x i8] c"side.restriction\00", align 1
@.str.61 = private unnamed_addr constant [41 x i8] c"parser failed to find: side.restriction \00", align 1
@.str.62 = private unnamed_addr constant [41 x i8] c"Failed to input the 2 side.restriction \0A\00", align 1
@.str.63.507 = private unnamed_addr constant [33 x i8] c"sides in the .cel file; cell:%d\0A\00", align 1
@.str.65 = private unnamed_addr constant [40 x i8] c"Failed to input pad # in the .cel file\0A\00", align 1
@.str.66 = private unnamed_addr constant [8 x i8] c"pad:%d\0A\00", align 1
@.str.68 = private unnamed_addr constant [25 x i8] c"Failed to input padside \00", align 1
@.str.69 = private unnamed_addr constant [17 x i8] c"Current pad: %d\0A\00", align 1
@.str.70 = private unnamed_addr constant [32 x i8] c"Failed to find keyword padside \00", align 1
@.str.71 = private unnamed_addr constant [11 x i8] c"for a pad\0A\00", align 1
@.str.72 = private unnamed_addr constant [10 x i8] c"sidespace\00", align 1
@.str.73 = private unnamed_addr constant [26 x i8] c"found unparsable keyword \00", align 1
@C = internal global ptr null, align 8
@netctr = internal global i32 0, align 4
@.str.508 = private unnamed_addr constant [5 x i8] c" %s \00", align 1
@.str.1.509 = private unnamed_addr constant [5 x i8] c"cell\00", align 1
@.str.2.510 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.3.511 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.4.512 = private unnamed_addr constant [5 x i8] c" %d \00", align 1
@.str.5.513 = private unnamed_addr constant [8 x i8] c" %d %d \00", align 1
@.str.6.514 = private unnamed_addr constant [34 x i8] c"a zero length side was found for\0A\00", align 1
@.str.7.515 = private unnamed_addr constant [21 x i8] c"the current cell:%d\0A\00", align 1
@.str.8.516 = private unnamed_addr constant [35 x i8] c"a non rectilinear side was found \0A\00", align 1
@.str.9.517 = private unnamed_addr constant [25 x i8] c"for the current cell:%d\0A\00", align 1
@.str.11.518 = private unnamed_addr constant [6 x i8] c"equiv\00", align 1
@.str.12.519 = private unnamed_addr constant [38 x i8] c"equiv pin cannot reside on soft cell\0A\00", align 1
@.str.13.520 = private unnamed_addr constant [22 x i8] c"problematic cell: %d\0A\00", align 1
@.str.14.521 = private unnamed_addr constant [9 x i8] c"softcell\00", align 1
@.str.15.522 = private unnamed_addr constant [31 x i8] c"a non rectilinear side found \0A\00", align 1
@.str.16.523 = private unnamed_addr constant [4 x i8] c"%lf\00", align 1
@.str.17.524 = private unnamed_addr constant [9 x i8] c"sequence\00", align 1
@.str.18.525 = private unnamed_addr constant [6 x i8] c"group\00", align 1
@.str.20.526 = private unnamed_addr constant [10 x i8] c"sidespace\00", align 1
@.str.21.527 = private unnamed_addr constant [6 x i8] c" %lf \00", align 1
@.str.530 = private unnamed_addr constant [36 x i8] c"DEATH: Sequence was specified which\00", align 1
@.str.1.531 = private unnamed_addr constant [36 x i8] c" required more capacity than given\0A\00", align 1
@.str.2.532 = private unnamed_addr constant [37 x i8] c"sides could hanlde. Problem cell:%d\0A\00", align 1
@.str.535 = private unnamed_addr constant [7 x i8] c"%s.brd\00", align 1
@.str.1.536 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.2.537 = private unnamed_addr constant [15 x i8] c"can't open %s\0A\00", align 1
@.str.3.538 = private unnamed_addr constant [34 x i8] c"\0A\0A\0A\0ABOUNDING BOX OF CELL:%6d  is \00", align 1
@.str.4.539 = private unnamed_addr constant [42 x i8] c"LEFT:%6d  BOTTOM:%6d  RIGHT:%6d  TOP:%6d\0A\00", align 1
@.str.5.540 = private unnamed_addr constant [43 x i8] c"\0ATHESE ARE THE TILES COMPRISING THIS CELL\0A\00", align 1
@.str.6.541 = private unnamed_addr constant [21 x i8] c"LEFT:%6d  BOTTOM:%6d\00", align 1
@.str.7.542 = private unnamed_addr constant [23 x i8] c"  RIGHT:%6d  TOP:%6d\0A\0A\00", align 1
@.str.8.543 = private unnamed_addr constant [39 x i8] c"THESE ARE THE TERMINALS FOR THIS CELL\0A\00", align 1
@.str.9.544 = private unnamed_addr constant [36 x i8] c"TERMINAL:%s   XPOS:%6d   YPOS:%6d\0A\0A\00", align 1
@.str.10.545 = private unnamed_addr constant [35 x i8] c"TERMINAL:%s   XPOS:%6d   YPOS:%6d\0A\00", align 1
@.str.11.546 = private unnamed_addr constant [40 x i8] c"ACTUALS           XPOS:%6d   YPOS:%6d\0A\0A\00", align 1
@.str.12.547 = private unnamed_addr constant [14 x i8] c"   SITE:%6d\0A\0A\00", align 1
@.str.552 = private unnamed_addr constant [7 x i8] c"%s.rte\00", align 1
@.str.1.553 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.2.554 = private unnamed_addr constant [7 x i8] c"%s.gph\00", align 1
@.str.3.555 = private unnamed_addr constant [41 x i8] c"edge %5d %5d   length %8d  capacity %8d\0A\00", align 1
@.str.4.556 = private unnamed_addr constant [98 x i8] c"edge  node: %5d  xloc: %d  yloc: %d    node: %5d  xloc: %d  yloc: %d   length: %d   capacity: %d\0A\00", align 1
@.str.557 = private unnamed_addr constant [7 x i8] c"%s.pyt\00", align 1
@.str.1.558 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.2.559 = private unnamed_addr constant [15 x i8] c"can't open %s\0A\00", align 1
@.str.3.560 = private unnamed_addr constant [10 x i8] c"\0A\0Anet %s \00", align 1
@.str.4.561 = private unnamed_addr constant [15 x i8] c"    length %d\0A\00", align 1
@.str.5.562 = private unnamed_addr constant [9 x i8] c"pins %d\0A\00", align 1
@.str.6.563 = private unnamed_addr constant [12 x i8] c"        %s\0A\00", align 1
@.str.7.564 = private unnamed_addr constant [13 x i8] c"channels %d\0A\00", align 1
@.str.8.565 = private unnamed_addr constant [21 x i8] c"        %d %d %d %d\0A\00", align 1
@perim = internal global i32 0, align 4
@kArray = internal global ptr null, align 8
@A = internal global ptr null, align 8
@B = internal global ptr null, align 8
@R = internal global ptr null, align 8
@.str.576 = private unnamed_addr constant [5 x i8] c" %s \00", align 1
@.str.1.577 = private unnamed_addr constant [5 x i8] c"cell\00", align 1
@.str.2.578 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.3.579 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.4.580 = private unnamed_addr constant [5 x i8] c" %d \00", align 1
@.str.5.581 = private unnamed_addr constant [8 x i8] c" %d %d \00", align 1
@.str.12.582 = private unnamed_addr constant [36 x i8] c"padside not specified properly for \00", align 1
@.str.13.583 = private unnamed_addr constant [9 x i8] c"pad: %s\0A\00", align 1
@.str.14.584 = private unnamed_addr constant [10 x i8] c"sidespace\00", align 1
@.str.15.585 = private unnamed_addr constant [6 x i8] c" %lf \00", align 1
@fixLRBT = internal global ptr null, align 8
@padspace = internal global ptr null, align 8
@.str.16.586 = private unnamed_addr constant [9 x i8] c"softcell\00", align 1
@pinnames = internal global ptr null, align 8
@.str.18.587 = private unnamed_addr constant [23 x i8] c"screwup in readcells: \00", align 1
@.str.19.588 = private unnamed_addr constant [26 x i8] c"failed to properly count \00", align 1
@.str.20.589 = private unnamed_addr constant [29 x i8] c"the no. of uncommitted pins\0A\00", align 1
@.str.21.590 = private unnamed_addr constant [6 x i8] c"equiv\00", align 1
@.str.22.591 = private unnamed_addr constant [6 x i8] c"asplb\00", align 1
@.str.23.592 = private unnamed_addr constant [4 x i8] c"%lf\00", align 1
@.str.24.593 = private unnamed_addr constant [6 x i8] c"aspub\00", align 1
@.str.25.594 = private unnamed_addr constant [9 x i8] c"sequence\00", align 1
@.str.26.595 = private unnamed_addr constant [6 x i8] c"group\00", align 1
@.str.27.596 = private unnamed_addr constant [33 x i8] c"value of firstside out of range\0A\00", align 1
@.str.28.597 = private unnamed_addr constant [29 x i8] c"firstside:%d  range:1 to %d\0A\00", align 1
@.str.29.598 = private unnamed_addr constant [20 x i8] c"current cell is:%d\0A\00", align 1
@.str.30.599 = private unnamed_addr constant [32 x i8] c"value of lastside out of range\0A\00", align 1
@.str.31.600 = private unnamed_addr constant [28 x i8] c"lastside:%d  range:1 to %d\0A\00", align 1
@totPins = internal global i32 0, align 4
@switch.table.readcells = private unnamed_addr constant [10 x i32] [i32 4, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 3, i32 2], align 4
@bbr = internal global i32 0, align 4
@bbt = internal global i32 0, align 4
@bbl = internal global i32 0, align 4
@bbb = internal global i32 0, align 4
@hFixedEdgeRoot = internal global ptr null, align 8
@vFixedEdgeRoot = internal global ptr null, align 8
@hEdgeRoot = internal global ptr null, align 8
@cellList = internal global ptr null, align 8
@.str.603 = private unnamed_addr constant [5 x i8] c" %s \00", align 1
@.str.1.604 = private unnamed_addr constant [5 x i8] c"cell\00", align 1
@.str.2.605 = private unnamed_addr constant [5 x i8] c" %d \00", align 1
@.str.3.606 = private unnamed_addr constant [8 x i8] c" %d %d \00", align 1
@.str.4.607 = private unnamed_addr constant [37 x i8] c"Found unparsable keyword: < %s > in \00", align 1
@.str.5.608 = private unnamed_addr constant [15 x i8] c"the .geo file\0A\00", align 1
@.str.6.609 = private unnamed_addr constant [18 x i8] c"Current cell: %d\0A\00", align 1
@.str.610 = private unnamed_addr constant [5 x i8] c" %s \00", align 1
@.str.1.611 = private unnamed_addr constant [5 x i8] c"edge\00", align 1
@.str.2.612 = private unnamed_addr constant [8 x i8] c" %d %d \00", align 1
@.str.3.613 = private unnamed_addr constant [33 x i8] c"Failed to input a pair of nodes \00", align 1
@.str.4.614 = private unnamed_addr constant [41 x i8] c"following keyword edge in the .gph file\0A\00", align 1
@.str.5.615 = private unnamed_addr constant [18 x i8] c"Current edge: %d\0A\00", align 1
@.str.6.616 = private unnamed_addr constant [7 x i8] c"length\00", align 1
@.str.7.617 = private unnamed_addr constant [5 x i8] c" %d \00", align 1
@.str.8.618 = private unnamed_addr constant [24 x i8] c"Failed to input length \00", align 1
@.str.9.619 = private unnamed_addr constant [18 x i8] c"in the .gph file\0A\00", align 1
@.str.10.620 = private unnamed_addr constant [32 x i8] c"Failed to find keyword: length \00", align 1
@.str.11.621 = private unnamed_addr constant [13 x i8] c"for an edge\0A\00", align 1
@.str.12.622 = private unnamed_addr constant [9 x i8] c"capacity\00", align 1
@.str.13.623 = private unnamed_addr constant [26 x i8] c"Failed to input capacity \00", align 1
@.str.14.624 = private unnamed_addr constant [34 x i8] c"Failed to find keyword: capacity \00", align 1
@.str.15.625 = private unnamed_addr constant [38 x i8] c"Found unknown string when attempting \00", align 1
@.str.16.626 = private unnamed_addr constant [40 x i8] c"to find keyword: edge in the .gph file\0A\00", align 1
@.str.17.627 = private unnamed_addr constant [19 x i8] c"instead found: %s\0A\00", align 1
@.str.630 = private unnamed_addr constant [5 x i8] c" %s \00", align 1
@.str.2.631 = private unnamed_addr constant [25 x i8] c"The keyword allnets was \00", align 1
@.str.3.632 = private unnamed_addr constant [39 x i8] c"not properly entered in the .net file\0A\00", align 1
@.str.4.633 = private unnamed_addr constant [10 x i8] c"HVweights\00", align 1
@.str.5.634 = private unnamed_addr constant [27 x i8] c"The keyword HVweights was \00", align 1
@.str.6.635 = private unnamed_addr constant [8 x i8] c"%lf %lf\00", align 1
@.str.7.636 = private unnamed_addr constant [34 x i8] c"The net weights for allnets were \00", align 1
@Hdefault = internal global double 0.000000e+00, align 8
@Vdefault = internal global double 0.000000e+00, align 8
@.str.9.641 = private unnamed_addr constant [37 x i8] c"The net named: %s  in the .net file\0A\00", align 1
@.str.10.642 = private unnamed_addr constant [35 x i8] c"was not encountered while reading\0A\00", align 1
@.str.11.643 = private unnamed_addr constant [31 x i8] c"the .cel file --- FATAL error\0A\00", align 1
@.str.12.644 = private unnamed_addr constant [31 x i8] c"The critical net weights were \00", align 1
@.str.13.645 = private unnamed_addr constant [22 x i8] c"not properly entered\0A\00", align 1
@.str.14.646 = private unnamed_addr constant [32 x i8] c"in the .net file after net: %s\0A\00", align 1
@.str.15.647 = private unnamed_addr constant [35 x i8] c"Neither the keyword HVweights nor \00", align 1
@.str.16.648 = private unnamed_addr constant [33 x i8] c"the keyword nofeeds was entered\0A\00", align 1
@.str.17.649 = private unnamed_addr constant [37 x i8] c"unexpected keyword in the .net file\0A\00", align 1
@wireEstimateOnly = internal global i32 0, align 4
@attpercell = internal global i32 0, align 4
@cost_only = internal global i32 0, align 4
@maxWeight = internal global i32 0, align 4
@baseWeight = internal global i32 0, align 4
@chipaspect = internal global double 0.000000e+00, align 8
@pinSpacing = internal global i32 0, align 4
@trackspacing = internal global i32 0, align 4
@doPlacement = internal global i32 0, align 4
@doGlobalRoute = internal global i32 0, align 4
@coreGiven = internal global i32 0, align 4
@defaultTracks = internal global i32 0, align 4
@core_expansion_given = internal global i32 0, align 4
@spot_control = internal global double 0.000000e+00, align 8
@.str.658 = private unnamed_addr constant [7 x i8] c"%s.par\00", align 1
@.str.1.659 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.2.660 = private unnamed_addr constant [15 x i8] c"can't open %s\0A\00", align 1
@.str.3.661 = private unnamed_addr constant [5 x i8] c" %s \00", align 1
@.str.4.662 = private unnamed_addr constant [9 x i8] c"initialT\00", align 1
@.str.5.663 = private unnamed_addr constant [6 x i8] c" %lf \00", align 1
@.str.6.664 = private unnamed_addr constant [39 x i8] c"The value of initialT was not properly\00", align 1
@.str.7.665 = private unnamed_addr constant [26 x i8] c"entered in the .par file\0A\00", align 1
@.str.8.666 = private unnamed_addr constant [13 x i8] c"spot.control\00", align 1
@.str.9.667 = private unnamed_addr constant [43 x i8] c"The value of spot.control was not properly\00", align 1
@.str.10.668 = private unnamed_addr constant [15 x i8] c"core.expansion\00", align 1
@core_expansion = internal global double 0.000000e+00, align 8
@.str.11.671 = private unnamed_addr constant [45 x i8] c"The value of core.expansion was not properly\00", align 1
@.str.12.672 = private unnamed_addr constant [23 x i8] c"wire.estimation.factor\00", align 1
@.str.13.673 = private unnamed_addr constant [5 x i8] c" %d \00", align 1
@wire_est_factor = internal global i32 0, align 4
@.str.14.676 = private unnamed_addr constant [45 x i8] c"The value of wire.estimation.factor was not \00", align 1
@.str.15.677 = private unnamed_addr constant [35 x i8] c"properly entered in the .par file\0A\00", align 1
@.str.16.678 = private unnamed_addr constant [10 x i8] c"cost_only\00", align 1
@.str.17.679 = private unnamed_addr constant [12 x i8] c"random.seed\00", align 1
@.str.18.680 = private unnamed_addr constant [42 x i8] c"The value of random.seed was not properly\00", align 1
@.str.19.681 = private unnamed_addr constant [13 x i8] c"att.per.cell\00", align 1
@.str.20.682 = private unnamed_addr constant [43 x i8] c"The value of att.per.cell was not properly\00", align 1
@.str.21.683 = private unnamed_addr constant [14 x i8] c"track.spacing\00", align 1
@.str.22.684 = private unnamed_addr constant [45 x i8] c"The value for track.spacing was not properly\00", align 1
@pitch = internal global i32 0, align 4
@.str.23.685 = private unnamed_addr constant [12 x i8] c"pin.spacing\00", align 1
@.str.24.686 = private unnamed_addr constant [43 x i8] c"The value for pin.spacing was not properly\00", align 1
@.str.25.687 = private unnamed_addr constant [18 x i8] c"chip.aspect.ratio\00", align 1
@.str.26.688 = private unnamed_addr constant [40 x i8] c"The value for chip.aspect.ratio was not\00", align 1
@.str.27.689 = private unnamed_addr constant [36 x i8] c" properly entered in the .par file\0A\00", align 1
@.str.28.690 = private unnamed_addr constant [17 x i8] c"router.max.paths\00", align 1
@.str.29.691 = private unnamed_addr constant [35 x i8] c"The value for router.max.paths was\00", align 1
@.str.30.692 = private unnamed_addr constant [40 x i8] c" not properly entered in the .par file\0A\00", align 1
@.str.31.693 = private unnamed_addr constant [21 x i8] c"router.extra.sources\00", align 1
@.str.32.694 = private unnamed_addr constant [39 x i8] c"The value for router.extra.sources was\00", align 1
@.str.33.695 = private unnamed_addr constant [27 x i8] c"default.tracks.per.channel\00", align 1
@.str.34.696 = private unnamed_addr constant [45 x i8] c"The value for default.tracks.per.channel was\00", align 1
@.str.35.697 = private unnamed_addr constant [21 x i8] c"wire.estimation.only\00", align 1
@.str.36.698 = private unnamed_addr constant [13 x i8] c"do.placement\00", align 1
@.str.37.699 = private unnamed_addr constant [17 x i8] c"do.channel.graph\00", align 1
@.str.38.700 = private unnamed_addr constant [16 x i8] c"do.global.route\00", align 1
@.str.39.701 = private unnamed_addr constant [14 x i8] c"do.compaction\00", align 1
@.str.40.702 = private unnamed_addr constant [45 x i8] c"The value for do.compaction was not properly\00", align 1
@.str.41.703 = private unnamed_addr constant [5 x i8] c"core\00", align 1
@.str.42.704 = private unnamed_addr constant [14 x i8] c" %d %d %d %d \00", align 1
@.str.43.705 = private unnamed_addr constant [40 x i8] c"The 4 values for core were not properly\00", align 1
@.str.44.706 = private unnamed_addr constant [12 x i8] c"gridOffsetX\00", align 1
@.str.45.707 = private unnamed_addr constant [43 x i8] c"The value for gridOffsetX was not properly\00", align 1
@.str.46.708 = private unnamed_addr constant [12 x i8] c"gridOffsetY\00", align 1
@.str.47.709 = private unnamed_addr constant [43 x i8] c"The value for gridOffsetY was not properly\00", align 1
@.str.48.710 = private unnamed_addr constant [6 x i8] c"gridX\00", align 1
@.str.49.711 = private unnamed_addr constant [37 x i8] c"The value for gridX was not properly\00", align 1
@.str.50.712 = private unnamed_addr constant [6 x i8] c"gridY\00", align 1
@.str.51.713 = private unnamed_addr constant [37 x i8] c"The value for gridY was not properly\00", align 1
@.str.52.714 = private unnamed_addr constant [37 x i8] c"Unexpected keyword in the .par file\0A\00", align 1
@.str.53.715 = private unnamed_addr constant [41 x i8] c"Error: It appears as though the grid is\0A\00", align 1
@.str.54.716 = private unnamed_addr constant [21 x i8] c"not fully specified\0A\00", align 1
@.str.55.717 = private unnamed_addr constant [47 x i8] c"att.per.cell was not entered in the .par file\0A\00", align 1
@.str.56.718 = private unnamed_addr constant [18 x i8] c"att.per.cell: %d\0A\00", align 1
@.str.57.719 = private unnamed_addr constant [44 x i8] c"track.spacing was not entered in .par file\0A\00", align 1
@.str.58.720 = private unnamed_addr constant [19 x i8] c"track.spacing: %d\0A\00", align 1
@.str.59.721 = private unnamed_addr constant [46 x i8] c"pin.spacing was not entered in the .par file\0A\00", align 1
@.str.60.722 = private unnamed_addr constant [17 x i8] c"pin.spacing: %d\0A\00", align 1
@.str.61.723 = private unnamed_addr constant [35 x i8] c"chip.aspect.ratio was not entered \00", align 1
@.str.62.724 = private unnamed_addr constant [18 x i8] c"in the .par file\0A\00", align 1
@.str.63.725 = private unnamed_addr constant [23 x i8] c"chip.aspect.ratio: %g\0A\00", align 1
@.str.64 = private unnamed_addr constant [42 x i8] c"Using default value of spot.control: 1.0\0A\00", align 1
@.str.65.726 = private unnamed_addr constant [25 x i8] c"spot.control set to: %f\0A\00", align 1
@.str.66.727 = private unnamed_addr constant [29 x i8] c"TimberWolf instructed to do \00", align 1
@.str.67 = private unnamed_addr constant [27 x i8] c"placement of circuit:<%s>\0A\00", align 1
@.str.68.728 = private unnamed_addr constant [35 x i8] c"TimberWolf instructed to generate \00", align 1
@.str.69.729 = private unnamed_addr constant [32 x i8] c"channel graph for circuit:<%s>\0A\00", align 1
@.str.70.730 = private unnamed_addr constant [33 x i8] c"TimberWolf assumes input files: \00", align 1
@.str.71.731 = private unnamed_addr constant [38 x i8] c"<%s.geo> and <%s.pin> are present in\0A\00", align 1
@.str.72.732 = private unnamed_addr constant [47 x i8] c"router.max.paths was not entered in .par file\0A\00", align 1
@.str.73.733 = private unnamed_addr constant [22 x i8] c"router.max.paths: %d\0A\00", align 1
@.str.74 = private unnamed_addr constant [46 x i8] c"router.max.paths set to BARE MINIMUM version\0A\00", align 1
@.str.75 = private unnamed_addr constant [51 x i8] c"router.extra.sources was not entered in .par file\0A\00", align 1
@.str.76 = private unnamed_addr constant [26 x i8] c"router.extra.sources: %d\0A\00", align 1
@.str.77 = private unnamed_addr constant [29 x i8] c"default.tracks.per.channel \0A\00", align 1
@.str.78 = private unnamed_addr constant [30 x i8] c"was not entered in .par file\0A\00", align 1
@.str.79 = private unnamed_addr constant [32 x i8] c"default.tracks.per.channel: %d\0A\00", align 1
@.str.80 = private unnamed_addr constant [31 x i8] c"global route for circuit:<%s>\0A\00", align 1
@.str.81 = private unnamed_addr constant [38 x i8] c"<%s.gph> and <%s.twf> are present in \00", align 1
@.str.82 = private unnamed_addr constant [23 x i8] c"the working directory\0A\00", align 1
@.str.83 = private unnamed_addr constant [44 x i8] c"post-placement compaction for circuit:<%s>\0A\00", align 1
@.str.84 = private unnamed_addr constant [40 x i8] c"Error: TimberWolf cannot do compaction\0A\00", align 1
@.str.85 = private unnamed_addr constant [42 x i8] c"without request to also do: doPlacement,\0A\00", align 1
@.str.86 = private unnamed_addr constant [34 x i8] c"doChannelGraph and doGlobalRoute\0A\00", align 1
@.str.87 = private unnamed_addr constant [29 x i8] c"Hence, request is cancelled\0A\00", align 1
@.str.734 = private unnamed_addr constant [5 x i8] c" %s \00", align 1
@.str.2.735 = private unnamed_addr constant [28 x i8] c"Failed to input a net name \00", align 1
@.str.3.736 = private unnamed_addr constant [18 x i8] c"in the .twf file\0A\00", align 1
@.str.4.737 = private unnamed_addr constant [17 x i8] c"Current net: %d\0A\00", align 1
@.str.6.738 = private unnamed_addr constant [28 x i8] c"Failed to input a pin name \00", align 1
@.str.7.739 = private unnamed_addr constant [32 x i8] c"Failed to input keyword: nodes \00", align 1
@.str.8.740 = private unnamed_addr constant [6 x i8] c"nodes\00", align 1
@.str.9.741 = private unnamed_addr constant [29 x i8] c"Failed to input keyword: at \00", align 1
@.str.10.742 = private unnamed_addr constant [8 x i8] c" %d %d \00", align 1
@.str.11.743 = private unnamed_addr constant [33 x i8] c"Failed to input a pair of nodes \00", align 1
@.str.12.744 = private unnamed_addr constant [42 x i8] c"following keyword nodes in the .twf file\0A\00", align 1
@.str.13.745 = private unnamed_addr constant [3 x i8] c"at\00", align 1
@.str.14.746 = private unnamed_addr constant [5 x i8] c" %d \00", align 1
@.str.15.747 = private unnamed_addr constant [42 x i8] c"Failed to input an integer following: at \00", align 1
@.str.16.748 = private unnamed_addr constant [6 x i8] c"equiv\00", align 1
@.str.17.749 = private unnamed_addr constant [31 x i8] c"Found unknown string: < %s >  \00", align 1
@.str.18.752 = private unnamed_addr constant [31 x i8] c"Global Routing Net Number: %d\0A\00", align 1
@bucket = internal global ptr null, align 8
@rectArray = internal global ptr null, align 8
@edgeTransition = internal global i32 0, align 4
@bareFlag = internal global i32 0, align 4
@routerMaxPaths = internal global i32 0, align 4
@routerExtraS = internal global i32 0, align 4
@.str.813 = private unnamed_addr constant [7 x i8] c"%s.gph\00", align 1
@.str.1.814 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.2.815 = private unnamed_addr constant [29 x i8] c"Error: file: %s not present\0A\00", align 1
@.str.3.816 = private unnamed_addr constant [7 x i8] c"%s.twf\00", align 1
@.str.4.817 = private unnamed_addr constant [15 x i8] c"can't open %s\0A\00", align 1
@doChannelGraph = internal global i32 0, align 4
@eNum = internal global i32 0, align 4
@numRects = internal global i32 0, align 4
@eIndexArray = internal global ptr null, align 8
@xBellArray = internal global ptr null, align 8
@yBellArray = internal global ptr null, align 8
@pnodeAlength = internal global i32 0, align 4
@maxpnode = internal global i32 0, align 4
@gtrace = internal global ptr null, align 8
@largestNet = internal global i32 0, align 4
@netRoutes = internal global ptr null, align 8
@numpins = internal global i32 0, align 4
@pnameArray = internal global ptr null, align 8
@nnameArray = internal global ptr null, align 8
@pinOffset = internal global ptr null, align 8
@netSegArray = internal global ptr null, align 8
@pathArray = internal global ptr null, align 8
@tempArray = internal global ptr null, align 8
@pinlist = internal global ptr null, align 8
@MAXPATHS = internal global i32 0, align 4
@Mpaths = internal global i32 0, align 4
@bareMinimum = internal global i32 0, align 4
@indexRoot = internal global ptr null, align 8
@treeSize = internal global i32 0, align 4
@sourceList = internal global ptr null, align 8
@delSourceList = internal global ptr null, align 8
@sourcePtr = internal global i32 0, align 4
@targetList = internal global ptr null, align 8
@addTargetList = internal global ptr null, align 8
@targetPtr = internal global i32 0, align 4
@segPtr = internal global i32 0, align 4
@pathLength = internal global i32 0, align 4
@pathIndex = internal global i32 0, align 4
@savePaths = internal global ptr null, align 8
@segList = internal global ptr null, align 8
@netRoot = internal global ptr null, align 8
@EXTRASOURCES = internal global i32 0, align 4
@pathList = internal global ptr null, align 8
@.str.822 = private unnamed_addr constant [7 x i8] c"%s.sav\00", align 1
@cktName = internal global ptr null, align 8
@.str.1.823 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.2.824 = private unnamed_addr constant [13 x i8] c"%d %d %d %d\0A\00", align 1
@.str.3.825 = private unnamed_addr constant [5 x i8] c" %d \00", align 1
@.str.4.826 = private unnamed_addr constant [6 x i8] c" %lf\0A\00", align 1
@.str.5.829 = private unnamed_addr constant [14 x i8] c" %d %d %d %d \00", align 1
@.str.6.830 = private unnamed_addr constant [4 x i8] c"%lf\00", align 1
@pinsPerLen = internal global double 0.000000e+00, align 8
@numnodes = internal global i32 0, align 4
@pnodeArray = internal global ptr null, align 8
@gnodeArray = internal global ptr null, align 8
@totPen = internal global double 0.000000e+00, align 8
@.str.841 = private unnamed_addr constant [39 x i8] c"range limiter:%d units either way in x\00", align 1
@.str.1.842 = private unnamed_addr constant [29 x i8] c"   compared to bdxlength:%d\0A\00", align 1
@.str.2.843 = private unnamed_addr constant [39 x i8] c"range limiter:%d units either way in y\00", align 1
@.str.3.844 = private unnamed_addr constant [29 x i8] c"   compared to bdylength:%d\0A\00", align 1
@.str.4.845 = private unnamed_addr constant [22 x i8] c"scalex:%d  scaley:%d\0A\00", align 1
@totFunc = internal global double 0.000000e+00, align 8
@.str.848 = private unnamed_addr constant [39 x i8] c"range limiter:%d units either way in x\00", align 1
@.str.1.849 = private unnamed_addr constant [29 x i8] c"   compared to bdxlength:%d\0A\00", align 1
@.str.2.850 = private unnamed_addr constant [39 x i8] c"range limiter:%d units either way in y\00", align 1
@.str.3.851 = private unnamed_addr constant [29 x i8] c"   compared to bdylength:%d\0A\00", align 1
@.str.4.852 = private unnamed_addr constant [22 x i8] c"scalex:%d  scaley:%d\0A\00", align 1
@.str.855 = private unnamed_addr constant [50 x i8] c"\0AInitial Wiring Cost: %d   Final Wiring Cost: %d\0A\00", align 1
@icost = internal global i32 0, align 4
@fcost = internal global i32 0, align 4
@.str.1.856 = private unnamed_addr constant [47 x i8] c"############ Percent Wire Cost Reduction: %d\0A\0A\00", align 1
@.str.2.857 = private unnamed_addr constant [50 x i8] c"\0AInitial Wire Length: %d   Final Wire Length: %d\0A\00", align 1
@iwire = internal global i32 0, align 4
@fwire = internal global i32 0, align 4
@.str.3.858 = private unnamed_addr constant [48 x i8] c"*********** Percent Wire Length Reduction: %d\0A\0A\00", align 1
@.str.4.859 = private unnamed_addr constant [50 x i8] c"\0AInitial Horiz. Wire: %d   Final Horiz. Wire: %d\0A\00", align 1
@iwirex = internal global i32 0, align 4
@fwirex = internal global i32 0, align 4
@.str.5.860 = private unnamed_addr constant [48 x i8] c"$$$$$$$$$ Percent H-Wire Length Reduction: %d\0A\0A\00", align 1
@.str.6.861 = private unnamed_addr constant [48 x i8] c"\0AInitial Vert. Wire: %d   Final Vert. Wire: %d\0A\00", align 1
@iwirey = internal global i32 0, align 4
@fwirey = internal global i32 0, align 4
@.str.7.862 = private unnamed_addr constant [48 x i8] c"@@@@@@@@@ Percent V-Wire Length Reduction: %d\0A\0A\00", align 1
@.str.8.863 = private unnamed_addr constant [14 x i8] c"\0AStatistics:\0A\00", align 1
@.str.9.864 = private unnamed_addr constant [21 x i8] c"Number of Cells: %d\0A\00", align 1
@.str.10.865 = private unnamed_addr constant [20 x i8] c"Number of Pads: %d\0A\00", align 1
@numpads = internal global i32 0, align 4
@.str.11.866 = private unnamed_addr constant [21 x i8] c"Number of Nets: %d \0A\00", align 1
@.str.12.867 = private unnamed_addr constant [21 x i8] c"Number of Pins: %d \0A\00", align 1
@maxterm = internal global i32 0, align 4
@overlapx = internal global ptr null, align 8
@flips = internal global i32 0, align 4
@flipp = internal global i32 0, align 4
@attp = internal global i32 0, align 4
@rangeLimit = internal global i32 0, align 4
@.str.878 = private unnamed_addr constant [39 x i8] c"range limiter:%d units either way in x\00", align 1
@.str.1.879 = private unnamed_addr constant [29 x i8] c"   compared to bdxlength:%d\0A\00", align 1
@bdxlength = internal global i32 0, align 4
@.str.2.880 = private unnamed_addr constant [39 x i8] c"range limiter:%d units either way in y\00", align 1
@.str.3.881 = private unnamed_addr constant [29 x i8] c"   compared to bdylength:%d\0A\00", align 1
@bdylength = internal global i32 0, align 4
@choose = internal global i32 0, align 4
@bigcell = internal global i32 0, align 4
@toobig = internal global i32 0, align 4
@gridGiven = internal global i32 0, align 4
@newxx = internal global i32 0, align 4
@newyy = internal global i32 0, align 4
@.str.4.888 = private unnamed_addr constant [23 x i8] c"acceptance breakdown:\0A\00", align 1
@.str.5.889 = private unnamed_addr constant [36 x i8] c"              single cell: %d / %d\0A\00", align 1
@.str.6.890 = private unnamed_addr constant [36 x i8] c"     single w/ orient chg: %d / %d\0A\00", align 1
@.str.7.891 = private unnamed_addr constant [36 x i8] c"               orient chg: %d / %d\0A\00", align 1
@.str.8.892 = private unnamed_addr constant [36 x i8] c"                pin moves: %d / %d\0A\00", align 1
@.str.9.893 = private unnamed_addr constant [36 x i8] c"        aspect ratio chgs: %d / %d\0A\00", align 1
@.str.10.894 = private unnamed_addr constant [36 x i8] c"        cell interchanges: %d / %d\0A\00", align 1
@.str.11.895 = private unnamed_addr constant [36 x i8] c"      interchgs w/ orient: %d / %d\0A\00", align 1
@.str.12.896 = private unnamed_addr constant [28 x i8] c"\09no. of accepted flips: %d\0A\00", align 1
@gOffsetX = internal global i32 0, align 4
@gridX = internal global i32 0, align 4
@gOffsetY = internal global i32 0, align 4
@gridY = internal global i32 0, align 4
@spotXhash = internal global i32 0, align 4
@spotSize = internal global i32 0, align 4
@spotYhash = internal global i32 0, align 4
@spots = internal global ptr null, align 8
@.str.899 = private unnamed_addr constant [41 x i8] c"Serious error: could not advance upward \00", align 1
@.str.1.900 = private unnamed_addr constant [19 x i8] c"from first vertex\0A\00", align 1
@PtsArray = internal global ptr null, align 8
@rectang = internal global ptr null, align 8
@PtsOut = internal global ptr null, align 8
@.str.3.902 = private unnamed_addr constant [39 x i8] c"Two points in outline not rectilinear \00", align 1
@.str.4.903 = private unnamed_addr constant [28 x i8] c"and this constitutes death\0A\00", align 1
@.str.6.904 = private unnamed_addr constant [12 x i8] c"x:%d  y:%d\0A\00", align 1
@.str.9.905 = private unnamed_addr constant [24 x i8] c"l:%d  r:%d  b:%d  t:%d\0A\00", align 1
@str.901 = private unnamed_addr constant [24 x i8] c"Fatal error in unbust.c\00", align 1
@str.10 = private unnamed_addr constant [8 x i8] c"PtsOut:\00", align 1
@str.11 = private unnamed_addr constant [10 x i8] c"PtsArray:\00", align 1
@str.12 = private unnamed_addr constant [12 x i8] c"Rectangles:\00", align 1
@bbbl = internal global i32 0, align 4
@bbleft = internal global i32 0, align 4
@bbbr = internal global i32 0, align 4
@bbright = internal global i32 0, align 4
@bbbb = internal global i32 0, align 4
@bbbottom = internal global i32 0, align 4
@bbbt = internal global i32 0, align 4
@bbtop = internal global i32 0, align 4
@overlap = internal global ptr null, align 8
@occa1ptr = internal global ptr null, align 8
@occb1ptr = internal global ptr null, align 8
@occa2ptr = internal global ptr null, align 8
@occb2ptr = internal global ptr null, align 8
@randVar = internal global i32 0, align 4
@termarray = internal global ptr null, align 8
@Tsave = internal global double 0.000000e+00, align 8
@count = internal global i32 0, align 4
@finalShot = internal global i32 0, align 4
@T = internal global double 0.000000e+00, align 8
@.str.932 = private unnamed_addr constant [45 x i8] c"THE ROUTE COST OF THE CURRENT PLACEMENT: %d\0A\00", align 1
@funccost = internal global i32 0, align 4
@.str.1.933 = private unnamed_addr constant [30 x i8] c"THE CURRENT PENALTY IS: %d   \00", align 1
@penalty = internal global i32 0, align 4
@.str.2.934 = private unnamed_addr constant [31 x i8] c"THE CURRENT TOTAL COST IS: %d\0A\00", align 1
@overfill = internal global i32 0, align 4
@.str.3.935 = private unnamed_addr constant [29 x i8] c"THE CURRENT OVERFILL IS: %d\0A\00", align 1
@.str.4.936 = private unnamed_addr constant [41 x i8] c"TEMPERATURE = kT where k=1.0 and T=%g   \00", align 1
@.str.5.937 = private unnamed_addr constant [12 x i8] c"OFFSET: %d\0A\00", align 1
@.str.6.938 = private unnamed_addr constant [24 x i8] c"ITERATION NUMBER:%8d\0A\0A\0A\00", align 1
@.str.8.939 = private unnamed_addr constant [5 x i8] c"%3d \00", align 1
@stdout = external local_unnamed_addr global ptr, align 8
@doCompaction = internal global i32 0, align 4
@.str.9.940 = private unnamed_addr constant [41 x i8] c"FINAL ROUTING COST OF THE PLACEMENT: %d\0A\00", align 1
@.str.10.941 = private unnamed_addr constant [33 x i8] c"FINAL VALUE OF PENALTY IS: %d   \00", align 1
@.str.11.942 = private unnamed_addr constant [34 x i8] c"FINAL VALUE OF TOTAL COST IS: %d\0A\00", align 1
@.str.12.943 = private unnamed_addr constant [27 x i8] c"THE FINAL OVERFILL IS: %d\0A\00", align 1
@.str.13.944 = private unnamed_addr constant [41 x i8] c"MAX NUMBER OF ATTEMPTED FLIPS PER T:%8d\0A\00", align 1
@attmax = internal global i32 0, align 4
@Hptrs = internal global ptr null, align 8
@Hroot = internal global ptr null, align 8
@numProbes = internal global i32 0, align 4
@edgeCount = internal global i32 0, align 4
@vEdgeRoot = internal global ptr null, align 8
@fpdebug = internal global ptr null, align 8
@.str.947 = private unnamed_addr constant [12 x i8] c"vprobe:%d  \00", align 1
@.str.1.948 = private unnamed_addr constant [35 x i8] c"start:%d  end:%d  loc:%d  UorR:%d\0A\00", align 1
@hFixedEnd = internal global ptr null, align 8
@.str.2.949 = private unnamed_addr constant [46 x i8] c"vprobe:%d  start:%d  end:%d  loc:%d  UorR:%d\0A\00", align 1
@pSideArray = internal global ptr null, align 8
@numnets = internal global i32 0, align 4
@netarray = internal global ptr null, align 8
@blockmx = internal global i32 0, align 4
@blockl = internal global i32 0, align 4
@blockr = internal global i32 0, align 4
@blockmy = internal global i32 0, align 4
@blockt = internal global i32 0, align 4
@blockb = internal global i32 0, align 4
@slopeX = internal global double 0.000000e+00, align 8
@basefactor = internal global double 0.000000e+00, align 8
@slopeY = internal global double 0.000000e+00, align 8
@aveChanWid = internal global i32 0, align 4
@N = internal global double 0.000000e+00, align 8
@CC = internal global double 0.000000e+00, align 8
@bb = internal global double 0.000000e+00, align 8
@a = internal global double 0.000000e+00, align 8
@.str.958 = private unnamed_addr constant [78 x i8] c"\0A\0A_________________________________________________________________________\0A\0A\00", align 1
@.str.1.959 = private unnamed_addr constant [48 x i8] c"DISTINCT NETS PER CELL ---------------- : %.2f\0A\00", align 1
@.str.2.960 = private unnamed_addr constant [48 x i8] c"NETS PER DISTINCT NET  ---------------- : %.2f\0A\00", align 1
@.str.3.961 = private unnamed_addr constant [48 x i8] c"CELLS PER DISTINCT NET ---------------- : %.2f\0A\00", align 1
@.str.4.962 = private unnamed_addr constant [48 x i8] c"AVE. # CELLS CONNECTED TO A CELL ------ : %.2f\0A\00", align 1
@.str.5.963 = private unnamed_addr constant [75 x i8] c"_________________________________________________________________________\0A\00", align 1
@rootN = internal global double 0.000000e+00, align 8
@c = internal global double 0.000000e+00, align 8
@fpo = internal global ptr null, align 8
@.str.968 = private unnamed_addr constant [37 x i8] c"Overlap condition: cell1:%d cell2:%d\00", align 1
@.str.1.969 = private unnamed_addr constant [25 x i8] c"   value:%d   amount:%d\0A\00", align 1
@cellarray = internal global ptr null, align 8
@binOffsetX = internal global i32 0, align 4
@binWidthX = internal global i32 0, align 4
@numBinsX = internal global i32 0, align 4
@binOffsetY = internal global i32 0, align 4
@binWidthY = internal global i32 0, align 4
@numBinsY = internal global i32 0, align 4
@binX = internal global i32 0, align 4
@binY = internal global i32 0, align 4
@blockarray = internal global ptr null, align 8
@numcells = internal global i32 0, align 4
@lapFactor = internal global double 0.000000e+00, align 8
@offset = internal global i32 0, align 4
@xNodules = internal global ptr null, align 8
@Vlist = internal global ptr null, align 8
@vChanBeginRoot = internal global ptr null, align 8
@Vend = internal global ptr null, align 8
@vChanEndRoot = internal global ptr null, align 8
@vFixedList = internal global ptr null, align 8
@numXnodes = internal global i32 0, align 4
@xNodeArray = internal global ptr null, align 8
@numberCells = internal global i32 0, align 4
@yNodules = internal global ptr null, align 8
@Hlist = internal global ptr null, align 8
@edgeList = internal global ptr null, align 8
@hChanBeginRoot = internal global ptr null, align 8
@eArray = internal global ptr null, align 8
@Hend = internal global ptr null, align 8
@hChanEndRoot = internal global ptr null, align 8
@hFixedList = internal global ptr null, align 8
@numYnodes = internal global i32 0, align 4
@yNodeArray = internal global ptr null, align 8

; Function Attrs: nounwind optsize uwtable
define internal void @tpop(ptr nocapture noundef %0, ptr nocapture noundef writeonly %1, ptr nocapture noundef %2, ptr nocapture noundef writeonly %3) #0 {
  %5 = load ptr, ptr %0, align 8, !tbaa !7
  %6 = icmp eq ptr %5, null
  br i1 %6, label %7, label %8

7:                                                ; preds = %4
  store ptr null, ptr %1, align 8, !tbaa !7
  br label %19

8:                                                ; preds = %8, %4
  %9 = phi ptr [ %11, %8 ], [ %5, %4 ]
  %10 = getelementptr inbounds %struct.tnode, ptr %9, i64 0, i32 2
  %11 = load ptr, ptr %10, align 8, !tbaa !11
  %12 = icmp eq ptr %11, null
  br i1 %12, label %13, label %8, !llvm.loop !14

13:                                               ; preds = %8
  %.lcssa = phi ptr [ %9, %8 ]
  store ptr %.lcssa, ptr %1, align 8, !tbaa !7
  %14 = load i32, ptr %.lcssa, align 8, !tbaa !16
  store i32 %14, ptr %2, align 4, !tbaa !17
  %15 = getelementptr inbounds %struct.tnode, ptr %.lcssa, i64 0, i32 9
  %16 = load ptr, ptr %15, align 8, !tbaa !18
  %17 = load i32, ptr %16, align 8, !tbaa !19
  store i32 %17, ptr %3, align 4, !tbaa !17
  %18 = load i32, ptr %2, align 4, !tbaa !17
  tail call void @tdelete(ptr noundef nonnull %0, i32 noundef %18, i32 noundef %17) #43
  br label %19

19:                                               ; preds = %13, %7
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @tdelete(ptr nocapture noundef %0, i32 noundef %1, i32 noundef %2) #0 {
  %4 = load ptr, ptr %0, align 8, !tbaa !7
  %5 = icmp eq ptr %4, null
  br i1 %5, label %351, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.tnode, ptr %4, i64 0, i32 1
  %8 = load i32, ptr %7, align 4, !tbaa !21
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %36

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.tnode, ptr %4, i64 0, i32 9
  %12 = load ptr, ptr %11, align 8, !tbaa !7
  %13 = icmp eq ptr %12, null
  br i1 %13, label %351, label %14

14:                                               ; preds = %10
  %15 = load i32, ptr %12, align 8, !tbaa !19
  %16 = icmp eq i32 %15, %2
  br i1 %16, label %29, label %20

17:                                               ; preds = %20
  %18 = load i32, ptr %23, align 8, !tbaa !19
  %19 = icmp eq i32 %18, %2
  br i1 %19, label %25, label %20, !llvm.loop !22

20:                                               ; preds = %17, %14
  %21 = phi ptr [ %23, %17 ], [ %12, %14 ]
  %22 = getelementptr inbounds %struct.plist, ptr %21, i64 0, i32 1
  %23 = load ptr, ptr %22, align 8, !tbaa !7
  %24 = icmp eq ptr %23, null
  br i1 %24, label %351, label %17, !llvm.loop !22

25:                                               ; preds = %17
  %.lcssa1 = phi ptr [ %21, %17 ]
  %.lcssa = phi ptr [ %23, %17 ]
  %26 = getelementptr inbounds %struct.plist, ptr %.lcssa, i64 0, i32 1
  %27 = load ptr, ptr %26, align 8, !tbaa !23
  %28 = getelementptr inbounds %struct.plist, ptr %.lcssa1, i64 0, i32 1
  store ptr %27, ptr %28, align 8, !tbaa !23
  tail call void @free(ptr noundef nonnull %.lcssa) #44
  br label %351

29:                                               ; preds = %14
  %30 = getelementptr inbounds %struct.plist, ptr %12, i64 0, i32 1
  %31 = load ptr, ptr %30, align 8, !tbaa !23
  %32 = icmp eq ptr %31, null
  br i1 %32, label %34, label %33

33:                                               ; preds = %29
  store ptr %31, ptr %11, align 8, !tbaa !18
  tail call void @free(ptr noundef nonnull %12) #44
  br label %351

34:                                               ; preds = %29
  tail call void @free(ptr noundef nonnull %12) #44
  %35 = load ptr, ptr %0, align 8, !tbaa !7
  tail call void @free(ptr noundef %35) #44
  store ptr null, ptr %0, align 8, !tbaa !7
  br label %351

36:                                               ; preds = %47, %6
  %37 = phi ptr [ %49, %47 ], [ %4, %6 ]
  %38 = getelementptr inbounds %struct.tnode, ptr %37, i64 0, i32 1
  %39 = load i32, ptr %38, align 4, !tbaa !21
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %59, label %41

41:                                               ; preds = %36
  %42 = getelementptr inbounds %struct.tnode, ptr %37, i64 0, i32 7
  %43 = load i32, ptr %42, align 8, !tbaa !24
  %44 = icmp slt i32 %43, %1
  br i1 %44, label %51, label %45

45:                                               ; preds = %41
  %46 = getelementptr inbounds %struct.tnode, ptr %37, i64 0, i32 2
  br label %47

47:                                               ; preds = %57, %55, %45
  %48 = phi ptr [ %46, %45 ], [ %56, %55 ], [ %58, %57 ]
  %49 = load ptr, ptr %48, align 8, !tbaa !7
  %50 = icmp eq ptr %49, null
  br i1 %50, label %351, label %36

51:                                               ; preds = %41
  %52 = getelementptr inbounds %struct.tnode, ptr %37, i64 0, i32 8
  %53 = load i32, ptr %52, align 4, !tbaa !25
  %54 = icmp slt i32 %53, %1
  br i1 %54, label %57, label %55

55:                                               ; preds = %51
  %56 = getelementptr inbounds %struct.tnode, ptr %37, i64 0, i32 3
  br label %47

57:                                               ; preds = %51
  %58 = getelementptr inbounds %struct.tnode, ptr %37, i64 0, i32 4
  br label %47

59:                                               ; preds = %36
  %.lcssa4 = phi ptr [ %37, %36 ]
  %60 = getelementptr inbounds %struct.tnode, ptr %.lcssa4, i64 0, i32 9
  %61 = load ptr, ptr %60, align 8, !tbaa !7
  %62 = icmp eq ptr %61, null
  br i1 %62, label %351, label %63

63:                                               ; preds = %59
  %64 = load i32, ptr %61, align 8, !tbaa !19
  %65 = icmp eq i32 %64, %2
  br i1 %65, label %78, label %69

66:                                               ; preds = %69
  %67 = load i32, ptr %72, align 8, !tbaa !19
  %68 = icmp eq i32 %67, %2
  br i1 %68, label %74, label %69, !llvm.loop !22

69:                                               ; preds = %66, %63
  %70 = phi ptr [ %72, %66 ], [ %61, %63 ]
  %71 = getelementptr inbounds %struct.plist, ptr %70, i64 0, i32 1
  %72 = load ptr, ptr %71, align 8, !tbaa !7
  %73 = icmp eq ptr %72, null
  br i1 %73, label %351, label %66, !llvm.loop !22

74:                                               ; preds = %66
  %.lcssa3 = phi ptr [ %70, %66 ]
  %.lcssa2 = phi ptr [ %72, %66 ]
  %75 = getelementptr inbounds %struct.plist, ptr %.lcssa2, i64 0, i32 1
  %76 = load ptr, ptr %75, align 8, !tbaa !23
  %77 = getelementptr inbounds %struct.plist, ptr %.lcssa3, i64 0, i32 1
  store ptr %76, ptr %77, align 8, !tbaa !23
  tail call void @free(ptr noundef nonnull %.lcssa2) #44
  br label %351

78:                                               ; preds = %63
  %79 = getelementptr inbounds %struct.plist, ptr %61, i64 0, i32 1
  %80 = load ptr, ptr %79, align 8, !tbaa !23
  %81 = icmp eq ptr %80, null
  br i1 %81, label %83, label %82

82:                                               ; preds = %78
  store ptr %80, ptr %60, align 8, !tbaa !18
  tail call void @free(ptr noundef nonnull %61) #44
  br label %351

83:                                               ; preds = %78
  tail call void @free(ptr noundef nonnull %61) #44
  %84 = getelementptr inbounds %struct.tnode, ptr %.lcssa4, i64 0, i32 6
  %85 = load ptr, ptr %84, align 8, !tbaa !26
  %86 = getelementptr inbounds %struct.tnode, ptr %85, i64 0, i32 1
  %87 = load i32, ptr %86, align 4, !tbaa !21
  %88 = icmp eq i32 %87, 3
  br i1 %88, label %89, label %110

89:                                               ; preds = %83
  %90 = getelementptr inbounds %struct.tnode, ptr %85, i64 0, i32 2
  %91 = load ptr, ptr %90, align 8, !tbaa !11
  %92 = icmp eq ptr %91, %.lcssa4
  %93 = getelementptr inbounds %struct.tnode, ptr %85, i64 0, i32 3
  %94 = load ptr, ptr %93, align 8, !tbaa !27
  %95 = getelementptr inbounds %struct.tnode, ptr %85, i64 0, i32 4
  br i1 %92, label %96, label %102

96:                                               ; preds = %89
  store ptr %94, ptr %90, align 8, !tbaa !11
  %97 = load ptr, ptr %95, align 8, !tbaa !28
  store ptr %97, ptr %93, align 8, !tbaa !27
  store ptr null, ptr %95, align 8, !tbaa !28
  %98 = load i32, ptr %94, align 8, !tbaa !16
  %99 = getelementptr inbounds %struct.tnode, ptr %85, i64 0, i32 7
  store i32 %98, ptr %99, align 8, !tbaa !24
  %100 = load i32, ptr %97, align 8, !tbaa !16
  %101 = getelementptr inbounds %struct.tnode, ptr %85, i64 0, i32 8
  store i32 %100, ptr %101, align 4, !tbaa !25
  br label %109

102:                                              ; preds = %89
  %103 = icmp eq ptr %94, %.lcssa4
  br i1 %103, label %104, label %108

104:                                              ; preds = %102
  %105 = load ptr, ptr %95, align 8, !tbaa !28
  store ptr %105, ptr %93, align 8, !tbaa !27
  store ptr null, ptr %95, align 8, !tbaa !28
  %106 = load i32, ptr %105, align 8, !tbaa !16
  %107 = getelementptr inbounds %struct.tnode, ptr %85, i64 0, i32 8
  store i32 %106, ptr %107, align 4, !tbaa !25
  br label %109

108:                                              ; preds = %102
  store ptr null, ptr %95, align 8, !tbaa !28
  tail call void @tpatch(ptr noundef nonnull %85, i32 noundef %1) #43
  br label %109

109:                                              ; preds = %108, %104, %96
  tail call void @free(ptr noundef nonnull %.lcssa4) #44
  store i32 2, ptr %86, align 4, !tbaa !21
  br label %351

110:                                              ; preds = %83
  %111 = load ptr, ptr %0, align 8, !tbaa !7
  %112 = icmp eq ptr %85, %111
  %113 = getelementptr inbounds %struct.tnode, ptr %85, i64 0, i32 2
  %114 = load ptr, ptr %113, align 8, !tbaa !11
  %115 = icmp eq ptr %114, %.lcssa4
  br i1 %112, label %116, label %138

116:                                              ; preds = %110
  br i1 %115, label %117, label %120

117:                                              ; preds = %116
  %118 = getelementptr inbounds %struct.tnode, ptr %85, i64 0, i32 3
  %119 = load ptr, ptr %118, align 8, !tbaa !27
  br label %120

120:                                              ; preds = %117, %116
  %121 = phi ptr [ %119, %117 ], [ %114, %116 ]
  %122 = getelementptr inbounds %struct.tnode, ptr %121, i64 0, i32 9
  %123 = load ptr, ptr %122, align 8, !tbaa !18
  %124 = load i32, ptr %121, align 8, !tbaa !16
  store i32 %124, ptr %85, align 8
  %125 = getelementptr inbounds %struct.tnode, ptr %85, i64 0, i32 9
  store ptr %123, ptr %125, align 8
  %126 = load ptr, ptr %0, align 8, !tbaa !7
  %127 = getelementptr inbounds %struct.tnode, ptr %126, i64 0, i32 2
  %128 = load ptr, ptr %127, align 8, !tbaa !11
  tail call void @free(ptr noundef %128) #44
  %129 = load ptr, ptr %0, align 8, !tbaa !7
  %130 = getelementptr inbounds %struct.tnode, ptr %129, i64 0, i32 3
  %131 = load ptr, ptr %130, align 8, !tbaa !27
  tail call void @free(ptr noundef %131) #44
  %132 = load ptr, ptr %0, align 8, !tbaa !7
  %133 = getelementptr inbounds %struct.tnode, ptr %132, i64 0, i32 2
  store ptr null, ptr %133, align 8, !tbaa !11
  %134 = load ptr, ptr %0, align 8, !tbaa !7
  %135 = getelementptr inbounds %struct.tnode, ptr %134, i64 0, i32 3
  store ptr null, ptr %135, align 8, !tbaa !27
  %136 = load ptr, ptr %0, align 8, !tbaa !7
  %137 = getelementptr inbounds %struct.tnode, ptr %136, i64 0, i32 1
  store i32 0, ptr %137, align 4, !tbaa !21
  br label %351

138:                                              ; preds = %110
  br i1 %115, label %139, label %142

139:                                              ; preds = %138
  %140 = getelementptr inbounds %struct.tnode, ptr %85, i64 0, i32 3
  %141 = load ptr, ptr %140, align 8, !tbaa !27
  br label %142

142:                                              ; preds = %139, %138
  %143 = phi ptr [ %141, %139 ], [ %114, %138 ]
  %144 = getelementptr inbounds %struct.tnode, ptr %85, i64 0, i32 6
  %145 = load ptr, ptr %144, align 8, !tbaa !26
  %146 = getelementptr inbounds %struct.tnode, ptr %145, i64 0, i32 2
  %147 = load ptr, ptr %146, align 8, !tbaa !11
  %148 = icmp eq ptr %147, %85
  %149 = getelementptr inbounds %struct.tnode, ptr %145, i64 0, i32 3
  %150 = load ptr, ptr %149, align 8, !tbaa !27
  br i1 %148, label %151, label %245

151:                                              ; preds = %142
  %152 = getelementptr inbounds %struct.tnode, ptr %145, i64 0, i32 1
  %153 = load i32, ptr %152, align 4, !tbaa !21
  %154 = icmp eq i32 %153, 2
  %155 = getelementptr inbounds %struct.tnode, ptr %150, i64 0, i32 1
  %156 = load i32, ptr %155, align 4, !tbaa !21
  %157 = icmp eq i32 %156, 2
  br i1 %154, label %158, label %191

158:                                              ; preds = %151
  br i1 %157, label %159, label %169

159:                                              ; preds = %158
  store i32 3, ptr %155, align 4, !tbaa !21
  %160 = getelementptr inbounds %struct.tnode, ptr %150, i64 0, i32 3
  %161 = getelementptr inbounds %struct.tnode, ptr %150, i64 0, i32 2
  %162 = load <2 x ptr>, ptr %161, align 8, !tbaa !7
  store <2 x ptr> %162, ptr %160, align 8, !tbaa !7
  store ptr %143, ptr %161, align 8, !tbaa !11
  %163 = getelementptr inbounds %struct.tnode, ptr %143, i64 0, i32 6
  store ptr %150, ptr %163, align 8, !tbaa !26
  tail call void @free(ptr noundef nonnull %.lcssa4) #44
  %164 = load i32, ptr %143, align 8, !tbaa !16
  %165 = getelementptr inbounds %struct.tnode, ptr %150, i64 0, i32 7
  store i32 %164, ptr %165, align 8, !tbaa !24
  %166 = load ptr, ptr %160, align 8, !tbaa !27
  %167 = load i32, ptr %166, align 8, !tbaa !16
  %168 = getelementptr inbounds %struct.tnode, ptr %150, i64 0, i32 8
  store i32 %167, ptr %168, align 4, !tbaa !25
  tail call void @tsubson(ptr noundef nonnull %0, ptr noundef nonnull %85) #43
  br label %351

169:                                              ; preds = %158
  store i32 2, ptr %155, align 4, !tbaa !21
  store ptr %143, ptr %113, align 8, !tbaa !11
  %170 = getelementptr inbounds %struct.tnode, ptr %150, i64 0, i32 2
  %171 = load ptr, ptr %170, align 8, !tbaa !11
  %172 = getelementptr inbounds %struct.tnode, ptr %85, i64 0, i32 3
  store ptr %171, ptr %172, align 8, !tbaa !27
  %173 = getelementptr inbounds %struct.tnode, ptr %150, i64 0, i32 3
  %174 = load ptr, ptr %173, align 8, !tbaa !27
  store ptr %174, ptr %170, align 8, !tbaa !11
  %175 = getelementptr inbounds %struct.tnode, ptr %150, i64 0, i32 4
  %176 = load ptr, ptr %175, align 8, !tbaa !28
  store ptr %176, ptr %173, align 8, !tbaa !27
  %177 = load ptr, ptr %172, align 8, !tbaa !27
  %178 = getelementptr inbounds %struct.tnode, ptr %177, i64 0, i32 6
  store ptr %85, ptr %178, align 8, !tbaa !26
  store ptr null, ptr %175, align 8, !tbaa !28
  %179 = load i32, ptr %143, align 8, !tbaa !16
  %180 = getelementptr inbounds %struct.tnode, ptr %85, i64 0, i32 7
  store i32 %179, ptr %180, align 8, !tbaa !24
  %181 = load i32, ptr %177, align 8, !tbaa !16
  %182 = getelementptr inbounds %struct.tnode, ptr %85, i64 0, i32 8
  store i32 %181, ptr %182, align 4, !tbaa !25
  %183 = load i32, ptr %174, align 8, !tbaa !16
  %184 = getelementptr inbounds %struct.tnode, ptr %150, i64 0, i32 7
  store i32 %183, ptr %184, align 8, !tbaa !24
  %185 = load i32, ptr %176, align 8, !tbaa !16
  %186 = getelementptr inbounds %struct.tnode, ptr %150, i64 0, i32 8
  store i32 %185, ptr %186, align 4, !tbaa !25
  %187 = load i32, ptr %182, align 4, !tbaa !25
  %188 = getelementptr inbounds %struct.tnode, ptr %150, i64 0, i32 6
  %189 = load ptr, ptr %188, align 8, !tbaa !26
  %190 = getelementptr inbounds %struct.tnode, ptr %189, i64 0, i32 7
  store i32 %187, ptr %190, align 8, !tbaa !24
  tail call void @free(ptr noundef nonnull %.lcssa4) #44
  br label %351

191:                                              ; preds = %151
  br i1 %157, label %192, label %223

192:                                              ; preds = %191
  store i32 3, ptr %155, align 4, !tbaa !21
  %193 = getelementptr inbounds %struct.tnode, ptr %150, i64 0, i32 3
  %194 = getelementptr inbounds %struct.tnode, ptr %150, i64 0, i32 2
  %195 = load <2 x ptr>, ptr %194, align 8, !tbaa !7
  store <2 x ptr> %195, ptr %193, align 8, !tbaa !7
  store ptr %143, ptr %194, align 8, !tbaa !11
  %196 = getelementptr inbounds %struct.tnode, ptr %143, i64 0, i32 6
  store ptr %150, ptr %196, align 8, !tbaa !26
  tail call void @free(ptr noundef nonnull %.lcssa4) #44
  %197 = load i32, ptr %143, align 8, !tbaa !16
  %198 = getelementptr inbounds %struct.tnode, ptr %150, i64 0, i32 7
  store i32 %197, ptr %198, align 8, !tbaa !24
  %199 = load ptr, ptr %193, align 8, !tbaa !27
  %200 = load i32, ptr %199, align 8, !tbaa !16
  %201 = getelementptr inbounds %struct.tnode, ptr %150, i64 0, i32 8
  store i32 %200, ptr %201, align 4, !tbaa !25
  %202 = load ptr, ptr %144, align 8, !tbaa !26
  %203 = getelementptr inbounds %struct.tnode, ptr %202, i64 0, i32 3
  %204 = load ptr, ptr %203, align 8, !tbaa !27
  %205 = getelementptr inbounds %struct.tnode, ptr %202, i64 0, i32 2
  store ptr %204, ptr %205, align 8, !tbaa !11
  %206 = getelementptr inbounds %struct.tnode, ptr %202, i64 0, i32 4
  %207 = load ptr, ptr %206, align 8, !tbaa !28
  store ptr %207, ptr %203, align 8, !tbaa !27
  store ptr null, ptr %206, align 8, !tbaa !28
  %208 = getelementptr inbounds %struct.tnode, ptr %202, i64 0, i32 1
  store i32 2, ptr %208, align 4, !tbaa !21
  %209 = getelementptr inbounds %struct.tnode, ptr %202, i64 0, i32 8
  %210 = load i32, ptr %209, align 4, !tbaa !25
  %211 = getelementptr inbounds %struct.tnode, ptr %202, i64 0, i32 7
  store i32 %210, ptr %211, align 8, !tbaa !24
  %212 = getelementptr inbounds %struct.tnode, ptr %207, i64 0, i32 1
  %213 = load i32, ptr %212, align 4, !tbaa !21
  %214 = icmp eq i32 %213, 2
  br i1 %214, label %215, label %217

215:                                              ; preds = %192
  %216 = getelementptr inbounds %struct.tnode, ptr %207, i64 0, i32 8
  br label %220

217:                                              ; preds = %192
  %218 = getelementptr inbounds %struct.tnode, ptr %207, i64 0, i32 4
  %219 = load ptr, ptr %218, align 8, !tbaa !28
  br label %220

220:                                              ; preds = %217, %215
  %221 = phi ptr [ %219, %217 ], [ %216, %215 ]
  %222 = load i32, ptr %221, align 4, !tbaa !17
  store i32 %222, ptr %209, align 4, !tbaa !25
  tail call void @free(ptr noundef nonnull %85) #44
  br label %351

223:                                              ; preds = %191
  store i32 2, ptr %155, align 4, !tbaa !21
  store ptr %143, ptr %113, align 8, !tbaa !11
  %224 = getelementptr inbounds %struct.tnode, ptr %150, i64 0, i32 2
  %225 = load ptr, ptr %224, align 8, !tbaa !11
  %226 = getelementptr inbounds %struct.tnode, ptr %85, i64 0, i32 3
  store ptr %225, ptr %226, align 8, !tbaa !27
  %227 = getelementptr inbounds %struct.tnode, ptr %150, i64 0, i32 3
  %228 = load ptr, ptr %227, align 8, !tbaa !27
  store ptr %228, ptr %224, align 8, !tbaa !11
  %229 = getelementptr inbounds %struct.tnode, ptr %150, i64 0, i32 4
  %230 = load ptr, ptr %229, align 8, !tbaa !28
  store ptr %230, ptr %227, align 8, !tbaa !27
  %231 = load ptr, ptr %226, align 8, !tbaa !27
  %232 = getelementptr inbounds %struct.tnode, ptr %231, i64 0, i32 6
  store ptr %85, ptr %232, align 8, !tbaa !26
  store ptr null, ptr %229, align 8, !tbaa !28
  %233 = load i32, ptr %143, align 8, !tbaa !16
  %234 = getelementptr inbounds %struct.tnode, ptr %85, i64 0, i32 7
  store i32 %233, ptr %234, align 8, !tbaa !24
  %235 = load i32, ptr %231, align 8, !tbaa !16
  %236 = getelementptr inbounds %struct.tnode, ptr %85, i64 0, i32 8
  store i32 %235, ptr %236, align 4, !tbaa !25
  %237 = load i32, ptr %228, align 8, !tbaa !16
  %238 = getelementptr inbounds %struct.tnode, ptr %150, i64 0, i32 7
  store i32 %237, ptr %238, align 8, !tbaa !24
  %239 = load i32, ptr %230, align 8, !tbaa !16
  %240 = getelementptr inbounds %struct.tnode, ptr %150, i64 0, i32 8
  store i32 %239, ptr %240, align 4, !tbaa !25
  %241 = load i32, ptr %236, align 4, !tbaa !25
  %242 = getelementptr inbounds %struct.tnode, ptr %150, i64 0, i32 6
  %243 = load ptr, ptr %242, align 8, !tbaa !26
  %244 = getelementptr inbounds %struct.tnode, ptr %243, i64 0, i32 7
  store i32 %241, ptr %244, align 8, !tbaa !24
  tail call void @free(ptr noundef nonnull %.lcssa4) #44
  br label %351

245:                                              ; preds = %142
  %246 = icmp eq ptr %150, %85
  br i1 %246, label %247, label %323

247:                                              ; preds = %245
  %248 = getelementptr inbounds %struct.tnode, ptr %145, i64 0, i32 1
  %249 = load i32, ptr %248, align 4, !tbaa !21
  %250 = icmp eq i32 %249, 2
  br i1 %250, label %251, label %275

251:                                              ; preds = %247
  %252 = getelementptr inbounds %struct.tnode, ptr %147, i64 0, i32 1
  %253 = load i32, ptr %252, align 4, !tbaa !21
  %254 = icmp eq i32 %253, 2
  %255 = getelementptr inbounds %struct.tnode, ptr %147, i64 0, i32 4
  br i1 %254, label %256, label %261

256:                                              ; preds = %251
  store i32 3, ptr %252, align 4, !tbaa !21
  store ptr %143, ptr %255, align 8, !tbaa !28
  %257 = getelementptr inbounds %struct.tnode, ptr %143, i64 0, i32 6
  store ptr %147, ptr %257, align 8, !tbaa !26
  tail call void @free(ptr noundef nonnull %.lcssa4) #44
  %258 = load i32, ptr %143, align 8, !tbaa !16
  %259 = load ptr, ptr %144, align 8, !tbaa !26
  %260 = getelementptr inbounds %struct.tnode, ptr %259, i64 0, i32 7
  store i32 %258, ptr %260, align 8, !tbaa !24
  tail call void @tsubson(ptr noundef nonnull %0, ptr noundef nonnull %85) #43
  br label %351

261:                                              ; preds = %251
  store i32 2, ptr %252, align 4, !tbaa !21
  %262 = load ptr, ptr %255, align 8, !tbaa !28
  store ptr %262, ptr %113, align 8, !tbaa !11
  %263 = getelementptr inbounds %struct.tnode, ptr %85, i64 0, i32 3
  store ptr %143, ptr %263, align 8, !tbaa !27
  %264 = getelementptr inbounds %struct.tnode, ptr %262, i64 0, i32 6
  store ptr %85, ptr %264, align 8, !tbaa !26
  store ptr null, ptr %255, align 8, !tbaa !28
  %265 = load i32, ptr %262, align 8, !tbaa !16
  %266 = getelementptr inbounds %struct.tnode, ptr %85, i64 0, i32 7
  store i32 %265, ptr %266, align 8, !tbaa !24
  %267 = load i32, ptr %143, align 8, !tbaa !16
  %268 = getelementptr inbounds %struct.tnode, ptr %85, i64 0, i32 8
  store i32 %267, ptr %268, align 4, !tbaa !25
  %269 = getelementptr inbounds %struct.tnode, ptr %147, i64 0, i32 8
  %270 = load i32, ptr %269, align 4, !tbaa !25
  %271 = load ptr, ptr %144, align 8, !tbaa !26
  %272 = getelementptr inbounds %struct.tnode, ptr %271, i64 0, i32 7
  store i32 %270, ptr %272, align 8, !tbaa !24
  %273 = getelementptr inbounds %struct.tnode, ptr %271, i64 0, i32 8
  store i32 %267, ptr %273, align 4, !tbaa !25
  %274 = load i32, ptr %268, align 4, !tbaa !25
  tail call void @tpatch(ptr noundef %271, i32 noundef %274) #43
  tail call void @free(ptr noundef nonnull %.lcssa4) #44
  br label %351

275:                                              ; preds = %247
  %276 = getelementptr inbounds %struct.tnode, ptr %145, i64 0, i32 4
  %277 = load ptr, ptr %276, align 8, !tbaa !28
  %278 = getelementptr inbounds %struct.tnode, ptr %277, i64 0, i32 1
  %279 = load i32, ptr %278, align 4, !tbaa !21
  %280 = icmp eq i32 %279, 2
  br i1 %280, label %281, label %302

281:                                              ; preds = %275
  store i32 3, ptr %278, align 4, !tbaa !21
  %282 = getelementptr inbounds %struct.tnode, ptr %277, i64 0, i32 3
  %283 = getelementptr inbounds %struct.tnode, ptr %277, i64 0, i32 4
  %284 = getelementptr inbounds %struct.tnode, ptr %277, i64 0, i32 2
  %285 = load <2 x ptr>, ptr %284, align 8, !tbaa !7
  store <2 x ptr> %285, ptr %282, align 8, !tbaa !7
  store ptr %143, ptr %284, align 8, !tbaa !11
  %286 = getelementptr inbounds %struct.tnode, ptr %143, i64 0, i32 6
  store ptr %277, ptr %286, align 8, !tbaa !26
  tail call void @free(ptr noundef nonnull %.lcssa4) #44
  %287 = load i32, ptr %143, align 8, !tbaa !16
  %288 = getelementptr inbounds %struct.tnode, ptr %277, i64 0, i32 7
  store i32 %287, ptr %288, align 8, !tbaa !24
  %289 = load ptr, ptr %282, align 8, !tbaa !27
  %290 = load i32, ptr %289, align 8, !tbaa !16
  %291 = getelementptr inbounds %struct.tnode, ptr %277, i64 0, i32 8
  store i32 %290, ptr %291, align 4, !tbaa !25
  %292 = load ptr, ptr %283, align 8, !tbaa !28
  %293 = load i32, ptr %292, align 8, !tbaa !16
  %294 = getelementptr inbounds %struct.tnode, ptr %277, i64 0, i32 6
  %295 = load ptr, ptr %294, align 8, !tbaa !26
  %296 = getelementptr inbounds %struct.tnode, ptr %295, i64 0, i32 8
  store i32 %293, ptr %296, align 4, !tbaa !25
  tail call void @free(ptr noundef nonnull %85) #44
  %297 = load ptr, ptr %294, align 8, !tbaa !26
  %298 = getelementptr inbounds %struct.tnode, ptr %297, i64 0, i32 4
  %299 = load ptr, ptr %298, align 8, !tbaa !28
  %300 = getelementptr inbounds %struct.tnode, ptr %297, i64 0, i32 3
  store ptr %299, ptr %300, align 8, !tbaa !27
  store ptr null, ptr %298, align 8, !tbaa !28
  %301 = getelementptr inbounds %struct.tnode, ptr %297, i64 0, i32 1
  store i32 2, ptr %301, align 4, !tbaa !21
  br label %351

302:                                              ; preds = %275
  store i32 2, ptr %278, align 4, !tbaa !21
  store ptr %143, ptr %113, align 8, !tbaa !11
  %303 = getelementptr inbounds %struct.tnode, ptr %277, i64 0, i32 2
  %304 = load ptr, ptr %303, align 8, !tbaa !11
  %305 = getelementptr inbounds %struct.tnode, ptr %85, i64 0, i32 3
  store ptr %304, ptr %305, align 8, !tbaa !27
  %306 = getelementptr inbounds %struct.tnode, ptr %304, i64 0, i32 6
  store ptr %85, ptr %306, align 8, !tbaa !26
  %307 = getelementptr inbounds %struct.tnode, ptr %277, i64 0, i32 3
  %308 = load ptr, ptr %307, align 8, !tbaa !27
  store ptr %308, ptr %303, align 8, !tbaa !11
  %309 = getelementptr inbounds %struct.tnode, ptr %277, i64 0, i32 4
  %310 = load ptr, ptr %309, align 8, !tbaa !28
  store ptr %310, ptr %307, align 8, !tbaa !27
  store ptr null, ptr %309, align 8, !tbaa !28
  %311 = load i32, ptr %308, align 8, !tbaa !16
  %312 = getelementptr inbounds %struct.tnode, ptr %277, i64 0, i32 7
  store i32 %311, ptr %312, align 8, !tbaa !24
  %313 = load i32, ptr %310, align 8, !tbaa !16
  %314 = getelementptr inbounds %struct.tnode, ptr %277, i64 0, i32 8
  store i32 %313, ptr %314, align 4, !tbaa !25
  %315 = load ptr, ptr %113, align 8, !tbaa !11
  %316 = load i32, ptr %315, align 8, !tbaa !16
  %317 = getelementptr inbounds %struct.tnode, ptr %85, i64 0, i32 7
  store i32 %316, ptr %317, align 8, !tbaa !24
  %318 = load ptr, ptr %305, align 8, !tbaa !27
  %319 = load i32, ptr %318, align 8, !tbaa !16
  %320 = getelementptr inbounds %struct.tnode, ptr %85, i64 0, i32 8
  store i32 %319, ptr %320, align 4, !tbaa !25
  %321 = load ptr, ptr %144, align 8, !tbaa !26
  %322 = getelementptr inbounds %struct.tnode, ptr %321, i64 0, i32 8
  store i32 %319, ptr %322, align 4, !tbaa !25
  tail call void @free(ptr noundef nonnull %.lcssa4) #44
  br label %351

323:                                              ; preds = %245
  %324 = getelementptr inbounds %struct.tnode, ptr %150, i64 0, i32 1
  %325 = load i32, ptr %324, align 4, !tbaa !21
  %326 = icmp eq i32 %325, 2
  %327 = getelementptr inbounds %struct.tnode, ptr %150, i64 0, i32 4
  br i1 %326, label %328, label %337

328:                                              ; preds = %323
  store i32 3, ptr %324, align 4, !tbaa !21
  store ptr %143, ptr %327, align 8, !tbaa !28
  %329 = getelementptr inbounds %struct.tnode, ptr %143, i64 0, i32 6
  store ptr %150, ptr %329, align 8, !tbaa !26
  tail call void @free(ptr noundef nonnull %.lcssa4) #44
  %330 = load i32, ptr %143, align 8, !tbaa !16
  %331 = getelementptr inbounds %struct.tnode, ptr %150, i64 0, i32 6
  %332 = load ptr, ptr %331, align 8, !tbaa !26
  %333 = getelementptr inbounds %struct.tnode, ptr %332, i64 0, i32 8
  store i32 %330, ptr %333, align 4, !tbaa !25
  tail call void @tpatch(ptr noundef %332, i32 noundef %330) #43
  %334 = load ptr, ptr %331, align 8, !tbaa !26
  %335 = getelementptr inbounds %struct.tnode, ptr %334, i64 0, i32 4
  store ptr null, ptr %335, align 8, !tbaa !28
  %336 = getelementptr inbounds %struct.tnode, ptr %334, i64 0, i32 1
  store i32 2, ptr %336, align 4, !tbaa !21
  tail call void @free(ptr noundef nonnull %85) #44
  br label %351

337:                                              ; preds = %323
  store i32 2, ptr %324, align 4, !tbaa !21
  %338 = load ptr, ptr %327, align 8, !tbaa !28
  store ptr %338, ptr %113, align 8, !tbaa !11
  %339 = getelementptr inbounds %struct.tnode, ptr %85, i64 0, i32 3
  store ptr %143, ptr %339, align 8, !tbaa !27
  %340 = getelementptr inbounds %struct.tnode, ptr %338, i64 0, i32 6
  store ptr %85, ptr %340, align 8, !tbaa !26
  store ptr null, ptr %327, align 8, !tbaa !28
  %341 = load i32, ptr %338, align 8, !tbaa !16
  %342 = getelementptr inbounds %struct.tnode, ptr %85, i64 0, i32 7
  store i32 %341, ptr %342, align 8, !tbaa !24
  %343 = load i32, ptr %143, align 8, !tbaa !16
  %344 = getelementptr inbounds %struct.tnode, ptr %85, i64 0, i32 8
  store i32 %343, ptr %344, align 4, !tbaa !25
  %345 = getelementptr inbounds %struct.tnode, ptr %150, i64 0, i32 8
  %346 = load i32, ptr %345, align 4, !tbaa !25
  %347 = getelementptr inbounds %struct.tnode, ptr %150, i64 0, i32 6
  %348 = load ptr, ptr %347, align 8, !tbaa !26
  %349 = getelementptr inbounds %struct.tnode, ptr %348, i64 0, i32 8
  store i32 %346, ptr %349, align 4, !tbaa !25
  %350 = load ptr, ptr %144, align 8, !tbaa !26
  tail call void @tpatch(ptr noundef %350, i32 noundef %343) #43
  tail call void @free(ptr noundef nonnull %.lcssa4) #44
  br label %351

351:                                              ; preds = %337, %328, %302, %281, %261, %256, %223, %220, %169, %159, %120, %109, %82, %74, %69, %59, %47, %34, %33, %25, %20, %10, %3
  ret void
}

; Function Attrs: mustprogress nounwind optsize willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) local_unnamed_addr #1

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @tpatch(ptr noundef readonly %0, i32 noundef %1) #2 {
  %3 = getelementptr inbounds %struct.tnode, ptr %0, i64 0, i32 6
  %4 = load ptr, ptr %3, align 8, !tbaa !26
  %5 = icmp eq ptr %4, null
  br i1 %5, label %27, label %6

6:                                                ; preds = %23, %2
  %7 = phi ptr [ %25, %23 ], [ %4, %2 ]
  %8 = phi ptr [ %7, %23 ], [ %0, %2 ]
  %9 = getelementptr inbounds %struct.tnode, ptr %7, i64 0, i32 2
  %10 = load ptr, ptr %9, align 8, !tbaa !11
  %11 = icmp eq ptr %10, %8
  br i1 %11, label %12, label %14

12:                                               ; preds = %6
  %.lcssa = phi ptr [ %7, %6 ]
  %13 = getelementptr inbounds %struct.tnode, ptr %.lcssa, i64 0, i32 7
  store i32 %1, ptr %13, align 8, !tbaa !24
  br label %27

14:                                               ; preds = %6
  %15 = getelementptr inbounds %struct.tnode, ptr %7, i64 0, i32 3
  %16 = load ptr, ptr %15, align 8, !tbaa !27
  %17 = icmp eq ptr %16, %8
  br i1 %17, label %18, label %23

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.tnode, ptr %7, i64 0, i32 8
  store i32 %1, ptr %19, align 4, !tbaa !25
  %20 = getelementptr inbounds %struct.tnode, ptr %7, i64 0, i32 4
  %21 = load ptr, ptr %20, align 8, !tbaa !28
  %22 = icmp eq ptr %21, null
  br i1 %22, label %23, label %27

23:                                               ; preds = %18, %14
  %24 = getelementptr inbounds %struct.tnode, ptr %7, i64 0, i32 6
  %25 = load ptr, ptr %24, align 8, !tbaa !26
  %26 = icmp eq ptr %25, null
  br i1 %26, label %27, label %6

27:                                               ; preds = %23, %18, %12, %2
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @tsubson(ptr nocapture noundef %0, ptr noundef %1) #0 {
  %3 = getelementptr inbounds %struct.tnode, ptr %1, i64 0, i32 6
  %4 = load ptr, ptr %3, align 8, !tbaa !26
  %5 = load ptr, ptr %0, align 8, !tbaa !7
  %6 = icmp eq ptr %4, %5
  br i1 %6, label %7, label %20

7:                                                ; preds = %60, %2
  %8 = phi ptr [ %1, %2 ], [ %21, %60 ]
  %9 = phi ptr [ %4, %2 ], [ %61, %60 ]
  %10 = getelementptr inbounds %struct.tnode, ptr %9, i64 0, i32 2
  %11 = load ptr, ptr %10, align 8, !tbaa !11
  %12 = icmp eq ptr %11, %8
  br i1 %12, label %13, label %16

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.tnode, ptr %9, i64 0, i32 3
  %15 = load ptr, ptr %14, align 8, !tbaa !27
  br label %16

16:                                               ; preds = %13, %7
  %17 = phi ptr [ %15, %13 ], [ %11, %7 ]
  %18 = getelementptr inbounds %struct.tnode, ptr %17, i64 0, i32 6
  store ptr null, ptr %18, align 8, !tbaa !26
  tail call void @free(ptr noundef nonnull %8) #44
  %19 = load ptr, ptr %0, align 8, !tbaa !7
  tail call void @free(ptr noundef %19) #44
  store ptr %17, ptr %0, align 8, !tbaa !7
  br label %329

20:                                               ; preds = %60, %2
  %21 = phi ptr [ %61, %60 ], [ %4, %2 ]
  %22 = phi ptr [ %21, %60 ], [ %1, %2 ]
  %23 = getelementptr inbounds %struct.tnode, ptr %21, i64 0, i32 2
  %24 = load ptr, ptr %23, align 8, !tbaa !11
  %25 = icmp eq ptr %24, %22
  br i1 %25, label %26, label %30

26:                                               ; preds = %20
  %27 = getelementptr inbounds %struct.tnode, ptr %21, i64 0, i32 3
  %28 = load ptr, ptr %27, align 8, !tbaa !27
  %29 = getelementptr inbounds %struct.tnode, ptr %21, i64 0, i32 8
  br label %32

30:                                               ; preds = %20
  %31 = getelementptr inbounds %struct.tnode, ptr %21, i64 0, i32 7
  br label %32

32:                                               ; preds = %30, %26
  %33 = phi ptr [ %28, %26 ], [ %24, %30 ]
  %34 = phi ptr [ %29, %26 ], [ %31, %30 ]
  %35 = load i32, ptr %34, align 4, !tbaa !17
  %36 = getelementptr inbounds %struct.tnode, ptr %21, i64 0, i32 6
  %37 = load ptr, ptr %36, align 8, !tbaa !26
  %38 = getelementptr inbounds %struct.tnode, ptr %37, i64 0, i32 2
  %39 = load ptr, ptr %38, align 8, !tbaa !11
  %40 = icmp eq ptr %39, %21
  %41 = getelementptr inbounds %struct.tnode, ptr %37, i64 0, i32 3
  %42 = load ptr, ptr %41, align 8, !tbaa !27
  br i1 %40, label %43, label %143

43:                                               ; preds = %32
  %44 = getelementptr inbounds %struct.tnode, ptr %37, i64 0, i32 1
  %45 = load i32, ptr %44, align 4, !tbaa !21
  %46 = icmp eq i32 %45, 2
  %47 = getelementptr inbounds %struct.tnode, ptr %42, i64 0, i32 1
  %48 = load i32, ptr %47, align 4, !tbaa !21
  %49 = icmp eq i32 %48, 2
  br i1 %46, label %50, label %86

50:                                               ; preds = %43
  br i1 %49, label %51, label %64

51:                                               ; preds = %50
  store i32 3, ptr %47, align 4, !tbaa !21
  %52 = getelementptr inbounds %struct.tnode, ptr %42, i64 0, i32 3
  %53 = getelementptr inbounds %struct.tnode, ptr %42, i64 0, i32 2
  %54 = load <2 x ptr>, ptr %53, align 8, !tbaa !7
  store <2 x ptr> %54, ptr %52, align 8, !tbaa !7
  store ptr %33, ptr %53, align 8, !tbaa !11
  %55 = getelementptr inbounds %struct.tnode, ptr %33, i64 0, i32 6
  store ptr %42, ptr %55, align 8, !tbaa !26
  tail call void @free(ptr noundef nonnull %22) #44
  %56 = getelementptr inbounds %struct.tnode, ptr %42, i64 0, i32 7
  %57 = load i32, ptr %56, align 8, !tbaa !24
  %58 = getelementptr inbounds %struct.tnode, ptr %42, i64 0, i32 8
  store i32 %57, ptr %58, align 4, !tbaa !25
  store i32 %35, ptr %56, align 8, !tbaa !24
  %59 = load ptr, ptr %36, align 8, !tbaa !26
  br label %60

60:                                               ; preds = %153, %51
  %61 = phi ptr [ %59, %51 ], [ %156, %153 ]
  %62 = load ptr, ptr %0, align 8, !tbaa !7
  %63 = icmp eq ptr %61, %62
  br i1 %63, label %7, label %20

64:                                               ; preds = %50
  %.lcssa51 = phi ptr [ %47, %50 ]
  %.lcssa47 = phi ptr [ %33, %50 ]
  %.lcssa42 = phi i32 [ %35, %50 ]
  %.lcssa22 = phi ptr [ %42, %50 ]
  %.lcssa17 = phi ptr [ %21, %50 ]
  %.lcssa12 = phi ptr [ %22, %50 ]
  %65 = getelementptr inbounds %struct.tnode, ptr %.lcssa17, i64 0, i32 2
  store i32 2, ptr %.lcssa51, align 4, !tbaa !21
  store ptr %.lcssa47, ptr %65, align 8, !tbaa !11
  %66 = getelementptr inbounds %struct.tnode, ptr %.lcssa22, i64 0, i32 2
  %67 = load ptr, ptr %66, align 8, !tbaa !11
  %68 = getelementptr inbounds %struct.tnode, ptr %.lcssa17, i64 0, i32 3
  store ptr %67, ptr %68, align 8, !tbaa !27
  %69 = getelementptr inbounds %struct.tnode, ptr %.lcssa22, i64 0, i32 3
  %70 = getelementptr inbounds %struct.tnode, ptr %.lcssa22, i64 0, i32 4
  %71 = load <2 x ptr>, ptr %69, align 8, !tbaa !7
  store <2 x ptr> %71, ptr %66, align 8, !tbaa !7
  %72 = load ptr, ptr %68, align 8, !tbaa !27
  %73 = getelementptr inbounds %struct.tnode, ptr %72, i64 0, i32 6
  store ptr %.lcssa17, ptr %73, align 8, !tbaa !26
  store ptr null, ptr %70, align 8, !tbaa !28
  %74 = getelementptr inbounds %struct.tnode, ptr %.lcssa17, i64 0, i32 7
  store i32 %.lcssa42, ptr %74, align 8, !tbaa !24
  %75 = getelementptr inbounds %struct.tnode, ptr %.lcssa22, i64 0, i32 7
  %76 = load i32, ptr %75, align 8, !tbaa !24
  %77 = getelementptr inbounds %struct.tnode, ptr %.lcssa17, i64 0, i32 8
  store i32 %76, ptr %77, align 4, !tbaa !25
  %78 = getelementptr inbounds %struct.tnode, ptr %.lcssa22, i64 0, i32 8
  %79 = load i32, ptr %78, align 4, !tbaa !25
  store i32 %79, ptr %75, align 8, !tbaa !24
  %80 = getelementptr inbounds %struct.tnode, ptr %.lcssa22, i64 0, i32 6
  %81 = load ptr, ptr %80, align 8, !tbaa !26
  %82 = getelementptr inbounds %struct.tnode, ptr %81, i64 0, i32 8
  %83 = load i32, ptr %82, align 4, !tbaa !25
  store i32 %83, ptr %78, align 4, !tbaa !25
  %84 = load i32, ptr %77, align 4, !tbaa !25
  %85 = getelementptr inbounds %struct.tnode, ptr %81, i64 0, i32 7
  store i32 %84, ptr %85, align 8, !tbaa !24
  tail call void @free(ptr noundef nonnull %.lcssa12) #44
  br label %329

86:                                               ; preds = %43
  %.lcssa50 = phi ptr [ %47, %43 ]
  %.lcssa48 = phi i1 [ %49, %43 ]
  %.lcssa46 = phi ptr [ %33, %43 ]
  %.lcssa41 = phi i32 [ %35, %43 ]
  %.lcssa36 = phi ptr [ %36, %43 ]
  %.lcssa21 = phi ptr [ %42, %43 ]
  %.lcssa16 = phi ptr [ %21, %43 ]
  %.lcssa11 = phi ptr [ %22, %43 ]
  br i1 %.lcssa48, label %87, label %121

87:                                               ; preds = %86
  store i32 3, ptr %.lcssa50, align 4, !tbaa !21
  %88 = getelementptr inbounds %struct.tnode, ptr %.lcssa21, i64 0, i32 3
  %89 = getelementptr inbounds %struct.tnode, ptr %.lcssa21, i64 0, i32 2
  %90 = load <2 x ptr>, ptr %89, align 8, !tbaa !7
  store <2 x ptr> %90, ptr %88, align 8, !tbaa !7
  store ptr %.lcssa46, ptr %89, align 8, !tbaa !11
  %91 = getelementptr inbounds %struct.tnode, ptr %.lcssa46, i64 0, i32 6
  store ptr %.lcssa21, ptr %91, align 8, !tbaa !26
  tail call void @free(ptr noundef nonnull %.lcssa11) #44
  %92 = getelementptr inbounds %struct.tnode, ptr %.lcssa21, i64 0, i32 7
  %93 = load i32, ptr %92, align 8, !tbaa !24
  %94 = getelementptr inbounds %struct.tnode, ptr %.lcssa21, i64 0, i32 8
  store i32 %93, ptr %94, align 4, !tbaa !25
  store i32 %.lcssa41, ptr %92, align 8, !tbaa !24
  %95 = load ptr, ptr %.lcssa36, align 8, !tbaa !26
  %96 = getelementptr inbounds %struct.tnode, ptr %95, i64 0, i32 3
  %97 = getelementptr inbounds %struct.tnode, ptr %95, i64 0, i32 2
  %98 = getelementptr inbounds %struct.tnode, ptr %95, i64 0, i32 4
  %99 = load <2 x ptr>, ptr %96, align 8, !tbaa !7
  store <2 x ptr> %99, ptr %97, align 8, !tbaa !7
  store ptr null, ptr %98, align 8, !tbaa !28
  %100 = getelementptr inbounds %struct.tnode, ptr %95, i64 0, i32 1
  store i32 2, ptr %100, align 4, !tbaa !21
  %101 = getelementptr inbounds %struct.tnode, ptr %95, i64 0, i32 8
  %102 = load i32, ptr %101, align 4, !tbaa !25
  %103 = getelementptr inbounds %struct.tnode, ptr %95, i64 0, i32 7
  store i32 %102, ptr %103, align 8, !tbaa !24
  tail call void @free(ptr noundef nonnull %.lcssa16) #44
  %104 = getelementptr inbounds %struct.tnode, ptr %.lcssa21, i64 0, i32 6
  %105 = load ptr, ptr %104, align 8, !tbaa !26
  %106 = getelementptr inbounds %struct.tnode, ptr %105, i64 0, i32 3
  br label %107

107:                                              ; preds = %112, %87
  %108 = phi ptr [ %106, %87 ], [ %113, %112 ]
  %109 = load ptr, ptr %108, align 8, !tbaa !7
  %110 = getelementptr inbounds %struct.tnode, ptr %109, i64 0, i32 1
  %111 = load i32, ptr %110, align 4, !tbaa !21
  switch i32 %111, label %117 [
    i32 3, label %112
    i32 0, label %114
  ]

112:                                              ; preds = %107
  %113 = getelementptr inbounds %struct.tnode, ptr %109, i64 0, i32 4
  br label %107, !llvm.loop !29

114:                                              ; preds = %107
  %.lcssa1 = phi ptr [ %109, %107 ]
  %115 = load i32, ptr %.lcssa1, align 8, !tbaa !16
  %116 = getelementptr inbounds %struct.tnode, ptr %105, i64 0, i32 8
  store i32 %115, ptr %116, align 4, !tbaa !25
  br label %329

117:                                              ; preds = %107
  %.lcssa = phi ptr [ %109, %107 ]
  %118 = getelementptr inbounds %struct.tnode, ptr %.lcssa, i64 0, i32 8
  %119 = load i32, ptr %118, align 4, !tbaa !25
  %120 = getelementptr inbounds %struct.tnode, ptr %105, i64 0, i32 8
  store i32 %119, ptr %120, align 4, !tbaa !25
  br label %329

121:                                              ; preds = %86
  %122 = getelementptr inbounds %struct.tnode, ptr %.lcssa16, i64 0, i32 2
  store i32 2, ptr %.lcssa50, align 4, !tbaa !21
  store ptr %.lcssa46, ptr %122, align 8, !tbaa !11
  %123 = getelementptr inbounds %struct.tnode, ptr %.lcssa21, i64 0, i32 2
  %124 = load ptr, ptr %123, align 8, !tbaa !11
  %125 = getelementptr inbounds %struct.tnode, ptr %.lcssa16, i64 0, i32 3
  store ptr %124, ptr %125, align 8, !tbaa !27
  %126 = getelementptr inbounds %struct.tnode, ptr %.lcssa21, i64 0, i32 3
  %127 = getelementptr inbounds %struct.tnode, ptr %.lcssa21, i64 0, i32 4
  %128 = load <2 x ptr>, ptr %126, align 8, !tbaa !7
  store <2 x ptr> %128, ptr %123, align 8, !tbaa !7
  %129 = load ptr, ptr %125, align 8, !tbaa !27
  %130 = getelementptr inbounds %struct.tnode, ptr %129, i64 0, i32 6
  store ptr %.lcssa16, ptr %130, align 8, !tbaa !26
  store ptr null, ptr %127, align 8, !tbaa !28
  %131 = getelementptr inbounds %struct.tnode, ptr %.lcssa16, i64 0, i32 7
  store i32 %.lcssa41, ptr %131, align 8, !tbaa !24
  %132 = getelementptr inbounds %struct.tnode, ptr %.lcssa21, i64 0, i32 7
  %133 = load i32, ptr %132, align 8, !tbaa !24
  %134 = getelementptr inbounds %struct.tnode, ptr %.lcssa16, i64 0, i32 8
  store i32 %133, ptr %134, align 4, !tbaa !25
  %135 = getelementptr inbounds %struct.tnode, ptr %.lcssa21, i64 0, i32 8
  %136 = load i32, ptr %135, align 4, !tbaa !25
  store i32 %136, ptr %132, align 8, !tbaa !24
  %137 = getelementptr inbounds %struct.tnode, ptr %.lcssa21, i64 0, i32 6
  %138 = load ptr, ptr %137, align 8, !tbaa !26
  %139 = getelementptr inbounds %struct.tnode, ptr %138, i64 0, i32 8
  %140 = load i32, ptr %139, align 4, !tbaa !25
  store i32 %140, ptr %135, align 4, !tbaa !25
  %141 = load i32, ptr %134, align 4, !tbaa !25
  %142 = getelementptr inbounds %struct.tnode, ptr %138, i64 0, i32 7
  store i32 %141, ptr %142, align 8, !tbaa !24
  tail call void @free(ptr noundef nonnull %.lcssa11) #44
  br label %329

143:                                              ; preds = %32
  %144 = icmp eq ptr %42, %21
  br i1 %144, label %145, label %253

145:                                              ; preds = %143
  %146 = getelementptr inbounds %struct.tnode, ptr %37, i64 0, i32 1
  %147 = load i32, ptr %146, align 4, !tbaa !21
  %148 = icmp eq i32 %147, 2
  br i1 %148, label %149, label %200

149:                                              ; preds = %145
  %150 = getelementptr inbounds %struct.tnode, ptr %39, i64 0, i32 1
  %151 = load i32, ptr %150, align 4, !tbaa !21
  %152 = icmp eq i32 %151, 2
  br i1 %152, label %153, label %158

153:                                              ; preds = %149
  store i32 3, ptr %150, align 4, !tbaa !21
  %154 = getelementptr inbounds %struct.tnode, ptr %39, i64 0, i32 4
  store ptr %33, ptr %154, align 8, !tbaa !28
  %155 = getelementptr inbounds %struct.tnode, ptr %33, i64 0, i32 6
  store ptr %39, ptr %155, align 8, !tbaa !26
  tail call void @free(ptr noundef nonnull %22) #44
  %156 = load ptr, ptr %36, align 8, !tbaa !26
  %157 = getelementptr inbounds %struct.tnode, ptr %156, i64 0, i32 7
  store i32 %35, ptr %157, align 8, !tbaa !24
  br label %60

158:                                              ; preds = %149
  %.lcssa45 = phi ptr [ %33, %149 ]
  %.lcssa40 = phi i32 [ %35, %149 ]
  %.lcssa35 = phi ptr [ %36, %149 ]
  %.lcssa25 = phi ptr [ %39, %149 ]
  %.lcssa15 = phi ptr [ %21, %149 ]
  %.lcssa10 = phi ptr [ %22, %149 ]
  %.lcssa7 = phi ptr [ %150, %149 ]
  %159 = getelementptr inbounds %struct.tnode, ptr %.lcssa15, i64 0, i32 2
  store i32 2, ptr %.lcssa7, align 4, !tbaa !21
  %160 = getelementptr inbounds %struct.tnode, ptr %.lcssa25, i64 0, i32 4
  %161 = load ptr, ptr %160, align 8, !tbaa !28
  store ptr %161, ptr %159, align 8, !tbaa !11
  %162 = getelementptr inbounds %struct.tnode, ptr %.lcssa15, i64 0, i32 3
  store ptr %.lcssa45, ptr %162, align 8, !tbaa !27
  %163 = getelementptr inbounds %struct.tnode, ptr %161, i64 0, i32 6
  store ptr %.lcssa15, ptr %163, align 8, !tbaa !26
  store ptr null, ptr %160, align 8, !tbaa !28
  %164 = getelementptr inbounds %struct.tnode, ptr %.lcssa25, i64 0, i32 6
  %165 = load ptr, ptr %164, align 8, !tbaa !26
  %166 = getelementptr inbounds %struct.tnode, ptr %165, i64 0, i32 7
  %167 = load i32, ptr %166, align 8, !tbaa !24
  %168 = getelementptr inbounds %struct.tnode, ptr %.lcssa15, i64 0, i32 7
  store i32 %167, ptr %168, align 8, !tbaa !24
  %169 = getelementptr inbounds %struct.tnode, ptr %.lcssa15, i64 0, i32 8
  store i32 %.lcssa40, ptr %169, align 4, !tbaa !25
  %170 = getelementptr inbounds %struct.tnode, ptr %.lcssa25, i64 0, i32 8
  %171 = load i32, ptr %170, align 4, !tbaa !25
  store i32 %171, ptr %166, align 8, !tbaa !24
  %172 = getelementptr inbounds %struct.tnode, ptr %165, i64 0, i32 8
  store i32 %.lcssa40, ptr %172, align 4, !tbaa !25
  %173 = load ptr, ptr %.lcssa35, align 8, !tbaa !26
  %174 = load i32, ptr %169, align 4, !tbaa !25
  %175 = getelementptr inbounds %struct.tnode, ptr %173, i64 0, i32 6
  %176 = load ptr, ptr %175, align 8, !tbaa !26
  %177 = icmp eq ptr %176, null
  br i1 %177, label %199, label %178

178:                                              ; preds = %195, %158
  %179 = phi ptr [ %197, %195 ], [ %176, %158 ]
  %180 = phi ptr [ %179, %195 ], [ %173, %158 ]
  %181 = getelementptr inbounds %struct.tnode, ptr %179, i64 0, i32 2
  %182 = load ptr, ptr %181, align 8, !tbaa !11
  %183 = icmp eq ptr %182, %180
  br i1 %183, label %184, label %186

184:                                              ; preds = %178
  %.lcssa2 = phi ptr [ %179, %178 ]
  %185 = getelementptr inbounds %struct.tnode, ptr %.lcssa2, i64 0, i32 7
  store i32 %174, ptr %185, align 8, !tbaa !24
  br label %199

186:                                              ; preds = %178
  %187 = getelementptr inbounds %struct.tnode, ptr %179, i64 0, i32 3
  %188 = load ptr, ptr %187, align 8, !tbaa !27
  %189 = icmp eq ptr %188, %180
  br i1 %189, label %190, label %195

190:                                              ; preds = %186
  %191 = getelementptr inbounds %struct.tnode, ptr %179, i64 0, i32 8
  store i32 %174, ptr %191, align 4, !tbaa !25
  %192 = getelementptr inbounds %struct.tnode, ptr %179, i64 0, i32 4
  %193 = load ptr, ptr %192, align 8, !tbaa !28
  %194 = icmp eq ptr %193, null
  br i1 %194, label %195, label %199

195:                                              ; preds = %190, %186
  %196 = getelementptr inbounds %struct.tnode, ptr %179, i64 0, i32 6
  %197 = load ptr, ptr %196, align 8, !tbaa !26
  %198 = icmp eq ptr %197, null
  br i1 %198, label %199, label %178

199:                                              ; preds = %195, %190, %184, %158
  tail call void @free(ptr noundef %.lcssa10) #44
  br label %329

200:                                              ; preds = %145
  %.lcssa44 = phi ptr [ %33, %145 ]
  %.lcssa39 = phi i32 [ %35, %145 ]
  %.lcssa29 = phi ptr [ %37, %145 ]
  %.lcssa14 = phi ptr [ %21, %145 ]
  %.lcssa9 = phi ptr [ %22, %145 ]
  %201 = getelementptr inbounds %struct.tnode, ptr %.lcssa29, i64 0, i32 4
  %202 = load ptr, ptr %201, align 8, !tbaa !28
  %203 = getelementptr inbounds %struct.tnode, ptr %202, i64 0, i32 1
  %204 = load i32, ptr %203, align 4, !tbaa !21
  %205 = icmp eq i32 %204, 2
  %206 = getelementptr inbounds %struct.tnode, ptr %202, i64 0, i32 7
  br i1 %205, label %207, label %223

207:                                              ; preds = %200
  store i32 3, ptr %203, align 4, !tbaa !21
  %208 = getelementptr inbounds %struct.tnode, ptr %202, i64 0, i32 3
  %209 = getelementptr inbounds %struct.tnode, ptr %202, i64 0, i32 2
  %210 = load <2 x ptr>, ptr %209, align 8, !tbaa !7
  store <2 x ptr> %210, ptr %208, align 8, !tbaa !7
  store ptr %.lcssa44, ptr %209, align 8, !tbaa !11
  %211 = getelementptr inbounds %struct.tnode, ptr %.lcssa44, i64 0, i32 6
  store ptr %202, ptr %211, align 8, !tbaa !26
  tail call void @free(ptr noundef nonnull %.lcssa9) #44
  %212 = getelementptr inbounds %struct.tnode, ptr %202, i64 0, i32 8
  %213 = load i32, ptr %212, align 4, !tbaa !25
  %214 = getelementptr inbounds %struct.tnode, ptr %202, i64 0, i32 6
  %215 = load ptr, ptr %214, align 8, !tbaa !26
  %216 = getelementptr inbounds %struct.tnode, ptr %215, i64 0, i32 8
  store i32 %213, ptr %216, align 4, !tbaa !25
  %217 = load i32, ptr %206, align 8, !tbaa !24
  store i32 %217, ptr %212, align 4, !tbaa !25
  store i32 %.lcssa39, ptr %206, align 8, !tbaa !24
  tail call void @free(ptr noundef nonnull %.lcssa14) #44
  %218 = load ptr, ptr %214, align 8, !tbaa !26
  %219 = getelementptr inbounds %struct.tnode, ptr %218, i64 0, i32 4
  %220 = load ptr, ptr %219, align 8, !tbaa !28
  %221 = getelementptr inbounds %struct.tnode, ptr %218, i64 0, i32 3
  store ptr %220, ptr %221, align 8, !tbaa !27
  store ptr null, ptr %219, align 8, !tbaa !28
  %222 = getelementptr inbounds %struct.tnode, ptr %218, i64 0, i32 1
  store i32 2, ptr %222, align 4, !tbaa !21
  br label %329

223:                                              ; preds = %200
  %224 = getelementptr inbounds %struct.tnode, ptr %.lcssa14, i64 0, i32 2
  store i32 2, ptr %203, align 4, !tbaa !21
  store ptr %.lcssa44, ptr %224, align 8, !tbaa !11
  %225 = getelementptr inbounds %struct.tnode, ptr %202, i64 0, i32 2
  %226 = load ptr, ptr %225, align 8, !tbaa !11
  %227 = getelementptr inbounds %struct.tnode, ptr %.lcssa14, i64 0, i32 3
  store ptr %226, ptr %227, align 8, !tbaa !27
  %228 = getelementptr inbounds %struct.tnode, ptr %226, i64 0, i32 6
  store ptr %.lcssa14, ptr %228, align 8, !tbaa !26
  %229 = getelementptr inbounds %struct.tnode, ptr %202, i64 0, i32 3
  %230 = load ptr, ptr %229, align 8, !tbaa !27
  store ptr %230, ptr %225, align 8, !tbaa !11
  %231 = getelementptr inbounds %struct.tnode, ptr %202, i64 0, i32 4
  %232 = load ptr, ptr %231, align 8, !tbaa !28
  store ptr %232, ptr %229, align 8, !tbaa !27
  store ptr null, ptr %231, align 8, !tbaa !28
  %233 = getelementptr inbounds %struct.tnode, ptr %.lcssa14, i64 0, i32 7
  store i32 %.lcssa39, ptr %233, align 8, !tbaa !24
  %234 = load i32, ptr %206, align 8, !tbaa !24
  %235 = getelementptr inbounds %struct.tnode, ptr %.lcssa14, i64 0, i32 8
  store i32 %234, ptr %235, align 4, !tbaa !25
  %236 = getelementptr inbounds %struct.tnode, ptr %202, i64 0, i32 8
  %237 = load i32, ptr %236, align 4, !tbaa !25
  store i32 %237, ptr %206, align 8, !tbaa !24
  %238 = getelementptr inbounds %struct.tnode, ptr %202, i64 0, i32 6
  %239 = load ptr, ptr %238, align 8, !tbaa !26
  %240 = getelementptr inbounds %struct.tnode, ptr %239, i64 0, i32 8
  store i32 %234, ptr %240, align 4, !tbaa !25
  br label %241

241:                                              ; preds = %245, %223
  %242 = phi ptr [ %232, %223 ], [ %247, %245 ]
  %243 = getelementptr inbounds %struct.tnode, ptr %242, i64 0, i32 1
  %244 = load i32, ptr %243, align 4, !tbaa !21
  switch i32 %244, label %248 [
    i32 3, label %245
    i32 0, label %250
  ]

245:                                              ; preds = %241
  %246 = getelementptr inbounds %struct.tnode, ptr %242, i64 0, i32 4
  %247 = load ptr, ptr %246, align 8, !tbaa !7
  br label %241, !llvm.loop !30

248:                                              ; preds = %241
  %.lcssa3 = phi ptr [ %242, %241 ]
  %249 = getelementptr inbounds %struct.tnode, ptr %.lcssa3, i64 0, i32 8
  br label %250

250:                                              ; preds = %248, %241
  %251 = phi ptr [ %249, %248 ], [ %242, %241 ]
  %252 = load i32, ptr %251, align 4, !tbaa !17
  store i32 %252, ptr %236, align 4, !tbaa !25
  tail call void @free(ptr noundef %.lcssa9) #44
  br label %329

253:                                              ; preds = %143
  %.lcssa43 = phi ptr [ %33, %143 ]
  %.lcssa38 = phi i32 [ %35, %143 ]
  %.lcssa33 = phi ptr [ %36, %143 ]
  %.lcssa18 = phi ptr [ %42, %143 ]
  %.lcssa13 = phi ptr [ %21, %143 ]
  %.lcssa8 = phi ptr [ %22, %143 ]
  %254 = getelementptr inbounds %struct.tnode, ptr %.lcssa18, i64 0, i32 1
  %255 = load i32, ptr %254, align 4, !tbaa !21
  %256 = icmp eq i32 %255, 2
  %257 = getelementptr inbounds %struct.tnode, ptr %.lcssa18, i64 0, i32 4
  br i1 %256, label %258, label %290

258:                                              ; preds = %253
  store i32 3, ptr %254, align 4, !tbaa !21
  store ptr %.lcssa43, ptr %257, align 8, !tbaa !28
  %259 = getelementptr inbounds %struct.tnode, ptr %.lcssa43, i64 0, i32 6
  store ptr %.lcssa18, ptr %259, align 8, !tbaa !26
  tail call void @free(ptr noundef nonnull %.lcssa8) #44
  %260 = getelementptr inbounds %struct.tnode, ptr %.lcssa18, i64 0, i32 6
  %261 = load ptr, ptr %260, align 8, !tbaa !26
  %262 = getelementptr inbounds %struct.tnode, ptr %261, i64 0, i32 8
  store i32 %.lcssa38, ptr %262, align 4, !tbaa !25
  %263 = getelementptr inbounds %struct.tnode, ptr %261, i64 0, i32 6
  %264 = load ptr, ptr %263, align 8, !tbaa !26
  %265 = icmp eq ptr %264, null
  br i1 %265, label %287, label %266

266:                                              ; preds = %283, %258
  %267 = phi ptr [ %285, %283 ], [ %264, %258 ]
  %268 = phi ptr [ %267, %283 ], [ %261, %258 ]
  %269 = getelementptr inbounds %struct.tnode, ptr %267, i64 0, i32 2
  %270 = load ptr, ptr %269, align 8, !tbaa !11
  %271 = icmp eq ptr %270, %268
  br i1 %271, label %272, label %274

272:                                              ; preds = %266
  %.lcssa5 = phi ptr [ %267, %266 ]
  %273 = getelementptr inbounds %struct.tnode, ptr %.lcssa5, i64 0, i32 7
  store i32 %.lcssa38, ptr %273, align 8, !tbaa !24
  br label %287

274:                                              ; preds = %266
  %275 = getelementptr inbounds %struct.tnode, ptr %267, i64 0, i32 3
  %276 = load ptr, ptr %275, align 8, !tbaa !27
  %277 = icmp eq ptr %276, %268
  br i1 %277, label %278, label %283

278:                                              ; preds = %274
  %279 = getelementptr inbounds %struct.tnode, ptr %267, i64 0, i32 8
  store i32 %.lcssa38, ptr %279, align 4, !tbaa !25
  %280 = getelementptr inbounds %struct.tnode, ptr %267, i64 0, i32 4
  %281 = load ptr, ptr %280, align 8, !tbaa !28
  %282 = icmp eq ptr %281, null
  br i1 %282, label %283, label %287

283:                                              ; preds = %278, %274
  %284 = getelementptr inbounds %struct.tnode, ptr %267, i64 0, i32 6
  %285 = load ptr, ptr %284, align 8, !tbaa !26
  %286 = icmp eq ptr %285, null
  br i1 %286, label %287, label %266

287:                                              ; preds = %283, %278, %272, %258
  %288 = getelementptr inbounds %struct.tnode, ptr %261, i64 0, i32 4
  store ptr null, ptr %288, align 8, !tbaa !28
  %289 = getelementptr inbounds %struct.tnode, ptr %261, i64 0, i32 1
  store i32 2, ptr %289, align 4, !tbaa !21
  tail call void @free(ptr noundef %.lcssa13) #44
  br label %329

290:                                              ; preds = %253
  %291 = getelementptr inbounds %struct.tnode, ptr %.lcssa13, i64 0, i32 2
  store i32 2, ptr %254, align 4, !tbaa !21
  %292 = load ptr, ptr %257, align 8, !tbaa !28
  store ptr %292, ptr %291, align 8, !tbaa !11
  %293 = getelementptr inbounds %struct.tnode, ptr %.lcssa13, i64 0, i32 3
  store ptr %.lcssa43, ptr %293, align 8, !tbaa !27
  %294 = getelementptr inbounds %struct.tnode, ptr %292, i64 0, i32 6
  store ptr %.lcssa13, ptr %294, align 8, !tbaa !26
  store ptr null, ptr %257, align 8, !tbaa !28
  %295 = getelementptr inbounds %struct.tnode, ptr %.lcssa18, i64 0, i32 6
  %296 = load ptr, ptr %295, align 8, !tbaa !26
  %297 = getelementptr inbounds %struct.tnode, ptr %296, i64 0, i32 8
  %298 = load i32, ptr %297, align 4, !tbaa !25
  %299 = getelementptr inbounds %struct.tnode, ptr %.lcssa13, i64 0, i32 7
  store i32 %298, ptr %299, align 8, !tbaa !24
  %300 = getelementptr inbounds %struct.tnode, ptr %.lcssa13, i64 0, i32 8
  store i32 %.lcssa38, ptr %300, align 4, !tbaa !25
  %301 = getelementptr inbounds %struct.tnode, ptr %.lcssa18, i64 0, i32 8
  %302 = load i32, ptr %301, align 4, !tbaa !25
  store i32 %302, ptr %297, align 4, !tbaa !25
  %303 = load ptr, ptr %.lcssa33, align 8, !tbaa !26
  %304 = getelementptr inbounds %struct.tnode, ptr %303, i64 0, i32 6
  %305 = load ptr, ptr %304, align 8, !tbaa !26
  %306 = icmp eq ptr %305, null
  br i1 %306, label %328, label %307

307:                                              ; preds = %324, %290
  %308 = phi ptr [ %326, %324 ], [ %305, %290 ]
  %309 = phi ptr [ %308, %324 ], [ %303, %290 ]
  %310 = getelementptr inbounds %struct.tnode, ptr %308, i64 0, i32 2
  %311 = load ptr, ptr %310, align 8, !tbaa !11
  %312 = icmp eq ptr %311, %309
  br i1 %312, label %313, label %315

313:                                              ; preds = %307
  %.lcssa6 = phi ptr [ %308, %307 ]
  %314 = getelementptr inbounds %struct.tnode, ptr %.lcssa6, i64 0, i32 7
  store i32 %.lcssa38, ptr %314, align 8, !tbaa !24
  br label %328

315:                                              ; preds = %307
  %316 = getelementptr inbounds %struct.tnode, ptr %308, i64 0, i32 3
  %317 = load ptr, ptr %316, align 8, !tbaa !27
  %318 = icmp eq ptr %317, %309
  br i1 %318, label %319, label %324

319:                                              ; preds = %315
  %320 = getelementptr inbounds %struct.tnode, ptr %308, i64 0, i32 8
  store i32 %.lcssa38, ptr %320, align 4, !tbaa !25
  %321 = getelementptr inbounds %struct.tnode, ptr %308, i64 0, i32 4
  %322 = load ptr, ptr %321, align 8, !tbaa !28
  %323 = icmp eq ptr %322, null
  br i1 %323, label %324, label %328

324:                                              ; preds = %319, %315
  %325 = getelementptr inbounds %struct.tnode, ptr %308, i64 0, i32 6
  %326 = load ptr, ptr %325, align 8, !tbaa !26
  %327 = icmp eq ptr %326, null
  br i1 %327, label %328, label %307

328:                                              ; preds = %324, %319, %313, %290
  tail call void @free(ptr noundef %.lcssa8) #44
  br label %329

329:                                              ; preds = %328, %287, %250, %207, %199, %121, %117, %114, %64, %16
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal void @tmax(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1, ptr nocapture noundef writeonly %2, ptr nocapture noundef writeonly %3) #3 {
  %5 = load ptr, ptr %0, align 8, !tbaa !7
  %6 = icmp eq ptr %5, null
  br i1 %6, label %7, label %8

7:                                                ; preds = %4
  store ptr null, ptr %1, align 8, !tbaa !7
  br label %24

8:                                                ; preds = %16, %4
  %9 = phi ptr [ %18, %16 ], [ %5, %4 ]
  %10 = getelementptr inbounds %struct.tnode, ptr %9, i64 0, i32 1
  %11 = load i32, ptr %10, align 4, !tbaa !21
  switch i32 %11, label %19 [
    i32 3, label %12
    i32 2, label %14
  ]

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.tnode, ptr %9, i64 0, i32 4
  br label %16

14:                                               ; preds = %8
  %15 = getelementptr inbounds %struct.tnode, ptr %9, i64 0, i32 3
  br label %16

16:                                               ; preds = %14, %12
  %17 = phi ptr [ %13, %12 ], [ %15, %14 ]
  %18 = load ptr, ptr %17, align 8, !tbaa !7
  br label %8

19:                                               ; preds = %8
  %.lcssa = phi ptr [ %9, %8 ]
  store ptr %.lcssa, ptr %1, align 8, !tbaa !7
  %20 = load i32, ptr %.lcssa, align 8, !tbaa !16
  store i32 %20, ptr %2, align 4, !tbaa !17
  %21 = getelementptr inbounds %struct.tnode, ptr %.lcssa, i64 0, i32 9
  %22 = load ptr, ptr %21, align 8, !tbaa !18
  %23 = load i32, ptr %22, align 8, !tbaa !19
  store i32 %23, ptr %3, align 4, !tbaa !17
  br label %24

24:                                               ; preds = %19, %7
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define dso_local ptr @tsearch(i32 noundef %0, ptr noundef readonly %1) #4 {
  %3 = getelementptr inbounds %struct.tnode, ptr %1, i64 0, i32 2
  %4 = load ptr, ptr %3, align 8, !tbaa !11
  %5 = getelementptr inbounds %struct.tnode, ptr %4, i64 0, i32 1
  %6 = load i32, ptr %5, align 4, !tbaa !21
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %36, label %8

8:                                                ; preds = %27, %2
  %9 = phi ptr [ %30, %27 ], [ %4, %2 ]
  %10 = phi ptr [ %28, %27 ], [ %1, %2 ]
  %11 = getelementptr inbounds %struct.tnode, ptr %10, i64 0, i32 7
  %12 = load i32, ptr %11, align 8, !tbaa !24
  %13 = icmp slt i32 %12, %0
  br i1 %13, label %14, label %27

14:                                               ; preds = %8
  %15 = getelementptr inbounds %struct.tnode, ptr %10, i64 0, i32 1
  %16 = load i32, ptr %15, align 4, !tbaa !21
  %17 = icmp eq i32 %16, 2
  br i1 %17, label %22, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.tnode, ptr %10, i64 0, i32 8
  %20 = load i32, ptr %19, align 4, !tbaa !25
  %21 = icmp slt i32 %20, %0
  br i1 %21, label %34, label %22

22:                                               ; preds = %18, %14
  %23 = getelementptr inbounds %struct.tnode, ptr %10, i64 0, i32 3
  br label %24

24:                                               ; preds = %34, %22
  %25 = phi ptr [ %23, %22 ], [ %35, %34 ]
  %26 = load ptr, ptr %25, align 8, !tbaa !7
  br label %27

27:                                               ; preds = %24, %8
  %28 = phi ptr [ %9, %8 ], [ %26, %24 ]
  %29 = getelementptr inbounds %struct.tnode, ptr %28, i64 0, i32 2
  %30 = load ptr, ptr %29, align 8, !tbaa !11
  %31 = getelementptr inbounds %struct.tnode, ptr %30, i64 0, i32 1
  %32 = load i32, ptr %31, align 4, !tbaa !21
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %36, label %8

34:                                               ; preds = %18
  %35 = getelementptr inbounds %struct.tnode, ptr %10, i64 0, i32 4
  br label %24

36:                                               ; preds = %27, %2
  %37 = phi ptr [ %1, %2 ], [ %28, %27 ]
  ret ptr %37
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @taddson(ptr nocapture noundef writeonly %0, ptr noundef %1) #5 {
  br label %3

3:                                                ; preds = %110, %2
  %4 = phi ptr [ %1, %2 ], [ %74, %110 ]
  %5 = tail call noalias dereferenceable_or_null(64) ptr @malloc(i64 noundef 64) #45
  %6 = getelementptr inbounds %struct.tnode, ptr %4, i64 0, i32 4
  %7 = load ptr, ptr %6, align 8, !tbaa !28
  %8 = getelementptr inbounds %struct.tnode, ptr %5, i64 0, i32 2
  store ptr %7, ptr %8, align 8, !tbaa !11
  %9 = getelementptr inbounds %struct.tnode, ptr %4, i64 0, i32 5
  %10 = load ptr, ptr %9, align 8, !tbaa !31
  %11 = getelementptr inbounds %struct.tnode, ptr %5, i64 0, i32 3
  store ptr %10, ptr %11, align 8, !tbaa !27
  %12 = getelementptr inbounds %struct.tnode, ptr %5, i64 0, i32 4
  %13 = getelementptr inbounds %struct.tnode, ptr %4, i64 0, i32 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %12, i8 0, i64 16, i1 false)
  %14 = load ptr, ptr %13, align 8, !tbaa !26
  %15 = getelementptr inbounds %struct.tnode, ptr %5, i64 0, i32 6
  store ptr %14, ptr %15, align 8, !tbaa !26
  %16 = getelementptr inbounds %struct.tnode, ptr %5, i64 0, i32 1
  store i32 2, ptr %16, align 4, !tbaa !21
  %17 = getelementptr inbounds %struct.tnode, ptr %4, i64 0, i32 1
  store i32 2, ptr %17, align 4, !tbaa !21
  %18 = getelementptr inbounds %struct.tnode, ptr %7, i64 0, i32 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %6, i8 0, i64 16, i1 false)
  store ptr %5, ptr %18, align 8, !tbaa !26
  %19 = getelementptr inbounds %struct.tnode, ptr %10, i64 0, i32 6
  store ptr %5, ptr %19, align 8, !tbaa !26
  %20 = getelementptr inbounds %struct.tnode, ptr %4, i64 0, i32 2
  br label %21

21:                                               ; preds = %26, %3
  %22 = phi ptr [ %20, %3 ], [ %27, %26 ]
  %23 = load ptr, ptr %22, align 8, !tbaa !7
  %24 = getelementptr inbounds %struct.tnode, ptr %23, i64 0, i32 1
  %25 = load i32, ptr %24, align 4, !tbaa !21
  switch i32 %25, label %28 [
    i32 3, label %26
    i32 0, label %30
  ]

26:                                               ; preds = %21
  %27 = getelementptr inbounds %struct.tnode, ptr %23, i64 0, i32 4
  br label %21, !llvm.loop !32

28:                                               ; preds = %21
  %.lcssa1 = phi ptr [ %23, %21 ]
  %29 = getelementptr inbounds %struct.tnode, ptr %.lcssa1, i64 0, i32 8
  br label %30

30:                                               ; preds = %28, %21
  %31 = phi ptr [ %29, %28 ], [ %23, %21 ]
  %32 = load i32, ptr %31, align 4, !tbaa !17
  %33 = getelementptr inbounds %struct.tnode, ptr %4, i64 0, i32 7
  store i32 %32, ptr %33, align 8, !tbaa !24
  %34 = getelementptr inbounds %struct.tnode, ptr %4, i64 0, i32 3
  br label %35

35:                                               ; preds = %40, %30
  %36 = phi ptr [ %34, %30 ], [ %41, %40 ]
  %37 = load ptr, ptr %36, align 8, !tbaa !7
  %38 = getelementptr inbounds %struct.tnode, ptr %37, i64 0, i32 1
  %39 = load i32, ptr %38, align 4, !tbaa !21
  switch i32 %39, label %42 [
    i32 3, label %40
    i32 0, label %44
  ]

40:                                               ; preds = %35
  %41 = getelementptr inbounds %struct.tnode, ptr %37, i64 0, i32 4
  br label %35, !llvm.loop !33

42:                                               ; preds = %35
  %.lcssa3 = phi ptr [ %37, %35 ]
  %43 = getelementptr inbounds %struct.tnode, ptr %.lcssa3, i64 0, i32 8
  br label %44

44:                                               ; preds = %42, %35
  %45 = phi ptr [ %43, %42 ], [ %37, %35 ]
  %46 = load i32, ptr %45, align 4, !tbaa !17
  %47 = getelementptr inbounds %struct.tnode, ptr %4, i64 0, i32 8
  store i32 %46, ptr %47, align 4, !tbaa !25
  br label %48

48:                                               ; preds = %53, %44
  %49 = phi ptr [ %8, %44 ], [ %54, %53 ]
  %50 = load ptr, ptr %49, align 8, !tbaa !7
  %51 = getelementptr inbounds %struct.tnode, ptr %50, i64 0, i32 1
  %52 = load i32, ptr %51, align 4, !tbaa !21
  switch i32 %52, label %55 [
    i32 3, label %53
    i32 0, label %57
  ]

53:                                               ; preds = %48
  %54 = getelementptr inbounds %struct.tnode, ptr %50, i64 0, i32 4
  br label %48, !llvm.loop !34

55:                                               ; preds = %48
  %.lcssa5 = phi ptr [ %50, %48 ]
  %56 = getelementptr inbounds %struct.tnode, ptr %.lcssa5, i64 0, i32 8
  br label %57

57:                                               ; preds = %55, %48
  %58 = phi ptr [ %56, %55 ], [ %50, %48 ]
  %59 = load i32, ptr %58, align 4, !tbaa !17
  %60 = getelementptr inbounds %struct.tnode, ptr %5, i64 0, i32 7
  store i32 %59, ptr %60, align 8, !tbaa !24
  br label %61

61:                                               ; preds = %66, %57
  %62 = phi ptr [ %11, %57 ], [ %67, %66 ]
  %63 = load ptr, ptr %62, align 8, !tbaa !7
  %64 = getelementptr inbounds %struct.tnode, ptr %63, i64 0, i32 1
  %65 = load i32, ptr %64, align 4, !tbaa !21
  switch i32 %65, label %68 [
    i32 3, label %66
    i32 0, label %70
  ]

66:                                               ; preds = %61
  %67 = getelementptr inbounds %struct.tnode, ptr %63, i64 0, i32 4
  br label %61, !llvm.loop !35

68:                                               ; preds = %61
  %.lcssa7 = phi ptr [ %63, %61 ]
  %69 = getelementptr inbounds %struct.tnode, ptr %.lcssa7, i64 0, i32 8
  br label %70

70:                                               ; preds = %68, %61
  %71 = phi ptr [ %69, %68 ], [ %63, %61 ]
  %72 = load i32, ptr %71, align 4, !tbaa !17
  %73 = getelementptr inbounds %struct.tnode, ptr %5, i64 0, i32 8
  store i32 %72, ptr %73, align 4, !tbaa !25
  %74 = load ptr, ptr %13, align 8, !tbaa !26
  %75 = icmp eq ptr %74, null
  br i1 %75, label %76, label %87

76:                                               ; preds = %70
  %.lcssa17 = phi i32 [ %72, %70 ]
  %.lcssa13 = phi ptr [ %4, %70 ]
  %.lcssa11 = phi ptr [ %5, %70 ]
  %.lcssa9 = phi ptr [ %13, %70 ]
  %77 = getelementptr inbounds %struct.tnode, ptr %.lcssa11, i64 0, i32 6
  %78 = tail call noalias dereferenceable_or_null(64) ptr @malloc(i64 noundef 64) #45
  %79 = getelementptr inbounds %struct.tnode, ptr %78, i64 0, i32 2
  store ptr %.lcssa13, ptr %79, align 8, !tbaa !11
  %80 = getelementptr inbounds %struct.tnode, ptr %78, i64 0, i32 3
  store ptr %.lcssa11, ptr %80, align 8, !tbaa !27
  %81 = getelementptr inbounds %struct.tnode, ptr %78, i64 0, i32 4
  %82 = getelementptr inbounds %struct.tnode, ptr %78, i64 0, i32 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %81, i8 0, i64 24, i1 false)
  store i32 2, ptr %82, align 4, !tbaa !21
  store ptr %78, ptr %.lcssa9, align 8, !tbaa !26
  store ptr %78, ptr %77, align 8, !tbaa !26
  %83 = getelementptr inbounds %struct.tnode, ptr %.lcssa13, i64 0, i32 8
  %84 = load i32, ptr %83, align 4, !tbaa !25
  %85 = getelementptr inbounds %struct.tnode, ptr %78, i64 0, i32 7
  store i32 %84, ptr %85, align 8, !tbaa !24
  %86 = getelementptr inbounds %struct.tnode, ptr %78, i64 0, i32 8
  store i32 %.lcssa17, ptr %86, align 4, !tbaa !25
  store ptr %78, ptr %0, align 8, !tbaa !7
  br label %152

87:                                               ; preds = %70
  %88 = getelementptr inbounds %struct.tnode, ptr %74, i64 0, i32 1
  %89 = load i32, ptr %88, align 4, !tbaa !21
  %90 = add nsw i32 %89, 1
  store i32 %90, ptr %88, align 4, !tbaa !21
  %91 = icmp eq i32 %90, 4
  %92 = getelementptr inbounds %struct.tnode, ptr %74, i64 0, i32 2
  %93 = load ptr, ptr %92, align 8, !tbaa !11
  %94 = icmp eq ptr %93, %4
  br i1 %91, label %95, label %112

95:                                               ; preds = %87
  br i1 %94, label %96, label %100

96:                                               ; preds = %95
  %97 = getelementptr inbounds %struct.tnode, ptr %74, i64 0, i32 4
  %98 = getelementptr inbounds %struct.tnode, ptr %74, i64 0, i32 3
  %99 = load <2 x ptr>, ptr %98, align 8, !tbaa !7
  store <2 x ptr> %99, ptr %97, align 8, !tbaa !7
  br label %110

100:                                              ; preds = %95
  %101 = getelementptr inbounds %struct.tnode, ptr %74, i64 0, i32 3
  %102 = load ptr, ptr %101, align 8, !tbaa !27
  %103 = icmp eq ptr %102, %4
  br i1 %103, label %104, label %108

104:                                              ; preds = %100
  %105 = getelementptr inbounds %struct.tnode, ptr %74, i64 0, i32 4
  %106 = load ptr, ptr %105, align 8, !tbaa !28
  %107 = getelementptr inbounds %struct.tnode, ptr %74, i64 0, i32 5
  store ptr %106, ptr %107, align 8, !tbaa !31
  br label %110

108:                                              ; preds = %100
  %109 = getelementptr inbounds %struct.tnode, ptr %74, i64 0, i32 5
  br label %110

110:                                              ; preds = %108, %104, %96
  %111 = phi ptr [ %105, %104 ], [ %109, %108 ], [ %98, %96 ]
  store ptr %5, ptr %111, align 8, !tbaa !7
  br label %3

112:                                              ; preds = %87
  %.lcssa19 = phi i1 [ %94, %87 ]
  %.lcssa18 = phi i32 [ %72, %87 ]
  %.lcssa16 = phi ptr [ %74, %87 ]
  %.lcssa14 = phi ptr [ %4, %87 ]
  %.lcssa12 = phi ptr [ %5, %87 ]
  br i1 %.lcssa19, label %113, label %121

113:                                              ; preds = %112
  %114 = getelementptr inbounds %struct.tnode, ptr %.lcssa16, i64 0, i32 3
  %115 = load ptr, ptr %114, align 8, !tbaa !27
  %116 = getelementptr inbounds %struct.tnode, ptr %.lcssa16, i64 0, i32 4
  store ptr %115, ptr %116, align 8, !tbaa !28
  store ptr %.lcssa12, ptr %114, align 8, !tbaa !27
  %117 = getelementptr inbounds %struct.tnode, ptr %.lcssa14, i64 0, i32 8
  %118 = load i32, ptr %117, align 4, !tbaa !25
  %119 = getelementptr inbounds %struct.tnode, ptr %.lcssa16, i64 0, i32 7
  store i32 %118, ptr %119, align 8, !tbaa !24
  %120 = getelementptr inbounds %struct.tnode, ptr %.lcssa16, i64 0, i32 8
  store i32 %.lcssa18, ptr %120, align 4, !tbaa !25
  br label %152

121:                                              ; preds = %112
  %122 = getelementptr inbounds %struct.tnode, ptr %.lcssa16, i64 0, i32 4
  store ptr %.lcssa12, ptr %122, align 8, !tbaa !28
  %123 = getelementptr inbounds %struct.tnode, ptr %.lcssa14, i64 0, i32 8
  %124 = load i32, ptr %123, align 4, !tbaa !25
  %125 = getelementptr inbounds %struct.tnode, ptr %.lcssa16, i64 0, i32 8
  store i32 %124, ptr %125, align 4, !tbaa !25
  %126 = getelementptr inbounds %struct.tnode, ptr %.lcssa12, i64 0, i32 8
  %127 = load i32, ptr %126, align 4, !tbaa !25
  %128 = getelementptr inbounds %struct.tnode, ptr %.lcssa16, i64 0, i32 6
  %129 = load ptr, ptr %128, align 8, !tbaa !26
  %130 = icmp eq ptr %129, null
  br i1 %130, label %152, label %131

131:                                              ; preds = %148, %121
  %132 = phi ptr [ %150, %148 ], [ %129, %121 ]
  %133 = phi ptr [ %132, %148 ], [ %.lcssa16, %121 ]
  %134 = getelementptr inbounds %struct.tnode, ptr %132, i64 0, i32 2
  %135 = load ptr, ptr %134, align 8, !tbaa !11
  %136 = icmp eq ptr %135, %133
  br i1 %136, label %137, label %139

137:                                              ; preds = %131
  %.lcssa = phi ptr [ %132, %131 ]
  %138 = getelementptr inbounds %struct.tnode, ptr %.lcssa, i64 0, i32 7
  store i32 %127, ptr %138, align 8, !tbaa !24
  br label %152

139:                                              ; preds = %131
  %140 = getelementptr inbounds %struct.tnode, ptr %132, i64 0, i32 3
  %141 = load ptr, ptr %140, align 8, !tbaa !27
  %142 = icmp eq ptr %141, %133
  br i1 %142, label %143, label %148

143:                                              ; preds = %139
  %144 = getelementptr inbounds %struct.tnode, ptr %132, i64 0, i32 8
  store i32 %127, ptr %144, align 4, !tbaa !25
  %145 = getelementptr inbounds %struct.tnode, ptr %132, i64 0, i32 4
  %146 = load ptr, ptr %145, align 8, !tbaa !28
  %147 = icmp eq ptr %146, null
  br i1 %147, label %148, label %152

148:                                              ; preds = %143, %139
  %149 = getelementptr inbounds %struct.tnode, ptr %132, i64 0, i32 6
  %150 = load ptr, ptr %149, align 8, !tbaa !26
  %151 = icmp eq ptr %150, null
  br i1 %151, label %152, label %131

152:                                              ; preds = %148, %143, %137, %121, %113, %76
  ret void
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #6

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #7

; Function Attrs: nofree nounwind optsize uwtable
define internal void @tinsert(ptr nocapture noundef %0, i32 noundef %1, i32 noundef %2) #5 {
  %4 = load ptr, ptr %0, align 8, !tbaa !7
  %5 = icmp eq ptr %4, null
  br i1 %5, label %6, label %14

6:                                                ; preds = %3
  %7 = tail call noalias dereferenceable_or_null(64) ptr @malloc(i64 noundef 64) #45
  %8 = getelementptr inbounds %struct.tnode, ptr %7, i64 0, i32 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %8, i8 0, i64 32, i1 false)
  store i32 %1, ptr %7, align 8, !tbaa !16
  %9 = getelementptr inbounds %struct.tnode, ptr %7, i64 0, i32 1
  store i32 0, ptr %9, align 4, !tbaa !21
  %10 = tail call noalias dereferenceable_or_null(16) ptr @malloc(i64 noundef 16) #45
  %11 = getelementptr inbounds %struct.tnode, ptr %7, i64 0, i32 9
  store ptr %10, ptr %11, align 8, !tbaa !18
  store i32 %2, ptr %10, align 8, !tbaa !19
  %12 = getelementptr inbounds %struct.plist, ptr %10, i64 0, i32 1
  store ptr null, ptr %12, align 8, !tbaa !23
  %13 = getelementptr inbounds %struct.tnode, ptr %7, i64 0, i32 6
  store ptr null, ptr %13, align 8, !tbaa !26
  store ptr %7, ptr %0, align 8, !tbaa !7
  br label %124

14:                                               ; preds = %3
  %15 = getelementptr inbounds %struct.tnode, ptr %4, i64 0, i32 1
  %16 = load i32, ptr %15, align 4, !tbaa !21
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %50

18:                                               ; preds = %14
  %19 = load i32, ptr %4, align 8, !tbaa !16
  %20 = icmp eq i32 %19, %1
  br i1 %20, label %21, label %26

21:                                               ; preds = %18
  %22 = tail call noalias dereferenceable_or_null(16) ptr @malloc(i64 noundef 16) #45
  %23 = getelementptr inbounds %struct.tnode, ptr %4, i64 0, i32 9
  %24 = load ptr, ptr %23, align 8, !tbaa !18
  %25 = getelementptr inbounds %struct.plist, ptr %22, i64 0, i32 1
  store ptr %24, ptr %25, align 8, !tbaa !23
  store ptr %22, ptr %23, align 8, !tbaa !18
  store i32 %2, ptr %22, align 8, !tbaa !19
  br label %124

26:                                               ; preds = %18
  %27 = tail call noalias dereferenceable_or_null(64) ptr @malloc(i64 noundef 64) #45
  %28 = getelementptr inbounds %struct.tnode, ptr %27, i64 0, i32 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %28, i8 0, i64 32, i1 false)
  store i32 %1, ptr %27, align 8, !tbaa !16
  %29 = getelementptr inbounds %struct.tnode, ptr %27, i64 0, i32 1
  store i32 0, ptr %29, align 4, !tbaa !21
  %30 = tail call noalias dereferenceable_or_null(16) ptr @malloc(i64 noundef 16) #45
  %31 = getelementptr inbounds %struct.tnode, ptr %27, i64 0, i32 9
  store ptr %30, ptr %31, align 8, !tbaa !18
  store i32 %2, ptr %30, align 8, !tbaa !19
  %32 = getelementptr inbounds %struct.plist, ptr %30, i64 0, i32 1
  store ptr null, ptr %32, align 8, !tbaa !23
  %33 = tail call noalias dereferenceable_or_null(64) ptr @malloc(i64 noundef 64) #45
  %34 = load i32, ptr %4, align 8, !tbaa !16
  %35 = icmp slt i32 %34, %1
  br i1 %35, label %36, label %37

36:                                               ; preds = %26
  br label %37

37:                                               ; preds = %36, %26
  %38 = phi i32 [ %1, %36 ], [ %34, %26 ]
  %39 = phi i32 [ %34, %36 ], [ %1, %26 ]
  %40 = phi ptr [ %4, %36 ], [ %27, %26 ]
  %41 = phi ptr [ %27, %36 ], [ %4, %26 ]
  %42 = getelementptr inbounds %struct.tnode, ptr %33, i64 0, i32 8
  store i32 %38, ptr %42, align 4
  %43 = getelementptr inbounds %struct.tnode, ptr %33, i64 0, i32 7
  store i32 %39, ptr %43, align 8
  %44 = getelementptr inbounds %struct.tnode, ptr %33, i64 0, i32 2
  store ptr %40, ptr %44, align 8
  %45 = getelementptr inbounds %struct.tnode, ptr %33, i64 0, i32 3
  store ptr %41, ptr %45, align 8
  %46 = getelementptr inbounds %struct.tnode, ptr %33, i64 0, i32 4
  %47 = getelementptr inbounds %struct.tnode, ptr %33, i64 0, i32 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %46, i8 0, i64 24, i1 false)
  store i32 2, ptr %47, align 4, !tbaa !21
  %48 = getelementptr inbounds %struct.tnode, ptr %4, i64 0, i32 6
  store ptr %33, ptr %48, align 8, !tbaa !26
  %49 = getelementptr inbounds %struct.tnode, ptr %27, i64 0, i32 6
  store ptr %33, ptr %49, align 8, !tbaa !26
  store ptr %33, ptr %0, align 8, !tbaa !7
  br label %124

50:                                               ; preds = %14
  %51 = tail call ptr @tsearch(i32 noundef %1, ptr noundef nonnull %4) #43
  %52 = getelementptr inbounds %struct.tnode, ptr %51, i64 0, i32 2
  %53 = load ptr, ptr %52, align 8, !tbaa !11
  %54 = load i32, ptr %53, align 8, !tbaa !16
  %55 = icmp eq i32 %54, %1
  br i1 %55, label %70, label %56

56:                                               ; preds = %50
  %57 = getelementptr inbounds %struct.tnode, ptr %51, i64 0, i32 3
  %58 = load ptr, ptr %57, align 8, !tbaa !27
  %59 = load i32, ptr %58, align 8, !tbaa !16
  %60 = icmp eq i32 %59, %1
  br i1 %60, label %70, label %61

61:                                               ; preds = %56
  %62 = getelementptr inbounds %struct.tnode, ptr %51, i64 0, i32 1
  %63 = load i32, ptr %62, align 4, !tbaa !21
  %64 = icmp eq i32 %63, 3
  br i1 %64, label %65, label %76

65:                                               ; preds = %61
  %66 = getelementptr inbounds %struct.tnode, ptr %51, i64 0, i32 4
  %67 = load ptr, ptr %66, align 8, !tbaa !28
  %68 = load i32, ptr %67, align 8, !tbaa !16
  %69 = icmp eq i32 %68, %1
  br i1 %69, label %70, label %76

70:                                               ; preds = %65, %56, %50
  %71 = phi ptr [ %67, %65 ], [ %58, %56 ], [ %53, %50 ]
  %72 = tail call noalias dereferenceable_or_null(16) ptr @malloc(i64 noundef 16) #45
  %73 = getelementptr inbounds %struct.tnode, ptr %71, i64 0, i32 9
  %74 = load ptr, ptr %73, align 8, !tbaa !18
  %75 = getelementptr inbounds %struct.plist, ptr %72, i64 0, i32 1
  store ptr %74, ptr %75, align 8, !tbaa !23
  store ptr %72, ptr %73, align 8, !tbaa !18
  store i32 %2, ptr %72, align 8, !tbaa !19
  br label %124

76:                                               ; preds = %65, %61
  %77 = tail call noalias dereferenceable_or_null(64) ptr @malloc(i64 noundef 64) #45
  %78 = getelementptr inbounds %struct.tnode, ptr %77, i64 0, i32 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %78, i8 0, i64 32, i1 false)
  store i32 %1, ptr %77, align 8, !tbaa !16
  %79 = getelementptr inbounds %struct.tnode, ptr %77, i64 0, i32 1
  store i32 0, ptr %79, align 4, !tbaa !21
  %80 = tail call noalias dereferenceable_or_null(16) ptr @malloc(i64 noundef 16) #45
  %81 = getelementptr inbounds %struct.tnode, ptr %77, i64 0, i32 9
  store ptr %80, ptr %81, align 8, !tbaa !18
  store i32 %2, ptr %80, align 8, !tbaa !19
  %82 = getelementptr inbounds %struct.plist, ptr %80, i64 0, i32 1
  store ptr null, ptr %82, align 8, !tbaa !23
  %83 = load i32, ptr %62, align 4, !tbaa !21
  %84 = icmp eq i32 %83, 2
  %85 = load ptr, ptr %52, align 8, !tbaa !11
  %86 = load i32, ptr %85, align 8, !tbaa !16
  %87 = icmp slt i32 %86, %1
  br i1 %84, label %88, label %104

88:                                               ; preds = %76
  %89 = load ptr, ptr %57, align 8, !tbaa !27
  br i1 %87, label %95, label %90

90:                                               ; preds = %88
  %91 = getelementptr inbounds %struct.tnode, ptr %51, i64 0, i32 4
  store ptr %89, ptr %91, align 8, !tbaa !28
  store ptr %85, ptr %57, align 8, !tbaa !27
  store ptr %77, ptr %52, align 8, !tbaa !11
  %92 = getelementptr inbounds %struct.tnode, ptr %51, i64 0, i32 7
  %93 = load i32, ptr %92, align 8, !tbaa !24
  %94 = getelementptr inbounds %struct.tnode, ptr %51, i64 0, i32 8
  store i32 %93, ptr %94, align 4, !tbaa !25
  store i32 %1, ptr %92, align 8, !tbaa !24
  br label %102

95:                                               ; preds = %88
  %96 = load i32, ptr %89, align 8, !tbaa !16
  %97 = icmp slt i32 %96, %1
  %98 = getelementptr inbounds %struct.tnode, ptr %51, i64 0, i32 4
  br i1 %97, label %101, label %99

99:                                               ; preds = %95
  store ptr %89, ptr %98, align 8, !tbaa !28
  store ptr %77, ptr %57, align 8, !tbaa !27
  %100 = getelementptr inbounds %struct.tnode, ptr %51, i64 0, i32 8
  store i32 %1, ptr %100, align 4, !tbaa !25
  br label %102

101:                                              ; preds = %95
  store ptr %77, ptr %98, align 8, !tbaa !28
  tail call void @tpatch(ptr noundef nonnull %51, i32 noundef %1) #43
  br label %102

102:                                              ; preds = %101, %99, %90
  store i32 3, ptr %62, align 4, !tbaa !21
  %103 = getelementptr inbounds %struct.tnode, ptr %77, i64 0, i32 6
  store ptr %51, ptr %103, align 8, !tbaa !26
  br label %124

104:                                              ; preds = %76
  br i1 %87, label %108, label %105

105:                                              ; preds = %104
  %106 = getelementptr inbounds %struct.tnode, ptr %51, i64 0, i32 4
  %107 = load <2 x ptr>, ptr %57, align 8, !tbaa !7
  store <2 x ptr> %107, ptr %106, align 8, !tbaa !7
  store ptr %85, ptr %57, align 8, !tbaa !27
  br label %121

108:                                              ; preds = %104
  %109 = load ptr, ptr %57, align 8, !tbaa !27
  %110 = load i32, ptr %109, align 8, !tbaa !16
  %111 = icmp slt i32 %110, %1
  %112 = getelementptr inbounds %struct.tnode, ptr %51, i64 0, i32 4
  %113 = load ptr, ptr %112, align 8, !tbaa !28
  br i1 %111, label %116, label %114

114:                                              ; preds = %108
  %115 = getelementptr inbounds %struct.tnode, ptr %51, i64 0, i32 5
  store ptr %113, ptr %115, align 8, !tbaa !31
  store ptr %109, ptr %112, align 8, !tbaa !28
  br label %121

116:                                              ; preds = %108
  %117 = load i32, ptr %113, align 8, !tbaa !16
  %118 = icmp slt i32 %117, %1
  %119 = getelementptr inbounds %struct.tnode, ptr %51, i64 0, i32 5
  br i1 %118, label %121, label %120

120:                                              ; preds = %116
  store ptr %113, ptr %119, align 8, !tbaa !31
  br label %121

121:                                              ; preds = %120, %116, %114, %105
  %122 = phi ptr [ %57, %114 ], [ %112, %120 ], [ %52, %105 ], [ %119, %116 ]
  store ptr %77, ptr %122, align 8, !tbaa !7
  %123 = getelementptr inbounds %struct.tnode, ptr %77, i64 0, i32 6
  store ptr %51, ptr %123, align 8, !tbaa !26
  tail call void @taddson(ptr noundef nonnull %0, ptr noundef nonnull %51) #43
  br label %124

124:                                              ; preds = %121, %102, %70, %37, %21, %6
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, inaccessiblemem: none) uwtable
define dso_local ptr @tfind(i32 noundef %0, ptr nocapture noundef readonly %1) #8 {
  %3 = getelementptr inbounds %struct.tnode, ptr %1, i64 0, i32 2
  %4 = load ptr, ptr %3, align 8, !tbaa !11
  %5 = load i32, ptr %4, align 8, !tbaa !16
  %6 = icmp eq i32 %5, %0
  br i1 %6, label %22, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.tnode, ptr %1, i64 0, i32 3
  %9 = load ptr, ptr %8, align 8, !tbaa !27
  %10 = load i32, ptr %9, align 8, !tbaa !16
  %11 = icmp eq i32 %10, %0
  br i1 %11, label %22, label %12

12:                                               ; preds = %7
  %13 = getelementptr inbounds %struct.tnode, ptr %1, i64 0, i32 1
  %14 = load i32, ptr %13, align 4, !tbaa !21
  %15 = icmp eq i32 %14, 3
  br i1 %15, label %16, label %21

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.tnode, ptr %1, i64 0, i32 4
  %18 = load ptr, ptr %17, align 8, !tbaa !28
  %19 = load i32, ptr %18, align 8, !tbaa !16
  %20 = icmp eq i32 %19, %0
  br i1 %20, label %22, label %21

21:                                               ; preds = %16, %12
  br label %22

22:                                               ; preds = %21, %16, %7, %2
  %23 = phi ptr [ null, %21 ], [ %4, %2 ], [ %9, %7 ], [ %18, %16 ]
  ret ptr %23
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @tprop(ptr noundef readonly %0, i32 noundef %1) #4 {
  %3 = icmp eq ptr %0, null
  br i1 %3, label %38, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.tnode, ptr %0, i64 0, i32 1
  %6 = load i32, ptr %5, align 4, !tbaa !21
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %4
  %9 = load i32, ptr %0, align 8, !tbaa !16
  %10 = icmp eq i32 %9, %1
  br i1 %10, label %33, label %38

11:                                               ; preds = %4
  %12 = tail call ptr @tsearch(i32 noundef %1, ptr noundef nonnull %0) #43
  %13 = icmp eq ptr %12, null
  br i1 %13, label %38, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds %struct.tnode, ptr %12, i64 0, i32 2
  %16 = load ptr, ptr %15, align 8, !tbaa !11
  %17 = load i32, ptr %16, align 8, !tbaa !16
  %18 = icmp eq i32 %17, %1
  br i1 %18, label %33, label %19

19:                                               ; preds = %14
  %20 = getelementptr inbounds %struct.tnode, ptr %12, i64 0, i32 3
  %21 = load ptr, ptr %20, align 8, !tbaa !27
  %22 = load i32, ptr %21, align 8, !tbaa !16
  %23 = icmp eq i32 %22, %1
  br i1 %23, label %33, label %24

24:                                               ; preds = %19
  %25 = getelementptr inbounds %struct.tnode, ptr %12, i64 0, i32 1
  %26 = load i32, ptr %25, align 4, !tbaa !21
  %27 = icmp eq i32 %26, 3
  br i1 %27, label %28, label %38

28:                                               ; preds = %24
  %29 = getelementptr inbounds %struct.tnode, ptr %12, i64 0, i32 4
  %30 = load ptr, ptr %29, align 8, !tbaa !28
  %31 = load i32, ptr %30, align 8, !tbaa !16
  %32 = icmp eq i32 %31, %1
  br i1 %32, label %33, label %38

33:                                               ; preds = %28, %19, %14, %8
  %34 = phi ptr [ %0, %8 ], [ %30, %28 ], [ %21, %19 ], [ %16, %14 ]
  %35 = getelementptr inbounds %struct.tnode, ptr %34, i64 0, i32 9
  %36 = load ptr, ptr %35, align 8, !tbaa !18
  %37 = load i32, ptr %36, align 8, !tbaa !19
  br label %38

38:                                               ; preds = %33, %28, %24, %11, %8, %2
  %39 = phi i32 [ -1, %2 ], [ -1, %8 ], [ -1, %11 ], [ -1, %24 ], [ -1, %28 ], [ %37, %33 ]
  ret i32 %39
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal ptr @tplist(ptr noundef readonly %0, i32 noundef %1) #4 {
  %3 = icmp eq ptr %0, null
  br i1 %3, label %37, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.tnode, ptr %0, i64 0, i32 1
  %6 = load i32, ptr %5, align 4, !tbaa !21
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %4
  %9 = load i32, ptr %0, align 8, !tbaa !16
  %10 = icmp eq i32 %9, %1
  br i1 %10, label %33, label %37

11:                                               ; preds = %4
  %12 = tail call ptr @tsearch(i32 noundef %1, ptr noundef nonnull %0) #43
  %13 = icmp eq ptr %12, null
  br i1 %13, label %37, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds %struct.tnode, ptr %12, i64 0, i32 2
  %16 = load ptr, ptr %15, align 8, !tbaa !11
  %17 = load i32, ptr %16, align 8, !tbaa !16
  %18 = icmp eq i32 %17, %1
  br i1 %18, label %33, label %19

19:                                               ; preds = %14
  %20 = getelementptr inbounds %struct.tnode, ptr %12, i64 0, i32 3
  %21 = load ptr, ptr %20, align 8, !tbaa !27
  %22 = load i32, ptr %21, align 8, !tbaa !16
  %23 = icmp eq i32 %22, %1
  br i1 %23, label %33, label %24

24:                                               ; preds = %19
  %25 = getelementptr inbounds %struct.tnode, ptr %12, i64 0, i32 1
  %26 = load i32, ptr %25, align 4, !tbaa !21
  %27 = icmp eq i32 %26, 3
  br i1 %27, label %28, label %37

28:                                               ; preds = %24
  %29 = getelementptr inbounds %struct.tnode, ptr %12, i64 0, i32 4
  %30 = load ptr, ptr %29, align 8, !tbaa !28
  %31 = load i32, ptr %30, align 8, !tbaa !16
  %32 = icmp eq i32 %31, %1
  br i1 %32, label %33, label %37

33:                                               ; preds = %28, %19, %14, %8
  %34 = phi ptr [ %0, %8 ], [ %30, %28 ], [ %21, %19 ], [ %16, %14 ]
  %35 = getelementptr inbounds %struct.tnode, ptr %34, i64 0, i32 9
  %36 = load ptr, ptr %35, align 8, !tbaa !18
  br label %37

37:                                               ; preds = %33, %28, %24, %11, %8, %2
  %38 = phi ptr [ null, %2 ], [ null, %8 ], [ null, %11 ], [ null, %24 ], [ null, %28 ], [ %36, %33 ]
  ret ptr %38
}

; Function Attrs: nounwind optsize uwtable
define internal void @addpins() #0 {
  %1 = load i32, ptr @numcells, align 4, !tbaa !17
  %2 = load ptr, ptr @netarray, align 8, !tbaa !7
  %3 = load i32, ptr @numnets, align 4, !tbaa !17
  %4 = add i32 %1, 1
  %5 = add i32 %4, %3
  %6 = sext i32 %5 to i64
  %7 = shl nsw i64 %6, 3
  %8 = tail call ptr @realloc(ptr noundef %2, i64 noundef %7) #46
  store ptr %8, ptr @netarray, align 8, !tbaa !7
  %9 = icmp sgt i32 %1, 0
  br i1 %9, label %10, label %27

10:                                               ; preds = %0
  %11 = load i32, ptr @numnets, align 4, !tbaa !17
  %12 = add nsw i32 %11, %1
  %13 = load double, ptr @Hdefault, align 8, !tbaa !36
  %14 = load double, ptr @Vdefault, align 8, !tbaa !36
  %15 = sext i32 %11 to i64
  %16 = sext i32 %12 to i64
  br label %17

17:                                               ; preds = %17, %10
  %18 = phi i64 [ %15, %10 ], [ %19, %17 ]
  %19 = add nsw i64 %18, 1
  %20 = tail call noalias dereferenceable_or_null(72) ptr @malloc(i64 noundef 72) #45
  %21 = load ptr, ptr @netarray, align 8, !tbaa !7
  %22 = getelementptr inbounds ptr, ptr %21, i64 %19
  store ptr %20, ptr %22, align 8, !tbaa !7
  %23 = getelementptr inbounds %struct.dimbox, ptr %20, i64 0, i32 13
  store ptr null, ptr %23, align 8, !tbaa !38
  %24 = getelementptr inbounds %struct.dimbox, ptr %20, i64 0, i32 11
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(48) %20, i8 0, i64 48, i1 false)
  store double %13, ptr %24, align 8, !tbaa !40
  %25 = getelementptr inbounds %struct.dimbox, ptr %20, i64 0, i32 12
  store double %14, ptr %25, align 8, !tbaa !41
  %26 = icmp slt i64 %19, %16
  br i1 %26, label %17, label %27, !llvm.loop !42

27:                                               ; preds = %17, %0
  %28 = load ptr, ptr @pinnames, align 8, !tbaa !7
  %29 = load i32, ptr @maxterm, align 4, !tbaa !17
  %30 = shl nsw i32 %1, 1
  %31 = or i32 %30, 1
  %32 = add i32 %31, %29
  %33 = sext i32 %32 to i64
  %34 = shl nsw i64 %33, 3
  %35 = tail call ptr @realloc(ptr noundef %28, i64 noundef %34) #46
  store ptr %35, ptr @pinnames, align 8, !tbaa !7
  %36 = load i32, ptr @maxterm, align 4, !tbaa !17
  br i1 %9, label %37, label %63

37:                                               ; preds = %27
  %38 = sext i32 %36 to i64
  br label %39

39:                                               ; preds = %39, %37
  %40 = phi i64 [ %38, %37 ], [ %41, %39 ]
  %41 = add nsw i64 %40, 1
  %42 = tail call noalias dereferenceable_or_null(9) ptr @malloc(i64 noundef 9) #45
  %43 = load ptr, ptr @pinnames, align 8, !tbaa !7
  %44 = getelementptr inbounds ptr, ptr %43, i64 %41
  store ptr %42, ptr %44, align 8, !tbaa !7
  %45 = load ptr, ptr @pinnames, align 8, !tbaa !7
  %46 = getelementptr inbounds ptr, ptr %45, i64 %41
  %47 = load ptr, ptr %46, align 8, !tbaa !7
  store i64 21760796715468880, ptr %47, align 1
  %48 = load i32, ptr @maxterm, align 4, !tbaa !17
  %49 = add nsw i32 %48, %30
  %50 = sext i32 %49 to i64
  %51 = icmp slt i64 %41, %50
  br i1 %51, label %39, label %52, !llvm.loop !43

52:                                               ; preds = %39
  %.lcssa = phi i32 [ %49, %39 ]
  %53 = load ptr, ptr @termarray, align 8, !tbaa !7
  %54 = add nsw i32 %.lcssa, 1
  %55 = sext i32 %54 to i64
  %56 = shl nsw i64 %55, 3
  %57 = tail call ptr @realloc(ptr noundef %53, i64 noundef %56) #46
  store ptr %57, ptr @termarray, align 8, !tbaa !7
  br i1 %9, label %58, label %70

58:                                               ; preds = %52
  %59 = load i32, ptr @maxterm, align 4, !tbaa !17
  %60 = add nsw i32 %59, %30
  %61 = sext i32 %59 to i64
  %62 = sext i32 %60 to i64
  br label %73

63:                                               ; preds = %27
  %64 = add nsw i32 %36, %30
  %65 = load ptr, ptr @termarray, align 8, !tbaa !7
  %66 = add nsw i32 %64, 1
  %67 = sext i32 %66 to i64
  %68 = shl nsw i64 %67, 3
  %69 = tail call ptr @realloc(ptr noundef %65, i64 noundef %68) #46
  store ptr %69, ptr @termarray, align 8, !tbaa !7
  br label %70

70:                                               ; preds = %73, %63, %52
  %71 = load i32, ptr @numcells, align 4, !tbaa !17
  %72 = icmp slt i32 %71, 1
  br i1 %72, label %149, label %80

73:                                               ; preds = %73, %58
  %74 = phi i64 [ %61, %58 ], [ %75, %73 ]
  %75 = add nsw i64 %74, 1
  %76 = tail call noalias dereferenceable_or_null(16) ptr @malloc(i64 noundef 16) #45
  %77 = load ptr, ptr @termarray, align 8, !tbaa !7
  %78 = getelementptr inbounds ptr, ptr %77, i64 %75
  store ptr %76, ptr %78, align 8, !tbaa !7
  %79 = icmp slt i64 %75, %62
  br i1 %79, label %73, label %70, !llvm.loop !44

80:                                               ; preds = %80, %70
  %81 = phi i64 [ %145, %80 ], [ 1, %70 ]
  %82 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %83 = getelementptr inbounds ptr, ptr %82, i64 %81
  %84 = load ptr, ptr %83, align 8, !tbaa !7
  %85 = getelementptr inbounds %struct.cellbox, ptr %84, i64 0, i32 5
  %86 = load i32, ptr %85, align 8, !tbaa !45
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds %struct.cellbox, ptr %84, i64 0, i32 21, i64 %87
  %89 = load ptr, ptr %88, align 8, !tbaa !7
  %90 = getelementptr inbounds %struct.tilebox, ptr %89, i64 0, i32 17
  %91 = load ptr, ptr %90, align 8, !tbaa !47
  %92 = tail call noalias dereferenceable_or_null(32) ptr @malloc(i64 noundef 32) #45
  store ptr %92, ptr %90, align 8, !tbaa !47
  store ptr %91, ptr %92, align 8, !tbaa !49
  %93 = getelementptr inbounds %struct.termbox, ptr %92, i64 0, i32 1
  store i32 0, ptr %93, align 8, !tbaa !51
  %94 = getelementptr inbounds %struct.termbox, ptr %92, i64 0, i32 2
  store i32 0, ptr %94, align 4, !tbaa !52
  %95 = load i32, ptr @maxterm, align 4, !tbaa !17
  %96 = shl nuw nsw i64 %81, 1
  %97 = trunc i64 %96 to i32
  %98 = add i32 %97, -1
  %99 = add i32 %98, %95
  %100 = getelementptr inbounds %struct.termbox, ptr %92, i64 0, i32 5
  store i32 %99, ptr %100, align 8, !tbaa !53
  %101 = tail call noalias dereferenceable_or_null(48) ptr @malloc(i64 noundef 48) #45
  %102 = load ptr, ptr @netarray, align 8, !tbaa !7
  %103 = load i32, ptr @numnets, align 4, !tbaa !17
  %104 = trunc i64 %81 to i32
  %105 = add nsw i32 %103, %104
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds ptr, ptr %102, i64 %106
  %108 = load ptr, ptr %107, align 8, !tbaa !7
  store ptr %101, ptr %108, align 8, !tbaa !54
  %109 = getelementptr inbounds %struct.netbox, ptr %101, i64 0, i32 5
  store i32 %99, ptr %109, align 8, !tbaa !55
  %110 = getelementptr inbounds %struct.netbox, ptr %101, i64 0, i32 7
  store i32 %104, ptr %110, align 8, !tbaa !57
  %111 = getelementptr inbounds %struct.netbox, ptr %101, i64 0, i32 6
  store i32 0, ptr %111, align 4, !tbaa !58
  %112 = getelementptr inbounds %struct.netbox, ptr %101, i64 0, i32 9
  store i32 0, ptr %112, align 8, !tbaa !59
  %113 = getelementptr inbounds %struct.cellbox, ptr %84, i64 0, i32 2
  %114 = getelementptr inbounds %struct.netbox, ptr %101, i64 0, i32 1
  %115 = load <2 x i32>, ptr %113, align 4, !tbaa !17
  store <2 x i32> %115, ptr %114, align 8, !tbaa !17
  %116 = load ptr, ptr @termarray, align 8, !tbaa !7
  %117 = sext i32 %99 to i64
  %118 = getelementptr inbounds ptr, ptr %116, i64 %117
  %119 = load ptr, ptr %118, align 8, !tbaa !7
  store i32 %105, ptr %119, align 8, !tbaa !60
  %120 = getelementptr inbounds %struct.plist, ptr %119, i64 0, i32 1
  store ptr %101, ptr %120, align 8, !tbaa !62
  %121 = tail call noalias dereferenceable_or_null(48) ptr @malloc(i64 noundef 48) #45
  store ptr %121, ptr %101, align 8, !tbaa !63
  %122 = load i32, ptr @maxterm, align 4, !tbaa !17
  %123 = trunc i64 %96 to i32
  %124 = add nsw i32 %122, %123
  %125 = getelementptr inbounds %struct.netbox, ptr %121, i64 0, i32 5
  store i32 %124, ptr %125, align 8, !tbaa !55
  %126 = getelementptr inbounds %struct.netbox, ptr %121, i64 0, i32 7
  store i32 %104, ptr %126, align 8, !tbaa !57
  %127 = getelementptr inbounds %struct.netbox, ptr %121, i64 0, i32 6
  store i32 0, ptr %127, align 4, !tbaa !58
  %128 = getelementptr inbounds %struct.netbox, ptr %121, i64 0, i32 9
  store i32 0, ptr %128, align 8, !tbaa !59
  %129 = load i32, ptr @blockl, align 4, !tbaa !17
  %130 = load i32, ptr @blockr, align 4, !tbaa !17
  %131 = add nsw i32 %130, %129
  %132 = sdiv i32 %131, 2
  %133 = getelementptr inbounds %struct.netbox, ptr %121, i64 0, i32 1
  store i32 %132, ptr %133, align 8, !tbaa !64
  %134 = load i32, ptr @blockb, align 4, !tbaa !17
  %135 = load i32, ptr @blockt, align 4, !tbaa !17
  %136 = add nsw i32 %135, %134
  %137 = sdiv i32 %136, 2
  %138 = getelementptr inbounds %struct.netbox, ptr %121, i64 0, i32 2
  store i32 %137, ptr %138, align 4, !tbaa !65
  store ptr null, ptr %121, align 8, !tbaa !63
  %139 = load i32, ptr @numnets, align 4, !tbaa !17
  %140 = add nsw i32 %139, %104
  %141 = sext i32 %124 to i64
  %142 = getelementptr inbounds ptr, ptr %116, i64 %141
  %143 = load ptr, ptr %142, align 8, !tbaa !7
  store i32 %140, ptr %143, align 8, !tbaa !60
  %144 = getelementptr inbounds %struct.plist, ptr %143, i64 0, i32 1
  store ptr %121, ptr %144, align 8, !tbaa !62
  %145 = add nuw nsw i64 %81, 1
  %146 = load i32, ptr @numcells, align 4, !tbaa !17
  %147 = sext i32 %146 to i64
  %148 = icmp slt i64 %81, %147
  br i1 %148, label %80, label %149, !llvm.loop !66

149:                                              ; preds = %80, %70
  ret void
}

; Function Attrs: mustprogress nounwind optsize willreturn allockind("realloc") allocsize(1) memory(argmem: readwrite, inaccessiblemem: readwrite)
declare noalias noundef ptr @realloc(ptr allocptr nocapture noundef, i64 noundef) local_unnamed_addr #9

; Function Attrs: nounwind optsize uwtable
define internal double @analyze() #0 {
  %1 = load i32, ptr @numcells, align 4, !tbaa !17
  %2 = add nsw i32 %1, 1
  %3 = sext i32 %2 to i64
  %4 = shl nsw i64 %3, 2
  %5 = tail call noalias ptr @malloc(i64 noundef %4) #45
  %6 = load i32, ptr @numnets, align 4, !tbaa !17
  %7 = add i32 %6, 1
  %8 = sext i32 %7 to i64
  %9 = shl nsw i64 %8, 3
  %10 = tail call noalias ptr @malloc(i64 noundef %9) #45
  %11 = shl nsw i64 %8, 2
  %12 = tail call noalias ptr @malloc(i64 noundef %11) #45
  store ptr %12, ptr @how_many, align 8, !tbaa !7
  %13 = tail call noalias ptr @malloc(i64 noundef %11) #45
  %14 = icmp slt i32 %6, 0
  br i1 %14, label %113, label %15

15:                                               ; preds = %0
  %16 = zext i32 %7 to i64
  br label %21

17:                                               ; preds = %21
  %18 = icmp slt i32 %6, 1
  br i1 %18, label %113, label %19

19:                                               ; preds = %17
  %20 = load ptr, ptr @netarray, align 8, !tbaa !7
  br label %27

21:                                               ; preds = %21, %15
  %22 = phi i64 [ 0, %15 ], [ %25, %21 ]
  %23 = tail call noalias ptr @malloc(i64 noundef %4) #45
  %24 = getelementptr inbounds ptr, ptr %10, i64 %22
  store ptr %23, ptr %24, align 8, !tbaa !7
  %25 = add nuw nsw i64 %22, 1
  %26 = icmp eq i64 %25, %16
  br i1 %26, label %17, label %21, !llvm.loop !67

27:                                               ; preds = %89, %19
  %28 = phi i32 [ %1, %19 ], [ %90, %89 ]
  %29 = phi i32 [ %1, %19 ], [ %91, %89 ]
  %30 = phi i64 [ 1, %19 ], [ %92, %89 ]
  %31 = icmp slt i32 %29, 0
  br i1 %31, label %48, label %32

32:                                               ; preds = %27
  %33 = getelementptr inbounds ptr, ptr %10, i64 %30
  %34 = load ptr, ptr %33, align 8, !tbaa !7
  br label %40

35:                                               ; preds = %89
  %.lcssa5 = phi i32 [ %93, %89 ]
  %36 = icmp slt i32 %.lcssa5, 1
  br i1 %36, label %113, label %37

37:                                               ; preds = %35
  %38 = add nuw i32 %.lcssa5, 1
  %39 = zext i32 %38 to i64
  br label %96

40:                                               ; preds = %40, %32
  %41 = phi i64 [ 0, %32 ], [ %44, %40 ]
  %42 = getelementptr inbounds i32, ptr %5, i64 %41
  store i32 0, ptr %42, align 4, !tbaa !17
  %43 = getelementptr inbounds i32, ptr %34, i64 %41
  store i32 0, ptr %43, align 4, !tbaa !17
  %44 = add nuw nsw i64 %41, 1
  %45 = load i32, ptr @numcells, align 4, !tbaa !17
  %46 = sext i32 %45 to i64
  %47 = icmp slt i64 %41, %46
  br i1 %47, label %40, label %48, !llvm.loop !68

48:                                               ; preds = %40, %27
  %49 = phi i32 [ %28, %27 ], [ %45, %40 ]
  %50 = phi i32 [ %29, %27 ], [ %45, %40 ]
  %51 = getelementptr inbounds ptr, ptr %20, i64 %30
  %52 = load ptr, ptr %51, align 8, !tbaa !7
  %53 = load ptr, ptr %52, align 8, !tbaa !7
  %54 = icmp eq ptr %53, null
  br i1 %54, label %55, label %59

55:                                               ; preds = %67, %48
  %56 = icmp slt i32 %50, 1
  br i1 %56, label %89, label %57

57:                                               ; preds = %55
  %58 = getelementptr inbounds ptr, ptr %10, i64 %30
  br label %70

59:                                               ; preds = %67, %48
  %60 = phi ptr [ %68, %67 ], [ %53, %48 ]
  %61 = getelementptr inbounds %struct.netbox, ptr %60, i64 0, i32 7
  %62 = load i32, ptr %61, align 8, !tbaa !57
  %63 = icmp sgt i32 %62, %50
  br i1 %63, label %67, label %64

64:                                               ; preds = %59
  %65 = sext i32 %62 to i64
  %66 = getelementptr inbounds i32, ptr %5, i64 %65
  store i32 1, ptr %66, align 4, !tbaa !17
  br label %67

67:                                               ; preds = %64, %59
  %68 = load ptr, ptr %60, align 8, !tbaa !7
  %69 = icmp eq ptr %68, null
  br i1 %69, label %55, label %59, !llvm.loop !69

70:                                               ; preds = %84, %57
  %71 = phi i32 [ %49, %57 ], [ %85, %84 ]
  %72 = phi i64 [ 1, %57 ], [ %86, %84 ]
  %73 = getelementptr inbounds i32, ptr %5, i64 %72
  %74 = load i32, ptr %73, align 4, !tbaa !17
  %75 = icmp eq i32 %74, 1
  br i1 %75, label %76, label %84

76:                                               ; preds = %70
  %77 = load ptr, ptr %58, align 8, !tbaa !7
  %78 = load i32, ptr %77, align 4, !tbaa !17
  %79 = add nsw i32 %78, 1
  store i32 %79, ptr %77, align 4, !tbaa !17
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds i32, ptr %77, i64 %80
  %82 = trunc i64 %72 to i32
  store i32 %82, ptr %81, align 4, !tbaa !17
  %83 = load i32, ptr @numcells, align 4, !tbaa !17
  br label %84

84:                                               ; preds = %76, %70
  %85 = phi i32 [ %71, %70 ], [ %83, %76 ]
  %86 = add nuw nsw i64 %72, 1
  %87 = sext i32 %85 to i64
  %88 = icmp slt i64 %72, %87
  br i1 %88, label %70, label %89, !llvm.loop !70

89:                                               ; preds = %84, %55
  %90 = phi i32 [ %49, %55 ], [ %85, %84 ]
  %91 = phi i32 [ %50, %55 ], [ %85, %84 ]
  %92 = add nuw nsw i64 %30, 1
  %93 = load i32, ptr @numnets, align 4, !tbaa !17
  %94 = sext i32 %93 to i64
  %95 = icmp slt i64 %30, %94
  br i1 %95, label %27, label %35, !llvm.loop !71

96:                                               ; preds = %96, %37
  %97 = phi i64 [ 1, %37 ], [ %108, %96 ]
  %98 = phi i32 [ 0, %37 ], [ %107, %96 ]
  %99 = phi i32 [ 0, %37 ], [ %105, %96 ]
  %100 = getelementptr inbounds ptr, ptr %10, i64 %97
  %101 = load ptr, ptr %100, align 8, !tbaa !7
  %102 = load i32, ptr %101, align 4, !tbaa !17
  %103 = icmp sgt i32 %102, 1
  %104 = zext i1 %103 to i32
  %105 = add nuw nsw i32 %99, %104
  %106 = select i1 %103, i32 %102, i32 0
  %107 = add nsw i32 %106, %98
  %108 = add nuw nsw i64 %97, 1
  %109 = icmp eq i64 %108, %39
  br i1 %109, label %110, label %96, !llvm.loop !72

110:                                              ; preds = %96
  %.lcssa4 = phi i32 [ %105, %96 ]
  %.lcssa3 = phi i32 [ %107, %96 ]
  %111 = sitofp i32 %.lcssa3 to double
  %112 = sitofp i32 %.lcssa4 to double
  br label %113

113:                                              ; preds = %110, %35, %17, %0
  %114 = phi double [ 0.000000e+00, %35 ], [ %112, %110 ], [ 0.000000e+00, %17 ], [ 0.000000e+00, %0 ]
  %115 = phi double [ 0.000000e+00, %35 ], [ %111, %110 ], [ 0.000000e+00, %17 ], [ 0.000000e+00, %0 ]
  %116 = load ptr, ptr @fpo, align 8, !tbaa !7
  %117 = tail call i64 @fwrite(ptr nonnull @.str, i64 40, i64 1, ptr %116)
  %118 = load ptr, ptr @fpo, align 8, !tbaa !7
  %119 = fdiv double %115, %114
  %120 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %118, ptr noundef nonnull @.str.1, double noundef %119) #43
  %121 = load ptr, ptr @fpo, align 8, !tbaa !7
  %122 = tail call i64 @fwrite(ptr nonnull @.str.2, i64 40, i64 1, ptr %121)
  %123 = load i32, ptr @numnets, align 4, !tbaa !17
  %124 = icmp slt i32 %123, 1
  br i1 %124, label %203, label %125

125:                                              ; preds = %113
  %126 = load ptr, ptr @how_many, align 8
  br label %127

127:                                              ; preds = %173, %125
  %128 = phi i64 [ 1, %125 ], [ %174, %173 ]
  %129 = getelementptr inbounds ptr, ptr %10, i64 %128
  %130 = load ptr, ptr %129, align 8, !tbaa !7
  %131 = load i32, ptr %130, align 4, !tbaa !17
  switch i32 %131, label %133 [
    i32 0, label %171
    i32 1, label %132
  ]

132:                                              ; preds = %127
  store i32 0, ptr %130, align 4, !tbaa !17
  br label %171

133:                                              ; preds = %127
  %134 = getelementptr inbounds i32, ptr %126, i64 %128
  store i32 1, ptr %134, align 4, !tbaa !17
  %135 = load i32, ptr @numnets, align 4, !tbaa !17
  %136 = sext i32 %135 to i64
  %137 = icmp slt i64 %128, %136
  br i1 %137, label %138, label %173

138:                                              ; preds = %167, %133
  %139 = phi i32 [ %168, %167 ], [ %135, %133 ]
  %140 = phi i64 [ %141, %167 ], [ %128, %133 ]
  %141 = add nuw nsw i64 %140, 1
  %142 = getelementptr inbounds ptr, ptr %10, i64 %141
  %143 = load ptr, ptr %142, align 8, !tbaa !7
  %144 = load i32, ptr %143, align 4, !tbaa !17
  %145 = load i32, ptr %130, align 4, !tbaa !17
  %146 = icmp eq i32 %144, %145
  br i1 %146, label %147, label %167

147:                                              ; preds = %138
  %148 = load i32, ptr @numcells, align 4, !tbaa !17
  %149 = icmp slt i32 %148, 1
  br i1 %149, label %163, label %150

150:                                              ; preds = %147
  %151 = add nuw i32 %148, 1
  %152 = zext i32 %151 to i64
  br label %156

153:                                              ; preds = %156
  %154 = add nuw nsw i64 %157, 1
  %155 = icmp eq i64 %154, %152
  br i1 %155, label %163, label %156, !llvm.loop !73

156:                                              ; preds = %153, %150
  %157 = phi i64 [ 1, %150 ], [ %154, %153 ]
  %158 = getelementptr inbounds i32, ptr %143, i64 %157
  %159 = load i32, ptr %158, align 4, !tbaa !17
  %160 = getelementptr inbounds i32, ptr %130, i64 %157
  %161 = load i32, ptr %160, align 4, !tbaa !17
  %162 = icmp eq i32 %159, %161
  br i1 %162, label %153, label %167

163:                                              ; preds = %153, %147
  store i32 0, ptr %143, align 4, !tbaa !17
  %164 = load i32, ptr %134, align 4, !tbaa !17
  %165 = add nsw i32 %164, 1
  store i32 %165, ptr %134, align 4, !tbaa !17
  %166 = load i32, ptr @numnets, align 4, !tbaa !17
  br label %167

167:                                              ; preds = %163, %156, %138
  %168 = phi i32 [ %166, %163 ], [ %139, %138 ], [ %139, %156 ]
  %169 = trunc i64 %141 to i32
  %170 = icmp sgt i32 %168, %169
  br i1 %170, label %138, label %173, !llvm.loop !74

171:                                              ; preds = %132, %127
  %172 = getelementptr inbounds i32, ptr %126, i64 %128
  store i32 0, ptr %172, align 4, !tbaa !17
  br label %173

173:                                              ; preds = %171, %167, %133
  %174 = add nuw nsw i64 %128, 1
  %175 = load i32, ptr @numnets, align 4, !tbaa !17
  %176 = sext i32 %175 to i64
  %177 = icmp slt i64 %128, %176
  br i1 %177, label %127, label %178, !llvm.loop !75

178:                                              ; preds = %173
  %.lcssa2 = phi i32 [ %175, %173 ]
  store i32 0, ptr %13, align 4, !tbaa !17
  %179 = icmp slt i32 %.lcssa2, 1
  br i1 %179, label %203, label %180

180:                                              ; preds = %178
  %181 = load ptr, ptr @how_many, align 8, !tbaa !7
  %182 = add nuw i32 %.lcssa2, 1
  %183 = zext i32 %182 to i64
  br label %184

184:                                              ; preds = %195, %180
  %185 = phi i64 [ 1, %180 ], [ %196, %195 ]
  %186 = getelementptr inbounds i32, ptr %181, i64 %185
  %187 = load i32, ptr %186, align 4, !tbaa !17
  %188 = icmp slt i32 %187, 1
  br i1 %188, label %195, label %189

189:                                              ; preds = %184
  %190 = load i32, ptr %13, align 4, !tbaa !17
  %191 = add nsw i32 %190, 1
  store i32 %191, ptr %13, align 4, !tbaa !17
  %192 = sext i32 %191 to i64
  %193 = getelementptr inbounds i32, ptr %13, i64 %192
  %194 = trunc i64 %185 to i32
  store i32 %194, ptr %193, align 4, !tbaa !17
  br label %195

195:                                              ; preds = %189, %184
  %196 = add nuw nsw i64 %185, 1
  %197 = icmp eq i64 %196, %183
  br i1 %197, label %198, label %184, !llvm.loop !76

198:                                              ; preds = %195
  %199 = load i32, ptr %13, align 4, !tbaa !17
  %200 = sext i32 %199 to i64
  %201 = getelementptr inbounds i32, ptr %13, i64 %200
  %202 = load i32, ptr %201, align 4, !tbaa !17
  br label %203

203:                                              ; preds = %198, %178, %113
  %204 = phi i32 [ %202, %198 ], [ 0, %178 ], [ 0, %113 ]
  %205 = phi i32 [ %199, %198 ], [ 0, %178 ], [ 0, %113 ]
  store i32 %204, ptr %13, align 4, !tbaa !17
  tail call void @qsortx(ptr noundef nonnull %13, i32 noundef %205, i32 noundef 4) #43
  %206 = load i32, ptr @numnets, align 4, !tbaa !17
  %207 = icmp slt i32 %206, 1
  br i1 %207, label %229, label %208

208:                                              ; preds = %203
  %209 = add nuw i32 %206, 1
  %210 = zext i32 %209 to i64
  br label %211

211:                                              ; preds = %211, %208
  %212 = phi i64 [ 1, %208 ], [ %224, %211 ]
  %213 = phi i32 [ 0, %208 ], [ %223, %211 ]
  %214 = phi i32 [ 0, %208 ], [ %221, %211 ]
  %215 = getelementptr inbounds ptr, ptr %10, i64 %212
  %216 = load ptr, ptr %215, align 8, !tbaa !7
  %217 = load i32, ptr %216, align 4, !tbaa !17
  %218 = icmp sgt i32 %217, 0
  %219 = add nsw i32 %217, -1
  %220 = zext i1 %218 to i32
  %221 = add nuw nsw i32 %214, %220
  %222 = select i1 %218, i32 %219, i32 0
  %223 = add nsw i32 %222, %213
  %224 = add nuw nsw i64 %212, 1
  %225 = icmp eq i64 %224, %210
  br i1 %225, label %226, label %211, !llvm.loop !77

226:                                              ; preds = %211
  %.lcssa1 = phi i32 [ %221, %211 ]
  %.lcssa = phi i32 [ %223, %211 ]
  %227 = sitofp i32 %.lcssa1 to double
  %228 = sitofp i32 %.lcssa to double
  br label %229

229:                                              ; preds = %226, %203
  %230 = phi double [ 0.000000e+00, %203 ], [ %227, %226 ]
  %231 = phi double [ 0.000000e+00, %203 ], [ %228, %226 ]
  %232 = load i32, ptr @numcells, align 4, !tbaa !17
  %233 = sitofp i32 %232 to double
  %234 = fdiv double %231, %230
  %235 = sitofp i32 %206 to double
  %236 = insertelement <2 x double> poison, double %235, i64 0
  %237 = insertelement <2 x double> %236, double %230, i64 1
  %238 = insertelement <2 x double> poison, double %233, i64 0
  %239 = shufflevector <2 x double> %238, <2 x double> poison, <2 x i32> zeroinitializer
  %240 = fdiv <2 x double> %237, %239
  %241 = extractelement <2 x double> %240, i64 0
  %242 = extractelement <2 x double> %240, i64 1
  %243 = fdiv double %241, %242
  %244 = tail call double @wireratio(i32 noundef %232, double noundef %234, double noundef %243, double noundef %242) #44
  %245 = load ptr, ptr @fpo, align 8, !tbaa !7
  %246 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %245, ptr noundef nonnull @.str.3, double noundef %244) #43
  %247 = load ptr, ptr @fpo, align 8, !tbaa !7
  %248 = tail call i32 @fflush(ptr noundef %247) #43
  ret double %244
}

; Function Attrs: nofree nounwind
declare noundef i64 @fwrite(ptr nocapture noundef, i64 noundef, i64 noundef, ptr nocapture noundef) local_unnamed_addr #10

; Function Attrs: nofree nounwind optsize
declare noundef i32 @fprintf(ptr nocapture noundef, ptr nocapture noundef readonly, ...) local_unnamed_addr #11

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @qsortx(ptr noundef %0, i32 noundef %1, i32 noundef %2) #12 {
  %4 = icmp slt i32 %1, 2
  br i1 %4, label %115, label %5

5:                                                ; preds = %3
  store i32 %2, ptr @qsz, align 4, !tbaa !17
  %6 = shl nsw i32 %2, 2
  store i32 %6, ptr @thresh, align 4, !tbaa !17
  %7 = mul nsw i32 %2, 6
  store i32 %7, ptr @mthresh, align 4, !tbaa !17
  %8 = mul nsw i32 %2, %1
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds i8, ptr %0, i64 %9
  %11 = icmp ugt i32 %1, 3
  br i1 %11, label %12, label %17

12:                                               ; preds = %5
  tail call void @qst(ptr noundef %0, ptr noundef %10) #43
  %13 = load i32, ptr @thresh, align 4, !tbaa !17
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds i8, ptr %0, i64 %14
  %16 = load i32, ptr @qsz, align 4, !tbaa !17
  br label %17

17:                                               ; preds = %12, %5
  %18 = phi i32 [ %16, %12 ], [ %2, %5 ]
  %19 = phi ptr [ %15, %12 ], [ %10, %5 ]
  %20 = sext i32 %18 to i64
  %21 = getelementptr inbounds i8, ptr %0, i64 %20
  %22 = icmp ult ptr %21, %19
  br i1 %22, label %23, label %57

23:                                               ; preds = %17
  %24 = load ptr, ptr @how_many, align 8, !tbaa !7
  %25 = load i32, ptr %0, align 4, !tbaa !17
  br label %26

26:                                               ; preds = %26, %23
  %27 = phi i32 [ %25, %23 ], [ %38, %26 ]
  %28 = phi ptr [ %21, %23 ], [ %40, %26 ]
  %29 = phi ptr [ %0, %23 ], [ %39, %26 ]
  %30 = load i32, ptr %28, align 4, !tbaa !17
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i32, ptr %24, i64 %31
  %33 = load i32, ptr %32, align 4, !tbaa !17
  %34 = sext i32 %27 to i64
  %35 = getelementptr inbounds i32, ptr %24, i64 %34
  %36 = load i32, ptr %35, align 4, !tbaa !17
  %37 = icmp sgt i32 %33, %36
  %38 = select i1 %37, i32 %30, i32 %27
  %39 = select i1 %37, ptr %28, ptr %29
  %40 = getelementptr inbounds i8, ptr %28, i64 %20
  %41 = icmp ult ptr %40, %19
  br i1 %41, label %26, label %42, !llvm.loop !78

42:                                               ; preds = %26
  %.lcssa1 = phi ptr [ %39, %26 ]
  %43 = icmp ne ptr %.lcssa1, %0
  %44 = icmp sgt i32 %18, 0
  %45 = and i1 %43, %44
  br i1 %45, label %46, label %57

46:                                               ; preds = %46, %42
  %47 = phi ptr [ %51, %46 ], [ %.lcssa1, %42 ]
  %48 = phi ptr [ %52, %46 ], [ %0, %42 ]
  %49 = load i8, ptr %47, align 1, !tbaa !79
  %50 = load i8, ptr %48, align 1, !tbaa !79
  %51 = getelementptr inbounds i8, ptr %47, i64 1
  store i8 %50, ptr %47, align 1, !tbaa !79
  %52 = getelementptr inbounds i8, ptr %48, i64 1
  store i8 %49, ptr %48, align 1, !tbaa !79
  %53 = icmp ult ptr %52, %21
  br i1 %53, label %46, label %54, !llvm.loop !80

54:                                               ; preds = %46
  %55 = load i32, ptr @qsz, align 4, !tbaa !17
  %56 = sext i32 %55 to i64
  br label %57

57:                                               ; preds = %54, %42, %17
  %58 = phi i64 [ %56, %54 ], [ %20, %42 ], [ %20, %17 ]
  %59 = phi i32 [ %55, %54 ], [ %18, %42 ], [ %18, %17 ]
  %60 = icmp slt i32 %59, %8
  br i1 %60, label %61, label %115

61:                                               ; preds = %57
  %62 = getelementptr inbounds i8, ptr %0, i64 %58
  br label %63

63:                                               ; preds = %110, %61
  %64 = phi i32 [ %111, %110 ], [ %59, %61 ]
  %65 = phi ptr [ %113, %110 ], [ %62, %61 ]
  %66 = phi i64 [ %112, %110 ], [ %58, %61 ]
  %67 = sub nsw i64 0, %66
  %68 = load ptr, ptr @how_many, align 8, !tbaa !7
  %69 = load i32, ptr %65, align 4, !tbaa !17
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds i32, ptr %68, i64 %70
  %72 = load i32, ptr %71, align 4, !tbaa !17
  br label %73

73:                                               ; preds = %73, %63
  %74 = phi ptr [ %75, %73 ], [ %65, %63 ]
  %75 = getelementptr inbounds i8, ptr %74, i64 %67
  %76 = load i32, ptr %75, align 4, !tbaa !17
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds i32, ptr %68, i64 %77
  %79 = load i32, ptr %78, align 4, !tbaa !17
  %80 = icmp sgt i32 %72, %79
  br i1 %80, label %73, label %81, !llvm.loop !81

81:                                               ; preds = %73
  %.lcssa = phi ptr [ %74, %73 ]
  %82 = icmp eq ptr %.lcssa, %65
  %83 = getelementptr inbounds i8, ptr %65, i64 %66
  %84 = getelementptr inbounds i8, ptr %83, i64 -1
  %85 = icmp ult ptr %84, %65
  %86 = select i1 %82, i1 true, i1 %85
  br i1 %86, label %110, label %87

87:                                               ; preds = %104, %81
  %88 = phi ptr [ %106, %104 ], [ %84, %81 ]
  %89 = load i8, ptr %88, align 1, !tbaa !79
  %90 = load i32, ptr @qsz, align 4, !tbaa !17
  %91 = sext i32 %90 to i64
  %92 = sub nsw i64 0, %91
  %93 = getelementptr inbounds i8, ptr %88, i64 %92
  %94 = icmp ult ptr %93, %.lcssa
  br i1 %94, label %104, label %95

95:                                               ; preds = %95, %87
  %96 = phi ptr [ %102, %95 ], [ %93, %87 ]
  %97 = phi ptr [ %96, %95 ], [ %88, %87 ]
  %98 = load i8, ptr %96, align 1, !tbaa !79
  store i8 %98, ptr %97, align 1, !tbaa !79
  %99 = load i32, ptr @qsz, align 4, !tbaa !17
  %100 = sext i32 %99 to i64
  %101 = sub nsw i64 0, %100
  %102 = getelementptr inbounds i8, ptr %96, i64 %101
  %103 = icmp ult ptr %102, %.lcssa
  br i1 %103, label %104, label %95, !llvm.loop !82

104:                                              ; preds = %95, %87
  %105 = phi ptr [ %88, %87 ], [ %96, %95 ]
  store i8 %89, ptr %105, align 1, !tbaa !79
  %106 = getelementptr inbounds i8, ptr %88, i64 -1
  %107 = icmp ult ptr %106, %65
  br i1 %107, label %108, label %87, !llvm.loop !83

108:                                              ; preds = %104
  %109 = load i32, ptr @qsz, align 4, !tbaa !17
  br label %110

110:                                              ; preds = %108, %81
  %111 = phi i32 [ %109, %108 ], [ %64, %81 ]
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds i8, ptr %65, i64 %112
  %114 = icmp ult ptr %113, %10
  br i1 %114, label %63, label %115, !llvm.loop !84

115:                                              ; preds = %110, %57, %3
  ret void
}

; Function Attrs: nofree nounwind optsize
declare noundef i32 @fflush(ptr nocapture noundef) local_unnamed_addr #11

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @qst(ptr noundef %0, ptr noundef %1) #12 {
  %3 = ptrtoint ptr %1 to i64
  %4 = ptrtoint ptr %0 to i64
  %5 = sub i64 %3, %4
  %6 = trunc i64 %5 to i32
  br label %7

7:                                                ; preds = %166, %2
  %8 = phi ptr [ %1, %2 ], [ %167, %166 ]
  %9 = phi i32 [ %6, %2 ], [ %168, %166 ]
  %10 = phi ptr [ %0, %2 ], [ %169, %166 ]
  %11 = load i32, ptr @qsz, align 4, !tbaa !17
  %12 = sdiv i32 %9, %11
  %13 = ashr i32 %12, 1
  %14 = mul nsw i32 %13, %11
  %15 = sext i32 %14 to i64
  %16 = getelementptr i8, ptr %10, i64 %15
  %17 = load i32, ptr @mthresh, align 4, !tbaa !17
  %18 = icmp slt i32 %9, %17
  br i1 %18, label %67, label %19

19:                                               ; preds = %7
  %20 = load ptr, ptr @how_many, align 8, !tbaa !7
  %21 = load i32, ptr %16, align 4, !tbaa !17
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i32, ptr %20, i64 %22
  %24 = load i32, ptr %23, align 4, !tbaa !17
  %25 = load i32, ptr %10, align 4, !tbaa !17
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i32, ptr %20, i64 %26
  %28 = load i32, ptr %27, align 4, !tbaa !17
  %29 = icmp sgt i32 %24, %28
  %30 = select i1 %29, i32 %25, i32 %21
  %31 = select i1 %29, ptr %10, ptr %16
  %32 = sext i32 %11 to i64
  %33 = sub nsw i64 0, %32
  %34 = getelementptr inbounds i8, ptr %8, i64 %33
  %35 = load i32, ptr %34, align 4, !tbaa !17
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, ptr %20, i64 %36
  %38 = load i32, ptr %37, align 4, !tbaa !17
  %39 = sext i32 %30 to i64
  %40 = getelementptr inbounds i32, ptr %20, i64 %39
  %41 = load i32, ptr %40, align 4, !tbaa !17
  %42 = icmp sgt i32 %38, %41
  br i1 %42, label %43, label %52

43:                                               ; preds = %19
  %44 = icmp eq ptr %31, %10
  %45 = select i1 %44, i32 %21, i32 %25
  %46 = select i1 %44, ptr %16, ptr %10
  %47 = sext i32 %45 to i64
  %48 = getelementptr inbounds i32, ptr %20, i64 %47
  %49 = load i32, ptr %48, align 4, !tbaa !17
  %50 = icmp slt i32 %38, %49
  %51 = select i1 %50, ptr %34, ptr %46
  br label %52

52:                                               ; preds = %43, %19
  %53 = phi ptr [ %31, %19 ], [ %51, %43 ]
  %54 = icmp eq ptr %53, %16
  br i1 %54, label %67, label %55

55:                                               ; preds = %55, %52
  %56 = phi ptr [ %61, %55 ], [ %16, %52 ]
  %57 = phi ptr [ %62, %55 ], [ %53, %52 ]
  %58 = phi i32 [ %63, %55 ], [ %11, %52 ]
  %59 = load i8, ptr %56, align 1, !tbaa !79
  %60 = load i8, ptr %57, align 1, !tbaa !79
  %61 = getelementptr inbounds i8, ptr %56, i64 1
  store i8 %60, ptr %56, align 1, !tbaa !79
  %62 = getelementptr inbounds i8, ptr %57, i64 1
  store i8 %59, ptr %57, align 1, !tbaa !79
  %63 = add nsw i32 %58, -1
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %55, !llvm.loop !85

65:                                               ; preds = %55
  %66 = load i32, ptr @qsz, align 4, !tbaa !17
  br label %67

67:                                               ; preds = %65, %52, %7
  %68 = phi i32 [ %66, %65 ], [ %11, %52 ], [ %11, %7 ]
  %69 = sext i32 %68 to i64
  %70 = sub nsw i64 0, %69
  %71 = getelementptr inbounds i8, ptr %8, i64 %70
  br label %73

72:                                               ; preds = %138
  br label %73, !llvm.loop !86

73:                                               ; preds = %72, %67
  %74 = phi ptr [ %10, %67 ], [ %137, %72 ]
  %75 = phi ptr [ %71, %67 ], [ %134, %72 ]
  %76 = phi ptr [ %16, %67 ], [ %136, %72 ]
  %77 = icmp ult ptr %74, %76
  br i1 %77, label %78, label %96

78:                                               ; preds = %73
  %79 = load ptr, ptr @how_many, align 8, !tbaa !7
  %80 = load i32, ptr %76, align 4, !tbaa !17
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds i32, ptr %79, i64 %81
  %83 = load i32, ptr %82, align 4, !tbaa !17
  %84 = load i32, ptr @qsz, align 4
  %85 = sext i32 %84 to i64
  br label %86

86:                                               ; preds = %93, %78
  %87 = phi ptr [ %74, %78 ], [ %94, %93 ]
  %88 = load i32, ptr %87, align 4, !tbaa !17
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i32, ptr %79, i64 %89
  %91 = load i32, ptr %90, align 4, !tbaa !17
  %92 = icmp sgt i32 %83, %91
  br i1 %92, label %96, label %93

93:                                               ; preds = %86
  %94 = getelementptr inbounds i8, ptr %87, i64 %85
  %95 = icmp ult ptr %94, %76
  br i1 %95, label %86, label %96, !llvm.loop !87

96:                                               ; preds = %93, %86, %73
  %97 = phi ptr [ %74, %73 ], [ %94, %93 ], [ %87, %86 ]
  %98 = icmp ugt ptr %75, %76
  br i1 %98, label %99, label %124

99:                                               ; preds = %96
  %100 = load ptr, ptr @how_many, align 8, !tbaa !7
  %101 = load i32, ptr %76, align 4, !tbaa !17
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds i32, ptr %100, i64 %102
  %104 = load i32, ptr %103, align 4, !tbaa !17
  %105 = load i32, ptr @qsz, align 4
  %106 = sext i32 %105 to i64
  %107 = sub nsw i64 0, %106
  br label %108

108:                                              ; preds = %115, %99
  %109 = phi ptr [ %75, %99 ], [ %116, %115 ]
  %110 = load i32, ptr %109, align 4, !tbaa !17
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds i32, ptr %100, i64 %111
  %113 = load i32, ptr %112, align 4, !tbaa !17
  %114 = icmp sgt i32 %113, %104
  br i1 %114, label %118, label %115

115:                                              ; preds = %108
  %116 = getelementptr inbounds i8, ptr %109, i64 %107
  %117 = icmp ugt ptr %116, %76
  br i1 %117, label %108, label %124, !llvm.loop !88

118:                                              ; preds = %108
  %.lcssa = phi ptr [ %109, %108 ]
  %119 = getelementptr inbounds i8, ptr %97, i64 %106
  %120 = icmp eq ptr %97, %76
  %121 = select i1 %120, i64 0, i64 %107
  %122 = getelementptr inbounds i8, ptr %.lcssa, i64 %121
  %123 = select i1 %120, ptr %.lcssa, ptr %76
  br label %132

124:                                              ; preds = %115, %96
  %125 = phi ptr [ %75, %96 ], [ %116, %115 ]
  %126 = icmp eq ptr %97, %76
  %127 = load i32, ptr @qsz, align 4, !tbaa !17
  %128 = sext i32 %127 to i64
  br i1 %126, label %148, label %129

129:                                              ; preds = %124
  %130 = sub nsw i64 0, %128
  %131 = getelementptr inbounds i8, ptr %125, i64 %130
  br label %132

132:                                              ; preds = %129, %118
  %133 = phi i32 [ %127, %129 ], [ %105, %118 ]
  %134 = phi ptr [ %131, %129 ], [ %122, %118 ]
  %135 = phi ptr [ %76, %129 ], [ %.lcssa, %118 ]
  %136 = phi ptr [ %97, %129 ], [ %123, %118 ]
  %137 = phi ptr [ %97, %129 ], [ %119, %118 ]
  br label %138

138:                                              ; preds = %138, %132
  %139 = phi ptr [ %97, %132 ], [ %144, %138 ]
  %140 = phi ptr [ %135, %132 ], [ %145, %138 ]
  %141 = phi i32 [ %133, %132 ], [ %146, %138 ]
  %142 = load i8, ptr %139, align 1, !tbaa !79
  %143 = load i8, ptr %140, align 1, !tbaa !79
  %144 = getelementptr inbounds i8, ptr %139, i64 1
  store i8 %143, ptr %139, align 1, !tbaa !79
  %145 = getelementptr inbounds i8, ptr %140, i64 1
  store i8 %142, ptr %140, align 1, !tbaa !79
  %146 = add nsw i32 %141, -1
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %72, label %138, !llvm.loop !86

148:                                              ; preds = %124
  %.lcssa2 = phi i64 [ %128, %124 ]
  %.lcssa1 = phi ptr [ %76, %124 ]
  %149 = getelementptr inbounds i8, ptr %.lcssa1, i64 %.lcssa2
  %150 = ptrtoint ptr %.lcssa1 to i64
  %151 = ptrtoint ptr %10 to i64
  %152 = sub i64 %150, %151
  %153 = trunc i64 %152 to i32
  %154 = ptrtoint ptr %8 to i64
  %155 = ptrtoint ptr %149 to i64
  %156 = sub i64 %154, %155
  %157 = trunc i64 %156 to i32
  %158 = icmp sgt i32 %153, %157
  %159 = load i32, ptr @thresh, align 4, !tbaa !17
  br i1 %158, label %163, label %160

160:                                              ; preds = %148
  %161 = icmp sgt i32 %159, %153
  br i1 %161, label %166, label %162

162:                                              ; preds = %160
  tail call void @qst(ptr noundef %10, ptr noundef %.lcssa1) #43
  br label %166

163:                                              ; preds = %148
  %164 = icmp sgt i32 %159, %157
  br i1 %164, label %166, label %165

165:                                              ; preds = %163
  tail call void @qst(ptr noundef %149, ptr noundef %8) #43
  br label %166

166:                                              ; preds = %165, %163, %162, %160
  %167 = phi ptr [ %8, %162 ], [ %8, %160 ], [ %.lcssa1, %165 ], [ %.lcssa1, %163 ]
  %168 = phi i32 [ %157, %162 ], [ %157, %160 ], [ %153, %165 ], [ %153, %163 ]
  %169 = phi ptr [ %149, %162 ], [ %149, %160 ], [ %10, %165 ], [ %10, %163 ]
  %170 = load i32, ptr @thresh, align 4, !tbaa !17
  %171 = icmp slt i32 %168, %170
  br i1 %171, label %172, label %7, !llvm.loop !89

172:                                              ; preds = %166
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @bellman() #5 {
  %1 = load i32, ptr @numXnodes, align 4, !tbaa !17
  %2 = add i32 %1, 1
  %3 = sext i32 %2 to i64
  %4 = shl nsw i64 %3, 3
  %5 = tail call noalias ptr @malloc(i64 noundef %4) #45
  store ptr %5, ptr @xBellArray, align 8, !tbaa !7
  %6 = load i32, ptr @numYnodes, align 4, !tbaa !17
  %7 = add i32 %6, 1
  %8 = sext i32 %7 to i64
  %9 = shl nsw i64 %8, 3
  %10 = tail call noalias ptr @malloc(i64 noundef %9) #45
  store ptr %10, ptr @yBellArray, align 8, !tbaa !7
  %11 = getelementptr inbounds %struct.bellbox, ptr %5, i64 1, i32 1
  store i32 0, ptr %11, align 4, !tbaa !90
  %12 = getelementptr inbounds %struct.bellbox, ptr %5, i64 1
  store i32 0, ptr %12, align 4, !tbaa !92
  %13 = icmp slt i32 %1, 2
  br i1 %13, label %16, label %14

14:                                               ; preds = %0
  %15 = zext i32 %2 to i64
  br label %21

16:                                               ; preds = %21, %0
  %17 = icmp slt i32 %1, 1
  br i1 %17, label %55, label %18

18:                                               ; preds = %16
  %19 = load ptr, ptr @xNodeArray, align 8, !tbaa !7
  %20 = zext i32 %2 to i64
  br label %26

21:                                               ; preds = %21, %14
  %22 = phi i64 [ 2, %14 ], [ %24, %21 ]
  %23 = getelementptr inbounds %struct.bellbox, ptr %5, i64 %22
  store i32 10000000, ptr %23, align 4, !tbaa !92
  %24 = add nuw nsw i64 %22, 1
  %25 = icmp eq i64 %24, %15
  br i1 %25, label %16, label %21, !llvm.loop !93

26:                                               ; preds = %52, %18
  %27 = phi i64 [ 1, %18 ], [ %53, %52 ]
  %28 = getelementptr inbounds %struct.bellbox, ptr %5, i64 %27
  %29 = load i32, ptr %28, align 4, !tbaa !92
  %30 = getelementptr inbounds ptr, ptr %19, i64 %27
  %31 = load ptr, ptr %30, align 8, !tbaa !7
  %32 = icmp eq ptr %31, null
  br i1 %32, label %52, label %33

33:                                               ; preds = %26
  %34 = trunc i64 %27 to i32
  br label %35

35:                                               ; preds = %48, %33
  %36 = phi ptr [ %50, %48 ], [ %31, %33 ]
  %37 = getelementptr inbounds %struct.wcbox, ptr %36, i64 0, i32 1
  %38 = load i32, ptr %37, align 4, !tbaa !94
  %39 = getelementptr inbounds %struct.wcbox, ptr %36, i64 0, i32 3
  %40 = load i32, ptr %39, align 8, !tbaa !96
  %41 = sext i32 %38 to i64
  %42 = getelementptr inbounds %struct.bellbox, ptr %5, i64 %41
  %43 = load i32, ptr %42, align 4, !tbaa !92
  %44 = sub i32 %29, %40
  %45 = icmp sgt i32 %43, %44
  br i1 %45, label %46, label %48

46:                                               ; preds = %35
  store i32 %44, ptr %42, align 4, !tbaa !92
  %47 = getelementptr inbounds %struct.bellbox, ptr %5, i64 %41, i32 1
  store i32 %34, ptr %47, align 4, !tbaa !90
  br label %48

48:                                               ; preds = %46, %35
  %49 = getelementptr inbounds %struct.wcbox, ptr %36, i64 0, i32 4
  %50 = load ptr, ptr %49, align 8, !tbaa !7
  %51 = icmp eq ptr %50, null
  br i1 %51, label %52, label %35, !llvm.loop !97

52:                                               ; preds = %48, %26
  %53 = add nuw nsw i64 %27, 1
  %54 = icmp eq i64 %53, %20
  br i1 %54, label %55, label %26, !llvm.loop !98

55:                                               ; preds = %52, %16
  %56 = getelementptr inbounds %struct.bellbox, ptr %10, i64 1, i32 1
  store i32 0, ptr %56, align 4, !tbaa !90
  %57 = getelementptr inbounds %struct.bellbox, ptr %10, i64 1
  store i32 0, ptr %57, align 4, !tbaa !92
  %58 = icmp slt i32 %6, 2
  br i1 %58, label %61, label %59

59:                                               ; preds = %55
  %60 = zext i32 %7 to i64
  br label %66

61:                                               ; preds = %66, %55
  %62 = icmp slt i32 %6, 1
  br i1 %62, label %100, label %63

63:                                               ; preds = %61
  %64 = load ptr, ptr @yNodeArray, align 8, !tbaa !7
  %65 = zext i32 %7 to i64
  br label %71

66:                                               ; preds = %66, %59
  %67 = phi i64 [ 2, %59 ], [ %69, %66 ]
  %68 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %67
  store i32 10000000, ptr %68, align 4, !tbaa !92
  %69 = add nuw nsw i64 %67, 1
  %70 = icmp eq i64 %69, %60
  br i1 %70, label %61, label %66, !llvm.loop !99

71:                                               ; preds = %97, %63
  %72 = phi i64 [ 1, %63 ], [ %98, %97 ]
  %73 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %72
  %74 = load i32, ptr %73, align 4, !tbaa !92
  %75 = getelementptr inbounds ptr, ptr %64, i64 %72
  %76 = load ptr, ptr %75, align 8, !tbaa !7
  %77 = icmp eq ptr %76, null
  br i1 %77, label %97, label %78

78:                                               ; preds = %71
  %79 = trunc i64 %72 to i32
  br label %80

80:                                               ; preds = %93, %78
  %81 = phi ptr [ %95, %93 ], [ %76, %78 ]
  %82 = getelementptr inbounds %struct.wcbox, ptr %81, i64 0, i32 1
  %83 = load i32, ptr %82, align 4, !tbaa !94
  %84 = getelementptr inbounds %struct.wcbox, ptr %81, i64 0, i32 3
  %85 = load i32, ptr %84, align 8, !tbaa !96
  %86 = sext i32 %83 to i64
  %87 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %86
  %88 = load i32, ptr %87, align 4, !tbaa !92
  %89 = sub i32 %74, %85
  %90 = icmp sgt i32 %88, %89
  br i1 %90, label %91, label %93

91:                                               ; preds = %80
  store i32 %89, ptr %87, align 4, !tbaa !92
  %92 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %86, i32 1
  store i32 %79, ptr %92, align 4, !tbaa !90
  br label %93

93:                                               ; preds = %91, %80
  %94 = getelementptr inbounds %struct.wcbox, ptr %81, i64 0, i32 4
  %95 = load ptr, ptr %94, align 8, !tbaa !7
  %96 = icmp eq ptr %95, null
  br i1 %96, label %97, label %80, !llvm.loop !100

97:                                               ; preds = %93, %71
  %98 = add nuw nsw i64 %72, 1
  %99 = icmp eq i64 %98, %65
  br i1 %99, label %100, label %71, !llvm.loop !101

100:                                              ; preds = %97, %61
  %101 = load ptr, ptr @fpo, align 8, !tbaa !7
  %102 = sext i32 %1 to i64
  %103 = getelementptr inbounds %struct.bellbox, ptr %5, i64 %102
  %104 = load i32, ptr %103, align 4, !tbaa !92
  %105 = sub nsw i32 0, %104
  %106 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %101, ptr noundef nonnull @.str.4, i32 noundef %105) #43
  %107 = load ptr, ptr @fpo, align 8, !tbaa !7
  %108 = load ptr, ptr @yBellArray, align 8, !tbaa !7
  %109 = load i32, ptr @numYnodes, align 4, !tbaa !17
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds %struct.bellbox, ptr %108, i64 %110
  %112 = load i32, ptr %111, align 4, !tbaa !92
  %113 = sub nsw i32 0, %112
  %114 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %107, ptr noundef nonnull @.str.1.5, i32 noundef %113) #43
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @buster() #12 {
  %1 = load ptr, ptr @A, align 8, !tbaa !7
  %2 = load i32, ptr %1, align 4, !tbaa !102
  %3 = icmp slt i32 %2, 1
  br i1 %3, label %74, label %4

4:                                                ; preds = %0
  %5 = add nuw i32 %2, 1
  %6 = zext i32 %5 to i64
  br label %11

7:                                                ; preds = %11
  %.lcssa9 = phi i32 [ %16, %11 ]
  br i1 %3, label %74, label %8

8:                                                ; preds = %7
  %9 = add nuw i32 %2, 1
  %10 = zext i32 %9 to i64
  br label %24

11:                                               ; preds = %11, %4
  %12 = phi i64 [ 1, %4 ], [ %17, %11 ]
  %13 = phi i32 [ 1000000000, %4 ], [ %16, %11 ]
  %14 = getelementptr inbounds %struct.bellbox, ptr %1, i64 %12, i32 1
  %15 = load i32, ptr %14, align 4, !tbaa !104
  %16 = tail call i32 @llvm.smin.i32(i32 %15, i32 %13)
  %17 = add nuw nsw i64 %12, 1
  %18 = icmp eq i64 %17, %6
  br i1 %18, label %7, label %11, !llvm.loop !105

19:                                               ; preds = %38
  %.lcssa8 = phi i32 [ %39, %38 ]
  %.lcssa7 = phi i32 [ %40, %38 ]
  br i1 %3, label %74, label %20

20:                                               ; preds = %19
  %21 = zext i32 %.lcssa7 to i64
  %22 = add nuw i32 %2, 1
  %23 = zext i32 %22 to i64
  br label %47

24:                                               ; preds = %38, %8
  %25 = phi i64 [ 1, %8 ], [ %41, %38 ]
  %26 = phi i32 [ undef, %8 ], [ %40, %38 ]
  %27 = phi i32 [ 1000000000, %8 ], [ %39, %38 ]
  %28 = getelementptr inbounds %struct.bellbox, ptr %1, i64 %25, i32 1
  %29 = load i32, ptr %28, align 4, !tbaa !104
  %30 = icmp eq i32 %29, %.lcssa9
  br i1 %30, label %31, label %38

31:                                               ; preds = %24
  %32 = getelementptr inbounds %struct.bellbox, ptr %1, i64 %25
  %33 = load i32, ptr %32, align 4, !tbaa !102
  %34 = icmp slt i32 %33, %27
  %35 = tail call i32 @llvm.smin.i32(i32 %33, i32 %27)
  %36 = trunc i64 %25 to i32
  %37 = select i1 %34, i32 %36, i32 %26
  br label %38

38:                                               ; preds = %31, %24
  %39 = phi i32 [ %27, %24 ], [ %35, %31 ]
  %40 = phi i32 [ %26, %24 ], [ %37, %31 ]
  %41 = add nuw nsw i64 %25, 1
  %42 = icmp eq i64 %41, %10
  br i1 %42, label %19, label %24, !llvm.loop !106

43:                                               ; preds = %59
  %.lcssa6 = phi i32 [ %60, %59 ]
  br i1 %3, label %74, label %44

44:                                               ; preds = %43
  %45 = add nuw i32 %2, 1
  %46 = zext i32 %45 to i64
  br label %63

47:                                               ; preds = %59, %20
  %48 = phi i64 [ 1, %20 ], [ %61, %59 ]
  %49 = phi i32 [ 1000000000, %20 ], [ %60, %59 ]
  %50 = icmp eq i64 %48, %21
  br i1 %50, label %59, label %51

51:                                               ; preds = %47
  %52 = getelementptr inbounds %struct.bellbox, ptr %1, i64 %48, i32 1
  %53 = load i32, ptr %52, align 4, !tbaa !104
  %54 = icmp eq i32 %53, %.lcssa9
  br i1 %54, label %55, label %59

55:                                               ; preds = %51
  %56 = getelementptr inbounds %struct.bellbox, ptr %1, i64 %48
  %57 = load i32, ptr %56, align 4, !tbaa !102
  %58 = tail call i32 @llvm.smin.i32(i32 %57, i32 %49)
  br label %59

59:                                               ; preds = %55, %51, %47
  %60 = phi i32 [ %49, %47 ], [ %49, %51 ], [ %58, %55 ]
  %61 = add nuw nsw i64 %48, 1
  %62 = icmp eq i64 %61, %23
  br i1 %62, label %43, label %47, !llvm.loop !107

63:                                               ; preds = %63, %44
  %64 = phi i64 [ 1, %44 ], [ %72, %63 ]
  %65 = phi i32 [ 1000000000, %44 ], [ %71, %63 ]
  %66 = getelementptr inbounds %struct.bellbox, ptr %1, i64 %64, i32 1
  %67 = load i32, ptr %66, align 4, !tbaa !104
  %68 = icmp ne i32 %67, %.lcssa9
  %69 = icmp slt i32 %67, %65
  %70 = select i1 %68, i1 %69, i1 false
  %71 = select i1 %70, i32 %67, i32 %65
  %72 = add nuw nsw i64 %64, 1
  %73 = icmp eq i64 %72, %46
  br i1 %73, label %74, label %63, !llvm.loop !108

74:                                               ; preds = %63, %43, %19, %7, %0
  %75 = phi i32 [ 1000000000, %43 ], [ 1000000000, %19 ], [ 1000000000, %7 ], [ 1000000000, %0 ], [ %71, %63 ]
  %76 = phi i32 [ %.lcssa8, %43 ], [ %.lcssa8, %19 ], [ 1000000000, %7 ], [ 1000000000, %0 ], [ %.lcssa8, %63 ]
  %77 = phi i32 [ %.lcssa9, %43 ], [ %.lcssa9, %19 ], [ %.lcssa9, %7 ], [ 1000000000, %0 ], [ %.lcssa9, %63 ]
  %78 = phi i32 [ %.lcssa6, %43 ], [ 1000000000, %19 ], [ 1000000000, %7 ], [ 1000000000, %0 ], [ %.lcssa6, %63 ]
  %79 = load ptr, ptr @R, align 8, !tbaa !7
  %80 = getelementptr inbounds %struct.bellbox, ptr %79, i64 1
  store i32 %76, ptr %80, align 4, !tbaa !102
  %81 = getelementptr inbounds %struct.bellbox, ptr %79, i64 1, i32 1
  store i32 %77, ptr %81, align 4, !tbaa !104
  %82 = getelementptr inbounds %struct.bellbox, ptr %79, i64 2
  store i32 %76, ptr %82, align 4, !tbaa !102
  %83 = getelementptr inbounds %struct.bellbox, ptr %79, i64 2, i32 1
  store i32 %75, ptr %83, align 4, !tbaa !104
  %84 = getelementptr inbounds %struct.bellbox, ptr %79, i64 3
  store i32 %78, ptr %84, align 4, !tbaa !102
  %85 = getelementptr inbounds %struct.bellbox, ptr %79, i64 3, i32 1
  store i32 %75, ptr %85, align 4, !tbaa !104
  %86 = getelementptr inbounds %struct.bellbox, ptr %79, i64 4
  store i32 %78, ptr %86, align 4, !tbaa !102
  %87 = getelementptr inbounds %struct.bellbox, ptr %79, i64 4, i32 1
  store i32 %77, ptr %87, align 4, !tbaa !104
  %88 = load i32, ptr %1, align 4, !tbaa !102
  %89 = icmp slt i32 %88, 1
  br i1 %89, label %137, label %90

90:                                               ; preds = %74
  %91 = add nuw i32 %88, 1
  %92 = zext i32 %91 to i64
  br label %93

93:                                               ; preds = %108, %90
  %94 = phi i64 [ 1, %90 ], [ %109, %108 ]
  %95 = getelementptr inbounds %struct.bellbox, ptr %1, i64 %94
  %96 = load i32, ptr %95, align 4, !tbaa !102
  %97 = icmp eq i32 %76, %96
  br i1 %97, label %98, label %108

98:                                               ; preds = %93
  %99 = getelementptr inbounds %struct.bellbox, ptr %1, i64 %94, i32 1
  %100 = load i32, ptr %99, align 4, !tbaa !104
  %101 = icmp eq i32 %77, %100
  br i1 %101, label %102, label %108

102:                                              ; preds = %98
  %.lcssa4 = phi i64 [ %94, %98 ]
  %103 = getelementptr inbounds %struct.bellbox, ptr %1, i64 %.lcssa4
  %104 = sext i32 %88 to i64
  %105 = getelementptr inbounds %struct.bellbox, ptr %1, i64 %104
  %106 = add nsw i32 %88, -1
  store i32 %106, ptr %1, align 4, !tbaa !102
  %107 = load <2 x i32>, ptr %105, align 4, !tbaa !17
  store <2 x i32> %107, ptr %103, align 4, !tbaa !17
  br label %111

108:                                              ; preds = %98, %93
  %109 = add nuw nsw i64 %94, 1
  %110 = icmp eq i64 %109, %92
  br i1 %110, label %111, label %93, !llvm.loop !109

111:                                              ; preds = %108, %102
  %112 = phi i32 [ %106, %102 ], [ %88, %108 ]
  %113 = icmp slt i32 %112, 1
  br i1 %113, label %137, label %114

114:                                              ; preds = %111
  %115 = load i32, ptr %86, align 4, !tbaa !102
  %116 = add nuw i32 %112, 1
  %117 = zext i32 %116 to i64
  br label %118

118:                                              ; preds = %134, %114
  %119 = phi i64 [ 1, %114 ], [ %135, %134 ]
  %120 = getelementptr inbounds %struct.bellbox, ptr %1, i64 %119
  %121 = load i32, ptr %120, align 4, !tbaa !102
  %122 = icmp eq i32 %115, %121
  br i1 %122, label %123, label %134

123:                                              ; preds = %118
  %124 = load i32, ptr %87, align 4, !tbaa !104
  %125 = getelementptr inbounds %struct.bellbox, ptr %1, i64 %119, i32 1
  %126 = load i32, ptr %125, align 4, !tbaa !104
  %127 = icmp eq i32 %124, %126
  br i1 %127, label %128, label %134

128:                                              ; preds = %123
  %.lcssa2 = phi i64 [ %119, %123 ]
  %129 = getelementptr inbounds %struct.bellbox, ptr %1, i64 %.lcssa2
  %130 = sext i32 %112 to i64
  %131 = getelementptr inbounds %struct.bellbox, ptr %1, i64 %130
  %132 = add nsw i32 %112, -1
  store i32 %132, ptr %1, align 4, !tbaa !102
  %133 = load <2 x i32>, ptr %131, align 4, !tbaa !17
  store <2 x i32> %133, ptr %129, align 4, !tbaa !17
  br label %140

134:                                              ; preds = %123, %118
  %135 = add nuw nsw i64 %119, 1
  %136 = icmp eq i64 %135, %117
  br i1 %136, label %140, label %118, !llvm.loop !110

137:                                              ; preds = %111, %74
  %138 = phi i32 [ %112, %111 ], [ %88, %74 ]
  %139 = load i32, ptr %82, align 4, !tbaa !102
  br label %144

140:                                              ; preds = %134, %128
  %141 = phi i32 [ %132, %128 ], [ %112, %134 ]
  %142 = icmp slt i32 %141, 1
  %143 = load i32, ptr %82, align 4, !tbaa !102
  br i1 %142, label %144, label %148

144:                                              ; preds = %140, %137
  %145 = phi i32 [ %139, %137 ], [ %143, %140 ]
  %146 = phi i32 [ %138, %137 ], [ %141, %140 ]
  %147 = add nsw i32 %146, 1
  br label %170

148:                                              ; preds = %140
  %149 = add nuw i32 %141, 1
  %150 = zext i32 %149 to i64
  br label %151

151:                                              ; preds = %167, %148
  %152 = phi i64 [ 1, %148 ], [ %168, %167 ]
  %153 = getelementptr inbounds %struct.bellbox, ptr %1, i64 %152
  %154 = load i32, ptr %153, align 4, !tbaa !102
  %155 = icmp eq i32 %143, %154
  br i1 %155, label %156, label %167

156:                                              ; preds = %151
  %157 = load i32, ptr %83, align 4, !tbaa !104
  %158 = getelementptr inbounds %struct.bellbox, ptr %1, i64 %152, i32 1
  %159 = load i32, ptr %158, align 4, !tbaa !104
  %160 = icmp eq i32 %157, %159
  br i1 %160, label %161, label %167

161:                                              ; preds = %156
  %.lcssa1 = phi i64 [ %152, %156 ]
  %162 = getelementptr inbounds %struct.bellbox, ptr %1, i64 %.lcssa1
  %163 = sext i32 %141 to i64
  %164 = getelementptr inbounds %struct.bellbox, ptr %1, i64 %163
  %165 = add nsw i32 %141, -1
  store i32 %165, ptr %1, align 4, !tbaa !102
  %166 = load <2 x i32>, ptr %164, align 4, !tbaa !17
  store <2 x i32> %166, ptr %162, align 4, !tbaa !17
  br label %179

167:                                              ; preds = %156, %151
  %168 = add nuw nsw i64 %152, 1
  %169 = icmp eq i64 %168, %150
  br i1 %169, label %170, label %151, !llvm.loop !111

170:                                              ; preds = %167, %144
  %171 = phi i32 [ %145, %144 ], [ %143, %167 ]
  %172 = phi i32 [ %147, %144 ], [ %149, %167 ]
  store i32 %172, ptr %1, align 4, !tbaa !102
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds %struct.bellbox, ptr %1, i64 %173
  store i32 %171, ptr %174, align 4, !tbaa !102
  %175 = load i32, ptr %83, align 4, !tbaa !104
  %176 = load i32, ptr %1, align 4, !tbaa !102
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds %struct.bellbox, ptr %1, i64 %177, i32 1
  store i32 %175, ptr %178, align 4, !tbaa !104
  br label %179

179:                                              ; preds = %170, %161
  %180 = phi i32 [ %165, %161 ], [ %176, %170 ]
  %181 = icmp slt i32 %180, 1
  %182 = load i32, ptr %84, align 4, !tbaa !102
  %183 = add i32 %180, 1
  br i1 %181, label %205, label %184

184:                                              ; preds = %179
  %185 = zext i32 %183 to i64
  br label %186

186:                                              ; preds = %202, %184
  %187 = phi i64 [ 1, %184 ], [ %203, %202 ]
  %188 = getelementptr inbounds %struct.bellbox, ptr %1, i64 %187
  %189 = load i32, ptr %188, align 4, !tbaa !102
  %190 = icmp eq i32 %182, %189
  br i1 %190, label %191, label %202

191:                                              ; preds = %186
  %192 = load i32, ptr %85, align 4, !tbaa !104
  %193 = getelementptr inbounds %struct.bellbox, ptr %1, i64 %187, i32 1
  %194 = load i32, ptr %193, align 4, !tbaa !104
  %195 = icmp eq i32 %192, %194
  br i1 %195, label %196, label %202

196:                                              ; preds = %191
  %.lcssa = phi i64 [ %187, %191 ]
  %197 = getelementptr inbounds %struct.bellbox, ptr %1, i64 %.lcssa
  %198 = sext i32 %180 to i64
  %199 = getelementptr inbounds %struct.bellbox, ptr %1, i64 %198
  %200 = add nsw i32 %180, -1
  store i32 %200, ptr %1, align 4, !tbaa !102
  %201 = load <2 x i32>, ptr %199, align 4, !tbaa !17
  store <2 x i32> %201, ptr %197, align 4, !tbaa !17
  br label %212

202:                                              ; preds = %191, %186
  %203 = add nuw nsw i64 %187, 1
  %204 = icmp eq i64 %203, %185
  br i1 %204, label %205, label %186, !llvm.loop !112

205:                                              ; preds = %202, %179
  store i32 %183, ptr %1, align 4, !tbaa !102
  %206 = sext i32 %183 to i64
  %207 = getelementptr inbounds %struct.bellbox, ptr %1, i64 %206
  store i32 %182, ptr %207, align 4, !tbaa !102
  %208 = load i32, ptr %85, align 4, !tbaa !104
  %209 = load i32, ptr %1, align 4, !tbaa !102
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds %struct.bellbox, ptr %1, i64 %210, i32 1
  store i32 %208, ptr %211, align 4, !tbaa !104
  br label %212

212:                                              ; preds = %205, %196
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #13

; Function Attrs: nounwind optsize uwtable
define internal void @changraph() #0 {
  store ptr null, ptr @vChanBeginRoot, align 8, !tbaa !7
  store ptr null, ptr @vChanEndRoot, align 8, !tbaa !7
  store ptr null, ptr @hChanBeginRoot, align 8, !tbaa !7
  store ptr null, ptr @hChanEndRoot, align 8, !tbaa !7
  store i32 0, ptr @eNum, align 4, !tbaa !17
  %1 = tail call noalias dereferenceable_or_null(5600) ptr @malloc(i64 noundef 5600) #45
  store ptr %1, ptr @eArray, align 8, !tbaa !7
  tail call void @exploreUp() #43
  %2 = load i32, ptr @eNum, align 4, !tbaa !17
  store i32 %2, ptr @edgeTransition, align 4, !tbaa !17
  tail call void @exploreRite() #43
  %3 = load i32, ptr @numRects, align 4, !tbaa !17
  %4 = add i32 %3, 1
  %5 = sext i32 %4 to i64
  %6 = shl nsw i64 %5, 3
  %7 = tail call noalias ptr @malloc(i64 noundef %6) #45
  store ptr %7, ptr @eIndexArray, align 8, !tbaa !7
  %8 = icmp slt i32 %3, 1
  br i1 %8, label %12, label %9

9:                                                ; preds = %0
  %10 = shl nsw i64 %5, 2
  %11 = zext i32 %4 to i64
  br label %17

12:                                               ; preds = %17, %0
  %13 = load i32, ptr @eNum, align 4, !tbaa !17
  %14 = icmp slt i32 %13, 1
  br i1 %14, label %80, label %15

15:                                               ; preds = %12
  %16 = load ptr, ptr @eArray, align 8, !tbaa !7
  br label %24

17:                                               ; preds = %17, %9
  %18 = phi i64 [ 1, %9 ], [ %22, %17 ]
  %19 = tail call noalias ptr @malloc(i64 noundef %10) #45
  %20 = load ptr, ptr @eIndexArray, align 8, !tbaa !7
  %21 = getelementptr inbounds ptr, ptr %20, i64 %18
  store ptr %19, ptr %21, align 8, !tbaa !7
  %22 = add nuw nsw i64 %18, 1
  %23 = icmp eq i64 %22, %11
  br i1 %23, label %12, label %17, !llvm.loop !113

24:                                               ; preds = %57, %15
  %25 = phi ptr [ %16, %15 ], [ %72, %57 ]
  %26 = phi i64 [ 1, %15 ], [ %76, %57 ]
  %27 = getelementptr inbounds %struct.ebox, ptr %25, i64 %26
  %28 = load i32, ptr %27, align 8, !tbaa !114
  %29 = getelementptr inbounds %struct.ebox, ptr %25, i64 %26, i32 1
  %30 = load i32, ptr %29, align 4, !tbaa !116
  %31 = load ptr, ptr @eIndexArray, align 8, !tbaa !7
  %32 = sext i32 %28 to i64
  %33 = getelementptr inbounds ptr, ptr %31, i64 %32
  %34 = load ptr, ptr %33, align 8, !tbaa !7
  %35 = sext i32 %30 to i64
  %36 = getelementptr inbounds i32, ptr %34, i64 %35
  %37 = trunc i64 %26 to i32
  store i32 %37, ptr %36, align 4, !tbaa !17
  %38 = getelementptr inbounds ptr, ptr %31, i64 %35
  %39 = load ptr, ptr %38, align 8, !tbaa !7
  %40 = getelementptr inbounds i32, ptr %39, i64 %32
  store i32 %37, ptr %40, align 4, !tbaa !17
  %41 = load i32, ptr @edgeTransition, align 4, !tbaa !17
  %42 = sext i32 %41 to i64
  %43 = icmp sgt i64 %26, %42
  %44 = load ptr, ptr @rectArray, align 8, !tbaa !7
  %45 = getelementptr inbounds %struct.ebox, ptr %25, i64 %26, i32 3
  %46 = load i32, ptr %45, align 4, !tbaa !117
  br i1 %43, label %52, label %47

47:                                               ; preds = %24
  %48 = getelementptr inbounds %struct.rect, ptr %44, i64 %35, i32 6
  %49 = getelementptr inbounds %struct.rect, ptr %44, i64 %32, i32 7
  %50 = getelementptr inbounds %struct.rect, ptr %44, i64 %35, i32 1
  %51 = getelementptr inbounds %struct.rect, ptr %44, i64 %32, i32 1
  br label %57

52:                                               ; preds = %24
  %53 = getelementptr inbounds %struct.rect, ptr %44, i64 %35
  %54 = getelementptr inbounds %struct.rect, ptr %44, i64 %35, i32 4
  %55 = getelementptr inbounds %struct.rect, ptr %44, i64 %32
  %56 = getelementptr inbounds %struct.rect, ptr %44, i64 %32, i32 5
  br label %57

57:                                               ; preds = %52, %47
  %58 = phi ptr [ %55, %52 ], [ %51, %47 ]
  %59 = phi ptr [ %53, %52 ], [ %50, %47 ]
  %60 = phi ptr [ @hChanBeginRoot, %52 ], [ @vChanBeginRoot, %47 ]
  %61 = phi ptr [ @hChanEndRoot, %52 ], [ @vChanEndRoot, %47 ]
  %62 = phi ptr [ %54, %52 ], [ %48, %47 ]
  %63 = phi ptr [ %56, %52 ], [ %49, %47 ]
  %64 = load i32, ptr %63, align 4, !tbaa !17
  %65 = load i32, ptr %62, align 4, !tbaa !17
  %66 = load i32, ptr %59, align 4, !tbaa !17
  %67 = load i32, ptr %58, align 4, !tbaa !17
  %68 = sub nsw i32 %66, %67
  tail call void @tinsert(ptr noundef nonnull %60, i32 noundef %46, i32 noundef %37) #44
  %69 = load ptr, ptr @eArray, align 8, !tbaa !7
  %70 = getelementptr inbounds %struct.ebox, ptr %69, i64 %26, i32 4
  %71 = load i32, ptr %70, align 8, !tbaa !118
  tail call void @tinsert(ptr noundef nonnull %61, i32 noundef %71, i32 noundef %37) #44
  %72 = load ptr, ptr @eArray, align 8, !tbaa !7
  %73 = getelementptr inbounds %struct.ebox, ptr %72, i64 %26, i32 5
  store i32 %68, ptr %73, align 4, !tbaa !119
  %74 = getelementptr inbounds %struct.ebox, ptr %72, i64 %26, i32 6
  store i32 %65, ptr %74, align 8, !tbaa !120
  %75 = getelementptr inbounds %struct.ebox, ptr %72, i64 %26, i32 7
  store i32 %64, ptr %75, align 4, !tbaa !121
  %76 = add nuw nsw i64 %26, 1
  %77 = load i32, ptr @eNum, align 4, !tbaa !17
  %78 = sext i32 %77 to i64
  %79 = icmp slt i64 %26, %78
  br i1 %79, label %24, label %80, !llvm.loop !122

80:                                               ; preds = %57, %12
  %81 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %82 = tail call i64 @fwrite(ptr nonnull @.str.6, i64 21, i64 1, ptr %81)
  %83 = load i32, ptr @numRects, align 4, !tbaa !17
  %84 = icmp slt i32 %83, 1
  br i1 %84, label %109, label %85

85:                                               ; preds = %85, %80
  %86 = phi i64 [ %105, %85 ], [ 1, %80 ]
  %87 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %88 = load ptr, ptr @rectArray, align 8, !tbaa !7
  %89 = getelementptr inbounds %struct.rect, ptr %88, i64 %86
  %90 = load i32, ptr %89, align 4, !tbaa !123
  %91 = getelementptr inbounds %struct.rect, ptr %88, i64 %86, i32 1
  %92 = load i32, ptr %91, align 4, !tbaa !125
  %93 = getelementptr inbounds %struct.rect, ptr %88, i64 %86, i32 5
  %94 = load i32, ptr %93, align 4, !tbaa !126
  %95 = getelementptr inbounds %struct.rect, ptr %88, i64 %86, i32 4
  %96 = load i32, ptr %95, align 4, !tbaa !127
  %97 = sub nsw i32 %94, %96
  %98 = getelementptr inbounds %struct.rect, ptr %88, i64 %86, i32 7
  %99 = load i32, ptr %98, align 4, !tbaa !128
  %100 = getelementptr inbounds %struct.rect, ptr %88, i64 %86, i32 6
  %101 = load i32, ptr %100, align 4, !tbaa !129
  %102 = sub nsw i32 %99, %101
  %103 = trunc i64 %86 to i32
  %104 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %87, ptr noundef nonnull @.str.1.7, i32 noundef %103, i32 noundef %90, i32 noundef %92, i32 noundef %97, i32 noundef %102) #43
  %105 = add nuw nsw i64 %86, 1
  %106 = load i32, ptr @numRects, align 4, !tbaa !17
  %107 = sext i32 %106 to i64
  %108 = icmp slt i64 %86, %107
  br i1 %108, label %85, label %109, !llvm.loop !130

109:                                              ; preds = %85, %80
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @exploreUp() #0 {
  %1 = load i32, ptr @numRects, align 4, !tbaa !17
  %2 = icmp slt i32 %1, 1
  br i1 %2, label %61, label %3

3:                                                ; preds = %56, %0
  %4 = phi i64 [ %57, %56 ], [ 1, %0 ]
  %5 = load ptr, ptr @rectArray, align 8, !tbaa !7
  %6 = getelementptr inbounds %struct.rect, ptr %5, i64 %4, i32 6
  %7 = load i32, ptr %6, align 4, !tbaa !129
  %8 = getelementptr inbounds %struct.rect, ptr %5, i64 %4, i32 7
  %9 = load i32, ptr %8, align 4, !tbaa !128
  %10 = getelementptr inbounds %struct.rect, ptr %5, i64 %4, i32 5
  %11 = load i32, ptr %10, align 4, !tbaa !126
  %12 = getelementptr inbounds %struct.rect, ptr %5, i64 %4, i32 4
  %13 = load i32, ptr %12, align 4, !tbaa !127
  %14 = load ptr, ptr @BEptrs, align 8, !tbaa !7
  %15 = load ptr, ptr @BEroot, align 8, !tbaa !7
  %16 = tail call i32 @tprop(ptr noundef %15, i32 noundef %7) #44
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds ptr, ptr %14, i64 %17
  %19 = load ptr, ptr %18, align 8, !tbaa !7
  %20 = icmp eq ptr %19, null
  br i1 %20, label %56, label %21

21:                                               ; preds = %3
  %22 = load ptr, ptr @rectArray, align 8, !tbaa !7
  %23 = trunc i64 %4 to i32
  br label %24

24:                                               ; preds = %50, %21
  %25 = phi ptr [ %51, %50 ], [ %22, %21 ]
  %26 = phi ptr [ %54, %50 ], [ %19, %21 ]
  %27 = phi i32 [ %52, %50 ], [ 1000000, %21 ]
  %28 = load i32, ptr %26, align 8, !tbaa !131
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds %struct.rect, ptr %25, i64 %29, i32 6
  %31 = load i32, ptr %30, align 4, !tbaa !129
  %32 = icmp sgt i32 %31, %27
  br i1 %32, label %56, label %33

33:                                               ; preds = %24
  %34 = icmp sgt i32 %31, %9
  br i1 %34, label %35, label %50

35:                                               ; preds = %33
  %36 = getelementptr inbounds %struct.rect, ptr %25, i64 %29, i32 5
  %37 = load i32, ptr %36, align 4, !tbaa !126
  %38 = getelementptr inbounds %struct.rect, ptr %25, i64 %29, i32 4
  %39 = load i32, ptr %38, align 4, !tbaa !127
  %40 = icmp sgt i32 %39, %11
  %41 = icmp slt i32 %37, %13
  %42 = select i1 %40, i1 true, i1 %41
  br i1 %42, label %50, label %43

43:                                               ; preds = %35
  %44 = tail call i32 @constructVedge(i32 noundef %23, i32 noundef %28) #43, !range !133
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %56

46:                                               ; preds = %43
  %47 = load ptr, ptr @rectArray, align 8, !tbaa !7
  %48 = getelementptr inbounds %struct.rect, ptr %47, i64 %29, i32 7
  %49 = load i32, ptr %48, align 4, !tbaa !128
  br label %50

50:                                               ; preds = %46, %35, %33
  %51 = phi ptr [ %25, %33 ], [ %25, %35 ], [ %47, %46 ]
  %52 = phi i32 [ %27, %33 ], [ %27, %35 ], [ %49, %46 ]
  %53 = getelementptr inbounds %struct.dlink2, ptr %26, i64 0, i32 2
  %54 = load ptr, ptr %53, align 8, !tbaa !7
  %55 = icmp eq ptr %54, null
  br i1 %55, label %56, label %24, !llvm.loop !134

56:                                               ; preds = %50, %43, %24, %3
  %57 = add nuw nsw i64 %4, 1
  %58 = load i32, ptr @numRects, align 4, !tbaa !17
  %59 = sext i32 %58 to i64
  %60 = icmp slt i64 %4, %59
  br i1 %60, label %3, label %61, !llvm.loop !135

61:                                               ; preds = %56, %0
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @exploreRite() #0 {
  %1 = load i32, ptr @numRects, align 4, !tbaa !17
  %2 = icmp slt i32 %1, 1
  br i1 %2, label %61, label %3

3:                                                ; preds = %56, %0
  %4 = phi i64 [ %57, %56 ], [ 1, %0 ]
  %5 = load ptr, ptr @rectArray, align 8, !tbaa !7
  %6 = getelementptr inbounds %struct.rect, ptr %5, i64 %4, i32 4
  %7 = load i32, ptr %6, align 4, !tbaa !127
  %8 = getelementptr inbounds %struct.rect, ptr %5, i64 %4, i32 5
  %9 = load i32, ptr %8, align 4, !tbaa !126
  %10 = getelementptr inbounds %struct.rect, ptr %5, i64 %4, i32 7
  %11 = load i32, ptr %10, align 4, !tbaa !128
  %12 = getelementptr inbounds %struct.rect, ptr %5, i64 %4, i32 6
  %13 = load i32, ptr %12, align 4, !tbaa !129
  %14 = load ptr, ptr @LEptrs, align 8, !tbaa !7
  %15 = load ptr, ptr @LEroot, align 8, !tbaa !7
  %16 = tail call i32 @tprop(ptr noundef %15, i32 noundef %7) #44
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds ptr, ptr %14, i64 %17
  %19 = load ptr, ptr %18, align 8, !tbaa !7
  %20 = icmp eq ptr %19, null
  br i1 %20, label %56, label %21

21:                                               ; preds = %3
  %22 = load ptr, ptr @rectArray, align 8, !tbaa !7
  %23 = trunc i64 %4 to i32
  br label %24

24:                                               ; preds = %50, %21
  %25 = phi ptr [ %51, %50 ], [ %22, %21 ]
  %26 = phi ptr [ %54, %50 ], [ %19, %21 ]
  %27 = phi i32 [ %52, %50 ], [ 1000000, %21 ]
  %28 = load i32, ptr %26, align 8, !tbaa !131
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds %struct.rect, ptr %25, i64 %29, i32 4
  %31 = load i32, ptr %30, align 4, !tbaa !127
  %32 = icmp sgt i32 %31, %27
  br i1 %32, label %56, label %33

33:                                               ; preds = %24
  %34 = icmp sgt i32 %31, %9
  br i1 %34, label %35, label %50

35:                                               ; preds = %33
  %36 = getelementptr inbounds %struct.rect, ptr %25, i64 %29, i32 7
  %37 = load i32, ptr %36, align 4, !tbaa !128
  %38 = getelementptr inbounds %struct.rect, ptr %25, i64 %29, i32 6
  %39 = load i32, ptr %38, align 4, !tbaa !129
  %40 = icmp sgt i32 %39, %11
  %41 = icmp slt i32 %37, %13
  %42 = select i1 %40, i1 true, i1 %41
  br i1 %42, label %50, label %43

43:                                               ; preds = %35
  %44 = tail call i32 @constructHedge(i32 noundef %23, i32 noundef %28) #43, !range !133
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %56

46:                                               ; preds = %43
  %47 = load ptr, ptr @rectArray, align 8, !tbaa !7
  %48 = getelementptr inbounds %struct.rect, ptr %47, i64 %29, i32 5
  %49 = load i32, ptr %48, align 4, !tbaa !126
  br label %50

50:                                               ; preds = %46, %35, %33
  %51 = phi ptr [ %25, %33 ], [ %25, %35 ], [ %47, %46 ]
  %52 = phi i32 [ %27, %33 ], [ %27, %35 ], [ %49, %46 ]
  %53 = getelementptr inbounds %struct.dlink2, ptr %26, i64 0, i32 2
  %54 = load ptr, ptr %53, align 8, !tbaa !7
  %55 = icmp eq ptr %54, null
  br i1 %55, label %56, label %24, !llvm.loop !136

56:                                               ; preds = %50, %43, %24, %3
  %57 = add nuw nsw i64 %4, 1
  %58 = load i32, ptr @numRects, align 4, !tbaa !17
  %59 = sext i32 %58 to i64
  %60 = icmp slt i64 %4, %59
  br i1 %60, label %3, label %61, !llvm.loop !137

61:                                               ; preds = %56, %0
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @constructHedge(i32 noundef %0, i32 noundef %1) #0 {
  %3 = load ptr, ptr @rectArray, align 8, !tbaa !7
  %4 = sext i32 %0 to i64
  %5 = getelementptr inbounds %struct.rect, ptr %3, i64 %4, i32 6
  %6 = load i32, ptr %5, align 4, !tbaa !129
  %7 = getelementptr inbounds %struct.rect, ptr %3, i64 %4, i32 7
  %8 = load i32, ptr %7, align 4, !tbaa !128
  %9 = sext i32 %1 to i64
  %10 = getelementptr inbounds %struct.rect, ptr %3, i64 %9, i32 6
  %11 = load i32, ptr %10, align 4, !tbaa !129
  %12 = getelementptr inbounds %struct.rect, ptr %3, i64 %9, i32 7
  %13 = load i32, ptr %12, align 4, !tbaa !128
  %14 = tail call i32 @llvm.smax.i32(i32 %6, i32 %11)
  %15 = tail call i32 @llvm.smin.i32(i32 %8, i32 %13)
  %16 = getelementptr inbounds %struct.rect, ptr %3, i64 %4, i32 5
  %17 = load i32, ptr %16, align 4, !tbaa !126
  %18 = getelementptr inbounds %struct.rect, ptr %3, i64 %9, i32 4
  %19 = load i32, ptr %18, align 4, !tbaa !127
  %20 = load ptr, ptr @HRptrs, align 8, !tbaa !7
  %21 = load ptr, ptr @HRroot, align 8, !tbaa !7
  %22 = tail call i32 @tprop(ptr noundef %21, i32 noundef %14) #44
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds ptr, ptr %20, i64 %23
  %25 = load ptr, ptr %24, align 8, !tbaa !7
  %26 = icmp eq ptr %25, null
  br i1 %26, label %324, label %27

27:                                               ; preds = %2
  %28 = load ptr, ptr @edgeList, align 8, !tbaa !7
  br label %29

29:                                               ; preds = %52, %27
  %30 = phi ptr [ %25, %27 ], [ %56, %52 ]
  %31 = phi ptr [ undef, %27 ], [ %54, %52 ]
  %32 = phi i32 [ -1000000, %27 ], [ %53, %52 ]
  %33 = load i32, ptr %30, align 8, !tbaa !138
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds %struct.edgebox, ptr %28, i64 %34, i32 3
  %36 = load i32, ptr %35, align 4, !tbaa !140
  %37 = icmp sgt i32 %36, %15
  br i1 %37, label %58, label %38

38:                                               ; preds = %29
  %39 = getelementptr inbounds %struct.edgebox, ptr %28, i64 %34, i32 5
  %40 = load i32, ptr %39, align 4, !tbaa !142
  %41 = icmp slt i32 %40, 0
  br i1 %41, label %52, label %42

42:                                               ; preds = %38
  %43 = getelementptr inbounds %struct.edgebox, ptr %28, i64 %34, i32 1
  %44 = load i32, ptr %43, align 4, !tbaa !143
  %45 = icmp sgt i32 %44, %17
  br i1 %45, label %52, label %46

46:                                               ; preds = %42
  %47 = getelementptr inbounds %struct.edgebox, ptr %28, i64 %34, i32 2
  %48 = load i32, ptr %47, align 4, !tbaa !144
  %49 = icmp slt i32 %48, %19
  %50 = select i1 %49, i32 %32, i32 %36
  %51 = select i1 %49, ptr %31, ptr %30
  br label %52

52:                                               ; preds = %46, %42, %38
  %53 = phi i32 [ %32, %38 ], [ %32, %42 ], [ %50, %46 ]
  %54 = phi ptr [ %31, %38 ], [ %31, %42 ], [ %51, %46 ]
  %55 = getelementptr inbounds %struct.dlink2, ptr %30, i64 0, i32 2
  %56 = load ptr, ptr %55, align 8, !tbaa !7
  %57 = icmp eq ptr %56, null
  br i1 %57, label %58, label %29, !llvm.loop !145

58:                                               ; preds = %52, %29
  %59 = phi i32 [ %53, %52 ], [ %32, %29 ]
  %60 = phi ptr [ %54, %52 ], [ %31, %29 ]
  %61 = icmp eq i32 %59, -1000000
  br i1 %61, label %324, label %62

62:                                               ; preds = %58
  %63 = load ptr, ptr @Hptrs, align 8, !tbaa !7
  %64 = load ptr, ptr @Hroot, align 8, !tbaa !7
  %65 = tail call i32 @tprop(ptr noundef %64, i32 noundef %59) #44
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds ptr, ptr %63, i64 %66
  %68 = load ptr, ptr %67, align 8, !tbaa !7
  %69 = icmp eq ptr %68, null
  %70 = load ptr, ptr @edgeList, align 8, !tbaa !7
  br i1 %69, label %94, label %71

71:                                               ; preds = %86, %62
  %72 = phi ptr [ %88, %86 ], [ %68, %62 ]
  %73 = load i32, ptr %72, align 8, !tbaa !138
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds %struct.edgebox, ptr %70, i64 %74, i32 5
  %76 = load i32, ptr %75, align 4, !tbaa !142
  %77 = icmp sgt i32 %76, 0
  br i1 %77, label %86, label %78

78:                                               ; preds = %71
  %79 = getelementptr inbounds %struct.edgebox, ptr %70, i64 %74, i32 1
  %80 = load i32, ptr %79, align 4, !tbaa !143
  %81 = icmp sgt i32 %80, %17
  br i1 %81, label %86, label %82

82:                                               ; preds = %78
  %83 = getelementptr inbounds %struct.edgebox, ptr %70, i64 %74, i32 2
  %84 = load i32, ptr %83, align 4, !tbaa !144
  %85 = icmp slt i32 %84, %19
  br i1 %85, label %86, label %90

86:                                               ; preds = %82, %78, %71
  %87 = getelementptr inbounds %struct.dlink2, ptr %72, i64 0, i32 2
  %88 = load ptr, ptr %87, align 8, !tbaa !7
  %89 = icmp eq ptr %88, null
  br i1 %89, label %94, label %71, !llvm.loop !146

90:                                               ; preds = %82
  %.lcssa3 = phi ptr [ %72, %82 ]
  %.lcssa2 = phi i32 [ %73, %82 ]
  %.lcssa1 = phi i64 [ %74, %82 ]
  %91 = getelementptr inbounds %struct.edgebox, ptr %70, i64 %.lcssa1, i32 3
  %92 = load i32, ptr %91, align 4, !tbaa !140
  %93 = icmp sgt i32 %92, %15
  br i1 %93, label %324, label %94

94:                                               ; preds = %90, %86, %62
  %95 = phi ptr [ %.lcssa3, %90 ], [ null, %62 ], [ null, %86 ]
  %96 = phi i32 [ %92, %90 ], [ undef, %62 ], [ undef, %86 ]
  %97 = phi i32 [ %.lcssa2, %90 ], [ undef, %62 ], [ %73, %86 ]
  %98 = load i32, ptr %60, align 8, !tbaa !138
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds %struct.edgebox, ptr %70, i64 %99, i32 2
  %101 = load i32, ptr %100, align 4, !tbaa !144
  %102 = getelementptr inbounds %struct.edgebox, ptr %70, i64 %99, i32 1
  %103 = load i32, ptr %102, align 4, !tbaa !143
  %104 = sext i32 %97 to i64
  %105 = getelementptr inbounds %struct.edgebox, ptr %70, i64 %104
  %106 = getelementptr inbounds %struct.edgebox, ptr %70, i64 %104, i32 2
  %107 = load i32, ptr %106, align 4, !tbaa !144
  %108 = getelementptr inbounds %struct.edgebox, ptr %70, i64 %104, i32 1
  %109 = load i32, ptr %108, align 4, !tbaa !143
  %110 = getelementptr inbounds %struct.edgebox, ptr %70, i64 %99, i32 6
  %111 = load i32, ptr %110, align 4, !tbaa !147
  %112 = icmp eq i32 %111, 1
  %113 = getelementptr inbounds %struct.edgebox, ptr %70, i64 %104, i32 6
  %114 = load i32, ptr %113, align 4, !tbaa !147
  %115 = icmp eq i32 %114, 1
  br i1 %112, label %116, label %133

116:                                              ; preds = %94
  %117 = getelementptr inbounds %struct.edgebox, ptr %70, i64 %99
  %118 = load i32, ptr %117, align 4, !tbaa !148
  %119 = icmp sgt i32 %118, 0
  br i1 %115, label %120, label %130

120:                                              ; preds = %116
  %121 = load i32, ptr %105, align 4, !tbaa !148
  %122 = icmp sgt i32 %121, 0
  br i1 %119, label %123, label %127

123:                                              ; preds = %120
  br i1 %122, label %124, label %139

124:                                              ; preds = %123
  %125 = tail call i32 @llvm.smax.i32(i32 %101, i32 %107)
  %126 = tail call i32 @llvm.smin.i32(i32 %103, i32 %109)
  br label %139

127:                                              ; preds = %120
  %128 = select i1 %122, i32 %109, i32 -1000000
  %129 = select i1 %122, i32 %107, i32 1000000
  br label %139

130:                                              ; preds = %116
  %131 = select i1 %119, i32 %103, i32 -1000000
  %132 = select i1 %119, i32 %101, i32 1000000
  br label %139

133:                                              ; preds = %94
  br i1 %115, label %134, label %139

134:                                              ; preds = %133
  %135 = load i32, ptr %105, align 4, !tbaa !148
  %136 = icmp sgt i32 %135, 0
  %137 = select i1 %136, i32 %109, i32 -1000000
  %138 = select i1 %136, i32 %107, i32 1000000
  br label %139

139:                                              ; preds = %134, %133, %130, %127, %124, %123
  %140 = phi i32 [ %126, %124 ], [ %128, %127 ], [ %131, %130 ], [ %137, %134 ], [ -1000000, %133 ], [ %103, %123 ]
  %141 = phi i32 [ %125, %124 ], [ %129, %127 ], [ %132, %130 ], [ %138, %134 ], [ 1000000, %133 ], [ %101, %123 ]
  %142 = load ptr, ptr @rectArray, align 8, !tbaa !7
  %143 = getelementptr inbounds %struct.rect, ptr %142, i64 %9
  %144 = getelementptr inbounds %struct.rect, ptr %142, i64 %9, i32 5
  %145 = load i32, ptr %144, align 4, !tbaa !126
  %146 = icmp sgt i32 %141, %145
  br i1 %146, label %152, label %147

147:                                              ; preds = %139
  %148 = load i32, ptr %143, align 4, !tbaa !123
  %149 = icmp slt i32 %148, %141
  br i1 %149, label %150, label %152

150:                                              ; preds = %147
  store i32 %141, ptr %143, align 4, !tbaa !123
  %151 = getelementptr inbounds %struct.rect, ptr %142, i64 %9, i32 2
  store i32 2, ptr %151, align 4, !tbaa !149
  br label %152

152:                                              ; preds = %150, %147, %139
  %153 = getelementptr inbounds %struct.rect, ptr %142, i64 %4
  %154 = getelementptr inbounds %struct.rect, ptr %142, i64 %4, i32 4
  %155 = load i32, ptr %154, align 4, !tbaa !127
  %156 = icmp slt i32 %140, %155
  br i1 %156, label %162, label %157

157:                                              ; preds = %152
  %158 = load i32, ptr %153, align 4, !tbaa !123
  %159 = icmp sgt i32 %158, %140
  br i1 %159, label %160, label %162

160:                                              ; preds = %157
  store i32 %140, ptr %153, align 4, !tbaa !123
  %161 = getelementptr inbounds %struct.rect, ptr %142, i64 %4, i32 2
  store i32 1, ptr %161, align 4, !tbaa !149
  br label %162

162:                                              ; preds = %160, %157, %152
  %163 = getelementptr inbounds %struct.rect, ptr %142, i64 %4, i32 1
  %164 = load i32, ptr %163, align 4, !tbaa !125
  %165 = icmp slt i32 %164, %59
  %166 = icmp sgt i32 %164, %96
  %167 = or i1 %165, %166
  br i1 %167, label %168, label %171

168:                                              ; preds = %162
  %169 = add nsw i32 %96, %59
  %170 = sdiv i32 %169, 2
  store i32 %170, ptr %163, align 4, !tbaa !125
  br label %171

171:                                              ; preds = %168, %162
  %172 = getelementptr inbounds %struct.rect, ptr %142, i64 %9, i32 1
  %173 = load i32, ptr %172, align 4, !tbaa !125
  %174 = icmp slt i32 %173, %59
  %175 = icmp sgt i32 %173, %96
  %176 = or i1 %174, %175
  br i1 %176, label %177, label %180

177:                                              ; preds = %171
  %178 = add nsw i32 %96, %59
  %179 = sdiv i32 %178, 2
  store i32 %179, ptr %172, align 4, !tbaa !125
  br label %180

180:                                              ; preds = %177, %171
  %181 = icmp eq i32 %111, 0
  br i1 %181, label %182, label %240

182:                                              ; preds = %180
  %183 = load ptr, ptr @Hptrs, align 8, !tbaa !7
  %184 = load ptr, ptr @Hroot, align 8, !tbaa !7
  %185 = tail call i32 @tprop(ptr noundef %184, i32 noundef %59) #44
  %186 = sext i32 %185 to i64
  %187 = getelementptr inbounds ptr, ptr %183, i64 %186
  %188 = load ptr, ptr %187, align 8, !tbaa !7
  %189 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %190 = load i32, ptr %188, align 8, !tbaa !138
  %191 = sext i32 %190 to i64
  %192 = getelementptr inbounds %struct.edgebox, ptr %189, i64 %191, i32 3
  %193 = load i32, ptr %192, align 4, !tbaa !140
  br label %194

194:                                              ; preds = %199, %182
  %195 = phi ptr [ %188, %182 ], [ %197, %199 ]
  %196 = getelementptr inbounds %struct.dlink2, ptr %195, i64 0, i32 2
  %197 = load ptr, ptr %196, align 8, !tbaa !150
  %198 = icmp eq ptr %197, null
  br i1 %198, label %205, label %199

199:                                              ; preds = %194
  %200 = load i32, ptr %197, align 8, !tbaa !138
  %201 = sext i32 %200 to i64
  %202 = getelementptr inbounds %struct.edgebox, ptr %189, i64 %201, i32 3
  %203 = load i32, ptr %202, align 4, !tbaa !140
  %204 = icmp sgt i32 %203, %193
  br i1 %204, label %205, label %194, !llvm.loop !151

205:                                              ; preds = %199, %194
  %.lcssa = phi ptr [ %197, %199 ], [ %197, %194 ]
  %206 = getelementptr inbounds %struct.dlink2, ptr %.lcssa, i64 0, i32 1
  %207 = load ptr, ptr %206, align 8, !tbaa !152
  %208 = icmp eq ptr %207, null
  br i1 %208, label %232, label %209

209:                                              ; preds = %227, %205
  %210 = phi ptr [ %230, %227 ], [ %207, %205 ]
  %211 = phi i32 [ %228, %227 ], [ undef, %205 ]
  %212 = icmp eq ptr %210, %95
  br i1 %212, label %227, label %213

213:                                              ; preds = %209
  %214 = load i32, ptr %210, align 8, !tbaa !138
  %215 = sext i32 %214 to i64
  %216 = getelementptr inbounds %struct.edgebox, ptr %189, i64 %215, i32 5
  %217 = load i32, ptr %216, align 4, !tbaa !142
  %218 = icmp sgt i32 %217, 0
  br i1 %218, label %227, label %219

219:                                              ; preds = %213
  %220 = getelementptr inbounds %struct.edgebox, ptr %189, i64 %215, i32 1
  %221 = load i32, ptr %220, align 4, !tbaa !143
  %222 = icmp sgt i32 %221, %17
  br i1 %222, label %227, label %223

223:                                              ; preds = %219
  %224 = getelementptr inbounds %struct.edgebox, ptr %189, i64 %215, i32 2
  %225 = load i32, ptr %224, align 4, !tbaa !144
  %226 = icmp slt i32 %225, %19
  br i1 %226, label %227, label %232

227:                                              ; preds = %223, %219, %213, %209
  %228 = phi i32 [ %211, %209 ], [ %214, %213 ], [ %214, %219 ], [ %214, %223 ]
  %229 = getelementptr inbounds %struct.dlink2, ptr %210, i64 0, i32 1
  %230 = load ptr, ptr %229, align 8, !tbaa !152
  %231 = icmp eq ptr %230, null
  br i1 %231, label %232, label %209, !llvm.loop !153

232:                                              ; preds = %227, %223, %205
  %233 = phi i32 [ undef, %205 ], [ %214, %223 ], [ %228, %227 ]
  %234 = sext i32 %233 to i64
  %235 = getelementptr inbounds %struct.edgebox, ptr %189, i64 %234, i32 3
  %236 = load i32, ptr %235, align 4, !tbaa !140
  %237 = sub nsw i32 %59, %236
  %238 = sdiv i32 %237, 2
  %239 = add i32 %236, %238
  br label %240

240:                                              ; preds = %232, %180
  %241 = phi ptr [ %189, %232 ], [ %70, %180 ]
  %242 = phi i32 [ %239, %232 ], [ %59, %180 ]
  %243 = phi i32 [ %233, %232 ], [ undef, %180 ]
  %244 = getelementptr inbounds %struct.edgebox, ptr %241, i64 %104, i32 6
  %245 = load i32, ptr %244, align 4, !tbaa !147
  %246 = icmp eq i32 %245, 0
  br i1 %246, label %247, label %287

247:                                              ; preds = %240
  %248 = load ptr, ptr @Hptrs, align 8, !tbaa !7
  %249 = load ptr, ptr @Hroot, align 8, !tbaa !7
  %250 = tail call i32 @tprop(ptr noundef %249, i32 noundef %96) #44
  %251 = sext i32 %250 to i64
  %252 = getelementptr inbounds ptr, ptr %248, i64 %251
  %253 = load ptr, ptr %252, align 8, !tbaa !7
  %254 = icmp eq ptr %253, null
  %255 = load ptr, ptr @edgeList, align 8
  br i1 %254, label %279, label %256

256:                                              ; preds = %274, %247
  %257 = phi ptr [ %277, %274 ], [ %253, %247 ]
  %258 = phi i32 [ %275, %274 ], [ %243, %247 ]
  %259 = icmp eq ptr %257, %60
  br i1 %259, label %274, label %260

260:                                              ; preds = %256
  %261 = load i32, ptr %257, align 8, !tbaa !138
  %262 = sext i32 %261 to i64
  %263 = getelementptr inbounds %struct.edgebox, ptr %255, i64 %262, i32 5
  %264 = load i32, ptr %263, align 4, !tbaa !142
  %265 = icmp slt i32 %264, 0
  br i1 %265, label %274, label %266

266:                                              ; preds = %260
  %267 = getelementptr inbounds %struct.edgebox, ptr %255, i64 %262, i32 1
  %268 = load i32, ptr %267, align 4, !tbaa !143
  %269 = icmp sgt i32 %268, %17
  br i1 %269, label %274, label %270

270:                                              ; preds = %266
  %271 = getelementptr inbounds %struct.edgebox, ptr %255, i64 %262, i32 2
  %272 = load i32, ptr %271, align 4, !tbaa !144
  %273 = icmp slt i32 %272, %19
  br i1 %273, label %274, label %279

274:                                              ; preds = %270, %266, %260, %256
  %275 = phi i32 [ %258, %256 ], [ %261, %260 ], [ %261, %266 ], [ %261, %270 ]
  %276 = getelementptr inbounds %struct.dlink2, ptr %257, i64 0, i32 2
  %277 = load ptr, ptr %276, align 8, !tbaa !7
  %278 = icmp eq ptr %277, null
  br i1 %278, label %279, label %256, !llvm.loop !154

279:                                              ; preds = %274, %270, %247
  %280 = phi i32 [ %243, %247 ], [ %261, %270 ], [ %275, %274 ]
  %281 = sext i32 %280 to i64
  %282 = getelementptr inbounds %struct.edgebox, ptr %255, i64 %281, i32 3
  %283 = load i32, ptr %282, align 4, !tbaa !140
  %284 = sub nsw i32 %283, %96
  %285 = sdiv i32 %284, 2
  %286 = add nsw i32 %285, %96
  br label %287

287:                                              ; preds = %279, %240
  %288 = phi i32 [ %286, %279 ], [ %96, %240 ]
  %289 = load i32, ptr @eNum, align 4, !tbaa !17
  %290 = add nsw i32 %289, 1
  store i32 %290, ptr @eNum, align 4, !tbaa !17
  %291 = srem i32 %290, 100
  %292 = icmp eq i32 %291, 0
  %293 = load ptr, ptr @eArray, align 8, !tbaa !7
  br i1 %292, label %294, label %300

294:                                              ; preds = %287
  %295 = add nsw i32 %289, 101
  %296 = sext i32 %295 to i64
  %297 = mul nsw i64 %296, 56
  %298 = tail call ptr @realloc(ptr noundef %293, i64 noundef %297) #46
  store ptr %298, ptr @eArray, align 8, !tbaa !7
  %299 = load i32, ptr @eNum, align 4, !tbaa !17
  br label %300

300:                                              ; preds = %294, %287
  %301 = phi i32 [ %299, %294 ], [ %290, %287 ]
  %302 = phi ptr [ %298, %294 ], [ %293, %287 ]
  %303 = sext i32 %301 to i64
  %304 = getelementptr inbounds %struct.ebox, ptr %302, i64 %303
  store i32 %0, ptr %304, align 8, !tbaa !114
  %305 = load i32, ptr @eNum, align 4, !tbaa !17
  %306 = sext i32 %305 to i64
  %307 = getelementptr inbounds %struct.ebox, ptr %302, i64 %306, i32 1
  store i32 %1, ptr %307, align 4, !tbaa !116
  %308 = sub nsw i32 %288, %242
  %309 = load i32, ptr @eNum, align 4, !tbaa !17
  %310 = sext i32 %309 to i64
  %311 = getelementptr inbounds %struct.ebox, ptr %302, i64 %310, i32 2
  store i32 %308, ptr %311, align 8, !tbaa !155
  %312 = load i32, ptr @eNum, align 4, !tbaa !17
  %313 = sext i32 %312 to i64
  %314 = getelementptr inbounds %struct.ebox, ptr %302, i64 %313, i32 3
  store i32 %242, ptr %314, align 4, !tbaa !117
  %315 = load i32, ptr @eNum, align 4, !tbaa !17
  %316 = sext i32 %315 to i64
  %317 = getelementptr inbounds %struct.ebox, ptr %302, i64 %316, i32 4
  store i32 %288, ptr %317, align 8, !tbaa !118
  %318 = load i32, ptr @eNum, align 4, !tbaa !17
  %319 = sext i32 %318 to i64
  %320 = getelementptr inbounds %struct.ebox, ptr %302, i64 %319, i32 8
  store i32 %98, ptr %320, align 8, !tbaa !156
  %321 = load i32, ptr @eNum, align 4, !tbaa !17
  %322 = sext i32 %321 to i64
  %323 = getelementptr inbounds %struct.ebox, ptr %302, i64 %322, i32 9
  store i32 %97, ptr %323, align 4, !tbaa !157
  br label %324

324:                                              ; preds = %300, %90, %58, %2
  %325 = phi i32 [ 1, %300 ], [ 0, %58 ], [ 0, %90 ], [ 0, %2 ]
  ret i32 %325
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #13

; Function Attrs: nounwind optsize uwtable
define internal i32 @constructVedge(i32 noundef %0, i32 noundef %1) #0 {
  %3 = load ptr, ptr @rectArray, align 8, !tbaa !7
  %4 = sext i32 %0 to i64
  %5 = getelementptr inbounds %struct.rect, ptr %3, i64 %4, i32 4
  %6 = load i32, ptr %5, align 4, !tbaa !127
  %7 = getelementptr inbounds %struct.rect, ptr %3, i64 %4, i32 5
  %8 = load i32, ptr %7, align 4, !tbaa !126
  %9 = sext i32 %1 to i64
  %10 = getelementptr inbounds %struct.rect, ptr %3, i64 %9, i32 4
  %11 = load i32, ptr %10, align 4, !tbaa !127
  %12 = getelementptr inbounds %struct.rect, ptr %3, i64 %9, i32 5
  %13 = load i32, ptr %12, align 4, !tbaa !126
  %14 = tail call i32 @llvm.smax.i32(i32 %6, i32 %11)
  %15 = tail call i32 @llvm.smin.i32(i32 %8, i32 %13)
  %16 = getelementptr inbounds %struct.rect, ptr %3, i64 %4, i32 7
  %17 = load i32, ptr %16, align 4, !tbaa !128
  %18 = getelementptr inbounds %struct.rect, ptr %3, i64 %9, i32 6
  %19 = load i32, ptr %18, align 4, !tbaa !129
  %20 = load ptr, ptr @VDptrs, align 8, !tbaa !7
  %21 = load ptr, ptr @VDroot, align 8, !tbaa !7
  %22 = tail call i32 @tprop(ptr noundef %21, i32 noundef %14) #44
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds ptr, ptr %20, i64 %23
  %25 = load ptr, ptr %24, align 8, !tbaa !7
  %26 = icmp eq ptr %25, null
  br i1 %26, label %324, label %27

27:                                               ; preds = %2
  %28 = load ptr, ptr @edgeList, align 8, !tbaa !7
  br label %29

29:                                               ; preds = %52, %27
  %30 = phi ptr [ %25, %27 ], [ %56, %52 ]
  %31 = phi ptr [ undef, %27 ], [ %54, %52 ]
  %32 = phi i32 [ -1000000, %27 ], [ %53, %52 ]
  %33 = load i32, ptr %30, align 8, !tbaa !138
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds %struct.edgebox, ptr %28, i64 %34, i32 3
  %36 = load i32, ptr %35, align 4, !tbaa !140
  %37 = icmp sgt i32 %36, %15
  br i1 %37, label %58, label %38

38:                                               ; preds = %29
  %39 = getelementptr inbounds %struct.edgebox, ptr %28, i64 %34, i32 5
  %40 = load i32, ptr %39, align 4, !tbaa !142
  %41 = icmp sgt i32 %40, 0
  br i1 %41, label %52, label %42

42:                                               ; preds = %38
  %43 = getelementptr inbounds %struct.edgebox, ptr %28, i64 %34, i32 1
  %44 = load i32, ptr %43, align 4, !tbaa !143
  %45 = icmp sgt i32 %44, %17
  br i1 %45, label %52, label %46

46:                                               ; preds = %42
  %47 = getelementptr inbounds %struct.edgebox, ptr %28, i64 %34, i32 2
  %48 = load i32, ptr %47, align 4, !tbaa !144
  %49 = icmp slt i32 %48, %19
  %50 = select i1 %49, i32 %32, i32 %36
  %51 = select i1 %49, ptr %31, ptr %30
  br label %52

52:                                               ; preds = %46, %42, %38
  %53 = phi i32 [ %32, %38 ], [ %32, %42 ], [ %50, %46 ]
  %54 = phi ptr [ %31, %38 ], [ %31, %42 ], [ %51, %46 ]
  %55 = getelementptr inbounds %struct.dlink2, ptr %30, i64 0, i32 2
  %56 = load ptr, ptr %55, align 8, !tbaa !7
  %57 = icmp eq ptr %56, null
  br i1 %57, label %58, label %29, !llvm.loop !158

58:                                               ; preds = %52, %29
  %59 = phi i32 [ %53, %52 ], [ %32, %29 ]
  %60 = phi ptr [ %54, %52 ], [ %31, %29 ]
  %61 = icmp eq i32 %59, -1000000
  br i1 %61, label %324, label %62

62:                                               ; preds = %58
  %63 = load ptr, ptr @Vptrs, align 8, !tbaa !7
  %64 = load ptr, ptr @Vroot, align 8, !tbaa !7
  %65 = tail call i32 @tprop(ptr noundef %64, i32 noundef %59) #44
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds ptr, ptr %63, i64 %66
  %68 = load ptr, ptr %67, align 8, !tbaa !7
  %69 = icmp eq ptr %68, null
  %70 = load ptr, ptr @edgeList, align 8, !tbaa !7
  br i1 %69, label %94, label %71

71:                                               ; preds = %86, %62
  %72 = phi ptr [ %88, %86 ], [ %68, %62 ]
  %73 = load i32, ptr %72, align 8, !tbaa !138
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds %struct.edgebox, ptr %70, i64 %74, i32 5
  %76 = load i32, ptr %75, align 4, !tbaa !142
  %77 = icmp slt i32 %76, 0
  br i1 %77, label %86, label %78

78:                                               ; preds = %71
  %79 = getelementptr inbounds %struct.edgebox, ptr %70, i64 %74, i32 1
  %80 = load i32, ptr %79, align 4, !tbaa !143
  %81 = icmp sgt i32 %80, %17
  br i1 %81, label %86, label %82

82:                                               ; preds = %78
  %83 = getelementptr inbounds %struct.edgebox, ptr %70, i64 %74, i32 2
  %84 = load i32, ptr %83, align 4, !tbaa !144
  %85 = icmp slt i32 %84, %19
  br i1 %85, label %86, label %90

86:                                               ; preds = %82, %78, %71
  %87 = getelementptr inbounds %struct.dlink2, ptr %72, i64 0, i32 2
  %88 = load ptr, ptr %87, align 8, !tbaa !7
  %89 = icmp eq ptr %88, null
  br i1 %89, label %94, label %71, !llvm.loop !159

90:                                               ; preds = %82
  %.lcssa3 = phi ptr [ %72, %82 ]
  %.lcssa2 = phi i32 [ %73, %82 ]
  %.lcssa1 = phi i64 [ %74, %82 ]
  %91 = getelementptr inbounds %struct.edgebox, ptr %70, i64 %.lcssa1, i32 3
  %92 = load i32, ptr %91, align 4, !tbaa !140
  %93 = icmp sgt i32 %92, %15
  br i1 %93, label %324, label %94

94:                                               ; preds = %90, %86, %62
  %95 = phi ptr [ %.lcssa3, %90 ], [ null, %62 ], [ null, %86 ]
  %96 = phi i32 [ %92, %90 ], [ undef, %62 ], [ undef, %86 ]
  %97 = phi i32 [ %.lcssa2, %90 ], [ undef, %62 ], [ %73, %86 ]
  %98 = load i32, ptr %60, align 8, !tbaa !138
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds %struct.edgebox, ptr %70, i64 %99, i32 2
  %101 = load i32, ptr %100, align 4, !tbaa !144
  %102 = getelementptr inbounds %struct.edgebox, ptr %70, i64 %99, i32 1
  %103 = load i32, ptr %102, align 4, !tbaa !143
  %104 = sext i32 %97 to i64
  %105 = getelementptr inbounds %struct.edgebox, ptr %70, i64 %104
  %106 = getelementptr inbounds %struct.edgebox, ptr %70, i64 %104, i32 2
  %107 = load i32, ptr %106, align 4, !tbaa !144
  %108 = getelementptr inbounds %struct.edgebox, ptr %70, i64 %104, i32 1
  %109 = load i32, ptr %108, align 4, !tbaa !143
  %110 = getelementptr inbounds %struct.edgebox, ptr %70, i64 %99, i32 6
  %111 = load i32, ptr %110, align 4, !tbaa !147
  %112 = icmp eq i32 %111, 1
  %113 = getelementptr inbounds %struct.edgebox, ptr %70, i64 %104, i32 6
  %114 = load i32, ptr %113, align 4, !tbaa !147
  %115 = icmp eq i32 %114, 1
  br i1 %112, label %116, label %133

116:                                              ; preds = %94
  %117 = getelementptr inbounds %struct.edgebox, ptr %70, i64 %99
  %118 = load i32, ptr %117, align 4, !tbaa !148
  %119 = icmp sgt i32 %118, 0
  br i1 %115, label %120, label %130

120:                                              ; preds = %116
  %121 = load i32, ptr %105, align 4, !tbaa !148
  %122 = icmp sgt i32 %121, 0
  br i1 %119, label %123, label %127

123:                                              ; preds = %120
  br i1 %122, label %124, label %139

124:                                              ; preds = %123
  %125 = tail call i32 @llvm.smax.i32(i32 %101, i32 %107)
  %126 = tail call i32 @llvm.smin.i32(i32 %103, i32 %109)
  br label %139

127:                                              ; preds = %120
  %128 = select i1 %122, i32 %109, i32 -1000000
  %129 = select i1 %122, i32 %107, i32 1000000
  br label %139

130:                                              ; preds = %116
  %131 = select i1 %119, i32 %103, i32 -1000000
  %132 = select i1 %119, i32 %101, i32 1000000
  br label %139

133:                                              ; preds = %94
  br i1 %115, label %134, label %139

134:                                              ; preds = %133
  %135 = load i32, ptr %105, align 4, !tbaa !148
  %136 = icmp sgt i32 %135, 0
  %137 = select i1 %136, i32 %109, i32 -1000000
  %138 = select i1 %136, i32 %107, i32 1000000
  br label %139

139:                                              ; preds = %134, %133, %130, %127, %124, %123
  %140 = phi i32 [ %126, %124 ], [ %128, %127 ], [ %131, %130 ], [ %137, %134 ], [ -1000000, %133 ], [ %103, %123 ]
  %141 = phi i32 [ %125, %124 ], [ %129, %127 ], [ %132, %130 ], [ %138, %134 ], [ 1000000, %133 ], [ %101, %123 ]
  %142 = load ptr, ptr @rectArray, align 8, !tbaa !7
  %143 = getelementptr inbounds %struct.rect, ptr %142, i64 %9, i32 7
  %144 = load i32, ptr %143, align 4, !tbaa !128
  %145 = icmp sgt i32 %141, %144
  br i1 %145, label %152, label %146

146:                                              ; preds = %139
  %147 = getelementptr inbounds %struct.rect, ptr %142, i64 %9, i32 1
  %148 = load i32, ptr %147, align 4, !tbaa !125
  %149 = icmp slt i32 %148, %141
  br i1 %149, label %150, label %152

150:                                              ; preds = %146
  store i32 %141, ptr %147, align 4, !tbaa !125
  %151 = getelementptr inbounds %struct.rect, ptr %142, i64 %9, i32 3
  store i32 2, ptr %151, align 4, !tbaa !160
  br label %152

152:                                              ; preds = %150, %146, %139
  %153 = getelementptr inbounds %struct.rect, ptr %142, i64 %4, i32 6
  %154 = load i32, ptr %153, align 4, !tbaa !129
  %155 = icmp slt i32 %140, %154
  br i1 %155, label %162, label %156

156:                                              ; preds = %152
  %157 = getelementptr inbounds %struct.rect, ptr %142, i64 %4, i32 1
  %158 = load i32, ptr %157, align 4, !tbaa !125
  %159 = icmp sgt i32 %158, %140
  br i1 %159, label %160, label %162

160:                                              ; preds = %156
  store i32 %140, ptr %157, align 4, !tbaa !125
  %161 = getelementptr inbounds %struct.rect, ptr %142, i64 %4, i32 3
  store i32 1, ptr %161, align 4, !tbaa !160
  br label %162

162:                                              ; preds = %160, %156, %152
  %163 = getelementptr inbounds %struct.rect, ptr %142, i64 %4
  %164 = load i32, ptr %163, align 4, !tbaa !123
  %165 = icmp slt i32 %164, %59
  %166 = icmp sgt i32 %164, %96
  %167 = or i1 %165, %166
  br i1 %167, label %168, label %171

168:                                              ; preds = %162
  %169 = add nsw i32 %96, %59
  %170 = sdiv i32 %169, 2
  store i32 %170, ptr %163, align 4, !tbaa !123
  br label %171

171:                                              ; preds = %168, %162
  %172 = getelementptr inbounds %struct.rect, ptr %142, i64 %9
  %173 = load i32, ptr %172, align 4, !tbaa !123
  %174 = icmp slt i32 %173, %59
  %175 = icmp sgt i32 %173, %96
  %176 = or i1 %174, %175
  br i1 %176, label %177, label %180

177:                                              ; preds = %171
  %178 = add nsw i32 %96, %59
  %179 = sdiv i32 %178, 2
  store i32 %179, ptr %172, align 4, !tbaa !123
  br label %180

180:                                              ; preds = %177, %171
  %181 = icmp eq i32 %111, 0
  br i1 %181, label %182, label %240

182:                                              ; preds = %180
  %183 = load ptr, ptr @Vptrs, align 8, !tbaa !7
  %184 = load ptr, ptr @Vroot, align 8, !tbaa !7
  %185 = tail call i32 @tprop(ptr noundef %184, i32 noundef %59) #44
  %186 = sext i32 %185 to i64
  %187 = getelementptr inbounds ptr, ptr %183, i64 %186
  %188 = load ptr, ptr %187, align 8, !tbaa !7
  %189 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %190 = load i32, ptr %188, align 8, !tbaa !138
  %191 = sext i32 %190 to i64
  %192 = getelementptr inbounds %struct.edgebox, ptr %189, i64 %191, i32 3
  %193 = load i32, ptr %192, align 4, !tbaa !140
  br label %194

194:                                              ; preds = %199, %182
  %195 = phi ptr [ %188, %182 ], [ %197, %199 ]
  %196 = getelementptr inbounds %struct.dlink2, ptr %195, i64 0, i32 2
  %197 = load ptr, ptr %196, align 8, !tbaa !150
  %198 = icmp eq ptr %197, null
  br i1 %198, label %205, label %199

199:                                              ; preds = %194
  %200 = load i32, ptr %197, align 8, !tbaa !138
  %201 = sext i32 %200 to i64
  %202 = getelementptr inbounds %struct.edgebox, ptr %189, i64 %201, i32 3
  %203 = load i32, ptr %202, align 4, !tbaa !140
  %204 = icmp sgt i32 %203, %193
  br i1 %204, label %205, label %194, !llvm.loop !161

205:                                              ; preds = %199, %194
  %.lcssa = phi ptr [ %197, %199 ], [ %197, %194 ]
  %206 = getelementptr inbounds %struct.dlink2, ptr %.lcssa, i64 0, i32 1
  %207 = load ptr, ptr %206, align 8, !tbaa !152
  %208 = icmp eq ptr %207, null
  br i1 %208, label %232, label %209

209:                                              ; preds = %227, %205
  %210 = phi ptr [ %230, %227 ], [ %207, %205 ]
  %211 = phi i32 [ %228, %227 ], [ undef, %205 ]
  %212 = icmp eq ptr %210, %95
  br i1 %212, label %227, label %213

213:                                              ; preds = %209
  %214 = load i32, ptr %210, align 8, !tbaa !138
  %215 = sext i32 %214 to i64
  %216 = getelementptr inbounds %struct.edgebox, ptr %189, i64 %215, i32 5
  %217 = load i32, ptr %216, align 4, !tbaa !142
  %218 = icmp slt i32 %217, 0
  br i1 %218, label %227, label %219

219:                                              ; preds = %213
  %220 = getelementptr inbounds %struct.edgebox, ptr %189, i64 %215, i32 1
  %221 = load i32, ptr %220, align 4, !tbaa !143
  %222 = icmp sgt i32 %221, %17
  br i1 %222, label %227, label %223

223:                                              ; preds = %219
  %224 = getelementptr inbounds %struct.edgebox, ptr %189, i64 %215, i32 2
  %225 = load i32, ptr %224, align 4, !tbaa !144
  %226 = icmp slt i32 %225, %19
  br i1 %226, label %227, label %232

227:                                              ; preds = %223, %219, %213, %209
  %228 = phi i32 [ %211, %209 ], [ %214, %213 ], [ %214, %219 ], [ %214, %223 ]
  %229 = getelementptr inbounds %struct.dlink2, ptr %210, i64 0, i32 1
  %230 = load ptr, ptr %229, align 8, !tbaa !152
  %231 = icmp eq ptr %230, null
  br i1 %231, label %232, label %209, !llvm.loop !162

232:                                              ; preds = %227, %223, %205
  %233 = phi i32 [ undef, %205 ], [ %214, %223 ], [ %228, %227 ]
  %234 = sext i32 %233 to i64
  %235 = getelementptr inbounds %struct.edgebox, ptr %189, i64 %234, i32 3
  %236 = load i32, ptr %235, align 4, !tbaa !140
  %237 = sub nsw i32 %59, %236
  %238 = sdiv i32 %237, 2
  %239 = add i32 %236, %238
  br label %240

240:                                              ; preds = %232, %180
  %241 = phi ptr [ %189, %232 ], [ %70, %180 ]
  %242 = phi i32 [ %239, %232 ], [ %59, %180 ]
  %243 = phi i32 [ %233, %232 ], [ undef, %180 ]
  %244 = getelementptr inbounds %struct.edgebox, ptr %241, i64 %104, i32 6
  %245 = load i32, ptr %244, align 4, !tbaa !147
  %246 = icmp eq i32 %245, 0
  br i1 %246, label %247, label %287

247:                                              ; preds = %240
  %248 = load ptr, ptr @Vptrs, align 8, !tbaa !7
  %249 = load ptr, ptr @Vroot, align 8, !tbaa !7
  %250 = tail call i32 @tprop(ptr noundef %249, i32 noundef %96) #44
  %251 = sext i32 %250 to i64
  %252 = getelementptr inbounds ptr, ptr %248, i64 %251
  %253 = load ptr, ptr %252, align 8, !tbaa !7
  %254 = icmp eq ptr %253, null
  %255 = load ptr, ptr @edgeList, align 8
  br i1 %254, label %279, label %256

256:                                              ; preds = %274, %247
  %257 = phi ptr [ %277, %274 ], [ %253, %247 ]
  %258 = phi i32 [ %275, %274 ], [ %243, %247 ]
  %259 = icmp eq ptr %257, %60
  br i1 %259, label %274, label %260

260:                                              ; preds = %256
  %261 = load i32, ptr %257, align 8, !tbaa !138
  %262 = sext i32 %261 to i64
  %263 = getelementptr inbounds %struct.edgebox, ptr %255, i64 %262, i32 5
  %264 = load i32, ptr %263, align 4, !tbaa !142
  %265 = icmp sgt i32 %264, 0
  br i1 %265, label %274, label %266

266:                                              ; preds = %260
  %267 = getelementptr inbounds %struct.edgebox, ptr %255, i64 %262, i32 1
  %268 = load i32, ptr %267, align 4, !tbaa !143
  %269 = icmp sgt i32 %268, %17
  br i1 %269, label %274, label %270

270:                                              ; preds = %266
  %271 = getelementptr inbounds %struct.edgebox, ptr %255, i64 %262, i32 2
  %272 = load i32, ptr %271, align 4, !tbaa !144
  %273 = icmp slt i32 %272, %19
  br i1 %273, label %274, label %279

274:                                              ; preds = %270, %266, %260, %256
  %275 = phi i32 [ %258, %256 ], [ %261, %260 ], [ %261, %266 ], [ %261, %270 ]
  %276 = getelementptr inbounds %struct.dlink2, ptr %257, i64 0, i32 2
  %277 = load ptr, ptr %276, align 8, !tbaa !7
  %278 = icmp eq ptr %277, null
  br i1 %278, label %279, label %256, !llvm.loop !163

279:                                              ; preds = %274, %270, %247
  %280 = phi i32 [ %243, %247 ], [ %261, %270 ], [ %275, %274 ]
  %281 = sext i32 %280 to i64
  %282 = getelementptr inbounds %struct.edgebox, ptr %255, i64 %281, i32 3
  %283 = load i32, ptr %282, align 4, !tbaa !140
  %284 = sub nsw i32 %283, %96
  %285 = sdiv i32 %284, 2
  %286 = add nsw i32 %285, %96
  br label %287

287:                                              ; preds = %279, %240
  %288 = phi i32 [ %286, %279 ], [ %96, %240 ]
  %289 = load i32, ptr @eNum, align 4, !tbaa !17
  %290 = add nsw i32 %289, 1
  store i32 %290, ptr @eNum, align 4, !tbaa !17
  %291 = srem i32 %290, 100
  %292 = icmp eq i32 %291, 0
  %293 = load ptr, ptr @eArray, align 8, !tbaa !7
  br i1 %292, label %294, label %300

294:                                              ; preds = %287
  %295 = add nsw i32 %289, 101
  %296 = sext i32 %295 to i64
  %297 = mul nsw i64 %296, 56
  %298 = tail call ptr @realloc(ptr noundef %293, i64 noundef %297) #46
  store ptr %298, ptr @eArray, align 8, !tbaa !7
  %299 = load i32, ptr @eNum, align 4, !tbaa !17
  br label %300

300:                                              ; preds = %294, %287
  %301 = phi i32 [ %299, %294 ], [ %290, %287 ]
  %302 = phi ptr [ %298, %294 ], [ %293, %287 ]
  %303 = sext i32 %301 to i64
  %304 = getelementptr inbounds %struct.ebox, ptr %302, i64 %303
  store i32 %0, ptr %304, align 8, !tbaa !114
  %305 = load i32, ptr @eNum, align 4, !tbaa !17
  %306 = sext i32 %305 to i64
  %307 = getelementptr inbounds %struct.ebox, ptr %302, i64 %306, i32 1
  store i32 %1, ptr %307, align 4, !tbaa !116
  %308 = sub nsw i32 %288, %242
  %309 = load i32, ptr @eNum, align 4, !tbaa !17
  %310 = sext i32 %309 to i64
  %311 = getelementptr inbounds %struct.ebox, ptr %302, i64 %310, i32 2
  store i32 %308, ptr %311, align 8, !tbaa !155
  %312 = load i32, ptr @eNum, align 4, !tbaa !17
  %313 = sext i32 %312 to i64
  %314 = getelementptr inbounds %struct.ebox, ptr %302, i64 %313, i32 3
  store i32 %242, ptr %314, align 4, !tbaa !117
  %315 = load i32, ptr @eNum, align 4, !tbaa !17
  %316 = sext i32 %315 to i64
  %317 = getelementptr inbounds %struct.ebox, ptr %302, i64 %316, i32 4
  store i32 %288, ptr %317, align 8, !tbaa !118
  %318 = load i32, ptr @eNum, align 4, !tbaa !17
  %319 = sext i32 %318 to i64
  %320 = getelementptr inbounds %struct.ebox, ptr %302, i64 %319, i32 8
  store i32 %98, ptr %320, align 8, !tbaa !156
  %321 = load i32, ptr @eNum, align 4, !tbaa !17
  %322 = sext i32 %321 to i64
  %323 = getelementptr inbounds %struct.ebox, ptr %302, i64 %322, i32 9
  store i32 %97, ptr %323, align 4, !tbaa !157
  br label %324

324:                                              ; preds = %300, %90, %58, %2
  %325 = phi i32 [ 1, %300 ], [ 0, %58 ], [ 0, %90 ], [ 0, %2 ]
  ret i32 %325
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @checkpen() #12 {
  %1 = load i32, ptr @numcells, align 4, !tbaa !17
  %2 = icmp slt i32 %1, 1
  br i1 %2, label %22, label %3

3:                                                ; preds = %3, %0
  %4 = phi i64 [ %18, %3 ], [ 1, %0 ]
  %5 = phi i32 [ %17, %3 ], [ 0, %0 ]
  %6 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %7, align 8, !tbaa !7
  %9 = getelementptr inbounds %struct.cellbox, ptr %8, i64 0, i32 2
  %10 = load i32, ptr %9, align 4, !tbaa !164
  %11 = getelementptr inbounds %struct.cellbox, ptr %8, i64 0, i32 3
  %12 = load i32, ptr %11, align 8, !tbaa !165
  %13 = getelementptr inbounds %struct.cellbox, ptr %8, i64 0, i32 5
  %14 = load i32, ptr %13, align 8, !tbaa !45
  %15 = trunc i64 %4 to i32
  %16 = tail call i32 @checkover(i32 noundef %15, i32 noundef %10, i32 noundef %12, i32 noundef %14, i32 noundef 0, i32 noundef 1, i32 noundef 0) #43
  %17 = add nsw i32 %16, %5
  %18 = add nuw nsw i64 %4, 1
  %19 = load i32, ptr @numcells, align 4, !tbaa !17
  %20 = sext i32 %19 to i64
  %21 = icmp slt i64 %4, %20
  br i1 %21, label %3, label %22, !llvm.loop !166

22:                                               ; preds = %3, %0
  %23 = phi i32 [ 0, %0 ], [ %17, %3 ]
  ret i32 %23
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, argmem: read, inaccessiblemem: none) uwtable
define internal i32 @checkover(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6) #14 {
  %8 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %9 = sext i32 %0 to i64
  %10 = getelementptr inbounds ptr, ptr %8, i64 %9
  %11 = load ptr, ptr %10, align 8, !tbaa !7
  %12 = sext i32 %3 to i64
  %13 = getelementptr inbounds %struct.cellbox, ptr %11, i64 0, i32 21, i64 %12
  %14 = load ptr, ptr %13, align 8, !tbaa !7
  %15 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 9
  %16 = load i32, ptr %15, align 8, !tbaa !167
  %17 = add nsw i32 %16, %1
  %18 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 10
  %19 = load i32, ptr %18, align 4, !tbaa !168
  %20 = add nsw i32 %19, %1
  %21 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 11
  %22 = load i32, ptr %21, align 8, !tbaa !169
  %23 = add nsw i32 %22, %2
  %24 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 12
  %25 = load i32, ptr %24, align 4, !tbaa !170
  %26 = add nsw i32 %25, %2
  %27 = load i32, ptr @binOffsetX, align 4, !tbaa !17
  %28 = sub nsw i32 %17, %27
  %29 = load i32, ptr @binWidthX, align 4, !tbaa !17
  %30 = sdiv i32 %28, %29
  %31 = icmp slt i32 %30, 1
  %32 = load i32, ptr @numBinsX, align 4
  %33 = tail call i32 @llvm.smin.i32(i32 %30, i32 %32)
  %34 = select i1 %31, i32 1, i32 %33
  %35 = sub nsw i32 %20, %27
  %36 = sdiv i32 %35, %29
  %37 = icmp sgt i32 %36, %32
  %38 = tail call i32 @llvm.smax.i32(i32 %36, i32 1)
  %39 = select i1 %37, i32 %32, i32 %38
  %40 = load i32, ptr @binOffsetY, align 4, !tbaa !17
  %41 = sub nsw i32 %23, %40
  %42 = load i32, ptr @binWidthY, align 4, !tbaa !17
  %43 = sdiv i32 %41, %42
  %44 = icmp slt i32 %43, 1
  %45 = load i32, ptr @numBinsY, align 4
  %46 = tail call i32 @llvm.smin.i32(i32 %43, i32 %45)
  %47 = select i1 %44, i32 1, i32 %46
  %48 = sub nsw i32 %26, %40
  %49 = sdiv i32 %48, %42
  %50 = icmp sgt i32 %49, %45
  %51 = tail call i32 @llvm.smax.i32(i32 %49, i32 1)
  %52 = select i1 %50, i32 %45, i32 %51
  %53 = icmp eq i32 %34, %39
  %54 = icmp eq i32 %47, %52
  %55 = select i1 %53, i1 %54, i1 false
  %56 = select i1 %55, i32 %34, i32 0
  %57 = select i1 %55, i32 %47, i32 0
  store i32 %56, ptr @binX, align 4, !tbaa !17
  store i32 %57, ptr @binY, align 4, !tbaa !17
  %58 = icmp slt i32 %39, 0
  br i1 %58, label %247, label %59

59:                                               ; preds = %7
  %60 = icmp slt i32 %52, 0
  %61 = load ptr, ptr @blockarray, align 8
  %62 = load i32, ptr @numcells, align 4
  %63 = icmp eq i32 %5, 0
  %64 = getelementptr inbounds %struct.cellbox, ptr %11, i64 0, i32 6
  %65 = load double, ptr @lapFactor, align 8
  %66 = load i32, ptr @offset, align 4
  %67 = sext i32 %47 to i64
  %68 = add i32 %52, 1
  %69 = sext i32 %34 to i64
  %70 = add nuw i32 %39, 1
  %71 = zext i32 %70 to i64
  %72 = zext i32 %68 to i64
  br label %73

73:                                               ; preds = %243, %59
  %74 = phi i64 [ 0, %59 ], [ %245, %243 ]
  %75 = phi i32 [ 0, %59 ], [ %244, %243 ]
  %76 = icmp ne i64 %74, 0
  %77 = icmp slt i64 %74, %69
  %78 = and i1 %76, %77
  %79 = select i1 %78, i1 true, i1 %60
  br i1 %79, label %243, label %80

80:                                               ; preds = %73
  %81 = icmp eq i64 %74, 0
  %82 = getelementptr inbounds ptr, ptr %61, i64 %74
  br label %83

83:                                               ; preds = %239, %80
  %84 = phi i64 [ 0, %80 ], [ %241, %239 ]
  %85 = phi i32 [ %75, %80 ], [ %240, %239 ]
  %86 = or i64 %84, %74
  %87 = and i64 %86, 4294967295
  %88 = icmp ne i64 %87, 0
  %89 = icmp slt i64 %84, %67
  %90 = or i1 %81, %89
  %91 = select i1 %88, i1 %90, i1 false
  br i1 %91, label %239, label %92

92:                                               ; preds = %83
  %93 = load ptr, ptr %82, align 8, !tbaa !7
  %94 = getelementptr inbounds ptr, ptr %93, i64 %84
  %95 = load ptr, ptr %94, align 8, !tbaa !7
  %96 = load i32, ptr %95, align 4, !tbaa !17
  %97 = icmp slt i32 %96, 1
  br i1 %97, label %239, label %98

98:                                               ; preds = %92
  %99 = add nuw i32 %96, 1
  %100 = zext i32 %99 to i64
  br label %101

101:                                              ; preds = %235, %98
  %102 = phi i64 [ 1, %98 ], [ %237, %235 ]
  %103 = phi i32 [ %85, %98 ], [ %236, %235 ]
  %104 = getelementptr inbounds i32, ptr %95, i64 %102
  %105 = load i32, ptr %104, align 4, !tbaa !17
  %106 = icmp eq i32 %105, %0
  %107 = icmp sgt i32 %105, %62
  %108 = select i1 %106, i1 true, i1 %107
  br i1 %108, label %235, label %109

109:                                              ; preds = %101
  %110 = sext i32 %105 to i64
  %111 = getelementptr inbounds ptr, ptr %8, i64 %110
  %112 = load ptr, ptr %111, align 8, !tbaa !7
  %113 = icmp eq i32 %105, %4
  br i1 %113, label %117, label %114

114:                                              ; preds = %109
  %115 = getelementptr inbounds %struct.cellbox, ptr %112, i64 0, i32 5
  %116 = load i32, ptr %115, align 8, !tbaa !45
  br label %118

117:                                              ; preds = %109
  br i1 %63, label %118, label %235

118:                                              ; preds = %117, %114
  %119 = phi i32 [ %116, %114 ], [ %6, %117 ]
  %120 = phi ptr [ %112, %114 ], [ %11, %117 ]
  %121 = getelementptr inbounds %struct.cellbox, ptr %120, i64 0, i32 3
  %122 = getelementptr inbounds %struct.cellbox, ptr %120, i64 0, i32 2
  %123 = sext i32 %119 to i64
  %124 = getelementptr inbounds %struct.cellbox, ptr %112, i64 0, i32 21, i64 %123
  %125 = load i32, ptr %121, align 8, !tbaa !165
  %126 = load i32, ptr %122, align 4, !tbaa !164
  %127 = load ptr, ptr %124, align 8, !tbaa !7
  %128 = getelementptr inbounds %struct.tilebox, ptr %127, i64 0, i32 9
  %129 = load i32, ptr %128, align 8, !tbaa !167
  %130 = add nsw i32 %129, %126
  %131 = getelementptr inbounds %struct.tilebox, ptr %127, i64 0, i32 10
  %132 = load i32, ptr %131, align 4, !tbaa !168
  %133 = add nsw i32 %132, %126
  %134 = getelementptr inbounds %struct.tilebox, ptr %127, i64 0, i32 11
  %135 = load i32, ptr %134, align 8, !tbaa !169
  %136 = add nsw i32 %135, %125
  %137 = getelementptr inbounds %struct.tilebox, ptr %127, i64 0, i32 12
  %138 = load i32, ptr %137, align 4, !tbaa !170
  %139 = add nsw i32 %138, %125
  %140 = icmp slt i32 %130, %20
  %141 = icmp slt i32 %17, %133
  %142 = select i1 %140, i1 %141, i1 false
  %143 = icmp slt i32 %136, %26
  %144 = select i1 %142, i1 %143, i1 false
  %145 = icmp slt i32 %23, %139
  %146 = select i1 %144, i1 %145, i1 false
  br i1 %146, label %147, label %235

147:                                              ; preds = %118
  %148 = load i32, ptr %64, align 4, !tbaa !171
  %149 = icmp eq i32 %148, 1
  br i1 %149, label %150, label %167

150:                                              ; preds = %147
  %151 = getelementptr inbounds %struct.cellbox, ptr %112, i64 0, i32 6
  %152 = load i32, ptr %151, align 4, !tbaa !171
  %153 = icmp eq i32 %152, 1
  br i1 %153, label %154, label %167

154:                                              ; preds = %150
  %155 = tail call i32 @llvm.smax.i32(i32 %17, i32 %130)
  %156 = tail call i32 @llvm.smin.i32(i32 %20, i32 %133)
  %157 = tail call i32 @llvm.smax.i32(i32 %23, i32 %136)
  %158 = tail call i32 @llvm.smin.i32(i32 %26, i32 %139)
  %159 = sub nsw i32 %158, %157
  %160 = sub nsw i32 %156, %155
  %161 = mul nsw i32 %159, %160
  %162 = add nsw i32 %66, %161
  %163 = sitofp i32 %162 to double
  %164 = fmul double %65, %163
  %165 = fptosi double %164 to i32
  %166 = add nsw i32 %103, %165
  br label %235

167:                                              ; preds = %150, %147
  %168 = load ptr, ptr %14, align 8, !tbaa !172
  %169 = icmp eq ptr %168, null
  br i1 %169, label %235, label %170

170:                                              ; preds = %167
  %171 = load ptr, ptr %127, align 8, !tbaa !172
  %172 = icmp eq ptr %171, null
  br label %177

173:                                              ; preds = %223, %177
  %174 = phi i32 [ %179, %177 ], [ %224, %223 ]
  %175 = load ptr, ptr %178, align 8, !tbaa !172
  %176 = icmp eq ptr %175, null
  br i1 %176, label %227, label %177, !llvm.loop !173

177:                                              ; preds = %173, %170
  %178 = phi ptr [ %168, %170 ], [ %175, %173 ]
  %179 = phi i32 [ 0, %170 ], [ %174, %173 ]
  %180 = getelementptr inbounds %struct.tilebox, ptr %178, i64 0, i32 9
  %181 = load i32, ptr %180, align 8, !tbaa !167
  %182 = add nsw i32 %181, %1
  %183 = getelementptr inbounds %struct.tilebox, ptr %178, i64 0, i32 10
  %184 = load i32, ptr %183, align 4, !tbaa !168
  %185 = add nsw i32 %184, %1
  %186 = getelementptr inbounds %struct.tilebox, ptr %178, i64 0, i32 11
  %187 = load i32, ptr %186, align 8, !tbaa !169
  %188 = add nsw i32 %187, %2
  %189 = getelementptr inbounds %struct.tilebox, ptr %178, i64 0, i32 12
  %190 = load i32, ptr %189, align 4, !tbaa !170
  %191 = add nsw i32 %190, %2
  br i1 %172, label %173, label %192

192:                                              ; preds = %223, %177
  %193 = phi ptr [ %225, %223 ], [ %171, %177 ]
  %194 = phi i32 [ %224, %223 ], [ %179, %177 ]
  %195 = getelementptr inbounds %struct.tilebox, ptr %193, i64 0, i32 9
  %196 = load i32, ptr %195, align 8, !tbaa !167
  %197 = add nsw i32 %196, %126
  %198 = getelementptr inbounds %struct.tilebox, ptr %193, i64 0, i32 10
  %199 = load i32, ptr %198, align 4, !tbaa !168
  %200 = add nsw i32 %199, %126
  %201 = getelementptr inbounds %struct.tilebox, ptr %193, i64 0, i32 11
  %202 = load i32, ptr %201, align 8, !tbaa !169
  %203 = add nsw i32 %202, %125
  %204 = getelementptr inbounds %struct.tilebox, ptr %193, i64 0, i32 12
  %205 = load i32, ptr %204, align 4, !tbaa !170
  %206 = add nsw i32 %205, %125
  %207 = icmp slt i32 %197, %185
  %208 = icmp slt i32 %182, %200
  %209 = select i1 %207, i1 %208, i1 false
  %210 = icmp slt i32 %203, %191
  %211 = select i1 %209, i1 %210, i1 false
  %212 = icmp slt i32 %188, %206
  %213 = select i1 %211, i1 %212, i1 false
  br i1 %213, label %214, label %223

214:                                              ; preds = %192
  %215 = tail call i32 @llvm.smax.i32(i32 %182, i32 %197)
  %216 = tail call i32 @llvm.smin.i32(i32 %185, i32 %200)
  %217 = tail call i32 @llvm.smax.i32(i32 %188, i32 %203)
  %218 = tail call i32 @llvm.smin.i32(i32 %191, i32 %206)
  %219 = sub nsw i32 %218, %217
  %220 = sub nsw i32 %216, %215
  %221 = mul nsw i32 %219, %220
  %222 = add nsw i32 %221, %194
  br label %223

223:                                              ; preds = %214, %192
  %224 = phi i32 [ %194, %192 ], [ %222, %214 ]
  %225 = load ptr, ptr %193, align 8, !tbaa !172
  %226 = icmp eq ptr %225, null
  br i1 %226, label %173, label %192, !llvm.loop !174

227:                                              ; preds = %173
  %.lcssa = phi i32 [ %174, %173 ]
  %228 = icmp eq i32 %.lcssa, 0
  br i1 %228, label %235, label %229

229:                                              ; preds = %227
  %230 = add nsw i32 %66, %.lcssa
  %231 = sitofp i32 %230 to double
  %232 = fmul double %65, %231
  %233 = fptosi double %232 to i32
  %234 = add nsw i32 %103, %233
  br label %235

235:                                              ; preds = %229, %227, %167, %154, %118, %117, %101
  %236 = phi i32 [ %103, %101 ], [ %103, %118 ], [ %166, %154 ], [ %234, %229 ], [ %103, %227 ], [ %103, %117 ], [ %103, %167 ]
  %237 = add nuw nsw i64 %102, 1
  %238 = icmp eq i64 %237, %100
  br i1 %238, label %239, label %101, !llvm.loop !175

239:                                              ; preds = %235, %92, %83
  %240 = phi i32 [ %85, %83 ], [ %85, %92 ], [ %236, %235 ]
  %241 = add nuw nsw i64 %84, 1
  %242 = icmp eq i64 %241, %72
  br i1 %242, label %243, label %83, !llvm.loop !176

243:                                              ; preds = %239, %73
  %244 = phi i32 [ %75, %73 ], [ %240, %239 ]
  %245 = add nuw nsw i64 %74, 1
  %246 = icmp eq i64 %245, %71
  br i1 %246, label %247, label %73, !llvm.loop !177

247:                                              ; preds = %243, %7
  %248 = phi i32 [ 0, %7 ], [ %244, %243 ]
  ret i32 %248
}

; Function Attrs: nounwind optsize uwtable
define internal void @config1() #0 {
  %1 = load i32, ptr @numcells, align 4, !tbaa !17
  %2 = icmp slt i32 %1, 1
  br i1 %2, label %57, label %3

3:                                                ; preds = %0
  %4 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %5 = add nuw i32 %1, 1
  %6 = zext i32 %5 to i64
  br label %7

7:                                                ; preds = %53, %3
  %8 = phi i64 [ 1, %3 ], [ %55, %53 ]
  %9 = phi i32 [ 0, %3 ], [ %54, %53 ]
  %10 = getelementptr inbounds ptr, ptr %4, i64 %8
  %11 = load ptr, ptr %10, align 8, !tbaa !7
  %12 = getelementptr inbounds %struct.cellbox, ptr %11, i64 0, i32 6
  %13 = load i32, ptr %12, align 4, !tbaa !171
  %14 = icmp eq i32 %13, 1
  %15 = getelementptr inbounds %struct.cellbox, ptr %11, i64 0, i32 5
  %16 = load i32, ptr %15, align 8, !tbaa !45
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds %struct.cellbox, ptr %11, i64 0, i32 21, i64 %17
  %19 = load ptr, ptr %18, align 8, !tbaa !7
  br i1 %14, label %20, label %33

20:                                               ; preds = %7
  %21 = getelementptr inbounds %struct.tilebox, ptr %19, i64 0, i32 9
  %22 = load i32, ptr %21, align 8, !tbaa !167
  %23 = getelementptr inbounds %struct.tilebox, ptr %19, i64 0, i32 10
  %24 = load i32, ptr %23, align 4, !tbaa !168
  %25 = getelementptr inbounds %struct.tilebox, ptr %19, i64 0, i32 11
  %26 = load i32, ptr %25, align 8, !tbaa !169
  %27 = getelementptr inbounds %struct.tilebox, ptr %19, i64 0, i32 12
  %28 = load i32, ptr %27, align 4, !tbaa !170
  %29 = sub nsw i32 %24, %22
  %30 = sub nsw i32 %28, %26
  %31 = mul nsw i32 %30, %29
  %32 = add nsw i32 %31, %9
  br label %53

33:                                               ; preds = %7
  %34 = load ptr, ptr %19, align 8, !tbaa !172
  %35 = icmp eq ptr %34, null
  br i1 %35, label %53, label %36

36:                                               ; preds = %36, %33
  %37 = phi ptr [ %51, %36 ], [ %34, %33 ]
  %38 = phi i32 [ %50, %36 ], [ %9, %33 ]
  %39 = getelementptr inbounds %struct.tilebox, ptr %37, i64 0, i32 9
  %40 = load i32, ptr %39, align 8, !tbaa !167
  %41 = getelementptr inbounds %struct.tilebox, ptr %37, i64 0, i32 10
  %42 = load i32, ptr %41, align 4, !tbaa !168
  %43 = getelementptr inbounds %struct.tilebox, ptr %37, i64 0, i32 11
  %44 = load i32, ptr %43, align 8, !tbaa !169
  %45 = getelementptr inbounds %struct.tilebox, ptr %37, i64 0, i32 12
  %46 = load i32, ptr %45, align 4, !tbaa !170
  %47 = sub nsw i32 %42, %40
  %48 = sub nsw i32 %46, %44
  %49 = mul nsw i32 %48, %47
  %50 = add nsw i32 %49, %38
  %51 = load ptr, ptr %37, align 8, !tbaa !172
  %52 = icmp eq ptr %51, null
  br i1 %52, label %53, label %36, !llvm.loop !178

53:                                               ; preds = %36, %33, %20
  %54 = phi i32 [ %32, %20 ], [ %9, %33 ], [ %50, %36 ]
  %55 = add nuw nsw i64 %8, 1
  %56 = icmp eq i64 %55, %6
  br i1 %56, label %57, label %7, !llvm.loop !179

57:                                               ; preds = %53, %0
  %58 = phi i32 [ 0, %0 ], [ %54, %53 ]
  %59 = load i32, ptr @coreGiven, align 4, !tbaa !17
  %60 = icmp eq i32 %59, 0
  %61 = sitofp i32 %58 to double
  %62 = tail call double @sqrt(double noundef %61) #44
  %63 = fptosi double %62 to i32
  br i1 %60, label %64, label %70

64:                                               ; preds = %57
  %65 = add nsw i32 %63, 1
  store i32 %65, ptr @blockt, align 4, !tbaa !17
  store i32 %65, ptr @blockr, align 4, !tbaa !17
  %66 = load i32, ptr @perim, align 4, !tbaa !17
  %67 = sdiv i32 %66, 2
  %68 = shl nsw i32 %65, 1
  %69 = sub nsw i32 %67, %68
  br label %78

70:                                               ; preds = %57
  %71 = load i32, ptr @perim, align 4, !tbaa !17
  %72 = sdiv i32 %71, 2
  %73 = shl i32 %63, 1
  %74 = sub i32 %72, %73
  %75 = add i32 %74, -2
  %76 = load i32, ptr @blockr, align 4, !tbaa !17
  %77 = load i32, ptr @blockt, align 4, !tbaa !17
  br label %78

78:                                               ; preds = %70, %64
  %79 = phi i32 [ %77, %70 ], [ %65, %64 ]
  %80 = phi i32 [ %76, %70 ], [ %65, %64 ]
  %81 = phi i32 [ %75, %70 ], [ %69, %64 ]
  store i32 %81, ptr @totChanLen, align 4, !tbaa !17
  store i32 0, ptr @aveChanWid, align 4, !tbaa !17
  %82 = load i32, ptr @maxWeight, align 4, !tbaa !17
  %83 = load i32, ptr @baseWeight, align 4, !tbaa !17
  %84 = sub nsw i32 %82, %83
  %85 = sitofp i32 %84 to double
  %86 = sitofp i32 %80 to double
  %87 = fmul double %86, 5.000000e-01
  %88 = fdiv double %85, %87
  store double %88, ptr @slopeX, align 8, !tbaa !36
  %89 = sitofp i32 %79 to double
  %90 = fmul double %89, 5.000000e-01
  %91 = fdiv double %85, %90
  store double %91, ptr @slopeY, align 8, !tbaa !36
  %92 = sitofp i32 %83 to double
  store double %92, ptr @basefactor, align 8, !tbaa !36
  tail call void @placepads() #44
  %93 = load i32, ptr @blockr, align 4, !tbaa !17
  %94 = load i32, ptr @blockl, align 4, !tbaa !17
  %95 = add nsw i32 %94, %93
  %96 = sdiv i32 %95, 2
  store i32 %96, ptr @blockmx, align 4, !tbaa !17
  %97 = load i32, ptr @blockt, align 4, !tbaa !17
  %98 = load i32, ptr @blockb, align 4, !tbaa !17
  %99 = add nsw i32 %98, %97
  %100 = sdiv i32 %99, 2
  store i32 %100, ptr @blockmy, align 4, !tbaa !17
  %101 = sub nsw i32 %93, %94
  %102 = load i32, ptr @numBinsX, align 4, !tbaa !17
  %103 = sdiv i32 %101, %102
  %104 = mul nsw i32 %103, %102
  %105 = add i32 %94, %104
  %106 = sub i32 %93, %105
  %107 = sdiv i32 %102, 2
  %108 = icmp sge i32 %106, %107
  %109 = zext i1 %108 to i32
  %110 = add nsw i32 %103, %109
  store i32 %110, ptr @binWidthX, align 4, !tbaa !17
  %111 = add nsw i32 %94, 1
  %112 = sub i32 %111, %110
  store i32 %112, ptr @binOffsetX, align 4, !tbaa !17
  %113 = sub nsw i32 %97, %98
  %114 = load i32, ptr @numBinsY, align 4, !tbaa !17
  %115 = sdiv i32 %113, %114
  %116 = mul nsw i32 %115, %114
  %117 = add i32 %98, %116
  %118 = sub i32 %97, %117
  %119 = sdiv i32 %114, 2
  %120 = icmp sge i32 %118, %119
  %121 = zext i1 %120 to i32
  %122 = add nsw i32 %115, %121
  store i32 %122, ptr @binWidthY, align 4, !tbaa !17
  %123 = add nsw i32 %98, 1
  %124 = sub i32 %123, %122
  store i32 %124, ptr @binOffsetY, align 4, !tbaa !17
  tail call void @loadbins(i32 noundef 1) #44
  ret void
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write)
declare double @sqrt(double noundef) local_unnamed_addr #15

; Function Attrs: nounwind optsize uwtable
define internal void @config2() #0 {
  %1 = load i32, ptr @numcells, align 4, !tbaa !17
  %2 = icmp slt i32 %1, 1
  br i1 %2, label %59, label %3

3:                                                ; preds = %0
  %4 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %5 = add nuw i32 %1, 1
  %6 = zext i32 %5 to i64
  br label %7

7:                                                ; preds = %55, %3
  %8 = phi i64 [ 1, %3 ], [ %57, %55 ]
  %9 = phi double [ 0.000000e+00, %3 ], [ %56, %55 ]
  %10 = getelementptr inbounds ptr, ptr %4, i64 %8
  %11 = load ptr, ptr %10, align 8, !tbaa !7
  %12 = getelementptr inbounds %struct.cellbox, ptr %11, i64 0, i32 6
  %13 = load i32, ptr %12, align 4, !tbaa !171
  %14 = icmp eq i32 %13, 1
  %15 = getelementptr inbounds %struct.cellbox, ptr %11, i64 0, i32 5
  %16 = load i32, ptr %15, align 8, !tbaa !45
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds %struct.cellbox, ptr %11, i64 0, i32 21, i64 %17
  %19 = load ptr, ptr %18, align 8, !tbaa !7
  br i1 %14, label %20, label %34

20:                                               ; preds = %7
  %21 = getelementptr inbounds %struct.tilebox, ptr %19, i64 0, i32 9
  %22 = load i32, ptr %21, align 8, !tbaa !167
  %23 = getelementptr inbounds %struct.tilebox, ptr %19, i64 0, i32 10
  %24 = load i32, ptr %23, align 4, !tbaa !168
  %25 = getelementptr inbounds %struct.tilebox, ptr %19, i64 0, i32 11
  %26 = load i32, ptr %25, align 8, !tbaa !169
  %27 = getelementptr inbounds %struct.tilebox, ptr %19, i64 0, i32 12
  %28 = load i32, ptr %27, align 4, !tbaa !170
  %29 = sub nsw i32 %24, %22
  %30 = sub nsw i32 %28, %26
  %31 = mul nsw i32 %30, %29
  %32 = sitofp i32 %31 to double
  %33 = fadd double %9, %32
  br label %55

34:                                               ; preds = %7
  %35 = load ptr, ptr %19, align 8, !tbaa !172
  %36 = icmp eq ptr %35, null
  br i1 %36, label %55, label %37

37:                                               ; preds = %37, %34
  %38 = phi ptr [ %53, %37 ], [ %35, %34 ]
  %39 = phi double [ %52, %37 ], [ %9, %34 ]
  %40 = getelementptr inbounds %struct.tilebox, ptr %38, i64 0, i32 9
  %41 = load i32, ptr %40, align 8, !tbaa !167
  %42 = getelementptr inbounds %struct.tilebox, ptr %38, i64 0, i32 10
  %43 = load i32, ptr %42, align 4, !tbaa !168
  %44 = getelementptr inbounds %struct.tilebox, ptr %38, i64 0, i32 11
  %45 = load i32, ptr %44, align 8, !tbaa !169
  %46 = getelementptr inbounds %struct.tilebox, ptr %38, i64 0, i32 12
  %47 = load i32, ptr %46, align 4, !tbaa !170
  %48 = sub nsw i32 %43, %41
  %49 = sub nsw i32 %47, %45
  %50 = mul nsw i32 %49, %48
  %51 = sitofp i32 %50 to double
  %52 = fadd double %39, %51
  %53 = load ptr, ptr %38, align 8, !tbaa !172
  %54 = icmp eq ptr %53, null
  br i1 %54, label %55, label %37, !llvm.loop !180

55:                                               ; preds = %37, %34, %20
  %56 = phi double [ %33, %20 ], [ %9, %34 ], [ %52, %37 ]
  %57 = add nuw nsw i64 %8, 1
  %58 = icmp eq i64 %57, %6
  br i1 %58, label %59, label %7, !llvm.loop !181

59:                                               ; preds = %55, %0
  %60 = phi double [ 0.000000e+00, %0 ], [ %56, %55 ]
  %61 = load i32, ptr @coreGiven, align 4, !tbaa !17
  %62 = icmp eq i32 %61, 0
  %63 = tail call double @sqrt(double noundef %60) #44
  %64 = fptosi double %63 to i32
  br i1 %62, label %65, label %66

65:                                               ; preds = %59
  store i32 %64, ptr @blockt, align 4, !tbaa !17
  store i32 %64, ptr @blockr, align 4, !tbaa !17
  br label %66

66:                                               ; preds = %65, %59
  %67 = load i32, ptr @perim, align 4, !tbaa !17
  %68 = sdiv i32 %67, 2
  %69 = shl nsw i32 %64, 1
  %70 = sub nsw i32 %68, %69
  %71 = load i32, ptr @totNetLen, align 4, !tbaa !17
  %72 = sitofp i32 %71 to double
  %73 = sitofp i32 %70 to double
  %74 = fdiv double %72, %73
  %75 = load i32, ptr @layersFactor, align 4, !tbaa !17
  %76 = sitofp i32 %75 to double
  %77 = fdiv double %74, %76
  store i32 %70, ptr @totChanLen, align 4
  %78 = load i32, ptr @defaultTracks, align 4, !tbaa !17
  %79 = sitofp i32 %78 to double
  %80 = fadd double %77, %79
  %81 = fptosi double %80 to i32
  %82 = add nsw i32 %81, 3
  %83 = load i32, ptr @trackspacing, align 4, !tbaa !17
  %84 = mul nsw i32 %82, %83
  %85 = load i32, ptr @wire_est_factor, align 4, !tbaa !17
  %86 = sitofp i32 %85 to double
  %87 = fdiv double %86, 1.000000e+01
  %88 = fadd double %87, 1.800000e+00
  %89 = sitofp i32 %84 to double
  %90 = fdiv double %89, %88
  %91 = fptosi double %90 to i32
  %92 = add nsw i32 %91, 2
  store i32 %92, ptr @aveChanWid, align 4, !tbaa !17
  %93 = load ptr, ptr @fpo, align 8, !tbaa !7
  %94 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %93, ptr noundef nonnull @.str.8, i32 noundef %70) #43
  %95 = load ptr, ptr @fpo, align 8, !tbaa !7
  %96 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %95, ptr noundef nonnull @.str.1.9, i32 noundef %84) #43
  %97 = load ptr, ptr @fpo, align 8, !tbaa !7
  %98 = load i32, ptr @aveChanWid, align 4, !tbaa !17
  %99 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %97, ptr noundef nonnull @.str.2.10, i32 noundef %98) #43
  %100 = load i32, ptr @coreGiven, align 4, !tbaa !17
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %104, label %102

102:                                              ; preds = %66
  %103 = load i32, ptr @blockr, align 4, !tbaa !17
  br label %259

104:                                              ; preds = %66
  %105 = load i32, ptr @numcells, align 4, !tbaa !17
  %106 = icmp slt i32 %105, 1
  br i1 %106, label %188, label %107

107:                                              ; preds = %104
  %108 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %109 = load i32, ptr @maxWeight, align 4
  %110 = mul nsw i32 %109, %109
  %111 = load i32, ptr @aveChanWid, align 4
  %112 = mul nsw i32 %110, %111
  %113 = add nuw i32 %105, 1
  %114 = zext i32 %113 to i64
  br label %115

115:                                              ; preds = %180, %107
  %116 = phi i64 [ 1, %107 ], [ %184, %180 ]
  %117 = phi double [ 0.000000e+00, %107 ], [ %183, %180 ]
  %118 = getelementptr inbounds ptr, ptr %108, i64 %116
  %119 = load ptr, ptr %118, align 8, !tbaa !7
  %120 = getelementptr inbounds %struct.cellbox, ptr %119, i64 0, i32 6
  %121 = load i32, ptr %120, align 4, !tbaa !171
  %122 = icmp eq i32 %121, 1
  %123 = getelementptr inbounds %struct.cellbox, ptr %119, i64 0, i32 5
  %124 = load i32, ptr %123, align 8, !tbaa !45
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds %struct.cellbox, ptr %119, i64 0, i32 21, i64 %125
  %127 = load ptr, ptr %126, align 8, !tbaa !7
  br i1 %122, label %128, label %142

128:                                              ; preds = %115
  %129 = getelementptr inbounds %struct.tilebox, ptr %127, i64 0, i32 9
  %130 = load i32, ptr %129, align 8, !tbaa !167
  %131 = getelementptr inbounds %struct.tilebox, ptr %127, i64 0, i32 10
  %132 = load i32, ptr %131, align 4, !tbaa !168
  %133 = getelementptr inbounds %struct.tilebox, ptr %127, i64 0, i32 11
  %134 = load i32, ptr %133, align 8, !tbaa !169
  %135 = getelementptr inbounds %struct.tilebox, ptr %127, i64 0, i32 12
  %136 = load i32, ptr %135, align 4, !tbaa !170
  %137 = sub i32 %132, %130
  %138 = add nsw i32 %137, %112
  %139 = sub i32 %136, %134
  %140 = add nsw i32 %139, %112
  %141 = mul nsw i32 %138, %140
  br label %180

142:                                              ; preds = %115
  %143 = load ptr, ptr %127, align 8, !tbaa !172
  %144 = icmp eq ptr %143, null
  br i1 %144, label %162, label %145

145:                                              ; preds = %145, %142
  %146 = phi ptr [ %160, %145 ], [ %143, %142 ]
  %147 = phi i32 [ %159, %145 ], [ 0, %142 ]
  %148 = getelementptr inbounds %struct.tilebox, ptr %146, i64 0, i32 9
  %149 = load i32, ptr %148, align 8, !tbaa !167
  %150 = getelementptr inbounds %struct.tilebox, ptr %146, i64 0, i32 10
  %151 = load i32, ptr %150, align 4, !tbaa !168
  %152 = getelementptr inbounds %struct.tilebox, ptr %146, i64 0, i32 11
  %153 = load i32, ptr %152, align 8, !tbaa !169
  %154 = getelementptr inbounds %struct.tilebox, ptr %146, i64 0, i32 12
  %155 = load i32, ptr %154, align 4, !tbaa !170
  %156 = sub nsw i32 %151, %149
  %157 = sub nsw i32 %155, %153
  %158 = mul nsw i32 %157, %156
  %159 = add nsw i32 %158, %147
  %160 = load ptr, ptr %146, align 8, !tbaa !172
  %161 = icmp eq ptr %160, null
  br i1 %161, label %162, label %145, !llvm.loop !182

162:                                              ; preds = %145, %142
  %163 = phi i32 [ 0, %142 ], [ %159, %145 ]
  %164 = getelementptr inbounds %struct.tilebox, ptr %127, i64 0, i32 9
  %165 = load i32, ptr %164, align 8, !tbaa !167
  %166 = getelementptr inbounds %struct.tilebox, ptr %127, i64 0, i32 10
  %167 = load i32, ptr %166, align 4, !tbaa !168
  %168 = getelementptr inbounds %struct.tilebox, ptr %127, i64 0, i32 11
  %169 = load i32, ptr %168, align 8, !tbaa !169
  %170 = getelementptr inbounds %struct.tilebox, ptr %127, i64 0, i32 12
  %171 = load i32, ptr %170, align 4, !tbaa !170
  %172 = sub nsw i32 %167, %165
  %173 = add nsw i32 %112, %172
  %174 = sub nsw i32 %171, %169
  %175 = add nsw i32 %112, %174
  %176 = mul nsw i32 %173, %175
  %177 = mul nsw i32 %174, %172
  %178 = sub i32 %163, %177
  %179 = add i32 %178, %176
  br label %180

180:                                              ; preds = %162, %128
  %181 = phi i32 [ %141, %128 ], [ %179, %162 ]
  %182 = sitofp i32 %181 to double
  %183 = fadd double %117, %182
  %184 = add nuw nsw i64 %116, 1
  %185 = icmp eq i64 %184, %114
  br i1 %185, label %186, label %115, !llvm.loop !183

186:                                              ; preds = %180
  %.lcssa = phi double [ %183, %180 ]
  store double 1.050000e+00, ptr @expandExtra, align 8, !tbaa !36
  %187 = icmp slt i32 %105, 10
  br i1 %187, label %188, label %195

188:                                              ; preds = %186, %104
  %189 = phi double [ %.lcssa, %186 ], [ 0.000000e+00, %104 ]
  %190 = sub nsw i32 10, %105
  %191 = sitofp i32 %190 to double
  %192 = tail call double @llvm.fmuladd.f64(double %191, double 1.000000e-02, double 1.050000e+00)
  store double %192, ptr @expandExtra, align 8, !tbaa !36
  %193 = fcmp ogt double %192, 1.100000e+00
  br i1 %193, label %194, label %195

194:                                              ; preds = %188
  store double 1.100000e+00, ptr @expandExtra, align 8, !tbaa !36
  br label %195

195:                                              ; preds = %194, %188, %186
  %196 = phi double [ %189, %188 ], [ %189, %194 ], [ %.lcssa, %186 ]
  %197 = phi double [ %192, %188 ], [ 1.100000e+00, %194 ], [ 1.050000e+00, %186 ]
  %198 = tail call double @sqrt(double noundef %196) #44
  %199 = fmul double %197, %198
  %200 = fptosi double %199 to i32
  %201 = add nsw i32 %200, 1
  store i32 %201, ptr @blockt, align 4, !tbaa !17
  store i32 %201, ptr @blockr, align 4, !tbaa !17
  %202 = load ptr, ptr @fpo, align 8, !tbaa !7
  %203 = load double, ptr @expandExtra, align 8, !tbaa !36
  %204 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %202, ptr noundef nonnull @.str.3.11, double noundef %203) #43
  %205 = load i32, ptr @blockr, align 4, !tbaa !17
  %206 = sitofp i32 %205 to double
  %207 = load i32, ptr @numcells, align 4, !tbaa !17
  %208 = sitofp i32 %207 to double
  %209 = tail call double @sqrt(double noundef %208) #44
  %210 = fdiv double %206, %209
  %211 = tail call double @log10(double noundef %210) #44
  %212 = load i32, ptr @core_expansion_given, align 4, !tbaa !17
  %213 = icmp eq i32 %212, 0
  %214 = fcmp oge double %211, 3.000000e+00
  %215 = select i1 %213, i1 %214, i1 false
  br i1 %215, label %216, label %231

216:                                              ; preds = %195
  %217 = fadd double %211, -3.000000e+00
  %218 = tail call double @llvm.fmuladd.f64(double %217, double 4.000000e-02, double 2.000000e-02)
  %219 = load double, ptr @expandExtra, align 8, !tbaa !36
  %220 = fadd double %218, %219
  %221 = fcmp ogt double %220, 1.100000e+00
  %222 = select i1 %221, double 1.100000e+00, double %220
  store double %222, ptr @expandExtra, align 8, !tbaa !36
  %223 = tail call double @sqrt(double noundef %196) #44
  %224 = fmul double %223, %222
  %225 = fptosi double %224 to i32
  %226 = add nsw i32 %225, 1
  store i32 %226, ptr @blockt, align 4, !tbaa !17
  store i32 %226, ptr @blockr, align 4, !tbaa !17
  %227 = load ptr, ptr @fpo, align 8, !tbaa !7
  %228 = load double, ptr @expandExtra, align 8, !tbaa !36
  %229 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %227, ptr noundef nonnull @.str.3.11, double noundef %228) #43
  %230 = load i32, ptr @core_expansion_given, align 4, !tbaa !17
  br label %231

231:                                              ; preds = %216, %195
  %232 = phi i32 [ %230, %216 ], [ %212, %195 ]
  %233 = icmp eq i32 %232, 0
  br i1 %233, label %243, label %234

234:                                              ; preds = %231
  %235 = load double, ptr @core_expansion, align 8, !tbaa !36
  store double %235, ptr @expandExtra, align 8, !tbaa !36
  %236 = tail call double @sqrt(double noundef %196) #44
  %237 = fmul double %235, %236
  %238 = fptosi double %237 to i32
  %239 = add nsw i32 %238, 1
  store i32 %239, ptr @blockt, align 4, !tbaa !17
  store i32 %239, ptr @blockr, align 4, !tbaa !17
  %240 = load ptr, ptr @fpo, align 8, !tbaa !7
  %241 = load double, ptr @expandExtra, align 8, !tbaa !36
  %242 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %240, ptr noundef nonnull @.str.3.11, double noundef %241) #43
  br label %243

243:                                              ; preds = %234, %231
  %244 = load double, ptr @chipaspect, align 8, !tbaa !36
  %245 = tail call double @sqrt(double noundef %244) #44
  %246 = load i32, ptr @blockt, align 4, !tbaa !17
  %247 = sitofp i32 %246 to double
  %248 = fmul double %245, %247
  %249 = fptosi double %248 to i32
  %250 = add nsw i32 %249, 1
  store i32 %250, ptr @blockt, align 4, !tbaa !17
  %251 = load double, ptr @chipaspect, align 8, !tbaa !36
  %252 = tail call double @sqrt(double noundef %251) #44
  %253 = fdiv double 1.000000e+00, %252
  %254 = load i32, ptr @blockr, align 4, !tbaa !17
  %255 = sitofp i32 %254 to double
  %256 = fmul double %253, %255
  %257 = fptosi double %256 to i32
  %258 = add nsw i32 %257, 1
  store i32 %258, ptr @blockr, align 4, !tbaa !17
  br label %259

259:                                              ; preds = %243, %102
  %260 = phi i32 [ %103, %102 ], [ %258, %243 ]
  %261 = load i32, ptr @maxWeight, align 4, !tbaa !17
  %262 = load i32, ptr @baseWeight, align 4, !tbaa !17
  %263 = sub nsw i32 %261, %262
  %264 = sitofp i32 %263 to double
  %265 = sitofp i32 %260 to double
  %266 = fmul double %265, 5.000000e-01
  %267 = fdiv double %264, %266
  store double %267, ptr @slopeX, align 8, !tbaa !36
  %268 = load i32, ptr @blockt, align 4, !tbaa !17
  %269 = sitofp i32 %268 to double
  %270 = fmul double %269, 5.000000e-01
  %271 = fdiv double %264, %270
  store double %271, ptr @slopeY, align 8, !tbaa !36
  %272 = sitofp i32 %262 to double
  store double %272, ptr @basefactor, align 8, !tbaa !36
  tail call void @placepads() #44
  %273 = load i32, ptr @blockr, align 4, !tbaa !17
  %274 = load i32, ptr @blockl, align 4, !tbaa !17
  %275 = add nsw i32 %274, %273
  %276 = sdiv i32 %275, 2
  store i32 %276, ptr @blockmx, align 4, !tbaa !17
  %277 = load i32, ptr @blockt, align 4, !tbaa !17
  %278 = load i32, ptr @blockb, align 4, !tbaa !17
  %279 = add nsw i32 %278, %277
  %280 = sdiv i32 %279, 2
  store i32 %280, ptr @blockmy, align 4, !tbaa !17
  %281 = sub nsw i32 %273, %274
  %282 = load i32, ptr @numBinsX, align 4, !tbaa !17
  %283 = sdiv i32 %281, %282
  %284 = mul nsw i32 %283, %282
  %285 = add i32 %274, %284
  %286 = sub i32 %273, %285
  %287 = sdiv i32 %282, 2
  %288 = icmp sge i32 %286, %287
  %289 = zext i1 %288 to i32
  %290 = add nsw i32 %283, %289
  store i32 %290, ptr @binWidthX, align 4, !tbaa !17
  %291 = add nsw i32 %274, 1
  %292 = sub i32 %291, %290
  store i32 %292, ptr @binOffsetX, align 4, !tbaa !17
  %293 = sub nsw i32 %277, %278
  %294 = load i32, ptr @numBinsY, align 4, !tbaa !17
  %295 = sdiv i32 %293, %294
  %296 = mul nsw i32 %295, %294
  %297 = add i32 %278, %296
  %298 = sub i32 %277, %297
  %299 = sdiv i32 %294, 2
  %300 = icmp sge i32 %298, %299
  %301 = zext i1 %300 to i32
  %302 = add nsw i32 %295, %301
  store i32 %302, ptr @binWidthY, align 4, !tbaa !17
  %303 = add nsw i32 %278, 1
  %304 = sub i32 %303, %302
  store i32 %304, ptr @binOffsetY, align 4, !tbaa !17
  tail call void @loadbins(i32 noundef 0) #44
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.fmuladd.f64(double, double, double) #13

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write)
declare double @log10(double noundef) local_unnamed_addr #15

; Function Attrs: nounwind optsize uwtable
define internal void @density() #0 {
  %1 = load i32, ptr @eNum, align 4, !tbaa !17
  %2 = icmp slt i32 %1, 1
  br i1 %2, label %6, label %3

3:                                                ; preds = %0
  %4 = add nuw i32 %1, 1
  %5 = zext i32 %4 to i64
  br label %9

6:                                                ; preds = %9, %0
  %7 = load i32, ptr @largestNet, align 4, !tbaa !17
  %8 = icmp slt i32 %7, 1
  br i1 %8, label %81, label %15

9:                                                ; preds = %9, %3
  %10 = phi i64 [ 1, %3 ], [ %13, %9 ]
  %11 = load ptr, ptr @eArray, align 8, !tbaa !7
  %12 = getelementptr inbounds %struct.ebox, ptr %11, i64 %10, i32 12
  store ptr null, ptr %12, align 8, !tbaa !184
  %13 = add nuw nsw i64 %10, 1
  %14 = icmp eq i64 %13, %5
  br i1 %14, label %6, label %9, !llvm.loop !185

15:                                               ; preds = %76, %6
  %16 = phi i32 [ %77, %76 ], [ %7, %6 ]
  %17 = phi i64 [ %78, %76 ], [ 1, %6 ]
  %18 = load ptr, ptr @netRoutes, align 8, !tbaa !7
  %19 = getelementptr inbounds %struct.nrbox, ptr %18, i64 %17
  %20 = getelementptr inbounds %struct.nrbox, ptr %18, i64 %17, i32 2
  %21 = load i32, ptr %20, align 4, !tbaa !186
  %22 = load ptr, ptr %19, align 8, !tbaa !188
  %23 = sext i32 %21 to i64
  %24 = getelementptr inbounds ptr, ptr %22, i64 %23
  %25 = load ptr, ptr %24, align 8, !tbaa !7
  %26 = getelementptr inbounds %struct.altbox, ptr %25, i64 0, i32 2
  %27 = load ptr, ptr %26, align 8, !tbaa !7
  %28 = icmp eq ptr %27, null
  br i1 %28, label %76, label %29

29:                                               ; preds = %15
  %30 = load ptr, ptr @eIndexArray, align 8, !tbaa !7
  %31 = load ptr, ptr @eArray, align 8, !tbaa !7
  br label %32

32:                                               ; preds = %68, %29
  %33 = phi ptr [ %69, %68 ], [ %31, %29 ]
  %34 = phi ptr [ %70, %68 ], [ %30, %29 ]
  %35 = phi ptr [ %72, %68 ], [ %27, %29 ]
  %36 = load i32, ptr %35, align 8, !tbaa !189
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds ptr, ptr %34, i64 %37
  %39 = load ptr, ptr %38, align 8, !tbaa !7
  %40 = getelementptr inbounds %struct.chanbox, ptr %35, i64 0, i32 1
  %41 = load i32, ptr %40, align 4, !tbaa !191
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds i32, ptr %39, i64 %42
  %44 = load i32, ptr %43, align 4, !tbaa !17
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds %struct.ebox, ptr %33, i64 %45
  %47 = load i32, ptr %46, align 8, !tbaa !114
  %48 = icmp eq i32 %36, %47
  %49 = getelementptr inbounds %struct.ebox, ptr %33, i64 %45, i32 5
  %50 = load i32, ptr %49, align 4, !tbaa !119
  %51 = getelementptr inbounds %struct.chanbox, ptr %35, i64 0, i32 3
  %52 = getelementptr inbounds %struct.chanbox, ptr %35, i64 0, i32 2
  %53 = getelementptr inbounds %struct.chanbox, ptr %35, i64 0, i32 2
  %54 = getelementptr inbounds %struct.chanbox, ptr %35, i64 0, i32 3
  %55 = select i1 %48, ptr %54, ptr %52
  %56 = select i1 %48, ptr %53, ptr %51
  %57 = load i32, ptr %55, align 4, !tbaa !17
  %58 = sub nsw i32 %50, %57
  %59 = load i32, ptr %56, align 4, !tbaa !17
  %60 = icmp sgt i32 %58, %59
  br i1 %60, label %61, label %68

61:                                               ; preds = %32
  %62 = getelementptr inbounds %struct.ebox, ptr %33, i64 %45, i32 12
  tail call void @tinsert(ptr noundef nonnull %62, i32 noundef %59, i32 noundef 1) #44
  %63 = load ptr, ptr @eArray, align 8, !tbaa !7
  %64 = getelementptr inbounds %struct.ebox, ptr %63, i64 %45, i32 12
  %65 = add nsw i32 %58, 1
  tail call void @tinsert(ptr noundef nonnull %64, i32 noundef %65, i32 noundef -1) #44
  %66 = load ptr, ptr @eIndexArray, align 8, !tbaa !7
  %67 = load ptr, ptr @eArray, align 8, !tbaa !7
  br label %68

68:                                               ; preds = %61, %32
  %69 = phi ptr [ %33, %32 ], [ %67, %61 ]
  %70 = phi ptr [ %34, %32 ], [ %66, %61 ]
  %71 = getelementptr inbounds %struct.chanbox, ptr %35, i64 0, i32 4
  %72 = load ptr, ptr %71, align 8, !tbaa !7
  %73 = icmp eq ptr %72, null
  br i1 %73, label %74, label %32, !llvm.loop !192

74:                                               ; preds = %68
  %75 = load i32, ptr @largestNet, align 4, !tbaa !17
  br label %76

76:                                               ; preds = %74, %15
  %77 = phi i32 [ %75, %74 ], [ %16, %15 ]
  %78 = add nuw nsw i64 %17, 1
  %79 = sext i32 %77 to i64
  %80 = icmp slt i64 %17, %79
  br i1 %80, label %15, label %81, !llvm.loop !193

81:                                               ; preds = %76, %6
  %82 = load ptr, ptr @fpo, align 8, !tbaa !7
  %83 = tail call i64 @fwrite(ptr nonnull @.str.12, i64 19, i64 1, ptr %82)
  %84 = tail call noalias dereferenceable_or_null(80008) ptr @malloc(i64 noundef 80008) #45
  %85 = load i32, ptr @eNum, align 4, !tbaa !17
  %86 = icmp slt i32 %85, 1
  br i1 %86, label %166, label %87

87:                                               ; preds = %81
  %88 = load ptr, ptr @eArray, align 8, !tbaa !7
  br label %89

89:                                               ; preds = %160, %87
  %90 = phi ptr [ %88, %87 ], [ %161, %160 ]
  %91 = phi i64 [ 1, %87 ], [ %162, %160 ]
  %92 = getelementptr inbounds %struct.ebox, ptr %90, i64 %91, i32 12
  %93 = load ptr, ptr %92, align 8, !tbaa !184
  %94 = icmp eq ptr %93, null
  br i1 %94, label %95, label %97

95:                                               ; preds = %89
  %96 = getelementptr inbounds %struct.ebox, ptr %90, i64 %91, i32 10
  store i32 0, ptr %96, align 8, !tbaa !194
  br label %160

97:                                               ; preds = %89
  store ptr %93, ptr %84, align 8, !tbaa !7
  br label %98

98:                                               ; preds = %144, %97
  %99 = phi i64 [ 0, %97 ], [ %103, %144 ]
  %100 = phi i32 [ 0, %97 ], [ %148, %144 ]
  %101 = phi i32 [ 0, %97 ], [ %147, %144 ]
  %102 = phi i32 [ 0, %97 ], [ %146, %144 ]
  %103 = add nuw i64 %99, 1
  %104 = getelementptr inbounds ptr, ptr %84, i64 %99
  %105 = load ptr, ptr %104, align 8, !tbaa !7
  %106 = getelementptr inbounds %struct.tnode, ptr %105, i64 0, i32 1
  %107 = load i32, ptr %106, align 4, !tbaa !21
  %108 = icmp sgt i32 %107, 0
  br i1 %108, label %109, label %127

109:                                              ; preds = %98
  %110 = getelementptr inbounds %struct.tnode, ptr %105, i64 0, i32 2
  %111 = load ptr, ptr %110, align 8, !tbaa !11
  %112 = add nsw i32 %101, 1
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds ptr, ptr %84, i64 %113
  store ptr %111, ptr %114, align 8, !tbaa !7
  %115 = getelementptr inbounds %struct.tnode, ptr %105, i64 0, i32 3
  %116 = load ptr, ptr %115, align 8, !tbaa !27
  %117 = add nsw i32 %101, 2
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds ptr, ptr %84, i64 %118
  store ptr %116, ptr %119, align 8, !tbaa !7
  %120 = getelementptr inbounds %struct.tnode, ptr %105, i64 0, i32 4
  %121 = load ptr, ptr %120, align 8, !tbaa !28
  %122 = icmp eq ptr %121, null
  br i1 %122, label %144, label %123

123:                                              ; preds = %109
  %124 = add nsw i32 %101, 3
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds ptr, ptr %84, i64 %125
  store ptr %121, ptr %126, align 8, !tbaa !7
  br label %144

127:                                              ; preds = %98
  %128 = getelementptr inbounds %struct.tnode, ptr %105, i64 0, i32 9
  %129 = load ptr, ptr %128, align 8, !tbaa !7
  %130 = icmp eq ptr %129, null
  br i1 %130, label %140, label %131

131:                                              ; preds = %127
  %132 = load i32, ptr %129, align 8, !tbaa !19
  br label %133

133:                                              ; preds = %133, %131
  %134 = phi ptr [ %129, %131 ], [ %138, %133 ]
  %135 = phi i32 [ %102, %131 ], [ %136, %133 ]
  %136 = add nsw i32 %132, %135
  %137 = getelementptr inbounds %struct.plist, ptr %134, i64 0, i32 1
  %138 = load ptr, ptr %137, align 8, !tbaa !7
  %139 = icmp eq ptr %138, null
  br i1 %139, label %140, label %133, !llvm.loop !195

140:                                              ; preds = %133, %127
  %141 = phi i32 [ %102, %127 ], [ %136, %133 ]
  %142 = tail call i32 @llvm.smax.i32(i32 %141, i32 %100)
  %143 = sext i32 %101 to i64
  br label %144

144:                                              ; preds = %140, %123, %109
  %145 = phi i64 [ %143, %140 ], [ %118, %109 ], [ %125, %123 ]
  %146 = phi i32 [ %141, %140 ], [ %102, %109 ], [ %102, %123 ]
  %147 = phi i32 [ %101, %140 ], [ %117, %109 ], [ %124, %123 ]
  %148 = phi i32 [ %142, %140 ], [ %100, %109 ], [ %100, %123 ]
  %149 = icmp sgt i64 %145, %99
  br i1 %149, label %98, label %150, !llvm.loop !196

150:                                              ; preds = %144
  %.lcssa6 = phi i32 [ %148, %144 ]
  %151 = getelementptr inbounds %struct.ebox, ptr %90, i64 %91, i32 10
  store i32 %.lcssa6, ptr %151, align 8, !tbaa !194
  %152 = load ptr, ptr @fpo, align 8, !tbaa !7
  %153 = getelementptr inbounds %struct.ebox, ptr %90, i64 %91
  %154 = load i32, ptr %153, align 8, !tbaa !114
  %155 = getelementptr inbounds %struct.ebox, ptr %90, i64 %91, i32 1
  %156 = load i32, ptr %155, align 4, !tbaa !116
  %157 = trunc i64 %91 to i32
  %158 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %152, ptr noundef nonnull @.str.1.13, i32 noundef %157, i32 noundef %154, i32 noundef %156, i32 noundef %.lcssa6) #43
  %159 = load ptr, ptr @eArray, align 8, !tbaa !7
  br label %160

160:                                              ; preds = %150, %95
  %161 = phi ptr [ %159, %150 ], [ %90, %95 ]
  %162 = add nuw nsw i64 %91, 1
  %163 = load i32, ptr @eNum, align 4, !tbaa !17
  %164 = sext i32 %163 to i64
  %165 = icmp slt i64 %91, %164
  br i1 %165, label %89, label %166, !llvm.loop !197

166:                                              ; preds = %160, %81
  tail call void @free(ptr noundef %84) #44
  %167 = load i32, ptr @numXnodes, align 4, !tbaa !17
  %168 = icmp slt i32 %167, 1
  br i1 %168, label %179, label %169

169:                                              ; preds = %166
  %170 = load ptr, ptr @xNodeArray, align 8, !tbaa !7
  %171 = load ptr, ptr @eArray, align 8
  %172 = load i32, ptr @defaultTracks, align 4
  %173 = icmp sgt i32 %172, 0
  %174 = add nuw nsw i32 %172, 1
  %175 = load i32, ptr @pitch, align 4
  %176 = mul nsw i32 %175, %174
  %177 = add nuw i32 %167, 1
  %178 = zext i32 %177 to i64
  br label %192

179:                                              ; preds = %234, %166
  %180 = load i32, ptr @numYnodes, align 4, !tbaa !17
  %181 = icmp slt i32 %180, 1
  br i1 %181, label %237, label %182

182:                                              ; preds = %179
  %183 = load ptr, ptr @yNodeArray, align 8, !tbaa !7
  %184 = load ptr, ptr @eArray, align 8
  %185 = load i32, ptr @defaultTracks, align 4
  %186 = icmp sgt i32 %185, 0
  %187 = add nuw nsw i32 %185, 1
  %188 = load i32, ptr @pitch, align 4
  %189 = mul nsw i32 %188, %187
  %190 = add nuw i32 %180, 1
  %191 = zext i32 %190 to i64
  br label %242

192:                                              ; preds = %234, %169
  %193 = phi i64 [ 1, %169 ], [ %235, %234 ]
  %194 = getelementptr inbounds ptr, ptr %170, i64 %193
  %195 = load ptr, ptr %194, align 8, !tbaa !7
  %196 = icmp eq ptr %195, null
  br i1 %196, label %234, label %197

197:                                              ; preds = %230, %192
  %198 = phi ptr [ %232, %230 ], [ %195, %192 ]
  %199 = load i32, ptr %198, align 8, !tbaa !198
  %200 = icmp eq i32 %199, 1
  br i1 %200, label %230, label %201

201:                                              ; preds = %197
  %202 = getelementptr inbounds %struct.wcbox, ptr %198, i64 0, i32 3
  store i32 0, ptr %202, align 8, !tbaa !96
  %203 = getelementptr inbounds %struct.wcbox, ptr %198, i64 0, i32 2
  %204 = load ptr, ptr %203, align 8, !tbaa !199
  %205 = load i32, ptr %204, align 4, !tbaa !17
  %206 = icmp slt i32 %205, 1
  br i1 %206, label %227, label %207

207:                                              ; preds = %201
  %208 = add nuw i32 %205, 1
  %209 = zext i32 %208 to i64
  br label %210

210:                                              ; preds = %210, %207
  %211 = phi i64 [ 1, %207 ], [ %219, %210 ]
  %212 = phi i32 [ 0, %207 ], [ %218, %210 ]
  %213 = getelementptr inbounds i32, ptr %204, i64 %211
  %214 = load i32, ptr %213, align 4, !tbaa !17
  %215 = sext i32 %214 to i64
  %216 = getelementptr inbounds %struct.ebox, ptr %171, i64 %215, i32 10
  %217 = load i32, ptr %216, align 8, !tbaa !194
  %218 = add nsw i32 %212, %217
  store i32 %218, ptr %202, align 8, !tbaa !96
  %219 = add nuw nsw i64 %211, 1
  %220 = icmp eq i64 %219, %209
  br i1 %220, label %221, label %210, !llvm.loop !200

221:                                              ; preds = %210
  %.lcssa5 = phi i32 [ %218, %210 ]
  %222 = icmp sgt i32 %.lcssa5, 0
  br i1 %222, label %223, label %227

223:                                              ; preds = %221
  %224 = add nuw i32 %.lcssa5, 2
  %225 = add i32 %224, %172
  %226 = mul nsw i32 %225, %175
  br label %228

227:                                              ; preds = %221, %201
  br i1 %173, label %228, label %230

228:                                              ; preds = %227, %223
  %229 = phi i32 [ %226, %223 ], [ %176, %227 ]
  store i32 %229, ptr %202, align 8, !tbaa !96
  br label %230

230:                                              ; preds = %228, %227, %197
  %231 = getelementptr inbounds %struct.wcbox, ptr %198, i64 0, i32 4
  %232 = load ptr, ptr %231, align 8, !tbaa !7
  %233 = icmp eq ptr %232, null
  br i1 %233, label %234, label %197, !llvm.loop !201

234:                                              ; preds = %230, %192
  %235 = add nuw nsw i64 %193, 1
  %236 = icmp eq i64 %235, %178
  br i1 %236, label %179, label %192, !llvm.loop !202

237:                                              ; preds = %284, %179
  br i1 %168, label %287, label %238

238:                                              ; preds = %237
  %239 = load ptr, ptr @xNodeArray, align 8, !tbaa !7
  %240 = add nuw i32 %167, 1
  %241 = zext i32 %240 to i64
  br label %292

242:                                              ; preds = %284, %182
  %243 = phi i64 [ 1, %182 ], [ %285, %284 ]
  %244 = getelementptr inbounds ptr, ptr %183, i64 %243
  %245 = load ptr, ptr %244, align 8, !tbaa !7
  %246 = icmp eq ptr %245, null
  br i1 %246, label %284, label %247

247:                                              ; preds = %280, %242
  %248 = phi ptr [ %282, %280 ], [ %245, %242 ]
  %249 = load i32, ptr %248, align 8, !tbaa !198
  %250 = icmp eq i32 %249, 1
  br i1 %250, label %280, label %251

251:                                              ; preds = %247
  %252 = getelementptr inbounds %struct.wcbox, ptr %248, i64 0, i32 3
  store i32 0, ptr %252, align 8, !tbaa !96
  %253 = getelementptr inbounds %struct.wcbox, ptr %248, i64 0, i32 2
  %254 = load ptr, ptr %253, align 8, !tbaa !199
  %255 = load i32, ptr %254, align 4, !tbaa !17
  %256 = icmp slt i32 %255, 1
  br i1 %256, label %277, label %257

257:                                              ; preds = %251
  %258 = add nuw i32 %255, 1
  %259 = zext i32 %258 to i64
  br label %260

260:                                              ; preds = %260, %257
  %261 = phi i64 [ 1, %257 ], [ %269, %260 ]
  %262 = phi i32 [ 0, %257 ], [ %268, %260 ]
  %263 = getelementptr inbounds i32, ptr %254, i64 %261
  %264 = load i32, ptr %263, align 4, !tbaa !17
  %265 = sext i32 %264 to i64
  %266 = getelementptr inbounds %struct.ebox, ptr %184, i64 %265, i32 10
  %267 = load i32, ptr %266, align 8, !tbaa !194
  %268 = add nsw i32 %262, %267
  store i32 %268, ptr %252, align 8, !tbaa !96
  %269 = add nuw nsw i64 %261, 1
  %270 = icmp eq i64 %269, %259
  br i1 %270, label %271, label %260, !llvm.loop !203

271:                                              ; preds = %260
  %.lcssa4 = phi i32 [ %268, %260 ]
  %272 = icmp sgt i32 %.lcssa4, 0
  br i1 %272, label %273, label %277

273:                                              ; preds = %271
  %274 = add nuw i32 %.lcssa4, 2
  %275 = add i32 %274, %185
  %276 = mul nsw i32 %275, %188
  br label %278

277:                                              ; preds = %271, %251
  br i1 %186, label %278, label %280

278:                                              ; preds = %277, %273
  %279 = phi i32 [ %276, %273 ], [ %189, %277 ]
  store i32 %279, ptr %252, align 8, !tbaa !96
  br label %280

280:                                              ; preds = %278, %277, %247
  %281 = getelementptr inbounds %struct.wcbox, ptr %248, i64 0, i32 4
  %282 = load ptr, ptr %281, align 8, !tbaa !7
  %283 = icmp eq ptr %282, null
  br i1 %283, label %284, label %247, !llvm.loop !204

284:                                              ; preds = %280, %242
  %285 = add nuw nsw i64 %243, 1
  %286 = icmp eq i64 %285, %191
  br i1 %286, label %237, label %242, !llvm.loop !205

287:                                              ; preds = %402, %237
  br i1 %181, label %405, label %288

288:                                              ; preds = %287
  %289 = load ptr, ptr @yNodeArray, align 8, !tbaa !7
  %290 = add nuw i32 %180, 1
  %291 = zext i32 %290 to i64
  br label %408

292:                                              ; preds = %402, %238
  %293 = phi i64 [ 1, %238 ], [ %403, %402 ]
  %294 = getelementptr inbounds ptr, ptr %239, i64 %293
  %295 = load ptr, ptr %294, align 8, !tbaa !7
  %296 = icmp eq ptr %295, null
  br i1 %296, label %402, label %297

297:                                              ; preds = %292
  %298 = load ptr, ptr @eArray, align 8
  %299 = load ptr, ptr @edgeList, align 8
  %300 = load ptr, ptr @cellList, align 8
  br label %301

301:                                              ; preds = %398, %297
  %302 = phi ptr [ %295, %297 ], [ %400, %398 ]
  %303 = load i32, ptr %302, align 8, !tbaa !198
  %304 = icmp eq i32 %303, 1
  br i1 %304, label %398, label %305

305:                                              ; preds = %301
  %306 = getelementptr inbounds %struct.wcbox, ptr %302, i64 0, i32 2
  %307 = load ptr, ptr %306, align 8, !tbaa !199
  %308 = getelementptr inbounds i32, ptr %307, i64 1
  %309 = load i32, ptr %308, align 4, !tbaa !17
  %310 = sext i32 %309 to i64
  %311 = getelementptr inbounds %struct.ebox, ptr %298, i64 %310, i32 8
  %312 = load i32, ptr %311, align 8, !tbaa !156
  %313 = sext i32 %312 to i64
  %314 = getelementptr inbounds %struct.edgebox, ptr %299, i64 %313
  %315 = load i32, ptr %314, align 4, !tbaa !148
  %316 = load i32, ptr %307, align 4, !tbaa !17
  %317 = sext i32 %316 to i64
  %318 = getelementptr inbounds i32, ptr %307, i64 %317
  %319 = load i32, ptr %318, align 4, !tbaa !17
  %320 = sext i32 %319 to i64
  %321 = getelementptr inbounds %struct.ebox, ptr %298, i64 %320, i32 9
  %322 = load i32, ptr %321, align 4, !tbaa !157
  %323 = sext i32 %322 to i64
  %324 = getelementptr inbounds %struct.edgebox, ptr %299, i64 %323
  %325 = load i32, ptr %324, align 4, !tbaa !148
  %326 = icmp slt i32 %316, 1
  br i1 %326, label %341, label %327

327:                                              ; preds = %305
  %328 = add nuw i32 %316, 1
  %329 = zext i32 %328 to i64
  br label %330

330:                                              ; preds = %330, %327
  %331 = phi i64 [ 1, %327 ], [ %339, %330 ]
  %332 = phi i32 [ 0, %327 ], [ %338, %330 ]
  %333 = getelementptr inbounds i32, ptr %307, i64 %331
  %334 = load i32, ptr %333, align 4, !tbaa !17
  %335 = sext i32 %334 to i64
  %336 = getelementptr inbounds %struct.ebox, ptr %298, i64 %335, i32 2
  %337 = load i32, ptr %336, align 8, !tbaa !155
  %338 = add nsw i32 %337, %332
  %339 = add nuw nsw i64 %331, 1
  %340 = icmp eq i64 %339, %329
  br i1 %340, label %341, label %330, !llvm.loop !206

341:                                              ; preds = %330, %305
  %342 = phi i32 [ 0, %305 ], [ %338, %330 ]
  %343 = getelementptr inbounds %struct.wcbox, ptr %302, i64 0, i32 3
  %344 = load i32, ptr %343, align 8, !tbaa !96
  %345 = sdiv i32 %344, 2
  %346 = sub nsw i32 %344, %345
  %347 = icmp sgt i32 %315, 0
  br i1 %347, label %348, label %372

348:                                              ; preds = %341
  %349 = zext i32 %315 to i64
  %350 = getelementptr inbounds ptr, ptr %300, i64 %349
  br label %351

351:                                              ; preds = %351, %348
  %352 = phi ptr [ %350, %348 ], [ %356, %351 ]
  %353 = load ptr, ptr %352, align 8, !tbaa !7
  %354 = load i32, ptr %353, align 8, !tbaa !207
  %355 = icmp eq i32 %354, %312
  %356 = getelementptr inbounds %struct.clbox, ptr %353, i64 0, i32 7
  br i1 %355, label %357, label %351

357:                                              ; preds = %351
  %.lcssa2 = phi ptr [ %353, %351 ]
  %358 = sub nsw i32 %342, %344
  %359 = getelementptr inbounds %struct.clbox, ptr %.lcssa2, i64 0, i32 6
  %360 = load i32, ptr %359, align 8, !tbaa !209
  %361 = icmp slt i32 %358, %360
  br i1 %361, label %362, label %364

362:                                              ; preds = %357
  store i32 %358, ptr %359, align 8, !tbaa !209
  %363 = getelementptr inbounds %struct.clbox, ptr %.lcssa2, i64 0, i32 1
  store i32 %345, ptr %363, align 4, !tbaa !210
  br label %364

364:                                              ; preds = %362, %357
  %365 = getelementptr inbounds %struct.clbox, ptr %.lcssa2, i64 0, i32 2
  store i32 0, ptr %365, align 8, !tbaa !211
  %366 = getelementptr inbounds %struct.edgebox, ptr %299, i64 %313, i32 3
  %367 = load i32, ptr %366, align 4, !tbaa !140
  %368 = getelementptr inbounds %struct.clbox, ptr %.lcssa2, i64 0, i32 3
  store i32 %367, ptr %368, align 4, !tbaa !212
  %369 = getelementptr inbounds %struct.edgebox, ptr %299, i64 %313, i32 1
  %370 = getelementptr inbounds %struct.clbox, ptr %.lcssa2, i64 0, i32 4
  %371 = load <2 x i32>, ptr %369, align 4, !tbaa !17
  store <2 x i32> %371, ptr %370, align 8, !tbaa !17
  br label %372

372:                                              ; preds = %364, %341
  %373 = icmp sgt i32 %325, 0
  br i1 %373, label %374, label %398

374:                                              ; preds = %372
  %375 = zext i32 %325 to i64
  %376 = getelementptr inbounds ptr, ptr %300, i64 %375
  br label %377

377:                                              ; preds = %377, %374
  %378 = phi ptr [ %376, %374 ], [ %382, %377 ]
  %379 = load ptr, ptr %378, align 8, !tbaa !7
  %380 = load i32, ptr %379, align 8, !tbaa !207
  %381 = icmp eq i32 %380, %322
  %382 = getelementptr inbounds %struct.clbox, ptr %379, i64 0, i32 7
  br i1 %381, label %383, label %377

383:                                              ; preds = %377
  %.lcssa3 = phi ptr [ %379, %377 ]
  %384 = sub nsw i32 %342, %344
  %385 = getelementptr inbounds %struct.clbox, ptr %.lcssa3, i64 0, i32 6
  %386 = load i32, ptr %385, align 8, !tbaa !209
  %387 = icmp slt i32 %384, %386
  br i1 %387, label %388, label %390

388:                                              ; preds = %383
  store i32 %384, ptr %385, align 8, !tbaa !209
  %389 = getelementptr inbounds %struct.clbox, ptr %.lcssa3, i64 0, i32 1
  store i32 %346, ptr %389, align 4, !tbaa !210
  br label %390

390:                                              ; preds = %388, %383
  %391 = getelementptr inbounds %struct.clbox, ptr %.lcssa3, i64 0, i32 2
  store i32 0, ptr %391, align 8, !tbaa !211
  %392 = getelementptr inbounds %struct.edgebox, ptr %299, i64 %323, i32 3
  %393 = load i32, ptr %392, align 4, !tbaa !140
  %394 = getelementptr inbounds %struct.clbox, ptr %.lcssa3, i64 0, i32 3
  store i32 %393, ptr %394, align 4, !tbaa !212
  %395 = getelementptr inbounds %struct.edgebox, ptr %299, i64 %323, i32 1
  %396 = getelementptr inbounds %struct.clbox, ptr %.lcssa3, i64 0, i32 4
  %397 = load <2 x i32>, ptr %395, align 4, !tbaa !17
  store <2 x i32> %397, ptr %396, align 8, !tbaa !17
  br label %398

398:                                              ; preds = %390, %372, %301
  %399 = getelementptr inbounds %struct.wcbox, ptr %302, i64 0, i32 4
  %400 = load ptr, ptr %399, align 8, !tbaa !7
  %401 = icmp eq ptr %400, null
  br i1 %401, label %402, label %301, !llvm.loop !213

402:                                              ; preds = %398, %292
  %403 = add nuw nsw i64 %293, 1
  %404 = icmp eq i64 %403, %241
  br i1 %404, label %287, label %292, !llvm.loop !214

405:                                              ; preds = %518, %287
  %406 = load i32, ptr @numberCells, align 4, !tbaa !17
  %407 = icmp slt i32 %406, 1
  br i1 %407, label %557, label %521

408:                                              ; preds = %518, %288
  %409 = phi i64 [ 1, %288 ], [ %519, %518 ]
  %410 = getelementptr inbounds ptr, ptr %289, i64 %409
  %411 = load ptr, ptr %410, align 8, !tbaa !7
  %412 = icmp eq ptr %411, null
  br i1 %412, label %518, label %413

413:                                              ; preds = %408
  %414 = load ptr, ptr @eArray, align 8
  %415 = load ptr, ptr @edgeList, align 8
  %416 = load ptr, ptr @cellList, align 8
  br label %417

417:                                              ; preds = %514, %413
  %418 = phi ptr [ %411, %413 ], [ %516, %514 ]
  %419 = load i32, ptr %418, align 8, !tbaa !198
  %420 = icmp eq i32 %419, 1
  br i1 %420, label %514, label %421

421:                                              ; preds = %417
  %422 = getelementptr inbounds %struct.wcbox, ptr %418, i64 0, i32 2
  %423 = load ptr, ptr %422, align 8, !tbaa !199
  %424 = getelementptr inbounds i32, ptr %423, i64 1
  %425 = load i32, ptr %424, align 4, !tbaa !17
  %426 = sext i32 %425 to i64
  %427 = getelementptr inbounds %struct.ebox, ptr %414, i64 %426, i32 8
  %428 = load i32, ptr %427, align 8, !tbaa !156
  %429 = sext i32 %428 to i64
  %430 = getelementptr inbounds %struct.edgebox, ptr %415, i64 %429
  %431 = load i32, ptr %430, align 4, !tbaa !148
  %432 = load i32, ptr %423, align 4, !tbaa !17
  %433 = sext i32 %432 to i64
  %434 = getelementptr inbounds i32, ptr %423, i64 %433
  %435 = load i32, ptr %434, align 4, !tbaa !17
  %436 = sext i32 %435 to i64
  %437 = getelementptr inbounds %struct.ebox, ptr %414, i64 %436, i32 9
  %438 = load i32, ptr %437, align 4, !tbaa !157
  %439 = sext i32 %438 to i64
  %440 = getelementptr inbounds %struct.edgebox, ptr %415, i64 %439
  %441 = load i32, ptr %440, align 4, !tbaa !148
  %442 = icmp slt i32 %432, 1
  br i1 %442, label %457, label %443

443:                                              ; preds = %421
  %444 = add nuw i32 %432, 1
  %445 = zext i32 %444 to i64
  br label %446

446:                                              ; preds = %446, %443
  %447 = phi i64 [ 1, %443 ], [ %455, %446 ]
  %448 = phi i32 [ 0, %443 ], [ %454, %446 ]
  %449 = getelementptr inbounds i32, ptr %423, i64 %447
  %450 = load i32, ptr %449, align 4, !tbaa !17
  %451 = sext i32 %450 to i64
  %452 = getelementptr inbounds %struct.ebox, ptr %414, i64 %451, i32 2
  %453 = load i32, ptr %452, align 8, !tbaa !155
  %454 = add nsw i32 %453, %448
  %455 = add nuw nsw i64 %447, 1
  %456 = icmp eq i64 %455, %445
  br i1 %456, label %457, label %446, !llvm.loop !215

457:                                              ; preds = %446, %421
  %458 = phi i32 [ 0, %421 ], [ %454, %446 ]
  %459 = getelementptr inbounds %struct.wcbox, ptr %418, i64 0, i32 3
  %460 = load i32, ptr %459, align 8, !tbaa !96
  %461 = sdiv i32 %460, 2
  %462 = sub nsw i32 %460, %461
  %463 = icmp sgt i32 %431, 0
  br i1 %463, label %464, label %488

464:                                              ; preds = %457
  %465 = zext i32 %431 to i64
  %466 = getelementptr inbounds ptr, ptr %416, i64 %465
  br label %467

467:                                              ; preds = %467, %464
  %468 = phi ptr [ %466, %464 ], [ %472, %467 ]
  %469 = load ptr, ptr %468, align 8, !tbaa !7
  %470 = load i32, ptr %469, align 8, !tbaa !207
  %471 = icmp eq i32 %470, %428
  %472 = getelementptr inbounds %struct.clbox, ptr %469, i64 0, i32 7
  br i1 %471, label %473, label %467

473:                                              ; preds = %467
  %.lcssa = phi ptr [ %469, %467 ]
  %474 = sub nsw i32 %458, %460
  %475 = getelementptr inbounds %struct.clbox, ptr %.lcssa, i64 0, i32 6
  %476 = load i32, ptr %475, align 8, !tbaa !209
  %477 = icmp slt i32 %474, %476
  br i1 %477, label %478, label %480

478:                                              ; preds = %473
  store i32 %474, ptr %475, align 8, !tbaa !209
  %479 = getelementptr inbounds %struct.clbox, ptr %.lcssa, i64 0, i32 1
  store i32 %461, ptr %479, align 4, !tbaa !210
  br label %480

480:                                              ; preds = %478, %473
  %481 = getelementptr inbounds %struct.clbox, ptr %.lcssa, i64 0, i32 2
  store i32 1, ptr %481, align 8, !tbaa !211
  %482 = getelementptr inbounds %struct.edgebox, ptr %415, i64 %429, i32 3
  %483 = load i32, ptr %482, align 4, !tbaa !140
  %484 = getelementptr inbounds %struct.clbox, ptr %.lcssa, i64 0, i32 3
  store i32 %483, ptr %484, align 4, !tbaa !212
  %485 = getelementptr inbounds %struct.edgebox, ptr %415, i64 %429, i32 1
  %486 = getelementptr inbounds %struct.clbox, ptr %.lcssa, i64 0, i32 4
  %487 = load <2 x i32>, ptr %485, align 4, !tbaa !17
  store <2 x i32> %487, ptr %486, align 8, !tbaa !17
  br label %488

488:                                              ; preds = %480, %457
  %489 = icmp sgt i32 %441, 0
  br i1 %489, label %490, label %514

490:                                              ; preds = %488
  %491 = zext i32 %441 to i64
  %492 = getelementptr inbounds ptr, ptr %416, i64 %491
  br label %493

493:                                              ; preds = %493, %490
  %494 = phi ptr [ %492, %490 ], [ %498, %493 ]
  %495 = load ptr, ptr %494, align 8, !tbaa !7
  %496 = load i32, ptr %495, align 8, !tbaa !207
  %497 = icmp eq i32 %496, %438
  %498 = getelementptr inbounds %struct.clbox, ptr %495, i64 0, i32 7
  br i1 %497, label %499, label %493

499:                                              ; preds = %493
  %.lcssa1 = phi ptr [ %495, %493 ]
  %500 = sub nsw i32 %458, %460
  %501 = getelementptr inbounds %struct.clbox, ptr %.lcssa1, i64 0, i32 6
  %502 = load i32, ptr %501, align 8, !tbaa !209
  %503 = icmp slt i32 %500, %502
  br i1 %503, label %504, label %506

504:                                              ; preds = %499
  store i32 %500, ptr %501, align 8, !tbaa !209
  %505 = getelementptr inbounds %struct.clbox, ptr %.lcssa1, i64 0, i32 1
  store i32 %462, ptr %505, align 4, !tbaa !210
  br label %506

506:                                              ; preds = %504, %499
  %507 = getelementptr inbounds %struct.clbox, ptr %.lcssa1, i64 0, i32 2
  store i32 1, ptr %507, align 8, !tbaa !211
  %508 = getelementptr inbounds %struct.edgebox, ptr %415, i64 %439, i32 3
  %509 = load i32, ptr %508, align 4, !tbaa !140
  %510 = getelementptr inbounds %struct.clbox, ptr %.lcssa1, i64 0, i32 3
  store i32 %509, ptr %510, align 4, !tbaa !212
  %511 = getelementptr inbounds %struct.edgebox, ptr %415, i64 %439, i32 1
  %512 = getelementptr inbounds %struct.clbox, ptr %.lcssa1, i64 0, i32 4
  %513 = load <2 x i32>, ptr %511, align 4, !tbaa !17
  store <2 x i32> %513, ptr %512, align 8, !tbaa !17
  br label %514

514:                                              ; preds = %506, %488, %417
  %515 = getelementptr inbounds %struct.wcbox, ptr %418, i64 0, i32 4
  %516 = load ptr, ptr %515, align 8, !tbaa !7
  %517 = icmp eq ptr %516, null
  br i1 %517, label %518, label %417, !llvm.loop !216

518:                                              ; preds = %514, %408
  %519 = add nuw nsw i64 %409, 1
  %520 = icmp eq i64 %519, %291
  br i1 %520, label %405, label %408, !llvm.loop !217

521:                                              ; preds = %552, %405
  %522 = phi i64 [ %553, %552 ], [ 1, %405 ]
  %523 = load ptr, ptr @cellList, align 8, !tbaa !7
  %524 = getelementptr inbounds ptr, ptr %523, i64 %522
  %525 = load ptr, ptr %524, align 8, !tbaa !7
  %526 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %527 = trunc i64 %522 to i32
  %528 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %526, ptr noundef nonnull @.str.2.14, i32 noundef %527) #43
  %529 = icmp eq ptr %525, null
  br i1 %529, label %552, label %530

530:                                              ; preds = %530, %521
  %531 = phi ptr [ %550, %530 ], [ %525, %521 ]
  %532 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %533 = load i32, ptr %531, align 8, !tbaa !207
  %534 = getelementptr inbounds %struct.clbox, ptr %531, i64 0, i32 1
  %535 = load i32, ptr %534, align 4, !tbaa !210
  %536 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %532, ptr noundef nonnull @.str.3.15, i32 noundef %533, i32 noundef %535) #43
  %537 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %538 = getelementptr inbounds %struct.clbox, ptr %531, i64 0, i32 2
  %539 = load i32, ptr %538, align 8, !tbaa !211
  %540 = getelementptr inbounds %struct.clbox, ptr %531, i64 0, i32 3
  %541 = load i32, ptr %540, align 4, !tbaa !212
  %542 = getelementptr inbounds %struct.clbox, ptr %531, i64 0, i32 4
  %543 = load i32, ptr %542, align 8, !tbaa !218
  %544 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %537, ptr noundef nonnull @.str.4.16, i32 noundef %539, i32 noundef %541, i32 noundef %543) #43
  %545 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %546 = getelementptr inbounds %struct.clbox, ptr %531, i64 0, i32 5
  %547 = load i32, ptr %546, align 4, !tbaa !219
  %548 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %545, ptr noundef nonnull @.str.5, i32 noundef %547) #43
  %549 = getelementptr inbounds %struct.clbox, ptr %531, i64 0, i32 7
  %550 = load ptr, ptr %549, align 8, !tbaa !220
  %551 = icmp eq ptr %550, null
  br i1 %551, label %552, label %530, !llvm.loop !221

552:                                              ; preds = %530, %521
  %553 = add nuw nsw i64 %522, 1
  %554 = load i32, ptr @numberCells, align 4, !tbaa !17
  %555 = sext i32 %554 to i64
  %556 = icmp slt i64 %522, %555
  br i1 %556, label %521, label %557, !llvm.loop !222

557:                                              ; preds = %552, %405
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @finalout() #0 {
  %1 = alloca [1024 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 1024, ptr nonnull %1) #47
  store i32 0, ptr @TWsignal, align 4, !tbaa !17
  %2 = load double, ptr @Tsave, align 8, !tbaa !36
  %3 = tail call double @log10(double noundef %2) #44
  %4 = fcmp ogt double %3, 6.000000e+00
  %5 = fadd double %3, -1.000000e+00
  %6 = fmul double %5, 2.000000e+00
  %7 = select i1 %4, double %6, double 1.000000e+01
  %8 = tail call double @exp2(double %7) #47
  store i32 0, ptr @redoFlag, align 4, !tbaa !17
  tail call void @prepOutput() #43
  %9 = load ptr, ptr @cktName, align 8, !tbaa !7
  %10 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %1, ptr noundef nonnull dereferenceable(1) @.str.17, ptr noundef %9) #44
  %11 = call noalias ptr @fopen(ptr noundef nonnull %1, ptr noundef nonnull @.str.1.18) #43
  tail call void @gpass2(ptr noundef %11) #44
  tail call void @grdcell(ptr noundef %11) #44
  %12 = tail call i32 @fclose(ptr noundef %11) #43
  store ptr @goverlap, ptr @overlap, align 8, !tbaa !7
  store ptr @goverlapf, ptr @overlapf, align 8, !tbaa !7
  store ptr @goverlapx, ptr @overlapx, align 8, !tbaa !7
  tail call void @rebin(i32 noundef 0) #44
  %13 = load double, ptr @lapFactor, align 8, !tbaa !36
  %14 = fmul double %13, 2.000000e+00
  store double %14, ptr @lapFactor, align 8, !tbaa !36
  %15 = fdiv double 4.000000e+00, %14
  %16 = fptosi double %15 to i32
  store i32 %16, ptr @offset, align 4, !tbaa !17
  %17 = load ptr, ptr @fpo, align 8, !tbaa !7
  %18 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %17, ptr noundef nonnull @.str.2.19, double noundef %14) #43
  %19 = load ptr, ptr @fpo, align 8, !tbaa !7
  %20 = load i32, ptr @offset, align 4, !tbaa !17
  %21 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %19, ptr noundef nonnull @.str.3.20, i32 noundef %20) #43
  %22 = tail call i32 @findcost() #44
  store i32 %22, ptr @funccost, align 4, !tbaa !17
  tail call void @outgeo() #44
  tail call void @outpin() #44
  %23 = tail call i32 @checkpen() #44
  %24 = icmp sgt i32 %23, 0
  br i1 %24, label %25, label %38

25:                                               ; preds = %0
  tail call void @fixpenal() #44
  store i32 1, ptr @redoFlag, align 4, !tbaa !17
  tail call void @prepOutput() #43
  tail call void @rebin(i32 noundef 0) #44
  %26 = tail call i32 @findcost() #44
  store i32 %26, ptr @funccost, align 4, !tbaa !17
  tail call void @outgeo() #44
  tail call void @outpin() #44
  %27 = tail call i32 @checkpen() #44
  %28 = icmp sgt i32 %27, 0
  %29 = load ptr, ptr @fpo, align 8, !tbaa !7
  br i1 %28, label %30, label %34

30:                                               ; preds = %25
  %31 = tail call i64 @fwrite(ptr nonnull @.str.4.21, i64 47, i64 1, ptr %29)
  %32 = load ptr, ptr @fpo, align 8, !tbaa !7
  %33 = tail call i32 @fflush(ptr noundef %32) #43
  br label %52

34:                                               ; preds = %25
  %35 = tail call i64 @fwrite(ptr nonnull @.str.5.22, i64 37, i64 1, ptr %29)
  %36 = load ptr, ptr @fpo, align 8, !tbaa !7
  %37 = tail call i32 @fflush(ptr noundef %36) #43
  br label %38

38:                                               ; preds = %34, %0
  %39 = load i32, ptr @doCompaction, align 4, !tbaa !17
  %40 = icmp sgt i32 %39, 0
  br i1 %40, label %41, label %44

41:                                               ; preds = %38
  store i32 1, ptr @finalShot, align 4, !tbaa !17
  tail call void @gmain() #44
  tail call void @rmain() #44
  store i32 0, ptr @redoFlag, align 4, !tbaa !17
  tail call void @addpins() #44
  %42 = load ptr, ptr @stderr, align 8, !tbaa !7
  %43 = tail call i64 @fwrite(ptr nonnull @.str.6.23, i64 29, i64 1, ptr %42) #48
  tail call void @abort() #49
  unreachable

44:                                               ; preds = %38
  %45 = load i32, ptr @doChannelGraph, align 4, !tbaa !17
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %48, label %47

47:                                               ; preds = %44
  tail call void @gmain() #44
  br label %48

48:                                               ; preds = %47, %44
  %49 = load i32, ptr @doGlobalRoute, align 4, !tbaa !17
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %52, label %51

51:                                               ; preds = %48
  tail call void @rmain() #44
  br label %52

52:                                               ; preds = %51, %48, %30
  call void @llvm.lifetime.end.p0(i64 1024, ptr nonnull %1) #47
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #16

declare double @exp2(double) local_unnamed_addr

; Function Attrs: nounwind optsize uwtable
define internal void @prepOutput() #0 {
  tail call void @finalpin() #44
  tail call void @prboard() #44
  tail call void @outbig() #44
  tail call void @outsmall() #44
  tail call void @output() #44
  %1 = load i32, ptr @finalShot, align 4, !tbaa !17
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %3, label %4

3:                                                ; preds = %0
  tail call void @savewolf() #44
  br label %4

4:                                                ; preds = %3, %0
  ret void
}

; Function Attrs: nofree nounwind optsize
declare noundef i32 @sprintf(ptr noalias nocapture noundef writeonly, ptr nocapture noundef readonly, ...) local_unnamed_addr #11

; Function Attrs: nofree nounwind optsize
declare noalias noundef ptr @fopen(ptr nocapture noundef readonly, ptr nocapture noundef readonly) local_unnamed_addr #11

; Function Attrs: nofree nounwind optsize
declare noundef i32 @fclose(ptr nocapture noundef) local_unnamed_addr #11

; Function Attrs: noreturn nounwind optsize
declare void @abort() local_unnamed_addr #17

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #16

; Function Attrs: nounwind optsize uwtable
define internal void @finalpin() #0 {
  %1 = alloca [101 x i32], align 16
  %2 = alloca [101 x i32], align 16
  %3 = alloca [11 x [101 x i32]], align 16
  %4 = alloca [201 x i32], align 16
  call void @llvm.lifetime.start.p0(i64 404, ptr nonnull %1) #47
  call void @llvm.lifetime.start.p0(i64 404, ptr nonnull %2) #47
  call void @llvm.lifetime.start.p0(i64 4444, ptr nonnull %3) #47
  call void @llvm.lifetime.start.p0(i64 804, ptr nonnull %4) #47
  %5 = load i32, ptr @numcells, align 4, !tbaa !17
  %6 = icmp slt i32 %5, 1
  br i1 %6, label %1256, label %7

7:                                                ; preds = %0
  %8 = getelementptr inbounds [101 x i32], ptr %1, i64 0, i64 1
  %9 = getelementptr inbounds [101 x i32], ptr %1, i64 0, i64 2
  br label %10

10:                                               ; preds = %1249, %7
  %11 = phi i64 [ 1, %7 ], [ %1252, %1249 ]
  %12 = phi i32 [ undef, %7 ], [ %1251, %1249 ]
  %13 = phi i32 [ undef, %7 ], [ %1250, %1249 ]
  %14 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %15 = getelementptr inbounds ptr, ptr %14, i64 %11
  %16 = load ptr, ptr %15, align 8, !tbaa !7
  %17 = getelementptr inbounds %struct.cellbox, ptr %16, i64 0, i32 18
  %18 = load i32, ptr %17, align 4, !tbaa !223
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %1249, label %20

20:                                               ; preds = %10
  %21 = getelementptr inbounds %struct.cellbox, ptr %16, i64 0, i32 19
  %22 = load ptr, ptr %21, align 8, !tbaa !224
  %23 = getelementptr inbounds %struct.cellbox, ptr %16, i64 0, i32 5
  %24 = load i32, ptr %23, align 8, !tbaa !45
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds %struct.cellbox, ptr %16, i64 0, i32 21, i64 %25
  %27 = load ptr, ptr %26, align 8, !tbaa !7
  %28 = getelementptr inbounds %struct.tilebox, ptr %27, i64 0, i32 18
  %29 = load ptr, ptr %28, align 8, !tbaa !225
  %30 = getelementptr inbounds %struct.cellbox, ptr %16, i64 0, i32 20
  %31 = load ptr, ptr %30, align 8, !tbaa !226
  store ptr %31, ptr @UCptr, align 8, !tbaa !7
  %32 = icmp slt i32 %18, 1
  br i1 %32, label %36, label %33

33:                                               ; preds = %20
  %34 = add nuw i32 %18, 1
  %35 = zext i32 %34 to i64
  br label %49

36:                                               ; preds = %49, %20
  %37 = getelementptr inbounds %struct.cellbox, ptr %16, i64 0, i32 17
  %38 = load i32, ptr %37, align 8, !tbaa !227
  %39 = icmp slt i32 %38, 1
  br i1 %39, label %57, label %40

40:                                               ; preds = %36
  %41 = getelementptr inbounds %struct.cellbox, ptr %16, i64 0, i32 14
  %42 = getelementptr inbounds %struct.cellbox, ptr %16, i64 0, i32 13
  %43 = trunc i64 %11 to i32
  %44 = trunc i64 %11 to i32
  %45 = trunc i64 %11 to i32
  %46 = trunc i64 %11 to i32
  %47 = trunc i64 %11 to i32
  %48 = trunc i64 %11 to i32
  br label %66

49:                                               ; preds = %49, %33
  %50 = phi i64 [ 1, %33 ], [ %53, %49 ]
  %51 = getelementptr inbounds %struct.uncombox.25, ptr %31, i64 %50, i32 9
  store i32 -100000000, ptr %51, align 4, !tbaa !228
  %52 = getelementptr inbounds %struct.uncombox.25, ptr %31, i64 %50, i32 10
  store i32 -100000000, ptr %52, align 4, !tbaa !230
  %53 = add nuw nsw i64 %50, 1
  %54 = icmp eq i64 %53, %35
  br i1 %54, label %36, label %49, !llvm.loop !231

55:                                               ; preds = %1224
  %.lcssa16 = phi i32 [ %1226, %1224 ]
  %.lcssa15 = phi i32 [ %1227, %1224 ]
  %56 = load i32, ptr %17, align 4, !tbaa !223
  br label %57

57:                                               ; preds = %55, %36
  %58 = phi i32 [ %18, %36 ], [ %56, %55 ]
  %59 = phi i32 [ %13, %36 ], [ %.lcssa16, %55 ]
  %60 = phi i32 [ %12, %36 ], [ %.lcssa15, %55 ]
  %61 = icmp slt i32 %58, 1
  br i1 %61, label %1249, label %62

62:                                               ; preds = %57
  %63 = load ptr, ptr @UCptr, align 8, !tbaa !7
  %64 = add nuw i32 %58, 1
  %65 = zext i32 %64 to i64
  br label %1231

66:                                               ; preds = %1224, %40
  %67 = phi i32 [ %38, %40 ], [ %1225, %1224 ]
  %68 = phi i64 [ 1, %40 ], [ %1228, %1224 ]
  %69 = phi i32 [ %12, %40 ], [ %1227, %1224 ]
  %70 = phi i32 [ %13, %40 ], [ %1226, %1224 ]
  %71 = getelementptr inbounds %struct.contentbox, ptr %22, i64 %68
  %72 = load i32, ptr %71, align 4, !tbaa !232
  %73 = icmp slt i32 %72, 1
  br i1 %73, label %1224, label %74

74:                                               ; preds = %66
  %75 = getelementptr inbounds %struct.contentbox, ptr %22, i64 %68, i32 4
  %76 = load i32, ptr %75, align 4, !tbaa !234
  %77 = getelementptr inbounds %struct.contentbox, ptr %22, i64 %68, i32 3
  %78 = load i32, ptr %77, align 4, !tbaa !235
  store i32 %78, ptr @HorV, align 4, !tbaa !17
  %79 = load i32, ptr %23, align 8, !tbaa !45
  %80 = icmp slt i32 %79, 4
  br i1 %80, label %90, label %81

81:                                               ; preds = %74
  %82 = load double, ptr %41, align 8, !tbaa !236
  %83 = load double, ptr %42, align 8, !tbaa !237
  %84 = fdiv double %82, %83
  %85 = tail call double @sqrt(double noundef %84) #44
  %86 = load i32, ptr @HorV, align 4, !tbaa !17
  %87 = icmp eq i32 %86, 1
  br i1 %87, label %88, label %89

88:                                               ; preds = %81
  store i32 0, ptr @HorV, align 4, !tbaa !17
  br label %112

89:                                               ; preds = %81
  store i32 1, ptr @HorV, align 4, !tbaa !17
  br label %97

90:                                               ; preds = %74
  %91 = load double, ptr %42, align 8, !tbaa !237
  %92 = load double, ptr %41, align 8, !tbaa !236
  %93 = fdiv double %91, %92
  %94 = tail call double @sqrt(double noundef %93) #44
  %95 = load i32, ptr @HorV, align 4, !tbaa !17
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %112, label %97

97:                                               ; preds = %90, %89
  %98 = phi i32 [ 1, %89 ], [ %95, %90 ]
  %99 = phi double [ %85, %89 ], [ %94, %90 ]
  %100 = sitofp i32 %76 to double
  %101 = fmul double %99, %100
  %102 = fptosi double %101 to i32
  %103 = sitofp i32 %102 to double
  %104 = fdiv double %103, %99
  %105 = fsub double %100, %104
  %106 = add nsw i32 %102, 1
  %107 = sitofp i32 %106 to double
  %108 = fdiv double %107, %99
  %109 = fsub double %108, %100
  %110 = fcmp ogt double %105, %109
  br i1 %110, label %111, label %126

111:                                              ; preds = %97
  br label %126

112:                                              ; preds = %90, %88
  %113 = phi double [ %85, %88 ], [ %94, %90 ]
  %114 = sitofp i32 %76 to double
  %115 = fdiv double %114, %113
  %116 = fptosi double %115 to i32
  %117 = sitofp i32 %116 to double
  %118 = fneg double %117
  %119 = tail call double @llvm.fmuladd.f64(double %118, double %113, double %114)
  %120 = add nsw i32 %116, 1
  %121 = sitofp i32 %120 to double
  %122 = fneg double %114
  %123 = tail call double @llvm.fmuladd.f64(double %121, double %113, double %122)
  %124 = fcmp ogt double %119, %123
  br i1 %124, label %125, label %126

125:                                              ; preds = %112
  br label %126

126:                                              ; preds = %125, %112, %111, %97
  %127 = phi i32 [ %98, %111 ], [ %98, %97 ], [ 0, %125 ], [ 0, %112 ]
  %128 = phi i32 [ %106, %111 ], [ %102, %97 ], [ %120, %125 ], [ %116, %112 ]
  %129 = load i32, ptr @pinSpacing, align 4
  %130 = sdiv i32 %128, %129
  %131 = mul nsw i32 %130, %129
  %132 = srem i32 %128, %129
  %133 = add nsw i32 %130, 1
  %134 = mul nsw i32 %133, %129
  %135 = sub nsw i32 %134, %128
  %136 = icmp sgt i32 %132, %135
  %137 = select i1 %136, i32 %133, i32 %130
  store i32 %137, ptr @nPinLocs, align 4, !tbaa !17
  %138 = add i32 %137, 1
  %139 = sext i32 %138 to i64
  %140 = shl nsw i64 %139, 4
  %141 = tail call noalias ptr @malloc(i64 noundef %140) #45
  store ptr %141, ptr @lArray, align 8, !tbaa !7
  %142 = icmp slt i32 %137, 1
  br i1 %142, label %147, label %143

143:                                              ; preds = %126
  %144 = getelementptr i8, ptr %141, i64 16
  %145 = zext i32 %137 to i64
  %146 = shl nuw nsw i64 %145, 4
  tail call void @llvm.memset.p0.i64(ptr align 4 %144, i8 0, i64 %146, i1 false), !tbaa !17
  br label %147

147:                                              ; preds = %143, %126
  %148 = icmp eq i32 %127, 0
  %149 = load i32, ptr %37, align 8, !tbaa !227
  %150 = zext i32 %149 to i64
  %151 = icmp eq i64 %68, %150
  %152 = add nuw i64 %68, 1
  %153 = and i64 %152, 4294967295
  %154 = select i1 %151, i64 1, i64 %153
  br i1 %148, label %186, label %155

155:                                              ; preds = %147
  %156 = getelementptr inbounds %struct.locbox.26, ptr %29, i64 %154, i32 1
  %157 = load i32, ptr %156, align 4, !tbaa !238
  %158 = getelementptr inbounds %struct.locbox.26, ptr %29, i64 %68, i32 1
  %159 = load i32, ptr %158, align 4, !tbaa !238
  %160 = icmp sgt i32 %157, %159
  br i1 %142, label %217, label %161

161:                                              ; preds = %155
  %162 = getelementptr inbounds %struct.locbox.26, ptr %29, i64 %68
  %163 = load i32, ptr %162, align 4, !tbaa !240
  %164 = sdiv i32 %128, -2
  %165 = add i32 %159, %164
  %166 = add nsw i32 %128, 1
  %167 = sdiv i32 %166, -2
  %168 = add i32 %159, %167
  %169 = zext i32 %138 to i64
  br label %170

170:                                              ; preds = %181, %161
  %171 = phi i64 [ 1, %161 ], [ %184, %181 ]
  %172 = getelementptr inbounds %struct.locbox.26, ptr %141, i64 %171, i32 2
  store i32 %163, ptr %172, align 4, !tbaa !241
  %173 = trunc i64 %171 to i32
  br i1 %160, label %178, label %174

174:                                              ; preds = %170
  %175 = add i32 %173, -1
  %176 = mul i32 %175, %129
  %177 = add i32 %176, %165
  br label %181

178:                                              ; preds = %170
  %179 = mul nsw i32 %129, %173
  %180 = add nsw i32 %168, %179
  br label %181

181:                                              ; preds = %178, %174
  %182 = phi i32 [ %180, %178 ], [ %177, %174 ]
  %183 = getelementptr inbounds %struct.locbox.26, ptr %141, i64 %171, i32 3
  store i32 %182, ptr %183, align 4
  %184 = add nuw nsw i64 %171, 1
  %185 = icmp eq i64 %184, %169
  br i1 %185, label %217, label %170, !llvm.loop !243

186:                                              ; preds = %147
  %187 = getelementptr inbounds %struct.locbox.26, ptr %29, i64 %154
  %188 = load i32, ptr %187, align 4, !tbaa !240
  %189 = getelementptr inbounds %struct.locbox.26, ptr %29, i64 %68
  %190 = load i32, ptr %189, align 4, !tbaa !240
  %191 = icmp sgt i32 %188, %190
  br i1 %142, label %217, label %192

192:                                              ; preds = %186
  %193 = getelementptr inbounds %struct.locbox.26, ptr %29, i64 %68, i32 1
  %194 = load i32, ptr %193, align 4, !tbaa !238
  %195 = sdiv i32 %128, -2
  %196 = add i32 %190, %195
  %197 = add nsw i32 %128, 1
  %198 = sdiv i32 %197, -2
  %199 = add i32 %190, %198
  %200 = zext i32 %138 to i64
  br label %201

201:                                              ; preds = %212, %192
  %202 = phi i64 [ 1, %192 ], [ %215, %212 ]
  %203 = getelementptr inbounds %struct.locbox.26, ptr %141, i64 %202, i32 3
  store i32 %194, ptr %203, align 4, !tbaa !244
  %204 = trunc i64 %202 to i32
  br i1 %191, label %209, label %205

205:                                              ; preds = %201
  %206 = add i32 %204, -1
  %207 = mul i32 %206, %129
  %208 = add i32 %207, %196
  br label %212

209:                                              ; preds = %201
  %210 = mul nsw i32 %129, %204
  %211 = add nsw i32 %199, %210
  br label %212

212:                                              ; preds = %209, %205
  %213 = phi i32 [ %211, %209 ], [ %208, %205 ]
  %214 = getelementptr inbounds %struct.locbox.26, ptr %141, i64 %202, i32 2
  store i32 %213, ptr %214, align 4
  %215 = add nuw nsw i64 %202, 1
  %216 = icmp eq i64 %215, %200
  br i1 %216, label %217, label %201, !llvm.loop !245

217:                                              ; preds = %212, %186, %181, %155
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(404) %1, i8 0, i64 404, i1 false), !tbaa !17
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(404) %2, i8 0, i64 404, i1 false), !tbaa !17
  br label %218

218:                                              ; preds = %246, %217
  %219 = phi i64 [ 0, %217 ], [ %247, %246 ]
  br label %220

220:                                              ; preds = %242, %218
  %221 = phi i64 [ 0, %218 ], [ %243, %242 ]
  %222 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %218 ], [ %244, %242 ]
  %223 = icmp ult <4 x i64> %222, <i64 11, i64 11, i64 11, i64 11>
  %224 = extractelement <4 x i1> %223, i64 0
  br i1 %224, label %225, label %227

225:                                              ; preds = %220
  %226 = getelementptr inbounds [11 x [101 x i32]], ptr %3, i64 0, i64 %221, i64 %219
  store i32 0, ptr %226, align 4, !tbaa !17
  br label %227

227:                                              ; preds = %225, %220
  %228 = extractelement <4 x i1> %223, i64 1
  br i1 %228, label %229, label %232

229:                                              ; preds = %227
  %230 = or i64 %221, 1
  %231 = getelementptr inbounds [11 x [101 x i32]], ptr %3, i64 0, i64 %230, i64 %219
  store i32 0, ptr %231, align 4, !tbaa !17
  br label %232

232:                                              ; preds = %229, %227
  %233 = extractelement <4 x i1> %223, i64 2
  br i1 %233, label %234, label %237

234:                                              ; preds = %232
  %235 = or i64 %221, 2
  %236 = getelementptr inbounds [11 x [101 x i32]], ptr %3, i64 0, i64 %235, i64 %219
  store i32 0, ptr %236, align 4, !tbaa !17
  br label %237

237:                                              ; preds = %234, %232
  %238 = extractelement <4 x i1> %223, i64 3
  br i1 %238, label %239, label %242

239:                                              ; preds = %237
  %240 = or i64 %221, 3
  %241 = getelementptr inbounds [11 x [101 x i32]], ptr %3, i64 0, i64 %240, i64 %219
  store i32 0, ptr %241, align 4, !tbaa !17
  br label %242

242:                                              ; preds = %239, %237
  %243 = add i64 %221, 4
  %244 = add <4 x i64> %222, <i64 4, i64 4, i64 4, i64 4>
  %245 = icmp eq i64 %243, 12
  br i1 %245, label %246, label %220, !llvm.loop !246

246:                                              ; preds = %242
  %247 = add nuw nsw i64 %219, 1
  %248 = icmp eq i64 %247, 101
  br i1 %248, label %249, label %218, !llvm.loop !249

249:                                              ; preds = %246
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(804) %4, i8 0, i64 804, i1 false), !tbaa !17
  %250 = load i32, ptr %17, align 4, !tbaa !223
  %251 = icmp slt i32 %250, 1
  br i1 %251, label %469, label %252

252:                                              ; preds = %249
  %253 = load ptr, ptr @UCptr, align 8, !tbaa !7
  %254 = trunc i64 %68 to i32
  %255 = trunc i64 %68 to i32
  br label %256

256:                                              ; preds = %460, %252
  %257 = phi i32 [ %461, %460 ], [ %250, %252 ]
  %258 = phi ptr [ %462, %460 ], [ %253, %252 ]
  %259 = phi i32 [ %464, %460 ], [ 1, %252 ]
  %260 = sext i32 %259 to i64
  %261 = getelementptr inbounds %struct.uncombox.25, ptr %258, i64 %260, i32 1
  %262 = load i32, ptr %261, align 4, !tbaa !250
  %263 = zext i32 %262 to i64
  %264 = icmp eq i64 %68, %263
  br i1 %264, label %265, label %460

265:                                              ; preds = %256
  %266 = getelementptr inbounds %struct.uncombox.25, ptr %258, i64 %260, i32 7
  %267 = load i32, ptr %266, align 4, !tbaa !251
  %268 = icmp eq i32 %267, 0
  br i1 %268, label %269, label %356

269:                                              ; preds = %265
  %270 = load i32, ptr %1, align 16, !tbaa !17
  %271 = icmp eq i32 %270, 0
  br i1 %271, label %272, label %327

272:                                              ; preds = %269
  %273 = add nsw i32 %259, -1
  %274 = sext i32 %273 to i64
  %275 = getelementptr inbounds %struct.uncombox.25, ptr %258, i64 %274, i32 1
  %276 = load i32, ptr %275, align 4, !tbaa !250
  %277 = sext i32 %276 to i64
  %278 = getelementptr inbounds %struct.locbox.26, ptr %29, i64 %277
  %279 = load i32, ptr %278, align 4, !tbaa !240
  %280 = getelementptr inbounds %struct.locbox.26, ptr %29, i64 %277, i32 1
  %281 = load i32, ptr %280, align 4, !tbaa !238
  %282 = load ptr, ptr @lArray, align 8, !tbaa !7
  %283 = getelementptr inbounds %struct.locbox.26, ptr %282, i64 1, i32 2
  %284 = load i32, ptr %283, align 4, !tbaa !241
  %285 = sub nsw i32 %284, %279
  %286 = tail call i32 @llvm.abs.i32(i32 %285, i1 true)
  %287 = getelementptr inbounds %struct.locbox.26, ptr %282, i64 1, i32 3
  %288 = load i32, ptr %287, align 4, !tbaa !244
  %289 = sub nsw i32 %288, %281
  %290 = tail call i32 @llvm.abs.i32(i32 %289, i1 true)
  %291 = add nuw nsw i32 %290, %286
  %292 = load i32, ptr @nPinLocs, align 4, !tbaa !17
  %293 = sext i32 %292 to i64
  %294 = getelementptr inbounds %struct.locbox.26, ptr %282, i64 %293, i32 2
  %295 = load i32, ptr %294, align 4, !tbaa !241
  %296 = sub nsw i32 %295, %279
  %297 = tail call i32 @llvm.abs.i32(i32 %296, i1 true)
  %298 = getelementptr inbounds %struct.locbox.26, ptr %282, i64 %293, i32 3
  %299 = load i32, ptr %298, align 4, !tbaa !244
  %300 = sub nsw i32 %299, %281
  %301 = tail call i32 @llvm.abs.i32(i32 %300, i1 true)
  %302 = add nuw nsw i32 %301, %297
  %303 = icmp ult i32 %291, %302
  %304 = select i1 %303, i32 1, i32 %292
  store i32 1, ptr %1, align 16, !tbaa !17
  store i32 %304, ptr %8, align 4, !tbaa !17
  store i32 %259, ptr %9, align 8, !tbaa !17
  %305 = icmp slt i32 %259, %257
  br i1 %305, label %306, label %460

306:                                              ; preds = %272
  %307 = sext i32 %257 to i64
  br label %308

308:                                              ; preds = %319, %306
  %309 = phi i64 [ %260, %306 ], [ %310, %319 ]
  %310 = add nsw i64 %309, 1
  %311 = getelementptr inbounds %struct.uncombox.25, ptr %258, i64 %310, i32 7
  %312 = load i32, ptr %311, align 4, !tbaa !251
  %313 = icmp eq i32 %312, 0
  br i1 %313, label %314, label %452

314:                                              ; preds = %308
  %315 = getelementptr inbounds %struct.uncombox.25, ptr %258, i64 %310, i32 1
  %316 = load i32, ptr %315, align 4, !tbaa !250
  %317 = zext i32 %316 to i64
  %318 = icmp eq i64 %68, %317
  br i1 %318, label %319, label %452

319:                                              ; preds = %314
  %320 = load i32, ptr %1, align 16, !tbaa !17
  %321 = add nsw i32 %320, 1
  store i32 %321, ptr %1, align 16, !tbaa !17
  %322 = add nsw i32 %320, 2
  %323 = sext i32 %322 to i64
  %324 = getelementptr inbounds [101 x i32], ptr %1, i64 0, i64 %323
  %325 = trunc i64 %310 to i32
  store i32 %325, ptr %324, align 4, !tbaa !17
  %326 = icmp eq i64 %310, %307
  br i1 %326, label %466, label %308, !llvm.loop !252

327:                                              ; preds = %269
  %328 = load ptr, ptr @fpo, align 8, !tbaa !7
  %329 = tail call i64 @fwrite(ptr nonnull @.str.26, i64 16, i64 1, ptr %328)
  %330 = load ptr, ptr @fpo, align 8, !tbaa !7
  %331 = tail call i64 @fwrite(ptr nonnull @.str.1.27, i64 17, i64 1, ptr %330)
  %332 = load ptr, ptr @fpo, align 8, !tbaa !7
  %333 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %332, ptr noundef nonnull @.str.2.28, i32 noundef %255) #43
  %334 = load ptr, ptr @fpo, align 8, !tbaa !7
  %335 = tail call i64 @fwrite(ptr nonnull @.str.3.29, i64 15, i64 1, ptr %334)
  %336 = load ptr, ptr @fpo, align 8, !tbaa !7
  %337 = tail call i64 @fwrite(ptr nonnull @.str.4.30, i64 16, i64 1, ptr %336)
  %338 = load ptr, ptr @fpo, align 8, !tbaa !7
  %339 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %338, ptr noundef nonnull @.str.5.31, i32 noundef %44) #43
  %340 = load i32, ptr %17, align 4, !tbaa !223
  %341 = load ptr, ptr @UCptr, align 8
  %342 = sext i32 %340 to i64
  br label %343

343:                                              ; preds = %351, %327
  %344 = phi i64 [ %345, %351 ], [ %260, %327 ]
  %345 = add nsw i64 %344, 1
  %346 = icmp slt i64 %344, %342
  br i1 %346, label %347, label %466

347:                                              ; preds = %343
  %348 = getelementptr inbounds %struct.uncombox.25, ptr %341, i64 %345, i32 7
  %349 = load i32, ptr %348, align 4, !tbaa !251
  %350 = icmp eq i32 %349, 0
  br i1 %350, label %351, label %454

351:                                              ; preds = %347
  %352 = getelementptr inbounds %struct.uncombox.25, ptr %341, i64 %345, i32 1
  %353 = load i32, ptr %352, align 4, !tbaa !250
  %354 = zext i32 %353 to i64
  %355 = icmp eq i64 %68, %354
  br i1 %355, label %343, label %454, !llvm.loop !253

356:                                              ; preds = %265
  %357 = icmp sgt i32 %267, 1
  br i1 %357, label %358, label %446

358:                                              ; preds = %356
  %359 = load i32, ptr %3, align 16, !tbaa !17
  %360 = add nsw i32 %359, 1
  store i32 %360, ptr %3, align 16, !tbaa !17
  %361 = sext i32 %360 to i64
  %362 = getelementptr inbounds [11 x [101 x i32]], ptr %3, i64 0, i64 %361
  store i32 1, ptr %362, align 4, !tbaa !17
  %363 = load i32, ptr %3, align 16, !tbaa !17
  %364 = sext i32 %363 to i64
  %365 = getelementptr inbounds [11 x [101 x i32]], ptr %3, i64 0, i64 %364, i64 2
  store i32 %259, ptr %365, align 4, !tbaa !17
  %366 = load i32, ptr %17, align 4, !tbaa !223
  %367 = icmp slt i32 %259, %366
  br i1 %367, label %368, label %460

368:                                              ; preds = %358
  %369 = add nsw i64 %260, 1
  %370 = getelementptr inbounds %struct.uncombox.25, ptr %258, i64 %369, i32 7
  %371 = load i32, ptr %370, align 4, !tbaa !251
  %372 = icmp eq i32 %371, 0
  br i1 %372, label %378, label %456

373:                                              ; preds = %438
  %374 = add nsw i64 %379, 1
  %375 = getelementptr inbounds %struct.uncombox.25, ptr %258, i64 %374, i32 7
  %376 = load i32, ptr %375, align 4, !tbaa !251
  %377 = icmp eq i32 %376, 0
  br i1 %377, label %378, label %456, !llvm.loop !254

378:                                              ; preds = %373, %368
  %379 = phi i64 [ %374, %373 ], [ %369, %368 ]
  %380 = phi i64 [ %379, %373 ], [ %260, %368 ]
  %381 = getelementptr inbounds %struct.uncombox.25, ptr %258, i64 %379, i32 1
  %382 = load i32, ptr %381, align 4, !tbaa !250
  %383 = zext i32 %382 to i64
  %384 = icmp eq i64 %68, %383
  %385 = load i32, ptr %3, align 16, !tbaa !17
  %386 = sext i32 %385 to i64
  %387 = getelementptr inbounds [11 x [101 x i32]], ptr %3, i64 0, i64 %386
  %388 = load i32, ptr %387, align 4, !tbaa !17
  %389 = add i32 %388, 1
  br i1 %384, label %438, label %390

390:                                              ; preds = %378
  %.lcssa2 = phi i64 [ %380, %378 ]
  %.lcssa1 = phi i32 [ %388, %378 ]
  %.lcssa = phi i32 [ %389, %378 ]
  %391 = trunc i64 %.lcssa2 to i32
  %392 = load i32, ptr %2, align 16, !tbaa !17
  %393 = icmp eq i32 %392, 0
  br i1 %393, label %394, label %408

394:                                              ; preds = %390
  %395 = icmp sgt i32 %.lcssa1, -2
  br i1 %395, label %396, label %433

396:                                              ; preds = %394
  %397 = zext i32 %.lcssa to i64
  br label %398

398:                                              ; preds = %398, %396
  %399 = phi i64 [ %397, %396 ], [ %405, %398 ]
  %400 = load i32, ptr %3, align 16, !tbaa !17
  %401 = sext i32 %400 to i64
  %402 = getelementptr inbounds [11 x [101 x i32]], ptr %3, i64 0, i64 %401, i64 %399
  %403 = load i32, ptr %402, align 4, !tbaa !17
  %404 = getelementptr inbounds [101 x i32], ptr %2, i64 0, i64 %399
  store i32 %403, ptr %404, align 4, !tbaa !17
  store i32 0, ptr %402, align 4, !tbaa !17
  %405 = add nsw i64 %399, -1
  %406 = trunc i64 %399 to i32
  %407 = icmp sgt i32 %406, 0
  br i1 %407, label %398, label %433, !llvm.loop !255

408:                                              ; preds = %390
  %409 = load ptr, ptr @fpo, align 8, !tbaa !7
  %410 = tail call i64 @fwrite(ptr nonnull @.str.6.32, i64 16, i64 1, ptr %409)
  %411 = load ptr, ptr @fpo, align 8, !tbaa !7
  %412 = tail call i64 @fwrite(ptr nonnull @.str.7, i64 14, i64 1, ptr %411)
  %413 = load ptr, ptr @fpo, align 8, !tbaa !7
  %414 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %413, ptr noundef nonnull @.str.2.28, i32 noundef %254) #43
  %415 = load ptr, ptr @fpo, align 8, !tbaa !7
  %416 = tail call i64 @fwrite(ptr nonnull @.str.8.33, i64 16, i64 1, ptr %415)
  %417 = load ptr, ptr @fpo, align 8, !tbaa !7
  %418 = tail call i64 @fwrite(ptr nonnull @.str.9, i64 15, i64 1, ptr %417)
  %419 = load ptr, ptr @fpo, align 8, !tbaa !7
  %420 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %419, ptr noundef nonnull @.str.10, i32 noundef %43) #43
  %421 = icmp sgt i32 %.lcssa1, -2
  %422 = load ptr, ptr @UCptr, align 8, !tbaa !7
  br i1 %421, label %423, label %433

423:                                              ; preds = %408
  %424 = zext i32 %.lcssa to i64
  br label %425

425:                                              ; preds = %425, %423
  %426 = phi i64 [ %424, %423 ], [ %430, %425 ]
  %427 = load i32, ptr %3, align 16, !tbaa !17
  %428 = sext i32 %427 to i64
  %429 = getelementptr inbounds [11 x [101 x i32]], ptr %3, i64 0, i64 %428, i64 %426
  store i32 0, ptr %429, align 4, !tbaa !17
  %430 = add nsw i64 %426, -1
  %431 = trunc i64 %426 to i32
  %432 = icmp sgt i32 %431, 0
  br i1 %432, label %425, label %433, !llvm.loop !256

433:                                              ; preds = %425, %408, %398, %394
  %434 = phi ptr [ %422, %408 ], [ %258, %394 ], [ %258, %398 ], [ %422, %425 ]
  %435 = load i32, ptr %3, align 16, !tbaa !17
  %436 = add nsw i32 %435, -1
  store i32 %436, ptr %3, align 16, !tbaa !17
  %437 = load i32, ptr %17, align 4, !tbaa !223
  br label %460

438:                                              ; preds = %378
  %439 = trunc i64 %379 to i32
  store i32 %389, ptr %387, align 4, !tbaa !17
  %440 = add nsw i32 %388, 2
  %441 = sext i32 %440 to i64
  %442 = getelementptr inbounds [11 x [101 x i32]], ptr %3, i64 0, i64 %386, i64 %441
  store i32 %439, ptr %442, align 4, !tbaa !17
  %443 = load i32, ptr %17, align 4, !tbaa !223
  %444 = sext i32 %443 to i64
  %445 = icmp slt i64 %379, %444
  br i1 %445, label %373, label %460, !llvm.loop !254

446:                                              ; preds = %356
  %447 = load i32, ptr %4, align 16, !tbaa !17
  %448 = add nsw i32 %447, 1
  store i32 %448, ptr %4, align 16, !tbaa !17
  %449 = shl nsw i32 %448, 1
  %450 = sext i32 %449 to i64
  %451 = getelementptr inbounds [201 x i32], ptr %4, i64 0, i64 %450
  store i32 %259, ptr %451, align 8, !tbaa !17
  br label %460

452:                                              ; preds = %314, %308
  %.lcssa4 = phi i64 [ %309, %314 ], [ %309, %308 ]
  %453 = trunc i64 %.lcssa4 to i32
  br label %460

454:                                              ; preds = %351, %347
  %.lcssa3 = phi i64 [ %344, %351 ], [ %344, %347 ]
  %455 = trunc i64 %.lcssa3 to i32
  br label %460

456:                                              ; preds = %373, %368
  %457 = phi i32 [ %366, %368 ], [ %443, %373 ]
  %458 = phi i64 [ %260, %368 ], [ %379, %373 ]
  %459 = trunc i64 %458 to i32
  br label %460

460:                                              ; preds = %456, %454, %452, %446, %438, %433, %358, %272, %256
  %461 = phi i32 [ %257, %446 ], [ %257, %256 ], [ %437, %433 ], [ %257, %272 ], [ %366, %358 ], [ %257, %452 ], [ %340, %454 ], [ %457, %456 ], [ %443, %438 ]
  %462 = phi ptr [ %258, %446 ], [ %258, %256 ], [ %434, %433 ], [ %258, %272 ], [ %258, %358 ], [ %258, %452 ], [ %341, %454 ], [ %258, %456 ], [ %258, %438 ]
  %463 = phi i32 [ %259, %446 ], [ %259, %256 ], [ %391, %433 ], [ %259, %272 ], [ %259, %358 ], [ %453, %452 ], [ %455, %454 ], [ %459, %456 ], [ %439, %438 ]
  %464 = add nsw i32 %463, 1
  %465 = icmp slt i32 %463, %461
  br i1 %465, label %256, label %466, !llvm.loop !257

466:                                              ; preds = %460, %343, %319
  %467 = load i32, ptr %1, align 16, !tbaa !17
  %468 = load i32, ptr @nPinLocs, align 4, !tbaa !17
  br label %469

469:                                              ; preds = %466, %249
  %470 = phi i32 [ %468, %466 ], [ %137, %249 ]
  %471 = phi i32 [ %467, %466 ], [ 0, %249 ]
  %472 = icmp sgt i32 %471, %470
  br i1 %472, label %473, label %481

473:                                              ; preds = %469
  %474 = load ptr, ptr @fpo, align 8, !tbaa !7
  %475 = trunc i64 %68 to i32
  %476 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %474, ptr noundef nonnull @.str.11, i32 noundef %475) #43
  %477 = load ptr, ptr @fpo, align 8, !tbaa !7
  %478 = tail call i64 @fwrite(ptr nonnull @.str.12.34, i64 37, i64 1, ptr %477)
  %479 = load ptr, ptr @fpo, align 8, !tbaa !7
  %480 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %479, ptr noundef nonnull @.str.5.31, i32 noundef %45) #43
  br label %481

481:                                              ; preds = %473, %469
  %482 = icmp sgt i32 %471, 0
  br i1 %482, label %483, label %529

483:                                              ; preds = %481
  %484 = load i32, ptr @nPinLocs, align 4, !tbaa !17
  %485 = icmp sgt i32 %471, %484
  br i1 %485, label %529, label %486

486:                                              ; preds = %483
  %487 = load i32, ptr %8, align 4, !tbaa !17
  %488 = icmp eq i32 %487, 1
  %489 = load i32, ptr %9, align 8, !tbaa !17
  %490 = load ptr, ptr @lArray, align 8, !tbaa !7
  br i1 %488, label %491, label %507

491:                                              ; preds = %486
  %492 = getelementptr inbounds %struct.locbox.26, ptr %490, i64 1
  store i32 %489, ptr %492, align 4, !tbaa !258
  %493 = getelementptr inbounds %struct.locbox.26, ptr %490, i64 1, i32 1
  store i32 1, ptr %493, align 4, !tbaa !259
  %494 = icmp ult i32 %471, 2
  br i1 %494, label %529, label %495

495:                                              ; preds = %491
  %496 = zext i32 %471 to i64
  br label %497

497:                                              ; preds = %497, %495
  %498 = phi i64 [ 1, %495 ], [ %503, %497 ]
  %499 = phi i64 [ 2, %495 ], [ %500, %497 ]
  %500 = add nuw nsw i64 %499, 1
  %501 = getelementptr inbounds [101 x i32], ptr %1, i64 0, i64 %500
  %502 = load i32, ptr %501, align 4, !tbaa !17
  %503 = add nuw nsw i64 %498, 1
  %504 = getelementptr inbounds %struct.locbox.26, ptr %490, i64 %503
  store i32 %502, ptr %504, align 4, !tbaa !258
  %505 = getelementptr inbounds %struct.locbox.26, ptr %490, i64 %503, i32 1
  store i32 1, ptr %505, align 4, !tbaa !259
  %506 = icmp eq i64 %503, %496
  br i1 %506, label %529, label %497, !llvm.loop !260

507:                                              ; preds = %486
  %508 = sext i32 %484 to i64
  %509 = getelementptr inbounds %struct.locbox.26, ptr %490, i64 %508
  store i32 %489, ptr %509, align 4, !tbaa !258
  %510 = load i32, ptr @nPinLocs, align 4, !tbaa !17
  %511 = sext i32 %510 to i64
  %512 = getelementptr inbounds %struct.locbox.26, ptr %490, i64 %511, i32 1
  store i32 1, ptr %512, align 4, !tbaa !259
  %513 = icmp ult i32 %471, 2
  br i1 %513, label %529, label %514

514:                                              ; preds = %507
  %515 = load i32, ptr @nPinLocs, align 4, !tbaa !17
  %516 = sext i32 %515 to i64
  %517 = add nuw i32 %471, 1
  %518 = zext i32 %517 to i64
  br label %519

519:                                              ; preds = %519, %514
  %520 = phi i64 [ %516, %514 ], [ %525, %519 ]
  %521 = phi i64 [ 2, %514 ], [ %522, %519 ]
  %522 = add nuw nsw i64 %521, 1
  %523 = getelementptr inbounds [101 x i32], ptr %1, i64 0, i64 %522
  %524 = load i32, ptr %523, align 4, !tbaa !17
  %525 = add nsw i64 %520, -1
  %526 = getelementptr inbounds %struct.locbox.26, ptr %490, i64 %525
  store i32 %524, ptr %526, align 4, !tbaa !258
  %527 = getelementptr inbounds %struct.locbox.26, ptr %490, i64 %525, i32 1
  store i32 1, ptr %527, align 4, !tbaa !259
  %528 = icmp eq i64 %522, %518
  br i1 %528, label %529, label %519, !llvm.loop !261

529:                                              ; preds = %519, %507, %497, %491, %483, %481
  %530 = load i32, ptr %2, align 16, !tbaa !17
  %531 = icmp slt i32 %530, 1
  %532 = load i32, ptr @nPinLocs, align 4, !tbaa !17
  %533 = add nsw i32 %530, %471
  %534 = icmp sgt i32 %533, %532
  %535 = select i1 %531, i1 true, i1 %534
  br i1 %535, label %608, label %536

536:                                              ; preds = %529
  %537 = add nuw nsw i32 %530, 1
  %538 = zext i32 %537 to i64
  %539 = getelementptr inbounds [101 x i32], ptr %2, i64 0, i64 %538
  %540 = load i32, ptr %539, align 4, !tbaa !17
  %541 = load ptr, ptr @UCptr, align 8, !tbaa !7
  %542 = add nsw i32 %540, 1
  %543 = sext i32 %542 to i64
  %544 = getelementptr inbounds %struct.uncombox.25, ptr %541, i64 %543, i32 1
  %545 = load i32, ptr %544, align 4, !tbaa !250
  %546 = sext i32 %545 to i64
  %547 = getelementptr inbounds %struct.locbox.26, ptr %29, i64 %546
  %548 = load i32, ptr %547, align 4, !tbaa !240
  %549 = getelementptr inbounds %struct.locbox.26, ptr %29, i64 %546, i32 1
  %550 = load i32, ptr %549, align 4, !tbaa !238
  %551 = load ptr, ptr @lArray, align 8, !tbaa !7
  %552 = getelementptr inbounds %struct.locbox.26, ptr %551, i64 1, i32 2
  %553 = load i32, ptr %552, align 4, !tbaa !241
  %554 = sub nsw i32 %553, %548
  %555 = tail call i32 @llvm.abs.i32(i32 %554, i1 true)
  %556 = getelementptr inbounds %struct.locbox.26, ptr %551, i64 1, i32 3
  %557 = load i32, ptr %556, align 4, !tbaa !244
  %558 = sub nsw i32 %557, %550
  %559 = tail call i32 @llvm.abs.i32(i32 %558, i1 true)
  %560 = add nuw nsw i32 %559, %555
  %561 = sext i32 %532 to i64
  %562 = getelementptr inbounds %struct.locbox.26, ptr %551, i64 %561, i32 2
  %563 = load i32, ptr %562, align 4, !tbaa !241
  %564 = sub nsw i32 %563, %548
  %565 = tail call i32 @llvm.abs.i32(i32 %564, i1 true)
  %566 = getelementptr inbounds %struct.locbox.26, ptr %551, i64 %561, i32 3
  %567 = load i32, ptr %566, align 4, !tbaa !244
  %568 = sub nsw i32 %567, %550
  %569 = tail call i32 @llvm.abs.i32(i32 %568, i1 true)
  %570 = add nuw nsw i32 %569, %565
  %571 = icmp ult i32 %560, %570
  br i1 %571, label %572, label %588

572:                                              ; preds = %536
  %573 = getelementptr inbounds %struct.locbox.26, ptr %551, i64 1
  store i32 %540, ptr %573, align 4, !tbaa !258
  %574 = getelementptr inbounds %struct.locbox.26, ptr %551, i64 1, i32 1
  store i32 1, ptr %574, align 4, !tbaa !259
  %575 = icmp ugt i32 %530, 1
  br i1 %575, label %576, label %618

576:                                              ; preds = %572
  %577 = zext i32 %530 to i64
  br label %578

578:                                              ; preds = %578, %576
  %579 = phi i64 [ 1, %576 ], [ %584, %578 ]
  %580 = phi i64 [ %577, %576 ], [ %581, %578 ]
  %581 = add nsw i64 %580, -1
  %582 = getelementptr inbounds [101 x i32], ptr %2, i64 0, i64 %580
  %583 = load i32, ptr %582, align 4, !tbaa !17
  %584 = add nuw nsw i64 %579, 1
  %585 = getelementptr inbounds %struct.locbox.26, ptr %551, i64 %584
  store i32 %583, ptr %585, align 4, !tbaa !258
  %586 = getelementptr inbounds %struct.locbox.26, ptr %551, i64 %584, i32 1
  store i32 1, ptr %586, align 4, !tbaa !259
  %587 = icmp eq i64 %584, %577
  br i1 %587, label %618, label %578, !llvm.loop !262

588:                                              ; preds = %536
  %589 = getelementptr inbounds %struct.locbox.26, ptr %551, i64 %561
  store i32 %540, ptr %589, align 4, !tbaa !258
  %590 = load i32, ptr @nPinLocs, align 4, !tbaa !17
  %591 = sext i32 %590 to i64
  %592 = getelementptr inbounds %struct.locbox.26, ptr %551, i64 %591, i32 1
  store i32 1, ptr %592, align 4, !tbaa !259
  %593 = icmp ugt i32 %530, 1
  br i1 %593, label %594, label %618

594:                                              ; preds = %588
  %595 = load i32, ptr @nPinLocs, align 4, !tbaa !17
  %596 = zext i32 %530 to i64
  %597 = sext i32 %595 to i64
  br label %598

598:                                              ; preds = %598, %594
  %599 = phi i64 [ %597, %594 ], [ %604, %598 ]
  %600 = phi i64 [ %596, %594 ], [ %601, %598 ]
  %601 = add nsw i64 %600, -1
  %602 = getelementptr inbounds [101 x i32], ptr %2, i64 0, i64 %600
  %603 = load i32, ptr %602, align 4, !tbaa !17
  %604 = add nsw i64 %599, -1
  %605 = getelementptr inbounds %struct.locbox.26, ptr %551, i64 %604
  store i32 %603, ptr %605, align 4, !tbaa !258
  %606 = getelementptr inbounds %struct.locbox.26, ptr %551, i64 %604, i32 1
  store i32 1, ptr %606, align 4, !tbaa !259
  %607 = icmp ugt i64 %600, 2
  br i1 %607, label %598, label %618, !llvm.loop !263

608:                                              ; preds = %529
  %609 = icmp sgt i32 %533, %532
  br i1 %609, label %610, label %618

610:                                              ; preds = %608
  %611 = load ptr, ptr @fpo, align 8, !tbaa !7
  %612 = trunc i64 %68 to i32
  %613 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %611, ptr noundef nonnull @.str.13, i32 noundef %612) #43
  %614 = load ptr, ptr @fpo, align 8, !tbaa !7
  %615 = tail call i64 @fwrite(ptr nonnull @.str.12.34, i64 37, i64 1, ptr %614)
  %616 = load ptr, ptr @fpo, align 8, !tbaa !7
  %617 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %616, ptr noundef nonnull @.str.5.31, i32 noundef %46) #43
  br label %618

618:                                              ; preds = %610, %608, %598, %588, %578, %572
  %619 = phi i32 [ %471, %610 ], [ %471, %608 ], [ %533, %572 ], [ %533, %588 ], [ %533, %578 ], [ %533, %598 ]
  %620 = load i32, ptr %3, align 16, !tbaa !17
  %621 = icmp slt i32 %620, 1
  br i1 %621, label %705, label %622

622:                                              ; preds = %618
  %623 = add nuw i32 %620, 1
  %624 = zext i32 %623 to i64
  %625 = trunc i64 %68 to i32
  br label %626

626:                                              ; preds = %699, %622
  %627 = phi i64 [ 1, %622 ], [ %703, %699 ]
  %628 = phi i32 [ %69, %622 ], [ %702, %699 ]
  %629 = phi i32 [ %70, %622 ], [ %701, %699 ]
  %630 = phi i32 [ %619, %622 ], [ %700, %699 ]
  %631 = getelementptr inbounds [11 x [101 x i32]], ptr %3, i64 0, i64 %627
  %632 = load i32, ptr %631, align 4, !tbaa !17
  %633 = add nsw i32 %632, %630
  %634 = load i32, ptr @nPinLocs, align 4, !tbaa !17
  %635 = icmp sgt i32 %633, %634
  br i1 %635, label %645, label %636

636:                                              ; preds = %626
  %637 = icmp slt i32 %632, 1
  br i1 %637, label %678, label %638

638:                                              ; preds = %636
  %639 = getelementptr inbounds [11 x [101 x i32]], ptr %3, i64 0, i64 %627, i64 2
  %640 = zext i32 %632 to i64
  %641 = add nuw i32 %632, 1
  %642 = zext i32 %641 to i64
  %643 = add nuw nsw i64 %640, 1
  %644 = getelementptr inbounds [11 x [101 x i32]], ptr %3, i64 0, i64 %627, i64 %643
  br label %652

645:                                              ; preds = %626
  %646 = load ptr, ptr @fpo, align 8, !tbaa !7
  %647 = tail call i64 @fwrite(ptr nonnull @.str.14, i64 34, i64 1, ptr %646)
  %648 = load ptr, ptr @fpo, align 8, !tbaa !7
  %649 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %648, ptr noundef nonnull @.str.15, i32 noundef %625) #43
  %650 = load ptr, ptr @fpo, align 8, !tbaa !7
  %651 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %650, ptr noundef nonnull @.str.5.31, i32 noundef %47) #43
  br label %699

652:                                              ; preds = %671, %638
  %653 = phi i64 [ 1, %638 ], [ %676, %671 ]
  %654 = phi i32 [ %628, %638 ], [ %674, %671 ]
  %655 = phi i32 [ %629, %638 ], [ %673, %671 ]
  %656 = phi i32 [ 0, %638 ], [ %675, %671 ]
  %657 = icmp eq i64 %653, 1
  br i1 %657, label %658, label %661

658:                                              ; preds = %652
  %659 = load i32, ptr %639, align 4, !tbaa !17
  %660 = tail call i32 @findLoc(i32 noundef %659) #44
  br label %671

661:                                              ; preds = %652
  %662 = icmp eq i64 %653, %640
  br i1 %662, label %663, label %666

663:                                              ; preds = %661
  %664 = load i32, ptr %644, align 4, !tbaa !17
  %665 = tail call i32 @findLoc(i32 noundef %664) #44
  br label %671

666:                                              ; preds = %661
  %667 = add nuw nsw i64 %653, 1
  %668 = getelementptr inbounds [11 x [101 x i32]], ptr %3, i64 0, i64 %627, i64 %667
  %669 = load i32, ptr %668, align 4, !tbaa !17
  %670 = tail call i32 @findLoc(i32 noundef %669) #44
  br label %671

671:                                              ; preds = %666, %663, %658
  %672 = phi i32 [ %660, %658 ], [ %665, %663 ], [ %670, %666 ]
  %673 = phi i32 [ %660, %658 ], [ %655, %663 ], [ %655, %666 ]
  %674 = phi i32 [ %654, %658 ], [ %665, %663 ], [ %654, %666 ]
  %675 = add nsw i32 %672, %656
  %676 = add nuw nsw i64 %653, 1
  %677 = icmp eq i64 %676, %642
  br i1 %677, label %678, label %652, !llvm.loop !264

678:                                              ; preds = %671, %636
  %679 = phi i32 [ 0, %636 ], [ %675, %671 ]
  %680 = phi i32 [ %629, %636 ], [ %673, %671 ]
  %681 = phi i32 [ %628, %636 ], [ %674, %671 ]
  %682 = sdiv i32 %679, %632
  %683 = sdiv i32 %632, -2
  %684 = add i32 %682, %683
  %685 = icmp slt i32 %684, 1
  br i1 %685, label %691, label %686

686:                                              ; preds = %678
  %687 = load i32, ptr @nPinLocs, align 4, !tbaa !17
  %688 = sub i32 %687, %632
  %689 = add i32 %688, 1
  %690 = tail call i32 @llvm.smin.i32(i32 %684, i32 %689)
  br label %691

691:                                              ; preds = %686, %678
  %692 = phi i32 [ 1, %678 ], [ %690, %686 ]
  %693 = icmp sgt i32 %680, %681
  br i1 %693, label %694, label %697

694:                                              ; preds = %691
  %695 = sub nsw i32 0, %692
  %696 = getelementptr inbounds [11 x [101 x i32]], ptr %3, i64 0, i64 %627, i64 1
  store i32 %695, ptr %696, align 4, !tbaa !17
  br label %699

697:                                              ; preds = %691
  %698 = getelementptr inbounds [11 x [101 x i32]], ptr %3, i64 0, i64 %627, i64 1
  store i32 %692, ptr %698, align 4, !tbaa !17
  br label %699

699:                                              ; preds = %697, %694, %645
  %700 = phi i32 [ %630, %645 ], [ %633, %694 ], [ %633, %697 ]
  %701 = phi i32 [ %629, %645 ], [ %680, %694 ], [ %680, %697 ]
  %702 = phi i32 [ %628, %645 ], [ %681, %694 ], [ %681, %697 ]
  %703 = add nuw nsw i64 %627, 1
  %704 = icmp eq i64 %703, %624
  br i1 %704, label %705, label %626, !llvm.loop !265

705:                                              ; preds = %699, %618
  %706 = phi i32 [ %619, %618 ], [ %700, %699 ]
  %707 = phi i32 [ %70, %618 ], [ %701, %699 ]
  %708 = phi i32 [ %69, %618 ], [ %702, %699 ]
  %709 = load i32, ptr %4, align 16, !tbaa !17
  %710 = add nsw i32 %709, %706
  %711 = load i32, ptr @nPinLocs, align 4, !tbaa !17
  %712 = icmp sgt i32 %710, %711
  br i1 %712, label %713, label %728

713:                                              ; preds = %705
  %714 = sub nsw i32 %711, %706
  %715 = load ptr, ptr @fpo, align 8, !tbaa !7
  %716 = tail call i64 @fwrite(ptr nonnull @.str.16, i64 36, i64 1, ptr %715)
  %717 = load ptr, ptr @fpo, align 8, !tbaa !7
  %718 = trunc i64 %68 to i32
  %719 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %717, ptr noundef nonnull @.str.17.35, i32 noundef %718) #43
  %720 = load ptr, ptr @fpo, align 8, !tbaa !7
  %721 = tail call i64 @fwrite(ptr nonnull @.str.18, i64 36, i64 1, ptr %720)
  %722 = load ptr, ptr @fpo, align 8, !tbaa !7
  %723 = load i32, ptr @nPinLocs, align 4, !tbaa !17
  %724 = sub nsw i32 %710, %723
  %725 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %722, ptr noundef nonnull @.str.19, i32 noundef %724) #43
  %726 = load ptr, ptr @fpo, align 8, !tbaa !7
  %727 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %726, ptr noundef nonnull @.str.5.31, i32 noundef %48) #43
  br label %728

728:                                              ; preds = %713, %705
  %729 = phi i32 [ %714, %713 ], [ %709, %705 ]
  %730 = icmp slt i32 %729, 1
  br i1 %730, label %733, label %731

731:                                              ; preds = %728
  %732 = zext i32 %729 to i64
  br label %745

733:                                              ; preds = %745, %728
  %734 = load i32, ptr @nPinLocs, align 4, !tbaa !17
  %735 = icmp slt i32 %734, 1
  br i1 %735, label %736, label %738

736:                                              ; preds = %733
  %737 = add nsw i32 %734, 1
  br label %783

738:                                              ; preds = %733
  %739 = load ptr, ptr @lArray, align 8, !tbaa !7
  %740 = add nuw i32 %734, 1
  %741 = zext i32 %740 to i64
  %742 = getelementptr inbounds %struct.locbox.26, ptr %739, i64 1, i32 1
  %743 = load i32, ptr %742, align 4, !tbaa !259
  %744 = icmp eq i32 %743, 1
  br i1 %744, label %755, label %765

745:                                              ; preds = %745, %731
  %746 = phi i64 [ 1, %731 ], [ %753, %745 ]
  %747 = shl nuw nsw i64 %746, 1
  %748 = getelementptr inbounds [201 x i32], ptr %4, i64 0, i64 %747
  %749 = load i32, ptr %748, align 8, !tbaa !17
  %750 = tail call i32 @findLoc(i32 noundef %749) #44
  %751 = add nsw i64 %747, -1
  %752 = getelementptr inbounds [201 x i32], ptr %4, i64 0, i64 %751
  store i32 %750, ptr %752, align 4, !tbaa !17
  %753 = add nuw nsw i64 %746, 1
  %754 = icmp ult i64 %746, %732
  br i1 %754, label %745, label %733, !llvm.loop !266

755:                                              ; preds = %759, %738
  %756 = phi i64 [ %757, %759 ], [ 1, %738 ]
  %757 = add nuw nsw i64 %756, 1
  %758 = icmp eq i64 %757, %741
  br i1 %758, label %765, label %759, !llvm.loop !267

759:                                              ; preds = %755
  %760 = getelementptr inbounds %struct.locbox.26, ptr %739, i64 %757, i32 1
  %761 = load i32, ptr %760, align 4, !tbaa !259
  %762 = icmp eq i32 %761, 1
  br i1 %762, label %755, label %763, !llvm.loop !267

763:                                              ; preds = %759
  %.lcssa5 = phi i64 [ %756, %759 ]
  %764 = trunc i64 %.lcssa5 to i32
  br label %765

765:                                              ; preds = %763, %755, %738
  %766 = phi i32 [ %764, %763 ], [ 0, %738 ], [ %734, %755 ]
  %767 = icmp sgt i32 %734, 0
  br i1 %767, label %768, label %783

768:                                              ; preds = %765
  %769 = load ptr, ptr @lArray, align 8, !tbaa !7
  %770 = zext i32 %734 to i64
  %771 = getelementptr inbounds %struct.locbox.26, ptr %769, i64 %770, i32 1
  %772 = load i32, ptr %771, align 4, !tbaa !259
  %773 = icmp eq i32 %772, 1
  br i1 %773, label %774, label %783

774:                                              ; preds = %777, %768
  %775 = phi i32 [ %778, %777 ], [ %734, %768 ]
  %776 = icmp sgt i32 %775, 1
  br i1 %776, label %777, label %783, !llvm.loop !268

777:                                              ; preds = %774
  %778 = add nsw i32 %775, -1
  %779 = zext i32 %778 to i64
  %780 = getelementptr inbounds %struct.locbox.26, ptr %769, i64 %779, i32 1
  %781 = load i32, ptr %780, align 4, !tbaa !259
  %782 = icmp eq i32 %781, 1
  br i1 %782, label %774, label %783, !llvm.loop !268

783:                                              ; preds = %777, %774, %768, %765, %736
  %784 = phi i32 [ %740, %765 ], [ %737, %736 ], [ %740, %768 ], [ %775, %777 ], [ 1, %774 ]
  %785 = phi i32 [ %766, %765 ], [ 0, %736 ], [ %766, %768 ], [ %766, %774 ], [ %766, %777 ]
  br label %793

786:                                              ; preds = %897
  %.lcssa9 = phi i32 [ %898, %897 ]
  %.lcssa8 = phi i32 [ %899, %897 ]
  %.lcssa7 = phi i32 [ %900, %897 ]
  %.lcssa6 = phi i32 [ %902, %897 ]
  %787 = icmp eq i32 %.lcssa7, 1
  br i1 %787, label %793, label %788, !llvm.loop !269

788:                                              ; preds = %786
  %.lcssa9.lcssa = phi i32 [ %.lcssa9, %786 ]
  %.lcssa8.lcssa = phi i32 [ %.lcssa8, %786 ]
  %.lcssa6.lcssa = phi i32 [ %.lcssa6, %786 ]
  %789 = icmp slt i32 %.lcssa6.lcssa, 1
  br i1 %789, label %923, label %790

790:                                              ; preds = %788
  %791 = add nuw i32 %.lcssa6.lcssa, 1
  %792 = zext i32 %791 to i64
  br label %909

793:                                              ; preds = %786, %783
  %794 = phi i32 [ %.lcssa6, %786 ], [ %620, %783 ]
  %795 = phi i32 [ %.lcssa8, %786 ], [ %784, %783 ]
  %796 = phi i32 [ %.lcssa9, %786 ], [ %785, %783 ]
  %797 = icmp slt i32 %794, 1
  br i1 %797, label %923, label %798

798:                                              ; preds = %793
  %799 = load ptr, ptr @lArray, align 8
  br label %800

800:                                              ; preds = %897, %798
  %801 = phi i64 [ 1, %798 ], [ %901, %897 ]
  %802 = phi i32 [ 0, %798 ], [ %900, %897 ]
  %803 = phi i32 [ %795, %798 ], [ %899, %897 ]
  %804 = phi i32 [ %796, %798 ], [ %898, %897 ]
  %805 = getelementptr inbounds [11 x [101 x i32]], ptr %3, i64 0, i64 %801
  %806 = getelementptr inbounds [11 x [101 x i32]], ptr %3, i64 0, i64 %801, i64 1
  %807 = load i32, ptr %806, align 4, !tbaa !17
  %808 = icmp eq i32 %807, 0
  br i1 %808, label %897, label %809

809:                                              ; preds = %800
  %810 = tail call i32 @llvm.abs.i32(i32 %807, i1 true)
  %811 = add nsw i32 %804, 1
  %812 = icmp sgt i32 %810, %811
  br i1 %812, label %852, label %813

813:                                              ; preds = %809
  %814 = icmp sgt i32 %807, 0
  %815 = load i32, ptr %805, align 4, !tbaa !17
  %816 = icmp slt i32 %815, 1
  br i1 %814, label %817, label %831

817:                                              ; preds = %813
  br i1 %816, label %849, label %818

818:                                              ; preds = %817
  %819 = sext i32 %804 to i64
  br label %820

820:                                              ; preds = %820, %818
  %821 = phi i64 [ 1, %818 ], [ %822, %820 ]
  %822 = add nuw nsw i64 %821, 1
  %823 = getelementptr inbounds [11 x [101 x i32]], ptr %3, i64 0, i64 %801, i64 %822
  %824 = load i32, ptr %823, align 4, !tbaa !17
  %825 = add nsw i64 %821, %819
  %826 = getelementptr inbounds %struct.locbox.26, ptr %799, i64 %825
  store i32 %824, ptr %826, align 4, !tbaa !258
  %827 = getelementptr inbounds %struct.locbox.26, ptr %799, i64 %825, i32 1
  store i32 1, ptr %827, align 4, !tbaa !259
  %828 = load i32, ptr %805, align 4, !tbaa !17
  %829 = sext i32 %828 to i64
  %830 = icmp slt i64 %821, %829
  br i1 %830, label %820, label %849, !llvm.loop !270

831:                                              ; preds = %813
  br i1 %816, label %849, label %832

832:                                              ; preds = %831
  %833 = sext i32 %804 to i64
  %834 = zext i32 %815 to i64
  br label %835

835:                                              ; preds = %835, %832
  %836 = phi i64 [ %834, %832 ], [ %845, %835 ]
  %837 = phi i64 [ 1, %832 ], [ %844, %835 ]
  %838 = add nsw i64 %836, 1
  %839 = getelementptr inbounds [11 x [101 x i32]], ptr %3, i64 0, i64 %801, i64 %838
  %840 = load i32, ptr %839, align 4, !tbaa !17
  %841 = add nsw i64 %837, %833
  %842 = getelementptr inbounds %struct.locbox.26, ptr %799, i64 %841
  store i32 %840, ptr %842, align 4, !tbaa !258
  %843 = getelementptr inbounds %struct.locbox.26, ptr %799, i64 %841, i32 1
  store i32 1, ptr %843, align 4, !tbaa !259
  %844 = add nuw nsw i64 %837, 1
  %845 = add nsw i64 %836, -1
  %846 = load i32, ptr %805, align 4, !tbaa !17
  %847 = sext i32 %846 to i64
  %848 = icmp slt i64 %837, %847
  br i1 %848, label %835, label %849, !llvm.loop !271

849:                                              ; preds = %835, %831, %820, %817
  %850 = phi i32 [ %815, %831 ], [ %815, %817 ], [ %828, %820 ], [ %846, %835 ]
  %851 = add nsw i32 %850, %804
  br label %894

852:                                              ; preds = %809
  %853 = load i32, ptr %805, align 4, !tbaa !17
  %854 = add nsw i32 %853, %810
  %855 = icmp slt i32 %854, %803
  br i1 %855, label %897, label %856

856:                                              ; preds = %852
  %857 = icmp sgt i32 %807, 0
  %858 = icmp sgt i32 %853, 0
  br i1 %857, label %859, label %874

859:                                              ; preds = %856
  br i1 %858, label %860, label %891

860:                                              ; preds = %859
  %861 = sub i32 %803, %853
  %862 = sext i32 %861 to i64
  %863 = sext i32 %803 to i64
  br label %864

864:                                              ; preds = %864, %860
  %865 = phi i64 [ 1, %860 ], [ %867, %864 ]
  %866 = phi i64 [ %862, %860 ], [ %872, %864 ]
  %867 = add nuw nsw i64 %865, 1
  %868 = getelementptr inbounds [11 x [101 x i32]], ptr %3, i64 0, i64 %801, i64 %867
  %869 = load i32, ptr %868, align 4, !tbaa !17
  %870 = getelementptr inbounds %struct.locbox.26, ptr %799, i64 %866
  store i32 %869, ptr %870, align 4, !tbaa !258
  %871 = getelementptr inbounds %struct.locbox.26, ptr %799, i64 %866, i32 1
  store i32 1, ptr %871, align 4, !tbaa !259
  %872 = add nsw i64 %866, 1
  %873 = icmp slt i64 %872, %863
  br i1 %873, label %864, label %891, !llvm.loop !272

874:                                              ; preds = %856
  br i1 %858, label %875, label %891

875:                                              ; preds = %874
  %876 = sub i32 %803, %853
  %877 = sext i32 %876 to i64
  %878 = sext i32 %803 to i64
  %879 = zext i32 %853 to i64
  br label %880

880:                                              ; preds = %880, %875
  %881 = phi i64 [ %879, %875 ], [ %889, %880 ]
  %882 = phi i64 [ %877, %875 ], [ %888, %880 ]
  %883 = add nsw i64 %881, 1
  %884 = getelementptr inbounds [11 x [101 x i32]], ptr %3, i64 0, i64 %801, i64 %883
  %885 = load i32, ptr %884, align 4, !tbaa !17
  %886 = getelementptr inbounds %struct.locbox.26, ptr %799, i64 %882
  store i32 %885, ptr %886, align 4, !tbaa !258
  %887 = getelementptr inbounds %struct.locbox.26, ptr %799, i64 %882, i32 1
  store i32 1, ptr %887, align 4, !tbaa !259
  %888 = add nsw i64 %882, 1
  %889 = add nsw i64 %881, -1
  %890 = icmp slt i64 %888, %878
  br i1 %890, label %880, label %891, !llvm.loop !273

891:                                              ; preds = %880, %874, %864, %859
  %892 = load i32, ptr %805, align 4, !tbaa !17
  %893 = sub nsw i32 %803, %892
  br label %894

894:                                              ; preds = %891, %849
  %895 = phi i32 [ %804, %891 ], [ %851, %849 ]
  %896 = phi i32 [ %893, %891 ], [ %803, %849 ]
  store i32 0, ptr %806, align 4, !tbaa !17
  br label %897

897:                                              ; preds = %894, %852, %800
  %898 = phi i32 [ %804, %800 ], [ %804, %852 ], [ %895, %894 ]
  %899 = phi i32 [ %803, %800 ], [ %803, %852 ], [ %896, %894 ]
  %900 = phi i32 [ %802, %800 ], [ %802, %852 ], [ 1, %894 ]
  %901 = add nuw nsw i64 %801, 1
  %902 = load i32, ptr %3, align 16, !tbaa !17
  %903 = sext i32 %902 to i64
  %904 = icmp slt i64 %801, %903
  br i1 %904, label %800, label %786, !llvm.loop !274

905:                                              ; preds = %919
  %.lcssa10 = phi i32 [ %920, %919 ]
  %906 = icmp sgt i32 %.lcssa10, 0
  br i1 %906, label %907, label %923

907:                                              ; preds = %905
  %908 = load ptr, ptr @lArray, align 8
  br label %928

909:                                              ; preds = %919, %790
  %910 = phi i64 [ 1, %790 ], [ %921, %919 ]
  %911 = phi i32 [ 0, %790 ], [ %920, %919 ]
  %912 = getelementptr inbounds [11 x [101 x i32]], ptr %3, i64 0, i64 %910, i64 1
  %913 = load i32, ptr %912, align 4, !tbaa !17
  %914 = icmp eq i32 %913, 0
  br i1 %914, label %919, label %915

915:                                              ; preds = %909
  %916 = getelementptr inbounds [11 x [101 x i32]], ptr %3, i64 0, i64 %910
  %917 = load i32, ptr %916, align 4, !tbaa !17
  %918 = add nsw i32 %917, %911
  br label %919

919:                                              ; preds = %915, %909
  %920 = phi i32 [ %911, %909 ], [ %918, %915 ]
  %921 = add nuw nsw i64 %910, 1
  %922 = icmp eq i64 %921, %792
  br i1 %922, label %905, label %909, !llvm.loop !275

923:                                              ; preds = %1125, %905, %793, %788
  %924 = phi i32 [ %707, %905 ], [ %707, %788 ], [ %1126, %1125 ], [ %707, %793 ]
  br i1 %730, label %1151, label %925

925:                                              ; preds = %923
  %926 = load ptr, ptr @lArray, align 8, !tbaa !7
  %927 = zext i32 %729 to i64
  br label %1134

928:                                              ; preds = %1125, %907
  %929 = phi i32 [ %.lcssa10, %907 ], [ %1129, %1125 ]
  %930 = phi i32 [ %.lcssa9.lcssa, %907 ], [ %1127, %1125 ]
  %931 = load i32, ptr @nPinLocs, align 4, !tbaa !17
  %932 = add nsw i32 %931, 1
  %933 = load i32, ptr %3, align 16, !tbaa !17
  %934 = icmp slt i32 %933, 1
  br i1 %934, label %942, label %935

935:                                              ; preds = %928
  %936 = add nuw i32 %933, 1
  %937 = zext i32 %936 to i64
  br label %956

938:                                              ; preds = %978
  %.lcssa14 = phi i32 [ %979, %978 ]
  %.lcssa13 = phi i32 [ %980, %978 ]
  %.lcssa12 = phi i32 [ %981, %978 ]
  %.lcssa11 = phi i32 [ %982, %978 ]
  %939 = sext i32 %.lcssa13 to i64
  %940 = getelementptr inbounds [11 x [101 x i32]], ptr %3, i64 0, i64 %939
  %941 = load i32, ptr %940, align 4, !tbaa !17
  br label %942

942:                                              ; preds = %938, %928
  %943 = phi i32 [ %941, %938 ], [ %933, %928 ]
  %944 = phi i32 [ %.lcssa14, %938 ], [ %932, %928 ]
  %945 = phi i32 [ %.lcssa13, %938 ], [ 0, %928 ]
  %946 = phi i32 [ %.lcssa12, %938 ], [ 0, %928 ]
  %947 = phi i32 [ %.lcssa11, %938 ], [ %932, %928 ]
  %948 = add nsw i32 %929, %944
  %949 = tail call i32 @llvm.smin.i32(i32 %.lcssa8.lcssa, i32 %948)
  %950 = sub i32 %949, %929
  %951 = sext i32 %945 to i64
  %952 = getelementptr inbounds [11 x [101 x i32]], ptr %3, i64 0, i64 %951
  %953 = add i32 %950, -1
  %954 = add i32 %953, %943
  %955 = icmp slt i32 %947, %954
  br i1 %955, label %985, label %1085

956:                                              ; preds = %978, %935
  %957 = phi i64 [ 1, %935 ], [ %983, %978 ]
  %958 = phi i32 [ %932, %935 ], [ %982, %978 ]
  %959 = phi i32 [ 0, %935 ], [ %981, %978 ]
  %960 = phi i32 [ 0, %935 ], [ %980, %978 ]
  %961 = phi i32 [ %932, %935 ], [ %979, %978 ]
  %962 = getelementptr inbounds [11 x [101 x i32]], ptr %3, i64 0, i64 %957, i64 1
  %963 = load i32, ptr %962, align 4, !tbaa !17
  %964 = icmp eq i32 %963, 0
  br i1 %964, label %978, label %965

965:                                              ; preds = %956
  %966 = tail call i32 @llvm.abs.i32(i32 %963, i1 true)
  %967 = icmp slt i32 %966, %961
  br i1 %967, label %968, label %973

968:                                              ; preds = %965
  %969 = icmp eq i32 %960, 0
  %970 = select i1 %969, i32 %959, i32 %960
  %971 = select i1 %969, i32 %958, i32 %961
  %972 = trunc i64 %957 to i32
  br label %978

973:                                              ; preds = %965
  %974 = icmp slt i32 %966, %958
  %975 = trunc i64 %957 to i32
  %976 = select i1 %974, i32 %975, i32 %959
  %977 = tail call i32 @llvm.smin.i32(i32 %966, i32 %958)
  br label %978

978:                                              ; preds = %973, %968, %956
  %979 = phi i32 [ %961, %956 ], [ %966, %968 ], [ %961, %973 ]
  %980 = phi i32 [ %960, %956 ], [ %972, %968 ], [ %960, %973 ]
  %981 = phi i32 [ %959, %956 ], [ %970, %968 ], [ %976, %973 ]
  %982 = phi i32 [ %958, %956 ], [ %971, %968 ], [ %977, %973 ]
  %983 = add nuw nsw i64 %957, 1
  %984 = icmp eq i64 %983, %937
  br i1 %984, label %938, label %956, !llvm.loop !276

985:                                              ; preds = %942
  %986 = sub nsw i32 %954, %947
  %987 = sdiv i32 %986, 2
  %988 = xor i32 %929, -1
  %989 = add i32 %949, %988
  %990 = tail call i32 @llvm.smin.i32(i32 %930, i32 %989)
  %991 = sub i32 %989, %990
  %992 = freeze i32 %991
  %993 = add i32 %943, -1
  %994 = add i32 %993, %949
  %995 = add i32 %929, %947
  %996 = tail call i32 @llvm.smin.i32(i32 %987, i32 %986)
  %997 = add i32 %995, %996
  %998 = sub i32 %994, %997
  %999 = tail call i32 @llvm.umin.i32(i32 %992, i32 %998)
  %1000 = sub i32 %950, %999
  %1001 = sub i32 %989, %999
  %1002 = getelementptr inbounds [11 x [101 x i32]], ptr %3, i64 0, i64 %951, i64 1
  %1003 = load i32, ptr %1002, align 4, !tbaa !17
  %1004 = icmp sgt i32 %1003, 0
  %1005 = icmp slt i32 %943, 1
  br i1 %1004, label %1010, label %1006

1006:                                             ; preds = %985
  br i1 %1005, label %1038, label %1007

1007:                                             ; preds = %1006
  %1008 = sext i32 %1001 to i64
  %1009 = zext i32 %943 to i64
  br label %1024

1010:                                             ; preds = %985
  br i1 %1005, label %1038, label %1011

1011:                                             ; preds = %1010
  %1012 = sext i32 %1001 to i64
  br label %1013

1013:                                             ; preds = %1013, %1011
  %1014 = phi i64 [ 1, %1011 ], [ %1015, %1013 ]
  %1015 = add nuw nsw i64 %1014, 1
  %1016 = getelementptr inbounds [11 x [101 x i32]], ptr %3, i64 0, i64 %951, i64 %1015
  %1017 = load i32, ptr %1016, align 4, !tbaa !17
  %1018 = add nsw i64 %1014, %1012
  %1019 = getelementptr inbounds %struct.locbox.26, ptr %908, i64 %1018
  store i32 %1017, ptr %1019, align 4, !tbaa !258
  %1020 = getelementptr inbounds %struct.locbox.26, ptr %908, i64 %1018, i32 1
  store i32 1, ptr %1020, align 4, !tbaa !259
  %1021 = load i32, ptr %952, align 4, !tbaa !17
  %1022 = sext i32 %1021 to i64
  %1023 = icmp slt i64 %1014, %1022
  br i1 %1023, label %1013, label %1038, !llvm.loop !277

1024:                                             ; preds = %1024, %1007
  %1025 = phi i64 [ %1009, %1007 ], [ %1034, %1024 ]
  %1026 = phi i64 [ 1, %1007 ], [ %1033, %1024 ]
  %1027 = add nsw i64 %1025, 1
  %1028 = getelementptr inbounds [11 x [101 x i32]], ptr %3, i64 0, i64 %951, i64 %1027
  %1029 = load i32, ptr %1028, align 4, !tbaa !17
  %1030 = add nsw i64 %1026, %1008
  %1031 = getelementptr inbounds %struct.locbox.26, ptr %908, i64 %1030
  store i32 %1029, ptr %1031, align 4, !tbaa !258
  %1032 = getelementptr inbounds %struct.locbox.26, ptr %908, i64 %1030, i32 1
  store i32 1, ptr %1032, align 4, !tbaa !259
  %1033 = add nuw nsw i64 %1026, 1
  %1034 = add nsw i64 %1025, -1
  %1035 = load i32, ptr %952, align 4, !tbaa !17
  %1036 = sext i32 %1035 to i64
  %1037 = icmp slt i64 %1026, %1036
  br i1 %1037, label %1024, label %1038, !llvm.loop !278

1038:                                             ; preds = %1024, %1013, %1010, %1006
  %1039 = phi i32 [ %943, %1006 ], [ %943, %1010 ], [ %1021, %1013 ], [ %1035, %1024 ]
  %1040 = add i32 %1000, -1
  %1041 = add i32 %1040, %1039
  store i32 0, ptr %1002, align 4, !tbaa !17
  %1042 = sext i32 %946 to i64
  %1043 = getelementptr inbounds [11 x [101 x i32]], ptr %3, i64 0, i64 %1042
  %1044 = getelementptr inbounds [11 x [101 x i32]], ptr %3, i64 0, i64 %1042, i64 1
  %1045 = load i32, ptr %1044, align 4, !tbaa !17
  %1046 = icmp sgt i32 %1045, 0
  %1047 = load i32, ptr %1043, align 4, !tbaa !17
  %1048 = icmp slt i32 %1047, 1
  br i1 %1046, label %1049, label %1063

1049:                                             ; preds = %1038
  br i1 %1048, label %1081, label %1050

1050:                                             ; preds = %1049
  %1051 = sext i32 %1041 to i64
  br label %1052

1052:                                             ; preds = %1052, %1050
  %1053 = phi i64 [ 1, %1050 ], [ %1054, %1052 ]
  %1054 = add nuw nsw i64 %1053, 1
  %1055 = getelementptr inbounds [11 x [101 x i32]], ptr %3, i64 0, i64 %1042, i64 %1054
  %1056 = load i32, ptr %1055, align 4, !tbaa !17
  %1057 = add nsw i64 %1053, %1051
  %1058 = getelementptr inbounds %struct.locbox.26, ptr %908, i64 %1057
  store i32 %1056, ptr %1058, align 4, !tbaa !258
  %1059 = getelementptr inbounds %struct.locbox.26, ptr %908, i64 %1057, i32 1
  store i32 1, ptr %1059, align 4, !tbaa !259
  %1060 = load i32, ptr %1043, align 4, !tbaa !17
  %1061 = sext i32 %1060 to i64
  %1062 = icmp slt i64 %1053, %1061
  br i1 %1062, label %1052, label %1081, !llvm.loop !279

1063:                                             ; preds = %1038
  br i1 %1048, label %1081, label %1064

1064:                                             ; preds = %1063
  %1065 = sext i32 %1041 to i64
  %1066 = zext i32 %1047 to i64
  br label %1067

1067:                                             ; preds = %1067, %1064
  %1068 = phi i64 [ %1066, %1064 ], [ %1077, %1067 ]
  %1069 = phi i64 [ 1, %1064 ], [ %1076, %1067 ]
  %1070 = add nsw i64 %1068, 1
  %1071 = getelementptr inbounds [11 x [101 x i32]], ptr %3, i64 0, i64 %1042, i64 %1070
  %1072 = load i32, ptr %1071, align 4, !tbaa !17
  %1073 = add nsw i64 %1069, %1065
  %1074 = getelementptr inbounds %struct.locbox.26, ptr %908, i64 %1073
  store i32 %1072, ptr %1074, align 4, !tbaa !258
  %1075 = getelementptr inbounds %struct.locbox.26, ptr %908, i64 %1073, i32 1
  store i32 1, ptr %1075, align 4, !tbaa !259
  %1076 = add nuw nsw i64 %1069, 1
  %1077 = add nsw i64 %1068, -1
  %1078 = load i32, ptr %1043, align 4, !tbaa !17
  %1079 = sext i32 %1078 to i64
  %1080 = icmp slt i64 %1069, %1079
  br i1 %1080, label %1067, label %1081, !llvm.loop !280

1081:                                             ; preds = %1067, %1063, %1052, %1049
  %1082 = phi i32 [ %1047, %1063 ], [ %1047, %1049 ], [ %1060, %1052 ], [ %1078, %1067 ]
  %1083 = add nsw i32 %1082, %1041
  store i32 0, ptr %1044, align 4, !tbaa !17
  %1084 = add i32 %1082, %1039
  br label %1125

1085:                                             ; preds = %942
  %1086 = getelementptr inbounds [11 x [101 x i32]], ptr %3, i64 0, i64 %951, i64 1
  %1087 = load i32, ptr %1086, align 4, !tbaa !17
  %1088 = icmp sgt i32 %1087, 0
  %1089 = icmp slt i32 %943, 1
  br i1 %1088, label %1094, label %1090

1090:                                             ; preds = %1085
  br i1 %1089, label %1122, label %1091

1091:                                             ; preds = %1090
  %1092 = sext i32 %953 to i64
  %1093 = zext i32 %943 to i64
  br label %1108

1094:                                             ; preds = %1085
  br i1 %1089, label %1122, label %1095

1095:                                             ; preds = %1094
  %1096 = sext i32 %953 to i64
  br label %1097

1097:                                             ; preds = %1097, %1095
  %1098 = phi i64 [ 1, %1095 ], [ %1099, %1097 ]
  %1099 = add nuw nsw i64 %1098, 1
  %1100 = getelementptr inbounds [11 x [101 x i32]], ptr %3, i64 0, i64 %951, i64 %1099
  %1101 = load i32, ptr %1100, align 4, !tbaa !17
  %1102 = add nsw i64 %1098, %1096
  %1103 = getelementptr inbounds %struct.locbox.26, ptr %908, i64 %1102
  store i32 %1101, ptr %1103, align 4, !tbaa !258
  %1104 = getelementptr inbounds %struct.locbox.26, ptr %908, i64 %1102, i32 1
  store i32 1, ptr %1104, align 4, !tbaa !259
  %1105 = load i32, ptr %952, align 4, !tbaa !17
  %1106 = sext i32 %1105 to i64
  %1107 = icmp slt i64 %1098, %1106
  br i1 %1107, label %1097, label %1122, !llvm.loop !281

1108:                                             ; preds = %1108, %1091
  %1109 = phi i64 [ %1093, %1091 ], [ %1118, %1108 ]
  %1110 = phi i64 [ 1, %1091 ], [ %1117, %1108 ]
  %1111 = add nsw i64 %1109, 1
  %1112 = getelementptr inbounds [11 x [101 x i32]], ptr %3, i64 0, i64 %951, i64 %1111
  %1113 = load i32, ptr %1112, align 4, !tbaa !17
  %1114 = add nsw i64 %1110, %1092
  %1115 = getelementptr inbounds %struct.locbox.26, ptr %908, i64 %1114
  store i32 %1113, ptr %1115, align 4, !tbaa !258
  %1116 = getelementptr inbounds %struct.locbox.26, ptr %908, i64 %1114, i32 1
  store i32 1, ptr %1116, align 4, !tbaa !259
  %1117 = add nuw nsw i64 %1110, 1
  %1118 = add nsw i64 %1109, -1
  %1119 = load i32, ptr %952, align 4, !tbaa !17
  %1120 = sext i32 %1119 to i64
  %1121 = icmp slt i64 %1110, %1120
  br i1 %1121, label %1108, label %1122, !llvm.loop !282

1122:                                             ; preds = %1108, %1097, %1094, %1090
  %1123 = phi i32 [ %943, %1090 ], [ %943, %1094 ], [ %1105, %1097 ], [ %1119, %1108 ]
  %1124 = add i32 %953, %1123
  store i32 0, ptr %1086, align 4, !tbaa !17
  br label %1125

1125:                                             ; preds = %1122, %1081
  %1126 = phi i32 [ %1000, %1081 ], [ %950, %1122 ]
  %1127 = phi i32 [ %1083, %1081 ], [ %1124, %1122 ]
  %1128 = phi i32 [ %1084, %1081 ], [ %1123, %1122 ]
  %1129 = sub i32 %929, %1128
  %1130 = icmp sgt i32 %1129, 0
  br i1 %1130, label %928, label %923, !llvm.loop !283

1131:                                             ; preds = %1148
  br i1 %730, label %1151, label %1132

1132:                                             ; preds = %1131
  %1133 = zext i32 %729 to i64
  br label %1157

1134:                                             ; preds = %1148, %925
  %1135 = phi i64 [ 1, %925 ], [ %1149, %1148 ]
  %1136 = shl nuw nsw i64 %1135, 1
  %1137 = add nsw i64 %1136, -1
  %1138 = getelementptr inbounds [201 x i32], ptr %4, i64 0, i64 %1137
  %1139 = load i32, ptr %1138, align 4, !tbaa !17
  %1140 = sext i32 %1139 to i64
  %1141 = getelementptr inbounds %struct.locbox.26, ptr %926, i64 %1140, i32 1
  %1142 = load i32, ptr %1141, align 4, !tbaa !259
  %1143 = icmp eq i32 %1142, 0
  br i1 %1143, label %1144, label %1148

1144:                                             ; preds = %1134
  store i32 1, ptr %1141, align 4, !tbaa !259
  %1145 = getelementptr inbounds [201 x i32], ptr %4, i64 0, i64 %1136
  %1146 = load i32, ptr %1145, align 8, !tbaa !17
  %1147 = getelementptr inbounds %struct.locbox.26, ptr %926, i64 %1140
  store i32 %1146, ptr %1147, align 4, !tbaa !258
  store i32 0, ptr %1138, align 4, !tbaa !17
  br label %1148

1148:                                             ; preds = %1144, %1134
  %1149 = add nuw nsw i64 %1135, 1
  %1150 = icmp ult i64 %1135, %927
  br i1 %1150, label %1134, label %1131, !llvm.loop !284

1151:                                             ; preds = %1197, %1131, %923
  %1152 = load i32, ptr @nPinLocs, align 4, !tbaa !17
  %1153 = icmp slt i32 %1152, 1
  %1154 = load ptr, ptr @lArray, align 8, !tbaa !7
  br i1 %1153, label %1221, label %1155

1155:                                             ; preds = %1151
  %1156 = load ptr, ptr @UCptr, align 8
  br label %1200

1157:                                             ; preds = %1197, %1132
  %1158 = phi i64 [ 1, %1132 ], [ %1198, %1197 ]
  %1159 = shl nuw nsw i64 %1158, 1
  %1160 = add nsw i64 %1159, -1
  %1161 = getelementptr inbounds [201 x i32], ptr %4, i64 0, i64 %1160
  %1162 = load i32, ptr %1161, align 4, !tbaa !17
  %1163 = icmp eq i32 %1162, 0
  br i1 %1163, label %1197, label %1164

1164:                                             ; preds = %1157
  %1165 = load i32, ptr @nPinLocs, align 4, !tbaa !17
  %1166 = icmp sgt i32 %1165, 1
  br i1 %1166, label %1167, label %1197

1167:                                             ; preds = %1164
  %1168 = load ptr, ptr @lArray, align 8
  %1169 = sext i32 %1162 to i64
  %1170 = zext i32 %1165 to i64
  %1171 = zext i32 %1165 to i64
  br label %1172

1172:                                             ; preds = %1188, %1167
  %1173 = phi i64 [ 1, %1167 ], [ %1189, %1188 ]
  %1174 = add nsw i64 %1173, %1169
  %1175 = icmp sgt i64 %1174, %1170
  br i1 %1175, label %1180, label %1176

1176:                                             ; preds = %1172
  %1177 = getelementptr inbounds %struct.locbox.26, ptr %1168, i64 %1174, i32 1
  %1178 = load i32, ptr %1177, align 4, !tbaa !259
  %1179 = icmp eq i32 %1178, 0
  br i1 %1179, label %1191, label %1180

1180:                                             ; preds = %1176, %1172
  %1181 = sub nsw i64 %1169, %1173
  %1182 = icmp sgt i64 %1181, 0
  br i1 %1182, label %1183, label %1188

1183:                                             ; preds = %1180
  %1184 = and i64 %1181, 4294967295
  %1185 = getelementptr inbounds %struct.locbox.26, ptr %1168, i64 %1184, i32 1
  %1186 = load i32, ptr %1185, align 4, !tbaa !259
  %1187 = icmp eq i32 %1186, 0
  br i1 %1187, label %1191, label %1188

1188:                                             ; preds = %1183, %1180
  %1189 = add nuw nsw i64 %1173, 1
  %1190 = icmp eq i64 %1189, %1171
  br i1 %1190, label %1197, label %1172, !llvm.loop !285

1191:                                             ; preds = %1183, %1176
  %1192 = phi ptr [ %1177, %1176 ], [ %1185, %1183 ]
  %1193 = phi i64 [ %1174, %1176 ], [ %1184, %1183 ]
  store i32 1, ptr %1192, align 4, !tbaa !259
  %1194 = getelementptr inbounds [201 x i32], ptr %4, i64 0, i64 %1159
  %1195 = load i32, ptr %1194, align 8, !tbaa !17
  %1196 = getelementptr inbounds %struct.locbox.26, ptr %1168, i64 %1193
  store i32 %1195, ptr %1196, align 4, !tbaa !258
  store i32 0, ptr %1161, align 4, !tbaa !17
  br label %1197

1197:                                             ; preds = %1191, %1188, %1164, %1157
  %1198 = add nuw nsw i64 %1158, 1
  %1199 = icmp ult i64 %1158, %1133
  br i1 %1199, label %1157, label %1151, !llvm.loop !286

1200:                                             ; preds = %1214, %1155
  %1201 = phi i32 [ %1152, %1155 ], [ %1215, %1214 ]
  %1202 = phi i64 [ 1, %1155 ], [ %1216, %1214 ]
  %1203 = getelementptr inbounds %struct.locbox.26, ptr %1154, i64 %1202, i32 1
  %1204 = load i32, ptr %1203, align 4, !tbaa !259
  %1205 = icmp eq i32 %1204, 1
  br i1 %1205, label %1206, label %1214

1206:                                             ; preds = %1200
  %1207 = getelementptr inbounds %struct.locbox.26, ptr %1154, i64 %1202
  %1208 = getelementptr inbounds %struct.locbox.26, ptr %1154, i64 %1202, i32 2
  %1209 = load i32, ptr %1207, align 4, !tbaa !258
  %1210 = sext i32 %1209 to i64
  %1211 = getelementptr inbounds %struct.uncombox.25, ptr %1156, i64 %1210, i32 9
  %1212 = load <2 x i32>, ptr %1208, align 4, !tbaa !17
  store <2 x i32> %1212, ptr %1211, align 4, !tbaa !17
  %1213 = load i32, ptr @nPinLocs, align 4, !tbaa !17
  br label %1214

1214:                                             ; preds = %1206, %1200
  %1215 = phi i32 [ %1201, %1200 ], [ %1213, %1206 ]
  %1216 = add nuw nsw i64 %1202, 1
  %1217 = sext i32 %1215 to i64
  %1218 = icmp slt i64 %1202, %1217
  br i1 %1218, label %1200, label %1219, !llvm.loop !287

1219:                                             ; preds = %1214
  %1220 = load ptr, ptr @lArray, align 8, !tbaa !7
  br label %1221

1221:                                             ; preds = %1219, %1151
  %1222 = phi ptr [ %1220, %1219 ], [ %1154, %1151 ]
  tail call void @free(ptr noundef %1222) #44
  %1223 = load i32, ptr %37, align 8, !tbaa !227
  br label %1224

1224:                                             ; preds = %1221, %66
  %1225 = phi i32 [ %67, %66 ], [ %1223, %1221 ]
  %1226 = phi i32 [ %70, %66 ], [ %924, %1221 ]
  %1227 = phi i32 [ %69, %66 ], [ %708, %1221 ]
  %1228 = add nuw nsw i64 %68, 1
  %1229 = sext i32 %1225 to i64
  %1230 = icmp slt i64 %68, %1229
  br i1 %1230, label %66, label %55, !llvm.loop !288

1231:                                             ; preds = %1246, %62
  %1232 = phi i64 [ 1, %62 ], [ %1247, %1246 ]
  %1233 = getelementptr inbounds %struct.uncombox.25, ptr %63, i64 %1232, i32 9
  %1234 = load i32, ptr %1233, align 4, !tbaa !228
  %1235 = icmp eq i32 %1234, -100000000
  br i1 %1235, label %1236, label %1246

1236:                                             ; preds = %1231
  %1237 = getelementptr inbounds %struct.uncombox.25, ptr %63, i64 %1232, i32 10
  %1238 = load i32, ptr %1237, align 4, !tbaa !230
  %1239 = icmp eq i32 %1238, -100000000
  br i1 %1239, label %1240, label %1246

1240:                                             ; preds = %1236
  %1241 = getelementptr inbounds %struct.uncombox.25, ptr %63, i64 %1232, i32 1
  %1242 = load i32, ptr %1241, align 4, !tbaa !250
  %1243 = sext i32 %1242 to i64
  %1244 = getelementptr inbounds %struct.locbox.26, ptr %29, i64 %1243
  %1245 = load <2 x i32>, ptr %1244, align 4, !tbaa !17
  store <2 x i32> %1245, ptr %1233, align 4, !tbaa !17
  br label %1246

1246:                                             ; preds = %1240, %1236, %1231
  %1247 = add nuw nsw i64 %1232, 1
  %1248 = icmp eq i64 %1247, %65
  br i1 %1248, label %1249, label %1231, !llvm.loop !289

1249:                                             ; preds = %1246, %57, %10
  %1250 = phi i32 [ %13, %10 ], [ %59, %57 ], [ %59, %1246 ]
  %1251 = phi i32 [ %12, %10 ], [ %60, %57 ], [ %60, %1246 ]
  %1252 = add nuw nsw i64 %11, 1
  %1253 = load i32, ptr @numcells, align 4, !tbaa !17
  %1254 = sext i32 %1253 to i64
  %1255 = icmp slt i64 %11, %1254
  br i1 %1255, label %10, label %1256, !llvm.loop !290

1256:                                             ; preds = %1249, %0
  call void @llvm.lifetime.end.p0(i64 804, ptr nonnull %4) #47
  call void @llvm.lifetime.end.p0(i64 4444, ptr nonnull %3) #47
  call void @llvm.lifetime.end.p0(i64 404, ptr nonnull %2) #47
  call void @llvm.lifetime.end.p0(i64 404, ptr nonnull %1) #47
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #13

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.umin.i32(i32, i32) #13

; Function Attrs: nounwind optsize uwtable
define internal void @finalcheck() #0 {
  %1 = alloca [1024 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 1024, ptr nonnull %1) #47
  %2 = load ptr, ptr @cktName, align 8, !tbaa !7
  %3 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %1, ptr noundef nonnull dereferenceable(1) @.str.36, ptr noundef %2) #44
  %4 = call noalias ptr @fopen(ptr noundef nonnull %1, ptr noundef nonnull @.str.1.37) #43
  store i32 0, ptr @fcost, align 4, !tbaa !17
  store i32 0, ptr @fwire, align 4, !tbaa !17
  store i32 0, ptr @fwirex, align 4, !tbaa !17
  store i32 0, ptr @fwirey, align 4, !tbaa !17
  %5 = tail call i64 @fwrite(ptr nonnull @.str.2.38, i64 49, i64 1, ptr %4)
  %6 = load i32, ptr @numcells, align 4, !tbaa !17
  %7 = load i32, ptr @numpads, align 4, !tbaa !17
  %8 = add nsw i32 %7, %6
  %9 = icmp slt i32 %8, 1
  br i1 %9, label %12, label %10

10:                                               ; preds = %0
  %11 = load ptr, ptr @cellarray, align 8, !tbaa !7
  br label %25

12:                                               ; preds = %145, %0
  %13 = phi i32 [ %7, %0 ], [ %148, %145 ]
  %14 = phi i32 [ %6, %0 ], [ %147, %145 ]
  %15 = load i32, ptr @numnets, align 4, !tbaa !17
  %16 = icmp slt i32 %15, 1
  br i1 %16, label %152, label %17

17:                                               ; preds = %12
  %18 = load i32, ptr @fcost, align 4, !tbaa !17
  %19 = load i32, ptr @fwire, align 4, !tbaa !17
  %20 = load i32, ptr @fwirey, align 4, !tbaa !17
  %21 = load i32, ptr @fwirex, align 4, !tbaa !17
  %22 = load ptr, ptr @netarray, align 8, !tbaa !7
  %23 = add nuw i32 %15, 1
  %24 = zext i32 %23 to i64
  br label %155

25:                                               ; preds = %145, %10
  %26 = phi ptr [ %11, %10 ], [ %79, %145 ]
  %27 = phi i64 [ 1, %10 ], [ %146, %145 ]
  %28 = phi i32 [ %6, %10 ], [ %147, %145 ]
  %29 = sext i32 %28 to i64
  %30 = icmp sgt i64 %27, %29
  br i1 %30, label %78, label %31

31:                                               ; preds = %25
  %32 = getelementptr inbounds ptr, ptr %26, i64 %27
  %33 = load ptr, ptr %32, align 8, !tbaa !7
  %34 = getelementptr inbounds %struct.cellbox, ptr %33, i64 0, i32 2
  %35 = load i32, ptr %34, align 4, !tbaa !164
  %36 = getelementptr inbounds %struct.cellbox, ptr %33, i64 0, i32 3
  %37 = load i32, ptr %36, align 8, !tbaa !165
  %38 = getelementptr inbounds %struct.cellbox, ptr %33, i64 0, i32 5
  %39 = load i32, ptr %38, align 8, !tbaa !45
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds %struct.cellbox, ptr %33, i64 0, i32 21, i64 %40
  %42 = load ptr, ptr %41, align 8, !tbaa !7
  %43 = getelementptr inbounds %struct.tilebox, ptr %42, i64 0, i32 9
  %44 = load i32, ptr %43, align 8, !tbaa !167
  %45 = add nsw i32 %44, %35
  %46 = getelementptr inbounds %struct.tilebox, ptr %42, i64 0, i32 10
  %47 = load i32, ptr %46, align 4, !tbaa !168
  %48 = add nsw i32 %47, %35
  %49 = getelementptr inbounds %struct.tilebox, ptr %42, i64 0, i32 11
  %50 = load i32, ptr %49, align 8, !tbaa !169
  %51 = add nsw i32 %50, %37
  %52 = getelementptr inbounds %struct.tilebox, ptr %42, i64 0, i32 12
  %53 = load i32, ptr %52, align 4, !tbaa !170
  %54 = add nsw i32 %53, %37
  %55 = load ptr, ptr %33, align 8, !tbaa !291
  %56 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %4, ptr noundef nonnull @.str.3.39, ptr noundef %55) #43
  %57 = getelementptr inbounds %struct.tilebox, ptr %42, i64 0, i32 1
  %58 = load double, ptr %57, align 8, !tbaa !292
  %59 = tail call i32 @wireestx(i32 noundef %45, i32 noundef %51, i32 noundef %54, double noundef %58) #44
  %60 = load double, ptr %57, align 8, !tbaa !292
  %61 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %4, ptr noundef nonnull @.str.4.40, i32 noundef %59, double noundef %60) #43
  %62 = getelementptr inbounds %struct.tilebox, ptr %42, i64 0, i32 2
  %63 = load double, ptr %62, align 8, !tbaa !293
  %64 = tail call i32 @wireestx(i32 noundef %48, i32 noundef %51, i32 noundef %54, double noundef %63) #44
  %65 = load double, ptr %62, align 8, !tbaa !293
  %66 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %4, ptr noundef nonnull @.str.5.41, i32 noundef %64, double noundef %65) #43
  %67 = getelementptr inbounds %struct.tilebox, ptr %42, i64 0, i32 3
  %68 = load double, ptr %67, align 8, !tbaa !294
  %69 = tail call i32 @wireestx(i32 noundef %51, i32 noundef %45, i32 noundef %48, double noundef %68) #44
  %70 = load double, ptr %67, align 8, !tbaa !294
  %71 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %4, ptr noundef nonnull @.str.6.42, i32 noundef %69, double noundef %70) #43
  %72 = getelementptr inbounds %struct.tilebox, ptr %42, i64 0, i32 4
  %73 = load double, ptr %72, align 8, !tbaa !295
  %74 = tail call i32 @wireestx(i32 noundef %54, i32 noundef %45, i32 noundef %48, double noundef %73) #44
  %75 = load double, ptr %72, align 8, !tbaa !295
  %76 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %4, ptr noundef nonnull @.str.7.43, i32 noundef %74, double noundef %75) #43
  %77 = load ptr, ptr @cellarray, align 8, !tbaa !7
  br label %78

78:                                               ; preds = %31, %25
  %79 = phi ptr [ %77, %31 ], [ %26, %25 ]
  %80 = getelementptr inbounds ptr, ptr %79, i64 %27
  %81 = load ptr, ptr %80, align 8, !tbaa !7
  %82 = getelementptr inbounds %struct.cellbox, ptr %81, i64 0, i32 5
  %83 = load i32, ptr %82, align 8, !tbaa !45
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds %struct.cellbox, ptr %81, i64 0, i32 21, i64 %84
  %86 = load ptr, ptr %85, align 8, !tbaa !7
  %87 = getelementptr inbounds %struct.tilebox, ptr %86, i64 0, i32 17
  %88 = load ptr, ptr %87, align 8, !tbaa !7
  %89 = icmp eq ptr %88, null
  br i1 %89, label %109, label %90

90:                                               ; preds = %78
  %91 = load ptr, ptr @termarray, align 8, !tbaa !7
  %92 = getelementptr inbounds %struct.cellbox, ptr %81, i64 0, i32 2
  %93 = load <2 x i32>, ptr %92, align 4, !tbaa !17
  br label %94

94:                                               ; preds = %94, %90
  %95 = phi ptr [ %88, %90 ], [ %107, %94 ]
  %96 = getelementptr inbounds %struct.termbox, ptr %95, i64 0, i32 5
  %97 = load i32, ptr %96, align 8, !tbaa !53
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds ptr, ptr %91, i64 %98
  %100 = load ptr, ptr %99, align 8, !tbaa !7
  %101 = getelementptr inbounds %struct.termbox, ptr %95, i64 0, i32 1
  %102 = getelementptr inbounds %struct.plist, ptr %100, i64 0, i32 1
  %103 = load ptr, ptr %102, align 8, !tbaa !62
  %104 = getelementptr inbounds %struct.netbox, ptr %103, i64 0, i32 1
  %105 = load <2 x i32>, ptr %101, align 8, !tbaa !17
  %106 = add nsw <2 x i32> %93, %105
  store <2 x i32> %106, ptr %104, align 8, !tbaa !17
  %107 = load ptr, ptr %95, align 8, !tbaa !7
  %108 = icmp eq ptr %107, null
  br i1 %108, label %109, label %94, !llvm.loop !296

109:                                              ; preds = %94, %78
  %110 = getelementptr inbounds %struct.cellbox, ptr %81, i64 0, i32 10
  %111 = load i32, ptr %110, align 4, !tbaa !297
  %112 = icmp eq i32 %111, 1
  br i1 %112, label %113, label %145

113:                                              ; preds = %109
  %114 = getelementptr inbounds %struct.cellbox, ptr %81, i64 0, i32 18
  %115 = load i32, ptr %114, align 4, !tbaa !223
  %116 = icmp slt i32 %115, 1
  br i1 %116, label %145, label %117

117:                                              ; preds = %113
  %118 = getelementptr inbounds %struct.cellbox, ptr %81, i64 0, i32 20
  %119 = load ptr, ptr %118, align 8, !tbaa !226
  %120 = getelementptr inbounds %struct.tilebox, ptr %86, i64 0, i32 18
  %121 = load ptr, ptr %120, align 8, !tbaa !225
  %122 = load ptr, ptr @termarray, align 8, !tbaa !7
  %123 = getelementptr inbounds %struct.cellbox, ptr %81, i64 0, i32 2
  %124 = load <2 x i32>, ptr %123, align 4, !tbaa !17
  %125 = add nuw i32 %115, 1
  %126 = zext i32 %125 to i64
  br label %127

127:                                              ; preds = %127, %117
  %128 = phi i64 [ 1, %117 ], [ %143, %127 ]
  %129 = getelementptr inbounds %struct.uncombox.25, ptr %119, i64 %128
  %130 = getelementptr inbounds %struct.uncombox.25, ptr %119, i64 %128, i32 1
  %131 = load i32, ptr %130, align 4, !tbaa !250
  %132 = load i32, ptr %129, align 4, !tbaa !298
  %133 = sext i32 %131 to i64
  %134 = getelementptr inbounds %struct.locbox.26, ptr %121, i64 %133
  %135 = sext i32 %132 to i64
  %136 = getelementptr inbounds ptr, ptr %122, i64 %135
  %137 = load ptr, ptr %136, align 8, !tbaa !7
  %138 = getelementptr inbounds %struct.plist, ptr %137, i64 0, i32 1
  %139 = load ptr, ptr %138, align 8, !tbaa !62
  %140 = getelementptr inbounds %struct.netbox, ptr %139, i64 0, i32 1
  %141 = load <2 x i32>, ptr %134, align 4, !tbaa !17
  %142 = add nsw <2 x i32> %124, %141
  store <2 x i32> %142, ptr %140, align 8, !tbaa !17
  %143 = add nuw nsw i64 %128, 1
  %144 = icmp eq i64 %143, %126
  br i1 %144, label %145, label %127, !llvm.loop !299

145:                                              ; preds = %127, %113, %109
  %146 = add nuw nsw i64 %27, 1
  %147 = load i32, ptr @numcells, align 4, !tbaa !17
  %148 = load i32, ptr @numpads, align 4, !tbaa !17
  %149 = add nsw i32 %148, %147
  %150 = sext i32 %149 to i64
  %151 = icmp slt i64 %27, %150
  br i1 %151, label %25, label %12, !llvm.loop !300

152:                                              ; preds = %247, %12
  %153 = add nsw i32 %13, %14
  %154 = icmp slt i32 %153, -3
  br i1 %154, label %290, label %254

155:                                              ; preds = %247, %17
  %156 = phi i64 [ 1, %17 ], [ %252, %247 ]
  %157 = phi i32 [ %21, %17 ], [ %251, %247 ]
  %158 = phi i32 [ %20, %17 ], [ %250, %247 ]
  %159 = phi i32 [ %19, %17 ], [ %249, %247 ]
  %160 = phi i32 [ %18, %17 ], [ %248, %247 ]
  %161 = getelementptr inbounds ptr, ptr %22, i64 %156
  %162 = load ptr, ptr %161, align 8, !tbaa !7
  %163 = getelementptr inbounds %struct.dimbox, ptr %162, i64 0, i32 1
  %164 = load i32, ptr %163, align 8, !tbaa !301
  %165 = icmp eq i32 %164, 1
  br i1 %165, label %247, label %166

166:                                              ; preds = %170, %155
  %167 = phi ptr [ %168, %170 ], [ %162, %155 ]
  %168 = load ptr, ptr %167, align 8, !tbaa !7
  %169 = icmp eq ptr %168, null
  br i1 %169, label %218, label %170

170:                                              ; preds = %166
  %171 = getelementptr inbounds %struct.netbox, ptr %168, i64 0, i32 9
  %172 = load i32, ptr %171, align 8, !tbaa !59
  %173 = icmp eq i32 %172, 1
  br i1 %173, label %166, label %174

174:                                              ; preds = %170
  %.lcssa1 = phi ptr [ %168, %170 ]
  %175 = getelementptr inbounds %struct.netbox, ptr %.lcssa1, i64 0, i32 1
  %176 = load i32, ptr %175, align 8, !tbaa !64
  %177 = getelementptr inbounds %struct.dimbox, ptr %162, i64 0, i32 4
  store i32 %176, ptr %177, align 4, !tbaa !302
  %178 = getelementptr inbounds %struct.dimbox, ptr %162, i64 0, i32 2
  store i32 %176, ptr %178, align 4, !tbaa !303
  %179 = getelementptr inbounds %struct.netbox, ptr %.lcssa1, i64 0, i32 2
  %180 = load i32, ptr %179, align 4, !tbaa !65
  %181 = getelementptr inbounds %struct.dimbox, ptr %162, i64 0, i32 9
  store i32 %180, ptr %181, align 8, !tbaa !304
  %182 = getelementptr inbounds %struct.dimbox, ptr %162, i64 0, i32 6
  store i32 %180, ptr %182, align 4, !tbaa !305
  %183 = load ptr, ptr %.lcssa1, align 8, !tbaa !63
  %184 = icmp eq ptr %183, null
  br i1 %184, label %218, label %185

185:                                              ; preds = %174
  %186 = getelementptr inbounds %struct.dimbox, ptr %162, i64 0, i32 2
  %187 = getelementptr inbounds %struct.dimbox, ptr %162, i64 0, i32 4
  %188 = getelementptr inbounds %struct.dimbox, ptr %162, i64 0, i32 6
  %189 = getelementptr inbounds %struct.dimbox, ptr %162, i64 0, i32 9
  br label %190

190:                                              ; preds = %215, %185
  %191 = phi ptr [ %183, %185 ], [ %216, %215 ]
  %192 = getelementptr inbounds %struct.netbox, ptr %191, i64 0, i32 9
  %193 = load i32, ptr %192, align 8, !tbaa !59
  %194 = icmp eq i32 %193, 1
  br i1 %194, label %215, label %195

195:                                              ; preds = %190
  %196 = getelementptr inbounds %struct.netbox, ptr %191, i64 0, i32 1
  %197 = load i32, ptr %196, align 8, !tbaa !64
  %198 = getelementptr inbounds %struct.netbox, ptr %191, i64 0, i32 2
  %199 = load i32, ptr %198, align 4, !tbaa !65
  %200 = load i32, ptr %186, align 4, !tbaa !303
  %201 = icmp slt i32 %197, %200
  br i1 %201, label %205, label %202

202:                                              ; preds = %195
  %203 = load i32, ptr %187, align 4, !tbaa !302
  %204 = icmp sgt i32 %197, %203
  br i1 %204, label %205, label %207

205:                                              ; preds = %202, %195
  %206 = phi ptr [ %186, %195 ], [ %187, %202 ]
  store i32 %197, ptr %206, align 4, !tbaa !17
  br label %207

207:                                              ; preds = %205, %202
  %208 = load i32, ptr %188, align 4, !tbaa !305
  %209 = icmp slt i32 %199, %208
  br i1 %209, label %210, label %211

210:                                              ; preds = %207
  store i32 %199, ptr %188, align 4, !tbaa !305
  br label %215

211:                                              ; preds = %207
  %212 = load i32, ptr %189, align 8, !tbaa !304
  %213 = icmp sgt i32 %199, %212
  br i1 %213, label %214, label %215

214:                                              ; preds = %211
  store i32 %199, ptr %189, align 8, !tbaa !304
  br label %215

215:                                              ; preds = %214, %211, %210, %190
  %216 = load ptr, ptr %191, align 8, !tbaa !63
  %217 = icmp eq ptr %216, null
  br i1 %217, label %218, label %190, !llvm.loop !306

218:                                              ; preds = %215, %174, %166
  %219 = getelementptr inbounds %struct.dimbox, ptr %162, i64 0, i32 4
  %220 = load i32, ptr %219, align 4, !tbaa !302
  %221 = getelementptr inbounds %struct.dimbox, ptr %162, i64 0, i32 2
  %222 = load i32, ptr %221, align 4, !tbaa !303
  %223 = sub nsw i32 %220, %222
  %224 = add nsw i32 %157, %223
  store i32 %224, ptr @fwirex, align 4, !tbaa !17
  %225 = getelementptr inbounds %struct.dimbox, ptr %162, i64 0, i32 9
  %226 = load i32, ptr %225, align 8, !tbaa !304
  %227 = getelementptr inbounds %struct.dimbox, ptr %162, i64 0, i32 6
  %228 = load i32, ptr %227, align 4, !tbaa !305
  %229 = sub nsw i32 %226, %228
  %230 = add nsw i32 %158, %229
  store i32 %230, ptr @fwirey, align 4, !tbaa !17
  %231 = add i32 %220, %226
  %232 = add i32 %222, %228
  %233 = sub i32 %231, %232
  %234 = add nsw i32 %233, %159
  store i32 %234, ptr @fwire, align 4, !tbaa !17
  %235 = getelementptr inbounds %struct.dimbox, ptr %162, i64 0, i32 11
  %236 = load double, ptr %235, align 8, !tbaa !40
  %237 = sitofp i32 %223 to double
  %238 = fmul double %236, %237
  %239 = fptosi double %238 to i32
  %240 = getelementptr inbounds %struct.dimbox, ptr %162, i64 0, i32 12
  %241 = load double, ptr %240, align 8, !tbaa !41
  %242 = sitofp i32 %229 to double
  %243 = fmul double %241, %242
  %244 = fptosi double %243 to i32
  %245 = add i32 %160, %239
  %246 = add i32 %245, %244
  store i32 %246, ptr @fcost, align 4, !tbaa !17
  br label %247

247:                                              ; preds = %218, %155
  %248 = phi i32 [ %160, %155 ], [ %246, %218 ]
  %249 = phi i32 [ %159, %155 ], [ %234, %218 ]
  %250 = phi i32 [ %158, %155 ], [ %230, %218 ]
  %251 = phi i32 [ %157, %155 ], [ %224, %218 ]
  %252 = add nuw nsw i64 %156, 1
  %253 = icmp eq i64 %252, %24
  br i1 %253, label %152, label %155, !llvm.loop !307

254:                                              ; preds = %281, %152
  %255 = phi i32 [ %282, %281 ], [ %13, %152 ]
  %256 = phi i32 [ %283, %281 ], [ %14, %152 ]
  %257 = phi i64 [ %285, %281 ], [ 1, %152 ]
  %258 = phi i32 [ %286, %281 ], [ %153, %152 ]
  %259 = phi i32 [ %284, %281 ], [ 0, %152 ]
  %260 = sext i32 %256 to i64
  %261 = icmp sle i64 %257, %260
  %262 = sext i32 %258 to i64
  %263 = icmp sgt i64 %257, %262
  %264 = or i1 %261, %263
  br i1 %264, label %265, label %281

265:                                              ; preds = %254
  %266 = load ptr, ptr @overlapf, align 8, !tbaa !7
  %267 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %268 = getelementptr inbounds ptr, ptr %267, i64 %257
  %269 = load ptr, ptr %268, align 8, !tbaa !7
  %270 = getelementptr inbounds %struct.cellbox, ptr %269, i64 0, i32 2
  %271 = load i32, ptr %270, align 4, !tbaa !164
  %272 = getelementptr inbounds %struct.cellbox, ptr %269, i64 0, i32 3
  %273 = load i32, ptr %272, align 8, !tbaa !165
  %274 = getelementptr inbounds %struct.cellbox, ptr %269, i64 0, i32 5
  %275 = load i32, ptr %274, align 8, !tbaa !45
  %276 = trunc i64 %257 to i32
  %277 = tail call i32 (i32, i32, i32, i32, i32, i32, i32, ...) %266(i32 noundef %276, i32 noundef %271, i32 noundef %273, i32 noundef %275, i32 noundef 0, i32 noundef 1, i32 noundef 0) #44
  %278 = add nsw i32 %277, %259
  %279 = load i32, ptr @numcells, align 4, !tbaa !17
  %280 = load i32, ptr @numpads, align 4, !tbaa !17
  br label %281

281:                                              ; preds = %265, %254
  %282 = phi i32 [ %280, %265 ], [ %255, %254 ]
  %283 = phi i32 [ %279, %265 ], [ %256, %254 ]
  %284 = phi i32 [ %278, %265 ], [ %259, %254 ]
  %285 = add nuw nsw i64 %257, 1
  %286 = add nsw i32 %282, %283
  %287 = add nsw i32 %286, 4
  %288 = sext i32 %287 to i64
  %289 = icmp slt i64 %257, %288
  br i1 %289, label %254, label %290, !llvm.loop !308

290:                                              ; preds = %281, %152
  %291 = phi i32 [ 0, %152 ], [ %284, %281 ]
  %292 = sdiv i32 %291, 2
  %293 = load ptr, ptr @fpo, align 8, !tbaa !7
  %294 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %293, ptr noundef nonnull @.str.8.44, i32 noundef %292) #43
  call void @llvm.lifetime.end.p0(i64 1024, ptr nonnull %1) #47
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, argmem: read, inaccessiblemem: none) uwtable
define internal void @initcheck() #18 {
  store i32 0, ptr @icost, align 4, !tbaa !17
  store i32 0, ptr @iwire, align 4, !tbaa !17
  store i32 0, ptr @iwirex, align 4, !tbaa !17
  store i32 0, ptr @iwirey, align 4, !tbaa !17
  %1 = load i32, ptr @numnets, align 4, !tbaa !17
  %2 = icmp slt i32 %1, 1
  br i1 %2, label %46, label %3

3:                                                ; preds = %0
  %4 = load ptr, ptr @netarray, align 8, !tbaa !7
  %5 = add nuw i32 %1, 1
  %6 = zext i32 %5 to i64
  br label %7

7:                                                ; preds = %7, %3
  %8 = phi i64 [ 1, %3 ], [ %43, %7 ]
  %9 = phi i32 [ 0, %3 ], [ %20, %7 ]
  %10 = phi i32 [ 0, %3 ], [ %26, %7 ]
  %11 = phi i32 [ 0, %3 ], [ %30, %7 ]
  %12 = phi i32 [ 0, %3 ], [ %42, %7 ]
  %13 = getelementptr inbounds ptr, ptr %4, i64 %8
  %14 = load ptr, ptr %13, align 8, !tbaa !7
  %15 = getelementptr inbounds %struct.dimbox, ptr %14, i64 0, i32 4
  %16 = load i32, ptr %15, align 4, !tbaa !302
  %17 = getelementptr inbounds %struct.dimbox, ptr %14, i64 0, i32 2
  %18 = load i32, ptr %17, align 4, !tbaa !303
  %19 = sub nsw i32 %16, %18
  %20 = add nsw i32 %9, %19
  %21 = getelementptr inbounds %struct.dimbox, ptr %14, i64 0, i32 9
  %22 = load i32, ptr %21, align 8, !tbaa !304
  %23 = getelementptr inbounds %struct.dimbox, ptr %14, i64 0, i32 6
  %24 = load i32, ptr %23, align 4, !tbaa !305
  %25 = sub nsw i32 %22, %24
  %26 = add nsw i32 %10, %25
  %27 = add i32 %16, %22
  %28 = add i32 %18, %24
  %29 = sub i32 %27, %28
  %30 = add nsw i32 %29, %11
  %31 = getelementptr inbounds %struct.dimbox, ptr %14, i64 0, i32 11
  %32 = load double, ptr %31, align 8, !tbaa !40
  %33 = sitofp i32 %19 to double
  %34 = fmul double %32, %33
  %35 = fptosi double %34 to i32
  %36 = getelementptr inbounds %struct.dimbox, ptr %14, i64 0, i32 12
  %37 = load double, ptr %36, align 8, !tbaa !41
  %38 = sitofp i32 %25 to double
  %39 = fmul double %37, %38
  %40 = fptosi double %39 to i32
  %41 = add i32 %12, %35
  %42 = add i32 %41, %40
  %43 = add nuw nsw i64 %8, 1
  %44 = icmp eq i64 %43, %6
  br i1 %44, label %45, label %7, !llvm.loop !309

45:                                               ; preds = %7
  %.lcssa3 = phi i32 [ %20, %7 ]
  %.lcssa2 = phi i32 [ %26, %7 ]
  %.lcssa1 = phi i32 [ %30, %7 ]
  %.lcssa = phi i32 [ %42, %7 ]
  store i32 %.lcssa3, ptr @iwirex, align 4, !tbaa !17
  store i32 %.lcssa2, ptr @iwirey, align 4, !tbaa !17
  store i32 %.lcssa1, ptr @iwire, align 4, !tbaa !17
  store i32 %.lcssa, ptr @icost, align 4, !tbaa !17
  br label %46

46:                                               ; preds = %45, %0
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @findcost() #0 {
  %1 = load double, ptr @Tsave, align 8, !tbaa !36
  %2 = fdiv double %1, 1.000000e+05
  %3 = load i32, ptr @numcells, align 4, !tbaa !17
  %4 = load i32, ptr @numpads, align 4, !tbaa !17
  %5 = add i32 %4, %3
  %6 = icmp slt i32 %5, 1
  br i1 %6, label %80, label %7

7:                                                ; preds = %0
  %8 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %9 = load ptr, ptr @termarray, align 8
  %10 = add nuw i32 %5, 1
  %11 = zext i32 %10 to i64
  br label %12

12:                                               ; preds = %77, %7
  %13 = phi i64 [ 1, %7 ], [ %78, %77 ]
  %14 = getelementptr inbounds ptr, ptr %8, i64 %13
  %15 = load ptr, ptr %14, align 8, !tbaa !7
  %16 = getelementptr inbounds %struct.cellbox, ptr %15, i64 0, i32 5
  %17 = load i32, ptr %16, align 8, !tbaa !45
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds %struct.cellbox, ptr %15, i64 0, i32 21, i64 %18
  %20 = load ptr, ptr %19, align 8, !tbaa !7
  %21 = getelementptr inbounds %struct.tilebox, ptr %20, i64 0, i32 17
  %22 = load ptr, ptr %21, align 8, !tbaa !7
  %23 = icmp eq ptr %22, null
  br i1 %23, label %42, label %24

24:                                               ; preds = %12
  %25 = getelementptr inbounds %struct.cellbox, ptr %15, i64 0, i32 2
  %26 = load <2 x i32>, ptr %25, align 4, !tbaa !17
  br label %27

27:                                               ; preds = %27, %24
  %28 = phi ptr [ %22, %24 ], [ %40, %27 ]
  %29 = getelementptr inbounds %struct.termbox, ptr %28, i64 0, i32 5
  %30 = load i32, ptr %29, align 8, !tbaa !53
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds ptr, ptr %9, i64 %31
  %33 = load ptr, ptr %32, align 8, !tbaa !7
  %34 = getelementptr inbounds %struct.termbox, ptr %28, i64 0, i32 1
  %35 = getelementptr inbounds %struct.plist, ptr %33, i64 0, i32 1
  %36 = load ptr, ptr %35, align 8, !tbaa !62
  %37 = getelementptr inbounds %struct.netbox, ptr %36, i64 0, i32 1
  %38 = load <2 x i32>, ptr %34, align 8, !tbaa !17
  %39 = add nsw <2 x i32> %26, %38
  store <2 x i32> %39, ptr %37, align 8, !tbaa !17
  %40 = load ptr, ptr %28, align 8, !tbaa !7
  %41 = icmp eq ptr %40, null
  br i1 %41, label %42, label %27, !llvm.loop !310

42:                                               ; preds = %27, %12
  %43 = getelementptr inbounds %struct.cellbox, ptr %15, i64 0, i32 10
  %44 = load i32, ptr %43, align 4, !tbaa !297
  %45 = icmp eq i32 %44, 1
  br i1 %45, label %46, label %77

46:                                               ; preds = %42
  %47 = getelementptr inbounds %struct.cellbox, ptr %15, i64 0, i32 18
  %48 = load i32, ptr %47, align 4, !tbaa !223
  %49 = icmp slt i32 %48, 1
  br i1 %49, label %77, label %50

50:                                               ; preds = %46
  %51 = getelementptr inbounds %struct.cellbox, ptr %15, i64 0, i32 20
  %52 = load ptr, ptr %51, align 8, !tbaa !226
  %53 = getelementptr inbounds %struct.tilebox, ptr %20, i64 0, i32 18
  %54 = load ptr, ptr %53, align 8, !tbaa !225
  %55 = getelementptr inbounds %struct.cellbox, ptr %15, i64 0, i32 2
  %56 = load <2 x i32>, ptr %55, align 4, !tbaa !17
  %57 = add nuw i32 %48, 1
  %58 = zext i32 %57 to i64
  br label %59

59:                                               ; preds = %59, %50
  %60 = phi i64 [ 1, %50 ], [ %75, %59 ]
  %61 = getelementptr inbounds %struct.uncombox.25, ptr %52, i64 %60
  %62 = getelementptr inbounds %struct.uncombox.25, ptr %52, i64 %60, i32 1
  %63 = load i32, ptr %62, align 4, !tbaa !250
  %64 = load i32, ptr %61, align 4, !tbaa !298
  %65 = sext i32 %63 to i64
  %66 = getelementptr inbounds %struct.locbox.26, ptr %54, i64 %65
  %67 = sext i32 %64 to i64
  %68 = getelementptr inbounds ptr, ptr %9, i64 %67
  %69 = load ptr, ptr %68, align 8, !tbaa !7
  %70 = getelementptr inbounds %struct.plist, ptr %69, i64 0, i32 1
  %71 = load ptr, ptr %70, align 8, !tbaa !62
  %72 = getelementptr inbounds %struct.netbox, ptr %71, i64 0, i32 1
  %73 = load <2 x i32>, ptr %66, align 4, !tbaa !17
  %74 = add nsw <2 x i32> %56, %73
  store <2 x i32> %74, ptr %72, align 8, !tbaa !17
  %75 = add nuw nsw i64 %60, 1
  %76 = icmp eq i64 %75, %58
  br i1 %76, label %77, label %59, !llvm.loop !311

77:                                               ; preds = %59, %46, %42
  %78 = add nuw nsw i64 %13, 1
  %79 = icmp eq i64 %78, %11
  br i1 %79, label %80, label %12, !llvm.loop !312

80:                                               ; preds = %77, %0
  %81 = load i32, ptr @finalShot, align 4, !tbaa !17
  %82 = icmp sgt i32 %81, 0
  %83 = load i32, ptr @numnets, align 4
  %84 = select i1 %82, i32 %3, i32 0
  %85 = add i32 %84, %83
  %86 = icmp slt i32 %85, 1
  br i1 %86, label %180, label %87

87:                                               ; preds = %80
  %88 = load ptr, ptr @netarray, align 8, !tbaa !7
  %89 = add nuw i32 %85, 1
  %90 = zext i32 %89 to i64
  br label %91

91:                                               ; preds = %176, %87
  %92 = phi i64 [ 1, %87 ], [ %178, %176 ]
  %93 = phi i32 [ 0, %87 ], [ %177, %176 ]
  %94 = getelementptr inbounds ptr, ptr %88, i64 %92
  %95 = load ptr, ptr %94, align 8, !tbaa !7
  %96 = icmp eq ptr %95, null
  br i1 %96, label %176, label %97

97:                                               ; preds = %91
  %98 = getelementptr inbounds %struct.dimbox, ptr %95, i64 0, i32 1
  %99 = load i32, ptr %98, align 8, !tbaa !301
  %100 = icmp eq i32 %99, 1
  br i1 %100, label %176, label %101

101:                                              ; preds = %105, %97
  %102 = phi ptr [ %103, %105 ], [ %95, %97 ]
  %103 = load ptr, ptr %102, align 8, !tbaa !7
  %104 = icmp eq ptr %103, null
  br i1 %104, label %153, label %105

105:                                              ; preds = %101
  %106 = getelementptr inbounds %struct.netbox, ptr %103, i64 0, i32 9
  %107 = load i32, ptr %106, align 8, !tbaa !59
  %108 = icmp eq i32 %107, 1
  br i1 %108, label %101, label %109

109:                                              ; preds = %105
  %.lcssa1 = phi ptr [ %103, %105 ]
  %110 = getelementptr inbounds %struct.netbox, ptr %.lcssa1, i64 0, i32 1
  %111 = load i32, ptr %110, align 8, !tbaa !64
  %112 = getelementptr inbounds %struct.dimbox, ptr %95, i64 0, i32 4
  store i32 %111, ptr %112, align 4, !tbaa !302
  %113 = getelementptr inbounds %struct.dimbox, ptr %95, i64 0, i32 2
  store i32 %111, ptr %113, align 4, !tbaa !303
  %114 = getelementptr inbounds %struct.netbox, ptr %.lcssa1, i64 0, i32 2
  %115 = load i32, ptr %114, align 4, !tbaa !65
  %116 = getelementptr inbounds %struct.dimbox, ptr %95, i64 0, i32 9
  store i32 %115, ptr %116, align 8, !tbaa !304
  %117 = getelementptr inbounds %struct.dimbox, ptr %95, i64 0, i32 6
  store i32 %115, ptr %117, align 4, !tbaa !305
  %118 = load ptr, ptr %.lcssa1, align 8, !tbaa !63
  %119 = icmp eq ptr %118, null
  br i1 %119, label %153, label %120

120:                                              ; preds = %109
  %121 = getelementptr inbounds %struct.dimbox, ptr %95, i64 0, i32 2
  %122 = getelementptr inbounds %struct.dimbox, ptr %95, i64 0, i32 4
  %123 = getelementptr inbounds %struct.dimbox, ptr %95, i64 0, i32 6
  %124 = getelementptr inbounds %struct.dimbox, ptr %95, i64 0, i32 9
  br label %125

125:                                              ; preds = %150, %120
  %126 = phi ptr [ %118, %120 ], [ %151, %150 ]
  %127 = getelementptr inbounds %struct.netbox, ptr %126, i64 0, i32 9
  %128 = load i32, ptr %127, align 8, !tbaa !59
  %129 = icmp eq i32 %128, 1
  br i1 %129, label %150, label %130

130:                                              ; preds = %125
  %131 = getelementptr inbounds %struct.netbox, ptr %126, i64 0, i32 1
  %132 = load i32, ptr %131, align 8, !tbaa !64
  %133 = getelementptr inbounds %struct.netbox, ptr %126, i64 0, i32 2
  %134 = load i32, ptr %133, align 4, !tbaa !65
  %135 = load i32, ptr %121, align 4, !tbaa !303
  %136 = icmp slt i32 %132, %135
  br i1 %136, label %140, label %137

137:                                              ; preds = %130
  %138 = load i32, ptr %122, align 4, !tbaa !302
  %139 = icmp sgt i32 %132, %138
  br i1 %139, label %140, label %142

140:                                              ; preds = %137, %130
  %141 = phi ptr [ %121, %130 ], [ %122, %137 ]
  store i32 %132, ptr %141, align 4, !tbaa !17
  br label %142

142:                                              ; preds = %140, %137
  %143 = load i32, ptr %123, align 4, !tbaa !305
  %144 = icmp slt i32 %134, %143
  br i1 %144, label %145, label %146

145:                                              ; preds = %142
  store i32 %134, ptr %123, align 4, !tbaa !305
  br label %150

146:                                              ; preds = %142
  %147 = load i32, ptr %124, align 8, !tbaa !304
  %148 = icmp sgt i32 %134, %147
  br i1 %148, label %149, label %150

149:                                              ; preds = %146
  store i32 %134, ptr %124, align 8, !tbaa !304
  br label %150

150:                                              ; preds = %149, %146, %145, %125
  %151 = load ptr, ptr %126, align 8, !tbaa !63
  %152 = icmp eq ptr %151, null
  br i1 %152, label %153, label %125, !llvm.loop !313

153:                                              ; preds = %150, %109, %101
  %154 = getelementptr inbounds %struct.dimbox, ptr %95, i64 0, i32 11
  %155 = load double, ptr %154, align 8, !tbaa !40
  %156 = getelementptr inbounds %struct.dimbox, ptr %95, i64 0, i32 4
  %157 = load i32, ptr %156, align 4, !tbaa !302
  %158 = getelementptr inbounds %struct.dimbox, ptr %95, i64 0, i32 2
  %159 = load i32, ptr %158, align 4, !tbaa !303
  %160 = sub nsw i32 %157, %159
  %161 = sitofp i32 %160 to double
  %162 = fmul double %155, %161
  %163 = fptosi double %162 to i32
  %164 = getelementptr inbounds %struct.dimbox, ptr %95, i64 0, i32 12
  %165 = load double, ptr %164, align 8, !tbaa !41
  %166 = getelementptr inbounds %struct.dimbox, ptr %95, i64 0, i32 9
  %167 = load i32, ptr %166, align 8, !tbaa !304
  %168 = getelementptr inbounds %struct.dimbox, ptr %95, i64 0, i32 6
  %169 = load i32, ptr %168, align 4, !tbaa !305
  %170 = sub nsw i32 %167, %169
  %171 = sitofp i32 %170 to double
  %172 = fmul double %165, %171
  %173 = fptosi double %172 to i32
  %174 = add i32 %93, %163
  %175 = add i32 %174, %173
  br label %176

176:                                              ; preds = %153, %97, %91
  %177 = phi i32 [ %93, %91 ], [ %93, %97 ], [ %175, %153 ]
  %178 = add nuw nsw i64 %92, 1
  %179 = icmp eq i64 %178, %90
  br i1 %179, label %180, label %91, !llvm.loop !314

180:                                              ; preds = %176, %80
  %181 = phi i32 [ 0, %80 ], [ %177, %176 ]
  store i32 0, ptr @penalty, align 4, !tbaa !17
  %182 = icmp slt i32 %5, -3
  br i1 %182, label %220, label %183

183:                                              ; preds = %211, %180
  %184 = phi i32 [ %212, %211 ], [ 0, %180 ]
  %185 = phi i32 [ %213, %211 ], [ %4, %180 ]
  %186 = phi i32 [ %214, %211 ], [ %3, %180 ]
  %187 = phi i64 [ %215, %211 ], [ 1, %180 ]
  %188 = phi i32 [ %216, %211 ], [ %5, %180 ]
  %189 = sext i32 %186 to i64
  %190 = icmp sle i64 %187, %189
  %191 = sext i32 %188 to i64
  %192 = icmp sgt i64 %187, %191
  %193 = or i1 %190, %192
  br i1 %193, label %194, label %211

194:                                              ; preds = %183
  %195 = load ptr, ptr @overlap, align 8, !tbaa !7
  %196 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %197 = getelementptr inbounds ptr, ptr %196, i64 %187
  %198 = load ptr, ptr %197, align 8, !tbaa !7
  %199 = getelementptr inbounds %struct.cellbox, ptr %198, i64 0, i32 2
  %200 = load i32, ptr %199, align 4, !tbaa !164
  %201 = getelementptr inbounds %struct.cellbox, ptr %198, i64 0, i32 3
  %202 = load i32, ptr %201, align 8, !tbaa !165
  %203 = getelementptr inbounds %struct.cellbox, ptr %198, i64 0, i32 5
  %204 = load i32, ptr %203, align 8, !tbaa !45
  %205 = trunc i64 %187 to i32
  %206 = tail call i32 (i32, i32, i32, i32, i32, i32, i32, ...) %195(i32 noundef %205, i32 noundef %200, i32 noundef %202, i32 noundef %204, i32 noundef 0, i32 noundef 1, i32 noundef 0) #44
  %207 = load i32, ptr @penalty, align 4, !tbaa !17
  %208 = add nsw i32 %207, %206
  store i32 %208, ptr @penalty, align 4, !tbaa !17
  %209 = load i32, ptr @numcells, align 4, !tbaa !17
  %210 = load i32, ptr @numpads, align 4, !tbaa !17
  br label %211

211:                                              ; preds = %194, %183
  %212 = phi i32 [ %184, %183 ], [ %208, %194 ]
  %213 = phi i32 [ %185, %183 ], [ %210, %194 ]
  %214 = phi i32 [ %186, %183 ], [ %209, %194 ]
  %215 = add nuw nsw i64 %187, 1
  %216 = add nsw i32 %213, %214
  %217 = add nsw i32 %216, 4
  %218 = sext i32 %217 to i64
  %219 = icmp slt i64 %187, %218
  br i1 %219, label %183, label %220, !llvm.loop !315

220:                                              ; preds = %211, %180
  %221 = phi i32 [ 0, %180 ], [ %212, %211 ]
  %222 = phi i32 [ %3, %180 ], [ %214, %211 ]
  %223 = sdiv i32 %221, 2
  store i32 %223, ptr @penalty, align 4, !tbaa !17
  store i32 0, ptr @overfill, align 4, !tbaa !17
  %224 = icmp slt i32 %222, 1
  br i1 %224, label %271, label %225

225:                                              ; preds = %220
  %226 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %227 = fmul double %2, 1.000000e+01
  %228 = add nuw i32 %222, 1
  %229 = zext i32 %228 to i64
  br label %230

230:                                              ; preds = %267, %225
  %231 = phi i64 [ 1, %225 ], [ %269, %267 ]
  %232 = phi i32 [ 0, %225 ], [ %268, %267 ]
  %233 = getelementptr inbounds ptr, ptr %226, i64 %231
  %234 = load ptr, ptr %233, align 8, !tbaa !7
  %235 = getelementptr inbounds %struct.cellbox, ptr %234, i64 0, i32 10
  %236 = load i32, ptr %235, align 4, !tbaa !297
  %237 = icmp eq i32 %236, 0
  br i1 %237, label %267, label %238

238:                                              ; preds = %230
  %239 = getelementptr inbounds %struct.cellbox, ptr %234, i64 0, i32 17
  %240 = load i32, ptr %239, align 8, !tbaa !227
  %241 = icmp slt i32 %240, 1
  br i1 %241, label %267, label %242

242:                                              ; preds = %238
  %243 = getelementptr inbounds %struct.cellbox, ptr %234, i64 0, i32 19
  %244 = load ptr, ptr %243, align 8, !tbaa !224
  %245 = sext i32 %240 to i64
  br label %246

246:                                              ; preds = %262, %242
  %247 = phi i64 [ 1, %242 ], [ %265, %262 ]
  %248 = phi i32 [ %232, %242 ], [ %263, %262 ]
  %249 = phi i32 [ %232, %242 ], [ %264, %262 ]
  %250 = getelementptr inbounds %struct.contentbox, ptr %244, i64 %247
  %251 = load i32, ptr %250, align 4, !tbaa !232
  %252 = getelementptr inbounds %struct.contentbox, ptr %244, i64 %247, i32 2
  %253 = load i32, ptr %252, align 4, !tbaa !316
  %254 = icmp sgt i32 %251, %253
  br i1 %254, label %255, label %262

255:                                              ; preds = %246
  %256 = sub nsw i32 %251, %253
  %257 = mul nsw i32 %256, %256
  %258 = sitofp i32 %257 to double
  %259 = fmul double %227, %258
  %260 = fptosi double %259 to i32
  %261 = add nsw i32 %249, %260
  store i32 %261, ptr @overfill, align 4, !tbaa !17
  br label %262

262:                                              ; preds = %255, %246
  %263 = phi i32 [ %248, %246 ], [ %261, %255 ]
  %264 = phi i32 [ %249, %246 ], [ %261, %255 ]
  %265 = add nuw nsw i64 %247, 1
  %266 = icmp slt i64 %247, %245
  br i1 %266, label %246, label %267, !llvm.loop !317

267:                                              ; preds = %262, %238, %230
  %268 = phi i32 [ %232, %230 ], [ %232, %238 ], [ %263, %262 ]
  %269 = add nuw nsw i64 %231, 1
  %270 = icmp eq i64 %269, %229
  br i1 %270, label %271, label %230, !llvm.loop !318

271:                                              ; preds = %267, %220
  ret i32 %181
}

; Function Attrs: nofree nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @findLoc(i32 noundef %0) #19 {
  %2 = load ptr, ptr @UCptr, align 8, !tbaa !7
  %3 = sext i32 %0 to i64
  %4 = getelementptr inbounds %struct.uncombox.25, ptr %2, i64 %3
  %5 = load i32, ptr %4, align 4, !tbaa !298
  %6 = load ptr, ptr @netarray, align 8, !tbaa !7
  %7 = load ptr, ptr @termarray, align 8, !tbaa !7
  %8 = sext i32 %5 to i64
  %9 = getelementptr inbounds ptr, ptr %7, i64 %8
  %10 = load ptr, ptr %9, align 8, !tbaa !7
  %11 = load i32, ptr %10, align 8, !tbaa !60
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds ptr, ptr %6, i64 %12
  %14 = load ptr, ptr %13, align 8, !tbaa !7
  %15 = load ptr, ptr %14, align 8, !tbaa !7
  %16 = icmp eq ptr %15, null
  br i1 %16, label %42, label %17

17:                                               ; preds = %35, %1
  %18 = phi ptr [ %40, %35 ], [ %15, %1 ]
  %19 = phi i32 [ %39, %35 ], [ 0, %1 ]
  %20 = phi i32 [ %38, %35 ], [ 1000000000, %1 ]
  %21 = phi i32 [ %37, %35 ], [ 1000000000, %1 ]
  %22 = phi i32 [ %36, %35 ], [ 0, %1 ]
  %23 = getelementptr inbounds %struct.netbox, ptr %18, i64 0, i32 5
  %24 = load i32, ptr %23, align 8, !tbaa !55
  %25 = icmp eq i32 %24, %5
  br i1 %25, label %35, label %26

26:                                               ; preds = %17
  %27 = getelementptr inbounds %struct.netbox, ptr %18, i64 0, i32 1
  %28 = load i32, ptr %27, align 8, !tbaa !64
  %29 = tail call i32 @llvm.smin.i32(i32 %28, i32 %21)
  %30 = tail call i32 @llvm.smax.i32(i32 %28, i32 %19)
  %31 = getelementptr inbounds %struct.netbox, ptr %18, i64 0, i32 2
  %32 = load i32, ptr %31, align 4, !tbaa !65
  %33 = tail call i32 @llvm.smin.i32(i32 %32, i32 %20)
  %34 = tail call i32 @llvm.smax.i32(i32 %32, i32 %22)
  br label %35

35:                                               ; preds = %26, %17
  %36 = phi i32 [ %22, %17 ], [ %34, %26 ]
  %37 = phi i32 [ %21, %17 ], [ %29, %26 ]
  %38 = phi i32 [ %20, %17 ], [ %33, %26 ]
  %39 = phi i32 [ %19, %17 ], [ %30, %26 ]
  %40 = load ptr, ptr %18, align 8, !tbaa !7
  %41 = icmp eq ptr %40, null
  br i1 %41, label %42, label %17, !llvm.loop !319

42:                                               ; preds = %35, %1
  %43 = phi i32 [ 0, %1 ], [ %36, %35 ]
  %44 = phi i32 [ 1000000000, %1 ], [ %37, %35 ]
  %45 = phi i32 [ 1000000000, %1 ], [ %38, %35 ]
  %46 = phi i32 [ 0, %1 ], [ %39, %35 ]
  %47 = load i32, ptr @HorV, align 4, !tbaa !17
  %48 = icmp eq i32 %47, 0
  %49 = load ptr, ptr @lArray, align 8, !tbaa !7
  %50 = load i32, ptr @nPinLocs, align 4, !tbaa !17
  %51 = sext i32 %50 to i64
  br i1 %48, label %227, label %52

52:                                               ; preds = %42
  %53 = getelementptr inbounds %struct.locbox.26, ptr %49, i64 %51, i32 3
  %54 = load i32, ptr %53, align 4, !tbaa !244
  %55 = getelementptr inbounds %struct.locbox.26, ptr %49, i64 1, i32 3
  %56 = load i32, ptr %55, align 4, !tbaa !244
  %57 = icmp sgt i32 %54, %56
  br i1 %57, label %58, label %142

58:                                               ; preds = %52
  %59 = icmp slt i32 %45, %54
  br i1 %59, label %60, label %402

60:                                               ; preds = %58
  %61 = icmp sgt i32 %43, %56
  br i1 %61, label %62, label %402

62:                                               ; preds = %60
  %63 = icmp sgt i32 %43, %54
  %64 = icmp slt i32 %45, %56
  %65 = select i1 %63, i1 true, i1 %64
  br i1 %65, label %89, label %66

66:                                               ; preds = %62
  %67 = add nsw i32 %45, %43
  %68 = sdiv i32 %67, 2
  %69 = icmp slt i32 %50, 2
  br i1 %69, label %402, label %70

70:                                               ; preds = %66
  %71 = sub nsw i32 %68, %56
  %72 = tail call i32 @llvm.abs.i32(i32 %71, i1 true)
  %73 = add nuw i32 %50, 1
  %74 = zext i32 %73 to i64
  br label %75

75:                                               ; preds = %83, %70
  %76 = phi i64 [ 2, %70 ], [ %84, %83 ]
  %77 = phi i32 [ %72, %70 ], [ %81, %83 ]
  %78 = getelementptr inbounds %struct.locbox.26, ptr %49, i64 %76, i32 3
  %79 = load i32, ptr %78, align 4, !tbaa !244
  %80 = sub nsw i32 %68, %79
  %81 = tail call i32 @llvm.abs.i32(i32 %80, i1 true)
  %82 = icmp ult i32 %81, %77
  br i1 %82, label %83, label %86

83:                                               ; preds = %75
  %84 = add nuw nsw i64 %76, 1
  %85 = icmp eq i64 %84, %74
  br i1 %85, label %402, label %75, !llvm.loop !320

86:                                               ; preds = %75
  %.lcssa8 = phi i64 [ %76, %75 ]
  %87 = trunc i64 %.lcssa8 to i32
  %88 = add nsw i32 %87, -1
  br label %402

89:                                               ; preds = %62
  %90 = icmp slt i32 %43, %54
  %91 = icmp sgt i32 %45, %56
  %92 = select i1 %90, i1 true, i1 %91
  br i1 %92, label %96, label %93

93:                                               ; preds = %89
  %94 = add nsw i32 %50, 1
  %95 = sdiv i32 %94, 2
  br label %402

96:                                               ; preds = %89
  %97 = icmp slt i32 %50, 2
  br i1 %91, label %98, label %120

98:                                               ; preds = %96
  br i1 %97, label %116, label %99

99:                                               ; preds = %98
  %100 = sub nsw i32 %45, %56
  %101 = add nuw i32 %50, 1
  %102 = zext i32 %101 to i64
  br label %103

103:                                              ; preds = %111, %99
  %104 = phi i64 [ 2, %99 ], [ %112, %111 ]
  %105 = phi i32 [ %100, %99 ], [ %109, %111 ]
  %106 = getelementptr inbounds %struct.locbox.26, ptr %49, i64 %104, i32 3
  %107 = load i32, ptr %106, align 4, !tbaa !244
  %108 = sub nsw i32 %45, %107
  %109 = tail call i32 @llvm.abs.i32(i32 %108, i1 true)
  %110 = icmp slt i32 %109, %105
  br i1 %110, label %111, label %114

111:                                              ; preds = %103
  %112 = add nuw nsw i64 %104, 1
  %113 = icmp eq i64 %112, %102
  br i1 %113, label %116, label %103, !llvm.loop !321

114:                                              ; preds = %103
  %.lcssa6 = phi i64 [ %104, %103 ]
  %115 = trunc i64 %.lcssa6 to i32
  br label %116

116:                                              ; preds = %114, %111, %98
  %117 = phi i32 [ 2, %98 ], [ %115, %114 ], [ %101, %111 ]
  %118 = add nsw i32 %117, %50
  %119 = sdiv i32 %118, 2
  br label %402

120:                                              ; preds = %96
  br i1 %97, label %139, label %121

121:                                              ; preds = %120
  %122 = sub nsw i32 %43, %56
  %123 = tail call i32 @llvm.abs.i32(i32 %122, i1 true)
  %124 = add nuw i32 %50, 1
  %125 = zext i32 %124 to i64
  br label %126

126:                                              ; preds = %134, %121
  %127 = phi i64 [ 2, %121 ], [ %135, %134 ]
  %128 = phi i32 [ %123, %121 ], [ %132, %134 ]
  %129 = getelementptr inbounds %struct.locbox.26, ptr %49, i64 %127, i32 3
  %130 = load i32, ptr %129, align 4, !tbaa !244
  %131 = sub nsw i32 %43, %130
  %132 = tail call i32 @llvm.abs.i32(i32 %131, i1 true)
  %133 = icmp ult i32 %132, %128
  br i1 %133, label %134, label %137

134:                                              ; preds = %126
  %135 = add nuw nsw i64 %127, 1
  %136 = icmp eq i64 %135, %125
  br i1 %136, label %139, label %126, !llvm.loop !322

137:                                              ; preds = %126
  %.lcssa7 = phi i64 [ %127, %126 ]
  %138 = trunc i64 %.lcssa7 to i32
  br label %139

139:                                              ; preds = %137, %134, %120
  %140 = phi i32 [ 2, %120 ], [ %138, %137 ], [ %124, %134 ]
  %141 = lshr i32 %140, 1
  br label %402

142:                                              ; preds = %52
  %143 = icmp slt i32 %45, %56
  br i1 %143, label %144, label %402

144:                                              ; preds = %142
  %145 = icmp sgt i32 %43, %54
  br i1 %145, label %146, label %402

146:                                              ; preds = %144
  %147 = icmp sgt i32 %43, %56
  %148 = icmp slt i32 %45, %54
  %149 = select i1 %147, i1 true, i1 %148
  br i1 %149, label %173, label %150

150:                                              ; preds = %146
  %151 = add nsw i32 %45, %43
  %152 = sdiv i32 %151, 2
  %153 = icmp slt i32 %50, 2
  br i1 %153, label %402, label %154

154:                                              ; preds = %150
  %155 = sub nsw i32 %152, %56
  %156 = tail call i32 @llvm.abs.i32(i32 %155, i1 true)
  %157 = add nuw i32 %50, 1
  %158 = zext i32 %157 to i64
  br label %159

159:                                              ; preds = %167, %154
  %160 = phi i64 [ 2, %154 ], [ %168, %167 ]
  %161 = phi i32 [ %156, %154 ], [ %165, %167 ]
  %162 = getelementptr inbounds %struct.locbox.26, ptr %49, i64 %160, i32 3
  %163 = load i32, ptr %162, align 4, !tbaa !244
  %164 = sub nsw i32 %152, %163
  %165 = tail call i32 @llvm.abs.i32(i32 %164, i1 true)
  %166 = icmp ult i32 %165, %161
  br i1 %166, label %167, label %170

167:                                              ; preds = %159
  %168 = add nuw nsw i64 %160, 1
  %169 = icmp eq i64 %168, %158
  br i1 %169, label %402, label %159, !llvm.loop !323

170:                                              ; preds = %159
  %.lcssa11 = phi i64 [ %160, %159 ]
  %171 = trunc i64 %.lcssa11 to i32
  %172 = add nsw i32 %171, -1
  br label %402

173:                                              ; preds = %146
  %174 = icmp slt i32 %43, %56
  %175 = icmp sgt i32 %45, %54
  %176 = select i1 %174, i1 true, i1 %175
  br i1 %176, label %180, label %177

177:                                              ; preds = %173
  %178 = add nsw i32 %50, 1
  %179 = sdiv i32 %178, 2
  br label %402

180:                                              ; preds = %173
  %181 = icmp slt i32 %50, 2
  br i1 %175, label %182, label %204

182:                                              ; preds = %180
  br i1 %181, label %201, label %183

183:                                              ; preds = %182
  %184 = sub nsw i32 %45, %56
  %185 = tail call i32 @llvm.abs.i32(i32 %184, i1 true)
  %186 = add nuw i32 %50, 1
  %187 = zext i32 %186 to i64
  br label %188

188:                                              ; preds = %196, %183
  %189 = phi i64 [ 2, %183 ], [ %197, %196 ]
  %190 = phi i32 [ %185, %183 ], [ %194, %196 ]
  %191 = getelementptr inbounds %struct.locbox.26, ptr %49, i64 %189, i32 3
  %192 = load i32, ptr %191, align 4, !tbaa !244
  %193 = sub nsw i32 %45, %192
  %194 = tail call i32 @llvm.abs.i32(i32 %193, i1 true)
  %195 = icmp ult i32 %194, %190
  br i1 %195, label %196, label %199

196:                                              ; preds = %188
  %197 = add nuw nsw i64 %189, 1
  %198 = icmp eq i64 %197, %187
  br i1 %198, label %201, label %188, !llvm.loop !324

199:                                              ; preds = %188
  %.lcssa9 = phi i64 [ %189, %188 ]
  %200 = trunc i64 %.lcssa9 to i32
  br label %201

201:                                              ; preds = %199, %196, %182
  %202 = phi i32 [ 2, %182 ], [ %200, %199 ], [ %186, %196 ]
  %203 = lshr i32 %202, 1
  br label %402

204:                                              ; preds = %180
  br i1 %181, label %223, label %205

205:                                              ; preds = %204
  %206 = sub nsw i32 %43, %56
  %207 = tail call i32 @llvm.abs.i32(i32 %206, i1 true)
  %208 = add nuw i32 %50, 1
  %209 = zext i32 %208 to i64
  br label %210

210:                                              ; preds = %218, %205
  %211 = phi i64 [ 2, %205 ], [ %219, %218 ]
  %212 = phi i32 [ %207, %205 ], [ %216, %218 ]
  %213 = getelementptr inbounds %struct.locbox.26, ptr %49, i64 %211, i32 3
  %214 = load i32, ptr %213, align 4, !tbaa !244
  %215 = sub nsw i32 %43, %214
  %216 = tail call i32 @llvm.abs.i32(i32 %215, i1 true)
  %217 = icmp ult i32 %216, %212
  br i1 %217, label %218, label %221

218:                                              ; preds = %210
  %219 = add nuw nsw i64 %211, 1
  %220 = icmp eq i64 %219, %209
  br i1 %220, label %223, label %210, !llvm.loop !325

221:                                              ; preds = %210
  %.lcssa10 = phi i64 [ %211, %210 ]
  %222 = trunc i64 %.lcssa10 to i32
  br label %223

223:                                              ; preds = %221, %218, %204
  %224 = phi i32 [ 2, %204 ], [ %222, %221 ], [ %208, %218 ]
  %225 = add nsw i32 %224, %50
  %226 = sdiv i32 %225, 2
  br label %402

227:                                              ; preds = %42
  %228 = getelementptr inbounds %struct.locbox.26, ptr %49, i64 %51, i32 2
  %229 = load i32, ptr %228, align 4, !tbaa !241
  %230 = getelementptr inbounds %struct.locbox.26, ptr %49, i64 1, i32 2
  %231 = load i32, ptr %230, align 4, !tbaa !241
  %232 = icmp sgt i32 %229, %231
  br i1 %232, label %233, label %317

233:                                              ; preds = %227
  %234 = icmp slt i32 %44, %229
  br i1 %234, label %235, label %402

235:                                              ; preds = %233
  %236 = icmp sgt i32 %46, %231
  br i1 %236, label %237, label %402

237:                                              ; preds = %235
  %238 = icmp sgt i32 %46, %229
  %239 = icmp slt i32 %44, %231
  %240 = select i1 %238, i1 true, i1 %239
  br i1 %240, label %264, label %241

241:                                              ; preds = %237
  %242 = add nsw i32 %46, %44
  %243 = sdiv i32 %242, 2
  %244 = icmp slt i32 %50, 2
  br i1 %244, label %402, label %245

245:                                              ; preds = %241
  %246 = sub nsw i32 %243, %231
  %247 = tail call i32 @llvm.abs.i32(i32 %246, i1 true)
  %248 = add nuw i32 %50, 1
  %249 = zext i32 %248 to i64
  br label %250

250:                                              ; preds = %258, %245
  %251 = phi i64 [ 2, %245 ], [ %259, %258 ]
  %252 = phi i32 [ %247, %245 ], [ %256, %258 ]
  %253 = getelementptr inbounds %struct.locbox.26, ptr %49, i64 %251, i32 2
  %254 = load i32, ptr %253, align 4, !tbaa !241
  %255 = sub nsw i32 %243, %254
  %256 = tail call i32 @llvm.abs.i32(i32 %255, i1 true)
  %257 = icmp ult i32 %256, %252
  br i1 %257, label %258, label %261

258:                                              ; preds = %250
  %259 = add nuw nsw i64 %251, 1
  %260 = icmp eq i64 %259, %249
  br i1 %260, label %402, label %250, !llvm.loop !326

261:                                              ; preds = %250
  %.lcssa2 = phi i64 [ %251, %250 ]
  %262 = trunc i64 %.lcssa2 to i32
  %263 = add nsw i32 %262, -1
  br label %402

264:                                              ; preds = %237
  %265 = icmp slt i32 %46, %229
  %266 = icmp sgt i32 %44, %231
  %267 = select i1 %265, i1 true, i1 %266
  br i1 %267, label %271, label %268

268:                                              ; preds = %264
  %269 = add nsw i32 %50, 1
  %270 = sdiv i32 %269, 2
  br label %402

271:                                              ; preds = %264
  %272 = icmp slt i32 %50, 2
  br i1 %266, label %273, label %295

273:                                              ; preds = %271
  br i1 %272, label %291, label %274

274:                                              ; preds = %273
  %275 = sub nsw i32 %44, %231
  %276 = add nuw i32 %50, 1
  %277 = zext i32 %276 to i64
  br label %278

278:                                              ; preds = %286, %274
  %279 = phi i64 [ 2, %274 ], [ %287, %286 ]
  %280 = phi i32 [ %275, %274 ], [ %284, %286 ]
  %281 = getelementptr inbounds %struct.locbox.26, ptr %49, i64 %279, i32 2
  %282 = load i32, ptr %281, align 4, !tbaa !241
  %283 = sub nsw i32 %44, %282
  %284 = tail call i32 @llvm.abs.i32(i32 %283, i1 true)
  %285 = icmp slt i32 %284, %280
  br i1 %285, label %286, label %289

286:                                              ; preds = %278
  %287 = add nuw nsw i64 %279, 1
  %288 = icmp eq i64 %287, %277
  br i1 %288, label %291, label %278, !llvm.loop !327

289:                                              ; preds = %278
  %.lcssa = phi i64 [ %279, %278 ]
  %290 = trunc i64 %.lcssa to i32
  br label %291

291:                                              ; preds = %289, %286, %273
  %292 = phi i32 [ 2, %273 ], [ %290, %289 ], [ %276, %286 ]
  %293 = add nsw i32 %292, %50
  %294 = sdiv i32 %293, 2
  br label %402

295:                                              ; preds = %271
  br i1 %272, label %314, label %296

296:                                              ; preds = %295
  %297 = sub nsw i32 %46, %231
  %298 = tail call i32 @llvm.abs.i32(i32 %297, i1 true)
  %299 = add nuw i32 %50, 1
  %300 = zext i32 %299 to i64
  br label %301

301:                                              ; preds = %309, %296
  %302 = phi i64 [ 2, %296 ], [ %310, %309 ]
  %303 = phi i32 [ %298, %296 ], [ %307, %309 ]
  %304 = getelementptr inbounds %struct.locbox.26, ptr %49, i64 %302, i32 2
  %305 = load i32, ptr %304, align 4, !tbaa !241
  %306 = sub nsw i32 %46, %305
  %307 = tail call i32 @llvm.abs.i32(i32 %306, i1 true)
  %308 = icmp ult i32 %307, %303
  br i1 %308, label %309, label %312

309:                                              ; preds = %301
  %310 = add nuw nsw i64 %302, 1
  %311 = icmp eq i64 %310, %300
  br i1 %311, label %314, label %301, !llvm.loop !328

312:                                              ; preds = %301
  %.lcssa1 = phi i64 [ %302, %301 ]
  %313 = trunc i64 %.lcssa1 to i32
  br label %314

314:                                              ; preds = %312, %309, %295
  %315 = phi i32 [ 2, %295 ], [ %313, %312 ], [ %299, %309 ]
  %316 = lshr i32 %315, 1
  br label %402

317:                                              ; preds = %227
  %318 = icmp slt i32 %44, %231
  br i1 %318, label %319, label %402

319:                                              ; preds = %317
  %320 = icmp sgt i32 %46, %229
  br i1 %320, label %321, label %402

321:                                              ; preds = %319
  %322 = icmp sgt i32 %46, %231
  %323 = icmp slt i32 %44, %229
  %324 = select i1 %322, i1 true, i1 %323
  br i1 %324, label %348, label %325

325:                                              ; preds = %321
  %326 = add nsw i32 %46, %44
  %327 = sdiv i32 %326, 2
  %328 = icmp slt i32 %50, 2
  br i1 %328, label %402, label %329

329:                                              ; preds = %325
  %330 = sub nsw i32 %327, %231
  %331 = tail call i32 @llvm.abs.i32(i32 %330, i1 true)
  %332 = add nuw i32 %50, 1
  %333 = zext i32 %332 to i64
  br label %334

334:                                              ; preds = %342, %329
  %335 = phi i64 [ 2, %329 ], [ %343, %342 ]
  %336 = phi i32 [ %331, %329 ], [ %340, %342 ]
  %337 = getelementptr inbounds %struct.locbox.26, ptr %49, i64 %335, i32 2
  %338 = load i32, ptr %337, align 4, !tbaa !241
  %339 = sub nsw i32 %327, %338
  %340 = tail call i32 @llvm.abs.i32(i32 %339, i1 true)
  %341 = icmp ult i32 %340, %336
  br i1 %341, label %342, label %345

342:                                              ; preds = %334
  %343 = add nuw nsw i64 %335, 1
  %344 = icmp eq i64 %343, %333
  br i1 %344, label %402, label %334, !llvm.loop !329

345:                                              ; preds = %334
  %.lcssa5 = phi i64 [ %335, %334 ]
  %346 = trunc i64 %.lcssa5 to i32
  %347 = add nsw i32 %346, -1
  br label %402

348:                                              ; preds = %321
  %349 = icmp slt i32 %46, %231
  %350 = icmp sgt i32 %44, %229
  %351 = select i1 %349, i1 true, i1 %350
  br i1 %351, label %355, label %352

352:                                              ; preds = %348
  %353 = add nsw i32 %50, 1
  %354 = sdiv i32 %353, 2
  br label %402

355:                                              ; preds = %348
  %356 = icmp slt i32 %50, 2
  br i1 %350, label %357, label %379

357:                                              ; preds = %355
  br i1 %356, label %376, label %358

358:                                              ; preds = %357
  %359 = sub nsw i32 %44, %231
  %360 = tail call i32 @llvm.abs.i32(i32 %359, i1 true)
  %361 = add nuw i32 %50, 1
  %362 = zext i32 %361 to i64
  br label %363

363:                                              ; preds = %371, %358
  %364 = phi i64 [ 2, %358 ], [ %372, %371 ]
  %365 = phi i32 [ %360, %358 ], [ %369, %371 ]
  %366 = getelementptr inbounds %struct.locbox.26, ptr %49, i64 %364, i32 2
  %367 = load i32, ptr %366, align 4, !tbaa !241
  %368 = sub nsw i32 %44, %367
  %369 = tail call i32 @llvm.abs.i32(i32 %368, i1 true)
  %370 = icmp ult i32 %369, %365
  br i1 %370, label %371, label %374

371:                                              ; preds = %363
  %372 = add nuw nsw i64 %364, 1
  %373 = icmp eq i64 %372, %362
  br i1 %373, label %376, label %363, !llvm.loop !330

374:                                              ; preds = %363
  %.lcssa3 = phi i64 [ %364, %363 ]
  %375 = trunc i64 %.lcssa3 to i32
  br label %376

376:                                              ; preds = %374, %371, %357
  %377 = phi i32 [ 2, %357 ], [ %375, %374 ], [ %361, %371 ]
  %378 = lshr i32 %377, 1
  br label %402

379:                                              ; preds = %355
  br i1 %356, label %398, label %380

380:                                              ; preds = %379
  %381 = sub nsw i32 %46, %231
  %382 = tail call i32 @llvm.abs.i32(i32 %381, i1 true)
  %383 = add nuw i32 %50, 1
  %384 = zext i32 %383 to i64
  br label %385

385:                                              ; preds = %393, %380
  %386 = phi i64 [ 2, %380 ], [ %394, %393 ]
  %387 = phi i32 [ %382, %380 ], [ %391, %393 ]
  %388 = getelementptr inbounds %struct.locbox.26, ptr %49, i64 %386, i32 2
  %389 = load i32, ptr %388, align 4, !tbaa !241
  %390 = sub nsw i32 %46, %389
  %391 = tail call i32 @llvm.abs.i32(i32 %390, i1 true)
  %392 = icmp ult i32 %391, %387
  br i1 %392, label %393, label %396

393:                                              ; preds = %385
  %394 = add nuw nsw i64 %386, 1
  %395 = icmp eq i64 %394, %384
  br i1 %395, label %398, label %385, !llvm.loop !331

396:                                              ; preds = %385
  %.lcssa4 = phi i64 [ %386, %385 ]
  %397 = trunc i64 %.lcssa4 to i32
  br label %398

398:                                              ; preds = %396, %393, %379
  %399 = phi i32 [ 2, %379 ], [ %397, %396 ], [ %383, %393 ]
  %400 = add nsw i32 %399, %50
  %401 = sdiv i32 %400, 2
  br label %402

402:                                              ; preds = %398, %376, %352, %345, %342, %325, %319, %317, %314, %291, %268, %261, %258, %241, %235, %233, %223, %201, %177, %170, %167, %150, %144, %142, %139, %116, %93, %86, %83, %66, %60, %58
  %403 = phi i32 [ %95, %93 ], [ %119, %116 ], [ %141, %139 ], [ %179, %177 ], [ %203, %201 ], [ %226, %223 ], [ %270, %268 ], [ %294, %291 ], [ %316, %314 ], [ %354, %352 ], [ %378, %376 ], [ %401, %398 ], [ %50, %58 ], [ 1, %60 ], [ 1, %142 ], [ %50, %144 ], [ %50, %233 ], [ 1, %235 ], [ 1, %317 ], [ %50, %319 ], [ 1, %66 ], [ %88, %86 ], [ 1, %150 ], [ %172, %170 ], [ 1, %241 ], [ %263, %261 ], [ 1, %325 ], [ %347, %345 ], [ %50, %258 ], [ %50, %342 ], [ %50, %83 ], [ %50, %167 ]
  ret i32 %403
}

; Function Attrs: nounwind optsize uwtable
define internal void @findnodes() #0 {
  store i32 0, ptr @numRects, align 4, !tbaa !17
  %1 = tail call noalias dereferenceable_or_null(5200) ptr @malloc(i64 noundef 5200) #45
  store ptr %1, ptr @rectArray, align 8, !tbaa !7
  %2 = load ptr, ptr @Hlist, align 8, !tbaa !7
  %3 = icmp eq ptr %2, null
  br i1 %3, label %540, label %4

4:                                                ; preds = %534, %0
  %5 = phi ptr [ %538, %534 ], [ %2, %0 ]
  %6 = phi i32 [ %536, %534 ], [ undef, %0 ]
  %7 = phi i32 [ %535, %534 ], [ undef, %0 ]
  %8 = load i32, ptr %5, align 8, !tbaa !138
  %9 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %10 = sext i32 %8 to i64
  %11 = getelementptr inbounds %struct.edgebox, ptr %9, i64 %10, i32 5
  %12 = load i32, ptr %11, align 4, !tbaa !142
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %534, label %14

14:                                               ; preds = %4
  %15 = getelementptr inbounds %struct.edgebox, ptr %9, i64 %10, i32 1
  %16 = load i32, ptr %15, align 4, !tbaa !143
  %17 = getelementptr inbounds %struct.edgebox, ptr %9, i64 %10, i32 2
  %18 = load i32, ptr %17, align 4, !tbaa !144
  %19 = getelementptr inbounds %struct.edgebox, ptr %9, i64 %10, i32 3
  %20 = load i32, ptr %19, align 4, !tbaa !140
  %21 = load ptr, ptr @Vptrs, align 8, !tbaa !7
  %22 = load ptr, ptr @Vroot, align 8, !tbaa !7
  %23 = tail call i32 @tprop(ptr noundef %22, i32 noundef %16) #44
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds ptr, ptr %21, i64 %24
  %26 = load ptr, ptr %25, align 8, !tbaa !7
  %27 = icmp eq ptr %26, null
  br i1 %27, label %534, label %28

28:                                               ; preds = %527, %14
  %29 = phi ptr [ %532, %527 ], [ %26, %14 ]
  %30 = phi i32 [ %530, %527 ], [ %6, %14 ]
  %31 = phi i32 [ %529, %527 ], [ %7, %14 ]
  %32 = phi i32 [ %528, %527 ], [ -100000, %14 ]
  %33 = load i32, ptr %29, align 8, !tbaa !138
  %34 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %35 = sext i32 %33 to i64
  %36 = getelementptr inbounds %struct.edgebox, ptr %34, i64 %35, i32 5
  %37 = load i32, ptr %36, align 4, !tbaa !142
  %38 = icmp sgt i32 %37, 0
  br i1 %38, label %527, label %39

39:                                               ; preds = %28
  %40 = getelementptr inbounds %struct.edgebox, ptr %34, i64 %35, i32 3
  %41 = load i32, ptr %40, align 4, !tbaa !140
  %42 = icmp sgt i32 %41, %18
  br i1 %42, label %534, label %43

43:                                               ; preds = %39
  %44 = icmp slt i32 %41, %32
  br i1 %44, label %527, label %45

45:                                               ; preds = %43
  %46 = getelementptr inbounds %struct.edgebox, ptr %34, i64 %35, i32 1
  %47 = load i32, ptr %46, align 4, !tbaa !143
  %48 = getelementptr inbounds %struct.edgebox, ptr %34, i64 %35, i32 2
  %49 = load i32, ptr %48, align 4, !tbaa !144
  %50 = icmp sgt i32 %47, %20
  %51 = icmp slt i32 %49, %20
  %52 = select i1 %50, i1 true, i1 %51
  br i1 %52, label %527, label %53

53:                                               ; preds = %45
  %54 = getelementptr inbounds %struct.edgebox, ptr %34, i64 %10, i32 6
  %55 = load i32, ptr %54, align 4, !tbaa !147
  %56 = icmp eq i32 %55, 0
  %57 = getelementptr inbounds %struct.edgebox, ptr %34, i64 %35, i32 6
  %58 = load i32, ptr %57, align 4, !tbaa !147
  br i1 %56, label %59, label %62

59:                                               ; preds = %53
  switch i32 %58, label %527 [
    i32 0, label %66
    i32 1, label %60
  ]

60:                                               ; preds = %59
  %61 = icmp eq i32 %41, %16
  br i1 %61, label %66, label %527

62:                                               ; preds = %53
  %63 = icmp eq i32 %58, 1
  %64 = icmp eq i32 %49, %20
  %65 = select i1 %63, i1 %64, i1 false
  br i1 %65, label %527, label %66

66:                                               ; preds = %62, %60, %59
  %67 = load ptr, ptr @Vptrs, align 8, !tbaa !7
  %68 = load ptr, ptr @Vroot, align 8, !tbaa !7
  %69 = tail call i32 @tprop(ptr noundef %68, i32 noundef %16) #44
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds ptr, ptr %67, i64 %70
  %72 = load ptr, ptr %71, align 8, !tbaa !7
  %73 = icmp eq ptr %72, null
  br i1 %73, label %527, label %74

74:                                               ; preds = %66
  %75 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %76 = getelementptr inbounds %struct.edgebox, ptr %75, i64 %10, i32 6
  br label %77

77:                                               ; preds = %522, %74
  %78 = phi ptr [ %72, %74 ], [ %525, %522 ]
  %79 = phi i32 [ %32, %74 ], [ %523, %522 ]
  %80 = load i32, ptr %78, align 8, !tbaa !138
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds %struct.edgebox, ptr %75, i64 %81, i32 5
  %83 = load i32, ptr %82, align 4, !tbaa !142
  %84 = icmp slt i32 %83, 0
  br i1 %84, label %522, label %85

85:                                               ; preds = %77
  %86 = getelementptr inbounds %struct.edgebox, ptr %75, i64 %81, i32 3
  %87 = load i32, ptr %86, align 4, !tbaa !140
  %88 = icmp slt i32 %87, %41
  br i1 %88, label %522, label %89

89:                                               ; preds = %85
  %90 = getelementptr inbounds %struct.edgebox, ptr %75, i64 %81, i32 1
  %91 = load i32, ptr %90, align 4, !tbaa !143
  %92 = getelementptr inbounds %struct.edgebox, ptr %75, i64 %81, i32 2
  %93 = load i32, ptr %92, align 4, !tbaa !144
  %94 = icmp sgt i32 %91, %20
  %95 = icmp slt i32 %93, %20
  %96 = select i1 %94, i1 true, i1 %95
  br i1 %96, label %522, label %97

97:                                               ; preds = %89
  %98 = load i32, ptr %76, align 4, !tbaa !147
  %99 = icmp eq i32 %98, 0
  %100 = getelementptr inbounds %struct.edgebox, ptr %75, i64 %81, i32 6
  %101 = load i32, ptr %100, align 4, !tbaa !147
  br i1 %99, label %102, label %105

102:                                              ; preds = %97
  switch i32 %101, label %522 [
    i32 0, label %109
    i32 1, label %103
  ]

103:                                              ; preds = %102
  %104 = icmp eq i32 %87, %18
  br i1 %104, label %109, label %522

105:                                              ; preds = %97
  %106 = icmp eq i32 %101, 1
  %107 = icmp eq i32 %93, %20
  %108 = select i1 %106, i1 %107, i1 false
  br i1 %108, label %522, label %109

109:                                              ; preds = %105, %103, %102
  %.lcssa = phi i32 [ %93, %105 ], [ %93, %103 ], [ %93, %102 ]
  %110 = phi i32 [ %87, %102 ], [ %87, %105 ], [ %18, %103 ]
  %111 = load ptr, ptr @Hptrs, align 8, !tbaa !7
  %112 = load ptr, ptr @Hroot, align 8, !tbaa !7
  %113 = tail call i32 @tprop(ptr noundef %112, i32 noundef %20) #44
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds ptr, ptr %111, i64 %114
  %116 = load ptr, ptr %115, align 8, !tbaa !7
  %117 = icmp eq ptr %116, null
  br i1 %117, label %527, label %118

118:                                              ; preds = %109
  %119 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %120 = icmp eq i32 %110, %41
  br label %121

121:                                              ; preds = %294, %118
  %122 = phi ptr [ %116, %118 ], [ %299, %294 ]
  %123 = phi i32 [ 0, %118 ], [ %297, %294 ]
  %124 = phi i32 [ %30, %118 ], [ %296, %294 ]
  %125 = phi i32 [ %31, %118 ], [ %295, %294 ]
  %126 = load i32, ptr %122, align 8, !tbaa !138
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds %struct.edgebox, ptr %119, i64 %127, i32 5
  %129 = load i32, ptr %128, align 4, !tbaa !142
  %130 = icmp sgt i32 %129, 0
  br i1 %130, label %294, label %131

131:                                              ; preds = %121
  %132 = getelementptr inbounds %struct.edgebox, ptr %119, i64 %127, i32 3
  %133 = load i32, ptr %132, align 4, !tbaa !140
  %134 = icmp slt i32 %133, %20
  br i1 %134, label %294, label %135

135:                                              ; preds = %131
  %136 = getelementptr inbounds %struct.edgebox, ptr %119, i64 %127, i32 1
  %137 = load i32, ptr %136, align 4, !tbaa !143
  %138 = getelementptr inbounds %struct.edgebox, ptr %119, i64 %127, i32 2
  %139 = load i32, ptr %138, align 4, !tbaa !144
  %140 = icmp sgt i32 %137, %110
  %141 = icmp slt i32 %139, %41
  %142 = select i1 %140, i1 true, i1 %141
  br i1 %142, label %294, label %143

143:                                              ; preds = %135
  br i1 %120, label %144, label %178

144:                                              ; preds = %143
  %145 = icmp slt i32 %137, %41
  br i1 %145, label %161, label %146

146:                                              ; preds = %144
  %147 = icmp eq i32 %137, %41
  br i1 %147, label %148, label %294

148:                                              ; preds = %146
  %149 = getelementptr inbounds %struct.edgebox, ptr %119, i64 %127, i32 6
  %150 = load i32, ptr %149, align 4, !tbaa !147
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %161, label %152

152:                                              ; preds = %148
  %153 = icmp slt i32 %129, 0
  br i1 %153, label %154, label %294

154:                                              ; preds = %152
  %155 = getelementptr inbounds %struct.edgebox, ptr %119, i64 %127, i32 8
  %156 = load i32, ptr %155, align 4, !tbaa !332
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds %struct.edgebox, ptr %119, i64 %157, i32 5
  %159 = load i32, ptr %158, align 4, !tbaa !142
  %160 = icmp slt i32 %159, 0
  br i1 %160, label %161, label %294

161:                                              ; preds = %154, %148, %144
  %162 = icmp sgt i32 %139, %41
  br i1 %162, label %301, label %163

163:                                              ; preds = %161
  %164 = icmp eq i32 %139, %41
  br i1 %164, label %165, label %294

165:                                              ; preds = %163
  %166 = getelementptr inbounds %struct.edgebox, ptr %119, i64 %127, i32 6
  %167 = load i32, ptr %166, align 4, !tbaa !147
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %301, label %169

169:                                              ; preds = %165
  %170 = icmp slt i32 %129, 0
  br i1 %170, label %171, label %294

171:                                              ; preds = %169
  %172 = getelementptr inbounds %struct.edgebox, ptr %119, i64 %127, i32 7
  %173 = load i32, ptr %172, align 4, !tbaa !333
  %174 = sext i32 %173 to i64
  %175 = getelementptr inbounds %struct.edgebox, ptr %119, i64 %174, i32 5
  %176 = load i32, ptr %175, align 4, !tbaa !142
  %177 = icmp sgt i32 %176, 0
  br i1 %177, label %301, label %294

178:                                              ; preds = %143
  %179 = icmp eq i32 %123, 0
  br i1 %179, label %180, label %230

180:                                              ; preds = %178
  %181 = icmp slt i32 %137, %41
  br i1 %181, label %197, label %182

182:                                              ; preds = %180
  %183 = icmp eq i32 %137, %41
  br i1 %183, label %184, label %232

184:                                              ; preds = %182
  %185 = getelementptr inbounds %struct.edgebox, ptr %119, i64 %127, i32 6
  %186 = load i32, ptr %185, align 4, !tbaa !147
  %187 = icmp eq i32 %186, 0
  br i1 %187, label %197, label %188

188:                                              ; preds = %184
  %189 = icmp slt i32 %129, 0
  br i1 %189, label %190, label %232

190:                                              ; preds = %188
  %191 = getelementptr inbounds %struct.edgebox, ptr %119, i64 %127, i32 8
  %192 = load i32, ptr %191, align 4, !tbaa !332
  %193 = sext i32 %192 to i64
  %194 = getelementptr inbounds %struct.edgebox, ptr %119, i64 %193, i32 5
  %195 = load i32, ptr %194, align 4, !tbaa !142
  %196 = icmp slt i32 %195, 0
  br i1 %196, label %197, label %232

197:                                              ; preds = %190, %184, %180
  %198 = icmp sgt i32 %139, %41
  br i1 %198, label %205, label %199

199:                                              ; preds = %197
  %200 = icmp eq i32 %139, %41
  br i1 %200, label %201, label %232

201:                                              ; preds = %199
  %202 = getelementptr inbounds %struct.edgebox, ptr %119, i64 %127, i32 6
  %203 = load i32, ptr %202, align 4, !tbaa !147
  %204 = icmp eq i32 %203, 0
  br i1 %204, label %205, label %232

205:                                              ; preds = %201, %197
  %206 = icmp slt i32 %137, %110
  br i1 %206, label %213, label %207

207:                                              ; preds = %205
  %208 = icmp eq i32 %137, %110
  br i1 %208, label %209, label %232

209:                                              ; preds = %207
  %210 = getelementptr inbounds %struct.edgebox, ptr %119, i64 %127, i32 6
  %211 = load i32, ptr %210, align 4, !tbaa !147
  %212 = icmp eq i32 %211, 0
  br i1 %212, label %213, label %232

213:                                              ; preds = %209, %205
  %214 = icmp sgt i32 %139, %110
  br i1 %214, label %301, label %215

215:                                              ; preds = %213
  %216 = icmp eq i32 %139, %110
  br i1 %216, label %217, label %232

217:                                              ; preds = %215
  %218 = getelementptr inbounds %struct.edgebox, ptr %119, i64 %127, i32 6
  %219 = load i32, ptr %218, align 4, !tbaa !147
  %220 = icmp eq i32 %219, 0
  br i1 %220, label %301, label %221

221:                                              ; preds = %217
  %222 = icmp slt i32 %129, 0
  br i1 %222, label %223, label %232

223:                                              ; preds = %221
  %224 = getelementptr inbounds %struct.edgebox, ptr %119, i64 %127, i32 7
  %225 = load i32, ptr %224, align 4, !tbaa !333
  %226 = sext i32 %225 to i64
  %227 = getelementptr inbounds %struct.edgebox, ptr %119, i64 %226, i32 5
  %228 = load i32, ptr %227, align 4, !tbaa !142
  %229 = icmp sgt i32 %228, 0
  br i1 %229, label %301, label %232

230:                                              ; preds = %178
  %231 = icmp eq i32 %123, 1
  br i1 %231, label %232, label %259

232:                                              ; preds = %230, %223, %221, %215, %209, %207, %201, %199, %190, %188, %182
  %233 = phi i32 [ 1, %230 ], [ 0, %223 ], [ 0, %221 ], [ 0, %215 ], [ 0, %209 ], [ 0, %207 ], [ 0, %201 ], [ 0, %199 ], [ 0, %190 ], [ 0, %188 ], [ 0, %182 ]
  %234 = icmp slt i32 %137, %110
  br i1 %234, label %241, label %235

235:                                              ; preds = %232
  %236 = icmp eq i32 %137, %110
  br i1 %236, label %237, label %259

237:                                              ; preds = %235
  %238 = getelementptr inbounds %struct.edgebox, ptr %119, i64 %127, i32 6
  %239 = load i32, ptr %238, align 4, !tbaa !147
  %240 = icmp eq i32 %239, 0
  br i1 %240, label %241, label %259

241:                                              ; preds = %237, %232
  %242 = icmp sgt i32 %139, %110
  br i1 %242, label %258, label %243

243:                                              ; preds = %241
  %244 = icmp eq i32 %139, %110
  br i1 %244, label %245, label %259

245:                                              ; preds = %243
  %246 = getelementptr inbounds %struct.edgebox, ptr %119, i64 %127, i32 6
  %247 = load i32, ptr %246, align 4, !tbaa !147
  %248 = icmp eq i32 %247, 0
  br i1 %248, label %258, label %249

249:                                              ; preds = %245
  %250 = icmp slt i32 %129, 0
  br i1 %250, label %251, label %259

251:                                              ; preds = %249
  %252 = getelementptr inbounds %struct.edgebox, ptr %119, i64 %127, i32 7
  %253 = load i32, ptr %252, align 4, !tbaa !333
  %254 = sext i32 %253 to i64
  %255 = getelementptr inbounds %struct.edgebox, ptr %119, i64 %254, i32 5
  %256 = load i32, ptr %255, align 4, !tbaa !142
  %257 = icmp sgt i32 %256, 0
  br i1 %257, label %258, label %259

258:                                              ; preds = %251, %245, %241
  br i1 %179, label %262, label %301

259:                                              ; preds = %251, %249, %243, %237, %235, %230
  %260 = phi i32 [ %233, %251 ], [ %233, %249 ], [ %233, %243 ], [ %233, %237 ], [ %233, %235 ], [ %123, %230 ]
  %261 = icmp eq i32 %260, 2
  switch i32 %260, label %294 [
    i32 2, label %262
    i32 0, label %262
  ]

262:                                              ; preds = %259, %259, %258
  %263 = phi i1 [ %261, %259 ], [ %261, %259 ], [ true, %258 ]
  %264 = phi i32 [ %260, %259 ], [ %260, %259 ], [ 2, %258 ]
  %265 = phi i32 [ %125, %259 ], [ %125, %259 ], [ %126, %258 ]
  %266 = icmp slt i32 %137, %41
  br i1 %266, label %282, label %267

267:                                              ; preds = %262
  %268 = icmp eq i32 %137, %41
  br i1 %268, label %269, label %294

269:                                              ; preds = %267
  %270 = getelementptr inbounds %struct.edgebox, ptr %119, i64 %127, i32 6
  %271 = load i32, ptr %270, align 4, !tbaa !147
  %272 = icmp eq i32 %271, 0
  br i1 %272, label %282, label %273

273:                                              ; preds = %269
  %274 = icmp slt i32 %129, 0
  br i1 %274, label %275, label %294

275:                                              ; preds = %273
  %276 = getelementptr inbounds %struct.edgebox, ptr %119, i64 %127, i32 8
  %277 = load i32, ptr %276, align 4, !tbaa !332
  %278 = sext i32 %277 to i64
  %279 = getelementptr inbounds %struct.edgebox, ptr %119, i64 %278, i32 5
  %280 = load i32, ptr %279, align 4, !tbaa !142
  %281 = icmp slt i32 %280, 0
  br i1 %281, label %282, label %294

282:                                              ; preds = %275, %269, %262
  %283 = icmp sgt i32 %139, %41
  br i1 %283, label %293, label %284

284:                                              ; preds = %282
  %285 = icmp eq i32 %139, %41
  br i1 %285, label %286, label %294

286:                                              ; preds = %284
  %287 = getelementptr inbounds %struct.edgebox, ptr %119, i64 %127, i32 6
  %288 = load i32, ptr %287, align 4, !tbaa !147
  %289 = icmp eq i32 %288, 0
  %290 = and i1 %289, %263
  %291 = select i1 %289, i32 %126, i32 %124
  %292 = select i1 %289, i32 1, i32 %264
  br i1 %290, label %301, label %294

293:                                              ; preds = %282
  br i1 %263, label %301, label %294

294:                                              ; preds = %293, %286, %284, %275, %273, %267, %259, %171, %169, %163, %154, %152, %146, %135, %131, %121
  %295 = phi i32 [ %125, %121 ], [ %125, %135 ], [ %125, %131 ], [ %265, %286 ], [ %265, %284 ], [ %265, %275 ], [ %265, %273 ], [ %265, %267 ], [ %265, %293 ], [ %125, %259 ], [ %125, %146 ], [ %125, %152 ], [ %125, %154 ], [ %125, %163 ], [ %125, %169 ], [ %125, %171 ]
  %296 = phi i32 [ %124, %121 ], [ %124, %135 ], [ %124, %131 ], [ %291, %286 ], [ %124, %284 ], [ %124, %275 ], [ %124, %273 ], [ %124, %267 ], [ %126, %293 ], [ %124, %259 ], [ %124, %146 ], [ %124, %152 ], [ %124, %154 ], [ %124, %163 ], [ %124, %169 ], [ %124, %171 ]
  %297 = phi i32 [ %123, %121 ], [ %123, %135 ], [ %123, %131 ], [ %292, %286 ], [ %264, %284 ], [ %264, %275 ], [ %264, %273 ], [ %264, %267 ], [ 1, %293 ], [ %260, %259 ], [ %123, %146 ], [ %123, %152 ], [ %123, %154 ], [ %123, %163 ], [ %123, %169 ], [ %123, %171 ]
  %298 = getelementptr inbounds %struct.dlink2, ptr %122, i64 0, i32 2
  %299 = load ptr, ptr %298, align 8, !tbaa !7
  %300 = icmp eq ptr %299, null
  br i1 %300, label %527, label %121, !llvm.loop !334

301:                                              ; preds = %293, %286, %258, %223, %217, %213, %171, %165, %161
  %.lcssa1 = phi i32 [ %133, %293 ], [ %133, %286 ], [ %133, %258 ], [ %133, %223 ], [ %133, %217 ], [ %133, %213 ], [ %133, %171 ], [ %133, %165 ], [ %133, %161 ]
  %302 = phi i32 [ %126, %293 ], [ %124, %258 ], [ %126, %223 ], [ %126, %217 ], [ %126, %213 ], [ %126, %161 ], [ %126, %165 ], [ %126, %171 ], [ %126, %286 ]
  %303 = phi i32 [ %265, %293 ], [ %126, %258 ], [ %126, %223 ], [ %126, %217 ], [ %126, %213 ], [ %126, %161 ], [ %126, %165 ], [ %126, %171 ], [ %265, %286 ]
  %304 = sext i32 %302 to i64
  %305 = getelementptr inbounds %struct.edgebox, ptr %119, i64 %304, i32 3
  %306 = load i32, ptr %305, align 4, !tbaa !140
  %307 = sext i32 %303 to i64
  %308 = getelementptr inbounds %struct.edgebox, ptr %119, i64 %307, i32 3
  %309 = load i32, ptr %308, align 4, !tbaa !140
  %310 = icmp slt i32 %306, %309
  %311 = icmp sgt i32 %306, %309
  %312 = select i1 %311, i64 %304, i64 %307
  %313 = select i1 %310, i64 %307, i64 %312
  %314 = getelementptr inbounds %struct.edgebox, ptr %119, i64 %313, i32 2
  %315 = load i32, ptr %314, align 4, !tbaa !144
  %316 = icmp sgt i32 %49, %.lcssa1
  br i1 %316, label %389, label %317

317:                                              ; preds = %301
  %318 = getelementptr inbounds %struct.edgebox, ptr %119, i64 %307, i32 1
  %319 = getelementptr inbounds %struct.edgebox, ptr %119, i64 %304, i32 1
  %320 = select i1 %310, ptr %318, ptr %319
  %321 = load i32, ptr %320, align 4, !tbaa !143
  %322 = icmp slt i32 %321, %41
  br i1 %322, label %323, label %389

323:                                              ; preds = %317
  %324 = getelementptr inbounds %struct.edgebox, ptr %119, i64 %304, i32 6
  %325 = load i32, ptr %324, align 4, !tbaa !147
  %326 = load ptr, ptr @Vptrs, align 8, !tbaa !7
  %327 = load ptr, ptr @Vroot, align 8, !tbaa !7
  %328 = tail call i32 @tprop(ptr noundef %327, i32 noundef %41) #44
  %329 = sext i32 %328 to i64
  %330 = getelementptr inbounds ptr, ptr %326, i64 %329
  %331 = load ptr, ptr %330, align 8, !tbaa !7
  %332 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %333 = load i32, ptr %331, align 8, !tbaa !138
  %334 = sext i32 %333 to i64
  %335 = getelementptr inbounds %struct.edgebox, ptr %332, i64 %334, i32 3
  %336 = load i32, ptr %335, align 4, !tbaa !140
  br label %337

337:                                              ; preds = %342, %323
  %338 = phi ptr [ %331, %323 ], [ %340, %342 ]
  %339 = getelementptr inbounds %struct.dlink2, ptr %338, i64 0, i32 2
  %340 = load ptr, ptr %339, align 8, !tbaa !150
  %341 = icmp eq ptr %340, null
  br i1 %341, label %348, label %342

342:                                              ; preds = %337
  %343 = load i32, ptr %340, align 8, !tbaa !138
  %344 = sext i32 %343 to i64
  %345 = getelementptr inbounds %struct.edgebox, ptr %332, i64 %344, i32 3
  %346 = load i32, ptr %345, align 4, !tbaa !140
  %347 = icmp sgt i32 %346, %336
  br i1 %347, label %348, label %337, !llvm.loop !335

348:                                              ; preds = %342, %337
  %.lcssa2 = phi ptr [ %340, %342 ], [ %340, %337 ]
  %349 = getelementptr inbounds %struct.dlink2, ptr %.lcssa2, i64 0, i32 1
  %350 = load ptr, ptr %349, align 8, !tbaa !152
  %351 = icmp eq ptr %350, null
  br i1 %351, label %389, label %352

352:                                              ; preds = %348
  %353 = icmp eq i32 %325, 0
  br label %354

354:                                              ; preds = %385, %352
  %355 = phi ptr [ %350, %352 ], [ %387, %385 ]
  %356 = load i32, ptr %355, align 8, !tbaa !138
  %357 = sext i32 %356 to i64
  %358 = getelementptr inbounds %struct.edgebox, ptr %332, i64 %357, i32 5
  %359 = load i32, ptr %358, align 4, !tbaa !142
  %360 = icmp sgt i32 %359, 0
  br i1 %360, label %385, label %361

361:                                              ; preds = %354
  %362 = getelementptr inbounds %struct.edgebox, ptr %332, i64 %357, i32 2
  %363 = load i32, ptr %362, align 4, !tbaa !144
  %364 = getelementptr inbounds %struct.edgebox, ptr %332, i64 %357, i32 1
  %365 = load i32, ptr %364, align 4, !tbaa !143
  %366 = icmp sgt i32 %365, %.lcssa1
  %367 = icmp slt i32 %363, %.lcssa1
  %368 = select i1 %366, i1 true, i1 %367
  br i1 %368, label %385, label %369

369:                                              ; preds = %361
  br i1 %353, label %374, label %370

370:                                              ; preds = %369
  %371 = icmp eq i32 %365, %.lcssa1
  %372 = icmp sgt i32 %363, %365
  %373 = select i1 %371, i1 %372, i1 false
  br i1 %373, label %385, label %382

374:                                              ; preds = %369
  %375 = getelementptr inbounds %struct.edgebox, ptr %332, i64 %357, i32 6
  %376 = load i32, ptr %375, align 4, !tbaa !147
  %377 = icmp eq i32 %376, 1
  br i1 %377, label %378, label %382

378:                                              ; preds = %374
  %379 = icmp eq i32 %365, %.lcssa1
  %380 = icmp eq i32 %363, %.lcssa1
  %381 = select i1 %379, i1 true, i1 %380
  br i1 %381, label %385, label %382

382:                                              ; preds = %378, %374, %370
  %.lcssa3 = phi i64 [ %357, %378 ], [ %357, %374 ], [ %357, %370 ]
  %383 = getelementptr inbounds %struct.edgebox, ptr %332, i64 %.lcssa3, i32 3
  %384 = load i32, ptr %383, align 4, !tbaa !140
  br label %389

385:                                              ; preds = %378, %370, %361, %354
  %386 = getelementptr inbounds %struct.dlink2, ptr %355, i64 0, i32 1
  %387 = load ptr, ptr %386, align 8, !tbaa !152
  %388 = icmp eq ptr %387, null
  br i1 %388, label %389, label %354, !llvm.loop !336

389:                                              ; preds = %385, %382, %348, %317, %301
  %390 = phi ptr [ %332, %382 ], [ %119, %317 ], [ %119, %301 ], [ %332, %348 ], [ %332, %385 ]
  %391 = phi i32 [ %384, %382 ], [ %41, %317 ], [ %41, %301 ], [ %41, %348 ], [ %41, %385 ]
  %392 = icmp sle i32 %.lcssa, %.lcssa1
  %393 = icmp sgt i32 %315, %110
  %394 = select i1 %392, i1 %393, i1 false
  br i1 %394, label %395, label %443

395:                                              ; preds = %389
  %396 = getelementptr inbounds %struct.edgebox, ptr %390, i64 %307, i32 6
  %397 = load i32, ptr %396, align 4, !tbaa !147
  %398 = load ptr, ptr @Vptrs, align 8, !tbaa !7
  %399 = load ptr, ptr @Vroot, align 8, !tbaa !7
  %400 = tail call i32 @tprop(ptr noundef %399, i32 noundef %110) #44
  %401 = sext i32 %400 to i64
  %402 = getelementptr inbounds ptr, ptr %398, i64 %401
  %403 = load ptr, ptr %402, align 8, !tbaa !7
  %404 = icmp eq ptr %403, null
  br i1 %404, label %443, label %405

405:                                              ; preds = %395
  %406 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %407 = icmp eq i32 %397, 0
  br label %408

408:                                              ; preds = %439, %405
  %409 = phi ptr [ %403, %405 ], [ %441, %439 ]
  %410 = load i32, ptr %409, align 8, !tbaa !138
  %411 = sext i32 %410 to i64
  %412 = getelementptr inbounds %struct.edgebox, ptr %406, i64 %411, i32 5
  %413 = load i32, ptr %412, align 4, !tbaa !142
  %414 = icmp slt i32 %413, 0
  br i1 %414, label %439, label %415

415:                                              ; preds = %408
  %416 = getelementptr inbounds %struct.edgebox, ptr %406, i64 %411, i32 2
  %417 = load i32, ptr %416, align 4, !tbaa !144
  %418 = getelementptr inbounds %struct.edgebox, ptr %406, i64 %411, i32 1
  %419 = load i32, ptr %418, align 4, !tbaa !143
  %420 = icmp sgt i32 %419, %.lcssa1
  %421 = icmp slt i32 %417, %.lcssa1
  %422 = select i1 %420, i1 true, i1 %421
  br i1 %422, label %439, label %423

423:                                              ; preds = %415
  br i1 %407, label %428, label %424

424:                                              ; preds = %423
  %425 = icmp eq i32 %419, %.lcssa1
  %426 = icmp sgt i32 %417, %419
  %427 = select i1 %425, i1 %426, i1 false
  br i1 %427, label %439, label %436

428:                                              ; preds = %423
  %429 = getelementptr inbounds %struct.edgebox, ptr %406, i64 %411, i32 6
  %430 = load i32, ptr %429, align 4, !tbaa !147
  %431 = icmp eq i32 %430, 1
  br i1 %431, label %432, label %436

432:                                              ; preds = %428
  %433 = icmp eq i32 %419, %.lcssa1
  %434 = icmp eq i32 %417, %.lcssa1
  %435 = select i1 %433, i1 true, i1 %434
  br i1 %435, label %439, label %436

436:                                              ; preds = %432, %428, %424
  %.lcssa4 = phi i64 [ %411, %432 ], [ %411, %428 ], [ %411, %424 ]
  %437 = getelementptr inbounds %struct.edgebox, ptr %406, i64 %.lcssa4, i32 3
  %438 = load i32, ptr %437, align 4, !tbaa !140
  br label %443

439:                                              ; preds = %432, %424, %415, %408
  %440 = getelementptr inbounds %struct.dlink2, ptr %409, i64 0, i32 2
  %441 = load ptr, ptr %440, align 8, !tbaa !7
  %442 = icmp eq ptr %441, null
  br i1 %442, label %443, label %408, !llvm.loop !337

443:                                              ; preds = %439, %436, %395, %389
  %444 = phi i32 [ %438, %436 ], [ %110, %389 ], [ %110, %395 ], [ %110, %439 ]
  %445 = tail call i32 @backCheck(i32 noundef %391, i32 noundef %444, i32 noundef %20, i32 noundef %.lcssa1) #43, !range !133
  %446 = icmp eq i32 %445, 0
  br i1 %446, label %447, label %527

447:                                              ; preds = %443
  %448 = load i32, ptr @numRects, align 4, !tbaa !17
  %449 = add nsw i32 %448, 1
  store i32 %449, ptr @numRects, align 4, !tbaa !17
  %450 = srem i32 %449, 100
  %451 = icmp eq i32 %450, 0
  %452 = load ptr, ptr @rectArray, align 8, !tbaa !7
  br i1 %451, label %453, label %459

453:                                              ; preds = %447
  %454 = add nsw i32 %448, 101
  %455 = sext i32 %454 to i64
  %456 = mul nsw i64 %455, 52
  %457 = tail call ptr @realloc(ptr noundef %452, i64 noundef %456) #46
  store ptr %457, ptr @rectArray, align 8, !tbaa !7
  %458 = load i32, ptr @numRects, align 4, !tbaa !17
  br label %459

459:                                              ; preds = %453, %447
  %460 = phi i32 [ %458, %453 ], [ %449, %447 ]
  %461 = phi ptr [ %457, %453 ], [ %452, %447 ]
  %462 = sext i32 %460 to i64
  %463 = getelementptr inbounds %struct.rect, ptr %461, i64 %462, i32 4
  store i32 %391, ptr %463, align 4, !tbaa !127
  %464 = load i32, ptr @numRects, align 4, !tbaa !17
  %465 = sext i32 %464 to i64
  %466 = getelementptr inbounds %struct.rect, ptr %461, i64 %465, i32 5
  store i32 %444, ptr %466, align 4, !tbaa !126
  %467 = load i32, ptr @numRects, align 4, !tbaa !17
  %468 = sext i32 %467 to i64
  %469 = getelementptr inbounds %struct.rect, ptr %461, i64 %468, i32 6
  store i32 %20, ptr %469, align 4, !tbaa !129
  %470 = load i32, ptr @numRects, align 4, !tbaa !17
  %471 = sext i32 %470 to i64
  %472 = getelementptr inbounds %struct.rect, ptr %461, i64 %471, i32 7
  store i32 %.lcssa1, ptr %472, align 4, !tbaa !128
  %473 = load i32, ptr @numRects, align 4, !tbaa !17
  %474 = sext i32 %473 to i64
  %475 = getelementptr inbounds %struct.rect, ptr %461, i64 %474, i32 8
  store i32 0, ptr %475, align 4, !tbaa !338
  %476 = load i32, ptr @numRects, align 4, !tbaa !17
  %477 = sext i32 %476 to i64
  %478 = getelementptr inbounds %struct.rect, ptr %461, i64 %477, i32 9
  store i32 0, ptr %478, align 4, !tbaa !339
  %479 = load i32, ptr @numRects, align 4, !tbaa !17
  %480 = sext i32 %479 to i64
  %481 = getelementptr inbounds %struct.rect, ptr %461, i64 %480, i32 10
  store i32 0, ptr %481, align 4, !tbaa !340
  %482 = load i32, ptr @numRects, align 4, !tbaa !17
  %483 = sext i32 %482 to i64
  %484 = getelementptr inbounds %struct.rect, ptr %461, i64 %483, i32 11
  store i32 0, ptr %484, align 4, !tbaa !341
  %485 = add nsw i32 %444, %391
  %486 = sdiv i32 %485, 2
  %487 = load i32, ptr @numRects, align 4, !tbaa !17
  %488 = sext i32 %487 to i64
  %489 = getelementptr inbounds %struct.rect, ptr %461, i64 %488
  store i32 %486, ptr %489, align 4, !tbaa !123
  %490 = add nsw i32 %.lcssa1, %20
  %491 = sdiv i32 %490, 2
  %492 = load i32, ptr @numRects, align 4, !tbaa !17
  %493 = sext i32 %492 to i64
  %494 = getelementptr inbounds %struct.rect, ptr %461, i64 %493, i32 1
  store i32 %491, ptr %494, align 4, !tbaa !125
  %495 = load i32, ptr @numRects, align 4, !tbaa !17
  %496 = sext i32 %495 to i64
  %497 = getelementptr inbounds %struct.rect, ptr %461, i64 %496, i32 2
  store i32 0, ptr %497, align 4, !tbaa !149
  %498 = load i32, ptr @numRects, align 4, !tbaa !17
  %499 = sext i32 %498 to i64
  %500 = getelementptr inbounds %struct.rect, ptr %461, i64 %499, i32 3
  store i32 0, ptr %500, align 4, !tbaa !160
  %501 = load i32, ptr @numRects, align 4, !tbaa !17
  tail call void @tinsert(ptr noundef nonnull @hRectRoot, i32 noundef %391, i32 noundef %501) #44
  %502 = load i32, ptr @numRects, align 4, !tbaa !17
  tail call void @tinsert(ptr noundef nonnull @vRectRoot, i32 noundef %20, i32 noundef %502) #44
  %503 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %504 = load i32, ptr @numRects, align 4, !tbaa !17
  %505 = load ptr, ptr @rectArray, align 8, !tbaa !7
  %506 = sext i32 %504 to i64
  %507 = getelementptr inbounds %struct.rect, ptr %505, i64 %506
  %508 = load i32, ptr %507, align 4, !tbaa !123
  %509 = getelementptr inbounds %struct.rect, ptr %505, i64 %506, i32 1
  %510 = load i32, ptr %509, align 4, !tbaa !125
  %511 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %503, ptr noundef nonnull @.str.49, i32 noundef %504, i32 noundef %508, i32 noundef %510) #43
  %512 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %513 = sub nsw i32 %444, %391
  %514 = sub nsw i32 %.lcssa1, %20
  %515 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %512, ptr noundef nonnull @.str.1.50, i32 noundef %513, i32 noundef %514) #43
  %516 = load i32, ptr @doPlacement, align 4, !tbaa !17
  %517 = icmp eq i32 %516, 0
  br i1 %517, label %527, label %518

518:                                              ; preds = %459
  %519 = load ptr, ptr @fpNodes, align 8, !tbaa !7
  %520 = load i32, ptr @numRects, align 4, !tbaa !17
  %521 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %519, ptr noundef nonnull @.str.2.51, i32 noundef %520, i32 noundef %486, i32 noundef %491) #43
  br label %527

522:                                              ; preds = %105, %103, %102, %89, %85, %77
  %523 = phi i32 [ %79, %77 ], [ %87, %89 ], [ %87, %103 ], [ %87, %85 ], [ %87, %102 ], [ %87, %105 ]
  %524 = getelementptr inbounds %struct.dlink2, ptr %78, i64 0, i32 2
  %525 = load ptr, ptr %524, align 8, !tbaa !7
  %526 = icmp eq ptr %525, null
  br i1 %526, label %527, label %77, !llvm.loop !342

527:                                              ; preds = %522, %518, %459, %443, %294, %109, %66, %62, %60, %59, %45, %43, %28
  %528 = phi i32 [ %32, %28 ], [ %32, %43 ], [ %32, %45 ], [ %110, %443 ], [ %110, %518 ], [ %110, %459 ], [ %32, %60 ], [ %32, %59 ], [ %32, %62 ], [ %32, %66 ], [ %110, %109 ], [ %110, %294 ], [ %523, %522 ]
  %529 = phi i32 [ %31, %28 ], [ %31, %43 ], [ %31, %45 ], [ %303, %443 ], [ %303, %518 ], [ %303, %459 ], [ %31, %60 ], [ %31, %59 ], [ %31, %62 ], [ %31, %66 ], [ %31, %109 ], [ %295, %294 ], [ %31, %522 ]
  %530 = phi i32 [ %30, %28 ], [ %30, %43 ], [ %30, %45 ], [ %302, %443 ], [ %302, %518 ], [ %302, %459 ], [ %30, %60 ], [ %30, %59 ], [ %30, %62 ], [ %30, %66 ], [ %30, %109 ], [ %296, %294 ], [ %30, %522 ]
  %531 = getelementptr inbounds %struct.dlink2, ptr %29, i64 0, i32 2
  %532 = load ptr, ptr %531, align 8, !tbaa !7
  %533 = icmp eq ptr %532, null
  br i1 %533, label %534, label %28, !llvm.loop !343

534:                                              ; preds = %527, %39, %14, %4
  %535 = phi i32 [ %7, %4 ], [ %7, %14 ], [ %31, %39 ], [ %529, %527 ]
  %536 = phi i32 [ %6, %4 ], [ %6, %14 ], [ %30, %39 ], [ %530, %527 ]
  %537 = getelementptr inbounds %struct.dlink2, ptr %5, i64 0, i32 2
  %538 = load ptr, ptr %537, align 8, !tbaa !7
  %539 = icmp eq ptr %538, null
  br i1 %539, label %540, label %4, !llvm.loop !344

540:                                              ; preds = %534, %0
  tail call void @rectlink() #43
  tail call void @makeRLEtree() #43
  tail call void @makeRBEtree() #43
  %541 = load i32, ptr @doPlacement, align 4, !tbaa !17
  %542 = icmp eq i32 %541, 0
  br i1 %542, label %548, label %543

543:                                              ; preds = %540
  %544 = load ptr, ptr @fpNodes, align 8, !tbaa !7
  %545 = tail call i64 @fwrite(ptr nonnull @.str.3.52, i64 2, i64 1, ptr %544)
  %546 = load ptr, ptr @fpNodes, align 8, !tbaa !7
  %547 = tail call i32 @fclose(ptr noundef %546) #43
  br label %548

548:                                              ; preds = %543, %540
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @backCheck(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3) #4 {
  %5 = load i32, ptr @numRects, align 4, !tbaa !17
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %22

7:                                                ; preds = %4
  %8 = load ptr, ptr @rectArray, align 8, !tbaa !7
  %9 = zext i32 %5 to i64
  br label %10

10:                                               ; preds = %19, %7
  %11 = phi i64 [ %9, %7 ], [ %20, %19 ]
  %12 = getelementptr inbounds %struct.rect, ptr %8, i64 %11, i32 5
  %13 = load i32, ptr %12, align 4, !tbaa !126
  %14 = icmp slt i32 %13, %0
  br i1 %14, label %19, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.rect, ptr %8, i64 %11, i32 4
  %17 = load i32, ptr %16, align 4, !tbaa !127
  %18 = icmp sgt i32 %17, %1
  br i1 %18, label %19, label %26

19:                                               ; preds = %15, %10
  %20 = add nsw i64 %11, -1
  %21 = icmp sgt i64 %11, 1
  br i1 %21, label %10, label %40, !llvm.loop !345

22:                                               ; preds = %4
  %23 = icmp eq i32 %5, 0
  br i1 %23, label %40, label %24

24:                                               ; preds = %22
  %25 = load ptr, ptr @rectArray, align 8, !tbaa !7
  br label %28

26:                                               ; preds = %15
  %.lcssa = phi i64 [ %11, %15 ]
  %27 = trunc i64 %.lcssa to i32
  br label %28

28:                                               ; preds = %26, %24
  %29 = phi ptr [ %25, %24 ], [ %8, %26 ]
  %30 = phi i32 [ %5, %24 ], [ %27, %26 ]
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds %struct.rect, ptr %29, i64 %31, i32 7
  %33 = load i32, ptr %32, align 4, !tbaa !128
  %34 = icmp slt i32 %33, %2
  br i1 %34, label %40, label %35

35:                                               ; preds = %28
  %36 = getelementptr inbounds %struct.rect, ptr %29, i64 %31, i32 6
  %37 = load i32, ptr %36, align 4, !tbaa !129
  %38 = icmp sle i32 %37, %3
  %39 = zext i1 %38 to i32
  br label %40

40:                                               ; preds = %35, %28, %22, %19
  %41 = phi i32 [ 0, %22 ], [ 0, %28 ], [ %39, %35 ], [ 0, %19 ]
  ret i32 %41
}

; Function Attrs: nounwind optsize uwtable
define internal void @rectlink() #0 {
  %1 = alloca ptr, align 8
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %1) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %3) #47
  store ptr null, ptr @HRlist, align 8, !tbaa !7
  store ptr null, ptr @VRlist, align 8, !tbaa !7
  call void @tpop(ptr noundef nonnull @hRectRoot, ptr noundef nonnull %1, ptr noundef nonnull %2, ptr noundef nonnull %3) #44
  %4 = load ptr, ptr %1, align 8, !tbaa !7
  %5 = icmp eq ptr %4, null
  br i1 %5, label %36, label %6

6:                                                ; preds = %0
  %7 = call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #45
  store ptr %7, ptr @HRlist, align 8, !tbaa !7
  %8 = load i32, ptr %3, align 4, !tbaa !17
  store i32 %8, ptr %7, align 8, !tbaa !131
  %9 = getelementptr inbounds %struct.dlink2, ptr %7, i64 0, i32 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %9, i8 0, i64 16, i1 false)
  call void @tpop(ptr noundef nonnull @vRectRoot, ptr noundef nonnull %1, ptr noundef nonnull %2, ptr noundef nonnull %3) #44
  %10 = call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #45
  store ptr %10, ptr @VRlist, align 8, !tbaa !7
  %11 = load i32, ptr %3, align 4, !tbaa !17
  store i32 %11, ptr %10, align 8, !tbaa !131
  %12 = getelementptr inbounds %struct.dlink2, ptr %10, i64 0, i32 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %12, i8 0, i64 16, i1 false)
  %13 = load ptr, ptr @HRlist, align 8, !tbaa !7
  br label %14

14:                                               ; preds = %18, %6
  %15 = phi ptr [ %13, %6 ], [ %19, %18 ]
  call void @tpop(ptr noundef nonnull @hRectRoot, ptr noundef nonnull %1, ptr noundef nonnull %2, ptr noundef nonnull %3) #44
  %16 = load ptr, ptr %1, align 8, !tbaa !7
  %17 = icmp eq ptr %16, null
  br i1 %17, label %24, label %18

18:                                               ; preds = %14
  %19 = call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #45
  %20 = load i32, ptr %3, align 4, !tbaa !17
  store i32 %20, ptr %19, align 8, !tbaa !131
  %21 = getelementptr inbounds %struct.dlink2, ptr %19, i64 0, i32 1
  store ptr %15, ptr %21, align 8, !tbaa !346
  %22 = getelementptr inbounds %struct.dlink2, ptr %19, i64 0, i32 2
  store ptr null, ptr %22, align 8, !tbaa !347
  %23 = getelementptr inbounds %struct.dlink2, ptr %15, i64 0, i32 2
  store ptr %19, ptr %23, align 8, !tbaa !347
  br label %14

24:                                               ; preds = %14
  %25 = load ptr, ptr @VRlist, align 8, !tbaa !7
  br label %26

26:                                               ; preds = %30, %24
  %27 = phi ptr [ %25, %24 ], [ %31, %30 ]
  call void @tpop(ptr noundef nonnull @vRectRoot, ptr noundef nonnull %1, ptr noundef nonnull %2, ptr noundef nonnull %3) #44
  %28 = load ptr, ptr %1, align 8, !tbaa !7
  %29 = icmp eq ptr %28, null
  br i1 %29, label %36, label %30

30:                                               ; preds = %26
  %31 = call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #45
  %32 = load i32, ptr %3, align 4, !tbaa !17
  store i32 %32, ptr %31, align 8, !tbaa !131
  %33 = getelementptr inbounds %struct.dlink2, ptr %31, i64 0, i32 1
  store ptr %27, ptr %33, align 8, !tbaa !346
  %34 = getelementptr inbounds %struct.dlink2, ptr %31, i64 0, i32 2
  store ptr null, ptr %34, align 8, !tbaa !347
  %35 = getelementptr inbounds %struct.dlink2, ptr %27, i64 0, i32 2
  store ptr %31, ptr %35, align 8, !tbaa !347
  br label %26

36:                                               ; preds = %26, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %3) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #47
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %1) #47
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @makeRLEtree() #0 {
  store ptr null, ptr @LEroot, align 8, !tbaa !7
  %1 = tail call noalias dereferenceable_or_null(800) ptr @malloc(i64 noundef 800) #45
  store ptr %1, ptr @LEptrs, align 8, !tbaa !7
  %2 = load ptr, ptr @HRlist, align 8, !tbaa !7
  %3 = icmp eq ptr %2, null
  br i1 %3, label %38, label %4

4:                                                ; preds = %0
  %5 = load ptr, ptr @rectArray, align 8, !tbaa !7
  br label %6

6:                                                ; preds = %31, %4
  %7 = phi ptr [ %32, %31 ], [ %5, %4 ]
  %8 = phi ptr [ %36, %31 ], [ %2, %4 ]
  %9 = phi i32 [ %34, %31 ], [ 0, %4 ]
  %10 = phi i32 [ %33, %31 ], [ -1000000, %4 ]
  %11 = load i32, ptr %8, align 8, !tbaa !131
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds %struct.rect, ptr %7, i64 %12, i32 4
  %14 = load i32, ptr %13, align 4, !tbaa !127
  %15 = icmp sgt i32 %14, %10
  br i1 %15, label %16, label %31

16:                                               ; preds = %6
  %17 = add nsw i32 %9, 1
  %18 = srem i32 %17, 100
  %19 = icmp eq i32 %18, 0
  %20 = load ptr, ptr @LEptrs, align 8, !tbaa !7
  br i1 %19, label %21, label %26

21:                                               ; preds = %16
  %22 = add nsw i32 %9, 101
  %23 = sext i32 %22 to i64
  %24 = shl nsw i64 %23, 3
  %25 = tail call ptr @realloc(ptr noundef %20, i64 noundef %24) #46
  store ptr %25, ptr @LEptrs, align 8, !tbaa !7
  br label %26

26:                                               ; preds = %21, %16
  %27 = phi ptr [ %25, %21 ], [ %20, %16 ]
  %28 = sext i32 %17 to i64
  %29 = getelementptr inbounds ptr, ptr %27, i64 %28
  store ptr %8, ptr %29, align 8, !tbaa !7
  tail call void @tinsert(ptr noundef nonnull @LEroot, i32 noundef %14, i32 noundef %17) #44
  %30 = load ptr, ptr @rectArray, align 8, !tbaa !7
  br label %31

31:                                               ; preds = %26, %6
  %32 = phi ptr [ %30, %26 ], [ %7, %6 ]
  %33 = phi i32 [ %14, %26 ], [ %10, %6 ]
  %34 = phi i32 [ %17, %26 ], [ %9, %6 ]
  %35 = getelementptr inbounds %struct.dlink2, ptr %8, i64 0, i32 2
  %36 = load ptr, ptr %35, align 8, !tbaa !7
  %37 = icmp eq ptr %36, null
  br i1 %37, label %38, label %6, !llvm.loop !348

38:                                               ; preds = %31, %0
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @makeRBEtree() #0 {
  store ptr null, ptr @BEroot, align 8, !tbaa !7
  %1 = tail call noalias dereferenceable_or_null(800) ptr @malloc(i64 noundef 800) #45
  store ptr %1, ptr @BEptrs, align 8, !tbaa !7
  %2 = load ptr, ptr @VRlist, align 8, !tbaa !7
  %3 = icmp eq ptr %2, null
  br i1 %3, label %38, label %4

4:                                                ; preds = %0
  %5 = load ptr, ptr @rectArray, align 8, !tbaa !7
  br label %6

6:                                                ; preds = %31, %4
  %7 = phi ptr [ %32, %31 ], [ %5, %4 ]
  %8 = phi ptr [ %36, %31 ], [ %2, %4 ]
  %9 = phi i32 [ %34, %31 ], [ 0, %4 ]
  %10 = phi i32 [ %33, %31 ], [ -1000000, %4 ]
  %11 = load i32, ptr %8, align 8, !tbaa !131
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds %struct.rect, ptr %7, i64 %12, i32 6
  %14 = load i32, ptr %13, align 4, !tbaa !129
  %15 = icmp sgt i32 %14, %10
  br i1 %15, label %16, label %31

16:                                               ; preds = %6
  %17 = add nsw i32 %9, 1
  %18 = srem i32 %17, 100
  %19 = icmp eq i32 %18, 0
  %20 = load ptr, ptr @BEptrs, align 8, !tbaa !7
  br i1 %19, label %21, label %26

21:                                               ; preds = %16
  %22 = add nsw i32 %9, 101
  %23 = sext i32 %22 to i64
  %24 = shl nsw i64 %23, 3
  %25 = tail call ptr @realloc(ptr noundef %20, i64 noundef %24) #46
  store ptr %25, ptr @BEptrs, align 8, !tbaa !7
  br label %26

26:                                               ; preds = %21, %16
  %27 = phi ptr [ %25, %21 ], [ %20, %16 ]
  %28 = sext i32 %17 to i64
  %29 = getelementptr inbounds ptr, ptr %27, i64 %28
  store ptr %8, ptr %29, align 8, !tbaa !7
  tail call void @tinsert(ptr noundef nonnull @BEroot, i32 noundef %14, i32 noundef %17) #44
  %30 = load ptr, ptr @rectArray, align 8, !tbaa !7
  br label %31

31:                                               ; preds = %26, %6
  %32 = phi ptr [ %30, %26 ], [ %7, %6 ]
  %33 = phi i32 [ %14, %26 ], [ %10, %6 ]
  %34 = phi i32 [ %17, %26 ], [ %9, %6 ]
  %35 = getelementptr inbounds %struct.dlink2, ptr %8, i64 0, i32 2
  %36 = load ptr, ptr %35, align 8, !tbaa !7
  %37 = icmp eq ptr %36, null
  br i1 %37, label %38, label %6, !llvm.loop !349

38:                                               ; preds = %31, %0
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @findside(ptr nocapture noundef readonly %0, i32 noundef %1, i32 noundef %2) #19 {
  %4 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 7
  %5 = load i32, ptr %4, align 8, !tbaa !350
  %6 = icmp slt i32 %5, 1
  br i1 %6, label %29, label %7

7:                                                ; preds = %3
  %8 = load ptr, ptr @pSideArray, align 8, !tbaa !7
  %9 = add nuw i32 %5, 1
  %10 = zext i32 %9 to i64
  br label %11

11:                                               ; preds = %11, %7
  %12 = phi i64 [ 1, %7 ], [ %27, %11 ]
  %13 = phi i32 [ undef, %7 ], [ %26, %11 ]
  %14 = phi i32 [ 10000000, %7 ], [ %25, %11 ]
  %15 = getelementptr inbounds %struct.psidebox, ptr %8, i64 %12, i32 2
  %16 = load i32, ptr %15, align 8, !tbaa !351
  %17 = icmp eq i32 %16, 1
  %18 = getelementptr inbounds %struct.psidebox, ptr %8, i64 %12, i32 3
  %19 = load i32, ptr %18, align 4, !tbaa !353
  %20 = trunc i64 %12 to i32
  %21 = select i1 %17, i32 %1, i32 %2
  %22 = sub nsw i32 %21, %19
  %23 = tail call i32 @llvm.abs.i32(i32 %22, i1 true)
  %24 = icmp slt i32 %23, %14
  %25 = tail call i32 @llvm.smin.i32(i32 %23, i32 %14)
  %26 = select i1 %24, i32 %20, i32 %13
  %27 = add nuw nsw i64 %12, 1
  %28 = icmp eq i64 %27, %10
  br i1 %28, label %29, label %11, !llvm.loop !354

29:                                               ; preds = %11, %3
  %30 = phi i32 [ undef, %3 ], [ %26, %11 ]
  ret i32 %30
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal void @loadside(i32 noundef %0, double noundef %1) #20 {
  %3 = load ptr, ptr @pSideArray, align 8, !tbaa !7
  %4 = sext i32 %0 to i64
  %5 = getelementptr inbounds %struct.psidebox, ptr %3, i64 %4, i32 1
  %6 = load double, ptr %5, align 8, !tbaa !355
  %7 = fadd double %6, %1
  store double %7, ptr %5, align 8, !tbaa !355
  ret void
}

; Function Attrs: nofree nounwind optsize memory(readwrite, inaccessiblemem: write) uwtable
define internal void @fixpenal() #21 {
  %1 = load i32, ptr @blockr, align 4, !tbaa !17
  %2 = load i32, ptr @blockl, align 4, !tbaa !17
  %3 = add nsw i32 %2, %1
  %4 = sdiv i32 %3, 2
  %5 = load i32, ptr @blockt, align 4, !tbaa !17
  %6 = load i32, ptr @blockb, align 4, !tbaa !17
  %7 = add nsw i32 %6, %5
  %8 = sdiv i32 %7, 2
  %9 = load i32, ptr @numcells, align 4, !tbaa !17
  br label %12

10:                                               ; preds = %120
  %.lcssa1 = phi i32 [ %122, %120 ]
  %.lcssa = phi i32 [ %124, %120 ]
  %11 = icmp eq i32 %.lcssa1, 0
  br i1 %11, label %126, label %12, !llvm.loop !356

12:                                               ; preds = %10, %0
  %13 = phi i32 [ %9, %0 ], [ %.lcssa, %10 ]
  %14 = icmp slt i32 %13, 1
  br i1 %14, label %126, label %15

15:                                               ; preds = %120, %12
  %16 = phi i32 [ %122, %120 ], [ 0, %12 ]
  %17 = phi i32 [ %123, %120 ], [ 1, %12 ]
  %18 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %19 = sext i32 %17 to i64
  %20 = getelementptr inbounds ptr, ptr %18, i64 %19
  %21 = load ptr, ptr %20, align 8, !tbaa !7
  %22 = getelementptr inbounds %struct.cellbox, ptr %21, i64 0, i32 2
  %23 = load i32, ptr %22, align 4, !tbaa !164
  %24 = getelementptr inbounds %struct.cellbox, ptr %21, i64 0, i32 3
  %25 = load i32, ptr %24, align 8, !tbaa !165
  %26 = getelementptr inbounds %struct.cellbox, ptr %21, i64 0, i32 5
  %27 = load i32, ptr %26, align 8, !tbaa !45
  %28 = tail call i32 @whoOverlaps(i32 noundef %17, i32 noundef %23, i32 noundef %25, i32 noundef %27, i32 noundef 0, i32 noundef 1, i32 noundef 0) #43
  %29 = icmp sgt i32 %28, 0
  br i1 %29, label %30, label %120

30:                                               ; preds = %15
  %31 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %32 = getelementptr inbounds ptr, ptr %31, i64 %19
  %33 = load ptr, ptr %32, align 8, !tbaa !7
  %34 = getelementptr inbounds %struct.cellbox, ptr %33, i64 0, i32 2
  %35 = load i32, ptr %34, align 4, !tbaa !164
  %36 = sub nsw i32 %35, %4
  %37 = mul i32 %36, %36
  %38 = getelementptr inbounds %struct.cellbox, ptr %33, i64 0, i32 3
  %39 = load i32, ptr %38, align 8, !tbaa !165
  %40 = sub nsw i32 %39, %8
  %41 = mul i32 %40, %40
  %42 = add nsw i32 %41, %37
  %43 = sitofp i32 %42 to double
  %44 = tail call double @sqrt(double noundef %43) #44
  %45 = fptosi double %44 to i32
  %46 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %47 = zext i32 %28 to i64
  %48 = getelementptr inbounds ptr, ptr %46, i64 %47
  %49 = load ptr, ptr %48, align 8, !tbaa !7
  %50 = getelementptr inbounds %struct.cellbox, ptr %49, i64 0, i32 2
  %51 = load i32, ptr %50, align 4, !tbaa !164
  %52 = sub nsw i32 %51, %4
  %53 = mul i32 %52, %52
  %54 = getelementptr inbounds %struct.cellbox, ptr %49, i64 0, i32 3
  %55 = load i32, ptr %54, align 8, !tbaa !165
  %56 = sub nsw i32 %55, %8
  %57 = mul i32 %56, %56
  %58 = add nsw i32 %57, %53
  %59 = sitofp i32 %58 to double
  %60 = tail call double @sqrt(double noundef %59) #44
  %61 = fptosi double %60 to i32
  %62 = load i32, ptr @dx, align 4
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %65

64:                                               ; preds = %30
  store i32 1000000, ptr @dx, align 4, !tbaa !17
  br label %65

65:                                               ; preds = %64, %30
  %66 = phi i32 [ 1000000, %64 ], [ %62, %30 ]
  %67 = load i32, ptr @dy, align 4
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %70

69:                                               ; preds = %65
  store i32 1000000, ptr @dy, align 4, !tbaa !17
  br label %70

70:                                               ; preds = %69, %65
  %71 = phi i32 [ 1000000, %69 ], [ %67, %65 ]
  %72 = icmp sgt i32 %66, %71
  %73 = tail call i32 @llvm.smin.i32(i32 %66, i32 %71)
  %74 = icmp sgt i32 %45, %61
  %75 = load ptr, ptr @cellarray, align 8, !tbaa !7
  br i1 %72, label %97, label %76

76:                                               ; preds = %70
  br i1 %74, label %77, label %87

77:                                               ; preds = %76
  %78 = getelementptr inbounds ptr, ptr %75, i64 %19
  %79 = load ptr, ptr %78, align 8, !tbaa !7
  %80 = getelementptr inbounds %struct.cellbox, ptr %79, i64 0, i32 2
  %81 = load i32, ptr %80, align 4, !tbaa !164
  %82 = icmp sgt i32 %81, %4
  br i1 %82, label %83, label %85

83:                                               ; preds = %77
  %84 = add nsw i32 %81, %73
  store i32 %84, ptr %80, align 4, !tbaa !164
  br label %118

85:                                               ; preds = %77
  %86 = sub nsw i32 %81, %73
  store i32 %86, ptr %80, align 4, !tbaa !164
  br label %118

87:                                               ; preds = %76
  %88 = getelementptr inbounds ptr, ptr %75, i64 %47
  %89 = load ptr, ptr %88, align 8, !tbaa !7
  %90 = getelementptr inbounds %struct.cellbox, ptr %89, i64 0, i32 2
  %91 = load i32, ptr %90, align 4, !tbaa !164
  %92 = icmp sgt i32 %91, %4
  br i1 %92, label %93, label %95

93:                                               ; preds = %87
  %94 = add nsw i32 %91, %73
  store i32 %94, ptr %90, align 4, !tbaa !164
  br label %118

95:                                               ; preds = %87
  %96 = sub nsw i32 %91, %73
  store i32 %96, ptr %90, align 4, !tbaa !164
  br label %118

97:                                               ; preds = %70
  br i1 %74, label %98, label %108

98:                                               ; preds = %97
  %99 = getelementptr inbounds ptr, ptr %75, i64 %19
  %100 = load ptr, ptr %99, align 8, !tbaa !7
  %101 = getelementptr inbounds %struct.cellbox, ptr %100, i64 0, i32 3
  %102 = load i32, ptr %101, align 8, !tbaa !165
  %103 = icmp sgt i32 %102, %8
  br i1 %103, label %104, label %106

104:                                              ; preds = %98
  %105 = add nsw i32 %102, %73
  store i32 %105, ptr %101, align 8, !tbaa !165
  br label %118

106:                                              ; preds = %98
  %107 = sub nsw i32 %102, %73
  store i32 %107, ptr %101, align 8, !tbaa !165
  br label %118

108:                                              ; preds = %97
  %109 = getelementptr inbounds ptr, ptr %75, i64 %47
  %110 = load ptr, ptr %109, align 8, !tbaa !7
  %111 = getelementptr inbounds %struct.cellbox, ptr %110, i64 0, i32 3
  %112 = load i32, ptr %111, align 8, !tbaa !165
  %113 = icmp sgt i32 %112, %8
  br i1 %113, label %114, label %116

114:                                              ; preds = %108
  %115 = add nsw i32 %112, %73
  store i32 %115, ptr %111, align 8, !tbaa !165
  br label %118

116:                                              ; preds = %108
  %117 = sub nsw i32 %112, %73
  store i32 %117, ptr %111, align 8, !tbaa !165
  br label %118

118:                                              ; preds = %116, %114, %106, %104, %95, %93, %85, %83
  %119 = add nsw i32 %17, -1
  br label %120

120:                                              ; preds = %118, %15
  %121 = phi i32 [ %119, %118 ], [ %17, %15 ]
  %122 = phi i32 [ 1, %118 ], [ %16, %15 ]
  %123 = add nsw i32 %121, 1
  %124 = load i32, ptr @numcells, align 4, !tbaa !17
  %125 = icmp slt i32 %121, %124
  br i1 %125, label %15, label %10, !llvm.loop !357

126:                                              ; preds = %12, %10
  tail call void @padOverlaps() #43
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, argmem: read, inaccessiblemem: none) uwtable
define internal i32 @whoOverlaps(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6) #14 {
  store i32 0, ptr @dx, align 4, !tbaa !17
  store i32 0, ptr @dy, align 4, !tbaa !17
  %8 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %9 = sext i32 %0 to i64
  %10 = getelementptr inbounds ptr, ptr %8, i64 %9
  %11 = load ptr, ptr %10, align 8, !tbaa !7
  %12 = sext i32 %3 to i64
  %13 = getelementptr inbounds %struct.cellbox, ptr %11, i64 0, i32 21, i64 %12
  %14 = load ptr, ptr %13, align 8, !tbaa !7
  %15 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 9
  %16 = load i32, ptr %15, align 8, !tbaa !167
  %17 = add nsw i32 %16, %1
  %18 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 10
  %19 = load i32, ptr %18, align 4, !tbaa !168
  %20 = add nsw i32 %19, %1
  %21 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 11
  %22 = load i32, ptr %21, align 8, !tbaa !169
  %23 = add nsw i32 %22, %2
  %24 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 12
  %25 = load i32, ptr %24, align 4, !tbaa !170
  %26 = add nsw i32 %25, %2
  %27 = load i32, ptr @binOffsetX, align 4, !tbaa !17
  %28 = sub nsw i32 %17, %27
  %29 = load i32, ptr @binWidthX, align 4, !tbaa !17
  %30 = sdiv i32 %28, %29
  %31 = icmp slt i32 %30, 1
  %32 = load i32, ptr @numBinsX, align 4
  %33 = tail call i32 @llvm.smin.i32(i32 %30, i32 %32)
  %34 = select i1 %31, i32 1, i32 %33
  %35 = sub nsw i32 %20, %27
  %36 = sdiv i32 %35, %29
  %37 = icmp sgt i32 %36, %32
  %38 = tail call i32 @llvm.smax.i32(i32 %36, i32 1)
  %39 = select i1 %37, i32 %32, i32 %38
  %40 = load i32, ptr @binOffsetY, align 4, !tbaa !17
  %41 = sub nsw i32 %23, %40
  %42 = load i32, ptr @binWidthY, align 4, !tbaa !17
  %43 = sdiv i32 %41, %42
  %44 = icmp slt i32 %43, 1
  %45 = load i32, ptr @numBinsY, align 4
  %46 = tail call i32 @llvm.smin.i32(i32 %43, i32 %45)
  %47 = select i1 %44, i32 1, i32 %46
  %48 = sub nsw i32 %26, %40
  %49 = sdiv i32 %48, %42
  %50 = icmp sgt i32 %49, %45
  %51 = tail call i32 @llvm.smax.i32(i32 %49, i32 1)
  %52 = select i1 %50, i32 %45, i32 %51
  %53 = icmp eq i32 %34, %39
  %54 = icmp eq i32 %47, %52
  %55 = select i1 %53, i1 %54, i1 false
  %56 = select i1 %55, i32 %34, i32 0
  %57 = select i1 %55, i32 %47, i32 0
  store i32 %56, ptr @binX, align 4, !tbaa !17
  store i32 %57, ptr @binY, align 4, !tbaa !17
  %58 = icmp slt i32 %39, 0
  br i1 %58, label %275, label %59

59:                                               ; preds = %7
  %60 = icmp slt i32 %52, 0
  %61 = load ptr, ptr @blockarray, align 8
  %62 = load i32, ptr @numcells, align 4
  %63 = icmp eq i32 %5, 0
  %64 = getelementptr inbounds %struct.cellbox, ptr %11, i64 0, i32 6
  %65 = sext i32 %47 to i64
  %66 = add i32 %52, 1
  %67 = sext i32 %34 to i64
  %68 = add nuw i32 %39, 1
  %69 = zext i32 %68 to i64
  %70 = zext i32 %66 to i64
  br label %71

71:                                               ; preds = %271, %59
  %72 = phi i64 [ 0, %59 ], [ %273, %271 ]
  %73 = phi i32 [ 0, %59 ], [ %272, %271 ]
  %74 = icmp ne i64 %72, 0
  %75 = icmp slt i64 %72, %67
  %76 = and i1 %74, %75
  %77 = select i1 %76, i1 true, i1 %60
  br i1 %77, label %271, label %78

78:                                               ; preds = %71
  %79 = icmp eq i64 %72, 0
  %80 = getelementptr inbounds ptr, ptr %61, i64 %72
  br label %81

81:                                               ; preds = %266, %78
  %82 = phi i64 [ 0, %78 ], [ %269, %266 ]
  %83 = phi i32 [ %73, %78 ], [ %267, %266 ]
  %84 = phi i32 [ %73, %78 ], [ %268, %266 ]
  %85 = or i64 %82, %72
  %86 = and i64 %85, 4294967295
  %87 = icmp ne i64 %86, 0
  %88 = icmp slt i64 %82, %65
  %89 = or i1 %79, %88
  %90 = select i1 %87, i1 %89, i1 false
  br i1 %90, label %266, label %91

91:                                               ; preds = %81
  %92 = load ptr, ptr %80, align 8, !tbaa !7
  %93 = getelementptr inbounds ptr, ptr %92, i64 %82
  %94 = load ptr, ptr %93, align 8, !tbaa !7
  %95 = load i32, ptr %94, align 4, !tbaa !17
  %96 = icmp slt i32 %95, 1
  br i1 %96, label %266, label %97

97:                                               ; preds = %259, %91
  %98 = phi i32 [ %260, %259 ], [ %95, %91 ]
  %99 = phi i64 [ %263, %259 ], [ 1, %91 ]
  %100 = phi i32 [ %261, %259 ], [ %83, %91 ]
  %101 = phi i32 [ %262, %259 ], [ %84, %91 ]
  %102 = getelementptr inbounds i32, ptr %94, i64 %99
  %103 = load i32, ptr %102, align 4, !tbaa !17
  %104 = icmp eq i32 %103, %0
  %105 = icmp sgt i32 %103, %62
  %106 = select i1 %104, i1 true, i1 %105
  br i1 %106, label %259, label %107

107:                                              ; preds = %97
  %108 = sext i32 %103 to i64
  %109 = getelementptr inbounds ptr, ptr %8, i64 %108
  %110 = load ptr, ptr %109, align 8, !tbaa !7
  %111 = icmp eq i32 %103, %4
  br i1 %111, label %115, label %112

112:                                              ; preds = %107
  %113 = getelementptr inbounds %struct.cellbox, ptr %110, i64 0, i32 5
  %114 = load i32, ptr %113, align 8, !tbaa !45
  br label %116

115:                                              ; preds = %107
  br i1 %63, label %116, label %259

116:                                              ; preds = %115, %112
  %117 = phi i32 [ %114, %112 ], [ %6, %115 ]
  %118 = phi ptr [ %110, %112 ], [ %11, %115 ]
  %119 = getelementptr inbounds %struct.cellbox, ptr %118, i64 0, i32 3
  %120 = getelementptr inbounds %struct.cellbox, ptr %118, i64 0, i32 2
  %121 = sext i32 %117 to i64
  %122 = getelementptr inbounds %struct.cellbox, ptr %110, i64 0, i32 21, i64 %121
  %123 = load i32, ptr %119, align 8, !tbaa !165
  %124 = load i32, ptr %120, align 4, !tbaa !164
  %125 = load ptr, ptr %122, align 8, !tbaa !7
  %126 = getelementptr inbounds %struct.tilebox, ptr %125, i64 0, i32 9
  %127 = load i32, ptr %126, align 8, !tbaa !167
  %128 = add nsw i32 %127, %124
  %129 = getelementptr inbounds %struct.tilebox, ptr %125, i64 0, i32 10
  %130 = load i32, ptr %129, align 4, !tbaa !168
  %131 = add nsw i32 %130, %124
  %132 = getelementptr inbounds %struct.tilebox, ptr %125, i64 0, i32 11
  %133 = load i32, ptr %132, align 8, !tbaa !169
  %134 = add nsw i32 %133, %123
  %135 = getelementptr inbounds %struct.tilebox, ptr %125, i64 0, i32 12
  %136 = load i32, ptr %135, align 4, !tbaa !170
  %137 = add nsw i32 %136, %123
  %138 = icmp slt i32 %128, %20
  %139 = icmp slt i32 %17, %131
  %140 = select i1 %138, i1 %139, i1 false
  %141 = icmp slt i32 %134, %26
  %142 = select i1 %140, i1 %141, i1 false
  %143 = icmp slt i32 %23, %137
  %144 = select i1 %142, i1 %143, i1 false
  br i1 %144, label %145, label %259

145:                                              ; preds = %116
  %146 = load i32, ptr %64, align 4, !tbaa !171
  %147 = icmp eq i32 %146, 1
  br i1 %147, label %148, label %159

148:                                              ; preds = %145
  %149 = getelementptr inbounds %struct.cellbox, ptr %110, i64 0, i32 6
  %150 = load i32, ptr %149, align 4, !tbaa !171
  %151 = icmp eq i32 %150, 1
  br i1 %151, label %152, label %159

152:                                              ; preds = %148
  %.lcssa4 = phi i32 [ %128, %148 ]
  %.lcssa3 = phi i32 [ %131, %148 ]
  %.lcssa2 = phi i32 [ %134, %148 ]
  %.lcssa1 = phi i32 [ %137, %148 ]
  %.lcssa = phi i32 [ %103, %148 ]
  %153 = tail call i32 @llvm.smax.i32(i32 %17, i32 %.lcssa4)
  %154 = tail call i32 @llvm.smin.i32(i32 %20, i32 %.lcssa3)
  %155 = tail call i32 @llvm.smax.i32(i32 %23, i32 %.lcssa2)
  %156 = tail call i32 @llvm.smin.i32(i32 %26, i32 %.lcssa1)
  %157 = sub nsw i32 %154, %153
  store i32 %157, ptr @dx, align 4, !tbaa !17
  %158 = sub nsw i32 %156, %155
  store i32 %158, ptr @dy, align 4, !tbaa !17
  br label %275

159:                                              ; preds = %148, %145
  %160 = load ptr, ptr %14, align 8, !tbaa !172
  %161 = icmp eq ptr %160, null
  br i1 %161, label %250, label %162

162:                                              ; preds = %159
  %163 = load ptr, ptr %125, align 8, !tbaa !172
  %164 = icmp eq ptr %163, null
  br label %173

165:                                              ; preds = %240, %173
  %166 = phi i32 [ %174, %173 ], [ %241, %240 ]
  %167 = phi i32 [ %175, %173 ], [ %242, %240 ]
  %168 = phi i32 [ %176, %173 ], [ %243, %240 ]
  %169 = phi i32 [ %179, %173 ], [ %244, %240 ]
  %170 = phi i32 [ %178, %173 ], [ %245, %240 ]
  %171 = load ptr, ptr %177, align 8, !tbaa !172
  %172 = icmp eq ptr %171, null
  br i1 %172, label %250, label %173, !llvm.loop !358

173:                                              ; preds = %165, %162
  %174 = phi i32 [ 0, %162 ], [ %166, %165 ]
  %175 = phi i32 [ %100, %162 ], [ %167, %165 ]
  %176 = phi i32 [ %101, %162 ], [ %168, %165 ]
  %177 = phi ptr [ %160, %162 ], [ %171, %165 ]
  %178 = phi i32 [ %101, %162 ], [ %170, %165 ]
  %179 = phi i32 [ 0, %162 ], [ %169, %165 ]
  %180 = getelementptr inbounds %struct.tilebox, ptr %177, i64 0, i32 9
  %181 = load i32, ptr %180, align 8, !tbaa !167
  %182 = add nsw i32 %181, %1
  %183 = getelementptr inbounds %struct.tilebox, ptr %177, i64 0, i32 10
  %184 = load i32, ptr %183, align 4, !tbaa !168
  %185 = add nsw i32 %184, %1
  %186 = getelementptr inbounds %struct.tilebox, ptr %177, i64 0, i32 11
  %187 = load i32, ptr %186, align 8, !tbaa !169
  %188 = add nsw i32 %187, %2
  %189 = getelementptr inbounds %struct.tilebox, ptr %177, i64 0, i32 12
  %190 = load i32, ptr %189, align 4, !tbaa !170
  %191 = add nsw i32 %190, %2
  br i1 %164, label %165, label %192

192:                                              ; preds = %240, %173
  %193 = phi i32 [ %241, %240 ], [ %174, %173 ]
  %194 = phi i32 [ %242, %240 ], [ %175, %173 ]
  %195 = phi i32 [ %243, %240 ], [ %176, %173 ]
  %196 = phi i32 [ %244, %240 ], [ %179, %173 ]
  %197 = phi i32 [ %245, %240 ], [ %178, %173 ]
  %198 = phi ptr [ %248, %240 ], [ %163, %173 ]
  %199 = phi i32 [ %247, %240 ], [ %178, %173 ]
  %200 = phi i32 [ %246, %240 ], [ %179, %173 ]
  %201 = getelementptr inbounds %struct.tilebox, ptr %198, i64 0, i32 9
  %202 = load i32, ptr %201, align 8, !tbaa !167
  %203 = add nsw i32 %202, %124
  %204 = getelementptr inbounds %struct.tilebox, ptr %198, i64 0, i32 10
  %205 = load i32, ptr %204, align 4, !tbaa !168
  %206 = add nsw i32 %205, %124
  %207 = getelementptr inbounds %struct.tilebox, ptr %198, i64 0, i32 11
  %208 = load i32, ptr %207, align 8, !tbaa !169
  %209 = add nsw i32 %208, %123
  %210 = getelementptr inbounds %struct.tilebox, ptr %198, i64 0, i32 12
  %211 = load i32, ptr %210, align 4, !tbaa !170
  %212 = add nsw i32 %211, %123
  %213 = icmp slt i32 %203, %185
  %214 = icmp slt i32 %182, %206
  %215 = select i1 %213, i1 %214, i1 false
  %216 = icmp slt i32 %209, %191
  %217 = select i1 %215, i1 %216, i1 false
  %218 = icmp slt i32 %188, %212
  %219 = select i1 %217, i1 %218, i1 false
  br i1 %219, label %220, label %240

220:                                              ; preds = %192
  %221 = tail call i32 @llvm.smax.i32(i32 %182, i32 %203)
  %222 = tail call i32 @llvm.smin.i32(i32 %185, i32 %206)
  %223 = tail call i32 @llvm.smax.i32(i32 %188, i32 %209)
  %224 = tail call i32 @llvm.smin.i32(i32 %191, i32 %212)
  %225 = icmp slt i32 %199, 1
  %226 = sub nsw i32 %222, %221
  %227 = icmp slt i32 %226, %199
  %228 = select i1 %225, i1 true, i1 %227
  br i1 %228, label %229, label %230

229:                                              ; preds = %220
  store i32 %226, ptr @dx, align 4, !tbaa !17
  br label %230

230:                                              ; preds = %229, %220
  %231 = phi i32 [ %226, %229 ], [ %194, %220 ]
  %232 = phi i32 [ %226, %229 ], [ %195, %220 ]
  %233 = phi i32 [ %226, %229 ], [ %197, %220 ]
  %234 = phi i32 [ %226, %229 ], [ %199, %220 ]
  %235 = icmp slt i32 %200, 1
  %236 = sub nsw i32 %224, %223
  %237 = icmp slt i32 %236, %200
  %238 = select i1 %235, i1 true, i1 %237
  br i1 %238, label %239, label %240

239:                                              ; preds = %230
  store i32 %236, ptr @dy, align 4, !tbaa !17
  br label %240

240:                                              ; preds = %239, %230, %192
  %241 = phi i32 [ %193, %192 ], [ %236, %239 ], [ %193, %230 ]
  %242 = phi i32 [ %194, %192 ], [ %231, %239 ], [ %231, %230 ]
  %243 = phi i32 [ %195, %192 ], [ %232, %239 ], [ %232, %230 ]
  %244 = phi i32 [ %196, %192 ], [ %236, %239 ], [ %196, %230 ]
  %245 = phi i32 [ %197, %192 ], [ %233, %239 ], [ %233, %230 ]
  %246 = phi i32 [ %200, %192 ], [ %236, %239 ], [ %200, %230 ]
  %247 = phi i32 [ %199, %192 ], [ %234, %239 ], [ %234, %230 ]
  %248 = load ptr, ptr %198, align 8, !tbaa !172
  %249 = icmp eq ptr %248, null
  br i1 %249, label %165, label %192, !llvm.loop !359

250:                                              ; preds = %165, %159
  %251 = phi i32 [ 0, %159 ], [ %166, %165 ]
  %252 = phi i32 [ %100, %159 ], [ %167, %165 ]
  %253 = phi i32 [ %101, %159 ], [ %168, %165 ]
  %254 = icmp ne i32 %253, 0
  %255 = icmp ne i32 %251, 0
  %256 = select i1 %254, i1 true, i1 %255
  br i1 %256, label %275, label %257

257:                                              ; preds = %250
  %258 = load i32, ptr %94, align 4, !tbaa !17
  br label %259

259:                                              ; preds = %257, %116, %115, %97
  %260 = phi i32 [ %258, %257 ], [ %98, %116 ], [ %98, %115 ], [ %98, %97 ]
  %261 = phi i32 [ %252, %257 ], [ %100, %116 ], [ %100, %115 ], [ %100, %97 ]
  %262 = phi i32 [ 0, %257 ], [ %101, %116 ], [ %101, %115 ], [ %101, %97 ]
  %263 = add nuw nsw i64 %99, 1
  %264 = sext i32 %260 to i64
  %265 = icmp slt i64 %99, %264
  br i1 %265, label %97, label %266, !llvm.loop !360

266:                                              ; preds = %259, %91, %81
  %267 = phi i32 [ %83, %81 ], [ %83, %91 ], [ %261, %259 ]
  %268 = phi i32 [ %84, %81 ], [ %84, %91 ], [ %262, %259 ]
  %269 = add nuw nsw i64 %82, 1
  %270 = icmp eq i64 %269, %70
  br i1 %270, label %271, label %81, !llvm.loop !361

271:                                              ; preds = %266, %71
  %272 = phi i32 [ %73, %71 ], [ %267, %266 ]
  %273 = add nuw nsw i64 %72, 1
  %274 = icmp eq i64 %273, %69
  br i1 %274, label %275, label %71, !llvm.loop !362

275:                                              ; preds = %271, %250, %152, %7
  %276 = phi i32 [ %.lcssa, %152 ], [ 0, %7 ], [ %103, %250 ], [ 0, %271 ]
  ret i32 %276
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @padOverlaps() #12 {
  %1 = load i32, ptr @numcells, align 4, !tbaa !17
  %2 = icmp slt i32 %1, 1
  br i1 %2, label %212, label %3

3:                                                ; preds = %0
  %4 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %5 = load i32, ptr @blockl, align 4, !tbaa !17
  %6 = load i32, ptr @blockr, align 4
  %7 = load i32, ptr @blockb, align 4
  %8 = load i32, ptr @blockt, align 4
  %9 = load i32, ptr @numpads, align 4
  %10 = add i32 %9, %1
  %11 = icmp slt i32 %9, 1
  %12 = zext i32 %1 to i64
  %13 = tail call i32 @llvm.smax.i32(i32 %1, i32 %10)
  %14 = sext i32 %10 to i64
  %15 = add nuw i32 %1, 1
  %16 = zext i32 %15 to i64
  %17 = sext i32 %13 to i64
  %18 = sext i32 %13 to i64
  %19 = sext i32 %13 to i64
  %20 = sext i32 %13 to i64
  br label %21

21:                                               ; preds = %209, %3
  %22 = phi i64 [ 1, %3 ], [ %210, %209 ]
  %23 = getelementptr inbounds ptr, ptr %4, i64 %22
  %24 = load ptr, ptr %23, align 8, !tbaa !7
  %25 = getelementptr inbounds %struct.cellbox, ptr %24, i64 0, i32 5
  %26 = load i32, ptr %25, align 8, !tbaa !45
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds %struct.cellbox, ptr %24, i64 0, i32 21, i64 %27
  %29 = load ptr, ptr %28, align 8, !tbaa !7
  %30 = getelementptr inbounds %struct.cellbox, ptr %24, i64 0, i32 2
  %31 = load i32, ptr %30, align 4, !tbaa !164
  %32 = getelementptr inbounds %struct.tilebox, ptr %29, i64 0, i32 9
  %33 = load i32, ptr %32, align 8, !tbaa !167
  %34 = add nsw i32 %33, %31
  %35 = getelementptr inbounds %struct.tilebox, ptr %29, i64 0, i32 10
  %36 = load i32, ptr %35, align 4, !tbaa !168
  %37 = add nsw i32 %36, %31
  %38 = getelementptr inbounds %struct.cellbox, ptr %24, i64 0, i32 3
  %39 = load i32, ptr %38, align 8, !tbaa !165
  %40 = getelementptr inbounds %struct.tilebox, ptr %29, i64 0, i32 11
  %41 = load i32, ptr %40, align 8, !tbaa !169
  %42 = add nsw i32 %41, %39
  %43 = getelementptr inbounds %struct.tilebox, ptr %29, i64 0, i32 12
  %44 = load i32, ptr %43, align 4, !tbaa !170
  %45 = add nsw i32 %44, %39
  %46 = icmp slt i32 %34, %5
  %47 = icmp sgt i32 %37, %6
  %48 = select i1 %46, i1 true, i1 %47
  %49 = icmp slt i32 %42, %7
  %50 = select i1 %48, i1 true, i1 %49
  %51 = icmp sgt i32 %45, %8
  %52 = select i1 %50, i1 true, i1 %51
  br i1 %52, label %53, label %209

53:                                               ; preds = %21
  br i1 %46, label %54, label %92

54:                                               ; preds = %57, %53
  %55 = phi i64 [ %58, %57 ], [ %12, %53 ]
  %56 = icmp eq i64 %55, %20
  br i1 %56, label %209, label %57

57:                                               ; preds = %54
  %58 = add nuw nsw i64 %55, 1
  %59 = getelementptr inbounds ptr, ptr %4, i64 %58
  %60 = load ptr, ptr %59, align 8, !tbaa !7
  %61 = getelementptr inbounds %struct.cellbox, ptr %60, i64 0, i32 11
  %62 = load i32, ptr %61, align 8, !tbaa !363
  %63 = icmp eq i32 %62, 1
  br i1 %63, label %64, label %54, !llvm.loop !364

64:                                               ; preds = %57
  %.lcssa3 = phi ptr [ %60, %57 ]
  %65 = getelementptr inbounds %struct.cellbox, ptr %.lcssa3, i64 0, i32 2
  %66 = load i32, ptr %65, align 4, !tbaa !164
  %67 = getelementptr inbounds %struct.cellbox, ptr %.lcssa3, i64 0, i32 5
  %68 = load i32, ptr %67, align 8, !tbaa !45
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds %struct.cellbox, ptr %.lcssa3, i64 0, i32 21, i64 %69
  %71 = load ptr, ptr %70, align 8, !tbaa !7
  %72 = getelementptr inbounds %struct.tilebox, ptr %71, i64 0, i32 10
  %73 = load i32, ptr %72, align 4, !tbaa !168
  %74 = sub i32 %66, %34
  %75 = add i32 %74, %73
  %76 = icmp slt i32 %75, 1
  %77 = select i1 %76, i1 true, i1 %11
  br i1 %77, label %209, label %78

78:                                               ; preds = %90, %64
  %79 = phi i64 [ %80, %90 ], [ %12, %64 ]
  %80 = add nuw nsw i64 %79, 1
  %81 = getelementptr inbounds ptr, ptr %4, i64 %80
  %82 = load ptr, ptr %81, align 8, !tbaa !7
  %83 = getelementptr inbounds %struct.cellbox, ptr %82, i64 0, i32 11
  %84 = load i32, ptr %83, align 8, !tbaa !363
  %85 = icmp eq i32 %84, 1
  br i1 %85, label %86, label %90

86:                                               ; preds = %78
  %87 = getelementptr inbounds %struct.cellbox, ptr %82, i64 0, i32 2
  %88 = load i32, ptr %87, align 4, !tbaa !164
  %89 = sub nsw i32 %88, %75
  store i32 %89, ptr %87, align 4, !tbaa !164
  br label %90

90:                                               ; preds = %86, %78
  %91 = icmp slt i64 %80, %14
  br i1 %91, label %78, label %209, !llvm.loop !365

92:                                               ; preds = %53
  br i1 %47, label %93, label %131

93:                                               ; preds = %96, %92
  %94 = phi i64 [ %97, %96 ], [ %12, %92 ]
  %95 = icmp eq i64 %94, %19
  br i1 %95, label %209, label %96

96:                                               ; preds = %93
  %97 = add nuw nsw i64 %94, 1
  %98 = getelementptr inbounds ptr, ptr %4, i64 %97
  %99 = load ptr, ptr %98, align 8, !tbaa !7
  %100 = getelementptr inbounds %struct.cellbox, ptr %99, i64 0, i32 11
  %101 = load i32, ptr %100, align 8, !tbaa !363
  %102 = icmp eq i32 %101, 3
  br i1 %102, label %103, label %93, !llvm.loop !366

103:                                              ; preds = %96
  %.lcssa2 = phi ptr [ %99, %96 ]
  %104 = getelementptr inbounds %struct.cellbox, ptr %.lcssa2, i64 0, i32 2
  %105 = load i32, ptr %104, align 4, !tbaa !164
  %106 = getelementptr inbounds %struct.cellbox, ptr %.lcssa2, i64 0, i32 5
  %107 = load i32, ptr %106, align 8, !tbaa !45
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds %struct.cellbox, ptr %.lcssa2, i64 0, i32 21, i64 %108
  %110 = load ptr, ptr %109, align 8, !tbaa !7
  %111 = getelementptr inbounds %struct.tilebox, ptr %110, i64 0, i32 9
  %112 = load i32, ptr %111, align 8, !tbaa !167
  %113 = add i32 %105, %112
  %114 = sub i32 %37, %113
  %115 = icmp slt i32 %114, 1
  %116 = select i1 %115, i1 true, i1 %11
  br i1 %116, label %209, label %117

117:                                              ; preds = %129, %103
  %118 = phi i64 [ %119, %129 ], [ %12, %103 ]
  %119 = add nuw nsw i64 %118, 1
  %120 = getelementptr inbounds ptr, ptr %4, i64 %119
  %121 = load ptr, ptr %120, align 8, !tbaa !7
  %122 = getelementptr inbounds %struct.cellbox, ptr %121, i64 0, i32 11
  %123 = load i32, ptr %122, align 8, !tbaa !363
  %124 = icmp eq i32 %123, 3
  br i1 %124, label %125, label %129

125:                                              ; preds = %117
  %126 = getelementptr inbounds %struct.cellbox, ptr %121, i64 0, i32 2
  %127 = load i32, ptr %126, align 4, !tbaa !164
  %128 = add nsw i32 %127, %114
  store i32 %128, ptr %126, align 4, !tbaa !164
  br label %129

129:                                              ; preds = %125, %117
  %130 = icmp slt i64 %119, %14
  br i1 %130, label %117, label %209, !llvm.loop !367

131:                                              ; preds = %92
  br i1 %49, label %132, label %170

132:                                              ; preds = %135, %131
  %133 = phi i64 [ %136, %135 ], [ %12, %131 ]
  %134 = icmp eq i64 %133, %18
  br i1 %134, label %209, label %135

135:                                              ; preds = %132
  %136 = add nuw nsw i64 %133, 1
  %137 = getelementptr inbounds ptr, ptr %4, i64 %136
  %138 = load ptr, ptr %137, align 8, !tbaa !7
  %139 = getelementptr inbounds %struct.cellbox, ptr %138, i64 0, i32 11
  %140 = load i32, ptr %139, align 8, !tbaa !363
  %141 = icmp eq i32 %140, 4
  br i1 %141, label %142, label %132, !llvm.loop !368

142:                                              ; preds = %135
  %.lcssa1 = phi ptr [ %138, %135 ]
  %143 = getelementptr inbounds %struct.cellbox, ptr %.lcssa1, i64 0, i32 3
  %144 = load i32, ptr %143, align 8, !tbaa !165
  %145 = getelementptr inbounds %struct.cellbox, ptr %.lcssa1, i64 0, i32 5
  %146 = load i32, ptr %145, align 8, !tbaa !45
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds %struct.cellbox, ptr %.lcssa1, i64 0, i32 21, i64 %147
  %149 = load ptr, ptr %148, align 8, !tbaa !7
  %150 = getelementptr inbounds %struct.tilebox, ptr %149, i64 0, i32 12
  %151 = load i32, ptr %150, align 4, !tbaa !170
  %152 = sub i32 %144, %42
  %153 = add i32 %152, %151
  %154 = icmp slt i32 %153, 1
  %155 = select i1 %154, i1 true, i1 %11
  br i1 %155, label %209, label %156

156:                                              ; preds = %168, %142
  %157 = phi i64 [ %158, %168 ], [ %12, %142 ]
  %158 = add nuw nsw i64 %157, 1
  %159 = getelementptr inbounds ptr, ptr %4, i64 %158
  %160 = load ptr, ptr %159, align 8, !tbaa !7
  %161 = getelementptr inbounds %struct.cellbox, ptr %160, i64 0, i32 11
  %162 = load i32, ptr %161, align 8, !tbaa !363
  %163 = icmp eq i32 %162, 4
  br i1 %163, label %164, label %168

164:                                              ; preds = %156
  %165 = getelementptr inbounds %struct.cellbox, ptr %160, i64 0, i32 3
  %166 = load i32, ptr %165, align 8, !tbaa !165
  %167 = sub nsw i32 %166, %153
  store i32 %167, ptr %165, align 8, !tbaa !165
  br label %168

168:                                              ; preds = %164, %156
  %169 = icmp slt i64 %158, %14
  br i1 %169, label %156, label %209, !llvm.loop !369

170:                                              ; preds = %131
  br i1 %51, label %171, label %209

171:                                              ; preds = %174, %170
  %172 = phi i64 [ %175, %174 ], [ %12, %170 ]
  %173 = icmp eq i64 %172, %17
  br i1 %173, label %209, label %174

174:                                              ; preds = %171
  %175 = add nuw nsw i64 %172, 1
  %176 = getelementptr inbounds ptr, ptr %4, i64 %175
  %177 = load ptr, ptr %176, align 8, !tbaa !7
  %178 = getelementptr inbounds %struct.cellbox, ptr %177, i64 0, i32 11
  %179 = load i32, ptr %178, align 8, !tbaa !363
  %180 = icmp eq i32 %179, 2
  br i1 %180, label %181, label %171, !llvm.loop !370

181:                                              ; preds = %174
  %.lcssa = phi ptr [ %177, %174 ]
  %182 = getelementptr inbounds %struct.cellbox, ptr %.lcssa, i64 0, i32 3
  %183 = load i32, ptr %182, align 8, !tbaa !165
  %184 = getelementptr inbounds %struct.cellbox, ptr %.lcssa, i64 0, i32 5
  %185 = load i32, ptr %184, align 8, !tbaa !45
  %186 = sext i32 %185 to i64
  %187 = getelementptr inbounds %struct.cellbox, ptr %.lcssa, i64 0, i32 21, i64 %186
  %188 = load ptr, ptr %187, align 8, !tbaa !7
  %189 = getelementptr inbounds %struct.tilebox, ptr %188, i64 0, i32 11
  %190 = load i32, ptr %189, align 8, !tbaa !169
  %191 = add i32 %183, %190
  %192 = sub i32 %45, %191
  %193 = icmp slt i32 %192, 1
  %194 = select i1 %193, i1 true, i1 %11
  br i1 %194, label %209, label %195

195:                                              ; preds = %207, %181
  %196 = phi i64 [ %197, %207 ], [ %12, %181 ]
  %197 = add nuw nsw i64 %196, 1
  %198 = getelementptr inbounds ptr, ptr %4, i64 %197
  %199 = load ptr, ptr %198, align 8, !tbaa !7
  %200 = getelementptr inbounds %struct.cellbox, ptr %199, i64 0, i32 11
  %201 = load i32, ptr %200, align 8, !tbaa !363
  %202 = icmp eq i32 %201, 2
  br i1 %202, label %203, label %207

203:                                              ; preds = %195
  %204 = getelementptr inbounds %struct.cellbox, ptr %199, i64 0, i32 3
  %205 = load i32, ptr %204, align 8, !tbaa !165
  %206 = add nsw i32 %205, %192
  store i32 %206, ptr %204, align 8, !tbaa !165
  br label %207

207:                                              ; preds = %203, %195
  %208 = icmp slt i64 %197, %14
  br i1 %208, label %195, label %209, !llvm.loop !371

209:                                              ; preds = %207, %181, %171, %170, %168, %142, %132, %129, %103, %93, %90, %64, %54, %21
  %210 = add nuw nsw i64 %22, 1
  %211 = icmp eq i64 %210, %16
  br i1 %211, label %212, label %21, !llvm.loop !372

212:                                              ; preds = %209, %0
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @fulllink() #0 {
  %1 = alloca ptr, align 8
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %1) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %3) #47
  %4 = tail call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #45
  store ptr %4, ptr @Hlist, align 8, !tbaa !7
  %5 = load i32, ptr @edgeCount, align 4, !tbaa !17
  store i32 %5, ptr %4, align 8, !tbaa !138
  %6 = tail call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #45
  %7 = getelementptr inbounds %struct.dlink2, ptr %4, i64 0, i32 2
  store ptr %6, ptr %7, align 8, !tbaa !150
  %8 = getelementptr inbounds %struct.dlink2, ptr %4, i64 0, i32 1
  store ptr null, ptr %8, align 8, !tbaa !152
  %9 = getelementptr inbounds %struct.dlink2, ptr %6, i64 0, i32 2
  store ptr null, ptr %9, align 8, !tbaa !150
  %10 = getelementptr inbounds %struct.dlink2, ptr %6, i64 0, i32 1
  store ptr %4, ptr %10, align 8, !tbaa !152
  %11 = add nsw i32 %5, -2
  store i32 %11, ptr %6, align 8, !tbaa !138
  store ptr %6, ptr @Hend, align 8, !tbaa !7
  %12 = tail call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #45
  store ptr %12, ptr @Vlist, align 8, !tbaa !7
  %13 = add nsw i32 %5, -3
  store i32 %13, ptr %12, align 8, !tbaa !138
  %14 = tail call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #45
  %15 = getelementptr inbounds %struct.dlink2, ptr %12, i64 0, i32 2
  store ptr %14, ptr %15, align 8, !tbaa !150
  %16 = getelementptr inbounds %struct.dlink2, ptr %12, i64 0, i32 1
  store ptr null, ptr %16, align 8, !tbaa !152
  %17 = getelementptr inbounds %struct.dlink2, ptr %14, i64 0, i32 2
  store ptr null, ptr %17, align 8, !tbaa !150
  %18 = getelementptr inbounds %struct.dlink2, ptr %14, i64 0, i32 1
  store ptr %12, ptr %18, align 8, !tbaa !152
  %19 = add nsw i32 %5, -1
  store i32 %19, ptr %14, align 8, !tbaa !138
  store ptr %14, ptr @Vend, align 8, !tbaa !7
  br label %20

20:                                               ; preds = %24, %0
  %21 = phi ptr [ %4, %0 ], [ %25, %24 ]
  call void @tpop(ptr noundef nonnull @hEdgeRoot, ptr noundef nonnull %1, ptr noundef nonnull %2, ptr noundef nonnull %3) #44
  %22 = load ptr, ptr %1, align 8, !tbaa !7
  %23 = icmp eq ptr %22, null
  br i1 %23, label %30, label %24

24:                                               ; preds = %20
  %25 = call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #45
  %26 = load i32, ptr %3, align 4, !tbaa !17
  store i32 %26, ptr %25, align 8, !tbaa !138
  %27 = getelementptr inbounds %struct.dlink2, ptr %25, i64 0, i32 1
  store ptr %21, ptr %27, align 8, !tbaa !152
  %28 = getelementptr inbounds %struct.dlink2, ptr %25, i64 0, i32 2
  store ptr %6, ptr %28, align 8, !tbaa !150
  %29 = getelementptr inbounds %struct.dlink2, ptr %21, i64 0, i32 2
  store ptr %25, ptr %29, align 8, !tbaa !150
  store ptr %25, ptr %10, align 8, !tbaa !152
  br label %20

30:                                               ; preds = %20
  %31 = load ptr, ptr @Vlist, align 8, !tbaa !7
  %32 = getelementptr inbounds %struct.dlink2, ptr %31, i64 0, i32 2
  %33 = load ptr, ptr %32, align 8, !tbaa !150
  %34 = getelementptr inbounds %struct.dlink2, ptr %33, i64 0, i32 1
  br label %35

35:                                               ; preds = %39, %30
  %36 = phi ptr [ %31, %30 ], [ %40, %39 ]
  call void @tpop(ptr noundef nonnull @vEdgeRoot, ptr noundef nonnull %1, ptr noundef nonnull %2, ptr noundef nonnull %3) #44
  %37 = load ptr, ptr %1, align 8, !tbaa !7
  %38 = icmp eq ptr %37, null
  br i1 %38, label %45, label %39

39:                                               ; preds = %35
  %40 = call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #45
  %41 = load i32, ptr %3, align 4, !tbaa !17
  store i32 %41, ptr %40, align 8, !tbaa !138
  %42 = getelementptr inbounds %struct.dlink2, ptr %40, i64 0, i32 1
  store ptr %36, ptr %42, align 8, !tbaa !152
  %43 = getelementptr inbounds %struct.dlink2, ptr %40, i64 0, i32 2
  store ptr %33, ptr %43, align 8, !tbaa !150
  %44 = getelementptr inbounds %struct.dlink2, ptr %36, i64 0, i32 2
  store ptr %40, ptr %44, align 8, !tbaa !150
  store ptr %40, ptr %34, align 8, !tbaa !152
  br label %35

45:                                               ; preds = %35
  call void @makeVertDownTree() #43
  call void @makeHoriRiteTree() #43
  call void @makeVertTree() #43
  call void @makeHoriTree() #43
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %3) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #47
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %1) #47
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @makeVertDownTree() #0 {
  store ptr null, ptr @VDroot, align 8, !tbaa !7
  %1 = tail call noalias dereferenceable_or_null(800) ptr @malloc(i64 noundef 800) #45
  store ptr %1, ptr @VDptrs, align 8, !tbaa !7
  %2 = load ptr, ptr @Vlist, align 8, !tbaa !7
  %3 = icmp eq ptr %2, null
  br i1 %3, label %42, label %4

4:                                                ; preds = %0
  %5 = load ptr, ptr @edgeList, align 8, !tbaa !7
  br label %6

6:                                                ; preds = %35, %4
  %7 = phi ptr [ %36, %35 ], [ %5, %4 ]
  %8 = phi ptr [ %40, %35 ], [ %2, %4 ]
  %9 = phi i32 [ %38, %35 ], [ 0, %4 ]
  %10 = phi i32 [ %37, %35 ], [ -1000000, %4 ]
  %11 = load i32, ptr %8, align 8, !tbaa !138
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds %struct.edgebox, ptr %7, i64 %12, i32 5
  %14 = load i32, ptr %13, align 4, !tbaa !142
  %15 = icmp sgt i32 %14, 0
  br i1 %15, label %35, label %16

16:                                               ; preds = %6
  %17 = getelementptr inbounds %struct.edgebox, ptr %7, i64 %12, i32 3
  %18 = load i32, ptr %17, align 4, !tbaa !140
  %19 = icmp sgt i32 %18, %10
  br i1 %19, label %20, label %35

20:                                               ; preds = %16
  %21 = add nsw i32 %9, 1
  %22 = srem i32 %21, 100
  %23 = icmp eq i32 %22, 0
  %24 = load ptr, ptr @VDptrs, align 8, !tbaa !7
  br i1 %23, label %25, label %30

25:                                               ; preds = %20
  %26 = add nsw i32 %9, 101
  %27 = sext i32 %26 to i64
  %28 = shl nsw i64 %27, 3
  %29 = tail call ptr @realloc(ptr noundef %24, i64 noundef %28) #46
  store ptr %29, ptr @VDptrs, align 8, !tbaa !7
  br label %30

30:                                               ; preds = %25, %20
  %31 = phi ptr [ %29, %25 ], [ %24, %20 ]
  %32 = sext i32 %21 to i64
  %33 = getelementptr inbounds ptr, ptr %31, i64 %32
  store ptr %8, ptr %33, align 8, !tbaa !7
  tail call void @tinsert(ptr noundef nonnull @VDroot, i32 noundef %18, i32 noundef %21) #44
  %34 = load ptr, ptr @edgeList, align 8, !tbaa !7
  br label %35

35:                                               ; preds = %30, %16, %6
  %36 = phi ptr [ %7, %6 ], [ %34, %30 ], [ %7, %16 ]
  %37 = phi i32 [ %10, %6 ], [ %18, %30 ], [ %10, %16 ]
  %38 = phi i32 [ %9, %6 ], [ %21, %30 ], [ %9, %16 ]
  %39 = getelementptr inbounds %struct.dlink2, ptr %8, i64 0, i32 2
  %40 = load ptr, ptr %39, align 8, !tbaa !7
  %41 = icmp eq ptr %40, null
  br i1 %41, label %42, label %6, !llvm.loop !373

42:                                               ; preds = %35, %0
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @makeHoriRiteTree() #0 {
  store ptr null, ptr @HRroot, align 8, !tbaa !7
  %1 = tail call noalias dereferenceable_or_null(800) ptr @malloc(i64 noundef 800) #45
  store ptr %1, ptr @HRptrs, align 8, !tbaa !7
  %2 = load ptr, ptr @Hlist, align 8, !tbaa !7
  %3 = icmp eq ptr %2, null
  br i1 %3, label %42, label %4

4:                                                ; preds = %0
  %5 = load ptr, ptr @edgeList, align 8, !tbaa !7
  br label %6

6:                                                ; preds = %35, %4
  %7 = phi ptr [ %36, %35 ], [ %5, %4 ]
  %8 = phi ptr [ %40, %35 ], [ %2, %4 ]
  %9 = phi i32 [ %38, %35 ], [ 0, %4 ]
  %10 = phi i32 [ %37, %35 ], [ -1000000, %4 ]
  %11 = load i32, ptr %8, align 8, !tbaa !138
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds %struct.edgebox, ptr %7, i64 %12, i32 5
  %14 = load i32, ptr %13, align 4, !tbaa !142
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %35, label %16

16:                                               ; preds = %6
  %17 = getelementptr inbounds %struct.edgebox, ptr %7, i64 %12, i32 3
  %18 = load i32, ptr %17, align 4, !tbaa !140
  %19 = icmp sgt i32 %18, %10
  br i1 %19, label %20, label %35

20:                                               ; preds = %16
  %21 = add nsw i32 %9, 1
  %22 = srem i32 %21, 100
  %23 = icmp eq i32 %22, 0
  %24 = load ptr, ptr @HRptrs, align 8, !tbaa !7
  br i1 %23, label %25, label %30

25:                                               ; preds = %20
  %26 = add nsw i32 %9, 101
  %27 = sext i32 %26 to i64
  %28 = shl nsw i64 %27, 3
  %29 = tail call ptr @realloc(ptr noundef %24, i64 noundef %28) #46
  store ptr %29, ptr @HRptrs, align 8, !tbaa !7
  br label %30

30:                                               ; preds = %25, %20
  %31 = phi ptr [ %29, %25 ], [ %24, %20 ]
  %32 = sext i32 %21 to i64
  %33 = getelementptr inbounds ptr, ptr %31, i64 %32
  store ptr %8, ptr %33, align 8, !tbaa !7
  tail call void @tinsert(ptr noundef nonnull @HRroot, i32 noundef %18, i32 noundef %21) #44
  %34 = load ptr, ptr @edgeList, align 8, !tbaa !7
  br label %35

35:                                               ; preds = %30, %16, %6
  %36 = phi ptr [ %7, %6 ], [ %34, %30 ], [ %7, %16 ]
  %37 = phi i32 [ %10, %6 ], [ %18, %30 ], [ %10, %16 ]
  %38 = phi i32 [ %9, %6 ], [ %21, %30 ], [ %9, %16 ]
  %39 = getelementptr inbounds %struct.dlink2, ptr %8, i64 0, i32 2
  %40 = load ptr, ptr %39, align 8, !tbaa !7
  %41 = icmp eq ptr %40, null
  br i1 %41, label %42, label %6, !llvm.loop !374

42:                                               ; preds = %35, %0
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @makeVertTree() #0 {
  store ptr null, ptr @Vroot, align 8, !tbaa !7
  %1 = tail call noalias dereferenceable_or_null(800) ptr @malloc(i64 noundef 800) #45
  store ptr %1, ptr @Vptrs, align 8, !tbaa !7
  %2 = load ptr, ptr @Vlist, align 8, !tbaa !7
  %3 = icmp eq ptr %2, null
  br i1 %3, label %38, label %4

4:                                                ; preds = %0
  %5 = load ptr, ptr @edgeList, align 8, !tbaa !7
  br label %6

6:                                                ; preds = %31, %4
  %7 = phi ptr [ %32, %31 ], [ %5, %4 ]
  %8 = phi ptr [ %36, %31 ], [ %2, %4 ]
  %9 = phi i32 [ %34, %31 ], [ 0, %4 ]
  %10 = phi i32 [ %33, %31 ], [ -1000000, %4 ]
  %11 = load i32, ptr %8, align 8, !tbaa !138
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds %struct.edgebox, ptr %7, i64 %12, i32 3
  %14 = load i32, ptr %13, align 4, !tbaa !140
  %15 = icmp sgt i32 %14, %10
  br i1 %15, label %16, label %31

16:                                               ; preds = %6
  %17 = add nsw i32 %9, 1
  %18 = srem i32 %17, 100
  %19 = icmp eq i32 %18, 0
  %20 = load ptr, ptr @Vptrs, align 8, !tbaa !7
  br i1 %19, label %21, label %26

21:                                               ; preds = %16
  %22 = add nsw i32 %9, 101
  %23 = sext i32 %22 to i64
  %24 = shl nsw i64 %23, 3
  %25 = tail call ptr @realloc(ptr noundef %20, i64 noundef %24) #46
  store ptr %25, ptr @Vptrs, align 8, !tbaa !7
  br label %26

26:                                               ; preds = %21, %16
  %27 = phi ptr [ %25, %21 ], [ %20, %16 ]
  %28 = sext i32 %17 to i64
  %29 = getelementptr inbounds ptr, ptr %27, i64 %28
  store ptr %8, ptr %29, align 8, !tbaa !7
  tail call void @tinsert(ptr noundef nonnull @Vroot, i32 noundef %14, i32 noundef %17) #44
  %30 = load ptr, ptr @edgeList, align 8, !tbaa !7
  br label %31

31:                                               ; preds = %26, %6
  %32 = phi ptr [ %30, %26 ], [ %7, %6 ]
  %33 = phi i32 [ %14, %26 ], [ %10, %6 ]
  %34 = phi i32 [ %17, %26 ], [ %9, %6 ]
  %35 = getelementptr inbounds %struct.dlink2, ptr %8, i64 0, i32 2
  %36 = load ptr, ptr %35, align 8, !tbaa !7
  %37 = icmp eq ptr %36, null
  br i1 %37, label %38, label %6, !llvm.loop !375

38:                                               ; preds = %31, %0
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @makeHoriTree() #0 {
  store ptr null, ptr @Hroot, align 8, !tbaa !7
  %1 = tail call noalias dereferenceable_or_null(800) ptr @malloc(i64 noundef 800) #45
  store ptr %1, ptr @Hptrs, align 8, !tbaa !7
  %2 = load ptr, ptr @Hlist, align 8, !tbaa !7
  %3 = icmp eq ptr %2, null
  br i1 %3, label %38, label %4

4:                                                ; preds = %0
  %5 = load ptr, ptr @edgeList, align 8, !tbaa !7
  br label %6

6:                                                ; preds = %31, %4
  %7 = phi ptr [ %32, %31 ], [ %5, %4 ]
  %8 = phi ptr [ %36, %31 ], [ %2, %4 ]
  %9 = phi i32 [ %34, %31 ], [ 0, %4 ]
  %10 = phi i32 [ %33, %31 ], [ -1000000, %4 ]
  %11 = load i32, ptr %8, align 8, !tbaa !138
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds %struct.edgebox, ptr %7, i64 %12, i32 3
  %14 = load i32, ptr %13, align 4, !tbaa !140
  %15 = icmp sgt i32 %14, %10
  br i1 %15, label %16, label %31

16:                                               ; preds = %6
  %17 = add nsw i32 %9, 1
  %18 = srem i32 %17, 100
  %19 = icmp eq i32 %18, 0
  %20 = load ptr, ptr @Hptrs, align 8, !tbaa !7
  br i1 %19, label %21, label %26

21:                                               ; preds = %16
  %22 = add nsw i32 %9, 101
  %23 = sext i32 %22 to i64
  %24 = shl nsw i64 %23, 3
  %25 = tail call ptr @realloc(ptr noundef %20, i64 noundef %24) #46
  store ptr %25, ptr @Hptrs, align 8, !tbaa !7
  br label %26

26:                                               ; preds = %21, %16
  %27 = phi ptr [ %25, %21 ], [ %20, %16 ]
  %28 = sext i32 %17 to i64
  %29 = getelementptr inbounds ptr, ptr %27, i64 %28
  store ptr %8, ptr %29, align 8, !tbaa !7
  tail call void @tinsert(ptr noundef nonnull @Hroot, i32 noundef %14, i32 noundef %17) #44
  %30 = load ptr, ptr @edgeList, align 8, !tbaa !7
  br label %31

31:                                               ; preds = %26, %6
  %32 = phi ptr [ %30, %26 ], [ %7, %6 ]
  %33 = phi i32 [ %14, %26 ], [ %10, %6 ]
  %34 = phi i32 [ %17, %26 ], [ %9, %6 ]
  %35 = getelementptr inbounds %struct.dlink2, ptr %8, i64 0, i32 2
  %36 = load ptr, ptr %35, align 8, !tbaa !7
  %37 = icmp eq ptr %36, null
  br i1 %37, label %38, label %6, !llvm.loop !376

38:                                               ; preds = %31, %0
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @fuloop() #0 {
  store i32 0, ptr @flips, align 4, !tbaa !17
  %1 = load double, ptr @Tsave, align 8, !tbaa !36
  %2 = tail call double @log10(double noundef %1) #44
  %3 = fcmp ogt double %2, 6.000000e+00
  %4 = fadd double %2, -1.000000e+00
  %5 = fmul double %4, 2.000000e+00
  %6 = select i1 %3, double %5, double 1.000000e+01
  %7 = tail call double @exp2(double %6) #47
  %8 = load double, ptr @T, align 8, !tbaa !36
  %9 = tail call double @log10(double noundef %8) #44
  %10 = fmul double %9, 2.000000e+00
  %11 = tail call double @exp2(double %10) #47
  %12 = load i32, ptr @bdxlength, align 4, !tbaa !17
  %13 = load double, ptr @T, align 8, !tbaa !36
  %14 = tail call double @log10(double noundef %13) #44
  %15 = fmul double %14, 2.000000e+00
  %16 = tail call double @exp2(double %15) #47
  %17 = load i32, ptr @bdylength, align 4, !tbaa !17
  %18 = insertelement <2 x double> poison, double %16, i64 0
  %19 = insertelement <2 x double> %18, double %11, i64 1
  %20 = insertelement <2 x double> poison, double %7, i64 0
  %21 = shufflevector <2 x double> %20, <2 x double> poison, <2 x i32> zeroinitializer
  %22 = fdiv <2 x double> %19, %21
  %23 = insertelement <2 x i32> poison, i32 %17, i64 0
  %24 = insertelement <2 x i32> %23, i32 %12, i64 1
  %25 = sitofp <2 x i32> %24 to <2 x double>
  %26 = fmul <2 x double> %22, %25
  %27 = fptosi <2 x double> %26 to <2 x i32>
  %28 = extractelement <2 x i32> %27, i64 1
  %29 = shl nsw i32 %28, 1
  %30 = tail call i32 @llvm.smin.i32(i32 %29, i32 %12)
  %31 = icmp slt <2 x i32> %27, <i32 2, i32 2>
  %32 = extractelement <2 x i1> %31, i64 1
  %33 = select i1 %32, i32 3, i32 %30
  %34 = extractelement <2 x i32> %27, i64 0
  %35 = shl nsw i32 %34, 1
  %36 = tail call i32 @llvm.smin.i32(i32 %35, i32 %17)
  %37 = extractelement <2 x i1> %31, i64 0
  %38 = select i1 %37, i32 3, i32 %36
  %39 = sdiv i32 %33, 3
  %40 = sdiv i32 %38, 3
  %41 = load ptr, ptr @fpo, align 8, !tbaa !7
  %42 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %41, ptr noundef nonnull @.str.55, i32 noundef %33) #43
  %43 = load ptr, ptr @fpo, align 8, !tbaa !7
  %44 = load i32, ptr @bdxlength, align 4, !tbaa !17
  %45 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %43, ptr noundef nonnull @.str.1.56, i32 noundef %44) #43
  %46 = load ptr, ptr @fpo, align 8, !tbaa !7
  %47 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %46, ptr noundef nonnull @.str.2.57, i32 noundef %38) #43
  %48 = load ptr, ptr @fpo, align 8, !tbaa !7
  %49 = load i32, ptr @bdylength, align 4, !tbaa !17
  %50 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %48, ptr noundef nonnull @.str.3.58, i32 noundef %49) #43
  %51 = load ptr, ptr @fpo, align 8, !tbaa !7
  %52 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %51, ptr noundef nonnull @.str.4.59, i32 noundef %39, i32 noundef %40) #43
  %53 = load i32, ptr @attmax, align 4, !tbaa !17
  %54 = icmp sgt i32 %53, 0
  br i1 %54, label %55, label %216

55:                                               ; preds = %213, %0
  %56 = phi i32 [ %200, %213 ], [ 0, %0 ]
  %57 = phi i32 [ %199, %213 ], [ 0, %0 ]
  %58 = load i32, ptr @randVar, align 4, !tbaa !17
  %59 = load i32, ptr @numcells, align 4, !tbaa !17
  %60 = sitofp i32 %59 to double
  %61 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %62 = load i32, ptr @blockl, align 4
  %63 = load i32, ptr @blockr, align 4
  %64 = load i32, ptr @blockb, align 4
  %65 = load i32, ptr @blockt, align 4
  br label %66

66:                                               ; preds = %76, %55
  %67 = phi i32 [ %58, %55 ], [ %77, %76 ]
  %68 = mul nsw i32 %67, 1103515245
  %69 = add nsw i32 %68, 12345
  %70 = and i32 %69, 2147483647
  %71 = sitofp i32 %70 to double
  %72 = fdiv double %71, 0x41DFFFFFFFC00000
  %73 = fmul double %72, %60
  %74 = fptosi double %73 to i32
  %75 = icmp eq i32 %59, %74
  br i1 %75, label %76, label %78

76:                                               ; preds = %127, %78, %66
  %77 = phi i32 [ %69, %66 ], [ %69, %78 ], [ %147, %127 ]
  br label %66, !llvm.loop !377

78:                                               ; preds = %66
  %79 = add nsw i32 %74, 1
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds ptr, ptr %61, i64 %80
  %82 = load ptr, ptr %81, align 8, !tbaa !7
  %83 = getelementptr inbounds %struct.cellbox, ptr %82, i64 0, i32 1
  %84 = load i32, ptr %83, align 8, !tbaa !378
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %76

86:                                               ; preds = %78
  %87 = getelementptr inbounds %struct.cellbox, ptr %82, i64 0, i32 2
  %88 = load i32, ptr %87, align 4, !tbaa !164
  %89 = getelementptr inbounds %struct.cellbox, ptr %82, i64 0, i32 3
  %90 = load i32, ptr %89, align 8, !tbaa !165
  %91 = sub nsw i32 %88, %33
  %92 = icmp sgt i32 %62, %91
  br i1 %92, label %93, label %96

93:                                               ; preds = %86
  %94 = sub nsw i32 %62, %88
  %95 = sdiv i32 %94, %39
  br label %104

96:                                               ; preds = %86
  %97 = icmp sgt i32 %63, %91
  br i1 %97, label %101, label %98

98:                                               ; preds = %96
  %99 = sub nsw i32 %63, %88
  %100 = sdiv i32 %99, %39
  br label %104

101:                                              ; preds = %96
  %102 = sdiv i32 %33, %39
  %103 = sub nsw i32 0, %102
  br label %104

104:                                              ; preds = %101, %98, %93
  %105 = phi i32 [ %95, %93 ], [ %100, %98 ], [ %103, %101 ]
  %106 = add nsw i32 %88, %33
  %107 = icmp slt i32 %63, %106
  %108 = sub nsw i32 %63, %88
  %109 = icmp slt i32 %62, %106
  %110 = sub nsw i32 %62, %88
  %111 = select i1 %109, i32 %33, i32 %110
  %112 = select i1 %107, i32 %108, i32 %111
  %113 = sdiv i32 %112, %39
  %114 = sub nsw i32 %90, %38
  %115 = icmp sgt i32 %64, %114
  br i1 %115, label %116, label %119

116:                                              ; preds = %104
  %117 = sub nsw i32 %64, %90
  %118 = sdiv i32 %117, %40
  br label %127

119:                                              ; preds = %104
  %120 = icmp sgt i32 %65, %114
  br i1 %120, label %124, label %121

121:                                              ; preds = %119
  %122 = sub nsw i32 %65, %90
  %123 = sdiv i32 %122, %40
  br label %127

124:                                              ; preds = %119
  %125 = sdiv i32 %38, %40
  %126 = sub nsw i32 0, %125
  br label %127

127:                                              ; preds = %124, %121, %116
  %128 = phi i32 [ %118, %116 ], [ %123, %121 ], [ %126, %124 ]
  %129 = add nsw i32 %90, %38
  %130 = icmp slt i32 %65, %129
  %131 = sub nsw i32 %65, %90
  %132 = icmp slt i32 %64, %129
  %133 = sub nsw i32 %64, %90
  %134 = select i1 %132, i32 %38, i32 %133
  %135 = select i1 %130, i32 %131, i32 %134
  %136 = sdiv i32 %135, %40
  %137 = mul nsw i32 %69, 1103515245
  %138 = add nsw i32 %137, 12345
  %139 = insertelement <2 x i32> poison, i32 %136, i64 0
  %140 = insertelement <2 x i32> %139, i32 %113, i64 1
  %141 = insertelement <2 x i32> poison, i32 %128, i64 0
  %142 = insertelement <2 x i32> %141, i32 %105, i64 1
  %143 = sub <2 x i32> %140, %142
  %144 = add <2 x i32> %143, <i32 1, i32 1>
  %145 = sitofp <2 x i32> %144 to <2 x double>
  %146 = mul nsw i32 %138, 1103515245
  %147 = add nsw i32 %146, 12345
  %148 = insertelement <2 x i32> poison, i32 %147, i64 0
  %149 = insertelement <2 x i32> %148, i32 %138, i64 1
  %150 = and <2 x i32> %149, <i32 2147483647, i32 2147483647>
  %151 = sitofp <2 x i32> %150 to <2 x double>
  %152 = fdiv <2 x double> %151, <double 0x41DFFFFFFFC00000, double 0x41DFFFFFFFC00000>
  %153 = fmul <2 x double> %152, %145
  %154 = fptosi <2 x double> %153 to <2 x i32>
  %155 = add nsw <2 x i32> %142, %154
  %156 = icmp eq <2 x i32> %155, zeroinitializer
  %157 = extractelement <2 x i1> %156, i64 0
  %158 = extractelement <2 x i1> %156, i64 1
  %159 = select i1 %158, i1 %157, i1 false
  br i1 %159, label %76, label %160

160:                                              ; preds = %127
  %.lcssa5 = phi i32 [ %147, %127 ]
  %.lcssa4 = phi <2 x i32> [ %155, %127 ]
  %.lcssa3 = phi i32 [ %88, %127 ]
  %.lcssa2 = phi i32 [ %90, %127 ]
  %.lcssa1 = phi i32 [ %79, %127 ]
  %.lcssa = phi ptr [ %82, %127 ]
  store i32 %.lcssa5, ptr @randVar, align 4, !tbaa !17
  %161 = extractelement <2 x i32> %.lcssa4, i64 1
  %162 = mul nsw i32 %161, %39
  %163 = add nsw i32 %162, %.lcssa3
  %164 = extractelement <2 x i32> %.lcssa4, i64 0
  %165 = mul nsw i32 %164, %40
  %166 = add nsw i32 %165, %.lcssa2
  %167 = load i32, ptr @gridGiven, align 4, !tbaa !17
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %189, label %169

169:                                              ; preds = %160
  %170 = getelementptr inbounds %struct.cellbox, ptr %.lcssa, i64 0, i32 5
  %171 = load i32, ptr %170, align 8, !tbaa !45
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds %struct.cellbox, ptr %.lcssa, i64 0, i32 21, i64 %172
  %174 = load ptr, ptr %173, align 8, !tbaa !7
  %175 = getelementptr inbounds %struct.tilebox, ptr %174, i64 0, i32 17
  %176 = load ptr, ptr %175, align 8, !tbaa !47
  %177 = getelementptr inbounds %struct.termbox, ptr %176, i64 0, i32 1
  %178 = load i32, ptr %177, align 8, !tbaa !51
  %179 = add nsw i32 %178, %163
  %180 = getelementptr inbounds %struct.termbox, ptr %176, i64 0, i32 2
  %181 = load i32, ptr %180, align 4, !tbaa !52
  %182 = add nsw i32 %181, %166
  tail call void @forceGrid(i32 noundef %179, i32 noundef %182) #44
  %183 = load i32, ptr @newxx, align 4, !tbaa !17
  %184 = load i32, ptr %177, align 8, !tbaa !51
  %185 = sub nsw i32 %183, %184
  %186 = load i32, ptr @newyy, align 4, !tbaa !17
  %187 = load i32, ptr %180, align 4, !tbaa !52
  %188 = sub nsw i32 %186, %187
  br label %189

189:                                              ; preds = %169, %160
  %190 = phi i32 [ %188, %169 ], [ %166, %160 ]
  %191 = phi i32 [ %185, %169 ], [ %163, %160 ]
  %192 = tail call i32 @usite1(i32 noundef %.lcssa1, i32 noundef %191, i32 noundef %190) #44
  %193 = icmp eq i32 %192, 0
  br i1 %193, label %198, label %194

194:                                              ; preds = %189
  %195 = load i32, ptr @flips, align 4, !tbaa !17
  %196 = add nsw i32 %195, 1
  store i32 %196, ptr @flips, align 4, !tbaa !17
  %197 = add nsw i32 %57, 1
  br label %198

198:                                              ; preds = %194, %189
  %199 = phi i32 [ %197, %194 ], [ %57, %189 ]
  %200 = add nuw nsw i32 %56, 1
  %201 = getelementptr inbounds %struct.cellbox, ptr %.lcssa, i64 0, i32 18
  %202 = load i32, ptr %201, align 4, !tbaa !223
  %203 = icmp eq i32 %202, 0
  br i1 %203, label %213, label %204

204:                                              ; preds = %198
  %205 = getelementptr inbounds %struct.cellbox, ptr %.lcssa, i64 0, i32 9
  %206 = load i32, ptr %205, align 8, !tbaa !379
  %207 = icmp slt i32 %206, 1
  br i1 %207, label %213, label %208

208:                                              ; preds = %208, %204
  %209 = phi i32 [ %210, %208 ], [ 1, %204 ]
  tail call void @selectpin(ptr noundef nonnull %.lcssa) #44
  %210 = add nuw nsw i32 %209, 1
  %211 = load i32, ptr %205, align 8, !tbaa !379
  %212 = icmp slt i32 %209, %211
  br i1 %212, label %208, label %213, !llvm.loop !380

213:                                              ; preds = %208, %204, %198
  %214 = load i32, ptr @attmax, align 4, !tbaa !17
  %215 = icmp slt i32 %200, %214
  br i1 %215, label %55, label %216, !llvm.loop !381

216:                                              ; preds = %213, %0
  %217 = phi i32 [ 0, %0 ], [ %199, %213 ]
  %218 = phi i32 [ 0, %0 ], [ %200, %213 ]
  %219 = load ptr, ptr @fpo, align 8, !tbaa !7
  %220 = tail call i64 @fwrite(ptr nonnull @.str.5.60, i64 22, i64 1, ptr %219)
  %221 = load ptr, ptr @fpo, align 8, !tbaa !7
  %222 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %221, ptr noundef nonnull @.str.6.61, i32 noundef %217, i32 noundef %218) #43
  %223 = load ptr, ptr @fpo, align 8, !tbaa !7
  %224 = load i32, ptr @flips, align 4, !tbaa !17
  %225 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %223, ptr noundef nonnull @.str.7.62, i32 noundef %224) #43
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @genorient() #0 {
  %1 = load i32, ptr @numcells, align 4, !tbaa !17
  %2 = load i32, ptr @numpads, align 4, !tbaa !17
  %3 = add nsw i32 %2, %1
  %4 = icmp slt i32 %3, 1
  br i1 %4, label %833, label %7

5:                                                ; preds = %334
  %.lcssa6 = phi i32 [ %339, %334 ]
  %6 = icmp slt i32 %.lcssa6, 1
  br i1 %6, label %833, label %344

7:                                                ; preds = %334, %0
  %8 = phi i64 [ %336, %334 ], [ 1, %0 ]
  %9 = phi i32 [ %335, %334 ], [ undef, %0 ]
  %10 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %11 = getelementptr inbounds ptr, ptr %10, i64 %8
  %12 = load ptr, ptr %11, align 8, !tbaa !7
  %13 = getelementptr inbounds %struct.cellbox, ptr %12, i64 0, i32 5
  %14 = load i32, ptr %13, align 8, !tbaa !45
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %334, label %16

16:                                               ; preds = %7
  %17 = getelementptr inbounds %struct.cellbox, ptr %12, i64 0, i32 21
  %18 = load ptr, ptr %17, align 8, !tbaa !7
  %19 = getelementptr inbounds %struct.tilebox, ptr %18, i64 0, i32 12
  %20 = load i32, ptr %19, align 4, !tbaa !170
  %21 = getelementptr inbounds %struct.tilebox, ptr %18, i64 0, i32 11
  %22 = load i32, ptr %21, align 8, !tbaa !169
  %23 = sub nsw i32 %20, %22
  %24 = getelementptr inbounds %struct.tilebox, ptr %18, i64 0, i32 10
  %25 = load i32, ptr %24, align 4, !tbaa !168
  %26 = getelementptr inbounds %struct.tilebox, ptr %18, i64 0, i32 9
  %27 = load i32, ptr %26, align 8, !tbaa !167
  %28 = sub nsw i32 %25, %27
  %29 = icmp ult i32 %14, 8
  br i1 %29, label %30, label %35

30:                                               ; preds = %16
  %31 = add i32 %14, -1
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds [7 x i32], ptr @switch.table.genorient, i64 0, i64 %32
  %34 = load i32, ptr %33, align 4
  br label %35

35:                                               ; preds = %30, %16
  %36 = phi i32 [ %9, %16 ], [ %34, %30 ]
  %37 = tail call noalias dereferenceable_or_null(104) ptr @malloc(i64 noundef 104) #45
  %38 = sext i32 %14 to i64
  %39 = getelementptr inbounds %struct.cellbox, ptr %12, i64 0, i32 21, i64 %38
  store ptr %37, ptr %39, align 8, !tbaa !7
  store ptr null, ptr %37, align 8, !tbaa !172
  %40 = getelementptr inbounds %struct.tilebox, ptr %37, i64 0, i32 17
  store ptr null, ptr %40, align 8, !tbaa !47
  %41 = getelementptr inbounds %struct.tilebox, ptr %37, i64 0, i32 9
  store i32 %27, ptr %41, align 8, !tbaa !167
  %42 = getelementptr inbounds %struct.tilebox, ptr %37, i64 0, i32 10
  store i32 %25, ptr %42, align 4, !tbaa !168
  %43 = getelementptr inbounds %struct.tilebox, ptr %37, i64 0, i32 11
  store i32 %22, ptr %43, align 8, !tbaa !169
  %44 = getelementptr inbounds %struct.tilebox, ptr %37, i64 0, i32 12
  store i32 %20, ptr %44, align 4, !tbaa !170
  %45 = getelementptr inbounds %struct.tilebox, ptr %18, i64 0, i32 13
  %46 = getelementptr inbounds %struct.tilebox, ptr %37, i64 0, i32 13
  %47 = getelementptr inbounds %struct.tilebox, ptr %18, i64 0, i32 15
  %48 = load <4 x i32>, ptr %45, align 8, !tbaa !17
  store <4 x i32> %48, ptr %46, align 8, !tbaa !17
  %49 = getelementptr inbounds %struct.tilebox, ptr %18, i64 0, i32 1
  %50 = getelementptr inbounds %struct.tilebox, ptr %37, i64 0, i32 1
  %51 = getelementptr inbounds %struct.tilebox, ptr %18, i64 0, i32 2
  %52 = load <2 x double>, ptr %49, align 8, !tbaa !36
  %53 = getelementptr inbounds %struct.tilebox, ptr %37, i64 0, i32 2
  store <2 x double> %52, ptr %50, align 8, !tbaa !36
  %54 = getelementptr inbounds %struct.tilebox, ptr %18, i64 0, i32 3
  %55 = getelementptr inbounds %struct.tilebox, ptr %37, i64 0, i32 3
  %56 = getelementptr inbounds %struct.tilebox, ptr %18, i64 0, i32 4
  %57 = load <2 x double>, ptr %54, align 8, !tbaa !36
  store <2 x double> %57, ptr %55, align 8, !tbaa !36
  switch i32 %36, label %88 [
    i32 1, label %58
    i32 2, label %61
    i32 3, label %66
    i32 4, label %71
    i32 5, label %76
    i32 6, label %79
    i32 7, label %83
  ]

58:                                               ; preds = %35
  store <2 x double> %52, ptr %49, align 8, !tbaa !36
  %59 = extractelement <2 x double> %57, i64 1
  store double %59, ptr %54, align 8, !tbaa !294
  %60 = load double, ptr %55, align 8, !tbaa !294
  br label %86

61:                                               ; preds = %35
  %62 = extractelement <2 x double> %52, i64 1
  store double %62, ptr %49, align 8, !tbaa !292
  %63 = load double, ptr %50, align 8, !tbaa !292
  store double %63, ptr %51, align 8, !tbaa !293
  %64 = extractelement <2 x double> %57, i64 0
  store double %64, ptr %54, align 8, !tbaa !294
  %65 = extractelement <2 x double> %57, i64 1
  br label %86

66:                                               ; preds = %35
  %67 = extractelement <2 x double> %52, i64 1
  store double %67, ptr %49, align 8, !tbaa !292
  %68 = load double, ptr %50, align 8, !tbaa !292
  store double %68, ptr %51, align 8, !tbaa !293
  %69 = extractelement <2 x double> %57, i64 1
  store double %69, ptr %54, align 8, !tbaa !294
  %70 = load double, ptr %55, align 8, !tbaa !294
  br label %86

71:                                               ; preds = %35
  %72 = extractelement <2 x double> %57, i64 1
  store double %72, ptr %49, align 8, !tbaa !292
  %73 = extractelement <2 x double> %57, i64 0
  store double %73, ptr %51, align 8, !tbaa !293
  %74 = load double, ptr %53, align 8, !tbaa !293
  store double %74, ptr %54, align 8, !tbaa !294
  %75 = load double, ptr %50, align 8, !tbaa !292
  br label %86

76:                                               ; preds = %35
  store <2 x double> %57, ptr %49, align 8, !tbaa !36
  %77 = load double, ptr %50, align 8, !tbaa !292
  store double %77, ptr %54, align 8, !tbaa !294
  %78 = load double, ptr %53, align 8, !tbaa !293
  br label %86

79:                                               ; preds = %35
  %80 = shufflevector <2 x double> %57, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  store <2 x double> %80, ptr %49, align 8, !tbaa !36
  %81 = load double, ptr %50, align 8, !tbaa !292
  store double %81, ptr %54, align 8, !tbaa !294
  %82 = load double, ptr %53, align 8, !tbaa !293
  br label %86

83:                                               ; preds = %35
  store <2 x double> %57, ptr %49, align 8, !tbaa !36
  %84 = load double, ptr %53, align 8, !tbaa !293
  store double %84, ptr %54, align 8, !tbaa !294
  %85 = load double, ptr %50, align 8, !tbaa !292
  br label %86

86:                                               ; preds = %83, %79, %76, %71, %66, %61, %58
  %87 = phi double [ %85, %83 ], [ %82, %79 ], [ %78, %76 ], [ %75, %71 ], [ %70, %66 ], [ %65, %61 ], [ %60, %58 ]
  store double %87, ptr %56, align 8, !tbaa !295
  br label %88

88:                                               ; preds = %86, %35
  tail call void @move(i32 noundef %36) #44
  tail call void @rect(ptr noundef nonnull %26, ptr noundef nonnull %21, ptr noundef nonnull %24, ptr noundef nonnull %19) #44
  %89 = and i32 %23, 1
  %90 = icmp ne i32 %89, 0
  %91 = and i32 %36, -3
  %92 = icmp eq i32 %91, 4
  %93 = select i1 %90, i1 %92, i1 false
  br i1 %93, label %102, label %94

94:                                               ; preds = %88
  %95 = and i32 %28, 1
  %96 = icmp ne i32 %95, 0
  %97 = and i32 %36, -2
  %98 = icmp eq i32 %97, 2
  %99 = select i1 %96, i1 %98, i1 false
  br i1 %99, label %102, label %100

100:                                              ; preds = %94
  %101 = load <2 x i32>, ptr %26, align 8, !tbaa !17
  br label %105

102:                                              ; preds = %94, %88
  %103 = load <2 x i32>, ptr %26, align 8, !tbaa !17
  %104 = add nsw <2 x i32> %103, <i32 1, i32 1>
  store <2 x i32> %104, ptr %26, align 8, !tbaa !17
  br label %105

105:                                              ; preds = %102, %100
  %106 = phi <2 x i32> [ %101, %100 ], [ %104, %102 ]
  store <2 x i32> %106, ptr %45, align 8, !tbaa !17
  %107 = icmp eq i32 %91, 1
  %108 = select i1 %90, i1 %107, i1 false
  br i1 %108, label %113, label %109

109:                                              ; preds = %105
  %110 = and i32 %28, 1
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %116, label %112

112:                                              ; preds = %109
  switch i32 %36, label %116 [
    i32 7, label %113
    i32 4, label %113
  ]

113:                                              ; preds = %112, %112, %105
  %114 = load <2 x i32>, ptr %21, align 8, !tbaa !17
  %115 = add nsw <2 x i32> %114, <i32 1, i32 1>
  store <2 x i32> %115, ptr %21, align 8, !tbaa !17
  br label %116

116:                                              ; preds = %113, %112, %109
  %117 = load <2 x i32>, ptr %21, align 8, !tbaa !17
  store <2 x i32> %117, ptr %47, align 8, !tbaa !17
  %118 = getelementptr inbounds %struct.cellbox, ptr %12, i64 0, i32 6
  %119 = load i32, ptr %118, align 4, !tbaa !171
  %120 = icmp slt i32 %119, 1
  br i1 %120, label %205, label %121

121:                                              ; preds = %116
  %122 = and i32 %28, 1
  %123 = icmp ne i32 %122, 0
  %124 = and i32 %36, -2
  %125 = icmp eq i32 %124, 2
  %126 = select i1 %123, i1 %125, i1 false
  %127 = icmp eq i32 %122, 0
  %128 = select i1 %93, i1 true, i1 %126
  br label %129

129:                                              ; preds = %200, %121
  %130 = phi ptr [ %37, %121 ], [ %134, %200 ]
  %131 = phi ptr [ %18, %121 ], [ %133, %200 ]
  %132 = phi i32 [ 1, %121 ], [ %202, %200 ]
  %133 = load ptr, ptr %131, align 8, !tbaa !172
  %134 = tail call noalias dereferenceable_or_null(104) ptr @malloc(i64 noundef 104) #45
  store ptr %134, ptr %130, align 8, !tbaa !172
  store ptr null, ptr %134, align 8, !tbaa !172
  %135 = getelementptr inbounds %struct.tilebox, ptr %134, i64 0, i32 17
  store ptr null, ptr %135, align 8, !tbaa !47
  %136 = getelementptr inbounds %struct.tilebox, ptr %133, i64 0, i32 9
  %137 = getelementptr inbounds %struct.tilebox, ptr %134, i64 0, i32 9
  %138 = getelementptr inbounds %struct.tilebox, ptr %133, i64 0, i32 10
  %139 = getelementptr inbounds %struct.tilebox, ptr %133, i64 0, i32 11
  %140 = getelementptr inbounds %struct.tilebox, ptr %133, i64 0, i32 12
  %141 = load <4 x i32>, ptr %136, align 8, !tbaa !17
  store <4 x i32> %141, ptr %137, align 8, !tbaa !17
  %142 = getelementptr inbounds %struct.tilebox, ptr %133, i64 0, i32 13
  %143 = getelementptr inbounds %struct.tilebox, ptr %134, i64 0, i32 13
  %144 = getelementptr inbounds %struct.tilebox, ptr %133, i64 0, i32 14
  %145 = getelementptr inbounds %struct.tilebox, ptr %133, i64 0, i32 15
  %146 = load <4 x i32>, ptr %142, align 8, !tbaa !17
  store <4 x i32> %146, ptr %143, align 8, !tbaa !17
  %147 = getelementptr inbounds %struct.tilebox, ptr %133, i64 0, i32 1
  %148 = getelementptr inbounds %struct.tilebox, ptr %134, i64 0, i32 1
  %149 = getelementptr inbounds %struct.tilebox, ptr %133, i64 0, i32 2
  %150 = load <2 x double>, ptr %147, align 8, !tbaa !36
  %151 = getelementptr inbounds %struct.tilebox, ptr %134, i64 0, i32 2
  store <2 x double> %150, ptr %148, align 8, !tbaa !36
  %152 = getelementptr inbounds %struct.tilebox, ptr %133, i64 0, i32 3
  %153 = getelementptr inbounds %struct.tilebox, ptr %134, i64 0, i32 3
  %154 = getelementptr inbounds %struct.tilebox, ptr %133, i64 0, i32 4
  %155 = load <2 x double>, ptr %152, align 8, !tbaa !36
  store <2 x double> %155, ptr %153, align 8, !tbaa !36
  switch i32 %36, label %186 [
    i32 1, label %156
    i32 2, label %159
    i32 3, label %164
    i32 4, label %169
    i32 5, label %174
    i32 6, label %177
    i32 7, label %181
  ]

156:                                              ; preds = %129
  store <2 x double> %150, ptr %147, align 8, !tbaa !36
  %157 = extractelement <2 x double> %155, i64 1
  store double %157, ptr %152, align 8, !tbaa !294
  %158 = load double, ptr %153, align 8, !tbaa !294
  br label %184

159:                                              ; preds = %129
  %160 = extractelement <2 x double> %150, i64 1
  store double %160, ptr %147, align 8, !tbaa !292
  %161 = load double, ptr %148, align 8, !tbaa !292
  store double %161, ptr %149, align 8, !tbaa !293
  %162 = extractelement <2 x double> %155, i64 0
  store double %162, ptr %152, align 8, !tbaa !294
  %163 = extractelement <2 x double> %155, i64 1
  br label %184

164:                                              ; preds = %129
  %165 = extractelement <2 x double> %150, i64 1
  store double %165, ptr %147, align 8, !tbaa !292
  %166 = load double, ptr %148, align 8, !tbaa !292
  store double %166, ptr %149, align 8, !tbaa !293
  %167 = extractelement <2 x double> %155, i64 1
  store double %167, ptr %152, align 8, !tbaa !294
  %168 = load double, ptr %153, align 8, !tbaa !294
  br label %184

169:                                              ; preds = %129
  %170 = extractelement <2 x double> %155, i64 1
  store double %170, ptr %147, align 8, !tbaa !292
  %171 = extractelement <2 x double> %155, i64 0
  store double %171, ptr %149, align 8, !tbaa !293
  %172 = load double, ptr %151, align 8, !tbaa !293
  store double %172, ptr %152, align 8, !tbaa !294
  %173 = load double, ptr %148, align 8, !tbaa !292
  br label %184

174:                                              ; preds = %129
  store <2 x double> %155, ptr %147, align 8, !tbaa !36
  %175 = load double, ptr %148, align 8, !tbaa !292
  store double %175, ptr %152, align 8, !tbaa !294
  %176 = load double, ptr %151, align 8, !tbaa !293
  br label %184

177:                                              ; preds = %129
  %178 = shufflevector <2 x double> %155, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  store <2 x double> %178, ptr %147, align 8, !tbaa !36
  %179 = load double, ptr %148, align 8, !tbaa !292
  store double %179, ptr %152, align 8, !tbaa !294
  %180 = load double, ptr %151, align 8, !tbaa !293
  br label %184

181:                                              ; preds = %129
  store <2 x double> %155, ptr %147, align 8, !tbaa !36
  %182 = load double, ptr %151, align 8, !tbaa !293
  store double %182, ptr %152, align 8, !tbaa !294
  %183 = load double, ptr %148, align 8, !tbaa !292
  br label %184

184:                                              ; preds = %181, %177, %174, %169, %164, %159, %156
  %185 = phi double [ %183, %181 ], [ %180, %177 ], [ %176, %174 ], [ %173, %169 ], [ %168, %164 ], [ %163, %159 ], [ %158, %156 ]
  store double %185, ptr %154, align 8, !tbaa !295
  br label %186

186:                                              ; preds = %184, %129
  tail call void @move(i32 noundef %36) #44
  tail call void @rect(ptr noundef nonnull %136, ptr noundef nonnull %139, ptr noundef nonnull %138, ptr noundef nonnull %140) #44
  %187 = load i32, ptr %136, align 8, !tbaa !167
  %188 = load i32, ptr %138, align 4, !tbaa !168
  br i1 %128, label %189, label %192

189:                                              ; preds = %186
  %190 = add nsw i32 %187, 1
  store i32 %190, ptr %136, align 8, !tbaa !167
  %191 = add nsw i32 %188, 1
  store i32 %191, ptr %138, align 4, !tbaa !168
  br label %192

192:                                              ; preds = %189, %186
  %193 = phi i32 [ %188, %186 ], [ %191, %189 ]
  %194 = phi i32 [ %187, %186 ], [ %190, %189 ]
  store i32 %194, ptr %142, align 8, !tbaa !382
  store i32 %193, ptr %144, align 4, !tbaa !383
  br i1 %108, label %197, label %195

195:                                              ; preds = %192
  br i1 %127, label %200, label %196

196:                                              ; preds = %195
  switch i32 %36, label %200 [
    i32 7, label %197
    i32 4, label %197
  ]

197:                                              ; preds = %196, %196, %192
  %198 = load <2 x i32>, ptr %139, align 8, !tbaa !17
  %199 = add nsw <2 x i32> %198, <i32 1, i32 1>
  store <2 x i32> %199, ptr %139, align 8, !tbaa !17
  br label %200

200:                                              ; preds = %197, %196, %195
  %201 = load <2 x i32>, ptr %139, align 8, !tbaa !17
  store <2 x i32> %201, ptr %145, align 8, !tbaa !17
  %202 = add nuw nsw i32 %132, 1
  %203 = load i32, ptr %118, align 4, !tbaa !171
  %204 = icmp slt i32 %132, %203
  br i1 %204, label %129, label %205, !llvm.loop !384

205:                                              ; preds = %200, %116
  %206 = getelementptr inbounds %struct.cellbox, ptr %12, i64 0, i32 8
  %207 = load i32, ptr %206, align 4, !tbaa !385
  %208 = icmp eq i32 %207, 0
  br i1 %208, label %287, label %209

209:                                              ; preds = %205
  %210 = load ptr, ptr %17, align 8, !tbaa !7
  %211 = getelementptr inbounds %struct.tilebox, ptr %210, i64 0, i32 17
  %212 = load ptr, ptr %211, align 8, !tbaa !47
  %213 = tail call noalias dereferenceable_or_null(32) ptr @malloc(i64 noundef 32) #45
  %214 = load ptr, ptr %39, align 8, !tbaa !7
  %215 = getelementptr inbounds %struct.tilebox, ptr %214, i64 0, i32 17
  store ptr %213, ptr %215, align 8, !tbaa !47
  store ptr null, ptr %213, align 8, !tbaa !49
  %216 = getelementptr inbounds %struct.termbox, ptr %212, i64 0, i32 5
  %217 = load i32, ptr %216, align 8, !tbaa !53
  %218 = getelementptr inbounds %struct.termbox, ptr %213, i64 0, i32 5
  store i32 %217, ptr %218, align 8, !tbaa !53
  %219 = getelementptr inbounds %struct.termbox, ptr %212, i64 0, i32 1
  %220 = getelementptr inbounds %struct.termbox, ptr %213, i64 0, i32 1
  %221 = getelementptr inbounds %struct.termbox, ptr %212, i64 0, i32 2
  %222 = getelementptr inbounds %struct.termbox, ptr %212, i64 0, i32 3
  %223 = getelementptr inbounds %struct.termbox, ptr %212, i64 0, i32 4
  %224 = load <4 x i32>, ptr %219, align 8, !tbaa !17
  store <4 x i32> %224, ptr %220, align 8, !tbaa !17
  tail call void @move(i32 noundef %36) #44
  tail call void @point(ptr noundef nonnull %219, ptr noundef nonnull %221) #44
  br i1 %93, label %233, label %225

225:                                              ; preds = %209
  %226 = and i32 %28, 1
  %227 = icmp ne i32 %226, 0
  %228 = and i32 %36, -2
  %229 = icmp eq i32 %228, 2
  %230 = select i1 %227, i1 %229, i1 false
  br i1 %230, label %233, label %231

231:                                              ; preds = %225
  %232 = load i32, ptr %219, align 8, !tbaa !51
  br label %236

233:                                              ; preds = %225, %209
  %234 = load i32, ptr %219, align 8, !tbaa !51
  %235 = add nsw i32 %234, 1
  store i32 %235, ptr %219, align 8, !tbaa !51
  br label %236

236:                                              ; preds = %233, %231
  %237 = phi i32 [ %232, %231 ], [ %235, %233 ]
  store i32 %237, ptr %222, align 8, !tbaa !386
  br i1 %108, label %242, label %238

238:                                              ; preds = %236
  %239 = and i32 %28, 1
  %240 = icmp eq i32 %239, 0
  br i1 %240, label %245, label %241

241:                                              ; preds = %238
  switch i32 %36, label %245 [
    i32 7, label %242
    i32 4, label %242
  ]

242:                                              ; preds = %241, %241, %236
  %243 = load i32, ptr %221, align 4, !tbaa !52
  %244 = add nsw i32 %243, 1
  store i32 %244, ptr %221, align 4, !tbaa !52
  br label %245

245:                                              ; preds = %242, %241, %238
  %246 = load i32, ptr %221, align 4, !tbaa !52
  store i32 %246, ptr %223, align 4, !tbaa !387
  %247 = load i32, ptr %206, align 4, !tbaa !385
  %248 = icmp slt i32 %247, 2
  br i1 %248, label %287, label %249

249:                                              ; preds = %245
  %250 = and i32 %28, 1
  %251 = icmp ne i32 %250, 0
  %252 = and i32 %36, -2
  %253 = icmp eq i32 %252, 2
  %254 = select i1 %251, i1 %253, i1 false
  %255 = icmp eq i32 %250, 0
  %256 = select i1 %93, i1 true, i1 %254
  br label %257

257:                                              ; preds = %282, %249
  %258 = phi ptr [ %213, %249 ], [ %262, %282 ]
  %259 = phi ptr [ %212, %249 ], [ %261, %282 ]
  %260 = phi i32 [ 2, %249 ], [ %284, %282 ]
  %261 = load ptr, ptr %259, align 8, !tbaa !49
  %262 = tail call noalias dereferenceable_or_null(32) ptr @malloc(i64 noundef 32) #45
  store ptr %262, ptr %258, align 8, !tbaa !49
  store ptr null, ptr %262, align 8, !tbaa !49
  %263 = getelementptr inbounds %struct.termbox, ptr %261, i64 0, i32 5
  %264 = load i32, ptr %263, align 8, !tbaa !53
  %265 = getelementptr inbounds %struct.termbox, ptr %262, i64 0, i32 5
  store i32 %264, ptr %265, align 8, !tbaa !53
  %266 = getelementptr inbounds %struct.termbox, ptr %261, i64 0, i32 1
  %267 = getelementptr inbounds %struct.termbox, ptr %262, i64 0, i32 1
  %268 = getelementptr inbounds %struct.termbox, ptr %261, i64 0, i32 2
  %269 = getelementptr inbounds %struct.termbox, ptr %261, i64 0, i32 3
  %270 = getelementptr inbounds %struct.termbox, ptr %261, i64 0, i32 4
  %271 = load <4 x i32>, ptr %266, align 8, !tbaa !17
  store <4 x i32> %271, ptr %267, align 8, !tbaa !17
  tail call void @move(i32 noundef %36) #44
  tail call void @point(ptr noundef nonnull %266, ptr noundef nonnull %268) #44
  %272 = load i32, ptr %266, align 8, !tbaa !51
  br i1 %256, label %273, label %275

273:                                              ; preds = %257
  %274 = add nsw i32 %272, 1
  store i32 %274, ptr %266, align 8, !tbaa !51
  br label %275

275:                                              ; preds = %273, %257
  %276 = phi i32 [ %272, %257 ], [ %274, %273 ]
  store i32 %276, ptr %269, align 8, !tbaa !386
  br i1 %108, label %279, label %277

277:                                              ; preds = %275
  br i1 %255, label %282, label %278

278:                                              ; preds = %277
  switch i32 %36, label %282 [
    i32 7, label %279
    i32 4, label %279
  ]

279:                                              ; preds = %278, %278, %275
  %280 = load i32, ptr %268, align 4, !tbaa !52
  %281 = add nsw i32 %280, 1
  store i32 %281, ptr %268, align 4, !tbaa !52
  br label %282

282:                                              ; preds = %279, %278, %277
  %283 = load i32, ptr %268, align 4, !tbaa !52
  store i32 %283, ptr %270, align 4, !tbaa !387
  %284 = add nuw nsw i32 %260, 1
  %285 = load i32, ptr %206, align 4, !tbaa !385
  %286 = icmp slt i32 %260, %285
  br i1 %286, label %257, label %287, !llvm.loop !388

287:                                              ; preds = %282, %245, %205
  %288 = getelementptr inbounds %struct.cellbox, ptr %12, i64 0, i32 17
  %289 = load i32, ptr %288, align 8, !tbaa !227
  %290 = icmp eq i32 %289, 0
  br i1 %290, label %334, label %291

291:                                              ; preds = %287
  %292 = load ptr, ptr %17, align 8, !tbaa !7
  %293 = getelementptr inbounds %struct.tilebox, ptr %292, i64 0, i32 18
  %294 = load ptr, ptr %293, align 8, !tbaa !225
  %295 = add nsw i32 %289, 1
  %296 = sext i32 %295 to i64
  %297 = shl nsw i64 %296, 4
  %298 = tail call noalias ptr @malloc(i64 noundef %297) #45
  %299 = load ptr, ptr %39, align 8, !tbaa !7
  %300 = getelementptr inbounds %struct.tilebox, ptr %299, i64 0, i32 18
  store ptr %298, ptr %300, align 8, !tbaa !225
  %301 = icmp slt i32 %289, 1
  br i1 %301, label %334, label %302

302:                                              ; preds = %291
  %303 = and i32 %28, 1
  %304 = icmp ne i32 %303, 0
  %305 = and i32 %36, -2
  %306 = icmp eq i32 %305, 2
  %307 = select i1 %304, i1 %306, i1 false
  %308 = icmp eq i32 %303, 0
  %309 = select i1 %93, i1 true, i1 %307
  br label %310

310:                                              ; preds = %328, %302
  %311 = phi i64 [ 1, %302 ], [ %330, %328 ]
  %312 = getelementptr inbounds %struct.locbox.26, ptr %294, i64 %311
  %313 = getelementptr inbounds %struct.locbox.26, ptr %298, i64 %311
  %314 = getelementptr inbounds %struct.locbox.26, ptr %294, i64 %311, i32 1
  %315 = getelementptr inbounds %struct.locbox.26, ptr %294, i64 %311, i32 2
  %316 = getelementptr inbounds %struct.locbox.26, ptr %294, i64 %311, i32 3
  %317 = load <4 x i32>, ptr %312, align 4, !tbaa !17
  store <4 x i32> %317, ptr %313, align 4, !tbaa !17
  tail call void @move(i32 noundef %36) #44
  tail call void @point(ptr noundef nonnull %312, ptr noundef nonnull %314) #44
  %318 = load i32, ptr %312, align 4, !tbaa !240
  br i1 %309, label %319, label %321

319:                                              ; preds = %310
  %320 = add nsw i32 %318, 1
  store i32 %320, ptr %312, align 4, !tbaa !240
  br label %321

321:                                              ; preds = %319, %310
  %322 = phi i32 [ %318, %310 ], [ %320, %319 ]
  store i32 %322, ptr %315, align 4, !tbaa !389
  br i1 %108, label %325, label %323

323:                                              ; preds = %321
  br i1 %308, label %328, label %324

324:                                              ; preds = %323
  switch i32 %36, label %328 [
    i32 7, label %325
    i32 4, label %325
  ]

325:                                              ; preds = %324, %324, %321
  %326 = load i32, ptr %314, align 4, !tbaa !238
  %327 = add nsw i32 %326, 1
  store i32 %327, ptr %314, align 4, !tbaa !238
  br label %328

328:                                              ; preds = %325, %324, %323
  %329 = load i32, ptr %314, align 4, !tbaa !238
  store i32 %329, ptr %316, align 4, !tbaa !390
  %330 = add nuw nsw i64 %311, 1
  %331 = load i32, ptr %288, align 8, !tbaa !227
  %332 = sext i32 %331 to i64
  %333 = icmp slt i64 %311, %332
  br i1 %333, label %310, label %334, !llvm.loop !391

334:                                              ; preds = %328, %291, %287, %7
  %335 = phi i32 [ %36, %287 ], [ %9, %7 ], [ %36, %291 ], [ %36, %328 ]
  %336 = add nuw nsw i64 %8, 1
  %337 = load i32, ptr @numcells, align 4, !tbaa !17
  %338 = load i32, ptr @numpads, align 4, !tbaa !17
  %339 = add nsw i32 %338, %337
  %340 = sext i32 %339 to i64
  %341 = icmp slt i64 %8, %340
  br i1 %341, label %7, label %5, !llvm.loop !392

342:                                              ; preds = %598
  %.lcssa5 = phi i32 [ %600, %598 ]
  %.lcssa4 = phi i32 [ %601, %598 ]
  %.lcssa3 = phi i32 [ %602, %598 ]
  %343 = icmp slt i32 %.lcssa3, 1
  br i1 %343, label %833, label %607

344:                                              ; preds = %598, %5
  %345 = phi i64 [ %599, %598 ], [ 1, %5 ]
  %346 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %347 = getelementptr inbounds ptr, ptr %346, i64 %345
  %348 = load ptr, ptr %347, align 8, !tbaa !7
  %349 = getelementptr inbounds %struct.cellbox, ptr %348, i64 0, i32 21
  %350 = load ptr, ptr %349, align 8, !tbaa !7
  %351 = getelementptr inbounds %struct.tilebox, ptr %350, i64 0, i32 12
  %352 = load i32, ptr %351, align 4, !tbaa !170
  %353 = getelementptr inbounds %struct.tilebox, ptr %350, i64 0, i32 11
  %354 = load i32, ptr %353, align 8, !tbaa !169
  %355 = sub nsw i32 %352, %354
  %356 = getelementptr inbounds %struct.tilebox, ptr %350, i64 0, i32 10
  %357 = load i32, ptr %356, align 4, !tbaa !168
  %358 = getelementptr inbounds %struct.tilebox, ptr %350, i64 0, i32 9
  %359 = load i32, ptr %358, align 8, !tbaa !167
  %360 = sub nsw i32 %357, %359
  %361 = getelementptr inbounds %struct.cellbox, ptr %348, i64 0, i32 5
  %362 = and i32 %355, 1
  %363 = icmp ne i32 %362, 0
  %364 = and i32 %360, 1
  %365 = icmp ne i32 %364, 0
  %366 = icmp eq i32 %364, 0
  %367 = getelementptr inbounds %struct.cellbox, ptr %348, i64 0, i32 6
  br label %368

368:                                              ; preds = %595, %344
  %369 = phi i64 [ 1, %344 ], [ %596, %595 ]
  %370 = load i32, ptr %361, align 8, !tbaa !45
  %371 = zext i32 %370 to i64
  %372 = icmp eq i64 %369, %371
  br i1 %372, label %595, label %373

373:                                              ; preds = %368
  %374 = getelementptr inbounds %struct.cellbox, ptr %348, i64 0, i32 4, i64 %369
  %375 = load i32, ptr %374, align 4, !tbaa !17
  %376 = icmp eq i32 %375, 0
  br i1 %376, label %595, label %377

377:                                              ; preds = %373
  %378 = load ptr, ptr %349, align 8, !tbaa !7
  %379 = tail call noalias dereferenceable_or_null(104) ptr @malloc(i64 noundef 104) #45
  %380 = getelementptr inbounds %struct.cellbox, ptr %348, i64 0, i32 21, i64 %369
  store ptr %379, ptr %380, align 8, !tbaa !7
  store ptr null, ptr %379, align 8, !tbaa !172
  %381 = getelementptr inbounds %struct.tilebox, ptr %378, i64 0, i32 9
  %382 = getelementptr inbounds %struct.tilebox, ptr %379, i64 0, i32 9
  %383 = getelementptr inbounds %struct.tilebox, ptr %379, i64 0, i32 10
  %384 = getelementptr inbounds %struct.tilebox, ptr %379, i64 0, i32 11
  %385 = getelementptr inbounds %struct.tilebox, ptr %379, i64 0, i32 12
  %386 = load <4 x i32>, ptr %381, align 8, !tbaa !17
  store <4 x i32> %386, ptr %382, align 8, !tbaa !17
  %387 = getelementptr inbounds %struct.tilebox, ptr %379, i64 0, i32 17
  store ptr null, ptr %387, align 8, !tbaa !47
  %388 = trunc i64 %369 to i32
  switch i32 %388, label %457 [
    i32 1, label %389
    i32 2, label %397
    i32 3, label %408
    i32 4, label %419
    i32 5, label %428
    i32 6, label %436
    i32 7, label %445
  ]

389:                                              ; preds = %377
  %390 = getelementptr inbounds %struct.tilebox, ptr %378, i64 0, i32 1
  %391 = getelementptr inbounds %struct.tilebox, ptr %379, i64 0, i32 1
  %392 = load <2 x double>, ptr %390, align 8, !tbaa !36
  store <2 x double> %392, ptr %391, align 8, !tbaa !36
  %393 = getelementptr inbounds %struct.tilebox, ptr %378, i64 0, i32 4
  %394 = load double, ptr %393, align 8, !tbaa !295
  %395 = getelementptr inbounds %struct.tilebox, ptr %379, i64 0, i32 3
  store double %394, ptr %395, align 8, !tbaa !294
  %396 = getelementptr inbounds %struct.tilebox, ptr %378, i64 0, i32 3
  br label %453

397:                                              ; preds = %377
  %398 = getelementptr inbounds %struct.tilebox, ptr %378, i64 0, i32 2
  %399 = load double, ptr %398, align 8, !tbaa !293
  %400 = getelementptr inbounds %struct.tilebox, ptr %379, i64 0, i32 1
  store double %399, ptr %400, align 8, !tbaa !292
  %401 = getelementptr inbounds %struct.tilebox, ptr %378, i64 0, i32 1
  %402 = load double, ptr %401, align 8, !tbaa !292
  %403 = getelementptr inbounds %struct.tilebox, ptr %379, i64 0, i32 2
  store double %402, ptr %403, align 8, !tbaa !293
  %404 = getelementptr inbounds %struct.tilebox, ptr %378, i64 0, i32 3
  %405 = load double, ptr %404, align 8, !tbaa !294
  %406 = getelementptr inbounds %struct.tilebox, ptr %379, i64 0, i32 3
  store double %405, ptr %406, align 8, !tbaa !294
  %407 = getelementptr inbounds %struct.tilebox, ptr %378, i64 0, i32 4
  br label %453

408:                                              ; preds = %377
  %409 = getelementptr inbounds %struct.tilebox, ptr %378, i64 0, i32 2
  %410 = load double, ptr %409, align 8, !tbaa !293
  %411 = getelementptr inbounds %struct.tilebox, ptr %379, i64 0, i32 1
  store double %410, ptr %411, align 8, !tbaa !292
  %412 = getelementptr inbounds %struct.tilebox, ptr %378, i64 0, i32 1
  %413 = load double, ptr %412, align 8, !tbaa !292
  %414 = getelementptr inbounds %struct.tilebox, ptr %379, i64 0, i32 2
  store double %413, ptr %414, align 8, !tbaa !293
  %415 = getelementptr inbounds %struct.tilebox, ptr %378, i64 0, i32 4
  %416 = load double, ptr %415, align 8, !tbaa !295
  %417 = getelementptr inbounds %struct.tilebox, ptr %379, i64 0, i32 3
  store double %416, ptr %417, align 8, !tbaa !294
  %418 = getelementptr inbounds %struct.tilebox, ptr %378, i64 0, i32 3
  br label %453

419:                                              ; preds = %377
  %420 = getelementptr inbounds %struct.tilebox, ptr %379, i64 0, i32 1
  %421 = getelementptr inbounds %struct.tilebox, ptr %378, i64 0, i32 3
  %422 = load <2 x double>, ptr %421, align 8, !tbaa !36
  %423 = shufflevector <2 x double> %422, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  store <2 x double> %423, ptr %420, align 8, !tbaa !36
  %424 = getelementptr inbounds %struct.tilebox, ptr %378, i64 0, i32 2
  %425 = load double, ptr %424, align 8, !tbaa !293
  %426 = getelementptr inbounds %struct.tilebox, ptr %379, i64 0, i32 3
  store double %425, ptr %426, align 8, !tbaa !294
  %427 = getelementptr inbounds %struct.tilebox, ptr %378, i64 0, i32 1
  br label %453

428:                                              ; preds = %377
  %429 = getelementptr inbounds %struct.tilebox, ptr %378, i64 0, i32 3
  %430 = getelementptr inbounds %struct.tilebox, ptr %379, i64 0, i32 1
  %431 = load <2 x double>, ptr %429, align 8, !tbaa !36
  store <2 x double> %431, ptr %430, align 8, !tbaa !36
  %432 = getelementptr inbounds %struct.tilebox, ptr %378, i64 0, i32 1
  %433 = load double, ptr %432, align 8, !tbaa !292
  %434 = getelementptr inbounds %struct.tilebox, ptr %379, i64 0, i32 3
  store double %433, ptr %434, align 8, !tbaa !294
  %435 = getelementptr inbounds %struct.tilebox, ptr %378, i64 0, i32 2
  br label %453

436:                                              ; preds = %377
  %437 = getelementptr inbounds %struct.tilebox, ptr %379, i64 0, i32 1
  %438 = getelementptr inbounds %struct.tilebox, ptr %378, i64 0, i32 3
  %439 = load <2 x double>, ptr %438, align 8, !tbaa !36
  %440 = shufflevector <2 x double> %439, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  store <2 x double> %440, ptr %437, align 8, !tbaa !36
  %441 = getelementptr inbounds %struct.tilebox, ptr %378, i64 0, i32 1
  %442 = load double, ptr %441, align 8, !tbaa !292
  %443 = getelementptr inbounds %struct.tilebox, ptr %379, i64 0, i32 3
  store double %442, ptr %443, align 8, !tbaa !294
  %444 = getelementptr inbounds %struct.tilebox, ptr %378, i64 0, i32 2
  br label %453

445:                                              ; preds = %377
  %446 = getelementptr inbounds %struct.tilebox, ptr %378, i64 0, i32 3
  %447 = getelementptr inbounds %struct.tilebox, ptr %379, i64 0, i32 1
  %448 = load <2 x double>, ptr %446, align 8, !tbaa !36
  store <2 x double> %448, ptr %447, align 8, !tbaa !36
  %449 = getelementptr inbounds %struct.tilebox, ptr %378, i64 0, i32 2
  %450 = load double, ptr %449, align 8, !tbaa !293
  %451 = getelementptr inbounds %struct.tilebox, ptr %379, i64 0, i32 3
  store double %450, ptr %451, align 8, !tbaa !294
  %452 = getelementptr inbounds %struct.tilebox, ptr %378, i64 0, i32 1
  br label %453

453:                                              ; preds = %445, %436, %428, %419, %408, %397, %389
  %454 = phi ptr [ %452, %445 ], [ %444, %436 ], [ %435, %428 ], [ %427, %419 ], [ %418, %408 ], [ %407, %397 ], [ %396, %389 ]
  %455 = load double, ptr %454, align 8, !tbaa !36
  %456 = getelementptr inbounds %struct.tilebox, ptr %379, i64 0, i32 4
  store double %455, ptr %456, align 8, !tbaa !295
  br label %457

457:                                              ; preds = %453, %377
  tail call void @move(i32 noundef %388) #44
  tail call void @rect(ptr noundef nonnull %382, ptr noundef nonnull %384, ptr noundef nonnull %383, ptr noundef nonnull %385) #44
  %458 = load i32, ptr %382, align 8, !tbaa !167
  %459 = getelementptr inbounds %struct.tilebox, ptr %379, i64 0, i32 13
  store i32 %458, ptr %459, align 8, !tbaa !382
  %460 = load i32, ptr %383, align 4, !tbaa !168
  %461 = getelementptr inbounds %struct.tilebox, ptr %379, i64 0, i32 14
  store i32 %460, ptr %461, align 4, !tbaa !383
  %462 = load i32, ptr %384, align 8, !tbaa !169
  %463 = getelementptr inbounds %struct.tilebox, ptr %379, i64 0, i32 15
  store i32 %462, ptr %463, align 8, !tbaa !393
  %464 = load i32, ptr %385, align 4, !tbaa !170
  %465 = getelementptr inbounds %struct.tilebox, ptr %379, i64 0, i32 16
  store i32 %464, ptr %465, align 4, !tbaa !394
  %466 = and i32 %388, 2147483645
  %467 = icmp eq i32 %466, 4
  %468 = and i1 %363, %467
  br i1 %468, label %473, label %469

469:                                              ; preds = %457
  %470 = and i32 %388, 2147483646
  %471 = icmp eq i32 %470, 2
  %472 = and i1 %365, %471
  br i1 %472, label %473, label %476

473:                                              ; preds = %469, %457
  %474 = add nsw i32 %458, 1
  store i32 %474, ptr %382, align 8, !tbaa !167
  %475 = add nsw i32 %460, 1
  store i32 %475, ptr %383, align 4, !tbaa !168
  store i32 %474, ptr %459, align 8, !tbaa !382
  store i32 %475, ptr %461, align 4, !tbaa !383
  br label %476

476:                                              ; preds = %473, %469
  %477 = icmp eq i32 %466, 1
  %478 = and i1 %363, %477
  br i1 %478, label %481, label %479

479:                                              ; preds = %476
  br i1 %366, label %484, label %480

480:                                              ; preds = %479
  switch i32 %388, label %484 [
    i32 7, label %481
    i32 4, label %481
  ]

481:                                              ; preds = %480, %480, %476
  %482 = add nsw i32 %462, 1
  store i32 %482, ptr %384, align 8, !tbaa !169
  %483 = add nsw i32 %464, 1
  store i32 %483, ptr %385, align 4, !tbaa !170
  store i32 %482, ptr %463, align 8, !tbaa !393
  store i32 %483, ptr %465, align 4, !tbaa !394
  br label %484

484:                                              ; preds = %481, %480, %479
  %485 = load i32, ptr %367, align 4, !tbaa !171
  %486 = icmp slt i32 %485, 1
  br i1 %486, label %595, label %487

487:                                              ; preds = %484
  %488 = and i32 %388, 2147483646
  %489 = icmp eq i32 %488, 2
  %490 = and i1 %365, %489
  %491 = select i1 %468, i1 true, i1 %490
  br label %492

492:                                              ; preds = %591, %487
  %493 = phi ptr [ %379, %487 ], [ %497, %591 ]
  %494 = phi ptr [ %378, %487 ], [ %496, %591 ]
  %495 = phi i32 [ 1, %487 ], [ %592, %591 ]
  %496 = load ptr, ptr %494, align 8, !tbaa !172
  %497 = tail call noalias dereferenceable_or_null(104) ptr @malloc(i64 noundef 104) #45
  store ptr %497, ptr %493, align 8, !tbaa !172
  store ptr null, ptr %497, align 8, !tbaa !172
  %498 = getelementptr inbounds %struct.tilebox, ptr %496, i64 0, i32 9
  %499 = getelementptr inbounds %struct.tilebox, ptr %497, i64 0, i32 9
  %500 = getelementptr inbounds %struct.tilebox, ptr %497, i64 0, i32 10
  %501 = getelementptr inbounds %struct.tilebox, ptr %497, i64 0, i32 11
  %502 = getelementptr inbounds %struct.tilebox, ptr %497, i64 0, i32 12
  %503 = load <4 x i32>, ptr %498, align 8, !tbaa !17
  store <4 x i32> %503, ptr %499, align 8, !tbaa !17
  %504 = getelementptr inbounds %struct.tilebox, ptr %497, i64 0, i32 17
  store ptr null, ptr %504, align 8, !tbaa !47
  switch i32 %388, label %573 [
    i32 1, label %505
    i32 2, label %513
    i32 3, label %524
    i32 4, label %535
    i32 5, label %544
    i32 6, label %552
    i32 7, label %561
  ]

505:                                              ; preds = %492
  %506 = getelementptr inbounds %struct.tilebox, ptr %496, i64 0, i32 1
  %507 = getelementptr inbounds %struct.tilebox, ptr %497, i64 0, i32 1
  %508 = load <2 x double>, ptr %506, align 8, !tbaa !36
  store <2 x double> %508, ptr %507, align 8, !tbaa !36
  %509 = getelementptr inbounds %struct.tilebox, ptr %496, i64 0, i32 4
  %510 = load double, ptr %509, align 8, !tbaa !295
  %511 = getelementptr inbounds %struct.tilebox, ptr %497, i64 0, i32 3
  store double %510, ptr %511, align 8, !tbaa !294
  %512 = getelementptr inbounds %struct.tilebox, ptr %496, i64 0, i32 3
  br label %569

513:                                              ; preds = %492
  %514 = getelementptr inbounds %struct.tilebox, ptr %496, i64 0, i32 2
  %515 = load double, ptr %514, align 8, !tbaa !293
  %516 = getelementptr inbounds %struct.tilebox, ptr %497, i64 0, i32 1
  store double %515, ptr %516, align 8, !tbaa !292
  %517 = getelementptr inbounds %struct.tilebox, ptr %496, i64 0, i32 1
  %518 = load double, ptr %517, align 8, !tbaa !292
  %519 = getelementptr inbounds %struct.tilebox, ptr %497, i64 0, i32 2
  store double %518, ptr %519, align 8, !tbaa !293
  %520 = getelementptr inbounds %struct.tilebox, ptr %496, i64 0, i32 3
  %521 = load double, ptr %520, align 8, !tbaa !294
  %522 = getelementptr inbounds %struct.tilebox, ptr %497, i64 0, i32 3
  store double %521, ptr %522, align 8, !tbaa !294
  %523 = getelementptr inbounds %struct.tilebox, ptr %496, i64 0, i32 4
  br label %569

524:                                              ; preds = %492
  %525 = getelementptr inbounds %struct.tilebox, ptr %496, i64 0, i32 2
  %526 = load double, ptr %525, align 8, !tbaa !293
  %527 = getelementptr inbounds %struct.tilebox, ptr %497, i64 0, i32 1
  store double %526, ptr %527, align 8, !tbaa !292
  %528 = getelementptr inbounds %struct.tilebox, ptr %496, i64 0, i32 1
  %529 = load double, ptr %528, align 8, !tbaa !292
  %530 = getelementptr inbounds %struct.tilebox, ptr %497, i64 0, i32 2
  store double %529, ptr %530, align 8, !tbaa !293
  %531 = getelementptr inbounds %struct.tilebox, ptr %496, i64 0, i32 4
  %532 = load double, ptr %531, align 8, !tbaa !295
  %533 = getelementptr inbounds %struct.tilebox, ptr %497, i64 0, i32 3
  store double %532, ptr %533, align 8, !tbaa !294
  %534 = getelementptr inbounds %struct.tilebox, ptr %496, i64 0, i32 3
  br label %569

535:                                              ; preds = %492
  %536 = getelementptr inbounds %struct.tilebox, ptr %497, i64 0, i32 1
  %537 = getelementptr inbounds %struct.tilebox, ptr %496, i64 0, i32 3
  %538 = load <2 x double>, ptr %537, align 8, !tbaa !36
  %539 = shufflevector <2 x double> %538, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  store <2 x double> %539, ptr %536, align 8, !tbaa !36
  %540 = getelementptr inbounds %struct.tilebox, ptr %496, i64 0, i32 2
  %541 = load double, ptr %540, align 8, !tbaa !293
  %542 = getelementptr inbounds %struct.tilebox, ptr %497, i64 0, i32 3
  store double %541, ptr %542, align 8, !tbaa !294
  %543 = getelementptr inbounds %struct.tilebox, ptr %496, i64 0, i32 1
  br label %569

544:                                              ; preds = %492
  %545 = getelementptr inbounds %struct.tilebox, ptr %496, i64 0, i32 3
  %546 = getelementptr inbounds %struct.tilebox, ptr %497, i64 0, i32 1
  %547 = load <2 x double>, ptr %545, align 8, !tbaa !36
  store <2 x double> %547, ptr %546, align 8, !tbaa !36
  %548 = getelementptr inbounds %struct.tilebox, ptr %496, i64 0, i32 1
  %549 = load double, ptr %548, align 8, !tbaa !292
  %550 = getelementptr inbounds %struct.tilebox, ptr %497, i64 0, i32 3
  store double %549, ptr %550, align 8, !tbaa !294
  %551 = getelementptr inbounds %struct.tilebox, ptr %496, i64 0, i32 2
  br label %569

552:                                              ; preds = %492
  %553 = getelementptr inbounds %struct.tilebox, ptr %497, i64 0, i32 1
  %554 = getelementptr inbounds %struct.tilebox, ptr %496, i64 0, i32 3
  %555 = load <2 x double>, ptr %554, align 8, !tbaa !36
  %556 = shufflevector <2 x double> %555, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  store <2 x double> %556, ptr %553, align 8, !tbaa !36
  %557 = getelementptr inbounds %struct.tilebox, ptr %496, i64 0, i32 1
  %558 = load double, ptr %557, align 8, !tbaa !292
  %559 = getelementptr inbounds %struct.tilebox, ptr %497, i64 0, i32 3
  store double %558, ptr %559, align 8, !tbaa !294
  %560 = getelementptr inbounds %struct.tilebox, ptr %496, i64 0, i32 2
  br label %569

561:                                              ; preds = %492
  %562 = getelementptr inbounds %struct.tilebox, ptr %496, i64 0, i32 3
  %563 = getelementptr inbounds %struct.tilebox, ptr %497, i64 0, i32 1
  %564 = load <2 x double>, ptr %562, align 8, !tbaa !36
  store <2 x double> %564, ptr %563, align 8, !tbaa !36
  %565 = getelementptr inbounds %struct.tilebox, ptr %496, i64 0, i32 2
  %566 = load double, ptr %565, align 8, !tbaa !293
  %567 = getelementptr inbounds %struct.tilebox, ptr %497, i64 0, i32 3
  store double %566, ptr %567, align 8, !tbaa !294
  %568 = getelementptr inbounds %struct.tilebox, ptr %496, i64 0, i32 1
  br label %569

569:                                              ; preds = %561, %552, %544, %535, %524, %513, %505
  %570 = phi ptr [ %568, %561 ], [ %560, %552 ], [ %551, %544 ], [ %543, %535 ], [ %534, %524 ], [ %523, %513 ], [ %512, %505 ]
  %571 = load double, ptr %570, align 8, !tbaa !36
  %572 = getelementptr inbounds %struct.tilebox, ptr %497, i64 0, i32 4
  store double %571, ptr %572, align 8, !tbaa !295
  br label %573

573:                                              ; preds = %569, %492
  tail call void @move(i32 noundef %388) #44
  tail call void @rect(ptr noundef nonnull %499, ptr noundef nonnull %501, ptr noundef nonnull %500, ptr noundef nonnull %502) #44
  %574 = load i32, ptr %499, align 8, !tbaa !167
  %575 = getelementptr inbounds %struct.tilebox, ptr %497, i64 0, i32 13
  store i32 %574, ptr %575, align 8, !tbaa !382
  %576 = load i32, ptr %500, align 4, !tbaa !168
  %577 = getelementptr inbounds %struct.tilebox, ptr %497, i64 0, i32 14
  store i32 %576, ptr %577, align 4, !tbaa !383
  %578 = load i32, ptr %501, align 8, !tbaa !169
  %579 = getelementptr inbounds %struct.tilebox, ptr %497, i64 0, i32 15
  store i32 %578, ptr %579, align 8, !tbaa !393
  %580 = load i32, ptr %502, align 4, !tbaa !170
  %581 = getelementptr inbounds %struct.tilebox, ptr %497, i64 0, i32 16
  store i32 %580, ptr %581, align 4, !tbaa !394
  br i1 %491, label %582, label %585

582:                                              ; preds = %573
  %583 = add nsw i32 %574, 1
  store i32 %583, ptr %499, align 8, !tbaa !167
  %584 = add nsw i32 %576, 1
  store i32 %584, ptr %500, align 4, !tbaa !168
  store i32 %583, ptr %575, align 8, !tbaa !382
  store i32 %584, ptr %577, align 4, !tbaa !383
  br label %585

585:                                              ; preds = %582, %573
  br i1 %478, label %588, label %586

586:                                              ; preds = %585
  br i1 %366, label %591, label %587

587:                                              ; preds = %586
  switch i32 %388, label %591 [
    i32 7, label %588
    i32 4, label %588
  ]

588:                                              ; preds = %587, %587, %585
  %589 = add nsw i32 %578, 1
  store i32 %589, ptr %501, align 8, !tbaa !169
  %590 = add nsw i32 %580, 1
  store i32 %590, ptr %502, align 4, !tbaa !170
  store i32 %589, ptr %579, align 8, !tbaa !393
  store i32 %590, ptr %581, align 4, !tbaa !394
  br label %591

591:                                              ; preds = %588, %587, %586
  %592 = add nuw nsw i32 %495, 1
  %593 = load i32, ptr %367, align 4, !tbaa !171
  %594 = icmp slt i32 %495, %593
  br i1 %594, label %492, label %595, !llvm.loop !395

595:                                              ; preds = %591, %484, %373, %368
  %596 = add nuw nsw i64 %369, 1
  %597 = icmp eq i64 %596, 8
  br i1 %597, label %598, label %368, !llvm.loop !396

598:                                              ; preds = %595
  %599 = add nuw nsw i64 %345, 1
  %600 = load i32, ptr @numcells, align 4, !tbaa !17
  %601 = load i32, ptr @numpads, align 4, !tbaa !17
  %602 = add nsw i32 %601, %600
  %603 = sext i32 %602 to i64
  %604 = icmp slt i64 %345, %603
  br i1 %604, label %344, label %342, !llvm.loop !397

605:                                              ; preds = %723
  %.lcssa2 = phi i32 [ %724, %723 ]
  %.lcssa1 = phi i32 [ %725, %723 ]
  %.lcssa = phi i32 [ %727, %723 ]
  %606 = icmp slt i32 %.lcssa, 1
  br i1 %606, label %833, label %730

607:                                              ; preds = %723, %342
  %608 = phi i32 [ %724, %723 ], [ %.lcssa4, %342 ]
  %609 = phi i32 [ %725, %723 ], [ %.lcssa5, %342 ]
  %610 = phi i64 [ %726, %723 ], [ 1, %342 ]
  %611 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %612 = getelementptr inbounds ptr, ptr %611, i64 %610
  %613 = load ptr, ptr %612, align 8, !tbaa !7
  %614 = getelementptr inbounds %struct.cellbox, ptr %613, i64 0, i32 8
  %615 = load i32, ptr %614, align 4, !tbaa !385
  %616 = icmp eq i32 %615, 0
  br i1 %616, label %723, label %617

617:                                              ; preds = %607
  %618 = getelementptr inbounds %struct.cellbox, ptr %613, i64 0, i32 21
  %619 = load ptr, ptr %618, align 8, !tbaa !7
  %620 = getelementptr inbounds %struct.tilebox, ptr %619, i64 0, i32 12
  %621 = load i32, ptr %620, align 4, !tbaa !170
  %622 = getelementptr inbounds %struct.tilebox, ptr %619, i64 0, i32 11
  %623 = load i32, ptr %622, align 8, !tbaa !169
  %624 = sub nsw i32 %621, %623
  %625 = getelementptr inbounds %struct.tilebox, ptr %619, i64 0, i32 10
  %626 = load i32, ptr %625, align 4, !tbaa !168
  %627 = getelementptr inbounds %struct.tilebox, ptr %619, i64 0, i32 9
  %628 = load i32, ptr %627, align 8, !tbaa !167
  %629 = sub nsw i32 %626, %628
  %630 = getelementptr inbounds %struct.cellbox, ptr %613, i64 0, i32 5
  %631 = and i32 %624, 1
  %632 = icmp ne i32 %631, 0
  %633 = and i32 %629, 1
  %634 = icmp ne i32 %633, 0
  %635 = icmp eq i32 %633, 0
  br label %636

636:                                              ; preds = %717, %617
  %637 = phi i64 [ 1, %617 ], [ %718, %717 ]
  %638 = load i32, ptr %630, align 8, !tbaa !45
  %639 = zext i32 %638 to i64
  %640 = icmp eq i64 %637, %639
  br i1 %640, label %717, label %641

641:                                              ; preds = %636
  %642 = getelementptr inbounds %struct.cellbox, ptr %613, i64 0, i32 4, i64 %637
  %643 = load i32, ptr %642, align 4, !tbaa !17
  %644 = icmp eq i32 %643, 0
  br i1 %644, label %717, label %645

645:                                              ; preds = %641
  %646 = load ptr, ptr %618, align 8, !tbaa !7
  %647 = getelementptr inbounds %struct.tilebox, ptr %646, i64 0, i32 17
  %648 = load ptr, ptr %647, align 8, !tbaa !47
  %649 = tail call noalias dereferenceable_or_null(32) ptr @malloc(i64 noundef 32) #45
  %650 = getelementptr inbounds %struct.cellbox, ptr %613, i64 0, i32 21, i64 %637
  %651 = load ptr, ptr %650, align 8, !tbaa !7
  %652 = getelementptr inbounds %struct.tilebox, ptr %651, i64 0, i32 17
  store ptr %649, ptr %652, align 8, !tbaa !47
  store ptr null, ptr %649, align 8, !tbaa !49
  %653 = getelementptr inbounds %struct.termbox, ptr %648, i64 0, i32 5
  %654 = load i32, ptr %653, align 8, !tbaa !53
  %655 = getelementptr inbounds %struct.termbox, ptr %649, i64 0, i32 5
  store i32 %654, ptr %655, align 8, !tbaa !53
  %656 = getelementptr inbounds %struct.termbox, ptr %648, i64 0, i32 1
  %657 = getelementptr inbounds %struct.termbox, ptr %649, i64 0, i32 1
  %658 = getelementptr inbounds %struct.termbox, ptr %649, i64 0, i32 2
  %659 = load <2 x i32>, ptr %656, align 8, !tbaa !17
  store <2 x i32> %659, ptr %657, align 8, !tbaa !17
  %660 = trunc i64 %637 to i32
  tail call void @move(i32 noundef %660) #44
  tail call void @point(ptr noundef nonnull %657, ptr noundef nonnull %658) #44
  %661 = load i32, ptr %657, align 8, !tbaa !51
  %662 = getelementptr inbounds %struct.termbox, ptr %649, i64 0, i32 3
  store i32 %661, ptr %662, align 8, !tbaa !386
  %663 = load i32, ptr %658, align 4, !tbaa !52
  %664 = getelementptr inbounds %struct.termbox, ptr %649, i64 0, i32 4
  store i32 %663, ptr %664, align 4, !tbaa !387
  %665 = and i32 %660, 2147483645
  %666 = icmp eq i32 %665, 4
  %667 = and i1 %632, %666
  br i1 %667, label %672, label %668

668:                                              ; preds = %645
  %669 = and i32 %660, 2147483646
  %670 = icmp eq i32 %669, 2
  %671 = and i1 %634, %670
  br i1 %671, label %672, label %674

672:                                              ; preds = %668, %645
  %673 = add nsw i32 %661, 1
  store i32 %673, ptr %657, align 8, !tbaa !51
  store i32 %673, ptr %662, align 8, !tbaa !386
  br label %674

674:                                              ; preds = %672, %668
  %675 = icmp eq i32 %665, 1
  %676 = and i1 %632, %675
  br i1 %676, label %679, label %677

677:                                              ; preds = %674
  br i1 %635, label %681, label %678

678:                                              ; preds = %677
  switch i32 %660, label %681 [
    i32 7, label %679
    i32 4, label %679
  ]

679:                                              ; preds = %678, %678, %674
  %680 = add nsw i32 %663, 1
  store i32 %680, ptr %658, align 4, !tbaa !52
  store i32 %680, ptr %664, align 4, !tbaa !387
  br label %681

681:                                              ; preds = %679, %678, %677
  %682 = load i32, ptr %614, align 4, !tbaa !385
  %683 = icmp slt i32 %682, 2
  br i1 %683, label %717, label %684

684:                                              ; preds = %681
  %685 = and i32 %660, 2147483646
  %686 = icmp eq i32 %685, 2
  %687 = and i1 %634, %686
  %688 = select i1 %667, i1 true, i1 %687
  br label %689

689:                                              ; preds = %713, %684
  %690 = phi ptr [ %649, %684 ], [ %694, %713 ]
  %691 = phi ptr [ %648, %684 ], [ %693, %713 ]
  %692 = phi i32 [ 2, %684 ], [ %714, %713 ]
  %693 = load ptr, ptr %691, align 8, !tbaa !49
  %694 = tail call noalias dereferenceable_or_null(32) ptr @malloc(i64 noundef 32) #45
  store ptr %694, ptr %690, align 8, !tbaa !49
  store ptr null, ptr %694, align 8, !tbaa !49
  %695 = getelementptr inbounds %struct.termbox, ptr %693, i64 0, i32 5
  %696 = load i32, ptr %695, align 8, !tbaa !53
  %697 = getelementptr inbounds %struct.termbox, ptr %694, i64 0, i32 5
  store i32 %696, ptr %697, align 8, !tbaa !53
  %698 = getelementptr inbounds %struct.termbox, ptr %693, i64 0, i32 1
  %699 = getelementptr inbounds %struct.termbox, ptr %694, i64 0, i32 1
  %700 = getelementptr inbounds %struct.termbox, ptr %694, i64 0, i32 2
  %701 = load <2 x i32>, ptr %698, align 8, !tbaa !17
  store <2 x i32> %701, ptr %699, align 8, !tbaa !17
  tail call void @move(i32 noundef %660) #44
  tail call void @point(ptr noundef nonnull %699, ptr noundef nonnull %700) #44
  %702 = load i32, ptr %699, align 8, !tbaa !51
  %703 = getelementptr inbounds %struct.termbox, ptr %694, i64 0, i32 3
  store i32 %702, ptr %703, align 8, !tbaa !386
  %704 = load i32, ptr %700, align 4, !tbaa !52
  %705 = getelementptr inbounds %struct.termbox, ptr %694, i64 0, i32 4
  store i32 %704, ptr %705, align 4, !tbaa !387
  br i1 %688, label %706, label %708

706:                                              ; preds = %689
  %707 = add nsw i32 %702, 1
  store i32 %707, ptr %699, align 8, !tbaa !51
  store i32 %707, ptr %703, align 8, !tbaa !386
  br label %708

708:                                              ; preds = %706, %689
  br i1 %676, label %711, label %709

709:                                              ; preds = %708
  br i1 %635, label %713, label %710

710:                                              ; preds = %709
  switch i32 %660, label %713 [
    i32 7, label %711
    i32 4, label %711
  ]

711:                                              ; preds = %710, %710, %708
  %712 = add nsw i32 %704, 1
  store i32 %712, ptr %700, align 4, !tbaa !52
  store i32 %712, ptr %705, align 4, !tbaa !387
  br label %713

713:                                              ; preds = %711, %710, %709
  %714 = add nuw nsw i32 %692, 1
  %715 = load i32, ptr %614, align 4, !tbaa !385
  %716 = icmp slt i32 %692, %715
  br i1 %716, label %689, label %717, !llvm.loop !398

717:                                              ; preds = %713, %681, %641, %636
  %718 = add nuw nsw i64 %637, 1
  %719 = icmp eq i64 %718, 8
  br i1 %719, label %720, label %636, !llvm.loop !399

720:                                              ; preds = %717
  %721 = load i32, ptr @numcells, align 4, !tbaa !17
  %722 = load i32, ptr @numpads, align 4, !tbaa !17
  br label %723

723:                                              ; preds = %720, %607
  %724 = phi i32 [ %722, %720 ], [ %608, %607 ]
  %725 = phi i32 [ %721, %720 ], [ %609, %607 ]
  %726 = add nuw nsw i64 %610, 1
  %727 = add nsw i32 %724, %725
  %728 = sext i32 %727 to i64
  %729 = icmp slt i64 %610, %728
  br i1 %729, label %607, label %605, !llvm.loop !400

730:                                              ; preds = %826, %605
  %731 = phi i32 [ %827, %826 ], [ %.lcssa2, %605 ]
  %732 = phi i32 [ %828, %826 ], [ %.lcssa1, %605 ]
  %733 = phi i64 [ %829, %826 ], [ 1, %605 ]
  %734 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %735 = getelementptr inbounds ptr, ptr %734, i64 %733
  %736 = load ptr, ptr %735, align 8, !tbaa !7
  %737 = getelementptr inbounds %struct.cellbox, ptr %736, i64 0, i32 10
  %738 = load i32, ptr %737, align 4, !tbaa !297
  %739 = icmp eq i32 %738, 0
  br i1 %739, label %826, label %740

740:                                              ; preds = %730
  %741 = getelementptr inbounds %struct.cellbox, ptr %736, i64 0, i32 17
  %742 = load i32, ptr %741, align 8, !tbaa !227
  %743 = icmp eq i32 %742, 0
  br i1 %743, label %826, label %744

744:                                              ; preds = %740
  %745 = getelementptr inbounds %struct.cellbox, ptr %736, i64 0, i32 21
  %746 = load ptr, ptr %745, align 8, !tbaa !7
  %747 = getelementptr inbounds %struct.tilebox, ptr %746, i64 0, i32 12
  %748 = load i32, ptr %747, align 4, !tbaa !170
  %749 = getelementptr inbounds %struct.tilebox, ptr %746, i64 0, i32 11
  %750 = load i32, ptr %749, align 8, !tbaa !169
  %751 = sub nsw i32 %748, %750
  %752 = getelementptr inbounds %struct.tilebox, ptr %746, i64 0, i32 10
  %753 = load i32, ptr %752, align 4, !tbaa !168
  %754 = getelementptr inbounds %struct.tilebox, ptr %746, i64 0, i32 9
  %755 = load i32, ptr %754, align 8, !tbaa !167
  %756 = sub nsw i32 %753, %755
  %757 = getelementptr inbounds %struct.tilebox, ptr %746, i64 0, i32 18
  %758 = load ptr, ptr %757, align 8, !tbaa !225
  %759 = getelementptr inbounds %struct.cellbox, ptr %736, i64 0, i32 5
  %760 = and i32 %751, 1
  %761 = icmp ne i32 %760, 0
  %762 = and i32 %756, 1
  %763 = icmp ne i32 %762, 0
  %764 = icmp eq i32 %762, 0
  br label %765

765:                                              ; preds = %818, %744
  %766 = phi i32 [ %742, %744 ], [ %819, %818 ]
  %767 = phi i32 [ %742, %744 ], [ %820, %818 ]
  %768 = phi i64 [ 1, %744 ], [ %821, %818 ]
  %769 = load i32, ptr %759, align 8, !tbaa !45
  %770 = zext i32 %769 to i64
  %771 = icmp eq i64 %768, %770
  br i1 %771, label %818, label %772

772:                                              ; preds = %765
  %773 = getelementptr inbounds %struct.cellbox, ptr %736, i64 0, i32 4, i64 %768
  %774 = load i32, ptr %773, align 4, !tbaa !17
  %775 = icmp eq i32 %774, 0
  br i1 %775, label %818, label %776

776:                                              ; preds = %772
  %777 = add nsw i32 %767, 1
  %778 = sext i32 %777 to i64
  %779 = shl nsw i64 %778, 4
  %780 = tail call noalias ptr @malloc(i64 noundef %779) #45
  %781 = getelementptr inbounds %struct.cellbox, ptr %736, i64 0, i32 21, i64 %768
  %782 = load ptr, ptr %781, align 8, !tbaa !7
  %783 = getelementptr inbounds %struct.tilebox, ptr %782, i64 0, i32 18
  store ptr %780, ptr %783, align 8, !tbaa !225
  %784 = icmp slt i32 %766, 1
  br i1 %784, label %818, label %785

785:                                              ; preds = %776
  %786 = trunc i64 %768 to i32
  %787 = and i32 %786, 2147483645
  %788 = icmp eq i32 %787, 4
  %789 = and i1 %761, %788
  %790 = and i32 %786, 2147483646
  %791 = icmp eq i32 %790, 2
  %792 = and i1 %763, %791
  %793 = icmp eq i32 %787, 1
  %794 = and i1 %761, %793
  %795 = select i1 %789, i1 true, i1 %792
  br label %796

796:                                              ; preds = %813, %785
  %797 = phi i64 [ 1, %785 ], [ %814, %813 ]
  %798 = getelementptr inbounds %struct.locbox.26, ptr %758, i64 %797
  %799 = getelementptr inbounds %struct.locbox.26, ptr %780, i64 %797
  %800 = getelementptr inbounds %struct.locbox.26, ptr %780, i64 %797, i32 1
  %801 = load <2 x i32>, ptr %798, align 4, !tbaa !17
  store <2 x i32> %801, ptr %799, align 4, !tbaa !17
  tail call void @move(i32 noundef %786) #44
  tail call void @point(ptr noundef nonnull %799, ptr noundef nonnull %800) #44
  %802 = load i32, ptr %799, align 4, !tbaa !240
  %803 = getelementptr inbounds %struct.locbox.26, ptr %780, i64 %797, i32 2
  store i32 %802, ptr %803, align 4, !tbaa !389
  %804 = load i32, ptr %800, align 4, !tbaa !238
  %805 = getelementptr inbounds %struct.locbox.26, ptr %780, i64 %797, i32 3
  store i32 %804, ptr %805, align 4, !tbaa !390
  br i1 %795, label %806, label %808

806:                                              ; preds = %796
  %807 = add nsw i32 %802, 1
  store i32 %807, ptr %799, align 4, !tbaa !240
  store i32 %807, ptr %803, align 4, !tbaa !389
  br label %808

808:                                              ; preds = %806, %796
  br i1 %794, label %811, label %809

809:                                              ; preds = %808
  br i1 %764, label %813, label %810

810:                                              ; preds = %809
  switch i32 %786, label %813 [
    i32 7, label %811
    i32 4, label %811
  ]

811:                                              ; preds = %810, %810, %808
  %812 = add nsw i32 %804, 1
  store i32 %812, ptr %800, align 4, !tbaa !238
  store i32 %812, ptr %805, align 4, !tbaa !390
  br label %813

813:                                              ; preds = %811, %810, %809
  %814 = add nuw nsw i64 %797, 1
  %815 = load i32, ptr %741, align 8, !tbaa !227
  %816 = sext i32 %815 to i64
  %817 = icmp slt i64 %797, %816
  br i1 %817, label %796, label %818, !llvm.loop !401

818:                                              ; preds = %813, %776, %772, %765
  %819 = phi i32 [ %766, %776 ], [ %766, %772 ], [ %766, %765 ], [ %815, %813 ]
  %820 = phi i32 [ %766, %776 ], [ %767, %772 ], [ %767, %765 ], [ %815, %813 ]
  %821 = add nuw nsw i64 %768, 1
  %822 = icmp eq i64 %821, 8
  br i1 %822, label %823, label %765, !llvm.loop !402

823:                                              ; preds = %818
  %824 = load i32, ptr @numcells, align 4, !tbaa !17
  %825 = load i32, ptr @numpads, align 4, !tbaa !17
  br label %826

826:                                              ; preds = %823, %740, %730
  %827 = phi i32 [ %825, %823 ], [ %731, %740 ], [ %731, %730 ]
  %828 = phi i32 [ %824, %823 ], [ %732, %740 ], [ %732, %730 ]
  %829 = add nuw nsw i64 %733, 1
  %830 = add nsw i32 %827, %828
  %831 = sext i32 %830 to i64
  %832 = icmp slt i64 %733, %831
  br i1 %832, label %730, label %833, !llvm.loop !403

833:                                              ; preds = %826, %605, %342, %5, %0
  tail call void @delHtab() #44
  %834 = load i32, ptr @numnets, align 4, !tbaa !17
  %835 = icmp slt i32 %834, 1
  br i1 %835, label %868, label %836

836:                                              ; preds = %863, %833
  %837 = phi i32 [ %864, %863 ], [ %834, %833 ]
  %838 = phi i64 [ %865, %863 ], [ 1, %833 ]
  %839 = load ptr, ptr @netarray, align 8, !tbaa !7
  %840 = getelementptr inbounds ptr, ptr %839, i64 %838
  %841 = load ptr, ptr %840, align 8, !tbaa !7
  %842 = load ptr, ptr %841, align 8, !tbaa !7
  %843 = icmp eq ptr %842, null
  br i1 %843, label %863, label %844

844:                                              ; preds = %836
  %845 = load ptr, ptr @termarray, align 8, !tbaa !7
  %846 = trunc i64 %838 to i32
  br label %847

847:                                              ; preds = %847, %844
  %848 = phi ptr [ %855, %847 ], [ %845, %844 ]
  %849 = phi ptr [ %859, %847 ], [ %842, %844 ]
  %850 = tail call noalias dereferenceable_or_null(16) ptr @malloc(i64 noundef 16) #45
  %851 = getelementptr inbounds %struct.netbox, ptr %849, i64 0, i32 5
  %852 = load i32, ptr %851, align 8, !tbaa !55
  %853 = sext i32 %852 to i64
  %854 = getelementptr inbounds ptr, ptr %848, i64 %853
  store ptr %850, ptr %854, align 8, !tbaa !7
  %855 = load ptr, ptr @termarray, align 8, !tbaa !7
  %856 = getelementptr inbounds ptr, ptr %855, i64 %853
  %857 = load ptr, ptr %856, align 8, !tbaa !7
  store i32 %846, ptr %857, align 8, !tbaa !60
  %858 = getelementptr inbounds %struct.plist, ptr %857, i64 0, i32 1
  store ptr %849, ptr %858, align 8, !tbaa !62
  %859 = load ptr, ptr %849, align 8, !tbaa !7
  %860 = icmp eq ptr %859, null
  br i1 %860, label %861, label %847, !llvm.loop !404

861:                                              ; preds = %847
  %862 = load i32, ptr @numnets, align 4, !tbaa !17
  br label %863

863:                                              ; preds = %861, %836
  %864 = phi i32 [ %862, %861 ], [ %837, %836 ]
  %865 = add nuw nsw i64 %838, 1
  %866 = sext i32 %864 to i64
  %867 = icmp slt i64 %838, %866
  br i1 %867, label %836, label %868, !llvm.loop !405

868:                                              ; preds = %863, %833
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @gentwf() #0 {
  %1 = alloca [1024 x i8], align 16
  %2 = alloca [4 x i8], align 1
  %3 = alloca [4 x i8], align 1
  %4 = alloca [4 x i8], align 1
  %5 = alloca [12 x i8], align 1
  %6 = alloca [4 x i8], align 1
  %7 = alloca [128 x i8], align 16
  %8 = alloca [128 x i8], align 16
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 1024, ptr nonnull %1) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %3) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4) #47
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %5) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6) #47
  call void @llvm.lifetime.start.p0(i64 128, ptr nonnull %7) #47
  call void @llvm.lifetime.start.p0(i64 128, ptr nonnull %8) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %9) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %10) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %11) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %12) #47
  %13 = load ptr, ptr @cktName, align 8, !tbaa !7
  %14 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %1, ptr noundef nonnull dereferenceable(1) @.str.63, ptr noundef %13) #44
  %15 = call noalias ptr @fopen(ptr noundef nonnull %1, ptr noundef nonnull @.str.1.64) #43
  %16 = load ptr, ptr @cktName, align 8, !tbaa !7
  %17 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %1, ptr noundef nonnull dereferenceable(1) @.str.2.65, ptr noundef %16) #44
  %18 = call noalias ptr @fopen(ptr noundef nonnull %1, ptr noundef nonnull @.str.3.66) #43
  br label %19

19:                                               ; preds = %307, %0
  %20 = phi i32 [ %208, %307 ], [ undef, %0 ]
  %21 = phi ptr [ %209, %307 ], [ undef, %0 ]
  br label %22

22:                                               ; preds = %34, %19
  %23 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %15, ptr noundef nonnull @.str.4.67, ptr noundef nonnull %6) #44
  %24 = icmp eq i32 %23, 1
  br i1 %24, label %25, label %310

25:                                               ; preds = %22
  %26 = call i32 @bcmp(ptr noundef nonnull dereferenceable(4) %6, ptr noundef nonnull dereferenceable(4) @.str.5.68, i64 4)
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %31

28:                                               ; preds = %25
  %29 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %15, ptr noundef nonnull @.str.4.67, ptr noundef nonnull %8) #44
  %30 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %18, ptr noundef nonnull @.str.6.69, ptr noundef nonnull %8) #43
  br label %34

31:                                               ; preds = %25
  %32 = call i32 @bcmp(ptr noundef nonnull dereferenceable(4) %6, ptr noundef nonnull dereferenceable(4) @.str.7.70, i64 4)
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %35, label %34

34:                                               ; preds = %31, %28
  br label %22, !llvm.loop !406

35:                                               ; preds = %31
  %36 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %15, ptr noundef nonnull @.str.8.71, ptr noundef nonnull %7, ptr noundef nonnull %2, ptr noundef nonnull %9, ptr noundef nonnull %3, ptr noundef nonnull %10, ptr noundef nonnull %4, ptr noundef nonnull %11, ptr noundef nonnull %5, ptr noundef nonnull %12) #44
  %37 = load i32, ptr %12, align 4, !tbaa !17
  %38 = icmp eq i32 %37, 1
  %39 = select i1 %38, ptr @.str.9.72, ptr @.str.10.73
  %40 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %18, ptr noundef nonnull %39, ptr noundef nonnull %7) #43
  %41 = load ptr, ptr @xNodules, align 8, !tbaa !7
  %42 = load i32, ptr %11, align 4, !tbaa !17
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds %struct.nodbox, ptr %41, i64 %43
  %45 = load ptr, ptr %44, align 8, !tbaa !7
  %46 = icmp eq ptr %45, null
  %47 = load ptr, ptr @eArray, align 8
  br i1 %46, label %92, label %48

48:                                               ; preds = %35
  %49 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %50 = load i32, ptr %9, align 4, !tbaa !17
  %51 = load i32, ptr %10, align 4
  %52 = load ptr, ptr @rectArray, align 8
  br label %53

53:                                               ; preds = %85, %48
  %54 = phi ptr [ %45, %48 ], [ %90, %85 ]
  %55 = phi ptr [ %21, %48 ], [ %88, %85 ]
  %56 = phi i32 [ 1000000, %48 ], [ %87, %85 ]
  %57 = phi i32 [ %20, %48 ], [ %86, %85 ]
  %58 = load i32, ptr %54, align 8, !tbaa !407
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds %struct.edgebox, ptr %49, i64 %59, i32 3
  %61 = load i32, ptr %60, align 4, !tbaa !140
  %62 = sub nsw i32 %61, %50
  %63 = call i32 @llvm.abs.i32(i32 %62, i1 true)
  %64 = icmp slt i32 %63, %56
  br i1 %64, label %65, label %85

65:                                               ; preds = %53
  %66 = getelementptr inbounds %struct.dlink2, ptr %54, i64 0, i32 1
  %67 = load ptr, ptr %66, align 8, !tbaa !409
  %68 = getelementptr inbounds i32, ptr %67, i64 1
  %69 = load i32, ptr %68, align 4, !tbaa !17
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds %struct.ebox, ptr %47, i64 %70, i32 1
  %72 = load i32, ptr %71, align 4, !tbaa !116
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds %struct.rect, ptr %52, i64 %73, i32 1
  %75 = load i32, ptr %74, align 4, !tbaa !125
  %76 = icmp sgt i32 %51, %75
  br i1 %76, label %85, label %77

77:                                               ; preds = %65
  %78 = getelementptr inbounds %struct.ebox, ptr %47, i64 %70
  %79 = load i32, ptr %78, align 8, !tbaa !114
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds %struct.rect, ptr %52, i64 %80, i32 1
  %82 = load i32, ptr %81, align 4, !tbaa !125
  %83 = icmp slt i32 %51, %82
  br i1 %83, label %85, label %84

84:                                               ; preds = %77
  br label %85

85:                                               ; preds = %84, %77, %65, %53
  %86 = phi i32 [ 1, %84 ], [ %57, %77 ], [ %57, %65 ], [ %57, %53 ]
  %87 = phi i32 [ %63, %84 ], [ %56, %77 ], [ %56, %65 ], [ %56, %53 ]
  %88 = phi ptr [ %54, %84 ], [ %55, %77 ], [ %55, %65 ], [ %55, %53 ]
  %89 = getelementptr inbounds %struct.dlink2, ptr %54, i64 0, i32 2
  %90 = load ptr, ptr %89, align 8, !tbaa !7
  %91 = icmp eq ptr %90, null
  br i1 %91, label %92, label %53, !llvm.loop !410

92:                                               ; preds = %85, %35
  %93 = phi i32 [ %20, %35 ], [ %86, %85 ]
  %94 = phi i32 [ 1000000, %35 ], [ %87, %85 ]
  %95 = phi ptr [ %21, %35 ], [ %88, %85 ]
  %96 = getelementptr inbounds %struct.nodbox, ptr %41, i64 %43, i32 1
  %97 = load ptr, ptr %96, align 8, !tbaa !7
  %98 = icmp eq ptr %97, null
  br i1 %98, label %143, label %99

99:                                               ; preds = %92
  %100 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %101 = load i32, ptr %9, align 4, !tbaa !17
  %102 = load i32, ptr %10, align 4
  %103 = load ptr, ptr @rectArray, align 8
  br label %104

104:                                              ; preds = %136, %99
  %105 = phi ptr [ %97, %99 ], [ %141, %136 ]
  %106 = phi ptr [ %95, %99 ], [ %139, %136 ]
  %107 = phi i32 [ %94, %99 ], [ %138, %136 ]
  %108 = phi i32 [ %93, %99 ], [ %137, %136 ]
  %109 = load i32, ptr %105, align 8, !tbaa !407
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds %struct.edgebox, ptr %100, i64 %110, i32 3
  %112 = load i32, ptr %111, align 4, !tbaa !140
  %113 = sub nsw i32 %112, %101
  %114 = call i32 @llvm.abs.i32(i32 %113, i1 true)
  %115 = icmp slt i32 %114, %107
  br i1 %115, label %116, label %136

116:                                              ; preds = %104
  %117 = getelementptr inbounds %struct.dlink2, ptr %105, i64 0, i32 1
  %118 = load ptr, ptr %117, align 8, !tbaa !409
  %119 = getelementptr inbounds i32, ptr %118, i64 1
  %120 = load i32, ptr %119, align 4, !tbaa !17
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds %struct.ebox, ptr %47, i64 %121, i32 1
  %123 = load i32, ptr %122, align 4, !tbaa !116
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds %struct.rect, ptr %103, i64 %124, i32 1
  %126 = load i32, ptr %125, align 4, !tbaa !125
  %127 = icmp sgt i32 %102, %126
  br i1 %127, label %136, label %128

128:                                              ; preds = %116
  %129 = getelementptr inbounds %struct.ebox, ptr %47, i64 %121
  %130 = load i32, ptr %129, align 8, !tbaa !114
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds %struct.rect, ptr %103, i64 %131, i32 1
  %133 = load i32, ptr %132, align 4, !tbaa !125
  %134 = icmp slt i32 %102, %133
  br i1 %134, label %136, label %135

135:                                              ; preds = %128
  br label %136

136:                                              ; preds = %135, %128, %116, %104
  %137 = phi i32 [ 1, %135 ], [ %108, %128 ], [ %108, %116 ], [ %108, %104 ]
  %138 = phi i32 [ %114, %135 ], [ %107, %128 ], [ %107, %116 ], [ %107, %104 ]
  %139 = phi ptr [ %105, %135 ], [ %106, %128 ], [ %106, %116 ], [ %106, %104 ]
  %140 = getelementptr inbounds %struct.dlink2, ptr %105, i64 0, i32 2
  %141 = load ptr, ptr %140, align 8, !tbaa !7
  %142 = icmp eq ptr %141, null
  br i1 %142, label %143, label %104, !llvm.loop !411

143:                                              ; preds = %136, %92
  %144 = phi i32 [ %93, %92 ], [ %137, %136 ]
  %145 = phi i32 [ %94, %92 ], [ %138, %136 ]
  %146 = phi ptr [ %95, %92 ], [ %139, %136 ]
  %147 = load ptr, ptr @yNodules, align 8, !tbaa !7
  %148 = getelementptr inbounds %struct.nodbox, ptr %147, i64 %43
  %149 = load ptr, ptr %148, align 8, !tbaa !7
  %150 = icmp eq ptr %149, null
  br i1 %150, label %195, label %151

151:                                              ; preds = %143
  %152 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %153 = load i32, ptr %10, align 4, !tbaa !17
  %154 = load i32, ptr %9, align 4
  %155 = load ptr, ptr @rectArray, align 8
  br label %156

156:                                              ; preds = %188, %151
  %157 = phi ptr [ %149, %151 ], [ %193, %188 ]
  %158 = phi ptr [ %146, %151 ], [ %191, %188 ]
  %159 = phi i32 [ %145, %151 ], [ %190, %188 ]
  %160 = phi i32 [ %144, %151 ], [ %189, %188 ]
  %161 = load i32, ptr %157, align 8, !tbaa !407
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds %struct.edgebox, ptr %152, i64 %162, i32 3
  %164 = load i32, ptr %163, align 4, !tbaa !140
  %165 = sub nsw i32 %164, %153
  %166 = call i32 @llvm.abs.i32(i32 %165, i1 true)
  %167 = icmp slt i32 %166, %159
  br i1 %167, label %168, label %188

168:                                              ; preds = %156
  %169 = getelementptr inbounds %struct.dlink2, ptr %157, i64 0, i32 1
  %170 = load ptr, ptr %169, align 8, !tbaa !409
  %171 = getelementptr inbounds i32, ptr %170, i64 1
  %172 = load i32, ptr %171, align 4, !tbaa !17
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds %struct.ebox, ptr %47, i64 %173, i32 1
  %175 = load i32, ptr %174, align 4, !tbaa !116
  %176 = sext i32 %175 to i64
  %177 = getelementptr inbounds %struct.rect, ptr %155, i64 %176
  %178 = load i32, ptr %177, align 4, !tbaa !123
  %179 = icmp sgt i32 %154, %178
  br i1 %179, label %188, label %180

180:                                              ; preds = %168
  %181 = getelementptr inbounds %struct.ebox, ptr %47, i64 %173
  %182 = load i32, ptr %181, align 8, !tbaa !114
  %183 = sext i32 %182 to i64
  %184 = getelementptr inbounds %struct.rect, ptr %155, i64 %183
  %185 = load i32, ptr %184, align 4, !tbaa !123
  %186 = icmp slt i32 %154, %185
  br i1 %186, label %188, label %187

187:                                              ; preds = %180
  br label %188

188:                                              ; preds = %187, %180, %168, %156
  %189 = phi i32 [ 2, %187 ], [ %160, %180 ], [ %160, %168 ], [ %160, %156 ]
  %190 = phi i32 [ %166, %187 ], [ %159, %180 ], [ %159, %168 ], [ %159, %156 ]
  %191 = phi ptr [ %157, %187 ], [ %158, %180 ], [ %158, %168 ], [ %158, %156 ]
  %192 = getelementptr inbounds %struct.dlink2, ptr %157, i64 0, i32 2
  %193 = load ptr, ptr %192, align 8, !tbaa !7
  %194 = icmp eq ptr %193, null
  br i1 %194, label %195, label %156, !llvm.loop !412

195:                                              ; preds = %188, %143
  %196 = phi i32 [ %144, %143 ], [ %189, %188 ]
  %197 = phi i32 [ %145, %143 ], [ %190, %188 ]
  %198 = phi ptr [ %146, %143 ], [ %191, %188 ]
  %199 = getelementptr inbounds %struct.nodbox, ptr %147, i64 %43, i32 1
  %200 = load ptr, ptr %199, align 8, !tbaa !7
  %201 = icmp eq ptr %200, null
  br i1 %201, label %207, label %202

202:                                              ; preds = %195
  %203 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %204 = load i32, ptr %10, align 4, !tbaa !17
  %205 = load i32, ptr %9, align 4
  %206 = load ptr, ptr @rectArray, align 8
  br label %212

207:                                              ; preds = %244, %195
  %208 = phi i32 [ %196, %195 ], [ %245, %244 ]
  %209 = phi ptr [ %198, %195 ], [ %247, %244 ]
  %210 = getelementptr inbounds %struct.dlink2, ptr %209, i64 0, i32 1
  %211 = load ptr, ptr %210, align 8, !tbaa !409
  br label %251

212:                                              ; preds = %244, %202
  %213 = phi ptr [ %200, %202 ], [ %249, %244 ]
  %214 = phi ptr [ %198, %202 ], [ %247, %244 ]
  %215 = phi i32 [ %197, %202 ], [ %246, %244 ]
  %216 = phi i32 [ %196, %202 ], [ %245, %244 ]
  %217 = load i32, ptr %213, align 8, !tbaa !407
  %218 = sext i32 %217 to i64
  %219 = getelementptr inbounds %struct.edgebox, ptr %203, i64 %218, i32 3
  %220 = load i32, ptr %219, align 4, !tbaa !140
  %221 = sub nsw i32 %220, %204
  %222 = call i32 @llvm.abs.i32(i32 %221, i1 true)
  %223 = icmp slt i32 %222, %215
  br i1 %223, label %224, label %244

224:                                              ; preds = %212
  %225 = getelementptr inbounds %struct.dlink2, ptr %213, i64 0, i32 1
  %226 = load ptr, ptr %225, align 8, !tbaa !409
  %227 = getelementptr inbounds i32, ptr %226, i64 1
  %228 = load i32, ptr %227, align 4, !tbaa !17
  %229 = sext i32 %228 to i64
  %230 = getelementptr inbounds %struct.ebox, ptr %47, i64 %229, i32 1
  %231 = load i32, ptr %230, align 4, !tbaa !116
  %232 = sext i32 %231 to i64
  %233 = getelementptr inbounds %struct.rect, ptr %206, i64 %232
  %234 = load i32, ptr %233, align 4, !tbaa !123
  %235 = icmp sgt i32 %205, %234
  br i1 %235, label %244, label %236

236:                                              ; preds = %224
  %237 = getelementptr inbounds %struct.ebox, ptr %47, i64 %229
  %238 = load i32, ptr %237, align 8, !tbaa !114
  %239 = sext i32 %238 to i64
  %240 = getelementptr inbounds %struct.rect, ptr %206, i64 %239
  %241 = load i32, ptr %240, align 4, !tbaa !123
  %242 = icmp slt i32 %205, %241
  br i1 %242, label %244, label %243

243:                                              ; preds = %236
  br label %244

244:                                              ; preds = %243, %236, %224, %212
  %245 = phi i32 [ 2, %243 ], [ %216, %236 ], [ %216, %224 ], [ %216, %212 ]
  %246 = phi i32 [ %222, %243 ], [ %215, %236 ], [ %215, %224 ], [ %215, %212 ]
  %247 = phi ptr [ %213, %243 ], [ %214, %236 ], [ %214, %224 ], [ %214, %212 ]
  %248 = getelementptr inbounds %struct.dlink2, ptr %213, i64 0, i32 2
  %249 = load ptr, ptr %248, align 8, !tbaa !7
  %250 = icmp eq ptr %249, null
  br i1 %250, label %207, label %212, !llvm.loop !413

251:                                              ; preds = %251, %207
  %252 = phi i64 [ 0, %207 ], [ %253, %251 ]
  %253 = add nuw nsw i64 %252, 1
  %254 = getelementptr inbounds i32, ptr %211, i64 %253
  %255 = load i32, ptr %254, align 4, !tbaa !17
  %256 = sext i32 %255 to i64
  %257 = getelementptr inbounds %struct.ebox, ptr %47, i64 %256, i32 11
  %258 = load i32, ptr %257, align 4, !tbaa !414
  %259 = icmp eq i32 %258, 1
  br i1 %259, label %251, label %260, !llvm.loop !415

260:                                              ; preds = %251
  %.lcssa = phi i64 [ %256, %251 ]
  %261 = getelementptr inbounds %struct.ebox, ptr %47, i64 %.lcssa
  %262 = load i32, ptr %261, align 8, !tbaa !114
  %263 = getelementptr inbounds %struct.ebox, ptr %47, i64 %.lcssa, i32 1
  %264 = load i32, ptr %263, align 4, !tbaa !116
  %265 = icmp eq i32 %208, 1
  %266 = load ptr, ptr @rectArray, align 8, !tbaa !7
  %267 = sext i32 %262 to i64
  %268 = sext i32 %264 to i64
  br i1 %265, label %269, label %275

269:                                              ; preds = %260
  %270 = load i32, ptr %10, align 4, !tbaa !17
  %271 = getelementptr inbounds %struct.rect, ptr %266, i64 %267, i32 1
  %272 = load i32, ptr %271, align 4, !tbaa !125
  %273 = sub nsw i32 %270, %272
  %274 = getelementptr inbounds %struct.rect, ptr %266, i64 %268, i32 1
  br label %281

275:                                              ; preds = %260
  %276 = load i32, ptr %9, align 4, !tbaa !17
  %277 = getelementptr inbounds %struct.rect, ptr %266, i64 %267
  %278 = load i32, ptr %277, align 4, !tbaa !123
  %279 = sub nsw i32 %276, %278
  %280 = getelementptr inbounds %struct.rect, ptr %266, i64 %268
  br label %281

281:                                              ; preds = %275, %269
  %282 = phi ptr [ %280, %275 ], [ %274, %269 ]
  %283 = phi i32 [ %278, %275 ], [ %272, %269 ]
  %284 = phi i32 [ %279, %275 ], [ %273, %269 ]
  %285 = load i32, ptr %282, align 4, !tbaa !17
  %286 = sub nsw i32 %285, %283
  %287 = icmp slt i32 %284, 0
  br i1 %287, label %288, label %292

288:                                              ; preds = %281
  %289 = call i32 @puts(ptr nonnull dereferenceable(1) @str.19)
  %290 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.12.74, ptr noundef nonnull %7) #43
  %291 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.13.75, i32 noundef %262, i32 noundef %264) #43
  br label %299

292:                                              ; preds = %281
  %293 = icmp sgt i32 %284, %286
  br i1 %293, label %294, label %307

294:                                              ; preds = %292
  %295 = call i32 @puts(ptr nonnull dereferenceable(1) @str)
  %296 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.12.74, ptr noundef nonnull %7) #43
  %297 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.13.75, i32 noundef %262, i32 noundef %264) #43
  %298 = sub nsw i32 %284, %286
  br label %299

299:                                              ; preds = %294, %288
  %300 = phi i32 [ %298, %294 ], [ %284, %288 ]
  %301 = phi ptr [ @str.19, %294 ], [ @str.19, %288 ]
  %302 = phi i32 [ %286, %294 ], [ 0, %288 ]
  %303 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.14.76, i32 noundef %300) #43
  %304 = call i32 @puts(ptr nonnull dereferenceable(1) %301)
  %305 = load ptr, ptr @stdout, align 8, !tbaa !7
  %306 = call i32 @fflush(ptr noundef %305) #43
  store i32 1, ptr @TWsignal, align 4, !tbaa !17
  br label %307

307:                                              ; preds = %299, %292
  %308 = phi i32 [ %284, %292 ], [ %302, %299 ]
  %309 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %18, ptr noundef nonnull @.str.16.77, i32 noundef %262, i32 noundef %264, i32 noundef %308) #43
  br label %19, !llvm.loop !406

310:                                              ; preds = %22
  %311 = call i32 @fclose(ptr noundef %15) #43
  %312 = call i32 @fclose(ptr noundef %18) #43
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %12) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %11) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %10) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9) #47
  call void @llvm.lifetime.end.p0(i64 128, ptr nonnull %8) #47
  call void @llvm.lifetime.end.p0(i64 128, ptr nonnull %7) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6) #47
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %5) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %3) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #47
  call void @llvm.lifetime.end.p0(i64 1024, ptr nonnull %1) #47
  ret void
}

; Function Attrs: optsize
declare i32 @__isoc99_fscanf(ptr noundef, ptr noundef, ...) local_unnamed_addr #22

; Function Attrs: nofree nounwind willreturn memory(argmem: read)
declare i32 @bcmp(ptr nocapture, ptr nocapture, i64) local_unnamed_addr #23

; Function Attrs: nofree nounwind
declare noundef i32 @puts(ptr nocapture noundef readonly) local_unnamed_addr #10

; Function Attrs: nofree nounwind optsize
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #11

; Function Attrs: nounwind optsize uwtable
define internal void @ggenorien() #0 {
  %1 = load i32, ptr @numcells, align 4, !tbaa !17
  %2 = load i32, ptr @numpads, align 4, !tbaa !17
  %3 = add nsw i32 %2, %1
  %4 = icmp slt i32 %3, 1
  br i1 %4, label %257, label %5

5:                                                ; preds = %250, %0
  %6 = phi i32 [ %251, %250 ], [ %2, %0 ]
  %7 = phi i32 [ %252, %250 ], [ %1, %0 ]
  %8 = phi i64 [ %253, %250 ], [ 1, %0 ]
  %9 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %10 = getelementptr inbounds ptr, ptr %9, i64 %8
  %11 = load ptr, ptr %10, align 8, !tbaa !7
  %12 = getelementptr inbounds %struct.cellbox, ptr %11, i64 0, i32 8
  %13 = load i32, ptr %12, align 4, !tbaa !385
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %250, label %15

15:                                               ; preds = %5
  %16 = getelementptr inbounds %struct.cellbox, ptr %11, i64 0, i32 10
  %17 = load i32, ptr %16, align 4, !tbaa !297
  %18 = icmp eq i32 %17, 1
  br i1 %18, label %250, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.cellbox, ptr %11, i64 0, i32 21
  %21 = load ptr, ptr %20, align 8, !tbaa !7
  %22 = getelementptr inbounds %struct.tilebox, ptr %21, i64 0, i32 12
  %23 = load i32, ptr %22, align 4, !tbaa !170
  %24 = getelementptr inbounds %struct.tilebox, ptr %21, i64 0, i32 11
  %25 = load i32, ptr %24, align 8, !tbaa !169
  %26 = getelementptr inbounds %struct.tilebox, ptr %21, i64 0, i32 10
  %27 = load i32, ptr %26, align 4, !tbaa !168
  %28 = getelementptr inbounds %struct.tilebox, ptr %21, i64 0, i32 9
  %29 = load i32, ptr %28, align 8, !tbaa !167
  br label %30

30:                                               ; preds = %49, %19
  %31 = phi i64 [ 1, %19 ], [ %50, %49 ]
  %32 = getelementptr inbounds %struct.cellbox, ptr %11, i64 0, i32 21, i64 %31
  %33 = load ptr, ptr %32, align 8, !tbaa !7
  %34 = icmp eq ptr %33, null
  br i1 %34, label %49, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %struct.tilebox, ptr %33, i64 0, i32 17
  %37 = load ptr, ptr %36, align 8, !tbaa !47
  store ptr null, ptr %36, align 8, !tbaa !47
  %38 = icmp eq ptr %37, null
  br i1 %38, label %49, label %39

39:                                               ; preds = %35
  %40 = load ptr, ptr %37, align 8, !tbaa !49
  %41 = icmp eq ptr %40, null
  br i1 %41, label %47, label %42

42:                                               ; preds = %42, %39
  %43 = phi ptr [ %45, %42 ], [ %40, %39 ]
  %44 = phi ptr [ %43, %42 ], [ %37, %39 ]
  tail call void @free(ptr noundef nonnull %44) #44
  %45 = load ptr, ptr %43, align 8, !tbaa !49
  %46 = icmp eq ptr %45, null
  br i1 %46, label %47, label %42, !llvm.loop !416

47:                                               ; preds = %42, %39
  %48 = phi ptr [ %37, %39 ], [ %43, %42 ]
  tail call void @free(ptr noundef nonnull %48) #44
  br label %49

49:                                               ; preds = %47, %35, %30
  %50 = add nuw nsw i64 %31, 1
  %51 = icmp eq i64 %50, 8
  br i1 %51, label %52, label %30, !llvm.loop !417

52:                                               ; preds = %49
  %53 = sub nsw i32 %23, %25
  %54 = sub nsw i32 %27, %29
  %55 = getelementptr inbounds %struct.cellbox, ptr %11, i64 0, i32 4, i64 8
  %56 = load i32, ptr %55, align 4, !tbaa !17
  switch i32 %56, label %64 [
    i32 0, label %146
    i32 1, label %57
    i32 2, label %58
    i32 3, label %59
    i32 4, label %60
    i32 5, label %61
    i32 6, label %62
    i32 7, label %63
  ]

57:                                               ; preds = %52
  br label %64

58:                                               ; preds = %52
  br label %64

59:                                               ; preds = %52
  br label %64

60:                                               ; preds = %52
  br label %64

61:                                               ; preds = %52
  br label %64

62:                                               ; preds = %52
  br label %64

63:                                               ; preds = %52
  br label %64

64:                                               ; preds = %63, %62, %61, %60, %59, %58, %57, %52
  %65 = phi i32 [ 6, %63 ], [ 7, %62 ], [ %56, %61 ], [ %56, %60 ], [ %56, %59 ], [ %56, %58 ], [ %56, %57 ], [ 8, %52 ]
  %66 = load ptr, ptr %20, align 8, !tbaa !7
  %67 = getelementptr inbounds %struct.tilebox, ptr %66, i64 0, i32 17
  %68 = load ptr, ptr %67, align 8, !tbaa !47
  %69 = tail call noalias dereferenceable_or_null(32) ptr @malloc(i64 noundef 32) #45
  %70 = sext i32 %56 to i64
  %71 = getelementptr inbounds %struct.cellbox, ptr %11, i64 0, i32 21, i64 %70
  %72 = load ptr, ptr %71, align 8, !tbaa !7
  %73 = getelementptr inbounds %struct.tilebox, ptr %72, i64 0, i32 17
  store ptr %69, ptr %73, align 8, !tbaa !47
  store ptr null, ptr %69, align 8, !tbaa !49
  %74 = getelementptr inbounds %struct.termbox, ptr %68, i64 0, i32 1
  %75 = getelementptr inbounds %struct.termbox, ptr %69, i64 0, i32 1
  %76 = getelementptr inbounds %struct.termbox, ptr %68, i64 0, i32 2
  %77 = getelementptr inbounds %struct.termbox, ptr %68, i64 0, i32 3
  %78 = getelementptr inbounds %struct.termbox, ptr %68, i64 0, i32 4
  %79 = load <4 x i32>, ptr %74, align 8, !tbaa !17
  store <4 x i32> %79, ptr %75, align 8, !tbaa !17
  tail call void @move(i32 noundef %65) #44
  tail call void @point(ptr noundef nonnull %74, ptr noundef nonnull %76) #44
  %80 = and i32 %53, 1
  %81 = icmp ne i32 %80, 0
  %82 = and i32 %65, 13
  %83 = icmp eq i32 %82, 4
  %84 = and i1 %81, %83
  br i1 %84, label %93, label %85

85:                                               ; preds = %64
  %86 = and i32 %54, 1
  %87 = icmp ne i32 %86, 0
  %88 = and i32 %65, 14
  %89 = icmp eq i32 %88, 2
  %90 = and i1 %87, %89
  br i1 %90, label %93, label %91

91:                                               ; preds = %85
  %92 = load i32, ptr %74, align 8, !tbaa !51
  br label %96

93:                                               ; preds = %85, %64
  %94 = load i32, ptr %74, align 8, !tbaa !51
  %95 = add nsw i32 %94, 1
  store i32 %95, ptr %74, align 8, !tbaa !51
  br label %96

96:                                               ; preds = %93, %91
  %97 = phi i32 [ %92, %91 ], [ %95, %93 ]
  store i32 %97, ptr %77, align 8, !tbaa !386
  %98 = icmp eq i32 %82, 1
  %99 = and i1 %81, %98
  br i1 %99, label %104, label %100

100:                                              ; preds = %96
  %101 = and i32 %54, 1
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %107, label %103

103:                                              ; preds = %100
  switch i32 %65, label %107 [
    i32 7, label %104
    i32 4, label %104
  ]

104:                                              ; preds = %103, %103, %96
  %105 = load i32, ptr %76, align 4, !tbaa !52
  %106 = add nsw i32 %105, 1
  store i32 %106, ptr %76, align 4, !tbaa !52
  br label %107

107:                                              ; preds = %104, %103, %100
  %108 = load i32, ptr %76, align 4, !tbaa !52
  store i32 %108, ptr %78, align 4, !tbaa !387
  %109 = load i32, ptr %12, align 4, !tbaa !385
  %110 = icmp slt i32 %109, 2
  br i1 %110, label %146, label %111

111:                                              ; preds = %107
  %112 = and i32 %54, 1
  %113 = icmp ne i32 %112, 0
  %114 = and i32 %65, 14
  %115 = icmp eq i32 %114, 2
  %116 = and i1 %113, %115
  %117 = icmp eq i32 %112, 0
  %118 = select i1 %84, i1 true, i1 %116
  br label %119

119:                                              ; preds = %141, %111
  %120 = phi ptr [ %69, %111 ], [ %124, %141 ]
  %121 = phi ptr [ %68, %111 ], [ %123, %141 ]
  %122 = phi i32 [ 2, %111 ], [ %143, %141 ]
  %123 = load ptr, ptr %121, align 8, !tbaa !49
  %124 = tail call noalias dereferenceable_or_null(32) ptr @malloc(i64 noundef 32) #45
  store ptr %124, ptr %120, align 8, !tbaa !49
  store ptr null, ptr %124, align 8, !tbaa !49
  %125 = getelementptr inbounds %struct.termbox, ptr %123, i64 0, i32 1
  %126 = getelementptr inbounds %struct.termbox, ptr %124, i64 0, i32 1
  %127 = getelementptr inbounds %struct.termbox, ptr %123, i64 0, i32 2
  %128 = getelementptr inbounds %struct.termbox, ptr %123, i64 0, i32 3
  %129 = getelementptr inbounds %struct.termbox, ptr %123, i64 0, i32 4
  %130 = load <4 x i32>, ptr %125, align 8, !tbaa !17
  store <4 x i32> %130, ptr %126, align 8, !tbaa !17
  tail call void @move(i32 noundef %65) #44
  tail call void @point(ptr noundef nonnull %125, ptr noundef nonnull %127) #44
  %131 = load i32, ptr %125, align 8, !tbaa !51
  br i1 %118, label %132, label %134

132:                                              ; preds = %119
  %133 = add nsw i32 %131, 1
  store i32 %133, ptr %125, align 8, !tbaa !51
  br label %134

134:                                              ; preds = %132, %119
  %135 = phi i32 [ %131, %119 ], [ %133, %132 ]
  store i32 %135, ptr %128, align 8, !tbaa !386
  br i1 %99, label %138, label %136

136:                                              ; preds = %134
  br i1 %117, label %141, label %137

137:                                              ; preds = %136
  switch i32 %65, label %141 [
    i32 7, label %138
    i32 4, label %138
  ]

138:                                              ; preds = %137, %137, %134
  %139 = load i32, ptr %127, align 4, !tbaa !52
  %140 = add nsw i32 %139, 1
  store i32 %140, ptr %127, align 4, !tbaa !52
  br label %141

141:                                              ; preds = %138, %137, %136
  %142 = load i32, ptr %127, align 4, !tbaa !52
  store i32 %142, ptr %129, align 4, !tbaa !387
  %143 = add nuw nsw i32 %122, 1
  %144 = load i32, ptr %12, align 4, !tbaa !385
  %145 = icmp slt i32 %122, %144
  br i1 %145, label %119, label %146, !llvm.loop !418

146:                                              ; preds = %141, %107, %52
  %147 = load ptr, ptr %20, align 8, !tbaa !7
  %148 = getelementptr inbounds %struct.tilebox, ptr %147, i64 0, i32 12
  %149 = load i32, ptr %148, align 4, !tbaa !170
  %150 = getelementptr inbounds %struct.tilebox, ptr %147, i64 0, i32 11
  %151 = load i32, ptr %150, align 8, !tbaa !169
  %152 = sub nsw i32 %149, %151
  %153 = getelementptr inbounds %struct.tilebox, ptr %147, i64 0, i32 10
  %154 = load i32, ptr %153, align 4, !tbaa !168
  %155 = getelementptr inbounds %struct.tilebox, ptr %147, i64 0, i32 9
  %156 = load i32, ptr %155, align 8, !tbaa !167
  %157 = sub nsw i32 %154, %156
  %158 = and i32 %152, 1
  %159 = icmp ne i32 %158, 0
  %160 = and i32 %157, 1
  %161 = icmp ne i32 %160, 0
  %162 = icmp eq i32 %160, 0
  br label %163

163:                                              ; preds = %244, %146
  %164 = phi i64 [ 1, %146 ], [ %245, %244 ]
  %165 = load i32, ptr %55, align 4, !tbaa !17
  %166 = zext i32 %165 to i64
  %167 = icmp eq i64 %164, %166
  br i1 %167, label %244, label %168

168:                                              ; preds = %163
  %169 = getelementptr inbounds %struct.cellbox, ptr %11, i64 0, i32 4, i64 %164
  %170 = load i32, ptr %169, align 4, !tbaa !17
  %171 = icmp eq i32 %170, 0
  br i1 %171, label %244, label %172

172:                                              ; preds = %168
  %173 = load ptr, ptr %20, align 8, !tbaa !7
  %174 = getelementptr inbounds %struct.tilebox, ptr %173, i64 0, i32 17
  %175 = load ptr, ptr %174, align 8, !tbaa !47
  %176 = tail call noalias dereferenceable_or_null(32) ptr @malloc(i64 noundef 32) #45
  %177 = getelementptr inbounds %struct.cellbox, ptr %11, i64 0, i32 21, i64 %164
  %178 = load ptr, ptr %177, align 8, !tbaa !7
  %179 = getelementptr inbounds %struct.tilebox, ptr %178, i64 0, i32 17
  store ptr %176, ptr %179, align 8, !tbaa !47
  store ptr null, ptr %176, align 8, !tbaa !49
  %180 = getelementptr inbounds %struct.termbox, ptr %175, i64 0, i32 5
  %181 = load i32, ptr %180, align 8, !tbaa !53
  %182 = getelementptr inbounds %struct.termbox, ptr %176, i64 0, i32 5
  store i32 %181, ptr %182, align 8, !tbaa !53
  %183 = getelementptr inbounds %struct.termbox, ptr %175, i64 0, i32 1
  %184 = getelementptr inbounds %struct.termbox, ptr %176, i64 0, i32 1
  %185 = getelementptr inbounds %struct.termbox, ptr %176, i64 0, i32 2
  %186 = load <2 x i32>, ptr %183, align 8, !tbaa !17
  store <2 x i32> %186, ptr %184, align 8, !tbaa !17
  %187 = trunc i64 %164 to i32
  tail call void @move(i32 noundef %187) #44
  tail call void @point(ptr noundef nonnull %184, ptr noundef nonnull %185) #44
  %188 = load i32, ptr %184, align 8, !tbaa !51
  %189 = getelementptr inbounds %struct.termbox, ptr %176, i64 0, i32 3
  store i32 %188, ptr %189, align 8, !tbaa !386
  %190 = load i32, ptr %185, align 4, !tbaa !52
  %191 = getelementptr inbounds %struct.termbox, ptr %176, i64 0, i32 4
  store i32 %190, ptr %191, align 4, !tbaa !387
  %192 = and i32 %187, 2147483645
  %193 = icmp eq i32 %192, 4
  %194 = and i1 %159, %193
  br i1 %194, label %199, label %195

195:                                              ; preds = %172
  %196 = and i32 %187, 2147483646
  %197 = icmp eq i32 %196, 2
  %198 = and i1 %161, %197
  br i1 %198, label %199, label %201

199:                                              ; preds = %195, %172
  %200 = add nsw i32 %188, 1
  store i32 %200, ptr %184, align 8, !tbaa !51
  store i32 %200, ptr %189, align 8, !tbaa !386
  br label %201

201:                                              ; preds = %199, %195
  %202 = icmp eq i32 %192, 1
  %203 = and i1 %159, %202
  br i1 %203, label %206, label %204

204:                                              ; preds = %201
  br i1 %162, label %208, label %205

205:                                              ; preds = %204
  switch i32 %187, label %208 [
    i32 7, label %206
    i32 4, label %206
  ]

206:                                              ; preds = %205, %205, %201
  %207 = add nsw i32 %190, 1
  store i32 %207, ptr %185, align 4, !tbaa !52
  store i32 %207, ptr %191, align 4, !tbaa !387
  br label %208

208:                                              ; preds = %206, %205, %204
  %209 = load i32, ptr %12, align 4, !tbaa !385
  %210 = icmp slt i32 %209, 2
  br i1 %210, label %244, label %211

211:                                              ; preds = %208
  %212 = and i32 %187, 2147483646
  %213 = icmp eq i32 %212, 2
  %214 = and i1 %161, %213
  %215 = select i1 %194, i1 true, i1 %214
  br label %216

216:                                              ; preds = %240, %211
  %217 = phi ptr [ %176, %211 ], [ %221, %240 ]
  %218 = phi ptr [ %175, %211 ], [ %220, %240 ]
  %219 = phi i32 [ 2, %211 ], [ %241, %240 ]
  %220 = load ptr, ptr %218, align 8, !tbaa !49
  %221 = tail call noalias dereferenceable_or_null(32) ptr @malloc(i64 noundef 32) #45
  store ptr %221, ptr %217, align 8, !tbaa !49
  store ptr null, ptr %221, align 8, !tbaa !49
  %222 = getelementptr inbounds %struct.termbox, ptr %220, i64 0, i32 5
  %223 = load i32, ptr %222, align 8, !tbaa !53
  %224 = getelementptr inbounds %struct.termbox, ptr %221, i64 0, i32 5
  store i32 %223, ptr %224, align 8, !tbaa !53
  %225 = getelementptr inbounds %struct.termbox, ptr %220, i64 0, i32 1
  %226 = getelementptr inbounds %struct.termbox, ptr %221, i64 0, i32 1
  %227 = getelementptr inbounds %struct.termbox, ptr %221, i64 0, i32 2
  %228 = load <2 x i32>, ptr %225, align 8, !tbaa !17
  store <2 x i32> %228, ptr %226, align 8, !tbaa !17
  tail call void @move(i32 noundef %187) #44
  tail call void @point(ptr noundef nonnull %226, ptr noundef nonnull %227) #44
  %229 = load i32, ptr %226, align 8, !tbaa !51
  %230 = getelementptr inbounds %struct.termbox, ptr %221, i64 0, i32 3
  store i32 %229, ptr %230, align 8, !tbaa !386
  %231 = load i32, ptr %227, align 4, !tbaa !52
  %232 = getelementptr inbounds %struct.termbox, ptr %221, i64 0, i32 4
  store i32 %231, ptr %232, align 4, !tbaa !387
  br i1 %215, label %233, label %235

233:                                              ; preds = %216
  %234 = add nsw i32 %229, 1
  store i32 %234, ptr %226, align 8, !tbaa !51
  store i32 %234, ptr %230, align 8, !tbaa !386
  br label %235

235:                                              ; preds = %233, %216
  br i1 %203, label %238, label %236

236:                                              ; preds = %235
  br i1 %162, label %240, label %237

237:                                              ; preds = %236
  switch i32 %187, label %240 [
    i32 7, label %238
    i32 4, label %238
  ]

238:                                              ; preds = %237, %237, %235
  %239 = add nsw i32 %231, 1
  store i32 %239, ptr %227, align 4, !tbaa !52
  store i32 %239, ptr %232, align 4, !tbaa !387
  br label %240

240:                                              ; preds = %238, %237, %236
  %241 = add nuw nsw i32 %219, 1
  %242 = load i32, ptr %12, align 4, !tbaa !385
  %243 = icmp slt i32 %219, %242
  br i1 %243, label %216, label %244, !llvm.loop !419

244:                                              ; preds = %240, %208, %168, %163
  %245 = add nuw nsw i64 %164, 1
  %246 = icmp eq i64 %245, 8
  br i1 %246, label %247, label %163, !llvm.loop !420

247:                                              ; preds = %244
  %248 = load i32, ptr @numcells, align 4, !tbaa !17
  %249 = load i32, ptr @numpads, align 4, !tbaa !17
  br label %250

250:                                              ; preds = %247, %15, %5
  %251 = phi i32 [ %249, %247 ], [ %6, %5 ], [ %6, %15 ]
  %252 = phi i32 [ %248, %247 ], [ %7, %5 ], [ %7, %15 ]
  %253 = add nuw nsw i64 %8, 1
  %254 = add nsw i32 %251, %252
  %255 = sext i32 %254 to i64
  %256 = icmp slt i64 %8, %255
  br i1 %256, label %5, label %257, !llvm.loop !421

257:                                              ; preds = %250, %0
  tail call void @delHtab() #44
  %258 = load i32, ptr @numnets, align 4, !tbaa !17
  %259 = icmp slt i32 %258, 1
  br i1 %259, label %260, label %270

260:                                              ; preds = %303, %257
  %261 = load i32, ptr @numcells, align 4, !tbaa !17
  %262 = load i32, ptr @numpads, align 4, !tbaa !17
  %263 = add i32 %262, %261
  %264 = icmp slt i32 %263, 1
  br i1 %264, label %371, label %265

265:                                              ; preds = %260
  %266 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %267 = load ptr, ptr @termarray, align 8
  %268 = add nuw i32 %263, 1
  %269 = zext i32 %268 to i64
  br label %308

270:                                              ; preds = %303, %257
  %271 = phi i32 [ %304, %303 ], [ %258, %257 ]
  %272 = phi i64 [ %305, %303 ], [ 1, %257 ]
  %273 = load ptr, ptr @netarray, align 8, !tbaa !7
  %274 = getelementptr inbounds ptr, ptr %273, i64 %272
  %275 = load ptr, ptr %274, align 8, !tbaa !7
  %276 = load ptr, ptr %275, align 8, !tbaa !7
  %277 = icmp eq ptr %276, null
  br i1 %277, label %303, label %278

278:                                              ; preds = %270
  %279 = load i32, ptr @maxterm, align 4, !tbaa !17
  %280 = trunc i64 %272 to i32
  br label %281

281:                                              ; preds = %297, %278
  %282 = phi i32 [ %298, %297 ], [ %279, %278 ]
  %283 = phi ptr [ %299, %297 ], [ %276, %278 ]
  %284 = getelementptr inbounds %struct.netbox, ptr %283, i64 0, i32 5
  %285 = load i32, ptr %284, align 8, !tbaa !55
  %286 = icmp sgt i32 %285, %282
  br i1 %286, label %287, label %297

287:                                              ; preds = %281
  %288 = tail call noalias dereferenceable_or_null(16) ptr @malloc(i64 noundef 16) #45
  %289 = load ptr, ptr @termarray, align 8, !tbaa !7
  %290 = sext i32 %285 to i64
  %291 = getelementptr inbounds ptr, ptr %289, i64 %290
  store ptr %288, ptr %291, align 8, !tbaa !7
  %292 = load ptr, ptr @termarray, align 8, !tbaa !7
  %293 = getelementptr inbounds ptr, ptr %292, i64 %290
  %294 = load ptr, ptr %293, align 8, !tbaa !7
  store i32 %280, ptr %294, align 8, !tbaa !60
  %295 = getelementptr inbounds %struct.plist, ptr %294, i64 0, i32 1
  store ptr %283, ptr %295, align 8, !tbaa !62
  %296 = load i32, ptr @maxterm, align 4, !tbaa !17
  br label %297

297:                                              ; preds = %287, %281
  %298 = phi i32 [ %282, %281 ], [ %296, %287 ]
  %299 = load ptr, ptr %283, align 8, !tbaa !7
  %300 = icmp eq ptr %299, null
  br i1 %300, label %301, label %281, !llvm.loop !422

301:                                              ; preds = %297
  %302 = load i32, ptr @numnets, align 4, !tbaa !17
  br label %303

303:                                              ; preds = %301, %270
  %304 = phi i32 [ %302, %301 ], [ %271, %270 ]
  %305 = add nuw nsw i64 %272, 1
  %306 = sext i32 %304 to i64
  %307 = icmp slt i64 %272, %306
  br i1 %307, label %270, label %260, !llvm.loop !423

308:                                              ; preds = %368, %265
  %309 = phi i64 [ 1, %265 ], [ %369, %368 ]
  %310 = getelementptr inbounds ptr, ptr %266, i64 %309
  %311 = load ptr, ptr %310, align 8, !tbaa !7
  %312 = getelementptr inbounds %struct.cellbox, ptr %311, i64 0, i32 10
  %313 = load i32, ptr %312, align 4, !tbaa !297
  %314 = icmp eq i32 %313, 0
  br i1 %314, label %326, label %315

315:                                              ; preds = %308
  %316 = getelementptr inbounds %struct.cellbox, ptr %311, i64 0, i32 18
  %317 = load i32, ptr %316, align 4, !tbaa !223
  %318 = icmp slt i32 %317, 1
  br i1 %318, label %368, label %319

319:                                              ; preds = %315
  %320 = getelementptr inbounds %struct.cellbox, ptr %311, i64 0, i32 20
  %321 = load ptr, ptr %320, align 8, !tbaa !226
  %322 = getelementptr inbounds %struct.cellbox, ptr %311, i64 0, i32 2
  %323 = load <2 x i32>, ptr %322, align 4, !tbaa !17
  %324 = add nuw i32 %317, 1
  %325 = zext i32 %324 to i64
  br label %353

326:                                              ; preds = %308
  %327 = getelementptr inbounds %struct.cellbox, ptr %311, i64 0, i32 5
  %328 = load i32, ptr %327, align 8, !tbaa !45
  %329 = sext i32 %328 to i64
  %330 = getelementptr inbounds %struct.cellbox, ptr %311, i64 0, i32 21, i64 %329
  %331 = load ptr, ptr %330, align 8, !tbaa !7
  %332 = getelementptr inbounds %struct.tilebox, ptr %331, i64 0, i32 17
  %333 = load ptr, ptr %332, align 8, !tbaa !7
  %334 = icmp eq ptr %333, null
  br i1 %334, label %368, label %335

335:                                              ; preds = %326
  %336 = getelementptr inbounds %struct.cellbox, ptr %311, i64 0, i32 2
  %337 = load <2 x i32>, ptr %336, align 4, !tbaa !17
  br label %338

338:                                              ; preds = %338, %335
  %339 = phi ptr [ %333, %335 ], [ %351, %338 ]
  %340 = getelementptr inbounds %struct.termbox, ptr %339, i64 0, i32 5
  %341 = load i32, ptr %340, align 8, !tbaa !53
  %342 = sext i32 %341 to i64
  %343 = getelementptr inbounds ptr, ptr %267, i64 %342
  %344 = load ptr, ptr %343, align 8, !tbaa !7
  %345 = getelementptr inbounds %struct.termbox, ptr %339, i64 0, i32 1
  %346 = getelementptr inbounds %struct.plist, ptr %344, i64 0, i32 1
  %347 = load ptr, ptr %346, align 8, !tbaa !62
  %348 = getelementptr inbounds %struct.netbox, ptr %347, i64 0, i32 1
  %349 = load <2 x i32>, ptr %345, align 8, !tbaa !17
  %350 = add nsw <2 x i32> %337, %349
  store <2 x i32> %350, ptr %348, align 8, !tbaa !17
  %351 = load ptr, ptr %339, align 8, !tbaa !7
  %352 = icmp eq ptr %351, null
  br i1 %352, label %368, label %338, !llvm.loop !424

353:                                              ; preds = %353, %319
  %354 = phi i64 [ 1, %319 ], [ %366, %353 ]
  %355 = getelementptr inbounds %struct.uncombox.25, ptr %321, i64 %354
  %356 = load i32, ptr %355, align 4, !tbaa !298
  %357 = getelementptr inbounds %struct.uncombox.25, ptr %321, i64 %354, i32 9
  %358 = sext i32 %356 to i64
  %359 = getelementptr inbounds ptr, ptr %267, i64 %358
  %360 = load ptr, ptr %359, align 8, !tbaa !7
  %361 = getelementptr inbounds %struct.plist, ptr %360, i64 0, i32 1
  %362 = load ptr, ptr %361, align 8, !tbaa !62
  %363 = getelementptr inbounds %struct.netbox, ptr %362, i64 0, i32 1
  %364 = load <2 x i32>, ptr %357, align 4, !tbaa !17
  %365 = add nsw <2 x i32> %323, %364
  store <2 x i32> %365, ptr %363, align 8, !tbaa !17
  %366 = add nuw nsw i64 %354, 1
  %367 = icmp eq i64 %366, %325
  br i1 %367, label %368, label %353, !llvm.loop !425

368:                                              ; preds = %353, %338, %326, %315
  %369 = add nuw nsw i64 %309, 1
  %370 = icmp eq i64 %369, %269
  br i1 %370, label %371, label %308, !llvm.loop !426

371:                                              ; preds = %368, %260
  %372 = load i32, ptr @ecount, align 4, !tbaa !17
  %373 = load i32, ptr @maxterm, align 4, !tbaa !17
  %374 = add nsw i32 %373, %372
  store i32 %374, ptr @maxterm, align 4, !tbaa !17
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @gmain() #0 {
  %1 = alloca ptr, align 8
  %2 = alloca [1024 x i8], align 16
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %1) #47
  call void @llvm.lifetime.start.p0(i64 1024, ptr nonnull %2) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %3) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4) #47
  %5 = load ptr, ptr @cktName, align 8, !tbaa !7
  %6 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %2, ptr noundef nonnull dereferenceable(1) @.str.272, ptr noundef %5) #44
  %7 = call noalias ptr @fopen(ptr noundef nonnull %2, ptr noundef nonnull @.str.1.273) #43
  store ptr %7, ptr @fpdebug, align 8, !tbaa !7
  %8 = icmp eq ptr %7, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %0
  %10 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.274, ptr noundef nonnull %2) #43
  call void @exit(i32 noundef 0) #49
  unreachable

11:                                               ; preds = %0
  %12 = load ptr, ptr @cktName, align 8, !tbaa !7
  %13 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %2, ptr noundef nonnull dereferenceable(1) @.str.3.275, ptr noundef %12) #44
  %14 = call noalias ptr @fopen(ptr noundef nonnull %2, ptr noundef nonnull @.str.4.276) #43
  %15 = icmp eq ptr %14, null
  br i1 %15, label %16, label %19

16:                                               ; preds = %11
  %17 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %18 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %17, ptr noundef nonnull @.str.5.277, ptr noundef nonnull %2) #43
  call void @exit(i32 noundef 0) #49
  unreachable

19:                                               ; preds = %11
  tail call void @readgeo(ptr noundef nonnull %14) #44
  tail call void @makelink() #44
  tail call void @hprobes() #44
  tail call void @vprobes() #44
  %20 = load ptr, ptr @Vptrs, align 8, !tbaa !7
  tail call void @free(ptr noundef %20) #44
  %21 = load ptr, ptr @Hptrs, align 8, !tbaa !7
  tail call void @free(ptr noundef %21) #44
  %22 = load ptr, ptr @Vroot, align 8, !tbaa !7
  %23 = icmp eq ptr %22, null
  br i1 %23, label %27, label %24

24:                                               ; preds = %24, %19
  call void @tpop(ptr noundef nonnull @Vroot, ptr noundef nonnull %1, ptr noundef nonnull %3, ptr noundef nonnull %4) #44
  %25 = load ptr, ptr %1, align 8, !tbaa !7
  %26 = icmp eq ptr %25, null
  br i1 %26, label %27, label %24

27:                                               ; preds = %24, %19
  %28 = load ptr, ptr @Hroot, align 8, !tbaa !7
  %29 = icmp eq ptr %28, null
  br i1 %29, label %33, label %30

30:                                               ; preds = %30, %27
  call void @tpop(ptr noundef nonnull @Hroot, ptr noundef nonnull %1, ptr noundef nonnull %3, ptr noundef nonnull %4) #44
  %31 = load ptr, ptr %1, align 8, !tbaa !7
  %32 = icmp eq ptr %31, null
  br i1 %32, label %33, label %30

33:                                               ; preds = %30, %27
  call void @fulllink() #44
  call void @findnodes() #44
  call void @changraph() #44
  call void @xgraph() #44
  call void @ygraph() #44
  call void @reduceg() #44
  call void @printgph() #44
  call void @gentwf() #44
  %34 = load ptr, ptr @rectArray, align 8, !tbaa !7
  call void @free(ptr noundef %34) #44
  %35 = load ptr, ptr @HRlist, align 8, !tbaa !7
  %36 = icmp eq ptr %35, null
  br i1 %36, label %42, label %37

37:                                               ; preds = %37, %33
  %38 = phi ptr [ %40, %37 ], [ %35, %33 ]
  %39 = getelementptr inbounds %struct.dlink2, ptr %38, i64 0, i32 2
  %40 = load ptr, ptr %39, align 8, !tbaa !347
  call void @free(ptr noundef nonnull %38) #44
  %41 = icmp eq ptr %40, null
  br i1 %41, label %42, label %37, !llvm.loop !427

42:                                               ; preds = %37, %33
  %43 = load ptr, ptr @VRlist, align 8, !tbaa !7
  %44 = icmp eq ptr %43, null
  br i1 %44, label %50, label %45

45:                                               ; preds = %45, %42
  %46 = phi ptr [ %48, %45 ], [ %43, %42 ]
  %47 = getelementptr inbounds %struct.dlink2, ptr %46, i64 0, i32 2
  %48 = load ptr, ptr %47, align 8, !tbaa !347
  call void @free(ptr noundef nonnull %46) #44
  %49 = icmp eq ptr %48, null
  br i1 %49, label %50, label %45, !llvm.loop !428

50:                                               ; preds = %45, %42
  %51 = load ptr, ptr @LEptrs, align 8, !tbaa !7
  call void @free(ptr noundef %51) #44
  %52 = load ptr, ptr @BEptrs, align 8, !tbaa !7
  call void @free(ptr noundef %52) #44
  %53 = load ptr, ptr @LEroot, align 8, !tbaa !7
  %54 = icmp eq ptr %53, null
  br i1 %54, label %58, label %55

55:                                               ; preds = %55, %50
  call void @tpop(ptr noundef nonnull @LEroot, ptr noundef nonnull %1, ptr noundef nonnull %3, ptr noundef nonnull %4) #44
  %56 = load ptr, ptr %1, align 8, !tbaa !7
  %57 = icmp eq ptr %56, null
  br i1 %57, label %58, label %55

58:                                               ; preds = %55, %50
  %59 = load ptr, ptr @BEroot, align 8, !tbaa !7
  %60 = icmp eq ptr %59, null
  br i1 %60, label %64, label %61

61:                                               ; preds = %61, %58
  call void @tpop(ptr noundef nonnull @BEroot, ptr noundef nonnull %1, ptr noundef nonnull %3, ptr noundef nonnull %4) #44
  %62 = load ptr, ptr %1, align 8, !tbaa !7
  %63 = icmp eq ptr %62, null
  br i1 %63, label %64, label %61

64:                                               ; preds = %61, %58
  %65 = load ptr, ptr @Hlist, align 8, !tbaa !7
  %66 = icmp eq ptr %65, null
  br i1 %66, label %72, label %67

67:                                               ; preds = %67, %64
  %68 = phi ptr [ %70, %67 ], [ %65, %64 ]
  %69 = getelementptr inbounds %struct.dlink2, ptr %68, i64 0, i32 2
  %70 = load ptr, ptr %69, align 8, !tbaa !150
  call void @free(ptr noundef nonnull %68) #44
  %71 = icmp eq ptr %70, null
  br i1 %71, label %72, label %67, !llvm.loop !429

72:                                               ; preds = %67, %64
  %73 = load ptr, ptr @Vlist, align 8, !tbaa !7
  %74 = icmp eq ptr %73, null
  br i1 %74, label %80, label %75

75:                                               ; preds = %75, %72
  %76 = phi ptr [ %78, %75 ], [ %73, %72 ]
  %77 = getelementptr inbounds %struct.dlink2, ptr %76, i64 0, i32 2
  %78 = load ptr, ptr %77, align 8, !tbaa !150
  call void @free(ptr noundef nonnull %76) #44
  %79 = icmp eq ptr %78, null
  br i1 %79, label %80, label %75, !llvm.loop !430

80:                                               ; preds = %75, %72
  %81 = load ptr, ptr @Vptrs, align 8, !tbaa !7
  call void @free(ptr noundef %81) #44
  %82 = load ptr, ptr @Hptrs, align 8, !tbaa !7
  call void @free(ptr noundef %82) #44
  %83 = load ptr, ptr @Vroot, align 8, !tbaa !7
  %84 = icmp eq ptr %83, null
  br i1 %84, label %88, label %85

85:                                               ; preds = %85, %80
  call void @tpop(ptr noundef nonnull @Vroot, ptr noundef nonnull %1, ptr noundef nonnull %3, ptr noundef nonnull %4) #44
  %86 = load ptr, ptr %1, align 8, !tbaa !7
  %87 = icmp eq ptr %86, null
  br i1 %87, label %88, label %85

88:                                               ; preds = %85, %80
  %89 = load ptr, ptr @Hroot, align 8, !tbaa !7
  %90 = icmp eq ptr %89, null
  br i1 %90, label %94, label %91

91:                                               ; preds = %91, %88
  call void @tpop(ptr noundef nonnull @Hroot, ptr noundef nonnull %1, ptr noundef nonnull %3, ptr noundef nonnull %4) #44
  %92 = load ptr, ptr %1, align 8, !tbaa !7
  %93 = icmp eq ptr %92, null
  br i1 %93, label %94, label %91

94:                                               ; preds = %91, %88
  %95 = load ptr, ptr @VDptrs, align 8, !tbaa !7
  call void @free(ptr noundef %95) #44
  %96 = load ptr, ptr @HRptrs, align 8, !tbaa !7
  call void @free(ptr noundef %96) #44
  %97 = load ptr, ptr @VDroot, align 8, !tbaa !7
  %98 = icmp eq ptr %97, null
  br i1 %98, label %102, label %99

99:                                               ; preds = %99, %94
  call void @tpop(ptr noundef nonnull @VDroot, ptr noundef nonnull %1, ptr noundef nonnull %3, ptr noundef nonnull %4) #44
  %100 = load ptr, ptr %1, align 8, !tbaa !7
  %101 = icmp eq ptr %100, null
  br i1 %101, label %102, label %99

102:                                              ; preds = %99, %94
  %103 = load ptr, ptr @HRroot, align 8, !tbaa !7
  %104 = icmp eq ptr %103, null
  br i1 %104, label %108, label %105

105:                                              ; preds = %105, %102
  call void @tpop(ptr noundef nonnull @HRroot, ptr noundef nonnull %1, ptr noundef nonnull %3, ptr noundef nonnull %4) #44
  %106 = load ptr, ptr %1, align 8, !tbaa !7
  %107 = icmp eq ptr %106, null
  br i1 %107, label %108, label %105

108:                                              ; preds = %105, %102
  %109 = load ptr, ptr @hFixedList, align 8, !tbaa !7
  %110 = icmp eq ptr %109, null
  br i1 %110, label %116, label %111

111:                                              ; preds = %111, %108
  %112 = phi ptr [ %114, %111 ], [ %109, %108 ]
  %113 = getelementptr inbounds %struct.dlink2, ptr %112, i64 0, i32 2
  %114 = load ptr, ptr %113, align 8, !tbaa !150
  call void @free(ptr noundef nonnull %112) #44
  %115 = icmp eq ptr %114, null
  br i1 %115, label %116, label %111, !llvm.loop !431

116:                                              ; preds = %111, %108
  %117 = load ptr, ptr @vFixedList, align 8, !tbaa !7
  %118 = icmp eq ptr %117, null
  br i1 %118, label %119, label %122

119:                                              ; preds = %122, %116
  %120 = load i32, ptr @numberCells, align 4, !tbaa !17
  %121 = icmp slt i32 %120, -1
  br i1 %121, label %185, label %127

122:                                              ; preds = %122, %116
  %123 = phi ptr [ %125, %122 ], [ %117, %116 ]
  %124 = getelementptr inbounds %struct.dlink2, ptr %123, i64 0, i32 2
  %125 = load ptr, ptr %124, align 8, !tbaa !150
  call void @free(ptr noundef nonnull %123) #44
  %126 = icmp eq ptr %125, null
  br i1 %126, label %119, label %122, !llvm.loop !432

127:                                              ; preds = %180, %119
  %128 = phi i64 [ %181, %180 ], [ 0, %119 ]
  %129 = load ptr, ptr @xNodules, align 8, !tbaa !7
  %130 = getelementptr inbounds %struct.nodbox, ptr %129, i64 %128, i32 1
  %131 = load ptr, ptr %130, align 8, !tbaa !433
  %132 = icmp eq ptr %131, null
  br i1 %132, label %142, label %133

133:                                              ; preds = %133, %127
  %134 = phi ptr [ %138, %133 ], [ %131, %127 ]
  %135 = getelementptr inbounds %struct.dlink2, ptr %134, i64 0, i32 1
  %136 = load ptr, ptr %135, align 8, !tbaa !409
  call void @free(ptr noundef %136) #44
  %137 = getelementptr inbounds %struct.dlink2, ptr %134, i64 0, i32 2
  %138 = load ptr, ptr %137, align 8, !tbaa !435
  call void @free(ptr noundef nonnull %134) #44
  %139 = icmp eq ptr %138, null
  br i1 %139, label %140, label %133, !llvm.loop !436

140:                                              ; preds = %133
  %141 = load ptr, ptr @xNodules, align 8, !tbaa !7
  br label %142

142:                                              ; preds = %140, %127
  %143 = phi ptr [ %141, %140 ], [ %129, %127 ]
  %144 = getelementptr inbounds %struct.nodbox, ptr %143, i64 %128
  %145 = load ptr, ptr %144, align 8, !tbaa !437
  %146 = icmp eq ptr %145, null
  br i1 %146, label %154, label %147

147:                                              ; preds = %147, %142
  %148 = phi ptr [ %152, %147 ], [ %145, %142 ]
  %149 = getelementptr inbounds %struct.dlink2, ptr %148, i64 0, i32 1
  %150 = load ptr, ptr %149, align 8, !tbaa !409
  call void @free(ptr noundef %150) #44
  %151 = getelementptr inbounds %struct.dlink2, ptr %148, i64 0, i32 2
  %152 = load ptr, ptr %151, align 8, !tbaa !435
  call void @free(ptr noundef nonnull %148) #44
  %153 = icmp eq ptr %152, null
  br i1 %153, label %154, label %147, !llvm.loop !438

154:                                              ; preds = %147, %142
  %155 = load ptr, ptr @yNodules, align 8, !tbaa !7
  %156 = getelementptr inbounds %struct.nodbox, ptr %155, i64 %128, i32 1
  %157 = load ptr, ptr %156, align 8, !tbaa !433
  %158 = icmp eq ptr %157, null
  br i1 %158, label %168, label %159

159:                                              ; preds = %159, %154
  %160 = phi ptr [ %164, %159 ], [ %157, %154 ]
  %161 = getelementptr inbounds %struct.dlink2, ptr %160, i64 0, i32 1
  %162 = load ptr, ptr %161, align 8, !tbaa !409
  call void @free(ptr noundef %162) #44
  %163 = getelementptr inbounds %struct.dlink2, ptr %160, i64 0, i32 2
  %164 = load ptr, ptr %163, align 8, !tbaa !435
  call void @free(ptr noundef nonnull %160) #44
  %165 = icmp eq ptr %164, null
  br i1 %165, label %166, label %159, !llvm.loop !439

166:                                              ; preds = %159
  %167 = load ptr, ptr @yNodules, align 8, !tbaa !7
  br label %168

168:                                              ; preds = %166, %154
  %169 = phi ptr [ %167, %166 ], [ %155, %154 ]
  %170 = getelementptr inbounds %struct.nodbox, ptr %169, i64 %128
  %171 = load ptr, ptr %170, align 8, !tbaa !437
  %172 = icmp eq ptr %171, null
  br i1 %172, label %180, label %173

173:                                              ; preds = %173, %168
  %174 = phi ptr [ %178, %173 ], [ %171, %168 ]
  %175 = getelementptr inbounds %struct.dlink2, ptr %174, i64 0, i32 1
  %176 = load ptr, ptr %175, align 8, !tbaa !409
  call void @free(ptr noundef %176) #44
  %177 = getelementptr inbounds %struct.dlink2, ptr %174, i64 0, i32 2
  %178 = load ptr, ptr %177, align 8, !tbaa !435
  call void @free(ptr noundef nonnull %174) #44
  %179 = icmp eq ptr %178, null
  br i1 %179, label %180, label %173, !llvm.loop !440

180:                                              ; preds = %173, %168
  %181 = add nuw nsw i64 %128, 1
  %182 = load i32, ptr @numberCells, align 4, !tbaa !17
  %183 = sext i32 %182 to i64
  %184 = icmp sgt i64 %128, %183
  br i1 %184, label %185, label %127, !llvm.loop !441

185:                                              ; preds = %180, %119
  %186 = load ptr, ptr @xNodules, align 8, !tbaa !7
  call void @free(ptr noundef %186) #44
  %187 = load ptr, ptr @yNodules, align 8, !tbaa !7
  call void @free(ptr noundef %187) #44
  %188 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %189 = call i32 @fclose(ptr noundef %188) #43
  %190 = call i32 @fclose(ptr noundef nonnull %14) #43
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %3) #47
  call void @llvm.lifetime.end.p0(i64 1024, ptr nonnull %2) #47
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %1) #47
  ret void
}

; Function Attrs: noreturn nounwind optsize
declare void @exit(i32 noundef) local_unnamed_addr #17

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, argmem: read, inaccessiblemem: none) uwtable
define internal i32 @goverlap(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6) #14 {
  %8 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %9 = sext i32 %0 to i64
  %10 = getelementptr inbounds ptr, ptr %8, i64 %9
  %11 = load ptr, ptr %10, align 8, !tbaa !7
  %12 = sext i32 %3 to i64
  %13 = getelementptr inbounds %struct.cellbox, ptr %11, i64 0, i32 21, i64 %12
  %14 = load ptr, ptr %13, align 8, !tbaa !7
  %15 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 9
  %16 = load i32, ptr %15, align 8, !tbaa !167
  %17 = add nsw i32 %16, %1
  %18 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 10
  %19 = load i32, ptr %18, align 4, !tbaa !168
  %20 = add nsw i32 %19, %1
  %21 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 11
  %22 = load i32, ptr %21, align 8, !tbaa !169
  %23 = add nsw i32 %22, %2
  %24 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 12
  %25 = load i32, ptr %24, align 4, !tbaa !170
  %26 = add nsw i32 %25, %2
  %27 = load i32, ptr @numcells, align 4, !tbaa !17
  %28 = icmp slt i32 %27, %0
  br i1 %28, label %42, label %29

29:                                               ; preds = %7
  %30 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 5
  %31 = load i32, ptr %30, align 8, !tbaa !442
  %32 = sub nsw i32 %17, %31
  %33 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 6
  %34 = load i32, ptr %33, align 4, !tbaa !443
  %35 = add nsw i32 %34, %20
  %36 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 7
  %37 = load i32, ptr %36, align 8, !tbaa !444
  %38 = sub nsw i32 %23, %37
  %39 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 8
  %40 = load i32, ptr %39, align 4, !tbaa !445
  %41 = add nsw i32 %40, %26
  br label %42

42:                                               ; preds = %29, %7
  %43 = phi i32 [ %32, %29 ], [ %17, %7 ]
  %44 = phi i32 [ %35, %29 ], [ %20, %7 ]
  %45 = phi i32 [ %38, %29 ], [ %23, %7 ]
  %46 = phi i32 [ %41, %29 ], [ %26, %7 ]
  %47 = load i32, ptr @binOffsetX, align 4, !tbaa !17
  %48 = sub nsw i32 %43, %47
  %49 = load i32, ptr @binWidthX, align 4, !tbaa !17
  %50 = sdiv i32 %48, %49
  %51 = icmp slt i32 %50, 1
  %52 = load i32, ptr @numBinsX, align 4
  %53 = tail call i32 @llvm.smin.i32(i32 %50, i32 %52)
  %54 = select i1 %51, i32 1, i32 %53
  %55 = sub nsw i32 %44, %47
  %56 = sdiv i32 %55, %49
  %57 = icmp sgt i32 %56, %52
  %58 = tail call i32 @llvm.smax.i32(i32 %56, i32 1)
  %59 = select i1 %57, i32 %52, i32 %58
  %60 = load i32, ptr @binOffsetY, align 4, !tbaa !17
  %61 = sub nsw i32 %45, %60
  %62 = load i32, ptr @binWidthY, align 4, !tbaa !17
  %63 = sdiv i32 %61, %62
  %64 = icmp slt i32 %63, 1
  %65 = load i32, ptr @numBinsY, align 4
  %66 = tail call i32 @llvm.smin.i32(i32 %63, i32 %65)
  %67 = select i1 %64, i32 1, i32 %66
  %68 = sub nsw i32 %46, %60
  %69 = sdiv i32 %68, %62
  %70 = icmp sgt i32 %69, %65
  %71 = tail call i32 @llvm.smax.i32(i32 %69, i32 1)
  %72 = select i1 %70, i32 %65, i32 %71
  %73 = icmp eq i32 %54, %59
  %74 = icmp eq i32 %67, %72
  %75 = select i1 %73, i1 %74, i1 false
  %76 = select i1 %75, i32 %54, i32 0
  %77 = select i1 %75, i32 %67, i32 0
  store i32 %76, ptr @binX, align 4, !tbaa !17
  store i32 %77, ptr @binY, align 4, !tbaa !17
  %78 = icmp slt i32 %59, 0
  br i1 %78, label %319, label %79

79:                                               ; preds = %42
  %80 = icmp slt i32 %72, 0
  %81 = load ptr, ptr @blockarray, align 8
  %82 = icmp eq i32 %5, 0
  %83 = getelementptr inbounds %struct.cellbox, ptr %11, i64 0, i32 6
  %84 = load double, ptr @lapFactor, align 8
  %85 = load i32, ptr @offset, align 4
  %86 = sext i32 %67 to i64
  %87 = add i32 %72, 1
  %88 = sext i32 %54 to i64
  %89 = add nuw i32 %59, 1
  %90 = zext i32 %89 to i64
  %91 = zext i32 %87 to i64
  br label %92

92:                                               ; preds = %315, %79
  %93 = phi i64 [ 0, %79 ], [ %317, %315 ]
  %94 = phi i32 [ 0, %79 ], [ %316, %315 ]
  %95 = icmp ne i64 %93, 0
  %96 = icmp slt i64 %93, %88
  %97 = and i1 %95, %96
  %98 = select i1 %97, i1 true, i1 %80
  br i1 %98, label %315, label %99

99:                                               ; preds = %92
  %100 = icmp eq i64 %93, 0
  %101 = getelementptr inbounds ptr, ptr %81, i64 %93
  br label %102

102:                                              ; preds = %311, %99
  %103 = phi i64 [ 0, %99 ], [ %313, %311 ]
  %104 = phi i32 [ %94, %99 ], [ %312, %311 ]
  %105 = or i64 %103, %93
  %106 = and i64 %105, 4294967295
  %107 = icmp ne i64 %106, 0
  %108 = icmp slt i64 %103, %86
  %109 = or i1 %100, %108
  %110 = select i1 %107, i1 %109, i1 false
  br i1 %110, label %311, label %111

111:                                              ; preds = %102
  %112 = load ptr, ptr %101, align 8, !tbaa !7
  %113 = getelementptr inbounds ptr, ptr %112, i64 %103
  %114 = load ptr, ptr %113, align 8, !tbaa !7
  %115 = load i32, ptr %114, align 4, !tbaa !17
  %116 = icmp slt i32 %115, 1
  br i1 %116, label %311, label %117

117:                                              ; preds = %111
  %118 = add nuw i32 %115, 1
  %119 = zext i32 %118 to i64
  br label %120

120:                                              ; preds = %307, %117
  %121 = phi i64 [ 1, %117 ], [ %309, %307 ]
  %122 = phi i32 [ %104, %117 ], [ %308, %307 ]
  %123 = getelementptr inbounds i32, ptr %114, i64 %121
  %124 = load i32, ptr %123, align 4, !tbaa !17
  %125 = icmp eq i32 %124, %0
  br i1 %125, label %307, label %126

126:                                              ; preds = %120
  %127 = sext i32 %124 to i64
  %128 = getelementptr inbounds ptr, ptr %8, i64 %127
  %129 = load ptr, ptr %128, align 8, !tbaa !7
  %130 = icmp eq i32 %124, %4
  br i1 %130, label %134, label %131

131:                                              ; preds = %126
  %132 = getelementptr inbounds %struct.cellbox, ptr %129, i64 0, i32 5
  %133 = load i32, ptr %132, align 8, !tbaa !45
  br label %135

134:                                              ; preds = %126
  br i1 %82, label %135, label %307

135:                                              ; preds = %134, %131
  %136 = phi i32 [ %133, %131 ], [ %6, %134 ]
  %137 = phi ptr [ %129, %131 ], [ %11, %134 ]
  %138 = getelementptr inbounds %struct.cellbox, ptr %137, i64 0, i32 3
  %139 = getelementptr inbounds %struct.cellbox, ptr %137, i64 0, i32 2
  %140 = sext i32 %136 to i64
  %141 = getelementptr inbounds %struct.cellbox, ptr %129, i64 0, i32 21, i64 %140
  %142 = load i32, ptr %138, align 8, !tbaa !165
  %143 = load i32, ptr %139, align 4, !tbaa !164
  %144 = load ptr, ptr %141, align 8, !tbaa !7
  %145 = getelementptr inbounds %struct.tilebox, ptr %144, i64 0, i32 9
  %146 = load i32, ptr %145, align 8, !tbaa !167
  %147 = add nsw i32 %146, %143
  %148 = getelementptr inbounds %struct.tilebox, ptr %144, i64 0, i32 10
  %149 = load i32, ptr %148, align 4, !tbaa !168
  %150 = add nsw i32 %149, %143
  %151 = getelementptr inbounds %struct.tilebox, ptr %144, i64 0, i32 11
  %152 = load i32, ptr %151, align 8, !tbaa !169
  %153 = add nsw i32 %152, %142
  %154 = getelementptr inbounds %struct.tilebox, ptr %144, i64 0, i32 12
  %155 = load i32, ptr %154, align 4, !tbaa !170
  %156 = add nsw i32 %155, %142
  %157 = icmp sgt i32 %124, %27
  br i1 %157, label %171, label %158

158:                                              ; preds = %135
  %159 = getelementptr inbounds %struct.tilebox, ptr %144, i64 0, i32 5
  %160 = load i32, ptr %159, align 8, !tbaa !442
  %161 = sub nsw i32 %147, %160
  %162 = getelementptr inbounds %struct.tilebox, ptr %144, i64 0, i32 6
  %163 = load i32, ptr %162, align 4, !tbaa !443
  %164 = add nsw i32 %163, %150
  %165 = getelementptr inbounds %struct.tilebox, ptr %144, i64 0, i32 7
  %166 = load i32, ptr %165, align 8, !tbaa !444
  %167 = sub nsw i32 %153, %166
  %168 = getelementptr inbounds %struct.tilebox, ptr %144, i64 0, i32 8
  %169 = load i32, ptr %168, align 4, !tbaa !445
  %170 = add nsw i32 %169, %156
  br label %171

171:                                              ; preds = %158, %135
  %172 = phi i32 [ %161, %158 ], [ %147, %135 ]
  %173 = phi i32 [ %164, %158 ], [ %150, %135 ]
  %174 = phi i32 [ %167, %158 ], [ %153, %135 ]
  %175 = phi i32 [ %170, %158 ], [ %156, %135 ]
  %176 = icmp slt i32 %172, %44
  %177 = icmp slt i32 %43, %173
  %178 = select i1 %176, i1 %177, i1 false
  %179 = icmp slt i32 %174, %46
  %180 = select i1 %178, i1 %179, i1 false
  %181 = icmp slt i32 %45, %175
  %182 = select i1 %180, i1 %181, i1 false
  br i1 %182, label %183, label %307

183:                                              ; preds = %171
  %184 = load i32, ptr %83, align 4, !tbaa !171
  %185 = icmp eq i32 %184, 1
  br i1 %185, label %186, label %203

186:                                              ; preds = %183
  %187 = getelementptr inbounds %struct.cellbox, ptr %129, i64 0, i32 6
  %188 = load i32, ptr %187, align 4, !tbaa !171
  %189 = icmp eq i32 %188, 1
  br i1 %189, label %190, label %203

190:                                              ; preds = %186
  %191 = tail call i32 @llvm.smax.i32(i32 %43, i32 %172)
  %192 = tail call i32 @llvm.smin.i32(i32 %44, i32 %173)
  %193 = tail call i32 @llvm.smax.i32(i32 %45, i32 %174)
  %194 = tail call i32 @llvm.smin.i32(i32 %46, i32 %175)
  %195 = sub nsw i32 %194, %193
  %196 = sub nsw i32 %192, %191
  %197 = mul nsw i32 %195, %196
  %198 = add nsw i32 %85, %197
  %199 = sitofp i32 %198 to double
  %200 = fmul double %84, %199
  %201 = fptosi double %200 to i32
  %202 = add nsw i32 %122, %201
  br label %307

203:                                              ; preds = %186, %183
  %204 = load ptr, ptr %14, align 8, !tbaa !172
  %205 = icmp eq ptr %204, null
  br i1 %205, label %307, label %206

206:                                              ; preds = %203
  %207 = load ptr, ptr %144, align 8, !tbaa !172
  %208 = icmp eq ptr %207, null
  br label %213

209:                                              ; preds = %295, %241
  %210 = phi i32 [ %215, %241 ], [ %296, %295 ]
  %211 = load ptr, ptr %214, align 8, !tbaa !172
  %212 = icmp eq ptr %211, null
  br i1 %212, label %299, label %213, !llvm.loop !446

213:                                              ; preds = %209, %206
  %214 = phi ptr [ %204, %206 ], [ %211, %209 ]
  %215 = phi i32 [ 0, %206 ], [ %210, %209 ]
  %216 = getelementptr inbounds %struct.tilebox, ptr %214, i64 0, i32 9
  %217 = load i32, ptr %216, align 8, !tbaa !167
  %218 = add nsw i32 %217, %1
  %219 = getelementptr inbounds %struct.tilebox, ptr %214, i64 0, i32 10
  %220 = load i32, ptr %219, align 4, !tbaa !168
  %221 = add nsw i32 %220, %1
  %222 = getelementptr inbounds %struct.tilebox, ptr %214, i64 0, i32 11
  %223 = load i32, ptr %222, align 8, !tbaa !169
  %224 = add nsw i32 %223, %2
  %225 = getelementptr inbounds %struct.tilebox, ptr %214, i64 0, i32 12
  %226 = load i32, ptr %225, align 4, !tbaa !170
  %227 = add nsw i32 %226, %2
  br i1 %28, label %241, label %228

228:                                              ; preds = %213
  %229 = getelementptr inbounds %struct.tilebox, ptr %214, i64 0, i32 5
  %230 = load i32, ptr %229, align 8, !tbaa !442
  %231 = sub nsw i32 %218, %230
  %232 = getelementptr inbounds %struct.tilebox, ptr %214, i64 0, i32 6
  %233 = load i32, ptr %232, align 4, !tbaa !443
  %234 = add nsw i32 %233, %221
  %235 = getelementptr inbounds %struct.tilebox, ptr %214, i64 0, i32 7
  %236 = load i32, ptr %235, align 8, !tbaa !444
  %237 = sub nsw i32 %224, %236
  %238 = getelementptr inbounds %struct.tilebox, ptr %214, i64 0, i32 8
  %239 = load i32, ptr %238, align 4, !tbaa !445
  %240 = add nsw i32 %239, %227
  br label %241

241:                                              ; preds = %228, %213
  %242 = phi i32 [ %231, %228 ], [ %218, %213 ]
  %243 = phi i32 [ %234, %228 ], [ %221, %213 ]
  %244 = phi i32 [ %237, %228 ], [ %224, %213 ]
  %245 = phi i32 [ %240, %228 ], [ %227, %213 ]
  br i1 %208, label %209, label %246

246:                                              ; preds = %295, %241
  %247 = phi ptr [ %297, %295 ], [ %207, %241 ]
  %248 = phi i32 [ %296, %295 ], [ %215, %241 ]
  %249 = getelementptr inbounds %struct.tilebox, ptr %247, i64 0, i32 9
  %250 = load i32, ptr %249, align 8, !tbaa !167
  %251 = add nsw i32 %250, %143
  %252 = getelementptr inbounds %struct.tilebox, ptr %247, i64 0, i32 10
  %253 = load i32, ptr %252, align 4, !tbaa !168
  %254 = add nsw i32 %253, %143
  %255 = getelementptr inbounds %struct.tilebox, ptr %247, i64 0, i32 11
  %256 = load i32, ptr %255, align 8, !tbaa !169
  %257 = add nsw i32 %256, %142
  %258 = getelementptr inbounds %struct.tilebox, ptr %247, i64 0, i32 12
  %259 = load i32, ptr %258, align 4, !tbaa !170
  %260 = add nsw i32 %259, %142
  br i1 %157, label %274, label %261

261:                                              ; preds = %246
  %262 = getelementptr inbounds %struct.tilebox, ptr %247, i64 0, i32 5
  %263 = load i32, ptr %262, align 8, !tbaa !442
  %264 = sub nsw i32 %251, %263
  %265 = getelementptr inbounds %struct.tilebox, ptr %247, i64 0, i32 6
  %266 = load i32, ptr %265, align 4, !tbaa !443
  %267 = add nsw i32 %266, %254
  %268 = getelementptr inbounds %struct.tilebox, ptr %247, i64 0, i32 7
  %269 = load i32, ptr %268, align 8, !tbaa !444
  %270 = sub nsw i32 %257, %269
  %271 = getelementptr inbounds %struct.tilebox, ptr %247, i64 0, i32 8
  %272 = load i32, ptr %271, align 4, !tbaa !445
  %273 = add nsw i32 %272, %260
  br label %274

274:                                              ; preds = %261, %246
  %275 = phi i32 [ %264, %261 ], [ %251, %246 ]
  %276 = phi i32 [ %267, %261 ], [ %254, %246 ]
  %277 = phi i32 [ %270, %261 ], [ %257, %246 ]
  %278 = phi i32 [ %273, %261 ], [ %260, %246 ]
  %279 = icmp slt i32 %275, %243
  %280 = icmp slt i32 %242, %276
  %281 = select i1 %279, i1 %280, i1 false
  %282 = icmp slt i32 %277, %245
  %283 = select i1 %281, i1 %282, i1 false
  %284 = icmp slt i32 %244, %278
  %285 = select i1 %283, i1 %284, i1 false
  br i1 %285, label %286, label %295

286:                                              ; preds = %274
  %287 = tail call i32 @llvm.smax.i32(i32 %242, i32 %275)
  %288 = tail call i32 @llvm.smin.i32(i32 %243, i32 %276)
  %289 = tail call i32 @llvm.smax.i32(i32 %244, i32 %277)
  %290 = tail call i32 @llvm.smin.i32(i32 %245, i32 %278)
  %291 = sub nsw i32 %290, %289
  %292 = sub nsw i32 %288, %287
  %293 = mul nsw i32 %291, %292
  %294 = add nsw i32 %293, %248
  br label %295

295:                                              ; preds = %286, %274
  %296 = phi i32 [ %248, %274 ], [ %294, %286 ]
  %297 = load ptr, ptr %247, align 8, !tbaa !172
  %298 = icmp eq ptr %297, null
  br i1 %298, label %209, label %246, !llvm.loop !447

299:                                              ; preds = %209
  %.lcssa = phi i32 [ %210, %209 ]
  %300 = icmp eq i32 %.lcssa, 0
  br i1 %300, label %307, label %301

301:                                              ; preds = %299
  %302 = add nsw i32 %85, %.lcssa
  %303 = sitofp i32 %302 to double
  %304 = fmul double %84, %303
  %305 = fptosi double %304 to i32
  %306 = add nsw i32 %122, %305
  br label %307

307:                                              ; preds = %301, %299, %203, %190, %171, %134, %120
  %308 = phi i32 [ %122, %120 ], [ %122, %171 ], [ %202, %190 ], [ %306, %301 ], [ %122, %299 ], [ %122, %134 ], [ %122, %203 ]
  %309 = add nuw nsw i64 %121, 1
  %310 = icmp eq i64 %309, %119
  br i1 %310, label %311, label %120, !llvm.loop !448

311:                                              ; preds = %307, %111, %102
  %312 = phi i32 [ %104, %102 ], [ %104, %111 ], [ %308, %307 ]
  %313 = add nuw nsw i64 %103, 1
  %314 = icmp eq i64 %313, %91
  br i1 %314, label %315, label %102, !llvm.loop !449

315:                                              ; preds = %311, %92
  %316 = phi i32 [ %94, %92 ], [ %312, %311 ]
  %317 = add nuw nsw i64 %93, 1
  %318 = icmp eq i64 %317, %90
  br i1 %318, label %319, label %92, !llvm.loop !450

319:                                              ; preds = %315, %42
  %320 = phi i32 [ 0, %42 ], [ %316, %315 ]
  ret i32 %320
}

; Function Attrs: nofree nounwind optsize uwtable
define internal i32 @goverlapf(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6) #5 {
  %8 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %9 = sext i32 %0 to i64
  %10 = getelementptr inbounds ptr, ptr %8, i64 %9
  %11 = load ptr, ptr %10, align 8, !tbaa !7
  %12 = sext i32 %3 to i64
  %13 = getelementptr inbounds %struct.cellbox, ptr %11, i64 0, i32 21, i64 %12
  %14 = load ptr, ptr %13, align 8, !tbaa !7
  %15 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 9
  %16 = load i32, ptr %15, align 8, !tbaa !167
  %17 = add nsw i32 %16, %1
  %18 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 10
  %19 = load i32, ptr %18, align 4, !tbaa !168
  %20 = add nsw i32 %19, %1
  %21 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 11
  %22 = load i32, ptr %21, align 8, !tbaa !169
  %23 = add nsw i32 %22, %2
  %24 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 12
  %25 = load i32, ptr %24, align 4, !tbaa !170
  %26 = add nsw i32 %25, %2
  %27 = load i32, ptr @numcells, align 4, !tbaa !17
  %28 = icmp slt i32 %27, %0
  br i1 %28, label %42, label %29

29:                                               ; preds = %7
  %30 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 5
  %31 = load i32, ptr %30, align 8, !tbaa !442
  %32 = sub nsw i32 %17, %31
  %33 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 6
  %34 = load i32, ptr %33, align 4, !tbaa !443
  %35 = add nsw i32 %34, %20
  %36 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 7
  %37 = load i32, ptr %36, align 8, !tbaa !444
  %38 = sub nsw i32 %23, %37
  %39 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 8
  %40 = load i32, ptr %39, align 4, !tbaa !445
  %41 = add nsw i32 %40, %26
  br label %42

42:                                               ; preds = %29, %7
  %43 = phi i32 [ %32, %29 ], [ %17, %7 ]
  %44 = phi i32 [ %35, %29 ], [ %20, %7 ]
  %45 = phi i32 [ %38, %29 ], [ %23, %7 ]
  %46 = phi i32 [ %41, %29 ], [ %26, %7 ]
  %47 = load i32, ptr @binOffsetX, align 4, !tbaa !17
  %48 = sub nsw i32 %43, %47
  %49 = load i32, ptr @binWidthX, align 4, !tbaa !17
  %50 = sdiv i32 %48, %49
  %51 = icmp slt i32 %50, 1
  %52 = load i32, ptr @numBinsX, align 4
  %53 = tail call i32 @llvm.smin.i32(i32 %50, i32 %52)
  %54 = select i1 %51, i32 1, i32 %53
  %55 = sub nsw i32 %44, %47
  %56 = sdiv i32 %55, %49
  %57 = icmp sgt i32 %56, %52
  %58 = tail call i32 @llvm.smax.i32(i32 %56, i32 1)
  %59 = select i1 %57, i32 %52, i32 %58
  %60 = load i32, ptr @binOffsetY, align 4, !tbaa !17
  %61 = sub nsw i32 %45, %60
  %62 = load i32, ptr @binWidthY, align 4, !tbaa !17
  %63 = sdiv i32 %61, %62
  %64 = icmp slt i32 %63, 1
  %65 = load i32, ptr @numBinsY, align 4
  %66 = tail call i32 @llvm.smin.i32(i32 %63, i32 %65)
  %67 = select i1 %64, i32 1, i32 %66
  %68 = sub nsw i32 %46, %60
  %69 = sdiv i32 %68, %62
  %70 = icmp sgt i32 %69, %65
  %71 = tail call i32 @llvm.smax.i32(i32 %69, i32 1)
  %72 = select i1 %70, i32 %65, i32 %71
  %73 = icmp eq i32 %54, %59
  %74 = icmp eq i32 %67, %72
  %75 = select i1 %73, i1 %74, i1 false
  %76 = select i1 %75, i32 %54, i32 0
  %77 = select i1 %75, i32 %67, i32 0
  store i32 %76, ptr @binX, align 4, !tbaa !17
  store i32 %77, ptr @binY, align 4, !tbaa !17
  %78 = icmp slt i32 %59, 0
  br i1 %78, label %327, label %79

79:                                               ; preds = %42
  %80 = icmp slt i32 %72, 0
  %81 = icmp eq i32 %5, 0
  %82 = getelementptr inbounds %struct.cellbox, ptr %11, i64 0, i32 6
  %83 = sext i32 %67 to i64
  %84 = add i32 %72, 1
  %85 = sext i32 %54 to i64
  %86 = add nuw i32 %59, 1
  %87 = zext i32 %86 to i64
  %88 = zext i32 %84 to i64
  br label %89

89:                                               ; preds = %323, %79
  %90 = phi i64 [ 0, %79 ], [ %325, %323 ]
  %91 = phi i32 [ 0, %79 ], [ %324, %323 ]
  %92 = icmp ne i64 %90, 0
  %93 = icmp slt i64 %90, %85
  %94 = and i1 %92, %93
  %95 = select i1 %94, i1 true, i1 %80
  br i1 %95, label %323, label %96

96:                                               ; preds = %89
  %97 = icmp eq i64 %90, 0
  br label %98

98:                                               ; preds = %319, %96
  %99 = phi i64 [ 0, %96 ], [ %321, %319 ]
  %100 = phi i32 [ %91, %96 ], [ %320, %319 ]
  %101 = or i64 %99, %90
  %102 = and i64 %101, 4294967295
  %103 = icmp ne i64 %102, 0
  %104 = icmp slt i64 %99, %83
  %105 = or i1 %97, %104
  %106 = select i1 %103, i1 %105, i1 false
  br i1 %106, label %319, label %107

107:                                              ; preds = %98
  %108 = load ptr, ptr @blockarray, align 8, !tbaa !7
  %109 = getelementptr inbounds ptr, ptr %108, i64 %90
  %110 = load ptr, ptr %109, align 8, !tbaa !7
  %111 = getelementptr inbounds ptr, ptr %110, i64 %99
  %112 = load ptr, ptr %111, align 8, !tbaa !7
  %113 = load i32, ptr %112, align 4, !tbaa !17
  %114 = icmp slt i32 %113, 1
  br i1 %114, label %319, label %115

115:                                              ; preds = %313, %107
  %116 = phi i64 [ %315, %313 ], [ 1, %107 ]
  %117 = phi i32 [ %314, %313 ], [ %100, %107 ]
  %118 = getelementptr inbounds i32, ptr %112, i64 %116
  %119 = load i32, ptr %118, align 4, !tbaa !17
  %120 = icmp eq i32 %119, %0
  br i1 %120, label %313, label %121

121:                                              ; preds = %115
  %122 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %123 = sext i32 %119 to i64
  %124 = getelementptr inbounds ptr, ptr %122, i64 %123
  %125 = load ptr, ptr %124, align 8, !tbaa !7
  %126 = icmp eq i32 %119, %4
  br i1 %126, label %130, label %127

127:                                              ; preds = %121
  %128 = getelementptr inbounds %struct.cellbox, ptr %125, i64 0, i32 5
  %129 = load i32, ptr %128, align 8, !tbaa !45
  br label %131

130:                                              ; preds = %121
  br i1 %81, label %131, label %313

131:                                              ; preds = %130, %127
  %132 = phi i32 [ %129, %127 ], [ %6, %130 ]
  %133 = phi ptr [ %125, %127 ], [ %11, %130 ]
  %134 = getelementptr inbounds %struct.cellbox, ptr %133, i64 0, i32 3
  %135 = getelementptr inbounds %struct.cellbox, ptr %133, i64 0, i32 2
  %136 = sext i32 %132 to i64
  %137 = getelementptr inbounds %struct.cellbox, ptr %125, i64 0, i32 21, i64 %136
  %138 = load i32, ptr %134, align 8, !tbaa !165
  %139 = load i32, ptr %135, align 4, !tbaa !164
  %140 = load ptr, ptr %137, align 8, !tbaa !7
  %141 = getelementptr inbounds %struct.tilebox, ptr %140, i64 0, i32 9
  %142 = load i32, ptr %141, align 8, !tbaa !167
  %143 = add nsw i32 %142, %139
  %144 = getelementptr inbounds %struct.tilebox, ptr %140, i64 0, i32 10
  %145 = load i32, ptr %144, align 4, !tbaa !168
  %146 = add nsw i32 %145, %139
  %147 = getelementptr inbounds %struct.tilebox, ptr %140, i64 0, i32 11
  %148 = load i32, ptr %147, align 8, !tbaa !169
  %149 = add nsw i32 %148, %138
  %150 = getelementptr inbounds %struct.tilebox, ptr %140, i64 0, i32 12
  %151 = load i32, ptr %150, align 4, !tbaa !170
  %152 = add nsw i32 %151, %138
  %153 = load i32, ptr @numcells, align 4, !tbaa !17
  %154 = icmp sgt i32 %119, %153
  br i1 %154, label %168, label %155

155:                                              ; preds = %131
  %156 = getelementptr inbounds %struct.tilebox, ptr %140, i64 0, i32 5
  %157 = load i32, ptr %156, align 8, !tbaa !442
  %158 = sub nsw i32 %143, %157
  %159 = getelementptr inbounds %struct.tilebox, ptr %140, i64 0, i32 6
  %160 = load i32, ptr %159, align 4, !tbaa !443
  %161 = add nsw i32 %160, %146
  %162 = getelementptr inbounds %struct.tilebox, ptr %140, i64 0, i32 7
  %163 = load i32, ptr %162, align 8, !tbaa !444
  %164 = sub nsw i32 %149, %163
  %165 = getelementptr inbounds %struct.tilebox, ptr %140, i64 0, i32 8
  %166 = load i32, ptr %165, align 4, !tbaa !445
  %167 = add nsw i32 %166, %152
  br label %168

168:                                              ; preds = %155, %131
  %169 = phi i32 [ %158, %155 ], [ %143, %131 ]
  %170 = phi i32 [ %161, %155 ], [ %146, %131 ]
  %171 = phi i32 [ %164, %155 ], [ %149, %131 ]
  %172 = phi i32 [ %167, %155 ], [ %152, %131 ]
  %173 = icmp slt i32 %169, %44
  %174 = icmp slt i32 %43, %170
  %175 = select i1 %173, i1 %174, i1 false
  %176 = icmp slt i32 %171, %46
  %177 = select i1 %175, i1 %176, i1 false
  %178 = icmp slt i32 %45, %172
  %179 = select i1 %177, i1 %178, i1 false
  br i1 %179, label %180, label %313

180:                                              ; preds = %168
  %181 = load i32, ptr %82, align 4, !tbaa !171
  %182 = icmp eq i32 %181, 1
  br i1 %182, label %183, label %195

183:                                              ; preds = %180
  %184 = getelementptr inbounds %struct.cellbox, ptr %125, i64 0, i32 6
  %185 = load i32, ptr %184, align 4, !tbaa !171
  %186 = icmp eq i32 %185, 1
  br i1 %186, label %187, label %195

187:                                              ; preds = %183
  %188 = tail call i32 @llvm.smax.i32(i32 %43, i32 %169)
  %189 = tail call i32 @llvm.smin.i32(i32 %44, i32 %170)
  %190 = tail call i32 @llvm.smax.i32(i32 %45, i32 %171)
  %191 = tail call i32 @llvm.smin.i32(i32 %46, i32 %172)
  %192 = sub nsw i32 %191, %190
  %193 = sub nsw i32 %189, %188
  %194 = mul nsw i32 %192, %193
  br label %294

195:                                              ; preds = %183, %180
  %196 = load ptr, ptr %14, align 8, !tbaa !172
  %197 = icmp eq ptr %196, null
  br i1 %197, label %313, label %198

198:                                              ; preds = %195
  %199 = icmp slt i32 %153, %0
  %200 = load ptr, ptr %140, align 8, !tbaa !172
  %201 = icmp eq ptr %200, null
  br label %206

202:                                              ; preds = %288, %234
  %203 = phi i32 [ %208, %234 ], [ %289, %288 ]
  %204 = load ptr, ptr %207, align 8, !tbaa !172
  %205 = icmp eq ptr %204, null
  br i1 %205, label %292, label %206, !llvm.loop !451

206:                                              ; preds = %202, %198
  %207 = phi ptr [ %196, %198 ], [ %204, %202 ]
  %208 = phi i32 [ 0, %198 ], [ %203, %202 ]
  %209 = getelementptr inbounds %struct.tilebox, ptr %207, i64 0, i32 9
  %210 = load i32, ptr %209, align 8, !tbaa !167
  %211 = add nsw i32 %210, %1
  %212 = getelementptr inbounds %struct.tilebox, ptr %207, i64 0, i32 10
  %213 = load i32, ptr %212, align 4, !tbaa !168
  %214 = add nsw i32 %213, %1
  %215 = getelementptr inbounds %struct.tilebox, ptr %207, i64 0, i32 11
  %216 = load i32, ptr %215, align 8, !tbaa !169
  %217 = add nsw i32 %216, %2
  %218 = getelementptr inbounds %struct.tilebox, ptr %207, i64 0, i32 12
  %219 = load i32, ptr %218, align 4, !tbaa !170
  %220 = add nsw i32 %219, %2
  br i1 %199, label %234, label %221

221:                                              ; preds = %206
  %222 = getelementptr inbounds %struct.tilebox, ptr %207, i64 0, i32 5
  %223 = load i32, ptr %222, align 8, !tbaa !442
  %224 = sub nsw i32 %211, %223
  %225 = getelementptr inbounds %struct.tilebox, ptr %207, i64 0, i32 6
  %226 = load i32, ptr %225, align 4, !tbaa !443
  %227 = add nsw i32 %226, %214
  %228 = getelementptr inbounds %struct.tilebox, ptr %207, i64 0, i32 7
  %229 = load i32, ptr %228, align 8, !tbaa !444
  %230 = sub nsw i32 %217, %229
  %231 = getelementptr inbounds %struct.tilebox, ptr %207, i64 0, i32 8
  %232 = load i32, ptr %231, align 4, !tbaa !445
  %233 = add nsw i32 %232, %220
  br label %234

234:                                              ; preds = %221, %206
  %235 = phi i32 [ %224, %221 ], [ %211, %206 ]
  %236 = phi i32 [ %227, %221 ], [ %214, %206 ]
  %237 = phi i32 [ %230, %221 ], [ %217, %206 ]
  %238 = phi i32 [ %233, %221 ], [ %220, %206 ]
  br i1 %201, label %202, label %239

239:                                              ; preds = %288, %234
  %240 = phi ptr [ %290, %288 ], [ %200, %234 ]
  %241 = phi i32 [ %289, %288 ], [ %208, %234 ]
  %242 = getelementptr inbounds %struct.tilebox, ptr %240, i64 0, i32 9
  %243 = load i32, ptr %242, align 8, !tbaa !167
  %244 = add nsw i32 %243, %139
  %245 = getelementptr inbounds %struct.tilebox, ptr %240, i64 0, i32 10
  %246 = load i32, ptr %245, align 4, !tbaa !168
  %247 = add nsw i32 %246, %139
  %248 = getelementptr inbounds %struct.tilebox, ptr %240, i64 0, i32 11
  %249 = load i32, ptr %248, align 8, !tbaa !169
  %250 = add nsw i32 %249, %138
  %251 = getelementptr inbounds %struct.tilebox, ptr %240, i64 0, i32 12
  %252 = load i32, ptr %251, align 4, !tbaa !170
  %253 = add nsw i32 %252, %138
  br i1 %154, label %267, label %254

254:                                              ; preds = %239
  %255 = getelementptr inbounds %struct.tilebox, ptr %240, i64 0, i32 5
  %256 = load i32, ptr %255, align 8, !tbaa !442
  %257 = sub nsw i32 %244, %256
  %258 = getelementptr inbounds %struct.tilebox, ptr %240, i64 0, i32 6
  %259 = load i32, ptr %258, align 4, !tbaa !443
  %260 = add nsw i32 %259, %247
  %261 = getelementptr inbounds %struct.tilebox, ptr %240, i64 0, i32 7
  %262 = load i32, ptr %261, align 8, !tbaa !444
  %263 = sub nsw i32 %250, %262
  %264 = getelementptr inbounds %struct.tilebox, ptr %240, i64 0, i32 8
  %265 = load i32, ptr %264, align 4, !tbaa !445
  %266 = add nsw i32 %265, %253
  br label %267

267:                                              ; preds = %254, %239
  %268 = phi i32 [ %257, %254 ], [ %244, %239 ]
  %269 = phi i32 [ %260, %254 ], [ %247, %239 ]
  %270 = phi i32 [ %263, %254 ], [ %250, %239 ]
  %271 = phi i32 [ %266, %254 ], [ %253, %239 ]
  %272 = icmp slt i32 %268, %236
  %273 = icmp slt i32 %235, %269
  %274 = select i1 %272, i1 %273, i1 false
  %275 = icmp slt i32 %270, %238
  %276 = select i1 %274, i1 %275, i1 false
  %277 = icmp slt i32 %237, %271
  %278 = select i1 %276, i1 %277, i1 false
  br i1 %278, label %279, label %288

279:                                              ; preds = %267
  %280 = tail call i32 @llvm.smax.i32(i32 %235, i32 %268)
  %281 = tail call i32 @llvm.smin.i32(i32 %236, i32 %269)
  %282 = tail call i32 @llvm.smax.i32(i32 %237, i32 %270)
  %283 = tail call i32 @llvm.smin.i32(i32 %238, i32 %271)
  %284 = sub nsw i32 %283, %282
  %285 = sub nsw i32 %281, %280
  %286 = mul nsw i32 %284, %285
  %287 = add nsw i32 %286, %241
  br label %288

288:                                              ; preds = %279, %267
  %289 = phi i32 [ %241, %267 ], [ %287, %279 ]
  %290 = load ptr, ptr %240, align 8, !tbaa !172
  %291 = icmp eq ptr %290, null
  br i1 %291, label %202, label %239, !llvm.loop !452

292:                                              ; preds = %202
  %.lcssa = phi i32 [ %203, %202 ]
  %293 = icmp eq i32 %.lcssa, 0
  br i1 %293, label %313, label %294

294:                                              ; preds = %292, %187
  %295 = phi i32 [ %194, %187 ], [ %.lcssa, %292 ]
  %296 = load double, ptr @lapFactor, align 8, !tbaa !36
  %297 = load i32, ptr @offset, align 4, !tbaa !17
  %298 = add nsw i32 %297, %295
  %299 = sitofp i32 %298 to double
  %300 = fmul double %296, %299
  %301 = fptosi double %300 to i32
  %302 = add nsw i32 %117, %301
  %303 = load ptr, ptr @fpo, align 8, !tbaa !7
  %304 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %303, ptr noundef nonnull @.str.282, i32 noundef %0, i32 noundef %119) #43
  %305 = load ptr, ptr @fpo, align 8, !tbaa !7
  %306 = load double, ptr @lapFactor, align 8, !tbaa !36
  %307 = load i32, ptr @offset, align 4, !tbaa !17
  %308 = add nsw i32 %307, %295
  %309 = sitofp i32 %308 to double
  %310 = fmul double %306, %309
  %311 = fptosi double %310 to i32
  %312 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %305, ptr noundef nonnull @.str.1.283, i32 noundef %311, i32 noundef %295) #43
  br label %313

313:                                              ; preds = %294, %292, %195, %168, %130, %115
  %314 = phi i32 [ %117, %115 ], [ %117, %168 ], [ %117, %292 ], [ %117, %130 ], [ %117, %195 ], [ %302, %294 ]
  %315 = add nuw nsw i64 %116, 1
  %316 = load i32, ptr %112, align 4, !tbaa !17
  %317 = sext i32 %316 to i64
  %318 = icmp slt i64 %116, %317
  br i1 %318, label %115, label %319, !llvm.loop !453

319:                                              ; preds = %313, %107, %98
  %320 = phi i32 [ %100, %98 ], [ %100, %107 ], [ %314, %313 ]
  %321 = add nuw nsw i64 %99, 1
  %322 = icmp eq i64 %321, %88
  br i1 %322, label %323, label %98, !llvm.loop !454

323:                                              ; preds = %319, %89
  %324 = phi i32 [ %91, %89 ], [ %320, %319 ]
  %325 = add nuw nsw i64 %90, 1
  %326 = icmp eq i64 %325, %87
  br i1 %326, label %327, label %89, !llvm.loop !455

327:                                              ; preds = %323, %42
  %328 = phi i32 [ 0, %42 ], [ %324, %323 ]
  ret i32 %328
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, argmem: read, inaccessiblemem: none) uwtable
define internal i32 @goverlapx(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, double noundef %5) #14 {
  %7 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %8 = sext i32 %0 to i64
  %9 = getelementptr inbounds ptr, ptr %7, i64 %8
  %10 = load ptr, ptr %9, align 8, !tbaa !7
  %11 = getelementptr inbounds %struct.cellbox, ptr %10, i64 0, i32 5
  %12 = load i32, ptr %11, align 8, !tbaa !45
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds %struct.cellbox, ptr %10, i64 0, i32 21, i64 %13
  %15 = load ptr, ptr %14, align 8, !tbaa !7
  %16 = getelementptr inbounds %struct.cellbox, ptr %10, i64 0, i32 2
  %17 = load i32, ptr %16, align 4, !tbaa !164
  %18 = getelementptr inbounds %struct.tilebox, ptr %15, i64 0, i32 14
  %19 = load i32, ptr %18, align 4, !tbaa !383
  %20 = sub nsw i32 %19, %1
  %21 = sitofp i32 %20 to double
  %22 = fdiv double %21, %5
  %23 = fptosi double %22 to i32
  %24 = sitofp i32 %23 to double
  %25 = fsub double %22, %24
  %26 = fcmp oge double %25, 5.000000e-01
  %27 = zext i1 %26 to i32
  %28 = getelementptr inbounds %struct.cellbox, ptr %10, i64 0, i32 3
  %29 = load i32, ptr %28, align 8, !tbaa !165
  %30 = getelementptr inbounds %struct.tilebox, ptr %15, i64 0, i32 16
  %31 = load i32, ptr %30, align 4, !tbaa !394
  %32 = sub nsw i32 %31, %2
  %33 = sitofp i32 %32 to double
  %34 = fmul double %33, %5
  %35 = fptosi double %34 to i32
  %36 = sitofp i32 %35 to double
  %37 = fsub double %34, %36
  %38 = fcmp oge double %37, 5.000000e-01
  %39 = zext i1 %38 to i32
  %40 = getelementptr inbounds %struct.tilebox, ptr %15, i64 0, i32 5
  %41 = load i32, ptr %40, align 8, !tbaa !442
  %42 = add i32 %41, %3
  %43 = sub i32 %17, %42
  %44 = getelementptr inbounds %struct.tilebox, ptr %15, i64 0, i32 6
  %45 = load i32, ptr %44, align 4, !tbaa !443
  %46 = sub i32 %17, %3
  %47 = add i32 %46, %23
  %48 = add i32 %47, %45
  %49 = add i32 %48, %27
  %50 = getelementptr inbounds %struct.tilebox, ptr %15, i64 0, i32 7
  %51 = load i32, ptr %50, align 8, !tbaa !444
  %52 = add i32 %51, %4
  %53 = sub i32 %29, %52
  %54 = getelementptr inbounds %struct.tilebox, ptr %15, i64 0, i32 8
  %55 = load i32, ptr %54, align 4, !tbaa !445
  %56 = sub i32 %29, %4
  %57 = add i32 %56, %35
  %58 = add i32 %57, %55
  %59 = add i32 %58, %39
  %60 = load i32, ptr @binOffsetX, align 4, !tbaa !17
  %61 = sub nsw i32 %43, %60
  %62 = load i32, ptr @binWidthX, align 4, !tbaa !17
  %63 = sdiv i32 %61, %62
  %64 = icmp slt i32 %63, 1
  %65 = load i32, ptr @numBinsX, align 4
  %66 = tail call i32 @llvm.smin.i32(i32 %63, i32 %65)
  %67 = select i1 %64, i32 1, i32 %66
  %68 = sub nsw i32 %49, %60
  %69 = sdiv i32 %68, %62
  %70 = icmp sgt i32 %69, %65
  %71 = tail call i32 @llvm.smax.i32(i32 %69, i32 1)
  %72 = select i1 %70, i32 %65, i32 %71
  %73 = load i32, ptr @binOffsetY, align 4, !tbaa !17
  %74 = sub nsw i32 %53, %73
  %75 = load i32, ptr @binWidthY, align 4, !tbaa !17
  %76 = sdiv i32 %74, %75
  %77 = icmp slt i32 %76, 1
  %78 = load i32, ptr @numBinsY, align 4
  %79 = tail call i32 @llvm.smin.i32(i32 %76, i32 %78)
  %80 = select i1 %77, i32 1, i32 %79
  %81 = sub nsw i32 %59, %73
  %82 = sdiv i32 %81, %75
  %83 = icmp sgt i32 %82, %78
  %84 = tail call i32 @llvm.smax.i32(i32 %82, i32 1)
  %85 = select i1 %83, i32 %78, i32 %84
  %86 = icmp eq i32 %67, %72
  %87 = icmp eq i32 %80, %85
  %88 = select i1 %86, i1 %87, i1 false
  %89 = select i1 %88, i32 %67, i32 0
  %90 = select i1 %88, i32 %80, i32 0
  store i32 %89, ptr @binX, align 4, !tbaa !17
  store i32 %90, ptr @binY, align 4, !tbaa !17
  %91 = icmp slt i32 %72, 0
  br i1 %91, label %358, label %92

92:                                               ; preds = %6
  %93 = icmp slt i32 %85, 0
  %94 = load ptr, ptr @blockarray, align 8
  %95 = load i32, ptr @numcells, align 4
  %96 = getelementptr inbounds %struct.cellbox, ptr %10, i64 0, i32 6
  %97 = load double, ptr @lapFactor, align 8
  %98 = load i32, ptr @offset, align 4
  %99 = sext i32 %80 to i64
  %100 = add i32 %85, 1
  %101 = sext i32 %67 to i64
  %102 = add nuw i32 %72, 1
  %103 = zext i32 %102 to i64
  %104 = zext i32 %100 to i64
  br label %105

105:                                              ; preds = %354, %92
  %106 = phi i64 [ 0, %92 ], [ %356, %354 ]
  %107 = phi i32 [ 0, %92 ], [ %355, %354 ]
  %108 = icmp ne i64 %106, 0
  %109 = icmp slt i64 %106, %101
  %110 = and i1 %108, %109
  %111 = select i1 %110, i1 true, i1 %93
  br i1 %111, label %354, label %112

112:                                              ; preds = %105
  %113 = icmp eq i64 %106, 0
  %114 = getelementptr inbounds ptr, ptr %94, i64 %106
  br label %115

115:                                              ; preds = %350, %112
  %116 = phi i64 [ 0, %112 ], [ %352, %350 ]
  %117 = phi i32 [ %107, %112 ], [ %351, %350 ]
  %118 = or i64 %116, %106
  %119 = and i64 %118, 4294967295
  %120 = icmp ne i64 %119, 0
  %121 = icmp slt i64 %116, %99
  %122 = or i1 %113, %121
  %123 = select i1 %120, i1 %122, i1 false
  br i1 %123, label %350, label %124

124:                                              ; preds = %115
  %125 = load ptr, ptr %114, align 8, !tbaa !7
  %126 = getelementptr inbounds ptr, ptr %125, i64 %116
  %127 = load ptr, ptr %126, align 8, !tbaa !7
  %128 = load i32, ptr %127, align 4, !tbaa !17
  %129 = icmp slt i32 %128, 1
  br i1 %129, label %350, label %130

130:                                              ; preds = %124
  %131 = add nuw i32 %128, 1
  %132 = zext i32 %131 to i64
  br label %133

133:                                              ; preds = %346, %130
  %134 = phi i64 [ 1, %130 ], [ %348, %346 ]
  %135 = phi i32 [ %117, %130 ], [ %347, %346 ]
  %136 = getelementptr inbounds i32, ptr %127, i64 %134
  %137 = load i32, ptr %136, align 4, !tbaa !17
  %138 = icmp eq i32 %137, %0
  br i1 %138, label %346, label %139

139:                                              ; preds = %133
  %140 = sext i32 %137 to i64
  %141 = getelementptr inbounds ptr, ptr %7, i64 %140
  %142 = load ptr, ptr %141, align 8, !tbaa !7
  %143 = getelementptr inbounds %struct.cellbox, ptr %142, i64 0, i32 5
  %144 = load i32, ptr %143, align 8, !tbaa !45
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds %struct.cellbox, ptr %142, i64 0, i32 21, i64 %145
  %147 = load ptr, ptr %146, align 8, !tbaa !7
  %148 = getelementptr inbounds %struct.cellbox, ptr %142, i64 0, i32 2
  %149 = load i32, ptr %148, align 4, !tbaa !164
  %150 = getelementptr inbounds %struct.cellbox, ptr %142, i64 0, i32 3
  %151 = load i32, ptr %150, align 8, !tbaa !165
  %152 = getelementptr inbounds %struct.tilebox, ptr %147, i64 0, i32 9
  %153 = load i32, ptr %152, align 8, !tbaa !167
  %154 = add nsw i32 %153, %149
  %155 = getelementptr inbounds %struct.tilebox, ptr %147, i64 0, i32 10
  %156 = load i32, ptr %155, align 4, !tbaa !168
  %157 = add nsw i32 %156, %149
  %158 = getelementptr inbounds %struct.tilebox, ptr %147, i64 0, i32 11
  %159 = load i32, ptr %158, align 8, !tbaa !169
  %160 = add nsw i32 %159, %151
  %161 = getelementptr inbounds %struct.tilebox, ptr %147, i64 0, i32 12
  %162 = load i32, ptr %161, align 4, !tbaa !170
  %163 = add nsw i32 %162, %151
  %164 = icmp sgt i32 %137, %95
  br i1 %164, label %178, label %165

165:                                              ; preds = %139
  %166 = getelementptr inbounds %struct.tilebox, ptr %147, i64 0, i32 5
  %167 = load i32, ptr %166, align 8, !tbaa !442
  %168 = sub nsw i32 %154, %167
  %169 = getelementptr inbounds %struct.tilebox, ptr %147, i64 0, i32 6
  %170 = load i32, ptr %169, align 4, !tbaa !443
  %171 = add nsw i32 %170, %157
  %172 = getelementptr inbounds %struct.tilebox, ptr %147, i64 0, i32 7
  %173 = load i32, ptr %172, align 8, !tbaa !444
  %174 = sub nsw i32 %160, %173
  %175 = getelementptr inbounds %struct.tilebox, ptr %147, i64 0, i32 8
  %176 = load i32, ptr %175, align 4, !tbaa !445
  %177 = add nsw i32 %176, %163
  br label %178

178:                                              ; preds = %165, %139
  %179 = phi i32 [ %168, %165 ], [ %154, %139 ]
  %180 = phi i32 [ %171, %165 ], [ %157, %139 ]
  %181 = phi i32 [ %174, %165 ], [ %160, %139 ]
  %182 = phi i32 [ %177, %165 ], [ %163, %139 ]
  %183 = icmp slt i32 %179, %49
  %184 = icmp slt i32 %43, %180
  %185 = select i1 %183, i1 %184, i1 false
  %186 = icmp slt i32 %181, %59
  %187 = select i1 %185, i1 %186, i1 false
  %188 = icmp slt i32 %53, %182
  %189 = select i1 %187, i1 %188, i1 false
  br i1 %189, label %190, label %346

190:                                              ; preds = %178
  %191 = load i32, ptr %96, align 4, !tbaa !171
  %192 = icmp eq i32 %191, 1
  br i1 %192, label %193, label %210

193:                                              ; preds = %190
  %194 = getelementptr inbounds %struct.cellbox, ptr %142, i64 0, i32 6
  %195 = load i32, ptr %194, align 4, !tbaa !171
  %196 = icmp eq i32 %195, 1
  br i1 %196, label %197, label %210

197:                                              ; preds = %193
  %198 = tail call i32 @llvm.smax.i32(i32 %43, i32 %179)
  %199 = tail call i32 @llvm.smin.i32(i32 %49, i32 %180)
  %200 = tail call i32 @llvm.smax.i32(i32 %53, i32 %181)
  %201 = tail call i32 @llvm.smin.i32(i32 %59, i32 %182)
  %202 = sub nsw i32 %201, %200
  %203 = sub nsw i32 %199, %198
  %204 = mul nsw i32 %202, %203
  %205 = add nsw i32 %98, %204
  %206 = sitofp i32 %205 to double
  %207 = fmul double %97, %206
  %208 = fptosi double %207 to i32
  %209 = add nsw i32 %135, %208
  br label %346

210:                                              ; preds = %193, %190
  %211 = load ptr, ptr %15, align 8, !tbaa !172
  %212 = icmp eq ptr %211, null
  br i1 %212, label %346, label %213

213:                                              ; preds = %210
  %214 = load ptr, ptr %147, align 8, !tbaa !172
  %215 = icmp eq ptr %214, null
  br label %220

216:                                              ; preds = %334, %220
  %217 = phi i32 [ %222, %220 ], [ %335, %334 ]
  %218 = load ptr, ptr %221, align 8, !tbaa !172
  %219 = icmp eq ptr %218, null
  br i1 %219, label %338, label %220, !llvm.loop !456

220:                                              ; preds = %216, %213
  %221 = phi ptr [ %211, %213 ], [ %218, %216 ]
  %222 = phi i32 [ 0, %213 ], [ %217, %216 ]
  %223 = getelementptr inbounds %struct.tilebox, ptr %221, i64 0, i32 13
  %224 = load i32, ptr %223, align 8, !tbaa !382
  %225 = sub nsw i32 %224, %1
  %226 = sitofp i32 %225 to double
  %227 = fdiv double %226, %5
  %228 = fptosi double %227 to i32
  %229 = sitofp i32 %228 to double
  %230 = fsub double %227, %229
  %231 = fcmp oge double %230, 5.000000e-01
  %232 = zext i1 %231 to i32
  %233 = getelementptr inbounds %struct.tilebox, ptr %221, i64 0, i32 14
  %234 = load i32, ptr %233, align 4, !tbaa !383
  %235 = sub nsw i32 %234, %1
  %236 = sitofp i32 %235 to double
  %237 = fdiv double %236, %5
  %238 = fptosi double %237 to i32
  %239 = sitofp i32 %238 to double
  %240 = fsub double %237, %239
  %241 = fcmp oge double %240, 5.000000e-01
  %242 = zext i1 %241 to i32
  %243 = getelementptr inbounds %struct.tilebox, ptr %221, i64 0, i32 15
  %244 = load i32, ptr %243, align 8, !tbaa !393
  %245 = sub nsw i32 %244, %2
  %246 = sitofp i32 %245 to double
  %247 = fmul double %246, %5
  %248 = fptosi double %247 to i32
  %249 = sitofp i32 %248 to double
  %250 = fsub double %247, %249
  %251 = fcmp oge double %250, 5.000000e-01
  %252 = zext i1 %251 to i32
  %253 = getelementptr inbounds %struct.tilebox, ptr %221, i64 0, i32 16
  %254 = load i32, ptr %253, align 4, !tbaa !394
  %255 = sub nsw i32 %254, %2
  %256 = sitofp i32 %255 to double
  %257 = fmul double %256, %5
  %258 = fptosi double %257 to i32
  %259 = sitofp i32 %258 to double
  %260 = fsub double %257, %259
  %261 = fcmp oge double %260, 5.000000e-01
  %262 = zext i1 %261 to i32
  %263 = getelementptr inbounds %struct.tilebox, ptr %221, i64 0, i32 5
  %264 = load i32, ptr %263, align 8, !tbaa !442
  %265 = add i32 %17, %228
  %266 = add i32 %264, %3
  %267 = sub i32 %265, %266
  %268 = add i32 %267, %232
  %269 = getelementptr inbounds %struct.tilebox, ptr %221, i64 0, i32 6
  %270 = load i32, ptr %269, align 4, !tbaa !443
  %271 = add i32 %46, %238
  %272 = add i32 %271, %270
  %273 = add i32 %272, %242
  %274 = getelementptr inbounds %struct.tilebox, ptr %221, i64 0, i32 7
  %275 = load i32, ptr %274, align 8, !tbaa !444
  %276 = add i32 %29, %248
  %277 = add i32 %275, %4
  %278 = sub i32 %276, %277
  %279 = add i32 %278, %252
  %280 = getelementptr inbounds %struct.tilebox, ptr %221, i64 0, i32 8
  %281 = load i32, ptr %280, align 4, !tbaa !445
  %282 = add i32 %56, %258
  %283 = add i32 %282, %281
  %284 = add i32 %283, %262
  br i1 %215, label %216, label %285

285:                                              ; preds = %334, %220
  %286 = phi ptr [ %336, %334 ], [ %214, %220 ]
  %287 = phi i32 [ %335, %334 ], [ %222, %220 ]
  %288 = getelementptr inbounds %struct.tilebox, ptr %286, i64 0, i32 9
  %289 = load i32, ptr %288, align 8, !tbaa !167
  %290 = add nsw i32 %289, %149
  %291 = getelementptr inbounds %struct.tilebox, ptr %286, i64 0, i32 10
  %292 = load i32, ptr %291, align 4, !tbaa !168
  %293 = add nsw i32 %292, %149
  %294 = getelementptr inbounds %struct.tilebox, ptr %286, i64 0, i32 11
  %295 = load i32, ptr %294, align 8, !tbaa !169
  %296 = add nsw i32 %295, %151
  %297 = getelementptr inbounds %struct.tilebox, ptr %286, i64 0, i32 12
  %298 = load i32, ptr %297, align 4, !tbaa !170
  %299 = add nsw i32 %298, %151
  br i1 %164, label %313, label %300

300:                                              ; preds = %285
  %301 = getelementptr inbounds %struct.tilebox, ptr %286, i64 0, i32 5
  %302 = load i32, ptr %301, align 8, !tbaa !442
  %303 = sub nsw i32 %290, %302
  %304 = getelementptr inbounds %struct.tilebox, ptr %286, i64 0, i32 6
  %305 = load i32, ptr %304, align 4, !tbaa !443
  %306 = add nsw i32 %305, %293
  %307 = getelementptr inbounds %struct.tilebox, ptr %286, i64 0, i32 7
  %308 = load i32, ptr %307, align 8, !tbaa !444
  %309 = sub nsw i32 %296, %308
  %310 = getelementptr inbounds %struct.tilebox, ptr %286, i64 0, i32 8
  %311 = load i32, ptr %310, align 4, !tbaa !445
  %312 = add nsw i32 %311, %299
  br label %313

313:                                              ; preds = %300, %285
  %314 = phi i32 [ %303, %300 ], [ %290, %285 ]
  %315 = phi i32 [ %306, %300 ], [ %293, %285 ]
  %316 = phi i32 [ %309, %300 ], [ %296, %285 ]
  %317 = phi i32 [ %312, %300 ], [ %299, %285 ]
  %318 = icmp slt i32 %314, %273
  %319 = icmp slt i32 %268, %315
  %320 = select i1 %318, i1 %319, i1 false
  %321 = icmp slt i32 %316, %284
  %322 = select i1 %320, i1 %321, i1 false
  %323 = icmp slt i32 %279, %317
  %324 = select i1 %322, i1 %323, i1 false
  br i1 %324, label %325, label %334

325:                                              ; preds = %313
  %326 = tail call i32 @llvm.smax.i32(i32 %268, i32 %314)
  %327 = tail call i32 @llvm.smin.i32(i32 %273, i32 %315)
  %328 = tail call i32 @llvm.smax.i32(i32 %279, i32 %316)
  %329 = tail call i32 @llvm.smin.i32(i32 %284, i32 %317)
  %330 = sub nsw i32 %329, %328
  %331 = sub nsw i32 %327, %326
  %332 = mul nsw i32 %330, %331
  %333 = add nsw i32 %332, %287
  br label %334

334:                                              ; preds = %325, %313
  %335 = phi i32 [ %287, %313 ], [ %333, %325 ]
  %336 = load ptr, ptr %286, align 8, !tbaa !172
  %337 = icmp eq ptr %336, null
  br i1 %337, label %216, label %285, !llvm.loop !457

338:                                              ; preds = %216
  %.lcssa = phi i32 [ %217, %216 ]
  %339 = icmp eq i32 %.lcssa, 0
  br i1 %339, label %346, label %340

340:                                              ; preds = %338
  %341 = add nsw i32 %98, %.lcssa
  %342 = sitofp i32 %341 to double
  %343 = fmul double %97, %342
  %344 = fptosi double %343 to i32
  %345 = add nsw i32 %135, %344
  br label %346

346:                                              ; preds = %340, %338, %210, %197, %178, %133
  %347 = phi i32 [ %135, %133 ], [ %135, %178 ], [ %209, %197 ], [ %345, %340 ], [ %135, %338 ], [ %135, %210 ]
  %348 = add nuw nsw i64 %134, 1
  %349 = icmp eq i64 %348, %132
  br i1 %349, label %350, label %133, !llvm.loop !458

350:                                              ; preds = %346, %124, %115
  %351 = phi i32 [ %117, %115 ], [ %117, %124 ], [ %347, %346 ]
  %352 = add nuw nsw i64 %116, 1
  %353 = icmp eq i64 %352, %104
  br i1 %353, label %354, label %115, !llvm.loop !459

354:                                              ; preds = %350, %105
  %355 = phi i32 [ %107, %105 ], [ %351, %350 ]
  %356 = add nuw nsw i64 %106, 1
  %357 = icmp eq i64 %356, %103
  br i1 %357, label %358, label %105, !llvm.loop !460

358:                                              ; preds = %354, %6
  %359 = phi i32 [ 0, %6 ], [ %355, %354 ]
  ret i32 %359
}

; Function Attrs: nounwind optsize uwtable
define internal void @gpass2(ptr noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca [1024 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %3) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %7) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %8) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %9) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %10) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %11) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %12) #47
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13) #47
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %14) #47
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %15) #47
  call void @llvm.lifetime.start.p0(i64 1024, ptr nonnull %16) #47
  store i32 0, ptr @netctr, align 4, !tbaa !17
  tail call void @maketabl() #44
  br label %17

17:                                               ; preds = %168, %1
  %18 = phi i32 [ 0, %1 ], [ %169, %168 ]
  %19 = phi i32 [ 0, %1 ], [ %170, %168 ]
  %20 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.288, ptr noundef nonnull %16) #44
  %21 = icmp eq i32 %20, 1
  br i1 %21, label %22, label %171

22:                                               ; preds = %17
  %23 = call i32 @bcmp(ptr noundef nonnull dereferenceable(5) %16, ptr noundef nonnull dereferenceable(5) @.str.1.289, i64 5)
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %52

25:                                               ; preds = %22
  %26 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.2.290, ptr noundef nonnull %8) #44
  %27 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.3.291, ptr noundef nonnull %16) #44
  %28 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.3.291, ptr noundef nonnull %16) #44
  %29 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.292, ptr noundef nonnull %9) #44
  %30 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.288, ptr noundef nonnull %16) #44
  %31 = load i32, ptr %9, align 4, !tbaa !17
  %32 = icmp slt i32 %31, 1
  br i1 %32, label %39, label %33

33:                                               ; preds = %33, %25
  %34 = phi i32 [ %36, %33 ], [ 1, %25 ]
  %35 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.293, ptr noundef nonnull %10, ptr noundef nonnull %11) #44
  %36 = add nuw nsw i32 %34, 1
  %37 = load i32, ptr %9, align 4, !tbaa !17
  %38 = icmp slt i32 %34, %37
  br i1 %38, label %33, label %39, !llvm.loop !461

39:                                               ; preds = %33, %25
  %40 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.288, ptr noundef nonnull %16) #44
  %41 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.292, ptr noundef nonnull %4) #44
  %42 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.292, ptr noundef nonnull %12) #44
  %43 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.288, ptr noundef nonnull %16) #44
  %44 = load i32, ptr %12, align 4, !tbaa !17
  %45 = icmp slt i32 %44, 1
  br i1 %45, label %168, label %46

46:                                               ; preds = %46, %39
  %47 = phi i32 [ %49, %46 ], [ 1, %39 ]
  %48 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.292, ptr noundef nonnull %10) #44
  %49 = add nuw nsw i32 %47, 1
  %50 = load i32, ptr %12, align 4, !tbaa !17
  %51 = icmp slt i32 %47, %50
  br i1 %51, label %46, label %168, !llvm.loop !462

52:                                               ; preds = %22
  %53 = load i32, ptr %16, align 16
  %54 = icmp eq i32 %53, 7235952
  br i1 %54, label %55, label %63

55:                                               ; preds = %52
  %56 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.288, ptr noundef nonnull %16) #44
  %57 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.288, ptr noundef nonnull %16) #44
  %58 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.288, ptr noundef nonnull %16) #44
  %59 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.288, ptr noundef nonnull %16) #44
  %60 = add nsw i32 %18, 1
  %61 = call i32 @addhash(ptr noundef nonnull %16) #44
  %62 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.293, ptr noundef nonnull %2, ptr noundef nonnull %3) #44
  br label %168

63:                                               ; preds = %52
  %64 = call i32 @bcmp(ptr noundef nonnull dereferenceable(6) %16, ptr noundef nonnull dereferenceable(6) @.str.7.294, i64 6)
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %71

66:                                               ; preds = %63
  %67 = add nsw i32 %19, 1
  %68 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.288, ptr noundef nonnull %16) #44
  %69 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.288, ptr noundef nonnull %16) #44
  %70 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.293, ptr noundef nonnull %2, ptr noundef nonnull %3) #44
  br label %168

71:                                               ; preds = %63
  %72 = call i32 @bcmp(ptr noundef nonnull dereferenceable(9) %16, ptr noundef nonnull dereferenceable(9) @.str.8.295, i64 9)
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %105

74:                                               ; preds = %71
  %75 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.2.290, ptr noundef nonnull %8) #44
  %76 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.3.291, ptr noundef nonnull %16) #44
  %77 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.3.291, ptr noundef nonnull %16) #44
  %78 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.292, ptr noundef nonnull %9) #44
  %79 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.288, ptr noundef nonnull %16) #44
  %80 = load i32, ptr %9, align 4, !tbaa !17
  %81 = icmp slt i32 %80, 1
  br i1 %81, label %88, label %82

82:                                               ; preds = %82, %74
  %83 = phi i32 [ %85, %82 ], [ 1, %74 ]
  %84 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.293, ptr noundef nonnull %10, ptr noundef nonnull %11) #44
  %85 = add nuw nsw i32 %83, 1
  %86 = load i32, ptr %9, align 4, !tbaa !17
  %87 = icmp slt i32 %83, %86
  br i1 %87, label %82, label %88, !llvm.loop !463

88:                                               ; preds = %82, %74
  %89 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.288, ptr noundef nonnull %16) #44
  %90 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.9.296, ptr noundef nonnull %14) #44
  %91 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.288, ptr noundef nonnull %16) #44
  %92 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.9.296, ptr noundef nonnull %13) #44
  %93 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.288, ptr noundef nonnull %16) #44
  %94 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.292, ptr noundef nonnull %4) #44
  %95 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.292, ptr noundef nonnull %12) #44
  %96 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.288, ptr noundef nonnull %16) #44
  %97 = load i32, ptr %12, align 4, !tbaa !17
  %98 = icmp slt i32 %97, 1
  br i1 %98, label %168, label %99

99:                                               ; preds = %99, %88
  %100 = phi i32 [ %102, %99 ], [ 1, %88 ]
  %101 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.292, ptr noundef nonnull %10) #44
  %102 = add nuw nsw i32 %100, 1
  %103 = load i32, ptr %12, align 4, !tbaa !17
  %104 = icmp slt i32 %100, %103
  br i1 %104, label %99, label %168, !llvm.loop !464

105:                                              ; preds = %71
  %106 = call i32 @bcmp(ptr noundef nonnull dereferenceable(9) %16, ptr noundef nonnull dereferenceable(9) @.str.10.297, i64 9)
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %111, label %108

108:                                              ; preds = %105
  %109 = call i32 @bcmp(ptr noundef nonnull dereferenceable(6) %16, ptr noundef nonnull dereferenceable(6) @.str.11.298, i64 6)
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %111, label %132

111:                                              ; preds = %108, %105
  %112 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.292, ptr noundef nonnull %5) #44
  %113 = load i32, ptr %5, align 4, !tbaa !17
  %114 = icmp slt i32 %113, 1
  br i1 %114, label %128, label %115

115:                                              ; preds = %115, %111
  %116 = phi i32 [ %123, %115 ], [ %18, %111 ]
  %117 = phi i32 [ %125, %115 ], [ 1, %111 ]
  %118 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.288, ptr noundef nonnull %16) #44
  %119 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.288, ptr noundef nonnull %16) #44
  %120 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.288, ptr noundef nonnull %16) #44
  %121 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.288, ptr noundef nonnull %16) #44
  %122 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.288, ptr noundef nonnull %16) #44
  %123 = add nsw i32 %116, 1
  %124 = call i32 @addhash(ptr noundef nonnull %16) #44
  %125 = add nuw nsw i32 %117, 1
  %126 = load i32, ptr %5, align 4, !tbaa !17
  %127 = icmp slt i32 %117, %126
  br i1 %127, label %115, label %128, !llvm.loop !465

128:                                              ; preds = %115, %111
  %129 = phi i32 [ %18, %111 ], [ %123, %115 ]
  %130 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.288, ptr noundef nonnull %16) #44
  %131 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.293, ptr noundef nonnull %6, ptr noundef nonnull %7) #44
  br label %168

132:                                              ; preds = %108
  %133 = icmp eq i32 %53, 6578544
  br i1 %133, label %134, label %163

134:                                              ; preds = %132
  %135 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.2.290, ptr noundef nonnull %8) #44
  %136 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.3.291, ptr noundef nonnull %16) #44
  %137 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.3.291, ptr noundef nonnull %16) #44
  %138 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.292, ptr noundef nonnull %9) #44
  %139 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.288, ptr noundef nonnull %16) #44
  %140 = load i32, ptr %9, align 4, !tbaa !17
  %141 = icmp slt i32 %140, 1
  br i1 %141, label %148, label %142

142:                                              ; preds = %142, %134
  %143 = phi i32 [ %145, %142 ], [ 1, %134 ]
  %144 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.293, ptr noundef nonnull %10, ptr noundef nonnull %11) #44
  %145 = add nuw nsw i32 %143, 1
  %146 = load i32, ptr %9, align 4, !tbaa !17
  %147 = icmp slt i32 %143, %146
  br i1 %147, label %142, label %148, !llvm.loop !466

148:                                              ; preds = %142, %134
  %149 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.288, ptr noundef nonnull %16) #44
  %150 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.288, ptr noundef nonnull %16) #44
  %151 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.288, ptr noundef nonnull %16) #44
  %152 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.292, ptr noundef nonnull %4) #44
  %153 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.292, ptr noundef nonnull %12) #44
  %154 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.288, ptr noundef nonnull %16) #44
  %155 = load i32, ptr %12, align 4, !tbaa !17
  %156 = icmp slt i32 %155, 1
  br i1 %156, label %168, label %157

157:                                              ; preds = %157, %148
  %158 = phi i32 [ %160, %157 ], [ 1, %148 ]
  %159 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.292, ptr noundef nonnull %10) #44
  %160 = add nuw nsw i32 %158, 1
  %161 = load i32, ptr %12, align 4, !tbaa !17
  %162 = icmp slt i32 %158, %161
  br i1 %162, label %157, label %168, !llvm.loop !467

163:                                              ; preds = %132
  %164 = call i32 @bcmp(ptr noundef nonnull dereferenceable(10) %16, ptr noundef nonnull dereferenceable(10) @.str.13.299, i64 10)
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %166, label %168

166:                                              ; preds = %163
  %167 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.14.300, ptr noundef nonnull %15) #44
  br label %168

168:                                              ; preds = %166, %163, %157, %148, %128, %99, %88, %66, %55, %46, %39
  %169 = phi i32 [ %60, %55 ], [ %18, %66 ], [ %129, %128 ], [ %18, %166 ], [ %18, %163 ], [ %18, %39 ], [ %18, %88 ], [ %18, %148 ], [ %18, %46 ], [ %18, %99 ], [ %18, %157 ]
  %170 = phi i32 [ %19, %55 ], [ %67, %66 ], [ %19, %128 ], [ %19, %166 ], [ %19, %163 ], [ %19, %39 ], [ %19, %88 ], [ %19, %148 ], [ %19, %46 ], [ %19, %99 ], [ %19, %157 ]
  br label %17, !llvm.loop !468

171:                                              ; preds = %17
  %.lcssa1 = phi i32 [ %18, %17 ]
  %.lcssa = phi i32 [ %19, %17 ]
  call void @rewind(ptr noundef %0) #43
  %172 = load ptr, ptr @termarray, align 8, !tbaa !7
  %173 = add nsw i32 %.lcssa, %.lcssa1
  %174 = add nsw i32 %173, 1
  %175 = sext i32 %174 to i64
  %176 = shl nsw i64 %175, 3
  %177 = call ptr @realloc(ptr noundef %172, i64 noundef %176) #46
  store ptr %177, ptr @termarray, align 8, !tbaa !7
  %178 = icmp sgt i32 %.lcssa, 0
  br i1 %178, label %179, label %188

179:                                              ; preds = %171
  %180 = sext i32 %.lcssa1 to i64
  %181 = sext i32 %173 to i64
  br label %182

182:                                              ; preds = %182, %179
  %183 = phi i64 [ %180, %179 ], [ %184, %182 ]
  %184 = add nsw i64 %183, 1
  %185 = load ptr, ptr @termarray, align 8, !tbaa !7
  %186 = getelementptr inbounds ptr, ptr %185, i64 %184
  store ptr null, ptr %186, align 8, !tbaa !7
  %187 = icmp slt i64 %184, %181
  br i1 %187, label %182, label %188, !llvm.loop !469

188:                                              ; preds = %182, %171
  %189 = load ptr, ptr @pinnames, align 8, !tbaa !7
  %190 = call ptr @realloc(ptr noundef %189, i64 noundef %176) #46
  store ptr %190, ptr @pinnames, align 8, !tbaa !7
  call void @llvm.lifetime.end.p0(i64 1024, ptr nonnull %16) #47
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %15) #47
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14) #47
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %12) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %11) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %10) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %3) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #47
  ret void
}

; Function Attrs: nofree nounwind optsize
declare void @rewind(ptr nocapture noundef) local_unnamed_addr #11

; Function Attrs: nounwind optsize uwtable
define internal void @grdcell(ptr noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca [1024 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %3) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %7) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %8) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %9) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %10) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %11) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %12) #47
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13) #47
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %14) #47
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %15) #47
  call void @llvm.lifetime.start.p0(i64 1024, ptr nonnull %16) #47
  tail call void @gpass2(ptr noundef %0) #44
  store i32 0, ptr @ecount, align 4, !tbaa !17
  br label %17

17:                                               ; preds = %394, %1
  %18 = phi i32 [ undef, %1 ], [ %395, %394 ]
  %19 = phi i32 [ undef, %1 ], [ %396, %394 ]
  %20 = phi i32 [ undef, %1 ], [ %397, %394 ]
  %21 = phi i32 [ undef, %1 ], [ %398, %394 ]
  %22 = phi i32 [ undef, %1 ], [ %399, %394 ]
  %23 = phi i32 [ undef, %1 ], [ %400, %394 ]
  %24 = phi i32 [ 0, %1 ], [ %401, %394 ]
  %25 = phi ptr [ undef, %1 ], [ %402, %394 ]
  %26 = phi ptr [ undef, %1 ], [ %403, %394 ]
  %27 = phi i32 [ 0, %1 ], [ %404, %394 ]
  %28 = phi ptr [ undef, %1 ], [ %405, %394 ]
  %29 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.305, ptr noundef nonnull %16) #44
  %30 = icmp eq i32 %29, 1
  br i1 %30, label %31, label %406

31:                                               ; preds = %17
  %32 = call i32 @bcmp(ptr noundef nonnull dereferenceable(5) %16, ptr noundef nonnull dereferenceable(5) @.str.1.306, i64 5)
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %117

34:                                               ; preds = %31
  %35 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %36 = add nsw i32 %27, 1
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds ptr, ptr %35, i64 %37
  %39 = load ptr, ptr %38, align 8, !tbaa !7
  %40 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.2.307, ptr noundef nonnull %12) #44
  %41 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.3.308, ptr noundef nonnull %16) #44
  %42 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.3.308, ptr noundef nonnull %16) #44
  %43 = load ptr, ptr @A, align 8, !tbaa !7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(248) %43, i8 0, i64 248, i1 false), !tbaa !17
  %44 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.309, ptr noundef nonnull %8) #44
  %45 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.305, ptr noundef nonnull %16) #44
  %46 = load i32, ptr %8, align 4, !tbaa !17
  %47 = icmp slt i32 %46, 1
  br i1 %47, label %48, label %55

48:                                               ; preds = %34
  %49 = load ptr, ptr @A, align 8, !tbaa !7
  %50 = load i32, ptr %49, align 4, !tbaa !102
  br label %51

51:                                               ; preds = %55, %48
  %52 = phi i32 [ %50, %48 ], [ %65, %55 ]
  %53 = phi ptr [ %49, %48 ], [ %59, %55 ]
  %54 = icmp slt i32 %52, 1
  br i1 %54, label %96, label %71

55:                                               ; preds = %55, %34
  %56 = phi i32 [ %68, %55 ], [ 1, %34 ]
  %57 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.310, ptr noundef nonnull %10, ptr noundef nonnull %11) #44
  %58 = load i32, ptr %10, align 4, !tbaa !17
  %59 = load ptr, ptr @A, align 8, !tbaa !7
  %60 = load i32, ptr %59, align 4, !tbaa !102
  %61 = add nsw i32 %60, 1
  store i32 %61, ptr %59, align 4, !tbaa !102
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds %struct.bellbox, ptr %59, i64 %62
  store i32 %58, ptr %63, align 4, !tbaa !102
  %64 = load i32, ptr %11, align 4, !tbaa !17
  %65 = load i32, ptr %59, align 4, !tbaa !102
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds %struct.bellbox, ptr %59, i64 %66, i32 1
  store i32 %64, ptr %67, align 4, !tbaa !104
  %68 = add nuw nsw i32 %56, 1
  %69 = load i32, ptr %8, align 4, !tbaa !17
  %70 = icmp slt i32 %56, %69
  br i1 %70, label %55, label %51, !llvm.loop !470

71:                                               ; preds = %87, %51
  %72 = phi i64 [ %92, %87 ], [ 1, %51 ]
  %73 = phi i32 [ %91, %87 ], [ %23, %51 ]
  %74 = phi i32 [ %90, %87 ], [ %22, %51 ]
  %75 = phi i32 [ %89, %87 ], [ %21, %51 ]
  %76 = phi i32 [ %88, %87 ], [ %20, %51 ]
  %77 = getelementptr inbounds %struct.bellbox, ptr %53, i64 %72
  %78 = load i32, ptr %77, align 4, !tbaa !102
  store i32 %78, ptr %10, align 4, !tbaa !17
  %79 = getelementptr inbounds %struct.bellbox, ptr %53, i64 %72, i32 1
  %80 = load i32, ptr %79, align 4, !tbaa !104
  store i32 %80, ptr %11, align 4, !tbaa !17
  %81 = icmp eq i64 %72, 1
  br i1 %81, label %87, label %82

82:                                               ; preds = %71
  %83 = call i32 @llvm.smin.i32(i32 %78, i32 %76)
  %84 = call i32 @llvm.smax.i32(i32 %78, i32 %74)
  %85 = call i32 @llvm.smin.i32(i32 %80, i32 %75)
  %86 = call i32 @llvm.smax.i32(i32 %80, i32 %73)
  br label %87

87:                                               ; preds = %82, %71
  %88 = phi i32 [ %83, %82 ], [ %78, %71 ]
  %89 = phi i32 [ %85, %82 ], [ %80, %71 ]
  %90 = phi i32 [ %84, %82 ], [ %78, %71 ]
  %91 = phi i32 [ %86, %82 ], [ %80, %71 ]
  %92 = add nuw nsw i64 %72, 1
  %93 = load i32, ptr %53, align 4, !tbaa !102
  %94 = sext i32 %93 to i64
  %95 = icmp slt i64 %72, %94
  br i1 %95, label %71, label %96, !llvm.loop !471

96:                                               ; preds = %87, %51
  %97 = phi i32 [ %20, %51 ], [ %88, %87 ]
  %98 = phi i32 [ %21, %51 ], [ %89, %87 ]
  %99 = phi i32 [ %22, %51 ], [ %90, %87 ]
  %100 = phi i32 [ %23, %51 ], [ %91, %87 ]
  %101 = add nsw i32 %99, %97
  %102 = sdiv i32 %101, 2
  %103 = add nsw i32 %100, %98
  %104 = sdiv i32 %103, 2
  %105 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.305, ptr noundef nonnull %16) #44
  %106 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.309, ptr noundef nonnull %2) #44
  %107 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.309, ptr noundef nonnull %9) #44
  %108 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.305, ptr noundef nonnull %16) #44
  %109 = load i32, ptr %9, align 4, !tbaa !17
  %110 = icmp slt i32 %109, 1
  br i1 %110, label %394, label %111

111:                                              ; preds = %111, %96
  %112 = phi i32 [ %114, %111 ], [ 1, %96 ]
  %113 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.309, ptr noundef nonnull %10) #44
  %114 = add nuw nsw i32 %112, 1
  %115 = load i32, ptr %9, align 4, !tbaa !17
  %116 = icmp slt i32 %112, %115
  br i1 %116, label %111, label %394, !llvm.loop !472

117:                                              ; preds = %31
  %118 = load i32, ptr %16, align 16
  %119 = icmp eq i32 %118, 6578544
  br i1 %119, label %120, label %191

120:                                              ; preds = %117
  %121 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %122 = add nsw i32 %27, 1
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds ptr, ptr %121, i64 %123
  %125 = load ptr, ptr %124, align 8, !tbaa !7
  %126 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.2.307, ptr noundef nonnull %12) #44
  %127 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.3.308, ptr noundef nonnull %16) #44
  %128 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.3.308, ptr noundef nonnull %16) #44
  %129 = load ptr, ptr @A, align 8, !tbaa !7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(248) %129, i8 0, i64 248, i1 false), !tbaa !17
  %130 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.309, ptr noundef nonnull %8) #44
  %131 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.305, ptr noundef nonnull %16) #44
  %132 = load i32, ptr %8, align 4, !tbaa !17
  %133 = icmp slt i32 %132, 1
  br i1 %133, label %134, label %141

134:                                              ; preds = %120
  %135 = load ptr, ptr @A, align 8, !tbaa !7
  %136 = load i32, ptr %135, align 4, !tbaa !102
  br label %137

137:                                              ; preds = %141, %134
  %138 = phi i32 [ %136, %134 ], [ %151, %141 ]
  %139 = phi ptr [ %135, %134 ], [ %145, %141 ]
  %140 = icmp slt i32 %138, 1
  br i1 %140, label %182, label %157

141:                                              ; preds = %141, %120
  %142 = phi i32 [ %154, %141 ], [ 1, %120 ]
  %143 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.310, ptr noundef nonnull %10, ptr noundef nonnull %11) #44
  %144 = load i32, ptr %10, align 4, !tbaa !17
  %145 = load ptr, ptr @A, align 8, !tbaa !7
  %146 = load i32, ptr %145, align 4, !tbaa !102
  %147 = add nsw i32 %146, 1
  store i32 %147, ptr %145, align 4, !tbaa !102
  %148 = sext i32 %147 to i64
  %149 = getelementptr inbounds %struct.bellbox, ptr %145, i64 %148
  store i32 %144, ptr %149, align 4, !tbaa !102
  %150 = load i32, ptr %11, align 4, !tbaa !17
  %151 = load i32, ptr %145, align 4, !tbaa !102
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds %struct.bellbox, ptr %145, i64 %152, i32 1
  store i32 %150, ptr %153, align 4, !tbaa !104
  %154 = add nuw nsw i32 %142, 1
  %155 = load i32, ptr %8, align 4, !tbaa !17
  %156 = icmp slt i32 %142, %155
  br i1 %156, label %141, label %137, !llvm.loop !473

157:                                              ; preds = %173, %137
  %158 = phi i64 [ %178, %173 ], [ 1, %137 ]
  %159 = phi i32 [ %177, %173 ], [ %23, %137 ]
  %160 = phi i32 [ %176, %173 ], [ %22, %137 ]
  %161 = phi i32 [ %175, %173 ], [ %21, %137 ]
  %162 = phi i32 [ %174, %173 ], [ %20, %137 ]
  %163 = getelementptr inbounds %struct.bellbox, ptr %139, i64 %158
  %164 = load i32, ptr %163, align 4, !tbaa !102
  store i32 %164, ptr %10, align 4, !tbaa !17
  %165 = getelementptr inbounds %struct.bellbox, ptr %139, i64 %158, i32 1
  %166 = load i32, ptr %165, align 4, !tbaa !104
  store i32 %166, ptr %11, align 4, !tbaa !17
  %167 = icmp eq i64 %158, 1
  br i1 %167, label %173, label %168

168:                                              ; preds = %157
  %169 = call i32 @llvm.smin.i32(i32 %164, i32 %162)
  %170 = call i32 @llvm.smax.i32(i32 %164, i32 %160)
  %171 = call i32 @llvm.smin.i32(i32 %166, i32 %161)
  %172 = call i32 @llvm.smax.i32(i32 %166, i32 %159)
  br label %173

173:                                              ; preds = %168, %157
  %174 = phi i32 [ %169, %168 ], [ %164, %157 ]
  %175 = phi i32 [ %171, %168 ], [ %166, %157 ]
  %176 = phi i32 [ %170, %168 ], [ %164, %157 ]
  %177 = phi i32 [ %172, %168 ], [ %166, %157 ]
  %178 = add nuw nsw i64 %158, 1
  %179 = load i32, ptr %139, align 4, !tbaa !102
  %180 = sext i32 %179 to i64
  %181 = icmp slt i64 %158, %180
  br i1 %181, label %157, label %182, !llvm.loop !474

182:                                              ; preds = %173, %137
  %183 = phi i32 [ %20, %137 ], [ %174, %173 ]
  %184 = phi i32 [ %21, %137 ], [ %175, %173 ]
  %185 = phi i32 [ %22, %137 ], [ %176, %173 ]
  %186 = phi i32 [ %23, %137 ], [ %177, %173 ]
  %187 = add nsw i32 %185, %183
  %188 = sdiv i32 %187, 2
  %189 = add nsw i32 %186, %184
  %190 = sdiv i32 %189, 2
  br label %394

191:                                              ; preds = %117
  %192 = load i64, ptr %16, align 16
  %193 = icmp eq i64 %192, 28539376718078320
  br i1 %193, label %194, label %208

194:                                              ; preds = %191
  %195 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.305, ptr noundef nonnull %16) #44
  %196 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.305, ptr noundef nonnull %16) #44
  %197 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.309, ptr noundef nonnull %2) #44
  %198 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.309, ptr noundef nonnull %9) #44
  %199 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.305, ptr noundef nonnull %16) #44
  %200 = load i32, ptr %9, align 4, !tbaa !17
  %201 = icmp slt i32 %200, 1
  br i1 %201, label %394, label %202

202:                                              ; preds = %202, %194
  %203 = phi i32 [ %205, %202 ], [ 1, %194 ]
  %204 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.309, ptr noundef nonnull %10) #44
  %205 = add nuw nsw i32 %203, 1
  %206 = load i32, ptr %9, align 4, !tbaa !17
  %207 = icmp slt i32 %203, %206
  br i1 %207, label %202, label %394, !llvm.loop !475

208:                                              ; preds = %191
  %209 = call i32 @bcmp(ptr noundef nonnull dereferenceable(10) %16, ptr noundef nonnull dereferenceable(10) @.str.8.311, i64 10)
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %211, label %213

211:                                              ; preds = %208
  %212 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.9.312, ptr noundef nonnull %15) #44
  br label %394

213:                                              ; preds = %208
  %214 = call i32 @bcmp(ptr noundef nonnull dereferenceable(9) %16, ptr noundef nonnull dereferenceable(9) @.str.10.313, i64 9)
  %215 = icmp eq i32 %214, 0
  br i1 %215, label %216, label %248

216:                                              ; preds = %213
  %217 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %218 = add nsw i32 %27, 1
  %219 = sext i32 %218 to i64
  %220 = getelementptr inbounds ptr, ptr %217, i64 %219
  %221 = load ptr, ptr %220, align 8, !tbaa !7
  %222 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.2.307, ptr noundef nonnull %12) #44
  %223 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.3.308, ptr noundef nonnull %16) #44
  %224 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.3.308, ptr noundef nonnull %16) #44
  %225 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.309, ptr noundef nonnull %8) #44
  %226 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.305, ptr noundef nonnull %16) #44
  %227 = load i32, ptr %8, align 4, !tbaa !17
  %228 = icmp slt i32 %227, 1
  br i1 %228, label %235, label %229

229:                                              ; preds = %229, %216
  %230 = phi i32 [ %232, %229 ], [ 1, %216 ]
  %231 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.310, ptr noundef nonnull %10, ptr noundef nonnull %11) #44
  %232 = add nuw nsw i32 %230, 1
  %233 = load i32, ptr %8, align 4, !tbaa !17
  %234 = icmp slt i32 %230, %233
  br i1 %234, label %229, label %235, !llvm.loop !476

235:                                              ; preds = %229, %216
  %236 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.305, ptr noundef nonnull %16) #44
  %237 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.309, ptr noundef nonnull %2) #44
  %238 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.309, ptr noundef nonnull %9) #44
  %239 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.305, ptr noundef nonnull %16) #44
  %240 = load i32, ptr %9, align 4, !tbaa !17
  %241 = icmp slt i32 %240, 1
  br i1 %241, label %394, label %242

242:                                              ; preds = %242, %235
  %243 = phi i32 [ %245, %242 ], [ 1, %235 ]
  %244 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.309, ptr noundef nonnull %10) #44
  %245 = add nuw nsw i32 %243, 1
  %246 = load i32, ptr %9, align 4, !tbaa !17
  %247 = icmp slt i32 %243, %246
  br i1 %247, label %242, label %394, !llvm.loop !477

248:                                              ; preds = %213
  %249 = and i64 %192, 4294967295
  %250 = icmp eq i64 %249, 7235952
  br i1 %250, label %251, label %294

251:                                              ; preds = %248
  %252 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.305, ptr noundef nonnull %16) #44
  %253 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.305, ptr noundef nonnull %16) #44
  %254 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.305, ptr noundef nonnull %16) #44
  %255 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.305, ptr noundef nonnull %16) #44
  %256 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.310, ptr noundef nonnull %3, ptr noundef nonnull %4) #44
  %257 = add nsw i32 %24, 1
  %258 = call i32 @hashfind(ptr noundef nonnull %16) #44
  %259 = load ptr, ptr @netarray, align 8, !tbaa !7
  %260 = sext i32 %258 to i64
  %261 = getelementptr inbounds ptr, ptr %259, i64 %260
  %262 = load ptr, ptr %261, align 8, !tbaa !7
  br label %263

263:                                              ; preds = %263, %251
  %264 = phi ptr [ %262, %251 ], [ %265, %263 ]
  %265 = load ptr, ptr %264, align 8, !tbaa !7
  %266 = getelementptr inbounds %struct.netbox, ptr %265, i64 0, i32 5
  %267 = load i32, ptr %266, align 8, !tbaa !55
  %268 = icmp eq i32 %267, %257
  br i1 %268, label %269, label %263

269:                                              ; preds = %263
  %.lcssa1 = phi ptr [ %265, %263 ]
  %270 = getelementptr inbounds %struct.netbox, ptr %.lcssa1, i64 0, i32 7
  store i32 %27, ptr %270, align 8, !tbaa !57
  %271 = getelementptr inbounds %struct.netbox, ptr %.lcssa1, i64 0, i32 8
  store i32 1, ptr %271, align 4, !tbaa !478
  %272 = getelementptr inbounds %struct.cellbox, ptr %25, i64 0, i32 10
  %273 = load i32, ptr %272, align 4, !tbaa !297
  %274 = icmp eq i32 %273, 0
  br i1 %274, label %275, label %394

275:                                              ; preds = %269
  %276 = getelementptr inbounds %struct.cellbox, ptr %25, i64 0, i32 21
  %277 = load ptr, ptr %276, align 8, !tbaa !7
  %278 = getelementptr inbounds %struct.tilebox, ptr %277, i64 0, i32 17
  br label %279

279:                                              ; preds = %279, %275
  %280 = phi ptr [ %278, %275 ], [ %281, %279 ]
  %281 = load ptr, ptr %280, align 8, !tbaa !7
  %282 = getelementptr inbounds %struct.termbox, ptr %281, i64 0, i32 5
  %283 = load i32, ptr %282, align 8, !tbaa !53
  %284 = icmp eq i32 %283, %257
  br i1 %284, label %285, label %279

285:                                              ; preds = %279
  %.lcssa2 = phi ptr [ %281, %279 ]
  %286 = load i32, ptr %3, align 4, !tbaa !17
  %287 = sub nsw i32 %286, %18
  %288 = getelementptr inbounds %struct.termbox, ptr %.lcssa2, i64 0, i32 1
  store i32 %287, ptr %288, align 8, !tbaa !51
  %289 = load i32, ptr %4, align 4, !tbaa !17
  %290 = sub nsw i32 %289, %19
  %291 = getelementptr inbounds %struct.termbox, ptr %.lcssa2, i64 0, i32 2
  store i32 %290, ptr %291, align 4, !tbaa !52
  %292 = getelementptr inbounds %struct.termbox, ptr %.lcssa2, i64 0, i32 3
  store i32 %287, ptr %292, align 8, !tbaa !386
  %293 = getelementptr inbounds %struct.termbox, ptr %.lcssa2, i64 0, i32 4
  store i32 %290, ptr %293, align 4, !tbaa !387
  br label %394

294:                                              ; preds = %248
  %295 = call i32 @bcmp(ptr noundef nonnull dereferenceable(6) %16, ptr noundef nonnull dereferenceable(6) @.str.12.314, i64 6)
  %296 = icmp eq i32 %295, 0
  br i1 %296, label %297, label %343

297:                                              ; preds = %294
  %298 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.305, ptr noundef nonnull %16) #44
  %299 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.305, ptr noundef nonnull %16) #44
  %300 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %16) #50
  %301 = add i64 %300, 1
  %302 = call noalias ptr @malloc(i64 noundef %301) #45
  %303 = load ptr, ptr @pinnames, align 8, !tbaa !7
  %304 = load i32, ptr @ecount, align 4, !tbaa !17
  %305 = add nsw i32 %304, 1
  store i32 %305, ptr @ecount, align 4, !tbaa !17
  %306 = load i32, ptr @maxterm, align 4, !tbaa !17
  %307 = add nsw i32 %306, %305
  %308 = sext i32 %307 to i64
  %309 = getelementptr inbounds ptr, ptr %303, i64 %308
  store ptr %302, ptr %309, align 8, !tbaa !7
  %310 = load ptr, ptr @pinnames, align 8, !tbaa !7
  %311 = getelementptr inbounds ptr, ptr %310, i64 %308
  %312 = load ptr, ptr %311, align 8, !tbaa !7
  %313 = call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %312, ptr noundef nonnull dereferenceable(1) %16)
  %314 = load ptr, ptr %28, align 8, !tbaa !63
  %315 = call noalias dereferenceable_or_null(48) ptr @malloc(i64 noundef 48) #45
  store ptr %315, ptr %28, align 8, !tbaa !63
  store ptr %314, ptr %315, align 8, !tbaa !63
  %316 = load i32, ptr @ecount, align 4, !tbaa !17
  %317 = load i32, ptr @maxterm, align 4, !tbaa !17
  %318 = add nsw i32 %317, %316
  %319 = getelementptr inbounds %struct.netbox, ptr %315, i64 0, i32 5
  store i32 %318, ptr %319, align 8, !tbaa !55
  %320 = getelementptr inbounds %struct.netbox, ptr %315, i64 0, i32 1
  %321 = getelementptr inbounds %struct.netbox, ptr %315, i64 0, i32 6
  store i32 0, ptr %321, align 4, !tbaa !58
  %322 = getelementptr inbounds %struct.netbox, ptr %315, i64 0, i32 7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %320, i8 0, i64 16, i1 false)
  store i32 %27, ptr %322, align 8, !tbaa !57
  %323 = getelementptr inbounds %struct.netbox, ptr %315, i64 0, i32 8
  store i32 0, ptr %323, align 4, !tbaa !478
  %324 = getelementptr inbounds %struct.netbox, ptr %315, i64 0, i32 9
  store i32 0, ptr %324, align 8, !tbaa !59
  %325 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.310, ptr noundef nonnull %3, ptr noundef nonnull %4) #44
  %326 = getelementptr inbounds %struct.cellbox, ptr %25, i64 0, i32 8
  %327 = load i32, ptr %326, align 4, !tbaa !385
  %328 = add nsw i32 %327, 1
  store i32 %328, ptr %326, align 4, !tbaa !385
  %329 = load ptr, ptr %26, align 8, !tbaa !49
  %330 = call noalias dereferenceable_or_null(32) ptr @malloc(i64 noundef 32) #45
  store ptr %330, ptr %26, align 8, !tbaa !49
  store ptr %329, ptr %330, align 8, !tbaa !49
  %331 = load i32, ptr @ecount, align 4, !tbaa !17
  %332 = load i32, ptr @maxterm, align 4, !tbaa !17
  %333 = add nsw i32 %332, %331
  %334 = getelementptr inbounds %struct.termbox, ptr %330, i64 0, i32 5
  store i32 %333, ptr %334, align 8, !tbaa !53
  %335 = load i32, ptr %3, align 4, !tbaa !17
  %336 = sub nsw i32 %335, %18
  %337 = getelementptr inbounds %struct.termbox, ptr %330, i64 0, i32 1
  store i32 %336, ptr %337, align 8, !tbaa !51
  %338 = load i32, ptr %4, align 4, !tbaa !17
  %339 = sub nsw i32 %338, %19
  %340 = getelementptr inbounds %struct.termbox, ptr %330, i64 0, i32 2
  store i32 %339, ptr %340, align 4, !tbaa !52
  %341 = getelementptr inbounds %struct.termbox, ptr %330, i64 0, i32 3
  store i32 %336, ptr %341, align 8, !tbaa !386
  %342 = getelementptr inbounds %struct.termbox, ptr %330, i64 0, i32 4
  store i32 %339, ptr %342, align 4, !tbaa !387
  br label %394

343:                                              ; preds = %294
  %344 = call i32 @bcmp(ptr noundef nonnull dereferenceable(6) %16, ptr noundef nonnull dereferenceable(6) @.str.13.315, i64 6)
  %345 = icmp eq i32 %344, 0
  br i1 %345, label %346, label %348

346:                                              ; preds = %343
  %347 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.14.316, ptr noundef nonnull %14) #44
  br label %394

348:                                              ; preds = %343
  %349 = call i32 @bcmp(ptr noundef nonnull dereferenceable(6) %16, ptr noundef nonnull dereferenceable(6) @.str.15.317, i64 6)
  %350 = icmp eq i32 %349, 0
  br i1 %350, label %351, label %353

351:                                              ; preds = %348
  %352 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.14.316, ptr noundef nonnull %13) #44
  br label %394

353:                                              ; preds = %348
  %354 = call i32 @bcmp(ptr noundef nonnull dereferenceable(9) %16, ptr noundef nonnull dereferenceable(9) @.str.16.318, i64 9)
  %355 = icmp eq i32 %354, 0
  br i1 %355, label %359, label %356

356:                                              ; preds = %353
  %357 = call i32 @bcmp(ptr noundef nonnull dereferenceable(6) %16, ptr noundef nonnull dereferenceable(6) @.str.17.319, i64 6)
  %358 = icmp eq i32 %357, 0
  br i1 %358, label %359, label %394

359:                                              ; preds = %356, %353
  %360 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.309, ptr noundef nonnull %5) #44
  %361 = load i32, ptr %5, align 4, !tbaa !17
  %362 = icmp slt i32 %361, 1
  br i1 %362, label %389, label %363

363:                                              ; preds = %383, %359
  %364 = phi i32 [ %386, %383 ], [ 1, %359 ]
  %365 = phi i32 [ %369, %383 ], [ %24, %359 ]
  %366 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.305, ptr noundef nonnull %16) #44
  %367 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.305, ptr noundef nonnull %16) #44
  %368 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.305, ptr noundef nonnull %16) #44
  %369 = add nsw i32 %365, 1
  %370 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.305, ptr noundef nonnull %16) #44
  %371 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.305, ptr noundef nonnull %16) #44
  %372 = call i32 @hashfind(ptr noundef nonnull %16) #44
  %373 = load ptr, ptr @netarray, align 8, !tbaa !7
  %374 = sext i32 %372 to i64
  %375 = getelementptr inbounds ptr, ptr %373, i64 %374
  %376 = load ptr, ptr %375, align 8, !tbaa !7
  br label %377

377:                                              ; preds = %377, %363
  %378 = phi ptr [ %376, %363 ], [ %379, %377 ]
  %379 = load ptr, ptr %378, align 8, !tbaa !7
  %380 = getelementptr inbounds %struct.netbox, ptr %379, i64 0, i32 5
  %381 = load i32, ptr %380, align 8, !tbaa !55
  %382 = icmp eq i32 %381, %369
  br i1 %382, label %383, label %377

383:                                              ; preds = %377
  %.lcssa = phi ptr [ %379, %377 ]
  %384 = getelementptr inbounds %struct.netbox, ptr %.lcssa, i64 0, i32 7
  store i32 %27, ptr %384, align 8, !tbaa !57
  %385 = getelementptr inbounds %struct.netbox, ptr %.lcssa, i64 0, i32 8
  store i32 1, ptr %385, align 4, !tbaa !478
  %386 = add nuw nsw i32 %364, 1
  %387 = load i32, ptr %5, align 4, !tbaa !17
  %388 = icmp slt i32 %364, %387
  br i1 %388, label %363, label %389, !llvm.loop !479

389:                                              ; preds = %383, %359
  %390 = phi i32 [ %24, %359 ], [ %369, %383 ]
  %391 = phi ptr [ %28, %359 ], [ %.lcssa, %383 ]
  %392 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.305, ptr noundef nonnull %16) #44
  %393 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.310, ptr noundef nonnull %6, ptr noundef nonnull %7) #44
  br label %394

394:                                              ; preds = %389, %356, %351, %346, %297, %285, %269, %242, %235, %211, %202, %194, %182, %111, %96
  %395 = phi i32 [ %188, %182 ], [ %18, %211 ], [ %18, %285 ], [ %18, %269 ], [ %18, %297 ], [ %18, %346 ], [ %18, %351 ], [ %18, %389 ], [ %18, %356 ], [ %102, %96 ], [ %18, %194 ], [ %18, %235 ], [ %102, %111 ], [ %18, %202 ], [ %18, %242 ]
  %396 = phi i32 [ %190, %182 ], [ %19, %211 ], [ %19, %285 ], [ %19, %269 ], [ %19, %297 ], [ %19, %346 ], [ %19, %351 ], [ %19, %389 ], [ %19, %356 ], [ %104, %96 ], [ %19, %194 ], [ %19, %235 ], [ %104, %111 ], [ %19, %202 ], [ %19, %242 ]
  %397 = phi i32 [ %183, %182 ], [ %20, %211 ], [ %20, %285 ], [ %20, %269 ], [ %20, %297 ], [ %20, %346 ], [ %20, %351 ], [ %20, %389 ], [ %20, %356 ], [ %97, %96 ], [ %20, %194 ], [ %20, %235 ], [ %97, %111 ], [ %20, %202 ], [ %20, %242 ]
  %398 = phi i32 [ %184, %182 ], [ %21, %211 ], [ %21, %285 ], [ %21, %269 ], [ %21, %297 ], [ %21, %346 ], [ %21, %351 ], [ %21, %389 ], [ %21, %356 ], [ %98, %96 ], [ %21, %194 ], [ %21, %235 ], [ %98, %111 ], [ %21, %202 ], [ %21, %242 ]
  %399 = phi i32 [ %185, %182 ], [ %22, %211 ], [ %22, %285 ], [ %22, %269 ], [ %22, %297 ], [ %22, %346 ], [ %22, %351 ], [ %22, %389 ], [ %22, %356 ], [ %99, %96 ], [ %22, %194 ], [ %22, %235 ], [ %99, %111 ], [ %22, %202 ], [ %22, %242 ]
  %400 = phi i32 [ %186, %182 ], [ %23, %211 ], [ %23, %285 ], [ %23, %269 ], [ %23, %297 ], [ %23, %346 ], [ %23, %351 ], [ %23, %389 ], [ %23, %356 ], [ %100, %96 ], [ %23, %194 ], [ %23, %235 ], [ %100, %111 ], [ %23, %202 ], [ %23, %242 ]
  %401 = phi i32 [ %24, %182 ], [ %24, %211 ], [ %257, %285 ], [ %257, %269 ], [ %24, %297 ], [ %24, %346 ], [ %24, %351 ], [ %390, %389 ], [ %24, %356 ], [ %24, %96 ], [ %24, %194 ], [ %24, %235 ], [ %24, %111 ], [ %24, %202 ], [ %24, %242 ]
  %402 = phi ptr [ %125, %182 ], [ %25, %211 ], [ %25, %285 ], [ %25, %269 ], [ %25, %297 ], [ %25, %346 ], [ %25, %351 ], [ %25, %389 ], [ %25, %356 ], [ %39, %96 ], [ %25, %194 ], [ %221, %235 ], [ %39, %111 ], [ %25, %202 ], [ %221, %242 ]
  %403 = phi ptr [ %26, %182 ], [ %26, %211 ], [ %.lcssa2, %285 ], [ %26, %269 ], [ %330, %297 ], [ %26, %346 ], [ %26, %351 ], [ %26, %389 ], [ %26, %356 ], [ %26, %96 ], [ %26, %194 ], [ %26, %235 ], [ %26, %111 ], [ %26, %202 ], [ %26, %242 ]
  %404 = phi i32 [ %122, %182 ], [ %27, %211 ], [ %27, %285 ], [ %27, %269 ], [ %27, %297 ], [ %27, %346 ], [ %27, %351 ], [ %27, %389 ], [ %27, %356 ], [ %36, %96 ], [ %27, %194 ], [ %218, %235 ], [ %36, %111 ], [ %27, %202 ], [ %218, %242 ]
  %405 = phi ptr [ %28, %182 ], [ %28, %211 ], [ %.lcssa1, %285 ], [ %.lcssa1, %269 ], [ %315, %297 ], [ %28, %346 ], [ %28, %351 ], [ %391, %389 ], [ %28, %356 ], [ %28, %96 ], [ %28, %194 ], [ %28, %235 ], [ %28, %111 ], [ %28, %202 ], [ %28, %242 ]
  br label %17, !llvm.loop !480

406:                                              ; preds = %17
  call void @ggenorien() #44
  call void @llvm.lifetime.end.p0(i64 1024, ptr nonnull %16) #47
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %15) #47
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14) #47
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %12) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %11) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %10) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %3) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #47
  ret void
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: read)
declare i64 @strlen(ptr nocapture noundef) local_unnamed_addr #24

; Function Attrs: nofree nounwind willreturn memory(argmem: readwrite)
declare ptr @strcpy(ptr noalias returned writeonly, ptr noalias nocapture readonly) local_unnamed_addr #25

; Function Attrs: nounwind optsize uwtable
define internal void @grepair() #0 {
  %1 = load i32, ptr @numnodes, align 4, !tbaa !17
  %2 = load i32, ptr @maxpnode, align 4, !tbaa !17
  %3 = add nsw i32 %2, %1
  %4 = icmp slt i32 %3, 1
  br i1 %4, label %63, label %5

5:                                                ; preds = %0
  %6 = load ptr, ptr @gnodeArray, align 8, !tbaa !7
  br label %7

7:                                                ; preds = %55, %5
  %8 = phi ptr [ %6, %5 ], [ %56, %55 ]
  %9 = phi i64 [ 1, %5 ], [ %57, %55 ]
  %10 = phi i32 [ %1, %5 ], [ %58, %55 ]
  %11 = getelementptr inbounds ptr, ptr %8, i64 %9
  %12 = load ptr, ptr %11, align 8, !tbaa !7
  %13 = icmp eq ptr %12, null
  br i1 %13, label %55, label %14

14:                                               ; preds = %7
  %15 = sext i32 %10 to i64
  %16 = icmp sgt i64 %9, %15
  br i1 %16, label %46, label %17

17:                                               ; preds = %14
  %18 = load i32, ptr %12, align 8, !tbaa !481
  %19 = icmp sgt i32 %18, %10
  br i1 %19, label %20, label %55

20:                                               ; preds = %25, %17
  %21 = phi ptr [ %27, %25 ], [ %12, %17 ]
  %22 = load i32, ptr %21, align 8, !tbaa !481
  %23 = load i32, ptr @numnodes, align 4, !tbaa !17
  %24 = icmp sgt i32 %22, %23
  br i1 %24, label %25, label %29

25:                                               ; preds = %20
  %26 = getelementptr inbounds %struct.clbox, ptr %21, i64 0, i32 7
  %27 = load ptr, ptr %26, align 8, !tbaa !483
  tail call void @free(ptr noundef nonnull %21) #44
  %28 = icmp eq ptr %27, null
  br i1 %28, label %29, label %20

29:                                               ; preds = %25, %20
  %30 = phi ptr [ %21, %20 ], [ null, %25 ]
  %31 = load ptr, ptr @gnodeArray, align 8, !tbaa !7
  %32 = getelementptr inbounds ptr, ptr %31, i64 %9
  store ptr %30, ptr %32, align 8, !tbaa !7
  %33 = load ptr, ptr @gnodeArray, align 8, !tbaa !7
  %34 = getelementptr inbounds ptr, ptr %33, i64 %9
  %35 = load ptr, ptr %34, align 8, !tbaa !7
  %36 = icmp eq ptr %35, null
  br i1 %36, label %55, label %37

37:                                               ; preds = %37, %29
  %38 = phi ptr [ %44, %37 ], [ %35, %29 ]
  %39 = getelementptr inbounds %struct.clbox, ptr %38, i64 0, i32 1
  %40 = load i32, ptr %39, align 4, !tbaa !484
  %41 = getelementptr inbounds %struct.clbox, ptr %38, i64 0, i32 2
  store i32 %40, ptr %41, align 8, !tbaa !485
  %42 = getelementptr inbounds %struct.clbox, ptr %38, i64 0, i32 3
  store i32 %40, ptr %42, align 4, !tbaa !486
  %43 = getelementptr inbounds %struct.clbox, ptr %38, i64 0, i32 7
  %44 = load ptr, ptr %43, align 8, !tbaa !7
  %45 = icmp eq ptr %44, null
  br i1 %45, label %55, label %37

46:                                               ; preds = %46, %14
  %47 = phi ptr [ %49, %46 ], [ %12, %14 ]
  %48 = getelementptr inbounds %struct.clbox, ptr %47, i64 0, i32 7
  %49 = load ptr, ptr %48, align 8, !tbaa !483
  tail call void @free(ptr noundef nonnull %47) #44
  %50 = icmp eq ptr %49, null
  br i1 %50, label %51, label %46, !llvm.loop !487

51:                                               ; preds = %46
  %52 = load ptr, ptr @gnodeArray, align 8, !tbaa !7
  %53 = getelementptr inbounds ptr, ptr %52, i64 %9
  store ptr null, ptr %53, align 8, !tbaa !7
  %54 = load ptr, ptr @gnodeArray, align 8, !tbaa !7
  br label %55

55:                                               ; preds = %51, %37, %29, %17, %7
  %56 = phi ptr [ %33, %29 ], [ %54, %51 ], [ %8, %17 ], [ %8, %7 ], [ %33, %37 ]
  %57 = add nuw nsw i64 %9, 1
  %58 = load i32, ptr @numnodes, align 4, !tbaa !17
  %59 = load i32, ptr @maxpnode, align 4, !tbaa !17
  %60 = add nsw i32 %59, %58
  %61 = sext i32 %60 to i64
  %62 = icmp slt i64 %9, %61
  br i1 %62, label %7, label %63, !llvm.loop !488

63:                                               ; preds = %55, %0
  ret void
}

; Function Attrs: nofree nounwind optsize memory(readwrite, argmem: write) uwtable
define internal void @maketabl() #26 {
  %1 = tail call noalias dereferenceable_or_null(8072) ptr @malloc(i64 noundef 8072) #45
  store ptr %1, ptr @hashtab, align 8, !tbaa !7
  br label %2

2:                                                ; preds = %2, %0
  %3 = phi i64 [ 0, %0 ], [ %6, %2 ]
  %4 = load ptr, ptr @hashtab, align 8, !tbaa !7
  %5 = getelementptr inbounds ptr, ptr %4, i64 %3
  store ptr null, ptr %5, align 8, !tbaa !7
  %6 = add nuw nsw i64 %3, 1
  %7 = icmp eq i64 %6, 1009
  br i1 %7, label %8, label %2, !llvm.loop !489

8:                                                ; preds = %2
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @delHtab() #0 {
  %1 = load ptr, ptr @hashtab, align 8, !tbaa !7
  br label %2

2:                                                ; preds = %21, %0
  %3 = phi ptr [ %1, %0 ], [ %22, %21 ]
  %4 = phi i64 [ 0, %0 ], [ %23, %21 ]
  %5 = getelementptr inbounds ptr, ptr %3, i64 %4
  %6 = load ptr, ptr %5, align 8, !tbaa !7
  %7 = icmp eq ptr %6, null
  br i1 %7, label %21, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.altbox, ptr %6, i64 0, i32 2
  %10 = load ptr, ptr %9, align 8, !tbaa !490
  %11 = icmp eq ptr %10, null
  br i1 %11, label %18, label %12

12:                                               ; preds = %12, %8
  %13 = phi ptr [ %16, %12 ], [ %10, %8 ]
  %14 = phi ptr [ %13, %12 ], [ %6, %8 ]
  tail call void @free(ptr noundef nonnull %14) #44
  %15 = getelementptr inbounds %struct.altbox, ptr %13, i64 0, i32 2
  %16 = load ptr, ptr %15, align 8, !tbaa !490
  %17 = icmp eq ptr %16, null
  br i1 %17, label %18, label %12, !llvm.loop !492

18:                                               ; preds = %12, %8
  %19 = phi ptr [ %6, %8 ], [ %13, %12 ]
  tail call void @free(ptr noundef nonnull %19) #44
  %20 = load ptr, ptr @hashtab, align 8, !tbaa !7
  br label %21

21:                                               ; preds = %18, %2
  %22 = phi ptr [ %3, %2 ], [ %20, %18 ]
  %23 = add nuw nsw i64 %4, 1
  %24 = icmp eq i64 %23, 1009
  br i1 %24, label %25, label %2, !llvm.loop !493

25:                                               ; preds = %21
  %.lcssa = phi ptr [ %22, %21 ]
  tail call void @free(ptr noundef %.lcssa) #44
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal i32 @addhash(ptr nocapture noundef readonly %0) #5 {
  %2 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %0) #50
  %3 = icmp eq i64 %2, 0
  br i1 %3, label %16, label %4

4:                                                ; preds = %4, %1
  %5 = phi i64 [ %11, %4 ], [ 0, %1 ]
  %6 = phi i32 [ %10, %4 ], [ 0, %1 ]
  %7 = getelementptr inbounds i8, ptr %0, i64 %5
  %8 = load i8, ptr %7, align 1, !tbaa !79
  %9 = sext i8 %8 to i32
  %10 = add i32 %6, %9
  %11 = add nuw nsw i64 %5, 1
  %12 = icmp eq i64 %11, %2
  br i1 %12, label %13, label %4, !llvm.loop !494

13:                                               ; preds = %4
  %.lcssa1 = phi i32 [ %10, %4 ]
  %14 = urem i32 %.lcssa1, 1009
  %15 = zext i32 %14 to i64
  br label %16

16:                                               ; preds = %13, %1
  %17 = phi i64 [ 0, %1 ], [ %15, %13 ]
  %18 = load ptr, ptr @hashtab, align 8, !tbaa !7
  %19 = getelementptr inbounds ptr, ptr %18, i64 %17
  %20 = load ptr, ptr %19, align 8, !tbaa !7
  %21 = icmp eq ptr %20, null
  br i1 %21, label %22, label %31

22:                                               ; preds = %16
  %23 = tail call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #45
  store ptr %23, ptr %19, align 8, !tbaa !7
  %24 = getelementptr inbounds %struct.altbox, ptr %23, i64 0, i32 2
  store ptr null, ptr %24, align 8, !tbaa !490
  %25 = load i32, ptr @netctr, align 4, !tbaa !17
  %26 = add nsw i32 %25, 1
  store i32 %26, ptr @netctr, align 4, !tbaa !17
  %27 = getelementptr inbounds %struct.altbox, ptr %23, i64 0, i32 1
  store i32 %26, ptr %27, align 8, !tbaa !495
  %28 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %0) #50
  %29 = add i64 %28, 1
  %30 = tail call noalias ptr @malloc(i64 noundef %29) #45
  store ptr %30, ptr %23, align 8, !tbaa !496
  br label %50

31:                                               ; preds = %36, %16
  %32 = phi ptr [ %38, %36 ], [ %20, %16 ]
  %33 = load ptr, ptr %32, align 8, !tbaa !496
  %34 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %0, ptr noundef nonnull dereferenceable(1) %33) #50
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %53, label %36

36:                                               ; preds = %31
  %37 = getelementptr inbounds %struct.altbox, ptr %32, i64 0, i32 2
  %38 = load ptr, ptr %37, align 8, !tbaa !490
  %39 = icmp eq ptr %38, null
  br i1 %39, label %40, label %31

40:                                               ; preds = %36
  %.lcssa = phi ptr [ %32, %36 ]
  %41 = getelementptr inbounds %struct.altbox, ptr %.lcssa, i64 0, i32 2
  %42 = tail call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #45
  store ptr %42, ptr %41, align 8, !tbaa !490
  %43 = getelementptr inbounds %struct.altbox, ptr %42, i64 0, i32 2
  store ptr null, ptr %43, align 8, !tbaa !490
  %44 = load i32, ptr @netctr, align 4, !tbaa !17
  %45 = add nsw i32 %44, 1
  store i32 %45, ptr @netctr, align 4, !tbaa !17
  %46 = getelementptr inbounds %struct.altbox, ptr %42, i64 0, i32 1
  store i32 %45, ptr %46, align 8, !tbaa !495
  %47 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %0) #50
  %48 = add i64 %47, 1
  %49 = tail call noalias ptr @malloc(i64 noundef %48) #45
  store ptr %49, ptr %42, align 8, !tbaa !496
  br label %50

50:                                               ; preds = %40, %22
  %51 = phi ptr [ %49, %40 ], [ %30, %22 ]
  %52 = tail call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %51, ptr noundef nonnull dereferenceable(1) %0)
  br label %53

53:                                               ; preds = %50, %31
  %54 = phi i32 [ 1, %50 ], [ 0, %31 ]
  ret i32 %54
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: read)
declare i32 @strcmp(ptr nocapture noundef, ptr nocapture noundef) local_unnamed_addr #24

; Function Attrs: nofree nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @hashfind(ptr nocapture noundef readonly %0) #27 {
  %2 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %0) #50
  %3 = icmp eq i64 %2, 0
  br i1 %3, label %16, label %4

4:                                                ; preds = %4, %1
  %5 = phi i64 [ %11, %4 ], [ 0, %1 ]
  %6 = phi i32 [ %10, %4 ], [ 0, %1 ]
  %7 = getelementptr inbounds i8, ptr %0, i64 %5
  %8 = load i8, ptr %7, align 1, !tbaa !79
  %9 = sext i8 %8 to i32
  %10 = add i32 %6, %9
  %11 = add nuw nsw i64 %5, 1
  %12 = icmp eq i64 %11, %2
  br i1 %12, label %13, label %4, !llvm.loop !497

13:                                               ; preds = %4
  %.lcssa1 = phi i32 [ %10, %4 ]
  %14 = urem i32 %.lcssa1, 1009
  %15 = zext i32 %14 to i64
  br label %16

16:                                               ; preds = %13, %1
  %17 = phi i64 [ 0, %1 ], [ %15, %13 ]
  %18 = load ptr, ptr @hashtab, align 8, !tbaa !7
  %19 = getelementptr inbounds ptr, ptr %18, i64 %17
  %20 = load ptr, ptr %19, align 8, !tbaa !7
  %21 = icmp eq ptr %20, null
  br i1 %21, label %34, label %22

22:                                               ; preds = %30, %16
  %23 = phi ptr [ %32, %30 ], [ %20, %16 ]
  %24 = load ptr, ptr %23, align 8, !tbaa !496
  %25 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %0, ptr noundef nonnull dereferenceable(1) %24) #50
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %30

27:                                               ; preds = %22
  %.lcssa = phi ptr [ %23, %22 ]
  %28 = getelementptr inbounds %struct.altbox, ptr %.lcssa, i64 0, i32 1
  %29 = load i32, ptr %28, align 8, !tbaa !495
  br label %34

30:                                               ; preds = %22
  %31 = getelementptr inbounds %struct.altbox, ptr %23, i64 0, i32 2
  %32 = load ptr, ptr %31, align 8, !tbaa !490
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %22

34:                                               ; preds = %30, %27, %16
  %35 = phi i32 [ %29, %27 ], [ 0, %16 ], [ 0, %30 ]
  ret i32 %35
}

; Function Attrs: nounwind optsize uwtable
define internal void @hprobes() #0 {
  %1 = load ptr, ptr @vFixedList, align 8, !tbaa !7
  %2 = icmp eq ptr %1, null
  br i1 %2, label %611, label %3

3:                                                ; preds = %603, %0
  %4 = phi ptr [ %609, %603 ], [ %1, %0 ]
  %5 = phi i32 [ %607, %603 ], [ undef, %0 ]
  %6 = phi i32 [ %606, %603 ], [ undef, %0 ]
  %7 = phi i32 [ %605, %603 ], [ undef, %0 ]
  %8 = phi i32 [ %604, %603 ], [ undef, %0 ]
  %9 = load i32, ptr %4, align 8, !tbaa !138
  %10 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %11 = sext i32 %9 to i64
  %12 = getelementptr inbounds %struct.edgebox, ptr %10, i64 %11, i32 5
  %13 = load i32, ptr %12, align 4, !tbaa !142
  %14 = icmp sgt i32 %13, 0
  br i1 %14, label %603, label %15

15:                                               ; preds = %3
  %16 = getelementptr inbounds %struct.edgebox, ptr %10, i64 %11, i32 3
  %17 = load i32, ptr %16, align 4, !tbaa !140
  %18 = getelementptr inbounds %struct.edgebox, ptr %10, i64 %11, i32 1
  %19 = load i32, ptr %18, align 4, !tbaa !143
  %20 = getelementptr inbounds %struct.edgebox, ptr %10, i64 %11, i32 2
  %21 = load i32, ptr %20, align 4, !tbaa !144
  %22 = getelementptr inbounds %struct.edgebox, ptr %10, i64 %11, i32 7
  %23 = load i32, ptr %22, align 4, !tbaa !333
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds %struct.edgebox, ptr %10, i64 %24, i32 5
  %26 = load i32, ptr %25, align 4, !tbaa !142
  %27 = icmp eq i32 %26, 1
  br i1 %27, label %28, label %62

28:                                               ; preds = %15
  %29 = load ptr, ptr @Vptrs, align 8, !tbaa !7
  %30 = load ptr, ptr @Vroot, align 8, !tbaa !7
  %31 = tail call i32 @tprop(ptr noundef %30, i32 noundef %17) #44
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds ptr, ptr %29, i64 %32
  %34 = load ptr, ptr %33, align 8, !tbaa !7
  %35 = icmp eq ptr %34, null
  %36 = load ptr, ptr @edgeList, align 8, !tbaa !7
  br i1 %35, label %62, label %37

37:                                               ; preds = %56, %28
  %38 = phi ptr [ %60, %56 ], [ %34, %28 ]
  %39 = phi i32 [ %58, %56 ], [ %5, %28 ]
  %40 = phi i32 [ %57, %56 ], [ %6, %28 ]
  %41 = load i32, ptr %38, align 8, !tbaa !138
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds %struct.edgebox, ptr %36, i64 %42, i32 5
  %44 = load i32, ptr %43, align 4, !tbaa !142
  %45 = icmp slt i32 %44, 0
  br i1 %45, label %56, label %46

46:                                               ; preds = %37
  %47 = getelementptr inbounds %struct.edgebox, ptr %36, i64 %42, i32 3
  %48 = load i32, ptr %47, align 4, !tbaa !140
  %49 = getelementptr inbounds %struct.edgebox, ptr %36, i64 %42, i32 1
  %50 = load i32, ptr %49, align 4, !tbaa !143
  %51 = getelementptr inbounds %struct.edgebox, ptr %36, i64 %42, i32 2
  %52 = load i32, ptr %51, align 4, !tbaa !144
  %53 = icmp sge i32 %52, %21
  %54 = icmp slt i32 %50, %21
  %55 = select i1 %53, i1 %54, i1 false
  br i1 %55, label %62, label %56

56:                                               ; preds = %46, %37
  %57 = phi i32 [ %40, %37 ], [ %50, %46 ]
  %58 = phi i32 [ %39, %37 ], [ %48, %46 ]
  %59 = getelementptr inbounds %struct.dlink2, ptr %38, i64 0, i32 2
  %60 = load ptr, ptr %59, align 8, !tbaa !7
  %61 = icmp eq ptr %60, null
  br i1 %61, label %62, label %37, !llvm.loop !498

62:                                               ; preds = %56, %46, %28, %15
  %63 = phi ptr [ %10, %15 ], [ %36, %28 ], [ %36, %46 ], [ %36, %56 ]
  %64 = phi ptr [ null, %15 ], [ null, %28 ], [ null, %56 ], [ %38, %46 ]
  %65 = phi i32 [ %6, %15 ], [ %6, %28 ], [ %57, %56 ], [ %50, %46 ]
  %66 = phi i32 [ %5, %15 ], [ %5, %28 ], [ %58, %56 ], [ %48, %46 ]
  %67 = getelementptr inbounds %struct.edgebox, ptr %63, i64 %11, i32 8
  %68 = load i32, ptr %67, align 4, !tbaa !332
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds %struct.edgebox, ptr %63, i64 %69, i32 5
  %71 = load i32, ptr %70, align 4, !tbaa !142
  %72 = icmp eq i32 %71, -1
  br i1 %72, label %73, label %108

73:                                               ; preds = %62
  %74 = load ptr, ptr @Vptrs, align 8, !tbaa !7
  %75 = load ptr, ptr @Vroot, align 8, !tbaa !7
  %76 = tail call i32 @tprop(ptr noundef %75, i32 noundef %17) #44
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds ptr, ptr %74, i64 %77
  %79 = load ptr, ptr %78, align 8, !tbaa !7
  %80 = icmp eq ptr %79, null
  br i1 %80, label %108, label %81

81:                                               ; preds = %73
  %82 = load ptr, ptr @edgeList, align 8, !tbaa !7
  br label %83

83:                                               ; preds = %102, %81
  %84 = phi ptr [ %79, %81 ], [ %106, %102 ]
  %85 = phi i32 [ %7, %81 ], [ %104, %102 ]
  %86 = phi i32 [ %8, %81 ], [ %103, %102 ]
  %87 = load i32, ptr %84, align 8, !tbaa !138
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds %struct.edgebox, ptr %82, i64 %88, i32 5
  %90 = load i32, ptr %89, align 4, !tbaa !142
  %91 = icmp slt i32 %90, 0
  br i1 %91, label %102, label %92

92:                                               ; preds = %83
  %93 = getelementptr inbounds %struct.edgebox, ptr %82, i64 %88, i32 3
  %94 = load i32, ptr %93, align 4, !tbaa !140
  %95 = getelementptr inbounds %struct.edgebox, ptr %82, i64 %88, i32 2
  %96 = load i32, ptr %95, align 4, !tbaa !144
  %97 = icmp sgt i32 %96, %19
  br i1 %97, label %98, label %102

98:                                               ; preds = %92
  %99 = getelementptr inbounds %struct.edgebox, ptr %82, i64 %88, i32 1
  %100 = load i32, ptr %99, align 4, !tbaa !143
  %101 = icmp sgt i32 %100, %19
  br i1 %101, label %102, label %108

102:                                              ; preds = %98, %92, %83
  %103 = phi i32 [ %86, %83 ], [ %96, %92 ], [ %96, %98 ]
  %104 = phi i32 [ %85, %83 ], [ %94, %92 ], [ %94, %98 ]
  %105 = getelementptr inbounds %struct.dlink2, ptr %84, i64 0, i32 2
  %106 = load ptr, ptr %105, align 8, !tbaa !7
  %107 = icmp eq ptr %106, null
  br i1 %107, label %108, label %83, !llvm.loop !499

108:                                              ; preds = %102, %98, %73, %62
  %109 = phi i32 [ %8, %62 ], [ %8, %73 ], [ %96, %98 ], [ %103, %102 ]
  %110 = phi ptr [ null, %62 ], [ null, %73 ], [ %84, %98 ], [ null, %102 ]
  %111 = phi i32 [ %7, %62 ], [ %7, %73 ], [ %94, %98 ], [ %104, %102 ]
  %112 = icmp ne ptr %64, null
  %113 = icmp eq ptr %64, %110
  %114 = and i1 %112, %113
  br i1 %114, label %115, label %239

115:                                              ; preds = %108
  %116 = load ptr, ptr @Vptrs, align 8, !tbaa !7
  %117 = load ptr, ptr @Vroot, align 8, !tbaa !7
  %118 = tail call i32 @tprop(ptr noundef %117, i32 noundef %17) #44
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds ptr, ptr %116, i64 %119
  %121 = load ptr, ptr %120, align 8, !tbaa !7
  %122 = icmp eq ptr %121, null
  %123 = load ptr, ptr @edgeList, align 8, !tbaa !7
  br i1 %122, label %147, label %124

124:                                              ; preds = %143, %115
  %125 = phi ptr [ %145, %143 ], [ %121, %115 ]
  %126 = load i32, ptr %125, align 8, !tbaa !138
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds %struct.edgebox, ptr %123, i64 %127, i32 5
  %129 = load i32, ptr %128, align 4, !tbaa !142
  %130 = icmp slt i32 %129, 0
  br i1 %130, label %143, label %131

131:                                              ; preds = %124
  %132 = getelementptr inbounds %struct.edgebox, ptr %123, i64 %127, i32 3
  %133 = load i32, ptr %132, align 4, !tbaa !140
  %134 = icmp slt i32 %133, %66
  br i1 %134, label %135, label %147

135:                                              ; preds = %131
  %136 = getelementptr inbounds %struct.edgebox, ptr %123, i64 %127, i32 1
  %137 = load i32, ptr %136, align 4, !tbaa !143
  %138 = icmp slt i32 %137, %21
  br i1 %138, label %139, label %143

139:                                              ; preds = %135
  %140 = getelementptr inbounds %struct.edgebox, ptr %123, i64 %127, i32 2
  %141 = load i32, ptr %140, align 4, !tbaa !144
  %142 = icmp sgt i32 %141, %19
  br i1 %142, label %238, label %143

143:                                              ; preds = %139, %135, %124
  %144 = getelementptr inbounds %struct.dlink2, ptr %125, i64 0, i32 2
  %145 = load ptr, ptr %144, align 8, !tbaa !7
  %146 = icmp eq ptr %145, null
  br i1 %146, label %147, label %124, !llvm.loop !500

147:                                              ; preds = %143, %131, %115
  %148 = load i32, ptr @numProbes, align 4, !tbaa !17
  %149 = add nsw i32 %148, 1
  store i32 %149, ptr @numProbes, align 4, !tbaa !17
  %150 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %151 = add nsw i32 %150, %149
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds %struct.edgebox, ptr %123, i64 %152, i32 1
  store i32 %17, ptr %153, align 4, !tbaa !143
  %154 = load i32, ptr @numProbes, align 4, !tbaa !17
  %155 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %156 = add nsw i32 %155, %154
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds %struct.edgebox, ptr %123, i64 %157, i32 2
  store i32 %66, ptr %158, align 4, !tbaa !144
  %159 = load i32, ptr @numProbes, align 4, !tbaa !17
  %160 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %161 = add nsw i32 %160, %159
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds %struct.edgebox, ptr %123, i64 %162, i32 3
  store i32 %21, ptr %163, align 4, !tbaa !140
  %164 = sub nsw i32 %66, %17
  %165 = load i32, ptr @numProbes, align 4, !tbaa !17
  %166 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %167 = add nsw i32 %166, %165
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds %struct.edgebox, ptr %123, i64 %168, i32 4
  store i32 %164, ptr %169, align 4, !tbaa !501
  %170 = load i32, ptr @numProbes, align 4, !tbaa !17
  %171 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %172 = add nsw i32 %171, %170
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds %struct.edgebox, ptr %123, i64 %173, i32 6
  store i32 0, ptr %174, align 4, !tbaa !147
  %175 = load i32, ptr @numProbes, align 4, !tbaa !17
  %176 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %177 = add nsw i32 %176, %175
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds %struct.edgebox, ptr %123, i64 %178
  store i32 0, ptr %179, align 4, !tbaa !148
  %180 = load i32, ptr @numProbes, align 4, !tbaa !17
  %181 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %182 = add nsw i32 %181, %180
  %183 = sext i32 %182 to i64
  %184 = getelementptr inbounds %struct.edgebox, ptr %123, i64 %183, i32 5
  store i32 1, ptr %184, align 4, !tbaa !142
  %185 = load i32, ptr @numProbes, align 4, !tbaa !17
  %186 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %187 = add nsw i32 %186, %185
  tail call void @tinsert(ptr noundef nonnull @hEdgeRoot, i32 noundef %21, i32 noundef %187) #44
  %188 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %189 = load i32, ptr @numProbes, align 4, !tbaa !17
  %190 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %188, ptr noundef nonnull @.str.330, i32 noundef %189) #43
  %191 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %192 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %191, ptr noundef nonnull @.str.1.331, i32 noundef %17, i32 noundef %66, i32 noundef %21, i32 noundef 1) #43
  %193 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %194 = load i32, ptr @numProbes, align 4, !tbaa !17
  %195 = add nsw i32 %194, 1
  store i32 %195, ptr @numProbes, align 4, !tbaa !17
  %196 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %197 = add nsw i32 %196, %195
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds %struct.edgebox, ptr %193, i64 %198, i32 1
  store i32 %17, ptr %199, align 4, !tbaa !143
  %200 = load i32, ptr @numProbes, align 4, !tbaa !17
  %201 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %202 = add nsw i32 %201, %200
  %203 = sext i32 %202 to i64
  %204 = getelementptr inbounds %struct.edgebox, ptr %193, i64 %203, i32 2
  store i32 %66, ptr %204, align 4, !tbaa !144
  %205 = load i32, ptr @numProbes, align 4, !tbaa !17
  %206 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %207 = add nsw i32 %206, %205
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds %struct.edgebox, ptr %193, i64 %208, i32 3
  store i32 %19, ptr %209, align 4, !tbaa !140
  %210 = load i32, ptr @numProbes, align 4, !tbaa !17
  %211 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %212 = add nsw i32 %211, %210
  %213 = sext i32 %212 to i64
  %214 = getelementptr inbounds %struct.edgebox, ptr %193, i64 %213, i32 4
  store i32 %164, ptr %214, align 4, !tbaa !501
  %215 = load i32, ptr @numProbes, align 4, !tbaa !17
  %216 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %217 = add nsw i32 %216, %215
  %218 = sext i32 %217 to i64
  %219 = getelementptr inbounds %struct.edgebox, ptr %193, i64 %218, i32 6
  store i32 0, ptr %219, align 4, !tbaa !147
  %220 = load i32, ptr @numProbes, align 4, !tbaa !17
  %221 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %222 = add nsw i32 %221, %220
  %223 = sext i32 %222 to i64
  %224 = getelementptr inbounds %struct.edgebox, ptr %193, i64 %223
  store i32 0, ptr %224, align 4, !tbaa !148
  %225 = load i32, ptr @numProbes, align 4, !tbaa !17
  %226 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %227 = add nsw i32 %226, %225
  %228 = sext i32 %227 to i64
  %229 = getelementptr inbounds %struct.edgebox, ptr %193, i64 %228, i32 5
  store i32 -1, ptr %229, align 4, !tbaa !142
  %230 = load i32, ptr @numProbes, align 4, !tbaa !17
  %231 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %232 = add nsw i32 %231, %230
  tail call void @tinsert(ptr noundef nonnull @hEdgeRoot, i32 noundef %19, i32 noundef %232) #44
  %233 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %234 = load i32, ptr @numProbes, align 4, !tbaa !17
  %235 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %233, ptr noundef nonnull @.str.330, i32 noundef %234) #43
  %236 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %237 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %236, ptr noundef nonnull @.str.1.331, i32 noundef %17, i32 noundef %66, i32 noundef %19, i32 noundef -1) #43
  br label %603

238:                                              ; preds = %139
  tail call void @doubleBack(ptr noundef nonnull %4) #43
  br label %603

239:                                              ; preds = %108
  br i1 %112, label %240, label %420

240:                                              ; preds = %239
  %241 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %242 = load i32, ptr %64, align 8, !tbaa !138
  %243 = sext i32 %242 to i64
  %244 = getelementptr inbounds %struct.edgebox, ptr %241, i64 %243, i32 7
  %245 = load i32, ptr %244, align 4, !tbaa !333
  %246 = sext i32 %245 to i64
  %247 = getelementptr inbounds %struct.edgebox, ptr %241, i64 %246, i32 5
  %248 = load i32, ptr %247, align 4, !tbaa !142
  %249 = icmp eq i32 %248, -1
  br i1 %249, label %250, label %420

250:                                              ; preds = %240
  %251 = load ptr, ptr @Vptrs, align 8, !tbaa !7
  %252 = load ptr, ptr @Vroot, align 8, !tbaa !7
  %253 = tail call i32 @tprop(ptr noundef %252, i32 noundef %66) #44
  %254 = sext i32 %253 to i64
  %255 = getelementptr inbounds ptr, ptr %251, i64 %254
  %256 = load ptr, ptr %255, align 8, !tbaa !7
  %257 = load ptr, ptr @edgeList, align 8
  br label %258

258:                                              ; preds = %263, %250
  %259 = phi ptr [ %256, %250 ], [ %261, %263 ]
  %260 = getelementptr inbounds %struct.dlink2, ptr %259, i64 0, i32 2
  %261 = load ptr, ptr %260, align 8, !tbaa !150
  %262 = icmp eq ptr %261, null
  br i1 %262, label %271, label %263

263:                                              ; preds = %258
  %264 = load i32, ptr %261, align 8, !tbaa !138
  %265 = sext i32 %264 to i64
  %266 = getelementptr inbounds %struct.edgebox, ptr %257, i64 %265, i32 3
  %267 = load i32, ptr %266, align 4, !tbaa !140
  %268 = icmp sgt i32 %267, %66
  br i1 %268, label %269, label %258, !llvm.loop !502

269:                                              ; preds = %263
  %.lcssa1 = phi ptr [ %261, %263 ]
  %270 = getelementptr inbounds %struct.dlink2, ptr %.lcssa1, i64 0, i32 1
  br label %271

271:                                              ; preds = %269, %258
  %272 = phi ptr [ %270, %269 ], [ @vFixedEnd, %258 ]
  %273 = load ptr, ptr %272, align 8, !tbaa !7
  %274 = icmp eq ptr %273, null
  br i1 %274, label %294, label %275

275:                                              ; preds = %290, %271
  %276 = phi ptr [ %292, %290 ], [ %273, %271 ]
  %277 = load i32, ptr %276, align 8, !tbaa !138
  %278 = sext i32 %277 to i64
  %279 = getelementptr inbounds %struct.edgebox, ptr %257, i64 %278, i32 5
  %280 = load i32, ptr %279, align 4, !tbaa !142
  %281 = icmp sgt i32 %280, 0
  br i1 %281, label %290, label %282

282:                                              ; preds = %275
  %283 = getelementptr inbounds %struct.edgebox, ptr %257, i64 %278, i32 2
  %284 = load i32, ptr %283, align 4, !tbaa !144
  %285 = icmp sgt i32 %284, %65
  br i1 %285, label %286, label %290

286:                                              ; preds = %282
  %287 = getelementptr inbounds %struct.edgebox, ptr %257, i64 %278, i32 1
  %288 = load i32, ptr %287, align 4, !tbaa !143
  %289 = icmp sgt i32 %288, %65
  br i1 %289, label %290, label %294

290:                                              ; preds = %286, %282, %275
  %291 = getelementptr inbounds %struct.dlink2, ptr %276, i64 0, i32 1
  %292 = load ptr, ptr %291, align 8, !tbaa !7
  %293 = icmp eq ptr %292, null
  br i1 %293, label %294, label %275, !llvm.loop !503

294:                                              ; preds = %290, %286, %271
  %295 = phi ptr [ null, %271 ], [ %276, %286 ], [ null, %290 ]
  %296 = icmp eq ptr %4, %295
  br i1 %296, label %297, label %420

297:                                              ; preds = %294
  %298 = load ptr, ptr @Vptrs, align 8, !tbaa !7
  %299 = load ptr, ptr @Vroot, align 8, !tbaa !7
  %300 = tail call i32 @tprop(ptr noundef %299, i32 noundef %17) #44
  %301 = sext i32 %300 to i64
  %302 = getelementptr inbounds ptr, ptr %298, i64 %301
  %303 = load ptr, ptr %302, align 8, !tbaa !7
  %304 = icmp eq ptr %303, null
  %305 = load ptr, ptr @edgeList, align 8, !tbaa !7
  br i1 %304, label %329, label %306

306:                                              ; preds = %325, %297
  %307 = phi ptr [ %327, %325 ], [ %303, %297 ]
  %308 = load i32, ptr %307, align 8, !tbaa !138
  %309 = sext i32 %308 to i64
  %310 = getelementptr inbounds %struct.edgebox, ptr %305, i64 %309, i32 5
  %311 = load i32, ptr %310, align 4, !tbaa !142
  %312 = icmp slt i32 %311, 0
  br i1 %312, label %325, label %313

313:                                              ; preds = %306
  %314 = getelementptr inbounds %struct.edgebox, ptr %305, i64 %309, i32 3
  %315 = load i32, ptr %314, align 4, !tbaa !140
  %316 = icmp slt i32 %315, %66
  br i1 %316, label %317, label %329

317:                                              ; preds = %313
  %318 = getelementptr inbounds %struct.edgebox, ptr %305, i64 %309, i32 1
  %319 = load i32, ptr %318, align 4, !tbaa !143
  %320 = icmp slt i32 %319, %21
  br i1 %320, label %321, label %325

321:                                              ; preds = %317
  %322 = getelementptr inbounds %struct.edgebox, ptr %305, i64 %309, i32 2
  %323 = load i32, ptr %322, align 4, !tbaa !144
  %324 = icmp sgt i32 %323, %65
  br i1 %324, label %420, label %325

325:                                              ; preds = %321, %317, %306
  %326 = getelementptr inbounds %struct.dlink2, ptr %307, i64 0, i32 2
  %327 = load ptr, ptr %326, align 8, !tbaa !7
  %328 = icmp eq ptr %327, null
  br i1 %328, label %329, label %306, !llvm.loop !504

329:                                              ; preds = %325, %313, %297
  %330 = load i32, ptr @numProbes, align 4, !tbaa !17
  %331 = add nsw i32 %330, 1
  store i32 %331, ptr @numProbes, align 4, !tbaa !17
  %332 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %333 = add nsw i32 %332, %331
  %334 = sext i32 %333 to i64
  %335 = getelementptr inbounds %struct.edgebox, ptr %305, i64 %334, i32 1
  store i32 %17, ptr %335, align 4, !tbaa !143
  %336 = load i32, ptr @numProbes, align 4, !tbaa !17
  %337 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %338 = add nsw i32 %337, %336
  %339 = sext i32 %338 to i64
  %340 = getelementptr inbounds %struct.edgebox, ptr %305, i64 %339, i32 2
  store i32 %66, ptr %340, align 4, !tbaa !144
  %341 = load i32, ptr @numProbes, align 4, !tbaa !17
  %342 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %343 = add nsw i32 %342, %341
  %344 = sext i32 %343 to i64
  %345 = getelementptr inbounds %struct.edgebox, ptr %305, i64 %344, i32 3
  store i32 %21, ptr %345, align 4, !tbaa !140
  %346 = sub nsw i32 %66, %17
  %347 = load i32, ptr @numProbes, align 4, !tbaa !17
  %348 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %349 = add nsw i32 %348, %347
  %350 = sext i32 %349 to i64
  %351 = getelementptr inbounds %struct.edgebox, ptr %305, i64 %350, i32 4
  store i32 %346, ptr %351, align 4, !tbaa !501
  %352 = load i32, ptr @numProbes, align 4, !tbaa !17
  %353 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %354 = add nsw i32 %353, %352
  %355 = sext i32 %354 to i64
  %356 = getelementptr inbounds %struct.edgebox, ptr %305, i64 %355, i32 6
  store i32 0, ptr %356, align 4, !tbaa !147
  %357 = load i32, ptr @numProbes, align 4, !tbaa !17
  %358 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %359 = add nsw i32 %358, %357
  %360 = sext i32 %359 to i64
  %361 = getelementptr inbounds %struct.edgebox, ptr %305, i64 %360
  store i32 0, ptr %361, align 4, !tbaa !148
  %362 = load i32, ptr @numProbes, align 4, !tbaa !17
  %363 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %364 = add nsw i32 %363, %362
  %365 = sext i32 %364 to i64
  %366 = getelementptr inbounds %struct.edgebox, ptr %305, i64 %365, i32 5
  store i32 1, ptr %366, align 4, !tbaa !142
  %367 = load i32, ptr @numProbes, align 4, !tbaa !17
  %368 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %369 = add nsw i32 %368, %367
  tail call void @tinsert(ptr noundef nonnull @hEdgeRoot, i32 noundef %21, i32 noundef %369) #44
  %370 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %371 = load i32, ptr @numProbes, align 4, !tbaa !17
  %372 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %370, ptr noundef nonnull @.str.330, i32 noundef %371) #43
  %373 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %374 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %373, ptr noundef nonnull @.str.1.331, i32 noundef %17, i32 noundef %66, i32 noundef %21, i32 noundef 1) #43
  %375 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %376 = load i32, ptr @numProbes, align 4, !tbaa !17
  %377 = add nsw i32 %376, 1
  store i32 %377, ptr @numProbes, align 4, !tbaa !17
  %378 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %379 = add nsw i32 %378, %377
  %380 = sext i32 %379 to i64
  %381 = getelementptr inbounds %struct.edgebox, ptr %375, i64 %380, i32 1
  store i32 %17, ptr %381, align 4, !tbaa !143
  %382 = load i32, ptr @numProbes, align 4, !tbaa !17
  %383 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %384 = add nsw i32 %383, %382
  %385 = sext i32 %384 to i64
  %386 = getelementptr inbounds %struct.edgebox, ptr %375, i64 %385, i32 2
  store i32 %66, ptr %386, align 4, !tbaa !144
  %387 = load i32, ptr @numProbes, align 4, !tbaa !17
  %388 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %389 = add nsw i32 %388, %387
  %390 = sext i32 %389 to i64
  %391 = getelementptr inbounds %struct.edgebox, ptr %375, i64 %390, i32 3
  store i32 %65, ptr %391, align 4, !tbaa !140
  %392 = load i32, ptr @numProbes, align 4, !tbaa !17
  %393 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %394 = add nsw i32 %393, %392
  %395 = sext i32 %394 to i64
  %396 = getelementptr inbounds %struct.edgebox, ptr %375, i64 %395, i32 4
  store i32 %346, ptr %396, align 4, !tbaa !501
  %397 = load i32, ptr @numProbes, align 4, !tbaa !17
  %398 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %399 = add nsw i32 %398, %397
  %400 = sext i32 %399 to i64
  %401 = getelementptr inbounds %struct.edgebox, ptr %375, i64 %400, i32 6
  store i32 0, ptr %401, align 4, !tbaa !147
  %402 = load i32, ptr @numProbes, align 4, !tbaa !17
  %403 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %404 = add nsw i32 %403, %402
  %405 = sext i32 %404 to i64
  %406 = getelementptr inbounds %struct.edgebox, ptr %375, i64 %405
  store i32 0, ptr %406, align 4, !tbaa !148
  %407 = load i32, ptr @numProbes, align 4, !tbaa !17
  %408 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %409 = add nsw i32 %408, %407
  %410 = sext i32 %409 to i64
  %411 = getelementptr inbounds %struct.edgebox, ptr %375, i64 %410, i32 5
  store i32 -1, ptr %411, align 4, !tbaa !142
  %412 = load i32, ptr @numProbes, align 4, !tbaa !17
  %413 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %414 = add nsw i32 %413, %412
  tail call void @tinsert(ptr noundef nonnull @hEdgeRoot, i32 noundef %65, i32 noundef %414) #44
  %415 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %416 = load i32, ptr @numProbes, align 4, !tbaa !17
  %417 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %415, ptr noundef nonnull @.str.330, i32 noundef %416) #43
  %418 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %419 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %418, ptr noundef nonnull @.str.1.331, i32 noundef %17, i32 noundef %66, i32 noundef %65, i32 noundef -1) #43
  br label %420

420:                                              ; preds = %329, %321, %294, %240, %239
  %421 = icmp eq ptr %110, null
  br i1 %421, label %602, label %422

422:                                              ; preds = %420
  %423 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %424 = load i32, ptr %110, align 8, !tbaa !138
  %425 = sext i32 %424 to i64
  %426 = getelementptr inbounds %struct.edgebox, ptr %423, i64 %425, i32 8
  %427 = load i32, ptr %426, align 4, !tbaa !332
  %428 = sext i32 %427 to i64
  %429 = getelementptr inbounds %struct.edgebox, ptr %423, i64 %428, i32 5
  %430 = load i32, ptr %429, align 4, !tbaa !142
  %431 = icmp eq i32 %430, 1
  br i1 %431, label %432, label %602

432:                                              ; preds = %422
  %433 = load ptr, ptr @Vptrs, align 8, !tbaa !7
  %434 = load ptr, ptr @Vroot, align 8, !tbaa !7
  %435 = tail call i32 @tprop(ptr noundef %434, i32 noundef %111) #44
  %436 = sext i32 %435 to i64
  %437 = getelementptr inbounds ptr, ptr %433, i64 %436
  %438 = load ptr, ptr %437, align 8, !tbaa !7
  %439 = load ptr, ptr @edgeList, align 8
  br label %440

440:                                              ; preds = %445, %432
  %441 = phi ptr [ %438, %432 ], [ %443, %445 ]
  %442 = getelementptr inbounds %struct.dlink2, ptr %441, i64 0, i32 2
  %443 = load ptr, ptr %442, align 8, !tbaa !150
  %444 = icmp eq ptr %443, null
  br i1 %444, label %453, label %445

445:                                              ; preds = %440
  %446 = load i32, ptr %443, align 8, !tbaa !138
  %447 = sext i32 %446 to i64
  %448 = getelementptr inbounds %struct.edgebox, ptr %439, i64 %447, i32 3
  %449 = load i32, ptr %448, align 4, !tbaa !140
  %450 = icmp sgt i32 %449, %111
  br i1 %450, label %451, label %440, !llvm.loop !505

451:                                              ; preds = %445
  %.lcssa2 = phi ptr [ %443, %445 ]
  %452 = getelementptr inbounds %struct.dlink2, ptr %.lcssa2, i64 0, i32 1
  br label %453

453:                                              ; preds = %451, %440
  %454 = phi ptr [ %452, %451 ], [ @vFixedEnd, %440 ]
  %455 = load ptr, ptr %454, align 8, !tbaa !7
  %456 = icmp eq ptr %455, null
  br i1 %456, label %476, label %457

457:                                              ; preds = %472, %453
  %458 = phi ptr [ %474, %472 ], [ %455, %453 ]
  %459 = load i32, ptr %458, align 8, !tbaa !138
  %460 = sext i32 %459 to i64
  %461 = getelementptr inbounds %struct.edgebox, ptr %439, i64 %460, i32 5
  %462 = load i32, ptr %461, align 4, !tbaa !142
  %463 = icmp sgt i32 %462, 0
  br i1 %463, label %472, label %464

464:                                              ; preds = %457
  %465 = getelementptr inbounds %struct.edgebox, ptr %439, i64 %460, i32 2
  %466 = load i32, ptr %465, align 4, !tbaa !144
  %467 = icmp slt i32 %466, %109
  br i1 %467, label %472, label %468

468:                                              ; preds = %464
  %469 = getelementptr inbounds %struct.edgebox, ptr %439, i64 %460, i32 1
  %470 = load i32, ptr %469, align 4, !tbaa !143
  %471 = icmp slt i32 %470, %109
  br i1 %471, label %476, label %472

472:                                              ; preds = %468, %464, %457
  %473 = getelementptr inbounds %struct.dlink2, ptr %458, i64 0, i32 1
  %474 = load ptr, ptr %473, align 8, !tbaa !7
  %475 = icmp eq ptr %474, null
  br i1 %475, label %476, label %457, !llvm.loop !506

476:                                              ; preds = %472, %468, %453
  %477 = phi ptr [ null, %453 ], [ %458, %468 ], [ null, %472 ]
  %478 = icmp eq ptr %4, %477
  br i1 %478, label %479, label %602

479:                                              ; preds = %476
  %480 = load ptr, ptr @Vptrs, align 8, !tbaa !7
  %481 = load ptr, ptr @Vroot, align 8, !tbaa !7
  %482 = tail call i32 @tprop(ptr noundef %481, i32 noundef %17) #44
  %483 = sext i32 %482 to i64
  %484 = getelementptr inbounds ptr, ptr %480, i64 %483
  %485 = load ptr, ptr %484, align 8, !tbaa !7
  %486 = icmp eq ptr %485, null
  %487 = load ptr, ptr @edgeList, align 8, !tbaa !7
  br i1 %486, label %511, label %488

488:                                              ; preds = %507, %479
  %489 = phi ptr [ %509, %507 ], [ %485, %479 ]
  %490 = load i32, ptr %489, align 8, !tbaa !138
  %491 = sext i32 %490 to i64
  %492 = getelementptr inbounds %struct.edgebox, ptr %487, i64 %491, i32 5
  %493 = load i32, ptr %492, align 4, !tbaa !142
  %494 = icmp slt i32 %493, 0
  br i1 %494, label %507, label %495

495:                                              ; preds = %488
  %496 = getelementptr inbounds %struct.edgebox, ptr %487, i64 %491, i32 3
  %497 = load i32, ptr %496, align 4, !tbaa !140
  %498 = icmp slt i32 %497, %111
  br i1 %498, label %499, label %511

499:                                              ; preds = %495
  %500 = getelementptr inbounds %struct.edgebox, ptr %487, i64 %491, i32 1
  %501 = load i32, ptr %500, align 4, !tbaa !143
  %502 = icmp slt i32 %501, %109
  br i1 %502, label %503, label %507

503:                                              ; preds = %499
  %504 = getelementptr inbounds %struct.edgebox, ptr %487, i64 %491, i32 2
  %505 = load i32, ptr %504, align 4, !tbaa !144
  %506 = icmp sgt i32 %505, %19
  br i1 %506, label %602, label %507

507:                                              ; preds = %503, %499, %488
  %508 = getelementptr inbounds %struct.dlink2, ptr %489, i64 0, i32 2
  %509 = load ptr, ptr %508, align 8, !tbaa !7
  %510 = icmp eq ptr %509, null
  br i1 %510, label %511, label %488, !llvm.loop !507

511:                                              ; preds = %507, %495, %479
  %512 = load i32, ptr @numProbes, align 4, !tbaa !17
  %513 = add nsw i32 %512, 1
  store i32 %513, ptr @numProbes, align 4, !tbaa !17
  %514 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %515 = add nsw i32 %514, %513
  %516 = sext i32 %515 to i64
  %517 = getelementptr inbounds %struct.edgebox, ptr %487, i64 %516, i32 1
  store i32 %17, ptr %517, align 4, !tbaa !143
  %518 = load i32, ptr @numProbes, align 4, !tbaa !17
  %519 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %520 = add nsw i32 %519, %518
  %521 = sext i32 %520 to i64
  %522 = getelementptr inbounds %struct.edgebox, ptr %487, i64 %521, i32 2
  store i32 %111, ptr %522, align 4, !tbaa !144
  %523 = load i32, ptr @numProbes, align 4, !tbaa !17
  %524 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %525 = add nsw i32 %524, %523
  %526 = sext i32 %525 to i64
  %527 = getelementptr inbounds %struct.edgebox, ptr %487, i64 %526, i32 3
  store i32 %109, ptr %527, align 4, !tbaa !140
  %528 = sub nsw i32 %111, %17
  %529 = load i32, ptr @numProbes, align 4, !tbaa !17
  %530 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %531 = add nsw i32 %530, %529
  %532 = sext i32 %531 to i64
  %533 = getelementptr inbounds %struct.edgebox, ptr %487, i64 %532, i32 4
  store i32 %528, ptr %533, align 4, !tbaa !501
  %534 = load i32, ptr @numProbes, align 4, !tbaa !17
  %535 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %536 = add nsw i32 %535, %534
  %537 = sext i32 %536 to i64
  %538 = getelementptr inbounds %struct.edgebox, ptr %487, i64 %537, i32 6
  store i32 0, ptr %538, align 4, !tbaa !147
  %539 = load i32, ptr @numProbes, align 4, !tbaa !17
  %540 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %541 = add nsw i32 %540, %539
  %542 = sext i32 %541 to i64
  %543 = getelementptr inbounds %struct.edgebox, ptr %487, i64 %542
  store i32 0, ptr %543, align 4, !tbaa !148
  %544 = load i32, ptr @numProbes, align 4, !tbaa !17
  %545 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %546 = add nsw i32 %545, %544
  %547 = sext i32 %546 to i64
  %548 = getelementptr inbounds %struct.edgebox, ptr %487, i64 %547, i32 5
  store i32 1, ptr %548, align 4, !tbaa !142
  %549 = load i32, ptr @numProbes, align 4, !tbaa !17
  %550 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %551 = add nsw i32 %550, %549
  tail call void @tinsert(ptr noundef nonnull @hEdgeRoot, i32 noundef %109, i32 noundef %551) #44
  %552 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %553 = load i32, ptr @numProbes, align 4, !tbaa !17
  %554 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %552, ptr noundef nonnull @.str.330, i32 noundef %553) #43
  %555 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %556 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %555, ptr noundef nonnull @.str.1.331, i32 noundef %17, i32 noundef %111, i32 noundef %109, i32 noundef 1) #43
  %557 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %558 = load i32, ptr @numProbes, align 4, !tbaa !17
  %559 = add nsw i32 %558, 1
  store i32 %559, ptr @numProbes, align 4, !tbaa !17
  %560 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %561 = add nsw i32 %560, %559
  %562 = sext i32 %561 to i64
  %563 = getelementptr inbounds %struct.edgebox, ptr %557, i64 %562, i32 1
  store i32 %17, ptr %563, align 4, !tbaa !143
  %564 = load i32, ptr @numProbes, align 4, !tbaa !17
  %565 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %566 = add nsw i32 %565, %564
  %567 = sext i32 %566 to i64
  %568 = getelementptr inbounds %struct.edgebox, ptr %557, i64 %567, i32 2
  store i32 %111, ptr %568, align 4, !tbaa !144
  %569 = load i32, ptr @numProbes, align 4, !tbaa !17
  %570 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %571 = add nsw i32 %570, %569
  %572 = sext i32 %571 to i64
  %573 = getelementptr inbounds %struct.edgebox, ptr %557, i64 %572, i32 3
  store i32 %19, ptr %573, align 4, !tbaa !140
  %574 = load i32, ptr @numProbes, align 4, !tbaa !17
  %575 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %576 = add nsw i32 %575, %574
  %577 = sext i32 %576 to i64
  %578 = getelementptr inbounds %struct.edgebox, ptr %557, i64 %577, i32 4
  store i32 %528, ptr %578, align 4, !tbaa !501
  %579 = load i32, ptr @numProbes, align 4, !tbaa !17
  %580 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %581 = add nsw i32 %580, %579
  %582 = sext i32 %581 to i64
  %583 = getelementptr inbounds %struct.edgebox, ptr %557, i64 %582, i32 6
  store i32 0, ptr %583, align 4, !tbaa !147
  %584 = load i32, ptr @numProbes, align 4, !tbaa !17
  %585 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %586 = add nsw i32 %585, %584
  %587 = sext i32 %586 to i64
  %588 = getelementptr inbounds %struct.edgebox, ptr %557, i64 %587
  store i32 0, ptr %588, align 4, !tbaa !148
  %589 = load i32, ptr @numProbes, align 4, !tbaa !17
  %590 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %591 = add nsw i32 %590, %589
  %592 = sext i32 %591 to i64
  %593 = getelementptr inbounds %struct.edgebox, ptr %557, i64 %592, i32 5
  store i32 -1, ptr %593, align 4, !tbaa !142
  %594 = load i32, ptr @numProbes, align 4, !tbaa !17
  %595 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %596 = add nsw i32 %595, %594
  tail call void @tinsert(ptr noundef nonnull @hEdgeRoot, i32 noundef %19, i32 noundef %596) #44
  %597 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %598 = load i32, ptr @numProbes, align 4, !tbaa !17
  %599 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %597, ptr noundef nonnull @.str.330, i32 noundef %598) #43
  %600 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %601 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %600, ptr noundef nonnull @.str.1.331, i32 noundef %17, i32 noundef %111, i32 noundef %19, i32 noundef -1) #43
  br label %602

602:                                              ; preds = %511, %503, %476, %422, %420
  tail call void @doubleBack(ptr noundef nonnull %4) #43
  br label %603

603:                                              ; preds = %602, %238, %147, %3
  %604 = phi i32 [ %8, %3 ], [ %109, %147 ], [ %109, %238 ], [ %109, %602 ]
  %605 = phi i32 [ %7, %3 ], [ %111, %147 ], [ %111, %238 ], [ %111, %602 ]
  %606 = phi i32 [ %6, %3 ], [ %65, %147 ], [ %65, %238 ], [ %65, %602 ]
  %607 = phi i32 [ %5, %3 ], [ %66, %147 ], [ %66, %238 ], [ %66, %602 ]
  %608 = getelementptr inbounds %struct.dlink2, ptr %4, i64 0, i32 2
  %609 = load ptr, ptr %608, align 8, !tbaa !7
  %610 = icmp eq ptr %609, null
  br i1 %610, label %611, label %3, !llvm.loop !508

611:                                              ; preds = %603, %0
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @doubleBack(ptr noundef readonly %0) #0 {
  %2 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %3 = load i32, ptr %0, align 8, !tbaa !138
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds %struct.edgebox, ptr %2, i64 %4, i32 3
  %6 = load i32, ptr %5, align 4, !tbaa !140
  %7 = getelementptr inbounds %struct.edgebox, ptr %2, i64 %4, i32 2
  %8 = load i32, ptr %7, align 4, !tbaa !144
  %9 = getelementptr inbounds %struct.edgebox, ptr %2, i64 %4, i32 1
  %10 = load i32, ptr %9, align 4, !tbaa !143
  %11 = load ptr, ptr @Vptrs, align 8, !tbaa !7
  %12 = load ptr, ptr @Vroot, align 8, !tbaa !7
  %13 = tail call i32 @tprop(ptr noundef %12, i32 noundef %6) #44
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds ptr, ptr %11, i64 %14
  %16 = load ptr, ptr %15, align 8, !tbaa !7
  %17 = icmp eq ptr %16, null
  br i1 %17, label %179, label %18

18:                                               ; preds = %1
  %19 = load ptr, ptr @edgeList, align 8, !tbaa !7
  br label %20

20:                                               ; preds = %174, %18
  %21 = phi ptr [ %175, %174 ], [ %19, %18 ]
  %22 = phi ptr [ %177, %174 ], [ %16, %18 ]
  %23 = load i32, ptr %22, align 8, !tbaa !138
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds %struct.edgebox, ptr %21, i64 %24, i32 5
  %26 = load i32, ptr %25, align 4, !tbaa !142
  %27 = icmp slt i32 %26, 0
  br i1 %27, label %174, label %28

28:                                               ; preds = %20
  %29 = getelementptr inbounds %struct.edgebox, ptr %21, i64 %24, i32 3
  %30 = load i32, ptr %29, align 4, !tbaa !140
  %31 = getelementptr inbounds %struct.edgebox, ptr %21, i64 %24, i32 1
  %32 = load i32, ptr %31, align 4, !tbaa !143
  %33 = getelementptr inbounds %struct.edgebox, ptr %21, i64 %24, i32 2
  %34 = load i32, ptr %33, align 4, !tbaa !144
  %35 = icmp slt i32 %34, %8
  %36 = icmp sgt i32 %32, %10
  %37 = select i1 %35, i1 %36, i1 false
  br i1 %37, label %38, label %174

38:                                               ; preds = %28
  %39 = getelementptr inbounds %struct.edgebox, ptr %21, i64 %24, i32 7
  %40 = load i32, ptr %39, align 4, !tbaa !333
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds %struct.edgebox, ptr %21, i64 %41, i32 5
  %43 = load i32, ptr %42, align 4, !tbaa !142
  %44 = icmp eq i32 %43, -1
  br i1 %44, label %45, label %174

45:                                               ; preds = %38
  %46 = getelementptr inbounds %struct.edgebox, ptr %21, i64 %24, i32 8
  %47 = load i32, ptr %46, align 4, !tbaa !332
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds %struct.edgebox, ptr %21, i64 %48, i32 5
  %50 = load i32, ptr %49, align 4, !tbaa !142
  %51 = icmp eq i32 %50, 1
  br i1 %51, label %52, label %174

52:                                               ; preds = %45
  %53 = load ptr, ptr @Vptrs, align 8, !tbaa !7
  %54 = load ptr, ptr @Vroot, align 8, !tbaa !7
  %55 = tail call i32 @tprop(ptr noundef %54, i32 noundef %6) #44
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds ptr, ptr %53, i64 %56
  %58 = load ptr, ptr %57, align 8, !tbaa !7
  %59 = icmp eq ptr %58, null
  %60 = load ptr, ptr @edgeList, align 8
  br i1 %59, label %86, label %61

61:                                               ; preds = %82, %52
  %62 = phi ptr [ %84, %82 ], [ %58, %52 ]
  %63 = icmp eq ptr %62, %0
  br i1 %63, label %82, label %64

64:                                               ; preds = %61
  %65 = load i32, ptr %62, align 8, !tbaa !138
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds %struct.edgebox, ptr %60, i64 %66, i32 5
  %68 = load i32, ptr %67, align 4, !tbaa !142
  %69 = icmp sgt i32 %68, 0
  br i1 %69, label %82, label %70

70:                                               ; preds = %64
  %71 = getelementptr inbounds %struct.edgebox, ptr %60, i64 %66, i32 3
  %72 = load i32, ptr %71, align 4, !tbaa !140
  %73 = icmp sgt i32 %72, %30
  br i1 %73, label %86, label %74

74:                                               ; preds = %70
  %75 = getelementptr inbounds %struct.edgebox, ptr %60, i64 %66, i32 1
  %76 = load i32, ptr %75, align 4, !tbaa !143
  %77 = icmp slt i32 %76, %34
  br i1 %77, label %78, label %82

78:                                               ; preds = %74
  %79 = getelementptr inbounds %struct.edgebox, ptr %60, i64 %66, i32 2
  %80 = load i32, ptr %79, align 4, !tbaa !144
  %81 = icmp sgt i32 %80, %32
  br i1 %81, label %174, label %82

82:                                               ; preds = %78, %74, %64, %61
  %83 = getelementptr inbounds %struct.dlink2, ptr %62, i64 0, i32 2
  %84 = load ptr, ptr %83, align 8, !tbaa !7
  %85 = icmp eq ptr %84, null
  br i1 %85, label %86, label %61, !llvm.loop !509

86:                                               ; preds = %82, %70, %52
  %87 = load i32, ptr @numProbes, align 4, !tbaa !17
  %88 = add nsw i32 %87, 1
  store i32 %88, ptr @numProbes, align 4, !tbaa !17
  %89 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %90 = add nsw i32 %89, %88
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds %struct.edgebox, ptr %60, i64 %91, i32 1
  store i32 %6, ptr %92, align 4, !tbaa !143
  %93 = load i32, ptr @numProbes, align 4, !tbaa !17
  %94 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %95 = add nsw i32 %94, %93
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds %struct.edgebox, ptr %60, i64 %96, i32 2
  store i32 %30, ptr %97, align 4, !tbaa !144
  %98 = load i32, ptr @numProbes, align 4, !tbaa !17
  %99 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %100 = add nsw i32 %99, %98
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds %struct.edgebox, ptr %60, i64 %101, i32 3
  store i32 %34, ptr %102, align 4, !tbaa !140
  %103 = sub nsw i32 %30, %6
  %104 = load i32, ptr @numProbes, align 4, !tbaa !17
  %105 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %106 = add nsw i32 %105, %104
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds %struct.edgebox, ptr %60, i64 %107, i32 4
  store i32 %103, ptr %108, align 4, !tbaa !501
  %109 = load i32, ptr @numProbes, align 4, !tbaa !17
  %110 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %111 = add nsw i32 %110, %109
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds %struct.edgebox, ptr %60, i64 %112, i32 6
  store i32 0, ptr %113, align 4, !tbaa !147
  %114 = load i32, ptr @numProbes, align 4, !tbaa !17
  %115 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %116 = add nsw i32 %115, %114
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds %struct.edgebox, ptr %60, i64 %117
  store i32 0, ptr %118, align 4, !tbaa !148
  %119 = load i32, ptr @numProbes, align 4, !tbaa !17
  %120 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %121 = add nsw i32 %120, %119
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds %struct.edgebox, ptr %60, i64 %122, i32 5
  store i32 1, ptr %123, align 4, !tbaa !142
  %124 = load i32, ptr @numProbes, align 4, !tbaa !17
  %125 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %126 = add nsw i32 %125, %124
  tail call void @tinsert(ptr noundef nonnull @hEdgeRoot, i32 noundef %34, i32 noundef %126) #44
  %127 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %128 = load i32, ptr @numProbes, align 4, !tbaa !17
  %129 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %127, ptr noundef nonnull @.str.2.332, i32 noundef %128, i32 noundef %6, i32 noundef %30, i32 noundef %34, i32 noundef 1) #43
  %130 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %131 = load i32, ptr @numProbes, align 4, !tbaa !17
  %132 = add nsw i32 %131, 1
  store i32 %132, ptr @numProbes, align 4, !tbaa !17
  %133 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %134 = add nsw i32 %133, %132
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds %struct.edgebox, ptr %130, i64 %135, i32 1
  store i32 %6, ptr %136, align 4, !tbaa !143
  %137 = load i32, ptr @numProbes, align 4, !tbaa !17
  %138 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %139 = add nsw i32 %138, %137
  %140 = sext i32 %139 to i64
  %141 = getelementptr inbounds %struct.edgebox, ptr %130, i64 %140, i32 2
  store i32 %30, ptr %141, align 4, !tbaa !144
  %142 = load i32, ptr @numProbes, align 4, !tbaa !17
  %143 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %144 = add nsw i32 %143, %142
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds %struct.edgebox, ptr %130, i64 %145, i32 3
  store i32 %32, ptr %146, align 4, !tbaa !140
  %147 = load i32, ptr @numProbes, align 4, !tbaa !17
  %148 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %149 = add nsw i32 %148, %147
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds %struct.edgebox, ptr %130, i64 %150, i32 4
  store i32 %103, ptr %151, align 4, !tbaa !501
  %152 = load i32, ptr @numProbes, align 4, !tbaa !17
  %153 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %154 = add nsw i32 %153, %152
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds %struct.edgebox, ptr %130, i64 %155, i32 6
  store i32 0, ptr %156, align 4, !tbaa !147
  %157 = load i32, ptr @numProbes, align 4, !tbaa !17
  %158 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %159 = add nsw i32 %158, %157
  %160 = sext i32 %159 to i64
  %161 = getelementptr inbounds %struct.edgebox, ptr %130, i64 %160
  store i32 0, ptr %161, align 4, !tbaa !148
  %162 = load i32, ptr @numProbes, align 4, !tbaa !17
  %163 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %164 = add nsw i32 %163, %162
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds %struct.edgebox, ptr %130, i64 %165, i32 5
  store i32 -1, ptr %166, align 4, !tbaa !142
  %167 = load i32, ptr @numProbes, align 4, !tbaa !17
  %168 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %169 = add nsw i32 %168, %167
  tail call void @tinsert(ptr noundef nonnull @hEdgeRoot, i32 noundef %32, i32 noundef %169) #44
  %170 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %171 = load i32, ptr @numProbes, align 4, !tbaa !17
  %172 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %170, ptr noundef nonnull @.str.2.332, i32 noundef %171, i32 noundef %6, i32 noundef %30, i32 noundef %32, i32 noundef -1) #43
  %173 = load ptr, ptr @edgeList, align 8, !tbaa !7
  br label %174

174:                                              ; preds = %86, %78, %45, %38, %28, %20
  %175 = phi ptr [ %21, %45 ], [ %21, %38 ], [ %173, %86 ], [ %21, %28 ], [ %21, %20 ], [ %60, %78 ]
  %176 = getelementptr inbounds %struct.dlink2, ptr %22, i64 0, i32 2
  %177 = load ptr, ptr %176, align 8, !tbaa !7
  %178 = icmp eq ptr %177, null
  br i1 %178, label %179, label %20, !llvm.loop !510

179:                                              ; preds = %174, %1
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, argmem: read, inaccessiblemem: none) uwtable
define internal i32 @deltaBB(i32 noundef %0, i32 noundef %1, i32 noundef %2) #18 {
  %4 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %5 = sext i32 %0 to i64
  %6 = getelementptr inbounds ptr, ptr %4, i64 %5
  %7 = load ptr, ptr %6, align 8, !tbaa !7
  %8 = getelementptr inbounds %struct.cellbox, ptr %7, i64 0, i32 2
  %9 = load i32, ptr %8, align 4, !tbaa !164
  %10 = getelementptr inbounds %struct.cellbox, ptr %7, i64 0, i32 3
  %11 = load i32, ptr %10, align 8, !tbaa !165
  %12 = getelementptr inbounds %struct.cellbox, ptr %7, i64 0, i32 5
  %13 = load i32, ptr %12, align 8, !tbaa !45
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds %struct.cellbox, ptr %7, i64 0, i32 21, i64 %14
  %16 = load ptr, ptr %15, align 8, !tbaa !7
  %17 = getelementptr inbounds %struct.tilebox, ptr %16, i64 0, i32 9
  %18 = load i32, ptr %17, align 8, !tbaa !167
  %19 = add nsw i32 %18, %9
  %20 = getelementptr inbounds %struct.tilebox, ptr %16, i64 0, i32 10
  %21 = load i32, ptr %20, align 4, !tbaa !168
  %22 = add nsw i32 %21, %9
  %23 = getelementptr inbounds %struct.tilebox, ptr %16, i64 0, i32 11
  %24 = load i32, ptr %23, align 8, !tbaa !169
  %25 = add nsw i32 %24, %11
  %26 = getelementptr inbounds %struct.tilebox, ptr %16, i64 0, i32 12
  %27 = load i32, ptr %26, align 4, !tbaa !170
  %28 = add nsw i32 %27, %11
  %29 = load i32, ptr @bbleft, align 4, !tbaa !17
  %30 = icmp eq i32 %19, %29
  br i1 %30, label %31, label %64

31:                                               ; preds = %3
  store i32 1000000, ptr @bbbl, align 4, !tbaa !17
  %32 = load i32, ptr @numcells, align 4, !tbaa !17
  %33 = icmp slt i32 %32, 1
  br i1 %33, label %61, label %34

34:                                               ; preds = %31
  %35 = zext i32 %0 to i64
  %36 = add nuw i32 %32, 1
  %37 = zext i32 %36 to i64
  br label %38

38:                                               ; preds = %57, %34
  %39 = phi i64 [ 1, %34 ], [ %59, %57 ]
  %40 = phi i32 [ 1000000, %34 ], [ %58, %57 ]
  %41 = icmp eq i64 %39, %35
  br i1 %41, label %57, label %42

42:                                               ; preds = %38
  %43 = getelementptr inbounds ptr, ptr %4, i64 %39
  %44 = load ptr, ptr %43, align 8, !tbaa !7
  %45 = getelementptr inbounds %struct.cellbox, ptr %44, i64 0, i32 2
  %46 = load i32, ptr %45, align 4, !tbaa !164
  %47 = getelementptr inbounds %struct.cellbox, ptr %44, i64 0, i32 5
  %48 = load i32, ptr %47, align 8, !tbaa !45
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds %struct.cellbox, ptr %44, i64 0, i32 21, i64 %49
  %51 = load ptr, ptr %50, align 8, !tbaa !7
  %52 = getelementptr inbounds %struct.tilebox, ptr %51, i64 0, i32 9
  %53 = load i32, ptr %52, align 8, !tbaa !167
  %54 = add nsw i32 %53, %46
  %55 = icmp slt i32 %54, %40
  br i1 %55, label %56, label %57

56:                                               ; preds = %42
  store i32 %54, ptr @bbbl, align 4, !tbaa !17
  br label %57

57:                                               ; preds = %56, %42, %38
  %58 = phi i32 [ %40, %42 ], [ %54, %56 ], [ %40, %38 ]
  %59 = add nuw nsw i64 %39, 1
  %60 = icmp eq i64 %59, %37
  br i1 %60, label %61, label %38, !llvm.loop !511

61:                                               ; preds = %57, %31
  %62 = phi i32 [ 1000000, %31 ], [ %58, %57 ]
  %63 = sub i32 %19, %62
  br label %65

64:                                               ; preds = %3
  store i32 %29, ptr @bbbl, align 4, !tbaa !17
  br label %65

65:                                               ; preds = %64, %61
  %66 = phi i32 [ %62, %61 ], [ %29, %64 ]
  %67 = phi i32 [ %63, %61 ], [ 0, %64 ]
  %68 = load i32, ptr @bbright, align 4, !tbaa !17
  %69 = icmp eq i32 %22, %68
  br i1 %69, label %70, label %104

70:                                               ; preds = %65
  store i32 0, ptr @bbbr, align 4, !tbaa !17
  %71 = load i32, ptr @numcells, align 4, !tbaa !17
  %72 = icmp slt i32 %71, 1
  br i1 %72, label %100, label %73

73:                                               ; preds = %70
  %74 = zext i32 %0 to i64
  %75 = add nuw i32 %71, 1
  %76 = zext i32 %75 to i64
  br label %77

77:                                               ; preds = %96, %73
  %78 = phi i64 [ 1, %73 ], [ %98, %96 ]
  %79 = phi i32 [ 0, %73 ], [ %97, %96 ]
  %80 = icmp eq i64 %78, %74
  br i1 %80, label %96, label %81

81:                                               ; preds = %77
  %82 = getelementptr inbounds ptr, ptr %4, i64 %78
  %83 = load ptr, ptr %82, align 8, !tbaa !7
  %84 = getelementptr inbounds %struct.cellbox, ptr %83, i64 0, i32 2
  %85 = load i32, ptr %84, align 4, !tbaa !164
  %86 = getelementptr inbounds %struct.cellbox, ptr %83, i64 0, i32 5
  %87 = load i32, ptr %86, align 8, !tbaa !45
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds %struct.cellbox, ptr %83, i64 0, i32 21, i64 %88
  %90 = load ptr, ptr %89, align 8, !tbaa !7
  %91 = getelementptr inbounds %struct.tilebox, ptr %90, i64 0, i32 10
  %92 = load i32, ptr %91, align 4, !tbaa !168
  %93 = add nsw i32 %92, %85
  %94 = icmp sgt i32 %93, %79
  br i1 %94, label %95, label %96

95:                                               ; preds = %81
  store i32 %93, ptr @bbbr, align 4, !tbaa !17
  br label %96

96:                                               ; preds = %95, %81, %77
  %97 = phi i32 [ %79, %81 ], [ %93, %95 ], [ %79, %77 ]
  %98 = add nuw nsw i64 %78, 1
  %99 = icmp eq i64 %98, %76
  br i1 %99, label %100, label %77, !llvm.loop !512

100:                                              ; preds = %96, %70
  %101 = phi i32 [ 0, %70 ], [ %97, %96 ]
  %102 = sub i32 %67, %22
  %103 = add i32 %102, %101
  br label %105

104:                                              ; preds = %65
  store i32 %68, ptr @bbbr, align 4, !tbaa !17
  br label %105

105:                                              ; preds = %104, %100
  %106 = phi i32 [ %101, %100 ], [ %68, %104 ]
  %107 = phi i32 [ %103, %100 ], [ %67, %104 ]
  %108 = load i32, ptr @bbbottom, align 4, !tbaa !17
  %109 = icmp eq i32 %25, %108
  br i1 %109, label %110, label %144

110:                                              ; preds = %105
  store i32 1000000, ptr @bbbb, align 4, !tbaa !17
  %111 = load i32, ptr @numcells, align 4, !tbaa !17
  %112 = icmp slt i32 %111, 1
  br i1 %112, label %140, label %113

113:                                              ; preds = %110
  %114 = zext i32 %0 to i64
  %115 = add nuw i32 %111, 1
  %116 = zext i32 %115 to i64
  br label %117

117:                                              ; preds = %136, %113
  %118 = phi i64 [ 1, %113 ], [ %138, %136 ]
  %119 = phi i32 [ 1000000, %113 ], [ %137, %136 ]
  %120 = icmp eq i64 %118, %114
  br i1 %120, label %136, label %121

121:                                              ; preds = %117
  %122 = getelementptr inbounds ptr, ptr %4, i64 %118
  %123 = load ptr, ptr %122, align 8, !tbaa !7
  %124 = getelementptr inbounds %struct.cellbox, ptr %123, i64 0, i32 3
  %125 = load i32, ptr %124, align 8, !tbaa !165
  %126 = getelementptr inbounds %struct.cellbox, ptr %123, i64 0, i32 5
  %127 = load i32, ptr %126, align 8, !tbaa !45
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds %struct.cellbox, ptr %123, i64 0, i32 21, i64 %128
  %130 = load ptr, ptr %129, align 8, !tbaa !7
  %131 = getelementptr inbounds %struct.tilebox, ptr %130, i64 0, i32 11
  %132 = load i32, ptr %131, align 8, !tbaa !169
  %133 = add nsw i32 %132, %125
  %134 = icmp slt i32 %133, %119
  br i1 %134, label %135, label %136

135:                                              ; preds = %121
  store i32 %133, ptr @bbbb, align 4, !tbaa !17
  br label %136

136:                                              ; preds = %135, %121, %117
  %137 = phi i32 [ %119, %121 ], [ %133, %135 ], [ %119, %117 ]
  %138 = add nuw nsw i64 %118, 1
  %139 = icmp eq i64 %138, %116
  br i1 %139, label %140, label %117, !llvm.loop !513

140:                                              ; preds = %136, %110
  %141 = phi i32 [ 1000000, %110 ], [ %137, %136 ]
  %142 = add i32 %25, %107
  %143 = sub i32 %142, %141
  br label %145

144:                                              ; preds = %105
  store i32 %108, ptr @bbbb, align 4, !tbaa !17
  br label %145

145:                                              ; preds = %144, %140
  %146 = phi i32 [ %141, %140 ], [ %108, %144 ]
  %147 = phi i32 [ %143, %140 ], [ %107, %144 ]
  %148 = load i32, ptr @bbtop, align 4, !tbaa !17
  %149 = icmp eq i32 %28, %148
  br i1 %149, label %150, label %184

150:                                              ; preds = %145
  store i32 0, ptr @bbbt, align 4, !tbaa !17
  %151 = load i32, ptr @numcells, align 4, !tbaa !17
  %152 = icmp slt i32 %151, 1
  br i1 %152, label %180, label %153

153:                                              ; preds = %150
  %154 = zext i32 %0 to i64
  %155 = add nuw i32 %151, 1
  %156 = zext i32 %155 to i64
  br label %157

157:                                              ; preds = %176, %153
  %158 = phi i64 [ 1, %153 ], [ %178, %176 ]
  %159 = phi i32 [ 0, %153 ], [ %177, %176 ]
  %160 = icmp eq i64 %158, %154
  br i1 %160, label %176, label %161

161:                                              ; preds = %157
  %162 = getelementptr inbounds ptr, ptr %4, i64 %158
  %163 = load ptr, ptr %162, align 8, !tbaa !7
  %164 = getelementptr inbounds %struct.cellbox, ptr %163, i64 0, i32 3
  %165 = load i32, ptr %164, align 8, !tbaa !165
  %166 = getelementptr inbounds %struct.cellbox, ptr %163, i64 0, i32 5
  %167 = load i32, ptr %166, align 8, !tbaa !45
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds %struct.cellbox, ptr %163, i64 0, i32 21, i64 %168
  %170 = load ptr, ptr %169, align 8, !tbaa !7
  %171 = getelementptr inbounds %struct.tilebox, ptr %170, i64 0, i32 12
  %172 = load i32, ptr %171, align 4, !tbaa !170
  %173 = add nsw i32 %172, %165
  %174 = icmp sgt i32 %173, %159
  br i1 %174, label %175, label %176

175:                                              ; preds = %161
  store i32 %173, ptr @bbbt, align 4, !tbaa !17
  br label %176

176:                                              ; preds = %175, %161, %157
  %177 = phi i32 [ %159, %161 ], [ %173, %175 ], [ %159, %157 ]
  %178 = add nuw nsw i64 %158, 1
  %179 = icmp eq i64 %178, %156
  br i1 %179, label %180, label %157, !llvm.loop !514

180:                                              ; preds = %176, %150
  %181 = phi i32 [ 0, %150 ], [ %177, %176 ]
  %182 = sub i32 %147, %28
  %183 = add i32 %182, %181
  br label %185

184:                                              ; preds = %145
  store i32 %148, ptr @bbbt, align 4, !tbaa !17
  br label %185

185:                                              ; preds = %184, %180
  %186 = phi i32 [ %181, %180 ], [ %148, %184 ]
  %187 = phi i32 [ %183, %180 ], [ %147, %184 ]
  %188 = add nsw i32 %18, %1
  %189 = add nsw i32 %21, %1
  %190 = add nsw i32 %24, %2
  %191 = add nsw i32 %27, %2
  %192 = icmp slt i32 %188, %66
  br i1 %192, label %193, label %194

193:                                              ; preds = %185
  store i32 %188, ptr @bbbl, align 4, !tbaa !17
  br label %194

194:                                              ; preds = %193, %185
  %195 = icmp sgt i32 %189, %106
  br i1 %195, label %196, label %197

196:                                              ; preds = %194
  store i32 %189, ptr @bbbr, align 4, !tbaa !17
  br label %197

197:                                              ; preds = %196, %194
  %198 = icmp slt i32 %190, %146
  br i1 %198, label %199, label %200

199:                                              ; preds = %197
  store i32 %190, ptr @bbbb, align 4, !tbaa !17
  br label %200

200:                                              ; preds = %199, %197
  %201 = icmp sgt i32 %191, %186
  br i1 %201, label %202, label %203

202:                                              ; preds = %200
  store i32 %191, ptr @bbbt, align 4, !tbaa !17
  br label %203

203:                                              ; preds = %202, %200
  ret i32 %187
}

; Function Attrs: nounwind optsize uwtable
define internal void @loadbins(i32 noundef %0) #0 {
  %2 = load i32, ptr @numBinsX, align 4, !tbaa !17
  %3 = icmp slt i32 %2, 0
  br i1 %3, label %50, label %4

4:                                                ; preds = %1
  %5 = load i32, ptr @numBinsY, align 4, !tbaa !17
  br label %6

6:                                                ; preds = %43, %4
  %7 = phi i32 [ %2, %4 ], [ %44, %43 ]
  %8 = phi i32 [ %5, %4 ], [ %45, %43 ]
  %9 = phi i32 [ %5, %4 ], [ %46, %43 ]
  %10 = phi i64 [ 0, %4 ], [ %47, %43 ]
  %11 = icmp slt i32 %9, 0
  br i1 %11, label %43, label %12

12:                                               ; preds = %6
  %13 = load ptr, ptr @blockarray, align 8
  %14 = getelementptr inbounds ptr, ptr %13, i64 %10
  %15 = load i32, ptr @numcells, align 4, !tbaa !17
  br label %16

16:                                               ; preds = %35, %12
  %17 = phi i32 [ %8, %12 ], [ %36, %35 ]
  %18 = phi i32 [ %15, %12 ], [ %37, %35 ]
  %19 = phi i64 [ 0, %12 ], [ %38, %35 ]
  %20 = icmp slt i32 %18, -4
  br i1 %20, label %35, label %21

21:                                               ; preds = %16
  %22 = load ptr, ptr %14, align 8, !tbaa !7
  %23 = getelementptr inbounds ptr, ptr %22, i64 %19
  %24 = load ptr, ptr %23, align 8, !tbaa !7
  br label %25

25:                                               ; preds = %25, %21
  %26 = phi i64 [ 0, %21 ], [ %28, %25 ]
  %27 = getelementptr inbounds i32, ptr %24, i64 %26
  store i32 0, ptr %27, align 4, !tbaa !17
  %28 = add nuw nsw i64 %26, 1
  %29 = load i32, ptr @numcells, align 4, !tbaa !17
  %30 = add nsw i32 %29, 4
  %31 = sext i32 %30 to i64
  %32 = icmp slt i64 %26, %31
  br i1 %32, label %25, label %33, !llvm.loop !515

33:                                               ; preds = %25
  %.lcssa = phi i32 [ %29, %25 ]
  %34 = load i32, ptr @numBinsY, align 4, !tbaa !17
  br label %35

35:                                               ; preds = %33, %16
  %36 = phi i32 [ %34, %33 ], [ %17, %16 ]
  %37 = phi i32 [ %.lcssa, %33 ], [ %18, %16 ]
  %38 = add nuw nsw i64 %19, 1
  %39 = sext i32 %36 to i64
  %40 = icmp slt i64 %19, %39
  br i1 %40, label %16, label %41, !llvm.loop !516

41:                                               ; preds = %35
  %.lcssa1 = phi i32 [ %36, %35 ]
  %42 = load i32, ptr @numBinsX, align 4, !tbaa !17
  br label %43

43:                                               ; preds = %41, %6
  %44 = phi i32 [ %42, %41 ], [ %7, %6 ]
  %45 = phi i32 [ %.lcssa1, %41 ], [ %8, %6 ]
  %46 = phi i32 [ %.lcssa1, %41 ], [ %9, %6 ]
  %47 = add nuw nsw i64 %10, 1
  %48 = sext i32 %44 to i64
  %49 = icmp slt i64 %10, %48
  br i1 %49, label %6, label %50, !llvm.loop !517

50:                                               ; preds = %43, %1
  %51 = load i32, ptr @blockl, align 4, !tbaa !17
  %52 = load i32, ptr @blockr, align 4, !tbaa !17
  %53 = load i32, ptr @blockb, align 4, !tbaa !17
  %54 = load i32, ptr @blockt, align 4, !tbaa !17
  %55 = sub nsw i32 %52, %51
  %56 = sdiv i32 %55, 2
  %57 = sub nsw i32 %54, %53
  %58 = sdiv i32 %57, 2
  %59 = tail call i32 @llvm.smax.i32(i32 %55, i32 %57)
  %60 = icmp eq i32 %0, 0
  br i1 %60, label %164, label %61

61:                                               ; preds = %50
  %62 = tail call noalias dereferenceable_or_null(224) ptr @malloc(i64 noundef 224) #45
  %63 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %64 = load i32, ptr @numcells, align 4, !tbaa !17
  %65 = load i32, ptr @numpads, align 4, !tbaa !17
  %66 = add nsw i32 %65, %64
  %67 = add nsw i32 %66, 1
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds ptr, ptr %63, i64 %68
  store ptr %62, ptr %69, align 8, !tbaa !7
  %70 = getelementptr inbounds %struct.cellbox, ptr %62, i64 0, i32 6
  store i32 1, ptr %70, align 4, !tbaa !171
  %71 = getelementptr inbounds %struct.cellbox, ptr %62, i64 0, i32 8
  store i32 0, ptr %71, align 4, !tbaa !385
  %72 = sdiv i32 %59, 2
  %73 = sub nsw i32 %51, %72
  %74 = getelementptr inbounds %struct.cellbox, ptr %62, i64 0, i32 2
  store i32 %73, ptr %74, align 4, !tbaa !164
  %75 = add nsw i32 %54, %53
  %76 = sdiv i32 %75, 2
  %77 = getelementptr inbounds %struct.cellbox, ptr %62, i64 0, i32 3
  store i32 %76, ptr %77, align 8, !tbaa !165
  %78 = tail call noalias dereferenceable_or_null(104) ptr @malloc(i64 noundef 104) #45
  %79 = getelementptr inbounds %struct.cellbox, ptr %62, i64 0, i32 21
  store ptr %78, ptr %79, align 8, !tbaa !7
  %80 = getelementptr inbounds %struct.tilebox, ptr %78, i64 0, i32 17
  store ptr null, ptr %80, align 8, !tbaa !47
  %81 = tail call noalias dereferenceable_or_null(104) ptr @malloc(i64 noundef 104) #45
  store ptr %81, ptr %78, align 8, !tbaa !172
  store ptr null, ptr %81, align 8, !tbaa !172
  %82 = getelementptr inbounds %struct.tilebox, ptr %81, i64 0, i32 17
  store ptr null, ptr %82, align 8, !tbaa !47
  %83 = getelementptr i8, ptr %62, i64 160
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(56) %83, i8 0, i64 56, i1 false), !tbaa !7
  %84 = sdiv i32 %59, -2
  %85 = getelementptr inbounds %struct.tilebox, ptr %78, i64 0, i32 9
  store i32 %84, ptr %85, align 8, !tbaa !167
  %86 = getelementptr inbounds %struct.tilebox, ptr %81, i64 0, i32 9
  store i32 %84, ptr %86, align 8, !tbaa !167
  %87 = getelementptr inbounds %struct.tilebox, ptr %78, i64 0, i32 10
  store i32 %72, ptr %87, align 4, !tbaa !168
  %88 = getelementptr inbounds %struct.tilebox, ptr %81, i64 0, i32 10
  store i32 %72, ptr %88, align 4, !tbaa !168
  %89 = sub nsw i32 0, %58
  %90 = getelementptr inbounds %struct.tilebox, ptr %78, i64 0, i32 11
  store i32 %89, ptr %90, align 8, !tbaa !169
  %91 = getelementptr inbounds %struct.tilebox, ptr %81, i64 0, i32 11
  store i32 %89, ptr %91, align 8, !tbaa !169
  %92 = sub nsw i32 %57, %58
  %93 = getelementptr inbounds %struct.tilebox, ptr %78, i64 0, i32 12
  store i32 %92, ptr %93, align 4, !tbaa !170
  %94 = getelementptr inbounds %struct.tilebox, ptr %81, i64 0, i32 12
  store i32 %92, ptr %94, align 4, !tbaa !170
  %95 = tail call noalias dereferenceable_or_null(224) ptr @malloc(i64 noundef 224) #45
  %96 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %97 = add nsw i32 %66, 2
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds ptr, ptr %96, i64 %98
  store ptr %95, ptr %99, align 8, !tbaa !7
  %100 = getelementptr inbounds %struct.cellbox, ptr %95, i64 0, i32 6
  store i32 1, ptr %100, align 4, !tbaa !171
  %101 = getelementptr inbounds %struct.cellbox, ptr %95, i64 0, i32 8
  store i32 0, ptr %101, align 4, !tbaa !385
  %102 = add nsw i32 %72, %52
  %103 = getelementptr inbounds %struct.cellbox, ptr %95, i64 0, i32 2
  store i32 %102, ptr %103, align 4, !tbaa !164
  %104 = getelementptr inbounds %struct.cellbox, ptr %95, i64 0, i32 3
  store i32 %76, ptr %104, align 8, !tbaa !165
  %105 = tail call noalias dereferenceable_or_null(104) ptr @malloc(i64 noundef 104) #45
  %106 = getelementptr inbounds %struct.cellbox, ptr %95, i64 0, i32 21
  store ptr %105, ptr %106, align 8, !tbaa !7
  %107 = getelementptr inbounds %struct.tilebox, ptr %105, i64 0, i32 17
  store ptr null, ptr %107, align 8, !tbaa !47
  %108 = tail call noalias dereferenceable_or_null(104) ptr @malloc(i64 noundef 104) #45
  store ptr %108, ptr %105, align 8, !tbaa !172
  store ptr null, ptr %108, align 8, !tbaa !172
  %109 = getelementptr inbounds %struct.tilebox, ptr %108, i64 0, i32 17
  store ptr null, ptr %109, align 8, !tbaa !47
  %110 = getelementptr i8, ptr %95, i64 160
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(56) %110, i8 0, i64 56, i1 false), !tbaa !7
  %111 = getelementptr inbounds %struct.tilebox, ptr %105, i64 0, i32 9
  store i32 %84, ptr %111, align 8, !tbaa !167
  %112 = getelementptr inbounds %struct.tilebox, ptr %108, i64 0, i32 9
  store i32 %84, ptr %112, align 8, !tbaa !167
  %113 = getelementptr inbounds %struct.tilebox, ptr %105, i64 0, i32 10
  store i32 %72, ptr %113, align 4, !tbaa !168
  %114 = getelementptr inbounds %struct.tilebox, ptr %108, i64 0, i32 10
  store i32 %72, ptr %114, align 4, !tbaa !168
  %115 = getelementptr inbounds %struct.tilebox, ptr %105, i64 0, i32 11
  store i32 %89, ptr %115, align 8, !tbaa !169
  %116 = getelementptr inbounds %struct.tilebox, ptr %108, i64 0, i32 11
  store i32 %89, ptr %116, align 8, !tbaa !169
  %117 = getelementptr inbounds %struct.tilebox, ptr %105, i64 0, i32 12
  store i32 %92, ptr %117, align 4, !tbaa !170
  %118 = getelementptr inbounds %struct.tilebox, ptr %108, i64 0, i32 12
  store i32 %92, ptr %118, align 4, !tbaa !170
  %119 = tail call noalias dereferenceable_or_null(224) ptr @malloc(i64 noundef 224) #45
  %120 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %121 = add nsw i32 %66, 3
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds ptr, ptr %120, i64 %122
  store ptr %119, ptr %123, align 8, !tbaa !7
  %124 = getelementptr inbounds %struct.cellbox, ptr %119, i64 0, i32 6
  store i32 1, ptr %124, align 4, !tbaa !171
  %125 = getelementptr inbounds %struct.cellbox, ptr %119, i64 0, i32 8
  store i32 0, ptr %125, align 4, !tbaa !385
  %126 = add nsw i32 %52, %51
  %127 = sdiv i32 %126, 2
  %128 = getelementptr inbounds %struct.cellbox, ptr %119, i64 0, i32 2
  store i32 %127, ptr %128, align 4, !tbaa !164
  %129 = sub nsw i32 %53, %72
  %130 = getelementptr inbounds %struct.cellbox, ptr %119, i64 0, i32 3
  store i32 %129, ptr %130, align 8, !tbaa !165
  %131 = tail call noalias dereferenceable_or_null(104) ptr @malloc(i64 noundef 104) #45
  %132 = getelementptr inbounds %struct.cellbox, ptr %119, i64 0, i32 21
  store ptr %131, ptr %132, align 8, !tbaa !7
  %133 = getelementptr inbounds %struct.tilebox, ptr %131, i64 0, i32 17
  store ptr null, ptr %133, align 8, !tbaa !47
  %134 = tail call noalias dereferenceable_or_null(104) ptr @malloc(i64 noundef 104) #45
  store ptr %134, ptr %131, align 8, !tbaa !172
  store ptr null, ptr %134, align 8, !tbaa !172
  %135 = getelementptr inbounds %struct.tilebox, ptr %134, i64 0, i32 17
  store ptr null, ptr %135, align 8, !tbaa !47
  %136 = getelementptr i8, ptr %119, i64 160
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(56) %136, i8 0, i64 56, i1 false), !tbaa !7
  %137 = getelementptr inbounds %struct.tilebox, ptr %131, i64 0, i32 11
  store i32 %84, ptr %137, align 8, !tbaa !169
  %138 = getelementptr inbounds %struct.tilebox, ptr %134, i64 0, i32 11
  store i32 %84, ptr %138, align 8, !tbaa !169
  %139 = getelementptr inbounds %struct.tilebox, ptr %131, i64 0, i32 12
  store i32 %72, ptr %139, align 4, !tbaa !170
  %140 = getelementptr inbounds %struct.tilebox, ptr %134, i64 0, i32 12
  store i32 %72, ptr %140, align 4, !tbaa !170
  %141 = sub nsw i32 0, %56
  %142 = getelementptr inbounds %struct.tilebox, ptr %131, i64 0, i32 9
  store i32 %141, ptr %142, align 8, !tbaa !167
  %143 = getelementptr inbounds %struct.tilebox, ptr %134, i64 0, i32 9
  store i32 %141, ptr %143, align 8, !tbaa !167
  %144 = sub nsw i32 %55, %56
  %145 = getelementptr inbounds %struct.tilebox, ptr %131, i64 0, i32 10
  store i32 %144, ptr %145, align 4, !tbaa !168
  %146 = getelementptr inbounds %struct.tilebox, ptr %134, i64 0, i32 10
  store i32 %144, ptr %146, align 4, !tbaa !168
  %147 = tail call noalias dereferenceable_or_null(224) ptr @malloc(i64 noundef 224) #45
  %148 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %149 = add nsw i32 %66, 4
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds ptr, ptr %148, i64 %150
  store ptr %147, ptr %151, align 8, !tbaa !7
  %152 = getelementptr inbounds %struct.cellbox, ptr %147, i64 0, i32 6
  store i32 1, ptr %152, align 4, !tbaa !171
  %153 = getelementptr inbounds %struct.cellbox, ptr %147, i64 0, i32 8
  store i32 0, ptr %153, align 4, !tbaa !385
  %154 = getelementptr inbounds %struct.cellbox, ptr %147, i64 0, i32 2
  store i32 %127, ptr %154, align 4, !tbaa !164
  %155 = add nsw i32 %72, %54
  %156 = getelementptr inbounds %struct.cellbox, ptr %147, i64 0, i32 3
  store i32 %155, ptr %156, align 8, !tbaa !165
  %157 = tail call noalias dereferenceable_or_null(104) ptr @malloc(i64 noundef 104) #45
  %158 = getelementptr inbounds %struct.cellbox, ptr %147, i64 0, i32 21
  store ptr %157, ptr %158, align 8, !tbaa !7
  %159 = getelementptr inbounds %struct.tilebox, ptr %157, i64 0, i32 17
  store ptr null, ptr %159, align 8, !tbaa !47
  %160 = tail call noalias dereferenceable_or_null(104) ptr @malloc(i64 noundef 104) #45
  store ptr %160, ptr %157, align 8, !tbaa !172
  store ptr null, ptr %160, align 8, !tbaa !172
  %161 = getelementptr inbounds %struct.tilebox, ptr %160, i64 0, i32 17
  store ptr null, ptr %161, align 8, !tbaa !47
  %162 = getelementptr i8, ptr %147, i64 160
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(56) %162, i8 0, i64 56, i1 false), !tbaa !7
  %163 = getelementptr inbounds %struct.tilebox, ptr %157, i64 0, i32 11
  store i32 %84, ptr %163, align 8, !tbaa !169
  br label %244

164:                                              ; preds = %50
  %165 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %166 = load i32, ptr @numcells, align 4, !tbaa !17
  %167 = load i32, ptr @numpads, align 4, !tbaa !17
  %168 = add nsw i32 %167, %166
  %169 = add nsw i32 %168, 1
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds ptr, ptr %165, i64 %170
  %172 = load ptr, ptr %171, align 8, !tbaa !7
  %173 = sdiv i32 %59, 2
  %174 = sub nsw i32 %51, %173
  %175 = getelementptr inbounds %struct.cellbox, ptr %172, i64 0, i32 2
  store i32 %174, ptr %175, align 4, !tbaa !164
  %176 = add nsw i32 %54, %53
  %177 = sdiv i32 %176, 2
  %178 = getelementptr inbounds %struct.cellbox, ptr %172, i64 0, i32 3
  store i32 %177, ptr %178, align 8, !tbaa !165
  %179 = getelementptr inbounds %struct.cellbox, ptr %172, i64 0, i32 21
  %180 = load ptr, ptr %179, align 8, !tbaa !7
  %181 = sdiv i32 %59, -2
  %182 = getelementptr inbounds %struct.tilebox, ptr %180, i64 0, i32 9
  store i32 %181, ptr %182, align 8, !tbaa !167
  %183 = load ptr, ptr %180, align 8, !tbaa !172
  %184 = getelementptr inbounds %struct.tilebox, ptr %183, i64 0, i32 9
  store i32 %181, ptr %184, align 8, !tbaa !167
  %185 = getelementptr inbounds %struct.tilebox, ptr %180, i64 0, i32 10
  store i32 %173, ptr %185, align 4, !tbaa !168
  %186 = getelementptr inbounds %struct.tilebox, ptr %183, i64 0, i32 10
  store i32 %173, ptr %186, align 4, !tbaa !168
  %187 = sub nsw i32 0, %58
  %188 = getelementptr inbounds %struct.tilebox, ptr %180, i64 0, i32 11
  store i32 %187, ptr %188, align 8, !tbaa !169
  %189 = getelementptr inbounds %struct.tilebox, ptr %183, i64 0, i32 11
  store i32 %187, ptr %189, align 8, !tbaa !169
  %190 = sub nsw i32 %57, %58
  %191 = getelementptr inbounds %struct.tilebox, ptr %180, i64 0, i32 12
  store i32 %190, ptr %191, align 4, !tbaa !170
  %192 = getelementptr inbounds %struct.tilebox, ptr %183, i64 0, i32 12
  store i32 %190, ptr %192, align 4, !tbaa !170
  %193 = add nsw i32 %168, 2
  %194 = sext i32 %193 to i64
  %195 = getelementptr inbounds ptr, ptr %165, i64 %194
  %196 = load ptr, ptr %195, align 8, !tbaa !7
  %197 = add nsw i32 %173, %52
  %198 = getelementptr inbounds %struct.cellbox, ptr %196, i64 0, i32 2
  store i32 %197, ptr %198, align 4, !tbaa !164
  %199 = getelementptr inbounds %struct.cellbox, ptr %196, i64 0, i32 3
  store i32 %177, ptr %199, align 8, !tbaa !165
  %200 = getelementptr inbounds %struct.cellbox, ptr %196, i64 0, i32 21
  %201 = load ptr, ptr %200, align 8, !tbaa !7
  %202 = getelementptr inbounds %struct.tilebox, ptr %201, i64 0, i32 9
  store i32 %181, ptr %202, align 8, !tbaa !167
  %203 = load ptr, ptr %201, align 8, !tbaa !172
  %204 = getelementptr inbounds %struct.tilebox, ptr %203, i64 0, i32 9
  store i32 %181, ptr %204, align 8, !tbaa !167
  %205 = getelementptr inbounds %struct.tilebox, ptr %201, i64 0, i32 10
  store i32 %173, ptr %205, align 4, !tbaa !168
  %206 = getelementptr inbounds %struct.tilebox, ptr %203, i64 0, i32 10
  store i32 %173, ptr %206, align 4, !tbaa !168
  %207 = getelementptr inbounds %struct.tilebox, ptr %201, i64 0, i32 11
  store i32 %187, ptr %207, align 8, !tbaa !169
  %208 = getelementptr inbounds %struct.tilebox, ptr %203, i64 0, i32 11
  store i32 %187, ptr %208, align 8, !tbaa !169
  %209 = getelementptr inbounds %struct.tilebox, ptr %201, i64 0, i32 12
  store i32 %190, ptr %209, align 4, !tbaa !170
  %210 = getelementptr inbounds %struct.tilebox, ptr %203, i64 0, i32 12
  store i32 %190, ptr %210, align 4, !tbaa !170
  %211 = add nsw i32 %168, 3
  %212 = sext i32 %211 to i64
  %213 = getelementptr inbounds ptr, ptr %165, i64 %212
  %214 = load ptr, ptr %213, align 8, !tbaa !7
  %215 = add nsw i32 %52, %51
  %216 = sdiv i32 %215, 2
  %217 = getelementptr inbounds %struct.cellbox, ptr %214, i64 0, i32 2
  store i32 %216, ptr %217, align 4, !tbaa !164
  %218 = sub nsw i32 %53, %173
  %219 = getelementptr inbounds %struct.cellbox, ptr %214, i64 0, i32 3
  store i32 %218, ptr %219, align 8, !tbaa !165
  %220 = getelementptr inbounds %struct.cellbox, ptr %214, i64 0, i32 21
  %221 = load ptr, ptr %220, align 8, !tbaa !7
  %222 = getelementptr inbounds %struct.tilebox, ptr %221, i64 0, i32 11
  store i32 %181, ptr %222, align 8, !tbaa !169
  %223 = load ptr, ptr %221, align 8, !tbaa !172
  %224 = getelementptr inbounds %struct.tilebox, ptr %223, i64 0, i32 11
  store i32 %181, ptr %224, align 8, !tbaa !169
  %225 = getelementptr inbounds %struct.tilebox, ptr %221, i64 0, i32 12
  store i32 %173, ptr %225, align 4, !tbaa !170
  %226 = getelementptr inbounds %struct.tilebox, ptr %223, i64 0, i32 12
  store i32 %173, ptr %226, align 4, !tbaa !170
  %227 = sub nsw i32 0, %56
  %228 = getelementptr inbounds %struct.tilebox, ptr %221, i64 0, i32 9
  store i32 %227, ptr %228, align 8, !tbaa !167
  %229 = getelementptr inbounds %struct.tilebox, ptr %223, i64 0, i32 9
  store i32 %227, ptr %229, align 8, !tbaa !167
  %230 = sub nsw i32 %55, %56
  %231 = getelementptr inbounds %struct.tilebox, ptr %221, i64 0, i32 10
  store i32 %230, ptr %231, align 4, !tbaa !168
  %232 = getelementptr inbounds %struct.tilebox, ptr %223, i64 0, i32 10
  store i32 %230, ptr %232, align 4, !tbaa !168
  %233 = add nsw i32 %168, 4
  %234 = sext i32 %233 to i64
  %235 = getelementptr inbounds ptr, ptr %165, i64 %234
  %236 = load ptr, ptr %235, align 8, !tbaa !7
  %237 = getelementptr inbounds %struct.cellbox, ptr %236, i64 0, i32 2
  store i32 %216, ptr %237, align 4, !tbaa !164
  %238 = add nsw i32 %173, %54
  %239 = getelementptr inbounds %struct.cellbox, ptr %236, i64 0, i32 3
  store i32 %238, ptr %239, align 8, !tbaa !165
  %240 = getelementptr inbounds %struct.cellbox, ptr %236, i64 0, i32 21
  %241 = load ptr, ptr %240, align 8, !tbaa !7
  %242 = getelementptr inbounds %struct.tilebox, ptr %241, i64 0, i32 11
  store i32 %181, ptr %242, align 8, !tbaa !169
  %243 = load ptr, ptr %241, align 8, !tbaa !172
  br label %244

244:                                              ; preds = %164, %61
  %245 = phi ptr [ %243, %164 ], [ %160, %61 ]
  %246 = phi i32 [ %181, %164 ], [ %84, %61 ]
  %247 = phi ptr [ %241, %164 ], [ %157, %61 ]
  %248 = phi i32 [ %173, %164 ], [ %72, %61 ]
  %249 = phi i32 [ %227, %164 ], [ %141, %61 ]
  %250 = phi i32 [ %230, %164 ], [ %144, %61 ]
  %251 = getelementptr inbounds %struct.tilebox, ptr %245, i64 0, i32 11
  store i32 %246, ptr %251, align 8, !tbaa !169
  %252 = getelementptr inbounds %struct.tilebox, ptr %247, i64 0, i32 12
  store i32 %248, ptr %252, align 4, !tbaa !170
  %253 = getelementptr inbounds %struct.tilebox, ptr %245, i64 0, i32 12
  store i32 %248, ptr %253, align 4, !tbaa !170
  %254 = getelementptr inbounds %struct.tilebox, ptr %247, i64 0, i32 9
  store i32 %249, ptr %254, align 8, !tbaa !167
  %255 = getelementptr inbounds %struct.tilebox, ptr %245, i64 0, i32 9
  store i32 %249, ptr %255, align 8, !tbaa !167
  %256 = getelementptr inbounds %struct.tilebox, ptr %247, i64 0, i32 10
  store i32 %250, ptr %256, align 4, !tbaa !168
  %257 = getelementptr inbounds %struct.tilebox, ptr %245, i64 0, i32 10
  store i32 %250, ptr %257, align 4, !tbaa !168
  %258 = load i32, ptr @numcells, align 4, !tbaa !17
  %259 = load i32, ptr @numpads, align 4, !tbaa !17
  %260 = add nsw i32 %259, %258
  %261 = icmp slt i32 %260, -3
  br i1 %261, label %390, label %262

262:                                              ; preds = %382, %244
  %263 = phi i32 [ %383, %382 ], [ %259, %244 ]
  %264 = phi i32 [ %384, %382 ], [ %258, %244 ]
  %265 = phi i64 [ %385, %382 ], [ 1, %244 ]
  %266 = phi i32 [ %386, %382 ], [ %260, %244 ]
  %267 = sext i32 %264 to i64
  %268 = icmp sle i64 %265, %267
  %269 = sext i32 %266 to i64
  %270 = icmp sgt i64 %265, %269
  %271 = or i1 %268, %270
  br i1 %271, label %272, label %382

272:                                              ; preds = %262
  %273 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %274 = getelementptr inbounds ptr, ptr %273, i64 %265
  %275 = load ptr, ptr %274, align 8, !tbaa !7
  %276 = getelementptr inbounds %struct.cellbox, ptr %275, i64 0, i32 5
  %277 = load i32, ptr %276, align 8, !tbaa !45
  %278 = sext i32 %277 to i64
  %279 = getelementptr inbounds %struct.cellbox, ptr %275, i64 0, i32 21, i64 %278
  %280 = load ptr, ptr %279, align 8, !tbaa !7
  %281 = getelementptr inbounds %struct.cellbox, ptr %275, i64 0, i32 2
  %282 = load i32, ptr %281, align 4, !tbaa !164
  %283 = getelementptr inbounds %struct.tilebox, ptr %280, i64 0, i32 9
  %284 = load i32, ptr %283, align 8, !tbaa !167
  %285 = add nsw i32 %284, %282
  %286 = getelementptr inbounds %struct.tilebox, ptr %280, i64 0, i32 10
  %287 = load i32, ptr %286, align 4, !tbaa !168
  %288 = add nsw i32 %287, %282
  %289 = getelementptr inbounds %struct.cellbox, ptr %275, i64 0, i32 3
  %290 = load i32, ptr %289, align 8, !tbaa !165
  %291 = getelementptr inbounds %struct.tilebox, ptr %280, i64 0, i32 11
  %292 = load i32, ptr %291, align 8, !tbaa !169
  %293 = add nsw i32 %292, %290
  %294 = getelementptr inbounds %struct.tilebox, ptr %280, i64 0, i32 12
  %295 = load i32, ptr %294, align 4, !tbaa !170
  %296 = add nsw i32 %295, %290
  %297 = icmp sgt i64 %265, %267
  br i1 %297, label %331, label %298

298:                                              ; preds = %272
  %299 = load i32, ptr @finalShot, align 4, !tbaa !17
  %300 = icmp eq i32 %299, 0
  br i1 %300, label %301, label %318

301:                                              ; preds = %298
  %302 = getelementptr inbounds %struct.tilebox, ptr %280, i64 0, i32 1
  %303 = load double, ptr %302, align 8, !tbaa !292
  %304 = tail call i32 @wireestx(i32 noundef %285, i32 noundef %293, i32 noundef %296, double noundef %303) #44
  %305 = sub nsw i32 %285, %304
  %306 = getelementptr inbounds %struct.tilebox, ptr %280, i64 0, i32 2
  %307 = load double, ptr %306, align 8, !tbaa !293
  %308 = tail call i32 @wireestx(i32 noundef %288, i32 noundef %293, i32 noundef %296, double noundef %307) #44
  %309 = add nsw i32 %308, %288
  %310 = getelementptr inbounds %struct.tilebox, ptr %280, i64 0, i32 3
  %311 = load double, ptr %310, align 8, !tbaa !294
  %312 = tail call i32 @wireesty(i32 noundef %293, i32 noundef %305, i32 noundef %309, double noundef %311) #44
  %313 = sub nsw i32 %293, %312
  %314 = getelementptr inbounds %struct.tilebox, ptr %280, i64 0, i32 4
  %315 = load double, ptr %314, align 8, !tbaa !295
  %316 = tail call i32 @wireesty(i32 noundef %296, i32 noundef %305, i32 noundef %309, double noundef %315) #44
  %317 = add nsw i32 %316, %296
  br label %331

318:                                              ; preds = %298
  %319 = getelementptr inbounds %struct.tilebox, ptr %280, i64 0, i32 5
  %320 = load i32, ptr %319, align 8, !tbaa !442
  %321 = sub nsw i32 %285, %320
  %322 = getelementptr inbounds %struct.tilebox, ptr %280, i64 0, i32 6
  %323 = load i32, ptr %322, align 4, !tbaa !443
  %324 = add nsw i32 %323, %288
  %325 = getelementptr inbounds %struct.tilebox, ptr %280, i64 0, i32 7
  %326 = load i32, ptr %325, align 8, !tbaa !444
  %327 = sub nsw i32 %293, %326
  %328 = getelementptr inbounds %struct.tilebox, ptr %280, i64 0, i32 8
  %329 = load i32, ptr %328, align 4, !tbaa !445
  %330 = add nsw i32 %329, %296
  br label %331

331:                                              ; preds = %318, %301, %272
  %332 = phi i32 [ %313, %301 ], [ %327, %318 ], [ %293, %272 ]
  %333 = phi i32 [ %317, %301 ], [ %330, %318 ], [ %296, %272 ]
  %334 = phi i32 [ %309, %301 ], [ %324, %318 ], [ %288, %272 ]
  %335 = phi i32 [ %305, %301 ], [ %321, %318 ], [ %285, %272 ]
  %336 = load i32, ptr @binOffsetX, align 4, !tbaa !17
  %337 = sub nsw i32 %335, %336
  %338 = load i32, ptr @binWidthX, align 4, !tbaa !17
  %339 = sdiv i32 %337, %338
  %340 = icmp slt i32 %339, 1
  %341 = load i32, ptr @numBinsX, align 4
  %342 = tail call i32 @llvm.smin.i32(i32 %339, i32 %341)
  %343 = select i1 %340, i32 1, i32 %342
  %344 = sub nsw i32 %334, %336
  %345 = sdiv i32 %344, %338
  %346 = icmp sgt i32 %345, %341
  %347 = tail call i32 @llvm.smax.i32(i32 %345, i32 1)
  %348 = select i1 %346, i32 %341, i32 %347
  %349 = icmp eq i32 %343, %348
  br i1 %349, label %350, label %372

350:                                              ; preds = %331
  %351 = load i32, ptr @binOffsetY, align 4, !tbaa !17
  %352 = sub nsw i32 %332, %351
  %353 = load i32, ptr @binWidthY, align 4, !tbaa !17
  %354 = sdiv i32 %352, %353
  %355 = icmp slt i32 %354, 1
  %356 = load i32, ptr @numBinsY, align 4
  %357 = tail call i32 @llvm.smin.i32(i32 %354, i32 %356)
  %358 = select i1 %355, i32 1, i32 %357
  %359 = sub nsw i32 %333, %351
  %360 = sdiv i32 %359, %353
  %361 = icmp sgt i32 %360, %356
  %362 = tail call i32 @llvm.smax.i32(i32 %360, i32 1)
  %363 = select i1 %361, i32 %356, i32 %362
  %364 = icmp eq i32 %358, %363
  br i1 %364, label %365, label %372

365:                                              ; preds = %350
  %366 = load ptr, ptr @blockarray, align 8, !tbaa !7
  %367 = sext i32 %343 to i64
  %368 = getelementptr inbounds ptr, ptr %366, i64 %367
  %369 = load ptr, ptr %368, align 8, !tbaa !7
  %370 = sext i32 %358 to i64
  %371 = getelementptr inbounds ptr, ptr %369, i64 %370
  br label %372

372:                                              ; preds = %365, %350, %331
  %373 = phi ptr [ %371, %365 ], [ @bucket, %350 ], [ @bucket, %331 ]
  %374 = load ptr, ptr %373, align 8, !tbaa !7
  %375 = load i32, ptr %374, align 4, !tbaa !17
  %376 = add nsw i32 %375, 1
  store i32 %376, ptr %374, align 4, !tbaa !17
  %377 = sext i32 %376 to i64
  %378 = getelementptr inbounds i32, ptr %374, i64 %377
  %379 = trunc i64 %265 to i32
  store i32 %379, ptr %378, align 4, !tbaa !17
  %380 = load i32, ptr @numcells, align 4, !tbaa !17
  %381 = load i32, ptr @numpads, align 4, !tbaa !17
  br label %382

382:                                              ; preds = %372, %262
  %383 = phi i32 [ %263, %262 ], [ %381, %372 ]
  %384 = phi i32 [ %264, %262 ], [ %380, %372 ]
  %385 = add nuw nsw i64 %265, 1
  %386 = add nsw i32 %383, %384
  %387 = add nsw i32 %386, 4
  %388 = sext i32 %387 to i64
  %389 = icmp slt i64 %265, %388
  br i1 %389, label %262, label %390, !llvm.loop !518

390:                                              ; preds = %382, %244
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @loadpg(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %3) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6) #47
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #47
  %8 = icmp slt i32 %1, 1
  br i1 %8, label %266, label %9

9:                                                ; preds = %2
  %10 = add nuw i32 %1, 1
  %11 = zext i32 %10 to i64
  br label %20

12:                                               ; preds = %138
  br i1 %8, label %266, label %13

13:                                               ; preds = %12
  %14 = load i32, ptr @numnodes, align 4, !tbaa !17
  %15 = load ptr, ptr @gnodeArray, align 8, !tbaa !7
  %16 = load ptr, ptr @pnodeArray, align 8
  %17 = sext i32 %14 to i64
  %18 = add nuw i32 %1, 1
  %19 = zext i32 %18 to i64
  br label %200

20:                                               ; preds = %138, %9
  %21 = phi i64 [ 1, %9 ], [ %198, %138 ]
  %22 = phi ptr [ @pinlist, %9 ], [ %197, %138 ]
  %23 = phi i32 [ undef, %9 ], [ %139, %138 ]
  %24 = load ptr, ptr %22, align 8, !tbaa !7
  %25 = getelementptr inbounds %struct.quad, ptr %24, i64 0, i32 1
  %26 = load i32, ptr %25, align 4, !tbaa !519
  store i32 %26, ptr %3, align 4, !tbaa !17
  %27 = getelementptr inbounds %struct.quad, ptr %24, i64 0, i32 2
  %28 = load i32, ptr %27, align 8, !tbaa !521
  store i32 %28, ptr %4, align 4, !tbaa !17
  %29 = getelementptr inbounds %struct.quad, ptr %24, i64 0, i32 3
  %30 = load i32, ptr %29, align 4, !tbaa !522
  %31 = load i32, ptr %24, align 8, !tbaa !523
  %32 = call i32 @identify2(ptr noundef nonnull %3, ptr noundef nonnull %4, i32 noundef %30, ptr noundef nonnull %5, ptr noundef nonnull %6, ptr noundef nonnull %7) #43, !range !524
  switch i32 %32, label %55 [
    i32 0, label %33
    i32 1, label %45
  ]

33:                                               ; preds = %20
  %.lcssa7 = phi i64 [ %21, %20 ]
  %34 = trunc i64 %.lcssa7 to i32
  %35 = load ptr, ptr @fpo, align 8, !tbaa !7
  %36 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %35, ptr noundef nonnull @.str.335, i32 noundef %34, i32 noundef %0) #43
  %37 = load ptr, ptr @fpo, align 8, !tbaa !7
  %38 = load i32, ptr %3, align 4, !tbaa !17
  %39 = load i32, ptr %4, align 4, !tbaa !17
  %40 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %37, ptr noundef nonnull @.str.1.336, i32 noundef %38, i32 noundef %39) #43
  %41 = load ptr, ptr @fpo, align 8, !tbaa !7
  %42 = tail call i64 @fwrite(ptr nonnull @.str.2.337, i64 40, i64 1, ptr %41)
  %43 = load ptr, ptr @fpo, align 8, !tbaa !7
  %44 = tail call i64 @fwrite(ptr nonnull @.str.3.338, i64 24, i64 1, ptr %43)
  tail call void @exit(i32 noundef 0) #49
  unreachable

45:                                               ; preds = %20
  %.lcssa8 = phi i64 [ %21, %20 ]
  %46 = trunc i64 %.lcssa8 to i32
  %47 = load ptr, ptr @fpo, align 8, !tbaa !7
  %48 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %47, ptr noundef nonnull @.str.4.339, i32 noundef %46, i32 noundef %0) #43
  %49 = load ptr, ptr @fpo, align 8, !tbaa !7
  %50 = load i32, ptr %3, align 4, !tbaa !17
  %51 = load i32, ptr %4, align 4, !tbaa !17
  %52 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %49, ptr noundef nonnull @.str.5.340, i32 noundef %50, i32 noundef %51) #43
  %53 = load ptr, ptr @fpo, align 8, !tbaa !7
  %54 = tail call i64 @fwrite(ptr nonnull @.str.6.341, i64 40, i64 1, ptr %53)
  tail call void @exit(i32 noundef 0) #49
  unreachable

55:                                               ; preds = %20
  %56 = load i32, ptr %6, align 4, !tbaa !17
  %57 = load i32, ptr %5, align 4, !tbaa !17
  %58 = load ptr, ptr %7, align 8, !tbaa !7
  %59 = getelementptr inbounds %struct.clbox, ptr %58, i64 0, i32 4
  %60 = load i32, ptr %59, align 8, !tbaa !525
  %61 = load i32, ptr %3, align 4, !tbaa !17
  %62 = load i32, ptr @numnodes, align 4, !tbaa !17
  %63 = icmp sgt i32 %61, %62
  %64 = load i32, ptr %4, align 4
  %65 = icmp sgt i32 %64, %62
  %66 = select i1 %63, i1 true, i1 %65
  br i1 %66, label %82, label %67

67:                                               ; preds = %55
  %68 = getelementptr inbounds %struct.clbox, ptr %58, i64 0, i32 2
  store i32 1000000000, ptr %68, align 8, !tbaa !485
  %69 = getelementptr inbounds %struct.clbox, ptr %58, i64 0, i32 3
  store i32 1000000000, ptr %69, align 4, !tbaa !486
  %70 = load ptr, ptr @gnodeArray, align 8, !tbaa !7
  %71 = sext i32 %64 to i64
  %72 = getelementptr inbounds ptr, ptr %70, i64 %71
  br label %73

73:                                               ; preds = %73, %67
  %74 = phi ptr [ %72, %67 ], [ %78, %73 ]
  %75 = load ptr, ptr %74, align 8, !tbaa !7
  %76 = load i32, ptr %75, align 8, !tbaa !481
  %77 = icmp eq i32 %76, %61
  %78 = getelementptr inbounds %struct.clbox, ptr %75, i64 0, i32 7
  br i1 %77, label %79, label %73, !llvm.loop !526

79:                                               ; preds = %73
  %.lcssa3 = phi ptr [ %75, %73 ]
  store ptr %.lcssa3, ptr %7, align 8, !tbaa !7
  %80 = getelementptr inbounds %struct.clbox, ptr %.lcssa3, i64 0, i32 2
  store i32 1000000000, ptr %80, align 8, !tbaa !485
  %81 = getelementptr inbounds %struct.clbox, ptr %.lcssa3, i64 0, i32 3
  store i32 1000000000, ptr %81, align 4, !tbaa !486
  br label %120

82:                                               ; preds = %55
  %83 = load ptr, ptr @gnodeArray, align 8, !tbaa !7
  %84 = sext i32 %61 to i64
  %85 = getelementptr inbounds ptr, ptr %83, i64 %84
  %86 = load ptr, ptr %85, align 8, !tbaa !7
  %87 = icmp eq ptr %86, %58
  br i1 %87, label %88, label %91

88:                                               ; preds = %82
  %89 = getelementptr inbounds %struct.clbox, ptr %58, i64 0, i32 7
  %90 = load ptr, ptr %89, align 8, !tbaa !483
  store ptr %90, ptr %85, align 8, !tbaa !7
  tail call void @free(ptr noundef nonnull %58) #44
  br label %100

91:                                               ; preds = %91, %82
  %92 = phi ptr [ %94, %91 ], [ %86, %82 ]
  %93 = getelementptr inbounds %struct.clbox, ptr %92, i64 0, i32 7
  %94 = load ptr, ptr %93, align 8, !tbaa !483
  %95 = icmp eq ptr %94, %58
  br i1 %95, label %96, label %91, !llvm.loop !527

96:                                               ; preds = %91
  %.lcssa4 = phi ptr [ %92, %91 ]
  %97 = getelementptr inbounds %struct.clbox, ptr %.lcssa4, i64 0, i32 7
  %98 = getelementptr inbounds %struct.clbox, ptr %58, i64 0, i32 7
  %99 = load ptr, ptr %98, align 8, !tbaa !483
  store ptr %99, ptr %97, align 8, !tbaa !483
  tail call void @free(ptr noundef %58) #44
  br label %100

100:                                              ; preds = %96, %88
  %101 = load ptr, ptr @gnodeArray, align 8, !tbaa !7
  %102 = sext i32 %64 to i64
  %103 = getelementptr inbounds ptr, ptr %101, i64 %102
  %104 = load ptr, ptr %103, align 8, !tbaa !7
  %105 = load i32, ptr %104, align 8, !tbaa !481
  %106 = icmp eq i32 %105, %61
  br i1 %106, label %107, label %110

107:                                              ; preds = %100
  %108 = getelementptr inbounds %struct.clbox, ptr %104, i64 0, i32 7
  %109 = load ptr, ptr %108, align 8, !tbaa !483
  store ptr %109, ptr %103, align 8, !tbaa !7
  tail call void @free(ptr noundef nonnull %104) #44
  br label %120

110:                                              ; preds = %110, %100
  %111 = phi ptr [ %113, %110 ], [ %104, %100 ]
  %112 = getelementptr inbounds %struct.clbox, ptr %111, i64 0, i32 7
  %113 = load ptr, ptr %112, align 8, !tbaa !483
  %114 = load i32, ptr %113, align 8, !tbaa !481
  %115 = icmp eq i32 %114, %61
  br i1 %115, label %116, label %110, !llvm.loop !528

116:                                              ; preds = %110
  %.lcssa6 = phi ptr [ %111, %110 ]
  %.lcssa5 = phi ptr [ %113, %110 ]
  %117 = getelementptr inbounds %struct.clbox, ptr %.lcssa6, i64 0, i32 7
  store ptr %.lcssa5, ptr %7, align 8, !tbaa !7
  %118 = getelementptr inbounds %struct.clbox, ptr %.lcssa5, i64 0, i32 7
  %119 = load ptr, ptr %118, align 8, !tbaa !483
  store ptr %119, ptr %117, align 8, !tbaa !483
  tail call void @free(ptr noundef nonnull %.lcssa5) #44
  br label %120

120:                                              ; preds = %116, %107, %79
  %121 = load i32, ptr @numnodes, align 4, !tbaa !17
  %122 = trunc i64 %21 to i32
  %123 = add nsw i32 %121, %122
  %124 = icmp eq i32 %31, 1
  %125 = load ptr, ptr @pnodeArray, align 8, !tbaa !7
  br i1 %124, label %126, label %128

126:                                              ; preds = %120
  %127 = getelementptr inbounds %struct.dlink2, ptr %125, i64 %21
  store i32 0, ptr %127, align 8, !tbaa !529
  br label %138

128:                                              ; preds = %120
  %129 = sext i32 %23 to i64
  %130 = getelementptr inbounds %struct.dlink2, ptr %125, i64 %129, i32 2
  %131 = load ptr, ptr %130, align 8, !tbaa !531
  %132 = getelementptr inbounds %struct.dlink2, ptr %125, i64 %21
  store i32 %23, ptr %132, align 8, !tbaa !529
  %133 = tail call noalias dereferenceable_or_null(16) ptr @malloc(i64 noundef 16) #45
  store ptr %133, ptr %130, align 8, !tbaa !531
  %134 = load ptr, ptr @pnodeArray, align 8, !tbaa !7
  %135 = getelementptr inbounds %struct.dlink2, ptr %134, i64 %129, i32 2
  %136 = load ptr, ptr %135, align 8, !tbaa !531
  %137 = getelementptr inbounds %struct.plist, ptr %136, i64 0, i32 1
  store ptr %131, ptr %137, align 8, !tbaa !532
  store i32 %122, ptr %136, align 8, !tbaa !534
  br label %138

138:                                              ; preds = %128, %126
  %139 = phi i32 [ %122, %126 ], [ %23, %128 ]
  %140 = sub nsw i32 %30, %57
  %141 = tail call noalias dereferenceable_or_null(40) ptr @malloc(i64 noundef 40) #45
  %142 = load ptr, ptr @gnodeArray, align 8, !tbaa !7
  %143 = sext i32 %123 to i64
  %144 = getelementptr inbounds ptr, ptr %142, i64 %143
  store ptr %141, ptr %144, align 8, !tbaa !7
  %145 = load ptr, ptr @gnodeArray, align 8, !tbaa !7
  %146 = getelementptr inbounds ptr, ptr %145, i64 %143
  %147 = load ptr, ptr %146, align 8, !tbaa !7
  store i32 %61, ptr %147, align 8, !tbaa !481
  %148 = getelementptr inbounds %struct.clbox, ptr %147, i64 0, i32 2
  store i32 %140, ptr %148, align 8, !tbaa !485
  %149 = getelementptr inbounds %struct.clbox, ptr %147, i64 0, i32 1
  store i32 %140, ptr %149, align 4, !tbaa !484
  %150 = getelementptr inbounds %struct.clbox, ptr %147, i64 0, i32 3
  store i32 %140, ptr %150, align 4, !tbaa !486
  %151 = getelementptr inbounds %struct.clbox, ptr %147, i64 0, i32 4
  store i32 %60, ptr %151, align 8, !tbaa !525
  %152 = getelementptr inbounds %struct.clbox, ptr %147, i64 0, i32 5
  store i32 0, ptr %152, align 4, !tbaa !535
  %153 = getelementptr inbounds %struct.clbox, ptr %147, i64 0, i32 6
  store i32 0, ptr %153, align 8, !tbaa !536
  %154 = tail call noalias dereferenceable_or_null(40) ptr @malloc(i64 noundef 40) #45
  %155 = getelementptr inbounds %struct.clbox, ptr %147, i64 0, i32 7
  store ptr %154, ptr %155, align 8, !tbaa !483
  %156 = load ptr, ptr %146, align 8, !tbaa !7
  %157 = getelementptr inbounds %struct.clbox, ptr %156, i64 0, i32 7
  %158 = load ptr, ptr %157, align 8, !tbaa !483
  store i32 %64, ptr %158, align 8, !tbaa !481
  %159 = sub i32 %56, %30
  %160 = getelementptr inbounds %struct.clbox, ptr %158, i64 0, i32 2
  store i32 %159, ptr %160, align 8, !tbaa !485
  %161 = getelementptr inbounds %struct.clbox, ptr %158, i64 0, i32 1
  store i32 %159, ptr %161, align 4, !tbaa !484
  %162 = getelementptr inbounds %struct.clbox, ptr %158, i64 0, i32 3
  store i32 %159, ptr %162, align 4, !tbaa !486
  %163 = getelementptr inbounds %struct.clbox, ptr %158, i64 0, i32 4
  store i32 %60, ptr %163, align 8, !tbaa !525
  %164 = getelementptr inbounds %struct.clbox, ptr %158, i64 0, i32 5
  store i32 0, ptr %164, align 4, !tbaa !535
  %165 = getelementptr inbounds %struct.clbox, ptr %158, i64 0, i32 6
  store i32 0, ptr %165, align 8, !tbaa !536
  %166 = getelementptr inbounds %struct.clbox, ptr %158, i64 0, i32 7
  store ptr null, ptr %166, align 8, !tbaa !483
  %167 = sext i32 %61 to i64
  %168 = getelementptr inbounds ptr, ptr %145, i64 %167
  %169 = load ptr, ptr %168, align 8, !tbaa !7
  %170 = tail call noalias dereferenceable_or_null(40) ptr @malloc(i64 noundef 40) #45
  store ptr %170, ptr %168, align 8, !tbaa !7
  %171 = load ptr, ptr @gnodeArray, align 8, !tbaa !7
  %172 = getelementptr inbounds ptr, ptr %171, i64 %167
  %173 = load ptr, ptr %172, align 8, !tbaa !7
  %174 = getelementptr inbounds %struct.clbox, ptr %173, i64 0, i32 7
  store ptr %169, ptr %174, align 8, !tbaa !483
  %175 = load ptr, ptr %172, align 8, !tbaa !7
  store i32 %123, ptr %175, align 8, !tbaa !481
  %176 = getelementptr inbounds %struct.clbox, ptr %175, i64 0, i32 1
  store i32 %140, ptr %176, align 4, !tbaa !484
  %177 = getelementptr inbounds %struct.clbox, ptr %175, i64 0, i32 2
  store i32 %140, ptr %177, align 8, !tbaa !485
  %178 = getelementptr inbounds %struct.clbox, ptr %175, i64 0, i32 3
  store i32 %140, ptr %178, align 4, !tbaa !486
  %179 = getelementptr inbounds %struct.clbox, ptr %175, i64 0, i32 4
  store i32 %60, ptr %179, align 8, !tbaa !525
  %180 = getelementptr inbounds %struct.clbox, ptr %175, i64 0, i32 5
  store i32 0, ptr %180, align 4, !tbaa !535
  %181 = getelementptr inbounds %struct.clbox, ptr %175, i64 0, i32 6
  store i32 0, ptr %181, align 8, !tbaa !536
  %182 = sext i32 %64 to i64
  %183 = getelementptr inbounds ptr, ptr %171, i64 %182
  %184 = load ptr, ptr %183, align 8, !tbaa !7
  store ptr %184, ptr %7, align 8, !tbaa !7
  %185 = tail call noalias dereferenceable_or_null(40) ptr @malloc(i64 noundef 40) #45
  store ptr %185, ptr %183, align 8, !tbaa !7
  %186 = load ptr, ptr @gnodeArray, align 8, !tbaa !7
  %187 = getelementptr inbounds ptr, ptr %186, i64 %182
  %188 = load ptr, ptr %187, align 8, !tbaa !7
  %189 = getelementptr inbounds %struct.clbox, ptr %188, i64 0, i32 7
  store ptr %184, ptr %189, align 8, !tbaa !483
  %190 = load ptr, ptr %187, align 8, !tbaa !7
  store i32 %123, ptr %190, align 8, !tbaa !481
  %191 = getelementptr inbounds %struct.clbox, ptr %190, i64 0, i32 1
  store i32 %159, ptr %191, align 4, !tbaa !484
  %192 = getelementptr inbounds %struct.clbox, ptr %190, i64 0, i32 2
  store i32 %159, ptr %192, align 8, !tbaa !485
  %193 = getelementptr inbounds %struct.clbox, ptr %190, i64 0, i32 3
  store i32 %159, ptr %193, align 4, !tbaa !486
  %194 = getelementptr inbounds %struct.clbox, ptr %190, i64 0, i32 4
  store i32 %60, ptr %194, align 8, !tbaa !525
  %195 = getelementptr inbounds %struct.clbox, ptr %190, i64 0, i32 5
  store i32 0, ptr %195, align 4, !tbaa !535
  %196 = getelementptr inbounds %struct.clbox, ptr %190, i64 0, i32 6
  store i32 0, ptr %196, align 8, !tbaa !536
  %197 = getelementptr inbounds %struct.quad, ptr %24, i64 0, i32 4
  %198 = add nuw nsw i64 %21, 1
  %199 = icmp eq i64 %198, %11
  br i1 %199, label %12, label %20, !llvm.loop !537

200:                                              ; preds = %263, %13
  %201 = phi i64 [ 1, %13 ], [ %264, %263 ]
  %202 = add nsw i64 %201, %17
  %203 = getelementptr inbounds ptr, ptr %15, i64 %202
  %204 = load ptr, ptr %203, align 8, !tbaa !7
  %205 = icmp eq ptr %204, null
  br i1 %205, label %263, label %206

206:                                              ; preds = %200
  %207 = getelementptr inbounds %struct.dlink2, ptr %16, i64 %201
  %208 = trunc i64 %202 to i32
  br label %209

209:                                              ; preds = %258, %206
  %210 = phi ptr [ %204, %206 ], [ %261, %258 ]
  %211 = load i32, ptr %210, align 8, !tbaa !481
  %212 = sub nsw i32 %211, %14
  %213 = icmp sle i32 %211, %14
  %214 = sext i32 %212 to i64
  %215 = icmp sgt i64 %201, %214
  %216 = select i1 %213, i1 true, i1 %215
  br i1 %216, label %258, label %217

217:                                              ; preds = %209
  %218 = load i32, ptr %207, align 8, !tbaa !529
  %219 = icmp eq i32 %218, 0
  %220 = getelementptr inbounds %struct.dlink2, ptr %16, i64 %214
  %221 = load i32, ptr %220, align 8, !tbaa !529
  %222 = icmp ne i32 %221, 0
  br i1 %219, label %226, label %223

223:                                              ; preds = %217
  br i1 %222, label %224, label %230

224:                                              ; preds = %223
  %225 = icmp eq i32 %218, %221
  br i1 %225, label %232, label %258

226:                                              ; preds = %217
  %227 = zext i32 %221 to i64
  %228 = icmp eq i64 %201, %227
  %229 = and i1 %222, %228
  br i1 %229, label %232, label %258

230:                                              ; preds = %223
  %231 = icmp eq i32 %218, %212
  br i1 %231, label %232, label %258

232:                                              ; preds = %230, %226, %224
  %233 = sext i32 %211 to i64
  %234 = getelementptr inbounds ptr, ptr %15, i64 %233
  %235 = load ptr, ptr %234, align 8, !tbaa !7
  br label %236

236:                                              ; preds = %242, %232
  %237 = phi ptr [ %244, %242 ], [ %204, %232 ]
  %238 = load i32, ptr %237, align 8, !tbaa !481
  %239 = icmp eq i32 %238, %211
  br i1 %239, label %240, label %242

240:                                              ; preds = %236
  %.lcssa = phi ptr [ %237, %236 ]
  %241 = getelementptr inbounds %struct.clbox, ptr %.lcssa, i64 0, i32 3
  store i32 1000000000, ptr %241, align 4, !tbaa !486
  br label %246

242:                                              ; preds = %236
  %243 = getelementptr inbounds %struct.clbox, ptr %237, i64 0, i32 7
  %244 = load ptr, ptr %243, align 8, !tbaa !7
  %245 = icmp eq ptr %244, null
  br i1 %245, label %246, label %236, !llvm.loop !538

246:                                              ; preds = %242, %240
  %247 = icmp eq ptr %235, null
  br i1 %247, label %263, label %248

248:                                              ; preds = %254, %246
  %249 = phi ptr [ %256, %254 ], [ %235, %246 ]
  %250 = load i32, ptr %249, align 8, !tbaa !481
  %251 = icmp eq i32 %250, %208
  br i1 %251, label %252, label %254

252:                                              ; preds = %248
  %.lcssa2 = phi ptr [ %249, %248 ]
  %253 = getelementptr inbounds %struct.clbox, ptr %.lcssa2, i64 0, i32 3
  store i32 1000000000, ptr %253, align 4, !tbaa !486
  br label %258

254:                                              ; preds = %248
  %255 = getelementptr inbounds %struct.clbox, ptr %249, i64 0, i32 7
  %256 = load ptr, ptr %255, align 8, !tbaa !483
  %257 = icmp eq ptr %256, null
  br i1 %257, label %263, label %248, !llvm.loop !539

258:                                              ; preds = %252, %230, %226, %224, %209
  %259 = phi ptr [ %.lcssa2, %252 ], [ %210, %230 ], [ %210, %226 ], [ %210, %224 ], [ %210, %209 ]
  %260 = getelementptr inbounds %struct.clbox, ptr %259, i64 0, i32 7
  %261 = load ptr, ptr %260, align 8, !tbaa !483
  %262 = icmp eq ptr %261, null
  br i1 %262, label %263, label %209, !llvm.loop !540

263:                                              ; preds = %258, %254, %246, %200
  %264 = add nuw nsw i64 %201, 1
  %265 = icmp eq i64 %264, %19
  br i1 %265, label %266, label %200, !llvm.loop !541

266:                                              ; preds = %263, %12, %2
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %3) #47
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @identify2(ptr nocapture noundef %0, ptr nocapture noundef %1, i32 noundef %2, ptr nocapture noundef writeonly %3, ptr nocapture noundef writeonly %4, ptr nocapture noundef writeonly %5) #12 {
  %7 = load ptr, ptr @gnodeArray, align 8, !tbaa !7
  %8 = load i32, ptr %0, align 4, !tbaa !17
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds ptr, ptr %7, i64 %9
  %11 = load ptr, ptr %10, align 8, !tbaa !7
  %12 = load ptr, ptr @gtrace, align 8, !tbaa !7
  %13 = trunc i32 %8 to i16
  br label %18

14:                                               ; preds = %18
  %15 = icmp eq ptr %11, null
  br i1 %15, label %156, label %16

16:                                               ; preds = %14
  %17 = load ptr, ptr @gtrace, align 8
  br label %32

18:                                               ; preds = %18, %6
  %19 = phi i64 [ 1, %6 ], [ %23, %18 ]
  %20 = getelementptr inbounds ptr, ptr %12, i64 %19
  %21 = load ptr, ptr %20, align 8, !tbaa !7
  store i16 1, ptr %21, align 2, !tbaa !542
  %22 = getelementptr inbounds i16, ptr %21, i64 1
  store i16 %13, ptr %22, align 2, !tbaa !542
  %23 = add nuw nsw i64 %19, 1
  %24 = icmp eq i64 %23, 5
  br i1 %24, label %14, label %18, !llvm.loop !544

25:                                               ; preds = %49
  %.lcssa5 = phi i32 [ %50, %49 ]
  %26 = icmp slt i32 %.lcssa5, 1
  br i1 %26, label %156, label %27

27:                                               ; preds = %25
  %28 = load ptr, ptr @gtrace, align 8, !tbaa !7
  %29 = load i32, ptr @numnodes, align 4, !tbaa !17
  %30 = add nuw i32 %.lcssa5, 1
  %31 = zext i32 %30 to i64
  br label %54

32:                                               ; preds = %49, %16
  %33 = phi i32 [ 0, %16 ], [ %50, %49 ]
  %34 = phi ptr [ %11, %16 ], [ %52, %49 ]
  %35 = getelementptr inbounds %struct.clbox, ptr %34, i64 0, i32 2
  %36 = load i32, ptr %35, align 8, !tbaa !485
  %37 = icmp sgt i32 %36, 999999999
  br i1 %37, label %49, label %38

38:                                               ; preds = %32
  %39 = add nsw i32 %33, 1
  %40 = load i32, ptr %34, align 8, !tbaa !481
  %41 = trunc i32 %40 to i16
  %42 = sext i32 %39 to i64
  %43 = getelementptr inbounds ptr, ptr %17, i64 %42
  %44 = load ptr, ptr %43, align 8, !tbaa !7
  %45 = load i16, ptr %44, align 2, !tbaa !542
  %46 = add i16 %45, 1
  store i16 %46, ptr %44, align 2, !tbaa !542
  %47 = sext i16 %46 to i64
  %48 = getelementptr inbounds i16, ptr %44, i64 %47
  store i16 %41, ptr %48, align 2, !tbaa !542
  br label %49

49:                                               ; preds = %38, %32
  %50 = phi i32 [ %33, %32 ], [ %39, %38 ]
  %51 = getelementptr inbounds %struct.clbox, ptr %34, i64 0, i32 7
  %52 = load ptr, ptr %51, align 8, !tbaa !483
  %53 = icmp eq ptr %52, null
  br i1 %53, label %25, label %32, !llvm.loop !545

54:                                               ; preds = %99, %27
  %55 = phi i64 [ 1, %27 ], [ %100, %99 ]
  %56 = getelementptr inbounds ptr, ptr %28, i64 %55
  %57 = load ptr, ptr %56, align 8, !tbaa !7
  %58 = load i16, ptr %57, align 2, !tbaa !542
  %59 = sext i16 %58 to i64
  %60 = getelementptr inbounds i16, ptr %57, i64 %59
  %61 = load i16, ptr %60, align 2, !tbaa !542
  %62 = sext i16 %61 to i32
  %63 = icmp slt i32 %29, %62
  br i1 %63, label %70, label %99

64:                                               ; preds = %99
  br i1 %26, label %156, label %65

65:                                               ; preds = %64
  %66 = load ptr, ptr @gtrace, align 8, !tbaa !7
  %67 = load i32, ptr %1, align 4, !tbaa !17
  %68 = add nuw i32 %.lcssa5, 1
  %69 = zext i32 %68 to i64
  br label %102

70:                                               ; preds = %87, %54
  %71 = phi i16 [ %96, %87 ], [ %61, %54 ]
  %72 = phi i64 [ %94, %87 ], [ %59, %54 ]
  %73 = phi i16 [ %93, %87 ], [ %58, %54 ]
  %74 = add nsw i64 %72, -1
  %75 = getelementptr inbounds i16, ptr %57, i64 %74
  %76 = load i16, ptr %75, align 2, !tbaa !542
  %77 = sext i16 %76 to i32
  %78 = sext i16 %71 to i64
  %79 = getelementptr inbounds ptr, ptr %7, i64 %78
  %80 = load ptr, ptr %79, align 8, !tbaa !7
  %81 = load i32, ptr %80, align 8, !tbaa !481
  %82 = icmp eq i32 %81, %77
  br i1 %82, label %83, label %87

83:                                               ; preds = %70
  %84 = getelementptr inbounds %struct.clbox, ptr %80, i64 0, i32 7
  %85 = load ptr, ptr %84, align 8, !tbaa !483
  %86 = load i32, ptr %85, align 8, !tbaa !481
  br label %87

87:                                               ; preds = %83, %70
  %88 = phi i32 [ %86, %83 ], [ %81, %70 ]
  %89 = trunc i32 %88 to i16
  %90 = add i16 %73, 1
  store i16 %90, ptr %57, align 2, !tbaa !542
  %91 = sext i16 %90 to i64
  %92 = getelementptr inbounds i16, ptr %57, i64 %91
  store i16 %89, ptr %92, align 2, !tbaa !542
  %93 = load i16, ptr %57, align 2, !tbaa !542
  %94 = sext i16 %93 to i64
  %95 = getelementptr inbounds i16, ptr %57, i64 %94
  %96 = load i16, ptr %95, align 2, !tbaa !542
  %97 = sext i16 %96 to i32
  %98 = icmp slt i32 %29, %97
  br i1 %98, label %70, label %99, !llvm.loop !546

99:                                               ; preds = %87, %54
  %100 = add nuw nsw i64 %55, 1
  %101 = icmp eq i64 %100, %31
  br i1 %101, label %64, label %54, !llvm.loop !547

102:                                              ; preds = %112, %65
  %103 = phi i64 [ 1, %65 ], [ %113, %112 ]
  %104 = getelementptr inbounds ptr, ptr %66, i64 %103
  %105 = load ptr, ptr %104, align 8, !tbaa !7
  %106 = load i16, ptr %105, align 2, !tbaa !542
  %107 = sext i16 %106 to i64
  %108 = getelementptr inbounds i16, ptr %105, i64 %107
  %109 = load i16, ptr %108, align 2, !tbaa !542
  %110 = sext i16 %109 to i32
  %111 = icmp eq i32 %67, %110
  br i1 %111, label %115, label %112

112:                                              ; preds = %102
  %113 = add nuw nsw i64 %103, 1
  %114 = icmp eq i64 %113, %69
  br i1 %114, label %156, label %102, !llvm.loop !548

115:                                              ; preds = %102
  %.lcssa4 = phi i64 [ %103, %102 ]
  %116 = and i64 %.lcssa4, 4294967295
  %117 = getelementptr inbounds ptr, ptr %66, i64 %116
  %118 = load ptr, ptr %117, align 8, !tbaa !7
  %119 = load i16, ptr %118, align 2, !tbaa !542
  %120 = tail call i16 @llvm.smax.i16(i16 %119, i16 1)
  %121 = zext i16 %120 to i64
  br label %122

122:                                              ; preds = %141, %115
  %123 = phi i64 [ %131, %141 ], [ 1, %115 ]
  %124 = phi i32 [ %144, %141 ], [ 0, %115 ]
  %125 = icmp eq i64 %123, %121
  br i1 %125, label %156, label %126

126:                                              ; preds = %122
  %127 = getelementptr inbounds i16, ptr %118, i64 %123
  %128 = load i16, ptr %127, align 2, !tbaa !542
  %129 = sext i16 %128 to i64
  %130 = getelementptr inbounds ptr, ptr %7, i64 %129
  %131 = add nuw nsw i64 %123, 1
  %132 = getelementptr inbounds i16, ptr %118, i64 %131
  %133 = load i16, ptr %132, align 2, !tbaa !542
  %134 = sext i16 %133 to i32
  br label %135

135:                                              ; preds = %135, %126
  %136 = phi ptr [ %130, %126 ], [ %140, %135 ]
  %137 = load ptr, ptr %136, align 8, !tbaa !7
  %138 = load i32, ptr %137, align 8, !tbaa !481
  %139 = icmp eq i32 %138, %134
  %140 = getelementptr inbounds %struct.clbox, ptr %137, i64 0, i32 7
  br i1 %139, label %141, label %135, !llvm.loop !549

141:                                              ; preds = %135
  %.lcssa = phi ptr [ %137, %135 ]
  %142 = getelementptr inbounds %struct.clbox, ptr %.lcssa, i64 0, i32 2
  %143 = load i32, ptr %142, align 8, !tbaa !485
  %144 = add nsw i32 %143, %124
  %145 = icmp slt i32 %144, %2
  br i1 %145, label %122, label %146, !llvm.loop !550

146:                                              ; preds = %141
  %.lcssa3 = phi i32 [ %144, %141 ]
  %.lcssa2 = phi i64 [ %123, %141 ]
  %.lcssa1 = phi i32 [ %124, %141 ]
  %.lcssa.lcssa = phi ptr [ %.lcssa, %141 ]
  %147 = and i64 %.lcssa2, 4294967295
  %148 = getelementptr inbounds i16, ptr %118, i64 %147
  %149 = load i16, ptr %148, align 2, !tbaa !542
  %150 = sext i16 %149 to i32
  store i32 %150, ptr %0, align 4, !tbaa !17
  %151 = add nuw i64 %.lcssa2, 1
  %152 = and i64 %151, 4294967295
  %153 = getelementptr inbounds i16, ptr %118, i64 %152
  %154 = load i16, ptr %153, align 2, !tbaa !542
  %155 = sext i16 %154 to i32
  store i32 %155, ptr %1, align 4, !tbaa !17
  store i32 %.lcssa1, ptr %3, align 4, !tbaa !17
  store i32 %.lcssa3, ptr %4, align 4, !tbaa !17
  store ptr %.lcssa.lcssa, ptr %5, align 8, !tbaa !7
  br label %156

156:                                              ; preds = %146, %122, %112, %64, %25, %14
  %157 = phi i32 [ 2, %146 ], [ 0, %64 ], [ 0, %25 ], [ 0, %14 ], [ 1, %122 ], [ 0, %112 ]
  ret i32 %157
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i16 @llvm.smax.i16(i16, i16) #13

; Function Attrs: noreturn nounwind optsize uwtable
define dso_local i32 @main(i32 noundef %0, ptr nocapture noundef readonly %1) #28 {
  %3 = alloca [1024 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 1024, ptr nonnull %3) #47
  store i32 0, ptr @offset, align 4, !tbaa !17
  store double 1.000000e+00, ptr @lapFactor, align 8, !tbaa !36
  store i32 0, ptr @finalShot, align 4, !tbaa !17
  store i32 2, ptr @maxWeight, align 4, !tbaa !17
  store i32 1, ptr @baseWeight, align 4, !tbaa !17
  store i32 1, ptr @layersFactor, align 4, !tbaa !17
  store i32 0, ptr @totNetLen, align 4, !tbaa !17
  store i32 -1, ptr @randVar, align 4, !tbaa !17
  %4 = icmp eq i32 %0, 2
  br i1 %4, label %7, label %5

5:                                                ; preds = %2
  %6 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.342)
  tail call void @exit(i32 noundef 0) #49
  unreachable

7:                                                ; preds = %2
  %8 = getelementptr inbounds ptr, ptr %1, i64 1
  %9 = load ptr, ptr %8, align 8, !tbaa !7
  %10 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %9) #50
  %11 = add i64 %10, 1
  %12 = tail call noalias ptr @malloc(i64 noundef %11) #45
  store ptr %12, ptr @cktName, align 8, !tbaa !7
  %13 = tail call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %12, ptr noundef nonnull dereferenceable(1) %9)
  %14 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %3, ptr noundef nonnull dereferenceable(1) @.str.2.343, ptr noundef %12) #44
  %15 = call noalias ptr @fopen(ptr noundef nonnull %3, ptr noundef nonnull @.str.3.344) #43
  store ptr %15, ptr @fpo, align 8, !tbaa !7
  %16 = icmp eq ptr %15, null
  br i1 %16, label %17, label %19

17:                                               ; preds = %7
  %18 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.345, ptr noundef nonnull %3) #43
  call void @exit(i32 noundef 0) #49
  unreachable

19:                                               ; preds = %7
  %20 = tail call i64 @fwrite(ptr nonnull @.str.5.346, i64 33, i64 1, ptr nonnull %15)
  tail call void @readpar() #44
  %21 = load i32, ptr @doPlacement, align 4, !tbaa !17
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %397, label %23

23:                                               ; preds = %19
  store ptr @woverlap, ptr @overlap, align 8, !tbaa !7
  store ptr @woverlapf, ptr @overlapf, align 8, !tbaa !7
  store ptr @woverlapx, ptr @overlapx, align 8, !tbaa !7
  %24 = load i32, ptr @randVar, align 4, !tbaa !17
  %25 = icmp eq i32 %24, -1
  br i1 %25, label %26, label %29

26:                                               ; preds = %23
  %27 = tail call i64 @time(ptr noundef null) #44
  %28 = trunc i64 %27 to i32
  store i32 %28, ptr @randVar, align 4, !tbaa !17
  br label %29

29:                                               ; preds = %26, %23
  %30 = phi i32 [ %28, %26 ], [ %24, %23 ]
  %31 = load ptr, ptr @fpo, align 8, !tbaa !7
  %32 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %31, ptr noundef nonnull @.str.6.349, i32 noundef %30) #43
  %33 = load ptr, ptr @fpo, align 8, !tbaa !7
  %34 = tail call i32 @fflush(ptr noundef %33) #43
  %35 = load ptr, ptr @cktName, align 8, !tbaa !7
  %36 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %3, ptr noundef nonnull dereferenceable(1) @.str.7.350, ptr noundef %35) #44
  %37 = call noalias ptr @fopen(ptr noundef nonnull %3, ptr noundef nonnull @.str.8.351) #43
  %38 = icmp eq ptr %37, null
  br i1 %38, label %39, label %42

39:                                               ; preds = %29
  %40 = load ptr, ptr @fpo, align 8, !tbaa !7
  %41 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %40, ptr noundef nonnull @.str.4.345, ptr noundef nonnull %3) #43
  call void @exit(i32 noundef 0) #49
  unreachable

42:                                               ; preds = %29
  tail call void @readcells(ptr noundef nonnull %37) #44
  tail call void @scrapnet() #44
  tail call void @config1() #44
  %43 = load i32, ptr @blockr, align 4, !tbaa !17
  %44 = load i32, ptr @blockl, align 4, !tbaa !17
  %45 = sub nsw i32 %43, %44
  store i32 %45, ptr @bdxlength, align 4, !tbaa !17
  %46 = load i32, ptr @blockt, align 4, !tbaa !17
  %47 = load i32, ptr @blockb, align 4, !tbaa !17
  %48 = sub nsw i32 %46, %47
  store i32 %48, ptr @bdylength, align 4, !tbaa !17
  %49 = load ptr, ptr @fpo, align 8, !tbaa !7
  %50 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %49, ptr noundef nonnull @.str.9.352, i32 noundef %45, i32 noundef %48) #43
  %51 = load ptr, ptr @fpo, align 8, !tbaa !7
  %52 = tail call i32 @fflush(ptr noundef %51) #43
  %53 = tail call i32 @fclose(ptr noundef nonnull %37) #43
  %54 = load ptr, ptr @cktName, align 8, !tbaa !7
  %55 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %3, ptr noundef nonnull dereferenceable(1) @.str.10.353, ptr noundef %54) #44
  %56 = call noalias ptr @fopen(ptr noundef nonnull %3, ptr noundef nonnull @.str.8.351) #43
  %57 = icmp eq ptr %56, null
  br i1 %57, label %58, label %61

58:                                               ; preds = %42
  %59 = load ptr, ptr @fpo, align 8, !tbaa !7
  %60 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %59, ptr noundef nonnull @.str.4.345, ptr noundef nonnull %3) #43
  call void @exit(i32 noundef 0) #49
  unreachable

61:                                               ; preds = %42
  tail call void @readnets(ptr noundef nonnull %56) #44
  %62 = load ptr, ptr @cktName, align 8, !tbaa !7
  %63 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %3, ptr noundef nonnull dereferenceable(1) @.str.11.354, ptr noundef %62) #44
  %64 = call noalias ptr @fopen(ptr noundef nonnull %3, ptr noundef nonnull @.str.3.344) #43
  %65 = icmp eq ptr %64, null
  br i1 %65, label %66, label %69

66:                                               ; preds = %61
  %67 = load ptr, ptr @fpo, align 8, !tbaa !7
  %68 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %67, ptr noundef nonnull @.str.4.345, ptr noundef nonnull %3) #43
  call void @exit(i32 noundef 0) #49
  unreachable

69:                                               ; preds = %61
  %70 = tail call i32 @fclose(ptr noundef nonnull %64) #43
  %71 = tail call i32 @findcost() #44
  store i32 %71, ptr @funccost, align 4, !tbaa !17
  tail call void @initcheck() #44
  %72 = load ptr, ptr @fpo, align 8, !tbaa !7
  %73 = load i32, ptr @funccost, align 4, !tbaa !17
  %74 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %72, ptr noundef nonnull @.str.12.355, i32 noundef %73) #43
  %75 = load ptr, ptr @fpo, align 8, !tbaa !7
  %76 = load i32, ptr @penalty, align 4, !tbaa !17
  %77 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %75, ptr noundef nonnull @.str.13.356, i32 noundef %76) #43
  %78 = load ptr, ptr @fpo, align 8, !tbaa !7
  %79 = load i32, ptr @overfill, align 4, !tbaa !17
  %80 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %78, ptr noundef nonnull @.str.14.357, i32 noundef %79) #43
  %81 = load ptr, ptr @fpo, align 8, !tbaa !7
  %82 = tail call i32 @fflush(ptr noundef %81) #43
  %83 = tail call double (...) @analyze() #44
  %84 = load i32, ptr @wireEstimateOnly, align 4, !tbaa !17
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %87, label %86

86:                                               ; preds = %69
  tail call void @exit(i32 noundef 0) #49
  unreachable

87:                                               ; preds = %69
  store double 1.000000e+09, ptr @T, align 8, !tbaa !36
  %88 = load i32, ptr @numcells, align 4, !tbaa !17
  %89 = mul nsw i32 %88, 11
  store i32 %89, ptr @bigcell, align 4, !tbaa !17
  %90 = add nsw i32 %89, 1
  store i32 %90, ptr @toobig, align 4, !tbaa !17
  %91 = mul nsw i32 %88, 100
  %92 = tail call i32 @testloop(i32 noundef %91) #44
  %93 = load double, ptr @totFunc, align 8, !tbaa !36
  %94 = sitofp i32 %92 to double
  %95 = fdiv double %93, %94
  %96 = fdiv double %95, %83
  %97 = fptosi double %96 to i32
  %98 = load i32, ptr @numcells, align 4, !tbaa !17
  %99 = icmp slt i32 %98, 1
  br i1 %99, label %118, label %100

100:                                              ; preds = %87
  %101 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %102 = add nuw i32 %98, 1
  %103 = zext i32 %102 to i64
  br label %104

104:                                              ; preds = %104, %100
  %105 = phi i64 [ 1, %100 ], [ %114, %104 ]
  %106 = phi i32 [ 0, %100 ], [ %113, %104 ]
  %107 = getelementptr inbounds ptr, ptr %101, i64 %105
  %108 = load ptr, ptr %107, align 8, !tbaa !7
  %109 = getelementptr inbounds %struct.cellbox, ptr %108, i64 0, i32 10
  %110 = load i32, ptr %109, align 4, !tbaa !297
  %111 = icmp eq i32 %110, 1
  %112 = zext i1 %111 to i32
  %113 = add nuw nsw i32 %106, %112
  %114 = add nuw nsw i64 %105, 1
  %115 = icmp eq i64 %114, %103
  br i1 %115, label %116, label %104, !llvm.loop !551

116:                                              ; preds = %104
  %.lcssa5 = phi i32 [ %113, %104 ]
  %117 = sitofp i32 %.lcssa5 to double
  br label %118

118:                                              ; preds = %116, %87
  %119 = phi double [ 0.000000e+00, %87 ], [ %117, %116 ]
  %120 = sitofp i32 %98 to double
  %121 = fdiv double %119, %120
  %122 = sitofp i32 %97 to double
  %123 = tail call double @sqrt(double noundef %120) #44
  %124 = fdiv double %121, %123
  %125 = fadd double %124, 1.000000e+00
  %126 = fdiv double %122, %125
  %127 = fptosi double %126 to i32
  store i32 %127, ptr @totNetLen, align 4, !tbaa !17
  tail call void @config2() #44
  %128 = load i32, ptr @blockr, align 4, !tbaa !17
  %129 = load i32, ptr @blockl, align 4, !tbaa !17
  %130 = sub nsw i32 %128, %129
  store i32 %130, ptr @bdxlength, align 4, !tbaa !17
  %131 = load i32, ptr @blockt, align 4, !tbaa !17
  %132 = load i32, ptr @blockb, align 4, !tbaa !17
  %133 = sub nsw i32 %131, %132
  store i32 %133, ptr @bdylength, align 4, !tbaa !17
  %134 = sitofp i32 %130 to double
  %135 = sitofp i32 %133 to double
  %136 = fmul double %134, %135
  %137 = load i32, ptr @numcells, align 4, !tbaa !17
  %138 = sitofp i32 %137 to double
  %139 = fdiv double %136, %138
  %140 = tail call double @sqrt(double noundef %139) #44
  store double %140, ptr @aveCellSide, align 8, !tbaa !36
  %141 = load ptr, ptr @fpo, align 8, !tbaa !7
  %142 = load i32, ptr @bdxlength, align 4, !tbaa !17
  %143 = load i32, ptr @bdylength, align 4, !tbaa !17
  %144 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %141, ptr noundef nonnull @.str.9.352, i32 noundef %142, i32 noundef %143) #43
  %145 = tail call i32 @findcost() #44
  store i32 %145, ptr @funccost, align 4, !tbaa !17
  %146 = load ptr, ptr @fpo, align 8, !tbaa !7
  %147 = tail call i64 @fwrite(ptr nonnull @.str.15.358, i64 3, i64 1, ptr %146)
  %148 = load ptr, ptr @fpo, align 8, !tbaa !7
  %149 = load i32, ptr @funccost, align 4, !tbaa !17
  %150 = load i32, ptr @penalty, align 4, !tbaa !17
  %151 = load i32, ptr @overfill, align 4, !tbaa !17
  %152 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %148, ptr noundef nonnull @.str.16.359, i32 noundef %149, i32 noundef %150, i32 noundef %151) #43
  %153 = load ptr, ptr @fpo, align 8, !tbaa !7
  %154 = tail call i32 @fflush(ptr noundef %153) #43
  %155 = load i32, ptr @numcells, align 4, !tbaa !17
  %156 = mul nsw i32 %155, 11
  store i32 %156, ptr @bigcell, align 4, !tbaa !17
  %157 = add nsw i32 %156, 1
  store i32 %157, ptr @toobig, align 4, !tbaa !17
  %158 = mul nsw i32 %155, 100
  %159 = tail call i32 @test2loop(i32 noundef %158) #44
  %160 = sitofp i32 %159 to double
  %161 = load double, ptr @totFunc, align 8, !tbaa !36
  %162 = load double, ptr @totPen, align 8, !tbaa !36
  %163 = insertelement <2 x double> poison, double %161, i64 0
  %164 = insertelement <2 x double> %163, double %162, i64 1
  %165 = insertelement <2 x double> poison, double %160, i64 0
  %166 = shufflevector <2 x double> %165, <2 x double> poison, <2 x i32> zeroinitializer
  %167 = fdiv <2 x double> %164, %166
  %168 = extractelement <2 x double> %167, i64 0
  store double %168, ptr @totFunc, align 8, !tbaa !36
  %169 = extractelement <2 x double> %167, i64 1
  store double %169, ptr @totPen, align 8, !tbaa !36
  %170 = fmul double %168, 4.000000e-01
  %171 = fdiv double %170, %169
  store double %171, ptr @lapFactor, align 8, !tbaa !36
  %172 = load i32, ptr @numnets, align 4, !tbaa !17
  %173 = sitofp i32 %172 to double
  %174 = load i32, ptr @numcells, align 4, !tbaa !17
  %175 = sitofp i32 %174 to double
  %176 = fdiv double %173, %175
  %177 = load i32, ptr @bdxlength, align 4, !tbaa !17
  %178 = sitofp i32 %177 to double
  %179 = load i32, ptr @bdylength, align 4, !tbaa !17
  %180 = sitofp i32 %179 to double
  %181 = fmul double %178, %180
  %182 = fdiv double %181, %175
  %183 = tail call double @sqrt(double noundef %182) #44
  %184 = fdiv double %183, 1.270000e+02
  %185 = fmul double %184, 1.000000e+05
  store double %185, ptr @T, align 8, !tbaa !36
  %186 = load ptr, ptr @fpo, align 8, !tbaa !7
  %187 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %186, ptr noundef nonnull @.str.17.360, double noundef %176, double noundef %183) #43
  %188 = load i32, ptr @aveChanWid, align 4, !tbaa !17
  %189 = sitofp i32 %188 to double
  %190 = fmul double %189, 1.800000e+00
  %191 = load double, ptr @aveCellSide, align 8, !tbaa !36
  %192 = fdiv double %190, %191
  %193 = fcmp ugt double %192, 8.000000e-02
  br i1 %193, label %204, label %194

194:                                              ; preds = %118
  %195 = tail call double @log10(double noundef %192) #44
  %196 = fsub double -1.000000e-01, %195
  %197 = tail call double @pow(double noundef 1.000000e+01, double noundef %196) #44
  %198 = tail call double @llvm.fmuladd.f64(double %197, double 1.000000e-03, double -2.000000e-02)
  %199 = load double, ptr @lapFactor, align 8, !tbaa !36
  %200 = fcmp olt double %199, %198
  %201 = select i1 %200, double %198, double %199
  %202 = fcmp olt double %201, 2.000000e-02
  %203 = or i1 %200, %202
  br i1 %203, label %207, label %211

204:                                              ; preds = %118
  %205 = load double, ptr @lapFactor, align 8, !tbaa !36
  %206 = fcmp olt double %205, 2.000000e-02
  br i1 %206, label %209, label %211

207:                                              ; preds = %194
  %208 = select i1 %202, double 2.000000e-02, double %201
  br label %209

209:                                              ; preds = %207, %204
  %210 = phi double [ %208, %207 ], [ 2.000000e-02, %204 ]
  store double %210, ptr @lapFactor, align 8, !tbaa !36
  br label %211

211:                                              ; preds = %209, %204, %194
  %212 = phi double [ %199, %194 ], [ %205, %204 ], [ %210, %209 ]
  %213 = load ptr, ptr @fpo, align 8, !tbaa !7
  %214 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %213, ptr noundef nonnull @.str.18.361, double noundef %212) #43
  %215 = load double, ptr @lapFactor, align 8, !tbaa !36
  %216 = fdiv double 4.000000e+00, %215
  %217 = fptosi double %216 to i32
  store i32 %217, ptr @offset, align 4, !tbaa !17
  %218 = load i32, ptr @numcells, align 4, !tbaa !17
  %219 = icmp slt i32 %218, 1
  br i1 %219, label %220, label %223

220:                                              ; preds = %211
  %221 = sitofp i32 %218 to double
  %222 = fdiv double 0.000000e+00, %221
  br label %302

223:                                              ; preds = %223, %211
  %224 = phi i64 [ %254, %223 ], [ 1, %211 ]
  %225 = phi double [ %253, %223 ], [ 0.000000e+00, %211 ]
  %226 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %227 = getelementptr inbounds ptr, ptr %226, i64 %224
  %228 = load ptr, ptr %227, align 8, !tbaa !7
  %229 = getelementptr inbounds %struct.cellbox, ptr %228, i64 0, i32 5
  %230 = load i32, ptr %229, align 8, !tbaa !45
  %231 = sext i32 %230 to i64
  %232 = getelementptr inbounds %struct.cellbox, ptr %228, i64 0, i32 21, i64 %231
  %233 = load ptr, ptr %232, align 8, !tbaa !7
  %234 = getelementptr inbounds %struct.tilebox, ptr %233, i64 0, i32 10
  %235 = load i32, ptr %234, align 4, !tbaa !168
  %236 = getelementptr inbounds %struct.tilebox, ptr %233, i64 0, i32 9
  %237 = load i32, ptr %236, align 8, !tbaa !167
  %238 = sub i32 %235, %237
  %239 = getelementptr inbounds %struct.tilebox, ptr %233, i64 0, i32 12
  %240 = load i32, ptr %239, align 4, !tbaa !170
  %241 = getelementptr inbounds %struct.tilebox, ptr %233, i64 0, i32 11
  %242 = load i32, ptr %241, align 8, !tbaa !169
  %243 = sub i32 %240, %242
  %244 = load i32, ptr @maxWeight, align 4, !tbaa !17
  %245 = mul nsw i32 %244, %244
  %246 = load i32, ptr @aveChanWid, align 4, !tbaa !17
  %247 = mul nsw i32 %245, %246
  %248 = add nsw i32 %238, %247
  %249 = add nsw i32 %243, %247
  %250 = mul nsw i32 %248, %249
  %251 = sitofp i32 %250 to double
  %252 = tail call double @sqrt(double noundef %251) #44
  %253 = fadd double %225, %252
  %254 = add nuw nsw i64 %224, 1
  %255 = load i32, ptr @numcells, align 4, !tbaa !17
  %256 = sext i32 %255 to i64
  %257 = icmp slt i64 %224, %256
  br i1 %257, label %223, label %258, !llvm.loop !552

258:                                              ; preds = %223
  %.lcssa4 = phi double [ %253, %223 ]
  %.lcssa3 = phi i32 [ %255, %223 ]
  %259 = sitofp i32 %.lcssa3 to double
  %260 = fdiv double %.lcssa4, %259
  %261 = icmp slt i32 %.lcssa3, 1
  br i1 %261, label %302, label %262

262:                                              ; preds = %262, %258
  %263 = phi i64 [ %296, %262 ], [ 1, %258 ]
  %264 = phi double [ %295, %262 ], [ 0.000000e+00, %258 ]
  %265 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %266 = getelementptr inbounds ptr, ptr %265, i64 %263
  %267 = load ptr, ptr %266, align 8, !tbaa !7
  %268 = getelementptr inbounds %struct.cellbox, ptr %267, i64 0, i32 5
  %269 = load i32, ptr %268, align 8, !tbaa !45
  %270 = sext i32 %269 to i64
  %271 = getelementptr inbounds %struct.cellbox, ptr %267, i64 0, i32 21, i64 %270
  %272 = load ptr, ptr %271, align 8, !tbaa !7
  %273 = getelementptr inbounds %struct.tilebox, ptr %272, i64 0, i32 10
  %274 = load i32, ptr %273, align 4, !tbaa !168
  %275 = getelementptr inbounds %struct.tilebox, ptr %272, i64 0, i32 9
  %276 = load i32, ptr %275, align 8, !tbaa !167
  %277 = sub i32 %274, %276
  %278 = getelementptr inbounds %struct.tilebox, ptr %272, i64 0, i32 12
  %279 = load i32, ptr %278, align 4, !tbaa !170
  %280 = getelementptr inbounds %struct.tilebox, ptr %272, i64 0, i32 11
  %281 = load i32, ptr %280, align 8, !tbaa !169
  %282 = sub i32 %279, %281
  %283 = load i32, ptr @maxWeight, align 4, !tbaa !17
  %284 = mul nsw i32 %283, %283
  %285 = load i32, ptr @aveChanWid, align 4, !tbaa !17
  %286 = mul nsw i32 %284, %285
  %287 = add nsw i32 %277, %286
  %288 = add nsw i32 %282, %286
  %289 = mul nsw i32 %287, %288
  %290 = sitofp i32 %289 to double
  %291 = tail call double @sqrt(double noundef %290) #44
  %292 = fsub double %291, %260
  %293 = tail call double @sqrt(double noundef %290) #44
  %294 = fsub double %293, %260
  %295 = tail call double @llvm.fmuladd.f64(double %292, double %294, double %264)
  %296 = add nuw nsw i64 %263, 1
  %297 = load i32, ptr @numcells, align 4, !tbaa !17
  %298 = sext i32 %297 to i64
  %299 = icmp slt i64 %263, %298
  br i1 %299, label %262, label %300, !llvm.loop !553

300:                                              ; preds = %262
  %.lcssa2 = phi double [ %295, %262 ]
  %.lcssa1 = phi i32 [ %297, %262 ]
  %301 = sitofp i32 %.lcssa1 to double
  br label %302

302:                                              ; preds = %300, %258, %220
  %303 = phi double [ %260, %300 ], [ %260, %258 ], [ %222, %220 ]
  %304 = phi double [ %301, %300 ], [ %259, %258 ], [ %221, %220 ]
  %305 = phi double [ %.lcssa2, %300 ], [ 0.000000e+00, %258 ], [ 0.000000e+00, %220 ]
  %306 = fdiv double %305, %304
  %307 = tail call double @sqrt(double noundef %306) #44
  %308 = load ptr, ptr @fpo, align 8, !tbaa !7
  %309 = tail call i64 @fwrite(ptr nonnull @.str.19.362, i64 50, i64 1, ptr %308)
  %310 = load ptr, ptr @fpo, align 8, !tbaa !7
  %311 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %310, ptr noundef nonnull @.str.20, double noundef %303, double noundef %307) #43
  %312 = tail call double @llvm.fmuladd.f64(double %307, double 2.000000e+00, double %303)
  %313 = fptosi double %312 to i32
  store i32 %313, ptr @rangeLimit, align 4, !tbaa !17
  %314 = load double, ptr @T, align 8, !tbaa !36
  %315 = fcmp olt double %314, 1.000000e+05
  br i1 %315, label %316, label %317

316:                                              ; preds = %302
  store double 1.000000e+05, ptr @T, align 8, !tbaa !36
  br label %317

317:                                              ; preds = %316, %302
  %318 = phi double [ 1.000000e+05, %316 ], [ %314, %302 ]
  store double %318, ptr @Tsave, align 8, !tbaa !36
  %319 = tail call i32 @findcost() #44
  store i32 %319, ptr @funccost, align 4, !tbaa !17
  %320 = load double, ptr @T, align 8, !tbaa !36
  %321 = sitofp i32 %319 to double
  %322 = fdiv double %321, 1.000000e+01
  %323 = fcmp ogt double %320, %322
  br i1 %323, label %324, label %326

324:                                              ; preds = %317
  store double %322, ptr @T, align 8, !tbaa !36
  store double %322, ptr @Tsave, align 8, !tbaa !36
  %325 = tail call i32 @findcost() #44
  store i32 %325, ptr @funccost, align 4, !tbaa !17
  br label %326

326:                                              ; preds = %324, %317
  %327 = load ptr, ptr @fpo, align 8, !tbaa !7
  %328 = tail call i64 @fwrite(ptr nonnull @.str.21, i64 44, i64 1, ptr %327)
  %329 = load ptr, ptr @fpo, align 8, !tbaa !7
  %330 = load i32, ptr @funccost, align 4, !tbaa !17
  %331 = load i32, ptr @penalty, align 4, !tbaa !17
  %332 = load i32, ptr @overfill, align 4, !tbaa !17
  %333 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %329, ptr noundef nonnull @.str.22, i32 noundef %330, i32 noundef %331, i32 noundef %332) #43
  %334 = load ptr, ptr @fpo, align 8, !tbaa !7
  %335 = tail call i32 @fflush(ptr noundef %334) #43
  %336 = load ptr, ptr @cktName, align 8, !tbaa !7
  %337 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %3, ptr noundef nonnull dereferenceable(1) @.str.23, ptr noundef %336) #44
  %338 = call noalias ptr @fopen(ptr noundef nonnull %3, ptr noundef nonnull @.str.8.351) #43
  %339 = icmp eq ptr %338, null
  %340 = load ptr, ptr @fpo, align 8, !tbaa !7
  br i1 %339, label %341, label %343

341:                                              ; preds = %326
  %342 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %340, ptr noundef nonnull @.str.24, ptr noundef nonnull %3) #43
  br label %354

343:                                              ; preds = %326
  %344 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %340, ptr noundef nonnull @.str.25, ptr noundef nonnull %3) #43
  call void @TW_oldinput(ptr noundef nonnull %338) #44
  %345 = call i32 @findcost() #44
  store i32 %345, ptr @funccost, align 4, !tbaa !17
  %346 = load ptr, ptr @fpo, align 8, !tbaa !7
  %347 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %346, ptr noundef nonnull @.str.12.355, i32 noundef %345) #43
  %348 = load ptr, ptr @fpo, align 8, !tbaa !7
  %349 = load i32, ptr @penalty, align 4, !tbaa !17
  %350 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %348, ptr noundef nonnull @.str.26.365, i32 noundef %349) #43
  %351 = load ptr, ptr @fpo, align 8, !tbaa !7
  %352 = load i32, ptr @overfill, align 4, !tbaa !17
  %353 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %351, ptr noundef nonnull @.str.27, i32 noundef %352) #43
  br label %354

354:                                              ; preds = %343, %341
  %355 = load ptr, ptr @fpo, align 8, !tbaa !7
  %356 = call i32 @fflush(ptr noundef %355) #43
  %357 = load i32, ptr @cost_only, align 4, !tbaa !17
  %358 = icmp eq i32 %357, 0
  br i1 %358, label %359, label %396

359:                                              ; preds = %354
  %360 = load ptr, ptr @fpo, align 8, !tbaa !7
  %361 = call i64 @fwrite(ptr nonnull @.str.28, i64 47, i64 1, ptr %360)
  %362 = load i32, ptr @numcells, align 4, !tbaa !17
  %363 = load i32, ptr @numpads, align 4, !tbaa !17
  %364 = add nsw i32 %363, %362
  %365 = icmp sgt i32 %363, 0
  br i1 %365, label %369, label %366

366:                                              ; preds = %359
  %367 = load i32, ptr @attpercell, align 4, !tbaa !17
  %368 = mul nsw i32 %367, %362
  store i32 %368, ptr @attmax, align 4, !tbaa !17
  br label %392

369:                                              ; preds = %359
  %370 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %371 = sext i32 %362 to i64
  %372 = sext i32 %364 to i64
  br label %373

373:                                              ; preds = %373, %369
  %374 = phi i64 [ %371, %369 ], [ %376, %373 ]
  %375 = phi i32 [ 0, %369 ], [ %384, %373 ]
  %376 = add nsw i64 %374, 1
  %377 = getelementptr inbounds ptr, ptr %370, i64 %376
  %378 = load ptr, ptr %377, align 8, !tbaa !7
  %379 = getelementptr inbounds %struct.cellbox, ptr %378, i64 0, i32 1
  %380 = load i32, ptr %379, align 8, !tbaa !378
  %381 = freeze i32 %380
  %382 = icmp sgt i32 %381, 0
  %383 = zext i1 %382 to i32
  %384 = add i32 %375, %383
  %385 = icmp slt i64 %376, %372
  br i1 %385, label %373, label %386, !llvm.loop !554

386:                                              ; preds = %373
  %.lcssa = phi i32 [ %384, %373 ]
  %387 = load i32, ptr @attpercell, align 4, !tbaa !17
  %388 = add nsw i32 %.lcssa, %362
  %389 = mul nsw i32 %387, %388
  store i32 %389, ptr @attmax, align 4, !tbaa !17
  %390 = icmp ugt i32 %.lcssa, 1
  %391 = select i1 %390, i32 %364, i32 %362
  br label %392

392:                                              ; preds = %386, %366
  %393 = phi i32 [ %362, %366 ], [ %391, %386 ]
  %394 = mul nsw i32 %393, 11
  store i32 %394, ptr @bigcell, align 4, !tbaa !17
  store i32 %393, ptr @choose, align 4, !tbaa !17
  %395 = add nsw i32 %394, 1
  store i32 %395, ptr @toobig, align 4, !tbaa !17
  call void @prepSpots() #43
  call void @utemp() #44
  br label %396

396:                                              ; preds = %392, %354
  call void @finalout() #44
  call void @finalcheck() #44
  call void @twstats() #44
  br label %408

397:                                              ; preds = %19
  %398 = load i32, ptr @doChannelGraph, align 4, !tbaa !17
  %399 = icmp eq i32 %398, 0
  br i1 %399, label %404, label %400

400:                                              ; preds = %397
  tail call void @gmain() #44
  %401 = load i32, ptr @doGlobalRoute, align 4, !tbaa !17
  %402 = icmp eq i32 %401, 0
  br i1 %402, label %408, label %403

403:                                              ; preds = %400
  tail call void @rmain() #44
  br label %408

404:                                              ; preds = %397
  %405 = load i32, ptr @doGlobalRoute, align 4, !tbaa !17
  %406 = icmp eq i32 %405, 0
  br i1 %406, label %408, label %407

407:                                              ; preds = %404
  tail call void @rmain() #44
  br label %408

408:                                              ; preds = %407, %404, %403, %400, %396
  %409 = load ptr, ptr @fpo, align 8, !tbaa !7
  %410 = call i64 @fwrite(ptr nonnull @.str.29, i64 41, i64 1, ptr %409)
  %411 = load ptr, ptr @fpo, align 8, !tbaa !7
  %412 = call i64 @fwrite(ptr nonnull @.str.30, i64 39, i64 1, ptr %411)
  %413 = load ptr, ptr @fpo, align 8, !tbaa !7
  %414 = call i64 @fwrite(ptr nonnull @.str.29, i64 41, i64 1, ptr %413)
  %415 = load ptr, ptr @fpo, align 8, !tbaa !7
  %416 = call i32 @fclose(ptr noundef %415) #43
  call void @exit(i32 noundef 0) #49
  unreachable
}

; Function Attrs: nounwind optsize
declare i64 @time(ptr noundef) local_unnamed_addr #29

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write)
declare double @pow(double noundef, double noundef) local_unnamed_addr #15

; Function Attrs: nounwind optsize uwtable
define internal void @prepSpots() #0 {
  %1 = load i32, ptr @numcells, align 4, !tbaa !17
  %2 = icmp slt i32 %1, 1
  br i1 %2, label %37, label %3

3:                                                ; preds = %0
  %4 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %5 = add nuw i32 %1, 1
  %6 = zext i32 %5 to i64
  br label %7

7:                                                ; preds = %7, %3
  %8 = phi i64 [ 1, %3 ], [ %33, %7 ]
  %9 = phi i32 [ 10000000, %3 ], [ %30, %7 ]
  %10 = phi i32 [ -10000000, %3 ], [ %32, %7 ]
  %11 = getelementptr inbounds ptr, ptr %4, i64 %8
  %12 = load ptr, ptr %11, align 8, !tbaa !7
  %13 = getelementptr inbounds %struct.cellbox, ptr %12, i64 0, i32 5
  %14 = load i32, ptr %13, align 8, !tbaa !45
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds %struct.cellbox, ptr %12, i64 0, i32 21, i64 %15
  %17 = load ptr, ptr %16, align 8, !tbaa !7
  %18 = getelementptr inbounds %struct.tilebox, ptr %17, i64 0, i32 10
  %19 = load i32, ptr %18, align 4, !tbaa !168
  %20 = getelementptr inbounds %struct.tilebox, ptr %17, i64 0, i32 9
  %21 = load i32, ptr %20, align 8, !tbaa !167
  %22 = sub nsw i32 %19, %21
  %23 = getelementptr inbounds %struct.tilebox, ptr %17, i64 0, i32 12
  %24 = load i32, ptr %23, align 4, !tbaa !170
  %25 = getelementptr inbounds %struct.tilebox, ptr %17, i64 0, i32 11
  %26 = load i32, ptr %25, align 8, !tbaa !169
  %27 = sub nsw i32 %24, %26
  %28 = tail call i32 @llvm.smin.i32(i32 %22, i32 %27)
  %29 = tail call i32 @llvm.smin.i32(i32 %28, i32 %9)
  %30 = tail call i32 @llvm.smax.i32(i32 %29, i32 1)
  %31 = tail call i32 @llvm.smax.i32(i32 %22, i32 %27)
  %32 = tail call i32 @llvm.smax.i32(i32 %31, i32 %10)
  %33 = add nuw nsw i64 %8, 1
  %34 = icmp eq i64 %33, %6
  br i1 %34, label %35, label %7, !llvm.loop !555

35:                                               ; preds = %7
  %.lcssa4 = phi i32 [ %30, %7 ]
  %.lcssa3 = phi i32 [ %32, %7 ]
  %36 = lshr i32 %.lcssa4, 2
  br label %37

37:                                               ; preds = %35, %0
  %38 = phi i32 [ -10000000, %0 ], [ %.lcssa3, %35 ]
  %39 = phi i32 [ 2500000, %0 ], [ %36, %35 ]
  %40 = load i32, ptr @blockl, align 4, !tbaa !17
  %41 = sub nsw i32 %40, %38
  store i32 %41, ptr @spotXhash, align 4, !tbaa !17
  %42 = load i32, ptr @blockb, align 4, !tbaa !17
  %43 = sub nsw i32 %42, %38
  store i32 %43, ptr @spotYhash, align 4, !tbaa !17
  %44 = load i32, ptr @blockr, align 4, !tbaa !17
  %45 = sub nsw i32 %44, %40
  %46 = sdiv i32 %45, 2000
  %47 = tail call i32 @llvm.smax.i32(i32 %39, i32 %46)
  store i32 %47, ptr @spotSize, align 4, !tbaa !17
  %48 = sub i32 %38, %41
  %49 = add i32 %48, %44
  %50 = sdiv i32 %49, %47
  %51 = add nsw i32 %50, 1
  store i32 %51, ptr @numXspots, align 4, !tbaa !17
  %52 = load i32, ptr @blockt, align 4, !tbaa !17
  %53 = sub i32 %38, %43
  %54 = add i32 %53, %52
  %55 = sdiv i32 %54, %47
  %56 = add nsw i32 %55, 1
  store i32 %56, ptr @numYspots, align 4, !tbaa !17
  %57 = load ptr, ptr @fpo, align 8, !tbaa !7
  %58 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %57, ptr noundef nonnull @.str.31, i32 noundef %51, i32 noundef %56) #43
  %59 = load i32, ptr @numXspots, align 4, !tbaa !17
  %60 = sext i32 %59 to i64
  %61 = shl nsw i64 %60, 3
  %62 = tail call noalias ptr @malloc(i64 noundef %61) #45
  store ptr %62, ptr @spots, align 8, !tbaa !7
  %63 = icmp sgt i32 %59, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %37
  %65 = load i32, ptr @numYspots, align 4, !tbaa !17
  br label %70

66:                                               ; preds = %91, %37
  %67 = phi i32 [ %59, %37 ], [ %92, %91 ]
  %68 = load i32, ptr @numcells, align 4, !tbaa !17
  %69 = icmp slt i32 %68, 1
  br i1 %69, label %183, label %97

70:                                               ; preds = %91, %64
  %71 = phi i32 [ %59, %64 ], [ %92, %91 ]
  %72 = phi i32 [ %65, %64 ], [ %93, %91 ]
  %73 = phi i64 [ 0, %64 ], [ %94, %91 ]
  %74 = sext i32 %72 to i64
  %75 = tail call noalias ptr @malloc(i64 noundef %74) #45
  %76 = load ptr, ptr @spots, align 8, !tbaa !7
  %77 = getelementptr inbounds ptr, ptr %76, i64 %73
  store ptr %75, ptr %77, align 8, !tbaa !7
  %78 = icmp sgt i32 %72, 0
  br i1 %78, label %79, label %91

79:                                               ; preds = %79, %70
  %80 = phi i64 [ %85, %79 ], [ 0, %70 ]
  %81 = load ptr, ptr @spots, align 8, !tbaa !7
  %82 = getelementptr inbounds ptr, ptr %81, i64 %73
  %83 = load ptr, ptr %82, align 8, !tbaa !7
  %84 = getelementptr inbounds i8, ptr %83, i64 %80
  store i8 0, ptr %84, align 1, !tbaa !79
  %85 = add nuw nsw i64 %80, 1
  %86 = load i32, ptr @numYspots, align 4, !tbaa !17
  %87 = sext i32 %86 to i64
  %88 = icmp slt i64 %85, %87
  br i1 %88, label %79, label %89, !llvm.loop !556

89:                                               ; preds = %79
  %.lcssa2 = phi i32 [ %86, %79 ]
  %90 = load i32, ptr @numXspots, align 4, !tbaa !17
  br label %91

91:                                               ; preds = %89, %70
  %92 = phi i32 [ %90, %89 ], [ %71, %70 ]
  %93 = phi i32 [ %.lcssa2, %89 ], [ %72, %70 ]
  %94 = add nuw nsw i64 %73, 1
  %95 = sext i32 %92 to i64
  %96 = icmp slt i64 %94, %95
  br i1 %96, label %70, label %66, !llvm.loop !557

97:                                               ; preds = %176, %66
  %98 = phi i64 [ %177, %176 ], [ 1, %66 ]
  %99 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %100 = getelementptr inbounds ptr, ptr %99, i64 %98
  %101 = load ptr, ptr %100, align 8, !tbaa !7
  %102 = getelementptr inbounds %struct.cellbox, ptr %101, i64 0, i32 5
  %103 = load i32, ptr %102, align 8, !tbaa !45
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds %struct.cellbox, ptr %101, i64 0, i32 21, i64 %104
  %106 = load ptr, ptr %105, align 8, !tbaa !7
  %107 = getelementptr inbounds %struct.cellbox, ptr %101, i64 0, i32 2
  %108 = load i32, ptr %107, align 4, !tbaa !164
  %109 = getelementptr inbounds %struct.tilebox, ptr %106, i64 0, i32 9
  %110 = load i32, ptr %109, align 8, !tbaa !167
  %111 = add nsw i32 %110, %108
  %112 = getelementptr inbounds %struct.tilebox, ptr %106, i64 0, i32 10
  %113 = load i32, ptr %112, align 4, !tbaa !168
  %114 = add nsw i32 %113, %108
  %115 = getelementptr inbounds %struct.cellbox, ptr %101, i64 0, i32 3
  %116 = load i32, ptr %115, align 8, !tbaa !165
  %117 = getelementptr inbounds %struct.tilebox, ptr %106, i64 0, i32 11
  %118 = load i32, ptr %117, align 8, !tbaa !169
  %119 = add nsw i32 %118, %116
  %120 = getelementptr inbounds %struct.tilebox, ptr %106, i64 0, i32 12
  %121 = load i32, ptr %120, align 4, !tbaa !170
  %122 = add nsw i32 %121, %116
  %123 = getelementptr inbounds %struct.tilebox, ptr %106, i64 0, i32 1
  %124 = load double, ptr %123, align 8, !tbaa !292
  %125 = tail call i32 @wireestx(i32 noundef %111, i32 noundef %119, i32 noundef %122, double noundef %124) #44
  %126 = sub nsw i32 %111, %125
  %127 = getelementptr inbounds %struct.tilebox, ptr %106, i64 0, i32 2
  %128 = load double, ptr %127, align 8, !tbaa !293
  %129 = tail call i32 @wireestx(i32 noundef %114, i32 noundef %119, i32 noundef %122, double noundef %128) #44
  %130 = add nsw i32 %129, %114
  %131 = getelementptr inbounds %struct.tilebox, ptr %106, i64 0, i32 3
  %132 = load double, ptr %131, align 8, !tbaa !294
  %133 = tail call i32 @wireesty(i32 noundef %119, i32 noundef %126, i32 noundef %130, double noundef %132) #44
  %134 = getelementptr inbounds %struct.tilebox, ptr %106, i64 0, i32 4
  %135 = load double, ptr %134, align 8, !tbaa !295
  %136 = tail call i32 @wireesty(i32 noundef %122, i32 noundef %126, i32 noundef %130, double noundef %135) #44
  %137 = add nsw i32 %136, %122
  %138 = load i32, ptr @spotXhash, align 4, !tbaa !17
  %139 = sub nsw i32 %126, %138
  %140 = load i32, ptr @spotSize, align 4, !tbaa !17
  %141 = sdiv i32 %139, %140
  %142 = sub nsw i32 %130, %138
  %143 = sdiv i32 %142, %140
  %144 = load i32, ptr @spotYhash, align 4, !tbaa !17
  %145 = sub i32 %137, %144
  %146 = sdiv i32 %145, %140
  %147 = add nsw i32 %141, 1
  %148 = icmp slt i32 %147, %143
  br i1 %148, label %149, label %176

149:                                              ; preds = %97
  %150 = add i32 %133, %144
  %151 = sub i32 %119, %150
  %152 = sdiv i32 %151, %140
  %153 = add nsw i32 %152, 1
  %154 = icmp slt i32 %153, %146
  %155 = sext i32 %152 to i64
  %156 = add nsw i64 %155, 1
  %157 = sext i32 %141 to i64
  %158 = add nsw i64 %157, 1
  br label %163

159:                                              ; preds = %165, %163
  %160 = add nsw i64 %164, 1
  %161 = trunc i64 %160 to i32
  %162 = icmp eq i32 %143, %161
  br i1 %162, label %176, label %163, !llvm.loop !558

163:                                              ; preds = %159, %149
  %164 = phi i64 [ %158, %149 ], [ %160, %159 ]
  br i1 %154, label %165, label %159

165:                                              ; preds = %165, %163
  %166 = phi i64 [ %173, %165 ], [ %156, %163 ]
  %167 = load ptr, ptr @spots, align 8, !tbaa !7
  %168 = getelementptr inbounds ptr, ptr %167, i64 %164
  %169 = load ptr, ptr %168, align 8, !tbaa !7
  %170 = getelementptr inbounds i8, ptr %169, i64 %166
  %171 = load i8, ptr %170, align 1, !tbaa !79
  %172 = add i8 %171, 1
  store i8 %172, ptr %170, align 1, !tbaa !79
  %173 = add nsw i64 %166, 1
  %174 = trunc i64 %173 to i32
  %175 = icmp eq i32 %146, %174
  br i1 %175, label %159, label %165, !llvm.loop !559

176:                                              ; preds = %159, %97
  %177 = add nuw nsw i64 %98, 1
  %178 = load i32, ptr @numcells, align 4, !tbaa !17
  %179 = sext i32 %178 to i64
  %180 = icmp slt i64 %98, %179
  br i1 %180, label %97, label %181, !llvm.loop !560

181:                                              ; preds = %176
  %182 = load i32, ptr @numXspots, align 4, !tbaa !17
  br label %183

183:                                              ; preds = %181, %66
  %184 = phi i32 [ %182, %181 ], [ %67, %66 ]
  %185 = icmp sgt i32 %184, 0
  br i1 %185, label %188, label %186

186:                                              ; preds = %183
  store i32 0, ptr @spotPenalty, align 4, !tbaa !17
  %187 = load double, ptr @spot_control, align 8
  br label %286

188:                                              ; preds = %183
  %189 = load i32, ptr @blockt, align 4, !tbaa !17
  %190 = load i32, ptr @spotYhash, align 4, !tbaa !17
  %191 = sub nsw i32 %189, %190
  %192 = load i32, ptr @spotSize, align 4, !tbaa !17
  %193 = sdiv i32 %191, %192
  %194 = load i32, ptr @blockb, align 4, !tbaa !17
  %195 = sub nsw i32 %194, %190
  %196 = sdiv i32 %195, %192
  %197 = load i32, ptr @blockr, align 4, !tbaa !17
  %198 = load i32, ptr @spotXhash, align 4, !tbaa !17
  %199 = sub nsw i32 %197, %198
  %200 = sdiv i32 %199, %192
  %201 = load i32, ptr @blockl, align 4, !tbaa !17
  %202 = sub nsw i32 %201, %198
  %203 = sdiv i32 %202, %192
  %204 = sext i32 %193 to i64
  %205 = sext i32 %196 to i64
  %206 = sext i32 %200 to i64
  %207 = sext i32 %203 to i64
  %208 = load i32, ptr @numYspots, align 4, !tbaa !17
  br label %209

209:                                              ; preds = %241, %188
  %210 = phi i32 [ %184, %188 ], [ %242, %241 ]
  %211 = phi i32 [ %208, %188 ], [ %243, %241 ]
  %212 = phi i32 [ %208, %188 ], [ %244, %241 ]
  %213 = phi i64 [ 0, %188 ], [ %245, %241 ]
  %214 = icmp sgt i32 %212, 0
  br i1 %214, label %215, label %241

215:                                              ; preds = %209
  %216 = icmp slt i64 %213, %207
  %217 = icmp sgt i64 %213, %206
  %218 = select i1 %216, i1 true, i1 %217
  br label %219

219:                                              ; preds = %234, %215
  %220 = phi i32 [ %211, %215 ], [ %235, %234 ]
  %221 = phi i64 [ 0, %215 ], [ %236, %234 ]
  %222 = icmp slt i64 %221, %205
  %223 = select i1 %218, i1 true, i1 %222
  %224 = icmp sgt i64 %221, %204
  %225 = select i1 %223, i1 true, i1 %224
  br i1 %225, label %226, label %234

226:                                              ; preds = %219
  %227 = load ptr, ptr @spots, align 8, !tbaa !7
  %228 = getelementptr inbounds ptr, ptr %227, i64 %213
  %229 = load ptr, ptr %228, align 8, !tbaa !7
  %230 = getelementptr inbounds i8, ptr %229, i64 %221
  %231 = load i8, ptr %230, align 1, !tbaa !79
  %232 = add i8 %231, 1
  store i8 %232, ptr %230, align 1, !tbaa !79
  %233 = load i32, ptr @numYspots, align 4, !tbaa !17
  br label %234

234:                                              ; preds = %226, %219
  %235 = phi i32 [ %220, %219 ], [ %233, %226 ]
  %236 = add nuw nsw i64 %221, 1
  %237 = sext i32 %235 to i64
  %238 = icmp slt i64 %236, %237
  br i1 %238, label %219, label %239, !llvm.loop !561

239:                                              ; preds = %234
  %.lcssa = phi i32 [ %235, %234 ]
  %240 = load i32, ptr @numXspots, align 4, !tbaa !17
  br label %241

241:                                              ; preds = %239, %209
  %242 = phi i32 [ %240, %239 ], [ %210, %209 ]
  %243 = phi i32 [ %.lcssa, %239 ], [ %211, %209 ]
  %244 = phi i32 [ %.lcssa, %239 ], [ %212, %209 ]
  %245 = add nuw nsw i64 %213, 1
  %246 = sext i32 %242 to i64
  %247 = icmp slt i64 %245, %246
  br i1 %247, label %209, label %248, !llvm.loop !562

248:                                              ; preds = %241
  %.lcssa1 = phi i32 [ %242, %241 ]
  store i32 0, ptr @spotPenalty, align 4, !tbaa !17
  %249 = icmp sgt i32 %.lcssa1, 0
  %250 = load double, ptr @spot_control, align 8
  br i1 %249, label %251, label %286

251:                                              ; preds = %248
  %252 = load i32, ptr @numYspots, align 4, !tbaa !17
  %253 = icmp sgt i32 %252, 0
  %254 = load ptr, ptr @spots, align 8
  %255 = load i32, ptr @spotSize, align 4
  %256 = sitofp i32 %255 to double
  %257 = zext i32 %.lcssa1 to i64
  %258 = zext i32 %252 to i64
  br label %259

259:                                              ; preds = %282, %251
  %260 = phi i64 [ 0, %251 ], [ %284, %282 ]
  %261 = phi i32 [ 0, %251 ], [ %283, %282 ]
  br i1 %253, label %262, label %282

262:                                              ; preds = %259
  %263 = getelementptr inbounds ptr, ptr %254, i64 %260
  %264 = load ptr, ptr %263, align 8, !tbaa !7
  br label %265

265:                                              ; preds = %265, %262
  %266 = phi i64 [ 0, %262 ], [ %280, %265 ]
  %267 = phi i32 [ %261, %262 ], [ %279, %265 ]
  %268 = getelementptr inbounds i8, ptr %264, i64 %266
  %269 = load i8, ptr %268, align 1, !tbaa !79
  %270 = sext i8 %269 to i32
  %271 = icmp sgt i8 %269, 0
  %272 = add nsw i32 %270, -1
  %273 = sub nsw i32 1, %270
  %274 = select i1 %271, i32 %272, i32 %273
  %275 = sitofp i32 %274 to double
  %276 = fmul double %250, %275
  %277 = fmul double %276, %256
  %278 = fptosi double %277 to i32
  %279 = add nsw i32 %267, %278
  store i32 %279, ptr @spotPenalty, align 4, !tbaa !17
  %280 = add nuw nsw i64 %266, 1
  %281 = icmp eq i64 %280, %258
  br i1 %281, label %282, label %265, !llvm.loop !563

282:                                              ; preds = %265, %259
  %283 = phi i32 [ %261, %259 ], [ %279, %265 ]
  %284 = add nuw nsw i64 %260, 1
  %285 = icmp eq i64 %284, %257
  br i1 %285, label %286, label %259, !llvm.loop !564

286:                                              ; preds = %282, %248, %186
  %287 = phi double [ %187, %186 ], [ %250, %248 ], [ %250, %282 ]
  %288 = load ptr, ptr @fpo, align 8, !tbaa !7
  %289 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %288, ptr noundef nonnull @.str.32, double noundef %287) #43
  %290 = load ptr, ptr @fpo, align 8, !tbaa !7
  %291 = load i32, ptr @spotSize, align 4, !tbaa !17
  %292 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %290, ptr noundef nonnull @.str.33, i32 noundef %291) #43
  %293 = load ptr, ptr @fpo, align 8, !tbaa !7
  %294 = load i32, ptr @spotPenalty, align 4, !tbaa !17
  %295 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %293, ptr noundef nonnull @.str.34, i32 noundef %294) #43
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @makebins(i32 noundef %0) #5 {
  %2 = sitofp i32 %0 to double
  br label %3

3:                                                ; preds = %26, %1
  %4 = phi i32 [ 1, %1 ], [ %27, %26 ]
  %5 = sitofp i32 %4 to double
  br label %9

6:                                                ; preds = %9
  %7 = add nuw nsw i32 %10, 1
  %8 = icmp eq i32 %7, 100
  br i1 %8, label %26, label %9, !llvm.loop !565

9:                                                ; preds = %6, %3
  %10 = phi i32 [ 0, %3 ], [ %7, %6 ]
  %11 = sitofp i32 %10 to double
  %12 = fdiv double %11, 1.000000e+02
  %13 = fadd double %12, %5
  %14 = tail call double @pow(double noundef %13, double noundef 4.000000e+00) #44
  %15 = tail call double @sqrt(double noundef %2) #44
  %16 = tail call double @llvm.fmuladd.f64(double %15, double 2.000000e+00, double 2.000000e+00)
  %17 = tail call double @pow(double noundef %13, double noundef 3.000000e+00) #44
  %18 = fneg double %16
  %19 = tail call double @llvm.fmuladd.f64(double %18, double %17, double %14)
  %20 = tail call double @sqrt(double noundef %2) #44
  %21 = tail call double @llvm.fmuladd.f64(double %20, double 2.000000e+00, double 1.000000e+00)
  %22 = fmul double %13, %13
  %23 = tail call double @llvm.fmuladd.f64(double %21, double %22, double %19)
  %24 = fadd double %23, %2
  %25 = fcmp olt double %24, 0.000000e+00
  br i1 %25, label %29, label %6

26:                                               ; preds = %6
  %.lcssa5 = phi double [ %13, %6 ]
  %27 = add nuw nsw i32 %4, 1
  %28 = icmp ult i32 %4, 19
  br i1 %28, label %3, label %29, !llvm.loop !566

29:                                               ; preds = %26, %9
  %.lcssa4 = phi double [ %.lcssa5, %26 ], [ %13, %9 ]
  %30 = fptosi double %.lcssa4 to i32
  %31 = shl i32 %30, 1
  %32 = add i32 %31, 2
  %33 = icmp slt i32 %30, 0
  br i1 %33, label %66, label %34

34:                                               ; preds = %29
  %35 = tail call double @llvm.fmuladd.f64(double %.lcssa4, double %.lcssa4, double -5.000000e-01)
  %36 = fneg double %.lcssa4
  %37 = add i32 %30, 1
  br label %43

38:                                               ; preds = %58
  %.lcssa3 = phi i32 [ %59, %58 ]
  %.lcssa2 = phi i32 [ %60, %58 ]
  br i1 %33, label %64, label %39

39:                                               ; preds = %38
  %40 = tail call double @llvm.fmuladd.f64(double %.lcssa4, double %.lcssa4, double -5.000000e-01)
  %41 = fneg double %.lcssa4
  %42 = add i32 %30, 1
  br label %72

43:                                               ; preds = %58, %34
  %44 = phi i32 [ 32000, %34 ], [ %61, %58 ]
  %45 = phi i32 [ 1, %34 ], [ %62, %58 ]
  %46 = phi i32 [ undef, %34 ], [ %60, %58 ]
  %47 = phi i32 [ 100, %34 ], [ %59, %58 ]
  %48 = sub nsw i32 %32, %45
  %49 = mul nsw i32 %48, %45
  %50 = sitofp i32 %49 to double
  %51 = fcmp ogt double %35, %50
  br i1 %51, label %58, label %52

52:                                               ; preds = %43
  %53 = tail call double @llvm.fmuladd.f64(double %36, double %.lcssa4, double %50)
  %54 = sitofp i32 %44 to double
  %55 = fcmp olt double %53, %54
  br i1 %55, label %56, label %58

56:                                               ; preds = %52
  %57 = fptosi double %53 to i32
  br label %58

58:                                               ; preds = %56, %52, %43
  %59 = phi i32 [ %47, %43 ], [ %45, %56 ], [ %47, %52 ]
  %60 = phi i32 [ %46, %43 ], [ %48, %56 ], [ %46, %52 ]
  %61 = phi i32 [ %44, %43 ], [ %57, %56 ], [ %44, %52 ]
  %62 = add nuw i32 %45, 1
  %63 = icmp eq i32 %45, %37
  br i1 %63, label %38, label %43, !llvm.loop !567

64:                                               ; preds = %38
  %65 = icmp slt i32 %.lcssa3, 100
  br i1 %65, label %141, label %66

66:                                               ; preds = %64, %29
  br label %141

67:                                               ; preds = %88
  %.lcssa1 = phi i32 [ %89, %88 ]
  %.lcssa = phi i32 [ %90, %88 ]
  br i1 %33, label %115, label %68

68:                                               ; preds = %67
  %69 = tail call double @llvm.fmuladd.f64(double %.lcssa4, double %.lcssa4, double -5.000000e-01)
  %70 = fneg double %.lcssa4
  %71 = add i32 %30, 1
  br label %94

72:                                               ; preds = %88, %39
  %73 = phi i32 [ 32000, %39 ], [ %91, %88 ]
  %74 = phi i32 [ 1, %39 ], [ %92, %88 ]
  %75 = phi i32 [ undef, %39 ], [ %90, %88 ]
  %76 = phi i32 [ 100, %39 ], [ %89, %88 ]
  %77 = xor i32 %74, -1
  %78 = add i32 %32, %77
  %79 = mul nsw i32 %78, %74
  %80 = sitofp i32 %79 to double
  %81 = fcmp ogt double %40, %80
  br i1 %81, label %88, label %82

82:                                               ; preds = %72
  %83 = tail call double @llvm.fmuladd.f64(double %41, double %.lcssa4, double %80)
  %84 = sitofp i32 %73 to double
  %85 = fcmp olt double %83, %84
  br i1 %85, label %86, label %88

86:                                               ; preds = %82
  %87 = fptosi double %83 to i32
  br label %88

88:                                               ; preds = %86, %82, %72
  %89 = phi i32 [ %76, %72 ], [ %74, %86 ], [ %76, %82 ]
  %90 = phi i32 [ %75, %72 ], [ %78, %86 ], [ %75, %82 ]
  %91 = phi i32 [ %73, %72 ], [ %87, %86 ], [ %73, %82 ]
  %92 = add nuw i32 %74, 1
  %93 = icmp eq i32 %74, %42
  br i1 %93, label %67, label %72, !llvm.loop !568

94:                                               ; preds = %109, %68
  %95 = phi i32 [ 32000, %68 ], [ %112, %109 ]
  %96 = phi i32 [ 1, %68 ], [ %113, %109 ]
  %97 = phi i32 [ undef, %68 ], [ %111, %109 ]
  %98 = phi i32 [ 100, %68 ], [ %110, %109 ]
  %99 = sub i32 %31, %96
  %100 = mul nsw i32 %99, %96
  %101 = sitofp i32 %100 to double
  %102 = fcmp ogt double %69, %101
  br i1 %102, label %109, label %103

103:                                              ; preds = %94
  %104 = tail call double @llvm.fmuladd.f64(double %70, double %.lcssa4, double %101)
  %105 = sitofp i32 %95 to double
  %106 = fcmp olt double %104, %105
  br i1 %106, label %107, label %109

107:                                              ; preds = %103
  %108 = fptosi double %104 to i32
  br label %109

109:                                              ; preds = %107, %103, %94
  %110 = phi i32 [ %98, %94 ], [ %96, %107 ], [ %98, %103 ]
  %111 = phi i32 [ %97, %94 ], [ %99, %107 ], [ %97, %103 ]
  %112 = phi i32 [ %95, %94 ], [ %108, %107 ], [ %95, %103 ]
  %113 = add nuw i32 %96, 1
  %114 = icmp eq i32 %96, %71
  br i1 %114, label %115, label %94, !llvm.loop !569

115:                                              ; preds = %109, %67
  %116 = phi i32 [ 100, %67 ], [ %110, %109 ]
  %117 = phi i32 [ undef, %67 ], [ %111, %109 ]
  %118 = icmp slt i32 %.lcssa1, 100
  %119 = icmp slt i32 %.lcssa3, 100
  %120 = select i1 %118, i1 %119, i1 false
  br i1 %120, label %121, label %127

121:                                              ; preds = %115
  %122 = mul nsw i32 %.lcssa, %.lcssa1
  %123 = mul nsw i32 %.lcssa2, %.lcssa3
  %124 = icmp sgt i32 %122, %123
  %125 = select i1 %124, i32 %.lcssa3, i32 %.lcssa1
  %126 = select i1 %124, i32 %.lcssa2, i32 %.lcssa
  br label %131

127:                                              ; preds = %115
  %128 = or i1 %119, %118
  %129 = select i1 %119, i32 %.lcssa2, i32 %.lcssa
  %130 = select i1 %119, i32 %.lcssa3, i32 %.lcssa1
  br i1 %128, label %131, label %141

131:                                              ; preds = %127, %121
  %132 = phi i32 [ %129, %127 ], [ %126, %121 ]
  %133 = phi i32 [ %130, %127 ], [ %125, %121 ]
  %134 = icmp slt i32 %116, 100
  br i1 %134, label %135, label %141

135:                                              ; preds = %131
  %136 = mul nsw i32 %133, %132
  %137 = mul nsw i32 %117, %116
  %138 = icmp slt i32 %136, %137
  %139 = select i1 %138, i32 %133, i32 %116
  %140 = select i1 %138, i32 %132, i32 %117
  br label %141

141:                                              ; preds = %135, %131, %127, %66, %64
  %142 = phi i32 [ %133, %131 ], [ %139, %135 ], [ 100, %66 ], [ %.lcssa3, %64 ], [ %116, %127 ]
  %143 = phi i32 [ %132, %131 ], [ %140, %135 ], [ undef, %66 ], [ %.lcssa2, %64 ], [ %117, %127 ]
  store i32 %142, ptr @numBinsX, align 4, !tbaa !17
  store i32 %143, ptr @numBinsY, align 4, !tbaa !17
  %144 = load ptr, ptr @fpo, align 8, !tbaa !7
  %145 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %144, ptr noundef nonnull @.str.390, i32 noundef %142) #43
  %146 = load ptr, ptr @fpo, align 8, !tbaa !7
  %147 = load i32, ptr @numBinsY, align 4, !tbaa !17
  %148 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %146, ptr noundef nonnull @.str.1.391, i32 noundef %147) #43
  %149 = load i32, ptr @numBinsX, align 4, !tbaa !17
  %150 = add nuw i32 %149, 1
  %151 = sext i32 %150 to i64
  %152 = shl nsw i64 %151, 3
  %153 = tail call noalias ptr @malloc(i64 noundef %152) #45
  store ptr %153, ptr @blockarray, align 8, !tbaa !7
  %154 = icmp sgt i32 %149, -1
  tail call void @llvm.assume(i1 %154)
  %155 = load i32, ptr @numBinsY, align 4, !tbaa !17
  %156 = add i32 %155, 1
  %157 = sext i32 %156 to i64
  %158 = shl nsw i64 %157, 3
  %159 = icmp slt i32 %155, 0
  %160 = load i32, ptr @numcells, align 4
  %161 = add nsw i32 %160, 5
  %162 = sext i32 %161 to i64
  %163 = shl nsw i64 %162, 2
  %164 = zext i32 %150 to i64
  %165 = zext i32 %156 to i64
  br label %166

166:                                              ; preds = %180, %141
  %167 = phi i64 [ 0, %141 ], [ %181, %180 ]
  %168 = tail call noalias ptr @malloc(i64 noundef %158) #45
  %169 = load ptr, ptr @blockarray, align 8, !tbaa !7
  %170 = getelementptr inbounds ptr, ptr %169, i64 %167
  store ptr %168, ptr %170, align 8, !tbaa !7
  br i1 %159, label %180, label %171

171:                                              ; preds = %171, %166
  %172 = phi i64 [ %178, %171 ], [ 0, %166 ]
  %173 = tail call noalias ptr @malloc(i64 noundef %163) #45
  %174 = load ptr, ptr @blockarray, align 8, !tbaa !7
  %175 = getelementptr inbounds ptr, ptr %174, i64 %167
  %176 = load ptr, ptr %175, align 8, !tbaa !7
  %177 = getelementptr inbounds ptr, ptr %176, i64 %172
  store ptr %173, ptr %177, align 8, !tbaa !7
  %178 = add nuw nsw i64 %172, 1
  %179 = icmp eq i64 %178, %165
  br i1 %179, label %180, label %171, !llvm.loop !570

180:                                              ; preds = %171, %166
  %181 = add nuw nsw i64 %167, 1
  %182 = icmp eq i64 %181, %164
  br i1 %182, label %183, label %166, !llvm.loop !571

183:                                              ; preds = %180
  %184 = load ptr, ptr @blockarray, align 8, !tbaa !7
  %185 = load ptr, ptr %184, align 8, !tbaa !7
  %186 = load ptr, ptr %185, align 8, !tbaa !7
  store ptr %186, ptr @bucket, align 8, !tbaa !7
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite)
declare void @llvm.assume(i1 noundef) #30

; Function Attrs: nounwind optsize uwtable
define internal void @makelink() #0 {
  %1 = alloca ptr, align 8
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %1) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %3) #47
  %4 = tail call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #45
  store ptr %4, ptr @hFixedList, align 8, !tbaa !7
  %5 = load i32, ptr @edgeCount, align 4, !tbaa !17
  store i32 %5, ptr %4, align 8, !tbaa !138
  %6 = tail call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #45
  %7 = getelementptr inbounds %struct.dlink2, ptr %4, i64 0, i32 2
  store ptr %6, ptr %7, align 8, !tbaa !150
  %8 = getelementptr inbounds %struct.dlink2, ptr %4, i64 0, i32 1
  store ptr null, ptr %8, align 8, !tbaa !152
  %9 = getelementptr inbounds %struct.dlink2, ptr %6, i64 0, i32 2
  store ptr null, ptr %9, align 8, !tbaa !150
  %10 = getelementptr inbounds %struct.dlink2, ptr %6, i64 0, i32 1
  store ptr %4, ptr %10, align 8, !tbaa !152
  %11 = add nsw i32 %5, -2
  store i32 %11, ptr %6, align 8, !tbaa !138
  store ptr %6, ptr @hFixedEnd, align 8, !tbaa !7
  %12 = tail call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #45
  store ptr %12, ptr @vFixedList, align 8, !tbaa !7
  %13 = add nsw i32 %5, -3
  store i32 %13, ptr %12, align 8, !tbaa !138
  %14 = tail call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #45
  %15 = getelementptr inbounds %struct.dlink2, ptr %12, i64 0, i32 2
  store ptr %14, ptr %15, align 8, !tbaa !150
  %16 = getelementptr inbounds %struct.dlink2, ptr %12, i64 0, i32 1
  store ptr null, ptr %16, align 8, !tbaa !152
  %17 = getelementptr inbounds %struct.dlink2, ptr %14, i64 0, i32 2
  store ptr null, ptr %17, align 8, !tbaa !150
  %18 = getelementptr inbounds %struct.dlink2, ptr %14, i64 0, i32 1
  store ptr %12, ptr %18, align 8, !tbaa !152
  %19 = add nsw i32 %5, -1
  store i32 %19, ptr %14, align 8, !tbaa !138
  store ptr %14, ptr @vFixedEnd, align 8, !tbaa !7
  br label %20

20:                                               ; preds = %24, %0
  %21 = phi ptr [ %4, %0 ], [ %25, %24 ]
  call void @tpop(ptr noundef nonnull @hFixedEdgeRoot, ptr noundef nonnull %1, ptr noundef nonnull %2, ptr noundef nonnull %3) #44
  %22 = load ptr, ptr %1, align 8, !tbaa !7
  %23 = icmp eq ptr %22, null
  br i1 %23, label %30, label %24

24:                                               ; preds = %20
  %25 = call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #45
  %26 = load i32, ptr %3, align 4, !tbaa !17
  store i32 %26, ptr %25, align 8, !tbaa !138
  %27 = getelementptr inbounds %struct.dlink2, ptr %25, i64 0, i32 1
  store ptr %21, ptr %27, align 8, !tbaa !152
  %28 = getelementptr inbounds %struct.dlink2, ptr %25, i64 0, i32 2
  store ptr %6, ptr %28, align 8, !tbaa !150
  %29 = getelementptr inbounds %struct.dlink2, ptr %21, i64 0, i32 2
  store ptr %25, ptr %29, align 8, !tbaa !150
  store ptr %25, ptr %10, align 8, !tbaa !152
  br label %20

30:                                               ; preds = %20
  %31 = load ptr, ptr @vFixedList, align 8, !tbaa !7
  %32 = getelementptr inbounds %struct.dlink2, ptr %31, i64 0, i32 2
  %33 = load ptr, ptr %32, align 8, !tbaa !150
  %34 = getelementptr inbounds %struct.dlink2, ptr %33, i64 0, i32 1
  br label %35

35:                                               ; preds = %39, %30
  %36 = phi ptr [ %31, %30 ], [ %40, %39 ]
  call void @tpop(ptr noundef nonnull @vFixedEdgeRoot, ptr noundef nonnull %1, ptr noundef nonnull %2, ptr noundef nonnull %3) #44
  %37 = load ptr, ptr %1, align 8, !tbaa !7
  %38 = icmp eq ptr %37, null
  br i1 %38, label %45, label %39

39:                                               ; preds = %35
  %40 = call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #45
  %41 = load i32, ptr %3, align 4, !tbaa !17
  store i32 %41, ptr %40, align 8, !tbaa !138
  %42 = getelementptr inbounds %struct.dlink2, ptr %40, i64 0, i32 1
  store ptr %36, ptr %42, align 8, !tbaa !152
  %43 = getelementptr inbounds %struct.dlink2, ptr %40, i64 0, i32 2
  store ptr %33, ptr %43, align 8, !tbaa !150
  %44 = getelementptr inbounds %struct.dlink2, ptr %36, i64 0, i32 2
  store ptr %40, ptr %44, align 8, !tbaa !150
  store ptr %40, ptr %34, align 8, !tbaa !152
  br label %35

45:                                               ; preds = %35
  call void @makeVtree() #43
  call void @makeHtree() #43
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %3) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #47
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %1) #47
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @makeVtree() #0 {
  store ptr null, ptr @Vroot, align 8, !tbaa !7
  %1 = tail call noalias dereferenceable_or_null(800) ptr @malloc(i64 noundef 800) #45
  store ptr %1, ptr @Vptrs, align 8, !tbaa !7
  %2 = load ptr, ptr @vFixedList, align 8, !tbaa !7
  %3 = icmp eq ptr %2, null
  br i1 %3, label %38, label %4

4:                                                ; preds = %0
  %5 = load ptr, ptr @edgeList, align 8, !tbaa !7
  br label %6

6:                                                ; preds = %31, %4
  %7 = phi ptr [ %32, %31 ], [ %5, %4 ]
  %8 = phi ptr [ %36, %31 ], [ %2, %4 ]
  %9 = phi i32 [ %34, %31 ], [ 0, %4 ]
  %10 = phi i32 [ %33, %31 ], [ -1000000, %4 ]
  %11 = load i32, ptr %8, align 8, !tbaa !138
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds %struct.edgebox, ptr %7, i64 %12, i32 3
  %14 = load i32, ptr %13, align 4, !tbaa !140
  %15 = icmp sgt i32 %14, %10
  br i1 %15, label %16, label %31

16:                                               ; preds = %6
  %17 = add nsw i32 %9, 1
  %18 = srem i32 %17, 100
  %19 = icmp eq i32 %18, 0
  %20 = load ptr, ptr @Vptrs, align 8, !tbaa !7
  br i1 %19, label %21, label %26

21:                                               ; preds = %16
  %22 = add nsw i32 %9, 101
  %23 = sext i32 %22 to i64
  %24 = shl nsw i64 %23, 3
  %25 = tail call ptr @realloc(ptr noundef %20, i64 noundef %24) #46
  store ptr %25, ptr @Vptrs, align 8, !tbaa !7
  br label %26

26:                                               ; preds = %21, %16
  %27 = phi ptr [ %25, %21 ], [ %20, %16 ]
  %28 = sext i32 %17 to i64
  %29 = getelementptr inbounds ptr, ptr %27, i64 %28
  store ptr %8, ptr %29, align 8, !tbaa !7
  tail call void @tinsert(ptr noundef nonnull @Vroot, i32 noundef %14, i32 noundef %17) #44
  %30 = load ptr, ptr @edgeList, align 8, !tbaa !7
  br label %31

31:                                               ; preds = %26, %6
  %32 = phi ptr [ %30, %26 ], [ %7, %6 ]
  %33 = phi i32 [ %14, %26 ], [ %10, %6 ]
  %34 = phi i32 [ %17, %26 ], [ %9, %6 ]
  %35 = getelementptr inbounds %struct.dlink2, ptr %8, i64 0, i32 2
  %36 = load ptr, ptr %35, align 8, !tbaa !7
  %37 = icmp eq ptr %36, null
  br i1 %37, label %38, label %6, !llvm.loop !572

38:                                               ; preds = %31, %0
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @makeHtree() #0 {
  store ptr null, ptr @Hroot, align 8, !tbaa !7
  %1 = tail call noalias dereferenceable_or_null(800) ptr @malloc(i64 noundef 800) #45
  store ptr %1, ptr @Hptrs, align 8, !tbaa !7
  %2 = load ptr, ptr @hFixedList, align 8, !tbaa !7
  %3 = icmp eq ptr %2, null
  br i1 %3, label %38, label %4

4:                                                ; preds = %0
  %5 = load ptr, ptr @edgeList, align 8, !tbaa !7
  br label %6

6:                                                ; preds = %31, %4
  %7 = phi ptr [ %32, %31 ], [ %5, %4 ]
  %8 = phi ptr [ %36, %31 ], [ %2, %4 ]
  %9 = phi i32 [ %34, %31 ], [ 0, %4 ]
  %10 = phi i32 [ %33, %31 ], [ -1000000, %4 ]
  %11 = load i32, ptr %8, align 8, !tbaa !138
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds %struct.edgebox, ptr %7, i64 %12, i32 3
  %14 = load i32, ptr %13, align 4, !tbaa !140
  %15 = icmp sgt i32 %14, %10
  br i1 %15, label %16, label %31

16:                                               ; preds = %6
  %17 = add nsw i32 %9, 1
  %18 = srem i32 %17, 100
  %19 = icmp eq i32 %18, 0
  %20 = load ptr, ptr @Hptrs, align 8, !tbaa !7
  br i1 %19, label %21, label %26

21:                                               ; preds = %16
  %22 = add nsw i32 %9, 101
  %23 = sext i32 %22 to i64
  %24 = shl nsw i64 %23, 3
  %25 = tail call ptr @realloc(ptr noundef %20, i64 noundef %24) #46
  store ptr %25, ptr @Hptrs, align 8, !tbaa !7
  br label %26

26:                                               ; preds = %21, %16
  %27 = phi ptr [ %25, %21 ], [ %20, %16 ]
  %28 = sext i32 %17 to i64
  %29 = getelementptr inbounds ptr, ptr %27, i64 %28
  store ptr %8, ptr %29, align 8, !tbaa !7
  tail call void @tinsert(ptr noundef nonnull @Hroot, i32 noundef %14, i32 noundef %17) #44
  %30 = load ptr, ptr @edgeList, align 8, !tbaa !7
  br label %31

31:                                               ; preds = %26, %6
  %32 = phi ptr [ %30, %26 ], [ %7, %6 ]
  %33 = phi i32 [ %14, %26 ], [ %10, %6 ]
  %34 = phi i32 [ %17, %26 ], [ %9, %6 ]
  %35 = getelementptr inbounds %struct.dlink2, ptr %8, i64 0, i32 2
  %36 = load ptr, ptr %35, align 8, !tbaa !7
  %37 = icmp eq ptr %36, null
  br i1 %37, label %38, label %6, !llvm.loop !573

38:                                               ; preds = %31, %0
  ret void
}

; Function Attrs: nofree nounwind optsize memory(readwrite, inaccessiblemem: write) uwtable
define internal i32 @Vside(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4) #21 {
  %6 = sub nsw i32 %3, %2
  %7 = tail call i32 @llvm.abs.i32(i32 %6, i1 true)
  %8 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %9 = sext i32 %0 to i64
  %10 = getelementptr inbounds ptr, ptr %8, i64 %9
  %11 = load ptr, ptr %10, align 8, !tbaa !7
  %12 = getelementptr inbounds %struct.cellbox, ptr %11, i64 0, i32 16
  %13 = load double, ptr %12, align 8, !tbaa !574
  %14 = fadd double %13, 1.000000e-02
  %15 = getelementptr inbounds %struct.cellbox, ptr %11, i64 0, i32 15
  %16 = load double, ptr %15, align 8, !tbaa !575
  %17 = fcmp ogt double %14, %16
  br i1 %17, label %23, label %18

18:                                               ; preds = %5
  %19 = getelementptr inbounds %struct.cellbox, ptr %11, i64 0, i32 13
  %20 = load double, ptr %19, align 8, !tbaa !237
  %21 = fdiv double %13, %20
  %22 = tail call double @sqrt(double noundef %21) #44
  br label %23

23:                                               ; preds = %18, %5
  %24 = phi double [ %22, %18 ], [ 1.000000e+00, %5 ]
  %25 = sitofp i32 %7 to double
  %26 = fmul double %24, %25
  %27 = fptosi double %26 to i32
  %28 = add nsw i32 %27, 1
  %29 = sitofp i32 %28 to double
  %30 = fdiv double %29, %24
  %31 = fsub double %30, %25
  %32 = sitofp i32 %27 to double
  %33 = fdiv double %32, %24
  %34 = fsub double %25, %33
  %35 = fcmp olt double %31, %34
  %36 = select i1 %35, i32 %28, i32 %27
  %37 = load i32, ptr @pinSpacing, align 4, !tbaa !17
  %38 = sdiv i32 %36, %37
  %39 = add i32 %38, -1
  %40 = icmp eq i32 %4, 0
  br i1 %40, label %41, label %44

41:                                               ; preds = %23
  %42 = icmp slt i32 %38, 52
  %43 = select i1 %42, i32 %39, i32 50
  br label %164

44:                                               ; preds = %23
  %45 = icmp sgt i32 %38, 51
  br i1 %45, label %48, label %46

46:                                               ; preds = %44
  %47 = icmp sgt i32 %38, 1
  br i1 %47, label %73, label %84

48:                                               ; preds = %44
  %49 = load ptr, ptr @kArray, align 8, !tbaa !7
  %50 = getelementptr i8, ptr %49, i64 20
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(1000) %50, i8 0, i64 1000, i1 false), !tbaa !17
  %51 = udiv i32 %39, 50
  %52 = urem i32 %39, 50
  br label %59

53:                                               ; preds = %59
  %54 = icmp eq i32 %52, 0
  br i1 %54, label %84, label %55

55:                                               ; preds = %53
  %56 = mul i32 %51, -50
  %57 = add i32 %56, %38
  %58 = zext i32 %57 to i64
  br label %66

59:                                               ; preds = %59, %48
  %60 = phi i64 [ 1, %48 ], [ %64, %59 ]
  %61 = getelementptr inbounds %struct.contentbox, ptr %49, i64 %60
  %62 = load i32, ptr %61, align 4, !tbaa !576
  %63 = add nsw i32 %62, %51
  store i32 %63, ptr %61, align 4, !tbaa !576
  %64 = add nuw nsw i64 %60, 1
  %65 = icmp eq i64 %64, 51
  br i1 %65, label %53, label %59, !llvm.loop !578

66:                                               ; preds = %66, %55
  %67 = phi i64 [ 1, %55 ], [ %71, %66 ]
  %68 = getelementptr inbounds %struct.contentbox, ptr %49, i64 %67
  %69 = load i32, ptr %68, align 4, !tbaa !576
  %70 = add nsw i32 %69, 1
  store i32 %70, ptr %68, align 4, !tbaa !576
  %71 = add nuw nsw i64 %67, 1
  %72 = icmp eq i64 %71, %58
  br i1 %72, label %84, label %66, !llvm.loop !579

73:                                               ; preds = %46
  %74 = load ptr, ptr @kArray, align 8, !tbaa !7
  %75 = getelementptr i8, ptr %74, i64 20
  %76 = zext i32 %39 to i64
  %77 = mul nuw nsw i64 %76, 20
  tail call void @llvm.memset.p0.i64(ptr align 4 %75, i8 0, i64 %77, i1 false), !tbaa !17
  %78 = zext i32 %38 to i64
  br label %79

79:                                               ; preds = %79, %73
  %80 = phi i64 [ 1, %73 ], [ %82, %79 ]
  %81 = getelementptr inbounds %struct.contentbox, ptr %74, i64 %80
  store i32 1, ptr %81, align 4, !tbaa !576
  %82 = add nuw nsw i64 %80, 1
  %83 = icmp eq i64 %82, %78
  br i1 %83, label %84, label %79, !llvm.loop !580

84:                                               ; preds = %79, %66, %53, %46
  %85 = icmp slt i32 %38, 52
  %86 = select i1 %85, i32 %39, i32 50
  %87 = add i32 %86, 1
  %88 = sitofp i32 %87 to double
  %89 = fdiv double %25, %88
  %90 = icmp sgt i32 %3, %2
  %91 = icmp slt i32 %86, 1
  br i1 %90, label %98, label %92

92:                                               ; preds = %84
  br i1 %91, label %164, label %93

93:                                               ; preds = %92
  %94 = load ptr, ptr @kArray, align 8, !tbaa !7
  %95 = zext i32 %87 to i64
  %96 = insertelement <2 x double> poison, double %89, i64 0
  %97 = shufflevector <2 x double> %96, <2 x double> poison, <2 x i32> zeroinitializer
  br label %131

98:                                               ; preds = %84
  br i1 %91, label %164, label %99

99:                                               ; preds = %98
  %100 = load ptr, ptr @kArray, align 8, !tbaa !7
  %101 = zext i32 %87 to i64
  %102 = insertelement <2 x double> poison, double %89, i64 0
  %103 = shufflevector <2 x double> %102, <2 x double> poison, <2 x i32> zeroinitializer
  br label %104

104:                                              ; preds = %104, %99
  %105 = phi i64 [ 1, %99 ], [ %107, %104 ]
  %106 = getelementptr inbounds %struct.contentbox, ptr %100, i64 %105, i32 3
  store i32 %1, ptr %106, align 4, !tbaa !581
  %107 = add nuw nsw i64 %105, 1
  %108 = getelementptr inbounds %struct.contentbox, ptr %100, i64 %105, i32 4
  %109 = insertelement <2 x i64> poison, i64 %107, i64 0
  %110 = insertelement <2 x i64> %109, i64 %105, i64 1
  %111 = trunc <2 x i64> %110 to <2 x i32>
  %112 = sitofp <2 x i32> %111 to <2 x double>
  %113 = fmul <2 x double> %103, %112
  %114 = fptosi <2 x double> %113 to <2 x i32>
  %115 = sitofp <2 x i32> %114 to <2 x double>
  %116 = fsub <2 x double> %113, %115
  %117 = fcmp oge <2 x double> %116, <double 5.000000e-01, double 5.000000e-01>
  %118 = extractelement <2 x i1> %117, i64 1
  %119 = zext i1 %118 to i32
  %120 = extractelement <2 x i32> %114, i64 1
  %121 = add nsw i32 %120, %119
  %122 = add nsw i32 %121, %2
  store i32 %122, ptr %108, align 4, !tbaa !582
  %123 = extractelement <2 x i1> %117, i64 0
  %124 = zext i1 %123 to i32
  %125 = extractelement <2 x i32> %114, i64 0
  %126 = add nsw i32 %125, %124
  %127 = sub i32 %126, %121
  %128 = getelementptr inbounds %struct.contentbox, ptr %100, i64 %105, i32 2
  store i32 %127, ptr %128, align 4, !tbaa !583
  %129 = getelementptr inbounds %struct.contentbox, ptr %100, i64 %105, i32 1
  store i32 1, ptr %129, align 4, !tbaa !584
  %130 = icmp eq i64 %107, %101
  br i1 %130, label %158, label %104, !llvm.loop !585

131:                                              ; preds = %131, %93
  %132 = phi i64 [ 1, %93 ], [ %134, %131 ]
  %133 = getelementptr inbounds %struct.contentbox, ptr %94, i64 %132, i32 3
  store i32 %1, ptr %133, align 4, !tbaa !581
  %134 = add nuw nsw i64 %132, 1
  %135 = getelementptr inbounds %struct.contentbox, ptr %94, i64 %132, i32 4
  %136 = insertelement <2 x i64> poison, i64 %134, i64 0
  %137 = insertelement <2 x i64> %136, i64 %132, i64 1
  %138 = trunc <2 x i64> %137 to <2 x i32>
  %139 = sitofp <2 x i32> %138 to <2 x double>
  %140 = fmul <2 x double> %97, %139
  %141 = fptosi <2 x double> %140 to <2 x i32>
  %142 = sitofp <2 x i32> %141 to <2 x double>
  %143 = fsub <2 x double> %140, %142
  %144 = fcmp oge <2 x double> %143, <double 5.000000e-01, double 5.000000e-01>
  %145 = extractelement <2 x i1> %144, i64 1
  %146 = zext i1 %145 to i32
  %147 = extractelement <2 x i32> %141, i64 1
  %148 = add nsw i32 %147, %146
  %149 = sub nsw i32 %2, %148
  store i32 %149, ptr %135, align 4, !tbaa !582
  %150 = extractelement <2 x i1> %144, i64 0
  %151 = zext i1 %150 to i32
  %152 = extractelement <2 x i32> %141, i64 0
  %153 = add nsw i32 %152, %151
  %154 = sub i32 %153, %148
  %155 = getelementptr inbounds %struct.contentbox, ptr %94, i64 %132, i32 2
  store i32 %154, ptr %155, align 4, !tbaa !583
  %156 = getelementptr inbounds %struct.contentbox, ptr %94, i64 %132, i32 1
  store i32 1, ptr %156, align 4, !tbaa !584
  %157 = icmp eq i64 %134, %95
  br i1 %157, label %161, label %131, !llvm.loop !586

158:                                              ; preds = %104
  %.lcssa = phi <2 x double> [ %113, %104 ]
  %159 = extractelement <2 x double> %.lcssa, i64 0
  store double %159, ptr @val1, align 8, !tbaa !36
  %160 = extractelement <2 x double> %.lcssa, i64 1
  store double %160, ptr @val2, align 8, !tbaa !36
  br label %164

161:                                              ; preds = %131
  %.lcssa1 = phi <2 x double> [ %140, %131 ]
  %162 = extractelement <2 x double> %.lcssa1, i64 0
  store double %162, ptr @val1, align 8, !tbaa !36
  %163 = extractelement <2 x double> %.lcssa1, i64 1
  store double %163, ptr @val2, align 8, !tbaa !36
  br label %164

164:                                              ; preds = %161, %158, %98, %92, %41
  %165 = phi i32 [ %43, %41 ], [ %86, %158 ], [ %39, %98 ], [ %86, %161 ], [ %39, %92 ]
  ret i32 %165
}

; Function Attrs: nofree nounwind optsize memory(readwrite, inaccessiblemem: write) uwtable
define internal i32 @Hside(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4) #21 {
  %6 = sub nsw i32 %2, %1
  %7 = tail call i32 @llvm.abs.i32(i32 %6, i1 true)
  %8 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %9 = sext i32 %0 to i64
  %10 = getelementptr inbounds ptr, ptr %8, i64 %9
  %11 = load ptr, ptr %10, align 8, !tbaa !7
  %12 = getelementptr inbounds %struct.cellbox, ptr %11, i64 0, i32 15
  %13 = load double, ptr %12, align 8, !tbaa !575
  %14 = getelementptr inbounds %struct.cellbox, ptr %11, i64 0, i32 16
  %15 = load double, ptr %14, align 8, !tbaa !574
  %16 = fadd double %15, 1.000000e-02
  %17 = fcmp ogt double %16, %13
  br i1 %17, label %23, label %18

18:                                               ; preds = %5
  %19 = getelementptr inbounds %struct.cellbox, ptr %11, i64 0, i32 13
  %20 = load double, ptr %19, align 8, !tbaa !237
  %21 = fdiv double %20, %13
  %22 = tail call double @sqrt(double noundef %21) #44
  br label %23

23:                                               ; preds = %18, %5
  %24 = phi double [ %22, %18 ], [ 1.000000e+00, %5 ]
  %25 = sitofp i32 %7 to double
  %26 = fmul double %24, %25
  %27 = fptosi double %26 to i32
  %28 = add nsw i32 %27, 1
  %29 = sitofp i32 %28 to double
  %30 = fdiv double %29, %24
  %31 = fsub double %30, %25
  %32 = sitofp i32 %27 to double
  %33 = fdiv double %32, %24
  %34 = fsub double %25, %33
  %35 = fcmp olt double %31, %34
  %36 = select i1 %35, i32 %28, i32 %27
  %37 = load i32, ptr @pinSpacing, align 4, !tbaa !17
  %38 = sdiv i32 %36, %37
  %39 = add i32 %38, -1
  %40 = icmp eq i32 %4, 0
  br i1 %40, label %41, label %44

41:                                               ; preds = %23
  %42 = icmp slt i32 %38, 52
  %43 = select i1 %42, i32 %39, i32 50
  br label %160

44:                                               ; preds = %23
  %45 = icmp sgt i32 %38, 51
  br i1 %45, label %48, label %46

46:                                               ; preds = %44
  %47 = icmp sgt i32 %38, 1
  br i1 %47, label %73, label %84

48:                                               ; preds = %44
  %49 = load ptr, ptr @kArray, align 8, !tbaa !7
  %50 = getelementptr i8, ptr %49, i64 20
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(1000) %50, i8 0, i64 1000, i1 false), !tbaa !17
  %51 = udiv i32 %39, 50
  %52 = urem i32 %39, 50
  br label %59

53:                                               ; preds = %59
  %54 = icmp eq i32 %52, 0
  br i1 %54, label %84, label %55

55:                                               ; preds = %53
  %56 = mul i32 %51, -50
  %57 = add i32 %56, %38
  %58 = zext i32 %57 to i64
  br label %66

59:                                               ; preds = %59, %48
  %60 = phi i64 [ 1, %48 ], [ %64, %59 ]
  %61 = getelementptr inbounds %struct.contentbox, ptr %49, i64 %60
  %62 = load i32, ptr %61, align 4, !tbaa !576
  %63 = add nsw i32 %62, %51
  store i32 %63, ptr %61, align 4, !tbaa !576
  %64 = add nuw nsw i64 %60, 1
  %65 = icmp eq i64 %64, 51
  br i1 %65, label %53, label %59, !llvm.loop !587

66:                                               ; preds = %66, %55
  %67 = phi i64 [ 1, %55 ], [ %71, %66 ]
  %68 = getelementptr inbounds %struct.contentbox, ptr %49, i64 %67
  %69 = load i32, ptr %68, align 4, !tbaa !576
  %70 = add nsw i32 %69, 1
  store i32 %70, ptr %68, align 4, !tbaa !576
  %71 = add nuw nsw i64 %67, 1
  %72 = icmp eq i64 %71, %58
  br i1 %72, label %84, label %66, !llvm.loop !588

73:                                               ; preds = %46
  %74 = load ptr, ptr @kArray, align 8, !tbaa !7
  %75 = getelementptr i8, ptr %74, i64 20
  %76 = zext i32 %39 to i64
  %77 = mul nuw nsw i64 %76, 20
  tail call void @llvm.memset.p0.i64(ptr align 4 %75, i8 0, i64 %77, i1 false), !tbaa !17
  %78 = zext i32 %38 to i64
  br label %79

79:                                               ; preds = %79, %73
  %80 = phi i64 [ 1, %73 ], [ %82, %79 ]
  %81 = getelementptr inbounds %struct.contentbox, ptr %74, i64 %80
  store i32 1, ptr %81, align 4, !tbaa !576
  %82 = add nuw nsw i64 %80, 1
  %83 = icmp eq i64 %82, %78
  br i1 %83, label %84, label %79, !llvm.loop !589

84:                                               ; preds = %79, %66, %53, %46
  %85 = icmp slt i32 %38, 52
  %86 = select i1 %85, i32 %39, i32 50
  %87 = add i32 %86, 1
  %88 = sitofp i32 %87 to double
  %89 = fdiv double %25, %88
  %90 = icmp sgt i32 %2, %1
  %91 = icmp slt i32 %86, 1
  br i1 %90, label %98, label %92

92:                                               ; preds = %84
  br i1 %91, label %160, label %93

93:                                               ; preds = %92
  %94 = load ptr, ptr @kArray, align 8, !tbaa !7
  %95 = zext i32 %87 to i64
  %96 = insertelement <2 x double> poison, double %89, i64 0
  %97 = shufflevector <2 x double> %96, <2 x double> poison, <2 x i32> zeroinitializer
  br label %127

98:                                               ; preds = %84
  br i1 %91, label %160, label %99

99:                                               ; preds = %98
  %100 = load ptr, ptr @kArray, align 8, !tbaa !7
  %101 = zext i32 %87 to i64
  %102 = insertelement <2 x double> poison, double %89, i64 0
  %103 = shufflevector <2 x double> %102, <2 x double> poison, <2 x i32> zeroinitializer
  br label %104

104:                                              ; preds = %104, %99
  %105 = phi i64 [ 1, %99 ], [ %107, %104 ]
  %106 = getelementptr inbounds %struct.contentbox, ptr %100, i64 %105, i32 4
  store i32 %3, ptr %106, align 4, !tbaa !582
  %107 = add nuw nsw i64 %105, 1
  %108 = getelementptr inbounds %struct.contentbox, ptr %100, i64 %105, i32 2
  %109 = insertelement <2 x i64> poison, i64 %107, i64 0
  %110 = insertelement <2 x i64> %109, i64 %105, i64 1
  %111 = trunc <2 x i64> %110 to <2 x i32>
  %112 = sitofp <2 x i32> %111 to <2 x double>
  %113 = fmul <2 x double> %103, %112
  %114 = fptosi <2 x double> %113 to <2 x i32>
  %115 = sitofp <2 x i32> %114 to <2 x double>
  %116 = fsub <2 x double> %113, %115
  %117 = fcmp oge <2 x double> %116, <double 5.000000e-01, double 5.000000e-01>
  %118 = zext <2 x i1> %117 to <2 x i32>
  %119 = add nsw <2 x i32> %118, %114
  %120 = shufflevector <2 x i32> %119, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>
  %121 = insertelement <2 x i32> %120, i32 %1, i64 1
  %122 = sub <2 x i32> %119, %121
  %123 = add nsw <2 x i32> %119, %121
  %124 = shufflevector <2 x i32> %122, <2 x i32> %123, <2 x i32> <i32 0, i32 3>
  store <2 x i32> %124, ptr %108, align 4, !tbaa !17
  %125 = getelementptr inbounds %struct.contentbox, ptr %100, i64 %105, i32 1
  store i32 0, ptr %125, align 4, !tbaa !584
  %126 = icmp eq i64 %107, %101
  br i1 %126, label %154, label %104, !llvm.loop !590

127:                                              ; preds = %127, %93
  %128 = phi i64 [ 1, %93 ], [ %130, %127 ]
  %129 = getelementptr inbounds %struct.contentbox, ptr %94, i64 %128, i32 4
  store i32 %3, ptr %129, align 4, !tbaa !582
  %130 = add nuw nsw i64 %128, 1
  %131 = getelementptr inbounds %struct.contentbox, ptr %94, i64 %128, i32 3
  %132 = insertelement <2 x i64> poison, i64 %130, i64 0
  %133 = insertelement <2 x i64> %132, i64 %128, i64 1
  %134 = trunc <2 x i64> %133 to <2 x i32>
  %135 = sitofp <2 x i32> %134 to <2 x double>
  %136 = fmul <2 x double> %97, %135
  %137 = fptosi <2 x double> %136 to <2 x i32>
  %138 = sitofp <2 x i32> %137 to <2 x double>
  %139 = fsub <2 x double> %136, %138
  %140 = fcmp oge <2 x double> %139, <double 5.000000e-01, double 5.000000e-01>
  %141 = extractelement <2 x i1> %140, i64 1
  %142 = zext i1 %141 to i32
  %143 = extractelement <2 x i32> %137, i64 1
  %144 = add nsw i32 %143, %142
  %145 = sub nsw i32 %1, %144
  store i32 %145, ptr %131, align 4, !tbaa !581
  %146 = extractelement <2 x i1> %140, i64 0
  %147 = zext i1 %146 to i32
  %148 = extractelement <2 x i32> %137, i64 0
  %149 = add nsw i32 %148, %147
  %150 = sub i32 %149, %144
  %151 = getelementptr inbounds %struct.contentbox, ptr %94, i64 %128, i32 2
  store i32 %150, ptr %151, align 4, !tbaa !583
  %152 = getelementptr inbounds %struct.contentbox, ptr %94, i64 %128, i32 1
  store i32 0, ptr %152, align 4, !tbaa !584
  %153 = icmp eq i64 %130, %95
  br i1 %153, label %157, label %127, !llvm.loop !591

154:                                              ; preds = %104
  %.lcssa = phi <2 x double> [ %113, %104 ]
  %155 = extractelement <2 x double> %.lcssa, i64 0
  store double %155, ptr @val1, align 8, !tbaa !36
  %156 = extractelement <2 x double> %.lcssa, i64 1
  store double %156, ptr @val2, align 8, !tbaa !36
  br label %160

157:                                              ; preds = %127
  %.lcssa1 = phi <2 x double> [ %136, %127 ]
  %158 = extractelement <2 x double> %.lcssa1, i64 0
  store double %158, ptr @val1, align 8, !tbaa !36
  %159 = extractelement <2 x double> %.lcssa1, i64 1
  store double %159, ptr @val2, align 8, !tbaa !36
  br label %160

160:                                              ; preds = %157, %154, %98, %92, %41
  %161 = phi i32 [ %43, %41 ], [ %86, %154 ], [ %39, %98 ], [ %86, %157 ], [ %39, %92 ]
  ret i32 %161
}

; Function Attrs: nounwind optsize uwtable
define internal void @point(ptr nocapture noundef %0, ptr nocapture noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %3) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4) #47
  %5 = load ptr, ptr @mt, align 8, !tbaa !7
  %6 = icmp eq ptr %5, null
  br i1 %6, label %12, label %7

7:                                                ; preds = %2
  %8 = load i32, ptr %0, align 4, !tbaa !17
  store i32 %8, ptr %3, align 4, !tbaa !17
  %9 = load i32, ptr %1, align 4, !tbaa !17
  store i32 %9, ptr %4, align 4, !tbaa !17
  call void @MTPoint(ptr noundef nonnull %5, ptr noundef nonnull %3, ptr noundef nonnull %4) #44
  %10 = load i32, ptr %3, align 4, !tbaa !17
  store i32 %10, ptr %0, align 4, !tbaa !17
  %11 = load i32, ptr %4, align 4, !tbaa !17
  store i32 %11, ptr %1, align 4, !tbaa !17
  br label %12

12:                                               ; preds = %7, %2
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %3) #47
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @rect(ptr nocapture noundef %0, ptr nocapture noundef %1, ptr nocapture noundef %2, ptr nocapture noundef %3) #0 {
  tail call void @point(ptr noundef %0, ptr noundef %1) #43
  tail call void @point(ptr noundef %2, ptr noundef %3) #43
  %5 = load i32, ptr %0, align 4, !tbaa !17
  %6 = load i32, ptr %2, align 4, !tbaa !17
  %7 = icmp sgt i32 %5, %6
  br i1 %7, label %8, label %9

8:                                                ; preds = %4
  store i32 %6, ptr %0, align 4, !tbaa !17
  store i32 %5, ptr %2, align 4, !tbaa !17
  br label %9

9:                                                ; preds = %8, %4
  %10 = load i32, ptr %1, align 4, !tbaa !17
  %11 = load i32, ptr %3, align 4, !tbaa !17
  %12 = icmp sgt i32 %10, %11
  br i1 %12, label %13, label %14

13:                                               ; preds = %9
  store i32 %11, ptr %1, align 4, !tbaa !17
  store i32 %10, ptr %3, align 4, !tbaa !17
  br label %14

14:                                               ; preds = %13, %9
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @move(i32 noundef %0) #0 {
  %2 = load ptr, ptr @mt, align 8, !tbaa !7
  %3 = icmp eq ptr %2, null
  br i1 %3, label %4, label %6

4:                                                ; preds = %1
  %5 = tail call ptr (...) @MTBegin() #44
  store ptr %5, ptr @mt, align 8, !tbaa !7
  br label %6

6:                                                ; preds = %4, %1
  %7 = phi ptr [ %5, %4 ], [ %2, %1 ]
  tail call void @MTIdentity(ptr noundef %7) #44
  switch i32 %0, label %24 [
    i32 7, label %22
    i32 1, label %8
    i32 2, label %10
    i32 3, label %12
    i32 4, label %14
    i32 5, label %17
    i32 6, label %20
  ]

8:                                                ; preds = %6
  %9 = load ptr, ptr @mt, align 8, !tbaa !7
  tail call void @MTMY(ptr noundef %9) #44
  br label %24

10:                                               ; preds = %6
  %11 = load ptr, ptr @mt, align 8, !tbaa !7
  tail call void @MTMX(ptr noundef %11) #44
  br label %24

12:                                               ; preds = %6
  %13 = load ptr, ptr @mt, align 8, !tbaa !7
  tail call void @MTRotate(ptr noundef %13, i32 noundef -1, i32 noundef 0) #44
  br label %24

14:                                               ; preds = %6
  %15 = load ptr, ptr @mt, align 8, !tbaa !7
  tail call void @MTMX(ptr noundef %15) #44
  %16 = load ptr, ptr @mt, align 8, !tbaa !7
  tail call void @MTRotate(ptr noundef %16, i32 noundef 0, i32 noundef 1) #44
  br label %24

17:                                               ; preds = %6
  %18 = load ptr, ptr @mt, align 8, !tbaa !7
  tail call void @MTMX(ptr noundef %18) #44
  %19 = load ptr, ptr @mt, align 8, !tbaa !7
  tail call void @MTRotate(ptr noundef %19, i32 noundef 0, i32 noundef -1) #44
  br label %24

20:                                               ; preds = %6
  %21 = load ptr, ptr @mt, align 8, !tbaa !7
  tail call void @MTRotate(ptr noundef %21, i32 noundef 0, i32 noundef 1) #44
  br label %24

22:                                               ; preds = %6
  %23 = load ptr, ptr @mt, align 8, !tbaa !7
  tail call void @MTRotate(ptr noundef %23, i32 noundef 0, i32 noundef -1) #44
  br label %24

24:                                               ; preds = %22, %20, %17, %14, %12, %10, %8, %6
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @mshortest(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca [5 x i32], align 16
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca [2 x i16], align 2
  %13 = alloca ptr, align 8
  %14 = alloca ptr, align 8
  %15 = alloca ptr, align 8
  %16 = alloca ptr, align 8
  %17 = alloca ptr, align 8
  %18 = alloca ptr, align 8
  %19 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %3) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6) #47
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %7) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %8) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %9) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %10) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %11) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %12) #47
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13) #47
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %14) #47
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %15) #47
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %16) #47
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %17) #47
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %18) #47
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %19) #47
  store ptr null, ptr %15, align 8, !tbaa !7
  store ptr null, ptr %17, align 8, !tbaa !7
  store ptr null, ptr %18, align 8, !tbaa !7
  store ptr null, ptr %19, align 8, !tbaa !7
  %20 = load i32, ptr @Mpaths, align 4, !tbaa !17
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %29, label %22

22:                                               ; preds = %22, %2
  %23 = phi i32 [ %24, %22 ], [ 1, %2 ]
  call void @tinsert(ptr noundef nonnull %17, i32 noundef %23, i32 noundef 0) #44
  %24 = add nuw nsw i32 %23, 1
  %25 = load i32, ptr @Mpaths, align 4, !tbaa !17
  %26 = shl nsw i32 %25, 1
  %27 = add nsw i32 %26, 2
  %28 = icmp slt i32 %23, %27
  br i1 %28, label %22, label %29, !llvm.loop !592

29:                                               ; preds = %22, %2
  %30 = phi i32 [ %20, %2 ], [ %25, %22 ]
  %31 = load ptr, ptr @pnodeArray, align 8, !tbaa !7
  %32 = load i32, ptr @numnodes, align 4, !tbaa !17
  %33 = sub nsw i32 %0, %32
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds %struct.dlink2, ptr %31, i64 %34, i32 1
  %36 = load ptr, ptr %35, align 8, !tbaa !593
  store i32 1, ptr %3, align 4, !tbaa !17
  %37 = load i32, ptr @targetPtr, align 4, !tbaa !17
  %38 = icmp slt i32 %37, 1
  br i1 %38, label %54, label %39

39:                                               ; preds = %39, %29
  %40 = phi i32 [ %49, %39 ], [ 1, %29 ]
  %41 = load ptr, ptr @targetList, align 8, !tbaa !7
  %42 = sext i32 %40 to i64
  %43 = getelementptr inbounds i16, ptr %41, i64 %42
  %44 = load i16, ptr %43, align 2, !tbaa !542
  %45 = sext i16 %44 to i64
  %46 = getelementptr inbounds %struct.nnode, ptr %36, i64 %45, i32 1
  %47 = load i32, ptr %46, align 4, !tbaa !594
  call void @tinsert(ptr noundef nonnull %19, i32 noundef %47, i32 noundef %40) #44
  %48 = load i32, ptr %3, align 4, !tbaa !17
  %49 = add nsw i32 %48, 1
  store i32 %49, ptr %3, align 4, !tbaa !17
  %50 = load i32, ptr @targetPtr, align 4, !tbaa !17
  %51 = icmp slt i32 %48, %50
  br i1 %51, label %39, label %52, !llvm.loop !596

52:                                               ; preds = %39
  %.lcssa24 = phi i32 [ %50, %39 ]
  %53 = load i32, ptr @Mpaths, align 4, !tbaa !17
  br label %54

54:                                               ; preds = %52, %29
  %55 = phi i32 [ %30, %29 ], [ %53, %52 ]
  %56 = phi i32 [ %37, %29 ], [ %.lcssa24, %52 ]
  %57 = sitofp i32 %56 to double
  %58 = fmul double %57, 1.000000e-01
  %59 = fptosi double %58 to i32
  %60 = add nsw i32 %59, 1
  %61 = shl nsw i32 %55, 1
  %62 = add nsw i32 %60, %61
  %63 = call i32 @llvm.smin.i32(i32 %62, i32 %56)
  %64 = load i32, ptr @bareMinimum, align 4, !tbaa !17
  %65 = icmp eq i32 %64, 0
  %66 = load i32, ptr @finalShot, align 4
  %67 = load i32, ptr @doCompaction, align 4
  %68 = icmp eq i32 %66, %67
  %69 = select i1 %68, i32 2, i32 1
  %70 = select i1 %65, i32 %63, i32 %69
  %71 = icmp sgt i32 %70, 0
  br i1 %71, label %72, label %158

72:                                               ; preds = %54
  %73 = trunc i32 %0 to i16
  %74 = getelementptr inbounds [2 x i16], ptr %12, i64 0, i64 1
  br label %75

75:                                               ; preds = %155, %72
  %76 = phi i32 [ 0, %72 ], [ %156, %155 ]
  call void @tpop(ptr noundef nonnull %19, ptr noundef nonnull %16, ptr noundef nonnull %11, ptr noundef nonnull %3) #44
  %77 = load ptr, ptr %16, align 8, !tbaa !7
  %78 = icmp eq ptr %77, null
  br i1 %78, label %158, label %79

79:                                               ; preds = %75
  %80 = load ptr, ptr @targetList, align 8, !tbaa !7
  %81 = load i32, ptr %3, align 4, !tbaa !17
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds i16, ptr %80, i64 %82
  %84 = load i16, ptr %83, align 2, !tbaa !542
  %85 = sext i16 %84 to i32
  %86 = load ptr, ptr @gnodeArray, align 8, !tbaa !7
  %87 = sext i16 %84 to i64
  %88 = getelementptr inbounds ptr, ptr %86, i64 %87
  %89 = load ptr, ptr %88, align 8, !tbaa !7
  %90 = load i32, ptr %89, align 8, !tbaa !481
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds ptr, ptr %86, i64 %91
  br label %93

93:                                               ; preds = %93, %79
  %94 = phi ptr [ %92, %79 ], [ %98, %93 ]
  %95 = load ptr, ptr %94, align 8, !tbaa !7
  %96 = load i32, ptr %95, align 8, !tbaa !481
  %97 = icmp eq i32 %96, %85
  %98 = getelementptr inbounds %struct.clbox, ptr %95, i64 0, i32 7
  br i1 %97, label %99, label %93

99:                                               ; preds = %93
  %.lcssa21 = phi ptr [ %95, %93 ]
  %100 = getelementptr inbounds %struct.clbox, ptr %.lcssa21, i64 0, i32 6
  %101 = load i32, ptr %100, align 8, !tbaa !536
  %102 = icmp eq i32 %101, 1
  br i1 %102, label %105, label %103

103:                                              ; preds = %99
  store i16 %73, ptr %74, align 2, !tbaa !542
  %104 = call i32 @prestrict(ptr noundef nonnull %12, i32 noundef 1, i32 noundef %0, i32 noundef %85) #44
  br label %147

105:                                              ; preds = %99
  store i32 0, ptr %100, align 8, !tbaa !536
  %106 = getelementptr inbounds %struct.clbox, ptr %89, i64 0, i32 7
  %107 = load ptr, ptr %106, align 8, !tbaa !483
  %108 = icmp eq ptr %107, null
  br i1 %108, label %125, label %109

109:                                              ; preds = %120, %105
  %110 = phi ptr [ %123, %120 ], [ %107, %105 ]
  %111 = load i32, ptr %110, align 8, !tbaa !481
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds ptr, ptr %86, i64 %112
  br label %114

114:                                              ; preds = %114, %109
  %115 = phi ptr [ %113, %109 ], [ %119, %114 ]
  %116 = load ptr, ptr %115, align 8, !tbaa !7
  %117 = load i32, ptr %116, align 8, !tbaa !481
  %118 = icmp eq i32 %117, %85
  %119 = getelementptr inbounds %struct.clbox, ptr %116, i64 0, i32 7
  br i1 %118, label %120, label %114

120:                                              ; preds = %114
  %.lcssa22 = phi ptr [ %116, %114 ]
  %121 = getelementptr inbounds %struct.clbox, ptr %.lcssa22, i64 0, i32 6
  store i32 0, ptr %121, align 8, !tbaa !536
  %122 = getelementptr inbounds %struct.clbox, ptr %110, i64 0, i32 7
  %123 = load ptr, ptr %122, align 8, !tbaa !483
  %124 = icmp eq ptr %123, null
  br i1 %124, label %125, label %109, !llvm.loop !597

125:                                              ; preds = %120, %105
  store i16 %73, ptr %74, align 2, !tbaa !542
  %126 = call i32 @prestrict(ptr noundef nonnull %12, i32 noundef 1, i32 noundef %0, i32 noundef %85) #44
  %127 = load ptr, ptr @gnodeArray, align 8, !tbaa !7
  %128 = getelementptr inbounds ptr, ptr %127, i64 %87
  %129 = load ptr, ptr %128, align 8, !tbaa !7
  %130 = icmp eq ptr %129, null
  br i1 %130, label %147, label %131

131:                                              ; preds = %142, %125
  %132 = phi ptr [ %145, %142 ], [ %129, %125 ]
  %133 = load i32, ptr %132, align 8, !tbaa !481
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds ptr, ptr %127, i64 %134
  br label %136

136:                                              ; preds = %136, %131
  %137 = phi ptr [ %135, %131 ], [ %141, %136 ]
  %138 = load ptr, ptr %137, align 8, !tbaa !7
  %139 = load i32, ptr %138, align 8, !tbaa !481
  %140 = icmp eq i32 %139, %85
  %141 = getelementptr inbounds %struct.clbox, ptr %138, i64 0, i32 7
  br i1 %140, label %142, label %136

142:                                              ; preds = %136
  %.lcssa23 = phi ptr [ %138, %136 ]
  %143 = getelementptr inbounds %struct.clbox, ptr %.lcssa23, i64 0, i32 6
  store i32 1, ptr %143, align 8, !tbaa !536
  %144 = getelementptr inbounds %struct.clbox, ptr %132, i64 0, i32 7
  %145 = load ptr, ptr %144, align 8, !tbaa !7
  %146 = icmp eq ptr %145, null
  br i1 %146, label %147, label %131, !llvm.loop !598

147:                                              ; preds = %142, %125, %103
  %148 = phi i32 [ %104, %103 ], [ %126, %125 ], [ %126, %142 ]
  %149 = icmp sgt i32 %148, -1
  br i1 %149, label %150, label %155

150:                                              ; preds = %147
  %151 = getelementptr inbounds %struct.nnode, ptr %36, i64 %87
  %152 = load i32, ptr %151, align 4, !tbaa !599
  %153 = load i32, ptr %3, align 4, !tbaa !17
  call void @tinsert(ptr noundef nonnull %18, i32 noundef %152, i32 noundef %153) #44
  %154 = add nsw i32 %76, 1
  br label %155

155:                                              ; preds = %150, %147
  %156 = phi i32 [ %154, %150 ], [ %76, %147 ]
  %157 = icmp slt i32 %156, %70
  br i1 %157, label %75, label %158, !llvm.loop !600

158:                                              ; preds = %155, %75, %54
  %159 = load ptr, ptr %19, align 8, !tbaa !7
  %160 = icmp eq ptr %159, null
  br i1 %160, label %164, label %161

161:                                              ; preds = %161, %158
  call void @tpop(ptr noundef nonnull %19, ptr noundef nonnull %16, ptr noundef nonnull %11, ptr noundef nonnull %3) #44
  %162 = load ptr, ptr %16, align 8, !tbaa !7
  %163 = icmp eq ptr %162, null
  br i1 %163, label %164, label %161

164:                                              ; preds = %161, %158
  %165 = load i32, ptr @Mpaths, align 4, !tbaa !17
  %166 = icmp sgt i32 %165, 0
  br i1 %166, label %167, label %668

167:                                              ; preds = %164
  %168 = trunc i32 %0 to i16
  %169 = getelementptr inbounds [2 x i16], ptr %12, i64 0, i64 1
  %170 = getelementptr inbounds [5 x i32], ptr %7, i64 0, i64 1
  %171 = getelementptr inbounds [5 x i32], ptr %7, i64 0, i64 2
  %172 = getelementptr inbounds [5 x i32], ptr %7, i64 0, i64 3
  %173 = getelementptr inbounds [5 x i32], ptr %7, i64 0, i64 4
  br label %174

174:                                              ; preds = %665, %167
  %175 = phi i32 [ undef, %167 ], [ %.lcssa19, %665 ]
  %176 = phi i32 [ undef, %167 ], [ %.lcssa17, %665 ]
  %177 = phi i32 [ undef, %167 ], [ %.lcssa15, %665 ]
  %178 = phi i1 [ true, %167 ], [ %666, %665 ]
  %179 = phi i32 [ 0, %167 ], [ %259, %665 ]
  %180 = phi i32 [ 0, %167 ], [ %637, %665 ]
  br label %181

181:                                              ; preds = %255, %174
  call void @tpop(ptr noundef nonnull %18, ptr noundef nonnull %16, ptr noundef nonnull %11, ptr noundef nonnull %3) #44
  %182 = load ptr, ptr %16, align 8, !tbaa !7
  %183 = icmp eq ptr %182, null
  br i1 %183, label %668, label %184

184:                                              ; preds = %181
  store ptr null, ptr %13, align 8, !tbaa !7
  %185 = load ptr, ptr @targetList, align 8, !tbaa !7
  %186 = load i32, ptr %3, align 4, !tbaa !17
  %187 = sext i32 %186 to i64
  %188 = getelementptr inbounds i16, ptr %185, i64 %187
  %189 = load i16, ptr %188, align 2, !tbaa !542
  %190 = sext i16 %189 to i32
  %191 = load ptr, ptr @gnodeArray, align 8, !tbaa !7
  %192 = sext i16 %189 to i64
  %193 = getelementptr inbounds ptr, ptr %191, i64 %192
  %194 = load ptr, ptr %193, align 8, !tbaa !7
  %195 = load i32, ptr %194, align 8, !tbaa !481
  %196 = sext i32 %195 to i64
  %197 = getelementptr inbounds ptr, ptr %191, i64 %196
  br label %198

198:                                              ; preds = %198, %184
  %199 = phi ptr [ %197, %184 ], [ %203, %198 ]
  %200 = load ptr, ptr %199, align 8, !tbaa !7
  %201 = load i32, ptr %200, align 8, !tbaa !481
  %202 = icmp eq i32 %201, %190
  %203 = getelementptr inbounds %struct.clbox, ptr %200, i64 0, i32 7
  br i1 %202, label %204, label %198

204:                                              ; preds = %198
  %.lcssa = phi ptr [ %200, %198 ]
  %205 = getelementptr inbounds %struct.clbox, ptr %.lcssa, i64 0, i32 6
  %206 = load i32, ptr %205, align 8, !tbaa !536
  %207 = icmp eq i32 %206, 1
  br i1 %207, label %208, label %231

208:                                              ; preds = %204
  store i32 0, ptr %205, align 8, !tbaa !536
  %209 = getelementptr inbounds %struct.clbox, ptr %194, i64 0, i32 7
  %210 = load ptr, ptr %209, align 8, !tbaa !483
  %211 = icmp eq ptr %210, null
  br i1 %211, label %228, label %212

212:                                              ; preds = %223, %208
  %213 = phi ptr [ %226, %223 ], [ %210, %208 ]
  %214 = load i32, ptr %213, align 8, !tbaa !481
  %215 = sext i32 %214 to i64
  %216 = getelementptr inbounds ptr, ptr %191, i64 %215
  br label %217

217:                                              ; preds = %217, %212
  %218 = phi ptr [ %216, %212 ], [ %222, %217 ]
  %219 = load ptr, ptr %218, align 8, !tbaa !7
  %220 = load i32, ptr %219, align 8, !tbaa !481
  %221 = icmp eq i32 %220, %190
  %222 = getelementptr inbounds %struct.clbox, ptr %219, i64 0, i32 7
  br i1 %221, label %223, label %217

223:                                              ; preds = %217
  %.lcssa1 = phi ptr [ %219, %217 ]
  %224 = getelementptr inbounds %struct.clbox, ptr %.lcssa1, i64 0, i32 6
  store i32 0, ptr %224, align 8, !tbaa !536
  %225 = getelementptr inbounds %struct.clbox, ptr %213, i64 0, i32 7
  %226 = load ptr, ptr %225, align 8, !tbaa !483
  %227 = icmp eq ptr %226, null
  br i1 %227, label %228, label %212, !llvm.loop !601

228:                                              ; preds = %223, %208
  store i16 %168, ptr %169, align 2, !tbaa !542
  %229 = call i32 @prestrict(ptr noundef nonnull %12, i32 noundef 1, i32 noundef %0, i32 noundef %190) #44
  %230 = icmp slt i32 %229, 0
  br i1 %230, label %234, label %256

231:                                              ; preds = %204
  store i16 %168, ptr %169, align 2, !tbaa !542
  %232 = call i32 @prestrict(ptr noundef nonnull %12, i32 noundef 1, i32 noundef %0, i32 noundef %190) #44
  %233 = icmp slt i32 %232, 0
  br i1 %233, label %255, label %256

234:                                              ; preds = %228
  %235 = load ptr, ptr @gnodeArray, align 8, !tbaa !7
  %236 = getelementptr inbounds ptr, ptr %235, i64 %192
  %237 = load ptr, ptr %236, align 8, !tbaa !7
  %238 = icmp eq ptr %237, null
  br i1 %238, label %255, label %239

239:                                              ; preds = %250, %234
  %240 = phi ptr [ %253, %250 ], [ %237, %234 ]
  %241 = load i32, ptr %240, align 8, !tbaa !481
  %242 = sext i32 %241 to i64
  %243 = getelementptr inbounds ptr, ptr %235, i64 %242
  br label %244

244:                                              ; preds = %244, %239
  %245 = phi ptr [ %243, %239 ], [ %249, %244 ]
  %246 = load ptr, ptr %245, align 8, !tbaa !7
  %247 = load i32, ptr %246, align 8, !tbaa !481
  %248 = icmp eq i32 %247, %190
  %249 = getelementptr inbounds %struct.clbox, ptr %246, i64 0, i32 7
  br i1 %248, label %250, label %244

250:                                              ; preds = %244
  %.lcssa2 = phi ptr [ %246, %244 ]
  %251 = getelementptr inbounds %struct.clbox, ptr %.lcssa2, i64 0, i32 6
  store i32 1, ptr %251, align 8, !tbaa !536
  %252 = getelementptr inbounds %struct.clbox, ptr %240, i64 0, i32 7
  %253 = load ptr, ptr %252, align 8, !tbaa !7
  %254 = icmp eq ptr %253, null
  br i1 %254, label %255, label %239, !llvm.loop !602

255:                                              ; preds = %250, %234, %231
  br i1 %178, label %181, label %668, !llvm.loop !603

256:                                              ; preds = %231, %228
  %.lcssa6 = phi i1 [ %207, %231 ], [ %207, %228 ]
  %.lcssa5 = phi i16 [ %189, %231 ], [ %189, %228 ]
  %.lcssa4 = phi i32 [ %190, %231 ], [ %190, %228 ]
  %.lcssa3 = phi i64 [ %192, %231 ], [ %192, %228 ]
  %257 = getelementptr inbounds %struct.nnode, ptr %36, i64 %.lcssa3
  %258 = load i32, ptr %257, align 4, !tbaa !599
  store i32 %258, ptr %4, align 4, !tbaa !17
  %259 = add nuw nsw i32 %179, 1
  %260 = getelementptr inbounds %struct.nnode, ptr %36, i64 %.lcssa3, i32 3
  %261 = load i16, ptr %260, align 2, !tbaa !604
  %262 = load ptr, ptr @tempArray, align 8, !tbaa !7
  %263 = getelementptr inbounds i16, ptr %262, i64 1
  store i16 %.lcssa5, ptr %263, align 2, !tbaa !542
  %264 = icmp eq i16 %261, 0
  br i1 %264, label %276, label %265

265:                                              ; preds = %265, %256
  %266 = phi i64 [ %268, %265 ], [ 1, %256 ]
  %267 = phi i16 [ %272, %265 ], [ %261, %256 ]
  %268 = add nuw nsw i64 %266, 1
  %269 = getelementptr inbounds i16, ptr %262, i64 %268
  store i16 %267, ptr %269, align 2, !tbaa !542
  %270 = sext i16 %267 to i64
  %271 = getelementptr inbounds %struct.nnode, ptr %36, i64 %270, i32 3
  %272 = load i16, ptr %271, align 2, !tbaa !604
  %273 = icmp eq i16 %272, 0
  br i1 %273, label %274, label %265, !llvm.loop !605

274:                                              ; preds = %265
  %.lcssa7 = phi i64 [ %268, %265 ]
  %275 = trunc i64 %.lcssa7 to i32
  br label %276

276:                                              ; preds = %274, %256
  %277 = phi i32 [ 1, %256 ], [ %275, %274 ]
  call void @tpop(ptr noundef nonnull %17, ptr noundef nonnull %16, ptr noundef nonnull %6, ptr noundef nonnull %8) #44
  %278 = load ptr, ptr @pathArray, align 8, !tbaa !7
  %279 = load i32, ptr %6, align 4, !tbaa !17
  %280 = sext i32 %279 to i64
  %281 = getelementptr inbounds %struct.path, ptr %278, i64 %280, i32 1
  store i32 1, ptr %281, align 8, !tbaa !606
  %282 = add nsw i32 %277, -1
  %283 = load i32, ptr %6, align 4, !tbaa !17
  %284 = sext i32 %283 to i64
  %285 = getelementptr inbounds %struct.path, ptr %278, i64 %284, i32 2
  store i32 %282, ptr %285, align 4, !tbaa !608
  %286 = load i32, ptr %6, align 4, !tbaa !17
  %287 = sext i32 %286 to i64
  %288 = getelementptr inbounds %struct.path, ptr %278, i64 %287, i32 3
  store i32 0, ptr %288, align 8, !tbaa !609
  %289 = load ptr, ptr @tempArray, align 8, !tbaa !7
  %290 = load i32, ptr %6, align 4, !tbaa !17
  %291 = sext i32 %290 to i64
  %292 = getelementptr inbounds %struct.path, ptr %278, i64 %291
  %293 = load ptr, ptr %292, align 8, !tbaa !610
  %294 = add i32 %277, 1
  %295 = zext i32 %294 to i64
  br label %296

296:                                              ; preds = %296, %276
  %297 = phi i64 [ 1, %276 ], [ %302, %296 ]
  %298 = getelementptr inbounds i16, ptr %289, i64 %297
  %299 = load i16, ptr %298, align 2, !tbaa !542
  %300 = sub nsw i64 %295, %297
  %301 = getelementptr inbounds i16, ptr %293, i64 %300
  store i16 %299, ptr %301, align 2, !tbaa !542
  %302 = add nuw nsw i64 %297, 1
  %303 = icmp eq i64 %302, %295
  br i1 %303, label %304, label %296, !llvm.loop !611

304:                                              ; preds = %296
  %305 = load i32, ptr %4, align 4, !tbaa !17
  call void @tinsert(ptr noundef nonnull %13, i32 noundef %305, i32 noundef %290) #44
  br label %306

306:                                              ; preds = %615, %304
  %307 = phi i32 [ %616, %615 ], [ %175, %304 ]
  %308 = phi i32 [ %617, %615 ], [ %176, %304 ]
  %309 = phi i32 [ %618, %615 ], [ %177, %304 ]
  %310 = phi i32 [ %621, %615 ], [ 2, %304 ]
  %311 = phi i32 [ %620, %615 ], [ 3, %304 ]
  %312 = phi i32 [ %324, %615 ], [ 0, %304 ]
  %313 = phi i32 [ %323, %615 ], [ %180, %304 ]
  %314 = phi i32 [ %619, %615 ], [ 1, %304 ]
  call void @tpop(ptr noundef nonnull %13, ptr noundef nonnull %14, ptr noundef nonnull %4, ptr noundef nonnull %5) #44
  %315 = add nsw i32 %314, -1
  %316 = load ptr, ptr %14, align 8, !tbaa !7
  %317 = icmp eq ptr %316, null
  br i1 %317, label %318, label %320

318:                                              ; preds = %306
  %.lcssa18 = phi i32 [ %307, %306 ]
  %.lcssa16 = phi i32 [ %308, %306 ]
  %.lcssa14 = phi i32 [ %309, %306 ]
  %.lcssa12 = phi i32 [ %313, %306 ]
  %319 = load i32, ptr @Mpaths, align 4, !tbaa !17
  br label %622

320:                                              ; preds = %306
  %321 = load i32, ptr %4, align 4, !tbaa !17
  %322 = load i32, ptr %5, align 4, !tbaa !17
  call void @tinsert(ptr noundef nonnull %15, i32 noundef %321, i32 noundef %322) #44
  %323 = add nsw i32 %313, 1
  %324 = add nuw nsw i32 %312, 1
  %325 = load i32, ptr @Mpaths, align 4, !tbaa !17
  %326 = icmp slt i32 %324, %325
  br i1 %326, label %327, label %622

327:                                              ; preds = %320
  %328 = load ptr, ptr @pathArray, align 8, !tbaa !7
  %329 = load i32, ptr %5, align 4, !tbaa !17
  %330 = sext i32 %329 to i64
  %331 = getelementptr inbounds %struct.path, ptr %328, i64 %330
  %332 = load ptr, ptr %331, align 8, !tbaa !610
  %333 = getelementptr inbounds %struct.path, ptr %328, i64 %330, i32 1
  %334 = load i32, ptr %333, align 8, !tbaa !606
  %335 = getelementptr inbounds %struct.path, ptr %328, i64 %330, i32 2
  %336 = load i32, ptr %335, align 4, !tbaa !608
  %337 = getelementptr inbounds %struct.path, ptr %328, i64 %330, i32 3
  %338 = load i32, ptr %337, align 8, !tbaa !609
  %339 = icmp eq i32 %334, %336
  br i1 %339, label %361, label %340

340:                                              ; preds = %327
  %341 = sub i32 %336, %334
  %342 = icmp ugt i32 %341, 2147483646
  br i1 %342, label %615, label %343

343:                                              ; preds = %340
  %344 = add nsw i32 %338, 1
  %345 = icmp slt i32 %338, 1
  %346 = add nsw i32 %334, 1
  %347 = sext i32 %346 to i64
  %348 = getelementptr inbounds i16, ptr %332, i64 %347
  %349 = sext i32 %344 to i64
  %350 = getelementptr inbounds [5 x i32], ptr %7, i64 0, i64 %349
  %351 = getelementptr i8, ptr %328, i64 24
  %352 = mul nsw i64 %330, 40
  %353 = getelementptr i8, ptr %351, i64 %352
  %354 = zext i32 %338 to i64
  %355 = shl nuw nsw i64 %354, 2
  %356 = add i32 %334, -1
  %357 = sext i32 %334 to i64
  %358 = add nuw i32 %341, 2
  %359 = zext i32 %358 to i64
  %360 = add nsw i64 %357, 1
  br label %480

361:                                              ; preds = %327
  %362 = add nsw i32 %338, 1
  store i32 %362, ptr %7, align 16, !tbaa !17
  %363 = icmp slt i32 %338, 1
  br i1 %363, label %370, label %364

364:                                              ; preds = %361
  %365 = getelementptr i8, ptr %328, i64 24
  %366 = mul nsw i64 %330, 40
  %367 = getelementptr i8, ptr %365, i64 %366
  %368 = zext i32 %338 to i64
  %369 = shl nuw nsw i64 %368, 2
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 4 %170, ptr align 4 %367, i64 %369, i1 false), !tbaa !17
  br label %370

370:                                              ; preds = %364, %361
  %371 = add nsw i32 %334, 1
  %372 = sext i32 %371 to i64
  %373 = getelementptr inbounds i16, ptr %332, i64 %372
  %374 = load i16, ptr %373, align 2, !tbaa !542
  %375 = sext i16 %374 to i32
  %376 = sext i32 %362 to i64
  %377 = getelementptr inbounds [5 x i32], ptr %7, i64 0, i64 %376
  store i32 %375, ptr %377, align 4, !tbaa !17
  %378 = load i32, ptr %7, align 16, !tbaa !17
  %379 = load i32, ptr %170, align 4, !tbaa !17
  %380 = load i32, ptr %171, align 8, !tbaa !17
  %381 = load i32, ptr %172, align 4, !tbaa !17
  %382 = load i32, ptr %173, align 16, !tbaa !17
  call void @greduce(ptr noundef %332, i32 noundef %334, i32 noundef %378, i32 noundef %379, i32 noundef %380, i32 noundef %381, i32 noundef %382) #43
  %383 = call i32 @prestrict(ptr noundef %332, i32 noundef %334, i32 noundef %0, i32 noundef %.lcssa4) #44
  call void @gunreduce(ptr noundef %332, i32 noundef %334, i32 noundef %378, i32 noundef %379, i32 noundef %380, i32 noundef %381, i32 noundef %382) #43
  %384 = icmp slt i32 %383, 0
  br i1 %384, label %615, label %385

385:                                              ; preds = %370
  %386 = load i32, ptr %257, align 4, !tbaa !599
  %387 = add nsw i32 %386, %383
  store i32 %387, ptr %4, align 4, !tbaa !17
  %388 = load i16, ptr %260, align 2, !tbaa !604
  %389 = load ptr, ptr @tempArray, align 8, !tbaa !7
  %390 = getelementptr inbounds i16, ptr %389, i64 1
  store i16 %.lcssa5, ptr %390, align 2, !tbaa !542
  %391 = icmp eq i16 %388, 0
  br i1 %391, label %394, label %400

392:                                              ; preds = %400
  %.lcssa10 = phi i64 [ %403, %400 ]
  %393 = trunc i64 %.lcssa10 to i32
  br label %394

394:                                              ; preds = %392, %385
  %395 = phi i32 [ 1, %385 ], [ %393, %392 ]
  %396 = icmp sgt i32 %334, 1
  br i1 %396, label %397, label %421

397:                                              ; preds = %394
  %398 = zext i32 %334 to i64
  %399 = zext i32 %395 to i64
  br label %409

400:                                              ; preds = %400, %385
  %401 = phi i64 [ %403, %400 ], [ 1, %385 ]
  %402 = phi i16 [ %407, %400 ], [ %388, %385 ]
  %403 = add nuw nsw i64 %401, 1
  %404 = getelementptr inbounds i16, ptr %389, i64 %403
  store i16 %402, ptr %404, align 2, !tbaa !542
  %405 = sext i16 %402 to i64
  %406 = getelementptr inbounds %struct.nnode, ptr %36, i64 %405, i32 3
  %407 = load i16, ptr %406, align 2, !tbaa !604
  %408 = icmp eq i16 %407, 0
  br i1 %408, label %392, label %400, !llvm.loop !612

409:                                              ; preds = %409, %397
  %410 = phi i64 [ %399, %397 ], [ %416, %409 ]
  %411 = phi i64 [ %398, %397 ], [ %412, %409 ]
  %412 = add nsw i64 %411, -1
  %413 = and i64 %412, 4294967295
  %414 = getelementptr inbounds i16, ptr %332, i64 %413
  %415 = load i16, ptr %414, align 2, !tbaa !542
  %416 = add nuw nsw i64 %410, 1
  %417 = getelementptr inbounds i16, ptr %389, i64 %416
  store i16 %415, ptr %417, align 2, !tbaa !542
  %418 = icmp ugt i64 %411, 2
  br i1 %418, label %409, label %419, !llvm.loop !613

419:                                              ; preds = %409
  %.lcssa11 = phi i64 [ %416, %409 ]
  %420 = trunc i64 %.lcssa11 to i32
  br label %421

421:                                              ; preds = %419, %394
  %422 = phi i32 [ %395, %394 ], [ %420, %419 ]
  call void @tpop(ptr noundef nonnull %17, ptr noundef nonnull %16, ptr noundef nonnull %6, ptr noundef nonnull %8) #44
  %423 = load ptr, ptr @pathArray, align 8, !tbaa !7
  %424 = load i32, ptr %6, align 4, !tbaa !17
  %425 = sext i32 %424 to i64
  %426 = getelementptr inbounds %struct.path, ptr %423, i64 %425, i32 1
  store i32 %334, ptr %426, align 8, !tbaa !606
  %427 = add nsw i32 %422, -1
  %428 = load i32, ptr %6, align 4, !tbaa !17
  %429 = sext i32 %428 to i64
  %430 = getelementptr inbounds %struct.path, ptr %423, i64 %429, i32 2
  store i32 %427, ptr %430, align 4, !tbaa !608
  %431 = load i32, ptr %6, align 4, !tbaa !17
  %432 = sext i32 %431 to i64
  %433 = getelementptr inbounds %struct.path, ptr %423, i64 %432, i32 3
  store i32 %378, ptr %433, align 8, !tbaa !609
  %434 = icmp slt i32 %378, 1
  br i1 %434, label %438, label %435

435:                                              ; preds = %421
  %436 = add nuw i32 %378, 1
  %437 = zext i32 %436 to i64
  br label %446

438:                                              ; preds = %446, %421
  %439 = load ptr, ptr @tempArray, align 8, !tbaa !7
  %440 = load i32, ptr %6, align 4, !tbaa !17
  %441 = sext i32 %440 to i64
  %442 = getelementptr inbounds %struct.path, ptr %423, i64 %441
  %443 = load ptr, ptr %442, align 8, !tbaa !610
  %444 = add i32 %422, 1
  %445 = zext i32 %444 to i64
  br label %455

446:                                              ; preds = %446, %435
  %447 = phi i64 [ 1, %435 ], [ %453, %446 ]
  %448 = getelementptr inbounds [5 x i32], ptr %7, i64 0, i64 %447
  %449 = load i32, ptr %448, align 4, !tbaa !17
  %450 = load i32, ptr %6, align 4, !tbaa !17
  %451 = sext i32 %450 to i64
  %452 = getelementptr inbounds %struct.path, ptr %423, i64 %451, i32 4, i64 %447
  store i32 %449, ptr %452, align 4, !tbaa !17
  %453 = add nuw nsw i64 %447, 1
  %454 = icmp eq i64 %453, %437
  br i1 %454, label %438, label %446, !llvm.loop !614

455:                                              ; preds = %455, %438
  %456 = phi i64 [ 1, %438 ], [ %463, %455 ]
  %457 = getelementptr inbounds i16, ptr %439, i64 %456
  %458 = load i16, ptr %457, align 2, !tbaa !542
  %459 = trunc i64 %456 to i32
  %460 = sub i32 %444, %459
  %461 = sext i32 %460 to i64
  %462 = getelementptr inbounds i16, ptr %443, i64 %461
  store i16 %458, ptr %462, align 2, !tbaa !542
  %463 = add nuw nsw i64 %456, 1
  %464 = icmp eq i64 %463, %445
  br i1 %464, label %465, label %455, !llvm.loop !615

465:                                              ; preds = %455
  %466 = load i32, ptr %4, align 4, !tbaa !17
  call void @tinsert(ptr noundef nonnull %13, i32 noundef %466, i32 noundef %440) #44
  %467 = load i32, ptr @Mpaths, align 4, !tbaa !17
  %468 = sub nsw i32 %467, %324
  %469 = icmp sgt i32 %314, %468
  br i1 %469, label %470, label %615

470:                                              ; preds = %465
  %471 = add i32 %314, %310
  %472 = sub i32 %471, %467
  br label %473

473:                                              ; preds = %473, %470
  %474 = phi i32 [ %478, %473 ], [ 1, %470 ]
  call void @tmax(ptr noundef nonnull %13, ptr noundef nonnull %14, ptr noundef nonnull %9, ptr noundef nonnull %10) #44
  %475 = load i32, ptr %9, align 4, !tbaa !17
  %476 = load i32, ptr %10, align 4, !tbaa !17
  call void @tdelete(ptr noundef nonnull %13, i32 noundef %475, i32 noundef %476) #44
  %477 = load i32, ptr %10, align 4, !tbaa !17
  call void @tinsert(ptr noundef nonnull %17, i32 noundef %477, i32 noundef 0) #44
  %478 = add nuw i32 %474, 1
  %479 = icmp eq i32 %478, %472
  br i1 %479, label %615, label %473, !llvm.loop !616

480:                                              ; preds = %610, %343
  %481 = phi i32 [ %307, %343 ], [ %506, %610 ]
  %482 = phi i32 [ %308, %343 ], [ %507, %610 ]
  %483 = phi i32 [ %309, %343 ], [ %508, %610 ]
  %484 = phi i64 [ 1, %343 ], [ %612, %610 ]
  %485 = phi i32 [ %356, %343 ], [ %613, %610 ]
  %486 = phi i32 [ %315, %343 ], [ %611, %610 ]
  %487 = zext i32 %485 to i64
  %488 = icmp eq i64 %484, 1
  br i1 %488, label %489, label %499

489:                                              ; preds = %480
  store i32 %344, ptr %7, align 16, !tbaa !17
  br i1 %345, label %491, label %490

490:                                              ; preds = %489
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 4 %170, ptr align 4 %353, i64 %355, i1 false), !tbaa !17
  br label %491

491:                                              ; preds = %490, %489
  %492 = load i16, ptr %348, align 2, !tbaa !542
  %493 = sext i16 %492 to i32
  store i32 %493, ptr %350, align 4, !tbaa !17
  %494 = load i32, ptr %7, align 16, !tbaa !17
  %495 = load i32, ptr %170, align 4, !tbaa !17
  %496 = load i32, ptr %171, align 8, !tbaa !17
  %497 = load i32, ptr %172, align 4, !tbaa !17
  %498 = load i32, ptr %173, align 16, !tbaa !17
  br label %504

499:                                              ; preds = %480
  %500 = add nsw i64 %484, %357
  %501 = getelementptr inbounds i16, ptr %332, i64 %500
  %502 = load i16, ptr %501, align 2, !tbaa !542
  %503 = sext i16 %502 to i32
  store i32 1, ptr %7, align 16, !tbaa !17
  store i32 %503, ptr %170, align 4, !tbaa !17
  br label %504

504:                                              ; preds = %499, %491
  %505 = phi i64 [ %500, %499 ], [ %360, %491 ]
  %506 = phi i32 [ %481, %499 ], [ %498, %491 ]
  %507 = phi i32 [ %482, %499 ], [ %497, %491 ]
  %508 = phi i32 [ %483, %499 ], [ %496, %491 ]
  %509 = phi i32 [ %503, %499 ], [ %495, %491 ]
  %510 = phi i32 [ 1, %499 ], [ %494, %491 ]
  %511 = trunc i64 %505 to i32
  %512 = add i32 %511, -1
  call void @greduce(ptr noundef nonnull %332, i32 noundef %512, i32 noundef %510, i32 noundef %509, i32 noundef %508, i32 noundef %507, i32 noundef %506) #43
  %513 = call i32 @prestrict(ptr noundef nonnull %332, i32 noundef %512, i32 noundef %0, i32 noundef %.lcssa4) #44
  call void @gunreduce(ptr noundef nonnull %332, i32 noundef %512, i32 noundef %510, i32 noundef %509, i32 noundef %508, i32 noundef %507, i32 noundef %506) #43
  %514 = icmp slt i32 %513, 0
  br i1 %514, label %610, label %515

515:                                              ; preds = %504
  %516 = load i32, ptr %257, align 4, !tbaa !599
  %517 = add nsw i32 %516, %513
  store i32 %517, ptr %4, align 4, !tbaa !17
  %518 = load i16, ptr %260, align 2, !tbaa !604
  %519 = load ptr, ptr @tempArray, align 8, !tbaa !7
  %520 = getelementptr inbounds i16, ptr %519, i64 1
  store i16 %.lcssa5, ptr %520, align 2, !tbaa !542
  %521 = icmp eq i16 %518, 0
  br i1 %521, label %533, label %522

522:                                              ; preds = %522, %515
  %523 = phi i64 [ %525, %522 ], [ 1, %515 ]
  %524 = phi i16 [ %529, %522 ], [ %518, %515 ]
  %525 = add nuw nsw i64 %523, 1
  %526 = getelementptr inbounds i16, ptr %519, i64 %525
  store i16 %524, ptr %526, align 2, !tbaa !542
  %527 = sext i16 %524 to i64
  %528 = getelementptr inbounds %struct.nnode, ptr %36, i64 %527, i32 3
  %529 = load i16, ptr %528, align 2, !tbaa !604
  %530 = icmp eq i16 %529, 0
  br i1 %530, label %531, label %522, !llvm.loop !617

531:                                              ; preds = %522
  %.lcssa8 = phi i64 [ %525, %522 ]
  %532 = trunc i64 %.lcssa8 to i32
  br label %533

533:                                              ; preds = %531, %515
  %534 = phi i32 [ 1, %515 ], [ %532, %531 ]
  %535 = icmp sgt i64 %505, 2
  br i1 %535, label %536, label %550

536:                                              ; preds = %533
  %537 = zext i32 %534 to i64
  br label %538

538:                                              ; preds = %538, %536
  %539 = phi i64 [ %537, %536 ], [ %543, %538 ]
  %540 = phi i64 [ %487, %536 ], [ %545, %538 ]
  %541 = getelementptr inbounds i16, ptr %332, i64 %540
  %542 = load i16, ptr %541, align 2, !tbaa !542
  %543 = add nuw nsw i64 %539, 1
  %544 = getelementptr inbounds i16, ptr %519, i64 %543
  store i16 %542, ptr %544, align 2, !tbaa !542
  %545 = add nsw i64 %540, -1
  %546 = trunc i64 %540 to i32
  %547 = icmp sgt i32 %546, 1
  br i1 %547, label %538, label %548, !llvm.loop !618

548:                                              ; preds = %538
  %.lcssa9 = phi i64 [ %543, %538 ]
  %549 = trunc i64 %.lcssa9 to i32
  br label %550

550:                                              ; preds = %548, %533
  %551 = phi i32 [ %534, %533 ], [ %549, %548 ]
  call void @tpop(ptr noundef nonnull %17, ptr noundef nonnull %16, ptr noundef nonnull %6, ptr noundef nonnull %8) #44
  %552 = add nsw i32 %486, 1
  %553 = load ptr, ptr @pathArray, align 8, !tbaa !7
  %554 = load i32, ptr %6, align 4, !tbaa !17
  %555 = sext i32 %554 to i64
  %556 = getelementptr inbounds %struct.path, ptr %553, i64 %555, i32 1
  store i32 %512, ptr %556, align 8, !tbaa !606
  %557 = add nsw i32 %551, -1
  %558 = load i32, ptr %6, align 4, !tbaa !17
  %559 = sext i32 %558 to i64
  %560 = getelementptr inbounds %struct.path, ptr %553, i64 %559, i32 2
  store i32 %557, ptr %560, align 4, !tbaa !608
  %561 = load i32, ptr %6, align 4, !tbaa !17
  %562 = sext i32 %561 to i64
  %563 = getelementptr inbounds %struct.path, ptr %553, i64 %562, i32 3
  store i32 %510, ptr %563, align 8, !tbaa !609
  %564 = icmp slt i32 %510, 1
  br i1 %564, label %568, label %565

565:                                              ; preds = %550
  %566 = add nuw i32 %510, 1
  %567 = zext i32 %566 to i64
  br label %576

568:                                              ; preds = %576, %550
  %569 = load ptr, ptr @tempArray, align 8, !tbaa !7
  %570 = load i32, ptr %6, align 4, !tbaa !17
  %571 = sext i32 %570 to i64
  %572 = getelementptr inbounds %struct.path, ptr %553, i64 %571
  %573 = load ptr, ptr %572, align 8, !tbaa !610
  %574 = add i32 %551, 1
  %575 = zext i32 %574 to i64
  br label %585

576:                                              ; preds = %576, %565
  %577 = phi i64 [ 1, %565 ], [ %583, %576 ]
  %578 = getelementptr inbounds [5 x i32], ptr %7, i64 0, i64 %577
  %579 = load i32, ptr %578, align 4, !tbaa !17
  %580 = load i32, ptr %6, align 4, !tbaa !17
  %581 = sext i32 %580 to i64
  %582 = getelementptr inbounds %struct.path, ptr %553, i64 %581, i32 4, i64 %577
  store i32 %579, ptr %582, align 4, !tbaa !17
  %583 = add nuw nsw i64 %577, 1
  %584 = icmp eq i64 %583, %567
  br i1 %584, label %568, label %576, !llvm.loop !619

585:                                              ; preds = %585, %568
  %586 = phi i64 [ 1, %568 ], [ %593, %585 ]
  %587 = getelementptr inbounds i16, ptr %569, i64 %586
  %588 = load i16, ptr %587, align 2, !tbaa !542
  %589 = trunc i64 %586 to i32
  %590 = sub i32 %574, %589
  %591 = sext i32 %590 to i64
  %592 = getelementptr inbounds i16, ptr %573, i64 %591
  store i16 %588, ptr %592, align 2, !tbaa !542
  %593 = add nuw nsw i64 %586, 1
  %594 = icmp eq i64 %593, %575
  br i1 %594, label %595, label %585, !llvm.loop !620

595:                                              ; preds = %585
  %596 = load i32, ptr %4, align 4, !tbaa !17
  call void @tinsert(ptr noundef nonnull %13, i32 noundef %596, i32 noundef %570) #44
  %597 = load i32, ptr @Mpaths, align 4, !tbaa !17
  %598 = sub nsw i32 %597, %324
  %599 = icmp slt i32 %486, %598
  br i1 %599, label %610, label %600

600:                                              ; preds = %595
  %601 = add i32 %311, %486
  %602 = sub i32 %601, %597
  br label %603

603:                                              ; preds = %603, %600
  %604 = phi i32 [ %608, %603 ], [ 1, %600 ]
  call void @tmax(ptr noundef nonnull %13, ptr noundef nonnull %14, ptr noundef nonnull %9, ptr noundef nonnull %10) #44
  %605 = load i32, ptr %9, align 4, !tbaa !17
  %606 = load i32, ptr %10, align 4, !tbaa !17
  call void @tdelete(ptr noundef nonnull %13, i32 noundef %605, i32 noundef %606) #44
  %607 = load i32, ptr %10, align 4, !tbaa !17
  call void @tinsert(ptr noundef nonnull %17, i32 noundef %607, i32 noundef 0) #44
  %608 = add nuw i32 %604, 1
  %609 = icmp eq i32 %608, %602
  br i1 %609, label %610, label %603, !llvm.loop !621

610:                                              ; preds = %603, %595, %504
  %611 = phi i32 [ %486, %504 ], [ %552, %595 ], [ %598, %603 ]
  %612 = add nuw nsw i64 %484, 1
  %613 = add i32 %485, 1
  %614 = icmp eq i64 %612, %359
  br i1 %614, label %615, label %480, !llvm.loop !622

615:                                              ; preds = %610, %473, %465, %370, %340
  %616 = phi i32 [ %382, %370 ], [ %382, %465 ], [ %307, %340 ], [ %382, %473 ], [ %506, %610 ]
  %617 = phi i32 [ %381, %370 ], [ %381, %465 ], [ %308, %340 ], [ %381, %473 ], [ %507, %610 ]
  %618 = phi i32 [ %380, %370 ], [ %380, %465 ], [ %309, %340 ], [ %380, %473 ], [ %508, %610 ]
  %619 = phi i32 [ %315, %370 ], [ %314, %465 ], [ %315, %340 ], [ %468, %473 ], [ %611, %610 ]
  %620 = add nuw i32 %311, 1
  %621 = add nuw i32 %310, 1
  br label %306

622:                                              ; preds = %320, %318
  %.lcssa19 = phi i32 [ %307, %320 ], [ %.lcssa18, %318 ]
  %.lcssa17 = phi i32 [ %308, %320 ], [ %.lcssa16, %318 ]
  %.lcssa15 = phi i32 [ %309, %320 ], [ %.lcssa14, %318 ]
  %623 = phi i32 [ %319, %318 ], [ %325, %320 ]
  %624 = phi i32 [ %.lcssa12, %318 ], [ %323, %320 ]
  %625 = icmp sgt i32 %624, %623
  br i1 %625, label %626, label %636

626:                                              ; preds = %622
  %627 = add i32 %624, 1
  %628 = sub i32 %627, %623
  br label %629

629:                                              ; preds = %629, %626
  %630 = phi i32 [ %634, %629 ], [ 1, %626 ]
  call void @tmax(ptr noundef nonnull %15, ptr noundef nonnull %14, ptr noundef nonnull %9, ptr noundef nonnull %10) #44
  %631 = load i32, ptr %9, align 4, !tbaa !17
  %632 = load i32, ptr %10, align 4, !tbaa !17
  call void @tdelete(ptr noundef nonnull %15, i32 noundef %631, i32 noundef %632) #44
  %633 = load i32, ptr %10, align 4, !tbaa !17
  call void @tinsert(ptr noundef nonnull %17, i32 noundef %633, i32 noundef 0) #44
  %634 = add nuw i32 %630, 1
  %635 = icmp eq i32 %634, %628
  br i1 %635, label %636, label %629, !llvm.loop !623

636:                                              ; preds = %629, %622
  %637 = phi i32 [ %624, %622 ], [ %623, %629 ]
  %638 = load ptr, ptr %13, align 8, !tbaa !7
  %639 = icmp eq ptr %638, null
  br i1 %639, label %643, label %640

640:                                              ; preds = %640, %636
  call void @tpop(ptr noundef nonnull %13, ptr noundef nonnull %14, ptr noundef nonnull %4, ptr noundef nonnull %5) #44
  %641 = load ptr, ptr %14, align 8, !tbaa !7
  %642 = icmp eq ptr %641, null
  br i1 %642, label %643, label %640

643:                                              ; preds = %640, %636
  br i1 %.lcssa6, label %644, label %665

644:                                              ; preds = %643
  %645 = load ptr, ptr @gnodeArray, align 8, !tbaa !7
  %646 = getelementptr inbounds ptr, ptr %645, i64 %.lcssa3
  %647 = load ptr, ptr %646, align 8, !tbaa !7
  %648 = icmp eq ptr %647, null
  br i1 %648, label %665, label %649

649:                                              ; preds = %660, %644
  %650 = phi ptr [ %663, %660 ], [ %647, %644 ]
  %651 = load i32, ptr %650, align 8, !tbaa !481
  %652 = sext i32 %651 to i64
  %653 = getelementptr inbounds ptr, ptr %645, i64 %652
  br label %654

654:                                              ; preds = %654, %649
  %655 = phi ptr [ %653, %649 ], [ %659, %654 ]
  %656 = load ptr, ptr %655, align 8, !tbaa !7
  %657 = load i32, ptr %656, align 8, !tbaa !481
  %658 = icmp eq i32 %657, %.lcssa4
  %659 = getelementptr inbounds %struct.clbox, ptr %656, i64 0, i32 7
  br i1 %658, label %660, label %654

660:                                              ; preds = %654
  %.lcssa20 = phi ptr [ %656, %654 ]
  %661 = getelementptr inbounds %struct.clbox, ptr %.lcssa20, i64 0, i32 6
  store i32 1, ptr %661, align 8, !tbaa !536
  %662 = getelementptr inbounds %struct.clbox, ptr %650, i64 0, i32 7
  %663 = load ptr, ptr %662, align 8, !tbaa !7
  %664 = icmp eq ptr %663, null
  br i1 %664, label %665, label %649, !llvm.loop !624

665:                                              ; preds = %660, %644, %643
  %666 = icmp slt i32 %259, %165
  %667 = icmp eq i32 %259, %165
  br i1 %667, label %668, label %174, !llvm.loop !603

668:                                              ; preds = %665, %255, %181, %164
  br label %669

669:                                              ; preds = %701, %668
  %670 = phi i64 [ %683, %701 ], [ 0, %668 ]
  call void @tpop(ptr noundef nonnull %15, ptr noundef nonnull %14, ptr noundef nonnull %4, ptr noundef nonnull %5) #44
  %671 = load ptr, ptr %14, align 8, !tbaa !7
  %672 = icmp eq ptr %671, null
  br i1 %672, label %705, label %673

673:                                              ; preds = %669
  %674 = load ptr, ptr @pathArray, align 8, !tbaa !7
  %675 = load i32, ptr %5, align 4, !tbaa !17
  %676 = sext i32 %675 to i64
  %677 = getelementptr inbounds %struct.path, ptr %674, i64 %676
  %678 = load ptr, ptr %677, align 8, !tbaa !610
  %679 = getelementptr inbounds %struct.path, ptr %674, i64 %676, i32 2
  %680 = load i32, ptr %679, align 4, !tbaa !608
  %681 = add nsw i32 %680, 1
  %682 = load ptr, ptr @pathList, align 8, !tbaa !7
  %683 = add nuw nsw i64 %670, 1
  %684 = getelementptr inbounds ptr, ptr %682, i64 %683
  %685 = load ptr, ptr %684, align 8, !tbaa !7
  store i32 %681, ptr %685, align 4, !tbaa !17
  %686 = load i32, ptr %4, align 4, !tbaa !17
  %687 = add i32 %680, 2
  %688 = sext i32 %687 to i64
  %689 = getelementptr inbounds i32, ptr %685, i64 %688
  store i32 %686, ptr %689, align 4, !tbaa !17
  %690 = icmp slt i32 %680, 0
  br i1 %690, label %701, label %691

691:                                              ; preds = %673
  %692 = zext i32 %687 to i64
  br label %693

693:                                              ; preds = %693, %691
  %694 = phi i64 [ 1, %691 ], [ %699, %693 ]
  %695 = getelementptr inbounds i16, ptr %678, i64 %694
  %696 = load i16, ptr %695, align 2, !tbaa !542
  %697 = sext i16 %696 to i32
  %698 = getelementptr inbounds i32, ptr %685, i64 %694
  store i32 %697, ptr %698, align 4, !tbaa !17
  %699 = add nuw nsw i64 %694, 1
  %700 = icmp eq i64 %699, %692
  br i1 %700, label %701, label %693, !llvm.loop !625

701:                                              ; preds = %693, %673
  %702 = load i32, ptr @Mpaths, align 4, !tbaa !17
  %703 = sext i32 %702 to i64
  %704 = icmp slt i64 %683, %703
  br i1 %704, label %669, label %705

705:                                              ; preds = %701, %669
  %706 = phi i64 [ %670, %669 ], [ %683, %701 ]
  %707 = load ptr, ptr %17, align 8, !tbaa !7
  %708 = icmp eq ptr %707, null
  br i1 %708, label %712, label %709

709:                                              ; preds = %709, %705
  call void @tpop(ptr noundef nonnull %17, ptr noundef nonnull %14, ptr noundef nonnull %4, ptr noundef nonnull %5) #44
  %710 = load ptr, ptr %14, align 8, !tbaa !7
  %711 = icmp eq ptr %710, null
  br i1 %711, label %712, label %709

712:                                              ; preds = %709, %705
  %713 = load ptr, ptr %18, align 8, !tbaa !7
  %714 = icmp eq ptr %713, null
  br i1 %714, label %718, label %715

715:                                              ; preds = %715, %712
  call void @tpop(ptr noundef nonnull %18, ptr noundef nonnull %16, ptr noundef nonnull %11, ptr noundef nonnull %3) #44
  %716 = load ptr, ptr %16, align 8, !tbaa !7
  %717 = icmp eq ptr %716, null
  br i1 %717, label %718, label %715

718:                                              ; preds = %715, %712
  %719 = trunc i64 %706 to i32
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %19) #47
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %18) #47
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17) #47
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %16) #47
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %15) #47
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14) #47
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %12) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %11) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %10) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8) #47
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %7) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %3) #47
  ret i32 %719
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #31

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @greduce(ptr nocapture noundef readonly %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6) #12 {
  %8 = alloca [5 x i32], align 16
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %8) #47
  %9 = getelementptr inbounds [5 x i32], ptr %8, i64 0, i64 1
  store i32 %3, ptr %9, align 4, !tbaa !17
  %10 = getelementptr inbounds [5 x i32], ptr %8, i64 0, i64 2
  store i32 %4, ptr %10, align 8, !tbaa !17
  %11 = getelementptr inbounds [5 x i32], ptr %8, i64 0, i64 3
  store i32 %5, ptr %11, align 4, !tbaa !17
  %12 = getelementptr inbounds [5 x i32], ptr %8, i64 0, i64 4
  store i32 %6, ptr %12, align 16, !tbaa !17
  %13 = sext i32 %1 to i64
  %14 = getelementptr inbounds i16, ptr %0, i64 %13
  %15 = load i16, ptr %14, align 2, !tbaa !542
  %16 = sext i16 %15 to i32
  %17 = load ptr, ptr @gnodeArray, align 8, !tbaa !7
  %18 = sext i16 %15 to i64
  %19 = getelementptr inbounds ptr, ptr %17, i64 %18
  %20 = load ptr, ptr %19, align 8, !tbaa !7
  %21 = icmp slt i32 %2, 1
  br i1 %21, label %26, label %22

22:                                               ; preds = %7
  %23 = load i32, ptr %20, align 8, !tbaa !481
  %24 = add nuw i32 %2, 1
  %25 = zext i32 %24 to i64
  br label %30

26:                                               ; preds = %49, %7
  %27 = icmp sgt i32 %1, 1
  br i1 %27, label %28, label %88

28:                                               ; preds = %26
  %29 = zext i32 %1 to i64
  br label %60

30:                                               ; preds = %49, %22
  %31 = phi i64 [ 1, %22 ], [ %52, %49 ]
  %32 = getelementptr inbounds [5 x i32], ptr %8, i64 0, i64 %31
  %33 = load i32, ptr %32, align 4, !tbaa !17
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds ptr, ptr %17, i64 %34
  %36 = load ptr, ptr %35, align 8, !tbaa !7
  %37 = icmp eq i32 %23, %33
  br i1 %37, label %38, label %43

38:                                               ; preds = %43, %30
  %39 = phi ptr [ %20, %30 ], [ %46, %43 ]
  %40 = getelementptr inbounds %struct.clbox, ptr %39, i64 0, i32 3
  store i32 1000000000, ptr %40, align 4, !tbaa !486
  %41 = load i32, ptr %36, align 8, !tbaa !481
  %42 = icmp eq i32 %41, %16
  br i1 %42, label %49, label %54

43:                                               ; preds = %43, %30
  %44 = phi ptr [ %46, %43 ], [ %20, %30 ]
  %45 = getelementptr inbounds %struct.clbox, ptr %44, i64 0, i32 7
  %46 = load ptr, ptr %45, align 8, !tbaa !483
  %47 = load i32, ptr %46, align 8, !tbaa !481
  %48 = icmp eq i32 %47, %33
  br i1 %48, label %38, label %43

49:                                               ; preds = %54, %38
  %50 = phi ptr [ %36, %38 ], [ %57, %54 ]
  %51 = getelementptr inbounds %struct.clbox, ptr %50, i64 0, i32 3
  store i32 1000000000, ptr %51, align 4, !tbaa !486
  %52 = add nuw nsw i64 %31, 1
  %53 = icmp eq i64 %52, %25
  br i1 %53, label %26, label %30, !llvm.loop !626

54:                                               ; preds = %54, %38
  %55 = phi ptr [ %57, %54 ], [ %36, %38 ]
  %56 = getelementptr inbounds %struct.clbox, ptr %55, i64 0, i32 7
  %57 = load ptr, ptr %56, align 8, !tbaa !483
  %58 = load i32, ptr %57, align 8, !tbaa !481
  %59 = icmp eq i32 %58, %16
  br i1 %59, label %49, label %54

60:                                               ; preds = %85, %28
  %61 = phi i64 [ 1, %28 ], [ %86, %85 ]
  %62 = getelementptr inbounds i16, ptr %0, i64 %61
  %63 = load i16, ptr %62, align 2, !tbaa !542
  %64 = sext i16 %63 to i32
  %65 = sext i16 %63 to i64
  %66 = getelementptr inbounds ptr, ptr %17, i64 %65
  %67 = load ptr, ptr %66, align 8, !tbaa !7
  %68 = icmp eq ptr %67, null
  br i1 %68, label %85, label %69

69:                                               ; preds = %80, %60
  %70 = phi ptr [ %83, %80 ], [ %67, %60 ]
  %71 = load i32, ptr %70, align 8, !tbaa !481
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds ptr, ptr %17, i64 %72
  br label %74

74:                                               ; preds = %74, %69
  %75 = phi ptr [ %73, %69 ], [ %79, %74 ]
  %76 = load ptr, ptr %75, align 8, !tbaa !7
  %77 = load i32, ptr %76, align 8, !tbaa !481
  %78 = icmp eq i32 %77, %64
  %79 = getelementptr inbounds %struct.clbox, ptr %76, i64 0, i32 7
  br i1 %78, label %80, label %74

80:                                               ; preds = %74
  %.lcssa = phi ptr [ %76, %74 ]
  %81 = getelementptr inbounds %struct.clbox, ptr %.lcssa, i64 0, i32 5
  store i32 1, ptr %81, align 4, !tbaa !535
  %82 = getelementptr inbounds %struct.clbox, ptr %70, i64 0, i32 7
  %83 = load ptr, ptr %82, align 8, !tbaa !7
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %69, !llvm.loop !627

85:                                               ; preds = %80, %60
  %86 = add nuw nsw i64 %61, 1
  %87 = icmp eq i64 %86, %29
  br i1 %87, label %88, label %60, !llvm.loop !628

88:                                               ; preds = %85, %26
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %8) #47
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @gunreduce(ptr nocapture noundef readonly %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6) #12 {
  %8 = alloca [5 x i32], align 16
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %8) #47
  %9 = getelementptr inbounds [5 x i32], ptr %8, i64 0, i64 1
  store i32 %3, ptr %9, align 4, !tbaa !17
  %10 = getelementptr inbounds [5 x i32], ptr %8, i64 0, i64 2
  store i32 %4, ptr %10, align 8, !tbaa !17
  %11 = getelementptr inbounds [5 x i32], ptr %8, i64 0, i64 3
  store i32 %5, ptr %11, align 4, !tbaa !17
  %12 = getelementptr inbounds [5 x i32], ptr %8, i64 0, i64 4
  store i32 %6, ptr %12, align 16, !tbaa !17
  %13 = sext i32 %1 to i64
  %14 = getelementptr inbounds i16, ptr %0, i64 %13
  %15 = load i16, ptr %14, align 2, !tbaa !542
  %16 = sext i16 %15 to i32
  %17 = load ptr, ptr @gnodeArray, align 8, !tbaa !7
  %18 = sext i16 %15 to i64
  %19 = getelementptr inbounds ptr, ptr %17, i64 %18
  %20 = load ptr, ptr %19, align 8, !tbaa !7
  %21 = icmp slt i32 %2, 1
  br i1 %21, label %26, label %22

22:                                               ; preds = %7
  %23 = load i32, ptr %20, align 8, !tbaa !481
  %24 = add nuw i32 %2, 1
  %25 = zext i32 %24 to i64
  br label %30

26:                                               ; preds = %51, %7
  %27 = icmp sgt i32 %1, 1
  br i1 %27, label %28, label %92

28:                                               ; preds = %26
  %29 = zext i32 %1 to i64
  br label %64

30:                                               ; preds = %51, %22
  %31 = phi i64 [ 1, %22 ], [ %56, %51 ]
  %32 = getelementptr inbounds [5 x i32], ptr %8, i64 0, i64 %31
  %33 = load i32, ptr %32, align 4, !tbaa !17
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds ptr, ptr %17, i64 %34
  %36 = load ptr, ptr %35, align 8, !tbaa !7
  %37 = icmp eq i32 %23, %33
  br i1 %37, label %38, label %45

38:                                               ; preds = %45, %30
  %39 = phi ptr [ %20, %30 ], [ %48, %45 ]
  %40 = getelementptr inbounds %struct.clbox, ptr %39, i64 0, i32 2
  %41 = load i32, ptr %40, align 8, !tbaa !485
  %42 = getelementptr inbounds %struct.clbox, ptr %39, i64 0, i32 3
  store i32 %41, ptr %42, align 4, !tbaa !486
  %43 = load i32, ptr %36, align 8, !tbaa !481
  %44 = icmp eq i32 %43, %16
  br i1 %44, label %51, label %58

45:                                               ; preds = %45, %30
  %46 = phi ptr [ %48, %45 ], [ %20, %30 ]
  %47 = getelementptr inbounds %struct.clbox, ptr %46, i64 0, i32 7
  %48 = load ptr, ptr %47, align 8, !tbaa !483
  %49 = load i32, ptr %48, align 8, !tbaa !481
  %50 = icmp eq i32 %49, %33
  br i1 %50, label %38, label %45

51:                                               ; preds = %58, %38
  %52 = phi ptr [ %36, %38 ], [ %61, %58 ]
  %53 = getelementptr inbounds %struct.clbox, ptr %52, i64 0, i32 2
  %54 = load i32, ptr %53, align 8, !tbaa !485
  %55 = getelementptr inbounds %struct.clbox, ptr %52, i64 0, i32 3
  store i32 %54, ptr %55, align 4, !tbaa !486
  %56 = add nuw nsw i64 %31, 1
  %57 = icmp eq i64 %56, %25
  br i1 %57, label %26, label %30, !llvm.loop !629

58:                                               ; preds = %58, %38
  %59 = phi ptr [ %61, %58 ], [ %36, %38 ]
  %60 = getelementptr inbounds %struct.clbox, ptr %59, i64 0, i32 7
  %61 = load ptr, ptr %60, align 8, !tbaa !483
  %62 = load i32, ptr %61, align 8, !tbaa !481
  %63 = icmp eq i32 %62, %16
  br i1 %63, label %51, label %58

64:                                               ; preds = %89, %28
  %65 = phi i64 [ 1, %28 ], [ %90, %89 ]
  %66 = getelementptr inbounds i16, ptr %0, i64 %65
  %67 = load i16, ptr %66, align 2, !tbaa !542
  %68 = sext i16 %67 to i32
  %69 = sext i16 %67 to i64
  %70 = getelementptr inbounds ptr, ptr %17, i64 %69
  %71 = load ptr, ptr %70, align 8, !tbaa !7
  %72 = icmp eq ptr %71, null
  br i1 %72, label %89, label %73

73:                                               ; preds = %84, %64
  %74 = phi ptr [ %87, %84 ], [ %71, %64 ]
  %75 = load i32, ptr %74, align 8, !tbaa !481
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds ptr, ptr %17, i64 %76
  br label %78

78:                                               ; preds = %78, %73
  %79 = phi ptr [ %77, %73 ], [ %83, %78 ]
  %80 = load ptr, ptr %79, align 8, !tbaa !7
  %81 = load i32, ptr %80, align 8, !tbaa !481
  %82 = icmp eq i32 %81, %68
  %83 = getelementptr inbounds %struct.clbox, ptr %80, i64 0, i32 7
  br i1 %82, label %84, label %78

84:                                               ; preds = %78
  %.lcssa = phi ptr [ %80, %78 ]
  %85 = getelementptr inbounds %struct.clbox, ptr %.lcssa, i64 0, i32 5
  store i32 0, ptr %85, align 4, !tbaa !535
  %86 = getelementptr inbounds %struct.clbox, ptr %74, i64 0, i32 7
  %87 = load ptr, ptr %86, align 8, !tbaa !7
  %88 = icmp eq ptr %87, null
  br i1 %88, label %89, label %73, !llvm.loop !630

89:                                               ; preds = %84, %64
  %90 = add nuw nsw i64 %65, 1
  %91 = icmp eq i64 %90, %29
  br i1 %91, label %92, label %64, !llvm.loop !631

92:                                               ; preds = %89, %26
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %8) #47
  ret void
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write, argmem: none, inaccessiblemem: readwrite) uwtable
define internal noalias ptr @MTBegin() #32 {
  %1 = tail call noalias dereferenceable_or_null(3676) ptr @malloc(i64 noundef 3676) #45
  %2 = icmp eq ptr %1, null
  br i1 %2, label %10, label %3

3:                                                ; preds = %0
  store i32 0, ptr %1, align 4, !tbaa !632
  %4 = getelementptr inbounds %struct.MT, ptr %1, i64 0, i32 2
  %5 = getelementptr inbounds %struct.MT, ptr %1, i64 0, i32 2, i64 2, i64 2
  %6 = getelementptr inbounds %struct.MT, ptr %1, i64 0, i32 2, i64 1, i64 1
  %7 = getelementptr inbounds %struct.MT, ptr %1, i64 0, i32 3, i64 2, i64 2
  store i32 1, ptr %7, align 4, !tbaa !17
  %8 = getelementptr inbounds %struct.MT, ptr %1, i64 0, i32 3, i64 1
  %9 = getelementptr inbounds %struct.MT, ptr %1, i64 0, i32 3, i64 2, i64 1
  store i32 0, ptr %9, align 4, !tbaa !17
  store <4 x i32> <i32 0, i32 1, i32 0, i32 0>, ptr %8, align 4, !tbaa !17
  store <4 x i32> <i32 1, i32 1, i32 0, i32 0>, ptr %5, align 4, !tbaa !17
  store <4 x i32> <i32 1, i32 0, i32 0, i32 0>, ptr %6, align 4, !tbaa !17
  store <4 x i32> <i32 1, i32 0, i32 0, i32 0>, ptr %4, align 4, !tbaa !17
  br label %10

10:                                               ; preds = %3, %0
  ret ptr %1
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal void @MTIdentity(ptr nocapture noundef writeonly %0) #33 {
  %2 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 2
  %3 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 2, i64 2, i64 2
  %4 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 2, i64 1, i64 1
  %5 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 3, i64 2, i64 2
  store i32 1, ptr %5, align 4, !tbaa !17
  %6 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 3, i64 1
  %7 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 3, i64 2, i64 1
  store i32 0, ptr %7, align 4, !tbaa !17
  store <4 x i32> <i32 0, i32 1, i32 0, i32 0>, ptr %6, align 4, !tbaa !17
  store <4 x i32> <i32 1, i32 1, i32 0, i32 0>, ptr %3, align 4, !tbaa !17
  store <4 x i32> <i32 1, i32 0, i32 0, i32 0>, ptr %4, align 4, !tbaa !17
  store <4 x i32> <i32 1, i32 0, i32 0, i32 0>, ptr %2, align 4, !tbaa !17
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal void @MTMY(ptr nocapture noundef %0) #34 {
  %2 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 2, i64 0, i64 1
  %3 = load i32, ptr %2, align 4, !tbaa !17
  %4 = sub nsw i32 0, %3
  store i32 %4, ptr %2, align 4, !tbaa !17
  %5 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 2, i64 1, i64 1
  %6 = load i32, ptr %5, align 4, !tbaa !17
  %7 = sub nsw i32 0, %6
  store i32 %7, ptr %5, align 4, !tbaa !17
  %8 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 2, i64 2, i64 1
  %9 = load i32, ptr %8, align 4, !tbaa !17
  %10 = sub nsw i32 0, %9
  store i32 %10, ptr %8, align 4, !tbaa !17
  tail call fastcc void @MTInvert(ptr noundef %0) #43
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal fastcc void @MTInvert(ptr nocapture noundef %0) unnamed_addr #34 {
  %2 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 2
  %3 = load i32, ptr %2, align 4, !tbaa !17
  %4 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 3
  store i32 %3, ptr %4, align 4, !tbaa !17
  %5 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 2, i64 1
  %6 = load i32, ptr %5, align 4, !tbaa !17
  %7 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 3, i64 0, i64 1
  store i32 %6, ptr %7, align 4, !tbaa !17
  %8 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 2, i64 0, i64 1
  %9 = load i32, ptr %8, align 4, !tbaa !17
  %10 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 3, i64 1
  store i32 %9, ptr %10, align 4, !tbaa !17
  %11 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 2, i64 1, i64 1
  %12 = load i32, ptr %11, align 4, !tbaa !17
  %13 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 3, i64 1, i64 1
  store i32 %12, ptr %13, align 4, !tbaa !17
  %14 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 2, i64 2
  %15 = load i32, ptr %14, align 4, !tbaa !17
  %16 = mul i32 %15, %3
  %17 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 2, i64 2, i64 1
  %18 = load i32, ptr %17, align 4, !tbaa !17
  %19 = mul nsw i32 %18, %9
  %20 = add i32 %16, %19
  %21 = sub i32 0, %20
  %22 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 3, i64 2
  store i32 %21, ptr %22, align 4, !tbaa !17
  %23 = mul i32 %15, %6
  %24 = mul nsw i32 %18, %12
  %25 = add i32 %23, %24
  %26 = sub i32 0, %25
  %27 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 3, i64 2, i64 1
  store i32 %26, ptr %27, align 4, !tbaa !17
  %28 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 3, i64 1, i64 2
  store i32 0, ptr %28, align 4, !tbaa !17
  %29 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 3, i64 0, i64 2
  store i32 0, ptr %29, align 4, !tbaa !17
  %30 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 3, i64 2, i64 2
  store i32 1, ptr %30, align 4, !tbaa !17
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal void @MTMX(ptr nocapture noundef %0) #34 {
  %2 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 2
  %3 = load i32, ptr %2, align 4, !tbaa !17
  %4 = sub nsw i32 0, %3
  store i32 %4, ptr %2, align 4, !tbaa !17
  %5 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 2, i64 1
  %6 = load i32, ptr %5, align 4, !tbaa !17
  %7 = sub nsw i32 0, %6
  store i32 %7, ptr %5, align 4, !tbaa !17
  %8 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 2, i64 2
  %9 = load i32, ptr %8, align 4, !tbaa !17
  %10 = sub nsw i32 0, %9
  store i32 %10, ptr %8, align 4, !tbaa !17
  tail call fastcc void @MTInvert(ptr noundef %0) #43
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(argmem: readwrite) uwtable
define internal void @MTRotate(ptr nocapture noundef %0, i32 noundef %1, i32 noundef %2) #35 {
  %4 = icmp eq i32 %1, 0
  br i1 %4, label %5, label %12

5:                                                ; preds = %3
  %6 = tail call i32 @llvm.abs.i32(i32 %2, i1 true)
  %7 = icmp ugt i32 %6, 1
  %8 = icmp sgt i32 %2, -1
  %9 = select i1 %8, i32 1, i32 -1
  %10 = select i1 %7, i32 %9, i32 %2
  %11 = icmp eq i32 %10, -1
  br i1 %11, label %20, label %36

12:                                               ; preds = %3
  %13 = icmp eq i32 %2, 0
  br i1 %13, label %14, label %62

14:                                               ; preds = %12
  %15 = tail call i32 @llvm.abs.i32(i32 %1, i1 true)
  %16 = icmp ugt i32 %15, 1
  %17 = icmp sgt i32 %1, -1
  %18 = select i1 %17, i32 1, i32 -1
  %19 = select i1 %16, i32 %18, i32 %1
  switch i32 %19, label %62 [
    i32 1, label %63
    i32 -1, label %55
  ]

20:                                               ; preds = %5
  %21 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 2
  %22 = load i32, ptr %21, align 4, !tbaa !17
  %23 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 2, i64 0, i64 1
  %24 = load i32, ptr %23, align 4, !tbaa !17
  store i32 %24, ptr %21, align 4, !tbaa !17
  %25 = sub nsw i32 0, %22
  store i32 %25, ptr %23, align 4, !tbaa !17
  %26 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 2, i64 1
  %27 = load i32, ptr %26, align 4, !tbaa !17
  %28 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 2, i64 1, i64 1
  %29 = load i32, ptr %28, align 4, !tbaa !17
  store i32 %29, ptr %26, align 4, !tbaa !17
  %30 = sub nsw i32 0, %27
  store i32 %30, ptr %28, align 4, !tbaa !17
  %31 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 2, i64 2
  %32 = load i32, ptr %31, align 4, !tbaa !17
  %33 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 2, i64 2, i64 1
  %34 = load i32, ptr %33, align 4, !tbaa !17
  store i32 %34, ptr %31, align 4, !tbaa !17
  %35 = sub nsw i32 0, %32
  store i32 %35, ptr %33, align 4, !tbaa !17
  br label %62

36:                                               ; preds = %5
  %37 = icmp eq i32 %10, 1
  %38 = and i1 %4, %37
  br i1 %38, label %39, label %62

39:                                               ; preds = %36
  %40 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 2
  %41 = load i32, ptr %40, align 4, !tbaa !17
  %42 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 2, i64 0, i64 1
  %43 = load i32, ptr %42, align 4, !tbaa !17
  %44 = sub nsw i32 0, %43
  store i32 %44, ptr %40, align 4, !tbaa !17
  store i32 %41, ptr %42, align 4, !tbaa !17
  %45 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 2, i64 1
  %46 = load i32, ptr %45, align 4, !tbaa !17
  %47 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 2, i64 1, i64 1
  %48 = load i32, ptr %47, align 4, !tbaa !17
  %49 = sub nsw i32 0, %48
  store i32 %49, ptr %45, align 4, !tbaa !17
  store i32 %46, ptr %47, align 4, !tbaa !17
  %50 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 2, i64 2
  %51 = load i32, ptr %50, align 4, !tbaa !17
  %52 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 2, i64 2, i64 1
  %53 = load i32, ptr %52, align 4, !tbaa !17
  %54 = sub nsw i32 0, %53
  store i32 %54, ptr %50, align 4, !tbaa !17
  store i32 %51, ptr %52, align 4, !tbaa !17
  br label %62

55:                                               ; preds = %55, %14
  %56 = phi i64 [ %60, %55 ], [ 0, %14 ]
  %57 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 2, i64 %56, i64 0
  %58 = load <2 x i32>, ptr %57, align 4, !tbaa !17
  %59 = sub nsw <2 x i32> zeroinitializer, %58
  store <2 x i32> %59, ptr %57, align 4, !tbaa !17
  %60 = add nuw nsw i64 %56, 1
  %61 = icmp eq i64 %60, 3
  br i1 %61, label %62, label %55, !llvm.loop !634

62:                                               ; preds = %55, %39, %36, %20, %14, %12
  tail call fastcc void @MTInvert(ptr noundef %0) #43
  br label %63

63:                                               ; preds = %62, %14
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal void @MTPoint(ptr nocapture noundef readonly %0, ptr nocapture noundef %1, ptr nocapture noundef %2) #34 {
  %4 = load i32, ptr %1, align 4, !tbaa !17
  %5 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 2
  %6 = load i32, ptr %5, align 4, !tbaa !17
  %7 = mul nsw i32 %6, %4
  %8 = load i32, ptr %2, align 4, !tbaa !17
  %9 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 2, i64 1
  %10 = load i32, ptr %9, align 4, !tbaa !17
  %11 = mul nsw i32 %10, %8
  %12 = add nsw i32 %11, %7
  %13 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 2, i64 2
  %14 = load i32, ptr %13, align 4, !tbaa !17
  %15 = add nsw i32 %12, %14
  %16 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 2, i64 0, i64 1
  %17 = load i32, ptr %16, align 4, !tbaa !17
  %18 = mul nsw i32 %17, %4
  %19 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 2, i64 1, i64 1
  %20 = load i32, ptr %19, align 4, !tbaa !17
  %21 = mul nsw i32 %20, %8
  %22 = add nsw i32 %21, %18
  %23 = getelementptr inbounds %struct.MT, ptr %0, i64 0, i32 2, i64 2, i64 1
  %24 = load i32, ptr %23, align 4, !tbaa !17
  %25 = add nsw i32 %22, %24
  store i32 %25, ptr %2, align 4, !tbaa !17
  store i32 %15, ptr %1, align 4, !tbaa !17
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, argmem: read, inaccessiblemem: none) uwtable
define internal i32 @newOrient(ptr nocapture noundef readonly %0, i32 noundef %1) #18 {
  %3 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 5
  %4 = load i32, ptr %3, align 8, !tbaa !45
  %5 = icmp eq i32 %1, 4
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = zext i32 %4 to i64
  br label %80

8:                                                ; preds = %2
  %9 = icmp sgt i32 %4, 3
  br i1 %9, label %18, label %10

10:                                               ; preds = %8
  %11 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 4, i64 4
  %12 = load <4 x i32>, ptr %11, align 4, !tbaa !17
  %13 = icmp eq <4 x i32> %12, <i32 1, i32 1, i32 1, i32 1>
  %14 = bitcast <4 x i1> %13 to i4
  %15 = tail call i4 @llvm.ctpop.i4(i4 %14), !range !635
  %16 = zext i4 %15 to i32
  %17 = icmp eq i4 %14, 0
  br i1 %17, label %131, label %53

18:                                               ; preds = %8
  %19 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 4, i64 0
  %20 = load <4 x i32>, ptr %19, align 4, !tbaa !17
  %21 = icmp eq <4 x i32> %20, <i32 1, i32 1, i32 1, i32 1>
  %22 = bitcast <4 x i1> %21 to i4
  %23 = tail call i4 @llvm.ctpop.i4(i4 %22), !range !635
  %24 = zext i4 %23 to i32
  %25 = icmp eq i4 %22, 0
  br i1 %25, label %131, label %26

26:                                               ; preds = %18
  %27 = uitofp i4 %23 to double
  %28 = load i32, ptr @randVar, align 4, !tbaa !17
  br label %29

29:                                               ; preds = %29, %26
  %30 = phi i32 [ %28, %26 ], [ %32, %29 ]
  %31 = mul nsw i32 %30, 1103515245
  %32 = add nsw i32 %31, 12345
  %33 = and i32 %32, 2147483647
  %34 = sitofp i32 %33 to double
  %35 = fdiv double %34, 0x41DFFFFFFFC00000
  %36 = fmul double %35, %27
  %37 = fptosi double %36 to i32
  %38 = icmp eq i32 %24, %37
  br i1 %38, label %29, label %39, !llvm.loop !636

39:                                               ; preds = %29
  %.lcssa2 = phi i32 [ %32, %29 ]
  %.lcssa1 = phi i32 [ %37, %29 ]
  store i32 %.lcssa2, ptr @randVar, align 4, !tbaa !17
  br label %40

40:                                               ; preds = %49, %39
  %41 = phi i64 [ 0, %39 ], [ %51, %49 ]
  %42 = phi i32 [ 0, %39 ], [ %50, %49 ]
  %43 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 4, i64 %41
  %44 = load i32, ptr %43, align 4, !tbaa !17
  %45 = icmp eq i32 %44, 1
  br i1 %45, label %46, label %49

46:                                               ; preds = %40
  %47 = add nsw i32 %42, 1
  %48 = icmp eq i32 %42, %.lcssa1
  br i1 %48, label %125, label %49

49:                                               ; preds = %46, %40
  %50 = phi i32 [ %47, %46 ], [ %42, %40 ]
  %51 = add nuw nsw i64 %41, 1
  %52 = icmp eq i64 %51, 4
  br i1 %52, label %131, label %40, !llvm.loop !637

53:                                               ; preds = %10
  %54 = uitofp i4 %15 to double
  %55 = load i32, ptr @randVar, align 4, !tbaa !17
  br label %56

56:                                               ; preds = %56, %53
  %57 = phi i32 [ %55, %53 ], [ %59, %56 ]
  %58 = mul nsw i32 %57, 1103515245
  %59 = add nsw i32 %58, 12345
  %60 = and i32 %59, 2147483647
  %61 = sitofp i32 %60 to double
  %62 = fdiv double %61, 0x41DFFFFFFFC00000
  %63 = fmul double %62, %54
  %64 = fptosi double %63 to i32
  %65 = icmp eq i32 %16, %64
  br i1 %65, label %56, label %66, !llvm.loop !638

66:                                               ; preds = %56
  %.lcssa5 = phi i32 [ %59, %56 ]
  %.lcssa4 = phi i32 [ %64, %56 ]
  store i32 %.lcssa5, ptr @randVar, align 4, !tbaa !17
  br label %67

67:                                               ; preds = %76, %66
  %68 = phi i64 [ 4, %66 ], [ %78, %76 ]
  %69 = phi i32 [ 0, %66 ], [ %77, %76 ]
  %70 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 4, i64 %68
  %71 = load i32, ptr %70, align 4, !tbaa !17
  %72 = icmp eq i32 %71, 1
  br i1 %72, label %73, label %76

73:                                               ; preds = %67
  %74 = add nsw i32 %69, 1
  %75 = icmp eq i32 %69, %.lcssa4
  br i1 %75, label %127, label %76

76:                                               ; preds = %73, %67
  %77 = phi i32 [ %74, %73 ], [ %69, %67 ]
  %78 = add nuw nsw i64 %68, 1
  %79 = icmp eq i64 %78, 8
  br i1 %79, label %131, label %67, !llvm.loop !639

80:                                               ; preds = %90, %6
  %81 = phi i64 [ 0, %6 ], [ %92, %90 ]
  %82 = phi i32 [ 0, %6 ], [ %91, %90 ]
  %83 = icmp eq i64 %81, %7
  br i1 %83, label %90, label %84

84:                                               ; preds = %80
  %85 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 4, i64 %81
  %86 = load i32, ptr %85, align 4, !tbaa !17
  %87 = icmp eq i32 %86, 1
  %88 = zext i1 %87 to i32
  %89 = add nsw i32 %82, %88
  br label %90

90:                                               ; preds = %84, %80
  %91 = phi i32 [ %82, %80 ], [ %89, %84 ]
  %92 = add nuw nsw i64 %81, 1
  %93 = icmp eq i64 %92, 8
  br i1 %93, label %94, label %80, !llvm.loop !640

94:                                               ; preds = %90
  %.lcssa9 = phi i32 [ %91, %90 ]
  %95 = icmp eq i32 %.lcssa9, 0
  br i1 %95, label %131, label %96

96:                                               ; preds = %94
  %97 = sitofp i32 %.lcssa9 to double
  %98 = load i32, ptr @randVar, align 4, !tbaa !17
  br label %99

99:                                               ; preds = %99, %96
  %100 = phi i32 [ %98, %96 ], [ %102, %99 ]
  %101 = mul nsw i32 %100, 1103515245
  %102 = add nsw i32 %101, 12345
  %103 = and i32 %102, 2147483647
  %104 = sitofp i32 %103 to double
  %105 = fdiv double %104, 0x41DFFFFFFFC00000
  %106 = fmul double %105, %97
  %107 = fptosi double %106 to i32
  %108 = icmp eq i32 %.lcssa9, %107
  br i1 %108, label %99, label %109, !llvm.loop !641

109:                                              ; preds = %99
  %.lcssa8 = phi i32 [ %102, %99 ]
  %.lcssa7 = phi i32 [ %107, %99 ]
  store i32 %.lcssa8, ptr @randVar, align 4, !tbaa !17
  br label %110

110:                                              ; preds = %121, %109
  %111 = phi i64 [ 0, %109 ], [ %123, %121 ]
  %112 = phi i32 [ 0, %109 ], [ %122, %121 ]
  %113 = icmp eq i64 %111, %7
  br i1 %113, label %121, label %114

114:                                              ; preds = %110
  %115 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 4, i64 %111
  %116 = load i32, ptr %115, align 4, !tbaa !17
  %117 = icmp eq i32 %116, 1
  br i1 %117, label %118, label %121

118:                                              ; preds = %114
  %119 = add nsw i32 %112, 1
  %120 = icmp eq i32 %112, %.lcssa7
  br i1 %120, label %129, label %121

121:                                              ; preds = %118, %114, %110
  %122 = phi i32 [ %112, %110 ], [ %119, %118 ], [ %112, %114 ]
  %123 = add nuw nsw i64 %111, 1
  %124 = icmp eq i64 %123, 8
  br i1 %124, label %131, label %110, !llvm.loop !642

125:                                              ; preds = %46
  %.lcssa = phi i64 [ %41, %46 ]
  %126 = trunc i64 %.lcssa to i32
  br label %131

127:                                              ; preds = %73
  %.lcssa3 = phi i64 [ %68, %73 ]
  %128 = trunc i64 %.lcssa3 to i32
  br label %131

129:                                              ; preds = %118
  %.lcssa6 = phi i64 [ %111, %118 ]
  %130 = trunc i64 %.lcssa6 to i32
  br label %131

131:                                              ; preds = %129, %127, %125, %121, %94, %76, %49, %18, %10
  %132 = phi i32 [ -1, %18 ], [ -1, %10 ], [ -1, %94 ], [ %126, %125 ], [ %128, %127 ], [ %130, %129 ], [ undef, %49 ], [ undef, %76 ], [ undef, %121 ]
  ret i32 %132
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i4 @llvm.ctpop.i4(i4) #13

; Function Attrs: nounwind optsize uwtable
define internal void @outbig() #0 {
  %1 = alloca [1024 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 1024, ptr nonnull %1) #47
  %2 = load i32, ptr @bdxlength, align 4
  %3 = load i32, ptr @bdylength, align 4
  %4 = tail call i32 @llvm.smax.i32(i32 %2, i32 %3)
  %5 = sitofp i32 %4 to double
  %6 = fdiv double %5, 5.000000e+02
  %7 = fptosi double %6 to i32
  %8 = add nsw i32 %7, 1
  %9 = load i32, ptr @finalShot, align 4, !tbaa !17
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %15

11:                                               ; preds = %0
  %12 = tail call noalias dereferenceable_or_null(416) ptr @malloc(i64 noundef 416) #45
  store ptr %12, ptr @rectang, align 8, !tbaa !7
  %13 = tail call noalias dereferenceable_or_null(808) ptr @malloc(i64 noundef 808) #45
  store ptr %13, ptr @PtsArray, align 8, !tbaa !7
  %14 = tail call noalias dereferenceable_or_null(808) ptr @malloc(i64 noundef 808) #45
  store ptr %14, ptr @PtsOut, align 8, !tbaa !7
  br label %15

15:                                               ; preds = %11, %0
  %16 = load ptr, ptr @cktName, align 8, !tbaa !7
  %17 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %1, ptr noundef nonnull dereferenceable(1) @.str.414, ptr noundef %16) #44
  %18 = call noalias ptr @fopen(ptr noundef nonnull %1, ptr noundef nonnull @.str.1.415) #43
  %19 = icmp eq ptr %18, null
  br i1 %19, label %25, label %20

20:                                               ; preds = %15
  %21 = load i32, ptr @numcells, align 4, !tbaa !17
  %22 = load i32, ptr @numpads, align 4, !tbaa !17
  %23 = add nsw i32 %22, %21
  %24 = icmp slt i32 %23, 1
  br i1 %24, label %219, label %28

25:                                               ; preds = %15
  %26 = load ptr, ptr @fpo, align 8, !tbaa !7
  %27 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %26, ptr noundef nonnull @.str.2.416, ptr noundef nonnull %1) #43
  call void @exit(i32 noundef 0) #49
  unreachable

28:                                               ; preds = %212, %20
  %29 = phi i64 [ %213, %212 ], [ 1, %20 ]
  %30 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %31 = getelementptr inbounds ptr, ptr %30, i64 %29
  %32 = load ptr, ptr %31, align 8, !tbaa !7
  %33 = getelementptr inbounds %struct.cellbox, ptr %32, i64 0, i32 5
  %34 = load i32, ptr %33, align 8, !tbaa !45
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds %struct.cellbox, ptr %32, i64 0, i32 21, i64 %35
  %37 = load ptr, ptr %36, align 8, !tbaa !7
  %38 = getelementptr inbounds %struct.tilebox, ptr %37, i64 0, i32 17
  %39 = load ptr, ptr %38, align 8, !tbaa !47
  %40 = getelementptr inbounds %struct.cellbox, ptr %32, i64 0, i32 2
  %41 = load i32, ptr %40, align 4, !tbaa !164
  %42 = getelementptr inbounds %struct.cellbox, ptr %32, i64 0, i32 3
  %43 = load i32, ptr %42, align 8, !tbaa !165
  %44 = load ptr, ptr %32, align 8, !tbaa !291
  %45 = trunc i64 %29 to i32
  tail call void @initPts(i32 noundef %45, ptr noundef %44, i32 noundef %34) #44
  %46 = getelementptr inbounds %struct.tilebox, ptr %37, i64 0, i32 9
  %47 = load i32, ptr %46, align 8, !tbaa !167
  %48 = getelementptr inbounds %struct.tilebox, ptr %37, i64 0, i32 10
  %49 = load i32, ptr %48, align 4, !tbaa !168
  %50 = getelementptr inbounds %struct.tilebox, ptr %37, i64 0, i32 11
  %51 = load i32, ptr %50, align 8, !tbaa !169
  %52 = getelementptr inbounds %struct.tilebox, ptr %37, i64 0, i32 12
  %53 = load i32, ptr %52, align 4, !tbaa !170
  %54 = load i32, ptr @numcells, align 4, !tbaa !17
  %55 = sext i32 %54 to i64
  %56 = icmp sgt i64 %29, %55
  br i1 %56, label %96, label %57

57:                                               ; preds = %28
  %58 = load i32, ptr @finalShot, align 4, !tbaa !17
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %83

60:                                               ; preds = %57
  %61 = add nsw i32 %47, %41
  %62 = add nsw i32 %51, %43
  %63 = add nsw i32 %53, %43
  %64 = getelementptr inbounds %struct.tilebox, ptr %37, i64 0, i32 1
  %65 = load double, ptr %64, align 8, !tbaa !292
  %66 = tail call i32 @wireestx(i32 noundef %61, i32 noundef %62, i32 noundef %63, double noundef %65) #44
  %67 = sub nsw i32 %47, %66
  %68 = add nsw i32 %49, %41
  %69 = getelementptr inbounds %struct.tilebox, ptr %37, i64 0, i32 2
  %70 = load double, ptr %69, align 8, !tbaa !293
  %71 = tail call i32 @wireestx(i32 noundef %68, i32 noundef %62, i32 noundef %63, double noundef %70) #44
  %72 = add nsw i32 %71, %49
  %73 = add nsw i32 %67, %41
  %74 = add nsw i32 %72, %41
  %75 = getelementptr inbounds %struct.tilebox, ptr %37, i64 0, i32 3
  %76 = load double, ptr %75, align 8, !tbaa !294
  %77 = tail call i32 @wireestx(i32 noundef %62, i32 noundef %73, i32 noundef %74, double noundef %76) #44
  %78 = sub nsw i32 %51, %77
  %79 = getelementptr inbounds %struct.tilebox, ptr %37, i64 0, i32 4
  %80 = load double, ptr %79, align 8, !tbaa !295
  %81 = tail call i32 @wireestx(i32 noundef %63, i32 noundef %73, i32 noundef %74, double noundef %80) #44
  %82 = add nsw i32 %81, %53
  br label %96

83:                                               ; preds = %57
  %84 = getelementptr inbounds %struct.tilebox, ptr %37, i64 0, i32 5
  %85 = load i32, ptr %84, align 8, !tbaa !442
  %86 = sub nsw i32 %47, %85
  %87 = getelementptr inbounds %struct.tilebox, ptr %37, i64 0, i32 6
  %88 = load i32, ptr %87, align 4, !tbaa !443
  %89 = add nsw i32 %88, %49
  %90 = getelementptr inbounds %struct.tilebox, ptr %37, i64 0, i32 7
  %91 = load i32, ptr %90, align 8, !tbaa !444
  %92 = sub nsw i32 %51, %91
  %93 = getelementptr inbounds %struct.tilebox, ptr %37, i64 0, i32 8
  %94 = load i32, ptr %93, align 4, !tbaa !445
  %95 = add nsw i32 %94, %53
  br label %96

96:                                               ; preds = %83, %60, %28
  %97 = phi i32 [ %67, %60 ], [ %86, %83 ], [ %47, %28 ]
  %98 = phi i32 [ %78, %60 ], [ %92, %83 ], [ %51, %28 ]
  %99 = phi i32 [ %72, %60 ], [ %89, %83 ], [ %49, %28 ]
  %100 = phi i32 [ %82, %60 ], [ %95, %83 ], [ %53, %28 ]
  tail call void @addPts(i32 noundef %97, i32 noundef %99, i32 noundef %98, i32 noundef %100) #44
  %101 = load ptr, ptr %32, align 8, !tbaa !291
  %102 = shl i32 %41, 1
  %103 = add i32 %97, %102
  %104 = add i32 %103, %99
  %105 = sdiv i32 %104, 2
  %106 = shl i32 %43, 1
  %107 = add i32 %98, %106
  %108 = add i32 %107, %100
  %109 = sdiv i32 %108, 2
  %110 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %18, ptr noundef nonnull @.str.3.417, ptr noundef %101, i32 noundef %105, i32 noundef %109) #43
  tail call void @unbust() #44
  %111 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %18, ptr noundef nonnull @.str.4.418, i32 noundef %8) #43
  %112 = load ptr, ptr @PtsOut, align 8, !tbaa !7
  %113 = load i32, ptr %112, align 4, !tbaa !102
  %114 = icmp sgt i32 %113, 1
  br i1 %114, label %115, label %130

115:                                              ; preds = %115, %96
  %116 = phi i64 [ %125, %115 ], [ 1, %96 ]
  %117 = phi ptr [ %126, %115 ], [ %112, %96 ]
  %118 = getelementptr inbounds %struct.bellbox, ptr %117, i64 %116
  %119 = load i32, ptr %118, align 4, !tbaa !102
  %120 = add nsw i32 %119, %41
  %121 = getelementptr inbounds %struct.bellbox, ptr %117, i64 %116, i32 1
  %122 = load i32, ptr %121, align 4, !tbaa !104
  %123 = add nsw i32 %122, %43
  %124 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %18, ptr noundef nonnull @.str.5.419, i32 noundef %120, i32 noundef %123) #43
  %125 = add nuw nsw i64 %116, 1
  %126 = load ptr, ptr @PtsOut, align 8, !tbaa !7
  %127 = load i32, ptr %126, align 4, !tbaa !102
  %128 = sext i32 %127 to i64
  %129 = icmp slt i64 %125, %128
  br i1 %129, label %115, label %130, !llvm.loop !643

130:                                              ; preds = %115, %96
  %131 = phi ptr [ %112, %96 ], [ %126, %115 ]
  %132 = getelementptr inbounds %struct.bellbox, ptr %131, i64 1
  %133 = load i32, ptr %132, align 4, !tbaa !102
  %134 = add nsw i32 %133, %41
  %135 = getelementptr inbounds %struct.bellbox, ptr %131, i64 1, i32 1
  %136 = load i32, ptr %135, align 4, !tbaa !104
  %137 = add nsw i32 %136, %43
  %138 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %18, ptr noundef nonnull @.str.6.420, i32 noundef %134, i32 noundef %137) #43
  %139 = icmp eq ptr %39, null
  br i1 %139, label %175, label %140

140:                                              ; preds = %130
  %141 = load ptr, ptr @pinnames, align 8, !tbaa !7
  br label %142

142:                                              ; preds = %171, %140
  %143 = phi ptr [ %172, %171 ], [ %141, %140 ]
  %144 = phi ptr [ %173, %171 ], [ %39, %140 ]
  %145 = getelementptr inbounds %struct.termbox, ptr %144, i64 0, i32 5
  %146 = load i32, ptr %145, align 8, !tbaa !53
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds ptr, ptr %143, i64 %147
  %149 = load ptr, ptr %148, align 8, !tbaa !7
  %150 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %149, ptr noundef nonnull dereferenceable(8) @.str.7.421) #50
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %171, label %152

152:                                              ; preds = %142
  %153 = getelementptr inbounds %struct.termbox, ptr %144, i64 0, i32 2
  %154 = load i32, ptr %153, align 4, !tbaa !52
  %155 = add nsw i32 %154, %43
  %156 = getelementptr inbounds %struct.termbox, ptr %144, i64 0, i32 1
  %157 = load i32, ptr %156, align 8, !tbaa !51
  %158 = add nsw i32 %157, %41
  %159 = load ptr, ptr @netarray, align 8, !tbaa !7
  %160 = load ptr, ptr @termarray, align 8, !tbaa !7
  %161 = getelementptr inbounds ptr, ptr %160, i64 %147
  %162 = load ptr, ptr %161, align 8, !tbaa !7
  %163 = load i32, ptr %162, align 8, !tbaa !60
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds ptr, ptr %159, i64 %164
  %166 = load ptr, ptr %165, align 8, !tbaa !7
  %167 = getelementptr inbounds %struct.dimbox, ptr %166, i64 0, i32 13
  %168 = load ptr, ptr %167, align 8, !tbaa !38
  %169 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %18, ptr noundef nonnull @.str.3.417, ptr noundef %168, i32 noundef %158, i32 noundef %155) #43
  %170 = load ptr, ptr @pinnames, align 8, !tbaa !7
  br label %171

171:                                              ; preds = %152, %142
  %172 = phi ptr [ %143, %142 ], [ %170, %152 ]
  %173 = load ptr, ptr %144, align 8, !tbaa !49
  %174 = icmp eq ptr %173, null
  br i1 %174, label %175, label %142, !llvm.loop !644

175:                                              ; preds = %171, %130
  %176 = getelementptr inbounds %struct.cellbox, ptr %32, i64 0, i32 10
  %177 = load i32, ptr %176, align 4, !tbaa !297
  %178 = icmp eq i32 %177, 1
  br i1 %178, label %179, label %212

179:                                              ; preds = %175
  %180 = getelementptr inbounds %struct.cellbox, ptr %32, i64 0, i32 18
  %181 = load i32, ptr %180, align 4, !tbaa !223
  %182 = icmp slt i32 %181, 1
  br i1 %182, label %212, label %183

183:                                              ; preds = %179
  %184 = getelementptr inbounds %struct.cellbox, ptr %32, i64 0, i32 20
  br label %185

185:                                              ; preds = %185, %183
  %186 = phi i64 [ 1, %183 ], [ %208, %185 ]
  %187 = load ptr, ptr %184, align 8, !tbaa !226
  %188 = getelementptr inbounds %struct.uncombox.25, ptr %187, i64 %186
  %189 = getelementptr inbounds %struct.uncombox.25, ptr %187, i64 %186, i32 9
  %190 = load i32, ptr %189, align 4, !tbaa !228
  %191 = add nsw i32 %190, %41
  %192 = getelementptr inbounds %struct.uncombox.25, ptr %187, i64 %186, i32 10
  %193 = load i32, ptr %192, align 4, !tbaa !230
  %194 = add nsw i32 %193, %43
  %195 = load i32, ptr %188, align 4, !tbaa !298
  %196 = load ptr, ptr @netarray, align 8, !tbaa !7
  %197 = load ptr, ptr @termarray, align 8, !tbaa !7
  %198 = sext i32 %195 to i64
  %199 = getelementptr inbounds ptr, ptr %197, i64 %198
  %200 = load ptr, ptr %199, align 8, !tbaa !7
  %201 = load i32, ptr %200, align 8, !tbaa !60
  %202 = sext i32 %201 to i64
  %203 = getelementptr inbounds ptr, ptr %196, i64 %202
  %204 = load ptr, ptr %203, align 8, !tbaa !7
  %205 = getelementptr inbounds %struct.dimbox, ptr %204, i64 0, i32 13
  %206 = load ptr, ptr %205, align 8, !tbaa !38
  %207 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %18, ptr noundef nonnull @.str.3.417, ptr noundef %206, i32 noundef %191, i32 noundef %194) #43
  %208 = add nuw nsw i64 %186, 1
  %209 = load i32, ptr %180, align 4, !tbaa !223
  %210 = sext i32 %209 to i64
  %211 = icmp slt i64 %186, %210
  br i1 %211, label %185, label %212, !llvm.loop !645

212:                                              ; preds = %185, %179, %175
  %213 = add nuw nsw i64 %29, 1
  %214 = load i32, ptr @numcells, align 4, !tbaa !17
  %215 = load i32, ptr @numpads, align 4, !tbaa !17
  %216 = add nsw i32 %215, %214
  %217 = sext i32 %216 to i64
  %218 = icmp slt i64 %29, %217
  br i1 %218, label %28, label %219, !llvm.loop !646

219:                                              ; preds = %212, %20
  %220 = load i32, ptr @blockl, align 4, !tbaa !17
  %221 = load i32, ptr @blockr, align 4, !tbaa !17
  %222 = load i32, ptr @blockb, align 4, !tbaa !17
  %223 = load i32, ptr @blockt, align 4, !tbaa !17
  %224 = tail call i64 @fwrite(ptr nonnull @.str.8.422, i64 6, i64 1, ptr nonnull %18)
  %225 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %18, ptr noundef nonnull @.str.9.423, i32 noundef %8, i32 noundef %220, i32 noundef %222, i32 noundef %220, i32 noundef %223, i32 noundef %221, i32 noundef %223, i32 noundef %221, i32 noundef %222, i32 noundef %220, i32 noundef %222) #43
  %226 = tail call i64 @fwrite(ptr nonnull @.str.10.424, i64 2, i64 1, ptr nonnull %18)
  %227 = tail call i32 @fclose(ptr noundef nonnull %18) #43
  call void @llvm.lifetime.end.p0(i64 1024, ptr nonnull %1) #47
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @outgeo() #0 {
  %1 = alloca [1024 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 1024, ptr nonnull %1) #47
  %2 = load ptr, ptr @cktName, align 8, !tbaa !7
  %3 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %1, ptr noundef nonnull dereferenceable(1) @.str.427, ptr noundef %2) #44
  %4 = call noalias ptr @fopen(ptr noundef nonnull %1, ptr noundef nonnull @.str.1.428) #43
  %5 = icmp eq ptr %4, null
  br i1 %5, label %9, label %6

6:                                                ; preds = %0
  %7 = load i32, ptr @numcells, align 4, !tbaa !17
  %8 = icmp slt i32 %7, 1
  br i1 %8, label %12, label %21

9:                                                ; preds = %0
  %10 = load ptr, ptr @fpo, align 8, !tbaa !7
  %11 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %10, ptr noundef nonnull @.str.2.429, ptr noundef nonnull %1) #43
  call void @exit(i32 noundef 0) #49
  unreachable

12:                                               ; preds = %76, %6
  %13 = phi i32 [ %7, %6 ], [ %79, %76 ]
  %14 = load i32, ptr @numpads, align 4, !tbaa !17
  %15 = add nsw i32 %14, %13
  %16 = icmp sgt i32 %14, 0
  br i1 %16, label %17, label %318

17:                                               ; preds = %12
  %18 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %19 = sext i32 %13 to i64
  %20 = sext i32 %15 to i64
  br label %82

21:                                               ; preds = %76, %6
  %22 = phi i64 [ %78, %76 ], [ 1, %6 ]
  %23 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %24 = getelementptr inbounds ptr, ptr %23, i64 %22
  %25 = load ptr, ptr %24, align 8, !tbaa !7
  %26 = getelementptr inbounds %struct.cellbox, ptr %25, i64 0, i32 5
  %27 = load i32, ptr %26, align 8, !tbaa !45
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds %struct.cellbox, ptr %25, i64 0, i32 21, i64 %28
  %30 = load ptr, ptr %29, align 8, !tbaa !7
  %31 = getelementptr inbounds %struct.cellbox, ptr %25, i64 0, i32 2
  %32 = load i32, ptr %31, align 4, !tbaa !164
  %33 = getelementptr inbounds %struct.cellbox, ptr %25, i64 0, i32 3
  %34 = load i32, ptr %33, align 8, !tbaa !165
  %35 = load ptr, ptr %25, align 8, !tbaa !291
  %36 = trunc i64 %22 to i32
  tail call void @initPts(i32 noundef %36, ptr noundef %35, i32 noundef %27) #44
  %37 = load ptr, ptr %30, align 8, !tbaa !172
  %38 = icmp eq ptr %37, null
  br i1 %38, label %51, label %39

39:                                               ; preds = %39, %21
  %40 = phi ptr [ %49, %39 ], [ %37, %21 ]
  %41 = getelementptr inbounds %struct.tilebox, ptr %40, i64 0, i32 9
  %42 = load i32, ptr %41, align 8, !tbaa !167
  %43 = getelementptr inbounds %struct.tilebox, ptr %40, i64 0, i32 10
  %44 = load i32, ptr %43, align 4, !tbaa !168
  %45 = getelementptr inbounds %struct.tilebox, ptr %40, i64 0, i32 11
  %46 = load i32, ptr %45, align 8, !tbaa !169
  %47 = getelementptr inbounds %struct.tilebox, ptr %40, i64 0, i32 12
  %48 = load i32, ptr %47, align 4, !tbaa !170
  tail call void @addPts(i32 noundef %42, i32 noundef %44, i32 noundef %46, i32 noundef %48) #44
  %49 = load ptr, ptr %40, align 8, !tbaa !172
  %50 = icmp eq ptr %49, null
  br i1 %50, label %51, label %39, !llvm.loop !647

51:                                               ; preds = %39, %21
  tail call void @unbust() #44
  %52 = load ptr, ptr %25, align 8, !tbaa !291
  %53 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %4, ptr noundef nonnull @.str.3.430, ptr noundef %52) #43
  %54 = load ptr, ptr @PtsOut, align 8, !tbaa !7
  %55 = load i32, ptr %54, align 4, !tbaa !102
  %56 = add nsw i32 %55, -1
  %57 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %4, ptr noundef nonnull @.str.4.431, i32 noundef %56) #43
  %58 = load ptr, ptr @PtsOut, align 8, !tbaa !7
  %59 = load i32, ptr %58, align 4, !tbaa !102
  %60 = icmp sgt i32 %59, 1
  br i1 %60, label %61, label %76

61:                                               ; preds = %61, %51
  %62 = phi i64 [ %71, %61 ], [ 1, %51 ]
  %63 = phi ptr [ %72, %61 ], [ %58, %51 ]
  %64 = getelementptr inbounds %struct.bellbox, ptr %63, i64 %62
  %65 = load i32, ptr %64, align 4, !tbaa !102
  %66 = add nsw i32 %65, %32
  %67 = getelementptr inbounds %struct.bellbox, ptr %63, i64 %62, i32 1
  %68 = load i32, ptr %67, align 4, !tbaa !104
  %69 = add nsw i32 %68, %34
  %70 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %4, ptr noundef nonnull @.str.5.432, i32 noundef %66, i32 noundef %69) #43
  %71 = add nuw nsw i64 %62, 1
  %72 = load ptr, ptr @PtsOut, align 8, !tbaa !7
  %73 = load i32, ptr %72, align 4, !tbaa !102
  %74 = sext i32 %73 to i64
  %75 = icmp slt i64 %71, %74
  br i1 %75, label %61, label %76, !llvm.loop !648

76:                                               ; preds = %61, %51
  %77 = tail call i32 @fputc(i32 10, ptr nonnull %4)
  %78 = add nuw nsw i64 %22, 1
  %79 = load i32, ptr @numcells, align 4, !tbaa !17
  %80 = sext i32 %79 to i64
  %81 = icmp slt i64 %22, %80
  br i1 %81, label %21, label %12, !llvm.loop !649

82:                                               ; preds = %120, %17
  %83 = phi i64 [ %19, %17 ], [ %88, %120 ]
  %84 = phi i32 [ -100000000, %17 ], [ %124, %120 ]
  %85 = phi i32 [ -100000000, %17 ], [ %123, %120 ]
  %86 = phi i32 [ 100000000, %17 ], [ %122, %120 ]
  %87 = phi i32 [ 100000000, %17 ], [ %121, %120 ]
  %88 = add nsw i64 %83, 1
  %89 = getelementptr inbounds ptr, ptr %18, i64 %88
  %90 = load ptr, ptr %89, align 8, !tbaa !7
  %91 = getelementptr inbounds %struct.cellbox, ptr %90, i64 0, i32 11
  %92 = load i32, ptr %91, align 8, !tbaa !363
  %93 = icmp eq i32 %92, 1
  br i1 %93, label %94, label %120

94:                                               ; preds = %82
  %95 = getelementptr inbounds %struct.cellbox, ptr %90, i64 0, i32 2
  %96 = load i32, ptr %95, align 4, !tbaa !164
  %97 = getelementptr inbounds %struct.cellbox, ptr %90, i64 0, i32 3
  %98 = load i32, ptr %97, align 8, !tbaa !165
  %99 = getelementptr inbounds %struct.cellbox, ptr %90, i64 0, i32 5
  %100 = load i32, ptr %99, align 8, !tbaa !45
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds %struct.cellbox, ptr %90, i64 0, i32 21, i64 %101
  %103 = load ptr, ptr %102, align 8, !tbaa !7
  %104 = getelementptr inbounds %struct.tilebox, ptr %103, i64 0, i32 9
  %105 = load i32, ptr %104, align 8, !tbaa !167
  %106 = add nsw i32 %105, %96
  %107 = tail call i32 @llvm.smin.i32(i32 %106, i32 %87)
  %108 = getelementptr inbounds %struct.tilebox, ptr %103, i64 0, i32 10
  %109 = load i32, ptr %108, align 4, !tbaa !168
  %110 = add nsw i32 %109, %96
  %111 = tail call i32 @llvm.smax.i32(i32 %110, i32 %85)
  %112 = getelementptr inbounds %struct.tilebox, ptr %103, i64 0, i32 11
  %113 = load i32, ptr %112, align 8, !tbaa !169
  %114 = add nsw i32 %113, %98
  %115 = tail call i32 @llvm.smin.i32(i32 %114, i32 %86)
  %116 = getelementptr inbounds %struct.tilebox, ptr %103, i64 0, i32 12
  %117 = load i32, ptr %116, align 4, !tbaa !170
  %118 = add nsw i32 %117, %98
  %119 = tail call i32 @llvm.smax.i32(i32 %118, i32 %84)
  br label %120

120:                                              ; preds = %94, %82
  %121 = phi i32 [ %87, %82 ], [ %107, %94 ]
  %122 = phi i32 [ %86, %82 ], [ %115, %94 ]
  %123 = phi i32 [ %85, %82 ], [ %111, %94 ]
  %124 = phi i32 [ %84, %82 ], [ %119, %94 ]
  %125 = icmp slt i64 %88, %20
  br i1 %125, label %82, label %126, !llvm.loop !650

126:                                              ; preds = %120
  %.lcssa15 = phi i32 [ %121, %120 ]
  %.lcssa14 = phi i32 [ %122, %120 ]
  %.lcssa13 = phi i32 [ %123, %120 ]
  %.lcssa12 = phi i32 [ %124, %120 ]
  %127 = icmp eq i32 %.lcssa12, -100000000
  br i1 %127, label %135, label %128

128:                                              ; preds = %126
  %129 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %4, ptr noundef nonnull @.str.3.430, ptr noundef nonnull @.str.7.433) #43
  %130 = tail call i64 @fwrite(ptr nonnull @.str.8.434, i64 11, i64 1, ptr nonnull %4)
  %131 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %4, ptr noundef nonnull @.str.9.435, i32 noundef %.lcssa15, i32 noundef %.lcssa14, i32 noundef %.lcssa15, i32 noundef %.lcssa12, i32 noundef %.lcssa13, i32 noundef %.lcssa12, i32 noundef %.lcssa13, i32 noundef %.lcssa14) #43
  %132 = load i32, ptr @numcells, align 4, !tbaa !17
  %133 = load i32, ptr @numpads, align 4, !tbaa !17
  %134 = add nsw i32 %133, %132
  br label %135

135:                                              ; preds = %128, %126
  %136 = phi i32 [ %134, %128 ], [ %15, %126 ]
  %137 = phi i32 [ %133, %128 ], [ %14, %126 ]
  %138 = phi i32 [ %132, %128 ], [ %13, %126 ]
  %139 = icmp sgt i32 %137, 0
  br i1 %139, label %140, label %318

140:                                              ; preds = %135
  %141 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %142 = sext i32 %138 to i64
  %143 = sext i32 %136 to i64
  br label %144

144:                                              ; preds = %182, %140
  %145 = phi i64 [ %142, %140 ], [ %150, %182 ]
  %146 = phi i32 [ -100000000, %140 ], [ %186, %182 ]
  %147 = phi i32 [ -100000000, %140 ], [ %185, %182 ]
  %148 = phi i32 [ 100000000, %140 ], [ %184, %182 ]
  %149 = phi i32 [ 100000000, %140 ], [ %183, %182 ]
  %150 = add nsw i64 %145, 1
  %151 = getelementptr inbounds ptr, ptr %141, i64 %150
  %152 = load ptr, ptr %151, align 8, !tbaa !7
  %153 = getelementptr inbounds %struct.cellbox, ptr %152, i64 0, i32 11
  %154 = load i32, ptr %153, align 8, !tbaa !363
  %155 = icmp eq i32 %154, 2
  br i1 %155, label %156, label %182

156:                                              ; preds = %144
  %157 = getelementptr inbounds %struct.cellbox, ptr %152, i64 0, i32 2
  %158 = load i32, ptr %157, align 4, !tbaa !164
  %159 = getelementptr inbounds %struct.cellbox, ptr %152, i64 0, i32 3
  %160 = load i32, ptr %159, align 8, !tbaa !165
  %161 = getelementptr inbounds %struct.cellbox, ptr %152, i64 0, i32 5
  %162 = load i32, ptr %161, align 8, !tbaa !45
  %163 = sext i32 %162 to i64
  %164 = getelementptr inbounds %struct.cellbox, ptr %152, i64 0, i32 21, i64 %163
  %165 = load ptr, ptr %164, align 8, !tbaa !7
  %166 = getelementptr inbounds %struct.tilebox, ptr %165, i64 0, i32 9
  %167 = load i32, ptr %166, align 8, !tbaa !167
  %168 = add nsw i32 %167, %158
  %169 = tail call i32 @llvm.smin.i32(i32 %168, i32 %149)
  %170 = getelementptr inbounds %struct.tilebox, ptr %165, i64 0, i32 10
  %171 = load i32, ptr %170, align 4, !tbaa !168
  %172 = add nsw i32 %171, %158
  %173 = tail call i32 @llvm.smax.i32(i32 %172, i32 %147)
  %174 = getelementptr inbounds %struct.tilebox, ptr %165, i64 0, i32 11
  %175 = load i32, ptr %174, align 8, !tbaa !169
  %176 = add nsw i32 %175, %160
  %177 = tail call i32 @llvm.smin.i32(i32 %176, i32 %148)
  %178 = getelementptr inbounds %struct.tilebox, ptr %165, i64 0, i32 12
  %179 = load i32, ptr %178, align 4, !tbaa !170
  %180 = add nsw i32 %179, %160
  %181 = tail call i32 @llvm.smax.i32(i32 %180, i32 %146)
  br label %182

182:                                              ; preds = %156, %144
  %183 = phi i32 [ %149, %144 ], [ %169, %156 ]
  %184 = phi i32 [ %148, %144 ], [ %177, %156 ]
  %185 = phi i32 [ %147, %144 ], [ %173, %156 ]
  %186 = phi i32 [ %146, %144 ], [ %181, %156 ]
  %187 = icmp slt i64 %150, %143
  br i1 %187, label %144, label %188, !llvm.loop !651

188:                                              ; preds = %182
  %.lcssa11 = phi i32 [ %183, %182 ]
  %.lcssa10 = phi i32 [ %184, %182 ]
  %.lcssa9 = phi i32 [ %185, %182 ]
  %.lcssa8 = phi i32 [ %186, %182 ]
  %189 = icmp eq i32 %.lcssa8, -100000000
  br i1 %189, label %197, label %190

190:                                              ; preds = %188
  %191 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %4, ptr noundef nonnull @.str.3.430, ptr noundef nonnull @.str.10.436) #43
  %192 = tail call i64 @fwrite(ptr nonnull @.str.8.434, i64 11, i64 1, ptr nonnull %4)
  %193 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %4, ptr noundef nonnull @.str.9.435, i32 noundef %.lcssa11, i32 noundef %.lcssa10, i32 noundef %.lcssa11, i32 noundef %.lcssa8, i32 noundef %.lcssa9, i32 noundef %.lcssa8, i32 noundef %.lcssa9, i32 noundef %.lcssa10) #43
  %194 = load i32, ptr @numcells, align 4, !tbaa !17
  %195 = load i32, ptr @numpads, align 4, !tbaa !17
  %196 = add nsw i32 %195, %194
  br label %197

197:                                              ; preds = %190, %188
  %198 = phi i32 [ %196, %190 ], [ %136, %188 ]
  %199 = phi i32 [ %195, %190 ], [ %137, %188 ]
  %200 = phi i32 [ %194, %190 ], [ %138, %188 ]
  %201 = icmp sgt i32 %199, 0
  br i1 %201, label %202, label %318

202:                                              ; preds = %197
  %203 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %204 = sext i32 %200 to i64
  %205 = sext i32 %198 to i64
  br label %206

206:                                              ; preds = %244, %202
  %207 = phi i64 [ %204, %202 ], [ %212, %244 ]
  %208 = phi i32 [ -100000000, %202 ], [ %248, %244 ]
  %209 = phi i32 [ -100000000, %202 ], [ %247, %244 ]
  %210 = phi i32 [ 100000000, %202 ], [ %246, %244 ]
  %211 = phi i32 [ 100000000, %202 ], [ %245, %244 ]
  %212 = add nsw i64 %207, 1
  %213 = getelementptr inbounds ptr, ptr %203, i64 %212
  %214 = load ptr, ptr %213, align 8, !tbaa !7
  %215 = getelementptr inbounds %struct.cellbox, ptr %214, i64 0, i32 11
  %216 = load i32, ptr %215, align 8, !tbaa !363
  %217 = icmp eq i32 %216, 3
  br i1 %217, label %218, label %244

218:                                              ; preds = %206
  %219 = getelementptr inbounds %struct.cellbox, ptr %214, i64 0, i32 2
  %220 = load i32, ptr %219, align 4, !tbaa !164
  %221 = getelementptr inbounds %struct.cellbox, ptr %214, i64 0, i32 3
  %222 = load i32, ptr %221, align 8, !tbaa !165
  %223 = getelementptr inbounds %struct.cellbox, ptr %214, i64 0, i32 5
  %224 = load i32, ptr %223, align 8, !tbaa !45
  %225 = sext i32 %224 to i64
  %226 = getelementptr inbounds %struct.cellbox, ptr %214, i64 0, i32 21, i64 %225
  %227 = load ptr, ptr %226, align 8, !tbaa !7
  %228 = getelementptr inbounds %struct.tilebox, ptr %227, i64 0, i32 9
  %229 = load i32, ptr %228, align 8, !tbaa !167
  %230 = add nsw i32 %229, %220
  %231 = tail call i32 @llvm.smin.i32(i32 %230, i32 %211)
  %232 = getelementptr inbounds %struct.tilebox, ptr %227, i64 0, i32 10
  %233 = load i32, ptr %232, align 4, !tbaa !168
  %234 = add nsw i32 %233, %220
  %235 = tail call i32 @llvm.smax.i32(i32 %234, i32 %209)
  %236 = getelementptr inbounds %struct.tilebox, ptr %227, i64 0, i32 11
  %237 = load i32, ptr %236, align 8, !tbaa !169
  %238 = add nsw i32 %237, %222
  %239 = tail call i32 @llvm.smin.i32(i32 %238, i32 %210)
  %240 = getelementptr inbounds %struct.tilebox, ptr %227, i64 0, i32 12
  %241 = load i32, ptr %240, align 4, !tbaa !170
  %242 = add nsw i32 %241, %222
  %243 = tail call i32 @llvm.smax.i32(i32 %242, i32 %208)
  br label %244

244:                                              ; preds = %218, %206
  %245 = phi i32 [ %211, %206 ], [ %231, %218 ]
  %246 = phi i32 [ %210, %206 ], [ %239, %218 ]
  %247 = phi i32 [ %209, %206 ], [ %235, %218 ]
  %248 = phi i32 [ %208, %206 ], [ %243, %218 ]
  %249 = icmp slt i64 %212, %205
  br i1 %249, label %206, label %250, !llvm.loop !652

250:                                              ; preds = %244
  %.lcssa7 = phi i32 [ %245, %244 ]
  %.lcssa6 = phi i32 [ %246, %244 ]
  %.lcssa5 = phi i32 [ %247, %244 ]
  %.lcssa4 = phi i32 [ %248, %244 ]
  %251 = icmp eq i32 %.lcssa4, -100000000
  br i1 %251, label %259, label %252

252:                                              ; preds = %250
  %253 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %4, ptr noundef nonnull @.str.3.430, ptr noundef nonnull @.str.11.437) #43
  %254 = tail call i64 @fwrite(ptr nonnull @.str.8.434, i64 11, i64 1, ptr nonnull %4)
  %255 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %4, ptr noundef nonnull @.str.9.435, i32 noundef %.lcssa7, i32 noundef %.lcssa6, i32 noundef %.lcssa7, i32 noundef %.lcssa4, i32 noundef %.lcssa5, i32 noundef %.lcssa4, i32 noundef %.lcssa5, i32 noundef %.lcssa6) #43
  %256 = load i32, ptr @numcells, align 4, !tbaa !17
  %257 = load i32, ptr @numpads, align 4, !tbaa !17
  %258 = add nsw i32 %257, %256
  br label %259

259:                                              ; preds = %252, %250
  %260 = phi i32 [ %258, %252 ], [ %198, %250 ]
  %261 = phi i32 [ %257, %252 ], [ %199, %250 ]
  %262 = phi i32 [ %256, %252 ], [ %200, %250 ]
  %263 = icmp sgt i32 %261, 0
  br i1 %263, label %264, label %318

264:                                              ; preds = %259
  %265 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %266 = sext i32 %262 to i64
  %267 = sext i32 %260 to i64
  br label %268

268:                                              ; preds = %306, %264
  %269 = phi i64 [ %266, %264 ], [ %274, %306 ]
  %270 = phi i32 [ -100000000, %264 ], [ %310, %306 ]
  %271 = phi i32 [ -100000000, %264 ], [ %309, %306 ]
  %272 = phi i32 [ 100000000, %264 ], [ %308, %306 ]
  %273 = phi i32 [ 100000000, %264 ], [ %307, %306 ]
  %274 = add nsw i64 %269, 1
  %275 = getelementptr inbounds ptr, ptr %265, i64 %274
  %276 = load ptr, ptr %275, align 8, !tbaa !7
  %277 = getelementptr inbounds %struct.cellbox, ptr %276, i64 0, i32 11
  %278 = load i32, ptr %277, align 8, !tbaa !363
  %279 = icmp eq i32 %278, 4
  br i1 %279, label %280, label %306

280:                                              ; preds = %268
  %281 = getelementptr inbounds %struct.cellbox, ptr %276, i64 0, i32 2
  %282 = load i32, ptr %281, align 4, !tbaa !164
  %283 = getelementptr inbounds %struct.cellbox, ptr %276, i64 0, i32 3
  %284 = load i32, ptr %283, align 8, !tbaa !165
  %285 = getelementptr inbounds %struct.cellbox, ptr %276, i64 0, i32 5
  %286 = load i32, ptr %285, align 8, !tbaa !45
  %287 = sext i32 %286 to i64
  %288 = getelementptr inbounds %struct.cellbox, ptr %276, i64 0, i32 21, i64 %287
  %289 = load ptr, ptr %288, align 8, !tbaa !7
  %290 = getelementptr inbounds %struct.tilebox, ptr %289, i64 0, i32 9
  %291 = load i32, ptr %290, align 8, !tbaa !167
  %292 = add nsw i32 %291, %282
  %293 = tail call i32 @llvm.smin.i32(i32 %292, i32 %273)
  %294 = getelementptr inbounds %struct.tilebox, ptr %289, i64 0, i32 10
  %295 = load i32, ptr %294, align 4, !tbaa !168
  %296 = add nsw i32 %295, %282
  %297 = tail call i32 @llvm.smax.i32(i32 %296, i32 %271)
  %298 = getelementptr inbounds %struct.tilebox, ptr %289, i64 0, i32 11
  %299 = load i32, ptr %298, align 8, !tbaa !169
  %300 = add nsw i32 %299, %284
  %301 = tail call i32 @llvm.smin.i32(i32 %300, i32 %272)
  %302 = getelementptr inbounds %struct.tilebox, ptr %289, i64 0, i32 12
  %303 = load i32, ptr %302, align 4, !tbaa !170
  %304 = add nsw i32 %303, %284
  %305 = tail call i32 @llvm.smax.i32(i32 %304, i32 %270)
  br label %306

306:                                              ; preds = %280, %268
  %307 = phi i32 [ %273, %268 ], [ %293, %280 ]
  %308 = phi i32 [ %272, %268 ], [ %301, %280 ]
  %309 = phi i32 [ %271, %268 ], [ %297, %280 ]
  %310 = phi i32 [ %270, %268 ], [ %305, %280 ]
  %311 = icmp slt i64 %274, %267
  br i1 %311, label %268, label %312, !llvm.loop !653

312:                                              ; preds = %306
  %.lcssa3 = phi i32 [ %307, %306 ]
  %.lcssa2 = phi i32 [ %308, %306 ]
  %.lcssa1 = phi i32 [ %309, %306 ]
  %.lcssa = phi i32 [ %310, %306 ]
  %313 = icmp eq i32 %.lcssa, -100000000
  br i1 %313, label %318, label %314

314:                                              ; preds = %312
  %315 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %4, ptr noundef nonnull @.str.3.430, ptr noundef nonnull @.str.12.438) #43
  %316 = tail call i64 @fwrite(ptr nonnull @.str.8.434, i64 11, i64 1, ptr nonnull %4)
  %317 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %4, ptr noundef nonnull @.str.9.435, i32 noundef %.lcssa3, i32 noundef %.lcssa2, i32 noundef %.lcssa3, i32 noundef %.lcssa, i32 noundef %.lcssa1, i32 noundef %.lcssa, i32 noundef %.lcssa1, i32 noundef %.lcssa2) #43
  br label %318

318:                                              ; preds = %314, %312, %259, %197, %135, %12
  %319 = tail call i32 @fclose(ptr noundef nonnull %4) #43
  call void @llvm.lifetime.end.p0(i64 1024, ptr nonnull %1) #47
  ret void
}

; Function Attrs: nofree nounwind
declare noundef i32 @fputc(i32 noundef, ptr nocapture noundef) local_unnamed_addr #10

; Function Attrs: nounwind optsize uwtable
define internal void @outpin() #0 {
  %1 = alloca [1024 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 1024, ptr nonnull %1) #47
  %2 = load ptr, ptr @cktName, align 8, !tbaa !7
  %3 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %1, ptr noundef nonnull dereferenceable(1) @.str.441, ptr noundef %2) #44
  %4 = call noalias ptr @fopen(ptr noundef nonnull %1, ptr noundef nonnull @.str.1.442) #43
  %5 = icmp eq ptr %4, null
  br i1 %5, label %6, label %9

6:                                                ; preds = %0
  %7 = load ptr, ptr @fpo, align 8, !tbaa !7
  %8 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %7, ptr noundef nonnull @.str.2.443, ptr noundef nonnull %1) #43
  call void @exit(i32 noundef 0) #49
  unreachable

9:                                                ; preds = %0
  %10 = load i32, ptr @numcells, align 4, !tbaa !17
  %11 = load i32, ptr @numpads, align 4, !tbaa !17
  %12 = add i32 %11, %10
  %13 = load ptr, ptr @cellarray, align 8
  %14 = sext i32 %10 to i64
  %15 = sext i32 %12 to i64
  %16 = tail call i32 @llvm.smax.i32(i32 %10, i32 %12)
  %17 = sext i32 %16 to i64
  br label %18

18:                                               ; preds = %21, %9
  %19 = phi i64 [ %22, %21 ], [ %14, %9 ]
  %20 = icmp eq i64 %19, %17
  br i1 %20, label %28, label %21

21:                                               ; preds = %18
  %22 = add nsw i64 %19, 1
  %23 = getelementptr inbounds ptr, ptr %13, i64 %22
  %24 = load ptr, ptr %23, align 8, !tbaa !7
  %25 = getelementptr inbounds %struct.cellbox, ptr %24, i64 0, i32 11
  %26 = load i32, ptr %25, align 8, !tbaa !363
  %27 = icmp eq i32 %26, 1
  br i1 %27, label %28, label %18, !llvm.loop !654

28:                                               ; preds = %21, %18
  %.lcssa6 = phi i64 [ %19, %21 ], [ %19, %18 ]
  %29 = icmp slt i64 %.lcssa6, %15
  br label %30

30:                                               ; preds = %33, %28
  %31 = phi i64 [ %34, %33 ], [ %14, %28 ]
  %32 = icmp eq i64 %31, %17
  br i1 %32, label %40, label %33

33:                                               ; preds = %30
  %34 = add nsw i64 %31, 1
  %35 = getelementptr inbounds ptr, ptr %13, i64 %34
  %36 = load ptr, ptr %35, align 8, !tbaa !7
  %37 = getelementptr inbounds %struct.cellbox, ptr %36, i64 0, i32 11
  %38 = load i32, ptr %37, align 8, !tbaa !363
  %39 = icmp eq i32 %38, 2
  br i1 %39, label %40, label %30, !llvm.loop !655

40:                                               ; preds = %33, %30
  %.lcssa5 = phi i64 [ %31, %33 ], [ %31, %30 ]
  %41 = icmp slt i64 %.lcssa5, %15
  br label %42

42:                                               ; preds = %45, %40
  %43 = phi i64 [ %46, %45 ], [ %14, %40 ]
  %44 = icmp eq i64 %43, %17
  br i1 %44, label %52, label %45

45:                                               ; preds = %42
  %46 = add nsw i64 %43, 1
  %47 = getelementptr inbounds ptr, ptr %13, i64 %46
  %48 = load ptr, ptr %47, align 8, !tbaa !7
  %49 = getelementptr inbounds %struct.cellbox, ptr %48, i64 0, i32 11
  %50 = load i32, ptr %49, align 8, !tbaa !363
  %51 = icmp eq i32 %50, 3
  br i1 %51, label %52, label %42, !llvm.loop !656

52:                                               ; preds = %45, %42
  %.lcssa4 = phi i64 [ %43, %45 ], [ %43, %42 ]
  %53 = icmp slt i64 %.lcssa4, %15
  %54 = add i32 %16, 1
  br label %55

55:                                               ; preds = %58, %52
  %56 = phi i64 [ %59, %58 ], [ %14, %52 ]
  %57 = icmp eq i64 %56, %17
  br i1 %57, label %67, label %58

58:                                               ; preds = %55
  %59 = add nsw i64 %56, 1
  %60 = getelementptr inbounds ptr, ptr %13, i64 %59
  %61 = load ptr, ptr %60, align 8, !tbaa !7
  %62 = getelementptr inbounds %struct.cellbox, ptr %61, i64 0, i32 11
  %63 = load i32, ptr %62, align 8, !tbaa !363
  %64 = icmp eq i32 %63, 4
  br i1 %64, label %65, label %55, !llvm.loop !657

65:                                               ; preds = %58
  %.lcssa3 = phi i64 [ %59, %58 ]
  %.lcssa2 = phi i64 [ %56, %58 ]
  %66 = trunc i64 %.lcssa3 to i32
  br label %67

67:                                               ; preds = %65, %55
  %.lcssa1 = phi i64 [ %.lcssa2, %65 ], [ %56, %55 ]
  %68 = phi i32 [ %66, %65 ], [ %54, %55 ]
  %69 = icmp slt i64 %.lcssa1, %15
  %70 = add nsw i32 %10, 1
  %71 = add nsw i32 %10, 2
  %72 = select i1 %29, i32 %70, i32 0
  %73 = select i1 %29, i32 %71, i32 %70
  %74 = select i1 %41, i32 %73, i32 0
  %75 = zext i1 %41 to i32
  %76 = add nsw i32 %73, %75
  %77 = select i1 %53, i32 %76, i32 0
  %78 = zext i1 %53 to i32
  %79 = add nsw i32 %76, %78
  %80 = select i1 %69, i32 %79, i32 0
  %81 = load i32, ptr @numnets, align 4, !tbaa !17
  %82 = icmp slt i32 %81, 1
  br i1 %82, label %159, label %83

83:                                               ; preds = %67
  %84 = load ptr, ptr @netarray, align 8, !tbaa !7
  br label %85

85:                                               ; preds = %152, %83
  %86 = phi i32 [ %81, %83 ], [ %153, %152 ]
  %87 = phi ptr [ %84, %83 ], [ %154, %152 ]
  %88 = phi i64 [ 1, %83 ], [ %156, %152 ]
  %89 = phi i32 [ %68, %83 ], [ %155, %152 ]
  %90 = getelementptr inbounds ptr, ptr %87, i64 %88
  %91 = load ptr, ptr %90, align 8, !tbaa !7
  %92 = load ptr, ptr %91, align 8, !tbaa !7
  %93 = icmp eq ptr %92, null
  br i1 %93, label %152, label %94

94:                                               ; preds = %94, %85
  %95 = phi ptr [ %102, %94 ], [ %92, %85 ]
  %96 = phi i32 [ %101, %94 ], [ 0, %85 ]
  %97 = getelementptr inbounds %struct.netbox, ptr %95, i64 0, i32 8
  %98 = load i32, ptr %97, align 4, !tbaa !478
  %99 = icmp sgt i32 %98, 0
  %100 = zext i1 %99 to i32
  %101 = add nuw nsw i32 %96, %100
  %102 = load ptr, ptr %95, align 8, !tbaa !7
  %103 = icmp eq ptr %102, null
  br i1 %103, label %104, label %94, !llvm.loop !658

104:                                              ; preds = %94
  %.lcssa = phi i32 [ %101, %94 ]
  %105 = icmp ult i32 %.lcssa, 2
  br i1 %105, label %152, label %106

106:                                              ; preds = %104
  %107 = getelementptr inbounds %struct.dimbox, ptr %91, i64 0, i32 13
  %108 = load ptr, ptr %107, align 8, !tbaa !38
  %109 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %4, ptr noundef nonnull @.str.3.444, ptr noundef %108) #43
  %110 = load ptr, ptr %91, align 8, !tbaa !7
  %111 = icmp eq ptr %110, null
  br i1 %111, label %147, label %112

112:                                              ; preds = %130, %106
  %113 = phi ptr [ %145, %130 ], [ %110, %106 ]
  %114 = phi i32 [ %131, %130 ], [ %89, %106 ]
  %115 = getelementptr inbounds %struct.netbox, ptr %113, i64 0, i32 7
  %116 = load i32, ptr %115, align 8, !tbaa !57
  %117 = load i32, ptr @numcells, align 4, !tbaa !17
  %118 = icmp sgt i32 %116, %117
  br i1 %118, label %119, label %130

119:                                              ; preds = %112
  %120 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %121 = sext i32 %116 to i64
  %122 = getelementptr inbounds ptr, ptr %120, i64 %121
  %123 = load ptr, ptr %122, align 8, !tbaa !7
  %124 = getelementptr inbounds %struct.cellbox, ptr %123, i64 0, i32 11
  %125 = load i32, ptr %124, align 8, !tbaa !363
  switch i32 %125, label %129 [
    i32 1, label %130
    i32 2, label %126
    i32 3, label %127
    i32 4, label %128
  ]

126:                                              ; preds = %119
  br label %130

127:                                              ; preds = %119
  br label %130

128:                                              ; preds = %119
  br label %130

129:                                              ; preds = %119
  br label %130

130:                                              ; preds = %129, %128, %127, %126, %119, %112
  %131 = phi i32 [ %74, %126 ], [ %77, %127 ], [ %80, %128 ], [ %116, %112 ], [ %72, %119 ], [ %114, %129 ]
  %132 = load ptr, ptr @pinnames, align 8, !tbaa !7
  %133 = getelementptr inbounds %struct.netbox, ptr %113, i64 0, i32 5
  %134 = load i32, ptr %133, align 8, !tbaa !55
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds ptr, ptr %132, i64 %135
  %137 = load ptr, ptr %136, align 8, !tbaa !7
  %138 = getelementptr inbounds %struct.netbox, ptr %113, i64 0, i32 1
  %139 = load i32, ptr %138, align 8, !tbaa !64
  %140 = getelementptr inbounds %struct.netbox, ptr %113, i64 0, i32 2
  %141 = load i32, ptr %140, align 4, !tbaa !65
  %142 = getelementptr inbounds %struct.netbox, ptr %113, i64 0, i32 8
  %143 = load i32, ptr %142, align 4, !tbaa !478
  %144 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %4, ptr noundef nonnull @.str.4.445, ptr noundef %137, i32 noundef %139, i32 noundef %141, i32 noundef %131, i32 noundef %143) #43
  %145 = load ptr, ptr %113, align 8, !tbaa !7
  %146 = icmp eq ptr %145, null
  br i1 %146, label %147, label %112, !llvm.loop !659

147:                                              ; preds = %130, %106
  %148 = phi i32 [ %89, %106 ], [ %131, %130 ]
  %149 = tail call i32 @fputc(i32 10, ptr nonnull %4)
  %150 = load ptr, ptr @netarray, align 8, !tbaa !7
  %151 = load i32, ptr @numnets, align 4, !tbaa !17
  br label %152

152:                                              ; preds = %147, %104, %85
  %153 = phi i32 [ %86, %104 ], [ %151, %147 ], [ %86, %85 ]
  %154 = phi ptr [ %87, %104 ], [ %150, %147 ], [ %87, %85 ]
  %155 = phi i32 [ %89, %104 ], [ %148, %147 ], [ %89, %85 ]
  %156 = add nuw nsw i64 %88, 1
  %157 = sext i32 %153 to i64
  %158 = icmp slt i64 %88, %157
  br i1 %158, label %85, label %159, !llvm.loop !660

159:                                              ; preds = %152, %67
  %160 = tail call i32 @fclose(ptr noundef nonnull %4) #43
  call void @llvm.lifetime.end.p0(i64 1024, ptr nonnull %1) #47
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @output() #0 {
  %1 = alloca [1024 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 1024, ptr nonnull %1) #47
  %2 = load ptr, ptr @cktName, align 8, !tbaa !7
  %3 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %1, ptr noundef nonnull dereferenceable(1) @.str.448, ptr noundef %2) #44
  %4 = call noalias ptr @fopen(ptr noundef nonnull %1, ptr noundef nonnull @.str.1.449) #43
  %5 = icmp eq ptr %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %0
  %7 = load i32, ptr @numcells, align 4, !tbaa !17
  %8 = load i32, ptr @numpads, align 4, !tbaa !17
  %9 = add nsw i32 %8, %7
  %10 = icmp slt i32 %9, 1
  br i1 %10, label %162, label %14

11:                                               ; preds = %0
  %12 = load ptr, ptr @fpo, align 8, !tbaa !7
  %13 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %12, ptr noundef nonnull @.str.2.450, ptr noundef nonnull %1) #43
  call void @exit(i32 noundef 0) #49
  unreachable

14:                                               ; preds = %155, %6
  %15 = phi i64 [ %156, %155 ], [ 1, %6 ]
  %16 = phi i32 [ %157, %155 ], [ %7, %6 ]
  %17 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %18 = getelementptr inbounds ptr, ptr %17, i64 %15
  %19 = load ptr, ptr %18, align 8, !tbaa !7
  %20 = sext i32 %16 to i64
  %21 = icmp sgt i64 %15, %20
  %22 = load ptr, ptr %19, align 8, !tbaa !291
  br i1 %21, label %27, label %23

23:                                               ; preds = %14
  %24 = getelementptr inbounds %struct.cellbox, ptr %19, i64 0, i32 5
  %25 = load i32, ptr %24, align 8, !tbaa !45
  %26 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %4, ptr noundef nonnull @.str.3.451, ptr noundef %22, i32 noundef %25) #43
  br label %29

27:                                               ; preds = %14
  %28 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %4, ptr noundef nonnull @.str.5.452, ptr noundef %22) #43
  br label %29

29:                                               ; preds = %27, %23
  %30 = tail call i64 @fwrite(ptr nonnull @.str.4.453, i64 9, i64 1, ptr nonnull %4)
  %31 = getelementptr inbounds %struct.cellbox, ptr %19, i64 0, i32 5
  %32 = load i32, ptr %31, align 8, !tbaa !45
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds %struct.cellbox, ptr %19, i64 0, i32 21, i64 %33
  %35 = load ptr, ptr %34, align 8, !tbaa !7
  %36 = getelementptr inbounds %struct.tilebox, ptr %35, i64 0, i32 17
  %37 = load ptr, ptr %36, align 8, !tbaa !47
  %38 = getelementptr inbounds %struct.cellbox, ptr %19, i64 0, i32 2
  %39 = load i32, ptr %38, align 4, !tbaa !164
  %40 = getelementptr inbounds %struct.cellbox, ptr %19, i64 0, i32 3
  %41 = load i32, ptr %40, align 8, !tbaa !165
  %42 = load ptr, ptr %19, align 8, !tbaa !291
  %43 = trunc i64 %15 to i32
  tail call void @initPts(i32 noundef %43, ptr noundef %42, i32 noundef %32) #44
  %44 = load ptr, ptr %35, align 8, !tbaa !172
  %45 = icmp eq ptr %44, null
  br i1 %45, label %58, label %46

46:                                               ; preds = %46, %29
  %47 = phi ptr [ %56, %46 ], [ %44, %29 ]
  %48 = getelementptr inbounds %struct.tilebox, ptr %47, i64 0, i32 9
  %49 = load i32, ptr %48, align 8, !tbaa !167
  %50 = getelementptr inbounds %struct.tilebox, ptr %47, i64 0, i32 10
  %51 = load i32, ptr %50, align 4, !tbaa !168
  %52 = getelementptr inbounds %struct.tilebox, ptr %47, i64 0, i32 11
  %53 = load i32, ptr %52, align 8, !tbaa !169
  %54 = getelementptr inbounds %struct.tilebox, ptr %47, i64 0, i32 12
  %55 = load i32, ptr %54, align 4, !tbaa !170
  tail call void @addPts(i32 noundef %49, i32 noundef %51, i32 noundef %53, i32 noundef %55) #44
  %56 = load ptr, ptr %47, align 8, !tbaa !172
  %57 = icmp eq ptr %56, null
  br i1 %57, label %58, label %46, !llvm.loop !661

58:                                               ; preds = %46, %29
  tail call void @unbust() #44
  %59 = load ptr, ptr @PtsOut, align 8, !tbaa !7
  %60 = load i32, ptr %59, align 4, !tbaa !102
  %61 = icmp sgt i32 %60, 1
  br i1 %61, label %62, label %77

62:                                               ; preds = %62, %58
  %63 = phi i64 [ %72, %62 ], [ 1, %58 ]
  %64 = phi ptr [ %73, %62 ], [ %59, %58 ]
  %65 = getelementptr inbounds %struct.bellbox, ptr %64, i64 %63
  %66 = load i32, ptr %65, align 4, !tbaa !102
  %67 = add nsw i32 %66, %39
  %68 = getelementptr inbounds %struct.bellbox, ptr %64, i64 %63, i32 1
  %69 = load i32, ptr %68, align 4, !tbaa !104
  %70 = add nsw i32 %69, %41
  %71 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %4, ptr noundef nonnull @.str.6.454, i32 noundef %67, i32 noundef %70) #43
  %72 = add nuw nsw i64 %63, 1
  %73 = load ptr, ptr @PtsOut, align 8, !tbaa !7
  %74 = load i32, ptr %73, align 4, !tbaa !102
  %75 = sext i32 %74 to i64
  %76 = icmp slt i64 %72, %75
  br i1 %76, label %62, label %77, !llvm.loop !662

77:                                               ; preds = %62, %58
  %78 = tail call i32 @fputc(i32 10, ptr nonnull %4)
  %79 = icmp eq ptr %37, null
  br i1 %79, label %115, label %80

80:                                               ; preds = %77
  %81 = load ptr, ptr @pinnames, align 8, !tbaa !7
  br label %82

82:                                               ; preds = %111, %80
  %83 = phi ptr [ %112, %111 ], [ %81, %80 ]
  %84 = phi ptr [ %113, %111 ], [ %37, %80 ]
  %85 = getelementptr inbounds %struct.termbox, ptr %84, i64 0, i32 5
  %86 = load i32, ptr %85, align 8, !tbaa !53
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds ptr, ptr %83, i64 %87
  %89 = load ptr, ptr %88, align 8, !tbaa !7
  %90 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %89, ptr noundef nonnull dereferenceable(8) @.str.8.455) #50
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %111, label %92

92:                                               ; preds = %82
  %93 = getelementptr inbounds %struct.termbox, ptr %84, i64 0, i32 2
  %94 = load i32, ptr %93, align 4, !tbaa !52
  %95 = add nsw i32 %94, %41
  %96 = getelementptr inbounds %struct.termbox, ptr %84, i64 0, i32 1
  %97 = load i32, ptr %96, align 8, !tbaa !51
  %98 = add nsw i32 %97, %39
  %99 = load ptr, ptr @netarray, align 8, !tbaa !7
  %100 = load ptr, ptr @termarray, align 8, !tbaa !7
  %101 = getelementptr inbounds ptr, ptr %100, i64 %87
  %102 = load ptr, ptr %101, align 8, !tbaa !7
  %103 = load i32, ptr %102, align 8, !tbaa !60
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds ptr, ptr %99, i64 %104
  %106 = load ptr, ptr %105, align 8, !tbaa !7
  %107 = getelementptr inbounds %struct.dimbox, ptr %106, i64 0, i32 13
  %108 = load ptr, ptr %107, align 8, !tbaa !38
  %109 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %4, ptr noundef nonnull @.str.9.456, ptr noundef %89, ptr noundef %108, i32 noundef %98, i32 noundef %95) #43
  %110 = load ptr, ptr @pinnames, align 8, !tbaa !7
  br label %111

111:                                              ; preds = %92, %82
  %112 = phi ptr [ %83, %82 ], [ %110, %92 ]
  %113 = load ptr, ptr %84, align 8, !tbaa !49
  %114 = icmp eq ptr %113, null
  br i1 %114, label %115, label %82, !llvm.loop !663

115:                                              ; preds = %111, %77
  %116 = getelementptr inbounds %struct.cellbox, ptr %19, i64 0, i32 10
  %117 = load i32, ptr %116, align 4, !tbaa !297
  %118 = icmp eq i32 %117, 1
  br i1 %118, label %119, label %155

119:                                              ; preds = %115
  %120 = getelementptr inbounds %struct.cellbox, ptr %19, i64 0, i32 18
  %121 = load i32, ptr %120, align 4, !tbaa !223
  %122 = icmp slt i32 %121, 1
  br i1 %122, label %155, label %123

123:                                              ; preds = %119
  %124 = getelementptr inbounds %struct.cellbox, ptr %19, i64 0, i32 20
  br label %125

125:                                              ; preds = %125, %123
  %126 = phi i64 [ 1, %123 ], [ %151, %125 ]
  %127 = load ptr, ptr %124, align 8, !tbaa !226
  %128 = getelementptr inbounds %struct.uncombox.25, ptr %127, i64 %126
  %129 = getelementptr inbounds %struct.uncombox.25, ptr %127, i64 %126, i32 9
  %130 = load i32, ptr %129, align 4, !tbaa !228
  %131 = add nsw i32 %130, %39
  %132 = getelementptr inbounds %struct.uncombox.25, ptr %127, i64 %126, i32 10
  %133 = load i32, ptr %132, align 4, !tbaa !230
  %134 = add nsw i32 %133, %41
  %135 = load i32, ptr %128, align 4, !tbaa !298
  %136 = load ptr, ptr @pinnames, align 8, !tbaa !7
  %137 = sext i32 %135 to i64
  %138 = getelementptr inbounds ptr, ptr %136, i64 %137
  %139 = load ptr, ptr %138, align 8, !tbaa !7
  %140 = load ptr, ptr @netarray, align 8, !tbaa !7
  %141 = load ptr, ptr @termarray, align 8, !tbaa !7
  %142 = getelementptr inbounds ptr, ptr %141, i64 %137
  %143 = load ptr, ptr %142, align 8, !tbaa !7
  %144 = load i32, ptr %143, align 8, !tbaa !60
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds ptr, ptr %140, i64 %145
  %147 = load ptr, ptr %146, align 8, !tbaa !7
  %148 = getelementptr inbounds %struct.dimbox, ptr %147, i64 0, i32 13
  %149 = load ptr, ptr %148, align 8, !tbaa !38
  %150 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %4, ptr noundef nonnull @.str.9.456, ptr noundef %139, ptr noundef %149, i32 noundef %131, i32 noundef %134) #43
  %151 = add nuw nsw i64 %126, 1
  %152 = load i32, ptr %120, align 4, !tbaa !223
  %153 = sext i32 %152 to i64
  %154 = icmp slt i64 %126, %153
  br i1 %154, label %125, label %155, !llvm.loop !664

155:                                              ; preds = %125, %119, %115
  %156 = add nuw nsw i64 %15, 1
  %157 = load i32, ptr @numcells, align 4, !tbaa !17
  %158 = load i32, ptr @numpads, align 4, !tbaa !17
  %159 = add nsw i32 %158, %157
  %160 = sext i32 %159 to i64
  %161 = icmp slt i64 %15, %160
  br i1 %161, label %14, label %162, !llvm.loop !665

162:                                              ; preds = %155, %6
  %163 = tail call i32 @fclose(ptr noundef nonnull %4) #43
  call void @llvm.lifetime.end.p0(i64 1024, ptr nonnull %1) #47
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @outsmall() #0 {
  %1 = alloca [1024 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 1024, ptr nonnull %1) #47
  %2 = load i32, ptr @bdxlength, align 4
  %3 = load i32, ptr @bdylength, align 4
  %4 = tail call i32 @llvm.smax.i32(i32 %2, i32 %3)
  %5 = sitofp i32 %4 to double
  %6 = fdiv double %5, 5.000000e+02
  %7 = fptosi double %6 to i32
  %8 = add nsw i32 %7, 1
  %9 = load ptr, ptr @cktName, align 8, !tbaa !7
  %10 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %1, ptr noundef nonnull dereferenceable(1) @.str.459, ptr noundef %9) #44
  %11 = call noalias ptr @fopen(ptr noundef nonnull %1, ptr noundef nonnull @.str.1.460) #43
  %12 = icmp eq ptr %11, null
  br i1 %12, label %13, label %16

13:                                               ; preds = %0
  %14 = load ptr, ptr @fpo, align 8, !tbaa !7
  %15 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %14, ptr noundef nonnull @.str.2.461, ptr noundef nonnull %1) #43
  call void @exit(i32 noundef 0) #49
  unreachable

16:                                               ; preds = %0
  %17 = load i32, ptr @redoFlag, align 4, !tbaa !17
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %22, label %19

19:                                               ; preds = %16
  %20 = load ptr, ptr @fpNodes, align 8, !tbaa !7
  %21 = tail call i32 @fclose(ptr noundef %20) #43
  br label %22

22:                                               ; preds = %19, %16
  store ptr %11, ptr @fpNodes, align 8, !tbaa !7
  %23 = load i32, ptr @numcells, align 4, !tbaa !17
  %24 = load i32, ptr @numpads, align 4, !tbaa !17
  %25 = add nsw i32 %24, %23
  %26 = icmp slt i32 %25, 1
  br i1 %26, label %179, label %27

27:                                               ; preds = %172, %22
  %28 = phi i64 [ %173, %172 ], [ 1, %22 ]
  %29 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %30 = getelementptr inbounds ptr, ptr %29, i64 %28
  %31 = load ptr, ptr %30, align 8, !tbaa !7
  %32 = getelementptr inbounds %struct.cellbox, ptr %31, i64 0, i32 5
  %33 = load i32, ptr %32, align 8, !tbaa !45
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds %struct.cellbox, ptr %31, i64 0, i32 21, i64 %34
  %36 = load ptr, ptr %35, align 8, !tbaa !7
  %37 = getelementptr inbounds %struct.tilebox, ptr %36, i64 0, i32 17
  %38 = load ptr, ptr %37, align 8, !tbaa !47
  %39 = getelementptr inbounds %struct.cellbox, ptr %31, i64 0, i32 2
  %40 = load i32, ptr %39, align 4, !tbaa !164
  %41 = getelementptr inbounds %struct.cellbox, ptr %31, i64 0, i32 3
  %42 = load i32, ptr %41, align 8, !tbaa !165
  %43 = load ptr, ptr %31, align 8, !tbaa !291
  %44 = trunc i64 %28 to i32
  tail call void @initPts(i32 noundef %44, ptr noundef %43, i32 noundef %33) #44
  %45 = load ptr, ptr %36, align 8, !tbaa !172
  %46 = icmp eq ptr %45, null
  br i1 %46, label %70, label %47

47:                                               ; preds = %27
  %48 = shl i32 %40, 1
  %49 = shl i32 %42, 1
  br label %50

50:                                               ; preds = %50, %47
  %51 = phi ptr [ %45, %47 ], [ %68, %50 ]
  %52 = getelementptr inbounds %struct.tilebox, ptr %51, i64 0, i32 9
  %53 = load i32, ptr %52, align 8, !tbaa !167
  %54 = getelementptr inbounds %struct.tilebox, ptr %51, i64 0, i32 10
  %55 = load i32, ptr %54, align 4, !tbaa !168
  %56 = getelementptr inbounds %struct.tilebox, ptr %51, i64 0, i32 11
  %57 = load i32, ptr %56, align 8, !tbaa !169
  %58 = getelementptr inbounds %struct.tilebox, ptr %51, i64 0, i32 12
  %59 = load i32, ptr %58, align 4, !tbaa !170
  tail call void @addPts(i32 noundef %53, i32 noundef %55, i32 noundef %57, i32 noundef %59) #44
  %60 = load ptr, ptr %31, align 8, !tbaa !291
  %61 = add i32 %53, %48
  %62 = add i32 %61, %55
  %63 = sdiv i32 %62, 2
  %64 = add i32 %57, %49
  %65 = add i32 %64, %59
  %66 = sdiv i32 %65, 2
  %67 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %11, ptr noundef nonnull @.str.3.464, ptr noundef %60, i32 noundef %63, i32 noundef %66) #43
  %68 = load ptr, ptr %51, align 8, !tbaa !172
  %69 = icmp eq ptr %68, null
  br i1 %69, label %70, label %50, !llvm.loop !666

70:                                               ; preds = %50, %27
  tail call void @unbust() #44
  %71 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %11, ptr noundef nonnull @.str.4.465, i32 noundef %8) #43
  %72 = load ptr, ptr @PtsOut, align 8, !tbaa !7
  %73 = load i32, ptr %72, align 4, !tbaa !102
  %74 = icmp sgt i32 %73, 1
  br i1 %74, label %75, label %90

75:                                               ; preds = %75, %70
  %76 = phi i64 [ %85, %75 ], [ 1, %70 ]
  %77 = phi ptr [ %86, %75 ], [ %72, %70 ]
  %78 = getelementptr inbounds %struct.bellbox, ptr %77, i64 %76
  %79 = load i32, ptr %78, align 4, !tbaa !102
  %80 = add nsw i32 %79, %40
  %81 = getelementptr inbounds %struct.bellbox, ptr %77, i64 %76, i32 1
  %82 = load i32, ptr %81, align 4, !tbaa !104
  %83 = add nsw i32 %82, %42
  %84 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %11, ptr noundef nonnull @.str.5.466, i32 noundef %80, i32 noundef %83) #43
  %85 = add nuw nsw i64 %76, 1
  %86 = load ptr, ptr @PtsOut, align 8, !tbaa !7
  %87 = load i32, ptr %86, align 4, !tbaa !102
  %88 = sext i32 %87 to i64
  %89 = icmp slt i64 %85, %88
  br i1 %89, label %75, label %90, !llvm.loop !667

90:                                               ; preds = %75, %70
  %91 = phi ptr [ %72, %70 ], [ %86, %75 ]
  %92 = getelementptr inbounds %struct.bellbox, ptr %91, i64 1
  %93 = load i32, ptr %92, align 4, !tbaa !102
  %94 = add nsw i32 %93, %40
  %95 = getelementptr inbounds %struct.bellbox, ptr %91, i64 1, i32 1
  %96 = load i32, ptr %95, align 4, !tbaa !104
  %97 = add nsw i32 %96, %42
  %98 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %11, ptr noundef nonnull @.str.6.467, i32 noundef %94, i32 noundef %97) #43
  %99 = icmp eq ptr %38, null
  br i1 %99, label %135, label %100

100:                                              ; preds = %90
  %101 = load ptr, ptr @pinnames, align 8, !tbaa !7
  br label %102

102:                                              ; preds = %131, %100
  %103 = phi ptr [ %132, %131 ], [ %101, %100 ]
  %104 = phi ptr [ %133, %131 ], [ %38, %100 ]
  %105 = getelementptr inbounds %struct.termbox, ptr %104, i64 0, i32 5
  %106 = load i32, ptr %105, align 8, !tbaa !53
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds ptr, ptr %103, i64 %107
  %109 = load ptr, ptr %108, align 8, !tbaa !7
  %110 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %109, ptr noundef nonnull dereferenceable(8) @.str.7.468) #50
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %131, label %112

112:                                              ; preds = %102
  %113 = getelementptr inbounds %struct.termbox, ptr %104, i64 0, i32 2
  %114 = load i32, ptr %113, align 4, !tbaa !52
  %115 = add nsw i32 %114, %42
  %116 = getelementptr inbounds %struct.termbox, ptr %104, i64 0, i32 1
  %117 = load i32, ptr %116, align 8, !tbaa !51
  %118 = add nsw i32 %117, %40
  %119 = load ptr, ptr @netarray, align 8, !tbaa !7
  %120 = load ptr, ptr @termarray, align 8, !tbaa !7
  %121 = getelementptr inbounds ptr, ptr %120, i64 %107
  %122 = load ptr, ptr %121, align 8, !tbaa !7
  %123 = load i32, ptr %122, align 8, !tbaa !60
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds ptr, ptr %119, i64 %124
  %126 = load ptr, ptr %125, align 8, !tbaa !7
  %127 = getelementptr inbounds %struct.dimbox, ptr %126, i64 0, i32 13
  %128 = load ptr, ptr %127, align 8, !tbaa !38
  %129 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %11, ptr noundef nonnull @.str.3.464, ptr noundef %128, i32 noundef %118, i32 noundef %115) #43
  %130 = load ptr, ptr @pinnames, align 8, !tbaa !7
  br label %131

131:                                              ; preds = %112, %102
  %132 = phi ptr [ %103, %102 ], [ %130, %112 ]
  %133 = load ptr, ptr %104, align 8, !tbaa !49
  %134 = icmp eq ptr %133, null
  br i1 %134, label %135, label %102, !llvm.loop !668

135:                                              ; preds = %131, %90
  %136 = getelementptr inbounds %struct.cellbox, ptr %31, i64 0, i32 10
  %137 = load i32, ptr %136, align 4, !tbaa !297
  %138 = icmp eq i32 %137, 1
  br i1 %138, label %139, label %172

139:                                              ; preds = %135
  %140 = getelementptr inbounds %struct.cellbox, ptr %31, i64 0, i32 18
  %141 = load i32, ptr %140, align 4, !tbaa !223
  %142 = icmp slt i32 %141, 1
  br i1 %142, label %172, label %143

143:                                              ; preds = %139
  %144 = getelementptr inbounds %struct.cellbox, ptr %31, i64 0, i32 20
  br label %145

145:                                              ; preds = %145, %143
  %146 = phi i64 [ 1, %143 ], [ %168, %145 ]
  %147 = load ptr, ptr %144, align 8, !tbaa !226
  %148 = getelementptr inbounds %struct.uncombox.25, ptr %147, i64 %146
  %149 = getelementptr inbounds %struct.uncombox.25, ptr %147, i64 %146, i32 9
  %150 = load i32, ptr %149, align 4, !tbaa !228
  %151 = add nsw i32 %150, %40
  %152 = getelementptr inbounds %struct.uncombox.25, ptr %147, i64 %146, i32 10
  %153 = load i32, ptr %152, align 4, !tbaa !230
  %154 = add nsw i32 %153, %42
  %155 = load i32, ptr %148, align 4, !tbaa !298
  %156 = load ptr, ptr @netarray, align 8, !tbaa !7
  %157 = load ptr, ptr @termarray, align 8, !tbaa !7
  %158 = sext i32 %155 to i64
  %159 = getelementptr inbounds ptr, ptr %157, i64 %158
  %160 = load ptr, ptr %159, align 8, !tbaa !7
  %161 = load i32, ptr %160, align 8, !tbaa !60
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds ptr, ptr %156, i64 %162
  %164 = load ptr, ptr %163, align 8, !tbaa !7
  %165 = getelementptr inbounds %struct.dimbox, ptr %164, i64 0, i32 13
  %166 = load ptr, ptr %165, align 8, !tbaa !38
  %167 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %11, ptr noundef nonnull @.str.3.464, ptr noundef %166, i32 noundef %151, i32 noundef %154) #43
  %168 = add nuw nsw i64 %146, 1
  %169 = load i32, ptr %140, align 4, !tbaa !223
  %170 = sext i32 %169 to i64
  %171 = icmp slt i64 %146, %170
  br i1 %171, label %145, label %172, !llvm.loop !669

172:                                              ; preds = %145, %139, %135
  %173 = add nuw nsw i64 %28, 1
  %174 = load i32, ptr @numcells, align 4, !tbaa !17
  %175 = load i32, ptr @numpads, align 4, !tbaa !17
  %176 = add nsw i32 %175, %174
  %177 = sext i32 %176 to i64
  %178 = icmp slt i64 %28, %177
  br i1 %178, label %27, label %179, !llvm.loop !670

179:                                              ; preds = %172, %22
  %180 = load i32, ptr @blockl, align 4, !tbaa !17
  %181 = load i32, ptr @blockr, align 4, !tbaa !17
  %182 = load i32, ptr @blockb, align 4, !tbaa !17
  %183 = load i32, ptr @blockt, align 4, !tbaa !17
  %184 = tail call i64 @fwrite(ptr nonnull @.str.8.469, i64 6, i64 1, ptr nonnull %11)
  %185 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %11, ptr noundef nonnull @.str.9.470, i32 noundef %8, i32 noundef %180, i32 noundef %182, i32 noundef %180, i32 noundef %183, i32 noundef %181, i32 noundef %183, i32 noundef %181, i32 noundef %182, i32 noundef %180, i32 noundef %182) #43
  call void @llvm.lifetime.end.p0(i64 1024, ptr nonnull %1) #47
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @parser(ptr noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca [1024 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %3) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %7) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %8) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %9) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %10) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %11) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %12) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %13) #47
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %14) #47
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %15) #47
  call void @llvm.lifetime.start.p0(i64 1024, ptr nonnull %16) #47
  store i32 0, ptr @maxterm, align 4, !tbaa !17
  br label %17

17:                                               ; preds = %766, %1
  %18 = phi i32 [ 0, %1 ], [ %767, %766 ]
  %19 = phi i32 [ 0, %1 ], [ %768, %766 ]
  %20 = phi i32 [ undef, %1 ], [ %769, %766 ]
  %21 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.471, ptr noundef nonnull %16) #44
  %22 = icmp eq i32 %21, 1
  br i1 %22, label %23, label %770

23:                                               ; preds = %17
  %24 = call i32 @bcmp(ptr noundef nonnull dereferenceable(5) %16, ptr noundef nonnull dereferenceable(5) @.str.1.472, i64 5)
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %165

26:                                               ; preds = %23
  %27 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.2.473, ptr noundef nonnull %10) #44
  %28 = icmp eq i32 %27, 1
  br i1 %28, label %34, label %29

29:                                               ; preds = %26
  %.lcssa158 = phi i32 [ %18, %26 ]
  %30 = load ptr, ptr @fpo, align 8, !tbaa !7
  %31 = call i64 @fwrite(ptr nonnull @.str.3.474, i64 40, i64 1, ptr %30)
  %32 = load ptr, ptr @fpo, align 8, !tbaa !7
  %33 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %32, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa158) #43
  call void @exit(i32 noundef 0) #49
  unreachable

34:                                               ; preds = %26
  %35 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.476, ptr noundef nonnull %16) #44
  %36 = icmp eq i32 %35, 1
  br i1 %36, label %42, label %37

37:                                               ; preds = %34
  %.lcssa159 = phi i32 [ %18, %34 ]
  %38 = load ptr, ptr @fpo, align 8, !tbaa !7
  %39 = call i64 @fwrite(ptr nonnull @.str.6.477, i64 30, i64 1, ptr %38)
  %40 = load ptr, ptr @fpo, align 8, !tbaa !7
  %41 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %40, ptr noundef nonnull @.str.7.478, i32 noundef %.lcssa159) #43
  call void @exit(i32 noundef 0) #49
  unreachable

42:                                               ; preds = %34
  %43 = call i32 @bcmp(ptr noundef nonnull dereferenceable(5) %16, ptr noundef nonnull dereferenceable(5) @.str.8.479, i64 5)
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %50, label %45

45:                                               ; preds = %42
  %.lcssa160 = phi i32 [ %18, %42 ]
  %46 = load ptr, ptr @fpo, align 8, !tbaa !7
  %47 = call i64 @fwrite(ptr nonnull @.str.6.477, i64 30, i64 1, ptr %46)
  %48 = load ptr, ptr @fpo, align 8, !tbaa !7
  %49 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %48, ptr noundef nonnull @.str.9.480, i32 noundef %.lcssa160) #43
  call void @exit(i32 noundef 0) #49
  unreachable

50:                                               ; preds = %42
  %51 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.476, ptr noundef nonnull %16) #44
  %52 = icmp eq i32 %51, 1
  br i1 %52, label %58, label %53

53:                                               ; preds = %50
  %.lcssa161 = phi i32 [ %18, %50 ]
  %54 = load ptr, ptr @fpo, align 8, !tbaa !7
  %55 = call i64 @fwrite(ptr nonnull @.str.10.481, i64 43, i64 1, ptr %54)
  %56 = load ptr, ptr @fpo, align 8, !tbaa !7
  %57 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %56, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa161) #43
  call void @exit(i32 noundef 0) #49
  unreachable

58:                                               ; preds = %50
  %59 = add nsw i32 %18, 1
  %60 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.11.482, ptr noundef nonnull %11) #44
  %61 = icmp eq i32 %60, 1
  br i1 %61, label %67, label %62

62:                                               ; preds = %58
  %.lcssa172 = phi i32 [ %59, %58 ]
  %63 = load ptr, ptr @fpo, align 8, !tbaa !7
  %64 = call i64 @fwrite(ptr nonnull @.str.12.483, i64 41, i64 1, ptr %63)
  %65 = load ptr, ptr @fpo, align 8, !tbaa !7
  %66 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %65, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa172) #43
  call void @exit(i32 noundef 0) #49
  unreachable

67:                                               ; preds = %58
  %68 = load i32, ptr %11, align 4, !tbaa !17
  %69 = icmp slt i32 %68, 4
  br i1 %69, label %70, label %75

70:                                               ; preds = %67
  %.lcssa173 = phi i32 [ %59, %67 ]
  %71 = load ptr, ptr @fpo, align 8, !tbaa !7
  %72 = call i64 @fwrite(ptr nonnull @.str.13.484, i64 34, i64 1, ptr %71)
  %73 = load ptr, ptr @fpo, align 8, !tbaa !7
  %74 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %73, ptr noundef nonnull @.str.7.478, i32 noundef %.lcssa173) #43
  call void @exit(i32 noundef 0) #49
  unreachable

75:                                               ; preds = %67
  %76 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.471, ptr noundef nonnull %16) #44
  %77 = load i64, ptr %16, align 16
  %78 = icmp eq i64 %77, 32495402291982179
  br i1 %78, label %79, label %82

79:                                               ; preds = %75
  %80 = load i32, ptr %11, align 4, !tbaa !17
  %81 = icmp slt i32 %80, 1
  br i1 %81, label %102, label %89

82:                                               ; preds = %75
  %.lcssa174 = phi i32 [ %59, %75 ]
  %83 = load ptr, ptr @fpo, align 8, !tbaa !7
  %84 = call i64 @fwrite(ptr nonnull @.str.15.485, i64 31, i64 1, ptr %83)
  %85 = load ptr, ptr @fpo, align 8, !tbaa !7
  %86 = call i64 @fwrite(ptr nonnull @.str.16.486, i64 17, i64 1, ptr %85)
  %87 = load ptr, ptr @fpo, align 8, !tbaa !7
  %88 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %87, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa174) #43
  call void @exit(i32 noundef 0) #49
  unreachable

89:                                               ; preds = %98, %79
  %90 = phi i32 [ %99, %98 ], [ 1, %79 ]
  %91 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.17.487, ptr noundef nonnull %12, ptr noundef nonnull %13) #44
  %92 = icmp eq i32 %91, 2
  br i1 %92, label %98, label %93

93:                                               ; preds = %89
  %.lcssa175 = phi i32 [ %59, %89 ]
  %94 = load ptr, ptr @fpo, align 8, !tbaa !7
  %95 = call i64 @fwrite(ptr nonnull @.str.18.488, i64 35, i64 1, ptr %94)
  %96 = load ptr, ptr @fpo, align 8, !tbaa !7
  %97 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %96, ptr noundef nonnull @.str.9.480, i32 noundef %.lcssa175) #43
  call void @exit(i32 noundef 0) #49
  unreachable

98:                                               ; preds = %89
  %99 = add nuw nsw i32 %90, 1
  %100 = load i32, ptr %11, align 4, !tbaa !17
  %101 = icmp slt i32 %90, %100
  br i1 %101, label %89, label %102, !llvm.loop !671

102:                                              ; preds = %98, %79
  %103 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.471, ptr noundef nonnull %16) #44
  %104 = call i32 @bcmp(ptr noundef nonnull dereferenceable(6) %16, ptr noundef nonnull dereferenceable(6) @.str.19.489, i64 6)
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %113, label %106

106:                                              ; preds = %102
  %.lcssa176 = phi i32 [ %59, %102 ]
  %107 = load ptr, ptr @fpo, align 8, !tbaa !7
  %108 = call i64 @fwrite(ptr nonnull @.str.20.490, i64 29, i64 1, ptr %107)
  %109 = load ptr, ptr @fpo, align 8, !tbaa !7
  %110 = call i64 @fwrite(ptr nonnull @.str.16.486, i64 17, i64 1, ptr %109)
  %111 = load ptr, ptr @fpo, align 8, !tbaa !7
  %112 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %111, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa176) #43
  call void @exit(i32 noundef 0) #49
  unreachable

113:                                              ; preds = %102
  %114 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.11.482, ptr noundef nonnull %6) #44
  %115 = icmp eq i32 %114, 1
  br i1 %115, label %121, label %116

116:                                              ; preds = %113
  %.lcssa177 = phi i32 [ %59, %113 ]
  %117 = load ptr, ptr @fpo, align 8, !tbaa !7
  %118 = call i64 @fwrite(ptr nonnull @.str.21.491, i64 39, i64 1, ptr %117)
  %119 = load ptr, ptr @fpo, align 8, !tbaa !7
  %120 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %119, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa177) #43
  call void @exit(i32 noundef 0) #49
  unreachable

121:                                              ; preds = %113
  %122 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.11.482, ptr noundef nonnull %3) #44
  %123 = icmp eq i32 %122, 1
  br i1 %123, label %129, label %124

124:                                              ; preds = %121
  %.lcssa178 = phi i32 [ %59, %121 ]
  %125 = load ptr, ptr @fpo, align 8, !tbaa !7
  %126 = call i64 @fwrite(ptr nonnull @.str.22.492, i64 46, i64 1, ptr %125)
  %127 = load ptr, ptr @fpo, align 8, !tbaa !7
  %128 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %127, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa178) #43
  call void @exit(i32 noundef 0) #49
  unreachable

129:                                              ; preds = %121
  %130 = load i32, ptr %3, align 4
  %131 = add i32 %130, -9
  %132 = icmp ult i32 %131, -8
  br i1 %132, label %133, label %138

133:                                              ; preds = %129
  %.lcssa179 = phi i32 [ %59, %129 ]
  %134 = load ptr, ptr @fpo, align 8, !tbaa !7
  %135 = call i64 @fwrite(ptr nonnull @.str.23.493, i64 43, i64 1, ptr %134)
  %136 = load ptr, ptr @fpo, align 8, !tbaa !7
  %137 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %136, ptr noundef nonnull @.str.24.494, i32 noundef %.lcssa179) #43
  call void @exit(i32 noundef 0) #49
  unreachable

138:                                              ; preds = %129
  %139 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.471, ptr noundef nonnull %16) #44
  %140 = call i32 @bcmp(ptr noundef nonnull dereferenceable(13) %16, ptr noundef nonnull dereferenceable(13) @.str.25.495, i64 13)
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %142, label %145

142:                                              ; preds = %138
  %143 = load i32, ptr %3, align 4, !tbaa !17
  %144 = icmp slt i32 %143, 1
  br i1 %144, label %766, label %156

145:                                              ; preds = %138
  %.lcssa180 = phi i32 [ %59, %138 ]
  %146 = load ptr, ptr @fpo, align 8, !tbaa !7
  %147 = call i64 @fwrite(ptr nonnull @.str.26.496, i64 36, i64 1, ptr %146)
  %148 = load ptr, ptr @fpo, align 8, !tbaa !7
  %149 = call i64 @fwrite(ptr nonnull @.str.16.486, i64 17, i64 1, ptr %148)
  %150 = load ptr, ptr @fpo, align 8, !tbaa !7
  %151 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %150, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa180) #43
  call void @exit(i32 noundef 0) #49
  unreachable

152:                                              ; preds = %156
  %153 = add nuw nsw i32 %157, 1
  %154 = load i32, ptr %3, align 4, !tbaa !17
  %155 = icmp slt i32 %157, %154
  br i1 %155, label %156, label %766, !llvm.loop !672

156:                                              ; preds = %152, %142
  %157 = phi i32 [ %153, %152 ], [ 1, %142 ]
  %158 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.11.482, ptr noundef nonnull %12) #44
  %159 = icmp eq i32 %158, 1
  br i1 %159, label %152, label %160

160:                                              ; preds = %156
  %.lcssa181 = phi i32 [ %59, %156 ]
  %161 = load ptr, ptr @fpo, align 8, !tbaa !7
  %162 = call i64 @fwrite(ptr nonnull @.str.27.497, i64 38, i64 1, ptr %161)
  %163 = load ptr, ptr @fpo, align 8, !tbaa !7
  %164 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %163, ptr noundef nonnull @.str.9.480, i32 noundef %.lcssa181) #43
  call void @exit(i32 noundef 0) #49
  unreachable

165:                                              ; preds = %23
  %166 = load i32, ptr %16, align 16
  %167 = icmp eq i32 %166, 7235952
  br i1 %167, label %168, label %244

168:                                              ; preds = %165
  switch i32 %20, label %169 [
    i32 4, label %176
    i32 2, label %176
  ]

169:                                              ; preds = %168
  %.lcssa150 = phi i32 [ %18, %168 ]
  %170 = load ptr, ptr @fpo, align 8, !tbaa !7
  %171 = call i64 @fwrite(ptr nonnull @.str.29.498, i64 31, i64 1, ptr %170)
  %172 = load ptr, ptr @fpo, align 8, !tbaa !7
  %173 = call i64 @fwrite(ptr nonnull @.str.16.486, i64 17, i64 1, ptr %172)
  %174 = load ptr, ptr @fpo, align 8, !tbaa !7
  %175 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %174, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa150) #43
  call void @exit(i32 noundef 0) #49
  unreachable

176:                                              ; preds = %168, %168
  %177 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.476, ptr noundef nonnull %16) #44
  %178 = icmp eq i32 %177, 1
  br i1 %178, label %186, label %179

179:                                              ; preds = %176
  %.lcssa151 = phi i32 [ %18, %176 ]
  %180 = load ptr, ptr @fpo, align 8, !tbaa !7
  %181 = call i64 @fwrite(ptr nonnull @.str.30.499, i64 36, i64 1, ptr %180)
  %182 = load ptr, ptr @fpo, align 8, !tbaa !7
  %183 = call i64 @fwrite(ptr nonnull @.str.16.486, i64 17, i64 1, ptr %182)
  %184 = load ptr, ptr @fpo, align 8, !tbaa !7
  %185 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %184, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa151) #43
  call void @exit(i32 noundef 0) #49
  unreachable

186:                                              ; preds = %176
  %187 = call i32 @bcmp(ptr noundef nonnull dereferenceable(5) %16, ptr noundef nonnull dereferenceable(5) @.str.8.479, i64 5)
  %188 = icmp eq i32 %187, 0
  br i1 %188, label %196, label %189

189:                                              ; preds = %186
  %.lcssa152 = phi i32 [ %18, %186 ]
  %190 = load ptr, ptr @fpo, align 8, !tbaa !7
  %191 = call i64 @fwrite(ptr nonnull @.str.30.499, i64 36, i64 1, ptr %190)
  %192 = load ptr, ptr @fpo, align 8, !tbaa !7
  %193 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %192, ptr noundef nonnull @.str.31.500, ptr noundef nonnull %16) #43
  %194 = load ptr, ptr @fpo, align 8, !tbaa !7
  %195 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %194, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa152) #43
  call void @exit(i32 noundef 0) #49
  unreachable

196:                                              ; preds = %186
  %197 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.476, ptr noundef nonnull %16) #44
  %198 = icmp eq i32 %197, 1
  br i1 %198, label %206, label %199

199:                                              ; preds = %196
  %.lcssa153 = phi i32 [ %18, %196 ]
  %200 = load ptr, ptr @fpo, align 8, !tbaa !7
  %201 = call i64 @fwrite(ptr nonnull @.str.32.501, i64 31, i64 1, ptr %200)
  %202 = load ptr, ptr @fpo, align 8, !tbaa !7
  %203 = call i64 @fwrite(ptr nonnull @.str.16.486, i64 17, i64 1, ptr %202)
  %204 = load ptr, ptr @fpo, align 8, !tbaa !7
  %205 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %204, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa153) #43
  call void @exit(i32 noundef 0) #49
  unreachable

206:                                              ; preds = %196
  %207 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.476, ptr noundef nonnull %16) #44
  %208 = icmp eq i32 %207, 1
  br i1 %208, label %216, label %209

209:                                              ; preds = %206
  %.lcssa154 = phi i32 [ %18, %206 ]
  %210 = load ptr, ptr @fpo, align 8, !tbaa !7
  %211 = call i64 @fwrite(ptr nonnull @.str.33.502, i64 38, i64 1, ptr %210)
  %212 = load ptr, ptr @fpo, align 8, !tbaa !7
  %213 = call i64 @fwrite(ptr nonnull @.str.16.486, i64 17, i64 1, ptr %212)
  %214 = load ptr, ptr @fpo, align 8, !tbaa !7
  %215 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %214, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa154) #43
  call void @exit(i32 noundef 0) #49
  unreachable

216:                                              ; preds = %206
  %217 = call i32 @bcmp(ptr noundef nonnull dereferenceable(7) %16, ptr noundef nonnull dereferenceable(7) @.str.34.503, i64 7)
  %218 = icmp eq i32 %217, 0
  br i1 %218, label %226, label %219

219:                                              ; preds = %216
  %.lcssa155 = phi i32 [ %18, %216 ]
  %220 = load ptr, ptr @fpo, align 8, !tbaa !7
  %221 = call i64 @fwrite(ptr nonnull @.str.33.502, i64 38, i64 1, ptr %220)
  %222 = load ptr, ptr @fpo, align 8, !tbaa !7
  %223 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %222, ptr noundef nonnull @.str.31.500, ptr noundef nonnull %16) #43
  %224 = load ptr, ptr @fpo, align 8, !tbaa !7
  %225 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %224, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa155) #43
  call void @exit(i32 noundef 0) #49
  unreachable

226:                                              ; preds = %216
  %227 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.476, ptr noundef nonnull %16) #44
  %228 = icmp eq i32 %227, 1
  br i1 %228, label %236, label %229

229:                                              ; preds = %226
  %.lcssa156 = phi i32 [ %18, %226 ]
  %230 = load ptr, ptr @fpo, align 8, !tbaa !7
  %231 = call i64 @fwrite(ptr nonnull @.str.35, i64 34, i64 1, ptr %230)
  %232 = load ptr, ptr @fpo, align 8, !tbaa !7
  %233 = call i64 @fwrite(ptr nonnull @.str.16.486, i64 17, i64 1, ptr %232)
  %234 = load ptr, ptr @fpo, align 8, !tbaa !7
  %235 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %234, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa156) #43
  call void @exit(i32 noundef 0) #49
  unreachable

236:                                              ; preds = %226
  %237 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.17.487, ptr noundef nonnull %4, ptr noundef nonnull %5) #44
  %238 = icmp eq i32 %237, 2
  br i1 %238, label %766, label %239

239:                                              ; preds = %236
  %.lcssa157 = phi i32 [ %18, %236 ]
  %240 = load ptr, ptr @fpo, align 8, !tbaa !7
  %241 = call i64 @fwrite(ptr nonnull @.str.36.504, i64 38, i64 1, ptr %240)
  %242 = load ptr, ptr @fpo, align 8, !tbaa !7
  %243 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %242, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa157) #43
  call void @exit(i32 noundef 0) #49
  unreachable

244:                                              ; preds = %165
  %245 = call i32 @bcmp(ptr noundef nonnull dereferenceable(6) %16, ptr noundef nonnull dereferenceable(6) @.str.37, i64 6)
  %246 = icmp eq i32 %245, 0
  br i1 %246, label %247, label %285

247:                                              ; preds = %244
  %248 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.476, ptr noundef nonnull %16) #44
  %249 = icmp eq i32 %248, 1
  br i1 %249, label %257, label %250

250:                                              ; preds = %247
  %.lcssa146 = phi i32 [ %18, %247 ]
  %251 = load ptr, ptr @fpo, align 8, !tbaa !7
  %252 = call i64 @fwrite(ptr nonnull @.str.30.499, i64 36, i64 1, ptr %251)
  %253 = load ptr, ptr @fpo, align 8, !tbaa !7
  %254 = call i64 @fwrite(ptr nonnull @.str.16.486, i64 17, i64 1, ptr %253)
  %255 = load ptr, ptr @fpo, align 8, !tbaa !7
  %256 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %255, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa146) #43
  call void @exit(i32 noundef 0) #49
  unreachable

257:                                              ; preds = %247
  %258 = call i32 @bcmp(ptr noundef nonnull dereferenceable(5) %16, ptr noundef nonnull dereferenceable(5) @.str.8.479, i64 5)
  %259 = icmp eq i32 %258, 0
  br i1 %259, label %267, label %260

260:                                              ; preds = %257
  %.lcssa147 = phi i32 [ %18, %257 ]
  %261 = load ptr, ptr @fpo, align 8, !tbaa !7
  %262 = call i64 @fwrite(ptr nonnull @.str.30.499, i64 36, i64 1, ptr %261)
  %263 = load ptr, ptr @fpo, align 8, !tbaa !7
  %264 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %263, ptr noundef nonnull @.str.31.500, ptr noundef nonnull %16) #43
  %265 = load ptr, ptr @fpo, align 8, !tbaa !7
  %266 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %265, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa147) #43
  call void @exit(i32 noundef 0) #49
  unreachable

267:                                              ; preds = %257
  %268 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.476, ptr noundef nonnull %16) #44
  %269 = icmp eq i32 %268, 1
  br i1 %269, label %277, label %270

270:                                              ; preds = %267
  %.lcssa148 = phi i32 [ %18, %267 ]
  %271 = load ptr, ptr @fpo, align 8, !tbaa !7
  %272 = call i64 @fwrite(ptr nonnull @.str.32.501, i64 31, i64 1, ptr %271)
  %273 = load ptr, ptr @fpo, align 8, !tbaa !7
  %274 = call i64 @fwrite(ptr nonnull @.str.16.486, i64 17, i64 1, ptr %273)
  %275 = load ptr, ptr @fpo, align 8, !tbaa !7
  %276 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %275, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa148) #43
  call void @exit(i32 noundef 0) #49
  unreachable

277:                                              ; preds = %267
  %278 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.17.487, ptr noundef nonnull %4, ptr noundef nonnull %5) #44
  %279 = icmp eq i32 %278, 2
  br i1 %279, label %766, label %280

280:                                              ; preds = %277
  %.lcssa149 = phi i32 [ %18, %277 ]
  %281 = load ptr, ptr @fpo, align 8, !tbaa !7
  %282 = call i64 @fwrite(ptr nonnull @.str.36.504, i64 38, i64 1, ptr %281)
  %283 = load ptr, ptr @fpo, align 8, !tbaa !7
  %284 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %283, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa149) #43
  call void @exit(i32 noundef 0) #49
  unreachable

285:                                              ; preds = %244
  %286 = call i32 @bcmp(ptr noundef nonnull dereferenceable(9) %16, ptr noundef nonnull dereferenceable(9) @.str.38, i64 9)
  %287 = icmp eq i32 %286, 0
  br i1 %287, label %288, label %465

288:                                              ; preds = %285
  %289 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.2.473, ptr noundef nonnull %10) #44
  %290 = icmp eq i32 %289, 1
  br i1 %290, label %296, label %291

291:                                              ; preds = %288
  %.lcssa128 = phi i32 [ %18, %288 ]
  %292 = load ptr, ptr @fpo, align 8, !tbaa !7
  %293 = call i64 @fwrite(ptr nonnull @.str.39, i64 29, i64 1, ptr %292)
  %294 = load ptr, ptr @fpo, align 8, !tbaa !7
  %295 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %294, ptr noundef nonnull @.str.9.480, i32 noundef %.lcssa128) #43
  call void @exit(i32 noundef 0) #49
  unreachable

296:                                              ; preds = %288
  %297 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.476, ptr noundef nonnull %16) #44
  %298 = icmp eq i32 %297, 1
  br i1 %298, label %304, label %299

299:                                              ; preds = %296
  %.lcssa129 = phi i32 [ %18, %296 ]
  %300 = load ptr, ptr @fpo, align 8, !tbaa !7
  %301 = call i64 @fwrite(ptr nonnull @.str.6.477, i64 30, i64 1, ptr %300)
  %302 = load ptr, ptr @fpo, align 8, !tbaa !7
  %303 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %302, ptr noundef nonnull @.str.9.480, i32 noundef %.lcssa129) #43
  call void @exit(i32 noundef 0) #49
  unreachable

304:                                              ; preds = %296
  %305 = call i32 @bcmp(ptr noundef nonnull dereferenceable(5) %16, ptr noundef nonnull dereferenceable(5) @.str.8.479, i64 5)
  %306 = icmp eq i32 %305, 0
  br i1 %306, label %312, label %307

307:                                              ; preds = %304
  %.lcssa130 = phi i32 [ %18, %304 ]
  %308 = load ptr, ptr @fpo, align 8, !tbaa !7
  %309 = call i64 @fwrite(ptr nonnull @.str.6.477, i64 30, i64 1, ptr %308)
  %310 = load ptr, ptr @fpo, align 8, !tbaa !7
  %311 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %310, ptr noundef nonnull @.str.9.480, i32 noundef %.lcssa130) #43
  call void @exit(i32 noundef 0) #49
  unreachable

312:                                              ; preds = %304
  %313 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.476, ptr noundef nonnull %16) #44
  %314 = icmp eq i32 %313, 1
  br i1 %314, label %320, label %315

315:                                              ; preds = %312
  %.lcssa131 = phi i32 [ %18, %312 ]
  %316 = load ptr, ptr @fpo, align 8, !tbaa !7
  %317 = call i64 @fwrite(ptr nonnull @.str.10.481, i64 43, i64 1, ptr %316)
  %318 = load ptr, ptr @fpo, align 8, !tbaa !7
  %319 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %318, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa131) #43
  call void @exit(i32 noundef 0) #49
  unreachable

320:                                              ; preds = %312
  %321 = add nsw i32 %18, 1
  %322 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.11.482, ptr noundef nonnull %11) #44
  %323 = icmp eq i32 %322, 1
  br i1 %323, label %329, label %324

324:                                              ; preds = %320
  %.lcssa12 = phi i32 [ %321, %320 ]
  %325 = load ptr, ptr @fpo, align 8, !tbaa !7
  %326 = call i64 @fwrite(ptr nonnull @.str.12.483, i64 41, i64 1, ptr %325)
  %327 = load ptr, ptr @fpo, align 8, !tbaa !7
  %328 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %327, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa12) #43
  call void @exit(i32 noundef 0) #49
  unreachable

329:                                              ; preds = %320
  %330 = load i32, ptr %11, align 4, !tbaa !17
  %331 = icmp slt i32 %330, 4
  br i1 %331, label %332, label %337

332:                                              ; preds = %329
  %.lcssa13 = phi i32 [ %321, %329 ]
  %333 = load ptr, ptr @fpo, align 8, !tbaa !7
  %334 = call i64 @fwrite(ptr nonnull @.str.13.484, i64 34, i64 1, ptr %333)
  %335 = load ptr, ptr @fpo, align 8, !tbaa !7
  %336 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %335, ptr noundef nonnull @.str.7.478, i32 noundef %.lcssa13) #43
  call void @exit(i32 noundef 0) #49
  unreachable

337:                                              ; preds = %329
  %338 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.471, ptr noundef nonnull %16) #44
  %339 = load i64, ptr %16, align 16
  %340 = icmp eq i64 %339, 32495402291982179
  br i1 %340, label %341, label %344

341:                                              ; preds = %337
  %342 = load i32, ptr %11, align 4, !tbaa !17
  %343 = icmp slt i32 %342, 1
  br i1 %343, label %364, label %351

344:                                              ; preds = %337
  %.lcssa14 = phi i32 [ %321, %337 ]
  %345 = load ptr, ptr @fpo, align 8, !tbaa !7
  %346 = call i64 @fwrite(ptr nonnull @.str.15.485, i64 31, i64 1, ptr %345)
  %347 = load ptr, ptr @fpo, align 8, !tbaa !7
  %348 = call i64 @fwrite(ptr nonnull @.str.16.486, i64 17, i64 1, ptr %347)
  %349 = load ptr, ptr @fpo, align 8, !tbaa !7
  %350 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %349, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa14) #43
  call void @exit(i32 noundef 0) #49
  unreachable

351:                                              ; preds = %360, %341
  %352 = phi i32 [ %361, %360 ], [ 1, %341 ]
  %353 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.17.487, ptr noundef nonnull %12, ptr noundef nonnull %13) #44
  %354 = icmp eq i32 %353, 2
  br i1 %354, label %360, label %355

355:                                              ; preds = %351
  %.lcssa15 = phi i32 [ %321, %351 ]
  %356 = load ptr, ptr @fpo, align 8, !tbaa !7
  %357 = call i64 @fwrite(ptr nonnull @.str.18.488, i64 35, i64 1, ptr %356)
  %358 = load ptr, ptr @fpo, align 8, !tbaa !7
  %359 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %358, ptr noundef nonnull @.str.9.480, i32 noundef %.lcssa15) #43
  call void @exit(i32 noundef 0) #49
  unreachable

360:                                              ; preds = %351
  %361 = add nuw nsw i32 %352, 1
  %362 = load i32, ptr %11, align 4, !tbaa !17
  %363 = icmp slt i32 %352, %362
  br i1 %363, label %351, label %364, !llvm.loop !673

364:                                              ; preds = %360, %341
  %365 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.471, ptr noundef nonnull %16) #44
  %366 = call i32 @bcmp(ptr noundef nonnull dereferenceable(6) %16, ptr noundef nonnull dereferenceable(6) @.str.40, i64 6)
  %367 = icmp eq i32 %366, 0
  br i1 %367, label %368, label %376

368:                                              ; preds = %364
  %369 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.41, ptr noundef nonnull %15) #44
  %370 = icmp eq i32 %369, 1
  br i1 %370, label %383, label %371

371:                                              ; preds = %368
  %.lcssa17 = phi i32 [ %321, %368 ]
  %372 = load ptr, ptr @fpo, align 8, !tbaa !7
  %373 = call i64 @fwrite(ptr nonnull @.str.42, i64 39, i64 1, ptr %372)
  %374 = load ptr, ptr @fpo, align 8, !tbaa !7
  %375 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %374, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa17) #43
  call void @exit(i32 noundef 0) #49
  unreachable

376:                                              ; preds = %364
  %.lcssa16 = phi i32 [ %321, %364 ]
  %377 = load ptr, ptr @fpo, align 8, !tbaa !7
  %378 = call i64 @fwrite(ptr nonnull @.str.43, i64 29, i64 1, ptr %377)
  %379 = load ptr, ptr @fpo, align 8, !tbaa !7
  %380 = call i64 @fwrite(ptr nonnull @.str.16.486, i64 17, i64 1, ptr %379)
  %381 = load ptr, ptr @fpo, align 8, !tbaa !7
  %382 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %381, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa16) #43
  call void @exit(i32 noundef 0) #49
  unreachable

383:                                              ; preds = %368
  %384 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.471, ptr noundef nonnull %16) #44
  %385 = call i32 @bcmp(ptr noundef nonnull dereferenceable(6) %16, ptr noundef nonnull dereferenceable(6) @.str.44, i64 6)
  %386 = icmp eq i32 %385, 0
  br i1 %386, label %387, label %395

387:                                              ; preds = %383
  %388 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.41, ptr noundef nonnull %14) #44
  %389 = icmp eq i32 %388, 1
  br i1 %389, label %402, label %390

390:                                              ; preds = %387
  %.lcssa19 = phi i32 [ %321, %387 ]
  %391 = load ptr, ptr @fpo, align 8, !tbaa !7
  %392 = call i64 @fwrite(ptr nonnull @.str.45, i64 39, i64 1, ptr %391)
  %393 = load ptr, ptr @fpo, align 8, !tbaa !7
  %394 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %393, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa19) #43
  call void @exit(i32 noundef 0) #49
  unreachable

395:                                              ; preds = %383
  %.lcssa18 = phi i32 [ %321, %383 ]
  %396 = load ptr, ptr @fpo, align 8, !tbaa !7
  %397 = call i64 @fwrite(ptr nonnull @.str.46, i64 29, i64 1, ptr %396)
  %398 = load ptr, ptr @fpo, align 8, !tbaa !7
  %399 = call i64 @fwrite(ptr nonnull @.str.16.486, i64 17, i64 1, ptr %398)
  %400 = load ptr, ptr @fpo, align 8, !tbaa !7
  %401 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %400, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa18) #43
  call void @exit(i32 noundef 0) #49
  unreachable

402:                                              ; preds = %387
  %403 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.471, ptr noundef nonnull %16) #44
  %404 = call i32 @bcmp(ptr noundef nonnull dereferenceable(6) %16, ptr noundef nonnull dereferenceable(6) @.str.19.489, i64 6)
  %405 = icmp eq i32 %404, 0
  br i1 %405, label %413, label %406

406:                                              ; preds = %402
  %.lcssa20 = phi i32 [ %321, %402 ]
  %407 = load ptr, ptr @fpo, align 8, !tbaa !7
  %408 = call i64 @fwrite(ptr nonnull @.str.20.490, i64 29, i64 1, ptr %407)
  %409 = load ptr, ptr @fpo, align 8, !tbaa !7
  %410 = call i64 @fwrite(ptr nonnull @.str.16.486, i64 17, i64 1, ptr %409)
  %411 = load ptr, ptr @fpo, align 8, !tbaa !7
  %412 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %411, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa20) #43
  call void @exit(i32 noundef 0) #49
  unreachable

413:                                              ; preds = %402
  %414 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.11.482, ptr noundef nonnull %6) #44
  %415 = icmp eq i32 %414, 1
  br i1 %415, label %421, label %416

416:                                              ; preds = %413
  %.lcssa21 = phi i32 [ %321, %413 ]
  %417 = load ptr, ptr @fpo, align 8, !tbaa !7
  %418 = call i64 @fwrite(ptr nonnull @.str.21.491, i64 39, i64 1, ptr %417)
  %419 = load ptr, ptr @fpo, align 8, !tbaa !7
  %420 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %419, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa21) #43
  call void @exit(i32 noundef 0) #49
  unreachable

421:                                              ; preds = %413
  %422 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.11.482, ptr noundef nonnull %3) #44
  %423 = icmp eq i32 %422, 1
  br i1 %423, label %429, label %424

424:                                              ; preds = %421
  %.lcssa22 = phi i32 [ %321, %421 ]
  %425 = load ptr, ptr @fpo, align 8, !tbaa !7
  %426 = call i64 @fwrite(ptr nonnull @.str.22.492, i64 46, i64 1, ptr %425)
  %427 = load ptr, ptr @fpo, align 8, !tbaa !7
  %428 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %427, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa22) #43
  call void @exit(i32 noundef 0) #49
  unreachable

429:                                              ; preds = %421
  %430 = load i32, ptr %3, align 4
  %431 = add i32 %430, -9
  %432 = icmp ult i32 %431, -8
  br i1 %432, label %433, label %438

433:                                              ; preds = %429
  %.lcssa23 = phi i32 [ %321, %429 ]
  %434 = load ptr, ptr @fpo, align 8, !tbaa !7
  %435 = call i64 @fwrite(ptr nonnull @.str.23.493, i64 43, i64 1, ptr %434)
  %436 = load ptr, ptr @fpo, align 8, !tbaa !7
  %437 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %436, ptr noundef nonnull @.str.24.494, i32 noundef %.lcssa23) #43
  call void @exit(i32 noundef 0) #49
  unreachable

438:                                              ; preds = %429
  %439 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.471, ptr noundef nonnull %16) #44
  %440 = call i32 @bcmp(ptr noundef nonnull dereferenceable(13) %16, ptr noundef nonnull dereferenceable(13) @.str.25.495, i64 13)
  %441 = icmp eq i32 %440, 0
  br i1 %441, label %442, label %445

442:                                              ; preds = %438
  %443 = load i32, ptr %3, align 4, !tbaa !17
  %444 = icmp slt i32 %443, 1
  br i1 %444, label %766, label %456

445:                                              ; preds = %438
  %.lcssa24 = phi i32 [ %321, %438 ]
  %446 = load ptr, ptr @fpo, align 8, !tbaa !7
  %447 = call i64 @fwrite(ptr nonnull @.str.26.496, i64 36, i64 1, ptr %446)
  %448 = load ptr, ptr @fpo, align 8, !tbaa !7
  %449 = call i64 @fwrite(ptr nonnull @.str.16.486, i64 17, i64 1, ptr %448)
  %450 = load ptr, ptr @fpo, align 8, !tbaa !7
  %451 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %450, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa24) #43
  call void @exit(i32 noundef 0) #49
  unreachable

452:                                              ; preds = %456
  %453 = add nuw nsw i32 %457, 1
  %454 = load i32, ptr %3, align 4, !tbaa !17
  %455 = icmp slt i32 %457, %454
  br i1 %455, label %456, label %766, !llvm.loop !674

456:                                              ; preds = %452, %442
  %457 = phi i32 [ %453, %452 ], [ 1, %442 ]
  %458 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.11.482, ptr noundef nonnull %12) #44
  %459 = icmp eq i32 %458, 1
  br i1 %459, label %452, label %460

460:                                              ; preds = %456
  %.lcssa25 = phi i32 [ %321, %456 ]
  %461 = load ptr, ptr @fpo, align 8, !tbaa !7
  %462 = call i64 @fwrite(ptr nonnull @.str.27.497, i64 38, i64 1, ptr %461)
  %463 = load ptr, ptr @fpo, align 8, !tbaa !7
  %464 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %463, ptr noundef nonnull @.str.9.480, i32 noundef %.lcssa25) #43
  call void @exit(i32 noundef 0) #49
  unreachable

465:                                              ; preds = %285
  %466 = call i32 @bcmp(ptr noundef nonnull dereferenceable(9) %16, ptr noundef nonnull dereferenceable(9) @.str.47, i64 9)
  %467 = icmp eq i32 %466, 0
  br i1 %467, label %471, label %468

468:                                              ; preds = %465
  %469 = call i32 @bcmp(ptr noundef nonnull dereferenceable(6) %16, ptr noundef nonnull dereferenceable(6) @.str.48, i64 6)
  %470 = icmp eq i32 %469, 0
  br i1 %470, label %471, label %590

471:                                              ; preds = %468, %465
  %472 = icmp eq i32 %20, 2
  br i1 %472, label %480, label %473

473:                                              ; preds = %471
  %.lcssa117 = phi i32 [ %18, %471 ]
  %474 = load ptr, ptr @fpo, align 8, !tbaa !7
  %475 = call i64 @fwrite(ptr nonnull @.str.49.505, i64 42, i64 1, ptr %474)
  %476 = load ptr, ptr @fpo, align 8, !tbaa !7
  %477 = call i64 @fwrite(ptr nonnull @.str.16.486, i64 17, i64 1, ptr %476)
  %478 = load ptr, ptr @fpo, align 8, !tbaa !7
  %479 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %478, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa117) #43
  call void @exit(i32 noundef 0) #49
  unreachable

480:                                              ; preds = %471
  %481 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.11.482, ptr noundef nonnull %7) #44
  %482 = icmp eq i32 %481, 1
  br i1 %482, label %483, label %486

483:                                              ; preds = %480
  %484 = load i32, ptr %7, align 4, !tbaa !17
  %485 = icmp slt i32 %484, 1
  br i1 %485, label %571, label %495

486:                                              ; preds = %480
  %.lcssa118 = phi i32 [ %18, %480 ]
  %487 = load ptr, ptr @fpo, align 8, !tbaa !7
  %488 = call i64 @fwrite(ptr nonnull @.str.50, i64 41, i64 1, ptr %487)
  %489 = load ptr, ptr @fpo, align 8, !tbaa !7
  %490 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %489, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa118) #43
  call void @exit(i32 noundef 0) #49
  unreachable

491:                                              ; preds = %554
  %492 = add nuw nsw i32 %496, 1
  %493 = load i32, ptr %7, align 4, !tbaa !17
  %494 = icmp slt i32 %496, %493
  br i1 %494, label %495, label %571, !llvm.loop !675

495:                                              ; preds = %491, %483
  %496 = phi i32 [ %492, %491 ], [ 1, %483 ]
  %497 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.471, ptr noundef nonnull %16) #44
  %498 = load i32, ptr %16, align 16
  %499 = icmp eq i32 %498, 7235952
  br i1 %499, label %500, label %564

500:                                              ; preds = %495
  %501 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.476, ptr noundef nonnull %16) #44
  %502 = icmp eq i32 %501, 1
  br i1 %502, label %510, label %503

503:                                              ; preds = %500
  %.lcssa120 = phi i32 [ %18, %500 ]
  %504 = load ptr, ptr @fpo, align 8, !tbaa !7
  %505 = call i64 @fwrite(ptr nonnull @.str.51, i64 29, i64 1, ptr %504)
  %506 = load ptr, ptr @fpo, align 8, !tbaa !7
  %507 = call i64 @fwrite(ptr nonnull @.str.52, i64 22, i64 1, ptr %506)
  %508 = load ptr, ptr @fpo, align 8, !tbaa !7
  %509 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %508, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa120) #43
  call void @exit(i32 noundef 0) #49
  unreachable

510:                                              ; preds = %500
  %511 = call i32 @bcmp(ptr noundef nonnull dereferenceable(5) %16, ptr noundef nonnull dereferenceable(5) @.str.8.479, i64 5)
  %512 = icmp eq i32 %511, 0
  br i1 %512, label %522, label %513

513:                                              ; preds = %510
  %.lcssa121 = phi i32 [ %18, %510 ]
  %514 = load ptr, ptr @fpo, align 8, !tbaa !7
  %515 = call i64 @fwrite(ptr nonnull @.str.53, i64 31, i64 1, ptr %514)
  %516 = load ptr, ptr @fpo, align 8, !tbaa !7
  %517 = call i64 @fwrite(ptr nonnull @.str.54, i64 22, i64 1, ptr %516)
  %518 = load ptr, ptr @fpo, align 8, !tbaa !7
  %519 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %518, ptr noundef nonnull @.str.55.506, ptr noundef nonnull %16) #43
  %520 = load ptr, ptr @fpo, align 8, !tbaa !7
  %521 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %520, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa121) #43
  call void @exit(i32 noundef 0) #49
  unreachable

522:                                              ; preds = %510
  %523 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.476, ptr noundef nonnull %16) #44
  %524 = icmp eq i32 %523, 1
  br i1 %524, label %532, label %525

525:                                              ; preds = %522
  %.lcssa122 = phi i32 [ %18, %522 ]
  %526 = load ptr, ptr @fpo, align 8, !tbaa !7
  %527 = call i64 @fwrite(ptr nonnull @.str.32.501, i64 31, i64 1, ptr %526)
  %528 = load ptr, ptr @fpo, align 8, !tbaa !7
  %529 = call i64 @fwrite(ptr nonnull @.str.16.486, i64 17, i64 1, ptr %528)
  %530 = load ptr, ptr @fpo, align 8, !tbaa !7
  %531 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %530, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa122) #43
  call void @exit(i32 noundef 0) #49
  unreachable

532:                                              ; preds = %522
  %533 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.476, ptr noundef nonnull %16) #44
  %534 = icmp eq i32 %533, 1
  br i1 %534, label %542, label %535

535:                                              ; preds = %532
  %.lcssa123 = phi i32 [ %18, %532 ]
  %536 = load ptr, ptr @fpo, align 8, !tbaa !7
  %537 = call i64 @fwrite(ptr nonnull @.str.53, i64 31, i64 1, ptr %536)
  %538 = load ptr, ptr @fpo, align 8, !tbaa !7
  %539 = call i64 @fwrite(ptr nonnull @.str.56, i64 24, i64 1, ptr %538)
  %540 = load ptr, ptr @fpo, align 8, !tbaa !7
  %541 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %540, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa123) #43
  call void @exit(i32 noundef 0) #49
  unreachable

542:                                              ; preds = %532
  %543 = call i32 @bcmp(ptr noundef nonnull dereferenceable(7) %16, ptr noundef nonnull dereferenceable(7) @.str.34.503, i64 7)
  %544 = icmp eq i32 %543, 0
  br i1 %544, label %554, label %545

545:                                              ; preds = %542
  %.lcssa124 = phi i32 [ %18, %542 ]
  %546 = load ptr, ptr @fpo, align 8, !tbaa !7
  %547 = call i64 @fwrite(ptr nonnull @.str.53, i64 31, i64 1, ptr %546)
  %548 = load ptr, ptr @fpo, align 8, !tbaa !7
  %549 = call i64 @fwrite(ptr nonnull @.str.57, i64 25, i64 1, ptr %548)
  %550 = load ptr, ptr @fpo, align 8, !tbaa !7
  %551 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %550, ptr noundef nonnull @.str.55.506, ptr noundef nonnull %16) #43
  %552 = load ptr, ptr @fpo, align 8, !tbaa !7
  %553 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %552, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa124) #43
  call void @exit(i32 noundef 0) #49
  unreachable

554:                                              ; preds = %542
  %555 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.476, ptr noundef nonnull %16) #44
  %556 = icmp eq i32 %555, 1
  br i1 %556, label %491, label %557

557:                                              ; preds = %554
  %.lcssa125 = phi i32 [ %18, %554 ]
  %558 = load ptr, ptr @fpo, align 8, !tbaa !7
  %559 = call i64 @fwrite(ptr nonnull @.str.58, i64 29, i64 1, ptr %558)
  %560 = load ptr, ptr @fpo, align 8, !tbaa !7
  %561 = call i64 @fwrite(ptr nonnull @.str.52, i64 22, i64 1, ptr %560)
  %562 = load ptr, ptr @fpo, align 8, !tbaa !7
  %563 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %562, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa125) #43
  call void @exit(i32 noundef 0) #49
  unreachable

564:                                              ; preds = %495
  %.lcssa119 = phi i32 [ %18, %495 ]
  %565 = load ptr, ptr @fpo, align 8, !tbaa !7
  %566 = call i64 @fwrite(ptr nonnull @.str.59, i64 27, i64 1, ptr %565)
  %567 = load ptr, ptr @fpo, align 8, !tbaa !7
  %568 = call i64 @fwrite(ptr nonnull @.str.16.486, i64 17, i64 1, ptr %567)
  %569 = load ptr, ptr @fpo, align 8, !tbaa !7
  %570 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %569, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa119) #43
  call void @exit(i32 noundef 0) #49
  unreachable

571:                                              ; preds = %491, %483
  %572 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.471, ptr noundef nonnull %16) #44
  %573 = call i32 @bcmp(ptr noundef nonnull dereferenceable(17) %16, ptr noundef nonnull dereferenceable(17) @.str.60, i64 17)
  %574 = icmp eq i32 %573, 0
  br i1 %574, label %582, label %575

575:                                              ; preds = %571
  %.lcssa126 = phi i32 [ %18, %571 ]
  %576 = load ptr, ptr @fpo, align 8, !tbaa !7
  %577 = call i64 @fwrite(ptr nonnull @.str.61, i64 40, i64 1, ptr %576)
  %578 = load ptr, ptr @fpo, align 8, !tbaa !7
  %579 = call i64 @fwrite(ptr nonnull @.str.16.486, i64 17, i64 1, ptr %578)
  %580 = load ptr, ptr @fpo, align 8, !tbaa !7
  %581 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %580, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa126) #43
  call void @exit(i32 noundef 0) #49
  unreachable

582:                                              ; preds = %571
  %583 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.17.487, ptr noundef nonnull %8, ptr noundef nonnull %9) #44
  %584 = icmp eq i32 %583, 2
  br i1 %584, label %766, label %585

585:                                              ; preds = %582
  %.lcssa127 = phi i32 [ %18, %582 ]
  %586 = load ptr, ptr @fpo, align 8, !tbaa !7
  %587 = call i64 @fwrite(ptr nonnull @.str.62, i64 40, i64 1, ptr %586)
  %588 = load ptr, ptr @fpo, align 8, !tbaa !7
  %589 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %588, ptr noundef nonnull @.str.63.507, i32 noundef %.lcssa127) #43
  call void @exit(i32 noundef 0) #49
  unreachable

590:                                              ; preds = %468
  %591 = icmp eq i32 %166, 6578544
  br i1 %591, label %592, label %752

592:                                              ; preds = %590
  %593 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.2.473, ptr noundef nonnull %10) #44
  %594 = icmp eq i32 %593, 1
  br i1 %594, label %600, label %595

595:                                              ; preds = %592
  %.lcssa101 = phi i32 [ %18, %592 ]
  %596 = load ptr, ptr @fpo, align 8, !tbaa !7
  %597 = call i64 @fwrite(ptr nonnull @.str.65, i64 39, i64 1, ptr %596)
  %598 = load ptr, ptr @fpo, align 8, !tbaa !7
  %599 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %598, ptr noundef nonnull @.str.66, i32 noundef %.lcssa101) #43
  call void @exit(i32 noundef 0) #49
  unreachable

600:                                              ; preds = %592
  %601 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.476, ptr noundef nonnull %16) #44
  %602 = icmp eq i32 %601, 1
  br i1 %602, label %608, label %603

603:                                              ; preds = %600
  %.lcssa102 = phi i32 [ %18, %600 ]
  %604 = load ptr, ptr @fpo, align 8, !tbaa !7
  %605 = call i64 @fwrite(ptr nonnull @.str.6.477, i64 30, i64 1, ptr %604)
  %606 = load ptr, ptr @fpo, align 8, !tbaa !7
  %607 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %606, ptr noundef nonnull @.str.7.478, i32 noundef %.lcssa102) #43
  call void @exit(i32 noundef 0) #49
  unreachable

608:                                              ; preds = %600
  %609 = call i32 @bcmp(ptr noundef nonnull dereferenceable(5) %16, ptr noundef nonnull dereferenceable(5) @.str.8.479, i64 5)
  %610 = icmp eq i32 %609, 0
  br i1 %610, label %616, label %611

611:                                              ; preds = %608
  %.lcssa103 = phi i32 [ %18, %608 ]
  %612 = load ptr, ptr @fpo, align 8, !tbaa !7
  %613 = call i64 @fwrite(ptr nonnull @.str.6.477, i64 30, i64 1, ptr %612)
  %614 = load ptr, ptr @fpo, align 8, !tbaa !7
  %615 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %614, ptr noundef nonnull @.str.9.480, i32 noundef %.lcssa103) #43
  call void @exit(i32 noundef 0) #49
  unreachable

616:                                              ; preds = %608
  %617 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.476, ptr noundef nonnull %16) #44
  %618 = icmp eq i32 %617, 1
  br i1 %618, label %624, label %619

619:                                              ; preds = %616
  %.lcssa104 = phi i32 [ %18, %616 ]
  %620 = load ptr, ptr @fpo, align 8, !tbaa !7
  %621 = call i64 @fwrite(ptr nonnull @.str.10.481, i64 43, i64 1, ptr %620)
  %622 = load ptr, ptr @fpo, align 8, !tbaa !7
  %623 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %622, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa104) #43
  call void @exit(i32 noundef 0) #49
  unreachable

624:                                              ; preds = %616
  %625 = add nsw i32 %19, 1
  %626 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.11.482, ptr noundef nonnull %11) #44
  %627 = icmp eq i32 %626, 1
  br i1 %627, label %633, label %628

628:                                              ; preds = %624
  %.lcssa105 = phi i32 [ %18, %624 ]
  %629 = load ptr, ptr @fpo, align 8, !tbaa !7
  %630 = call i64 @fwrite(ptr nonnull @.str.12.483, i64 41, i64 1, ptr %629)
  %631 = load ptr, ptr @fpo, align 8, !tbaa !7
  %632 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %631, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa105) #43
  call void @exit(i32 noundef 0) #49
  unreachable

633:                                              ; preds = %624
  %634 = load i32, ptr %11, align 4, !tbaa !17
  %635 = icmp slt i32 %634, 4
  br i1 %635, label %636, label %641

636:                                              ; preds = %633
  %.lcssa106 = phi i32 [ %18, %633 ]
  %637 = load ptr, ptr @fpo, align 8, !tbaa !7
  %638 = call i64 @fwrite(ptr nonnull @.str.13.484, i64 34, i64 1, ptr %637)
  %639 = load ptr, ptr @fpo, align 8, !tbaa !7
  %640 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %639, ptr noundef nonnull @.str.7.478, i32 noundef %.lcssa106) #43
  call void @exit(i32 noundef 0) #49
  unreachable

641:                                              ; preds = %633
  %642 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.471, ptr noundef nonnull %16) #44
  %643 = load i64, ptr %16, align 16
  %644 = icmp eq i64 %643, 32495402291982179
  br i1 %644, label %645, label %648

645:                                              ; preds = %641
  %646 = load i32, ptr %11, align 4, !tbaa !17
  %647 = icmp slt i32 %646, 1
  br i1 %647, label %668, label %655

648:                                              ; preds = %641
  %.lcssa107 = phi i32 [ %18, %641 ]
  %649 = load ptr, ptr @fpo, align 8, !tbaa !7
  %650 = call i64 @fwrite(ptr nonnull @.str.15.485, i64 31, i64 1, ptr %649)
  %651 = load ptr, ptr @fpo, align 8, !tbaa !7
  %652 = call i64 @fwrite(ptr nonnull @.str.16.486, i64 17, i64 1, ptr %651)
  %653 = load ptr, ptr @fpo, align 8, !tbaa !7
  %654 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %653, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa107) #43
  call void @exit(i32 noundef 0) #49
  unreachable

655:                                              ; preds = %664, %645
  %656 = phi i32 [ %665, %664 ], [ 1, %645 ]
  %657 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.17.487, ptr noundef nonnull %12, ptr noundef nonnull %13) #44
  %658 = icmp eq i32 %657, 2
  br i1 %658, label %664, label %659

659:                                              ; preds = %655
  %.lcssa108 = phi i32 [ %18, %655 ]
  %660 = load ptr, ptr @fpo, align 8, !tbaa !7
  %661 = call i64 @fwrite(ptr nonnull @.str.18.488, i64 35, i64 1, ptr %660)
  %662 = load ptr, ptr @fpo, align 8, !tbaa !7
  %663 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %662, ptr noundef nonnull @.str.9.480, i32 noundef %.lcssa108) #43
  call void @exit(i32 noundef 0) #49
  unreachable

664:                                              ; preds = %655
  %665 = add nuw nsw i32 %656, 1
  %666 = load i32, ptr %11, align 4, !tbaa !17
  %667 = icmp slt i32 %656, %666
  br i1 %667, label %655, label %668, !llvm.loop !676

668:                                              ; preds = %664, %645
  %669 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.471, ptr noundef nonnull %16) #44
  %670 = load i64, ptr %16, align 16
  %671 = icmp eq i64 %670, 28539376718078320
  br i1 %671, label %672, label %682

672:                                              ; preds = %668
  %673 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.471, ptr noundef nonnull %16) #44
  %674 = icmp eq i32 %673, 1
  br i1 %674, label %689, label %675

675:                                              ; preds = %672
  %.lcssa5 = phi i32 [ %625, %672 ]
  %676 = load ptr, ptr @fpo, align 8, !tbaa !7
  %677 = call i64 @fwrite(ptr nonnull @.str.68, i64 24, i64 1, ptr %676)
  %678 = load ptr, ptr @fpo, align 8, !tbaa !7
  %679 = call i64 @fwrite(ptr nonnull @.str.16.486, i64 17, i64 1, ptr %678)
  %680 = load ptr, ptr @fpo, align 8, !tbaa !7
  %681 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %680, ptr noundef nonnull @.str.69, i32 noundef %.lcssa5) #43
  call void @exit(i32 noundef 0) #49
  unreachable

682:                                              ; preds = %668
  %.lcssa4 = phi i32 [ %625, %668 ]
  %683 = load ptr, ptr @fpo, align 8, !tbaa !7
  %684 = call i64 @fwrite(ptr nonnull @.str.70, i64 31, i64 1, ptr %683)
  %685 = load ptr, ptr @fpo, align 8, !tbaa !7
  %686 = call i64 @fwrite(ptr nonnull @.str.71, i64 10, i64 1, ptr %685)
  %687 = load ptr, ptr @fpo, align 8, !tbaa !7
  %688 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %687, ptr noundef nonnull @.str.69, i32 noundef %.lcssa4) #43
  call void @exit(i32 noundef 0) #49
  unreachable

689:                                              ; preds = %672
  %690 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.471, ptr noundef nonnull %16) #44
  %691 = call i32 @bcmp(ptr noundef nonnull dereferenceable(6) %16, ptr noundef nonnull dereferenceable(6) @.str.19.489, i64 6)
  %692 = icmp eq i32 %691, 0
  br i1 %692, label %700, label %693

693:                                              ; preds = %689
  %.lcssa111 = phi i32 [ %18, %689 ]
  %694 = load ptr, ptr @fpo, align 8, !tbaa !7
  %695 = call i64 @fwrite(ptr nonnull @.str.20.490, i64 29, i64 1, ptr %694)
  %696 = load ptr, ptr @fpo, align 8, !tbaa !7
  %697 = call i64 @fwrite(ptr nonnull @.str.16.486, i64 17, i64 1, ptr %696)
  %698 = load ptr, ptr @fpo, align 8, !tbaa !7
  %699 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %698, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa111) #43
  call void @exit(i32 noundef 0) #49
  unreachable

700:                                              ; preds = %689
  %701 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.11.482, ptr noundef nonnull %6) #44
  %702 = icmp eq i32 %701, 1
  br i1 %702, label %708, label %703

703:                                              ; preds = %700
  %.lcssa112 = phi i32 [ %18, %700 ]
  %704 = load ptr, ptr @fpo, align 8, !tbaa !7
  %705 = call i64 @fwrite(ptr nonnull @.str.21.491, i64 39, i64 1, ptr %704)
  %706 = load ptr, ptr @fpo, align 8, !tbaa !7
  %707 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %706, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa112) #43
  call void @exit(i32 noundef 0) #49
  unreachable

708:                                              ; preds = %700
  %709 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.11.482, ptr noundef nonnull %3) #44
  %710 = icmp eq i32 %709, 1
  br i1 %710, label %716, label %711

711:                                              ; preds = %708
  %.lcssa113 = phi i32 [ %18, %708 ]
  %712 = load ptr, ptr @fpo, align 8, !tbaa !7
  %713 = call i64 @fwrite(ptr nonnull @.str.22.492, i64 46, i64 1, ptr %712)
  %714 = load ptr, ptr @fpo, align 8, !tbaa !7
  %715 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %714, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa113) #43
  call void @exit(i32 noundef 0) #49
  unreachable

716:                                              ; preds = %708
  %717 = load i32, ptr %3, align 4
  %718 = add i32 %717, -9
  %719 = icmp ult i32 %718, -8
  br i1 %719, label %720, label %725

720:                                              ; preds = %716
  %.lcssa114 = phi i32 [ %18, %716 ]
  %721 = load ptr, ptr @fpo, align 8, !tbaa !7
  %722 = call i64 @fwrite(ptr nonnull @.str.23.493, i64 43, i64 1, ptr %721)
  %723 = load ptr, ptr @fpo, align 8, !tbaa !7
  %724 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %723, ptr noundef nonnull @.str.24.494, i32 noundef %.lcssa114) #43
  call void @exit(i32 noundef 0) #49
  unreachable

725:                                              ; preds = %716
  %726 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.471, ptr noundef nonnull %16) #44
  %727 = call i32 @bcmp(ptr noundef nonnull dereferenceable(13) %16, ptr noundef nonnull dereferenceable(13) @.str.25.495, i64 13)
  %728 = icmp eq i32 %727, 0
  br i1 %728, label %729, label %732

729:                                              ; preds = %725
  %730 = load i32, ptr %3, align 4, !tbaa !17
  %731 = icmp slt i32 %730, 1
  br i1 %731, label %766, label %743

732:                                              ; preds = %725
  %.lcssa115 = phi i32 [ %18, %725 ]
  %733 = load ptr, ptr @fpo, align 8, !tbaa !7
  %734 = call i64 @fwrite(ptr nonnull @.str.26.496, i64 36, i64 1, ptr %733)
  %735 = load ptr, ptr @fpo, align 8, !tbaa !7
  %736 = call i64 @fwrite(ptr nonnull @.str.16.486, i64 17, i64 1, ptr %735)
  %737 = load ptr, ptr @fpo, align 8, !tbaa !7
  %738 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %737, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa115) #43
  call void @exit(i32 noundef 0) #49
  unreachable

739:                                              ; preds = %743
  %740 = add nuw nsw i32 %744, 1
  %741 = load i32, ptr %3, align 4, !tbaa !17
  %742 = icmp slt i32 %744, %741
  br i1 %742, label %743, label %766, !llvm.loop !677

743:                                              ; preds = %739, %729
  %744 = phi i32 [ %740, %739 ], [ 1, %729 ]
  %745 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.11.482, ptr noundef nonnull %12) #44
  %746 = icmp eq i32 %745, 1
  br i1 %746, label %739, label %747

747:                                              ; preds = %743
  %.lcssa116 = phi i32 [ %18, %743 ]
  %748 = load ptr, ptr @fpo, align 8, !tbaa !7
  %749 = call i64 @fwrite(ptr nonnull @.str.27.497, i64 38, i64 1, ptr %748)
  %750 = load ptr, ptr @fpo, align 8, !tbaa !7
  %751 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %750, ptr noundef nonnull @.str.9.480, i32 noundef %.lcssa116) #43
  call void @exit(i32 noundef 0) #49
  unreachable

752:                                              ; preds = %590
  %753 = call i32 @bcmp(ptr noundef nonnull dereferenceable(10) %16, ptr noundef nonnull dereferenceable(10) @.str.72, i64 10)
  %754 = icmp eq i32 %753, 0
  br i1 %754, label %755, label %757

755:                                              ; preds = %752
  %756 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.11.482, ptr noundef nonnull %2) #44
  br label %766

757:                                              ; preds = %752
  %.lcssa100 = phi i32 [ %18, %752 ]
  %758 = load ptr, ptr @fpo, align 8, !tbaa !7
  %759 = call i64 @fwrite(ptr nonnull @.str.73, i64 25, i64 1, ptr %758)
  %760 = load ptr, ptr @fpo, align 8, !tbaa !7
  %761 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %760, ptr noundef nonnull @.str.471, ptr noundef nonnull %16) #43
  %762 = load ptr, ptr @fpo, align 8, !tbaa !7
  %763 = call i64 @fwrite(ptr nonnull @.str.16.486, i64 17, i64 1, ptr %762)
  %764 = load ptr, ptr @fpo, align 8, !tbaa !7
  %765 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %764, ptr noundef nonnull @.str.4.475, i32 noundef %.lcssa100) #43
  call void @exit(i32 noundef 0) #49
  unreachable

766:                                              ; preds = %755, %739, %729, %582, %452, %442, %277, %236, %152, %142
  %767 = phi i32 [ %18, %236 ], [ %18, %277 ], [ %18, %582 ], [ %18, %755 ], [ %59, %142 ], [ %321, %442 ], [ %18, %729 ], [ %59, %152 ], [ %321, %452 ], [ %18, %739 ]
  %768 = phi i32 [ %19, %236 ], [ %19, %277 ], [ %19, %582 ], [ %19, %755 ], [ %19, %142 ], [ %19, %442 ], [ %625, %729 ], [ %19, %152 ], [ %19, %452 ], [ %625, %739 ]
  %769 = phi i32 [ 4, %236 ], [ %20, %277 ], [ 2, %582 ], [ %20, %755 ], [ 4, %142 ], [ 2, %442 ], [ 4, %729 ], [ 4, %152 ], [ 2, %452 ], [ 4, %739 ]
  br label %17, !llvm.loop !678

770:                                              ; preds = %17
  %.lcssa99 = phi i32 [ %18, %17 ]
  %.lcssa26 = phi i32 [ %19, %17 ]
  store i32 %.lcssa99, ptr @numcells, align 4, !tbaa !17
  store i32 %.lcssa26, ptr @numpads, align 4, !tbaa !17
  call void @rewind(ptr noundef %0) #43
  %771 = load i32, ptr @numcells, align 4, !tbaa !17
  call void @makebins(i32 noundef %771) #44
  %772 = load i32, ptr @numcells, align 4, !tbaa !17
  %773 = load i32, ptr @numpads, align 4, !tbaa !17
  %774 = add i32 %773, %772
  %775 = add i32 %774, 5
  %776 = sext i32 %775 to i64
  %777 = shl nsw i64 %776, 3
  %778 = call noalias ptr @malloc(i64 noundef %777) #45
  store ptr %778, ptr @cellarray, align 8, !tbaa !7
  %779 = icmp slt i32 %774, -3
  br i1 %779, label %808, label %780

780:                                              ; preds = %770
  %781 = add i32 %774, 4
  %782 = call i32 @llvm.smax.i32(i32 %781, i32 1)
  %783 = add nuw i32 %782, 1
  %784 = zext i32 %783 to i64
  br label %785

785:                                              ; preds = %805, %780
  %786 = phi i64 [ 1, %780 ], [ %806, %805 ]
  %787 = call noalias dereferenceable_or_null(224) ptr @malloc(i64 noundef 224) #45
  %788 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %789 = getelementptr inbounds ptr, ptr %788, i64 %786
  store ptr %787, ptr %789, align 8, !tbaa !7
  %790 = getelementptr inbounds %struct.cellbox, ptr %787, i64 0, i32 2
  store i32 0, ptr %790, align 4, !tbaa !164
  %791 = getelementptr inbounds %struct.cellbox, ptr %787, i64 0, i32 3
  store i32 0, ptr %791, align 8, !tbaa !165
  %792 = getelementptr inbounds %struct.cellbox, ptr %787, i64 0, i32 5
  store i32 0, ptr %792, align 8, !tbaa !45
  %793 = getelementptr inbounds %struct.cellbox, ptr %787, i64 0, i32 6
  store i32 0, ptr %793, align 4, !tbaa !171
  %794 = getelementptr inbounds %struct.cellbox, ptr %787, i64 0, i32 8
  %795 = getelementptr inbounds %struct.cellbox, ptr %787, i64 0, i32 17
  store i32 0, ptr %795, align 8, !tbaa !227
  %796 = getelementptr inbounds %struct.cellbox, ptr %787, i64 0, i32 18
  store i32 0, ptr %796, align 4, !tbaa !223
  %797 = getelementptr inbounds %struct.cellbox, ptr %787, i64 0, i32 13
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %794, i8 0, i64 16, i1 false)
  store double 1.000000e+00, ptr %797, align 8, !tbaa !237
  %798 = getelementptr inbounds %struct.cellbox, ptr %787, i64 0, i32 15
  store <2 x double> <double 1.000000e+00, double 1.000000e+00>, ptr %798, align 8, !tbaa !36
  %799 = getelementptr i8, ptr %787, i64 20
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %799, i8 0, i64 32, i1 false), !tbaa !17
  br label %800

800:                                              ; preds = %800, %785
  %801 = phi i64 [ 0, %785 ], [ %803, %800 ]
  %802 = getelementptr inbounds %struct.cellbox, ptr %787, i64 0, i32 21, i64 %801
  store <2 x ptr> zeroinitializer, ptr %802, align 8, !tbaa !7
  %803 = add nuw i64 %801, 2
  %804 = icmp eq i64 %803, 8
  br i1 %804, label %805, label %800, !llvm.loop !679

805:                                              ; preds = %800
  %806 = add nuw nsw i64 %786, 1
  %807 = icmp eq i64 %806, %784
  br i1 %807, label %808, label %785, !llvm.loop !680

808:                                              ; preds = %805, %770
  %809 = add nsw i32 %773, 1
  %810 = sext i32 %809 to i64
  %811 = shl nsw i64 %810, 3
  %812 = call noalias ptr @malloc(i64 noundef %811) #45
  store ptr %812, ptr @padspace, align 8, !tbaa !7
  %813 = icmp slt i32 %773, 1
  br i1 %813, label %818, label %814

814:                                              ; preds = %808
  %815 = getelementptr i8, ptr %812, i64 8
  %816 = zext i32 %773 to i64
  %817 = shl nuw nsw i64 %816, 3
  call void @llvm.memset.p0.i64(ptr align 8 %815, i8 0, i64 %817, i1 false), !tbaa !36
  br label %818

818:                                              ; preds = %814, %808
  %819 = call dereferenceable_or_null(16) ptr @calloc(i64 1, i64 16)
  store ptr %819, ptr @fixLRBT, align 8, !tbaa !7
  call void @llvm.lifetime.end.p0(i64 1024, ptr nonnull %16) #47
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %15) #47
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %13) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %12) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %11) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %10) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %3) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #47
  ret void
}

; Function Attrs: nofree nounwind willreturn allockind("alloc,zeroed") allocsize(0,1) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @calloc(i64 noundef, i64 noundef) local_unnamed_addr #36

; Function Attrs: nounwind optsize uwtable
define internal void @pass2(ptr noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca [1024 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %3) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %7) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %8) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %9) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %10) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %11) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %12) #47
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13) #47
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %14) #47
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %15) #47
  call void @llvm.lifetime.start.p0(i64 1024, ptr nonnull %16) #47
  %17 = tail call noalias dereferenceable_or_null(808) ptr @malloc(i64 noundef 808) #45
  store ptr %17, ptr @C, align 8, !tbaa !7
  store i32 0, ptr @netctr, align 4, !tbaa !17
  tail call void @maketabl() #44
  br label %18

18:                                               ; preds = %394, %1
  %19 = phi i32 [ 0, %1 ], [ %395, %394 ]
  %20 = phi i32 [ undef, %1 ], [ %396, %394 ]
  %21 = phi i32 [ 0, %1 ], [ %397, %394 ]
  %22 = phi i32 [ 0, %1 ], [ %398, %394 ]
  %23 = phi ptr [ undef, %1 ], [ %399, %394 ]
  %24 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.508, ptr noundef nonnull %16) #44
  %25 = icmp eq i32 %24, 1
  br i1 %25, label %26, label %400

26:                                               ; preds = %18
  %27 = call i32 @bcmp(ptr noundef nonnull dereferenceable(5) %16, ptr noundef nonnull dereferenceable(5) @.str.1.509, i64 5)
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %114

29:                                               ; preds = %26
  %30 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.2.510, ptr noundef nonnull %8) #44
  %31 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.3.511, ptr noundef nonnull %16) #44
  %32 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.3.511, ptr noundef nonnull %16) #44
  %33 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %34 = add nsw i32 %19, 1
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds ptr, ptr %33, i64 %35
  %37 = load ptr, ptr %36, align 8, !tbaa !7
  %38 = load ptr, ptr @C, align 8, !tbaa !7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(808) %38, i8 0, i64 808, i1 false), !tbaa !17
  %39 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.512, ptr noundef nonnull %9) #44
  %40 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.508, ptr noundef nonnull %16) #44
  %41 = load i32, ptr %9, align 4, !tbaa !17
  %42 = icmp slt i32 %41, 1
  br i1 %42, label %43, label %54

43:                                               ; preds = %29
  %44 = load ptr, ptr @C, align 8, !tbaa !7
  %45 = load i32, ptr %44, align 4, !tbaa !102
  br label %46

46:                                               ; preds = %54, %43
  %47 = phi i32 [ %45, %43 ], [ %64, %54 ]
  %48 = phi ptr [ %44, %43 ], [ %58, %54 ]
  %49 = getelementptr inbounds %struct.bellbox, ptr %48, i64 1, i32 1
  %50 = zext i32 %47 to i64
  %51 = call i32 @llvm.smax.i32(i32 %47, i32 0)
  %52 = add nuw i32 %51, 1
  %53 = zext i32 %52 to i64
  br label %70

54:                                               ; preds = %54, %29
  %55 = phi i32 [ %67, %54 ], [ 1, %29 ]
  %56 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.513, ptr noundef nonnull %10, ptr noundef nonnull %11) #44
  %57 = load i32, ptr %10, align 4, !tbaa !17
  %58 = load ptr, ptr @C, align 8, !tbaa !7
  %59 = load i32, ptr %58, align 4, !tbaa !102
  %60 = add nsw i32 %59, 1
  store i32 %60, ptr %58, align 4, !tbaa !102
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds %struct.bellbox, ptr %58, i64 %61
  store i32 %57, ptr %62, align 4, !tbaa !102
  %63 = load i32, ptr %11, align 4, !tbaa !17
  %64 = load i32, ptr %58, align 4, !tbaa !102
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds %struct.bellbox, ptr %58, i64 %65, i32 1
  store i32 %63, ptr %66, align 4, !tbaa !104
  %67 = add nuw nsw i32 %55, 1
  %68 = load i32, ptr %9, align 4, !tbaa !17
  %69 = icmp slt i32 %55, %68
  br i1 %69, label %54, label %46, !llvm.loop !681

70:                                               ; preds = %94, %46
  %71 = phi i64 [ 1, %46 ], [ %79, %94 ]
  %72 = icmp eq i64 %71, %53
  br i1 %72, label %101, label %73

73:                                               ; preds = %70
  %74 = getelementptr inbounds %struct.bellbox, ptr %48, i64 %71
  %75 = load i32, ptr %74, align 4, !tbaa !102
  %76 = getelementptr inbounds %struct.bellbox, ptr %48, i64 %71, i32 1
  %77 = load i32, ptr %76, align 4, !tbaa !104
  %78 = icmp eq i64 %71, %50
  %79 = add nuw nsw i64 %71, 1
  %80 = getelementptr inbounds %struct.bellbox, ptr %48, i64 %79, i32 1
  %81 = select i1 %78, i64 1, i64 %79
  %82 = getelementptr inbounds %struct.bellbox, ptr %48, i64 %81
  %83 = select i1 %78, ptr %49, ptr %80
  %84 = load i32, ptr %83, align 4, !tbaa !104
  %85 = load i32, ptr %82, align 4, !tbaa !102
  %86 = icmp eq i32 %75, %85
  %87 = icmp eq i32 %77, %84
  %88 = select i1 %86, i1 %87, i1 false
  br i1 %88, label %89, label %94

89:                                               ; preds = %73
  %.lcssa28 = phi i32 [ %34, %73 ]
  %90 = load ptr, ptr @fpo, align 8, !tbaa !7
  %91 = call i64 @fwrite(ptr nonnull @.str.6.514, i64 33, i64 1, ptr %90)
  %92 = load ptr, ptr @fpo, align 8, !tbaa !7
  %93 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %92, ptr noundef nonnull @.str.7.515, i32 noundef %.lcssa28) #43
  call void @exit(i32 noundef 0) #49
  unreachable

94:                                               ; preds = %73
  %95 = select i1 %86, i1 true, i1 %87
  br i1 %95, label %70, label %96, !llvm.loop !682

96:                                               ; preds = %94
  %.lcssa29 = phi i32 [ %34, %94 ]
  %97 = load ptr, ptr @fpo, align 8, !tbaa !7
  %98 = call i64 @fwrite(ptr nonnull @.str.8.516, i64 34, i64 1, ptr %97)
  %99 = load ptr, ptr @fpo, align 8, !tbaa !7
  %100 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %99, ptr noundef nonnull @.str.9.517, i32 noundef %.lcssa29) #43
  call void @exit(i32 noundef 0) #49
  unreachable

101:                                              ; preds = %70
  %102 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.508, ptr noundef nonnull %16) #44
  %103 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.512, ptr noundef nonnull %2) #44
  %104 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.512, ptr noundef nonnull %12) #44
  %105 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.508, ptr noundef nonnull %16) #44
  %106 = load i32, ptr %12, align 4, !tbaa !17
  %107 = icmp slt i32 %106, 1
  br i1 %107, label %394, label %108

108:                                              ; preds = %108, %101
  %109 = phi i32 [ %111, %108 ], [ 1, %101 ]
  %110 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.512, ptr noundef nonnull %10) #44
  %111 = add nuw nsw i32 %109, 1
  %112 = load i32, ptr %12, align 4, !tbaa !17
  %113 = icmp slt i32 %109, %112
  br i1 %113, label %108, label %394, !llvm.loop !683

114:                                              ; preds = %26
  %115 = load i32, ptr %16, align 16
  %116 = icmp eq i32 %115, 7235952
  br i1 %116, label %117, label %163

117:                                              ; preds = %114
  %118 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.508, ptr noundef nonnull %16) #44
  %119 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.508, ptr noundef nonnull %16) #44
  %120 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.508, ptr noundef nonnull %16) #44
  %121 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.508, ptr noundef nonnull %16) #44
  %122 = add nsw i32 %21, 1
  %123 = call i32 @addhash(ptr noundef nonnull %16) #44
  %124 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.513, ptr noundef nonnull %3, ptr noundef nonnull %4) #44
  %125 = icmp eq i32 %20, 1
  br i1 %125, label %126, label %394

126:                                              ; preds = %117
  %127 = getelementptr inbounds %struct.cellbox, ptr %23, i64 0, i32 18
  %128 = load i32, ptr %127, align 4, !tbaa !223
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %394, label %130

130:                                              ; preds = %126
  %131 = load ptr, ptr @C, align 8, !tbaa !7
  %132 = load i32, ptr %131, align 4, !tbaa !102
  %133 = icmp slt i32 %132, 1
  br i1 %133, label %394, label %134

134:                                              ; preds = %130
  %135 = load i32, ptr %4, align 4
  %136 = load i32, ptr %3, align 4
  %137 = zext i32 %132 to i64
  %138 = add nuw i32 %132, 1
  %139 = zext i32 %138 to i64
  br label %140

140:                                              ; preds = %161, %134
  %141 = phi i64 [ 1, %134 ], [ %145, %161 ]
  %142 = getelementptr inbounds %struct.bellbox, ptr %131, i64 %141
  %143 = load i32, ptr %142, align 4, !tbaa !102
  %144 = icmp eq i64 %141, %137
  %145 = add nuw nsw i64 %141, 1
  %146 = and i64 %145, 4294967295
  %147 = select i1 %144, i64 1, i64 %146
  %148 = getelementptr inbounds %struct.bellbox, ptr %131, i64 %147
  %149 = load i32, ptr %148, align 4, !tbaa !102
  %150 = icmp eq i32 %143, %149
  br i1 %150, label %151, label %155

151:                                              ; preds = %140
  %152 = icmp eq i32 %136, %143
  br i1 %152, label %153, label %161

153:                                              ; preds = %151
  %154 = add nsw i32 %128, 1
  store i32 %154, ptr %127, align 4, !tbaa !223
  br label %394

155:                                              ; preds = %140
  %156 = getelementptr inbounds %struct.bellbox, ptr %131, i64 %141, i32 1
  %157 = load i32, ptr %156, align 4, !tbaa !104
  %158 = icmp eq i32 %135, %157
  br i1 %158, label %159, label %161

159:                                              ; preds = %155
  %160 = add nsw i32 %128, 1
  store i32 %160, ptr %127, align 4, !tbaa !223
  br label %394

161:                                              ; preds = %155, %151
  %162 = icmp eq i64 %145, %139
  br i1 %162, label %394, label %140, !llvm.loop !684

163:                                              ; preds = %114
  %164 = call i32 @bcmp(ptr noundef nonnull dereferenceable(6) %16, ptr noundef nonnull dereferenceable(6) @.str.11.518, i64 6)
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %166, label %178

166:                                              ; preds = %163
  %167 = icmp eq i32 %20, 1
  br i1 %167, label %168, label %173

168:                                              ; preds = %166
  %.lcssa25 = phi i32 [ %19, %166 ]
  %169 = load ptr, ptr @fpo, align 8, !tbaa !7
  %170 = call i64 @fwrite(ptr nonnull @.str.12.519, i64 37, i64 1, ptr %169)
  %171 = load ptr, ptr @fpo, align 8, !tbaa !7
  %172 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %171, ptr noundef nonnull @.str.13.520, i32 noundef %.lcssa25) #43
  call void @exit(i32 noundef 0) #49
  unreachable

173:                                              ; preds = %166
  %174 = add nsw i32 %22, 1
  %175 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.508, ptr noundef nonnull %16) #44
  %176 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.508, ptr noundef nonnull %16) #44
  %177 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.513, ptr noundef nonnull %3, ptr noundef nonnull %4) #44
  br label %394

178:                                              ; preds = %163
  %179 = call i32 @bcmp(ptr noundef nonnull dereferenceable(9) %16, ptr noundef nonnull dereferenceable(9) @.str.14.521, i64 9)
  %180 = icmp eq i32 %179, 0
  br i1 %180, label %181, label %270

181:                                              ; preds = %178
  %182 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.2.510, ptr noundef nonnull %8) #44
  %183 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.3.511, ptr noundef nonnull %16) #44
  %184 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.3.511, ptr noundef nonnull %16) #44
  %185 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %186 = add nsw i32 %19, 1
  %187 = sext i32 %186 to i64
  %188 = getelementptr inbounds ptr, ptr %185, i64 %187
  %189 = load ptr, ptr %188, align 8, !tbaa !7
  %190 = load ptr, ptr @C, align 8, !tbaa !7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(808) %190, i8 0, i64 808, i1 false), !tbaa !17
  %191 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.512, ptr noundef nonnull %9) #44
  %192 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.508, ptr noundef nonnull %16) #44
  %193 = load i32, ptr %9, align 4, !tbaa !17
  %194 = icmp slt i32 %193, 1
  br i1 %194, label %195, label %206

195:                                              ; preds = %181
  %196 = load ptr, ptr @C, align 8, !tbaa !7
  %197 = load i32, ptr %196, align 4, !tbaa !102
  br label %198

198:                                              ; preds = %206, %195
  %199 = phi i32 [ %197, %195 ], [ %216, %206 ]
  %200 = phi ptr [ %196, %195 ], [ %210, %206 ]
  %201 = getelementptr inbounds %struct.bellbox, ptr %200, i64 1, i32 1
  %202 = zext i32 %199 to i64
  %203 = call i32 @llvm.smax.i32(i32 %199, i32 0)
  %204 = add nuw i32 %203, 1
  %205 = zext i32 %204 to i64
  br label %222

206:                                              ; preds = %206, %181
  %207 = phi i32 [ %219, %206 ], [ 1, %181 ]
  %208 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.513, ptr noundef nonnull %10, ptr noundef nonnull %11) #44
  %209 = load i32, ptr %10, align 4, !tbaa !17
  %210 = load ptr, ptr @C, align 8, !tbaa !7
  %211 = load i32, ptr %210, align 4, !tbaa !102
  %212 = add nsw i32 %211, 1
  store i32 %212, ptr %210, align 4, !tbaa !102
  %213 = sext i32 %212 to i64
  %214 = getelementptr inbounds %struct.bellbox, ptr %210, i64 %213
  store i32 %209, ptr %214, align 4, !tbaa !102
  %215 = load i32, ptr %11, align 4, !tbaa !17
  %216 = load i32, ptr %210, align 4, !tbaa !102
  %217 = sext i32 %216 to i64
  %218 = getelementptr inbounds %struct.bellbox, ptr %210, i64 %217, i32 1
  store i32 %215, ptr %218, align 4, !tbaa !104
  %219 = add nuw nsw i32 %207, 1
  %220 = load i32, ptr %9, align 4, !tbaa !17
  %221 = icmp slt i32 %207, %220
  br i1 %221, label %206, label %198, !llvm.loop !685

222:                                              ; preds = %246, %198
  %223 = phi i64 [ 1, %198 ], [ %231, %246 ]
  %224 = icmp eq i64 %223, %205
  br i1 %224, label %253, label %225

225:                                              ; preds = %222
  %226 = getelementptr inbounds %struct.bellbox, ptr %200, i64 %223
  %227 = load i32, ptr %226, align 4, !tbaa !102
  %228 = getelementptr inbounds %struct.bellbox, ptr %200, i64 %223, i32 1
  %229 = load i32, ptr %228, align 4, !tbaa !104
  %230 = icmp eq i64 %223, %202
  %231 = add nuw nsw i64 %223, 1
  %232 = getelementptr inbounds %struct.bellbox, ptr %200, i64 %231, i32 1
  %233 = select i1 %230, i64 1, i64 %231
  %234 = getelementptr inbounds %struct.bellbox, ptr %200, i64 %233
  %235 = select i1 %230, ptr %201, ptr %232
  %236 = load i32, ptr %235, align 4, !tbaa !104
  %237 = load i32, ptr %234, align 4, !tbaa !102
  %238 = icmp eq i32 %227, %237
  %239 = icmp eq i32 %229, %236
  %240 = select i1 %238, i1 %239, i1 false
  br i1 %240, label %241, label %246

241:                                              ; preds = %225
  %.lcssa2 = phi i32 [ %186, %225 ]
  %242 = load ptr, ptr @fpo, align 8, !tbaa !7
  %243 = call i64 @fwrite(ptr nonnull @.str.6.514, i64 33, i64 1, ptr %242)
  %244 = load ptr, ptr @fpo, align 8, !tbaa !7
  %245 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %244, ptr noundef nonnull @.str.7.515, i32 noundef %.lcssa2) #43
  call void @exit(i32 noundef 0) #49
  unreachable

246:                                              ; preds = %225
  %247 = select i1 %238, i1 true, i1 %239
  br i1 %247, label %222, label %248, !llvm.loop !686

248:                                              ; preds = %246
  %.lcssa3 = phi i32 [ %186, %246 ]
  %249 = load ptr, ptr @fpo, align 8, !tbaa !7
  %250 = call i64 @fwrite(ptr nonnull @.str.15.522, i64 30, i64 1, ptr %249)
  %251 = load ptr, ptr @fpo, align 8, !tbaa !7
  %252 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %251, ptr noundef nonnull @.str.9.517, i32 noundef %.lcssa3) #43
  call void @exit(i32 noundef 0) #49
  unreachable

253:                                              ; preds = %222
  %254 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.508, ptr noundef nonnull %16) #44
  %255 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.16.523, ptr noundef nonnull %14) #44
  %256 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.508, ptr noundef nonnull %16) #44
  %257 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.16.523, ptr noundef nonnull %13) #44
  %258 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.508, ptr noundef nonnull %16) #44
  %259 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.512, ptr noundef nonnull %2) #44
  %260 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.512, ptr noundef nonnull %12) #44
  %261 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.508, ptr noundef nonnull %16) #44
  %262 = load i32, ptr %12, align 4, !tbaa !17
  %263 = icmp slt i32 %262, 1
  br i1 %263, label %394, label %264

264:                                              ; preds = %264, %253
  %265 = phi i32 [ %267, %264 ], [ 1, %253 ]
  %266 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.512, ptr noundef nonnull %10) #44
  %267 = add nuw nsw i32 %265, 1
  %268 = load i32, ptr %12, align 4, !tbaa !17
  %269 = icmp slt i32 %265, %268
  br i1 %269, label %264, label %394, !llvm.loop !687

270:                                              ; preds = %178
  %271 = call i32 @bcmp(ptr noundef nonnull dereferenceable(9) %16, ptr noundef nonnull dereferenceable(9) @.str.17.524, i64 9)
  %272 = icmp eq i32 %271, 0
  br i1 %272, label %276, label %273

273:                                              ; preds = %270
  %274 = call i32 @bcmp(ptr noundef nonnull dereferenceable(6) %16, ptr noundef nonnull dereferenceable(6) @.str.18.525, i64 6)
  %275 = icmp eq i32 %274, 0
  br i1 %275, label %276, label %300

276:                                              ; preds = %273, %270
  %277 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.512, ptr noundef nonnull %5) #44
  %278 = load i32, ptr %5, align 4, !tbaa !17
  %279 = getelementptr inbounds %struct.cellbox, ptr %23, i64 0, i32 18
  %280 = load i32, ptr %279, align 4, !tbaa !223
  %281 = add nsw i32 %280, %278
  store i32 %281, ptr %279, align 4, !tbaa !223
  %282 = icmp slt i32 %278, 1
  br i1 %282, label %296, label %283

283:                                              ; preds = %283, %276
  %284 = phi i32 [ %293, %283 ], [ 1, %276 ]
  %285 = phi i32 [ %291, %283 ], [ %21, %276 ]
  %286 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.508, ptr noundef nonnull %16) #44
  %287 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.508, ptr noundef nonnull %16) #44
  %288 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.508, ptr noundef nonnull %16) #44
  %289 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.508, ptr noundef nonnull %16) #44
  %290 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.508, ptr noundef nonnull %16) #44
  %291 = add nsw i32 %285, 1
  %292 = call i32 @addhash(ptr noundef nonnull %16) #44
  %293 = add nuw nsw i32 %284, 1
  %294 = load i32, ptr %5, align 4, !tbaa !17
  %295 = icmp slt i32 %284, %294
  br i1 %295, label %283, label %296, !llvm.loop !688

296:                                              ; preds = %283, %276
  %297 = phi i32 [ %21, %276 ], [ %291, %283 ]
  %298 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.508, ptr noundef nonnull %16) #44
  %299 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.513, ptr noundef nonnull %6, ptr noundef nonnull %7) #44
  br label %394

300:                                              ; preds = %273
  %301 = icmp eq i32 %115, 6578544
  br i1 %301, label %302, label %389

302:                                              ; preds = %300
  %303 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.2.510, ptr noundef nonnull %8) #44
  %304 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.3.511, ptr noundef nonnull %16) #44
  %305 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.3.511, ptr noundef nonnull %16) #44
  %306 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %307 = add nsw i32 %19, 1
  %308 = sext i32 %307 to i64
  %309 = getelementptr inbounds ptr, ptr %306, i64 %308
  %310 = load ptr, ptr %309, align 8, !tbaa !7
  %311 = load ptr, ptr @C, align 8, !tbaa !7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(808) %311, i8 0, i64 808, i1 false), !tbaa !17
  %312 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.512, ptr noundef nonnull %9) #44
  %313 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.508, ptr noundef nonnull %16) #44
  %314 = load i32, ptr %9, align 4, !tbaa !17
  %315 = icmp slt i32 %314, 1
  br i1 %315, label %316, label %327

316:                                              ; preds = %302
  %317 = load ptr, ptr @C, align 8, !tbaa !7
  %318 = load i32, ptr %317, align 4, !tbaa !102
  br label %319

319:                                              ; preds = %327, %316
  %320 = phi i32 [ %318, %316 ], [ %337, %327 ]
  %321 = phi ptr [ %317, %316 ], [ %331, %327 ]
  %322 = getelementptr inbounds %struct.bellbox, ptr %321, i64 1, i32 1
  %323 = zext i32 %320 to i64
  %324 = call i32 @llvm.smax.i32(i32 %320, i32 0)
  %325 = add nuw i32 %324, 1
  %326 = zext i32 %325 to i64
  br label %343

327:                                              ; preds = %327, %302
  %328 = phi i32 [ %340, %327 ], [ 1, %302 ]
  %329 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.513, ptr noundef nonnull %10, ptr noundef nonnull %11) #44
  %330 = load i32, ptr %10, align 4, !tbaa !17
  %331 = load ptr, ptr @C, align 8, !tbaa !7
  %332 = load i32, ptr %331, align 4, !tbaa !102
  %333 = add nsw i32 %332, 1
  store i32 %333, ptr %331, align 4, !tbaa !102
  %334 = sext i32 %333 to i64
  %335 = getelementptr inbounds %struct.bellbox, ptr %331, i64 %334
  store i32 %330, ptr %335, align 4, !tbaa !102
  %336 = load i32, ptr %11, align 4, !tbaa !17
  %337 = load i32, ptr %331, align 4, !tbaa !102
  %338 = sext i32 %337 to i64
  %339 = getelementptr inbounds %struct.bellbox, ptr %331, i64 %338, i32 1
  store i32 %336, ptr %339, align 4, !tbaa !104
  %340 = add nuw nsw i32 %328, 1
  %341 = load i32, ptr %9, align 4, !tbaa !17
  %342 = icmp slt i32 %328, %341
  br i1 %342, label %327, label %319, !llvm.loop !689

343:                                              ; preds = %367, %319
  %344 = phi i64 [ 1, %319 ], [ %352, %367 ]
  %345 = icmp eq i64 %344, %326
  br i1 %345, label %374, label %346

346:                                              ; preds = %343
  %347 = getelementptr inbounds %struct.bellbox, ptr %321, i64 %344
  %348 = load i32, ptr %347, align 4, !tbaa !102
  %349 = getelementptr inbounds %struct.bellbox, ptr %321, i64 %344, i32 1
  %350 = load i32, ptr %349, align 4, !tbaa !104
  %351 = icmp eq i64 %344, %323
  %352 = add nuw nsw i64 %344, 1
  %353 = getelementptr inbounds %struct.bellbox, ptr %321, i64 %352, i32 1
  %354 = select i1 %351, i64 1, i64 %352
  %355 = getelementptr inbounds %struct.bellbox, ptr %321, i64 %354
  %356 = select i1 %351, ptr %322, ptr %353
  %357 = load i32, ptr %356, align 4, !tbaa !104
  %358 = load i32, ptr %355, align 4, !tbaa !102
  %359 = icmp eq i32 %348, %358
  %360 = icmp eq i32 %350, %357
  %361 = select i1 %359, i1 %360, i1 false
  br i1 %361, label %362, label %367

362:                                              ; preds = %346
  %.lcssa = phi i32 [ %307, %346 ]
  %363 = load ptr, ptr @fpo, align 8, !tbaa !7
  %364 = call i64 @fwrite(ptr nonnull @.str.6.514, i64 33, i64 1, ptr %363)
  %365 = load ptr, ptr @fpo, align 8, !tbaa !7
  %366 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %365, ptr noundef nonnull @.str.7.515, i32 noundef %.lcssa) #43
  call void @exit(i32 noundef 0) #49
  unreachable

367:                                              ; preds = %346
  %368 = select i1 %359, i1 true, i1 %360
  br i1 %368, label %343, label %369, !llvm.loop !690

369:                                              ; preds = %367
  %.lcssa1 = phi i32 [ %307, %367 ]
  %370 = load ptr, ptr @fpo, align 8, !tbaa !7
  %371 = call i64 @fwrite(ptr nonnull @.str.15.522, i64 30, i64 1, ptr %370)
  %372 = load ptr, ptr @fpo, align 8, !tbaa !7
  %373 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %372, ptr noundef nonnull @.str.9.517, i32 noundef %.lcssa1) #43
  call void @exit(i32 noundef 0) #49
  unreachable

374:                                              ; preds = %343
  %375 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.508, ptr noundef nonnull %16) #44
  %376 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.508, ptr noundef nonnull %16) #44
  %377 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.508, ptr noundef nonnull %16) #44
  %378 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.512, ptr noundef nonnull %2) #44
  %379 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.512, ptr noundef nonnull %12) #44
  %380 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.508, ptr noundef nonnull %16) #44
  %381 = load i32, ptr %12, align 4, !tbaa !17
  %382 = icmp slt i32 %381, 1
  br i1 %382, label %394, label %383

383:                                              ; preds = %383, %374
  %384 = phi i32 [ %386, %383 ], [ 1, %374 ]
  %385 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.512, ptr noundef nonnull %10) #44
  %386 = add nuw nsw i32 %384, 1
  %387 = load i32, ptr %12, align 4, !tbaa !17
  %388 = icmp slt i32 %384, %387
  br i1 %388, label %383, label %394, !llvm.loop !691

389:                                              ; preds = %300
  %390 = call i32 @bcmp(ptr noundef nonnull dereferenceable(10) %16, ptr noundef nonnull dereferenceable(10) @.str.20.526, i64 10)
  %391 = icmp eq i32 %390, 0
  br i1 %391, label %392, label %394

392:                                              ; preds = %389
  %393 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.21.527, ptr noundef nonnull %15) #44
  br label %394

394:                                              ; preds = %392, %389, %383, %374, %296, %264, %253, %173, %161, %159, %153, %130, %126, %117, %108, %101
  %395 = phi i32 [ %19, %153 ], [ %19, %159 ], [ %19, %126 ], [ %19, %117 ], [ %19, %173 ], [ %19, %296 ], [ %19, %392 ], [ %19, %389 ], [ %34, %101 ], [ %19, %130 ], [ %186, %253 ], [ %307, %374 ], [ %34, %108 ], [ %19, %161 ], [ %186, %264 ], [ %307, %383 ]
  %396 = phi i32 [ 1, %153 ], [ 1, %159 ], [ 1, %126 ], [ %20, %117 ], [ %20, %173 ], [ %20, %296 ], [ %20, %392 ], [ %20, %389 ], [ 0, %101 ], [ 1, %130 ], [ 1, %253 ], [ 0, %374 ], [ 0, %108 ], [ 1, %161 ], [ 1, %264 ], [ 0, %383 ]
  %397 = phi i32 [ %122, %153 ], [ %122, %159 ], [ %122, %126 ], [ %122, %117 ], [ %21, %173 ], [ %297, %296 ], [ %21, %392 ], [ %21, %389 ], [ %21, %101 ], [ %122, %130 ], [ %21, %253 ], [ %21, %374 ], [ %21, %108 ], [ %122, %161 ], [ %21, %264 ], [ %21, %383 ]
  %398 = phi i32 [ %22, %153 ], [ %22, %159 ], [ %22, %126 ], [ %22, %117 ], [ %174, %173 ], [ %22, %296 ], [ %22, %392 ], [ %22, %389 ], [ %22, %101 ], [ %22, %130 ], [ %22, %253 ], [ %22, %374 ], [ %22, %108 ], [ %22, %161 ], [ %22, %264 ], [ %22, %383 ]
  %399 = phi ptr [ %23, %153 ], [ %23, %159 ], [ %23, %126 ], [ %23, %117 ], [ %23, %173 ], [ %23, %296 ], [ %23, %392 ], [ %23, %389 ], [ %37, %101 ], [ %23, %130 ], [ %189, %253 ], [ %310, %374 ], [ %37, %108 ], [ %23, %161 ], [ %189, %264 ], [ %310, %383 ]
  br label %18, !llvm.loop !692

400:                                              ; preds = %18
  %.lcssa12 = phi i32 [ %21, %18 ]
  %.lcssa4 = phi i32 [ %22, %18 ]
  call void @rewind(ptr noundef %0) #43
  %401 = add i32 %.lcssa12, 1
  %402 = sext i32 %401 to i64
  %403 = shl nsw i64 %402, 3
  %404 = call noalias ptr @malloc(i64 noundef %403) #45
  store ptr %404, ptr @termarray, align 8, !tbaa !7
  %405 = icmp slt i32 %.lcssa12, 1
  br i1 %405, label %414, label %406

406:                                              ; preds = %400
  %407 = zext i32 %401 to i64
  br label %408

408:                                              ; preds = %408, %406
  %409 = phi i64 [ 1, %406 ], [ %412, %408 ]
  %410 = load ptr, ptr @termarray, align 8, !tbaa !7
  %411 = getelementptr inbounds ptr, ptr %410, i64 %409
  store ptr null, ptr %411, align 8, !tbaa !7
  %412 = add nuw nsw i64 %409, 1
  %413 = icmp eq i64 %412, %407
  br i1 %413, label %414, label %408, !llvm.loop !693

414:                                              ; preds = %408, %400
  store i32 %.lcssa12, ptr @maxterm, align 4, !tbaa !17
  %415 = call noalias ptr @malloc(i64 noundef %403) #45
  store ptr %415, ptr @pinnames, align 8, !tbaa !7
  %416 = load i32, ptr @netctr, align 4, !tbaa !17
  store i32 %416, ptr @numnets, align 4, !tbaa !17
  %417 = add i32 %416, 1
  %418 = sext i32 %417 to i64
  %419 = shl nsw i64 %418, 3
  %420 = call noalias ptr @malloc(i64 noundef %419) #45
  store ptr %420, ptr @netarray, align 8, !tbaa !7
  %421 = icmp slt i32 %416, 1
  br i1 %421, label %432, label %422

422:                                              ; preds = %414
  %423 = zext i32 %417 to i64
  br label %424

424:                                              ; preds = %424, %422
  %425 = phi i64 [ 1, %422 ], [ %430, %424 ]
  %426 = call noalias dereferenceable_or_null(72) ptr @malloc(i64 noundef 72) #45
  %427 = load ptr, ptr @netarray, align 8, !tbaa !7
  %428 = getelementptr inbounds ptr, ptr %427, i64 %425
  store ptr %426, ptr %428, align 8, !tbaa !7
  %429 = getelementptr inbounds %struct.dimbox, ptr %426, i64 0, i32 13
  store ptr null, ptr %429, align 8, !tbaa !38
  %430 = add nuw nsw i64 %425, 1
  %431 = icmp eq i64 %430, %423
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(48) %426, i8 0, i64 48, i1 false)
  br i1 %431, label %432, label %424, !llvm.loop !694

432:                                              ; preds = %424, %414
  %433 = add nsw i32 %.lcssa4, %.lcssa12
  store i32 %433, ptr @totPins, align 4, !tbaa !17
  call void @llvm.lifetime.end.p0(i64 1024, ptr nonnull %16) #47
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %15) #47
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14) #47
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %12) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %11) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %10) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %3) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #47
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @perimeter() #19 {
  %1 = load ptr, ptr @A, align 8, !tbaa !7
  %2 = load i32, ptr %1, align 4, !tbaa !102
  %3 = icmp slt i32 %2, 1
  br i1 %3, label %39, label %4

4:                                                ; preds = %0
  %5 = getelementptr inbounds %struct.bellbox, ptr %1, i64 1
  %6 = zext i32 %2 to i64
  %7 = add nuw i32 %2, 1
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds %struct.bellbox, ptr %1, i64 %6
  br label %10

10:                                               ; preds = %34, %4
  %11 = phi i64 [ 1, %4 ], [ %35, %34 ]
  %12 = phi i32 [ 0, %4 ], [ %37, %34 ]
  %13 = icmp eq i64 %11, %6
  br i1 %13, label %14, label %23

14:                                               ; preds = %10
  %15 = load <2 x i32>, ptr %5, align 4, !tbaa !17
  %16 = load <2 x i32>, ptr %9, align 4, !tbaa !17
  %17 = sub nsw <2 x i32> %15, %16
  %18 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %17, i1 true)
  %19 = shufflevector <2 x i32> %18, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>
  %20 = add nuw nsw <2 x i32> %19, %18
  %21 = extractelement <2 x i32> %20, i64 0
  %22 = add nuw nsw i64 %11, 1
  br label %34

23:                                               ; preds = %10
  %24 = add nuw nsw i64 %11, 1
  %25 = getelementptr inbounds %struct.bellbox, ptr %1, i64 %24
  %26 = getelementptr inbounds %struct.bellbox, ptr %1, i64 %11
  %27 = load <2 x i32>, ptr %25, align 4, !tbaa !17
  %28 = load <2 x i32>, ptr %26, align 4, !tbaa !17
  %29 = sub nsw <2 x i32> %27, %28
  %30 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %29, i1 true)
  %31 = shufflevector <2 x i32> %30, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>
  %32 = add nuw nsw <2 x i32> %31, %30
  %33 = extractelement <2 x i32> %32, i64 0
  br label %34

34:                                               ; preds = %23, %14
  %35 = phi i64 [ %22, %14 ], [ %24, %23 ]
  %36 = phi i32 [ %21, %14 ], [ %33, %23 ]
  %37 = add nsw i32 %36, %12
  %38 = icmp eq i64 %35, %8
  br i1 %38, label %39, label %10, !llvm.loop !695

39:                                               ; preds = %34, %0
  %40 = phi i32 [ 0, %0 ], [ %37, %34 ]
  ret i32 %40
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x i32> @llvm.abs.v2i32(<2 x i32>, i1 immarg) #13

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @placepads() #12 {
  %1 = load i32, ptr @blockt, align 4
  %2 = load i32, ptr @blockr, align 4
  store i32 0, ptr @blockb, align 4, !tbaa !17
  store i32 0, ptr @blockl, align 4, !tbaa !17
  %3 = load i32, ptr @numcells, align 4, !tbaa !17
  %4 = load i32, ptr @numpads, align 4, !tbaa !17
  %5 = add i32 %4, %3
  %6 = icmp sgt i32 %4, 0
  br i1 %6, label %7, label %827

7:                                                ; preds = %0
  %8 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %9 = load ptr, ptr @fixLRBT, align 8
  %10 = getelementptr inbounds i32, ptr %9, i64 2
  %11 = add nsw i32 %3, 1
  %12 = load ptr, ptr @padspace, align 8
  %13 = add i32 %5, 1
  %14 = sext i32 %3 to i64
  %15 = sext i32 %5 to i64
  br label %30

16:                                               ; preds = %221
  %.lcssa17 = phi i32 [ %222, %221 ]
  %.lcssa16 = phi i32 [ %223, %221 ]
  %.lcssa15 = phi i32 [ %226, %221 ]
  %.lcssa14 = phi i32 [ %228, %221 ]
  %.lcssa13 = phi i32 [ %229, %221 ]
  br i1 %6, label %17, label %827

17:                                               ; preds = %16
  %18 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %19 = load ptr, ptr @fixLRBT, align 8
  %20 = getelementptr inbounds i32, ptr %19, i64 3
  %21 = add nsw i32 %3, 1
  %22 = load ptr, ptr @padspace, align 8
  %23 = sitofp i32 %.lcssa16 to double
  %24 = sub nsw i32 %.lcssa16, %.lcssa17
  %25 = sitofp i32 %24 to double
  %26 = tail call double @llvm.fmuladd.f64(double %25, double 1.000000e-01, double %23)
  %27 = add i32 %5, 1
  %28 = sext i32 %3 to i64
  %29 = sext i32 %5 to i64
  br label %241

30:                                               ; preds = %221, %7
  %31 = phi i32 [ 0, %7 ], [ %222, %221 ]
  %32 = phi i32 [ %1, %7 ], [ %223, %221 ]
  %33 = phi i32 [ undef, %7 ], [ %229, %221 ]
  %34 = phi i32 [ %2, %7 ], [ %228, %221 ]
  %35 = phi i32 [ %3, %7 ], [ %227, %221 ]
  %36 = phi i32 [ 0, %7 ], [ %226, %221 ]
  %37 = phi i32 [ %1, %7 ], [ %225, %221 ]
  %38 = phi i32 [ 0, %7 ], [ %224, %221 ]
  %39 = add nsw i32 %35, 1
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds ptr, ptr %8, i64 %40
  %42 = load ptr, ptr %41, align 8, !tbaa !7
  %43 = getelementptr inbounds %struct.cellbox, ptr %42, i64 0, i32 11
  %44 = load i32, ptr %43, align 8, !tbaa !363
  %45 = icmp eq i32 %44, 4
  br i1 %45, label %46, label %221

46:                                               ; preds = %30
  %47 = getelementptr inbounds %struct.cellbox, ptr %42, i64 0, i32 21
  %48 = load ptr, ptr %47, align 8, !tbaa !7
  %49 = getelementptr inbounds %struct.tilebox, ptr %48, i64 0, i32 12
  %50 = load i32, ptr %49, align 4, !tbaa !170
  %51 = getelementptr inbounds %struct.tilebox, ptr %48, i64 0, i32 11
  %52 = load i32, ptr %51, align 8, !tbaa !169
  %53 = sub nsw i32 %50, %52
  %54 = getelementptr inbounds %struct.tilebox, ptr %48, i64 0, i32 10
  %55 = load i32, ptr %54, align 4, !tbaa !168
  %56 = getelementptr inbounds %struct.tilebox, ptr %48, i64 0, i32 9
  %57 = load i32, ptr %56, align 8, !tbaa !167
  %58 = sub nsw i32 %55, %57
  %59 = add nsw i32 %35, 2
  %60 = icmp sgt i32 %59, %5
  br i1 %60, label %93, label %61

61:                                               ; preds = %46
  %62 = sext i32 %59 to i64
  %63 = sub i32 %5, %35
  br label %64

64:                                               ; preds = %74, %61
  %65 = phi i64 [ %62, %61 ], [ %90, %74 ]
  %66 = phi i32 [ %58, %61 ], [ %89, %74 ]
  %67 = phi i32 [ %53, %61 ], [ %83, %74 ]
  %68 = phi i32 [ 1, %61 ], [ %75, %74 ]
  %69 = getelementptr inbounds ptr, ptr %8, i64 %65
  %70 = load ptr, ptr %69, align 8, !tbaa !7
  %71 = getelementptr inbounds %struct.cellbox, ptr %70, i64 0, i32 11
  %72 = load i32, ptr %71, align 8, !tbaa !363
  %73 = icmp eq i32 %72, 4
  br i1 %73, label %74, label %93

74:                                               ; preds = %64
  %75 = add nuw nsw i32 %68, 1
  %76 = getelementptr inbounds %struct.cellbox, ptr %70, i64 0, i32 21
  %77 = load ptr, ptr %76, align 8, !tbaa !7
  %78 = getelementptr inbounds %struct.tilebox, ptr %77, i64 0, i32 12
  %79 = load i32, ptr %78, align 4, !tbaa !170
  %80 = getelementptr inbounds %struct.tilebox, ptr %77, i64 0, i32 11
  %81 = load i32, ptr %80, align 8, !tbaa !169
  %82 = sub nsw i32 %79, %81
  %83 = tail call i32 @llvm.smax.i32(i32 %82, i32 %67)
  %84 = getelementptr inbounds %struct.tilebox, ptr %77, i64 0, i32 10
  %85 = load i32, ptr %84, align 4, !tbaa !168
  %86 = getelementptr inbounds %struct.tilebox, ptr %77, i64 0, i32 9
  %87 = load i32, ptr %86, align 8, !tbaa !167
  %88 = add i32 %85, %66
  %89 = sub i32 %88, %87
  %90 = add nsw i64 %65, 1
  %91 = trunc i64 %90 to i32
  %92 = icmp eq i32 %13, %91
  br i1 %92, label %93, label %64, !llvm.loop !696

93:                                               ; preds = %74, %64, %46
  %94 = phi i32 [ 1, %46 ], [ %68, %64 ], [ %63, %74 ]
  %95 = phi i32 [ %53, %46 ], [ %67, %64 ], [ %83, %74 ]
  %96 = phi i32 [ %58, %46 ], [ %66, %64 ], [ %89, %74 ]
  %97 = load i32, ptr %10, align 4, !tbaa !17
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %99, label %104

99:                                               ; preds = %93
  %100 = sub nsw i32 %34, %96
  %101 = add nuw nsw i32 %94, 1
  %102 = sdiv i32 %100, %101
  %103 = tail call i32 @llvm.smax.i32(i32 %102, i32 0)
  br label %106

104:                                              ; preds = %93
  %105 = tail call i32 @llvm.smax.i32(i32 %34, i32 %96)
  br label %106

106:                                              ; preds = %104, %99
  %107 = phi i32 [ %100, %99 ], [ %105, %104 ]
  %108 = phi i32 [ %103, %99 ], [ %33, %104 ]
  %109 = icmp sgt i32 %96, %34
  br i1 %109, label %110, label %113

110:                                              ; preds = %106
  %111 = sub nsw i32 %96, %34
  %112 = sdiv i32 %111, 2
  br label %113

113:                                              ; preds = %110, %106
  %114 = phi i32 [ %112, %110 ], [ %36, %106 ]
  %115 = phi i32 [ %96, %110 ], [ %34, %106 ]
  %116 = sub nsw i32 %37, %38
  %117 = sitofp i32 %116 to double
  %118 = fmul double %117, 1.000000e-01
  %119 = fptosi double %118 to i32
  %120 = add nsw i32 %95, %119
  %121 = add nsw i32 %120, %38
  store i32 %121, ptr @blockb, align 4, !tbaa !17
  %122 = add nsw i32 %120, %37
  store i32 %122, ptr @blockt, align 4, !tbaa !17
  %123 = sitofp i32 %107 to double
  br label %124

124:                                              ; preds = %217, %113
  %125 = phi i32 [ %11, %113 ], [ %219, %217 ]
  %126 = phi i32 [ %3, %113 ], [ %218, %217 ]
  %127 = sext i32 %125 to i64
  %128 = getelementptr inbounds ptr, ptr %8, i64 %127
  %129 = load ptr, ptr %128, align 8, !tbaa !7
  %130 = getelementptr inbounds %struct.cellbox, ptr %129, i64 0, i32 11
  %131 = load i32, ptr %130, align 8, !tbaa !363
  %132 = icmp eq i32 %131, 4
  br i1 %132, label %133, label %217

133:                                              ; preds = %124
  %134 = getelementptr inbounds %struct.cellbox, ptr %129, i64 0, i32 21
  %135 = load ptr, ptr %134, align 8, !tbaa !7
  %136 = getelementptr inbounds %struct.tilebox, ptr %135, i64 0, i32 12
  %137 = load i32, ptr %136, align 4, !tbaa !170
  %138 = getelementptr inbounds %struct.tilebox, ptr %135, i64 0, i32 11
  %139 = load i32, ptr %138, align 8, !tbaa !169
  %140 = sub nsw i32 %137, %139
  %141 = getelementptr inbounds %struct.tilebox, ptr %135, i64 0, i32 10
  %142 = load i32, ptr %141, align 4, !tbaa !168
  %143 = getelementptr inbounds %struct.tilebox, ptr %135, i64 0, i32 9
  %144 = load i32, ptr %143, align 8, !tbaa !167
  %145 = sub nsw i32 %142, %144
  %146 = load i32, ptr %10, align 4, !tbaa !17
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %148, label %151

148:                                              ; preds = %133
  %149 = sdiv i32 %145, 2
  %150 = add nsw i32 %149, %108
  br label %158

151:                                              ; preds = %133
  %152 = sub nsw i32 %125, %3
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds double, ptr %12, i64 %153
  %155 = load double, ptr %154, align 8, !tbaa !36
  %156 = fmul double %155, %123
  %157 = fptosi double %156 to i32
  br label %158

158:                                              ; preds = %151, %148
  %159 = phi i32 [ %150, %148 ], [ %157, %151 ]
  %160 = getelementptr inbounds %struct.cellbox, ptr %129, i64 0, i32 2
  store i32 %159, ptr %160, align 4
  %161 = sdiv i32 %140, 2
  %162 = sub i32 %95, %140
  %163 = add i32 %162, %161
  %164 = getelementptr inbounds %struct.cellbox, ptr %129, i64 0, i32 3
  store i32 %163, ptr %164, align 8, !tbaa !165
  %165 = add nsw i32 %126, 2
  %166 = icmp sgt i32 %165, %5
  br i1 %166, label %217, label %167

167:                                              ; preds = %158
  %168 = add nsw i32 %145, %108
  %169 = sext i32 %165 to i64
  br label %170

170:                                              ; preds = %204, %167
  %171 = phi i64 [ %169, %167 ], [ %213, %204 ]
  %172 = phi i32 [ %168, %167 ], [ %212, %204 ]
  %173 = getelementptr inbounds ptr, ptr %8, i64 %171
  %174 = load ptr, ptr %173, align 8, !tbaa !7
  %175 = getelementptr inbounds %struct.cellbox, ptr %174, i64 0, i32 11
  %176 = load i32, ptr %175, align 8, !tbaa !363
  %177 = icmp eq i32 %176, 4
  br i1 %177, label %178, label %215

178:                                              ; preds = %170
  %179 = getelementptr inbounds %struct.cellbox, ptr %174, i64 0, i32 21
  %180 = load ptr, ptr %179, align 8, !tbaa !7
  %181 = getelementptr inbounds %struct.tilebox, ptr %180, i64 0, i32 12
  %182 = load i32, ptr %181, align 4, !tbaa !170
  %183 = getelementptr inbounds %struct.tilebox, ptr %180, i64 0, i32 11
  %184 = load i32, ptr %183, align 8, !tbaa !169
  %185 = sub nsw i32 %182, %184
  %186 = getelementptr inbounds %struct.tilebox, ptr %180, i64 0, i32 10
  %187 = load i32, ptr %186, align 4, !tbaa !168
  %188 = getelementptr inbounds %struct.tilebox, ptr %180, i64 0, i32 9
  %189 = load i32, ptr %188, align 8, !tbaa !167
  %190 = sub nsw i32 %187, %189
  %191 = load i32, ptr %10, align 4, !tbaa !17
  %192 = icmp eq i32 %191, 0
  br i1 %192, label %193, label %197

193:                                              ; preds = %178
  %194 = add i32 %172, %108
  %195 = sdiv i32 %190, 2
  %196 = add nsw i32 %194, %195
  br label %204

197:                                              ; preds = %178
  %198 = sub nsw i64 %171, %14
  %199 = getelementptr inbounds double, ptr %12, i64 %198
  %200 = load double, ptr %199, align 8, !tbaa !36
  %201 = fmul double %200, %123
  %202 = fptosi double %201 to i32
  %203 = add i32 %172, %108
  br label %204

204:                                              ; preds = %197, %193
  %205 = phi i32 [ %203, %197 ], [ %194, %193 ]
  %206 = phi i32 [ %202, %197 ], [ %196, %193 ]
  %207 = getelementptr inbounds %struct.cellbox, ptr %174, i64 0, i32 2
  store i32 %206, ptr %207, align 4
  %208 = sdiv i32 %185, 2
  %209 = sub i32 %95, %185
  %210 = add i32 %209, %208
  %211 = getelementptr inbounds %struct.cellbox, ptr %174, i64 0, i32 3
  store i32 %210, ptr %211, align 8, !tbaa !165
  %212 = add i32 %205, %190
  %213 = add nsw i64 %171, 1
  %214 = icmp slt i64 %171, %15
  br i1 %214, label %170, label %217, !llvm.loop !697

215:                                              ; preds = %170
  %.lcssa12 = phi i64 [ %171, %170 ]
  %216 = trunc i64 %.lcssa12 to i32
  br label %217

217:                                              ; preds = %215, %204, %158, %124
  %218 = phi i32 [ %125, %124 ], [ %165, %158 ], [ %216, %215 ], [ %13, %204 ]
  %219 = add nsw i32 %218, 1
  %220 = icmp slt i32 %218, %5
  br i1 %220, label %124, label %221, !llvm.loop !698

221:                                              ; preds = %217, %30
  %222 = phi i32 [ %31, %30 ], [ %121, %217 ]
  %223 = phi i32 [ %32, %30 ], [ %122, %217 ]
  %224 = phi i32 [ %38, %30 ], [ %121, %217 ]
  %225 = phi i32 [ %37, %30 ], [ %122, %217 ]
  %226 = phi i32 [ %36, %30 ], [ %114, %217 ]
  %227 = phi i32 [ %39, %30 ], [ %219, %217 ]
  %228 = phi i32 [ %34, %30 ], [ %115, %217 ]
  %229 = phi i32 [ %33, %30 ], [ %108, %217 ]
  %230 = icmp slt i32 %227, %5
  br i1 %230, label %30, label %16, !llvm.loop !699

231:                                              ; preds = %409
  %.lcssa11 = phi i32 [ %410, %409 ]
  %.lcssa10 = phi i32 [ %412, %409 ]
  br i1 %6, label %232, label %827

232:                                              ; preds = %231
  %233 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %234 = load ptr, ptr @fixLRBT, align 8
  %235 = add nsw i32 %3, 1
  %236 = sitofp i32 %.lcssa17 to double
  %237 = load ptr, ptr @padspace, align 8
  %238 = add i32 %5, 1
  %239 = sext i32 %3 to i64
  %240 = sext i32 %5 to i64
  br label %429

241:                                              ; preds = %409, %17
  %242 = phi i32 [ %.lcssa13, %17 ], [ %412, %409 ]
  %243 = phi i32 [ %3, %17 ], [ %411, %409 ]
  %244 = phi i32 [ %.lcssa15, %17 ], [ %410, %409 ]
  %245 = add nsw i32 %243, 1
  %246 = sext i32 %245 to i64
  %247 = getelementptr inbounds ptr, ptr %18, i64 %246
  %248 = load ptr, ptr %247, align 8, !tbaa !7
  %249 = getelementptr inbounds %struct.cellbox, ptr %248, i64 0, i32 11
  %250 = load i32, ptr %249, align 8, !tbaa !363
  %251 = icmp eq i32 %250, 2
  br i1 %251, label %252, label %409

252:                                              ; preds = %241
  %253 = getelementptr inbounds %struct.cellbox, ptr %248, i64 0, i32 21
  %254 = load ptr, ptr %253, align 8, !tbaa !7
  %255 = getelementptr inbounds %struct.tilebox, ptr %254, i64 0, i32 10
  %256 = load i32, ptr %255, align 4, !tbaa !168
  %257 = getelementptr inbounds %struct.tilebox, ptr %254, i64 0, i32 9
  %258 = load i32, ptr %257, align 8, !tbaa !167
  %259 = sub nsw i32 %256, %258
  %260 = add nsw i32 %243, 2
  %261 = icmp sgt i32 %260, %5
  br i1 %261, label %287, label %262

262:                                              ; preds = %252
  %263 = sext i32 %260 to i64
  %264 = sub i32 %5, %243
  br label %265

265:                                              ; preds = %274, %262
  %266 = phi i64 [ %263, %262 ], [ %284, %274 ]
  %267 = phi i32 [ %259, %262 ], [ %283, %274 ]
  %268 = phi i32 [ 1, %262 ], [ %275, %274 ]
  %269 = getelementptr inbounds ptr, ptr %18, i64 %266
  %270 = load ptr, ptr %269, align 8, !tbaa !7
  %271 = getelementptr inbounds %struct.cellbox, ptr %270, i64 0, i32 11
  %272 = load i32, ptr %271, align 8, !tbaa !363
  %273 = icmp eq i32 %272, 2
  br i1 %273, label %274, label %287

274:                                              ; preds = %265
  %275 = add nuw nsw i32 %268, 1
  %276 = getelementptr inbounds %struct.cellbox, ptr %270, i64 0, i32 21
  %277 = load ptr, ptr %276, align 8, !tbaa !7
  %278 = getelementptr inbounds %struct.tilebox, ptr %277, i64 0, i32 10
  %279 = load i32, ptr %278, align 4, !tbaa !168
  %280 = getelementptr inbounds %struct.tilebox, ptr %277, i64 0, i32 9
  %281 = load i32, ptr %280, align 8, !tbaa !167
  %282 = add i32 %279, %267
  %283 = sub i32 %282, %281
  %284 = add nsw i64 %266, 1
  %285 = trunc i64 %284 to i32
  %286 = icmp eq i32 %27, %285
  br i1 %286, label %287, label %265, !llvm.loop !700

287:                                              ; preds = %274, %265, %252
  %288 = phi i32 [ 1, %252 ], [ %268, %265 ], [ %264, %274 ]
  %289 = phi i32 [ %259, %252 ], [ %267, %265 ], [ %283, %274 ]
  %290 = load i32, ptr %20, align 4, !tbaa !17
  %291 = icmp eq i32 %290, 0
  br i1 %291, label %292, label %297

292:                                              ; preds = %287
  %293 = sub nsw i32 %.lcssa14, %289
  %294 = add nuw nsw i32 %288, 1
  %295 = sdiv i32 %293, %294
  %296 = tail call i32 @llvm.smax.i32(i32 %295, i32 0)
  br label %299

297:                                              ; preds = %287
  %298 = tail call i32 @llvm.smax.i32(i32 %.lcssa14, i32 %289)
  br label %299

299:                                              ; preds = %297, %292
  %300 = phi i32 [ %293, %292 ], [ %298, %297 ]
  %301 = phi i32 [ %296, %292 ], [ %242, %297 ]
  %302 = icmp sgt i32 %289, %.lcssa14
  br i1 %302, label %303, label %307

303:                                              ; preds = %299
  %304 = sub nsw i32 %289, %.lcssa14
  %305 = sdiv i32 %304, 2
  %306 = add nsw i32 %305, %244
  br label %307

307:                                              ; preds = %303, %299
  %308 = phi i32 [ %306, %303 ], [ %244, %299 ]
  %309 = sitofp i32 %300 to double
  br label %310

310:                                              ; preds = %405, %307
  %311 = phi i32 [ %21, %307 ], [ %407, %405 ]
  %312 = phi i32 [ %3, %307 ], [ %406, %405 ]
  %313 = sext i32 %311 to i64
  %314 = getelementptr inbounds ptr, ptr %18, i64 %313
  %315 = load ptr, ptr %314, align 8, !tbaa !7
  %316 = getelementptr inbounds %struct.cellbox, ptr %315, i64 0, i32 11
  %317 = load i32, ptr %316, align 8, !tbaa !363
  %318 = icmp eq i32 %317, 2
  br i1 %318, label %319, label %405

319:                                              ; preds = %310
  %320 = getelementptr inbounds %struct.cellbox, ptr %315, i64 0, i32 21
  %321 = load ptr, ptr %320, align 8, !tbaa !7
  %322 = getelementptr inbounds %struct.tilebox, ptr %321, i64 0, i32 12
  %323 = load i32, ptr %322, align 4, !tbaa !170
  %324 = getelementptr inbounds %struct.tilebox, ptr %321, i64 0, i32 11
  %325 = load i32, ptr %324, align 8, !tbaa !169
  %326 = sub nsw i32 %323, %325
  %327 = getelementptr inbounds %struct.tilebox, ptr %321, i64 0, i32 10
  %328 = load i32, ptr %327, align 4, !tbaa !168
  %329 = getelementptr inbounds %struct.tilebox, ptr %321, i64 0, i32 9
  %330 = load i32, ptr %329, align 8, !tbaa !167
  %331 = sub nsw i32 %328, %330
  %332 = load i32, ptr %20, align 4, !tbaa !17
  %333 = icmp eq i32 %332, 0
  br i1 %333, label %334, label %337

334:                                              ; preds = %319
  %335 = sdiv i32 %331, 2
  %336 = add nsw i32 %335, %301
  br label %344

337:                                              ; preds = %319
  %338 = sub nsw i32 %311, %3
  %339 = sext i32 %338 to i64
  %340 = getelementptr inbounds double, ptr %22, i64 %339
  %341 = load double, ptr %340, align 8, !tbaa !36
  %342 = fmul double %341, %309
  %343 = fptosi double %342 to i32
  br label %344

344:                                              ; preds = %337, %334
  %345 = phi i32 [ %336, %334 ], [ %343, %337 ]
  %346 = getelementptr inbounds %struct.cellbox, ptr %315, i64 0, i32 2
  store i32 %345, ptr %346, align 4
  %347 = sdiv i32 %326, 2
  %348 = sitofp i32 %347 to double
  %349 = fadd double %26, %348
  %350 = fptosi double %349 to i32
  %351 = getelementptr inbounds %struct.cellbox, ptr %315, i64 0, i32 3
  store i32 %350, ptr %351, align 8, !tbaa !165
  %352 = add nsw i32 %312, 2
  %353 = icmp sgt i32 %352, %5
  br i1 %353, label %405, label %354

354:                                              ; preds = %344
  %355 = add nsw i32 %331, %301
  %356 = sext i32 %352 to i64
  br label %357

357:                                              ; preds = %391, %354
  %358 = phi i64 [ %356, %354 ], [ %401, %391 ]
  %359 = phi i32 [ %355, %354 ], [ %400, %391 ]
  %360 = getelementptr inbounds ptr, ptr %18, i64 %358
  %361 = load ptr, ptr %360, align 8, !tbaa !7
  %362 = getelementptr inbounds %struct.cellbox, ptr %361, i64 0, i32 11
  %363 = load i32, ptr %362, align 8, !tbaa !363
  %364 = icmp eq i32 %363, 2
  br i1 %364, label %365, label %403

365:                                              ; preds = %357
  %366 = getelementptr inbounds %struct.cellbox, ptr %361, i64 0, i32 21
  %367 = load ptr, ptr %366, align 8, !tbaa !7
  %368 = getelementptr inbounds %struct.tilebox, ptr %367, i64 0, i32 12
  %369 = load i32, ptr %368, align 4, !tbaa !170
  %370 = getelementptr inbounds %struct.tilebox, ptr %367, i64 0, i32 11
  %371 = load i32, ptr %370, align 8, !tbaa !169
  %372 = sub nsw i32 %369, %371
  %373 = getelementptr inbounds %struct.tilebox, ptr %367, i64 0, i32 10
  %374 = load i32, ptr %373, align 4, !tbaa !168
  %375 = getelementptr inbounds %struct.tilebox, ptr %367, i64 0, i32 9
  %376 = load i32, ptr %375, align 8, !tbaa !167
  %377 = sub nsw i32 %374, %376
  %378 = load i32, ptr %20, align 4, !tbaa !17
  %379 = icmp eq i32 %378, 0
  br i1 %379, label %380, label %384

380:                                              ; preds = %365
  %381 = add i32 %359, %301
  %382 = sdiv i32 %377, 2
  %383 = add nsw i32 %381, %382
  br label %391

384:                                              ; preds = %365
  %385 = sub nsw i64 %358, %28
  %386 = getelementptr inbounds double, ptr %22, i64 %385
  %387 = load double, ptr %386, align 8, !tbaa !36
  %388 = fmul double %387, %309
  %389 = fptosi double %388 to i32
  %390 = add i32 %359, %301
  br label %391

391:                                              ; preds = %384, %380
  %392 = phi i32 [ %390, %384 ], [ %381, %380 ]
  %393 = phi i32 [ %389, %384 ], [ %383, %380 ]
  %394 = getelementptr inbounds %struct.cellbox, ptr %361, i64 0, i32 2
  store i32 %393, ptr %394, align 4
  %395 = sdiv i32 %372, 2
  %396 = sitofp i32 %395 to double
  %397 = fadd double %26, %396
  %398 = fptosi double %397 to i32
  %399 = getelementptr inbounds %struct.cellbox, ptr %361, i64 0, i32 3
  store i32 %398, ptr %399, align 8, !tbaa !165
  %400 = add i32 %392, %377
  %401 = add nsw i64 %358, 1
  %402 = icmp slt i64 %358, %29
  br i1 %402, label %357, label %405, !llvm.loop !701

403:                                              ; preds = %357
  %.lcssa9 = phi i64 [ %358, %357 ]
  %404 = trunc i64 %.lcssa9 to i32
  br label %405

405:                                              ; preds = %403, %391, %344, %310
  %406 = phi i32 [ %311, %310 ], [ %352, %344 ], [ %404, %403 ], [ %27, %391 ]
  %407 = add nsw i32 %406, 1
  %408 = icmp slt i32 %406, %5
  br i1 %408, label %310, label %409, !llvm.loop !702

409:                                              ; preds = %405, %241
  %410 = phi i32 [ %244, %241 ], [ %308, %405 ]
  %411 = phi i32 [ %245, %241 ], [ %407, %405 ]
  %412 = phi i32 [ %242, %241 ], [ %301, %405 ]
  %413 = icmp slt i32 %411, %5
  br i1 %413, label %241, label %231, !llvm.loop !703

414:                                              ; preds = %623
  %.lcssa8 = phi i32 [ %624, %623 ]
  %.lcssa7 = phi i32 [ %625, %623 ]
  %.lcssa6 = phi i32 [ %628, %623 ]
  %.lcssa5 = phi i32 [ %630, %623 ]
  %.lcssa4 = phi i32 [ %631, %623 ]
  %.lcssa3 = phi i32 [ %632, %623 ]
  br i1 %6, label %415, label %827

415:                                              ; preds = %414
  %416 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %417 = load ptr, ptr @fixLRBT, align 8
  %418 = getelementptr inbounds i32, ptr %417, i64 1
  %419 = add nsw i32 %3, 1
  %420 = sitofp i32 %.lcssa17 to double
  %421 = load ptr, ptr @padspace, align 8
  %422 = sitofp i32 %.lcssa7 to double
  %423 = sub nsw i32 %.lcssa7, %.lcssa8
  %424 = sitofp i32 %423 to double
  %425 = tail call double @llvm.fmuladd.f64(double %424, double 1.000000e-01, double %422)
  %426 = add i32 %5, 1
  %427 = sext i32 %3 to i64
  %428 = sext i32 %5 to i64
  br label %639

429:                                              ; preds = %623, %232
  %430 = phi i32 [ 0, %232 ], [ %624, %623 ]
  %431 = phi i32 [ %2, %232 ], [ %625, %623 ]
  %432 = phi i32 [ 0, %232 ], [ %632, %623 ]
  %433 = phi i32 [ %.lcssa10, %232 ], [ %631, %623 ]
  %434 = phi i32 [ %1, %232 ], [ %630, %623 ]
  %435 = phi i32 [ %3, %232 ], [ %629, %623 ]
  %436 = phi i32 [ 0, %232 ], [ %628, %623 ]
  %437 = phi i32 [ %2, %232 ], [ %627, %623 ]
  %438 = phi i32 [ 0, %232 ], [ %626, %623 ]
  %439 = add nsw i32 %435, 1
  %440 = sext i32 %439 to i64
  %441 = getelementptr inbounds ptr, ptr %233, i64 %440
  %442 = load ptr, ptr %441, align 8, !tbaa !7
  %443 = getelementptr inbounds %struct.cellbox, ptr %442, i64 0, i32 11
  %444 = load i32, ptr %443, align 8, !tbaa !363
  %445 = icmp eq i32 %444, 1
  br i1 %445, label %446, label %623

446:                                              ; preds = %429
  %447 = getelementptr inbounds %struct.cellbox, ptr %442, i64 0, i32 21
  %448 = load ptr, ptr %447, align 8, !tbaa !7
  %449 = getelementptr inbounds %struct.tilebox, ptr %448, i64 0, i32 12
  %450 = load i32, ptr %449, align 4, !tbaa !170
  %451 = getelementptr inbounds %struct.tilebox, ptr %448, i64 0, i32 11
  %452 = load i32, ptr %451, align 8, !tbaa !169
  %453 = sub nsw i32 %450, %452
  %454 = getelementptr inbounds %struct.tilebox, ptr %448, i64 0, i32 10
  %455 = load i32, ptr %454, align 4, !tbaa !168
  %456 = getelementptr inbounds %struct.tilebox, ptr %448, i64 0, i32 9
  %457 = load i32, ptr %456, align 8, !tbaa !167
  %458 = sub nsw i32 %455, %457
  %459 = add nsw i32 %435, 2
  %460 = icmp sgt i32 %459, %5
  br i1 %460, label %493, label %461

461:                                              ; preds = %446
  %462 = sext i32 %459 to i64
  %463 = sub i32 %5, %435
  br label %464

464:                                              ; preds = %474, %461
  %465 = phi i64 [ %462, %461 ], [ %490, %474 ]
  %466 = phi i32 [ %458, %461 ], [ %483, %474 ]
  %467 = phi i32 [ %453, %461 ], [ %489, %474 ]
  %468 = phi i32 [ 1, %461 ], [ %475, %474 ]
  %469 = getelementptr inbounds ptr, ptr %233, i64 %465
  %470 = load ptr, ptr %469, align 8, !tbaa !7
  %471 = getelementptr inbounds %struct.cellbox, ptr %470, i64 0, i32 11
  %472 = load i32, ptr %471, align 8, !tbaa !363
  %473 = icmp eq i32 %472, 1
  br i1 %473, label %474, label %493

474:                                              ; preds = %464
  %475 = add nuw nsw i32 %468, 1
  %476 = getelementptr inbounds %struct.cellbox, ptr %470, i64 0, i32 21
  %477 = load ptr, ptr %476, align 8, !tbaa !7
  %478 = getelementptr inbounds %struct.tilebox, ptr %477, i64 0, i32 10
  %479 = load i32, ptr %478, align 4, !tbaa !168
  %480 = getelementptr inbounds %struct.tilebox, ptr %477, i64 0, i32 9
  %481 = load i32, ptr %480, align 8, !tbaa !167
  %482 = sub nsw i32 %479, %481
  %483 = tail call i32 @llvm.smax.i32(i32 %482, i32 %466)
  %484 = getelementptr inbounds %struct.tilebox, ptr %477, i64 0, i32 12
  %485 = load i32, ptr %484, align 4, !tbaa !170
  %486 = getelementptr inbounds %struct.tilebox, ptr %477, i64 0, i32 11
  %487 = load i32, ptr %486, align 8, !tbaa !169
  %488 = add i32 %485, %467
  %489 = sub i32 %488, %487
  %490 = add nsw i64 %465, 1
  %491 = trunc i64 %490 to i32
  %492 = icmp eq i32 %238, %491
  br i1 %492, label %493, label %464, !llvm.loop !704

493:                                              ; preds = %474, %464, %446
  %494 = phi i32 [ 1, %446 ], [ %468, %464 ], [ %463, %474 ]
  %495 = phi i32 [ %453, %446 ], [ %467, %464 ], [ %489, %474 ]
  %496 = phi i32 [ %458, %446 ], [ %466, %464 ], [ %483, %474 ]
  %497 = load i32, ptr %234, align 4, !tbaa !17
  %498 = icmp eq i32 %497, 0
  br i1 %498, label %499, label %504

499:                                              ; preds = %493
  %500 = sub nsw i32 %434, %495
  %501 = add nuw nsw i32 %494, 1
  %502 = sdiv i32 %500, %501
  %503 = tail call i32 @llvm.smax.i32(i32 %502, i32 0)
  br label %506

504:                                              ; preds = %493
  %505 = tail call i32 @llvm.smax.i32(i32 %434, i32 %495)
  br label %506

506:                                              ; preds = %504, %499
  %507 = phi i32 [ %500, %499 ], [ %505, %504 ]
  %508 = phi i32 [ %503, %499 ], [ %433, %504 ]
  %509 = icmp sgt i32 %495, %434
  br i1 %509, label %510, label %513

510:                                              ; preds = %506
  %511 = sub nsw i32 %495, %434
  %512 = sdiv i32 %511, 2
  br label %513

513:                                              ; preds = %510, %506
  %514 = phi i32 [ %512, %510 ], [ %436, %506 ]
  %515 = phi i32 [ %495, %510 ], [ %434, %506 ]
  %516 = sub nsw i32 %437, %438
  %517 = sitofp i32 %516 to double
  %518 = fmul double %517, 1.000000e-01
  %519 = fptosi double %518 to i32
  %520 = add nsw i32 %496, %519
  %521 = add nsw i32 %520, %437
  store i32 %521, ptr @blockr, align 4, !tbaa !17
  %522 = add nsw i32 %520, %438
  store i32 %522, ptr @blockl, align 4, !tbaa !17
  %523 = sitofp i32 %507 to double
  br label %524

524:                                              ; preds = %619, %513
  %525 = phi i32 [ %235, %513 ], [ %621, %619 ]
  %526 = phi i32 [ %3, %513 ], [ %620, %619 ]
  %527 = sext i32 %525 to i64
  %528 = getelementptr inbounds ptr, ptr %233, i64 %527
  %529 = load ptr, ptr %528, align 8, !tbaa !7
  %530 = getelementptr inbounds %struct.cellbox, ptr %529, i64 0, i32 11
  %531 = load i32, ptr %530, align 8, !tbaa !363
  %532 = icmp eq i32 %531, 1
  br i1 %532, label %533, label %619

533:                                              ; preds = %524
  %534 = getelementptr inbounds %struct.cellbox, ptr %529, i64 0, i32 21
  %535 = load ptr, ptr %534, align 8, !tbaa !7
  %536 = getelementptr inbounds %struct.tilebox, ptr %535, i64 0, i32 12
  %537 = load i32, ptr %536, align 4, !tbaa !170
  %538 = getelementptr inbounds %struct.tilebox, ptr %535, i64 0, i32 11
  %539 = load i32, ptr %538, align 8, !tbaa !169
  %540 = sub nsw i32 %537, %539
  %541 = getelementptr inbounds %struct.tilebox, ptr %535, i64 0, i32 10
  %542 = load i32, ptr %541, align 4, !tbaa !168
  %543 = getelementptr inbounds %struct.tilebox, ptr %535, i64 0, i32 9
  %544 = load i32, ptr %543, align 8, !tbaa !167
  %545 = sub nsw i32 %542, %544
  %546 = load i32, ptr %234, align 4, !tbaa !17
  %547 = icmp eq i32 %546, 0
  br i1 %547, label %548, label %552

548:                                              ; preds = %533
  %549 = sdiv i32 %540, 2
  %550 = add i32 %549, %508
  %551 = add i32 %550, %.lcssa17
  br label %559

552:                                              ; preds = %533
  %553 = sub nsw i32 %525, %3
  %554 = sext i32 %553 to i64
  %555 = getelementptr inbounds double, ptr %237, i64 %554
  %556 = load double, ptr %555, align 8, !tbaa !36
  %557 = tail call double @llvm.fmuladd.f64(double %556, double %523, double %236)
  %558 = fptosi double %557 to i32
  br label %559

559:                                              ; preds = %552, %548
  %560 = phi i32 [ %551, %548 ], [ %558, %552 ]
  %561 = getelementptr inbounds %struct.cellbox, ptr %529, i64 0, i32 3
  store i32 %560, ptr %561, align 8
  %562 = sdiv i32 %545, 2
  %563 = sub i32 %496, %545
  %564 = add i32 %563, %562
  %565 = getelementptr inbounds %struct.cellbox, ptr %529, i64 0, i32 2
  store i32 %564, ptr %565, align 4, !tbaa !164
  %566 = add nsw i32 %526, 2
  %567 = icmp sgt i32 %566, %5
  br i1 %567, label %619, label %568

568:                                              ; preds = %559
  %569 = add i32 %540, %508
  %570 = add i32 %569, %.lcssa17
  %571 = sext i32 %566 to i64
  br label %572

572:                                              ; preds = %606, %568
  %573 = phi i64 [ %571, %568 ], [ %615, %606 ]
  %574 = phi i32 [ %570, %568 ], [ %614, %606 ]
  %575 = getelementptr inbounds ptr, ptr %233, i64 %573
  %576 = load ptr, ptr %575, align 8, !tbaa !7
  %577 = getelementptr inbounds %struct.cellbox, ptr %576, i64 0, i32 11
  %578 = load i32, ptr %577, align 8, !tbaa !363
  %579 = icmp eq i32 %578, 1
  br i1 %579, label %580, label %617

580:                                              ; preds = %572
  %581 = getelementptr inbounds %struct.cellbox, ptr %576, i64 0, i32 21
  %582 = load ptr, ptr %581, align 8, !tbaa !7
  %583 = getelementptr inbounds %struct.tilebox, ptr %582, i64 0, i32 12
  %584 = load i32, ptr %583, align 4, !tbaa !170
  %585 = getelementptr inbounds %struct.tilebox, ptr %582, i64 0, i32 11
  %586 = load i32, ptr %585, align 8, !tbaa !169
  %587 = sub nsw i32 %584, %586
  %588 = getelementptr inbounds %struct.tilebox, ptr %582, i64 0, i32 10
  %589 = load i32, ptr %588, align 4, !tbaa !168
  %590 = getelementptr inbounds %struct.tilebox, ptr %582, i64 0, i32 9
  %591 = load i32, ptr %590, align 8, !tbaa !167
  %592 = sub nsw i32 %589, %591
  %593 = load i32, ptr %234, align 4, !tbaa !17
  %594 = icmp eq i32 %593, 0
  br i1 %594, label %595, label %599

595:                                              ; preds = %580
  %596 = add i32 %574, %508
  %597 = sdiv i32 %587, 2
  %598 = add nsw i32 %596, %597
  br label %606

599:                                              ; preds = %580
  %600 = sub nsw i64 %573, %239
  %601 = getelementptr inbounds double, ptr %237, i64 %600
  %602 = load double, ptr %601, align 8, !tbaa !36
  %603 = tail call double @llvm.fmuladd.f64(double %602, double %523, double %236)
  %604 = fptosi double %603 to i32
  %605 = add i32 %574, %508
  br label %606

606:                                              ; preds = %599, %595
  %607 = phi i32 [ %605, %599 ], [ %596, %595 ]
  %608 = phi i32 [ %604, %599 ], [ %598, %595 ]
  %609 = getelementptr inbounds %struct.cellbox, ptr %576, i64 0, i32 3
  store i32 %608, ptr %609, align 8
  %610 = sdiv i32 %592, 2
  %611 = sub i32 %496, %592
  %612 = add i32 %611, %610
  %613 = getelementptr inbounds %struct.cellbox, ptr %576, i64 0, i32 2
  store i32 %612, ptr %613, align 4, !tbaa !164
  %614 = add i32 %607, %587
  %615 = add nsw i64 %573, 1
  %616 = icmp slt i64 %573, %240
  br i1 %616, label %572, label %619, !llvm.loop !705

617:                                              ; preds = %572
  %.lcssa2 = phi i64 [ %573, %572 ]
  %618 = trunc i64 %.lcssa2 to i32
  br label %619

619:                                              ; preds = %617, %606, %559, %524
  %620 = phi i32 [ %525, %524 ], [ %566, %559 ], [ %618, %617 ], [ %238, %606 ]
  %621 = add nsw i32 %620, 1
  %622 = icmp slt i32 %620, %5
  br i1 %622, label %524, label %623, !llvm.loop !706

623:                                              ; preds = %619, %429
  %624 = phi i32 [ %430, %429 ], [ %522, %619 ]
  %625 = phi i32 [ %431, %429 ], [ %521, %619 ]
  %626 = phi i32 [ %438, %429 ], [ %522, %619 ]
  %627 = phi i32 [ %437, %429 ], [ %521, %619 ]
  %628 = phi i32 [ %436, %429 ], [ %514, %619 ]
  %629 = phi i32 [ %439, %429 ], [ %621, %619 ]
  %630 = phi i32 [ %434, %429 ], [ %515, %619 ]
  %631 = phi i32 [ %433, %429 ], [ %508, %619 ]
  %632 = phi i32 [ %432, %429 ], [ %520, %619 ]
  %633 = icmp slt i32 %629, %5
  br i1 %633, label %429, label %414, !llvm.loop !707

634:                                              ; preds = %809
  %.lcssa1 = phi i32 [ %810, %809 ]
  br i1 %6, label %635, label %827

635:                                              ; preds = %634
  %636 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %637 = sext i32 %3 to i64
  %638 = sext i32 %5 to i64
  br label %814

639:                                              ; preds = %809, %415
  %640 = phi i32 [ %.lcssa4, %415 ], [ %812, %809 ]
  %641 = phi i32 [ %3, %415 ], [ %811, %809 ]
  %642 = phi i32 [ %.lcssa6, %415 ], [ %810, %809 ]
  %643 = add nsw i32 %641, 1
  %644 = sext i32 %643 to i64
  %645 = getelementptr inbounds ptr, ptr %416, i64 %644
  %646 = load ptr, ptr %645, align 8, !tbaa !7
  %647 = getelementptr inbounds %struct.cellbox, ptr %646, i64 0, i32 11
  %648 = load i32, ptr %647, align 8, !tbaa !363
  %649 = icmp eq i32 %648, 3
  br i1 %649, label %650, label %809

650:                                              ; preds = %639
  %651 = getelementptr inbounds %struct.cellbox, ptr %646, i64 0, i32 21
  %652 = load ptr, ptr %651, align 8, !tbaa !7
  %653 = getelementptr inbounds %struct.tilebox, ptr %652, i64 0, i32 12
  %654 = load i32, ptr %653, align 4, !tbaa !170
  %655 = getelementptr inbounds %struct.tilebox, ptr %652, i64 0, i32 11
  %656 = load i32, ptr %655, align 8, !tbaa !169
  %657 = sub nsw i32 %654, %656
  %658 = add nsw i32 %641, 2
  %659 = icmp sgt i32 %658, %5
  br i1 %659, label %685, label %660

660:                                              ; preds = %650
  %661 = sext i32 %658 to i64
  %662 = sub i32 %5, %641
  br label %663

663:                                              ; preds = %672, %660
  %664 = phi i64 [ %661, %660 ], [ %682, %672 ]
  %665 = phi i32 [ %657, %660 ], [ %681, %672 ]
  %666 = phi i32 [ 1, %660 ], [ %673, %672 ]
  %667 = getelementptr inbounds ptr, ptr %416, i64 %664
  %668 = load ptr, ptr %667, align 8, !tbaa !7
  %669 = getelementptr inbounds %struct.cellbox, ptr %668, i64 0, i32 11
  %670 = load i32, ptr %669, align 8, !tbaa !363
  %671 = icmp eq i32 %670, 3
  br i1 %671, label %672, label %685

672:                                              ; preds = %663
  %673 = add nuw nsw i32 %666, 1
  %674 = getelementptr inbounds %struct.cellbox, ptr %668, i64 0, i32 21
  %675 = load ptr, ptr %674, align 8, !tbaa !7
  %676 = getelementptr inbounds %struct.tilebox, ptr %675, i64 0, i32 12
  %677 = load i32, ptr %676, align 4, !tbaa !170
  %678 = getelementptr inbounds %struct.tilebox, ptr %675, i64 0, i32 11
  %679 = load i32, ptr %678, align 8, !tbaa !169
  %680 = add i32 %677, %665
  %681 = sub i32 %680, %679
  %682 = add nsw i64 %664, 1
  %683 = trunc i64 %682 to i32
  %684 = icmp eq i32 %426, %683
  br i1 %684, label %685, label %663, !llvm.loop !708

685:                                              ; preds = %672, %663, %650
  %686 = phi i32 [ 1, %650 ], [ %666, %663 ], [ %662, %672 ]
  %687 = phi i32 [ %657, %650 ], [ %665, %663 ], [ %681, %672 ]
  %688 = load i32, ptr %418, align 4, !tbaa !17
  %689 = icmp eq i32 %688, 0
  br i1 %689, label %690, label %695

690:                                              ; preds = %685
  %691 = sub nsw i32 %.lcssa5, %687
  %692 = add nuw nsw i32 %686, 1
  %693 = sdiv i32 %691, %692
  %694 = tail call i32 @llvm.smax.i32(i32 %693, i32 0)
  br label %697

695:                                              ; preds = %685
  %696 = tail call i32 @llvm.smax.i32(i32 %.lcssa5, i32 %687)
  br label %697

697:                                              ; preds = %695, %690
  %698 = phi i32 [ %691, %690 ], [ %696, %695 ]
  %699 = phi i32 [ %694, %690 ], [ %640, %695 ]
  %700 = icmp sgt i32 %687, %.lcssa5
  br i1 %700, label %701, label %705

701:                                              ; preds = %697
  %702 = sub nsw i32 %687, %.lcssa5
  %703 = sdiv i32 %702, 2
  %704 = add nsw i32 %703, %642
  br label %705

705:                                              ; preds = %701, %697
  %706 = phi i32 [ %704, %701 ], [ %642, %697 ]
  %707 = sitofp i32 %698 to double
  br label %708

708:                                              ; preds = %805, %705
  %709 = phi i32 [ %419, %705 ], [ %807, %805 ]
  %710 = phi i32 [ %3, %705 ], [ %806, %805 ]
  %711 = sext i32 %709 to i64
  %712 = getelementptr inbounds ptr, ptr %416, i64 %711
  %713 = load ptr, ptr %712, align 8, !tbaa !7
  %714 = getelementptr inbounds %struct.cellbox, ptr %713, i64 0, i32 11
  %715 = load i32, ptr %714, align 8, !tbaa !363
  %716 = icmp eq i32 %715, 3
  br i1 %716, label %717, label %805

717:                                              ; preds = %708
  %718 = getelementptr inbounds %struct.cellbox, ptr %713, i64 0, i32 21
  %719 = load ptr, ptr %718, align 8, !tbaa !7
  %720 = getelementptr inbounds %struct.tilebox, ptr %719, i64 0, i32 12
  %721 = load i32, ptr %720, align 4, !tbaa !170
  %722 = getelementptr inbounds %struct.tilebox, ptr %719, i64 0, i32 11
  %723 = load i32, ptr %722, align 8, !tbaa !169
  %724 = sub nsw i32 %721, %723
  %725 = getelementptr inbounds %struct.tilebox, ptr %719, i64 0, i32 10
  %726 = load i32, ptr %725, align 4, !tbaa !168
  %727 = getelementptr inbounds %struct.tilebox, ptr %719, i64 0, i32 9
  %728 = load i32, ptr %727, align 8, !tbaa !167
  %729 = sub nsw i32 %726, %728
  %730 = load i32, ptr %418, align 4, !tbaa !17
  %731 = icmp eq i32 %730, 0
  br i1 %731, label %732, label %736

732:                                              ; preds = %717
  %733 = sdiv i32 %724, 2
  %734 = add i32 %733, %699
  %735 = add i32 %734, %.lcssa17
  br label %743

736:                                              ; preds = %717
  %737 = sub nsw i32 %709, %3
  %738 = sext i32 %737 to i64
  %739 = getelementptr inbounds double, ptr %421, i64 %738
  %740 = load double, ptr %739, align 8, !tbaa !36
  %741 = tail call double @llvm.fmuladd.f64(double %740, double %707, double %420)
  %742 = fptosi double %741 to i32
  br label %743

743:                                              ; preds = %736, %732
  %744 = phi i32 [ %735, %732 ], [ %742, %736 ]
  %745 = getelementptr inbounds %struct.cellbox, ptr %713, i64 0, i32 3
  store i32 %744, ptr %745, align 8
  %746 = sdiv i32 %729, 2
  %747 = sitofp i32 %746 to double
  %748 = fadd double %425, %747
  %749 = fptosi double %748 to i32
  %750 = getelementptr inbounds %struct.cellbox, ptr %713, i64 0, i32 2
  store i32 %749, ptr %750, align 4, !tbaa !164
  %751 = add nsw i32 %710, 2
  %752 = icmp sgt i32 %751, %5
  br i1 %752, label %805, label %753

753:                                              ; preds = %743
  %754 = add i32 %724, %699
  %755 = add i32 %754, %.lcssa17
  %756 = sext i32 %751 to i64
  br label %757

757:                                              ; preds = %791, %753
  %758 = phi i64 [ %756, %753 ], [ %801, %791 ]
  %759 = phi i32 [ %755, %753 ], [ %800, %791 ]
  %760 = getelementptr inbounds ptr, ptr %416, i64 %758
  %761 = load ptr, ptr %760, align 8, !tbaa !7
  %762 = getelementptr inbounds %struct.cellbox, ptr %761, i64 0, i32 11
  %763 = load i32, ptr %762, align 8, !tbaa !363
  %764 = icmp eq i32 %763, 3
  br i1 %764, label %765, label %803

765:                                              ; preds = %757
  %766 = getelementptr inbounds %struct.cellbox, ptr %761, i64 0, i32 21
  %767 = load ptr, ptr %766, align 8, !tbaa !7
  %768 = getelementptr inbounds %struct.tilebox, ptr %767, i64 0, i32 12
  %769 = load i32, ptr %768, align 4, !tbaa !170
  %770 = getelementptr inbounds %struct.tilebox, ptr %767, i64 0, i32 11
  %771 = load i32, ptr %770, align 8, !tbaa !169
  %772 = sub nsw i32 %769, %771
  %773 = getelementptr inbounds %struct.tilebox, ptr %767, i64 0, i32 10
  %774 = load i32, ptr %773, align 4, !tbaa !168
  %775 = getelementptr inbounds %struct.tilebox, ptr %767, i64 0, i32 9
  %776 = load i32, ptr %775, align 8, !tbaa !167
  %777 = sub nsw i32 %774, %776
  %778 = load i32, ptr %418, align 4, !tbaa !17
  %779 = icmp eq i32 %778, 0
  br i1 %779, label %780, label %784

780:                                              ; preds = %765
  %781 = add i32 %759, %699
  %782 = sdiv i32 %772, 2
  %783 = add nsw i32 %781, %782
  br label %791

784:                                              ; preds = %765
  %785 = sub nsw i64 %758, %427
  %786 = getelementptr inbounds double, ptr %421, i64 %785
  %787 = load double, ptr %786, align 8, !tbaa !36
  %788 = tail call double @llvm.fmuladd.f64(double %787, double %707, double %420)
  %789 = fptosi double %788 to i32
  %790 = add i32 %759, %699
  br label %791

791:                                              ; preds = %784, %780
  %792 = phi i32 [ %790, %784 ], [ %781, %780 ]
  %793 = phi i32 [ %789, %784 ], [ %783, %780 ]
  %794 = getelementptr inbounds %struct.cellbox, ptr %761, i64 0, i32 3
  store i32 %793, ptr %794, align 8
  %795 = sdiv i32 %777, 2
  %796 = sitofp i32 %795 to double
  %797 = fadd double %425, %796
  %798 = fptosi double %797 to i32
  %799 = getelementptr inbounds %struct.cellbox, ptr %761, i64 0, i32 2
  store i32 %798, ptr %799, align 4, !tbaa !164
  %800 = add i32 %792, %772
  %801 = add nsw i64 %758, 1
  %802 = icmp slt i64 %758, %428
  br i1 %802, label %757, label %805, !llvm.loop !709

803:                                              ; preds = %757
  %.lcssa = phi i64 [ %758, %757 ]
  %804 = trunc i64 %.lcssa to i32
  br label %805

805:                                              ; preds = %803, %791, %743, %708
  %806 = phi i32 [ %709, %708 ], [ %751, %743 ], [ %804, %803 ], [ %426, %791 ]
  %807 = add nsw i32 %806, 1
  %808 = icmp slt i32 %806, %5
  br i1 %808, label %708, label %809, !llvm.loop !710

809:                                              ; preds = %805, %639
  %810 = phi i32 [ %642, %639 ], [ %706, %805 ]
  %811 = phi i32 [ %643, %639 ], [ %807, %805 ]
  %812 = phi i32 [ %640, %639 ], [ %699, %805 ]
  %813 = icmp slt i32 %811, %5
  br i1 %813, label %639, label %634, !llvm.loop !711

814:                                              ; preds = %825, %635
  %815 = phi i64 [ %637, %635 ], [ %816, %825 ]
  %816 = add nsw i64 %815, 1
  %817 = getelementptr inbounds ptr, ptr %636, i64 %816
  %818 = load ptr, ptr %817, align 8, !tbaa !7
  %819 = getelementptr inbounds %struct.cellbox, ptr %818, i64 0, i32 11
  %820 = load i32, ptr %819, align 8, !tbaa !363
  switch i32 %820, label %825 [
    i32 2, label %821
    i32 4, label %821
  ]

821:                                              ; preds = %814, %814
  %822 = getelementptr inbounds %struct.cellbox, ptr %818, i64 0, i32 2
  %823 = load i32, ptr %822, align 4, !tbaa !164
  %824 = add nsw i32 %823, %.lcssa3
  store i32 %824, ptr %822, align 4, !tbaa !164
  br label %825

825:                                              ; preds = %821, %814
  %826 = icmp slt i64 %816, %638
  br i1 %826, label %814, label %827, !llvm.loop !712

827:                                              ; preds = %825, %634, %414, %231, %16, %0
  %828 = phi i32 [ %.lcssa1, %634 ], [ %.lcssa6, %414 ], [ 0, %231 ], [ 0, %16 ], [ 0, %0 ], [ %.lcssa1, %825 ]
  %829 = phi i32 [ %.lcssa11, %634 ], [ %.lcssa11, %414 ], [ %.lcssa11, %231 ], [ %.lcssa15, %16 ], [ 0, %0 ], [ %.lcssa11, %825 ]
  %830 = phi i32 [ %.lcssa17, %634 ], [ %.lcssa17, %414 ], [ %.lcssa17, %231 ], [ %.lcssa17, %16 ], [ 0, %0 ], [ %.lcssa17, %825 ]
  %831 = phi i32 [ %.lcssa16, %634 ], [ %.lcssa16, %414 ], [ %.lcssa16, %231 ], [ %.lcssa16, %16 ], [ %1, %0 ], [ %.lcssa16, %825 ]
  %832 = phi i32 [ %.lcssa8, %634 ], [ %.lcssa8, %414 ], [ 0, %231 ], [ 0, %16 ], [ 0, %0 ], [ %.lcssa8, %825 ]
  %833 = phi i32 [ %.lcssa7, %634 ], [ %.lcssa7, %414 ], [ %2, %231 ], [ %2, %16 ], [ %2, %0 ], [ %.lcssa7, %825 ]
  %834 = add nsw i32 %832, %829
  store i32 %834, ptr @blockl, align 4, !tbaa !17
  %835 = add nsw i32 %833, %829
  store i32 %835, ptr @blockr, align 4, !tbaa !17
  %836 = add nsw i32 %830, %828
  store i32 %836, ptr @blockb, align 4, !tbaa !17
  %837 = add nsw i32 %831, %828
  store i32 %837, ptr @blockt, align 4, !tbaa !17
  br i1 %6, label %838, label %877

838:                                              ; preds = %827
  %839 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %840 = shl nsw i32 %829, 1
  %841 = sext i32 %3 to i64
  %842 = sext i32 %5 to i64
  br label %849

843:                                              ; preds = %861
  br i1 %6, label %844, label %877

844:                                              ; preds = %843
  %845 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %846 = shl nsw i32 %828, 1
  %847 = sext i32 %3 to i64
  %848 = sext i32 %5 to i64
  br label %863

849:                                              ; preds = %861, %838
  %850 = phi i64 [ %841, %838 ], [ %851, %861 ]
  %851 = add nsw i64 %850, 1
  %852 = getelementptr inbounds ptr, ptr %839, i64 %851
  %853 = load ptr, ptr %852, align 8, !tbaa !7
  %854 = getelementptr inbounds %struct.cellbox, ptr %853, i64 0, i32 11
  %855 = load i32, ptr %854, align 8, !tbaa !363
  %856 = icmp eq i32 %855, 3
  br i1 %856, label %857, label %861

857:                                              ; preds = %849
  %858 = getelementptr inbounds %struct.cellbox, ptr %853, i64 0, i32 2
  %859 = load i32, ptr %858, align 4, !tbaa !164
  %860 = add nsw i32 %859, %840
  store i32 %860, ptr %858, align 4, !tbaa !164
  br label %861

861:                                              ; preds = %857, %849
  %862 = icmp slt i64 %851, %842
  br i1 %862, label %849, label %843, !llvm.loop !713

863:                                              ; preds = %875, %844
  %864 = phi i64 [ %847, %844 ], [ %865, %875 ]
  %865 = add nsw i64 %864, 1
  %866 = getelementptr inbounds ptr, ptr %845, i64 %865
  %867 = load ptr, ptr %866, align 8, !tbaa !7
  %868 = getelementptr inbounds %struct.cellbox, ptr %867, i64 0, i32 11
  %869 = load i32, ptr %868, align 8, !tbaa !363
  %870 = icmp eq i32 %869, 2
  br i1 %870, label %871, label %875

871:                                              ; preds = %863
  %872 = getelementptr inbounds %struct.cellbox, ptr %867, i64 0, i32 3
  %873 = load i32, ptr %872, align 8, !tbaa !165
  %874 = add nsw i32 %873, %846
  store i32 %874, ptr %872, align 8, !tbaa !165
  br label %875

875:                                              ; preds = %871, %863
  %876 = icmp slt i64 %865, %848
  br i1 %876, label %863, label %877, !llvm.loop !714

877:                                              ; preds = %875, %843, %827
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @placepin() #0 {
  %1 = load i32, ptr @numcells, align 4, !tbaa !17
  %2 = icmp slt i32 %1, 1
  br i1 %2, label %328, label %3

3:                                                ; preds = %0
  %4 = load ptr, ptr @cellarray, align 8, !tbaa !7
  br label %5

5:                                                ; preds = %322, %3
  %6 = phi i32 [ %1, %3 ], [ %323, %322 ]
  %7 = phi i64 [ 1, %3 ], [ %325, %322 ]
  %8 = phi i32 [ undef, %3 ], [ %324, %322 ]
  %9 = getelementptr inbounds ptr, ptr %4, i64 %7
  %10 = load ptr, ptr %9, align 8, !tbaa !7
  %11 = getelementptr inbounds %struct.cellbox, ptr %10, i64 0, i32 10
  %12 = load i32, ptr %11, align 4, !tbaa !297
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %322, label %14

14:                                               ; preds = %5
  %15 = getelementptr inbounds %struct.cellbox, ptr %10, i64 0, i32 17
  %16 = load i32, ptr %15, align 8, !tbaa !227
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %322, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.cellbox, ptr %10, i64 0, i32 20
  %20 = load ptr, ptr %19, align 8, !tbaa !226
  %21 = getelementptr inbounds %struct.cellbox, ptr %10, i64 0, i32 19
  %22 = load ptr, ptr %21, align 8, !tbaa !224
  %23 = getelementptr inbounds %struct.cellbox, ptr %10, i64 0, i32 18
  %24 = load i32, ptr %23, align 4, !tbaa !223
  %25 = icmp slt i32 %24, 1
  br i1 %25, label %322, label %26

26:                                               ; preds = %18
  %27 = getelementptr inbounds %struct.cellbox, ptr %10, i64 0, i32 22
  %28 = getelementptr inbounds %struct.cellbox, ptr %10, i64 0, i32 7
  %29 = sext i32 %24 to i64
  br label %30

30:                                               ; preds = %316, %26
  %31 = phi i64 [ 1, %26 ], [ %318, %316 ]
  %32 = phi i32 [ %8, %26 ], [ %317, %316 ]
  %33 = getelementptr inbounds %struct.uncombox.25, ptr %20, i64 %31, i32 7
  %34 = load i32, ptr %33, align 4, !tbaa !251
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %316, label %36

36:                                               ; preds = %30
  %37 = getelementptr inbounds %struct.uncombox.25, ptr %20, i64 %31, i32 4
  %38 = load i32, ptr %37, align 4, !tbaa !715
  switch i32 %38, label %137 [
    i32 1, label %39
    i32 2, label %72
  ]

39:                                               ; preds = %36
  %40 = load ptr, ptr %27, align 8, !tbaa !716
  %41 = getelementptr inbounds %struct.uncombox.25, ptr %20, i64 %31, i32 5
  %42 = load i32, ptr %41, align 4, !tbaa !717
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds %struct.bellbox, ptr %40, i64 %43
  %45 = load i32, ptr %44, align 4, !tbaa !718
  %46 = getelementptr inbounds %struct.bellbox, ptr %40, i64 %43, i32 1
  %47 = load i32, ptr %46, align 4, !tbaa !720
  %48 = icmp sgt i32 %45, %47
  br i1 %48, label %61, label %49

49:                                               ; preds = %39
  %50 = sext i32 %45 to i64
  %51 = add i32 %47, 1
  br label %52

52:                                               ; preds = %52, %49
  %53 = phi i64 [ %50, %49 ], [ %58, %52 ]
  %54 = phi i32 [ 0, %49 ], [ %57, %52 ]
  %55 = getelementptr inbounds %struct.contentbox, ptr %22, i64 %53, i32 2
  %56 = load i32, ptr %55, align 4, !tbaa !316
  %57 = add nsw i32 %56, %54
  %58 = add nsw i64 %53, 1
  %59 = trunc i64 %58 to i32
  %60 = icmp eq i32 %51, %59
  br i1 %60, label %61, label %52, !llvm.loop !721

61:                                               ; preds = %52, %39
  %62 = phi i32 [ 0, %39 ], [ %57, %52 ]
  %63 = icmp slt i32 %62, %34
  br i1 %63, label %64, label %168

64:                                               ; preds = %61
  %.lcssa12 = phi i64 [ %7, %61 ]
  %65 = trunc i64 %.lcssa12 to i32
  %66 = load ptr, ptr @fpo, align 8, !tbaa !7
  %67 = tail call i64 @fwrite(ptr nonnull @.str.530, i64 35, i64 1, ptr %66)
  %68 = load ptr, ptr @fpo, align 8, !tbaa !7
  %69 = tail call i64 @fwrite(ptr nonnull @.str.1.531, i64 35, i64 1, ptr %68)
  %70 = load ptr, ptr @fpo, align 8, !tbaa !7
  %71 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %70, ptr noundef nonnull @.str.2.532, i32 noundef %65) #43
  tail call void @exit(i32 noundef 0) #49
  unreachable

72:                                               ; preds = %36
  %73 = load ptr, ptr %27, align 8, !tbaa !716
  %74 = getelementptr inbounds %struct.uncombox.25, ptr %20, i64 %31, i32 5
  %75 = load i32, ptr %74, align 4, !tbaa !717
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds %struct.bellbox, ptr %73, i64 %76
  %78 = load i32, ptr %77, align 4, !tbaa !718
  %79 = getelementptr inbounds %struct.bellbox, ptr %73, i64 %76, i32 1
  %80 = load i32, ptr %79, align 4, !tbaa !720
  %81 = icmp sgt i32 %78, %80
  br i1 %81, label %94, label %82

82:                                               ; preds = %72
  %83 = sext i32 %78 to i64
  %84 = add i32 %80, 1
  br label %85

85:                                               ; preds = %85, %82
  %86 = phi i64 [ %83, %82 ], [ %91, %85 ]
  %87 = phi i32 [ 0, %82 ], [ %90, %85 ]
  %88 = getelementptr inbounds %struct.contentbox, ptr %22, i64 %86, i32 2
  %89 = load i32, ptr %88, align 4, !tbaa !316
  %90 = add nsw i32 %89, %87
  %91 = add nsw i64 %86, 1
  %92 = trunc i64 %91 to i32
  %93 = icmp eq i32 %84, %92
  br i1 %93, label %94, label %85, !llvm.loop !722

94:                                               ; preds = %85, %72
  %95 = phi i32 [ 0, %72 ], [ %90, %85 ]
  %96 = icmp slt i32 %95, %34
  br i1 %96, label %97, label %105

97:                                               ; preds = %94
  %.lcssa10 = phi i64 [ %7, %94 ]
  %98 = trunc i64 %.lcssa10 to i32
  %99 = load ptr, ptr @fpo, align 8, !tbaa !7
  %100 = tail call i64 @fwrite(ptr nonnull @.str.530, i64 35, i64 1, ptr %99)
  %101 = load ptr, ptr @fpo, align 8, !tbaa !7
  %102 = tail call i64 @fwrite(ptr nonnull @.str.1.531, i64 35, i64 1, ptr %101)
  %103 = load ptr, ptr @fpo, align 8, !tbaa !7
  %104 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %103, ptr noundef nonnull @.str.2.532, i32 noundef %98) #43
  tail call void @exit(i32 noundef 0) #49
  unreachable

105:                                              ; preds = %94
  %106 = getelementptr inbounds %struct.uncombox.25, ptr %20, i64 %31, i32 6
  %107 = load i32, ptr %106, align 4, !tbaa !723
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds %struct.bellbox, ptr %73, i64 %108
  %110 = load i32, ptr %109, align 4, !tbaa !718
  %111 = getelementptr inbounds %struct.bellbox, ptr %73, i64 %108, i32 1
  %112 = load i32, ptr %111, align 4, !tbaa !720
  %113 = icmp sgt i32 %110, %112
  br i1 %113, label %126, label %114

114:                                              ; preds = %105
  %115 = sext i32 %110 to i64
  %116 = add i32 %112, 1
  br label %117

117:                                              ; preds = %117, %114
  %118 = phi i64 [ %115, %114 ], [ %123, %117 ]
  %119 = phi i32 [ 0, %114 ], [ %122, %117 ]
  %120 = getelementptr inbounds %struct.contentbox, ptr %22, i64 %118, i32 2
  %121 = load i32, ptr %120, align 4, !tbaa !316
  %122 = add nsw i32 %121, %119
  %123 = add nsw i64 %118, 1
  %124 = trunc i64 %123 to i32
  %125 = icmp eq i32 %116, %124
  br i1 %125, label %126, label %117, !llvm.loop !724

126:                                              ; preds = %117, %105
  %127 = phi i32 [ 0, %105 ], [ %122, %117 ]
  %128 = icmp slt i32 %127, %34
  br i1 %128, label %129, label %168

129:                                              ; preds = %126
  %.lcssa11 = phi i64 [ %7, %126 ]
  %130 = trunc i64 %.lcssa11 to i32
  %131 = load ptr, ptr @fpo, align 8, !tbaa !7
  %132 = tail call i64 @fwrite(ptr nonnull @.str.530, i64 35, i64 1, ptr %131)
  %133 = load ptr, ptr @fpo, align 8, !tbaa !7
  %134 = tail call i64 @fwrite(ptr nonnull @.str.1.531, i64 35, i64 1, ptr %133)
  %135 = load ptr, ptr @fpo, align 8, !tbaa !7
  %136 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %135, ptr noundef nonnull @.str.2.532, i32 noundef %130) #43
  tail call void @exit(i32 noundef 0) #49
  unreachable

137:                                              ; preds = %36
  %138 = icmp sgt i32 %38, 2
  br i1 %138, label %139, label %185

139:                                              ; preds = %137
  %140 = load ptr, ptr %27, align 8, !tbaa !716
  %141 = load i32, ptr %28, align 8, !tbaa !350
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds %struct.bellbox, ptr %140, i64 %142, i32 1
  %144 = load i32, ptr %143, align 4, !tbaa !720
  %145 = icmp slt i32 %144, 1
  br i1 %145, label %157, label %146

146:                                              ; preds = %139
  %147 = add nuw i32 %144, 1
  %148 = zext i32 %147 to i64
  br label %149

149:                                              ; preds = %149, %146
  %150 = phi i64 [ 1, %146 ], [ %155, %149 ]
  %151 = phi i32 [ 0, %146 ], [ %154, %149 ]
  %152 = getelementptr inbounds %struct.contentbox, ptr %22, i64 %150, i32 2
  %153 = load i32, ptr %152, align 4, !tbaa !316
  %154 = add nsw i32 %153, %151
  %155 = add nuw nsw i64 %150, 1
  %156 = icmp eq i64 %155, %148
  br i1 %156, label %157, label %149, !llvm.loop !725

157:                                              ; preds = %149, %139
  %158 = phi i32 [ 0, %139 ], [ %154, %149 ]
  %159 = icmp slt i32 %158, %34
  br i1 %159, label %160, label %168

160:                                              ; preds = %157
  %.lcssa13 = phi i64 [ %7, %157 ]
  %161 = trunc i64 %.lcssa13 to i32
  %162 = load ptr, ptr @fpo, align 8, !tbaa !7
  %163 = tail call i64 @fwrite(ptr nonnull @.str.530, i64 35, i64 1, ptr %162)
  %164 = load ptr, ptr @fpo, align 8, !tbaa !7
  %165 = tail call i64 @fwrite(ptr nonnull @.str.1.531, i64 35, i64 1, ptr %164)
  %166 = load ptr, ptr @fpo, align 8, !tbaa !7
  %167 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %166, ptr noundef nonnull @.str.2.532, i32 noundef %161) #43
  tail call void @exit(i32 noundef 0) #49
  unreachable

168:                                              ; preds = %157, %126, %61
  %169 = icmp sgt i32 %38, 2
  br i1 %169, label %170, label %185

170:                                              ; preds = %168
  %171 = load i32, ptr @randVar, align 4, !tbaa !17
  br label %172

172:                                              ; preds = %172, %170
  %173 = phi i32 [ %171, %170 ], [ %177, %172 ]
  %174 = phi i32 [ %38, %170 ], [ %182, %172 ]
  %175 = sitofp i32 %174 to double
  %176 = mul nsw i32 %173, 1103515245
  %177 = add nsw i32 %176, 12345
  store i32 %177, ptr @randVar, align 4, !tbaa !17
  %178 = and i32 %177, 2147483647
  %179 = sitofp i32 %178 to double
  %180 = fdiv double %179, 0x41DFFFFFFFC00000
  %181 = fmul double %180, %175
  %182 = fptosi double %181 to i32
  %183 = load i32, ptr %37, align 4, !tbaa !715
  %184 = icmp eq i32 %183, %182
  br i1 %184, label %172, label %212, !llvm.loop !726

185:                                              ; preds = %168, %137
  switch i32 %38, label %214 [
    i32 2, label %186
    i32 1, label %209
  ]

186:                                              ; preds = %185
  %187 = load i32, ptr @randVar, align 4, !tbaa !17
  br label %188

188:                                              ; preds = %188, %186
  %189 = phi i32 [ %187, %186 ], [ %193, %188 ]
  %190 = phi i32 [ 2, %186 ], [ %198, %188 ]
  %191 = sitofp i32 %190 to double
  %192 = mul nsw i32 %189, 1103515245
  %193 = add nsw i32 %192, 12345
  store i32 %193, ptr @randVar, align 4, !tbaa !17
  %194 = and i32 %193, 2147483647
  %195 = sitofp i32 %194 to double
  %196 = fdiv double %195, 0x41DFFFFFFFC00000
  %197 = fmul double %196, %191
  %198 = fptosi double %197 to i32
  %199 = load i32, ptr %37, align 4, !tbaa !715
  %200 = icmp eq i32 %199, %198
  br i1 %200, label %188, label %201, !llvm.loop !727

201:                                              ; preds = %188
  %.lcssa1 = phi i32 [ %198, %188 ]
  %.lcssa = phi i32 [ %199, %188 ]
  %202 = icmp eq i32 %.lcssa1, 0
  br i1 %202, label %203, label %206

203:                                              ; preds = %201
  %204 = getelementptr inbounds %struct.uncombox.25, ptr %20, i64 %31, i32 5
  %205 = load i32, ptr %204, align 4, !tbaa !717
  br label %214

206:                                              ; preds = %201
  %207 = getelementptr inbounds %struct.uncombox.25, ptr %20, i64 %31, i32 6
  %208 = load i32, ptr %207, align 4, !tbaa !723
  br label %214

209:                                              ; preds = %185
  %210 = getelementptr inbounds %struct.uncombox.25, ptr %20, i64 %31, i32 5
  %211 = load i32, ptr %210, align 4, !tbaa !717
  br label %221

212:                                              ; preds = %172
  %.lcssa3 = phi i32 [ %182, %172 ]
  %.lcssa2 = phi i32 [ %183, %172 ]
  %213 = add nsw i32 %.lcssa3, 1
  br label %214

214:                                              ; preds = %212, %206, %203, %185
  %215 = phi i32 [ %.lcssa2, %212 ], [ %38, %185 ], [ %.lcssa, %206 ], [ %.lcssa, %203 ]
  %216 = phi i32 [ %213, %212 ], [ %32, %185 ], [ %208, %206 ], [ %205, %203 ]
  %217 = icmp eq i32 %215, 0
  br i1 %217, label %218, label %221

218:                                              ; preds = %214
  %219 = getelementptr inbounds %struct.uncombox.25, ptr %20, i64 %31, i32 5
  %220 = load i32, ptr %219, align 4, !tbaa !717
  br label %231

221:                                              ; preds = %214, %209
  %222 = phi i32 [ %211, %209 ], [ %216, %214 ]
  %223 = load ptr, ptr %27, align 8, !tbaa !716
  %224 = sext i32 %222 to i64
  %225 = getelementptr inbounds %struct.bellbox, ptr %223, i64 %224
  %226 = load i32, ptr %225, align 4, !tbaa !718
  %227 = getelementptr inbounds %struct.bellbox, ptr %223, i64 %224, i32 1
  %228 = load i32, ptr %227, align 4, !tbaa !720
  %229 = sub i32 %228, %226
  %230 = add i32 %229, 1
  br label %231

231:                                              ; preds = %221, %218
  %232 = phi i32 [ %216, %218 ], [ %222, %221 ]
  %233 = phi i32 [ %220, %218 ], [ %226, %221 ]
  %234 = phi i32 [ %220, %218 ], [ %228, %221 ]
  %235 = phi i32 [ 1, %218 ], [ %230, %221 ]
  %236 = sitofp i32 %235 to double
  %237 = sext i32 %233 to i64
  %238 = add i32 %234, 1
  %239 = load i32, ptr @randVar, align 4, !tbaa !17
  br label %240

240:                                              ; preds = %251, %231
  %241 = phi i32 [ %239, %231 ], [ %243, %251 ]
  %242 = mul nsw i32 %241, 1103515245
  %243 = add nsw i32 %242, 12345
  store i32 %243, ptr @randVar, align 4, !tbaa !17
  %244 = and i32 %243, 2147483647
  %245 = sitofp i32 %244 to double
  %246 = fdiv double %245, 0x41DFFFFFFFC00000
  %247 = fmul double %246, %236
  %248 = fptosi double %247 to i32
  %249 = add nsw i32 %233, %248
  %250 = icmp sgt i32 %249, %234
  br i1 %250, label %251, label %252

251:                                              ; preds = %264, %240
  br label %240

252:                                              ; preds = %240
  %253 = load i32, ptr %33, align 4, !tbaa !251
  %254 = sext i32 %248 to i64
  %255 = add nsw i64 %237, %254
  br label %256

256:                                              ; preds = %264, %252
  %257 = phi i32 [ %249, %252 ], [ %268, %264 ]
  %258 = phi i64 [ %255, %252 ], [ %265, %264 ]
  %259 = phi i32 [ 0, %252 ], [ %262, %264 ]
  %260 = getelementptr inbounds %struct.contentbox, ptr %22, i64 %258, i32 2
  %261 = load i32, ptr %260, align 4, !tbaa !316
  %262 = add nsw i32 %261, %259
  %263 = icmp slt i32 %262, %253
  br i1 %263, label %264, label %269, !llvm.loop !728

264:                                              ; preds = %256
  %265 = add nsw i64 %258, 1
  %266 = trunc i64 %265 to i32
  %267 = icmp eq i32 %238, %266
  %268 = add i32 %257, 1
  br i1 %267, label %251, label %256

269:                                              ; preds = %256
  %.lcssa8 = phi i32 [ %253, %256 ]
  %.lcssa7 = phi i64 [ %255, %256 ]
  %.lcssa6 = phi i32 [ %249, %256 ]
  %.lcssa5 = phi i32 [ %257, %256 ]
  %.lcssa4 = phi i64 [ %258, %256 ]
  %270 = trunc i64 %.lcssa4 to i32
  %271 = icmp slt i32 %.lcssa6, %270
  %272 = trunc i64 %31 to i32
  br i1 %271, label %273, label %299

273:                                              ; preds = %269
  %274 = sext i32 %.lcssa5 to i64
  br label %275

275:                                              ; preds = %296, %273
  %276 = phi i64 [ %.lcssa7, %273 ], [ %297, %296 ]
  %277 = phi i32 [ %272, %273 ], [ %285, %296 ]
  %278 = phi i32 [ 0, %273 ], [ %282, %296 ]
  %279 = getelementptr inbounds %struct.contentbox, ptr %22, i64 %276
  %280 = getelementptr inbounds %struct.contentbox, ptr %22, i64 %276, i32 2
  %281 = load i32, ptr %280, align 4, !tbaa !316
  %282 = add nsw i32 %281, %278
  %283 = load i32, ptr %279, align 4, !tbaa !232
  %284 = add nsw i32 %283, %281
  store i32 %284, ptr %279, align 4, !tbaa !232
  %285 = add nsw i32 %281, %277
  %286 = icmp sgt i32 %281, 0
  br i1 %286, label %287, label %296

287:                                              ; preds = %275
  %288 = sext i32 %277 to i64
  %289 = sext i32 %285 to i64
  %290 = trunc i64 %276 to i32
  br label %291

291:                                              ; preds = %291, %287
  %292 = phi i64 [ %288, %287 ], [ %294, %291 ]
  %293 = getelementptr inbounds %struct.uncombox.25, ptr %20, i64 %292, i32 1
  store i32 %290, ptr %293, align 4, !tbaa !250
  %294 = add nsw i64 %292, 1
  %295 = icmp slt i64 %294, %289
  br i1 %295, label %291, label %296, !llvm.loop !729

296:                                              ; preds = %291, %275
  %297 = add nsw i64 %276, 1
  %298 = icmp eq i64 %297, %274
  br i1 %298, label %299, label %275, !llvm.loop !730

299:                                              ; preds = %296, %269
  %300 = phi i32 [ 0, %269 ], [ %282, %296 ]
  %301 = phi i32 [ %272, %269 ], [ %285, %296 ]
  %302 = sub nsw i32 %.lcssa8, %300
  %303 = getelementptr inbounds %struct.contentbox, ptr %22, i64 %.lcssa4
  %304 = load i32, ptr %303, align 4, !tbaa !232
  %305 = add nsw i32 %304, %302
  store i32 %305, ptr %303, align 4, !tbaa !232
  %306 = icmp sgt i32 %302, 0
  br i1 %306, label %307, label %316

307:                                              ; preds = %299
  %308 = add nsw i32 %301, %302
  %309 = sext i32 %301 to i64
  %310 = sext i32 %308 to i64
  br label %311

311:                                              ; preds = %311, %307
  %312 = phi i64 [ %309, %307 ], [ %314, %311 ]
  %313 = getelementptr inbounds %struct.uncombox.25, ptr %20, i64 %312, i32 1
  store i32 %270, ptr %313, align 4, !tbaa !250
  %314 = add nsw i64 %312, 1
  %315 = icmp slt i64 %314, %310
  br i1 %315, label %311, label %316, !llvm.loop !731

316:                                              ; preds = %311, %299, %30
  %317 = phi i32 [ %32, %30 ], [ %232, %299 ], [ %232, %311 ]
  %318 = add nuw nsw i64 %31, 1
  %319 = icmp slt i64 %31, %29
  br i1 %319, label %30, label %320, !llvm.loop !732

320:                                              ; preds = %316
  %.lcssa9 = phi i32 [ %317, %316 ]
  %321 = load i32, ptr @numcells, align 4, !tbaa !17
  br label %322

322:                                              ; preds = %320, %18, %14, %5
  %323 = phi i32 [ %6, %5 ], [ %6, %14 ], [ %6, %18 ], [ %321, %320 ]
  %324 = phi i32 [ %8, %5 ], [ %8, %14 ], [ %8, %18 ], [ %.lcssa9, %320 ]
  %325 = add nuw nsw i64 %7, 1
  %326 = sext i32 %323 to i64
  %327 = icmp slt i64 %7, %326
  br i1 %327, label %5, label %328, !llvm.loop !733

328:                                              ; preds = %322, %0
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @prboard() #0 {
  %1 = alloca [1024 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 1024, ptr nonnull %1) #47
  %2 = load ptr, ptr @cktName, align 8, !tbaa !7
  %3 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %1, ptr noundef nonnull dereferenceable(1) @.str.535, ptr noundef %2) #44
  %4 = call noalias ptr @fopen(ptr noundef nonnull %1, ptr noundef nonnull @.str.1.536) #43
  %5 = icmp eq ptr %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %0
  %7 = load i32, ptr @numcells, align 4, !tbaa !17
  %8 = load i32, ptr @numpads, align 4, !tbaa !17
  %9 = add nsw i32 %8, %7
  %10 = icmp slt i32 %9, 1
  br i1 %10, label %141, label %14

11:                                               ; preds = %0
  %12 = load ptr, ptr @fpo, align 8, !tbaa !7
  %13 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %12, ptr noundef nonnull @.str.2.537, ptr noundef nonnull %1) #43
  call void @exit(i32 noundef 0) #49
  unreachable

14:                                               ; preds = %134, %6
  %15 = phi i64 [ %135, %134 ], [ 1, %6 ]
  %16 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %17 = getelementptr inbounds ptr, ptr %16, i64 %15
  %18 = load ptr, ptr %17, align 8, !tbaa !7
  %19 = getelementptr inbounds %struct.cellbox, ptr %18, i64 0, i32 5
  %20 = load i32, ptr %19, align 8, !tbaa !45
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds %struct.cellbox, ptr %18, i64 0, i32 21, i64 %21
  %23 = load ptr, ptr %22, align 8, !tbaa !7
  %24 = getelementptr inbounds %struct.tilebox, ptr %23, i64 0, i32 17
  %25 = load ptr, ptr %24, align 8, !tbaa !47
  %26 = getelementptr inbounds %struct.cellbox, ptr %18, i64 0, i32 2
  %27 = load i32, ptr %26, align 4, !tbaa !164
  %28 = getelementptr inbounds %struct.cellbox, ptr %18, i64 0, i32 3
  %29 = load i32, ptr %28, align 8, !tbaa !165
  %30 = trunc i64 %15 to i32
  %31 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %4, ptr noundef nonnull @.str.3.538, i32 noundef %30) #43
  %32 = getelementptr inbounds %struct.tilebox, ptr %23, i64 0, i32 9
  %33 = load i32, ptr %32, align 8, !tbaa !167
  %34 = add nsw i32 %33, %27
  %35 = getelementptr inbounds %struct.tilebox, ptr %23, i64 0, i32 11
  %36 = load i32, ptr %35, align 8, !tbaa !169
  %37 = add nsw i32 %36, %29
  %38 = getelementptr inbounds %struct.tilebox, ptr %23, i64 0, i32 10
  %39 = load i32, ptr %38, align 4, !tbaa !168
  %40 = add nsw i32 %39, %27
  %41 = getelementptr inbounds %struct.tilebox, ptr %23, i64 0, i32 12
  %42 = load i32, ptr %41, align 4, !tbaa !170
  %43 = add nsw i32 %42, %29
  %44 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %4, ptr noundef nonnull @.str.4.539, i32 noundef %34, i32 noundef %37, i32 noundef %40, i32 noundef %43) #43
  %45 = tail call i64 @fwrite(ptr nonnull @.str.5.540, i64 42, i64 1, ptr nonnull %4)
  %46 = load ptr, ptr %23, align 8, !tbaa !172
  %47 = icmp eq ptr %46, null
  br i1 %47, label %66, label %48

48:                                               ; preds = %48, %14
  %49 = phi ptr [ %64, %48 ], [ %46, %14 ]
  %50 = getelementptr inbounds %struct.tilebox, ptr %49, i64 0, i32 9
  %51 = load i32, ptr %50, align 8, !tbaa !167
  %52 = add nsw i32 %51, %27
  %53 = getelementptr inbounds %struct.tilebox, ptr %49, i64 0, i32 11
  %54 = load i32, ptr %53, align 8, !tbaa !169
  %55 = add nsw i32 %54, %29
  %56 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %4, ptr noundef nonnull @.str.6.541, i32 noundef %52, i32 noundef %55) #43
  %57 = getelementptr inbounds %struct.tilebox, ptr %49, i64 0, i32 10
  %58 = load i32, ptr %57, align 4, !tbaa !168
  %59 = add nsw i32 %58, %27
  %60 = getelementptr inbounds %struct.tilebox, ptr %49, i64 0, i32 12
  %61 = load i32, ptr %60, align 4, !tbaa !170
  %62 = add nsw i32 %61, %29
  %63 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %4, ptr noundef nonnull @.str.7.542, i32 noundef %59, i32 noundef %62) #43
  %64 = load ptr, ptr %49, align 8, !tbaa !172
  %65 = icmp eq ptr %64, null
  br i1 %65, label %66, label %48, !llvm.loop !734

66:                                               ; preds = %48, %14
  %67 = tail call i64 @fwrite(ptr nonnull @.str.8.543, i64 38, i64 1, ptr nonnull %4)
  %68 = icmp eq ptr %25, null
  br i1 %68, label %86, label %69

69:                                               ; preds = %69, %66
  %70 = phi ptr [ %84, %69 ], [ %25, %66 ]
  %71 = load ptr, ptr @pinnames, align 8, !tbaa !7
  %72 = getelementptr inbounds %struct.termbox, ptr %70, i64 0, i32 5
  %73 = load i32, ptr %72, align 8, !tbaa !53
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds ptr, ptr %71, i64 %74
  %76 = load ptr, ptr %75, align 8, !tbaa !7
  %77 = getelementptr inbounds %struct.termbox, ptr %70, i64 0, i32 1
  %78 = load i32, ptr %77, align 8, !tbaa !51
  %79 = add nsw i32 %78, %27
  %80 = getelementptr inbounds %struct.termbox, ptr %70, i64 0, i32 2
  %81 = load i32, ptr %80, align 4, !tbaa !52
  %82 = add nsw i32 %81, %29
  %83 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %4, ptr noundef nonnull @.str.9.544, ptr noundef %76, i32 noundef %79, i32 noundef %82) #43
  %84 = load ptr, ptr %70, align 8, !tbaa !49
  %85 = icmp eq ptr %84, null
  br i1 %85, label %86, label %69, !llvm.loop !735

86:                                               ; preds = %69, %66
  %87 = getelementptr inbounds %struct.cellbox, ptr %18, i64 0, i32 10
  %88 = load i32, ptr %87, align 4, !tbaa !297
  %89 = icmp eq i32 %88, 1
  br i1 %89, label %90, label %134

90:                                               ; preds = %86
  %91 = getelementptr inbounds %struct.cellbox, ptr %18, i64 0, i32 18
  %92 = load i32, ptr %91, align 4, !tbaa !223
  %93 = icmp slt i32 %92, 1
  br i1 %93, label %134, label %94

94:                                               ; preds = %90
  %95 = getelementptr inbounds %struct.cellbox, ptr %18, i64 0, i32 20
  br label %96

96:                                               ; preds = %96, %94
  %97 = phi i64 [ 1, %94 ], [ %130, %96 ]
  %98 = load ptr, ptr %95, align 8, !tbaa !226
  %99 = getelementptr inbounds %struct.uncombox.25, ptr %98, i64 %97
  %100 = load i32, ptr %99, align 4, !tbaa !298
  %101 = getelementptr inbounds %struct.uncombox.25, ptr %98, i64 %97, i32 1
  %102 = load i32, ptr %101, align 4, !tbaa !250
  %103 = load i32, ptr %19, align 8, !tbaa !45
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds %struct.cellbox, ptr %18, i64 0, i32 21, i64 %104
  %106 = load ptr, ptr %105, align 8, !tbaa !7
  %107 = getelementptr inbounds %struct.tilebox, ptr %106, i64 0, i32 18
  %108 = load ptr, ptr %107, align 8, !tbaa !225
  %109 = sext i32 %102 to i64
  %110 = getelementptr inbounds %struct.locbox.26, ptr %108, i64 %109
  %111 = load i32, ptr %110, align 4, !tbaa !240
  %112 = getelementptr inbounds %struct.locbox.26, ptr %108, i64 %109, i32 1
  %113 = load i32, ptr %112, align 4, !tbaa !238
  %114 = load ptr, ptr @pinnames, align 8, !tbaa !7
  %115 = sext i32 %100 to i64
  %116 = getelementptr inbounds ptr, ptr %114, i64 %115
  %117 = load ptr, ptr %116, align 8, !tbaa !7
  %118 = add nsw i32 %111, %27
  %119 = add nsw i32 %113, %29
  %120 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %4, ptr noundef nonnull @.str.10.545, ptr noundef %117, i32 noundef %118, i32 noundef %119) #43
  %121 = load ptr, ptr %95, align 8, !tbaa !226
  %122 = getelementptr inbounds %struct.uncombox.25, ptr %121, i64 %97, i32 9
  %123 = load i32, ptr %122, align 4, !tbaa !228
  %124 = add nsw i32 %123, %27
  %125 = getelementptr inbounds %struct.uncombox.25, ptr %121, i64 %97, i32 10
  %126 = load i32, ptr %125, align 4, !tbaa !230
  %127 = add nsw i32 %126, %29
  %128 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %4, ptr noundef nonnull @.str.11.546, i32 noundef %124, i32 noundef %127) #43
  %129 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %4, ptr noundef nonnull @.str.12.547, i32 noundef %102) #43
  %130 = add nuw nsw i64 %97, 1
  %131 = load i32, ptr %91, align 4, !tbaa !223
  %132 = sext i32 %131 to i64
  %133 = icmp slt i64 %97, %132
  br i1 %133, label %96, label %134, !llvm.loop !736

134:                                              ; preds = %96, %90, %86
  %135 = add nuw nsw i64 %15, 1
  %136 = load i32, ptr @numcells, align 4, !tbaa !17
  %137 = load i32, ptr @numpads, align 4, !tbaa !17
  %138 = add nsw i32 %137, %136
  %139 = sext i32 %138 to i64
  %140 = icmp slt i64 %15, %139
  br i1 %140, label %14, label %141, !llvm.loop !737

141:                                              ; preds = %134, %6
  %142 = tail call i32 @fclose(ptr noundef nonnull %4) #43
  call void @llvm.lifetime.end.p0(i64 1024, ptr nonnull %1) #47
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @prepair(i32 noundef %0) #0 {
  %2 = icmp slt i32 %0, 1
  br i1 %2, label %42, label %3

3:                                                ; preds = %1
  %4 = add nuw i32 %0, 1
  %5 = zext i32 %4 to i64
  %6 = load ptr, ptr @pnodeArray, align 8, !tbaa !7
  br label %7

7:                                                ; preds = %38, %3
  %8 = phi ptr [ %6, %3 ], [ %39, %38 ]
  %9 = phi i64 [ 1, %3 ], [ %40, %38 ]
  %10 = getelementptr inbounds %struct.dlink2, ptr %8, i64 %9
  store i32 0, ptr %10, align 8, !tbaa !529
  %11 = load i32, ptr @numnodes, align 4, !tbaa !17
  %12 = add nsw i32 %11, %0
  %13 = icmp slt i32 %12, 1
  br i1 %13, label %25, label %14

14:                                               ; preds = %7
  %15 = getelementptr inbounds %struct.dlink2, ptr %8, i64 %9, i32 1
  %16 = load ptr, ptr %15, align 8, !tbaa !593
  br label %17

17:                                               ; preds = %17, %14
  %18 = phi i64 [ 1, %14 ], [ %20, %17 ]
  %19 = getelementptr inbounds %struct.nnode, ptr %16, i64 %18
  %20 = add nuw nsw i64 %18, 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(12) %19, i8 0, i64 12, i1 false)
  %21 = load i32, ptr @numnodes, align 4, !tbaa !17
  %22 = add nsw i32 %21, %0
  %23 = sext i32 %22 to i64
  %24 = icmp slt i64 %18, %23
  br i1 %24, label %17, label %25, !llvm.loop !738

25:                                               ; preds = %17, %7
  %26 = getelementptr inbounds %struct.dlink2, ptr %8, i64 %9, i32 2
  %27 = load ptr, ptr %26, align 8, !tbaa !531
  %28 = icmp eq ptr %27, null
  br i1 %28, label %38, label %29

29:                                               ; preds = %29, %25
  %30 = phi ptr [ %32, %29 ], [ %27, %25 ]
  %31 = getelementptr inbounds %struct.plist, ptr %30, i64 0, i32 1
  %32 = load ptr, ptr %31, align 8, !tbaa !532
  tail call void @free(ptr noundef nonnull %30) #44
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %29, !llvm.loop !739

34:                                               ; preds = %29
  %35 = load ptr, ptr @pnodeArray, align 8, !tbaa !7
  %36 = getelementptr inbounds %struct.dlink2, ptr %35, i64 %9, i32 2
  store ptr null, ptr %36, align 8, !tbaa !531
  %37 = load ptr, ptr @pnodeArray, align 8, !tbaa !7
  br label %38

38:                                               ; preds = %34, %25
  %39 = phi ptr [ %8, %25 ], [ %37, %34 ]
  %40 = add nuw nsw i64 %9, 1
  %41 = icmp eq i64 %40, %5
  br i1 %41, label %42, label %7, !llvm.loop !740

42:                                               ; preds = %38, %1
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @prestrict(ptr nocapture noundef readonly %0, i32 noundef %1, i32 noundef %2, i32 noundef %3) #0 {
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #47
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %7) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %8) #47
  %9 = sext i32 %1 to i64
  %10 = getelementptr inbounds i16, ptr %0, i64 %9
  %11 = load i16, ptr %10, align 2, !tbaa !542
  %12 = sext i16 %11 to i32
  %13 = load ptr, ptr @pnodeArray, align 8, !tbaa !7
  %14 = load i32, ptr @numnodes, align 4, !tbaa !17
  %15 = sub nsw i32 %2, %14
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds %struct.dlink2, ptr %13, i64 %16, i32 1
  %18 = load ptr, ptr %17, align 8, !tbaa !593
  store ptr null, ptr %5, align 8, !tbaa !7
  %19 = load i32, ptr @pnodeAlength, align 4, !tbaa !17
  %20 = add nsw i32 %19, %14
  %21 = icmp slt i32 %20, 1
  br i1 %21, label %40, label %22

22:                                               ; preds = %4
  %23 = sext i16 %11 to i64
  %24 = getelementptr inbounds %struct.nnode, ptr %18, i64 %23
  %25 = getelementptr inbounds %struct.nnode, ptr %18, i64 %23, i32 3
  %26 = zext i32 %12 to i64
  br label %27

27:                                               ; preds = %33, %22
  %28 = phi i64 [ 1, %22 ], [ %34, %33 ]
  %29 = icmp eq i64 %28, %26
  br i1 %29, label %30, label %31

30:                                               ; preds = %27
  call void @tinsert(ptr noundef nonnull %5, i32 noundef 0, i32 noundef %12) #44
  store i32 0, ptr %24, align 4, !tbaa !599
  store i16 0, ptr %25, align 2, !tbaa !604
  br label %33

31:                                               ; preds = %27
  %32 = getelementptr inbounds %struct.nnode, ptr %18, i64 %28
  store i32 1000000000, ptr %32, align 4, !tbaa !599
  br label %33

33:                                               ; preds = %31, %30
  %34 = add nuw nsw i64 %28, 1
  %35 = load i32, ptr @numnodes, align 4, !tbaa !17
  %36 = load i32, ptr @pnodeAlength, align 4, !tbaa !17
  %37 = add nsw i32 %36, %35
  %38 = sext i32 %37 to i64
  %39 = icmp slt i64 %28, %38
  br i1 %39, label %27, label %40, !llvm.loop !741

40:                                               ; preds = %33, %4
  br label %41

41:                                               ; preds = %63, %40
  call void @tpop(ptr noundef nonnull %5, ptr noundef nonnull %6, ptr noundef nonnull %7, ptr noundef nonnull %8) #44
  %42 = load ptr, ptr %6, align 8, !tbaa !7
  %43 = icmp eq ptr %42, null
  br i1 %43, label %116, label %44

44:                                               ; preds = %41
  %45 = load i32, ptr %8, align 4, !tbaa !17
  %46 = icmp eq i32 %45, %3
  br i1 %46, label %47, label %57

47:                                               ; preds = %47, %44
  call void @tpop(ptr noundef nonnull %5, ptr noundef nonnull %6, ptr noundef nonnull %7, ptr noundef nonnull %8) #44
  %48 = load ptr, ptr %6, align 8, !tbaa !7
  %49 = icmp eq ptr %48, null
  br i1 %49, label %50, label %47

50:                                               ; preds = %47
  %51 = icmp sgt i32 %1, 1
  br i1 %51, label %52, label %116

52:                                               ; preds = %50
  %53 = load ptr, ptr @gnodeArray, align 8, !tbaa !7
  %54 = zext i32 %1 to i64
  %55 = getelementptr inbounds i16, ptr %0, i64 1
  %56 = load i16, ptr %55, align 2, !tbaa !542
  br label %95

57:                                               ; preds = %44
  %58 = load ptr, ptr @gnodeArray, align 8, !tbaa !7
  %59 = sext i32 %45 to i64
  %60 = getelementptr inbounds ptr, ptr %58, i64 %59
  %61 = load ptr, ptr %60, align 8, !tbaa !7
  %62 = icmp eq ptr %61, null
  br i1 %62, label %63, label %64

63:                                               ; preds = %91, %57
  br label %41

64:                                               ; preds = %91, %57
  %65 = phi ptr [ %93, %91 ], [ %61, %57 ]
  %66 = getelementptr inbounds %struct.clbox, ptr %65, i64 0, i32 5
  %67 = load i32, ptr %66, align 4, !tbaa !535
  %68 = icmp eq i32 %67, 1
  br i1 %68, label %91, label %69

69:                                               ; preds = %64
  %70 = getelementptr inbounds %struct.clbox, ptr %65, i64 0, i32 6
  %71 = load i32, ptr %70, align 8, !tbaa !536
  %72 = icmp eq i32 %71, 1
  br i1 %72, label %91, label %73

73:                                               ; preds = %69
  %74 = getelementptr inbounds %struct.clbox, ptr %65, i64 0, i32 3
  %75 = load i32, ptr %74, align 4, !tbaa !486
  %76 = load i32, ptr %65, align 8, !tbaa !481
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds %struct.nnode, ptr %18, i64 %77
  %79 = load i32, ptr %78, align 4, !tbaa !599
  %80 = load i32, ptr %7, align 4, !tbaa !17
  %81 = add nsw i32 %80, %75
  %82 = icmp sgt i32 %79, %81
  br i1 %82, label %83, label %91

83:                                               ; preds = %73
  call void @tdelete(ptr noundef nonnull %5, i32 noundef %79, i32 noundef %76) #44
  %84 = load i32, ptr %7, align 4, !tbaa !17
  %85 = add nsw i32 %84, %75
  call void @tinsert(ptr noundef nonnull %5, i32 noundef %85, i32 noundef %76) #44
  %86 = load i32, ptr %7, align 4, !tbaa !17
  %87 = add nsw i32 %86, %75
  store i32 %87, ptr %78, align 4, !tbaa !599
  %88 = load i32, ptr %8, align 4, !tbaa !17
  %89 = trunc i32 %88 to i16
  %90 = getelementptr inbounds %struct.nnode, ptr %18, i64 %77, i32 3
  store i16 %89, ptr %90, align 2, !tbaa !604
  br label %91

91:                                               ; preds = %83, %73, %69, %64
  %92 = getelementptr inbounds %struct.clbox, ptr %65, i64 0, i32 7
  %93 = load ptr, ptr %92, align 8, !tbaa !7
  %94 = icmp eq ptr %93, null
  br i1 %94, label %63, label %64, !llvm.loop !742

95:                                               ; preds = %111, %52
  %96 = phi i16 [ %56, %52 ], [ %101, %111 ]
  %97 = phi i64 [ 1, %52 ], [ %99, %111 ]
  %98 = phi i32 [ 0, %52 ], [ %114, %111 ]
  %99 = add nuw nsw i64 %97, 1
  %100 = getelementptr inbounds i16, ptr %0, i64 %99
  %101 = load i16, ptr %100, align 2, !tbaa !542
  %102 = sext i16 %101 to i32
  %103 = sext i16 %96 to i64
  %104 = getelementptr inbounds ptr, ptr %53, i64 %103
  br label %105

105:                                              ; preds = %105, %95
  %106 = phi ptr [ %104, %95 ], [ %110, %105 ]
  %107 = load ptr, ptr %106, align 8, !tbaa !7
  %108 = load i32, ptr %107, align 8, !tbaa !481
  %109 = icmp eq i32 %108, %102
  %110 = getelementptr inbounds %struct.clbox, ptr %107, i64 0, i32 7
  br i1 %109, label %111, label %105

111:                                              ; preds = %105
  %.lcssa = phi ptr [ %107, %105 ]
  %112 = getelementptr inbounds %struct.clbox, ptr %.lcssa, i64 0, i32 3
  %113 = load i32, ptr %112, align 4, !tbaa !486
  %114 = add nsw i32 %113, %98
  %115 = icmp eq i64 %99, %54
  br i1 %115, label %116, label %95, !llvm.loop !743

116:                                              ; preds = %111, %50, %41
  %117 = phi i32 [ 0, %50 ], [ %114, %111 ], [ -1, %41 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7) #47
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #47
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #47
  ret i32 %117
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @printgph() #5 {
  %1 = alloca [1024 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 1024, ptr nonnull %1) #47
  %2 = load ptr, ptr @cktName, align 8, !tbaa !7
  %3 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %1, ptr noundef nonnull dereferenceable(1) @.str.552, ptr noundef %2) #44
  %4 = call noalias ptr @fopen(ptr noundef nonnull %1, ptr noundef nonnull @.str.1.553) #43
  %5 = load ptr, ptr @cktName, align 8, !tbaa !7
  %6 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %1, ptr noundef nonnull dereferenceable(1) @.str.2.554, ptr noundef %5) #44
  %7 = call noalias ptr @fopen(ptr noundef nonnull %1, ptr noundef nonnull @.str.1.553) #43
  %8 = load i32, ptr @eNum, align 4, !tbaa !17
  %9 = icmp slt i32 %8, 1
  br i1 %9, label %61, label %10

10:                                               ; preds = %0
  %11 = load ptr, ptr @eArray, align 8, !tbaa !7
  br label %12

12:                                               ; preds = %55, %10
  %13 = phi i32 [ %8, %10 ], [ %56, %55 ]
  %14 = phi ptr [ %11, %10 ], [ %57, %55 ]
  %15 = phi i64 [ 1, %10 ], [ %58, %55 ]
  %16 = getelementptr inbounds %struct.ebox, ptr %14, i64 %15, i32 11
  %17 = load i32, ptr %16, align 4, !tbaa !414
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %55

19:                                               ; preds = %12
  %20 = getelementptr inbounds %struct.ebox, ptr %14, i64 %15
  %21 = load i32, ptr %20, align 8, !tbaa !114
  %22 = getelementptr inbounds %struct.ebox, ptr %14, i64 %15, i32 1
  %23 = load i32, ptr %22, align 4, !tbaa !116
  %24 = load i32, ptr @edgeTransition, align 4, !tbaa !17
  %25 = sext i32 %24 to i64
  %26 = icmp sgt i64 %15, %25
  %27 = load ptr, ptr @rectArray, align 8, !tbaa !7
  %28 = sext i32 %23 to i64
  %29 = sext i32 %21 to i64
  %30 = getelementptr inbounds %struct.rect, ptr %27, i64 %28
  %31 = getelementptr inbounds %struct.rect, ptr %27, i64 %29
  %32 = getelementptr inbounds %struct.rect, ptr %27, i64 %28, i32 1
  %33 = getelementptr inbounds %struct.rect, ptr %27, i64 %29, i32 1
  %34 = select i1 %26, ptr %31, ptr %33
  %35 = select i1 %26, ptr %30, ptr %32
  %36 = load i32, ptr %35, align 4, !tbaa !17
  %37 = load i32, ptr %34, align 4, !tbaa !17
  %38 = sub nsw i32 %36, %37
  %39 = getelementptr inbounds %struct.ebox, ptr %14, i64 %15, i32 5
  store i32 %38, ptr %39, align 4, !tbaa !119
  %40 = getelementptr inbounds %struct.ebox, ptr %14, i64 %15, i32 2
  %41 = load i32, ptr %40, align 8, !tbaa !155
  %42 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %7, ptr noundef nonnull @.str.3.555, i32 noundef %21, i32 noundef %23, i32 noundef %38, i32 noundef %41) #43
  %43 = load ptr, ptr @rectArray, align 8, !tbaa !7
  %44 = getelementptr inbounds %struct.rect, ptr %43, i64 %29
  %45 = load i32, ptr %44, align 4, !tbaa !123
  %46 = getelementptr inbounds %struct.rect, ptr %43, i64 %29, i32 1
  %47 = load i32, ptr %46, align 4, !tbaa !125
  %48 = getelementptr inbounds %struct.rect, ptr %43, i64 %28
  %49 = load i32, ptr %48, align 4, !tbaa !123
  %50 = getelementptr inbounds %struct.rect, ptr %43, i64 %28, i32 1
  %51 = load i32, ptr %50, align 4, !tbaa !125
  %52 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %4, ptr noundef nonnull @.str.4.556, i32 noundef %21, i32 noundef %45, i32 noundef %47, i32 noundef %23, i32 noundef %49, i32 noundef %51, i32 noundef %38, i32 noundef %41) #43
  %53 = load ptr, ptr @eArray, align 8, !tbaa !7
  %54 = load i32, ptr @eNum, align 4, !tbaa !17
  br label %55

55:                                               ; preds = %19, %12
  %56 = phi i32 [ %13, %12 ], [ %54, %19 ]
  %57 = phi ptr [ %14, %12 ], [ %53, %19 ]
  %58 = add nuw nsw i64 %15, 1
  %59 = sext i32 %56 to i64
  %60 = icmp slt i64 %15, %59
  br i1 %60, label %12, label %61, !llvm.loop !744

61:                                               ; preds = %55, %0
  %62 = tail call i32 @fclose(ptr noundef %7) #43
  %63 = tail call i32 @fclose(ptr noundef %4) #43
  call void @llvm.lifetime.end.p0(i64 1024, ptr nonnull %1) #47
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @printnets() #0 {
  %1 = alloca [1024 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 1024, ptr nonnull %1) #47
  %2 = load ptr, ptr @cktName, align 8, !tbaa !7
  %3 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %1, ptr noundef nonnull dereferenceable(1) @.str.557, ptr noundef %2) #44
  %4 = call noalias ptr @fopen(ptr noundef nonnull %1, ptr noundef nonnull @.str.1.558) #43
  %5 = icmp eq ptr %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %0
  %7 = load i32, ptr @largestNet, align 4, !tbaa !17
  %8 = icmp slt i32 %7, 1
  br i1 %8, label %115, label %9

9:                                                ; preds = %6
  %10 = load ptr, ptr @netRoutes, align 8, !tbaa !7
  br label %14

11:                                               ; preds = %0
  %12 = load ptr, ptr @fpo, align 8, !tbaa !7
  %13 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %12, ptr noundef nonnull @.str.2.559, ptr noundef nonnull %1) #43
  call void @exit(i32 noundef 0) #49
  unreachable

14:                                               ; preds = %109, %9
  %15 = phi i32 [ %7, %9 ], [ %110, %109 ]
  %16 = phi ptr [ %10, %9 ], [ %111, %109 ]
  %17 = phi i64 [ 1, %9 ], [ %112, %109 ]
  %18 = getelementptr inbounds %struct.nrbox, ptr %16, i64 %17, i32 1
  %19 = load i32, ptr %18, align 8, !tbaa !745
  %20 = icmp slt i32 %19, 1
  br i1 %20, label %109, label %21

21:                                               ; preds = %100, %14
  %22 = phi i64 [ %101, %100 ], [ 1, %14 ]
  %23 = phi ptr [ %102, %100 ], [ %16, %14 ]
  %24 = getelementptr inbounds %struct.nrbox, ptr %23, i64 %17
  %25 = load ptr, ptr %24, align 8, !tbaa !188
  %26 = getelementptr inbounds ptr, ptr %25, i64 %22
  %27 = load ptr, ptr %26, align 8, !tbaa !7
  %28 = load ptr, ptr %27, align 8, !tbaa !746
  %29 = getelementptr inbounds %struct.altbox, ptr %27, i64 0, i32 2
  %30 = load ptr, ptr %29, align 8, !tbaa !748
  %31 = icmp eq i64 %22, 1
  br i1 %31, label %32, label %42

32:                                               ; preds = %21
  %33 = getelementptr inbounds %struct.altbox, ptr %27, i64 0, i32 1
  %34 = load i32, ptr %33, align 8, !tbaa !749
  %35 = load ptr, ptr @nnameArray, align 8, !tbaa !7
  %36 = getelementptr inbounds ptr, ptr %35, i64 %17
  %37 = load ptr, ptr %36, align 8, !tbaa !7
  %38 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %4, ptr noundef nonnull @.str.3.560, ptr noundef %37) #43
  %39 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %4, ptr noundef nonnull @.str.4.561, i32 noundef %34) #43
  %40 = load i32, ptr %28, align 4, !tbaa !17
  %41 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %4, ptr noundef nonnull @.str.5.562, i32 noundef %40) #43
  br label %42

42:                                               ; preds = %32, %21
  %43 = load i32, ptr %28, align 4, !tbaa !17
  %44 = icmp slt i32 %43, 1
  br i1 %44, label %45, label %47

45:                                               ; preds = %63, %42
  %46 = icmp eq ptr %30, null
  br i1 %46, label %75, label %68

47:                                               ; preds = %63, %42
  %48 = phi i32 [ %64, %63 ], [ %43, %42 ]
  %49 = phi i64 [ %65, %63 ], [ 1, %42 ]
  br i1 %31, label %50, label %63

50:                                               ; preds = %47
  %51 = load ptr, ptr @pnameArray, align 8, !tbaa !7
  %52 = load ptr, ptr @pinOffset, align 8, !tbaa !7
  %53 = getelementptr inbounds i32, ptr %52, i64 %17
  %54 = load i32, ptr %53, align 4, !tbaa !17
  %55 = getelementptr inbounds i32, ptr %28, i64 %49
  %56 = load i32, ptr %55, align 4, !tbaa !17
  %57 = add nsw i32 %56, %54
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds ptr, ptr %51, i64 %58
  %60 = load ptr, ptr %59, align 8, !tbaa !7
  %61 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %4, ptr noundef nonnull @.str.6.563, ptr noundef %60) #43
  %62 = load i32, ptr %28, align 4, !tbaa !17
  br label %63

63:                                               ; preds = %50, %47
  %64 = phi i32 [ %48, %47 ], [ %62, %50 ]
  %65 = add nuw nsw i64 %49, 1
  %66 = sext i32 %64 to i64
  %67 = icmp slt i64 %49, %66
  br i1 %67, label %47, label %45, !llvm.loop !750

68:                                               ; preds = %68, %45
  %69 = phi ptr [ %73, %68 ], [ %30, %45 ]
  %70 = phi i32 [ %71, %68 ], [ 0, %45 ]
  %71 = add nuw nsw i32 %70, 1
  %72 = getelementptr inbounds %struct.chanbox, ptr %69, i64 0, i32 4
  %73 = load ptr, ptr %72, align 8, !tbaa !751
  %74 = icmp eq ptr %73, null
  br i1 %74, label %75, label %68, !llvm.loop !752

75:                                               ; preds = %68, %45
  %76 = phi i32 [ 0, %45 ], [ %71, %68 ]
  br i1 %31, label %77, label %100

77:                                               ; preds = %75
  %78 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %4, ptr noundef nonnull @.str.7.564, i32 noundef %76) #43
  %79 = load ptr, ptr @netRoutes, align 8, !tbaa !7
  %80 = getelementptr inbounds %struct.nrbox, ptr %79, i64 %17
  %81 = load ptr, ptr %80, align 8, !tbaa !188
  %82 = getelementptr inbounds ptr, ptr %81, i64 1
  %83 = load ptr, ptr %82, align 8, !tbaa !7
  %84 = getelementptr inbounds %struct.altbox, ptr %83, i64 0, i32 2
  %85 = load ptr, ptr %84, align 8, !tbaa !7
  %86 = icmp eq ptr %85, null
  br i1 %86, label %100, label %87

87:                                               ; preds = %87, %77
  %88 = phi ptr [ %98, %87 ], [ %85, %77 ]
  %89 = load i32, ptr %88, align 8, !tbaa !189
  %90 = getelementptr inbounds %struct.chanbox, ptr %88, i64 0, i32 1
  %91 = load i32, ptr %90, align 4, !tbaa !191
  %92 = getelementptr inbounds %struct.chanbox, ptr %88, i64 0, i32 2
  %93 = load i32, ptr %92, align 8, !tbaa !753
  %94 = getelementptr inbounds %struct.chanbox, ptr %88, i64 0, i32 3
  %95 = load i32, ptr %94, align 4, !tbaa !754
  %96 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %4, ptr noundef nonnull @.str.8.565, i32 noundef %89, i32 noundef %91, i32 noundef %93, i32 noundef %95) #43
  %97 = getelementptr inbounds %struct.chanbox, ptr %88, i64 0, i32 4
  %98 = load ptr, ptr %97, align 8, !tbaa !7
  %99 = icmp eq ptr %98, null
  br i1 %99, label %100, label %87, !llvm.loop !755

100:                                              ; preds = %87, %77, %75
  %101 = add nuw nsw i64 %22, 1
  %102 = load ptr, ptr @netRoutes, align 8, !tbaa !7
  %103 = getelementptr inbounds %struct.nrbox, ptr %102, i64 %17, i32 1
  %104 = load i32, ptr %103, align 8, !tbaa !745
  %105 = sext i32 %104 to i64
  %106 = icmp slt i64 %22, %105
  br i1 %106, label %21, label %107, !llvm.loop !756

107:                                              ; preds = %100
  %.lcssa = phi ptr [ %102, %100 ]
  %108 = load i32, ptr @largestNet, align 4, !tbaa !17
  br label %109

109:                                              ; preds = %107, %14
  %110 = phi i32 [ %108, %107 ], [ %15, %14 ]
  %111 = phi ptr [ %.lcssa, %107 ], [ %16, %14 ]
  %112 = add nuw nsw i64 %17, 1
  %113 = sext i32 %110 to i64
  %114 = icmp slt i64 %17, %113
  br i1 %114, label %14, label %115, !llvm.loop !757

115:                                              ; preds = %109, %6
  %116 = tail call i32 @fclose(ptr noundef nonnull %4) #43
  call void @llvm.lifetime.end.p0(i64 1024, ptr nonnull %1) #47
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @procesnet(i32 noundef %0, i32 noundef %1, i32 noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5) #47
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #47
  %7 = icmp eq i32 %1, 1
  br i1 %7, label %483, label %8

8:                                                ; preds = %3
  tail call void @grepair() #44
  tail call void @prepair(i32 noundef %2) #44
  tail call void @loadpg(i32 noundef %0, i32 noundef %2) #44
  tail call void @shortpath(i32 noundef %2) #44
  tail call void @routenet(i32 noundef %1, i32 noundef %2) #44
  %9 = sext i32 %0 to i64
  br label %10

10:                                               ; preds = %473, %8
  %11 = phi i64 [ %18, %473 ], [ 0, %8 ]
  %12 = phi i32 [ %474, %473 ], [ undef, %8 ]
  call void @tpop(ptr noundef nonnull @netRoot, ptr noundef nonnull %6, ptr noundef nonnull %4, ptr noundef nonnull %5) #44
  %13 = load ptr, ptr %6, align 8, !tbaa !7
  %14 = icmp eq ptr %13, null
  br i1 %14, label %15, label %17

15:                                               ; preds = %10
  %.lcssa3 = phi i64 [ %11, %10 ]
  %16 = load ptr, ptr @netRoutes, align 8, !tbaa !7
  br label %478

17:                                               ; preds = %10
  %18 = add nuw nsw i64 %11, 1
  %19 = load ptr, ptr @savePaths, align 8, !tbaa !7
  %20 = load i32, ptr %5, align 4, !tbaa !17
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds ptr, ptr %19, i64 %21
  %23 = load ptr, ptr %22, align 8, !tbaa !7
  %24 = load i16, ptr %23, align 2, !tbaa !542
  %25 = load ptr, ptr @netSegArray, align 8, !tbaa !7
  %26 = load ptr, ptr %25, align 8, !tbaa !7
  store i16 1, ptr %26, align 2, !tbaa !542
  %27 = getelementptr inbounds ptr, ptr %25, i64 1
  %28 = load ptr, ptr %27, align 8, !tbaa !7
  store i16 0, ptr %28, align 2, !tbaa !542
  %29 = icmp sgt i16 %24, 1
  br i1 %29, label %30, label %57

30:                                               ; preds = %17
  %31 = zext i16 %24 to i64
  br label %32

32:                                               ; preds = %53, %30
  %33 = phi i64 [ 1, %30 ], [ %55, %53 ]
  %34 = phi i32 [ 1, %30 ], [ %54, %53 ]
  %35 = getelementptr inbounds i16, ptr %23, i64 %33
  %36 = load i16, ptr %35, align 2, !tbaa !542
  %37 = icmp eq i16 %36, 0
  br i1 %37, label %38, label %45

38:                                               ; preds = %32
  %39 = add nsw i32 %34, 1
  %40 = load i16, ptr %26, align 2, !tbaa !542
  %41 = add i16 %40, 1
  store i16 %41, ptr %26, align 2, !tbaa !542
  %42 = sext i32 %39 to i64
  %43 = getelementptr inbounds ptr, ptr %25, i64 %42
  %44 = load ptr, ptr %43, align 8, !tbaa !7
  store i16 0, ptr %44, align 2, !tbaa !542
  br label %53

45:                                               ; preds = %32
  %46 = sext i32 %34 to i64
  %47 = getelementptr inbounds ptr, ptr %25, i64 %46
  %48 = load ptr, ptr %47, align 8, !tbaa !7
  %49 = load i16, ptr %48, align 2, !tbaa !542
  %50 = add i16 %49, 1
  store i16 %50, ptr %48, align 2, !tbaa !542
  %51 = sext i16 %50 to i64
  %52 = getelementptr inbounds i16, ptr %48, i64 %51
  store i16 %36, ptr %52, align 2, !tbaa !542
  br label %53

53:                                               ; preds = %45, %38
  %54 = phi i32 [ %39, %38 ], [ %34, %45 ]
  %55 = add nuw nsw i64 %33, 1
  %56 = icmp eq i64 %55, %31
  br i1 %56, label %57, label %32, !llvm.loop !758

57:                                               ; preds = %53, %17
  call void @mergeSeg() #43
  %58 = load ptr, ptr @netSegArray, align 8, !tbaa !7
  %59 = load ptr, ptr %58, align 8, !tbaa !7
  %60 = load i16, ptr %59, align 2, !tbaa !542
  %61 = icmp slt i16 %60, 1
  br i1 %61, label %89, label %62

62:                                               ; preds = %57
  %63 = zext i16 %60 to i64
  %64 = load i32, ptr @numnodes, align 4
  br label %65

65:                                               ; preds = %85, %62
  %66 = phi i64 [ 1, %62 ], [ %87, %85 ]
  %67 = phi i32 [ 0, %62 ], [ %86, %85 ]
  %68 = getelementptr inbounds ptr, ptr %58, i64 %66
  %69 = load ptr, ptr %68, align 8, !tbaa !7
  %70 = load i16, ptr %69, align 2, !tbaa !542
  %71 = icmp slt i16 %70, 1
  br i1 %71, label %85, label %72

72:                                               ; preds = %65
  %73 = zext i16 %70 to i64
  br label %74

74:                                               ; preds = %74, %72
  %75 = phi i64 [ 1, %72 ], [ %83, %74 ]
  %76 = phi i32 [ %67, %72 ], [ %82, %74 ]
  %77 = getelementptr inbounds i16, ptr %69, i64 %75
  %78 = load i16, ptr %77, align 2, !tbaa !542
  %79 = sext i16 %78 to i32
  %80 = icmp slt i32 %64, %79
  %81 = zext i1 %80 to i32
  %82 = add nsw i32 %76, %81
  %83 = add nuw nsw i64 %75, 1
  %84 = icmp eq i64 %75, %73
  br i1 %84, label %85, label %74, !llvm.loop !759

85:                                               ; preds = %74, %65
  %86 = phi i32 [ %67, %65 ], [ %82, %74 ]
  %87 = add nuw nsw i64 %66, 1
  %88 = icmp eq i64 %66, %63
  br i1 %88, label %89, label %65, !llvm.loop !760

89:                                               ; preds = %85, %57
  %90 = phi i32 [ 0, %57 ], [ %86, %85 ]
  %91 = add nsw i32 %90, 1
  %92 = sext i32 %91 to i64
  %93 = shl nsw i64 %92, 2
  %94 = call noalias ptr @malloc(i64 noundef %93) #45
  %95 = load ptr, ptr @netRoutes, align 8, !tbaa !7
  %96 = getelementptr inbounds %struct.nrbox, ptr %95, i64 %9
  %97 = load ptr, ptr %96, align 8, !tbaa !188
  %98 = getelementptr inbounds ptr, ptr %97, i64 %18
  %99 = load ptr, ptr %98, align 8, !tbaa !7
  store ptr %94, ptr %99, align 8, !tbaa !746
  %100 = load ptr, ptr @netRoutes, align 8, !tbaa !7
  %101 = getelementptr inbounds %struct.nrbox, ptr %100, i64 %9
  %102 = load ptr, ptr %101, align 8, !tbaa !188
  %103 = getelementptr inbounds ptr, ptr %102, i64 %18
  %104 = load ptr, ptr %103, align 8, !tbaa !7
  %105 = load ptr, ptr %104, align 8, !tbaa !746
  %106 = load i32, ptr %4, align 4, !tbaa !17
  %107 = getelementptr inbounds %struct.altbox, ptr %104, i64 0, i32 1
  store i32 %106, ptr %107, align 8, !tbaa !749
  store i32 %90, ptr %105, align 4, !tbaa !17
  %108 = load ptr, ptr @netSegArray, align 8, !tbaa !7
  %109 = load ptr, ptr %108, align 8, !tbaa !7
  %110 = load i16, ptr %109, align 2, !tbaa !542
  %111 = icmp slt i16 %110, 1
  br i1 %111, label %473, label %112

112:                                              ; preds = %89
  %113 = zext i16 %110 to i64
  br label %117

114:                                              ; preds = %146
  br i1 %111, label %473, label %115

115:                                              ; preds = %114
  %116 = load ptr, ptr @gnodeArray, align 8
  br label %150

117:                                              ; preds = %146, %112
  %118 = phi i64 [ 1, %112 ], [ %148, %146 ]
  %119 = phi i32 [ 0, %112 ], [ %147, %146 ]
  %120 = getelementptr inbounds ptr, ptr %108, i64 %118
  %121 = load ptr, ptr %120, align 8, !tbaa !7
  %122 = load i16, ptr %121, align 2, !tbaa !542
  %123 = icmp slt i16 %122, 1
  br i1 %123, label %146, label %124

124:                                              ; preds = %117
  %125 = zext i16 %122 to i64
  %126 = load i32, ptr @numnodes, align 4, !tbaa !17
  br label %127

127:                                              ; preds = %141, %124
  %128 = phi i32 [ %126, %124 ], [ %142, %141 ]
  %129 = phi i64 [ 1, %124 ], [ %144, %141 ]
  %130 = phi i32 [ %119, %124 ], [ %143, %141 ]
  %131 = getelementptr inbounds i16, ptr %121, i64 %129
  %132 = load i16, ptr %131, align 2, !tbaa !542
  %133 = sext i16 %132 to i32
  %134 = icmp slt i32 %128, %133
  br i1 %134, label %135, label %141

135:                                              ; preds = %127
  %136 = sub nsw i32 %133, %128
  %137 = add nsw i32 %130, 1
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds i32, ptr %105, i64 %138
  store i32 %136, ptr %139, align 4, !tbaa !17
  %140 = load i32, ptr @numnodes, align 4, !tbaa !17
  br label %141

141:                                              ; preds = %135, %127
  %142 = phi i32 [ %140, %135 ], [ %128, %127 ]
  %143 = phi i32 [ %137, %135 ], [ %130, %127 ]
  %144 = add nuw nsw i64 %129, 1
  %145 = icmp eq i64 %129, %125
  br i1 %145, label %146, label %127, !llvm.loop !761

146:                                              ; preds = %141, %117
  %147 = phi i32 [ %119, %117 ], [ %143, %141 ]
  %148 = add nuw nsw i64 %118, 1
  %149 = icmp eq i64 %118, %113
  br i1 %149, label %114, label %117, !llvm.loop !762

150:                                              ; preds = %465, %115
  %151 = phi i64 [ 1, %115 ], [ %468, %465 ]
  %152 = phi ptr [ null, %115 ], [ %467, %465 ]
  %153 = phi i32 [ %12, %115 ], [ %466, %465 ]
  %154 = getelementptr inbounds ptr, ptr %108, i64 %151
  %155 = load ptr, ptr %154, align 8, !tbaa !7
  %156 = load i16, ptr %155, align 2, !tbaa !542
  %157 = icmp slt i16 %156, 1
  br i1 %157, label %178, label %158

158:                                              ; preds = %150
  %159 = zext i16 %156 to i64
  %160 = load i32, ptr @numnodes, align 4, !tbaa !17
  br label %161

161:                                              ; preds = %161, %158
  %162 = phi i64 [ 1, %158 ], [ %174, %161 ]
  %163 = phi i32 [ %153, %158 ], [ %173, %161 ]
  %164 = phi i32 [ 0, %158 ], [ %172, %161 ]
  %165 = getelementptr inbounds i16, ptr %155, i64 %162
  %166 = load i16, ptr %165, align 2, !tbaa !542
  %167 = sext i16 %166 to i32
  %168 = icmp slt i32 %160, %167
  %169 = icmp eq i32 %164, 0
  %170 = trunc i64 %162 to i32
  %171 = select i1 %169, i32 %170, i32 %164
  %172 = select i1 %168, i32 %164, i32 %171
  %173 = select i1 %168, i32 %163, i32 %170
  %174 = add nuw nsw i64 %162, 1
  %175 = icmp eq i64 %162, %159
  br i1 %175, label %176, label %161, !llvm.loop !763

176:                                              ; preds = %161
  %.lcssa1 = phi i32 [ %172, %161 ]
  %.lcssa = phi i32 [ %173, %161 ]
  %177 = icmp eq i32 %.lcssa1, 0
  br i1 %177, label %178, label %285

178:                                              ; preds = %176, %150
  %179 = phi i32 [ %.lcssa, %176 ], [ %153, %150 ]
  %180 = getelementptr inbounds i16, ptr %155, i64 1
  %181 = load i16, ptr %180, align 2, !tbaa !542
  %182 = sext i16 %181 to i32
  %183 = getelementptr inbounds i16, ptr %155, i64 2
  %184 = load i16, ptr %183, align 2, !tbaa !542
  %185 = sext i16 %184 to i32
  %186 = sext i16 %181 to i64
  %187 = getelementptr inbounds ptr, ptr %116, i64 %186
  %188 = load ptr, ptr %187, align 8, !tbaa !7
  %189 = getelementptr inbounds %struct.clbox, ptr %188, i64 0, i32 7
  %190 = load ptr, ptr %189, align 8, !tbaa !483
  %191 = load i32, ptr %190, align 8, !tbaa !481
  %192 = icmp eq i32 %191, %185
  br i1 %192, label %193, label %195

193:                                              ; preds = %178
  %194 = load i32, ptr %188, align 8, !tbaa !481
  br label %195

195:                                              ; preds = %193, %178
  %196 = phi i32 [ %194, %193 ], [ %191, %178 ]
  %197 = phi ptr [ %188, %193 ], [ %190, %178 ]
  %198 = getelementptr inbounds %struct.clbox, ptr %197, i64 0, i32 2
  %199 = load i32, ptr %198, align 8, !tbaa !485
  %200 = load i32, ptr @numnodes, align 4, !tbaa !17
  %201 = icmp sgt i32 %196, %200
  br i1 %201, label %202, label %222

202:                                              ; preds = %215, %195
  %203 = phi i32 [ %220, %215 ], [ %199, %195 ]
  %204 = phi i32 [ %216, %215 ], [ %196, %195 ]
  %205 = phi i32 [ %204, %215 ], [ %182, %195 ]
  %206 = sext i32 %204 to i64
  %207 = getelementptr inbounds ptr, ptr %116, i64 %206
  %208 = load ptr, ptr %207, align 8, !tbaa !7
  %209 = getelementptr inbounds %struct.clbox, ptr %208, i64 0, i32 7
  %210 = load ptr, ptr %209, align 8, !tbaa !483
  %211 = load i32, ptr %210, align 8, !tbaa !481
  %212 = icmp eq i32 %211, %205
  br i1 %212, label %213, label %215

213:                                              ; preds = %202
  %214 = load i32, ptr %208, align 8, !tbaa !481
  br label %215

215:                                              ; preds = %213, %202
  %216 = phi i32 [ %214, %213 ], [ %211, %202 ]
  %217 = phi ptr [ %208, %213 ], [ %210, %202 ]
  %218 = getelementptr inbounds %struct.clbox, ptr %217, i64 0, i32 2
  %219 = load i32, ptr %218, align 8, !tbaa !485
  %220 = add nsw i32 %219, %203
  %221 = icmp sgt i32 %216, %200
  br i1 %221, label %202, label %222, !llvm.loop !764

222:                                              ; preds = %215, %195
  %223 = phi i32 [ %196, %195 ], [ %216, %215 ]
  %224 = phi i32 [ %199, %195 ], [ %220, %215 ]
  %225 = sext i16 %156 to i64
  %226 = getelementptr inbounds i16, ptr %155, i64 %225
  %227 = load i16, ptr %226, align 2, !tbaa !542
  %228 = sext i16 %227 to i32
  %229 = add nsw i64 %225, -1
  %230 = getelementptr inbounds i16, ptr %155, i64 %229
  %231 = load i16, ptr %230, align 2, !tbaa !542
  %232 = sext i16 %231 to i32
  %233 = sext i16 %227 to i64
  %234 = getelementptr inbounds ptr, ptr %116, i64 %233
  %235 = load ptr, ptr %234, align 8, !tbaa !7
  %236 = getelementptr inbounds %struct.clbox, ptr %235, i64 0, i32 7
  %237 = load ptr, ptr %236, align 8, !tbaa !483
  %238 = load i32, ptr %237, align 8, !tbaa !481
  %239 = icmp eq i32 %238, %232
  br i1 %239, label %240, label %242

240:                                              ; preds = %222
  %241 = load i32, ptr %235, align 8, !tbaa !481
  br label %242

242:                                              ; preds = %240, %222
  %243 = phi i32 [ %241, %240 ], [ %238, %222 ]
  %244 = phi ptr [ %235, %240 ], [ %237, %222 ]
  %245 = getelementptr inbounds %struct.clbox, ptr %244, i64 0, i32 2
  %246 = load i32, ptr %245, align 8, !tbaa !485
  %247 = icmp sgt i32 %243, %200
  br i1 %247, label %248, label %268

248:                                              ; preds = %261, %242
  %249 = phi i32 [ %266, %261 ], [ %246, %242 ]
  %250 = phi i32 [ %262, %261 ], [ %243, %242 ]
  %251 = phi i32 [ %250, %261 ], [ %228, %242 ]
  %252 = sext i32 %250 to i64
  %253 = getelementptr inbounds ptr, ptr %116, i64 %252
  %254 = load ptr, ptr %253, align 8, !tbaa !7
  %255 = getelementptr inbounds %struct.clbox, ptr %254, i64 0, i32 7
  %256 = load ptr, ptr %255, align 8, !tbaa !483
  %257 = load i32, ptr %256, align 8, !tbaa !481
  %258 = icmp eq i32 %257, %251
  br i1 %258, label %259, label %261

259:                                              ; preds = %248
  %260 = load i32, ptr %254, align 8, !tbaa !481
  br label %261

261:                                              ; preds = %259, %248
  %262 = phi i32 [ %260, %259 ], [ %257, %248 ]
  %263 = phi ptr [ %254, %259 ], [ %256, %248 ]
  %264 = getelementptr inbounds %struct.clbox, ptr %263, i64 0, i32 2
  %265 = load i32, ptr %264, align 8, !tbaa !485
  %266 = add nsw i32 %265, %249
  %267 = icmp sgt i32 %262, %200
  br i1 %267, label %248, label %268, !llvm.loop !765

268:                                              ; preds = %261, %242
  %269 = phi i32 [ %243, %242 ], [ %262, %261 ]
  %270 = phi i32 [ %246, %242 ], [ %266, %261 ]
  %271 = icmp eq ptr %152, null
  %272 = call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #45
  br i1 %271, label %273, label %279

273:                                              ; preds = %268
  %274 = load ptr, ptr %103, align 8, !tbaa !7
  %275 = getelementptr inbounds %struct.altbox, ptr %274, i64 0, i32 2
  store ptr %272, ptr %275, align 8, !tbaa !748
  %276 = load ptr, ptr %103, align 8, !tbaa !7
  %277 = getelementptr inbounds %struct.altbox, ptr %276, i64 0, i32 2
  %278 = load ptr, ptr %277, align 8, !tbaa !748
  br label %281

279:                                              ; preds = %268
  %280 = getelementptr inbounds %struct.chanbox, ptr %152, i64 0, i32 4
  store ptr %272, ptr %280, align 8, !tbaa !751
  br label %281

281:                                              ; preds = %279, %273
  %282 = phi ptr [ %278, %273 ], [ %272, %279 ]
  store i32 %223, ptr %282, align 8, !tbaa !189
  %283 = getelementptr inbounds %struct.chanbox, ptr %282, i64 0, i32 1
  store i32 %269, ptr %283, align 4, !tbaa !191
  %284 = getelementptr inbounds %struct.chanbox, ptr %282, i64 0, i32 2
  store i32 %224, ptr %284, align 8, !tbaa !753
  br label %459

285:                                              ; preds = %176
  %286 = icmp sgt i32 %.lcssa1, 1
  br i1 %286, label %287, label %358

287:                                              ; preds = %285
  %288 = getelementptr inbounds i16, ptr %155, i64 1
  %289 = load i16, ptr %288, align 2, !tbaa !542
  %290 = sext i16 %289 to i32
  %291 = getelementptr inbounds i16, ptr %155, i64 2
  %292 = load i16, ptr %291, align 2, !tbaa !542
  %293 = sext i16 %292 to i32
  %294 = sext i16 %289 to i64
  %295 = getelementptr inbounds ptr, ptr %116, i64 %294
  %296 = load ptr, ptr %295, align 8, !tbaa !7
  %297 = getelementptr inbounds %struct.clbox, ptr %296, i64 0, i32 7
  %298 = load ptr, ptr %297, align 8, !tbaa !483
  %299 = load i32, ptr %298, align 8, !tbaa !481
  %300 = icmp eq i32 %299, %293
  br i1 %300, label %301, label %303

301:                                              ; preds = %287
  %302 = load i32, ptr %296, align 8, !tbaa !481
  br label %303

303:                                              ; preds = %301, %287
  %304 = phi i32 [ %302, %301 ], [ %299, %287 ]
  %305 = phi ptr [ %296, %301 ], [ %298, %287 ]
  %306 = getelementptr inbounds %struct.clbox, ptr %305, i64 0, i32 2
  %307 = load i32, ptr %306, align 8, !tbaa !485
  %308 = load i32, ptr @numnodes, align 4, !tbaa !17
  %309 = icmp sgt i32 %304, %308
  br i1 %309, label %310, label %330

310:                                              ; preds = %323, %303
  %311 = phi i32 [ %328, %323 ], [ %307, %303 ]
  %312 = phi i32 [ %324, %323 ], [ %304, %303 ]
  %313 = phi i32 [ %312, %323 ], [ %290, %303 ]
  %314 = sext i32 %312 to i64
  %315 = getelementptr inbounds ptr, ptr %116, i64 %314
  %316 = load ptr, ptr %315, align 8, !tbaa !7
  %317 = getelementptr inbounds %struct.clbox, ptr %316, i64 0, i32 7
  %318 = load ptr, ptr %317, align 8, !tbaa !483
  %319 = load i32, ptr %318, align 8, !tbaa !481
  %320 = icmp eq i32 %319, %313
  br i1 %320, label %321, label %323

321:                                              ; preds = %310
  %322 = load i32, ptr %316, align 8, !tbaa !481
  br label %323

323:                                              ; preds = %321, %310
  %324 = phi i32 [ %322, %321 ], [ %319, %310 ]
  %325 = phi ptr [ %316, %321 ], [ %318, %310 ]
  %326 = getelementptr inbounds %struct.clbox, ptr %325, i64 0, i32 2
  %327 = load i32, ptr %326, align 8, !tbaa !485
  %328 = add nsw i32 %327, %311
  %329 = icmp sgt i32 %324, %308
  br i1 %329, label %310, label %330, !llvm.loop !766

330:                                              ; preds = %323, %303
  %331 = phi i32 [ %304, %303 ], [ %324, %323 ]
  %332 = phi i32 [ %307, %303 ], [ %328, %323 ]
  %333 = icmp eq ptr %152, null
  %334 = call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #45
  br i1 %333, label %335, label %341

335:                                              ; preds = %330
  %336 = load ptr, ptr %103, align 8, !tbaa !7
  %337 = getelementptr inbounds %struct.altbox, ptr %336, i64 0, i32 2
  store ptr %334, ptr %337, align 8, !tbaa !748
  %338 = load ptr, ptr %103, align 8, !tbaa !7
  %339 = getelementptr inbounds %struct.altbox, ptr %338, i64 0, i32 2
  %340 = load ptr, ptr %339, align 8, !tbaa !748
  br label %343

341:                                              ; preds = %330
  %342 = getelementptr inbounds %struct.chanbox, ptr %152, i64 0, i32 4
  store ptr %334, ptr %342, align 8, !tbaa !751
  br label %343

343:                                              ; preds = %341, %335
  %344 = phi ptr [ %340, %335 ], [ %334, %341 ]
  store i32 %331, ptr %344, align 8, !tbaa !189
  %345 = getelementptr inbounds %struct.chanbox, ptr %344, i64 0, i32 2
  store i32 %332, ptr %345, align 8, !tbaa !753
  %346 = load ptr, ptr %154, align 8, !tbaa !7
  %347 = zext i32 %.lcssa1 to i64
  %348 = getelementptr inbounds i16, ptr %346, i64 %347
  br label %349

349:                                              ; preds = %387, %343
  %350 = phi ptr [ %348, %343 ], [ %396, %387 ]
  %351 = phi ptr [ %344, %343 ], [ %388, %387 ]
  %352 = phi i32 [ %.lcssa1, %343 ], [ %376, %387 ]
  %353 = load i16, ptr %350, align 2, !tbaa !542
  %354 = sext i16 %353 to i32
  %355 = getelementptr inbounds %struct.chanbox, ptr %351, i64 0, i32 1
  store i32 %354, ptr %355, align 4, !tbaa !191
  %356 = getelementptr inbounds %struct.chanbox, ptr %351, i64 0, i32 3
  store i32 0, ptr %356, align 4, !tbaa !754
  %357 = getelementptr inbounds %struct.chanbox, ptr %351, i64 0, i32 4
  store ptr null, ptr %357, align 8, !tbaa !751
  br label %358

358:                                              ; preds = %349, %285
  %359 = phi i32 [ %.lcssa1, %285 ], [ %352, %349 ]
  %360 = phi ptr [ %152, %285 ], [ %351, %349 ]
  %361 = load i32, ptr @numnodes, align 4
  %362 = sext i32 %359 to i64
  %363 = call i32 @llvm.smax.i32(i32 %359, i32 %.lcssa)
  %364 = sext i32 %363 to i64
  br label %365

365:                                              ; preds = %368, %358
  %366 = phi i64 [ %369, %368 ], [ %362, %358 ]
  %367 = icmp eq i64 %366, %364
  br i1 %367, label %397, label %368

368:                                              ; preds = %365
  %369 = add nsw i64 %366, 1
  %370 = load ptr, ptr %154, align 8, !tbaa !7
  %371 = getelementptr inbounds i16, ptr %370, i64 %369
  %372 = load i16, ptr %371, align 2, !tbaa !542
  %373 = sext i16 %372 to i32
  %374 = icmp slt i32 %361, %373
  br i1 %374, label %365, label %375, !llvm.loop !767

375:                                              ; preds = %368
  %.lcssa2 = phi i64 [ %369, %368 ]
  %376 = trunc i64 %.lcssa2 to i32
  %377 = icmp eq ptr %360, null
  %378 = call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #45
  br i1 %377, label %379, label %385

379:                                              ; preds = %375
  %380 = load ptr, ptr %103, align 8, !tbaa !7
  %381 = getelementptr inbounds %struct.altbox, ptr %380, i64 0, i32 2
  store ptr %378, ptr %381, align 8, !tbaa !748
  %382 = load ptr, ptr %103, align 8, !tbaa !7
  %383 = getelementptr inbounds %struct.altbox, ptr %382, i64 0, i32 2
  %384 = load ptr, ptr %383, align 8, !tbaa !748
  br label %387

385:                                              ; preds = %375
  %386 = getelementptr inbounds %struct.chanbox, ptr %360, i64 0, i32 4
  store ptr %378, ptr %386, align 8, !tbaa !751
  br label %387

387:                                              ; preds = %385, %379
  %388 = phi ptr [ %384, %379 ], [ %378, %385 ]
  %389 = load ptr, ptr %154, align 8, !tbaa !7
  %390 = getelementptr inbounds i16, ptr %389, i64 %362
  %391 = load i16, ptr %390, align 2, !tbaa !542
  %392 = sext i16 %391 to i32
  store i32 %392, ptr %388, align 8, !tbaa !189
  %393 = getelementptr inbounds %struct.chanbox, ptr %388, i64 0, i32 2
  store i32 0, ptr %393, align 8, !tbaa !753
  %394 = shl i64 %.lcssa2, 32
  %395 = ashr exact i64 %394, 32
  %396 = getelementptr inbounds i16, ptr %389, i64 %395
  br label %349

397:                                              ; preds = %365
  %398 = load ptr, ptr %154, align 8, !tbaa !7
  %399 = load i16, ptr %398, align 2, !tbaa !542
  %400 = sext i16 %399 to i32
  %401 = icmp slt i32 %.lcssa, %400
  br i1 %401, label %402, label %465

402:                                              ; preds = %397
  %403 = sext i16 %399 to i64
  %404 = getelementptr inbounds i16, ptr %398, i64 %403
  %405 = load i16, ptr %404, align 2, !tbaa !542
  %406 = sext i16 %405 to i32
  %407 = add nsw i32 %400, -1
  %408 = sext i32 %407 to i64
  %409 = getelementptr inbounds i16, ptr %398, i64 %408
  %410 = load i16, ptr %409, align 2, !tbaa !542
  %411 = sext i16 %410 to i32
  %412 = sext i16 %405 to i64
  %413 = getelementptr inbounds ptr, ptr %116, i64 %412
  %414 = load ptr, ptr %413, align 8, !tbaa !7
  %415 = getelementptr inbounds %struct.clbox, ptr %414, i64 0, i32 7
  %416 = load ptr, ptr %415, align 8, !tbaa !483
  %417 = load i32, ptr %416, align 8, !tbaa !481
  %418 = icmp eq i32 %417, %411
  br i1 %418, label %419, label %421

419:                                              ; preds = %402
  %420 = load i32, ptr %414, align 8, !tbaa !481
  br label %421

421:                                              ; preds = %419, %402
  %422 = phi i32 [ %420, %419 ], [ %417, %402 ]
  %423 = phi ptr [ %414, %419 ], [ %416, %402 ]
  %424 = getelementptr inbounds %struct.clbox, ptr %423, i64 0, i32 2
  %425 = load i32, ptr %424, align 8, !tbaa !485
  %426 = icmp sgt i32 %422, %361
  br i1 %426, label %427, label %447

427:                                              ; preds = %440, %421
  %428 = phi i32 [ %445, %440 ], [ %425, %421 ]
  %429 = phi i32 [ %441, %440 ], [ %422, %421 ]
  %430 = phi i32 [ %429, %440 ], [ %406, %421 ]
  %431 = sext i32 %429 to i64
  %432 = getelementptr inbounds ptr, ptr %116, i64 %431
  %433 = load ptr, ptr %432, align 8, !tbaa !7
  %434 = getelementptr inbounds %struct.clbox, ptr %433, i64 0, i32 7
  %435 = load ptr, ptr %434, align 8, !tbaa !483
  %436 = load i32, ptr %435, align 8, !tbaa !481
  %437 = icmp eq i32 %436, %430
  br i1 %437, label %438, label %440

438:                                              ; preds = %427
  %439 = load i32, ptr %433, align 8, !tbaa !481
  br label %440

440:                                              ; preds = %438, %427
  %441 = phi i32 [ %439, %438 ], [ %436, %427 ]
  %442 = phi ptr [ %433, %438 ], [ %435, %427 ]
  %443 = getelementptr inbounds %struct.clbox, ptr %442, i64 0, i32 2
  %444 = load i32, ptr %443, align 8, !tbaa !485
  %445 = add nsw i32 %444, %428
  %446 = icmp sgt i32 %441, %361
  br i1 %446, label %427, label %447, !llvm.loop !768

447:                                              ; preds = %440, %421
  %448 = phi i32 [ %422, %421 ], [ %441, %440 ]
  %449 = phi i32 [ %425, %421 ], [ %445, %440 ]
  %450 = call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #45
  %451 = getelementptr inbounds %struct.chanbox, ptr %360, i64 0, i32 4
  store ptr %450, ptr %451, align 8, !tbaa !751
  %452 = load ptr, ptr %154, align 8, !tbaa !7
  %453 = sext i32 %.lcssa to i64
  %454 = getelementptr inbounds i16, ptr %452, i64 %453
  %455 = load i16, ptr %454, align 2, !tbaa !542
  %456 = sext i16 %455 to i32
  store i32 %456, ptr %450, align 8, !tbaa !189
  %457 = getelementptr inbounds %struct.chanbox, ptr %450, i64 0, i32 2
  store i32 0, ptr %457, align 8, !tbaa !753
  %458 = getelementptr inbounds %struct.chanbox, ptr %450, i64 0, i32 1
  store i32 %448, ptr %458, align 4, !tbaa !191
  br label %459

459:                                              ; preds = %447, %281
  %460 = phi ptr [ %282, %281 ], [ %450, %447 ]
  %461 = phi i32 [ %270, %281 ], [ %449, %447 ]
  %462 = phi i32 [ %179, %281 ], [ %.lcssa, %447 ]
  %463 = getelementptr inbounds %struct.chanbox, ptr %460, i64 0, i32 3
  store i32 %461, ptr %463, align 4, !tbaa !754
  %464 = getelementptr inbounds %struct.chanbox, ptr %460, i64 0, i32 4
  store ptr null, ptr %464, align 8, !tbaa !751
  br label %465

465:                                              ; preds = %459, %397
  %466 = phi i32 [ %.lcssa, %397 ], [ %462, %459 ]
  %467 = phi ptr [ %360, %397 ], [ %460, %459 ]
  %468 = add nuw nsw i64 %151, 1
  %469 = load ptr, ptr %108, align 8, !tbaa !7
  %470 = load i16, ptr %469, align 2, !tbaa !542
  %471 = sext i16 %470 to i64
  %472 = icmp slt i64 %151, %471
  br i1 %472, label %150, label %473, !llvm.loop !769

473:                                              ; preds = %465, %114, %89
  %474 = phi i32 [ %12, %114 ], [ %12, %89 ], [ %466, %465 ]
  %475 = load i32, ptr @MAXPATHS, align 4, !tbaa !17
  %476 = sext i32 %475 to i64
  %477 = icmp slt i64 %18, %476
  br i1 %477, label %10, label %478

478:                                              ; preds = %473, %15
  %479 = phi ptr [ %16, %15 ], [ %100, %473 ]
  %480 = phi i64 [ %.lcssa3, %15 ], [ %18, %473 ]
  %481 = trunc i64 %480 to i32
  %482 = getelementptr inbounds %struct.nrbox, ptr %479, i64 %9, i32 1
  store i32 %481, ptr %482, align 8, !tbaa !745
  br label %483

483:                                              ; preds = %478, %3
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4) #47
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @mergeSeg() #12 {
  %1 = load ptr, ptr @netSegArray, align 8, !tbaa !7
  %2 = load ptr, ptr %1, align 8, !tbaa !7
  %3 = load i16, ptr %2, align 2, !tbaa !542
  %4 = icmp sgt i16 %3, 1
  br i1 %4, label %5, label %84

5:                                                ; preds = %0
  %6 = zext i16 %3 to i32
  br label %7

7:                                                ; preds = %76, %5
  %8 = phi i16 [ %81, %76 ], [ %3, %5 ]
  %9 = phi i32 [ %82, %76 ], [ %6, %5 ]
  %10 = phi ptr [ %79, %76 ], [ %1, %5 ]
  %11 = phi i32 [ %78, %76 ], [ 1, %5 ]
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds ptr, ptr %10, i64 %12
  %14 = load ptr, ptr %13, align 8, !tbaa !7
  %15 = getelementptr inbounds i16, ptr %14, i64 1
  %16 = load i16, ptr %15, align 2, !tbaa !542
  %17 = sext i16 %16 to i32
  %18 = load i32, ptr @numnodes, align 4, !tbaa !17
  %19 = icmp slt i32 %18, %17
  br i1 %19, label %20, label %43

20:                                               ; preds = %7
  %21 = tail call i32 @llvm.smax.i32(i32 %9, i32 %11)
  %22 = sext i32 %21 to i64
  br label %23

23:                                               ; preds = %33, %20
  %24 = phi i64 [ %12, %20 ], [ %25, %33 ]
  %25 = add nsw i64 %24, 1
  %26 = icmp eq i64 %24, %22
  br i1 %26, label %43, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds ptr, ptr %10, i64 %25
  %29 = load ptr, ptr %28, align 8, !tbaa !7
  %30 = getelementptr inbounds i16, ptr %29, i64 1
  %31 = load i16, ptr %30, align 2, !tbaa !542
  %32 = icmp eq i16 %16, %31
  br i1 %32, label %39, label %33

33:                                               ; preds = %27
  %34 = load i16, ptr %29, align 2, !tbaa !542
  %35 = sext i16 %34 to i64
  %36 = getelementptr inbounds i16, ptr %29, i64 %35
  %37 = load i16, ptr %36, align 2, !tbaa !542
  %38 = icmp eq i16 %16, %37
  br i1 %38, label %39, label %23, !llvm.loop !770

39:                                               ; preds = %33, %27
  %.lcssa = phi i64 [ %25, %33 ], [ %25, %27 ]
  %40 = phi i32 [ -1, %27 ], [ 1, %33 ]
  %41 = trunc i64 %.lcssa to i32
  tail call void @joinSeg(i32 noundef %11, i32 noundef -1, i32 noundef %41, i32 noundef %40) #43
  %42 = add nsw i32 %11, -1
  br label %76

43:                                               ; preds = %23, %7
  %44 = load i16, ptr %14, align 2, !tbaa !542
  %45 = sext i16 %44 to i64
  %46 = getelementptr inbounds i16, ptr %14, i64 %45
  %47 = load i16, ptr %46, align 2, !tbaa !542
  %48 = sext i16 %47 to i32
  %49 = icmp slt i32 %18, %48
  br i1 %49, label %50, label %76

50:                                               ; preds = %43
  %51 = sext i16 %8 to i32
  %52 = tail call i32 @llvm.smax.i32(i32 %11, i32 %51)
  %53 = sext i32 %52 to i64
  br label %54

54:                                               ; preds = %69, %50
  %55 = phi i64 [ %12, %50 ], [ %56, %69 ]
  %56 = add nsw i64 %55, 1
  %57 = icmp eq i64 %55, %53
  br i1 %57, label %76, label %58

58:                                               ; preds = %54
  %59 = getelementptr inbounds ptr, ptr %10, i64 %56
  %60 = load ptr, ptr %59, align 8, !tbaa !7
  %61 = load i16, ptr %60, align 2, !tbaa !542
  %62 = sext i16 %61 to i64
  %63 = getelementptr inbounds i16, ptr %60, i64 %62
  %64 = load i16, ptr %63, align 2, !tbaa !542
  %65 = icmp eq i16 %47, %64
  br i1 %65, label %66, label %69

66:                                               ; preds = %58
  %.lcssa1 = phi i64 [ %56, %58 ]
  %67 = trunc i64 %.lcssa1 to i32
  tail call void @joinSeg(i32 noundef %11, i32 noundef 1, i32 noundef %67, i32 noundef 1) #43
  %68 = add nsw i32 %11, -1
  br label %76

69:                                               ; preds = %58
  %70 = getelementptr inbounds i16, ptr %60, i64 1
  %71 = load i16, ptr %70, align 2, !tbaa !542
  %72 = icmp eq i16 %47, %71
  br i1 %72, label %73, label %54, !llvm.loop !771

73:                                               ; preds = %69
  %.lcssa2 = phi i64 [ %56, %69 ]
  %74 = trunc i64 %.lcssa2 to i32
  tail call void @joinSeg(i32 noundef %11, i32 noundef 1, i32 noundef %74, i32 noundef -1) #43
  %75 = add nsw i32 %11, -1
  br label %76

76:                                               ; preds = %73, %66, %54, %43, %39
  %77 = phi i32 [ %42, %39 ], [ %68, %66 ], [ %75, %73 ], [ %11, %43 ], [ %11, %54 ]
  %78 = add nsw i32 %77, 1
  %79 = load ptr, ptr @netSegArray, align 8, !tbaa !7
  %80 = load ptr, ptr %79, align 8, !tbaa !7
  %81 = load i16, ptr %80, align 2, !tbaa !542
  %82 = sext i16 %81 to i32
  %83 = icmp slt i32 %78, %82
  br i1 %83, label %7, label %84, !llvm.loop !772

84:                                               ; preds = %76, %0
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @joinSeg(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3) #2 {
  %5 = icmp slt i32 %1, 0
  br i1 %5, label %6, label %60

6:                                                ; preds = %4
  %7 = load ptr, ptr @netSegArray, align 8, !tbaa !7
  %8 = sext i32 %0 to i64
  %9 = getelementptr inbounds ptr, ptr %7, i64 %8
  %10 = load ptr, ptr %9, align 8, !tbaa !7
  %11 = load i16, ptr %10, align 2, !tbaa !542
  %12 = icmp sgt i16 %11, 0
  br i1 %12, label %13, label %31

13:                                               ; preds = %6
  %14 = zext i16 %11 to i64
  %15 = sext i32 %2 to i64
  %16 = getelementptr inbounds ptr, ptr %7, i64 %15
  %17 = load ptr, ptr %16, align 8, !tbaa !7
  br label %18

18:                                               ; preds = %18, %13
  %19 = phi i64 [ %14, %13 ], [ %29, %18 ]
  %20 = getelementptr inbounds i16, ptr %10, i64 %19
  %21 = load i16, ptr %20, align 2, !tbaa !542
  %22 = load i16, ptr %17, align 2, !tbaa !542
  %23 = sext i16 %22 to i64
  %24 = add nuw i64 %19, 4294967295
  %25 = add i64 %24, %23
  %26 = shl i64 %25, 32
  %27 = ashr exact i64 %26, 32
  %28 = getelementptr inbounds i16, ptr %10, i64 %27
  store i16 %21, ptr %28, align 2, !tbaa !542
  %29 = add nsw i64 %19, -1
  %30 = icmp ugt i64 %19, 1
  br i1 %30, label %18, label %31, !llvm.loop !773

31:                                               ; preds = %18, %6
  %32 = icmp slt i32 %3, 0
  %33 = sext i32 %2 to i64
  %34 = getelementptr inbounds ptr, ptr %7, i64 %33
  %35 = load ptr, ptr %34, align 8, !tbaa !7
  %36 = load i16, ptr %35, align 2, !tbaa !542
  %37 = icmp sgt i16 %36, 1
  br i1 %32, label %39, label %38

38:                                               ; preds = %31
  br i1 %37, label %51, label %111

39:                                               ; preds = %31
  br i1 %37, label %40, label %111

40:                                               ; preds = %39
  %41 = zext i16 %36 to i64
  br label %42

42:                                               ; preds = %42, %40
  %43 = phi i64 [ 1, %40 ], [ %49, %42 ]
  %44 = phi i64 [ %41, %40 ], [ %48, %42 ]
  %45 = getelementptr inbounds i16, ptr %35, i64 %44
  %46 = load i16, ptr %45, align 2, !tbaa !542
  %47 = getelementptr inbounds i16, ptr %10, i64 %43
  store i16 %46, ptr %47, align 2, !tbaa !542
  %48 = add nsw i64 %44, -1
  %49 = add nuw nsw i64 %43, 1
  %50 = icmp eq i64 %49, %41
  br i1 %50, label %111, label %42, !llvm.loop !774

51:                                               ; preds = %51, %38
  %52 = phi i64 [ %56, %51 ], [ 1, %38 ]
  %53 = getelementptr inbounds i16, ptr %35, i64 %52
  %54 = load i16, ptr %53, align 2, !tbaa !542
  %55 = getelementptr inbounds i16, ptr %10, i64 %52
  store i16 %54, ptr %55, align 2, !tbaa !542
  %56 = add nuw nsw i64 %52, 1
  %57 = load i16, ptr %35, align 2, !tbaa !542
  %58 = sext i16 %57 to i64
  %59 = icmp slt i64 %56, %58
  br i1 %59, label %51, label %111, !llvm.loop !775

60:                                               ; preds = %4
  %61 = icmp slt i32 %3, 0
  %62 = load ptr, ptr @netSegArray, align 8, !tbaa !7
  br i1 %61, label %63, label %88

63:                                               ; preds = %60
  %64 = sext i32 %2 to i64
  %65 = getelementptr inbounds ptr, ptr %62, i64 %64
  %66 = load ptr, ptr %65, align 8, !tbaa !7
  %67 = load i16, ptr %66, align 2, !tbaa !542
  %68 = icmp slt i16 %67, 2
  %69 = sext i32 %0 to i64
  br i1 %68, label %111, label %70

70:                                               ; preds = %63
  %71 = getelementptr inbounds ptr, ptr %62, i64 %69
  %72 = load ptr, ptr %71, align 8, !tbaa !7
  br label %73

73:                                               ; preds = %73, %70
  %74 = phi i64 [ 2, %70 ], [ %84, %73 ]
  %75 = getelementptr inbounds i16, ptr %66, i64 %74
  %76 = load i16, ptr %75, align 2, !tbaa !542
  %77 = load i16, ptr %72, align 2, !tbaa !542
  %78 = sext i16 %77 to i64
  %79 = add nuw i64 %74, 4294967295
  %80 = add i64 %79, %78
  %81 = shl i64 %80, 32
  %82 = ashr exact i64 %81, 32
  %83 = getelementptr inbounds i16, ptr %72, i64 %82
  store i16 %76, ptr %83, align 2, !tbaa !542
  %84 = add nuw nsw i64 %74, 1
  %85 = load i16, ptr %66, align 2, !tbaa !542
  %86 = sext i16 %85 to i64
  %87 = icmp slt i64 %74, %86
  br i1 %87, label %73, label %111, !llvm.loop !776

88:                                               ; preds = %60
  %89 = sext i32 %0 to i64
  %90 = getelementptr inbounds ptr, ptr %62, i64 %89
  %91 = load ptr, ptr %90, align 8, !tbaa !7
  %92 = sext i32 %2 to i64
  %93 = getelementptr inbounds ptr, ptr %62, i64 %92
  %94 = load ptr, ptr %93, align 8, !tbaa !7
  %95 = load i16, ptr %94, align 2, !tbaa !542
  %96 = icmp sgt i16 %95, 1
  br i1 %96, label %97, label %111

97:                                               ; preds = %88
  %98 = zext i16 %95 to i64
  %99 = load i16, ptr %91, align 2, !tbaa !542
  %100 = sext i16 %99 to i64
  br label %101

101:                                              ; preds = %101, %97
  %102 = phi i64 [ %100, %97 ], [ %105, %101 ]
  %103 = phi i64 [ %98, %97 ], [ %104, %101 ]
  %104 = add nsw i64 %103, -1
  %105 = add nsw i64 %102, 1
  %106 = and i64 %104, 4294967295
  %107 = getelementptr inbounds i16, ptr %94, i64 %106
  %108 = load i16, ptr %107, align 2, !tbaa !542
  %109 = getelementptr inbounds i16, ptr %91, i64 %105
  store i16 %108, ptr %109, align 2, !tbaa !542
  %110 = icmp ugt i64 %103, 2
  br i1 %110, label %101, label %111, !llvm.loop !777

111:                                              ; preds = %101, %88, %73, %63, %51, %42, %39, %38
  %112 = phi i64 [ %89, %88 ], [ %8, %38 ], [ %8, %39 ], [ %69, %63 ], [ %8, %42 ], [ %8, %51 ], [ %69, %73 ], [ %89, %101 ]
  %113 = phi ptr [ %94, %88 ], [ %35, %38 ], [ %35, %39 ], [ %66, %63 ], [ %35, %42 ], [ %35, %51 ], [ %66, %73 ], [ %94, %101 ]
  %114 = phi i64 [ %92, %88 ], [ %33, %38 ], [ %33, %39 ], [ %64, %63 ], [ %33, %42 ], [ %33, %51 ], [ %64, %73 ], [ %92, %101 ]
  %115 = phi ptr [ %62, %88 ], [ %7, %38 ], [ %7, %39 ], [ %62, %63 ], [ %7, %42 ], [ %7, %51 ], [ %62, %73 ], [ %62, %101 ]
  %116 = load i16, ptr %113, align 2, !tbaa !542
  %117 = add i16 %116, -1
  %118 = getelementptr inbounds ptr, ptr %115, i64 %112
  %119 = load ptr, ptr %118, align 8, !tbaa !7
  %120 = load i16, ptr %119, align 2, !tbaa !542
  %121 = add i16 %117, %120
  store i16 %121, ptr %119, align 2, !tbaa !542
  %122 = load ptr, ptr %115, align 8, !tbaa !7
  %123 = load i16, ptr %122, align 2, !tbaa !542
  %124 = sext i16 %123 to i32
  %125 = icmp sgt i32 %124, %2
  br i1 %125, label %132, label %152

126:                                              ; preds = %143
  %127 = load i16, ptr %122, align 2, !tbaa !542
  br label %128

128:                                              ; preds = %132, %126
  %129 = phi i16 [ %127, %126 ], [ %133, %132 ]
  %130 = sext i16 %129 to i64
  %131 = icmp slt i64 %135, %130
  br i1 %131, label %132, label %152, !llvm.loop !778

132:                                              ; preds = %128, %111
  %133 = phi i16 [ %129, %128 ], [ %123, %111 ]
  %134 = phi i64 [ %135, %128 ], [ %114, %111 ]
  %135 = add nsw i64 %134, 1
  %136 = getelementptr inbounds ptr, ptr %115, i64 %135
  %137 = load ptr, ptr %136, align 8, !tbaa !7
  %138 = load i16, ptr %137, align 2, !tbaa !542
  %139 = icmp slt i16 %138, 0
  br i1 %139, label %128, label %140

140:                                              ; preds = %132
  %141 = getelementptr inbounds ptr, ptr %115, i64 %134
  %142 = load ptr, ptr %141, align 8, !tbaa !7
  br label %143

143:                                              ; preds = %143, %140
  %144 = phi i64 [ 0, %140 ], [ %148, %143 ]
  %145 = getelementptr inbounds i16, ptr %137, i64 %144
  %146 = load i16, ptr %145, align 2, !tbaa !542
  %147 = getelementptr inbounds i16, ptr %142, i64 %144
  store i16 %146, ptr %147, align 2, !tbaa !542
  %148 = add nuw nsw i64 %144, 1
  %149 = load i16, ptr %137, align 2, !tbaa !542
  %150 = sext i16 %149 to i64
  %151 = icmp slt i64 %144, %150
  br i1 %151, label %143, label %126, !llvm.loop !779

152:                                              ; preds = %128, %111
  %153 = phi i16 [ %123, %111 ], [ %129, %128 ]
  %154 = add i16 %153, -1
  store i16 %154, ptr %122, align 2, !tbaa !542
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @readcells(ptr noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca [1024 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %3) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %7) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %8) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %9) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %10) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %11) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %12) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %13) #47
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %14) #47
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %15) #47
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %16) #47
  call void @llvm.lifetime.start.p0(i64 1024, ptr nonnull %17) #47
  tail call void @parser(ptr noundef %0) #44
  tail call void @pass2(ptr noundef %0) #44
  store i32 0, ptr @perim, align 4, !tbaa !17
  %18 = tail call noalias dereferenceable_or_null(1020) ptr @malloc(i64 noundef 1020) #45
  store ptr %18, ptr @kArray, align 8, !tbaa !7
  %19 = getelementptr i8, ptr %18, i64 20
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(1000) %19, i8 0, i64 1000, i1 false), !tbaa !17
  %20 = tail call noalias dereferenceable_or_null(248) ptr @malloc(i64 noundef 248) #45
  store ptr %20, ptr @A, align 8, !tbaa !7
  %21 = tail call noalias dereferenceable_or_null(248) ptr @malloc(i64 noundef 248) #45
  store ptr %21, ptr @B, align 8, !tbaa !7
  %22 = tail call noalias dereferenceable_or_null(40) ptr @malloc(i64 noundef 40) #45
  store ptr %22, ptr @R, align 8, !tbaa !7
  %23 = tail call noalias dereferenceable_or_null(744) ptr @malloc(i64 noundef 744) #45
  store ptr %23, ptr @pSideArray, align 8, !tbaa !7
  br label %24

24:                                               ; preds = %1285, %1
  %25 = phi i32 [ 0, %1 ], [ %1286, %1285 ]
  %26 = phi i32 [ undef, %1 ], [ %1287, %1285 ]
  %27 = phi i32 [ undef, %1 ], [ %1288, %1285 ]
  %28 = phi i32 [ 0, %1 ], [ %1289, %1285 ]
  %29 = phi i32 [ undef, %1 ], [ %1290, %1285 ]
  %30 = phi i32 [ undef, %1 ], [ %1291, %1285 ]
  %31 = phi i32 [ undef, %1 ], [ %1292, %1285 ]
  %32 = phi i32 [ undef, %1 ], [ %1293, %1285 ]
  %33 = phi i32 [ undef, %1 ], [ %1294, %1285 ]
  %34 = phi i32 [ undef, %1 ], [ %1295, %1285 ]
  %35 = phi i32 [ 0, %1 ], [ %1296, %1285 ]
  %36 = phi i32 [ undef, %1 ], [ %1297, %1285 ]
  %37 = phi i32 [ undef, %1 ], [ %1298, %1285 ]
  %38 = phi i32 [ undef, %1 ], [ %1299, %1285 ]
  %39 = phi ptr [ undef, %1 ], [ %1300, %1285 ]
  %40 = phi ptr [ undef, %1 ], [ %1301, %1285 ]
  %41 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.576, ptr noundef nonnull %17) #44
  %42 = icmp eq i32 %41, 1
  br i1 %42, label %43, label %1302

43:                                               ; preds = %24
  %44 = call i32 @bcmp(ptr noundef nonnull dereferenceable(5) %17, ptr noundef nonnull dereferenceable(5) @.str.1.577, i64 5)
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %254

46:                                               ; preds = %43
  %47 = icmp sgt i32 %25, 0
  br i1 %47, label %48, label %49

48:                                               ; preds = %46
  call void @watesides(ptr noundef %39) #44
  br label %49

49:                                               ; preds = %48, %46
  %50 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %51 = add nsw i32 %25, 1
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds ptr, ptr %50, i64 %52
  %54 = load ptr, ptr %53, align 8, !tbaa !7
  %55 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.2.578, ptr noundef nonnull %13) #44
  %56 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.3.579, ptr noundef nonnull %17) #44
  %57 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.3.579, ptr noundef nonnull %17) #44
  %58 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %17) #50
  %59 = add i64 %58, 1
  %60 = call noalias ptr @malloc(i64 noundef %59) #45
  store ptr %60, ptr %54, align 8, !tbaa !291
  %61 = call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %60, ptr noundef nonnull dereferenceable(1) %17)
  %62 = load ptr, ptr @A, align 8, !tbaa !7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(248) %62, i8 0, i64 248, i1 false), !tbaa !17
  %63 = load ptr, ptr @R, align 8, !tbaa !7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(48) %63, i8 0, i64 48, i1 false), !tbaa !17
  %64 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.580, ptr noundef nonnull %10) #44
  %65 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.576, ptr noundef nonnull %17) #44
  %66 = load i32, ptr %10, align 4, !tbaa !17
  %67 = icmp slt i32 %66, 1
  br i1 %67, label %84, label %68

68:                                               ; preds = %68, %49
  %69 = phi i32 [ %81, %68 ], [ 1, %49 ]
  %70 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.581, ptr noundef nonnull %11, ptr noundef nonnull %12) #44
  %71 = load i32, ptr %11, align 4, !tbaa !17
  %72 = load ptr, ptr @A, align 8, !tbaa !7
  %73 = load i32, ptr %72, align 4, !tbaa !102
  %74 = add nsw i32 %73, 1
  store i32 %74, ptr %72, align 4, !tbaa !102
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds %struct.bellbox, ptr %72, i64 %75
  store i32 %71, ptr %76, align 4, !tbaa !102
  %77 = load i32, ptr %12, align 4, !tbaa !17
  %78 = load i32, ptr %72, align 4, !tbaa !102
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds %struct.bellbox, ptr %72, i64 %79, i32 1
  store i32 %77, ptr %80, align 4, !tbaa !104
  %81 = add nuw nsw i32 %69, 1
  %82 = load i32, ptr %10, align 4, !tbaa !17
  %83 = icmp slt i32 %69, %82
  br i1 %83, label %68, label %84, !llvm.loop !780

84:                                               ; preds = %68, %49
  %85 = phi i32 [ %66, %49 ], [ %82, %68 ]
  %86 = getelementptr inbounds %struct.cellbox, ptr %54, i64 0, i32 7
  store i32 %85, ptr %86, align 8, !tbaa !350
  %87 = call i32 @perimeter() #44
  %88 = load i32, ptr @perim, align 4, !tbaa !17
  %89 = add nsw i32 %88, %87
  store i32 %89, ptr @perim, align 4, !tbaa !17
  %90 = load ptr, ptr @A, align 8, !tbaa !7
  %91 = load i32, ptr %90, align 4, !tbaa !102
  %92 = icmp slt i32 %91, 1
  br i1 %92, label %170, label %93

93:                                               ; preds = %84
  %94 = getelementptr inbounds %struct.bellbox, ptr %90, i64 1
  %95 = load ptr, ptr @pSideArray, align 8
  %96 = zext i32 %91 to i64
  %97 = add nuw i32 %91, 1
  %98 = zext i32 %97 to i64
  br label %100

99:                                               ; preds = %142
  br i1 %92, label %170, label %145

100:                                              ; preds = %142, %93
  %101 = phi i64 [ 1, %93 ], [ %143, %142 ]
  %102 = icmp slt i64 %101, %96
  br i1 %102, label %103, label %129

103:                                              ; preds = %100
  %104 = and i64 %101, 1
  %105 = icmp eq i64 %104, 0
  %106 = add nuw nsw i64 %101, 1
  %107 = getelementptr inbounds %struct.psidebox, ptr %95, i64 %101
  %108 = getelementptr inbounds %struct.psidebox, ptr %95, i64 %101, i32 2
  %109 = getelementptr inbounds %struct.psidebox, ptr %95, i64 %101, i32 1
  %110 = getelementptr inbounds %struct.psidebox, ptr %95, i64 %101, i32 3
  br i1 %105, label %120, label %111

111:                                              ; preds = %103
  %112 = getelementptr inbounds %struct.bellbox, ptr %90, i64 %106, i32 1
  %113 = load i32, ptr %112, align 4, !tbaa !104
  %114 = getelementptr inbounds %struct.bellbox, ptr %90, i64 %101, i32 1
  %115 = load i32, ptr %114, align 4, !tbaa !104
  %116 = sub nsw i32 %113, %115
  %117 = call i32 @llvm.abs.i32(i32 %116, i1 true)
  store i32 %117, ptr %107, align 8, !tbaa !781
  store i32 1, ptr %108, align 8, !tbaa !351
  store double 0.000000e+00, ptr %109, align 8, !tbaa !355
  %118 = getelementptr inbounds %struct.bellbox, ptr %90, i64 %101
  %119 = load i32, ptr %118, align 4, !tbaa !102
  store i32 %119, ptr %110, align 4, !tbaa !353
  br label %142

120:                                              ; preds = %103
  %121 = getelementptr inbounds %struct.bellbox, ptr %90, i64 %106
  %122 = load i32, ptr %121, align 4, !tbaa !102
  %123 = getelementptr inbounds %struct.bellbox, ptr %90, i64 %101
  %124 = load i32, ptr %123, align 4, !tbaa !102
  %125 = sub nsw i32 %122, %124
  %126 = call i32 @llvm.abs.i32(i32 %125, i1 true)
  store i32 %126, ptr %107, align 8, !tbaa !781
  store i32 0, ptr %108, align 8, !tbaa !351
  store double 0.000000e+00, ptr %109, align 8, !tbaa !355
  %127 = getelementptr inbounds %struct.bellbox, ptr %90, i64 %101, i32 1
  %128 = load i32, ptr %127, align 4, !tbaa !104
  store i32 %128, ptr %110, align 4, !tbaa !353
  br label %142

129:                                              ; preds = %100
  %130 = load i32, ptr %94, align 4, !tbaa !102
  %131 = getelementptr inbounds %struct.bellbox, ptr %90, i64 %101
  %132 = load i32, ptr %131, align 4, !tbaa !102
  %133 = sub nsw i32 %130, %132
  %134 = call i32 @llvm.abs.i32(i32 %133, i1 true)
  %135 = getelementptr inbounds %struct.psidebox, ptr %95, i64 %101
  store i32 %134, ptr %135, align 8, !tbaa !781
  %136 = getelementptr inbounds %struct.psidebox, ptr %95, i64 %101, i32 2
  store i32 0, ptr %136, align 8, !tbaa !351
  %137 = getelementptr inbounds %struct.psidebox, ptr %95, i64 %101, i32 1
  store double 0.000000e+00, ptr %137, align 8, !tbaa !355
  %138 = getelementptr inbounds %struct.bellbox, ptr %90, i64 %101, i32 1
  %139 = load i32, ptr %138, align 4, !tbaa !104
  %140 = getelementptr inbounds %struct.psidebox, ptr %95, i64 %101, i32 3
  store i32 %139, ptr %140, align 4, !tbaa !353
  %141 = add nuw nsw i64 %101, 1
  br label %142

142:                                              ; preds = %129, %120, %111
  %143 = phi i64 [ %141, %129 ], [ %106, %120 ], [ %106, %111 ]
  %144 = icmp eq i64 %143, %98
  br i1 %144, label %99, label %100, !llvm.loop !782

145:                                              ; preds = %161, %99
  %146 = phi i64 [ %166, %161 ], [ 1, %99 ]
  %147 = phi i32 [ %165, %161 ], [ %34, %99 ]
  %148 = phi i32 [ %164, %161 ], [ %33, %99 ]
  %149 = phi i32 [ %163, %161 ], [ %32, %99 ]
  %150 = phi i32 [ %162, %161 ], [ %31, %99 ]
  %151 = getelementptr inbounds %struct.bellbox, ptr %90, i64 %146
  %152 = load i32, ptr %151, align 4, !tbaa !102
  store i32 %152, ptr %11, align 4, !tbaa !17
  %153 = getelementptr inbounds %struct.bellbox, ptr %90, i64 %146, i32 1
  %154 = load i32, ptr %153, align 4, !tbaa !104
  store i32 %154, ptr %12, align 4, !tbaa !17
  %155 = icmp eq i64 %146, 1
  br i1 %155, label %161, label %156

156:                                              ; preds = %145
  %157 = call i32 @llvm.smin.i32(i32 %152, i32 %150)
  %158 = call i32 @llvm.smax.i32(i32 %152, i32 %148)
  %159 = call i32 @llvm.smin.i32(i32 %154, i32 %149)
  %160 = call i32 @llvm.smax.i32(i32 %154, i32 %147)
  br label %161

161:                                              ; preds = %156, %145
  %162 = phi i32 [ %157, %156 ], [ %152, %145 ]
  %163 = phi i32 [ %159, %156 ], [ %154, %145 ]
  %164 = phi i32 [ %158, %156 ], [ %152, %145 ]
  %165 = phi i32 [ %160, %156 ], [ %154, %145 ]
  %166 = add nuw nsw i64 %146, 1
  %167 = load i32, ptr %90, align 4, !tbaa !102
  %168 = sext i32 %167 to i64
  %169 = icmp slt i64 %146, %168
  br i1 %169, label %145, label %170, !llvm.loop !783

170:                                              ; preds = %161, %99, %84
  %171 = phi i32 [ %31, %99 ], [ %31, %84 ], [ %162, %161 ]
  %172 = phi i32 [ %32, %99 ], [ %32, %84 ], [ %163, %161 ]
  %173 = phi i32 [ %33, %99 ], [ %33, %84 ], [ %164, %161 ]
  %174 = phi i32 [ %34, %99 ], [ %34, %84 ], [ %165, %161 ]
  %175 = call noalias dereferenceable_or_null(104) ptr @malloc(i64 noundef 104) #45
  %176 = getelementptr inbounds %struct.cellbox, ptr %54, i64 0, i32 21
  store ptr %175, ptr %176, align 8, !tbaa !7
  store ptr null, ptr %175, align 8, !tbaa !172
  %177 = getelementptr inbounds %struct.tilebox, ptr %175, i64 0, i32 17
  %178 = add nsw i32 %173, %171
  %179 = sdiv i32 %178, 2
  %180 = add nsw i32 %174, %172
  %181 = sdiv i32 %180, 2
  %182 = sub nsw i32 %171, %179
  %183 = getelementptr inbounds %struct.tilebox, ptr %175, i64 0, i32 13
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %177, i8 0, i64 16, i1 false)
  store i32 %182, ptr %183, align 8, !tbaa !382
  %184 = getelementptr inbounds %struct.tilebox, ptr %175, i64 0, i32 9
  store i32 %182, ptr %184, align 8, !tbaa !167
  %185 = sub nsw i32 %173, %179
  %186 = getelementptr inbounds %struct.tilebox, ptr %175, i64 0, i32 14
  store i32 %185, ptr %186, align 4, !tbaa !383
  %187 = getelementptr inbounds %struct.tilebox, ptr %175, i64 0, i32 10
  store i32 %185, ptr %187, align 4, !tbaa !168
  %188 = sub nsw i32 %172, %181
  %189 = getelementptr inbounds %struct.tilebox, ptr %175, i64 0, i32 15
  store i32 %188, ptr %189, align 8, !tbaa !393
  %190 = getelementptr inbounds %struct.tilebox, ptr %175, i64 0, i32 11
  store i32 %188, ptr %190, align 8, !tbaa !169
  %191 = sub nsw i32 %174, %181
  %192 = getelementptr inbounds %struct.tilebox, ptr %175, i64 0, i32 16
  store i32 %191, ptr %192, align 4, !tbaa !394
  %193 = getelementptr inbounds %struct.tilebox, ptr %175, i64 0, i32 12
  store i32 %191, ptr %193, align 4, !tbaa !170
  %194 = getelementptr inbounds %struct.tilebox, ptr %175, i64 0, i32 5
  %195 = getelementptr inbounds %struct.cellbox, ptr %54, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %194, i8 0, i64 16, i1 false)
  store i32 %179, ptr %195, align 4, !tbaa !164
  %196 = getelementptr inbounds %struct.cellbox, ptr %54, i64 0, i32 3
  store i32 %181, ptr %196, align 8, !tbaa !165
  %197 = getelementptr inbounds %struct.cellbox, ptr %54, i64 0, i32 6
  store i32 0, ptr %197, align 4, !tbaa !171
  br label %198

198:                                              ; preds = %198, %170
  %199 = phi ptr [ %175, %170 ], [ %202, %198 ]
  %200 = load i32, ptr %197, align 4, !tbaa !171
  %201 = add nsw i32 %200, 1
  store i32 %201, ptr %197, align 4, !tbaa !171
  %202 = call noalias dereferenceable_or_null(104) ptr @malloc(i64 noundef 104) #45
  store ptr %202, ptr %199, align 8, !tbaa !172
  store ptr null, ptr %202, align 8, !tbaa !172
  %203 = getelementptr inbounds %struct.tilebox, ptr %202, i64 0, i32 17
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %203, i8 0, i64 16, i1 false)
  call void @buster() #44
  %204 = load ptr, ptr @R, align 8, !tbaa !7
  %205 = getelementptr inbounds %struct.bellbox, ptr %204, i64 1
  %206 = load i32, ptr %205, align 4, !tbaa !102
  %207 = sub nsw i32 %206, %179
  %208 = getelementptr inbounds %struct.tilebox, ptr %202, i64 0, i32 13
  store i32 %207, ptr %208, align 8, !tbaa !382
  %209 = getelementptr inbounds %struct.tilebox, ptr %202, i64 0, i32 9
  store i32 %207, ptr %209, align 8, !tbaa !167
  %210 = getelementptr inbounds %struct.bellbox, ptr %204, i64 4
  %211 = load i32, ptr %210, align 4, !tbaa !102
  %212 = sub nsw i32 %211, %179
  %213 = getelementptr inbounds %struct.tilebox, ptr %202, i64 0, i32 14
  store i32 %212, ptr %213, align 4, !tbaa !383
  %214 = getelementptr inbounds %struct.tilebox, ptr %202, i64 0, i32 10
  store i32 %212, ptr %214, align 4, !tbaa !168
  %215 = getelementptr inbounds %struct.bellbox, ptr %204, i64 1, i32 1
  %216 = load i32, ptr %215, align 4, !tbaa !104
  %217 = sub nsw i32 %216, %181
  %218 = getelementptr inbounds %struct.tilebox, ptr %202, i64 0, i32 15
  store i32 %217, ptr %218, align 8, !tbaa !393
  %219 = getelementptr inbounds %struct.tilebox, ptr %202, i64 0, i32 11
  store i32 %217, ptr %219, align 8, !tbaa !169
  %220 = getelementptr inbounds %struct.bellbox, ptr %204, i64 2, i32 1
  %221 = load i32, ptr %220, align 4, !tbaa !104
  %222 = sub nsw i32 %221, %181
  %223 = getelementptr inbounds %struct.tilebox, ptr %202, i64 0, i32 16
  store i32 %222, ptr %223, align 4, !tbaa !394
  %224 = getelementptr inbounds %struct.tilebox, ptr %202, i64 0, i32 12
  store i32 %222, ptr %224, align 4, !tbaa !170
  %225 = getelementptr inbounds %struct.tilebox, ptr %202, i64 0, i32 5
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %225, i8 0, i64 16, i1 false)
  %226 = load ptr, ptr @A, align 8, !tbaa !7
  %227 = load i32, ptr %226, align 4, !tbaa !102
  %228 = icmp sgt i32 %227, 0
  br i1 %228, label %198, label %229, !llvm.loop !784

229:                                              ; preds = %198
  %230 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.576, ptr noundef nonnull %17) #44
  %231 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.580, ptr noundef nonnull %7) #44
  %232 = load i32, ptr %7, align 4, !tbaa !17
  %233 = getelementptr inbounds %struct.cellbox, ptr %54, i64 0, i32 1
  store i32 %232, ptr %233, align 8, !tbaa !378
  %234 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.580, ptr noundef nonnull %6) #44
  %235 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.576, ptr noundef nonnull %17) #44
  %236 = load i32, ptr %6, align 4, !tbaa !17
  %237 = icmp slt i32 %236, 1
  br i1 %237, label %1285, label %238

238:                                              ; preds = %229
  %239 = getelementptr inbounds %struct.cellbox, ptr %54, i64 0, i32 5
  %240 = getelementptr inbounds %struct.cellbox, ptr %54, i64 0, i32 4, i64 8
  br label %241

241:                                              ; preds = %250, %238
  %242 = phi i32 [ 1, %238 ], [ %251, %250 ]
  %243 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.580, ptr noundef nonnull %2) #44
  %244 = load i32, ptr %2, align 4, !tbaa !17
  %245 = sext i32 %244 to i64
  %246 = getelementptr inbounds %struct.cellbox, ptr %54, i64 0, i32 4, i64 %245
  store i32 1, ptr %246, align 4, !tbaa !17
  %247 = icmp eq i32 %242, 1
  br i1 %247, label %248, label %250

248:                                              ; preds = %241
  %249 = load i32, ptr %2, align 4, !tbaa !17
  store i32 %249, ptr %239, align 8, !tbaa !45
  store i32 %249, ptr %240, align 4, !tbaa !17
  br label %250

250:                                              ; preds = %248, %241
  %251 = add nuw nsw i32 %242, 1
  %252 = load i32, ptr %6, align 4, !tbaa !17
  %253 = icmp slt i32 %242, %252
  br i1 %253, label %241, label %1285, !llvm.loop !785

254:                                              ; preds = %43
  %255 = load i32, ptr %17, align 16
  %256 = icmp eq i32 %255, 6578544
  br i1 %256, label %257, label %387

257:                                              ; preds = %254
  %258 = icmp eq i32 %28, 0
  br i1 %258, label %259, label %260

259:                                              ; preds = %257
  call void @watesides(ptr noundef %39) #44
  br label %260

260:                                              ; preds = %259, %257
  %261 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %262 = add nsw i32 %25, 1
  %263 = sext i32 %262 to i64
  %264 = getelementptr inbounds ptr, ptr %261, i64 %263
  %265 = load ptr, ptr %264, align 8, !tbaa !7
  %266 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.2.578, ptr noundef nonnull %13) #44
  %267 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.3.579, ptr noundef nonnull %17) #44
  %268 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.3.579, ptr noundef nonnull %17) #44
  %269 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %17) #50
  %270 = add i64 %269, 1
  %271 = call noalias ptr @malloc(i64 noundef %270) #45
  store ptr %271, ptr %265, align 8, !tbaa !291
  %272 = call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %271, ptr noundef nonnull dereferenceable(1) %17)
  %273 = load ptr, ptr @A, align 8, !tbaa !7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(248) %273, i8 0, i64 248, i1 false), !tbaa !17
  %274 = load ptr, ptr @R, align 8, !tbaa !7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(48) %274, i8 0, i64 48, i1 false), !tbaa !17
  %275 = add nsw i32 %28, 1
  %276 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.580, ptr noundef nonnull %10) #44
  %277 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.576, ptr noundef nonnull %17) #44
  %278 = load i32, ptr %10, align 4, !tbaa !17
  %279 = icmp slt i32 %278, 1
  br i1 %279, label %280, label %287

280:                                              ; preds = %260
  %281 = load ptr, ptr @A, align 8, !tbaa !7
  %282 = load i32, ptr %281, align 4, !tbaa !102
  br label %283

283:                                              ; preds = %287, %280
  %284 = phi i32 [ %282, %280 ], [ %297, %287 ]
  %285 = phi ptr [ %281, %280 ], [ %291, %287 ]
  %286 = icmp slt i32 %284, 1
  br i1 %286, label %328, label %303

287:                                              ; preds = %287, %260
  %288 = phi i32 [ %300, %287 ], [ 1, %260 ]
  %289 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.581, ptr noundef nonnull %11, ptr noundef nonnull %12) #44
  %290 = load i32, ptr %11, align 4, !tbaa !17
  %291 = load ptr, ptr @A, align 8, !tbaa !7
  %292 = load i32, ptr %291, align 4, !tbaa !102
  %293 = add nsw i32 %292, 1
  store i32 %293, ptr %291, align 4, !tbaa !102
  %294 = sext i32 %293 to i64
  %295 = getelementptr inbounds %struct.bellbox, ptr %291, i64 %294
  store i32 %290, ptr %295, align 4, !tbaa !102
  %296 = load i32, ptr %12, align 4, !tbaa !17
  %297 = load i32, ptr %291, align 4, !tbaa !102
  %298 = sext i32 %297 to i64
  %299 = getelementptr inbounds %struct.bellbox, ptr %291, i64 %298, i32 1
  store i32 %296, ptr %299, align 4, !tbaa !104
  %300 = add nuw nsw i32 %288, 1
  %301 = load i32, ptr %10, align 4, !tbaa !17
  %302 = icmp slt i32 %288, %301
  br i1 %302, label %287, label %283, !llvm.loop !786

303:                                              ; preds = %319, %283
  %304 = phi i64 [ %324, %319 ], [ 1, %283 ]
  %305 = phi i32 [ %323, %319 ], [ %34, %283 ]
  %306 = phi i32 [ %322, %319 ], [ %33, %283 ]
  %307 = phi i32 [ %321, %319 ], [ %32, %283 ]
  %308 = phi i32 [ %320, %319 ], [ %31, %283 ]
  %309 = getelementptr inbounds %struct.bellbox, ptr %285, i64 %304
  %310 = load i32, ptr %309, align 4, !tbaa !102
  store i32 %310, ptr %11, align 4, !tbaa !17
  %311 = getelementptr inbounds %struct.bellbox, ptr %285, i64 %304, i32 1
  %312 = load i32, ptr %311, align 4, !tbaa !104
  store i32 %312, ptr %12, align 4, !tbaa !17
  %313 = icmp eq i64 %304, 1
  br i1 %313, label %319, label %314

314:                                              ; preds = %303
  %315 = call i32 @llvm.smin.i32(i32 %310, i32 %308)
  %316 = call i32 @llvm.smax.i32(i32 %310, i32 %306)
  %317 = call i32 @llvm.smin.i32(i32 %312, i32 %307)
  %318 = call i32 @llvm.smax.i32(i32 %312, i32 %305)
  br label %319

319:                                              ; preds = %314, %303
  %320 = phi i32 [ %315, %314 ], [ %310, %303 ]
  %321 = phi i32 [ %317, %314 ], [ %312, %303 ]
  %322 = phi i32 [ %316, %314 ], [ %310, %303 ]
  %323 = phi i32 [ %318, %314 ], [ %312, %303 ]
  %324 = add nuw nsw i64 %304, 1
  %325 = load i32, ptr %285, align 4, !tbaa !102
  %326 = sext i32 %325 to i64
  %327 = icmp slt i64 %304, %326
  br i1 %327, label %303, label %328, !llvm.loop !787

328:                                              ; preds = %319, %283
  %329 = phi i32 [ %31, %283 ], [ %320, %319 ]
  %330 = phi i32 [ %32, %283 ], [ %321, %319 ]
  %331 = phi i32 [ %33, %283 ], [ %322, %319 ]
  %332 = phi i32 [ %34, %283 ], [ %323, %319 ]
  %333 = call noalias dereferenceable_or_null(104) ptr @malloc(i64 noundef 104) #45
  %334 = getelementptr inbounds %struct.cellbox, ptr %265, i64 0, i32 21
  store ptr %333, ptr %334, align 8, !tbaa !7
  store ptr null, ptr %333, align 8, !tbaa !172
  %335 = getelementptr inbounds %struct.tilebox, ptr %333, i64 0, i32 17
  %336 = add nsw i32 %331, %329
  %337 = sdiv i32 %336, 2
  %338 = add nsw i32 %332, %330
  %339 = sdiv i32 %338, 2
  %340 = sub nsw i32 %329, %337
  %341 = getelementptr inbounds %struct.tilebox, ptr %333, i64 0, i32 13
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %335, i8 0, i64 16, i1 false)
  store i32 %340, ptr %341, align 8, !tbaa !382
  %342 = getelementptr inbounds %struct.tilebox, ptr %333, i64 0, i32 9
  store i32 %340, ptr %342, align 8, !tbaa !167
  %343 = sub nsw i32 %331, %337
  %344 = getelementptr inbounds %struct.tilebox, ptr %333, i64 0, i32 14
  store i32 %343, ptr %344, align 4, !tbaa !383
  %345 = getelementptr inbounds %struct.tilebox, ptr %333, i64 0, i32 10
  store i32 %343, ptr %345, align 4, !tbaa !168
  %346 = sub nsw i32 %330, %339
  %347 = getelementptr inbounds %struct.tilebox, ptr %333, i64 0, i32 15
  store i32 %346, ptr %347, align 8, !tbaa !393
  %348 = getelementptr inbounds %struct.tilebox, ptr %333, i64 0, i32 11
  store i32 %346, ptr %348, align 8, !tbaa !169
  %349 = sub nsw i32 %332, %339
  %350 = getelementptr inbounds %struct.tilebox, ptr %333, i64 0, i32 16
  store i32 %349, ptr %350, align 4, !tbaa !394
  %351 = getelementptr inbounds %struct.tilebox, ptr %333, i64 0, i32 12
  store i32 %349, ptr %351, align 4, !tbaa !170
  %352 = getelementptr inbounds %struct.tilebox, ptr %333, i64 0, i32 5
  %353 = getelementptr inbounds %struct.cellbox, ptr %265, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %352, i8 0, i64 16, i1 false)
  store i32 %337, ptr %353, align 4, !tbaa !164
  %354 = getelementptr inbounds %struct.cellbox, ptr %265, i64 0, i32 3
  store i32 %339, ptr %354, align 8, !tbaa !165
  %355 = getelementptr inbounds %struct.cellbox, ptr %265, i64 0, i32 6
  store i32 0, ptr %355, align 4, !tbaa !171
  br label %356

356:                                              ; preds = %356, %328
  %357 = phi ptr [ %333, %328 ], [ %360, %356 ]
  %358 = load i32, ptr %355, align 4, !tbaa !171
  %359 = add nsw i32 %358, 1
  store i32 %359, ptr %355, align 4, !tbaa !171
  %360 = call noalias dereferenceable_or_null(104) ptr @malloc(i64 noundef 104) #45
  store ptr %360, ptr %357, align 8, !tbaa !172
  store ptr null, ptr %360, align 8, !tbaa !172
  %361 = getelementptr inbounds %struct.tilebox, ptr %360, i64 0, i32 17
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %361, i8 0, i64 16, i1 false)
  call void @buster() #44
  %362 = load ptr, ptr @R, align 8, !tbaa !7
  %363 = getelementptr inbounds %struct.bellbox, ptr %362, i64 1
  %364 = load i32, ptr %363, align 4, !tbaa !102
  %365 = sub nsw i32 %364, %337
  %366 = getelementptr inbounds %struct.tilebox, ptr %360, i64 0, i32 13
  store i32 %365, ptr %366, align 8, !tbaa !382
  %367 = getelementptr inbounds %struct.tilebox, ptr %360, i64 0, i32 9
  store i32 %365, ptr %367, align 8, !tbaa !167
  %368 = getelementptr inbounds %struct.bellbox, ptr %362, i64 4
  %369 = load i32, ptr %368, align 4, !tbaa !102
  %370 = sub nsw i32 %369, %337
  %371 = getelementptr inbounds %struct.tilebox, ptr %360, i64 0, i32 14
  store i32 %370, ptr %371, align 4, !tbaa !383
  %372 = getelementptr inbounds %struct.tilebox, ptr %360, i64 0, i32 10
  store i32 %370, ptr %372, align 4, !tbaa !168
  %373 = getelementptr inbounds %struct.bellbox, ptr %362, i64 1, i32 1
  %374 = load i32, ptr %373, align 4, !tbaa !104
  %375 = sub nsw i32 %374, %339
  %376 = getelementptr inbounds %struct.tilebox, ptr %360, i64 0, i32 15
  store i32 %375, ptr %376, align 8, !tbaa !393
  %377 = getelementptr inbounds %struct.tilebox, ptr %360, i64 0, i32 11
  store i32 %375, ptr %377, align 8, !tbaa !169
  %378 = getelementptr inbounds %struct.bellbox, ptr %362, i64 2, i32 1
  %379 = load i32, ptr %378, align 4, !tbaa !104
  %380 = sub nsw i32 %379, %339
  %381 = getelementptr inbounds %struct.tilebox, ptr %360, i64 0, i32 16
  store i32 %380, ptr %381, align 4, !tbaa !394
  %382 = getelementptr inbounds %struct.tilebox, ptr %360, i64 0, i32 12
  store i32 %380, ptr %382, align 4, !tbaa !170
  %383 = getelementptr inbounds %struct.tilebox, ptr %360, i64 0, i32 5
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %383, i8 0, i64 16, i1 false)
  %384 = load ptr, ptr @A, align 8, !tbaa !7
  %385 = load i32, ptr %384, align 4, !tbaa !102
  %386 = icmp sgt i32 %385, 0
  br i1 %386, label %356, label %1285, !llvm.loop !788

387:                                              ; preds = %254
  %388 = load i64, ptr %17, align 16
  %389 = icmp eq i64 %388, 28539376718078320
  br i1 %389, label %390, label %435

390:                                              ; preds = %387
  %391 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.576, ptr noundef nonnull %17) #44
  %392 = load i16, ptr %17, align 16
  %393 = add i16 %392, -66
  %394 = call i16 @llvm.fshl.i16(i16 %392, i16 %393, i16 15)
  %395 = icmp ult i16 %394, 10
  br i1 %395, label %402, label %396

396:                                              ; preds = %402, %390
  %.lcssa23 = phi ptr [ %39, %402 ], [ %39, %390 ]
  %397 = load ptr, ptr @fpo, align 8, !tbaa !7
  %398 = call i64 @fwrite(ptr nonnull @.str.12.582, i64 35, i64 1, ptr %397)
  %399 = load ptr, ptr @fpo, align 8, !tbaa !7
  %400 = load ptr, ptr %.lcssa23, align 8, !tbaa !291
  %401 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %399, ptr noundef nonnull @.str.13.583, ptr noundef %400) #43
  call void @exit(i32 noundef 0) #49
  unreachable

402:                                              ; preds = %390
  %403 = lshr i16 801, %394
  %404 = and i16 %403, 1
  %405 = icmp eq i16 %404, 0
  br i1 %405, label %396, label %406

406:                                              ; preds = %402
  %407 = sext i16 %394 to i64
  %408 = getelementptr inbounds [10 x i32], ptr @switch.table.readcells, i64 0, i64 %407
  %409 = load i32, ptr %408, align 4
  %410 = getelementptr inbounds %struct.cellbox, ptr %39, i64 0, i32 11
  store i32 %409, ptr %410, align 8, !tbaa !363
  %411 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.576, ptr noundef nonnull %17) #44
  %412 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.580, ptr noundef nonnull %7) #44
  %413 = load i32, ptr %7, align 4, !tbaa !17
  %414 = getelementptr inbounds %struct.cellbox, ptr %39, i64 0, i32 1
  store i32 %413, ptr %414, align 8, !tbaa !378
  %415 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.580, ptr noundef nonnull %6) #44
  %416 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.576, ptr noundef nonnull %17) #44
  %417 = load i32, ptr %6, align 4, !tbaa !17
  %418 = icmp slt i32 %417, 1
  br i1 %418, label %1285, label %419

419:                                              ; preds = %406
  %420 = getelementptr inbounds %struct.cellbox, ptr %39, i64 0, i32 5
  %421 = getelementptr inbounds %struct.cellbox, ptr %39, i64 0, i32 4, i64 8
  br label %422

422:                                              ; preds = %431, %419
  %423 = phi i32 [ 1, %419 ], [ %432, %431 ]
  %424 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.580, ptr noundef nonnull %2) #44
  %425 = load i32, ptr %2, align 4, !tbaa !17
  %426 = sext i32 %425 to i64
  %427 = getelementptr inbounds %struct.cellbox, ptr %39, i64 0, i32 4, i64 %426
  store i32 1, ptr %427, align 4, !tbaa !17
  %428 = icmp eq i32 %423, 1
  br i1 %428, label %429, label %431

429:                                              ; preds = %422
  %430 = load i32, ptr %2, align 4, !tbaa !17
  store i32 %430, ptr %420, align 8, !tbaa !45
  store i32 %430, ptr %421, align 4, !tbaa !17
  br label %431

431:                                              ; preds = %429, %422
  %432 = add nuw nsw i32 %423, 1
  %433 = load i32, ptr %6, align 4, !tbaa !17
  %434 = icmp slt i32 %423, %433
  br i1 %434, label %422, label %1285, !llvm.loop !789

435:                                              ; preds = %387
  %436 = call i32 @bcmp(ptr noundef nonnull dereferenceable(10) %17, ptr noundef nonnull dereferenceable(10) @.str.14.584, i64 10)
  %437 = icmp eq i32 %436, 0
  br i1 %437, label %438, label %469

438:                                              ; preds = %435
  %439 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.15.585, ptr noundef nonnull %16) #44
  %440 = getelementptr inbounds %struct.cellbox, ptr %39, i64 0, i32 11
  %441 = load i32, ptr %440, align 8, !tbaa !363
  switch i32 %441, label %1285 [
    i32 1, label %442
    i32 3, label %448
    i32 4, label %455
    i32 2, label %462
  ]

442:                                              ; preds = %438
  %443 = load ptr, ptr @fixLRBT, align 8, !tbaa !7
  store i32 1, ptr %443, align 4, !tbaa !17
  %444 = load double, ptr %16, align 8, !tbaa !36
  %445 = load ptr, ptr @padspace, align 8, !tbaa !7
  %446 = sext i32 %28 to i64
  %447 = getelementptr inbounds double, ptr %445, i64 %446
  store double %444, ptr %447, align 8, !tbaa !36
  br label %1285

448:                                              ; preds = %438
  %449 = load ptr, ptr @fixLRBT, align 8, !tbaa !7
  %450 = getelementptr inbounds i32, ptr %449, i64 1
  store i32 1, ptr %450, align 4, !tbaa !17
  %451 = load double, ptr %16, align 8, !tbaa !36
  %452 = load ptr, ptr @padspace, align 8, !tbaa !7
  %453 = sext i32 %28 to i64
  %454 = getelementptr inbounds double, ptr %452, i64 %453
  store double %451, ptr %454, align 8, !tbaa !36
  br label %1285

455:                                              ; preds = %438
  %456 = load ptr, ptr @fixLRBT, align 8, !tbaa !7
  %457 = getelementptr inbounds i32, ptr %456, i64 2
  store i32 1, ptr %457, align 4, !tbaa !17
  %458 = load double, ptr %16, align 8, !tbaa !36
  %459 = load ptr, ptr @padspace, align 8, !tbaa !7
  %460 = sext i32 %28 to i64
  %461 = getelementptr inbounds double, ptr %459, i64 %460
  store double %458, ptr %461, align 8, !tbaa !36
  br label %1285

462:                                              ; preds = %438
  %463 = load ptr, ptr @fixLRBT, align 8, !tbaa !7
  %464 = getelementptr inbounds i32, ptr %463, i64 3
  store i32 1, ptr %464, align 4, !tbaa !17
  %465 = load double, ptr %16, align 8, !tbaa !36
  %466 = load ptr, ptr @padspace, align 8, !tbaa !7
  %467 = sext i32 %28 to i64
  %468 = getelementptr inbounds double, ptr %466, i64 %467
  store double %465, ptr %468, align 8, !tbaa !36
  br label %1285

469:                                              ; preds = %435
  %470 = call i32 @bcmp(ptr noundef nonnull dereferenceable(9) %17, ptr noundef nonnull dereferenceable(9) @.str.16.586, i64 9)
  %471 = icmp eq i32 %470, 0
  br i1 %471, label %472, label %821

472:                                              ; preds = %469
  %473 = icmp sgt i32 %25, 0
  br i1 %473, label %474, label %475

474:                                              ; preds = %472
  call void @watesides(ptr noundef %39) #44
  br label %475

475:                                              ; preds = %474, %472
  %476 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %477 = add nsw i32 %25, 1
  %478 = sext i32 %477 to i64
  %479 = getelementptr inbounds ptr, ptr %476, i64 %478
  %480 = load ptr, ptr %479, align 8, !tbaa !7
  %481 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.2.578, ptr noundef nonnull %13) #44
  %482 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.3.579, ptr noundef nonnull %17) #44
  %483 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.3.579, ptr noundef nonnull %17) #44
  %484 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %17) #50
  %485 = add i64 %484, 1
  %486 = call noalias ptr @malloc(i64 noundef %485) #45
  store ptr %486, ptr %480, align 8, !tbaa !291
  %487 = call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %486, ptr noundef nonnull dereferenceable(1) %17)
  %488 = getelementptr inbounds %struct.cellbox, ptr %480, i64 0, i32 10
  store i32 1, ptr %488, align 4, !tbaa !297
  %489 = load ptr, ptr @A, align 8, !tbaa !7
  %490 = load ptr, ptr @B, align 8, !tbaa !7
  br label %497

491:                                              ; preds = %497
  %492 = load ptr, ptr @R, align 8, !tbaa !7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(48) %492, i8 0, i64 48, i1 false), !tbaa !17
  %493 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.580, ptr noundef nonnull %10) #44
  %494 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.576, ptr noundef nonnull %17) #44
  %495 = load i32, ptr %10, align 4, !tbaa !17
  %496 = icmp slt i32 %495, 1
  br i1 %496, label %531, label %505

497:                                              ; preds = %497, %475
  %498 = phi i64 [ 0, %475 ], [ %503, %497 ]
  %499 = getelementptr inbounds %struct.bellbox, ptr %489, i64 %498
  store i32 0, ptr %499, align 4, !tbaa !102
  %500 = getelementptr inbounds %struct.bellbox, ptr %489, i64 %498, i32 1
  store i32 0, ptr %500, align 4, !tbaa !104
  %501 = getelementptr inbounds %struct.bellbox, ptr %490, i64 %498
  store i32 0, ptr %501, align 4, !tbaa !102
  %502 = getelementptr inbounds %struct.bellbox, ptr %490, i64 %498, i32 1
  store i32 0, ptr %502, align 4, !tbaa !104
  %503 = add nuw nsw i64 %498, 1
  %504 = icmp eq i64 %503, 31
  br i1 %504, label %491, label %497, !llvm.loop !790

505:                                              ; preds = %505, %491
  %506 = phi i32 [ %528, %505 ], [ 1, %491 ]
  %507 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.581, ptr noundef nonnull %11, ptr noundef nonnull %12) #44
  %508 = load i32, ptr %11, align 4, !tbaa !17
  %509 = load ptr, ptr @A, align 8, !tbaa !7
  %510 = load i32, ptr %509, align 4, !tbaa !102
  %511 = add nsw i32 %510, 1
  store i32 %511, ptr %509, align 4, !tbaa !102
  %512 = sext i32 %511 to i64
  %513 = getelementptr inbounds %struct.bellbox, ptr %509, i64 %512
  store i32 %508, ptr %513, align 4, !tbaa !102
  %514 = load i32, ptr %12, align 4, !tbaa !17
  %515 = load i32, ptr %509, align 4, !tbaa !102
  %516 = sext i32 %515 to i64
  %517 = getelementptr inbounds %struct.bellbox, ptr %509, i64 %516, i32 1
  store i32 %514, ptr %517, align 4, !tbaa !104
  %518 = load i32, ptr %11, align 4, !tbaa !17
  %519 = load ptr, ptr @B, align 8, !tbaa !7
  %520 = load i32, ptr %519, align 4, !tbaa !102
  %521 = add nsw i32 %520, 1
  store i32 %521, ptr %519, align 4, !tbaa !102
  %522 = sext i32 %521 to i64
  %523 = getelementptr inbounds %struct.bellbox, ptr %519, i64 %522
  store i32 %518, ptr %523, align 4, !tbaa !102
  %524 = load i32, ptr %12, align 4, !tbaa !17
  %525 = load i32, ptr %519, align 4, !tbaa !102
  %526 = sext i32 %525 to i64
  %527 = getelementptr inbounds %struct.bellbox, ptr %519, i64 %526, i32 1
  store i32 %524, ptr %527, align 4, !tbaa !104
  %528 = add nuw nsw i32 %506, 1
  %529 = load i32, ptr %10, align 4, !tbaa !17
  %530 = icmp slt i32 %506, %529
  br i1 %530, label %505, label %531, !llvm.loop !791

531:                                              ; preds = %505, %491
  %532 = phi i32 [ %495, %491 ], [ %529, %505 ]
  %533 = getelementptr inbounds %struct.cellbox, ptr %480, i64 0, i32 7
  store i32 %532, ptr %533, align 8, !tbaa !350
  %534 = add nsw i32 %532, 1
  %535 = sext i32 %534 to i64
  %536 = shl nsw i64 %535, 3
  %537 = call noalias ptr @malloc(i64 noundef %536) #45
  %538 = getelementptr inbounds %struct.cellbox, ptr %480, i64 0, i32 22
  store ptr %537, ptr %538, align 8, !tbaa !716
  %539 = call i32 @perimeter() #44
  %540 = load i32, ptr @perim, align 4, !tbaa !17
  %541 = add nsw i32 %540, %539
  store i32 %541, ptr @perim, align 4, !tbaa !17
  %542 = load ptr, ptr @A, align 8, !tbaa !7
  %543 = load i32, ptr %542, align 4, !tbaa !102
  %544 = icmp slt i32 %543, 1
  br i1 %544, label %622, label %545

545:                                              ; preds = %531
  %546 = getelementptr inbounds %struct.bellbox, ptr %542, i64 1
  %547 = load ptr, ptr @pSideArray, align 8
  %548 = zext i32 %543 to i64
  %549 = add nuw i32 %543, 1
  %550 = zext i32 %549 to i64
  br label %552

551:                                              ; preds = %594
  br i1 %544, label %622, label %597

552:                                              ; preds = %594, %545
  %553 = phi i64 [ 1, %545 ], [ %595, %594 ]
  %554 = icmp slt i64 %553, %548
  br i1 %554, label %555, label %581

555:                                              ; preds = %552
  %556 = and i64 %553, 1
  %557 = icmp eq i64 %556, 0
  %558 = add nuw nsw i64 %553, 1
  %559 = getelementptr inbounds %struct.psidebox, ptr %547, i64 %553
  %560 = getelementptr inbounds %struct.psidebox, ptr %547, i64 %553, i32 2
  %561 = getelementptr inbounds %struct.psidebox, ptr %547, i64 %553, i32 1
  %562 = getelementptr inbounds %struct.psidebox, ptr %547, i64 %553, i32 3
  br i1 %557, label %572, label %563

563:                                              ; preds = %555
  %564 = getelementptr inbounds %struct.bellbox, ptr %542, i64 %558, i32 1
  %565 = load i32, ptr %564, align 4, !tbaa !104
  %566 = getelementptr inbounds %struct.bellbox, ptr %542, i64 %553, i32 1
  %567 = load i32, ptr %566, align 4, !tbaa !104
  %568 = sub nsw i32 %565, %567
  %569 = call i32 @llvm.abs.i32(i32 %568, i1 true)
  store i32 %569, ptr %559, align 8, !tbaa !781
  store i32 1, ptr %560, align 8, !tbaa !351
  store double 0.000000e+00, ptr %561, align 8, !tbaa !355
  %570 = getelementptr inbounds %struct.bellbox, ptr %542, i64 %553
  %571 = load i32, ptr %570, align 4, !tbaa !102
  store i32 %571, ptr %562, align 4, !tbaa !353
  br label %594

572:                                              ; preds = %555
  %573 = getelementptr inbounds %struct.bellbox, ptr %542, i64 %558
  %574 = load i32, ptr %573, align 4, !tbaa !102
  %575 = getelementptr inbounds %struct.bellbox, ptr %542, i64 %553
  %576 = load i32, ptr %575, align 4, !tbaa !102
  %577 = sub nsw i32 %574, %576
  %578 = call i32 @llvm.abs.i32(i32 %577, i1 true)
  store i32 %578, ptr %559, align 8, !tbaa !781
  store i32 0, ptr %560, align 8, !tbaa !351
  store double 0.000000e+00, ptr %561, align 8, !tbaa !355
  %579 = getelementptr inbounds %struct.bellbox, ptr %542, i64 %553, i32 1
  %580 = load i32, ptr %579, align 4, !tbaa !104
  store i32 %580, ptr %562, align 4, !tbaa !353
  br label %594

581:                                              ; preds = %552
  %582 = load i32, ptr %546, align 4, !tbaa !102
  %583 = getelementptr inbounds %struct.bellbox, ptr %542, i64 %553
  %584 = load i32, ptr %583, align 4, !tbaa !102
  %585 = sub nsw i32 %582, %584
  %586 = call i32 @llvm.abs.i32(i32 %585, i1 true)
  %587 = getelementptr inbounds %struct.psidebox, ptr %547, i64 %553
  store i32 %586, ptr %587, align 8, !tbaa !781
  %588 = getelementptr inbounds %struct.psidebox, ptr %547, i64 %553, i32 2
  store i32 0, ptr %588, align 8, !tbaa !351
  %589 = getelementptr inbounds %struct.psidebox, ptr %547, i64 %553, i32 1
  store double 0.000000e+00, ptr %589, align 8, !tbaa !355
  %590 = getelementptr inbounds %struct.bellbox, ptr %542, i64 %553, i32 1
  %591 = load i32, ptr %590, align 4, !tbaa !104
  %592 = getelementptr inbounds %struct.psidebox, ptr %547, i64 %553, i32 3
  store i32 %591, ptr %592, align 4, !tbaa !353
  %593 = add nuw nsw i64 %553, 1
  br label %594

594:                                              ; preds = %581, %572, %563
  %595 = phi i64 [ %593, %581 ], [ %558, %572 ], [ %558, %563 ]
  %596 = icmp eq i64 %595, %550
  br i1 %596, label %551, label %552, !llvm.loop !792

597:                                              ; preds = %613, %551
  %598 = phi i64 [ %618, %613 ], [ 1, %551 ]
  %599 = phi i32 [ %617, %613 ], [ %34, %551 ]
  %600 = phi i32 [ %616, %613 ], [ %33, %551 ]
  %601 = phi i32 [ %615, %613 ], [ %32, %551 ]
  %602 = phi i32 [ %614, %613 ], [ %31, %551 ]
  %603 = getelementptr inbounds %struct.bellbox, ptr %542, i64 %598
  %604 = load i32, ptr %603, align 4, !tbaa !102
  store i32 %604, ptr %11, align 4, !tbaa !17
  %605 = getelementptr inbounds %struct.bellbox, ptr %542, i64 %598, i32 1
  %606 = load i32, ptr %605, align 4, !tbaa !104
  store i32 %606, ptr %12, align 4, !tbaa !17
  %607 = icmp eq i64 %598, 1
  br i1 %607, label %613, label %608

608:                                              ; preds = %597
  %609 = call i32 @llvm.smin.i32(i32 %604, i32 %602)
  %610 = call i32 @llvm.smax.i32(i32 %604, i32 %600)
  %611 = call i32 @llvm.smin.i32(i32 %606, i32 %601)
  %612 = call i32 @llvm.smax.i32(i32 %606, i32 %599)
  br label %613

613:                                              ; preds = %608, %597
  %614 = phi i32 [ %609, %608 ], [ %604, %597 ]
  %615 = phi i32 [ %611, %608 ], [ %606, %597 ]
  %616 = phi i32 [ %610, %608 ], [ %604, %597 ]
  %617 = phi i32 [ %612, %608 ], [ %606, %597 ]
  %618 = add nuw nsw i64 %598, 1
  %619 = load i32, ptr %542, align 4, !tbaa !102
  %620 = sext i32 %619 to i64
  %621 = icmp slt i64 %598, %620
  br i1 %621, label %597, label %622, !llvm.loop !793

622:                                              ; preds = %613, %551, %531
  %623 = phi i32 [ %31, %551 ], [ %31, %531 ], [ %614, %613 ]
  %624 = phi i32 [ %32, %551 ], [ %32, %531 ], [ %615, %613 ]
  %625 = phi i32 [ %33, %551 ], [ %33, %531 ], [ %616, %613 ]
  %626 = phi i32 [ %34, %551 ], [ %34, %531 ], [ %617, %613 ]
  %627 = sub nsw i32 %626, %624
  %628 = sitofp i32 %627 to double
  %629 = sub nsw i32 %625, %623
  %630 = sitofp i32 %629 to double
  %631 = fdiv double %628, %630
  %632 = getelementptr inbounds %struct.cellbox, ptr %480, i64 0, i32 13
  store double %631, ptr %632, align 8, !tbaa !237
  %633 = getelementptr inbounds %struct.cellbox, ptr %480, i64 0, i32 14
  store double %631, ptr %633, align 8, !tbaa !236
  %634 = call noalias dereferenceable_or_null(104) ptr @malloc(i64 noundef 104) #45
  %635 = getelementptr inbounds %struct.cellbox, ptr %480, i64 0, i32 21
  store ptr %634, ptr %635, align 8, !tbaa !7
  store ptr null, ptr %634, align 8, !tbaa !172
  %636 = getelementptr inbounds %struct.tilebox, ptr %634, i64 0, i32 17
  %637 = add nsw i32 %625, %623
  %638 = sdiv i32 %637, 2
  %639 = add nsw i32 %626, %624
  %640 = sdiv i32 %639, 2
  %641 = sub nsw i32 %623, %638
  %642 = getelementptr inbounds %struct.tilebox, ptr %634, i64 0, i32 13
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %636, i8 0, i64 16, i1 false)
  store i32 %641, ptr %642, align 8, !tbaa !382
  %643 = getelementptr inbounds %struct.tilebox, ptr %634, i64 0, i32 9
  store i32 %641, ptr %643, align 8, !tbaa !167
  %644 = sub nsw i32 %625, %638
  %645 = getelementptr inbounds %struct.tilebox, ptr %634, i64 0, i32 14
  store i32 %644, ptr %645, align 4, !tbaa !383
  %646 = getelementptr inbounds %struct.tilebox, ptr %634, i64 0, i32 10
  store i32 %644, ptr %646, align 4, !tbaa !168
  %647 = sub nsw i32 %624, %640
  %648 = getelementptr inbounds %struct.tilebox, ptr %634, i64 0, i32 15
  store i32 %647, ptr %648, align 8, !tbaa !393
  %649 = getelementptr inbounds %struct.tilebox, ptr %634, i64 0, i32 11
  store i32 %647, ptr %649, align 8, !tbaa !169
  %650 = sub nsw i32 %626, %640
  %651 = getelementptr inbounds %struct.tilebox, ptr %634, i64 0, i32 16
  store i32 %650, ptr %651, align 4, !tbaa !394
  %652 = getelementptr inbounds %struct.tilebox, ptr %634, i64 0, i32 12
  store i32 %650, ptr %652, align 4, !tbaa !170
  %653 = getelementptr inbounds %struct.tilebox, ptr %634, i64 0, i32 5
  %654 = getelementptr inbounds %struct.cellbox, ptr %480, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %653, i8 0, i64 16, i1 false)
  store i32 %638, ptr %654, align 4, !tbaa !164
  %655 = getelementptr inbounds %struct.cellbox, ptr %480, i64 0, i32 3
  store i32 %640, ptr %655, align 8, !tbaa !165
  %656 = getelementptr inbounds %struct.cellbox, ptr %480, i64 0, i32 6
  store i32 0, ptr %656, align 4, !tbaa !171
  br label %657

657:                                              ; preds = %657, %622
  %658 = phi ptr [ %634, %622 ], [ %661, %657 ]
  %659 = load i32, ptr %656, align 4, !tbaa !171
  %660 = add nsw i32 %659, 1
  store i32 %660, ptr %656, align 4, !tbaa !171
  %661 = call noalias dereferenceable_or_null(104) ptr @malloc(i64 noundef 104) #45
  store ptr %661, ptr %658, align 8, !tbaa !172
  store ptr null, ptr %661, align 8, !tbaa !172
  %662 = getelementptr inbounds %struct.tilebox, ptr %661, i64 0, i32 17
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %662, i8 0, i64 16, i1 false)
  call void @buster() #44
  %663 = load ptr, ptr @R, align 8, !tbaa !7
  %664 = getelementptr inbounds %struct.bellbox, ptr %663, i64 1
  %665 = load i32, ptr %664, align 4, !tbaa !102
  %666 = sub nsw i32 %665, %638
  %667 = getelementptr inbounds %struct.tilebox, ptr %661, i64 0, i32 13
  store i32 %666, ptr %667, align 8, !tbaa !382
  %668 = getelementptr inbounds %struct.tilebox, ptr %661, i64 0, i32 9
  store i32 %666, ptr %668, align 8, !tbaa !167
  %669 = getelementptr inbounds %struct.bellbox, ptr %663, i64 4
  %670 = load i32, ptr %669, align 4, !tbaa !102
  %671 = sub nsw i32 %670, %638
  %672 = getelementptr inbounds %struct.tilebox, ptr %661, i64 0, i32 14
  store i32 %671, ptr %672, align 4, !tbaa !383
  %673 = getelementptr inbounds %struct.tilebox, ptr %661, i64 0, i32 10
  store i32 %671, ptr %673, align 4, !tbaa !168
  %674 = getelementptr inbounds %struct.bellbox, ptr %663, i64 1, i32 1
  %675 = load i32, ptr %674, align 4, !tbaa !104
  %676 = sub nsw i32 %675, %640
  %677 = getelementptr inbounds %struct.tilebox, ptr %661, i64 0, i32 15
  store i32 %676, ptr %677, align 8, !tbaa !393
  %678 = getelementptr inbounds %struct.tilebox, ptr %661, i64 0, i32 11
  store i32 %676, ptr %678, align 8, !tbaa !169
  %679 = getelementptr inbounds %struct.bellbox, ptr %663, i64 2, i32 1
  %680 = load i32, ptr %679, align 4, !tbaa !104
  %681 = sub nsw i32 %680, %640
  %682 = getelementptr inbounds %struct.tilebox, ptr %661, i64 0, i32 16
  store i32 %681, ptr %682, align 4, !tbaa !394
  %683 = getelementptr inbounds %struct.tilebox, ptr %661, i64 0, i32 12
  store i32 %681, ptr %683, align 4, !tbaa !170
  %684 = getelementptr inbounds %struct.tilebox, ptr %661, i64 0, i32 5
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %684, i8 0, i64 16, i1 false)
  %685 = load ptr, ptr @A, align 8, !tbaa !7
  %686 = load i32, ptr %685, align 4, !tbaa !102
  %687 = icmp sgt i32 %686, 0
  br i1 %687, label %657, label %688, !llvm.loop !794

688:                                              ; preds = %657
  %689 = getelementptr inbounds %struct.cellbox, ptr %480, i64 0, i32 18
  %690 = load i32, ptr %689, align 4, !tbaa !223
  %691 = icmp eq i32 %690, 0
  br i1 %691, label %738, label %692

692:                                              ; preds = %688
  %693 = add nsw i32 %690, 1
  %694 = sext i32 %693 to i64
  %695 = mul nsw i64 %694, 44
  %696 = call noalias ptr @malloc(i64 noundef %695) #45
  %697 = getelementptr inbounds %struct.cellbox, ptr %480, i64 0, i32 20
  store ptr %696, ptr %697, align 8, !tbaa !226
  %698 = load ptr, ptr @B, align 8, !tbaa !7
  %699 = load i32, ptr %698, align 4, !tbaa !102
  %700 = icmp slt i32 %699, 1
  br i1 %700, label %738, label %701

701:                                              ; preds = %725, %692
  %702 = phi i64 [ %713, %725 ], [ 1, %692 ]
  %703 = phi i32 [ %733, %725 ], [ %699, %692 ]
  %704 = phi ptr [ %732, %725 ], [ %698, %692 ]
  %705 = phi i32 [ %727, %725 ], [ 0, %692 ]
  %706 = getelementptr inbounds %struct.bellbox, ptr %704, i64 %702
  %707 = load i32, ptr %706, align 4, !tbaa !102
  %708 = getelementptr inbounds %struct.bellbox, ptr %704, i64 %702, i32 1
  %709 = load i32, ptr %708, align 4, !tbaa !104
  %710 = zext i32 %703 to i64
  %711 = icmp eq i64 %702, %710
  %712 = getelementptr inbounds %struct.bellbox, ptr %704, i64 1, i32 1
  %713 = add nuw nsw i64 %702, 1
  %714 = getelementptr inbounds %struct.bellbox, ptr %704, i64 %713, i32 1
  %715 = select i1 %711, ptr %712, ptr %714
  %716 = load i32, ptr %715, align 4, !tbaa !104
  %717 = icmp eq i32 %709, %716
  br i1 %717, label %718, label %723

718:                                              ; preds = %701
  %719 = select i1 %711, i64 1, i64 %713
  %720 = getelementptr inbounds %struct.bellbox, ptr %704, i64 %719
  %721 = load i32, ptr %720, align 4, !tbaa !102
  %722 = call i32 @Hside(i32 noundef %477, i32 noundef %707, i32 noundef %721, i32 noundef %709, i32 noundef 0) #44
  br label %725

723:                                              ; preds = %701
  %724 = call i32 @Vside(i32 noundef %477, i32 noundef %707, i32 noundef %709, i32 noundef %716, i32 noundef 0) #44
  br label %725

725:                                              ; preds = %723, %718
  %726 = phi i32 [ %722, %718 ], [ %724, %723 ]
  %727 = add nsw i32 %726, %705
  %728 = add nsw i32 %705, 1
  %729 = load ptr, ptr %538, align 8, !tbaa !716
  %730 = getelementptr inbounds %struct.bellbox, ptr %729, i64 %702
  store i32 %728, ptr %730, align 4, !tbaa !718
  %731 = getelementptr inbounds %struct.bellbox, ptr %729, i64 %702, i32 1
  store i32 %727, ptr %731, align 4, !tbaa !720
  %732 = load ptr, ptr @B, align 8, !tbaa !7
  %733 = load i32, ptr %732, align 4, !tbaa !102
  %734 = sext i32 %733 to i64
  %735 = icmp slt i64 %702, %734
  br i1 %735, label %701, label %736, !llvm.loop !795

736:                                              ; preds = %725
  %.lcssa17 = phi i32 [ %727, %725 ]
  %737 = load i32, ptr %689, align 4, !tbaa !223
  br label %738

738:                                              ; preds = %736, %692, %688
  %739 = phi i32 [ 0, %688 ], [ 1, %692 ], [ %737, %736 ]
  %740 = phi i32 [ 0, %688 ], [ 0, %692 ], [ %.lcssa17, %736 ]
  %741 = getelementptr inbounds %struct.cellbox, ptr %480, i64 0, i32 17
  store i32 %740, ptr %741, align 8, !tbaa !227
  %742 = add nsw i32 %740, 1
  %743 = sext i32 %742 to i64
  %744 = mul nsw i64 %743, 20
  %745 = call noalias ptr @malloc(i64 noundef %744) #45
  %746 = getelementptr inbounds %struct.cellbox, ptr %480, i64 0, i32 19
  store ptr %745, ptr %746, align 8, !tbaa !224
  %747 = shl nsw i64 %743, 4
  %748 = call noalias ptr @malloc(i64 noundef %747) #45
  %749 = load ptr, ptr %635, align 8, !tbaa !7
  %750 = getelementptr inbounds %struct.tilebox, ptr %749, i64 0, i32 18
  store ptr %748, ptr %750, align 8, !tbaa !225
  %751 = icmp eq i32 %739, 0
  br i1 %751, label %1285, label %752

752:                                              ; preds = %738
  %753 = load ptr, ptr @B, align 8, !tbaa !7
  %754 = load i32, ptr %753, align 4, !tbaa !102
  %755 = icmp slt i32 %754, 1
  br i1 %755, label %1285, label %761

756:                                              ; preds = %797, %785
  %757 = load ptr, ptr @B, align 8, !tbaa !7
  %758 = load i32, ptr %757, align 4, !tbaa !102
  %759 = sext i32 %758 to i64
  %760 = icmp slt i64 %762, %759
  br i1 %760, label %761, label %1285, !llvm.loop !796

761:                                              ; preds = %756, %752
  %762 = phi i64 [ %773, %756 ], [ 1, %752 ]
  %763 = phi i32 [ %758, %756 ], [ %754, %752 ]
  %764 = phi ptr [ %757, %756 ], [ %753, %752 ]
  %765 = phi i32 [ %787, %756 ], [ 0, %752 ]
  %766 = getelementptr inbounds %struct.bellbox, ptr %764, i64 %762
  %767 = load i32, ptr %766, align 4, !tbaa !102
  %768 = getelementptr inbounds %struct.bellbox, ptr %764, i64 %762, i32 1
  %769 = load i32, ptr %768, align 4, !tbaa !104
  %770 = zext i32 %763 to i64
  %771 = icmp eq i64 %762, %770
  %772 = getelementptr inbounds %struct.bellbox, ptr %764, i64 1, i32 1
  %773 = add nuw nsw i64 %762, 1
  %774 = getelementptr inbounds %struct.bellbox, ptr %764, i64 %773, i32 1
  %775 = select i1 %771, ptr %772, ptr %774
  %776 = load i32, ptr %775, align 4, !tbaa !104
  %777 = icmp eq i32 %769, %776
  br i1 %777, label %778, label %783

778:                                              ; preds = %761
  %779 = select i1 %771, i64 1, i64 %773
  %780 = getelementptr inbounds %struct.bellbox, ptr %764, i64 %779
  %781 = load i32, ptr %780, align 4, !tbaa !102
  %782 = call i32 @Hside(i32 noundef %477, i32 noundef %767, i32 noundef %781, i32 noundef %769, i32 noundef 1) #44
  br label %785

783:                                              ; preds = %761
  %784 = call i32 @Vside(i32 noundef %477, i32 noundef %767, i32 noundef %769, i32 noundef %776, i32 noundef 1) #44
  br label %785

785:                                              ; preds = %783, %778
  %786 = phi i32 [ %782, %778 ], [ %784, %783 ]
  %787 = add nsw i32 %786, %765
  %788 = icmp sgt i32 %786, 0
  br i1 %788, label %789, label %756

789:                                              ; preds = %785
  %790 = load ptr, ptr @kArray, align 8, !tbaa !7
  %791 = load ptr, ptr %746, align 8, !tbaa !224
  %792 = load ptr, ptr %635, align 8, !tbaa !7
  %793 = getelementptr inbounds %struct.tilebox, ptr %792, i64 0, i32 18
  %794 = load ptr, ptr %793, align 8, !tbaa !225
  %795 = sext i32 %765 to i64
  %796 = sext i32 %787 to i64
  br label %797

797:                                              ; preds = %797, %789
  %798 = phi i64 [ 1, %789 ], [ %819, %797 ]
  %799 = phi i64 [ %795, %789 ], [ %800, %797 ]
  %800 = add nsw i64 %799, 1
  %801 = getelementptr inbounds %struct.contentbox, ptr %790, i64 %798, i32 2
  %802 = load i32, ptr %801, align 4, !tbaa !583
  %803 = getelementptr inbounds %struct.contentbox, ptr %791, i64 %800, i32 4
  store i32 %802, ptr %803, align 4, !tbaa !234
  %804 = getelementptr inbounds %struct.contentbox, ptr %790, i64 %798, i32 3
  %805 = load i32, ptr %804, align 4, !tbaa !581
  %806 = sub nsw i32 %805, %638
  %807 = getelementptr inbounds %struct.locbox.26, ptr %794, i64 %800
  store i32 %806, ptr %807, align 4, !tbaa !240
  %808 = getelementptr inbounds %struct.contentbox, ptr %790, i64 %798, i32 4
  %809 = load i32, ptr %808, align 4, !tbaa !582
  %810 = sub nsw i32 %809, %640
  %811 = getelementptr inbounds %struct.locbox.26, ptr %794, i64 %800, i32 1
  store i32 %810, ptr %811, align 4, !tbaa !238
  %812 = getelementptr inbounds %struct.locbox.26, ptr %794, i64 %800, i32 2
  store i32 %806, ptr %812, align 4, !tbaa !389
  %813 = getelementptr inbounds %struct.locbox.26, ptr %794, i64 %800, i32 3
  store i32 %810, ptr %813, align 4, !tbaa !390
  %814 = getelementptr inbounds %struct.contentbox, ptr %791, i64 %800
  store i32 0, ptr %814, align 4, !tbaa !232
  %815 = getelementptr inbounds %struct.contentbox, ptr %791, i64 %800, i32 1
  store i32 0, ptr %815, align 4, !tbaa !797
  %816 = getelementptr inbounds %struct.contentbox, ptr %790, i64 %798
  %817 = getelementptr inbounds %struct.contentbox, ptr %791, i64 %800, i32 2
  %818 = load <2 x i32>, ptr %816, align 4, !tbaa !17
  store <2 x i32> %818, ptr %817, align 4, !tbaa !17
  %819 = add nuw nsw i64 %798, 1
  %820 = icmp slt i64 %800, %796
  br i1 %820, label %797, label %756, !llvm.loop !798

821:                                              ; preds = %469
  %822 = and i64 %388, 4294967295
  %823 = icmp eq i64 %822, 7235952
  br i1 %823, label %824, label %1014

824:                                              ; preds = %821
  %825 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.576, ptr noundef nonnull %17) #44
  %826 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.576, ptr noundef nonnull %17) #44
  %827 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %17) #50
  %828 = add i64 %827, 1
  %829 = call noalias ptr @malloc(i64 noundef %828) #45
  %830 = load ptr, ptr @pinnames, align 8, !tbaa !7
  %831 = add nsw i32 %35, 1
  %832 = sext i32 %831 to i64
  %833 = getelementptr inbounds ptr, ptr %830, i64 %832
  store ptr %829, ptr %833, align 8, !tbaa !7
  %834 = load ptr, ptr @pinnames, align 8, !tbaa !7
  %835 = getelementptr inbounds ptr, ptr %834, i64 %832
  %836 = load ptr, ptr %835, align 8, !tbaa !7
  %837 = call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %836, ptr noundef nonnull dereferenceable(1) %17)
  %838 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.576, ptr noundef nonnull %17) #44
  %839 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.576, ptr noundef nonnull %17) #44
  %840 = call i32 @hashfind(ptr noundef nonnull %17) #44
  %841 = load ptr, ptr @netarray, align 8, !tbaa !7
  %842 = sext i32 %840 to i64
  %843 = getelementptr inbounds ptr, ptr %841, i64 %842
  %844 = load ptr, ptr %843, align 8, !tbaa !7
  %845 = getelementptr inbounds %struct.dimbox, ptr %844, i64 0, i32 13
  %846 = load ptr, ptr %845, align 8, !tbaa !38
  %847 = icmp eq ptr %846, null
  br i1 %847, label %848, label %859

848:                                              ; preds = %824
  %849 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %17) #50
  %850 = add i64 %849, 1
  %851 = call noalias ptr @malloc(i64 noundef %850) #45
  store ptr %851, ptr %845, align 8, !tbaa !38
  %852 = load ptr, ptr %843, align 8, !tbaa !7
  %853 = getelementptr inbounds %struct.dimbox, ptr %852, i64 0, i32 13
  %854 = load ptr, ptr %853, align 8, !tbaa !38
  %855 = call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %854, ptr noundef nonnull dereferenceable(1) %17)
  %856 = load ptr, ptr @netarray, align 8, !tbaa !7
  %857 = getelementptr inbounds ptr, ptr %856, i64 %842
  %858 = load ptr, ptr %857, align 8, !tbaa !7
  br label %859

859:                                              ; preds = %848, %824
  %860 = phi ptr [ %858, %848 ], [ %844, %824 ]
  %861 = load ptr, ptr %860, align 8, !tbaa !54
  %862 = call noalias dereferenceable_or_null(48) ptr @malloc(i64 noundef 48) #45
  store ptr %862, ptr %860, align 8, !tbaa !54
  store ptr %861, ptr %862, align 8, !tbaa !63
  %863 = getelementptr inbounds %struct.netbox, ptr %862, i64 0, i32 5
  store i32 %831, ptr %863, align 8, !tbaa !55
  %864 = getelementptr inbounds %struct.netbox, ptr %862, i64 0, i32 1
  %865 = getelementptr inbounds %struct.netbox, ptr %862, i64 0, i32 6
  store i32 0, ptr %865, align 4, !tbaa !58
  %866 = getelementptr inbounds %struct.netbox, ptr %862, i64 0, i32 7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %864, i8 0, i64 16, i1 false)
  store i32 %25, ptr %866, align 8, !tbaa !57
  %867 = getelementptr inbounds %struct.netbox, ptr %862, i64 0, i32 9
  store i32 0, ptr %867, align 8, !tbaa !59
  %868 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.581, ptr noundef nonnull %3, ptr noundef nonnull %4) #44
  %869 = icmp eq i32 %28, 0
  br i1 %869, label %870, label %874

870:                                              ; preds = %859
  %871 = load i32, ptr %3, align 4, !tbaa !17
  %872 = load i32, ptr %4, align 4, !tbaa !17
  %873 = call i32 @findside(ptr noundef %39, i32 noundef %871, i32 noundef %872) #44
  call void @loadside(i32 noundef %873, double noundef 1.000000e+00) #44
  br label %874

874:                                              ; preds = %870, %859
  %875 = load i32, ptr %3, align 4, !tbaa !17
  %876 = load i32, ptr %4, align 4, !tbaa !17
  %877 = sub nsw i32 %875, %26
  store i32 %877, ptr %3, align 4, !tbaa !17
  %878 = sub nsw i32 %876, %27
  store i32 %878, ptr %4, align 4, !tbaa !17
  %879 = getelementptr inbounds %struct.cellbox, ptr %39, i64 0, i32 10
  %880 = load i32, ptr %879, align 4, !tbaa !297
  %881 = icmp eq i32 %880, 1
  br i1 %881, label %882, label %997

882:                                              ; preds = %874
  %883 = getelementptr inbounds %struct.cellbox, ptr %39, i64 0, i32 17
  %884 = load i32, ptr %883, align 8, !tbaa !227
  %885 = icmp slt i32 %884, 1
  br i1 %885, label %997, label %886

886:                                              ; preds = %882
  %887 = getelementptr inbounds %struct.cellbox, ptr %39, i64 0, i32 21
  %888 = load ptr, ptr %887, align 8, !tbaa !7
  %889 = getelementptr inbounds %struct.tilebox, ptr %888, i64 0, i32 18
  %890 = load ptr, ptr %889, align 8, !tbaa !225
  %891 = add nuw i32 %884, 1
  %892 = zext i32 %891 to i64
  br label %893

893:                                              ; preds = %993, %886
  %894 = phi i32 [ 1, %886 ], [ %996, %993 ]
  %895 = phi i64 [ 1, %886 ], [ %994, %993 ]
  %896 = getelementptr inbounds %struct.locbox.26, ptr %890, i64 %895
  %897 = load i32, ptr %896, align 4, !tbaa !240
  %898 = icmp eq i32 %897, %877
  %899 = getelementptr inbounds %struct.locbox.26, ptr %890, i64 %895, i32 1
  %900 = load i32, ptr %899, align 4, !tbaa !238
  br i1 %898, label %901, label %946

901:                                              ; preds = %893
  %.lcssa9 = phi i32 [ %894, %893 ]
  %.lcssa7 = phi i64 [ %895, %893 ]
  %.lcssa3 = phi i32 [ %900, %893 ]
  %902 = sub nsw i32 %.lcssa3, %878
  %903 = call i32 @llvm.abs.i32(i32 %902, i1 true)
  %904 = sext i32 %884 to i64
  %905 = call i32 @llvm.smax.i32(i32 %884, i32 %.lcssa9)
  br label %906

906:                                              ; preds = %915, %901
  %907 = phi i64 [ %909, %915 ], [ %.lcssa7, %901 ]
  %908 = phi i32 [ %919, %915 ], [ %903, %901 ]
  %909 = add nuw nsw i64 %907, 1
  %910 = icmp slt i64 %907, %904
  br i1 %910, label %911, label %925

911:                                              ; preds = %906
  %912 = getelementptr inbounds %struct.locbox.26, ptr %890, i64 %909
  %913 = load i32, ptr %912, align 4, !tbaa !240
  %914 = icmp eq i32 %913, %877
  br i1 %914, label %915, label %921

915:                                              ; preds = %911
  %916 = getelementptr inbounds %struct.locbox.26, ptr %890, i64 %909, i32 1
  %917 = load i32, ptr %916, align 4, !tbaa !238
  %918 = sub nsw i32 %917, %878
  %919 = call i32 @llvm.abs.i32(i32 %918, i1 true)
  %920 = icmp ult i32 %919, %908
  br i1 %920, label %906, label %923, !llvm.loop !799

921:                                              ; preds = %911
  %.lcssa15 = phi i64 [ %907, %911 ]
  %922 = trunc i64 %.lcssa15 to i32
  br label %925

923:                                              ; preds = %915
  %.lcssa16 = phi i64 [ %907, %915 ]
  %924 = trunc i64 %.lcssa16 to i32
  br label %925

925:                                              ; preds = %923, %921, %906
  %926 = phi i32 [ %922, %921 ], [ %924, %923 ], [ %905, %906 ]
  %927 = getelementptr inbounds %struct.cellbox, ptr %39, i64 0, i32 18
  %928 = load i32, ptr %927, align 4, !tbaa !223
  %929 = icmp slt i32 %29, %928
  br i1 %929, label %937, label %930

930:                                              ; preds = %925
  %931 = load ptr, ptr @fpo, align 8, !tbaa !7
  %932 = call i64 @fwrite(ptr nonnull @.str.18.587, i64 22, i64 1, ptr %931)
  %933 = load ptr, ptr @fpo, align 8, !tbaa !7
  %934 = call i64 @fwrite(ptr nonnull @.str.19.588, i64 25, i64 1, ptr %933)
  %935 = load ptr, ptr @fpo, align 8, !tbaa !7
  %936 = call i64 @fwrite(ptr nonnull @.str.20.589, i64 28, i64 1, ptr %935)
  call void @exit(i32 noundef 0) #49
  unreachable

937:                                              ; preds = %925
  %938 = add nsw i32 %29, 1
  %939 = getelementptr inbounds %struct.cellbox, ptr %39, i64 0, i32 20
  %940 = load ptr, ptr %939, align 8, !tbaa !226
  %941 = sext i32 %938 to i64
  %942 = getelementptr inbounds %struct.uncombox.25, ptr %940, i64 %941, i32 7
  store i32 1, ptr %942, align 4, !tbaa !251
  %943 = getelementptr inbounds %struct.uncombox.25, ptr %940, i64 %941
  store i32 %831, ptr %943, align 4, !tbaa !298
  %944 = getelementptr inbounds %struct.uncombox.25, ptr %940, i64 %941, i32 4
  store i32 0, ptr %944, align 4, !tbaa !715
  %945 = getelementptr inbounds %struct.uncombox.25, ptr %940, i64 %941, i32 5
  store i32 %926, ptr %945, align 4, !tbaa !717
  br label %1285

946:                                              ; preds = %893
  %947 = icmp eq i32 %900, %878
  br i1 %947, label %948, label %993

948:                                              ; preds = %946
  %.lcssa10 = phi i32 [ %894, %946 ]
  %.lcssa8 = phi i64 [ %895, %946 ]
  %.lcssa6 = phi i32 [ %897, %946 ]
  %949 = sub nsw i32 %.lcssa6, %877
  %950 = call i32 @llvm.abs.i32(i32 %949, i1 true)
  %951 = sext i32 %884 to i64
  %952 = call i32 @llvm.smax.i32(i32 %884, i32 %.lcssa10)
  br label %953

953:                                              ; preds = %962, %948
  %954 = phi i64 [ %956, %962 ], [ %.lcssa8, %948 ]
  %955 = phi i32 [ %966, %962 ], [ %950, %948 ]
  %956 = add nuw nsw i64 %954, 1
  %957 = icmp slt i64 %954, %951
  br i1 %957, label %958, label %972

958:                                              ; preds = %953
  %959 = getelementptr inbounds %struct.locbox.26, ptr %890, i64 %956, i32 1
  %960 = load i32, ptr %959, align 4, !tbaa !238
  %961 = icmp eq i32 %960, %878
  br i1 %961, label %962, label %968

962:                                              ; preds = %958
  %963 = getelementptr inbounds %struct.locbox.26, ptr %890, i64 %956
  %964 = load i32, ptr %963, align 4, !tbaa !240
  %965 = sub nsw i32 %964, %877
  %966 = call i32 @llvm.abs.i32(i32 %965, i1 true)
  %967 = icmp ult i32 %966, %955
  br i1 %967, label %953, label %970, !llvm.loop !800

968:                                              ; preds = %958
  %.lcssa12 = phi i64 [ %954, %958 ]
  %969 = trunc i64 %.lcssa12 to i32
  br label %972

970:                                              ; preds = %962
  %.lcssa13 = phi i64 [ %954, %962 ]
  %971 = trunc i64 %.lcssa13 to i32
  br label %972

972:                                              ; preds = %970, %968, %953
  %973 = phi i32 [ %969, %968 ], [ %971, %970 ], [ %952, %953 ]
  %974 = getelementptr inbounds %struct.cellbox, ptr %39, i64 0, i32 18
  %975 = load i32, ptr %974, align 4, !tbaa !223
  %976 = icmp slt i32 %29, %975
  br i1 %976, label %984, label %977

977:                                              ; preds = %972
  %978 = load ptr, ptr @fpo, align 8, !tbaa !7
  %979 = call i64 @fwrite(ptr nonnull @.str.18.587, i64 22, i64 1, ptr %978)
  %980 = load ptr, ptr @fpo, align 8, !tbaa !7
  %981 = call i64 @fwrite(ptr nonnull @.str.19.588, i64 25, i64 1, ptr %980)
  %982 = load ptr, ptr @fpo, align 8, !tbaa !7
  %983 = call i64 @fwrite(ptr nonnull @.str.20.589, i64 28, i64 1, ptr %982)
  call void @exit(i32 noundef 0) #49
  unreachable

984:                                              ; preds = %972
  %985 = add nsw i32 %29, 1
  %986 = getelementptr inbounds %struct.cellbox, ptr %39, i64 0, i32 20
  %987 = load ptr, ptr %986, align 8, !tbaa !226
  %988 = sext i32 %985 to i64
  %989 = getelementptr inbounds %struct.uncombox.25, ptr %987, i64 %988, i32 7
  store i32 1, ptr %989, align 4, !tbaa !251
  %990 = getelementptr inbounds %struct.uncombox.25, ptr %987, i64 %988
  store i32 %831, ptr %990, align 4, !tbaa !298
  %991 = getelementptr inbounds %struct.uncombox.25, ptr %987, i64 %988, i32 4
  store i32 0, ptr %991, align 4, !tbaa !715
  %992 = getelementptr inbounds %struct.uncombox.25, ptr %987, i64 %988, i32 5
  store i32 %973, ptr %992, align 4, !tbaa !717
  br label %1285

993:                                              ; preds = %946
  %994 = add nuw nsw i64 %895, 1
  %995 = icmp eq i64 %994, %892
  %996 = add nuw i32 %894, 1
  br i1 %995, label %997, label %893, !llvm.loop !801

997:                                              ; preds = %993, %882, %874
  %998 = getelementptr inbounds %struct.cellbox, ptr %39, i64 0, i32 8
  %999 = load i32, ptr %998, align 4, !tbaa !385
  %1000 = add nsw i32 %999, 1
  store i32 %1000, ptr %998, align 4, !tbaa !385
  %1001 = icmp eq i32 %999, 0
  %1002 = call noalias dereferenceable_or_null(32) ptr @malloc(i64 noundef 32) #45
  br i1 %1001, label %1003, label %1007

1003:                                             ; preds = %997
  %1004 = getelementptr inbounds %struct.cellbox, ptr %39, i64 0, i32 21
  %1005 = load ptr, ptr %1004, align 8, !tbaa !7
  %1006 = getelementptr inbounds %struct.tilebox, ptr %1005, i64 0, i32 17
  br label %1007

1007:                                             ; preds = %1003, %997
  %1008 = phi ptr [ %1006, %1003 ], [ %40, %997 ]
  store ptr %1002, ptr %1008, align 8, !tbaa !7
  %1009 = getelementptr inbounds %struct.termbox, ptr %1002, i64 0, i32 5
  store i32 %831, ptr %1009, align 8, !tbaa !53
  store ptr null, ptr %1002, align 8, !tbaa !49
  %1010 = getelementptr inbounds %struct.termbox, ptr %1002, i64 0, i32 1
  store i32 %877, ptr %1010, align 8, !tbaa !51
  %1011 = getelementptr inbounds %struct.termbox, ptr %1002, i64 0, i32 2
  store i32 %878, ptr %1011, align 4, !tbaa !52
  %1012 = getelementptr inbounds %struct.termbox, ptr %1002, i64 0, i32 3
  store i32 %877, ptr %1012, align 8, !tbaa !386
  %1013 = getelementptr inbounds %struct.termbox, ptr %1002, i64 0, i32 4
  store i32 %878, ptr %1013, align 4, !tbaa !387
  br label %1285

1014:                                             ; preds = %821
  %1015 = call i32 @bcmp(ptr noundef nonnull dereferenceable(6) %17, ptr noundef nonnull dereferenceable(6) @.str.21.590, i64 6)
  %1016 = icmp eq i32 %1015, 0
  br i1 %1016, label %1017, label %1040

1017:                                             ; preds = %1014
  %1018 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.576, ptr noundef nonnull %17) #44
  %1019 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.576, ptr noundef nonnull %17) #44
  %1020 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.581, ptr noundef nonnull %3, ptr noundef nonnull %4) #44
  %1021 = icmp eq i32 %28, 0
  br i1 %1021, label %1022, label %1026

1022:                                             ; preds = %1017
  %1023 = load i32, ptr %3, align 4, !tbaa !17
  %1024 = load i32, ptr %4, align 4, !tbaa !17
  %1025 = call i32 @findside(ptr noundef %39, i32 noundef %1023, i32 noundef %1024) #44
  call void @loadside(i32 noundef %1025, double noundef 1.000000e+00) #44
  br label %1026

1026:                                             ; preds = %1022, %1017
  %1027 = add nsw i32 %36, 1
  %1028 = load i32, ptr %3, align 4, !tbaa !17
  %1029 = add nsw i32 %1028, %37
  %1030 = load i32, ptr %4, align 4, !tbaa !17
  %1031 = add nsw i32 %1030, %38
  %1032 = sdiv i32 %1029, %1027
  %1033 = sub nsw i32 %1032, %26
  %1034 = getelementptr inbounds %struct.termbox, ptr %40, i64 0, i32 1
  store i32 %1033, ptr %1034, align 8, !tbaa !51
  %1035 = sdiv i32 %1031, %1027
  %1036 = sub nsw i32 %1035, %27
  %1037 = getelementptr inbounds %struct.termbox, ptr %40, i64 0, i32 2
  store i32 %1036, ptr %1037, align 4, !tbaa !52
  %1038 = getelementptr inbounds %struct.termbox, ptr %40, i64 0, i32 3
  store i32 %1033, ptr %1038, align 8, !tbaa !386
  %1039 = getelementptr inbounds %struct.termbox, ptr %40, i64 0, i32 4
  store i32 %1036, ptr %1039, align 4, !tbaa !387
  br label %1285

1040:                                             ; preds = %1014
  %1041 = call i32 @bcmp(ptr noundef nonnull dereferenceable(6) %17, ptr noundef nonnull dereferenceable(6) @.str.22.591, i64 6)
  %1042 = icmp eq i32 %1041, 0
  br i1 %1042, label %1043, label %1047

1043:                                             ; preds = %1040
  %1044 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.23.592, ptr noundef nonnull %15) #44
  %1045 = load double, ptr %15, align 8, !tbaa !36
  %1046 = getelementptr inbounds %struct.cellbox, ptr %39, i64 0, i32 16
  store double %1045, ptr %1046, align 8, !tbaa !574
  br label %1285

1047:                                             ; preds = %1040
  %1048 = call i32 @bcmp(ptr noundef nonnull dereferenceable(6) %17, ptr noundef nonnull dereferenceable(6) @.str.24.593, i64 6)
  %1049 = icmp eq i32 %1048, 0
  br i1 %1049, label %1050, label %1078

1050:                                             ; preds = %1047
  %1051 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.23.592, ptr noundef nonnull %14) #44
  %1052 = load double, ptr %14, align 8, !tbaa !36
  %1053 = getelementptr inbounds %struct.cellbox, ptr %39, i64 0, i32 15
  store double %1052, ptr %1053, align 8, !tbaa !575
  %1054 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.576, ptr noundef nonnull %17) #44
  %1055 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.580, ptr noundef nonnull %7) #44
  %1056 = load i32, ptr %7, align 4, !tbaa !17
  %1057 = getelementptr inbounds %struct.cellbox, ptr %39, i64 0, i32 1
  store i32 %1056, ptr %1057, align 8, !tbaa !378
  %1058 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.580, ptr noundef nonnull %6) #44
  %1059 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.576, ptr noundef nonnull %17) #44
  %1060 = load i32, ptr %6, align 4, !tbaa !17
  %1061 = icmp slt i32 %1060, 1
  br i1 %1061, label %1285, label %1062

1062:                                             ; preds = %1050
  %1063 = getelementptr inbounds %struct.cellbox, ptr %39, i64 0, i32 5
  %1064 = getelementptr inbounds %struct.cellbox, ptr %39, i64 0, i32 4, i64 8
  br label %1065

1065:                                             ; preds = %1074, %1062
  %1066 = phi i32 [ 1, %1062 ], [ %1075, %1074 ]
  %1067 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.580, ptr noundef nonnull %2) #44
  %1068 = load i32, ptr %2, align 4, !tbaa !17
  %1069 = sext i32 %1068 to i64
  %1070 = getelementptr inbounds %struct.cellbox, ptr %39, i64 0, i32 4, i64 %1069
  store i32 1, ptr %1070, align 4, !tbaa !17
  %1071 = icmp eq i32 %1066, 1
  br i1 %1071, label %1072, label %1074

1072:                                             ; preds = %1065
  %1073 = load i32, ptr %2, align 4, !tbaa !17
  store i32 %1073, ptr %1063, align 8, !tbaa !45
  store i32 %1073, ptr %1064, align 4, !tbaa !17
  br label %1074

1074:                                             ; preds = %1072, %1065
  %1075 = add nuw nsw i32 %1066, 1
  %1076 = load i32, ptr %6, align 4, !tbaa !17
  %1077 = icmp slt i32 %1066, %1076
  br i1 %1077, label %1065, label %1285, !llvm.loop !802

1078:                                             ; preds = %1047
  %1079 = call i32 @bcmp(ptr noundef nonnull dereferenceable(9) %17, ptr noundef nonnull dereferenceable(9) @.str.25.594, i64 9)
  %1080 = icmp eq i32 %1079, 0
  br i1 %1080, label %1084, label %1081

1081:                                             ; preds = %1078
  %1082 = call i32 @bcmp(ptr noundef nonnull dereferenceable(6) %17, ptr noundef nonnull dereferenceable(6) @.str.26.595, i64 6)
  %1083 = icmp eq i32 %1082, 0
  br i1 %1083, label %1084, label %1285

1084:                                             ; preds = %1081, %1078
  %1085 = getelementptr inbounds %struct.cellbox, ptr %39, i64 0, i32 9
  %1086 = load i32, ptr %1085, align 8, !tbaa !379
  %1087 = add nsw i32 %1086, 1
  store i32 %1087, ptr %1085, align 8, !tbaa !379
  %1088 = call i32 @bcmp(ptr noundef nonnull dereferenceable(6) %17, ptr noundef nonnull dereferenceable(6) @.str.26.595, i64 6)
  %1089 = icmp eq i32 %1088, 0
  %1090 = zext i1 %1089 to i32
  %1091 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.4.580, ptr noundef nonnull %5) #44
  %1092 = load i32, ptr %5, align 4, !tbaa !17
  %1093 = icmp slt i32 %1092, 1
  br i1 %1093, label %1167, label %1094

1094:                                             ; preds = %1084
  %1095 = getelementptr inbounds %struct.cellbox, ptr %39, i64 0, i32 20
  %1096 = sext i32 %35 to i64
  %1097 = sext i32 %29 to i64
  br label %1098

1098:                                             ; preds = %1157, %1094
  %1099 = phi i64 [ %1097, %1094 ], [ %1147, %1157 ]
  %1100 = phi i64 [ %1096, %1094 ], [ %1110, %1157 ]
  %1101 = phi i32 [ 1, %1094 ], [ %1162, %1157 ]
  %1102 = phi i32 [ %30, %1094 ], [ %1159, %1157 ]
  %1103 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.576, ptr noundef nonnull %17) #44
  %1104 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.576, ptr noundef nonnull %17) #44
  %1105 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.576, ptr noundef nonnull %17) #44
  %1106 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %17) #50
  %1107 = add i64 %1106, 1
  %1108 = call noalias ptr @malloc(i64 noundef %1107) #45
  %1109 = load ptr, ptr @pinnames, align 8, !tbaa !7
  %1110 = add nsw i64 %1100, 1
  %1111 = getelementptr inbounds ptr, ptr %1109, i64 %1110
  store ptr %1108, ptr %1111, align 8, !tbaa !7
  %1112 = load ptr, ptr @pinnames, align 8, !tbaa !7
  %1113 = getelementptr inbounds ptr, ptr %1112, i64 %1110
  %1114 = load ptr, ptr %1113, align 8, !tbaa !7
  %1115 = call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %1114, ptr noundef nonnull dereferenceable(1) %17)
  %1116 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.576, ptr noundef nonnull %17) #44
  %1117 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.576, ptr noundef nonnull %17) #44
  %1118 = call i32 @hashfind(ptr noundef nonnull %17) #44
  %1119 = load ptr, ptr @netarray, align 8, !tbaa !7
  %1120 = sext i32 %1118 to i64
  %1121 = getelementptr inbounds ptr, ptr %1119, i64 %1120
  %1122 = load ptr, ptr %1121, align 8, !tbaa !7
  %1123 = getelementptr inbounds %struct.dimbox, ptr %1122, i64 0, i32 13
  %1124 = load ptr, ptr %1123, align 8, !tbaa !38
  %1125 = icmp eq ptr %1124, null
  br i1 %1125, label %1126, label %1137

1126:                                             ; preds = %1098
  %1127 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %17) #50
  %1128 = add i64 %1127, 1
  %1129 = call noalias ptr @malloc(i64 noundef %1128) #45
  store ptr %1129, ptr %1123, align 8, !tbaa !38
  %1130 = load ptr, ptr %1121, align 8, !tbaa !7
  %1131 = getelementptr inbounds %struct.dimbox, ptr %1130, i64 0, i32 13
  %1132 = load ptr, ptr %1131, align 8, !tbaa !38
  %1133 = call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %1132, ptr noundef nonnull dereferenceable(1) %17)
  %1134 = load ptr, ptr @netarray, align 8, !tbaa !7
  %1135 = getelementptr inbounds ptr, ptr %1134, i64 %1120
  %1136 = load ptr, ptr %1135, align 8, !tbaa !7
  br label %1137

1137:                                             ; preds = %1126, %1098
  %1138 = phi ptr [ %1136, %1126 ], [ %1122, %1098 ]
  %1139 = load ptr, ptr %1138, align 8, !tbaa !54
  %1140 = call noalias dereferenceable_or_null(48) ptr @malloc(i64 noundef 48) #45
  store ptr %1140, ptr %1138, align 8, !tbaa !54
  store ptr %1139, ptr %1140, align 8, !tbaa !63
  %1141 = getelementptr inbounds %struct.netbox, ptr %1140, i64 0, i32 5
  %1142 = trunc i64 %1110 to i32
  store i32 %1142, ptr %1141, align 8, !tbaa !55
  %1143 = getelementptr inbounds %struct.netbox, ptr %1140, i64 0, i32 1
  %1144 = getelementptr inbounds %struct.netbox, ptr %1140, i64 0, i32 6
  store i32 0, ptr %1144, align 4, !tbaa !58
  %1145 = getelementptr inbounds %struct.netbox, ptr %1140, i64 0, i32 7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1143, i8 0, i64 16, i1 false)
  store i32 %25, ptr %1145, align 8, !tbaa !57
  %1146 = getelementptr inbounds %struct.netbox, ptr %1140, i64 0, i32 9
  store i32 0, ptr %1146, align 8, !tbaa !59
  %1147 = add nsw i64 %1099, 1
  %1148 = icmp eq i32 %1101, 1
  br i1 %1148, label %1149, label %1154

1149:                                             ; preds = %1137
  %1150 = load i32, ptr %5, align 4, !tbaa !17
  %1151 = load ptr, ptr %1095, align 8, !tbaa !226
  %1152 = getelementptr inbounds %struct.uncombox.25, ptr %1151, i64 %1147, i32 7
  store i32 %1150, ptr %1152, align 4, !tbaa !251
  %1153 = trunc i64 %1147 to i32
  br label %1157

1154:                                             ; preds = %1137
  %1155 = load ptr, ptr %1095, align 8, !tbaa !226
  %1156 = getelementptr inbounds %struct.uncombox.25, ptr %1155, i64 %1147, i32 7
  store i32 0, ptr %1156, align 4, !tbaa !251
  br label %1157

1157:                                             ; preds = %1154, %1149
  %1158 = phi ptr [ %1151, %1149 ], [ %1155, %1154 ]
  %1159 = phi i32 [ %1153, %1149 ], [ %1102, %1154 ]
  %1160 = getelementptr inbounds %struct.uncombox.25, ptr %1158, i64 %1147
  store i32 %1142, ptr %1160, align 4, !tbaa !298
  %1161 = getelementptr inbounds %struct.uncombox.25, ptr %1158, i64 %1147, i32 8
  store i32 %1090, ptr %1161, align 4, !tbaa !803
  %1162 = add nuw nsw i32 %1101, 1
  %1163 = load i32, ptr %5, align 4, !tbaa !17
  %1164 = icmp slt i32 %1101, %1163
  br i1 %1164, label %1098, label %1165, !llvm.loop !804

1165:                                             ; preds = %1157
  %.lcssa2 = phi i32 [ %1159, %1157 ]
  %.lcssa1 = phi i32 [ %1142, %1157 ]
  %.lcssa = phi i64 [ %1147, %1157 ]
  %1166 = trunc i64 %.lcssa to i32
  br label %1167

1167:                                             ; preds = %1165, %1084
  %1168 = phi i32 [ %29, %1084 ], [ %1166, %1165 ]
  %1169 = phi i32 [ %30, %1084 ], [ %.lcssa2, %1165 ]
  %1170 = phi i32 [ %35, %1084 ], [ %.lcssa1, %1165 ]
  %1171 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.576, ptr noundef nonnull %17) #44
  %1172 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.581, ptr noundef nonnull %8, ptr noundef nonnull %9) #44
  %1173 = load i32, ptr %8, align 4, !tbaa !17
  %1174 = icmp slt i32 %1173, 0
  br i1 %1174, label %1179, label %1175

1175:                                             ; preds = %1167
  %1176 = load ptr, ptr @B, align 8, !tbaa !7
  %1177 = load i32, ptr %1176, align 4, !tbaa !102
  %1178 = icmp sgt i32 %1173, %1177
  br i1 %1178, label %1179, label %1189

1179:                                             ; preds = %1175, %1167
  %.lcssa25 = phi i32 [ %25, %1175 ], [ %25, %1167 ]
  %1180 = load ptr, ptr @fpo, align 8, !tbaa !7
  %1181 = call i64 @fwrite(ptr nonnull @.str.27.596, i64 32, i64 1, ptr %1180)
  %1182 = load ptr, ptr @fpo, align 8, !tbaa !7
  %1183 = load i32, ptr %8, align 4, !tbaa !17
  %1184 = load ptr, ptr @B, align 8, !tbaa !7
  %1185 = load i32, ptr %1184, align 4, !tbaa !102
  %1186 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %1182, ptr noundef nonnull @.str.28.597, i32 noundef %1183, i32 noundef %1185) #43
  %1187 = load ptr, ptr @fpo, align 8, !tbaa !7
  %1188 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %1187, ptr noundef nonnull @.str.29.598, i32 noundef %.lcssa25) #43
  call void @exit(i32 noundef 0) #49
  unreachable

1189:                                             ; preds = %1175
  %1190 = load i32, ptr %9, align 4, !tbaa !17
  %1191 = icmp slt i32 %1190, 0
  %1192 = icmp sgt i32 %1190, %1177
  %1193 = or i1 %1191, %1192
  br i1 %1193, label %1194, label %1204

1194:                                             ; preds = %1189
  %.lcssa26 = phi i32 [ %25, %1189 ]
  %1195 = load ptr, ptr @fpo, align 8, !tbaa !7
  %1196 = call i64 @fwrite(ptr nonnull @.str.30.599, i64 31, i64 1, ptr %1195)
  %1197 = load ptr, ptr @fpo, align 8, !tbaa !7
  %1198 = load i32, ptr %9, align 4, !tbaa !17
  %1199 = load ptr, ptr @B, align 8, !tbaa !7
  %1200 = load i32, ptr %1199, align 4, !tbaa !102
  %1201 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %1197, ptr noundef nonnull @.str.31.600, i32 noundef %1198, i32 noundef %1200) #43
  %1202 = load ptr, ptr @fpo, align 8, !tbaa !7
  %1203 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %1202, ptr noundef nonnull @.str.29.598, i32 noundef %.lcssa26) #43
  call void @exit(i32 noundef 0) #49
  unreachable

1204:                                             ; preds = %1189
  %1205 = icmp eq i32 %1173, 0
  br i1 %1205, label %1206, label %1235

1206:                                             ; preds = %1204
  %1207 = icmp sgt i32 %1169, %1168
  %1208 = getelementptr inbounds %struct.cellbox, ptr %39, i64 0, i32 7
  %1209 = load i32, ptr %1208, align 8, !tbaa !350
  br i1 %1207, label %1215, label %1210

1210:                                             ; preds = %1206
  %1211 = getelementptr inbounds %struct.cellbox, ptr %39, i64 0, i32 20
  %1212 = load ptr, ptr %1211, align 8, !tbaa !226
  %1213 = sext i32 %1169 to i64
  %1214 = add i32 %1168, 1
  br label %1218

1215:                                             ; preds = %1218, %1206
  %1216 = getelementptr inbounds %struct.cellbox, ptr %39, i64 0, i32 7
  %1217 = icmp slt i32 %1209, 1
  br i1 %1217, label %1285, label %1225

1218:                                             ; preds = %1218, %1210
  %1219 = phi i64 [ %1213, %1210 ], [ %1222, %1218 ]
  %1220 = getelementptr inbounds %struct.uncombox.25, ptr %1212, i64 %1219, i32 4
  store i32 %1209, ptr %1220, align 4, !tbaa !715
  %1221 = getelementptr inbounds %struct.uncombox.25, ptr %1212, i64 %1219, i32 5
  store i32 0, ptr %1221, align 4, !tbaa !717
  %1222 = add nsw i64 %1219, 1
  %1223 = trunc i64 %1222 to i32
  %1224 = icmp eq i32 %1214, %1223
  br i1 %1224, label %1215, label %1218, !llvm.loop !805

1225:                                             ; preds = %1225, %1215
  %1226 = phi i32 [ %1233, %1225 ], [ %1209, %1215 ]
  %1227 = phi i32 [ %1232, %1225 ], [ 1, %1215 ]
  %1228 = load i32, ptr %5, align 4, !tbaa !17
  %1229 = sitofp i32 %1228 to double
  %1230 = sitofp i32 %1226 to double
  %1231 = fdiv double %1229, %1230
  call void @loadside(i32 noundef %1227, double noundef %1231) #44
  %1232 = add nuw nsw i32 %1227, 1
  %1233 = load i32, ptr %1216, align 8, !tbaa !350
  %1234 = icmp slt i32 %1227, %1233
  br i1 %1234, label %1225, label %1285, !llvm.loop !806

1235:                                             ; preds = %1204
  %1236 = icmp eq i32 %1190, 0
  %1237 = icmp sgt i32 %1169, %1168
  br i1 %1236, label %1244, label %1238

1238:                                             ; preds = %1235
  br i1 %1237, label %1276, label %1239

1239:                                             ; preds = %1238
  %1240 = getelementptr inbounds %struct.cellbox, ptr %39, i64 0, i32 20
  %1241 = load ptr, ptr %1240, align 8, !tbaa !226
  %1242 = sext i32 %1169 to i64
  %1243 = add i32 %1168, 1
  br label %1264

1244:                                             ; preds = %1235
  br i1 %1237, label %1260, label %1245

1245:                                             ; preds = %1244
  %1246 = getelementptr inbounds %struct.cellbox, ptr %39, i64 0, i32 20
  %1247 = load ptr, ptr %1246, align 8, !tbaa !226
  %1248 = sext i32 %1169 to i64
  %1249 = add i32 %1168, 1
  br label %1250

1250:                                             ; preds = %1250, %1245
  %1251 = phi i64 [ %1248, %1245 ], [ %1255, %1250 ]
  %1252 = getelementptr inbounds %struct.uncombox.25, ptr %1247, i64 %1251, i32 4
  store i32 1, ptr %1252, align 4, !tbaa !715
  %1253 = load i32, ptr %8, align 4, !tbaa !17
  %1254 = getelementptr inbounds %struct.uncombox.25, ptr %1247, i64 %1251, i32 5
  store i32 %1253, ptr %1254, align 4, !tbaa !717
  %1255 = add nsw i64 %1251, 1
  %1256 = trunc i64 %1255 to i32
  %1257 = icmp eq i32 %1249, %1256
  br i1 %1257, label %1258, label %1250, !llvm.loop !807

1258:                                             ; preds = %1250
  %1259 = load i32, ptr %8, align 4, !tbaa !17
  br label %1260

1260:                                             ; preds = %1258, %1244
  %1261 = phi i32 [ %1259, %1258 ], [ %1173, %1244 ]
  %1262 = load i32, ptr %5, align 4, !tbaa !17
  %1263 = sitofp i32 %1262 to double
  call void @loadside(i32 noundef %1261, double noundef %1263) #44
  br label %1285

1264:                                             ; preds = %1264, %1239
  %1265 = phi i64 [ %1242, %1239 ], [ %1271, %1264 ]
  %1266 = getelementptr inbounds %struct.uncombox.25, ptr %1241, i64 %1265, i32 4
  store i32 2, ptr %1266, align 4, !tbaa !715
  %1267 = load i32, ptr %8, align 4, !tbaa !17
  %1268 = getelementptr inbounds %struct.uncombox.25, ptr %1241, i64 %1265, i32 5
  store i32 %1267, ptr %1268, align 4, !tbaa !717
  %1269 = load i32, ptr %9, align 4, !tbaa !17
  %1270 = getelementptr inbounds %struct.uncombox.25, ptr %1241, i64 %1265, i32 6
  store i32 %1269, ptr %1270, align 4, !tbaa !723
  %1271 = add nsw i64 %1265, 1
  %1272 = trunc i64 %1271 to i32
  %1273 = icmp eq i32 %1243, %1272
  br i1 %1273, label %1274, label %1264, !llvm.loop !808

1274:                                             ; preds = %1264
  %1275 = load i32, ptr %8, align 4, !tbaa !17
  br label %1276

1276:                                             ; preds = %1274, %1238
  %1277 = phi i32 [ %1275, %1274 ], [ %1173, %1238 ]
  %1278 = load i32, ptr %5, align 4, !tbaa !17
  %1279 = sitofp i32 %1278 to double
  %1280 = fmul double %1279, 5.000000e-01
  call void @loadside(i32 noundef %1277, double noundef %1280) #44
  %1281 = load i32, ptr %9, align 4, !tbaa !17
  %1282 = load i32, ptr %5, align 4, !tbaa !17
  %1283 = sitofp i32 %1282 to double
  %1284 = fmul double %1283, 5.000000e-01
  call void @loadside(i32 noundef %1281, double noundef %1284) #44
  br label %1285

1285:                                             ; preds = %1276, %1260, %1225, %1215, %1081, %1074, %1050, %1043, %1026, %1007, %984, %937, %756, %752, %738, %462, %455, %448, %442, %438, %431, %406, %356, %250, %229
  %1286 = phi i32 [ %25, %442 ], [ %25, %448 ], [ %25, %455 ], [ %25, %462 ], [ %25, %1007 ], [ %25, %1026 ], [ %25, %1043 ], [ %25, %1260 ], [ %25, %1276 ], [ %25, %1081 ], [ %25, %438 ], [ %477, %738 ], [ %25, %937 ], [ %25, %984 ], [ %51, %229 ], [ %25, %406 ], [ %477, %752 ], [ %25, %1050 ], [ %25, %1215 ], [ %51, %250 ], [ %262, %356 ], [ %25, %431 ], [ %477, %756 ], [ %25, %1074 ], [ %25, %1225 ]
  %1287 = phi i32 [ %26, %442 ], [ %26, %448 ], [ %26, %455 ], [ %26, %462 ], [ %26, %1007 ], [ %26, %1026 ], [ %26, %1043 ], [ %26, %1260 ], [ %26, %1276 ], [ %26, %1081 ], [ %26, %438 ], [ %638, %738 ], [ %26, %937 ], [ %26, %984 ], [ %179, %229 ], [ %26, %406 ], [ %638, %752 ], [ %26, %1050 ], [ %26, %1215 ], [ %179, %250 ], [ %337, %356 ], [ %26, %431 ], [ %638, %756 ], [ %26, %1074 ], [ %26, %1225 ]
  %1288 = phi i32 [ %27, %442 ], [ %27, %448 ], [ %27, %455 ], [ %27, %462 ], [ %27, %1007 ], [ %27, %1026 ], [ %27, %1043 ], [ %27, %1260 ], [ %27, %1276 ], [ %27, %1081 ], [ %27, %438 ], [ %640, %738 ], [ %27, %937 ], [ %27, %984 ], [ %181, %229 ], [ %27, %406 ], [ %640, %752 ], [ %27, %1050 ], [ %27, %1215 ], [ %181, %250 ], [ %339, %356 ], [ %27, %431 ], [ %640, %756 ], [ %27, %1074 ], [ %27, %1225 ]
  %1289 = phi i32 [ %28, %442 ], [ %28, %448 ], [ %28, %455 ], [ %28, %462 ], [ %28, %1007 ], [ %28, %1026 ], [ %28, %1043 ], [ %28, %1260 ], [ %28, %1276 ], [ %28, %1081 ], [ %28, %438 ], [ %28, %738 ], [ %28, %937 ], [ %28, %984 ], [ %28, %229 ], [ %28, %406 ], [ %28, %752 ], [ %28, %1050 ], [ %28, %1215 ], [ %28, %250 ], [ %275, %356 ], [ %28, %431 ], [ %28, %756 ], [ %28, %1074 ], [ %28, %1225 ]
  %1290 = phi i32 [ %29, %442 ], [ %29, %448 ], [ %29, %455 ], [ %29, %462 ], [ %29, %1007 ], [ %29, %1026 ], [ %29, %1043 ], [ %1168, %1260 ], [ %1168, %1276 ], [ %29, %1081 ], [ %29, %438 ], [ 0, %738 ], [ %938, %937 ], [ %985, %984 ], [ %29, %229 ], [ %29, %406 ], [ 0, %752 ], [ %29, %1050 ], [ %1168, %1215 ], [ %29, %250 ], [ %29, %356 ], [ %29, %431 ], [ 0, %756 ], [ %29, %1074 ], [ %1168, %1225 ]
  %1291 = phi i32 [ %30, %442 ], [ %30, %448 ], [ %30, %455 ], [ %30, %462 ], [ %30, %1007 ], [ %30, %1026 ], [ %30, %1043 ], [ %1169, %1260 ], [ %1169, %1276 ], [ %30, %1081 ], [ %30, %438 ], [ %30, %738 ], [ %30, %937 ], [ %30, %984 ], [ %30, %229 ], [ %30, %406 ], [ %30, %752 ], [ %30, %1050 ], [ %1169, %1215 ], [ %30, %250 ], [ %30, %356 ], [ %30, %431 ], [ %30, %756 ], [ %30, %1074 ], [ %1169, %1225 ]
  %1292 = phi i32 [ %31, %442 ], [ %31, %448 ], [ %31, %455 ], [ %31, %462 ], [ %31, %1007 ], [ %31, %1026 ], [ %31, %1043 ], [ %31, %1260 ], [ %31, %1276 ], [ %31, %1081 ], [ %31, %438 ], [ %623, %738 ], [ %31, %937 ], [ %31, %984 ], [ %171, %229 ], [ %31, %406 ], [ %623, %752 ], [ %31, %1050 ], [ %31, %1215 ], [ %171, %250 ], [ %329, %356 ], [ %31, %431 ], [ %623, %756 ], [ %31, %1074 ], [ %31, %1225 ]
  %1293 = phi i32 [ %32, %442 ], [ %32, %448 ], [ %32, %455 ], [ %32, %462 ], [ %32, %1007 ], [ %32, %1026 ], [ %32, %1043 ], [ %32, %1260 ], [ %32, %1276 ], [ %32, %1081 ], [ %32, %438 ], [ %624, %738 ], [ %32, %937 ], [ %32, %984 ], [ %172, %229 ], [ %32, %406 ], [ %624, %752 ], [ %32, %1050 ], [ %32, %1215 ], [ %172, %250 ], [ %330, %356 ], [ %32, %431 ], [ %624, %756 ], [ %32, %1074 ], [ %32, %1225 ]
  %1294 = phi i32 [ %33, %442 ], [ %33, %448 ], [ %33, %455 ], [ %33, %462 ], [ %33, %1007 ], [ %33, %1026 ], [ %33, %1043 ], [ %33, %1260 ], [ %33, %1276 ], [ %33, %1081 ], [ %33, %438 ], [ %625, %738 ], [ %33, %937 ], [ %33, %984 ], [ %173, %229 ], [ %33, %406 ], [ %625, %752 ], [ %33, %1050 ], [ %33, %1215 ], [ %173, %250 ], [ %331, %356 ], [ %33, %431 ], [ %625, %756 ], [ %33, %1074 ], [ %33, %1225 ]
  %1295 = phi i32 [ %34, %442 ], [ %34, %448 ], [ %34, %455 ], [ %34, %462 ], [ %34, %1007 ], [ %34, %1026 ], [ %34, %1043 ], [ %34, %1260 ], [ %34, %1276 ], [ %34, %1081 ], [ %34, %438 ], [ %626, %738 ], [ %34, %937 ], [ %34, %984 ], [ %174, %229 ], [ %34, %406 ], [ %626, %752 ], [ %34, %1050 ], [ %34, %1215 ], [ %174, %250 ], [ %332, %356 ], [ %34, %431 ], [ %626, %756 ], [ %34, %1074 ], [ %34, %1225 ]
  %1296 = phi i32 [ %35, %442 ], [ %35, %448 ], [ %35, %455 ], [ %35, %462 ], [ %831, %1007 ], [ %35, %1026 ], [ %35, %1043 ], [ %1170, %1260 ], [ %1170, %1276 ], [ %35, %1081 ], [ %35, %438 ], [ %35, %738 ], [ %831, %937 ], [ %831, %984 ], [ %35, %229 ], [ %35, %406 ], [ %35, %752 ], [ %35, %1050 ], [ %1170, %1215 ], [ %35, %250 ], [ %35, %356 ], [ %35, %431 ], [ %35, %756 ], [ %35, %1074 ], [ %1170, %1225 ]
  %1297 = phi i32 [ %36, %442 ], [ %36, %448 ], [ %36, %455 ], [ %36, %462 ], [ 1, %1007 ], [ %1027, %1026 ], [ %36, %1043 ], [ %36, %1260 ], [ %36, %1276 ], [ %36, %1081 ], [ %36, %438 ], [ %36, %738 ], [ 1, %937 ], [ 1, %984 ], [ %36, %229 ], [ %36, %406 ], [ %36, %752 ], [ %36, %1050 ], [ %36, %1215 ], [ %36, %250 ], [ %36, %356 ], [ %36, %431 ], [ %36, %756 ], [ %36, %1074 ], [ %36, %1225 ]
  %1298 = phi i32 [ %37, %442 ], [ %37, %448 ], [ %37, %455 ], [ %37, %462 ], [ %875, %1007 ], [ %1029, %1026 ], [ %37, %1043 ], [ %37, %1260 ], [ %37, %1276 ], [ %37, %1081 ], [ %37, %438 ], [ %37, %738 ], [ %875, %937 ], [ %875, %984 ], [ %37, %229 ], [ %37, %406 ], [ %37, %752 ], [ %37, %1050 ], [ %37, %1215 ], [ %37, %250 ], [ %37, %356 ], [ %37, %431 ], [ %37, %756 ], [ %37, %1074 ], [ %37, %1225 ]
  %1299 = phi i32 [ %38, %442 ], [ %38, %448 ], [ %38, %455 ], [ %38, %462 ], [ %876, %1007 ], [ %1031, %1026 ], [ %38, %1043 ], [ %38, %1260 ], [ %38, %1276 ], [ %38, %1081 ], [ %38, %438 ], [ %38, %738 ], [ %876, %937 ], [ %876, %984 ], [ %38, %229 ], [ %38, %406 ], [ %38, %752 ], [ %38, %1050 ], [ %38, %1215 ], [ %38, %250 ], [ %38, %356 ], [ %38, %431 ], [ %38, %756 ], [ %38, %1074 ], [ %38, %1225 ]
  %1300 = phi ptr [ %39, %442 ], [ %39, %448 ], [ %39, %455 ], [ %39, %462 ], [ %39, %1007 ], [ %39, %1026 ], [ %39, %1043 ], [ %39, %1260 ], [ %39, %1276 ], [ %39, %1081 ], [ %39, %438 ], [ %480, %738 ], [ %39, %937 ], [ %39, %984 ], [ %54, %229 ], [ %39, %406 ], [ %480, %752 ], [ %39, %1050 ], [ %39, %1215 ], [ %54, %250 ], [ %265, %356 ], [ %39, %431 ], [ %480, %756 ], [ %39, %1074 ], [ %39, %1225 ]
  %1301 = phi ptr [ %40, %442 ], [ %40, %448 ], [ %40, %455 ], [ %40, %462 ], [ %1002, %1007 ], [ %40, %1026 ], [ %40, %1043 ], [ %40, %1260 ], [ %40, %1276 ], [ %40, %1081 ], [ %40, %438 ], [ %40, %738 ], [ %40, %937 ], [ %40, %984 ], [ %40, %229 ], [ %40, %406 ], [ %40, %752 ], [ %40, %1050 ], [ %40, %1215 ], [ %40, %250 ], [ %40, %356 ], [ %40, %431 ], [ %40, %756 ], [ %40, %1074 ], [ %40, %1225 ]
  br label %24, !llvm.loop !809

1302:                                             ; preds = %24
  %1303 = load i32, ptr @totPins, align 4, !tbaa !17
  %1304 = sitofp i32 %1303 to double
  %1305 = load i32, ptr @perim, align 4, !tbaa !17
  %1306 = sitofp i32 %1305 to double
  %1307 = fdiv double %1304, %1306
  store double %1307, ptr @pinsPerLen, align 8, !tbaa !36
  call void @setpwates() #44
  call void @placepin() #44
  call void @genorient() #44
  call void @llvm.lifetime.end.p0(i64 1024, ptr nonnull %17) #47
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %16) #47
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %15) #47
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %13) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %12) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %11) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %10) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %3) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #47
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i16 @llvm.fshl.i16(i16, i16, i16) #13

; Function Attrs: nounwind optsize uwtable
define internal void @readgeo(ptr noundef %0) #0 {
  %2 = alloca [32 x i8], align 16
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %2) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %3) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5) #47
  store i32 0, ptr @bbr, align 4, !tbaa !17
  store i32 0, ptr @bbt, align 4, !tbaa !17
  store i32 10000000, ptr @bbl, align 4, !tbaa !17
  store i32 10000000, ptr @bbb, align 4, !tbaa !17
  store i32 0, ptr @edgeCount, align 4, !tbaa !17
  store ptr null, ptr @hFixedEdgeRoot, align 8, !tbaa !7
  store ptr null, ptr @vFixedEdgeRoot, align 8, !tbaa !7
  store ptr null, ptr @hEdgeRoot, align 8, !tbaa !7
  store ptr null, ptr @vEdgeRoot, align 8, !tbaa !7
  %6 = tail call noalias dereferenceable_or_null(16040) ptr @malloc(i64 noundef 16040) #45
  store ptr %6, ptr @edgeList, align 8, !tbaa !7
  %7 = tail call noalias dereferenceable_or_null(400) ptr @malloc(i64 noundef 400) #45
  store ptr %7, ptr @cellList, align 8, !tbaa !7
  br label %8

8:                                                ; preds = %8, %1
  %9 = phi i64 [ 1, %1 ], [ %12, %8 ]
  %10 = load ptr, ptr @cellList, align 8, !tbaa !7
  %11 = getelementptr inbounds ptr, ptr %10, i64 %9
  store ptr null, ptr %11, align 8, !tbaa !7
  %12 = add nuw nsw i64 %9, 1
  %13 = icmp eq i64 %12, 50
  br i1 %13, label %14, label %8, !llvm.loop !810

14:                                               ; preds = %214, %8
  %15 = phi i64 [ %29, %214 ], [ 0, %8 ]
  %16 = phi i32 [ %261, %214 ], [ 51, %8 ]
  %17 = phi i64 [ %260, %214 ], [ 1, %8 ]
  %18 = phi i32 [ %.lcssa5, %214 ], [ undef, %8 ]
  %19 = phi i32 [ %.lcssa4, %214 ], [ undef, %8 ]
  %20 = phi i32 [ %.lcssa3, %214 ], [ undef, %8 ]
  %21 = phi i32 [ %.lcssa2, %214 ], [ undef, %8 ]
  %22 = phi i32 [ %217, %214 ], [ 0, %8 ]
  %23 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.603, ptr noundef nonnull %2) #44
  %24 = icmp eq i32 %23, 1
  br i1 %24, label %25, label %270

25:                                               ; preds = %14
  %26 = call i32 @bcmp(ptr noundef nonnull dereferenceable(5) %2, ptr noundef nonnull dereferenceable(5) @.str.1.604, i64 5)
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %262

28:                                               ; preds = %25
  %29 = add nuw i64 %15, 1
  %30 = trunc i64 %29 to i32
  %31 = urem i32 %30, 50
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %45

33:                                               ; preds = %28
  %34 = load ptr, ptr @cellList, align 8, !tbaa !7
  %35 = shl i64 %15, 3
  %36 = add i64 %35, 408
  %37 = call ptr @realloc(ptr noundef %34, i64 noundef %36) #46
  store ptr %37, ptr @cellList, align 8, !tbaa !7
  br label %38

38:                                               ; preds = %38, %33
  %39 = phi i64 [ %17, %33 ], [ %42, %38 ]
  %40 = load ptr, ptr @cellList, align 8, !tbaa !7
  %41 = getelementptr inbounds ptr, ptr %40, i64 %39
  store ptr null, ptr %41, align 8, !tbaa !7
  %42 = add i64 %39, 1
  %43 = trunc i64 %42 to i32
  %44 = icmp eq i32 %16, %43
  br i1 %44, label %45, label %38, !llvm.loop !811

45:                                               ; preds = %38, %28
  %46 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.603, ptr noundef nonnull %2) #44
  %47 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.2.605, ptr noundef nonnull %3) #44
  %48 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.603, ptr noundef nonnull %2) #44
  %49 = load i32, ptr %3, align 4, !tbaa !17
  %50 = icmp sgt i32 %49, 0
  call void @llvm.assume(i1 %50)
  br label %51

51:                                               ; preds = %187, %45
  %52 = phi ptr [ null, %45 ], [ %193, %187 ]
  %53 = phi i32 [ %22, %45 ], [ %192, %187 ]
  %54 = phi i32 [ %21, %45 ], [ %191, %187 ]
  %55 = phi i32 [ %20, %45 ], [ %190, %187 ]
  %56 = phi i32 [ %19, %45 ], [ %189, %187 ]
  %57 = phi i32 [ %18, %45 ], [ %188, %187 ]
  %58 = phi i32 [ 1, %45 ], [ %194, %187 ]
  %59 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.3.606, ptr noundef nonnull %4, ptr noundef nonnull %5) #44
  %60 = load i32, ptr %4, align 4, !tbaa !17
  %61 = load i32, ptr @bbr, align 4, !tbaa !17
  %62 = icmp sgt i32 %60, %61
  br i1 %62, label %63, label %64

63:                                               ; preds = %51
  store i32 %60, ptr @bbr, align 4, !tbaa !17
  br label %64

64:                                               ; preds = %63, %51
  %65 = load i32, ptr @bbl, align 4, !tbaa !17
  %66 = icmp slt i32 %60, %65
  br i1 %66, label %67, label %68

67:                                               ; preds = %64
  store i32 %60, ptr @bbl, align 4, !tbaa !17
  br label %68

68:                                               ; preds = %67, %64
  %69 = load i32, ptr %5, align 4, !tbaa !17
  %70 = load i32, ptr @bbt, align 4, !tbaa !17
  %71 = icmp sgt i32 %69, %70
  br i1 %71, label %72, label %73

72:                                               ; preds = %68
  store i32 %69, ptr @bbt, align 4, !tbaa !17
  br label %73

73:                                               ; preds = %72, %68
  %74 = load i32, ptr @bbb, align 4, !tbaa !17
  %75 = icmp slt i32 %69, %74
  br i1 %75, label %76, label %77

76:                                               ; preds = %73
  store i32 %69, ptr @bbb, align 4, !tbaa !17
  br label %77

77:                                               ; preds = %76, %73
  %78 = icmp eq i32 %58, 1
  br i1 %78, label %187, label %79

79:                                               ; preds = %77
  %80 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %81 = add nsw i32 %80, 1
  store i32 %81, ptr @edgeCount, align 4, !tbaa !17
  %82 = icmp eq ptr %52, null
  %83 = call noalias dereferenceable_or_null(40) ptr @malloc(i64 noundef 40) #45
  br i1 %82, label %84, label %90

84:                                               ; preds = %79
  %85 = load ptr, ptr @cellList, align 8, !tbaa !7
  %86 = getelementptr inbounds ptr, ptr %85, i64 %29
  store ptr %83, ptr %86, align 8, !tbaa !7
  %87 = load ptr, ptr @cellList, align 8, !tbaa !7
  %88 = getelementptr inbounds ptr, ptr %87, i64 %29
  %89 = load ptr, ptr %88, align 8, !tbaa !7
  br label %92

90:                                               ; preds = %79
  %91 = getelementptr inbounds %struct.clbox, ptr %52, i64 0, i32 7
  store ptr %83, ptr %91, align 8, !tbaa !220
  br label %92

92:                                               ; preds = %90, %84
  %93 = phi ptr [ %89, %84 ], [ %83, %90 ]
  %94 = getelementptr inbounds %struct.clbox, ptr %93, i64 0, i32 7
  store ptr null, ptr %94, align 8, !tbaa !220
  store i32 %81, ptr %93, align 8, !tbaa !207
  %95 = getelementptr inbounds %struct.clbox, ptr %93, i64 0, i32 1
  store i32 0, ptr %95, align 4, !tbaa !210
  %96 = getelementptr inbounds %struct.clbox, ptr %93, i64 0, i32 6
  store i32 1000000, ptr %96, align 8, !tbaa !209
  %97 = add nsw i32 %53, 1
  %98 = icmp sgt i32 %53, 399
  br i1 %98, label %99, label %106

99:                                               ; preds = %92
  %100 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %101 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %102 = add nsw i32 %101, 400
  %103 = sext i32 %102 to i64
  %104 = mul nsw i64 %103, 40
  %105 = call ptr @realloc(ptr noundef %100, i64 noundef %104) #46
  store ptr %105, ptr @edgeList, align 8, !tbaa !7
  br label %106

106:                                              ; preds = %99, %92
  %107 = phi i32 [ 1, %99 ], [ %97, %92 ]
  %108 = and i32 %58, 1
  %109 = icmp eq i32 %108, 0
  %110 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %111 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds %struct.edgebox, ptr %110, i64 %112, i32 1
  br i1 %109, label %114, label %139

114:                                              ; preds = %106
  %115 = load i32, ptr %5, align 4
  %116 = call i32 @llvm.smin.i32(i32 %56, i32 %115)
  store i32 %116, ptr %113, align 4, !tbaa !143
  %117 = load i32, ptr %5, align 4
  %118 = call i32 @llvm.smax.i32(i32 %56, i32 %117)
  %119 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds %struct.edgebox, ptr %110, i64 %120, i32 2
  store i32 %118, ptr %121, align 4, !tbaa !144
  %122 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds %struct.edgebox, ptr %110, i64 %123, i32 3
  store i32 %57, ptr %124, align 4, !tbaa !140
  %125 = load i32, ptr %5, align 4, !tbaa !17
  %126 = sub nsw i32 %56, %125
  %127 = call i32 @llvm.abs.i32(i32 %126, i1 true)
  %128 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds %struct.edgebox, ptr %110, i64 %129, i32 4
  store i32 %127, ptr %130, align 4, !tbaa !501
  %131 = load i32, ptr %5, align 4, !tbaa !17
  %132 = icmp sgt i32 %56, %131
  %133 = select i1 %132, i32 -1, i32 1
  %134 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds %struct.edgebox, ptr %110, i64 %135, i32 5
  store i32 %133, ptr %136, align 4, !tbaa !142
  %137 = load i32, ptr @edgeCount, align 4, !tbaa !17
  call void @tinsert(ptr noundef nonnull @vFixedEdgeRoot, i32 noundef %57, i32 noundef %137) #44
  %138 = load i32, ptr @edgeCount, align 4, !tbaa !17
  call void @tinsert(ptr noundef nonnull @vEdgeRoot, i32 noundef %57, i32 noundef %138) #44
  br label %164

139:                                              ; preds = %106
  %140 = load i32, ptr %4, align 4
  %141 = call i32 @llvm.smin.i32(i32 %57, i32 %140)
  store i32 %141, ptr %113, align 4, !tbaa !143
  %142 = load i32, ptr %4, align 4
  %143 = call i32 @llvm.smax.i32(i32 %57, i32 %142)
  %144 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds %struct.edgebox, ptr %110, i64 %145, i32 2
  store i32 %143, ptr %146, align 4, !tbaa !144
  %147 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %148 = sext i32 %147 to i64
  %149 = getelementptr inbounds %struct.edgebox, ptr %110, i64 %148, i32 3
  store i32 %56, ptr %149, align 4, !tbaa !140
  %150 = load i32, ptr %4, align 4, !tbaa !17
  %151 = sub nsw i32 %57, %150
  %152 = call i32 @llvm.abs.i32(i32 %151, i1 true)
  %153 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %154 = sext i32 %153 to i64
  %155 = getelementptr inbounds %struct.edgebox, ptr %110, i64 %154, i32 4
  store i32 %152, ptr %155, align 4, !tbaa !501
  %156 = load i32, ptr %4, align 4, !tbaa !17
  %157 = icmp sgt i32 %57, %156
  %158 = select i1 %157, i32 -1, i32 1
  %159 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %160 = sext i32 %159 to i64
  %161 = getelementptr inbounds %struct.edgebox, ptr %110, i64 %160, i32 5
  store i32 %158, ptr %161, align 4, !tbaa !142
  %162 = load i32, ptr @edgeCount, align 4, !tbaa !17
  call void @tinsert(ptr noundef nonnull @hFixedEdgeRoot, i32 noundef %56, i32 noundef %162) #44
  %163 = load i32, ptr @edgeCount, align 4, !tbaa !17
  call void @tinsert(ptr noundef nonnull @hEdgeRoot, i32 noundef %56, i32 noundef %163) #44
  br label %164

164:                                              ; preds = %139, %114
  %165 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %166 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds %struct.edgebox, ptr %165, i64 %167
  store i32 %30, ptr %168, align 4, !tbaa !148
  %169 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds %struct.edgebox, ptr %165, i64 %170, i32 6
  store i32 1, ptr %171, align 4, !tbaa !147
  %172 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %173 = add nsw i32 %172, 1
  %174 = sext i32 %172 to i64
  %175 = getelementptr inbounds %struct.edgebox, ptr %165, i64 %174, i32 8
  store i32 %173, ptr %175, align 4, !tbaa !332
  %176 = icmp eq i32 %58, 2
  %177 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %178 = add nsw i32 %177, -1
  %179 = load i32, ptr %3, align 4
  %180 = add i32 %177, -1
  %181 = add i32 %180, %179
  %182 = select i1 %176, i32 %181, i32 %178
  %183 = sext i32 %177 to i64
  %184 = getelementptr inbounds %struct.edgebox, ptr %165, i64 %183, i32 7
  store i32 %182, ptr %184, align 4, !tbaa !333
  %185 = load i32, ptr %4, align 4, !tbaa !17
  %186 = load i32, ptr %5, align 4, !tbaa !17
  br label %187

187:                                              ; preds = %164, %77
  %188 = phi i32 [ %185, %164 ], [ %60, %77 ]
  %189 = phi i32 [ %186, %164 ], [ %69, %77 ]
  %190 = phi i32 [ %55, %164 ], [ %60, %77 ]
  %191 = phi i32 [ %54, %164 ], [ %69, %77 ]
  %192 = phi i32 [ %107, %164 ], [ %53, %77 ]
  %193 = phi ptr [ %93, %164 ], [ %52, %77 ]
  %194 = add nuw nsw i32 %58, 1
  %195 = load i32, ptr %3, align 4, !tbaa !17
  %196 = icmp slt i32 %58, %195
  br i1 %196, label %51, label %197, !llvm.loop !812

197:                                              ; preds = %187
  %.lcssa5 = phi i32 [ %188, %187 ]
  %.lcssa4 = phi i32 [ %189, %187 ]
  %.lcssa3 = phi i32 [ %190, %187 ]
  %.lcssa2 = phi i32 [ %191, %187 ]
  %.lcssa1 = phi i32 [ %192, %187 ]
  %.lcssa = phi ptr [ %193, %187 ]
  store i32 %.lcssa3, ptr %4, align 4, !tbaa !17
  store i32 %.lcssa2, ptr %5, align 4, !tbaa !17
  %198 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %199 = add nsw i32 %198, 1
  store i32 %199, ptr @edgeCount, align 4, !tbaa !17
  %200 = call noalias dereferenceable_or_null(40) ptr @malloc(i64 noundef 40) #45
  %201 = getelementptr inbounds %struct.clbox, ptr %.lcssa, i64 0, i32 7
  store ptr %200, ptr %201, align 8, !tbaa !220
  %202 = getelementptr inbounds %struct.clbox, ptr %200, i64 0, i32 7
  store ptr null, ptr %202, align 8, !tbaa !220
  store i32 %199, ptr %200, align 8, !tbaa !207
  %203 = getelementptr inbounds %struct.clbox, ptr %200, i64 0, i32 1
  store i32 0, ptr %203, align 4, !tbaa !210
  %204 = getelementptr inbounds %struct.clbox, ptr %200, i64 0, i32 6
  store i32 1000000, ptr %204, align 8, !tbaa !209
  %205 = add nsw i32 %.lcssa1, 1
  %206 = icmp sgt i32 %.lcssa1, 399
  %207 = load ptr, ptr @edgeList, align 8, !tbaa !7
  br i1 %206, label %208, label %214

208:                                              ; preds = %197
  %209 = add nsw i32 %198, 401
  %210 = sext i32 %209 to i64
  %211 = mul nsw i64 %210, 40
  %212 = call ptr @realloc(ptr noundef %207, i64 noundef %211) #46
  store ptr %212, ptr @edgeList, align 8, !tbaa !7
  %213 = load i32, ptr @edgeCount, align 4, !tbaa !17
  br label %214

214:                                              ; preds = %208, %197
  %215 = phi i32 [ %213, %208 ], [ %199, %197 ]
  %216 = phi ptr [ %212, %208 ], [ %207, %197 ]
  %217 = phi i32 [ 1, %208 ], [ %205, %197 ]
  %218 = sext i32 %215 to i64
  %219 = getelementptr inbounds %struct.edgebox, ptr %216, i64 %218
  store i32 %30, ptr %219, align 4, !tbaa !148
  %220 = load i32, ptr %4, align 4
  %221 = call i32 @llvm.smin.i32(i32 %.lcssa5, i32 %220)
  %222 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %223 = sext i32 %222 to i64
  %224 = getelementptr inbounds %struct.edgebox, ptr %216, i64 %223, i32 1
  store i32 %221, ptr %224, align 4, !tbaa !143
  %225 = load i32, ptr %4, align 4
  %226 = call i32 @llvm.smax.i32(i32 %.lcssa5, i32 %225)
  %227 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %228 = sext i32 %227 to i64
  %229 = getelementptr inbounds %struct.edgebox, ptr %216, i64 %228, i32 2
  store i32 %226, ptr %229, align 4, !tbaa !144
  %230 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %231 = sext i32 %230 to i64
  %232 = getelementptr inbounds %struct.edgebox, ptr %216, i64 %231, i32 3
  store i32 %.lcssa4, ptr %232, align 4, !tbaa !140
  %233 = load i32, ptr %4, align 4, !tbaa !17
  %234 = sub nsw i32 %.lcssa5, %233
  %235 = call i32 @llvm.abs.i32(i32 %234, i1 true)
  %236 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %237 = sext i32 %236 to i64
  %238 = getelementptr inbounds %struct.edgebox, ptr %216, i64 %237, i32 4
  store i32 %235, ptr %238, align 4, !tbaa !501
  %239 = load i32, ptr %4, align 4, !tbaa !17
  %240 = icmp sgt i32 %.lcssa5, %239
  %241 = select i1 %240, i32 -1, i32 1
  %242 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %243 = sext i32 %242 to i64
  %244 = getelementptr inbounds %struct.edgebox, ptr %216, i64 %243, i32 5
  store i32 %241, ptr %244, align 4, !tbaa !142
  %245 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %246 = add nsw i32 %245, -1
  %247 = sext i32 %245 to i64
  %248 = getelementptr inbounds %struct.edgebox, ptr %216, i64 %247, i32 7
  store i32 %246, ptr %248, align 4, !tbaa !333
  %249 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %250 = load i32, ptr %3, align 4, !tbaa !17
  %251 = add i32 %249, 1
  %252 = sub i32 %251, %250
  %253 = sext i32 %249 to i64
  %254 = getelementptr inbounds %struct.edgebox, ptr %216, i64 %253, i32 8
  store i32 %252, ptr %254, align 4, !tbaa !332
  %255 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %256 = sext i32 %255 to i64
  %257 = getelementptr inbounds %struct.edgebox, ptr %216, i64 %256, i32 6
  store i32 1, ptr %257, align 4, !tbaa !147
  %258 = load i32, ptr @edgeCount, align 4, !tbaa !17
  call void @tinsert(ptr noundef nonnull @hFixedEdgeRoot, i32 noundef %.lcssa4, i32 noundef %258) #44
  %259 = load i32, ptr @edgeCount, align 4, !tbaa !17
  call void @tinsert(ptr noundef nonnull @hEdgeRoot, i32 noundef %.lcssa4, i32 noundef %259) #44
  %260 = add nuw i64 %17, 1
  %261 = add i32 %16, 1
  br label %14, !llvm.loop !813

262:                                              ; preds = %25
  %.lcssa7 = phi i64 [ %15, %25 ]
  %263 = trunc i64 %.lcssa7 to i32
  %264 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %265 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %264, ptr noundef nonnull @.str.4.607, ptr noundef nonnull %2) #43
  %266 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %267 = call i64 @fwrite(ptr nonnull @.str.5.608, i64 14, i64 1, ptr %266)
  %268 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %269 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %268, ptr noundef nonnull @.str.6.609, i32 noundef %263) #43
  call void @exit(i32 noundef 0) #49
  unreachable

270:                                              ; preds = %14
  %.lcssa6 = phi i64 [ %15, %14 ]
  %271 = trunc i64 %.lcssa6 to i32
  store i32 %271, ptr @numberCells, align 4, !tbaa !17
  %272 = load i32, ptr @bbb, align 4, !tbaa !17
  %273 = add nsw i32 %272, -1
  store i32 %273, ptr @bbb, align 4, !tbaa !17
  %274 = load i32, ptr @bbt, align 4, !tbaa !17
  %275 = add nsw i32 %274, 1
  store i32 %275, ptr @bbt, align 4, !tbaa !17
  %276 = load i32, ptr @bbl, align 4, !tbaa !17
  %277 = add nsw i32 %276, -1
  store i32 %277, ptr @bbl, align 4, !tbaa !17
  %278 = load i32, ptr @bbr, align 4, !tbaa !17
  %279 = add nsw i32 %278, 1
  store i32 %279, ptr @bbr, align 4, !tbaa !17
  %280 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %281 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %282 = mul nsw i32 %281, 3
  %283 = add nsw i32 %282, 5
  %284 = sext i32 %283 to i64
  %285 = mul nsw i64 %284, 40
  %286 = call ptr @realloc(ptr noundef %280, i64 noundef %285) #46
  store ptr %286, ptr @edgeList, align 8, !tbaa !7
  %287 = load i32, ptr @bbb, align 4, !tbaa !17
  %288 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %289 = add nsw i32 %288, 1
  %290 = sext i32 %289 to i64
  %291 = getelementptr inbounds %struct.edgebox, ptr %286, i64 %290, i32 1
  store i32 %287, ptr %291, align 4, !tbaa !143
  %292 = load i32, ptr @bbt, align 4, !tbaa !17
  %293 = getelementptr inbounds %struct.edgebox, ptr %286, i64 %290, i32 2
  store i32 %292, ptr %293, align 4, !tbaa !144
  %294 = load i32, ptr @bbl, align 4, !tbaa !17
  %295 = getelementptr inbounds %struct.edgebox, ptr %286, i64 %290, i32 3
  store i32 %294, ptr %295, align 4, !tbaa !140
  %296 = sub nsw i32 %292, %287
  %297 = getelementptr inbounds %struct.edgebox, ptr %286, i64 %290, i32 4
  store i32 %296, ptr %297, align 4, !tbaa !501
  %298 = getelementptr inbounds %struct.edgebox, ptr %286, i64 %290, i32 6
  store i32 1, ptr %298, align 4, !tbaa !147
  %299 = getelementptr inbounds %struct.edgebox, ptr %286, i64 %290, i32 5
  store i32 -1, ptr %299, align 4, !tbaa !142
  %300 = add nsw i32 %288, 2
  %301 = getelementptr inbounds %struct.edgebox, ptr %286, i64 %290, i32 7
  store i32 %300, ptr %301, align 4, !tbaa !333
  %302 = add nsw i32 %288, 4
  %303 = getelementptr inbounds %struct.edgebox, ptr %286, i64 %290, i32 8
  store i32 %302, ptr %303, align 4, !tbaa !332
  %304 = getelementptr inbounds %struct.edgebox, ptr %286, i64 %290
  store i32 -1, ptr %304, align 4, !tbaa !148
  %305 = sext i32 %300 to i64
  %306 = getelementptr inbounds %struct.edgebox, ptr %286, i64 %305, i32 1
  store i32 %294, ptr %306, align 4, !tbaa !143
  %307 = load i32, ptr @bbr, align 4, !tbaa !17
  %308 = getelementptr inbounds %struct.edgebox, ptr %286, i64 %305, i32 2
  store i32 %307, ptr %308, align 4, !tbaa !144
  %309 = getelementptr inbounds %struct.edgebox, ptr %286, i64 %305, i32 3
  store i32 %292, ptr %309, align 4, !tbaa !140
  %310 = sub nsw i32 %307, %294
  %311 = getelementptr inbounds %struct.edgebox, ptr %286, i64 %305, i32 4
  store i32 %310, ptr %311, align 4, !tbaa !501
  %312 = getelementptr inbounds %struct.edgebox, ptr %286, i64 %305, i32 6
  store i32 1, ptr %312, align 4, !tbaa !147
  %313 = getelementptr inbounds %struct.edgebox, ptr %286, i64 %305, i32 5
  store i32 -1, ptr %313, align 4, !tbaa !142
  %314 = add nsw i32 %288, 3
  %315 = getelementptr inbounds %struct.edgebox, ptr %286, i64 %305, i32 7
  store i32 %314, ptr %315, align 4, !tbaa !333
  %316 = getelementptr inbounds %struct.edgebox, ptr %286, i64 %305, i32 8
  store i32 %289, ptr %316, align 4, !tbaa !332
  %317 = getelementptr inbounds %struct.edgebox, ptr %286, i64 %305
  store i32 -1, ptr %317, align 4, !tbaa !148
  %318 = sext i32 %314 to i64
  %319 = getelementptr inbounds %struct.edgebox, ptr %286, i64 %318, i32 1
  store i32 %287, ptr %319, align 4, !tbaa !143
  %320 = getelementptr inbounds %struct.edgebox, ptr %286, i64 %318, i32 2
  store i32 %292, ptr %320, align 4, !tbaa !144
  %321 = getelementptr inbounds %struct.edgebox, ptr %286, i64 %318, i32 3
  store i32 %307, ptr %321, align 4, !tbaa !140
  %322 = getelementptr inbounds %struct.edgebox, ptr %286, i64 %318, i32 4
  store i32 %296, ptr %322, align 4, !tbaa !501
  %323 = getelementptr inbounds %struct.edgebox, ptr %286, i64 %318, i32 6
  store i32 1, ptr %323, align 4, !tbaa !147
  %324 = getelementptr inbounds %struct.edgebox, ptr %286, i64 %318, i32 5
  store i32 1, ptr %324, align 4, !tbaa !142
  %325 = getelementptr inbounds %struct.edgebox, ptr %286, i64 %318, i32 7
  store i32 %302, ptr %325, align 4, !tbaa !333
  %326 = getelementptr inbounds %struct.edgebox, ptr %286, i64 %318, i32 8
  store i32 %300, ptr %326, align 4, !tbaa !332
  %327 = getelementptr inbounds %struct.edgebox, ptr %286, i64 %318
  store i32 -1, ptr %327, align 4, !tbaa !148
  store i32 %302, ptr @edgeCount, align 4, !tbaa !17
  %328 = sext i32 %302 to i64
  %329 = getelementptr inbounds %struct.edgebox, ptr %286, i64 %328, i32 1
  store i32 %294, ptr %329, align 4, !tbaa !143
  %330 = getelementptr inbounds %struct.edgebox, ptr %286, i64 %328, i32 2
  store i32 %307, ptr %330, align 4, !tbaa !144
  %331 = getelementptr inbounds %struct.edgebox, ptr %286, i64 %328, i32 3
  store i32 %287, ptr %331, align 4, !tbaa !140
  %332 = getelementptr inbounds %struct.edgebox, ptr %286, i64 %328, i32 4
  store i32 %310, ptr %332, align 4, !tbaa !501
  %333 = getelementptr inbounds %struct.edgebox, ptr %286, i64 %328, i32 6
  store i32 1, ptr %333, align 4, !tbaa !147
  %334 = getelementptr inbounds %struct.edgebox, ptr %286, i64 %328, i32 5
  store i32 1, ptr %334, align 4, !tbaa !142
  %335 = getelementptr inbounds %struct.edgebox, ptr %286, i64 %328, i32 7
  store i32 %289, ptr %335, align 4, !tbaa !333
  %336 = getelementptr inbounds %struct.edgebox, ptr %286, i64 %328, i32 8
  store i32 %314, ptr %336, align 4, !tbaa !332
  %337 = getelementptr inbounds %struct.edgebox, ptr %286, i64 %328
  store i32 -1, ptr %337, align 4, !tbaa !148
  store i32 0, ptr @numProbes, align 4, !tbaa !17
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %3) #47
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %2) #47
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @readgraph(ptr noundef %0) #0 {
  %2 = alloca [32 x i8], align 16
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %2) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %3) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6) #47
  store i32 0, ptr @numnodes, align 4, !tbaa !17
  br label %7

7:                                                ; preds = %60, %1
  %8 = phi i32 [ 0, %1 ], [ %15, %60 ]
  %9 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.610, ptr noundef nonnull %2) #44
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %86

11:                                               ; preds = %7
  %12 = call i32 @bcmp(ptr noundef nonnull dereferenceable(5) %2, ptr noundef nonnull dereferenceable(5) @.str.1.611, i64 5)
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %77

14:                                               ; preds = %11
  %15 = add nuw nsw i32 %8, 1
  %16 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.2.612, ptr noundef nonnull %3, ptr noundef nonnull %4) #44
  %17 = icmp eq i32 %16, 2
  br i1 %17, label %25, label %18

18:                                               ; preds = %14
  %.lcssa7 = phi i32 [ %15, %14 ]
  %19 = load ptr, ptr @fpo, align 8, !tbaa !7
  %20 = call i64 @fwrite(ptr nonnull @.str.3.613, i64 32, i64 1, ptr %19)
  %21 = load ptr, ptr @fpo, align 8, !tbaa !7
  %22 = call i64 @fwrite(ptr nonnull @.str.4.614, i64 40, i64 1, ptr %21)
  %23 = load ptr, ptr @fpo, align 8, !tbaa !7
  %24 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %23, ptr noundef nonnull @.str.5.615, i32 noundef %.lcssa7) #43
  call void @exit(i32 noundef 0) #49
  unreachable

25:                                               ; preds = %14
  %26 = load i32, ptr %3, align 4, !tbaa !17
  %27 = load i32, ptr @numnodes, align 4, !tbaa !17
  %28 = icmp sgt i32 %26, %27
  br i1 %28, label %29, label %30

29:                                               ; preds = %25
  store i32 %26, ptr @numnodes, align 4, !tbaa !17
  br label %30

30:                                               ; preds = %29, %25
  %31 = phi i32 [ %26, %29 ], [ %27, %25 ]
  %32 = load i32, ptr %4, align 4, !tbaa !17
  %33 = icmp sgt i32 %32, %31
  br i1 %33, label %34, label %35

34:                                               ; preds = %30
  store i32 %32, ptr @numnodes, align 4, !tbaa !17
  br label %35

35:                                               ; preds = %34, %30
  %36 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.610, ptr noundef nonnull %2) #44
  %37 = call i32 @bcmp(ptr noundef nonnull dereferenceable(7) %2, ptr noundef nonnull dereferenceable(7) @.str.6.616, i64 7)
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %49

39:                                               ; preds = %35
  %40 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.7.617, ptr noundef nonnull %5) #44
  %41 = icmp eq i32 %40, 1
  br i1 %41, label %56, label %42

42:                                               ; preds = %39
  %.lcssa9 = phi i32 [ %15, %39 ]
  %43 = load ptr, ptr @fpo, align 8, !tbaa !7
  %44 = call i64 @fwrite(ptr nonnull @.str.8.618, i64 23, i64 1, ptr %43)
  %45 = load ptr, ptr @fpo, align 8, !tbaa !7
  %46 = call i64 @fwrite(ptr nonnull @.str.9.619, i64 17, i64 1, ptr %45)
  %47 = load ptr, ptr @fpo, align 8, !tbaa !7
  %48 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %47, ptr noundef nonnull @.str.5.615, i32 noundef %.lcssa9) #43
  call void @exit(i32 noundef 0) #49
  unreachable

49:                                               ; preds = %35
  %.lcssa8 = phi i32 [ %15, %35 ]
  %50 = load ptr, ptr @fpo, align 8, !tbaa !7
  %51 = call i64 @fwrite(ptr nonnull @.str.10.620, i64 31, i64 1, ptr %50)
  %52 = load ptr, ptr @fpo, align 8, !tbaa !7
  %53 = call i64 @fwrite(ptr nonnull @.str.11.621, i64 12, i64 1, ptr %52)
  %54 = load ptr, ptr @fpo, align 8, !tbaa !7
  %55 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %54, ptr noundef nonnull @.str.5.615, i32 noundef %.lcssa8) #43
  call void @exit(i32 noundef 0) #49
  unreachable

56:                                               ; preds = %39
  %57 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.610, ptr noundef nonnull %2) #44
  %58 = call i32 @bcmp(ptr noundef nonnull dereferenceable(9) %2, ptr noundef nonnull dereferenceable(9) @.str.12.622, i64 9)
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %70

60:                                               ; preds = %56
  %61 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.7.617, ptr noundef nonnull %6) #44
  %62 = icmp eq i32 %61, 1
  br i1 %62, label %7, label %63, !llvm.loop !814

63:                                               ; preds = %60
  %.lcssa11 = phi i32 [ %15, %60 ]
  %64 = load ptr, ptr @fpo, align 8, !tbaa !7
  %65 = call i64 @fwrite(ptr nonnull @.str.13.623, i64 25, i64 1, ptr %64)
  %66 = load ptr, ptr @fpo, align 8, !tbaa !7
  %67 = call i64 @fwrite(ptr nonnull @.str.9.619, i64 17, i64 1, ptr %66)
  %68 = load ptr, ptr @fpo, align 8, !tbaa !7
  %69 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %68, ptr noundef nonnull @.str.5.615, i32 noundef %.lcssa11) #43
  call void @exit(i32 noundef 0) #49
  unreachable

70:                                               ; preds = %56
  %.lcssa10 = phi i32 [ %15, %56 ]
  %71 = load ptr, ptr @fpo, align 8, !tbaa !7
  %72 = call i64 @fwrite(ptr nonnull @.str.14.624, i64 33, i64 1, ptr %71)
  %73 = load ptr, ptr @fpo, align 8, !tbaa !7
  %74 = call i64 @fwrite(ptr nonnull @.str.11.621, i64 12, i64 1, ptr %73)
  %75 = load ptr, ptr @fpo, align 8, !tbaa !7
  %76 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %75, ptr noundef nonnull @.str.5.615, i32 noundef %.lcssa10) #43
  call void @exit(i32 noundef 0) #49
  unreachable

77:                                               ; preds = %11
  %.lcssa1 = phi i32 [ %8, %11 ]
  %78 = load ptr, ptr @fpo, align 8, !tbaa !7
  %79 = call i64 @fwrite(ptr nonnull @.str.15.625, i64 37, i64 1, ptr %78)
  %80 = load ptr, ptr @fpo, align 8, !tbaa !7
  %81 = call i64 @fwrite(ptr nonnull @.str.16.626, i64 39, i64 1, ptr %80)
  %82 = load ptr, ptr @fpo, align 8, !tbaa !7
  %83 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %82, ptr noundef nonnull @.str.17.627, ptr noundef nonnull %2) #43
  %84 = load ptr, ptr @fpo, align 8, !tbaa !7
  %85 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %84, ptr noundef nonnull @.str.5.615, i32 noundef %.lcssa1) #43
  call void @exit(i32 noundef 0) #49
  unreachable

86:                                               ; preds = %7
  call void @rewind(ptr noundef %0) #43
  %87 = load i32, ptr @numnodes, align 4, !tbaa !17
  %88 = add i32 %87, 1
  %89 = sext i32 %88 to i64
  %90 = shl nsw i64 %89, 3
  %91 = call noalias ptr @malloc(i64 noundef %90) #45
  store ptr %91, ptr @gnodeArray, align 8, !tbaa !7
  %92 = icmp slt i32 %87, 1
  br i1 %92, label %101, label %93

93:                                               ; preds = %86
  %94 = zext i32 %88 to i64
  br label %95

95:                                               ; preds = %95, %93
  %96 = phi i64 [ 1, %93 ], [ %99, %95 ]
  %97 = load ptr, ptr @gnodeArray, align 8, !tbaa !7
  %98 = getelementptr inbounds ptr, ptr %97, i64 %96
  store ptr null, ptr %98, align 8, !tbaa !7
  %99 = add nuw nsw i64 %96, 1
  %100 = icmp eq i64 %99, %94
  br i1 %100, label %101, label %95, !llvm.loop !815

101:                                              ; preds = %95, %86
  br label %102

102:                                              ; preds = %160, %101
  %103 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.610, ptr noundef nonnull %2) #44
  %104 = icmp eq i32 %103, 1
  br i1 %104, label %105, label %161

105:                                              ; preds = %102
  %106 = call i32 @bcmp(ptr noundef nonnull dereferenceable(5) %2, ptr noundef nonnull dereferenceable(5) @.str.1.611, i64 5)
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %108, label %160

108:                                              ; preds = %105
  %109 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.2.612, ptr noundef nonnull %3, ptr noundef nonnull %4) #44
  %110 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.610, ptr noundef nonnull %2) #44
  %111 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.7.617, ptr noundef nonnull %5) #44
  %112 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.610, ptr noundef nonnull %2) #44
  %113 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.7.617, ptr noundef nonnull %6) #44
  %114 = load ptr, ptr @gnodeArray, align 8, !tbaa !7
  %115 = load i32, ptr %3, align 4, !tbaa !17
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds ptr, ptr %114, i64 %116
  %118 = load ptr, ptr %117, align 8, !tbaa !7
  %119 = call noalias dereferenceable_or_null(40) ptr @malloc(i64 noundef 40) #45
  store ptr %119, ptr %117, align 8, !tbaa !7
  %120 = load ptr, ptr @gnodeArray, align 8, !tbaa !7
  %121 = getelementptr inbounds ptr, ptr %120, i64 %116
  %122 = load ptr, ptr %121, align 8, !tbaa !7
  %123 = getelementptr inbounds %struct.clbox, ptr %122, i64 0, i32 7
  store ptr %118, ptr %123, align 8, !tbaa !483
  %124 = load i32, ptr %4, align 4, !tbaa !17
  %125 = load ptr, ptr %121, align 8, !tbaa !7
  store i32 %124, ptr %125, align 8, !tbaa !481
  %126 = load i32, ptr %5, align 4, !tbaa !17
  %127 = load i32, ptr %3, align 4, !tbaa !17
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds ptr, ptr %120, i64 %128
  %130 = load ptr, ptr %129, align 8, !tbaa !7
  %131 = getelementptr inbounds %struct.clbox, ptr %130, i64 0, i32 2
  store i32 %126, ptr %131, align 8, !tbaa !485
  %132 = getelementptr inbounds %struct.clbox, ptr %130, i64 0, i32 1
  store i32 %126, ptr %132, align 4, !tbaa !484
  %133 = getelementptr inbounds %struct.clbox, ptr %130, i64 0, i32 3
  store i32 %126, ptr %133, align 4, !tbaa !486
  %134 = load i32, ptr %6, align 4, !tbaa !17
  %135 = getelementptr inbounds %struct.clbox, ptr %130, i64 0, i32 4
  store i32 %134, ptr %135, align 8, !tbaa !525
  %136 = getelementptr inbounds %struct.clbox, ptr %130, i64 0, i32 5
  store i32 0, ptr %136, align 4, !tbaa !535
  %137 = getelementptr inbounds %struct.clbox, ptr %130, i64 0, i32 6
  store i32 0, ptr %137, align 8, !tbaa !536
  %138 = load i32, ptr %4, align 4, !tbaa !17
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds ptr, ptr %120, i64 %139
  %141 = load ptr, ptr %140, align 8, !tbaa !7
  %142 = call noalias dereferenceable_or_null(40) ptr @malloc(i64 noundef 40) #45
  store ptr %142, ptr %140, align 8, !tbaa !7
  %143 = load ptr, ptr @gnodeArray, align 8, !tbaa !7
  %144 = getelementptr inbounds ptr, ptr %143, i64 %139
  %145 = load ptr, ptr %144, align 8, !tbaa !7
  %146 = getelementptr inbounds %struct.clbox, ptr %145, i64 0, i32 7
  store ptr %141, ptr %146, align 8, !tbaa !483
  %147 = load ptr, ptr %144, align 8, !tbaa !7
  store i32 %127, ptr %147, align 8, !tbaa !481
  %148 = load i32, ptr %5, align 4, !tbaa !17
  %149 = load i32, ptr %4, align 4, !tbaa !17
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds ptr, ptr %143, i64 %150
  %152 = load ptr, ptr %151, align 8, !tbaa !7
  %153 = getelementptr inbounds %struct.clbox, ptr %152, i64 0, i32 2
  store i32 %148, ptr %153, align 8, !tbaa !485
  %154 = getelementptr inbounds %struct.clbox, ptr %152, i64 0, i32 1
  store i32 %148, ptr %154, align 4, !tbaa !484
  %155 = getelementptr inbounds %struct.clbox, ptr %152, i64 0, i32 3
  store i32 %148, ptr %155, align 4, !tbaa !486
  %156 = load i32, ptr %6, align 4, !tbaa !17
  %157 = getelementptr inbounds %struct.clbox, ptr %152, i64 0, i32 4
  store i32 %156, ptr %157, align 8, !tbaa !525
  %158 = getelementptr inbounds %struct.clbox, ptr %152, i64 0, i32 5
  store i32 0, ptr %158, align 4, !tbaa !535
  %159 = getelementptr inbounds %struct.clbox, ptr %152, i64 0, i32 6
  store i32 0, ptr %159, align 8, !tbaa !536
  br label %160

160:                                              ; preds = %108, %105
  br label %102, !llvm.loop !816

161:                                              ; preds = %102
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %3) #47
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %2) #47
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @readnets(ptr noundef %0) #0 {
  %2 = alloca double, align 8
  %3 = alloca double, align 8
  %4 = alloca [1024 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #47
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #47
  call void @llvm.lifetime.start.p0(i64 1024, ptr nonnull %4) #47
  %5 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.630, ptr noundef nonnull %4) #44
  %6 = load i64, ptr %4, align 16
  %7 = icmp eq i64 %6, 32497601314843745
  br i1 %7, label %13, label %8

8:                                                ; preds = %1
  %9 = load ptr, ptr @fpo, align 8, !tbaa !7
  %10 = call i64 @fwrite(ptr nonnull @.str.2.631, i64 24, i64 1, ptr %9)
  %11 = load ptr, ptr @fpo, align 8, !tbaa !7
  %12 = call i64 @fwrite(ptr nonnull @.str.3.632, i64 38, i64 1, ptr %11)
  call void @exit(i32 noundef 0) #49
  unreachable

13:                                               ; preds = %1
  %14 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.630, ptr noundef nonnull %4) #44
  %15 = call i32 @bcmp(ptr noundef nonnull dereferenceable(10) %4, ptr noundef nonnull dereferenceable(10) @.str.4.633, i64 10)
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %22, label %17

17:                                               ; preds = %13
  %18 = load ptr, ptr @fpo, align 8, !tbaa !7
  %19 = call i64 @fwrite(ptr nonnull @.str.5.634, i64 26, i64 1, ptr %18)
  %20 = load ptr, ptr @fpo, align 8, !tbaa !7
  %21 = call i64 @fwrite(ptr nonnull @.str.3.632, i64 38, i64 1, ptr %20)
  call void @exit(i32 noundef 0) #49
  unreachable

22:                                               ; preds = %13
  %23 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.6.635, ptr noundef nonnull %2, ptr noundef nonnull %3) #44
  %24 = icmp eq i32 %23, 2
  br i1 %24, label %25, label %34

25:                                               ; preds = %22
  %26 = load i32, ptr @numnets, align 4, !tbaa !17
  %27 = icmp slt i32 %26, 1
  %28 = load double, ptr %2, align 8, !tbaa !36
  %29 = load double, ptr %3, align 8, !tbaa !36
  br i1 %27, label %47, label %30

30:                                               ; preds = %25
  %31 = load ptr, ptr @netarray, align 8, !tbaa !7
  %32 = add nuw i32 %26, 1
  %33 = zext i32 %32 to i64
  br label %39

34:                                               ; preds = %22
  %35 = load ptr, ptr @fpo, align 8, !tbaa !7
  %36 = call i64 @fwrite(ptr nonnull @.str.7.636, i64 33, i64 1, ptr %35)
  %37 = load ptr, ptr @fpo, align 8, !tbaa !7
  %38 = call i64 @fwrite(ptr nonnull @.str.3.632, i64 38, i64 1, ptr %37)
  call void @exit(i32 noundef 0) #49
  unreachable

39:                                               ; preds = %39, %30
  %40 = phi i64 [ 1, %30 ], [ %45, %39 ]
  %41 = getelementptr inbounds ptr, ptr %31, i64 %40
  %42 = load ptr, ptr %41, align 8, !tbaa !7
  %43 = getelementptr inbounds %struct.dimbox, ptr %42, i64 0, i32 11
  store double %28, ptr %43, align 8, !tbaa !40
  %44 = getelementptr inbounds %struct.dimbox, ptr %42, i64 0, i32 12
  store double %29, ptr %44, align 8, !tbaa !41
  %45 = add nuw nsw i64 %40, 1
  %46 = icmp eq i64 %45, %33
  br i1 %46, label %47, label %39, !llvm.loop !817

47:                                               ; preds = %39, %25
  store double %28, ptr @Hdefault, align 8, !tbaa !36
  store double %29, ptr @Vdefault, align 8, !tbaa !36
  br label %48

48:                                               ; preds = %79, %47
  %49 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.630, ptr noundef nonnull %4) #44
  %50 = icmp eq i32 %49, 1
  br i1 %50, label %51, label %98

51:                                               ; preds = %48
  %52 = load i32, ptr %4, align 16
  %53 = icmp eq i32 %52, 7628142
  br i1 %53, label %54, label %95

54:                                               ; preds = %51
  %55 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.630, ptr noundef nonnull %4) #44
  %56 = call i32 @hashfind(ptr noundef nonnull %4) #44
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %65

58:                                               ; preds = %54
  %59 = load ptr, ptr @fpo, align 8, !tbaa !7
  %60 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %59, ptr noundef nonnull @.str.9.641, ptr noundef nonnull %4) #43
  %61 = load ptr, ptr @fpo, align 8, !tbaa !7
  %62 = call i64 @fwrite(ptr nonnull @.str.10.642, i64 34, i64 1, ptr %61)
  %63 = load ptr, ptr @fpo, align 8, !tbaa !7
  %64 = call i64 @fwrite(ptr nonnull @.str.11.643, i64 30, i64 1, ptr %63)
  call void @exit(i32 noundef 0) #49
  unreachable

65:                                               ; preds = %54
  %66 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.630, ptr noundef nonnull %4) #44
  %67 = call i32 @bcmp(ptr noundef nonnull dereferenceable(10) %4, ptr noundef nonnull dereferenceable(10) @.str.4.633, i64 10)
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %88

69:                                               ; preds = %65
  %70 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.6.635, ptr noundef nonnull %2, ptr noundef nonnull %3) #44
  %71 = icmp eq i32 %70, 2
  br i1 %71, label %79, label %72

72:                                               ; preds = %69
  %73 = load ptr, ptr @fpo, align 8, !tbaa !7
  %74 = call i64 @fwrite(ptr nonnull @.str.12.644, i64 30, i64 1, ptr %73)
  %75 = load ptr, ptr @fpo, align 8, !tbaa !7
  %76 = call i64 @fwrite(ptr nonnull @.str.13.645, i64 21, i64 1, ptr %75)
  %77 = load ptr, ptr @fpo, align 8, !tbaa !7
  %78 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %77, ptr noundef nonnull @.str.14.646, ptr noundef nonnull %4) #43
  call void @exit(i32 noundef 0) #49
  unreachable

79:                                               ; preds = %69
  %80 = load double, ptr %2, align 8, !tbaa !36
  %81 = load ptr, ptr @netarray, align 8, !tbaa !7
  %82 = sext i32 %56 to i64
  %83 = getelementptr inbounds ptr, ptr %81, i64 %82
  %84 = load ptr, ptr %83, align 8, !tbaa !7
  %85 = getelementptr inbounds %struct.dimbox, ptr %84, i64 0, i32 11
  store double %80, ptr %85, align 8, !tbaa !40
  %86 = load double, ptr %3, align 8, !tbaa !36
  %87 = getelementptr inbounds %struct.dimbox, ptr %84, i64 0, i32 12
  store double %86, ptr %87, align 8, !tbaa !41
  br label %48, !llvm.loop !818

88:                                               ; preds = %65
  %89 = load ptr, ptr @fpo, align 8, !tbaa !7
  %90 = call i64 @fwrite(ptr nonnull @.str.15.647, i64 34, i64 1, ptr %89)
  %91 = load ptr, ptr @fpo, align 8, !tbaa !7
  %92 = call i64 @fwrite(ptr nonnull @.str.16.648, i64 32, i64 1, ptr %91)
  %93 = load ptr, ptr @fpo, align 8, !tbaa !7
  %94 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %93, ptr noundef nonnull @.str.14.646, ptr noundef nonnull %4) #43
  call void @exit(i32 noundef 0) #49
  unreachable

95:                                               ; preds = %51
  %96 = load ptr, ptr @fpo, align 8, !tbaa !7
  %97 = call i64 @fwrite(ptr nonnull @.str.17.649, i64 36, i64 1, ptr %96)
  call void @exit(i32 noundef 0) #49
  unreachable

98:                                               ; preds = %48
  call void @llvm.lifetime.end.p0(i64 1024, ptr nonnull %4) #47
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #47
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #47
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @readpar() #0 {
  %1 = alloca [1024 x i8], align 16
  %2 = alloca [1024 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 1024, ptr nonnull %1) #47
  call void @llvm.lifetime.start.p0(i64 1024, ptr nonnull %2) #47
  store i32 0, ptr @wireEstimateOnly, align 4, !tbaa !17
  store i32 -1, ptr @attpercell, align 4, !tbaa !17
  store double 1.000000e+00, ptr @lapFactor, align 8, !tbaa !36
  store i32 0, ptr @cost_only, align 4, !tbaa !17
  store i32 2, ptr @maxWeight, align 4, !tbaa !17
  store i32 1, ptr @baseWeight, align 4, !tbaa !17
  store double -1.000000e+00, ptr @chipaspect, align 8, !tbaa !36
  store i32 -1, ptr @pinSpacing, align 4, !tbaa !17
  store i32 -1, ptr @trackspacing, align 4, !tbaa !17
  store i32 0, ptr @doPlacement, align 4, !tbaa !17
  store i32 0, ptr @doChannelGraph, align 4, !tbaa !17
  store i32 0, ptr @doGlobalRoute, align 4, !tbaa !17
  store i32 0, ptr @doCompaction, align 4, !tbaa !17
  store i32 0, ptr @coreGiven, align 4, !tbaa !17
  store i32 -1000000, ptr @gOffsetX, align 4, !tbaa !17
  store i32 -1000000, ptr @gOffsetY, align 4, !tbaa !17
  store i32 -1000000, ptr @gridX, align 4, !tbaa !17
  store i32 -1000000, ptr @gridY, align 4, !tbaa !17
  store i32 -1, ptr @defaultTracks, align 4, !tbaa !17
  store i32 -1, ptr @routerMaxPaths, align 4, !tbaa !17
  store i32 -1, ptr @routerExtraS, align 4, !tbaa !17
  store i32 0, ptr @core_expansion_given, align 4, !tbaa !17
  store double -1.000000e+00, ptr @spot_control, align 8, !tbaa !36
  %3 = load ptr, ptr @cktName, align 8, !tbaa !7
  %4 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %2, ptr noundef nonnull dereferenceable(1) @.str.658, ptr noundef %3) #44
  %5 = call noalias ptr @fopen(ptr noundef nonnull %2, ptr noundef nonnull @.str.1.659) #43
  %6 = icmp eq ptr %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %0
  %8 = load ptr, ptr @fpo, align 8, !tbaa !7
  %9 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %8, ptr noundef nonnull @.str.2.660, ptr noundef nonnull %2) #43
  call void @exit(i32 noundef 0) #49
  unreachable

10:                                               ; preds = %30, %0
  %11 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef nonnull %5, ptr noundef nonnull @.str.3.661, ptr noundef nonnull %1) #44
  %12 = icmp eq i32 %11, 1
  br i1 %12, label %13, label %239

13:                                               ; preds = %10
  %14 = call i32 @bcmp(ptr noundef nonnull dereferenceable(9) %1, ptr noundef nonnull dereferenceable(9) @.str.4.662, i64 9)
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %24

16:                                               ; preds = %13
  %17 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef nonnull %5, ptr noundef nonnull @.str.5.663, ptr noundef nonnull @T) #44
  %18 = icmp eq i32 %17, 1
  br i1 %18, label %30, label %19

19:                                               ; preds = %16
  %20 = load ptr, ptr @fpo, align 8, !tbaa !7
  %21 = call i64 @fwrite(ptr nonnull @.str.6.664, i64 38, i64 1, ptr %20)
  %22 = load ptr, ptr @fpo, align 8, !tbaa !7
  %23 = call i64 @fwrite(ptr nonnull @.str.7.665, i64 25, i64 1, ptr %22)
  call void @exit(i32 noundef 0) #49
  unreachable

24:                                               ; preds = %13
  %25 = call i32 @bcmp(ptr noundef nonnull dereferenceable(13) %1, ptr noundef nonnull dereferenceable(13) @.str.8.666, i64 13)
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %36

27:                                               ; preds = %24
  %28 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef nonnull %5, ptr noundef nonnull @.str.5.663, ptr noundef nonnull @spot_control) #44
  %29 = icmp eq i32 %28, 1
  br i1 %29, label %30, label %31

30:                                               ; preds = %228, %217, %206, %195, %191, %172, %168, %164, %160, %156, %145, %134, %123, %112, %101, %96, %77, %66, %62, %51, %47, %27, %16
  br label %10, !llvm.loop !819

31:                                               ; preds = %27
  %32 = load ptr, ptr @fpo, align 8, !tbaa !7
  %33 = call i64 @fwrite(ptr nonnull @.str.9.667, i64 42, i64 1, ptr %32)
  %34 = load ptr, ptr @fpo, align 8, !tbaa !7
  %35 = call i64 @fwrite(ptr nonnull @.str.7.665, i64 25, i64 1, ptr %34)
  call void @exit(i32 noundef 0) #49
  unreachable

36:                                               ; preds = %24
  %37 = call i32 @bcmp(ptr noundef nonnull dereferenceable(15) %1, ptr noundef nonnull dereferenceable(15) @.str.10.668, i64 15)
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %48

39:                                               ; preds = %36
  %40 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef nonnull %5, ptr noundef nonnull @.str.5.663, ptr noundef nonnull @core_expansion) #44
  %41 = icmp eq i32 %40, 1
  br i1 %41, label %47, label %42

42:                                               ; preds = %39
  %43 = load ptr, ptr @fpo, align 8, !tbaa !7
  %44 = call i64 @fwrite(ptr nonnull @.str.11.671, i64 44, i64 1, ptr %43)
  %45 = load ptr, ptr @fpo, align 8, !tbaa !7
  %46 = call i64 @fwrite(ptr nonnull @.str.7.665, i64 25, i64 1, ptr %45)
  call void @exit(i32 noundef 0) #49
  unreachable

47:                                               ; preds = %39
  store i32 1, ptr @core_expansion_given, align 4, !tbaa !17
  br label %30

48:                                               ; preds = %36
  %49 = call i32 @bcmp(ptr noundef nonnull dereferenceable(23) %1, ptr noundef nonnull dereferenceable(23) @.str.12.672, i64 23)
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %59

51:                                               ; preds = %48
  %52 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef nonnull %5, ptr noundef nonnull @.str.13.673, ptr noundef nonnull @wire_est_factor) #44
  %53 = icmp eq i32 %52, 1
  br i1 %53, label %30, label %54

54:                                               ; preds = %51
  %55 = load ptr, ptr @fpo, align 8, !tbaa !7
  %56 = call i64 @fwrite(ptr nonnull @.str.14.676, i64 44, i64 1, ptr %55)
  %57 = load ptr, ptr @fpo, align 8, !tbaa !7
  %58 = call i64 @fwrite(ptr nonnull @.str.15.677, i64 34, i64 1, ptr %57)
  call void @exit(i32 noundef 0) #49
  unreachable

59:                                               ; preds = %48
  %60 = call i32 @bcmp(ptr noundef nonnull dereferenceable(10) %1, ptr noundef nonnull dereferenceable(10) @.str.16.678, i64 10)
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %63

62:                                               ; preds = %59
  store i32 1, ptr @cost_only, align 4, !tbaa !17
  br label %30

63:                                               ; preds = %59
  %64 = call i32 @bcmp(ptr noundef nonnull dereferenceable(12) %1, ptr noundef nonnull dereferenceable(12) @.str.17.679, i64 12)
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %74

66:                                               ; preds = %63
  %67 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef nonnull %5, ptr noundef nonnull @.str.13.673, ptr noundef nonnull @randVar) #44
  %68 = icmp eq i32 %67, 1
  br i1 %68, label %30, label %69

69:                                               ; preds = %66
  %70 = load ptr, ptr @fpo, align 8, !tbaa !7
  %71 = call i64 @fwrite(ptr nonnull @.str.18.680, i64 41, i64 1, ptr %70)
  %72 = load ptr, ptr @fpo, align 8, !tbaa !7
  %73 = call i64 @fwrite(ptr nonnull @.str.7.665, i64 25, i64 1, ptr %72)
  call void @exit(i32 noundef 0) #49
  unreachable

74:                                               ; preds = %63
  %75 = call i32 @bcmp(ptr noundef nonnull dereferenceable(13) %1, ptr noundef nonnull dereferenceable(13) @.str.19.681, i64 13)
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %85

77:                                               ; preds = %74
  %78 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef nonnull %5, ptr noundef nonnull @.str.13.673, ptr noundef nonnull @attpercell) #44
  %79 = icmp eq i32 %78, 1
  br i1 %79, label %30, label %80

80:                                               ; preds = %77
  %81 = load ptr, ptr @fpo, align 8, !tbaa !7
  %82 = call i64 @fwrite(ptr nonnull @.str.20.682, i64 42, i64 1, ptr %81)
  %83 = load ptr, ptr @fpo, align 8, !tbaa !7
  %84 = call i64 @fwrite(ptr nonnull @.str.7.665, i64 25, i64 1, ptr %83)
  call void @exit(i32 noundef 0) #49
  unreachable

85:                                               ; preds = %74
  %86 = call i32 @bcmp(ptr noundef nonnull dereferenceable(14) %1, ptr noundef nonnull dereferenceable(14) @.str.21.683, i64 14)
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %98

88:                                               ; preds = %85
  %89 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef nonnull %5, ptr noundef nonnull @.str.13.673, ptr noundef nonnull @trackspacing) #44
  %90 = icmp eq i32 %89, 1
  br i1 %90, label %96, label %91

91:                                               ; preds = %88
  %92 = load ptr, ptr @fpo, align 8, !tbaa !7
  %93 = call i64 @fwrite(ptr nonnull @.str.22.684, i64 44, i64 1, ptr %92)
  %94 = load ptr, ptr @fpo, align 8, !tbaa !7
  %95 = call i64 @fwrite(ptr nonnull @.str.7.665, i64 25, i64 1, ptr %94)
  call void @exit(i32 noundef 0) #49
  unreachable

96:                                               ; preds = %88
  %97 = load i32, ptr @trackspacing, align 4, !tbaa !17
  store i32 %97, ptr @pitch, align 4, !tbaa !17
  br label %30

98:                                               ; preds = %85
  %99 = call i32 @bcmp(ptr noundef nonnull dereferenceable(12) %1, ptr noundef nonnull dereferenceable(12) @.str.23.685, i64 12)
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %109

101:                                              ; preds = %98
  %102 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef nonnull %5, ptr noundef nonnull @.str.13.673, ptr noundef nonnull @pinSpacing) #44
  %103 = icmp eq i32 %102, 1
  br i1 %103, label %30, label %104

104:                                              ; preds = %101
  %105 = load ptr, ptr @fpo, align 8, !tbaa !7
  %106 = call i64 @fwrite(ptr nonnull @.str.24.686, i64 42, i64 1, ptr %105)
  %107 = load ptr, ptr @fpo, align 8, !tbaa !7
  %108 = call i64 @fwrite(ptr nonnull @.str.7.665, i64 25, i64 1, ptr %107)
  call void @exit(i32 noundef 0) #49
  unreachable

109:                                              ; preds = %98
  %110 = call i32 @bcmp(ptr noundef nonnull dereferenceable(18) %1, ptr noundef nonnull dereferenceable(18) @.str.25.687, i64 18)
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %120

112:                                              ; preds = %109
  %113 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef nonnull %5, ptr noundef nonnull @.str.5.663, ptr noundef nonnull @chipaspect) #44
  %114 = icmp eq i32 %113, 1
  br i1 %114, label %30, label %115

115:                                              ; preds = %112
  %116 = load ptr, ptr @fpo, align 8, !tbaa !7
  %117 = call i64 @fwrite(ptr nonnull @.str.26.688, i64 39, i64 1, ptr %116)
  %118 = load ptr, ptr @fpo, align 8, !tbaa !7
  %119 = call i64 @fwrite(ptr nonnull @.str.27.689, i64 35, i64 1, ptr %118)
  call void @exit(i32 noundef 0) #49
  unreachable

120:                                              ; preds = %109
  %121 = call i32 @bcmp(ptr noundef nonnull dereferenceable(17) %1, ptr noundef nonnull dereferenceable(17) @.str.28.690, i64 17)
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %123, label %131

123:                                              ; preds = %120
  %124 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef nonnull %5, ptr noundef nonnull @.str.13.673, ptr noundef nonnull @routerMaxPaths) #44
  %125 = icmp eq i32 %124, 1
  br i1 %125, label %30, label %126

126:                                              ; preds = %123
  %127 = load ptr, ptr @fpo, align 8, !tbaa !7
  %128 = call i64 @fwrite(ptr nonnull @.str.29.691, i64 34, i64 1, ptr %127)
  %129 = load ptr, ptr @fpo, align 8, !tbaa !7
  %130 = call i64 @fwrite(ptr nonnull @.str.30.692, i64 39, i64 1, ptr %129)
  call void @exit(i32 noundef 0) #49
  unreachable

131:                                              ; preds = %120
  %132 = call i32 @bcmp(ptr noundef nonnull dereferenceable(21) %1, ptr noundef nonnull dereferenceable(21) @.str.31.693, i64 21)
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %134, label %142

134:                                              ; preds = %131
  %135 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef nonnull %5, ptr noundef nonnull @.str.13.673, ptr noundef nonnull @routerExtraS) #44
  %136 = icmp eq i32 %135, 1
  br i1 %136, label %30, label %137

137:                                              ; preds = %134
  %138 = load ptr, ptr @fpo, align 8, !tbaa !7
  %139 = call i64 @fwrite(ptr nonnull @.str.32.694, i64 38, i64 1, ptr %138)
  %140 = load ptr, ptr @fpo, align 8, !tbaa !7
  %141 = call i64 @fwrite(ptr nonnull @.str.30.692, i64 39, i64 1, ptr %140)
  call void @exit(i32 noundef 0) #49
  unreachable

142:                                              ; preds = %131
  %143 = call i32 @bcmp(ptr noundef nonnull dereferenceable(27) %1, ptr noundef nonnull dereferenceable(27) @.str.33.695, i64 27)
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %145, label %153

145:                                              ; preds = %142
  %146 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef nonnull %5, ptr noundef nonnull @.str.13.673, ptr noundef nonnull @defaultTracks) #44
  %147 = icmp eq i32 %146, 1
  br i1 %147, label %30, label %148

148:                                              ; preds = %145
  %149 = load ptr, ptr @fpo, align 8, !tbaa !7
  %150 = call i64 @fwrite(ptr nonnull @.str.34.696, i64 44, i64 1, ptr %149)
  %151 = load ptr, ptr @fpo, align 8, !tbaa !7
  %152 = call i64 @fwrite(ptr nonnull @.str.30.692, i64 39, i64 1, ptr %151)
  call void @exit(i32 noundef 0) #49
  unreachable

153:                                              ; preds = %142
  %154 = call i32 @bcmp(ptr noundef nonnull dereferenceable(21) %1, ptr noundef nonnull dereferenceable(21) @.str.35.697, i64 21)
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %156, label %157

156:                                              ; preds = %153
  store i32 1, ptr @wireEstimateOnly, align 4, !tbaa !17
  br label %30

157:                                              ; preds = %153
  %158 = call i32 @bcmp(ptr noundef nonnull dereferenceable(13) %1, ptr noundef nonnull dereferenceable(13) @.str.36.698, i64 13)
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %160, label %161

160:                                              ; preds = %157
  store i32 1, ptr @doPlacement, align 4, !tbaa !17
  br label %30

161:                                              ; preds = %157
  %162 = call i32 @bcmp(ptr noundef nonnull dereferenceable(17) %1, ptr noundef nonnull dereferenceable(17) @.str.37.699, i64 17)
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %164, label %165

164:                                              ; preds = %161
  store i32 1, ptr @doChannelGraph, align 4, !tbaa !17
  br label %30

165:                                              ; preds = %161
  %166 = call i32 @bcmp(ptr noundef nonnull dereferenceable(16) %1, ptr noundef nonnull dereferenceable(16) @.str.38.700, i64 16)
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %168, label %169

168:                                              ; preds = %165
  store i32 1, ptr @doGlobalRoute, align 4, !tbaa !17
  br label %30

169:                                              ; preds = %165
  %170 = call i32 @bcmp(ptr noundef nonnull dereferenceable(14) %1, ptr noundef nonnull dereferenceable(14) @.str.39.701, i64 14)
  %171 = icmp eq i32 %170, 0
  br i1 %171, label %172, label %180

172:                                              ; preds = %169
  %173 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef nonnull %5, ptr noundef nonnull @.str.13.673, ptr noundef nonnull @doCompaction) #44
  %174 = icmp eq i32 %173, 1
  br i1 %174, label %30, label %175

175:                                              ; preds = %172
  %176 = load ptr, ptr @fpo, align 8, !tbaa !7
  %177 = call i64 @fwrite(ptr nonnull @.str.40.702, i64 44, i64 1, ptr %176)
  %178 = load ptr, ptr @fpo, align 8, !tbaa !7
  %179 = call i64 @fwrite(ptr nonnull @.str.7.665, i64 25, i64 1, ptr %178)
  call void @exit(i32 noundef 0) #49
  unreachable

180:                                              ; preds = %169
  %181 = call i32 @bcmp(ptr noundef nonnull dereferenceable(5) %1, ptr noundef nonnull dereferenceable(5) @.str.41.703, i64 5)
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %183, label %192

183:                                              ; preds = %180
  %184 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef nonnull %5, ptr noundef nonnull @.str.42.704, ptr noundef nonnull @blockl, ptr noundef nonnull @blockr, ptr noundef nonnull @blockb, ptr noundef nonnull @blockt) #44
  %185 = icmp eq i32 %184, 4
  br i1 %185, label %191, label %186

186:                                              ; preds = %183
  %187 = load ptr, ptr @fpo, align 8, !tbaa !7
  %188 = call i64 @fwrite(ptr nonnull @.str.43.705, i64 39, i64 1, ptr %187)
  %189 = load ptr, ptr @fpo, align 8, !tbaa !7
  %190 = call i64 @fwrite(ptr nonnull @.str.7.665, i64 25, i64 1, ptr %189)
  call void @exit(i32 noundef 0) #49
  unreachable

191:                                              ; preds = %183
  store i32 1, ptr @coreGiven, align 4, !tbaa !17
  br label %30

192:                                              ; preds = %180
  %193 = call i32 @bcmp(ptr noundef nonnull dereferenceable(12) %1, ptr noundef nonnull dereferenceable(12) @.str.44.706, i64 12)
  %194 = icmp eq i32 %193, 0
  br i1 %194, label %195, label %203

195:                                              ; preds = %192
  %196 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef nonnull %5, ptr noundef nonnull @.str.13.673, ptr noundef nonnull @gOffsetX) #44
  %197 = icmp eq i32 %196, 1
  br i1 %197, label %30, label %198

198:                                              ; preds = %195
  %199 = load ptr, ptr @fpo, align 8, !tbaa !7
  %200 = call i64 @fwrite(ptr nonnull @.str.45.707, i64 42, i64 1, ptr %199)
  %201 = load ptr, ptr @fpo, align 8, !tbaa !7
  %202 = call i64 @fwrite(ptr nonnull @.str.7.665, i64 25, i64 1, ptr %201)
  call void @exit(i32 noundef 0) #49
  unreachable

203:                                              ; preds = %192
  %204 = call i32 @bcmp(ptr noundef nonnull dereferenceable(12) %1, ptr noundef nonnull dereferenceable(12) @.str.46.708, i64 12)
  %205 = icmp eq i32 %204, 0
  br i1 %205, label %206, label %214

206:                                              ; preds = %203
  %207 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef nonnull %5, ptr noundef nonnull @.str.13.673, ptr noundef nonnull @gOffsetY) #44
  %208 = icmp eq i32 %207, 1
  br i1 %208, label %30, label %209

209:                                              ; preds = %206
  %210 = load ptr, ptr @fpo, align 8, !tbaa !7
  %211 = call i64 @fwrite(ptr nonnull @.str.47.709, i64 42, i64 1, ptr %210)
  %212 = load ptr, ptr @fpo, align 8, !tbaa !7
  %213 = call i64 @fwrite(ptr nonnull @.str.7.665, i64 25, i64 1, ptr %212)
  call void @exit(i32 noundef 0) #49
  unreachable

214:                                              ; preds = %203
  %215 = call i32 @bcmp(ptr noundef nonnull dereferenceable(6) %1, ptr noundef nonnull dereferenceable(6) @.str.48.710, i64 6)
  %216 = icmp eq i32 %215, 0
  br i1 %216, label %217, label %225

217:                                              ; preds = %214
  %218 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef nonnull %5, ptr noundef nonnull @.str.13.673, ptr noundef nonnull @gridX) #44
  %219 = icmp eq i32 %218, 1
  br i1 %219, label %30, label %220

220:                                              ; preds = %217
  %221 = load ptr, ptr @fpo, align 8, !tbaa !7
  %222 = call i64 @fwrite(ptr nonnull @.str.49.711, i64 36, i64 1, ptr %221)
  %223 = load ptr, ptr @fpo, align 8, !tbaa !7
  %224 = call i64 @fwrite(ptr nonnull @.str.7.665, i64 25, i64 1, ptr %223)
  call void @exit(i32 noundef 0) #49
  unreachable

225:                                              ; preds = %214
  %226 = call i32 @bcmp(ptr noundef nonnull dereferenceable(6) %1, ptr noundef nonnull dereferenceable(6) @.str.50.712, i64 6)
  %227 = icmp eq i32 %226, 0
  br i1 %227, label %228, label %236

228:                                              ; preds = %225
  %229 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef nonnull %5, ptr noundef nonnull @.str.13.673, ptr noundef nonnull @gridY) #44
  %230 = icmp eq i32 %229, 1
  br i1 %230, label %30, label %231

231:                                              ; preds = %228
  %232 = load ptr, ptr @fpo, align 8, !tbaa !7
  %233 = call i64 @fwrite(ptr nonnull @.str.51.713, i64 36, i64 1, ptr %232)
  %234 = load ptr, ptr @fpo, align 8, !tbaa !7
  %235 = call i64 @fwrite(ptr nonnull @.str.7.665, i64 25, i64 1, ptr %234)
  call void @exit(i32 noundef 0) #49
  unreachable

236:                                              ; preds = %225
  %237 = load ptr, ptr @fpo, align 8, !tbaa !7
  %238 = call i64 @fwrite(ptr nonnull @.str.52.714, i64 36, i64 1, ptr %237)
  call void @exit(i32 noundef 0) #49
  unreachable

239:                                              ; preds = %10
  %240 = load i32, ptr @doPlacement, align 4, !tbaa !17
  %241 = icmp eq i32 %240, 0
  br i1 %241, label %311, label %242

242:                                              ; preds = %239
  %243 = load i32, ptr @gridX, align 4, !tbaa !17
  %244 = icmp sgt i32 %243, -1
  %245 = load i32, ptr @gridY, align 4
  %246 = icmp sgt i32 %245, -1
  %247 = select i1 %244, i1 true, i1 %246
  %248 = load i32, ptr @gOffsetX, align 4
  %249 = icmp sgt i32 %248, -1
  %250 = select i1 %247, i1 true, i1 %249
  %251 = load i32, ptr @gOffsetY, align 4
  %252 = icmp sgt i32 %251, -1
  %253 = select i1 %250, i1 true, i1 %252
  br i1 %253, label %254, label %264

254:                                              ; preds = %242
  %255 = select i1 %244, i1 %246, i1 false
  %256 = select i1 %255, i1 %249, i1 false
  %257 = select i1 %256, i1 %252, i1 false
  br i1 %257, label %263, label %258

258:                                              ; preds = %254
  %259 = load ptr, ptr @fpo, align 8, !tbaa !7
  %260 = call i64 @fwrite(ptr nonnull @.str.53.715, i64 40, i64 1, ptr %259)
  %261 = load ptr, ptr @fpo, align 8, !tbaa !7
  %262 = call i64 @fwrite(ptr nonnull @.str.54.716, i64 20, i64 1, ptr %261)
  call void @exit(i32 noundef 0) #49
  unreachable

263:                                              ; preds = %254
  store i32 1, ptr @gridGiven, align 4, !tbaa !17
  br label %264

264:                                              ; preds = %263, %242
  %265 = load i32, ptr @attpercell, align 4, !tbaa !17
  %266 = icmp eq i32 %265, -1
  %267 = load ptr, ptr @fpo, align 8, !tbaa !7
  br i1 %266, label %268, label %270

268:                                              ; preds = %264
  %269 = call i64 @fwrite(ptr nonnull @.str.55.717, i64 46, i64 1, ptr %267)
  call void @exit(i32 noundef 0) #49
  unreachable

270:                                              ; preds = %264
  %271 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %267, ptr noundef nonnull @.str.56.718, i32 noundef %265) #43
  %272 = load i32, ptr @trackspacing, align 4, !tbaa !17
  %273 = icmp slt i32 %272, 0
  %274 = load ptr, ptr @fpo, align 8, !tbaa !7
  br i1 %273, label %275, label %277

275:                                              ; preds = %270
  %276 = call i64 @fwrite(ptr nonnull @.str.57.719, i64 43, i64 1, ptr %274)
  call void @exit(i32 noundef 0) #49
  unreachable

277:                                              ; preds = %270
  %278 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %274, ptr noundef nonnull @.str.58.720, i32 noundef %272) #43
  %279 = load i32, ptr @pinSpacing, align 4, !tbaa !17
  %280 = icmp slt i32 %279, 0
  %281 = load ptr, ptr @fpo, align 8, !tbaa !7
  br i1 %280, label %282, label %284

282:                                              ; preds = %277
  %283 = call i64 @fwrite(ptr nonnull @.str.59.721, i64 45, i64 1, ptr %281)
  call void @exit(i32 noundef 0) #49
  unreachable

284:                                              ; preds = %277
  %285 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %281, ptr noundef nonnull @.str.60.722, i32 noundef %279) #43
  %286 = load double, ptr @chipaspect, align 8, !tbaa !36
  %287 = fcmp olt double %286, 0.000000e+00
  %288 = load ptr, ptr @fpo, align 8, !tbaa !7
  br i1 %287, label %289, label %293

289:                                              ; preds = %284
  %290 = call i64 @fwrite(ptr nonnull @.str.61.723, i64 34, i64 1, ptr %288)
  %291 = load ptr, ptr @fpo, align 8, !tbaa !7
  %292 = call i64 @fwrite(ptr nonnull @.str.62.724, i64 17, i64 1, ptr %291)
  call void @exit(i32 noundef 0) #49
  unreachable

293:                                              ; preds = %284
  %294 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %288, ptr noundef nonnull @.str.63.725, double noundef %286) #43
  %295 = load double, ptr @spot_control, align 8, !tbaa !36
  %296 = fcmp olt double %295, 0.000000e+00
  %297 = load ptr, ptr @fpo, align 8, !tbaa !7
  br i1 %296, label %298, label %300

298:                                              ; preds = %293
  %299 = call i64 @fwrite(ptr nonnull @.str.64, i64 41, i64 1, ptr %297)
  store double 1.000000e+00, ptr @spot_control, align 8, !tbaa !36
  br label %302

300:                                              ; preds = %293
  %301 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %297, ptr noundef nonnull @.str.65.726, double noundef %295) #43
  br label %302

302:                                              ; preds = %300, %298
  %303 = load i32, ptr @doPlacement, align 4, !tbaa !17
  %304 = icmp eq i32 %303, 0
  br i1 %304, label %311, label %305

305:                                              ; preds = %302
  %306 = load ptr, ptr @fpo, align 8, !tbaa !7
  %307 = call i64 @fwrite(ptr nonnull @.str.66.727, i64 28, i64 1, ptr %306)
  %308 = load ptr, ptr @fpo, align 8, !tbaa !7
  %309 = load ptr, ptr @cktName, align 8, !tbaa !7
  %310 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %308, ptr noundef nonnull @.str.67, ptr noundef %309) #43
  br label %311

311:                                              ; preds = %305, %302, %239
  %312 = load i32, ptr @doChannelGraph, align 4, !tbaa !17
  %313 = icmp eq i32 %312, 0
  br i1 %313, label %328, label %314

314:                                              ; preds = %311
  %315 = load ptr, ptr @fpo, align 8, !tbaa !7
  %316 = call i64 @fwrite(ptr nonnull @.str.68.728, i64 34, i64 1, ptr %315)
  %317 = load ptr, ptr @fpo, align 8, !tbaa !7
  %318 = load ptr, ptr @cktName, align 8, !tbaa !7
  %319 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %317, ptr noundef nonnull @.str.69.729, ptr noundef %318) #43
  %320 = load i32, ptr @doPlacement, align 4, !tbaa !17
  %321 = icmp eq i32 %320, 0
  br i1 %321, label %322, label %328

322:                                              ; preds = %314
  %323 = load ptr, ptr @fpo, align 8, !tbaa !7
  %324 = call i64 @fwrite(ptr nonnull @.str.70.730, i64 32, i64 1, ptr %323)
  %325 = load ptr, ptr @fpo, align 8, !tbaa !7
  %326 = load ptr, ptr @cktName, align 8, !tbaa !7
  %327 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %325, ptr noundef nonnull @.str.71.731, ptr noundef %326, ptr noundef %326) #43
  br label %328

328:                                              ; preds = %322, %314, %311
  %329 = load i32, ptr @doGlobalRoute, align 4, !tbaa !17
  %330 = icmp eq i32 %329, 0
  br i1 %330, label %388, label %331

331:                                              ; preds = %328
  %332 = load i32, ptr @routerMaxPaths, align 4, !tbaa !17
  %333 = icmp slt i32 %332, 0
  %334 = load ptr, ptr @fpo, align 8, !tbaa !7
  br i1 %333, label %335, label %337

335:                                              ; preds = %331
  %336 = call i64 @fwrite(ptr nonnull @.str.72.732, i64 46, i64 1, ptr %334)
  call void @exit(i32 noundef 0) #49
  unreachable

337:                                              ; preds = %331
  %338 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %334, ptr noundef nonnull @.str.73.733, i32 noundef %332) #43
  %339 = load i32, ptr @routerMaxPaths, align 4, !tbaa !17
  %340 = icmp eq i32 %339, 0
  br i1 %340, label %341, label %344

341:                                              ; preds = %337
  %342 = load ptr, ptr @fpo, align 8, !tbaa !7
  %343 = call i64 @fwrite(ptr nonnull @.str.74, i64 45, i64 1, ptr %342)
  store i32 1, ptr @routerMaxPaths, align 4, !tbaa !17
  br label %344

344:                                              ; preds = %341, %337
  %345 = phi i32 [ 1, %341 ], [ 0, %337 ]
  store i32 %345, ptr @bareFlag, align 4, !tbaa !17
  %346 = load i32, ptr @routerExtraS, align 4, !tbaa !17
  %347 = icmp slt i32 %346, 0
  %348 = load ptr, ptr @fpo, align 8, !tbaa !7
  br i1 %347, label %349, label %351

349:                                              ; preds = %344
  %350 = call i64 @fwrite(ptr nonnull @.str.75, i64 50, i64 1, ptr %348)
  call void @exit(i32 noundef 0) #49
  unreachable

351:                                              ; preds = %344
  %352 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %348, ptr noundef nonnull @.str.76, i32 noundef %346) #43
  %353 = load i32, ptr @doChannelGraph, align 4, !tbaa !17
  %354 = icmp eq i32 %353, 0
  br i1 %354, label %372, label %355

355:                                              ; preds = %351
  %356 = load i32, ptr @trackspacing, align 4, !tbaa !17
  %357 = icmp slt i32 %356, 0
  %358 = load ptr, ptr @fpo, align 8, !tbaa !7
  br i1 %357, label %359, label %361

359:                                              ; preds = %355
  %360 = call i64 @fwrite(ptr nonnull @.str.57.719, i64 43, i64 1, ptr %358)
  call void @exit(i32 noundef 0) #49
  unreachable

361:                                              ; preds = %355
  %362 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %358, ptr noundef nonnull @.str.58.720, i32 noundef %356) #43
  %363 = load i32, ptr @defaultTracks, align 4, !tbaa !17
  %364 = icmp slt i32 %363, 0
  %365 = load ptr, ptr @fpo, align 8, !tbaa !7
  br i1 %364, label %366, label %370

366:                                              ; preds = %361
  %367 = call i64 @fwrite(ptr nonnull @.str.77, i64 28, i64 1, ptr %365)
  %368 = load ptr, ptr @fpo, align 8, !tbaa !7
  %369 = call i64 @fwrite(ptr nonnull @.str.78, i64 29, i64 1, ptr %368)
  call void @exit(i32 noundef 0) #49
  unreachable

370:                                              ; preds = %361
  %371 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %365, ptr noundef nonnull @.str.79, i32 noundef %363) #43
  br label %372

372:                                              ; preds = %370, %351
  %373 = load ptr, ptr @fpo, align 8, !tbaa !7
  %374 = call i64 @fwrite(ptr nonnull @.str.66.727, i64 28, i64 1, ptr %373)
  %375 = load ptr, ptr @fpo, align 8, !tbaa !7
  %376 = load ptr, ptr @cktName, align 8, !tbaa !7
  %377 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %375, ptr noundef nonnull @.str.80, ptr noundef %376) #43
  %378 = load i32, ptr @doChannelGraph, align 4, !tbaa !17
  %379 = icmp eq i32 %378, 0
  br i1 %379, label %380, label %388

380:                                              ; preds = %372
  %381 = load ptr, ptr @fpo, align 8, !tbaa !7
  %382 = call i64 @fwrite(ptr nonnull @.str.70.730, i64 32, i64 1, ptr %381)
  %383 = load ptr, ptr @fpo, align 8, !tbaa !7
  %384 = load ptr, ptr @cktName, align 8, !tbaa !7
  %385 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %383, ptr noundef nonnull @.str.81, ptr noundef %384, ptr noundef %384) #43
  %386 = load ptr, ptr @fpo, align 8, !tbaa !7
  %387 = call i64 @fwrite(ptr nonnull @.str.82, i64 22, i64 1, ptr %386)
  br label %388

388:                                              ; preds = %380, %372, %328
  %389 = load i32, ptr @doCompaction, align 4, !tbaa !17
  %390 = icmp eq i32 %389, 0
  br i1 %390, label %414, label %391

391:                                              ; preds = %388
  %392 = load ptr, ptr @fpo, align 8, !tbaa !7
  %393 = call i64 @fwrite(ptr nonnull @.str.66.727, i64 28, i64 1, ptr %392)
  %394 = load ptr, ptr @fpo, align 8, !tbaa !7
  %395 = load ptr, ptr @cktName, align 8, !tbaa !7
  %396 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %394, ptr noundef nonnull @.str.83, ptr noundef %395) #43
  %397 = load i32, ptr @doPlacement, align 4, !tbaa !17
  %398 = icmp ne i32 %397, 0
  %399 = load i32, ptr @doChannelGraph, align 4
  %400 = icmp ne i32 %399, 0
  %401 = select i1 %398, i1 %400, i1 false
  %402 = load i32, ptr @doGlobalRoute, align 4
  %403 = icmp ne i32 %402, 0
  %404 = select i1 %401, i1 %403, i1 false
  br i1 %404, label %414, label %405

405:                                              ; preds = %391
  %406 = load ptr, ptr @fpo, align 8, !tbaa !7
  %407 = call i64 @fwrite(ptr nonnull @.str.84, i64 39, i64 1, ptr %406)
  %408 = load ptr, ptr @fpo, align 8, !tbaa !7
  %409 = call i64 @fwrite(ptr nonnull @.str.85, i64 41, i64 1, ptr %408)
  %410 = load ptr, ptr @fpo, align 8, !tbaa !7
  %411 = call i64 @fwrite(ptr nonnull @.str.86, i64 33, i64 1, ptr %410)
  %412 = load ptr, ptr @fpo, align 8, !tbaa !7
  %413 = call i64 @fwrite(ptr nonnull @.str.87, i64 28, i64 1, ptr %412)
  store i32 0, ptr @doCompaction, align 4, !tbaa !17
  br label %414

414:                                              ; preds = %405, %391, %388
  %415 = load ptr, ptr @fpo, align 8, !tbaa !7
  %416 = call i32 @fflush(ptr noundef %415) #43
  call void @llvm.lifetime.end.p0(i64 1024, ptr nonnull %2) #47
  call void @llvm.lifetime.end.p0(i64 1024, ptr nonnull %1) #47
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @readpnode(ptr noundef %0) #0 {
  %2 = alloca [1024 x i8], align 16
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 1024, ptr nonnull %2) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %3) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5) #47
  store i32 0, ptr @maxpnode, align 4, !tbaa !17
  store i32 0, ptr @numpins, align 4, !tbaa !17
  br label %6

6:                                                ; preds = %19, %1
  %7 = phi i32 [ %15, %19 ], [ 0, %1 ]
  br label %8

8:                                                ; preds = %94, %6
  %9 = phi i32 [ 0, %6 ], [ %95, %94 ]
  %10 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.734, ptr noundef nonnull %2) #44
  %11 = icmp eq i32 %10, 1
  br i1 %11, label %12, label %185

12:                                               ; preds = %8
  %13 = load i32, ptr %2, align 16
  switch i32 %13, label %103 [
    i32 7628142, label %14
    i32 7235952, label %29
  ]

14:                                               ; preds = %12
  %.lcssa20 = phi i32 [ %9, %12 ]
  %15 = add nuw nsw i32 %7, 1
  %16 = load i32, ptr @maxpnode, align 4, !tbaa !17
  %17 = icmp sgt i32 %.lcssa20, %16
  br i1 %17, label %18, label %19

18:                                               ; preds = %14
  store i32 %.lcssa20, ptr @maxpnode, align 4, !tbaa !17
  br label %19

19:                                               ; preds = %18, %14
  %20 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.734, ptr noundef nonnull %2) #44
  %21 = icmp eq i32 %20, 1
  br i1 %21, label %6, label %22, !llvm.loop !820

22:                                               ; preds = %19
  %.lcssa36 = phi i32 [ %15, %19 ]
  %23 = load ptr, ptr @fpo, align 8, !tbaa !7
  %24 = call i64 @fwrite(ptr nonnull @.str.2.735, i64 27, i64 1, ptr %23)
  %25 = load ptr, ptr @fpo, align 8, !tbaa !7
  %26 = call i64 @fwrite(ptr nonnull @.str.3.736, i64 17, i64 1, ptr %25)
  %27 = load ptr, ptr @fpo, align 8, !tbaa !7
  %28 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %27, ptr noundef nonnull @.str.4.737, i32 noundef %.lcssa36) #43
  call void @exit(i32 noundef 0) #49
  unreachable

29:                                               ; preds = %12
  %30 = load i32, ptr @numpins, align 4, !tbaa !17
  %31 = add nsw i32 %30, 1
  store i32 %31, ptr @numpins, align 4, !tbaa !17
  %32 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.734, ptr noundef nonnull %2) #44
  %33 = icmp eq i32 %32, 1
  br i1 %33, label %41, label %34

34:                                               ; preds = %29
  %.lcssa38 = phi i32 [ %7, %29 ]
  %35 = load ptr, ptr @fpo, align 8, !tbaa !7
  %36 = call i64 @fwrite(ptr nonnull @.str.6.738, i64 27, i64 1, ptr %35)
  %37 = load ptr, ptr @fpo, align 8, !tbaa !7
  %38 = call i64 @fwrite(ptr nonnull @.str.3.736, i64 17, i64 1, ptr %37)
  %39 = load ptr, ptr @fpo, align 8, !tbaa !7
  %40 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %39, ptr noundef nonnull @.str.4.737, i32 noundef %.lcssa38) #43
  call void @exit(i32 noundef 0) #49
  unreachable

41:                                               ; preds = %29
  %42 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.734, ptr noundef nonnull %2) #44
  %43 = icmp eq i32 %42, 1
  br i1 %43, label %51, label %44

44:                                               ; preds = %41
  %.lcssa39 = phi i32 [ %7, %41 ]
  %45 = load ptr, ptr @fpo, align 8, !tbaa !7
  %46 = call i64 @fwrite(ptr nonnull @.str.7.739, i64 31, i64 1, ptr %45)
  %47 = load ptr, ptr @fpo, align 8, !tbaa !7
  %48 = call i64 @fwrite(ptr nonnull @.str.3.736, i64 17, i64 1, ptr %47)
  %49 = load ptr, ptr @fpo, align 8, !tbaa !7
  %50 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %49, ptr noundef nonnull @.str.4.737, i32 noundef %.lcssa39) #43
  call void @exit(i32 noundef 0) #49
  unreachable

51:                                               ; preds = %41
  %52 = call i32 @bcmp(ptr noundef nonnull dereferenceable(6) %2, ptr noundef nonnull dereferenceable(6) @.str.8.740, i64 6)
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %61, label %54

54:                                               ; preds = %51
  %.lcssa40 = phi i32 [ %7, %51 ]
  %55 = load ptr, ptr @fpo, align 8, !tbaa !7
  %56 = call i64 @fwrite(ptr nonnull @.str.9.741, i64 28, i64 1, ptr %55)
  %57 = load ptr, ptr @fpo, align 8, !tbaa !7
  %58 = call i64 @fwrite(ptr nonnull @.str.3.736, i64 17, i64 1, ptr %57)
  %59 = load ptr, ptr @fpo, align 8, !tbaa !7
  %60 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %59, ptr noundef nonnull @.str.4.737, i32 noundef %.lcssa40) #43
  call void @exit(i32 noundef 0) #49
  unreachable

61:                                               ; preds = %51
  %62 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.10.742, ptr noundef nonnull %3, ptr noundef nonnull %4) #44
  %63 = icmp eq i32 %62, 2
  br i1 %63, label %71, label %64

64:                                               ; preds = %61
  %.lcssa41 = phi i32 [ %7, %61 ]
  %65 = load ptr, ptr @fpo, align 8, !tbaa !7
  %66 = call i64 @fwrite(ptr nonnull @.str.11.743, i64 32, i64 1, ptr %65)
  %67 = load ptr, ptr @fpo, align 8, !tbaa !7
  %68 = call i64 @fwrite(ptr nonnull @.str.12.744, i64 41, i64 1, ptr %67)
  %69 = load ptr, ptr @fpo, align 8, !tbaa !7
  %70 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %69, ptr noundef nonnull @.str.4.737, i32 noundef %.lcssa41) #43
  call void @exit(i32 noundef 0) #49
  unreachable

71:                                               ; preds = %61
  %72 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.734, ptr noundef nonnull %2) #44
  %73 = icmp eq i32 %72, 1
  br i1 %73, label %81, label %74

74:                                               ; preds = %71
  %.lcssa42 = phi i32 [ %7, %71 ]
  %75 = load ptr, ptr @fpo, align 8, !tbaa !7
  %76 = call i64 @fwrite(ptr nonnull @.str.9.741, i64 28, i64 1, ptr %75)
  %77 = load ptr, ptr @fpo, align 8, !tbaa !7
  %78 = call i64 @fwrite(ptr nonnull @.str.3.736, i64 17, i64 1, ptr %77)
  %79 = load ptr, ptr @fpo, align 8, !tbaa !7
  %80 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %79, ptr noundef nonnull @.str.4.737, i32 noundef %.lcssa42) #43
  call void @exit(i32 noundef 0) #49
  unreachable

81:                                               ; preds = %71
  %82 = call i32 @bcmp(ptr noundef nonnull dereferenceable(3) %2, ptr noundef nonnull dereferenceable(3) @.str.13.745, i64 3)
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %91, label %84

84:                                               ; preds = %81
  %.lcssa43 = phi i32 [ %7, %81 ]
  %85 = load ptr, ptr @fpo, align 8, !tbaa !7
  %86 = call i64 @fwrite(ptr nonnull @.str.9.741, i64 28, i64 1, ptr %85)
  %87 = load ptr, ptr @fpo, align 8, !tbaa !7
  %88 = call i64 @fwrite(ptr nonnull @.str.3.736, i64 17, i64 1, ptr %87)
  %89 = load ptr, ptr @fpo, align 8, !tbaa !7
  %90 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %89, ptr noundef nonnull @.str.4.737, i32 noundef %.lcssa43) #43
  call void @exit(i32 noundef 0) #49
  unreachable

91:                                               ; preds = %81
  %92 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.14.746, ptr noundef nonnull %5) #44
  %93 = icmp eq i32 %92, 1
  br i1 %93, label %94, label %96

94:                                               ; preds = %168, %91
  %95 = add nuw nsw i32 %9, 1
  br label %8, !llvm.loop !820

96:                                               ; preds = %91
  %.lcssa44 = phi i32 [ %7, %91 ]
  %97 = load ptr, ptr @fpo, align 8, !tbaa !7
  %98 = call i64 @fwrite(ptr nonnull @.str.15.747, i64 41, i64 1, ptr %97)
  %99 = load ptr, ptr @fpo, align 8, !tbaa !7
  %100 = call i64 @fwrite(ptr nonnull @.str.3.736, i64 17, i64 1, ptr %99)
  %101 = load ptr, ptr @fpo, align 8, !tbaa !7
  %102 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %101, ptr noundef nonnull @.str.4.737, i32 noundef %.lcssa44) #43
  call void @exit(i32 noundef 0) #49
  unreachable

103:                                              ; preds = %12
  %104 = call i32 @bcmp(ptr noundef nonnull dereferenceable(6) %2, ptr noundef nonnull dereferenceable(6) @.str.16.748, i64 6)
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %106, label %178

106:                                              ; preds = %103
  %107 = load i32, ptr @numpins, align 4, !tbaa !17
  %108 = add nsw i32 %107, 1
  store i32 %108, ptr @numpins, align 4, !tbaa !17
  %109 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.734, ptr noundef nonnull %2) #44
  %110 = icmp eq i32 %109, 1
  br i1 %110, label %118, label %111

111:                                              ; preds = %106
  %.lcssa47 = phi i32 [ %7, %106 ]
  %112 = load ptr, ptr @fpo, align 8, !tbaa !7
  %113 = call i64 @fwrite(ptr nonnull @.str.6.738, i64 27, i64 1, ptr %112)
  %114 = load ptr, ptr @fpo, align 8, !tbaa !7
  %115 = call i64 @fwrite(ptr nonnull @.str.3.736, i64 17, i64 1, ptr %114)
  %116 = load ptr, ptr @fpo, align 8, !tbaa !7
  %117 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %116, ptr noundef nonnull @.str.4.737, i32 noundef %.lcssa47) #43
  call void @exit(i32 noundef 0) #49
  unreachable

118:                                              ; preds = %106
  %119 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.734, ptr noundef nonnull %2) #44
  %120 = icmp eq i32 %119, 1
  br i1 %120, label %128, label %121

121:                                              ; preds = %118
  %.lcssa48 = phi i32 [ %7, %118 ]
  %122 = load ptr, ptr @fpo, align 8, !tbaa !7
  %123 = call i64 @fwrite(ptr nonnull @.str.7.739, i64 31, i64 1, ptr %122)
  %124 = load ptr, ptr @fpo, align 8, !tbaa !7
  %125 = call i64 @fwrite(ptr nonnull @.str.3.736, i64 17, i64 1, ptr %124)
  %126 = load ptr, ptr @fpo, align 8, !tbaa !7
  %127 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %126, ptr noundef nonnull @.str.4.737, i32 noundef %.lcssa48) #43
  call void @exit(i32 noundef 0) #49
  unreachable

128:                                              ; preds = %118
  %129 = call i32 @bcmp(ptr noundef nonnull dereferenceable(6) %2, ptr noundef nonnull dereferenceable(6) @.str.8.740, i64 6)
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %138, label %131

131:                                              ; preds = %128
  %.lcssa49 = phi i32 [ %7, %128 ]
  %132 = load ptr, ptr @fpo, align 8, !tbaa !7
  %133 = call i64 @fwrite(ptr nonnull @.str.9.741, i64 28, i64 1, ptr %132)
  %134 = load ptr, ptr @fpo, align 8, !tbaa !7
  %135 = call i64 @fwrite(ptr nonnull @.str.3.736, i64 17, i64 1, ptr %134)
  %136 = load ptr, ptr @fpo, align 8, !tbaa !7
  %137 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %136, ptr noundef nonnull @.str.4.737, i32 noundef %.lcssa49) #43
  call void @exit(i32 noundef 0) #49
  unreachable

138:                                              ; preds = %128
  %139 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.10.742, ptr noundef nonnull %3, ptr noundef nonnull %4) #44
  %140 = icmp eq i32 %139, 2
  br i1 %140, label %148, label %141

141:                                              ; preds = %138
  %.lcssa50 = phi i32 [ %7, %138 ]
  %142 = load ptr, ptr @fpo, align 8, !tbaa !7
  %143 = call i64 @fwrite(ptr nonnull @.str.11.743, i64 32, i64 1, ptr %142)
  %144 = load ptr, ptr @fpo, align 8, !tbaa !7
  %145 = call i64 @fwrite(ptr nonnull @.str.12.744, i64 41, i64 1, ptr %144)
  %146 = load ptr, ptr @fpo, align 8, !tbaa !7
  %147 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %146, ptr noundef nonnull @.str.4.737, i32 noundef %.lcssa50) #43
  call void @exit(i32 noundef 0) #49
  unreachable

148:                                              ; preds = %138
  %149 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.734, ptr noundef nonnull %2) #44
  %150 = icmp eq i32 %149, 1
  br i1 %150, label %158, label %151

151:                                              ; preds = %148
  %.lcssa51 = phi i32 [ %7, %148 ]
  %152 = load ptr, ptr @fpo, align 8, !tbaa !7
  %153 = call i64 @fwrite(ptr nonnull @.str.9.741, i64 28, i64 1, ptr %152)
  %154 = load ptr, ptr @fpo, align 8, !tbaa !7
  %155 = call i64 @fwrite(ptr nonnull @.str.3.736, i64 17, i64 1, ptr %154)
  %156 = load ptr, ptr @fpo, align 8, !tbaa !7
  %157 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %156, ptr noundef nonnull @.str.4.737, i32 noundef %.lcssa51) #43
  call void @exit(i32 noundef 0) #49
  unreachable

158:                                              ; preds = %148
  %159 = call i32 @bcmp(ptr noundef nonnull dereferenceable(3) %2, ptr noundef nonnull dereferenceable(3) @.str.13.745, i64 3)
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %168, label %161

161:                                              ; preds = %158
  %.lcssa52 = phi i32 [ %7, %158 ]
  %162 = load ptr, ptr @fpo, align 8, !tbaa !7
  %163 = call i64 @fwrite(ptr nonnull @.str.9.741, i64 28, i64 1, ptr %162)
  %164 = load ptr, ptr @fpo, align 8, !tbaa !7
  %165 = call i64 @fwrite(ptr nonnull @.str.3.736, i64 17, i64 1, ptr %164)
  %166 = load ptr, ptr @fpo, align 8, !tbaa !7
  %167 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %166, ptr noundef nonnull @.str.4.737, i32 noundef %.lcssa52) #43
  call void @exit(i32 noundef 0) #49
  unreachable

168:                                              ; preds = %158
  %169 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.14.746, ptr noundef nonnull %5) #44
  %170 = icmp eq i32 %169, 1
  br i1 %170, label %94, label %171

171:                                              ; preds = %168
  %.lcssa53 = phi i32 [ %7, %168 ]
  %172 = load ptr, ptr @fpo, align 8, !tbaa !7
  %173 = call i64 @fwrite(ptr nonnull @.str.15.747, i64 41, i64 1, ptr %172)
  %174 = load ptr, ptr @fpo, align 8, !tbaa !7
  %175 = call i64 @fwrite(ptr nonnull @.str.3.736, i64 17, i64 1, ptr %174)
  %176 = load ptr, ptr @fpo, align 8, !tbaa !7
  %177 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %176, ptr noundef nonnull @.str.4.737, i32 noundef %.lcssa53) #43
  call void @exit(i32 noundef 0) #49
  unreachable

178:                                              ; preds = %103
  %.lcssa46 = phi i32 [ %7, %103 ]
  %179 = load ptr, ptr @fpo, align 8, !tbaa !7
  %180 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %179, ptr noundef nonnull @.str.17.749, ptr noundef nonnull %2) #43
  %181 = load ptr, ptr @fpo, align 8, !tbaa !7
  %182 = call i64 @fwrite(ptr nonnull @.str.3.736, i64 17, i64 1, ptr %181)
  %183 = load ptr, ptr @fpo, align 8, !tbaa !7
  %184 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %183, ptr noundef nonnull @.str.4.737, i32 noundef %.lcssa46) #43
  call void @exit(i32 noundef 0) #49
  unreachable

185:                                              ; preds = %8
  %.lcssa37 = phi i32 [ %7, %8 ]
  %.lcssa19 = phi i32 [ %9, %8 ]
  %186 = load i32, ptr @maxpnode, align 4, !tbaa !17
  %187 = icmp sgt i32 %.lcssa19, %186
  br i1 %187, label %188, label %189

188:                                              ; preds = %185
  store i32 %.lcssa19, ptr @maxpnode, align 4, !tbaa !17
  br label %189

189:                                              ; preds = %188, %185
  call void @rewind(ptr noundef %0) #43
  %190 = load ptr, ptr @gnodeArray, align 8, !tbaa !7
  %191 = load i32, ptr @numnodes, align 4, !tbaa !17
  %192 = add nsw i32 %191, 1
  %193 = load i32, ptr @maxpnode, align 4, !tbaa !17
  %194 = add nsw i32 %192, %193
  %195 = sext i32 %194 to i64
  %196 = shl nsw i64 %195, 3
  %197 = call ptr @realloc(ptr noundef %190, i64 noundef %196) #46
  store ptr %197, ptr @gnodeArray, align 8, !tbaa !7
  %198 = load i32, ptr @maxpnode, align 4, !tbaa !17
  %199 = icmp sgt i32 %198, 0
  br i1 %199, label %200, label %211

200:                                              ; preds = %189
  %201 = load i32, ptr @numnodes, align 4, !tbaa !17
  %202 = add nsw i32 %198, %201
  %203 = sext i32 %201 to i64
  %204 = sext i32 %202 to i64
  br label %205

205:                                              ; preds = %205, %200
  %206 = phi i64 [ %203, %200 ], [ %207, %205 ]
  %207 = add nsw i64 %206, 1
  %208 = load ptr, ptr @gnodeArray, align 8, !tbaa !7
  %209 = getelementptr inbounds ptr, ptr %208, i64 %207
  store ptr null, ptr %209, align 8, !tbaa !7
  %210 = icmp slt i64 %207, %204
  br i1 %210, label %205, label %211, !llvm.loop !821

211:                                              ; preds = %205, %189
  %212 = call noalias dereferenceable_or_null(40) ptr @malloc(i64 noundef 40) #45
  store ptr %212, ptr @gtrace, align 8, !tbaa !7
  %213 = add nsw i32 %198, 1
  %214 = sext i32 %213 to i64
  %215 = shl nsw i64 %214, 1
  br label %216

216:                                              ; preds = %216, %211
  %217 = phi i64 [ 1, %211 ], [ %221, %216 ]
  %218 = call noalias ptr @malloc(i64 noundef %215) #45
  %219 = load ptr, ptr @gtrace, align 8, !tbaa !7
  %220 = getelementptr inbounds ptr, ptr %219, i64 %217
  store ptr %218, ptr %220, align 8, !tbaa !7
  %221 = add nuw nsw i64 %217, 1
  %222 = icmp eq i64 %221, 5
  br i1 %222, label %223, label %216, !llvm.loop !822

223:                                              ; preds = %216
  store i32 %.lcssa37, ptr @largestNet, align 4, !tbaa !17
  %224 = add nuw i32 %.lcssa37, 1
  %225 = sext i32 %224 to i64
  %226 = mul nsw i64 %225, 24
  %227 = call noalias ptr @malloc(i64 noundef %226) #45
  store ptr %227, ptr @netRoutes, align 8, !tbaa !7
  %228 = icmp eq i32 %.lcssa37, 0
  br i1 %228, label %229, label %231

229:                                              ; preds = %223
  %230 = load i32, ptr @MAXPATHS, align 4, !tbaa !17
  br label %270

231:                                              ; preds = %265, %223
  %232 = phi i64 [ %266, %265 ], [ 1, %223 ]
  %233 = load ptr, ptr @netRoutes, align 8, !tbaa !7
  %234 = getelementptr inbounds %struct.nrbox, ptr %233, i64 %232, i32 2
  store i32 1, ptr %234, align 4, !tbaa !186
  %235 = load i32, ptr @MAXPATHS, align 4, !tbaa !17
  %236 = add i32 %235, 1
  %237 = sext i32 %236 to i64
  %238 = shl nsw i64 %237, 3
  %239 = call noalias ptr @malloc(i64 noundef %238) #45
  %240 = getelementptr inbounds %struct.nrbox, ptr %233, i64 %232
  store ptr %239, ptr %240, align 8, !tbaa !188
  %241 = icmp slt i32 %235, 1
  br i1 %241, label %265, label %242

242:                                              ; preds = %231
  %243 = zext i32 %236 to i64
  %244 = load ptr, ptr @netRoutes, align 8, !tbaa !7
  %245 = getelementptr inbounds %struct.nrbox, ptr %244, i64 %232
  %246 = load ptr, ptr %245, align 8, !tbaa !188
  br label %247

247:                                              ; preds = %247, %242
  %248 = phi ptr [ %246, %242 ], [ %259, %247 ]
  %249 = phi i64 [ 1, %242 ], [ %263, %247 ]
  %250 = call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #45
  %251 = getelementptr inbounds ptr, ptr %248, i64 %249
  store ptr %250, ptr %251, align 8, !tbaa !7
  %252 = load ptr, ptr @netRoutes, align 8, !tbaa !7
  %253 = getelementptr inbounds %struct.nrbox, ptr %252, i64 %232
  %254 = load ptr, ptr %253, align 8, !tbaa !188
  %255 = getelementptr inbounds ptr, ptr %254, i64 %249
  %256 = load ptr, ptr %255, align 8, !tbaa !7
  store ptr null, ptr %256, align 8, !tbaa !746
  %257 = load ptr, ptr @netRoutes, align 8, !tbaa !7
  %258 = getelementptr inbounds %struct.nrbox, ptr %257, i64 %232
  %259 = load ptr, ptr %258, align 8, !tbaa !188
  %260 = getelementptr inbounds ptr, ptr %259, i64 %249
  %261 = load ptr, ptr %260, align 8, !tbaa !7
  %262 = getelementptr inbounds %struct.altbox, ptr %261, i64 0, i32 2
  store ptr null, ptr %262, align 8, !tbaa !748
  %263 = add nuw nsw i64 %249, 1
  %264 = icmp eq i64 %263, %243
  br i1 %264, label %265, label %247, !llvm.loop !823

265:                                              ; preds = %247, %231
  %266 = add nuw nsw i64 %232, 1
  %267 = load i32, ptr @largestNet, align 4, !tbaa !17
  %268 = sext i32 %267 to i64
  %269 = icmp slt i64 %232, %268
  br i1 %269, label %231, label %270, !llvm.loop !824

270:                                              ; preds = %265, %229
  %271 = phi i32 [ %230, %229 ], [ %235, %265 ]
  %272 = shl nsw i32 %271, 1
  %273 = or i32 %272, 1
  %274 = sext i32 %273 to i64
  %275 = shl nsw i64 %274, 3
  %276 = call noalias ptr @malloc(i64 noundef %275) #45
  store ptr %276, ptr @savePaths, align 8, !tbaa !7
  %277 = icmp slt i32 %271, 1
  br i1 %277, label %296, label %278

278:                                              ; preds = %270
  %279 = load i32, ptr @numnodes, align 4, !tbaa !17
  %280 = load i32, ptr @maxpnode, align 4, !tbaa !17
  %281 = add nsw i32 %280, %279
  %282 = mul nsw i32 %281, 3
  %283 = add nsw i32 %282, 1
  %284 = sext i32 %283 to i64
  %285 = shl nsw i64 %284, 1
  %286 = call i32 @llvm.smax.i32(i32 %272, i32 1)
  %287 = add nuw nsw i32 %286, 1
  %288 = zext i32 %287 to i64
  br label %289

289:                                              ; preds = %289, %278
  %290 = phi i64 [ 1, %278 ], [ %294, %289 ]
  %291 = call noalias ptr @malloc(i64 noundef %285) #45
  %292 = load ptr, ptr @savePaths, align 8, !tbaa !7
  %293 = getelementptr inbounds ptr, ptr %292, i64 %290
  store ptr %291, ptr %293, align 8, !tbaa !7
  %294 = add nuw nsw i64 %290, 1
  %295 = icmp eq i64 %294, %288
  br i1 %295, label %296, label %289, !llvm.loop !825

296:                                              ; preds = %289, %270
  %297 = load i32, ptr @numpins, align 4, !tbaa !17
  %298 = add i32 %297, 1
  %299 = sext i32 %298 to i64
  %300 = shl nsw i64 %299, 3
  %301 = call noalias ptr @malloc(i64 noundef %300) #45
  store ptr %301, ptr @pnameArray, align 8, !tbaa !7
  %302 = icmp slt i32 %297, 1
  br i1 %302, label %311, label %303

303:                                              ; preds = %296
  %304 = zext i32 %298 to i64
  br label %305

305:                                              ; preds = %305, %303
  %306 = phi i64 [ 1, %303 ], [ %309, %305 ]
  %307 = load ptr, ptr @pnameArray, align 8, !tbaa !7
  %308 = getelementptr inbounds ptr, ptr %307, i64 %306
  store ptr null, ptr %308, align 8, !tbaa !7
  %309 = add nuw nsw i64 %306, 1
  %310 = icmp eq i64 %309, %304
  br i1 %310, label %311, label %305, !llvm.loop !826

311:                                              ; preds = %305, %296
  %312 = shl nsw i64 %225, 3
  %313 = call noalias ptr @malloc(i64 noundef %312) #45
  store ptr %313, ptr @nnameArray, align 8, !tbaa !7
  br i1 %228, label %314, label %317

314:                                              ; preds = %311
  %315 = shl nsw i64 %225, 2
  %316 = call noalias ptr @malloc(i64 noundef %315) #45
  store ptr %316, ptr @pinOffset, align 8, !tbaa !7
  br label %332

317:                                              ; preds = %311
  %318 = zext i32 %224 to i64
  br label %319

319:                                              ; preds = %319, %317
  %320 = phi i64 [ 1, %317 ], [ %323, %319 ]
  %321 = load ptr, ptr @nnameArray, align 8, !tbaa !7
  %322 = getelementptr inbounds ptr, ptr %321, i64 %320
  store ptr null, ptr %322, align 8, !tbaa !7
  %323 = add nuw nsw i64 %320, 1
  %324 = icmp eq i64 %323, %318
  br i1 %324, label %325, label %319, !llvm.loop !827

325:                                              ; preds = %319
  %326 = shl nsw i64 %225, 2
  %327 = call noalias ptr @malloc(i64 noundef %326) #45
  store ptr %327, ptr @pinOffset, align 8, !tbaa !7
  br i1 %228, label %332, label %328

328:                                              ; preds = %325
  %329 = getelementptr i8, ptr %327, i64 4
  %330 = zext i32 %.lcssa37 to i64
  %331 = shl nuw nsw i64 %330, 2
  call void @llvm.memset.p0.i64(ptr align 4 %329, i8 0, i64 %331, i1 false), !tbaa !17
  br label %332

332:                                              ; preds = %328, %325, %314
  %333 = load i32, ptr @numnodes, align 4, !tbaa !17
  %334 = load i32, ptr @maxpnode, align 4, !tbaa !17
  %335 = add nsw i32 %334, %333
  %336 = mul nsw i32 %335, 3
  %337 = add nsw i32 %336, 1
  %338 = sext i32 %337 to i64
  %339 = shl nsw i64 %338, 1
  %340 = call noalias ptr @malloc(i64 noundef %339) #45
  store ptr %340, ptr @segList, align 8, !tbaa !7
  %341 = add nsw i32 %334, 1
  %342 = sext i32 %341 to i64
  %343 = shl nsw i64 %342, 1
  %344 = call noalias ptr @malloc(i64 noundef %343) #45
  store ptr %344, ptr @sourceList, align 8, !tbaa !7
  %345 = add nsw i32 %341, %333
  %346 = sext i32 %345 to i64
  %347 = shl nsw i64 %346, 1
  %348 = call noalias ptr @malloc(i64 noundef %347) #45
  store ptr %348, ptr @targetList, align 8, !tbaa !7
  %349 = call noalias ptr @malloc(i64 noundef %343) #45
  store ptr %349, ptr @delSourceList, align 8, !tbaa !7
  %350 = call noalias ptr @malloc(i64 noundef %347) #45
  store ptr %350, ptr @addTargetList, align 8, !tbaa !7
  %351 = load i32, ptr @EXTRASOURCES, align 4, !tbaa !17
  %352 = mul nsw i32 %271, %351
  %353 = add nsw i32 %352, 1
  %354 = sext i32 %353 to i64
  %355 = shl nsw i64 %354, 3
  %356 = call noalias ptr @malloc(i64 noundef %355) #45
  store ptr %356, ptr @pathList, align 8, !tbaa !7
  %357 = icmp slt i32 %352, 1
  br i1 %357, label %402, label %358

358:                                              ; preds = %391, %332
  %359 = phi i32 [ %392, %391 ], [ %271, %332 ]
  %360 = phi i32 [ %393, %391 ], [ %351, %332 ]
  %361 = phi i32 [ %394, %391 ], [ %334, %332 ]
  %362 = phi i32 [ %395, %391 ], [ %333, %332 ]
  %363 = phi i64 [ %396, %391 ], [ 1, %332 ]
  %364 = add nsw i32 %362, 2
  %365 = add nsw i32 %364, %361
  %366 = sext i32 %365 to i64
  %367 = shl nsw i64 %366, 2
  %368 = call noalias ptr @malloc(i64 noundef %367) #45
  %369 = load ptr, ptr @pathList, align 8, !tbaa !7
  %370 = getelementptr inbounds ptr, ptr %369, i64 %363
  store ptr %368, ptr %370, align 8, !tbaa !7
  %371 = add i32 %362, 1
  %372 = add i32 %371, %361
  %373 = icmp slt i32 %372, 0
  br i1 %373, label %391, label %374

374:                                              ; preds = %358
  %375 = load ptr, ptr @pathList, align 8, !tbaa !7
  %376 = getelementptr inbounds ptr, ptr %375, i64 %363
  %377 = load ptr, ptr %376, align 8, !tbaa !7
  br label %378

378:                                              ; preds = %378, %374
  %379 = phi i64 [ 0, %374 ], [ %381, %378 ]
  %380 = getelementptr inbounds i32, ptr %377, i64 %379
  store i32 0, ptr %380, align 4, !tbaa !17
  %381 = add nuw nsw i64 %379, 1
  %382 = load i32, ptr @numnodes, align 4, !tbaa !17
  %383 = load i32, ptr @maxpnode, align 4, !tbaa !17
  %384 = add i32 %382, 1
  %385 = add i32 %384, %383
  %386 = sext i32 %385 to i64
  %387 = icmp slt i64 %379, %386
  br i1 %387, label %378, label %388, !llvm.loop !828

388:                                              ; preds = %378
  %.lcssa15 = phi i32 [ %382, %378 ]
  %.lcssa14 = phi i32 [ %383, %378 ]
  %389 = load i32, ptr @EXTRASOURCES, align 4, !tbaa !17
  %390 = load i32, ptr @MAXPATHS, align 4, !tbaa !17
  br label %391

391:                                              ; preds = %388, %358
  %392 = phi i32 [ %390, %388 ], [ %359, %358 ]
  %393 = phi i32 [ %389, %388 ], [ %360, %358 ]
  %394 = phi i32 [ %.lcssa14, %388 ], [ %361, %358 ]
  %395 = phi i32 [ %.lcssa15, %388 ], [ %362, %358 ]
  %396 = add nuw nsw i64 %363, 1
  %397 = mul nsw i32 %392, %393
  %398 = sext i32 %397 to i64
  %399 = icmp slt i64 %363, %398
  br i1 %399, label %358, label %400, !llvm.loop !829

400:                                              ; preds = %391
  %.lcssa18 = phi i32 [ %392, %391 ]
  %.lcssa17 = phi i32 [ %394, %391 ]
  %.lcssa16 = phi i32 [ %395, %391 ]
  %401 = shl nsw i32 %.lcssa18, 1
  br label %402

402:                                              ; preds = %400, %332
  %403 = phi i32 [ %401, %400 ], [ %272, %332 ]
  %404 = phi i32 [ %.lcssa17, %400 ], [ %334, %332 ]
  %405 = phi i32 [ %.lcssa16, %400 ], [ %333, %332 ]
  %406 = phi i32 [ %.lcssa18, %400 ], [ %271, %332 ]
  %407 = add nsw i32 %403, 3
  %408 = sext i32 %407 to i64
  %409 = mul nsw i64 %408, 40
  %410 = call noalias ptr @malloc(i64 noundef %409) #45
  store ptr %410, ptr @pathArray, align 8, !tbaa !7
  %411 = icmp slt i32 %406, 0
  br i1 %411, label %412, label %417

412:                                              ; preds = %402
  %413 = add nsw i32 %405, 1
  %414 = add nsw i32 %413, %404
  %415 = sext i32 %414 to i64
  %416 = shl nsw i64 %415, 1
  br label %433

417:                                              ; preds = %402
  %418 = add i32 %403, 2
  %419 = add nsw i32 %405, 1
  %420 = add nsw i32 %419, %404
  %421 = sext i32 %420 to i64
  %422 = shl nsw i64 %421, 1
  %423 = call i32 @llvm.smax.i32(i32 %418, i32 1)
  %424 = add nuw nsw i32 %423, 1
  %425 = zext i32 %424 to i64
  br label %426

426:                                              ; preds = %426, %417
  %427 = phi i64 [ 1, %417 ], [ %431, %426 ]
  %428 = call noalias ptr @malloc(i64 noundef %422) #45
  %429 = load ptr, ptr @pathArray, align 8, !tbaa !7
  %430 = getelementptr inbounds %struct.path, ptr %429, i64 %427
  store ptr %428, ptr %430, align 8, !tbaa !610
  %431 = add nuw nsw i64 %427, 1
  %432 = icmp eq i64 %431, %425
  br i1 %432, label %433, label %426, !llvm.loop !830

433:                                              ; preds = %426, %412
  %434 = phi i64 [ %416, %412 ], [ %422, %426 ]
  %435 = call noalias ptr @malloc(i64 noundef %434) #45
  store ptr %435, ptr @tempArray, align 8, !tbaa !7
  store i32 0, ptr @pnodeAlength, align 4, !tbaa !17
  br label %436

436:                                              ; preds = %577, %433
  %437 = phi i32 [ %557, %577 ], [ 0, %433 ]
  %438 = phi i32 [ %.lcssa2, %577 ], [ 0, %433 ]
  store ptr null, ptr @pinlist, align 8, !tbaa !7
  br label %439

439:                                              ; preds = %578, %436
  %440 = phi i32 [ 0, %436 ], [ %581, %578 ]
  %441 = phi i32 [ 0, %436 ], [ %580, %578 ]
  %442 = phi ptr [ null, %436 ], [ %598, %578 ]
  %443 = phi i32 [ %438, %436 ], [ %579, %578 ]
  br label %444

444:                                              ; preds = %612, %439
  %445 = phi i32 [ %441, %439 ], [ %614, %612 ]
  %446 = phi ptr [ %442, %439 ], [ %630, %612 ]
  %447 = phi i32 [ %443, %439 ], [ %613, %612 ]
  br label %448

448:                                              ; preds = %609, %444
  %449 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.734, ptr noundef nonnull %2) #44
  %450 = icmp eq i32 %449, 1
  br i1 %450, label %451, label %640

451:                                              ; preds = %448
  %452 = load i32, ptr %2, align 16
  switch i32 %452, label %609 [
    i32 7628142, label %453
    i32 7235952, label %578
  ]

453:                                              ; preds = %451
  %.lcssa11 = phi i32 [ %440, %451 ]
  %.lcssa8 = phi i32 [ %445, %451 ]
  %.lcssa5 = phi ptr [ %446, %451 ]
  %.lcssa2 = phi i32 [ %447, %451 ]
  %454 = icmp eq i32 %437, 0
  br i1 %454, label %556, label %455

455:                                              ; preds = %453
  %456 = urem i32 %437, 10
  %457 = icmp eq i32 %456, 0
  br i1 %457, label %458, label %463

458:                                              ; preds = %455
  %459 = load ptr, ptr @fpo, align 8, !tbaa !7
  %460 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %459, ptr noundef nonnull @.str.18.752, i32 noundef %437) #43
  %461 = load ptr, ptr @fpo, align 8, !tbaa !7
  %462 = call i32 @fflush(ptr noundef %461) #43
  br label %463

463:                                              ; preds = %458, %455
  %464 = load i32, ptr @pnodeAlength, align 4, !tbaa !17
  %465 = icmp sgt i32 %.lcssa8, %464
  br i1 %465, label %471, label %466

466:                                              ; preds = %463
  %467 = icmp sgt i32 %464, 30
  %468 = shl nsw i32 %.lcssa8, 1
  %469 = icmp slt i32 %468, %464
  %470 = select i1 %467, i1 %469, i1 false
  br i1 %470, label %473, label %555

471:                                              ; preds = %463
  %472 = icmp sgt i32 %464, 0
  br i1 %472, label %473, label %515

473:                                              ; preds = %471, %466
  %474 = load ptr, ptr @pnodeArray, align 8, !tbaa !7
  br label %477

475:                                              ; preds = %497
  %.lcssa12 = phi i32 [ %500, %497 ]
  %476 = icmp sgt i32 %.lcssa12, 0
  br i1 %476, label %503, label %512

477:                                              ; preds = %497, %473
  %478 = phi ptr [ %474, %473 ], [ %498, %497 ]
  %479 = phi i64 [ 1, %473 ], [ %499, %497 ]
  %480 = getelementptr inbounds %struct.dlink2, ptr %478, i64 %479, i32 2
  %481 = load ptr, ptr %480, align 8, !tbaa !531
  %482 = icmp eq ptr %481, null
  br i1 %482, label %490, label %483

483:                                              ; preds = %483, %477
  %484 = phi ptr [ %486, %483 ], [ %481, %477 ]
  %485 = getelementptr inbounds %struct.plist, ptr %484, i64 0, i32 1
  %486 = load ptr, ptr %485, align 8, !tbaa !532
  call void @free(ptr noundef nonnull %484) #44
  %487 = icmp eq ptr %486, null
  br i1 %487, label %488, label %483, !llvm.loop !831

488:                                              ; preds = %483
  %489 = load ptr, ptr @pnodeArray, align 8, !tbaa !7
  br label %490

490:                                              ; preds = %488, %477
  %491 = phi ptr [ %489, %488 ], [ %478, %477 ]
  %492 = getelementptr inbounds %struct.dlink2, ptr %491, i64 %479, i32 1
  %493 = load ptr, ptr %492, align 8, !tbaa !593
  %494 = icmp eq ptr %493, null
  br i1 %494, label %497, label %495

495:                                              ; preds = %490
  call void @free(ptr noundef nonnull %493) #44
  %496 = load ptr, ptr @pnodeArray, align 8, !tbaa !7
  br label %497

497:                                              ; preds = %495, %490
  %498 = phi ptr [ %491, %490 ], [ %496, %495 ]
  %499 = add nuw nsw i64 %479, 1
  %500 = load i32, ptr @pnodeAlength, align 4, !tbaa !17
  %501 = sext i32 %500 to i64
  %502 = icmp slt i64 %479, %501
  br i1 %502, label %477, label %475, !llvm.loop !832

503:                                              ; preds = %503, %475
  %504 = phi i64 [ %508, %503 ], [ 0, %475 ]
  %505 = load ptr, ptr @netSegArray, align 8, !tbaa !7
  %506 = getelementptr inbounds ptr, ptr %505, i64 %504
  %507 = load ptr, ptr %506, align 8, !tbaa !7
  call void @free(ptr noundef %507) #44
  %508 = add nuw nsw i64 %504, 1
  %509 = load i32, ptr @pnodeAlength, align 4, !tbaa !17
  %510 = sext i32 %509 to i64
  %511 = icmp slt i64 %508, %510
  br i1 %511, label %503, label %512, !llvm.loop !833

512:                                              ; preds = %503, %475
  %513 = load ptr, ptr @pnodeArray, align 8, !tbaa !7
  call void @free(ptr noundef %513) #44
  %514 = load ptr, ptr @netSegArray, align 8, !tbaa !7
  call void @free(ptr noundef %514) #44
  br label %515

515:                                              ; preds = %512, %471
  store i32 %.lcssa8, ptr @pnodeAlength, align 4, !tbaa !17
  %516 = add i32 %.lcssa8, 1
  %517 = sext i32 %516 to i64
  %518 = mul nsw i64 %517, 24
  %519 = call noalias ptr @malloc(i64 noundef %518) #45
  store ptr %519, ptr @pnodeArray, align 8, !tbaa !7
  %520 = icmp slt i32 %.lcssa8, 1
  br i1 %520, label %537, label %521

521:                                              ; preds = %515
  %522 = zext i32 %516 to i64
  br label %523

523:                                              ; preds = %523, %521
  %524 = phi i64 [ 1, %521 ], [ %535, %523 ]
  %525 = load i32, ptr @numnodes, align 4, !tbaa !17
  %526 = add i32 %516, %525
  %527 = sext i32 %526 to i64
  %528 = mul nsw i64 %527, 12
  %529 = call noalias ptr @malloc(i64 noundef %528) #45
  %530 = load ptr, ptr @pnodeArray, align 8, !tbaa !7
  %531 = getelementptr inbounds %struct.dlink2, ptr %530, i64 %524, i32 1
  store ptr %529, ptr %531, align 8, !tbaa !593
  %532 = load ptr, ptr @pnodeArray, align 8, !tbaa !7
  %533 = getelementptr inbounds %struct.dlink2, ptr %532, i64 %524
  store i32 0, ptr %533, align 8, !tbaa !529
  %534 = getelementptr inbounds %struct.dlink2, ptr %532, i64 %524, i32 2
  store ptr null, ptr %534, align 8, !tbaa !531
  %535 = add nuw nsw i64 %524, 1
  %536 = icmp eq i64 %535, %522
  br i1 %536, label %537, label %523, !llvm.loop !834

537:                                              ; preds = %523, %515
  %538 = sext i32 %.lcssa8 to i64
  %539 = shl nsw i64 %538, 3
  %540 = call noalias ptr @malloc(i64 noundef %539) #45
  store ptr %540, ptr @netSegArray, align 8, !tbaa !7
  %541 = icmp sgt i32 %.lcssa8, 0
  br i1 %541, label %542, label %555

542:                                              ; preds = %537
  %543 = load i32, ptr @numnodes, align 4, !tbaa !17
  %544 = add i32 %516, %543
  %545 = sext i32 %544 to i64
  %546 = shl nsw i64 %545, 1
  %547 = zext i32 %.lcssa8 to i64
  br label %548

548:                                              ; preds = %548, %542
  %549 = phi i64 [ 0, %542 ], [ %553, %548 ]
  %550 = call noalias ptr @malloc(i64 noundef %546) #45
  %551 = load ptr, ptr @netSegArray, align 8, !tbaa !7
  %552 = getelementptr inbounds ptr, ptr %551, i64 %549
  store ptr %550, ptr %552, align 8, !tbaa !7
  %553 = add nuw nsw i64 %549, 1
  %554 = icmp eq i64 %553, %547
  br i1 %554, label %555, label %548, !llvm.loop !835

555:                                              ; preds = %548, %537, %466
  call void @procesnet(i32 noundef %437, i32 noundef %.lcssa11, i32 noundef %.lcssa8) #44
  br label %556

556:                                              ; preds = %555, %453
  %557 = add nuw nsw i32 %437, 1
  %558 = load ptr, ptr @pinOffset, align 8, !tbaa !7
  %559 = zext i32 %557 to i64
  %560 = getelementptr inbounds i32, ptr %558, i64 %559
  store i32 %.lcssa2, ptr %560, align 4, !tbaa !17
  %561 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.734, ptr noundef nonnull %2) #44
  %562 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %2) #50
  %563 = add i64 %562, 1
  %564 = call noalias ptr @malloc(i64 noundef %563) #45
  %565 = load ptr, ptr @nnameArray, align 8, !tbaa !7
  %566 = getelementptr inbounds ptr, ptr %565, i64 %559
  store ptr %564, ptr %566, align 8, !tbaa !7
  %567 = load ptr, ptr @nnameArray, align 8, !tbaa !7
  %568 = getelementptr inbounds ptr, ptr %567, i64 %559
  %569 = load ptr, ptr %568, align 8, !tbaa !7
  %570 = call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %569, ptr noundef nonnull dereferenceable(1) %2)
  %571 = icmp eq ptr %.lcssa5, null
  br i1 %571, label %577, label %572

572:                                              ; preds = %572, %556
  %573 = phi ptr [ %575, %572 ], [ %.lcssa5, %556 ]
  %574 = getelementptr inbounds %struct.quad, ptr %573, i64 0, i32 5
  %575 = load ptr, ptr %574, align 8, !tbaa !836
  call void @free(ptr noundef nonnull %573) #44
  %576 = icmp eq ptr %575, null
  br i1 %576, label %577, label %572, !llvm.loop !837

577:                                              ; preds = %572, %556
  br label %436, !llvm.loop !838

578:                                              ; preds = %451
  %.lcssa9 = phi i32 [ %445, %451 ]
  %.lcssa6 = phi ptr [ %446, %451 ]
  %.lcssa3 = phi i32 [ %447, %451 ]
  %579 = add nsw i32 %.lcssa3, 1
  %580 = add nsw i32 %.lcssa9, 1
  %581 = add nuw nsw i32 %440, 1
  %582 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.734, ptr noundef nonnull %2) #44
  %583 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %2) #50
  %584 = add i64 %583, 1
  %585 = call noalias ptr @malloc(i64 noundef %584) #45
  %586 = load ptr, ptr @pnameArray, align 8, !tbaa !7
  %587 = sext i32 %579 to i64
  %588 = getelementptr inbounds ptr, ptr %586, i64 %587
  store ptr %585, ptr %588, align 8, !tbaa !7
  %589 = load ptr, ptr @pnameArray, align 8, !tbaa !7
  %590 = getelementptr inbounds ptr, ptr %589, i64 %587
  %591 = load ptr, ptr %590, align 8, !tbaa !7
  %592 = call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %591, ptr noundef nonnull dereferenceable(1) %2)
  %593 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.734, ptr noundef nonnull %2) #44
  %594 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.10.742, ptr noundef nonnull %3, ptr noundef nonnull %4) #44
  %595 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.734, ptr noundef nonnull %2) #44
  %596 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.14.746, ptr noundef nonnull %5) #44
  %597 = icmp eq ptr %.lcssa6, null
  %598 = call noalias dereferenceable_or_null(32) ptr @malloc(i64 noundef 32) #45
  %599 = getelementptr inbounds %struct.quad, ptr %.lcssa6, i64 0, i32 4
  %600 = select i1 %597, ptr @pinlist, ptr %599
  store ptr %598, ptr %600, align 8, !tbaa !7
  %601 = getelementptr inbounds %struct.quad, ptr %598, i64 0, i32 5
  store ptr %.lcssa6, ptr %601, align 8, !tbaa !836
  %602 = getelementptr inbounds %struct.quad, ptr %598, i64 0, i32 4
  store ptr null, ptr %602, align 8, !tbaa !839
  store i32 1, ptr %598, align 8, !tbaa !523
  %603 = load i32, ptr %3, align 4, !tbaa !17
  %604 = getelementptr inbounds %struct.quad, ptr %598, i64 0, i32 1
  store i32 %603, ptr %604, align 4, !tbaa !519
  %605 = load i32, ptr %4, align 4, !tbaa !17
  %606 = getelementptr inbounds %struct.quad, ptr %598, i64 0, i32 2
  store i32 %605, ptr %606, align 8, !tbaa !521
  %607 = load i32, ptr %5, align 4, !tbaa !17
  %608 = getelementptr inbounds %struct.quad, ptr %598, i64 0, i32 3
  store i32 %607, ptr %608, align 4, !tbaa !522
  br label %439, !llvm.loop !838

609:                                              ; preds = %451
  %610 = call i32 @bcmp(ptr noundef nonnull dereferenceable(6) %2, ptr noundef nonnull dereferenceable(6) @.str.16.748, i64 6)
  %611 = icmp eq i32 %610, 0
  br i1 %611, label %612, label %448, !llvm.loop !838

612:                                              ; preds = %609
  %613 = add nsw i32 %447, 1
  %614 = add nsw i32 %445, 1
  %615 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.734, ptr noundef nonnull %2) #44
  %616 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %2) #50
  %617 = add i64 %616, 1
  %618 = call noalias ptr @malloc(i64 noundef %617) #45
  %619 = load ptr, ptr @pnameArray, align 8, !tbaa !7
  %620 = sext i32 %613 to i64
  %621 = getelementptr inbounds ptr, ptr %619, i64 %620
  store ptr %618, ptr %621, align 8, !tbaa !7
  %622 = load ptr, ptr @pnameArray, align 8, !tbaa !7
  %623 = getelementptr inbounds ptr, ptr %622, i64 %620
  %624 = load ptr, ptr %623, align 8, !tbaa !7
  %625 = call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %624, ptr noundef nonnull dereferenceable(1) %2)
  %626 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.734, ptr noundef nonnull %2) #44
  %627 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.10.742, ptr noundef nonnull %3, ptr noundef nonnull %4) #44
  %628 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.734, ptr noundef nonnull %2) #44
  %629 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.14.746, ptr noundef nonnull %5) #44
  %630 = call noalias dereferenceable_or_null(32) ptr @malloc(i64 noundef 32) #45
  %631 = getelementptr inbounds %struct.quad, ptr %446, i64 0, i32 4
  store ptr %630, ptr %631, align 8, !tbaa !839
  %632 = getelementptr inbounds %struct.quad, ptr %630, i64 0, i32 5
  store ptr %446, ptr %632, align 8, !tbaa !836
  %633 = getelementptr inbounds %struct.quad, ptr %630, i64 0, i32 4
  store ptr null, ptr %633, align 8, !tbaa !839
  store i32 -1, ptr %630, align 8, !tbaa !523
  %634 = load i32, ptr %3, align 4, !tbaa !17
  %635 = getelementptr inbounds %struct.quad, ptr %630, i64 0, i32 1
  store i32 %634, ptr %635, align 4, !tbaa !519
  %636 = load i32, ptr %4, align 4, !tbaa !17
  %637 = getelementptr inbounds %struct.quad, ptr %630, i64 0, i32 2
  store i32 %636, ptr %637, align 8, !tbaa !521
  %638 = load i32, ptr %5, align 4, !tbaa !17
  %639 = getelementptr inbounds %struct.quad, ptr %630, i64 0, i32 3
  store i32 %638, ptr %639, align 4, !tbaa !522
  br label %444, !llvm.loop !838

640:                                              ; preds = %448
  %.lcssa13 = phi i32 [ %437, %448 ]
  %.lcssa10 = phi i32 [ %440, %448 ]
  %.lcssa7 = phi i32 [ %445, %448 ]
  %641 = load i32, ptr @pnodeAlength, align 4, !tbaa !17
  %642 = icmp sgt i32 %.lcssa7, %641
  %643 = mul nsw i32 %.lcssa7, 10
  %644 = icmp slt i32 %643, %641
  %645 = select i1 %642, i1 true, i1 %644
  br i1 %645, label %646, label %730

646:                                              ; preds = %640
  %647 = icmp sgt i32 %641, 0
  br i1 %647, label %648, label %690

648:                                              ; preds = %646
  %649 = load ptr, ptr @pnodeArray, align 8, !tbaa !7
  br label %652

650:                                              ; preds = %672
  %.lcssa = phi i32 [ %675, %672 ]
  %651 = icmp sgt i32 %.lcssa, 0
  br i1 %651, label %678, label %687

652:                                              ; preds = %672, %648
  %653 = phi ptr [ %649, %648 ], [ %673, %672 ]
  %654 = phi i64 [ 1, %648 ], [ %674, %672 ]
  %655 = getelementptr inbounds %struct.dlink2, ptr %653, i64 %654, i32 2
  %656 = load ptr, ptr %655, align 8, !tbaa !531
  %657 = icmp eq ptr %656, null
  br i1 %657, label %665, label %658

658:                                              ; preds = %658, %652
  %659 = phi ptr [ %661, %658 ], [ %656, %652 ]
  %660 = getelementptr inbounds %struct.plist, ptr %659, i64 0, i32 1
  %661 = load ptr, ptr %660, align 8, !tbaa !532
  call void @free(ptr noundef nonnull %659) #44
  %662 = icmp eq ptr %661, null
  br i1 %662, label %663, label %658, !llvm.loop !840

663:                                              ; preds = %658
  %664 = load ptr, ptr @pnodeArray, align 8, !tbaa !7
  br label %665

665:                                              ; preds = %663, %652
  %666 = phi ptr [ %664, %663 ], [ %653, %652 ]
  %667 = getelementptr inbounds %struct.dlink2, ptr %666, i64 %654, i32 1
  %668 = load ptr, ptr %667, align 8, !tbaa !593
  %669 = icmp eq ptr %668, null
  br i1 %669, label %672, label %670

670:                                              ; preds = %665
  call void @free(ptr noundef nonnull %668) #44
  %671 = load ptr, ptr @pnodeArray, align 8, !tbaa !7
  br label %672

672:                                              ; preds = %670, %665
  %673 = phi ptr [ %666, %665 ], [ %671, %670 ]
  %674 = add nuw nsw i64 %654, 1
  %675 = load i32, ptr @pnodeAlength, align 4, !tbaa !17
  %676 = sext i32 %675 to i64
  %677 = icmp slt i64 %654, %676
  br i1 %677, label %652, label %650, !llvm.loop !841

678:                                              ; preds = %678, %650
  %679 = phi i64 [ %683, %678 ], [ 0, %650 ]
  %680 = load ptr, ptr @netSegArray, align 8, !tbaa !7
  %681 = getelementptr inbounds ptr, ptr %680, i64 %679
  %682 = load ptr, ptr %681, align 8, !tbaa !7
  call void @free(ptr noundef %682) #44
  %683 = add nuw nsw i64 %679, 1
  %684 = load i32, ptr @pnodeAlength, align 4, !tbaa !17
  %685 = sext i32 %684 to i64
  %686 = icmp slt i64 %683, %685
  br i1 %686, label %678, label %687, !llvm.loop !842

687:                                              ; preds = %678, %650
  %688 = load ptr, ptr @pnodeArray, align 8, !tbaa !7
  call void @free(ptr noundef %688) #44
  %689 = load ptr, ptr @netSegArray, align 8, !tbaa !7
  call void @free(ptr noundef %689) #44
  br label %690

690:                                              ; preds = %687, %646
  store i32 %.lcssa7, ptr @pnodeAlength, align 4, !tbaa !17
  %691 = add i32 %.lcssa7, 1
  %692 = sext i32 %691 to i64
  %693 = mul nsw i64 %692, 24
  %694 = call noalias ptr @malloc(i64 noundef %693) #45
  store ptr %694, ptr @pnodeArray, align 8, !tbaa !7
  %695 = icmp slt i32 %.lcssa7, 1
  br i1 %695, label %712, label %696

696:                                              ; preds = %690
  %697 = zext i32 %691 to i64
  br label %698

698:                                              ; preds = %698, %696
  %699 = phi i64 [ 1, %696 ], [ %710, %698 ]
  %700 = load i32, ptr @numnodes, align 4, !tbaa !17
  %701 = add i32 %691, %700
  %702 = sext i32 %701 to i64
  %703 = mul nsw i64 %702, 12
  %704 = call noalias ptr @malloc(i64 noundef %703) #45
  %705 = load ptr, ptr @pnodeArray, align 8, !tbaa !7
  %706 = getelementptr inbounds %struct.dlink2, ptr %705, i64 %699, i32 1
  store ptr %704, ptr %706, align 8, !tbaa !593
  %707 = load ptr, ptr @pnodeArray, align 8, !tbaa !7
  %708 = getelementptr inbounds %struct.dlink2, ptr %707, i64 %699
  store i32 0, ptr %708, align 8, !tbaa !529
  %709 = getelementptr inbounds %struct.dlink2, ptr %707, i64 %699, i32 2
  store ptr null, ptr %709, align 8, !tbaa !531
  %710 = add nuw nsw i64 %699, 1
  %711 = icmp eq i64 %710, %697
  br i1 %711, label %712, label %698, !llvm.loop !843

712:                                              ; preds = %698, %690
  %713 = sext i32 %.lcssa7 to i64
  %714 = shl nsw i64 %713, 3
  %715 = call noalias ptr @malloc(i64 noundef %714) #45
  store ptr %715, ptr @netSegArray, align 8, !tbaa !7
  %716 = icmp sgt i32 %.lcssa7, 0
  br i1 %716, label %717, label %730

717:                                              ; preds = %712
  %718 = load i32, ptr @numnodes, align 4, !tbaa !17
  %719 = add i32 %691, %718
  %720 = sext i32 %719 to i64
  %721 = shl nsw i64 %720, 1
  %722 = zext i32 %.lcssa7 to i64
  br label %723

723:                                              ; preds = %723, %717
  %724 = phi i64 [ 0, %717 ], [ %728, %723 ]
  %725 = call noalias ptr @malloc(i64 noundef %721) #45
  %726 = load ptr, ptr @netSegArray, align 8, !tbaa !7
  %727 = getelementptr inbounds ptr, ptr %726, i64 %724
  store ptr %725, ptr %727, align 8, !tbaa !7
  %728 = add nuw nsw i64 %724, 1
  %729 = icmp eq i64 %728, %722
  br i1 %729, label %730, label %723, !llvm.loop !844

730:                                              ; preds = %723, %712, %640
  call void @procesnet(i32 noundef %.lcssa13, i32 noundef %.lcssa10, i32 noundef %.lcssa7) #44
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %3) #47
  call void @llvm.lifetime.end.p0(i64 1024, ptr nonnull %2) #47
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @rebin(i32 noundef %0) #12 {
  %2 = load i32, ptr @numBinsX, align 4, !tbaa !17
  %3 = icmp slt i32 %2, 0
  br i1 %3, label %16, label %4

4:                                                ; preds = %1
  %5 = load i32, ptr @numBinsY, align 4, !tbaa !17
  br label %6

6:                                                ; preds = %52, %4
  %7 = phi i32 [ %2, %4 ], [ %53, %52 ]
  %8 = phi i32 [ %5, %4 ], [ %54, %52 ]
  %9 = phi i32 [ %5, %4 ], [ %55, %52 ]
  %10 = phi i64 [ 0, %4 ], [ %56, %52 ]
  %11 = icmp slt i32 %9, 0
  br i1 %11, label %52, label %12

12:                                               ; preds = %6
  %13 = load ptr, ptr @blockarray, align 8
  %14 = getelementptr inbounds ptr, ptr %13, i64 %10
  %15 = load i32, ptr @numcells, align 4, !tbaa !17
  br label %25

16:                                               ; preds = %52, %1
  %17 = load i32, ptr @numcells, align 4
  %18 = load i32, ptr @numpads, align 4, !tbaa !17
  %19 = add nsw i32 %18, %17
  %20 = icmp slt i32 %19, -3
  br i1 %20, label %150, label %21

21:                                               ; preds = %16
  %22 = load ptr, ptr @cellarray, align 8
  %23 = icmp ne i32 %0, 1
  %24 = load ptr, ptr @blockarray, align 8
  br label %59

25:                                               ; preds = %44, %12
  %26 = phi i32 [ %8, %12 ], [ %45, %44 ]
  %27 = phi i32 [ %15, %12 ], [ %46, %44 ]
  %28 = phi i64 [ 0, %12 ], [ %47, %44 ]
  %29 = icmp slt i32 %27, -4
  br i1 %29, label %44, label %30

30:                                               ; preds = %25
  %31 = load ptr, ptr %14, align 8, !tbaa !7
  %32 = getelementptr inbounds ptr, ptr %31, i64 %28
  %33 = load ptr, ptr %32, align 8, !tbaa !7
  br label %34

34:                                               ; preds = %34, %30
  %35 = phi i64 [ 0, %30 ], [ %37, %34 ]
  %36 = getelementptr inbounds i32, ptr %33, i64 %35
  store i32 0, ptr %36, align 4, !tbaa !17
  %37 = add nuw nsw i64 %35, 1
  %38 = load i32, ptr @numcells, align 4, !tbaa !17
  %39 = add nsw i32 %38, 4
  %40 = sext i32 %39 to i64
  %41 = icmp slt i64 %35, %40
  br i1 %41, label %34, label %42, !llvm.loop !845

42:                                               ; preds = %34
  %.lcssa = phi i32 [ %38, %34 ]
  %43 = load i32, ptr @numBinsY, align 4, !tbaa !17
  br label %44

44:                                               ; preds = %42, %25
  %45 = phi i32 [ %43, %42 ], [ %26, %25 ]
  %46 = phi i32 [ %.lcssa, %42 ], [ %27, %25 ]
  %47 = add nuw nsw i64 %28, 1
  %48 = sext i32 %45 to i64
  %49 = icmp slt i64 %28, %48
  br i1 %49, label %25, label %50, !llvm.loop !846

50:                                               ; preds = %44
  %.lcssa1 = phi i32 [ %45, %44 ]
  %51 = load i32, ptr @numBinsX, align 4, !tbaa !17
  br label %52

52:                                               ; preds = %50, %6
  %53 = phi i32 [ %51, %50 ], [ %7, %6 ]
  %54 = phi i32 [ %.lcssa1, %50 ], [ %8, %6 ]
  %55 = phi i32 [ %.lcssa1, %50 ], [ %9, %6 ]
  %56 = add nuw nsw i64 %10, 1
  %57 = sext i32 %53 to i64
  %58 = icmp slt i64 %10, %57
  br i1 %58, label %6, label %16, !llvm.loop !847

59:                                               ; preds = %142, %21
  %60 = phi i32 [ %18, %21 ], [ %143, %142 ]
  %61 = phi i32 [ %17, %21 ], [ %144, %142 ]
  %62 = phi i64 [ 1, %21 ], [ %145, %142 ]
  %63 = phi i32 [ %19, %21 ], [ %146, %142 ]
  %64 = sext i32 %61 to i64
  %65 = icmp sle i64 %62, %64
  %66 = sext i32 %63 to i64
  %67 = icmp sgt i64 %62, %66
  %68 = or i1 %65, %67
  br i1 %68, label %69, label %142

69:                                               ; preds = %59
  %70 = getelementptr inbounds ptr, ptr %22, i64 %62
  %71 = load ptr, ptr %70, align 8, !tbaa !7
  %72 = getelementptr inbounds %struct.cellbox, ptr %71, i64 0, i32 5
  %73 = load i32, ptr %72, align 8, !tbaa !45
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds %struct.cellbox, ptr %71, i64 0, i32 21, i64 %74
  %76 = load ptr, ptr %75, align 8, !tbaa !7
  %77 = getelementptr inbounds %struct.cellbox, ptr %71, i64 0, i32 2
  %78 = getelementptr inbounds %struct.tilebox, ptr %76, i64 0, i32 9
  %79 = load <2 x i32>, ptr %77, align 4, !tbaa !17
  %80 = shufflevector <2 x i32> %79, <2 x i32> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %81 = load <4 x i32>, ptr %78, align 8, !tbaa !17
  %82 = add nsw <4 x i32> %81, %80
  %83 = icmp sgt i64 %62, %64
  %84 = or i1 %23, %83
  br i1 %84, label %91, label %85

85:                                               ; preds = %69
  %86 = getelementptr inbounds %struct.tilebox, ptr %76, i64 0, i32 5
  %87 = load <4 x i32>, ptr %86, align 8, !tbaa !17
  %88 = sub nsw <4 x i32> %82, %87
  %89 = add nsw <4 x i32> %82, %87
  %90 = shufflevector <4 x i32> %88, <4 x i32> %89, <4 x i32> <i32 0, i32 5, i32 2, i32 7>
  br label %91

91:                                               ; preds = %85, %69
  %92 = phi <4 x i32> [ %90, %85 ], [ %82, %69 ]
  %93 = load i32, ptr @binOffsetX, align 4, !tbaa !17
  %94 = extractelement <4 x i32> %92, i64 0
  %95 = sub nsw i32 %94, %93
  %96 = load i32, ptr @binWidthX, align 4, !tbaa !17
  %97 = sdiv i32 %95, %96
  %98 = icmp slt i32 %97, 1
  %99 = load i32, ptr @numBinsX, align 4
  %100 = tail call i32 @llvm.smin.i32(i32 %97, i32 %99)
  %101 = select i1 %98, i32 1, i32 %100
  %102 = extractelement <4 x i32> %92, i64 1
  %103 = sub nsw i32 %102, %93
  %104 = sdiv i32 %103, %96
  %105 = icmp sgt i32 %104, %99
  %106 = tail call i32 @llvm.smax.i32(i32 %104, i32 1)
  %107 = select i1 %105, i32 %99, i32 %106
  %108 = icmp eq i32 %101, %107
  br i1 %108, label %109, label %132

109:                                              ; preds = %91
  %110 = load i32, ptr @binOffsetY, align 4, !tbaa !17
  %111 = extractelement <4 x i32> %92, i64 2
  %112 = sub nsw i32 %111, %110
  %113 = load i32, ptr @binWidthY, align 4, !tbaa !17
  %114 = sdiv i32 %112, %113
  %115 = icmp slt i32 %114, 1
  %116 = load i32, ptr @numBinsY, align 4
  %117 = tail call i32 @llvm.smin.i32(i32 %114, i32 %116)
  %118 = select i1 %115, i32 1, i32 %117
  %119 = extractelement <4 x i32> %92, i64 3
  %120 = sub nsw i32 %119, %110
  %121 = sdiv i32 %120, %113
  %122 = icmp sgt i32 %121, %116
  %123 = tail call i32 @llvm.smax.i32(i32 %121, i32 1)
  %124 = select i1 %122, i32 %116, i32 %123
  %125 = icmp eq i32 %118, %124
  br i1 %125, label %126, label %132

126:                                              ; preds = %109
  %127 = sext i32 %101 to i64
  %128 = getelementptr inbounds ptr, ptr %24, i64 %127
  %129 = load ptr, ptr %128, align 8, !tbaa !7
  %130 = sext i32 %118 to i64
  %131 = getelementptr inbounds ptr, ptr %129, i64 %130
  br label %132

132:                                              ; preds = %126, %109, %91
  %133 = phi ptr [ %131, %126 ], [ @bucket, %109 ], [ @bucket, %91 ]
  %134 = load ptr, ptr %133, align 8, !tbaa !7
  %135 = load i32, ptr %134, align 4, !tbaa !17
  %136 = add nsw i32 %135, 1
  store i32 %136, ptr %134, align 4, !tbaa !17
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds i32, ptr %134, i64 %137
  %139 = trunc i64 %62 to i32
  store i32 %139, ptr %138, align 4, !tbaa !17
  %140 = load i32, ptr @numcells, align 4
  %141 = load i32, ptr @numpads, align 4, !tbaa !17
  br label %142

142:                                              ; preds = %132, %59
  %143 = phi i32 [ %60, %59 ], [ %141, %132 ]
  %144 = phi i32 [ %61, %59 ], [ %140, %132 ]
  %145 = add nuw nsw i64 %62, 1
  %146 = add nsw i32 %143, %144
  %147 = add nsw i32 %146, 4
  %148 = sext i32 %147 to i64
  %149 = icmp slt i64 %62, %148
  br i1 %149, label %59, label %150, !llvm.loop !848

150:                                              ; preds = %142, %16
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @reduceg() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #47
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #47
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #47
  store ptr null, ptr %4, align 8, !tbaa !7
  %5 = tail call noalias dereferenceable_or_null(808) ptr @malloc(i64 noundef 808) #45
  store i32 0, ptr %1, align 4, !tbaa !17
  %6 = load i32, ptr @eNum, align 4, !tbaa !17
  %7 = icmp slt i32 %6, 1
  br i1 %7, label %10, label %8

8:                                                ; preds = %0
  %9 = load ptr, ptr @eArray, align 8, !tbaa !7
  br label %15

10:                                               ; preds = %15, %0
  %11 = load i32, ptr @numRects, align 4, !tbaa !17
  %12 = icmp slt i32 %11, 1
  br i1 %12, label %22, label %13

13:                                               ; preds = %10
  %14 = load ptr, ptr @rectArray, align 8, !tbaa !7
  br label %25

15:                                               ; preds = %15, %8
  %16 = phi i64 [ 1, %8 ], [ %18, %15 ]
  %17 = getelementptr inbounds %struct.ebox, ptr %9, i64 %16, i32 11
  store i32 0, ptr %17, align 4, !tbaa !414
  %18 = add nuw nsw i64 %16, 1
  %19 = load i32, ptr @eNum, align 4, !tbaa !17
  %20 = sext i32 %19 to i64
  %21 = icmp slt i64 %16, %20
  br i1 %21, label %15, label %10, !llvm.loop !849

22:                                               ; preds = %25, %10
  %23 = load i32, ptr @numXnodes, align 4, !tbaa !17
  %24 = icmp slt i32 %23, 1
  br i1 %24, label %32, label %36

25:                                               ; preds = %25, %13
  %26 = phi i64 [ 1, %13 ], [ %28, %25 ]
  %27 = getelementptr inbounds %struct.rect, ptr %14, i64 %26, i32 8
  %28 = add nuw nsw i64 %26, 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %27, i8 0, i64 16, i1 false)
  %29 = load i32, ptr @numRects, align 4, !tbaa !17
  %30 = sext i32 %29 to i64
  %31 = icmp slt i64 %26, %30
  br i1 %31, label %25, label %22, !llvm.loop !850

32:                                               ; preds = %121, %22
  %33 = phi ptr [ %5, %22 ], [ %123, %121 ]
  %34 = load i32, ptr @numYnodes, align 4, !tbaa !17
  %35 = icmp slt i32 %34, 1
  br i1 %35, label %127, label %129

36:                                               ; preds = %121, %22
  %37 = phi i32 [ %122, %121 ], [ %23, %22 ]
  %38 = phi i64 [ %124, %121 ], [ 1, %22 ]
  %39 = phi ptr [ %123, %121 ], [ %5, %22 ]
  %40 = load ptr, ptr @xNodeArray, align 8, !tbaa !7
  %41 = getelementptr inbounds ptr, ptr %40, i64 %38
  %42 = load ptr, ptr %41, align 8, !tbaa !7
  %43 = icmp eq ptr %42, null
  br i1 %43, label %121, label %44

44:                                               ; preds = %114, %36
  %45 = phi ptr [ %117, %114 ], [ %42, %36 ]
  %46 = phi ptr [ %115, %114 ], [ %39, %36 ]
  %47 = load i32, ptr %45, align 8, !tbaa !198
  %48 = icmp eq i32 %47, 1
  br i1 %48, label %114, label %49

49:                                               ; preds = %44
  %50 = getelementptr inbounds %struct.wcbox, ptr %45, i64 0, i32 2
  %51 = load ptr, ptr %50, align 8, !tbaa !199
  %52 = load i32, ptr %51, align 4, !tbaa !17
  %53 = load i32, ptr %1, align 4, !tbaa !17
  %54 = add nsw i32 %53, 1
  store i32 %54, ptr %1, align 4, !tbaa !17
  %55 = srem i32 %54, 100
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %62

57:                                               ; preds = %49
  %58 = add nsw i32 %53, 101
  %59 = sext i32 %58 to i64
  %60 = shl nsw i64 %59, 3
  %61 = call ptr @realloc(ptr noundef %46, i64 noundef %60) #46
  br label %62

62:                                               ; preds = %57, %49
  %63 = phi ptr [ %61, %57 ], [ %46, %49 ]
  %64 = icmp slt i32 %52, 1
  br i1 %64, label %81, label %65

65:                                               ; preds = %62
  %66 = load ptr, ptr @eArray, align 8, !tbaa !7
  %67 = load ptr, ptr %50, align 8, !tbaa !199
  %68 = add nuw i32 %52, 1
  %69 = zext i32 %68 to i64
  br label %70

70:                                               ; preds = %70, %65
  %71 = phi i64 [ 1, %65 ], [ %79, %70 ]
  %72 = phi i32 [ 0, %65 ], [ %78, %70 ]
  %73 = getelementptr inbounds i32, ptr %67, i64 %71
  %74 = load i32, ptr %73, align 4, !tbaa !17
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds %struct.ebox, ptr %66, i64 %75, i32 5
  %77 = load i32, ptr %76, align 4, !tbaa !119
  %78 = add nsw i32 %72, %77
  %79 = add nuw nsw i64 %71, 1
  %80 = icmp eq i64 %79, %69
  br i1 %80, label %81, label %70, !llvm.loop !851

81:                                               ; preds = %70, %62
  %82 = phi i32 [ 0, %62 ], [ %78, %70 ]
  %83 = sdiv i32 %82, %52
  store i32 %83, ptr %2, align 4, !tbaa !17
  %84 = load i32, ptr %1, align 4, !tbaa !17
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds ptr, ptr %63, i64 %85
  store ptr %45, ptr %86, align 8, !tbaa !7
  %87 = sub nsw i32 0, %83
  call void @tinsert(ptr noundef nonnull %4, i32 noundef %87, i32 noundef %84) #44
  %88 = load ptr, ptr @eArray, align 8, !tbaa !7
  %89 = load ptr, ptr %50, align 8, !tbaa !199
  %90 = getelementptr inbounds i32, ptr %89, i64 1
  %91 = load i32, ptr %90, align 4, !tbaa !17
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds %struct.ebox, ptr %88, i64 %92
  %94 = load i32, ptr %93, align 8, !tbaa !114
  %95 = getelementptr inbounds %struct.ebox, ptr %88, i64 %92, i32 1
  %96 = load i32, ptr %95, align 4, !tbaa !116
  %97 = load ptr, ptr @rectArray, align 8, !tbaa !7
  %98 = sext i32 %96 to i64
  %99 = getelementptr inbounds %struct.rect, ptr %97, i64 %98, i32 11
  store i32 1, ptr %99, align 4, !tbaa !341
  %100 = sext i32 %94 to i64
  %101 = getelementptr inbounds %struct.rect, ptr %97, i64 %100, i32 9
  store i32 1, ptr %101, align 4, !tbaa !339
  %102 = sext i32 %52 to i64
  %103 = getelementptr inbounds i32, ptr %89, i64 %102
  %104 = load i32, ptr %103, align 4, !tbaa !17
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds %struct.ebox, ptr %88, i64 %105
  %107 = load i32, ptr %106, align 8, !tbaa !114
  %108 = getelementptr inbounds %struct.ebox, ptr %88, i64 %105, i32 1
  %109 = load i32, ptr %108, align 4, !tbaa !116
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds %struct.rect, ptr %97, i64 %110, i32 10
  store i32 1, ptr %111, align 4, !tbaa !340
  %112 = sext i32 %107 to i64
  %113 = getelementptr inbounds %struct.rect, ptr %97, i64 %112, i32 8
  store i32 1, ptr %113, align 4, !tbaa !338
  br label %114

114:                                              ; preds = %81, %44
  %115 = phi ptr [ %46, %44 ], [ %63, %81 ]
  %116 = getelementptr inbounds %struct.wcbox, ptr %45, i64 0, i32 4
  %117 = load ptr, ptr %116, align 8, !tbaa !7
  %118 = icmp eq ptr %117, null
  br i1 %118, label %119, label %44, !llvm.loop !852

119:                                              ; preds = %114
  %.lcssa17 = phi ptr [ %115, %114 ]
  %120 = load i32, ptr @numXnodes, align 4, !tbaa !17
  br label %121

121:                                              ; preds = %119, %36
  %122 = phi i32 [ %37, %36 ], [ %120, %119 ]
  %123 = phi ptr [ %39, %36 ], [ %.lcssa17, %119 ]
  %124 = add nuw nsw i64 %38, 1
  %125 = sext i32 %122 to i64
  %126 = icmp slt i64 %38, %125
  br i1 %126, label %36, label %32, !llvm.loop !853

127:                                              ; preds = %214, %32
  %128 = phi ptr [ %33, %32 ], [ %216, %214 ]
  br label %221

129:                                              ; preds = %214, %32
  %130 = phi i32 [ %215, %214 ], [ %34, %32 ]
  %131 = phi i64 [ %217, %214 ], [ 1, %32 ]
  %132 = phi ptr [ %216, %214 ], [ %33, %32 ]
  %133 = load ptr, ptr @yNodeArray, align 8, !tbaa !7
  %134 = getelementptr inbounds ptr, ptr %133, i64 %131
  %135 = load ptr, ptr %134, align 8, !tbaa !7
  %136 = icmp eq ptr %135, null
  br i1 %136, label %214, label %137

137:                                              ; preds = %207, %129
  %138 = phi ptr [ %210, %207 ], [ %135, %129 ]
  %139 = phi ptr [ %208, %207 ], [ %132, %129 ]
  %140 = load i32, ptr %138, align 8, !tbaa !198
  %141 = icmp eq i32 %140, 1
  br i1 %141, label %207, label %142

142:                                              ; preds = %137
  %143 = getelementptr inbounds %struct.wcbox, ptr %138, i64 0, i32 2
  %144 = load ptr, ptr %143, align 8, !tbaa !199
  %145 = load i32, ptr %144, align 4, !tbaa !17
  %146 = load i32, ptr %1, align 4, !tbaa !17
  %147 = add nsw i32 %146, 1
  store i32 %147, ptr %1, align 4, !tbaa !17
  %148 = srem i32 %147, 100
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %150, label %155

150:                                              ; preds = %142
  %151 = add nsw i32 %146, 101
  %152 = sext i32 %151 to i64
  %153 = shl nsw i64 %152, 3
  %154 = call ptr @realloc(ptr noundef %139, i64 noundef %153) #46
  br label %155

155:                                              ; preds = %150, %142
  %156 = phi ptr [ %154, %150 ], [ %139, %142 ]
  %157 = icmp slt i32 %145, 1
  br i1 %157, label %174, label %158

158:                                              ; preds = %155
  %159 = load ptr, ptr @eArray, align 8, !tbaa !7
  %160 = load ptr, ptr %143, align 8, !tbaa !199
  %161 = add nuw i32 %145, 1
  %162 = zext i32 %161 to i64
  br label %163

163:                                              ; preds = %163, %158
  %164 = phi i64 [ 1, %158 ], [ %172, %163 ]
  %165 = phi i32 [ 0, %158 ], [ %171, %163 ]
  %166 = getelementptr inbounds i32, ptr %160, i64 %164
  %167 = load i32, ptr %166, align 4, !tbaa !17
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds %struct.ebox, ptr %159, i64 %168, i32 5
  %170 = load i32, ptr %169, align 4, !tbaa !119
  %171 = add nsw i32 %165, %170
  %172 = add nuw nsw i64 %164, 1
  %173 = icmp eq i64 %172, %162
  br i1 %173, label %174, label %163, !llvm.loop !854

174:                                              ; preds = %163, %155
  %175 = phi i32 [ 0, %155 ], [ %171, %163 ]
  %176 = sdiv i32 %175, %145
  store i32 %176, ptr %2, align 4, !tbaa !17
  %177 = load i32, ptr %1, align 4, !tbaa !17
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds ptr, ptr %156, i64 %178
  store ptr %138, ptr %179, align 8, !tbaa !7
  %180 = sub nsw i32 0, %176
  call void @tinsert(ptr noundef nonnull %4, i32 noundef %180, i32 noundef %177) #44
  %181 = load ptr, ptr @eArray, align 8, !tbaa !7
  %182 = load ptr, ptr %143, align 8, !tbaa !199
  %183 = getelementptr inbounds i32, ptr %182, i64 1
  %184 = load i32, ptr %183, align 4, !tbaa !17
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds %struct.ebox, ptr %181, i64 %185
  %187 = load i32, ptr %186, align 8, !tbaa !114
  %188 = getelementptr inbounds %struct.ebox, ptr %181, i64 %185, i32 1
  %189 = load i32, ptr %188, align 4, !tbaa !116
  %190 = load ptr, ptr @rectArray, align 8, !tbaa !7
  %191 = sext i32 %189 to i64
  %192 = getelementptr inbounds %struct.rect, ptr %190, i64 %191, i32 11
  store i32 1, ptr %192, align 4, !tbaa !341
  %193 = sext i32 %187 to i64
  %194 = getelementptr inbounds %struct.rect, ptr %190, i64 %193, i32 10
  store i32 1, ptr %194, align 4, !tbaa !340
  %195 = sext i32 %145 to i64
  %196 = getelementptr inbounds i32, ptr %182, i64 %195
  %197 = load i32, ptr %196, align 4, !tbaa !17
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds %struct.ebox, ptr %181, i64 %198
  %200 = load i32, ptr %199, align 8, !tbaa !114
  %201 = getelementptr inbounds %struct.ebox, ptr %181, i64 %198, i32 1
  %202 = load i32, ptr %201, align 4, !tbaa !116
  %203 = sext i32 %202 to i64
  %204 = getelementptr inbounds %struct.rect, ptr %190, i64 %203, i32 9
  store i32 1, ptr %204, align 4, !tbaa !339
  %205 = sext i32 %200 to i64
  %206 = getelementptr inbounds %struct.rect, ptr %190, i64 %205, i32 8
  store i32 1, ptr %206, align 4, !tbaa !338
  br label %207

207:                                              ; preds = %174, %137
  %208 = phi ptr [ %139, %137 ], [ %156, %174 ]
  %209 = getelementptr inbounds %struct.wcbox, ptr %138, i64 0, i32 4
  %210 = load ptr, ptr %209, align 8, !tbaa !7
  %211 = icmp eq ptr %210, null
  br i1 %211, label %212, label %137, !llvm.loop !855

212:                                              ; preds = %207
  %.lcssa16 = phi ptr [ %208, %207 ]
  %213 = load i32, ptr @numYnodes, align 4, !tbaa !17
  br label %214

214:                                              ; preds = %212, %129
  %215 = phi i32 [ %130, %129 ], [ %213, %212 ]
  %216 = phi ptr [ %132, %129 ], [ %.lcssa16, %212 ]
  %217 = add nuw nsw i64 %131, 1
  %218 = sext i32 %215 to i64
  %219 = icmp slt i64 %131, %218
  br i1 %219, label %129, label %127, !llvm.loop !856

220:                                              ; preds = %428
  %.lcssa15 = phi i32 [ %429, %428 ]
  br label %221, !llvm.loop !857

221:                                              ; preds = %220, %127
  %222 = phi i32 [ undef, %127 ], [ %.lcssa15, %220 ]
  br label %223

223:                                              ; preds = %231, %221
  call void @tpop(ptr noundef nonnull %4, ptr noundef nonnull %3, ptr noundef nonnull %2, ptr noundef nonnull %1) #44
  %224 = load ptr, ptr %3, align 8, !tbaa !7
  %225 = icmp eq ptr %224, null
  br i1 %225, label %226, label %231

226:                                              ; preds = %223
  %227 = load i32, ptr @numRects, align 4, !tbaa !17
  %228 = icmp slt i32 %227, 1
  br i1 %228, label %433, label %229

229:                                              ; preds = %226
  %230 = load ptr, ptr @rectArray, align 8, !tbaa !7
  br label %438

231:                                              ; preds = %223
  %232 = load i32, ptr %1, align 4, !tbaa !17
  %233 = sext i32 %232 to i64
  %234 = getelementptr inbounds ptr, ptr %128, i64 %233
  %235 = load ptr, ptr %234, align 8, !tbaa !7
  %236 = getelementptr inbounds %struct.wcbox, ptr %235, i64 0, i32 2
  %237 = load ptr, ptr %236, align 8, !tbaa !199
  %238 = load i32, ptr %237, align 4, !tbaa !17
  %239 = icmp eq i32 %238, 1
  br i1 %239, label %223, label %240

240:                                              ; preds = %231
  %.lcssa14 = phi ptr [ %237, %231 ]
  %.lcssa13 = phi i32 [ %238, %231 ]
  %241 = getelementptr inbounds i32, ptr %.lcssa14, i64 1
  %242 = load i32, ptr %241, align 4, !tbaa !17
  %243 = load i32, ptr @edgeTransition, align 4, !tbaa !17
  %244 = icmp sgt i32 %242, %243
  %245 = load ptr, ptr @eArray, align 8, !tbaa !7
  %246 = load ptr, ptr @rectArray, align 8, !tbaa !7
  br label %247

247:                                              ; preds = %428, %240
  %248 = phi i32 [ %222, %240 ], [ %429, %428 ]
  %249 = phi i32 [ 1, %240 ], [ %430, %428 ]
  %250 = phi i32 [ 1, %240 ], [ %431, %428 ]
  %251 = sext i32 %250 to i64
  %252 = getelementptr inbounds i32, ptr %.lcssa14, i64 %251
  %253 = load i32, ptr %252, align 4, !tbaa !17
  %254 = sext i32 %253 to i64
  %255 = getelementptr inbounds %struct.ebox, ptr %245, i64 %254
  %256 = load i32, ptr %255, align 8, !tbaa !114
  %257 = sext i32 %256 to i64
  %258 = getelementptr inbounds %struct.rect, ptr %246, i64 %257, i32 8
  %259 = load i32, ptr %258, align 4, !tbaa !338
  %260 = icmp eq i32 %259, 0
  br i1 %260, label %261, label %263

261:                                              ; preds = %247
  %262 = add nsw i32 %250, 1
  br label %428

263:                                              ; preds = %247
  %264 = getelementptr inbounds %struct.ebox, ptr %245, i64 %254, i32 4
  %265 = load i32, ptr %264, align 8, !tbaa !118
  %266 = sext i32 %249 to i64
  %267 = getelementptr inbounds i32, ptr %.lcssa14, i64 %266
  %268 = load i32, ptr %267, align 4, !tbaa !17
  %269 = sext i32 %268 to i64
  %270 = getelementptr inbounds %struct.ebox, ptr %245, i64 %269, i32 3
  %271 = load i32, ptr %270, align 4, !tbaa !117
  %272 = add nsw i32 %271, %265
  %273 = sdiv i32 %272, 2
  %274 = icmp sgt i32 %249, %250
  br i1 %244, label %278, label %275

275:                                              ; preds = %263
  br i1 %274, label %343, label %276

276:                                              ; preds = %275
  %277 = add i32 %250, 1
  br label %281

278:                                              ; preds = %263
  br i1 %274, label %343, label %279

279:                                              ; preds = %278
  %280 = add i32 %250, 1
  br label %312

281:                                              ; preds = %281, %276
  %282 = phi i64 [ %266, %276 ], [ %309, %281 ]
  %283 = phi i32 [ 10000000, %276 ], [ %308, %281 ]
  %284 = phi i32 [ %248, %276 ], [ %307, %281 ]
  %285 = getelementptr inbounds i32, ptr %.lcssa14, i64 %282
  %286 = load i32, ptr %285, align 4, !tbaa !17
  %287 = sext i32 %286 to i64
  %288 = getelementptr inbounds %struct.ebox, ptr %245, i64 %287
  %289 = load i32, ptr %288, align 8, !tbaa !114
  %290 = getelementptr inbounds %struct.ebox, ptr %245, i64 %287, i32 1
  %291 = load i32, ptr %290, align 4, !tbaa !116
  %292 = sext i32 %289 to i64
  %293 = getelementptr inbounds %struct.rect, ptr %246, i64 %292
  %294 = load i32, ptr %293, align 4, !tbaa !123
  %295 = sub nsw i32 %294, %273
  %296 = call i32 @llvm.abs.i32(i32 %295, i1 true)
  %297 = icmp slt i32 %296, %283
  %298 = call i32 @llvm.smin.i32(i32 %296, i32 %283)
  %299 = sext i32 %291 to i64
  %300 = getelementptr inbounds %struct.rect, ptr %246, i64 %299
  %301 = load i32, ptr %300, align 4, !tbaa !123
  %302 = sub nsw i32 %301, %273
  %303 = call i32 @llvm.abs.i32(i32 %302, i1 true)
  %304 = icmp slt i32 %303, %298
  %305 = select i1 %304, i1 true, i1 %297
  %306 = trunc i64 %282 to i32
  %307 = select i1 %305, i32 %306, i32 %284
  %308 = call i32 @llvm.smin.i32(i32 %303, i32 %298)
  %309 = add nsw i64 %282, 1
  %310 = trunc i64 %309 to i32
  %311 = icmp eq i32 %277, %310
  br i1 %311, label %343, label %281, !llvm.loop !858

312:                                              ; preds = %312, %279
  %313 = phi i64 [ %266, %279 ], [ %340, %312 ]
  %314 = phi i32 [ 10000000, %279 ], [ %339, %312 ]
  %315 = phi i32 [ %248, %279 ], [ %338, %312 ]
  %316 = getelementptr inbounds i32, ptr %.lcssa14, i64 %313
  %317 = load i32, ptr %316, align 4, !tbaa !17
  %318 = sext i32 %317 to i64
  %319 = getelementptr inbounds %struct.ebox, ptr %245, i64 %318
  %320 = load i32, ptr %319, align 8, !tbaa !114
  %321 = getelementptr inbounds %struct.ebox, ptr %245, i64 %318, i32 1
  %322 = load i32, ptr %321, align 4, !tbaa !116
  %323 = sext i32 %320 to i64
  %324 = getelementptr inbounds %struct.rect, ptr %246, i64 %323, i32 1
  %325 = load i32, ptr %324, align 4, !tbaa !125
  %326 = sub nsw i32 %325, %273
  %327 = call i32 @llvm.abs.i32(i32 %326, i1 true)
  %328 = icmp slt i32 %327, %314
  %329 = call i32 @llvm.smin.i32(i32 %327, i32 %314)
  %330 = sext i32 %322 to i64
  %331 = getelementptr inbounds %struct.rect, ptr %246, i64 %330, i32 1
  %332 = load i32, ptr %331, align 4, !tbaa !125
  %333 = sub nsw i32 %332, %273
  %334 = call i32 @llvm.abs.i32(i32 %333, i1 true)
  %335 = icmp slt i32 %334, %329
  %336 = select i1 %335, i1 true, i1 %328
  %337 = trunc i64 %313 to i32
  %338 = select i1 %336, i32 %337, i32 %315
  %339 = call i32 @llvm.smin.i32(i32 %334, i32 %329)
  %340 = add nsw i64 %313, 1
  %341 = trunc i64 %340 to i32
  %342 = icmp eq i32 %280, %341
  br i1 %342, label %343, label %312, !llvm.loop !859

343:                                              ; preds = %312, %281, %278, %275
  %344 = phi i32 [ %248, %278 ], [ %248, %275 ], [ %338, %312 ], [ %307, %281 ]
  %345 = icmp sgt i32 %249, %250
  br i1 %345, label %346, label %348

346:                                              ; preds = %343
  %347 = add nsw i32 %250, 1
  br label %428

348:                                              ; preds = %343
  %349 = sext i32 %344 to i64
  %350 = add i32 %250, 1
  %351 = icmp eq i32 %249, %250
  %352 = icmp eq i32 %249, %250
  br label %353

353:                                              ; preds = %424, %348
  %354 = phi i64 [ %266, %348 ], [ %425, %424 ]
  %355 = getelementptr inbounds i32, ptr %.lcssa14, i64 %354
  %356 = load i32, ptr %355, align 4, !tbaa !17
  %357 = sext i32 %356 to i64
  %358 = getelementptr inbounds %struct.ebox, ptr %245, i64 %357
  %359 = load i32, ptr %358, align 8, !tbaa !114
  %360 = getelementptr inbounds %struct.ebox, ptr %245, i64 %357, i32 1
  %361 = load i32, ptr %360, align 4, !tbaa !116
  %362 = icmp eq i64 %354, %349
  br i1 %362, label %365, label %363

363:                                              ; preds = %353
  %364 = getelementptr inbounds %struct.ebox, ptr %245, i64 %357, i32 11
  store i32 1, ptr %364, align 4, !tbaa !414
  br label %378

365:                                              ; preds = %353
  %366 = load i32, ptr %252, align 4, !tbaa !17
  %367 = sext i32 %366 to i64
  %368 = getelementptr inbounds %struct.ebox, ptr %245, i64 %367, i32 4
  %369 = load i32, ptr %368, align 8, !tbaa !118
  %370 = getelementptr inbounds %struct.ebox, ptr %245, i64 %357, i32 4
  store i32 %369, ptr %370, align 8, !tbaa !118
  %371 = load i32, ptr %267, align 4, !tbaa !17
  %372 = sext i32 %371 to i64
  %373 = getelementptr inbounds %struct.ebox, ptr %245, i64 %372, i32 3
  %374 = load i32, ptr %373, align 4, !tbaa !117
  %375 = load i32, ptr %355, align 4, !tbaa !17
  %376 = sext i32 %375 to i64
  %377 = getelementptr inbounds %struct.ebox, ptr %245, i64 %376, i32 3
  store i32 %374, ptr %377, align 4, !tbaa !117
  br label %378

378:                                              ; preds = %365, %363
  %379 = icmp eq i64 %354, %266
  br i1 %379, label %380, label %384

380:                                              ; preds = %378
  %381 = sext i32 %359 to i64
  %382 = getelementptr inbounds %struct.rect, ptr %246, i64 %381, i32 8
  store i32 1, ptr %382, align 4, !tbaa !338
  %383 = sext i32 %361 to i64
  br i1 %244, label %386, label %388

384:                                              ; preds = %378
  %385 = icmp eq i64 %354, %251
  br i1 %385, label %390, label %405

386:                                              ; preds = %380
  %387 = getelementptr inbounds %struct.rect, ptr %246, i64 %383, i32 9
  store i32 1, ptr %387, align 4, !tbaa !339
  br i1 %352, label %397, label %405

388:                                              ; preds = %380
  %389 = getelementptr inbounds %struct.rect, ptr %246, i64 %383, i32 10
  store i32 1, ptr %389, align 4, !tbaa !340
  br i1 %351, label %393, label %405

390:                                              ; preds = %384
  %391 = sext i32 %359 to i64
  %392 = sext i32 %361 to i64
  br i1 %244, label %397, label %393

393:                                              ; preds = %390, %388
  %394 = phi i64 [ %383, %388 ], [ %392, %390 ]
  %395 = phi i64 [ %381, %388 ], [ %391, %390 ]
  %396 = getelementptr inbounds %struct.rect, ptr %246, i64 %395, i32 9
  br label %401

397:                                              ; preds = %390, %386
  %398 = phi i64 [ %383, %386 ], [ %392, %390 ]
  %399 = phi i64 [ %381, %386 ], [ %391, %390 ]
  %400 = getelementptr inbounds %struct.rect, ptr %246, i64 %399, i32 10
  br label %401

401:                                              ; preds = %397, %393
  %402 = phi ptr [ %396, %393 ], [ %400, %397 ]
  %403 = phi i64 [ %394, %393 ], [ %398, %397 ]
  store i32 1, ptr %402, align 4, !tbaa !17
  %404 = getelementptr inbounds %struct.rect, ptr %246, i64 %403, i32 11
  store i32 1, ptr %404, align 4, !tbaa !341
  br label %405

405:                                              ; preds = %401, %388, %386, %384
  %406 = icmp sgt i64 %354, %266
  %407 = icmp slt i64 %354, %251
  %408 = and i1 %406, %407
  br i1 %408, label %409, label %424

409:                                              ; preds = %405
  %410 = sext i32 %359 to i64
  %411 = sext i32 %361 to i64
  br i1 %244, label %417, label %412

412:                                              ; preds = %409
  %413 = getelementptr inbounds %struct.rect, ptr %246, i64 %410, i32 9
  store i32 1, ptr %413, align 4, !tbaa !339
  %414 = getelementptr inbounds %struct.rect, ptr %246, i64 %410, i32 8
  store i32 1, ptr %414, align 4, !tbaa !338
  %415 = getelementptr inbounds %struct.rect, ptr %246, i64 %411, i32 11
  store i32 1, ptr %415, align 4, !tbaa !341
  %416 = getelementptr inbounds %struct.rect, ptr %246, i64 %411, i32 10
  br label %422

417:                                              ; preds = %409
  %418 = getelementptr inbounds %struct.rect, ptr %246, i64 %410, i32 8
  store i32 1, ptr %418, align 4, !tbaa !338
  %419 = getelementptr inbounds %struct.rect, ptr %246, i64 %410, i32 10
  store i32 1, ptr %419, align 4, !tbaa !340
  %420 = getelementptr inbounds %struct.rect, ptr %246, i64 %411, i32 9
  store i32 1, ptr %420, align 4, !tbaa !339
  %421 = getelementptr inbounds %struct.rect, ptr %246, i64 %411, i32 11
  br label %422

422:                                              ; preds = %417, %412
  %423 = phi ptr [ %421, %417 ], [ %416, %412 ]
  store i32 1, ptr %423, align 4, !tbaa !17
  br label %424

424:                                              ; preds = %422, %405
  %425 = add nsw i64 %354, 1
  %426 = trunc i64 %425 to i32
  %427 = icmp eq i32 %350, %426
  br i1 %427, label %428, label %353, !llvm.loop !860

428:                                              ; preds = %424, %346, %261
  %429 = phi i32 [ %248, %261 ], [ %344, %346 ], [ %344, %424 ]
  %430 = phi i32 [ %249, %261 ], [ %347, %346 ], [ %350, %424 ]
  %431 = phi i32 [ %262, %261 ], [ %347, %346 ], [ %350, %424 ]
  %432 = icmp sgt i32 %431, %.lcssa13
  br i1 %432, label %220, label %247, !llvm.loop !857

433:                                              ; preds = %438, %226
  %434 = load i32, ptr @numXnodes, align 4, !tbaa !17
  %435 = icmp slt i32 %434, 1
  br i1 %435, label %445, label %436

436:                                              ; preds = %433
  %437 = load ptr, ptr @xNodeArray, align 8, !tbaa !7
  br label %449

438:                                              ; preds = %438, %229
  %439 = phi i64 [ 1, %229 ], [ %441, %438 ]
  %440 = getelementptr inbounds %struct.rect, ptr %230, i64 %439, i32 12
  store i32 0, ptr %440, align 4, !tbaa !861
  %441 = add nuw nsw i64 %439, 1
  %442 = load i32, ptr @numRects, align 4, !tbaa !17
  %443 = sext i32 %442 to i64
  %444 = icmp slt i64 %439, %443
  br i1 %444, label %438, label %433, !llvm.loop !862

445:                                              ; preds = %500, %433
  %446 = load i32, ptr @numYnodes, align 4, !tbaa !17
  %447 = icmp slt i32 %446, 1
  %448 = load ptr, ptr @yNodeArray, align 8
  br i1 %447, label %507, label %511

449:                                              ; preds = %500, %436
  %450 = phi i32 [ %434, %436 ], [ %501, %500 ]
  %451 = phi i64 [ 1, %436 ], [ %502, %500 ]
  %452 = getelementptr inbounds ptr, ptr %437, i64 %451
  %453 = load ptr, ptr %452, align 8, !tbaa !7
  %454 = icmp eq ptr %453, null
  br i1 %454, label %500, label %455

455:                                              ; preds = %449
  %456 = load ptr, ptr @eArray, align 8
  br label %457

457:                                              ; preds = %494, %455
  %458 = phi ptr [ %453, %455 ], [ %496, %494 ]
  %459 = load i32, ptr %458, align 8, !tbaa !198
  %460 = icmp eq i32 %459, 1
  br i1 %460, label %494, label %461

461:                                              ; preds = %457
  %462 = getelementptr inbounds %struct.wcbox, ptr %458, i64 0, i32 2
  %463 = load ptr, ptr %462, align 8, !tbaa !199
  %464 = load i32, ptr %463, align 4, !tbaa !17
  %465 = icmp slt i32 %464, 1
  br i1 %465, label %494, label %466

466:                                              ; preds = %461
  %467 = load ptr, ptr @rectArray, align 8
  %468 = add nuw i32 %464, 1
  %469 = zext i32 %468 to i64
  br label %470

470:                                              ; preds = %491, %466
  %471 = phi i64 [ 1, %466 ], [ %492, %491 ]
  %472 = getelementptr inbounds i32, ptr %463, i64 %471
  %473 = load i32, ptr %472, align 4, !tbaa !17
  %474 = sext i32 %473 to i64
  %475 = getelementptr inbounds %struct.ebox, ptr %456, i64 %474, i32 11
  %476 = load i32, ptr %475, align 4, !tbaa !414
  %477 = icmp eq i32 %476, 1
  br i1 %477, label %491, label %478

478:                                              ; preds = %470
  %479 = getelementptr inbounds %struct.ebox, ptr %456, i64 %474
  %480 = load i32, ptr %479, align 8, !tbaa !114
  %481 = getelementptr inbounds %struct.ebox, ptr %456, i64 %474, i32 1
  %482 = load i32, ptr %481, align 4, !tbaa !116
  %483 = sext i32 %482 to i64
  %484 = getelementptr inbounds %struct.rect, ptr %467, i64 %483, i32 12
  %485 = load i32, ptr %484, align 4, !tbaa !861
  %486 = add nsw i32 %485, 1
  store i32 %486, ptr %484, align 4, !tbaa !861
  %487 = sext i32 %480 to i64
  %488 = getelementptr inbounds %struct.rect, ptr %467, i64 %487, i32 12
  %489 = load i32, ptr %488, align 4, !tbaa !861
  %490 = add nsw i32 %489, 1
  store i32 %490, ptr %488, align 4, !tbaa !861
  br label %491

491:                                              ; preds = %478, %470
  %492 = add nuw nsw i64 %471, 1
  %493 = icmp eq i64 %492, %469
  br i1 %493, label %494, label %470, !llvm.loop !863

494:                                              ; preds = %491, %461, %457
  %495 = getelementptr inbounds %struct.wcbox, ptr %458, i64 0, i32 4
  %496 = load ptr, ptr %495, align 8, !tbaa !7
  %497 = icmp eq ptr %496, null
  br i1 %497, label %498, label %457, !llvm.loop !864

498:                                              ; preds = %494
  %499 = load i32, ptr @numXnodes, align 4, !tbaa !17
  br label %500

500:                                              ; preds = %498, %449
  %501 = phi i32 [ %499, %498 ], [ %450, %449 ]
  %502 = add nuw nsw i64 %451, 1
  %503 = sext i32 %501 to i64
  %504 = icmp slt i64 %451, %503
  br i1 %504, label %449, label %445, !llvm.loop !865

505:                                              ; preds = %562
  %.lcssa12 = phi i32 [ %563, %562 ]
  %506 = load ptr, ptr @yNodeArray, align 8
  br label %507

507:                                              ; preds = %505, %445
  %508 = phi i32 [ %.lcssa12, %505 ], [ %446, %445 ]
  %509 = phi ptr [ %506, %505 ], [ %448, %445 ]
  %510 = load ptr, ptr @xNodeArray, align 8
  br label %572

511:                                              ; preds = %562, %445
  %512 = phi i32 [ %563, %562 ], [ %446, %445 ]
  %513 = phi i64 [ %564, %562 ], [ 1, %445 ]
  %514 = getelementptr inbounds ptr, ptr %448, i64 %513
  %515 = load ptr, ptr %514, align 8, !tbaa !7
  %516 = icmp eq ptr %515, null
  br i1 %516, label %562, label %517

517:                                              ; preds = %511
  %518 = load ptr, ptr @eArray, align 8
  br label %519

519:                                              ; preds = %556, %517
  %520 = phi ptr [ %515, %517 ], [ %558, %556 ]
  %521 = load i32, ptr %520, align 8, !tbaa !198
  %522 = icmp eq i32 %521, 1
  br i1 %522, label %556, label %523

523:                                              ; preds = %519
  %524 = getelementptr inbounds %struct.wcbox, ptr %520, i64 0, i32 2
  %525 = load ptr, ptr %524, align 8, !tbaa !199
  %526 = load i32, ptr %525, align 4, !tbaa !17
  %527 = icmp slt i32 %526, 1
  br i1 %527, label %556, label %528

528:                                              ; preds = %523
  %529 = load ptr, ptr @rectArray, align 8
  %530 = add nuw i32 %526, 1
  %531 = zext i32 %530 to i64
  br label %532

532:                                              ; preds = %553, %528
  %533 = phi i64 [ 1, %528 ], [ %554, %553 ]
  %534 = getelementptr inbounds i32, ptr %525, i64 %533
  %535 = load i32, ptr %534, align 4, !tbaa !17
  %536 = sext i32 %535 to i64
  %537 = getelementptr inbounds %struct.ebox, ptr %518, i64 %536, i32 11
  %538 = load i32, ptr %537, align 4, !tbaa !414
  %539 = icmp eq i32 %538, 1
  br i1 %539, label %553, label %540

540:                                              ; preds = %532
  %541 = getelementptr inbounds %struct.ebox, ptr %518, i64 %536
  %542 = load i32, ptr %541, align 8, !tbaa !114
  %543 = getelementptr inbounds %struct.ebox, ptr %518, i64 %536, i32 1
  %544 = load i32, ptr %543, align 4, !tbaa !116
  %545 = sext i32 %544 to i64
  %546 = getelementptr inbounds %struct.rect, ptr %529, i64 %545, i32 12
  %547 = load i32, ptr %546, align 4, !tbaa !861
  %548 = add nsw i32 %547, 1
  store i32 %548, ptr %546, align 4, !tbaa !861
  %549 = sext i32 %542 to i64
  %550 = getelementptr inbounds %struct.rect, ptr %529, i64 %549, i32 12
  %551 = load i32, ptr %550, align 4, !tbaa !861
  %552 = add nsw i32 %551, 1
  store i32 %552, ptr %550, align 4, !tbaa !861
  br label %553

553:                                              ; preds = %540, %532
  %554 = add nuw nsw i64 %533, 1
  %555 = icmp eq i64 %554, %531
  br i1 %555, label %556, label %532, !llvm.loop !866

556:                                              ; preds = %553, %523, %519
  %557 = getelementptr inbounds %struct.wcbox, ptr %520, i64 0, i32 4
  %558 = load ptr, ptr %557, align 8, !tbaa !7
  %559 = icmp eq ptr %558, null
  br i1 %559, label %560, label %519, !llvm.loop !867

560:                                              ; preds = %556
  %561 = load i32, ptr @numYnodes, align 4, !tbaa !17
  br label %562

562:                                              ; preds = %560, %511
  %563 = phi i32 [ %561, %560 ], [ %512, %511 ]
  %564 = add nuw nsw i64 %513, 1
  %565 = sext i32 %563 to i64
  %566 = icmp slt i64 %513, %565
  br i1 %566, label %511, label %505, !llvm.loop !868

567:                                              ; preds = %815, %582
  %568 = phi i32 [ %583, %582 ], [ %816, %815 ]
  %569 = phi i32 [ %584, %582 ], [ %816, %815 ]
  %570 = phi i32 [ %585, %582 ], [ %817, %815 ]
  %571 = icmp eq i32 %570, 0
  br i1 %571, label %577, label %572, !llvm.loop !869

572:                                              ; preds = %567, %507
  %573 = phi i32 [ %508, %507 ], [ %568, %567 ]
  %574 = phi i32 [ %508, %507 ], [ %569, %567 ]
  %575 = load i32, ptr @numXnodes, align 4, !tbaa !17
  %576 = icmp slt i32 %575, 1
  br i1 %576, label %582, label %587

577:                                              ; preds = %567
  %.lcssa11 = phi i32 [ %568, %567 ]
  %578 = load ptr, ptr @xNodeArray, align 8
  %579 = load ptr, ptr @yNodeArray, align 8
  br label %821

580:                                              ; preds = %698
  %.lcssa7 = phi i32 [ %700, %698 ]
  %581 = load i32, ptr @numYnodes, align 4, !tbaa !17
  br label %582

582:                                              ; preds = %580, %572
  %583 = phi i32 [ %573, %572 ], [ %581, %580 ]
  %584 = phi i32 [ %574, %572 ], [ %581, %580 ]
  %585 = phi i32 [ 0, %572 ], [ %.lcssa7, %580 ]
  %586 = icmp slt i32 %584, 1
  br i1 %586, label %567, label %704

587:                                              ; preds = %698, %572
  %588 = phi i32 [ %699, %698 ], [ %575, %572 ]
  %589 = phi i64 [ %701, %698 ], [ 1, %572 ]
  %590 = phi i32 [ %700, %698 ], [ 0, %572 ]
  %591 = getelementptr inbounds ptr, ptr %510, i64 %589
  %592 = load ptr, ptr %591, align 8, !tbaa !7
  %593 = icmp eq ptr %592, null
  br i1 %593, label %698, label %594

594:                                              ; preds = %587
  %595 = load ptr, ptr @eArray, align 8
  br label %596

596:                                              ; preds = %691, %594
  %597 = phi ptr [ %592, %594 ], [ %694, %691 ]
  %598 = phi i32 [ %590, %594 ], [ %692, %691 ]
  %599 = load i32, ptr %597, align 8, !tbaa !198
  %600 = icmp eq i32 %599, 1
  br i1 %600, label %691, label %601

601:                                              ; preds = %596
  %602 = getelementptr inbounds %struct.wcbox, ptr %597, i64 0, i32 2
  %603 = load ptr, ptr %602, align 8, !tbaa !199
  %604 = load i32, ptr %603, align 4, !tbaa !17
  %605 = icmp slt i32 %604, 1
  br i1 %605, label %691, label %606

606:                                              ; preds = %601
  %607 = load ptr, ptr @rectArray, align 8
  %608 = add nuw i32 %604, 1
  %609 = zext i32 %608 to i64
  br label %610

610:                                              ; preds = %687, %606
  %611 = phi i64 [ 1, %606 ], [ %689, %687 ]
  %612 = phi i32 [ %598, %606 ], [ %688, %687 ]
  %613 = getelementptr inbounds i32, ptr %603, i64 %611
  %614 = load i32, ptr %613, align 4, !tbaa !17
  %615 = sext i32 %614 to i64
  %616 = getelementptr inbounds %struct.ebox, ptr %595, i64 %615, i32 11
  %617 = load i32, ptr %616, align 4, !tbaa !414
  %618 = icmp eq i32 %617, 1
  br i1 %618, label %687, label %619

619:                                              ; preds = %610
  %620 = getelementptr inbounds %struct.ebox, ptr %595, i64 %615
  %621 = load i32, ptr %620, align 8, !tbaa !114
  %622 = getelementptr inbounds %struct.ebox, ptr %595, i64 %615, i32 1
  %623 = load i32, ptr %622, align 4, !tbaa !116
  %624 = sext i32 %623 to i64
  %625 = getelementptr inbounds %struct.rect, ptr %607, i64 %624, i32 12
  %626 = load i32, ptr %625, align 4, !tbaa !861
  %627 = icmp eq i32 %626, 1
  %628 = sext i32 %621 to i64
  br i1 %627, label %633, label %629

629:                                              ; preds = %619
  %630 = getelementptr inbounds %struct.rect, ptr %607, i64 %628, i32 12
  %631 = load i32, ptr %630, align 4, !tbaa !861
  %632 = icmp eq i32 %631, 1
  br i1 %632, label %633, label %687

633:                                              ; preds = %629, %619
  store i32 1, ptr %616, align 4, !tbaa !414
  %634 = add nsw i32 %626, -1
  store i32 %634, ptr %625, align 4, !tbaa !861
  %635 = getelementptr inbounds %struct.rect, ptr %607, i64 %628, i32 12
  %636 = load i32, ptr %635, align 4, !tbaa !861
  %637 = add nsw i32 %636, -1
  store i32 %637, ptr %635, align 4, !tbaa !861
  %638 = trunc i64 %611 to i32
  br label %639

639:                                              ; preds = %685, %633
  %640 = phi i64 [ %686, %685 ], [ 1, %633 ]
  %641 = add nuw nsw i64 %640, %611
  %642 = trunc i64 %641 to i32
  %643 = icmp slt i32 %604, %642
  br i1 %643, label %662, label %644

644:                                              ; preds = %639
  %645 = getelementptr inbounds i32, ptr %603, i64 %641
  %646 = load i32, ptr %645, align 4, !tbaa !17
  %647 = sext i32 %646 to i64
  %648 = getelementptr inbounds %struct.ebox, ptr %595, i64 %647, i32 11
  %649 = load i32, ptr %648, align 4, !tbaa !414
  %650 = icmp eq i32 %649, 0
  br i1 %650, label %651, label %662

651:                                              ; preds = %644
  %.lcssa4 = phi i64 [ %647, %644 ]
  %652 = load i32, ptr %613, align 4, !tbaa !17
  %653 = sext i32 %652 to i64
  %654 = getelementptr inbounds %struct.ebox, ptr %595, i64 %653, i32 4
  %655 = load i32, ptr %654, align 8, !tbaa !118
  %656 = getelementptr inbounds %struct.ebox, ptr %595, i64 %653, i32 3
  %657 = load i32, ptr %656, align 4, !tbaa !117
  %658 = sub i32 %657, %655
  %659 = getelementptr inbounds %struct.ebox, ptr %595, i64 %.lcssa4, i32 3
  %660 = load i32, ptr %659, align 4, !tbaa !117
  %661 = add i32 %658, %660
  store i32 %661, ptr %659, align 4, !tbaa !117
  br label %687

662:                                              ; preds = %644, %639
  %663 = trunc i64 %640 to i32
  %664 = sub nsw i32 %638, %663
  %665 = icmp sgt i32 %664, 0
  br i1 %665, label %666, label %685

666:                                              ; preds = %662
  %667 = zext i32 %664 to i64
  %668 = getelementptr inbounds i32, ptr %603, i64 %667
  %669 = load i32, ptr %668, align 4, !tbaa !17
  %670 = sext i32 %669 to i64
  %671 = getelementptr inbounds %struct.ebox, ptr %595, i64 %670, i32 11
  %672 = load i32, ptr %671, align 4, !tbaa !414
  %673 = icmp eq i32 %672, 0
  br i1 %673, label %674, label %685

674:                                              ; preds = %666
  %.lcssa5 = phi i64 [ %670, %666 ]
  %675 = load i32, ptr %613, align 4, !tbaa !17
  %676 = sext i32 %675 to i64
  %677 = getelementptr inbounds %struct.ebox, ptr %595, i64 %676, i32 4
  %678 = load i32, ptr %677, align 8, !tbaa !118
  %679 = getelementptr inbounds %struct.ebox, ptr %595, i64 %676, i32 3
  %680 = load i32, ptr %679, align 4, !tbaa !117
  %681 = sub i32 %678, %680
  %682 = getelementptr inbounds %struct.ebox, ptr %595, i64 %.lcssa5, i32 4
  %683 = load i32, ptr %682, align 8, !tbaa !118
  %684 = add nsw i32 %681, %683
  store i32 %684, ptr %682, align 8, !tbaa !118
  br label %687

685:                                              ; preds = %666, %662
  %686 = add nuw i64 %640, 1
  br label %639

687:                                              ; preds = %674, %651, %629, %610
  %688 = phi i32 [ %612, %610 ], [ %612, %629 ], [ 1, %651 ], [ 1, %674 ]
  %689 = add nuw nsw i64 %611, 1
  %690 = icmp eq i64 %689, %609
  br i1 %690, label %691, label %610, !llvm.loop !870

691:                                              ; preds = %687, %601, %596
  %692 = phi i32 [ %598, %596 ], [ %598, %601 ], [ %688, %687 ]
  %693 = getelementptr inbounds %struct.wcbox, ptr %597, i64 0, i32 4
  %694 = load ptr, ptr %693, align 8, !tbaa !7
  %695 = icmp eq ptr %694, null
  br i1 %695, label %696, label %596, !llvm.loop !871

696:                                              ; preds = %691
  %.lcssa6 = phi i32 [ %692, %691 ]
  %697 = load i32, ptr @numXnodes, align 4, !tbaa !17
  br label %698

698:                                              ; preds = %696, %587
  %699 = phi i32 [ %588, %587 ], [ %697, %696 ]
  %700 = phi i32 [ %590, %587 ], [ %.lcssa6, %696 ]
  %701 = add nuw nsw i64 %589, 1
  %702 = sext i32 %699 to i64
  %703 = icmp slt i64 %589, %702
  br i1 %703, label %587, label %580, !llvm.loop !872

704:                                              ; preds = %815, %582
  %705 = phi i32 [ %816, %815 ], [ %583, %582 ]
  %706 = phi i64 [ %818, %815 ], [ 1, %582 ]
  %707 = phi i32 [ %817, %815 ], [ %585, %582 ]
  %708 = getelementptr inbounds ptr, ptr %509, i64 %706
  %709 = load ptr, ptr %708, align 8, !tbaa !7
  %710 = icmp eq ptr %709, null
  br i1 %710, label %815, label %711

711:                                              ; preds = %704
  %712 = load ptr, ptr @eArray, align 8
  br label %713

713:                                              ; preds = %808, %711
  %714 = phi ptr [ %709, %711 ], [ %811, %808 ]
  %715 = phi i32 [ %707, %711 ], [ %809, %808 ]
  %716 = load i32, ptr %714, align 8, !tbaa !198
  %717 = icmp eq i32 %716, 1
  br i1 %717, label %808, label %718

718:                                              ; preds = %713
  %719 = getelementptr inbounds %struct.wcbox, ptr %714, i64 0, i32 2
  %720 = load ptr, ptr %719, align 8, !tbaa !199
  %721 = load i32, ptr %720, align 4, !tbaa !17
  %722 = icmp slt i32 %721, 1
  br i1 %722, label %808, label %723

723:                                              ; preds = %718
  %724 = load ptr, ptr @rectArray, align 8
  %725 = add nuw i32 %721, 1
  %726 = zext i32 %725 to i64
  br label %727

727:                                              ; preds = %804, %723
  %728 = phi i64 [ 1, %723 ], [ %806, %804 ]
  %729 = phi i32 [ %715, %723 ], [ %805, %804 ]
  %730 = getelementptr inbounds i32, ptr %720, i64 %728
  %731 = load i32, ptr %730, align 4, !tbaa !17
  %732 = sext i32 %731 to i64
  %733 = getelementptr inbounds %struct.ebox, ptr %712, i64 %732, i32 11
  %734 = load i32, ptr %733, align 4, !tbaa !414
  %735 = icmp eq i32 %734, 1
  br i1 %735, label %804, label %736

736:                                              ; preds = %727
  %737 = getelementptr inbounds %struct.ebox, ptr %712, i64 %732
  %738 = load i32, ptr %737, align 8, !tbaa !114
  %739 = getelementptr inbounds %struct.ebox, ptr %712, i64 %732, i32 1
  %740 = load i32, ptr %739, align 4, !tbaa !116
  %741 = sext i32 %740 to i64
  %742 = getelementptr inbounds %struct.rect, ptr %724, i64 %741, i32 12
  %743 = load i32, ptr %742, align 4, !tbaa !861
  %744 = icmp eq i32 %743, 1
  %745 = sext i32 %738 to i64
  br i1 %744, label %750, label %746

746:                                              ; preds = %736
  %747 = getelementptr inbounds %struct.rect, ptr %724, i64 %745, i32 12
  %748 = load i32, ptr %747, align 4, !tbaa !861
  %749 = icmp eq i32 %748, 1
  br i1 %749, label %750, label %804

750:                                              ; preds = %746, %736
  store i32 1, ptr %733, align 4, !tbaa !414
  %751 = add nsw i32 %743, -1
  store i32 %751, ptr %742, align 4, !tbaa !861
  %752 = getelementptr inbounds %struct.rect, ptr %724, i64 %745, i32 12
  %753 = load i32, ptr %752, align 4, !tbaa !861
  %754 = add nsw i32 %753, -1
  store i32 %754, ptr %752, align 4, !tbaa !861
  %755 = trunc i64 %728 to i32
  br label %756

756:                                              ; preds = %802, %750
  %757 = phi i64 [ %803, %802 ], [ 1, %750 ]
  %758 = add nuw nsw i64 %757, %728
  %759 = trunc i64 %758 to i32
  %760 = icmp slt i32 %721, %759
  br i1 %760, label %779, label %761

761:                                              ; preds = %756
  %762 = getelementptr inbounds i32, ptr %720, i64 %758
  %763 = load i32, ptr %762, align 4, !tbaa !17
  %764 = sext i32 %763 to i64
  %765 = getelementptr inbounds %struct.ebox, ptr %712, i64 %764, i32 11
  %766 = load i32, ptr %765, align 4, !tbaa !414
  %767 = icmp eq i32 %766, 0
  br i1 %767, label %768, label %779

768:                                              ; preds = %761
  %.lcssa8 = phi i64 [ %764, %761 ]
  %769 = load i32, ptr %730, align 4, !tbaa !17
  %770 = sext i32 %769 to i64
  %771 = getelementptr inbounds %struct.ebox, ptr %712, i64 %770, i32 4
  %772 = load i32, ptr %771, align 8, !tbaa !118
  %773 = getelementptr inbounds %struct.ebox, ptr %712, i64 %770, i32 3
  %774 = load i32, ptr %773, align 4, !tbaa !117
  %775 = sub i32 %774, %772
  %776 = getelementptr inbounds %struct.ebox, ptr %712, i64 %.lcssa8, i32 3
  %777 = load i32, ptr %776, align 4, !tbaa !117
  %778 = add i32 %775, %777
  store i32 %778, ptr %776, align 4, !tbaa !117
  br label %804

779:                                              ; preds = %761, %756
  %780 = trunc i64 %757 to i32
  %781 = sub nsw i32 %755, %780
  %782 = icmp sgt i32 %781, 0
  br i1 %782, label %783, label %802

783:                                              ; preds = %779
  %784 = zext i32 %781 to i64
  %785 = getelementptr inbounds i32, ptr %720, i64 %784
  %786 = load i32, ptr %785, align 4, !tbaa !17
  %787 = sext i32 %786 to i64
  %788 = getelementptr inbounds %struct.ebox, ptr %712, i64 %787, i32 11
  %789 = load i32, ptr %788, align 4, !tbaa !414
  %790 = icmp eq i32 %789, 0
  br i1 %790, label %791, label %802

791:                                              ; preds = %783
  %.lcssa9 = phi i64 [ %787, %783 ]
  %792 = load i32, ptr %730, align 4, !tbaa !17
  %793 = sext i32 %792 to i64
  %794 = getelementptr inbounds %struct.ebox, ptr %712, i64 %793, i32 4
  %795 = load i32, ptr %794, align 8, !tbaa !118
  %796 = getelementptr inbounds %struct.ebox, ptr %712, i64 %793, i32 3
  %797 = load i32, ptr %796, align 4, !tbaa !117
  %798 = sub i32 %795, %797
  %799 = getelementptr inbounds %struct.ebox, ptr %712, i64 %.lcssa9, i32 4
  %800 = load i32, ptr %799, align 8, !tbaa !118
  %801 = add nsw i32 %798, %800
  store i32 %801, ptr %799, align 8, !tbaa !118
  br label %804

802:                                              ; preds = %783, %779
  %803 = add nuw i64 %757, 1
  br label %756

804:                                              ; preds = %791, %768, %746, %727
  %805 = phi i32 [ %729, %727 ], [ %729, %746 ], [ 1, %768 ], [ 1, %791 ]
  %806 = add nuw nsw i64 %728, 1
  %807 = icmp eq i64 %806, %726
  br i1 %807, label %808, label %727, !llvm.loop !873

808:                                              ; preds = %804, %718, %713
  %809 = phi i32 [ %715, %713 ], [ %715, %718 ], [ %805, %804 ]
  %810 = getelementptr inbounds %struct.wcbox, ptr %714, i64 0, i32 4
  %811 = load ptr, ptr %810, align 8, !tbaa !7
  %812 = icmp eq ptr %811, null
  br i1 %812, label %813, label %713, !llvm.loop !874

813:                                              ; preds = %808
  %.lcssa10 = phi i32 [ %809, %808 ]
  %814 = load i32, ptr @numYnodes, align 4, !tbaa !17
  br label %815

815:                                              ; preds = %813, %704
  %816 = phi i32 [ %705, %704 ], [ %814, %813 ]
  %817 = phi i32 [ %707, %704 ], [ %.lcssa10, %813 ]
  %818 = add nuw nsw i64 %706, 1
  %819 = sext i32 %816 to i64
  %820 = icmp slt i64 %706, %819
  br i1 %820, label %704, label %567, !llvm.loop !875

821:                                              ; preds = %1221, %577
  %822 = phi i32 [ %.lcssa11, %577 ], [ %1222, %1221 ]
  %823 = phi i32 [ %.lcssa11, %577 ], [ %1223, %1221 ]
  %824 = phi i32 [ 1, %577 ], [ %1224, %1221 ]
  %825 = load i32, ptr @numXnodes, align 4, !tbaa !17
  %826 = icmp slt i32 %825, 1
  br i1 %826, label %829, label %833

827:                                              ; preds = %1022
  %828 = load i32, ptr @numYnodes, align 4, !tbaa !17
  br label %829

829:                                              ; preds = %827, %821
  %830 = phi i32 [ %828, %827 ], [ %822, %821 ]
  %831 = phi i32 [ %828, %827 ], [ %823, %821 ]
  %832 = icmp slt i32 %831, 1
  br i1 %832, label %1221, label %1027

833:                                              ; preds = %1022, %821
  %834 = phi i32 [ %1023, %1022 ], [ %825, %821 ]
  %835 = phi i64 [ %1024, %1022 ], [ 1, %821 ]
  %836 = getelementptr inbounds ptr, ptr %578, i64 %835
  %837 = load ptr, ptr %836, align 8, !tbaa !7
  %838 = icmp eq ptr %837, null
  br i1 %838, label %1022, label %839

839:                                              ; preds = %833
  %840 = load ptr, ptr @eArray, align 8
  %841 = load ptr, ptr @edgeList, align 8
  %842 = load ptr, ptr @rectArray, align 8
  br label %843

843:                                              ; preds = %1016, %839
  %844 = phi ptr [ %837, %839 ], [ %1018, %1016 ]
  %845 = load i32, ptr %844, align 8, !tbaa !198
  %846 = icmp eq i32 %845, 1
  br i1 %846, label %1016, label %847

847:                                              ; preds = %843
  %848 = getelementptr inbounds %struct.wcbox, ptr %844, i64 0, i32 2
  %849 = load ptr, ptr %848, align 8, !tbaa !199
  %850 = load i32, ptr %849, align 4, !tbaa !17
  %851 = icmp slt i32 %850, 2
  br i1 %851, label %1016, label %852

852:                                              ; preds = %847
  %853 = getelementptr inbounds i32, ptr %849, i64 1
  %854 = load i32, ptr %853, align 4, !tbaa !17
  %855 = sext i32 %854 to i64
  %856 = getelementptr inbounds %struct.ebox, ptr %840, i64 %855, i32 11
  %857 = load i32, ptr %856, align 4, !tbaa !414
  %858 = icmp eq i32 %857, 1
  br i1 %858, label %859, label %934

859:                                              ; preds = %852
  %860 = getelementptr inbounds %struct.ebox, ptr %840, i64 %855
  %861 = getelementptr inbounds %struct.ebox, ptr %840, i64 %855, i32 1
  %862 = load i32, ptr %861, align 4, !tbaa !116
  %863 = load i32, ptr %860, align 8, !tbaa !114
  %864 = getelementptr inbounds %struct.ebox, ptr %840, i64 %855, i32 8
  %865 = load i32, ptr %864, align 8, !tbaa !156
  %866 = sext i32 %865 to i64
  %867 = getelementptr inbounds %struct.edgebox, ptr %841, i64 %866, i32 1
  %868 = load i32, ptr %867, align 4, !tbaa !143
  %869 = getelementptr inbounds %struct.edgebox, ptr %841, i64 %866, i32 2
  %870 = load i32, ptr %869, align 4, !tbaa !144
  %871 = sext i32 %862 to i64
  %872 = getelementptr inbounds %struct.rect, ptr %842, i64 %871, i32 1
  %873 = load i32, ptr %872, align 4, !tbaa !125
  %874 = sext i32 %863 to i64
  %875 = getelementptr inbounds %struct.rect, ptr %842, i64 %874, i32 1
  %876 = load i32, ptr %875, align 4, !tbaa !125
  %877 = add nuw i32 %850, 1
  %878 = zext i32 %877 to i64
  br label %882

879:                                              ; preds = %882
  %880 = add nuw nsw i64 %883, 1
  %881 = icmp eq i64 %880, %878
  br i1 %881, label %934, label %882, !llvm.loop !876

882:                                              ; preds = %879, %859
  %883 = phi i64 [ 2, %859 ], [ %880, %879 ]
  %884 = getelementptr inbounds i32, ptr %849, i64 %883
  %885 = load i32, ptr %884, align 4, !tbaa !17
  %886 = sext i32 %885 to i64
  %887 = getelementptr inbounds %struct.ebox, ptr %840, i64 %886, i32 11
  %888 = load i32, ptr %887, align 4, !tbaa !414
  %889 = icmp eq i32 %888, 0
  br i1 %889, label %890, label %879

890:                                              ; preds = %882
  %.lcssa = phi i64 [ %886, %882 ]
  %891 = getelementptr inbounds %struct.ebox, ptr %840, i64 %.lcssa
  %892 = load i32, ptr %891, align 8, !tbaa !114
  %893 = getelementptr inbounds %struct.ebox, ptr %840, i64 %.lcssa, i32 1
  %894 = load i32, ptr %893, align 4, !tbaa !116
  %895 = sext i32 %894 to i64
  %896 = getelementptr inbounds %struct.rect, ptr %842, i64 %895, i32 1
  %897 = load i32, ptr %896, align 4, !tbaa !125
  %898 = icmp slt i32 %897, %873
  br i1 %898, label %899, label %911

899:                                              ; preds = %890
  %900 = getelementptr inbounds %struct.rect, ptr %842, i64 %871, i32 7
  %901 = load i32, ptr %900, align 4, !tbaa !128
  %902 = icmp slt i32 %901, %870
  br i1 %902, label %903, label %908

903:                                              ; preds = %899
  %904 = getelementptr inbounds %struct.rect, ptr %842, i64 %871, i32 3
  %905 = load i32, ptr %904, align 4, !tbaa !160
  %906 = icmp eq i32 %905, 0
  br i1 %906, label %907, label %908

907:                                              ; preds = %903
  store i32 %897, ptr %872, align 4, !tbaa !125
  store i32 1, ptr %904, align 4, !tbaa !160
  br label %911

908:                                              ; preds = %903, %899
  %909 = icmp slt i32 %897, %870
  br i1 %909, label %910, label %911

910:                                              ; preds = %908
  store i32 %870, ptr %896, align 4, !tbaa !125
  br label %911

911:                                              ; preds = %910, %908, %907, %890
  %912 = sext i32 %892 to i64
  %913 = getelementptr inbounds %struct.rect, ptr %842, i64 %912, i32 1
  %914 = load i32, ptr %913, align 4, !tbaa !125
  %915 = icmp sgt i32 %914, %876
  br i1 %915, label %916, label %934

916:                                              ; preds = %911
  %917 = load i32, ptr %853, align 4, !tbaa !17
  %918 = sext i32 %917 to i64
  %919 = getelementptr inbounds %struct.ebox, ptr %840, i64 %918
  %920 = load i32, ptr %919, align 8, !tbaa !114
  %921 = sext i32 %920 to i64
  %922 = getelementptr inbounds %struct.rect, ptr %842, i64 %921, i32 6
  %923 = load i32, ptr %922, align 4, !tbaa !129
  %924 = icmp slt i32 %868, %923
  br i1 %924, label %925, label %931

925:                                              ; preds = %916
  %926 = getelementptr inbounds %struct.rect, ptr %842, i64 %921, i32 3
  %927 = load i32, ptr %926, align 4, !tbaa !160
  %928 = icmp eq i32 %927, 0
  br i1 %928, label %929, label %931

929:                                              ; preds = %925
  %930 = getelementptr inbounds %struct.rect, ptr %842, i64 %921, i32 1
  store i32 %914, ptr %930, align 4, !tbaa !125
  store i32 1, ptr %926, align 4, !tbaa !160
  br label %934

931:                                              ; preds = %925, %916
  %932 = icmp slt i32 %868, %914
  br i1 %932, label %933, label %934

933:                                              ; preds = %931
  store i32 %868, ptr %913, align 4, !tbaa !125
  br label %934

934:                                              ; preds = %933, %931, %929, %911, %879, %852
  %935 = zext i32 %850 to i64
  %936 = getelementptr inbounds i32, ptr %849, i64 %935
  %937 = load i32, ptr %936, align 4, !tbaa !17
  %938 = sext i32 %937 to i64
  %939 = getelementptr inbounds %struct.ebox, ptr %840, i64 %938, i32 11
  %940 = load i32, ptr %939, align 4, !tbaa !414
  %941 = icmp eq i32 %940, 1
  br i1 %941, label %942, label %1016

942:                                              ; preds = %934
  %943 = getelementptr inbounds %struct.ebox, ptr %840, i64 %938
  %944 = getelementptr inbounds %struct.ebox, ptr %840, i64 %938, i32 1
  %945 = load i32, ptr %944, align 4, !tbaa !116
  %946 = load i32, ptr %943, align 8, !tbaa !114
  %947 = getelementptr inbounds %struct.ebox, ptr %840, i64 %938, i32 9
  %948 = load i32, ptr %947, align 4, !tbaa !157
  %949 = sext i32 %948 to i64
  %950 = getelementptr inbounds %struct.edgebox, ptr %841, i64 %949, i32 1
  %951 = load i32, ptr %950, align 4, !tbaa !143
  %952 = getelementptr inbounds %struct.edgebox, ptr %841, i64 %949, i32 2
  %953 = load i32, ptr %952, align 4, !tbaa !144
  %954 = sext i32 %945 to i64
  %955 = getelementptr inbounds %struct.rect, ptr %842, i64 %954, i32 1
  %956 = load i32, ptr %955, align 4, !tbaa !125
  %957 = sext i32 %946 to i64
  %958 = getelementptr inbounds %struct.rect, ptr %842, i64 %957, i32 1
  %959 = load i32, ptr %958, align 4, !tbaa !125
  br label %960

960:                                              ; preds = %964, %942
  %961 = phi i64 [ %965, %964 ], [ %935, %942 ]
  %962 = trunc i64 %961 to i32
  %963 = icmp sgt i32 %962, 1
  br i1 %963, label %964, label %1016

964:                                              ; preds = %960
  %965 = add nsw i64 %961, -1
  %966 = getelementptr inbounds i32, ptr %849, i64 %965
  %967 = load i32, ptr %966, align 4, !tbaa !17
  %968 = sext i32 %967 to i64
  %969 = getelementptr inbounds %struct.ebox, ptr %840, i64 %968, i32 11
  %970 = load i32, ptr %969, align 4, !tbaa !414
  %971 = icmp eq i32 %970, 0
  br i1 %971, label %972, label %960, !llvm.loop !877

972:                                              ; preds = %964
  %.lcssa1 = phi i64 [ %968, %964 ]
  %973 = getelementptr inbounds %struct.ebox, ptr %840, i64 %.lcssa1
  %974 = load i32, ptr %973, align 8, !tbaa !114
  %975 = getelementptr inbounds %struct.ebox, ptr %840, i64 %.lcssa1, i32 1
  %976 = load i32, ptr %975, align 4, !tbaa !116
  %977 = sext i32 %976 to i64
  %978 = getelementptr inbounds %struct.rect, ptr %842, i64 %977, i32 1
  %979 = load i32, ptr %978, align 4, !tbaa !125
  %980 = icmp slt i32 %979, %956
  br i1 %980, label %981, label %993

981:                                              ; preds = %972
  %982 = getelementptr inbounds %struct.rect, ptr %842, i64 %954, i32 7
  %983 = load i32, ptr %982, align 4, !tbaa !128
  %984 = icmp slt i32 %983, %953
  br i1 %984, label %985, label %990

985:                                              ; preds = %981
  %986 = getelementptr inbounds %struct.rect, ptr %842, i64 %954, i32 3
  %987 = load i32, ptr %986, align 4, !tbaa !160
  %988 = icmp eq i32 %987, 0
  br i1 %988, label %989, label %990

989:                                              ; preds = %985
  store i32 %979, ptr %955, align 4, !tbaa !125
  store i32 1, ptr %986, align 4, !tbaa !160
  br label %993

990:                                              ; preds = %985, %981
  %991 = icmp slt i32 %979, %953
  br i1 %991, label %992, label %993

992:                                              ; preds = %990
  store i32 %953, ptr %978, align 4, !tbaa !125
  br label %993

993:                                              ; preds = %992, %990, %989, %972
  %994 = sext i32 %974 to i64
  %995 = getelementptr inbounds %struct.rect, ptr %842, i64 %994, i32 1
  %996 = load i32, ptr %995, align 4, !tbaa !125
  %997 = icmp sgt i32 %996, %959
  br i1 %997, label %998, label %1016

998:                                              ; preds = %993
  %999 = load i32, ptr %936, align 4, !tbaa !17
  %1000 = sext i32 %999 to i64
  %1001 = getelementptr inbounds %struct.ebox, ptr %840, i64 %1000
  %1002 = load i32, ptr %1001, align 8, !tbaa !114
  %1003 = sext i32 %1002 to i64
  %1004 = getelementptr inbounds %struct.rect, ptr %842, i64 %1003, i32 6
  %1005 = load i32, ptr %1004, align 4, !tbaa !129
  %1006 = icmp slt i32 %951, %1005
  br i1 %1006, label %1007, label %1013

1007:                                             ; preds = %998
  %1008 = getelementptr inbounds %struct.rect, ptr %842, i64 %1003, i32 3
  %1009 = load i32, ptr %1008, align 4, !tbaa !160
  %1010 = icmp eq i32 %1009, 0
  br i1 %1010, label %1011, label %1013

1011:                                             ; preds = %1007
  %1012 = getelementptr inbounds %struct.rect, ptr %842, i64 %1003, i32 1
  store i32 %996, ptr %1012, align 4, !tbaa !125
  store i32 1, ptr %1008, align 4, !tbaa !160
  br label %1016

1013:                                             ; preds = %1007, %998
  %1014 = icmp slt i32 %951, %996
  br i1 %1014, label %1015, label %1016

1015:                                             ; preds = %1013
  store i32 %951, ptr %995, align 4, !tbaa !125
  br label %1016

1016:                                             ; preds = %1015, %1013, %1011, %993, %960, %934, %847, %843
  %1017 = getelementptr inbounds %struct.wcbox, ptr %844, i64 0, i32 4
  %1018 = load ptr, ptr %1017, align 8, !tbaa !7
  %1019 = icmp eq ptr %1018, null
  br i1 %1019, label %1020, label %843, !llvm.loop !878

1020:                                             ; preds = %1016
  %1021 = load i32, ptr @numXnodes, align 4, !tbaa !17
  br label %1022

1022:                                             ; preds = %1020, %833
  %1023 = phi i32 [ %1021, %1020 ], [ %834, %833 ]
  %1024 = add nuw nsw i64 %835, 1
  %1025 = sext i32 %1023 to i64
  %1026 = icmp slt i64 %835, %1025
  br i1 %1026, label %833, label %827, !llvm.loop !879

1027:                                             ; preds = %1216, %829
  %1028 = phi i32 [ %1217, %1216 ], [ %830, %829 ]
  %1029 = phi i64 [ %1218, %1216 ], [ 1, %829 ]
  %1030 = getelementptr inbounds ptr, ptr %579, i64 %1029
  %1031 = load ptr, ptr %1030, align 8, !tbaa !7
  %1032 = icmp eq ptr %1031, null
  br i1 %1032, label %1216, label %1033

1033:                                             ; preds = %1027
  %1034 = load ptr, ptr @eArray, align 8
  %1035 = load ptr, ptr @edgeList, align 8
  %1036 = load ptr, ptr @rectArray, align 8
  br label %1037

1037:                                             ; preds = %1210, %1033
  %1038 = phi ptr [ %1031, %1033 ], [ %1212, %1210 ]
  %1039 = load i32, ptr %1038, align 8, !tbaa !198
  %1040 = icmp eq i32 %1039, 1
  br i1 %1040, label %1210, label %1041

1041:                                             ; preds = %1037
  %1042 = getelementptr inbounds %struct.wcbox, ptr %1038, i64 0, i32 2
  %1043 = load ptr, ptr %1042, align 8, !tbaa !199
  %1044 = load i32, ptr %1043, align 4, !tbaa !17
  %1045 = icmp slt i32 %1044, 2
  br i1 %1045, label %1210, label %1046

1046:                                             ; preds = %1041
  %1047 = getelementptr inbounds i32, ptr %1043, i64 1
  %1048 = load i32, ptr %1047, align 4, !tbaa !17
  %1049 = sext i32 %1048 to i64
  %1050 = getelementptr inbounds %struct.ebox, ptr %1034, i64 %1049, i32 11
  %1051 = load i32, ptr %1050, align 4, !tbaa !414
  %1052 = icmp eq i32 %1051, 1
  br i1 %1052, label %1053, label %1128

1053:                                             ; preds = %1046
  %1054 = getelementptr inbounds %struct.ebox, ptr %1034, i64 %1049
  %1055 = getelementptr inbounds %struct.ebox, ptr %1034, i64 %1049, i32 1
  %1056 = load i32, ptr %1055, align 4, !tbaa !116
  %1057 = load i32, ptr %1054, align 8, !tbaa !114
  %1058 = getelementptr inbounds %struct.ebox, ptr %1034, i64 %1049, i32 8
  %1059 = load i32, ptr %1058, align 8, !tbaa !156
  %1060 = sext i32 %1059 to i64
  %1061 = getelementptr inbounds %struct.edgebox, ptr %1035, i64 %1060, i32 1
  %1062 = load i32, ptr %1061, align 4, !tbaa !143
  %1063 = getelementptr inbounds %struct.edgebox, ptr %1035, i64 %1060, i32 2
  %1064 = load i32, ptr %1063, align 4, !tbaa !144
  %1065 = sext i32 %1056 to i64
  %1066 = getelementptr inbounds %struct.rect, ptr %1036, i64 %1065
  %1067 = load i32, ptr %1066, align 4, !tbaa !123
  %1068 = sext i32 %1057 to i64
  %1069 = getelementptr inbounds %struct.rect, ptr %1036, i64 %1068
  %1070 = load i32, ptr %1069, align 4, !tbaa !123
  %1071 = add nuw i32 %1044, 1
  %1072 = zext i32 %1071 to i64
  br label %1076

1073:                                             ; preds = %1076
  %1074 = add nuw nsw i64 %1077, 1
  %1075 = icmp eq i64 %1074, %1072
  br i1 %1075, label %1128, label %1076, !llvm.loop !880

1076:                                             ; preds = %1073, %1053
  %1077 = phi i64 [ 2, %1053 ], [ %1074, %1073 ]
  %1078 = getelementptr inbounds i32, ptr %1043, i64 %1077
  %1079 = load i32, ptr %1078, align 4, !tbaa !17
  %1080 = sext i32 %1079 to i64
  %1081 = getelementptr inbounds %struct.ebox, ptr %1034, i64 %1080, i32 11
  %1082 = load i32, ptr %1081, align 4, !tbaa !414
  %1083 = icmp eq i32 %1082, 0
  br i1 %1083, label %1084, label %1073

1084:                                             ; preds = %1076
  %.lcssa2 = phi i64 [ %1080, %1076 ]
  %1085 = getelementptr inbounds %struct.ebox, ptr %1034, i64 %.lcssa2
  %1086 = load i32, ptr %1085, align 8, !tbaa !114
  %1087 = getelementptr inbounds %struct.ebox, ptr %1034, i64 %.lcssa2, i32 1
  %1088 = load i32, ptr %1087, align 4, !tbaa !116
  %1089 = sext i32 %1088 to i64
  %1090 = getelementptr inbounds %struct.rect, ptr %1036, i64 %1089
  %1091 = load i32, ptr %1090, align 4, !tbaa !123
  %1092 = icmp slt i32 %1091, %1067
  br i1 %1092, label %1093, label %1105

1093:                                             ; preds = %1084
  %1094 = getelementptr inbounds %struct.rect, ptr %1036, i64 %1065, i32 5
  %1095 = load i32, ptr %1094, align 4, !tbaa !126
  %1096 = icmp slt i32 %1095, %1064
  br i1 %1096, label %1097, label %1102

1097:                                             ; preds = %1093
  %1098 = getelementptr inbounds %struct.rect, ptr %1036, i64 %1065, i32 2
  %1099 = load i32, ptr %1098, align 4, !tbaa !149
  %1100 = icmp eq i32 %1099, 0
  br i1 %1100, label %1101, label %1102

1101:                                             ; preds = %1097
  store i32 %1091, ptr %1066, align 4, !tbaa !123
  store i32 1, ptr %1098, align 4, !tbaa !149
  br label %1105

1102:                                             ; preds = %1097, %1093
  %1103 = icmp slt i32 %1091, %1064
  br i1 %1103, label %1104, label %1105

1104:                                             ; preds = %1102
  store i32 %1064, ptr %1090, align 4, !tbaa !123
  br label %1105

1105:                                             ; preds = %1104, %1102, %1101, %1084
  %1106 = sext i32 %1086 to i64
  %1107 = getelementptr inbounds %struct.rect, ptr %1036, i64 %1106
  %1108 = load i32, ptr %1107, align 4, !tbaa !123
  %1109 = icmp sgt i32 %1108, %1070
  br i1 %1109, label %1110, label %1128

1110:                                             ; preds = %1105
  %1111 = load i32, ptr %1047, align 4, !tbaa !17
  %1112 = sext i32 %1111 to i64
  %1113 = getelementptr inbounds %struct.ebox, ptr %1034, i64 %1112
  %1114 = load i32, ptr %1113, align 8, !tbaa !114
  %1115 = sext i32 %1114 to i64
  %1116 = getelementptr inbounds %struct.rect, ptr %1036, i64 %1115
  %1117 = getelementptr inbounds %struct.rect, ptr %1036, i64 %1115, i32 4
  %1118 = load i32, ptr %1117, align 4, !tbaa !127
  %1119 = icmp slt i32 %1062, %1118
  br i1 %1119, label %1120, label %1125

1120:                                             ; preds = %1110
  %1121 = getelementptr inbounds %struct.rect, ptr %1036, i64 %1115, i32 2
  %1122 = load i32, ptr %1121, align 4, !tbaa !149
  %1123 = icmp eq i32 %1122, 0
  br i1 %1123, label %1124, label %1125

1124:                                             ; preds = %1120
  store i32 %1108, ptr %1116, align 4, !tbaa !123
  store i32 1, ptr %1121, align 4, !tbaa !149
  br label %1128

1125:                                             ; preds = %1120, %1110
  %1126 = icmp slt i32 %1062, %1108
  br i1 %1126, label %1127, label %1128

1127:                                             ; preds = %1125
  store i32 %1062, ptr %1107, align 4, !tbaa !123
  br label %1128

1128:                                             ; preds = %1127, %1125, %1124, %1105, %1073, %1046
  %1129 = zext i32 %1044 to i64
  %1130 = getelementptr inbounds i32, ptr %1043, i64 %1129
  %1131 = load i32, ptr %1130, align 4, !tbaa !17
  %1132 = sext i32 %1131 to i64
  %1133 = getelementptr inbounds %struct.ebox, ptr %1034, i64 %1132, i32 11
  %1134 = load i32, ptr %1133, align 4, !tbaa !414
  %1135 = icmp eq i32 %1134, 1
  br i1 %1135, label %1136, label %1210

1136:                                             ; preds = %1128
  %1137 = getelementptr inbounds %struct.ebox, ptr %1034, i64 %1132
  %1138 = getelementptr inbounds %struct.ebox, ptr %1034, i64 %1132, i32 1
  %1139 = load i32, ptr %1138, align 4, !tbaa !116
  %1140 = load i32, ptr %1137, align 8, !tbaa !114
  %1141 = getelementptr inbounds %struct.ebox, ptr %1034, i64 %1132, i32 9
  %1142 = load i32, ptr %1141, align 4, !tbaa !157
  %1143 = sext i32 %1142 to i64
  %1144 = getelementptr inbounds %struct.edgebox, ptr %1035, i64 %1143, i32 1
  %1145 = load i32, ptr %1144, align 4, !tbaa !143
  %1146 = getelementptr inbounds %struct.edgebox, ptr %1035, i64 %1143, i32 2
  %1147 = load i32, ptr %1146, align 4, !tbaa !144
  %1148 = sext i32 %1139 to i64
  %1149 = getelementptr inbounds %struct.rect, ptr %1036, i64 %1148
  %1150 = load i32, ptr %1149, align 4, !tbaa !123
  %1151 = sext i32 %1140 to i64
  %1152 = getelementptr inbounds %struct.rect, ptr %1036, i64 %1151
  %1153 = load i32, ptr %1152, align 4, !tbaa !123
  br label %1154

1154:                                             ; preds = %1158, %1136
  %1155 = phi i64 [ %1159, %1158 ], [ %1129, %1136 ]
  %1156 = trunc i64 %1155 to i32
  %1157 = icmp sgt i32 %1156, 1
  br i1 %1157, label %1158, label %1210

1158:                                             ; preds = %1154
  %1159 = add nsw i64 %1155, -1
  %1160 = getelementptr inbounds i32, ptr %1043, i64 %1159
  %1161 = load i32, ptr %1160, align 4, !tbaa !17
  %1162 = sext i32 %1161 to i64
  %1163 = getelementptr inbounds %struct.ebox, ptr %1034, i64 %1162, i32 11
  %1164 = load i32, ptr %1163, align 4, !tbaa !414
  %1165 = icmp eq i32 %1164, 0
  br i1 %1165, label %1166, label %1154, !llvm.loop !881

1166:                                             ; preds = %1158
  %.lcssa3 = phi i64 [ %1162, %1158 ]
  %1167 = getelementptr inbounds %struct.ebox, ptr %1034, i64 %.lcssa3
  %1168 = load i32, ptr %1167, align 8, !tbaa !114
  %1169 = getelementptr inbounds %struct.ebox, ptr %1034, i64 %.lcssa3, i32 1
  %1170 = load i32, ptr %1169, align 4, !tbaa !116
  %1171 = sext i32 %1170 to i64
  %1172 = getelementptr inbounds %struct.rect, ptr %1036, i64 %1171
  %1173 = load i32, ptr %1172, align 4, !tbaa !123
  %1174 = icmp slt i32 %1173, %1150
  br i1 %1174, label %1175, label %1187

1175:                                             ; preds = %1166
  %1176 = getelementptr inbounds %struct.rect, ptr %1036, i64 %1148, i32 5
  %1177 = load i32, ptr %1176, align 4, !tbaa !126
  %1178 = icmp slt i32 %1177, %1147
  br i1 %1178, label %1179, label %1184

1179:                                             ; preds = %1175
  %1180 = getelementptr inbounds %struct.rect, ptr %1036, i64 %1148, i32 2
  %1181 = load i32, ptr %1180, align 4, !tbaa !149
  %1182 = icmp eq i32 %1181, 0
  br i1 %1182, label %1183, label %1184

1183:                                             ; preds = %1179
  store i32 %1173, ptr %1149, align 4, !tbaa !123
  store i32 1, ptr %1180, align 4, !tbaa !149
  br label %1187

1184:                                             ; preds = %1179, %1175
  %1185 = icmp slt i32 %1173, %1147
  br i1 %1185, label %1186, label %1187

1186:                                             ; preds = %1184
  store i32 %1147, ptr %1172, align 4, !tbaa !123
  br label %1187

1187:                                             ; preds = %1186, %1184, %1183, %1166
  %1188 = sext i32 %1168 to i64
  %1189 = getelementptr inbounds %struct.rect, ptr %1036, i64 %1188
  %1190 = load i32, ptr %1189, align 4, !tbaa !123
  %1191 = icmp sgt i32 %1190, %1153
  br i1 %1191, label %1192, label %1210

1192:                                             ; preds = %1187
  %1193 = load i32, ptr %1130, align 4, !tbaa !17
  %1194 = sext i32 %1193 to i64
  %1195 = getelementptr inbounds %struct.ebox, ptr %1034, i64 %1194
  %1196 = load i32, ptr %1195, align 8, !tbaa !114
  %1197 = sext i32 %1196 to i64
  %1198 = getelementptr inbounds %struct.rect, ptr %1036, i64 %1197
  %1199 = getelementptr inbounds %struct.rect, ptr %1036, i64 %1197, i32 4
  %1200 = load i32, ptr %1199, align 4, !tbaa !127
  %1201 = icmp slt i32 %1145, %1200
  br i1 %1201, label %1202, label %1207

1202:                                             ; preds = %1192
  %1203 = getelementptr inbounds %struct.rect, ptr %1036, i64 %1197, i32 2
  %1204 = load i32, ptr %1203, align 4, !tbaa !149
  %1205 = icmp eq i32 %1204, 0
  br i1 %1205, label %1206, label %1207

1206:                                             ; preds = %1202
  store i32 %1190, ptr %1198, align 4, !tbaa !123
  store i32 1, ptr %1203, align 4, !tbaa !149
  br label %1210

1207:                                             ; preds = %1202, %1192
  %1208 = icmp slt i32 %1145, %1190
  br i1 %1208, label %1209, label %1210

1209:                                             ; preds = %1207
  store i32 %1145, ptr %1189, align 4, !tbaa !123
  br label %1210

1210:                                             ; preds = %1209, %1207, %1206, %1187, %1154, %1128, %1041, %1037
  %1211 = getelementptr inbounds %struct.wcbox, ptr %1038, i64 0, i32 4
  %1212 = load ptr, ptr %1211, align 8, !tbaa !7
  %1213 = icmp eq ptr %1212, null
  br i1 %1213, label %1214, label %1037, !llvm.loop !882

1214:                                             ; preds = %1210
  %1215 = load i32, ptr @numYnodes, align 4, !tbaa !17
  br label %1216

1216:                                             ; preds = %1214, %1027
  %1217 = phi i32 [ %1215, %1214 ], [ %1028, %1027 ]
  %1218 = add nuw nsw i64 %1029, 1
  %1219 = sext i32 %1217 to i64
  %1220 = icmp slt i64 %1029, %1219
  br i1 %1220, label %1027, label %1221, !llvm.loop !883

1221:                                             ; preds = %1216, %829
  %1222 = phi i32 [ %830, %829 ], [ %1217, %1216 ]
  %1223 = phi i32 [ %831, %829 ], [ %1217, %1216 ]
  %1224 = add nuw nsw i32 %824, 1
  %1225 = icmp eq i32 %1224, 3
  br i1 %1225, label %1226, label %821, !llvm.loop !884

1226:                                             ; preds = %1221
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #47
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #47
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @rmain() #0 {
  %1 = alloca [1024 x i8], align 16
  %2 = alloca ptr, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 1024, ptr nonnull %1) #47
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %3) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4) #47
  %5 = load i32, ptr @finalShot, align 4, !tbaa !17
  %6 = load i32, ptr @doCompaction, align 4, !tbaa !17
  %7 = icmp eq i32 %5, %6
  br i1 %7, label %8, label %15

8:                                                ; preds = %0
  %9 = load i32, ptr @bareFlag, align 4, !tbaa !17
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %14

11:                                               ; preds = %8
  %12 = load i32, ptr @routerMaxPaths, align 4, !tbaa !17
  store i32 %12, ptr @MAXPATHS, align 4, !tbaa !17
  %13 = load i32, ptr @routerExtraS, align 4, !tbaa !17
  br label %16

14:                                               ; preds = %8
  store i32 1, ptr @MAXPATHS, align 4, !tbaa !17
  br label %16

15:                                               ; preds = %0
  store i32 1, ptr @MAXPATHS, align 4, !tbaa !17
  br label %16

16:                                               ; preds = %15, %14, %11
  %17 = phi i32 [ %13, %11 ], [ 1, %14 ], [ 1, %15 ]
  %18 = phi i32 [ 0, %11 ], [ 1, %14 ], [ 1, %15 ]
  store i32 %17, ptr @EXTRASOURCES, align 4, !tbaa !17
  store i32 %18, ptr @bareMinimum, align 4, !tbaa !17
  %19 = load ptr, ptr @cktName, align 8, !tbaa !7
  %20 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %1, ptr noundef nonnull dereferenceable(1) @.str.813, ptr noundef %19) #44
  %21 = call noalias ptr @fopen(ptr noundef nonnull %1, ptr noundef nonnull @.str.1.814) #43
  %22 = icmp eq ptr %21, null
  br i1 %22, label %23, label %26

23:                                               ; preds = %16
  %24 = load ptr, ptr @fpo, align 8, !tbaa !7
  %25 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %24, ptr noundef nonnull @.str.2.815, ptr noundef nonnull %1) #43
  call void @exit(i32 noundef 0) #49
  unreachable

26:                                               ; preds = %16
  tail call void @readgraph(ptr noundef nonnull %21) #44
  %27 = load ptr, ptr @cktName, align 8, !tbaa !7
  %28 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %1, ptr noundef nonnull dereferenceable(1) @.str.3.816, ptr noundef %27) #44
  %29 = call noalias ptr @fopen(ptr noundef nonnull %1, ptr noundef nonnull @.str.1.814) #43
  %30 = icmp eq ptr %29, null
  br i1 %30, label %31, label %33

31:                                               ; preds = %26
  %32 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.817, ptr noundef nonnull %1) #43
  call void @exit(i32 noundef 0) #49
  unreachable

33:                                               ; preds = %26
  tail call void @readpnode(ptr noundef nonnull %29) #44
  tail call void @printnets() #44
  %34 = load i32, ptr @doChannelGraph, align 4, !tbaa !17
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %37, label %36

36:                                               ; preds = %33
  tail call void @density() #44
  tail call void @bellman() #44
  br label %37

37:                                               ; preds = %36, %33
  %38 = tail call i32 @fclose(ptr noundef nonnull %29) #43
  %39 = load i32, ptr @eNum, align 4, !tbaa !17
  %40 = icmp slt i32 %39, 1
  br i1 %40, label %60, label %41

41:                                               ; preds = %55, %37
  %42 = phi i32 [ %56, %55 ], [ %39, %37 ]
  %43 = phi i64 [ %57, %55 ], [ 1, %37 ]
  %44 = load ptr, ptr @eArray, align 8, !tbaa !7
  %45 = getelementptr inbounds %struct.ebox, ptr %44, i64 %43, i32 12
  %46 = load ptr, ptr %45, align 8, !tbaa !184
  %47 = icmp eq ptr %46, null
  br i1 %47, label %55, label %48

48:                                               ; preds = %48, %41
  %49 = load ptr, ptr @eArray, align 8, !tbaa !7
  %50 = getelementptr inbounds %struct.ebox, ptr %49, i64 %43, i32 12
  call void @tpop(ptr noundef nonnull %50, ptr noundef nonnull %2, ptr noundef nonnull %3, ptr noundef nonnull %4) #44
  %51 = load ptr, ptr %2, align 8, !tbaa !7
  %52 = icmp eq ptr %51, null
  br i1 %52, label %53, label %48

53:                                               ; preds = %48
  %54 = load i32, ptr @eNum, align 4, !tbaa !17
  br label %55

55:                                               ; preds = %53, %41
  %56 = phi i32 [ %54, %53 ], [ %42, %41 ]
  %57 = add nuw nsw i64 %43, 1
  %58 = sext i32 %56 to i64
  %59 = icmp slt i64 %43, %58
  br i1 %59, label %41, label %60, !llvm.loop !885

60:                                               ; preds = %55, %37
  %61 = load ptr, ptr @eArray, align 8, !tbaa !7
  call void @free(ptr noundef %61) #44
  %62 = load i32, ptr @numRects, align 4, !tbaa !17
  %63 = icmp slt i32 %62, 1
  br i1 %63, label %73, label %64

64:                                               ; preds = %64, %60
  %65 = phi i64 [ %69, %64 ], [ 1, %60 ]
  %66 = load ptr, ptr @eIndexArray, align 8, !tbaa !7
  %67 = getelementptr inbounds ptr, ptr %66, i64 %65
  %68 = load ptr, ptr %67, align 8, !tbaa !7
  call void @free(ptr noundef %68) #44
  %69 = add nuw nsw i64 %65, 1
  %70 = load i32, ptr @numRects, align 4, !tbaa !17
  %71 = sext i32 %70 to i64
  %72 = icmp slt i64 %65, %71
  br i1 %72, label %64, label %73, !llvm.loop !886

73:                                               ; preds = %64, %60
  %74 = load ptr, ptr @eIndexArray, align 8, !tbaa !7
  call void @free(ptr noundef %74) #44
  %75 = load i32, ptr @numXnodes, align 4, !tbaa !17
  %76 = icmp slt i32 %75, 1
  br i1 %76, label %77, label %80

77:                                               ; preds = %99, %73
  %78 = load i32, ptr @numYnodes, align 4, !tbaa !17
  %79 = icmp slt i32 %78, 1
  br i1 %79, label %128, label %104

80:                                               ; preds = %99, %73
  %81 = phi i32 [ %100, %99 ], [ %75, %73 ]
  %82 = phi i64 [ %101, %99 ], [ 1, %73 ]
  %83 = load ptr, ptr @xNodeArray, align 8, !tbaa !7
  %84 = getelementptr inbounds ptr, ptr %83, i64 %82
  %85 = load ptr, ptr %84, align 8, !tbaa !7
  %86 = icmp eq ptr %85, null
  br i1 %86, label %99, label %87

87:                                               ; preds = %93, %80
  %88 = phi ptr [ %95, %93 ], [ %85, %80 ]
  %89 = getelementptr inbounds %struct.wcbox, ptr %88, i64 0, i32 2
  %90 = load ptr, ptr %89, align 8, !tbaa !199
  %91 = icmp eq ptr %90, null
  br i1 %91, label %93, label %92

92:                                               ; preds = %87
  call void @free(ptr noundef nonnull %90) #44
  br label %93

93:                                               ; preds = %92, %87
  %94 = getelementptr inbounds %struct.wcbox, ptr %88, i64 0, i32 4
  %95 = load ptr, ptr %94, align 8, !tbaa !887
  call void @free(ptr noundef nonnull %88) #44
  %96 = icmp eq ptr %95, null
  br i1 %96, label %97, label %87, !llvm.loop !888

97:                                               ; preds = %93
  %98 = load i32, ptr @numXnodes, align 4, !tbaa !17
  br label %99

99:                                               ; preds = %97, %80
  %100 = phi i32 [ %98, %97 ], [ %81, %80 ]
  %101 = add nuw nsw i64 %82, 1
  %102 = sext i32 %100 to i64
  %103 = icmp slt i64 %82, %102
  br i1 %103, label %80, label %77, !llvm.loop !889

104:                                              ; preds = %123, %77
  %105 = phi i32 [ %124, %123 ], [ %78, %77 ]
  %106 = phi i64 [ %125, %123 ], [ 1, %77 ]
  %107 = load ptr, ptr @yNodeArray, align 8, !tbaa !7
  %108 = getelementptr inbounds ptr, ptr %107, i64 %106
  %109 = load ptr, ptr %108, align 8, !tbaa !7
  %110 = icmp eq ptr %109, null
  br i1 %110, label %123, label %111

111:                                              ; preds = %117, %104
  %112 = phi ptr [ %119, %117 ], [ %109, %104 ]
  %113 = getelementptr inbounds %struct.wcbox, ptr %112, i64 0, i32 2
  %114 = load ptr, ptr %113, align 8, !tbaa !199
  %115 = icmp eq ptr %114, null
  br i1 %115, label %117, label %116

116:                                              ; preds = %111
  call void @free(ptr noundef nonnull %114) #44
  br label %117

117:                                              ; preds = %116, %111
  %118 = getelementptr inbounds %struct.wcbox, ptr %112, i64 0, i32 4
  %119 = load ptr, ptr %118, align 8, !tbaa !887
  call void @free(ptr noundef nonnull %112) #44
  %120 = icmp eq ptr %119, null
  br i1 %120, label %121, label %111, !llvm.loop !890

121:                                              ; preds = %117
  %122 = load i32, ptr @numYnodes, align 4, !tbaa !17
  br label %123

123:                                              ; preds = %121, %104
  %124 = phi i32 [ %122, %121 ], [ %105, %104 ]
  %125 = add nuw nsw i64 %106, 1
  %126 = sext i32 %124 to i64
  %127 = icmp slt i64 %106, %126
  br i1 %127, label %104, label %128, !llvm.loop !891

128:                                              ; preds = %123, %77
  %129 = load ptr, ptr @xNodeArray, align 8, !tbaa !7
  call void @free(ptr noundef %129) #44
  %130 = load ptr, ptr @yNodeArray, align 8, !tbaa !7
  call void @free(ptr noundef %130) #44
  %131 = load ptr, ptr @edgeList, align 8, !tbaa !7
  call void @free(ptr noundef %131) #44
  %132 = load ptr, ptr @xBellArray, align 8, !tbaa !7
  call void @free(ptr noundef %132) #44
  %133 = load ptr, ptr @yBellArray, align 8, !tbaa !7
  call void @free(ptr noundef %133) #44
  %134 = load i32, ptr @pnodeAlength, align 4, !tbaa !17
  %135 = icmp slt i32 %134, 1
  %136 = load ptr, ptr @pnodeArray, align 8, !tbaa !7
  br i1 %135, label %163, label %137

137:                                              ; preds = %157, %128
  %138 = phi ptr [ %158, %157 ], [ %136, %128 ]
  %139 = phi i64 [ %159, %157 ], [ 1, %128 ]
  %140 = getelementptr inbounds %struct.dlink2, ptr %138, i64 %139, i32 2
  %141 = load ptr, ptr %140, align 8, !tbaa !531
  %142 = icmp eq ptr %141, null
  br i1 %142, label %150, label %143

143:                                              ; preds = %143, %137
  %144 = phi ptr [ %146, %143 ], [ %141, %137 ]
  %145 = getelementptr inbounds %struct.plist, ptr %144, i64 0, i32 1
  %146 = load ptr, ptr %145, align 8, !tbaa !532
  call void @free(ptr noundef nonnull %144) #44
  %147 = icmp eq ptr %146, null
  br i1 %147, label %148, label %143, !llvm.loop !892

148:                                              ; preds = %143
  %149 = load ptr, ptr @pnodeArray, align 8, !tbaa !7
  br label %150

150:                                              ; preds = %148, %137
  %151 = phi ptr [ %149, %148 ], [ %138, %137 ]
  %152 = getelementptr inbounds %struct.dlink2, ptr %151, i64 %139, i32 1
  %153 = load ptr, ptr %152, align 8, !tbaa !593
  %154 = icmp eq ptr %153, null
  br i1 %154, label %157, label %155

155:                                              ; preds = %150
  call void @free(ptr noundef nonnull %153) #44
  %156 = load ptr, ptr @pnodeArray, align 8, !tbaa !7
  br label %157

157:                                              ; preds = %155, %150
  %158 = phi ptr [ %151, %150 ], [ %156, %155 ]
  %159 = add nuw nsw i64 %139, 1
  %160 = load i32, ptr @pnodeAlength, align 4, !tbaa !17
  %161 = sext i32 %160 to i64
  %162 = icmp slt i64 %139, %161
  br i1 %162, label %137, label %163, !llvm.loop !893

163:                                              ; preds = %157, %128
  %164 = phi ptr [ %136, %128 ], [ %158, %157 ]
  call void @free(ptr noundef %164) #44
  %165 = load i32, ptr @numnodes, align 4, !tbaa !17
  %166 = load i32, ptr @maxpnode, align 4, !tbaa !17
  %167 = add nsw i32 %166, %165
  %168 = icmp slt i32 %167, 1
  br i1 %168, label %192, label %169

169:                                              ; preds = %185, %163
  %170 = phi i32 [ %186, %185 ], [ %166, %163 ]
  %171 = phi i32 [ %187, %185 ], [ %165, %163 ]
  %172 = phi i64 [ %188, %185 ], [ 1, %163 ]
  %173 = load ptr, ptr @gnodeArray, align 8, !tbaa !7
  %174 = getelementptr inbounds ptr, ptr %173, i64 %172
  %175 = load ptr, ptr %174, align 8, !tbaa !7
  %176 = icmp eq ptr %175, null
  br i1 %176, label %185, label %177

177:                                              ; preds = %177, %169
  %178 = phi ptr [ %180, %177 ], [ %175, %169 ]
  %179 = getelementptr inbounds %struct.clbox, ptr %178, i64 0, i32 7
  %180 = load ptr, ptr %179, align 8, !tbaa !483
  call void @free(ptr noundef nonnull %178) #44
  %181 = icmp eq ptr %180, null
  br i1 %181, label %182, label %177, !llvm.loop !894

182:                                              ; preds = %177
  %183 = load i32, ptr @numnodes, align 4, !tbaa !17
  %184 = load i32, ptr @maxpnode, align 4, !tbaa !17
  br label %185

185:                                              ; preds = %182, %169
  %186 = phi i32 [ %184, %182 ], [ %170, %169 ]
  %187 = phi i32 [ %183, %182 ], [ %171, %169 ]
  %188 = add nuw nsw i64 %172, 1
  %189 = add nsw i32 %186, %187
  %190 = sext i32 %189 to i64
  %191 = icmp slt i64 %172, %190
  br i1 %191, label %169, label %192, !llvm.loop !895

192:                                              ; preds = %185, %163
  %193 = load ptr, ptr @gnodeArray, align 8, !tbaa !7
  call void @free(ptr noundef %193) #44
  br label %194

194:                                              ; preds = %194, %192
  %195 = phi i64 [ 1, %192 ], [ %199, %194 ]
  %196 = load ptr, ptr @gtrace, align 8, !tbaa !7
  %197 = getelementptr inbounds ptr, ptr %196, i64 %195
  %198 = load ptr, ptr %197, align 8, !tbaa !7
  call void @free(ptr noundef %198) #44
  %199 = add nuw nsw i64 %195, 1
  %200 = icmp eq i64 %199, 5
  br i1 %200, label %201, label %194, !llvm.loop !896

201:                                              ; preds = %194
  %202 = load ptr, ptr @gtrace, align 8, !tbaa !7
  call void @free(ptr noundef %202) #44
  %203 = load i32, ptr @largestNet, align 4, !tbaa !17
  %204 = icmp slt i32 %203, 1
  br i1 %204, label %250, label %205

205:                                              ; preds = %242, %201
  %206 = phi i64 [ %246, %242 ], [ 1, %201 ]
  %207 = load i32, ptr @MAXPATHS, align 4, !tbaa !17
  %208 = icmp slt i32 %207, 1
  br i1 %208, label %242, label %209

209:                                              ; preds = %230, %205
  %210 = phi i64 [ %238, %230 ], [ 1, %205 ]
  %211 = load ptr, ptr @netRoutes, align 8, !tbaa !7
  %212 = getelementptr inbounds %struct.nrbox, ptr %211, i64 %206
  %213 = load ptr, ptr %212, align 8, !tbaa !188
  %214 = getelementptr inbounds ptr, ptr %213, i64 %210
  %215 = load ptr, ptr %214, align 8, !tbaa !7
  %216 = getelementptr inbounds %struct.altbox, ptr %215, i64 0, i32 2
  %217 = load ptr, ptr %216, align 8, !tbaa !748
  %218 = icmp eq ptr %217, null
  br i1 %218, label %230, label %219

219:                                              ; preds = %219, %209
  %220 = phi ptr [ %222, %219 ], [ %217, %209 ]
  %221 = getelementptr inbounds %struct.chanbox, ptr %220, i64 0, i32 4
  %222 = load ptr, ptr %221, align 8, !tbaa !751
  call void @free(ptr noundef nonnull %220) #44
  %223 = icmp eq ptr %222, null
  br i1 %223, label %224, label %219, !llvm.loop !897

224:                                              ; preds = %219
  %225 = load ptr, ptr @netRoutes, align 8, !tbaa !7
  %226 = getelementptr inbounds %struct.nrbox, ptr %225, i64 %206
  %227 = load ptr, ptr %226, align 8, !tbaa !188
  %228 = getelementptr inbounds ptr, ptr %227, i64 %210
  %229 = load ptr, ptr %228, align 8, !tbaa !7
  br label %230

230:                                              ; preds = %224, %209
  %231 = phi ptr [ %229, %224 ], [ %215, %209 ]
  %232 = load ptr, ptr %231, align 8, !tbaa !746
  call void @free(ptr noundef %232) #44
  %233 = load ptr, ptr @netRoutes, align 8, !tbaa !7
  %234 = getelementptr inbounds %struct.nrbox, ptr %233, i64 %206
  %235 = load ptr, ptr %234, align 8, !tbaa !188
  %236 = getelementptr inbounds ptr, ptr %235, i64 %210
  %237 = load ptr, ptr %236, align 8, !tbaa !7
  call void @free(ptr noundef %237) #44
  %238 = add nuw nsw i64 %210, 1
  %239 = load i32, ptr @MAXPATHS, align 4, !tbaa !17
  %240 = sext i32 %239 to i64
  %241 = icmp slt i64 %210, %240
  br i1 %241, label %209, label %242, !llvm.loop !898

242:                                              ; preds = %230, %205
  %243 = load ptr, ptr @netRoutes, align 8, !tbaa !7
  %244 = getelementptr inbounds %struct.nrbox, ptr %243, i64 %206
  %245 = load ptr, ptr %244, align 8, !tbaa !188
  call void @free(ptr noundef %245) #44
  %246 = add nuw nsw i64 %206, 1
  %247 = load i32, ptr @largestNet, align 4, !tbaa !17
  %248 = sext i32 %247 to i64
  %249 = icmp slt i64 %206, %248
  br i1 %249, label %205, label %250, !llvm.loop !899

250:                                              ; preds = %242, %201
  %251 = load ptr, ptr @netRoutes, align 8, !tbaa !7
  call void @free(ptr noundef %251) #44
  %252 = load i32, ptr @MAXPATHS, align 4, !tbaa !17
  %253 = icmp slt i32 %252, 1
  br i1 %253, label %264, label %254

254:                                              ; preds = %254, %250
  %255 = phi i64 [ %259, %254 ], [ 1, %250 ]
  %256 = load ptr, ptr @savePaths, align 8, !tbaa !7
  %257 = getelementptr inbounds ptr, ptr %256, i64 %255
  %258 = load ptr, ptr %257, align 8, !tbaa !7
  call void @free(ptr noundef %258) #44
  %259 = add nuw nsw i64 %255, 1
  %260 = load i32, ptr @MAXPATHS, align 4, !tbaa !17
  %261 = shl nsw i32 %260, 1
  %262 = sext i32 %261 to i64
  %263 = icmp slt i64 %255, %262
  br i1 %263, label %254, label %264, !llvm.loop !900

264:                                              ; preds = %254, %250
  %265 = load ptr, ptr @savePaths, align 8, !tbaa !7
  call void @free(ptr noundef %265) #44
  %266 = load i32, ptr @numpins, align 4, !tbaa !17
  %267 = icmp slt i32 %266, 1
  %268 = load ptr, ptr @pnameArray, align 8, !tbaa !7
  br i1 %267, label %285, label %269

269:                                              ; preds = %279, %264
  %270 = phi i32 [ %280, %279 ], [ %266, %264 ]
  %271 = phi ptr [ %281, %279 ], [ %268, %264 ]
  %272 = phi i64 [ %282, %279 ], [ 1, %264 ]
  %273 = getelementptr inbounds ptr, ptr %271, i64 %272
  %274 = load ptr, ptr %273, align 8, !tbaa !7
  %275 = icmp eq ptr %274, null
  br i1 %275, label %279, label %276

276:                                              ; preds = %269
  call void @free(ptr noundef nonnull %274) #44
  %277 = load ptr, ptr @pnameArray, align 8, !tbaa !7
  %278 = load i32, ptr @numpins, align 4, !tbaa !17
  br label %279

279:                                              ; preds = %276, %269
  %280 = phi i32 [ %270, %269 ], [ %278, %276 ]
  %281 = phi ptr [ %271, %269 ], [ %277, %276 ]
  %282 = add nuw nsw i64 %272, 1
  %283 = sext i32 %280 to i64
  %284 = icmp slt i64 %272, %283
  br i1 %284, label %269, label %285, !llvm.loop !901

285:                                              ; preds = %279, %264
  %286 = phi ptr [ %268, %264 ], [ %281, %279 ]
  call void @free(ptr noundef %286) #44
  %287 = load i32, ptr @largestNet, align 4, !tbaa !17
  %288 = icmp slt i32 %287, 1
  %289 = load ptr, ptr @nnameArray, align 8, !tbaa !7
  br i1 %288, label %306, label %290

290:                                              ; preds = %300, %285
  %291 = phi i32 [ %301, %300 ], [ %287, %285 ]
  %292 = phi ptr [ %302, %300 ], [ %289, %285 ]
  %293 = phi i64 [ %303, %300 ], [ 1, %285 ]
  %294 = getelementptr inbounds ptr, ptr %292, i64 %293
  %295 = load ptr, ptr %294, align 8, !tbaa !7
  %296 = icmp eq ptr %295, null
  br i1 %296, label %300, label %297

297:                                              ; preds = %290
  call void @free(ptr noundef nonnull %295) #44
  %298 = load ptr, ptr @nnameArray, align 8, !tbaa !7
  %299 = load i32, ptr @largestNet, align 4, !tbaa !17
  br label %300

300:                                              ; preds = %297, %290
  %301 = phi i32 [ %291, %290 ], [ %299, %297 ]
  %302 = phi ptr [ %292, %290 ], [ %298, %297 ]
  %303 = add nuw nsw i64 %293, 1
  %304 = sext i32 %301 to i64
  %305 = icmp slt i64 %293, %304
  br i1 %305, label %290, label %306, !llvm.loop !902

306:                                              ; preds = %300, %285
  %307 = phi ptr [ %289, %285 ], [ %302, %300 ]
  call void @free(ptr noundef %307) #44
  %308 = load ptr, ptr @pinOffset, align 8, !tbaa !7
  call void @free(ptr noundef %308) #44
  %309 = load ptr, ptr @segList, align 8, !tbaa !7
  call void @free(ptr noundef %309) #44
  %310 = load i32, ptr @pnodeAlength, align 4, !tbaa !17
  %311 = icmp sgt i32 %310, 0
  br i1 %311, label %312, label %321

312:                                              ; preds = %312, %306
  %313 = phi i64 [ %317, %312 ], [ 0, %306 ]
  %314 = load ptr, ptr @netSegArray, align 8, !tbaa !7
  %315 = getelementptr inbounds ptr, ptr %314, i64 %313
  %316 = load ptr, ptr %315, align 8, !tbaa !7
  call void @free(ptr noundef %316) #44
  %317 = add nuw nsw i64 %313, 1
  %318 = load i32, ptr @pnodeAlength, align 4, !tbaa !17
  %319 = sext i32 %318 to i64
  %320 = icmp slt i64 %317, %319
  br i1 %320, label %312, label %321, !llvm.loop !903

321:                                              ; preds = %312, %306
  %322 = load ptr, ptr @netSegArray, align 8, !tbaa !7
  call void @free(ptr noundef %322) #44
  %323 = load ptr, ptr @sourceList, align 8, !tbaa !7
  call void @free(ptr noundef %323) #44
  %324 = load ptr, ptr @targetList, align 8, !tbaa !7
  call void @free(ptr noundef %324) #44
  %325 = load ptr, ptr @delSourceList, align 8, !tbaa !7
  call void @free(ptr noundef %325) #44
  %326 = load ptr, ptr @addTargetList, align 8, !tbaa !7
  call void @free(ptr noundef %326) #44
  %327 = load i32, ptr @EXTRASOURCES, align 4, !tbaa !17
  %328 = load i32, ptr @MAXPATHS, align 4, !tbaa !17
  %329 = mul nsw i32 %328, %327
  %330 = icmp slt i32 %329, 1
  br i1 %330, label %342, label %331

331:                                              ; preds = %331, %321
  %332 = phi i64 [ %336, %331 ], [ 1, %321 ]
  %333 = load ptr, ptr @pathList, align 8, !tbaa !7
  %334 = getelementptr inbounds ptr, ptr %333, i64 %332
  %335 = load ptr, ptr %334, align 8, !tbaa !7
  call void @free(ptr noundef %335) #44
  %336 = add nuw nsw i64 %332, 1
  %337 = load i32, ptr @EXTRASOURCES, align 4, !tbaa !17
  %338 = load i32, ptr @MAXPATHS, align 4, !tbaa !17
  %339 = mul nsw i32 %338, %337
  %340 = sext i32 %339 to i64
  %341 = icmp slt i64 %332, %340
  br i1 %341, label %331, label %342, !llvm.loop !904

342:                                              ; preds = %331, %321
  %343 = load ptr, ptr @pathList, align 8, !tbaa !7
  call void @free(ptr noundef %343) #44
  %344 = load i32, ptr @MAXPATHS, align 4, !tbaa !17
  %345 = icmp slt i32 %344, 0
  br i1 %345, label %357, label %346

346:                                              ; preds = %346, %342
  %347 = phi i64 [ %351, %346 ], [ 1, %342 ]
  %348 = load ptr, ptr @pathArray, align 8, !tbaa !7
  %349 = getelementptr inbounds %struct.path, ptr %348, i64 %347
  %350 = load ptr, ptr %349, align 8, !tbaa !610
  call void @free(ptr noundef %350) #44
  %351 = add nuw nsw i64 %347, 1
  %352 = load i32, ptr @MAXPATHS, align 4, !tbaa !17
  %353 = shl nsw i32 %352, 1
  %354 = add nsw i32 %353, 2
  %355 = sext i32 %354 to i64
  %356 = icmp slt i64 %347, %355
  br i1 %356, label %346, label %357, !llvm.loop !905

357:                                              ; preds = %346, %342
  %358 = load ptr, ptr @pathArray, align 8, !tbaa !7
  call void @free(ptr noundef %358) #44
  %359 = load ptr, ptr @tempArray, align 8, !tbaa !7
  call void @free(ptr noundef %359) #44
  %360 = load ptr, ptr @pinlist, align 8, !tbaa !7
  %361 = icmp eq ptr %360, null
  br i1 %361, label %367, label %362

362:                                              ; preds = %362, %357
  %363 = phi ptr [ %365, %362 ], [ %360, %357 ]
  %364 = getelementptr inbounds %struct.quad, ptr %363, i64 0, i32 4
  %365 = load ptr, ptr %364, align 8, !tbaa !839
  call void @free(ptr noundef nonnull %363) #44
  %366 = icmp eq ptr %365, null
  br i1 %366, label %367, label %362, !llvm.loop !906

367:                                              ; preds = %362, %357
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %3) #47
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #47
  call void @llvm.lifetime.end.p0(i64 1024, ptr nonnull %1) #47
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @routenet(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %3) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4) #47
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #47
  %6 = icmp sgt i32 %0, 2
  br i1 %6, label %7, label %32

7:                                                ; preds = %2
  %8 = load i32, ptr @MAXPATHS, align 4, !tbaa !17
  %9 = add nsw i32 %0, -1
  %10 = sdiv i32 %8, %9
  store i32 %10, ptr %3, align 4, !tbaa !17
  %11 = tail call i32 @llvm.smax.i32(i32 %10, i32 1)
  %12 = sitofp i32 %9 to double
  br label %13

13:                                               ; preds = %13, %7
  %14 = phi i32 [ %11, %7 ], [ %24, %13 ]
  store i32 %14, ptr @Mpaths, align 4, !tbaa !17
  %15 = sitofp i32 %14 to double
  %16 = tail call double @pow(double noundef %15, double noundef %12) #44
  %17 = load i32, ptr @MAXPATHS, align 4, !tbaa !17
  %18 = sitofp i32 %17 to double
  %19 = fmul double %18, 8.000000e+01
  %20 = fcmp ogt double %16, %19
  %21 = load i32, ptr @Mpaths, align 4
  %22 = icmp sgt i32 %21, 1
  %23 = select i1 %20, i1 %22, i1 false
  %24 = add nsw i32 %21, -1
  br i1 %23, label %13, label %25, !llvm.loop !907

25:                                               ; preds = %13
  %.lcssa10 = phi i32 [ %21, %13 ]
  %26 = icmp eq i32 %.lcssa10, 1
  %27 = icmp sgt i32 %0, 19
  %28 = and i1 %27, %26
  %29 = load i32, ptr @bareMinimum, align 4
  %30 = icmp eq i32 %29, 0
  %31 = select i1 %28, i1 %30, i1 false
  br i1 %31, label %32, label %34

32:                                               ; preds = %25, %2
  %33 = phi ptr [ @Mpaths, %2 ], [ @bareMinimum, %25 ]
  store i32 1, ptr %33, align 4, !tbaa !17
  br label %34

34:                                               ; preds = %32, %25
  %35 = phi i1 [ false, %25 ], [ %6, %32 ]
  store ptr null, ptr @indexRoot, align 8, !tbaa !7
  store i32 0, ptr @treeSize, align 4, !tbaa !17
  %36 = load i32, ptr @MAXPATHS, align 4, !tbaa !17
  %37 = icmp slt i32 %36, 1
  br i1 %37, label %38, label %46

38:                                               ; preds = %46, %34
  %39 = icmp slt i32 %1, 1
  %40 = load i32, ptr @numnodes, align 4, !tbaa !17
  br i1 %39, label %61, label %41

41:                                               ; preds = %38
  %42 = load ptr, ptr @sourceList, align 8, !tbaa !7
  %43 = load ptr, ptr @delSourceList, align 8, !tbaa !7
  %44 = add nuw i32 %1, 1
  %45 = zext i32 %44 to i64
  br label %52

46:                                               ; preds = %46, %34
  %47 = phi i32 [ %48, %46 ], [ 1, %34 ]
  tail call void @tinsert(ptr noundef nonnull @indexRoot, i32 noundef %47, i32 noundef 0) #44
  %48 = add nuw nsw i32 %47, 1
  %49 = load i32, ptr @MAXPATHS, align 4, !tbaa !17
  %50 = shl nsw i32 %49, 1
  %51 = icmp slt i32 %47, %50
  br i1 %51, label %46, label %38, !llvm.loop !908

52:                                               ; preds = %52, %41
  %53 = phi i64 [ 1, %41 ], [ %59, %52 ]
  %54 = trunc i64 %53 to i32
  %55 = add nsw i32 %40, %54
  %56 = trunc i32 %55 to i16
  %57 = getelementptr inbounds i16, ptr %42, i64 %53
  store i16 %56, ptr %57, align 2, !tbaa !542
  %58 = getelementptr inbounds i16, ptr %43, i64 %53
  store i16 0, ptr %58, align 2, !tbaa !542
  %59 = add nuw nsw i64 %53, 1
  %60 = icmp eq i64 %59, %45
  br i1 %60, label %61, label %52, !llvm.loop !909

61:                                               ; preds = %52, %38
  store i32 %1, ptr @sourcePtr, align 4, !tbaa !17
  %62 = add i32 %40, %1
  %63 = icmp slt i32 %62, 1
  br i1 %63, label %75, label %64

64:                                               ; preds = %61
  %65 = load ptr, ptr @targetList, align 8, !tbaa !7
  %66 = load ptr, ptr @addTargetList, align 8, !tbaa !7
  %67 = add nuw i32 %62, 1
  %68 = zext i32 %67 to i64
  br label %69

69:                                               ; preds = %69, %64
  %70 = phi i64 [ 1, %64 ], [ %73, %69 ]
  %71 = getelementptr inbounds i16, ptr %65, i64 %70
  store i16 0, ptr %71, align 2, !tbaa !542
  %72 = getelementptr inbounds i16, ptr %66, i64 %70
  store i16 0, ptr %72, align 2, !tbaa !542
  %73 = add nuw nsw i64 %70, 1
  %74 = icmp eq i64 %73, %68
  br i1 %74, label %75, label %69, !llvm.loop !910

75:                                               ; preds = %69, %61
  store i32 0, ptr @targetPtr, align 4, !tbaa !17
  store i32 0, ptr @segPtr, align 4, !tbaa !17
  %76 = add i32 %40, 1
  store i32 %76, ptr %3, align 4, !tbaa !17
  %77 = icmp slt i32 %40, %62
  %78 = load ptr, ptr @pnodeArray, align 8, !tbaa !7
  br i1 %77, label %79, label %136

79:                                               ; preds = %75
  %80 = icmp sgt i32 %1, 0
  %81 = sext i32 %76 to i64
  %82 = sext i32 %40 to i64
  %83 = sext i32 %62 to i64
  %84 = tail call i32 @llvm.smax.i32(i32 %76, i32 %62)
  br label %90

85:                                               ; preds = %129, %90
  %86 = phi i32 [ %94, %90 ], [ %130, %129 ]
  %87 = phi i32 [ %93, %90 ], [ %131, %129 ]
  %88 = add i32 %91, 1
  store i32 %88, ptr %3, align 4, !tbaa !17
  %89 = icmp eq i32 %91, %84
  br i1 %89, label %136, label %90, !llvm.loop !911

90:                                               ; preds = %85, %79
  %91 = phi i32 [ %76, %79 ], [ %88, %85 ]
  %92 = phi i32 [ %40, %79 ], [ %91, %85 ]
  %93 = phi i32 [ undef, %79 ], [ %87, %85 ]
  %94 = phi i32 [ 1000000000, %79 ], [ %86, %85 ]
  %95 = sub nsw i32 %91, %40
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds %struct.dlink2, ptr %78, i64 %96, i32 1
  %98 = load ptr, ptr %97, align 8, !tbaa !593
  store i32 %76, ptr %4, align 4, !tbaa !17
  br i1 %80, label %99, label %85

99:                                               ; preds = %90
  %100 = getelementptr inbounds %struct.dlink2, ptr %78, i64 %96
  br label %101

101:                                              ; preds = %129, %99
  %102 = phi i64 [ %81, %99 ], [ %132, %129 ]
  %103 = phi i32 [ %93, %99 ], [ %131, %129 ]
  %104 = phi i32 [ %94, %99 ], [ %130, %129 ]
  %105 = phi i32 [ %40, %99 ], [ %135, %129 ]
  %106 = icmp eq i32 %92, %105
  br i1 %106, label %129, label %107

107:                                              ; preds = %101
  %108 = load i32, ptr %100, align 8, !tbaa !529
  %109 = icmp eq i32 %108, 0
  %110 = sub nsw i64 %102, %82
  %111 = getelementptr inbounds %struct.dlink2, ptr %78, i64 %110
  %112 = load i32, ptr %111, align 8, !tbaa !529
  %113 = icmp ne i32 %112, 0
  br i1 %109, label %117, label %114

114:                                              ; preds = %107
  br i1 %113, label %115, label %120

115:                                              ; preds = %114
  %116 = icmp eq i32 %108, %112
  br i1 %116, label %129, label %123

117:                                              ; preds = %107
  %118 = icmp eq i32 %112, %95
  %119 = and i1 %113, %118
  br i1 %119, label %129, label %123

120:                                              ; preds = %114
  %121 = trunc i64 %110 to i32
  %122 = icmp eq i32 %108, %121
  br i1 %122, label %129, label %123

123:                                              ; preds = %120, %117, %115
  %124 = getelementptr inbounds %struct.nnode, ptr %98, i64 %102, i32 1
  %125 = load i32, ptr %124, align 4, !tbaa !594
  %126 = icmp slt i32 %125, %104
  %127 = tail call i32 @llvm.smin.i32(i32 %125, i32 %104)
  %128 = select i1 %126, i32 %91, i32 %103
  br label %129

129:                                              ; preds = %123, %120, %117, %115, %101
  %130 = phi i32 [ %104, %101 ], [ %104, %115 ], [ %104, %120 ], [ %127, %123 ], [ %104, %117 ]
  %131 = phi i32 [ %103, %101 ], [ %103, %115 ], [ %103, %120 ], [ %128, %123 ], [ %103, %117 ]
  %132 = add nsw i64 %102, 1
  %133 = trunc i64 %132 to i32
  store i32 %133, ptr %4, align 4, !tbaa !17
  %134 = icmp slt i64 %102, %83
  %135 = trunc i64 %102 to i32
  br i1 %134, label %101, label %85, !llvm.loop !912

136:                                              ; preds = %85, %75
  %137 = phi i32 [ undef, %75 ], [ %87, %85 ]
  store i32 0, ptr @pathLength, align 4, !tbaa !17
  store i32 0, ptr @pathIndex, align 4, !tbaa !17
  %138 = trunc i32 %137 to i16
  %139 = load ptr, ptr @delSourceList, align 8, !tbaa !7
  %140 = getelementptr inbounds i16, ptr %139, i64 1
  store i16 %138, ptr %140, align 2, !tbaa !542
  %141 = load ptr, ptr @addTargetList, align 8, !tbaa !7
  %142 = getelementptr inbounds i16, ptr %141, i64 1
  store i16 %138, ptr %142, align 2, !tbaa !542
  %143 = sub nsw i32 %137, %40
  %144 = sext i32 %143 to i64
  %145 = getelementptr inbounds %struct.dlink2, ptr %78, i64 %144
  %146 = load i32, ptr %145, align 8, !tbaa !529
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %178, label %148

148:                                              ; preds = %136
  %149 = add nsw i32 %146, %40
  %150 = trunc i32 %149 to i16
  %151 = getelementptr inbounds i16, ptr %139, i64 2
  store i16 %150, ptr %151, align 2, !tbaa !542
  %152 = getelementptr inbounds i16, ptr %141, i64 2
  store i16 %150, ptr %152, align 2, !tbaa !542
  %153 = sext i32 %146 to i64
  %154 = getelementptr inbounds %struct.dlink2, ptr %78, i64 %153, i32 2
  %155 = load ptr, ptr %154, align 8, !tbaa !7
  %156 = icmp eq ptr %155, null
  br i1 %156, label %201, label %157

157:                                              ; preds = %169, %148
  %158 = phi i64 [ %171, %169 ], [ 1, %148 ]
  %159 = phi ptr [ %176, %169 ], [ %155, %148 ]
  br label %160

160:                                              ; preds = %165, %157
  %161 = phi ptr [ %159, %157 ], [ %167, %165 ]
  %162 = load i32, ptr %161, align 8, !tbaa !534
  %163 = add nsw i32 %162, %40
  %164 = icmp eq i32 %163, %137
  br i1 %164, label %165, label %169

165:                                              ; preds = %160
  %166 = getelementptr inbounds %struct.plist, ptr %161, i64 0, i32 1
  %167 = load ptr, ptr %166, align 8, !tbaa !7
  %168 = icmp eq ptr %167, null
  br i1 %168, label %197, label %160, !llvm.loop !913

169:                                              ; preds = %160
  %.lcssa5 = phi ptr [ %161, %160 ]
  %.lcssa3 = phi i32 [ %163, %160 ]
  %170 = trunc i32 %.lcssa3 to i16
  %171 = add nuw i64 %158, 1
  %172 = add nuw nsw i64 %158, 2
  %173 = getelementptr inbounds i16, ptr %139, i64 %172
  store i16 %170, ptr %173, align 2, !tbaa !542
  %174 = getelementptr inbounds i16, ptr %141, i64 %172
  store i16 %170, ptr %174, align 2, !tbaa !542
  %175 = getelementptr inbounds %struct.plist, ptr %.lcssa5, i64 0, i32 1
  %176 = load ptr, ptr %175, align 8, !tbaa !7
  %177 = icmp eq ptr %176, null
  br i1 %177, label %199, label %157, !llvm.loop !913

178:                                              ; preds = %136
  %179 = getelementptr inbounds %struct.dlink2, ptr %78, i64 %144, i32 2
  %180 = load ptr, ptr %179, align 8, !tbaa !7
  %181 = icmp eq ptr %180, null
  br i1 %181, label %201, label %182

182:                                              ; preds = %182, %178
  %183 = phi i64 [ %188, %182 ], [ 0, %178 ]
  %184 = phi ptr [ %193, %182 ], [ %180, %178 ]
  %185 = load i32, ptr %184, align 8, !tbaa !534
  %186 = add nsw i32 %185, %40
  %187 = trunc i32 %186 to i16
  %188 = add nuw i64 %183, 1
  %189 = add nuw nsw i64 %183, 2
  %190 = getelementptr inbounds i16, ptr %139, i64 %189
  store i16 %187, ptr %190, align 2, !tbaa !542
  %191 = getelementptr inbounds i16, ptr %141, i64 %189
  store i16 %187, ptr %191, align 2, !tbaa !542
  %192 = getelementptr inbounds %struct.plist, ptr %184, i64 0, i32 1
  %193 = load ptr, ptr %192, align 8, !tbaa !7
  %194 = icmp eq ptr %193, null
  br i1 %194, label %195, label %182, !llvm.loop !914

195:                                              ; preds = %182
  %.lcssa2 = phi i64 [ %188, %182 ]
  %196 = trunc i64 %.lcssa2 to i32
  br label %201

197:                                              ; preds = %165
  %.lcssa9 = phi i64 [ %158, %165 ]
  %198 = trunc i64 %.lcssa9 to i32
  br label %201

199:                                              ; preds = %169
  %.lcssa7 = phi i64 [ %171, %169 ]
  %200 = trunc i64 %.lcssa7 to i32
  br label %201

201:                                              ; preds = %199, %197, %195, %178, %148
  %202 = phi i32 [ 0, %178 ], [ 1, %148 ], [ %196, %195 ], [ %198, %197 ], [ %200, %199 ]
  %203 = add nsw i32 %202, 1
  %204 = load ptr, ptr @gnodeArray, align 8, !tbaa !7
  %205 = tail call i32 @llvm.smax.i32(i32 %202, i32 0)
  %206 = add nuw i32 %205, 2
  %207 = zext i32 %206 to i64
  br label %208

208:                                              ; preds = %233, %201
  %209 = phi i64 [ 1, %201 ], [ %234, %233 ]
  %210 = getelementptr inbounds i16, ptr %141, i64 %209
  %211 = load i16, ptr %210, align 2, !tbaa !542
  %212 = sext i16 %211 to i32
  %213 = sext i16 %211 to i64
  %214 = getelementptr inbounds ptr, ptr %204, i64 %213
  %215 = load ptr, ptr %214, align 8, !tbaa !7
  %216 = icmp eq ptr %215, null
  br i1 %216, label %233, label %217

217:                                              ; preds = %228, %208
  %218 = phi ptr [ %231, %228 ], [ %215, %208 ]
  %219 = load i32, ptr %218, align 8, !tbaa !481
  %220 = sext i32 %219 to i64
  %221 = getelementptr inbounds ptr, ptr %204, i64 %220
  br label %222

222:                                              ; preds = %222, %217
  %223 = phi ptr [ %221, %217 ], [ %227, %222 ]
  %224 = load ptr, ptr %223, align 8, !tbaa !7
  %225 = load i32, ptr %224, align 8, !tbaa !481
  %226 = icmp eq i32 %225, %212
  %227 = getelementptr inbounds %struct.clbox, ptr %224, i64 0, i32 7
  br i1 %226, label %228, label %222

228:                                              ; preds = %222
  %.lcssa1 = phi ptr [ %224, %222 ]
  %229 = getelementptr inbounds %struct.clbox, ptr %.lcssa1, i64 0, i32 6
  store i32 1, ptr %229, align 8, !tbaa !536
  %230 = getelementptr inbounds %struct.clbox, ptr %218, i64 0, i32 7
  %231 = load ptr, ptr %230, align 8, !tbaa !7
  %232 = icmp eq ptr %231, null
  br i1 %232, label %233, label %217, !llvm.loop !915

233:                                              ; preds = %228, %208
  %234 = add nuw nsw i64 %209, 1
  %235 = icmp eq i64 %234, %207
  br i1 %235, label %236, label %208, !llvm.loop !916

236:                                              ; preds = %233
  tail call void @recursePath(i32 noundef %203, i32 noundef 0, i32 noundef 0, i32 noundef %203) #43
  %237 = load ptr, ptr @addTargetList, align 8, !tbaa !7
  %238 = load ptr, ptr @gnodeArray, align 8, !tbaa !7
  %239 = tail call i32 @llvm.smax.i32(i32 %202, i32 0)
  %240 = add nuw i32 %239, 2
  %241 = zext i32 %240 to i64
  br label %242

242:                                              ; preds = %267, %236
  %243 = phi i64 [ 1, %236 ], [ %268, %267 ]
  %244 = getelementptr inbounds i16, ptr %237, i64 %243
  %245 = load i16, ptr %244, align 2, !tbaa !542
  %246 = sext i16 %245 to i32
  %247 = sext i16 %245 to i64
  %248 = getelementptr inbounds ptr, ptr %238, i64 %247
  %249 = load ptr, ptr %248, align 8, !tbaa !7
  %250 = icmp eq ptr %249, null
  br i1 %250, label %267, label %251

251:                                              ; preds = %262, %242
  %252 = phi ptr [ %265, %262 ], [ %249, %242 ]
  %253 = load i32, ptr %252, align 8, !tbaa !481
  %254 = sext i32 %253 to i64
  %255 = getelementptr inbounds ptr, ptr %238, i64 %254
  br label %256

256:                                              ; preds = %256, %251
  %257 = phi ptr [ %255, %251 ], [ %261, %256 ]
  %258 = load ptr, ptr %257, align 8, !tbaa !7
  %259 = load i32, ptr %258, align 8, !tbaa !481
  %260 = icmp eq i32 %259, %246
  %261 = getelementptr inbounds %struct.clbox, ptr %258, i64 0, i32 7
  br i1 %260, label %262, label %256

262:                                              ; preds = %256
  %.lcssa = phi ptr [ %258, %256 ]
  %263 = getelementptr inbounds %struct.clbox, ptr %.lcssa, i64 0, i32 6
  store i32 0, ptr %263, align 8, !tbaa !536
  %264 = getelementptr inbounds %struct.clbox, ptr %252, i64 0, i32 7
  %265 = load ptr, ptr %264, align 8, !tbaa !7
  %266 = icmp eq ptr %265, null
  br i1 %266, label %267, label %251, !llvm.loop !917

267:                                              ; preds = %262, %242
  %268 = add nuw nsw i64 %243, 1
  %269 = trunc i64 %268 to i32
  store i32 %269, ptr %3, align 4, !tbaa !17
  %270 = icmp eq i64 %268, %241
  br i1 %270, label %271, label %242, !llvm.loop !918

271:                                              ; preds = %267
  %272 = load ptr, ptr @indexRoot, align 8, !tbaa !7
  %273 = icmp eq ptr %272, null
  br i1 %273, label %277, label %274

274:                                              ; preds = %274, %271
  call void @tpop(ptr noundef nonnull @indexRoot, ptr noundef nonnull %5, ptr noundef nonnull %3, ptr noundef nonnull %4) #44
  %275 = load ptr, ptr %5, align 8, !tbaa !7
  %276 = icmp eq ptr %275, null
  br i1 %276, label %277, label %274

277:                                              ; preds = %274, %271
  br i1 %35, label %278, label %279

278:                                              ; preds = %277
  store i32 0, ptr @bareMinimum, align 4, !tbaa !17
  br label %279

279:                                              ; preds = %278, %277
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %3) #47
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @recursePath(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca ptr, align 8
  %10 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %7) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %8) #47
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #47
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10) #47
  %11 = load i32, ptr @sourcePtr, align 4, !tbaa !17
  %12 = icmp eq i32 %11, %0
  br i1 %12, label %13, label %37

13:                                               ; preds = %4
  call void @tpop(ptr noundef nonnull @indexRoot, ptr noundef nonnull %9, ptr noundef nonnull @pathIndex, ptr noundef nonnull %6) #44
  %14 = load i32, ptr @segPtr, align 4, !tbaa !17
  %15 = trunc i32 %14 to i16
  %16 = load ptr, ptr @savePaths, align 8, !tbaa !7
  %17 = load i32, ptr @pathIndex, align 4, !tbaa !17
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds ptr, ptr %16, i64 %18
  %20 = load ptr, ptr %19, align 8, !tbaa !7
  store i16 %15, ptr %20, align 2, !tbaa !542
  %21 = icmp slt i32 %14, 1
  br i1 %21, label %33, label %22

22:                                               ; preds = %13
  %23 = load ptr, ptr @segList, align 8, !tbaa !7
  %24 = add nuw i32 %14, 1
  %25 = zext i32 %24 to i64
  br label %26

26:                                               ; preds = %26, %22
  %27 = phi i64 [ 1, %22 ], [ %31, %26 ]
  %28 = getelementptr inbounds i16, ptr %23, i64 %27
  %29 = load i16, ptr %28, align 2, !tbaa !542
  %30 = getelementptr inbounds i16, ptr %20, i64 %27
  store i16 %29, ptr %30, align 2, !tbaa !542
  %31 = add nuw nsw i64 %27, 1
  %32 = icmp eq i64 %31, %25
  br i1 %32, label %33, label %26, !llvm.loop !919

33:                                               ; preds = %26, %13
  %34 = load i32, ptr @pathLength, align 4, !tbaa !17
  call void @tinsert(ptr noundef nonnull @netRoot, i32 noundef %34, i32 noundef %17) #44
  %35 = load i32, ptr @treeSize, align 4, !tbaa !17
  %36 = add nsw i32 %35, 1
  store i32 %36, ptr @treeSize, align 4, !tbaa !17
  br label %731

37:                                               ; preds = %4
  store ptr null, ptr %10, align 8, !tbaa !7
  %38 = load i32, ptr @EXTRASOURCES, align 4, !tbaa !17
  %39 = add nsw i32 %38, 1
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 2
  %42 = tail call noalias ptr @malloc(i64 noundef %41) #45
  %43 = load i32, ptr @MAXPATHS, align 4, !tbaa !17
  %44 = mul nsw i32 %43, %38
  %45 = add i32 %44, 1
  %46 = sext i32 %45 to i64
  %47 = shl nsw i64 %46, 3
  %48 = tail call noalias ptr @malloc(i64 noundef %47) #45
  %49 = icmp slt i32 %44, 1
  br i1 %49, label %59, label %50

50:                                               ; preds = %37
  %51 = zext i32 %45 to i64
  br label %52

52:                                               ; preds = %52, %50
  %53 = phi i64 [ 1, %50 ], [ %56, %52 ]
  %54 = tail call dereferenceable_or_null(84) ptr @calloc(i64 1, i64 84)
  %55 = getelementptr inbounds ptr, ptr %48, i64 %53
  store ptr %54, ptr %55, align 8, !tbaa !7
  %56 = add nuw nsw i64 %53, 1
  %57 = icmp eq i64 %56, %51
  br i1 %57, label %58, label %52, !llvm.loop !920

58:                                               ; preds = %52
  store i32 21, ptr %5, align 4, !tbaa !17
  br label %59

59:                                               ; preds = %58, %37
  %60 = add i32 %0, 1
  %61 = sext i32 %60 to i64
  %62 = shl nsw i64 %61, 1
  %63 = tail call noalias ptr @malloc(i64 noundef %62) #45
  %64 = icmp slt i32 %0, 1
  br i1 %64, label %71, label %65

65:                                               ; preds = %59
  %66 = load ptr, ptr @delSourceList, align 8, !tbaa !7
  %67 = getelementptr i8, ptr %63, i64 2
  %68 = getelementptr i8, ptr %66, i64 2
  %69 = zext i32 %0 to i64
  %70 = shl nuw nsw i64 %69, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 2 %67, ptr align 2 %68, i64 %70, i1 false), !tbaa !542
  br label %71

71:                                               ; preds = %65, %59
  %72 = add i32 %3, %1
  %73 = add i32 %72, 1
  %74 = sext i32 %73 to i64
  %75 = shl nsw i64 %74, 1
  %76 = tail call noalias ptr @malloc(i64 noundef %75) #45
  %77 = icmp slt i32 %72, 1
  br i1 %77, label %86, label %78

78:                                               ; preds = %71
  %79 = load ptr, ptr @addTargetList, align 8, !tbaa !7
  %80 = getelementptr i8, ptr %76, i64 2
  %81 = getelementptr i8, ptr %79, i64 2
  %82 = add nsw i32 %72, -1
  %83 = zext i32 %82 to i64
  %84 = shl nuw nsw i64 %83, 1
  %85 = add nuw nsw i64 %84, 2
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 2 dereferenceable(1) %80, ptr noundef nonnull align 2 dereferenceable(1) %81, i64 %85, i1 false), !tbaa !542
  br label %86

86:                                               ; preds = %78, %71
  br i1 %64, label %90, label %87

87:                                               ; preds = %86
  %88 = load ptr, ptr @sourceList, align 8
  %89 = zext i32 %60 to i64
  br label %105

90:                                               ; preds = %128, %86
  br i1 %77, label %132, label %91

91:                                               ; preds = %90
  %92 = load i32, ptr @targetPtr, align 4, !tbaa !17
  %93 = load ptr, ptr @targetList, align 8, !tbaa !7
  %94 = sext i32 %92 to i64
  %95 = shl nsw i64 %94, 1
  %96 = add nsw i64 %95, 2
  %97 = getelementptr i8, ptr %93, i64 %96
  %98 = getelementptr i8, ptr %76, i64 2
  %99 = add nsw i32 %72, -1
  %100 = zext i32 %99 to i64
  %101 = shl nuw nsw i64 %100, 1
  %102 = add nuw nsw i64 %101, 2
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 2 dereferenceable(1) %97, ptr noundef nonnull align 2 dereferenceable(1) %98, i64 %102, i1 false), !tbaa !542
  %103 = add i32 %92, %72
  %104 = add nuw i32 %72, 1
  store i32 %103, ptr @targetPtr, align 4, !tbaa !17
  br label %132

105:                                              ; preds = %128, %87
  %106 = phi i64 [ 1, %87 ], [ %130, %128 ]
  %107 = phi i32 [ %11, %87 ], [ %129, %128 ]
  %108 = getelementptr inbounds i16, ptr %63, i64 %106
  %109 = load i16, ptr %108, align 2, !tbaa !542
  %110 = icmp slt i32 %107, 1
  br i1 %110, label %128, label %111

111:                                              ; preds = %105
  %112 = add nuw i32 %107, 1
  %113 = zext i32 %112 to i64
  br label %117

114:                                              ; preds = %117
  %115 = add nuw nsw i64 %118, 1
  %116 = icmp eq i64 %115, %113
  br i1 %116, label %128, label %117, !llvm.loop !921

117:                                              ; preds = %114, %111
  %118 = phi i64 [ 1, %111 ], [ %115, %114 ]
  %119 = getelementptr inbounds i16, ptr %88, i64 %118
  %120 = load i16, ptr %119, align 2, !tbaa !542
  %121 = icmp eq i16 %120, %109
  br i1 %121, label %122, label %114

122:                                              ; preds = %117
  %.lcssa11 = phi i64 [ %118, %117 ]
  %123 = getelementptr inbounds i16, ptr %88, i64 %.lcssa11
  %124 = add nsw i32 %107, -1
  store i32 %124, ptr @sourcePtr, align 4, !tbaa !17
  %125 = sext i32 %107 to i64
  %126 = getelementptr inbounds i16, ptr %88, i64 %125
  %127 = load i16, ptr %126, align 2, !tbaa !542
  store i16 %127, ptr %123, align 2, !tbaa !542
  br label %128

128:                                              ; preds = %122, %114, %105
  %129 = phi i32 [ %124, %122 ], [ %107, %105 ], [ %107, %114 ]
  %130 = add nuw nsw i64 %106, 1
  %131 = icmp eq i64 %130, %89
  br i1 %131, label %90, label %105, !llvm.loop !922

132:                                              ; preds = %91, %90
  %133 = phi i32 [ %104, %91 ], [ 1, %90 ]
  store i32 %133, ptr %5, align 4, !tbaa !17
  %134 = icmp sgt i32 %2, 0
  br i1 %134, label %135, label %188

135:                                              ; preds = %132
  store i32 1, ptr %5, align 4, !tbaa !17
  %136 = icmp slt i32 %1, 1
  br i1 %136, label %188, label %137

137:                                              ; preds = %135
  %138 = load ptr, ptr @gnodeArray, align 8, !tbaa !7
  %139 = zext i32 %1 to i64
  %140 = add nuw i32 %1, 1
  %141 = zext i32 %140 to i64
  br label %142

142:                                              ; preds = %184, %137
  %143 = phi i64 [ 1, %137 ], [ %185, %184 ]
  %144 = getelementptr inbounds i16, ptr %76, i64 %143
  %145 = load i16, ptr %144, align 2, !tbaa !542
  %146 = sext i16 %145 to i32
  %147 = icmp eq i64 %143, %139
  br i1 %147, label %153, label %148

148:                                              ; preds = %142
  %149 = add nuw nsw i64 %143, 1
  %150 = getelementptr inbounds i16, ptr %76, i64 %149
  %151 = load i16, ptr %150, align 2, !tbaa !542
  %152 = sext i16 %151 to i32
  br label %153

153:                                              ; preds = %148, %142
  %154 = phi i32 [ %152, %148 ], [ %2, %142 ]
  %155 = sext i16 %145 to i64
  %156 = getelementptr inbounds ptr, ptr %138, i64 %155
  %157 = sext i32 %154 to i64
  %158 = getelementptr inbounds ptr, ptr %138, i64 %157
  %159 = load ptr, ptr %158, align 8, !tbaa !7
  %160 = load ptr, ptr %156, align 8, !tbaa !7
  %161 = icmp eq ptr %160, null
  br i1 %161, label %172, label %162

162:                                              ; preds = %168, %153
  %163 = phi ptr [ %170, %168 ], [ %160, %153 ]
  %164 = load i32, ptr %163, align 8, !tbaa !481
  %165 = icmp eq i32 %164, %154
  br i1 %165, label %166, label %168

166:                                              ; preds = %162
  %.lcssa9 = phi ptr [ %163, %162 ]
  %167 = getelementptr inbounds %struct.clbox, ptr %.lcssa9, i64 0, i32 3
  store i32 1000000000, ptr %167, align 4, !tbaa !486
  br label %172

168:                                              ; preds = %162
  %169 = getelementptr inbounds %struct.clbox, ptr %163, i64 0, i32 7
  %170 = load ptr, ptr %169, align 8, !tbaa !7
  %171 = icmp eq ptr %170, null
  br i1 %171, label %172, label %162, !llvm.loop !923

172:                                              ; preds = %168, %166, %153
  %173 = icmp eq ptr %159, null
  br i1 %173, label %184, label %174

174:                                              ; preds = %180, %172
  %175 = phi ptr [ %182, %180 ], [ %159, %172 ]
  %176 = load i32, ptr %175, align 8, !tbaa !481
  %177 = icmp eq i32 %176, %146
  br i1 %177, label %178, label %180

178:                                              ; preds = %174
  %.lcssa10 = phi ptr [ %175, %174 ]
  %179 = getelementptr inbounds %struct.clbox, ptr %.lcssa10, i64 0, i32 3
  store i32 1000000000, ptr %179, align 4, !tbaa !486
  br label %184

180:                                              ; preds = %174
  %181 = getelementptr inbounds %struct.clbox, ptr %175, i64 0, i32 7
  %182 = load ptr, ptr %181, align 8, !tbaa !483
  %183 = icmp eq ptr %182, null
  br i1 %183, label %184, label %174, !llvm.loop !924

184:                                              ; preds = %180, %178, %172
  %185 = add nuw nsw i64 %143, 1
  %186 = trunc i64 %185 to i32
  store i32 %186, ptr %5, align 4, !tbaa !17
  %187 = icmp eq i64 %185, %141
  br i1 %187, label %188, label %142, !llvm.loop !925

188:                                              ; preds = %184, %135, %132
  %189 = icmp slt i32 %38, 1
  br i1 %189, label %365, label %190

190:                                              ; preds = %357, %188
  %191 = phi i32 [ %358, %357 ], [ undef, %188 ]
  %192 = phi i32 [ %361, %357 ], [ 0, %188 ]
  %193 = phi i32 [ %362, %357 ], [ 1, %188 ]
  %194 = phi i32 [ %359, %357 ], [ undef, %188 ]
  %195 = phi i32 [ %360, %357 ], [ 0, %188 ]
  %196 = icmp ugt i32 %193, 1
  %197 = load i32, ptr @bareMinimum, align 4
  %198 = icmp ne i32 %197, 0
  %199 = select i1 %196, i1 %198, i1 false
  br i1 %199, label %365, label %200

200:                                              ; preds = %190
  %201 = load i32, ptr @sourcePtr, align 4, !tbaa !17
  %202 = icmp slt i32 %201, 1
  br i1 %202, label %357, label %203

203:                                              ; preds = %200
  %204 = icmp slt i32 %192, 1
  %205 = load ptr, ptr @sourceList, align 8
  %206 = load i32, ptr @numnodes, align 4
  %207 = load ptr, ptr @pnodeArray, align 8
  %208 = load i32, ptr @targetPtr, align 4
  %209 = icmp slt i32 %208, 1
  %210 = load ptr, ptr @targetList, align 8
  %211 = load ptr, ptr @gnodeArray, align 8
  %212 = add i32 %192, 1
  %213 = add i32 %208, 1
  %214 = add nuw i32 %201, 1
  %215 = zext i32 %214 to i64
  %216 = zext i32 %212 to i64
  %217 = zext i32 %213 to i64
  br label %218

218:                                              ; preds = %294, %203
  %219 = phi i64 [ 1, %203 ], [ %299, %294 ]
  %220 = phi i32 [ 1000000000, %203 ], [ %298, %294 ]
  %221 = phi i32 [ %191, %203 ], [ %297, %294 ]
  %222 = phi i32 [ %194, %203 ], [ %296, %294 ]
  %223 = phi i32 [ 0, %203 ], [ %295, %294 ]
  %224 = getelementptr inbounds i16, ptr %205, i64 %219
  %225 = load i16, ptr %224, align 2, !tbaa !542
  %226 = sext i16 %225 to i32
  br i1 %204, label %235, label %230

227:                                              ; preds = %230
  %228 = add nuw nsw i64 %231, 1
  %229 = icmp eq i64 %228, %216
  br i1 %229, label %235, label %230, !llvm.loop !926

230:                                              ; preds = %227, %218
  %231 = phi i64 [ %228, %227 ], [ 1, %218 ]
  %232 = getelementptr inbounds i32, ptr %42, i64 %231
  %233 = load i32, ptr %232, align 4, !tbaa !17
  %234 = icmp eq i32 %233, %226
  br i1 %234, label %294, label %227

235:                                              ; preds = %227, %218
  %236 = sub nsw i32 %226, %206
  %237 = sext i32 %236 to i64
  %238 = getelementptr inbounds %struct.dlink2, ptr %207, i64 %237, i32 1
  %239 = load ptr, ptr %238, align 8, !tbaa !593
  store i32 1, ptr %5, align 4, !tbaa !17
  br i1 %209, label %294, label %240

240:                                              ; preds = %287, %235
  %241 = phi i64 [ %291, %287 ], [ 1, %235 ]
  %242 = phi i32 [ %290, %287 ], [ %220, %235 ]
  %243 = phi i32 [ %289, %287 ], [ %221, %235 ]
  %244 = phi i32 [ %288, %287 ], [ %222, %235 ]
  %245 = getelementptr inbounds i16, ptr %210, i64 %241
  %246 = load i16, ptr %245, align 2, !tbaa !542
  %247 = sext i16 %246 to i32
  %248 = sext i16 %246 to i64
  %249 = getelementptr inbounds %struct.nnode, ptr %239, i64 %248, i32 1
  %250 = load i32, ptr %249, align 4, !tbaa !594
  %251 = icmp slt i32 %250, %242
  br i1 %251, label %252, label %287

252:                                              ; preds = %240
  %253 = getelementptr inbounds %struct.nnode, ptr %239, i64 %248, i32 2
  %254 = load i16, ptr %253, align 4, !tbaa !927
  %255 = sext i16 %254 to i32
  %256 = getelementptr inbounds ptr, ptr %211, i64 %248
  %257 = load ptr, ptr %256, align 8, !tbaa !7
  %258 = icmp eq ptr %257, null
  br i1 %258, label %287, label %259

259:                                              ; preds = %252
  %260 = sext i16 %254 to i64
  %261 = getelementptr inbounds ptr, ptr %211, i64 %260
  br label %262

262:                                              ; preds = %277, %259
  %263 = phi ptr [ %280, %277 ], [ %257, %259 ]
  %264 = load i32, ptr %263, align 8, !tbaa !481
  %265 = icmp eq i32 %264, %255
  br i1 %265, label %266, label %277

266:                                              ; preds = %266, %262
  %267 = phi ptr [ %271, %266 ], [ %261, %262 ]
  %268 = load ptr, ptr %267, align 8, !tbaa !7
  %269 = load i32, ptr %268, align 8, !tbaa !481
  %270 = icmp eq i32 %269, %247
  %271 = getelementptr inbounds %struct.clbox, ptr %268, i64 0, i32 7
  br i1 %270, label %272, label %266

272:                                              ; preds = %266
  %.lcssa4 = phi ptr [ %268, %266 ]
  %273 = getelementptr inbounds %struct.clbox, ptr %.lcssa4, i64 0, i32 3
  %274 = load i32, ptr %273, align 4, !tbaa !486
  %275 = icmp slt i32 %274, 1000000000
  %276 = zext i1 %275 to i32
  br label %277

277:                                              ; preds = %272, %262
  %278 = phi i32 [ 0, %262 ], [ %276, %272 ]
  %279 = getelementptr inbounds %struct.clbox, ptr %263, i64 0, i32 7
  %280 = load ptr, ptr %279, align 8, !tbaa !7
  %281 = icmp eq i32 %278, 0
  %282 = icmp ne ptr %280, null
  %283 = select i1 %281, i1 %282, i1 false
  br i1 %283, label %262, label %284, !llvm.loop !928

284:                                              ; preds = %277
  %.lcssa5 = phi i1 [ %281, %277 ]
  br i1 %.lcssa5, label %287, label %285

285:                                              ; preds = %284
  %286 = trunc i64 %241 to i32
  br label %287

287:                                              ; preds = %285, %284, %252, %240
  %288 = phi i32 [ %286, %285 ], [ %244, %284 ], [ %244, %240 ], [ %244, %252 ]
  %289 = phi i32 [ %226, %285 ], [ %243, %284 ], [ %243, %240 ], [ %243, %252 ]
  %290 = phi i32 [ %250, %285 ], [ %242, %284 ], [ %242, %240 ], [ %242, %252 ]
  %291 = add nuw nsw i64 %241, 1
  %292 = trunc i64 %291 to i32
  store i32 %292, ptr %5, align 4, !tbaa !17
  %293 = icmp eq i64 %291, %217
  br i1 %293, label %294, label %240, !llvm.loop !929

294:                                              ; preds = %287, %235, %230
  %295 = phi i32 [ 1, %235 ], [ 1, %287 ], [ %223, %230 ]
  %296 = phi i32 [ %222, %235 ], [ %288, %287 ], [ %222, %230 ]
  %297 = phi i32 [ %221, %235 ], [ %289, %287 ], [ %221, %230 ]
  %298 = phi i32 [ %220, %235 ], [ %290, %287 ], [ %220, %230 ]
  %299 = add nuw nsw i64 %219, 1
  %300 = icmp eq i64 %299, %215
  br i1 %300, label %301, label %218, !llvm.loop !930

301:                                              ; preds = %294
  %.lcssa8 = phi i32 [ %295, %294 ]
  %.lcssa7 = phi i32 [ %296, %294 ]
  %.lcssa6 = phi i32 [ %297, %294 ]
  %302 = icmp eq i32 %.lcssa8, 1
  br i1 %302, label %303, label %357

303:                                              ; preds = %301
  %304 = add nsw i32 %192, 1
  %305 = sext i32 %304 to i64
  %306 = getelementptr inbounds i32, ptr %42, i64 %305
  store i32 %.lcssa6, ptr %306, align 4, !tbaa !17
  %307 = call i32 @mshortest(i32 noundef %.lcssa6, i32 noundef %.lcssa7) #44
  %308 = add nsw i32 %307, %195
  %309 = icmp sgt i32 %307, 0
  br i1 %309, label %310, label %357

310:                                              ; preds = %303
  %311 = sext i32 %195 to i64
  %312 = sext i32 %308 to i64
  br label %313

313:                                              ; preds = %349, %310
  %314 = phi i64 [ 1, %310 ], [ %355, %349 ]
  %315 = phi i64 [ %311, %310 ], [ %316, %349 ]
  %316 = add nsw i64 %315, 1
  %317 = load ptr, ptr @pathList, align 8, !tbaa !7
  %318 = getelementptr inbounds ptr, ptr %317, i64 %314
  %319 = load ptr, ptr %318, align 8, !tbaa !7
  %320 = load i32, ptr %319, align 4, !tbaa !17
  %321 = icmp sgt i32 %320, 19
  br i1 %321, label %322, label %333

322:                                              ; preds = %313
  %323 = getelementptr inbounds ptr, ptr %48, i64 %316
  %324 = load ptr, ptr %323, align 8, !tbaa !7
  call void @free(ptr noundef %324) #44
  %325 = load ptr, ptr @pathList, align 8, !tbaa !7
  %326 = getelementptr inbounds ptr, ptr %325, i64 %314
  %327 = load ptr, ptr %326, align 8, !tbaa !7
  %328 = load i32, ptr %327, align 4, !tbaa !17
  %329 = add nsw i32 %328, 2
  %330 = sext i32 %329 to i64
  %331 = shl nsw i64 %330, 2
  %332 = call noalias ptr @malloc(i64 noundef %331) #45
  store ptr %332, ptr %323, align 8, !tbaa !7
  br label %333

333:                                              ; preds = %322, %313
  %334 = phi ptr [ %327, %322 ], [ %319, %313 ]
  store i32 0, ptr %5, align 4, !tbaa !17
  %335 = load i32, ptr %334, align 4, !tbaa !17
  %336 = icmp slt i32 %335, -1
  %337 = getelementptr inbounds ptr, ptr %48, i64 %316
  %338 = load ptr, ptr %337, align 8, !tbaa !7
  br i1 %336, label %349, label %339

339:                                              ; preds = %339, %333
  %340 = phi i32 [ %346, %339 ], [ 0, %333 ]
  %341 = sext i32 %340 to i64
  %342 = getelementptr inbounds i32, ptr %334, i64 %341
  %343 = load i32, ptr %342, align 4, !tbaa !17
  %344 = getelementptr inbounds i32, ptr %338, i64 %341
  store i32 %343, ptr %344, align 4, !tbaa !17
  %345 = load i32, ptr %5, align 4, !tbaa !17
  %346 = add nsw i32 %345, 1
  store i32 %346, ptr %5, align 4, !tbaa !17
  %347 = load i32, ptr %334, align 4, !tbaa !17
  %348 = icmp sgt i32 %345, %347
  br i1 %348, label %349, label %339, !llvm.loop !931

349:                                              ; preds = %339, %333
  %350 = phi i32 [ -1, %333 ], [ %345, %339 ]
  %351 = sext i32 %350 to i64
  %352 = getelementptr inbounds i32, ptr %338, i64 %351
  %353 = load i32, ptr %352, align 4, !tbaa !17
  %354 = trunc i64 %316 to i32
  call void @tinsert(ptr noundef nonnull %10, i32 noundef %353, i32 noundef %354) #44
  %355 = add nuw nsw i64 %314, 1
  %356 = icmp slt i64 %316, %312
  br i1 %356, label %313, label %357, !llvm.loop !932

357:                                              ; preds = %349, %303, %301, %200
  %358 = phi i32 [ %.lcssa6, %301 ], [ %.lcssa6, %303 ], [ %191, %200 ], [ %.lcssa6, %349 ]
  %359 = phi i32 [ %.lcssa7, %301 ], [ %.lcssa7, %303 ], [ %194, %200 ], [ %.lcssa7, %349 ]
  %360 = phi i32 [ %195, %301 ], [ %308, %303 ], [ %195, %200 ], [ %308, %349 ]
  %361 = phi i32 [ %192, %301 ], [ %304, %303 ], [ %192, %200 ], [ %304, %349 ]
  %362 = add nuw nsw i32 %193, 1
  %363 = load i32, ptr @EXTRASOURCES, align 4, !tbaa !17
  %364 = icmp slt i32 %193, %363
  br i1 %364, label %190, label %365, !llvm.loop !933

365:                                              ; preds = %357, %190, %188
  %366 = phi i32 [ 0, %188 ], [ %195, %190 ], [ %360, %357 ]
  %367 = load i32, ptr @Mpaths, align 4
  %368 = call i32 @llvm.smin.i32(i32 %366, i32 %367)
  %369 = icmp slt i32 %368, 1
  br i1 %369, label %623, label %370

370:                                              ; preds = %620, %365
  %371 = phi i32 [ %621, %620 ], [ 1, %365 ]
  call void @tpop(ptr noundef nonnull %10, ptr noundef nonnull %9, ptr noundef nonnull %6, ptr noundef nonnull %5) #44
  %372 = load i32, ptr %5, align 4, !tbaa !17
  %373 = sext i32 %372 to i64
  %374 = getelementptr inbounds ptr, ptr %48, i64 %373
  %375 = load ptr, ptr %374, align 8, !tbaa !7
  %376 = load i32, ptr %375, align 4, !tbaa !17
  %377 = icmp sgt i32 %376, 1
  br i1 %377, label %378, label %503

378:                                              ; preds = %370
  %379 = load ptr, ptr @addTargetList, align 8, !tbaa !7
  %380 = zext i32 %376 to i64
  br label %381

381:                                              ; preds = %381, %378
  %382 = phi i64 [ 1, %378 ], [ %387, %381 ]
  %383 = getelementptr inbounds i32, ptr %375, i64 %382
  %384 = load i32, ptr %383, align 4, !tbaa !17
  %385 = trunc i32 %384 to i16
  %386 = getelementptr inbounds i16, ptr %379, i64 %382
  store i16 %385, ptr %386, align 2, !tbaa !542
  %387 = add nuw nsw i64 %382, 1
  %388 = icmp eq i64 %387, %380
  br i1 %388, label %389, label %381, !llvm.loop !934

389:                                              ; preds = %381
  br i1 %377, label %390, label %503

390:                                              ; preds = %389
  %391 = load ptr, ptr @addTargetList, align 8, !tbaa !7
  %392 = load i32, ptr @numnodes, align 4, !tbaa !17
  %393 = load ptr, ptr @delSourceList, align 8
  %394 = zext i32 %376 to i64
  br label %404

395:                                              ; preds = %415
  %.lcssa1 = phi i32 [ %416, %415 ]
  %396 = icmp slt i32 %.lcssa1, 1
  br i1 %396, label %503, label %397

397:                                              ; preds = %395
  %398 = load ptr, ptr @delSourceList, align 8, !tbaa !7
  %399 = load ptr, ptr @pnodeArray, align 8, !tbaa !7
  %400 = load i32, ptr @numnodes, align 4, !tbaa !17
  %401 = load ptr, ptr @addTargetList, align 8
  %402 = add nuw i32 %.lcssa1, 1
  %403 = zext i32 %402 to i64
  br label %419

404:                                              ; preds = %415, %390
  %405 = phi i64 [ 1, %390 ], [ %417, %415 ]
  %406 = phi i32 [ 0, %390 ], [ %416, %415 ]
  %407 = getelementptr inbounds i16, ptr %391, i64 %405
  %408 = load i16, ptr %407, align 2, !tbaa !542
  %409 = sext i16 %408 to i32
  %410 = icmp slt i32 %392, %409
  br i1 %410, label %411, label %415

411:                                              ; preds = %404
  %412 = add nsw i32 %406, 1
  %413 = sext i32 %412 to i64
  %414 = getelementptr inbounds i16, ptr %393, i64 %413
  store i16 %408, ptr %414, align 2, !tbaa !542
  br label %415

415:                                              ; preds = %411, %404
  %416 = phi i32 [ %412, %411 ], [ %406, %404 ]
  %417 = add nuw nsw i64 %405, 1
  %418 = icmp eq i64 %417, %394
  br i1 %418, label %395, label %404, !llvm.loop !935

419:                                              ; preds = %499, %397
  %420 = phi i64 [ 1, %397 ], [ %501, %499 ]
  %421 = phi i32 [ 0, %397 ], [ %500, %499 ]
  %422 = getelementptr inbounds i16, ptr %398, i64 %420
  %423 = load i16, ptr %422, align 2, !tbaa !542
  %424 = sext i16 %423 to i32
  %425 = sub nsw i32 %424, %400
  %426 = sext i32 %425 to i64
  %427 = getelementptr inbounds %struct.dlink2, ptr %399, i64 %426
  %428 = load i32, ptr %427, align 8, !tbaa !529
  %429 = icmp eq i32 %428, 0
  br i1 %429, label %458, label %430

430:                                              ; preds = %419
  %431 = add nsw i32 %428, %400
  %432 = add nsw i32 %421, %.lcssa1
  %433 = icmp slt i32 %432, 1
  br i1 %433, label %446, label %434

434:                                              ; preds = %430
  %435 = add i32 %402, %421
  %436 = zext i32 %435 to i64
  br label %440

437:                                              ; preds = %440
  %438 = add nuw nsw i64 %441, 1
  %439 = icmp eq i64 %438, %436
  br i1 %439, label %446, label %440, !llvm.loop !936

440:                                              ; preds = %437, %434
  %441 = phi i64 [ 1, %434 ], [ %438, %437 ]
  %442 = getelementptr inbounds i16, ptr %398, i64 %441
  %443 = load i16, ptr %442, align 2, !tbaa !542
  %444 = sext i16 %443 to i32
  %445 = icmp eq i32 %431, %444
  br i1 %445, label %455, label %437

446:                                              ; preds = %437, %430
  %447 = trunc i32 %431 to i16
  %448 = add nsw i32 %421, 1
  %449 = add nsw i32 %448, %.lcssa1
  %450 = sext i32 %449 to i64
  %451 = getelementptr inbounds i16, ptr %398, i64 %450
  store i16 %447, ptr %451, align 2, !tbaa !542
  %452 = add i32 %421, %376
  %453 = sext i32 %452 to i64
  %454 = getelementptr inbounds i16, ptr %401, i64 %453
  store i16 %447, ptr %454, align 2, !tbaa !542
  br label %455

455:                                              ; preds = %446, %440
  %456 = phi i32 [ %448, %446 ], [ %421, %440 ]
  %457 = sext i32 %428 to i64
  br label %458

458:                                              ; preds = %455, %419
  %459 = phi i32 [ %456, %455 ], [ %421, %419 ]
  %460 = phi i64 [ %457, %455 ], [ %426, %419 ]
  %461 = getelementptr inbounds %struct.dlink2, ptr %399, i64 %460, i32 2
  %462 = load ptr, ptr %461, align 8, !tbaa !7
  %463 = icmp eq ptr %462, null
  br i1 %463, label %499, label %464

464:                                              ; preds = %458
  %465 = load ptr, ptr @addTargetList, align 8
  br label %466

466:                                              ; preds = %494, %464
  %467 = phi ptr [ %462, %464 ], [ %497, %494 ]
  %468 = phi i32 [ %459, %464 ], [ %495, %494 ]
  %469 = load i32, ptr %467, align 8, !tbaa !534
  %470 = add nsw i32 %469, %400
  %471 = add nsw i32 %468, %.lcssa1
  %472 = icmp slt i32 %471, 1
  br i1 %472, label %485, label %473

473:                                              ; preds = %466
  %474 = add i32 %402, %468
  %475 = zext i32 %474 to i64
  br label %479

476:                                              ; preds = %479
  %477 = add nuw nsw i64 %480, 1
  %478 = icmp eq i64 %477, %475
  br i1 %478, label %485, label %479, !llvm.loop !937

479:                                              ; preds = %476, %473
  %480 = phi i64 [ 1, %473 ], [ %477, %476 ]
  %481 = getelementptr inbounds i16, ptr %398, i64 %480
  %482 = load i16, ptr %481, align 2, !tbaa !542
  %483 = sext i16 %482 to i32
  %484 = icmp eq i32 %470, %483
  br i1 %484, label %494, label %476

485:                                              ; preds = %476, %466
  %486 = trunc i32 %470 to i16
  %487 = add nsw i32 %468, 1
  %488 = add nsw i32 %487, %.lcssa1
  %489 = sext i32 %488 to i64
  %490 = getelementptr inbounds i16, ptr %398, i64 %489
  store i16 %486, ptr %490, align 2, !tbaa !542
  %491 = add i32 %468, %376
  %492 = sext i32 %491 to i64
  %493 = getelementptr inbounds i16, ptr %465, i64 %492
  store i16 %486, ptr %493, align 2, !tbaa !542
  br label %494

494:                                              ; preds = %485, %479
  %495 = phi i32 [ %487, %485 ], [ %468, %479 ]
  %496 = getelementptr inbounds %struct.plist, ptr %467, i64 0, i32 1
  %497 = load ptr, ptr %496, align 8, !tbaa !7
  %498 = icmp eq ptr %497, null
  br i1 %498, label %499, label %466, !llvm.loop !938

499:                                              ; preds = %494, %458
  %500 = phi i32 [ %459, %458 ], [ %495, %494 ]
  %501 = add nuw nsw i64 %420, 1
  %502 = icmp eq i64 %501, %403
  br i1 %502, label %503, label %419, !llvm.loop !939

503:                                              ; preds = %499, %395, %389, %370
  %504 = phi i32 [ %.lcssa1, %395 ], [ 0, %389 ], [ 0, %370 ], [ %.lcssa1, %499 ]
  %505 = phi i32 [ 0, %395 ], [ 0, %389 ], [ 0, %370 ], [ %500, %499 ]
  %506 = add nsw i32 %376, -1
  %507 = add i32 %376, 1
  %508 = sext i32 %507 to i64
  %509 = getelementptr inbounds i32, ptr %375, i64 %508
  %510 = load i32, ptr %509, align 4, !tbaa !17
  %511 = load i32, ptr @pathLength, align 4, !tbaa !17
  %512 = add nsw i32 %511, %510
  store i32 %512, ptr @pathLength, align 4, !tbaa !17
  %513 = add nsw i32 %505, %504
  %514 = add nsw i32 %505, %506
  %515 = icmp slt i32 %376, 1
  %516 = load ptr, ptr @segList, align 8, !tbaa !7
  %517 = load i32, ptr @segPtr, align 4, !tbaa !17
  br i1 %515, label %530, label %518

518:                                              ; preds = %503
  %519 = sext i32 %517 to i64
  %520 = zext i32 %507 to i64
  br label %521

521:                                              ; preds = %521, %518
  %522 = phi i64 [ 1, %518 ], [ %528, %521 ]
  %523 = getelementptr inbounds i32, ptr %375, i64 %522
  %524 = load i32, ptr %523, align 4, !tbaa !17
  %525 = trunc i32 %524 to i16
  %526 = add nsw i64 %522, %519
  %527 = getelementptr inbounds i16, ptr %516, i64 %526
  store i16 %525, ptr %527, align 2, !tbaa !542
  %528 = add nuw nsw i64 %522, 1
  %529 = icmp eq i64 %528, %520
  br i1 %529, label %530, label %521, !llvm.loop !940

530:                                              ; preds = %521, %503
  %531 = phi i32 [ 1, %503 ], [ %507, %521 ]
  %532 = add nsw i32 %517, %531
  %533 = sext i32 %532 to i64
  %534 = getelementptr inbounds i16, ptr %516, i64 %533
  store i16 0, ptr %534, align 2, !tbaa !542
  %535 = add nsw i32 %517, %507
  store i32 %535, ptr @segPtr, align 4, !tbaa !17
  %536 = icmp sgt i32 %376, %514
  br i1 %536, label %537, label %539

537:                                              ; preds = %530
  %538 = sext i32 %376 to i64
  br label %573

539:                                              ; preds = %530
  %540 = load ptr, ptr @addTargetList, align 8, !tbaa !7
  %541 = load ptr, ptr @gnodeArray, align 8, !tbaa !7
  %542 = sext i32 %376 to i64
  %543 = add i32 %505, %376
  br label %544

544:                                              ; preds = %569, %539
  %545 = phi i64 [ %542, %539 ], [ %570, %569 ]
  %546 = getelementptr inbounds i16, ptr %540, i64 %545
  %547 = load i16, ptr %546, align 2, !tbaa !542
  %548 = sext i16 %547 to i32
  %549 = sext i16 %547 to i64
  %550 = getelementptr inbounds ptr, ptr %541, i64 %549
  %551 = load ptr, ptr %550, align 8, !tbaa !7
  %552 = icmp eq ptr %551, null
  br i1 %552, label %569, label %553

553:                                              ; preds = %564, %544
  %554 = phi ptr [ %567, %564 ], [ %551, %544 ]
  %555 = load i32, ptr %554, align 8, !tbaa !481
  %556 = sext i32 %555 to i64
  %557 = getelementptr inbounds ptr, ptr %541, i64 %556
  br label %558

558:                                              ; preds = %558, %553
  %559 = phi ptr [ %557, %553 ], [ %563, %558 ]
  %560 = load ptr, ptr %559, align 8, !tbaa !7
  %561 = load i32, ptr %560, align 8, !tbaa !481
  %562 = icmp eq i32 %561, %548
  %563 = getelementptr inbounds %struct.clbox, ptr %560, i64 0, i32 7
  br i1 %562, label %564, label %558

564:                                              ; preds = %558
  %.lcssa2 = phi ptr [ %560, %558 ]
  %565 = getelementptr inbounds %struct.clbox, ptr %.lcssa2, i64 0, i32 6
  store i32 1, ptr %565, align 8, !tbaa !536
  %566 = getelementptr inbounds %struct.clbox, ptr %554, i64 0, i32 7
  %567 = load ptr, ptr %566, align 8, !tbaa !7
  %568 = icmp eq ptr %567, null
  br i1 %568, label %569, label %553, !llvm.loop !941

569:                                              ; preds = %564, %544
  %570 = add nsw i64 %545, 1
  %571 = trunc i64 %570 to i32
  %572 = icmp eq i32 %543, %571
  br i1 %572, label %573, label %544, !llvm.loop !942

573:                                              ; preds = %569, %537
  %574 = phi i64 [ %538, %537 ], [ %542, %569 ]
  %575 = getelementptr inbounds i32, ptr %375, i64 %574
  %576 = load i32, ptr %575, align 4, !tbaa !17
  call void @recursePath(i32 noundef %513, i32 noundef %506, i32 noundef %576, i32 noundef %505) #43
  %577 = load i32, ptr @segPtr, align 4, !tbaa !17
  %578 = sub nsw i32 %577, %507
  store i32 %578, ptr @segPtr, align 4, !tbaa !17
  %579 = load i32, ptr %5, align 4, !tbaa !17
  %580 = sext i32 %579 to i64
  %581 = getelementptr inbounds ptr, ptr %48, i64 %580
  %582 = load ptr, ptr %581, align 8, !tbaa !7
  %583 = getelementptr inbounds i32, ptr %582, i64 %508
  %584 = load i32, ptr %583, align 4, !tbaa !17
  %585 = load i32, ptr @pathLength, align 4, !tbaa !17
  %586 = sub nsw i32 %585, %584
  store i32 %586, ptr @pathLength, align 4, !tbaa !17
  br i1 %536, label %620, label %587

587:                                              ; preds = %573
  %588 = load ptr, ptr @addTargetList, align 8, !tbaa !7
  %589 = load ptr, ptr @gnodeArray, align 8, !tbaa !7
  %590 = add i32 %505, %376
  br label %591

591:                                              ; preds = %616, %587
  %592 = phi i64 [ %574, %587 ], [ %617, %616 ]
  %593 = getelementptr inbounds i16, ptr %588, i64 %592
  %594 = load i16, ptr %593, align 2, !tbaa !542
  %595 = sext i16 %594 to i32
  %596 = sext i16 %594 to i64
  %597 = getelementptr inbounds ptr, ptr %589, i64 %596
  %598 = load ptr, ptr %597, align 8, !tbaa !7
  %599 = icmp eq ptr %598, null
  br i1 %599, label %616, label %600

600:                                              ; preds = %611, %591
  %601 = phi ptr [ %614, %611 ], [ %598, %591 ]
  %602 = load i32, ptr %601, align 8, !tbaa !481
  %603 = sext i32 %602 to i64
  %604 = getelementptr inbounds ptr, ptr %589, i64 %603
  br label %605

605:                                              ; preds = %605, %600
  %606 = phi ptr [ %604, %600 ], [ %610, %605 ]
  %607 = load ptr, ptr %606, align 8, !tbaa !7
  %608 = load i32, ptr %607, align 8, !tbaa !481
  %609 = icmp eq i32 %608, %595
  %610 = getelementptr inbounds %struct.clbox, ptr %607, i64 0, i32 7
  br i1 %609, label %611, label %605

611:                                              ; preds = %605
  %.lcssa3 = phi ptr [ %607, %605 ]
  %612 = getelementptr inbounds %struct.clbox, ptr %.lcssa3, i64 0, i32 6
  store i32 0, ptr %612, align 8, !tbaa !536
  %613 = getelementptr inbounds %struct.clbox, ptr %601, i64 0, i32 7
  %614 = load ptr, ptr %613, align 8, !tbaa !7
  %615 = icmp eq ptr %614, null
  br i1 %615, label %616, label %600, !llvm.loop !943

616:                                              ; preds = %611, %591
  %617 = add nsw i64 %592, 1
  %618 = trunc i64 %617 to i32
  %619 = icmp eq i32 %590, %618
  br i1 %619, label %620, label %591, !llvm.loop !944

620:                                              ; preds = %616, %573
  %621 = add nuw i32 %371, 1
  %622 = icmp eq i32 %371, %368
  br i1 %622, label %623, label %370, !llvm.loop !945

623:                                              ; preds = %620, %365
  %624 = load i32, ptr @treeSize, align 4, !tbaa !17
  %625 = load i32, ptr @MAXPATHS, align 4, !tbaa !17
  %626 = sub nsw i32 %624, %625
  %627 = icmp sgt i32 %626, 0
  br i1 %627, label %628, label %641

628:                                              ; preds = %623
  %629 = add i32 %624, 1
  %630 = sub i32 %629, %625
  br label %631

631:                                              ; preds = %631, %628
  %632 = phi i32 [ %636, %631 ], [ 1, %628 ]
  call void @tmax(ptr noundef nonnull @netRoot, ptr noundef nonnull %9, ptr noundef nonnull %7, ptr noundef nonnull %8) #44
  %633 = load i32, ptr %7, align 4, !tbaa !17
  %634 = load i32, ptr %8, align 4, !tbaa !17
  call void @tdelete(ptr noundef nonnull @netRoot, i32 noundef %633, i32 noundef %634) #44
  %635 = load i32, ptr %8, align 4, !tbaa !17
  call void @tinsert(ptr noundef nonnull @indexRoot, i32 noundef %635, i32 noundef 0) #44
  %636 = add nuw i32 %632, 1
  %637 = icmp eq i32 %636, %630
  br i1 %637, label %638, label %631, !llvm.loop !946

638:                                              ; preds = %631
  %639 = load i32, ptr @treeSize, align 4, !tbaa !17
  %640 = sub nsw i32 %639, %626
  store i32 %640, ptr @treeSize, align 4, !tbaa !17
  br label %641

641:                                              ; preds = %638, %623
  %642 = load ptr, ptr %10, align 8, !tbaa !7
  %643 = icmp eq ptr %642, null
  br i1 %643, label %647, label %644

644:                                              ; preds = %644, %641
  call void @tpop(ptr noundef nonnull %10, ptr noundef nonnull %9, ptr noundef nonnull %6, ptr noundef nonnull %5) #44
  %645 = load ptr, ptr %9, align 8, !tbaa !7
  %646 = icmp eq ptr %645, null
  br i1 %646, label %647, label %644

647:                                              ; preds = %644, %641
  br i1 %64, label %660, label %648

648:                                              ; preds = %647
  %649 = load i32, ptr @sourcePtr, align 4, !tbaa !17
  %650 = load ptr, ptr @sourceList, align 8, !tbaa !7
  %651 = sext i32 %649 to i64
  %652 = shl nsw i64 %651, 1
  %653 = add nsw i64 %652, 2
  %654 = getelementptr i8, ptr %650, i64 %653
  %655 = getelementptr i8, ptr %63, i64 2
  %656 = zext i32 %0 to i64
  %657 = shl nuw nsw i64 %656, 1
  call void @llvm.memcpy.p0.p0.i64(ptr align 2 %654, ptr align 2 %655, i64 %657, i1 false), !tbaa !542
  %658 = add i32 %649, %0
  %659 = add nuw i32 %0, 1
  store i32 %658, ptr @sourcePtr, align 4, !tbaa !17
  br label %660

660:                                              ; preds = %648, %647
  %661 = phi i32 [ %659, %648 ], [ 1, %647 ]
  store i32 %661, ptr %5, align 4, !tbaa !17
  %662 = load i32, ptr @targetPtr, align 4, !tbaa !17
  %663 = sub nsw i32 %662, %72
  store i32 %663, ptr @targetPtr, align 4, !tbaa !17
  br i1 %134, label %664, label %715

664:                                              ; preds = %660
  store i32 1, ptr %5, align 4, !tbaa !17
  %665 = icmp slt i32 %1, 1
  br i1 %665, label %715, label %666

666:                                              ; preds = %664
  %667 = load ptr, ptr @gnodeArray, align 8, !tbaa !7
  %668 = zext i32 %1 to i64
  %669 = add nuw i32 %1, 1
  %670 = zext i32 %669 to i64
  br label %671

671:                                              ; preds = %701, %666
  %672 = phi i64 [ 1, %666 ], [ %706, %701 ]
  %673 = getelementptr inbounds i16, ptr %76, i64 %672
  %674 = load i16, ptr %673, align 2, !tbaa !542
  %675 = sext i16 %674 to i32
  %676 = icmp eq i64 %672, %668
  br i1 %676, label %682, label %677

677:                                              ; preds = %671
  %678 = add nuw nsw i64 %672, 1
  %679 = getelementptr inbounds i16, ptr %76, i64 %678
  %680 = load i16, ptr %679, align 2, !tbaa !542
  %681 = sext i16 %680 to i32
  br label %682

682:                                              ; preds = %677, %671
  %683 = phi i32 [ %681, %677 ], [ %2, %671 ]
  %684 = sext i16 %674 to i64
  %685 = getelementptr inbounds ptr, ptr %667, i64 %684
  %686 = sext i32 %683 to i64
  %687 = getelementptr inbounds ptr, ptr %667, i64 %686
  %688 = load ptr, ptr %687, align 8, !tbaa !7
  br label %689

689:                                              ; preds = %689, %682
  %690 = phi ptr [ %685, %682 ], [ %694, %689 ]
  %691 = load ptr, ptr %690, align 8, !tbaa !7
  %692 = load i32, ptr %691, align 8, !tbaa !481
  %693 = icmp eq i32 %692, %683
  %694 = getelementptr inbounds %struct.clbox, ptr %691, i64 0, i32 7
  br i1 %693, label %695, label %689

695:                                              ; preds = %689
  %.lcssa = phi ptr [ %691, %689 ]
  %696 = getelementptr inbounds %struct.clbox, ptr %.lcssa, i64 0, i32 2
  %697 = load i32, ptr %696, align 8, !tbaa !485
  %698 = getelementptr inbounds %struct.clbox, ptr %.lcssa, i64 0, i32 3
  store i32 %697, ptr %698, align 4, !tbaa !486
  %699 = load i32, ptr %688, align 8, !tbaa !481
  %700 = icmp eq i32 %699, %675
  br i1 %700, label %701, label %709

701:                                              ; preds = %709, %695
  %702 = phi ptr [ %688, %695 ], [ %712, %709 ]
  %703 = getelementptr inbounds %struct.clbox, ptr %702, i64 0, i32 2
  %704 = load i32, ptr %703, align 8, !tbaa !485
  %705 = getelementptr inbounds %struct.clbox, ptr %702, i64 0, i32 3
  store i32 %704, ptr %705, align 4, !tbaa !486
  %706 = add nuw nsw i64 %672, 1
  %707 = trunc i64 %706 to i32
  store i32 %707, ptr %5, align 4, !tbaa !17
  %708 = icmp eq i64 %706, %670
  br i1 %708, label %715, label %671, !llvm.loop !947

709:                                              ; preds = %709, %695
  %710 = phi ptr [ %712, %709 ], [ %688, %695 ]
  %711 = getelementptr inbounds %struct.clbox, ptr %710, i64 0, i32 7
  %712 = load ptr, ptr %711, align 8, !tbaa !483
  %713 = load i32, ptr %712, align 8, !tbaa !481
  %714 = icmp eq i32 %713, %675
  br i1 %714, label %701, label %709

715:                                              ; preds = %701, %664, %660
  call void @free(ptr noundef %76) #44
  call void @free(ptr noundef %63) #44
  call void @free(ptr noundef %42) #44
  %716 = load i32, ptr @EXTRASOURCES, align 4, !tbaa !17
  %717 = load i32, ptr @MAXPATHS, align 4, !tbaa !17
  %718 = mul nsw i32 %717, %716
  %719 = icmp slt i32 %718, 1
  br i1 %719, label %730, label %720

720:                                              ; preds = %720, %715
  %721 = phi i64 [ %724, %720 ], [ 1, %715 ]
  %722 = getelementptr inbounds ptr, ptr %48, i64 %721
  %723 = load ptr, ptr %722, align 8, !tbaa !7
  call void @free(ptr noundef %723) #44
  %724 = add nuw nsw i64 %721, 1
  %725 = load i32, ptr @EXTRASOURCES, align 4, !tbaa !17
  %726 = load i32, ptr @MAXPATHS, align 4, !tbaa !17
  %727 = mul nsw i32 %726, %725
  %728 = sext i32 %727 to i64
  %729 = icmp slt i64 %721, %728
  br i1 %729, label %720, label %730, !llvm.loop !948

730:                                              ; preds = %720, %715
  call void @free(ptr noundef %48) #44
  br label %731

731:                                              ; preds = %730, %33
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10) #47
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5) #47
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @savewolf() #5 {
  %1 = alloca [1024 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 1024, ptr nonnull %1) #47
  %2 = load ptr, ptr @cktName, align 8, !tbaa !7
  %3 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %1, ptr noundef nonnull dereferenceable(1) @.str.822, ptr noundef %2) #44
  %4 = call noalias ptr @fopen(ptr noundef nonnull %1, ptr noundef nonnull @.str.1.823) #43
  %5 = load i32, ptr @numcells, align 4, !tbaa !17
  %6 = icmp slt i32 %5, 1
  br i1 %6, label %49, label %7

7:                                                ; preds = %44, %0
  %8 = phi i64 [ %45, %44 ], [ 1, %0 ]
  %9 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %10 = getelementptr inbounds ptr, ptr %9, i64 %8
  %11 = load ptr, ptr %10, align 8, !tbaa !7
  %12 = getelementptr inbounds %struct.cellbox, ptr %11, i64 0, i32 5
  %13 = load i32, ptr %12, align 8, !tbaa !45
  %14 = getelementptr inbounds %struct.cellbox, ptr %11, i64 0, i32 2
  %15 = load i32, ptr %14, align 4, !tbaa !164
  %16 = getelementptr inbounds %struct.cellbox, ptr %11, i64 0, i32 3
  %17 = load i32, ptr %16, align 8, !tbaa !165
  %18 = trunc i64 %8 to i32
  %19 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %4, ptr noundef nonnull @.str.2.824, i32 noundef %18, i32 noundef %13, i32 noundef %15, i32 noundef %17) #43
  %20 = getelementptr inbounds %struct.cellbox, ptr %11, i64 0, i32 18
  %21 = load i32, ptr %20, align 4, !tbaa !223
  %22 = icmp slt i32 %21, 1
  br i1 %22, label %44, label %23

23:                                               ; preds = %7
  %24 = getelementptr inbounds %struct.cellbox, ptr %11, i64 0, i32 20
  %25 = getelementptr inbounds %struct.cellbox, ptr %11, i64 0, i32 13
  br label %26

26:                                               ; preds = %39, %23
  %27 = phi i64 [ 1, %23 ], [ %41, %39 ]
  %28 = load ptr, ptr %24, align 8, !tbaa !226
  %29 = getelementptr inbounds %struct.uncombox.25, ptr %28, i64 %27, i32 1
  %30 = load i32, ptr %29, align 4, !tbaa !250
  %31 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %4, ptr noundef nonnull @.str.3.825, i32 noundef %30) #43
  %32 = load i32, ptr %20, align 4, !tbaa !223
  %33 = zext i32 %32 to i64
  %34 = icmp eq i64 %27, %33
  br i1 %34, label %35, label %39

35:                                               ; preds = %26
  %36 = load double, ptr %25, align 8, !tbaa !237
  %37 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %4, ptr noundef nonnull @.str.4.826, double noundef %36) #43
  %38 = load i32, ptr %20, align 4, !tbaa !223
  br label %39

39:                                               ; preds = %35, %26
  %40 = phi i32 [ %32, %26 ], [ %38, %35 ]
  %41 = add nuw nsw i64 %27, 1
  %42 = sext i32 %40 to i64
  %43 = icmp slt i64 %27, %42
  br i1 %43, label %26, label %44, !llvm.loop !949

44:                                               ; preds = %39, %7
  %45 = add nuw nsw i64 %8, 1
  %46 = load i32, ptr @numcells, align 4, !tbaa !17
  %47 = sext i32 %46 to i64
  %48 = icmp slt i64 %8, %47
  br i1 %48, label %7, label %49, !llvm.loop !950

49:                                               ; preds = %44, %0
  %50 = tail call i32 @fclose(ptr noundef %4) #43
  call void @llvm.lifetime.end.p0(i64 1024, ptr nonnull %1) #47
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @TW_oldinput(ptr noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca double, align 8
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %3) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6) #47
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #47
  br label %8

8:                                                ; preds = %820, %1
  %9 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.5.829, ptr noundef nonnull %2, ptr noundef nonnull %3, ptr noundef nonnull %5, ptr noundef nonnull %6) #44
  %10 = icmp eq i32 %9, 4
  br i1 %10, label %11, label %821

11:                                               ; preds = %8
  %12 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %13 = load i32, ptr %2, align 4, !tbaa !17
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds ptr, ptr %12, i64 %14
  %16 = load ptr, ptr %15, align 8, !tbaa !7
  %17 = load i32, ptr %3, align 4, !tbaa !17
  %18 = getelementptr inbounds %struct.cellbox, ptr %16, i64 0, i32 5
  store i32 %17, ptr %18, align 8, !tbaa !45
  %19 = load i32, ptr %5, align 4, !tbaa !17
  %20 = getelementptr inbounds %struct.cellbox, ptr %16, i64 0, i32 2
  store i32 %19, ptr %20, align 4, !tbaa !164
  %21 = load i32, ptr %6, align 4, !tbaa !17
  %22 = getelementptr inbounds %struct.cellbox, ptr %16, i64 0, i32 3
  store i32 %21, ptr %22, align 8, !tbaa !165
  %23 = getelementptr inbounds %struct.cellbox, ptr %16, i64 0, i32 18
  %24 = load i32, ptr %23, align 4, !tbaa !223
  %25 = icmp slt i32 %24, 1
  br i1 %25, label %69, label %26

26:                                               ; preds = %11
  %27 = getelementptr inbounds %struct.cellbox, ptr %16, i64 0, i32 17
  %28 = getelementptr inbounds %struct.cellbox, ptr %16, i64 0, i32 19
  %29 = getelementptr inbounds %struct.cellbox, ptr %16, i64 0, i32 20
  %30 = getelementptr inbounds %struct.cellbox, ptr %16, i64 0, i32 13
  br label %31

31:                                               ; preds = %64, %26
  %32 = phi i64 [ 1, %26 ], [ %66, %64 ]
  %33 = icmp eq i64 %32, 1
  br i1 %33, label %34, label %46

34:                                               ; preds = %31
  %35 = load i32, ptr %27, align 8, !tbaa !227
  %36 = icmp slt i32 %35, 1
  br i1 %36, label %46, label %37

37:                                               ; preds = %34
  %38 = load ptr, ptr %28, align 8, !tbaa !224
  %39 = add nuw i32 %35, 1
  %40 = zext i32 %39 to i64
  br label %41

41:                                               ; preds = %41, %37
  %42 = phi i64 [ 1, %37 ], [ %44, %41 ]
  %43 = getelementptr inbounds %struct.contentbox, ptr %38, i64 %42
  store i32 0, ptr %43, align 4, !tbaa !232
  %44 = add nuw nsw i64 %42, 1
  %45 = icmp eq i64 %44, %40
  br i1 %45, label %46, label %41, !llvm.loop !951

46:                                               ; preds = %41, %34, %31
  %47 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.3.825, ptr noundef nonnull %4) #44
  %48 = load i32, ptr %4, align 4, !tbaa !17
  %49 = load ptr, ptr %29, align 8, !tbaa !226
  %50 = getelementptr inbounds %struct.uncombox.25, ptr %49, i64 %32, i32 1
  store i32 %48, ptr %50, align 4, !tbaa !250
  %51 = load ptr, ptr %28, align 8, !tbaa !224
  %52 = load i32, ptr %4, align 4, !tbaa !17
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds %struct.contentbox, ptr %51, i64 %53
  %55 = load i32, ptr %54, align 4, !tbaa !232
  %56 = add nsw i32 %55, 1
  store i32 %56, ptr %54, align 4, !tbaa !232
  %57 = load i32, ptr %23, align 4, !tbaa !223
  %58 = zext i32 %57 to i64
  %59 = icmp eq i64 %32, %58
  br i1 %59, label %60, label %64

60:                                               ; preds = %46
  %61 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.6.830, ptr noundef nonnull %7) #44
  %62 = load double, ptr %7, align 8, !tbaa !36
  store double %62, ptr %30, align 8, !tbaa !237
  %63 = load i32, ptr %23, align 4, !tbaa !223
  br label %64

64:                                               ; preds = %60, %46
  %65 = phi i32 [ %57, %46 ], [ %63, %60 ]
  %66 = add nuw nsw i64 %32, 1
  %67 = sext i32 %65 to i64
  %68 = icmp slt i64 %32, %67
  br i1 %68, label %31, label %69, !llvm.loop !952

69:                                               ; preds = %64, %11
  %70 = getelementptr inbounds %struct.cellbox, ptr %16, i64 0, i32 10
  %71 = load i32, ptr %70, align 4, !tbaa !297
  %72 = icmp eq i32 %71, 1
  br i1 %72, label %73, label %756

73:                                               ; preds = %69
  %74 = getelementptr inbounds %struct.cellbox, ptr %16, i64 0, i32 15
  %75 = load double, ptr %74, align 8, !tbaa !575
  %76 = getelementptr inbounds %struct.cellbox, ptr %16, i64 0, i32 16
  %77 = load double, ptr %76, align 8, !tbaa !574
  %78 = fadd double %77, 1.000000e-02
  %79 = fcmp ogt double %75, %78
  br i1 %79, label %80, label %756

80:                                               ; preds = %73
  %81 = getelementptr inbounds %struct.cellbox, ptr %16, i64 0, i32 21
  %82 = sext i32 %17 to i64
  %83 = getelementptr inbounds %struct.cellbox, ptr %16, i64 0, i32 21, i64 %82
  %84 = load ptr, ptr %83, align 8, !tbaa !7
  %85 = getelementptr inbounds %struct.tilebox, ptr %84, i64 0, i32 17
  %86 = load ptr, ptr %85, align 8, !tbaa !47
  %87 = getelementptr inbounds %struct.tilebox, ptr %84, i64 0, i32 13
  %88 = load i32, ptr %87, align 8, !tbaa !382
  %89 = getelementptr inbounds %struct.tilebox, ptr %84, i64 0, i32 14
  %90 = load i32, ptr %89, align 4, !tbaa !383
  %91 = getelementptr inbounds %struct.tilebox, ptr %84, i64 0, i32 15
  %92 = load i32, ptr %91, align 8, !tbaa !393
  %93 = getelementptr inbounds %struct.tilebox, ptr %84, i64 0, i32 16
  %94 = load i32, ptr %93, align 4, !tbaa !394
  %95 = getelementptr inbounds %struct.tilebox, ptr %84, i64 0, i32 18
  %96 = load ptr, ptr %95, align 8, !tbaa !225
  %97 = icmp slt i32 %17, 4
  br i1 %97, label %98, label %103

98:                                               ; preds = %80
  %99 = load double, ptr %7, align 8, !tbaa !36
  %100 = getelementptr inbounds %struct.cellbox, ptr %16, i64 0, i32 14
  %101 = load double, ptr %100, align 8, !tbaa !236
  %102 = fdiv double %99, %101
  br label %108

103:                                              ; preds = %80
  %104 = getelementptr inbounds %struct.cellbox, ptr %16, i64 0, i32 14
  %105 = load double, ptr %104, align 8, !tbaa !236
  %106 = load double, ptr %7, align 8, !tbaa !36
  %107 = fdiv double %105, %106
  br label %108

108:                                              ; preds = %103, %98
  %109 = phi double [ %102, %98 ], [ %107, %103 ]
  %110 = call double @sqrt(double noundef %109) #44
  %111 = sub nsw i32 %94, %92
  %112 = sitofp i32 %111 to double
  %113 = fmul double %110, %112
  %114 = fptosi double %113 to i32
  %115 = sitofp i32 %114 to double
  %116 = fsub double %113, %115
  %117 = fcmp oge double %116, 5.000000e-01
  %118 = zext i1 %117 to i32
  %119 = add nsw i32 %118, %114
  %120 = sdiv i32 %119, -2
  %121 = sub nsw i32 %90, %88
  %122 = sitofp i32 %121 to double
  %123 = fdiv double %122, %110
  %124 = fptosi double %123 to i32
  %125 = sitofp i32 %124 to double
  %126 = fsub double %123, %125
  %127 = fcmp oge double %126, 5.000000e-01
  %128 = zext i1 %127 to i32
  %129 = add nsw i32 %128, %124
  %130 = sdiv i32 %129, -2
  %131 = insertelement <2 x i32> poison, i32 %130, i64 0
  %132 = shufflevector <2 x i32> %131, <2 x i32> poison, <2 x i32> zeroinitializer
  %133 = insertelement <2 x i32> poison, i32 %88, i64 0
  %134 = shufflevector <2 x i32> %133, <2 x i32> poison, <2 x i32> zeroinitializer
  %135 = insertelement <2 x double> poison, double %110, i64 0
  %136 = shufflevector <2 x double> %135, <2 x double> poison, <2 x i32> zeroinitializer
  %137 = insertelement <2 x i32> poison, i32 %120, i64 0
  %138 = shufflevector <2 x i32> %137, <2 x i32> poison, <2 x i32> zeroinitializer
  %139 = insertelement <2 x i32> poison, i32 %92, i64 0
  %140 = shufflevector <2 x i32> %139, <2 x i32> poison, <2 x i32> zeroinitializer
  br label %143

141:                                              ; preds = %143
  %142 = icmp eq ptr %86, null
  br i1 %142, label %173, label %177

143:                                              ; preds = %143, %108
  %144 = phi ptr [ %171, %143 ], [ %84, %108 ]
  %145 = getelementptr inbounds %struct.tilebox, ptr %144, i64 0, i32 13
  %146 = getelementptr inbounds %struct.tilebox, ptr %144, i64 0, i32 9
  %147 = load <2 x i32>, ptr %145, align 8, !tbaa !17
  %148 = sub nsw <2 x i32> %147, %134
  %149 = sitofp <2 x i32> %148 to <2 x double>
  %150 = fdiv <2 x double> %149, %136
  %151 = fptosi <2 x double> %150 to <2 x i32>
  %152 = sitofp <2 x i32> %151 to <2 x double>
  %153 = fsub <2 x double> %150, %152
  %154 = fcmp oge <2 x double> %153, <double 5.000000e-01, double 5.000000e-01>
  %155 = zext <2 x i1> %154 to <2 x i32>
  %156 = add <2 x i32> %132, %151
  %157 = add <2 x i32> %156, %155
  store <2 x i32> %157, ptr %146, align 8, !tbaa !17
  %158 = getelementptr inbounds %struct.tilebox, ptr %144, i64 0, i32 15
  %159 = getelementptr inbounds %struct.tilebox, ptr %144, i64 0, i32 11
  %160 = load <2 x i32>, ptr %158, align 8, !tbaa !17
  %161 = sub nsw <2 x i32> %160, %140
  %162 = sitofp <2 x i32> %161 to <2 x double>
  %163 = fmul <2 x double> %136, %162
  %164 = fptosi <2 x double> %163 to <2 x i32>
  %165 = sitofp <2 x i32> %164 to <2 x double>
  %166 = fsub <2 x double> %163, %165
  %167 = fcmp oge <2 x double> %166, <double 5.000000e-01, double 5.000000e-01>
  %168 = zext <2 x i1> %167 to <2 x i32>
  %169 = add <2 x i32> %138, %164
  %170 = add <2 x i32> %169, %168
  store <2 x i32> %170, ptr %159, align 8, !tbaa !17
  %171 = load ptr, ptr %144, align 8, !tbaa !172
  %172 = icmp eq ptr %171, null
  br i1 %172, label %141, label %143, !llvm.loop !953

173:                                              ; preds = %177, %141
  %174 = getelementptr inbounds %struct.cellbox, ptr %16, i64 0, i32 17
  store i32 1, ptr %4, align 4, !tbaa !17
  %175 = load i32, ptr %174, align 8, !tbaa !227
  %176 = icmp slt i32 %175, 1
  br i1 %176, label %241, label %207

177:                                              ; preds = %177, %141
  %178 = phi ptr [ %205, %177 ], [ %86, %141 ]
  %179 = getelementptr inbounds %struct.termbox, ptr %178, i64 0, i32 3
  %180 = load i32, ptr %179, align 8, !tbaa !386
  %181 = sub nsw i32 %180, %88
  %182 = sitofp i32 %181 to double
  %183 = fdiv double %182, %110
  %184 = fptosi double %183 to i32
  %185 = sitofp i32 %184 to double
  %186 = fsub double %183, %185
  %187 = fcmp oge double %186, 5.000000e-01
  %188 = zext i1 %187 to i32
  %189 = add i32 %130, %184
  %190 = add i32 %189, %188
  %191 = getelementptr inbounds %struct.termbox, ptr %178, i64 0, i32 1
  store i32 %190, ptr %191, align 8, !tbaa !51
  %192 = getelementptr inbounds %struct.termbox, ptr %178, i64 0, i32 4
  %193 = load i32, ptr %192, align 4, !tbaa !387
  %194 = sub nsw i32 %193, %92
  %195 = sitofp i32 %194 to double
  %196 = fmul double %110, %195
  %197 = fptosi double %196 to i32
  %198 = sitofp i32 %197 to double
  %199 = fsub double %196, %198
  %200 = fcmp oge double %199, 5.000000e-01
  %201 = zext i1 %200 to i32
  %202 = add i32 %120, %197
  %203 = add i32 %202, %201
  %204 = getelementptr inbounds %struct.termbox, ptr %178, i64 0, i32 2
  store i32 %203, ptr %204, align 4, !tbaa !52
  %205 = load ptr, ptr %178, align 8, !tbaa !49
  %206 = icmp eq ptr %205, null
  br i1 %206, label %173, label %177, !llvm.loop !954

207:                                              ; preds = %207, %173
  %208 = phi i32 [ %239, %207 ], [ 1, %173 ]
  %209 = sext i32 %208 to i64
  %210 = getelementptr inbounds %struct.locbox.26, ptr %96, i64 %209, i32 2
  %211 = load i32, ptr %210, align 4, !tbaa !389
  %212 = sub nsw i32 %211, %88
  %213 = sitofp i32 %212 to double
  %214 = fdiv double %213, %110
  %215 = fptosi double %214 to i32
  %216 = sitofp i32 %215 to double
  %217 = fsub double %214, %216
  %218 = fcmp oge double %217, 5.000000e-01
  %219 = zext i1 %218 to i32
  %220 = add i32 %130, %215
  %221 = add i32 %220, %219
  %222 = getelementptr inbounds %struct.locbox.26, ptr %96, i64 %209
  store i32 %221, ptr %222, align 4, !tbaa !240
  %223 = load i32, ptr %4, align 4, !tbaa !17
  %224 = sext i32 %223 to i64
  %225 = getelementptr inbounds %struct.locbox.26, ptr %96, i64 %224, i32 3
  %226 = load i32, ptr %225, align 4, !tbaa !390
  %227 = sub nsw i32 %226, %92
  %228 = sitofp i32 %227 to double
  %229 = fmul double %110, %228
  %230 = fptosi double %229 to i32
  %231 = sitofp i32 %230 to double
  %232 = fsub double %229, %231
  %233 = fcmp oge double %232, 5.000000e-01
  %234 = zext i1 %233 to i32
  %235 = add i32 %120, %230
  %236 = add i32 %235, %234
  %237 = getelementptr inbounds %struct.locbox.26, ptr %96, i64 %224, i32 1
  store i32 %236, ptr %237, align 4, !tbaa !238
  %238 = load i32, ptr %4, align 4, !tbaa !17
  %239 = add nsw i32 %238, 1
  store i32 %239, ptr %4, align 4, !tbaa !17
  %240 = icmp slt i32 %238, %175
  br i1 %240, label %207, label %241, !llvm.loop !955

241:                                              ; preds = %207, %173
  %242 = icmp eq i32 %17, 0
  br i1 %242, label %491, label %243

243:                                              ; preds = %241
  %244 = getelementptr inbounds %struct.tilebox, ptr %84, i64 0, i32 12
  %245 = load i32, ptr %244, align 4, !tbaa !170
  %246 = getelementptr inbounds %struct.tilebox, ptr %84, i64 0, i32 11
  %247 = load i32, ptr %246, align 8, !tbaa !169
  %248 = sub nsw i32 %245, %247
  %249 = getelementptr inbounds %struct.tilebox, ptr %84, i64 0, i32 10
  %250 = load i32, ptr %249, align 4, !tbaa !168
  %251 = getelementptr inbounds %struct.tilebox, ptr %84, i64 0, i32 9
  %252 = load i32, ptr %251, align 8, !tbaa !167
  %253 = sub nsw i32 %250, %252
  switch i32 %17, label %254 [
    i32 1, label %256
    i32 2, label %257
    i32 3, label %258
    i32 4, label %259
    i32 5, label %260
    i32 6, label %261
    i32 7, label %262
  ]

254:                                              ; preds = %243
  %255 = load i32, ptr %3, align 4, !tbaa !17
  br label %263

256:                                              ; preds = %243
  store i32 1, ptr %3, align 4, !tbaa !17
  br label %263

257:                                              ; preds = %243
  store i32 2, ptr %3, align 4, !tbaa !17
  br label %263

258:                                              ; preds = %243
  store i32 3, ptr %3, align 4, !tbaa !17
  br label %263

259:                                              ; preds = %243
  store i32 4, ptr %3, align 4, !tbaa !17
  br label %263

260:                                              ; preds = %243
  store i32 5, ptr %3, align 4, !tbaa !17
  br label %263

261:                                              ; preds = %243
  store i32 7, ptr %3, align 4, !tbaa !17
  br label %263

262:                                              ; preds = %243
  store i32 6, ptr %3, align 4, !tbaa !17
  br label %263

263:                                              ; preds = %262, %261, %260, %259, %258, %257, %256, %254
  %264 = phi i32 [ %255, %254 ], [ 6, %262 ], [ 7, %261 ], [ 5, %260 ], [ 4, %259 ], [ 3, %258 ], [ 2, %257 ], [ 1, %256 ]
  %265 = load ptr, ptr %81, align 8, !tbaa !7
  %266 = getelementptr inbounds %struct.tilebox, ptr %265, i64 0, i32 9
  store i32 %252, ptr %266, align 8, !tbaa !167
  %267 = getelementptr inbounds %struct.tilebox, ptr %265, i64 0, i32 10
  store i32 %250, ptr %267, align 4, !tbaa !168
  %268 = getelementptr inbounds %struct.tilebox, ptr %265, i64 0, i32 11
  store i32 %247, ptr %268, align 8, !tbaa !169
  %269 = getelementptr inbounds %struct.tilebox, ptr %265, i64 0, i32 12
  store i32 %245, ptr %269, align 4, !tbaa !170
  call void @move(i32 noundef %264) #44
  call void @rect(ptr noundef nonnull %266, ptr noundef nonnull %268, ptr noundef nonnull %267, ptr noundef nonnull %269) #44
  %270 = and i32 %248, 1
  %271 = icmp eq i32 %270, 0
  br i1 %271, label %276, label %272

272:                                              ; preds = %263
  %273 = load i32, ptr %3, align 4
  %274 = and i32 %273, -3
  %275 = icmp eq i32 %274, 4
  br i1 %275, label %283, label %276

276:                                              ; preds = %272, %263
  %277 = and i32 %253, 1
  %278 = icmp eq i32 %277, 0
  br i1 %278, label %286, label %279

279:                                              ; preds = %276
  %280 = load i32, ptr %3, align 4
  %281 = and i32 %280, -2
  %282 = icmp eq i32 %281, 2
  br i1 %282, label %283, label %286

283:                                              ; preds = %279, %272
  %284 = load <2 x i32>, ptr %266, align 8, !tbaa !17
  %285 = add nsw <2 x i32> %284, <i32 1, i32 1>
  store <2 x i32> %285, ptr %266, align 8, !tbaa !17
  br label %286

286:                                              ; preds = %283, %279, %276
  br i1 %271, label %291, label %287

287:                                              ; preds = %286
  %288 = load i32, ptr %3, align 4
  %289 = and i32 %288, -3
  %290 = icmp eq i32 %289, 1
  br i1 %290, label %296, label %291

291:                                              ; preds = %287, %286
  %292 = and i32 %253, 1
  %293 = icmp eq i32 %292, 0
  br i1 %293, label %299, label %294

294:                                              ; preds = %291
  %295 = load i32, ptr %3, align 4
  switch i32 %295, label %299 [
    i32 7, label %296
    i32 4, label %296
  ]

296:                                              ; preds = %294, %294, %287
  %297 = load <2 x i32>, ptr %268, align 8, !tbaa !17
  %298 = add nsw <2 x i32> %297, <i32 1, i32 1>
  store <2 x i32> %298, ptr %268, align 8, !tbaa !17
  br label %299

299:                                              ; preds = %296, %294, %291
  %300 = getelementptr inbounds %struct.cellbox, ptr %16, i64 0, i32 6
  %301 = load i32, ptr %300, align 4, !tbaa !171
  %302 = icmp slt i32 %301, 1
  br i1 %302, label %346, label %303

303:                                              ; preds = %299
  %304 = and i32 %253, 1
  %305 = icmp eq i32 %304, 0
  br label %306

306:                                              ; preds = %342, %303
  %307 = phi ptr [ %265, %303 ], [ %310, %342 ]
  %308 = phi ptr [ %84, %303 ], [ %311, %342 ]
  %309 = phi i32 [ 1, %303 ], [ %343, %342 ]
  %310 = load ptr, ptr %307, align 8, !tbaa !172
  %311 = load ptr, ptr %308, align 8, !tbaa !172
  %312 = getelementptr inbounds %struct.tilebox, ptr %311, i64 0, i32 9
  %313 = getelementptr inbounds %struct.tilebox, ptr %310, i64 0, i32 9
  %314 = getelementptr inbounds %struct.tilebox, ptr %310, i64 0, i32 10
  %315 = getelementptr inbounds %struct.tilebox, ptr %310, i64 0, i32 11
  %316 = getelementptr inbounds %struct.tilebox, ptr %310, i64 0, i32 12
  %317 = load <4 x i32>, ptr %312, align 8, !tbaa !17
  store <4 x i32> %317, ptr %313, align 8, !tbaa !17
  %318 = load i32, ptr %3, align 4, !tbaa !17
  call void @move(i32 noundef %318) #44
  call void @rect(ptr noundef nonnull %313, ptr noundef nonnull %315, ptr noundef nonnull %314, ptr noundef nonnull %316) #44
  br i1 %271, label %323, label %319

319:                                              ; preds = %306
  %320 = load i32, ptr %3, align 4
  %321 = and i32 %320, -3
  %322 = icmp eq i32 %321, 4
  br i1 %322, label %328, label %323

323:                                              ; preds = %319, %306
  br i1 %305, label %331, label %324

324:                                              ; preds = %323
  %325 = load i32, ptr %3, align 4
  %326 = and i32 %325, -2
  %327 = icmp eq i32 %326, 2
  br i1 %327, label %328, label %331

328:                                              ; preds = %324, %319
  %329 = load <2 x i32>, ptr %313, align 8, !tbaa !17
  %330 = add nsw <2 x i32> %329, <i32 1, i32 1>
  store <2 x i32> %330, ptr %313, align 8, !tbaa !17
  br label %331

331:                                              ; preds = %328, %324, %323
  br i1 %271, label %336, label %332

332:                                              ; preds = %331
  %333 = load i32, ptr %3, align 4
  %334 = and i32 %333, -3
  %335 = icmp eq i32 %334, 1
  br i1 %335, label %339, label %336

336:                                              ; preds = %332, %331
  br i1 %305, label %342, label %337

337:                                              ; preds = %336
  %338 = load i32, ptr %3, align 4
  switch i32 %338, label %342 [
    i32 7, label %339
    i32 4, label %339
  ]

339:                                              ; preds = %337, %337, %332
  %340 = load <2 x i32>, ptr %315, align 8, !tbaa !17
  %341 = add nsw <2 x i32> %340, <i32 1, i32 1>
  store <2 x i32> %341, ptr %315, align 8, !tbaa !17
  br label %342

342:                                              ; preds = %339, %337, %336
  %343 = add nuw nsw i32 %309, 1
  %344 = load i32, ptr %300, align 4, !tbaa !171
  %345 = icmp slt i32 %309, %344
  br i1 %345, label %306, label %346, !llvm.loop !956

346:                                              ; preds = %342, %299
  %347 = getelementptr inbounds %struct.cellbox, ptr %16, i64 0, i32 8
  %348 = load i32, ptr %347, align 4, !tbaa !385
  %349 = icmp eq i32 %348, 0
  br i1 %349, label %430, label %350

350:                                              ; preds = %346
  %351 = load ptr, ptr %81, align 8, !tbaa !7
  %352 = getelementptr inbounds %struct.tilebox, ptr %351, i64 0, i32 17
  %353 = load ptr, ptr %352, align 8, !tbaa !47
  %354 = getelementptr inbounds %struct.termbox, ptr %86, i64 0, i32 1
  %355 = getelementptr inbounds %struct.termbox, ptr %353, i64 0, i32 1
  %356 = getelementptr inbounds %struct.termbox, ptr %353, i64 0, i32 2
  %357 = load <2 x i32>, ptr %354, align 8, !tbaa !17
  store <2 x i32> %357, ptr %355, align 8, !tbaa !17
  %358 = load i32, ptr %3, align 4, !tbaa !17
  call void @move(i32 noundef %358) #44
  call void @point(ptr noundef nonnull %355, ptr noundef nonnull %356) #44
  br i1 %271, label %363, label %359

359:                                              ; preds = %350
  %360 = load i32, ptr %3, align 4
  %361 = and i32 %360, -3
  %362 = icmp eq i32 %361, 4
  br i1 %362, label %370, label %363

363:                                              ; preds = %359, %350
  %364 = and i32 %253, 1
  %365 = icmp eq i32 %364, 0
  br i1 %365, label %373, label %366

366:                                              ; preds = %363
  %367 = load i32, ptr %3, align 4
  %368 = and i32 %367, -2
  %369 = icmp eq i32 %368, 2
  br i1 %369, label %370, label %373

370:                                              ; preds = %366, %359
  %371 = load i32, ptr %355, align 8, !tbaa !51
  %372 = add nsw i32 %371, 1
  store i32 %372, ptr %355, align 8, !tbaa !51
  br label %373

373:                                              ; preds = %370, %366, %363
  br i1 %271, label %378, label %374

374:                                              ; preds = %373
  %375 = load i32, ptr %3, align 4
  %376 = and i32 %375, -3
  %377 = icmp eq i32 %376, 1
  br i1 %377, label %383, label %378

378:                                              ; preds = %374, %373
  %379 = and i32 %253, 1
  %380 = icmp eq i32 %379, 0
  br i1 %380, label %386, label %381

381:                                              ; preds = %378
  %382 = load i32, ptr %3, align 4
  switch i32 %382, label %386 [
    i32 7, label %383
    i32 4, label %383
  ]

383:                                              ; preds = %381, %381, %374
  %384 = load i32, ptr %356, align 4, !tbaa !52
  %385 = add nsw i32 %384, 1
  store i32 %385, ptr %356, align 4, !tbaa !52
  br label %386

386:                                              ; preds = %383, %381, %378
  %387 = load i32, ptr %347, align 4, !tbaa !385
  %388 = icmp slt i32 %387, 2
  br i1 %388, label %430, label %389

389:                                              ; preds = %386
  %390 = and i32 %253, 1
  %391 = icmp eq i32 %390, 0
  br label %392

392:                                              ; preds = %426, %389
  %393 = phi ptr [ %86, %389 ], [ %397, %426 ]
  %394 = phi ptr [ %353, %389 ], [ %396, %426 ]
  %395 = phi i32 [ 2, %389 ], [ %427, %426 ]
  %396 = load ptr, ptr %394, align 8, !tbaa !49
  %397 = load ptr, ptr %393, align 8, !tbaa !49
  %398 = getelementptr inbounds %struct.termbox, ptr %397, i64 0, i32 1
  %399 = getelementptr inbounds %struct.termbox, ptr %396, i64 0, i32 1
  %400 = getelementptr inbounds %struct.termbox, ptr %396, i64 0, i32 2
  %401 = load <2 x i32>, ptr %398, align 8, !tbaa !17
  store <2 x i32> %401, ptr %399, align 8, !tbaa !17
  %402 = load i32, ptr %3, align 4, !tbaa !17
  call void @move(i32 noundef %402) #44
  call void @point(ptr noundef nonnull %399, ptr noundef nonnull %400) #44
  br i1 %271, label %407, label %403

403:                                              ; preds = %392
  %404 = load i32, ptr %3, align 4
  %405 = and i32 %404, -3
  %406 = icmp eq i32 %405, 4
  br i1 %406, label %412, label %407

407:                                              ; preds = %403, %392
  br i1 %391, label %415, label %408

408:                                              ; preds = %407
  %409 = load i32, ptr %3, align 4
  %410 = and i32 %409, -2
  %411 = icmp eq i32 %410, 2
  br i1 %411, label %412, label %415

412:                                              ; preds = %408, %403
  %413 = load i32, ptr %399, align 8, !tbaa !51
  %414 = add nsw i32 %413, 1
  store i32 %414, ptr %399, align 8, !tbaa !51
  br label %415

415:                                              ; preds = %412, %408, %407
  br i1 %271, label %420, label %416

416:                                              ; preds = %415
  %417 = load i32, ptr %3, align 4
  %418 = and i32 %417, -3
  %419 = icmp eq i32 %418, 1
  br i1 %419, label %423, label %420

420:                                              ; preds = %416, %415
  br i1 %391, label %426, label %421

421:                                              ; preds = %420
  %422 = load i32, ptr %3, align 4
  switch i32 %422, label %426 [
    i32 7, label %423
    i32 4, label %423
  ]

423:                                              ; preds = %421, %421, %416
  %424 = load i32, ptr %400, align 4, !tbaa !52
  %425 = add nsw i32 %424, 1
  store i32 %425, ptr %400, align 4, !tbaa !52
  br label %426

426:                                              ; preds = %423, %421, %420
  %427 = add nuw nsw i32 %395, 1
  %428 = load i32, ptr %347, align 4, !tbaa !385
  %429 = icmp slt i32 %395, %428
  br i1 %429, label %392, label %430, !llvm.loop !957

430:                                              ; preds = %426, %386, %346
  %431 = load i32, ptr %174, align 8, !tbaa !227
  %432 = icmp eq i32 %431, 0
  br i1 %432, label %491, label %433

433:                                              ; preds = %430
  %434 = load ptr, ptr %81, align 8, !tbaa !7
  %435 = getelementptr inbounds %struct.tilebox, ptr %434, i64 0, i32 18
  %436 = load ptr, ptr %435, align 8, !tbaa !225
  store i32 1, ptr %4, align 4, !tbaa !17
  %437 = icmp slt i32 %431, 1
  br i1 %437, label %491, label %438

438:                                              ; preds = %433
  %439 = and i32 %253, 1
  %440 = icmp eq i32 %439, 0
  br label %441

441:                                              ; preds = %486, %438
  %442 = phi i32 [ 1, %438 ], [ %488, %486 ]
  %443 = sext i32 %442 to i64
  %444 = getelementptr inbounds %struct.locbox.26, ptr %96, i64 %443
  %445 = load i32, ptr %444, align 4, !tbaa !240
  %446 = getelementptr inbounds %struct.locbox.26, ptr %436, i64 %443
  store i32 %445, ptr %446, align 4, !tbaa !240
  %447 = load i32, ptr %4, align 4, !tbaa !17
  %448 = sext i32 %447 to i64
  %449 = getelementptr inbounds %struct.locbox.26, ptr %96, i64 %448, i32 1
  %450 = load i32, ptr %449, align 4, !tbaa !238
  %451 = getelementptr inbounds %struct.locbox.26, ptr %436, i64 %448, i32 1
  store i32 %450, ptr %451, align 4, !tbaa !238
  %452 = load i32, ptr %3, align 4, !tbaa !17
  call void @move(i32 noundef %452) #44
  %453 = load i32, ptr %4, align 4, !tbaa !17
  %454 = sext i32 %453 to i64
  %455 = getelementptr inbounds %struct.locbox.26, ptr %436, i64 %454
  %456 = getelementptr inbounds %struct.locbox.26, ptr %436, i64 %454, i32 1
  call void @point(ptr noundef %455, ptr noundef nonnull %456) #44
  br i1 %271, label %461, label %457

457:                                              ; preds = %441
  %458 = load i32, ptr %3, align 4
  %459 = and i32 %458, -3
  %460 = icmp eq i32 %459, 4
  br i1 %460, label %466, label %461

461:                                              ; preds = %457, %441
  br i1 %440, label %472, label %462

462:                                              ; preds = %461
  %463 = load i32, ptr %3, align 4
  %464 = and i32 %463, -2
  %465 = icmp eq i32 %464, 2
  br i1 %465, label %466, label %472

466:                                              ; preds = %462, %457
  %467 = load i32, ptr %4, align 4, !tbaa !17
  %468 = sext i32 %467 to i64
  %469 = getelementptr inbounds %struct.locbox.26, ptr %436, i64 %468
  %470 = load i32, ptr %469, align 4, !tbaa !240
  %471 = add nsw i32 %470, 1
  store i32 %471, ptr %469, align 4, !tbaa !240
  br label %472

472:                                              ; preds = %466, %462, %461
  br i1 %271, label %477, label %473

473:                                              ; preds = %472
  %474 = load i32, ptr %3, align 4
  %475 = and i32 %474, -3
  %476 = icmp eq i32 %475, 1
  br i1 %476, label %480, label %477

477:                                              ; preds = %473, %472
  br i1 %440, label %486, label %478

478:                                              ; preds = %477
  %479 = load i32, ptr %3, align 4
  switch i32 %479, label %486 [
    i32 7, label %480
    i32 4, label %480
  ]

480:                                              ; preds = %478, %478, %473
  %481 = load i32, ptr %4, align 4, !tbaa !17
  %482 = sext i32 %481 to i64
  %483 = getelementptr inbounds %struct.locbox.26, ptr %436, i64 %482, i32 1
  %484 = load i32, ptr %483, align 4, !tbaa !238
  %485 = add nsw i32 %484, 1
  store i32 %485, ptr %483, align 4, !tbaa !238
  br label %486

486:                                              ; preds = %480, %478, %477
  %487 = load i32, ptr %4, align 4, !tbaa !17
  %488 = add nsw i32 %487, 1
  store i32 %488, ptr %4, align 4, !tbaa !17
  %489 = load i32, ptr %174, align 8, !tbaa !227
  %490 = icmp slt i32 %487, %489
  br i1 %490, label %441, label %491, !llvm.loop !958

491:                                              ; preds = %486, %433, %430, %241
  %492 = load ptr, ptr %81, align 8, !tbaa !7
  %493 = getelementptr inbounds %struct.tilebox, ptr %492, i64 0, i32 12
  %494 = load i32, ptr %493, align 4, !tbaa !170
  %495 = getelementptr inbounds %struct.tilebox, ptr %492, i64 0, i32 11
  %496 = load i32, ptr %495, align 8, !tbaa !169
  %497 = sub nsw i32 %494, %496
  %498 = getelementptr inbounds %struct.tilebox, ptr %492, i64 0, i32 10
  %499 = load i32, ptr %498, align 4, !tbaa !168
  %500 = getelementptr inbounds %struct.tilebox, ptr %492, i64 0, i32 9
  %501 = load i32, ptr %500, align 8, !tbaa !167
  %502 = sub nsw i32 %499, %501
  store i32 1, ptr %3, align 4, !tbaa !17
  %503 = and i32 %497, 1
  %504 = icmp eq i32 %503, 0
  %505 = and i32 %502, 1
  %506 = icmp eq i32 %505, 0
  %507 = getelementptr inbounds %struct.cellbox, ptr %16, i64 0, i32 6
  br label %508

508:                                              ; preds = %588, %491
  %509 = phi i32 [ 1, %491 ], [ %590, %588 ]
  %510 = icmp eq i32 %509, %17
  br i1 %510, label %588, label %511

511:                                              ; preds = %508
  %512 = load ptr, ptr %81, align 8, !tbaa !7
  %513 = sext i32 %509 to i64
  %514 = getelementptr inbounds %struct.cellbox, ptr %16, i64 0, i32 21, i64 %513
  %515 = load ptr, ptr %514, align 8, !tbaa !7
  %516 = getelementptr inbounds %struct.tilebox, ptr %512, i64 0, i32 9
  %517 = getelementptr inbounds %struct.tilebox, ptr %515, i64 0, i32 9
  %518 = getelementptr inbounds %struct.tilebox, ptr %515, i64 0, i32 10
  %519 = getelementptr inbounds %struct.tilebox, ptr %515, i64 0, i32 11
  %520 = getelementptr inbounds %struct.tilebox, ptr %515, i64 0, i32 12
  %521 = load <4 x i32>, ptr %516, align 8, !tbaa !17
  store <4 x i32> %521, ptr %517, align 8, !tbaa !17
  call void @move(i32 noundef %509) #44
  call void @rect(ptr noundef nonnull %517, ptr noundef nonnull %519, ptr noundef nonnull %518, ptr noundef nonnull %520) #44
  br i1 %504, label %526, label %522

522:                                              ; preds = %511
  %523 = load i32, ptr %3, align 4
  %524 = and i32 %523, -3
  %525 = icmp eq i32 %524, 4
  br i1 %525, label %531, label %526

526:                                              ; preds = %522, %511
  br i1 %506, label %534, label %527

527:                                              ; preds = %526
  %528 = load i32, ptr %3, align 4
  %529 = and i32 %528, -2
  %530 = icmp eq i32 %529, 2
  br i1 %530, label %531, label %534

531:                                              ; preds = %527, %522
  %532 = load <2 x i32>, ptr %517, align 8, !tbaa !17
  %533 = add nsw <2 x i32> %532, <i32 1, i32 1>
  store <2 x i32> %533, ptr %517, align 8, !tbaa !17
  br label %534

534:                                              ; preds = %531, %527, %526
  br i1 %504, label %539, label %535

535:                                              ; preds = %534
  %536 = load i32, ptr %3, align 4
  %537 = and i32 %536, -3
  %538 = icmp eq i32 %537, 1
  br i1 %538, label %542, label %539

539:                                              ; preds = %535, %534
  br i1 %506, label %545, label %540

540:                                              ; preds = %539
  %541 = load i32, ptr %3, align 4
  switch i32 %541, label %545 [
    i32 7, label %542
    i32 4, label %542
  ]

542:                                              ; preds = %540, %540, %535
  %543 = load <2 x i32>, ptr %519, align 8, !tbaa !17
  %544 = add nsw <2 x i32> %543, <i32 1, i32 1>
  store <2 x i32> %544, ptr %519, align 8, !tbaa !17
  br label %545

545:                                              ; preds = %542, %540, %539
  %546 = load i32, ptr %507, align 4, !tbaa !171
  %547 = icmp slt i32 %546, 1
  br i1 %547, label %588, label %548

548:                                              ; preds = %584, %545
  %549 = phi ptr [ %552, %584 ], [ %512, %545 ]
  %550 = phi ptr [ %553, %584 ], [ %515, %545 ]
  %551 = phi i32 [ %585, %584 ], [ 1, %545 ]
  %552 = load ptr, ptr %549, align 8, !tbaa !172
  %553 = load ptr, ptr %550, align 8, !tbaa !172
  %554 = getelementptr inbounds %struct.tilebox, ptr %552, i64 0, i32 9
  %555 = getelementptr inbounds %struct.tilebox, ptr %553, i64 0, i32 9
  %556 = getelementptr inbounds %struct.tilebox, ptr %553, i64 0, i32 10
  %557 = getelementptr inbounds %struct.tilebox, ptr %553, i64 0, i32 11
  %558 = getelementptr inbounds %struct.tilebox, ptr %553, i64 0, i32 12
  %559 = load <4 x i32>, ptr %554, align 8, !tbaa !17
  store <4 x i32> %559, ptr %555, align 8, !tbaa !17
  %560 = load i32, ptr %3, align 4, !tbaa !17
  call void @move(i32 noundef %560) #44
  call void @rect(ptr noundef nonnull %555, ptr noundef nonnull %557, ptr noundef nonnull %556, ptr noundef nonnull %558) #44
  br i1 %504, label %565, label %561

561:                                              ; preds = %548
  %562 = load i32, ptr %3, align 4
  %563 = and i32 %562, -3
  %564 = icmp eq i32 %563, 4
  br i1 %564, label %570, label %565

565:                                              ; preds = %561, %548
  br i1 %506, label %573, label %566

566:                                              ; preds = %565
  %567 = load i32, ptr %3, align 4
  %568 = and i32 %567, -2
  %569 = icmp eq i32 %568, 2
  br i1 %569, label %570, label %573

570:                                              ; preds = %566, %561
  %571 = load <2 x i32>, ptr %555, align 8, !tbaa !17
  %572 = add nsw <2 x i32> %571, <i32 1, i32 1>
  store <2 x i32> %572, ptr %555, align 8, !tbaa !17
  br label %573

573:                                              ; preds = %570, %566, %565
  br i1 %504, label %578, label %574

574:                                              ; preds = %573
  %575 = load i32, ptr %3, align 4
  %576 = and i32 %575, -3
  %577 = icmp eq i32 %576, 1
  br i1 %577, label %581, label %578

578:                                              ; preds = %574, %573
  br i1 %506, label %584, label %579

579:                                              ; preds = %578
  %580 = load i32, ptr %3, align 4
  switch i32 %580, label %584 [
    i32 7, label %581
    i32 4, label %581
  ]

581:                                              ; preds = %579, %579, %574
  %582 = load <2 x i32>, ptr %557, align 8, !tbaa !17
  %583 = add nsw <2 x i32> %582, <i32 1, i32 1>
  store <2 x i32> %583, ptr %557, align 8, !tbaa !17
  br label %584

584:                                              ; preds = %581, %579, %578
  %585 = add nuw nsw i32 %551, 1
  %586 = load i32, ptr %507, align 4, !tbaa !171
  %587 = icmp slt i32 %551, %586
  br i1 %587, label %548, label %588, !llvm.loop !959

588:                                              ; preds = %584, %545, %508
  %589 = load i32, ptr %3, align 4, !tbaa !17
  %590 = add nsw i32 %589, 1
  store i32 %590, ptr %3, align 4, !tbaa !17
  %591 = icmp slt i32 %589, 7
  br i1 %591, label %508, label %592, !llvm.loop !960

592:                                              ; preds = %588
  %593 = getelementptr inbounds %struct.cellbox, ptr %16, i64 0, i32 8
  %594 = load i32, ptr %593, align 4, !tbaa !385
  %595 = icmp eq i32 %594, 0
  br i1 %595, label %681, label %596

596:                                              ; preds = %592
  store i32 1, ptr %3, align 4, !tbaa !17
  br label %597

597:                                              ; preds = %677, %596
  %598 = phi i32 [ 1, %596 ], [ %679, %677 ]
  %599 = icmp eq i32 %598, %17
  br i1 %599, label %677, label %600

600:                                              ; preds = %597
  %601 = load ptr, ptr %81, align 8, !tbaa !7
  %602 = getelementptr inbounds %struct.tilebox, ptr %601, i64 0, i32 17
  %603 = load ptr, ptr %602, align 8, !tbaa !47
  %604 = sext i32 %598 to i64
  %605 = getelementptr inbounds %struct.cellbox, ptr %16, i64 0, i32 21, i64 %604
  %606 = load ptr, ptr %605, align 8, !tbaa !7
  %607 = getelementptr inbounds %struct.tilebox, ptr %606, i64 0, i32 17
  %608 = load ptr, ptr %607, align 8, !tbaa !47
  %609 = getelementptr inbounds %struct.termbox, ptr %603, i64 0, i32 1
  %610 = getelementptr inbounds %struct.termbox, ptr %608, i64 0, i32 1
  %611 = getelementptr inbounds %struct.termbox, ptr %608, i64 0, i32 2
  %612 = load <2 x i32>, ptr %609, align 8, !tbaa !17
  store <2 x i32> %612, ptr %610, align 8, !tbaa !17
  call void @move(i32 noundef %598) #44
  call void @point(ptr noundef nonnull %610, ptr noundef nonnull %611) #44
  br i1 %504, label %617, label %613

613:                                              ; preds = %600
  %614 = load i32, ptr %3, align 4
  %615 = and i32 %614, -3
  %616 = icmp eq i32 %615, 4
  br i1 %616, label %622, label %617

617:                                              ; preds = %613, %600
  br i1 %506, label %625, label %618

618:                                              ; preds = %617
  %619 = load i32, ptr %3, align 4
  %620 = and i32 %619, -2
  %621 = icmp eq i32 %620, 2
  br i1 %621, label %622, label %625

622:                                              ; preds = %618, %613
  %623 = load i32, ptr %610, align 8, !tbaa !51
  %624 = add nsw i32 %623, 1
  store i32 %624, ptr %610, align 8, !tbaa !51
  br label %625

625:                                              ; preds = %622, %618, %617
  br i1 %504, label %630, label %626

626:                                              ; preds = %625
  %627 = load i32, ptr %3, align 4
  %628 = and i32 %627, -3
  %629 = icmp eq i32 %628, 1
  br i1 %629, label %633, label %630

630:                                              ; preds = %626, %625
  br i1 %506, label %636, label %631

631:                                              ; preds = %630
  %632 = load i32, ptr %3, align 4
  switch i32 %632, label %636 [
    i32 7, label %633
    i32 4, label %633
  ]

633:                                              ; preds = %631, %631, %626
  %634 = load i32, ptr %611, align 4, !tbaa !52
  %635 = add nsw i32 %634, 1
  store i32 %635, ptr %611, align 4, !tbaa !52
  br label %636

636:                                              ; preds = %633, %631, %630
  %637 = load i32, ptr %593, align 4, !tbaa !385
  %638 = icmp slt i32 %637, 2
  br i1 %638, label %677, label %639

639:                                              ; preds = %673, %636
  %640 = phi ptr [ %644, %673 ], [ %608, %636 ]
  %641 = phi ptr [ %643, %673 ], [ %603, %636 ]
  %642 = phi i32 [ %674, %673 ], [ 2, %636 ]
  %643 = load ptr, ptr %641, align 8, !tbaa !49
  %644 = load ptr, ptr %640, align 8, !tbaa !49
  %645 = getelementptr inbounds %struct.termbox, ptr %643, i64 0, i32 1
  %646 = getelementptr inbounds %struct.termbox, ptr %644, i64 0, i32 1
  %647 = getelementptr inbounds %struct.termbox, ptr %644, i64 0, i32 2
  %648 = load <2 x i32>, ptr %645, align 8, !tbaa !17
  store <2 x i32> %648, ptr %646, align 8, !tbaa !17
  %649 = load i32, ptr %3, align 4, !tbaa !17
  call void @move(i32 noundef %649) #44
  call void @point(ptr noundef nonnull %646, ptr noundef nonnull %647) #44
  br i1 %504, label %654, label %650

650:                                              ; preds = %639
  %651 = load i32, ptr %3, align 4
  %652 = and i32 %651, -3
  %653 = icmp eq i32 %652, 4
  br i1 %653, label %659, label %654

654:                                              ; preds = %650, %639
  br i1 %506, label %662, label %655

655:                                              ; preds = %654
  %656 = load i32, ptr %3, align 4
  %657 = and i32 %656, -2
  %658 = icmp eq i32 %657, 2
  br i1 %658, label %659, label %662

659:                                              ; preds = %655, %650
  %660 = load i32, ptr %646, align 8, !tbaa !51
  %661 = add nsw i32 %660, 1
  store i32 %661, ptr %646, align 8, !tbaa !51
  br label %662

662:                                              ; preds = %659, %655, %654
  br i1 %504, label %667, label %663

663:                                              ; preds = %662
  %664 = load i32, ptr %3, align 4
  %665 = and i32 %664, -3
  %666 = icmp eq i32 %665, 1
  br i1 %666, label %670, label %667

667:                                              ; preds = %663, %662
  br i1 %506, label %673, label %668

668:                                              ; preds = %667
  %669 = load i32, ptr %3, align 4
  switch i32 %669, label %673 [
    i32 7, label %670
    i32 4, label %670
  ]

670:                                              ; preds = %668, %668, %663
  %671 = load i32, ptr %647, align 4, !tbaa !52
  %672 = add nsw i32 %671, 1
  store i32 %672, ptr %647, align 4, !tbaa !52
  br label %673

673:                                              ; preds = %670, %668, %667
  %674 = add nuw nsw i32 %642, 1
  %675 = load i32, ptr %593, align 4, !tbaa !385
  %676 = icmp slt i32 %642, %675
  br i1 %676, label %639, label %677, !llvm.loop !961

677:                                              ; preds = %673, %636, %597
  %678 = load i32, ptr %3, align 4, !tbaa !17
  %679 = add nsw i32 %678, 1
  store i32 %679, ptr %3, align 4, !tbaa !17
  %680 = icmp slt i32 %678, 7
  br i1 %680, label %597, label %681, !llvm.loop !962

681:                                              ; preds = %677, %592
  %682 = load i32, ptr %174, align 8, !tbaa !227
  %683 = icmp eq i32 %682, 0
  br i1 %683, label %756, label %684

684:                                              ; preds = %681
  %685 = load ptr, ptr %81, align 8, !tbaa !7
  %686 = getelementptr inbounds %struct.tilebox, ptr %685, i64 0, i32 18
  %687 = load ptr, ptr %686, align 8, !tbaa !225
  store i32 1, ptr %3, align 4, !tbaa !17
  br label %688

688:                                              ; preds = %751, %684
  %689 = phi i32 [ %682, %684 ], [ %753, %751 ]
  %690 = phi i32 [ 1, %684 ], [ %754, %751 ]
  %691 = icmp eq i32 %690, %17
  br i1 %691, label %751, label %692

692:                                              ; preds = %688
  %693 = sext i32 %690 to i64
  %694 = getelementptr inbounds %struct.cellbox, ptr %16, i64 0, i32 21, i64 %693
  %695 = load ptr, ptr %694, align 8, !tbaa !7
  %696 = getelementptr inbounds %struct.tilebox, ptr %695, i64 0, i32 18
  %697 = load ptr, ptr %696, align 8, !tbaa !225
  store i32 1, ptr %4, align 4, !tbaa !17
  %698 = icmp slt i32 %689, 1
  br i1 %698, label %751, label %699

699:                                              ; preds = %744, %692
  %700 = phi i32 [ %746, %744 ], [ 1, %692 ]
  %701 = sext i32 %700 to i64
  %702 = getelementptr inbounds %struct.locbox.26, ptr %687, i64 %701
  %703 = load i32, ptr %702, align 4, !tbaa !240
  %704 = getelementptr inbounds %struct.locbox.26, ptr %697, i64 %701
  store i32 %703, ptr %704, align 4, !tbaa !240
  %705 = load i32, ptr %4, align 4, !tbaa !17
  %706 = sext i32 %705 to i64
  %707 = getelementptr inbounds %struct.locbox.26, ptr %687, i64 %706, i32 1
  %708 = load i32, ptr %707, align 4, !tbaa !238
  %709 = getelementptr inbounds %struct.locbox.26, ptr %697, i64 %706, i32 1
  store i32 %708, ptr %709, align 4, !tbaa !238
  %710 = load i32, ptr %3, align 4, !tbaa !17
  call void @move(i32 noundef %710) #44
  %711 = load i32, ptr %4, align 4, !tbaa !17
  %712 = sext i32 %711 to i64
  %713 = getelementptr inbounds %struct.locbox.26, ptr %697, i64 %712
  %714 = getelementptr inbounds %struct.locbox.26, ptr %697, i64 %712, i32 1
  call void @point(ptr noundef %713, ptr noundef nonnull %714) #44
  br i1 %504, label %719, label %715

715:                                              ; preds = %699
  %716 = load i32, ptr %3, align 4
  %717 = and i32 %716, -3
  %718 = icmp eq i32 %717, 4
  br i1 %718, label %724, label %719

719:                                              ; preds = %715, %699
  br i1 %506, label %730, label %720

720:                                              ; preds = %719
  %721 = load i32, ptr %3, align 4
  %722 = and i32 %721, -2
  %723 = icmp eq i32 %722, 2
  br i1 %723, label %724, label %730

724:                                              ; preds = %720, %715
  %725 = load i32, ptr %4, align 4, !tbaa !17
  %726 = sext i32 %725 to i64
  %727 = getelementptr inbounds %struct.locbox.26, ptr %697, i64 %726
  %728 = load i32, ptr %727, align 4, !tbaa !240
  %729 = add nsw i32 %728, 1
  store i32 %729, ptr %727, align 4, !tbaa !240
  br label %730

730:                                              ; preds = %724, %720, %719
  br i1 %504, label %735, label %731

731:                                              ; preds = %730
  %732 = load i32, ptr %3, align 4
  %733 = and i32 %732, -3
  %734 = icmp eq i32 %733, 1
  br i1 %734, label %738, label %735

735:                                              ; preds = %731, %730
  br i1 %506, label %744, label %736

736:                                              ; preds = %735
  %737 = load i32, ptr %3, align 4
  switch i32 %737, label %744 [
    i32 7, label %738
    i32 4, label %738
  ]

738:                                              ; preds = %736, %736, %731
  %739 = load i32, ptr %4, align 4, !tbaa !17
  %740 = sext i32 %739 to i64
  %741 = getelementptr inbounds %struct.locbox.26, ptr %697, i64 %740, i32 1
  %742 = load i32, ptr %741, align 4, !tbaa !238
  %743 = add nsw i32 %742, 1
  store i32 %743, ptr %741, align 4, !tbaa !238
  br label %744

744:                                              ; preds = %738, %736, %735
  %745 = load i32, ptr %4, align 4, !tbaa !17
  %746 = add nsw i32 %745, 1
  store i32 %746, ptr %4, align 4, !tbaa !17
  %747 = load i32, ptr %174, align 8, !tbaa !227
  %748 = icmp slt i32 %745, %747
  br i1 %748, label %699, label %749, !llvm.loop !963

749:                                              ; preds = %744
  %.lcssa = phi i32 [ %747, %744 ]
  %750 = load i32, ptr %3, align 4, !tbaa !17
  br label %751

751:                                              ; preds = %749, %692, %688
  %752 = phi i32 [ %750, %749 ], [ %690, %692 ], [ %17, %688 ]
  %753 = phi i32 [ %.lcssa, %749 ], [ %689, %692 ], [ %689, %688 ]
  %754 = add nsw i32 %752, 1
  store i32 %754, ptr %3, align 4, !tbaa !17
  %755 = icmp slt i32 %752, 7
  br i1 %755, label %688, label %756, !llvm.loop !964

756:                                              ; preds = %751, %681, %73, %69
  %757 = sext i32 %17 to i64
  %758 = getelementptr inbounds %struct.cellbox, ptr %16, i64 0, i32 21, i64 %757
  %759 = load ptr, ptr %758, align 8, !tbaa !7
  %760 = getelementptr inbounds %struct.tilebox, ptr %759, i64 0, i32 17
  %761 = load ptr, ptr %760, align 8, !tbaa !7
  %762 = icmp eq ptr %761, null
  br i1 %762, label %767, label %763

763:                                              ; preds = %756
  %764 = load ptr, ptr @termarray, align 8, !tbaa !7
  %765 = load i32, ptr %5, align 4, !tbaa !17
  %766 = load i32, ptr %6, align 4, !tbaa !17
  br label %779

767:                                              ; preds = %779, %756
  %768 = load i32, ptr %23, align 4, !tbaa !223
  %769 = icmp slt i32 %768, 1
  br i1 %769, label %820, label %770

770:                                              ; preds = %767
  %771 = getelementptr inbounds %struct.cellbox, ptr %16, i64 0, i32 20
  %772 = load ptr, ptr %771, align 8, !tbaa !226
  %773 = getelementptr inbounds %struct.tilebox, ptr %759, i64 0, i32 18
  %774 = load ptr, ptr %773, align 8, !tbaa !225
  %775 = load ptr, ptr @termarray, align 8, !tbaa !7
  %776 = load i32, ptr %5, align 4, !tbaa !17
  %777 = load i32, ptr %6, align 4, !tbaa !17
  %778 = sext i32 %768 to i64
  br label %798

779:                                              ; preds = %779, %763
  %780 = phi ptr [ %761, %763 ], [ %796, %779 ]
  %781 = getelementptr inbounds %struct.termbox, ptr %780, i64 0, i32 1
  %782 = load i32, ptr %781, align 8, !tbaa !51
  %783 = getelementptr inbounds %struct.termbox, ptr %780, i64 0, i32 2
  %784 = load i32, ptr %783, align 4, !tbaa !52
  %785 = getelementptr inbounds %struct.termbox, ptr %780, i64 0, i32 5
  %786 = load i32, ptr %785, align 8, !tbaa !53
  %787 = sext i32 %786 to i64
  %788 = getelementptr inbounds ptr, ptr %764, i64 %787
  %789 = load ptr, ptr %788, align 8, !tbaa !7
  %790 = add nsw i32 %765, %782
  %791 = getelementptr inbounds %struct.plist, ptr %789, i64 0, i32 1
  %792 = load ptr, ptr %791, align 8, !tbaa !62
  %793 = getelementptr inbounds %struct.netbox, ptr %792, i64 0, i32 1
  store i32 %790, ptr %793, align 8, !tbaa !64
  %794 = add nsw i32 %766, %784
  %795 = getelementptr inbounds %struct.netbox, ptr %792, i64 0, i32 2
  store i32 %794, ptr %795, align 4, !tbaa !65
  %796 = load ptr, ptr %780, align 8, !tbaa !7
  %797 = icmp eq ptr %796, null
  br i1 %797, label %767, label %779, !llvm.loop !965

798:                                              ; preds = %798, %770
  %799 = phi i64 [ 1, %770 ], [ %818, %798 ]
  %800 = getelementptr inbounds %struct.uncombox.25, ptr %772, i64 %799
  %801 = load i32, ptr %800, align 4, !tbaa !298
  %802 = getelementptr inbounds %struct.uncombox.25, ptr %772, i64 %799, i32 1
  %803 = load i32, ptr %802, align 4, !tbaa !250
  store i32 %803, ptr %4, align 4, !tbaa !17
  %804 = sext i32 %803 to i64
  %805 = getelementptr inbounds %struct.locbox.26, ptr %774, i64 %804
  %806 = load i32, ptr %805, align 4, !tbaa !240
  %807 = getelementptr inbounds %struct.locbox.26, ptr %774, i64 %804, i32 1
  %808 = load i32, ptr %807, align 4, !tbaa !238
  %809 = sext i32 %801 to i64
  %810 = getelementptr inbounds ptr, ptr %775, i64 %809
  %811 = load ptr, ptr %810, align 8, !tbaa !7
  %812 = add nsw i32 %776, %806
  %813 = getelementptr inbounds %struct.plist, ptr %811, i64 0, i32 1
  %814 = load ptr, ptr %813, align 8, !tbaa !62
  %815 = getelementptr inbounds %struct.netbox, ptr %814, i64 0, i32 1
  store i32 %812, ptr %815, align 8, !tbaa !64
  %816 = add nsw i32 %777, %808
  %817 = getelementptr inbounds %struct.netbox, ptr %814, i64 0, i32 2
  store i32 %816, ptr %817, align 4, !tbaa !65
  %818 = add nuw nsw i64 %799, 1
  %819 = icmp slt i64 %799, %778
  br i1 %819, label %798, label %820, !llvm.loop !966

820:                                              ; preds = %798, %767
  call void @loadbins(i32 noundef 0) #44
  br label %8, !llvm.loop !967

821:                                              ; preds = %8
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %3) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #47
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @scrapnet() #0 {
  %1 = load i32, ptr @numcells, align 4, !tbaa !17
  %2 = add nsw i32 %1, 1
  %3 = sext i32 %2 to i64
  %4 = shl nsw i64 %3, 2
  %5 = tail call noalias ptr @malloc(i64 noundef %4) #45
  %6 = sitofp i32 %1 to double
  %7 = fmul double %6, 0x3FE6666666666666
  %8 = fptosi double %7 to i32
  %9 = tail call i32 @llvm.smax.i32(i32 %8, i32 8)
  %10 = load i32, ptr @numnets, align 4, !tbaa !17
  %11 = icmp slt i32 %10, 1
  br i1 %11, label %52, label %12

12:                                               ; preds = %0
  %13 = icmp slt i32 %1, 1
  %14 = load ptr, ptr @netarray, align 8, !tbaa !7
  %15 = getelementptr i8, ptr %5, i64 4
  %16 = zext i32 %1 to i64
  %17 = shl nuw nsw i64 %16, 2
  %18 = add nuw i32 %10, 1
  %19 = zext i32 %18 to i64
  br label %20

20:                                               ; preds = %49, %12
  %21 = phi i64 [ 1, %12 ], [ %50, %49 ]
  br i1 %13, label %23, label %22

22:                                               ; preds = %20
  tail call void @llvm.memset.p0.i64(ptr align 4 %15, i8 0, i64 %17, i1 false), !tbaa !17
  br label %23

23:                                               ; preds = %22, %20
  %24 = getelementptr inbounds ptr, ptr %14, i64 %21
  %25 = load ptr, ptr %24, align 8, !tbaa !7
  %26 = load ptr, ptr %25, align 8, !tbaa !7
  %27 = icmp eq ptr %26, null
  br i1 %27, label %49, label %28

28:                                               ; preds = %41, %23
  %29 = phi ptr [ %43, %41 ], [ %26, %23 ]
  %30 = phi i32 [ %42, %41 ], [ 0, %23 ]
  %31 = getelementptr inbounds %struct.netbox, ptr %29, i64 0, i32 7
  %32 = load i32, ptr %31, align 8, !tbaa !57
  %33 = icmp sgt i32 %32, %1
  br i1 %33, label %41, label %34

34:                                               ; preds = %28
  %35 = sext i32 %32 to i64
  %36 = getelementptr inbounds i32, ptr %5, i64 %35
  %37 = load i32, ptr %36, align 4, !tbaa !17
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %41

39:                                               ; preds = %34
  store i32 1, ptr %36, align 4, !tbaa !17
  %40 = add nsw i32 %30, 1
  br label %41

41:                                               ; preds = %39, %34, %28
  %42 = phi i32 [ %40, %39 ], [ %30, %34 ], [ %30, %28 ]
  %43 = load ptr, ptr %29, align 8, !tbaa !7
  %44 = icmp eq ptr %43, null
  br i1 %44, label %45, label %28, !llvm.loop !968

45:                                               ; preds = %41
  %.lcssa = phi i32 [ %42, %41 ]
  %46 = icmp slt i32 %.lcssa, %9
  br i1 %46, label %49, label %47

47:                                               ; preds = %45
  %48 = getelementptr inbounds %struct.dimbox, ptr %25, i64 0, i32 1
  store i32 1, ptr %48, align 8, !tbaa !301
  br label %49

49:                                               ; preds = %47, %45, %23
  %50 = add nuw nsw i64 %21, 1
  %51 = icmp eq i64 %50, %19
  br i1 %51, label %52, label %20, !llvm.loop !969

52:                                               ; preds = %49, %0
  tail call void @free(ptr noundef %5) #44
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @selectpin(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 20
  %3 = load ptr, ptr %2, align 8, !tbaa !226
  %4 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 18
  %5 = load i32, ptr %4, align 4, !tbaa !223
  %6 = sitofp i32 %5 to double
  %7 = load i32, ptr @randVar, align 4, !tbaa !17
  br label %8

8:                                                ; preds = %8, %1
  %9 = phi i32 [ %11, %8 ], [ %7, %1 ]
  %10 = mul nsw i32 %9, 1103515245
  %11 = add nsw i32 %10, 12345
  %12 = and i32 %11, 2147483647
  %13 = sitofp i32 %12 to double
  %14 = fdiv double %13, 0x41DFFFFFFFC00000
  %15 = fmul double %14, %6
  %16 = fptosi double %15 to i32
  %17 = icmp eq i32 %5, %16
  br i1 %17, label %8, label %18, !llvm.loop !970

18:                                               ; preds = %8
  %.lcssa12 = phi i32 [ %11, %8 ]
  %.lcssa11 = phi i32 [ %16, %8 ]
  store i32 %.lcssa12, ptr @randVar, align 4, !tbaa !17
  %19 = add i32 %.lcssa11, 1
  %20 = sext i32 %19 to i64
  br label %21

21:                                               ; preds = %21, %18
  %22 = phi i64 [ %26, %21 ], [ %20, %18 ]
  %23 = getelementptr inbounds %struct.uncombox.25, ptr %3, i64 %22, i32 7
  %24 = load i32, ptr %23, align 4, !tbaa !251
  %25 = icmp eq i32 %24, 0
  %26 = add i64 %22, -1
  br i1 %25, label %21, label %27, !llvm.loop !971

27:                                               ; preds = %21
  %.lcssa10 = phi i64 [ %22, %21 ]
  %.lcssa9 = phi ptr [ %23, %21 ]
  %28 = trunc i64 %.lcssa10 to i32
  %29 = getelementptr inbounds %struct.uncombox.25, ptr %3, i64 %.lcssa10, i32 4
  %30 = load i32, ptr %29, align 4, !tbaa !715
  %31 = icmp sgt i32 %30, 2
  br i1 %31, label %32, label %45

32:                                               ; preds = %32, %27
  %33 = phi i32 [ %37, %32 ], [ %.lcssa12, %27 ]
  %34 = phi i32 [ %42, %32 ], [ %30, %27 ]
  %35 = sitofp i32 %34 to double
  %36 = mul nsw i32 %33, 1103515245
  %37 = add nsw i32 %36, 12345
  store i32 %37, ptr @randVar, align 4, !tbaa !17
  %38 = and i32 %37, 2147483647
  %39 = sitofp i32 %38 to double
  %40 = fdiv double %39, 0x41DFFFFFFFC00000
  %41 = fmul double %40, %35
  %42 = fptosi double %41 to i32
  %43 = load i32, ptr %29, align 4, !tbaa !715
  %44 = icmp eq i32 %43, %42
  br i1 %44, label %32, label %70, !llvm.loop !972

45:                                               ; preds = %27
  switch i32 %30, label %184 [
    i32 2, label %46
    i32 1, label %67
  ]

46:                                               ; preds = %46, %45
  %47 = phi i32 [ %51, %46 ], [ %.lcssa12, %45 ]
  %48 = phi i32 [ %56, %46 ], [ %30, %45 ]
  %49 = sitofp i32 %48 to double
  %50 = mul nsw i32 %47, 1103515245
  %51 = add nsw i32 %50, 12345
  store i32 %51, ptr @randVar, align 4, !tbaa !17
  %52 = and i32 %51, 2147483647
  %53 = sitofp i32 %52 to double
  %54 = fdiv double %53, 0x41DFFFFFFFC00000
  %55 = fmul double %54, %49
  %56 = fptosi double %55 to i32
  %57 = load i32, ptr %29, align 4, !tbaa !715
  %58 = icmp eq i32 %57, %56
  br i1 %58, label %46, label %59, !llvm.loop !973

59:                                               ; preds = %46
  %.lcssa8 = phi i32 [ %51, %46 ]
  %.lcssa7 = phi i32 [ %56, %46 ]
  %60 = icmp eq i32 %.lcssa7, 0
  br i1 %60, label %61, label %64

61:                                               ; preds = %59
  %62 = getelementptr inbounds %struct.uncombox.25, ptr %3, i64 %.lcssa10, i32 5
  %63 = load i32, ptr %62, align 4, !tbaa !717
  br label %72

64:                                               ; preds = %59
  %65 = getelementptr inbounds %struct.uncombox.25, ptr %3, i64 %.lcssa10, i32 6
  %66 = load i32, ptr %65, align 4, !tbaa !723
  br label %72

67:                                               ; preds = %45
  %68 = getelementptr inbounds %struct.uncombox.25, ptr %3, i64 %.lcssa10, i32 5
  %69 = load i32, ptr %68, align 4, !tbaa !717
  br label %72

70:                                               ; preds = %32
  %.lcssa6 = phi i32 [ %37, %32 ]
  %.lcssa5 = phi i32 [ %42, %32 ]
  %71 = add nsw i32 %.lcssa5, 1
  br label %72

72:                                               ; preds = %70, %67, %64, %61
  %73 = phi i32 [ %.lcssa8, %61 ], [ %.lcssa8, %64 ], [ %.lcssa12, %67 ], [ %.lcssa6, %70 ]
  %74 = phi i32 [ %63, %61 ], [ %66, %64 ], [ %69, %67 ], [ %71, %70 ]
  %75 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 22
  %76 = load ptr, ptr %75, align 8, !tbaa !716
  %77 = sext i32 %74 to i64
  %78 = getelementptr inbounds %struct.bellbox, ptr %76, i64 %77
  %79 = load i32, ptr %78, align 4, !tbaa !718
  %80 = getelementptr inbounds %struct.bellbox, ptr %76, i64 %77, i32 1
  %81 = load i32, ptr %80, align 4, !tbaa !720
  %82 = sub i32 %81, %79
  %83 = add i32 %82, 1
  %84 = load i32, ptr %.lcssa9, align 4, !tbaa !251
  %85 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 19
  %86 = load ptr, ptr %85, align 8, !tbaa !224
  %87 = sitofp i32 %83 to double
  %88 = sext i32 %79 to i64
  %89 = add i32 %81, 1
  br label %91

90:                                               ; preds = %112, %91
  br label %91, !llvm.loop !974

91:                                               ; preds = %90, %72
  %92 = phi i32 [ %94, %90 ], [ %73, %72 ]
  %93 = mul nsw i32 %92, 1103515245
  %94 = add nsw i32 %93, 12345
  store i32 %94, ptr @randVar, align 4, !tbaa !17
  %95 = and i32 %94, 2147483647
  %96 = sitofp i32 %95 to double
  %97 = fdiv double %96, 0x41DFFFFFFFC00000
  %98 = fmul double %97, %87
  %99 = fptosi double %98 to i32
  %100 = add nsw i32 %79, %99
  %101 = icmp sgt i32 %100, %81
  br i1 %101, label %90, label %102

102:                                              ; preds = %91
  %103 = sext i32 %99 to i64
  %104 = add nsw i64 %88, %103
  br label %105

105:                                              ; preds = %112, %102
  %106 = phi i64 [ %104, %102 ], [ %113, %112 ]
  %107 = phi i32 [ 0, %102 ], [ %110, %112 ]
  %108 = getelementptr inbounds %struct.contentbox, ptr %86, i64 %106, i32 2
  %109 = load i32, ptr %108, align 4, !tbaa !316
  %110 = add nsw i32 %109, %107
  %111 = icmp slt i32 %110, %84
  br i1 %111, label %112, label %116

112:                                              ; preds = %105
  %113 = add nsw i64 %106, 1
  %114 = trunc i64 %113 to i32
  %115 = icmp eq i32 %89, %114
  br i1 %115, label %90, label %105, !llvm.loop !975

116:                                              ; preds = %105
  %.lcssa4 = phi i32 [ %100, %105 ]
  %.lcssa3 = phi i64 [ %106, %105 ]
  %117 = getelementptr inbounds %struct.uncombox.25, ptr %3, i64 %.lcssa10, i32 1
  %118 = load i32, ptr %117, align 4, !tbaa !250
  %119 = icmp eq i32 %.lcssa4, %118
  br i1 %119, label %132, label %120

120:                                              ; preds = %116
  %121 = trunc i64 %.lcssa3 to i32
  %122 = tail call i32 @upin(ptr noundef %0, i32 noundef %28, i32 noundef %84, i32 noundef %.lcssa4, i32 noundef %121) #44
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %129, label %124

124:                                              ; preds = %120
  %125 = load i32, ptr @flips, align 4, !tbaa !17
  %126 = add nsw i32 %125, 1
  store i32 %126, ptr @flips, align 4, !tbaa !17
  %127 = load i32, ptr @flipp, align 4, !tbaa !17
  %128 = add nsw i32 %127, 1
  store i32 %128, ptr @flipp, align 4, !tbaa !17
  br label %129

129:                                              ; preds = %124, %120
  %130 = load i32, ptr @attp, align 4, !tbaa !17
  %131 = add nsw i32 %130, 1
  store i32 %131, ptr @attp, align 4, !tbaa !17
  br label %132

132:                                              ; preds = %129, %116
  %133 = getelementptr inbounds %struct.uncombox.25, ptr %3, i64 %.lcssa10, i32 8
  %134 = load i32, ptr %133, align 4, !tbaa !803
  %135 = icmp eq i32 %134, 1
  %136 = icmp sgt i32 %84, 1
  %137 = select i1 %135, i1 %136, i1 false
  br i1 %137, label %138, label %184

138:                                              ; preds = %132
  %139 = sitofp i32 %84 to double
  %140 = load i32, ptr @randVar, align 4, !tbaa !17
  br label %141

141:                                              ; preds = %141, %138
  %142 = phi i32 [ %140, %138 ], [ %144, %141 ]
  %143 = mul nsw i32 %142, 1103515245
  %144 = add nsw i32 %143, 12345
  %145 = and i32 %144, 2147483647
  %146 = sitofp i32 %145 to double
  %147 = fdiv double %146, 0x41DFFFFFFFC00000
  %148 = fmul double %147, %139
  %149 = fptosi double %148 to i32
  %150 = icmp eq i32 %84, %149
  br i1 %150, label %141, label %151, !llvm.loop !976

151:                                              ; preds = %151, %141
  %.lcssa2 = phi i32 [ %.lcssa2, %151 ], [ %149, %141 ]
  %152 = phi i32 [ %154, %151 ], [ %144, %141 ]
  %153 = mul nsw i32 %152, 1103515245
  %154 = add nsw i32 %153, 12345
  %155 = and i32 %154, 2147483647
  %156 = sitofp i32 %155 to double
  %157 = fdiv double %156, 0x41DFFFFFFFC00000
  %158 = fmul double %157, %139
  %159 = fptosi double %158 to i32
  %160 = icmp eq i32 %84, %159
  %161 = icmp eq i32 %159, %.lcssa2
  %162 = or i1 %160, %161
  br i1 %162, label %151, label %163, !llvm.loop !977

163:                                              ; preds = %151
  %.lcssa2.lcssa = phi i32 [ %.lcssa2, %151 ]
  %.lcssa1 = phi i32 [ %154, %151 ]
  %.lcssa = phi i32 [ %159, %151 ]
  store i32 %.lcssa1, ptr @randVar, align 4, !tbaa !17
  %164 = add nsw i32 %28, %.lcssa2.lcssa
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds %struct.uncombox.25, ptr %3, i64 %165, i32 1
  %167 = load i32, ptr %166, align 4, !tbaa !250
  %168 = add nsw i32 %28, %.lcssa
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds %struct.uncombox.25, ptr %3, i64 %169, i32 1
  %171 = load i32, ptr %170, align 4, !tbaa !250
  %172 = icmp eq i32 %167, %171
  br i1 %172, label %184, label %173

173:                                              ; preds = %163
  %174 = tail call i32 @upinswap(ptr noundef %0, i32 noundef %164, i32 noundef %168, i32 noundef %167, i32 noundef %171) #44
  %175 = icmp eq i32 %174, 0
  br i1 %175, label %181, label %176

176:                                              ; preds = %173
  %177 = load i32, ptr @flips, align 4, !tbaa !17
  %178 = add nsw i32 %177, 1
  store i32 %178, ptr @flips, align 4, !tbaa !17
  %179 = load i32, ptr @flipp, align 4, !tbaa !17
  %180 = add nsw i32 %179, 1
  store i32 %180, ptr @flipp, align 4, !tbaa !17
  br label %181

181:                                              ; preds = %176, %173
  %182 = load i32, ptr @attp, align 4, !tbaa !17
  %183 = add nsw i32 %182, 1
  store i32 %183, ptr @attp, align 4, !tbaa !17
  br label %184

184:                                              ; preds = %181, %163, %132, %45
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @setpwates() #2 {
  %1 = load i32, ptr @numcells, align 4, !tbaa !17
  %2 = icmp slt i32 %1, 1
  br i1 %2, label %34, label %3

3:                                                ; preds = %0
  %4 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %5 = load double, ptr @pinsPerLen, align 8
  %6 = add nuw i32 %1, 1
  %7 = zext i32 %6 to i64
  %8 = insertelement <2 x double> poison, double %5, i64 0
  %9 = shufflevector <2 x double> %8, <2 x double> poison, <2 x i32> zeroinitializer
  br label %10

10:                                               ; preds = %31, %3
  %11 = phi i64 [ 1, %3 ], [ %32, %31 ]
  %12 = getelementptr inbounds ptr, ptr %4, i64 %11
  %13 = load ptr, ptr %12, align 8, !tbaa !7
  %14 = getelementptr inbounds %struct.cellbox, ptr %13, i64 0, i32 21
  %15 = load ptr, ptr %14, align 8, !tbaa !7
  %16 = icmp eq ptr %15, null
  br i1 %16, label %31, label %17

17:                                               ; preds = %17, %10
  %18 = phi ptr [ %29, %17 ], [ %15, %10 ]
  %19 = getelementptr inbounds %struct.tilebox, ptr %18, i64 0, i32 1
  %20 = load <2 x double>, ptr %19, align 8, !tbaa !36
  %21 = fcmp ogt <2 x double> %20, %9
  %22 = fdiv <2 x double> %20, %9
  %23 = select <2 x i1> %21, <2 x double> %22, <2 x double> <double 1.000000e+00, double 1.000000e+00>
  store <2 x double> %23, ptr %19, align 8, !tbaa !36
  %24 = getelementptr inbounds %struct.tilebox, ptr %18, i64 0, i32 3
  %25 = load <2 x double>, ptr %24, align 8, !tbaa !36
  %26 = fcmp ogt <2 x double> %25, %9
  %27 = fdiv <2 x double> %25, %9
  %28 = select <2 x i1> %26, <2 x double> %27, <2 x double> <double 1.000000e+00, double 1.000000e+00>
  store <2 x double> %28, ptr %24, align 8, !tbaa !36
  %29 = load ptr, ptr %18, align 8, !tbaa !7
  %30 = icmp eq ptr %29, null
  br i1 %30, label %31, label %17, !llvm.loop !978

31:                                               ; preds = %17, %10
  %32 = add nuw nsw i64 %11, 1
  %33 = icmp eq i64 %32, %7
  br i1 %33, label %34, label %10, !llvm.loop !979

34:                                               ; preds = %31, %0
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @shortpath(i32 noundef %0) #0 {
  %2 = alloca ptr, align 8
  %3 = alloca ptr, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #47
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5) #47
  %6 = icmp slt i32 %0, 1
  br i1 %6, label %74, label %7

7:                                                ; preds = %1
  %8 = add nuw i32 %0, 1
  %9 = zext i32 %8 to i64
  br label %10

10:                                               ; preds = %71, %7
  %11 = phi i64 [ 1, %7 ], [ %72, %71 ]
  %12 = load i32, ptr @numnodes, align 4, !tbaa !17
  %13 = trunc i64 %11 to i32
  %14 = add nsw i32 %12, %13
  %15 = load ptr, ptr @pnodeArray, align 8, !tbaa !7
  %16 = getelementptr inbounds %struct.dlink2, ptr %15, i64 %11, i32 1
  %17 = load ptr, ptr %16, align 8, !tbaa !593
  store ptr null, ptr %2, align 8, !tbaa !7
  %18 = add nsw i32 %12, %0
  %19 = icmp slt i32 %18, 1
  br i1 %19, label %36, label %20

20:                                               ; preds = %10
  %21 = sext i32 %14 to i64
  %22 = getelementptr inbounds %struct.nnode, ptr %17, i64 %21, i32 2
  %23 = zext i32 %14 to i64
  br label %24

24:                                               ; preds = %28, %20
  %25 = phi i64 [ 1, %20 ], [ %31, %28 ]
  %26 = icmp eq i64 %25, %23
  br i1 %26, label %27, label %28

27:                                               ; preds = %24
  call void @tinsert(ptr noundef nonnull %2, i32 noundef 0, i32 noundef %14) #44
  store i16 0, ptr %22, align 4, !tbaa !927
  br label %28

28:                                               ; preds = %27, %24
  %29 = phi i32 [ 0, %27 ], [ 1000000000, %24 ]
  %30 = getelementptr inbounds %struct.nnode, ptr %17, i64 %25, i32 1
  store i32 %29, ptr %30, align 4
  %31 = add nuw nsw i64 %25, 1
  %32 = load i32, ptr @numnodes, align 4, !tbaa !17
  %33 = add nsw i32 %32, %0
  %34 = sext i32 %33 to i64
  %35 = icmp slt i64 %25, %34
  br i1 %35, label %24, label %36, !llvm.loop !980

36:                                               ; preds = %28, %10
  br label %37

37:                                               ; preds = %47, %36
  call void @tpop(ptr noundef nonnull %2, ptr noundef nonnull %3, ptr noundef nonnull %4, ptr noundef nonnull %5) #44
  %38 = load ptr, ptr %3, align 8, !tbaa !7
  %39 = icmp eq ptr %38, null
  br i1 %39, label %71, label %40

40:                                               ; preds = %37
  %41 = load ptr, ptr @gnodeArray, align 8, !tbaa !7
  %42 = load i32, ptr %5, align 4, !tbaa !17
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds ptr, ptr %41, i64 %43
  %45 = load ptr, ptr %44, align 8, !tbaa !7
  %46 = icmp eq ptr %45, null
  br i1 %46, label %47, label %48

47:                                               ; preds = %67, %40
  br label %37

48:                                               ; preds = %67, %40
  %49 = phi ptr [ %69, %67 ], [ %45, %40 ]
  %50 = getelementptr inbounds %struct.clbox, ptr %49, i64 0, i32 2
  %51 = load i32, ptr %50, align 8, !tbaa !485
  %52 = load i32, ptr %49, align 8, !tbaa !481
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds %struct.nnode, ptr %17, i64 %53, i32 1
  %55 = load i32, ptr %54, align 4, !tbaa !594
  %56 = load i32, ptr %4, align 4, !tbaa !17
  %57 = add nsw i32 %56, %51
  %58 = icmp sgt i32 %55, %57
  br i1 %58, label %59, label %67

59:                                               ; preds = %48
  call void @tdelete(ptr noundef nonnull %2, i32 noundef %55, i32 noundef %52) #44
  %60 = load i32, ptr %4, align 4, !tbaa !17
  %61 = add nsw i32 %60, %51
  call void @tinsert(ptr noundef nonnull %2, i32 noundef %61, i32 noundef %52) #44
  %62 = load i32, ptr %4, align 4, !tbaa !17
  %63 = add nsw i32 %62, %51
  store i32 %63, ptr %54, align 4, !tbaa !594
  %64 = load i32, ptr %5, align 4, !tbaa !17
  %65 = trunc i32 %64 to i16
  %66 = getelementptr inbounds %struct.nnode, ptr %17, i64 %53, i32 2
  store i16 %65, ptr %66, align 4, !tbaa !927
  br label %67

67:                                               ; preds = %59, %48
  %68 = getelementptr inbounds %struct.clbox, ptr %49, i64 0, i32 7
  %69 = load ptr, ptr %68, align 8, !tbaa !7
  %70 = icmp eq ptr %69, null
  br i1 %70, label %47, label %48, !llvm.loop !981

71:                                               ; preds = %37
  %72 = add nuw nsw i64 %11, 1
  %73 = icmp eq i64 %72, %9
  br i1 %73, label %74, label %10, !llvm.loop !982

74:                                               ; preds = %71, %1
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4) #47
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #47
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #47
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @test2loop(i32 noundef %0) #0 {
  store double 0.000000e+00, ptr @totFunc, align 8, !tbaa !36
  store double 0.000000e+00, ptr @totPen, align 8, !tbaa !36
  %2 = load double, ptr @T, align 8, !tbaa !36
  %3 = tail call double @log10(double noundef %2) #44
  %4 = fmul double %3, 2.000000e+00
  %5 = tail call double @exp2(double %4) #47
  %6 = load i32, ptr @bdxlength, align 4, !tbaa !17
  %7 = load double, ptr @T, align 8, !tbaa !36
  %8 = tail call double @log10(double noundef %7) #44
  %9 = fmul double %8, 2.000000e+00
  %10 = tail call double @exp2(double %9) #47
  %11 = load i32, ptr @bdylength, align 4, !tbaa !17
  %12 = insertelement <2 x double> poison, double %10, i64 0
  %13 = insertelement <2 x double> %12, double %5, i64 1
  %14 = fmul <2 x double> %13, <double 0x3F50000000000000, double 0x3F50000000000000>
  %15 = insertelement <2 x i32> poison, i32 %11, i64 0
  %16 = insertelement <2 x i32> %15, i32 %6, i64 1
  %17 = sitofp <2 x i32> %16 to <2 x double>
  %18 = fmul <2 x double> %14, %17
  %19 = fptosi <2 x double> %18 to <2 x i32>
  %20 = extractelement <2 x i32> %19, i64 1
  %21 = tail call i32 @llvm.smin.i32(i32 %6, i32 %20)
  %22 = icmp slt <2 x i32> %19, <i32 3, i32 3>
  %23 = extractelement <2 x i1> %22, i64 1
  %24 = select i1 %23, i32 3, i32 %21
  %25 = extractelement <2 x i32> %19, i64 0
  %26 = tail call i32 @llvm.smin.i32(i32 %11, i32 %25)
  %27 = extractelement <2 x i1> %22, i64 0
  %28 = select i1 %27, i32 3, i32 %26
  %29 = sdiv i32 %24, 3
  %30 = sdiv i32 %28, 3
  %31 = load ptr, ptr @fpo, align 8, !tbaa !7
  %32 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %31, ptr noundef nonnull @.str.841, i32 noundef %24) #43
  %33 = load ptr, ptr @fpo, align 8, !tbaa !7
  %34 = load i32, ptr @bdxlength, align 4, !tbaa !17
  %35 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %33, ptr noundef nonnull @.str.1.842, i32 noundef %34) #43
  %36 = load ptr, ptr @fpo, align 8, !tbaa !7
  %37 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %36, ptr noundef nonnull @.str.2.843, i32 noundef %28) #43
  %38 = load ptr, ptr @fpo, align 8, !tbaa !7
  %39 = load i32, ptr @bdylength, align 4, !tbaa !17
  %40 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %38, ptr noundef nonnull @.str.3.844, i32 noundef %39) #43
  %41 = load ptr, ptr @fpo, align 8, !tbaa !7
  %42 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %41, ptr noundef nonnull @.str.4.845, i32 noundef %29, i32 noundef %30) #43
  %43 = icmp sgt i32 %0, 0
  br i1 %43, label %44, label %380

44:                                               ; preds = %377, %1
  %45 = phi i32 [ %378, %377 ], [ 0, %1 ]
  %46 = load i32, ptr @randVar, align 4, !tbaa !17
  %47 = load i32, ptr @numcells, align 4, !tbaa !17
  %48 = sitofp i32 %47 to double
  %49 = load i32, ptr @bigcell, align 4, !tbaa !17
  %50 = sitofp i32 %49 to double
  %51 = load i32, ptr @toobig, align 4, !tbaa !17
  %52 = load ptr, ptr @cellarray, align 8
  %53 = load i32, ptr @blockl, align 4
  %54 = load i32, ptr @blockr, align 4
  %55 = load i32, ptr @blockb, align 4
  %56 = load i32, ptr @blockt, align 4
  br label %57

57:                                               ; preds = %67, %44
  %58 = phi i32 [ %46, %44 ], [ %68, %67 ]
  %59 = mul nsw i32 %58, 1103515245
  %60 = add nsw i32 %59, 12345
  %61 = and i32 %60, 2147483647
  %62 = sitofp i32 %61 to double
  %63 = fdiv double %62, 0x41DFFFFFFFC00000
  %64 = fmul double %63, %48
  %65 = fptosi double %64 to i32
  %66 = icmp eq i32 %47, %65
  br i1 %66, label %67, label %69

67:                                               ; preds = %214, %212, %133, %90, %80, %57
  %68 = phi i32 [ %60, %57 ], [ %.lcssa3, %80 ], [ %.lcssa3, %90 ], [ %153, %133 ], [ %.lcssa3, %214 ], [ %.lcssa3, %212 ]
  br label %57, !llvm.loop !983

69:                                               ; preds = %69, %57
  %70 = phi i32 [ %72, %69 ], [ %60, %57 ]
  %71 = mul nsw i32 %70, 1103515245
  %72 = add nsw i32 %71, 12345
  %73 = and i32 %72, 2147483647
  %74 = sitofp i32 %73 to double
  %75 = fdiv double %74, 0x41DFFFFFFFC00000
  %76 = fmul double %75, %50
  %77 = fptosi double %76 to i32
  %78 = add nsw i32 %77, 1
  %79 = icmp eq i32 %78, %51
  br i1 %79, label %69, label %80, !llvm.loop !984

80:                                               ; preds = %69
  %.lcssa3 = phi i32 [ %72, %69 ]
  %.lcssa2 = phi i32 [ %77, %69 ]
  %.lcssa = phi i32 [ %78, %69 ]
  %81 = add nsw i32 %65, 1
  %82 = icmp eq i32 %65, %.lcssa2
  br i1 %82, label %67, label %83

83:                                               ; preds = %80
  %84 = sext i32 %81 to i64
  %85 = getelementptr inbounds ptr, ptr %52, i64 %84
  %86 = load ptr, ptr %85, align 8, !tbaa !7
  %87 = icmp sgt i32 %47, %.lcssa2
  %88 = getelementptr inbounds %struct.cellbox, ptr %86, i64 0, i32 1
  %89 = load i32, ptr %88, align 8, !tbaa !378
  br i1 %87, label %212, label %90

90:                                               ; preds = %83
  %91 = icmp eq i32 %89, 0
  br i1 %91, label %92, label %67

92:                                               ; preds = %90
  %93 = getelementptr inbounds %struct.cellbox, ptr %86, i64 0, i32 2
  %94 = load i32, ptr %93, align 4, !tbaa !164
  %95 = getelementptr inbounds %struct.cellbox, ptr %86, i64 0, i32 3
  %96 = load i32, ptr %95, align 8, !tbaa !165
  %97 = sub nsw i32 %94, %24
  %98 = icmp sgt i32 %53, %97
  br i1 %98, label %99, label %102

99:                                               ; preds = %92
  %100 = sub nsw i32 %53, %94
  %101 = sdiv i32 %100, %29
  br label %110

102:                                              ; preds = %92
  %103 = icmp sgt i32 %54, %97
  br i1 %103, label %107, label %104

104:                                              ; preds = %102
  %105 = sub nsw i32 %54, %94
  %106 = sdiv i32 %105, %29
  br label %110

107:                                              ; preds = %102
  %108 = sdiv i32 %24, %29
  %109 = sub nsw i32 0, %108
  br label %110

110:                                              ; preds = %107, %104, %99
  %111 = phi i32 [ %101, %99 ], [ %106, %104 ], [ %109, %107 ]
  %112 = add nsw i32 %94, %24
  %113 = icmp slt i32 %54, %112
  %114 = sub nsw i32 %54, %94
  %115 = icmp slt i32 %53, %112
  %116 = sub nsw i32 %53, %94
  %117 = select i1 %115, i32 %24, i32 %116
  %118 = select i1 %113, i32 %114, i32 %117
  %119 = sdiv i32 %118, %29
  %120 = sub nsw i32 %96, %28
  %121 = icmp sgt i32 %55, %120
  br i1 %121, label %122, label %125

122:                                              ; preds = %110
  %123 = sub nsw i32 %55, %96
  %124 = sdiv i32 %123, %30
  br label %133

125:                                              ; preds = %110
  %126 = icmp sgt i32 %56, %120
  br i1 %126, label %130, label %127

127:                                              ; preds = %125
  %128 = sub nsw i32 %56, %96
  %129 = sdiv i32 %128, %30
  br label %133

130:                                              ; preds = %125
  %131 = sdiv i32 %28, %30
  %132 = sub nsw i32 0, %131
  br label %133

133:                                              ; preds = %130, %127, %122
  %134 = phi i32 [ %124, %122 ], [ %129, %127 ], [ %132, %130 ]
  %135 = add nsw i32 %96, %28
  %136 = icmp slt i32 %56, %135
  %137 = sub nsw i32 %56, %96
  %138 = icmp slt i32 %55, %135
  %139 = sub nsw i32 %55, %96
  %140 = select i1 %138, i32 %28, i32 %139
  %141 = select i1 %136, i32 %137, i32 %140
  %142 = sdiv i32 %141, %30
  %143 = mul nsw i32 %.lcssa3, 1103515245
  %144 = add nsw i32 %143, 12345
  %145 = insertelement <2 x i32> poison, i32 %142, i64 0
  %146 = insertelement <2 x i32> %145, i32 %119, i64 1
  %147 = insertelement <2 x i32> poison, i32 %134, i64 0
  %148 = insertelement <2 x i32> %147, i32 %111, i64 1
  %149 = sub <2 x i32> %146, %148
  %150 = add <2 x i32> %149, <i32 1, i32 1>
  %151 = sitofp <2 x i32> %150 to <2 x double>
  %152 = mul nsw i32 %144, 1103515245
  %153 = add nsw i32 %152, 12345
  %154 = insertelement <2 x i32> poison, i32 %153, i64 0
  %155 = insertelement <2 x i32> %154, i32 %144, i64 1
  %156 = and <2 x i32> %155, <i32 2147483647, i32 2147483647>
  %157 = sitofp <2 x i32> %156 to <2 x double>
  %158 = fdiv <2 x double> %157, <double 0x41DFFFFFFFC00000, double 0x41DFFFFFFFC00000>
  %159 = fmul <2 x double> %158, %151
  %160 = fptosi <2 x double> %159 to <2 x i32>
  %161 = add nsw <2 x i32> %148, %160
  %162 = icmp eq <2 x i32> %161, zeroinitializer
  %163 = extractelement <2 x i1> %162, i64 0
  %164 = extractelement <2 x i1> %162, i64 1
  %165 = select i1 %164, i1 %163, i1 false
  br i1 %165, label %67, label %166

166:                                              ; preds = %133
  %.lcssa11 = phi ptr [ %86, %133 ]
  %.lcssa9 = phi i32 [ %81, %133 ]
  %.lcssa8 = phi i32 [ %153, %133 ]
  %.lcssa7 = phi <2 x i32> [ %161, %133 ]
  %.lcssa6 = phi i32 [ %94, %133 ]
  %.lcssa5 = phi i32 [ %96, %133 ]
  %167 = getelementptr inbounds %struct.cellbox, ptr %.lcssa11, i64 0, i32 5
  %168 = load i32, ptr %167, align 8, !tbaa !45
  store i32 %.lcssa8, ptr @randVar, align 4, !tbaa !17
  %169 = extractelement <2 x i32> %.lcssa7, i64 1
  %170 = mul nsw i32 %169, %29
  %171 = add nsw i32 %170, %.lcssa6
  %172 = extractelement <2 x i32> %.lcssa7, i64 0
  %173 = mul nsw i32 %172, %30
  %174 = add nsw i32 %173, %.lcssa5
  %175 = load i32, ptr @gridGiven, align 4, !tbaa !17
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %195, label %177

177:                                              ; preds = %166
  %178 = sext i32 %168 to i64
  %179 = getelementptr inbounds %struct.cellbox, ptr %.lcssa11, i64 0, i32 21, i64 %178
  %180 = load ptr, ptr %179, align 8, !tbaa !7
  %181 = getelementptr inbounds %struct.tilebox, ptr %180, i64 0, i32 17
  %182 = load ptr, ptr %181, align 8, !tbaa !47
  %183 = getelementptr inbounds %struct.termbox, ptr %182, i64 0, i32 1
  %184 = load i32, ptr %183, align 8, !tbaa !51
  %185 = add nsw i32 %184, %171
  %186 = getelementptr inbounds %struct.termbox, ptr %182, i64 0, i32 2
  %187 = load i32, ptr %186, align 4, !tbaa !52
  %188 = add nsw i32 %187, %174
  tail call void @forceGrid(i32 noundef %185, i32 noundef %188) #44
  %189 = load i32, ptr @newxx, align 4, !tbaa !17
  %190 = load i32, ptr %183, align 8, !tbaa !51
  %191 = sub nsw i32 %189, %190
  %192 = load i32, ptr @newyy, align 4, !tbaa !17
  %193 = load i32, ptr %186, align 4, !tbaa !52
  %194 = sub nsw i32 %192, %193
  br label %195

195:                                              ; preds = %177, %166
  %196 = phi i32 [ %194, %177 ], [ %174, %166 ]
  %197 = phi i32 [ %191, %177 ], [ %171, %166 ]
  %198 = tail call i32 @usite1(i32 noundef %.lcssa9, i32 noundef %197, i32 noundef %196) #44
  %199 = icmp eq i32 %198, 0
  br i1 %199, label %200, label %367

200:                                              ; preds = %195
  %201 = tail call i32 @newOrient(ptr noundef nonnull %.lcssa11, i32 noundef 4) #44
  %202 = icmp sgt i32 %201, -1
  br i1 %202, label %203, label %206

203:                                              ; preds = %200
  %204 = tail call i32 @usiteo1(i32 noundef %.lcssa9, i32 noundef %197, i32 noundef %196, i32 noundef %201) #44
  %205 = icmp eq i32 %204, 0
  br i1 %205, label %206, label %367

206:                                              ; preds = %203, %200
  %207 = tail call i32 @newOrient(ptr noundef nonnull %.lcssa11, i32 noundef 8) #44
  %208 = icmp sgt i32 %207, -1
  br i1 %208, label %209, label %377

209:                                              ; preds = %206
  %210 = tail call i32 @usite0(i32 noundef %.lcssa9, i32 noundef %207) #44
  %211 = icmp eq i32 %210, 0
  br i1 %211, label %377, label %367

212:                                              ; preds = %83
  %213 = icmp eq i32 %89, -1
  br i1 %213, label %67, label %214

214:                                              ; preds = %212
  %215 = sext i32 %.lcssa to i64
  %216 = getelementptr inbounds ptr, ptr %52, i64 %215
  %217 = load ptr, ptr %216, align 8, !tbaa !7
  %218 = getelementptr inbounds %struct.cellbox, ptr %217, i64 0, i32 1
  %219 = load i32, ptr %218, align 8, !tbaa !378
  %220 = icmp ne i32 %219, -1
  %221 = icmp eq i32 %89, %219
  %222 = and i1 %220, %221
  br i1 %222, label %223, label %67

223:                                              ; preds = %214
  %.lcssa14 = phi i64 [ %215, %214 ]
  %.lcssa13 = phi ptr [ %217, %214 ]
  %.lcssa12 = phi ptr [ %86, %214 ]
  %.lcssa10 = phi i32 [ %81, %214 ]
  %.lcssa3.lcssa4 = phi i32 [ %.lcssa3, %214 ]
  %.lcssa.lcssa1 = phi i32 [ %.lcssa, %214 ]
  %224 = getelementptr inbounds %struct.cellbox, ptr %.lcssa12, i64 0, i32 5
  %225 = load i32, ptr %224, align 8, !tbaa !45
  store i32 %.lcssa3.lcssa4, ptr @randVar, align 4, !tbaa !17
  %226 = load i32, ptr @gridGiven, align 4, !tbaa !17
  %227 = icmp eq i32 %226, 0
  br i1 %227, label %273, label %228

228:                                              ; preds = %223
  %229 = getelementptr inbounds %struct.cellbox, ptr %.lcssa13, i64 0, i32 5
  %230 = load i32, ptr %229, align 8, !tbaa !45
  %231 = sext i32 %230 to i64
  %232 = getelementptr inbounds %struct.cellbox, ptr %.lcssa13, i64 0, i32 21, i64 %231
  %233 = load ptr, ptr %232, align 8, !tbaa !7
  %234 = getelementptr inbounds %struct.tilebox, ptr %233, i64 0, i32 17
  %235 = load ptr, ptr %234, align 8, !tbaa !47
  %236 = sext i32 %225 to i64
  %237 = getelementptr inbounds %struct.cellbox, ptr %.lcssa12, i64 0, i32 21, i64 %236
  %238 = load ptr, ptr %237, align 8, !tbaa !7
  %239 = getelementptr inbounds %struct.tilebox, ptr %238, i64 0, i32 17
  %240 = load ptr, ptr %239, align 8, !tbaa !47
  %241 = getelementptr inbounds %struct.cellbox, ptr %.lcssa13, i64 0, i32 2
  %242 = load i32, ptr %241, align 4, !tbaa !164
  %243 = getelementptr inbounds %struct.termbox, ptr %240, i64 0, i32 1
  %244 = load i32, ptr %243, align 8, !tbaa !51
  %245 = add nsw i32 %244, %242
  %246 = getelementptr inbounds %struct.cellbox, ptr %.lcssa13, i64 0, i32 3
  %247 = load i32, ptr %246, align 8, !tbaa !165
  %248 = getelementptr inbounds %struct.termbox, ptr %240, i64 0, i32 2
  %249 = load i32, ptr %248, align 4, !tbaa !52
  %250 = add nsw i32 %249, %247
  tail call void @forceGrid(i32 noundef %245, i32 noundef %250) #44
  %251 = load i32, ptr @newxx, align 4, !tbaa !17
  %252 = load i32, ptr %243, align 8, !tbaa !51
  %253 = sub nsw i32 %251, %252
  %254 = load i32, ptr @newyy, align 4, !tbaa !17
  %255 = load i32, ptr %248, align 4, !tbaa !52
  %256 = sub nsw i32 %254, %255
  %257 = getelementptr inbounds %struct.cellbox, ptr %.lcssa12, i64 0, i32 2
  %258 = load i32, ptr %257, align 4, !tbaa !164
  %259 = getelementptr inbounds %struct.termbox, ptr %235, i64 0, i32 1
  %260 = load i32, ptr %259, align 8, !tbaa !51
  %261 = add nsw i32 %260, %258
  %262 = getelementptr inbounds %struct.cellbox, ptr %.lcssa12, i64 0, i32 3
  %263 = load i32, ptr %262, align 8, !tbaa !165
  %264 = getelementptr inbounds %struct.termbox, ptr %235, i64 0, i32 2
  %265 = load i32, ptr %264, align 4, !tbaa !52
  %266 = add nsw i32 %265, %263
  tail call void @forceGrid(i32 noundef %261, i32 noundef %266) #44
  %267 = load i32, ptr @newxx, align 4, !tbaa !17
  %268 = load i32, ptr %259, align 8, !tbaa !51
  %269 = sub nsw i32 %267, %268
  %270 = load i32, ptr @newyy, align 4, !tbaa !17
  %271 = load i32, ptr %264, align 4, !tbaa !52
  %272 = sub nsw i32 %270, %271
  br label %282

273:                                              ; preds = %223
  %274 = getelementptr inbounds %struct.cellbox, ptr %.lcssa13, i64 0, i32 2
  %275 = load i32, ptr %274, align 4, !tbaa !164
  %276 = getelementptr inbounds %struct.cellbox, ptr %.lcssa13, i64 0, i32 3
  %277 = load i32, ptr %276, align 8, !tbaa !165
  %278 = getelementptr inbounds %struct.cellbox, ptr %.lcssa12, i64 0, i32 2
  %279 = load i32, ptr %278, align 4, !tbaa !164
  %280 = getelementptr inbounds %struct.cellbox, ptr %.lcssa12, i64 0, i32 3
  %281 = load i32, ptr %280, align 8, !tbaa !165
  br label %282

282:                                              ; preds = %273, %228
  %283 = phi i32 [ %253, %228 ], [ %275, %273 ]
  %284 = phi i32 [ %256, %228 ], [ %277, %273 ]
  %285 = phi i32 [ %269, %228 ], [ %279, %273 ]
  %286 = phi i32 [ %272, %228 ], [ %281, %273 ]
  %287 = tail call i32 @usite2(i32 noundef %.lcssa10, i32 noundef %.lcssa.lcssa1, i32 noundef %283, i32 noundef %284, i32 noundef %285, i32 noundef %286) #44
  %288 = icmp eq i32 %287, 0
  br i1 %288, label %289, label %367

289:                                              ; preds = %282
  %290 = tail call i32 @newOrient(ptr noundef nonnull %.lcssa12, i32 noundef 4) #44
  %291 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %292 = getelementptr inbounds ptr, ptr %291, i64 %.lcssa14
  %293 = load ptr, ptr %292, align 8, !tbaa !7
  %294 = getelementptr inbounds %struct.cellbox, ptr %293, i64 0, i32 5
  %295 = load i32, ptr %294, align 8, !tbaa !45
  %296 = tail call i32 @newOrient(ptr noundef %293, i32 noundef 4) #44
  %297 = icmp sgt i32 %290, -1
  %298 = icmp sgt i32 %296, -1
  %299 = select i1 %297, i1 true, i1 %298
  br i1 %299, label %300, label %377

300:                                              ; preds = %289
  %301 = icmp slt i32 %290, 0
  %302 = icmp slt i32 %296, 0
  %303 = select i1 %302, i32 %295, i32 %296
  %304 = select i1 %301, i32 %225, i32 %290
  %305 = select i1 %301, i32 %296, i32 %303
  %306 = load i32, ptr @gridGiven, align 4, !tbaa !17
  %307 = icmp eq i32 %306, 0
  br i1 %307, label %351, label %308

308:                                              ; preds = %300
  %309 = sext i32 %305 to i64
  %310 = getelementptr inbounds %struct.cellbox, ptr %.lcssa13, i64 0, i32 21, i64 %309
  %311 = load ptr, ptr %310, align 8, !tbaa !7
  %312 = getelementptr inbounds %struct.tilebox, ptr %311, i64 0, i32 17
  %313 = load ptr, ptr %312, align 8, !tbaa !47
  %314 = sext i32 %304 to i64
  %315 = getelementptr inbounds %struct.cellbox, ptr %.lcssa12, i64 0, i32 21, i64 %314
  %316 = load ptr, ptr %315, align 8, !tbaa !7
  %317 = getelementptr inbounds %struct.tilebox, ptr %316, i64 0, i32 17
  %318 = load ptr, ptr %317, align 8, !tbaa !47
  %319 = getelementptr inbounds %struct.cellbox, ptr %.lcssa13, i64 0, i32 2
  %320 = load i32, ptr %319, align 4, !tbaa !164
  %321 = getelementptr inbounds %struct.termbox, ptr %318, i64 0, i32 1
  %322 = load i32, ptr %321, align 8, !tbaa !51
  %323 = add nsw i32 %322, %320
  %324 = getelementptr inbounds %struct.cellbox, ptr %.lcssa13, i64 0, i32 3
  %325 = load i32, ptr %324, align 8, !tbaa !165
  %326 = getelementptr inbounds %struct.termbox, ptr %318, i64 0, i32 2
  %327 = load i32, ptr %326, align 4, !tbaa !52
  %328 = add nsw i32 %327, %325
  tail call void @forceGrid(i32 noundef %323, i32 noundef %328) #44
  %329 = load i32, ptr @newxx, align 4, !tbaa !17
  %330 = load i32, ptr %321, align 8, !tbaa !51
  %331 = sub nsw i32 %329, %330
  %332 = load i32, ptr @newyy, align 4, !tbaa !17
  %333 = load i32, ptr %326, align 4, !tbaa !52
  %334 = sub nsw i32 %332, %333
  %335 = getelementptr inbounds %struct.cellbox, ptr %.lcssa12, i64 0, i32 2
  %336 = load i32, ptr %335, align 4, !tbaa !164
  %337 = getelementptr inbounds %struct.termbox, ptr %313, i64 0, i32 1
  %338 = load i32, ptr %337, align 8, !tbaa !51
  %339 = add nsw i32 %338, %336
  %340 = getelementptr inbounds %struct.cellbox, ptr %.lcssa12, i64 0, i32 3
  %341 = load i32, ptr %340, align 8, !tbaa !165
  %342 = getelementptr inbounds %struct.termbox, ptr %313, i64 0, i32 2
  %343 = load i32, ptr %342, align 4, !tbaa !52
  %344 = add nsw i32 %343, %341
  tail call void @forceGrid(i32 noundef %339, i32 noundef %344) #44
  %345 = load i32, ptr @newxx, align 4, !tbaa !17
  %346 = load i32, ptr %337, align 8, !tbaa !51
  %347 = sub nsw i32 %345, %346
  %348 = load i32, ptr @newyy, align 4, !tbaa !17
  %349 = load i32, ptr %342, align 4, !tbaa !52
  %350 = sub nsw i32 %348, %349
  br label %360

351:                                              ; preds = %300
  %352 = getelementptr inbounds %struct.cellbox, ptr %.lcssa13, i64 0, i32 2
  %353 = load i32, ptr %352, align 4, !tbaa !164
  %354 = getelementptr inbounds %struct.cellbox, ptr %.lcssa13, i64 0, i32 3
  %355 = load i32, ptr %354, align 8, !tbaa !165
  %356 = getelementptr inbounds %struct.cellbox, ptr %.lcssa12, i64 0, i32 2
  %357 = load i32, ptr %356, align 4, !tbaa !164
  %358 = getelementptr inbounds %struct.cellbox, ptr %.lcssa12, i64 0, i32 3
  %359 = load i32, ptr %358, align 8, !tbaa !165
  br label %360

360:                                              ; preds = %351, %308
  %361 = phi i32 [ %331, %308 ], [ %353, %351 ]
  %362 = phi i32 [ %334, %308 ], [ %355, %351 ]
  %363 = phi i32 [ %347, %308 ], [ %357, %351 ]
  %364 = phi i32 [ %350, %308 ], [ %359, %351 ]
  %365 = tail call i32 @usiteo2(i32 noundef %.lcssa10, i32 noundef %.lcssa.lcssa1, i32 noundef %361, i32 noundef %362, i32 noundef %363, i32 noundef %364, i32 noundef %304, i32 noundef %305) #44
  %366 = icmp eq i32 %365, 0
  br i1 %366, label %377, label %367

367:                                              ; preds = %360, %282, %209, %203, %195
  %368 = add nsw i32 %45, 1
  %369 = load i32, ptr @funccost, align 4, !tbaa !17
  %370 = sitofp i32 %369 to double
  %371 = load double, ptr @totFunc, align 8, !tbaa !36
  %372 = fadd double %371, %370
  store double %372, ptr @totFunc, align 8, !tbaa !36
  %373 = load i32, ptr @penalty, align 4, !tbaa !17
  %374 = sitofp i32 %373 to double
  %375 = load double, ptr @totPen, align 8, !tbaa !36
  %376 = fadd double %375, %374
  store double %376, ptr @totPen, align 8, !tbaa !36
  br label %377

377:                                              ; preds = %367, %360, %289, %209, %206
  %378 = phi i32 [ %45, %209 ], [ %45, %206 ], [ %45, %360 ], [ %45, %289 ], [ %368, %367 ]
  %379 = icmp slt i32 %378, %0
  br i1 %379, label %44, label %380, !llvm.loop !985

380:                                              ; preds = %377, %1
  %381 = phi i32 [ 0, %1 ], [ %378, %377 ]
  ret i32 %381
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @testloop(i32 noundef %0) #0 {
  store double 0.000000e+00, ptr @totFunc, align 8, !tbaa !36
  %2 = load double, ptr @T, align 8, !tbaa !36
  %3 = tail call double @log10(double noundef %2) #44
  %4 = fmul double %3, 2.000000e+00
  %5 = tail call double @exp2(double %4) #47
  %6 = load i32, ptr @bdxlength, align 4, !tbaa !17
  %7 = load double, ptr @T, align 8, !tbaa !36
  %8 = tail call double @log10(double noundef %7) #44
  %9 = fmul double %8, 2.000000e+00
  %10 = tail call double @exp2(double %9) #47
  %11 = load i32, ptr @bdylength, align 4, !tbaa !17
  %12 = insertelement <2 x double> poison, double %10, i64 0
  %13 = insertelement <2 x double> %12, double %5, i64 1
  %14 = fmul <2 x double> %13, <double 0x3F50000000000000, double 0x3F50000000000000>
  %15 = insertelement <2 x i32> poison, i32 %11, i64 0
  %16 = insertelement <2 x i32> %15, i32 %6, i64 1
  %17 = sitofp <2 x i32> %16 to <2 x double>
  %18 = fmul <2 x double> %14, %17
  %19 = fptosi <2 x double> %18 to <2 x i32>
  %20 = extractelement <2 x i32> %19, i64 1
  %21 = tail call i32 @llvm.smin.i32(i32 %6, i32 %20)
  %22 = icmp slt <2 x i32> %19, <i32 3, i32 3>
  %23 = extractelement <2 x i1> %22, i64 1
  %24 = select i1 %23, i32 3, i32 %21
  %25 = extractelement <2 x i32> %19, i64 0
  %26 = tail call i32 @llvm.smin.i32(i32 %11, i32 %25)
  %27 = extractelement <2 x i1> %22, i64 0
  %28 = select i1 %27, i32 3, i32 %26
  %29 = sdiv i32 %24, 3
  %30 = sdiv i32 %28, 3
  %31 = load ptr, ptr @fpo, align 8, !tbaa !7
  %32 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %31, ptr noundef nonnull @.str.848, i32 noundef %24) #43
  %33 = load ptr, ptr @fpo, align 8, !tbaa !7
  %34 = load i32, ptr @bdxlength, align 4, !tbaa !17
  %35 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %33, ptr noundef nonnull @.str.1.849, i32 noundef %34) #43
  %36 = load ptr, ptr @fpo, align 8, !tbaa !7
  %37 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %36, ptr noundef nonnull @.str.2.850, i32 noundef %28) #43
  %38 = load ptr, ptr @fpo, align 8, !tbaa !7
  %39 = load i32, ptr @bdylength, align 4, !tbaa !17
  %40 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %38, ptr noundef nonnull @.str.3.851, i32 noundef %39) #43
  %41 = load ptr, ptr @fpo, align 8, !tbaa !7
  %42 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %41, ptr noundef nonnull @.str.4.852, i32 noundef %29, i32 noundef %30) #43
  %43 = icmp sgt i32 %0, 0
  br i1 %43, label %44, label %376

44:                                               ; preds = %373, %1
  %45 = phi i32 [ %374, %373 ], [ 0, %1 ]
  %46 = load i32, ptr @randVar, align 4, !tbaa !17
  %47 = load i32, ptr @numcells, align 4, !tbaa !17
  %48 = sitofp i32 %47 to double
  %49 = load i32, ptr @bigcell, align 4, !tbaa !17
  %50 = sitofp i32 %49 to double
  %51 = load i32, ptr @toobig, align 4, !tbaa !17
  %52 = load ptr, ptr @cellarray, align 8
  %53 = load i32, ptr @blockl, align 4
  %54 = load i32, ptr @blockr, align 4
  %55 = load i32, ptr @blockb, align 4
  %56 = load i32, ptr @blockt, align 4
  br label %57

57:                                               ; preds = %67, %44
  %58 = phi i32 [ %46, %44 ], [ %68, %67 ]
  %59 = mul nsw i32 %58, 1103515245
  %60 = add nsw i32 %59, 12345
  %61 = and i32 %60, 2147483647
  %62 = sitofp i32 %61 to double
  %63 = fdiv double %62, 0x41DFFFFFFFC00000
  %64 = fmul double %63, %48
  %65 = fptosi double %64 to i32
  %66 = icmp eq i32 %47, %65
  br i1 %66, label %67, label %69

67:                                               ; preds = %214, %212, %133, %90, %80, %57
  %68 = phi i32 [ %60, %57 ], [ %.lcssa3, %80 ], [ %.lcssa3, %90 ], [ %153, %133 ], [ %.lcssa3, %214 ], [ %.lcssa3, %212 ]
  br label %57, !llvm.loop !986

69:                                               ; preds = %69, %57
  %70 = phi i32 [ %72, %69 ], [ %60, %57 ]
  %71 = mul nsw i32 %70, 1103515245
  %72 = add nsw i32 %71, 12345
  %73 = and i32 %72, 2147483647
  %74 = sitofp i32 %73 to double
  %75 = fdiv double %74, 0x41DFFFFFFFC00000
  %76 = fmul double %75, %50
  %77 = fptosi double %76 to i32
  %78 = add nsw i32 %77, 1
  %79 = icmp eq i32 %78, %51
  br i1 %79, label %69, label %80, !llvm.loop !987

80:                                               ; preds = %69
  %.lcssa3 = phi i32 [ %72, %69 ]
  %.lcssa2 = phi i32 [ %77, %69 ]
  %.lcssa = phi i32 [ %78, %69 ]
  %81 = add nsw i32 %65, 1
  %82 = icmp eq i32 %65, %.lcssa2
  br i1 %82, label %67, label %83

83:                                               ; preds = %80
  %84 = sext i32 %81 to i64
  %85 = getelementptr inbounds ptr, ptr %52, i64 %84
  %86 = load ptr, ptr %85, align 8, !tbaa !7
  %87 = icmp sgt i32 %47, %.lcssa2
  %88 = getelementptr inbounds %struct.cellbox, ptr %86, i64 0, i32 1
  %89 = load i32, ptr %88, align 8, !tbaa !378
  br i1 %87, label %212, label %90

90:                                               ; preds = %83
  %91 = icmp eq i32 %89, 0
  br i1 %91, label %92, label %67

92:                                               ; preds = %90
  %93 = getelementptr inbounds %struct.cellbox, ptr %86, i64 0, i32 2
  %94 = load i32, ptr %93, align 4, !tbaa !164
  %95 = getelementptr inbounds %struct.cellbox, ptr %86, i64 0, i32 3
  %96 = load i32, ptr %95, align 8, !tbaa !165
  %97 = sub nsw i32 %94, %24
  %98 = icmp sgt i32 %53, %97
  br i1 %98, label %99, label %102

99:                                               ; preds = %92
  %100 = sub nsw i32 %53, %94
  %101 = sdiv i32 %100, %29
  br label %110

102:                                              ; preds = %92
  %103 = icmp sgt i32 %54, %97
  br i1 %103, label %107, label %104

104:                                              ; preds = %102
  %105 = sub nsw i32 %54, %94
  %106 = sdiv i32 %105, %29
  br label %110

107:                                              ; preds = %102
  %108 = sdiv i32 %24, %29
  %109 = sub nsw i32 0, %108
  br label %110

110:                                              ; preds = %107, %104, %99
  %111 = phi i32 [ %101, %99 ], [ %106, %104 ], [ %109, %107 ]
  %112 = add nsw i32 %94, %24
  %113 = icmp slt i32 %54, %112
  %114 = sub nsw i32 %54, %94
  %115 = icmp slt i32 %53, %112
  %116 = sub nsw i32 %53, %94
  %117 = select i1 %115, i32 %24, i32 %116
  %118 = select i1 %113, i32 %114, i32 %117
  %119 = sdiv i32 %118, %29
  %120 = sub nsw i32 %96, %28
  %121 = icmp sgt i32 %55, %120
  br i1 %121, label %122, label %125

122:                                              ; preds = %110
  %123 = sub nsw i32 %55, %96
  %124 = sdiv i32 %123, %30
  br label %133

125:                                              ; preds = %110
  %126 = icmp sgt i32 %56, %120
  br i1 %126, label %130, label %127

127:                                              ; preds = %125
  %128 = sub nsw i32 %56, %96
  %129 = sdiv i32 %128, %30
  br label %133

130:                                              ; preds = %125
  %131 = sdiv i32 %28, %30
  %132 = sub nsw i32 0, %131
  br label %133

133:                                              ; preds = %130, %127, %122
  %134 = phi i32 [ %124, %122 ], [ %129, %127 ], [ %132, %130 ]
  %135 = add nsw i32 %96, %28
  %136 = icmp slt i32 %56, %135
  %137 = sub nsw i32 %56, %96
  %138 = icmp slt i32 %55, %135
  %139 = sub nsw i32 %55, %96
  %140 = select i1 %138, i32 %28, i32 %139
  %141 = select i1 %136, i32 %137, i32 %140
  %142 = sdiv i32 %141, %30
  %143 = mul nsw i32 %.lcssa3, 1103515245
  %144 = add nsw i32 %143, 12345
  %145 = insertelement <2 x i32> poison, i32 %142, i64 0
  %146 = insertelement <2 x i32> %145, i32 %119, i64 1
  %147 = insertelement <2 x i32> poison, i32 %134, i64 0
  %148 = insertelement <2 x i32> %147, i32 %111, i64 1
  %149 = sub <2 x i32> %146, %148
  %150 = add <2 x i32> %149, <i32 1, i32 1>
  %151 = sitofp <2 x i32> %150 to <2 x double>
  %152 = mul nsw i32 %144, 1103515245
  %153 = add nsw i32 %152, 12345
  %154 = insertelement <2 x i32> poison, i32 %153, i64 0
  %155 = insertelement <2 x i32> %154, i32 %144, i64 1
  %156 = and <2 x i32> %155, <i32 2147483647, i32 2147483647>
  %157 = sitofp <2 x i32> %156 to <2 x double>
  %158 = fdiv <2 x double> %157, <double 0x41DFFFFFFFC00000, double 0x41DFFFFFFFC00000>
  %159 = fmul <2 x double> %158, %151
  %160 = fptosi <2 x double> %159 to <2 x i32>
  %161 = add nsw <2 x i32> %148, %160
  %162 = icmp eq <2 x i32> %161, zeroinitializer
  %163 = extractelement <2 x i1> %162, i64 0
  %164 = extractelement <2 x i1> %162, i64 1
  %165 = select i1 %164, i1 %163, i1 false
  br i1 %165, label %67, label %166

166:                                              ; preds = %133
  %.lcssa11 = phi ptr [ %86, %133 ]
  %.lcssa9 = phi i32 [ %81, %133 ]
  %.lcssa8 = phi i32 [ %153, %133 ]
  %.lcssa7 = phi <2 x i32> [ %161, %133 ]
  %.lcssa6 = phi i32 [ %94, %133 ]
  %.lcssa5 = phi i32 [ %96, %133 ]
  %167 = getelementptr inbounds %struct.cellbox, ptr %.lcssa11, i64 0, i32 5
  %168 = load i32, ptr %167, align 8, !tbaa !45
  store i32 %.lcssa8, ptr @randVar, align 4, !tbaa !17
  %169 = extractelement <2 x i32> %.lcssa7, i64 1
  %170 = mul nsw i32 %169, %29
  %171 = add nsw i32 %170, %.lcssa6
  %172 = extractelement <2 x i32> %.lcssa7, i64 0
  %173 = mul nsw i32 %172, %30
  %174 = add nsw i32 %173, %.lcssa5
  %175 = load i32, ptr @gridGiven, align 4, !tbaa !17
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %195, label %177

177:                                              ; preds = %166
  %178 = sext i32 %168 to i64
  %179 = getelementptr inbounds %struct.cellbox, ptr %.lcssa11, i64 0, i32 21, i64 %178
  %180 = load ptr, ptr %179, align 8, !tbaa !7
  %181 = getelementptr inbounds %struct.tilebox, ptr %180, i64 0, i32 17
  %182 = load ptr, ptr %181, align 8, !tbaa !47
  %183 = getelementptr inbounds %struct.termbox, ptr %182, i64 0, i32 1
  %184 = load i32, ptr %183, align 8, !tbaa !51
  %185 = add nsw i32 %184, %171
  %186 = getelementptr inbounds %struct.termbox, ptr %182, i64 0, i32 2
  %187 = load i32, ptr %186, align 4, !tbaa !52
  %188 = add nsw i32 %187, %174
  tail call void @forceGrid(i32 noundef %185, i32 noundef %188) #44
  %189 = load i32, ptr @newxx, align 4, !tbaa !17
  %190 = load i32, ptr %183, align 8, !tbaa !51
  %191 = sub nsw i32 %189, %190
  %192 = load i32, ptr @newyy, align 4, !tbaa !17
  %193 = load i32, ptr %186, align 4, !tbaa !52
  %194 = sub nsw i32 %192, %193
  br label %195

195:                                              ; preds = %177, %166
  %196 = phi i32 [ %194, %177 ], [ %174, %166 ]
  %197 = phi i32 [ %191, %177 ], [ %171, %166 ]
  %198 = tail call i32 @usite1(i32 noundef %.lcssa9, i32 noundef %197, i32 noundef %196) #44
  %199 = icmp eq i32 %198, 0
  br i1 %199, label %200, label %367

200:                                              ; preds = %195
  %201 = tail call i32 @newOrient(ptr noundef nonnull %.lcssa11, i32 noundef 4) #44
  %202 = icmp sgt i32 %201, -1
  br i1 %202, label %203, label %206

203:                                              ; preds = %200
  %204 = tail call i32 @usiteo1(i32 noundef %.lcssa9, i32 noundef %197, i32 noundef %196, i32 noundef %201) #44
  %205 = icmp eq i32 %204, 0
  br i1 %205, label %206, label %367

206:                                              ; preds = %203, %200
  %207 = tail call i32 @newOrient(ptr noundef nonnull %.lcssa11, i32 noundef 8) #44
  %208 = icmp sgt i32 %207, -1
  br i1 %208, label %209, label %373

209:                                              ; preds = %206
  %210 = tail call i32 @usite0(i32 noundef %.lcssa9, i32 noundef %207) #44
  %211 = icmp eq i32 %210, 0
  br i1 %211, label %373, label %367

212:                                              ; preds = %83
  %213 = icmp eq i32 %89, -1
  br i1 %213, label %67, label %214

214:                                              ; preds = %212
  %215 = sext i32 %.lcssa to i64
  %216 = getelementptr inbounds ptr, ptr %52, i64 %215
  %217 = load ptr, ptr %216, align 8, !tbaa !7
  %218 = getelementptr inbounds %struct.cellbox, ptr %217, i64 0, i32 1
  %219 = load i32, ptr %218, align 8, !tbaa !378
  %220 = icmp ne i32 %219, -1
  %221 = icmp eq i32 %89, %219
  %222 = and i1 %220, %221
  br i1 %222, label %223, label %67

223:                                              ; preds = %214
  %.lcssa14 = phi i64 [ %215, %214 ]
  %.lcssa13 = phi ptr [ %217, %214 ]
  %.lcssa12 = phi ptr [ %86, %214 ]
  %.lcssa10 = phi i32 [ %81, %214 ]
  %.lcssa3.lcssa4 = phi i32 [ %.lcssa3, %214 ]
  %.lcssa.lcssa1 = phi i32 [ %.lcssa, %214 ]
  %224 = getelementptr inbounds %struct.cellbox, ptr %.lcssa12, i64 0, i32 5
  %225 = load i32, ptr %224, align 8, !tbaa !45
  store i32 %.lcssa3.lcssa4, ptr @randVar, align 4, !tbaa !17
  %226 = load i32, ptr @gridGiven, align 4, !tbaa !17
  %227 = icmp eq i32 %226, 0
  br i1 %227, label %273, label %228

228:                                              ; preds = %223
  %229 = getelementptr inbounds %struct.cellbox, ptr %.lcssa13, i64 0, i32 5
  %230 = load i32, ptr %229, align 8, !tbaa !45
  %231 = sext i32 %230 to i64
  %232 = getelementptr inbounds %struct.cellbox, ptr %.lcssa13, i64 0, i32 21, i64 %231
  %233 = load ptr, ptr %232, align 8, !tbaa !7
  %234 = getelementptr inbounds %struct.tilebox, ptr %233, i64 0, i32 17
  %235 = load ptr, ptr %234, align 8, !tbaa !47
  %236 = sext i32 %225 to i64
  %237 = getelementptr inbounds %struct.cellbox, ptr %.lcssa12, i64 0, i32 21, i64 %236
  %238 = load ptr, ptr %237, align 8, !tbaa !7
  %239 = getelementptr inbounds %struct.tilebox, ptr %238, i64 0, i32 17
  %240 = load ptr, ptr %239, align 8, !tbaa !47
  %241 = getelementptr inbounds %struct.cellbox, ptr %.lcssa13, i64 0, i32 2
  %242 = load i32, ptr %241, align 4, !tbaa !164
  %243 = getelementptr inbounds %struct.termbox, ptr %240, i64 0, i32 1
  %244 = load i32, ptr %243, align 8, !tbaa !51
  %245 = add nsw i32 %244, %242
  %246 = getelementptr inbounds %struct.cellbox, ptr %.lcssa13, i64 0, i32 3
  %247 = load i32, ptr %246, align 8, !tbaa !165
  %248 = getelementptr inbounds %struct.termbox, ptr %240, i64 0, i32 2
  %249 = load i32, ptr %248, align 4, !tbaa !52
  %250 = add nsw i32 %249, %247
  tail call void @forceGrid(i32 noundef %245, i32 noundef %250) #44
  %251 = load i32, ptr @newxx, align 4, !tbaa !17
  %252 = load i32, ptr %243, align 8, !tbaa !51
  %253 = sub nsw i32 %251, %252
  %254 = load i32, ptr @newyy, align 4, !tbaa !17
  %255 = load i32, ptr %248, align 4, !tbaa !52
  %256 = sub nsw i32 %254, %255
  %257 = getelementptr inbounds %struct.cellbox, ptr %.lcssa12, i64 0, i32 2
  %258 = load i32, ptr %257, align 4, !tbaa !164
  %259 = getelementptr inbounds %struct.termbox, ptr %235, i64 0, i32 1
  %260 = load i32, ptr %259, align 8, !tbaa !51
  %261 = add nsw i32 %260, %258
  %262 = getelementptr inbounds %struct.cellbox, ptr %.lcssa12, i64 0, i32 3
  %263 = load i32, ptr %262, align 8, !tbaa !165
  %264 = getelementptr inbounds %struct.termbox, ptr %235, i64 0, i32 2
  %265 = load i32, ptr %264, align 4, !tbaa !52
  %266 = add nsw i32 %265, %263
  tail call void @forceGrid(i32 noundef %261, i32 noundef %266) #44
  %267 = load i32, ptr @newxx, align 4, !tbaa !17
  %268 = load i32, ptr %259, align 8, !tbaa !51
  %269 = sub nsw i32 %267, %268
  %270 = load i32, ptr @newyy, align 4, !tbaa !17
  %271 = load i32, ptr %264, align 4, !tbaa !52
  %272 = sub nsw i32 %270, %271
  br label %282

273:                                              ; preds = %223
  %274 = getelementptr inbounds %struct.cellbox, ptr %.lcssa13, i64 0, i32 2
  %275 = load i32, ptr %274, align 4, !tbaa !164
  %276 = getelementptr inbounds %struct.cellbox, ptr %.lcssa13, i64 0, i32 3
  %277 = load i32, ptr %276, align 8, !tbaa !165
  %278 = getelementptr inbounds %struct.cellbox, ptr %.lcssa12, i64 0, i32 2
  %279 = load i32, ptr %278, align 4, !tbaa !164
  %280 = getelementptr inbounds %struct.cellbox, ptr %.lcssa12, i64 0, i32 3
  %281 = load i32, ptr %280, align 8, !tbaa !165
  br label %282

282:                                              ; preds = %273, %228
  %283 = phi i32 [ %253, %228 ], [ %275, %273 ]
  %284 = phi i32 [ %256, %228 ], [ %277, %273 ]
  %285 = phi i32 [ %269, %228 ], [ %279, %273 ]
  %286 = phi i32 [ %272, %228 ], [ %281, %273 ]
  %287 = tail call i32 @usite2(i32 noundef %.lcssa10, i32 noundef %.lcssa.lcssa1, i32 noundef %283, i32 noundef %284, i32 noundef %285, i32 noundef %286) #44
  %288 = icmp eq i32 %287, 0
  br i1 %288, label %289, label %367

289:                                              ; preds = %282
  %290 = tail call i32 @newOrient(ptr noundef nonnull %.lcssa12, i32 noundef 4) #44
  %291 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %292 = getelementptr inbounds ptr, ptr %291, i64 %.lcssa14
  %293 = load ptr, ptr %292, align 8, !tbaa !7
  %294 = getelementptr inbounds %struct.cellbox, ptr %293, i64 0, i32 5
  %295 = load i32, ptr %294, align 8, !tbaa !45
  %296 = tail call i32 @newOrient(ptr noundef %293, i32 noundef 4) #44
  %297 = icmp sgt i32 %290, -1
  %298 = icmp sgt i32 %296, -1
  %299 = select i1 %297, i1 true, i1 %298
  br i1 %299, label %300, label %373

300:                                              ; preds = %289
  %301 = icmp slt i32 %290, 0
  %302 = icmp slt i32 %296, 0
  %303 = select i1 %302, i32 %295, i32 %296
  %304 = select i1 %301, i32 %225, i32 %290
  %305 = select i1 %301, i32 %296, i32 %303
  %306 = load i32, ptr @gridGiven, align 4, !tbaa !17
  %307 = icmp eq i32 %306, 0
  br i1 %307, label %351, label %308

308:                                              ; preds = %300
  %309 = sext i32 %305 to i64
  %310 = getelementptr inbounds %struct.cellbox, ptr %.lcssa13, i64 0, i32 21, i64 %309
  %311 = load ptr, ptr %310, align 8, !tbaa !7
  %312 = getelementptr inbounds %struct.tilebox, ptr %311, i64 0, i32 17
  %313 = load ptr, ptr %312, align 8, !tbaa !47
  %314 = sext i32 %304 to i64
  %315 = getelementptr inbounds %struct.cellbox, ptr %.lcssa12, i64 0, i32 21, i64 %314
  %316 = load ptr, ptr %315, align 8, !tbaa !7
  %317 = getelementptr inbounds %struct.tilebox, ptr %316, i64 0, i32 17
  %318 = load ptr, ptr %317, align 8, !tbaa !47
  %319 = getelementptr inbounds %struct.cellbox, ptr %.lcssa13, i64 0, i32 2
  %320 = load i32, ptr %319, align 4, !tbaa !164
  %321 = getelementptr inbounds %struct.termbox, ptr %318, i64 0, i32 1
  %322 = load i32, ptr %321, align 8, !tbaa !51
  %323 = add nsw i32 %322, %320
  %324 = getelementptr inbounds %struct.cellbox, ptr %.lcssa13, i64 0, i32 3
  %325 = load i32, ptr %324, align 8, !tbaa !165
  %326 = getelementptr inbounds %struct.termbox, ptr %318, i64 0, i32 2
  %327 = load i32, ptr %326, align 4, !tbaa !52
  %328 = add nsw i32 %327, %325
  tail call void @forceGrid(i32 noundef %323, i32 noundef %328) #44
  %329 = load i32, ptr @newxx, align 4, !tbaa !17
  %330 = load i32, ptr %321, align 8, !tbaa !51
  %331 = sub nsw i32 %329, %330
  %332 = load i32, ptr @newyy, align 4, !tbaa !17
  %333 = load i32, ptr %326, align 4, !tbaa !52
  %334 = sub nsw i32 %332, %333
  %335 = getelementptr inbounds %struct.cellbox, ptr %.lcssa12, i64 0, i32 2
  %336 = load i32, ptr %335, align 4, !tbaa !164
  %337 = getelementptr inbounds %struct.termbox, ptr %313, i64 0, i32 1
  %338 = load i32, ptr %337, align 8, !tbaa !51
  %339 = add nsw i32 %338, %336
  %340 = getelementptr inbounds %struct.cellbox, ptr %.lcssa12, i64 0, i32 3
  %341 = load i32, ptr %340, align 8, !tbaa !165
  %342 = getelementptr inbounds %struct.termbox, ptr %313, i64 0, i32 2
  %343 = load i32, ptr %342, align 4, !tbaa !52
  %344 = add nsw i32 %343, %341
  tail call void @forceGrid(i32 noundef %339, i32 noundef %344) #44
  %345 = load i32, ptr @newxx, align 4, !tbaa !17
  %346 = load i32, ptr %337, align 8, !tbaa !51
  %347 = sub nsw i32 %345, %346
  %348 = load i32, ptr @newyy, align 4, !tbaa !17
  %349 = load i32, ptr %342, align 4, !tbaa !52
  %350 = sub nsw i32 %348, %349
  br label %360

351:                                              ; preds = %300
  %352 = getelementptr inbounds %struct.cellbox, ptr %.lcssa13, i64 0, i32 2
  %353 = load i32, ptr %352, align 4, !tbaa !164
  %354 = getelementptr inbounds %struct.cellbox, ptr %.lcssa13, i64 0, i32 3
  %355 = load i32, ptr %354, align 8, !tbaa !165
  %356 = getelementptr inbounds %struct.cellbox, ptr %.lcssa12, i64 0, i32 2
  %357 = load i32, ptr %356, align 4, !tbaa !164
  %358 = getelementptr inbounds %struct.cellbox, ptr %.lcssa12, i64 0, i32 3
  %359 = load i32, ptr %358, align 8, !tbaa !165
  br label %360

360:                                              ; preds = %351, %308
  %361 = phi i32 [ %331, %308 ], [ %353, %351 ]
  %362 = phi i32 [ %334, %308 ], [ %355, %351 ]
  %363 = phi i32 [ %347, %308 ], [ %357, %351 ]
  %364 = phi i32 [ %350, %308 ], [ %359, %351 ]
  %365 = tail call i32 @usiteo2(i32 noundef %.lcssa10, i32 noundef %.lcssa.lcssa1, i32 noundef %361, i32 noundef %362, i32 noundef %363, i32 noundef %364, i32 noundef %304, i32 noundef %305) #44
  %366 = icmp eq i32 %365, 0
  br i1 %366, label %373, label %367

367:                                              ; preds = %360, %282, %209, %203, %195
  %368 = add nsw i32 %45, 1
  %369 = load i32, ptr @funccost, align 4, !tbaa !17
  %370 = sitofp i32 %369 to double
  %371 = load double, ptr @totFunc, align 8, !tbaa !36
  %372 = fadd double %371, %370
  store double %372, ptr @totFunc, align 8, !tbaa !36
  br label %373

373:                                              ; preds = %367, %360, %289, %209, %206
  %374 = phi i32 [ %45, %209 ], [ %45, %206 ], [ %45, %360 ], [ %45, %289 ], [ %368, %367 ]
  %375 = icmp slt i32 %374, %0
  br i1 %375, label %44, label %376, !llvm.loop !988

376:                                              ; preds = %373, %1
  %377 = phi i32 [ 0, %1 ], [ %374, %373 ]
  ret i32 %377
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @twstats() #5 {
  %1 = load ptr, ptr @fpo, align 8, !tbaa !7
  %2 = load i32, ptr @icost, align 4, !tbaa !17
  %3 = load i32, ptr @fcost, align 4, !tbaa !17
  %4 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %1, ptr noundef nonnull @.str.855, i32 noundef %2, i32 noundef %3) #43
  %5 = load i32, ptr @icost, align 4, !tbaa !17
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %17, label %7

7:                                                ; preds = %0
  %8 = load ptr, ptr @fpo, align 8, !tbaa !7
  %9 = load i32, ptr @fcost, align 4, !tbaa !17
  %10 = sitofp i32 %9 to double
  %11 = sitofp i32 %5 to double
  %12 = fdiv double %10, %11
  %13 = fmul double %12, 1.000000e+02
  %14 = fptosi double %13 to i32
  %15 = sub nsw i32 100, %14
  %16 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %8, ptr noundef nonnull @.str.1.856, i32 noundef %15) #43
  br label %17

17:                                               ; preds = %7, %0
  %18 = load ptr, ptr @fpo, align 8, !tbaa !7
  %19 = load i32, ptr @iwire, align 4, !tbaa !17
  %20 = load i32, ptr @fwire, align 4, !tbaa !17
  %21 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %18, ptr noundef nonnull @.str.2.857, i32 noundef %19, i32 noundef %20) #43
  %22 = load i32, ptr @icost, align 4, !tbaa !17
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %35, label %24

24:                                               ; preds = %17
  %25 = load ptr, ptr @fpo, align 8, !tbaa !7
  %26 = load i32, ptr @fwire, align 4, !tbaa !17
  %27 = sitofp i32 %26 to double
  %28 = load i32, ptr @iwire, align 4, !tbaa !17
  %29 = sitofp i32 %28 to double
  %30 = fdiv double %27, %29
  %31 = fmul double %30, 1.000000e+02
  %32 = fptosi double %31 to i32
  %33 = sub nsw i32 100, %32
  %34 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %25, ptr noundef nonnull @.str.3.858, i32 noundef %33) #43
  br label %35

35:                                               ; preds = %24, %17
  %36 = load ptr, ptr @fpo, align 8, !tbaa !7
  %37 = load i32, ptr @iwirex, align 4, !tbaa !17
  %38 = load i32, ptr @fwirex, align 4, !tbaa !17
  %39 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %36, ptr noundef nonnull @.str.4.859, i32 noundef %37, i32 noundef %38) #43
  %40 = load i32, ptr @iwirex, align 4, !tbaa !17
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %52, label %42

42:                                               ; preds = %35
  %43 = load ptr, ptr @fpo, align 8, !tbaa !7
  %44 = load i32, ptr @fwirex, align 4, !tbaa !17
  %45 = sitofp i32 %44 to double
  %46 = sitofp i32 %40 to double
  %47 = fdiv double %45, %46
  %48 = fmul double %47, 1.000000e+02
  %49 = fptosi double %48 to i32
  %50 = sub nsw i32 100, %49
  %51 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %43, ptr noundef nonnull @.str.5.860, i32 noundef %50) #43
  br label %52

52:                                               ; preds = %42, %35
  %53 = load ptr, ptr @fpo, align 8, !tbaa !7
  %54 = load i32, ptr @iwirey, align 4, !tbaa !17
  %55 = load i32, ptr @fwirey, align 4, !tbaa !17
  %56 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %53, ptr noundef nonnull @.str.6.861, i32 noundef %54, i32 noundef %55) #43
  %57 = load i32, ptr @iwirey, align 4, !tbaa !17
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %69, label %59

59:                                               ; preds = %52
  %60 = load ptr, ptr @fpo, align 8, !tbaa !7
  %61 = load i32, ptr @fwirey, align 4, !tbaa !17
  %62 = sitofp i32 %61 to double
  %63 = sitofp i32 %57 to double
  %64 = fdiv double %62, %63
  %65 = fmul double %64, 1.000000e+02
  %66 = fptosi double %65 to i32
  %67 = sub nsw i32 100, %66
  %68 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %60, ptr noundef nonnull @.str.7.862, i32 noundef %67) #43
  br label %69

69:                                               ; preds = %59, %52
  %70 = load ptr, ptr @fpo, align 8, !tbaa !7
  %71 = tail call i64 @fwrite(ptr nonnull @.str.8.863, i64 13, i64 1, ptr %70)
  %72 = load ptr, ptr @fpo, align 8, !tbaa !7
  %73 = load i32, ptr @numcells, align 4, !tbaa !17
  %74 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %72, ptr noundef nonnull @.str.9.864, i32 noundef %73) #43
  %75 = load ptr, ptr @fpo, align 8, !tbaa !7
  %76 = load i32, ptr @numpads, align 4, !tbaa !17
  %77 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %75, ptr noundef nonnull @.str.10.865, i32 noundef %76) #43
  %78 = load ptr, ptr @fpo, align 8, !tbaa !7
  %79 = load i32, ptr @numnets, align 4, !tbaa !17
  %80 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %78, ptr noundef nonnull @.str.11.866, i32 noundef %79) #43
  %81 = load ptr, ptr @fpo, align 8, !tbaa !7
  %82 = load i32, ptr @maxterm, align 4, !tbaa !17
  %83 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %81, ptr noundef nonnull @.str.12.867, i32 noundef %82) #43
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @uaspect(i32 noundef %0, double noundef %1) #0 {
  %3 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %4 = sext i32 %0 to i64
  %5 = getelementptr inbounds ptr, ptr %3, i64 %4
  %6 = load ptr, ptr %5, align 8, !tbaa !7
  %7 = getelementptr inbounds %struct.cellbox, ptr %6, i64 0, i32 2
  %8 = load i32, ptr %7, align 4, !tbaa !164
  %9 = getelementptr inbounds %struct.cellbox, ptr %6, i64 0, i32 3
  %10 = load i32, ptr %9, align 8, !tbaa !165
  %11 = getelementptr inbounds %struct.cellbox, ptr %6, i64 0, i32 5
  %12 = load i32, ptr %11, align 8, !tbaa !45
  %13 = getelementptr inbounds %struct.cellbox, ptr %6, i64 0, i32 21
  %14 = sext i32 %12 to i64
  %15 = getelementptr inbounds %struct.cellbox, ptr %6, i64 0, i32 21, i64 %14
  %16 = load ptr, ptr %15, align 8, !tbaa !7
  %17 = getelementptr inbounds %struct.tilebox, ptr %16, i64 0, i32 17
  %18 = load ptr, ptr %17, align 8, !tbaa !47
  %19 = getelementptr inbounds %struct.tilebox, ptr %16, i64 0, i32 13
  %20 = load i32, ptr %19, align 8, !tbaa !382
  %21 = getelementptr inbounds %struct.tilebox, ptr %16, i64 0, i32 14
  %22 = load i32, ptr %21, align 4, !tbaa !383
  %23 = getelementptr inbounds %struct.tilebox, ptr %16, i64 0, i32 15
  %24 = load i32, ptr %23, align 8, !tbaa !393
  %25 = getelementptr inbounds %struct.tilebox, ptr %16, i64 0, i32 16
  %26 = load i32, ptr %25, align 4, !tbaa !394
  %27 = getelementptr inbounds %struct.cellbox, ptr %6, i64 0, i32 20
  %28 = load ptr, ptr %27, align 8, !tbaa !226
  %29 = getelementptr inbounds %struct.tilebox, ptr %16, i64 0, i32 18
  %30 = load ptr, ptr %29, align 8, !tbaa !225
  %31 = icmp slt i32 %12, 4
  %32 = getelementptr inbounds %struct.cellbox, ptr %6, i64 0, i32 14
  %33 = load double, ptr %32, align 8, !tbaa !236
  %34 = fdiv double %33, %1
  %35 = fdiv double %1, %33
  %36 = select i1 %31, double %35, double %34
  %37 = tail call double @sqrt(double noundef %36) #44
  %38 = sub nsw i32 %26, %24
  %39 = sitofp i32 %38 to double
  %40 = fmul double %37, %39
  %41 = fptosi double %40 to i32
  %42 = sitofp i32 %41 to double
  %43 = fsub double %40, %42
  %44 = fcmp oge double %43, 5.000000e-01
  %45 = zext i1 %44 to i32
  %46 = add nsw i32 %45, %41
  %47 = sdiv i32 %46, 2
  %48 = sub nsw i32 %22, %20
  %49 = sitofp i32 %48 to double
  %50 = fdiv double %49, %37
  %51 = fptosi double %50 to i32
  %52 = sitofp i32 %51 to double
  %53 = fsub double %50, %52
  %54 = fcmp oge double %53, 5.000000e-01
  %55 = zext i1 %54 to i32
  %56 = add nsw i32 %55, %51
  %57 = sdiv i32 %56, 2
  %58 = load i32, ptr @penalty, align 4, !tbaa !17
  %59 = load ptr, ptr @overlap, align 8, !tbaa !7
  %60 = tail call i32 (i32, i32, i32, i32, i32, i32, i32, ...) %59(i32 noundef %0, i32 noundef %8, i32 noundef %10, i32 noundef %12, i32 noundef 0, i32 noundef 1, i32 noundef 0) #44
  %61 = sub nsw i32 %58, %60
  %62 = load ptr, ptr @blockarray, align 8, !tbaa !7
  %63 = load i32, ptr @binX, align 4, !tbaa !17
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds ptr, ptr %62, i64 %64
  %66 = load ptr, ptr %65, align 8, !tbaa !7
  %67 = load i32, ptr @binY, align 4, !tbaa !17
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds ptr, ptr %66, i64 %68
  %70 = load ptr, ptr %69, align 8, !tbaa !7
  store ptr %70, ptr @occa1ptr, align 8, !tbaa !7
  %71 = load ptr, ptr @overlapx, align 8, !tbaa !7
  %72 = tail call i32 (i32, i32, i32, i32, i32, double, ...) %71(i32 noundef %0, i32 noundef %20, i32 noundef %24, i32 noundef %57, i32 noundef %47, double noundef %37) #44
  %73 = add nsw i32 %72, %61
  %74 = load ptr, ptr @blockarray, align 8, !tbaa !7
  %75 = load i32, ptr @binX, align 4, !tbaa !17
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds ptr, ptr %74, i64 %76
  %78 = load ptr, ptr %77, align 8, !tbaa !7
  %79 = load i32, ptr @binY, align 4, !tbaa !17
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds ptr, ptr %78, i64 %80
  %82 = load ptr, ptr %81, align 8, !tbaa !7
  store ptr %82, ptr @occa2ptr, align 8, !tbaa !7
  %83 = icmp eq ptr %18, null
  br i1 %83, label %89, label %84

84:                                               ; preds = %2
  %85 = sub i32 %8, %57
  %86 = sub i32 %10, %47
  %87 = load ptr, ptr @termarray, align 8, !tbaa !7
  %88 = load ptr, ptr @netarray, align 8, !tbaa !7
  br label %100

89:                                               ; preds = %100, %2
  %90 = getelementptr inbounds %struct.cellbox, ptr %6, i64 0, i32 18
  %91 = load i32, ptr %90, align 4, !tbaa !223
  %92 = icmp slt i32 %91, 1
  br i1 %92, label %189, label %93

93:                                               ; preds = %89
  %94 = sub i32 %8, %57
  %95 = sub i32 %10, %47
  %96 = load ptr, ptr @termarray, align 8, !tbaa !7
  %97 = load ptr, ptr @netarray, align 8, !tbaa !7
  %98 = add nuw i32 %91, 1
  %99 = zext i32 %98 to i64
  br label %143

100:                                              ; preds = %100, %84
  %101 = phi ptr [ %18, %84 ], [ %141, %100 ]
  %102 = getelementptr inbounds %struct.termbox, ptr %101, i64 0, i32 3
  %103 = load i32, ptr %102, align 8, !tbaa !386
  %104 = sub nsw i32 %103, %20
  %105 = sitofp i32 %104 to double
  %106 = fdiv double %105, %37
  %107 = fptosi double %106 to i32
  %108 = sitofp i32 %107 to double
  %109 = fsub double %106, %108
  %110 = fcmp oge double %109, 5.000000e-01
  %111 = zext i1 %110 to i32
  %112 = add i32 %85, %107
  %113 = add i32 %112, %111
  %114 = getelementptr inbounds %struct.termbox, ptr %101, i64 0, i32 4
  %115 = load i32, ptr %114, align 4, !tbaa !387
  %116 = sub nsw i32 %115, %24
  %117 = sitofp i32 %116 to double
  %118 = fmul double %37, %117
  %119 = fptosi double %118 to i32
  %120 = sitofp i32 %119 to double
  %121 = fsub double %118, %120
  %122 = fcmp oge double %121, 5.000000e-01
  %123 = zext i1 %122 to i32
  %124 = add i32 %86, %119
  %125 = add i32 %124, %123
  %126 = getelementptr inbounds %struct.termbox, ptr %101, i64 0, i32 5
  %127 = load i32, ptr %126, align 8, !tbaa !53
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds ptr, ptr %87, i64 %128
  %130 = load ptr, ptr %129, align 8, !tbaa !7
  %131 = load i32, ptr %130, align 8, !tbaa !60
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds ptr, ptr %88, i64 %132
  %134 = load ptr, ptr %133, align 8, !tbaa !7
  %135 = getelementptr inbounds %struct.dimbox, ptr %134, i64 0, i32 7
  store i32 1, ptr %135, align 8, !tbaa !989
  %136 = getelementptr inbounds %struct.plist, ptr %130, i64 0, i32 1
  %137 = load ptr, ptr %136, align 8, !tbaa !62
  %138 = getelementptr inbounds %struct.netbox, ptr %137, i64 0, i32 6
  store i32 1, ptr %138, align 4, !tbaa !58
  %139 = getelementptr inbounds %struct.netbox, ptr %137, i64 0, i32 3
  store i32 %113, ptr %139, align 8, !tbaa !990
  %140 = getelementptr inbounds %struct.netbox, ptr %137, i64 0, i32 4
  store i32 %125, ptr %140, align 4, !tbaa !991
  %141 = load ptr, ptr %101, align 8, !tbaa !49
  %142 = icmp eq ptr %141, null
  br i1 %142, label %89, label %100, !llvm.loop !992

143:                                              ; preds = %143, %93
  %144 = phi i64 [ 1, %93 ], [ %187, %143 ]
  %145 = getelementptr inbounds %struct.uncombox.25, ptr %28, i64 %144
  %146 = getelementptr inbounds %struct.uncombox.25, ptr %28, i64 %144, i32 1
  %147 = load i32, ptr %146, align 4, !tbaa !250
  %148 = sext i32 %147 to i64
  %149 = getelementptr inbounds %struct.locbox.26, ptr %30, i64 %148, i32 2
  %150 = load i32, ptr %149, align 4, !tbaa !389
  %151 = sub nsw i32 %150, %20
  %152 = sitofp i32 %151 to double
  %153 = fdiv double %152, %37
  %154 = fptosi double %153 to i32
  %155 = sitofp i32 %154 to double
  %156 = fsub double %153, %155
  %157 = fcmp oge double %156, 5.000000e-01
  %158 = zext i1 %157 to i32
  %159 = add i32 %94, %154
  %160 = add i32 %159, %158
  %161 = getelementptr inbounds %struct.locbox.26, ptr %30, i64 %148, i32 3
  %162 = load i32, ptr %161, align 4, !tbaa !390
  %163 = sub nsw i32 %162, %24
  %164 = sitofp i32 %163 to double
  %165 = fmul double %37, %164
  %166 = fptosi double %165 to i32
  %167 = sitofp i32 %166 to double
  %168 = fsub double %165, %167
  %169 = fcmp oge double %168, 5.000000e-01
  %170 = zext i1 %169 to i32
  %171 = add i32 %95, %166
  %172 = add i32 %171, %170
  %173 = load i32, ptr %145, align 4, !tbaa !298
  %174 = sext i32 %173 to i64
  %175 = getelementptr inbounds ptr, ptr %96, i64 %174
  %176 = load ptr, ptr %175, align 8, !tbaa !7
  %177 = load i32, ptr %176, align 8, !tbaa !60
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds ptr, ptr %97, i64 %178
  %180 = load ptr, ptr %179, align 8, !tbaa !7
  %181 = getelementptr inbounds %struct.dimbox, ptr %180, i64 0, i32 7
  store i32 1, ptr %181, align 8, !tbaa !989
  %182 = getelementptr inbounds %struct.plist, ptr %176, i64 0, i32 1
  %183 = load ptr, ptr %182, align 8, !tbaa !62
  %184 = getelementptr inbounds %struct.netbox, ptr %183, i64 0, i32 6
  store i32 1, ptr %184, align 4, !tbaa !58
  %185 = getelementptr inbounds %struct.netbox, ptr %183, i64 0, i32 3
  store i32 %160, ptr %185, align 8, !tbaa !990
  %186 = getelementptr inbounds %struct.netbox, ptr %183, i64 0, i32 4
  store i32 %172, ptr %186, align 4, !tbaa !991
  %187 = add nuw nsw i64 %144, 1
  %188 = icmp eq i64 %187, %99
  br i1 %188, label %189, label %143, !llvm.loop !993

189:                                              ; preds = %143, %89
  %190 = load i32, ptr @funccost, align 4, !tbaa !17
  %191 = tail call i32 @ufixnet(ptr noundef %18) #44
  %192 = add nsw i32 %191, %190
  %193 = tail call i32 @usoftnet(ptr noundef nonnull %6) #44
  %194 = add nsw i32 %192, %193
  %195 = add nsw i32 %194, %73
  %196 = load i32, ptr @funccost, align 4, !tbaa !17
  %197 = load i32, ptr @penalty, align 4, !tbaa !17
  %198 = add nsw i32 %197, %196
  %199 = icmp sgt i32 %195, %198
  br i1 %199, label %200, label %213

200:                                              ; preds = %189
  %201 = sub i32 %198, %195
  %202 = sitofp i32 %201 to double
  %203 = load double, ptr @T, align 8, !tbaa !36
  %204 = fdiv double %202, %203
  %205 = tail call double @exp(double noundef %204) #44
  %206 = load i32, ptr @randVar, align 4, !tbaa !17
  %207 = mul nsw i32 %206, 1103515245
  %208 = add nsw i32 %207, 12345
  store i32 %208, ptr @randVar, align 4, !tbaa !17
  %209 = and i32 %208, 2147483647
  %210 = sitofp i32 %209 to double
  %211 = fdiv double %210, 0x41DFFFFFFFC00000
  %212 = fcmp ogt double %205, %211
  br i1 %212, label %213, label %746

213:                                              ; preds = %200, %189
  tail call void @ufixpin(ptr noundef %18, i32 noundef 1, i32 noundef 0, i32 noundef 0) #44
  tail call void @usoftpin(ptr noundef nonnull %6, i32 noundef 1, i32 noundef 0, i32 noundef 0, i32 noundef 0) #44
  %214 = load ptr, ptr @occa1ptr, align 8, !tbaa !7
  %215 = load ptr, ptr @occa2ptr, align 8, !tbaa !7
  %216 = icmp eq ptr %214, %215
  br i1 %216, label %234, label %217

217:                                              ; preds = %217, %213
  %218 = phi i64 [ %222, %217 ], [ 1, %213 ]
  %219 = getelementptr inbounds i32, ptr %214, i64 %218
  %220 = load i32, ptr %219, align 4, !tbaa !17
  %221 = icmp eq i32 %220, %0
  %222 = add nuw i64 %218, 1
  br i1 %221, label %223, label %217, !llvm.loop !994

223:                                              ; preds = %217
  %.lcssa = phi i64 [ %218, %217 ]
  %224 = getelementptr inbounds i32, ptr %214, i64 %.lcssa
  %225 = load i32, ptr %214, align 4, !tbaa !17
  %226 = add nsw i32 %225, -1
  store i32 %226, ptr %214, align 4, !tbaa !17
  %227 = sext i32 %225 to i64
  %228 = getelementptr inbounds i32, ptr %214, i64 %227
  %229 = load i32, ptr %228, align 4, !tbaa !17
  store i32 %229, ptr %224, align 4, !tbaa !17
  %230 = load i32, ptr %215, align 4, !tbaa !17
  %231 = add nsw i32 %230, 1
  store i32 %231, ptr %215, align 4, !tbaa !17
  %232 = sext i32 %231 to i64
  %233 = getelementptr inbounds i32, ptr %215, i64 %232
  store i32 %0, ptr %233, align 4, !tbaa !17
  br label %234

234:                                              ; preds = %223, %213
  %235 = icmp eq ptr %16, null
  br i1 %235, label %247, label %236

236:                                              ; preds = %234
  %237 = insertelement <2 x i32> poison, i32 %20, i64 0
  %238 = shufflevector <2 x i32> %237, <2 x i32> poison, <2 x i32> zeroinitializer
  %239 = insertelement <2 x double> poison, double %37, i64 0
  %240 = shufflevector <2 x double> %239, <2 x double> poison, <2 x i32> zeroinitializer
  %241 = insertelement <2 x i32> poison, i32 %57, i64 0
  %242 = shufflevector <2 x i32> %241, <2 x i32> poison, <2 x i32> zeroinitializer
  %243 = insertelement <2 x i32> poison, i32 %24, i64 0
  %244 = shufflevector <2 x i32> %243, <2 x i32> poison, <2 x i32> zeroinitializer
  %245 = insertelement <2 x i32> poison, i32 %47, i64 0
  %246 = shufflevector <2 x i32> %245, <2 x i32> poison, <2 x i32> zeroinitializer
  br label %248

247:                                              ; preds = %248, %234
  br i1 %83, label %278, label %285

248:                                              ; preds = %248, %236
  %249 = phi ptr [ %276, %248 ], [ %16, %236 ]
  %250 = getelementptr inbounds %struct.tilebox, ptr %249, i64 0, i32 13
  %251 = getelementptr inbounds %struct.tilebox, ptr %249, i64 0, i32 9
  %252 = load <2 x i32>, ptr %250, align 8, !tbaa !17
  %253 = sub nsw <2 x i32> %252, %238
  %254 = sitofp <2 x i32> %253 to <2 x double>
  %255 = fdiv <2 x double> %254, %240
  %256 = fptosi <2 x double> %255 to <2 x i32>
  %257 = sitofp <2 x i32> %256 to <2 x double>
  %258 = fsub <2 x double> %255, %257
  %259 = fcmp oge <2 x double> %258, <double 5.000000e-01, double 5.000000e-01>
  %260 = zext <2 x i1> %259 to <2 x i32>
  %261 = sub <2 x i32> %256, %242
  %262 = add <2 x i32> %261, %260
  store <2 x i32> %262, ptr %251, align 8, !tbaa !17
  %263 = getelementptr inbounds %struct.tilebox, ptr %249, i64 0, i32 15
  %264 = getelementptr inbounds %struct.tilebox, ptr %249, i64 0, i32 11
  %265 = load <2 x i32>, ptr %263, align 8, !tbaa !17
  %266 = sub nsw <2 x i32> %265, %244
  %267 = sitofp <2 x i32> %266 to <2 x double>
  %268 = fmul <2 x double> %240, %267
  %269 = fptosi <2 x double> %268 to <2 x i32>
  %270 = sitofp <2 x i32> %269 to <2 x double>
  %271 = fsub <2 x double> %268, %270
  %272 = fcmp oge <2 x double> %271, <double 5.000000e-01, double 5.000000e-01>
  %273 = zext <2 x i1> %272 to <2 x i32>
  %274 = sub <2 x i32> %269, %246
  %275 = add <2 x i32> %274, %273
  store <2 x i32> %275, ptr %264, align 8, !tbaa !17
  %276 = load ptr, ptr %249, align 8, !tbaa !172
  %277 = icmp eq ptr %276, null
  br i1 %277, label %247, label %248, !llvm.loop !995

278:                                              ; preds = %285, %247
  %279 = getelementptr inbounds %struct.cellbox, ptr %6, i64 0, i32 17
  %280 = load i32, ptr %279, align 8, !tbaa !227
  %281 = icmp slt i32 %280, 1
  br i1 %281, label %345, label %282

282:                                              ; preds = %278
  %283 = add nuw i32 %280, 1
  %284 = zext i32 %283 to i64
  br label %315

285:                                              ; preds = %285, %247
  %286 = phi ptr [ %313, %285 ], [ %18, %247 ]
  %287 = getelementptr inbounds %struct.termbox, ptr %286, i64 0, i32 3
  %288 = load i32, ptr %287, align 8, !tbaa !386
  %289 = sub nsw i32 %288, %20
  %290 = sitofp i32 %289 to double
  %291 = fdiv double %290, %37
  %292 = fptosi double %291 to i32
  %293 = sitofp i32 %292 to double
  %294 = fsub double %291, %293
  %295 = fcmp oge double %294, 5.000000e-01
  %296 = zext i1 %295 to i32
  %297 = sub i32 %292, %57
  %298 = add i32 %297, %296
  %299 = getelementptr inbounds %struct.termbox, ptr %286, i64 0, i32 1
  store i32 %298, ptr %299, align 8, !tbaa !51
  %300 = getelementptr inbounds %struct.termbox, ptr %286, i64 0, i32 4
  %301 = load i32, ptr %300, align 4, !tbaa !387
  %302 = sub nsw i32 %301, %24
  %303 = sitofp i32 %302 to double
  %304 = fmul double %37, %303
  %305 = fptosi double %304 to i32
  %306 = sitofp i32 %305 to double
  %307 = fsub double %304, %306
  %308 = fcmp oge double %307, 5.000000e-01
  %309 = zext i1 %308 to i32
  %310 = sub i32 %305, %47
  %311 = add i32 %310, %309
  %312 = getelementptr inbounds %struct.termbox, ptr %286, i64 0, i32 2
  store i32 %311, ptr %312, align 4, !tbaa !52
  %313 = load ptr, ptr %286, align 8, !tbaa !49
  %314 = icmp eq ptr %313, null
  br i1 %314, label %278, label %285, !llvm.loop !996

315:                                              ; preds = %315, %282
  %316 = phi i64 [ 1, %282 ], [ %343, %315 ]
  %317 = getelementptr inbounds %struct.locbox.26, ptr %30, i64 %316
  %318 = getelementptr inbounds %struct.locbox.26, ptr %30, i64 %316, i32 2
  %319 = load i32, ptr %318, align 4, !tbaa !389
  %320 = sub nsw i32 %319, %20
  %321 = sitofp i32 %320 to double
  %322 = fdiv double %321, %37
  %323 = fptosi double %322 to i32
  %324 = sitofp i32 %323 to double
  %325 = fsub double %322, %324
  %326 = fcmp oge double %325, 5.000000e-01
  %327 = zext i1 %326 to i32
  %328 = sub i32 %323, %57
  %329 = add i32 %328, %327
  store i32 %329, ptr %317, align 4, !tbaa !240
  %330 = getelementptr inbounds %struct.locbox.26, ptr %30, i64 %316, i32 3
  %331 = load i32, ptr %330, align 4, !tbaa !390
  %332 = sub nsw i32 %331, %24
  %333 = sitofp i32 %332 to double
  %334 = fmul double %37, %333
  %335 = fptosi double %334 to i32
  %336 = sitofp i32 %335 to double
  %337 = fsub double %334, %336
  %338 = fcmp oge double %337, 5.000000e-01
  %339 = zext i1 %338 to i32
  %340 = sub i32 %335, %47
  %341 = add i32 %340, %339
  %342 = getelementptr inbounds %struct.locbox.26, ptr %30, i64 %316, i32 1
  store i32 %341, ptr %342, align 4, !tbaa !238
  %343 = add nuw nsw i64 %316, 1
  %344 = icmp eq i64 %343, %284
  br i1 %344, label %345, label %315, !llvm.loop !997

345:                                              ; preds = %315, %278
  %346 = icmp eq i32 %12, 0
  br i1 %346, label %533, label %347

347:                                              ; preds = %345
  %348 = getelementptr inbounds %struct.tilebox, ptr %16, i64 0, i32 12
  %349 = load i32, ptr %348, align 4, !tbaa !170
  %350 = getelementptr inbounds %struct.tilebox, ptr %16, i64 0, i32 11
  %351 = load i32, ptr %350, align 8, !tbaa !169
  %352 = sub nsw i32 %349, %351
  %353 = getelementptr inbounds %struct.tilebox, ptr %16, i64 0, i32 10
  %354 = load i32, ptr %353, align 4, !tbaa !168
  %355 = getelementptr inbounds %struct.tilebox, ptr %16, i64 0, i32 9
  %356 = load i32, ptr %355, align 8, !tbaa !167
  %357 = sub nsw i32 %354, %356
  switch i32 %12, label %364 [
    i32 7, label %363
    i32 2, label %358
    i32 3, label %359
    i32 4, label %360
    i32 5, label %361
    i32 6, label %362
  ]

358:                                              ; preds = %347
  br label %364

359:                                              ; preds = %347
  br label %364

360:                                              ; preds = %347
  br label %364

361:                                              ; preds = %347
  br label %364

362:                                              ; preds = %347
  br label %364

363:                                              ; preds = %347
  br label %364

364:                                              ; preds = %363, %362, %361, %360, %359, %358, %347
  %365 = phi i1 [ false, %363 ], [ false, %362 ], [ false, %361 ], [ true, %360 ], [ false, %359 ], [ false, %358 ], [ false, %347 ]
  %366 = phi i1 [ false, %363 ], [ true, %362 ], [ false, %361 ], [ false, %360 ], [ false, %359 ], [ false, %358 ], [ false, %347 ]
  %367 = phi i1 [ false, %363 ], [ false, %362 ], [ false, %361 ], [ false, %360 ], [ false, %359 ], [ false, %358 ], [ true, %347 ]
  %368 = phi i1 [ false, %363 ], [ false, %362 ], [ false, %361 ], [ false, %360 ], [ true, %359 ], [ false, %358 ], [ false, %347 ]
  %369 = phi i1 [ false, %363 ], [ false, %362 ], [ false, %361 ], [ false, %360 ], [ false, %359 ], [ true, %358 ], [ false, %347 ]
  %370 = phi i1 [ true, %363 ], [ false, %362 ], [ false, %361 ], [ false, %360 ], [ false, %359 ], [ false, %358 ], [ false, %347 ]
  %371 = phi i32 [ 6, %363 ], [ 7, %362 ], [ %12, %361 ], [ %12, %360 ], [ %12, %359 ], [ %12, %358 ], [ 1, %347 ]
  %372 = load ptr, ptr %13, align 8, !tbaa !7
  %373 = getelementptr inbounds %struct.tilebox, ptr %372, i64 0, i32 9
  store i32 %356, ptr %373, align 8, !tbaa !167
  %374 = getelementptr inbounds %struct.tilebox, ptr %372, i64 0, i32 10
  store i32 %354, ptr %374, align 4, !tbaa !168
  %375 = getelementptr inbounds %struct.tilebox, ptr %372, i64 0, i32 11
  store i32 %351, ptr %375, align 8, !tbaa !169
  %376 = getelementptr inbounds %struct.tilebox, ptr %372, i64 0, i32 12
  store i32 %349, ptr %376, align 4, !tbaa !170
  tail call void @move(i32 noundef %371) #44
  tail call void @rect(ptr noundef nonnull %373, ptr noundef nonnull %375, ptr noundef nonnull %374, ptr noundef nonnull %376) #44
  %377 = and i32 %352, 1
  %378 = icmp ne i32 %377, 0
  %379 = or i1 %365, %370
  %380 = and i1 %378, %379
  br i1 %380, label %386, label %381

381:                                              ; preds = %364
  %382 = and i32 %357, 1
  %383 = icmp ne i32 %382, 0
  %384 = or i1 %368, %369
  %385 = and i1 %383, %384
  br i1 %385, label %386, label %389

386:                                              ; preds = %381, %364
  %387 = load <2 x i32>, ptr %373, align 8, !tbaa !17
  %388 = add nsw <2 x i32> %387, <i32 1, i32 1>
  store <2 x i32> %388, ptr %373, align 8, !tbaa !17
  br label %389

389:                                              ; preds = %386, %381
  %390 = or i1 %367, %368
  %391 = and i1 %378, %390
  br i1 %391, label %397, label %392

392:                                              ; preds = %389
  %393 = and i32 %357, 1
  %394 = icmp ne i32 %393, 0
  %395 = or i1 %365, %366
  %396 = and i1 %394, %395
  br i1 %396, label %397, label %400

397:                                              ; preds = %392, %389
  %398 = load <2 x i32>, ptr %375, align 8, !tbaa !17
  %399 = add nsw <2 x i32> %398, <i32 1, i32 1>
  store <2 x i32> %399, ptr %375, align 8, !tbaa !17
  br label %400

400:                                              ; preds = %397, %392
  %401 = getelementptr inbounds %struct.cellbox, ptr %6, i64 0, i32 6
  %402 = load i32, ptr %401, align 4, !tbaa !171
  %403 = icmp slt i32 %402, 1
  br i1 %403, label %436, label %404

404:                                              ; preds = %400
  %405 = and i32 %357, 1
  %406 = icmp ne i32 %405, 0
  %407 = or i1 %368, %369
  %408 = and i1 %406, %407
  %409 = or i1 %365, %366
  %410 = and i1 %406, %409
  %411 = select i1 %380, i1 true, i1 %408
  %412 = select i1 %391, i1 true, i1 %410
  br label %413

413:                                              ; preds = %432, %404
  %414 = phi ptr [ %16, %404 ], [ %418, %432 ]
  %415 = phi ptr [ %372, %404 ], [ %417, %432 ]
  %416 = phi i32 [ 1, %404 ], [ %433, %432 ]
  %417 = load ptr, ptr %415, align 8, !tbaa !172
  %418 = load ptr, ptr %414, align 8, !tbaa !172
  %419 = getelementptr inbounds %struct.tilebox, ptr %418, i64 0, i32 9
  %420 = getelementptr inbounds %struct.tilebox, ptr %417, i64 0, i32 9
  %421 = getelementptr inbounds %struct.tilebox, ptr %417, i64 0, i32 10
  %422 = getelementptr inbounds %struct.tilebox, ptr %417, i64 0, i32 11
  %423 = getelementptr inbounds %struct.tilebox, ptr %417, i64 0, i32 12
  %424 = load <4 x i32>, ptr %419, align 8, !tbaa !17
  store <4 x i32> %424, ptr %420, align 8, !tbaa !17
  tail call void @move(i32 noundef %371) #44
  tail call void @rect(ptr noundef nonnull %420, ptr noundef nonnull %422, ptr noundef nonnull %421, ptr noundef nonnull %423) #44
  br i1 %411, label %425, label %428

425:                                              ; preds = %413
  %426 = load <2 x i32>, ptr %420, align 8, !tbaa !17
  %427 = add nsw <2 x i32> %426, <i32 1, i32 1>
  store <2 x i32> %427, ptr %420, align 8, !tbaa !17
  br label %428

428:                                              ; preds = %425, %413
  br i1 %412, label %429, label %432

429:                                              ; preds = %428
  %430 = load <2 x i32>, ptr %422, align 8, !tbaa !17
  %431 = add nsw <2 x i32> %430, <i32 1, i32 1>
  store <2 x i32> %431, ptr %422, align 8, !tbaa !17
  br label %432

432:                                              ; preds = %429, %428
  %433 = add nuw nsw i32 %416, 1
  %434 = load i32, ptr %401, align 4, !tbaa !171
  %435 = icmp slt i32 %416, %434
  br i1 %435, label %413, label %436, !llvm.loop !998

436:                                              ; preds = %432, %400
  %437 = getelementptr inbounds %struct.cellbox, ptr %6, i64 0, i32 8
  %438 = load i32, ptr %437, align 4, !tbaa !385
  %439 = icmp eq i32 %438, 0
  br i1 %439, label %498, label %440

440:                                              ; preds = %436
  %441 = load ptr, ptr %13, align 8, !tbaa !7
  %442 = getelementptr inbounds %struct.tilebox, ptr %441, i64 0, i32 17
  %443 = load ptr, ptr %442, align 8, !tbaa !47
  %444 = getelementptr inbounds %struct.termbox, ptr %18, i64 0, i32 1
  %445 = getelementptr inbounds %struct.termbox, ptr %443, i64 0, i32 1
  %446 = getelementptr inbounds %struct.termbox, ptr %443, i64 0, i32 2
  %447 = load <2 x i32>, ptr %444, align 8, !tbaa !17
  store <2 x i32> %447, ptr %445, align 8, !tbaa !17
  tail call void @move(i32 noundef %371) #44
  tail call void @point(ptr noundef nonnull %445, ptr noundef nonnull %446) #44
  br i1 %380, label %453, label %448

448:                                              ; preds = %440
  %449 = and i32 %357, 1
  %450 = icmp ne i32 %449, 0
  %451 = or i1 %368, %369
  %452 = and i1 %450, %451
  br i1 %452, label %453, label %456

453:                                              ; preds = %448, %440
  %454 = load i32, ptr %445, align 8, !tbaa !51
  %455 = add nsw i32 %454, 1
  store i32 %455, ptr %445, align 8, !tbaa !51
  br label %456

456:                                              ; preds = %453, %448
  br i1 %391, label %462, label %457

457:                                              ; preds = %456
  %458 = and i32 %357, 1
  %459 = icmp ne i32 %458, 0
  %460 = or i1 %365, %366
  %461 = and i1 %459, %460
  br i1 %461, label %462, label %465

462:                                              ; preds = %457, %456
  %463 = load i32, ptr %446, align 4, !tbaa !52
  %464 = add nsw i32 %463, 1
  store i32 %464, ptr %446, align 4, !tbaa !52
  br label %465

465:                                              ; preds = %462, %457
  %466 = load i32, ptr %437, align 4, !tbaa !385
  %467 = icmp slt i32 %466, 2
  br i1 %467, label %498, label %468

468:                                              ; preds = %465
  %469 = and i32 %357, 1
  %470 = icmp ne i32 %469, 0
  %471 = or i1 %368, %369
  %472 = and i1 %470, %471
  %473 = or i1 %365, %366
  %474 = and i1 %470, %473
  %475 = select i1 %380, i1 true, i1 %472
  %476 = select i1 %391, i1 true, i1 %474
  br label %477

477:                                              ; preds = %494, %468
  %478 = phi ptr [ %18, %468 ], [ %482, %494 ]
  %479 = phi ptr [ %443, %468 ], [ %481, %494 ]
  %480 = phi i32 [ 2, %468 ], [ %495, %494 ]
  %481 = load ptr, ptr %479, align 8, !tbaa !49
  %482 = load ptr, ptr %478, align 8, !tbaa !49
  %483 = getelementptr inbounds %struct.termbox, ptr %482, i64 0, i32 1
  %484 = getelementptr inbounds %struct.termbox, ptr %481, i64 0, i32 1
  %485 = getelementptr inbounds %struct.termbox, ptr %481, i64 0, i32 2
  %486 = load <2 x i32>, ptr %483, align 8, !tbaa !17
  store <2 x i32> %486, ptr %484, align 8, !tbaa !17
  tail call void @move(i32 noundef %371) #44
  tail call void @point(ptr noundef nonnull %484, ptr noundef nonnull %485) #44
  br i1 %475, label %487, label %490

487:                                              ; preds = %477
  %488 = load i32, ptr %484, align 8, !tbaa !51
  %489 = add nsw i32 %488, 1
  store i32 %489, ptr %484, align 8, !tbaa !51
  br label %490

490:                                              ; preds = %487, %477
  br i1 %476, label %491, label %494

491:                                              ; preds = %490
  %492 = load i32, ptr %485, align 4, !tbaa !52
  %493 = add nsw i32 %492, 1
  store i32 %493, ptr %485, align 4, !tbaa !52
  br label %494

494:                                              ; preds = %491, %490
  %495 = add nuw nsw i32 %480, 1
  %496 = load i32, ptr %437, align 4, !tbaa !385
  %497 = icmp slt i32 %480, %496
  br i1 %497, label %477, label %498, !llvm.loop !999

498:                                              ; preds = %494, %465, %436
  %499 = load i32, ptr %279, align 8, !tbaa !227
  %500 = icmp eq i32 %499, 0
  br i1 %500, label %533, label %501

501:                                              ; preds = %498
  %502 = load ptr, ptr %13, align 8, !tbaa !7
  %503 = getelementptr inbounds %struct.tilebox, ptr %502, i64 0, i32 18
  %504 = load ptr, ptr %503, align 8, !tbaa !225
  %505 = icmp slt i32 %499, 1
  br i1 %505, label %533, label %506

506:                                              ; preds = %501
  %507 = and i32 %357, 1
  %508 = icmp ne i32 %507, 0
  %509 = or i1 %368, %369
  %510 = and i1 %508, %509
  %511 = or i1 %365, %366
  %512 = and i1 %508, %511
  %513 = select i1 %380, i1 true, i1 %510
  %514 = select i1 %391, i1 true, i1 %512
  br label %515

515:                                              ; preds = %528, %506
  %516 = phi i64 [ 1, %506 ], [ %529, %528 ]
  %517 = getelementptr inbounds %struct.locbox.26, ptr %30, i64 %516
  %518 = getelementptr inbounds %struct.locbox.26, ptr %504, i64 %516
  %519 = getelementptr inbounds %struct.locbox.26, ptr %504, i64 %516, i32 1
  %520 = load <2 x i32>, ptr %517, align 4, !tbaa !17
  store <2 x i32> %520, ptr %518, align 4, !tbaa !17
  tail call void @move(i32 noundef %371) #44
  tail call void @point(ptr noundef nonnull %518, ptr noundef nonnull %519) #44
  br i1 %513, label %521, label %524

521:                                              ; preds = %515
  %522 = load i32, ptr %518, align 4, !tbaa !240
  %523 = add nsw i32 %522, 1
  store i32 %523, ptr %518, align 4, !tbaa !240
  br label %524

524:                                              ; preds = %521, %515
  br i1 %514, label %525, label %528

525:                                              ; preds = %524
  %526 = load i32, ptr %519, align 4, !tbaa !238
  %527 = add nsw i32 %526, 1
  store i32 %527, ptr %519, align 4, !tbaa !238
  br label %528

528:                                              ; preds = %525, %524
  %529 = add nuw nsw i64 %516, 1
  %530 = load i32, ptr %279, align 8, !tbaa !227
  %531 = sext i32 %530 to i64
  %532 = icmp slt i64 %516, %531
  br i1 %532, label %515, label %533, !llvm.loop !1000

533:                                              ; preds = %528, %501, %498, %345
  %534 = load ptr, ptr %13, align 8, !tbaa !7
  %535 = getelementptr inbounds %struct.tilebox, ptr %534, i64 0, i32 12
  %536 = load i32, ptr %535, align 4, !tbaa !170
  %537 = getelementptr inbounds %struct.tilebox, ptr %534, i64 0, i32 11
  %538 = load i32, ptr %537, align 8, !tbaa !169
  %539 = sub nsw i32 %536, %538
  %540 = getelementptr inbounds %struct.tilebox, ptr %534, i64 0, i32 10
  %541 = load i32, ptr %540, align 4, !tbaa !168
  %542 = getelementptr inbounds %struct.tilebox, ptr %534, i64 0, i32 9
  %543 = load i32, ptr %542, align 8, !tbaa !167
  %544 = sub nsw i32 %541, %543
  %545 = and i32 %539, 1
  %546 = icmp ne i32 %545, 0
  %547 = and i32 %544, 1
  %548 = icmp ne i32 %547, 0
  %549 = icmp eq i32 %547, 0
  %550 = getelementptr inbounds %struct.cellbox, ptr %6, i64 0, i32 6
  %551 = zext i32 %12 to i64
  br label %552

552:                                              ; preds = %617, %533
  %553 = phi i64 [ 1, %533 ], [ %618, %617 ]
  %554 = icmp eq i64 %553, %551
  br i1 %554, label %617, label %555

555:                                              ; preds = %552
  %556 = load ptr, ptr %13, align 8, !tbaa !7
  %557 = getelementptr inbounds %struct.cellbox, ptr %6, i64 0, i32 21, i64 %553
  %558 = load ptr, ptr %557, align 8, !tbaa !7
  %559 = getelementptr inbounds %struct.tilebox, ptr %556, i64 0, i32 9
  %560 = getelementptr inbounds %struct.tilebox, ptr %558, i64 0, i32 9
  %561 = getelementptr inbounds %struct.tilebox, ptr %558, i64 0, i32 10
  %562 = getelementptr inbounds %struct.tilebox, ptr %558, i64 0, i32 11
  %563 = getelementptr inbounds %struct.tilebox, ptr %558, i64 0, i32 12
  %564 = load <4 x i32>, ptr %559, align 8, !tbaa !17
  store <4 x i32> %564, ptr %560, align 8, !tbaa !17
  %565 = trunc i64 %553 to i32
  tail call void @move(i32 noundef %565) #44
  tail call void @rect(ptr noundef nonnull %560, ptr noundef nonnull %562, ptr noundef nonnull %561, ptr noundef nonnull %563) #44
  %566 = and i32 %565, 5
  %567 = icmp eq i32 %566, 4
  %568 = and i1 %546, %567
  br i1 %568, label %573, label %569

569:                                              ; preds = %555
  %570 = and i32 %565, 6
  %571 = icmp eq i32 %570, 2
  %572 = and i1 %548, %571
  br i1 %572, label %573, label %576

573:                                              ; preds = %569, %555
  %574 = load <2 x i32>, ptr %560, align 8, !tbaa !17
  %575 = add nsw <2 x i32> %574, <i32 1, i32 1>
  store <2 x i32> %575, ptr %560, align 8, !tbaa !17
  br label %576

576:                                              ; preds = %573, %569
  %577 = icmp eq i32 %566, 1
  %578 = and i1 %546, %577
  br i1 %578, label %581, label %579

579:                                              ; preds = %576
  br i1 %549, label %584, label %580

580:                                              ; preds = %579
  switch i32 %565, label %584 [
    i32 7, label %581
    i32 4, label %581
  ]

581:                                              ; preds = %580, %580, %576
  %582 = load <2 x i32>, ptr %562, align 8, !tbaa !17
  %583 = add nsw <2 x i32> %582, <i32 1, i32 1>
  store <2 x i32> %583, ptr %562, align 8, !tbaa !17
  br label %584

584:                                              ; preds = %581, %580, %579
  %585 = load i32, ptr %550, align 4, !tbaa !171
  %586 = icmp slt i32 %585, 1
  br i1 %586, label %617, label %587

587:                                              ; preds = %584
  %588 = and i32 %565, 6
  %589 = icmp eq i32 %588, 2
  %590 = and i1 %548, %589
  %591 = select i1 %568, i1 true, i1 %590
  br label %592

592:                                              ; preds = %613, %587
  %593 = phi ptr [ %558, %587 ], [ %597, %613 ]
  %594 = phi ptr [ %556, %587 ], [ %596, %613 ]
  %595 = phi i32 [ 1, %587 ], [ %614, %613 ]
  %596 = load ptr, ptr %594, align 8, !tbaa !172
  %597 = load ptr, ptr %593, align 8, !tbaa !172
  %598 = getelementptr inbounds %struct.tilebox, ptr %596, i64 0, i32 9
  %599 = getelementptr inbounds %struct.tilebox, ptr %597, i64 0, i32 9
  %600 = getelementptr inbounds %struct.tilebox, ptr %597, i64 0, i32 10
  %601 = getelementptr inbounds %struct.tilebox, ptr %597, i64 0, i32 11
  %602 = getelementptr inbounds %struct.tilebox, ptr %597, i64 0, i32 12
  %603 = load <4 x i32>, ptr %598, align 8, !tbaa !17
  store <4 x i32> %603, ptr %599, align 8, !tbaa !17
  tail call void @move(i32 noundef %565) #44
  tail call void @rect(ptr noundef nonnull %599, ptr noundef nonnull %601, ptr noundef nonnull %600, ptr noundef nonnull %602) #44
  br i1 %591, label %604, label %607

604:                                              ; preds = %592
  %605 = load <2 x i32>, ptr %599, align 8, !tbaa !17
  %606 = add nsw <2 x i32> %605, <i32 1, i32 1>
  store <2 x i32> %606, ptr %599, align 8, !tbaa !17
  br label %607

607:                                              ; preds = %604, %592
  br i1 %578, label %610, label %608

608:                                              ; preds = %607
  br i1 %549, label %613, label %609

609:                                              ; preds = %608
  switch i32 %565, label %613 [
    i32 7, label %610
    i32 4, label %610
  ]

610:                                              ; preds = %609, %609, %607
  %611 = load <2 x i32>, ptr %601, align 8, !tbaa !17
  %612 = add nsw <2 x i32> %611, <i32 1, i32 1>
  store <2 x i32> %612, ptr %601, align 8, !tbaa !17
  br label %613

613:                                              ; preds = %610, %609, %608
  %614 = add nuw nsw i32 %595, 1
  %615 = load i32, ptr %550, align 4, !tbaa !171
  %616 = icmp slt i32 %595, %615
  br i1 %616, label %592, label %617, !llvm.loop !1001

617:                                              ; preds = %613, %584, %552
  %618 = add nuw nsw i64 %553, 1
  %619 = icmp eq i64 %618, 8
  br i1 %619, label %620, label %552, !llvm.loop !1002

620:                                              ; preds = %617
  %621 = getelementptr inbounds %struct.cellbox, ptr %6, i64 0, i32 8
  %622 = load i32, ptr %621, align 4, !tbaa !385
  %623 = icmp eq i32 %622, 0
  br i1 %623, label %692, label %624

624:                                              ; preds = %689, %620
  %625 = phi i64 [ %690, %689 ], [ 1, %620 ]
  %626 = icmp eq i64 %625, %551
  br i1 %626, label %689, label %627

627:                                              ; preds = %624
  %628 = load ptr, ptr %13, align 8, !tbaa !7
  %629 = getelementptr inbounds %struct.tilebox, ptr %628, i64 0, i32 17
  %630 = load ptr, ptr %629, align 8, !tbaa !47
  %631 = getelementptr inbounds %struct.cellbox, ptr %6, i64 0, i32 21, i64 %625
  %632 = load ptr, ptr %631, align 8, !tbaa !7
  %633 = getelementptr inbounds %struct.tilebox, ptr %632, i64 0, i32 17
  %634 = load ptr, ptr %633, align 8, !tbaa !47
  %635 = getelementptr inbounds %struct.termbox, ptr %630, i64 0, i32 1
  %636 = getelementptr inbounds %struct.termbox, ptr %634, i64 0, i32 1
  %637 = getelementptr inbounds %struct.termbox, ptr %634, i64 0, i32 2
  %638 = load <2 x i32>, ptr %635, align 8, !tbaa !17
  store <2 x i32> %638, ptr %636, align 8, !tbaa !17
  %639 = trunc i64 %625 to i32
  tail call void @move(i32 noundef %639) #44
  tail call void @point(ptr noundef nonnull %636, ptr noundef nonnull %637) #44
  %640 = and i32 %639, 5
  %641 = icmp eq i32 %640, 4
  %642 = and i1 %546, %641
  br i1 %642, label %647, label %643

643:                                              ; preds = %627
  %644 = and i32 %639, 6
  %645 = icmp eq i32 %644, 2
  %646 = and i1 %548, %645
  br i1 %646, label %647, label %650

647:                                              ; preds = %643, %627
  %648 = load i32, ptr %636, align 8, !tbaa !51
  %649 = add nsw i32 %648, 1
  store i32 %649, ptr %636, align 8, !tbaa !51
  br label %650

650:                                              ; preds = %647, %643
  %651 = icmp eq i32 %640, 1
  %652 = and i1 %546, %651
  br i1 %652, label %655, label %653

653:                                              ; preds = %650
  br i1 %549, label %658, label %654

654:                                              ; preds = %653
  switch i32 %639, label %658 [
    i32 7, label %655
    i32 4, label %655
  ]

655:                                              ; preds = %654, %654, %650
  %656 = load i32, ptr %637, align 4, !tbaa !52
  %657 = add nsw i32 %656, 1
  store i32 %657, ptr %637, align 4, !tbaa !52
  br label %658

658:                                              ; preds = %655, %654, %653
  %659 = load i32, ptr %621, align 4, !tbaa !385
  %660 = icmp slt i32 %659, 2
  br i1 %660, label %689, label %661

661:                                              ; preds = %658
  %662 = and i32 %639, 6
  %663 = icmp eq i32 %662, 2
  %664 = and i1 %548, %663
  %665 = select i1 %642, i1 true, i1 %664
  br label %666

666:                                              ; preds = %685, %661
  %667 = phi ptr [ %634, %661 ], [ %671, %685 ]
  %668 = phi ptr [ %630, %661 ], [ %670, %685 ]
  %669 = phi i32 [ 2, %661 ], [ %686, %685 ]
  %670 = load ptr, ptr %668, align 8, !tbaa !49
  %671 = load ptr, ptr %667, align 8, !tbaa !49
  %672 = getelementptr inbounds %struct.termbox, ptr %670, i64 0, i32 1
  %673 = getelementptr inbounds %struct.termbox, ptr %671, i64 0, i32 1
  %674 = getelementptr inbounds %struct.termbox, ptr %671, i64 0, i32 2
  %675 = load <2 x i32>, ptr %672, align 8, !tbaa !17
  store <2 x i32> %675, ptr %673, align 8, !tbaa !17
  tail call void @move(i32 noundef %639) #44
  tail call void @point(ptr noundef nonnull %673, ptr noundef nonnull %674) #44
  br i1 %665, label %676, label %679

676:                                              ; preds = %666
  %677 = load i32, ptr %673, align 8, !tbaa !51
  %678 = add nsw i32 %677, 1
  store i32 %678, ptr %673, align 8, !tbaa !51
  br label %679

679:                                              ; preds = %676, %666
  br i1 %652, label %682, label %680

680:                                              ; preds = %679
  br i1 %549, label %685, label %681

681:                                              ; preds = %680
  switch i32 %639, label %685 [
    i32 7, label %682
    i32 4, label %682
  ]

682:                                              ; preds = %681, %681, %679
  %683 = load i32, ptr %674, align 4, !tbaa !52
  %684 = add nsw i32 %683, 1
  store i32 %684, ptr %674, align 4, !tbaa !52
  br label %685

685:                                              ; preds = %682, %681, %680
  %686 = add nuw nsw i32 %669, 1
  %687 = load i32, ptr %621, align 4, !tbaa !385
  %688 = icmp slt i32 %669, %687
  br i1 %688, label %666, label %689, !llvm.loop !1003

689:                                              ; preds = %685, %658, %624
  %690 = add nuw nsw i64 %625, 1
  %691 = icmp eq i64 %690, 8
  br i1 %691, label %692, label %624, !llvm.loop !1004

692:                                              ; preds = %689, %620
  %693 = load i32, ptr %279, align 8, !tbaa !227
  %694 = icmp eq i32 %693, 0
  br i1 %694, label %744, label %695

695:                                              ; preds = %692
  %696 = load ptr, ptr %13, align 8, !tbaa !7
  %697 = getelementptr inbounds %struct.tilebox, ptr %696, i64 0, i32 18
  %698 = load ptr, ptr %697, align 8, !tbaa !225
  br label %699

699:                                              ; preds = %740, %695
  %700 = phi i32 [ %693, %695 ], [ %741, %740 ]
  %701 = phi i64 [ 1, %695 ], [ %742, %740 ]
  %702 = icmp eq i64 %701, %551
  br i1 %702, label %740, label %703

703:                                              ; preds = %699
  %704 = getelementptr inbounds %struct.cellbox, ptr %6, i64 0, i32 21, i64 %701
  %705 = load ptr, ptr %704, align 8, !tbaa !7
  %706 = getelementptr inbounds %struct.tilebox, ptr %705, i64 0, i32 18
  %707 = load ptr, ptr %706, align 8, !tbaa !225
  %708 = icmp slt i32 %700, 1
  br i1 %708, label %740, label %709

709:                                              ; preds = %703
  %710 = trunc i64 %701 to i32
  %711 = and i32 %710, 5
  %712 = icmp eq i32 %711, 4
  %713 = and i1 %546, %712
  %714 = and i32 %710, 6
  %715 = icmp eq i32 %714, 2
  %716 = and i1 %548, %715
  %717 = icmp eq i32 %711, 1
  %718 = and i1 %546, %717
  %719 = select i1 %713, i1 true, i1 %716
  br label %720

720:                                              ; preds = %735, %709
  %721 = phi i64 [ 1, %709 ], [ %736, %735 ]
  %722 = getelementptr inbounds %struct.locbox.26, ptr %698, i64 %721
  %723 = getelementptr inbounds %struct.locbox.26, ptr %707, i64 %721
  %724 = getelementptr inbounds %struct.locbox.26, ptr %707, i64 %721, i32 1
  %725 = load <2 x i32>, ptr %722, align 4, !tbaa !17
  store <2 x i32> %725, ptr %723, align 4, !tbaa !17
  tail call void @move(i32 noundef %710) #44
  tail call void @point(ptr noundef nonnull %723, ptr noundef nonnull %724) #44
  br i1 %719, label %726, label %729

726:                                              ; preds = %720
  %727 = load i32, ptr %723, align 4, !tbaa !240
  %728 = add nsw i32 %727, 1
  store i32 %728, ptr %723, align 4, !tbaa !240
  br label %729

729:                                              ; preds = %726, %720
  br i1 %718, label %732, label %730

730:                                              ; preds = %729
  br i1 %549, label %735, label %731

731:                                              ; preds = %730
  switch i32 %710, label %735 [
    i32 7, label %732
    i32 4, label %732
  ]

732:                                              ; preds = %731, %731, %729
  %733 = load i32, ptr %724, align 4, !tbaa !238
  %734 = add nsw i32 %733, 1
  store i32 %734, ptr %724, align 4, !tbaa !238
  br label %735

735:                                              ; preds = %732, %731, %730
  %736 = add nuw nsw i64 %721, 1
  %737 = load i32, ptr %279, align 8, !tbaa !227
  %738 = sext i32 %737 to i64
  %739 = icmp slt i64 %721, %738
  br i1 %739, label %720, label %740, !llvm.loop !1005

740:                                              ; preds = %735, %703, %699
  %741 = phi i32 [ %700, %703 ], [ %700, %699 ], [ %737, %735 ]
  %742 = add nuw nsw i64 %701, 1
  %743 = icmp eq i64 %742, 8
  br i1 %743, label %744, label %699, !llvm.loop !1006

744:                                              ; preds = %740, %692
  %745 = getelementptr inbounds %struct.cellbox, ptr %6, i64 0, i32 13
  store double %1, ptr %745, align 8, !tbaa !237
  store i32 %194, ptr @funccost, align 4, !tbaa !17
  store i32 %73, ptr @penalty, align 4, !tbaa !17
  br label %746

746:                                              ; preds = %744, %200
  %747 = phi i32 [ 1, %744 ], [ 0, %200 ]
  ret i32 %747
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write)
declare double @exp(double noundef) local_unnamed_addr #15

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @ufixnet(ptr noundef readonly %0) #2 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %147, label %3

3:                                                ; preds = %1
  %4 = load ptr, ptr @termarray, align 8, !tbaa !7
  %5 = load ptr, ptr @netarray, align 8, !tbaa !7
  br label %6

6:                                                ; preds = %143, %3
  %7 = phi i32 [ 0, %3 ], [ %144, %143 ]
  %8 = phi ptr [ %0, %3 ], [ %145, %143 ]
  %9 = getelementptr inbounds %struct.termbox, ptr %8, i64 0, i32 5
  %10 = load i32, ptr %9, align 8, !tbaa !53
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds ptr, ptr %4, i64 %11
  %13 = load ptr, ptr %12, align 8, !tbaa !7
  %14 = load i32, ptr %13, align 8, !tbaa !60
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds ptr, ptr %5, i64 %15
  %17 = load ptr, ptr %16, align 8, !tbaa !7
  %18 = getelementptr inbounds %struct.dimbox, ptr %17, i64 0, i32 7
  %19 = load i32, ptr %18, align 8, !tbaa !989
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %143, label %21

21:                                               ; preds = %6
  %22 = getelementptr inbounds %struct.dimbox, ptr %17, i64 0, i32 1
  %23 = load i32, ptr %22, align 8, !tbaa !301
  %24 = icmp eq i32 %23, 1
  br i1 %24, label %143, label %25

25:                                               ; preds = %21
  store i32 0, ptr %18, align 8, !tbaa !989
  br label %26

26:                                               ; preds = %30, %25
  %27 = phi ptr [ %17, %25 ], [ %28, %30 ]
  %28 = load ptr, ptr %27, align 8, !tbaa !7
  %29 = icmp eq ptr %28, null
  br i1 %29, label %102, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.netbox, ptr %28, i64 0, i32 9
  %32 = load i32, ptr %31, align 8, !tbaa !59
  %33 = icmp eq i32 %32, 1
  br i1 %33, label %26, label %34

34:                                               ; preds = %30
  %.lcssa1 = phi ptr [ %28, %30 ]
  %35 = getelementptr inbounds %struct.netbox, ptr %.lcssa1, i64 0, i32 6
  %36 = load i32, ptr %35, align 4, !tbaa !58
  %37 = icmp eq i32 %36, 1
  br i1 %37, label %38, label %43

38:                                               ; preds = %34
  %39 = getelementptr inbounds %struct.netbox, ptr %.lcssa1, i64 0, i32 3
  %40 = load i32, ptr %39, align 8, !tbaa !990
  %41 = getelementptr inbounds %struct.netbox, ptr %.lcssa1, i64 0, i32 4
  %42 = load i32, ptr %41, align 4, !tbaa !991
  store i32 0, ptr %35, align 4, !tbaa !58
  br label %48

43:                                               ; preds = %34
  %44 = getelementptr inbounds %struct.netbox, ptr %.lcssa1, i64 0, i32 1
  %45 = load i32, ptr %44, align 8, !tbaa !64
  %46 = getelementptr inbounds %struct.netbox, ptr %.lcssa1, i64 0, i32 2
  %47 = load i32, ptr %46, align 4, !tbaa !65
  br label %48

48:                                               ; preds = %43, %38
  %49 = phi i32 [ %40, %38 ], [ %45, %43 ]
  %50 = phi i32 [ %42, %38 ], [ %47, %43 ]
  %51 = getelementptr inbounds %struct.dimbox, ptr %17, i64 0, i32 5
  store i32 %49, ptr %51, align 8
  %52 = getelementptr inbounds %struct.dimbox, ptr %17, i64 0, i32 3
  store i32 %49, ptr %52, align 8
  %53 = getelementptr inbounds %struct.dimbox, ptr %17, i64 0, i32 10
  store i32 %50, ptr %53, align 4
  %54 = getelementptr inbounds %struct.dimbox, ptr %17, i64 0, i32 8
  store i32 %50, ptr %54, align 4
  %55 = load ptr, ptr %.lcssa1, align 8, !tbaa !63
  %56 = icmp eq ptr %55, null
  br i1 %56, label %102, label %57

57:                                               ; preds = %48
  %58 = getelementptr inbounds %struct.dimbox, ptr %17, i64 0, i32 3
  %59 = getelementptr inbounds %struct.dimbox, ptr %17, i64 0, i32 5
  %60 = getelementptr inbounds %struct.dimbox, ptr %17, i64 0, i32 8
  %61 = getelementptr inbounds %struct.dimbox, ptr %17, i64 0, i32 10
  br label %62

62:                                               ; preds = %99, %57
  %63 = phi ptr [ %55, %57 ], [ %100, %99 ]
  %64 = getelementptr inbounds %struct.netbox, ptr %63, i64 0, i32 9
  %65 = load i32, ptr %64, align 8, !tbaa !59
  %66 = icmp eq i32 %65, 1
  br i1 %66, label %99, label %67

67:                                               ; preds = %62
  %68 = getelementptr inbounds %struct.netbox, ptr %63, i64 0, i32 6
  %69 = load i32, ptr %68, align 4, !tbaa !58
  %70 = icmp eq i32 %69, 1
  br i1 %70, label %71, label %76

71:                                               ; preds = %67
  %72 = getelementptr inbounds %struct.netbox, ptr %63, i64 0, i32 3
  %73 = load i32, ptr %72, align 8, !tbaa !990
  %74 = getelementptr inbounds %struct.netbox, ptr %63, i64 0, i32 4
  %75 = load i32, ptr %74, align 4, !tbaa !991
  store i32 0, ptr %68, align 4, !tbaa !58
  br label %81

76:                                               ; preds = %67
  %77 = getelementptr inbounds %struct.netbox, ptr %63, i64 0, i32 1
  %78 = load i32, ptr %77, align 8, !tbaa !64
  %79 = getelementptr inbounds %struct.netbox, ptr %63, i64 0, i32 2
  %80 = load i32, ptr %79, align 4, !tbaa !65
  br label %81

81:                                               ; preds = %76, %71
  %82 = phi i32 [ %73, %71 ], [ %78, %76 ]
  %83 = phi i32 [ %75, %71 ], [ %80, %76 ]
  %84 = load i32, ptr %58, align 8, !tbaa !1007
  %85 = icmp slt i32 %82, %84
  br i1 %85, label %89, label %86

86:                                               ; preds = %81
  %87 = load i32, ptr %59, align 8, !tbaa !1008
  %88 = icmp sgt i32 %82, %87
  br i1 %88, label %89, label %91

89:                                               ; preds = %86, %81
  %90 = phi ptr [ %58, %81 ], [ %59, %86 ]
  store i32 %82, ptr %90, align 8, !tbaa !17
  br label %91

91:                                               ; preds = %89, %86
  %92 = load i32, ptr %60, align 4, !tbaa !1009
  %93 = icmp slt i32 %83, %92
  br i1 %93, label %97, label %94

94:                                               ; preds = %91
  %95 = load i32, ptr %61, align 4, !tbaa !1010
  %96 = icmp sgt i32 %83, %95
  br i1 %96, label %97, label %99

97:                                               ; preds = %94, %91
  %98 = phi ptr [ %60, %91 ], [ %61, %94 ]
  store i32 %83, ptr %98, align 4, !tbaa !17
  br label %99

99:                                               ; preds = %97, %94, %62
  %100 = load ptr, ptr %63, align 8, !tbaa !63
  %101 = icmp eq ptr %100, null
  br i1 %101, label %102, label %62, !llvm.loop !1011

102:                                              ; preds = %99, %48, %26
  %103 = getelementptr inbounds %struct.dimbox, ptr %17, i64 0, i32 11
  %104 = load double, ptr %103, align 8, !tbaa !40
  %105 = getelementptr inbounds %struct.dimbox, ptr %17, i64 0, i32 5
  %106 = load i32, ptr %105, align 8, !tbaa !1008
  %107 = getelementptr inbounds %struct.dimbox, ptr %17, i64 0, i32 3
  %108 = load i32, ptr %107, align 8, !tbaa !1007
  %109 = sub nsw i32 %106, %108
  %110 = sitofp i32 %109 to double
  %111 = fmul double %104, %110
  %112 = fptosi double %111 to i32
  %113 = getelementptr inbounds %struct.dimbox, ptr %17, i64 0, i32 4
  %114 = load i32, ptr %113, align 4, !tbaa !302
  %115 = getelementptr inbounds %struct.dimbox, ptr %17, i64 0, i32 2
  %116 = load i32, ptr %115, align 4, !tbaa !303
  %117 = sub nsw i32 %114, %116
  %118 = sitofp i32 %117 to double
  %119 = fmul double %104, %118
  %120 = fptosi double %119 to i32
  %121 = getelementptr inbounds %struct.dimbox, ptr %17, i64 0, i32 12
  %122 = load double, ptr %121, align 8, !tbaa !41
  %123 = getelementptr inbounds %struct.dimbox, ptr %17, i64 0, i32 10
  %124 = load i32, ptr %123, align 4, !tbaa !1010
  %125 = getelementptr inbounds %struct.dimbox, ptr %17, i64 0, i32 8
  %126 = load i32, ptr %125, align 4, !tbaa !1009
  %127 = sub nsw i32 %124, %126
  %128 = sitofp i32 %127 to double
  %129 = fmul double %122, %128
  %130 = fptosi double %129 to i32
  %131 = getelementptr inbounds %struct.dimbox, ptr %17, i64 0, i32 9
  %132 = load i32, ptr %131, align 8, !tbaa !304
  %133 = getelementptr inbounds %struct.dimbox, ptr %17, i64 0, i32 6
  %134 = load i32, ptr %133, align 4, !tbaa !305
  %135 = sub nsw i32 %132, %134
  %136 = sitofp i32 %135 to double
  %137 = fmul double %122, %136
  %138 = fptosi double %137 to i32
  %139 = add i32 %7, %112
  %140 = add i32 %139, %130
  %141 = add i32 %120, %138
  %142 = sub i32 %140, %141
  br label %143

143:                                              ; preds = %102, %21, %6
  %144 = phi i32 [ %7, %6 ], [ %7, %21 ], [ %142, %102 ]
  %145 = load ptr, ptr %8, align 8, !tbaa !49
  %146 = icmp eq ptr %145, null
  br i1 %146, label %147, label %6, !llvm.loop !1012

147:                                              ; preds = %143, %1
  %148 = phi i32 [ 0, %1 ], [ %144, %143 ]
  ret i32 %148
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @ufixpin(ptr noundef readonly %0, i32 noundef %1, i32 noundef %2, i32 noundef %3) #2 {
  %5 = icmp eq i32 %1, 0
  %6 = icmp eq ptr %0, null
  br i1 %5, label %11, label %7

7:                                                ; preds = %4
  br i1 %6, label %70, label %8

8:                                                ; preds = %7
  %9 = load ptr, ptr @termarray, align 8, !tbaa !7
  %10 = load ptr, ptr @netarray, align 8, !tbaa !7
  br label %40

11:                                               ; preds = %4
  br i1 %6, label %70, label %12

12:                                               ; preds = %11
  %13 = load ptr, ptr @termarray, align 8, !tbaa !7
  %14 = load ptr, ptr @netarray, align 8, !tbaa !7
  br label %15

15:                                               ; preds = %15, %12
  %16 = phi ptr [ %0, %12 ], [ %38, %15 ]
  %17 = getelementptr inbounds %struct.termbox, ptr %16, i64 0, i32 5
  %18 = load i32, ptr %17, align 8, !tbaa !53
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds ptr, ptr %13, i64 %19
  %21 = load ptr, ptr %20, align 8, !tbaa !7
  %22 = load i32, ptr %21, align 8, !tbaa !60
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds ptr, ptr %14, i64 %23
  %25 = load ptr, ptr %24, align 8, !tbaa !7
  %26 = getelementptr inbounds %struct.dimbox, ptr %25, i64 0, i32 7
  store i32 1, ptr %26, align 8, !tbaa !989
  %27 = getelementptr inbounds %struct.plist, ptr %21, i64 0, i32 1
  %28 = load ptr, ptr %27, align 8, !tbaa !62
  %29 = getelementptr inbounds %struct.netbox, ptr %28, i64 0, i32 6
  store i32 1, ptr %29, align 4, !tbaa !58
  %30 = getelementptr inbounds %struct.termbox, ptr %16, i64 0, i32 1
  %31 = load i32, ptr %30, align 8, !tbaa !51
  %32 = add nsw i32 %31, %2
  %33 = getelementptr inbounds %struct.netbox, ptr %28, i64 0, i32 3
  store i32 %32, ptr %33, align 8, !tbaa !990
  %34 = getelementptr inbounds %struct.termbox, ptr %16, i64 0, i32 2
  %35 = load i32, ptr %34, align 4, !tbaa !52
  %36 = add nsw i32 %35, %3
  %37 = getelementptr inbounds %struct.netbox, ptr %28, i64 0, i32 4
  store i32 %36, ptr %37, align 4, !tbaa !991
  %38 = load ptr, ptr %16, align 8, !tbaa !49
  %39 = icmp eq ptr %38, null
  br i1 %39, label %70, label %15, !llvm.loop !1013

40:                                               ; preds = %40, %8
  %41 = phi ptr [ %0, %8 ], [ %68, %40 ]
  %42 = getelementptr inbounds %struct.termbox, ptr %41, i64 0, i32 5
  %43 = load i32, ptr %42, align 8, !tbaa !53
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds ptr, ptr %9, i64 %44
  %46 = load ptr, ptr %45, align 8, !tbaa !7
  %47 = load i32, ptr %46, align 8, !tbaa !60
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds ptr, ptr %10, i64 %48
  %50 = load ptr, ptr %49, align 8, !tbaa !7
  %51 = getelementptr inbounds %struct.dimbox, ptr %50, i64 0, i32 3
  %52 = load i32, ptr %51, align 8, !tbaa !1007
  %53 = getelementptr inbounds %struct.dimbox, ptr %50, i64 0, i32 2
  store i32 %52, ptr %53, align 4, !tbaa !303
  %54 = getelementptr inbounds %struct.dimbox, ptr %50, i64 0, i32 5
  %55 = load i32, ptr %54, align 8, !tbaa !1008
  %56 = getelementptr inbounds %struct.dimbox, ptr %50, i64 0, i32 4
  store i32 %55, ptr %56, align 4, !tbaa !302
  %57 = getelementptr inbounds %struct.dimbox, ptr %50, i64 0, i32 8
  %58 = load i32, ptr %57, align 4, !tbaa !1009
  %59 = getelementptr inbounds %struct.dimbox, ptr %50, i64 0, i32 6
  store i32 %58, ptr %59, align 4, !tbaa !305
  %60 = getelementptr inbounds %struct.dimbox, ptr %50, i64 0, i32 10
  %61 = load i32, ptr %60, align 4, !tbaa !1010
  %62 = getelementptr inbounds %struct.dimbox, ptr %50, i64 0, i32 9
  store i32 %61, ptr %62, align 8, !tbaa !304
  %63 = getelementptr inbounds %struct.plist, ptr %46, i64 0, i32 1
  %64 = load ptr, ptr %63, align 8, !tbaa !62
  %65 = getelementptr inbounds %struct.netbox, ptr %64, i64 0, i32 3
  %66 = getelementptr inbounds %struct.netbox, ptr %64, i64 0, i32 1
  %67 = load <2 x i32>, ptr %65, align 8, !tbaa !17
  store <2 x i32> %67, ptr %66, align 8, !tbaa !17
  %68 = load ptr, ptr %41, align 8, !tbaa !49
  %69 = icmp eq ptr %68, null
  br i1 %69, label %70, label %40, !llvm.loop !1014

70:                                               ; preds = %40, %15, %11, %7
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @uloop() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #47
  store i32 0, ptr @flips, align 4, !tbaa !17
  store i32 0, ptr @flipp, align 4, !tbaa !17
  store i32 0, ptr @attp, align 4, !tbaa !17
  %3 = load i32, ptr @rangeLimit, align 4, !tbaa !17
  %4 = load i32, ptr @count, align 4, !tbaa !17
  %5 = icmp slt i32 %4, 1
  br i1 %5, label %6, label %17

6:                                                ; preds = %0
  %7 = load ptr, ptr @fpo, align 8, !tbaa !7
  %8 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %7, ptr noundef nonnull @.str.878, i32 noundef %3) #43
  %9 = load ptr, ptr @fpo, align 8, !tbaa !7
  %10 = load i32, ptr @bdxlength, align 4, !tbaa !17
  %11 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %9, ptr noundef nonnull @.str.1.879, i32 noundef %10) #43
  %12 = load ptr, ptr @fpo, align 8, !tbaa !7
  %13 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %12, ptr noundef nonnull @.str.2.880, i32 noundef %3) #43
  %14 = load ptr, ptr @fpo, align 8, !tbaa !7
  %15 = load i32, ptr @bdylength, align 4, !tbaa !17
  %16 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %14, ptr noundef nonnull @.str.3.881, i32 noundef %15) #43
  br label %17

17:                                               ; preds = %6, %0
  %18 = load i32, ptr @attmax, align 4, !tbaa !17
  %19 = icmp sgt i32 %18, 0
  br i1 %19, label %20, label %823

20:                                               ; preds = %807, %17
  %21 = phi i32 [ %820, %807 ], [ 0, %17 ]
  %22 = phi i32 [ %819, %807 ], [ 0, %17 ]
  %23 = phi i32 [ %818, %807 ], [ 0, %17 ]
  %24 = phi i32 [ %817, %807 ], [ 0, %17 ]
  %25 = phi i32 [ %816, %807 ], [ 0, %17 ]
  %26 = phi i32 [ %815, %807 ], [ 0, %17 ]
  %27 = phi i32 [ %814, %807 ], [ 0, %17 ]
  %28 = phi i32 [ %813, %807 ], [ 0, %17 ]
  %29 = phi i32 [ %812, %807 ], [ 0, %17 ]
  %30 = phi i32 [ %811, %807 ], [ 0, %17 ]
  %31 = phi i32 [ %810, %807 ], [ 0, %17 ]
  %32 = phi i32 [ %809, %807 ], [ 0, %17 ]
  %33 = phi i32 [ %808, %807 ], [ 0, %17 ]
  %34 = load i32, ptr @randVar, align 4, !tbaa !17
  %35 = load i32, ptr @choose, align 4, !tbaa !17
  %36 = sitofp i32 %35 to double
  %37 = load i32, ptr @bigcell, align 4, !tbaa !17
  %38 = sitofp i32 %37 to double
  %39 = load i32, ptr @toobig, align 4, !tbaa !17
  %40 = load ptr, ptr @cellarray, align 8
  %41 = load i32, ptr @numcells, align 4
  br label %42

42:                                               ; preds = %52, %20
  %43 = phi i32 [ %34, %20 ], [ %53, %52 ]
  %44 = mul nsw i32 %43, 1103515245
  %45 = add nsw i32 %44, 12345
  %46 = and i32 %45, 2147483647
  %47 = sitofp i32 %46 to double
  %48 = fdiv double %47, 0x41DFFFFFFFC00000
  %49 = fmul double %48, %36
  %50 = fptosi double %49 to i32
  %51 = icmp eq i32 %35, %50
  br i1 %51, label %52, label %54

52:                                               ; preds = %248, %246, %92, %65, %42
  %53 = phi i32 [ %45, %42 ], [ %.lcssa6, %246 ], [ %.lcssa6, %248 ], [ %.lcssa6, %65 ], [ %.lcssa6, %92 ]
  br label %42, !llvm.loop !1015

54:                                               ; preds = %54, %42
  %55 = phi i32 [ %57, %54 ], [ %45, %42 ]
  %56 = mul nsw i32 %55, 1103515245
  %57 = add nsw i32 %56, 12345
  %58 = and i32 %57, 2147483647
  %59 = sitofp i32 %58 to double
  %60 = fdiv double %59, 0x41DFFFFFFFC00000
  %61 = fmul double %60, %38
  %62 = fptosi double %61 to i32
  %63 = add nsw i32 %62, 1
  %64 = icmp eq i32 %63, %39
  br i1 %64, label %54, label %65, !llvm.loop !1016

65:                                               ; preds = %54
  %.lcssa6 = phi i32 [ %57, %54 ]
  %.lcssa3 = phi i32 [ %62, %54 ]
  %.lcssa = phi i32 [ %63, %54 ]
  %66 = add nsw i32 %50, 1
  %67 = icmp eq i32 %50, %.lcssa3
  br i1 %67, label %52, label %68

68:                                               ; preds = %65
  %69 = sext i32 %66 to i64
  %70 = getelementptr inbounds ptr, ptr %40, i64 %69
  %71 = load ptr, ptr %70, align 8, !tbaa !7
  %72 = icmp sle i32 %41, %50
  %73 = icmp sgt i32 %41, %.lcssa3
  %74 = and i1 %72, %73
  br i1 %74, label %75, label %88

75:                                               ; preds = %68
  %.lcssa15 = phi ptr [ %71, %68 ]
  %.lcssa12 = phi i32 [ %66, %68 ]
  %.lcssa6.lcssa = phi i32 [ %.lcssa6, %68 ]
  store i32 %.lcssa6.lcssa, ptr @randVar, align 4, !tbaa !17
  %76 = tail call i32 @newOrient(ptr noundef nonnull %.lcssa15, i32 noundef 8) #44
  %77 = icmp sgt i32 %76, -1
  br i1 %77, label %78, label %807

78:                                               ; preds = %75
  %79 = tail call i32 @usite0(i32 noundef %.lcssa12, i32 noundef %76) #44
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %85, label %81

81:                                               ; preds = %78
  %82 = load i32, ptr @flips, align 4, !tbaa !17
  %83 = add nsw i32 %82, 1
  store i32 %83, ptr @flips, align 4, !tbaa !17
  %84 = add nsw i32 %33, 1
  br label %85

85:                                               ; preds = %81, %78
  %86 = phi i32 [ %84, %81 ], [ %33, %78 ]
  %87 = add nsw i32 %27, 1
  br label %807

88:                                               ; preds = %68
  %89 = or i1 %72, %73
  %90 = getelementptr inbounds %struct.cellbox, ptr %71, i64 0, i32 1
  %91 = load i32, ptr %90, align 8, !tbaa !378
  br i1 %89, label %246, label %92

92:                                               ; preds = %88
  %93 = icmp eq i32 %91, 0
  br i1 %93, label %94, label %52

94:                                               ; preds = %92
  %.lcssa16 = phi ptr [ %71, %92 ]
  %.lcssa13 = phi i32 [ %66, %92 ]
  %.lcssa6.lcssa7 = phi i32 [ %.lcssa6, %92 ]
  %95 = getelementptr inbounds %struct.cellbox, ptr %.lcssa16, i64 0, i32 5
  %96 = load i32, ptr %95, align 8, !tbaa !45
  store i32 %.lcssa6.lcssa7, ptr @randVar, align 4, !tbaa !17
  %97 = getelementptr inbounds %struct.cellbox, ptr %.lcssa16, i64 0, i32 2
  %98 = load i32, ptr %97, align 4, !tbaa !164
  %99 = getelementptr inbounds %struct.cellbox, ptr %.lcssa16, i64 0, i32 3
  %100 = load i32, ptr %99, align 8, !tbaa !165
  %101 = sub nsw i32 %98, %3
  %102 = load i32, ptr @blockl, align 4
  %103 = icmp slt i32 %101, %102
  %104 = load i32, ptr @blockr, align 4
  %105 = tail call i32 @llvm.smin.i32(i32 %101, i32 %104)
  %106 = select i1 %103, i32 %102, i32 %105
  %107 = add nsw i32 %98, %3
  %108 = icmp sgt i32 %107, %104
  %109 = tail call i32 @llvm.smax.i32(i32 %107, i32 %102)
  %110 = select i1 %108, i32 %104, i32 %109
  %111 = sub nsw i32 %100, %3
  %112 = load i32, ptr @blockb, align 4
  %113 = icmp slt i32 %111, %112
  %114 = load i32, ptr @blockt, align 4
  %115 = tail call i32 @llvm.smin.i32(i32 %111, i32 %114)
  %116 = select i1 %113, i32 %112, i32 %115
  %117 = add nsw i32 %100, %3
  %118 = icmp sgt i32 %117, %114
  %119 = tail call i32 @llvm.smax.i32(i32 %117, i32 %112)
  %120 = select i1 %118, i32 %114, i32 %119
  call void @pickSpot(ptr noundef nonnull %.lcssa16, i32 noundef %96, i32 noundef %106, i32 noundef %110, i32 noundef %116, i32 noundef %120, ptr noundef nonnull %1, ptr noundef nonnull %2) #43
  %121 = load i32, ptr @gridGiven, align 4, !tbaa !17
  %122 = icmp eq i32 %121, 0
  %123 = load i32, ptr %1, align 4, !tbaa !17
  %124 = load i32, ptr %2, align 4, !tbaa !17
  br i1 %122, label %143, label %125

125:                                              ; preds = %94
  %126 = sext i32 %96 to i64
  %127 = getelementptr inbounds %struct.cellbox, ptr %.lcssa16, i64 0, i32 21, i64 %126
  %128 = load ptr, ptr %127, align 8, !tbaa !7
  %129 = getelementptr inbounds %struct.tilebox, ptr %128, i64 0, i32 17
  %130 = load ptr, ptr %129, align 8, !tbaa !47
  %131 = getelementptr inbounds %struct.termbox, ptr %130, i64 0, i32 1
  %132 = load i32, ptr %131, align 8, !tbaa !51
  %133 = add nsw i32 %132, %123
  %134 = getelementptr inbounds %struct.termbox, ptr %130, i64 0, i32 2
  %135 = load i32, ptr %134, align 4, !tbaa !52
  %136 = add nsw i32 %135, %124
  tail call void @forceGrid(i32 noundef %133, i32 noundef %136) #43
  %137 = load i32, ptr @newxx, align 4, !tbaa !17
  %138 = load i32, ptr %131, align 8, !tbaa !51
  %139 = sub nsw i32 %137, %138
  store i32 %139, ptr %1, align 4, !tbaa !17
  %140 = load i32, ptr @newyy, align 4, !tbaa !17
  %141 = load i32, ptr %134, align 4, !tbaa !52
  %142 = sub nsw i32 %140, %141
  store i32 %142, ptr %2, align 4, !tbaa !17
  br label %143

143:                                              ; preds = %125, %94
  %144 = phi i32 [ %142, %125 ], [ %124, %94 ]
  %145 = phi i32 [ %139, %125 ], [ %123, %94 ]
  %146 = tail call i32 @usite1(i32 noundef %.lcssa13, i32 noundef %145, i32 noundef %144) #44
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %152, label %148

148:                                              ; preds = %143
  %149 = load i32, ptr @flips, align 4, !tbaa !17
  %150 = add nsw i32 %149, 1
  store i32 %150, ptr @flips, align 4, !tbaa !17
  %151 = add nsw i32 %28, 1
  tail call void @fixSpot(ptr noundef nonnull %.lcssa16, i32 noundef %98, i32 noundef %100, i32 noundef %96) #43
  br label %179

152:                                              ; preds = %143
  %153 = tail call i32 @newOrient(ptr noundef nonnull %.lcssa16, i32 noundef 4) #44
  %154 = icmp sgt i32 %153, -1
  br i1 %154, label %155, label %165

155:                                              ; preds = %152
  %156 = tail call i32 @usiteo1(i32 noundef %.lcssa13, i32 noundef %145, i32 noundef %144, i32 noundef %153) #44
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %158, label %160

158:                                              ; preds = %155
  %159 = add nsw i32 %26, 1
  br label %165

160:                                              ; preds = %155
  %161 = load i32, ptr @flips, align 4, !tbaa !17
  %162 = add nsw i32 %161, 1
  store i32 %162, ptr @flips, align 4, !tbaa !17
  %163 = add nsw i32 %32, 1
  %164 = add nsw i32 %26, 1
  tail call void @fixSpot(ptr noundef nonnull %.lcssa16, i32 noundef %98, i32 noundef %100, i32 noundef %96) #43
  br label %179

165:                                              ; preds = %158, %152
  %166 = phi i32 [ %26, %152 ], [ %159, %158 ]
  %167 = tail call i32 @newOrient(ptr noundef nonnull %.lcssa16, i32 noundef 8) #44
  %168 = icmp sgt i32 %167, -1
  br i1 %168, label %169, label %179

169:                                              ; preds = %165
  %170 = tail call i32 @usite0(i32 noundef %.lcssa13, i32 noundef %167) #44
  %171 = icmp eq i32 %170, 0
  br i1 %171, label %177, label %172

172:                                              ; preds = %169
  %173 = load i32, ptr @flips, align 4, !tbaa !17
  %174 = add nsw i32 %173, 1
  store i32 %174, ptr @flips, align 4, !tbaa !17
  %175 = add nsw i32 %33, 1
  %176 = add nsw i32 %27, 1
  tail call void @fixSpot(ptr noundef nonnull %.lcssa16, i32 noundef %98, i32 noundef %100, i32 noundef %96) #43
  br label %179

177:                                              ; preds = %169
  %178 = add nsw i32 %27, 1
  br label %179

179:                                              ; preds = %177, %172, %165, %160, %148
  %180 = phi i32 [ %33, %148 ], [ %175, %172 ], [ %33, %177 ], [ %33, %165 ], [ %33, %160 ]
  %181 = phi i32 [ %32, %148 ], [ %32, %172 ], [ %32, %177 ], [ %32, %165 ], [ %163, %160 ]
  %182 = phi i32 [ %151, %148 ], [ %28, %172 ], [ %28, %177 ], [ %28, %165 ], [ %28, %160 ]
  %183 = phi i32 [ %27, %148 ], [ %176, %172 ], [ %178, %177 ], [ %27, %165 ], [ %27, %160 ]
  %184 = phi i32 [ %26, %148 ], [ %166, %172 ], [ %166, %177 ], [ %166, %165 ], [ %164, %160 ]
  %185 = add nsw i32 %21, 1
  %186 = add nsw i32 %22, 1
  %187 = getelementptr inbounds %struct.cellbox, ptr %.lcssa16, i64 0, i32 18
  %188 = load i32, ptr %187, align 4, !tbaa !223
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %199, label %190

190:                                              ; preds = %179
  %191 = getelementptr inbounds %struct.cellbox, ptr %.lcssa16, i64 0, i32 9
  %192 = load i32, ptr %191, align 8, !tbaa !379
  %193 = icmp slt i32 %192, 1
  br i1 %193, label %199, label %194

194:                                              ; preds = %194, %190
  %195 = phi i32 [ %196, %194 ], [ 1, %190 ]
  tail call void @selectpin(ptr noundef nonnull %.lcssa16) #44
  %196 = add nuw nsw i32 %195, 1
  %197 = load i32, ptr %191, align 8, !tbaa !379
  %198 = icmp slt i32 %195, %197
  br i1 %198, label %194, label %199, !llvm.loop !1017

199:                                              ; preds = %194, %190, %179
  %200 = getelementptr inbounds %struct.cellbox, ptr %.lcssa16, i64 0, i32 10
  %201 = load i32, ptr %200, align 4, !tbaa !297
  %202 = icmp eq i32 %201, 0
  br i1 %202, label %807, label %203

203:                                              ; preds = %199
  %204 = getelementptr inbounds %struct.cellbox, ptr %.lcssa16, i64 0, i32 15
  %205 = load double, ptr %204, align 8, !tbaa !575
  %206 = getelementptr inbounds %struct.cellbox, ptr %.lcssa16, i64 0, i32 16
  %207 = load double, ptr %206, align 8, !tbaa !574
  %208 = fadd double %207, 1.000000e-02
  %209 = fcmp ogt double %205, %208
  br i1 %209, label %210, label %807

210:                                              ; preds = %203
  %211 = fsub double %205, %207
  %212 = load i32, ptr @randVar, align 4, !tbaa !17
  %213 = mul nsw i32 %212, 1103515245
  %214 = add nsw i32 %213, 12345
  store i32 %214, ptr @randVar, align 4, !tbaa !17
  %215 = and i32 %214, 2147483647
  %216 = sitofp i32 %215 to double
  %217 = fdiv double %216, 0x41DFFFFFFFC00000
  %218 = tail call double @llvm.fmuladd.f64(double %211, double %217, double %207)
  %219 = load i32, ptr %97, align 4, !tbaa !164
  %220 = load i32, ptr %99, align 8, !tbaa !165
  %221 = load i32, ptr %95, align 8, !tbaa !45
  %222 = sext i32 %221 to i64
  %223 = getelementptr inbounds %struct.cellbox, ptr %.lcssa16, i64 0, i32 21, i64 %222
  %224 = load ptr, ptr %223, align 8, !tbaa !7
  %225 = getelementptr inbounds %struct.tilebox, ptr %224, i64 0, i32 9
  %226 = load i32, ptr %225, align 8, !tbaa !167
  %227 = getelementptr inbounds %struct.tilebox, ptr %224, i64 0, i32 10
  %228 = load i32, ptr %227, align 4, !tbaa !168
  %229 = getelementptr inbounds %struct.tilebox, ptr %224, i64 0, i32 11
  %230 = load i32, ptr %229, align 8, !tbaa !169
  %231 = getelementptr inbounds %struct.tilebox, ptr %224, i64 0, i32 12
  %232 = load i32, ptr %231, align 4, !tbaa !170
  %233 = tail call i32 @uaspect(i32 noundef %.lcssa13, double noundef %218) #44
  %234 = icmp eq i32 %233, 0
  br i1 %234, label %243, label %235

235:                                              ; preds = %210
  %236 = add nsw i32 %232, %220
  %237 = add nsw i32 %230, %220
  %238 = add nsw i32 %228, %219
  %239 = add nsw i32 %226, %219
  %240 = load i32, ptr @flips, align 4, !tbaa !17
  %241 = add nsw i32 %240, 1
  store i32 %241, ptr @flips, align 4, !tbaa !17
  %242 = add nsw i32 %29, 1
  tail call void @fixSpotAsp(ptr noundef nonnull %.lcssa16, i32 noundef %239, i32 noundef %238, i32 noundef %237, i32 noundef %236) #43
  br label %243

243:                                              ; preds = %235, %210
  %244 = phi i32 [ %242, %235 ], [ %29, %210 ]
  %245 = add nsw i32 %23, 1
  br label %807

246:                                              ; preds = %88
  %247 = icmp eq i32 %91, -1
  br i1 %247, label %52, label %248

248:                                              ; preds = %246
  %249 = sext i32 %.lcssa to i64
  %250 = getelementptr inbounds ptr, ptr %40, i64 %249
  %251 = load ptr, ptr %250, align 8, !tbaa !7
  %252 = getelementptr inbounds %struct.cellbox, ptr %251, i64 0, i32 1
  %253 = load i32, ptr %252, align 8, !tbaa !378
  %254 = icmp ne i32 %253, -1
  %255 = icmp eq i32 %91, %253
  %256 = and i1 %254, %255
  br i1 %256, label %257, label %52

257:                                              ; preds = %248
  %.lcssa18 = phi ptr [ %251, %248 ]
  %.lcssa17 = phi ptr [ %71, %248 ]
  %.lcssa14 = phi i32 [ %66, %248 ]
  %.lcssa11 = phi i32 [ %50, %248 ]
  %.lcssa6.lcssa8 = phi i32 [ %.lcssa6, %248 ]
  %.lcssa3.lcssa5 = phi i32 [ %.lcssa3, %248 ]
  %.lcssa.lcssa2 = phi i32 [ %.lcssa, %248 ]
  %258 = getelementptr inbounds %struct.cellbox, ptr %.lcssa17, i64 0, i32 5
  %259 = load i32, ptr %258, align 8, !tbaa !45
  %260 = getelementptr inbounds %struct.cellbox, ptr %.lcssa18, i64 0, i32 5
  %261 = load i32, ptr %260, align 8, !tbaa !45
  store i32 %.lcssa6.lcssa8, ptr @randVar, align 4, !tbaa !17
  %262 = load i32, ptr @gridGiven, align 4, !tbaa !17
  %263 = icmp eq i32 %262, 0
  br i1 %263, label %308, label %264

264:                                              ; preds = %257
  %265 = sext i32 %261 to i64
  %266 = getelementptr inbounds %struct.cellbox, ptr %.lcssa18, i64 0, i32 21, i64 %265
  %267 = load ptr, ptr %266, align 8, !tbaa !7
  %268 = getelementptr inbounds %struct.tilebox, ptr %267, i64 0, i32 17
  %269 = load ptr, ptr %268, align 8, !tbaa !47
  %270 = sext i32 %259 to i64
  %271 = getelementptr inbounds %struct.cellbox, ptr %.lcssa17, i64 0, i32 21, i64 %270
  %272 = load ptr, ptr %271, align 8, !tbaa !7
  %273 = getelementptr inbounds %struct.tilebox, ptr %272, i64 0, i32 17
  %274 = load ptr, ptr %273, align 8, !tbaa !47
  %275 = getelementptr inbounds %struct.cellbox, ptr %.lcssa18, i64 0, i32 2
  %276 = load i32, ptr %275, align 4, !tbaa !164
  %277 = getelementptr inbounds %struct.termbox, ptr %274, i64 0, i32 1
  %278 = load i32, ptr %277, align 8, !tbaa !51
  %279 = add nsw i32 %278, %276
  %280 = getelementptr inbounds %struct.cellbox, ptr %.lcssa18, i64 0, i32 3
  %281 = load i32, ptr %280, align 8, !tbaa !165
  %282 = getelementptr inbounds %struct.termbox, ptr %274, i64 0, i32 2
  %283 = load i32, ptr %282, align 4, !tbaa !52
  %284 = add nsw i32 %283, %281
  tail call void @forceGrid(i32 noundef %279, i32 noundef %284) #43
  %285 = load i32, ptr @newxx, align 4, !tbaa !17
  %286 = load i32, ptr %277, align 8, !tbaa !51
  %287 = sub nsw i32 %285, %286
  %288 = load i32, ptr @newyy, align 4, !tbaa !17
  %289 = load i32, ptr %282, align 4, !tbaa !52
  %290 = sub nsw i32 %288, %289
  %291 = getelementptr inbounds %struct.cellbox, ptr %.lcssa17, i64 0, i32 2
  %292 = load i32, ptr %291, align 4, !tbaa !164
  %293 = getelementptr inbounds %struct.termbox, ptr %269, i64 0, i32 1
  %294 = load i32, ptr %293, align 8, !tbaa !51
  %295 = add nsw i32 %294, %292
  %296 = getelementptr inbounds %struct.cellbox, ptr %.lcssa17, i64 0, i32 3
  %297 = load i32, ptr %296, align 8, !tbaa !165
  %298 = getelementptr inbounds %struct.termbox, ptr %269, i64 0, i32 2
  %299 = load i32, ptr %298, align 4, !tbaa !52
  %300 = add nsw i32 %299, %297
  tail call void @forceGrid(i32 noundef %295, i32 noundef %300) #43
  %301 = load i32, ptr @newxx, align 4, !tbaa !17
  %302 = load i32, ptr %293, align 8, !tbaa !51
  %303 = sub nsw i32 %301, %302
  %304 = load i32, ptr @newyy, align 4, !tbaa !17
  %305 = load i32, ptr %298, align 4, !tbaa !52
  %306 = sub nsw i32 %304, %305
  %307 = load i32, ptr @numcells, align 4, !tbaa !17
  br label %318

308:                                              ; preds = %257
  %309 = getelementptr inbounds %struct.cellbox, ptr %.lcssa18, i64 0, i32 2
  %310 = load i32, ptr %309, align 4, !tbaa !164
  %311 = getelementptr inbounds %struct.cellbox, ptr %.lcssa18, i64 0, i32 3
  %312 = load i32, ptr %311, align 8, !tbaa !165
  %313 = getelementptr inbounds %struct.cellbox, ptr %.lcssa17, i64 0, i32 2
  %314 = load i32, ptr %313, align 4, !tbaa !164
  %315 = getelementptr inbounds %struct.cellbox, ptr %.lcssa17, i64 0, i32 3
  %316 = load i32, ptr %315, align 8, !tbaa !165
  %317 = sext i32 %259 to i64
  br label %318

318:                                              ; preds = %308, %264
  %319 = phi i32 [ %41, %308 ], [ %307, %264 ]
  %320 = phi i64 [ %317, %308 ], [ %270, %264 ]
  %321 = phi i32 [ %310, %308 ], [ %287, %264 ]
  %322 = phi i32 [ %312, %308 ], [ %290, %264 ]
  %323 = phi i32 [ %314, %308 ], [ %303, %264 ]
  %324 = phi i32 [ %316, %308 ], [ %306, %264 ]
  %325 = getelementptr inbounds %struct.cellbox, ptr %.lcssa17, i64 0, i32 21, i64 %320
  %326 = load ptr, ptr %325, align 8, !tbaa !7
  %327 = getelementptr inbounds %struct.tilebox, ptr %326, i64 0, i32 9
  %328 = load i32, ptr %327, align 8, !tbaa !167
  %329 = add nsw i32 %328, %321
  %330 = getelementptr inbounds %struct.tilebox, ptr %326, i64 0, i32 10
  %331 = load i32, ptr %330, align 4, !tbaa !168
  %332 = add nsw i32 %331, %321
  %333 = getelementptr inbounds %struct.tilebox, ptr %326, i64 0, i32 11
  %334 = load i32, ptr %333, align 8, !tbaa !169
  %335 = add nsw i32 %334, %322
  %336 = getelementptr inbounds %struct.tilebox, ptr %326, i64 0, i32 12
  %337 = load i32, ptr %336, align 4, !tbaa !170
  %338 = add nsw i32 %337, %322
  %339 = icmp sgt i32 %319, %.lcssa11
  br i1 %339, label %340, label %358

340:                                              ; preds = %318
  %341 = getelementptr inbounds %struct.tilebox, ptr %326, i64 0, i32 1
  %342 = load double, ptr %341, align 8, !tbaa !292
  %343 = tail call i32 @wireestx(i32 noundef %329, i32 noundef %335, i32 noundef %338, double noundef %342) #44
  %344 = sub nsw i32 %329, %343
  %345 = getelementptr inbounds %struct.tilebox, ptr %326, i64 0, i32 2
  %346 = load double, ptr %345, align 8, !tbaa !293
  %347 = tail call i32 @wireestx(i32 noundef %332, i32 noundef %335, i32 noundef %338, double noundef %346) #44
  %348 = add nsw i32 %347, %332
  %349 = getelementptr inbounds %struct.tilebox, ptr %326, i64 0, i32 3
  %350 = load double, ptr %349, align 8, !tbaa !294
  %351 = tail call i32 @wireesty(i32 noundef %335, i32 noundef %344, i32 noundef %348, double noundef %350) #44
  %352 = sub nsw i32 %335, %351
  %353 = getelementptr inbounds %struct.tilebox, ptr %326, i64 0, i32 4
  %354 = load double, ptr %353, align 8, !tbaa !295
  %355 = tail call i32 @wireesty(i32 noundef %338, i32 noundef %344, i32 noundef %348, double noundef %354) #44
  %356 = add nsw i32 %355, %338
  %357 = load i32, ptr @numcells, align 4, !tbaa !17
  br label %358

358:                                              ; preds = %340, %318
  %359 = phi i32 [ %357, %340 ], [ %319, %318 ]
  %360 = phi i32 [ %344, %340 ], [ %329, %318 ]
  %361 = phi i32 [ %348, %340 ], [ %332, %318 ]
  %362 = phi i32 [ %352, %340 ], [ %335, %318 ]
  %363 = phi i32 [ %356, %340 ], [ %338, %318 ]
  %364 = load i32, ptr %260, align 8, !tbaa !45
  %365 = sext i32 %364 to i64
  %366 = getelementptr inbounds %struct.cellbox, ptr %.lcssa18, i64 0, i32 21, i64 %365
  %367 = load ptr, ptr %366, align 8, !tbaa !7
  %368 = getelementptr inbounds %struct.tilebox, ptr %367, i64 0, i32 9
  %369 = load i32, ptr %368, align 8, !tbaa !167
  %370 = add nsw i32 %369, %323
  %371 = getelementptr inbounds %struct.tilebox, ptr %367, i64 0, i32 10
  %372 = load i32, ptr %371, align 4, !tbaa !168
  %373 = add nsw i32 %372, %323
  %374 = getelementptr inbounds %struct.tilebox, ptr %367, i64 0, i32 11
  %375 = load i32, ptr %374, align 8, !tbaa !169
  %376 = add nsw i32 %375, %324
  %377 = getelementptr inbounds %struct.tilebox, ptr %367, i64 0, i32 12
  %378 = load i32, ptr %377, align 4, !tbaa !170
  %379 = add nsw i32 %378, %324
  %380 = icmp sgt i32 %359, %.lcssa3.lcssa5
  br i1 %380, label %381, label %398

381:                                              ; preds = %358
  %382 = getelementptr inbounds %struct.tilebox, ptr %367, i64 0, i32 1
  %383 = load double, ptr %382, align 8, !tbaa !292
  %384 = tail call i32 @wireestx(i32 noundef %370, i32 noundef %376, i32 noundef %379, double noundef %383) #44
  %385 = sub nsw i32 %370, %384
  %386 = getelementptr inbounds %struct.tilebox, ptr %367, i64 0, i32 2
  %387 = load double, ptr %386, align 8, !tbaa !293
  %388 = tail call i32 @wireestx(i32 noundef %373, i32 noundef %376, i32 noundef %379, double noundef %387) #44
  %389 = add nsw i32 %388, %373
  %390 = getelementptr inbounds %struct.tilebox, ptr %367, i64 0, i32 3
  %391 = load double, ptr %390, align 8, !tbaa !294
  %392 = tail call i32 @wireesty(i32 noundef %376, i32 noundef %385, i32 noundef %389, double noundef %391) #44
  %393 = sub nsw i32 %376, %392
  %394 = getelementptr inbounds %struct.tilebox, ptr %367, i64 0, i32 4
  %395 = load double, ptr %394, align 8, !tbaa !295
  %396 = tail call i32 @wireesty(i32 noundef %379, i32 noundef %385, i32 noundef %389, double noundef %395) #44
  %397 = add nsw i32 %396, %379
  br label %398

398:                                              ; preds = %381, %358
  %399 = phi i32 [ %393, %381 ], [ %376, %358 ]
  %400 = phi i32 [ %385, %381 ], [ %370, %358 ]
  %401 = phi i32 [ %389, %381 ], [ %373, %358 ]
  %402 = phi i32 [ %397, %381 ], [ %379, %358 ]
  %403 = icmp slt i32 %400, %361
  %404 = icmp slt i32 %360, %401
  %405 = select i1 %403, i1 %404, i1 false
  %406 = icmp slt i32 %399, %363
  %407 = select i1 %405, i1 %406, i1 false
  %408 = icmp slt i32 %362, %402
  %409 = select i1 %407, i1 %408, i1 false
  br i1 %409, label %514, label %410

410:                                              ; preds = %398
  %411 = sub nsw i32 %361, %400
  %412 = icmp slt i32 %411, 1000000
  %413 = tail call i32 @llvm.smin.i32(i32 %411, i32 1000000)
  %414 = select i1 %403, i32 %413, i32 1000000
  %415 = select i1 %403, i1 %412, i1 false
  %416 = zext i1 %415 to i32
  %417 = sub nsw i32 %401, %360
  %418 = icmp slt i32 %417, %414
  %419 = tail call i32 @llvm.smin.i32(i32 %417, i32 %414)
  %420 = select i1 %404, i32 %419, i32 %414
  %421 = select i1 %404, i1 %418, i1 false
  %422 = select i1 %421, i32 2, i32 %416
  %423 = sub nsw i32 %363, %399
  %424 = icmp slt i32 %423, %420
  %425 = tail call i32 @llvm.smin.i32(i32 %423, i32 %420)
  %426 = select i1 %406, i32 %425, i32 %420
  %427 = select i1 %406, i1 %424, i1 false
  %428 = select i1 %427, i32 3, i32 %422
  br i1 %408, label %429, label %435

429:                                              ; preds = %410
  %430 = sub nsw i32 %402, %362
  %431 = icmp slt i32 %430, %426
  br i1 %431, label %432, label %435

432:                                              ; preds = %429
  %433 = sdiv i32 %430, 2
  %434 = sub nsw i32 %430, %433
  br label %494

435:                                              ; preds = %429, %410
  %436 = icmp eq i32 %428, 0
  br i1 %436, label %514, label %437

437:                                              ; preds = %435
  %438 = sdiv i32 %426, 2
  %439 = sub nsw i32 %426, %438
  switch i32 %428, label %494 [
    i32 1, label %440
    i32 2, label %458
    i32 3, label %476
  ]

440:                                              ; preds = %437
  %441 = add nsw i32 %438, %323
  %442 = sub nsw i32 %321, %439
  %443 = add nsw i32 %438, %401
  %444 = load i32, ptr @blockr, align 4, !tbaa !17
  %445 = icmp sgt i32 %443, %444
  br i1 %445, label %446, label %450

446:                                              ; preds = %440
  %447 = sub nsw i32 %443, %444
  %448 = sub nsw i32 %441, %447
  %449 = sub nsw i32 %442, %447
  br label %514

450:                                              ; preds = %440
  %451 = sub nsw i32 %360, %439
  %452 = load i32, ptr @blockl, align 4, !tbaa !17
  %453 = icmp slt i32 %451, %452
  br i1 %453, label %454, label %514

454:                                              ; preds = %450
  %455 = sub nsw i32 %452, %451
  %456 = add nsw i32 %455, %441
  %457 = add nsw i32 %455, %442
  br label %514

458:                                              ; preds = %437
  %459 = add nsw i32 %438, %321
  %460 = sub nsw i32 %323, %439
  %461 = add nsw i32 %438, %361
  %462 = load i32, ptr @blockr, align 4, !tbaa !17
  %463 = icmp sgt i32 %461, %462
  br i1 %463, label %464, label %468

464:                                              ; preds = %458
  %465 = sub nsw i32 %461, %462
  %466 = sub nsw i32 %460, %465
  %467 = sub nsw i32 %459, %465
  br label %514

468:                                              ; preds = %458
  %469 = sub nsw i32 %400, %439
  %470 = load i32, ptr @blockl, align 4, !tbaa !17
  %471 = icmp slt i32 %469, %470
  br i1 %471, label %472, label %514

472:                                              ; preds = %468
  %473 = sub nsw i32 %470, %469
  %474 = add nsw i32 %473, %460
  %475 = add nsw i32 %473, %459
  br label %514

476:                                              ; preds = %437
  %477 = add nsw i32 %438, %324
  %478 = sub nsw i32 %322, %439
  %479 = add nsw i32 %438, %402
  %480 = load i32, ptr @blockt, align 4, !tbaa !17
  %481 = icmp sgt i32 %479, %480
  br i1 %481, label %482, label %486

482:                                              ; preds = %476
  %483 = sub nsw i32 %479, %480
  %484 = sub nsw i32 %477, %483
  %485 = sub nsw i32 %478, %483
  br label %514

486:                                              ; preds = %476
  %487 = sub nsw i32 %362, %439
  %488 = load i32, ptr @blockb, align 4, !tbaa !17
  %489 = icmp slt i32 %487, %488
  br i1 %489, label %490, label %514

490:                                              ; preds = %486
  %491 = sub nsw i32 %488, %487
  %492 = add nsw i32 %491, %477
  %493 = add nsw i32 %491, %478
  br label %514

494:                                              ; preds = %437, %432
  %495 = phi i32 [ %434, %432 ], [ %439, %437 ]
  %496 = phi i32 [ %433, %432 ], [ %438, %437 ]
  %497 = add nsw i32 %496, %322
  %498 = sub nsw i32 %324, %495
  %499 = add nsw i32 %496, %363
  %500 = load i32, ptr @blockt, align 4, !tbaa !17
  %501 = icmp sgt i32 %499, %500
  br i1 %501, label %502, label %506

502:                                              ; preds = %494
  %503 = sub nsw i32 %499, %500
  %504 = sub nsw i32 %498, %503
  %505 = sub nsw i32 %497, %503
  br label %514

506:                                              ; preds = %494
  %507 = sub nsw i32 %399, %495
  %508 = load i32, ptr @blockb, align 4, !tbaa !17
  %509 = icmp slt i32 %507, %508
  br i1 %509, label %510, label %514

510:                                              ; preds = %506
  %511 = sub nsw i32 %508, %507
  %512 = add nsw i32 %511, %498
  %513 = add nsw i32 %511, %497
  br label %514

514:                                              ; preds = %510, %506, %502, %490, %486, %482, %472, %468, %464, %454, %450, %446, %435, %398
  %515 = phi i32 [ %449, %446 ], [ %457, %454 ], [ %442, %450 ], [ %467, %464 ], [ %475, %472 ], [ %459, %468 ], [ %321, %482 ], [ %321, %490 ], [ %321, %486 ], [ %321, %502 ], [ %321, %510 ], [ %321, %506 ], [ %321, %435 ], [ %321, %398 ]
  %516 = phi i32 [ %322, %446 ], [ %322, %454 ], [ %322, %450 ], [ %322, %464 ], [ %322, %472 ], [ %322, %468 ], [ %485, %482 ], [ %493, %490 ], [ %478, %486 ], [ %505, %502 ], [ %513, %510 ], [ %497, %506 ], [ %322, %435 ], [ %322, %398 ]
  %517 = phi i32 [ %448, %446 ], [ %456, %454 ], [ %441, %450 ], [ %466, %464 ], [ %474, %472 ], [ %460, %468 ], [ %323, %482 ], [ %323, %490 ], [ %323, %486 ], [ %323, %502 ], [ %323, %510 ], [ %323, %506 ], [ %323, %435 ], [ %323, %398 ]
  %518 = phi i32 [ %324, %446 ], [ %324, %454 ], [ %324, %450 ], [ %324, %464 ], [ %324, %472 ], [ %324, %468 ], [ %484, %482 ], [ %492, %490 ], [ %477, %486 ], [ %504, %502 ], [ %512, %510 ], [ %498, %506 ], [ %324, %435 ], [ %324, %398 ]
  %519 = tail call i32 @usite2(i32 noundef %.lcssa14, i32 noundef %.lcssa.lcssa2, i32 noundef %515, i32 noundef %516, i32 noundef %517, i32 noundef %518) #44
  %520 = icmp eq i32 %519, 0
  br i1 %520, label %527, label %521

521:                                              ; preds = %514
  %522 = load i32, ptr @flips, align 4, !tbaa !17
  %523 = add nsw i32 %522, 1
  store i32 %523, ptr @flips, align 4, !tbaa !17
  %524 = add nsw i32 %31, 1
  %525 = add nsw i32 %25, 1
  %526 = add nsw i32 %21, 1
  tail call void @fixSpot(ptr noundef nonnull %.lcssa17, i32 noundef %323, i32 noundef %324, i32 noundef %259) #43
  tail call void @fixSpot(ptr noundef nonnull %.lcssa18, i32 noundef %321, i32 noundef %322, i32 noundef %261) #43
  br label %807

527:                                              ; preds = %514
  %528 = add nsw i32 %25, 1
  %529 = add nsw i32 %21, 1
  %530 = tail call i32 @newOrient(ptr noundef nonnull %.lcssa17, i32 noundef 4) #44
  %531 = tail call i32 @newOrient(ptr noundef nonnull %.lcssa18, i32 noundef 4) #44
  %532 = icmp sgt i32 %530, -1
  %533 = icmp sgt i32 %531, -1
  %534 = select i1 %532, i1 true, i1 %533
  br i1 %534, label %535, label %807

535:                                              ; preds = %527
  %536 = icmp slt i32 %530, 0
  %537 = icmp slt i32 %531, 0
  %538 = select i1 %537, i32 %261, i32 %531
  %539 = select i1 %536, i32 %531, i32 %538
  %540 = select i1 %536, i32 %259, i32 %530
  %541 = load i32, ptr @gridGiven, align 4, !tbaa !17
  %542 = icmp eq i32 %541, 0
  br i1 %542, label %586, label %543

543:                                              ; preds = %535
  %544 = sext i32 %539 to i64
  %545 = getelementptr inbounds %struct.cellbox, ptr %.lcssa18, i64 0, i32 21, i64 %544
  %546 = load ptr, ptr %545, align 8, !tbaa !7
  %547 = getelementptr inbounds %struct.tilebox, ptr %546, i64 0, i32 17
  %548 = load ptr, ptr %547, align 8, !tbaa !47
  %549 = sext i32 %540 to i64
  %550 = getelementptr inbounds %struct.cellbox, ptr %.lcssa17, i64 0, i32 21, i64 %549
  %551 = load ptr, ptr %550, align 8, !tbaa !7
  %552 = getelementptr inbounds %struct.tilebox, ptr %551, i64 0, i32 17
  %553 = load ptr, ptr %552, align 8, !tbaa !47
  %554 = getelementptr inbounds %struct.cellbox, ptr %.lcssa18, i64 0, i32 2
  %555 = load i32, ptr %554, align 4, !tbaa !164
  %556 = getelementptr inbounds %struct.termbox, ptr %553, i64 0, i32 1
  %557 = load i32, ptr %556, align 8, !tbaa !51
  %558 = add nsw i32 %557, %555
  %559 = getelementptr inbounds %struct.cellbox, ptr %.lcssa18, i64 0, i32 3
  %560 = load i32, ptr %559, align 8, !tbaa !165
  %561 = getelementptr inbounds %struct.termbox, ptr %553, i64 0, i32 2
  %562 = load i32, ptr %561, align 4, !tbaa !52
  %563 = add nsw i32 %562, %560
  tail call void @forceGrid(i32 noundef %558, i32 noundef %563) #43
  %564 = load i32, ptr @newxx, align 4, !tbaa !17
  %565 = load i32, ptr %556, align 8, !tbaa !51
  %566 = sub nsw i32 %564, %565
  %567 = load i32, ptr @newyy, align 4, !tbaa !17
  %568 = load i32, ptr %561, align 4, !tbaa !52
  %569 = sub nsw i32 %567, %568
  %570 = getelementptr inbounds %struct.cellbox, ptr %.lcssa17, i64 0, i32 2
  %571 = load i32, ptr %570, align 4, !tbaa !164
  %572 = getelementptr inbounds %struct.termbox, ptr %548, i64 0, i32 1
  %573 = load i32, ptr %572, align 8, !tbaa !51
  %574 = add nsw i32 %573, %571
  %575 = getelementptr inbounds %struct.cellbox, ptr %.lcssa17, i64 0, i32 3
  %576 = load i32, ptr %575, align 8, !tbaa !165
  %577 = getelementptr inbounds %struct.termbox, ptr %548, i64 0, i32 2
  %578 = load i32, ptr %577, align 4, !tbaa !52
  %579 = add nsw i32 %578, %576
  tail call void @forceGrid(i32 noundef %574, i32 noundef %579) #43
  %580 = load i32, ptr @newxx, align 4, !tbaa !17
  %581 = load i32, ptr %572, align 8, !tbaa !51
  %582 = sub nsw i32 %580, %581
  %583 = load i32, ptr @newyy, align 4, !tbaa !17
  %584 = load i32, ptr %577, align 4, !tbaa !52
  %585 = sub nsw i32 %583, %584
  br label %596

586:                                              ; preds = %535
  %587 = getelementptr inbounds %struct.cellbox, ptr %.lcssa18, i64 0, i32 2
  %588 = load i32, ptr %587, align 4, !tbaa !164
  %589 = getelementptr inbounds %struct.cellbox, ptr %.lcssa18, i64 0, i32 3
  %590 = load i32, ptr %589, align 8, !tbaa !165
  %591 = getelementptr inbounds %struct.cellbox, ptr %.lcssa17, i64 0, i32 2
  %592 = load i32, ptr %591, align 4, !tbaa !164
  %593 = getelementptr inbounds %struct.cellbox, ptr %.lcssa17, i64 0, i32 3
  %594 = load i32, ptr %593, align 8, !tbaa !165
  %595 = sext i32 %540 to i64
  br label %596

596:                                              ; preds = %586, %543
  %597 = phi i64 [ %595, %586 ], [ %549, %543 ]
  %598 = phi i32 [ %588, %586 ], [ %566, %543 ]
  %599 = phi i32 [ %590, %586 ], [ %569, %543 ]
  %600 = phi i32 [ %592, %586 ], [ %582, %543 ]
  %601 = phi i32 [ %594, %586 ], [ %585, %543 ]
  %602 = getelementptr inbounds %struct.cellbox, ptr %.lcssa17, i64 0, i32 21, i64 %597
  %603 = load ptr, ptr %602, align 8, !tbaa !7
  %604 = getelementptr inbounds %struct.tilebox, ptr %603, i64 0, i32 9
  %605 = load i32, ptr %604, align 8, !tbaa !167
  %606 = add nsw i32 %605, %598
  %607 = getelementptr inbounds %struct.tilebox, ptr %603, i64 0, i32 10
  %608 = load i32, ptr %607, align 4, !tbaa !168
  %609 = add nsw i32 %608, %598
  %610 = getelementptr inbounds %struct.tilebox, ptr %603, i64 0, i32 11
  %611 = load i32, ptr %610, align 8, !tbaa !169
  %612 = add nsw i32 %611, %599
  %613 = getelementptr inbounds %struct.tilebox, ptr %603, i64 0, i32 12
  %614 = load i32, ptr %613, align 4, !tbaa !170
  %615 = add nsw i32 %614, %599
  %616 = load i32, ptr @numcells, align 4, !tbaa !17
  %617 = icmp sgt i32 %616, %.lcssa11
  br i1 %617, label %618, label %636

618:                                              ; preds = %596
  %619 = getelementptr inbounds %struct.tilebox, ptr %603, i64 0, i32 1
  %620 = load double, ptr %619, align 8, !tbaa !292
  %621 = tail call i32 @wireestx(i32 noundef %606, i32 noundef %612, i32 noundef %615, double noundef %620) #44
  %622 = sub nsw i32 %606, %621
  %623 = getelementptr inbounds %struct.tilebox, ptr %603, i64 0, i32 2
  %624 = load double, ptr %623, align 8, !tbaa !293
  %625 = tail call i32 @wireestx(i32 noundef %609, i32 noundef %612, i32 noundef %615, double noundef %624) #44
  %626 = add nsw i32 %625, %609
  %627 = getelementptr inbounds %struct.tilebox, ptr %603, i64 0, i32 3
  %628 = load double, ptr %627, align 8, !tbaa !294
  %629 = tail call i32 @wireesty(i32 noundef %612, i32 noundef %622, i32 noundef %626, double noundef %628) #44
  %630 = sub nsw i32 %612, %629
  %631 = getelementptr inbounds %struct.tilebox, ptr %603, i64 0, i32 4
  %632 = load double, ptr %631, align 8, !tbaa !295
  %633 = tail call i32 @wireesty(i32 noundef %615, i32 noundef %622, i32 noundef %626, double noundef %632) #44
  %634 = add nsw i32 %633, %615
  %635 = load i32, ptr @numcells, align 4, !tbaa !17
  br label %636

636:                                              ; preds = %618, %596
  %637 = phi i32 [ %635, %618 ], [ %616, %596 ]
  %638 = phi i32 [ %622, %618 ], [ %606, %596 ]
  %639 = phi i32 [ %626, %618 ], [ %609, %596 ]
  %640 = phi i32 [ %630, %618 ], [ %612, %596 ]
  %641 = phi i32 [ %634, %618 ], [ %615, %596 ]
  %642 = sext i32 %539 to i64
  %643 = getelementptr inbounds %struct.cellbox, ptr %.lcssa18, i64 0, i32 21, i64 %642
  %644 = load ptr, ptr %643, align 8, !tbaa !7
  %645 = getelementptr inbounds %struct.tilebox, ptr %644, i64 0, i32 9
  %646 = load i32, ptr %645, align 8, !tbaa !167
  %647 = add nsw i32 %646, %600
  %648 = getelementptr inbounds %struct.tilebox, ptr %644, i64 0, i32 10
  %649 = load i32, ptr %648, align 4, !tbaa !168
  %650 = add nsw i32 %649, %600
  %651 = getelementptr inbounds %struct.tilebox, ptr %644, i64 0, i32 11
  %652 = load i32, ptr %651, align 8, !tbaa !169
  %653 = add nsw i32 %652, %601
  %654 = getelementptr inbounds %struct.tilebox, ptr %644, i64 0, i32 12
  %655 = load i32, ptr %654, align 4, !tbaa !170
  %656 = add nsw i32 %655, %601
  %657 = icmp sgt i32 %637, %.lcssa3.lcssa5
  br i1 %657, label %658, label %675

658:                                              ; preds = %636
  %659 = getelementptr inbounds %struct.tilebox, ptr %644, i64 0, i32 1
  %660 = load double, ptr %659, align 8, !tbaa !292
  %661 = tail call i32 @wireestx(i32 noundef %647, i32 noundef %653, i32 noundef %656, double noundef %660) #44
  %662 = sub nsw i32 %647, %661
  %663 = getelementptr inbounds %struct.tilebox, ptr %644, i64 0, i32 2
  %664 = load double, ptr %663, align 8, !tbaa !293
  %665 = tail call i32 @wireestx(i32 noundef %650, i32 noundef %653, i32 noundef %656, double noundef %664) #44
  %666 = add nsw i32 %665, %650
  %667 = getelementptr inbounds %struct.tilebox, ptr %644, i64 0, i32 3
  %668 = load double, ptr %667, align 8, !tbaa !294
  %669 = tail call i32 @wireesty(i32 noundef %653, i32 noundef %662, i32 noundef %666, double noundef %668) #44
  %670 = sub nsw i32 %653, %669
  %671 = getelementptr inbounds %struct.tilebox, ptr %644, i64 0, i32 4
  %672 = load double, ptr %671, align 8, !tbaa !295
  %673 = tail call i32 @wireesty(i32 noundef %656, i32 noundef %662, i32 noundef %666, double noundef %672) #44
  %674 = add nsw i32 %673, %656
  br label %675

675:                                              ; preds = %658, %636
  %676 = phi i32 [ %670, %658 ], [ %653, %636 ]
  %677 = phi i32 [ %662, %658 ], [ %647, %636 ]
  %678 = phi i32 [ %666, %658 ], [ %650, %636 ]
  %679 = phi i32 [ %674, %658 ], [ %656, %636 ]
  %680 = icmp slt i32 %677, %639
  %681 = icmp slt i32 %638, %678
  %682 = select i1 %680, i1 %681, i1 false
  %683 = icmp slt i32 %676, %641
  %684 = select i1 %682, i1 %683, i1 false
  %685 = icmp slt i32 %640, %679
  %686 = select i1 %684, i1 %685, i1 false
  br i1 %686, label %791, label %687

687:                                              ; preds = %675
  %688 = sub nsw i32 %639, %677
  %689 = icmp slt i32 %688, 1000000
  %690 = tail call i32 @llvm.smin.i32(i32 %688, i32 1000000)
  %691 = select i1 %680, i32 %690, i32 1000000
  %692 = select i1 %680, i1 %689, i1 false
  %693 = zext i1 %692 to i32
  %694 = sub nsw i32 %678, %638
  %695 = icmp slt i32 %694, %691
  %696 = tail call i32 @llvm.smin.i32(i32 %694, i32 %691)
  %697 = select i1 %681, i32 %696, i32 %691
  %698 = select i1 %681, i1 %695, i1 false
  %699 = select i1 %698, i32 2, i32 %693
  %700 = sub nsw i32 %641, %676
  %701 = icmp slt i32 %700, %697
  %702 = tail call i32 @llvm.smin.i32(i32 %700, i32 %697)
  %703 = select i1 %683, i32 %702, i32 %697
  %704 = select i1 %683, i1 %701, i1 false
  %705 = select i1 %704, i32 3, i32 %699
  br i1 %685, label %706, label %712

706:                                              ; preds = %687
  %707 = sub nsw i32 %679, %640
  %708 = icmp slt i32 %707, %703
  br i1 %708, label %709, label %712

709:                                              ; preds = %706
  %710 = sdiv i32 %707, 2
  %711 = sub nsw i32 %707, %710
  br label %771

712:                                              ; preds = %706, %687
  %713 = icmp eq i32 %705, 0
  br i1 %713, label %791, label %714

714:                                              ; preds = %712
  %715 = sdiv i32 %703, 2
  %716 = sub nsw i32 %703, %715
  switch i32 %705, label %771 [
    i32 1, label %717
    i32 2, label %735
    i32 3, label %753
  ]

717:                                              ; preds = %714
  %718 = add nsw i32 %715, %600
  %719 = sub nsw i32 %598, %716
  %720 = add nsw i32 %715, %678
  %721 = load i32, ptr @blockr, align 4, !tbaa !17
  %722 = icmp sgt i32 %720, %721
  br i1 %722, label %723, label %727

723:                                              ; preds = %717
  %724 = sub nsw i32 %720, %721
  %725 = sub nsw i32 %718, %724
  %726 = sub nsw i32 %719, %724
  br label %791

727:                                              ; preds = %717
  %728 = sub nsw i32 %638, %716
  %729 = load i32, ptr @blockl, align 4, !tbaa !17
  %730 = icmp slt i32 %728, %729
  br i1 %730, label %731, label %791

731:                                              ; preds = %727
  %732 = sub nsw i32 %729, %728
  %733 = add nsw i32 %732, %718
  %734 = add nsw i32 %732, %719
  br label %791

735:                                              ; preds = %714
  %736 = add nsw i32 %715, %598
  %737 = sub nsw i32 %600, %716
  %738 = add nsw i32 %715, %639
  %739 = load i32, ptr @blockr, align 4, !tbaa !17
  %740 = icmp sgt i32 %738, %739
  br i1 %740, label %741, label %745

741:                                              ; preds = %735
  %742 = sub nsw i32 %738, %739
  %743 = sub nsw i32 %737, %742
  %744 = sub nsw i32 %736, %742
  br label %791

745:                                              ; preds = %735
  %746 = sub nsw i32 %677, %716
  %747 = load i32, ptr @blockl, align 4, !tbaa !17
  %748 = icmp slt i32 %746, %747
  br i1 %748, label %749, label %791

749:                                              ; preds = %745
  %750 = sub nsw i32 %747, %746
  %751 = add nsw i32 %750, %737
  %752 = add nsw i32 %750, %736
  br label %791

753:                                              ; preds = %714
  %754 = add nsw i32 %715, %601
  %755 = sub nsw i32 %599, %716
  %756 = add nsw i32 %715, %679
  %757 = load i32, ptr @blockt, align 4, !tbaa !17
  %758 = icmp sgt i32 %756, %757
  br i1 %758, label %759, label %763

759:                                              ; preds = %753
  %760 = sub nsw i32 %756, %757
  %761 = sub nsw i32 %754, %760
  %762 = sub nsw i32 %755, %760
  br label %791

763:                                              ; preds = %753
  %764 = sub nsw i32 %640, %716
  %765 = load i32, ptr @blockb, align 4, !tbaa !17
  %766 = icmp slt i32 %764, %765
  br i1 %766, label %767, label %791

767:                                              ; preds = %763
  %768 = sub nsw i32 %765, %764
  %769 = add nsw i32 %768, %754
  %770 = add nsw i32 %768, %755
  br label %791

771:                                              ; preds = %714, %709
  %772 = phi i32 [ %711, %709 ], [ %716, %714 ]
  %773 = phi i32 [ %710, %709 ], [ %715, %714 ]
  %774 = add nsw i32 %773, %599
  %775 = sub nsw i32 %601, %772
  %776 = add nsw i32 %773, %641
  %777 = load i32, ptr @blockt, align 4, !tbaa !17
  %778 = icmp sgt i32 %776, %777
  br i1 %778, label %779, label %783

779:                                              ; preds = %771
  %780 = sub nsw i32 %776, %777
  %781 = sub nsw i32 %775, %780
  %782 = sub nsw i32 %774, %780
  br label %791

783:                                              ; preds = %771
  %784 = sub nsw i32 %676, %772
  %785 = load i32, ptr @blockb, align 4, !tbaa !17
  %786 = icmp slt i32 %784, %785
  br i1 %786, label %787, label %791

787:                                              ; preds = %783
  %788 = sub nsw i32 %785, %784
  %789 = add nsw i32 %788, %775
  %790 = add nsw i32 %788, %774
  br label %791

791:                                              ; preds = %787, %783, %779, %767, %763, %759, %749, %745, %741, %731, %727, %723, %712, %675
  %792 = phi i32 [ %726, %723 ], [ %734, %731 ], [ %719, %727 ], [ %744, %741 ], [ %752, %749 ], [ %736, %745 ], [ %598, %759 ], [ %598, %767 ], [ %598, %763 ], [ %598, %779 ], [ %598, %787 ], [ %598, %783 ], [ %598, %712 ], [ %598, %675 ]
  %793 = phi i32 [ %599, %723 ], [ %599, %731 ], [ %599, %727 ], [ %599, %741 ], [ %599, %749 ], [ %599, %745 ], [ %762, %759 ], [ %770, %767 ], [ %755, %763 ], [ %782, %779 ], [ %790, %787 ], [ %774, %783 ], [ %599, %712 ], [ %599, %675 ]
  %794 = phi i32 [ %725, %723 ], [ %733, %731 ], [ %718, %727 ], [ %743, %741 ], [ %751, %749 ], [ %737, %745 ], [ %600, %759 ], [ %600, %767 ], [ %600, %763 ], [ %600, %779 ], [ %600, %787 ], [ %600, %783 ], [ %600, %712 ], [ %600, %675 ]
  %795 = phi i32 [ %601, %723 ], [ %601, %731 ], [ %601, %727 ], [ %601, %741 ], [ %601, %749 ], [ %601, %745 ], [ %761, %759 ], [ %769, %767 ], [ %754, %763 ], [ %781, %779 ], [ %789, %787 ], [ %775, %783 ], [ %601, %712 ], [ %601, %675 ]
  %796 = tail call i32 @usiteo2(i32 noundef %.lcssa14, i32 noundef %.lcssa.lcssa2, i32 noundef %792, i32 noundef %793, i32 noundef %794, i32 noundef %795, i32 noundef %540, i32 noundef %539) #44
  %797 = icmp eq i32 %796, 0
  br i1 %797, label %804, label %798

798:                                              ; preds = %791
  %799 = load i32, ptr @flips, align 4, !tbaa !17
  %800 = add nsw i32 %799, 1
  store i32 %800, ptr @flips, align 4, !tbaa !17
  %801 = add nsw i32 %30, 1
  %802 = add nsw i32 %24, 1
  %803 = add nsw i32 %21, 2
  tail call void @fixSpot(ptr noundef nonnull %.lcssa17, i32 noundef %323, i32 noundef %324, i32 noundef %259) #43
  tail call void @fixSpot(ptr noundef nonnull %.lcssa18, i32 noundef %321, i32 noundef %322, i32 noundef %261) #43
  br label %807

804:                                              ; preds = %791
  %805 = add nsw i32 %24, 1
  %806 = add nsw i32 %21, 2
  br label %807

807:                                              ; preds = %804, %798, %527, %521, %243, %203, %199, %85, %75
  %808 = phi i32 [ %86, %85 ], [ %33, %75 ], [ %180, %243 ], [ %180, %203 ], [ %180, %199 ], [ %33, %521 ], [ %33, %798 ], [ %33, %804 ], [ %33, %527 ]
  %809 = phi i32 [ %32, %85 ], [ %32, %75 ], [ %181, %243 ], [ %181, %203 ], [ %181, %199 ], [ %32, %521 ], [ %32, %798 ], [ %32, %804 ], [ %32, %527 ]
  %810 = phi i32 [ %31, %85 ], [ %31, %75 ], [ %31, %243 ], [ %31, %203 ], [ %31, %199 ], [ %524, %521 ], [ %31, %798 ], [ %31, %804 ], [ %31, %527 ]
  %811 = phi i32 [ %30, %85 ], [ %30, %75 ], [ %30, %243 ], [ %30, %203 ], [ %30, %199 ], [ %30, %521 ], [ %801, %798 ], [ %30, %804 ], [ %30, %527 ]
  %812 = phi i32 [ %29, %85 ], [ %29, %75 ], [ %244, %243 ], [ %29, %203 ], [ %29, %199 ], [ %29, %521 ], [ %29, %798 ], [ %29, %804 ], [ %29, %527 ]
  %813 = phi i32 [ %28, %85 ], [ %28, %75 ], [ %182, %243 ], [ %182, %203 ], [ %182, %199 ], [ %28, %521 ], [ %28, %798 ], [ %28, %804 ], [ %28, %527 ]
  %814 = phi i32 [ %87, %85 ], [ %27, %75 ], [ %183, %243 ], [ %183, %203 ], [ %183, %199 ], [ %27, %521 ], [ %27, %798 ], [ %27, %804 ], [ %27, %527 ]
  %815 = phi i32 [ %26, %85 ], [ %26, %75 ], [ %184, %243 ], [ %184, %203 ], [ %184, %199 ], [ %26, %521 ], [ %26, %798 ], [ %26, %804 ], [ %26, %527 ]
  %816 = phi i32 [ %25, %85 ], [ %25, %75 ], [ %25, %243 ], [ %25, %203 ], [ %25, %199 ], [ %525, %521 ], [ %528, %798 ], [ %528, %804 ], [ %528, %527 ]
  %817 = phi i32 [ %24, %85 ], [ %24, %75 ], [ %24, %243 ], [ %24, %203 ], [ %24, %199 ], [ %24, %521 ], [ %802, %798 ], [ %805, %804 ], [ %24, %527 ]
  %818 = phi i32 [ %23, %85 ], [ %23, %75 ], [ %245, %243 ], [ %23, %203 ], [ %23, %199 ], [ %23, %521 ], [ %23, %798 ], [ %23, %804 ], [ %23, %527 ]
  %819 = phi i32 [ %22, %85 ], [ %22, %75 ], [ %186, %243 ], [ %186, %203 ], [ %186, %199 ], [ %22, %521 ], [ %22, %798 ], [ %22, %804 ], [ %22, %527 ]
  %820 = phi i32 [ %21, %85 ], [ %21, %75 ], [ %185, %243 ], [ %185, %203 ], [ %185, %199 ], [ %526, %521 ], [ %803, %798 ], [ %806, %804 ], [ %529, %527 ]
  %821 = load i32, ptr @attmax, align 4, !tbaa !17
  %822 = icmp slt i32 %820, %821
  br i1 %822, label %20, label %823, !llvm.loop !1018

823:                                              ; preds = %807, %17
  %824 = phi i32 [ 0, %17 ], [ %808, %807 ]
  %825 = phi i32 [ 0, %17 ], [ %809, %807 ]
  %826 = phi i32 [ 0, %17 ], [ %810, %807 ]
  %827 = phi i32 [ 0, %17 ], [ %811, %807 ]
  %828 = phi i32 [ 0, %17 ], [ %812, %807 ]
  %829 = phi i32 [ 0, %17 ], [ %813, %807 ]
  %830 = phi i32 [ 0, %17 ], [ %814, %807 ]
  %831 = phi i32 [ 0, %17 ], [ %815, %807 ]
  %832 = phi i32 [ 0, %17 ], [ %816, %807 ]
  %833 = phi i32 [ 0, %17 ], [ %817, %807 ]
  %834 = phi i32 [ 0, %17 ], [ %818, %807 ]
  %835 = phi i32 [ 0, %17 ], [ %819, %807 ]
  %836 = load ptr, ptr @fpo, align 8, !tbaa !7
  %837 = tail call i64 @fwrite(ptr nonnull @.str.4.888, i64 22, i64 1, ptr %836)
  %838 = load ptr, ptr @fpo, align 8, !tbaa !7
  %839 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %838, ptr noundef nonnull @.str.5.889, i32 noundef %829, i32 noundef %835) #43
  %840 = load ptr, ptr @fpo, align 8, !tbaa !7
  %841 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %840, ptr noundef nonnull @.str.6.890, i32 noundef %825, i32 noundef %831) #43
  %842 = load ptr, ptr @fpo, align 8, !tbaa !7
  %843 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %842, ptr noundef nonnull @.str.7.891, i32 noundef %824, i32 noundef %830) #43
  %844 = load ptr, ptr @fpo, align 8, !tbaa !7
  %845 = load i32, ptr @flipp, align 4, !tbaa !17
  %846 = load i32, ptr @attp, align 4, !tbaa !17
  %847 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %844, ptr noundef nonnull @.str.8.892, i32 noundef %845, i32 noundef %846) #43
  %848 = load ptr, ptr @fpo, align 8, !tbaa !7
  %849 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %848, ptr noundef nonnull @.str.9.893, i32 noundef %828, i32 noundef %834) #43
  %850 = load ptr, ptr @fpo, align 8, !tbaa !7
  %851 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %850, ptr noundef nonnull @.str.10.894, i32 noundef %826, i32 noundef %832) #43
  %852 = load ptr, ptr @fpo, align 8, !tbaa !7
  %853 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %852, ptr noundef nonnull @.str.11.895, i32 noundef %827, i32 noundef %833) #43
  %854 = load ptr, ptr @fpo, align 8, !tbaa !7
  %855 = load i32, ptr @flips, align 4, !tbaa !17
  %856 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %854, ptr noundef nonnull @.str.12.896, i32 noundef %855) #43
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #47
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @pickSpot(ptr nocapture noundef readonly %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, ptr nocapture noundef %6, ptr nocapture noundef %7) #0 {
  %9 = load i32, ptr @spotXhash, align 4, !tbaa !17
  %10 = sub nsw i32 %2, %9
  %11 = load i32, ptr @spotSize, align 4, !tbaa !17
  %12 = sdiv i32 %10, %11
  %13 = sub nsw i32 %3, %9
  %14 = sdiv i32 %13, %11
  %15 = load i32, ptr @spotYhash, align 4, !tbaa !17
  %16 = sub nsw i32 %4, %15
  %17 = sdiv i32 %16, %11
  %18 = sub nsw i32 %5, %15
  %19 = sdiv i32 %18, %11
  %20 = sub i32 %14, %12
  %21 = add i32 %20, 1
  %22 = sub i32 %19, %17
  %23 = add i32 %22, 1
  %24 = sext i32 %1 to i64
  %25 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 21, i64 %24
  %26 = load ptr, ptr %25, align 8, !tbaa !7
  %27 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 2
  %28 = load i32, ptr %27, align 4, !tbaa !164
  %29 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 3
  %30 = load i32, ptr %29, align 8, !tbaa !165
  %31 = getelementptr inbounds %struct.tilebox, ptr %26, i64 0, i32 9
  %32 = load i32, ptr %31, align 8, !tbaa !167
  %33 = add nsw i32 %32, %28
  %34 = getelementptr inbounds %struct.tilebox, ptr %26, i64 0, i32 10
  %35 = load i32, ptr %34, align 4, !tbaa !168
  %36 = add nsw i32 %35, %28
  %37 = getelementptr inbounds %struct.tilebox, ptr %26, i64 0, i32 11
  %38 = load i32, ptr %37, align 8, !tbaa !169
  %39 = add nsw i32 %38, %30
  %40 = getelementptr inbounds %struct.tilebox, ptr %26, i64 0, i32 12
  %41 = load i32, ptr %40, align 4, !tbaa !170
  %42 = add nsw i32 %41, %30
  %43 = getelementptr inbounds %struct.tilebox, ptr %26, i64 0, i32 1
  %44 = load double, ptr %43, align 8, !tbaa !292
  %45 = tail call i32 @wireestx(i32 noundef %33, i32 noundef %39, i32 noundef %42, double noundef %44) #44
  %46 = sub nsw i32 %33, %45
  %47 = getelementptr inbounds %struct.tilebox, ptr %26, i64 0, i32 2
  %48 = load double, ptr %47, align 8, !tbaa !293
  %49 = tail call i32 @wireestx(i32 noundef %36, i32 noundef %39, i32 noundef %42, double noundef %48) #44
  %50 = add nsw i32 %49, %36
  %51 = getelementptr inbounds %struct.tilebox, ptr %26, i64 0, i32 3
  %52 = load double, ptr %51, align 8, !tbaa !294
  %53 = tail call i32 @wireesty(i32 noundef %39, i32 noundef %46, i32 noundef %50, double noundef %52) #44
  %54 = getelementptr inbounds %struct.tilebox, ptr %26, i64 0, i32 4
  %55 = load double, ptr %54, align 8, !tbaa !295
  %56 = tail call i32 @wireesty(i32 noundef %42, i32 noundef %46, i32 noundef %50, double noundef %55) #44
  %57 = add nsw i32 %56, %42
  %58 = load i32, ptr @spotXhash, align 4, !tbaa !17
  %59 = sub nsw i32 %46, %58
  %60 = load i32, ptr @spotSize, align 4, !tbaa !17
  %61 = sdiv i32 %59, %60
  %62 = sub nsw i32 %50, %58
  %63 = sdiv i32 %62, %60
  %64 = load i32, ptr @spotYhash, align 4, !tbaa !17
  %65 = add i32 %53, %64
  %66 = sub i32 %39, %65
  %67 = sdiv i32 %66, %60
  %68 = sub i32 %57, %64
  %69 = sdiv i32 %68, %60
  %70 = load i32, ptr %27, align 4, !tbaa !164
  %71 = sub nsw i32 %70, %58
  %72 = sdiv i32 %71, %60
  %73 = load i32, ptr %29, align 8, !tbaa !165
  %74 = sub nsw i32 %73, %64
  %75 = sdiv i32 %74, %60
  %76 = sitofp i32 %23 to double
  %77 = sitofp i32 %21 to double
  %78 = load ptr, ptr @spots, align 8, !tbaa !7
  br label %79

79:                                               ; preds = %122, %8
  %80 = load i32, ptr @randVar, align 4, !tbaa !17
  %81 = mul nsw i32 %80, 1103515245
  %82 = add nsw i32 %81, 12345
  store i32 %82, ptr @randVar, align 4, !tbaa !17
  %83 = and i32 %82, 2147483647
  %84 = sitofp i32 %83 to double
  %85 = fdiv double %84, 0x41DFFFFFFFC00000
  %86 = fmul double %85, %77
  %87 = fptosi double %86 to i32
  %88 = add nsw i32 %12, %87
  store i32 %88, ptr %6, align 4, !tbaa !17
  %89 = load i32, ptr @randVar, align 4, !tbaa !17
  %90 = mul nsw i32 %89, 1103515245
  %91 = add nsw i32 %90, 12345
  store i32 %91, ptr @randVar, align 4, !tbaa !17
  %92 = and i32 %91, 2147483647
  %93 = sitofp i32 %92 to double
  %94 = fdiv double %93, 0x41DFFFFFFFC00000
  %95 = fmul double %94, %76
  %96 = fptosi double %95 to i32
  %97 = add nsw i32 %17, %96
  store i32 %97, ptr %7, align 4, !tbaa !17
  %98 = load i32, ptr %6, align 4, !tbaa !17
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds ptr, ptr %78, i64 %99
  %101 = load ptr, ptr %100, align 8, !tbaa !7
  %102 = sext i32 %97 to i64
  %103 = getelementptr inbounds i8, ptr %101, i64 %102
  %104 = load i8, ptr %103, align 1, !tbaa !79
  %105 = icmp eq i8 %104, 0
  br i1 %105, label %123, label %106

106:                                              ; preds = %79
  %107 = icmp slt i32 %98, %61
  %108 = icmp sgt i32 %98, %63
  %109 = select i1 %107, i1 true, i1 %108
  %110 = icmp slt i32 %97, %67
  %111 = select i1 %109, i1 true, i1 %110
  %112 = icmp sgt i32 %97, %69
  %113 = select i1 %111, i1 true, i1 %112
  br i1 %113, label %122, label %114

114:                                              ; preds = %106
  %115 = sub nsw i32 %98, %72
  %116 = tail call i32 @llvm.abs.i32(i32 %115, i1 true)
  %117 = icmp ugt i32 %116, 1
  br i1 %117, label %123, label %118

118:                                              ; preds = %114
  %119 = sub nsw i32 %97, %75
  %120 = tail call i32 @llvm.abs.i32(i32 %119, i1 true)
  %121 = icmp ugt i32 %120, 1
  br i1 %121, label %123, label %122

122:                                              ; preds = %118, %106
  br label %79

123:                                              ; preds = %118, %114, %79
  %.lcssa = phi i32 [ %98, %118 ], [ %98, %114 ], [ %98, %79 ]
  %124 = load i32, ptr @spotSize, align 4, !tbaa !17
  %125 = mul nsw i32 %124, %.lcssa
  %126 = load i32, ptr @spotXhash, align 4, !tbaa !17
  %127 = add nsw i32 %125, %126
  store i32 %127, ptr %6, align 4, !tbaa !17
  %128 = load i32, ptr %7, align 4, !tbaa !17
  %129 = load i32, ptr @spotSize, align 4, !tbaa !17
  %130 = mul nsw i32 %129, %128
  %131 = load i32, ptr @spotYhash, align 4, !tbaa !17
  %132 = add nsw i32 %130, %131
  store i32 %132, ptr %7, align 4, !tbaa !17
  %133 = load i32, ptr @spotSize, align 4, !tbaa !17
  %134 = sitofp i32 %133 to double
  %135 = load i32, ptr @randVar, align 4, !tbaa !17
  %136 = mul nsw i32 %135, 1103515245
  %137 = add nsw i32 %136, 12345
  store i32 %137, ptr @randVar, align 4, !tbaa !17
  %138 = and i32 %137, 2147483647
  %139 = sitofp i32 %138 to double
  %140 = fdiv double %139, 0x41DFFFFFFFC00000
  %141 = fmul double %140, %134
  %142 = fptosi double %141 to i32
  %143 = load i32, ptr %6, align 4, !tbaa !17
  %144 = add nsw i32 %143, %142
  store i32 %144, ptr %6, align 4, !tbaa !17
  %145 = load i32, ptr @spotSize, align 4, !tbaa !17
  %146 = sitofp i32 %145 to double
  %147 = load i32, ptr @randVar, align 4, !tbaa !17
  %148 = mul nsw i32 %147, 1103515245
  %149 = add nsw i32 %148, 12345
  store i32 %149, ptr @randVar, align 4, !tbaa !17
  %150 = and i32 %149, 2147483647
  %151 = sitofp i32 %150 to double
  %152 = fdiv double %151, 0x41DFFFFFFFC00000
  %153 = fmul double %152, %146
  %154 = fptosi double %153 to i32
  %155 = load i32, ptr %7, align 4, !tbaa !17
  %156 = add nsw i32 %155, %154
  store i32 %156, ptr %7, align 4, !tbaa !17
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, argmem: none, inaccessiblemem: none) uwtable
define internal void @forceGrid(i32 noundef %0, i32 noundef %1) #37 {
  %3 = load i32, ptr @gOffsetX, align 4, !tbaa !17
  %4 = freeze i32 %3
  %5 = sub i32 %0, %4
  %6 = load i32, ptr @gridX, align 4, !tbaa !17
  %7 = srem i32 %5, %6
  %8 = sub nsw i32 %5, %7
  %9 = add nsw i32 %8, %4
  %10 = add nsw i32 %9, %6
  %11 = sub nsw i32 %10, %0
  %12 = tail call i32 @llvm.abs.i32(i32 %11, i1 true)
  %13 = sub nsw i32 %9, %0
  %14 = tail call i32 @llvm.abs.i32(i32 %13, i1 true)
  %15 = icmp ult i32 %12, %14
  %16 = select i1 %15, i32 %10, i32 %9
  store i32 %16, ptr @newxx, align 4, !tbaa !17
  %17 = load i32, ptr @gOffsetY, align 4, !tbaa !17
  %18 = freeze i32 %17
  %19 = sub i32 %1, %18
  %20 = load i32, ptr @gridY, align 4, !tbaa !17
  %21 = srem i32 %19, %20
  %22 = sub nsw i32 %19, %21
  %23 = add nsw i32 %22, %18
  %24 = add nsw i32 %23, %20
  %25 = sub nsw i32 %24, %1
  %26 = tail call i32 @llvm.abs.i32(i32 %25, i1 true)
  %27 = sub nsw i32 %23, %1
  %28 = tail call i32 @llvm.abs.i32(i32 %27, i1 true)
  %29 = icmp ult i32 %26, %28
  %30 = select i1 %29, i32 %24, i32 %23
  store i32 %30, ptr @newyy, align 4, !tbaa !17
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @fixSpot(ptr nocapture noundef readonly %0, i32 noundef %1, i32 noundef %2, i32 noundef %3) #0 {
  %5 = sext i32 %3 to i64
  %6 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 21, i64 %5
  %7 = load ptr, ptr %6, align 8, !tbaa !7
  %8 = getelementptr inbounds %struct.tilebox, ptr %7, i64 0, i32 9
  %9 = load i32, ptr %8, align 8, !tbaa !167
  %10 = add nsw i32 %9, %1
  %11 = getelementptr inbounds %struct.tilebox, ptr %7, i64 0, i32 10
  %12 = load i32, ptr %11, align 4, !tbaa !168
  %13 = add nsw i32 %12, %1
  %14 = getelementptr inbounds %struct.tilebox, ptr %7, i64 0, i32 11
  %15 = load i32, ptr %14, align 8, !tbaa !169
  %16 = add nsw i32 %15, %2
  %17 = getelementptr inbounds %struct.tilebox, ptr %7, i64 0, i32 12
  %18 = load i32, ptr %17, align 4, !tbaa !170
  %19 = add nsw i32 %18, %2
  %20 = getelementptr inbounds %struct.tilebox, ptr %7, i64 0, i32 1
  %21 = load double, ptr %20, align 8, !tbaa !292
  %22 = tail call i32 @wireestx(i32 noundef %10, i32 noundef %16, i32 noundef %19, double noundef %21) #44
  %23 = sub nsw i32 %10, %22
  %24 = getelementptr inbounds %struct.tilebox, ptr %7, i64 0, i32 2
  %25 = load double, ptr %24, align 8, !tbaa !293
  %26 = tail call i32 @wireestx(i32 noundef %13, i32 noundef %16, i32 noundef %19, double noundef %25) #44
  %27 = add nsw i32 %26, %13
  %28 = getelementptr inbounds %struct.tilebox, ptr %7, i64 0, i32 3
  %29 = load double, ptr %28, align 8, !tbaa !294
  %30 = tail call i32 @wireesty(i32 noundef %16, i32 noundef %23, i32 noundef %27, double noundef %29) #44
  %31 = getelementptr inbounds %struct.tilebox, ptr %7, i64 0, i32 4
  %32 = load double, ptr %31, align 8, !tbaa !295
  %33 = tail call i32 @wireesty(i32 noundef %19, i32 noundef %23, i32 noundef %27, double noundef %32) #44
  %34 = add nsw i32 %33, %19
  %35 = load i32, ptr @spotXhash, align 4, !tbaa !17
  %36 = sub nsw i32 %23, %35
  %37 = load i32, ptr @spotSize, align 4, !tbaa !17
  %38 = sdiv i32 %36, %37
  %39 = sub nsw i32 %27, %35
  %40 = sdiv i32 %39, %37
  %41 = load i32, ptr @spotYhash, align 4, !tbaa !17
  %42 = sub i32 %34, %41
  %43 = sdiv i32 %42, %37
  %44 = add nsw i32 %38, 1
  %45 = icmp slt i32 %44, %40
  br i1 %45, label %46, label %74

46:                                               ; preds = %4
  %47 = add i32 %30, %41
  %48 = sub i32 %16, %47
  %49 = sdiv i32 %48, %37
  %50 = sext i32 %49 to i64
  %51 = add nsw i32 %49, 1
  %52 = icmp slt i32 %51, %43
  %53 = sext i32 %38 to i64
  %54 = add nsw i64 %53, 1
  br label %59

55:                                               ; preds = %66, %59
  %56 = add nsw i64 %60, 1
  %57 = trunc i64 %56 to i32
  %58 = icmp eq i32 %40, %57
  br i1 %58, label %74, label %59, !llvm.loop !1019

59:                                               ; preds = %55, %46
  %60 = phi i64 [ %54, %46 ], [ %56, %55 ]
  br i1 %52, label %61, label %55

61:                                               ; preds = %59
  %62 = load ptr, ptr @spots, align 8, !tbaa !7
  %63 = getelementptr inbounds ptr, ptr %62, i64 %60
  %64 = load ptr, ptr %63, align 8, !tbaa !7
  %65 = getelementptr inbounds i8, ptr %64, i64 %50
  br label %66

66:                                               ; preds = %66, %61
  %67 = phi i32 [ %72, %66 ], [ %51, %61 ]
  %68 = phi ptr [ %69, %66 ], [ %65, %61 ]
  %69 = getelementptr inbounds i8, ptr %68, i64 1
  %70 = load i8, ptr %69, align 1, !tbaa !79
  %71 = add i8 %70, -1
  store i8 %71, ptr %69, align 1, !tbaa !79
  %72 = add nsw i32 %67, 1
  %73 = icmp eq i32 %72, %43
  br i1 %73, label %55, label %66, !llvm.loop !1020

74:                                               ; preds = %55, %4
  %75 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 5
  %76 = load i32, ptr %75, align 8, !tbaa !45
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 21, i64 %77
  %79 = load ptr, ptr %78, align 8, !tbaa !7
  %80 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 2
  %81 = load i32, ptr %80, align 4, !tbaa !164
  %82 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 3
  %83 = load i32, ptr %82, align 8, !tbaa !165
  %84 = getelementptr inbounds %struct.tilebox, ptr %79, i64 0, i32 9
  %85 = load i32, ptr %84, align 8, !tbaa !167
  %86 = add nsw i32 %85, %81
  %87 = getelementptr inbounds %struct.tilebox, ptr %79, i64 0, i32 10
  %88 = load i32, ptr %87, align 4, !tbaa !168
  %89 = add nsw i32 %88, %81
  %90 = getelementptr inbounds %struct.tilebox, ptr %79, i64 0, i32 11
  %91 = load i32, ptr %90, align 8, !tbaa !169
  %92 = add nsw i32 %91, %83
  %93 = getelementptr inbounds %struct.tilebox, ptr %79, i64 0, i32 12
  %94 = load i32, ptr %93, align 4, !tbaa !170
  %95 = add nsw i32 %94, %83
  %96 = getelementptr inbounds %struct.tilebox, ptr %79, i64 0, i32 1
  %97 = load double, ptr %96, align 8, !tbaa !292
  %98 = tail call i32 @wireestx(i32 noundef %86, i32 noundef %92, i32 noundef %95, double noundef %97) #44
  %99 = sub nsw i32 %86, %98
  %100 = getelementptr inbounds %struct.tilebox, ptr %79, i64 0, i32 2
  %101 = load double, ptr %100, align 8, !tbaa !293
  %102 = tail call i32 @wireestx(i32 noundef %89, i32 noundef %92, i32 noundef %95, double noundef %101) #44
  %103 = add nsw i32 %102, %89
  %104 = getelementptr inbounds %struct.tilebox, ptr %79, i64 0, i32 3
  %105 = load double, ptr %104, align 8, !tbaa !294
  %106 = tail call i32 @wireesty(i32 noundef %92, i32 noundef %99, i32 noundef %103, double noundef %105) #44
  %107 = getelementptr inbounds %struct.tilebox, ptr %79, i64 0, i32 4
  %108 = load double, ptr %107, align 8, !tbaa !295
  %109 = tail call i32 @wireesty(i32 noundef %95, i32 noundef %99, i32 noundef %103, double noundef %108) #44
  %110 = add nsw i32 %109, %95
  %111 = load i32, ptr @spotXhash, align 4, !tbaa !17
  %112 = sub nsw i32 %99, %111
  %113 = load i32, ptr @spotSize, align 4, !tbaa !17
  %114 = sdiv i32 %112, %113
  %115 = sub nsw i32 %103, %111
  %116 = sdiv i32 %115, %113
  %117 = load i32, ptr @spotYhash, align 4, !tbaa !17
  %118 = sub i32 %110, %117
  %119 = sdiv i32 %118, %113
  %120 = add nsw i32 %114, 1
  %121 = icmp slt i32 %120, %116
  br i1 %121, label %122, label %150

122:                                              ; preds = %74
  %123 = add i32 %106, %117
  %124 = sub i32 %92, %123
  %125 = sdiv i32 %124, %113
  %126 = sext i32 %125 to i64
  %127 = add nsw i32 %125, 1
  %128 = icmp slt i32 %127, %119
  %129 = sext i32 %114 to i64
  %130 = add nsw i64 %129, 1
  br label %135

131:                                              ; preds = %142, %135
  %132 = add nsw i64 %136, 1
  %133 = trunc i64 %132 to i32
  %134 = icmp eq i32 %116, %133
  br i1 %134, label %150, label %135, !llvm.loop !1021

135:                                              ; preds = %131, %122
  %136 = phi i64 [ %130, %122 ], [ %132, %131 ]
  br i1 %128, label %137, label %131

137:                                              ; preds = %135
  %138 = load ptr, ptr @spots, align 8, !tbaa !7
  %139 = getelementptr inbounds ptr, ptr %138, i64 %136
  %140 = load ptr, ptr %139, align 8, !tbaa !7
  %141 = getelementptr inbounds i8, ptr %140, i64 %126
  br label %142

142:                                              ; preds = %142, %137
  %143 = phi i32 [ %148, %142 ], [ %127, %137 ]
  %144 = phi ptr [ %145, %142 ], [ %141, %137 ]
  %145 = getelementptr inbounds i8, ptr %144, i64 1
  %146 = load i8, ptr %145, align 1, !tbaa !79
  %147 = add i8 %146, 1
  store i8 %147, ptr %145, align 1, !tbaa !79
  %148 = add nsw i32 %143, 1
  %149 = icmp eq i32 %148, %119
  br i1 %149, label %131, label %142, !llvm.loop !1022

150:                                              ; preds = %131, %74
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @fixSpotAsp(ptr nocapture noundef readonly %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4) #0 {
  %6 = tail call i32 @wireestx(i32 noundef %1, i32 noundef %3, i32 noundef %4, double noundef undef) #44
  %7 = tail call i32 @wireestx(i32 noundef %2, i32 noundef %3, i32 noundef %4, double noundef undef) #44
  %8 = add nsw i32 %7, %2
  %9 = tail call i32 @wireesty(i32 noundef %3, i32 noundef %1, i32 noundef %2, double noundef undef) #44
  %10 = tail call i32 @wireesty(i32 noundef %4, i32 noundef %1, i32 noundef %2, double noundef undef) #44
  %11 = load i32, ptr @spotXhash, align 4, !tbaa !17
  %12 = add i32 %6, %11
  %13 = sub i32 %1, %12
  %14 = load i32, ptr @spotSize, align 4, !tbaa !17
  %15 = sdiv i32 %13, %14
  %16 = sub i32 %8, %11
  %17 = sdiv i32 %16, %14
  %18 = load i32, ptr @spotYhash, align 4, !tbaa !17
  %19 = add i32 %10, %18
  %20 = sub i32 %4, %19
  %21 = sdiv i32 %20, %14
  %22 = add nsw i32 %15, 1
  %23 = icmp slt i32 %22, %17
  br i1 %23, label %24, label %52

24:                                               ; preds = %5
  %25 = add i32 %9, %18
  %26 = sub i32 %3, %25
  %27 = sdiv i32 %26, %14
  %28 = sext i32 %27 to i64
  %29 = add nsw i32 %27, 1
  %30 = icmp slt i32 %29, %21
  %31 = sext i32 %15 to i64
  %32 = add nsw i64 %31, 1
  br label %37

33:                                               ; preds = %44, %37
  %34 = add nsw i64 %38, 1
  %35 = trunc i64 %34 to i32
  %36 = icmp eq i32 %17, %35
  br i1 %36, label %52, label %37, !llvm.loop !1023

37:                                               ; preds = %33, %24
  %38 = phi i64 [ %32, %24 ], [ %34, %33 ]
  br i1 %30, label %39, label %33

39:                                               ; preds = %37
  %40 = load ptr, ptr @spots, align 8, !tbaa !7
  %41 = getelementptr inbounds ptr, ptr %40, i64 %38
  %42 = load ptr, ptr %41, align 8, !tbaa !7
  %43 = getelementptr inbounds i8, ptr %42, i64 %28
  br label %44

44:                                               ; preds = %44, %39
  %45 = phi i32 [ %50, %44 ], [ %29, %39 ]
  %46 = phi ptr [ %47, %44 ], [ %43, %39 ]
  %47 = getelementptr inbounds i8, ptr %46, i64 1
  %48 = load i8, ptr %47, align 1, !tbaa !79
  %49 = add i8 %48, -1
  store i8 %49, ptr %47, align 1, !tbaa !79
  %50 = add nsw i32 %45, 1
  %51 = icmp eq i32 %50, %21
  br i1 %51, label %33, label %44, !llvm.loop !1024

52:                                               ; preds = %33, %5
  %53 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 5
  %54 = load i32, ptr %53, align 8, !tbaa !45
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 21, i64 %55
  %57 = load ptr, ptr %56, align 8, !tbaa !7
  %58 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 2
  %59 = load i32, ptr %58, align 4, !tbaa !164
  %60 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 3
  %61 = load i32, ptr %60, align 8, !tbaa !165
  %62 = getelementptr inbounds %struct.tilebox, ptr %57, i64 0, i32 9
  %63 = load i32, ptr %62, align 8, !tbaa !167
  %64 = add nsw i32 %63, %59
  %65 = getelementptr inbounds %struct.tilebox, ptr %57, i64 0, i32 10
  %66 = load i32, ptr %65, align 4, !tbaa !168
  %67 = add nsw i32 %66, %59
  %68 = getelementptr inbounds %struct.tilebox, ptr %57, i64 0, i32 11
  %69 = load i32, ptr %68, align 8, !tbaa !169
  %70 = add nsw i32 %69, %61
  %71 = getelementptr inbounds %struct.tilebox, ptr %57, i64 0, i32 12
  %72 = load i32, ptr %71, align 4, !tbaa !170
  %73 = add nsw i32 %72, %61
  %74 = getelementptr inbounds %struct.tilebox, ptr %57, i64 0, i32 1
  %75 = load double, ptr %74, align 8, !tbaa !292
  %76 = tail call i32 @wireestx(i32 noundef %64, i32 noundef %70, i32 noundef %73, double noundef %75) #44
  %77 = sub nsw i32 %64, %76
  %78 = getelementptr inbounds %struct.tilebox, ptr %57, i64 0, i32 2
  %79 = load double, ptr %78, align 8, !tbaa !293
  %80 = tail call i32 @wireestx(i32 noundef %67, i32 noundef %70, i32 noundef %73, double noundef %79) #44
  %81 = add nsw i32 %80, %67
  %82 = getelementptr inbounds %struct.tilebox, ptr %57, i64 0, i32 3
  %83 = load double, ptr %82, align 8, !tbaa !294
  %84 = tail call i32 @wireesty(i32 noundef %70, i32 noundef %77, i32 noundef %81, double noundef %83) #44
  %85 = getelementptr inbounds %struct.tilebox, ptr %57, i64 0, i32 4
  %86 = load double, ptr %85, align 8, !tbaa !295
  %87 = tail call i32 @wireesty(i32 noundef %73, i32 noundef %77, i32 noundef %81, double noundef %86) #44
  %88 = add nsw i32 %87, %73
  %89 = load i32, ptr @spotXhash, align 4, !tbaa !17
  %90 = sub nsw i32 %77, %89
  %91 = load i32, ptr @spotSize, align 4, !tbaa !17
  %92 = sdiv i32 %90, %91
  %93 = sub nsw i32 %81, %89
  %94 = sdiv i32 %93, %91
  %95 = load i32, ptr @spotYhash, align 4, !tbaa !17
  %96 = sub i32 %88, %95
  %97 = sdiv i32 %96, %91
  %98 = add nsw i32 %92, 1
  %99 = icmp slt i32 %98, %94
  br i1 %99, label %100, label %128

100:                                              ; preds = %52
  %101 = add i32 %84, %95
  %102 = sub i32 %70, %101
  %103 = sdiv i32 %102, %91
  %104 = sext i32 %103 to i64
  %105 = add nsw i32 %103, 1
  %106 = icmp slt i32 %105, %97
  %107 = sext i32 %92 to i64
  %108 = add nsw i64 %107, 1
  br label %113

109:                                              ; preds = %120, %113
  %110 = add nsw i64 %114, 1
  %111 = trunc i64 %110 to i32
  %112 = icmp eq i32 %94, %111
  br i1 %112, label %128, label %113, !llvm.loop !1025

113:                                              ; preds = %109, %100
  %114 = phi i64 [ %108, %100 ], [ %110, %109 ]
  br i1 %106, label %115, label %109

115:                                              ; preds = %113
  %116 = load ptr, ptr @spots, align 8, !tbaa !7
  %117 = getelementptr inbounds ptr, ptr %116, i64 %114
  %118 = load ptr, ptr %117, align 8, !tbaa !7
  %119 = getelementptr inbounds i8, ptr %118, i64 %104
  br label %120

120:                                              ; preds = %120, %115
  %121 = phi i32 [ %126, %120 ], [ %105, %115 ]
  %122 = phi ptr [ %123, %120 ], [ %119, %115 ]
  %123 = getelementptr inbounds i8, ptr %122, i64 1
  %124 = load i8, ptr %123, align 1, !tbaa !79
  %125 = add i8 %124, 1
  store i8 %125, ptr %123, align 1, !tbaa !79
  %126 = add nsw i32 %121, 1
  %127 = icmp eq i32 %126, %97
  br i1 %127, label %109, label %120, !llvm.loop !1026

128:                                              ; preds = %109, %52
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @unbust() #0 {
  tail call void @coincide() #43
  %1 = tail call i32 @firstP() #43
  %2 = tail call i32 @u(i32 noundef %1) #43
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %9

4:                                                ; preds = %0
  %5 = load ptr, ptr @fpo, align 8, !tbaa !7
  %6 = tail call i64 @fwrite(ptr nonnull @.str.899, i64 40, i64 1, ptr %5)
  %7 = load ptr, ptr @fpo, align 8, !tbaa !7
  %8 = tail call i64 @fwrite(ptr nonnull @.str.1.900, i64 18, i64 1, ptr %7)
  tail call void @exit(i32 noundef 0) #49
  unreachable

9:                                                ; preds = %0
  %10 = load ptr, ptr @PtsArray, align 8, !tbaa !7
  %11 = sext i32 %1 to i64
  %12 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %11
  %13 = load i32, ptr %12, align 4, !tbaa !102
  %14 = load ptr, ptr @PtsOut, align 8, !tbaa !7
  %15 = load i32, ptr %14, align 4, !tbaa !102
  %16 = add nsw i32 %15, 1
  store i32 %16, ptr %14, align 4, !tbaa !102
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds %struct.bellbox, ptr %14, i64 %17
  store i32 %13, ptr %18, align 4, !tbaa !102
  %19 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %11, i32 1
  %20 = load i32, ptr %19, align 4, !tbaa !104
  %21 = load i32, ptr %14, align 4, !tbaa !102
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds %struct.bellbox, ptr %14, i64 %22, i32 1
  store i32 %20, ptr %23, align 4, !tbaa !104
  br label %24

24:                                               ; preds = %351, %9
  %25 = phi i32 [ %2, %9 ], [ %352, %351 ]
  %26 = phi i32 [ 1, %9 ], [ %353, %351 ]
  switch i32 %26, label %351 [
    i32 1, label %27
    i32 2, label %108
    i32 3, label %189
    i32 4, label %270
  ]

27:                                               ; preds = %24
  %28 = tail call i32 @l(i32 noundef %25) #43
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %84

30:                                               ; preds = %27
  %31 = tail call i32 @u(i32 noundef %25) #43
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %60

33:                                               ; preds = %30
  %34 = tail call i32 @r(i32 noundef %25) #43
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %354, label %36

36:                                               ; preds = %33
  %37 = sext i32 %25 to i64
  %38 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %37
  %39 = load i32, ptr %38, align 4, !tbaa !102
  %40 = load i32, ptr %14, align 4, !tbaa !102
  %41 = add nsw i32 %40, 1
  store i32 %41, ptr %14, align 4, !tbaa !102
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds %struct.bellbox, ptr %14, i64 %42
  store i32 %39, ptr %43, align 4, !tbaa !102
  %44 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %37, i32 1
  %45 = load i32, ptr %44, align 4, !tbaa !104
  %46 = load i32, ptr %14, align 4, !tbaa !102
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds %struct.bellbox, ptr %14, i64 %47, i32 1
  store i32 %45, ptr %48, align 4, !tbaa !104
  %49 = load i32, ptr %10, align 4, !tbaa !102
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %50
  %52 = load i32, ptr %51, align 4, !tbaa !102
  store i32 %52, ptr %38, align 4, !tbaa !102
  %53 = load i32, ptr %10, align 4, !tbaa !102
  %54 = add nsw i32 %53, -1
  store i32 %54, ptr %10, align 4, !tbaa !102
  %55 = sext i32 %53 to i64
  %56 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %55, i32 1
  %57 = load i32, ptr %56, align 4, !tbaa !104
  store i32 %57, ptr %44, align 4, !tbaa !104
  %58 = icmp slt i32 %34, %53
  %59 = select i1 %58, i32 %34, i32 %25
  br label %351

60:                                               ; preds = %30
  %61 = sext i32 %25 to i64
  %62 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %61
  %63 = load i32, ptr %62, align 4, !tbaa !102
  %64 = load i32, ptr %14, align 4, !tbaa !102
  %65 = add nsw i32 %64, 1
  store i32 %65, ptr %14, align 4, !tbaa !102
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds %struct.bellbox, ptr %14, i64 %66
  store i32 %63, ptr %67, align 4, !tbaa !102
  %68 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %61, i32 1
  %69 = load i32, ptr %68, align 4, !tbaa !104
  %70 = load i32, ptr %14, align 4, !tbaa !102
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds %struct.bellbox, ptr %14, i64 %71, i32 1
  store i32 %69, ptr %72, align 4, !tbaa !104
  %73 = load i32, ptr %10, align 4, !tbaa !102
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %74
  %76 = load i32, ptr %75, align 4, !tbaa !102
  store i32 %76, ptr %62, align 4, !tbaa !102
  %77 = load i32, ptr %10, align 4, !tbaa !102
  %78 = add nsw i32 %77, -1
  store i32 %78, ptr %10, align 4, !tbaa !102
  %79 = sext i32 %77 to i64
  %80 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %79, i32 1
  %81 = load i32, ptr %80, align 4, !tbaa !104
  store i32 %81, ptr %68, align 4, !tbaa !104
  %82 = icmp slt i32 %31, %77
  %83 = select i1 %82, i32 %31, i32 %25
  br label %351

84:                                               ; preds = %27
  %85 = sext i32 %25 to i64
  %86 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %85
  %87 = load i32, ptr %86, align 4, !tbaa !102
  %88 = load i32, ptr %14, align 4, !tbaa !102
  %89 = add nsw i32 %88, 1
  store i32 %89, ptr %14, align 4, !tbaa !102
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds %struct.bellbox, ptr %14, i64 %90
  store i32 %87, ptr %91, align 4, !tbaa !102
  %92 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %85, i32 1
  %93 = load i32, ptr %92, align 4, !tbaa !104
  %94 = load i32, ptr %14, align 4, !tbaa !102
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds %struct.bellbox, ptr %14, i64 %95, i32 1
  store i32 %93, ptr %96, align 4, !tbaa !104
  %97 = load i32, ptr %10, align 4, !tbaa !102
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %98
  %100 = load i32, ptr %99, align 4, !tbaa !102
  store i32 %100, ptr %86, align 4, !tbaa !102
  %101 = load i32, ptr %10, align 4, !tbaa !102
  %102 = add nsw i32 %101, -1
  store i32 %102, ptr %10, align 4, !tbaa !102
  %103 = sext i32 %101 to i64
  %104 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %103, i32 1
  %105 = load i32, ptr %104, align 4, !tbaa !104
  store i32 %105, ptr %92, align 4, !tbaa !104
  %106 = icmp slt i32 %28, %101
  %107 = select i1 %106, i32 %28, i32 %25
  br label %351

108:                                              ; preds = %24
  %109 = tail call i32 @b(i32 noundef %25) #43
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %111, label %165

111:                                              ; preds = %108
  %112 = tail call i32 @l(i32 noundef %25) #43
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %114, label %141

114:                                              ; preds = %111
  %115 = tail call i32 @u(i32 noundef %25) #43
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %354, label %117

117:                                              ; preds = %114
  %118 = sext i32 %25 to i64
  %119 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %118
  %120 = load i32, ptr %119, align 4, !tbaa !102
  %121 = load i32, ptr %14, align 4, !tbaa !102
  %122 = add nsw i32 %121, 1
  store i32 %122, ptr %14, align 4, !tbaa !102
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds %struct.bellbox, ptr %14, i64 %123
  store i32 %120, ptr %124, align 4, !tbaa !102
  %125 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %118, i32 1
  %126 = load i32, ptr %125, align 4, !tbaa !104
  %127 = load i32, ptr %14, align 4, !tbaa !102
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds %struct.bellbox, ptr %14, i64 %128, i32 1
  store i32 %126, ptr %129, align 4, !tbaa !104
  %130 = load i32, ptr %10, align 4, !tbaa !102
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %131
  %133 = load i32, ptr %132, align 4, !tbaa !102
  store i32 %133, ptr %119, align 4, !tbaa !102
  %134 = load i32, ptr %10, align 4, !tbaa !102
  %135 = add nsw i32 %134, -1
  store i32 %135, ptr %10, align 4, !tbaa !102
  %136 = sext i32 %134 to i64
  %137 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %136, i32 1
  %138 = load i32, ptr %137, align 4, !tbaa !104
  store i32 %138, ptr %125, align 4, !tbaa !104
  %139 = icmp slt i32 %115, %134
  %140 = select i1 %139, i32 %115, i32 %25
  br label %351

141:                                              ; preds = %111
  %142 = sext i32 %25 to i64
  %143 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %142
  %144 = load i32, ptr %143, align 4, !tbaa !102
  %145 = load i32, ptr %14, align 4, !tbaa !102
  %146 = add nsw i32 %145, 1
  store i32 %146, ptr %14, align 4, !tbaa !102
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds %struct.bellbox, ptr %14, i64 %147
  store i32 %144, ptr %148, align 4, !tbaa !102
  %149 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %142, i32 1
  %150 = load i32, ptr %149, align 4, !tbaa !104
  %151 = load i32, ptr %14, align 4, !tbaa !102
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds %struct.bellbox, ptr %14, i64 %152, i32 1
  store i32 %150, ptr %153, align 4, !tbaa !104
  %154 = load i32, ptr %10, align 4, !tbaa !102
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %155
  %157 = load i32, ptr %156, align 4, !tbaa !102
  store i32 %157, ptr %143, align 4, !tbaa !102
  %158 = load i32, ptr %10, align 4, !tbaa !102
  %159 = add nsw i32 %158, -1
  store i32 %159, ptr %10, align 4, !tbaa !102
  %160 = sext i32 %158 to i64
  %161 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %160, i32 1
  %162 = load i32, ptr %161, align 4, !tbaa !104
  store i32 %162, ptr %149, align 4, !tbaa !104
  %163 = icmp slt i32 %112, %158
  %164 = select i1 %163, i32 %112, i32 %25
  br label %351

165:                                              ; preds = %108
  %166 = sext i32 %25 to i64
  %167 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %166
  %168 = load i32, ptr %167, align 4, !tbaa !102
  %169 = load i32, ptr %14, align 4, !tbaa !102
  %170 = add nsw i32 %169, 1
  store i32 %170, ptr %14, align 4, !tbaa !102
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds %struct.bellbox, ptr %14, i64 %171
  store i32 %168, ptr %172, align 4, !tbaa !102
  %173 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %166, i32 1
  %174 = load i32, ptr %173, align 4, !tbaa !104
  %175 = load i32, ptr %14, align 4, !tbaa !102
  %176 = sext i32 %175 to i64
  %177 = getelementptr inbounds %struct.bellbox, ptr %14, i64 %176, i32 1
  store i32 %174, ptr %177, align 4, !tbaa !104
  %178 = load i32, ptr %10, align 4, !tbaa !102
  %179 = sext i32 %178 to i64
  %180 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %179
  %181 = load i32, ptr %180, align 4, !tbaa !102
  store i32 %181, ptr %167, align 4, !tbaa !102
  %182 = load i32, ptr %10, align 4, !tbaa !102
  %183 = add nsw i32 %182, -1
  store i32 %183, ptr %10, align 4, !tbaa !102
  %184 = sext i32 %182 to i64
  %185 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %184, i32 1
  %186 = load i32, ptr %185, align 4, !tbaa !104
  store i32 %186, ptr %173, align 4, !tbaa !104
  %187 = icmp slt i32 %109, %182
  %188 = select i1 %187, i32 %109, i32 %25
  br label %351

189:                                              ; preds = %24
  %190 = tail call i32 @u(i32 noundef %25) #43
  %191 = icmp eq i32 %190, 0
  br i1 %191, label %192, label %246

192:                                              ; preds = %189
  %193 = tail call i32 @r(i32 noundef %25) #43
  %194 = icmp eq i32 %193, 0
  br i1 %194, label %195, label %222

195:                                              ; preds = %192
  %196 = tail call i32 @b(i32 noundef %25) #43
  %197 = icmp eq i32 %196, 0
  br i1 %197, label %354, label %198

198:                                              ; preds = %195
  %199 = sext i32 %25 to i64
  %200 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %199
  %201 = load i32, ptr %200, align 4, !tbaa !102
  %202 = load i32, ptr %14, align 4, !tbaa !102
  %203 = add nsw i32 %202, 1
  store i32 %203, ptr %14, align 4, !tbaa !102
  %204 = sext i32 %203 to i64
  %205 = getelementptr inbounds %struct.bellbox, ptr %14, i64 %204
  store i32 %201, ptr %205, align 4, !tbaa !102
  %206 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %199, i32 1
  %207 = load i32, ptr %206, align 4, !tbaa !104
  %208 = load i32, ptr %14, align 4, !tbaa !102
  %209 = sext i32 %208 to i64
  %210 = getelementptr inbounds %struct.bellbox, ptr %14, i64 %209, i32 1
  store i32 %207, ptr %210, align 4, !tbaa !104
  %211 = load i32, ptr %10, align 4, !tbaa !102
  %212 = sext i32 %211 to i64
  %213 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %212
  %214 = load i32, ptr %213, align 4, !tbaa !102
  store i32 %214, ptr %200, align 4, !tbaa !102
  %215 = load i32, ptr %10, align 4, !tbaa !102
  %216 = add nsw i32 %215, -1
  store i32 %216, ptr %10, align 4, !tbaa !102
  %217 = sext i32 %215 to i64
  %218 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %217, i32 1
  %219 = load i32, ptr %218, align 4, !tbaa !104
  store i32 %219, ptr %206, align 4, !tbaa !104
  %220 = icmp slt i32 %196, %215
  %221 = select i1 %220, i32 %196, i32 %25
  br label %351

222:                                              ; preds = %192
  %223 = sext i32 %25 to i64
  %224 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %223
  %225 = load i32, ptr %224, align 4, !tbaa !102
  %226 = load i32, ptr %14, align 4, !tbaa !102
  %227 = add nsw i32 %226, 1
  store i32 %227, ptr %14, align 4, !tbaa !102
  %228 = sext i32 %227 to i64
  %229 = getelementptr inbounds %struct.bellbox, ptr %14, i64 %228
  store i32 %225, ptr %229, align 4, !tbaa !102
  %230 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %223, i32 1
  %231 = load i32, ptr %230, align 4, !tbaa !104
  %232 = load i32, ptr %14, align 4, !tbaa !102
  %233 = sext i32 %232 to i64
  %234 = getelementptr inbounds %struct.bellbox, ptr %14, i64 %233, i32 1
  store i32 %231, ptr %234, align 4, !tbaa !104
  %235 = load i32, ptr %10, align 4, !tbaa !102
  %236 = sext i32 %235 to i64
  %237 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %236
  %238 = load i32, ptr %237, align 4, !tbaa !102
  store i32 %238, ptr %224, align 4, !tbaa !102
  %239 = load i32, ptr %10, align 4, !tbaa !102
  %240 = add nsw i32 %239, -1
  store i32 %240, ptr %10, align 4, !tbaa !102
  %241 = sext i32 %239 to i64
  %242 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %241, i32 1
  %243 = load i32, ptr %242, align 4, !tbaa !104
  store i32 %243, ptr %230, align 4, !tbaa !104
  %244 = icmp slt i32 %193, %239
  %245 = select i1 %244, i32 %193, i32 %25
  br label %351

246:                                              ; preds = %189
  %247 = sext i32 %25 to i64
  %248 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %247
  %249 = load i32, ptr %248, align 4, !tbaa !102
  %250 = load i32, ptr %14, align 4, !tbaa !102
  %251 = add nsw i32 %250, 1
  store i32 %251, ptr %14, align 4, !tbaa !102
  %252 = sext i32 %251 to i64
  %253 = getelementptr inbounds %struct.bellbox, ptr %14, i64 %252
  store i32 %249, ptr %253, align 4, !tbaa !102
  %254 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %247, i32 1
  %255 = load i32, ptr %254, align 4, !tbaa !104
  %256 = load i32, ptr %14, align 4, !tbaa !102
  %257 = sext i32 %256 to i64
  %258 = getelementptr inbounds %struct.bellbox, ptr %14, i64 %257, i32 1
  store i32 %255, ptr %258, align 4, !tbaa !104
  %259 = load i32, ptr %10, align 4, !tbaa !102
  %260 = sext i32 %259 to i64
  %261 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %260
  %262 = load i32, ptr %261, align 4, !tbaa !102
  store i32 %262, ptr %248, align 4, !tbaa !102
  %263 = load i32, ptr %10, align 4, !tbaa !102
  %264 = add nsw i32 %263, -1
  store i32 %264, ptr %10, align 4, !tbaa !102
  %265 = sext i32 %263 to i64
  %266 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %265, i32 1
  %267 = load i32, ptr %266, align 4, !tbaa !104
  store i32 %267, ptr %254, align 4, !tbaa !104
  %268 = icmp slt i32 %190, %263
  %269 = select i1 %268, i32 %190, i32 %25
  br label %351

270:                                              ; preds = %24
  %271 = tail call i32 @r(i32 noundef %25) #43
  %272 = icmp eq i32 %271, 0
  br i1 %272, label %273, label %327

273:                                              ; preds = %270
  %274 = tail call i32 @b(i32 noundef %25) #43
  %275 = icmp eq i32 %274, 0
  br i1 %275, label %276, label %303

276:                                              ; preds = %273
  %277 = tail call i32 @l(i32 noundef %25) #43
  %278 = icmp eq i32 %277, 0
  br i1 %278, label %354, label %279

279:                                              ; preds = %276
  %280 = sext i32 %25 to i64
  %281 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %280
  %282 = load i32, ptr %281, align 4, !tbaa !102
  %283 = load i32, ptr %14, align 4, !tbaa !102
  %284 = add nsw i32 %283, 1
  store i32 %284, ptr %14, align 4, !tbaa !102
  %285 = sext i32 %284 to i64
  %286 = getelementptr inbounds %struct.bellbox, ptr %14, i64 %285
  store i32 %282, ptr %286, align 4, !tbaa !102
  %287 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %280, i32 1
  %288 = load i32, ptr %287, align 4, !tbaa !104
  %289 = load i32, ptr %14, align 4, !tbaa !102
  %290 = sext i32 %289 to i64
  %291 = getelementptr inbounds %struct.bellbox, ptr %14, i64 %290, i32 1
  store i32 %288, ptr %291, align 4, !tbaa !104
  %292 = load i32, ptr %10, align 4, !tbaa !102
  %293 = sext i32 %292 to i64
  %294 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %293
  %295 = load i32, ptr %294, align 4, !tbaa !102
  store i32 %295, ptr %281, align 4, !tbaa !102
  %296 = load i32, ptr %10, align 4, !tbaa !102
  %297 = add nsw i32 %296, -1
  store i32 %297, ptr %10, align 4, !tbaa !102
  %298 = sext i32 %296 to i64
  %299 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %298, i32 1
  %300 = load i32, ptr %299, align 4, !tbaa !104
  store i32 %300, ptr %287, align 4, !tbaa !104
  %301 = icmp slt i32 %277, %296
  %302 = select i1 %301, i32 %277, i32 %25
  br label %351

303:                                              ; preds = %273
  %304 = sext i32 %25 to i64
  %305 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %304
  %306 = load i32, ptr %305, align 4, !tbaa !102
  %307 = load i32, ptr %14, align 4, !tbaa !102
  %308 = add nsw i32 %307, 1
  store i32 %308, ptr %14, align 4, !tbaa !102
  %309 = sext i32 %308 to i64
  %310 = getelementptr inbounds %struct.bellbox, ptr %14, i64 %309
  store i32 %306, ptr %310, align 4, !tbaa !102
  %311 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %304, i32 1
  %312 = load i32, ptr %311, align 4, !tbaa !104
  %313 = load i32, ptr %14, align 4, !tbaa !102
  %314 = sext i32 %313 to i64
  %315 = getelementptr inbounds %struct.bellbox, ptr %14, i64 %314, i32 1
  store i32 %312, ptr %315, align 4, !tbaa !104
  %316 = load i32, ptr %10, align 4, !tbaa !102
  %317 = sext i32 %316 to i64
  %318 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %317
  %319 = load i32, ptr %318, align 4, !tbaa !102
  store i32 %319, ptr %305, align 4, !tbaa !102
  %320 = load i32, ptr %10, align 4, !tbaa !102
  %321 = add nsw i32 %320, -1
  store i32 %321, ptr %10, align 4, !tbaa !102
  %322 = sext i32 %320 to i64
  %323 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %322, i32 1
  %324 = load i32, ptr %323, align 4, !tbaa !104
  store i32 %324, ptr %311, align 4, !tbaa !104
  %325 = icmp slt i32 %274, %320
  %326 = select i1 %325, i32 %274, i32 %25
  br label %351

327:                                              ; preds = %270
  %328 = sext i32 %25 to i64
  %329 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %328
  %330 = load i32, ptr %329, align 4, !tbaa !102
  %331 = load i32, ptr %14, align 4, !tbaa !102
  %332 = add nsw i32 %331, 1
  store i32 %332, ptr %14, align 4, !tbaa !102
  %333 = sext i32 %332 to i64
  %334 = getelementptr inbounds %struct.bellbox, ptr %14, i64 %333
  store i32 %330, ptr %334, align 4, !tbaa !102
  %335 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %328, i32 1
  %336 = load i32, ptr %335, align 4, !tbaa !104
  %337 = load i32, ptr %14, align 4, !tbaa !102
  %338 = sext i32 %337 to i64
  %339 = getelementptr inbounds %struct.bellbox, ptr %14, i64 %338, i32 1
  store i32 %336, ptr %339, align 4, !tbaa !104
  %340 = load i32, ptr %10, align 4, !tbaa !102
  %341 = sext i32 %340 to i64
  %342 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %341
  %343 = load i32, ptr %342, align 4, !tbaa !102
  store i32 %343, ptr %329, align 4, !tbaa !102
  %344 = load i32, ptr %10, align 4, !tbaa !102
  %345 = add nsw i32 %344, -1
  store i32 %345, ptr %10, align 4, !tbaa !102
  %346 = sext i32 %344 to i64
  %347 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %346, i32 1
  %348 = load i32, ptr %347, align 4, !tbaa !104
  store i32 %348, ptr %335, align 4, !tbaa !104
  %349 = icmp slt i32 %271, %344
  %350 = select i1 %349, i32 %271, i32 %25
  br label %351

351:                                              ; preds = %327, %303, %279, %246, %222, %198, %165, %141, %117, %84, %60, %36, %24
  %352 = phi i32 [ %25, %24 ], [ %302, %279 ], [ %326, %303 ], [ %350, %327 ], [ %221, %198 ], [ %245, %222 ], [ %269, %246 ], [ %140, %117 ], [ %164, %141 ], [ %188, %165 ], [ %59, %36 ], [ %83, %60 ], [ %107, %84 ]
  %353 = phi i32 [ %26, %24 ], [ 2, %279 ], [ 4, %303 ], [ 3, %327 ], [ 4, %198 ], [ 3, %222 ], [ 1, %246 ], [ 1, %117 ], [ 2, %141 ], [ 4, %165 ], [ 3, %36 ], [ 1, %60 ], [ 2, %84 ]
  br label %24

354:                                              ; preds = %276, %195, %114, %33
  %.lcssa = phi i32 [ %25, %276 ], [ %25, %195 ], [ %25, %114 ], [ %25, %33 ]
  %355 = sext i32 %.lcssa to i64
  %356 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %355
  %357 = load i32, ptr %356, align 4, !tbaa !102
  %358 = load i32, ptr %14, align 4, !tbaa !102
  %359 = add nsw i32 %358, 1
  store i32 %359, ptr %14, align 4, !tbaa !102
  %360 = sext i32 %359 to i64
  %361 = getelementptr inbounds %struct.bellbox, ptr %14, i64 %360
  store i32 %357, ptr %361, align 4, !tbaa !102
  %362 = getelementptr inbounds %struct.bellbox, ptr %10, i64 %355, i32 1
  %363 = load i32, ptr %362, align 4, !tbaa !104
  %364 = load i32, ptr %14, align 4, !tbaa !102
  %365 = sext i32 %364 to i64
  %366 = getelementptr inbounds %struct.bellbox, ptr %14, i64 %365, i32 1
  store i32 %363, ptr %366, align 4, !tbaa !104
  tail call void @condense() #43
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @coincide() #2 {
  %1 = load ptr, ptr @PtsArray, align 8, !tbaa !7
  %2 = load i32, ptr %1, align 4, !tbaa !102
  %3 = icmp slt i32 %2, 1
  br i1 %3, label %50, label %10

4:                                                ; preds = %44
  %.lcssa = phi i32 [ %45, %44 ]
  %5 = sext i32 %.lcssa to i64
  br label %6

6:                                                ; preds = %10, %4
  %7 = phi i64 [ %5, %4 ], [ %18, %10 ]
  %8 = phi i32 [ %.lcssa, %4 ], [ %11, %10 ]
  %9 = icmp slt i64 %12, %7
  br i1 %9, label %10, label %50, !llvm.loop !1027

10:                                               ; preds = %6, %0
  %11 = phi i32 [ %8, %6 ], [ %2, %0 ]
  %12 = phi i64 [ %17, %6 ], [ 1, %0 ]
  %13 = getelementptr inbounds %struct.bellbox, ptr %1, i64 %12
  %14 = load i32, ptr %13, align 4, !tbaa !102
  %15 = getelementptr inbounds %struct.bellbox, ptr %1, i64 %12, i32 1
  %16 = load i32, ptr %15, align 4, !tbaa !104
  %17 = add nuw nsw i64 %12, 1
  %18 = sext i32 %11 to i64
  %19 = icmp slt i64 %12, %18
  br i1 %19, label %20, label %6

20:                                               ; preds = %10
  %21 = trunc i64 %17 to i32
  br label %22

22:                                               ; preds = %44, %20
  %23 = phi i32 [ %45, %44 ], [ %11, %20 ]
  %24 = phi i32 [ %46, %44 ], [ %11, %20 ]
  %25 = phi i32 [ %48, %44 ], [ %21, %20 ]
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds %struct.bellbox, ptr %1, i64 %26
  %28 = load i32, ptr %27, align 4, !tbaa !102
  %29 = icmp eq i32 %14, %28
  br i1 %29, label %30, label %44

30:                                               ; preds = %22
  %31 = getelementptr inbounds %struct.bellbox, ptr %1, i64 %26, i32 1
  %32 = load i32, ptr %31, align 4, !tbaa !104
  %33 = icmp eq i32 %16, %32
  br i1 %33, label %34, label %44

34:                                               ; preds = %30
  %35 = sext i32 %24 to i64
  %36 = getelementptr inbounds %struct.bellbox, ptr %1, i64 %35
  %37 = load i32, ptr %36, align 4, !tbaa !102
  store i32 %37, ptr %27, align 4, !tbaa !102
  %38 = load i32, ptr %1, align 4, !tbaa !102
  %39 = add nsw i32 %38, -1
  store i32 %39, ptr %1, align 4, !tbaa !102
  %40 = sext i32 %38 to i64
  %41 = getelementptr inbounds %struct.bellbox, ptr %1, i64 %40, i32 1
  %42 = load i32, ptr %41, align 4, !tbaa !104
  %43 = add nsw i32 %25, -1
  store i32 %42, ptr %31, align 4, !tbaa !104
  br label %44

44:                                               ; preds = %34, %30, %22
  %45 = phi i32 [ %39, %34 ], [ %23, %30 ], [ %23, %22 ]
  %46 = phi i32 [ %39, %34 ], [ %24, %30 ], [ %24, %22 ]
  %47 = phi i32 [ %43, %34 ], [ %25, %30 ], [ %25, %22 ]
  %48 = add nsw i32 %47, 1
  %49 = icmp slt i32 %47, %46
  br i1 %49, label %22, label %4, !llvm.loop !1028

50:                                               ; preds = %6, %0
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @firstP() #19 {
  %1 = load ptr, ptr @PtsArray, align 8, !tbaa !7
  %2 = load i32, ptr %1, align 4, !tbaa !102
  %3 = icmp slt i32 %2, 1
  br i1 %3, label %38, label %4

4:                                                ; preds = %0
  %5 = add nuw i32 %2, 1
  %6 = zext i32 %5 to i64
  br label %11

7:                                                ; preds = %11
  %.lcssa = phi i32 [ %16, %11 ]
  br i1 %3, label %38, label %8

8:                                                ; preds = %7
  %9 = add nuw i32 %2, 1
  %10 = zext i32 %9 to i64
  br label %19

11:                                               ; preds = %11, %4
  %12 = phi i64 [ 1, %4 ], [ %17, %11 ]
  %13 = phi i32 [ 100000000, %4 ], [ %16, %11 ]
  %14 = getelementptr inbounds %struct.bellbox, ptr %1, i64 %12, i32 1
  %15 = load i32, ptr %14, align 4, !tbaa !104
  %16 = tail call i32 @llvm.smin.i32(i32 %15, i32 %13)
  %17 = add nuw nsw i64 %12, 1
  %18 = icmp eq i64 %17, %6
  br i1 %18, label %7, label %11, !llvm.loop !1029

19:                                               ; preds = %33, %8
  %20 = phi i64 [ 1, %8 ], [ %36, %33 ]
  %21 = phi i32 [ undef, %8 ], [ %35, %33 ]
  %22 = phi i32 [ 100000000, %8 ], [ %34, %33 ]
  %23 = getelementptr inbounds %struct.bellbox, ptr %1, i64 %20, i32 1
  %24 = load i32, ptr %23, align 4, !tbaa !104
  %25 = icmp eq i32 %24, %.lcssa
  br i1 %25, label %26, label %33

26:                                               ; preds = %19
  %27 = getelementptr inbounds %struct.bellbox, ptr %1, i64 %20
  %28 = load i32, ptr %27, align 4, !tbaa !102
  %29 = icmp slt i32 %28, %22
  %30 = tail call i32 @llvm.smin.i32(i32 %28, i32 %22)
  %31 = trunc i64 %20 to i32
  %32 = select i1 %29, i32 %31, i32 %21
  br label %33

33:                                               ; preds = %26, %19
  %34 = phi i32 [ %22, %19 ], [ %30, %26 ]
  %35 = phi i32 [ %21, %19 ], [ %32, %26 ]
  %36 = add nuw nsw i64 %20, 1
  %37 = icmp eq i64 %36, %10
  br i1 %37, label %38, label %19, !llvm.loop !1030

38:                                               ; preds = %33, %7, %0
  %39 = phi i32 [ undef, %7 ], [ undef, %0 ], [ %35, %33 ]
  ret i32 %39
}

; Function Attrs: nofree nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @u(i32 noundef %0) #19 {
  %2 = load ptr, ptr @PtsArray, align 8, !tbaa !7
  %3 = sext i32 %0 to i64
  %4 = getelementptr inbounds %struct.bellbox, ptr %2, i64 %3
  %5 = load i32, ptr %4, align 4, !tbaa !102
  %6 = getelementptr inbounds %struct.bellbox, ptr %2, i64 %3, i32 1
  %7 = load i32, ptr %6, align 4, !tbaa !104
  %8 = load i32, ptr %2, align 4, !tbaa !102
  %9 = icmp slt i32 %8, 1
  br i1 %9, label %44, label %10

10:                                               ; preds = %1
  %11 = zext i32 %0 to i64
  %12 = add nuw i32 %8, 1
  %13 = zext i32 %12 to i64
  br label %14

14:                                               ; preds = %33, %10
  %15 = phi i64 [ 1, %10 ], [ %36, %33 ]
  %16 = phi i32 [ 0, %10 ], [ %35, %33 ]
  %17 = phi i32 [ 100000000, %10 ], [ %34, %33 ]
  %18 = icmp eq i64 %15, %11
  br i1 %18, label %33, label %19

19:                                               ; preds = %14
  %20 = getelementptr inbounds %struct.bellbox, ptr %2, i64 %15
  %21 = load i32, ptr %20, align 4, !tbaa !102
  %22 = icmp eq i32 %21, %5
  br i1 %22, label %23, label %33

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.bellbox, ptr %2, i64 %15, i32 1
  %25 = load i32, ptr %24, align 4, !tbaa !104
  %26 = icmp sgt i32 %25, %7
  br i1 %26, label %27, label %33

27:                                               ; preds = %23
  %28 = sub nsw i32 %25, %7
  %29 = icmp slt i32 %28, %17
  %30 = tail call i32 @llvm.smin.i32(i32 %28, i32 %17)
  %31 = trunc i64 %15 to i32
  %32 = select i1 %29, i32 %31, i32 %16
  br label %33

33:                                               ; preds = %27, %23, %19, %14
  %34 = phi i32 [ %17, %14 ], [ %17, %19 ], [ %17, %23 ], [ %30, %27 ]
  %35 = phi i32 [ %16, %14 ], [ %16, %19 ], [ %16, %23 ], [ %32, %27 ]
  %36 = add nuw nsw i64 %15, 1
  %37 = icmp eq i64 %36, %13
  br i1 %37, label %38, label %14, !llvm.loop !1031

38:                                               ; preds = %33
  %.lcssa = phi i32 [ %35, %33 ]
  %39 = icmp eq i32 %.lcssa, 0
  br i1 %39, label %44, label %40

40:                                               ; preds = %38
  %41 = tail call i32 @recCheck(i32 noundef %0, i32 noundef %.lcssa) #43, !range !133
  %42 = icmp eq i32 %41, 0
  %43 = select i1 %42, i32 0, i32 %.lcssa
  br label %44

44:                                               ; preds = %40, %38, %1
  %45 = phi i32 [ 0, %38 ], [ %43, %40 ], [ 0, %1 ]
  ret i32 %45
}

; Function Attrs: nofree nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @l(i32 noundef %0) #19 {
  %2 = load ptr, ptr @PtsArray, align 8, !tbaa !7
  %3 = sext i32 %0 to i64
  %4 = getelementptr inbounds %struct.bellbox, ptr %2, i64 %3
  %5 = load i32, ptr %4, align 4, !tbaa !102
  %6 = getelementptr inbounds %struct.bellbox, ptr %2, i64 %3, i32 1
  %7 = load i32, ptr %6, align 4, !tbaa !104
  %8 = load i32, ptr %2, align 4, !tbaa !102
  %9 = icmp slt i32 %8, 1
  br i1 %9, label %44, label %10

10:                                               ; preds = %1
  %11 = zext i32 %0 to i64
  %12 = add nuw i32 %8, 1
  %13 = zext i32 %12 to i64
  br label %14

14:                                               ; preds = %33, %10
  %15 = phi i64 [ 1, %10 ], [ %36, %33 ]
  %16 = phi i32 [ 0, %10 ], [ %35, %33 ]
  %17 = phi i32 [ 100000000, %10 ], [ %34, %33 ]
  %18 = icmp eq i64 %15, %11
  br i1 %18, label %33, label %19

19:                                               ; preds = %14
  %20 = getelementptr inbounds %struct.bellbox, ptr %2, i64 %15, i32 1
  %21 = load i32, ptr %20, align 4, !tbaa !104
  %22 = icmp eq i32 %21, %7
  br i1 %22, label %23, label %33

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.bellbox, ptr %2, i64 %15
  %25 = load i32, ptr %24, align 4, !tbaa !102
  %26 = icmp slt i32 %25, %5
  br i1 %26, label %27, label %33

27:                                               ; preds = %23
  %28 = sub nsw i32 %5, %25
  %29 = icmp slt i32 %28, %17
  %30 = tail call i32 @llvm.smin.i32(i32 %28, i32 %17)
  %31 = trunc i64 %15 to i32
  %32 = select i1 %29, i32 %31, i32 %16
  br label %33

33:                                               ; preds = %27, %23, %19, %14
  %34 = phi i32 [ %17, %14 ], [ %17, %19 ], [ %17, %23 ], [ %30, %27 ]
  %35 = phi i32 [ %16, %14 ], [ %16, %19 ], [ %16, %23 ], [ %32, %27 ]
  %36 = add nuw nsw i64 %15, 1
  %37 = icmp eq i64 %36, %13
  br i1 %37, label %38, label %14, !llvm.loop !1032

38:                                               ; preds = %33
  %.lcssa = phi i32 [ %35, %33 ]
  %39 = icmp eq i32 %.lcssa, 0
  br i1 %39, label %44, label %40

40:                                               ; preds = %38
  %41 = tail call i32 @recCheck(i32 noundef %0, i32 noundef %.lcssa) #43, !range !133
  %42 = icmp eq i32 %41, 0
  %43 = select i1 %42, i32 0, i32 %.lcssa
  br label %44

44:                                               ; preds = %40, %38, %1
  %45 = phi i32 [ 0, %38 ], [ %43, %40 ], [ 0, %1 ]
  ret i32 %45
}

; Function Attrs: nofree nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @r(i32 noundef %0) #19 {
  %2 = load ptr, ptr @PtsArray, align 8, !tbaa !7
  %3 = sext i32 %0 to i64
  %4 = getelementptr inbounds %struct.bellbox, ptr %2, i64 %3
  %5 = load i32, ptr %4, align 4, !tbaa !102
  %6 = getelementptr inbounds %struct.bellbox, ptr %2, i64 %3, i32 1
  %7 = load i32, ptr %6, align 4, !tbaa !104
  %8 = load i32, ptr %2, align 4, !tbaa !102
  %9 = icmp slt i32 %8, 1
  br i1 %9, label %44, label %10

10:                                               ; preds = %1
  %11 = zext i32 %0 to i64
  %12 = add nuw i32 %8, 1
  %13 = zext i32 %12 to i64
  br label %14

14:                                               ; preds = %33, %10
  %15 = phi i64 [ 1, %10 ], [ %36, %33 ]
  %16 = phi i32 [ 0, %10 ], [ %35, %33 ]
  %17 = phi i32 [ 100000000, %10 ], [ %34, %33 ]
  %18 = icmp eq i64 %15, %11
  br i1 %18, label %33, label %19

19:                                               ; preds = %14
  %20 = getelementptr inbounds %struct.bellbox, ptr %2, i64 %15, i32 1
  %21 = load i32, ptr %20, align 4, !tbaa !104
  %22 = icmp eq i32 %21, %7
  br i1 %22, label %23, label %33

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.bellbox, ptr %2, i64 %15
  %25 = load i32, ptr %24, align 4, !tbaa !102
  %26 = icmp sgt i32 %25, %5
  br i1 %26, label %27, label %33

27:                                               ; preds = %23
  %28 = sub nsw i32 %25, %5
  %29 = icmp slt i32 %28, %17
  %30 = tail call i32 @llvm.smin.i32(i32 %28, i32 %17)
  %31 = trunc i64 %15 to i32
  %32 = select i1 %29, i32 %31, i32 %16
  br label %33

33:                                               ; preds = %27, %23, %19, %14
  %34 = phi i32 [ %17, %14 ], [ %17, %19 ], [ %17, %23 ], [ %30, %27 ]
  %35 = phi i32 [ %16, %14 ], [ %16, %19 ], [ %16, %23 ], [ %32, %27 ]
  %36 = add nuw nsw i64 %15, 1
  %37 = icmp eq i64 %36, %13
  br i1 %37, label %38, label %14, !llvm.loop !1033

38:                                               ; preds = %33
  %.lcssa = phi i32 [ %35, %33 ]
  %39 = icmp eq i32 %.lcssa, 0
  br i1 %39, label %44, label %40

40:                                               ; preds = %38
  %41 = tail call i32 @recCheck(i32 noundef %0, i32 noundef %.lcssa) #43, !range !133
  %42 = icmp eq i32 %41, 0
  %43 = select i1 %42, i32 0, i32 %.lcssa
  br label %44

44:                                               ; preds = %40, %38, %1
  %45 = phi i32 [ 0, %38 ], [ %43, %40 ], [ 0, %1 ]
  ret i32 %45
}

; Function Attrs: nofree nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @b(i32 noundef %0) #19 {
  %2 = load ptr, ptr @PtsArray, align 8, !tbaa !7
  %3 = sext i32 %0 to i64
  %4 = getelementptr inbounds %struct.bellbox, ptr %2, i64 %3
  %5 = load i32, ptr %4, align 4, !tbaa !102
  %6 = getelementptr inbounds %struct.bellbox, ptr %2, i64 %3, i32 1
  %7 = load i32, ptr %6, align 4, !tbaa !104
  %8 = load i32, ptr %2, align 4, !tbaa !102
  %9 = icmp slt i32 %8, 1
  br i1 %9, label %44, label %10

10:                                               ; preds = %1
  %11 = zext i32 %0 to i64
  %12 = add nuw i32 %8, 1
  %13 = zext i32 %12 to i64
  br label %14

14:                                               ; preds = %33, %10
  %15 = phi i64 [ 1, %10 ], [ %36, %33 ]
  %16 = phi i32 [ 0, %10 ], [ %35, %33 ]
  %17 = phi i32 [ 100000000, %10 ], [ %34, %33 ]
  %18 = icmp eq i64 %15, %11
  br i1 %18, label %33, label %19

19:                                               ; preds = %14
  %20 = getelementptr inbounds %struct.bellbox, ptr %2, i64 %15
  %21 = load i32, ptr %20, align 4, !tbaa !102
  %22 = icmp eq i32 %21, %5
  br i1 %22, label %23, label %33

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.bellbox, ptr %2, i64 %15, i32 1
  %25 = load i32, ptr %24, align 4, !tbaa !104
  %26 = icmp slt i32 %25, %7
  br i1 %26, label %27, label %33

27:                                               ; preds = %23
  %28 = sub nsw i32 %7, %25
  %29 = icmp slt i32 %28, %17
  %30 = tail call i32 @llvm.smin.i32(i32 %28, i32 %17)
  %31 = trunc i64 %15 to i32
  %32 = select i1 %29, i32 %31, i32 %16
  br label %33

33:                                               ; preds = %27, %23, %19, %14
  %34 = phi i32 [ %17, %14 ], [ %17, %19 ], [ %17, %23 ], [ %30, %27 ]
  %35 = phi i32 [ %16, %14 ], [ %16, %19 ], [ %16, %23 ], [ %32, %27 ]
  %36 = add nuw nsw i64 %15, 1
  %37 = icmp eq i64 %36, %13
  br i1 %37, label %38, label %14, !llvm.loop !1034

38:                                               ; preds = %33
  %.lcssa = phi i32 [ %35, %33 ]
  %39 = icmp eq i32 %.lcssa, 0
  br i1 %39, label %44, label %40

40:                                               ; preds = %38
  %41 = tail call i32 @recCheck(i32 noundef %0, i32 noundef %.lcssa) #43, !range !133
  %42 = icmp eq i32 %41, 0
  %43 = select i1 %42, i32 0, i32 %.lcssa
  br label %44

44:                                               ; preds = %40, %38, %1
  %45 = phi i32 [ 0, %38 ], [ %43, %40 ], [ 0, %1 ]
  ret i32 %45
}

; Function Attrs: nounwind optsize uwtable
define internal void @condense() #0 {
  %1 = load ptr, ptr @PtsArray, align 8, !tbaa !7
  %2 = load i32, ptr %1, align 4, !tbaa !102
  %3 = icmp eq i32 %2, 1
  br i1 %3, label %4, label %8

4:                                                ; preds = %0
  %5 = load ptr, ptr @PtsOut, align 8, !tbaa !7
  %6 = load i32, ptr %5, align 4, !tbaa !102
  %7 = icmp slt i32 %6, 3
  br i1 %7, label %76, label %10

8:                                                ; preds = %0
  %9 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.901)
  tail call void @dumpError() #43
  tail call void @exit(i32 noundef 0) #49
  unreachable

10:                                               ; preds = %70, %4
  %11 = phi i32 [ %71, %70 ], [ %6, %4 ]
  %12 = phi i32 [ %74, %70 ], [ 3, %4 ]
  %13 = phi i32 [ %73, %70 ], [ 2, %4 ]
  %14 = phi i32 [ %72, %70 ], [ 1, %4 ]
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds %struct.bellbox, ptr %5, i64 %15
  %17 = load i32, ptr %16, align 4, !tbaa !102
  %18 = getelementptr inbounds %struct.bellbox, ptr %5, i64 %15, i32 1
  %19 = load i32, ptr %18, align 4, !tbaa !104
  %20 = sext i32 %13 to i64
  %21 = getelementptr inbounds %struct.bellbox, ptr %5, i64 %20
  %22 = load i32, ptr %21, align 4, !tbaa !102
  %23 = sext i32 %12 to i64
  %24 = getelementptr inbounds %struct.bellbox, ptr %5, i64 %23, i32 1
  %25 = load i32, ptr %24, align 4, !tbaa !104
  %26 = icmp eq i32 %17, %22
  br i1 %26, label %27, label %43

27:                                               ; preds = %10
  %28 = getelementptr inbounds %struct.bellbox, ptr %5, i64 %23
  %29 = load i32, ptr %28, align 4, !tbaa !102
  %30 = icmp eq i32 %29, %17
  br i1 %30, label %31, label %70

31:                                               ; preds = %27
  %32 = icmp sgt i32 %12, %11
  br i1 %32, label %66, label %33

33:                                               ; preds = %33, %31
  %34 = phi i64 [ %39, %33 ], [ %23, %31 ]
  %35 = getelementptr inbounds %struct.bellbox, ptr %5, i64 %34
  %36 = add nsw i64 %34, -1
  %37 = getelementptr inbounds %struct.bellbox, ptr %5, i64 %36
  %38 = load <2 x i32>, ptr %35, align 4, !tbaa !17
  store <2 x i32> %38, ptr %37, align 4, !tbaa !17
  %39 = add nsw i64 %34, 1
  %40 = load i32, ptr %5, align 4, !tbaa !102
  %41 = sext i32 %40 to i64
  %42 = icmp slt i64 %34, %41
  br i1 %42, label %33, label %66, !llvm.loop !1035

43:                                               ; preds = %10
  %44 = getelementptr inbounds %struct.bellbox, ptr %5, i64 %20, i32 1
  %45 = load i32, ptr %44, align 4, !tbaa !104
  %46 = icmp eq i32 %19, %45
  br i1 %46, label %47, label %61

47:                                               ; preds = %43
  %48 = icmp eq i32 %25, %19
  br i1 %48, label %49, label %70

49:                                               ; preds = %47
  %50 = icmp sgt i32 %12, %11
  br i1 %50, label %66, label %51

51:                                               ; preds = %51, %49
  %52 = phi i64 [ %57, %51 ], [ %23, %49 ]
  %53 = getelementptr inbounds %struct.bellbox, ptr %5, i64 %52
  %54 = add nsw i64 %52, -1
  %55 = getelementptr inbounds %struct.bellbox, ptr %5, i64 %54
  %56 = load <2 x i32>, ptr %53, align 4, !tbaa !17
  store <2 x i32> %56, ptr %55, align 4, !tbaa !17
  %57 = add nsw i64 %52, 1
  %58 = load i32, ptr %5, align 4, !tbaa !102
  %59 = sext i32 %58 to i64
  %60 = icmp slt i64 %52, %59
  br i1 %60, label %51, label %66, !llvm.loop !1036

61:                                               ; preds = %43
  %62 = load ptr, ptr @fpo, align 8, !tbaa !7
  %63 = tail call i64 @fwrite(ptr nonnull @.str.3.902, i64 38, i64 1, ptr %62)
  %64 = load ptr, ptr @fpo, align 8, !tbaa !7
  %65 = tail call i64 @fwrite(ptr nonnull @.str.4.903, i64 27, i64 1, ptr %64)
  tail call void @exit(i32 noundef 0) #49
  unreachable

66:                                               ; preds = %51, %49, %33, %31
  %67 = phi i32 [ %11, %31 ], [ %11, %49 ], [ %40, %33 ], [ %58, %51 ]
  %68 = add nsw i32 %67, -1
  store i32 %68, ptr %5, align 4, !tbaa !102
  %69 = add nsw i32 %12, -1
  br label %70

70:                                               ; preds = %66, %47, %27
  %71 = phi i32 [ %11, %27 ], [ %11, %47 ], [ %68, %66 ]
  %72 = phi i32 [ %13, %27 ], [ %13, %47 ], [ %14, %66 ]
  %73 = phi i32 [ %12, %27 ], [ %12, %47 ], [ %69, %66 ]
  %74 = add nsw i32 %73, 1
  %75 = icmp slt i32 %73, %71
  br i1 %75, label %10, label %76, !llvm.loop !1037

76:                                               ; preds = %70, %4
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @dumpError() #5 {
  %1 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.10)
  %2 = load ptr, ptr @PtsOut, align 8, !tbaa !7
  %3 = load i32, ptr %2, align 4, !tbaa !102
  %4 = icmp slt i32 %3, 1
  br i1 %4, label %18, label %5

5:                                                ; preds = %5, %0
  %6 = phi i64 [ %13, %5 ], [ 1, %0 ]
  %7 = phi ptr [ %14, %5 ], [ %2, %0 ]
  %8 = getelementptr inbounds %struct.bellbox, ptr %7, i64 %6
  %9 = load i32, ptr %8, align 4, !tbaa !102
  %10 = getelementptr inbounds %struct.bellbox, ptr %7, i64 %6, i32 1
  %11 = load i32, ptr %10, align 4, !tbaa !104
  %12 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.6.904, i32 noundef %9, i32 noundef %11) #43
  %13 = add nuw nsw i64 %6, 1
  %14 = load ptr, ptr @PtsOut, align 8, !tbaa !7
  %15 = load i32, ptr %14, align 4, !tbaa !102
  %16 = sext i32 %15 to i64
  %17 = icmp slt i64 %6, %16
  br i1 %17, label %5, label %18, !llvm.loop !1038

18:                                               ; preds = %5, %0
  %19 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.11)
  %20 = load ptr, ptr @PtsArray, align 8, !tbaa !7
  %21 = load i32, ptr %20, align 4, !tbaa !102
  %22 = icmp slt i32 %21, 1
  br i1 %22, label %36, label %23

23:                                               ; preds = %23, %18
  %24 = phi i64 [ %31, %23 ], [ 1, %18 ]
  %25 = phi ptr [ %32, %23 ], [ %20, %18 ]
  %26 = getelementptr inbounds %struct.bellbox, ptr %25, i64 %24
  %27 = load i32, ptr %26, align 4, !tbaa !102
  %28 = getelementptr inbounds %struct.bellbox, ptr %25, i64 %24, i32 1
  %29 = load i32, ptr %28, align 4, !tbaa !104
  %30 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.6.904, i32 noundef %27, i32 noundef %29) #43
  %31 = add nuw nsw i64 %24, 1
  %32 = load ptr, ptr @PtsArray, align 8, !tbaa !7
  %33 = load i32, ptr %32, align 4, !tbaa !102
  %34 = sext i32 %33 to i64
  %35 = icmp slt i64 %24, %34
  br i1 %35, label %23, label %36, !llvm.loop !1039

36:                                               ; preds = %23, %18
  %37 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.12)
  %38 = load ptr, ptr @rectang, align 8, !tbaa !7
  %39 = load i32, ptr %38, align 4, !tbaa !1040
  %40 = icmp slt i32 %39, 1
  br i1 %40, label %58, label %41

41:                                               ; preds = %41, %36
  %42 = phi i64 [ %53, %41 ], [ 1, %36 ]
  %43 = phi ptr [ %54, %41 ], [ %38, %36 ]
  %44 = getelementptr inbounds %struct.locbox.26, ptr %43, i64 %42
  %45 = load i32, ptr %44, align 4, !tbaa !1040
  %46 = getelementptr inbounds %struct.locbox.26, ptr %43, i64 %42, i32 1
  %47 = load i32, ptr %46, align 4, !tbaa !1042
  %48 = getelementptr inbounds %struct.locbox.26, ptr %43, i64 %42, i32 2
  %49 = load i32, ptr %48, align 4, !tbaa !1043
  %50 = getelementptr inbounds %struct.locbox.26, ptr %43, i64 %42, i32 3
  %51 = load i32, ptr %50, align 4, !tbaa !1044
  %52 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.9.905, i32 noundef %45, i32 noundef %47, i32 noundef %49, i32 noundef %51) #43
  %53 = add nuw nsw i64 %42, 1
  %54 = load ptr, ptr @rectang, align 8, !tbaa !7
  %55 = load i32, ptr %54, align 4, !tbaa !1040
  %56 = sext i32 %55 to i64
  %57 = icmp slt i64 %42, %56
  br i1 %57, label %41, label %58, !llvm.loop !1045

58:                                               ; preds = %41, %36
  %59 = load ptr, ptr @stdout, align 8, !tbaa !7
  %60 = tail call i32 @fflush(ptr noundef %59) #43
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @recCheck(i32 noundef %0, i32 noundef %1) #4 {
  %3 = load ptr, ptr @PtsArray, align 8, !tbaa !7
  %4 = sext i32 %0 to i64
  %5 = getelementptr inbounds %struct.bellbox, ptr %3, i64 %4
  %6 = load i32, ptr %5, align 4, !tbaa !102
  %7 = getelementptr inbounds %struct.bellbox, ptr %3, i64 %4, i32 1
  %8 = load i32, ptr %7, align 4, !tbaa !104
  %9 = sext i32 %1 to i64
  %10 = getelementptr inbounds %struct.bellbox, ptr %3, i64 %9
  %11 = load i32, ptr %10, align 4, !tbaa !102
  %12 = getelementptr inbounds %struct.bellbox, ptr %3, i64 %9, i32 1
  %13 = load i32, ptr %12, align 4, !tbaa !104
  %14 = load ptr, ptr @rectang, align 8, !tbaa !7
  %15 = load i32, ptr %14, align 4, !tbaa !1040
  %16 = icmp slt i32 %15, 1
  br i1 %16, label %48, label %17

17:                                               ; preds = %2
  %18 = add nuw i32 %15, 1
  %19 = zext i32 %18 to i64
  br label %23

20:                                               ; preds = %23
  %21 = add nuw nsw i64 %24, 1
  %22 = icmp eq i64 %21, %19
  br i1 %22, label %48, label %23, !llvm.loop !1046

23:                                               ; preds = %20, %17
  %24 = phi i64 [ 1, %17 ], [ %21, %20 ]
  %25 = getelementptr inbounds %struct.locbox.26, ptr %14, i64 %24
  %26 = load i32, ptr %25, align 4, !tbaa !1040
  %27 = getelementptr inbounds %struct.locbox.26, ptr %14, i64 %24, i32 1
  %28 = load i32, ptr %27, align 4, !tbaa !1042
  %29 = getelementptr inbounds %struct.locbox.26, ptr %14, i64 %24, i32 2
  %30 = load i32, ptr %29, align 4, !tbaa !1043
  %31 = getelementptr inbounds %struct.locbox.26, ptr %14, i64 %24, i32 3
  %32 = load i32, ptr %31, align 4, !tbaa !1044
  %33 = icmp slt i32 %6, %26
  %34 = icmp sgt i32 %6, %28
  %35 = select i1 %33, i1 true, i1 %34
  %36 = icmp slt i32 %8, %30
  %37 = select i1 %35, i1 true, i1 %36
  %38 = icmp sgt i32 %8, %32
  %39 = select i1 %37, i1 true, i1 %38
  %40 = icmp slt i32 %11, %26
  %41 = select i1 %39, i1 true, i1 %40
  %42 = icmp sgt i32 %11, %28
  %43 = select i1 %41, i1 true, i1 %42
  %44 = icmp slt i32 %13, %30
  %45 = select i1 %43, i1 true, i1 %44
  %46 = icmp sgt i32 %13, %32
  %47 = select i1 %45, i1 true, i1 %46
  br i1 %47, label %20, label %48

48:                                               ; preds = %23, %20, %2
  %49 = phi i32 [ 0, %2 ], [ 0, %20 ], [ 1, %23 ]
  ret i32 %49
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal void @addPts(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3) #20 {
  %5 = load ptr, ptr @PtsArray, align 8, !tbaa !7
  %6 = load i32, ptr %5, align 4, !tbaa !102
  %7 = add nsw i32 %6, 1
  store i32 %7, ptr %5, align 4, !tbaa !102
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds %struct.bellbox, ptr %5, i64 %8
  store i32 %0, ptr %9, align 4, !tbaa !102
  %10 = load i32, ptr %5, align 4, !tbaa !102
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds %struct.bellbox, ptr %5, i64 %11, i32 1
  store i32 %2, ptr %12, align 4, !tbaa !104
  %13 = add nsw i32 %10, 1
  store i32 %13, ptr %5, align 4, !tbaa !102
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds %struct.bellbox, ptr %5, i64 %14
  store i32 %0, ptr %15, align 4, !tbaa !102
  %16 = load i32, ptr %5, align 4, !tbaa !102
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds %struct.bellbox, ptr %5, i64 %17, i32 1
  store i32 %3, ptr %18, align 4, !tbaa !104
  %19 = add nsw i32 %16, 1
  store i32 %19, ptr %5, align 4, !tbaa !102
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds %struct.bellbox, ptr %5, i64 %20
  store i32 %1, ptr %21, align 4, !tbaa !102
  %22 = load i32, ptr %5, align 4, !tbaa !102
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds %struct.bellbox, ptr %5, i64 %23, i32 1
  store i32 %2, ptr %24, align 4, !tbaa !104
  %25 = add nsw i32 %22, 1
  store i32 %25, ptr %5, align 4, !tbaa !102
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds %struct.bellbox, ptr %5, i64 %26
  store i32 %1, ptr %27, align 4, !tbaa !102
  %28 = load i32, ptr %5, align 4, !tbaa !102
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds %struct.bellbox, ptr %5, i64 %29, i32 1
  store i32 %3, ptr %30, align 4, !tbaa !104
  %31 = load ptr, ptr @rectang, align 8, !tbaa !7
  %32 = load i32, ptr %31, align 4, !tbaa !1040
  %33 = add nsw i32 %32, 1
  store i32 %33, ptr %31, align 4, !tbaa !1040
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds %struct.locbox.26, ptr %31, i64 %34
  store i32 %0, ptr %35, align 4, !tbaa !1040
  %36 = load i32, ptr %31, align 4, !tbaa !1040
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds %struct.locbox.26, ptr %31, i64 %37, i32 1
  store i32 %1, ptr %38, align 4, !tbaa !1042
  %39 = getelementptr inbounds %struct.locbox.26, ptr %31, i64 %37, i32 2
  store i32 %2, ptr %39, align 4, !tbaa !1043
  %40 = getelementptr inbounds %struct.locbox.26, ptr %31, i64 %37, i32 3
  store i32 %3, ptr %40, align 4, !tbaa !1044
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, argmem: write, inaccessiblemem: none) uwtable
define internal void @initPts(i32 noundef %0, ptr nocapture noundef readnone %1, i32 noundef %2) #38 {
  %4 = load ptr, ptr @PtsArray, align 8, !tbaa !7
  %5 = load ptr, ptr @PtsOut, align 8, !tbaa !7
  br label %8

6:                                                ; preds = %8
  %7 = load ptr, ptr @rectang, align 8, !tbaa !7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(416) %7, i8 0, i64 416, i1 false), !tbaa !17
  ret void

8:                                                ; preds = %8, %3
  %9 = phi i64 [ 0, %3 ], [ %13, %8 ]
  %10 = getelementptr inbounds %struct.bellbox, ptr %4, i64 %9
  store i32 0, ptr %10, align 4, !tbaa !102
  %11 = getelementptr inbounds %struct.bellbox, ptr %4, i64 %9, i32 1
  store i32 0, ptr %11, align 4, !tbaa !104
  %12 = getelementptr inbounds %struct.bellbox, ptr %5, i64 %9
  store i32 0, ptr %12, align 4, !tbaa !102
  %13 = add nuw nsw i64 %9, 1
  %14 = icmp eq i64 %13, 101
  br i1 %14, label %6, label %8, !llvm.loop !1047
}

; Function Attrs: nofree nounwind optsize memory(readwrite, inaccessiblemem: write) uwtable
define internal i32 @upin(ptr nocapture noundef readonly %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4) #21 {
  %6 = load double, ptr @Tsave, align 8, !tbaa !36
  %7 = fdiv double %6, 1.000000e+05
  %8 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 2
  %9 = load <2 x i32>, ptr %8, align 4, !tbaa !17
  %10 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 5
  %11 = load i32, ptr %10, align 8, !tbaa !45
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 21, i64 %12
  %14 = load ptr, ptr %13, align 8, !tbaa !7
  %15 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 20
  %16 = load ptr, ptr %15, align 8, !tbaa !226
  %17 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 19
  %18 = load ptr, ptr %17, align 8, !tbaa !224
  %19 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 18
  %20 = load ptr, ptr %19, align 8, !tbaa !225
  %21 = load i32, ptr @overfill, align 4, !tbaa !17
  %22 = icmp sgt i32 %3, %4
  br i1 %22, label %34, label %23

23:                                               ; preds = %5
  %24 = sext i32 %3 to i64
  %25 = add i32 %4, 1
  br label %26

26:                                               ; preds = %26, %23
  %27 = phi i64 [ %24, %23 ], [ %31, %26 ]
  %28 = getelementptr inbounds %struct.contentbox, ptr %18, i64 %27
  %29 = load i32, ptr %28, align 4, !tbaa !232
  %30 = getelementptr inbounds %struct.contentbox, ptr %18, i64 %27, i32 1
  store i32 %29, ptr %30, align 4, !tbaa !797
  %31 = add nsw i64 %27, 1
  %32 = trunc i64 %31 to i32
  %33 = icmp eq i32 %25, %32
  br i1 %33, label %34, label %26, !llvm.loop !1048

34:                                               ; preds = %26, %5
  %35 = sext i32 %1 to i64
  %36 = getelementptr inbounds %struct.uncombox.25, ptr %16, i64 %35, i32 1
  %37 = load i32, ptr %36, align 4, !tbaa !250
  %38 = add nsw i32 %2, %1
  %39 = add nsw i32 %38, -1
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds %struct.uncombox.25, ptr %16, i64 %40, i32 1
  %42 = load i32, ptr %41, align 4, !tbaa !250
  %43 = icmp sgt i32 %37, %42
  br i1 %43, label %47, label %44

44:                                               ; preds = %34
  %45 = sext i32 %37 to i64
  %46 = add i32 %42, 1
  br label %53

47:                                               ; preds = %53, %34
  %48 = icmp sgt i32 %2, 0
  br i1 %48, label %49, label %175

49:                                               ; preds = %47
  %50 = fmul double %7, 1.000000e+01
  %51 = fptosi double %50 to i32
  %52 = sext i32 %38 to i64
  br label %61

53:                                               ; preds = %53, %44
  %54 = phi i64 [ %45, %44 ], [ %58, %53 ]
  %55 = getelementptr inbounds %struct.contentbox, ptr %18, i64 %54
  %56 = load i32, ptr %55, align 4, !tbaa !232
  %57 = getelementptr inbounds %struct.contentbox, ptr %18, i64 %54, i32 1
  store i32 %56, ptr %57, align 4, !tbaa !797
  %58 = add nsw i64 %54, 1
  %59 = trunc i64 %58 to i32
  %60 = icmp eq i32 %46, %59
  br i1 %60, label %47, label %53, !llvm.loop !1049

61:                                               ; preds = %90, %49
  %62 = phi i64 [ %35, %49 ], [ %92, %90 ]
  %63 = phi i32 [ %21, %49 ], [ %91, %90 ]
  %64 = getelementptr inbounds %struct.uncombox.25, ptr %16, i64 %62, i32 1
  %65 = load i32, ptr %64, align 4, !tbaa !250
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds %struct.contentbox, ptr %18, i64 %66, i32 1
  %68 = load i32, ptr %67, align 4, !tbaa !797
  %69 = add nsw i32 %68, -1
  store i32 %69, ptr %67, align 4, !tbaa !797
  %70 = getelementptr inbounds %struct.contentbox, ptr %18, i64 %66, i32 2
  %71 = load i32, ptr %70, align 4, !tbaa !316
  %72 = sub nsw i32 %68, %71
  %73 = icmp sgt i32 %72, 0
  br i1 %73, label %74, label %90

74:                                               ; preds = %61
  %75 = icmp eq i32 %72, 1
  br i1 %75, label %76, label %78

76:                                               ; preds = %74
  %77 = sub nsw i32 %63, %51
  br label %90

78:                                               ; preds = %74
  %79 = mul nsw i32 %72, %72
  %80 = sitofp i32 %79 to double
  %81 = fmul double %50, %80
  %82 = fptosi double %81 to i32
  %83 = add nsw i32 %72, -1
  %84 = mul nsw i32 %83, %83
  %85 = sitofp i32 %84 to double
  %86 = fmul double %50, %85
  %87 = fptosi double %86 to i32
  %88 = sub i32 %63, %82
  %89 = add i32 %88, %87
  br label %90

90:                                               ; preds = %78, %76, %61
  %91 = phi i32 [ %77, %76 ], [ %89, %78 ], [ %63, %61 ]
  %92 = add nsw i64 %62, 1
  %93 = icmp slt i64 %92, %52
  br i1 %93, label %61, label %94, !llvm.loop !1050

94:                                               ; preds = %90
  %.lcssa2 = phi i32 [ %91, %90 ]
  br i1 %48, label %95, label %175

95:                                               ; preds = %94
  %96 = add nsw i32 %3, -1
  %97 = fmul double %7, 1.000000e+01
  %98 = fptosi double %97 to i32
  %99 = sext i32 %38 to i64
  br label %105

100:                                              ; preds = %146
  %.lcssa = phi i32 [ %147, %146 ]
  br i1 %48, label %101, label %175

101:                                              ; preds = %100
  %102 = load ptr, ptr @termarray, align 8, !tbaa !7
  %103 = load ptr, ptr @netarray, align 8, !tbaa !7
  %104 = sext i32 %38 to i64
  br label %151

105:                                              ; preds = %146, %95
  %106 = phi i64 [ %35, %95 ], [ %149, %146 ]
  %107 = phi i32 [ 0, %95 ], [ %124, %146 ]
  %108 = phi i32 [ 0, %95 ], [ %123, %146 ]
  %109 = phi i32 [ %.lcssa2, %95 ], [ %147, %146 ]
  %110 = phi i32 [ %96, %95 ], [ %122, %146 ]
  %111 = icmp slt i32 %107, %108
  br i1 %111, label %112, label %115

112:                                              ; preds = %105
  %113 = add nsw i32 %107, 1
  %114 = sext i32 %110 to i64
  br label %120

115:                                              ; preds = %105
  %116 = add nsw i32 %110, 1
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds %struct.contentbox, ptr %18, i64 %117, i32 2
  %119 = load i32, ptr %118, align 4, !tbaa !316
  br label %120

120:                                              ; preds = %115, %112
  %121 = phi i64 [ %114, %112 ], [ %117, %115 ]
  %122 = phi i32 [ %110, %112 ], [ %116, %115 ]
  %123 = phi i32 [ %108, %112 ], [ %119, %115 ]
  %124 = phi i32 [ %113, %112 ], [ 1, %115 ]
  %125 = getelementptr inbounds %struct.contentbox, ptr %18, i64 %121, i32 1
  %126 = load i32, ptr %125, align 4, !tbaa !797
  %127 = add nsw i32 %126, 1
  store i32 %127, ptr %125, align 4, !tbaa !797
  %128 = sub nsw i32 %127, %123
  %129 = icmp sgt i32 %128, 0
  br i1 %129, label %130, label %146

130:                                              ; preds = %120
  %131 = icmp eq i32 %128, 1
  br i1 %131, label %132, label %134

132:                                              ; preds = %130
  %133 = add nsw i32 %109, %98
  br label %146

134:                                              ; preds = %130
  %135 = mul nsw i32 %128, %128
  %136 = sitofp i32 %135 to double
  %137 = fmul double %97, %136
  %138 = fptosi double %137 to i32
  %139 = add nsw i32 %128, -1
  %140 = mul nsw i32 %139, %139
  %141 = sitofp i32 %140 to double
  %142 = fmul double %97, %141
  %143 = fptosi double %142 to i32
  %144 = add i32 %109, %138
  %145 = sub i32 %144, %143
  br label %146

146:                                              ; preds = %134, %132, %120
  %147 = phi i32 [ %133, %132 ], [ %145, %134 ], [ %109, %120 ]
  %148 = getelementptr inbounds %struct.uncombox.25, ptr %16, i64 %106, i32 2
  store i32 %122, ptr %148, align 4, !tbaa !1051
  %149 = add nsw i64 %106, 1
  %150 = icmp slt i64 %149, %99
  br i1 %150, label %105, label %100, !llvm.loop !1052

151:                                              ; preds = %151, %101
  %152 = phi i64 [ %35, %101 ], [ %173, %151 ]
  %153 = getelementptr inbounds %struct.uncombox.25, ptr %16, i64 %152
  %154 = getelementptr inbounds %struct.uncombox.25, ptr %16, i64 %152, i32 2
  %155 = load i32, ptr %154, align 4, !tbaa !1051
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds %struct.locbox.26, ptr %20, i64 %156
  %158 = load i32, ptr %153, align 4, !tbaa !298
  %159 = sext i32 %158 to i64
  %160 = getelementptr inbounds ptr, ptr %102, i64 %159
  %161 = load ptr, ptr %160, align 8, !tbaa !7
  %162 = load i32, ptr %161, align 8, !tbaa !60
  %163 = sext i32 %162 to i64
  %164 = getelementptr inbounds ptr, ptr %103, i64 %163
  %165 = load ptr, ptr %164, align 8, !tbaa !7
  %166 = getelementptr inbounds %struct.dimbox, ptr %165, i64 0, i32 7
  store i32 1, ptr %166, align 8, !tbaa !989
  %167 = getelementptr inbounds %struct.plist, ptr %161, i64 0, i32 1
  %168 = load ptr, ptr %167, align 8, !tbaa !62
  %169 = getelementptr inbounds %struct.netbox, ptr %168, i64 0, i32 6
  store i32 1, ptr %169, align 4, !tbaa !58
  %170 = getelementptr inbounds %struct.netbox, ptr %168, i64 0, i32 3
  %171 = load <2 x i32>, ptr %157, align 4, !tbaa !17
  %172 = add nsw <2 x i32> %171, %9
  store <2 x i32> %172, ptr %170, align 8, !tbaa !17
  %173 = add nsw i64 %152, 1
  %174 = icmp slt i64 %173, %104
  br i1 %174, label %151, label %178, !llvm.loop !1053

175:                                              ; preds = %100, %94, %47
  %176 = phi i32 [ %.lcssa, %100 ], [ %.lcssa2, %94 ], [ %21, %47 ]
  %177 = load i32, ptr @funccost, align 4, !tbaa !17
  br label %325

178:                                              ; preds = %151
  %179 = load i32, ptr @funccost, align 4, !tbaa !17
  br i1 %48, label %180, label %325

180:                                              ; preds = %178
  %181 = load ptr, ptr @termarray, align 8, !tbaa !7
  %182 = load ptr, ptr @netarray, align 8, !tbaa !7
  %183 = sext i32 %38 to i64
  br label %184

184:                                              ; preds = %321, %180
  %185 = phi i64 [ %35, %180 ], [ %323, %321 ]
  %186 = phi i32 [ %179, %180 ], [ %322, %321 ]
  %187 = getelementptr inbounds %struct.uncombox.25, ptr %16, i64 %185
  %188 = load i32, ptr %187, align 4, !tbaa !298
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds ptr, ptr %181, i64 %189
  %191 = load ptr, ptr %190, align 8, !tbaa !7
  %192 = load i32, ptr %191, align 8, !tbaa !60
  %193 = sext i32 %192 to i64
  %194 = getelementptr inbounds ptr, ptr %182, i64 %193
  %195 = load ptr, ptr %194, align 8, !tbaa !7
  %196 = getelementptr inbounds %struct.dimbox, ptr %195, i64 0, i32 7
  %197 = load i32, ptr %196, align 8, !tbaa !989
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %321, label %199

199:                                              ; preds = %184
  %200 = getelementptr inbounds %struct.dimbox, ptr %195, i64 0, i32 1
  %201 = load i32, ptr %200, align 8, !tbaa !301
  %202 = icmp eq i32 %201, 1
  br i1 %202, label %321, label %203

203:                                              ; preds = %199
  store i32 0, ptr %196, align 8, !tbaa !989
  br label %204

204:                                              ; preds = %208, %203
  %205 = phi ptr [ %195, %203 ], [ %206, %208 ]
  %206 = load ptr, ptr %205, align 8, !tbaa !7
  %207 = icmp eq ptr %206, null
  br i1 %207, label %280, label %208

208:                                              ; preds = %204
  %209 = getelementptr inbounds %struct.netbox, ptr %206, i64 0, i32 9
  %210 = load i32, ptr %209, align 8, !tbaa !59
  %211 = icmp eq i32 %210, 1
  br i1 %211, label %204, label %212

212:                                              ; preds = %208
  %.lcssa1 = phi ptr [ %206, %208 ]
  %213 = getelementptr inbounds %struct.netbox, ptr %.lcssa1, i64 0, i32 6
  %214 = load i32, ptr %213, align 4, !tbaa !58
  %215 = icmp eq i32 %214, 1
  br i1 %215, label %216, label %221

216:                                              ; preds = %212
  %217 = getelementptr inbounds %struct.netbox, ptr %.lcssa1, i64 0, i32 3
  %218 = load i32, ptr %217, align 8, !tbaa !990
  %219 = getelementptr inbounds %struct.netbox, ptr %.lcssa1, i64 0, i32 4
  %220 = load i32, ptr %219, align 4, !tbaa !991
  store i32 0, ptr %213, align 4, !tbaa !58
  br label %226

221:                                              ; preds = %212
  %222 = getelementptr inbounds %struct.netbox, ptr %.lcssa1, i64 0, i32 1
  %223 = load i32, ptr %222, align 8, !tbaa !64
  %224 = getelementptr inbounds %struct.netbox, ptr %.lcssa1, i64 0, i32 2
  %225 = load i32, ptr %224, align 4, !tbaa !65
  br label %226

226:                                              ; preds = %221, %216
  %227 = phi i32 [ %218, %216 ], [ %223, %221 ]
  %228 = phi i32 [ %220, %216 ], [ %225, %221 ]
  %229 = getelementptr inbounds %struct.dimbox, ptr %195, i64 0, i32 5
  store i32 %227, ptr %229, align 8
  %230 = getelementptr inbounds %struct.dimbox, ptr %195, i64 0, i32 3
  store i32 %227, ptr %230, align 8
  %231 = getelementptr inbounds %struct.dimbox, ptr %195, i64 0, i32 10
  store i32 %228, ptr %231, align 4
  %232 = getelementptr inbounds %struct.dimbox, ptr %195, i64 0, i32 8
  store i32 %228, ptr %232, align 4
  %233 = load ptr, ptr %.lcssa1, align 8, !tbaa !63
  %234 = icmp eq ptr %233, null
  br i1 %234, label %280, label %235

235:                                              ; preds = %226
  %236 = getelementptr inbounds %struct.dimbox, ptr %195, i64 0, i32 3
  %237 = getelementptr inbounds %struct.dimbox, ptr %195, i64 0, i32 5
  %238 = getelementptr inbounds %struct.dimbox, ptr %195, i64 0, i32 8
  %239 = getelementptr inbounds %struct.dimbox, ptr %195, i64 0, i32 10
  br label %240

240:                                              ; preds = %277, %235
  %241 = phi ptr [ %233, %235 ], [ %278, %277 ]
  %242 = getelementptr inbounds %struct.netbox, ptr %241, i64 0, i32 9
  %243 = load i32, ptr %242, align 8, !tbaa !59
  %244 = icmp eq i32 %243, 1
  br i1 %244, label %277, label %245

245:                                              ; preds = %240
  %246 = getelementptr inbounds %struct.netbox, ptr %241, i64 0, i32 6
  %247 = load i32, ptr %246, align 4, !tbaa !58
  %248 = icmp eq i32 %247, 1
  br i1 %248, label %249, label %254

249:                                              ; preds = %245
  %250 = getelementptr inbounds %struct.netbox, ptr %241, i64 0, i32 3
  %251 = load i32, ptr %250, align 8, !tbaa !990
  %252 = getelementptr inbounds %struct.netbox, ptr %241, i64 0, i32 4
  %253 = load i32, ptr %252, align 4, !tbaa !991
  store i32 0, ptr %246, align 4, !tbaa !58
  br label %259

254:                                              ; preds = %245
  %255 = getelementptr inbounds %struct.netbox, ptr %241, i64 0, i32 1
  %256 = load i32, ptr %255, align 8, !tbaa !64
  %257 = getelementptr inbounds %struct.netbox, ptr %241, i64 0, i32 2
  %258 = load i32, ptr %257, align 4, !tbaa !65
  br label %259

259:                                              ; preds = %254, %249
  %260 = phi i32 [ %251, %249 ], [ %256, %254 ]
  %261 = phi i32 [ %253, %249 ], [ %258, %254 ]
  %262 = load i32, ptr %236, align 8, !tbaa !1007
  %263 = icmp slt i32 %260, %262
  br i1 %263, label %267, label %264

264:                                              ; preds = %259
  %265 = load i32, ptr %237, align 8, !tbaa !1008
  %266 = icmp sgt i32 %260, %265
  br i1 %266, label %267, label %269

267:                                              ; preds = %264, %259
  %268 = phi ptr [ %236, %259 ], [ %237, %264 ]
  store i32 %260, ptr %268, align 8, !tbaa !17
  br label %269

269:                                              ; preds = %267, %264
  %270 = load i32, ptr %238, align 4, !tbaa !1009
  %271 = icmp slt i32 %261, %270
  br i1 %271, label %275, label %272

272:                                              ; preds = %269
  %273 = load i32, ptr %239, align 4, !tbaa !1010
  %274 = icmp sgt i32 %261, %273
  br i1 %274, label %275, label %277

275:                                              ; preds = %272, %269
  %276 = phi ptr [ %238, %269 ], [ %239, %272 ]
  store i32 %261, ptr %276, align 4, !tbaa !17
  br label %277

277:                                              ; preds = %275, %272, %240
  %278 = load ptr, ptr %241, align 8, !tbaa !63
  %279 = icmp eq ptr %278, null
  br i1 %279, label %280, label %240, !llvm.loop !1054

280:                                              ; preds = %277, %226, %204
  %281 = getelementptr inbounds %struct.dimbox, ptr %195, i64 0, i32 11
  %282 = load double, ptr %281, align 8, !tbaa !40
  %283 = getelementptr inbounds %struct.dimbox, ptr %195, i64 0, i32 5
  %284 = load i32, ptr %283, align 8, !tbaa !1008
  %285 = getelementptr inbounds %struct.dimbox, ptr %195, i64 0, i32 3
  %286 = load i32, ptr %285, align 8, !tbaa !1007
  %287 = sub nsw i32 %284, %286
  %288 = sitofp i32 %287 to double
  %289 = fmul double %282, %288
  %290 = fptosi double %289 to i32
  %291 = getelementptr inbounds %struct.dimbox, ptr %195, i64 0, i32 4
  %292 = load i32, ptr %291, align 4, !tbaa !302
  %293 = getelementptr inbounds %struct.dimbox, ptr %195, i64 0, i32 2
  %294 = load i32, ptr %293, align 4, !tbaa !303
  %295 = sub nsw i32 %292, %294
  %296 = sitofp i32 %295 to double
  %297 = fmul double %282, %296
  %298 = fptosi double %297 to i32
  %299 = getelementptr inbounds %struct.dimbox, ptr %195, i64 0, i32 12
  %300 = load double, ptr %299, align 8, !tbaa !41
  %301 = getelementptr inbounds %struct.dimbox, ptr %195, i64 0, i32 10
  %302 = load i32, ptr %301, align 4, !tbaa !1010
  %303 = getelementptr inbounds %struct.dimbox, ptr %195, i64 0, i32 8
  %304 = load i32, ptr %303, align 4, !tbaa !1009
  %305 = sub nsw i32 %302, %304
  %306 = sitofp i32 %305 to double
  %307 = fmul double %300, %306
  %308 = fptosi double %307 to i32
  %309 = getelementptr inbounds %struct.dimbox, ptr %195, i64 0, i32 9
  %310 = load i32, ptr %309, align 8, !tbaa !304
  %311 = getelementptr inbounds %struct.dimbox, ptr %195, i64 0, i32 6
  %312 = load i32, ptr %311, align 4, !tbaa !305
  %313 = sub nsw i32 %310, %312
  %314 = sitofp i32 %313 to double
  %315 = fmul double %300, %314
  %316 = fptosi double %315 to i32
  %317 = add i32 %186, %290
  %318 = add i32 %317, %308
  %319 = add i32 %298, %316
  %320 = sub i32 %318, %319
  br label %321

321:                                              ; preds = %280, %199, %184
  %322 = phi i32 [ %186, %184 ], [ %186, %199 ], [ %320, %280 ]
  %323 = add nsw i64 %185, 1
  %324 = icmp slt i64 %323, %183
  br i1 %324, label %184, label %325, !llvm.loop !1055

325:                                              ; preds = %321, %178, %175
  %326 = phi i32 [ %179, %178 ], [ %177, %175 ], [ %179, %321 ]
  %327 = phi i32 [ %.lcssa, %178 ], [ %176, %175 ], [ %.lcssa, %321 ]
  %328 = phi i32 [ %179, %178 ], [ %177, %175 ], [ %322, %321 ]
  %329 = add nsw i32 %328, %327
  %330 = load i32, ptr @overfill, align 4, !tbaa !17
  %331 = add nsw i32 %330, %326
  %332 = icmp sgt i32 %329, %331
  br i1 %332, label %333, label %346

333:                                              ; preds = %325
  %334 = sub i32 %331, %329
  %335 = sitofp i32 %334 to double
  %336 = load double, ptr @T, align 8, !tbaa !36
  %337 = fdiv double %335, %336
  %338 = tail call double @exp(double noundef %337) #44
  %339 = load i32, ptr @randVar, align 4, !tbaa !17
  %340 = mul nsw i32 %339, 1103515245
  %341 = add nsw i32 %340, 12345
  store i32 %341, ptr @randVar, align 4, !tbaa !17
  %342 = and i32 %341, 2147483647
  %343 = sitofp i32 %342 to double
  %344 = fdiv double %343, 0x41DFFFFFFFC00000
  %345 = fcmp ogt double %338, %344
  br i1 %345, label %346, label %419

346:                                              ; preds = %333, %325
  br i1 %48, label %347, label %351

347:                                              ; preds = %346
  %348 = load ptr, ptr @termarray, align 8, !tbaa !7
  %349 = load ptr, ptr @netarray, align 8, !tbaa !7
  %350 = sext i32 %38 to i64
  br label %355

351:                                              ; preds = %355, %346
  br i1 %22, label %393, label %352

352:                                              ; preds = %351
  %353 = sext i32 %3 to i64
  %354 = add i32 %4, 1
  br label %385

355:                                              ; preds = %355, %347
  %356 = phi i64 [ %35, %347 ], [ %383, %355 ]
  %357 = getelementptr inbounds %struct.uncombox.25, ptr %16, i64 %356
  %358 = load i32, ptr %357, align 4, !tbaa !298
  %359 = sext i32 %358 to i64
  %360 = getelementptr inbounds ptr, ptr %348, i64 %359
  %361 = load ptr, ptr %360, align 8, !tbaa !7
  %362 = load i32, ptr %361, align 8, !tbaa !60
  %363 = sext i32 %362 to i64
  %364 = getelementptr inbounds ptr, ptr %349, i64 %363
  %365 = load ptr, ptr %364, align 8, !tbaa !7
  %366 = getelementptr inbounds %struct.dimbox, ptr %365, i64 0, i32 3
  %367 = load i32, ptr %366, align 8, !tbaa !1007
  %368 = getelementptr inbounds %struct.dimbox, ptr %365, i64 0, i32 2
  store i32 %367, ptr %368, align 4, !tbaa !303
  %369 = getelementptr inbounds %struct.dimbox, ptr %365, i64 0, i32 5
  %370 = load i32, ptr %369, align 8, !tbaa !1008
  %371 = getelementptr inbounds %struct.dimbox, ptr %365, i64 0, i32 4
  store i32 %370, ptr %371, align 4, !tbaa !302
  %372 = getelementptr inbounds %struct.dimbox, ptr %365, i64 0, i32 8
  %373 = load i32, ptr %372, align 4, !tbaa !1009
  %374 = getelementptr inbounds %struct.dimbox, ptr %365, i64 0, i32 6
  store i32 %373, ptr %374, align 4, !tbaa !305
  %375 = getelementptr inbounds %struct.dimbox, ptr %365, i64 0, i32 10
  %376 = load i32, ptr %375, align 4, !tbaa !1010
  %377 = getelementptr inbounds %struct.dimbox, ptr %365, i64 0, i32 9
  store i32 %376, ptr %377, align 8, !tbaa !304
  %378 = getelementptr inbounds %struct.plist, ptr %361, i64 0, i32 1
  %379 = load ptr, ptr %378, align 8, !tbaa !62
  %380 = getelementptr inbounds %struct.netbox, ptr %379, i64 0, i32 3
  %381 = getelementptr inbounds %struct.netbox, ptr %379, i64 0, i32 1
  %382 = load <2 x i32>, ptr %380, align 8, !tbaa !17
  store <2 x i32> %382, ptr %381, align 8, !tbaa !17
  %383 = add nsw i64 %356, 1
  %384 = icmp slt i64 %383, %350
  br i1 %384, label %355, label %351, !llvm.loop !1056

385:                                              ; preds = %385, %352
  %386 = phi i64 [ %353, %352 ], [ %390, %385 ]
  %387 = getelementptr inbounds %struct.contentbox, ptr %18, i64 %386
  %388 = getelementptr inbounds %struct.contentbox, ptr %18, i64 %386, i32 1
  %389 = load i32, ptr %388, align 4, !tbaa !797
  store i32 %389, ptr %387, align 4, !tbaa !232
  %390 = add nsw i64 %386, 1
  %391 = trunc i64 %390 to i32
  %392 = icmp eq i32 %354, %391
  br i1 %392, label %393, label %385, !llvm.loop !1057

393:                                              ; preds = %385, %351
  %394 = load i32, ptr %36, align 4, !tbaa !250
  %395 = load i32, ptr %41, align 4, !tbaa !250
  %396 = icmp sgt i32 %394, %395
  br i1 %396, label %400, label %397

397:                                              ; preds = %393
  %398 = sext i32 %394 to i64
  %399 = add i32 %395, 1
  br label %403

400:                                              ; preds = %403, %393
  br i1 %48, label %401, label %418

401:                                              ; preds = %400
  %402 = sext i32 %38 to i64
  br label %411

403:                                              ; preds = %403, %397
  %404 = phi i64 [ %398, %397 ], [ %408, %403 ]
  %405 = getelementptr inbounds %struct.contentbox, ptr %18, i64 %404
  %406 = getelementptr inbounds %struct.contentbox, ptr %18, i64 %404, i32 1
  %407 = load i32, ptr %406, align 4, !tbaa !797
  store i32 %407, ptr %405, align 4, !tbaa !232
  %408 = add nsw i64 %404, 1
  %409 = trunc i64 %408 to i32
  %410 = icmp eq i32 %399, %409
  br i1 %410, label %400, label %403, !llvm.loop !1058

411:                                              ; preds = %411, %401
  %412 = phi i64 [ %35, %401 ], [ %416, %411 ]
  %413 = getelementptr inbounds %struct.uncombox.25, ptr %16, i64 %412, i32 2
  %414 = load i32, ptr %413, align 4, !tbaa !1051
  %415 = getelementptr inbounds %struct.uncombox.25, ptr %16, i64 %412, i32 1
  store i32 %414, ptr %415, align 4, !tbaa !250
  %416 = add nsw i64 %412, 1
  %417 = icmp slt i64 %416, %402
  br i1 %417, label %411, label %418, !llvm.loop !1059

418:                                              ; preds = %411, %400
  store i32 %328, ptr @funccost, align 4, !tbaa !17
  store i32 %327, ptr @overfill, align 4, !tbaa !17
  br label %419

419:                                              ; preds = %418, %333
  %420 = phi i32 [ 1, %418 ], [ 0, %333 ]
  ret i32 %420
}

; Function Attrs: nofree nounwind optsize memory(readwrite, inaccessiblemem: write) uwtable
define internal i32 @upinswap(ptr nocapture noundef readonly %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4) #21 {
  %6 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 2
  %7 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 5
  %8 = load i32, ptr %7, align 8, !tbaa !45
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 21, i64 %9
  %11 = load ptr, ptr %10, align 8, !tbaa !7
  %12 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 20
  %13 = load ptr, ptr %12, align 8, !tbaa !226
  %14 = getelementptr inbounds %struct.tilebox, ptr %11, i64 0, i32 18
  %15 = load ptr, ptr %14, align 8, !tbaa !225
  %16 = sext i32 %4 to i64
  %17 = getelementptr inbounds %struct.locbox.26, ptr %15, i64 %16
  %18 = load ptr, ptr @termarray, align 8, !tbaa !7
  %19 = sext i32 %1 to i64
  %20 = getelementptr inbounds %struct.uncombox.25, ptr %13, i64 %19
  %21 = load i32, ptr %20, align 4, !tbaa !298
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds ptr, ptr %18, i64 %22
  %24 = load ptr, ptr %23, align 8, !tbaa !7
  %25 = load ptr, ptr @netarray, align 8, !tbaa !7
  %26 = load i32, ptr %24, align 8, !tbaa !60
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds ptr, ptr %25, i64 %27
  %29 = load ptr, ptr %28, align 8, !tbaa !7
  %30 = getelementptr inbounds %struct.dimbox, ptr %29, i64 0, i32 7
  store i32 1, ptr %30, align 8, !tbaa !989
  %31 = getelementptr inbounds %struct.plist, ptr %24, i64 0, i32 1
  %32 = load ptr, ptr %31, align 8, !tbaa !62
  %33 = getelementptr inbounds %struct.netbox, ptr %32, i64 0, i32 6
  store i32 1, ptr %33, align 4, !tbaa !58
  %34 = getelementptr inbounds %struct.netbox, ptr %32, i64 0, i32 3
  %35 = load <2 x i32>, ptr %6, align 4, !tbaa !17
  %36 = load <2 x i32>, ptr %17, align 4, !tbaa !17
  %37 = add nsw <2 x i32> %36, %35
  store <2 x i32> %37, ptr %34, align 8, !tbaa !17
  %38 = sext i32 %3 to i64
  %39 = getelementptr inbounds %struct.locbox.26, ptr %15, i64 %38
  %40 = sext i32 %2 to i64
  %41 = getelementptr inbounds %struct.uncombox.25, ptr %13, i64 %40
  %42 = load i32, ptr %41, align 4, !tbaa !298
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds ptr, ptr %18, i64 %43
  %45 = load ptr, ptr %44, align 8, !tbaa !7
  %46 = load i32, ptr %45, align 8, !tbaa !60
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds ptr, ptr %25, i64 %47
  %49 = load ptr, ptr %48, align 8, !tbaa !7
  %50 = getelementptr inbounds %struct.dimbox, ptr %49, i64 0, i32 7
  store i32 1, ptr %50, align 8, !tbaa !989
  %51 = getelementptr inbounds %struct.plist, ptr %45, i64 0, i32 1
  %52 = load ptr, ptr %51, align 8, !tbaa !62
  %53 = getelementptr inbounds %struct.netbox, ptr %52, i64 0, i32 6
  store i32 1, ptr %53, align 4, !tbaa !58
  %54 = getelementptr inbounds %struct.netbox, ptr %52, i64 0, i32 3
  %55 = load <2 x i32>, ptr %39, align 4, !tbaa !17
  %56 = add nsw <2 x i32> %55, %35
  store <2 x i32> %56, ptr %54, align 8, !tbaa !17
  %57 = load i32, ptr @funccost, align 4, !tbaa !17
  %58 = load i32, ptr %30, align 8, !tbaa !989
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %184, label %60

60:                                               ; preds = %5
  %61 = getelementptr inbounds %struct.dimbox, ptr %29, i64 0, i32 1
  %62 = load i32, ptr %61, align 8, !tbaa !301
  %63 = icmp eq i32 %62, 1
  br i1 %63, label %184, label %64

64:                                               ; preds = %60
  store i32 0, ptr %30, align 8, !tbaa !989
  br label %65

65:                                               ; preds = %69, %64
  %66 = phi ptr [ %29, %64 ], [ %67, %69 ]
  %67 = load ptr, ptr %66, align 8, !tbaa !7
  %68 = icmp eq ptr %67, null
  br i1 %68, label %141, label %69

69:                                               ; preds = %65
  %70 = getelementptr inbounds %struct.netbox, ptr %67, i64 0, i32 9
  %71 = load i32, ptr %70, align 8, !tbaa !59
  %72 = icmp eq i32 %71, 1
  br i1 %72, label %65, label %73

73:                                               ; preds = %69
  %.lcssa2 = phi ptr [ %67, %69 ]
  %74 = getelementptr inbounds %struct.netbox, ptr %.lcssa2, i64 0, i32 6
  %75 = load i32, ptr %74, align 4, !tbaa !58
  %76 = icmp eq i32 %75, 1
  br i1 %76, label %77, label %82

77:                                               ; preds = %73
  %78 = getelementptr inbounds %struct.netbox, ptr %.lcssa2, i64 0, i32 3
  %79 = load i32, ptr %78, align 8, !tbaa !990
  %80 = getelementptr inbounds %struct.netbox, ptr %.lcssa2, i64 0, i32 4
  %81 = load i32, ptr %80, align 4, !tbaa !991
  store i32 0, ptr %74, align 4, !tbaa !58
  br label %87

82:                                               ; preds = %73
  %83 = getelementptr inbounds %struct.netbox, ptr %.lcssa2, i64 0, i32 1
  %84 = load i32, ptr %83, align 8, !tbaa !64
  %85 = getelementptr inbounds %struct.netbox, ptr %.lcssa2, i64 0, i32 2
  %86 = load i32, ptr %85, align 4, !tbaa !65
  br label %87

87:                                               ; preds = %82, %77
  %88 = phi i32 [ %79, %77 ], [ %84, %82 ]
  %89 = phi i32 [ %81, %77 ], [ %86, %82 ]
  %90 = getelementptr inbounds %struct.dimbox, ptr %29, i64 0, i32 5
  store i32 %88, ptr %90, align 8
  %91 = getelementptr inbounds %struct.dimbox, ptr %29, i64 0, i32 3
  store i32 %88, ptr %91, align 8
  %92 = getelementptr inbounds %struct.dimbox, ptr %29, i64 0, i32 10
  store i32 %89, ptr %92, align 4
  %93 = getelementptr inbounds %struct.dimbox, ptr %29, i64 0, i32 8
  store i32 %89, ptr %93, align 4
  %94 = load ptr, ptr %.lcssa2, align 8, !tbaa !63
  %95 = icmp eq ptr %94, null
  br i1 %95, label %141, label %96

96:                                               ; preds = %87
  %97 = getelementptr inbounds %struct.dimbox, ptr %29, i64 0, i32 3
  %98 = getelementptr inbounds %struct.dimbox, ptr %29, i64 0, i32 5
  %99 = getelementptr inbounds %struct.dimbox, ptr %29, i64 0, i32 8
  %100 = getelementptr inbounds %struct.dimbox, ptr %29, i64 0, i32 10
  br label %101

101:                                              ; preds = %138, %96
  %102 = phi ptr [ %94, %96 ], [ %139, %138 ]
  %103 = getelementptr inbounds %struct.netbox, ptr %102, i64 0, i32 9
  %104 = load i32, ptr %103, align 8, !tbaa !59
  %105 = icmp eq i32 %104, 1
  br i1 %105, label %138, label %106

106:                                              ; preds = %101
  %107 = getelementptr inbounds %struct.netbox, ptr %102, i64 0, i32 6
  %108 = load i32, ptr %107, align 4, !tbaa !58
  %109 = icmp eq i32 %108, 1
  br i1 %109, label %110, label %115

110:                                              ; preds = %106
  %111 = getelementptr inbounds %struct.netbox, ptr %102, i64 0, i32 3
  %112 = load i32, ptr %111, align 8, !tbaa !990
  %113 = getelementptr inbounds %struct.netbox, ptr %102, i64 0, i32 4
  %114 = load i32, ptr %113, align 4, !tbaa !991
  store i32 0, ptr %107, align 4, !tbaa !58
  br label %120

115:                                              ; preds = %106
  %116 = getelementptr inbounds %struct.netbox, ptr %102, i64 0, i32 1
  %117 = load i32, ptr %116, align 8, !tbaa !64
  %118 = getelementptr inbounds %struct.netbox, ptr %102, i64 0, i32 2
  %119 = load i32, ptr %118, align 4, !tbaa !65
  br label %120

120:                                              ; preds = %115, %110
  %121 = phi i32 [ %112, %110 ], [ %117, %115 ]
  %122 = phi i32 [ %114, %110 ], [ %119, %115 ]
  %123 = load i32, ptr %97, align 8, !tbaa !1007
  %124 = icmp slt i32 %121, %123
  br i1 %124, label %128, label %125

125:                                              ; preds = %120
  %126 = load i32, ptr %98, align 8, !tbaa !1008
  %127 = icmp sgt i32 %121, %126
  br i1 %127, label %128, label %130

128:                                              ; preds = %125, %120
  %129 = phi ptr [ %97, %120 ], [ %98, %125 ]
  store i32 %121, ptr %129, align 8, !tbaa !17
  br label %130

130:                                              ; preds = %128, %125
  %131 = load i32, ptr %99, align 4, !tbaa !1009
  %132 = icmp slt i32 %122, %131
  br i1 %132, label %136, label %133

133:                                              ; preds = %130
  %134 = load i32, ptr %100, align 4, !tbaa !1010
  %135 = icmp sgt i32 %122, %134
  br i1 %135, label %136, label %138

136:                                              ; preds = %133, %130
  %137 = phi ptr [ %99, %130 ], [ %100, %133 ]
  store i32 %122, ptr %137, align 4, !tbaa !17
  br label %138

138:                                              ; preds = %136, %133, %101
  %139 = load ptr, ptr %102, align 8, !tbaa !63
  %140 = icmp eq ptr %139, null
  br i1 %140, label %141, label %101, !llvm.loop !1060

141:                                              ; preds = %138, %87, %65
  %142 = getelementptr inbounds %struct.dimbox, ptr %29, i64 0, i32 11
  %143 = load double, ptr %142, align 8, !tbaa !40
  %144 = getelementptr inbounds %struct.dimbox, ptr %29, i64 0, i32 5
  %145 = load i32, ptr %144, align 8, !tbaa !1008
  %146 = getelementptr inbounds %struct.dimbox, ptr %29, i64 0, i32 3
  %147 = load i32, ptr %146, align 8, !tbaa !1007
  %148 = sub nsw i32 %145, %147
  %149 = sitofp i32 %148 to double
  %150 = fmul double %143, %149
  %151 = fptosi double %150 to i32
  %152 = getelementptr inbounds %struct.dimbox, ptr %29, i64 0, i32 4
  %153 = load i32, ptr %152, align 4, !tbaa !302
  %154 = getelementptr inbounds %struct.dimbox, ptr %29, i64 0, i32 2
  %155 = load i32, ptr %154, align 4, !tbaa !303
  %156 = sub nsw i32 %153, %155
  %157 = sitofp i32 %156 to double
  %158 = fmul double %143, %157
  %159 = fptosi double %158 to i32
  %160 = getelementptr inbounds %struct.dimbox, ptr %29, i64 0, i32 12
  %161 = load double, ptr %160, align 8, !tbaa !41
  %162 = getelementptr inbounds %struct.dimbox, ptr %29, i64 0, i32 10
  %163 = load i32, ptr %162, align 4, !tbaa !1010
  %164 = getelementptr inbounds %struct.dimbox, ptr %29, i64 0, i32 8
  %165 = load i32, ptr %164, align 4, !tbaa !1009
  %166 = sub nsw i32 %163, %165
  %167 = sitofp i32 %166 to double
  %168 = fmul double %161, %167
  %169 = fptosi double %168 to i32
  %170 = getelementptr inbounds %struct.dimbox, ptr %29, i64 0, i32 9
  %171 = load i32, ptr %170, align 8, !tbaa !304
  %172 = getelementptr inbounds %struct.dimbox, ptr %29, i64 0, i32 6
  %173 = load i32, ptr %172, align 4, !tbaa !305
  %174 = sub nsw i32 %171, %173
  %175 = sitofp i32 %174 to double
  %176 = fmul double %161, %175
  %177 = fptosi double %176 to i32
  %178 = add i32 %57, %151
  %179 = add i32 %178, %169
  %180 = add i32 %159, %177
  %181 = sub i32 %179, %180
  %182 = load i32, ptr %50, align 8, !tbaa !989
  %183 = icmp eq i32 %182, 0
  br i1 %183, label %307, label %184

184:                                              ; preds = %141, %60, %5
  %185 = phi i32 [ %181, %141 ], [ %57, %60 ], [ %57, %5 ]
  %186 = getelementptr inbounds %struct.dimbox, ptr %49, i64 0, i32 1
  %187 = load i32, ptr %186, align 8, !tbaa !301
  %188 = icmp eq i32 %187, 1
  br i1 %188, label %307, label %189

189:                                              ; preds = %184
  store i32 0, ptr %50, align 8, !tbaa !989
  br label %190

190:                                              ; preds = %194, %189
  %191 = phi ptr [ %49, %189 ], [ %192, %194 ]
  %192 = load ptr, ptr %191, align 8, !tbaa !7
  %193 = icmp eq ptr %192, null
  br i1 %193, label %266, label %194

194:                                              ; preds = %190
  %195 = getelementptr inbounds %struct.netbox, ptr %192, i64 0, i32 9
  %196 = load i32, ptr %195, align 8, !tbaa !59
  %197 = icmp eq i32 %196, 1
  br i1 %197, label %190, label %198

198:                                              ; preds = %194
  %.lcssa1 = phi ptr [ %192, %194 ]
  %199 = getelementptr inbounds %struct.netbox, ptr %.lcssa1, i64 0, i32 6
  %200 = load i32, ptr %199, align 4, !tbaa !58
  %201 = icmp eq i32 %200, 1
  br i1 %201, label %202, label %207

202:                                              ; preds = %198
  %203 = getelementptr inbounds %struct.netbox, ptr %.lcssa1, i64 0, i32 3
  %204 = load i32, ptr %203, align 8, !tbaa !990
  %205 = getelementptr inbounds %struct.netbox, ptr %.lcssa1, i64 0, i32 4
  %206 = load i32, ptr %205, align 4, !tbaa !991
  store i32 0, ptr %199, align 4, !tbaa !58
  br label %212

207:                                              ; preds = %198
  %208 = getelementptr inbounds %struct.netbox, ptr %.lcssa1, i64 0, i32 1
  %209 = load i32, ptr %208, align 8, !tbaa !64
  %210 = getelementptr inbounds %struct.netbox, ptr %.lcssa1, i64 0, i32 2
  %211 = load i32, ptr %210, align 4, !tbaa !65
  br label %212

212:                                              ; preds = %207, %202
  %213 = phi i32 [ %204, %202 ], [ %209, %207 ]
  %214 = phi i32 [ %206, %202 ], [ %211, %207 ]
  %215 = getelementptr inbounds %struct.dimbox, ptr %49, i64 0, i32 5
  store i32 %213, ptr %215, align 8
  %216 = getelementptr inbounds %struct.dimbox, ptr %49, i64 0, i32 3
  store i32 %213, ptr %216, align 8
  %217 = getelementptr inbounds %struct.dimbox, ptr %49, i64 0, i32 10
  store i32 %214, ptr %217, align 4
  %218 = getelementptr inbounds %struct.dimbox, ptr %49, i64 0, i32 8
  store i32 %214, ptr %218, align 4
  %219 = load ptr, ptr %.lcssa1, align 8, !tbaa !63
  %220 = icmp eq ptr %219, null
  br i1 %220, label %266, label %221

221:                                              ; preds = %212
  %222 = getelementptr inbounds %struct.dimbox, ptr %49, i64 0, i32 3
  %223 = getelementptr inbounds %struct.dimbox, ptr %49, i64 0, i32 5
  %224 = getelementptr inbounds %struct.dimbox, ptr %49, i64 0, i32 8
  %225 = getelementptr inbounds %struct.dimbox, ptr %49, i64 0, i32 10
  br label %226

226:                                              ; preds = %263, %221
  %227 = phi ptr [ %219, %221 ], [ %264, %263 ]
  %228 = getelementptr inbounds %struct.netbox, ptr %227, i64 0, i32 9
  %229 = load i32, ptr %228, align 8, !tbaa !59
  %230 = icmp eq i32 %229, 1
  br i1 %230, label %263, label %231

231:                                              ; preds = %226
  %232 = getelementptr inbounds %struct.netbox, ptr %227, i64 0, i32 6
  %233 = load i32, ptr %232, align 4, !tbaa !58
  %234 = icmp eq i32 %233, 1
  br i1 %234, label %235, label %240

235:                                              ; preds = %231
  %236 = getelementptr inbounds %struct.netbox, ptr %227, i64 0, i32 3
  %237 = load i32, ptr %236, align 8, !tbaa !990
  %238 = getelementptr inbounds %struct.netbox, ptr %227, i64 0, i32 4
  %239 = load i32, ptr %238, align 4, !tbaa !991
  store i32 0, ptr %232, align 4, !tbaa !58
  br label %245

240:                                              ; preds = %231
  %241 = getelementptr inbounds %struct.netbox, ptr %227, i64 0, i32 1
  %242 = load i32, ptr %241, align 8, !tbaa !64
  %243 = getelementptr inbounds %struct.netbox, ptr %227, i64 0, i32 2
  %244 = load i32, ptr %243, align 4, !tbaa !65
  br label %245

245:                                              ; preds = %240, %235
  %246 = phi i32 [ %237, %235 ], [ %242, %240 ]
  %247 = phi i32 [ %239, %235 ], [ %244, %240 ]
  %248 = load i32, ptr %222, align 8, !tbaa !1007
  %249 = icmp slt i32 %246, %248
  br i1 %249, label %253, label %250

250:                                              ; preds = %245
  %251 = load i32, ptr %223, align 8, !tbaa !1008
  %252 = icmp sgt i32 %246, %251
  br i1 %252, label %253, label %255

253:                                              ; preds = %250, %245
  %254 = phi ptr [ %222, %245 ], [ %223, %250 ]
  store i32 %246, ptr %254, align 8, !tbaa !17
  br label %255

255:                                              ; preds = %253, %250
  %256 = load i32, ptr %224, align 4, !tbaa !1009
  %257 = icmp slt i32 %247, %256
  br i1 %257, label %261, label %258

258:                                              ; preds = %255
  %259 = load i32, ptr %225, align 4, !tbaa !1010
  %260 = icmp sgt i32 %247, %259
  br i1 %260, label %261, label %263

261:                                              ; preds = %258, %255
  %262 = phi ptr [ %224, %255 ], [ %225, %258 ]
  store i32 %247, ptr %262, align 4, !tbaa !17
  br label %263

263:                                              ; preds = %261, %258, %226
  %264 = load ptr, ptr %227, align 8, !tbaa !63
  %265 = icmp eq ptr %264, null
  br i1 %265, label %266, label %226, !llvm.loop !1061

266:                                              ; preds = %263, %212, %190
  %267 = getelementptr inbounds %struct.dimbox, ptr %49, i64 0, i32 11
  %268 = load double, ptr %267, align 8, !tbaa !40
  %269 = getelementptr inbounds %struct.dimbox, ptr %49, i64 0, i32 5
  %270 = load i32, ptr %269, align 8, !tbaa !1008
  %271 = getelementptr inbounds %struct.dimbox, ptr %49, i64 0, i32 3
  %272 = load i32, ptr %271, align 8, !tbaa !1007
  %273 = sub nsw i32 %270, %272
  %274 = sitofp i32 %273 to double
  %275 = fmul double %268, %274
  %276 = fptosi double %275 to i32
  %277 = getelementptr inbounds %struct.dimbox, ptr %49, i64 0, i32 4
  %278 = load i32, ptr %277, align 4, !tbaa !302
  %279 = getelementptr inbounds %struct.dimbox, ptr %49, i64 0, i32 2
  %280 = load i32, ptr %279, align 4, !tbaa !303
  %281 = sub nsw i32 %278, %280
  %282 = sitofp i32 %281 to double
  %283 = fmul double %268, %282
  %284 = fptosi double %283 to i32
  %285 = getelementptr inbounds %struct.dimbox, ptr %49, i64 0, i32 12
  %286 = load double, ptr %285, align 8, !tbaa !41
  %287 = getelementptr inbounds %struct.dimbox, ptr %49, i64 0, i32 10
  %288 = load i32, ptr %287, align 4, !tbaa !1010
  %289 = getelementptr inbounds %struct.dimbox, ptr %49, i64 0, i32 8
  %290 = load i32, ptr %289, align 4, !tbaa !1009
  %291 = sub nsw i32 %288, %290
  %292 = sitofp i32 %291 to double
  %293 = fmul double %286, %292
  %294 = fptosi double %293 to i32
  %295 = getelementptr inbounds %struct.dimbox, ptr %49, i64 0, i32 9
  %296 = load i32, ptr %295, align 8, !tbaa !304
  %297 = getelementptr inbounds %struct.dimbox, ptr %49, i64 0, i32 6
  %298 = load i32, ptr %297, align 4, !tbaa !305
  %299 = sub nsw i32 %296, %298
  %300 = sitofp i32 %299 to double
  %301 = fmul double %286, %300
  %302 = fptosi double %301 to i32
  %303 = add i32 %185, %276
  %304 = add i32 %303, %294
  %305 = add i32 %284, %302
  %306 = sub i32 %304, %305
  br label %307

307:                                              ; preds = %266, %184, %141
  %308 = phi i32 [ %306, %266 ], [ %185, %184 ], [ %181, %141 ]
  %309 = icmp sgt i32 %308, %57
  br i1 %309, label %310, label %326

310:                                              ; preds = %307
  %311 = sub nsw i32 %57, %308
  %312 = sitofp i32 %311 to double
  %313 = load double, ptr @T, align 8, !tbaa !36
  %314 = fdiv double %312, %313
  %315 = tail call double @exp(double noundef %314) #44
  %316 = load i32, ptr @randVar, align 4, !tbaa !17
  %317 = mul nsw i32 %316, 1103515245
  %318 = add nsw i32 %317, 12345
  store i32 %318, ptr @randVar, align 4, !tbaa !17
  %319 = and i32 %318, 2147483647
  %320 = sitofp i32 %319 to double
  %321 = fdiv double %320, 0x41DFFFFFFFC00000
  %322 = fcmp ogt double %315, %321
  br i1 %322, label %323, label %387

323:                                              ; preds = %310
  %324 = load ptr, ptr @termarray, align 8, !tbaa !7
  %325 = load ptr, ptr @netarray, align 8, !tbaa !7
  br label %326

326:                                              ; preds = %323, %307
  %327 = phi ptr [ %325, %323 ], [ %25, %307 ]
  %328 = phi ptr [ %324, %323 ], [ %18, %307 ]
  %329 = load i32, ptr %20, align 4, !tbaa !298
  %330 = sext i32 %329 to i64
  %331 = getelementptr inbounds ptr, ptr %328, i64 %330
  %332 = load ptr, ptr %331, align 8, !tbaa !7
  %333 = load i32, ptr %332, align 8, !tbaa !60
  %334 = sext i32 %333 to i64
  %335 = getelementptr inbounds ptr, ptr %327, i64 %334
  %336 = load ptr, ptr %335, align 8, !tbaa !7
  %337 = getelementptr inbounds %struct.dimbox, ptr %336, i64 0, i32 3
  %338 = load i32, ptr %337, align 8, !tbaa !1007
  %339 = getelementptr inbounds %struct.dimbox, ptr %336, i64 0, i32 2
  store i32 %338, ptr %339, align 4, !tbaa !303
  %340 = getelementptr inbounds %struct.dimbox, ptr %336, i64 0, i32 5
  %341 = load i32, ptr %340, align 8, !tbaa !1008
  %342 = getelementptr inbounds %struct.dimbox, ptr %336, i64 0, i32 4
  store i32 %341, ptr %342, align 4, !tbaa !302
  %343 = getelementptr inbounds %struct.dimbox, ptr %336, i64 0, i32 8
  %344 = load i32, ptr %343, align 4, !tbaa !1009
  %345 = getelementptr inbounds %struct.dimbox, ptr %336, i64 0, i32 6
  store i32 %344, ptr %345, align 4, !tbaa !305
  %346 = getelementptr inbounds %struct.dimbox, ptr %336, i64 0, i32 10
  %347 = load i32, ptr %346, align 4, !tbaa !1010
  %348 = getelementptr inbounds %struct.dimbox, ptr %336, i64 0, i32 9
  store i32 %347, ptr %348, align 8, !tbaa !304
  %349 = getelementptr inbounds %struct.plist, ptr %332, i64 0, i32 1
  %350 = load ptr, ptr %349, align 8, !tbaa !62
  %351 = getelementptr inbounds %struct.netbox, ptr %350, i64 0, i32 3
  %352 = getelementptr inbounds %struct.netbox, ptr %350, i64 0, i32 1
  %353 = load <2 x i32>, ptr %351, align 8, !tbaa !17
  store <2 x i32> %353, ptr %352, align 8, !tbaa !17
  %354 = load i32, ptr %41, align 4, !tbaa !298
  %355 = sext i32 %354 to i64
  %356 = getelementptr inbounds ptr, ptr %328, i64 %355
  %357 = load ptr, ptr %356, align 8, !tbaa !7
  %358 = load i32, ptr %357, align 8, !tbaa !60
  %359 = sext i32 %358 to i64
  %360 = getelementptr inbounds ptr, ptr %327, i64 %359
  %361 = load ptr, ptr %360, align 8, !tbaa !7
  %362 = getelementptr inbounds %struct.dimbox, ptr %361, i64 0, i32 3
  %363 = load i32, ptr %362, align 8, !tbaa !1007
  %364 = getelementptr inbounds %struct.dimbox, ptr %361, i64 0, i32 2
  store i32 %363, ptr %364, align 4, !tbaa !303
  %365 = getelementptr inbounds %struct.dimbox, ptr %361, i64 0, i32 5
  %366 = load i32, ptr %365, align 8, !tbaa !1008
  %367 = getelementptr inbounds %struct.dimbox, ptr %361, i64 0, i32 4
  store i32 %366, ptr %367, align 4, !tbaa !302
  %368 = getelementptr inbounds %struct.dimbox, ptr %361, i64 0, i32 8
  %369 = load i32, ptr %368, align 4, !tbaa !1009
  %370 = getelementptr inbounds %struct.dimbox, ptr %361, i64 0, i32 6
  store i32 %369, ptr %370, align 4, !tbaa !305
  %371 = getelementptr inbounds %struct.dimbox, ptr %361, i64 0, i32 10
  %372 = load i32, ptr %371, align 4, !tbaa !1010
  %373 = getelementptr inbounds %struct.dimbox, ptr %361, i64 0, i32 9
  store i32 %372, ptr %373, align 8, !tbaa !304
  %374 = getelementptr inbounds %struct.plist, ptr %357, i64 0, i32 1
  %375 = load ptr, ptr %374, align 8, !tbaa !62
  %376 = getelementptr inbounds %struct.netbox, ptr %375, i64 0, i32 3
  %377 = getelementptr inbounds %struct.netbox, ptr %375, i64 0, i32 1
  %378 = load <2 x i32>, ptr %376, align 8, !tbaa !17
  store <2 x i32> %378, ptr %377, align 8, !tbaa !17
  store i32 %354, ptr %20, align 4, !tbaa !298
  store i32 %329, ptr %41, align 4, !tbaa !298
  %379 = getelementptr inbounds %struct.uncombox.25, ptr %13, i64 %19, i32 1
  %380 = load i32, ptr %379, align 4, !tbaa !250
  %381 = getelementptr inbounds %struct.uncombox.25, ptr %13, i64 %40, i32 1
  %382 = load i32, ptr %381, align 4, !tbaa !250
  store i32 %382, ptr %379, align 4, !tbaa !250
  store i32 %380, ptr %381, align 4, !tbaa !250
  %383 = getelementptr inbounds %struct.uncombox.25, ptr %13, i64 %19, i32 7
  %384 = load i32, ptr %383, align 4, !tbaa !251
  %385 = getelementptr inbounds %struct.uncombox.25, ptr %13, i64 %40, i32 7
  %386 = load i32, ptr %385, align 4, !tbaa !251
  store i32 %386, ptr %383, align 4, !tbaa !251
  store i32 %384, ptr %385, align 4, !tbaa !251
  store i32 %308, ptr @funccost, align 4, !tbaa !17
  br label %387

387:                                              ; preds = %326, %310
  %388 = phi i32 [ 1, %326 ], [ 0, %310 ]
  ret i32 %388
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @usite0(i32 noundef %0, i32 noundef %1) #0 {
  %3 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %4 = sext i32 %0 to i64
  %5 = getelementptr inbounds ptr, ptr %3, i64 %4
  %6 = load ptr, ptr %5, align 8, !tbaa !7
  %7 = getelementptr inbounds %struct.cellbox, ptr %6, i64 0, i32 2
  %8 = load i32, ptr %7, align 4, !tbaa !164
  %9 = getelementptr inbounds %struct.cellbox, ptr %6, i64 0, i32 3
  %10 = load i32, ptr %9, align 8, !tbaa !165
  %11 = sext i32 %1 to i64
  %12 = getelementptr inbounds %struct.cellbox, ptr %6, i64 0, i32 21, i64 %11
  %13 = load ptr, ptr %12, align 8, !tbaa !7
  %14 = getelementptr inbounds %struct.tilebox, ptr %13, i64 0, i32 17
  %15 = load ptr, ptr %14, align 8, !tbaa !47
  %16 = load i32, ptr @penalty, align 4, !tbaa !17
  %17 = load ptr, ptr @overlap, align 8, !tbaa !7
  %18 = getelementptr inbounds %struct.cellbox, ptr %6, i64 0, i32 5
  %19 = load i32, ptr %18, align 8, !tbaa !45
  %20 = tail call i32 (i32, i32, i32, i32, i32, i32, i32, ...) %17(i32 noundef %0, i32 noundef %8, i32 noundef %10, i32 noundef %19, i32 noundef 0, i32 noundef 1, i32 noundef 0) #44
  %21 = sub nsw i32 %16, %20
  %22 = load ptr, ptr @blockarray, align 8, !tbaa !7
  %23 = load i32, ptr @binX, align 4, !tbaa !17
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds ptr, ptr %22, i64 %24
  %26 = load ptr, ptr %25, align 8, !tbaa !7
  %27 = load i32, ptr @binY, align 4, !tbaa !17
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds ptr, ptr %26, i64 %28
  %30 = load ptr, ptr %29, align 8, !tbaa !7
  store ptr %30, ptr @occa1ptr, align 8, !tbaa !7
  %31 = load ptr, ptr @overlap, align 8, !tbaa !7
  %32 = tail call i32 (i32, i32, i32, i32, i32, i32, i32, ...) %31(i32 noundef %0, i32 noundef %8, i32 noundef %10, i32 noundef %1, i32 noundef 0, i32 noundef 1, i32 noundef 0) #44
  %33 = add nsw i32 %32, %21
  %34 = load ptr, ptr @blockarray, align 8, !tbaa !7
  %35 = load i32, ptr @binX, align 4, !tbaa !17
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds ptr, ptr %34, i64 %36
  %38 = load ptr, ptr %37, align 8, !tbaa !7
  %39 = load i32, ptr @binY, align 4, !tbaa !17
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds ptr, ptr %38, i64 %40
  %42 = load ptr, ptr %41, align 8, !tbaa !7
  store ptr %42, ptr @occa2ptr, align 8, !tbaa !7
  tail call void @ufixpin(ptr noundef %15, i32 noundef 0, i32 noundef %8, i32 noundef %10) #44
  tail call void @usoftpin(ptr noundef %6, i32 noundef 0, i32 noundef %8, i32 noundef %10, i32 noundef %1) #44
  %43 = load i32, ptr @funccost, align 4, !tbaa !17
  %44 = tail call i32 @ufixnet(ptr noundef %15) #44
  %45 = add nsw i32 %44, %43
  %46 = tail call i32 @usoftnet(ptr noundef %6) #44
  %47 = add nsw i32 %45, %46
  %48 = add nsw i32 %47, %33
  %49 = load i32, ptr @funccost, align 4, !tbaa !17
  %50 = load i32, ptr @penalty, align 4, !tbaa !17
  %51 = add nsw i32 %50, %49
  %52 = icmp sgt i32 %48, %51
  br i1 %52, label %53, label %66

53:                                               ; preds = %2
  %54 = sub i32 %51, %48
  %55 = sitofp i32 %54 to double
  %56 = load double, ptr @T, align 8, !tbaa !36
  %57 = fdiv double %55, %56
  %58 = tail call double @exp(double noundef %57) #44
  %59 = load i32, ptr @randVar, align 4, !tbaa !17
  %60 = mul nsw i32 %59, 1103515245
  %61 = add nsw i32 %60, 12345
  store i32 %61, ptr @randVar, align 4, !tbaa !17
  %62 = and i32 %61, 2147483647
  %63 = sitofp i32 %62 to double
  %64 = fdiv double %63, 0x41DFFFFFFFC00000
  %65 = fcmp ogt double %58, %64
  br i1 %65, label %66, label %88

66:                                               ; preds = %53, %2
  tail call void @ufixpin(ptr noundef %15, i32 noundef 1, i32 noundef 0, i32 noundef 0) #44
  tail call void @usoftpin(ptr noundef nonnull %6, i32 noundef 1, i32 noundef 0, i32 noundef 0, i32 noundef 0) #44
  %67 = load ptr, ptr @occa1ptr, align 8, !tbaa !7
  %68 = load ptr, ptr @occa2ptr, align 8, !tbaa !7
  %69 = icmp eq ptr %67, %68
  br i1 %69, label %87, label %70

70:                                               ; preds = %70, %66
  %71 = phi i64 [ %75, %70 ], [ 1, %66 ]
  %72 = getelementptr inbounds i32, ptr %67, i64 %71
  %73 = load i32, ptr %72, align 4, !tbaa !17
  %74 = icmp eq i32 %73, %0
  %75 = add nuw i64 %71, 1
  br i1 %74, label %76, label %70, !llvm.loop !1062

76:                                               ; preds = %70
  %.lcssa = phi i64 [ %71, %70 ]
  %77 = getelementptr inbounds i32, ptr %67, i64 %.lcssa
  %78 = load i32, ptr %67, align 4, !tbaa !17
  %79 = add nsw i32 %78, -1
  store i32 %79, ptr %67, align 4, !tbaa !17
  %80 = sext i32 %78 to i64
  %81 = getelementptr inbounds i32, ptr %67, i64 %80
  %82 = load i32, ptr %81, align 4, !tbaa !17
  store i32 %82, ptr %77, align 4, !tbaa !17
  %83 = load i32, ptr %68, align 4, !tbaa !17
  %84 = add nsw i32 %83, 1
  store i32 %84, ptr %68, align 4, !tbaa !17
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds i32, ptr %68, i64 %85
  store i32 %0, ptr %86, align 4, !tbaa !17
  br label %87

87:                                               ; preds = %76, %66
  store i32 %1, ptr %18, align 8, !tbaa !45
  store i32 %47, ptr @funccost, align 4, !tbaa !17
  store i32 %33, ptr @penalty, align 4, !tbaa !17
  br label %88

88:                                               ; preds = %87, %53
  %89 = phi i32 [ 1, %87 ], [ 0, %53 ]
  ret i32 %89
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @usite1(i32 noundef %0, i32 noundef %1, i32 noundef %2) #0 {
  %4 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %5 = sext i32 %0 to i64
  %6 = getelementptr inbounds ptr, ptr %4, i64 %5
  %7 = load ptr, ptr %6, align 8, !tbaa !7
  %8 = getelementptr inbounds %struct.cellbox, ptr %7, i64 0, i32 2
  %9 = load i32, ptr %8, align 4, !tbaa !164
  %10 = getelementptr inbounds %struct.cellbox, ptr %7, i64 0, i32 3
  %11 = load i32, ptr %10, align 8, !tbaa !165
  %12 = getelementptr inbounds %struct.cellbox, ptr %7, i64 0, i32 5
  %13 = load i32, ptr %12, align 8, !tbaa !45
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds %struct.cellbox, ptr %7, i64 0, i32 21, i64 %14
  %16 = load ptr, ptr %15, align 8, !tbaa !7
  %17 = getelementptr inbounds %struct.tilebox, ptr %16, i64 0, i32 17
  %18 = load ptr, ptr %17, align 8, !tbaa !47
  %19 = load i32, ptr @penalty, align 4, !tbaa !17
  %20 = load ptr, ptr @overlap, align 8, !tbaa !7
  %21 = tail call i32 (i32, i32, i32, i32, i32, i32, i32, ...) %20(i32 noundef %0, i32 noundef %9, i32 noundef %11, i32 noundef %13, i32 noundef 0, i32 noundef 1, i32 noundef 0) #44
  %22 = sub nsw i32 %19, %21
  %23 = load ptr, ptr @blockarray, align 8, !tbaa !7
  %24 = load i32, ptr @binX, align 4, !tbaa !17
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds ptr, ptr %23, i64 %25
  %27 = load ptr, ptr %26, align 8, !tbaa !7
  %28 = load i32, ptr @binY, align 4, !tbaa !17
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds ptr, ptr %27, i64 %29
  %31 = load ptr, ptr %30, align 8, !tbaa !7
  store ptr %31, ptr @occa1ptr, align 8, !tbaa !7
  %32 = load ptr, ptr @overlap, align 8, !tbaa !7
  %33 = load i32, ptr %12, align 8, !tbaa !45
  %34 = tail call i32 (i32, i32, i32, i32, i32, i32, i32, ...) %32(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %33, i32 noundef 0, i32 noundef 1, i32 noundef 0) #44
  %35 = add nsw i32 %34, %22
  %36 = load ptr, ptr @blockarray, align 8, !tbaa !7
  %37 = load i32, ptr @binX, align 4, !tbaa !17
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds ptr, ptr %36, i64 %38
  %40 = load ptr, ptr %39, align 8, !tbaa !7
  %41 = load i32, ptr @binY, align 4, !tbaa !17
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds ptr, ptr %40, i64 %42
  %44 = load ptr, ptr %43, align 8, !tbaa !7
  store ptr %44, ptr @occa2ptr, align 8, !tbaa !7
  tail call void @ufixpin(ptr noundef %18, i32 noundef 0, i32 noundef %1, i32 noundef %2) #44
  %45 = load i32, ptr %12, align 8, !tbaa !45
  tail call void @usoftpin(ptr noundef %7, i32 noundef 0, i32 noundef %1, i32 noundef %2, i32 noundef %45) #44
  %46 = load i32, ptr @funccost, align 4, !tbaa !17
  %47 = tail call i32 @ufixnet(ptr noundef %18) #44
  %48 = add nsw i32 %47, %46
  %49 = tail call i32 @usoftnet(ptr noundef %7) #44
  %50 = add nsw i32 %48, %49
  %51 = load i32, ptr @finalShot, align 4, !tbaa !17
  %52 = icmp sgt i32 %51, 0
  br i1 %52, label %53, label %56

53:                                               ; preds = %3
  %54 = tail call i32 @deltaBB(i32 noundef %0, i32 noundef %1, i32 noundef %2) #44
  %55 = add nsw i32 %54, %35
  br label %56

56:                                               ; preds = %53, %3
  %57 = phi i32 [ %55, %53 ], [ %35, %3 ]
  %58 = phi i32 [ %54, %53 ], [ undef, %3 ]
  %59 = add nsw i32 %57, %50
  %60 = load i32, ptr @funccost, align 4, !tbaa !17
  %61 = load i32, ptr @penalty, align 4, !tbaa !17
  %62 = add nsw i32 %61, %60
  %63 = icmp sgt i32 %59, %62
  br i1 %63, label %64, label %77

64:                                               ; preds = %56
  %65 = sub i32 %62, %59
  %66 = sitofp i32 %65 to double
  %67 = load double, ptr @T, align 8, !tbaa !36
  %68 = fdiv double %66, %67
  %69 = tail call double @exp(double noundef %68) #44
  %70 = load i32, ptr @randVar, align 4, !tbaa !17
  %71 = mul nsw i32 %70, 1103515245
  %72 = add nsw i32 %71, 12345
  store i32 %72, ptr @randVar, align 4, !tbaa !17
  %73 = and i32 %72, 2147483647
  %74 = sitofp i32 %73 to double
  %75 = fdiv double %74, 0x41DFFFFFFFC00000
  %76 = fcmp ogt double %69, %75
  br i1 %76, label %77, label %109

77:                                               ; preds = %64, %56
  tail call void @ufixpin(ptr noundef %18, i32 noundef 1, i32 noundef 0, i32 noundef 0) #44
  tail call void @usoftpin(ptr noundef nonnull %7, i32 noundef 1, i32 noundef 0, i32 noundef 0, i32 noundef 0) #44
  %78 = load ptr, ptr @occa1ptr, align 8, !tbaa !7
  %79 = load ptr, ptr @occa2ptr, align 8, !tbaa !7
  %80 = icmp eq ptr %78, %79
  br i1 %80, label %98, label %81

81:                                               ; preds = %81, %77
  %82 = phi i64 [ %86, %81 ], [ 1, %77 ]
  %83 = getelementptr inbounds i32, ptr %78, i64 %82
  %84 = load i32, ptr %83, align 4, !tbaa !17
  %85 = icmp eq i32 %84, %0
  %86 = add nuw i64 %82, 1
  br i1 %85, label %87, label %81, !llvm.loop !1063

87:                                               ; preds = %81
  %.lcssa = phi i64 [ %82, %81 ]
  %88 = getelementptr inbounds i32, ptr %78, i64 %.lcssa
  %89 = load i32, ptr %78, align 4, !tbaa !17
  %90 = add nsw i32 %89, -1
  store i32 %90, ptr %78, align 4, !tbaa !17
  %91 = sext i32 %89 to i64
  %92 = getelementptr inbounds i32, ptr %78, i64 %91
  %93 = load i32, ptr %92, align 4, !tbaa !17
  store i32 %93, ptr %88, align 4, !tbaa !17
  %94 = load i32, ptr %79, align 4, !tbaa !17
  %95 = add nsw i32 %94, 1
  store i32 %95, ptr %79, align 4, !tbaa !17
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds i32, ptr %79, i64 %96
  store i32 %0, ptr %97, align 4, !tbaa !17
  br label %98

98:                                               ; preds = %87, %77
  store i32 %1, ptr %8, align 4, !tbaa !164
  store i32 %2, ptr %10, align 8, !tbaa !165
  store i32 %50, ptr @funccost, align 4, !tbaa !17
  %99 = load i32, ptr @finalShot, align 4, !tbaa !17
  %100 = icmp sgt i32 %99, 0
  br i1 %100, label %101, label %107

101:                                              ; preds = %98
  %102 = sub nsw i32 %57, %58
  %103 = load i32, ptr @bbbl, align 4, !tbaa !17
  store i32 %103, ptr @bbleft, align 4, !tbaa !17
  %104 = load i32, ptr @bbbr, align 4, !tbaa !17
  store i32 %104, ptr @bbright, align 4, !tbaa !17
  %105 = load i32, ptr @bbbb, align 4, !tbaa !17
  store i32 %105, ptr @bbbottom, align 4, !tbaa !17
  %106 = load i32, ptr @bbbt, align 4, !tbaa !17
  store i32 %106, ptr @bbtop, align 4, !tbaa !17
  br label %107

107:                                              ; preds = %101, %98
  %108 = phi i32 [ %102, %101 ], [ %57, %98 ]
  store i32 %108, ptr @penalty, align 4, !tbaa !17
  br label %109

109:                                              ; preds = %107, %64
  %110 = phi i32 [ 1, %107 ], [ 0, %64 ]
  ret i32 %110
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @usite2(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5) #0 {
  %7 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %8 = sext i32 %0 to i64
  %9 = getelementptr inbounds ptr, ptr %7, i64 %8
  %10 = load ptr, ptr %9, align 8, !tbaa !7
  %11 = getelementptr inbounds %struct.cellbox, ptr %10, i64 0, i32 2
  %12 = load i32, ptr %11, align 4, !tbaa !164
  %13 = getelementptr inbounds %struct.cellbox, ptr %10, i64 0, i32 3
  %14 = load i32, ptr %13, align 8, !tbaa !165
  %15 = getelementptr inbounds %struct.cellbox, ptr %10, i64 0, i32 5
  %16 = load i32, ptr %15, align 8, !tbaa !45
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds %struct.cellbox, ptr %10, i64 0, i32 21, i64 %17
  %19 = load ptr, ptr %18, align 8, !tbaa !7
  %20 = getelementptr inbounds %struct.tilebox, ptr %19, i64 0, i32 17
  %21 = load ptr, ptr %20, align 8, !tbaa !47
  %22 = sext i32 %1 to i64
  %23 = getelementptr inbounds ptr, ptr %7, i64 %22
  %24 = load ptr, ptr %23, align 8, !tbaa !7
  %25 = getelementptr inbounds %struct.cellbox, ptr %24, i64 0, i32 2
  %26 = load i32, ptr %25, align 4, !tbaa !164
  %27 = getelementptr inbounds %struct.cellbox, ptr %24, i64 0, i32 3
  %28 = load i32, ptr %27, align 8, !tbaa !165
  %29 = getelementptr inbounds %struct.cellbox, ptr %24, i64 0, i32 5
  %30 = load i32, ptr %29, align 8, !tbaa !45
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds %struct.cellbox, ptr %24, i64 0, i32 21, i64 %31
  %33 = load ptr, ptr %32, align 8, !tbaa !7
  %34 = getelementptr inbounds %struct.tilebox, ptr %33, i64 0, i32 17
  %35 = load ptr, ptr %34, align 8, !tbaa !47
  %36 = load i32, ptr @penalty, align 4, !tbaa !17
  %37 = load ptr, ptr @overlap, align 8, !tbaa !7
  %38 = tail call i32 (i32, i32, i32, i32, i32, i32, i32, ...) %37(i32 noundef %0, i32 noundef %12, i32 noundef %14, i32 noundef %16, i32 noundef 0, i32 noundef 1, i32 noundef 0) #44
  %39 = load ptr, ptr @blockarray, align 8, !tbaa !7
  %40 = load i32, ptr @binX, align 4, !tbaa !17
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds ptr, ptr %39, i64 %41
  %43 = load ptr, ptr %42, align 8, !tbaa !7
  %44 = load i32, ptr @binY, align 4, !tbaa !17
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds ptr, ptr %43, i64 %45
  %47 = load ptr, ptr %46, align 8, !tbaa !7
  store ptr %47, ptr @occa1ptr, align 8, !tbaa !7
  %48 = load ptr, ptr @overlap, align 8, !tbaa !7
  %49 = tail call i32 (i32, i32, i32, i32, i32, i32, i32, ...) %48(i32 noundef %1, i32 noundef %26, i32 noundef %28, i32 noundef %30, i32 noundef %0, i32 noundef 1, i32 noundef 0) #44
  %50 = load ptr, ptr @blockarray, align 8, !tbaa !7
  %51 = load i32, ptr @binX, align 4, !tbaa !17
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds ptr, ptr %50, i64 %52
  %54 = load ptr, ptr %53, align 8, !tbaa !7
  %55 = load i32, ptr @binY, align 4, !tbaa !17
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds ptr, ptr %54, i64 %56
  %58 = load ptr, ptr %57, align 8, !tbaa !7
  store ptr %58, ptr @occb1ptr, align 8, !tbaa !7
  %59 = load ptr, ptr @overlap, align 8, !tbaa !7
  %60 = tail call i32 (i32, i32, i32, i32, i32, i32, i32, ...) %59(i32 noundef %0, i32 noundef %2, i32 noundef %3, i32 noundef %16, i32 noundef %1, i32 noundef 0, i32 noundef %30) #44
  %61 = load ptr, ptr @blockarray, align 8, !tbaa !7
  %62 = load i32, ptr @binX, align 4, !tbaa !17
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds ptr, ptr %61, i64 %63
  %65 = load ptr, ptr %64, align 8, !tbaa !7
  %66 = load i32, ptr @binY, align 4, !tbaa !17
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds ptr, ptr %65, i64 %67
  %69 = load ptr, ptr %68, align 8, !tbaa !7
  store ptr %69, ptr @occa2ptr, align 8, !tbaa !7
  %70 = load ptr, ptr @overlap, align 8, !tbaa !7
  %71 = tail call i32 (i32, i32, i32, i32, i32, i32, i32, ...) %70(i32 noundef %1, i32 noundef %4, i32 noundef %5, i32 noundef %30, i32 noundef %0, i32 noundef 1, i32 noundef 0) #44
  %72 = add i32 %38, %49
  %73 = sub i32 %36, %72
  %74 = add nsw i32 %73, %60
  %75 = add nsw i32 %74, %71
  %76 = load ptr, ptr @blockarray, align 8, !tbaa !7
  %77 = load i32, ptr @binX, align 4, !tbaa !17
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds ptr, ptr %76, i64 %78
  %80 = load ptr, ptr %79, align 8, !tbaa !7
  %81 = load i32, ptr @binY, align 4, !tbaa !17
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds ptr, ptr %80, i64 %82
  %84 = load ptr, ptr %83, align 8, !tbaa !7
  store ptr %84, ptr @occb2ptr, align 8, !tbaa !7
  tail call void @ufixpin(ptr noundef %21, i32 noundef 0, i32 noundef %2, i32 noundef %3) #44
  tail call void @usoftpin(ptr noundef %10, i32 noundef 0, i32 noundef %2, i32 noundef %3, i32 noundef %16) #44
  tail call void @ufixpin(ptr noundef %35, i32 noundef 0, i32 noundef %4, i32 noundef %5) #44
  tail call void @usoftpin(ptr noundef %24, i32 noundef 0, i32 noundef %4, i32 noundef %5, i32 noundef %30) #44
  %85 = load i32, ptr @funccost, align 4, !tbaa !17
  %86 = tail call i32 @ufixnet(ptr noundef %21) #44
  %87 = add nsw i32 %86, %85
  %88 = tail call i32 @usoftnet(ptr noundef %10) #44
  %89 = add nsw i32 %87, %88
  %90 = tail call i32 @ufixnet(ptr noundef %35) #44
  %91 = add nsw i32 %89, %90
  %92 = tail call i32 @usoftnet(ptr noundef %24) #44
  %93 = add nsw i32 %91, %92
  %94 = add nsw i32 %93, %75
  %95 = load i32, ptr @funccost, align 4, !tbaa !17
  %96 = load i32, ptr @penalty, align 4, !tbaa !17
  %97 = add nsw i32 %96, %95
  %98 = icmp sgt i32 %94, %97
  br i1 %98, label %99, label %112

99:                                               ; preds = %6
  %100 = sub i32 %97, %94
  %101 = sitofp i32 %100 to double
  %102 = load double, ptr @T, align 8, !tbaa !36
  %103 = fdiv double %101, %102
  %104 = tail call double @exp(double noundef %103) #44
  %105 = load i32, ptr @randVar, align 4, !tbaa !17
  %106 = mul nsw i32 %105, 1103515245
  %107 = add nsw i32 %106, 12345
  store i32 %107, ptr @randVar, align 4, !tbaa !17
  %108 = and i32 %107, 2147483647
  %109 = sitofp i32 %108 to double
  %110 = fdiv double %109, 0x41DFFFFFFFC00000
  %111 = fcmp ogt double %104, %110
  br i1 %111, label %112, label %155

112:                                              ; preds = %99, %6
  tail call void @ufixpin(ptr noundef %21, i32 noundef 1, i32 noundef 0, i32 noundef 0) #44
  tail call void @usoftpin(ptr noundef nonnull %10, i32 noundef 1, i32 noundef 0, i32 noundef 0, i32 noundef 0) #44
  tail call void @ufixpin(ptr noundef %35, i32 noundef 1, i32 noundef 0, i32 noundef 0) #44
  tail call void @usoftpin(ptr noundef nonnull %24, i32 noundef 1, i32 noundef 0, i32 noundef 0, i32 noundef 0) #44
  %113 = load ptr, ptr @occa1ptr, align 8, !tbaa !7
  %114 = load ptr, ptr @occa2ptr, align 8, !tbaa !7
  %115 = icmp eq ptr %113, %114
  br i1 %115, label %133, label %116

116:                                              ; preds = %116, %112
  %117 = phi i64 [ %121, %116 ], [ 1, %112 ]
  %118 = getelementptr inbounds i32, ptr %113, i64 %117
  %119 = load i32, ptr %118, align 4, !tbaa !17
  %120 = icmp eq i32 %119, %0
  %121 = add nuw i64 %117, 1
  br i1 %120, label %122, label %116, !llvm.loop !1064

122:                                              ; preds = %116
  %.lcssa1 = phi i64 [ %117, %116 ]
  %123 = getelementptr inbounds i32, ptr %113, i64 %.lcssa1
  %124 = load i32, ptr %113, align 4, !tbaa !17
  %125 = add nsw i32 %124, -1
  store i32 %125, ptr %113, align 4, !tbaa !17
  %126 = sext i32 %124 to i64
  %127 = getelementptr inbounds i32, ptr %113, i64 %126
  %128 = load i32, ptr %127, align 4, !tbaa !17
  store i32 %128, ptr %123, align 4, !tbaa !17
  %129 = load i32, ptr %114, align 4, !tbaa !17
  %130 = add nsw i32 %129, 1
  store i32 %130, ptr %114, align 4, !tbaa !17
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds i32, ptr %114, i64 %131
  store i32 %0, ptr %132, align 4, !tbaa !17
  br label %133

133:                                              ; preds = %122, %112
  %134 = load ptr, ptr @occb1ptr, align 8, !tbaa !7
  %135 = load ptr, ptr @occb2ptr, align 8, !tbaa !7
  %136 = icmp eq ptr %134, %135
  br i1 %136, label %154, label %137

137:                                              ; preds = %137, %133
  %138 = phi i64 [ %142, %137 ], [ 1, %133 ]
  %139 = getelementptr inbounds i32, ptr %134, i64 %138
  %140 = load i32, ptr %139, align 4, !tbaa !17
  %141 = icmp eq i32 %140, %1
  %142 = add nuw i64 %138, 1
  br i1 %141, label %143, label %137, !llvm.loop !1065

143:                                              ; preds = %137
  %.lcssa = phi i64 [ %138, %137 ]
  %144 = getelementptr inbounds i32, ptr %134, i64 %.lcssa
  %145 = load i32, ptr %134, align 4, !tbaa !17
  %146 = add nsw i32 %145, -1
  store i32 %146, ptr %134, align 4, !tbaa !17
  %147 = sext i32 %145 to i64
  %148 = getelementptr inbounds i32, ptr %134, i64 %147
  %149 = load i32, ptr %148, align 4, !tbaa !17
  store i32 %149, ptr %144, align 4, !tbaa !17
  %150 = load i32, ptr %135, align 4, !tbaa !17
  %151 = add nsw i32 %150, 1
  store i32 %151, ptr %135, align 4, !tbaa !17
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds i32, ptr %135, i64 %152
  store i32 %1, ptr %153, align 4, !tbaa !17
  br label %154

154:                                              ; preds = %143, %133
  store i32 %2, ptr %11, align 4, !tbaa !164
  store i32 %3, ptr %13, align 8, !tbaa !165
  store i32 %4, ptr %25, align 4, !tbaa !164
  store i32 %5, ptr %27, align 8, !tbaa !165
  store i32 %93, ptr @funccost, align 4, !tbaa !17
  store i32 %75, ptr @penalty, align 4, !tbaa !17
  br label %155

155:                                              ; preds = %154, %99
  %156 = phi i32 [ 1, %154 ], [ 0, %99 ]
  ret i32 %156
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @usiteo1(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3) #0 {
  %5 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %6 = sext i32 %0 to i64
  %7 = getelementptr inbounds ptr, ptr %5, i64 %6
  %8 = load ptr, ptr %7, align 8, !tbaa !7
  %9 = getelementptr inbounds %struct.cellbox, ptr %8, i64 0, i32 2
  %10 = load i32, ptr %9, align 4, !tbaa !164
  %11 = getelementptr inbounds %struct.cellbox, ptr %8, i64 0, i32 3
  %12 = load i32, ptr %11, align 8, !tbaa !165
  %13 = sext i32 %3 to i64
  %14 = getelementptr inbounds %struct.cellbox, ptr %8, i64 0, i32 21, i64 %13
  %15 = load ptr, ptr %14, align 8, !tbaa !7
  %16 = getelementptr inbounds %struct.tilebox, ptr %15, i64 0, i32 17
  %17 = load ptr, ptr %16, align 8, !tbaa !47
  %18 = load i32, ptr @penalty, align 4, !tbaa !17
  %19 = load ptr, ptr @overlap, align 8, !tbaa !7
  %20 = getelementptr inbounds %struct.cellbox, ptr %8, i64 0, i32 5
  %21 = load i32, ptr %20, align 8, !tbaa !45
  %22 = tail call i32 (i32, i32, i32, i32, i32, i32, i32, ...) %19(i32 noundef %0, i32 noundef %10, i32 noundef %12, i32 noundef %21, i32 noundef 0, i32 noundef 1, i32 noundef 0) #44
  %23 = sub nsw i32 %18, %22
  %24 = load ptr, ptr @blockarray, align 8, !tbaa !7
  %25 = load i32, ptr @binX, align 4, !tbaa !17
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds ptr, ptr %24, i64 %26
  %28 = load ptr, ptr %27, align 8, !tbaa !7
  %29 = load i32, ptr @binY, align 4, !tbaa !17
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds ptr, ptr %28, i64 %30
  %32 = load ptr, ptr %31, align 8, !tbaa !7
  store ptr %32, ptr @occa1ptr, align 8, !tbaa !7
  %33 = load ptr, ptr @overlap, align 8, !tbaa !7
  %34 = tail call i32 (i32, i32, i32, i32, i32, i32, i32, ...) %33(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef 0, i32 noundef 1, i32 noundef 0) #44
  %35 = add nsw i32 %34, %23
  %36 = load ptr, ptr @blockarray, align 8, !tbaa !7
  %37 = load i32, ptr @binX, align 4, !tbaa !17
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds ptr, ptr %36, i64 %38
  %40 = load ptr, ptr %39, align 8, !tbaa !7
  %41 = load i32, ptr @binY, align 4, !tbaa !17
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds ptr, ptr %40, i64 %42
  %44 = load ptr, ptr %43, align 8, !tbaa !7
  store ptr %44, ptr @occa2ptr, align 8, !tbaa !7
  tail call void @ufixpin(ptr noundef %17, i32 noundef 0, i32 noundef %1, i32 noundef %2) #44
  tail call void @usoftpin(ptr noundef %8, i32 noundef 0, i32 noundef %1, i32 noundef %2, i32 noundef %3) #44
  %45 = load i32, ptr @funccost, align 4, !tbaa !17
  %46 = tail call i32 @ufixnet(ptr noundef %17) #44
  %47 = add nsw i32 %46, %45
  %48 = tail call i32 @usoftnet(ptr noundef %8) #44
  %49 = add nsw i32 %47, %48
  %50 = add nsw i32 %49, %35
  %51 = load i32, ptr @funccost, align 4, !tbaa !17
  %52 = load i32, ptr @penalty, align 4, !tbaa !17
  %53 = add nsw i32 %52, %51
  %54 = icmp sgt i32 %50, %53
  br i1 %54, label %55, label %68

55:                                               ; preds = %4
  %56 = sub i32 %53, %50
  %57 = sitofp i32 %56 to double
  %58 = load double, ptr @T, align 8, !tbaa !36
  %59 = fdiv double %57, %58
  %60 = tail call double @exp(double noundef %59) #44
  %61 = load i32, ptr @randVar, align 4, !tbaa !17
  %62 = mul nsw i32 %61, 1103515245
  %63 = add nsw i32 %62, 12345
  store i32 %63, ptr @randVar, align 4, !tbaa !17
  %64 = and i32 %63, 2147483647
  %65 = sitofp i32 %64 to double
  %66 = fdiv double %65, 0x41DFFFFFFFC00000
  %67 = fcmp ogt double %60, %66
  br i1 %67, label %68, label %90

68:                                               ; preds = %55, %4
  tail call void @ufixpin(ptr noundef %17, i32 noundef 1, i32 noundef 0, i32 noundef 0) #44
  tail call void @usoftpin(ptr noundef nonnull %8, i32 noundef 1, i32 noundef 0, i32 noundef 0, i32 noundef 0) #44
  %69 = load ptr, ptr @occa1ptr, align 8, !tbaa !7
  %70 = load ptr, ptr @occa2ptr, align 8, !tbaa !7
  %71 = icmp eq ptr %69, %70
  br i1 %71, label %89, label %72

72:                                               ; preds = %72, %68
  %73 = phi i64 [ %77, %72 ], [ 1, %68 ]
  %74 = getelementptr inbounds i32, ptr %69, i64 %73
  %75 = load i32, ptr %74, align 4, !tbaa !17
  %76 = icmp eq i32 %75, %0
  %77 = add nuw i64 %73, 1
  br i1 %76, label %78, label %72, !llvm.loop !1066

78:                                               ; preds = %72
  %.lcssa = phi i64 [ %73, %72 ]
  %79 = getelementptr inbounds i32, ptr %69, i64 %.lcssa
  %80 = load i32, ptr %69, align 4, !tbaa !17
  %81 = add nsw i32 %80, -1
  store i32 %81, ptr %69, align 4, !tbaa !17
  %82 = sext i32 %80 to i64
  %83 = getelementptr inbounds i32, ptr %69, i64 %82
  %84 = load i32, ptr %83, align 4, !tbaa !17
  store i32 %84, ptr %79, align 4, !tbaa !17
  %85 = load i32, ptr %70, align 4, !tbaa !17
  %86 = add nsw i32 %85, 1
  store i32 %86, ptr %70, align 4, !tbaa !17
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds i32, ptr %70, i64 %87
  store i32 %0, ptr %88, align 4, !tbaa !17
  br label %89

89:                                               ; preds = %78, %68
  store i32 %1, ptr %9, align 4, !tbaa !164
  store i32 %2, ptr %11, align 8, !tbaa !165
  store i32 %3, ptr %20, align 8, !tbaa !45
  store i32 %49, ptr @funccost, align 4, !tbaa !17
  store i32 %35, ptr @penalty, align 4, !tbaa !17
  br label %90

90:                                               ; preds = %89, %55
  %91 = phi i32 [ 1, %89 ], [ 0, %55 ]
  ret i32 %91
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @usiteo2(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6, i32 noundef %7) #0 {
  %9 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %10 = sext i32 %0 to i64
  %11 = getelementptr inbounds ptr, ptr %9, i64 %10
  %12 = load ptr, ptr %11, align 8, !tbaa !7
  %13 = getelementptr inbounds %struct.cellbox, ptr %12, i64 0, i32 2
  %14 = load i32, ptr %13, align 4, !tbaa !164
  %15 = getelementptr inbounds %struct.cellbox, ptr %12, i64 0, i32 3
  %16 = load i32, ptr %15, align 8, !tbaa !165
  %17 = sext i32 %6 to i64
  %18 = getelementptr inbounds %struct.cellbox, ptr %12, i64 0, i32 21, i64 %17
  %19 = load ptr, ptr %18, align 8, !tbaa !7
  %20 = getelementptr inbounds %struct.tilebox, ptr %19, i64 0, i32 17
  %21 = load ptr, ptr %20, align 8, !tbaa !47
  %22 = sext i32 %1 to i64
  %23 = getelementptr inbounds ptr, ptr %9, i64 %22
  %24 = load ptr, ptr %23, align 8, !tbaa !7
  %25 = getelementptr inbounds %struct.cellbox, ptr %24, i64 0, i32 2
  %26 = load i32, ptr %25, align 4, !tbaa !164
  %27 = getelementptr inbounds %struct.cellbox, ptr %24, i64 0, i32 3
  %28 = load i32, ptr %27, align 8, !tbaa !165
  %29 = sext i32 %7 to i64
  %30 = getelementptr inbounds %struct.cellbox, ptr %24, i64 0, i32 21, i64 %29
  %31 = load ptr, ptr %30, align 8, !tbaa !7
  %32 = getelementptr inbounds %struct.tilebox, ptr %31, i64 0, i32 17
  %33 = load ptr, ptr %32, align 8, !tbaa !47
  %34 = load i32, ptr @penalty, align 4, !tbaa !17
  %35 = load ptr, ptr @overlap, align 8, !tbaa !7
  %36 = getelementptr inbounds %struct.cellbox, ptr %12, i64 0, i32 5
  %37 = load i32, ptr %36, align 8, !tbaa !45
  %38 = tail call i32 (i32, i32, i32, i32, i32, i32, i32, ...) %35(i32 noundef %0, i32 noundef %14, i32 noundef %16, i32 noundef %37, i32 noundef 0, i32 noundef 1, i32 noundef 0) #44
  %39 = load ptr, ptr @blockarray, align 8, !tbaa !7
  %40 = load i32, ptr @binX, align 4, !tbaa !17
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds ptr, ptr %39, i64 %41
  %43 = load ptr, ptr %42, align 8, !tbaa !7
  %44 = load i32, ptr @binY, align 4, !tbaa !17
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds ptr, ptr %43, i64 %45
  %47 = load ptr, ptr %46, align 8, !tbaa !7
  store ptr %47, ptr @occa1ptr, align 8, !tbaa !7
  %48 = load ptr, ptr @overlap, align 8, !tbaa !7
  %49 = getelementptr inbounds %struct.cellbox, ptr %24, i64 0, i32 5
  %50 = load i32, ptr %49, align 8, !tbaa !45
  %51 = tail call i32 (i32, i32, i32, i32, i32, i32, i32, ...) %48(i32 noundef %1, i32 noundef %26, i32 noundef %28, i32 noundef %50, i32 noundef %0, i32 noundef 1, i32 noundef 0) #44
  %52 = load ptr, ptr @blockarray, align 8, !tbaa !7
  %53 = load i32, ptr @binX, align 4, !tbaa !17
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds ptr, ptr %52, i64 %54
  %56 = load ptr, ptr %55, align 8, !tbaa !7
  %57 = load i32, ptr @binY, align 4, !tbaa !17
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds ptr, ptr %56, i64 %58
  %60 = load ptr, ptr %59, align 8, !tbaa !7
  store ptr %60, ptr @occb1ptr, align 8, !tbaa !7
  %61 = load ptr, ptr @overlap, align 8, !tbaa !7
  %62 = tail call i32 (i32, i32, i32, i32, i32, i32, i32, ...) %61(i32 noundef %0, i32 noundef %2, i32 noundef %3, i32 noundef %6, i32 noundef %1, i32 noundef 0, i32 noundef %7) #44
  %63 = load ptr, ptr @blockarray, align 8, !tbaa !7
  %64 = load i32, ptr @binX, align 4, !tbaa !17
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds ptr, ptr %63, i64 %65
  %67 = load ptr, ptr %66, align 8, !tbaa !7
  %68 = load i32, ptr @binY, align 4, !tbaa !17
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds ptr, ptr %67, i64 %69
  %71 = load ptr, ptr %70, align 8, !tbaa !7
  store ptr %71, ptr @occa2ptr, align 8, !tbaa !7
  %72 = load ptr, ptr @overlap, align 8, !tbaa !7
  %73 = tail call i32 (i32, i32, i32, i32, i32, i32, i32, ...) %72(i32 noundef %1, i32 noundef %4, i32 noundef %5, i32 noundef %7, i32 noundef %0, i32 noundef 1, i32 noundef 0) #44
  %74 = add i32 %38, %51
  %75 = sub i32 %34, %74
  %76 = add nsw i32 %75, %62
  %77 = add nsw i32 %76, %73
  %78 = load ptr, ptr @blockarray, align 8, !tbaa !7
  %79 = load i32, ptr @binX, align 4, !tbaa !17
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds ptr, ptr %78, i64 %80
  %82 = load ptr, ptr %81, align 8, !tbaa !7
  %83 = load i32, ptr @binY, align 4, !tbaa !17
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds ptr, ptr %82, i64 %84
  %86 = load ptr, ptr %85, align 8, !tbaa !7
  store ptr %86, ptr @occb2ptr, align 8, !tbaa !7
  tail call void @ufixpin(ptr noundef %21, i32 noundef 0, i32 noundef %2, i32 noundef %3) #44
  tail call void @usoftpin(ptr noundef %12, i32 noundef 0, i32 noundef %2, i32 noundef %3, i32 noundef %6) #44
  tail call void @ufixpin(ptr noundef %33, i32 noundef 0, i32 noundef %4, i32 noundef %5) #44
  tail call void @usoftpin(ptr noundef %24, i32 noundef 0, i32 noundef %4, i32 noundef %5, i32 noundef %7) #44
  %87 = load i32, ptr @funccost, align 4, !tbaa !17
  %88 = tail call i32 @ufixnet(ptr noundef %21) #44
  %89 = add nsw i32 %88, %87
  %90 = tail call i32 @usoftnet(ptr noundef %12) #44
  %91 = add nsw i32 %89, %90
  %92 = tail call i32 @ufixnet(ptr noundef %33) #44
  %93 = add nsw i32 %91, %92
  %94 = tail call i32 @usoftnet(ptr noundef %24) #44
  %95 = add nsw i32 %93, %94
  %96 = add nsw i32 %95, %77
  %97 = load i32, ptr @funccost, align 4, !tbaa !17
  %98 = load i32, ptr @penalty, align 4, !tbaa !17
  %99 = add nsw i32 %98, %97
  %100 = icmp sgt i32 %96, %99
  br i1 %100, label %101, label %114

101:                                              ; preds = %8
  %102 = sub i32 %99, %96
  %103 = sitofp i32 %102 to double
  %104 = load double, ptr @T, align 8, !tbaa !36
  %105 = fdiv double %103, %104
  %106 = tail call double @exp(double noundef %105) #44
  %107 = load i32, ptr @randVar, align 4, !tbaa !17
  %108 = mul nsw i32 %107, 1103515245
  %109 = add nsw i32 %108, 12345
  store i32 %109, ptr @randVar, align 4, !tbaa !17
  %110 = and i32 %109, 2147483647
  %111 = sitofp i32 %110 to double
  %112 = fdiv double %111, 0x41DFFFFFFFC00000
  %113 = fcmp ogt double %106, %112
  br i1 %113, label %114, label %157

114:                                              ; preds = %101, %8
  tail call void @ufixpin(ptr noundef %21, i32 noundef 1, i32 noundef 0, i32 noundef 0) #44
  tail call void @usoftpin(ptr noundef nonnull %12, i32 noundef 1, i32 noundef 0, i32 noundef 0, i32 noundef 0) #44
  tail call void @ufixpin(ptr noundef %33, i32 noundef 1, i32 noundef 0, i32 noundef 0) #44
  tail call void @usoftpin(ptr noundef nonnull %24, i32 noundef 1, i32 noundef 0, i32 noundef 0, i32 noundef 0) #44
  %115 = load ptr, ptr @occa1ptr, align 8, !tbaa !7
  %116 = load ptr, ptr @occa2ptr, align 8, !tbaa !7
  %117 = icmp eq ptr %115, %116
  br i1 %117, label %135, label %118

118:                                              ; preds = %118, %114
  %119 = phi i64 [ %123, %118 ], [ 1, %114 ]
  %120 = getelementptr inbounds i32, ptr %115, i64 %119
  %121 = load i32, ptr %120, align 4, !tbaa !17
  %122 = icmp eq i32 %121, %0
  %123 = add nuw i64 %119, 1
  br i1 %122, label %124, label %118, !llvm.loop !1067

124:                                              ; preds = %118
  %.lcssa1 = phi i64 [ %119, %118 ]
  %125 = getelementptr inbounds i32, ptr %115, i64 %.lcssa1
  %126 = load i32, ptr %115, align 4, !tbaa !17
  %127 = add nsw i32 %126, -1
  store i32 %127, ptr %115, align 4, !tbaa !17
  %128 = sext i32 %126 to i64
  %129 = getelementptr inbounds i32, ptr %115, i64 %128
  %130 = load i32, ptr %129, align 4, !tbaa !17
  store i32 %130, ptr %125, align 4, !tbaa !17
  %131 = load i32, ptr %116, align 4, !tbaa !17
  %132 = add nsw i32 %131, 1
  store i32 %132, ptr %116, align 4, !tbaa !17
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds i32, ptr %116, i64 %133
  store i32 %0, ptr %134, align 4, !tbaa !17
  br label %135

135:                                              ; preds = %124, %114
  %136 = load ptr, ptr @occb1ptr, align 8, !tbaa !7
  %137 = load ptr, ptr @occb2ptr, align 8, !tbaa !7
  %138 = icmp eq ptr %136, %137
  br i1 %138, label %156, label %139

139:                                              ; preds = %139, %135
  %140 = phi i64 [ %144, %139 ], [ 1, %135 ]
  %141 = getelementptr inbounds i32, ptr %136, i64 %140
  %142 = load i32, ptr %141, align 4, !tbaa !17
  %143 = icmp eq i32 %142, %1
  %144 = add nuw i64 %140, 1
  br i1 %143, label %145, label %139, !llvm.loop !1068

145:                                              ; preds = %139
  %.lcssa = phi i64 [ %140, %139 ]
  %146 = getelementptr inbounds i32, ptr %136, i64 %.lcssa
  %147 = load i32, ptr %136, align 4, !tbaa !17
  %148 = add nsw i32 %147, -1
  store i32 %148, ptr %136, align 4, !tbaa !17
  %149 = sext i32 %147 to i64
  %150 = getelementptr inbounds i32, ptr %136, i64 %149
  %151 = load i32, ptr %150, align 4, !tbaa !17
  store i32 %151, ptr %146, align 4, !tbaa !17
  %152 = load i32, ptr %137, align 4, !tbaa !17
  %153 = add nsw i32 %152, 1
  store i32 %153, ptr %137, align 4, !tbaa !17
  %154 = sext i32 %153 to i64
  %155 = getelementptr inbounds i32, ptr %137, i64 %154
  store i32 %1, ptr %155, align 4, !tbaa !17
  br label %156

156:                                              ; preds = %145, %135
  store i32 %2, ptr %13, align 4, !tbaa !164
  store i32 %3, ptr %15, align 8, !tbaa !165
  store i32 %4, ptr %25, align 4, !tbaa !164
  store i32 %5, ptr %27, align 8, !tbaa !165
  store i32 %6, ptr %36, align 8, !tbaa !45
  store i32 %7, ptr %49, align 8, !tbaa !45
  store i32 %95, ptr @funccost, align 4, !tbaa !17
  store i32 %77, ptr @penalty, align 4, !tbaa !17
  br label %157

157:                                              ; preds = %156, %101
  %158 = phi i32 [ 1, %156 ], [ 0, %101 ]
  ret i32 %158
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @usoftnet(ptr nocapture noundef readonly %0) #2 {
  %2 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 20
  %3 = load ptr, ptr %2, align 8, !tbaa !226
  %4 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 18
  %5 = load i32, ptr %4, align 4, !tbaa !223
  %6 = icmp slt i32 %5, 1
  br i1 %6, label %153, label %7

7:                                                ; preds = %1
  %8 = load ptr, ptr @termarray, align 8, !tbaa !7
  %9 = load ptr, ptr @netarray, align 8, !tbaa !7
  %10 = add nuw i32 %5, 1
  %11 = zext i32 %10 to i64
  br label %12

12:                                               ; preds = %149, %7
  %13 = phi i64 [ 1, %7 ], [ %151, %149 ]
  %14 = phi i32 [ 0, %7 ], [ %150, %149 ]
  %15 = getelementptr inbounds %struct.uncombox.25, ptr %3, i64 %13
  %16 = load i32, ptr %15, align 4, !tbaa !298
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds ptr, ptr %8, i64 %17
  %19 = load ptr, ptr %18, align 8, !tbaa !7
  %20 = load i32, ptr %19, align 8, !tbaa !60
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds ptr, ptr %9, i64 %21
  %23 = load ptr, ptr %22, align 8, !tbaa !7
  %24 = getelementptr inbounds %struct.dimbox, ptr %23, i64 0, i32 7
  %25 = load i32, ptr %24, align 8, !tbaa !989
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %149, label %27

27:                                               ; preds = %12
  %28 = getelementptr inbounds %struct.dimbox, ptr %23, i64 0, i32 1
  %29 = load i32, ptr %28, align 8, !tbaa !301
  %30 = icmp eq i32 %29, 1
  br i1 %30, label %149, label %31

31:                                               ; preds = %27
  store i32 0, ptr %24, align 8, !tbaa !989
  br label %32

32:                                               ; preds = %36, %31
  %33 = phi ptr [ %23, %31 ], [ %34, %36 ]
  %34 = load ptr, ptr %33, align 8, !tbaa !7
  %35 = icmp eq ptr %34, null
  br i1 %35, label %108, label %36

36:                                               ; preds = %32
  %37 = getelementptr inbounds %struct.netbox, ptr %34, i64 0, i32 9
  %38 = load i32, ptr %37, align 8, !tbaa !59
  %39 = icmp eq i32 %38, 1
  br i1 %39, label %32, label %40

40:                                               ; preds = %36
  %.lcssa1 = phi ptr [ %34, %36 ]
  %41 = getelementptr inbounds %struct.netbox, ptr %.lcssa1, i64 0, i32 6
  %42 = load i32, ptr %41, align 4, !tbaa !58
  %43 = icmp eq i32 %42, 1
  br i1 %43, label %44, label %49

44:                                               ; preds = %40
  %45 = getelementptr inbounds %struct.netbox, ptr %.lcssa1, i64 0, i32 3
  %46 = load i32, ptr %45, align 8, !tbaa !990
  %47 = getelementptr inbounds %struct.netbox, ptr %.lcssa1, i64 0, i32 4
  %48 = load i32, ptr %47, align 4, !tbaa !991
  store i32 0, ptr %41, align 4, !tbaa !58
  br label %54

49:                                               ; preds = %40
  %50 = getelementptr inbounds %struct.netbox, ptr %.lcssa1, i64 0, i32 1
  %51 = load i32, ptr %50, align 8, !tbaa !64
  %52 = getelementptr inbounds %struct.netbox, ptr %.lcssa1, i64 0, i32 2
  %53 = load i32, ptr %52, align 4, !tbaa !65
  br label %54

54:                                               ; preds = %49, %44
  %55 = phi i32 [ %46, %44 ], [ %51, %49 ]
  %56 = phi i32 [ %48, %44 ], [ %53, %49 ]
  %57 = getelementptr inbounds %struct.dimbox, ptr %23, i64 0, i32 5
  store i32 %55, ptr %57, align 8
  %58 = getelementptr inbounds %struct.dimbox, ptr %23, i64 0, i32 3
  store i32 %55, ptr %58, align 8
  %59 = getelementptr inbounds %struct.dimbox, ptr %23, i64 0, i32 10
  store i32 %56, ptr %59, align 4
  %60 = getelementptr inbounds %struct.dimbox, ptr %23, i64 0, i32 8
  store i32 %56, ptr %60, align 4
  %61 = load ptr, ptr %.lcssa1, align 8, !tbaa !63
  %62 = icmp eq ptr %61, null
  br i1 %62, label %108, label %63

63:                                               ; preds = %54
  %64 = getelementptr inbounds %struct.dimbox, ptr %23, i64 0, i32 3
  %65 = getelementptr inbounds %struct.dimbox, ptr %23, i64 0, i32 5
  %66 = getelementptr inbounds %struct.dimbox, ptr %23, i64 0, i32 8
  %67 = getelementptr inbounds %struct.dimbox, ptr %23, i64 0, i32 10
  br label %68

68:                                               ; preds = %105, %63
  %69 = phi ptr [ %61, %63 ], [ %106, %105 ]
  %70 = getelementptr inbounds %struct.netbox, ptr %69, i64 0, i32 9
  %71 = load i32, ptr %70, align 8, !tbaa !59
  %72 = icmp eq i32 %71, 1
  br i1 %72, label %105, label %73

73:                                               ; preds = %68
  %74 = getelementptr inbounds %struct.netbox, ptr %69, i64 0, i32 6
  %75 = load i32, ptr %74, align 4, !tbaa !58
  %76 = icmp eq i32 %75, 1
  br i1 %76, label %77, label %82

77:                                               ; preds = %73
  %78 = getelementptr inbounds %struct.netbox, ptr %69, i64 0, i32 3
  %79 = load i32, ptr %78, align 8, !tbaa !990
  %80 = getelementptr inbounds %struct.netbox, ptr %69, i64 0, i32 4
  %81 = load i32, ptr %80, align 4, !tbaa !991
  store i32 0, ptr %74, align 4, !tbaa !58
  br label %87

82:                                               ; preds = %73
  %83 = getelementptr inbounds %struct.netbox, ptr %69, i64 0, i32 1
  %84 = load i32, ptr %83, align 8, !tbaa !64
  %85 = getelementptr inbounds %struct.netbox, ptr %69, i64 0, i32 2
  %86 = load i32, ptr %85, align 4, !tbaa !65
  br label %87

87:                                               ; preds = %82, %77
  %88 = phi i32 [ %79, %77 ], [ %84, %82 ]
  %89 = phi i32 [ %81, %77 ], [ %86, %82 ]
  %90 = load i32, ptr %64, align 8, !tbaa !1007
  %91 = icmp slt i32 %88, %90
  br i1 %91, label %95, label %92

92:                                               ; preds = %87
  %93 = load i32, ptr %65, align 8, !tbaa !1008
  %94 = icmp sgt i32 %88, %93
  br i1 %94, label %95, label %97

95:                                               ; preds = %92, %87
  %96 = phi ptr [ %64, %87 ], [ %65, %92 ]
  store i32 %88, ptr %96, align 8, !tbaa !17
  br label %97

97:                                               ; preds = %95, %92
  %98 = load i32, ptr %66, align 4, !tbaa !1009
  %99 = icmp slt i32 %89, %98
  br i1 %99, label %103, label %100

100:                                              ; preds = %97
  %101 = load i32, ptr %67, align 4, !tbaa !1010
  %102 = icmp sgt i32 %89, %101
  br i1 %102, label %103, label %105

103:                                              ; preds = %100, %97
  %104 = phi ptr [ %66, %97 ], [ %67, %100 ]
  store i32 %89, ptr %104, align 4, !tbaa !17
  br label %105

105:                                              ; preds = %103, %100, %68
  %106 = load ptr, ptr %69, align 8, !tbaa !63
  %107 = icmp eq ptr %106, null
  br i1 %107, label %108, label %68, !llvm.loop !1069

108:                                              ; preds = %105, %54, %32
  %109 = getelementptr inbounds %struct.dimbox, ptr %23, i64 0, i32 11
  %110 = load double, ptr %109, align 8, !tbaa !40
  %111 = getelementptr inbounds %struct.dimbox, ptr %23, i64 0, i32 5
  %112 = load i32, ptr %111, align 8, !tbaa !1008
  %113 = getelementptr inbounds %struct.dimbox, ptr %23, i64 0, i32 3
  %114 = load i32, ptr %113, align 8, !tbaa !1007
  %115 = sub nsw i32 %112, %114
  %116 = sitofp i32 %115 to double
  %117 = fmul double %110, %116
  %118 = fptosi double %117 to i32
  %119 = getelementptr inbounds %struct.dimbox, ptr %23, i64 0, i32 4
  %120 = load i32, ptr %119, align 4, !tbaa !302
  %121 = getelementptr inbounds %struct.dimbox, ptr %23, i64 0, i32 2
  %122 = load i32, ptr %121, align 4, !tbaa !303
  %123 = sub nsw i32 %120, %122
  %124 = sitofp i32 %123 to double
  %125 = fmul double %110, %124
  %126 = fptosi double %125 to i32
  %127 = getelementptr inbounds %struct.dimbox, ptr %23, i64 0, i32 12
  %128 = load double, ptr %127, align 8, !tbaa !41
  %129 = getelementptr inbounds %struct.dimbox, ptr %23, i64 0, i32 10
  %130 = load i32, ptr %129, align 4, !tbaa !1010
  %131 = getelementptr inbounds %struct.dimbox, ptr %23, i64 0, i32 8
  %132 = load i32, ptr %131, align 4, !tbaa !1009
  %133 = sub nsw i32 %130, %132
  %134 = sitofp i32 %133 to double
  %135 = fmul double %128, %134
  %136 = fptosi double %135 to i32
  %137 = getelementptr inbounds %struct.dimbox, ptr %23, i64 0, i32 9
  %138 = load i32, ptr %137, align 8, !tbaa !304
  %139 = getelementptr inbounds %struct.dimbox, ptr %23, i64 0, i32 6
  %140 = load i32, ptr %139, align 4, !tbaa !305
  %141 = sub nsw i32 %138, %140
  %142 = sitofp i32 %141 to double
  %143 = fmul double %128, %142
  %144 = fptosi double %143 to i32
  %145 = add i32 %14, %118
  %146 = add i32 %145, %136
  %147 = add i32 %126, %144
  %148 = sub i32 %146, %147
  br label %149

149:                                              ; preds = %108, %27, %12
  %150 = phi i32 [ %14, %12 ], [ %14, %27 ], [ %148, %108 ]
  %151 = add nuw nsw i64 %13, 1
  %152 = icmp eq i64 %151, %11
  br i1 %152, label %153, label %12, !llvm.loop !1070

153:                                              ; preds = %149, %1
  %154 = phi i32 [ 0, %1 ], [ %150, %149 ]
  ret i32 %154
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @usoftpin(ptr nocapture noundef readonly %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4) #2 {
  %6 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 20
  %7 = load ptr, ptr %6, align 8, !tbaa !226
  %8 = sext i32 %4 to i64
  %9 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 21, i64 %8
  %10 = load ptr, ptr %9, align 8, !tbaa !7
  %11 = getelementptr inbounds %struct.tilebox, ptr %10, i64 0, i32 18
  %12 = load ptr, ptr %11, align 8, !tbaa !225
  %13 = icmp eq i32 %1, 0
  %14 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 18
  %15 = load i32, ptr %14, align 4, !tbaa !223
  %16 = icmp slt i32 %15, 1
  br i1 %13, label %23, label %17

17:                                               ; preds = %5
  br i1 %16, label %87, label %18

18:                                               ; preds = %17
  %19 = load ptr, ptr @termarray, align 8, !tbaa !7
  %20 = load ptr, ptr @netarray, align 8, !tbaa !7
  %21 = add nuw i32 %15, 1
  %22 = zext i32 %21 to i64
  br label %57

23:                                               ; preds = %5
  br i1 %16, label %87, label %24

24:                                               ; preds = %23
  %25 = load ptr, ptr @termarray, align 8, !tbaa !7
  %26 = load ptr, ptr @netarray, align 8, !tbaa !7
  %27 = add nuw i32 %15, 1
  %28 = zext i32 %27 to i64
  br label %29

29:                                               ; preds = %29, %24
  %30 = phi i64 [ 1, %24 ], [ %55, %29 ]
  %31 = getelementptr inbounds %struct.uncombox.25, ptr %7, i64 %30
  %32 = load i32, ptr %31, align 4, !tbaa !298
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds ptr, ptr %25, i64 %33
  %35 = load ptr, ptr %34, align 8, !tbaa !7
  %36 = load i32, ptr %35, align 8, !tbaa !60
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds ptr, ptr %26, i64 %37
  %39 = load ptr, ptr %38, align 8, !tbaa !7
  %40 = getelementptr inbounds %struct.dimbox, ptr %39, i64 0, i32 7
  store i32 1, ptr %40, align 8, !tbaa !989
  %41 = getelementptr inbounds %struct.plist, ptr %35, i64 0, i32 1
  %42 = load ptr, ptr %41, align 8, !tbaa !62
  %43 = getelementptr inbounds %struct.netbox, ptr %42, i64 0, i32 6
  store i32 1, ptr %43, align 4, !tbaa !58
  %44 = getelementptr inbounds %struct.uncombox.25, ptr %7, i64 %30, i32 1
  %45 = load i32, ptr %44, align 4, !tbaa !250
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds %struct.locbox.26, ptr %12, i64 %46
  %48 = load i32, ptr %47, align 4, !tbaa !240
  %49 = add nsw i32 %48, %2
  %50 = getelementptr inbounds %struct.netbox, ptr %42, i64 0, i32 3
  store i32 %49, ptr %50, align 8, !tbaa !990
  %51 = getelementptr inbounds %struct.locbox.26, ptr %12, i64 %46, i32 1
  %52 = load i32, ptr %51, align 4, !tbaa !238
  %53 = add nsw i32 %52, %3
  %54 = getelementptr inbounds %struct.netbox, ptr %42, i64 0, i32 4
  store i32 %53, ptr %54, align 4, !tbaa !991
  %55 = add nuw nsw i64 %30, 1
  %56 = icmp eq i64 %55, %28
  br i1 %56, label %87, label %29, !llvm.loop !1071

57:                                               ; preds = %57, %18
  %58 = phi i64 [ 1, %18 ], [ %85, %57 ]
  %59 = getelementptr inbounds %struct.uncombox.25, ptr %7, i64 %58
  %60 = load i32, ptr %59, align 4, !tbaa !298
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds ptr, ptr %19, i64 %61
  %63 = load ptr, ptr %62, align 8, !tbaa !7
  %64 = load i32, ptr %63, align 8, !tbaa !60
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds ptr, ptr %20, i64 %65
  %67 = load ptr, ptr %66, align 8, !tbaa !7
  %68 = getelementptr inbounds %struct.dimbox, ptr %67, i64 0, i32 3
  %69 = load i32, ptr %68, align 8, !tbaa !1007
  %70 = getelementptr inbounds %struct.dimbox, ptr %67, i64 0, i32 2
  store i32 %69, ptr %70, align 4, !tbaa !303
  %71 = getelementptr inbounds %struct.dimbox, ptr %67, i64 0, i32 5
  %72 = load i32, ptr %71, align 8, !tbaa !1008
  %73 = getelementptr inbounds %struct.dimbox, ptr %67, i64 0, i32 4
  store i32 %72, ptr %73, align 4, !tbaa !302
  %74 = getelementptr inbounds %struct.dimbox, ptr %67, i64 0, i32 8
  %75 = load i32, ptr %74, align 4, !tbaa !1009
  %76 = getelementptr inbounds %struct.dimbox, ptr %67, i64 0, i32 6
  store i32 %75, ptr %76, align 4, !tbaa !305
  %77 = getelementptr inbounds %struct.dimbox, ptr %67, i64 0, i32 10
  %78 = load i32, ptr %77, align 4, !tbaa !1010
  %79 = getelementptr inbounds %struct.dimbox, ptr %67, i64 0, i32 9
  store i32 %78, ptr %79, align 8, !tbaa !304
  %80 = getelementptr inbounds %struct.plist, ptr %63, i64 0, i32 1
  %81 = load ptr, ptr %80, align 8, !tbaa !62
  %82 = getelementptr inbounds %struct.netbox, ptr %81, i64 0, i32 3
  %83 = getelementptr inbounds %struct.netbox, ptr %81, i64 0, i32 1
  %84 = load <2 x i32>, ptr %82, align 8, !tbaa !17
  store <2 x i32> %84, ptr %83, align 8, !tbaa !17
  %85 = add nuw nsw i64 %58, 1
  %86 = icmp eq i64 %85, %22
  br i1 %86, label %87, label %57, !llvm.loop !1072

87:                                               ; preds = %57, %29, %23, %17
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @utemp() #0 {
  %1 = load double, ptr @Tsave, align 8, !tbaa !36
  %2 = fdiv double %1, 1.000000e+05
  store i32 0, ptr @count, align 4, !tbaa !17
  %3 = fmul double %2, 1.000000e+01
  %4 = fmul double %2, 3.000000e+03
  %5 = fmul double %2, 2.000000e+02
  %6 = fmul double %2, 2.000000e+01
  %7 = fmul double %2, 5.000000e+00
  %8 = load i32, ptr @finalShot, align 4, !tbaa !17
  br label %9

9:                                                ; preds = %81, %0
  %10 = phi i32 [ %72, %81 ], [ %8, %0 ]
  %11 = icmp eq i32 %10, 0
  %12 = load double, ptr @T, align 8, !tbaa !36
  br i1 %11, label %13, label %22

13:                                               ; preds = %9
  %14 = fcmp ogt double %12, %4
  br i1 %14, label %20, label %15

15:                                               ; preds = %13
  %16 = fcmp ogt double %12, %5
  br i1 %16, label %20, label %17

17:                                               ; preds = %15
  %18 = fcmp ogt double %12, %6
  %19 = select i1 %18, double 8.500000e-01, double 8.000000e-01
  br label %20

20:                                               ; preds = %17, %15, %13
  %21 = phi double [ 8.800000e-01, %13 ], [ 9.550000e-01, %15 ], [ %19, %17 ]
  tail call void @uloop() #44
  br label %28

22:                                               ; preds = %9
  %23 = fcmp olt double %12, %3
  %24 = select i1 %23, double 0x3FE6666666666666, double 8.200000e-01
  %25 = icmp sgt i32 %10, 0
  br i1 %25, label %26, label %27

26:                                               ; preds = %22
  tail call void @fuloop() #44
  br label %28

27:                                               ; preds = %22
  tail call void @uloop() #44
  br label %28

28:                                               ; preds = %27, %26, %20
  %29 = phi double [ %21, %20 ], [ %24, %26 ], [ %24, %27 ]
  %30 = load ptr, ptr @fpo, align 8, !tbaa !7
  %31 = load i32, ptr @funccost, align 4, !tbaa !17
  %32 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %30, ptr noundef nonnull @.str.932, i32 noundef %31) #43
  %33 = load ptr, ptr @fpo, align 8, !tbaa !7
  %34 = load i32, ptr @penalty, align 4, !tbaa !17
  %35 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %33, ptr noundef nonnull @.str.1.933, i32 noundef %34) #43
  %36 = load ptr, ptr @fpo, align 8, !tbaa !7
  %37 = load i32, ptr @penalty, align 4, !tbaa !17
  %38 = load i32, ptr @overfill, align 4, !tbaa !17
  %39 = add nsw i32 %38, %37
  %40 = load i32, ptr @funccost, align 4, !tbaa !17
  %41 = add nsw i32 %39, %40
  %42 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %36, ptr noundef nonnull @.str.2.934, i32 noundef %41) #43
  %43 = load ptr, ptr @fpo, align 8, !tbaa !7
  %44 = load i32, ptr @overfill, align 4, !tbaa !17
  %45 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %43, ptr noundef nonnull @.str.3.935, i32 noundef %44) #43
  %46 = load ptr, ptr @fpo, align 8, !tbaa !7
  %47 = load double, ptr @T, align 8, !tbaa !36
  %48 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %46, ptr noundef nonnull @.str.4.936, double noundef %47) #43
  %49 = load ptr, ptr @fpo, align 8, !tbaa !7
  %50 = load i32, ptr @offset, align 4, !tbaa !17
  %51 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %49, ptr noundef nonnull @.str.5.937, i32 noundef %50) #43
  %52 = load ptr, ptr @fpo, align 8, !tbaa !7
  %53 = load i32, ptr @count, align 4, !tbaa !17
  %54 = add nsw i32 %53, 1
  store i32 %54, ptr @count, align 4, !tbaa !17
  %55 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %52, ptr noundef nonnull @.str.6.938, i32 noundef %54) #43
  %56 = load ptr, ptr @fpo, align 8, !tbaa !7
  %57 = tail call i32 @fflush(ptr noundef %56) #43
  %58 = load i32, ptr @count, align 4, !tbaa !17
  %59 = add nsw i32 %58, -1
  %60 = srem i32 %59, 15
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %65

62:                                               ; preds = %28
  %63 = tail call i32 @putchar(i32 10)
  %64 = load i32, ptr @count, align 4, !tbaa !17
  br label %65

65:                                               ; preds = %62, %28
  %66 = phi i32 [ %64, %62 ], [ %58, %28 ]
  %67 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.8.939, i32 noundef %66) #43
  %68 = load ptr, ptr @stdout, align 8, !tbaa !7
  %69 = tail call i32 @fflush(ptr noundef %68) #43
  %70 = load double, ptr @T, align 8, !tbaa !36
  %71 = fmul double %29, %70
  store double %71, ptr @T, align 8, !tbaa !36
  %72 = load i32, ptr @finalShot, align 4, !tbaa !17
  %73 = load i32, ptr @doCompaction, align 4, !tbaa !17
  %74 = icmp slt i32 %72, %73
  %75 = fcmp olt double %71, 8.000000e-01
  %76 = select i1 %74, i1 %75, i1 false
  br i1 %76, label %85, label %77

77:                                               ; preds = %65
  %78 = icmp eq i32 %72, 0
  %79 = fcmp olt double %71, %7
  %80 = select i1 %78, i1 %79, i1 false
  br i1 %80, label %85, label %81

81:                                               ; preds = %77
  %82 = icmp eq i32 %72, %73
  %83 = fcmp olt double %71, 2.000000e-01
  %84 = select i1 %82, i1 %83, i1 false
  br i1 %84, label %85, label %9

85:                                               ; preds = %81, %77, %65
  %86 = load ptr, ptr @fpo, align 8, !tbaa !7
  %87 = load i32, ptr @funccost, align 4, !tbaa !17
  %88 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %86, ptr noundef nonnull @.str.9.940, i32 noundef %87) #43
  %89 = load ptr, ptr @fpo, align 8, !tbaa !7
  %90 = load i32, ptr @penalty, align 4, !tbaa !17
  %91 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %89, ptr noundef nonnull @.str.10.941, i32 noundef %90) #43
  %92 = load ptr, ptr @fpo, align 8, !tbaa !7
  %93 = load i32, ptr @funccost, align 4, !tbaa !17
  %94 = load i32, ptr @penalty, align 4, !tbaa !17
  %95 = add nsw i32 %94, %93
  %96 = load i32, ptr @overfill, align 4, !tbaa !17
  %97 = add nsw i32 %95, %96
  %98 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %92, ptr noundef nonnull @.str.11.942, i32 noundef %97) #43
  %99 = load ptr, ptr @fpo, align 8, !tbaa !7
  %100 = load i32, ptr @overfill, align 4, !tbaa !17
  %101 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %99, ptr noundef nonnull @.str.12.943, i32 noundef %100) #43
  %102 = load ptr, ptr @fpo, align 8, !tbaa !7
  %103 = load i32, ptr @attmax, align 4, !tbaa !17
  %104 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %102, ptr noundef nonnull @.str.13.944, i32 noundef %103) #43
  ret void
}

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #10

; Function Attrs: nounwind optsize uwtable
define internal void @vprobes() #0 {
  %1 = load ptr, ptr @hFixedList, align 8, !tbaa !7
  %2 = icmp eq ptr %1, null
  br i1 %2, label %611, label %3

3:                                                ; preds = %603, %0
  %4 = phi ptr [ %609, %603 ], [ %1, %0 ]
  %5 = phi i32 [ %607, %603 ], [ undef, %0 ]
  %6 = phi i32 [ %606, %603 ], [ undef, %0 ]
  %7 = phi i32 [ %605, %603 ], [ undef, %0 ]
  %8 = phi i32 [ %604, %603 ], [ undef, %0 ]
  %9 = load i32, ptr %4, align 8, !tbaa !138
  %10 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %11 = sext i32 %9 to i64
  %12 = getelementptr inbounds %struct.edgebox, ptr %10, i64 %11, i32 5
  %13 = load i32, ptr %12, align 4, !tbaa !142
  %14 = icmp slt i32 %13, 0
  br i1 %14, label %603, label %15

15:                                               ; preds = %3
  %16 = getelementptr inbounds %struct.edgebox, ptr %10, i64 %11, i32 3
  %17 = load i32, ptr %16, align 4, !tbaa !140
  %18 = getelementptr inbounds %struct.edgebox, ptr %10, i64 %11, i32 1
  %19 = load i32, ptr %18, align 4, !tbaa !143
  %20 = getelementptr inbounds %struct.edgebox, ptr %10, i64 %11, i32 2
  %21 = load i32, ptr %20, align 4, !tbaa !144
  %22 = getelementptr inbounds %struct.edgebox, ptr %10, i64 %11, i32 7
  %23 = load i32, ptr %22, align 4, !tbaa !333
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds %struct.edgebox, ptr %10, i64 %24, i32 5
  %26 = load i32, ptr %25, align 4, !tbaa !142
  %27 = icmp eq i32 %26, 1
  br i1 %27, label %28, label %62

28:                                               ; preds = %15
  %29 = load ptr, ptr @Hptrs, align 8, !tbaa !7
  %30 = load ptr, ptr @Hroot, align 8, !tbaa !7
  %31 = tail call i32 @tprop(ptr noundef %30, i32 noundef %17) #44
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds ptr, ptr %29, i64 %32
  %34 = load ptr, ptr %33, align 8, !tbaa !7
  %35 = icmp eq ptr %34, null
  %36 = load ptr, ptr @edgeList, align 8, !tbaa !7
  br i1 %35, label %62, label %37

37:                                               ; preds = %56, %28
  %38 = phi ptr [ %60, %56 ], [ %34, %28 ]
  %39 = phi i32 [ %58, %56 ], [ %7, %28 ]
  %40 = phi i32 [ %57, %56 ], [ %8, %28 ]
  %41 = load i32, ptr %38, align 8, !tbaa !138
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds %struct.edgebox, ptr %36, i64 %42, i32 5
  %44 = load i32, ptr %43, align 4, !tbaa !142
  %45 = icmp sgt i32 %44, 0
  br i1 %45, label %56, label %46

46:                                               ; preds = %37
  %47 = getelementptr inbounds %struct.edgebox, ptr %36, i64 %42, i32 3
  %48 = load i32, ptr %47, align 4, !tbaa !140
  %49 = getelementptr inbounds %struct.edgebox, ptr %36, i64 %42, i32 2
  %50 = load i32, ptr %49, align 4, !tbaa !144
  %51 = icmp sgt i32 %50, %19
  br i1 %51, label %52, label %56

52:                                               ; preds = %46
  %53 = getelementptr inbounds %struct.edgebox, ptr %36, i64 %42, i32 1
  %54 = load i32, ptr %53, align 4, !tbaa !143
  %55 = icmp sgt i32 %54, %19
  br i1 %55, label %56, label %62

56:                                               ; preds = %52, %46, %37
  %57 = phi i32 [ %40, %37 ], [ %50, %46 ], [ %50, %52 ]
  %58 = phi i32 [ %39, %37 ], [ %48, %46 ], [ %48, %52 ]
  %59 = getelementptr inbounds %struct.dlink2, ptr %38, i64 0, i32 2
  %60 = load ptr, ptr %59, align 8, !tbaa !7
  %61 = icmp eq ptr %60, null
  br i1 %61, label %62, label %37, !llvm.loop !1073

62:                                               ; preds = %56, %52, %28, %15
  %63 = phi ptr [ %10, %15 ], [ %36, %28 ], [ %36, %56 ], [ %36, %52 ]
  %64 = phi i32 [ %8, %15 ], [ %8, %28 ], [ %50, %52 ], [ %57, %56 ]
  %65 = phi ptr [ null, %15 ], [ null, %28 ], [ %38, %52 ], [ null, %56 ]
  %66 = phi i32 [ %7, %15 ], [ %7, %28 ], [ %48, %52 ], [ %58, %56 ]
  %67 = getelementptr inbounds %struct.edgebox, ptr %63, i64 %11, i32 8
  %68 = load i32, ptr %67, align 4, !tbaa !332
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds %struct.edgebox, ptr %63, i64 %69, i32 5
  %71 = load i32, ptr %70, align 4, !tbaa !142
  %72 = icmp eq i32 %71, -1
  br i1 %72, label %73, label %108

73:                                               ; preds = %62
  %74 = load ptr, ptr @Hptrs, align 8, !tbaa !7
  %75 = load ptr, ptr @Hroot, align 8, !tbaa !7
  %76 = tail call i32 @tprop(ptr noundef %75, i32 noundef %17) #44
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds ptr, ptr %74, i64 %77
  %79 = load ptr, ptr %78, align 8, !tbaa !7
  %80 = icmp eq ptr %79, null
  br i1 %80, label %108, label %81

81:                                               ; preds = %73
  %82 = load ptr, ptr @edgeList, align 8, !tbaa !7
  br label %83

83:                                               ; preds = %102, %81
  %84 = phi ptr [ %79, %81 ], [ %106, %102 ]
  %85 = phi i32 [ %5, %81 ], [ %104, %102 ]
  %86 = phi i32 [ %6, %81 ], [ %103, %102 ]
  %87 = load i32, ptr %84, align 8, !tbaa !138
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds %struct.edgebox, ptr %82, i64 %88, i32 5
  %90 = load i32, ptr %89, align 4, !tbaa !142
  %91 = icmp sgt i32 %90, 0
  br i1 %91, label %102, label %92

92:                                               ; preds = %83
  %93 = getelementptr inbounds %struct.edgebox, ptr %82, i64 %88, i32 3
  %94 = load i32, ptr %93, align 4, !tbaa !140
  %95 = getelementptr inbounds %struct.edgebox, ptr %82, i64 %88, i32 1
  %96 = load i32, ptr %95, align 4, !tbaa !143
  %97 = getelementptr inbounds %struct.edgebox, ptr %82, i64 %88, i32 2
  %98 = load i32, ptr %97, align 4, !tbaa !144
  %99 = icmp sge i32 %98, %21
  %100 = icmp slt i32 %96, %21
  %101 = select i1 %99, i1 %100, i1 false
  br i1 %101, label %108, label %102

102:                                              ; preds = %92, %83
  %103 = phi i32 [ %86, %83 ], [ %96, %92 ]
  %104 = phi i32 [ %85, %83 ], [ %94, %92 ]
  %105 = getelementptr inbounds %struct.dlink2, ptr %84, i64 0, i32 2
  %106 = load ptr, ptr %105, align 8, !tbaa !7
  %107 = icmp eq ptr %106, null
  br i1 %107, label %108, label %83, !llvm.loop !1074

108:                                              ; preds = %102, %92, %73, %62
  %109 = phi ptr [ null, %62 ], [ null, %73 ], [ null, %102 ], [ %84, %92 ]
  %110 = phi i32 [ %6, %62 ], [ %6, %73 ], [ %103, %102 ], [ %96, %92 ]
  %111 = phi i32 [ %5, %62 ], [ %5, %73 ], [ %104, %102 ], [ %94, %92 ]
  %112 = icmp ne ptr %65, null
  %113 = icmp eq ptr %65, %109
  %114 = and i1 %112, %113
  br i1 %114, label %115, label %239

115:                                              ; preds = %108
  %116 = load ptr, ptr @Hptrs, align 8, !tbaa !7
  %117 = load ptr, ptr @Hroot, align 8, !tbaa !7
  %118 = tail call i32 @tprop(ptr noundef %117, i32 noundef %17) #44
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds ptr, ptr %116, i64 %119
  %121 = load ptr, ptr %120, align 8, !tbaa !7
  %122 = icmp eq ptr %121, null
  %123 = load ptr, ptr @edgeList, align 8, !tbaa !7
  br i1 %122, label %147, label %124

124:                                              ; preds = %143, %115
  %125 = phi ptr [ %145, %143 ], [ %121, %115 ]
  %126 = load i32, ptr %125, align 8, !tbaa !138
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds %struct.edgebox, ptr %123, i64 %127, i32 5
  %129 = load i32, ptr %128, align 4, !tbaa !142
  %130 = icmp sgt i32 %129, 0
  br i1 %130, label %143, label %131

131:                                              ; preds = %124
  %132 = getelementptr inbounds %struct.edgebox, ptr %123, i64 %127, i32 3
  %133 = load i32, ptr %132, align 4, !tbaa !140
  %134 = icmp slt i32 %133, %111
  br i1 %134, label %135, label %147

135:                                              ; preds = %131
  %136 = getelementptr inbounds %struct.edgebox, ptr %123, i64 %127, i32 1
  %137 = load i32, ptr %136, align 4, !tbaa !143
  %138 = icmp slt i32 %137, %21
  br i1 %138, label %139, label %143

139:                                              ; preds = %135
  %140 = getelementptr inbounds %struct.edgebox, ptr %123, i64 %127, i32 2
  %141 = load i32, ptr %140, align 4, !tbaa !144
  %142 = icmp sgt i32 %141, %19
  br i1 %142, label %238, label %143

143:                                              ; preds = %139, %135, %124
  %144 = getelementptr inbounds %struct.dlink2, ptr %125, i64 0, i32 2
  %145 = load ptr, ptr %144, align 8, !tbaa !7
  %146 = icmp eq ptr %145, null
  br i1 %146, label %147, label %124, !llvm.loop !1075

147:                                              ; preds = %143, %131, %115
  %148 = load i32, ptr @numProbes, align 4, !tbaa !17
  %149 = add nsw i32 %148, 1
  store i32 %149, ptr @numProbes, align 4, !tbaa !17
  %150 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %151 = add nsw i32 %150, %149
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds %struct.edgebox, ptr %123, i64 %152, i32 1
  store i32 %17, ptr %153, align 4, !tbaa !143
  %154 = load i32, ptr @numProbes, align 4, !tbaa !17
  %155 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %156 = add nsw i32 %155, %154
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds %struct.edgebox, ptr %123, i64 %157, i32 2
  store i32 %111, ptr %158, align 4, !tbaa !144
  %159 = load i32, ptr @numProbes, align 4, !tbaa !17
  %160 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %161 = add nsw i32 %160, %159
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds %struct.edgebox, ptr %123, i64 %162, i32 3
  store i32 %19, ptr %163, align 4, !tbaa !140
  %164 = sub nsw i32 %111, %17
  %165 = load i32, ptr @numProbes, align 4, !tbaa !17
  %166 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %167 = add nsw i32 %166, %165
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds %struct.edgebox, ptr %123, i64 %168, i32 4
  store i32 %164, ptr %169, align 4, !tbaa !501
  %170 = load i32, ptr @numProbes, align 4, !tbaa !17
  %171 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %172 = add nsw i32 %171, %170
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds %struct.edgebox, ptr %123, i64 %173, i32 6
  store i32 0, ptr %174, align 4, !tbaa !147
  %175 = load i32, ptr @numProbes, align 4, !tbaa !17
  %176 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %177 = add nsw i32 %176, %175
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds %struct.edgebox, ptr %123, i64 %178
  store i32 0, ptr %179, align 4, !tbaa !148
  %180 = load i32, ptr @numProbes, align 4, !tbaa !17
  %181 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %182 = add nsw i32 %181, %180
  %183 = sext i32 %182 to i64
  %184 = getelementptr inbounds %struct.edgebox, ptr %123, i64 %183, i32 5
  store i32 1, ptr %184, align 4, !tbaa !142
  %185 = load i32, ptr @numProbes, align 4, !tbaa !17
  %186 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %187 = add nsw i32 %186, %185
  tail call void @tinsert(ptr noundef nonnull @vEdgeRoot, i32 noundef %19, i32 noundef %187) #44
  %188 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %189 = load i32, ptr @numProbes, align 4, !tbaa !17
  %190 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %188, ptr noundef nonnull @.str.947, i32 noundef %189) #43
  %191 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %192 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %191, ptr noundef nonnull @.str.1.948, i32 noundef %17, i32 noundef %111, i32 noundef %19, i32 noundef 1) #43
  %193 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %194 = load i32, ptr @numProbes, align 4, !tbaa !17
  %195 = add nsw i32 %194, 1
  store i32 %195, ptr @numProbes, align 4, !tbaa !17
  %196 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %197 = add nsw i32 %196, %195
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds %struct.edgebox, ptr %193, i64 %198, i32 1
  store i32 %17, ptr %199, align 4, !tbaa !143
  %200 = load i32, ptr @numProbes, align 4, !tbaa !17
  %201 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %202 = add nsw i32 %201, %200
  %203 = sext i32 %202 to i64
  %204 = getelementptr inbounds %struct.edgebox, ptr %193, i64 %203, i32 2
  store i32 %111, ptr %204, align 4, !tbaa !144
  %205 = load i32, ptr @numProbes, align 4, !tbaa !17
  %206 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %207 = add nsw i32 %206, %205
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds %struct.edgebox, ptr %193, i64 %208, i32 3
  store i32 %21, ptr %209, align 4, !tbaa !140
  %210 = load i32, ptr @numProbes, align 4, !tbaa !17
  %211 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %212 = add nsw i32 %211, %210
  %213 = sext i32 %212 to i64
  %214 = getelementptr inbounds %struct.edgebox, ptr %193, i64 %213, i32 4
  store i32 %164, ptr %214, align 4, !tbaa !501
  %215 = load i32, ptr @numProbes, align 4, !tbaa !17
  %216 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %217 = add nsw i32 %216, %215
  %218 = sext i32 %217 to i64
  %219 = getelementptr inbounds %struct.edgebox, ptr %193, i64 %218, i32 6
  store i32 0, ptr %219, align 4, !tbaa !147
  %220 = load i32, ptr @numProbes, align 4, !tbaa !17
  %221 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %222 = add nsw i32 %221, %220
  %223 = sext i32 %222 to i64
  %224 = getelementptr inbounds %struct.edgebox, ptr %193, i64 %223
  store i32 0, ptr %224, align 4, !tbaa !148
  %225 = load i32, ptr @numProbes, align 4, !tbaa !17
  %226 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %227 = add nsw i32 %226, %225
  %228 = sext i32 %227 to i64
  %229 = getelementptr inbounds %struct.edgebox, ptr %193, i64 %228, i32 5
  store i32 -1, ptr %229, align 4, !tbaa !142
  %230 = load i32, ptr @numProbes, align 4, !tbaa !17
  %231 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %232 = add nsw i32 %231, %230
  tail call void @tinsert(ptr noundef nonnull @vEdgeRoot, i32 noundef %21, i32 noundef %232) #44
  %233 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %234 = load i32, ptr @numProbes, align 4, !tbaa !17
  %235 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %233, ptr noundef nonnull @.str.947, i32 noundef %234) #43
  %236 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %237 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %236, ptr noundef nonnull @.str.1.948, i32 noundef %17, i32 noundef %111, i32 noundef %21, i32 noundef -1) #43
  br label %603

238:                                              ; preds = %139
  tail call void @doubleDown(ptr noundef nonnull %4) #43
  br label %603

239:                                              ; preds = %108
  br i1 %112, label %240, label %420

240:                                              ; preds = %239
  %241 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %242 = load i32, ptr %65, align 8, !tbaa !138
  %243 = sext i32 %242 to i64
  %244 = getelementptr inbounds %struct.edgebox, ptr %241, i64 %243, i32 7
  %245 = load i32, ptr %244, align 4, !tbaa !333
  %246 = sext i32 %245 to i64
  %247 = getelementptr inbounds %struct.edgebox, ptr %241, i64 %246, i32 5
  %248 = load i32, ptr %247, align 4, !tbaa !142
  %249 = icmp eq i32 %248, -1
  br i1 %249, label %250, label %420

250:                                              ; preds = %240
  %251 = load ptr, ptr @Hptrs, align 8, !tbaa !7
  %252 = load ptr, ptr @Hroot, align 8, !tbaa !7
  %253 = tail call i32 @tprop(ptr noundef %252, i32 noundef %66) #44
  %254 = sext i32 %253 to i64
  %255 = getelementptr inbounds ptr, ptr %251, i64 %254
  %256 = load ptr, ptr %255, align 8, !tbaa !7
  %257 = load ptr, ptr @edgeList, align 8
  br label %258

258:                                              ; preds = %263, %250
  %259 = phi ptr [ %256, %250 ], [ %261, %263 ]
  %260 = getelementptr inbounds %struct.dlink2, ptr %259, i64 0, i32 2
  %261 = load ptr, ptr %260, align 8, !tbaa !150
  %262 = icmp eq ptr %261, null
  br i1 %262, label %271, label %263

263:                                              ; preds = %258
  %264 = load i32, ptr %261, align 8, !tbaa !138
  %265 = sext i32 %264 to i64
  %266 = getelementptr inbounds %struct.edgebox, ptr %257, i64 %265, i32 3
  %267 = load i32, ptr %266, align 4, !tbaa !140
  %268 = icmp sgt i32 %267, %66
  br i1 %268, label %269, label %258, !llvm.loop !1076

269:                                              ; preds = %263
  %.lcssa1 = phi ptr [ %261, %263 ]
  %270 = getelementptr inbounds %struct.dlink2, ptr %.lcssa1, i64 0, i32 1
  br label %271

271:                                              ; preds = %269, %258
  %272 = phi ptr [ %270, %269 ], [ @hFixedEnd, %258 ]
  %273 = load ptr, ptr %272, align 8, !tbaa !7
  %274 = icmp eq ptr %273, null
  br i1 %274, label %294, label %275

275:                                              ; preds = %290, %271
  %276 = phi ptr [ %292, %290 ], [ %273, %271 ]
  %277 = load i32, ptr %276, align 8, !tbaa !138
  %278 = sext i32 %277 to i64
  %279 = getelementptr inbounds %struct.edgebox, ptr %257, i64 %278, i32 5
  %280 = load i32, ptr %279, align 4, !tbaa !142
  %281 = icmp slt i32 %280, 0
  br i1 %281, label %290, label %282

282:                                              ; preds = %275
  %283 = getelementptr inbounds %struct.edgebox, ptr %257, i64 %278, i32 2
  %284 = load i32, ptr %283, align 4, !tbaa !144
  %285 = icmp slt i32 %284, %64
  br i1 %285, label %290, label %286

286:                                              ; preds = %282
  %287 = getelementptr inbounds %struct.edgebox, ptr %257, i64 %278, i32 1
  %288 = load i32, ptr %287, align 4, !tbaa !143
  %289 = icmp slt i32 %288, %64
  br i1 %289, label %294, label %290

290:                                              ; preds = %286, %282, %275
  %291 = getelementptr inbounds %struct.dlink2, ptr %276, i64 0, i32 1
  %292 = load ptr, ptr %291, align 8, !tbaa !7
  %293 = icmp eq ptr %292, null
  br i1 %293, label %294, label %275, !llvm.loop !1077

294:                                              ; preds = %290, %286, %271
  %295 = phi ptr [ null, %271 ], [ %276, %286 ], [ null, %290 ]
  %296 = icmp eq ptr %4, %295
  br i1 %296, label %297, label %420

297:                                              ; preds = %294
  %298 = load ptr, ptr @Hptrs, align 8, !tbaa !7
  %299 = load ptr, ptr @Hroot, align 8, !tbaa !7
  %300 = tail call i32 @tprop(ptr noundef %299, i32 noundef %17) #44
  %301 = sext i32 %300 to i64
  %302 = getelementptr inbounds ptr, ptr %298, i64 %301
  %303 = load ptr, ptr %302, align 8, !tbaa !7
  %304 = icmp eq ptr %303, null
  %305 = load ptr, ptr @edgeList, align 8, !tbaa !7
  br i1 %304, label %329, label %306

306:                                              ; preds = %325, %297
  %307 = phi ptr [ %327, %325 ], [ %303, %297 ]
  %308 = load i32, ptr %307, align 8, !tbaa !138
  %309 = sext i32 %308 to i64
  %310 = getelementptr inbounds %struct.edgebox, ptr %305, i64 %309, i32 5
  %311 = load i32, ptr %310, align 4, !tbaa !142
  %312 = icmp sgt i32 %311, 0
  br i1 %312, label %325, label %313

313:                                              ; preds = %306
  %314 = getelementptr inbounds %struct.edgebox, ptr %305, i64 %309, i32 3
  %315 = load i32, ptr %314, align 4, !tbaa !140
  %316 = icmp slt i32 %315, %66
  br i1 %316, label %317, label %329

317:                                              ; preds = %313
  %318 = getelementptr inbounds %struct.edgebox, ptr %305, i64 %309, i32 1
  %319 = load i32, ptr %318, align 4, !tbaa !143
  %320 = icmp slt i32 %319, %64
  br i1 %320, label %321, label %325

321:                                              ; preds = %317
  %322 = getelementptr inbounds %struct.edgebox, ptr %305, i64 %309, i32 2
  %323 = load i32, ptr %322, align 4, !tbaa !144
  %324 = icmp sgt i32 %323, %19
  br i1 %324, label %420, label %325

325:                                              ; preds = %321, %317, %306
  %326 = getelementptr inbounds %struct.dlink2, ptr %307, i64 0, i32 2
  %327 = load ptr, ptr %326, align 8, !tbaa !7
  %328 = icmp eq ptr %327, null
  br i1 %328, label %329, label %306, !llvm.loop !1078

329:                                              ; preds = %325, %313, %297
  %330 = load i32, ptr @numProbes, align 4, !tbaa !17
  %331 = add nsw i32 %330, 1
  store i32 %331, ptr @numProbes, align 4, !tbaa !17
  %332 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %333 = add nsw i32 %332, %331
  %334 = sext i32 %333 to i64
  %335 = getelementptr inbounds %struct.edgebox, ptr %305, i64 %334, i32 1
  store i32 %17, ptr %335, align 4, !tbaa !143
  %336 = load i32, ptr @numProbes, align 4, !tbaa !17
  %337 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %338 = add nsw i32 %337, %336
  %339 = sext i32 %338 to i64
  %340 = getelementptr inbounds %struct.edgebox, ptr %305, i64 %339, i32 2
  store i32 %66, ptr %340, align 4, !tbaa !144
  %341 = load i32, ptr @numProbes, align 4, !tbaa !17
  %342 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %343 = add nsw i32 %342, %341
  %344 = sext i32 %343 to i64
  %345 = getelementptr inbounds %struct.edgebox, ptr %305, i64 %344, i32 3
  store i32 %19, ptr %345, align 4, !tbaa !140
  %346 = sub nsw i32 %66, %17
  %347 = load i32, ptr @numProbes, align 4, !tbaa !17
  %348 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %349 = add nsw i32 %348, %347
  %350 = sext i32 %349 to i64
  %351 = getelementptr inbounds %struct.edgebox, ptr %305, i64 %350, i32 4
  store i32 %346, ptr %351, align 4, !tbaa !501
  %352 = load i32, ptr @numProbes, align 4, !tbaa !17
  %353 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %354 = add nsw i32 %353, %352
  %355 = sext i32 %354 to i64
  %356 = getelementptr inbounds %struct.edgebox, ptr %305, i64 %355, i32 6
  store i32 0, ptr %356, align 4, !tbaa !147
  %357 = load i32, ptr @numProbes, align 4, !tbaa !17
  %358 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %359 = add nsw i32 %358, %357
  %360 = sext i32 %359 to i64
  %361 = getelementptr inbounds %struct.edgebox, ptr %305, i64 %360
  store i32 0, ptr %361, align 4, !tbaa !148
  %362 = load i32, ptr @numProbes, align 4, !tbaa !17
  %363 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %364 = add nsw i32 %363, %362
  %365 = sext i32 %364 to i64
  %366 = getelementptr inbounds %struct.edgebox, ptr %305, i64 %365, i32 5
  store i32 1, ptr %366, align 4, !tbaa !142
  %367 = load i32, ptr @numProbes, align 4, !tbaa !17
  %368 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %369 = add nsw i32 %368, %367
  tail call void @tinsert(ptr noundef nonnull @vEdgeRoot, i32 noundef %19, i32 noundef %369) #44
  %370 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %371 = load i32, ptr @numProbes, align 4, !tbaa !17
  %372 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %370, ptr noundef nonnull @.str.947, i32 noundef %371) #43
  %373 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %374 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %373, ptr noundef nonnull @.str.1.948, i32 noundef %17, i32 noundef %66, i32 noundef %19, i32 noundef 1) #43
  %375 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %376 = load i32, ptr @numProbes, align 4, !tbaa !17
  %377 = add nsw i32 %376, 1
  store i32 %377, ptr @numProbes, align 4, !tbaa !17
  %378 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %379 = add nsw i32 %378, %377
  %380 = sext i32 %379 to i64
  %381 = getelementptr inbounds %struct.edgebox, ptr %375, i64 %380, i32 1
  store i32 %17, ptr %381, align 4, !tbaa !143
  %382 = load i32, ptr @numProbes, align 4, !tbaa !17
  %383 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %384 = add nsw i32 %383, %382
  %385 = sext i32 %384 to i64
  %386 = getelementptr inbounds %struct.edgebox, ptr %375, i64 %385, i32 2
  store i32 %66, ptr %386, align 4, !tbaa !144
  %387 = load i32, ptr @numProbes, align 4, !tbaa !17
  %388 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %389 = add nsw i32 %388, %387
  %390 = sext i32 %389 to i64
  %391 = getelementptr inbounds %struct.edgebox, ptr %375, i64 %390, i32 3
  store i32 %64, ptr %391, align 4, !tbaa !140
  %392 = load i32, ptr @numProbes, align 4, !tbaa !17
  %393 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %394 = add nsw i32 %393, %392
  %395 = sext i32 %394 to i64
  %396 = getelementptr inbounds %struct.edgebox, ptr %375, i64 %395, i32 4
  store i32 %346, ptr %396, align 4, !tbaa !501
  %397 = load i32, ptr @numProbes, align 4, !tbaa !17
  %398 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %399 = add nsw i32 %398, %397
  %400 = sext i32 %399 to i64
  %401 = getelementptr inbounds %struct.edgebox, ptr %375, i64 %400, i32 6
  store i32 0, ptr %401, align 4, !tbaa !147
  %402 = load i32, ptr @numProbes, align 4, !tbaa !17
  %403 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %404 = add nsw i32 %403, %402
  %405 = sext i32 %404 to i64
  %406 = getelementptr inbounds %struct.edgebox, ptr %375, i64 %405
  store i32 0, ptr %406, align 4, !tbaa !148
  %407 = load i32, ptr @numProbes, align 4, !tbaa !17
  %408 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %409 = add nsw i32 %408, %407
  %410 = sext i32 %409 to i64
  %411 = getelementptr inbounds %struct.edgebox, ptr %375, i64 %410, i32 5
  store i32 -1, ptr %411, align 4, !tbaa !142
  %412 = load i32, ptr @numProbes, align 4, !tbaa !17
  %413 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %414 = add nsw i32 %413, %412
  tail call void @tinsert(ptr noundef nonnull @vEdgeRoot, i32 noundef %64, i32 noundef %414) #44
  %415 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %416 = load i32, ptr @numProbes, align 4, !tbaa !17
  %417 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %415, ptr noundef nonnull @.str.947, i32 noundef %416) #43
  %418 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %419 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %418, ptr noundef nonnull @.str.1.948, i32 noundef %17, i32 noundef %66, i32 noundef %64, i32 noundef -1) #43
  br label %420

420:                                              ; preds = %329, %321, %294, %240, %239
  %421 = icmp eq ptr %109, null
  br i1 %421, label %602, label %422

422:                                              ; preds = %420
  %423 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %424 = load i32, ptr %109, align 8, !tbaa !138
  %425 = sext i32 %424 to i64
  %426 = getelementptr inbounds %struct.edgebox, ptr %423, i64 %425, i32 8
  %427 = load i32, ptr %426, align 4, !tbaa !332
  %428 = sext i32 %427 to i64
  %429 = getelementptr inbounds %struct.edgebox, ptr %423, i64 %428, i32 5
  %430 = load i32, ptr %429, align 4, !tbaa !142
  %431 = icmp eq i32 %430, 1
  br i1 %431, label %432, label %602

432:                                              ; preds = %422
  %433 = load ptr, ptr @Hptrs, align 8, !tbaa !7
  %434 = load ptr, ptr @Hroot, align 8, !tbaa !7
  %435 = tail call i32 @tprop(ptr noundef %434, i32 noundef %111) #44
  %436 = sext i32 %435 to i64
  %437 = getelementptr inbounds ptr, ptr %433, i64 %436
  %438 = load ptr, ptr %437, align 8, !tbaa !7
  %439 = load ptr, ptr @edgeList, align 8
  br label %440

440:                                              ; preds = %445, %432
  %441 = phi ptr [ %438, %432 ], [ %443, %445 ]
  %442 = getelementptr inbounds %struct.dlink2, ptr %441, i64 0, i32 2
  %443 = load ptr, ptr %442, align 8, !tbaa !150
  %444 = icmp eq ptr %443, null
  br i1 %444, label %453, label %445

445:                                              ; preds = %440
  %446 = load i32, ptr %443, align 8, !tbaa !138
  %447 = sext i32 %446 to i64
  %448 = getelementptr inbounds %struct.edgebox, ptr %439, i64 %447, i32 3
  %449 = load i32, ptr %448, align 4, !tbaa !140
  %450 = icmp sgt i32 %449, %111
  br i1 %450, label %451, label %440, !llvm.loop !1079

451:                                              ; preds = %445
  %.lcssa2 = phi ptr [ %443, %445 ]
  %452 = getelementptr inbounds %struct.dlink2, ptr %.lcssa2, i64 0, i32 1
  br label %453

453:                                              ; preds = %451, %440
  %454 = phi ptr [ %452, %451 ], [ @hFixedEnd, %440 ]
  %455 = load ptr, ptr %454, align 8, !tbaa !7
  %456 = icmp eq ptr %455, null
  br i1 %456, label %476, label %457

457:                                              ; preds = %472, %453
  %458 = phi ptr [ %474, %472 ], [ %455, %453 ]
  %459 = load i32, ptr %458, align 8, !tbaa !138
  %460 = sext i32 %459 to i64
  %461 = getelementptr inbounds %struct.edgebox, ptr %439, i64 %460, i32 5
  %462 = load i32, ptr %461, align 4, !tbaa !142
  %463 = icmp slt i32 %462, 0
  br i1 %463, label %472, label %464

464:                                              ; preds = %457
  %465 = getelementptr inbounds %struct.edgebox, ptr %439, i64 %460, i32 2
  %466 = load i32, ptr %465, align 4, !tbaa !144
  %467 = icmp sgt i32 %466, %110
  br i1 %467, label %468, label %472

468:                                              ; preds = %464
  %469 = getelementptr inbounds %struct.edgebox, ptr %439, i64 %460, i32 1
  %470 = load i32, ptr %469, align 4, !tbaa !143
  %471 = icmp sgt i32 %470, %110
  br i1 %471, label %472, label %476

472:                                              ; preds = %468, %464, %457
  %473 = getelementptr inbounds %struct.dlink2, ptr %458, i64 0, i32 1
  %474 = load ptr, ptr %473, align 8, !tbaa !7
  %475 = icmp eq ptr %474, null
  br i1 %475, label %476, label %457, !llvm.loop !1080

476:                                              ; preds = %472, %468, %453
  %477 = phi ptr [ null, %453 ], [ %458, %468 ], [ null, %472 ]
  %478 = icmp eq ptr %4, %477
  br i1 %478, label %479, label %602

479:                                              ; preds = %476
  %480 = load ptr, ptr @Hptrs, align 8, !tbaa !7
  %481 = load ptr, ptr @Hroot, align 8, !tbaa !7
  %482 = tail call i32 @tprop(ptr noundef %481, i32 noundef %17) #44
  %483 = sext i32 %482 to i64
  %484 = getelementptr inbounds ptr, ptr %480, i64 %483
  %485 = load ptr, ptr %484, align 8, !tbaa !7
  %486 = icmp eq ptr %485, null
  %487 = load ptr, ptr @edgeList, align 8, !tbaa !7
  br i1 %486, label %511, label %488

488:                                              ; preds = %507, %479
  %489 = phi ptr [ %509, %507 ], [ %485, %479 ]
  %490 = load i32, ptr %489, align 8, !tbaa !138
  %491 = sext i32 %490 to i64
  %492 = getelementptr inbounds %struct.edgebox, ptr %487, i64 %491, i32 5
  %493 = load i32, ptr %492, align 4, !tbaa !142
  %494 = icmp sgt i32 %493, 0
  br i1 %494, label %507, label %495

495:                                              ; preds = %488
  %496 = getelementptr inbounds %struct.edgebox, ptr %487, i64 %491, i32 3
  %497 = load i32, ptr %496, align 4, !tbaa !140
  %498 = icmp slt i32 %497, %111
  br i1 %498, label %499, label %511

499:                                              ; preds = %495
  %500 = getelementptr inbounds %struct.edgebox, ptr %487, i64 %491, i32 1
  %501 = load i32, ptr %500, align 4, !tbaa !143
  %502 = icmp slt i32 %501, %21
  br i1 %502, label %503, label %507

503:                                              ; preds = %499
  %504 = getelementptr inbounds %struct.edgebox, ptr %487, i64 %491, i32 2
  %505 = load i32, ptr %504, align 4, !tbaa !144
  %506 = icmp sgt i32 %505, %110
  br i1 %506, label %602, label %507

507:                                              ; preds = %503, %499, %488
  %508 = getelementptr inbounds %struct.dlink2, ptr %489, i64 0, i32 2
  %509 = load ptr, ptr %508, align 8, !tbaa !7
  %510 = icmp eq ptr %509, null
  br i1 %510, label %511, label %488, !llvm.loop !1081

511:                                              ; preds = %507, %495, %479
  %512 = load i32, ptr @numProbes, align 4, !tbaa !17
  %513 = add nsw i32 %512, 1
  store i32 %513, ptr @numProbes, align 4, !tbaa !17
  %514 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %515 = add nsw i32 %514, %513
  %516 = sext i32 %515 to i64
  %517 = getelementptr inbounds %struct.edgebox, ptr %487, i64 %516, i32 1
  store i32 %17, ptr %517, align 4, !tbaa !143
  %518 = load i32, ptr @numProbes, align 4, !tbaa !17
  %519 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %520 = add nsw i32 %519, %518
  %521 = sext i32 %520 to i64
  %522 = getelementptr inbounds %struct.edgebox, ptr %487, i64 %521, i32 2
  store i32 %111, ptr %522, align 4, !tbaa !144
  %523 = load i32, ptr @numProbes, align 4, !tbaa !17
  %524 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %525 = add nsw i32 %524, %523
  %526 = sext i32 %525 to i64
  %527 = getelementptr inbounds %struct.edgebox, ptr %487, i64 %526, i32 3
  store i32 %110, ptr %527, align 4, !tbaa !140
  %528 = sub nsw i32 %111, %17
  %529 = load i32, ptr @numProbes, align 4, !tbaa !17
  %530 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %531 = add nsw i32 %530, %529
  %532 = sext i32 %531 to i64
  %533 = getelementptr inbounds %struct.edgebox, ptr %487, i64 %532, i32 4
  store i32 %528, ptr %533, align 4, !tbaa !501
  %534 = load i32, ptr @numProbes, align 4, !tbaa !17
  %535 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %536 = add nsw i32 %535, %534
  %537 = sext i32 %536 to i64
  %538 = getelementptr inbounds %struct.edgebox, ptr %487, i64 %537, i32 6
  store i32 0, ptr %538, align 4, !tbaa !147
  %539 = load i32, ptr @numProbes, align 4, !tbaa !17
  %540 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %541 = add nsw i32 %540, %539
  %542 = sext i32 %541 to i64
  %543 = getelementptr inbounds %struct.edgebox, ptr %487, i64 %542
  store i32 0, ptr %543, align 4, !tbaa !148
  %544 = load i32, ptr @numProbes, align 4, !tbaa !17
  %545 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %546 = add nsw i32 %545, %544
  %547 = sext i32 %546 to i64
  %548 = getelementptr inbounds %struct.edgebox, ptr %487, i64 %547, i32 5
  store i32 1, ptr %548, align 4, !tbaa !142
  %549 = load i32, ptr @numProbes, align 4, !tbaa !17
  %550 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %551 = add nsw i32 %550, %549
  tail call void @tinsert(ptr noundef nonnull @vEdgeRoot, i32 noundef %110, i32 noundef %551) #44
  %552 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %553 = load i32, ptr @numProbes, align 4, !tbaa !17
  %554 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %552, ptr noundef nonnull @.str.947, i32 noundef %553) #43
  %555 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %556 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %555, ptr noundef nonnull @.str.1.948, i32 noundef %17, i32 noundef %111, i32 noundef %110, i32 noundef 1) #43
  %557 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %558 = load i32, ptr @numProbes, align 4, !tbaa !17
  %559 = add nsw i32 %558, 1
  store i32 %559, ptr @numProbes, align 4, !tbaa !17
  %560 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %561 = add nsw i32 %560, %559
  %562 = sext i32 %561 to i64
  %563 = getelementptr inbounds %struct.edgebox, ptr %557, i64 %562, i32 1
  store i32 %17, ptr %563, align 4, !tbaa !143
  %564 = load i32, ptr @numProbes, align 4, !tbaa !17
  %565 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %566 = add nsw i32 %565, %564
  %567 = sext i32 %566 to i64
  %568 = getelementptr inbounds %struct.edgebox, ptr %557, i64 %567, i32 2
  store i32 %111, ptr %568, align 4, !tbaa !144
  %569 = load i32, ptr @numProbes, align 4, !tbaa !17
  %570 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %571 = add nsw i32 %570, %569
  %572 = sext i32 %571 to i64
  %573 = getelementptr inbounds %struct.edgebox, ptr %557, i64 %572, i32 3
  store i32 %21, ptr %573, align 4, !tbaa !140
  %574 = load i32, ptr @numProbes, align 4, !tbaa !17
  %575 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %576 = add nsw i32 %575, %574
  %577 = sext i32 %576 to i64
  %578 = getelementptr inbounds %struct.edgebox, ptr %557, i64 %577, i32 4
  store i32 %528, ptr %578, align 4, !tbaa !501
  %579 = load i32, ptr @numProbes, align 4, !tbaa !17
  %580 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %581 = add nsw i32 %580, %579
  %582 = sext i32 %581 to i64
  %583 = getelementptr inbounds %struct.edgebox, ptr %557, i64 %582, i32 6
  store i32 0, ptr %583, align 4, !tbaa !147
  %584 = load i32, ptr @numProbes, align 4, !tbaa !17
  %585 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %586 = add nsw i32 %585, %584
  %587 = sext i32 %586 to i64
  %588 = getelementptr inbounds %struct.edgebox, ptr %557, i64 %587
  store i32 0, ptr %588, align 4, !tbaa !148
  %589 = load i32, ptr @numProbes, align 4, !tbaa !17
  %590 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %591 = add nsw i32 %590, %589
  %592 = sext i32 %591 to i64
  %593 = getelementptr inbounds %struct.edgebox, ptr %557, i64 %592, i32 5
  store i32 -1, ptr %593, align 4, !tbaa !142
  %594 = load i32, ptr @numProbes, align 4, !tbaa !17
  %595 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %596 = add nsw i32 %595, %594
  tail call void @tinsert(ptr noundef nonnull @vEdgeRoot, i32 noundef %21, i32 noundef %596) #44
  %597 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %598 = load i32, ptr @numProbes, align 4, !tbaa !17
  %599 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %597, ptr noundef nonnull @.str.947, i32 noundef %598) #43
  %600 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %601 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %600, ptr noundef nonnull @.str.1.948, i32 noundef %17, i32 noundef %111, i32 noundef %21, i32 noundef -1) #43
  br label %602

602:                                              ; preds = %511, %503, %476, %422, %420
  tail call void @doubleDown(ptr noundef nonnull %4) #43
  br label %603

603:                                              ; preds = %602, %238, %147, %3
  %604 = phi i32 [ %8, %3 ], [ %64, %147 ], [ %64, %238 ], [ %64, %602 ]
  %605 = phi i32 [ %7, %3 ], [ %66, %147 ], [ %66, %238 ], [ %66, %602 ]
  %606 = phi i32 [ %6, %3 ], [ %110, %147 ], [ %110, %238 ], [ %110, %602 ]
  %607 = phi i32 [ %5, %3 ], [ %111, %147 ], [ %111, %238 ], [ %111, %602 ]
  %608 = getelementptr inbounds %struct.dlink2, ptr %4, i64 0, i32 2
  %609 = load ptr, ptr %608, align 8, !tbaa !7
  %610 = icmp eq ptr %609, null
  br i1 %610, label %611, label %3, !llvm.loop !1082

611:                                              ; preds = %603, %0
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @doubleDown(ptr noundef readonly %0) #0 {
  %2 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %3 = load i32, ptr %0, align 8, !tbaa !138
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds %struct.edgebox, ptr %2, i64 %4, i32 3
  %6 = load i32, ptr %5, align 4, !tbaa !140
  %7 = getelementptr inbounds %struct.edgebox, ptr %2, i64 %4, i32 2
  %8 = load i32, ptr %7, align 4, !tbaa !144
  %9 = getelementptr inbounds %struct.edgebox, ptr %2, i64 %4, i32 1
  %10 = load i32, ptr %9, align 4, !tbaa !143
  %11 = load ptr, ptr @Hptrs, align 8, !tbaa !7
  %12 = load ptr, ptr @Hroot, align 8, !tbaa !7
  %13 = tail call i32 @tprop(ptr noundef %12, i32 noundef %6) #44
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds ptr, ptr %11, i64 %14
  %16 = load ptr, ptr %15, align 8, !tbaa !7
  %17 = icmp eq ptr %16, null
  br i1 %17, label %179, label %18

18:                                               ; preds = %1
  %19 = load ptr, ptr @edgeList, align 8, !tbaa !7
  br label %20

20:                                               ; preds = %174, %18
  %21 = phi ptr [ %175, %174 ], [ %19, %18 ]
  %22 = phi ptr [ %177, %174 ], [ %16, %18 ]
  %23 = load i32, ptr %22, align 8, !tbaa !138
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds %struct.edgebox, ptr %21, i64 %24, i32 5
  %26 = load i32, ptr %25, align 4, !tbaa !142
  %27 = icmp sgt i32 %26, 0
  br i1 %27, label %174, label %28

28:                                               ; preds = %20
  %29 = getelementptr inbounds %struct.edgebox, ptr %21, i64 %24, i32 3
  %30 = load i32, ptr %29, align 4, !tbaa !140
  %31 = getelementptr inbounds %struct.edgebox, ptr %21, i64 %24, i32 1
  %32 = load i32, ptr %31, align 4, !tbaa !143
  %33 = getelementptr inbounds %struct.edgebox, ptr %21, i64 %24, i32 2
  %34 = load i32, ptr %33, align 4, !tbaa !144
  %35 = icmp slt i32 %34, %8
  %36 = icmp sgt i32 %32, %10
  %37 = select i1 %35, i1 %36, i1 false
  br i1 %37, label %38, label %174

38:                                               ; preds = %28
  %39 = getelementptr inbounds %struct.edgebox, ptr %21, i64 %24, i32 7
  %40 = load i32, ptr %39, align 4, !tbaa !333
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds %struct.edgebox, ptr %21, i64 %41, i32 5
  %43 = load i32, ptr %42, align 4, !tbaa !142
  %44 = icmp eq i32 %43, -1
  br i1 %44, label %45, label %174

45:                                               ; preds = %38
  %46 = getelementptr inbounds %struct.edgebox, ptr %21, i64 %24, i32 8
  %47 = load i32, ptr %46, align 4, !tbaa !332
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds %struct.edgebox, ptr %21, i64 %48, i32 5
  %50 = load i32, ptr %49, align 4, !tbaa !142
  %51 = icmp eq i32 %50, 1
  br i1 %51, label %52, label %174

52:                                               ; preds = %45
  %53 = load ptr, ptr @Hptrs, align 8, !tbaa !7
  %54 = load ptr, ptr @Hroot, align 8, !tbaa !7
  %55 = tail call i32 @tprop(ptr noundef %54, i32 noundef %6) #44
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds ptr, ptr %53, i64 %56
  %58 = load ptr, ptr %57, align 8, !tbaa !7
  %59 = icmp eq ptr %58, null
  %60 = load ptr, ptr @edgeList, align 8
  br i1 %59, label %86, label %61

61:                                               ; preds = %82, %52
  %62 = phi ptr [ %84, %82 ], [ %58, %52 ]
  %63 = icmp eq ptr %62, %0
  br i1 %63, label %82, label %64

64:                                               ; preds = %61
  %65 = load i32, ptr %62, align 8, !tbaa !138
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds %struct.edgebox, ptr %60, i64 %66, i32 5
  %68 = load i32, ptr %67, align 4, !tbaa !142
  %69 = icmp slt i32 %68, 0
  br i1 %69, label %82, label %70

70:                                               ; preds = %64
  %71 = getelementptr inbounds %struct.edgebox, ptr %60, i64 %66, i32 3
  %72 = load i32, ptr %71, align 4, !tbaa !140
  %73 = icmp sgt i32 %72, %30
  br i1 %73, label %86, label %74

74:                                               ; preds = %70
  %75 = getelementptr inbounds %struct.edgebox, ptr %60, i64 %66, i32 1
  %76 = load i32, ptr %75, align 4, !tbaa !143
  %77 = icmp slt i32 %76, %34
  br i1 %77, label %78, label %82

78:                                               ; preds = %74
  %79 = getelementptr inbounds %struct.edgebox, ptr %60, i64 %66, i32 2
  %80 = load i32, ptr %79, align 4, !tbaa !144
  %81 = icmp sgt i32 %80, %32
  br i1 %81, label %174, label %82

82:                                               ; preds = %78, %74, %64, %61
  %83 = getelementptr inbounds %struct.dlink2, ptr %62, i64 0, i32 2
  %84 = load ptr, ptr %83, align 8, !tbaa !7
  %85 = icmp eq ptr %84, null
  br i1 %85, label %86, label %61, !llvm.loop !1083

86:                                               ; preds = %82, %70, %52
  %87 = load i32, ptr @numProbes, align 4, !tbaa !17
  %88 = add nsw i32 %87, 1
  store i32 %88, ptr @numProbes, align 4, !tbaa !17
  %89 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %90 = add nsw i32 %89, %88
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds %struct.edgebox, ptr %60, i64 %91, i32 1
  store i32 %6, ptr %92, align 4, !tbaa !143
  %93 = load i32, ptr @numProbes, align 4, !tbaa !17
  %94 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %95 = add nsw i32 %94, %93
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds %struct.edgebox, ptr %60, i64 %96, i32 2
  store i32 %30, ptr %97, align 4, !tbaa !144
  %98 = load i32, ptr @numProbes, align 4, !tbaa !17
  %99 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %100 = add nsw i32 %99, %98
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds %struct.edgebox, ptr %60, i64 %101, i32 3
  store i32 %32, ptr %102, align 4, !tbaa !140
  %103 = sub nsw i32 %30, %6
  %104 = load i32, ptr @numProbes, align 4, !tbaa !17
  %105 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %106 = add nsw i32 %105, %104
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds %struct.edgebox, ptr %60, i64 %107, i32 4
  store i32 %103, ptr %108, align 4, !tbaa !501
  %109 = load i32, ptr @numProbes, align 4, !tbaa !17
  %110 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %111 = add nsw i32 %110, %109
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds %struct.edgebox, ptr %60, i64 %112, i32 6
  store i32 0, ptr %113, align 4, !tbaa !147
  %114 = load i32, ptr @numProbes, align 4, !tbaa !17
  %115 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %116 = add nsw i32 %115, %114
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds %struct.edgebox, ptr %60, i64 %117
  store i32 0, ptr %118, align 4, !tbaa !148
  %119 = load i32, ptr @numProbes, align 4, !tbaa !17
  %120 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %121 = add nsw i32 %120, %119
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds %struct.edgebox, ptr %60, i64 %122, i32 5
  store i32 1, ptr %123, align 4, !tbaa !142
  %124 = load i32, ptr @numProbes, align 4, !tbaa !17
  %125 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %126 = add nsw i32 %125, %124
  tail call void @tinsert(ptr noundef nonnull @vEdgeRoot, i32 noundef %32, i32 noundef %126) #44
  %127 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %128 = load i32, ptr @numProbes, align 4, !tbaa !17
  %129 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %127, ptr noundef nonnull @.str.2.949, i32 noundef %128, i32 noundef %6, i32 noundef %30, i32 noundef %32, i32 noundef 1) #43
  %130 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %131 = load i32, ptr @numProbes, align 4, !tbaa !17
  %132 = add nsw i32 %131, 1
  store i32 %132, ptr @numProbes, align 4, !tbaa !17
  %133 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %134 = add nsw i32 %133, %132
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds %struct.edgebox, ptr %130, i64 %135, i32 1
  store i32 %6, ptr %136, align 4, !tbaa !143
  %137 = load i32, ptr @numProbes, align 4, !tbaa !17
  %138 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %139 = add nsw i32 %138, %137
  %140 = sext i32 %139 to i64
  %141 = getelementptr inbounds %struct.edgebox, ptr %130, i64 %140, i32 2
  store i32 %30, ptr %141, align 4, !tbaa !144
  %142 = load i32, ptr @numProbes, align 4, !tbaa !17
  %143 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %144 = add nsw i32 %143, %142
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds %struct.edgebox, ptr %130, i64 %145, i32 3
  store i32 %34, ptr %146, align 4, !tbaa !140
  %147 = load i32, ptr @numProbes, align 4, !tbaa !17
  %148 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %149 = add nsw i32 %148, %147
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds %struct.edgebox, ptr %130, i64 %150, i32 4
  store i32 %103, ptr %151, align 4, !tbaa !501
  %152 = load i32, ptr @numProbes, align 4, !tbaa !17
  %153 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %154 = add nsw i32 %153, %152
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds %struct.edgebox, ptr %130, i64 %155, i32 6
  store i32 0, ptr %156, align 4, !tbaa !147
  %157 = load i32, ptr @numProbes, align 4, !tbaa !17
  %158 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %159 = add nsw i32 %158, %157
  %160 = sext i32 %159 to i64
  %161 = getelementptr inbounds %struct.edgebox, ptr %130, i64 %160
  store i32 0, ptr %161, align 4, !tbaa !148
  %162 = load i32, ptr @numProbes, align 4, !tbaa !17
  %163 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %164 = add nsw i32 %163, %162
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds %struct.edgebox, ptr %130, i64 %165, i32 5
  store i32 -1, ptr %166, align 4, !tbaa !142
  %167 = load i32, ptr @numProbes, align 4, !tbaa !17
  %168 = load i32, ptr @edgeCount, align 4, !tbaa !17
  %169 = add nsw i32 %168, %167
  tail call void @tinsert(ptr noundef nonnull @vEdgeRoot, i32 noundef %34, i32 noundef %169) #44
  %170 = load ptr, ptr @fpdebug, align 8, !tbaa !7
  %171 = load i32, ptr @numProbes, align 4, !tbaa !17
  %172 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %170, ptr noundef nonnull @.str.2.949, i32 noundef %171, i32 noundef %6, i32 noundef %30, i32 noundef %34, i32 noundef -1) #43
  %173 = load ptr, ptr @edgeList, align 8, !tbaa !7
  br label %174

174:                                              ; preds = %86, %78, %45, %38, %28, %20
  %175 = phi ptr [ %21, %45 ], [ %21, %38 ], [ %173, %86 ], [ %21, %28 ], [ %21, %20 ], [ %60, %78 ]
  %176 = getelementptr inbounds %struct.dlink2, ptr %22, i64 0, i32 2
  %177 = load ptr, ptr %176, align 8, !tbaa !7
  %178 = icmp eq ptr %177, null
  br i1 %178, label %179, label %20, !llvm.loop !1084

179:                                              ; preds = %174, %1
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @watesides(ptr nocapture noundef readonly %0) #2 {
  %2 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 21
  %3 = load ptr, ptr %2, align 8, !tbaa !7
  %4 = icmp eq ptr %3, null
  br i1 %4, label %125, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 2
  %7 = load i32, ptr %6, align 4, !tbaa !164
  %8 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 7
  %9 = load i32, ptr %8, align 8, !tbaa !350
  %10 = icmp slt i32 %9, 1
  %11 = load ptr, ptr @pSideArray, align 8
  %12 = getelementptr inbounds %struct.cellbox, ptr %0, i64 0, i32 3
  %13 = load i32, ptr %12, align 8, !tbaa !165
  %14 = add i32 %9, 1
  %15 = zext i32 %14 to i64
  %16 = zext i32 %14 to i64
  %17 = zext i32 %14 to i64
  %18 = zext i32 %14 to i64
  br label %22

19:                                               ; preds = %122, %101, %99
  %20 = load ptr, ptr %23, align 8, !tbaa !7
  %21 = icmp eq ptr %20, null
  br i1 %21, label %125, label %22, !llvm.loop !1085

22:                                               ; preds = %19, %5
  %23 = phi ptr [ %3, %5 ], [ %20, %19 ]
  %24 = getelementptr inbounds %struct.tilebox, ptr %23, i64 0, i32 9
  %25 = load i32, ptr %24, align 8, !tbaa !167
  %26 = add nsw i32 %25, %7
  %27 = getelementptr inbounds %struct.tilebox, ptr %23, i64 0, i32 1
  store double -1.000000e+00, ptr %27, align 8, !tbaa !292
  br i1 %10, label %28, label %30

28:                                               ; preds = %22
  %29 = getelementptr inbounds %struct.tilebox, ptr %23, i64 0, i32 2
  store double -1.000000e+00, ptr %29, align 8, !tbaa !293
  br label %73

30:                                               ; preds = %46, %22
  %31 = phi i64 [ %47, %46 ], [ 1, %22 ]
  %32 = getelementptr inbounds %struct.psidebox, ptr %11, i64 %31
  %33 = getelementptr inbounds %struct.psidebox, ptr %11, i64 %31, i32 2
  %34 = load i32, ptr %33, align 8, !tbaa !351
  %35 = icmp eq i32 %34, 1
  br i1 %35, label %36, label %46

36:                                               ; preds = %30
  %37 = getelementptr inbounds %struct.psidebox, ptr %11, i64 %31, i32 3
  %38 = load i32, ptr %37, align 4, !tbaa !353
  %39 = icmp eq i32 %38, %26
  br i1 %39, label %40, label %46

40:                                               ; preds = %36
  %41 = getelementptr inbounds %struct.psidebox, ptr %11, i64 %31, i32 1
  %42 = load double, ptr %41, align 8, !tbaa !355
  %43 = load i32, ptr %32, align 8, !tbaa !781
  %44 = sitofp i32 %43 to double
  %45 = fdiv double %42, %44
  store double %45, ptr %27, align 8, !tbaa !292
  br label %46

46:                                               ; preds = %40, %36, %30
  %47 = add nuw nsw i64 %31, 1
  %48 = icmp eq i64 %47, %15
  br i1 %48, label %49, label %30, !llvm.loop !1086

49:                                               ; preds = %46
  %50 = getelementptr inbounds %struct.tilebox, ptr %23, i64 0, i32 10
  %51 = load i32, ptr %50, align 4, !tbaa !168
  %52 = add nsw i32 %51, %7
  %53 = getelementptr inbounds %struct.tilebox, ptr %23, i64 0, i32 2
  store double -1.000000e+00, ptr %53, align 8, !tbaa !293
  br i1 %10, label %73, label %54

54:                                               ; preds = %70, %49
  %55 = phi i64 [ %71, %70 ], [ 1, %49 ]
  %56 = getelementptr inbounds %struct.psidebox, ptr %11, i64 %55
  %57 = getelementptr inbounds %struct.psidebox, ptr %11, i64 %55, i32 2
  %58 = load i32, ptr %57, align 8, !tbaa !351
  %59 = icmp eq i32 %58, 1
  br i1 %59, label %60, label %70

60:                                               ; preds = %54
  %61 = getelementptr inbounds %struct.psidebox, ptr %11, i64 %55, i32 3
  %62 = load i32, ptr %61, align 4, !tbaa !353
  %63 = icmp eq i32 %62, %52
  br i1 %63, label %64, label %70

64:                                               ; preds = %60
  %65 = getelementptr inbounds %struct.psidebox, ptr %11, i64 %55, i32 1
  %66 = load double, ptr %65, align 8, !tbaa !355
  %67 = load i32, ptr %56, align 8, !tbaa !781
  %68 = sitofp i32 %67 to double
  %69 = fdiv double %66, %68
  store double %69, ptr %53, align 8, !tbaa !293
  br label %70

70:                                               ; preds = %64, %60, %54
  %71 = add nuw nsw i64 %55, 1
  %72 = icmp eq i64 %71, %16
  br i1 %72, label %75, label %54, !llvm.loop !1087

73:                                               ; preds = %49, %28
  %74 = getelementptr inbounds %struct.tilebox, ptr %23, i64 0, i32 3
  store double -1.000000e+00, ptr %74, align 8, !tbaa !294
  br label %99

75:                                               ; preds = %70
  %76 = getelementptr inbounds %struct.tilebox, ptr %23, i64 0, i32 11
  %77 = load i32, ptr %76, align 8, !tbaa !169
  %78 = add nsw i32 %77, %13
  %79 = getelementptr inbounds %struct.tilebox, ptr %23, i64 0, i32 3
  store double -1.000000e+00, ptr %79, align 8, !tbaa !294
  br i1 %10, label %99, label %80

80:                                               ; preds = %96, %75
  %81 = phi i64 [ %97, %96 ], [ 1, %75 ]
  %82 = getelementptr inbounds %struct.psidebox, ptr %11, i64 %81
  %83 = getelementptr inbounds %struct.psidebox, ptr %11, i64 %81, i32 2
  %84 = load i32, ptr %83, align 8, !tbaa !351
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %96

86:                                               ; preds = %80
  %87 = getelementptr inbounds %struct.psidebox, ptr %11, i64 %81, i32 3
  %88 = load i32, ptr %87, align 4, !tbaa !353
  %89 = icmp eq i32 %88, %78
  br i1 %89, label %90, label %96

90:                                               ; preds = %86
  %91 = getelementptr inbounds %struct.psidebox, ptr %11, i64 %81, i32 1
  %92 = load double, ptr %91, align 8, !tbaa !355
  %93 = load i32, ptr %82, align 8, !tbaa !781
  %94 = sitofp i32 %93 to double
  %95 = fdiv double %92, %94
  store double %95, ptr %79, align 8, !tbaa !294
  br label %96

96:                                               ; preds = %90, %86, %80
  %97 = add nuw nsw i64 %81, 1
  %98 = icmp eq i64 %97, %17
  br i1 %98, label %101, label %80, !llvm.loop !1088

99:                                               ; preds = %75, %73
  %100 = getelementptr inbounds %struct.tilebox, ptr %23, i64 0, i32 4
  store double -1.000000e+00, ptr %100, align 8, !tbaa !295
  br label %19

101:                                              ; preds = %96
  %102 = getelementptr inbounds %struct.tilebox, ptr %23, i64 0, i32 12
  %103 = load i32, ptr %102, align 4, !tbaa !170
  %104 = add nsw i32 %103, %13
  %105 = getelementptr inbounds %struct.tilebox, ptr %23, i64 0, i32 4
  store double -1.000000e+00, ptr %105, align 8, !tbaa !295
  br i1 %10, label %19, label %106

106:                                              ; preds = %122, %101
  %107 = phi i64 [ %123, %122 ], [ 1, %101 ]
  %108 = getelementptr inbounds %struct.psidebox, ptr %11, i64 %107
  %109 = getelementptr inbounds %struct.psidebox, ptr %11, i64 %107, i32 2
  %110 = load i32, ptr %109, align 8, !tbaa !351
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %122

112:                                              ; preds = %106
  %113 = getelementptr inbounds %struct.psidebox, ptr %11, i64 %107, i32 3
  %114 = load i32, ptr %113, align 4, !tbaa !353
  %115 = icmp eq i32 %114, %104
  br i1 %115, label %116, label %122

116:                                              ; preds = %112
  %117 = getelementptr inbounds %struct.psidebox, ptr %11, i64 %107, i32 1
  %118 = load double, ptr %117, align 8, !tbaa !355
  %119 = load i32, ptr %108, align 8, !tbaa !781
  %120 = sitofp i32 %119 to double
  %121 = fdiv double %118, %120
  store double %121, ptr %105, align 8, !tbaa !295
  br label %122

122:                                              ; preds = %116, %112, %106
  %123 = add nuw nsw i64 %107, 1
  %124 = icmp eq i64 %123, %18
  br i1 %124, label %19, label %106, !llvm.loop !1089

125:                                              ; preds = %19, %1
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(read, argmem: none, inaccessiblemem: none) uwtable
define internal i32 @wireestx(i32 noundef %0, i32 noundef %1, i32 noundef %2, double noundef %3) #39 {
  %5 = load i32, ptr @blockmx, align 4, !tbaa !17
  %6 = load i32, ptr @blockr, align 4
  %7 = load i32, ptr @blockl, align 4
  %8 = load i32, ptr @blockmy, align 4, !tbaa !17
  %9 = icmp sgt i32 %8, %2
  %10 = icmp slt i32 %8, %1
  %11 = or i1 %9, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %4
  %13 = load i32, ptr @blockt, align 4, !tbaa !17
  %14 = load i32, ptr @blockb, align 4, !tbaa !17
  %15 = sub nsw i32 %13, %14
  %16 = sdiv i32 %15, 2
  br label %31

17:                                               ; preds = %4
  %18 = sub nsw i32 %1, %8
  %19 = tail call i32 @llvm.abs.i32(i32 %18, i1 true)
  %20 = sub nsw i32 %2, %8
  %21 = tail call i32 @llvm.abs.i32(i32 %20, i1 true)
  %22 = icmp ugt i32 %19, %21
  br i1 %22, label %27, label %23

23:                                               ; preds = %17
  %24 = load i32, ptr @blockt, align 4, !tbaa !17
  %25 = sub nsw i32 %24, %1
  %26 = tail call i32 @llvm.smax.i32(i32 %25, i32 0)
  br label %31

27:                                               ; preds = %17
  %28 = load i32, ptr @blockb, align 4, !tbaa !17
  %29 = sub nsw i32 %2, %28
  %30 = tail call i32 @llvm.smax.i32(i32 %29, i32 0)
  br label %31

31:                                               ; preds = %27, %23, %12
  %32 = phi i32 [ %16, %12 ], [ %26, %23 ], [ %30, %27 ]
  %33 = icmp slt i32 %5, %0
  %34 = select i1 %33, i32 %6, i32 %0
  %35 = select i1 %33, i32 %0, i32 %7
  %36 = sub nsw i32 %34, %35
  %37 = tail call i32 @llvm.smax.i32(i32 %36, i32 0)
  %38 = load double, ptr @slopeX, align 8, !tbaa !36
  %39 = sitofp i32 %37 to double
  %40 = load double, ptr @basefactor, align 8, !tbaa !36
  %41 = tail call double @llvm.fmuladd.f64(double %38, double %39, double %40)
  %42 = load double, ptr @slopeY, align 8, !tbaa !36
  %43 = sitofp i32 %32 to double
  %44 = tail call double @llvm.fmuladd.f64(double %42, double %43, double %40)
  %45 = fmul double %41, %44
  %46 = fmul double %45, %3
  %47 = load i32, ptr @aveChanWid, align 4, !tbaa !17
  %48 = sitofp i32 %47 to double
  %49 = fmul double %46, %48
  %50 = fmul double %49, 5.000000e-01
  %51 = fptosi double %50 to i32
  ret i32 %51
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(read, argmem: none, inaccessiblemem: none) uwtable
define internal i32 @wireesty(i32 noundef %0, i32 noundef %1, i32 noundef %2, double noundef %3) #39 {
  %5 = load i32, ptr @blockmy, align 4, !tbaa !17
  %6 = load i32, ptr @blockt, align 4
  %7 = load i32, ptr @blockb, align 4
  %8 = load i32, ptr @blockmx, align 4, !tbaa !17
  %9 = icmp sgt i32 %8, %2
  %10 = icmp slt i32 %8, %1
  %11 = or i1 %9, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %4
  %13 = load i32, ptr @blockr, align 4, !tbaa !17
  %14 = load i32, ptr @blockl, align 4, !tbaa !17
  %15 = sub nsw i32 %13, %14
  %16 = sdiv i32 %15, 2
  br label %31

17:                                               ; preds = %4
  %18 = sub nsw i32 %1, %8
  %19 = tail call i32 @llvm.abs.i32(i32 %18, i1 true)
  %20 = sub nsw i32 %2, %8
  %21 = tail call i32 @llvm.abs.i32(i32 %20, i1 true)
  %22 = icmp ugt i32 %19, %21
  br i1 %22, label %27, label %23

23:                                               ; preds = %17
  %24 = load i32, ptr @blockr, align 4, !tbaa !17
  %25 = sub nsw i32 %24, %1
  %26 = tail call i32 @llvm.smax.i32(i32 %25, i32 0)
  br label %31

27:                                               ; preds = %17
  %28 = load i32, ptr @blockl, align 4, !tbaa !17
  %29 = sub nsw i32 %2, %28
  %30 = tail call i32 @llvm.smax.i32(i32 %29, i32 0)
  br label %31

31:                                               ; preds = %27, %23, %12
  %32 = phi i32 [ %16, %12 ], [ %26, %23 ], [ %30, %27 ]
  %33 = icmp slt i32 %5, %0
  %34 = select i1 %33, i32 %6, i32 %0
  %35 = select i1 %33, i32 %0, i32 %7
  %36 = sub nsw i32 %34, %35
  %37 = tail call i32 @llvm.smax.i32(i32 %36, i32 0)
  %38 = load double, ptr @slopeX, align 8, !tbaa !36
  %39 = sitofp i32 %32 to double
  %40 = load double, ptr @basefactor, align 8, !tbaa !36
  %41 = tail call double @llvm.fmuladd.f64(double %38, double %39, double %40)
  %42 = load double, ptr @slopeY, align 8, !tbaa !36
  %43 = sitofp i32 %37 to double
  %44 = tail call double @llvm.fmuladd.f64(double %42, double %43, double %40)
  %45 = fmul double %41, %44
  %46 = fmul double %45, %3
  %47 = load i32, ptr @aveChanWid, align 4, !tbaa !17
  %48 = sitofp i32 %47 to double
  %49 = fmul double %46, %48
  %50 = fmul double %49, 5.000000e-01
  %51 = fptosi double %50 to i32
  ret i32 %51
}

; Function Attrs: nounwind optsize uwtable
define internal double @wireratio(i32 noundef %0, double noundef %1, double noundef %2, double noundef %3) #0 {
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #47
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #47
  %7 = sitofp i32 %0 to double
  store double %7, ptr @N, align 8, !tbaa !36
  %8 = fcmp oge double %1, 1.000000e+00
  %9 = select i1 %8, double %1, double 1.000000e+00
  %10 = icmp sgt i32 %0, 1
  %11 = add nsw i32 %0, -1
  %12 = select i1 %10, i32 %11, i32 1
  %13 = fcmp oge double %3, 1.000000e+00
  %14 = select i1 %13, double %3, double 1.000000e+00
  %15 = tail call double @probtree(double noundef %9, i32 noundef %12, double noundef %14) #43
  store double %15, ptr @CC, align 8, !tbaa !36
  store double 1.000000e+02, ptr @bb, align 8, !tbaa !36
  store double 1.000000e-02, ptr @a, align 8, !tbaa !36
  call void @findratio(ptr noundef nonnull %5, ptr noundef nonnull %6) #43
  %16 = load double, ptr %6, align 8, !tbaa !36
  %17 = load double, ptr %5, align 8, !tbaa !36
  %18 = fadd double %2, -2.500000e+00
  %19 = fcmp ogt double %18, 0.000000e+00
  %20 = fadd double %18, 2.500000e+00
  %21 = tail call double @llvm.fmuladd.f64(double %20, double 1.250000e+00, double 1.000000e-02)
  %22 = select i1 %19, double %21, double 1.000000e-02
  store double %22, ptr @a, align 8, !tbaa !36
  %23 = fsub double %16, %17
  %24 = fsub double 3.300000e+00, %1
  %25 = tail call double @pow(double noundef 1.000000e+01, double noundef %24) #44
  store double %25, ptr @bb, align 8, !tbaa !36
  call void @findratio(ptr noundef nonnull %5, ptr noundef nonnull %6) #43
  %26 = load ptr, ptr @fpo, align 8, !tbaa !7
  %27 = tail call i64 @fwrite(ptr nonnull @.str.958, i64 77, i64 1, ptr %26)
  %28 = load ptr, ptr @fpo, align 8, !tbaa !7
  %29 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %28, ptr noundef nonnull @.str.1.959, double noundef %3) #43
  %30 = load ptr, ptr @fpo, align 8, !tbaa !7
  %31 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %30, ptr noundef nonnull @.str.2.960, double noundef %2) #43
  %32 = load ptr, ptr @fpo, align 8, !tbaa !7
  %33 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %32, ptr noundef nonnull @.str.3.961, double noundef %1) #43
  %34 = load ptr, ptr @fpo, align 8, !tbaa !7
  %35 = load double, ptr @CC, align 8, !tbaa !36
  %36 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %34, ptr noundef nonnull @.str.4.962, double noundef %35) #43
  %37 = load ptr, ptr @fpo, align 8, !tbaa !7
  %38 = tail call i64 @fwrite(ptr nonnull @.str.5.963, i64 74, i64 1, ptr %37)
  %39 = load double, ptr %6, align 8, !tbaa !36
  %40 = fsub double %39, %23
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #47
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #47
  ret double %40
}

; Function Attrs: nounwind optsize uwtable
define internal double @probtree(double noundef %0, i32 noundef %1, double noundef %2) #0 {
  %4 = fptosi double %0 to i32
  %5 = fptosi double %2 to i32
  %6 = sitofp i32 %4 to double
  %7 = fsub double %0, %6
  %8 = sitofp i32 %5 to double
  %9 = fsub double %2, %8
  %10 = tail call double @getptree(i32 noundef %4, i32 noundef %5, i32 noundef %1) #43
  %11 = add nsw i32 %4, 1
  %12 = tail call double @getptree(i32 noundef %11, i32 noundef %5, i32 noundef %1) #43
  %13 = add nsw i32 %5, 1
  %14 = tail call double @getptree(i32 noundef %4, i32 noundef %13, i32 noundef %1) #43
  %15 = tail call double @getptree(i32 noundef %11, i32 noundef %13, i32 noundef %1) #43
  %16 = insertelement <2 x double> poison, double %15, i64 0
  %17 = insertelement <2 x double> %16, double %12, i64 1
  %18 = insertelement <2 x double> poison, double %14, i64 0
  %19 = insertelement <2 x double> %18, double %10, i64 1
  %20 = fsub <2 x double> %17, %19
  %21 = insertelement <2 x double> poison, double %7, i64 0
  %22 = shufflevector <2 x double> %21, <2 x double> poison, <2 x i32> zeroinitializer
  %23 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %22, <2 x double> %20, <2 x double> %19)
  %24 = extractelement <2 x double> %23, i64 0
  %25 = extractelement <2 x double> %23, i64 1
  %26 = fsub double %24, %25
  %27 = tail call double @llvm.fmuladd.f64(double %9, double %26, double %25)
  ret double %27
}

; Function Attrs: nofree nounwind optsize memory(readwrite, inaccessiblemem: write) uwtable
define internal void @findratio(ptr nocapture noundef writeonly %0, ptr nocapture noundef writeonly %1) #21 {
  %3 = load double, ptr @N, align 8, !tbaa !36
  %4 = tail call double @sqrt(double noundef %3) #44
  store double %4, ptr @rootN, align 8, !tbaa !36
  %5 = fadd double %4, -1.000000e+00
  %6 = load double, ptr @N, align 8
  %7 = fmul double %6, 6.000000e+00
  %8 = tail call double @llvm.fmuladd.f64(double %4, double -8.000000e+00, double 2.000000e+00)
  %9 = fmul double %4, -1.200000e+01
  %10 = tail call double @llvm.fmuladd.f64(double %6, double 1.200000e+01, double %9)
  %11 = fadd double %10, -1.000000e+00
  %12 = fmul double %4, -4.000000e+00
  %13 = tail call double @llvm.fmuladd.f64(double %6, double 1.200000e+01, double %12)
  %14 = fadd double %13, -2.000000e+00
  %15 = load double, ptr @CC, align 8
  br label %16

16:                                               ; preds = %57, %2
  %17 = phi i32 [ undef, %2 ], [ %.lcssa20, %57 ]
  %18 = phi i32 [ 0, %2 ], [ %58, %57 ]
  %19 = phi double [ 1.000000e+06, %2 ], [ %.lcssa21, %57 ]
  %20 = icmp eq i32 %18, 0
  %21 = select i1 %20, i32 10, i32 0
  %22 = sitofp i32 %18 to double
  br label %23

23:                                               ; preds = %53, %16
  %24 = phi i32 [ %17, %16 ], [ %40, %53 ]
  %25 = phi i32 [ %21, %16 ], [ %55, %53 ]
  %26 = phi double [ %19, %16 ], [ %54, %53 ]
  %27 = sitofp i32 %25 to double
  %28 = fdiv double %27, 1.000000e+02
  %29 = fadd double %28, %22
  %30 = fcmp ogt double %29, %5
  br i1 %30, label %60, label %31

31:                                               ; preds = %23
  %32 = fdiv double %29, %7
  %33 = fmul double %29, %29
  %34 = fmul double %8, %33
  %35 = tail call double @llvm.fmuladd.f64(double %33, double %29, double %34)
  %36 = tail call double @llvm.fmuladd.f64(double %11, double %29, double %35)
  %37 = fadd double %14, %36
  %38 = fmul double %32, %37
  %39 = fcmp ogt double %38, %15
  %40 = select i1 %39, i32 1, i32 -1
  %41 = icmp eq i32 %25, 10
  %42 = and i1 %20, %41
  br i1 %42, label %53, label %43

43:                                               ; preds = %31
  %44 = icmp eq i32 %40, %24
  %45 = fsub double %38, %15
  %46 = fcmp ult double %45, 0.000000e+00
  %47 = fneg double %45
  %48 = select i1 %46, double %47, double %45
  br i1 %44, label %53, label %49

49:                                               ; preds = %43
  %.lcssa23 = phi i32 [ %18, %43 ]
  %.lcssa17 = phi i32 [ %24, %43 ]
  %.lcssa14 = phi i32 [ %25, %43 ]
  %.lcssa11 = phi double [ %26, %43 ]
  %.lcssa8 = phi double [ %29, %43 ]
  %.lcssa5 = phi i1 [ %30, %43 ]
  %.lcssa3 = phi double [ %48, %43 ]
  %50 = fcmp ugt double %.lcssa11, %.lcssa3
  %51 = fadd double %.lcssa8, -1.000000e-02
  %52 = select i1 %50, double %.lcssa8, double %51
  br label %60

53:                                               ; preds = %43, %31
  %54 = phi double [ %26, %31 ], [ %48, %43 ]
  %55 = add nuw nsw i32 %25, 1
  %56 = icmp eq i32 %55, 100
  br i1 %56, label %57, label %23, !llvm.loop !1090

57:                                               ; preds = %53
  %.lcssa21 = phi double [ %54, %53 ]
  %.lcssa20 = phi i32 [ %40, %53 ]
  %.lcssa18 = phi i32 [ %24, %53 ]
  %.lcssa15 = phi i32 [ %25, %53 ]
  %.lcssa12 = phi double [ %26, %53 ]
  %.lcssa9 = phi double [ %29, %53 ]
  %.lcssa6 = phi i1 [ %30, %53 ]
  %58 = add nuw nsw i32 %18, 1
  %59 = icmp ult i32 %18, 999999
  br i1 %59, label %16, label %60, !llvm.loop !1091

60:                                               ; preds = %57, %49, %23
  %.lcssa22 = phi i32 [ %18, %57 ], [ %.lcssa23, %49 ], [ %18, %23 ]
  %.lcssa13 = phi i32 [ %.lcssa15, %57 ], [ %.lcssa14, %49 ], [ %25, %23 ]
  %.lcssa4 = phi i1 [ %.lcssa6, %57 ], [ %.lcssa5, %49 ], [ %30, %23 ]
  %61 = phi double [ %52, %49 ], [ %29, %23 ], [ %.lcssa9, %57 ]
  %62 = phi i32 [ %.lcssa17, %49 ], [ %24, %23 ], [ %.lcssa20, %57 ]
  %63 = icmp ult i32 %.lcssa22, 1000000
  %64 = and i1 %.lcssa4, %63
  br i1 %64, label %65, label %143

65:                                               ; preds = %60
  %66 = fdiv double 1.000000e+00, %7
  %67 = tail call double @llvm.fmuladd.f64(double %4, double 8.000000e+00, double -2.000000e+00)
  %68 = fmul double %6, -2.400000e+01
  %69 = tail call double @llvm.fmuladd.f64(double %4, double 1.200000e+01, double %68)
  %70 = fadd double %69, 1.000000e+00
  %71 = fmul double %6, 3.200000e+01
  %72 = tail call double @llvm.fmuladd.f64(double %71, double %4, double %68)
  %73 = tail call double @llvm.fmuladd.f64(double %4, double -4.000000e+00, double %72)
  %74 = fadd double %73, 2.000000e+00
  %75 = fmul double %5, %5
  %76 = fmul double %5, %75
  %77 = fmul double %5, %76
  %78 = tail call double @llvm.fmuladd.f64(double %4, double 1.600000e+01, double -4.000000e+00)
  %79 = fneg double %78
  %80 = fmul double %6, -3.600000e+01
  %81 = tail call double @llvm.fmuladd.f64(double %4, double 2.400000e+01, double %80)
  %82 = fadd double %81, 2.000000e+00
  %83 = fneg double %82
  %84 = tail call double @llvm.fmuladd.f64(double %71, double %4, double %80)
  %85 = fadd double %84, 4.000000e+00
  %86 = fneg double %85
  br label %87

87:                                               ; preds = %136, %65
  %88 = phi i32 [ %62, %65 ], [ %139, %136 ]
  %89 = phi i32 [ %.lcssa13, %65 ], [ %138, %136 ]
  %90 = phi i32 [ %.lcssa22, %65 ], [ %141, %136 ]
  %91 = phi double [ %61, %65 ], [ %140, %136 ]
  %92 = phi double [ 1.000000e+06, %65 ], [ %137, %136 ]
  %93 = icmp ugt i32 %90, %.lcssa22
  %94 = select i1 %93, i32 0, i32 %89
  %95 = icmp slt i32 %94, 100
  br i1 %95, label %96, label %136

96:                                               ; preds = %87
  %97 = sitofp i32 %90 to double
  %98 = icmp eq i32 %90, %.lcssa22
  br label %99

99:                                               ; preds = %132, %96
  %100 = phi i32 [ %88, %96 ], [ %119, %132 ]
  %101 = phi i32 [ %94, %96 ], [ %134, %132 ]
  %102 = phi double [ %92, %96 ], [ %133, %132 ]
  %103 = sitofp i32 %101 to double
  %104 = fdiv double %103, 1.000000e+02
  %105 = fadd double %104, %97
  %106 = fmul double %105, %105
  %107 = fmul double %105, %106
  %108 = fmul double %67, %107
  %109 = fneg double %107
  %110 = tail call double @llvm.fmuladd.f64(double %109, double %105, double %108)
  %111 = tail call double @llvm.fmuladd.f64(double %70, double %106, double %110)
  %112 = tail call double @llvm.fmuladd.f64(double %74, double %105, double %111)
  %113 = tail call double @llvm.fmuladd.f64(double %77, double 2.000000e+00, double %112)
  %114 = tail call double @llvm.fmuladd.f64(double %79, double %76, double %113)
  %115 = tail call double @llvm.fmuladd.f64(double %83, double %75, double %114)
  %116 = tail call double @llvm.fmuladd.f64(double %86, double %5, double %115)
  %117 = fmul double %66, %116
  %118 = fcmp ogt double %117, %15
  %119 = select i1 %118, i32 1, i32 -1
  %120 = icmp eq i32 %101, %.lcssa13
  %121 = and i1 %98, %120
  br i1 %121, label %132, label %122

122:                                              ; preds = %99
  %123 = icmp eq i32 %119, %100
  %124 = fsub double %117, %15
  %125 = fcmp ult double %124, 0.000000e+00
  %126 = fneg double %124
  %127 = select i1 %125, double %126, double %124
  br i1 %123, label %132, label %128

128:                                              ; preds = %122
  %.lcssa2 = phi double [ %127, %122 ]
  %.lcssa1 = phi double [ %102, %122 ]
  %.lcssa = phi double [ %105, %122 ]
  %129 = fcmp ugt double %.lcssa1, %.lcssa2
  %130 = fadd double %.lcssa, -1.000000e-02
  %131 = select i1 %129, double %.lcssa, double %130
  br label %143

132:                                              ; preds = %122, %99
  %133 = phi double [ %102, %99 ], [ %127, %122 ]
  %134 = add i32 %101, 1
  %135 = icmp eq i32 %134, 100
  br i1 %135, label %136, label %99, !llvm.loop !1092

136:                                              ; preds = %132, %87
  %137 = phi double [ %92, %87 ], [ %133, %132 ]
  %138 = phi i32 [ %89, %87 ], [ 100, %132 ]
  %139 = phi i32 [ %88, %87 ], [ %119, %132 ]
  %140 = phi double [ %91, %87 ], [ %105, %132 ]
  %141 = add nuw nsw i32 %90, 1
  %142 = icmp ult i32 %90, 999999
  br i1 %142, label %87, label %143, !llvm.loop !1093

143:                                              ; preds = %136, %128, %60
  %144 = phi double [ %61, %60 ], [ %131, %128 ], [ %140, %136 ]
  %145 = fcmp ugt double %144, %5
  %146 = fmul double %144, %144
  %147 = fmul double %144, %146
  %148 = fmul double %144, %147
  br i1 %145, label %167, label %149

149:                                              ; preds = %143
  %150 = tail call double @llvm.fmuladd.f64(double %4, double -1.500000e+01, double 5.000000e+00)
  %151 = fmul double %150, %147
  %152 = tail call double @llvm.fmuladd.f64(double %148, double 2.000000e+00, double %151)
  %153 = fmul double %4, -3.000000e+01
  %154 = tail call double @llvm.fmuladd.f64(double %6, double 2.000000e+01, double %153)
  %155 = tail call double @llvm.fmuladd.f64(double %154, double %146, double %152)
  %156 = fmul double %4, -1.500000e+01
  %157 = tail call double @llvm.fmuladd.f64(double %6, double 3.000000e+01, double %156)
  %158 = fadd double %157, -5.000000e+00
  %159 = tail call double @llvm.fmuladd.f64(double %158, double %144, double %155)
  %160 = tail call double @llvm.fmuladd.f64(double %6, double 1.000000e+01, double -2.000000e+00)
  %161 = fadd double %160, %159
  %162 = fmul double %15, 6.000000e+00
  %163 = fmul double %6, %162
  %164 = fdiv double %163, %144
  %165 = fdiv double %161, %164
  %166 = fmul double %165, 4.000000e-01
  br label %226

167:                                              ; preds = %143
  %168 = tail call double @llvm.fmuladd.f64(double %4, double 1.500000e+01, double -5.000000e+00)
  %169 = fmul double %6, 4.000000e+01
  %170 = fneg double %169
  %171 = tail call double @llvm.fmuladd.f64(double %4, double 3.000000e+01, double %170)
  %172 = fmul double %6, -6.000000e+01
  %173 = tail call double @llvm.fmuladd.f64(double %169, double %4, double %172)
  %174 = tail call double @llvm.fmuladd.f64(double %4, double 5.000000e+00, double %173)
  %175 = fadd double %174, 5.000000e+00
  %176 = fmul double %6, -2.000000e+01
  %177 = tail call double @llvm.fmuladd.f64(double %169, double %4, double %176)
  %178 = tail call double @llvm.fmuladd.f64(double %4, double -1.000000e+01, double %177)
  %179 = fadd double %178, 2.000000e+00
  %180 = fmul double %5, %5
  %181 = fmul double %5, %180
  %182 = fmul double %5, %181
  %183 = tail call double @llvm.fmuladd.f64(double %4, double 3.000000e+01, double -1.000000e+01)
  %184 = fneg double %183
  %185 = tail call double @llvm.fmuladd.f64(double %4, double 6.000000e+01, double %172)
  %186 = fneg double %185
  %187 = fmul double %6, -9.000000e+01
  %188 = tail call double @llvm.fmuladd.f64(double %169, double %4, double %187)
  %189 = tail call double @llvm.fmuladd.f64(double %4, double 2.000000e+01, double %188)
  %190 = fadd double %189, 1.000000e+01
  %191 = fneg double %190
  %192 = fmul double %6, -3.000000e+01
  %193 = tail call double @llvm.fmuladd.f64(double %169, double %4, double %192)
  %194 = tail call double @llvm.fmuladd.f64(double %4, double -1.000000e+01, double %193)
  %195 = fadd double %194, 4.000000e+00
  %196 = fneg double %195
  %197 = insertelement <2 x double> poison, double %144, i64 0
  %198 = insertelement <2 x double> %197, double %5, i64 1
  %199 = insertelement <2 x double> poison, double %148, i64 0
  %200 = insertelement <2 x double> %199, double %182, i64 1
  %201 = fmul <2 x double> %198, %200
  %202 = insertelement <2 x double> %200, double %168, i64 0
  %203 = insertelement <2 x double> %200, double %184, i64 1
  %204 = fmul <2 x double> %202, %203
  %205 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %201, <2 x double> <double -2.000000e+00, double 4.000000e+00>, <2 x double> %204)
  %206 = insertelement <2 x double> poison, double %171, i64 0
  %207 = insertelement <2 x double> %206, double %186, i64 1
  %208 = insertelement <2 x double> poison, double %147, i64 0
  %209 = insertelement <2 x double> %208, double %181, i64 1
  %210 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %207, <2 x double> %209, <2 x double> %205)
  %211 = insertelement <2 x double> poison, double %175, i64 0
  %212 = insertelement <2 x double> %211, double %191, i64 1
  %213 = insertelement <2 x double> poison, double %146, i64 0
  %214 = insertelement <2 x double> %213, double %180, i64 1
  %215 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %212, <2 x double> %214, <2 x double> %210)
  %216 = insertelement <2 x double> poison, double %179, i64 0
  %217 = insertelement <2 x double> %216, double %196, i64 1
  %218 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %217, <2 x double> %198, <2 x double> %215)
  %219 = shufflevector <2 x double> %218, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %220 = fadd <2 x double> %218, %219
  %221 = extractelement <2 x double> %220, i64 0
  %222 = fmul double %221, 4.000000e-01
  %223 = fmul double %15, 6.000000e+00
  %224 = fmul double %6, %223
  %225 = fdiv double %222, %224
  br label %226

226:                                              ; preds = %167, %149
  %227 = phi double [ %166, %149 ], [ %225, %167 ]
  %228 = tail call double @sqrt(double noundef %6) #44
  %229 = fmul double %228, 0x3FE5555555555555
  %230 = fdiv double %229, %227
  store double %230, ptr %0, align 8, !tbaa !36
  %231 = load double, ptr @a, align 8, !tbaa !36
  %232 = load double, ptr @bb, align 8, !tbaa !36
  %233 = fadd double %231, %232
  store double %233, ptr @c, align 8, !tbaa !36
  %234 = fcmp ogt double %144, %5
  br i1 %234, label %235, label %326

235:                                              ; preds = %226
  %236 = tail call double @Nterm1(double noundef %5) #43
  %237 = tail call double @Nterm1(double noundef 1.000000e+00) #43
  %238 = fsub double %236, %237
  %239 = tail call double @Nterm2(double noundef %5) #43
  %240 = fadd double %238, %239
  %241 = tail call double @Nterm2(double noundef 1.000000e+00) #43
  %242 = tail call double @Nterm3(double noundef %5) #43
  %243 = tail call double @Nterm3(double noundef 1.000000e+00) #43
  %244 = tail call double @Nterm4(double noundef %5) #43
  %245 = tail call double @Nterm4(double noundef 1.000000e+00) #43
  %246 = tail call double @Nterm5(double noundef %5) #43
  %247 = tail call double @Nterm5(double noundef 1.000000e+00) #43
  %248 = tail call double @Dterm1(double noundef %5) #43
  %249 = tail call double @Dterm1(double noundef 1.000000e+00) #43
  %250 = tail call double @Dterm2(double noundef %5) #43
  %251 = tail call double @Dterm2(double noundef 1.000000e+00) #43
  %252 = tail call double @Dterm3(double noundef %5) #43
  %253 = tail call double @Dterm3(double noundef 1.000000e+00) #43
  %254 = tail call double @Dterm4(double noundef %5) #43
  %255 = tail call double @Dterm4(double noundef 1.000000e+00) #43
  %256 = tail call double @NNterm1(double noundef %144) #43
  %257 = tail call double @NNterm1(double noundef %5) #43
  %258 = fsub double %256, %257
  %259 = tail call double @NNterm2(double noundef %144) #43
  %260 = fadd double %258, %259
  %261 = tail call double @NNterm2(double noundef %5) #43
  %262 = tail call double @NNterm3(double noundef %144) #43
  %263 = tail call double @NNterm3(double noundef %5) #43
  %264 = tail call double @NNterm4(double noundef %144) #43
  %265 = tail call double @NNterm4(double noundef %5) #43
  %266 = tail call double @NNterm5(double noundef %144) #43
  %267 = tail call double @NNterm5(double noundef %5) #43
  %268 = tail call double @DDterm1(double noundef %144) #43
  %269 = tail call double @DDterm1(double noundef %5) #43
  %270 = tail call double @DDterm2(double noundef %144) #43
  %271 = tail call double @DDterm2(double noundef %5) #43
  %272 = tail call double @DDterm3(double noundef %144) #43
  %273 = tail call double @DDterm3(double noundef %5) #43
  %274 = tail call double @DDterm4(double noundef %144) #43
  %275 = tail call double @DDterm4(double noundef %5) #43
  %276 = insertelement <2 x double> poison, double %240, i64 0
  %277 = insertelement <2 x double> %276, double %248, i64 1
  %278 = insertelement <2 x double> poison, double %241, i64 0
  %279 = insertelement <2 x double> %278, double %249, i64 1
  %280 = fsub <2 x double> %277, %279
  %281 = insertelement <2 x double> poison, double %242, i64 0
  %282 = insertelement <2 x double> %281, double %250, i64 1
  %283 = fadd <2 x double> %280, %282
  %284 = insertelement <2 x double> poison, double %243, i64 0
  %285 = insertelement <2 x double> %284, double %251, i64 1
  %286 = fsub <2 x double> %283, %285
  %287 = insertelement <2 x double> poison, double %244, i64 0
  %288 = insertelement <2 x double> %287, double %252, i64 1
  %289 = fadd <2 x double> %286, %288
  %290 = insertelement <2 x double> poison, double %245, i64 0
  %291 = insertelement <2 x double> %290, double %253, i64 1
  %292 = fsub <2 x double> %289, %291
  %293 = insertelement <2 x double> poison, double %246, i64 0
  %294 = insertelement <2 x double> %293, double %254, i64 1
  %295 = fadd <2 x double> %292, %294
  %296 = insertelement <2 x double> poison, double %247, i64 0
  %297 = insertelement <2 x double> %296, double %255, i64 1
  %298 = fsub <2 x double> %295, %297
  %299 = insertelement <2 x double> poison, double %260, i64 0
  %300 = insertelement <2 x double> %299, double %268, i64 1
  %301 = insertelement <2 x double> poison, double %261, i64 0
  %302 = insertelement <2 x double> %301, double %269, i64 1
  %303 = fsub <2 x double> %300, %302
  %304 = insertelement <2 x double> poison, double %262, i64 0
  %305 = insertelement <2 x double> %304, double %270, i64 1
  %306 = fadd <2 x double> %303, %305
  %307 = insertelement <2 x double> poison, double %263, i64 0
  %308 = insertelement <2 x double> %307, double %271, i64 1
  %309 = fsub <2 x double> %306, %308
  %310 = insertelement <2 x double> poison, double %264, i64 0
  %311 = insertelement <2 x double> %310, double %272, i64 1
  %312 = fadd <2 x double> %309, %311
  %313 = insertelement <2 x double> poison, double %265, i64 0
  %314 = insertelement <2 x double> %313, double %273, i64 1
  %315 = fsub <2 x double> %312, %314
  %316 = insertelement <2 x double> poison, double %266, i64 0
  %317 = insertelement <2 x double> %316, double %274, i64 1
  %318 = fadd <2 x double> %315, %317
  %319 = insertelement <2 x double> poison, double %267, i64 0
  %320 = insertelement <2 x double> %319, double %275, i64 1
  %321 = fsub <2 x double> %318, %320
  %322 = fadd <2 x double> %298, %321
  %323 = extractelement <2 x double> %322, i64 0
  %324 = extractelement <2 x double> %322, i64 1
  %325 = fdiv double %323, %324
  br label %373

326:                                              ; preds = %226
  %327 = tail call double @Nterm1(double noundef %144) #43
  %328 = tail call double @Nterm1(double noundef 1.000000e+00) #43
  %329 = fsub double %327, %328
  %330 = tail call double @Nterm2(double noundef %144) #43
  %331 = fadd double %329, %330
  %332 = tail call double @Nterm2(double noundef 1.000000e+00) #43
  %333 = tail call double @Nterm3(double noundef %144) #43
  %334 = tail call double @Nterm3(double noundef 1.000000e+00) #43
  %335 = tail call double @Nterm4(double noundef %144) #43
  %336 = tail call double @Nterm4(double noundef 1.000000e+00) #43
  %337 = tail call double @Nterm5(double noundef %144) #43
  %338 = tail call double @Nterm5(double noundef 1.000000e+00) #43
  %339 = tail call double @Dterm1(double noundef %144) #43
  %340 = tail call double @Dterm1(double noundef 1.000000e+00) #43
  %341 = tail call double @Dterm2(double noundef %144) #43
  %342 = tail call double @Dterm2(double noundef 1.000000e+00) #43
  %343 = tail call double @Dterm3(double noundef %144) #43
  %344 = tail call double @Dterm3(double noundef 1.000000e+00) #43
  %345 = tail call double @Dterm4(double noundef %144) #43
  %346 = tail call double @Dterm4(double noundef 1.000000e+00) #43
  %347 = insertelement <2 x double> poison, double %331, i64 0
  %348 = insertelement <2 x double> %347, double %339, i64 1
  %349 = insertelement <2 x double> poison, double %332, i64 0
  %350 = insertelement <2 x double> %349, double %340, i64 1
  %351 = fsub <2 x double> %348, %350
  %352 = insertelement <2 x double> poison, double %333, i64 0
  %353 = insertelement <2 x double> %352, double %341, i64 1
  %354 = fadd <2 x double> %351, %353
  %355 = insertelement <2 x double> poison, double %334, i64 0
  %356 = insertelement <2 x double> %355, double %342, i64 1
  %357 = fsub <2 x double> %354, %356
  %358 = insertelement <2 x double> poison, double %335, i64 0
  %359 = insertelement <2 x double> %358, double %343, i64 1
  %360 = fadd <2 x double> %357, %359
  %361 = insertelement <2 x double> poison, double %336, i64 0
  %362 = insertelement <2 x double> %361, double %344, i64 1
  %363 = fsub <2 x double> %360, %362
  %364 = insertelement <2 x double> poison, double %337, i64 0
  %365 = insertelement <2 x double> %364, double %345, i64 1
  %366 = fadd <2 x double> %363, %365
  %367 = insertelement <2 x double> poison, double %338, i64 0
  %368 = insertelement <2 x double> %367, double %346, i64 1
  %369 = fsub <2 x double> %366, %368
  %370 = extractelement <2 x double> %369, i64 0
  %371 = extractelement <2 x double> %369, i64 1
  %372 = fdiv double %370, %371
  br label %373

373:                                              ; preds = %326, %235
  %374 = phi double [ %325, %235 ], [ %372, %326 ]
  %375 = fdiv double %229, %374
  store double %375, ptr %1, align 8, !tbaa !36
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x double> @llvm.fmuladd.v2f64(<2 x double>, <2 x double>, <2 x double>) #13

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(readwrite, argmem: write, inaccessiblemem: write) uwtable
define internal double @Nterm1(double noundef %0) #40 {
  %2 = load double, ptr @a, align 8, !tbaa !36
  %3 = fadd double %0, -1.000000e+00
  %4 = fneg double %2
  %5 = fmul double %3, %4
  %6 = tail call double @exp(double noundef %5) #44
  %7 = load double, ptr @c, align 8, !tbaa !36
  %8 = fneg double %7
  %9 = fmul double %3, %8
  %10 = tail call double @exp(double noundef %9) #44
  %11 = fmul double %0, %0
  %12 = fmul double %11, %0
  %13 = fmul double %12, %0
  %14 = fdiv double %13, 6.000000e+00
  %15 = load double, ptr @a, align 8, !tbaa !36
  %16 = load double, ptr @c, align 8, !tbaa !36
  %17 = insertelement <2 x double> poison, double %10, i64 0
  %18 = insertelement <2 x double> %17, double %6, i64 1
  %19 = insertelement <2 x double> poison, double %16, i64 0
  %20 = insertelement <2 x double> %19, double %15, i64 1
  %21 = fdiv <2 x double> %18, %20
  %22 = shufflevector <2 x double> %21, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %23 = fsub <2 x double> %21, %22
  %24 = extractelement <2 x double> %23, i64 0
  %25 = fmul double %14, %24
  ret double %25
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(readwrite, argmem: write, inaccessiblemem: write) uwtable
define internal double @Nterm2(double noundef %0) #40 {
  %2 = load double, ptr @a, align 8, !tbaa !36
  %3 = fadd double %0, -1.000000e+00
  %4 = fneg double %2
  %5 = fmul double %3, %4
  %6 = tail call double @exp(double noundef %5) #44
  %7 = load double, ptr @c, align 8, !tbaa !36
  %8 = fneg double %7
  %9 = fmul double %3, %8
  %10 = tail call double @exp(double noundef %9) #44
  %11 = fmul double %0, %0
  %12 = fmul double %11, %0
  %13 = load double, ptr @a, align 8, !tbaa !36
  %14 = load double, ptr @c, align 8, !tbaa !36
  %15 = insertelement <2 x double> poison, double %14, i64 0
  %16 = insertelement <2 x double> %15, double %13, i64 1
  %17 = fmul <2 x double> %16, %16
  %18 = insertelement <2 x double> poison, double %10, i64 0
  %19 = insertelement <2 x double> %18, double %6, i64 1
  %20 = fdiv <2 x double> %19, %17
  %21 = shufflevector <2 x double> %20, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %22 = fsub <2 x double> %20, %21
  %23 = extractelement <2 x double> %22, i64 0
  %24 = load double, ptr @rootN, align 8, !tbaa !36
  %25 = fdiv <2 x double> %19, %16
  %26 = shufflevector <2 x double> %25, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %27 = fsub <2 x double> %25, %26
  %28 = extractelement <2 x double> %27, i64 0
  %29 = fneg double %24
  %30 = fmul double %28, %29
  %31 = tail call double @llvm.fmuladd.f64(double %23, double 0x3FE5555555555555, double %30)
  %32 = fmul double %12, %31
  ret double %32
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(readwrite, argmem: write, inaccessiblemem: write) uwtable
define internal double @Nterm3(double noundef %0) #40 {
  %2 = load double, ptr @a, align 8, !tbaa !36
  %3 = fadd double %0, -1.000000e+00
  %4 = fneg double %2
  %5 = fmul double %3, %4
  %6 = tail call double @exp(double noundef %5) #44
  %7 = load double, ptr @c, align 8, !tbaa !36
  %8 = fneg double %7
  %9 = fmul double %3, %8
  %10 = tail call double @exp(double noundef %9) #44
  %11 = fmul double %0, %0
  %12 = load double, ptr @a, align 8, !tbaa !36
  %13 = load double, ptr @c, align 8, !tbaa !36
  %14 = insertelement <2 x double> poison, double %13, i64 0
  %15 = insertelement <2 x double> %14, double %12, i64 1
  %16 = fmul <2 x double> %15, %15
  %17 = fmul <2 x double> %15, %16
  %18 = insertelement <2 x double> poison, double %10, i64 0
  %19 = insertelement <2 x double> %18, double %6, i64 1
  %20 = fdiv <2 x double> %19, %17
  %21 = shufflevector <2 x double> %20, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %22 = fsub <2 x double> %20, %21
  %23 = extractelement <2 x double> %22, i64 0
  %24 = load double, ptr @rootN, align 8, !tbaa !36
  %25 = fdiv <2 x double> %19, %16
  %26 = shufflevector <2 x double> %25, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %27 = fsub <2 x double> %25, %26
  %28 = extractelement <2 x double> %27, i64 0
  %29 = fmul double %24, -3.000000e+00
  %30 = fmul double %29, %28
  %31 = tail call double @llvm.fmuladd.f64(double %23, double 2.000000e+00, double %30)
  %32 = load double, ptr @N, align 8, !tbaa !36
  %33 = fdiv <2 x double> %19, %15
  %34 = shufflevector <2 x double> %33, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %35 = fsub <2 x double> %33, %34
  %36 = extractelement <2 x double> %35, i64 0
  %37 = tail call double @llvm.fmuladd.f64(double %32, double %36, double %31)
  %38 = fmul double %11, %37
  ret double %38
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(readwrite, argmem: write, inaccessiblemem: write) uwtable
define internal double @Nterm4(double noundef %0) #40 {
  %2 = load double, ptr @a, align 8, !tbaa !36
  %3 = fadd double %0, -1.000000e+00
  %4 = fneg double %2
  %5 = fmul double %3, %4
  %6 = tail call double @exp(double noundef %5) #44
  %7 = load double, ptr @c, align 8, !tbaa !36
  %8 = fneg double %7
  %9 = fmul double %3, %8
  %10 = tail call double @exp(double noundef %9) #44
  %11 = load double, ptr @a, align 8, !tbaa !36
  %12 = load double, ptr @c, align 8, !tbaa !36
  %13 = load double, ptr @rootN, align 8, !tbaa !36
  %14 = fmul double %13, -6.000000e+00
  %15 = load double, ptr @N, align 8, !tbaa !36
  %16 = fmul double %15, 2.000000e+00
  %17 = insertelement <2 x double> poison, double %12, i64 0
  %18 = insertelement <2 x double> %17, double %11, i64 1
  %19 = fmul <2 x double> %18, %18
  %20 = fmul <2 x double> %18, %19
  %21 = fmul <2 x double> %18, %20
  %22 = insertelement <2 x double> poison, double %10, i64 0
  %23 = insertelement <2 x double> %22, double %6, i64 1
  %24 = fdiv <2 x double> %23, %21
  %25 = shufflevector <2 x double> %24, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %26 = fsub <2 x double> %24, %25
  %27 = extractelement <2 x double> %26, i64 0
  %28 = fdiv <2 x double> %23, %20
  %29 = shufflevector <2 x double> %28, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %30 = fsub <2 x double> %28, %29
  %31 = extractelement <2 x double> %30, i64 0
  %32 = fmul double %14, %31
  %33 = tail call double @llvm.fmuladd.f64(double %27, double 4.000000e+00, double %32)
  %34 = fdiv <2 x double> %23, %19
  %35 = shufflevector <2 x double> %34, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %36 = fsub <2 x double> %34, %35
  %37 = extractelement <2 x double> %36, i64 0
  %38 = tail call double @llvm.fmuladd.f64(double %16, double %37, double %33)
  %39 = fmul double %38, %0
  ret double %39
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(readwrite, argmem: write, inaccessiblemem: write) uwtable
define internal double @Nterm5(double noundef %0) #40 {
  %2 = load double, ptr @a, align 8, !tbaa !36
  %3 = fadd double %0, -1.000000e+00
  %4 = fneg double %2
  %5 = fmul double %3, %4
  %6 = tail call double @exp(double noundef %5) #44
  %7 = load double, ptr @c, align 8, !tbaa !36
  %8 = fneg double %7
  %9 = fmul double %3, %8
  %10 = tail call double @exp(double noundef %9) #44
  %11 = load double, ptr @a, align 8, !tbaa !36
  %12 = load double, ptr @c, align 8, !tbaa !36
  %13 = load double, ptr @rootN, align 8, !tbaa !36
  %14 = fmul double %13, -6.000000e+00
  %15 = load double, ptr @N, align 8, !tbaa !36
  %16 = fmul double %15, 2.000000e+00
  %17 = insertelement <2 x double> poison, double %12, i64 0
  %18 = insertelement <2 x double> %17, double %11, i64 1
  %19 = fmul <2 x double> %18, %18
  %20 = fmul <2 x double> %18, %19
  %21 = fmul <2 x double> %18, %20
  %22 = fmul <2 x double> %18, %21
  %23 = insertelement <2 x double> poison, double %10, i64 0
  %24 = insertelement <2 x double> %23, double %6, i64 1
  %25 = fdiv <2 x double> %24, %22
  %26 = shufflevector <2 x double> %25, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %27 = fsub <2 x double> %25, %26
  %28 = extractelement <2 x double> %27, i64 0
  %29 = fdiv <2 x double> %24, %21
  %30 = shufflevector <2 x double> %29, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %31 = fsub <2 x double> %29, %30
  %32 = extractelement <2 x double> %31, i64 0
  %33 = fmul double %14, %32
  %34 = tail call double @llvm.fmuladd.f64(double %28, double 4.000000e+00, double %33)
  %35 = fdiv <2 x double> %24, %20
  %36 = shufflevector <2 x double> %35, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %37 = fsub <2 x double> %35, %36
  %38 = extractelement <2 x double> %37, i64 0
  %39 = tail call double @llvm.fmuladd.f64(double %16, double %38, double %34)
  ret double %39
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(readwrite, argmem: write, inaccessiblemem: write) uwtable
define internal double @Dterm1(double noundef %0) #40 {
  %2 = load double, ptr @a, align 8, !tbaa !36
  %3 = fadd double %0, -1.000000e+00
  %4 = fneg double %2
  %5 = fmul double %3, %4
  %6 = tail call double @exp(double noundef %5) #44
  %7 = load double, ptr @c, align 8, !tbaa !36
  %8 = fneg double %7
  %9 = fmul double %3, %8
  %10 = tail call double @exp(double noundef %9) #44
  %11 = fmul double %0, %0
  %12 = fmul double %11, %0
  %13 = fdiv double %12, 6.000000e+00
  %14 = load double, ptr @a, align 8, !tbaa !36
  %15 = load double, ptr @c, align 8, !tbaa !36
  %16 = insertelement <2 x double> poison, double %10, i64 0
  %17 = insertelement <2 x double> %16, double %6, i64 1
  %18 = insertelement <2 x double> poison, double %15, i64 0
  %19 = insertelement <2 x double> %18, double %14, i64 1
  %20 = fdiv <2 x double> %17, %19
  %21 = shufflevector <2 x double> %20, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %22 = fsub <2 x double> %20, %21
  %23 = extractelement <2 x double> %22, i64 0
  %24 = fmul double %13, %23
  ret double %24
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(readwrite, argmem: write, inaccessiblemem: write) uwtable
define internal double @Dterm2(double noundef %0) #40 {
  %2 = load double, ptr @a, align 8, !tbaa !36
  %3 = fadd double %0, -1.000000e+00
  %4 = fneg double %2
  %5 = fmul double %3, %4
  %6 = tail call double @exp(double noundef %5) #44
  %7 = load double, ptr @c, align 8, !tbaa !36
  %8 = fneg double %7
  %9 = fmul double %3, %8
  %10 = tail call double @exp(double noundef %9) #44
  %11 = fmul double %0, %0
  %12 = load double, ptr @a, align 8, !tbaa !36
  %13 = load double, ptr @c, align 8, !tbaa !36
  %14 = insertelement <2 x double> poison, double %13, i64 0
  %15 = insertelement <2 x double> %14, double %12, i64 1
  %16 = fmul <2 x double> %15, %15
  %17 = insertelement <2 x double> poison, double %10, i64 0
  %18 = insertelement <2 x double> %17, double %6, i64 1
  %19 = fdiv <2 x double> %18, %16
  %20 = shufflevector <2 x double> %19, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %21 = fsub <2 x double> %19, %20
  %22 = extractelement <2 x double> %21, i64 0
  %23 = load double, ptr @rootN, align 8, !tbaa !36
  %24 = fdiv <2 x double> %18, %15
  %25 = shufflevector <2 x double> %24, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %26 = fsub <2 x double> %24, %25
  %27 = extractelement <2 x double> %26, i64 0
  %28 = fneg double %23
  %29 = fmul double %27, %28
  %30 = tail call double @llvm.fmuladd.f64(double %22, double 5.000000e-01, double %29)
  %31 = fmul double %11, %30
  ret double %31
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(readwrite, argmem: write, inaccessiblemem: write) uwtable
define internal double @Dterm3(double noundef %0) #40 {
  %2 = load double, ptr @a, align 8, !tbaa !36
  %3 = fadd double %0, -1.000000e+00
  %4 = fneg double %2
  %5 = fmul double %3, %4
  %6 = tail call double @exp(double noundef %5) #44
  %7 = load double, ptr @c, align 8, !tbaa !36
  %8 = fneg double %7
  %9 = fmul double %3, %8
  %10 = tail call double @exp(double noundef %9) #44
  %11 = load double, ptr @a, align 8, !tbaa !36
  %12 = load double, ptr @c, align 8, !tbaa !36
  %13 = load double, ptr @rootN, align 8, !tbaa !36
  %14 = insertelement <2 x double> poison, double %12, i64 0
  %15 = insertelement <2 x double> %14, double %11, i64 1
  %16 = fmul <2 x double> %15, %15
  %17 = fmul <2 x double> %15, %16
  %18 = insertelement <2 x double> poison, double %10, i64 0
  %19 = insertelement <2 x double> %18, double %6, i64 1
  %20 = fdiv <2 x double> %19, %17
  %21 = shufflevector <2 x double> %20, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %22 = fsub <2 x double> %20, %21
  %23 = extractelement <2 x double> %22, i64 0
  %24 = fdiv <2 x double> %19, %16
  %25 = shufflevector <2 x double> %24, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %26 = fsub <2 x double> %24, %25
  %27 = extractelement <2 x double> %26, i64 0
  %28 = fmul double %13, -2.000000e+00
  %29 = tail call double @llvm.fmuladd.f64(double %28, double %27, double %23)
  %30 = load double, ptr @N, align 8, !tbaa !36
  %31 = fdiv <2 x double> %19, %15
  %32 = shufflevector <2 x double> %31, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %33 = fsub <2 x double> %31, %32
  %34 = extractelement <2 x double> %33, i64 0
  %35 = tail call double @llvm.fmuladd.f64(double %30, double %34, double %29)
  %36 = fmul double %35, %0
  ret double %36
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(readwrite, argmem: write, inaccessiblemem: write) uwtable
define internal double @Dterm4(double noundef %0) #40 {
  %2 = load double, ptr @a, align 8, !tbaa !36
  %3 = fadd double %0, -1.000000e+00
  %4 = fneg double %2
  %5 = fmul double %3, %4
  %6 = tail call double @exp(double noundef %5) #44
  %7 = load double, ptr @c, align 8, !tbaa !36
  %8 = fneg double %7
  %9 = fmul double %3, %8
  %10 = tail call double @exp(double noundef %9) #44
  %11 = load double, ptr @a, align 8, !tbaa !36
  %12 = load double, ptr @c, align 8, !tbaa !36
  %13 = load double, ptr @rootN, align 8, !tbaa !36
  %14 = fmul double %13, -2.000000e+00
  %15 = load double, ptr @N, align 8, !tbaa !36
  %16 = insertelement <2 x double> poison, double %12, i64 0
  %17 = insertelement <2 x double> %16, double %11, i64 1
  %18 = fmul <2 x double> %17, %17
  %19 = fmul <2 x double> %17, %18
  %20 = fmul <2 x double> %17, %19
  %21 = insertelement <2 x double> poison, double %10, i64 0
  %22 = insertelement <2 x double> %21, double %6, i64 1
  %23 = fdiv <2 x double> %22, %20
  %24 = shufflevector <2 x double> %23, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %25 = fsub <2 x double> %23, %24
  %26 = extractelement <2 x double> %25, i64 0
  %27 = fdiv <2 x double> %22, %19
  %28 = shufflevector <2 x double> %27, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %29 = fsub <2 x double> %27, %28
  %30 = extractelement <2 x double> %29, i64 0
  %31 = tail call double @llvm.fmuladd.f64(double %14, double %30, double %26)
  %32 = fdiv <2 x double> %22, %18
  %33 = shufflevector <2 x double> %32, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %34 = fsub <2 x double> %32, %33
  %35 = extractelement <2 x double> %34, i64 0
  %36 = tail call double @llvm.fmuladd.f64(double %15, double %35, double %31)
  ret double %36
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(readwrite, argmem: write, inaccessiblemem: write) uwtable
define internal double @NNterm1(double noundef %0) #40 {
  %2 = load double, ptr @a, align 8, !tbaa !36
  %3 = fadd double %0, -1.000000e+00
  %4 = fneg double %2
  %5 = fmul double %3, %4
  %6 = tail call double @exp(double noundef %5) #44
  %7 = load double, ptr @c, align 8, !tbaa !36
  %8 = fneg double %7
  %9 = fmul double %3, %8
  %10 = tail call double @exp(double noundef %9) #44
  %11 = fmul double %0, %0
  %12 = fmul double %11, %0
  %13 = fmul double %12, %0
  %14 = fdiv double %13, -6.000000e+00
  %15 = load double, ptr @a, align 8, !tbaa !36
  %16 = load double, ptr @c, align 8, !tbaa !36
  %17 = insertelement <2 x double> poison, double %10, i64 0
  %18 = insertelement <2 x double> %17, double %6, i64 1
  %19 = insertelement <2 x double> poison, double %16, i64 0
  %20 = insertelement <2 x double> %19, double %15, i64 1
  %21 = fdiv <2 x double> %18, %20
  %22 = shufflevector <2 x double> %21, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %23 = fsub <2 x double> %21, %22
  %24 = extractelement <2 x double> %23, i64 0
  %25 = fmul double %14, %24
  ret double %25
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(readwrite, argmem: write, inaccessiblemem: write) uwtable
define internal double @NNterm2(double noundef %0) #40 {
  %2 = load double, ptr @a, align 8, !tbaa !36
  %3 = fadd double %0, -1.000000e+00
  %4 = fneg double %2
  %5 = fmul double %3, %4
  %6 = tail call double @exp(double noundef %5) #44
  %7 = load double, ptr @c, align 8, !tbaa !36
  %8 = fneg double %7
  %9 = fmul double %3, %8
  %10 = tail call double @exp(double noundef %9) #44
  %11 = fmul double %0, %0
  %12 = fmul double %11, %0
  %13 = load double, ptr @a, align 8, !tbaa !36
  %14 = load double, ptr @c, align 8, !tbaa !36
  %15 = insertelement <2 x double> poison, double %14, i64 0
  %16 = insertelement <2 x double> %15, double %13, i64 1
  %17 = fmul <2 x double> %16, %16
  %18 = insertelement <2 x double> poison, double %10, i64 0
  %19 = insertelement <2 x double> %18, double %6, i64 1
  %20 = fdiv <2 x double> %19, %17
  %21 = shufflevector <2 x double> %20, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %22 = fsub <2 x double> %20, %21
  %23 = extractelement <2 x double> %22, i64 0
  %24 = load double, ptr @rootN, align 8, !tbaa !36
  %25 = fdiv <2 x double> %19, %16
  %26 = shufflevector <2 x double> %25, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %27 = fsub <2 x double> %25, %26
  %28 = extractelement <2 x double> %27, i64 0
  %29 = fmul double %24, %28
  %30 = tail call double @llvm.fmuladd.f64(double %23, double 0xBFE5555555555555, double %29)
  %31 = fmul double %12, %30
  ret double %31
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(readwrite, argmem: write, inaccessiblemem: write) uwtable
define internal double @NNterm3(double noundef %0) #40 {
  %2 = load double, ptr @a, align 8, !tbaa !36
  %3 = fadd double %0, -1.000000e+00
  %4 = fneg double %2
  %5 = fmul double %3, %4
  %6 = tail call double @exp(double noundef %5) #44
  %7 = load double, ptr @c, align 8, !tbaa !36
  %8 = fneg double %7
  %9 = fmul double %3, %8
  %10 = tail call double @exp(double noundef %9) #44
  %11 = fmul double %0, %0
  %12 = load double, ptr @a, align 8, !tbaa !36
  %13 = load double, ptr @c, align 8, !tbaa !36
  %14 = insertelement <2 x double> poison, double %13, i64 0
  %15 = insertelement <2 x double> %14, double %12, i64 1
  %16 = fmul <2 x double> %15, %15
  %17 = fmul <2 x double> %15, %16
  %18 = insertelement <2 x double> poison, double %10, i64 0
  %19 = insertelement <2 x double> %18, double %6, i64 1
  %20 = fdiv <2 x double> %19, %17
  %21 = shufflevector <2 x double> %20, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %22 = fsub <2 x double> %20, %21
  %23 = extractelement <2 x double> %22, i64 0
  %24 = load double, ptr @rootN, align 8, !tbaa !36
  %25 = fmul double %24, 3.000000e+00
  %26 = fdiv <2 x double> %19, %16
  %27 = shufflevector <2 x double> %26, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %28 = fsub <2 x double> %26, %27
  %29 = extractelement <2 x double> %28, i64 0
  %30 = fmul double %25, %29
  %31 = tail call double @llvm.fmuladd.f64(double %23, double -2.000000e+00, double %30)
  %32 = load double, ptr @N, align 8, !tbaa !36
  %33 = fdiv <2 x double> %19, %15
  %34 = shufflevector <2 x double> %33, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %35 = fsub <2 x double> %33, %34
  %36 = extractelement <2 x double> %35, i64 0
  %37 = fmul double %32, -2.000000e+00
  %38 = tail call double @llvm.fmuladd.f64(double %37, double %36, double %31)
  %39 = fmul double %11, %38
  ret double %39
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(readwrite, argmem: write, inaccessiblemem: write) uwtable
define internal double @NNterm4(double noundef %0) #40 {
  %2 = load double, ptr @a, align 8, !tbaa !36
  %3 = fadd double %0, -1.000000e+00
  %4 = fneg double %2
  %5 = fmul double %3, %4
  %6 = tail call double @exp(double noundef %5) #44
  %7 = load double, ptr @c, align 8, !tbaa !36
  %8 = fneg double %7
  %9 = fmul double %3, %8
  %10 = tail call double @exp(double noundef %9) #44
  %11 = load double, ptr @a, align 8, !tbaa !36
  %12 = load double, ptr @c, align 8, !tbaa !36
  %13 = load double, ptr @rootN, align 8, !tbaa !36
  %14 = fmul double %13, 6.000000e+00
  %15 = load double, ptr @N, align 8, !tbaa !36
  %16 = insertelement <2 x double> poison, double %12, i64 0
  %17 = insertelement <2 x double> %16, double %11, i64 1
  %18 = fmul <2 x double> %17, %17
  %19 = fmul <2 x double> %17, %18
  %20 = fmul <2 x double> %17, %19
  %21 = insertelement <2 x double> poison, double %10, i64 0
  %22 = insertelement <2 x double> %21, double %6, i64 1
  %23 = fdiv <2 x double> %22, %20
  %24 = shufflevector <2 x double> %23, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %25 = fsub <2 x double> %23, %24
  %26 = extractelement <2 x double> %25, i64 0
  %27 = fdiv <2 x double> %22, %19
  %28 = shufflevector <2 x double> %27, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %29 = fsub <2 x double> %27, %28
  %30 = extractelement <2 x double> %29, i64 0
  %31 = fmul double %14, %30
  %32 = tail call double @llvm.fmuladd.f64(double %26, double -4.000000e+00, double %31)
  %33 = fdiv <2 x double> %22, %18
  %34 = shufflevector <2 x double> %33, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %35 = fsub <2 x double> %33, %34
  %36 = extractelement <2 x double> %35, i64 0
  %37 = fmul double %15, -4.000000e+00
  %38 = tail call double @llvm.fmuladd.f64(double %37, double %36, double %32)
  %39 = fmul double %15, 0x3FF5555555555555
  %40 = fmul double %13, %39
  %41 = fdiv <2 x double> %22, %17
  %42 = shufflevector <2 x double> %41, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %43 = fsub <2 x double> %41, %42
  %44 = extractelement <2 x double> %43, i64 0
  %45 = tail call double @llvm.fmuladd.f64(double %40, double %44, double %38)
  %46 = fmul double %45, %0
  ret double %46
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(readwrite, argmem: write, inaccessiblemem: write) uwtable
define internal double @NNterm5(double noundef %0) #40 {
  %2 = load double, ptr @a, align 8, !tbaa !36
  %3 = fadd double %0, -1.000000e+00
  %4 = fneg double %2
  %5 = fmul double %3, %4
  %6 = tail call double @exp(double noundef %5) #44
  %7 = load double, ptr @c, align 8, !tbaa !36
  %8 = fneg double %7
  %9 = fmul double %3, %8
  %10 = tail call double @exp(double noundef %9) #44
  %11 = load double, ptr @a, align 8, !tbaa !36
  %12 = load double, ptr @c, align 8, !tbaa !36
  %13 = load double, ptr @rootN, align 8, !tbaa !36
  %14 = fmul double %13, 6.000000e+00
  %15 = load double, ptr @N, align 8, !tbaa !36
  %16 = fmul double %15, -4.000000e+00
  %17 = fmul double %15, 0x3FF5555555555555
  %18 = fmul double %13, %17
  %19 = insertelement <2 x double> poison, double %12, i64 0
  %20 = insertelement <2 x double> %19, double %11, i64 1
  %21 = fmul <2 x double> %20, %20
  %22 = fmul <2 x double> %20, %21
  %23 = fmul <2 x double> %20, %22
  %24 = fmul <2 x double> %20, %23
  %25 = insertelement <2 x double> poison, double %10, i64 0
  %26 = insertelement <2 x double> %25, double %6, i64 1
  %27 = fdiv <2 x double> %26, %24
  %28 = shufflevector <2 x double> %27, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %29 = fsub <2 x double> %27, %28
  %30 = extractelement <2 x double> %29, i64 0
  %31 = fdiv <2 x double> %26, %23
  %32 = shufflevector <2 x double> %31, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %33 = fsub <2 x double> %31, %32
  %34 = extractelement <2 x double> %33, i64 0
  %35 = fmul double %14, %34
  %36 = tail call double @llvm.fmuladd.f64(double %30, double -4.000000e+00, double %35)
  %37 = fdiv <2 x double> %26, %22
  %38 = shufflevector <2 x double> %37, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %39 = fsub <2 x double> %37, %38
  %40 = extractelement <2 x double> %39, i64 0
  %41 = tail call double @llvm.fmuladd.f64(double %16, double %40, double %36)
  %42 = fdiv <2 x double> %26, %21
  %43 = shufflevector <2 x double> %42, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %44 = fsub <2 x double> %42, %43
  %45 = extractelement <2 x double> %44, i64 0
  %46 = tail call double @llvm.fmuladd.f64(double %18, double %45, double %41)
  ret double %46
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(readwrite, argmem: write, inaccessiblemem: write) uwtable
define internal double @DDterm1(double noundef %0) #40 {
  %2 = load double, ptr @a, align 8, !tbaa !36
  %3 = fadd double %0, -1.000000e+00
  %4 = fneg double %2
  %5 = fmul double %3, %4
  %6 = tail call double @exp(double noundef %5) #44
  %7 = load double, ptr @c, align 8, !tbaa !36
  %8 = fneg double %7
  %9 = fmul double %3, %8
  %10 = tail call double @exp(double noundef %9) #44
  %11 = fmul double %0, %0
  %12 = fmul double %11, %0
  %13 = fdiv double %12, -6.000000e+00
  %14 = load double, ptr @a, align 8, !tbaa !36
  %15 = load double, ptr @c, align 8, !tbaa !36
  %16 = insertelement <2 x double> poison, double %10, i64 0
  %17 = insertelement <2 x double> %16, double %6, i64 1
  %18 = insertelement <2 x double> poison, double %15, i64 0
  %19 = insertelement <2 x double> %18, double %14, i64 1
  %20 = fdiv <2 x double> %17, %19
  %21 = shufflevector <2 x double> %20, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %22 = fsub <2 x double> %20, %21
  %23 = extractelement <2 x double> %22, i64 0
  %24 = fmul double %13, %23
  ret double %24
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(readwrite, argmem: write, inaccessiblemem: write) uwtable
define internal double @DDterm2(double noundef %0) #40 {
  %2 = load double, ptr @a, align 8, !tbaa !36
  %3 = fadd double %0, -1.000000e+00
  %4 = fneg double %2
  %5 = fmul double %3, %4
  %6 = tail call double @exp(double noundef %5) #44
  %7 = load double, ptr @c, align 8, !tbaa !36
  %8 = fneg double %7
  %9 = fmul double %3, %8
  %10 = tail call double @exp(double noundef %9) #44
  %11 = fmul double %0, %0
  %12 = load double, ptr @a, align 8, !tbaa !36
  %13 = load double, ptr @c, align 8, !tbaa !36
  %14 = insertelement <2 x double> poison, double %13, i64 0
  %15 = insertelement <2 x double> %14, double %12, i64 1
  %16 = fmul <2 x double> %15, %15
  %17 = insertelement <2 x double> poison, double %10, i64 0
  %18 = insertelement <2 x double> %17, double %6, i64 1
  %19 = fdiv <2 x double> %18, %16
  %20 = shufflevector <2 x double> %19, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %21 = fsub <2 x double> %19, %20
  %22 = extractelement <2 x double> %21, i64 0
  %23 = load double, ptr @rootN, align 8, !tbaa !36
  %24 = fdiv <2 x double> %18, %15
  %25 = shufflevector <2 x double> %24, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %26 = fsub <2 x double> %24, %25
  %27 = extractelement <2 x double> %26, i64 0
  %28 = fmul double %23, %27
  %29 = tail call double @llvm.fmuladd.f64(double %22, double -5.000000e-01, double %28)
  %30 = fmul double %11, %29
  ret double %30
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(readwrite, argmem: write, inaccessiblemem: write) uwtable
define internal double @DDterm3(double noundef %0) #40 {
  %2 = load double, ptr @a, align 8, !tbaa !36
  %3 = fadd double %0, -1.000000e+00
  %4 = fneg double %2
  %5 = fmul double %3, %4
  %6 = tail call double @exp(double noundef %5) #44
  %7 = load double, ptr @c, align 8, !tbaa !36
  %8 = fneg double %7
  %9 = fmul double %3, %8
  %10 = tail call double @exp(double noundef %9) #44
  %11 = load double, ptr @a, align 8, !tbaa !36
  %12 = load double, ptr @c, align 8, !tbaa !36
  %13 = load double, ptr @rootN, align 8, !tbaa !36
  %14 = fmul double %13, 2.000000e+00
  %15 = insertelement <2 x double> poison, double %12, i64 0
  %16 = insertelement <2 x double> %15, double %11, i64 1
  %17 = fmul <2 x double> %16, %16
  %18 = fmul <2 x double> %16, %17
  %19 = insertelement <2 x double> poison, double %10, i64 0
  %20 = insertelement <2 x double> %19, double %6, i64 1
  %21 = fdiv <2 x double> %20, %18
  %22 = shufflevector <2 x double> %21, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %23 = fsub <2 x double> %21, %22
  %24 = extractelement <2 x double> %23, i64 0
  %25 = fneg double %24
  %26 = fdiv <2 x double> %20, %17
  %27 = shufflevector <2 x double> %26, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %28 = fsub <2 x double> %26, %27
  %29 = extractelement <2 x double> %28, i64 0
  %30 = tail call double @llvm.fmuladd.f64(double %14, double %29, double %25)
  %31 = load double, ptr @N, align 8, !tbaa !36
  %32 = fdiv <2 x double> %20, %16
  %33 = shufflevector <2 x double> %32, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %34 = fsub <2 x double> %32, %33
  %35 = extractelement <2 x double> %34, i64 0
  %36 = fmul double %31, -2.000000e+00
  %37 = tail call double @llvm.fmuladd.f64(double %36, double %35, double %30)
  %38 = fmul double %37, %0
  ret double %38
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(readwrite, argmem: write, inaccessiblemem: write) uwtable
define internal double @DDterm4(double noundef %0) #40 {
  %2 = load double, ptr @a, align 8, !tbaa !36
  %3 = fadd double %0, -1.000000e+00
  %4 = fneg double %2
  %5 = fmul double %3, %4
  %6 = tail call double @exp(double noundef %5) #44
  %7 = load double, ptr @c, align 8, !tbaa !36
  %8 = fneg double %7
  %9 = fmul double %3, %8
  %10 = tail call double @exp(double noundef %9) #44
  %11 = load double, ptr @a, align 8, !tbaa !36
  %12 = load double, ptr @c, align 8, !tbaa !36
  %13 = load double, ptr @rootN, align 8, !tbaa !36
  %14 = fmul double %13, 2.000000e+00
  %15 = load double, ptr @N, align 8, !tbaa !36
  %16 = insertelement <2 x double> poison, double %12, i64 0
  %17 = insertelement <2 x double> %16, double %11, i64 1
  %18 = fmul <2 x double> %17, %17
  %19 = fmul <2 x double> %17, %18
  %20 = fmul <2 x double> %17, %19
  %21 = insertelement <2 x double> poison, double %10, i64 0
  %22 = insertelement <2 x double> %21, double %6, i64 1
  %23 = fdiv <2 x double> %22, %20
  %24 = shufflevector <2 x double> %23, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %25 = fsub <2 x double> %23, %24
  %26 = extractelement <2 x double> %25, i64 0
  %27 = fneg double %26
  %28 = fdiv <2 x double> %22, %19
  %29 = shufflevector <2 x double> %28, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %30 = fsub <2 x double> %28, %29
  %31 = extractelement <2 x double> %30, i64 0
  %32 = tail call double @llvm.fmuladd.f64(double %14, double %31, double %27)
  %33 = fdiv <2 x double> %22, %18
  %34 = shufflevector <2 x double> %33, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %35 = fsub <2 x double> %33, %34
  %36 = extractelement <2 x double> %35, i64 0
  %37 = fmul double %15, -2.000000e+00
  %38 = tail call double @llvm.fmuladd.f64(double %37, double %36, double %32)
  %39 = fmul double %15, 0x3FF5555555555555
  %40 = fmul double %13, %39
  %41 = fdiv <2 x double> %22, %17
  %42 = shufflevector <2 x double> %41, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %43 = fsub <2 x double> %41, %42
  %44 = extractelement <2 x double> %43, i64 0
  %45 = tail call double @llvm.fmuladd.f64(double %40, double %44, double %38)
  ret double %45
}

; Function Attrs: nounwind optsize memory(readwrite, argmem: none) uwtable
define internal double @getptree(i32 noundef %0, i32 noundef %1, i32 noundef %2) #41 {
  %4 = icmp slt i32 %1, 1
  br i1 %4, label %53, label %5

5:                                                ; preds = %3
  %6 = add nsw i32 %0, 1
  %7 = add i32 %1, 3
  %8 = and i32 %7, -4
  %9 = add i32 %1, -1
  %10 = insertelement <4 x i32> poison, i32 %9, i64 0
  %11 = shufflevector <4 x i32> %10, <4 x i32> poison, <4 x i32> zeroinitializer
  %12 = insertelement <4 x i32> poison, i32 %6, i64 0
  %13 = shufflevector <4 x i32> %12, <4 x i32> poison, <4 x i32> zeroinitializer
  br label %14

14:                                               ; preds = %14, %5
  %15 = phi i32 [ 0, %5 ], [ %18, %14 ]
  %16 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %5 ], [ %17, %14 ]
  %17 = mul <4 x i32> %16, %13
  %18 = add i32 %15, 4
  %19 = icmp eq i32 %18, %8
  br i1 %19, label %20, label %14, !llvm.loop !1094

20:                                               ; preds = %14
  %.lcssa6 = phi i32 [ %15, %14 ]
  %.lcssa5 = phi <4 x i32> [ %16, %14 ]
  %.lcssa4 = phi <4 x i32> [ %17, %14 ]
  %21 = insertelement <4 x i32> poison, i32 %.lcssa6, i64 0
  %22 = shufflevector <4 x i32> %21, <4 x i32> poison, <4 x i32> zeroinitializer
  %23 = or <4 x i32> %22, <i32 0, i32 1, i32 2, i32 3>
  %24 = icmp ugt <4 x i32> %23, %11
  %25 = select <4 x i1> %24, <4 x i32> %.lcssa5, <4 x i32> %.lcssa4
  %26 = tail call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %25)
  %27 = add nsw i32 %26, -1
  %28 = sdiv i32 %27, %0
  %29 = icmp sgt i32 %1, 1
  br i1 %29, label %30, label %53

30:                                               ; preds = %20
  %31 = add nsw i32 %0, 1
  %32 = add i32 %1, 2
  %33 = and i32 %32, -4
  %34 = add i32 %1, -2
  %35 = insertelement <4 x i32> poison, i32 %34, i64 0
  %36 = shufflevector <4 x i32> %35, <4 x i32> poison, <4 x i32> zeroinitializer
  %37 = insertelement <4 x i32> poison, i32 %31, i64 0
  %38 = shufflevector <4 x i32> %37, <4 x i32> poison, <4 x i32> zeroinitializer
  br label %39

39:                                               ; preds = %39, %30
  %40 = phi i32 [ 0, %30 ], [ %43, %39 ]
  %41 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %30 ], [ %42, %39 ]
  %42 = mul <4 x i32> %41, %38
  %43 = add i32 %40, 4
  %44 = icmp eq i32 %43, %33
  br i1 %44, label %45, label %39, !llvm.loop !1095

45:                                               ; preds = %39
  %.lcssa3 = phi i32 [ %40, %39 ]
  %.lcssa2 = phi <4 x i32> [ %41, %39 ]
  %.lcssa1 = phi <4 x i32> [ %42, %39 ]
  %46 = insertelement <4 x i32> poison, i32 %.lcssa3, i64 0
  %47 = shufflevector <4 x i32> %46, <4 x i32> poison, <4 x i32> zeroinitializer
  %48 = or <4 x i32> %47, <i32 0, i32 1, i32 2, i32 3>
  %49 = icmp ugt <4 x i32> %48, %36
  %50 = select <4 x i1> %49, <4 x i32> %.lcssa2, <4 x i32> %.lcssa1
  %51 = tail call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %50)
  %52 = add nsw i32 %51, -1
  br label %53

53:                                               ; preds = %45, %20, %3
  %54 = phi i32 [ %28, %20 ], [ %28, %45 ], [ 0, %3 ]
  %55 = phi i32 [ 0, %20 ], [ %52, %45 ], [ 0, %3 ]
  %56 = sdiv i32 %55, %0
  %57 = add i32 %54, 1
  %58 = sext i32 %57 to i64
  %59 = shl nsw i64 %58, 4
  %60 = tail call noalias ptr @malloc(i64 noundef %59) #45
  %61 = getelementptr inbounds %struct.array3d, ptr %60, i64 1
  store i32 %0, ptr %61, align 8, !tbaa !1096
  %62 = getelementptr inbounds %struct.array3d, ptr %60, i64 1, i32 1
  store double 1.000000e+00, ptr %62, align 8, !tbaa !1098
  %63 = icmp slt i32 %56, 1
  br i1 %63, label %69, label %64

64:                                               ; preds = %53
  %65 = add i32 %0, 1
  %66 = icmp slt i32 %0, 0
  %67 = add nuw i32 %56, 1
  %68 = zext i32 %67 to i64
  br label %74

69:                                               ; preds = %98, %53
  %70 = icmp slt i32 %56, %54
  br i1 %70, label %71, label %126

71:                                               ; preds = %69
  %72 = sext i32 %56 to i64
  %73 = add nsw i64 %72, 1
  br label %105

74:                                               ; preds = %98, %64
  %75 = phi i64 [ 1, %64 ], [ %99, %98 ]
  br i1 %66, label %98, label %76

76:                                               ; preds = %74
  %77 = trunc i64 %75 to i32
  %78 = mul nsw i32 %65, %77
  %79 = sub i32 %78, %0
  %80 = getelementptr inbounds %struct.array3d, ptr %60, i64 %75
  %81 = getelementptr inbounds %struct.array3d, ptr %60, i64 %75, i32 1
  %82 = load i32, ptr %80, align 8, !tbaa !1096
  br label %83

83:                                               ; preds = %83, %76
  %84 = phi i32 [ %82, %76 ], [ %92, %83 ]
  %85 = phi i32 [ 0, %76 ], [ %96, %83 ]
  %86 = phi i32 [ %79, %76 ], [ %87, %83 ]
  %87 = add i32 %86, 1
  %88 = add nsw i32 %84, %85
  %89 = sext i32 %87 to i64
  %90 = getelementptr inbounds %struct.array3d, ptr %60, i64 %89
  store i32 %88, ptr %90, align 8, !tbaa !1096
  %91 = load double, ptr %81, align 8, !tbaa !1098
  %92 = load i32, ptr %80, align 8, !tbaa !1096
  %93 = tail call double @probability(i32 noundef %92, i32 noundef %0, i32 noundef %85, i32 noundef %2) #43
  %94 = fmul double %91, %93
  %95 = getelementptr inbounds %struct.array3d, ptr %60, i64 %89, i32 1
  store double %94, ptr %95, align 8, !tbaa !1098
  %96 = add nuw i32 %85, 1
  %97 = icmp eq i32 %85, %0
  br i1 %97, label %98, label %83, !llvm.loop !1099

98:                                               ; preds = %83, %74
  %99 = add nuw nsw i64 %75, 1
  %100 = icmp eq i64 %99, %68
  br i1 %100, label %69, label %74, !llvm.loop !1100

101:                                              ; preds = %105
  %.lcssa = phi double [ %113, %105 ]
  br i1 %70, label %102, label %126

102:                                              ; preds = %101
  %103 = sext i32 %56 to i64
  %104 = add nsw i64 %103, 1
  br label %117

105:                                              ; preds = %105, %71
  %106 = phi i64 [ %73, %71 ], [ %114, %105 ]
  %107 = phi double [ 0.000000e+00, %71 ], [ %113, %105 ]
  %108 = getelementptr inbounds %struct.array3d, ptr %60, i64 %106
  %109 = load i32, ptr %108, align 8, !tbaa !1096
  %110 = sitofp i32 %109 to double
  %111 = getelementptr inbounds %struct.array3d, ptr %60, i64 %106, i32 1
  %112 = load double, ptr %111, align 8, !tbaa !1098
  %113 = tail call double @llvm.fmuladd.f64(double %110, double %112, double %107)
  %114 = add nsw i64 %106, 1
  %115 = trunc i64 %114 to i32
  %116 = icmp eq i32 %57, %115
  br i1 %116, label %101, label %105, !llvm.loop !1101

117:                                              ; preds = %117, %102
  %118 = phi i64 [ %104, %102 ], [ %123, %117 ]
  %119 = phi double [ 0.000000e+00, %102 ], [ %122, %117 ]
  %120 = getelementptr inbounds %struct.array3d, ptr %60, i64 %118, i32 1
  %121 = load double, ptr %120, align 8, !tbaa !1098
  %122 = fadd double %119, %121
  %123 = add nsw i64 %118, 1
  %124 = trunc i64 %123 to i32
  %125 = icmp eq i32 %57, %124
  br i1 %125, label %126, label %117, !llvm.loop !1102

126:                                              ; preds = %117, %101, %69
  %127 = phi double [ %.lcssa, %101 ], [ 0.000000e+00, %69 ], [ %.lcssa, %117 ]
  %128 = phi double [ 0.000000e+00, %101 ], [ 0.000000e+00, %69 ], [ %122, %117 ]
  tail call void @free(ptr noundef %60) #44
  %129 = fcmp olt double %127, 0x3EB0C6F7A0B5ED8D
  %130 = fdiv double %127, %128
  %131 = select i1 %129, double 0.000000e+00, double %130
  ret double %131
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.vector.reduce.mul.v4i32(<4 x i32>) #13

; Function Attrs: nofree norecurse nosync nounwind optsize memory(none) uwtable
define internal double @probability(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3) #42 {
  %5 = add nsw i32 %2, %0
  %6 = icmp sgt i32 %5, %3
  br i1 %6, label %13, label %7

7:                                                ; preds = %4
  %8 = sub nsw i32 %1, %2
  %9 = tail call double @combination(i32 noundef %0, i32 noundef %8) #43
  %10 = sub nsw i32 %3, %0
  %11 = tail call double @combination(i32 noundef %10, i32 noundef %2) #43
  %12 = fmul double %9, %11
  br label %13

13:                                               ; preds = %7, %4
  %14 = phi double [ %12, %7 ], [ 0.000000e+00, %4 ]
  ret double %14
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(none) uwtable
define internal double @combination(i32 noundef %0, i32 noundef %1) #42 {
  %3 = sub nsw i32 %0, %1
  %4 = icmp sgt i32 %3, %1
  br i1 %4, label %7, label %5

5:                                                ; preds = %2
  %6 = icmp sgt i32 %0, %1
  br i1 %6, label %29, label %36

7:                                                ; preds = %2
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %25

9:                                                ; preds = %9, %7
  %10 = phi i32 [ %15, %9 ], [ 0, %7 ]
  %11 = phi double [ %14, %9 ], [ 1.000000e+00, %7 ]
  %12 = sub nsw i32 %0, %10
  %13 = sitofp i32 %12 to double
  %14 = fmul double %11, %13
  %15 = add nuw nsw i32 %10, 1
  %16 = icmp eq i32 %15, %1
  br i1 %16, label %17, label %9, !llvm.loop !1103

17:                                               ; preds = %9
  %.lcssa = phi double [ %14, %9 ]
  br i1 %8, label %18, label %25

18:                                               ; preds = %18, %17
  %19 = phi double [ %22, %18 ], [ 1.000000e+00, %17 ]
  %20 = phi i32 [ %23, %18 ], [ %1, %17 ]
  %21 = sitofp i32 %20 to double
  %22 = fmul double %19, %21
  %23 = add nsw i32 %20, -1
  %24 = icmp ugt i32 %20, 1
  br i1 %24, label %18, label %25, !llvm.loop !1104

25:                                               ; preds = %18, %17, %7
  %26 = phi double [ %.lcssa, %17 ], [ 1.000000e+00, %7 ], [ %.lcssa, %18 ]
  %27 = phi double [ 1.000000e+00, %17 ], [ 1.000000e+00, %7 ], [ %22, %18 ]
  %28 = fdiv double %26, %27
  br label %49

29:                                               ; preds = %29, %5
  %30 = phi i32 [ %34, %29 ], [ %0, %5 ]
  %31 = phi double [ %33, %29 ], [ 1.000000e+00, %5 ]
  %32 = sitofp i32 %30 to double
  %33 = fmul double %31, %32
  %34 = add nsw i32 %30, -1
  %35 = icmp sgt i32 %34, %1
  br i1 %35, label %29, label %36, !llvm.loop !1105

36:                                               ; preds = %29, %5
  %37 = phi double [ 1.000000e+00, %5 ], [ %33, %29 ]
  %38 = icmp sgt i32 %3, 0
  br i1 %38, label %39, label %46

39:                                               ; preds = %39, %36
  %40 = phi double [ %43, %39 ], [ 1.000000e+00, %36 ]
  %41 = phi i32 [ %44, %39 ], [ %3, %36 ]
  %42 = sitofp i32 %41 to double
  %43 = fmul double %40, %42
  %44 = add nsw i32 %41, -1
  %45 = icmp ugt i32 %41, 1
  br i1 %45, label %39, label %46, !llvm.loop !1104

46:                                               ; preds = %39, %36
  %47 = phi double [ 1.000000e+00, %36 ], [ %43, %39 ]
  %48 = fdiv double %37, %47
  br label %49

49:                                               ; preds = %46, %25
  %50 = phi double [ %28, %25 ], [ %48, %46 ]
  ret double %50
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @woverlap(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6) #0 {
  %8 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %9 = sext i32 %0 to i64
  %10 = getelementptr inbounds ptr, ptr %8, i64 %9
  %11 = load ptr, ptr %10, align 8, !tbaa !7
  %12 = sext i32 %3 to i64
  %13 = getelementptr inbounds %struct.cellbox, ptr %11, i64 0, i32 21, i64 %12
  %14 = load ptr, ptr %13, align 8, !tbaa !7
  %15 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 9
  %16 = load i32, ptr %15, align 8, !tbaa !167
  %17 = add nsw i32 %16, %1
  %18 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 10
  %19 = load i32, ptr %18, align 4, !tbaa !168
  %20 = add nsw i32 %19, %1
  %21 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 11
  %22 = load i32, ptr %21, align 8, !tbaa !169
  %23 = add nsw i32 %22, %2
  %24 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 12
  %25 = load i32, ptr %24, align 4, !tbaa !170
  %26 = add nsw i32 %25, %2
  %27 = load i32, ptr @numcells, align 4, !tbaa !17
  %28 = icmp slt i32 %27, %0
  br i1 %28, label %46, label %29

29:                                               ; preds = %7
  %30 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 1
  %31 = load double, ptr %30, align 8, !tbaa !292
  %32 = tail call i32 @wireestx(i32 noundef %17, i32 noundef %23, i32 noundef %26, double noundef %31) #44
  %33 = sub nsw i32 %17, %32
  %34 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 2
  %35 = load double, ptr %34, align 8, !tbaa !293
  %36 = tail call i32 @wireestx(i32 noundef %20, i32 noundef %23, i32 noundef %26, double noundef %35) #44
  %37 = add nsw i32 %36, %20
  %38 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 3
  %39 = load double, ptr %38, align 8, !tbaa !294
  %40 = tail call i32 @wireesty(i32 noundef %23, i32 noundef %33, i32 noundef %37, double noundef %39) #44
  %41 = sub nsw i32 %23, %40
  %42 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 4
  %43 = load double, ptr %42, align 8, !tbaa !295
  %44 = tail call i32 @wireesty(i32 noundef %26, i32 noundef %33, i32 noundef %37, double noundef %43) #44
  %45 = add nsw i32 %44, %26
  br label %46

46:                                               ; preds = %29, %7
  %47 = phi i32 [ %33, %29 ], [ %17, %7 ]
  %48 = phi i32 [ %37, %29 ], [ %20, %7 ]
  %49 = phi i32 [ %41, %29 ], [ %23, %7 ]
  %50 = phi i32 [ %45, %29 ], [ %26, %7 ]
  %51 = load i32, ptr @binOffsetX, align 4, !tbaa !17
  %52 = sub nsw i32 %47, %51
  %53 = load i32, ptr @binWidthX, align 4, !tbaa !17
  %54 = sdiv i32 %52, %53
  %55 = icmp slt i32 %54, 1
  %56 = load i32, ptr @numBinsX, align 4
  %57 = tail call i32 @llvm.smin.i32(i32 %54, i32 %56)
  %58 = select i1 %55, i32 1, i32 %57
  %59 = sub nsw i32 %48, %51
  %60 = sdiv i32 %59, %53
  %61 = icmp sgt i32 %60, %56
  %62 = tail call i32 @llvm.smax.i32(i32 %60, i32 1)
  %63 = select i1 %61, i32 %56, i32 %62
  %64 = load i32, ptr @binOffsetY, align 4, !tbaa !17
  %65 = sub nsw i32 %49, %64
  %66 = load i32, ptr @binWidthY, align 4, !tbaa !17
  %67 = sdiv i32 %65, %66
  %68 = icmp slt i32 %67, 1
  %69 = load i32, ptr @numBinsY, align 4
  %70 = tail call i32 @llvm.smin.i32(i32 %67, i32 %69)
  %71 = select i1 %68, i32 1, i32 %70
  %72 = sub nsw i32 %50, %64
  %73 = sdiv i32 %72, %66
  %74 = icmp sgt i32 %73, %69
  %75 = tail call i32 @llvm.smax.i32(i32 %73, i32 1)
  %76 = select i1 %74, i32 %69, i32 %75
  %77 = icmp eq i32 %58, %63
  %78 = icmp eq i32 %71, %76
  %79 = select i1 %77, i1 %78, i1 false
  %80 = select i1 %79, i32 %58, i32 0
  %81 = select i1 %79, i32 %71, i32 0
  store i32 %80, ptr @binX, align 4, !tbaa !17
  store i32 %81, ptr @binY, align 4, !tbaa !17
  %82 = icmp slt i32 %63, 0
  br i1 %82, label %353, label %83

83:                                               ; preds = %46
  %84 = icmp slt i32 %76, 0
  %85 = icmp eq i32 %5, 0
  %86 = getelementptr inbounds %struct.cellbox, ptr %11, i64 0, i32 6
  %87 = sext i32 %71 to i64
  %88 = add i32 %76, 1
  %89 = sext i32 %58 to i64
  %90 = add nuw i32 %63, 1
  %91 = zext i32 %90 to i64
  %92 = zext i32 %88 to i64
  br label %93

93:                                               ; preds = %349, %83
  %94 = phi i64 [ 0, %83 ], [ %351, %349 ]
  %95 = phi i32 [ 0, %83 ], [ %350, %349 ]
  %96 = icmp ne i64 %94, 0
  %97 = icmp slt i64 %94, %89
  %98 = and i1 %96, %97
  %99 = select i1 %98, i1 true, i1 %84
  br i1 %99, label %349, label %100

100:                                              ; preds = %93
  %101 = icmp eq i64 %94, 0
  br label %102

102:                                              ; preds = %345, %100
  %103 = phi i64 [ 0, %100 ], [ %347, %345 ]
  %104 = phi i32 [ %95, %100 ], [ %346, %345 ]
  %105 = or i64 %103, %94
  %106 = and i64 %105, 4294967295
  %107 = icmp ne i64 %106, 0
  %108 = icmp slt i64 %103, %87
  %109 = or i1 %101, %108
  %110 = select i1 %107, i1 %109, i1 false
  br i1 %110, label %345, label %111

111:                                              ; preds = %102
  %112 = load ptr, ptr @blockarray, align 8, !tbaa !7
  %113 = getelementptr inbounds ptr, ptr %112, i64 %94
  %114 = load ptr, ptr %113, align 8, !tbaa !7
  %115 = getelementptr inbounds ptr, ptr %114, i64 %103
  %116 = load ptr, ptr %115, align 8, !tbaa !7
  %117 = load i32, ptr %116, align 4, !tbaa !17
  %118 = icmp slt i32 %117, 1
  br i1 %118, label %345, label %119

119:                                              ; preds = %339, %111
  %120 = phi i64 [ %341, %339 ], [ 1, %111 ]
  %121 = phi i32 [ %340, %339 ], [ %104, %111 ]
  %122 = getelementptr inbounds i32, ptr %116, i64 %120
  %123 = load i32, ptr %122, align 4, !tbaa !17
  %124 = icmp eq i32 %123, %0
  br i1 %124, label %339, label %125

125:                                              ; preds = %119
  %126 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %127 = sext i32 %123 to i64
  %128 = getelementptr inbounds ptr, ptr %126, i64 %127
  %129 = load ptr, ptr %128, align 8, !tbaa !7
  %130 = icmp eq i32 %123, %4
  br i1 %130, label %134, label %131

131:                                              ; preds = %125
  %132 = getelementptr inbounds %struct.cellbox, ptr %129, i64 0, i32 5
  %133 = load i32, ptr %132, align 8, !tbaa !45
  br label %135

134:                                              ; preds = %125
  br i1 %85, label %135, label %339

135:                                              ; preds = %134, %131
  %136 = phi i32 [ %133, %131 ], [ %6, %134 ]
  %137 = phi ptr [ %129, %131 ], [ %11, %134 ]
  %138 = getelementptr inbounds %struct.cellbox, ptr %137, i64 0, i32 3
  %139 = getelementptr inbounds %struct.cellbox, ptr %137, i64 0, i32 2
  %140 = sext i32 %136 to i64
  %141 = getelementptr inbounds %struct.cellbox, ptr %129, i64 0, i32 21, i64 %140
  %142 = load i32, ptr %138, align 8, !tbaa !165
  %143 = load i32, ptr %139, align 4, !tbaa !164
  %144 = load ptr, ptr %141, align 8, !tbaa !7
  %145 = getelementptr inbounds %struct.tilebox, ptr %144, i64 0, i32 9
  %146 = load i32, ptr %145, align 8, !tbaa !167
  %147 = add nsw i32 %146, %143
  %148 = getelementptr inbounds %struct.tilebox, ptr %144, i64 0, i32 10
  %149 = load i32, ptr %148, align 4, !tbaa !168
  %150 = add nsw i32 %149, %143
  %151 = getelementptr inbounds %struct.tilebox, ptr %144, i64 0, i32 11
  %152 = load i32, ptr %151, align 8, !tbaa !169
  %153 = add nsw i32 %152, %142
  %154 = getelementptr inbounds %struct.tilebox, ptr %144, i64 0, i32 12
  %155 = load i32, ptr %154, align 4, !tbaa !170
  %156 = add nsw i32 %155, %142
  %157 = load i32, ptr @numcells, align 4, !tbaa !17
  %158 = icmp sgt i32 %123, %157
  br i1 %158, label %176, label %159

159:                                              ; preds = %135
  %160 = getelementptr inbounds %struct.tilebox, ptr %144, i64 0, i32 1
  %161 = load double, ptr %160, align 8, !tbaa !292
  %162 = tail call i32 @wireestx(i32 noundef %147, i32 noundef %153, i32 noundef %156, double noundef %161) #44
  %163 = sub nsw i32 %147, %162
  %164 = getelementptr inbounds %struct.tilebox, ptr %144, i64 0, i32 2
  %165 = load double, ptr %164, align 8, !tbaa !293
  %166 = tail call i32 @wireestx(i32 noundef %150, i32 noundef %153, i32 noundef %156, double noundef %165) #44
  %167 = add nsw i32 %166, %150
  %168 = getelementptr inbounds %struct.tilebox, ptr %144, i64 0, i32 3
  %169 = load double, ptr %168, align 8, !tbaa !294
  %170 = tail call i32 @wireesty(i32 noundef %153, i32 noundef %163, i32 noundef %167, double noundef %169) #44
  %171 = sub nsw i32 %153, %170
  %172 = getelementptr inbounds %struct.tilebox, ptr %144, i64 0, i32 4
  %173 = load double, ptr %172, align 8, !tbaa !295
  %174 = tail call i32 @wireesty(i32 noundef %156, i32 noundef %163, i32 noundef %167, double noundef %173) #44
  %175 = add nsw i32 %174, %156
  br label %176

176:                                              ; preds = %159, %135
  %177 = phi i32 [ %163, %159 ], [ %147, %135 ]
  %178 = phi i32 [ %167, %159 ], [ %150, %135 ]
  %179 = phi i32 [ %171, %159 ], [ %153, %135 ]
  %180 = phi i32 [ %175, %159 ], [ %156, %135 ]
  %181 = icmp slt i32 %177, %48
  %182 = icmp slt i32 %47, %178
  %183 = select i1 %181, i1 %182, i1 false
  %184 = icmp slt i32 %179, %50
  %185 = select i1 %183, i1 %184, i1 false
  %186 = icmp slt i32 %49, %180
  %187 = select i1 %185, i1 %186, i1 false
  br i1 %187, label %188, label %339

188:                                              ; preds = %176
  %189 = load i32, ptr %86, align 4, !tbaa !171
  %190 = icmp eq i32 %189, 1
  br i1 %190, label %191, label %210

191:                                              ; preds = %188
  %192 = getelementptr inbounds %struct.cellbox, ptr %129, i64 0, i32 6
  %193 = load i32, ptr %192, align 4, !tbaa !171
  %194 = icmp eq i32 %193, 1
  br i1 %194, label %195, label %210

195:                                              ; preds = %191
  %196 = tail call i32 @llvm.smax.i32(i32 %47, i32 %177)
  %197 = tail call i32 @llvm.smin.i32(i32 %48, i32 %178)
  %198 = tail call i32 @llvm.smax.i32(i32 %49, i32 %179)
  %199 = tail call i32 @llvm.smin.i32(i32 %50, i32 %180)
  %200 = load double, ptr @lapFactor, align 8, !tbaa !36
  %201 = sub nsw i32 %199, %198
  %202 = sub nsw i32 %197, %196
  %203 = mul nsw i32 %201, %202
  %204 = load i32, ptr @offset, align 4, !tbaa !17
  %205 = add nsw i32 %204, %203
  %206 = sitofp i32 %205 to double
  %207 = fmul double %200, %206
  %208 = fptosi double %207 to i32
  %209 = add nsw i32 %121, %208
  br label %339

210:                                              ; preds = %191, %188
  %211 = load ptr, ptr %14, align 8, !tbaa !172
  %212 = icmp eq ptr %211, null
  br i1 %212, label %339, label %213

213:                                              ; preds = %210
  %214 = load i32, ptr @numcells, align 4, !tbaa !17
  br label %221

215:                                              ; preds = %325, %257
  %216 = phi i32 [ %258, %257 ], [ %303, %325 ]
  %217 = phi i32 [ %259, %257 ], [ %304, %325 ]
  %218 = phi i32 [ %225, %257 ], [ %326, %325 ]
  %219 = load ptr, ptr %224, align 8, !tbaa !172
  %220 = icmp eq ptr %219, null
  br i1 %220, label %329, label %221, !llvm.loop !1106

221:                                              ; preds = %215, %213
  %222 = phi i32 [ %216, %215 ], [ %214, %213 ]
  %223 = phi i32 [ %217, %215 ], [ %214, %213 ]
  %224 = phi ptr [ %219, %215 ], [ %211, %213 ]
  %225 = phi i32 [ %218, %215 ], [ 0, %213 ]
  %226 = getelementptr inbounds %struct.tilebox, ptr %224, i64 0, i32 9
  %227 = load i32, ptr %226, align 8, !tbaa !167
  %228 = add nsw i32 %227, %1
  %229 = getelementptr inbounds %struct.tilebox, ptr %224, i64 0, i32 10
  %230 = load i32, ptr %229, align 4, !tbaa !168
  %231 = add nsw i32 %230, %1
  %232 = getelementptr inbounds %struct.tilebox, ptr %224, i64 0, i32 11
  %233 = load i32, ptr %232, align 8, !tbaa !169
  %234 = add nsw i32 %233, %2
  %235 = getelementptr inbounds %struct.tilebox, ptr %224, i64 0, i32 12
  %236 = load i32, ptr %235, align 4, !tbaa !170
  %237 = add nsw i32 %236, %2
  %238 = icmp slt i32 %223, %0
  br i1 %238, label %257, label %239

239:                                              ; preds = %221
  %240 = getelementptr inbounds %struct.tilebox, ptr %224, i64 0, i32 1
  %241 = load double, ptr %240, align 8, !tbaa !292
  %242 = tail call i32 @wireestx(i32 noundef %228, i32 noundef %234, i32 noundef %237, double noundef %241) #44
  %243 = sub nsw i32 %228, %242
  %244 = getelementptr inbounds %struct.tilebox, ptr %224, i64 0, i32 2
  %245 = load double, ptr %244, align 8, !tbaa !293
  %246 = tail call i32 @wireestx(i32 noundef %231, i32 noundef %234, i32 noundef %237, double noundef %245) #44
  %247 = add nsw i32 %246, %231
  %248 = getelementptr inbounds %struct.tilebox, ptr %224, i64 0, i32 3
  %249 = load double, ptr %248, align 8, !tbaa !294
  %250 = tail call i32 @wireesty(i32 noundef %234, i32 noundef %243, i32 noundef %247, double noundef %249) #44
  %251 = sub nsw i32 %234, %250
  %252 = getelementptr inbounds %struct.tilebox, ptr %224, i64 0, i32 4
  %253 = load double, ptr %252, align 8, !tbaa !295
  %254 = tail call i32 @wireesty(i32 noundef %237, i32 noundef %243, i32 noundef %247, double noundef %253) #44
  %255 = add nsw i32 %254, %237
  %256 = load i32, ptr @numcells, align 4, !tbaa !17
  br label %257

257:                                              ; preds = %239, %221
  %258 = phi i32 [ %256, %239 ], [ %222, %221 ]
  %259 = phi i32 [ %256, %239 ], [ %223, %221 ]
  %260 = phi i32 [ %243, %239 ], [ %228, %221 ]
  %261 = phi i32 [ %247, %239 ], [ %231, %221 ]
  %262 = phi i32 [ %251, %239 ], [ %234, %221 ]
  %263 = phi i32 [ %255, %239 ], [ %237, %221 ]
  %264 = load ptr, ptr %144, align 8, !tbaa !172
  %265 = icmp eq ptr %264, null
  br i1 %265, label %215, label %266

266:                                              ; preds = %325, %257
  %267 = phi i32 [ %303, %325 ], [ %258, %257 ]
  %268 = phi i32 [ %304, %325 ], [ %258, %257 ]
  %269 = phi ptr [ %327, %325 ], [ %264, %257 ]
  %270 = phi i32 [ %326, %325 ], [ %225, %257 ]
  %271 = getelementptr inbounds %struct.tilebox, ptr %269, i64 0, i32 9
  %272 = load i32, ptr %271, align 8, !tbaa !167
  %273 = add nsw i32 %272, %143
  %274 = getelementptr inbounds %struct.tilebox, ptr %269, i64 0, i32 10
  %275 = load i32, ptr %274, align 4, !tbaa !168
  %276 = add nsw i32 %275, %143
  %277 = getelementptr inbounds %struct.tilebox, ptr %269, i64 0, i32 11
  %278 = load i32, ptr %277, align 8, !tbaa !169
  %279 = add nsw i32 %278, %142
  %280 = getelementptr inbounds %struct.tilebox, ptr %269, i64 0, i32 12
  %281 = load i32, ptr %280, align 4, !tbaa !170
  %282 = add nsw i32 %281, %142
  %283 = icmp sgt i32 %123, %268
  br i1 %283, label %302, label %284

284:                                              ; preds = %266
  %285 = getelementptr inbounds %struct.tilebox, ptr %269, i64 0, i32 1
  %286 = load double, ptr %285, align 8, !tbaa !292
  %287 = tail call i32 @wireestx(i32 noundef %273, i32 noundef %279, i32 noundef %282, double noundef %286) #44
  %288 = sub nsw i32 %273, %287
  %289 = getelementptr inbounds %struct.tilebox, ptr %269, i64 0, i32 2
  %290 = load double, ptr %289, align 8, !tbaa !293
  %291 = tail call i32 @wireestx(i32 noundef %276, i32 noundef %279, i32 noundef %282, double noundef %290) #44
  %292 = add nsw i32 %291, %276
  %293 = getelementptr inbounds %struct.tilebox, ptr %269, i64 0, i32 3
  %294 = load double, ptr %293, align 8, !tbaa !294
  %295 = tail call i32 @wireesty(i32 noundef %279, i32 noundef %288, i32 noundef %292, double noundef %294) #44
  %296 = sub nsw i32 %279, %295
  %297 = getelementptr inbounds %struct.tilebox, ptr %269, i64 0, i32 4
  %298 = load double, ptr %297, align 8, !tbaa !295
  %299 = tail call i32 @wireesty(i32 noundef %282, i32 noundef %288, i32 noundef %292, double noundef %298) #44
  %300 = add nsw i32 %299, %282
  %301 = load i32, ptr @numcells, align 4, !tbaa !17
  br label %302

302:                                              ; preds = %284, %266
  %303 = phi i32 [ %301, %284 ], [ %267, %266 ]
  %304 = phi i32 [ %301, %284 ], [ %268, %266 ]
  %305 = phi i32 [ %288, %284 ], [ %273, %266 ]
  %306 = phi i32 [ %292, %284 ], [ %276, %266 ]
  %307 = phi i32 [ %296, %284 ], [ %279, %266 ]
  %308 = phi i32 [ %300, %284 ], [ %282, %266 ]
  %309 = icmp slt i32 %305, %261
  %310 = icmp slt i32 %260, %306
  %311 = select i1 %309, i1 %310, i1 false
  %312 = icmp slt i32 %307, %263
  %313 = select i1 %311, i1 %312, i1 false
  %314 = icmp slt i32 %262, %308
  %315 = select i1 %313, i1 %314, i1 false
  br i1 %315, label %316, label %325

316:                                              ; preds = %302
  %317 = tail call i32 @llvm.smax.i32(i32 %260, i32 %305)
  %318 = tail call i32 @llvm.smin.i32(i32 %261, i32 %306)
  %319 = tail call i32 @llvm.smax.i32(i32 %262, i32 %307)
  %320 = tail call i32 @llvm.smin.i32(i32 %263, i32 %308)
  %321 = sub nsw i32 %320, %319
  %322 = sub nsw i32 %318, %317
  %323 = mul nsw i32 %321, %322
  %324 = add nsw i32 %323, %270
  br label %325

325:                                              ; preds = %316, %302
  %326 = phi i32 [ %270, %302 ], [ %324, %316 ]
  %327 = load ptr, ptr %269, align 8, !tbaa !172
  %328 = icmp eq ptr %327, null
  br i1 %328, label %215, label %266, !llvm.loop !1107

329:                                              ; preds = %215
  %.lcssa = phi i32 [ %218, %215 ]
  %330 = icmp eq i32 %.lcssa, 0
  br i1 %330, label %339, label %331

331:                                              ; preds = %329
  %332 = load double, ptr @lapFactor, align 8, !tbaa !36
  %333 = load i32, ptr @offset, align 4, !tbaa !17
  %334 = add nsw i32 %333, %.lcssa
  %335 = sitofp i32 %334 to double
  %336 = fmul double %332, %335
  %337 = fptosi double %336 to i32
  %338 = add nsw i32 %121, %337
  br label %339

339:                                              ; preds = %331, %329, %210, %195, %176, %134, %119
  %340 = phi i32 [ %121, %119 ], [ %121, %176 ], [ %209, %195 ], [ %338, %331 ], [ %121, %329 ], [ %121, %134 ], [ %121, %210 ]
  %341 = add nuw nsw i64 %120, 1
  %342 = load i32, ptr %116, align 4, !tbaa !17
  %343 = sext i32 %342 to i64
  %344 = icmp slt i64 %120, %343
  br i1 %344, label %119, label %345, !llvm.loop !1108

345:                                              ; preds = %339, %111, %102
  %346 = phi i32 [ %104, %102 ], [ %104, %111 ], [ %340, %339 ]
  %347 = add nuw nsw i64 %103, 1
  %348 = icmp eq i64 %347, %92
  br i1 %348, label %349, label %102, !llvm.loop !1109

349:                                              ; preds = %345, %93
  %350 = phi i32 [ %95, %93 ], [ %346, %345 ]
  %351 = add nuw nsw i64 %94, 1
  %352 = icmp eq i64 %351, %91
  br i1 %352, label %353, label %93, !llvm.loop !1110

353:                                              ; preds = %349, %46
  %354 = phi i32 [ 0, %46 ], [ %350, %349 ]
  ret i32 %354
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @woverlapf(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6) #0 {
  %8 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %9 = sext i32 %0 to i64
  %10 = getelementptr inbounds ptr, ptr %8, i64 %9
  %11 = load ptr, ptr %10, align 8, !tbaa !7
  %12 = sext i32 %3 to i64
  %13 = getelementptr inbounds %struct.cellbox, ptr %11, i64 0, i32 21, i64 %12
  %14 = load ptr, ptr %13, align 8, !tbaa !7
  %15 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 9
  %16 = load i32, ptr %15, align 8, !tbaa !167
  %17 = add nsw i32 %16, %1
  %18 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 10
  %19 = load i32, ptr %18, align 4, !tbaa !168
  %20 = add nsw i32 %19, %1
  %21 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 11
  %22 = load i32, ptr %21, align 8, !tbaa !169
  %23 = add nsw i32 %22, %2
  %24 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 12
  %25 = load i32, ptr %24, align 4, !tbaa !170
  %26 = add nsw i32 %25, %2
  %27 = load i32, ptr @numcells, align 4, !tbaa !17
  %28 = icmp slt i32 %27, %0
  br i1 %28, label %46, label %29

29:                                               ; preds = %7
  %30 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 1
  %31 = load double, ptr %30, align 8, !tbaa !292
  %32 = tail call i32 @wireestx(i32 noundef %17, i32 noundef %23, i32 noundef %26, double noundef %31) #44
  %33 = sub nsw i32 %17, %32
  %34 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 2
  %35 = load double, ptr %34, align 8, !tbaa !293
  %36 = tail call i32 @wireestx(i32 noundef %20, i32 noundef %23, i32 noundef %26, double noundef %35) #44
  %37 = add nsw i32 %36, %20
  %38 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 3
  %39 = load double, ptr %38, align 8, !tbaa !294
  %40 = tail call i32 @wireesty(i32 noundef %23, i32 noundef %33, i32 noundef %37, double noundef %39) #44
  %41 = sub nsw i32 %23, %40
  %42 = getelementptr inbounds %struct.tilebox, ptr %14, i64 0, i32 4
  %43 = load double, ptr %42, align 8, !tbaa !295
  %44 = tail call i32 @wireesty(i32 noundef %26, i32 noundef %33, i32 noundef %37, double noundef %43) #44
  %45 = add nsw i32 %44, %26
  br label %46

46:                                               ; preds = %29, %7
  %47 = phi i32 [ %33, %29 ], [ %17, %7 ]
  %48 = phi i32 [ %37, %29 ], [ %20, %7 ]
  %49 = phi i32 [ %41, %29 ], [ %23, %7 ]
  %50 = phi i32 [ %45, %29 ], [ %26, %7 ]
  %51 = load i32, ptr @binOffsetX, align 4, !tbaa !17
  %52 = sub nsw i32 %47, %51
  %53 = load i32, ptr @binWidthX, align 4, !tbaa !17
  %54 = sdiv i32 %52, %53
  %55 = icmp slt i32 %54, 1
  %56 = load i32, ptr @numBinsX, align 4
  %57 = tail call i32 @llvm.smin.i32(i32 %54, i32 %56)
  %58 = select i1 %55, i32 1, i32 %57
  %59 = sub nsw i32 %48, %51
  %60 = sdiv i32 %59, %53
  %61 = icmp sgt i32 %60, %56
  %62 = tail call i32 @llvm.smax.i32(i32 %60, i32 1)
  %63 = select i1 %61, i32 %56, i32 %62
  %64 = load i32, ptr @binOffsetY, align 4, !tbaa !17
  %65 = sub nsw i32 %49, %64
  %66 = load i32, ptr @binWidthY, align 4, !tbaa !17
  %67 = sdiv i32 %65, %66
  %68 = icmp slt i32 %67, 1
  %69 = load i32, ptr @numBinsY, align 4
  %70 = tail call i32 @llvm.smin.i32(i32 %67, i32 %69)
  %71 = select i1 %68, i32 1, i32 %70
  %72 = sub nsw i32 %50, %64
  %73 = sdiv i32 %72, %66
  %74 = icmp sgt i32 %73, %69
  %75 = tail call i32 @llvm.smax.i32(i32 %73, i32 1)
  %76 = select i1 %74, i32 %69, i32 %75
  %77 = icmp eq i32 %58, %63
  %78 = icmp eq i32 %71, %76
  %79 = select i1 %77, i1 %78, i1 false
  %80 = select i1 %79, i32 %58, i32 0
  %81 = select i1 %79, i32 %71, i32 0
  store i32 %80, ptr @binX, align 4, !tbaa !17
  store i32 %81, ptr @binY, align 4, !tbaa !17
  %82 = icmp slt i32 %63, 0
  br i1 %82, label %357, label %83

83:                                               ; preds = %46
  %84 = icmp slt i32 %76, 0
  %85 = icmp eq i32 %5, 0
  %86 = getelementptr inbounds %struct.cellbox, ptr %11, i64 0, i32 6
  %87 = sext i32 %71 to i64
  %88 = add i32 %76, 1
  %89 = sext i32 %58 to i64
  %90 = add nuw i32 %63, 1
  %91 = zext i32 %90 to i64
  %92 = zext i32 %88 to i64
  br label %93

93:                                               ; preds = %353, %83
  %94 = phi i64 [ 0, %83 ], [ %355, %353 ]
  %95 = phi i32 [ 0, %83 ], [ %354, %353 ]
  %96 = icmp ne i64 %94, 0
  %97 = icmp slt i64 %94, %89
  %98 = and i1 %96, %97
  %99 = select i1 %98, i1 true, i1 %84
  br i1 %99, label %353, label %100

100:                                              ; preds = %93
  %101 = icmp eq i64 %94, 0
  br label %102

102:                                              ; preds = %349, %100
  %103 = phi i64 [ 0, %100 ], [ %351, %349 ]
  %104 = phi i32 [ %95, %100 ], [ %350, %349 ]
  %105 = or i64 %103, %94
  %106 = and i64 %105, 4294967295
  %107 = icmp ne i64 %106, 0
  %108 = icmp slt i64 %103, %87
  %109 = or i1 %101, %108
  %110 = select i1 %107, i1 %109, i1 false
  br i1 %110, label %349, label %111

111:                                              ; preds = %102
  %112 = load ptr, ptr @blockarray, align 8, !tbaa !7
  %113 = getelementptr inbounds ptr, ptr %112, i64 %94
  %114 = load ptr, ptr %113, align 8, !tbaa !7
  %115 = getelementptr inbounds ptr, ptr %114, i64 %103
  %116 = load ptr, ptr %115, align 8, !tbaa !7
  %117 = load i32, ptr %116, align 4, !tbaa !17
  %118 = icmp slt i32 %117, 1
  br i1 %118, label %349, label %119

119:                                              ; preds = %343, %111
  %120 = phi i64 [ %345, %343 ], [ 1, %111 ]
  %121 = phi i32 [ %344, %343 ], [ %104, %111 ]
  %122 = getelementptr inbounds i32, ptr %116, i64 %120
  %123 = load i32, ptr %122, align 4, !tbaa !17
  %124 = icmp eq i32 %123, %0
  br i1 %124, label %343, label %125

125:                                              ; preds = %119
  %126 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %127 = sext i32 %123 to i64
  %128 = getelementptr inbounds ptr, ptr %126, i64 %127
  %129 = load ptr, ptr %128, align 8, !tbaa !7
  %130 = icmp eq i32 %123, %4
  br i1 %130, label %134, label %131

131:                                              ; preds = %125
  %132 = getelementptr inbounds %struct.cellbox, ptr %129, i64 0, i32 5
  %133 = load i32, ptr %132, align 8, !tbaa !45
  br label %135

134:                                              ; preds = %125
  br i1 %85, label %135, label %343

135:                                              ; preds = %134, %131
  %136 = phi i32 [ %133, %131 ], [ %6, %134 ]
  %137 = phi ptr [ %129, %131 ], [ %11, %134 ]
  %138 = getelementptr inbounds %struct.cellbox, ptr %137, i64 0, i32 3
  %139 = getelementptr inbounds %struct.cellbox, ptr %137, i64 0, i32 2
  %140 = sext i32 %136 to i64
  %141 = getelementptr inbounds %struct.cellbox, ptr %129, i64 0, i32 21, i64 %140
  %142 = load i32, ptr %138, align 8, !tbaa !165
  %143 = load i32, ptr %139, align 4, !tbaa !164
  %144 = load ptr, ptr %141, align 8, !tbaa !7
  %145 = getelementptr inbounds %struct.tilebox, ptr %144, i64 0, i32 9
  %146 = load i32, ptr %145, align 8, !tbaa !167
  %147 = add nsw i32 %146, %143
  %148 = getelementptr inbounds %struct.tilebox, ptr %144, i64 0, i32 10
  %149 = load i32, ptr %148, align 4, !tbaa !168
  %150 = add nsw i32 %149, %143
  %151 = getelementptr inbounds %struct.tilebox, ptr %144, i64 0, i32 11
  %152 = load i32, ptr %151, align 8, !tbaa !169
  %153 = add nsw i32 %152, %142
  %154 = getelementptr inbounds %struct.tilebox, ptr %144, i64 0, i32 12
  %155 = load i32, ptr %154, align 4, !tbaa !170
  %156 = add nsw i32 %155, %142
  %157 = load i32, ptr @numcells, align 4, !tbaa !17
  %158 = icmp sgt i32 %123, %157
  br i1 %158, label %176, label %159

159:                                              ; preds = %135
  %160 = getelementptr inbounds %struct.tilebox, ptr %144, i64 0, i32 1
  %161 = load double, ptr %160, align 8, !tbaa !292
  %162 = tail call i32 @wireestx(i32 noundef %147, i32 noundef %153, i32 noundef %156, double noundef %161) #44
  %163 = sub nsw i32 %147, %162
  %164 = getelementptr inbounds %struct.tilebox, ptr %144, i64 0, i32 2
  %165 = load double, ptr %164, align 8, !tbaa !293
  %166 = tail call i32 @wireestx(i32 noundef %150, i32 noundef %153, i32 noundef %156, double noundef %165) #44
  %167 = add nsw i32 %166, %150
  %168 = getelementptr inbounds %struct.tilebox, ptr %144, i64 0, i32 3
  %169 = load double, ptr %168, align 8, !tbaa !294
  %170 = tail call i32 @wireesty(i32 noundef %153, i32 noundef %163, i32 noundef %167, double noundef %169) #44
  %171 = sub nsw i32 %153, %170
  %172 = getelementptr inbounds %struct.tilebox, ptr %144, i64 0, i32 4
  %173 = load double, ptr %172, align 8, !tbaa !295
  %174 = tail call i32 @wireesty(i32 noundef %156, i32 noundef %163, i32 noundef %167, double noundef %173) #44
  %175 = add nsw i32 %174, %156
  br label %176

176:                                              ; preds = %159, %135
  %177 = phi i32 [ %163, %159 ], [ %147, %135 ]
  %178 = phi i32 [ %167, %159 ], [ %150, %135 ]
  %179 = phi i32 [ %171, %159 ], [ %153, %135 ]
  %180 = phi i32 [ %175, %159 ], [ %156, %135 ]
  %181 = icmp slt i32 %177, %48
  %182 = icmp slt i32 %47, %178
  %183 = select i1 %181, i1 %182, i1 false
  %184 = icmp slt i32 %179, %50
  %185 = select i1 %183, i1 %184, i1 false
  %186 = icmp slt i32 %49, %180
  %187 = select i1 %185, i1 %186, i1 false
  br i1 %187, label %188, label %343

188:                                              ; preds = %176
  %189 = load i32, ptr %86, align 4, !tbaa !171
  %190 = icmp eq i32 %189, 1
  br i1 %190, label %191, label %203

191:                                              ; preds = %188
  %192 = getelementptr inbounds %struct.cellbox, ptr %129, i64 0, i32 6
  %193 = load i32, ptr %192, align 4, !tbaa !171
  %194 = icmp eq i32 %193, 1
  br i1 %194, label %195, label %203

195:                                              ; preds = %191
  %196 = tail call i32 @llvm.smax.i32(i32 %47, i32 %177)
  %197 = tail call i32 @llvm.smin.i32(i32 %48, i32 %178)
  %198 = tail call i32 @llvm.smax.i32(i32 %49, i32 %179)
  %199 = tail call i32 @llvm.smin.i32(i32 %50, i32 %180)
  %200 = sub nsw i32 %199, %198
  %201 = sub nsw i32 %197, %196
  %202 = mul nsw i32 %200, %201
  br label %324

203:                                              ; preds = %191, %188
  %204 = load ptr, ptr %14, align 8, !tbaa !172
  %205 = icmp eq ptr %204, null
  br i1 %205, label %343, label %206

206:                                              ; preds = %203
  %207 = load i32, ptr @numcells, align 4, !tbaa !17
  br label %214

208:                                              ; preds = %318, %250
  %209 = phi i32 [ %251, %250 ], [ %296, %318 ]
  %210 = phi i32 [ %252, %250 ], [ %297, %318 ]
  %211 = phi i32 [ %218, %250 ], [ %319, %318 ]
  %212 = load ptr, ptr %217, align 8, !tbaa !172
  %213 = icmp eq ptr %212, null
  br i1 %213, label %322, label %214, !llvm.loop !1111

214:                                              ; preds = %208, %206
  %215 = phi i32 [ %209, %208 ], [ %207, %206 ]
  %216 = phi i32 [ %210, %208 ], [ %207, %206 ]
  %217 = phi ptr [ %212, %208 ], [ %204, %206 ]
  %218 = phi i32 [ %211, %208 ], [ 0, %206 ]
  %219 = getelementptr inbounds %struct.tilebox, ptr %217, i64 0, i32 9
  %220 = load i32, ptr %219, align 8, !tbaa !167
  %221 = add nsw i32 %220, %1
  %222 = getelementptr inbounds %struct.tilebox, ptr %217, i64 0, i32 10
  %223 = load i32, ptr %222, align 4, !tbaa !168
  %224 = add nsw i32 %223, %1
  %225 = getelementptr inbounds %struct.tilebox, ptr %217, i64 0, i32 11
  %226 = load i32, ptr %225, align 8, !tbaa !169
  %227 = add nsw i32 %226, %2
  %228 = getelementptr inbounds %struct.tilebox, ptr %217, i64 0, i32 12
  %229 = load i32, ptr %228, align 4, !tbaa !170
  %230 = add nsw i32 %229, %2
  %231 = icmp slt i32 %216, %0
  br i1 %231, label %250, label %232

232:                                              ; preds = %214
  %233 = getelementptr inbounds %struct.tilebox, ptr %217, i64 0, i32 1
  %234 = load double, ptr %233, align 8, !tbaa !292
  %235 = tail call i32 @wireestx(i32 noundef %221, i32 noundef %227, i32 noundef %230, double noundef %234) #44
  %236 = sub nsw i32 %221, %235
  %237 = getelementptr inbounds %struct.tilebox, ptr %217, i64 0, i32 2
  %238 = load double, ptr %237, align 8, !tbaa !293
  %239 = tail call i32 @wireestx(i32 noundef %224, i32 noundef %227, i32 noundef %230, double noundef %238) #44
  %240 = add nsw i32 %239, %224
  %241 = getelementptr inbounds %struct.tilebox, ptr %217, i64 0, i32 3
  %242 = load double, ptr %241, align 8, !tbaa !294
  %243 = tail call i32 @wireesty(i32 noundef %227, i32 noundef %236, i32 noundef %240, double noundef %242) #44
  %244 = sub nsw i32 %227, %243
  %245 = getelementptr inbounds %struct.tilebox, ptr %217, i64 0, i32 4
  %246 = load double, ptr %245, align 8, !tbaa !295
  %247 = tail call i32 @wireesty(i32 noundef %230, i32 noundef %236, i32 noundef %240, double noundef %246) #44
  %248 = add nsw i32 %247, %230
  %249 = load i32, ptr @numcells, align 4, !tbaa !17
  br label %250

250:                                              ; preds = %232, %214
  %251 = phi i32 [ %249, %232 ], [ %215, %214 ]
  %252 = phi i32 [ %249, %232 ], [ %216, %214 ]
  %253 = phi i32 [ %236, %232 ], [ %221, %214 ]
  %254 = phi i32 [ %240, %232 ], [ %224, %214 ]
  %255 = phi i32 [ %244, %232 ], [ %227, %214 ]
  %256 = phi i32 [ %248, %232 ], [ %230, %214 ]
  %257 = load ptr, ptr %144, align 8, !tbaa !172
  %258 = icmp eq ptr %257, null
  br i1 %258, label %208, label %259

259:                                              ; preds = %318, %250
  %260 = phi i32 [ %296, %318 ], [ %251, %250 ]
  %261 = phi i32 [ %297, %318 ], [ %251, %250 ]
  %262 = phi ptr [ %320, %318 ], [ %257, %250 ]
  %263 = phi i32 [ %319, %318 ], [ %218, %250 ]
  %264 = getelementptr inbounds %struct.tilebox, ptr %262, i64 0, i32 9
  %265 = load i32, ptr %264, align 8, !tbaa !167
  %266 = add nsw i32 %265, %143
  %267 = getelementptr inbounds %struct.tilebox, ptr %262, i64 0, i32 10
  %268 = load i32, ptr %267, align 4, !tbaa !168
  %269 = add nsw i32 %268, %143
  %270 = getelementptr inbounds %struct.tilebox, ptr %262, i64 0, i32 11
  %271 = load i32, ptr %270, align 8, !tbaa !169
  %272 = add nsw i32 %271, %142
  %273 = getelementptr inbounds %struct.tilebox, ptr %262, i64 0, i32 12
  %274 = load i32, ptr %273, align 4, !tbaa !170
  %275 = add nsw i32 %274, %142
  %276 = icmp sgt i32 %123, %261
  br i1 %276, label %295, label %277

277:                                              ; preds = %259
  %278 = getelementptr inbounds %struct.tilebox, ptr %262, i64 0, i32 1
  %279 = load double, ptr %278, align 8, !tbaa !292
  %280 = tail call i32 @wireestx(i32 noundef %266, i32 noundef %272, i32 noundef %275, double noundef %279) #44
  %281 = sub nsw i32 %266, %280
  %282 = getelementptr inbounds %struct.tilebox, ptr %262, i64 0, i32 2
  %283 = load double, ptr %282, align 8, !tbaa !293
  %284 = tail call i32 @wireestx(i32 noundef %269, i32 noundef %272, i32 noundef %275, double noundef %283) #44
  %285 = add nsw i32 %284, %269
  %286 = getelementptr inbounds %struct.tilebox, ptr %262, i64 0, i32 3
  %287 = load double, ptr %286, align 8, !tbaa !294
  %288 = tail call i32 @wireesty(i32 noundef %272, i32 noundef %281, i32 noundef %285, double noundef %287) #44
  %289 = sub nsw i32 %272, %288
  %290 = getelementptr inbounds %struct.tilebox, ptr %262, i64 0, i32 4
  %291 = load double, ptr %290, align 8, !tbaa !295
  %292 = tail call i32 @wireesty(i32 noundef %275, i32 noundef %281, i32 noundef %285, double noundef %291) #44
  %293 = add nsw i32 %292, %275
  %294 = load i32, ptr @numcells, align 4, !tbaa !17
  br label %295

295:                                              ; preds = %277, %259
  %296 = phi i32 [ %294, %277 ], [ %260, %259 ]
  %297 = phi i32 [ %294, %277 ], [ %261, %259 ]
  %298 = phi i32 [ %281, %277 ], [ %266, %259 ]
  %299 = phi i32 [ %285, %277 ], [ %269, %259 ]
  %300 = phi i32 [ %289, %277 ], [ %272, %259 ]
  %301 = phi i32 [ %293, %277 ], [ %275, %259 ]
  %302 = icmp slt i32 %298, %254
  %303 = icmp slt i32 %253, %299
  %304 = select i1 %302, i1 %303, i1 false
  %305 = icmp slt i32 %300, %256
  %306 = select i1 %304, i1 %305, i1 false
  %307 = icmp slt i32 %255, %301
  %308 = select i1 %306, i1 %307, i1 false
  br i1 %308, label %309, label %318

309:                                              ; preds = %295
  %310 = tail call i32 @llvm.smax.i32(i32 %253, i32 %298)
  %311 = tail call i32 @llvm.smin.i32(i32 %254, i32 %299)
  %312 = tail call i32 @llvm.smax.i32(i32 %255, i32 %300)
  %313 = tail call i32 @llvm.smin.i32(i32 %256, i32 %301)
  %314 = sub nsw i32 %313, %312
  %315 = sub nsw i32 %311, %310
  %316 = mul nsw i32 %314, %315
  %317 = add nsw i32 %316, %263
  br label %318

318:                                              ; preds = %309, %295
  %319 = phi i32 [ %263, %295 ], [ %317, %309 ]
  %320 = load ptr, ptr %262, align 8, !tbaa !172
  %321 = icmp eq ptr %320, null
  br i1 %321, label %208, label %259, !llvm.loop !1112

322:                                              ; preds = %208
  %.lcssa = phi i32 [ %211, %208 ]
  %323 = icmp eq i32 %.lcssa, 0
  br i1 %323, label %343, label %324

324:                                              ; preds = %322, %195
  %325 = phi i32 [ %202, %195 ], [ %.lcssa, %322 ]
  %326 = load double, ptr @lapFactor, align 8, !tbaa !36
  %327 = load i32, ptr @offset, align 4, !tbaa !17
  %328 = add nsw i32 %327, %325
  %329 = sitofp i32 %328 to double
  %330 = fmul double %326, %329
  %331 = fptosi double %330 to i32
  %332 = add nsw i32 %121, %331
  %333 = load ptr, ptr @fpo, align 8, !tbaa !7
  %334 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %333, ptr noundef nonnull @.str.968, i32 noundef %0, i32 noundef %123) #43
  %335 = load ptr, ptr @fpo, align 8, !tbaa !7
  %336 = load double, ptr @lapFactor, align 8, !tbaa !36
  %337 = load i32, ptr @offset, align 4, !tbaa !17
  %338 = add nsw i32 %337, %325
  %339 = sitofp i32 %338 to double
  %340 = fmul double %336, %339
  %341 = fptosi double %340 to i32
  %342 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %335, ptr noundef nonnull @.str.1.969, i32 noundef %341, i32 noundef %325) #43
  br label %343

343:                                              ; preds = %324, %322, %203, %176, %134, %119
  %344 = phi i32 [ %121, %119 ], [ %121, %176 ], [ %121, %322 ], [ %121, %134 ], [ %121, %203 ], [ %332, %324 ]
  %345 = add nuw nsw i64 %120, 1
  %346 = load i32, ptr %116, align 4, !tbaa !17
  %347 = sext i32 %346 to i64
  %348 = icmp slt i64 %120, %347
  br i1 %348, label %119, label %349, !llvm.loop !1113

349:                                              ; preds = %343, %111, %102
  %350 = phi i32 [ %104, %102 ], [ %104, %111 ], [ %344, %343 ]
  %351 = add nuw nsw i64 %103, 1
  %352 = icmp eq i64 %351, %92
  br i1 %352, label %353, label %102, !llvm.loop !1114

353:                                              ; preds = %349, %93
  %354 = phi i32 [ %95, %93 ], [ %350, %349 ]
  %355 = add nuw nsw i64 %94, 1
  %356 = icmp eq i64 %355, %91
  br i1 %356, label %357, label %93, !llvm.loop !1115

357:                                              ; preds = %353, %46
  %358 = phi i32 [ 0, %46 ], [ %354, %353 ]
  ret i32 %358
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @woverlapx(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, double noundef %5) #0 {
  %7 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %8 = sext i32 %0 to i64
  %9 = getelementptr inbounds ptr, ptr %7, i64 %8
  %10 = load ptr, ptr %9, align 8, !tbaa !7
  %11 = getelementptr inbounds %struct.cellbox, ptr %10, i64 0, i32 5
  %12 = load i32, ptr %11, align 8, !tbaa !45
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds %struct.cellbox, ptr %10, i64 0, i32 21, i64 %13
  %15 = load ptr, ptr %14, align 8, !tbaa !7
  %16 = getelementptr inbounds %struct.cellbox, ptr %10, i64 0, i32 2
  %17 = load i32, ptr %16, align 4, !tbaa !164
  %18 = sub i32 %17, %3
  %19 = getelementptr inbounds %struct.tilebox, ptr %15, i64 0, i32 14
  %20 = load i32, ptr %19, align 4, !tbaa !383
  %21 = sub nsw i32 %20, %1
  %22 = sitofp i32 %21 to double
  %23 = fdiv double %22, %5
  %24 = fptosi double %23 to i32
  %25 = sitofp i32 %24 to double
  %26 = fsub double %23, %25
  %27 = fcmp oge double %26, 5.000000e-01
  %28 = zext i1 %27 to i32
  %29 = add i32 %18, %24
  %30 = add i32 %29, %28
  %31 = getelementptr inbounds %struct.cellbox, ptr %10, i64 0, i32 3
  %32 = load i32, ptr %31, align 8, !tbaa !165
  %33 = sub i32 %32, %4
  %34 = getelementptr inbounds %struct.tilebox, ptr %15, i64 0, i32 16
  %35 = load i32, ptr %34, align 4, !tbaa !394
  %36 = sub nsw i32 %35, %2
  %37 = sitofp i32 %36 to double
  %38 = fmul double %37, %5
  %39 = fptosi double %38 to i32
  %40 = sitofp i32 %39 to double
  %41 = fsub double %38, %40
  %42 = fcmp oge double %41, 5.000000e-01
  %43 = zext i1 %42 to i32
  %44 = add i32 %33, %39
  %45 = add i32 %44, %43
  %46 = getelementptr inbounds %struct.tilebox, ptr %15, i64 0, i32 1
  %47 = load double, ptr %46, align 8, !tbaa !292
  %48 = tail call i32 @wireestx(i32 noundef %18, i32 noundef %33, i32 noundef %45, double noundef %47) #44
  %49 = sub nsw i32 %18, %48
  %50 = getelementptr inbounds %struct.tilebox, ptr %15, i64 0, i32 2
  %51 = load double, ptr %50, align 8, !tbaa !293
  %52 = tail call i32 @wireestx(i32 noundef %30, i32 noundef %33, i32 noundef %45, double noundef %51) #44
  %53 = add nsw i32 %30, %52
  %54 = getelementptr inbounds %struct.tilebox, ptr %15, i64 0, i32 3
  %55 = load double, ptr %54, align 8, !tbaa !294
  %56 = tail call i32 @wireesty(i32 noundef %33, i32 noundef %49, i32 noundef %53, double noundef %55) #44
  %57 = sub nsw i32 %33, %56
  %58 = getelementptr inbounds %struct.tilebox, ptr %15, i64 0, i32 4
  %59 = load double, ptr %58, align 8, !tbaa !295
  %60 = tail call i32 @wireesty(i32 noundef %45, i32 noundef %49, i32 noundef %53, double noundef %59) #44
  %61 = add nsw i32 %45, %60
  %62 = load i32, ptr @binOffsetX, align 4, !tbaa !17
  %63 = sub nsw i32 %49, %62
  %64 = load i32, ptr @binWidthX, align 4, !tbaa !17
  %65 = sdiv i32 %63, %64
  %66 = icmp slt i32 %65, 1
  %67 = load i32, ptr @numBinsX, align 4
  %68 = tail call i32 @llvm.smin.i32(i32 %65, i32 %67)
  %69 = select i1 %66, i32 1, i32 %68
  %70 = sub nsw i32 %53, %62
  %71 = sdiv i32 %70, %64
  %72 = icmp sgt i32 %71, %67
  %73 = tail call i32 @llvm.smax.i32(i32 %71, i32 1)
  %74 = select i1 %72, i32 %67, i32 %73
  %75 = load i32, ptr @binOffsetY, align 4, !tbaa !17
  %76 = sub nsw i32 %57, %75
  %77 = load i32, ptr @binWidthY, align 4, !tbaa !17
  %78 = sdiv i32 %76, %77
  %79 = icmp slt i32 %78, 1
  %80 = load i32, ptr @numBinsY, align 4
  %81 = tail call i32 @llvm.smin.i32(i32 %78, i32 %80)
  %82 = select i1 %79, i32 1, i32 %81
  %83 = sub nsw i32 %61, %75
  %84 = sdiv i32 %83, %77
  %85 = icmp sgt i32 %84, %80
  %86 = tail call i32 @llvm.smax.i32(i32 %84, i32 1)
  %87 = select i1 %85, i32 %80, i32 %86
  %88 = icmp eq i32 %69, %74
  %89 = icmp eq i32 %82, %87
  %90 = select i1 %88, i1 %89, i1 false
  %91 = select i1 %90, i32 %69, i32 0
  %92 = select i1 %90, i32 %82, i32 0
  store i32 %91, ptr @binX, align 4, !tbaa !17
  store i32 %92, ptr @binY, align 4, !tbaa !17
  %93 = icmp slt i32 %74, 0
  br i1 %93, label %381, label %94

94:                                               ; preds = %6
  %95 = icmp slt i32 %87, 0
  %96 = getelementptr inbounds %struct.cellbox, ptr %10, i64 0, i32 6
  %97 = sext i32 %82 to i64
  %98 = add i32 %87, 1
  %99 = sext i32 %69 to i64
  %100 = add nuw i32 %74, 1
  %101 = zext i32 %100 to i64
  %102 = zext i32 %98 to i64
  br label %103

103:                                              ; preds = %377, %94
  %104 = phi i64 [ 0, %94 ], [ %379, %377 ]
  %105 = phi i32 [ 0, %94 ], [ %378, %377 ]
  %106 = icmp ne i64 %104, 0
  %107 = icmp slt i64 %104, %99
  %108 = and i1 %106, %107
  %109 = select i1 %108, i1 true, i1 %95
  br i1 %109, label %377, label %110

110:                                              ; preds = %103
  %111 = icmp eq i64 %104, 0
  br label %112

112:                                              ; preds = %373, %110
  %113 = phi i64 [ 0, %110 ], [ %375, %373 ]
  %114 = phi i32 [ %105, %110 ], [ %374, %373 ]
  %115 = or i64 %113, %104
  %116 = and i64 %115, 4294967295
  %117 = icmp ne i64 %116, 0
  %118 = icmp slt i64 %113, %97
  %119 = or i1 %111, %118
  %120 = select i1 %117, i1 %119, i1 false
  br i1 %120, label %373, label %121

121:                                              ; preds = %112
  %122 = load ptr, ptr @blockarray, align 8, !tbaa !7
  %123 = getelementptr inbounds ptr, ptr %122, i64 %104
  %124 = load ptr, ptr %123, align 8, !tbaa !7
  %125 = getelementptr inbounds ptr, ptr %124, i64 %113
  %126 = load ptr, ptr %125, align 8, !tbaa !7
  %127 = load i32, ptr %126, align 4, !tbaa !17
  %128 = icmp slt i32 %127, 1
  br i1 %128, label %373, label %129

129:                                              ; preds = %367, %121
  %130 = phi i64 [ %369, %367 ], [ 1, %121 ]
  %131 = phi i32 [ %368, %367 ], [ %114, %121 ]
  %132 = getelementptr inbounds i32, ptr %126, i64 %130
  %133 = load i32, ptr %132, align 4, !tbaa !17
  %134 = icmp eq i32 %133, %0
  br i1 %134, label %367, label %135

135:                                              ; preds = %129
  %136 = load ptr, ptr @cellarray, align 8, !tbaa !7
  %137 = sext i32 %133 to i64
  %138 = getelementptr inbounds ptr, ptr %136, i64 %137
  %139 = load ptr, ptr %138, align 8, !tbaa !7
  %140 = getelementptr inbounds %struct.cellbox, ptr %139, i64 0, i32 5
  %141 = load i32, ptr %140, align 8, !tbaa !45
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds %struct.cellbox, ptr %139, i64 0, i32 21, i64 %142
  %144 = load ptr, ptr %143, align 8, !tbaa !7
  %145 = getelementptr inbounds %struct.cellbox, ptr %139, i64 0, i32 2
  %146 = load i32, ptr %145, align 4, !tbaa !164
  %147 = getelementptr inbounds %struct.cellbox, ptr %139, i64 0, i32 3
  %148 = load i32, ptr %147, align 8, !tbaa !165
  %149 = getelementptr inbounds %struct.tilebox, ptr %144, i64 0, i32 9
  %150 = load i32, ptr %149, align 8, !tbaa !167
  %151 = add nsw i32 %150, %146
  %152 = getelementptr inbounds %struct.tilebox, ptr %144, i64 0, i32 10
  %153 = load i32, ptr %152, align 4, !tbaa !168
  %154 = add nsw i32 %153, %146
  %155 = getelementptr inbounds %struct.tilebox, ptr %144, i64 0, i32 11
  %156 = load i32, ptr %155, align 8, !tbaa !169
  %157 = add nsw i32 %156, %148
  %158 = getelementptr inbounds %struct.tilebox, ptr %144, i64 0, i32 12
  %159 = load i32, ptr %158, align 4, !tbaa !170
  %160 = add nsw i32 %159, %148
  %161 = load i32, ptr @numcells, align 4, !tbaa !17
  %162 = icmp sgt i32 %133, %161
  br i1 %162, label %180, label %163

163:                                              ; preds = %135
  %164 = getelementptr inbounds %struct.tilebox, ptr %144, i64 0, i32 1
  %165 = load double, ptr %164, align 8, !tbaa !292
  %166 = tail call i32 @wireestx(i32 noundef %151, i32 noundef %157, i32 noundef %160, double noundef %165) #44
  %167 = sub nsw i32 %151, %166
  %168 = getelementptr inbounds %struct.tilebox, ptr %144, i64 0, i32 2
  %169 = load double, ptr %168, align 8, !tbaa !293
  %170 = tail call i32 @wireestx(i32 noundef %154, i32 noundef %157, i32 noundef %160, double noundef %169) #44
  %171 = add nsw i32 %170, %154
  %172 = getelementptr inbounds %struct.tilebox, ptr %144, i64 0, i32 3
  %173 = load double, ptr %172, align 8, !tbaa !294
  %174 = tail call i32 @wireesty(i32 noundef %157, i32 noundef %167, i32 noundef %171, double noundef %173) #44
  %175 = sub nsw i32 %157, %174
  %176 = getelementptr inbounds %struct.tilebox, ptr %144, i64 0, i32 4
  %177 = load double, ptr %176, align 8, !tbaa !295
  %178 = tail call i32 @wireesty(i32 noundef %160, i32 noundef %167, i32 noundef %171, double noundef %177) #44
  %179 = add nsw i32 %178, %160
  br label %180

180:                                              ; preds = %163, %135
  %181 = phi i32 [ %167, %163 ], [ %151, %135 ]
  %182 = phi i32 [ %171, %163 ], [ %154, %135 ]
  %183 = phi i32 [ %175, %163 ], [ %157, %135 ]
  %184 = phi i32 [ %179, %163 ], [ %160, %135 ]
  %185 = icmp slt i32 %181, %53
  %186 = icmp slt i32 %49, %182
  %187 = select i1 %185, i1 %186, i1 false
  %188 = icmp slt i32 %183, %61
  %189 = select i1 %187, i1 %188, i1 false
  %190 = icmp slt i32 %57, %184
  %191 = select i1 %189, i1 %190, i1 false
  br i1 %191, label %192, label %367

192:                                              ; preds = %180
  %193 = load i32, ptr %96, align 4, !tbaa !171
  %194 = icmp eq i32 %193, 1
  br i1 %194, label %195, label %214

195:                                              ; preds = %192
  %196 = getelementptr inbounds %struct.cellbox, ptr %139, i64 0, i32 6
  %197 = load i32, ptr %196, align 4, !tbaa !171
  %198 = icmp eq i32 %197, 1
  br i1 %198, label %199, label %214

199:                                              ; preds = %195
  %200 = tail call i32 @llvm.smax.i32(i32 %49, i32 %181)
  %201 = tail call i32 @llvm.smin.i32(i32 %53, i32 %182)
  %202 = tail call i32 @llvm.smax.i32(i32 %57, i32 %183)
  %203 = tail call i32 @llvm.smin.i32(i32 %61, i32 %184)
  %204 = load double, ptr @lapFactor, align 8, !tbaa !36
  %205 = sub nsw i32 %203, %202
  %206 = sub nsw i32 %201, %200
  %207 = mul nsw i32 %205, %206
  %208 = load i32, ptr @offset, align 4, !tbaa !17
  %209 = add nsw i32 %208, %207
  %210 = sitofp i32 %209 to double
  %211 = fmul double %204, %210
  %212 = fptosi double %211 to i32
  %213 = add nsw i32 %131, %212
  br label %367

214:                                              ; preds = %195, %192
  %215 = load ptr, ptr %15, align 8, !tbaa !172
  %216 = icmp eq ptr %215, null
  br i1 %216, label %367, label %221

217:                                              ; preds = %353, %221
  %218 = phi i32 [ %223, %221 ], [ %354, %353 ]
  %219 = load ptr, ptr %222, align 8, !tbaa !172
  %220 = icmp eq ptr %219, null
  br i1 %220, label %357, label %221, !llvm.loop !1116

221:                                              ; preds = %217, %214
  %222 = phi ptr [ %219, %217 ], [ %215, %214 ]
  %223 = phi i32 [ %218, %217 ], [ 0, %214 ]
  %224 = getelementptr inbounds %struct.tilebox, ptr %222, i64 0, i32 13
  %225 = load i32, ptr %224, align 8, !tbaa !382
  %226 = sub nsw i32 %225, %1
  %227 = sitofp i32 %226 to double
  %228 = fdiv double %227, %5
  %229 = load i32, ptr %16, align 4, !tbaa !164
  %230 = fptosi double %228 to i32
  %231 = sitofp i32 %230 to double
  %232 = fsub double %228, %231
  %233 = fcmp oge double %232, 5.000000e-01
  %234 = zext i1 %233 to i32
  %235 = sub i32 %229, %3
  %236 = add i32 %235, %230
  %237 = add i32 %236, %234
  %238 = getelementptr inbounds %struct.tilebox, ptr %222, i64 0, i32 14
  %239 = load i32, ptr %238, align 4, !tbaa !383
  %240 = sub nsw i32 %239, %1
  %241 = sitofp i32 %240 to double
  %242 = fdiv double %241, %5
  %243 = fptosi double %242 to i32
  %244 = sitofp i32 %243 to double
  %245 = fsub double %242, %244
  %246 = fcmp oge double %245, 5.000000e-01
  %247 = zext i1 %246 to i32
  %248 = add i32 %235, %243
  %249 = add i32 %248, %247
  %250 = getelementptr inbounds %struct.tilebox, ptr %222, i64 0, i32 15
  %251 = load i32, ptr %250, align 8, !tbaa !393
  %252 = sub nsw i32 %251, %2
  %253 = sitofp i32 %252 to double
  %254 = fmul double %253, %5
  %255 = load i32, ptr %31, align 8, !tbaa !165
  %256 = fptosi double %254 to i32
  %257 = sitofp i32 %256 to double
  %258 = fsub double %254, %257
  %259 = fcmp oge double %258, 5.000000e-01
  %260 = zext i1 %259 to i32
  %261 = sub i32 %255, %4
  %262 = add i32 %261, %256
  %263 = add i32 %262, %260
  %264 = getelementptr inbounds %struct.tilebox, ptr %222, i64 0, i32 16
  %265 = load i32, ptr %264, align 4, !tbaa !394
  %266 = sub nsw i32 %265, %2
  %267 = sitofp i32 %266 to double
  %268 = fmul double %267, %5
  %269 = fptosi double %268 to i32
  %270 = sitofp i32 %269 to double
  %271 = fsub double %268, %270
  %272 = fcmp oge double %271, 5.000000e-01
  %273 = zext i1 %272 to i32
  %274 = add i32 %261, %269
  %275 = add i32 %274, %273
  %276 = getelementptr inbounds %struct.tilebox, ptr %222, i64 0, i32 1
  %277 = load double, ptr %276, align 8, !tbaa !292
  %278 = tail call i32 @wireestx(i32 noundef %237, i32 noundef %263, i32 noundef %275, double noundef %277) #44
  %279 = sub nsw i32 %237, %278
  %280 = getelementptr inbounds %struct.tilebox, ptr %222, i64 0, i32 2
  %281 = load double, ptr %280, align 8, !tbaa !293
  %282 = tail call i32 @wireestx(i32 noundef %249, i32 noundef %263, i32 noundef %275, double noundef %281) #44
  %283 = add nsw i32 %249, %282
  %284 = getelementptr inbounds %struct.tilebox, ptr %222, i64 0, i32 3
  %285 = load double, ptr %284, align 8, !tbaa !294
  %286 = tail call i32 @wireesty(i32 noundef %263, i32 noundef %279, i32 noundef %283, double noundef %285) #44
  %287 = sub nsw i32 %263, %286
  %288 = getelementptr inbounds %struct.tilebox, ptr %222, i64 0, i32 4
  %289 = load double, ptr %288, align 8, !tbaa !295
  %290 = tail call i32 @wireesty(i32 noundef %275, i32 noundef %279, i32 noundef %283, double noundef %289) #44
  %291 = add nsw i32 %275, %290
  %292 = load ptr, ptr %144, align 8, !tbaa !172
  %293 = icmp eq ptr %292, null
  br i1 %293, label %217, label %294

294:                                              ; preds = %221
  %295 = load i32, ptr @numcells, align 4, !tbaa !17
  br label %296

296:                                              ; preds = %353, %294
  %297 = phi i32 [ %332, %353 ], [ %295, %294 ]
  %298 = phi ptr [ %355, %353 ], [ %292, %294 ]
  %299 = phi i32 [ %354, %353 ], [ %223, %294 ]
  %300 = getelementptr inbounds %struct.tilebox, ptr %298, i64 0, i32 9
  %301 = load i32, ptr %300, align 8, !tbaa !167
  %302 = add nsw i32 %301, %146
  %303 = getelementptr inbounds %struct.tilebox, ptr %298, i64 0, i32 10
  %304 = load i32, ptr %303, align 4, !tbaa !168
  %305 = add nsw i32 %304, %146
  %306 = getelementptr inbounds %struct.tilebox, ptr %298, i64 0, i32 11
  %307 = load i32, ptr %306, align 8, !tbaa !169
  %308 = add nsw i32 %307, %148
  %309 = getelementptr inbounds %struct.tilebox, ptr %298, i64 0, i32 12
  %310 = load i32, ptr %309, align 4, !tbaa !170
  %311 = add nsw i32 %310, %148
  %312 = icmp sgt i32 %133, %297
  br i1 %312, label %331, label %313

313:                                              ; preds = %296
  %314 = getelementptr inbounds %struct.tilebox, ptr %298, i64 0, i32 1
  %315 = load double, ptr %314, align 8, !tbaa !292
  %316 = tail call i32 @wireestx(i32 noundef %302, i32 noundef %308, i32 noundef %311, double noundef %315) #44
  %317 = sub nsw i32 %302, %316
  %318 = getelementptr inbounds %struct.tilebox, ptr %298, i64 0, i32 2
  %319 = load double, ptr %318, align 8, !tbaa !293
  %320 = tail call i32 @wireestx(i32 noundef %305, i32 noundef %308, i32 noundef %311, double noundef %319) #44
  %321 = add nsw i32 %320, %305
  %322 = getelementptr inbounds %struct.tilebox, ptr %298, i64 0, i32 3
  %323 = load double, ptr %322, align 8, !tbaa !294
  %324 = tail call i32 @wireesty(i32 noundef %308, i32 noundef %317, i32 noundef %321, double noundef %323) #44
  %325 = sub nsw i32 %308, %324
  %326 = getelementptr inbounds %struct.tilebox, ptr %298, i64 0, i32 4
  %327 = load double, ptr %326, align 8, !tbaa !295
  %328 = tail call i32 @wireesty(i32 noundef %311, i32 noundef %317, i32 noundef %321, double noundef %327) #44
  %329 = add nsw i32 %328, %311
  %330 = load i32, ptr @numcells, align 4, !tbaa !17
  br label %331

331:                                              ; preds = %313, %296
  %332 = phi i32 [ %330, %313 ], [ %297, %296 ]
  %333 = phi i32 [ %317, %313 ], [ %302, %296 ]
  %334 = phi i32 [ %321, %313 ], [ %305, %296 ]
  %335 = phi i32 [ %325, %313 ], [ %308, %296 ]
  %336 = phi i32 [ %329, %313 ], [ %311, %296 ]
  %337 = icmp slt i32 %333, %283
  %338 = icmp slt i32 %279, %334
  %339 = select i1 %337, i1 %338, i1 false
  %340 = icmp slt i32 %335, %291
  %341 = select i1 %339, i1 %340, i1 false
  %342 = icmp slt i32 %287, %336
  %343 = select i1 %341, i1 %342, i1 false
  br i1 %343, label %344, label %353

344:                                              ; preds = %331
  %345 = tail call i32 @llvm.smax.i32(i32 %279, i32 %333)
  %346 = tail call i32 @llvm.smin.i32(i32 %283, i32 %334)
  %347 = tail call i32 @llvm.smax.i32(i32 %287, i32 %335)
  %348 = tail call i32 @llvm.smin.i32(i32 %291, i32 %336)
  %349 = sub nsw i32 %348, %347
  %350 = sub nsw i32 %346, %345
  %351 = mul nsw i32 %349, %350
  %352 = add nsw i32 %351, %299
  br label %353

353:                                              ; preds = %344, %331
  %354 = phi i32 [ %299, %331 ], [ %352, %344 ]
  %355 = load ptr, ptr %298, align 8, !tbaa !172
  %356 = icmp eq ptr %355, null
  br i1 %356, label %217, label %296, !llvm.loop !1117

357:                                              ; preds = %217
  %.lcssa = phi i32 [ %218, %217 ]
  %358 = icmp eq i32 %.lcssa, 0
  br i1 %358, label %367, label %359

359:                                              ; preds = %357
  %360 = load double, ptr @lapFactor, align 8, !tbaa !36
  %361 = load i32, ptr @offset, align 4, !tbaa !17
  %362 = add nsw i32 %361, %.lcssa
  %363 = sitofp i32 %362 to double
  %364 = fmul double %360, %363
  %365 = fptosi double %364 to i32
  %366 = add nsw i32 %131, %365
  br label %367

367:                                              ; preds = %359, %357, %214, %199, %180, %129
  %368 = phi i32 [ %131, %129 ], [ %131, %180 ], [ %213, %199 ], [ %366, %359 ], [ %131, %357 ], [ %131, %214 ]
  %369 = add nuw nsw i64 %130, 1
  %370 = load i32, ptr %126, align 4, !tbaa !17
  %371 = sext i32 %370 to i64
  %372 = icmp slt i64 %130, %371
  br i1 %372, label %129, label %373, !llvm.loop !1118

373:                                              ; preds = %367, %121, %112
  %374 = phi i32 [ %114, %112 ], [ %114, %121 ], [ %368, %367 ]
  %375 = add nuw nsw i64 %113, 1
  %376 = icmp eq i64 %375, %102
  br i1 %376, label %377, label %112, !llvm.loop !1119

377:                                              ; preds = %373, %103
  %378 = phi i32 [ %105, %103 ], [ %374, %373 ]
  %379 = add nuw nsw i64 %104, 1
  %380 = icmp eq i64 %379, %101
  br i1 %380, label %381, label %103, !llvm.loop !1120

381:                                              ; preds = %377, %6
  %382 = phi i32 [ 0, %6 ], [ %378, %377 ]
  ret i32 %382
}

; Function Attrs: nounwind optsize uwtable
define internal void @xgraph() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #47
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #47
  %4 = load i32, ptr @numberCells, align 4, !tbaa !17
  %5 = add nsw i32 %4, 2
  %6 = sext i32 %5 to i64
  %7 = mul nsw i64 %6, 24
  %8 = tail call noalias ptr @malloc(i64 noundef %7) #45
  store ptr %8, ptr @xNodules, align 8, !tbaa !7
  %9 = icmp slt i32 %4, -1
  br i1 %9, label %22, label %10

10:                                               ; preds = %10, %0
  %11 = phi ptr [ %16, %10 ], [ %8, %0 ]
  %12 = phi i64 [ %18, %10 ], [ 0, %0 ]
  %13 = getelementptr inbounds %struct.nodbox, ptr %11, i64 %12
  store ptr null, ptr %13, align 8, !tbaa !437
  %14 = load ptr, ptr @xNodules, align 8, !tbaa !7
  %15 = getelementptr inbounds %struct.nodbox, ptr %14, i64 %12, i32 1
  store ptr null, ptr %15, align 8, !tbaa !433
  %16 = load ptr, ptr @xNodules, align 8, !tbaa !7
  %17 = getelementptr inbounds %struct.nodbox, ptr %16, i64 %12, i32 2
  store i32 0, ptr %17, align 8, !tbaa !1121
  %18 = add nuw nsw i64 %12, 1
  %19 = load i32, ptr @numberCells, align 4, !tbaa !17
  %20 = sext i32 %19 to i64
  %21 = icmp sgt i64 %12, %20
  br i1 %21, label %22, label %10, !llvm.loop !1122

22:                                               ; preds = %10, %0
  %23 = load ptr, ptr @Vlist, align 8, !tbaa !7
  %24 = load i32, ptr %23, align 8, !tbaa !138
  %25 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %26 = sext i32 %24 to i64
  %27 = getelementptr inbounds %struct.edgebox, ptr %25, i64 %26, i32 3
  %28 = load i32, ptr %27, align 4, !tbaa !140
  %29 = getelementptr inbounds %struct.edgebox, ptr %25, i64 %26, i32 2
  %30 = load i32, ptr %29, align 4, !tbaa !144
  %31 = getelementptr inbounds %struct.edgebox, ptr %25, i64 %26, i32 1
  %32 = load i32, ptr %31, align 4, !tbaa !143
  %33 = load ptr, ptr @vChanBeginRoot, align 8, !tbaa !7
  %34 = tail call ptr (ptr, i32, ...) @tplist(ptr noundef %33, i32 noundef %28) #44
  %35 = icmp eq ptr %34, null
  br i1 %35, label %63, label %36

36:                                               ; preds = %22
  %37 = load ptr, ptr @eArray, align 8, !tbaa !7
  %38 = load ptr, ptr @xNodules, align 8
  %39 = getelementptr inbounds %struct.nodbox, ptr %38, i64 0, i32 1
  %40 = getelementptr inbounds %struct.nodbox, ptr %38, i64 0, i32 2
  br label %41

41:                                               ; preds = %59, %36
  %42 = phi ptr [ %34, %36 ], [ %61, %59 ]
  %43 = load i32, ptr %42, align 8, !tbaa !19
  store i32 %43, ptr %2, align 4, !tbaa !17
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds %struct.ebox, ptr %37, i64 %44, i32 7
  %46 = load i32, ptr %45, align 4, !tbaa !121
  %47 = icmp slt i32 %46, %32
  br i1 %47, label %59, label %48

48:                                               ; preds = %41
  %49 = getelementptr inbounds %struct.ebox, ptr %37, i64 %44, i32 6
  %50 = load i32, ptr %49, align 8, !tbaa !120
  %51 = icmp sgt i32 %50, %30
  br i1 %51, label %59, label %52

52:                                               ; preds = %48
  %53 = load ptr, ptr %39, align 8, !tbaa !433
  %54 = tail call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #45
  store ptr %54, ptr %39, align 8, !tbaa !433
  %55 = getelementptr inbounds %struct.dlink2, ptr %54, i64 0, i32 2
  store ptr %53, ptr %55, align 8, !tbaa !435
  store i32 %24, ptr %54, align 8, !tbaa !407
  %56 = tail call noalias dereferenceable_or_null(8) ptr @malloc(i64 noundef 8) #45
  %57 = getelementptr inbounds %struct.dlink2, ptr %54, i64 0, i32 1
  store ptr %56, ptr %57, align 8, !tbaa !409
  store i32 1, ptr %56, align 4, !tbaa !17
  %58 = getelementptr inbounds i32, ptr %56, i64 1
  store i32 %43, ptr %58, align 4, !tbaa !17
  store i32 1, ptr %40, align 8, !tbaa !1121
  br label %59

59:                                               ; preds = %52, %48, %41
  %60 = getelementptr inbounds %struct.plist, ptr %42, i64 0, i32 1
  %61 = load ptr, ptr %60, align 8, !tbaa !23
  %62 = icmp eq ptr %61, null
  br i1 %62, label %63, label %41, !llvm.loop !1123

63:                                               ; preds = %59, %22
  %64 = load ptr, ptr @Vend, align 8, !tbaa !7
  %65 = load i32, ptr %64, align 8, !tbaa !138
  %66 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %67 = sext i32 %65 to i64
  %68 = getelementptr inbounds %struct.edgebox, ptr %66, i64 %67, i32 3
  %69 = load i32, ptr %68, align 4, !tbaa !140
  store i32 %69, ptr %1, align 4, !tbaa !17
  %70 = getelementptr inbounds %struct.edgebox, ptr %66, i64 %67, i32 2
  %71 = load i32, ptr %70, align 4, !tbaa !144
  %72 = getelementptr inbounds %struct.edgebox, ptr %66, i64 %67, i32 1
  %73 = load i32, ptr %72, align 4, !tbaa !143
  %74 = load ptr, ptr @vChanEndRoot, align 8, !tbaa !7
  %75 = tail call ptr (ptr, i32, ...) @tplist(ptr noundef %74, i32 noundef %69) #44
  %76 = icmp eq ptr %75, null
  br i1 %76, label %119, label %77

77:                                               ; preds = %63
  %78 = load ptr, ptr @eArray, align 8, !tbaa !7
  br label %79

79:                                               ; preds = %114, %77
  %80 = phi ptr [ %115, %114 ], [ %78, %77 ]
  %81 = phi ptr [ %117, %114 ], [ %75, %77 ]
  %82 = load i32, ptr %81, align 8, !tbaa !19
  store i32 %82, ptr %2, align 4, !tbaa !17
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds %struct.ebox, ptr %80, i64 %83, i32 7
  %85 = load i32, ptr %84, align 4, !tbaa !121
  %86 = icmp slt i32 %85, %73
  br i1 %86, label %114, label %87

87:                                               ; preds = %79
  %88 = getelementptr inbounds %struct.ebox, ptr %80, i64 %83, i32 6
  %89 = load i32, ptr %88, align 8, !tbaa !120
  %90 = icmp sgt i32 %89, %71
  br i1 %90, label %114, label %91

91:                                               ; preds = %87
  %92 = load ptr, ptr @xNodules, align 8, !tbaa !7
  %93 = load i32, ptr @numberCells, align 4, !tbaa !17
  %94 = add nsw i32 %93, 1
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds %struct.nodbox, ptr %92, i64 %95
  %97 = load ptr, ptr %96, align 8, !tbaa !437
  %98 = tail call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #45
  store ptr %98, ptr %96, align 8, !tbaa !437
  %99 = load ptr, ptr @xNodules, align 8, !tbaa !7
  %100 = getelementptr inbounds %struct.nodbox, ptr %99, i64 %95
  %101 = load ptr, ptr %100, align 8, !tbaa !437
  %102 = getelementptr inbounds %struct.dlink2, ptr %101, i64 0, i32 2
  store ptr %97, ptr %102, align 8, !tbaa !435
  store i32 %65, ptr %101, align 8, !tbaa !407
  %103 = tail call noalias dereferenceable_or_null(8) ptr @malloc(i64 noundef 8) #45
  %104 = load i32, ptr @numberCells, align 4, !tbaa !17
  %105 = add nsw i32 %104, 1
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds %struct.nodbox, ptr %99, i64 %106
  %108 = load ptr, ptr %107, align 8, !tbaa !437
  %109 = getelementptr inbounds %struct.dlink2, ptr %108, i64 0, i32 1
  store ptr %103, ptr %109, align 8, !tbaa !409
  store i32 1, ptr %103, align 4, !tbaa !17
  %110 = load i32, ptr %2, align 4, !tbaa !17
  %111 = getelementptr inbounds i32, ptr %103, i64 1
  store i32 %110, ptr %111, align 4, !tbaa !17
  %112 = getelementptr inbounds %struct.nodbox, ptr %99, i64 %106, i32 2
  store i32 1, ptr %112, align 8, !tbaa !1121
  %113 = load ptr, ptr @eArray, align 8, !tbaa !7
  br label %114

114:                                              ; preds = %91, %87, %79
  %115 = phi ptr [ %80, %79 ], [ %80, %87 ], [ %113, %91 ]
  %116 = getelementptr inbounds %struct.plist, ptr %81, i64 0, i32 1
  %117 = load ptr, ptr %116, align 8, !tbaa !23
  %118 = icmp eq ptr %117, null
  br i1 %118, label %119, label %79, !llvm.loop !1124

119:                                              ; preds = %114, %63
  %120 = load ptr, ptr @vFixedList, align 8, !tbaa !7
  %121 = getelementptr inbounds %struct.dlink2, ptr %120, i64 0, i32 2
  %122 = load ptr, ptr %121, align 8, !tbaa !150
  %123 = getelementptr inbounds %struct.dlink2, ptr %122, i64 0, i32 2
  %124 = load ptr, ptr %123, align 8, !tbaa !150
  %125 = icmp eq ptr %124, null
  br i1 %125, label %128, label %126

126:                                              ; preds = %119
  %127 = load ptr, ptr @edgeList, align 8, !tbaa !7
  br label %131

128:                                              ; preds = %231, %119
  %129 = load i32, ptr @numberCells, align 4, !tbaa !17
  %130 = icmp slt i32 %129, -1
  br i1 %130, label %389, label %237

131:                                              ; preds = %231, %126
  %132 = phi ptr [ %235, %231 ], [ %124, %126 ]
  %133 = phi ptr [ %233, %231 ], [ %127, %126 ]
  %134 = phi ptr [ %234, %231 ], [ %123, %126 ]
  %135 = phi ptr [ %232, %231 ], [ %122, %126 ]
  %136 = load i32, ptr %135, align 8, !tbaa !138
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds %struct.edgebox, ptr %133, i64 %137
  %139 = load i32, ptr %138, align 4, !tbaa !148
  %140 = load ptr, ptr @xNodules, align 8, !tbaa !7
  %141 = sext i32 %139 to i64
  %142 = getelementptr inbounds %struct.nodbox, ptr %140, i64 %141, i32 2
  %143 = load i32, ptr %142, align 8, !tbaa !1121
  %144 = icmp eq i32 %143, 1
  br i1 %144, label %231, label %145

145:                                              ; preds = %131
  store i32 1, ptr %142, align 8, !tbaa !1121
  br label %146

146:                                              ; preds = %221, %145
  %147 = phi ptr [ %133, %145 ], [ %222, %221 ]
  %148 = phi i32 [ %136, %145 ], [ %227, %221 ]
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds %struct.edgebox, ptr %147, i64 %149, i32 5
  %151 = load i32, ptr %150, align 4, !tbaa !142
  %152 = icmp sgt i32 %151, 0
  %153 = getelementptr inbounds %struct.edgebox, ptr %147, i64 %149, i32 3
  %154 = load i32, ptr %153, align 4, !tbaa !140
  store i32 %154, ptr %1, align 4, !tbaa !17
  br i1 %152, label %155, label %188

155:                                              ; preds = %146
  %156 = load ptr, ptr @vChanEndRoot, align 8, !tbaa !7
  %157 = tail call ptr (ptr, i32, ...) @tplist(ptr noundef %156, i32 noundef %154) #44
  %158 = icmp eq ptr %157, null
  br i1 %158, label %221, label %159

159:                                              ; preds = %155
  %160 = load ptr, ptr @eArray, align 8, !tbaa !7
  br label %161

161:                                              ; preds = %183, %159
  %162 = phi ptr [ %184, %183 ], [ %160, %159 ]
  %163 = phi ptr [ %186, %183 ], [ %157, %159 ]
  %164 = load i32, ptr %163, align 8, !tbaa !19
  store i32 %164, ptr %2, align 4, !tbaa !17
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds %struct.ebox, ptr %162, i64 %165, i32 9
  %167 = load i32, ptr %166, align 4, !tbaa !157
  %168 = icmp eq i32 %167, %148
  br i1 %168, label %169, label %183

169:                                              ; preds = %161
  %170 = load ptr, ptr @xNodules, align 8, !tbaa !7
  %171 = getelementptr inbounds %struct.nodbox, ptr %170, i64 %141
  %172 = load ptr, ptr %171, align 8, !tbaa !437
  %173 = tail call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #45
  store ptr %173, ptr %171, align 8, !tbaa !437
  %174 = load ptr, ptr @xNodules, align 8, !tbaa !7
  %175 = getelementptr inbounds %struct.nodbox, ptr %174, i64 %141
  %176 = load ptr, ptr %175, align 8, !tbaa !437
  %177 = getelementptr inbounds %struct.dlink2, ptr %176, i64 0, i32 2
  store ptr %172, ptr %177, align 8, !tbaa !435
  store i32 %148, ptr %176, align 8, !tbaa !407
  %178 = tail call noalias dereferenceable_or_null(8) ptr @malloc(i64 noundef 8) #45
  %179 = getelementptr inbounds %struct.dlink2, ptr %176, i64 0, i32 1
  store ptr %178, ptr %179, align 8, !tbaa !409
  store i32 1, ptr %178, align 4, !tbaa !17
  %180 = load i32, ptr %2, align 4, !tbaa !17
  %181 = getelementptr inbounds i32, ptr %178, i64 1
  store i32 %180, ptr %181, align 4, !tbaa !17
  %182 = load ptr, ptr @eArray, align 8, !tbaa !7
  br label %183

183:                                              ; preds = %169, %161
  %184 = phi ptr [ %162, %161 ], [ %182, %169 ]
  %185 = getelementptr inbounds %struct.plist, ptr %163, i64 0, i32 1
  %186 = load ptr, ptr %185, align 8, !tbaa !23
  %187 = icmp eq ptr %186, null
  br i1 %187, label %221, label %161, !llvm.loop !1125

188:                                              ; preds = %146
  %189 = load ptr, ptr @vChanBeginRoot, align 8, !tbaa !7
  %190 = tail call ptr (ptr, i32, ...) @tplist(ptr noundef %189, i32 noundef %154) #44
  %191 = icmp eq ptr %190, null
  br i1 %191, label %221, label %192

192:                                              ; preds = %188
  %193 = load ptr, ptr @eArray, align 8, !tbaa !7
  br label %194

194:                                              ; preds = %216, %192
  %195 = phi ptr [ %217, %216 ], [ %193, %192 ]
  %196 = phi ptr [ %219, %216 ], [ %190, %192 ]
  %197 = load i32, ptr %196, align 8, !tbaa !19
  store i32 %197, ptr %2, align 4, !tbaa !17
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds %struct.ebox, ptr %195, i64 %198, i32 8
  %200 = load i32, ptr %199, align 8, !tbaa !156
  %201 = icmp eq i32 %200, %148
  br i1 %201, label %202, label %216

202:                                              ; preds = %194
  %203 = load ptr, ptr @xNodules, align 8, !tbaa !7
  %204 = getelementptr inbounds %struct.nodbox, ptr %203, i64 %141, i32 1
  %205 = load ptr, ptr %204, align 8, !tbaa !433
  %206 = tail call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #45
  store ptr %206, ptr %204, align 8, !tbaa !433
  %207 = load ptr, ptr @xNodules, align 8, !tbaa !7
  %208 = getelementptr inbounds %struct.nodbox, ptr %207, i64 %141, i32 1
  %209 = load ptr, ptr %208, align 8, !tbaa !433
  %210 = getelementptr inbounds %struct.dlink2, ptr %209, i64 0, i32 2
  store ptr %205, ptr %210, align 8, !tbaa !435
  store i32 %148, ptr %209, align 8, !tbaa !407
  %211 = tail call noalias dereferenceable_or_null(8) ptr @malloc(i64 noundef 8) #45
  %212 = getelementptr inbounds %struct.dlink2, ptr %209, i64 0, i32 1
  store ptr %211, ptr %212, align 8, !tbaa !409
  store i32 1, ptr %211, align 4, !tbaa !17
  %213 = load i32, ptr %2, align 4, !tbaa !17
  %214 = getelementptr inbounds i32, ptr %211, i64 1
  store i32 %213, ptr %214, align 4, !tbaa !17
  %215 = load ptr, ptr @eArray, align 8, !tbaa !7
  br label %216

216:                                              ; preds = %202, %194
  %217 = phi ptr [ %195, %194 ], [ %215, %202 ]
  %218 = getelementptr inbounds %struct.plist, ptr %196, i64 0, i32 1
  %219 = load ptr, ptr %218, align 8, !tbaa !23
  %220 = icmp eq ptr %219, null
  br i1 %220, label %221, label %194, !llvm.loop !1126

221:                                              ; preds = %216, %188, %183, %155
  %222 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %223 = getelementptr inbounds %struct.edgebox, ptr %222, i64 %149, i32 8
  %224 = load i32, ptr %223, align 4, !tbaa !332
  %225 = sext i32 %224 to i64
  %226 = getelementptr inbounds %struct.edgebox, ptr %222, i64 %225, i32 8
  %227 = load i32, ptr %226, align 4, !tbaa !332
  %228 = icmp eq i32 %227, %136
  br i1 %228, label %229, label %146, !llvm.loop !1127

229:                                              ; preds = %221
  %.lcssa2 = phi ptr [ %222, %221 ]
  %230 = load ptr, ptr %134, align 8, !tbaa !150
  br label %231

231:                                              ; preds = %229, %131
  %232 = phi ptr [ %230, %229 ], [ %132, %131 ]
  %233 = phi ptr [ %.lcssa2, %229 ], [ %133, %131 ]
  %234 = getelementptr inbounds %struct.dlink2, ptr %232, i64 0, i32 2
  %235 = load ptr, ptr %234, align 8, !tbaa !150
  %236 = icmp eq ptr %235, null
  br i1 %236, label %128, label %131, !llvm.loop !1128

237:                                              ; preds = %384, %128
  %238 = phi i64 [ %385, %384 ], [ 0, %128 ]
  %239 = load ptr, ptr @xNodules, align 8, !tbaa !7
  %240 = getelementptr inbounds %struct.nodbox, ptr %239, i64 %238
  %241 = load ptr, ptr %240, align 8, !tbaa !7
  %242 = icmp eq ptr %241, null
  br i1 %242, label %312, label %243

243:                                              ; preds = %306, %237
  %244 = phi ptr [ %308, %306 ], [ %241, %237 ]
  %245 = getelementptr inbounds %struct.dlink2, ptr %244, i64 0, i32 1
  %246 = load ptr, ptr %245, align 8, !tbaa !409
  %247 = load i32, ptr %246, align 4, !tbaa !17
  %248 = sext i32 %247 to i64
  br label %249

249:                                              ; preds = %300, %243
  %250 = phi i64 [ %248, %243 ], [ %301, %300 ]
  %251 = phi ptr [ %246, %243 ], [ %302, %300 ]
  %252 = getelementptr inbounds i32, ptr %251, i64 %250
  %253 = load i32, ptr %252, align 4, !tbaa !17
  store i32 %253, ptr %2, align 4, !tbaa !17
  %254 = load ptr, ptr @eArray, align 8, !tbaa !7
  %255 = sext i32 %253 to i64
  %256 = getelementptr inbounds %struct.ebox, ptr %254, i64 %255, i32 3
  %257 = load i32, ptr %256, align 4, !tbaa !117
  store i32 %257, ptr %1, align 4, !tbaa !17
  %258 = getelementptr inbounds %struct.ebox, ptr %254, i64 %255, i32 6
  %259 = load i32, ptr %258, align 8, !tbaa !120
  %260 = getelementptr inbounds %struct.ebox, ptr %254, i64 %255, i32 7
  %261 = load i32, ptr %260, align 4, !tbaa !121
  %262 = load ptr, ptr @vChanEndRoot, align 8, !tbaa !7
  %263 = tail call ptr (ptr, i32, ...) @tplist(ptr noundef %262, i32 noundef %257) #44
  %264 = icmp eq ptr %263, null
  br i1 %264, label %300, label %265

265:                                              ; preds = %249
  %266 = load ptr, ptr @eArray, align 8, !tbaa !7
  br label %267

267:                                              ; preds = %296, %265
  %268 = phi ptr [ %263, %265 ], [ %298, %296 ]
  %269 = load i32, ptr %268, align 8, !tbaa !19
  store i32 %269, ptr %2, align 4, !tbaa !17
  %270 = sext i32 %269 to i64
  %271 = getelementptr inbounds %struct.ebox, ptr %266, i64 %270, i32 7
  %272 = load i32, ptr %271, align 4, !tbaa !121
  %273 = icmp slt i32 %272, %261
  br i1 %273, label %296, label %274

274:                                              ; preds = %267
  %275 = getelementptr inbounds %struct.ebox, ptr %266, i64 %270, i32 6
  %276 = load i32, ptr %275, align 8, !tbaa !120
  %277 = icmp sgt i32 %276, %259
  br i1 %277, label %296, label %278

278:                                              ; preds = %274
  %.lcssa = phi i32 [ %269, %274 ]
  tail call void @tdelete(ptr noundef nonnull @vChanEndRoot, i32 noundef %257, i32 noundef %.lcssa) #44
  %279 = load ptr, ptr %245, align 8, !tbaa !409
  %280 = load i32, ptr %279, align 4, !tbaa !17
  %281 = add nsw i32 %280, 1
  store i32 %281, ptr %279, align 4, !tbaa !17
  %282 = and i32 %281, 1
  %283 = icmp eq i32 %282, 0
  br i1 %283, label %284, label %290

284:                                              ; preds = %278
  %285 = add nsw i32 %280, 3
  %286 = sext i32 %285 to i64
  %287 = shl nsw i64 %286, 2
  %288 = tail call ptr @realloc(ptr noundef nonnull %279, i64 noundef %287) #46
  store ptr %288, ptr %245, align 8, !tbaa !409
  %289 = load i32, ptr %288, align 4, !tbaa !17
  br label %290

290:                                              ; preds = %284, %278
  %291 = phi i32 [ %289, %284 ], [ %281, %278 ]
  %292 = phi ptr [ %288, %284 ], [ %279, %278 ]
  %293 = load i32, ptr %2, align 4, !tbaa !17
  %294 = sext i32 %291 to i64
  %295 = getelementptr inbounds i32, ptr %292, i64 %294
  store i32 %293, ptr %295, align 4, !tbaa !17
  br label %300

296:                                              ; preds = %274, %267
  %297 = getelementptr inbounds %struct.plist, ptr %268, i64 0, i32 1
  %298 = load ptr, ptr %297, align 8, !tbaa !23
  %299 = icmp eq ptr %298, null
  br i1 %299, label %300, label %267, !llvm.loop !1129

300:                                              ; preds = %296, %290, %249
  %301 = add nsw i64 %250, 1
  %302 = load ptr, ptr %245, align 8, !tbaa !409
  %303 = load i32, ptr %302, align 4, !tbaa !17
  %304 = sext i32 %303 to i64
  %305 = icmp slt i64 %250, %304
  br i1 %305, label %249, label %306, !llvm.loop !1130

306:                                              ; preds = %300
  %307 = getelementptr inbounds %struct.dlink2, ptr %244, i64 0, i32 2
  %308 = load ptr, ptr %307, align 8, !tbaa !7
  %309 = icmp eq ptr %308, null
  br i1 %309, label %310, label %243, !llvm.loop !1131

310:                                              ; preds = %306
  %311 = load ptr, ptr @xNodules, align 8, !tbaa !7
  br label %312

312:                                              ; preds = %310, %237
  %313 = phi ptr [ %311, %310 ], [ %239, %237 ]
  %314 = getelementptr inbounds %struct.nodbox, ptr %313, i64 %238, i32 1
  %315 = load ptr, ptr %314, align 8, !tbaa !7
  %316 = icmp eq ptr %315, null
  br i1 %316, label %384, label %317

317:                                              ; preds = %380, %312
  %318 = phi ptr [ %382, %380 ], [ %315, %312 ]
  %319 = getelementptr inbounds %struct.dlink2, ptr %318, i64 0, i32 1
  %320 = load ptr, ptr %319, align 8, !tbaa !409
  %321 = load i32, ptr %320, align 4, !tbaa !17
  %322 = sext i32 %321 to i64
  br label %323

323:                                              ; preds = %374, %317
  %324 = phi i64 [ %322, %317 ], [ %375, %374 ]
  %325 = phi ptr [ %320, %317 ], [ %376, %374 ]
  %326 = getelementptr inbounds i32, ptr %325, i64 %324
  %327 = load i32, ptr %326, align 4, !tbaa !17
  store i32 %327, ptr %2, align 4, !tbaa !17
  %328 = load ptr, ptr @eArray, align 8, !tbaa !7
  %329 = sext i32 %327 to i64
  %330 = getelementptr inbounds %struct.ebox, ptr %328, i64 %329, i32 4
  %331 = load i32, ptr %330, align 8, !tbaa !118
  store i32 %331, ptr %1, align 4, !tbaa !17
  %332 = getelementptr inbounds %struct.ebox, ptr %328, i64 %329, i32 6
  %333 = load i32, ptr %332, align 8, !tbaa !120
  %334 = getelementptr inbounds %struct.ebox, ptr %328, i64 %329, i32 7
  %335 = load i32, ptr %334, align 4, !tbaa !121
  %336 = load ptr, ptr @vChanBeginRoot, align 8, !tbaa !7
  %337 = tail call ptr (ptr, i32, ...) @tplist(ptr noundef %336, i32 noundef %331) #44
  %338 = icmp eq ptr %337, null
  br i1 %338, label %374, label %339

339:                                              ; preds = %323
  %340 = load ptr, ptr @eArray, align 8, !tbaa !7
  br label %341

341:                                              ; preds = %370, %339
  %342 = phi ptr [ %337, %339 ], [ %372, %370 ]
  %343 = load i32, ptr %342, align 8, !tbaa !19
  store i32 %343, ptr %2, align 4, !tbaa !17
  %344 = sext i32 %343 to i64
  %345 = getelementptr inbounds %struct.ebox, ptr %340, i64 %344, i32 7
  %346 = load i32, ptr %345, align 4, !tbaa !121
  %347 = icmp slt i32 %346, %335
  br i1 %347, label %370, label %348

348:                                              ; preds = %341
  %349 = getelementptr inbounds %struct.ebox, ptr %340, i64 %344, i32 6
  %350 = load i32, ptr %349, align 8, !tbaa !120
  %351 = icmp sgt i32 %350, %333
  br i1 %351, label %370, label %352

352:                                              ; preds = %348
  %.lcssa1 = phi i32 [ %343, %348 ]
  tail call void @tdelete(ptr noundef nonnull @vChanBeginRoot, i32 noundef %331, i32 noundef %.lcssa1) #44
  %353 = load ptr, ptr %319, align 8, !tbaa !409
  %354 = load i32, ptr %353, align 4, !tbaa !17
  %355 = add nsw i32 %354, 1
  store i32 %355, ptr %353, align 4, !tbaa !17
  %356 = and i32 %355, 1
  %357 = icmp eq i32 %356, 0
  br i1 %357, label %358, label %364

358:                                              ; preds = %352
  %359 = add nsw i32 %354, 3
  %360 = sext i32 %359 to i64
  %361 = shl nsw i64 %360, 2
  %362 = tail call ptr @realloc(ptr noundef nonnull %353, i64 noundef %361) #46
  store ptr %362, ptr %319, align 8, !tbaa !409
  %363 = load i32, ptr %362, align 4, !tbaa !17
  br label %364

364:                                              ; preds = %358, %352
  %365 = phi i32 [ %363, %358 ], [ %355, %352 ]
  %366 = phi ptr [ %362, %358 ], [ %353, %352 ]
  %367 = load i32, ptr %2, align 4, !tbaa !17
  %368 = sext i32 %365 to i64
  %369 = getelementptr inbounds i32, ptr %366, i64 %368
  store i32 %367, ptr %369, align 4, !tbaa !17
  br label %374

370:                                              ; preds = %348, %341
  %371 = getelementptr inbounds %struct.plist, ptr %342, i64 0, i32 1
  %372 = load ptr, ptr %371, align 8, !tbaa !23
  %373 = icmp eq ptr %372, null
  br i1 %373, label %374, label %341, !llvm.loop !1132

374:                                              ; preds = %370, %364, %323
  %375 = add nsw i64 %324, 1
  %376 = load ptr, ptr %319, align 8, !tbaa !409
  %377 = load i32, ptr %376, align 4, !tbaa !17
  %378 = sext i32 %377 to i64
  %379 = icmp slt i64 %324, %378
  br i1 %379, label %323, label %380, !llvm.loop !1133

380:                                              ; preds = %374
  %381 = getelementptr inbounds %struct.dlink2, ptr %318, i64 0, i32 2
  %382 = load ptr, ptr %381, align 8, !tbaa !7
  %383 = icmp eq ptr %382, null
  br i1 %383, label %384, label %317, !llvm.loop !1134

384:                                              ; preds = %380, %312
  %385 = add nuw nsw i64 %238, 1
  %386 = load i32, ptr @numberCells, align 4, !tbaa !17
  %387 = sext i32 %386 to i64
  %388 = icmp sgt i64 %238, %387
  br i1 %388, label %389, label %237, !llvm.loop !1135

389:                                              ; preds = %384, %128
  store i32 0, ptr @numXnodes, align 4, !tbaa !17
  %390 = load ptr, ptr @vFixedList, align 8, !tbaa !7
  %391 = icmp eq ptr %390, null
  br i1 %391, label %406, label %392

392:                                              ; preds = %389
  %393 = load ptr, ptr @edgeList, align 8, !tbaa !7
  br label %394

394:                                              ; preds = %394, %392
  %395 = phi ptr [ %390, %392 ], [ %402, %394 ]
  %396 = load i32, ptr @numXnodes, align 4, !tbaa !17
  %397 = add nsw i32 %396, 1
  store i32 %397, ptr @numXnodes, align 4, !tbaa !17
  %398 = load i32, ptr %395, align 8, !tbaa !138
  %399 = sext i32 %398 to i64
  %400 = getelementptr inbounds %struct.edgebox, ptr %393, i64 %399, i32 9
  store i32 %397, ptr %400, align 4, !tbaa !1136
  %401 = getelementptr inbounds %struct.dlink2, ptr %395, i64 0, i32 2
  %402 = load ptr, ptr %401, align 8, !tbaa !7
  %403 = icmp eq ptr %402, null
  br i1 %403, label %404, label %394, !llvm.loop !1137

404:                                              ; preds = %394
  %405 = load i32, ptr @numXnodes, align 4, !tbaa !17
  br label %406

406:                                              ; preds = %404, %389
  %407 = phi i32 [ %405, %404 ], [ 0, %389 ]
  %408 = add i32 %407, 1
  %409 = sext i32 %408 to i64
  %410 = shl nsw i64 %409, 3
  %411 = tail call noalias ptr @malloc(i64 noundef %410) #45
  store ptr %411, ptr @xNodeArray, align 8, !tbaa !7
  %412 = icmp slt i32 %407, 1
  br i1 %412, label %415, label %413

413:                                              ; preds = %406
  %414 = zext i32 %408 to i64
  br label %418

415:                                              ; preds = %418, %406
  %416 = load i32, ptr @numberCells, align 4, !tbaa !17
  %417 = icmp slt i32 %416, 1
  br i1 %417, label %424, label %427

418:                                              ; preds = %418, %413
  %419 = phi i64 [ 1, %413 ], [ %422, %418 ]
  %420 = load ptr, ptr @xNodeArray, align 8, !tbaa !7
  %421 = getelementptr inbounds ptr, ptr %420, i64 %419
  store ptr null, ptr %421, align 8, !tbaa !7
  %422 = add nuw nsw i64 %419, 1
  %423 = icmp eq i64 %422, %414
  br i1 %423, label %415, label %418, !llvm.loop !1138

424:                                              ; preds = %485, %415
  %425 = phi i32 [ %416, %415 ], [ %486, %485 ]
  %426 = icmp slt i32 %425, -1
  br i1 %426, label %563, label %490

427:                                              ; preds = %485, %415
  %428 = phi i32 [ %486, %485 ], [ %416, %415 ]
  %429 = phi i64 [ %487, %485 ], [ 1, %415 ]
  %430 = load ptr, ptr @xNodules, align 8, !tbaa !7
  %431 = getelementptr inbounds %struct.nodbox, ptr %430, i64 %429
  %432 = load ptr, ptr %431, align 8, !tbaa !7
  %433 = icmp eq ptr %432, null
  br i1 %433, label %485, label %434

434:                                              ; preds = %479, %427
  %435 = phi ptr [ %481, %479 ], [ %432, %427 ]
  %436 = load i32, ptr %435, align 8, !tbaa !407
  %437 = sext i32 %436 to i64
  %438 = load ptr, ptr @xNodules, align 8, !tbaa !7
  %439 = getelementptr inbounds %struct.nodbox, ptr %438, i64 %429, i32 1
  %440 = load ptr, ptr %439, align 8, !tbaa !7
  %441 = icmp eq ptr %440, null
  br i1 %441, label %479, label %442

442:                                              ; preds = %434
  %443 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %444 = getelementptr inbounds %struct.edgebox, ptr %443, i64 %437, i32 9
  %445 = load i32, ptr %444, align 4, !tbaa !1136
  %446 = sext i32 %445 to i64
  %447 = load ptr, ptr @xNodeArray, align 8, !tbaa !7
  %448 = getelementptr inbounds ptr, ptr %447, i64 %446
  %449 = load ptr, ptr %448, align 8, !tbaa !7
  br label %450

450:                                              ; preds = %450, %442
  %451 = phi ptr [ %449, %442 ], [ %474, %450 ]
  %452 = phi ptr [ %447, %442 ], [ %461, %450 ]
  %453 = phi ptr [ %443, %442 ], [ %468, %450 ]
  %454 = phi ptr [ %440, %442 ], [ %477, %450 ]
  %455 = load i32, ptr %454, align 8, !tbaa !407
  %456 = sext i32 %455 to i64
  %457 = getelementptr inbounds %struct.edgebox, ptr %453, i64 %456, i32 9
  %458 = load i32, ptr %457, align 4, !tbaa !1136
  %459 = getelementptr inbounds ptr, ptr %452, i64 %446
  %460 = tail call noalias dereferenceable_or_null(32) ptr @malloc(i64 noundef 32) #45
  store ptr %460, ptr %459, align 8, !tbaa !7
  %461 = load ptr, ptr @xNodeArray, align 8, !tbaa !7
  %462 = getelementptr inbounds ptr, ptr %461, i64 %446
  %463 = load ptr, ptr %462, align 8, !tbaa !7
  %464 = getelementptr inbounds %struct.wcbox, ptr %463, i64 0, i32 4
  store ptr %451, ptr %464, align 8, !tbaa !887
  %465 = load ptr, ptr %462, align 8, !tbaa !7
  store i32 1, ptr %465, align 8, !tbaa !198
  %466 = getelementptr inbounds %struct.wcbox, ptr %465, i64 0, i32 1
  store i32 %458, ptr %466, align 4, !tbaa !94
  %467 = getelementptr inbounds %struct.wcbox, ptr %465, i64 0, i32 2
  store ptr null, ptr %467, align 8, !tbaa !199
  %468 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %469 = getelementptr inbounds %struct.edgebox, ptr %468, i64 %456, i32 3
  %470 = load i32, ptr %469, align 4, !tbaa !140
  %471 = getelementptr inbounds %struct.edgebox, ptr %468, i64 %437, i32 3
  %472 = load i32, ptr %471, align 4, !tbaa !140
  %473 = sub nsw i32 %470, %472
  %474 = load ptr, ptr %462, align 8, !tbaa !7
  %475 = getelementptr inbounds %struct.wcbox, ptr %474, i64 0, i32 3
  store i32 %473, ptr %475, align 8, !tbaa !96
  %476 = getelementptr inbounds %struct.dlink2, ptr %454, i64 0, i32 2
  %477 = load ptr, ptr %476, align 8, !tbaa !7
  %478 = icmp eq ptr %477, null
  br i1 %478, label %479, label %450, !llvm.loop !1139

479:                                              ; preds = %450, %434
  %480 = getelementptr inbounds %struct.dlink2, ptr %435, i64 0, i32 2
  %481 = load ptr, ptr %480, align 8, !tbaa !7
  %482 = icmp eq ptr %481, null
  br i1 %482, label %483, label %434, !llvm.loop !1140

483:                                              ; preds = %479
  %484 = load i32, ptr @numberCells, align 4, !tbaa !17
  br label %485

485:                                              ; preds = %483, %427
  %486 = phi i32 [ %484, %483 ], [ %428, %427 ]
  %487 = add nuw nsw i64 %429, 1
  %488 = sext i32 %486 to i64
  %489 = icmp slt i64 %429, %488
  br i1 %489, label %427, label %424, !llvm.loop !1141

490:                                              ; preds = %558, %424
  %491 = phi i32 [ %559, %558 ], [ %425, %424 ]
  %492 = phi i64 [ %560, %558 ], [ 0, %424 ]
  %493 = load ptr, ptr @xNodules, align 8, !tbaa !7
  %494 = getelementptr inbounds %struct.nodbox, ptr %493, i64 %492, i32 1
  %495 = load ptr, ptr %494, align 8, !tbaa !7
  %496 = icmp eq ptr %495, null
  br i1 %496, label %558, label %497

497:                                              ; preds = %490
  %498 = load ptr, ptr @xNodeArray, align 8, !tbaa !7
  br label %499

499:                                              ; preds = %552, %497
  %500 = phi ptr [ %524, %552 ], [ %498, %497 ]
  %501 = phi ptr [ %554, %552 ], [ %495, %497 ]
  %502 = load i32, ptr %501, align 8, !tbaa !407
  %503 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %504 = sext i32 %502 to i64
  %505 = getelementptr inbounds %struct.edgebox, ptr %503, i64 %504, i32 9
  %506 = load i32, ptr %505, align 4, !tbaa !1136
  %507 = getelementptr inbounds %struct.dlink2, ptr %501, i64 0, i32 1
  %508 = load ptr, ptr %507, align 8, !tbaa !409
  %509 = load i32, ptr %508, align 4, !tbaa !17
  %510 = sext i32 %509 to i64
  %511 = getelementptr inbounds i32, ptr %508, i64 %510
  %512 = load i32, ptr %511, align 4, !tbaa !17
  %513 = load ptr, ptr @eArray, align 8, !tbaa !7
  %514 = sext i32 %512 to i64
  %515 = getelementptr inbounds %struct.ebox, ptr %513, i64 %514, i32 9
  %516 = load i32, ptr %515, align 4, !tbaa !157
  %517 = sext i32 %516 to i64
  %518 = getelementptr inbounds %struct.edgebox, ptr %503, i64 %517, i32 9
  %519 = load i32, ptr %518, align 4, !tbaa !1136
  %520 = sext i32 %506 to i64
  %521 = getelementptr inbounds ptr, ptr %500, i64 %520
  %522 = load ptr, ptr %521, align 8, !tbaa !7
  %523 = tail call noalias dereferenceable_or_null(32) ptr @malloc(i64 noundef 32) #45
  store ptr %523, ptr %521, align 8, !tbaa !7
  %524 = load ptr, ptr @xNodeArray, align 8, !tbaa !7
  %525 = getelementptr inbounds ptr, ptr %524, i64 %520
  %526 = load ptr, ptr %525, align 8, !tbaa !7
  %527 = getelementptr inbounds %struct.wcbox, ptr %526, i64 0, i32 4
  store ptr %522, ptr %527, align 8, !tbaa !887
  %528 = load ptr, ptr %525, align 8, !tbaa !7
  store i32 0, ptr %528, align 8, !tbaa !198
  %529 = getelementptr inbounds %struct.wcbox, ptr %528, i64 0, i32 3
  store i32 0, ptr %529, align 8, !tbaa !96
  %530 = getelementptr inbounds %struct.wcbox, ptr %528, i64 0, i32 1
  store i32 %519, ptr %530, align 4, !tbaa !94
  %531 = load ptr, ptr %507, align 8, !tbaa !409
  %532 = load i32, ptr %531, align 4, !tbaa !17
  %533 = add nsw i32 %532, 1
  %534 = sext i32 %533 to i64
  %535 = shl nsw i64 %534, 2
  %536 = tail call noalias ptr @malloc(i64 noundef %535) #45
  %537 = getelementptr inbounds %struct.wcbox, ptr %528, i64 0, i32 2
  store ptr %536, ptr %537, align 8, !tbaa !199
  %538 = icmp slt i32 %532, 0
  br i1 %538, label %552, label %539

539:                                              ; preds = %499
  %540 = load ptr, ptr %525, align 8, !tbaa !7
  %541 = getelementptr inbounds %struct.wcbox, ptr %540, i64 0, i32 2
  %542 = load ptr, ptr %541, align 8, !tbaa !199
  br label %543

543:                                              ; preds = %543, %539
  %544 = phi i64 [ 0, %539 ], [ %548, %543 ]
  %545 = getelementptr inbounds i32, ptr %531, i64 %544
  %546 = load i32, ptr %545, align 4, !tbaa !17
  %547 = getelementptr inbounds i32, ptr %542, i64 %544
  store i32 %546, ptr %547, align 4, !tbaa !17
  %548 = add nuw nsw i64 %544, 1
  %549 = load i32, ptr %531, align 4, !tbaa !17
  %550 = sext i32 %549 to i64
  %551 = icmp slt i64 %544, %550
  br i1 %551, label %543, label %552, !llvm.loop !1142

552:                                              ; preds = %543, %499
  %553 = getelementptr inbounds %struct.dlink2, ptr %501, i64 0, i32 2
  %554 = load ptr, ptr %553, align 8, !tbaa !7
  %555 = icmp eq ptr %554, null
  br i1 %555, label %556, label %499, !llvm.loop !1143

556:                                              ; preds = %552
  %557 = load i32, ptr @numberCells, align 4, !tbaa !17
  br label %558

558:                                              ; preds = %556, %490
  %559 = phi i32 [ %557, %556 ], [ %491, %490 ]
  %560 = add nuw nsw i64 %492, 1
  %561 = sext i32 %559 to i64
  %562 = icmp sgt i64 %492, %561
  br i1 %562, label %563, label %490, !llvm.loop !1144

563:                                              ; preds = %558, %424
  %564 = load ptr, ptr @vChanBeginRoot, align 8, !tbaa !7
  %565 = icmp eq ptr %564, null
  br i1 %565, label %569, label %566

566:                                              ; preds = %566, %563
  call void @tpop(ptr noundef nonnull @vChanBeginRoot, ptr noundef nonnull %3, ptr noundef nonnull %1, ptr noundef nonnull %2) #44
  %567 = load ptr, ptr %3, align 8, !tbaa !7
  %568 = icmp eq ptr %567, null
  br i1 %568, label %569, label %566

569:                                              ; preds = %566, %563
  %570 = load ptr, ptr @vChanEndRoot, align 8, !tbaa !7
  %571 = icmp eq ptr %570, null
  br i1 %571, label %575, label %572

572:                                              ; preds = %572, %569
  call void @tpop(ptr noundef nonnull @vChanEndRoot, ptr noundef nonnull %3, ptr noundef nonnull %1, ptr noundef nonnull %2) #44
  %573 = load ptr, ptr %3, align 8, !tbaa !7
  %574 = icmp eq ptr %573, null
  br i1 %574, label %575, label %572

575:                                              ; preds = %572, %569
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #47
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @ygraph() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #47
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #47
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #47
  %4 = load i32, ptr @numberCells, align 4, !tbaa !17
  %5 = add nsw i32 %4, 2
  %6 = sext i32 %5 to i64
  %7 = mul nsw i64 %6, 24
  %8 = tail call noalias ptr @malloc(i64 noundef %7) #45
  store ptr %8, ptr @yNodules, align 8, !tbaa !7
  %9 = icmp slt i32 %4, -1
  br i1 %9, label %22, label %10

10:                                               ; preds = %10, %0
  %11 = phi ptr [ %16, %10 ], [ %8, %0 ]
  %12 = phi i64 [ %18, %10 ], [ 0, %0 ]
  %13 = getelementptr inbounds %struct.nodbox, ptr %11, i64 %12
  store ptr null, ptr %13, align 8, !tbaa !437
  %14 = load ptr, ptr @yNodules, align 8, !tbaa !7
  %15 = getelementptr inbounds %struct.nodbox, ptr %14, i64 %12, i32 1
  store ptr null, ptr %15, align 8, !tbaa !433
  %16 = load ptr, ptr @yNodules, align 8, !tbaa !7
  %17 = getelementptr inbounds %struct.nodbox, ptr %16, i64 %12, i32 2
  store i32 0, ptr %17, align 8, !tbaa !1121
  %18 = add nuw nsw i64 %12, 1
  %19 = load i32, ptr @numberCells, align 4, !tbaa !17
  %20 = sext i32 %19 to i64
  %21 = icmp sgt i64 %12, %20
  br i1 %21, label %22, label %10, !llvm.loop !1145

22:                                               ; preds = %10, %0
  %23 = load ptr, ptr @Hlist, align 8, !tbaa !7
  %24 = load i32, ptr %23, align 8, !tbaa !138
  %25 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %26 = sext i32 %24 to i64
  %27 = getelementptr inbounds %struct.edgebox, ptr %25, i64 %26, i32 3
  %28 = load i32, ptr %27, align 4, !tbaa !140
  %29 = getelementptr inbounds %struct.edgebox, ptr %25, i64 %26, i32 2
  %30 = load i32, ptr %29, align 4, !tbaa !144
  %31 = getelementptr inbounds %struct.edgebox, ptr %25, i64 %26, i32 1
  %32 = load i32, ptr %31, align 4, !tbaa !143
  %33 = load ptr, ptr @hChanBeginRoot, align 8, !tbaa !7
  %34 = tail call ptr (ptr, i32, ...) @tplist(ptr noundef %33, i32 noundef %28) #44
  %35 = icmp eq ptr %34, null
  br i1 %35, label %63, label %36

36:                                               ; preds = %22
  %37 = load ptr, ptr @eArray, align 8, !tbaa !7
  %38 = load ptr, ptr @yNodules, align 8
  %39 = getelementptr inbounds %struct.nodbox, ptr %38, i64 0, i32 1
  %40 = getelementptr inbounds %struct.nodbox, ptr %38, i64 0, i32 2
  br label %41

41:                                               ; preds = %59, %36
  %42 = phi ptr [ %34, %36 ], [ %61, %59 ]
  %43 = load i32, ptr %42, align 8, !tbaa !19
  store i32 %43, ptr %2, align 4, !tbaa !17
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds %struct.ebox, ptr %37, i64 %44, i32 7
  %46 = load i32, ptr %45, align 4, !tbaa !121
  %47 = icmp slt i32 %46, %32
  br i1 %47, label %59, label %48

48:                                               ; preds = %41
  %49 = getelementptr inbounds %struct.ebox, ptr %37, i64 %44, i32 6
  %50 = load i32, ptr %49, align 8, !tbaa !120
  %51 = icmp sgt i32 %50, %30
  br i1 %51, label %59, label %52

52:                                               ; preds = %48
  %53 = load ptr, ptr %39, align 8, !tbaa !433
  %54 = tail call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #45
  store ptr %54, ptr %39, align 8, !tbaa !433
  %55 = getelementptr inbounds %struct.dlink2, ptr %54, i64 0, i32 2
  store ptr %53, ptr %55, align 8, !tbaa !435
  store i32 %24, ptr %54, align 8, !tbaa !407
  %56 = tail call noalias dereferenceable_or_null(8) ptr @malloc(i64 noundef 8) #45
  %57 = getelementptr inbounds %struct.dlink2, ptr %54, i64 0, i32 1
  store ptr %56, ptr %57, align 8, !tbaa !409
  store i32 1, ptr %56, align 4, !tbaa !17
  %58 = getelementptr inbounds i32, ptr %56, i64 1
  store i32 %43, ptr %58, align 4, !tbaa !17
  store i32 1, ptr %40, align 8, !tbaa !1121
  br label %59

59:                                               ; preds = %52, %48, %41
  %60 = getelementptr inbounds %struct.plist, ptr %42, i64 0, i32 1
  %61 = load ptr, ptr %60, align 8, !tbaa !23
  %62 = icmp eq ptr %61, null
  br i1 %62, label %63, label %41, !llvm.loop !1146

63:                                               ; preds = %59, %22
  %64 = load ptr, ptr @Hend, align 8, !tbaa !7
  %65 = load i32, ptr %64, align 8, !tbaa !138
  %66 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %67 = sext i32 %65 to i64
  %68 = getelementptr inbounds %struct.edgebox, ptr %66, i64 %67, i32 3
  %69 = load i32, ptr %68, align 4, !tbaa !140
  store i32 %69, ptr %1, align 4, !tbaa !17
  %70 = getelementptr inbounds %struct.edgebox, ptr %66, i64 %67, i32 2
  %71 = load i32, ptr %70, align 4, !tbaa !144
  %72 = getelementptr inbounds %struct.edgebox, ptr %66, i64 %67, i32 1
  %73 = load i32, ptr %72, align 4, !tbaa !143
  %74 = load ptr, ptr @hChanEndRoot, align 8, !tbaa !7
  %75 = tail call ptr (ptr, i32, ...) @tplist(ptr noundef %74, i32 noundef %69) #44
  %76 = icmp eq ptr %75, null
  br i1 %76, label %119, label %77

77:                                               ; preds = %63
  %78 = load ptr, ptr @eArray, align 8, !tbaa !7
  br label %79

79:                                               ; preds = %114, %77
  %80 = phi ptr [ %115, %114 ], [ %78, %77 ]
  %81 = phi ptr [ %117, %114 ], [ %75, %77 ]
  %82 = load i32, ptr %81, align 8, !tbaa !19
  store i32 %82, ptr %2, align 4, !tbaa !17
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds %struct.ebox, ptr %80, i64 %83, i32 7
  %85 = load i32, ptr %84, align 4, !tbaa !121
  %86 = icmp slt i32 %85, %73
  br i1 %86, label %114, label %87

87:                                               ; preds = %79
  %88 = getelementptr inbounds %struct.ebox, ptr %80, i64 %83, i32 6
  %89 = load i32, ptr %88, align 8, !tbaa !120
  %90 = icmp sgt i32 %89, %71
  br i1 %90, label %114, label %91

91:                                               ; preds = %87
  %92 = load ptr, ptr @yNodules, align 8, !tbaa !7
  %93 = load i32, ptr @numberCells, align 4, !tbaa !17
  %94 = add nsw i32 %93, 1
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds %struct.nodbox, ptr %92, i64 %95
  %97 = load ptr, ptr %96, align 8, !tbaa !437
  %98 = tail call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #45
  store ptr %98, ptr %96, align 8, !tbaa !437
  %99 = load ptr, ptr @yNodules, align 8, !tbaa !7
  %100 = getelementptr inbounds %struct.nodbox, ptr %99, i64 %95
  %101 = load ptr, ptr %100, align 8, !tbaa !437
  %102 = getelementptr inbounds %struct.dlink2, ptr %101, i64 0, i32 2
  store ptr %97, ptr %102, align 8, !tbaa !435
  store i32 %65, ptr %101, align 8, !tbaa !407
  %103 = tail call noalias dereferenceable_or_null(8) ptr @malloc(i64 noundef 8) #45
  %104 = load i32, ptr @numberCells, align 4, !tbaa !17
  %105 = add nsw i32 %104, 1
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds %struct.nodbox, ptr %99, i64 %106
  %108 = load ptr, ptr %107, align 8, !tbaa !437
  %109 = getelementptr inbounds %struct.dlink2, ptr %108, i64 0, i32 1
  store ptr %103, ptr %109, align 8, !tbaa !409
  store i32 1, ptr %103, align 4, !tbaa !17
  %110 = load i32, ptr %2, align 4, !tbaa !17
  %111 = getelementptr inbounds i32, ptr %103, i64 1
  store i32 %110, ptr %111, align 4, !tbaa !17
  %112 = getelementptr inbounds %struct.nodbox, ptr %99, i64 %106, i32 2
  store i32 1, ptr %112, align 8, !tbaa !1121
  %113 = load ptr, ptr @eArray, align 8, !tbaa !7
  br label %114

114:                                              ; preds = %91, %87, %79
  %115 = phi ptr [ %80, %79 ], [ %80, %87 ], [ %113, %91 ]
  %116 = getelementptr inbounds %struct.plist, ptr %81, i64 0, i32 1
  %117 = load ptr, ptr %116, align 8, !tbaa !23
  %118 = icmp eq ptr %117, null
  br i1 %118, label %119, label %79, !llvm.loop !1147

119:                                              ; preds = %114, %63
  %120 = load ptr, ptr @hFixedList, align 8, !tbaa !7
  %121 = getelementptr inbounds %struct.dlink2, ptr %120, i64 0, i32 2
  %122 = load ptr, ptr %121, align 8, !tbaa !150
  %123 = getelementptr inbounds %struct.dlink2, ptr %122, i64 0, i32 2
  %124 = load ptr, ptr %123, align 8, !tbaa !150
  %125 = icmp eq ptr %124, null
  br i1 %125, label %128, label %126

126:                                              ; preds = %119
  %127 = load ptr, ptr @edgeList, align 8, !tbaa !7
  br label %131

128:                                              ; preds = %231, %119
  %129 = load i32, ptr @numberCells, align 4, !tbaa !17
  %130 = icmp slt i32 %129, -1
  br i1 %130, label %389, label %237

131:                                              ; preds = %231, %126
  %132 = phi ptr [ %235, %231 ], [ %124, %126 ]
  %133 = phi ptr [ %233, %231 ], [ %127, %126 ]
  %134 = phi ptr [ %234, %231 ], [ %123, %126 ]
  %135 = phi ptr [ %232, %231 ], [ %122, %126 ]
  %136 = load i32, ptr %135, align 8, !tbaa !138
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds %struct.edgebox, ptr %133, i64 %137
  %139 = load i32, ptr %138, align 4, !tbaa !148
  %140 = load ptr, ptr @yNodules, align 8, !tbaa !7
  %141 = sext i32 %139 to i64
  %142 = getelementptr inbounds %struct.nodbox, ptr %140, i64 %141, i32 2
  %143 = load i32, ptr %142, align 8, !tbaa !1121
  %144 = icmp eq i32 %143, 1
  br i1 %144, label %231, label %145

145:                                              ; preds = %131
  store i32 1, ptr %142, align 8, !tbaa !1121
  br label %146

146:                                              ; preds = %221, %145
  %147 = phi ptr [ %133, %145 ], [ %222, %221 ]
  %148 = phi i32 [ %136, %145 ], [ %227, %221 ]
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds %struct.edgebox, ptr %147, i64 %149, i32 5
  %151 = load i32, ptr %150, align 4, !tbaa !142
  %152 = icmp slt i32 %151, 0
  %153 = getelementptr inbounds %struct.edgebox, ptr %147, i64 %149, i32 3
  %154 = load i32, ptr %153, align 4, !tbaa !140
  store i32 %154, ptr %1, align 4, !tbaa !17
  br i1 %152, label %155, label %188

155:                                              ; preds = %146
  %156 = load ptr, ptr @hChanEndRoot, align 8, !tbaa !7
  %157 = tail call ptr (ptr, i32, ...) @tplist(ptr noundef %156, i32 noundef %154) #44
  %158 = icmp eq ptr %157, null
  br i1 %158, label %221, label %159

159:                                              ; preds = %155
  %160 = load ptr, ptr @eArray, align 8, !tbaa !7
  br label %161

161:                                              ; preds = %183, %159
  %162 = phi ptr [ %184, %183 ], [ %160, %159 ]
  %163 = phi ptr [ %186, %183 ], [ %157, %159 ]
  %164 = load i32, ptr %163, align 8, !tbaa !19
  store i32 %164, ptr %2, align 4, !tbaa !17
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds %struct.ebox, ptr %162, i64 %165, i32 9
  %167 = load i32, ptr %166, align 4, !tbaa !157
  %168 = icmp eq i32 %167, %148
  br i1 %168, label %169, label %183

169:                                              ; preds = %161
  %170 = load ptr, ptr @yNodules, align 8, !tbaa !7
  %171 = getelementptr inbounds %struct.nodbox, ptr %170, i64 %141
  %172 = load ptr, ptr %171, align 8, !tbaa !437
  %173 = tail call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #45
  store ptr %173, ptr %171, align 8, !tbaa !437
  %174 = load ptr, ptr @yNodules, align 8, !tbaa !7
  %175 = getelementptr inbounds %struct.nodbox, ptr %174, i64 %141
  %176 = load ptr, ptr %175, align 8, !tbaa !437
  %177 = getelementptr inbounds %struct.dlink2, ptr %176, i64 0, i32 2
  store ptr %172, ptr %177, align 8, !tbaa !435
  store i32 %148, ptr %176, align 8, !tbaa !407
  %178 = tail call noalias dereferenceable_or_null(8) ptr @malloc(i64 noundef 8) #45
  %179 = getelementptr inbounds %struct.dlink2, ptr %176, i64 0, i32 1
  store ptr %178, ptr %179, align 8, !tbaa !409
  store i32 1, ptr %178, align 4, !tbaa !17
  %180 = load i32, ptr %2, align 4, !tbaa !17
  %181 = getelementptr inbounds i32, ptr %178, i64 1
  store i32 %180, ptr %181, align 4, !tbaa !17
  %182 = load ptr, ptr @eArray, align 8, !tbaa !7
  br label %183

183:                                              ; preds = %169, %161
  %184 = phi ptr [ %162, %161 ], [ %182, %169 ]
  %185 = getelementptr inbounds %struct.plist, ptr %163, i64 0, i32 1
  %186 = load ptr, ptr %185, align 8, !tbaa !23
  %187 = icmp eq ptr %186, null
  br i1 %187, label %221, label %161, !llvm.loop !1148

188:                                              ; preds = %146
  %189 = load ptr, ptr @hChanBeginRoot, align 8, !tbaa !7
  %190 = tail call ptr (ptr, i32, ...) @tplist(ptr noundef %189, i32 noundef %154) #44
  %191 = icmp eq ptr %190, null
  br i1 %191, label %221, label %192

192:                                              ; preds = %188
  %193 = load ptr, ptr @eArray, align 8, !tbaa !7
  br label %194

194:                                              ; preds = %216, %192
  %195 = phi ptr [ %217, %216 ], [ %193, %192 ]
  %196 = phi ptr [ %219, %216 ], [ %190, %192 ]
  %197 = load i32, ptr %196, align 8, !tbaa !19
  store i32 %197, ptr %2, align 4, !tbaa !17
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds %struct.ebox, ptr %195, i64 %198, i32 8
  %200 = load i32, ptr %199, align 8, !tbaa !156
  %201 = icmp eq i32 %200, %148
  br i1 %201, label %202, label %216

202:                                              ; preds = %194
  %203 = load ptr, ptr @yNodules, align 8, !tbaa !7
  %204 = getelementptr inbounds %struct.nodbox, ptr %203, i64 %141, i32 1
  %205 = load ptr, ptr %204, align 8, !tbaa !433
  %206 = tail call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #45
  store ptr %206, ptr %204, align 8, !tbaa !433
  %207 = load ptr, ptr @yNodules, align 8, !tbaa !7
  %208 = getelementptr inbounds %struct.nodbox, ptr %207, i64 %141, i32 1
  %209 = load ptr, ptr %208, align 8, !tbaa !433
  %210 = getelementptr inbounds %struct.dlink2, ptr %209, i64 0, i32 2
  store ptr %205, ptr %210, align 8, !tbaa !435
  store i32 %148, ptr %209, align 8, !tbaa !407
  %211 = tail call noalias dereferenceable_or_null(8) ptr @malloc(i64 noundef 8) #45
  %212 = getelementptr inbounds %struct.dlink2, ptr %209, i64 0, i32 1
  store ptr %211, ptr %212, align 8, !tbaa !409
  store i32 1, ptr %211, align 4, !tbaa !17
  %213 = load i32, ptr %2, align 4, !tbaa !17
  %214 = getelementptr inbounds i32, ptr %211, i64 1
  store i32 %213, ptr %214, align 4, !tbaa !17
  %215 = load ptr, ptr @eArray, align 8, !tbaa !7
  br label %216

216:                                              ; preds = %202, %194
  %217 = phi ptr [ %195, %194 ], [ %215, %202 ]
  %218 = getelementptr inbounds %struct.plist, ptr %196, i64 0, i32 1
  %219 = load ptr, ptr %218, align 8, !tbaa !23
  %220 = icmp eq ptr %219, null
  br i1 %220, label %221, label %194, !llvm.loop !1149

221:                                              ; preds = %216, %188, %183, %155
  %222 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %223 = getelementptr inbounds %struct.edgebox, ptr %222, i64 %149, i32 8
  %224 = load i32, ptr %223, align 4, !tbaa !332
  %225 = sext i32 %224 to i64
  %226 = getelementptr inbounds %struct.edgebox, ptr %222, i64 %225, i32 8
  %227 = load i32, ptr %226, align 4, !tbaa !332
  %228 = icmp eq i32 %227, %136
  br i1 %228, label %229, label %146, !llvm.loop !1150

229:                                              ; preds = %221
  %.lcssa2 = phi ptr [ %222, %221 ]
  %230 = load ptr, ptr %134, align 8, !tbaa !150
  br label %231

231:                                              ; preds = %229, %131
  %232 = phi ptr [ %230, %229 ], [ %132, %131 ]
  %233 = phi ptr [ %.lcssa2, %229 ], [ %133, %131 ]
  %234 = getelementptr inbounds %struct.dlink2, ptr %232, i64 0, i32 2
  %235 = load ptr, ptr %234, align 8, !tbaa !150
  %236 = icmp eq ptr %235, null
  br i1 %236, label %128, label %131, !llvm.loop !1151

237:                                              ; preds = %384, %128
  %238 = phi i64 [ %385, %384 ], [ 0, %128 ]
  %239 = load ptr, ptr @yNodules, align 8, !tbaa !7
  %240 = getelementptr inbounds %struct.nodbox, ptr %239, i64 %238
  %241 = load ptr, ptr %240, align 8, !tbaa !7
  %242 = icmp eq ptr %241, null
  br i1 %242, label %312, label %243

243:                                              ; preds = %306, %237
  %244 = phi ptr [ %308, %306 ], [ %241, %237 ]
  %245 = getelementptr inbounds %struct.dlink2, ptr %244, i64 0, i32 1
  %246 = load ptr, ptr %245, align 8, !tbaa !409
  %247 = load i32, ptr %246, align 4, !tbaa !17
  %248 = sext i32 %247 to i64
  br label %249

249:                                              ; preds = %300, %243
  %250 = phi i64 [ %248, %243 ], [ %301, %300 ]
  %251 = phi ptr [ %246, %243 ], [ %302, %300 ]
  %252 = getelementptr inbounds i32, ptr %251, i64 %250
  %253 = load i32, ptr %252, align 4, !tbaa !17
  store i32 %253, ptr %2, align 4, !tbaa !17
  %254 = load ptr, ptr @eArray, align 8, !tbaa !7
  %255 = sext i32 %253 to i64
  %256 = getelementptr inbounds %struct.ebox, ptr %254, i64 %255, i32 3
  %257 = load i32, ptr %256, align 4, !tbaa !117
  store i32 %257, ptr %1, align 4, !tbaa !17
  %258 = getelementptr inbounds %struct.ebox, ptr %254, i64 %255, i32 6
  %259 = load i32, ptr %258, align 8, !tbaa !120
  %260 = getelementptr inbounds %struct.ebox, ptr %254, i64 %255, i32 7
  %261 = load i32, ptr %260, align 4, !tbaa !121
  %262 = load ptr, ptr @hChanEndRoot, align 8, !tbaa !7
  %263 = tail call ptr (ptr, i32, ...) @tplist(ptr noundef %262, i32 noundef %257) #44
  %264 = icmp eq ptr %263, null
  br i1 %264, label %300, label %265

265:                                              ; preds = %249
  %266 = load ptr, ptr @eArray, align 8, !tbaa !7
  br label %267

267:                                              ; preds = %296, %265
  %268 = phi ptr [ %263, %265 ], [ %298, %296 ]
  %269 = load i32, ptr %268, align 8, !tbaa !19
  store i32 %269, ptr %2, align 4, !tbaa !17
  %270 = sext i32 %269 to i64
  %271 = getelementptr inbounds %struct.ebox, ptr %266, i64 %270, i32 7
  %272 = load i32, ptr %271, align 4, !tbaa !121
  %273 = icmp slt i32 %272, %261
  br i1 %273, label %296, label %274

274:                                              ; preds = %267
  %275 = getelementptr inbounds %struct.ebox, ptr %266, i64 %270, i32 6
  %276 = load i32, ptr %275, align 8, !tbaa !120
  %277 = icmp sgt i32 %276, %259
  br i1 %277, label %296, label %278

278:                                              ; preds = %274
  %.lcssa = phi i32 [ %269, %274 ]
  tail call void @tdelete(ptr noundef nonnull @hChanEndRoot, i32 noundef %257, i32 noundef %.lcssa) #44
  %279 = load ptr, ptr %245, align 8, !tbaa !409
  %280 = load i32, ptr %279, align 4, !tbaa !17
  %281 = add nsw i32 %280, 1
  store i32 %281, ptr %279, align 4, !tbaa !17
  %282 = and i32 %281, 1
  %283 = icmp eq i32 %282, 0
  br i1 %283, label %284, label %290

284:                                              ; preds = %278
  %285 = add nsw i32 %280, 3
  %286 = sext i32 %285 to i64
  %287 = shl nsw i64 %286, 2
  %288 = tail call ptr @realloc(ptr noundef nonnull %279, i64 noundef %287) #46
  store ptr %288, ptr %245, align 8, !tbaa !409
  %289 = load i32, ptr %288, align 4, !tbaa !17
  br label %290

290:                                              ; preds = %284, %278
  %291 = phi i32 [ %289, %284 ], [ %281, %278 ]
  %292 = phi ptr [ %288, %284 ], [ %279, %278 ]
  %293 = load i32, ptr %2, align 4, !tbaa !17
  %294 = sext i32 %291 to i64
  %295 = getelementptr inbounds i32, ptr %292, i64 %294
  store i32 %293, ptr %295, align 4, !tbaa !17
  br label %300

296:                                              ; preds = %274, %267
  %297 = getelementptr inbounds %struct.plist, ptr %268, i64 0, i32 1
  %298 = load ptr, ptr %297, align 8, !tbaa !23
  %299 = icmp eq ptr %298, null
  br i1 %299, label %300, label %267, !llvm.loop !1152

300:                                              ; preds = %296, %290, %249
  %301 = add nsw i64 %250, 1
  %302 = load ptr, ptr %245, align 8, !tbaa !409
  %303 = load i32, ptr %302, align 4, !tbaa !17
  %304 = sext i32 %303 to i64
  %305 = icmp slt i64 %250, %304
  br i1 %305, label %249, label %306, !llvm.loop !1153

306:                                              ; preds = %300
  %307 = getelementptr inbounds %struct.dlink2, ptr %244, i64 0, i32 2
  %308 = load ptr, ptr %307, align 8, !tbaa !7
  %309 = icmp eq ptr %308, null
  br i1 %309, label %310, label %243, !llvm.loop !1154

310:                                              ; preds = %306
  %311 = load ptr, ptr @yNodules, align 8, !tbaa !7
  br label %312

312:                                              ; preds = %310, %237
  %313 = phi ptr [ %311, %310 ], [ %239, %237 ]
  %314 = getelementptr inbounds %struct.nodbox, ptr %313, i64 %238, i32 1
  %315 = load ptr, ptr %314, align 8, !tbaa !7
  %316 = icmp eq ptr %315, null
  br i1 %316, label %384, label %317

317:                                              ; preds = %380, %312
  %318 = phi ptr [ %382, %380 ], [ %315, %312 ]
  %319 = getelementptr inbounds %struct.dlink2, ptr %318, i64 0, i32 1
  %320 = load ptr, ptr %319, align 8, !tbaa !409
  %321 = load i32, ptr %320, align 4, !tbaa !17
  %322 = sext i32 %321 to i64
  br label %323

323:                                              ; preds = %374, %317
  %324 = phi i64 [ %322, %317 ], [ %375, %374 ]
  %325 = phi ptr [ %320, %317 ], [ %376, %374 ]
  %326 = getelementptr inbounds i32, ptr %325, i64 %324
  %327 = load i32, ptr %326, align 4, !tbaa !17
  store i32 %327, ptr %2, align 4, !tbaa !17
  %328 = load ptr, ptr @eArray, align 8, !tbaa !7
  %329 = sext i32 %327 to i64
  %330 = getelementptr inbounds %struct.ebox, ptr %328, i64 %329, i32 4
  %331 = load i32, ptr %330, align 8, !tbaa !118
  store i32 %331, ptr %1, align 4, !tbaa !17
  %332 = getelementptr inbounds %struct.ebox, ptr %328, i64 %329, i32 6
  %333 = load i32, ptr %332, align 8, !tbaa !120
  %334 = getelementptr inbounds %struct.ebox, ptr %328, i64 %329, i32 7
  %335 = load i32, ptr %334, align 4, !tbaa !121
  %336 = load ptr, ptr @hChanBeginRoot, align 8, !tbaa !7
  %337 = tail call ptr (ptr, i32, ...) @tplist(ptr noundef %336, i32 noundef %331) #44
  %338 = icmp eq ptr %337, null
  br i1 %338, label %374, label %339

339:                                              ; preds = %323
  %340 = load ptr, ptr @eArray, align 8, !tbaa !7
  br label %341

341:                                              ; preds = %370, %339
  %342 = phi ptr [ %337, %339 ], [ %372, %370 ]
  %343 = load i32, ptr %342, align 8, !tbaa !19
  store i32 %343, ptr %2, align 4, !tbaa !17
  %344 = sext i32 %343 to i64
  %345 = getelementptr inbounds %struct.ebox, ptr %340, i64 %344, i32 7
  %346 = load i32, ptr %345, align 4, !tbaa !121
  %347 = icmp slt i32 %346, %335
  br i1 %347, label %370, label %348

348:                                              ; preds = %341
  %349 = getelementptr inbounds %struct.ebox, ptr %340, i64 %344, i32 6
  %350 = load i32, ptr %349, align 8, !tbaa !120
  %351 = icmp sgt i32 %350, %333
  br i1 %351, label %370, label %352

352:                                              ; preds = %348
  %.lcssa1 = phi i32 [ %343, %348 ]
  tail call void @tdelete(ptr noundef nonnull @hChanBeginRoot, i32 noundef %331, i32 noundef %.lcssa1) #44
  %353 = load ptr, ptr %319, align 8, !tbaa !409
  %354 = load i32, ptr %353, align 4, !tbaa !17
  %355 = add nsw i32 %354, 1
  store i32 %355, ptr %353, align 4, !tbaa !17
  %356 = and i32 %355, 1
  %357 = icmp eq i32 %356, 0
  br i1 %357, label %358, label %364

358:                                              ; preds = %352
  %359 = add nsw i32 %354, 3
  %360 = sext i32 %359 to i64
  %361 = shl nsw i64 %360, 2
  %362 = tail call ptr @realloc(ptr noundef nonnull %353, i64 noundef %361) #46
  store ptr %362, ptr %319, align 8, !tbaa !409
  %363 = load i32, ptr %362, align 4, !tbaa !17
  br label %364

364:                                              ; preds = %358, %352
  %365 = phi i32 [ %363, %358 ], [ %355, %352 ]
  %366 = phi ptr [ %362, %358 ], [ %353, %352 ]
  %367 = load i32, ptr %2, align 4, !tbaa !17
  %368 = sext i32 %365 to i64
  %369 = getelementptr inbounds i32, ptr %366, i64 %368
  store i32 %367, ptr %369, align 4, !tbaa !17
  br label %374

370:                                              ; preds = %348, %341
  %371 = getelementptr inbounds %struct.plist, ptr %342, i64 0, i32 1
  %372 = load ptr, ptr %371, align 8, !tbaa !23
  %373 = icmp eq ptr %372, null
  br i1 %373, label %374, label %341, !llvm.loop !1155

374:                                              ; preds = %370, %364, %323
  %375 = add nsw i64 %324, 1
  %376 = load ptr, ptr %319, align 8, !tbaa !409
  %377 = load i32, ptr %376, align 4, !tbaa !17
  %378 = sext i32 %377 to i64
  %379 = icmp slt i64 %324, %378
  br i1 %379, label %323, label %380, !llvm.loop !1156

380:                                              ; preds = %374
  %381 = getelementptr inbounds %struct.dlink2, ptr %318, i64 0, i32 2
  %382 = load ptr, ptr %381, align 8, !tbaa !7
  %383 = icmp eq ptr %382, null
  br i1 %383, label %384, label %317, !llvm.loop !1157

384:                                              ; preds = %380, %312
  %385 = add nuw nsw i64 %238, 1
  %386 = load i32, ptr @numberCells, align 4, !tbaa !17
  %387 = sext i32 %386 to i64
  %388 = icmp sgt i64 %238, %387
  br i1 %388, label %389, label %237, !llvm.loop !1158

389:                                              ; preds = %384, %128
  store i32 0, ptr @numYnodes, align 4, !tbaa !17
  %390 = load ptr, ptr @hFixedList, align 8, !tbaa !7
  %391 = icmp eq ptr %390, null
  br i1 %391, label %406, label %392

392:                                              ; preds = %389
  %393 = load ptr, ptr @edgeList, align 8, !tbaa !7
  br label %394

394:                                              ; preds = %394, %392
  %395 = phi ptr [ %390, %392 ], [ %402, %394 ]
  %396 = load i32, ptr @numYnodes, align 4, !tbaa !17
  %397 = add nsw i32 %396, 1
  store i32 %397, ptr @numYnodes, align 4, !tbaa !17
  %398 = load i32, ptr %395, align 8, !tbaa !138
  %399 = sext i32 %398 to i64
  %400 = getelementptr inbounds %struct.edgebox, ptr %393, i64 %399, i32 9
  store i32 %397, ptr %400, align 4, !tbaa !1136
  %401 = getelementptr inbounds %struct.dlink2, ptr %395, i64 0, i32 2
  %402 = load ptr, ptr %401, align 8, !tbaa !7
  %403 = icmp eq ptr %402, null
  br i1 %403, label %404, label %394, !llvm.loop !1159

404:                                              ; preds = %394
  %405 = load i32, ptr @numYnodes, align 4, !tbaa !17
  br label %406

406:                                              ; preds = %404, %389
  %407 = phi i32 [ %405, %404 ], [ 0, %389 ]
  %408 = add i32 %407, 1
  %409 = sext i32 %408 to i64
  %410 = shl nsw i64 %409, 3
  %411 = tail call noalias ptr @malloc(i64 noundef %410) #45
  store ptr %411, ptr @yNodeArray, align 8, !tbaa !7
  %412 = icmp slt i32 %407, 1
  br i1 %412, label %415, label %413

413:                                              ; preds = %406
  %414 = zext i32 %408 to i64
  br label %418

415:                                              ; preds = %418, %406
  %416 = load i32, ptr @numberCells, align 4, !tbaa !17
  %417 = icmp slt i32 %416, 1
  br i1 %417, label %424, label %427

418:                                              ; preds = %418, %413
  %419 = phi i64 [ 1, %413 ], [ %422, %418 ]
  %420 = load ptr, ptr @yNodeArray, align 8, !tbaa !7
  %421 = getelementptr inbounds ptr, ptr %420, i64 %419
  store ptr null, ptr %421, align 8, !tbaa !7
  %422 = add nuw nsw i64 %419, 1
  %423 = icmp eq i64 %422, %414
  br i1 %423, label %415, label %418, !llvm.loop !1160

424:                                              ; preds = %485, %415
  %425 = phi i32 [ %416, %415 ], [ %486, %485 ]
  %426 = icmp slt i32 %425, -1
  br i1 %426, label %563, label %490

427:                                              ; preds = %485, %415
  %428 = phi i32 [ %486, %485 ], [ %416, %415 ]
  %429 = phi i64 [ %487, %485 ], [ 1, %415 ]
  %430 = load ptr, ptr @yNodules, align 8, !tbaa !7
  %431 = getelementptr inbounds %struct.nodbox, ptr %430, i64 %429
  %432 = load ptr, ptr %431, align 8, !tbaa !7
  %433 = icmp eq ptr %432, null
  br i1 %433, label %485, label %434

434:                                              ; preds = %479, %427
  %435 = phi ptr [ %481, %479 ], [ %432, %427 ]
  %436 = load i32, ptr %435, align 8, !tbaa !407
  %437 = sext i32 %436 to i64
  %438 = load ptr, ptr @yNodules, align 8, !tbaa !7
  %439 = getelementptr inbounds %struct.nodbox, ptr %438, i64 %429, i32 1
  %440 = load ptr, ptr %439, align 8, !tbaa !7
  %441 = icmp eq ptr %440, null
  br i1 %441, label %479, label %442

442:                                              ; preds = %434
  %443 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %444 = getelementptr inbounds %struct.edgebox, ptr %443, i64 %437, i32 9
  %445 = load i32, ptr %444, align 4, !tbaa !1136
  %446 = sext i32 %445 to i64
  %447 = load ptr, ptr @yNodeArray, align 8, !tbaa !7
  %448 = getelementptr inbounds ptr, ptr %447, i64 %446
  %449 = load ptr, ptr %448, align 8, !tbaa !7
  br label %450

450:                                              ; preds = %450, %442
  %451 = phi ptr [ %449, %442 ], [ %474, %450 ]
  %452 = phi ptr [ %447, %442 ], [ %461, %450 ]
  %453 = phi ptr [ %443, %442 ], [ %468, %450 ]
  %454 = phi ptr [ %440, %442 ], [ %477, %450 ]
  %455 = load i32, ptr %454, align 8, !tbaa !407
  %456 = sext i32 %455 to i64
  %457 = getelementptr inbounds %struct.edgebox, ptr %453, i64 %456, i32 9
  %458 = load i32, ptr %457, align 4, !tbaa !1136
  %459 = getelementptr inbounds ptr, ptr %452, i64 %446
  %460 = tail call noalias dereferenceable_or_null(32) ptr @malloc(i64 noundef 32) #45
  store ptr %460, ptr %459, align 8, !tbaa !7
  %461 = load ptr, ptr @yNodeArray, align 8, !tbaa !7
  %462 = getelementptr inbounds ptr, ptr %461, i64 %446
  %463 = load ptr, ptr %462, align 8, !tbaa !7
  %464 = getelementptr inbounds %struct.wcbox, ptr %463, i64 0, i32 4
  store ptr %451, ptr %464, align 8, !tbaa !887
  %465 = load ptr, ptr %462, align 8, !tbaa !7
  store i32 1, ptr %465, align 8, !tbaa !198
  %466 = getelementptr inbounds %struct.wcbox, ptr %465, i64 0, i32 1
  store i32 %458, ptr %466, align 4, !tbaa !94
  %467 = getelementptr inbounds %struct.wcbox, ptr %465, i64 0, i32 2
  store ptr null, ptr %467, align 8, !tbaa !199
  %468 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %469 = getelementptr inbounds %struct.edgebox, ptr %468, i64 %456, i32 3
  %470 = load i32, ptr %469, align 4, !tbaa !140
  %471 = getelementptr inbounds %struct.edgebox, ptr %468, i64 %437, i32 3
  %472 = load i32, ptr %471, align 4, !tbaa !140
  %473 = sub nsw i32 %470, %472
  %474 = load ptr, ptr %462, align 8, !tbaa !7
  %475 = getelementptr inbounds %struct.wcbox, ptr %474, i64 0, i32 3
  store i32 %473, ptr %475, align 8, !tbaa !96
  %476 = getelementptr inbounds %struct.dlink2, ptr %454, i64 0, i32 2
  %477 = load ptr, ptr %476, align 8, !tbaa !7
  %478 = icmp eq ptr %477, null
  br i1 %478, label %479, label %450, !llvm.loop !1161

479:                                              ; preds = %450, %434
  %480 = getelementptr inbounds %struct.dlink2, ptr %435, i64 0, i32 2
  %481 = load ptr, ptr %480, align 8, !tbaa !7
  %482 = icmp eq ptr %481, null
  br i1 %482, label %483, label %434, !llvm.loop !1162

483:                                              ; preds = %479
  %484 = load i32, ptr @numberCells, align 4, !tbaa !17
  br label %485

485:                                              ; preds = %483, %427
  %486 = phi i32 [ %484, %483 ], [ %428, %427 ]
  %487 = add nuw nsw i64 %429, 1
  %488 = sext i32 %486 to i64
  %489 = icmp slt i64 %429, %488
  br i1 %489, label %427, label %424, !llvm.loop !1163

490:                                              ; preds = %558, %424
  %491 = phi i32 [ %559, %558 ], [ %425, %424 ]
  %492 = phi i64 [ %560, %558 ], [ 0, %424 ]
  %493 = load ptr, ptr @yNodules, align 8, !tbaa !7
  %494 = getelementptr inbounds %struct.nodbox, ptr %493, i64 %492, i32 1
  %495 = load ptr, ptr %494, align 8, !tbaa !7
  %496 = icmp eq ptr %495, null
  br i1 %496, label %558, label %497

497:                                              ; preds = %490
  %498 = load ptr, ptr @yNodeArray, align 8, !tbaa !7
  br label %499

499:                                              ; preds = %552, %497
  %500 = phi ptr [ %524, %552 ], [ %498, %497 ]
  %501 = phi ptr [ %554, %552 ], [ %495, %497 ]
  %502 = load i32, ptr %501, align 8, !tbaa !407
  %503 = load ptr, ptr @edgeList, align 8, !tbaa !7
  %504 = sext i32 %502 to i64
  %505 = getelementptr inbounds %struct.edgebox, ptr %503, i64 %504, i32 9
  %506 = load i32, ptr %505, align 4, !tbaa !1136
  %507 = getelementptr inbounds %struct.dlink2, ptr %501, i64 0, i32 1
  %508 = load ptr, ptr %507, align 8, !tbaa !409
  %509 = load i32, ptr %508, align 4, !tbaa !17
  %510 = sext i32 %509 to i64
  %511 = getelementptr inbounds i32, ptr %508, i64 %510
  %512 = load i32, ptr %511, align 4, !tbaa !17
  %513 = load ptr, ptr @eArray, align 8, !tbaa !7
  %514 = sext i32 %512 to i64
  %515 = getelementptr inbounds %struct.ebox, ptr %513, i64 %514, i32 9
  %516 = load i32, ptr %515, align 4, !tbaa !157
  %517 = sext i32 %516 to i64
  %518 = getelementptr inbounds %struct.edgebox, ptr %503, i64 %517, i32 9
  %519 = load i32, ptr %518, align 4, !tbaa !1136
  %520 = sext i32 %506 to i64
  %521 = getelementptr inbounds ptr, ptr %500, i64 %520
  %522 = load ptr, ptr %521, align 8, !tbaa !7
  %523 = tail call noalias dereferenceable_or_null(32) ptr @malloc(i64 noundef 32) #45
  store ptr %523, ptr %521, align 8, !tbaa !7
  %524 = load ptr, ptr @yNodeArray, align 8, !tbaa !7
  %525 = getelementptr inbounds ptr, ptr %524, i64 %520
  %526 = load ptr, ptr %525, align 8, !tbaa !7
  %527 = getelementptr inbounds %struct.wcbox, ptr %526, i64 0, i32 4
  store ptr %522, ptr %527, align 8, !tbaa !887
  %528 = load ptr, ptr %525, align 8, !tbaa !7
  store i32 0, ptr %528, align 8, !tbaa !198
  %529 = getelementptr inbounds %struct.wcbox, ptr %528, i64 0, i32 3
  store i32 0, ptr %529, align 8, !tbaa !96
  %530 = getelementptr inbounds %struct.wcbox, ptr %528, i64 0, i32 1
  store i32 %519, ptr %530, align 4, !tbaa !94
  %531 = load ptr, ptr %507, align 8, !tbaa !409
  %532 = load i32, ptr %531, align 4, !tbaa !17
  %533 = add nsw i32 %532, 1
  %534 = sext i32 %533 to i64
  %535 = shl nsw i64 %534, 2
  %536 = tail call noalias ptr @malloc(i64 noundef %535) #45
  %537 = getelementptr inbounds %struct.wcbox, ptr %528, i64 0, i32 2
  store ptr %536, ptr %537, align 8, !tbaa !199
  %538 = icmp slt i32 %532, 0
  br i1 %538, label %552, label %539

539:                                              ; preds = %499
  %540 = load ptr, ptr %525, align 8, !tbaa !7
  %541 = getelementptr inbounds %struct.wcbox, ptr %540, i64 0, i32 2
  %542 = load ptr, ptr %541, align 8, !tbaa !199
  br label %543

543:                                              ; preds = %543, %539
  %544 = phi i64 [ 0, %539 ], [ %548, %543 ]
  %545 = getelementptr inbounds i32, ptr %531, i64 %544
  %546 = load i32, ptr %545, align 4, !tbaa !17
  %547 = getelementptr inbounds i32, ptr %542, i64 %544
  store i32 %546, ptr %547, align 4, !tbaa !17
  %548 = add nuw nsw i64 %544, 1
  %549 = load i32, ptr %531, align 4, !tbaa !17
  %550 = sext i32 %549 to i64
  %551 = icmp slt i64 %544, %550
  br i1 %551, label %543, label %552, !llvm.loop !1164

552:                                              ; preds = %543, %499
  %553 = getelementptr inbounds %struct.dlink2, ptr %501, i64 0, i32 2
  %554 = load ptr, ptr %553, align 8, !tbaa !7
  %555 = icmp eq ptr %554, null
  br i1 %555, label %556, label %499, !llvm.loop !1165

556:                                              ; preds = %552
  %557 = load i32, ptr @numberCells, align 4, !tbaa !17
  br label %558

558:                                              ; preds = %556, %490
  %559 = phi i32 [ %557, %556 ], [ %491, %490 ]
  %560 = add nuw nsw i64 %492, 1
  %561 = sext i32 %559 to i64
  %562 = icmp sgt i64 %492, %561
  br i1 %562, label %563, label %490, !llvm.loop !1166

563:                                              ; preds = %558, %424
  %564 = load ptr, ptr @hChanBeginRoot, align 8, !tbaa !7
  %565 = icmp eq ptr %564, null
  br i1 %565, label %569, label %566

566:                                              ; preds = %566, %563
  call void @tpop(ptr noundef nonnull @hChanBeginRoot, ptr noundef nonnull %3, ptr noundef nonnull %1, ptr noundef nonnull %2) #44
  %567 = load ptr, ptr %3, align 8, !tbaa !7
  %568 = icmp eq ptr %567, null
  br i1 %568, label %569, label %566

569:                                              ; preds = %566, %563
  %570 = load ptr, ptr @hChanEndRoot, align 8, !tbaa !7
  %571 = icmp eq ptr %570, null
  br i1 %571, label %575, label %572

572:                                              ; preds = %572, %569
  call void @tpop(ptr noundef nonnull @hChanEndRoot, ptr noundef nonnull %3, ptr noundef nonnull %1, ptr noundef nonnull %2) #44
  %573 = load ptr, ptr %3, align 8, !tbaa !7
  %574 = icmp eq ptr %573, null
  br i1 %574, label %575, label %572

575:                                              ; preds = %572, %569
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #47
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #47
  ret void
}

attributes #0 = { nounwind optsize uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { mustprogress nounwind optsize willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nofree norecurse nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nofree nounwind optsize uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #8 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #9 = { mustprogress nounwind optsize willreturn allockind("realloc") allocsize(1) memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #10 = { nofree nounwind }
attributes #11 = { nofree nounwind optsize "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #12 = { nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #13 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #14 = { nofree nosync nounwind optsize memory(readwrite, argmem: read, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #15 = { mustprogress nofree nounwind optsize willreturn memory(write) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #16 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #17 = { noreturn nounwind optsize "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #18 = { nofree norecurse nosync nounwind optsize memory(readwrite, argmem: read, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #19 = { nofree nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #20 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #21 = { nofree nounwind optsize memory(readwrite, inaccessiblemem: write) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #22 = { optsize "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #23 = { nofree nounwind willreturn memory(argmem: read) }
attributes #24 = { mustprogress nofree nounwind optsize willreturn memory(argmem: read) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #25 = { nofree nounwind willreturn memory(argmem: readwrite) }
attributes #26 = { nofree nounwind optsize memory(readwrite, argmem: write) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #27 = { nofree nounwind optsize memory(read, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #28 = { noreturn nounwind optsize uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #29 = { nounwind optsize "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #30 = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite) }
attributes #31 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #32 = { mustprogress nofree nounwind optsize willreturn memory(write, argmem: none, inaccessiblemem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #33 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #34 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #35 = { nofree nosync nounwind optsize memory(argmem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #36 = { nofree nounwind willreturn allockind("alloc,zeroed") allocsize(0,1) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #37 = { mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, argmem: none, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #38 = { nofree nosync nounwind optsize memory(readwrite, argmem: write, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #39 = { mustprogress nofree nosync nounwind optsize willreturn memory(read, argmem: none, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #40 = { mustprogress nofree nounwind optsize willreturn memory(readwrite, argmem: write, inaccessiblemem: write) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #41 = { nounwind optsize memory(readwrite, argmem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #42 = { nofree norecurse nosync nounwind optsize memory(none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #43 = { optsize }
attributes #44 = { nounwind optsize }
attributes #45 = { nounwind optsize allocsize(0) }
attributes #46 = { nounwind optsize allocsize(1) }
attributes #47 = { nounwind }
attributes #48 = { cold }
attributes #49 = { noreturn nounwind optsize }
attributes #50 = { nounwind optsize willreturn memory(read) }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0}
!llvm.module.flags = !{!1, !2, !3, !4, !5, !6}

!0 = !{!"clang version 17.0.6 (https://github.com/Casperento/llvm-project.git 9b0073551ece0d22bf3378af2b03e456a26031b6)"}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 8, !"PIC Level", i32 2}
!3 = !{i32 7, !"PIE Level", i32 2}
!4 = !{i32 7, !"uwtable", i32 2}
!5 = !{i32 1, !"ThinLTO", i32 0}
!6 = !{i32 1, !"EnableSplitLTOUnit", i32 1}
!7 = !{!8, !8, i64 0}
!8 = !{!"any pointer", !9, i64 0}
!9 = !{!"omnipotent char", !10, i64 0}
!10 = !{!"Simple C/C++ TBAA"}
!11 = !{!12, !8, i64 8}
!12 = !{!"tnode", !13, i64 0, !13, i64 4, !8, i64 8, !8, i64 16, !8, i64 24, !8, i64 32, !8, i64 40, !13, i64 48, !13, i64 52, !8, i64 56}
!13 = !{!"int", !9, i64 0}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.mustprogress"}
!16 = !{!12, !13, i64 0}
!17 = !{!13, !13, i64 0}
!18 = !{!12, !8, i64 56}
!19 = !{!20, !13, i64 0}
!20 = !{!"plist", !13, i64 0, !8, i64 8}
!21 = !{!12, !13, i64 4}
!22 = distinct !{!22, !15}
!23 = !{!20, !8, i64 8}
!24 = !{!12, !13, i64 48}
!25 = !{!12, !13, i64 52}
!26 = !{!12, !8, i64 40}
!27 = !{!12, !8, i64 16}
!28 = !{!12, !8, i64 24}
!29 = distinct !{!29, !15}
!30 = distinct !{!30, !15}
!31 = !{!12, !8, i64 32}
!32 = distinct !{!32, !15}
!33 = distinct !{!33, !15}
!34 = distinct !{!34, !15}
!35 = distinct !{!35, !15}
!36 = !{!37, !37, i64 0}
!37 = !{!"double", !9, i64 0}
!38 = !{!39, !8, i64 64}
!39 = !{!"dimbox", !8, i64 0, !13, i64 8, !13, i64 12, !13, i64 16, !13, i64 20, !13, i64 24, !13, i64 28, !13, i64 32, !13, i64 36, !13, i64 40, !13, i64 44, !37, i64 48, !37, i64 56, !8, i64 64}
!40 = !{!39, !37, i64 48}
!41 = !{!39, !37, i64 56}
!42 = distinct !{!42, !15}
!43 = distinct !{!43, !15}
!44 = distinct !{!44, !15}
!45 = !{!46, !13, i64 56}
!46 = !{!"cellbox", !8, i64 0, !13, i64 8, !13, i64 12, !13, i64 16, !9, i64 20, !13, i64 56, !13, i64 60, !13, i64 64, !13, i64 68, !13, i64 72, !13, i64 76, !13, i64 80, !37, i64 88, !37, i64 96, !37, i64 104, !37, i64 112, !37, i64 120, !13, i64 128, !13, i64 132, !8, i64 136, !8, i64 144, !9, i64 152, !8, i64 216}
!47 = !{!48, !8, i64 88}
!48 = !{!"tilebox", !8, i64 0, !37, i64 8, !37, i64 16, !37, i64 24, !37, i64 32, !13, i64 40, !13, i64 44, !13, i64 48, !13, i64 52, !13, i64 56, !13, i64 60, !13, i64 64, !13, i64 68, !13, i64 72, !13, i64 76, !13, i64 80, !13, i64 84, !8, i64 88, !8, i64 96}
!49 = !{!50, !8, i64 0}
!50 = !{!"termbox", !8, i64 0, !13, i64 8, !13, i64 12, !13, i64 16, !13, i64 20, !13, i64 24}
!51 = !{!50, !13, i64 8}
!52 = !{!50, !13, i64 12}
!53 = !{!50, !13, i64 24}
!54 = !{!39, !8, i64 0}
!55 = !{!56, !13, i64 24}
!56 = !{!"netbox", !8, i64 0, !13, i64 8, !13, i64 12, !13, i64 16, !13, i64 20, !13, i64 24, !13, i64 28, !13, i64 32, !13, i64 36, !13, i64 40}
!57 = !{!56, !13, i64 32}
!58 = !{!56, !13, i64 28}
!59 = !{!56, !13, i64 40}
!60 = !{!61, !13, i64 0}
!61 = !{!"termnets", !13, i64 0, !8, i64 8}
!62 = !{!61, !8, i64 8}
!63 = !{!56, !8, i64 0}
!64 = !{!56, !13, i64 8}
!65 = !{!56, !13, i64 12}
!66 = distinct !{!66, !15}
!67 = distinct !{!67, !15}
!68 = distinct !{!68, !15}
!69 = distinct !{!69, !15}
!70 = distinct !{!70, !15}
!71 = distinct !{!71, !15}
!72 = distinct !{!72, !15}
!73 = distinct !{!73, !15}
!74 = distinct !{!74, !15}
!75 = distinct !{!75, !15}
!76 = distinct !{!76, !15}
!77 = distinct !{!77, !15}
!78 = distinct !{!78, !15}
!79 = !{!9, !9, i64 0}
!80 = distinct !{!80, !15}
!81 = distinct !{!81, !15}
!82 = distinct !{!82, !15}
!83 = distinct !{!83, !15}
!84 = distinct !{!84, !15}
!85 = distinct !{!85, !15}
!86 = distinct !{!86, !15}
!87 = distinct !{!87, !15}
!88 = distinct !{!88, !15}
!89 = distinct !{!89, !15}
!90 = !{!91, !13, i64 4}
!91 = !{!"bellbox", !13, i64 0, !13, i64 4}
!92 = !{!91, !13, i64 0}
!93 = distinct !{!93, !15}
!94 = !{!95, !13, i64 4}
!95 = !{!"wcbox", !13, i64 0, !13, i64 4, !8, i64 8, !13, i64 16, !8, i64 24}
!96 = !{!95, !13, i64 16}
!97 = distinct !{!97, !15}
!98 = distinct !{!98, !15}
!99 = distinct !{!99, !15}
!100 = distinct !{!100, !15}
!101 = distinct !{!101, !15}
!102 = !{!103, !13, i64 0}
!103 = !{!"bustbox", !13, i64 0, !13, i64 4}
!104 = !{!103, !13, i64 4}
!105 = distinct !{!105, !15}
!106 = distinct !{!106, !15}
!107 = distinct !{!107, !15}
!108 = distinct !{!108, !15}
!109 = distinct !{!109, !15}
!110 = distinct !{!110, !15}
!111 = distinct !{!111, !15}
!112 = distinct !{!112, !15}
!113 = distinct !{!113, !15}
!114 = !{!115, !13, i64 0}
!115 = !{!"ebox", !13, i64 0, !13, i64 4, !13, i64 8, !13, i64 12, !13, i64 16, !13, i64 20, !13, i64 24, !13, i64 28, !13, i64 32, !13, i64 36, !13, i64 40, !13, i64 44, !8, i64 48}
!116 = !{!115, !13, i64 4}
!117 = !{!115, !13, i64 12}
!118 = !{!115, !13, i64 16}
!119 = !{!115, !13, i64 20}
!120 = !{!115, !13, i64 24}
!121 = !{!115, !13, i64 28}
!122 = distinct !{!122, !15}
!123 = !{!124, !13, i64 0}
!124 = !{!"rect", !13, i64 0, !13, i64 4, !13, i64 8, !13, i64 12, !13, i64 16, !13, i64 20, !13, i64 24, !13, i64 28, !13, i64 32, !13, i64 36, !13, i64 40, !13, i64 44, !13, i64 48}
!125 = !{!124, !13, i64 4}
!126 = !{!124, !13, i64 20}
!127 = !{!124, !13, i64 16}
!128 = !{!124, !13, i64 28}
!129 = !{!124, !13, i64 24}
!130 = distinct !{!130, !15}
!131 = !{!132, !13, i64 0}
!132 = !{!"dlink2", !13, i64 0, !8, i64 8, !8, i64 16}
!133 = !{i32 0, i32 2}
!134 = distinct !{!134, !15}
!135 = distinct !{!135, !15}
!136 = distinct !{!136, !15}
!137 = distinct !{!137, !15}
!138 = !{!139, !13, i64 0}
!139 = !{!"dlink1", !13, i64 0, !8, i64 8, !8, i64 16}
!140 = !{!141, !13, i64 12}
!141 = !{!"edgebox", !13, i64 0, !13, i64 4, !13, i64 8, !13, i64 12, !13, i64 16, !13, i64 20, !13, i64 24, !13, i64 28, !13, i64 32, !13, i64 36}
!142 = !{!141, !13, i64 20}
!143 = !{!141, !13, i64 4}
!144 = !{!141, !13, i64 8}
!145 = distinct !{!145, !15}
!146 = distinct !{!146, !15}
!147 = !{!141, !13, i64 24}
!148 = !{!141, !13, i64 0}
!149 = !{!124, !13, i64 8}
!150 = !{!139, !8, i64 16}
!151 = distinct !{!151, !15}
!152 = !{!139, !8, i64 8}
!153 = distinct !{!153, !15}
!154 = distinct !{!154, !15}
!155 = !{!115, !13, i64 8}
!156 = !{!115, !13, i64 32}
!157 = !{!115, !13, i64 36}
!158 = distinct !{!158, !15}
!159 = distinct !{!159, !15}
!160 = !{!124, !13, i64 12}
!161 = distinct !{!161, !15}
!162 = distinct !{!162, !15}
!163 = distinct !{!163, !15}
!164 = !{!46, !13, i64 12}
!165 = !{!46, !13, i64 16}
!166 = distinct !{!166, !15}
!167 = !{!48, !13, i64 56}
!168 = !{!48, !13, i64 60}
!169 = !{!48, !13, i64 64}
!170 = !{!48, !13, i64 68}
!171 = !{!46, !13, i64 60}
!172 = !{!48, !8, i64 0}
!173 = distinct !{!173, !15}
!174 = distinct !{!174, !15}
!175 = distinct !{!175, !15}
!176 = distinct !{!176, !15}
!177 = distinct !{!177, !15}
!178 = distinct !{!178, !15}
!179 = distinct !{!179, !15}
!180 = distinct !{!180, !15}
!181 = distinct !{!181, !15}
!182 = distinct !{!182, !15}
!183 = distinct !{!183, !15}
!184 = !{!115, !8, i64 48}
!185 = distinct !{!185, !15}
!186 = !{!187, !13, i64 12}
!187 = !{!"nrbox", !8, i64 0, !13, i64 8, !13, i64 12, !13, i64 16}
!188 = !{!187, !8, i64 0}
!189 = !{!190, !13, i64 0}
!190 = !{!"chanbox", !13, i64 0, !13, i64 4, !13, i64 8, !13, i64 12, !8, i64 16}
!191 = !{!190, !13, i64 4}
!192 = distinct !{!192, !15}
!193 = distinct !{!193, !15}
!194 = !{!115, !13, i64 40}
!195 = distinct !{!195, !15}
!196 = distinct !{!196, !15}
!197 = distinct !{!197, !15}
!198 = !{!95, !13, i64 0}
!199 = !{!95, !8, i64 8}
!200 = distinct !{!200, !15}
!201 = distinct !{!201, !15}
!202 = distinct !{!202, !15}
!203 = distinct !{!203, !15}
!204 = distinct !{!204, !15}
!205 = distinct !{!205, !15}
!206 = distinct !{!206, !15}
!207 = !{!208, !13, i64 0}
!208 = !{!"clbox", !13, i64 0, !13, i64 4, !13, i64 8, !13, i64 12, !13, i64 16, !13, i64 20, !13, i64 24, !8, i64 32}
!209 = !{!208, !13, i64 24}
!210 = !{!208, !13, i64 4}
!211 = !{!208, !13, i64 8}
!212 = !{!208, !13, i64 12}
!213 = distinct !{!213, !15}
!214 = distinct !{!214, !15}
!215 = distinct !{!215, !15}
!216 = distinct !{!216, !15}
!217 = distinct !{!217, !15}
!218 = !{!208, !13, i64 16}
!219 = !{!208, !13, i64 20}
!220 = !{!208, !8, i64 32}
!221 = distinct !{!221, !15}
!222 = distinct !{!222, !15}
!223 = !{!46, !13, i64 132}
!224 = !{!46, !8, i64 136}
!225 = !{!48, !8, i64 96}
!226 = !{!46, !8, i64 144}
!227 = !{!46, !13, i64 128}
!228 = !{!229, !13, i64 36}
!229 = !{!"uncombox", !13, i64 0, !13, i64 4, !13, i64 8, !13, i64 12, !13, i64 16, !13, i64 20, !13, i64 24, !13, i64 28, !13, i64 32, !13, i64 36, !13, i64 40}
!230 = !{!229, !13, i64 40}
!231 = distinct !{!231, !15}
!232 = !{!233, !13, i64 0}
!233 = !{!"contentbox", !13, i64 0, !13, i64 4, !13, i64 8, !13, i64 12, !13, i64 16}
!234 = !{!233, !13, i64 16}
!235 = !{!233, !13, i64 12}
!236 = !{!46, !37, i64 104}
!237 = !{!46, !37, i64 96}
!238 = !{!239, !13, i64 4}
!239 = !{!"locbox", !13, i64 0, !13, i64 4, !13, i64 8, !13, i64 12}
!240 = !{!239, !13, i64 0}
!241 = !{!242, !13, i64 8}
!242 = !{!"flogbox", !13, i64 0, !13, i64 4, !13, i64 8, !13, i64 12}
!243 = distinct !{!243, !15}
!244 = !{!242, !13, i64 12}
!245 = distinct !{!245, !15}
!246 = distinct !{!246, !15, !247, !248}
!247 = !{!"llvm.loop.isvectorized", i32 1}
!248 = !{!"llvm.loop.unroll.runtime.disable"}
!249 = distinct !{!249, !15}
!250 = !{!229, !13, i64 4}
!251 = !{!229, !13, i64 28}
!252 = distinct !{!252, !15}
!253 = distinct !{!253, !15}
!254 = distinct !{!254, !15}
!255 = distinct !{!255, !15}
!256 = distinct !{!256, !15}
!257 = distinct !{!257, !15}
!258 = !{!242, !13, i64 0}
!259 = !{!242, !13, i64 4}
!260 = distinct !{!260, !15}
!261 = distinct !{!261, !15}
!262 = distinct !{!262, !15}
!263 = distinct !{!263, !15}
!264 = distinct !{!264, !15}
!265 = distinct !{!265, !15}
!266 = distinct !{!266, !15}
!267 = distinct !{!267, !15}
!268 = distinct !{!268, !15}
!269 = distinct !{!269, !15}
!270 = distinct !{!270, !15}
!271 = distinct !{!271, !15}
!272 = distinct !{!272, !15}
!273 = distinct !{!273, !15}
!274 = distinct !{!274, !15}
!275 = distinct !{!275, !15}
!276 = distinct !{!276, !15}
!277 = distinct !{!277, !15}
!278 = distinct !{!278, !15}
!279 = distinct !{!279, !15}
!280 = distinct !{!280, !15}
!281 = distinct !{!281, !15}
!282 = distinct !{!282, !15}
!283 = distinct !{!283, !15}
!284 = distinct !{!284, !15}
!285 = distinct !{!285, !15}
!286 = distinct !{!286, !15}
!287 = distinct !{!287, !15}
!288 = distinct !{!288, !15}
!289 = distinct !{!289, !15}
!290 = distinct !{!290, !15}
!291 = !{!46, !8, i64 0}
!292 = !{!48, !37, i64 8}
!293 = !{!48, !37, i64 16}
!294 = !{!48, !37, i64 24}
!295 = !{!48, !37, i64 32}
!296 = distinct !{!296, !15}
!297 = !{!46, !13, i64 76}
!298 = !{!229, !13, i64 0}
!299 = distinct !{!299, !15}
!300 = distinct !{!300, !15}
!301 = !{!39, !13, i64 8}
!302 = !{!39, !13, i64 20}
!303 = !{!39, !13, i64 12}
!304 = !{!39, !13, i64 40}
!305 = !{!39, !13, i64 28}
!306 = distinct !{!306, !15}
!307 = distinct !{!307, !15}
!308 = distinct !{!308, !15}
!309 = distinct !{!309, !15}
!310 = distinct !{!310, !15}
!311 = distinct !{!311, !15}
!312 = distinct !{!312, !15}
!313 = distinct !{!313, !15}
!314 = distinct !{!314, !15}
!315 = distinct !{!315, !15}
!316 = !{!233, !13, i64 8}
!317 = distinct !{!317, !15}
!318 = distinct !{!318, !15}
!319 = distinct !{!319, !15}
!320 = distinct !{!320, !15}
!321 = distinct !{!321, !15}
!322 = distinct !{!322, !15}
!323 = distinct !{!323, !15}
!324 = distinct !{!324, !15}
!325 = distinct !{!325, !15}
!326 = distinct !{!326, !15}
!327 = distinct !{!327, !15}
!328 = distinct !{!328, !15}
!329 = distinct !{!329, !15}
!330 = distinct !{!330, !15}
!331 = distinct !{!331, !15}
!332 = !{!141, !13, i64 32}
!333 = !{!141, !13, i64 28}
!334 = distinct !{!334, !15}
!335 = distinct !{!335, !15}
!336 = distinct !{!336, !15}
!337 = distinct !{!337, !15}
!338 = !{!124, !13, i64 32}
!339 = !{!124, !13, i64 36}
!340 = !{!124, !13, i64 40}
!341 = !{!124, !13, i64 44}
!342 = distinct !{!342, !15}
!343 = distinct !{!343, !15}
!344 = distinct !{!344, !15}
!345 = distinct !{!345, !15}
!346 = !{!132, !8, i64 8}
!347 = !{!132, !8, i64 16}
!348 = distinct !{!348, !15}
!349 = distinct !{!349, !15}
!350 = !{!46, !13, i64 64}
!351 = !{!352, !13, i64 16}
!352 = !{!"psidebox", !13, i64 0, !37, i64 8, !13, i64 16, !13, i64 20}
!353 = !{!352, !13, i64 20}
!354 = distinct !{!354, !15}
!355 = !{!352, !37, i64 8}
!356 = distinct !{!356, !15}
!357 = distinct !{!357, !15}
!358 = distinct !{!358, !15}
!359 = distinct !{!359, !15}
!360 = distinct !{!360, !15}
!361 = distinct !{!361, !15}
!362 = distinct !{!362, !15}
!363 = !{!46, !13, i64 80}
!364 = distinct !{!364, !15}
!365 = distinct !{!365, !15}
!366 = distinct !{!366, !15}
!367 = distinct !{!367, !15}
!368 = distinct !{!368, !15}
!369 = distinct !{!369, !15}
!370 = distinct !{!370, !15}
!371 = distinct !{!371, !15}
!372 = distinct !{!372, !15}
!373 = distinct !{!373, !15}
!374 = distinct !{!374, !15}
!375 = distinct !{!375, !15}
!376 = distinct !{!376, !15}
!377 = distinct !{!377, !15}
!378 = !{!46, !13, i64 8}
!379 = !{!46, !13, i64 72}
!380 = distinct !{!380, !15}
!381 = distinct !{!381, !15}
!382 = !{!48, !13, i64 72}
!383 = !{!48, !13, i64 76}
!384 = distinct !{!384, !15}
!385 = !{!46, !13, i64 68}
!386 = !{!50, !13, i64 16}
!387 = !{!50, !13, i64 20}
!388 = distinct !{!388, !15}
!389 = !{!239, !13, i64 8}
!390 = !{!239, !13, i64 12}
!391 = distinct !{!391, !15}
!392 = distinct !{!392, !15}
!393 = !{!48, !13, i64 80}
!394 = !{!48, !13, i64 84}
!395 = distinct !{!395, !15}
!396 = distinct !{!396, !15}
!397 = distinct !{!397, !15}
!398 = distinct !{!398, !15}
!399 = distinct !{!399, !15}
!400 = distinct !{!400, !15}
!401 = distinct !{!401, !15}
!402 = distinct !{!402, !15}
!403 = distinct !{!403, !15}
!404 = distinct !{!404, !15}
!405 = distinct !{!405, !15}
!406 = distinct !{!406, !15}
!407 = !{!408, !13, i64 0}
!408 = !{!"flare", !13, i64 0, !8, i64 8, !8, i64 16}
!409 = !{!408, !8, i64 8}
!410 = distinct !{!410, !15}
!411 = distinct !{!411, !15}
!412 = distinct !{!412, !15}
!413 = distinct !{!413, !15}
!414 = !{!115, !13, i64 44}
!415 = distinct !{!415, !15}
!416 = distinct !{!416, !15}
!417 = distinct !{!417, !15}
!418 = distinct !{!418, !15}
!419 = distinct !{!419, !15}
!420 = distinct !{!420, !15}
!421 = distinct !{!421, !15}
!422 = distinct !{!422, !15}
!423 = distinct !{!423, !15}
!424 = distinct !{!424, !15}
!425 = distinct !{!425, !15}
!426 = distinct !{!426, !15}
!427 = distinct !{!427, !15}
!428 = distinct !{!428, !15}
!429 = distinct !{!429, !15}
!430 = distinct !{!430, !15}
!431 = distinct !{!431, !15}
!432 = distinct !{!432, !15}
!433 = !{!434, !8, i64 8}
!434 = !{!"nodbox", !8, i64 0, !8, i64 8, !13, i64 16}
!435 = !{!408, !8, i64 16}
!436 = distinct !{!436, !15}
!437 = !{!434, !8, i64 0}
!438 = distinct !{!438, !15}
!439 = distinct !{!439, !15}
!440 = distinct !{!440, !15}
!441 = distinct !{!441, !15}
!442 = !{!48, !13, i64 40}
!443 = !{!48, !13, i64 44}
!444 = !{!48, !13, i64 48}
!445 = !{!48, !13, i64 52}
!446 = distinct !{!446, !15}
!447 = distinct !{!447, !15}
!448 = distinct !{!448, !15}
!449 = distinct !{!449, !15}
!450 = distinct !{!450, !15}
!451 = distinct !{!451, !15}
!452 = distinct !{!452, !15}
!453 = distinct !{!453, !15}
!454 = distinct !{!454, !15}
!455 = distinct !{!455, !15}
!456 = distinct !{!456, !15}
!457 = distinct !{!457, !15}
!458 = distinct !{!458, !15}
!459 = distinct !{!459, !15}
!460 = distinct !{!460, !15}
!461 = distinct !{!461, !15}
!462 = distinct !{!462, !15}
!463 = distinct !{!463, !15}
!464 = distinct !{!464, !15}
!465 = distinct !{!465, !15}
!466 = distinct !{!466, !15}
!467 = distinct !{!467, !15}
!468 = distinct !{!468, !15}
!469 = distinct !{!469, !15}
!470 = distinct !{!470, !15}
!471 = distinct !{!471, !15}
!472 = distinct !{!472, !15}
!473 = distinct !{!473, !15}
!474 = distinct !{!474, !15}
!475 = distinct !{!475, !15}
!476 = distinct !{!476, !15}
!477 = distinct !{!477, !15}
!478 = !{!56, !13, i64 36}
!479 = distinct !{!479, !15}
!480 = distinct !{!480, !15}
!481 = !{!482, !13, i64 0}
!482 = !{!"gnode", !13, i64 0, !13, i64 4, !13, i64 8, !13, i64 12, !13, i64 16, !13, i64 20, !13, i64 24, !8, i64 32}
!483 = !{!482, !8, i64 32}
!484 = !{!482, !13, i64 4}
!485 = !{!482, !13, i64 8}
!486 = !{!482, !13, i64 12}
!487 = distinct !{!487, !15}
!488 = distinct !{!488, !15}
!489 = distinct !{!489, !15}
!490 = !{!491, !8, i64 16}
!491 = !{!"hash", !8, i64 0, !13, i64 8, !8, i64 16}
!492 = distinct !{!492, !15}
!493 = distinct !{!493, !15}
!494 = distinct !{!494, !15}
!495 = !{!491, !13, i64 8}
!496 = !{!491, !8, i64 0}
!497 = distinct !{!497, !15}
!498 = distinct !{!498, !15}
!499 = distinct !{!499, !15}
!500 = distinct !{!500, !15}
!501 = !{!141, !13, i64 16}
!502 = distinct !{!502, !15}
!503 = distinct !{!503, !15}
!504 = distinct !{!504, !15}
!505 = distinct !{!505, !15}
!506 = distinct !{!506, !15}
!507 = distinct !{!507, !15}
!508 = distinct !{!508, !15}
!509 = distinct !{!509, !15}
!510 = distinct !{!510, !15}
!511 = distinct !{!511, !15}
!512 = distinct !{!512, !15}
!513 = distinct !{!513, !15}
!514 = distinct !{!514, !15}
!515 = distinct !{!515, !15}
!516 = distinct !{!516, !15}
!517 = distinct !{!517, !15}
!518 = distinct !{!518, !15}
!519 = !{!520, !13, i64 4}
!520 = !{!"quad", !13, i64 0, !13, i64 4, !13, i64 8, !13, i64 12, !8, i64 16, !8, i64 24}
!521 = !{!520, !13, i64 8}
!522 = !{!520, !13, i64 12}
!523 = !{!520, !13, i64 0}
!524 = !{i32 0, i32 3}
!525 = !{!482, !13, i64 16}
!526 = distinct !{!526, !15}
!527 = distinct !{!527, !15}
!528 = distinct !{!528, !15}
!529 = !{!530, !13, i64 0}
!530 = !{!"pnode", !13, i64 0, !8, i64 8, !8, i64 16}
!531 = !{!530, !8, i64 16}
!532 = !{!533, !8, i64 8}
!533 = !{!"list2", !13, i64 0, !8, i64 8}
!534 = !{!533, !13, i64 0}
!535 = !{!482, !13, i64 20}
!536 = !{!482, !13, i64 24}
!537 = distinct !{!537, !15}
!538 = distinct !{!538, !15}
!539 = distinct !{!539, !15}
!540 = distinct !{!540, !15}
!541 = distinct !{!541, !15}
!542 = !{!543, !543, i64 0}
!543 = !{!"short", !9, i64 0}
!544 = distinct !{!544, !15}
!545 = distinct !{!545, !15}
!546 = distinct !{!546, !15}
!547 = distinct !{!547, !15}
!548 = distinct !{!548, !15}
!549 = distinct !{!549, !15}
!550 = distinct !{!550, !15}
!551 = distinct !{!551, !15}
!552 = distinct !{!552, !15}
!553 = distinct !{!553, !15}
!554 = distinct !{!554, !15}
!555 = distinct !{!555, !15}
!556 = distinct !{!556, !15}
!557 = distinct !{!557, !15}
!558 = distinct !{!558, !15}
!559 = distinct !{!559, !15}
!560 = distinct !{!560, !15}
!561 = distinct !{!561, !15}
!562 = distinct !{!562, !15}
!563 = distinct !{!563, !15}
!564 = distinct !{!564, !15}
!565 = distinct !{!565, !15}
!566 = distinct !{!566, !15}
!567 = distinct !{!567, !15}
!568 = distinct !{!568, !15}
!569 = distinct !{!569, !15}
!570 = distinct !{!570, !15}
!571 = distinct !{!571, !15}
!572 = distinct !{!572, !15}
!573 = distinct !{!573, !15}
!574 = !{!46, !37, i64 120}
!575 = !{!46, !37, i64 112}
!576 = !{!577, !13, i64 0}
!577 = !{!"kbox", !13, i64 0, !13, i64 4, !13, i64 8, !13, i64 12, !13, i64 16}
!578 = distinct !{!578, !15}
!579 = distinct !{!579, !15}
!580 = distinct !{!580, !15}
!581 = !{!577, !13, i64 12}
!582 = !{!577, !13, i64 16}
!583 = !{!577, !13, i64 8}
!584 = !{!577, !13, i64 4}
!585 = distinct !{!585, !15}
!586 = distinct !{!586, !15}
!587 = distinct !{!587, !15}
!588 = distinct !{!588, !15}
!589 = distinct !{!589, !15}
!590 = distinct !{!590, !15}
!591 = distinct !{!591, !15}
!592 = distinct !{!592, !15}
!593 = !{!530, !8, i64 8}
!594 = !{!595, !13, i64 4}
!595 = !{!"nnode", !13, i64 0, !13, i64 4, !543, i64 8, !543, i64 10}
!596 = distinct !{!596, !15}
!597 = distinct !{!597, !15}
!598 = distinct !{!598, !15}
!599 = !{!595, !13, i64 0}
!600 = distinct !{!600, !15}
!601 = distinct !{!601, !15}
!602 = distinct !{!602, !15}
!603 = distinct !{!603, !15}
!604 = !{!595, !543, i64 10}
!605 = distinct !{!605, !15}
!606 = !{!607, !13, i64 8}
!607 = !{!"path", !8, i64 0, !13, i64 8, !13, i64 12, !13, i64 16, !9, i64 20}
!608 = !{!607, !13, i64 12}
!609 = !{!607, !13, i64 16}
!610 = !{!607, !8, i64 0}
!611 = distinct !{!611, !15}
!612 = distinct !{!612, !15}
!613 = distinct !{!613, !15}
!614 = distinct !{!614, !15}
!615 = distinct !{!615, !15}
!616 = distinct !{!616, !15}
!617 = distinct !{!617, !15}
!618 = distinct !{!618, !15}
!619 = distinct !{!619, !15}
!620 = distinct !{!620, !15}
!621 = distinct !{!621, !15}
!622 = distinct !{!622, !15}
!623 = distinct !{!623, !15}
!624 = distinct !{!624, !15}
!625 = distinct !{!625, !15}
!626 = distinct !{!626, !15}
!627 = distinct !{!627, !15}
!628 = distinct !{!628, !15}
!629 = distinct !{!629, !15}
!630 = distinct !{!630, !15}
!631 = distinct !{!631, !15}
!632 = !{!633, !13, i64 0}
!633 = !{!"MT", !13, i64 0, !9, i64 4, !9, i64 3604, !9, i64 3640}
!634 = distinct !{!634, !15}
!635 = !{i4 0, i4 5}
!636 = distinct !{!636, !15}
!637 = distinct !{!637, !15}
!638 = distinct !{!638, !15}
!639 = distinct !{!639, !15}
!640 = distinct !{!640, !15}
!641 = distinct !{!641, !15}
!642 = distinct !{!642, !15}
!643 = distinct !{!643, !15}
!644 = distinct !{!644, !15}
!645 = distinct !{!645, !15}
!646 = distinct !{!646, !15}
!647 = distinct !{!647, !15}
!648 = distinct !{!648, !15}
!649 = distinct !{!649, !15}
!650 = distinct !{!650, !15}
!651 = distinct !{!651, !15}
!652 = distinct !{!652, !15}
!653 = distinct !{!653, !15}
!654 = distinct !{!654, !15}
!655 = distinct !{!655, !15}
!656 = distinct !{!656, !15}
!657 = distinct !{!657, !15}
!658 = distinct !{!658, !15}
!659 = distinct !{!659, !15}
!660 = distinct !{!660, !15}
!661 = distinct !{!661, !15}
!662 = distinct !{!662, !15}
!663 = distinct !{!663, !15}
!664 = distinct !{!664, !15}
!665 = distinct !{!665, !15}
!666 = distinct !{!666, !15}
!667 = distinct !{!667, !15}
!668 = distinct !{!668, !15}
!669 = distinct !{!669, !15}
!670 = distinct !{!670, !15}
!671 = distinct !{!671, !15}
!672 = distinct !{!672, !15}
!673 = distinct !{!673, !15}
!674 = distinct !{!674, !15}
!675 = distinct !{!675, !15}
!676 = distinct !{!676, !15}
!677 = distinct !{!677, !15}
!678 = distinct !{!678, !15}
!679 = distinct !{!679, !15, !247, !248}
!680 = distinct !{!680, !15}
!681 = distinct !{!681, !15}
!682 = distinct !{!682, !15}
!683 = distinct !{!683, !15}
!684 = distinct !{!684, !15}
!685 = distinct !{!685, !15}
!686 = distinct !{!686, !15}
!687 = distinct !{!687, !15}
!688 = distinct !{!688, !15}
!689 = distinct !{!689, !15}
!690 = distinct !{!690, !15}
!691 = distinct !{!691, !15}
!692 = distinct !{!692, !15}
!693 = distinct !{!693, !15}
!694 = distinct !{!694, !15}
!695 = distinct !{!695, !15}
!696 = distinct !{!696, !15}
!697 = distinct !{!697, !15}
!698 = distinct !{!698, !15}
!699 = distinct !{!699, !15}
!700 = distinct !{!700, !15}
!701 = distinct !{!701, !15}
!702 = distinct !{!702, !15}
!703 = distinct !{!703, !15}
!704 = distinct !{!704, !15}
!705 = distinct !{!705, !15}
!706 = distinct !{!706, !15}
!707 = distinct !{!707, !15}
!708 = distinct !{!708, !15}
!709 = distinct !{!709, !15}
!710 = distinct !{!710, !15}
!711 = distinct !{!711, !15}
!712 = distinct !{!712, !15}
!713 = distinct !{!713, !15}
!714 = distinct !{!714, !15}
!715 = !{!229, !13, i64 16}
!716 = !{!46, !8, i64 216}
!717 = !{!229, !13, i64 20}
!718 = !{!719, !13, i64 0}
!719 = !{!"sidebox", !13, i64 0, !13, i64 4}
!720 = !{!719, !13, i64 4}
!721 = distinct !{!721, !15}
!722 = distinct !{!722, !15}
!723 = !{!229, !13, i64 24}
!724 = distinct !{!724, !15}
!725 = distinct !{!725, !15}
!726 = distinct !{!726, !15}
!727 = distinct !{!727, !15}
!728 = distinct !{!728, !15}
!729 = distinct !{!729, !15}
!730 = distinct !{!730, !15}
!731 = distinct !{!731, !15}
!732 = distinct !{!732, !15}
!733 = distinct !{!733, !15}
!734 = distinct !{!734, !15}
!735 = distinct !{!735, !15}
!736 = distinct !{!736, !15}
!737 = distinct !{!737, !15}
!738 = distinct !{!738, !15}
!739 = distinct !{!739, !15}
!740 = distinct !{!740, !15}
!741 = distinct !{!741, !15}
!742 = distinct !{!742, !15}
!743 = distinct !{!743, !15}
!744 = distinct !{!744, !15}
!745 = !{!187, !13, i64 8}
!746 = !{!747, !8, i64 0}
!747 = !{!"altbox", !8, i64 0, !13, i64 8, !8, i64 16}
!748 = !{!747, !8, i64 16}
!749 = !{!747, !13, i64 8}
!750 = distinct !{!750, !15}
!751 = !{!190, !8, i64 16}
!752 = distinct !{!752, !15}
!753 = !{!190, !13, i64 8}
!754 = !{!190, !13, i64 12}
!755 = distinct !{!755, !15}
!756 = distinct !{!756, !15}
!757 = distinct !{!757, !15}
!758 = distinct !{!758, !15}
!759 = distinct !{!759, !15}
!760 = distinct !{!760, !15}
!761 = distinct !{!761, !15}
!762 = distinct !{!762, !15}
!763 = distinct !{!763, !15}
!764 = distinct !{!764, !15}
!765 = distinct !{!765, !15}
!766 = distinct !{!766, !15}
!767 = distinct !{!767, !15}
!768 = distinct !{!768, !15}
!769 = distinct !{!769, !15}
!770 = distinct !{!770, !15}
!771 = distinct !{!771, !15}
!772 = distinct !{!772, !15}
!773 = distinct !{!773, !15}
!774 = distinct !{!774, !15}
!775 = distinct !{!775, !15}
!776 = distinct !{!776, !15}
!777 = distinct !{!777, !15}
!778 = distinct !{!778, !15}
!779 = distinct !{!779, !15}
!780 = distinct !{!780, !15}
!781 = !{!352, !13, i64 0}
!782 = distinct !{!782, !15}
!783 = distinct !{!783, !15}
!784 = distinct !{!784, !15}
!785 = distinct !{!785, !15}
!786 = distinct !{!786, !15}
!787 = distinct !{!787, !15}
!788 = distinct !{!788, !15}
!789 = distinct !{!789, !15}
!790 = distinct !{!790, !15}
!791 = distinct !{!791, !15}
!792 = distinct !{!792, !15}
!793 = distinct !{!793, !15}
!794 = distinct !{!794, !15}
!795 = distinct !{!795, !15}
!796 = distinct !{!796, !15}
!797 = !{!233, !13, i64 4}
!798 = distinct !{!798, !15}
!799 = distinct !{!799, !15}
!800 = distinct !{!800, !15}
!801 = distinct !{!801, !15}
!802 = distinct !{!802, !15}
!803 = !{!229, !13, i64 32}
!804 = distinct !{!804, !15}
!805 = distinct !{!805, !15}
!806 = distinct !{!806, !15}
!807 = distinct !{!807, !15}
!808 = distinct !{!808, !15}
!809 = distinct !{!809, !15}
!810 = distinct !{!810, !15}
!811 = distinct !{!811, !15}
!812 = distinct !{!812, !15}
!813 = distinct !{!813, !15}
!814 = distinct !{!814, !15}
!815 = distinct !{!815, !15}
!816 = distinct !{!816, !15}
!817 = distinct !{!817, !15}
!818 = distinct !{!818, !15}
!819 = distinct !{!819, !15}
!820 = distinct !{!820, !15}
!821 = distinct !{!821, !15}
!822 = distinct !{!822, !15}
!823 = distinct !{!823, !15}
!824 = distinct !{!824, !15}
!825 = distinct !{!825, !15}
!826 = distinct !{!826, !15}
!827 = distinct !{!827, !15}
!828 = distinct !{!828, !15}
!829 = distinct !{!829, !15}
!830 = distinct !{!830, !15}
!831 = distinct !{!831, !15}
!832 = distinct !{!832, !15}
!833 = distinct !{!833, !15}
!834 = distinct !{!834, !15}
!835 = distinct !{!835, !15}
!836 = !{!520, !8, i64 24}
!837 = distinct !{!837, !15}
!838 = distinct !{!838, !15}
!839 = !{!520, !8, i64 16}
!840 = distinct !{!840, !15}
!841 = distinct !{!841, !15}
!842 = distinct !{!842, !15}
!843 = distinct !{!843, !15}
!844 = distinct !{!844, !15}
!845 = distinct !{!845, !15}
!846 = distinct !{!846, !15}
!847 = distinct !{!847, !15}
!848 = distinct !{!848, !15}
!849 = distinct !{!849, !15}
!850 = distinct !{!850, !15}
!851 = distinct !{!851, !15}
!852 = distinct !{!852, !15}
!853 = distinct !{!853, !15}
!854 = distinct !{!854, !15}
!855 = distinct !{!855, !15}
!856 = distinct !{!856, !15}
!857 = distinct !{!857, !15}
!858 = distinct !{!858, !15}
!859 = distinct !{!859, !15}
!860 = distinct !{!860, !15}
!861 = !{!124, !13, i64 48}
!862 = distinct !{!862, !15}
!863 = distinct !{!863, !15}
!864 = distinct !{!864, !15}
!865 = distinct !{!865, !15}
!866 = distinct !{!866, !15}
!867 = distinct !{!867, !15}
!868 = distinct !{!868, !15}
!869 = distinct !{!869, !15}
!870 = distinct !{!870, !15}
!871 = distinct !{!871, !15}
!872 = distinct !{!872, !15}
!873 = distinct !{!873, !15}
!874 = distinct !{!874, !15}
!875 = distinct !{!875, !15}
!876 = distinct !{!876, !15}
!877 = distinct !{!877, !15}
!878 = distinct !{!878, !15}
!879 = distinct !{!879, !15}
!880 = distinct !{!880, !15}
!881 = distinct !{!881, !15}
!882 = distinct !{!882, !15}
!883 = distinct !{!883, !15}
!884 = distinct !{!884, !15}
!885 = distinct !{!885, !15}
!886 = distinct !{!886, !15}
!887 = !{!95, !8, i64 24}
!888 = distinct !{!888, !15}
!889 = distinct !{!889, !15}
!890 = distinct !{!890, !15}
!891 = distinct !{!891, !15}
!892 = distinct !{!892, !15}
!893 = distinct !{!893, !15}
!894 = distinct !{!894, !15}
!895 = distinct !{!895, !15}
!896 = distinct !{!896, !15}
!897 = distinct !{!897, !15}
!898 = distinct !{!898, !15}
!899 = distinct !{!899, !15}
!900 = distinct !{!900, !15}
!901 = distinct !{!901, !15}
!902 = distinct !{!902, !15}
!903 = distinct !{!903, !15}
!904 = distinct !{!904, !15}
!905 = distinct !{!905, !15}
!906 = distinct !{!906, !15}
!907 = distinct !{!907, !15}
!908 = distinct !{!908, !15}
!909 = distinct !{!909, !15}
!910 = distinct !{!910, !15}
!911 = distinct !{!911, !15}
!912 = distinct !{!912, !15}
!913 = distinct !{!913, !15}
!914 = distinct !{!914, !15}
!915 = distinct !{!915, !15}
!916 = distinct !{!916, !15}
!917 = distinct !{!917, !15}
!918 = distinct !{!918, !15}
!919 = distinct !{!919, !15}
!920 = distinct !{!920, !15}
!921 = distinct !{!921, !15}
!922 = distinct !{!922, !15}
!923 = distinct !{!923, !15}
!924 = distinct !{!924, !15}
!925 = distinct !{!925, !15}
!926 = distinct !{!926, !15}
!927 = !{!595, !543, i64 8}
!928 = distinct !{!928, !15}
!929 = distinct !{!929, !15}
!930 = distinct !{!930, !15}
!931 = distinct !{!931, !15}
!932 = distinct !{!932, !15}
!933 = distinct !{!933, !15}
!934 = distinct !{!934, !15}
!935 = distinct !{!935, !15}
!936 = distinct !{!936, !15}
!937 = distinct !{!937, !15}
!938 = distinct !{!938, !15}
!939 = distinct !{!939, !15}
!940 = distinct !{!940, !15}
!941 = distinct !{!941, !15}
!942 = distinct !{!942, !15}
!943 = distinct !{!943, !15}
!944 = distinct !{!944, !15}
!945 = distinct !{!945, !15}
!946 = distinct !{!946, !15}
!947 = distinct !{!947, !15}
!948 = distinct !{!948, !15}
!949 = distinct !{!949, !15}
!950 = distinct !{!950, !15}
!951 = distinct !{!951, !15}
!952 = distinct !{!952, !15}
!953 = distinct !{!953, !15}
!954 = distinct !{!954, !15}
!955 = distinct !{!955, !15}
!956 = distinct !{!956, !15}
!957 = distinct !{!957, !15}
!958 = distinct !{!958, !15}
!959 = distinct !{!959, !15}
!960 = distinct !{!960, !15}
!961 = distinct !{!961, !15}
!962 = distinct !{!962, !15}
!963 = distinct !{!963, !15}
!964 = distinct !{!964, !15}
!965 = distinct !{!965, !15}
!966 = distinct !{!966, !15}
!967 = distinct !{!967, !15}
!968 = distinct !{!968, !15}
!969 = distinct !{!969, !15}
!970 = distinct !{!970, !15}
!971 = distinct !{!971, !15}
!972 = distinct !{!972, !15}
!973 = distinct !{!973, !15}
!974 = distinct !{!974, !15}
!975 = distinct !{!975, !15}
!976 = distinct !{!976, !15}
!977 = distinct !{!977, !15}
!978 = distinct !{!978, !15}
!979 = distinct !{!979, !15}
!980 = distinct !{!980, !15}
!981 = distinct !{!981, !15}
!982 = distinct !{!982, !15}
!983 = distinct !{!983, !15}
!984 = distinct !{!984, !15}
!985 = distinct !{!985, !15}
!986 = distinct !{!986, !15}
!987 = distinct !{!987, !15}
!988 = distinct !{!988, !15}
!989 = !{!39, !13, i64 32}
!990 = !{!56, !13, i64 16}
!991 = !{!56, !13, i64 20}
!992 = distinct !{!992, !15}
!993 = distinct !{!993, !15}
!994 = distinct !{!994, !15}
!995 = distinct !{!995, !15}
!996 = distinct !{!996, !15}
!997 = distinct !{!997, !15}
!998 = distinct !{!998, !15}
!999 = distinct !{!999, !15}
!1000 = distinct !{!1000, !15}
!1001 = distinct !{!1001, !15}
!1002 = distinct !{!1002, !15}
!1003 = distinct !{!1003, !15}
!1004 = distinct !{!1004, !15}
!1005 = distinct !{!1005, !15}
!1006 = distinct !{!1006, !15}
!1007 = !{!39, !13, i64 16}
!1008 = !{!39, !13, i64 24}
!1009 = !{!39, !13, i64 36}
!1010 = !{!39, !13, i64 44}
!1011 = distinct !{!1011, !15}
!1012 = distinct !{!1012, !15}
!1013 = distinct !{!1013, !15}
!1014 = distinct !{!1014, !15}
!1015 = distinct !{!1015, !15}
!1016 = distinct !{!1016, !15}
!1017 = distinct !{!1017, !15}
!1018 = distinct !{!1018, !15}
!1019 = distinct !{!1019, !15}
!1020 = distinct !{!1020, !15}
!1021 = distinct !{!1021, !15}
!1022 = distinct !{!1022, !15}
!1023 = distinct !{!1023, !15}
!1024 = distinct !{!1024, !15}
!1025 = distinct !{!1025, !15}
!1026 = distinct !{!1026, !15}
!1027 = distinct !{!1027, !15}
!1028 = distinct !{!1028, !15}
!1029 = distinct !{!1029, !15}
!1030 = distinct !{!1030, !15}
!1031 = distinct !{!1031, !15}
!1032 = distinct !{!1032, !15}
!1033 = distinct !{!1033, !15}
!1034 = distinct !{!1034, !15}
!1035 = distinct !{!1035, !15}
!1036 = distinct !{!1036, !15}
!1037 = distinct !{!1037, !15}
!1038 = distinct !{!1038, !15}
!1039 = distinct !{!1039, !15}
!1040 = !{!1041, !13, i64 0}
!1041 = !{!"Rangle", !13, i64 0, !13, i64 4, !13, i64 8, !13, i64 12}
!1042 = !{!1041, !13, i64 4}
!1043 = !{!1041, !13, i64 8}
!1044 = !{!1041, !13, i64 12}
!1045 = distinct !{!1045, !15}
!1046 = distinct !{!1046, !15}
!1047 = distinct !{!1047, !15}
!1048 = distinct !{!1048, !15}
!1049 = distinct !{!1049, !15}
!1050 = distinct !{!1050, !15}
!1051 = !{!229, !13, i64 8}
!1052 = distinct !{!1052, !15}
!1053 = distinct !{!1053, !15}
!1054 = distinct !{!1054, !15}
!1055 = distinct !{!1055, !15}
!1056 = distinct !{!1056, !15}
!1057 = distinct !{!1057, !15}
!1058 = distinct !{!1058, !15}
!1059 = distinct !{!1059, !15}
!1060 = distinct !{!1060, !15}
!1061 = distinct !{!1061, !15}
!1062 = distinct !{!1062, !15}
!1063 = distinct !{!1063, !15}
!1064 = distinct !{!1064, !15}
!1065 = distinct !{!1065, !15}
!1066 = distinct !{!1066, !15}
!1067 = distinct !{!1067, !15}
!1068 = distinct !{!1068, !15}
!1069 = distinct !{!1069, !15}
!1070 = distinct !{!1070, !15}
!1071 = distinct !{!1071, !15}
!1072 = distinct !{!1072, !15}
!1073 = distinct !{!1073, !15}
!1074 = distinct !{!1074, !15}
!1075 = distinct !{!1075, !15}
!1076 = distinct !{!1076, !15}
!1077 = distinct !{!1077, !15}
!1078 = distinct !{!1078, !15}
!1079 = distinct !{!1079, !15}
!1080 = distinct !{!1080, !15}
!1081 = distinct !{!1081, !15}
!1082 = distinct !{!1082, !15}
!1083 = distinct !{!1083, !15}
!1084 = distinct !{!1084, !15}
!1085 = distinct !{!1085, !15}
!1086 = distinct !{!1086, !15}
!1087 = distinct !{!1087, !15}
!1088 = distinct !{!1088, !15}
!1089 = distinct !{!1089, !15}
!1090 = distinct !{!1090, !15}
!1091 = distinct !{!1091, !15}
!1092 = distinct !{!1092, !15}
!1093 = distinct !{!1093, !15}
!1094 = distinct !{!1094, !15, !247, !248}
!1095 = distinct !{!1095, !15, !247, !248}
!1096 = !{!1097, !13, i64 0}
!1097 = !{!"array3d", !13, i64 0, !37, i64 8}
!1098 = !{!1097, !37, i64 8}
!1099 = distinct !{!1099, !15}
!1100 = distinct !{!1100, !15}
!1101 = distinct !{!1101, !15}
!1102 = distinct !{!1102, !15}
!1103 = distinct !{!1103, !15}
!1104 = distinct !{!1104, !15}
!1105 = distinct !{!1105, !15}
!1106 = distinct !{!1106, !15}
!1107 = distinct !{!1107, !15}
!1108 = distinct !{!1108, !15}
!1109 = distinct !{!1109, !15}
!1110 = distinct !{!1110, !15}
!1111 = distinct !{!1111, !15}
!1112 = distinct !{!1112, !15}
!1113 = distinct !{!1113, !15}
!1114 = distinct !{!1114, !15}
!1115 = distinct !{!1115, !15}
!1116 = distinct !{!1116, !15}
!1117 = distinct !{!1117, !15}
!1118 = distinct !{!1118, !15}
!1119 = distinct !{!1119, !15}
!1120 = distinct !{!1120, !15}
!1121 = !{!434, !13, i64 16}
!1122 = distinct !{!1122, !15}
!1123 = distinct !{!1123, !15}
!1124 = distinct !{!1124, !15}
!1125 = distinct !{!1125, !15}
!1126 = distinct !{!1126, !15}
!1127 = distinct !{!1127, !15}
!1128 = distinct !{!1128, !15}
!1129 = distinct !{!1129, !15}
!1130 = distinct !{!1130, !15}
!1131 = distinct !{!1131, !15}
!1132 = distinct !{!1132, !15}
!1133 = distinct !{!1133, !15}
!1134 = distinct !{!1134, !15}
!1135 = distinct !{!1135, !15}
!1136 = !{!141, !13, i64 36}
!1137 = distinct !{!1137, !15}
!1138 = distinct !{!1138, !15}
!1139 = distinct !{!1139, !15}
!1140 = distinct !{!1140, !15}
!1141 = distinct !{!1141, !15}
!1142 = distinct !{!1142, !15}
!1143 = distinct !{!1143, !15}
!1144 = distinct !{!1144, !15}
!1145 = distinct !{!1145, !15}
!1146 = distinct !{!1146, !15}
!1147 = distinct !{!1147, !15}
!1148 = distinct !{!1148, !15}
!1149 = distinct !{!1149, !15}
!1150 = distinct !{!1150, !15}
!1151 = distinct !{!1151, !15}
!1152 = distinct !{!1152, !15}
!1153 = distinct !{!1153, !15}
!1154 = distinct !{!1154, !15}
!1155 = distinct !{!1155, !15}
!1156 = distinct !{!1156, !15}
!1157 = distinct !{!1157, !15}
!1158 = distinct !{!1158, !15}
!1159 = distinct !{!1159, !15}
!1160 = distinct !{!1160, !15}
!1161 = distinct !{!1161, !15}
!1162 = distinct !{!1162, !15}
!1163 = distinct !{!1163, !15}
!1164 = distinct !{!1164, !15}
!1165 = distinct !{!1165, !15}
!1166 = distinct !{!1166, !15}

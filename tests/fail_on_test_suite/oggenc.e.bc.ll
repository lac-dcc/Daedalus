; ModuleID = '/src/llvm-test-suite/build/MultiSource/Applications/oggenc/oggenc.e.bc'
source_filename = "ld-temp.o"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.option = type { ptr, i32, ptr, i32 }
%struct.oe_options = type { ptr, i32, ptr, i32, ptr, i32, ptr, i32, ptr, i32, ptr, i32, ptr, i32, ptr, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, ptr, i32, i32, i32, i32, float, i32, i32, i32, float, i32 }
%struct.input_format = type { ptr, i32, ptr, ptr, ptr, ptr }
%struct.att3 = type { [3 x i32], float, float }
%struct.noiseguard = type { i32, i32, i32 }
%struct.noise3 = type { [3 x [17 x i32]] }
%struct.compandblock = type { [40 x i32] }
%struct.adv_opt = type { ptr, ptr }
%struct.ve_setup_data_template = type { i32, ptr, ptr, i32, i64, i64, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, [2 x ptr], [2 x ptr], ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.adj_stereo = type { [15 x i32], [15 x i32], [15 x float], [15 x float] }
%struct.vp_adjblock = type { [17 x i32] }
%struct.vorbis_func_floor = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.vorbis_func_residue = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.vorbis_func_mapping = type { ptr, ptr, ptr, ptr, ptr }
%struct.static_codebook = type { i64, i64, ptr, i32, i64, i64, i32, i32, ptr, ptr, ptr, ptr, i32 }
%struct.vorbis_residue_template = type { i32, i32, ptr, ptr, ptr, ptr, ptr }
%struct.static_bookblock = type { [12 x [3 x ptr]] }
%struct.encode_aux_threshmatch = type { ptr, ptr, i32, i32 }
%struct.vorbis_info_mapping0 = type { i32, [256 x i32], [16 x i32], [16 x i32], i32, [256 x i32], [256 x i32] }
%struct.vorbis_info_mode = type { i32, i32, i32, i32 }
%struct.oe_enc_opt = type { ptr, i32, ptr, ptr, ptr, ptr, ptr, ptr, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, ptr, i32, ptr, ptr, ptr }
%struct.vorbis_comment = type { ptr, ptr, i32, ptr }
%struct.wavfile = type { i16, i16, i64, i64, ptr, i16 }
%struct.scaler = type { ptr, ptr, i32, float }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }
%struct.resampler = type { %struct.res_state, ptr, ptr, ptr, i32, i32, i32 }
%struct.res_state = type { i32, i32, i32, i32, ptr, ptr, i32, i32 }
%struct.downmix = type { ptr, ptr, ptr }
%struct.ovectl_ratemanage_arg = type { i32, i64, i64, double, i64, i64, double, double }
%struct.ogg_stream_state = type { ptr, i64, i64, i64, ptr, ptr, i64, i64, i64, i64, [282 x i8], i32, i32, i32, i64, i64, i64, i64 }
%struct.ogg_page = type { ptr, i64, ptr, i64 }
%struct.ogg_packet = type { ptr, i64, i64, i64, i64, i64 }
%struct.vorbis_dsp_state = type { i32, ptr, ptr, ptr, i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, ptr }
%struct.vorbis_block = type { ptr, %struct.oggpack_buffer, i64, i64, i64, i32, i32, i32, i64, i64, ptr, ptr, i64, i64, i64, ptr, i64, i64, i64, i64, ptr }
%struct.oggpack_buffer = type { i64, i32, ptr, ptr, i64 }
%struct.vorbis_info = type { i32, i32, i64, i64, i64, i64, i64, ptr }
%struct.codec_setup_info = type { [2 x i64], i32, i32, i32, i32, i32, i32, [64 x ptr], [64 x i32], [64 x ptr], [64 x i32], [64 x ptr], [64 x i32], [64 x ptr], [256 x ptr], ptr, [4 x ptr], %struct.vorbis_info_psy_global, %struct.bitrate_manager_info, %struct.highlevel_encode_setup, i32 }
%struct.vorbis_info_psy_global = type { i32, [7 x float], [7 x float], float, float, float, [15 x i32], [2 x [15 x i32]], [15 x i32], [15 x i32], [2 x [15 x i32]] }
%struct.bitrate_manager_info = type { double, double, double, double, double, double, double, double, double }
%struct.highlevel_encode_setup = type { ptr, i32, double, double, double, double, i32, i64, i64, i64, i64, double, double, double, i32, i32, double, double, double, double, double, double, [4 x %struct.highlevel_byblocktype] }
%struct.highlevel_byblocktype = type { double, double, double, double }
%struct.codebook = type { i64, i64, i64, ptr, ptr, ptr, ptr, ptr, ptr, i32, i32 }
%struct.vorbis_info_psy = type { i32, float, float, [3 x float], float, float, float, [17 x float], i32, float, float, float, i32, i32, i32, [3 x [17 x float]], [40 x float], float, i32, i32, i32, i32, double }
%struct.vorbis_info_residue0 = type { i64, i64, i32, i32, i32, [64 x i32], [256 x i32], [64 x float], [64 x float] }
%struct.vorbis_info_floor1 = type { i32, [31 x i32], [16 x i32], [16 x i32], [16 x i32], [16 x [8 x i32]], i32, [65 x i32], float, float, float, float, float, i32 }
%struct.vorbis_look_psy_global = type { float, i32, ptr, [2 x [3 x i32]] }
%struct.private_state = type { ptr, [2 x i32], [2 x ptr], [2 x %struct.drft_lookup], i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr, %struct.bitrate_manager_state, i64 }
%struct.drft_lookup = type { i32, ptr, ptr }
%struct.bitrate_manager_state = type { ptr, ptr, i32, i32, i32, ptr, i32, i32, i32, i32, i32, i32, ptr, ptr, ptr, i64, i64, i32, i32, i32, i32, i32, double, ptr, ptr }
%struct.vorbis_block_internal = type { ptr, float, i32, [15 x i32] }
%struct.vorbis_look_psy = type { i32, ptr, ptr, ptr, ptr, ptr, ptr, i64, i64, i32, i32, i64 }
%struct.envelope_lookup = type { i32, i32, i32, float, %struct.mdct_lookup, ptr, [7 x %struct.envelope_band], ptr, i32, ptr, i64, i64, i64, i64 }
%struct.mdct_lookup = type { i32, i32, ptr, ptr, float }
%struct.envelope_band = type { i32, i32, ptr, float }
%struct.vorbis_look_residue0 = type { ptr, i32, i32, ptr, ptr, ptr, i32, ptr, i64, i64, i64 }
%struct.vorbis_look_floor1 = type { [65 x i32], [65 x i32], [65 x i32], [63 x i32], [63 x i32], i32, i32, i32, ptr, i64, i64, i64 }
%struct.vorbis_info_floor0 = type { i32, i64, i64, i32, i32, i32, [16 x i32], float, float }
%struct.vorbis_look_floor0 = type { i32, i32, ptr, [2 x i32], ptr, i64, i64 }
%struct.lsfit_acc = type { i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.envelope_filter_state = type { [17 x float], i32, [15 x float], float, float, i32 }
%struct.encode_aux_nearestmatch = type { ptr, ptr, ptr, ptr, i64, i64 }
%struct.__va_list_tag = type { i32, i32, ptr, ptr }

@.str = private unnamed_addr constant [6 x i8] c"quiet\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c"comment\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"artist\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"album\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"title\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"genre\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"names\00", align 1
@.str.8 = private unnamed_addr constant [12 x i8] c"name-remove\00", align 1
@.str.9 = private unnamed_addr constant [13 x i8] c"name-replace\00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"output\00", align 1
@.str.11 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@.str.12 = private unnamed_addr constant [4 x i8] c"raw\00", align 1
@.str.13 = private unnamed_addr constant [9 x i8] c"raw-bits\00", align 1
@.str.14 = private unnamed_addr constant [9 x i8] c"raw-chan\00", align 1
@.str.15 = private unnamed_addr constant [9 x i8] c"raw-rate\00", align 1
@.str.16 = private unnamed_addr constant [15 x i8] c"raw-endianness\00", align 1
@.str.17 = private unnamed_addr constant [8 x i8] c"bitrate\00", align 1
@.str.18 = private unnamed_addr constant [12 x i8] c"min-bitrate\00", align 1
@.str.19 = private unnamed_addr constant [12 x i8] c"max-bitrate\00", align 1
@.str.20 = private unnamed_addr constant [8 x i8] c"quality\00", align 1
@.str.21 = private unnamed_addr constant [5 x i8] c"date\00", align 1
@.str.22 = private unnamed_addr constant [9 x i8] c"tracknum\00", align 1
@.str.23 = private unnamed_addr constant [7 x i8] c"serial\00", align 1
@.str.24 = private unnamed_addr constant [8 x i8] c"managed\00", align 1
@.str.25 = private unnamed_addr constant [9 x i8] c"resample\00", align 1
@.str.26 = private unnamed_addr constant [8 x i8] c"downmix\00", align 1
@.str.27 = private unnamed_addr constant [6 x i8] c"scale\00", align 1
@.str.28 = private unnamed_addr constant [23 x i8] c"advanced-encode-option\00", align 1
@.str.29 = private unnamed_addr constant [17 x i8] c"discard-comments\00", align 1
@long_options = internal global [31 x %struct.option] [%struct.option { ptr @.str, i32 0, ptr null, i32 81 }, %struct.option { ptr @.str.1, i32 0, ptr null, i32 104 }, %struct.option { ptr @.str.2, i32 1, ptr null, i32 99 }, %struct.option { ptr @.str.3, i32 1, ptr null, i32 97 }, %struct.option { ptr @.str.4, i32 1, ptr null, i32 108 }, %struct.option { ptr @.str.5, i32 1, ptr null, i32 116 }, %struct.option { ptr @.str.6, i32 1, ptr null, i32 71 }, %struct.option { ptr @.str.7, i32 1, ptr null, i32 110 }, %struct.option { ptr @.str.8, i32 1, ptr null, i32 88 }, %struct.option { ptr @.str.9, i32 1, ptr null, i32 80 }, %struct.option { ptr @.str.10, i32 1, ptr null, i32 111 }, %struct.option { ptr @.str.11, i32 0, ptr null, i32 118 }, %struct.option { ptr @.str.12, i32 0, ptr null, i32 114 }, %struct.option { ptr @.str.13, i32 1, ptr null, i32 66 }, %struct.option { ptr @.str.14, i32 1, ptr null, i32 67 }, %struct.option { ptr @.str.15, i32 1, ptr null, i32 82 }, %struct.option { ptr @.str.16, i32 1, ptr null, i32 0 }, %struct.option { ptr @.str.17, i32 1, ptr null, i32 98 }, %struct.option { ptr @.str.18, i32 1, ptr null, i32 109 }, %struct.option { ptr @.str.19, i32 1, ptr null, i32 77 }, %struct.option { ptr @.str.20, i32 1, ptr null, i32 113 }, %struct.option { ptr @.str.21, i32 1, ptr null, i32 100 }, %struct.option { ptr @.str.22, i32 1, ptr null, i32 78 }, %struct.option { ptr @.str.23, i32 1, ptr null, i32 115 }, %struct.option { ptr @.str.24, i32 0, ptr null, i32 0 }, %struct.option { ptr @.str.25, i32 1, ptr null, i32 0 }, %struct.option { ptr @.str.26, i32 0, ptr null, i32 0 }, %struct.option { ptr @.str.27, i32 1, ptr null, i32 0 }, %struct.option { ptr @.str.28, i32 1, ptr null, i32 0 }, %struct.option { ptr @.str.29, i32 0, ptr null, i32 0 }, %struct.option zeroinitializer], align 16
@.str.30 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@__const.main.opt = private unnamed_addr constant %struct.oe_options { ptr null, i32 0, ptr null, i32 0, ptr null, i32 0, ptr null, i32 0, ptr null, i32 0, ptr null, i32 0, ptr null, i32 0, ptr null, i32 0, i32 1, i32 0, i32 0, i32 16, i32 44100, i32 2, i32 0, ptr null, ptr @.str.30, ptr null, ptr null, i32 0, i32 -1, i32 -1, i32 -1, float 0x3FD3333340000000, i32 -1, i32 0, i32 0, float 0.000000e+00, i32 0 }, align 8
@optind = dso_local global i32 1, align 4
@stderr = external local_unnamed_addr global ptr, align 8
@.str.31 = private unnamed_addr constant [56 x i8] c"%s%s\0AERROR: No input files specified. Use -h for help.\0A\00", align 1
@.str.32 = private unnamed_addr constant [33 x i8] c"OggEnc v1.0.1 (libvorbis 1.0.1)\0A\00", align 1
@.str.33 = private unnamed_addr constant [47 x i8] c"(c) 2000-2003 Michael Smith <msmith@xiph.org>\0A\00", align 1
@.str.34 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.35 = private unnamed_addr constant [50 x i8] c"ERROR: Multiple files specified when using stdin\0A\00", align 1
@.str.36 = private unnamed_addr constant [78 x i8] c"ERROR: Multiple input files with specified output filename: suggest using -n\0A\00", align 1
@stdin = external local_unnamed_addr global ptr, align 8
@stdout = external local_unnamed_addr global ptr, align 8
@.str.37 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@.str.38 = private unnamed_addr constant [40 x i8] c"ERROR: Cannot open input file \22%s\22: %s\0A\00", align 1
@.str.39 = private unnamed_addr constant [28 x i8] c"Opening with %s module: %s\0A\00", align 1
@.str.40 = private unnamed_addr constant [50 x i8] c"ERROR: Input file \22%s\22 is not a supported format\0A\00", align 1
@.str.41 = private unnamed_addr constant [8 x i8] c"(stdin)\00", align 1
@.str.42 = private unnamed_addr constant [5 x i8] c".ogg\00", align 1
@.str.43 = private unnamed_addr constant [51 x i8] c"WARNING: No filename, defaulting to \22default.ogg\22\0A\00", align 1
@.str.44 = private unnamed_addr constant [12 x i8] c"default.ogg\00", align 1
@.str.45 = private unnamed_addr constant [74 x i8] c"ERROR: Could not create required subdirectories for output filename \22%s\22\0A\00", align 1
@.str.46 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.47 = private unnamed_addr constant [41 x i8] c"ERROR: Cannot open output file \22%s\22: %s\0A\00", align 1
@.str.48 = private unnamed_addr constant [38 x i8] c"Resampling input from %d Hz to %d Hz\0A\00", align 1
@.str.49 = private unnamed_addr constant [27 x i8] c"Downmixing stereo to mono\0A\00", align 1
@.str.50 = private unnamed_addr constant [49 x i8] c"ERROR: Can't downmix except from stereo to mono\0A\00", align 1
@.str.51 = private unnamed_addr constant [21 x i8] c"Scaling input to %f\0A\00", align 1
@.str.52 = private unnamed_addr constant [4 x i8] c"wav\00", align 1
@.str.53 = private unnamed_addr constant [16 x i8] c"WAV file reader\00", align 1
@.str.54 = private unnamed_addr constant [5 x i8] c"aiff\00", align 1
@.str.55 = private unnamed_addr constant [22 x i8] c"AIFF/AIFC file reader\00", align 1
@formats = internal global [3 x %struct.input_format] [%struct.input_format { ptr @wav_id, i32 12, ptr @wav_open, ptr @wav_close, ptr @.str.52, ptr @.str.53 }, %struct.input_format { ptr @aiff_id, i32 12, ptr @aiff_open, ptr @wav_close, ptr @.str.54, ptr @.str.55 }, %struct.input_format zeroinitializer], align 16
@.str.56 = private unnamed_addr constant [5 x i8] c"FORM\00", align 1
@.str.57 = private unnamed_addr constant [4 x i8] c"AIF\00", align 1
@.str.58 = private unnamed_addr constant [5 x i8] c"COMM\00", align 1
@.str.59 = private unnamed_addr constant [45 x i8] c"Warning: No common chunk found in AIFF file\0A\00", align 1
@.str.60 = private unnamed_addr constant [48 x i8] c"Warning: Truncated common chunk in AIFF header\0A\00", align 1
@.str.61 = private unnamed_addr constant [48 x i8] c"Warning: Unexpected EOF in reading AIFF header\0A\00", align 1
@.str.62 = private unnamed_addr constant [35 x i8] c"Warning: AIFF-C header truncated.\0A\00", align 1
@.str.63 = private unnamed_addr constant [5 x i8] c"NONE\00", align 1
@.str.64 = private unnamed_addr constant [5 x i8] c"sowt\00", align 1
@.str.65 = private unnamed_addr constant [52 x i8] c"Warning: Can't handle compressed AIFF-C (%c%c%c%c)\0A\00", align 1
@.str.66 = private unnamed_addr constant [5 x i8] c"SSND\00", align 1
@.str.67 = private unnamed_addr constant [43 x i8] c"Warning: No SSND chunk found in AIFF file\0A\00", align 1
@.str.68 = private unnamed_addr constant [46 x i8] c"Warning: Corrupted SSND chunk in AIFF header\0A\00", align 1
@.str.69 = private unnamed_addr constant [45 x i8] c"Warning: Unexpected EOF reading AIFF header\0A\00", align 1
@.str.70 = private unnamed_addr constant [93 x i8] c"Warning: OggEnc does not support this type of AIFF/AIFC file\0A Must be 8, 16, or 24 bit PCM.\0A\00", align 1
@.str.71 = private unnamed_addr constant [5 x i8] c"RIFF\00", align 1
@.str.72 = private unnamed_addr constant [5 x i8] c"WAVE\00", align 1
@.str.73 = private unnamed_addr constant [5 x i8] c"fmt \00", align 1
@.str.74 = private unnamed_addr constant [50 x i8] c"Warning: Unrecognised format chunk in WAV header\0A\00", align 1
@.str.75 = private unnamed_addr constant [87 x i8] c"Warning: INVALID format chunk in wav header.\0A Trying to read anyway (may not work)...\0A\00", align 1
@.str.76 = private unnamed_addr constant [47 x i8] c"Warning: Unexpected EOF in reading WAV header\0A\00", align 1
@.str.77 = private unnamed_addr constant [5 x i8] c"data\00", align 1
@.str.78 = private unnamed_addr constant [89 x i8] c"ERROR: Wav file is unsupported type (must be standard PCM\0A or type 3 floating point PCM\0A\00", align 1
@.str.79 = private unnamed_addr constant [93 x i8] c"ERROR: Wav file is unsupported subformat (must be 8,16, or 24 bit PCM\0Aor floating point PCM\0A\00", align 1
@.str.80 = private unnamed_addr constant [66 x i8] c"Big endian 24 bit PCM data is not currently supported, aborting.\0A\00", align 1
@.str.81 = private unnamed_addr constant [57 x i8] c"Internal error: attempt to read unsupported bitdepth %d\0A\00", align 1
@.str.82 = private unnamed_addr constant [31 x i8] c"Couldn't initialise resampler\0A\00", align 1
@.str.83 = private unnamed_addr constant [41 x i8] c"Internal error! Please report this bug.\0A\00", align 1
@.str.84 = private unnamed_addr constant [80 x i8] c"255 channels should be enough for anyone. (Sorry, vorbis doesn't support more)\0A\00", align 1
@.str.85 = private unnamed_addr constant [60 x i8] c"Requesting a minimum or maximum bitrate requires --managed\0A\00", align 1
@.str.86 = private unnamed_addr constant [60 x i8] c"Mode initialisation failed: invalid parameters for quality\0A\00", align 1
@.str.87 = private unnamed_addr constant [60 x i8] c"Mode initialisation failed: invalid parameters for bitrate\0A\00", align 1
@.str.88 = private unnamed_addr constant [40 x i8] c"Failed writing header to output stream\0A\00", align 1
@.str.89 = private unnamed_addr constant [38 x i8] c"Failed writing data to output stream\0A\00", align 1
@.str.90 = private unnamed_addr constant [5 x i8] c"|/-\\\00", align 1
@update_statistics_full.spinpoint = internal unnamed_addr global i32 0, align 4
@.str.92 = private unnamed_addr constant [36 x i8] c"\09[%5.1f%%] [%2dm%.2ds remaining] %c\00", align 1
@update_statistics_notime.spinpoint = internal unnamed_addr global i32 0, align 4
@.str.93 = private unnamed_addr constant [32 x i8] c"\09Encoding [%2dm%.2ds so far] %c\00", align 1
@.str.94 = private unnamed_addr constant [27 x i8] c"\0A\0ADone encoding file \22%s\22\0A\00", align 1
@.str.95 = private unnamed_addr constant [18 x i8] c"\0A\0ADone encoding.\0A\00", align 1
@.str.96 = private unnamed_addr constant [29 x i8] c"\0A\09File length:  %dm %04.1fs\0A\00", align 1
@.str.97 = private unnamed_addr constant [28 x i8] c"\09Elapsed time: %dm %04.1fs\0A\00", align 1
@.str.98 = private unnamed_addr constant [21 x i8] c"\09Rate:         %.4f\0A\00", align 1
@.str.99 = private unnamed_addr constant [30 x i8] c"\09Average bitrate: %.1f kb/s\0A\0A\00", align 1
@.str.100 = private unnamed_addr constant [5 x i8] c"\0A%s\0A\00", align 1
@.str.101 = private unnamed_addr constant [65 x i8] c"Encoding %s%s%s to \0A         %s%s%s \0Aat average bitrate %d kbps \00", align 1
@.str.102 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.103 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.104 = private unnamed_addr constant [15 x i8] c"standard input\00", align 1
@.str.105 = private unnamed_addr constant [16 x i8] c"standard output\00", align 1
@.str.106 = private unnamed_addr constant [41 x i8] c", \0Ausing full bitrate management engine\0A\00", align 1
@.str.107 = private unnamed_addr constant [92 x i8] c"Encoding %s%s%s to \0A         %s%s%s \0Aat approximate bitrate %d kbps (VBR encoding enabled)\0A\00", align 1
@.str.108 = private unnamed_addr constant [83 x i8] c"Encoding %s%s%s to \0A         %s%s%s \0Aat quality level %2.2f using constrained VBR \00", align 1
@.str.110 = private unnamed_addr constant [55 x i8] c"Encoding %s%s%s to \0A         %s%s%s \0Aat quality %2.2f\0A\00", align 1
@.str.111 = private unnamed_addr constant [63 x i8] c"Encoding %s%s%s to \0A         %s%s%s \0Ausing bitrate management \00", align 1
@timer_time.now.0 = internal unnamed_addr global i64 42, align 8
@.str.112 = private unnamed_addr constant [36 x i8] c"Couldn't create directory \22%s\22: %s\0A\00", align 1
@.str.113 = private unnamed_addr constant [50 x i8] c"Error checking for existence of directory %s: %s\0A\00", align 1
@.str.114 = private unnamed_addr constant [45 x i8] c"Error: path segment \22%s\22 is not a directory\0A\00", align 1
@opterr = dso_local global i32 1, align 4
@optopt = dso_local global i32 63, align 4
@optarg = dso_local global ptr null, align 8
@__getopt_initialized = internal global i32 0, align 4
@nextchar = internal unnamed_addr global ptr null, align 8
@last_nonopt = internal unnamed_addr global i32 0, align 4
@first_nonopt = internal unnamed_addr global i32 0, align 4
@ordering = internal unnamed_addr global i32 0, align 4
@.str.115 = private unnamed_addr constant [3 x i8] c"--\00", align 1
@.str.116 = private unnamed_addr constant [30 x i8] c"%s: option `%s' is ambiguous\0A\00", align 1
@.str.117 = private unnamed_addr constant [45 x i8] c"%s: option `--%s' doesn't allow an argument\0A\00", align 1
@.str.118 = private unnamed_addr constant [45 x i8] c"%s: option `%c%s' doesn't allow an argument\0A\00", align 1
@.str.119 = private unnamed_addr constant [38 x i8] c"%s: option `%s' requires an argument\0A\00", align 1
@.str.120 = private unnamed_addr constant [32 x i8] c"%s: unrecognized option `--%s'\0A\00", align 1
@.str.121 = private unnamed_addr constant [32 x i8] c"%s: unrecognized option `%c%s'\0A\00", align 1
@posixly_correct = internal unnamed_addr global ptr null, align 8
@.str.122 = private unnamed_addr constant [26 x i8] c"%s: illegal option -- %c\0A\00", align 1
@.str.123 = private unnamed_addr constant [26 x i8] c"%s: invalid option -- %c\0A\00", align 1
@.str.124 = private unnamed_addr constant [39 x i8] c"%s: option requires an argument -- %c\0A\00", align 1
@.str.125 = private unnamed_addr constant [33 x i8] c"%s: option `-W %s' is ambiguous\0A\00", align 1
@.str.126 = private unnamed_addr constant [46 x i8] c"%s: option `-W %s' doesn't allow an argument\0A\00", align 1
@rate_mapping_44_stereo = internal global [11 x double] [double 3.200000e+04, double 4.000000e+04, double 4.800000e+04, double 5.600000e+04, double 6.400000e+04, double 8.000000e+04, double 9.600000e+04, double 1.120000e+05, double 1.280000e+05, double 1.600000e+05, double 2.500010e+05], align 16
@quality_mapping_44 = internal global [11 x double] [double 0.000000e+00, double 1.000000e-01, double 2.000000e-01, double 3.000000e-01, double 4.000000e-01, double 5.000000e-01, double 6.000000e-01, double 0x3FE6666666666666, double 8.000000e-01, double 9.000000e-01, double 1.000000e+00], align 16
@blocksize_short_44 = internal global [10 x i32] [i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256], align 16
@blocksize_long_44 = internal global [10 x i32] [i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048], align 16
@_psy_tone_masteratt_44 = internal global [11 x %struct.att3] [%struct.att3 { [3 x i32] [i32 30, i32 20, i32 8], float -2.000000e+00, float 1.250000e+00 }, %struct.att3 { [3 x i32] [i32 25, i32 14, i32 4], float 0.000000e+00, float 0.000000e+00 }, %struct.att3 { [3 x i32] [i32 20, i32 10, i32 -2], float 0.000000e+00, float 0.000000e+00 }, %struct.att3 { [3 x i32] [i32 20, i32 9, i32 -4], float 0.000000e+00, float 0.000000e+00 }, %struct.att3 { [3 x i32] [i32 20, i32 9, i32 -4], float 0.000000e+00, float 0.000000e+00 }, %struct.att3 { [3 x i32] [i32 20, i32 6, i32 -6], float 0.000000e+00, float 0.000000e+00 }, %struct.att3 { [3 x i32] [i32 20, i32 3, i32 -10], float 0.000000e+00, float 0.000000e+00 }, %struct.att3 { [3 x i32] [i32 18, i32 1, i32 -14], float 0.000000e+00, float 0.000000e+00 }, %struct.att3 { [3 x i32] [i32 18, i32 0, i32 -16], float 0.000000e+00, float 0.000000e+00 }, %struct.att3 { [3 x i32] [i32 18, i32 -2, i32 -16], float 0.000000e+00, float 0.000000e+00 }, %struct.att3 { [3 x i32] [i32 12, i32 -2, i32 -20], float 0.000000e+00, float 0.000000e+00 }], align 16
@_psy_tone_0dB = internal global [11 x i32] [i32 90, i32 95, i32 95, i32 95, i32 95, i32 105, i32 105, i32 105, i32 105, i32 105, i32 105], align 16
@_psy_tone_suppress = internal global [11 x i32] [i32 -20, i32 -20, i32 -20, i32 -20, i32 -24, i32 -30, i32 -40, i32 -40, i32 -45, i32 -45, i32 -45], align 16
@_psy_noiseguards_44 = internal global [4 x %struct.noiseguard] [%struct.noiseguard { i32 3, i32 3, i32 15 }, %struct.noiseguard { i32 3, i32 3, i32 15 }, %struct.noiseguard { i32 10, i32 10, i32 100 }, %struct.noiseguard { i32 10, i32 10, i32 100 }], align 16
@_psy_noisebias_impulse = internal global [11 x %struct.noise3] [%struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -4, i32 0, i32 0, i32 4, i32 4, i32 8, i32 8, i32 8, i32 10, i32 12, i32 14, i32 20], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -22, i32 -20, i32 -14, i32 -6, i32 -2, i32 0, i32 0, i32 0, i32 0, i32 2, i32 4, i32 10], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -24, i32 -20, i32 -14, i32 -10, i32 -6, i32 -8, i32 -8, i32 -6, i32 -6, i32 -6, i32 -4, i32 -2]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -12, i32 -12, i32 -12, i32 -12, i32 -12, i32 -8, i32 -6, i32 -4, i32 0, i32 4, i32 4, i32 4, i32 4, i32 10, i32 12, i32 14, i32 20], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -22, i32 -20, i32 -14, i32 -10, i32 -6, i32 -4, i32 -4, i32 -2, i32 -2, i32 -2, i32 -2, i32 2], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -22, i32 -20, i32 -14, i32 -10, i32 -8, i32 -10, i32 -10, i32 -8, i32 -8, i32 -8, i32 -6, i32 -4]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -14, i32 -14, i32 -14, i32 -14, i32 -14, i32 -10, i32 -8, i32 -6, i32 -2, i32 2, i32 2, i32 2, i32 2, i32 8, i32 10, i32 10, i32 16], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -22, i32 -20, i32 -14, i32 -10, i32 -6, i32 -6, i32 -6, i32 -4, i32 -4, i32 -4, i32 -2, i32 0], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -22, i32 -20, i32 -14, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -8, i32 -4]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -14, i32 -14, i32 -14, i32 -14, i32 -14, i32 -10, i32 -8, i32 -6, i32 -2, i32 2, i32 2, i32 2, i32 2, i32 6, i32 8, i32 8, i32 14], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -22, i32 -20, i32 -14, i32 -10, i32 -6, i32 -6, i32 -6, i32 -4, i32 -4, i32 -4, i32 -2, i32 0], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -22, i32 -20, i32 -14, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -8, i32 -4]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -16, i32 -16, i32 -16, i32 -16, i32 -16, i32 -12, i32 -10, i32 -6, i32 -2, i32 0, i32 0, i32 0, i32 0, i32 4, i32 6, i32 6, i32 12], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -22, i32 -20, i32 -14, i32 -10, i32 -6, i32 -6, i32 -6, i32 -4, i32 -4, i32 -4, i32 -2, i32 0], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -22, i32 -20, i32 -14, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -8, i32 -4]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -18, i32 -14, i32 -10, i32 -4, i32 0, i32 0, i32 0, i32 0, i32 4, i32 4, i32 6, i32 11], [17 x i32] [i32 -32, i32 -32, i32 -32, i32 -32, i32 -28, i32 -24, i32 -22, i32 -16, i32 -10, i32 -6, i32 -8, i32 -8, i32 -6, i32 -6, i32 -6, i32 -4, i32 -2], [17 x i32] [i32 -34, i32 -34, i32 -34, i32 -34, i32 -30, i32 -26, i32 -24, i32 -18, i32 -14, i32 -12, i32 -12, i32 -12, i32 -12, i32 -12, i32 -10, i32 -9, i32 -5]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -18, i32 -14, i32 -10, i32 -4, i32 0, i32 0, i32 0, i32 0, i32 4, i32 4, i32 6, i32 11], [17 x i32] [i32 -34, i32 -34, i32 -34, i32 -34, i32 -30, i32 -30, i32 -24, i32 -20, i32 -12, i32 -12, i32 -14, i32 -14, i32 -10, i32 -9, i32 -8, i32 -6, i32 -4], [17 x i32] [i32 -34, i32 -34, i32 -34, i32 -34, i32 -34, i32 -30, i32 -26, i32 -20, i32 -16, i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -13, i32 -12, i32 -8]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -22, i32 -22, i32 -22, i32 -22, i32 -22, i32 -20, i32 -14, i32 -10, i32 -6, i32 0, i32 0, i32 0, i32 0, i32 4, i32 4, i32 6, i32 11], [17 x i32] [i32 -34, i32 -34, i32 -34, i32 -34, i32 -30, i32 -30, i32 -24, i32 -20, i32 -14, i32 -14, i32 -16, i32 -16, i32 -14, i32 -12, i32 -10, i32 -10, i32 -10], [17 x i32] [i32 -34, i32 -34, i32 -34, i32 -34, i32 -32, i32 -32, i32 -30, i32 -24, i32 -20, i32 -19, i32 -19, i32 -19, i32 -19, i32 -19, i32 -17, i32 -16, i32 -12]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -24, i32 -24, i32 -24, i32 -24, i32 -24, i32 -22, i32 -14, i32 -10, i32 -6, i32 -1, i32 -1, i32 -1, i32 -1, i32 3, i32 3, i32 5, i32 10], [17 x i32] [i32 -34, i32 -34, i32 -34, i32 -34, i32 -30, i32 -30, i32 -30, i32 -24, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -18, i32 -16, i32 -16, i32 -14], [17 x i32] [i32 -36, i32 -36, i32 -36, i32 -36, i32 -36, i32 -34, i32 -28, i32 -24, i32 -24, i32 -24, i32 -24, i32 -24, i32 -24, i32 -24, i32 -24, i32 -20, i32 -16]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -28, i32 -28, i32 -28, i32 -28, i32 -28, i32 -28, i32 -28, i32 -20, i32 -14, i32 -8, i32 -4, i32 -4, i32 -4, i32 -4, i32 -4, i32 -2, i32 2], [17 x i32] [i32 -36, i32 -36, i32 -36, i32 -36, i32 -34, i32 -32, i32 -32, i32 -30, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -22, i32 -20, i32 -20, i32 -18], [17 x i32] [i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -32, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -24, i32 -20]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -24, i32 -24, i32 -24, i32 -20, i32 -16, i32 -16, i32 -16, i32 -16, i32 -16, i32 -14, i32 -12], [17 x i32] [i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -35, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -26], [17 x i32] [i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40]] }], align 16
@_psy_noisebias_padding = internal global [11 x %struct.noise3] [%struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -4, i32 0, i32 0, i32 4, i32 8, i32 8, i32 8, i32 8, i32 10, i32 12, i32 14, i32 20], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -22, i32 -20, i32 -14, i32 -10, i32 -4, i32 -2, i32 2, i32 3, i32 6, i32 6, i32 8, i32 10], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -22, i32 -20, i32 -14, i32 -10, i32 -4, i32 -4, i32 -4, i32 -4, i32 -4, i32 -2, i32 0, i32 2]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -12, i32 -12, i32 -12, i32 -12, i32 -12, i32 -8, i32 -6, i32 -4, i32 0, i32 4, i32 4, i32 4, i32 4, i32 10, i32 12, i32 14, i32 20], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -22, i32 -20, i32 -14, i32 -10, i32 -4, i32 0, i32 0, i32 0, i32 2, i32 2, i32 4, i32 8], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -22, i32 -20, i32 -14, i32 -10, i32 -6, i32 -6, i32 -6, i32 -6, i32 -6, i32 -4, i32 -2, i32 0]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -14, i32 -14, i32 -14, i32 -14, i32 -14, i32 -10, i32 -8, i32 -6, i32 -2, i32 2, i32 2, i32 2, i32 2, i32 8, i32 10, i32 10, i32 16], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -22, i32 -20, i32 -14, i32 -10, i32 -4, i32 0, i32 0, i32 0, i32 2, i32 2, i32 4, i32 8], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -22, i32 -20, i32 -14, i32 -10, i32 -8, i32 -8, i32 -8, i32 -8, i32 -8, i32 -6, i32 -4, i32 -2]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -14, i32 -14, i32 -14, i32 -14, i32 -14, i32 -10, i32 -8, i32 -6, i32 -2, i32 2, i32 2, i32 2, i32 2, i32 6, i32 8, i32 8, i32 14], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -22, i32 -20, i32 -14, i32 -10, i32 -6, i32 -1, i32 -1, i32 -1, i32 0, i32 0, i32 2, i32 6], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -22, i32 -20, i32 -14, i32 -10, i32 -8, i32 -8, i32 -8, i32 -8, i32 -8, i32 -6, i32 -4, i32 -2]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -16, i32 -16, i32 -16, i32 -16, i32 -16, i32 -12, i32 -10, i32 -6, i32 -2, i32 0, i32 0, i32 0, i32 0, i32 4, i32 6, i32 6, i32 12], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -22, i32 -20, i32 -14, i32 -10, i32 -6, i32 -1, i32 -1, i32 -1, i32 -1, i32 0, i32 2, i32 6], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -22, i32 -20, i32 -14, i32 -10, i32 -8, i32 -8, i32 -8, i32 -8, i32 -8, i32 -6, i32 -4, i32 -2]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -18, i32 -14, i32 -10, i32 -4, i32 0, i32 0, i32 0, i32 0, i32 4, i32 6, i32 6, i32 12], [17 x i32] [i32 -32, i32 -32, i32 -32, i32 -32, i32 -28, i32 -24, i32 -22, i32 -16, i32 -12, i32 -6, i32 -3, i32 -3, i32 -3, i32 -3, i32 -2, i32 0, i32 4], [17 x i32] [i32 -34, i32 -34, i32 -34, i32 -34, i32 -30, i32 -26, i32 -24, i32 -18, i32 -14, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -8, i32 -5, i32 -3]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -18, i32 -14, i32 -10, i32 -4, i32 0, i32 0, i32 0, i32 0, i32 4, i32 6, i32 6, i32 12], [17 x i32] [i32 -34, i32 -34, i32 -34, i32 -34, i32 -30, i32 -30, i32 -24, i32 -20, i32 -14, i32 -8, i32 -4, i32 -4, i32 -4, i32 -4, i32 -3, i32 -1, i32 4], [17 x i32] [i32 -34, i32 -34, i32 -34, i32 -34, i32 -34, i32 -30, i32 -26, i32 -20, i32 -16, i32 -13, i32 -13, i32 -13, i32 -13, i32 -13, i32 -11, i32 -8, i32 -6]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -18, i32 -14, i32 -10, i32 -4, i32 0, i32 0, i32 0, i32 0, i32 4, i32 6, i32 6, i32 12], [17 x i32] [i32 -34, i32 -34, i32 -34, i32 -34, i32 -30, i32 -30, i32 -30, i32 -24, i32 -16, i32 -10, i32 -8, i32 -6, i32 -6, i32 -6, i32 -5, i32 -3, i32 1], [17 x i32] [i32 -34, i32 -34, i32 -34, i32 -34, i32 -32, i32 -32, i32 -28, i32 -22, i32 -18, i32 -16, i32 -16, i32 -16, i32 -16, i32 -16, i32 -14, i32 -12, i32 -10]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -22, i32 -22, i32 -22, i32 -22, i32 -22, i32 -20, i32 -14, i32 -10, i32 -4, i32 0, i32 0, i32 0, i32 0, i32 3, i32 5, i32 5, i32 11], [17 x i32] [i32 -34, i32 -34, i32 -34, i32 -34, i32 -30, i32 -30, i32 -30, i32 -24, i32 -16, i32 -12, i32 -10, i32 -8, i32 -8, i32 -8, i32 -7, i32 -5, i32 -2], [17 x i32] [i32 -36, i32 -36, i32 -36, i32 -36, i32 -36, i32 -34, i32 -28, i32 -22, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -16, i32 -14]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -28, i32 -28, i32 -28, i32 -28, i32 -28, i32 -28, i32 -28, i32 -20, i32 -14, i32 -8, i32 -2, i32 -2, i32 -2, i32 -2, i32 0, i32 2, i32 6], [17 x i32] [i32 -36, i32 -36, i32 -36, i32 -36, i32 -34, i32 -32, i32 -32, i32 -24, i32 -16, i32 -12, i32 -12, i32 -12, i32 -12, i32 -12, i32 -10, i32 -8, i32 -5], [17 x i32] [i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -32, i32 -26, i32 -24, i32 -24, i32 -24, i32 -24, i32 -24, i32 -24, i32 -20, i32 -18]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -24, i32 -24, i32 -24, i32 -20, i32 -12, i32 -12, i32 -12, i32 -12, i32 -12, i32 -10, i32 -8], [17 x i32] [i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -35, i32 -30, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -15], [17 x i32] [i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40]] }], align 16
@_psy_noisebias_trans = internal global [11 x %struct.noise3] [%struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -12, i32 -10, i32 -8, i32 0, i32 2, i32 4, i32 4, i32 5, i32 5, i32 5, i32 8, i32 10], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -22, i32 -20, i32 -14, i32 -8, i32 -4, i32 0, i32 0, i32 0, i32 0, i32 2, i32 4, i32 10], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -22, i32 -20, i32 -14, i32 -10, i32 -6, i32 -6, i32 -6, i32 -6, i32 -4, i32 -4, i32 -4, i32 -2]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -12, i32 -10, i32 -8, i32 0, i32 2, i32 4, i32 4, i32 5, i32 5, i32 5, i32 8, i32 10], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -22, i32 -20, i32 -14, i32 -10, i32 -4, i32 -2, i32 -2, i32 -2, i32 -2, i32 0, i32 2, i32 8], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -22, i32 -20, i32 -14, i32 -10, i32 -8, i32 -8, i32 -8, i32 -8, i32 -6, i32 -6, i32 -6, i32 -4]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -12, i32 -10, i32 -8, i32 0, i32 2, i32 2, i32 2, i32 4, i32 4, i32 5, i32 6, i32 10], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -22, i32 -20, i32 -14, i32 -10, i32 -4, i32 -2, i32 -2, i32 -2, i32 -2, i32 0, i32 2, i32 6], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -22, i32 -20, i32 -14, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -8, i32 -8, i32 -8, i32 -4]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -12, i32 -10, i32 -8, i32 0, i32 2, i32 2, i32 2, i32 4, i32 4, i32 4, i32 5, i32 8], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -22, i32 -20, i32 -14, i32 -10, i32 -4, i32 -3, i32 -3, i32 -3, i32 -3, i32 -1, i32 1, i32 6], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -22, i32 -20, i32 -14, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -8, i32 -8, i32 -8, i32 -4]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -18, i32 -14, i32 -8, i32 -1, i32 1, i32 1, i32 1, i32 2, i32 3, i32 3, i32 4, i32 7], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -22, i32 -20, i32 -14, i32 -10, i32 -4, i32 -3, i32 -3, i32 -3, i32 -3, i32 -1, i32 1, i32 5], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -22, i32 -20, i32 -14, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -8, i32 -8, i32 -8, i32 -4]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -24, i32 -24, i32 -24, i32 -24, i32 -20, i32 -18, i32 -14, i32 -8, i32 -1, i32 1, i32 1, i32 1, i32 2, i32 3, i32 3, i32 4, i32 7], [17 x i32] [i32 -32, i32 -32, i32 -32, i32 -32, i32 -28, i32 -24, i32 -22, i32 -16, i32 -12, i32 -6, i32 -4, i32 -4, i32 -4, i32 -4, i32 -2, i32 -1, i32 2], [17 x i32] [i32 -34, i32 -34, i32 -34, i32 -34, i32 -30, i32 -24, i32 -24, i32 -18, i32 -14, i32 -12, i32 -12, i32 -12, i32 -12, i32 -10, i32 -10, i32 -9, i32 -5]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -24, i32 -24, i32 -24, i32 -24, i32 -20, i32 -18, i32 -14, i32 -8, i32 -1, i32 1, i32 1, i32 1, i32 2, i32 3, i32 3, i32 4, i32 7], [17 x i32] [i32 -32, i32 -32, i32 -32, i32 -32, i32 -28, i32 -24, i32 -24, i32 -18, i32 -14, i32 -8, i32 -6, i32 -6, i32 -6, i32 -6, i32 -4, i32 -2, i32 1], [17 x i32] [i32 -34, i32 -34, i32 -34, i32 -34, i32 -30, i32 -26, i32 -24, i32 -18, i32 -17, i32 -15, i32 -15, i32 -15, i32 -15, i32 -13, i32 -13, i32 -12, i32 -8]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -24, i32 -24, i32 -24, i32 -24, i32 -20, i32 -18, i32 -14, i32 -8, i32 -1, i32 1, i32 1, i32 1, i32 2, i32 3, i32 3, i32 4, i32 7], [17 x i32] [i32 -32, i32 -32, i32 -32, i32 -32, i32 -28, i32 -24, i32 -24, i32 -18, i32 -14, i32 -12, i32 -10, i32 -8, i32 -8, i32 -8, i32 -6, i32 -4, i32 0], [17 x i32] [i32 -34, i32 -34, i32 -34, i32 -34, i32 -30, i32 -26, i32 -26, i32 -24, i32 -22, i32 -19, i32 -19, i32 -19, i32 -19, i32 -18, i32 -17, i32 -16, i32 -12]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -24, i32 -24, i32 -24, i32 -24, i32 -22, i32 -20, i32 -15, i32 -10, i32 -8, i32 -2, i32 0, i32 0, i32 0, i32 1, i32 2, i32 3, i32 7], [17 x i32] [i32 -36, i32 -36, i32 -36, i32 -36, i32 -30, i32 -30, i32 -30, i32 -24, i32 -18, i32 -14, i32 -12, i32 -10, i32 -10, i32 -10, i32 -8, i32 -6, i32 -2], [17 x i32] [i32 -36, i32 -36, i32 -36, i32 -36, i32 -34, i32 -30, i32 -28, i32 -26, i32 -24, i32 -24, i32 -24, i32 -24, i32 -24, i32 -24, i32 -24, i32 -20, i32 -16]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -28, i32 -28, i32 -28, i32 -28, i32 -28, i32 -28, i32 -28, i32 -20, i32 -14, i32 -8, i32 -4, i32 -4, i32 -4, i32 -4, i32 -4, i32 -2, i32 2], [17 x i32] [i32 -36, i32 -36, i32 -36, i32 -36, i32 -34, i32 -32, i32 -32, i32 -28, i32 -20, i32 -16, i32 -16, i32 -16, i32 -16, i32 -14, i32 -12, i32 -10, i32 -7], [17 x i32] [i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -32, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -24, i32 -20]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -28, i32 -20, i32 -14, i32 -14, i32 -14, i32 -14, i32 -14, i32 -14, i32 -12, i32 -10], [17 x i32] [i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -35, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -20], [17 x i32] [i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40]] }], align 16
@_psy_noisebias_long = internal global [11 x %struct.noise3] [%struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -8, i32 2, i32 2, i32 2, i32 4, i32 4, i32 5, i32 5, i32 5, i32 8, i32 10], [17 x i32] [i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -14, i32 -6, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 4, i32 10], [17 x i32] [i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -14, i32 -8, i32 -6, i32 -6, i32 -6, i32 -6, i32 -4, i32 -4, i32 -4, i32 -2]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -8, i32 -4, i32 0, i32 2, i32 4, i32 4, i32 5, i32 5, i32 5, i32 8, i32 10], [17 x i32] [i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -14, i32 -10, i32 -4, i32 -2, i32 -2, i32 -2, i32 -2, i32 0, i32 2, i32 8], [17 x i32] [i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -14, i32 -10, i32 -8, i32 -8, i32 -8, i32 -8, i32 -6, i32 -6, i32 -6, i32 -4]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -8, i32 0, i32 2, i32 2, i32 2, i32 4, i32 4, i32 5, i32 6, i32 10], [17 x i32] [i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -14, i32 -10, i32 -4, i32 -2, i32 -2, i32 -2, i32 -2, i32 0, i32 2, i32 6], [17 x i32] [i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -14, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -8, i32 -8, i32 -8, i32 -4]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -8, i32 0, i32 2, i32 2, i32 2, i32 4, i32 4, i32 4, i32 5, i32 8], [17 x i32] [i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -14, i32 -10, i32 -4, i32 -3, i32 -3, i32 -3, i32 -3, i32 -1, i32 1, i32 6], [17 x i32] [i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -14, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -8, i32 -8, i32 -8, i32 -4]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -10, i32 -4, i32 1, i32 1, i32 1, i32 2, i32 3, i32 3, i32 4, i32 7], [17 x i32] [i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -14, i32 -10, i32 -4, i32 -3, i32 -3, i32 -3, i32 -3, i32 -1, i32 1, i32 5], [17 x i32] [i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -14, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -8, i32 -8, i32 -8, i32 -4]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -10, i32 -4, i32 1, i32 1, i32 1, i32 2, i32 3, i32 3, i32 4, i32 7], [17 x i32] [i32 -22, i32 -22, i32 -22, i32 -22, i32 -22, i32 -22, i32 -22, i32 -16, i32 -12, i32 -6, i32 -4, i32 -4, i32 -4, i32 -4, i32 -2, i32 -1, i32 2], [17 x i32] [i32 -24, i32 -24, i32 -24, i32 -24, i32 -24, i32 -24, i32 -24, i32 -18, i32 -14, i32 -12, i32 -12, i32 -12, i32 -12, i32 -10, i32 -10, i32 -9, i32 -5]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -10, i32 -4, i32 1, i32 1, i32 1, i32 2, i32 3, i32 3, i32 4, i32 7], [17 x i32] [i32 -24, i32 -24, i32 -24, i32 -24, i32 -24, i32 -24, i32 -24, i32 -18, i32 -14, i32 -8, i32 -6, i32 -6, i32 -6, i32 -6, i32 -4, i32 -2, i32 1], [17 x i32] [i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -18, i32 -16, i32 -15, i32 -15, i32 -15, i32 -15, i32 -13, i32 -13, i32 -12, i32 -8]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -10, i32 -4, i32 1, i32 1, i32 1, i32 2, i32 3, i32 3, i32 4, i32 7], [17 x i32] [i32 -24, i32 -24, i32 -24, i32 -24, i32 -24, i32 -24, i32 -24, i32 -18, i32 -14, i32 -10, i32 -8, i32 -8, i32 -8, i32 -8, i32 -6, i32 -4, i32 0], [17 x i32] [i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -22, i32 -20, i32 -19, i32 -19, i32 -19, i32 -19, i32 -18, i32 -17, i32 -16, i32 -12]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -10, i32 -4, i32 0, i32 0, i32 0, i32 0, i32 1, i32 2, i32 3, i32 7], [17 x i32] [i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -20, i32 -16, i32 -12, i32 -10, i32 -10, i32 -10, i32 -10, i32 -8, i32 -6, i32 -2], [17 x i32] [i32 -28, i32 -28, i32 -28, i32 -28, i32 -28, i32 -28, i32 -28, i32 -26, i32 -24, i32 -24, i32 -24, i32 -24, i32 -24, i32 -24, i32 -24, i32 -20, i32 -16]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -22, i32 -22, i32 -22, i32 -22, i32 -22, i32 -22, i32 -22, i32 -18, i32 -14, i32 -8, i32 -4, i32 -4, i32 -4, i32 -4, i32 -4, i32 -2, i32 2], [17 x i32] [i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -22, i32 -18, i32 -16, i32 -16, i32 -16, i32 -16, i32 -14, i32 -12, i32 -10, i32 -7], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -24, i32 -20]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -24, i32 -24, i32 -24, i32 -24, i32 -24, i32 -24, i32 -24, i32 -24, i32 -24, i32 -18, i32 -14, i32 -14, i32 -14, i32 -14, i32 -14, i32 -12, i32 -10], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -20], [17 x i32] [i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40]] }], align 16
@_psy_noise_suppress = internal global [11 x i32] [i32 -20, i32 -24, i32 -24, i32 -24, i32 -24, i32 -30, i32 -40, i32 -40, i32 -45, i32 -45, i32 -45], align 16
@_psy_compand_44 = internal global [6 x %struct.compandblock] [%struct.compandblock { [40 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39] }, %struct.compandblock { [40 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 6, i32 7, i32 7, i32 7, i32 7, i32 6, i32 6, i32 6, i32 7, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 17, i32 17, i32 18, i32 18, i32 19, i32 19, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25] }, %struct.compandblock { [40 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 5, i32 5, i32 6, i32 6, i32 6, i32 5, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 5, i32 5, i32 5, i32 6, i32 6, i32 6, i32 7, i32 7, i32 7, i32 8, i32 8, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18] }, %struct.compandblock { [40 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39] }, %struct.compandblock { [40 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 12, i32 13, i32 13, i32 13, i32 14, i32 14, i32 14, i32 15, i32 15, i32 15, i32 15, i32 16, i32 16, i32 17, i32 17, i32 17, i32 18, i32 18, i32 19, i32 19, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25] }, %struct.compandblock { [40 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 8, i32 7, i32 6, i32 5, i32 4, i32 4, i32 4, i32 4, i32 4, i32 5, i32 5, i32 5, i32 6, i32 6, i32 6, i32 7, i32 7, i32 7, i32 8, i32 8, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18] }], align 16
@_psy_compand_short_mapping = internal global [11 x double] [double 1.000000e+00, double 1.000000e+00, double 1.300000e+00, double 1.600000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00], align 16
@_psy_compand_long_mapping = internal global [11 x double] [double 4.000000e+00, double 4.000000e+00, double 4.300000e+00, double 4.600000e+00, double 5.000000e+00, double 5.000000e+00, double 5.000000e+00, double 5.000000e+00, double 5.000000e+00, double 5.000000e+00, double 5.000000e+00], align 16
@_noise_start_short_44 = internal global [10 x i32] [i32 16, i32 16, i32 16, i32 16, i32 32, i32 32, i32 9999, i32 9999, i32 9999, i32 9999], align 16
@_noise_start_long_44 = internal global [10 x i32] [i32 128, i32 128, i32 128, i32 256, i32 512, i32 512, i32 9999, i32 9999, i32 9999, i32 9999], align 16
@_noise_part_short_44 = internal global [10 x i32] [i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8], align 16
@_noise_part_long_44 = internal global [10 x i32] [i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32], align 16
@_noise_thresh_44 = internal global [10 x double] [double 2.000000e-01, double 2.000000e-01, double 3.000000e-01, double 4.000000e-01, double 5.000000e-01, double 5.000000e-01, double 9.999000e+03, double 9.999000e+03, double 9.999000e+03, double 9.999000e+03], align 16
@_psy_ath_floater = internal global [11 x i32] [i32 -100, i32 -100, i32 -100, i32 -100, i32 -100, i32 -105, i32 -105, i32 -105, i32 -105, i32 -110, i32 -120], align 16
@_psy_ath_abs = internal global [11 x i32] [i32 -130, i32 -130, i32 -130, i32 -140, i32 -140, i32 -140, i32 -140, i32 -140, i32 -140, i32 -140, i32 -150], align 16
@_psy_lowpass_44 = internal global [11 x double] [double 1.510000e+01, double 1.580000e+01, double 1.650000e+01, double 1.790000e+01, double 2.050000e+01, double 4.800000e+01, double 9.990000e+02, double 9.990000e+02, double 9.990000e+02, double 9.990000e+02, double 9.990000e+02], align 16
@_global_mapping_44 = internal global [11 x double] [double 1.000000e+00, double 1.000000e+00, double 1.500000e+00, double 2.000000e+00, double 2.000000e+00, double 2.500000e+00, double 2.700000e+00, double 3.000000e+00, double 3.500000e+00, double 4.000000e+00, double 4.000000e+00], align 16
@_floor_books = internal global [10 x ptr] [ptr @_floor_128x4_books, ptr @_floor_256x4_books, ptr @_floor_128x7_books, ptr @_floor_256x7_books, ptr @_floor_128x11_books, ptr @_floor_128x17_books, ptr @_floor_128x17_books, ptr @_floor_1024x27_books, ptr @_floor_1024x27_books, ptr @_floor_512x17_books], align 16
@_floor_short_mapping_44 = internal global [10 x i32] [i32 0, i32 0, i32 2, i32 2, i32 4, i32 5, i32 5, i32 5, i32 5, i32 5], align 16
@_floor_long_mapping_44 = internal global [10 x i32] [i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7], align 16
@_mapres_template_44_stereo = internal global [10 x %struct.adv_opt] [%struct.adv_opt { ptr @_map_nominal, ptr @_res_44s_0 }, %struct.adv_opt { ptr @_map_nominal, ptr @_res_44s_1 }, %struct.adv_opt { ptr @_map_nominal, ptr @_res_44s_2 }, %struct.adv_opt { ptr @_map_nominal, ptr @_res_44s_3 }, %struct.adv_opt { ptr @_map_nominal, ptr @_res_44s_4 }, %struct.adv_opt { ptr @_map_nominal, ptr @_res_44s_5 }, %struct.adv_opt { ptr @_map_nominal, ptr @_res_44s_6 }, %struct.adv_opt { ptr @_map_nominal, ptr @_res_44s_7 }, %struct.adv_opt { ptr @_map_nominal, ptr @_res_44s_8 }, %struct.adv_opt { ptr @_map_nominal, ptr @_res_44s_9 }], align 16
@ve_setup_44_stereo = internal global %struct.ve_setup_data_template { i32 10, ptr @rate_mapping_44_stereo, ptr @quality_mapping_44, i32 2, i64 40000, i64 50000, ptr @blocksize_short_44, ptr @blocksize_long_44, ptr @_psy_tone_masteratt_44, ptr @_psy_tone_0dB, ptr @_psy_tone_suppress, ptr @_vp_tonemask_adj_otherblock, ptr @_vp_tonemask_adj_longblock, ptr @_vp_tonemask_adj_otherblock, ptr @_psy_noiseguards_44, ptr @_psy_noisebias_impulse, ptr @_psy_noisebias_padding, ptr @_psy_noisebias_trans, ptr @_psy_noisebias_long, ptr @_psy_noise_suppress, ptr @_psy_compand_44, ptr @_psy_compand_short_mapping, ptr @_psy_compand_long_mapping, [2 x ptr] [ptr @_noise_start_short_44, ptr @_noise_start_long_44], [2 x ptr] [ptr @_noise_part_short_44, ptr @_noise_part_long_44], ptr @_noise_thresh_44, ptr @_psy_ath_floater, ptr @_psy_ath_abs, ptr @_psy_lowpass_44, ptr @_psy_global_44, ptr @_global_mapping_44, ptr @_psy_stereo_modes_44, ptr @_floor_books, ptr @_floor, ptr @_floor_short_mapping_44, ptr @_floor_long_mapping_44, ptr @_mapres_template_44_stereo }, align 8
@rate_mapping_44_stereo_low = internal global [2 x double] [double 2.250000e+04, double 3.200000e+04], align 16
@quality_mapping_44_stereo_low = internal global [2 x double] [double -1.000000e-01, double 0.000000e+00], align 16
@blocksize_short_44_low = internal global [1 x i32] [i32 512], align 4
@blocksize_long_44_low = internal global [1 x i32] [i32 4096], align 4
@_psy_tone_masteratt_44_low = internal global [2 x %struct.att3] [%struct.att3 { [3 x i32] [i32 34, i32 20, i32 8], float 0.000000e+00, float 1.250000e+00 }, %struct.att3 { [3 x i32] [i32 34, i32 20, i32 8], float -2.000000e+00, float 1.250000e+00 }], align 16
@_psy_noisebias_trans_low = internal global [2 x %struct.noise3] [%struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -4, i32 0, i32 0, i32 4, i32 8, i32 8, i32 8, i32 8, i32 10, i32 12, i32 14, i32 20], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -20, i32 -16, i32 -8, i32 -6, i32 -6, i32 -2, i32 2, i32 2, i32 4, i32 8, i32 8, i32 15], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -24, i32 -20, i32 -14, i32 -10, i32 -6, i32 -8, i32 -8, i32 -6, i32 -6, i32 -6, i32 -4, i32 -2]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -10, i32 -5, i32 0, i32 2, i32 2, i32 6, i32 6, i32 6, i32 8, i32 10, i32 12, i32 15], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -22, i32 -20, i32 -14, i32 -10, i32 -4, i32 -2, i32 0, i32 0, i32 0, i32 2, i32 4, i32 10], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -22, i32 -20, i32 -14, i32 -10, i32 -6, i32 -6, i32 -6, i32 -6, i32 -4, i32 -4, i32 -4, i32 -2]] }], align 16
@_psy_noisebias_long_low = internal global [2 x %struct.noise3] [%struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -4, i32 0, i32 0, i32 0, i32 6, i32 6, i32 6, i32 6, i32 10, i32 10, i32 12, i32 20], [17 x i32] [i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -10, i32 -2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 4, i32 6, i32 15], [17 x i32] [i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -10, i32 -6, i32 -6, i32 -6, i32 -6, i32 -6, i32 -4, i32 -4, i32 -4, i32 -2]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -8, i32 -8, i32 0, i32 2, i32 4, i32 4, i32 5, i32 5, i32 5, i32 8, i32 10], [17 x i32] [i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -14, i32 -8, i32 -2, i32 0, i32 0, i32 0, i32 0, i32 2, i32 4, i32 10], [17 x i32] [i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -14, i32 -6, i32 -6, i32 -6, i32 -6, i32 -6, i32 -4, i32 -4, i32 -4, i32 -2]] }], align 16
@_noise_start_short_44_low = internal global [2 x i32] [i32 32, i32 32], align 4
@_noise_start_long_44_low = internal global [2 x i32] [i32 256, i32 256], align 4
@_psy_lowpass_44_low = internal global [2 x double] [double 1.510000e+01, double 1.510000e+01], align 16
@_global_mapping_44_low = internal global [2 x double] [double 0.000000e+00, double 1.000000e+00], align 16
@_psy_stereo_modes_44_low = internal global [2 x %struct.adj_stereo] [%struct.adj_stereo { [15 x i32] [i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 3, i32 2, i32 2, i32 1, i32 0, i32 0, i32 0, i32 0], [15 x i32] [i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 5, i32 4, i32 3], [15 x float] [float 1.000000e+00, float 2.000000e+00, float 3.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 5.000000e+00, float 6.000000e+00, float 7.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00], [15 x float] [float 1.200000e+01, float 1.250000e+01, float 1.300000e+01, float 1.350000e+01, float 1.400000e+01, float 1.450000e+01, float 1.500000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01] }, %struct.adj_stereo { [15 x i32] [i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 3, i32 2, i32 2, i32 1, i32 0, i32 0, i32 0, i32 0], [15 x i32] [i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 5, i32 4, i32 3], [15 x float] [float 1.000000e+00, float 2.000000e+00, float 3.000000e+00, float 4.000000e+00, float 5.000000e+00, float 5.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 7.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00], [15 x float] [float 1.200000e+01, float 1.250000e+01, float 1.300000e+01, float 1.350000e+01, float 1.400000e+01, float 1.450000e+01, float 1.500000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01] }], align 16
@_floor_short_mapping_44_low = internal global [1 x i32] [i32 1], align 4
@_floor_long_mapping_44_low = internal global [1 x i32] [i32 8], align 4
@ve_setup_44_stereo_low = internal global %struct.ve_setup_data_template { i32 1, ptr @rate_mapping_44_stereo_low, ptr @quality_mapping_44_stereo_low, i32 2, i64 40000, i64 50000, ptr @blocksize_short_44_low, ptr @blocksize_long_44_low, ptr @_psy_tone_masteratt_44_low, ptr @_psy_tone_0dB, ptr @_psy_tone_suppress, ptr @_vp_tonemask_adj_otherblock, ptr @_vp_tonemask_adj_longblock, ptr @_vp_tonemask_adj_otherblock, ptr @_psy_noiseguards_44, ptr @_psy_noisebias_trans_low, ptr @_psy_noisebias_trans_low, ptr @_psy_noisebias_trans_low, ptr @_psy_noisebias_long_low, ptr @_psy_noise_suppress, ptr @_psy_compand_44, ptr @_psy_compand_short_mapping, ptr @_psy_compand_long_mapping, [2 x ptr] [ptr @_noise_start_short_44_low, ptr @_noise_start_long_44_low], [2 x ptr] [ptr @_noise_part_short_44, ptr @_noise_part_long_44], ptr @_noise_thresh_44, ptr @_psy_ath_floater, ptr @_psy_ath_abs, ptr @_psy_lowpass_44_low, ptr @_psy_global_44, ptr @_global_mapping_44_low, ptr @_psy_stereo_modes_44_low, ptr @_floor_books, ptr @_floor, ptr @_floor_short_mapping_44_low, ptr @_floor_long_mapping_44_low, ptr @_mapres_template_44_stereo }, align 8
@rate_mapping_44_un = internal global [11 x double] [double 4.800000e+04, double 6.000000e+04, double 7.000000e+04, double 8.000000e+04, double 8.600000e+04, double 9.600000e+04, double 1.100000e+05, double 1.200000e+05, double 1.400000e+05, double 1.600000e+05, double 2.400010e+05], align 16
@_noise_thresh_44_2 = internal global [2 x double] [double 5.000000e-01, double 5.000000e-01], align 16
@_mapres_template_44_uncoupled = internal global [10 x %struct.adv_opt] [%struct.adv_opt { ptr @_map_nominal_u, ptr @_res_44u_0 }, %struct.adv_opt { ptr @_map_nominal_u, ptr @_res_44u_1 }, %struct.adv_opt { ptr @_map_nominal_u, ptr @_res_44u_2 }, %struct.adv_opt { ptr @_map_nominal_u, ptr @_res_44u_3 }, %struct.adv_opt { ptr @_map_nominal_u, ptr @_res_44u_4 }, %struct.adv_opt { ptr @_map_nominal_u, ptr @_res_44u_5 }, %struct.adv_opt { ptr @_map_nominal_u, ptr @_res_44u_6 }, %struct.adv_opt { ptr @_map_nominal_u, ptr @_res_44u_7 }, %struct.adv_opt { ptr @_map_nominal_u, ptr @_res_44u_8 }, %struct.adv_opt { ptr @_map_nominal_u, ptr @_res_44u_9 }], align 16
@ve_setup_44_uncoupled = internal global %struct.ve_setup_data_template { i32 10, ptr @rate_mapping_44_un, ptr @quality_mapping_44, i32 -1, i64 40000, i64 50000, ptr @blocksize_short_44, ptr @blocksize_long_44, ptr @_psy_tone_masteratt_44, ptr @_psy_tone_0dB, ptr @_psy_tone_suppress, ptr @_vp_tonemask_adj_otherblock, ptr @_vp_tonemask_adj_longblock, ptr @_vp_tonemask_adj_otherblock, ptr @_psy_noiseguards_44, ptr @_psy_noisebias_impulse, ptr @_psy_noisebias_padding, ptr @_psy_noisebias_trans, ptr @_psy_noisebias_long, ptr @_psy_noise_suppress, ptr @_psy_compand_44, ptr @_psy_compand_short_mapping, ptr @_psy_compand_long_mapping, [2 x ptr] [ptr @_noise_start_short_44, ptr @_noise_start_long_44], [2 x ptr] [ptr @_noise_part_short_44, ptr @_noise_part_long_44], ptr @_noise_thresh_44_2, ptr @_psy_ath_floater, ptr @_psy_ath_abs, ptr @_psy_lowpass_44, ptr @_psy_global_44, ptr @_global_mapping_44, ptr null, ptr @_floor_books, ptr @_floor, ptr @_floor_short_mapping_44, ptr @_floor_long_mapping_44, ptr @_mapres_template_44_uncoupled }, align 8
@rate_mapping_44_un_low = internal global [2 x double] [double 3.200000e+04, double 4.800000e+04], align 16
@ve_setup_44_uncoupled_low = internal global %struct.ve_setup_data_template { i32 1, ptr @rate_mapping_44_un_low, ptr @quality_mapping_44_stereo_low, i32 -1, i64 40000, i64 50000, ptr @blocksize_short_44_low, ptr @blocksize_long_44_low, ptr @_psy_tone_masteratt_44_low, ptr @_psy_tone_0dB, ptr @_psy_tone_suppress, ptr @_vp_tonemask_adj_otherblock, ptr @_vp_tonemask_adj_longblock, ptr @_vp_tonemask_adj_otherblock, ptr @_psy_noiseguards_44, ptr @_psy_noisebias_trans_low, ptr @_psy_noisebias_trans_low, ptr @_psy_noisebias_trans_low, ptr @_psy_noisebias_long_low, ptr @_psy_noise_suppress, ptr @_psy_compand_44, ptr @_psy_compand_short_mapping, ptr @_psy_compand_long_mapping, [2 x ptr] [ptr @_noise_start_short_44_low, ptr @_noise_start_long_44_low], [2 x ptr] [ptr @_noise_part_short_44, ptr @_noise_part_long_44], ptr @_noise_thresh_44_2, ptr @_psy_ath_floater, ptr @_psy_ath_abs, ptr @_psy_lowpass_44_low, ptr @_psy_global_44, ptr @_global_mapping_44_low, ptr null, ptr @_floor_books, ptr @_floor, ptr @_floor_short_mapping_44_low, ptr @_floor_long_mapping_44_low, ptr @_mapres_template_44_uncoupled }, align 8
@rate_mapping_32 = internal global [11 x double] [double 2.800000e+04, double 3.500000e+04, double 4.500000e+04, double 5.600000e+04, double 6.000000e+04, double 7.500000e+04, double 9.000000e+04, double 1.000000e+05, double 1.150000e+05, double 1.500000e+05, double 1.900000e+05], align 16
@_psy_lowpass_32 = internal global [11 x double] [double 1.300000e+01, double 1.300000e+01, double 1.400000e+01, double 1.500000e+01, double 9.900000e+01, double 9.900000e+01, double 9.900000e+01, double 9.900000e+01, double 9.900000e+01, double 9.900000e+01, double 9.900000e+01], align 16
@ve_setup_32_stereo = internal global %struct.ve_setup_data_template { i32 10, ptr @rate_mapping_32, ptr @quality_mapping_44, i32 2, i64 26000, i64 40000, ptr @blocksize_short_44, ptr @blocksize_long_44, ptr @_psy_tone_masteratt_44, ptr @_psy_tone_0dB, ptr @_psy_tone_suppress, ptr @_vp_tonemask_adj_otherblock, ptr @_vp_tonemask_adj_longblock, ptr @_vp_tonemask_adj_otherblock, ptr @_psy_noiseguards_44, ptr @_psy_noisebias_impulse, ptr @_psy_noisebias_padding, ptr @_psy_noisebias_trans, ptr @_psy_noisebias_long, ptr @_psy_noise_suppress, ptr @_psy_compand_44, ptr @_psy_compand_short_mapping, ptr @_psy_compand_long_mapping, [2 x ptr] [ptr @_noise_start_short_44, ptr @_noise_start_long_44], [2 x ptr] [ptr @_noise_part_short_44, ptr @_noise_part_long_44], ptr @_noise_thresh_44, ptr @_psy_ath_floater, ptr @_psy_ath_abs, ptr @_psy_lowpass_32, ptr @_psy_global_44, ptr @_global_mapping_44, ptr @_psy_stereo_modes_44, ptr @_floor_books, ptr @_floor, ptr @_floor_short_mapping_44, ptr @_floor_long_mapping_44, ptr @_mapres_template_44_stereo }, align 8
@rate_mapping_32_un = internal global [11 x double] [double 4.200000e+04, double 5.200000e+04, double 6.400000e+04, double 7.200000e+04, double 7.800000e+04, double 8.600000e+04, double 9.200000e+04, double 1.100000e+05, double 1.200000e+05, double 1.400000e+05, double 1.900000e+05], align 16
@ve_setup_32_uncoupled = internal global %struct.ve_setup_data_template { i32 10, ptr @rate_mapping_32_un, ptr @quality_mapping_44, i32 -1, i64 26000, i64 40000, ptr @blocksize_short_44, ptr @blocksize_long_44, ptr @_psy_tone_masteratt_44, ptr @_psy_tone_0dB, ptr @_psy_tone_suppress, ptr @_vp_tonemask_adj_otherblock, ptr @_vp_tonemask_adj_longblock, ptr @_vp_tonemask_adj_otherblock, ptr @_psy_noiseguards_44, ptr @_psy_noisebias_impulse, ptr @_psy_noisebias_padding, ptr @_psy_noisebias_trans, ptr @_psy_noisebias_long, ptr @_psy_noise_suppress, ptr @_psy_compand_44, ptr @_psy_compand_short_mapping, ptr @_psy_compand_long_mapping, [2 x ptr] [ptr @_noise_start_short_44, ptr @_noise_start_long_44], [2 x ptr] [ptr @_noise_part_short_44, ptr @_noise_part_long_44], ptr @_noise_thresh_44_2, ptr @_psy_ath_floater, ptr @_psy_ath_abs, ptr @_psy_lowpass_32, ptr @_psy_global_44, ptr @_global_mapping_44, ptr null, ptr @_floor_books, ptr @_floor, ptr @_floor_short_mapping_44, ptr @_floor_long_mapping_44, ptr @_mapres_template_44_uncoupled }, align 8
@rate_mapping_32_low = internal global [2 x double] [double 2.000000e+04, double 2.800000e+04], align 16
@_psy_lowpass_32_low = internal global [2 x double] [double 1.300000e+01, double 1.300000e+01], align 16
@ve_setup_32_stereo_low = internal global %struct.ve_setup_data_template { i32 1, ptr @rate_mapping_32_low, ptr @quality_mapping_44_stereo_low, i32 2, i64 26000, i64 40000, ptr @blocksize_short_44_low, ptr @blocksize_long_44_low, ptr @_psy_tone_masteratt_44_low, ptr @_psy_tone_0dB, ptr @_psy_tone_suppress, ptr @_vp_tonemask_adj_otherblock, ptr @_vp_tonemask_adj_longblock, ptr @_vp_tonemask_adj_otherblock, ptr @_psy_noiseguards_44, ptr @_psy_noisebias_trans_low, ptr @_psy_noisebias_trans_low, ptr @_psy_noisebias_trans_low, ptr @_psy_noisebias_long_low, ptr @_psy_noise_suppress, ptr @_psy_compand_44, ptr @_psy_compand_short_mapping, ptr @_psy_compand_long_mapping, [2 x ptr] [ptr @_noise_start_short_44_low, ptr @_noise_start_long_44_low], [2 x ptr] [ptr @_noise_part_short_44, ptr @_noise_part_long_44], ptr @_noise_thresh_44, ptr @_psy_ath_floater, ptr @_psy_ath_abs, ptr @_psy_lowpass_32_low, ptr @_psy_global_44, ptr @_global_mapping_44, ptr @_psy_stereo_modes_44_low, ptr @_floor_books, ptr @_floor, ptr @_floor_short_mapping_44_low, ptr @_floor_long_mapping_44_low, ptr @_mapres_template_44_stereo }, align 8
@rate_mapping_32_un_low = internal global [2 x double] [double 2.400000e+04, double 4.200000e+04], align 16
@ve_setup_32_uncoupled_low = internal global %struct.ve_setup_data_template { i32 1, ptr @rate_mapping_32_un_low, ptr @quality_mapping_44_stereo_low, i32 -1, i64 26000, i64 40000, ptr @blocksize_short_44_low, ptr @blocksize_long_44_low, ptr @_psy_tone_masteratt_44_low, ptr @_psy_tone_0dB, ptr @_psy_tone_suppress, ptr @_vp_tonemask_adj_otherblock, ptr @_vp_tonemask_adj_longblock, ptr @_vp_tonemask_adj_otherblock, ptr @_psy_noiseguards_44, ptr @_psy_noisebias_trans_low, ptr @_psy_noisebias_trans_low, ptr @_psy_noisebias_trans_low, ptr @_psy_noisebias_long_low, ptr @_psy_noise_suppress, ptr @_psy_compand_44, ptr @_psy_compand_short_mapping, ptr @_psy_compand_long_mapping, [2 x ptr] [ptr @_noise_start_short_44_low, ptr @_noise_start_long_44_low], [2 x ptr] [ptr @_noise_part_short_44, ptr @_noise_part_long_44], ptr @_noise_thresh_44_2, ptr @_psy_ath_floater, ptr @_psy_ath_abs, ptr @_psy_lowpass_32_low, ptr @_psy_global_44, ptr @_global_mapping_44, ptr null, ptr @_floor_books, ptr @_floor, ptr @_floor_short_mapping_44_low, ptr @_floor_long_mapping_44_low, ptr @_mapres_template_44_uncoupled }, align 8
@rate_mapping_8 = internal global [3 x double] [double 6.000000e+03, double 9.000000e+03, double 3.200000e+04], align 16
@quality_mapping_8 = internal global [3 x double] [double -1.000000e-01, double 0.000000e+00, double 1.000000e+00], align 16
@blocksize_8 = internal global [2 x i32] [i32 512, i32 512], align 4
@_psy_tone_masteratt_8 = internal global [3 x %struct.att3] [%struct.att3 { [3 x i32] [i32 32, i32 25, i32 12], float 0.000000e+00, float 0.000000e+00 }, %struct.att3 { [3 x i32] [i32 30, i32 25, i32 12], float 0.000000e+00, float 0.000000e+00 }, %struct.att3 { [3 x i32] [i32 20, i32 0, i32 -14], float 0.000000e+00, float 0.000000e+00 }], align 16
@_vp_tonemask_adj_8 = internal global [3 x %struct.vp_adjblock] [%struct.vp_adjblock { [17 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -10, i32 -10, i32 -6, i32 0, i32 0, i32 0, i32 0, i32 10, i32 0, i32 0, i32 99, i32 99, i32 99] }, %struct.vp_adjblock { [17 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -10, i32 -10, i32 -6, i32 0, i32 0, i32 0, i32 0, i32 10, i32 0, i32 0, i32 99, i32 99, i32 99] }, %struct.vp_adjblock { [17 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -10, i32 -10, i32 -6, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 99, i32 99, i32 99] }], align 16
@_psy_noiseguards_8 = internal global [2 x %struct.noiseguard] [%struct.noiseguard { i32 10, i32 10, i32 -1 }, %struct.noiseguard { i32 10, i32 10, i32 -1 }], align 16
@_psy_noisebias_8 = internal global [3 x %struct.noise3] [%struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -10, i32 -10, i32 -10, i32 -10, i32 -5, i32 -5, i32 -5, i32 0, i32 4, i32 8, i32 8, i32 8, i32 10, i32 10, i32 99, i32 99, i32 99], [17 x i32] [i32 -10, i32 -10, i32 -10, i32 -10, i32 -5, i32 -5, i32 -5, i32 0, i32 0, i32 4, i32 4, i32 4, i32 4, i32 4, i32 99, i32 99, i32 99], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -24, i32 -20, i32 -14, i32 -10, i32 -6, i32 -8, i32 -8, i32 -6, i32 -6, i32 99, i32 99, i32 99]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -10, i32 -10, i32 -10, i32 -10, i32 -5, i32 -5, i32 -5, i32 0, i32 4, i32 8, i32 8, i32 8, i32 10, i32 10, i32 99, i32 99, i32 99], [17 x i32] [i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -5, i32 -5, i32 -5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 99, i32 99, i32 99], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -24, i32 -20, i32 -14, i32 -10, i32 -6, i32 -8, i32 -8, i32 -6, i32 -6, i32 99, i32 99, i32 99]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -12, i32 -10, i32 -8, i32 0, i32 2, i32 4, i32 4, i32 5, i32 5, i32 99, i32 99, i32 99], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -22, i32 -20, i32 -14, i32 -12, i32 -12, i32 -10, i32 -10, i32 -10, i32 -10, i32 99, i32 99, i32 99], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -24, i32 99, i32 99, i32 99]] }], align 16
@_psy_compand_8 = internal global [2 x %struct.compandblock] [%struct.compandblock { [40 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15, i32 16, i32 16, i32 17, i32 17, i32 17, i32 18, i32 18, i32 19, i32 19, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25] }, %struct.compandblock { [40 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 6, i32 7, i32 7, i32 6, i32 6, i32 5, i32 5, i32 4, i32 4, i32 3, i32 3, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24] }], align 16
@_psy_compand_8_mapping = internal global [3 x double] [double 0.000000e+00, double 1.000000e+00, double 1.000000e+00], align 16
@_noise_start_8 = internal global [2 x i32] [i32 64, i32 64], align 4
@_noise_part_8 = internal global [2 x i32] [i32 8, i32 8], align 4
@_psy_ath_floater_8 = internal global [3 x i32] [i32 -100, i32 -100, i32 -105], align 4
@_psy_ath_abs_8 = internal global [3 x i32] [i32 -130, i32 -130, i32 -140], align 4
@_psy_lowpass_8 = internal global [3 x double] [double 3.000000e+00, double 4.000000e+00, double 4.000000e+00], align 16
@_global_mapping_8 = internal global [3 x double] [double 1.000000e+00, double 2.000000e+00, double 3.000000e+00], align 16
@_psy_stereo_modes_8 = internal global [3 x %struct.adj_stereo] [%struct.adj_stereo { [15 x i32] [i32 4, i32 4, i32 4, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3], [15 x i32] [i32 6, i32 5, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4], [15 x float] [float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00], [15 x float] [float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01] }, %struct.adj_stereo { [15 x i32] [i32 4, i32 4, i32 4, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3], [15 x i32] [i32 6, i32 5, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4], [15 x float] [float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00], [15 x float] [float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01] }, %struct.adj_stereo { [15 x i32] [i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3], [15 x i32] [i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4], [15 x float] [float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00], [15 x float] [float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01] }], align 16
@_floor_mapping_8 = internal global [2 x i32] [i32 1, i32 1], align 4
@_mapres_template_8_stereo = internal global [2 x %struct.adv_opt] [%struct.adv_opt { ptr @_map_nominal, ptr @_res_8s_0 }, %struct.adv_opt { ptr @_map_nominal, ptr @_res_8s_1 }], align 16
@ve_setup_8_stereo = internal global %struct.ve_setup_data_template { i32 2, ptr @rate_mapping_8, ptr @quality_mapping_8, i32 2, i64 8000, i64 9000, ptr @blocksize_8, ptr @blocksize_8, ptr @_psy_tone_masteratt_8, ptr @_psy_tone_0dB, ptr @_psy_tone_suppress, ptr @_vp_tonemask_adj_8, ptr null, ptr @_vp_tonemask_adj_8, ptr @_psy_noiseguards_8, ptr @_psy_noisebias_8, ptr @_psy_noisebias_8, ptr null, ptr null, ptr @_psy_noise_suppress, ptr @_psy_compand_8, ptr @_psy_compand_8_mapping, ptr null, [2 x ptr] [ptr @_noise_start_8, ptr @_noise_start_8], [2 x ptr] [ptr @_noise_part_8, ptr @_noise_part_8], ptr @_noise_thresh_44_2, ptr @_psy_ath_floater_8, ptr @_psy_ath_abs_8, ptr @_psy_lowpass_8, ptr @_psy_global_44, ptr @_global_mapping_8, ptr @_psy_stereo_modes_8, ptr @_floor_books, ptr @_floor, ptr @_floor_mapping_8, ptr null, ptr @_mapres_template_8_stereo }, align 8
@rate_mapping_8_uncoupled = internal global [3 x double] [double 8.000000e+03, double 1.400000e+04, double 4.200000e+04], align 16
@_mapres_template_8_uncoupled = internal global [2 x %struct.adv_opt] [%struct.adv_opt { ptr @_map_nominal_u, ptr @_res_8u_0 }, %struct.adv_opt { ptr @_map_nominal_u, ptr @_res_8u_1 }], align 16
@ve_setup_8_uncoupled = internal global %struct.ve_setup_data_template { i32 2, ptr @rate_mapping_8_uncoupled, ptr @quality_mapping_8, i32 -1, i64 8000, i64 9000, ptr @blocksize_8, ptr @blocksize_8, ptr @_psy_tone_masteratt_8, ptr @_psy_tone_0dB, ptr @_psy_tone_suppress, ptr @_vp_tonemask_adj_8, ptr null, ptr @_vp_tonemask_adj_8, ptr @_psy_noiseguards_8, ptr @_psy_noisebias_8, ptr @_psy_noisebias_8, ptr null, ptr null, ptr @_psy_noise_suppress, ptr @_psy_compand_8, ptr @_psy_compand_8_mapping, ptr null, [2 x ptr] [ptr @_noise_start_8, ptr @_noise_start_8], [2 x ptr] [ptr @_noise_part_8, ptr @_noise_part_8], ptr @_noise_thresh_44_2, ptr @_psy_ath_floater_8, ptr @_psy_ath_abs_8, ptr @_psy_lowpass_8, ptr @_psy_global_44, ptr @_global_mapping_8, ptr @_psy_stereo_modes_8, ptr @_floor_books, ptr @_floor, ptr @_floor_mapping_8, ptr null, ptr @_mapres_template_8_uncoupled }, align 8
@rate_mapping_11 = internal global [3 x double] [double 8.000000e+03, double 1.300000e+04, double 4.400000e+04], align 16
@quality_mapping_11 = internal global [3 x double] [double -1.000000e-01, double 0.000000e+00, double 1.000000e+00], align 16
@blocksize_11 = internal global [2 x i32] [i32 512, i32 512], align 4
@_psy_tone_masteratt_11 = internal global [3 x %struct.att3] [%struct.att3 { [3 x i32] [i32 30, i32 25, i32 12], float 0.000000e+00, float 0.000000e+00 }, %struct.att3 { [3 x i32] [i32 30, i32 25, i32 12], float 0.000000e+00, float 0.000000e+00 }, %struct.att3 { [3 x i32] [i32 20, i32 0, i32 -14], float 0.000000e+00, float 1.000000e+00 }], align 16
@_vp_tonemask_adj_11 = internal global [3 x %struct.vp_adjblock] [%struct.vp_adjblock { [17 x i32] [i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -16, i32 -10, i32 0, i32 0, i32 0, i32 0, i32 10, i32 2, i32 0, i32 99, i32 99, i32 99] }, %struct.vp_adjblock { [17 x i32] [i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -16, i32 -10, i32 0, i32 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 99, i32 99, i32 99] }, %struct.vp_adjblock { [17 x i32] [i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -16, i32 -10, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 99, i32 99, i32 99] }], align 16
@_psy_noisebias_11 = internal global [3 x %struct.noise3] [%struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -10, i32 -10, i32 -10, i32 -10, i32 -5, i32 -5, i32 -5, i32 0, i32 4, i32 10, i32 10, i32 12, i32 12, i32 12, i32 99, i32 99, i32 99], [17 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -10, i32 -10, i32 -5, i32 0, i32 0, i32 4, i32 4, i32 5, i32 5, i32 10, i32 99, i32 99, i32 99], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -24, i32 -20, i32 -14, i32 -10, i32 -6, i32 -8, i32 -8, i32 -6, i32 -6, i32 99, i32 99, i32 99]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -10, i32 -10, i32 -10, i32 -10, i32 -5, i32 -5, i32 -5, i32 0, i32 4, i32 10, i32 10, i32 12, i32 12, i32 12, i32 99, i32 99, i32 99], [17 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -10, i32 -10, i32 -5, i32 -5, i32 -5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 99, i32 99, i32 99], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -24, i32 -20, i32 -14, i32 -10, i32 -6, i32 -8, i32 -8, i32 -6, i32 -6, i32 99, i32 99, i32 99]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -12, i32 -10, i32 -8, i32 0, i32 2, i32 4, i32 4, i32 5, i32 5, i32 99, i32 99, i32 99], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -22, i32 -20, i32 -14, i32 -12, i32 -12, i32 -10, i32 -10, i32 -10, i32 -10, i32 99, i32 99, i32 99], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -24, i32 99, i32 99, i32 99]] }], align 16
@_noise_thresh_11 = internal global [3 x double] [double 3.000000e-01, double 5.000000e-01, double 5.000000e-01], align 16
@_psy_lowpass_11 = internal global [3 x double] [double 4.500000e+00, double 5.500000e+00, double 3.000000e+01], align 16
@_floor_mapping_11 = internal global [2 x i32] [i32 1, i32 1], align 4
@ve_setup_11_stereo = internal global %struct.ve_setup_data_template { i32 2, ptr @rate_mapping_11, ptr @quality_mapping_11, i32 2, i64 9000, i64 15000, ptr @blocksize_11, ptr @blocksize_11, ptr @_psy_tone_masteratt_11, ptr @_psy_tone_0dB, ptr @_psy_tone_suppress, ptr @_vp_tonemask_adj_11, ptr null, ptr @_vp_tonemask_adj_11, ptr @_psy_noiseguards_8, ptr @_psy_noisebias_11, ptr @_psy_noisebias_11, ptr null, ptr null, ptr @_psy_noise_suppress, ptr @_psy_compand_8, ptr @_psy_compand_8_mapping, ptr null, [2 x ptr] [ptr @_noise_start_8, ptr @_noise_start_8], [2 x ptr] [ptr @_noise_part_8, ptr @_noise_part_8], ptr @_noise_thresh_11, ptr @_psy_ath_floater_8, ptr @_psy_ath_abs_8, ptr @_psy_lowpass_11, ptr @_psy_global_44, ptr @_global_mapping_8, ptr @_psy_stereo_modes_8, ptr @_floor_books, ptr @_floor, ptr @_floor_mapping_11, ptr null, ptr @_mapres_template_8_stereo }, align 8
@rate_mapping_11_uncoupled = internal global [3 x double] [double 1.200000e+04, double 2.000000e+04, double 5.000000e+04], align 16
@ve_setup_11_uncoupled = internal global %struct.ve_setup_data_template { i32 2, ptr @rate_mapping_11_uncoupled, ptr @quality_mapping_11, i32 -1, i64 9000, i64 15000, ptr @blocksize_11, ptr @blocksize_11, ptr @_psy_tone_masteratt_11, ptr @_psy_tone_0dB, ptr @_psy_tone_suppress, ptr @_vp_tonemask_adj_11, ptr null, ptr @_vp_tonemask_adj_11, ptr @_psy_noiseguards_8, ptr @_psy_noisebias_11, ptr @_psy_noisebias_11, ptr null, ptr null, ptr @_psy_noise_suppress, ptr @_psy_compand_8, ptr @_psy_compand_8_mapping, ptr null, [2 x ptr] [ptr @_noise_start_8, ptr @_noise_start_8], [2 x ptr] [ptr @_noise_part_8, ptr @_noise_part_8], ptr @_noise_thresh_11, ptr @_psy_ath_floater_8, ptr @_psy_ath_abs_8, ptr @_psy_lowpass_11, ptr @_psy_global_44, ptr @_global_mapping_8, ptr @_psy_stereo_modes_8, ptr @_floor_books, ptr @_floor, ptr @_floor_mapping_11, ptr null, ptr @_mapres_template_8_uncoupled }, align 8
@rate_mapping_16 = internal global [4 x double] [double 1.200000e+04, double 2.000000e+04, double 4.400000e+04, double 8.600000e+04], align 16
@quality_mapping_16 = internal global [4 x double] [double -1.000000e-01, double 5.000000e-02, double 5.000000e-01, double 1.000000e+00], align 16
@blocksize_16_short = internal global [3 x i32] [i32 1024, i32 512, i32 512], align 4
@blocksize_16_long = internal global [3 x i32] [i32 1024, i32 1024, i32 1024], align 4
@_psy_tone_masteratt_16 = internal global [4 x %struct.att3] [%struct.att3 { [3 x i32] [i32 30, i32 25, i32 12], float 0.000000e+00, float 0.000000e+00 }, %struct.att3 { [3 x i32] [i32 25, i32 22, i32 12], float 0.000000e+00, float 0.000000e+00 }, %struct.att3 { [3 x i32] [i32 20, i32 12, i32 0], float 0.000000e+00, float 0.000000e+00 }, %struct.att3 { [3 x i32] [i32 15, i32 0, i32 -14], float 0.000000e+00, float 0.000000e+00 }], align 16
@_psy_noisebias_16_impulse = internal global [4 x %struct.noise3] [%struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -10, i32 -10, i32 -5, i32 4, i32 10, i32 10, i32 10, i32 10, i32 12, i32 12, i32 14, i32 20], [17 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -10, i32 -10, i32 -5, i32 0, i32 0, i32 4, i32 5, i32 5, i32 6, i32 8, i32 8, i32 15], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -24, i32 -20, i32 -14, i32 -10, i32 -6, i32 -8, i32 -8, i32 -6, i32 -6, i32 -6, i32 -6, i32 -6]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -10, i32 -10, i32 -5, i32 4, i32 4, i32 4, i32 4, i32 5, i32 5, i32 6, i32 8, i32 15], [17 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -10, i32 -5, i32 -5, i32 -5, i32 0, i32 0, i32 0, i32 0, i32 4, i32 10], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -24, i32 -20, i32 -14, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -12, i32 -10, i32 -8, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, i32 10], [17 x i32] [i32 -20, i32 -20, i32 -20, i32 -20, i32 -16, i32 -12, i32 -20, i32 -14, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -7, i32 -5], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -24, i32 -20, i32 -20, i32 -20]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -12, i32 -10, i32 -8, i32 -5, i32 -5, i32 -5, i32 -5, i32 -5, i32 0, i32 0, i32 0, i32 6], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -22, i32 -20, i32 -18, i32 -18, i32 -18, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -16], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -24, i32 -20, i32 -20, i32 -20]] }], align 16
@_psy_noisebias_16_short = internal global [4 x %struct.noise3] [%struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -10, i32 -10, i32 -5, i32 4, i32 10, i32 10, i32 10, i32 10, i32 12, i32 12, i32 14, i32 20], [17 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -10, i32 -10, i32 -5, i32 0, i32 0, i32 4, i32 5, i32 5, i32 6, i32 8, i32 8, i32 15], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -24, i32 -20, i32 -14, i32 -10, i32 -6, i32 -8, i32 -8, i32 -6, i32 -6, i32 -6, i32 -6, i32 -6]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -10, i32 -10, i32 -5, i32 4, i32 6, i32 6, i32 6, i32 6, i32 8, i32 10, i32 12, i32 20], [17 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -10, i32 -5, i32 -5, i32 -5, i32 4, i32 5, i32 6, i32 8, i32 8, i32 15], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -24, i32 -20, i32 -14, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -12, i32 -10, i32 -8, i32 0, i32 2, i32 4, i32 4, i32 5, i32 5, i32 5, i32 8, i32 12], [17 x i32] [i32 -20, i32 -20, i32 -20, i32 -20, i32 -16, i32 -12, i32 -20, i32 -14, i32 -10, i32 -10, i32 -8, i32 0, i32 0, i32 0, i32 0, i32 2, i32 5], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -24, i32 -20, i32 -20, i32 -20]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -12, i32 -10, i32 -8, i32 -5, i32 -5, i32 -5, i32 -5, i32 -5, i32 0, i32 0, i32 0, i32 6], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -22, i32 -20, i32 -14, i32 -12, i32 -12, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -6], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -24, i32 -20, i32 -20, i32 -20]] }], align 16
@_psy_noisebias_16 = internal global [4 x %struct.noise3] [%struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -10, i32 -10, i32 -10, i32 -10, i32 -5, i32 -5, i32 -5, i32 0, i32 4, i32 6, i32 8, i32 8, i32 10, i32 10, i32 10, i32 14, i32 20], [17 x i32] [i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -5, i32 -2, i32 -2, i32 0, i32 0, i32 0, i32 4, i32 5, i32 6, i32 8, i32 8, i32 15], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -24, i32 -20, i32 -14, i32 -10, i32 -6, i32 -8, i32 -8, i32 -6, i32 -6, i32 -6, i32 -6, i32 -6]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -10, i32 -10, i32 -10, i32 -10, i32 -5, i32 -5, i32 -5, i32 0, i32 4, i32 6, i32 6, i32 6, i32 6, i32 8, i32 10, i32 12, i32 20], [17 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -10, i32 -5, i32 -5, i32 0, i32 0, i32 0, i32 4, i32 5, i32 6, i32 8, i32 8, i32 15], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -24, i32 -20, i32 -14, i32 -10, i32 -6, i32 -8, i32 -8, i32 -6, i32 -6, i32 -6, i32 -6, i32 -6]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -12, i32 -10, i32 -8, i32 0, i32 2, i32 4, i32 4, i32 5, i32 5, i32 5, i32 8, i32 12], [17 x i32] [i32 -20, i32 -20, i32 -20, i32 -20, i32 -16, i32 -12, i32 -20, i32 -10, i32 -5, i32 -5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 5], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -24, i32 -20, i32 -20, i32 -20]] }, %struct.noise3 { [3 x [17 x i32]] [[17 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -12, i32 -10, i32 -8, i32 -5, i32 -5, i32 -5, i32 -5, i32 -5, i32 0, i32 0, i32 0, i32 6], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -22, i32 -20, i32 -14, i32 -12, i32 -12, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -6], [17 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -26, i32 -24, i32 -20, i32 -20, i32 -20]] }], align 16
@_psy_compand_16_mapping = internal global [4 x double] [double 0.000000e+00, double 8.000000e-01, double 1.000000e+00, double 1.000000e+00], align 16
@_noise_start_16 = internal global [3 x i32] [i32 256, i32 256, i32 9999], align 4
@_noise_part_16 = internal global [4 x i32] [i32 8, i32 8, i32 8, i32 8], align 16
@_noise_thresh_16 = internal global [4 x double] [double 3.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01], align 16
@_psy_ath_floater_16 = internal global [4 x i32] [i32 -100, i32 -100, i32 -100, i32 -105], align 16
@_psy_ath_abs_16 = internal global [4 x i32] [i32 -130, i32 -130, i32 -130, i32 -140], align 16
@_psy_lowpass_16 = internal global [4 x double] [double 6.500000e+00, double 8.000000e+00, double 3.000000e+01, double 9.900000e+01], align 16
@_global_mapping_16 = internal global [4 x double] [double 1.000000e+00, double 2.000000e+00, double 3.000000e+00, double 4.000000e+00], align 16
@_psy_stereo_modes_16 = internal global [4 x %struct.adj_stereo] [%struct.adj_stereo { [15 x i32] [i32 4, i32 4, i32 4, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3], [15 x i32] [i32 6, i32 5, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4], [15 x float] [float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 3.000000e+00, float 3.000000e+00, float 4.000000e+00, float 4.000000e+00], [15 x float] [float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01] }, %struct.adj_stereo { [15 x i32] [i32 4, i32 4, i32 4, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3], [15 x i32] [i32 6, i32 5, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4], [15 x float] [float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 3.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00], [15 x float] [float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01] }, %struct.adj_stereo { [15 x i32] [i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3], [15 x i32] [i32 5, i32 4, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3], [15 x float] [float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00], [15 x float] [float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01] }, %struct.adj_stereo { [15 x i32] zeroinitializer, [15 x i32] zeroinitializer, [15 x float] [float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00], [15 x float] [float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01] }], align 16
@_floor_mapping_16_short = internal global [3 x i32] [i32 9, i32 3, i32 3], align 4
@_floor_mapping_16 = internal global [3 x i32] [i32 9, i32 9, i32 9], align 4
@_mapres_template_16_stereo = internal global [3 x %struct.adv_opt] [%struct.adv_opt { ptr @_map_nominal, ptr @_res_16s_0 }, %struct.adv_opt { ptr @_map_nominal, ptr @_res_16s_1 }, %struct.adv_opt { ptr @_map_nominal, ptr @_res_16s_2 }], align 16
@ve_setup_16_stereo = internal global %struct.ve_setup_data_template { i32 3, ptr @rate_mapping_16, ptr @quality_mapping_16, i32 2, i64 15000, i64 19000, ptr @blocksize_16_short, ptr @blocksize_16_long, ptr @_psy_tone_masteratt_16, ptr @_psy_tone_0dB, ptr @_psy_tone_suppress, ptr @_vp_tonemask_adj_16, ptr @_vp_tonemask_adj_16, ptr @_vp_tonemask_adj_16, ptr @_psy_noiseguards_8, ptr @_psy_noisebias_16_impulse, ptr @_psy_noisebias_16_short, ptr @_psy_noisebias_16_short, ptr @_psy_noisebias_16, ptr @_psy_noise_suppress, ptr @_psy_compand_8, ptr @_psy_compand_16_mapping, ptr @_psy_compand_16_mapping, [2 x ptr] [ptr @_noise_start_16, ptr @_noise_start_16], [2 x ptr] [ptr @_noise_part_16, ptr @_noise_part_16], ptr @_noise_thresh_16, ptr @_psy_ath_floater_16, ptr @_psy_ath_abs_16, ptr @_psy_lowpass_16, ptr @_psy_global_44, ptr @_global_mapping_16, ptr @_psy_stereo_modes_16, ptr @_floor_books, ptr @_floor, ptr @_floor_mapping_16_short, ptr @_floor_mapping_16, ptr @_mapres_template_16_stereo }, align 8
@rate_mapping_16_uncoupled = internal global [4 x double] [double 1.600000e+04, double 2.800000e+04, double 6.400000e+04, double 1.000000e+05], align 16
@_mapres_template_16_uncoupled = internal global [3 x %struct.adv_opt] [%struct.adv_opt { ptr @_map_nominal_u, ptr @_res_16u_0 }, %struct.adv_opt { ptr @_map_nominal_u, ptr @_res_16u_1 }, %struct.adv_opt { ptr @_map_nominal_u, ptr @_res_16u_2 }], align 16
@ve_setup_16_uncoupled = internal global %struct.ve_setup_data_template { i32 3, ptr @rate_mapping_16_uncoupled, ptr @quality_mapping_16, i32 -1, i64 15000, i64 19000, ptr @blocksize_16_short, ptr @blocksize_16_long, ptr @_psy_tone_masteratt_16, ptr @_psy_tone_0dB, ptr @_psy_tone_suppress, ptr @_vp_tonemask_adj_16, ptr @_vp_tonemask_adj_16, ptr @_vp_tonemask_adj_16, ptr @_psy_noiseguards_8, ptr @_psy_noisebias_16_impulse, ptr @_psy_noisebias_16_short, ptr @_psy_noisebias_16_short, ptr @_psy_noisebias_16, ptr @_psy_noise_suppress, ptr @_psy_compand_8, ptr @_psy_compand_16_mapping, ptr @_psy_compand_16_mapping, [2 x ptr] [ptr @_noise_start_16, ptr @_noise_start_16], [2 x ptr] [ptr @_noise_part_16, ptr @_noise_part_16], ptr @_noise_thresh_16, ptr @_psy_ath_floater_16, ptr @_psy_ath_abs_16, ptr @_psy_lowpass_16, ptr @_psy_global_44, ptr @_global_mapping_16, ptr @_psy_stereo_modes_16, ptr @_floor_books, ptr @_floor, ptr @_floor_mapping_16_short, ptr @_floor_mapping_16, ptr @_mapres_template_16_uncoupled }, align 8
@rate_mapping_22 = internal global [4 x double] [double 1.500000e+04, double 2.000000e+04, double 4.400000e+04, double 8.600000e+04], align 16
@_psy_lowpass_22 = internal global [4 x double] [double 9.500000e+00, double 1.100000e+01, double 3.000000e+01, double 9.900000e+01], align 16
@ve_setup_22_stereo = internal global %struct.ve_setup_data_template { i32 3, ptr @rate_mapping_22, ptr @quality_mapping_16, i32 2, i64 19000, i64 26000, ptr @blocksize_16_short, ptr @blocksize_16_long, ptr @_psy_tone_masteratt_16, ptr @_psy_tone_0dB, ptr @_psy_tone_suppress, ptr @_vp_tonemask_adj_16, ptr @_vp_tonemask_adj_16, ptr @_vp_tonemask_adj_16, ptr @_psy_noiseguards_8, ptr @_psy_noisebias_16_impulse, ptr @_psy_noisebias_16_short, ptr @_psy_noisebias_16_short, ptr @_psy_noisebias_16, ptr @_psy_noise_suppress, ptr @_psy_compand_8, ptr @_psy_compand_8_mapping, ptr @_psy_compand_8_mapping, [2 x ptr] [ptr @_noise_start_16, ptr @_noise_start_16], [2 x ptr] [ptr @_noise_part_16, ptr @_noise_part_16], ptr @_noise_thresh_16, ptr @_psy_ath_floater_16, ptr @_psy_ath_abs_16, ptr @_psy_lowpass_22, ptr @_psy_global_44, ptr @_global_mapping_16, ptr @_psy_stereo_modes_16, ptr @_floor_books, ptr @_floor, ptr @_floor_mapping_16_short, ptr @_floor_mapping_16, ptr @_mapres_template_16_stereo }, align 8
@rate_mapping_22_uncoupled = internal global [4 x double] [double 1.600000e+04, double 2.800000e+04, double 5.000000e+04, double 9.000000e+04], align 16
@ve_setup_22_uncoupled = internal global %struct.ve_setup_data_template { i32 3, ptr @rate_mapping_22_uncoupled, ptr @quality_mapping_16, i32 -1, i64 19000, i64 26000, ptr @blocksize_16_short, ptr @blocksize_16_long, ptr @_psy_tone_masteratt_16, ptr @_psy_tone_0dB, ptr @_psy_tone_suppress, ptr @_vp_tonemask_adj_16, ptr @_vp_tonemask_adj_16, ptr @_vp_tonemask_adj_16, ptr @_psy_noiseguards_8, ptr @_psy_noisebias_16_impulse, ptr @_psy_noisebias_16_short, ptr @_psy_noisebias_16_short, ptr @_psy_noisebias_16, ptr @_psy_noise_suppress, ptr @_psy_compand_8, ptr @_psy_compand_8_mapping, ptr @_psy_compand_8_mapping, [2 x ptr] [ptr @_noise_start_16, ptr @_noise_start_16], [2 x ptr] [ptr @_noise_part_16, ptr @_noise_part_16], ptr @_noise_thresh_16, ptr @_psy_ath_floater_16, ptr @_psy_ath_abs_16, ptr @_psy_lowpass_22, ptr @_psy_global_44, ptr @_global_mapping_16, ptr @_psy_stereo_modes_16, ptr @_floor_books, ptr @_floor, ptr @_floor_mapping_16_short, ptr @_floor_mapping_16, ptr @_mapres_template_16_uncoupled }, align 8
@rate_mapping_X = internal global [11 x double] [double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00], align 16
@ve_setup_X_stereo = internal global %struct.ve_setup_data_template { i32 10, ptr @rate_mapping_X, ptr @quality_mapping_44, i32 2, i64 50000, i64 200000, ptr @blocksize_short_44, ptr @blocksize_long_44, ptr @_psy_tone_masteratt_44, ptr @_psy_tone_0dB, ptr @_psy_tone_suppress, ptr @_vp_tonemask_adj_otherblock, ptr @_vp_tonemask_adj_longblock, ptr @_vp_tonemask_adj_otherblock, ptr @_psy_noiseguards_44, ptr @_psy_noisebias_impulse, ptr @_psy_noisebias_padding, ptr @_psy_noisebias_trans, ptr @_psy_noisebias_long, ptr @_psy_noise_suppress, ptr @_psy_compand_44, ptr @_psy_compand_short_mapping, ptr @_psy_compand_long_mapping, [2 x ptr] [ptr @_noise_start_short_44, ptr @_noise_start_long_44], [2 x ptr] [ptr @_noise_part_short_44, ptr @_noise_part_long_44], ptr @_noise_thresh_44, ptr @_psy_ath_floater, ptr @_psy_ath_abs, ptr @_psy_lowpass_44, ptr @_psy_global_44, ptr @_global_mapping_44, ptr @_psy_stereo_modes_44, ptr @_floor_books, ptr @_floor, ptr @_floor_short_mapping_44, ptr @_floor_long_mapping_44, ptr @_mapres_template_44_stereo }, align 8
@ve_setup_X_uncoupled = internal global %struct.ve_setup_data_template { i32 10, ptr @rate_mapping_X, ptr @quality_mapping_44, i32 -1, i64 50000, i64 200000, ptr @blocksize_short_44, ptr @blocksize_long_44, ptr @_psy_tone_masteratt_44, ptr @_psy_tone_0dB, ptr @_psy_tone_suppress, ptr @_vp_tonemask_adj_otherblock, ptr @_vp_tonemask_adj_longblock, ptr @_vp_tonemask_adj_otherblock, ptr @_psy_noiseguards_44, ptr @_psy_noisebias_impulse, ptr @_psy_noisebias_padding, ptr @_psy_noisebias_trans, ptr @_psy_noisebias_long, ptr @_psy_noise_suppress, ptr @_psy_compand_44, ptr @_psy_compand_short_mapping, ptr @_psy_compand_long_mapping, [2 x ptr] [ptr @_noise_start_short_44, ptr @_noise_start_long_44], [2 x ptr] [ptr @_noise_part_short_44, ptr @_noise_part_long_44], ptr @_noise_thresh_44_2, ptr @_psy_ath_floater, ptr @_psy_ath_abs, ptr @_psy_lowpass_44, ptr @_psy_global_44, ptr @_global_mapping_44, ptr null, ptr @_floor_books, ptr @_floor, ptr @_floor_short_mapping_44, ptr @_floor_long_mapping_44, ptr @_mapres_template_44_uncoupled }, align 8
@ve_setup_X_stereo_low = internal global %struct.ve_setup_data_template { i32 1, ptr @rate_mapping_X, ptr @quality_mapping_44_stereo_low, i32 2, i64 50000, i64 200000, ptr @blocksize_short_44_low, ptr @blocksize_long_44_low, ptr @_psy_tone_masteratt_44_low, ptr @_psy_tone_0dB, ptr @_psy_tone_suppress, ptr @_vp_tonemask_adj_otherblock, ptr @_vp_tonemask_adj_longblock, ptr @_vp_tonemask_adj_otherblock, ptr @_psy_noiseguards_44, ptr @_psy_noisebias_trans_low, ptr @_psy_noisebias_trans_low, ptr @_psy_noisebias_trans_low, ptr @_psy_noisebias_long_low, ptr @_psy_noise_suppress, ptr @_psy_compand_44, ptr @_psy_compand_short_mapping, ptr @_psy_compand_long_mapping, [2 x ptr] [ptr @_noise_start_short_44_low, ptr @_noise_start_long_44_low], [2 x ptr] [ptr @_noise_part_short_44, ptr @_noise_part_long_44], ptr @_noise_thresh_44, ptr @_psy_ath_floater, ptr @_psy_ath_abs, ptr @_psy_lowpass_44_low, ptr @_psy_global_44, ptr @_global_mapping_44, ptr @_psy_stereo_modes_44_low, ptr @_floor_books, ptr @_floor, ptr @_floor_short_mapping_44_low, ptr @_floor_long_mapping_44_low, ptr @_mapres_template_44_stereo }, align 8
@ve_setup_X_uncoupled_low = internal global %struct.ve_setup_data_template { i32 1, ptr @rate_mapping_X, ptr @quality_mapping_44_stereo_low, i32 -1, i64 50000, i64 200000, ptr @blocksize_short_44_low, ptr @blocksize_long_44_low, ptr @_psy_tone_masteratt_44_low, ptr @_psy_tone_0dB, ptr @_psy_tone_suppress, ptr @_vp_tonemask_adj_otherblock, ptr @_vp_tonemask_adj_longblock, ptr @_vp_tonemask_adj_otherblock, ptr @_psy_noiseguards_44, ptr @_psy_noisebias_trans_low, ptr @_psy_noisebias_trans_low, ptr @_psy_noisebias_trans_low, ptr @_psy_noisebias_long_low, ptr @_psy_noise_suppress, ptr @_psy_compand_44, ptr @_psy_compand_short_mapping, ptr @_psy_compand_long_mapping, [2 x ptr] [ptr @_noise_start_short_44_low, ptr @_noise_start_long_44_low], [2 x ptr] [ptr @_noise_part_short_44, ptr @_noise_part_long_44], ptr @_noise_thresh_44_2, ptr @_psy_ath_floater, ptr @_psy_ath_abs, ptr @_psy_lowpass_44_low, ptr @_psy_global_44, ptr @_global_mapping_44, ptr null, ptr @_floor_books, ptr @_floor, ptr @_floor_short_mapping_44_low, ptr @_floor_long_mapping_44_low, ptr @_mapres_template_44_uncoupled }, align 8
@ve_setup_XX_stereo = internal global %struct.ve_setup_data_template { i32 2, ptr @rate_mapping_X, ptr @quality_mapping_8, i32 2, i64 0, i64 8000, ptr @blocksize_8, ptr @blocksize_8, ptr @_psy_tone_masteratt_8, ptr @_psy_tone_0dB, ptr @_psy_tone_suppress, ptr @_vp_tonemask_adj_8, ptr null, ptr @_vp_tonemask_adj_8, ptr @_psy_noiseguards_8, ptr @_psy_noisebias_8, ptr @_psy_noisebias_8, ptr null, ptr null, ptr @_psy_noise_suppress, ptr @_psy_compand_8, ptr @_psy_compand_8_mapping, ptr null, [2 x ptr] [ptr @_noise_start_8, ptr @_noise_start_8], [2 x ptr] [ptr @_noise_part_8, ptr @_noise_part_8], ptr @_noise_thresh_44_2, ptr @_psy_ath_floater_8, ptr @_psy_ath_abs_8, ptr @_psy_lowpass_8, ptr @_psy_global_44, ptr @_global_mapping_8, ptr @_psy_stereo_modes_8, ptr @_floor_books, ptr @_floor, ptr @_floor_mapping_8, ptr null, ptr @_mapres_template_8_stereo }, align 8
@ve_setup_XX_uncoupled = internal global %struct.ve_setup_data_template { i32 2, ptr @rate_mapping_X, ptr @quality_mapping_8, i32 -1, i64 0, i64 8000, ptr @blocksize_8, ptr @blocksize_8, ptr @_psy_tone_masteratt_8, ptr @_psy_tone_0dB, ptr @_psy_tone_suppress, ptr @_vp_tonemask_adj_8, ptr null, ptr @_vp_tonemask_adj_8, ptr @_psy_noiseguards_8, ptr @_psy_noisebias_8, ptr @_psy_noisebias_8, ptr null, ptr null, ptr @_psy_noise_suppress, ptr @_psy_compand_8, ptr @_psy_compand_8_mapping, ptr null, [2 x ptr] [ptr @_noise_start_8, ptr @_noise_start_8], [2 x ptr] [ptr @_noise_part_8, ptr @_noise_part_8], ptr @_noise_thresh_44_2, ptr @_psy_ath_floater_8, ptr @_psy_ath_abs_8, ptr @_psy_lowpass_8, ptr @_psy_global_44, ptr @_global_mapping_8, ptr @_psy_stereo_modes_8, ptr @_floor_books, ptr @_floor, ptr @_floor_mapping_8, ptr null, ptr @_mapres_template_8_uncoupled }, align 8
@.str.130 = private unnamed_addr constant [7 x i8] c"vorbis\00", align 1
@floor0_exportbundle = internal global %struct.vorbis_func_floor { ptr null, ptr @floor0_unpack, ptr @floor0_look, ptr @floor0_free_info, ptr @floor0_free_look, ptr @floor0_inverse1, ptr @floor0_inverse2 }, align 8
@floor1_exportbundle = internal global %struct.vorbis_func_floor { ptr @floor1_pack, ptr @floor1_unpack, ptr @floor1_look, ptr @floor1_free_info, ptr @floor1_free_look, ptr @floor1_inverse1, ptr @floor1_inverse2 }, align 8
@_floor_P = internal global [2 x ptr] [ptr @floor0_exportbundle, ptr @floor1_exportbundle], align 16
@residue0_exportbundle = internal global %struct.vorbis_func_residue { ptr null, ptr @res0_unpack, ptr @res0_look, ptr @res0_free_info, ptr @res0_free_look, ptr null, ptr null, ptr @res0_inverse }, align 8
@residue1_exportbundle = internal global %struct.vorbis_func_residue { ptr @res0_pack, ptr @res0_unpack, ptr @res0_look, ptr @res0_free_info, ptr @res0_free_look, ptr @res1_class, ptr @res1_forward, ptr @res1_inverse }, align 8
@residue2_exportbundle = internal global %struct.vorbis_func_residue { ptr @res0_pack, ptr @res0_unpack, ptr @res0_look, ptr @res0_free_info, ptr @res0_free_look, ptr @res2_class, ptr @res2_forward, ptr @res2_inverse }, align 8
@_residue_P = internal global [3 x ptr] [ptr @residue0_exportbundle, ptr @residue1_exportbundle, ptr @residue2_exportbundle], align 16
@mapping0_exportbundle = internal global %struct.vorbis_func_mapping { ptr @mapping0_pack, ptr @mapping0_unpack, ptr @mapping0_free_info, ptr @mapping0_forward, ptr @mapping0_inverse }, align 8
@_mapping_P = internal global [1 x ptr] [ptr @mapping0_exportbundle], align 8
@ATH = internal unnamed_addr constant [88 x float] [float -5.100000e+01, float -5.200000e+01, float -5.300000e+01, float -5.400000e+01, float -5.500000e+01, float -5.600000e+01, float -5.700000e+01, float -5.800000e+01, float -5.900000e+01, float -6.000000e+01, float -6.100000e+01, float -6.200000e+01, float -6.300000e+01, float -6.400000e+01, float -6.500000e+01, float -6.600000e+01, float -6.700000e+01, float -6.800000e+01, float -6.900000e+01, float -7.000000e+01, float -7.100000e+01, float -7.200000e+01, float -7.300000e+01, float -7.400000e+01, float -7.500000e+01, float -7.600000e+01, float -7.700000e+01, float -7.800000e+01, float -8.000000e+01, float -8.100000e+01, float -8.200000e+01, float -8.300000e+01, float -8.400000e+01, float -8.500000e+01, float -8.600000e+01, float -8.700000e+01, float -8.800000e+01, float -8.800000e+01, float -8.900000e+01, float -8.900000e+01, float -9.000000e+01, float -9.100000e+01, float -9.100000e+01, float -9.200000e+01, float -9.300000e+01, float -9.400000e+01, float -9.500000e+01, float -9.600000e+01, float -9.600000e+01, float -9.700000e+01, float -9.800000e+01, float -9.800000e+01, float -9.900000e+01, float -9.900000e+01, float -1.000000e+02, float -1.000000e+02, float -1.010000e+02, float -1.020000e+02, float -1.030000e+02, float -1.040000e+02, float -1.060000e+02, float -1.070000e+02, float -1.070000e+02, float -1.070000e+02, float -1.070000e+02, float -1.050000e+02, float -1.030000e+02, float -1.020000e+02, float -1.010000e+02, float -9.900000e+01, float -9.800000e+01, float -9.600000e+01, float -9.500000e+01, float -9.500000e+01, float -9.600000e+01, float -9.700000e+01, float -9.600000e+01, float -9.500000e+01, float -9.300000e+01, float -9.000000e+01, float -8.000000e+01, float -7.000000e+01, float -5.000000e+01, float -4.000000e+01, float -3.000000e+01, float -3.000000e+01, float -3.000000e+01, float -3.000000e+01], align 16
@FLOOR1_fromdB_INV_LOOKUP = internal unnamed_addr constant [256 x float] [float 0.000000e+00, float 8.816830e+06, float 8.278820e+06, float 7.773650e+06, float 7.299300e+06, float 6.853890e+06, float 6.435670e+06, float 6.042960e+06, float 5.674220e+06, float 5.327980e+06, float 5.002860e+06, float 4.697590e+06, float 4.410940e+06, float 4.141780e+06, float 3.889050e+06, float 3.651740e+06, float 3.428910e+06, float 3.219680e+06, float 3.023210e+06, float 2.838730e+06, float 2.665510e+06, float 2.502860e+06, float 2.350140e+06, float 2.206730e+06, float 2.072080e+06, float 1.945640e+06, float 1.826920e+06, float 1.715440e+06, float 1.610760e+06, float 1.512470e+06, float 1.420180e+06, float 1.333520e+06, float 1.252150e+06, float 1.175740e+06, float 1.104000e+06, float 1.036630e+06, float 9.733770e+05, float 9.139810e+05, float 8.582100e+05, float 8.058420e+05, float 7.566690e+05, float 7.104970e+05, float 6.671420e+05, float 6.264330e+05, float 5.882080e+05, float 5.523160e+05, float 5.186130e+05, float 4.869670e+05, float 4.572520e+05, float 4.293510e+05, float 4.031520e+05, float 3.785510e+05, float 3.554520e+05, float 3.337620e+05, float 3.133960e+05, float 2.942730e+05, float 2.763160e+05, float 2.594550e+05, float 2.436230e+05, float 2.287570e+05, float 2.147980e+05, float 2.016910e+05, float 1.893840e+05, float 1.778280e+05, float 1.669770e+05, float 1.567880e+05, float 1.472210e+05, float 1.382370e+05, float 1.298020e+05, float 1.218810e+05, float 1.144440e+05, float 1.074610e+05, float 1.009030e+05, float 0x40F721A4C0000000, float 0x40F5B84E60000000, float 0x40F4650340000000, float 0x40F3266CC0000000, float 7.365250e+04, float 0x40F0E26340000000, float 0x40EFB54340000000, float 0x40EDC5F340000000, float 0x40EBF4DCC0000000, float 0x40EA402660000000, float 0x40E8A61340000000, float 0x40E72509A0000000, float 0x40E5BB7CC0000000, float 4.179200e+04, float 0x40E3293CC0000000, float 0x40E1FDE9A0000000, float 0x40E0E4DCC0000000, float 0x40DFB9ECC0000000, float 0x40DDCA5340000000, float 0x40DBF8F340000000, float 2.689600e+04, float 0x40D8A9B340000000, float 0x40D7286CC0000000, float 0x40D5BEACC0000000, float 2.090800e+04, float 0x40D32C0CC0000000, float 0x40D2008CC0000000, float 0x40D0E759A0000000, float 0x40CFBE8CC0000000, float 0x40CDCEB340000000, float 0x40CBFD0CC0000000, float 0x40CA47D9A0000000, float 0x40C8AD4CC0000000, float 0x40C72BD9A0000000, float 0x40C5C1D9A0000000, float 1.046000e+04, float 0x40C32EDC20000000, float 0x40C20331E0000000, float 0x40C0E9D1E0000000, float 0x40BFC33AE0000000, float 0x40BDD30F60000000, float 0x40BC012B80000000, float 0x40BA4BB340000000, float 0x40B8B0EE20000000, float 0x40B72F3AE0000000, float 0x40B5C50F60000000, float 0x40B470FD80000000, float 0x40B331AB80000000, float 0x40B205D700000000, float 0x40B0EC4CC0000000, float 0x40AFC7E140000000, float 0x40ADD770A0000000, float 0x40AC0547A0000000, float 0x40AA4F8F60000000, float 0x40A8B48F60000000, float 0x40A7329EC0000000, float 0x40A5C84280000000, float 0x40A473FAE0000000, float 0x40A3347AE0000000, float 0x40A2087AE0000000, float 0x40A0EEC7A0000000, float 0x409FCC8F60000000, float 0x409DDBCCC0000000, float 0x409C096660000000, float 0x409A536660000000, float 0x4098B82900000000, float 0x4097360A40000000, float 0x4095CB70A0000000, float 1.309750e+03, float 0x40933751E0000000, float 0x40920B1EC0000000, float 0x4090F147A0000000, float 0x408FD13340000000, float 0x408DE03120000000, float 0x408C0D7F00000000, float 0x408A5747A0000000, float 0x4088BBCCC0000000, float 0x4087396EA0000000, float 0x4085CEA3E0000000, float 0x408479FE00000000, float 0x40833A1EC0000000, float 0x40820DC6A0000000, float 0x4080F3C080000000, float 0x407FD5DF40000000, float 0x407DE49380000000, float 0x407C119DC0000000, float 0x407A5B22E0000000, float 0x4078BF6C80000000, float 0x40773CD920000000, float 0x4075D1D700000000, float 0x40747CFE00000000, float 0x40733CF1A0000000, float 0x4072106A80000000, float 0x4070F63D80000000, float 0x406FDA8F60000000, float 0x406DE8F5C0000000, float 0x406C15BA60000000, float 0x406A5F0200000000, float 0x4068C31260000000, float 0x4067404180000000, float 0x4065D50E60000000, float 1.640000e+02, float 0x40633FC6A0000000, float 0x4062131260000000, float 0x4060F8BC60000000, float 0x405FDF3B60000000, float 0x405DED4FE0000000, float 0x405C19DB20000000, float 0x405A62E140000000, float 0x4058C6B1C0000000, float 0x405743A920000000, float 0x4055D83E40000000, float 0x4054830060000000, float 0x40534295E0000000, float 0x405215B8C0000000, float 0x4050FB3680000000, float 0x404FE3E420000000, float 0x404DF1BA60000000, float 0x404C1DF700000000, float 0x404A66BEE0000000, float 0x4048CA5460000000, float 0x4047471420000000, float 0x4045DB7180000000, float 0x4044860420000000, float 0x4043456A20000000, float 0x4042185F00000000, float 0x4040FDB580000000, float 0x403FE89380000000, float 0x403DF61E40000000, float 0x403C221960000000, float 0x403A6A9FC0000000, float 0x4038CDF3C0000000, float 0x40374A7F00000000, float 0x4035DEA4A0000000, float 0x40348902E0000000, float 0x4033483E40000000, float 0x40321B08A0000000, float 0x4031003460000000, float 0x402FED42C0000000, float 0x402DFA8580000000, float 0x402C263200000000, float 0x402A6E7D60000000, float 0x4028D19CE0000000, float 0x40274DED20000000, float 0x4025E1D7E0000000, float 0x40248C0840000000, float 0x40234B11C0000000, float 0x40221DAF80000000, float 0x402102B180000000, float 0x401FF1EE20000000, float 0x401DFEEA20000000, float 0x401C2A57A0000000, float 0x401A725EE0000000, float 0x4018D53CE0000000, float 0x40175150E0000000, float 0x4015E511A0000000, float 0x40148F0D80000000, float 0x40134DE540000000, float 0x4012205680000000, float 0x4011053120000000, float 0x400FF69EC0000000, float 0x400E035160000000, float 0x400C2E7820000000, float 0x400A764060000000, float 0x4008D8E220000000, float 0x400754BF00000000, float 0x4005E848C0000000, float 0x4004921040000000, float 0x400350BB60000000, float 0x4002230020000000, float 0x400107AE20000000, float 0x3FFFFB4A20000000, float 0x3FFE07B360000000, float 0x3FFC32A060000000, float 0x3FFA7A2480000000, float 0x3FF8DC8760000000, float 0x3FF7582560000000, float 0x3FF5EB7AA0000000, float 0x3FF4951820000000, float 0x3FF3538F00000000, float 0x3FF225A460000000, float 0x3FF10A3300000000, float 1.000000e+00], align 16
@stereo_threshholds = internal unnamed_addr constant [9 x double] [double 0.000000e+00, double 5.000000e-01, double 1.000000e+00, double 1.500000e+00, double 2.500000e+00, double 4.500000e+00, double 8.500000e+00, double 1.650000e+01, double 9.000000e+10], align 16
@vwin = internal unnamed_addr constant [8 x ptr] [ptr @vwin64, ptr @vwin128, ptr @vwin256, ptr @vwin512, ptr @vwin1024, ptr @vwin2048, ptr @vwin4096, ptr @vwin8192], align 16
@COS_LOOKUP = internal unnamed_addr constant [129 x float] [float 1.000000e+00, float 0x3FEFFD8860000000, float 0x3FEFF621E0000000, float 0x3FEFE9CDA0000000, float 0x3FEFD88DA0000000, float 0x3FEFC26480000000, float 0x3FEFA75580000000, float 0x3FEF876500000000, float 0x3FEF6297C0000000, float 0x3FEF38F3A0000000, float 0x3FEF0A7F00000000, float 0x3FEED740E0000000, float 0x3FEE9F4160000000, float 0x3FEE6288E0000000, float 0x3FEE212100000000, float 0x3FEDDB13C0000000, float 0x3FED906BC0000000, float 0x3FED4134E0000000, float 0x3FECED7B00000000, float 0x3FEC954B20000000, float 0x3FEC38B300000000, float 0x3FEBD7C0A0000000, float 0x3FEB728340000000, float 0x3FEB090A60000000, float 0x3FEA9B6620000000, float 0x3FEA29A7A0000000, float 0x3FE9B3E040000000, float 0x3FE93A2240000000, float 0x3FE8BC8060000000, float 0x3FE83B0E00000000, float 0x3FE7B5DF20000000, float 0x3FE72D0840000000, float 0x3FE6A09E60000000, float 0x3FE610B760000000, float 0x3FE57D6940000000, float 0x3FE4E6CAC0000000, float 0x3FE44CF320000000, float 0x3FE3AFFA20000000, float 0x3FE30FF800000000, float 0x3FE26D0540000000, float 0x3FE1C73B40000000, float 0x3FE11EB360000000, float 0x3FE07387A0000000, float 0x3FDF8BA4E0000000, float 0x3FDE2B5D40000000, float 0x3FDCC66EA0000000, float 0x3FDB5D1000000000, float 0x3FD9EF7940000000, float 0x3FD87DE2A0000000, float 0x3FD7088540000000, float 0x3FD58F9A80000000, float 0x3FD4135CA0000000, float 0x3FD2940620000000, float 0x3FD111D260000000, float 0x3FCF19F980000000, float 0x3FCC0B8260000000, float 0x3FC8F8B840000000, float 0x3FC5E21440000000, float 0x3FC2C81060000000, float 0x3FBF564E60000000, float 0x3FB917A6C0000000, float 0x3FB2D520A0000000, float 0x3FA91F6600000000, float 0x3F99215600000000, float 0.000000e+00, float 0xBF99215600000000, float 0xBFA91F6600000000, float 0xBFB2D520A0000000, float 0xBFB917A6C0000000, float 0xBFBF564E60000000, float 0xBFC2C81060000000, float 0xBFC5E21440000000, float 0xBFC8F8B840000000, float 0xBFCC0B8260000000, float 0xBFCF19F980000000, float 0xBFD111D260000000, float 0xBFD2940620000000, float 0xBFD4135CA0000000, float 0xBFD58F9A80000000, float 0xBFD7088540000000, float 0xBFD87DE2A0000000, float 0xBFD9EF7940000000, float 0xBFDB5D1000000000, float 0xBFDCC66EA0000000, float 0xBFDE2B5D40000000, float 0xBFDF8BA4E0000000, float 0xBFE07387A0000000, float 0xBFE11EB360000000, float 0xBFE1C73B40000000, float 0xBFE26D0540000000, float 0xBFE30FF800000000, float 0xBFE3AFFA20000000, float 0xBFE44CF320000000, float 0xBFE4E6CAC0000000, float 0xBFE57D6940000000, float 0xBFE610B760000000, float 0xBFE6A09E60000000, float 0xBFE72D0840000000, float 0xBFE7B5DF20000000, float 0xBFE83B0E00000000, float 0xBFE8BC8060000000, float 0xBFE93A2240000000, float 0xBFE9B3E040000000, float 0xBFEA29A7A0000000, float 0xBFEA9B6620000000, float 0xBFEB090A60000000, float 0xBFEB728340000000, float 0xBFEBD7C0A0000000, float 0xBFEC38B300000000, float 0xBFEC954B20000000, float 0xBFECED7B00000000, float 0xBFED4134E0000000, float 0xBFED906BC0000000, float 0xBFEDDB13C0000000, float 0xBFEE212100000000, float 0xBFEE6288E0000000, float 0xBFEE9F4160000000, float 0xBFEED740E0000000, float 0xBFEF0A7F00000000, float 0xBFEF38F3A0000000, float 0xBFEF6297C0000000, float 0xBFEF876500000000, float 0xBFEFA75580000000, float 0xBFEFC26480000000, float 0xBFEFD88DA0000000, float 0xBFEFE9CDA0000000, float 0xBFEFF621E0000000, float 0xBFEFFD8860000000, float -1.000000e+00], align 16
@INVSQ_LOOKUP = internal unnamed_addr constant [33 x float] [float 0x3FF6A09E60000000, float 0x3FF6482D40000000, float 0x3FF5F3AA60000000, float 0x3FF5A2CD80000000, float 0x3FF5555560000000, float 0x3FF50B06A0000000, float 0x3FF4C3ABE0000000, float 0x3FF47F1440000000, float 0x3FF43D1360000000, float 0x3FF3FD8080000000, float 0x3FF3C03660000000, float 0x3FF38512C0000000, float 0x3FF34BF640000000, float 0x3FF314C3E0000000, float 0x3FF2DF60C0000000, float 0x3FF2ABB440000000, float 0x3FF279A740000000, float 0x3FF24924A0000000, float 0x3FF21A1860000000, float 0x3FF1EC7020000000, float 0x3FF1C01AA0000000, float 0x3FF19507E0000000, float 0x3FF16B2900000000, float 0x3FF1426FA0000000, float 0x3FF11ACEE0000000, float 0x3FF0F43A40000000, float 0x3FF0CEA640000000, float 0x3FF0AA07C0000000, float 0x3FF08654A0000000, float 0x3FF0638340000000, float 0x3FF0418A40000000, float 0x3FF0206140000000, float 1.000000e+00], align 16
@INVSQ2EXP_LOOKUP = internal unnamed_addr constant [65 x float] [float 6.553600e+04, float 0x40E6A09E60000000, float 3.276800e+04, float 0x40D6A09E60000000, float 1.638400e+04, float 0x40C6A09E60000000, float 8.192000e+03, float 0x40B6A09E60000000, float 4.096000e+03, float 0x40A6A09E60000000, float 2.048000e+03, float 0x4096A09E60000000, float 1.024000e+03, float 0x4086A09E60000000, float 5.120000e+02, float 0x4076A09E60000000, float 2.560000e+02, float 0x4066A09E60000000, float 1.280000e+02, float 0x4056A09E60000000, float 6.400000e+01, float 0x4046A09E60000000, float 3.200000e+01, float 0x4036A09E60000000, float 1.600000e+01, float 0x4026A09E60000000, float 8.000000e+00, float 0x4016A09E60000000, float 4.000000e+00, float 0x4006A09E60000000, float 2.000000e+00, float 0x3FF6A09E60000000, float 1.000000e+00, float 0x3FE6A09E60000000, float 5.000000e-01, float 0x3FD6A09E60000000, float 2.500000e-01, float 0x3FC6A09E60000000, float 1.250000e-01, float 0x3FB6A09E60000000, float 6.250000e-02, float 0x3FA6A09E60000000, float 3.125000e-02, float 0x3F96A09E60000000, float 1.562500e-02, float 0x3F86A09E60000000, float 7.812500e-03, float 0x3F76A09E60000000, float 3.906250e-03, float 0x3F66A09E60000000, float 0x3F60000000000000, float 0x3F56A09E60000000, float 0x3F50000000000000, float 0x3F46A09E60000000, float 0x3F40000000000000, float 0x3F36A09E60000000, float 0x3F30000000000000, float 0x3F26A09E60000000, float 0x3F20000000000000, float 0x3F16A09E60000000, float 0x3F10000000000000, float 0x3F06A09E60000000, float 0x3F00000000000000, float 0x3EF6A09E60000000, float 0x3EF0000000000000], align 16
@FROMdB_LOOKUP = internal unnamed_addr constant [35 x float] [float 1.000000e+00, float 0x3FE430CD80000000, float 0x3FD97A9680000000, float 0x3FD0137980000000, float 0x3FC44960C0000000, float 0x3FB99999A0000000, float 0x3FB0270AC0000000, float 0x3FA4621200000000, float 0x3F99B8C280000000, float 0x3F903AB3E0000000, float 0x3F847AE140000000, float 0x3F79D81140000000, float 0x3F704E74C0000000, float 0x3F6493CEC0000000, float 0x3F59F78620000000, float 0x3F50624DE0000000, float 0x3F44ACDAA0000000, float 0x3F3A172140000000, float 0x3F30763F00000000, float 0x3F24C604E0000000, float 0x3F1A36E2E0000000, float 0x3F108A4880000000, float 0x3F04DF4DE0000000, float 0x3EFA56CB40000000, float 0x3EF09E6A40000000, float 0x3EE4F8B580000000, float 0x3EDA76DA60000000, float 0x3ED0B2A4A0000000, float 0x3EC5123C20000000, float 0x3EBA971080000000, float 0x3EB0C6F7A0000000, float 0x3EA52BE1E0000000, float 0x3E9AB76DE0000000, float 0x3E90DB6360000000, float 0x3E8545A6C0000000], align 16
@FROMdB2_LOOKUP = internal unnamed_addr constant [32 x float] [float 0x3FEFC54400000000, float 0x3FEF510E80000000, float 0x3FEEDE8200000000, float 0x3FEE6D98A0000000, float 0x3FEDFE4C40000000, float 0x3FED9096E0000000, float 0x3FED2472E0000000, float 0x3FECB9DA60000000, float 0x3FEC50C7C0000000, float 0x3FEBE93580000000, float 0x3FEB831E20000000, float 0x3FEB1E7C20000000, float 0x3FEABB4A40000000, float 0x3FEA598320000000, float 0x3FE9F921C0000000, float 0x3FE99A20E0000000, float 0x3FE93C7B80000000, float 0x3FE8E02CA0000000, float 0x3FE8852F60000000, float 0x3FE82B7F00000000, float 0x3FE7D316A0000000, float 0x3FE77BF1C0000000, float 0x3FE7260B80000000, float 0x3FE6D15F80000000, float 0x3FE67DE940000000, float 0x3FE62BA420000000, float 0x3FE5DA8C20000000, float 0x3FE58A9CA0000000, float 0x3FE53BD180000000, float 0x3FE4EE26A0000000, float 0x3FE4A197E0000000, float 0x3FE4562120000000], align 16
@floor1_encode.seq = internal unnamed_addr global i64 0, align 8
@mask = internal unnamed_addr constant [33 x i64] [i64 0, i64 1, i64 3, i64 7, i64 15, i64 31, i64 63, i64 127, i64 255, i64 511, i64 1023, i64 2047, i64 4095, i64 8191, i64 16383, i64 32767, i64 65535, i64 131071, i64 262143, i64 524287, i64 1048575, i64 2097151, i64 4194303, i64 8388607, i64 16777215, i64 33554431, i64 67108863, i64 134217727, i64 268435455, i64 536870911, i64 1073741823, i64 2147483647, i64 4294967295], align 16
@crc_lookup = internal unnamed_addr constant [256 x i32] [i32 0, i32 79764919, i32 159529838, i32 222504665, i32 319059676, i32 398814059, i32 445009330, i32 507990021, i32 638119352, i32 583659535, i32 797628118, i32 726387553, i32 890018660, i32 835552979, i32 1015980042, i32 944750013, i32 1276238704, i32 1221641927, i32 1167319070, i32 1095957929, i32 1595256236, i32 1540665371, i32 1452775106, i32 1381403509, i32 1780037320, i32 1859660671, i32 1671105958, i32 1733955601, i32 2031960084, i32 2111593891, i32 1889500026, i32 1952343757, i32 -1742489888, i32 -1662866601, i32 -1851683442, i32 -1788833735, i32 -1960329156, i32 -1880695413, i32 -2103051438, i32 -2040207643, i32 -1104454824, i32 -1159051537, i32 -1213636554, i32 -1284997759, i32 -1389417084, i32 -1444007885, i32 -1532160278, i32 -1603531939, i32 -734892656, i32 -789352409, i32 -575645954, i32 -646886583, i32 -952755380, i32 -1007220997, i32 -827056094, i32 -898286187, i32 -231047128, i32 -151282273, i32 -71779514, i32 -8804623, i32 -515967244, i32 -436212925, i32 -390279782, i32 -327299027, i32 881225847, i32 809987520, i32 1023691545, i32 969234094, i32 662832811, i32 591600412, i32 771767749, i32 717299826, i32 311336399, i32 374308984, i32 453813921, i32 533576470, i32 25881363, i32 88864420, i32 134795389, i32 214552010, i32 2023205639, i32 2086057648, i32 1897238633, i32 1976864222, i32 1804852699, i32 1867694188, i32 1645340341, i32 1724971778, i32 1587496639, i32 1516133128, i32 1461550545, i32 1406951526, i32 1302016099, i32 1230646740, i32 1142491917, i32 1087903418, i32 -1398421865, i32 -1469785312, i32 -1524105735, i32 -1578704818, i32 -1079922613, i32 -1151291908, i32 -1239184603, i32 -1293773166, i32 -1968362705, i32 -1905510760, i32 -2094067647, i32 -2014441994, i32 -1716953613, i32 -1654112188, i32 -1876203875, i32 -1796572374, i32 -525066777, i32 -462094256, i32 -382327159, i32 -302564546, i32 -206542021, i32 -143559028, i32 -97365931, i32 -17609246, i32 -960696225, i32 -1031934488, i32 -817968335, i32 -872425850, i32 -709327229, i32 -780559564, i32 -600130067, i32 -654598054, i32 1762451694, i32 1842216281, i32 1619975040, i32 1682949687, i32 2047383090, i32 2127137669, i32 1938468188, i32 2001449195, i32 1325665622, i32 1271206113, i32 1183200824, i32 1111960463, i32 1543535498, i32 1489069629, i32 1434599652, i32 1363369299, i32 622672798, i32 568075817, i32 748617968, i32 677256519, i32 907627842, i32 853037301, i32 1067152940, i32 995781531, i32 51762726, i32 131386257, i32 177728840, i32 240578815, i32 269590778, i32 349224269, i32 429104020, i32 491947555, i32 -248556018, i32 -168932423, i32 -122852000, i32 -60002089, i32 -500490030, i32 -420856475, i32 -341238852, i32 -278395381, i32 -685261898, i32 -739858943, i32 -559578920, i32 -630940305, i32 -1004286614, i32 -1058877219, i32 -845023740, i32 -916395085, i32 -1119974018, i32 -1174433591, i32 -1262701040, i32 -1333941337, i32 -1371866206, i32 -1426332139, i32 -1481064244, i32 -1552294533, i32 -1690935098, i32 -1611170447, i32 -1833673816, i32 -1770699233, i32 -2009983462, i32 -1930228819, i32 -2119160460, i32 -2056179517, i32 1569362073, i32 1498123566, i32 1409854455, i32 1355396672, i32 1317987909, i32 1246755826, i32 1192025387, i32 1137557660, i32 2072149281, i32 2135122070, i32 1912620623, i32 1992383480, i32 1753615357, i32 1816598090, i32 1627664531, i32 1707420964, i32 295390185, i32 358241886, i32 404320391, i32 483945776, i32 43990325, i32 106832002, i32 186451547, i32 266083308, i32 932423249, i32 861060070, i32 1041341759, i32 986742920, i32 613929101, i32 542559546, i32 756411363, i32 701822548, i32 -978770311, i32 -1050133554, i32 -869589737, i32 -924188512, i32 -693284699, i32 -764654318, i32 -550540341, i32 -605129092, i32 -475935807, i32 -413084042, i32 -366743377, i32 -287118056, i32 -257573603, i32 -194731862, i32 -114850189, i32 -35218492, i32 -1984365303, i32 -1921392450, i32 -2143631769, i32 -2063868976, i32 -1698919467, i32 -1635936670, i32 -1824608069, i32 -1744851700, i32 -1347415887, i32 -1418654458, i32 -1506661409, i32 -1561119128, i32 -1129027987, i32 -1200260134, i32 -1254728445, i32 -1309196108], align 16
@.str.140 = private unnamed_addr constant [7 x i8] c"(none)\00", align 1
@.str.141 = private unnamed_addr constant [64 x i8] c"WARNING: Ignoring illegal escape character '%c' in name format\0A\00", align 1
@.str.142 = private unnamed_addr constant [45 x i8] c"A:a:b:B:c:C:d:G:hl:m:M:n:N:o:P:q:QrR:s:t:vX:\00", align 1
@.str.143 = private unnamed_addr constant [36 x i8] c"Enabling bitrate management engine\0A\00", align 1
@.str.144 = private unnamed_addr constant [76 x i8] c"WARNING: Raw endianness specified for non-raw data. Assuming input is raw.\0A\00", align 1
@.str.145 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.146 = private unnamed_addr constant [49 x i8] c"WARNING: Couldn't read endianness argument \22%s\22\0A\00", align 1
@.str.147 = private unnamed_addr constant [50 x i8] c"WARNING: Couldn't read resampling frequency \22%s\22\0A\00", align 1
@.str.148 = private unnamed_addr constant [64 x i8] c"Warning: Resample rate specified as %d Hz. Did you mean %d Hz?\0A\00", align 1
@.str.149 = private unnamed_addr constant [3 x i8] c"%f\00", align 1
@.str.150 = private unnamed_addr constant [45 x i8] c"Warning: Couldn't parse scaling factor \22%s\22\0A\00", align 1
@.str.151 = private unnamed_addr constant [44 x i8] c"No value for advanced encoder option found\0A\00", align 1
@.str.152 = private unnamed_addr constant [45 x i8] c"Internal error parsing command line options\0A\00", align 1
@.str.153 = private unnamed_addr constant [49 x i8] c"Warning: Illegal comment used (\22%s\22), ignoring.\0A\00", align 1
@.str.154 = private unnamed_addr constant [3 x i8] c"%u\00", align 1
@.str.155 = private unnamed_addr constant [46 x i8] c"Warning: nominal bitrate \22%s\22 not recognised\0A\00", align 1
@.str.156 = private unnamed_addr constant [46 x i8] c"Warning: minimum bitrate \22%s\22 not recognised\0A\00", align 1
@.str.157 = private unnamed_addr constant [46 x i8] c"Warning: maximum bitrate \22%s\22 not recognised\0A\00", align 1
@.str.158 = private unnamed_addr constant [46 x i8] c"Quality option \22%s\22 not recognised, ignoring\0A\00", align 1
@.str.159 = private unnamed_addr constant [64 x i8] c"WARNING: quality setting too high, setting to maximum quality.\0A\00", align 1
@.str.160 = private unnamed_addr constant [55 x i8] c"WARNING: Multiple name formats specified, using final\0A\00", align 1
@.str.161 = private unnamed_addr constant [62 x i8] c"WARNING: Multiple name format filters specified, using final\0A\00", align 1
@.str.162 = private unnamed_addr constant [74 x i8] c"WARNING: Multiple name format filter replacements specified, using final\0A\00", align 1
@.str.163 = private unnamed_addr constant [60 x i8] c"WARNING: Multiple output files specified, suggest using -n\0A\00", align 1
@.str.164 = private unnamed_addr constant [77 x i8] c"WARNING: Raw bits/sample specified for non-raw data. Assuming input is raw.\0A\00", align 1
@.str.165 = private unnamed_addr constant [54 x i8] c"WARNING: Invalid bits/sample specified, assuming 16.\0A\00", align 1
@.str.166 = private unnamed_addr constant [79 x i8] c"WARNING: Raw channel count specified for non-raw data. Assuming input is raw.\0A\00", align 1
@.str.167 = private unnamed_addr constant [55 x i8] c"WARNING: Invalid channel count specified, assuming 2.\0A\00", align 1
@.str.168 = private unnamed_addr constant [77 x i8] c"WARNING: Raw sample rate specified for non-raw data. Assuming input is raw.\0A\00", align 1
@.str.169 = private unnamed_addr constant [57 x i8] c"WARNING: Invalid sample rate specified, assuming 44100.\0A\00", align 1
@.str.170 = private unnamed_addr constant [47 x i8] c"WARNING: Unknown option specified, ignoring->\0A\00", align 1
@.str.171 = private unnamed_addr constant [4612 x i8] c"%s%s\0AUsage: oggenc [options] input.wav [...]\0A\0AOPTIONS:\0A General:\0A -Q, --quiet          Produce no output to stderr\0A -h, --help           Print this help text\0A -r, --raw            Raw mode. Input files are read directly as PCM data\0A -B, --raw-bits=n     Set bits/sample for raw input. Default is 16\0A -C, --raw-chan=n     Set number of channels for raw input. Default is 2\0A -R, --raw-rate=n     Set samples/sec for raw input. Default is 44100\0A --raw-endianness     1 for bigendian, 0 for little (defaults to 0)\0A -b, --bitrate        Choose a nominal bitrate to encode at. Attempt\0A                      to encode at a bitrate averaging this. Takes an\0A                      argument in kbps. This uses the bitrate management\0A                      engine, and is not recommended for most users.\0A                      See -q, --quality for a better alternative.\0A -m, --min-bitrate    Specify a minimum bitrate (in kbps). Useful for\0A                      encoding for a fixed-size channel.\0A -M, --max-bitrate    Specify a maximum bitrate in kbps. Useful for\0A                      streaming applications.\0A -q, --quality        Specify quality between 0 (low) and 10 (high),\0A                      instead of specifying a particular bitrate.\0A                      This is the normal mode of operation.\0A                      Fractional qualities (e.g. 2.75) are permitted\0A                      Quality -1 is also possible, but may not be of\0A                      acceptable quality.\0A --resample n         Resample input data to sampling rate n (Hz)\0A --downmix            Downmix stereo to mono. Only allowed on stereo\0A                      input.\0A -s, --serial         Specify a serial number for the stream. If encoding\0A                      multiple files, this will be incremented for each\0A                      stream after the first.\0A --discard-comments   Prevents comments in FLAC and Ogg FLAC files from\0A                      being copied to the output Ogg Vorbis file.\0A\0A Naming:\0A -o, --output=fn      Write file to fn (only valid in single-file mode)\0A -n, --names=string   Produce filenames as this string, with %%a, %%t, %%l,\0A                      %%n, %%d replaced by artist, title, album, track number,\0A                      and date, respectively (see below for specifying these).\0A                      %%%% gives a literal %%.\0A -X, --name-remove=s  Remove the specified characters from parameters to the\0A                      -n format string. Useful to ensure legal filenames.\0A -P, --name-replace=s Replace characters removed by --name-remove with the\0A                      characters specified. If this string is shorter than the\0A                      --name-remove list or is not specified, the extra\0A                      characters are just removed.\0A                      Default settings for the above two arguments are platform\0A                      specific.\0A -c, --comment=c      Add the given string as an extra comment. This may be\0A                      used multiple times. The argument should be in the\0A                      format \22tag=value\22.\0A -d, --date           Date for track (usually date of performance)\0A -N, --tracknum       Track number for this track\0A -t, --title          Title for this track\0A -l, --album          Name of album\0A -a, --artist         Name of artist\0A -G, --genre          Genre of track\0A                      If multiple input files are given, then multiple\0A                      instances of the previous five arguments will be used,\0A                      in the order they are given. If fewer titles are\0A                      specified than files, OggEnc will print a warning, and\0A                      reuse the final one for the remaining files. If fewer\0A                      track numbers are given, the remaining files will be\0A                      unnumbered. For the others, the final tag will be reused\0A                      for all others without warning (so you can specify a date\0A                      once, for example, and have it used for all the files)\0A\0AINPUT FILES:\0A OggEnc input files must currently be 24, 16, or 8 bit PCM WAV, AIFF, or AIFF/C\0A files, 32 bit IEEE floating point WAV, and optionally FLAC or Ogg FLAC. Files\0A  may be mono or stereo (or more channels) and any sample rate.\0A Alternatively, the --raw option may be used to use a raw PCM data file, which\0A must be 16 bit stereo little-endian PCM ('headerless wav'), unless additional\0A parameters for raw mode are specified.\0A You can specify taking the file from stdin by using - as the input filename.\0A In this mode, output is to stdout unless an output filename is specified\0A with -o\0A\0A\00", align 1
@.str.172 = private unnamed_addr constant [68 x i8] c"WARNING: Insufficient titles specified, defaulting to final title.\0A\00", align 1
@.str.173 = private unnamed_addr constant [12 x i8] c"tracknumber\00", align 1
@.str.174 = private unnamed_addr constant [39 x i8] c"Warning: Unexpected EOF in AIFF chunk\0A\00", align 1
@.str.175 = private unnamed_addr constant [40 x i8] c"Skipping chunk of type \22%s\22, length %d\0A\00", align 1
@.str.176 = private unnamed_addr constant [88 x i8] c"BUG: Got zero samples from resampler: your file will be truncated. Please report this.\0A\00", align 1
@.str.177 = private unnamed_addr constant [44 x i8] c"Setting advanced encoder option \22%s\22 to %s\0A\00", align 1
@.str.178 = private unnamed_addr constant [23 x i8] c"bitrate_average_window\00", align 1
@.str.179 = private unnamed_addr constant [4 x i8] c"%lf\00", align 1
@.str.180 = private unnamed_addr constant [49 x i8] c"For option %s, couldn't read value %s as double\0A\00", align 1
@.str.181 = private unnamed_addr constant [30 x i8] c"bitrate_average_window_center\00", align 1
@.str.182 = private unnamed_addr constant [20 x i8] c"bitrate_average_low\00", align 1
@.str.183 = private unnamed_addr constant [4 x i8] c"%ld\00", align 1
@.str.184 = private unnamed_addr constant [50 x i8] c"For option %s, couldn't read value %s as integer\0A\00", align 1
@.str.185 = private unnamed_addr constant [21 x i8] c"bitrate_average_high\00", align 1
@.str.186 = private unnamed_addr constant [17 x i8] c"bitrate_hard_min\00", align 1
@.str.187 = private unnamed_addr constant [17 x i8] c"bitrate_hard_max\00", align 1
@.str.188 = private unnamed_addr constant [20 x i8] c"bitrate_hard_window\00", align 1
@.str.189 = private unnamed_addr constant [18 x i8] c"impulse_noisetune\00", align 1
@.str.190 = private unnamed_addr constant [18 x i8] c"lowpass_frequency\00", align 1
@.str.191 = private unnamed_addr constant [49 x i8] c"Changed lowpass frequency from %f kHz to %f kHz\0A\00", align 1
@.str.192 = private unnamed_addr constant [35 x i8] c"Unrecognised advanced option \22%s\22\0A\00", align 1
@.str.193 = private unnamed_addr constant [27 x i8] c"(min %d kbps, max %d kbps)\00", align 1
@.str.194 = private unnamed_addr constant [22 x i8] c"(min %d kbps, no max)\00", align 1
@.str.195 = private unnamed_addr constant [22 x i8] c"(no min, max %d kbps)\00", align 1
@.str.196 = private unnamed_addr constant [16 x i8] c"(no min or max)\00", align 1
@.str.197 = private unnamed_addr constant [16 x i8] c"POSIXLY_CORRECT\00", align 1
@_vp_tonemask_adj_otherblock = internal global <{ %struct.vp_adjblock, %struct.vp_adjblock, { <{ [9 x i32], [8 x i32] }> }, { <{ [9 x i32], [8 x i32] }> }, { <{ [9 x i32], [8 x i32] }> }, { <{ [9 x i32], [8 x i32] }> }, { <{ [9 x i32], [8 x i32] }> }, { <{ [9 x i32], [8 x i32] }> }, { <{ [9 x i32], [8 x i32] }> }, { <{ [9 x i32], [8 x i32] }> }, { <{ [9 x i32], [8 x i32] }> } }> <{ %struct.vp_adjblock { [17 x i32] [i32 -20, i32 -20, i32 -20, i32 -20, i32 -14, i32 -12, i32 -10, i32 -8, i32 -4, i32 0, i32 0, i32 10, i32 0, i32 0, i32 0, i32 0, i32 0] }, %struct.vp_adjblock { [17 x i32] [i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -18, i32 -16, i32 -14, i32 -10, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0] }, { <{ [9 x i32], [8 x i32] }> } { <{ [9 x i32], [8 x i32] }> <{ [9 x i32] [i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -18, i32 -16, i32 -14, i32 -10], [8 x i32] zeroinitializer }> }, { <{ [9 x i32], [8 x i32] }> } { <{ [9 x i32], [8 x i32] }> <{ [9 x i32] [i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -18, i32 -16, i32 -14, i32 -10], [8 x i32] zeroinitializer }> }, { <{ [9 x i32], [8 x i32] }> } { <{ [9 x i32], [8 x i32] }> <{ [9 x i32] [i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -18, i32 -16, i32 -14, i32 -10], [8 x i32] zeroinitializer }> }, { <{ [9 x i32], [8 x i32] }> } { <{ [9 x i32], [8 x i32] }> <{ [9 x i32] [i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -18, i32 -16, i32 -14, i32 -10], [8 x i32] zeroinitializer }> }, { <{ [9 x i32], [8 x i32] }> } { <{ [9 x i32], [8 x i32] }> <{ [9 x i32] [i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -18, i32 -16, i32 -14, i32 -10], [8 x i32] zeroinitializer }> }, { <{ [9 x i32], [8 x i32] }> } { <{ [9 x i32], [8 x i32] }> <{ [9 x i32] [i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -18, i32 -16, i32 -14, i32 -10], [8 x i32] zeroinitializer }> }, { <{ [9 x i32], [8 x i32] }> } { <{ [9 x i32], [8 x i32] }> <{ [9 x i32] [i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -18, i32 -16, i32 -14, i32 -10], [8 x i32] zeroinitializer }> }, { <{ [9 x i32], [8 x i32] }> } { <{ [9 x i32], [8 x i32] }> <{ [9 x i32] [i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -18, i32 -16, i32 -14, i32 -10], [8 x i32] zeroinitializer }> }, { <{ [9 x i32], [8 x i32] }> } { <{ [9 x i32], [8 x i32] }> <{ [9 x i32] [i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -18, i32 -16, i32 -14, i32 -10], [8 x i32] zeroinitializer }> } }>, align 16
@_vp_tonemask_adj_longblock = internal global <{ %struct.vp_adjblock, %struct.vp_adjblock, { <{ [8 x i32], [9 x i32] }> }, { <{ [8 x i32], [9 x i32] }> }, { <{ [8 x i32], [9 x i32] }> }, { <{ [8 x i32], [9 x i32] }> }, { <{ [8 x i32], [9 x i32] }> }, { <{ [8 x i32], [9 x i32] }> }, { <{ [8 x i32], [9 x i32] }> }, { <{ [8 x i32], [9 x i32] }> }, { <{ [8 x i32], [9 x i32] }> } }> <{ %struct.vp_adjblock { [17 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -10, i32 -8, i32 -4, i32 -2, i32 0, i32 0, i32 0, i32 10, i32 0, i32 0, i32 0, i32 0, i32 0] }, %struct.vp_adjblock { [17 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -12, i32 -10, i32 -8, i32 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0] }, { <{ [8 x i32], [9 x i32] }> } { <{ [8 x i32], [9 x i32] }> <{ [8 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -12, i32 -10, i32 -8], [9 x i32] zeroinitializer }> }, { <{ [8 x i32], [9 x i32] }> } { <{ [8 x i32], [9 x i32] }> <{ [8 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -12, i32 -10, i32 -8], [9 x i32] zeroinitializer }> }, { <{ [8 x i32], [9 x i32] }> } { <{ [8 x i32], [9 x i32] }> <{ [8 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -12, i32 -10, i32 -8], [9 x i32] zeroinitializer }> }, { <{ [8 x i32], [9 x i32] }> } { <{ [8 x i32], [9 x i32] }> <{ [8 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -12, i32 -10, i32 -8], [9 x i32] zeroinitializer }> }, { <{ [8 x i32], [9 x i32] }> } { <{ [8 x i32], [9 x i32] }> <{ [8 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -12, i32 -10, i32 -8], [9 x i32] zeroinitializer }> }, { <{ [8 x i32], [9 x i32] }> } { <{ [8 x i32], [9 x i32] }> <{ [8 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -12, i32 -10, i32 -8], [9 x i32] zeroinitializer }> }, { <{ [8 x i32], [9 x i32] }> } { <{ [8 x i32], [9 x i32] }> <{ [8 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -12, i32 -10, i32 -8], [9 x i32] zeroinitializer }> }, { <{ [8 x i32], [9 x i32] }> } { <{ [8 x i32], [9 x i32] }> <{ [8 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -12, i32 -10, i32 -8], [9 x i32] zeroinitializer }> }, { <{ [8 x i32], [9 x i32] }> } { <{ [8 x i32], [9 x i32] }> <{ [8 x i32] [i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -12, i32 -10, i32 -8], [9 x i32] zeroinitializer }> } }>, align 16
@_psy_global_44 = internal global [5 x { i32, [7 x float], [7 x float], float, float, float, <{ i32, [14 x i32] }>, [2 x <{ i32, [14 x i32] }>], [15 x i32], [15 x i32], [2 x [15 x i32]] }] [{ i32, [7 x float], [7 x float], float, float, float, <{ i32, [14 x i32] }>, [2 x <{ i32, [14 x i32] }>], [15 x i32], [15 x i32], [2 x [15 x i32]] } { i32 8, [7 x float] [float 2.000000e+01, float 1.400000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01], [7 x float] [float -6.000000e+01, float -3.000000e+01, float -4.000000e+01, float -4.000000e+01, float -4.000000e+01, float -4.000000e+01, float -4.000000e+01], float 2.000000e+00, float -7.500000e+01, float -6.000000e+00, <{ i32, [14 x i32] }> <{ i32 99, [14 x i32] zeroinitializer }>, [2 x <{ i32, [14 x i32] }>] [<{ i32, [14 x i32] }> <{ i32 99, [14 x i32] zeroinitializer }>, <{ i32, [14 x i32] }> <{ i32 99, [14 x i32] zeroinitializer }>], [15 x i32] zeroinitializer, [15 x i32] zeroinitializer, [2 x [15 x i32]] zeroinitializer }, { i32, [7 x float], [7 x float], float, float, float, <{ i32, [14 x i32] }>, [2 x <{ i32, [14 x i32] }>], [15 x i32], [15 x i32], [2 x [15 x i32]] } { i32 8, [7 x float] [float 1.400000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01], [7 x float] [float -4.000000e+01, float -3.000000e+01, float -2.500000e+01, float -2.500000e+01, float -2.500000e+01, float -2.500000e+01, float -2.500000e+01], float 2.000000e+00, float -8.000000e+01, float -6.000000e+00, <{ i32, [14 x i32] }> <{ i32 99, [14 x i32] zeroinitializer }>, [2 x <{ i32, [14 x i32] }>] [<{ i32, [14 x i32] }> <{ i32 99, [14 x i32] zeroinitializer }>, <{ i32, [14 x i32] }> <{ i32 99, [14 x i32] zeroinitializer }>], [15 x i32] zeroinitializer, [15 x i32] zeroinitializer, [2 x [15 x i32]] zeroinitializer }, { i32, [7 x float], [7 x float], float, float, float, <{ i32, [14 x i32] }>, [2 x <{ i32, [14 x i32] }>], [15 x i32], [15 x i32], [2 x [15 x i32]] } { i32 8, [7 x float] [float 1.200000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01], [7 x float] [float -2.000000e+01, float -2.000000e+01, float -1.500000e+01, float -1.500000e+01, float -1.500000e+01, float -1.500000e+01, float -1.500000e+01], float 0.000000e+00, float -8.000000e+01, float -6.000000e+00, <{ i32, [14 x i32] }> <{ i32 99, [14 x i32] zeroinitializer }>, [2 x <{ i32, [14 x i32] }>] [<{ i32, [14 x i32] }> <{ i32 99, [14 x i32] zeroinitializer }>, <{ i32, [14 x i32] }> <{ i32 99, [14 x i32] zeroinitializer }>], [15 x i32] zeroinitializer, [15 x i32] zeroinitializer, [2 x [15 x i32]] zeroinitializer }, { i32, [7 x float], [7 x float], float, float, float, <{ i32, [14 x i32] }>, [2 x <{ i32, [14 x i32] }>], [15 x i32], [15 x i32], [2 x [15 x i32]] } { i32 8, [7 x float] [float 1.000000e+01, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00], [7 x float] [float -2.000000e+01, float -1.500000e+01, float -1.200000e+01, float -1.200000e+01, float -1.200000e+01, float -1.200000e+01, float -1.200000e+01], float 0.000000e+00, float -8.000000e+01, float -6.000000e+00, <{ i32, [14 x i32] }> <{ i32 99, [14 x i32] zeroinitializer }>, [2 x <{ i32, [14 x i32] }>] [<{ i32, [14 x i32] }> <{ i32 99, [14 x i32] zeroinitializer }>, <{ i32, [14 x i32] }> <{ i32 99, [14 x i32] zeroinitializer }>], [15 x i32] zeroinitializer, [15 x i32] zeroinitializer, [2 x [15 x i32]] zeroinitializer }, { i32, [7 x float], [7 x float], float, float, float, <{ i32, [14 x i32] }>, [2 x <{ i32, [14 x i32] }>], [15 x i32], [15 x i32], [2 x [15 x i32]] } { i32 8, [7 x float] [float 1.000000e+01, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00], [7 x float] [float -1.500000e+01, float -1.500000e+01, float -1.200000e+01, float -1.200000e+01, float -1.200000e+01, float -1.200000e+01, float -1.200000e+01], float 0.000000e+00, float -8.500000e+01, float -6.000000e+00, <{ i32, [14 x i32] }> <{ i32 99, [14 x i32] zeroinitializer }>, [2 x <{ i32, [14 x i32] }>] [<{ i32, [14 x i32] }> <{ i32 99, [14 x i32] zeroinitializer }>, <{ i32, [14 x i32] }> <{ i32 99, [14 x i32] zeroinitializer }>], [15 x i32] zeroinitializer, [15 x i32] zeroinitializer, [2 x [15 x i32]] zeroinitializer }], align 16
@_psy_stereo_modes_44 = internal global <{ %struct.adj_stereo, %struct.adj_stereo, %struct.adj_stereo, %struct.adj_stereo, { <{ i32, i32, i32, i32, i32, i32, [9 x i32] }>, [15 x i32], [15 x float], [15 x float] }, { <{ i32, i32, i32, i32, i32, [10 x i32] }>, [15 x i32], [15 x float], [15 x float] }, { [15 x i32], <{ i32, i32, i32, i32, i32, i32, [9 x i32] }>, [15 x float], [15 x float] }, { [15 x i32], <{ i32, i32, i32, i32, i32, [10 x i32] }>, [15 x float], [15 x float] }, { [15 x i32], <{ i32, i32, i32, i32, [11 x i32] }>, [15 x float], [15 x float] }, %struct.adj_stereo, %struct.adj_stereo }> <{ %struct.adj_stereo { [15 x i32] [i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 3, i32 2, i32 2, i32 1, i32 0, i32 0, i32 0, i32 0], [15 x i32] [i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 5, i32 4, i32 3], [15 x float] [float 1.000000e+00, float 2.000000e+00, float 3.000000e+00, float 4.000000e+00, float 5.000000e+00, float 5.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 7.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00], [15 x float] [float 1.200000e+01, float 1.250000e+01, float 1.300000e+01, float 1.350000e+01, float 1.400000e+01, float 1.450000e+01, float 1.500000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01] }, %struct.adj_stereo { [15 x i32] [i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 2, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0], [15 x i32] [i32 8, i32 8, i32 8, i32 8, i32 6, i32 6, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 4, i32 3], [15 x float] [float 1.000000e+00, float 2.000000e+00, float 3.000000e+00, float 4.000000e+00, float 4.000000e+00, float 5.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00], [15 x float] [float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01] }, %struct.adj_stereo { [15 x i32] [i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 2, i32 2, i32 2, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0], [15 x i32] [i32 8, i32 8, i32 8, i32 6, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 4, i32 3, i32 2, i32 1], [15 x float] [float 3.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 5.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00], [15 x float] [float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01] }, %struct.adj_stereo { [15 x i32] [i32 2, i32 2, i32 2, i32 2, i32 2, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], [15 x i32] [i32 5, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 3, i32 2, i32 1], [15 x float] [float 4.000000e+00, float 4.000000e+00, float 5.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 8.000000e+00, float 8.000000e+00, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01], [15 x float] [float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01] }, { <{ i32, i32, i32, i32, i32, i32, [9 x i32] }>, [15 x i32], [15 x float], [15 x float] } { <{ i32, i32, i32, i32, i32, i32, [9 x i32] }> <{ i32 2, i32 2, i32 2, i32 1, i32 1, i32 1, [9 x i32] zeroinitializer }>, [15 x i32] [i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 3, i32 3, i32 2, i32 1, i32 0], [15 x float] [float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01], [15 x float] [float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01] }, { <{ i32, i32, i32, i32, i32, [10 x i32] }>, [15 x i32], [15 x float], [15 x float] } { <{ i32, i32, i32, i32, i32, [10 x i32] }> <{ i32 2, i32 2, i32 2, i32 1, i32 1, [10 x i32] zeroinitializer }>, [15 x i32] [i32 3, i32 3, i32 3, i32 3, i32 3, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 0, i32 0, i32 0, i32 0], [15 x float] [float 6.000000e+00, float 6.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01], [15 x float] [float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01] }, { [15 x i32], <{ i32, i32, i32, i32, i32, i32, [9 x i32] }>, [15 x float], [15 x float] } { [15 x i32] zeroinitializer, <{ i32, i32, i32, i32, i32, i32, [9 x i32] }> <{ i32 3, i32 3, i32 3, i32 2, i32 2, i32 2, [9 x i32] zeroinitializer }>, [15 x float] [float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01], [15 x float] [float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01] }, { [15 x i32], <{ i32, i32, i32, i32, i32, [10 x i32] }>, [15 x float], [15 x float] } { [15 x i32] zeroinitializer, <{ i32, i32, i32, i32, i32, [10 x i32] }> <{ i32 3, i32 3, i32 3, i32 2, i32 2, [10 x i32] zeroinitializer }>, [15 x float] [float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01], [15 x float] [float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01] }, { [15 x i32], <{ i32, i32, i32, i32, [11 x i32] }>, [15 x float], [15 x float] } { [15 x i32] zeroinitializer, <{ i32, i32, i32, i32, [11 x i32] }> <{ i32 2, i32 2, i32 2, i32 2, [11 x i32] zeroinitializer }>, [15 x float] [float 8.000000e+00, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01], [15 x float] [float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01] }, %struct.adj_stereo { [15 x i32] zeroinitializer, [15 x i32] zeroinitializer, [15 x float] [float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00], [15 x float] [float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01] }, %struct.adj_stereo { [15 x i32] zeroinitializer, [15 x i32] zeroinitializer, [15 x float] [float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00], [15 x float] [float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01, float 9.900000e+01] } }>, align 16
@_floor_128x4_books = internal global [5 x ptr] [ptr @_huff_book_line_128x4_class0, ptr @_huff_book_line_128x4_0sub0, ptr @_huff_book_line_128x4_0sub1, ptr @_huff_book_line_128x4_0sub2, ptr @_huff_book_line_128x4_0sub3], align 16
@_floor_256x4_books = internal global [5 x ptr] [ptr @_huff_book_line_256x4_class0, ptr @_huff_book_line_256x4_0sub0, ptr @_huff_book_line_256x4_0sub1, ptr @_huff_book_line_256x4_0sub2, ptr @_huff_book_line_256x4_0sub3], align 16
@_floor_128x7_books = internal global [8 x ptr] [ptr @_huff_book_line_128x7_class0, ptr @_huff_book_line_128x7_class1, ptr @_huff_book_line_128x7_0sub1, ptr @_huff_book_line_128x7_0sub2, ptr @_huff_book_line_128x7_0sub3, ptr @_huff_book_line_128x7_1sub1, ptr @_huff_book_line_128x7_1sub2, ptr @_huff_book_line_128x7_1sub3], align 16
@_floor_256x7_books = internal global [8 x ptr] [ptr @_huff_book_line_256x7_class0, ptr @_huff_book_line_256x7_class1, ptr @_huff_book_line_256x7_0sub1, ptr @_huff_book_line_256x7_0sub2, ptr @_huff_book_line_256x7_0sub3, ptr @_huff_book_line_256x7_1sub1, ptr @_huff_book_line_256x7_1sub2, ptr @_huff_book_line_256x7_1sub3], align 16
@_floor_128x11_books = internal global [12 x ptr] [ptr @_huff_book_line_128x11_class1, ptr @_huff_book_line_128x11_class2, ptr @_huff_book_line_128x11_class3, ptr @_huff_book_line_128x11_0sub0, ptr @_huff_book_line_128x11_1sub0, ptr @_huff_book_line_128x11_1sub1, ptr @_huff_book_line_128x11_2sub1, ptr @_huff_book_line_128x11_2sub2, ptr @_huff_book_line_128x11_2sub3, ptr @_huff_book_line_128x11_3sub1, ptr @_huff_book_line_128x11_3sub2, ptr @_huff_book_line_128x11_3sub3], align 16
@_floor_128x17_books = internal global [12 x ptr] [ptr @_huff_book_line_128x17_class1, ptr @_huff_book_line_128x17_class2, ptr @_huff_book_line_128x17_class3, ptr @_huff_book_line_128x17_0sub0, ptr @_huff_book_line_128x17_1sub0, ptr @_huff_book_line_128x17_1sub1, ptr @_huff_book_line_128x17_2sub1, ptr @_huff_book_line_128x17_2sub2, ptr @_huff_book_line_128x17_2sub3, ptr @_huff_book_line_128x17_3sub1, ptr @_huff_book_line_128x17_3sub2, ptr @_huff_book_line_128x17_3sub3], align 16
@_floor_1024x27_books = internal global [15 x ptr] [ptr @_huff_book_line_1024x27_class1, ptr @_huff_book_line_1024x27_class2, ptr @_huff_book_line_1024x27_class3, ptr @_huff_book_line_1024x27_class4, ptr @_huff_book_line_1024x27_0sub0, ptr @_huff_book_line_1024x27_1sub0, ptr @_huff_book_line_1024x27_1sub1, ptr @_huff_book_line_1024x27_2sub0, ptr @_huff_book_line_1024x27_2sub1, ptr @_huff_book_line_1024x27_3sub1, ptr @_huff_book_line_1024x27_3sub2, ptr @_huff_book_line_1024x27_3sub3, ptr @_huff_book_line_1024x27_4sub1, ptr @_huff_book_line_1024x27_4sub2, ptr @_huff_book_line_1024x27_4sub3], align 16
@_floor_512x17_books = internal global [12 x ptr] [ptr @_huff_book_line_512x17_class1, ptr @_huff_book_line_512x17_class2, ptr @_huff_book_line_512x17_class3, ptr @_huff_book_line_512x17_0sub0, ptr @_huff_book_line_512x17_1sub0, ptr @_huff_book_line_512x17_1sub1, ptr @_huff_book_line_512x17_2sub1, ptr @_huff_book_line_512x17_2sub2, ptr @_huff_book_line_512x17_2sub3, ptr @_huff_book_line_512x17_3sub1, ptr @_huff_book_line_512x17_3sub2, ptr @_huff_book_line_512x17_3sub3], align 16
@_huff_book_line_128x4_class0 = internal global %struct.static_codebook { i64 1, i64 256, ptr @_huff_lengthlist_line_128x4_class0, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_128x4_0sub0 = internal global %struct.static_codebook { i64 1, i64 4, ptr @_huff_lengthlist_line_128x4_0sub0, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_128x4_0sub1 = internal global %struct.static_codebook { i64 1, i64 10, ptr @_huff_lengthlist_line_128x4_0sub1, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_128x4_0sub2 = internal global %struct.static_codebook { i64 1, i64 25, ptr @_huff_lengthlist_line_128x4_0sub2, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_128x4_0sub3 = internal global %struct.static_codebook { i64 1, i64 64, ptr @_huff_lengthlist_line_128x4_0sub3, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_lengthlist_line_128x4_class0 = internal global [256 x i64] [i64 8, i64 8, i64 8, i64 14, i64 7, i64 7, i64 8, i64 13, i64 7, i64 6, i64 7, i64 11, i64 11, i64 11, i64 10, i64 13, i64 9, i64 9, i64 10, i64 16, i64 8, i64 8, i64 9, i64 12, i64 7, i64 7, i64 7, i64 11, i64 11, i64 11, i64 10, i64 12, i64 11, i64 11, i64 11, i64 14, i64 10, i64 10, i64 10, i64 14, i64 9, i64 8, i64 9, i64 12, i64 13, i64 14, i64 12, i64 14, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 8, i64 7, i64 8, i64 11, i64 7, i64 7, i64 7, i64 11, i64 6, i64 6, i64 6, i64 10, i64 10, i64 10, i64 10, i64 14, i64 8, i64 8, i64 8, i64 12, i64 7, i64 7, i64 8, i64 11, i64 6, i64 7, i64 7, i64 10, i64 10, i64 10, i64 10, i64 13, i64 10, i64 10, i64 10, i64 12, i64 10, i64 9, i64 9, i64 12, i64 9, i64 9, i64 9, i64 12, i64 12, i64 13, i64 12, i64 14, i64 16, i64 16, i64 16, i64 16, i64 16, i64 14, i64 16, i64 16, i64 14, i64 14, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 7, i64 6, i64 5, i64 7, i64 6, i64 6, i64 5, i64 6, i64 6, i64 5, i64 5, i64 5, i64 9, i64 10, i64 9, i64 10, i64 8, i64 7, i64 6, i64 7, i64 7, i64 6, i64 5, i64 6, i64 6, i64 6, i64 5, i64 6, i64 10, i64 10, i64 9, i64 9, i64 10, i64 9, i64 7, i64 8, i64 9, i64 8, i64 7, i64 7, i64 8, i64 7, i64 6, i64 7, i64 11, i64 11, i64 10, i64 9, i64 16, i64 13, i64 14, i64 16, i64 14, i64 14, i64 13, i64 15, i64 16, i64 14, i64 12, i64 13, i64 16, i64 16, i64 14, i64 16, i64 9, i64 8, i64 7, i64 8, i64 8, i64 8, i64 7, i64 8, i64 8, i64 7, i64 6, i64 7, i64 10, i64 10, i64 9, i64 12, i64 9, i64 9, i64 8, i64 8, i64 9, i64 8, i64 7, i64 8, i64 8, i64 8, i64 6, i64 7, i64 10, i64 10, i64 9, i64 12, i64 11, i64 10, i64 9, i64 10, i64 10, i64 9, i64 7, i64 9, i64 9, i64 8, i64 6, i64 9, i64 12, i64 11, i64 10, i64 13, i64 12, i64 16, i64 16, i64 16, i64 12, i64 13, i64 12, i64 16, i64 15, i64 12, i64 11, i64 14, i64 16, i64 16, i64 16, i64 16], align 16
@_huff_lengthlist_line_128x4_0sub0 = internal global [4 x i64] [i64 2, i64 2, i64 2, i64 2], align 16
@_huff_lengthlist_line_128x4_0sub1 = internal global [10 x i64] [i64 0, i64 0, i64 0, i64 0, i64 3, i64 2, i64 3, i64 2, i64 3, i64 3], align 16
@_huff_lengthlist_line_128x4_0sub2 = internal global [25 x i64] [i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 3, i64 4, i64 4, i64 4, i64 4, i64 4, i64 3, i64 4, i64 4, i64 5, i64 3, i64 6, i64 4, i64 6], align 16
@_huff_lengthlist_line_128x4_0sub3 = internal global [64 x i64] [i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 2, i64 5, i64 2, i64 6, i64 3, i64 6, i64 3, i64 7, i64 4, i64 7, i64 5, i64 7, i64 5, i64 7, i64 6, i64 8, i64 8, i64 9, i64 10, i64 10, i64 16, i64 10, i64 16, i64 10, i64 14, i64 10, i64 14, i64 11, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15], align 16
@_huff_book_line_256x4_class0 = internal global %struct.static_codebook { i64 1, i64 256, ptr @_huff_lengthlist_line_256x4_class0, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_256x4_0sub0 = internal global %struct.static_codebook { i64 1, i64 4, ptr @_huff_lengthlist_line_256x4_0sub0, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_256x4_0sub1 = internal global %struct.static_codebook { i64 1, i64 10, ptr @_huff_lengthlist_line_256x4_0sub1, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_256x4_0sub2 = internal global %struct.static_codebook { i64 1, i64 25, ptr @_huff_lengthlist_line_256x4_0sub2, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_256x4_0sub3 = internal global %struct.static_codebook { i64 1, i64 64, ptr @_huff_lengthlist_line_256x4_0sub3, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_lengthlist_line_256x4_class0 = internal global [256 x i64] [i64 4, i64 5, i64 6, i64 11, i64 5, i64 5, i64 6, i64 10, i64 7, i64 6, i64 5, i64 6, i64 14, i64 13, i64 10, i64 10, i64 6, i64 6, i64 6, i64 10, i64 6, i64 6, i64 6, i64 10, i64 7, i64 7, i64 7, i64 9, i64 9, i64 10, i64 9, i64 12, i64 9, i64 8, i64 8, i64 11, i64 8, i64 8, i64 8, i64 10, i64 8, i64 8, i64 9, i64 11, i64 8, i64 9, i64 9, i64 13, i64 18, i64 18, i64 18, i64 18, i64 16, i64 17, i64 18, i64 18, i64 12, i64 13, i64 14, i64 18, i64 14, i64 14, i64 10, i64 12, i64 5, i64 5, i64 6, i64 12, i64 6, i64 5, i64 6, i64 10, i64 7, i64 7, i64 6, i64 7, i64 13, i64 12, i64 9, i64 12, i64 6, i64 6, i64 6, i64 11, i64 6, i64 6, i64 6, i64 9, i64 7, i64 7, i64 7, i64 10, i64 10, i64 10, i64 9, i64 12, i64 9, i64 8, i64 8, i64 12, i64 8, i64 8, i64 7, i64 11, i64 8, i64 8, i64 8, i64 11, i64 9, i64 9, i64 8, i64 10, i64 18, i64 18, i64 17, i64 18, i64 18, i64 18, i64 15, i64 18, i64 16, i64 14, i64 12, i64 18, i64 14, i64 12, i64 10, i64 11, i64 8, i64 7, i64 7, i64 12, i64 8, i64 7, i64 7, i64 10, i64 8, i64 7, i64 6, i64 6, i64 11, i64 10, i64 9, i64 10, i64 8, i64 8, i64 7, i64 11, i64 8, i64 7, i64 7, i64 9, i64 8, i64 8, i64 7, i64 9, i64 10, i64 10, i64 9, i64 9, i64 10, i64 9, i64 8, i64 12, i64 9, i64 9, i64 8, i64 11, i64 10, i64 9, i64 8, i64 9, i64 8, i64 8, i64 7, i64 9, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 17, i64 16, i64 14, i64 18, i64 13, i64 12, i64 11, i64 13, i64 12, i64 12, i64 13, i64 16, i64 11, i64 10, i64 10, i64 16, i64 12, i64 12, i64 9, i64 7, i64 15, i64 12, i64 11, i64 11, i64 14, i64 14, i64 14, i64 14, i64 12, i64 11, i64 11, i64 18, i64 14, i64 12, i64 10, i64 11, i64 18, i64 13, i64 11, i64 13, i64 18, i64 18, i64 18, i64 17, i64 17, i64 16, i64 15, i64 17, i64 18, i64 15, i64 16, i64 18, i64 16, i64 12, i64 11, i64 11, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 17, i64 18, i64 18, i64 13, i64 12, i64 15], align 16
@_huff_lengthlist_line_256x4_0sub0 = internal global [4 x i64] [i64 1, i64 3, i64 2, i64 3], align 16
@_huff_lengthlist_line_256x4_0sub1 = internal global [10 x i64] [i64 0, i64 0, i64 0, i64 0, i64 2, i64 2, i64 3, i64 3, i64 3, i64 3], align 16
@_huff_lengthlist_line_256x4_0sub2 = internal global [25 x i64] [i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 3, i64 3, i64 3, i64 4, i64 3, i64 4, i64 4, i64 4, i64 5, i64 4, i64 5, i64 5, i64 6, i64 4, i64 6], align 16
@_huff_lengthlist_line_256x4_0sub3 = internal global [64 x i64] [i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 2, i64 4, i64 3, i64 4, i64 3, i64 4, i64 4, i64 5, i64 4, i64 5, i64 5, i64 6, i64 5, i64 7, i64 6, i64 8, i64 7, i64 9, i64 8, i64 9, i64 9, i64 10, i64 12, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14], align 16
@_huff_book_line_128x7_class0 = internal global %struct.static_codebook { i64 1, i64 64, ptr @_huff_lengthlist_line_128x7_class0, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_128x7_class1 = internal global %struct.static_codebook { i64 1, i64 256, ptr @_huff_lengthlist_line_128x7_class1, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_128x7_0sub1 = internal global %struct.static_codebook { i64 1, i64 9, ptr @_huff_lengthlist_line_128x7_0sub1, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_128x7_0sub2 = internal global %struct.static_codebook { i64 1, i64 25, ptr @_huff_lengthlist_line_128x7_0sub2, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_128x7_0sub3 = internal global %struct.static_codebook { i64 1, i64 64, ptr @_huff_lengthlist_line_128x7_0sub3, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_128x7_1sub1 = internal global %struct.static_codebook { i64 1, i64 9, ptr @_huff_lengthlist_line_128x7_1sub1, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_128x7_1sub2 = internal global %struct.static_codebook { i64 1, i64 25, ptr @_huff_lengthlist_line_128x7_1sub2, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_128x7_1sub3 = internal global %struct.static_codebook { i64 1, i64 64, ptr @_huff_lengthlist_line_128x7_1sub3, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_lengthlist_line_128x7_class0 = internal global [64 x i64] [i64 10, i64 7, i64 8, i64 14, i64 10, i64 7, i64 7, i64 12, i64 11, i64 8, i64 8, i64 13, i64 16, i64 16, i64 16, i64 16, i64 8, i64 5, i64 5, i64 10, i64 7, i64 4, i64 4, i64 8, i64 8, i64 5, i64 5, i64 9, i64 16, i64 16, i64 16, i64 16, i64 7, i64 4, i64 5, i64 7, i64 6, i64 3, i64 3, i64 6, i64 8, i64 5, i64 5, i64 7, i64 16, i64 14, i64 13, i64 16, i64 9, i64 7, i64 7, i64 10, i64 7, i64 4, i64 4, i64 7, i64 9, i64 6, i64 5, i64 6, i64 15, i64 13, i64 11, i64 14], align 16
@_huff_lengthlist_line_128x7_class1 = internal global [256 x i64] [i64 8, i64 12, i64 16, i64 16, i64 10, i64 14, i64 16, i64 16, i64 12, i64 15, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 7, i64 11, i64 15, i64 16, i64 7, i64 11, i64 16, i64 16, i64 10, i64 12, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 9, i64 15, i64 16, i64 16, i64 9, i64 12, i64 16, i64 16, i64 11, i64 15, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 6, i64 10, i64 13, i64 16, i64 7, i64 10, i64 15, i64 16, i64 9, i64 11, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 4, i64 8, i64 13, i64 16, i64 5, i64 8, i64 15, i64 16, i64 7, i64 9, i64 15, i64 16, i64 16, i64 16, i64 16, i64 16, i64 6, i64 12, i64 16, i64 16, i64 6, i64 10, i64 15, i64 16, i64 9, i64 10, i64 14, i64 16, i64 16, i64 16, i64 16, i64 16, i64 14, i64 16, i64 16, i64 16, i64 12, i64 14, i64 16, i64 16, i64 15, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 4, i64 9, i64 11, i64 16, i64 5, i64 9, i64 13, i64 16, i64 7, i64 9, i64 15, i64 16, i64 16, i64 16, i64 16, i64 16, i64 2, i64 7, i64 11, i64 16, i64 3, i64 6, i64 11, i64 16, i64 5, i64 7, i64 12, i64 16, i64 16, i64 16, i64 16, i64 16, i64 4, i64 9, i64 14, i64 16, i64 4, i64 7, i64 13, i64 16, i64 6, i64 8, i64 13, i64 16, i64 16, i64 16, i64 16, i64 16, i64 11, i64 14, i64 16, i64 16, i64 10, i64 16, i64 14, i64 16, i64 11, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 7, i64 13, i64 16, i64 16, i64 9, i64 13, i64 15, i64 16, i64 11, i64 13, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 5, i64 10, i64 14, i64 16, i64 6, i64 10, i64 15, i64 16, i64 9, i64 10, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 7, i64 13, i64 16, i64 16, i64 6, i64 10, i64 16, i64 16, i64 9, i64 12, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 11, i64 16, i64 16, i64 16, i64 10, i64 16, i64 16, i64 16, i64 13, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16], align 16
@_huff_lengthlist_line_128x7_0sub1 = internal global [9 x i64] [i64 0, i64 3, i64 3, i64 3, i64 3, i64 3, i64 3, i64 3, i64 3], align 16
@_huff_lengthlist_line_128x7_0sub2 = internal global [25 x i64] [i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 3, i64 3, i64 4, i64 3, i64 4, i64 4, i64 4, i64 5, i64 4, i64 5, i64 4, i64 5, i64 4, i64 6, i64 4, i64 6], align 16
@_huff_lengthlist_line_128x7_0sub3 = internal global [64 x i64] [i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 3, i64 5, i64 3, i64 5, i64 3, i64 6, i64 4, i64 6, i64 4, i64 6, i64 4, i64 6, i64 5, i64 6, i64 5, i64 6, i64 5, i64 6, i64 5, i64 6, i64 5, i64 5, i64 5, i64 6, i64 7, i64 8, i64 10, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12], align 16
@_huff_lengthlist_line_128x7_1sub1 = internal global [9 x i64] [i64 0, i64 3, i64 3, i64 3, i64 3, i64 2, i64 4, i64 3, i64 4], align 16
@_huff_lengthlist_line_128x7_1sub2 = internal global [25 x i64] [i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 3, i64 5, i64 3, i64 6, i64 3, i64 7, i64 3, i64 8, i64 3, i64 9, i64 3, i64 10, i64 3, i64 11, i64 4, i64 11], align 16
@_huff_lengthlist_line_128x7_1sub3 = internal global [64 x i64] [i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 1, i64 12, i64 2, i64 9, i64 3, i64 10, i64 4, i64 12, i64 5, i64 12, i64 6, i64 12, i64 10, i64 12, i64 11, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11], align 16
@_huff_book_line_256x7_class0 = internal global %struct.static_codebook { i64 1, i64 64, ptr @_huff_lengthlist_line_256x7_class0, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_256x7_class1 = internal global %struct.static_codebook { i64 1, i64 256, ptr @_huff_lengthlist_line_256x7_class1, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_256x7_0sub1 = internal global %struct.static_codebook { i64 1, i64 9, ptr @_huff_lengthlist_line_256x7_0sub1, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_256x7_0sub2 = internal global %struct.static_codebook { i64 1, i64 25, ptr @_huff_lengthlist_line_256x7_0sub2, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_256x7_0sub3 = internal global %struct.static_codebook { i64 1, i64 64, ptr @_huff_lengthlist_line_256x7_0sub3, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_256x7_1sub1 = internal global %struct.static_codebook { i64 1, i64 9, ptr @_huff_lengthlist_line_256x7_1sub1, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_256x7_1sub2 = internal global %struct.static_codebook { i64 1, i64 25, ptr @_huff_lengthlist_line_256x7_1sub2, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_256x7_1sub3 = internal global %struct.static_codebook { i64 1, i64 64, ptr @_huff_lengthlist_line_256x7_1sub3, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_lengthlist_line_256x7_class0 = internal global [64 x i64] [i64 7, i64 5, i64 5, i64 9, i64 9, i64 6, i64 6, i64 9, i64 12, i64 8, i64 7, i64 8, i64 11, i64 8, i64 9, i64 15, i64 6, i64 3, i64 3, i64 7, i64 7, i64 4, i64 3, i64 6, i64 9, i64 6, i64 5, i64 6, i64 8, i64 6, i64 8, i64 15, i64 8, i64 5, i64 5, i64 9, i64 8, i64 5, i64 4, i64 6, i64 10, i64 7, i64 5, i64 5, i64 11, i64 8, i64 7, i64 15, i64 14, i64 15, i64 13, i64 13, i64 13, i64 13, i64 8, i64 11, i64 15, i64 10, i64 7, i64 6, i64 11, i64 9, i64 10, i64 15], align 16
@_huff_lengthlist_line_256x7_class1 = internal global [256 x i64] [i64 5, i64 6, i64 8, i64 15, i64 6, i64 9, i64 10, i64 15, i64 10, i64 11, i64 12, i64 15, i64 15, i64 15, i64 15, i64 15, i64 4, i64 6, i64 7, i64 15, i64 6, i64 7, i64 8, i64 15, i64 9, i64 8, i64 9, i64 15, i64 15, i64 15, i64 15, i64 15, i64 6, i64 8, i64 9, i64 15, i64 7, i64 7, i64 8, i64 15, i64 10, i64 9, i64 10, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 13, i64 15, i64 15, i64 15, i64 10, i64 11, i64 15, i64 15, i64 13, i64 13, i64 15, i64 15, i64 15, i64 15, i64 15, i64 4, i64 6, i64 7, i64 15, i64 6, i64 8, i64 9, i64 15, i64 10, i64 10, i64 12, i64 15, i64 15, i64 15, i64 15, i64 15, i64 2, i64 5, i64 6, i64 15, i64 5, i64 6, i64 7, i64 15, i64 8, i64 6, i64 7, i64 15, i64 15, i64 15, i64 15, i64 15, i64 5, i64 6, i64 8, i64 15, i64 5, i64 6, i64 7, i64 15, i64 9, i64 6, i64 7, i64 15, i64 15, i64 15, i64 15, i64 15, i64 14, i64 12, i64 13, i64 15, i64 12, i64 10, i64 11, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 7, i64 8, i64 9, i64 15, i64 9, i64 10, i64 10, i64 15, i64 15, i64 14, i64 14, i64 15, i64 15, i64 15, i64 15, i64 15, i64 5, i64 6, i64 7, i64 15, i64 7, i64 8, i64 9, i64 15, i64 12, i64 9, i64 10, i64 15, i64 15, i64 15, i64 15, i64 15, i64 7, i64 7, i64 9, i64 15, i64 7, i64 7, i64 8, i64 15, i64 12, i64 8, i64 9, i64 15, i64 15, i64 15, i64 15, i64 15, i64 13, i64 13, i64 14, i64 15, i64 12, i64 11, i64 12, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 13, i64 13, i64 13, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 12, i64 13, i64 15, i64 15, i64 12, i64 13, i64 15, i64 15, i64 14, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 13, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15], align 16
@_huff_lengthlist_line_256x7_0sub1 = internal global [9 x i64] [i64 0, i64 2, i64 3, i64 3, i64 3, i64 3, i64 4, i64 3, i64 4], align 16
@_huff_lengthlist_line_256x7_0sub2 = internal global [25 x i64] [i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 3, i64 4, i64 3, i64 4, i64 3, i64 5, i64 3, i64 6, i64 3, i64 6, i64 4, i64 6, i64 4, i64 7, i64 5, i64 7], align 16
@_huff_lengthlist_line_256x7_0sub3 = internal global [64 x i64] [i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 3, i64 5, i64 2, i64 5, i64 3, i64 5, i64 3, i64 6, i64 3, i64 6, i64 4, i64 7, i64 6, i64 7, i64 8, i64 7, i64 9, i64 8, i64 9, i64 9, i64 9, i64 10, i64 9, i64 11, i64 13, i64 11, i64 13, i64 10, i64 10, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 12, i64 12, i64 12, i64 12], align 16
@_huff_lengthlist_line_256x7_1sub1 = internal global [9 x i64] [i64 0, i64 3, i64 3, i64 3, i64 3, i64 2, i64 4, i64 3, i64 4], align 16
@_huff_lengthlist_line_256x7_1sub2 = internal global [25 x i64] [i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 2, i64 3, i64 3, i64 4, i64 3, i64 4, i64 4, i64 5, i64 4, i64 6, i64 5, i64 6, i64 7, i64 6, i64 8, i64 8], align 16
@_huff_lengthlist_line_256x7_1sub3 = internal global [64 x i64] [i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 3, i64 2, i64 4, i64 3, i64 6, i64 3, i64 7, i64 3, i64 8, i64 5, i64 8, i64 6, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 7], align 16
@_huff_book_line_128x11_class1 = internal global %struct.static_codebook { i64 1, i64 8, ptr @_huff_lengthlist_line_128x11_class1, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_128x11_class2 = internal global %struct.static_codebook { i64 1, i64 64, ptr @_huff_lengthlist_line_128x11_class2, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_128x11_class3 = internal global %struct.static_codebook { i64 1, i64 64, ptr @_huff_lengthlist_line_128x11_class3, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_128x11_0sub0 = internal global %struct.static_codebook { i64 1, i64 128, ptr @_huff_lengthlist_line_128x11_0sub0, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_128x11_1sub0 = internal global %struct.static_codebook { i64 1, i64 32, ptr @_huff_lengthlist_line_128x11_1sub0, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_128x11_1sub1 = internal global %struct.static_codebook { i64 1, i64 128, ptr @_huff_lengthlist_line_128x11_1sub1, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_128x11_2sub1 = internal global %struct.static_codebook { i64 1, i64 18, ptr @_huff_lengthlist_line_128x11_2sub1, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_128x11_2sub2 = internal global %struct.static_codebook { i64 1, i64 50, ptr @_huff_lengthlist_line_128x11_2sub2, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_128x11_2sub3 = internal global %struct.static_codebook { i64 1, i64 128, ptr @_huff_lengthlist_line_128x11_2sub3, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_128x11_3sub1 = internal global %struct.static_codebook { i64 1, i64 18, ptr @_huff_lengthlist_line_128x11_3sub1, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_128x11_3sub2 = internal global %struct.static_codebook { i64 1, i64 50, ptr @_huff_lengthlist_line_128x11_3sub2, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_128x11_3sub3 = internal global %struct.static_codebook { i64 1, i64 128, ptr @_huff_lengthlist_line_128x11_3sub3, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_lengthlist_line_128x11_class1 = internal global [8 x i64] [i64 1, i64 6, i64 3, i64 7, i64 2, i64 5, i64 4, i64 7], align 16
@_huff_lengthlist_line_128x11_class2 = internal global [64 x i64] [i64 1, i64 5, i64 11, i64 14, i64 4, i64 11, i64 13, i64 14, i64 10, i64 14, i64 13, i64 14, i64 14, i64 14, i64 13, i64 13, i64 2, i64 6, i64 11, i64 13, i64 5, i64 11, i64 12, i64 13, i64 11, i64 12, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 4, i64 8, i64 12, i64 13, i64 5, i64 9, i64 11, i64 13, i64 12, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13], align 16
@_huff_lengthlist_line_128x11_class3 = internal global [64 x i64] [i64 6, i64 7, i64 11, i64 16, i64 6, i64 7, i64 10, i64 16, i64 11, i64 9, i64 13, i64 15, i64 15, i64 15, i64 15, i64 15, i64 4, i64 4, i64 7, i64 14, i64 4, i64 4, i64 6, i64 14, i64 8, i64 6, i64 8, i64 15, i64 15, i64 15, i64 15, i64 15, i64 4, i64 4, i64 6, i64 15, i64 3, i64 2, i64 4, i64 13, i64 6, i64 5, i64 6, i64 14, i64 15, i64 12, i64 11, i64 14, i64 11, i64 11, i64 13, i64 15, i64 9, i64 8, i64 10, i64 15, i64 11, i64 10, i64 11, i64 15, i64 15, i64 15, i64 15, i64 15], align 16
@_huff_lengthlist_line_128x11_0sub0 = internal global [128 x i64] [i64 5, i64 5, i64 6, i64 5, i64 6, i64 5, i64 6, i64 5, i64 6, i64 5, i64 6, i64 5, i64 6, i64 5, i64 6, i64 5, i64 6, i64 5, i64 6, i64 5, i64 6, i64 5, i64 6, i64 5, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 7, i64 6, i64 7, i64 6, i64 7, i64 6, i64 7, i64 6, i64 7, i64 6, i64 7, i64 6, i64 7, i64 6, i64 7, i64 6, i64 8, i64 7, i64 8, i64 7, i64 8, i64 7, i64 8, i64 7, i64 9, i64 7, i64 9, i64 7, i64 9, i64 8, i64 10, i64 8, i64 10, i64 8, i64 10, i64 8, i64 10, i64 8, i64 10, i64 9, i64 11, i64 9, i64 11, i64 9, i64 10, i64 9, i64 10, i64 10, i64 11, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 14, i64 13, i64 14, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 15, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 15, i64 15, i64 15], align 16
@_huff_lengthlist_line_128x11_1sub0 = internal global [32 x i64] [i64 2, i64 5, i64 5, i64 4, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 6, i64 5, i64 6, i64 5, i64 6, i64 5, i64 7, i64 6, i64 7, i64 6, i64 7, i64 6, i64 8, i64 6, i64 8, i64 6], align 16
@_huff_lengthlist_line_128x11_1sub1 = internal global [128 x i64] [i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 3, i64 6, i64 3, i64 7, i64 3, i64 7, i64 4, i64 8, i64 4, i64 8, i64 4, i64 8, i64 4, i64 9, i64 4, i64 10, i64 5, i64 9, i64 5, i64 10, i64 5, i64 10, i64 5, i64 10, i64 5, i64 12, i64 6, i64 12, i64 6, i64 10, i64 6, i64 10, i64 7, i64 10, i64 8, i64 10, i64 8, i64 10, i64 9, i64 11, i64 9, i64 12, i64 11, i64 10, i64 11, i64 11, i64 13, i64 12, i64 12, i64 12, i64 13, i64 10, i64 13, i64 10, i64 13, i64 10, i64 13, i64 10, i64 13, i64 11, i64 13, i64 10, i64 13, i64 10, i64 13, i64 10, i64 13, i64 10, i64 13, i64 10, i64 13, i64 11, i64 12, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13], align 16
@_huff_lengthlist_line_128x11_2sub1 = internal global [18 x i64] [i64 0, i64 4, i64 5, i64 4, i64 5, i64 4, i64 5, i64 3, i64 4, i64 3, i64 4, i64 4, i64 4, i64 4, i64 4, i64 5, i64 5, i64 5], align 16
@_huff_lengthlist_line_128x11_2sub2 = internal global [50 x i64] [i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 2, i64 3, i64 3, i64 4, i64 3, i64 5, i64 4, i64 5, i64 5, i64 6, i64 5, i64 6, i64 6, i64 6, i64 6, i64 8, i64 6, i64 10, i64 7, i64 10, i64 8, i64 10, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10], align 16
@_huff_lengthlist_line_128x11_2sub3 = internal global [128 x i64] [i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6], align 16
@_huff_lengthlist_line_128x11_3sub1 = internal global [18 x i64] [i64 0, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 5, i64 4, i64 5, i64 4], align 16
@_huff_lengthlist_line_128x11_3sub2 = internal global [50 x i64] [i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 3, i64 5, i64 3, i64 6, i64 4, i64 7, i64 4, i64 7, i64 4, i64 7, i64 4, i64 8, i64 4, i64 8, i64 4, i64 9, i64 4, i64 9, i64 4, i64 9, i64 5, i64 10, i64 5, i64 11, i64 5, i64 12, i64 6, i64 13, i64 6, i64 13, i64 7], align 16
@_huff_lengthlist_line_128x11_3sub3 = internal global [128 x i64] [i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 2, i64 6, i64 2, i64 7, i64 3, i64 8, i64 4, i64 7, i64 6, i64 9, i64 7, i64 9, i64 7, i64 9, i64 9, i64 9, i64 8, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8], align 16
@_huff_book_line_128x17_class1 = internal global %struct.static_codebook { i64 1, i64 8, ptr @_huff_lengthlist_line_128x17_class1, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_128x17_class2 = internal global %struct.static_codebook { i64 1, i64 64, ptr @_huff_lengthlist_line_128x17_class2, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_128x17_class3 = internal global %struct.static_codebook { i64 1, i64 64, ptr @_huff_lengthlist_line_128x17_class3, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_128x17_0sub0 = internal global %struct.static_codebook { i64 1, i64 128, ptr @_huff_lengthlist_line_128x17_0sub0, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_128x17_1sub0 = internal global %struct.static_codebook { i64 1, i64 32, ptr @_huff_lengthlist_line_128x17_1sub0, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_128x17_1sub1 = internal global %struct.static_codebook { i64 1, i64 128, ptr @_huff_lengthlist_line_128x17_1sub1, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_128x17_2sub1 = internal global %struct.static_codebook { i64 1, i64 18, ptr @_huff_lengthlist_line_128x17_2sub1, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_128x17_2sub2 = internal global %struct.static_codebook { i64 1, i64 50, ptr @_huff_lengthlist_line_128x17_2sub2, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_128x17_2sub3 = internal global %struct.static_codebook { i64 1, i64 128, ptr @_huff_lengthlist_line_128x17_2sub3, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_128x17_3sub1 = internal global %struct.static_codebook { i64 1, i64 18, ptr @_huff_lengthlist_line_128x17_3sub1, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_128x17_3sub2 = internal global %struct.static_codebook { i64 1, i64 50, ptr @_huff_lengthlist_line_128x17_3sub2, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_128x17_3sub3 = internal global %struct.static_codebook { i64 1, i64 128, ptr @_huff_lengthlist_line_128x17_3sub3, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_lengthlist_line_128x17_class1 = internal global [8 x i64] [i64 1, i64 3, i64 4, i64 7, i64 2, i64 6, i64 5, i64 7], align 16
@_huff_lengthlist_line_128x17_class2 = internal global [64 x i64] [i64 1, i64 2, i64 7, i64 14, i64 4, i64 9, i64 13, i64 14, i64 8, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 3, i64 5, i64 10, i64 14, i64 8, i64 14, i64 14, i64 14, i64 11, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 7, i64 10, i64 14, i64 14, i64 12, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 13], align 16
@_huff_lengthlist_line_128x17_class3 = internal global [64 x i64] [i64 2, i64 6, i64 11, i64 19, i64 5, i64 9, i64 12, i64 19, i64 10, i64 11, i64 13, i64 19, i64 19, i64 19, i64 19, i64 19, i64 2, i64 5, i64 8, i64 19, i64 4, i64 6, i64 8, i64 19, i64 8, i64 8, i64 9, i64 19, i64 19, i64 16, i64 19, i64 19, i64 3, i64 6, i64 8, i64 19, i64 3, i64 5, i64 7, i64 18, i64 8, i64 8, i64 9, i64 16, i64 16, i64 11, i64 16, i64 19, i64 14, i64 14, i64 14, i64 19, i64 10, i64 10, i64 11, i64 19, i64 16, i64 12, i64 14, i64 19, i64 19, i64 19, i64 19, i64 19], align 16
@_huff_lengthlist_line_128x17_0sub0 = internal global [128 x i64] [i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 6, i64 5, i64 6, i64 5, i64 6, i64 5, i64 6, i64 5, i64 6, i64 5, i64 6, i64 5, i64 6, i64 5, i64 6, i64 5, i64 7, i64 5, i64 7, i64 5, i64 7, i64 6, i64 7, i64 6, i64 7, i64 6, i64 8, i64 6, i64 8, i64 6, i64 8, i64 6, i64 8, i64 6, i64 8, i64 6, i64 8, i64 7, i64 9, i64 7, i64 9, i64 7, i64 9, i64 7, i64 9, i64 7, i64 9, i64 7, i64 9, i64 7, i64 10, i64 7, i64 10, i64 8, i64 10, i64 8, i64 11, i64 8, i64 11, i64 8, i64 11, i64 8, i64 12, i64 8, i64 12, i64 8, i64 12, i64 8, i64 12, i64 9, i64 12, i64 9, i64 12, i64 9, i64 12, i64 9, i64 13, i64 9, i64 13, i64 10, i64 13, i64 10, i64 13, i64 11, i64 14, i64 12, i64 14, i64 13, i64 14, i64 14, i64 16, i64 15, i64 17, i64 17, i64 19, i64 18, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 18, i64 18, i64 18, i64 18, i64 18], align 16
@_huff_lengthlist_line_128x17_1sub0 = internal global [32 x i64] [i64 2, i64 5, i64 5, i64 4, i64 5, i64 4, i64 5, i64 4, i64 5, i64 4, i64 5, i64 5, i64 5, i64 5, i64 6, i64 5, i64 6, i64 5, i64 6, i64 6, i64 7, i64 6, i64 7, i64 6, i64 8, i64 6, i64 8, i64 7, i64 9, i64 7, i64 9, i64 8], align 16
@_huff_lengthlist_line_128x17_1sub1 = internal global [128 x i64] [i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 2, i64 5, i64 3, i64 5, i64 3, i64 6, i64 4, i64 6, i64 4, i64 7, i64 4, i64 8, i64 5, i64 8, i64 5, i64 8, i64 6, i64 9, i64 6, i64 9, i64 7, i64 9, i64 8, i64 10, i64 8, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 12, i64 10, i64 14, i64 11, i64 15, i64 12, i64 15, i64 11, i64 15, i64 11, i64 15, i64 11, i64 14, i64 11, i64 15, i64 11, i64 14, i64 11, i64 13, i64 10, i64 12, i64 10, i64 14, i64 10, i64 14, i64 11, i64 13, i64 10, i64 12, i64 11, i64 15, i64 12, i64 15, i64 13, i64 15, i64 12, i64 13, i64 14, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 14, i64 14, i64 14], align 16
@_huff_lengthlist_line_128x17_2sub1 = internal global [18 x i64] [i64 0, i64 4, i64 5, i64 4, i64 7, i64 3, i64 8, i64 3, i64 9, i64 3, i64 10, i64 2, i64 12, i64 3, i64 12, i64 4, i64 11, i64 6], align 16
@_huff_lengthlist_line_128x17_2sub2 = internal global [50 x i64] [i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 1, i64 8, i64 2, i64 9, i64 3, i64 9, i64 7, i64 9, i64 7, i64 9, i64 7, i64 8, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8], align 16
@_huff_lengthlist_line_128x17_2sub3 = internal global [128 x i64] [i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6], align 16
@_huff_lengthlist_line_128x17_3sub1 = internal global [18 x i64] [i64 0, i64 4, i64 4, i64 4, i64 5, i64 4, i64 5, i64 3, i64 5, i64 3, i64 5, i64 3, i64 5, i64 4, i64 6, i64 4, i64 6, i64 4], align 16
@_huff_lengthlist_line_128x17_3sub2 = internal global [50 x i64] [i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 3, i64 6, i64 3, i64 6, i64 3, i64 7, i64 4, i64 8, i64 4, i64 8, i64 4, i64 9, i64 4, i64 9, i64 4, i64 10, i64 4, i64 10, i64 5, i64 11, i64 5, i64 11, i64 5, i64 12, i64 5, i64 12, i64 6, i64 12, i64 6, i64 12, i64 7], align 16
@_huff_lengthlist_line_128x17_3sub3 = internal global [128 x i64] [i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 1, i64 7, i64 3, i64 6, i64 3, i64 6, i64 4, i64 6, i64 5, i64 6, i64 8, i64 7, i64 10, i64 7, i64 11, i64 7, i64 11, i64 8, i64 11, i64 9, i64 11, i64 7, i64 11, i64 8, i64 11, i64 8, i64 11, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11], align 16
@_huff_book_line_1024x27_class1 = internal global %struct.static_codebook { i64 1, i64 16, ptr @_huff_lengthlist_line_1024x27_class1, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_1024x27_class2 = internal global %struct.static_codebook { i64 1, i64 8, ptr @_huff_lengthlist_line_1024x27_class2, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_1024x27_class3 = internal global %struct.static_codebook { i64 1, i64 256, ptr @_huff_lengthlist_line_1024x27_class3, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_1024x27_class4 = internal global %struct.static_codebook { i64 1, i64 64, ptr @_huff_lengthlist_line_1024x27_class4, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_1024x27_0sub0 = internal global %struct.static_codebook { i64 1, i64 128, ptr @_huff_lengthlist_line_1024x27_0sub0, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_1024x27_1sub0 = internal global %struct.static_codebook { i64 1, i64 32, ptr @_huff_lengthlist_line_1024x27_1sub0, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_1024x27_1sub1 = internal global %struct.static_codebook { i64 1, i64 128, ptr @_huff_lengthlist_line_1024x27_1sub1, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_1024x27_2sub0 = internal global %struct.static_codebook { i64 1, i64 32, ptr @_huff_lengthlist_line_1024x27_2sub0, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_1024x27_2sub1 = internal global %struct.static_codebook { i64 1, i64 128, ptr @_huff_lengthlist_line_1024x27_2sub1, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_1024x27_3sub1 = internal global %struct.static_codebook { i64 1, i64 18, ptr @_huff_lengthlist_line_1024x27_3sub1, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_1024x27_3sub2 = internal global %struct.static_codebook { i64 1, i64 50, ptr @_huff_lengthlist_line_1024x27_3sub2, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_1024x27_3sub3 = internal global %struct.static_codebook { i64 1, i64 128, ptr @_huff_lengthlist_line_1024x27_3sub3, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_1024x27_4sub1 = internal global %struct.static_codebook { i64 1, i64 18, ptr @_huff_lengthlist_line_1024x27_4sub1, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_1024x27_4sub2 = internal global %struct.static_codebook { i64 1, i64 50, ptr @_huff_lengthlist_line_1024x27_4sub2, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_1024x27_4sub3 = internal global %struct.static_codebook { i64 1, i64 128, ptr @_huff_lengthlist_line_1024x27_4sub3, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_lengthlist_line_1024x27_class1 = internal global [16 x i64] [i64 2, i64 9, i64 8, i64 14, i64 7, i64 13, i64 11, i64 14, i64 1, i64 5, i64 3, i64 7, i64 4, i64 10, i64 7, i64 12], align 16
@_huff_lengthlist_line_1024x27_class2 = internal global [8 x i64] [i64 1, i64 3, i64 2, i64 5, i64 4, i64 7, i64 6, i64 7], align 16
@_huff_lengthlist_line_1024x27_class3 = internal global [256 x i64] [i64 1, i64 5, i64 6, i64 19, i64 5, i64 8, i64 10, i64 19, i64 9, i64 10, i64 15, i64 19, i64 19, i64 19, i64 19, i64 19, i64 4, i64 7, i64 9, i64 19, i64 6, i64 7, i64 10, i64 19, i64 11, i64 11, i64 15, i64 19, i64 19, i64 19, i64 19, i64 19, i64 8, i64 11, i64 13, i64 19, i64 8, i64 11, i64 14, i64 19, i64 13, i64 13, i64 17, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 3, i64 7, i64 9, i64 19, i64 6, i64 8, i64 11, i64 19, i64 11, i64 11, i64 15, i64 19, i64 19, i64 19, i64 19, i64 19, i64 5, i64 7, i64 11, i64 19, i64 6, i64 7, i64 11, i64 19, i64 11, i64 10, i64 14, i64 19, i64 19, i64 19, i64 19, i64 19, i64 8, i64 11, i64 15, i64 19, i64 8, i64 10, i64 14, i64 19, i64 13, i64 13, i64 16, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 6, i64 9, i64 11, i64 19, i64 8, i64 10, i64 12, i64 19, i64 15, i64 14, i64 17, i64 19, i64 19, i64 19, i64 19, i64 19, i64 5, i64 8, i64 11, i64 19, i64 7, i64 9, i64 12, i64 19, i64 14, i64 11, i64 16, i64 19, i64 19, i64 19, i64 19, i64 19, i64 9, i64 10, i64 18, i64 19, i64 9, i64 10, i64 15, i64 19, i64 14, i64 16, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 16, i64 17, i64 19, i64 19, i64 16, i64 17, i64 17, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 12, i64 14, i64 16, i64 19, i64 12, i64 12, i64 16, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 18, i64 18, i64 19, i64 19, i64 17, i64 16, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 18], align 16
@_huff_lengthlist_line_1024x27_class4 = internal global [64 x i64] [i64 1, i64 4, i64 8, i64 12, i64 4, i64 6, i64 8, i64 21, i64 9, i64 8, i64 10, i64 21, i64 20, i64 16, i64 18, i64 20, i64 2, i64 6, i64 8, i64 20, i64 7, i64 6, i64 9, i64 19, i64 11, i64 9, i64 10, i64 20, i64 17, i64 15, i64 16, i64 20, i64 5, i64 8, i64 11, i64 19, i64 8, i64 8, i64 10, i64 15, i64 12, i64 10, i64 12, i64 15, i64 20, i64 20, i64 15, i64 20, i64 17, i64 20, i64 20, i64 20, i64 15, i64 20, i64 20, i64 19, i64 20, i64 20, i64 16, i64 19, i64 20, i64 20, i64 20, i64 20], align 16
@_huff_lengthlist_line_1024x27_0sub0 = internal global [128 x i64] [i64 5, i64 5, i64 5, i64 5, i64 6, i64 5, i64 6, i64 5, i64 6, i64 5, i64 6, i64 5, i64 6, i64 5, i64 6, i64 5, i64 6, i64 5, i64 6, i64 5, i64 6, i64 5, i64 7, i64 5, i64 7, i64 5, i64 7, i64 5, i64 8, i64 5, i64 8, i64 6, i64 8, i64 6, i64 9, i64 6, i64 9, i64 6, i64 9, i64 6, i64 10, i64 6, i64 10, i64 6, i64 11, i64 6, i64 11, i64 6, i64 11, i64 6, i64 12, i64 6, i64 12, i64 7, i64 12, i64 7, i64 12, i64 7, i64 12, i64 7, i64 12, i64 7, i64 12, i64 7, i64 12, i64 7, i64 12, i64 7, i64 12, i64 7, i64 12, i64 7, i64 12, i64 8, i64 12, i64 8, i64 11, i64 8, i64 11, i64 8, i64 12, i64 9, i64 11, i64 9, i64 9, i64 10, i64 11, i64 9, i64 12, i64 9, i64 12, i64 12, i64 14, i64 13, i64 13, i64 14, i64 13, i64 13, i64 13, i64 12, i64 14, i64 16, i64 20, i64 20, i64 21, i64 14, i64 14, i64 15, i64 21, i64 21, i64 21, i64 20, i64 21, i64 21, i64 21, i64 21, i64 21, i64 21, i64 21, i64 21, i64 21, i64 21, i64 20, i64 20, i64 20, i64 20, i64 20, i64 20], align 16
@_huff_lengthlist_line_1024x27_1sub0 = internal global [32 x i64] [i64 2, i64 5, i64 5, i64 4, i64 5, i64 4, i64 5, i64 4, i64 5, i64 4, i64 6, i64 4, i64 6, i64 5, i64 6, i64 5, i64 7, i64 5, i64 7, i64 6, i64 8, i64 6, i64 8, i64 6, i64 8, i64 6, i64 9, i64 6, i64 10, i64 6, i64 10, i64 6], align 16
@_huff_lengthlist_line_1024x27_1sub1 = internal global [128 x i64] [i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 5, i64 10, i64 4, i64 10, i64 4, i64 9, i64 4, i64 9, i64 3, i64 9, i64 4, i64 9, i64 4, i64 9, i64 4, i64 9, i64 4, i64 9, i64 4, i64 9, i64 4, i64 8, i64 4, i64 8, i64 4, i64 8, i64 5, i64 9, i64 5, i64 9, i64 6, i64 8, i64 6, i64 9, i64 7, i64 10, i64 8, i64 10, i64 9, i64 10, i64 10, i64 10, i64 12, i64 11, i64 13, i64 12, i64 13, i64 13, i64 15, i64 13, i64 14, i64 13, i64 14, i64 12, i64 15, i64 13, i64 15, i64 14, i64 15, i64 13, i64 16, i64 14, i64 16, i64 14, i64 15, i64 14, i64 14, i64 14, i64 16, i64 15, i64 18, i64 15, i64 18, i64 16, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 17], align 16
@_huff_lengthlist_line_1024x27_2sub0 = internal global [32 x i64] [i64 1, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 6, i64 5, i64 6, i64 5, i64 6, i64 5, i64 6, i64 5, i64 6, i64 6, i64 7, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10], align 16
@_huff_lengthlist_line_1024x27_2sub1 = internal global [128 x i64] [i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 3, i64 3, i64 4, i64 3, i64 4, i64 4, i64 5, i64 4, i64 5, i64 5, i64 5, i64 5, i64 6, i64 5, i64 6, i64 6, i64 7, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 9, i64 8, i64 9, i64 8, i64 10, i64 8, i64 11, i64 8, i64 12, i64 9, i64 13, i64 9, i64 14, i64 9, i64 14, i64 8, i64 12, i64 8, i64 14, i64 9, i64 14, i64 8, i64 12, i64 8, i64 11, i64 8, i64 11, i64 8, i64 11, i64 9, i64 11, i64 10, i64 11, i64 10, i64 12, i64 10, i64 12, i64 11, i64 12, i64 12, i64 12, i64 12, i64 12, i64 11, i64 12, i64 11, i64 13, i64 11, i64 13, i64 12, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 13], align 16
@_huff_lengthlist_line_1024x27_3sub1 = internal global [18 x i64] [i64 0, i64 4, i64 5, i64 4, i64 5, i64 3, i64 5, i64 3, i64 5, i64 3, i64 5, i64 4, i64 4, i64 4, i64 5, i64 4, i64 5, i64 5], align 16
@_huff_lengthlist_line_1024x27_3sub2 = internal global [50 x i64] [i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 3, i64 3, i64 3, i64 3, i64 4, i64 4, i64 4, i64 5, i64 4, i64 6, i64 5, i64 6, i64 5, i64 7, i64 5, i64 9, i64 5, i64 10, i64 6, i64 11, i64 6, i64 12, i64 7, i64 13, i64 8, i64 15, i64 8, i64 15, i64 9, i64 15, i64 9, i64 15], align 16
@_huff_lengthlist_line_1024x27_3sub3 = internal global [128 x i64] [i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 2, i64 9, i64 2, i64 9, i64 2, i64 9, i64 4, i64 9, i64 6, i64 9, i64 7, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8], align 16
@_huff_lengthlist_line_1024x27_4sub1 = internal global [18 x i64] [i64 0, i64 4, i64 5, i64 4, i64 5, i64 4, i64 6, i64 3, i64 6, i64 3, i64 5, i64 3, i64 5, i64 3, i64 6, i64 4, i64 6, i64 4], align 16
@_huff_lengthlist_line_1024x27_4sub2 = internal global [50 x i64] [i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 2, i64 4, i64 2, i64 5, i64 3, i64 5, i64 4, i64 6, i64 6, i64 6, i64 6, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 10, i64 11], align 16
@_huff_lengthlist_line_1024x27_4sub3 = internal global [128 x i64] [i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 3, i64 3, i64 3, i64 6, i64 4, i64 6, i64 4, i64 5, i64 5, i64 7, i64 4, i64 8, i64 5, i64 9, i64 4, i64 9, i64 5, i64 9, i64 5, i64 9, i64 6, i64 9, i64 5, i64 9, i64 7, i64 9, i64 7, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9], align 16
@_huff_book_line_512x17_class1 = internal global %struct.static_codebook { i64 1, i64 8, ptr @_huff_lengthlist_line_512x17_class1, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_512x17_class2 = internal global %struct.static_codebook { i64 1, i64 64, ptr @_huff_lengthlist_line_512x17_class2, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_512x17_class3 = internal global %struct.static_codebook { i64 1, i64 64, ptr @_huff_lengthlist_line_512x17_class3, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_512x17_0sub0 = internal global %struct.static_codebook { i64 1, i64 128, ptr @_huff_lengthlist_line_512x17_0sub0, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_512x17_1sub0 = internal global %struct.static_codebook { i64 1, i64 32, ptr @_huff_lengthlist_line_512x17_1sub0, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_512x17_1sub1 = internal global %struct.static_codebook { i64 1, i64 128, ptr @_huff_lengthlist_line_512x17_1sub1, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_512x17_2sub1 = internal global %struct.static_codebook { i64 1, i64 18, ptr @_huff_lengthlist_line_512x17_2sub1, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_512x17_2sub2 = internal global %struct.static_codebook { i64 1, i64 50, ptr @_huff_lengthlist_line_512x17_2sub2, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_512x17_2sub3 = internal global %struct.static_codebook { i64 1, i64 128, ptr @_huff_lengthlist_line_512x17_2sub3, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_512x17_3sub1 = internal global %struct.static_codebook { i64 1, i64 18, ptr @_huff_lengthlist_line_512x17_3sub1, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_512x17_3sub2 = internal global %struct.static_codebook { i64 1, i64 50, ptr @_huff_lengthlist_line_512x17_3sub2, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book_line_512x17_3sub3 = internal global %struct.static_codebook { i64 1, i64 128, ptr @_huff_lengthlist_line_512x17_3sub3, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_lengthlist_line_512x17_class1 = internal global [8 x i64] [i64 1, i64 2, i64 3, i64 6, i64 5, i64 4, i64 7, i64 7], align 16
@_huff_lengthlist_line_512x17_class2 = internal global [64 x i64] [i64 3, i64 3, i64 3, i64 14, i64 5, i64 4, i64 4, i64 11, i64 8, i64 6, i64 6, i64 10, i64 17, i64 12, i64 11, i64 17, i64 6, i64 5, i64 5, i64 15, i64 5, i64 3, i64 4, i64 11, i64 8, i64 5, i64 5, i64 8, i64 16, i64 9, i64 10, i64 14, i64 10, i64 8, i64 9, i64 17, i64 8, i64 6, i64 6, i64 13, i64 10, i64 7, i64 7, i64 10, i64 16, i64 11, i64 13, i64 14, i64 17, i64 17, i64 17, i64 17, i64 17, i64 16, i64 16, i64 16, i64 16, i64 15, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16], align 16
@_huff_lengthlist_line_512x17_class3 = internal global [64 x i64] [i64 2, i64 4, i64 6, i64 17, i64 4, i64 5, i64 7, i64 17, i64 8, i64 7, i64 10, i64 17, i64 17, i64 17, i64 17, i64 17, i64 3, i64 4, i64 6, i64 15, i64 3, i64 3, i64 6, i64 15, i64 7, i64 6, i64 9, i64 17, i64 17, i64 17, i64 17, i64 17, i64 6, i64 8, i64 10, i64 17, i64 6, i64 6, i64 8, i64 16, i64 9, i64 8, i64 10, i64 17, i64 17, i64 15, i64 16, i64 17, i64 17, i64 17, i64 17, i64 17, i64 12, i64 15, i64 15, i64 16, i64 12, i64 15, i64 15, i64 16, i64 16, i64 16, i64 16, i64 16], align 16
@_huff_lengthlist_line_512x17_0sub0 = internal global [128 x i64] [i64 4, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 6, i64 5, i64 6, i64 6, i64 6, i64 6, i64 5, i64 6, i64 6, i64 7, i64 6, i64 7, i64 6, i64 7, i64 6, i64 7, i64 6, i64 8, i64 7, i64 8, i64 7, i64 8, i64 7, i64 8, i64 7, i64 8, i64 7, i64 9, i64 7, i64 9, i64 7, i64 9, i64 7, i64 9, i64 8, i64 9, i64 8, i64 10, i64 8, i64 10, i64 8, i64 10, i64 7, i64 10, i64 6, i64 10, i64 8, i64 10, i64 8, i64 11, i64 7, i64 10, i64 7, i64 11, i64 8, i64 11, i64 11, i64 12, i64 12, i64 11, i64 11, i64 12, i64 11, i64 13, i64 11, i64 13, i64 11, i64 13, i64 12, i64 15, i64 12, i64 13, i64 13, i64 14, i64 14, i64 14, i64 14, i64 14, i64 15, i64 15, i64 15, i64 16, i64 14, i64 17, i64 19, i64 19, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18], align 16
@_huff_lengthlist_line_512x17_1sub0 = internal global [32 x i64] [i64 2, i64 4, i64 5, i64 4, i64 5, i64 4, i64 5, i64 4, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 6, i64 5, i64 6, i64 5, i64 6, i64 6, i64 7, i64 6, i64 7, i64 6, i64 8, i64 7, i64 8, i64 7, i64 8, i64 7, i64 8, i64 7], align 16
@_huff_lengthlist_line_512x17_1sub1 = internal global [128 x i64] [i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 3, i64 5, i64 3, i64 5, i64 4, i64 5, i64 4, i64 5, i64 4, i64 5, i64 5, i64 5, i64 5, i64 6, i64 5, i64 6, i64 5, i64 7, i64 5, i64 8, i64 6, i64 8, i64 6, i64 8, i64 6, i64 8, i64 6, i64 8, i64 7, i64 9, i64 7, i64 9, i64 7, i64 11, i64 9, i64 11, i64 11, i64 12, i64 11, i64 14, i64 12, i64 14, i64 16, i64 14, i64 16, i64 13, i64 16, i64 14, i64 16, i64 12, i64 15, i64 13, i64 16, i64 14, i64 16, i64 13, i64 14, i64 12, i64 15, i64 13, i64 15, i64 13, i64 13, i64 13, i64 15, i64 12, i64 14, i64 14, i64 15, i64 13, i64 15, i64 12, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15], align 16
@_huff_lengthlist_line_512x17_2sub1 = internal global [18 x i64] [i64 0, i64 4, i64 5, i64 4, i64 4, i64 4, i64 5, i64 4, i64 4, i64 4, i64 5, i64 4, i64 5, i64 4, i64 5, i64 3, i64 5, i64 3], align 16
@_huff_lengthlist_line_512x17_2sub2 = internal global [50 x i64] [i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 3, i64 4, i64 3, i64 4, i64 4, i64 5, i64 4, i64 5, i64 4, i64 6, i64 4, i64 6, i64 5, i64 6, i64 5, i64 7, i64 5, i64 7, i64 6, i64 8, i64 6, i64 8, i64 6, i64 8, i64 7, i64 8, i64 7, i64 9, i64 7, i64 9, i64 8], align 16
@_huff_lengthlist_line_512x17_2sub3 = internal global [128 x i64] [i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 3, i64 3, i64 3, i64 3, i64 4, i64 3, i64 4, i64 4, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 7, i64 8, i64 8, i64 11, i64 8, i64 9, i64 9, i64 9, i64 10, i64 11, i64 11, i64 11, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10], align 16
@_huff_lengthlist_line_512x17_3sub1 = internal global [18 x i64] [i64 0, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 3, i64 4, i64 4, i64 4, i64 4, i64 4, i64 5, i64 4, i64 5, i64 5, i64 5], align 16
@_huff_lengthlist_line_512x17_3sub2 = internal global [50 x i64] [i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 2, i64 3, i64 3, i64 4, i64 3, i64 5, i64 4, i64 6, i64 4, i64 6, i64 5, i64 7, i64 6, i64 7, i64 6, i64 8, i64 6, i64 8, i64 7, i64 9, i64 8, i64 10, i64 8, i64 12, i64 9, i64 13, i64 10, i64 15, i64 10, i64 15, i64 11, i64 14], align 16
@_huff_lengthlist_line_512x17_3sub3 = internal global [128 x i64] [i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 8, i64 4, i64 8, i64 4, i64 8, i64 4, i64 8, i64 5, i64 8, i64 5, i64 8, i64 6, i64 8, i64 4, i64 8, i64 4, i64 8, i64 5, i64 8, i64 5, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7], align 16
@_floor = internal global <{ { i32, [31 x i32], <{ i32, [15 x i32] }>, <{ i32, [15 x i32] }>, [16 x i32], <{ [8 x i32], [15 x [8 x i32]] }>, i32, <{ i32, i32, i32, i32, i32, i32, [59 x i32] }>, float, float, float, float, float, i32 }, { i32, [31 x i32], <{ i32, [15 x i32] }>, <{ i32, [15 x i32] }>, [16 x i32], <{ [8 x i32], [15 x [8 x i32]] }>, i32, <{ i32, i32, i32, i32, i32, i32, [59 x i32] }>, float, float, float, float, float, i32 }, { i32, <{ i32, i32, [29 x i32] }>, <{ i32, i32, [14 x i32] }>, <{ i32, i32, [14 x i32] }>, <{ i32, i32, [14 x i32] }>, <{ [8 x i32], [8 x i32], [14 x [8 x i32]] }>, i32, <{ [9 x i32], [56 x i32] }>, float, float, float, float, float, i32 }, { i32, <{ i32, i32, [29 x i32] }>, <{ i32, i32, [14 x i32] }>, <{ i32, i32, [14 x i32] }>, <{ i32, i32, [14 x i32] }>, <{ [8 x i32], [8 x i32], [14 x [8 x i32]] }>, i32, <{ [9 x i32], [56 x i32] }>, float, float, float, float, float, i32 }, { i32, <{ i32, i32, i32, i32, [27 x i32] }>, <{ i32, i32, i32, i32, [12 x i32] }>, <{ i32, i32, i32, i32, [12 x i32] }>, <{ i32, i32, i32, i32, [12 x i32] }>, <{ [8 x i32], [8 x i32], [8 x i32], [8 x i32], [12 x [8 x i32]] }>, i32, <{ [13 x i32], [52 x i32] }>, float, float, float, float, float, i32 }, { i32, <{ i32, i32, i32, i32, i32, i32, [25 x i32] }>, <{ i32, i32, i32, i32, [12 x i32] }>, <{ i32, i32, i32, i32, [12 x i32] }>, <{ i32, i32, i32, i32, [12 x i32] }>, <{ [8 x i32], [8 x i32], [8 x i32], [8 x i32], [12 x [8 x i32]] }>, i32, <{ [19 x i32], [46 x i32] }>, float, float, float, float, float, i32 }, { i32, <{ i32, i32, i32, i32, i32, i32, [25 x i32] }>, <{ i32, i32, i32, i32, [12 x i32] }>, <{ i32, i32, i32, i32, [12 x i32] }>, <{ i32, i32, i32, i32, [12 x i32] }>, <{ [8 x i32], [8 x i32], [8 x i32], [8 x i32], [12 x [8 x i32]] }>, i32, <{ [19 x i32], [46 x i32] }>, float, float, float, float, float, i32 }, { i32, <{ [8 x i32], [23 x i32] }>, <{ i32, i32, i32, i32, i32, [11 x i32] }>, <{ i32, i32, i32, i32, i32, [11 x i32] }>, <{ i32, i32, i32, i32, i32, [11 x i32] }>, <{ [8 x i32], [8 x i32], [8 x i32], [8 x i32], [8 x i32], [11 x [8 x i32]] }>, i32, <{ [29 x i32], [36 x i32] }>, float, float, float, float, float, i32 }, { i32, <{ [8 x i32], [23 x i32] }>, <{ i32, i32, i32, i32, i32, [11 x i32] }>, <{ i32, i32, i32, i32, i32, [11 x i32] }>, <{ i32, i32, i32, i32, i32, [11 x i32] }>, <{ [8 x i32], [8 x i32], [8 x i32], [8 x i32], [8 x i32], [11 x [8 x i32]] }>, i32, <{ [29 x i32], [36 x i32] }>, float, float, float, float, float, i32 }, { i32, <{ i32, i32, i32, i32, i32, i32, [25 x i32] }>, <{ i32, i32, i32, i32, [12 x i32] }>, <{ i32, i32, i32, i32, [12 x i32] }>, <{ i32, i32, i32, i32, [12 x i32] }>, <{ [8 x i32], [8 x i32], [8 x i32], [8 x i32], [12 x [8 x i32]] }>, i32, <{ [19 x i32], [46 x i32] }>, float, float, float, float, float, i32 } }> <{ { i32, [31 x i32], <{ i32, [15 x i32] }>, <{ i32, [15 x i32] }>, [16 x i32], <{ [8 x i32], [15 x [8 x i32]] }>, i32, <{ i32, i32, i32, i32, i32, i32, [59 x i32] }>, float, float, float, float, float, i32 } { i32 1, [31 x i32] zeroinitializer, <{ i32, [15 x i32] }> <{ i32 4, [15 x i32] zeroinitializer }>, <{ i32, [15 x i32] }> <{ i32 2, [15 x i32] zeroinitializer }>, [16 x i32] zeroinitializer, <{ [8 x i32], [15 x [8 x i32]] }> <{ [8 x i32] [i32 1, i32 2, i32 3, i32 4, i32 0, i32 0, i32 0, i32 0], [15 x [8 x i32]] zeroinitializer }>, i32 4, <{ i32, i32, i32, i32, i32, i32, [59 x i32] }> <{ i32 0, i32 128, i32 33, i32 8, i32 16, i32 70, [59 x i32] zeroinitializer }>, float 6.000000e+01, float 3.000000e+01, float 5.000000e+02, float 1.000000e+00, float 1.800000e+01, i32 -1 }, { i32, [31 x i32], <{ i32, [15 x i32] }>, <{ i32, [15 x i32] }>, [16 x i32], <{ [8 x i32], [15 x [8 x i32]] }>, i32, <{ i32, i32, i32, i32, i32, i32, [59 x i32] }>, float, float, float, float, float, i32 } { i32 1, [31 x i32] zeroinitializer, <{ i32, [15 x i32] }> <{ i32 4, [15 x i32] zeroinitializer }>, <{ i32, [15 x i32] }> <{ i32 2, [15 x i32] zeroinitializer }>, [16 x i32] zeroinitializer, <{ [8 x i32], [15 x [8 x i32]] }> <{ [8 x i32] [i32 1, i32 2, i32 3, i32 4, i32 0, i32 0, i32 0, i32 0], [15 x [8 x i32]] zeroinitializer }>, i32 4, <{ i32, i32, i32, i32, i32, i32, [59 x i32] }> <{ i32 0, i32 256, i32 66, i32 16, i32 32, i32 140, [59 x i32] zeroinitializer }>, float 6.000000e+01, float 3.000000e+01, float 5.000000e+02, float 1.000000e+00, float 1.800000e+01, i32 -1 }, { i32, <{ i32, i32, [29 x i32] }>, <{ i32, i32, [14 x i32] }>, <{ i32, i32, [14 x i32] }>, <{ i32, i32, [14 x i32] }>, <{ [8 x i32], [8 x i32], [14 x [8 x i32]] }>, i32, <{ [9 x i32], [56 x i32] }>, float, float, float, float, float, i32 } { i32 2, <{ i32, i32, [29 x i32] }> <{ i32 0, i32 1, [29 x i32] zeroinitializer }>, <{ i32, i32, [14 x i32] }> <{ i32 3, i32 4, [14 x i32] zeroinitializer }>, <{ i32, i32, [14 x i32] }> <{ i32 2, i32 2, [14 x i32] zeroinitializer }>, <{ i32, i32, [14 x i32] }> <{ i32 0, i32 1, [14 x i32] zeroinitializer }>, <{ [8 x i32], [8 x i32], [14 x [8 x i32]] }> <{ [8 x i32] [i32 -1, i32 2, i32 3, i32 4, i32 0, i32 0, i32 0, i32 0], [8 x i32] [i32 -1, i32 5, i32 6, i32 7, i32 0, i32 0, i32 0, i32 0], [14 x [8 x i32]] zeroinitializer }>, i32 4, <{ [9 x i32], [56 x i32] }> <{ [9 x i32] [i32 0, i32 128, i32 14, i32 4, i32 58, i32 2, i32 8, i32 28, i32 90], [56 x i32] zeroinitializer }>, float 6.000000e+01, float 3.000000e+01, float 5.000000e+02, float 1.000000e+00, float 1.800000e+01, i32 -1 }, { i32, <{ i32, i32, [29 x i32] }>, <{ i32, i32, [14 x i32] }>, <{ i32, i32, [14 x i32] }>, <{ i32, i32, [14 x i32] }>, <{ [8 x i32], [8 x i32], [14 x [8 x i32]] }>, i32, <{ [9 x i32], [56 x i32] }>, float, float, float, float, float, i32 } { i32 2, <{ i32, i32, [29 x i32] }> <{ i32 0, i32 1, [29 x i32] zeroinitializer }>, <{ i32, i32, [14 x i32] }> <{ i32 3, i32 4, [14 x i32] zeroinitializer }>, <{ i32, i32, [14 x i32] }> <{ i32 2, i32 2, [14 x i32] zeroinitializer }>, <{ i32, i32, [14 x i32] }> <{ i32 0, i32 1, [14 x i32] zeroinitializer }>, <{ [8 x i32], [8 x i32], [14 x [8 x i32]] }> <{ [8 x i32] [i32 -1, i32 2, i32 3, i32 4, i32 0, i32 0, i32 0, i32 0], [8 x i32] [i32 -1, i32 5, i32 6, i32 7, i32 0, i32 0, i32 0, i32 0], [14 x [8 x i32]] zeroinitializer }>, i32 4, <{ [9 x i32], [56 x i32] }> <{ [9 x i32] [i32 0, i32 256, i32 28, i32 8, i32 116, i32 4, i32 16, i32 56, i32 180], [56 x i32] zeroinitializer }>, float 6.000000e+01, float 3.000000e+01, float 5.000000e+02, float 1.000000e+00, float 1.800000e+01, i32 -1 }, { i32, <{ i32, i32, i32, i32, [27 x i32] }>, <{ i32, i32, i32, i32, [12 x i32] }>, <{ i32, i32, i32, i32, [12 x i32] }>, <{ i32, i32, i32, i32, [12 x i32] }>, <{ [8 x i32], [8 x i32], [8 x i32], [8 x i32], [12 x [8 x i32]] }>, i32, <{ [13 x i32], [52 x i32] }>, float, float, float, float, float, i32 } { i32 4, <{ i32, i32, i32, i32, [27 x i32] }> <{ i32 0, i32 1, i32 2, i32 3, [27 x i32] zeroinitializer }>, <{ i32, i32, i32, i32, [12 x i32] }> <{ i32 2, i32 3, i32 3, i32 3, [12 x i32] zeroinitializer }>, <{ i32, i32, i32, i32, [12 x i32] }> <{ i32 0, i32 1, i32 2, i32 2, [12 x i32] zeroinitializer }>, <{ i32, i32, i32, i32, [12 x i32] }> <{ i32 -1, i32 0, i32 1, i32 2, [12 x i32] zeroinitializer }>, <{ [8 x i32], [8 x i32], [8 x i32], [8 x i32], [12 x [8 x i32]] }> <{ [8 x i32] [i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], [8 x i32] [i32 4, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], [8 x i32] [i32 -1, i32 6, i32 7, i32 8, i32 0, i32 0, i32 0, i32 0], [8 x i32] [i32 -1, i32 9, i32 10, i32 11, i32 0, i32 0, i32 0, i32 0], [12 x [8 x i32]] zeroinitializer }>, i32 2, <{ [13 x i32], [52 x i32] }> <{ [13 x i32] [i32 0, i32 128, i32 8, i32 33, i32 4, i32 16, i32 70, i32 2, i32 6, i32 12, i32 23, i32 46, i32 90], [52 x i32] zeroinitializer }>, float 6.000000e+01, float 3.000000e+01, float 5.000000e+02, float 1.000000e+00, float 1.800000e+01, i32 -1 }, { i32, <{ i32, i32, i32, i32, i32, i32, [25 x i32] }>, <{ i32, i32, i32, i32, [12 x i32] }>, <{ i32, i32, i32, i32, [12 x i32] }>, <{ i32, i32, i32, i32, [12 x i32] }>, <{ [8 x i32], [8 x i32], [8 x i32], [8 x i32], [12 x [8 x i32]] }>, i32, <{ [19 x i32], [46 x i32] }>, float, float, float, float, float, i32 } { i32 6, <{ i32, i32, i32, i32, i32, i32, [25 x i32] }> <{ i32 0, i32 1, i32 1, i32 2, i32 3, i32 3, [25 x i32] zeroinitializer }>, <{ i32, i32, i32, i32, [12 x i32] }> <{ i32 2, i32 3, i32 3, i32 3, [12 x i32] zeroinitializer }>, <{ i32, i32, i32, i32, [12 x i32] }> <{ i32 0, i32 1, i32 2, i32 2, [12 x i32] zeroinitializer }>, <{ i32, i32, i32, i32, [12 x i32] }> <{ i32 -1, i32 0, i32 1, i32 2, [12 x i32] zeroinitializer }>, <{ [8 x i32], [8 x i32], [8 x i32], [8 x i32], [12 x [8 x i32]] }> <{ [8 x i32] [i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], [8 x i32] [i32 4, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], [8 x i32] [i32 -1, i32 6, i32 7, i32 8, i32 0, i32 0, i32 0, i32 0], [8 x i32] [i32 -1, i32 9, i32 10, i32 11, i32 0, i32 0, i32 0, i32 0], [12 x [8 x i32]] zeroinitializer }>, i32 2, <{ [19 x i32], [46 x i32] }> <{ [19 x i32] [i32 0, i32 128, i32 12, i32 46, i32 4, i32 8, i32 16, i32 23, i32 33, i32 70, i32 2, i32 6, i32 10, i32 14, i32 19, i32 28, i32 39, i32 58, i32 90], [46 x i32] zeroinitializer }>, float 6.000000e+01, float 3.000000e+01, float 5.000000e+02, float 1.000000e+00, float 1.800000e+01, i32 -1 }, { i32, <{ i32, i32, i32, i32, i32, i32, [25 x i32] }>, <{ i32, i32, i32, i32, [12 x i32] }>, <{ i32, i32, i32, i32, [12 x i32] }>, <{ i32, i32, i32, i32, [12 x i32] }>, <{ [8 x i32], [8 x i32], [8 x i32], [8 x i32], [12 x [8 x i32]] }>, i32, <{ [19 x i32], [46 x i32] }>, float, float, float, float, float, i32 } { i32 6, <{ i32, i32, i32, i32, i32, i32, [25 x i32] }> <{ i32 0, i32 1, i32 1, i32 2, i32 3, i32 3, [25 x i32] zeroinitializer }>, <{ i32, i32, i32, i32, [12 x i32] }> <{ i32 2, i32 3, i32 3, i32 3, [12 x i32] zeroinitializer }>, <{ i32, i32, i32, i32, [12 x i32] }> <{ i32 0, i32 1, i32 2, i32 2, [12 x i32] zeroinitializer }>, <{ i32, i32, i32, i32, [12 x i32] }> <{ i32 -1, i32 0, i32 1, i32 2, [12 x i32] zeroinitializer }>, <{ [8 x i32], [8 x i32], [8 x i32], [8 x i32], [12 x [8 x i32]] }> <{ [8 x i32] [i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], [8 x i32] [i32 4, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], [8 x i32] [i32 -1, i32 6, i32 7, i32 8, i32 0, i32 0, i32 0, i32 0], [8 x i32] [i32 -1, i32 9, i32 10, i32 11, i32 0, i32 0, i32 0, i32 0], [12 x [8 x i32]] zeroinitializer }>, i32 2, <{ [19 x i32], [46 x i32] }> <{ [19 x i32] [i32 0, i32 1024, i32 93, i32 372, i32 33, i32 65, i32 130, i32 186, i32 260, i32 556, i32 14, i32 46, i32 79, i32 111, i32 158, i32 220, i32 312, i32 464, i32 720], [46 x i32] zeroinitializer }>, float 6.000000e+01, float 3.000000e+01, float 5.000000e+02, float 1.000000e+00, float 1.800000e+01, i32 -1 }, { i32, <{ [8 x i32], [23 x i32] }>, <{ i32, i32, i32, i32, i32, [11 x i32] }>, <{ i32, i32, i32, i32, i32, [11 x i32] }>, <{ i32, i32, i32, i32, i32, [11 x i32] }>, <{ [8 x i32], [8 x i32], [8 x i32], [8 x i32], [8 x i32], [11 x [8 x i32]] }>, i32, <{ [29 x i32], [36 x i32] }>, float, float, float, float, float, i32 } { i32 8, <{ [8 x i32], [23 x i32] }> <{ [8 x i32] [i32 0, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4], [23 x i32] zeroinitializer }>, <{ i32, i32, i32, i32, i32, [11 x i32] }> <{ i32 3, i32 4, i32 3, i32 4, i32 3, [11 x i32] zeroinitializer }>, <{ i32, i32, i32, i32, i32, [11 x i32] }> <{ i32 0, i32 1, i32 1, i32 2, i32 2, [11 x i32] zeroinitializer }>, <{ i32, i32, i32, i32, i32, [11 x i32] }> <{ i32 -1, i32 0, i32 1, i32 2, i32 3, [11 x i32] zeroinitializer }>, <{ [8 x i32], [8 x i32], [8 x i32], [8 x i32], [8 x i32], [11 x [8 x i32]] }> <{ [8 x i32] [i32 4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], [8 x i32] [i32 5, i32 6, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], [8 x i32] [i32 7, i32 8, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], [8 x i32] [i32 -1, i32 9, i32 10, i32 11, i32 0, i32 0, i32 0, i32 0], [8 x i32] [i32 -1, i32 12, i32 13, i32 14, i32 0, i32 0, i32 0, i32 0], [11 x [8 x i32]] zeroinitializer }>, i32 2, <{ [29 x i32], [36 x i32] }> <{ [29 x i32] [i32 0, i32 1024, i32 93, i32 23, i32 372, i32 6, i32 46, i32 186, i32 750, i32 14, i32 33, i32 65, i32 130, i32 260, i32 556, i32 3, i32 10, i32 18, i32 28, i32 39, i32 55, i32 79, i32 111, i32 158, i32 220, i32 312, i32 464, i32 650, i32 850], [36 x i32] zeroinitializer }>, float 6.000000e+01, float 3.000000e+01, float 5.000000e+02, float 3.000000e+00, float 1.800000e+01, i32 -1 }, { i32, <{ [8 x i32], [23 x i32] }>, <{ i32, i32, i32, i32, i32, [11 x i32] }>, <{ i32, i32, i32, i32, i32, [11 x i32] }>, <{ i32, i32, i32, i32, i32, [11 x i32] }>, <{ [8 x i32], [8 x i32], [8 x i32], [8 x i32], [8 x i32], [11 x [8 x i32]] }>, i32, <{ [29 x i32], [36 x i32] }>, float, float, float, float, float, i32 } { i32 8, <{ [8 x i32], [23 x i32] }> <{ [8 x i32] [i32 0, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4], [23 x i32] zeroinitializer }>, <{ i32, i32, i32, i32, i32, [11 x i32] }> <{ i32 3, i32 4, i32 3, i32 4, i32 3, [11 x i32] zeroinitializer }>, <{ i32, i32, i32, i32, i32, [11 x i32] }> <{ i32 0, i32 1, i32 1, i32 2, i32 2, [11 x i32] zeroinitializer }>, <{ i32, i32, i32, i32, i32, [11 x i32] }> <{ i32 -1, i32 0, i32 1, i32 2, i32 3, [11 x i32] zeroinitializer }>, <{ [8 x i32], [8 x i32], [8 x i32], [8 x i32], [8 x i32], [11 x [8 x i32]] }> <{ [8 x i32] [i32 4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], [8 x i32] [i32 5, i32 6, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], [8 x i32] [i32 7, i32 8, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], [8 x i32] [i32 -1, i32 9, i32 10, i32 11, i32 0, i32 0, i32 0, i32 0], [8 x i32] [i32 -1, i32 12, i32 13, i32 14, i32 0, i32 0, i32 0, i32 0], [11 x [8 x i32]] zeroinitializer }>, i32 2, <{ [29 x i32], [36 x i32] }> <{ [29 x i32] [i32 0, i32 2048, i32 186, i32 46, i32 744, i32 12, i32 92, i32 372, i32 1500, i32 28, i32 66, i32 130, i32 260, i32 520, i32 1112, i32 6, i32 20, i32 36, i32 56, i32 78, i32 110, i32 158, i32 222, i32 316, i32 440, i32 624, i32 928, i32 1300, i32 1700], [36 x i32] zeroinitializer }>, float 6.000000e+01, float 3.000000e+01, float 5.000000e+02, float 3.000000e+00, float 1.800000e+01, i32 -1 }, { i32, <{ i32, i32, i32, i32, i32, i32, [25 x i32] }>, <{ i32, i32, i32, i32, [12 x i32] }>, <{ i32, i32, i32, i32, [12 x i32] }>, <{ i32, i32, i32, i32, [12 x i32] }>, <{ [8 x i32], [8 x i32], [8 x i32], [8 x i32], [12 x [8 x i32]] }>, i32, <{ [19 x i32], [46 x i32] }>, float, float, float, float, float, i32 } { i32 6, <{ i32, i32, i32, i32, i32, i32, [25 x i32] }> <{ i32 0, i32 1, i32 1, i32 2, i32 3, i32 3, [25 x i32] zeroinitializer }>, <{ i32, i32, i32, i32, [12 x i32] }> <{ i32 2, i32 3, i32 3, i32 3, [12 x i32] zeroinitializer }>, <{ i32, i32, i32, i32, [12 x i32] }> <{ i32 0, i32 1, i32 2, i32 2, [12 x i32] zeroinitializer }>, <{ i32, i32, i32, i32, [12 x i32] }> <{ i32 -1, i32 0, i32 1, i32 2, [12 x i32] zeroinitializer }>, <{ [8 x i32], [8 x i32], [8 x i32], [8 x i32], [12 x [8 x i32]] }> <{ [8 x i32] [i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], [8 x i32] [i32 4, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], [8 x i32] [i32 -1, i32 6, i32 7, i32 8, i32 0, i32 0, i32 0, i32 0], [8 x i32] [i32 -1, i32 9, i32 10, i32 11, i32 0, i32 0, i32 0, i32 0], [12 x [8 x i32]] zeroinitializer }>, i32 2, <{ [19 x i32], [46 x i32] }> <{ [19 x i32] [i32 0, i32 512, i32 46, i32 186, i32 16, i32 33, i32 65, i32 93, i32 130, i32 278, i32 7, i32 23, i32 39, i32 55, i32 79, i32 110, i32 156, i32 232, i32 360], [46 x i32] zeroinitializer }>, float 6.000000e+01, float 3.000000e+01, float 5.000000e+02, float 1.000000e+00, float 1.800000e+01, i32 -1 } }>, align 16
@_res_44s_0 = internal global [2 x %struct.vorbis_residue_template] [%struct.vorbis_residue_template { i32 2, i32 0, ptr @_residue_44_mid, ptr @_huff_book__44c0_s_short, ptr @_huff_book__44c0_sm_short, ptr @_resbook_44s_0, ptr @_resbook_44sm_0 }, %struct.vorbis_residue_template { i32 2, i32 0, ptr @_residue_44_mid, ptr @_huff_book__44c0_s_long, ptr @_huff_book__44c0_sm_long, ptr @_resbook_44s_0, ptr @_resbook_44sm_0 }], align 16
@_res_44s_1 = internal global [2 x %struct.vorbis_residue_template] [%struct.vorbis_residue_template { i32 2, i32 0, ptr @_residue_44_mid, ptr @_huff_book__44c1_s_short, ptr @_huff_book__44c1_sm_short, ptr @_resbook_44s_1, ptr @_resbook_44sm_1 }, %struct.vorbis_residue_template { i32 2, i32 0, ptr @_residue_44_mid, ptr @_huff_book__44c1_s_long, ptr @_huff_book__44c1_sm_long, ptr @_resbook_44s_1, ptr @_resbook_44sm_1 }], align 16
@_res_44s_2 = internal global [2 x %struct.vorbis_residue_template] [%struct.vorbis_residue_template { i32 2, i32 0, ptr @_residue_44_mid, ptr @_huff_book__44c2_s_short, ptr @_huff_book__44c2_s_short, ptr @_resbook_44s_2, ptr @_resbook_44s_2 }, %struct.vorbis_residue_template { i32 2, i32 0, ptr @_residue_44_mid, ptr @_huff_book__44c2_s_long, ptr @_huff_book__44c2_s_long, ptr @_resbook_44s_2, ptr @_resbook_44s_2 }], align 16
@_res_44s_3 = internal global [2 x %struct.vorbis_residue_template] [%struct.vorbis_residue_template { i32 2, i32 0, ptr @_residue_44_mid, ptr @_huff_book__44c3_s_short, ptr @_huff_book__44c3_s_short, ptr @_resbook_44s_3, ptr @_resbook_44s_3 }, %struct.vorbis_residue_template { i32 2, i32 0, ptr @_residue_44_mid, ptr @_huff_book__44c3_s_long, ptr @_huff_book__44c3_s_long, ptr @_resbook_44s_3, ptr @_resbook_44s_3 }], align 16
@_res_44s_4 = internal global [2 x %struct.vorbis_residue_template] [%struct.vorbis_residue_template { i32 2, i32 0, ptr @_residue_44_mid, ptr @_huff_book__44c4_s_short, ptr @_huff_book__44c4_s_short, ptr @_resbook_44s_4, ptr @_resbook_44s_4 }, %struct.vorbis_residue_template { i32 2, i32 0, ptr @_residue_44_mid, ptr @_huff_book__44c4_s_long, ptr @_huff_book__44c4_s_long, ptr @_resbook_44s_4, ptr @_resbook_44s_4 }], align 16
@_res_44s_5 = internal global [2 x %struct.vorbis_residue_template] [%struct.vorbis_residue_template { i32 2, i32 0, ptr @_residue_44_mid, ptr @_huff_book__44c5_s_short, ptr @_huff_book__44c5_s_short, ptr @_resbook_44s_5, ptr @_resbook_44s_5 }, %struct.vorbis_residue_template { i32 2, i32 0, ptr @_residue_44_mid, ptr @_huff_book__44c5_s_long, ptr @_huff_book__44c5_s_long, ptr @_resbook_44s_5, ptr @_resbook_44s_5 }], align 16
@_res_44s_6 = internal global [2 x %struct.vorbis_residue_template] [%struct.vorbis_residue_template { i32 2, i32 0, ptr @_residue_44_high, ptr @_huff_book__44c6_s_short, ptr @_huff_book__44c6_s_short, ptr @_resbook_44s_6, ptr @_resbook_44s_6 }, %struct.vorbis_residue_template { i32 2, i32 0, ptr @_residue_44_high, ptr @_huff_book__44c6_s_long, ptr @_huff_book__44c6_s_long, ptr @_resbook_44s_6, ptr @_resbook_44s_6 }], align 16
@_res_44s_7 = internal global [2 x %struct.vorbis_residue_template] [%struct.vorbis_residue_template { i32 2, i32 0, ptr @_residue_44_high, ptr @_huff_book__44c7_s_short, ptr @_huff_book__44c7_s_short, ptr @_resbook_44s_7, ptr @_resbook_44s_7 }, %struct.vorbis_residue_template { i32 2, i32 0, ptr @_residue_44_high, ptr @_huff_book__44c7_s_long, ptr @_huff_book__44c7_s_long, ptr @_resbook_44s_7, ptr @_resbook_44s_7 }], align 16
@_res_44s_8 = internal global [2 x %struct.vorbis_residue_template] [%struct.vorbis_residue_template { i32 2, i32 0, ptr @_residue_44_high, ptr @_huff_book__44c8_s_short, ptr @_huff_book__44c8_s_short, ptr @_resbook_44s_8, ptr @_resbook_44s_8 }, %struct.vorbis_residue_template { i32 2, i32 0, ptr @_residue_44_high, ptr @_huff_book__44c8_s_long, ptr @_huff_book__44c8_s_long, ptr @_resbook_44s_8, ptr @_resbook_44s_8 }], align 16
@_res_44s_9 = internal global [2 x %struct.vorbis_residue_template] [%struct.vorbis_residue_template { i32 2, i32 0, ptr @_residue_44_high, ptr @_huff_book__44c9_s_short, ptr @_huff_book__44c9_s_short, ptr @_resbook_44s_9, ptr @_resbook_44s_9 }, %struct.vorbis_residue_template { i32 2, i32 0, ptr @_residue_44_high, ptr @_huff_book__44c9_s_long, ptr @_huff_book__44c9_s_long, ptr @_resbook_44s_9, ptr @_resbook_44s_9 }], align 16
@_map_nominal = internal global <{ { i32, [256 x i32], [16 x i32], [16 x i32], i32, [256 x i32], <{ i32, [255 x i32] }> }, { i32, [256 x i32], <{ i32, [15 x i32] }>, <{ i32, [15 x i32] }>, i32, [256 x i32], <{ i32, [255 x i32] }> } }> <{ { i32, [256 x i32], [16 x i32], [16 x i32], i32, [256 x i32], <{ i32, [255 x i32] }> } { i32 1, [256 x i32] zeroinitializer, [16 x i32] zeroinitializer, [16 x i32] zeroinitializer, i32 1, [256 x i32] zeroinitializer, <{ i32, [255 x i32] }> <{ i32 1, [255 x i32] zeroinitializer }> }, { i32, [256 x i32], <{ i32, [15 x i32] }>, <{ i32, [15 x i32] }>, i32, [256 x i32], <{ i32, [255 x i32] }> } { i32 1, [256 x i32] zeroinitializer, <{ i32, [15 x i32] }> <{ i32 1, [15 x i32] zeroinitializer }>, <{ i32, [15 x i32] }> <{ i32 1, [15 x i32] zeroinitializer }>, i32 1, [256 x i32] zeroinitializer, <{ i32, [255 x i32] }> <{ i32 1, [255 x i32] zeroinitializer }> } }>, align 16
@_huff_book__44c0_s_short = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__44c0_s_short, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book__44c0_sm_short = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__44c0_sm_short, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_resbook_44s_0 = internal global %struct.static_bookblock { [12 x [3 x ptr]] [[3 x ptr] zeroinitializer, [3 x ptr] [ptr null, ptr null, ptr @_44c0_s_p1_0], [3 x ptr] [ptr null, ptr null, ptr @_44c0_s_p2_0], [3 x ptr] [ptr null, ptr null, ptr @_44c0_s_p3_0], [3 x ptr] [ptr null, ptr null, ptr @_44c0_s_p4_0], [3 x ptr] [ptr null, ptr null, ptr @_44c0_s_p5_0], [3 x ptr] [ptr null, ptr null, ptr @_44c0_s_p6_0], [3 x ptr] [ptr @_44c0_s_p7_0, ptr @_44c0_s_p7_1, ptr null], [3 x ptr] [ptr @_44c0_s_p8_0, ptr @_44c0_s_p8_1, ptr null], [3 x ptr] [ptr @_44c0_s_p9_0, ptr @_44c0_s_p9_1, ptr @_44c0_s_p9_2], [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer] }, align 8
@_resbook_44sm_0 = internal global %struct.static_bookblock { [12 x [3 x ptr]] [[3 x ptr] zeroinitializer, [3 x ptr] [ptr null, ptr null, ptr @_44c0_sm_p1_0], [3 x ptr] [ptr null, ptr null, ptr @_44c0_sm_p2_0], [3 x ptr] [ptr null, ptr null, ptr @_44c0_sm_p3_0], [3 x ptr] [ptr null, ptr null, ptr @_44c0_sm_p4_0], [3 x ptr] [ptr null, ptr null, ptr @_44c0_sm_p5_0], [3 x ptr] [ptr null, ptr null, ptr @_44c0_sm_p6_0], [3 x ptr] [ptr @_44c0_sm_p7_0, ptr @_44c0_sm_p7_1, ptr null], [3 x ptr] [ptr @_44c0_sm_p8_0, ptr @_44c0_sm_p8_1, ptr null], [3 x ptr] [ptr @_44c0_sm_p9_0, ptr @_44c0_sm_p9_1, ptr @_44c0_sm_p9_2], [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer] }, align 8
@_huff_book__44c0_s_long = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__44c0_s_long, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book__44c0_sm_long = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__44c0_sm_long, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_residue_44_mid = internal global { i64, i64, i32, i32, i32, [64 x i32], <{ i32, [255 x i32] }>, <{ [9 x float], [55 x float] }>, <{ [9 x float], [55 x float] }> } { i64 0, i64 -1, i32 -1, i32 10, i32 -1, [64 x i32] zeroinitializer, <{ i32, [255 x i32] }> <{ i32 -1, [255 x i32] zeroinitializer }>, <{ [9 x float], [55 x float] }> <{ [9 x float] [float 5.000000e-01, float 1.500000e+00, float 1.500000e+00, float 2.500000e+00, float 2.500000e+00, float 4.500000e+00, float 8.500000e+00, float 1.650000e+01, float 3.250000e+01], [55 x float] zeroinitializer }>, <{ [9 x float], [55 x float] }> <{ [9 x float] [float 5.000000e-01, float 5.000000e-01, float 9.990000e+02, float 5.000000e-01, float 9.990000e+02, float 4.500000e+00, float 8.500000e+00, float 1.650000e+01, float 3.250000e+01], [55 x float] zeroinitializer }> }, align 8
@_huff_lengthlist__44c0_s_short = internal global [100 x i64] [i64 6, i64 8, i64 17, i64 12, i64 12, i64 12, i64 14, i64 15, i64 17, i64 16, i64 5, i64 1, i64 16, i64 5, i64 6, i64 6, i64 9, i64 12, i64 14, i64 13, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 9, i64 4, i64 16, i64 6, i64 9, i64 7, i64 10, i64 14, i64 14, i64 14, i64 8, i64 5, i64 16, i64 8, i64 6, i64 7, i64 10, i64 13, i64 15, i64 16, i64 9, i64 6, i64 16, i64 7, i64 7, i64 7, i64 10, i64 12, i64 15, i64 14, i64 10, i64 8, i64 16, i64 9, i64 9, i64 9, i64 10, i64 12, i64 15, i64 14, i64 13, i64 7, i64 16, i64 8, i64 7, i64 7, i64 10, i64 12, i64 14, i64 13, i64 15, i64 6, i64 16, i64 7, i64 5, i64 5, i64 7, i64 9, i64 13, i64 16, i64 14, i64 7, i64 16, i64 8, i64 6, i64 6, i64 8, i64 9, i64 11, i64 14], align 16
@_huff_lengthlist__44c0_sm_short = internal global [100 x i64] [i64 5, i64 7, i64 12, i64 12, i64 13, i64 13, i64 13, i64 15, i64 16, i64 18, i64 4, i64 2, i64 11, i64 5, i64 9, i64 7, i64 9, i64 12, i64 13, i64 14, i64 13, i64 7, i64 8, i64 9, i64 8, i64 9, i64 11, i64 13, i64 19, i64 19, i64 9, i64 4, i64 12, i64 5, i64 10, i64 7, i64 9, i64 12, i64 15, i64 14, i64 11, i64 6, i64 7, i64 7, i64 5, i64 6, i64 8, i64 11, i64 15, i64 17, i64 10, i64 5, i64 8, i64 6, i64 6, i64 5, i64 6, i64 9, i64 14, i64 14, i64 10, i64 5, i64 9, i64 7, i64 7, i64 6, i64 6, i64 9, i64 12, i64 14, i64 12, i64 6, i64 10, i64 7, i64 7, i64 7, i64 8, i64 9, i64 13, i64 14, i64 14, i64 7, i64 9, i64 7, i64 5, i64 5, i64 6, i64 9, i64 11, i64 13, i64 14, i64 9, i64 10, i64 9, i64 6, i64 6, i64 7, i64 8, i64 10, i64 13], align 16
@_44c0_s_p1_0 = internal global %struct.static_codebook { i64 8, i64 6561, ptr @_vq_lengthlist__44c0_s_p1_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__44c0_s_p1_0, ptr null, ptr @_vq_auxt__44c0_s_p1_0, ptr null, i32 0 }, align 8
@_44c0_s_p2_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__44c0_s_p2_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44c0_s_p2_0, ptr null, ptr @_vq_auxt__44c0_s_p2_0, ptr null, i32 0 }, align 8
@_44c0_s_p3_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__44c0_s_p3_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44c0_s_p3_0, ptr null, ptr @_vq_auxt__44c0_s_p3_0, ptr null, i32 0 }, align 8
@_44c0_s_p4_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__44c0_s_p4_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44c0_s_p4_0, ptr null, ptr @_vq_auxt__44c0_s_p4_0, ptr null, i32 0 }, align 8
@_44c0_s_p5_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__44c0_s_p5_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44c0_s_p5_0, ptr null, ptr @_vq_auxt__44c0_s_p5_0, ptr null, i32 0 }, align 8
@_44c0_s_p6_0 = internal global %struct.static_codebook { i64 2, i64 289, ptr @_vq_lengthlist__44c0_s_p6_0, i32 1, i64 -529530880, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__44c0_s_p6_0, ptr null, ptr @_vq_auxt__44c0_s_p6_0, ptr null, i32 0 }, align 8
@_44c0_s_p7_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__44c0_s_p7_0, i32 1, i64 -529137664, i64 1618345984, i32 2, i32 0, ptr @_vq_quantlist__44c0_s_p7_0, ptr null, ptr @_vq_auxt__44c0_s_p7_0, ptr null, i32 0 }, align 8
@_44c0_s_p7_1 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__44c0_s_p7_1, i32 1, i64 -531365888, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44c0_s_p7_1, ptr null, ptr @_vq_auxt__44c0_s_p7_1, ptr null, i32 0 }, align 8
@_44c0_s_p8_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44c0_s_p8_0, i32 1, i64 -526516224, i64 1616117760, i32 4, i32 0, ptr @_vq_quantlist__44c0_s_p8_0, ptr null, ptr @_vq_auxt__44c0_s_p8_0, ptr null, i32 0 }, align 8
@_44c0_s_p8_1 = internal global %struct.static_codebook { i64 2, i64 25, ptr @_vq_lengthlist__44c0_s_p8_1, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44c0_s_p8_1, ptr null, ptr @_vq_auxt__44c0_s_p8_1, ptr null, i32 0 }, align 8
@_44c0_s_p9_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__44c0_s_p9_0, i32 1, i64 -518283264, i64 1627103232, i32 3, i32 0, ptr @_vq_quantlist__44c0_s_p9_0, ptr null, ptr @_vq_auxt__44c0_s_p9_0, ptr null, i32 0 }, align 8
@_44c0_s_p9_1 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44c0_s_p9_1, i32 1, i64 -522616832, i64 1620115456, i32 4, i32 0, ptr @_vq_quantlist__44c0_s_p9_1, ptr null, ptr @_vq_auxt__44c0_s_p9_1, ptr null, i32 0 }, align 8
@_44c0_s_p9_2 = internal global %struct.static_codebook { i64 2, i64 289, ptr @_vq_lengthlist__44c0_s_p9_2, i32 1, i64 -529530880, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__44c0_s_p9_2, ptr null, ptr @_vq_auxt__44c0_s_p9_2, ptr null, i32 0 }, align 8
@_vq_quantlist__44c0_s_p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44c0_s_p1_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c0_s_p1_0, ptr @_vq_quantmap__44c0_s_p1_0, i32 3, i32 3 }, align 8
@_vq_lengthlist__44c0_s_p1_0 = internal global <{ [1641 x i64], [4920 x i64] }> <{ [1641 x i64] [i64 1, i64 5, i64 5, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 8, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 8, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 11, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 11, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 10, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 10, i64 11, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 11, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 11, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 11, i64 10], [4920 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c0_s_p1_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__44c0_s_p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44c0_s_p2_0 = internal global [625 x i64] zeroinitializer, align 16
@_vq_quantlist__44c0_s_p2_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44c0_s_p2_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c0_s_p2_0, ptr @_vq_quantmap__44c0_s_p2_0, i32 5, i32 5 }, align 8
@_vq_quantthresh__44c0_s_p2_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44c0_s_p2_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_quantlist__44c0_s_p3_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44c0_s_p3_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c0_s_p3_0, ptr @_vq_quantmap__44c0_s_p3_0, i32 5, i32 5 }, align 8
@_vq_lengthlist__44c0_s_p3_0 = internal global <{ [105 x i64], [520 x i64] }> <{ [105 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 5, i64 5, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 5, i64 5, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 7, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 7, i64 7, i64 9, i64 9], [520 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c0_s_p3_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44c0_s_p3_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_quantlist__44c0_s_p4_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__44c0_s_p4_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c0_s_p4_0, ptr @_vq_quantmap__44c0_s_p4_0, i32 9, i32 9 }, align 8
@_vq_lengthlist__44c0_s_p4_0 = internal global <{ [68 x i64], [13 x i64] }> <{ [68 x i64] [i64 1, i64 3, i64 2, i64 8, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9], [13 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c0_s_p4_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__44c0_s_p4_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__44c0_s_p5_0 = internal global [81 x i64] [i64 1, i64 3, i64 3, i64 6, i64 6, i64 6, i64 6, i64 8, i64 8, i64 0, i64 0, i64 0, i64 6, i64 7, i64 7, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 7, i64 7, i64 7, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 10, i64 9, i64 0, i64 0, i64 0, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 10, i64 9, i64 9, i64 9, i64 11, i64 11, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 11, i64 11], align 16
@_vq_quantlist__44c0_s_p5_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__44c0_s_p5_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c0_s_p5_0, ptr @_vq_quantmap__44c0_s_p5_0, i32 9, i32 9 }, align 8
@_vq_quantthresh__44c0_s_p5_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__44c0_s_p5_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__44c0_s_p6_0 = internal global [289 x i64] [i64 1, i64 3, i64 4, i64 6, i64 6, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 8, i64 8, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 10, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 13, i64 14, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 13, i64 14], align 16
@_vq_quantlist__44c0_s_p6_0 = internal global [17 x i64] [i64 8, i64 7, i64 9, i64 6, i64 10, i64 5, i64 11, i64 4, i64 12, i64 3, i64 13, i64 2, i64 14, i64 1, i64 15, i64 0, i64 16], align 16
@_vq_auxt__44c0_s_p6_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c0_s_p6_0, ptr @_vq_quantmap__44c0_s_p6_0, i32 17, i32 17 }, align 8
@_vq_quantthresh__44c0_s_p6_0 = internal global [16 x float] [float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00], align 16
@_vq_quantmap__44c0_s_p6_0 = internal global [17 x i64] [i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16], align 16
@_vq_lengthlist__44c0_s_p7_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 6, i64 7, i64 6, i64 6, i64 4, i64 7, i64 7, i64 10, i64 9, i64 9, i64 10, i64 9, i64 9, i64 4, i64 7, i64 7, i64 10, i64 9, i64 9, i64 11, i64 9, i64 9, i64 7, i64 10, i64 10, i64 10, i64 11, i64 10, i64 11, i64 10, i64 10, i64 6, i64 9, i64 9, i64 11, i64 10, i64 10, i64 11, i64 9, i64 10, i64 6, i64 9, i64 9, i64 11, i64 10, i64 10, i64 11, i64 9, i64 9, i64 7, i64 10, i64 10, i64 11, i64 11, i64 11, i64 12, i64 11, i64 11, i64 7, i64 9, i64 9, i64 10, i64 9, i64 9, i64 11, i64 11, i64 10, i64 7, i64 9, i64 9, i64 10, i64 10, i64 10, i64 12, i64 10, i64 11], align 16
@_vq_quantlist__44c0_s_p7_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44c0_s_p7_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c0_s_p7_0, ptr @_vq_quantmap__44c0_s_p7_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__44c0_s_p7_0 = internal global [2 x float] [float -5.500000e+00, float 5.500000e+00], align 4
@_vq_quantmap__44c0_s_p7_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44c0_s_p7_1 = internal global [121 x i64] [i64 2, i64 3, i64 3, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 10, i64 9, i64 9, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 10, i64 9, i64 10, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 8, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 8, i64 8, i64 9, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8], align 16
@_vq_quantlist__44c0_s_p7_1 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__44c0_s_p7_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c0_s_p7_1, ptr @_vq_quantmap__44c0_s_p7_1, i32 11, i32 11 }, align 8
@_vq_quantthresh__44c0_s_p7_1 = internal global [10 x float] [float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00], align 16
@_vq_quantmap__44c0_s_p7_1 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_lengthlist__44c0_s_p8_0 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 10, i64 9, i64 7, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 7, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 0, i64 8, i64 8, i64 8, i64 8, i64 9, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 0, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 0, i64 12, i64 12, i64 9, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 12, i64 11, i64 0, i64 13, i64 13, i64 9, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 0, i64 0, i64 0, i64 10, i64 10, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 10, i64 10, i64 9, i64 8, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 13, i64 13, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 0, i64 0, i64 0, i64 15, i64 15, i64 10, i64 10, i64 11, i64 9, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 12, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 12, i64 12, i64 11, i64 11, i64 12, i64 11, i64 14, i64 13], align 16
@_vq_quantlist__44c0_s_p8_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44c0_s_p8_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c0_s_p8_0, ptr @_vq_quantmap__44c0_s_p8_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__44c0_s_p8_0 = internal global [12 x float] [float -2.750000e+01, float -2.250000e+01, float -1.750000e+01, float -1.250000e+01, float -7.500000e+00, float -2.500000e+00, float 2.500000e+00, float 7.500000e+00, float 1.250000e+01, float 1.750000e+01, float 2.250000e+01, float 2.750000e+01], align 16
@_vq_quantmap__44c0_s_p8_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44c0_s_p8_1 = internal global [25 x i64] [i64 2, i64 3, i64 4, i64 4, i64 4, i64 6, i64 6, i64 6, i64 5, i64 5, i64 6, i64 6, i64 6, i64 5, i64 5, i64 6, i64 6, i64 6, i64 5, i64 5, i64 6, i64 6, i64 6, i64 5, i64 5], align 16
@_vq_quantlist__44c0_s_p8_1 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44c0_s_p8_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c0_s_p8_1, ptr @_vq_quantmap__44c0_s_p8_1, i32 5, i32 5 }, align 8
@_vq_quantthresh__44c0_s_p8_1 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44c0_s_p8_1 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__44c0_s_p9_0 = internal global [625 x i64] [i64 1, i64 7, i64 7, i64 11, i64 11, i64 10, i64 11, i64 11, i64 11, i64 11, i64 9, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 8, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 8, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10], align 16
@_vq_quantlist__44c0_s_p9_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44c0_s_p9_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c0_s_p9_0, ptr @_vq_quantmap__44c0_s_p9_0, i32 5, i32 5 }, align 8
@_vq_quantthresh__44c0_s_p9_0 = internal global [4 x float] [float -3.315000e+02, float -1.105000e+02, float 1.105000e+02, float 3.315000e+02], align 16
@_vq_quantmap__44c0_s_p9_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__44c0_s_p9_1 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 12, i64 12, i64 13, i64 12, i64 6, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 10, i64 10, i64 12, i64 11, i64 14, i64 13, i64 6, i64 5, i64 5, i64 7, i64 7, i64 7, i64 8, i64 9, i64 9, i64 11, i64 12, i64 13, i64 12, i64 15, i64 7, i64 7, i64 7, i64 7, i64 9, i64 9, i64 11, i64 11, i64 14, i64 13, i64 14, i64 13, i64 15, i64 7, i64 7, i64 8, i64 8, i64 8, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 11, i64 15, i64 10, i64 10, i64 8, i64 8, i64 10, i64 10, i64 12, i64 11, i64 13, i64 15, i64 14, i64 14, i64 15, i64 11, i64 10, i64 8, i64 8, i64 11, i64 11, i64 11, i64 11, i64 13, i64 13, i64 12, i64 13, i64 15, i64 15, i64 15, i64 10, i64 10, i64 10, i64 10, i64 12, i64 13, i64 13, i64 13, i64 15, i64 14, i64 15, i64 15, i64 15, i64 10, i64 10, i64 10, i64 11, i64 13, i64 14, i64 13, i64 14, i64 14, i64 14, i64 15, i64 15, i64 15, i64 15, i64 15, i64 11, i64 12, i64 11, i64 13, i64 14, i64 14, i64 15, i64 15, i64 15, i64 15, i64 15, i64 14, i64 15, i64 11, i64 11, i64 13, i64 12, i64 14, i64 13, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 13, i64 12, i64 13, i64 12, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 12, i64 13, i64 12, i64 12, i64 15, i64 14, i64 15, i64 15], align 16
@_vq_quantlist__44c0_s_p9_1 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44c0_s_p9_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c0_s_p9_1, ptr @_vq_quantmap__44c0_s_p9_1, i32 13, i32 13 }, align 8
@_vq_quantthresh__44c0_s_p9_1 = internal global [12 x float] [float -9.350000e+01, float -7.650000e+01, float -5.950000e+01, float -4.250000e+01, float -2.550000e+01, float -8.500000e+00, float 8.500000e+00, float 2.550000e+01, float 4.250000e+01, float 5.950000e+01, float 7.650000e+01, float 9.350000e+01], align 16
@_vq_quantmap__44c0_s_p9_1 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44c0_s_p9_2 = internal global [289 x i64] [i64 2, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 8, i64 9, i64 10, i64 10, i64 10, i64 7, i64 7, i64 8, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 7, i64 7, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 11, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 9, i64 10, i64 10, i64 11, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 10, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 9, i64 9, i64 10, i64 11, i64 10, i64 10, i64 10, i64 11, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 10, i64 10, i64 9, i64 10, i64 10, i64 10, i64 9, i64 10, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 10, i64 11, i64 11, i64 11, i64 9, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 10, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 10, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9], align 16
@_vq_quantlist__44c0_s_p9_2 = internal global [17 x i64] [i64 8, i64 7, i64 9, i64 6, i64 10, i64 5, i64 11, i64 4, i64 12, i64 3, i64 13, i64 2, i64 14, i64 1, i64 15, i64 0, i64 16], align 16
@_vq_auxt__44c0_s_p9_2 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c0_s_p9_2, ptr @_vq_quantmap__44c0_s_p9_2, i32 17, i32 17 }, align 8
@_vq_quantthresh__44c0_s_p9_2 = internal global [16 x float] [float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00], align 16
@_vq_quantmap__44c0_s_p9_2 = internal global [17 x i64] [i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16], align 16
@_44c0_sm_p1_0 = internal global %struct.static_codebook { i64 8, i64 6561, ptr @_vq_lengthlist__44c0_sm_p1_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__44c0_sm_p1_0, ptr null, ptr @_vq_auxt__44c0_sm_p1_0, ptr null, i32 0 }, align 8
@_44c0_sm_p2_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__44c0_sm_p2_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44c0_sm_p2_0, ptr null, ptr @_vq_auxt__44c0_sm_p2_0, ptr null, i32 0 }, align 8
@_44c0_sm_p3_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__44c0_sm_p3_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44c0_sm_p3_0, ptr null, ptr @_vq_auxt__44c0_sm_p3_0, ptr null, i32 0 }, align 8
@_44c0_sm_p4_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__44c0_sm_p4_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44c0_sm_p4_0, ptr null, ptr @_vq_auxt__44c0_sm_p4_0, ptr null, i32 0 }, align 8
@_44c0_sm_p5_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__44c0_sm_p5_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44c0_sm_p5_0, ptr null, ptr @_vq_auxt__44c0_sm_p5_0, ptr null, i32 0 }, align 8
@_44c0_sm_p6_0 = internal global %struct.static_codebook { i64 2, i64 289, ptr @_vq_lengthlist__44c0_sm_p6_0, i32 1, i64 -529530880, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__44c0_sm_p6_0, ptr null, ptr @_vq_auxt__44c0_sm_p6_0, ptr null, i32 0 }, align 8
@_44c0_sm_p7_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__44c0_sm_p7_0, i32 1, i64 -529137664, i64 1618345984, i32 2, i32 0, ptr @_vq_quantlist__44c0_sm_p7_0, ptr null, ptr @_vq_auxt__44c0_sm_p7_0, ptr null, i32 0 }, align 8
@_44c0_sm_p7_1 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__44c0_sm_p7_1, i32 1, i64 -531365888, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44c0_sm_p7_1, ptr null, ptr @_vq_auxt__44c0_sm_p7_1, ptr null, i32 0 }, align 8
@_44c0_sm_p8_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44c0_sm_p8_0, i32 1, i64 -526516224, i64 1616117760, i32 4, i32 0, ptr @_vq_quantlist__44c0_sm_p8_0, ptr null, ptr @_vq_auxt__44c0_sm_p8_0, ptr null, i32 0 }, align 8
@_44c0_sm_p8_1 = internal global %struct.static_codebook { i64 2, i64 25, ptr @_vq_lengthlist__44c0_sm_p8_1, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44c0_sm_p8_1, ptr null, ptr @_vq_auxt__44c0_sm_p8_1, ptr null, i32 0 }, align 8
@_44c0_sm_p9_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__44c0_sm_p9_0, i32 1, i64 -516186112, i64 1627103232, i32 4, i32 0, ptr @_vq_quantlist__44c0_sm_p9_0, ptr null, ptr @_vq_auxt__44c0_sm_p9_0, ptr null, i32 0 }, align 8
@_44c0_sm_p9_1 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44c0_sm_p9_1, i32 1, i64 -522616832, i64 1620115456, i32 4, i32 0, ptr @_vq_quantlist__44c0_sm_p9_1, ptr null, ptr @_vq_auxt__44c0_sm_p9_1, ptr null, i32 0 }, align 8
@_44c0_sm_p9_2 = internal global %struct.static_codebook { i64 2, i64 289, ptr @_vq_lengthlist__44c0_sm_p9_2, i32 1, i64 -529530880, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__44c0_sm_p9_2, ptr null, ptr @_vq_auxt__44c0_sm_p9_2, ptr null, i32 0 }, align 8
@_vq_quantlist__44c0_sm_p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44c0_sm_p1_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c0_sm_p1_0, ptr @_vq_quantmap__44c0_sm_p1_0, i32 3, i32 3 }, align 8
@_vq_lengthlist__44c0_sm_p1_0 = internal global <{ [1641 x i64], [4920 x i64] }> <{ [1641 x i64] [i64 1, i64 5, i64 5, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 8, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 8, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 10, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 10, i64 9], [4920 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c0_sm_p1_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__44c0_sm_p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_quantlist__44c0_sm_p2_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44c0_sm_p2_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c0_sm_p2_0, ptr @_vq_quantmap__44c0_sm_p2_0, i32 5, i32 5 }, align 8
@_vq_lengthlist__44c0_sm_p2_0 = internal global <{ [443 x i64], [182 x i64] }> <{ [443 x i64] [i64 1, i64 5, i64 5, i64 0, i64 0, i64 0, i64 5, i64 5, i64 0, i64 0, i64 0, i64 6, i64 6, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 6, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 6, i64 7, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 8, i64 8, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 10, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 8, i64 8, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 9, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 8, i64 8, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 8, i64 8, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 10, i64 10, i64 0, i64 0, i64 0, i64 9, i64 10, i64 0, i64 0, i64 0, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 10, i64 10, i64 0, i64 0, i64 0, i64 10, i64 9, i64 0, i64 0, i64 0, i64 10, i64 10], [182 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c0_sm_p2_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44c0_sm_p2_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_quantlist__44c0_sm_p3_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44c0_sm_p3_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c0_sm_p3_0, ptr @_vq_quantmap__44c0_sm_p3_0, i32 5, i32 5 }, align 8
@_vq_lengthlist__44c0_sm_p3_0 = internal global <{ [105 x i64], [520 x i64] }> <{ [105 x i64] [i64 2, i64 3, i64 4, i64 6, i64 5, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 5, i64 4, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 4, i64 4, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 6, i64 6, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 6, i64 6, i64 8, i64 8], [520 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c0_sm_p3_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44c0_sm_p3_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_quantlist__44c0_sm_p4_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__44c0_sm_p4_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c0_sm_p4_0, ptr @_vq_quantmap__44c0_sm_p4_0, i32 9, i32 9 }, align 8
@_vq_lengthlist__44c0_sm_p4_0 = internal global <{ [68 x i64], [13 x i64] }> <{ [68 x i64] [i64 2, i64 3, i64 3, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 4, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 4, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 5, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9], [13 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c0_sm_p4_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__44c0_sm_p4_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__44c0_sm_p5_0 = internal global [81 x i64] [i64 1, i64 3, i64 3, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 0, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 0, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 10, i64 10, i64 0, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 8, i64 8, i64 9, i64 9, i64 11, i64 11, i64 0, i64 0, i64 0, i64 9, i64 9, i64 9, i64 9, i64 11, i64 11, i64 0, i64 0, i64 0, i64 10, i64 10, i64 9, i64 9, i64 11, i64 11, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 11, i64 11], align 16
@_vq_quantlist__44c0_sm_p5_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__44c0_sm_p5_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c0_sm_p5_0, ptr @_vq_quantmap__44c0_sm_p5_0, i32 9, i32 9 }, align 8
@_vq_quantthresh__44c0_sm_p5_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__44c0_sm_p5_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__44c0_sm_p6_0 = internal global [289 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 8, i64 8, i64 9, i64 9, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 0, i64 6, i64 5, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 6, i64 5, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 8, i64 7, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 0, i64 0, i64 0, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 0, i64 0, i64 0, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 10, i64 9, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 14, i64 14, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14], align 16
@_vq_quantlist__44c0_sm_p6_0 = internal global [17 x i64] [i64 8, i64 7, i64 9, i64 6, i64 10, i64 5, i64 11, i64 4, i64 12, i64 3, i64 13, i64 2, i64 14, i64 1, i64 15, i64 0, i64 16], align 16
@_vq_auxt__44c0_sm_p6_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c0_sm_p6_0, ptr @_vq_quantmap__44c0_sm_p6_0, i32 17, i32 17 }, align 8
@_vq_quantthresh__44c0_sm_p6_0 = internal global [16 x float] [float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00], align 16
@_vq_quantmap__44c0_sm_p6_0 = internal global [17 x i64] [i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16], align 16
@_vq_lengthlist__44c0_sm_p7_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 6, i64 7, i64 6, i64 6, i64 5, i64 7, i64 6, i64 10, i64 9, i64 9, i64 10, i64 9, i64 9, i64 4, i64 7, i64 7, i64 10, i64 9, i64 9, i64 11, i64 9, i64 9, i64 6, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 10, i64 10, i64 6, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 9, i64 10, i64 6, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 10, i64 9, i64 7, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 6, i64 9, i64 9, i64 10, i64 9, i64 10, i64 11, i64 11, i64 10, i64 6, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 10, i64 11], align 16
@_vq_quantlist__44c0_sm_p7_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44c0_sm_p7_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c0_sm_p7_0, ptr @_vq_quantmap__44c0_sm_p7_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__44c0_sm_p7_0 = internal global [2 x float] [float -5.500000e+00, float 5.500000e+00], align 4
@_vq_quantmap__44c0_sm_p7_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44c0_sm_p7_1 = internal global [121 x i64] [i64 2, i64 4, i64 4, i64 5, i64 5, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 9, i64 5, i64 5, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 5, i64 5, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 10, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8], align 16
@_vq_quantlist__44c0_sm_p7_1 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__44c0_sm_p7_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c0_sm_p7_1, ptr @_vq_quantmap__44c0_sm_p7_1, i32 11, i32 11 }, align 8
@_vq_quantthresh__44c0_sm_p7_1 = internal global [10 x float] [float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00], align 16
@_vq_quantmap__44c0_sm_p7_1 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_lengthlist__44c0_sm_p8_0 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 7, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 7, i64 5, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 0, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 0, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 0, i64 12, i64 12, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 11, i64 0, i64 12, i64 12, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 11, i64 0, i64 0, i64 0, i64 9, i64 9, i64 9, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 10, i64 10, i64 9, i64 9, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 13, i64 13, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 14, i64 14, i64 10, i64 10, i64 11, i64 10, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 12, i64 12, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 12, i64 12, i64 11, i64 10, i64 12, i64 11, i64 14, i64 14], align 16
@_vq_quantlist__44c0_sm_p8_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44c0_sm_p8_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c0_sm_p8_0, ptr @_vq_quantmap__44c0_sm_p8_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__44c0_sm_p8_0 = internal global [12 x float] [float -2.750000e+01, float -2.250000e+01, float -1.750000e+01, float -1.250000e+01, float -7.500000e+00, float -2.500000e+00, float 2.500000e+00, float 7.500000e+00, float 1.250000e+01, float 1.750000e+01, float 2.250000e+01, float 2.750000e+01], align 16
@_vq_quantmap__44c0_sm_p8_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44c0_sm_p8_1 = internal global [25 x i64] [i64 2, i64 4, i64 4, i64 4, i64 5, i64 6, i64 5, i64 5, i64 5, i64 5, i64 6, i64 5, i64 5, i64 5, i64 5, i64 6, i64 5, i64 5, i64 5, i64 5, i64 6, i64 6, i64 6, i64 5, i64 5], align 16
@_vq_quantlist__44c0_sm_p8_1 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44c0_sm_p8_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c0_sm_p8_1, ptr @_vq_quantmap__44c0_sm_p8_1, i32 5, i32 5 }, align 8
@_vq_quantthresh__44c0_sm_p8_1 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44c0_sm_p8_1 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__44c0_sm_p9_0 = internal global [81 x i64] [i64 1, i64 3, i64 4, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 4, i64 6, i64 6, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 4, i64 6, i64 5, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 6, i64 7, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 7, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 10, i64 7, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10], align 16
@_vq_quantlist__44c0_sm_p9_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__44c0_sm_p9_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c0_sm_p9_0, ptr @_vq_quantmap__44c0_sm_p9_0, i32 9, i32 9 }, align 8
@_vq_quantthresh__44c0_sm_p9_0 = internal global [8 x float] [float -7.735000e+02, float -5.525000e+02, float -3.315000e+02, float -1.105000e+02, float 1.105000e+02, float 3.315000e+02, float 5.525000e+02, float 7.735000e+02], align 16
@_vq_quantmap__44c0_sm_p9_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__44c0_sm_p9_1 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 12, i64 12, i64 13, i64 13, i64 6, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 10, i64 10, i64 12, i64 12, i64 14, i64 13, i64 6, i64 5, i64 5, i64 6, i64 7, i64 8, i64 8, i64 10, i64 9, i64 11, i64 12, i64 13, i64 12, i64 18, i64 7, i64 7, i64 7, i64 7, i64 9, i64 9, i64 11, i64 11, i64 14, i64 14, i64 14, i64 13, i64 17, i64 7, i64 7, i64 8, i64 7, i64 9, i64 9, i64 10, i64 10, i64 12, i64 11, i64 13, i64 12, i64 18, i64 10, i64 10, i64 8, i64 8, i64 10, i64 10, i64 12, i64 11, i64 13, i64 14, i64 16, i64 15, i64 17, i64 11, i64 11, i64 8, i64 8, i64 11, i64 11, i64 11, i64 12, i64 13, i64 13, i64 13, i64 15, i64 18, i64 18, i64 18, i64 10, i64 11, i64 10, i64 10, i64 12, i64 13, i64 14, i64 13, i64 17, i64 14, i64 17, i64 17, i64 17, i64 10, i64 10, i64 11, i64 11, i64 14, i64 14, i64 14, i64 13, i64 14, i64 14, i64 18, i64 18, i64 18, i64 17, i64 15, i64 11, i64 12, i64 12, i64 13, i64 15, i64 15, i64 16, i64 17, i64 18, i64 16, i64 18, i64 14, i64 15, i64 11, i64 11, i64 14, i64 13, i64 14, i64 14, i64 16, i64 17, i64 18, i64 17, i64 17, i64 17, i64 18, i64 14, i64 13, i64 13, i64 12, i64 17, i64 15, i64 17, i64 16, i64 18, i64 17, i64 18, i64 18, i64 18, i64 12, i64 13, i64 12, i64 13, i64 16, i64 14, i64 18, i64 18], align 16
@_vq_quantlist__44c0_sm_p9_1 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44c0_sm_p9_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c0_sm_p9_1, ptr @_vq_quantmap__44c0_sm_p9_1, i32 13, i32 13 }, align 8
@_vq_quantthresh__44c0_sm_p9_1 = internal global [12 x float] [float -9.350000e+01, float -7.650000e+01, float -5.950000e+01, float -4.250000e+01, float -2.550000e+01, float -8.500000e+00, float 8.500000e+00, float 2.550000e+01, float 4.250000e+01, float 5.950000e+01, float 7.650000e+01, float 9.350000e+01], align 16
@_vq_quantmap__44c0_sm_p9_1 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44c0_sm_p9_2 = internal global [289 x i64] [i64 2, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 6, i64 6, i64 7, i64 7, i64 8, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 11, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 11, i64 10, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 10, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 11, i64 10, i64 10, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 10, i64 11, i64 11, i64 10, i64 10, i64 9, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 11, i64 10, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 10, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9], align 16
@_vq_quantlist__44c0_sm_p9_2 = internal global [17 x i64] [i64 8, i64 7, i64 9, i64 6, i64 10, i64 5, i64 11, i64 4, i64 12, i64 3, i64 13, i64 2, i64 14, i64 1, i64 15, i64 0, i64 16], align 16
@_vq_auxt__44c0_sm_p9_2 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c0_sm_p9_2, ptr @_vq_quantmap__44c0_sm_p9_2, i32 17, i32 17 }, align 8
@_vq_quantthresh__44c0_sm_p9_2 = internal global [16 x float] [float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00], align 16
@_vq_quantmap__44c0_sm_p9_2 = internal global [17 x i64] [i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16], align 16
@_huff_lengthlist__44c0_s_long = internal global [100 x i64] [i64 3, i64 4, i64 18, i64 8, i64 8, i64 8, i64 9, i64 10, i64 11, i64 13, i64 3, i64 2, i64 18, i64 5, i64 5, i64 6, i64 8, i64 11, i64 12, i64 12, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 8, i64 5, i64 18, i64 7, i64 8, i64 8, i64 10, i64 14, i64 14, i64 16, i64 8, i64 5, i64 18, i64 7, i64 5, i64 6, i64 7, i64 11, i64 12, i64 13, i64 8, i64 6, i64 18, i64 7, i64 5, i64 6, i64 7, i64 10, i64 12, i64 14, i64 8, i64 7, i64 18, i64 10, i64 7, i64 6, i64 6, i64 8, i64 11, i64 14, i64 9, i64 10, i64 18, i64 13, i64 9, i64 7, i64 6, i64 8, i64 10, i64 13, i64 11, i64 13, i64 18, i64 16, i64 13, i64 10, i64 9, i64 8, i64 8, i64 11, i64 12, i64 17, i64 18, i64 17, i64 18, i64 14, i64 11, i64 9, i64 10, i64 14], align 16
@_huff_lengthlist__44c0_sm_long = internal global [100 x i64] [i64 3, i64 4, i64 10, i64 8, i64 11, i64 9, i64 10, i64 10, i64 11, i64 13, i64 3, i64 2, i64 10, i64 5, i64 8, i64 6, i64 8, i64 11, i64 12, i64 13, i64 10, i64 8, i64 7, i64 10, i64 7, i64 8, i64 9, i64 11, i64 12, i64 13, i64 8, i64 5, i64 12, i64 6, i64 9, i64 7, i64 10, i64 13, i64 14, i64 16, i64 11, i64 7, i64 7, i64 9, i64 5, i64 6, i64 7, i64 10, i64 13, i64 13, i64 8, i64 6, i64 7, i64 7, i64 5, i64 5, i64 6, i64 9, i64 12, i64 13, i64 9, i64 8, i64 8, i64 8, i64 7, i64 6, i64 6, i64 8, i64 11, i64 14, i64 10, i64 10, i64 10, i64 11, i64 9, i64 8, i64 7, i64 8, i64 10, i64 13, i64 11, i64 14, i64 12, i64 15, i64 13, i64 11, i64 9, i64 8, i64 9, i64 12, i64 12, i64 18, i64 15, i64 18, i64 17, i64 15, i64 12, i64 10, i64 10, i64 14], align 16
@_huff_book__44c1_s_short = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__44c1_s_short, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book__44c1_sm_short = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__44c1_sm_short, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_resbook_44s_1 = internal global %struct.static_bookblock { [12 x [3 x ptr]] [[3 x ptr] zeroinitializer, [3 x ptr] [ptr null, ptr null, ptr @_44c1_s_p1_0], [3 x ptr] [ptr null, ptr null, ptr @_44c1_s_p2_0], [3 x ptr] [ptr null, ptr null, ptr @_44c1_s_p3_0], [3 x ptr] [ptr null, ptr null, ptr @_44c1_s_p4_0], [3 x ptr] [ptr null, ptr null, ptr @_44c1_s_p5_0], [3 x ptr] [ptr null, ptr null, ptr @_44c1_s_p6_0], [3 x ptr] [ptr @_44c1_s_p7_0, ptr @_44c1_s_p7_1, ptr null], [3 x ptr] [ptr @_44c1_s_p8_0, ptr @_44c1_s_p8_1, ptr null], [3 x ptr] [ptr @_44c1_s_p9_0, ptr @_44c1_s_p9_1, ptr @_44c1_s_p9_2], [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer] }, align 8
@_resbook_44sm_1 = internal global %struct.static_bookblock { [12 x [3 x ptr]] [[3 x ptr] zeroinitializer, [3 x ptr] [ptr null, ptr null, ptr @_44c1_sm_p1_0], [3 x ptr] [ptr null, ptr null, ptr @_44c1_sm_p2_0], [3 x ptr] [ptr null, ptr null, ptr @_44c1_sm_p3_0], [3 x ptr] [ptr null, ptr null, ptr @_44c1_sm_p4_0], [3 x ptr] [ptr null, ptr null, ptr @_44c1_sm_p5_0], [3 x ptr] [ptr null, ptr null, ptr @_44c1_sm_p6_0], [3 x ptr] [ptr @_44c1_sm_p7_0, ptr @_44c1_sm_p7_1, ptr null], [3 x ptr] [ptr @_44c1_sm_p8_0, ptr @_44c1_sm_p8_1, ptr null], [3 x ptr] [ptr @_44c1_sm_p9_0, ptr @_44c1_sm_p9_1, ptr @_44c1_sm_p9_2], [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer] }, align 8
@_huff_book__44c1_s_long = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__44c1_s_long, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_book__44c1_sm_long = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__44c1_sm_long, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_lengthlist__44c1_s_short = internal global [100 x i64] [i64 5, i64 7, i64 17, i64 13, i64 12, i64 12, i64 14, i64 16, i64 15, i64 16, i64 4, i64 2, i64 17, i64 5, i64 7, i64 6, i64 8, i64 11, i64 14, i64 13, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 10, i64 4, i64 16, i64 4, i64 8, i64 6, i64 7, i64 11, i64 14, i64 14, i64 10, i64 5, i64 16, i64 6, i64 5, i64 6, i64 8, i64 12, i64 15, i64 15, i64 10, i64 5, i64 16, i64 5, i64 6, i64 5, i64 7, i64 10, i64 14, i64 15, i64 11, i64 6, i64 16, i64 7, i64 8, i64 7, i64 7, i64 10, i64 14, i64 14, i64 13, i64 8, i64 16, i64 8, i64 7, i64 7, i64 8, i64 10, i64 12, i64 13, i64 12, i64 8, i64 16, i64 7, i64 5, i64 5, i64 6, i64 8, i64 11, i64 13, i64 13, i64 9, i64 16, i64 9, i64 6, i64 6, i64 7, i64 8, i64 10, i64 13], align 16
@_huff_lengthlist__44c1_sm_short = internal global [100 x i64] [i64 4, i64 7, i64 13, i64 13, i64 13, i64 13, i64 14, i64 16, i64 16, i64 19, i64 4, i64 2, i64 13, i64 5, i64 8, i64 7, i64 9, i64 12, i64 14, i64 13, i64 16, i64 9, i64 10, i64 10, i64 9, i64 10, i64 11, i64 13, i64 17, i64 19, i64 9, i64 4, i64 13, i64 5, i64 10, i64 6, i64 8, i64 11, i64 15, i64 15, i64 11, i64 6, i64 9, i64 7, i64 6, i64 6, i64 8, i64 11, i64 14, i64 18, i64 11, i64 5, i64 9, i64 6, i64 6, i64 5, i64 6, i64 9, i64 13, i64 15, i64 12, i64 6, i64 9, i64 7, i64 6, i64 5, i64 5, i64 8, i64 12, i64 15, i64 13, i64 7, i64 10, i64 8, i64 6, i64 6, i64 7, i64 9, i64 12, i64 13, i64 13, i64 9, i64 11, i64 9, i64 6, i64 5, i64 6, i64 8, i64 11, i64 13, i64 13, i64 11, i64 13, i64 11, i64 7, i64 6, i64 7, i64 8, i64 10, i64 12], align 16
@_44c1_s_p1_0 = internal global %struct.static_codebook { i64 8, i64 6561, ptr @_vq_lengthlist__44c1_s_p1_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__44c1_s_p1_0, ptr null, ptr @_vq_auxt__44c1_s_p1_0, ptr null, i32 0 }, align 8
@_44c1_s_p2_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__44c1_s_p2_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44c1_s_p2_0, ptr null, ptr @_vq_auxt__44c1_s_p2_0, ptr null, i32 0 }, align 8
@_44c1_s_p3_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__44c1_s_p3_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44c1_s_p3_0, ptr null, ptr @_vq_auxt__44c1_s_p3_0, ptr null, i32 0 }, align 8
@_44c1_s_p4_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__44c1_s_p4_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44c1_s_p4_0, ptr null, ptr @_vq_auxt__44c1_s_p4_0, ptr null, i32 0 }, align 8
@_44c1_s_p5_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__44c1_s_p5_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44c1_s_p5_0, ptr null, ptr @_vq_auxt__44c1_s_p5_0, ptr null, i32 0 }, align 8
@_44c1_s_p6_0 = internal global %struct.static_codebook { i64 2, i64 289, ptr @_vq_lengthlist__44c1_s_p6_0, i32 1, i64 -529530880, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__44c1_s_p6_0, ptr null, ptr @_vq_auxt__44c1_s_p6_0, ptr null, i32 0 }, align 8
@_44c1_s_p7_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__44c1_s_p7_0, i32 1, i64 -529137664, i64 1618345984, i32 2, i32 0, ptr @_vq_quantlist__44c1_s_p7_0, ptr null, ptr @_vq_auxt__44c1_s_p7_0, ptr null, i32 0 }, align 8
@_44c1_s_p7_1 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__44c1_s_p7_1, i32 1, i64 -531365888, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44c1_s_p7_1, ptr null, ptr @_vq_auxt__44c1_s_p7_1, ptr null, i32 0 }, align 8
@_44c1_s_p8_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44c1_s_p8_0, i32 1, i64 -526516224, i64 1616117760, i32 4, i32 0, ptr @_vq_quantlist__44c1_s_p8_0, ptr null, ptr @_vq_auxt__44c1_s_p8_0, ptr null, i32 0 }, align 8
@_44c1_s_p8_1 = internal global %struct.static_codebook { i64 2, i64 25, ptr @_vq_lengthlist__44c1_s_p8_1, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44c1_s_p8_1, ptr null, ptr @_vq_auxt__44c1_s_p8_1, ptr null, i32 0 }, align 8
@_44c1_s_p9_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44c1_s_p9_0, i32 1, i64 -514541568, i64 1627103232, i32 4, i32 0, ptr @_vq_quantlist__44c1_s_p9_0, ptr null, ptr @_vq_auxt__44c1_s_p9_0, ptr null, i32 0 }, align 8
@_44c1_s_p9_1 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44c1_s_p9_1, i32 1, i64 -522616832, i64 1620115456, i32 4, i32 0, ptr @_vq_quantlist__44c1_s_p9_1, ptr null, ptr @_vq_auxt__44c1_s_p9_1, ptr null, i32 0 }, align 8
@_44c1_s_p9_2 = internal global %struct.static_codebook { i64 2, i64 289, ptr @_vq_lengthlist__44c1_s_p9_2, i32 1, i64 -529530880, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__44c1_s_p9_2, ptr null, ptr @_vq_auxt__44c1_s_p9_2, ptr null, i32 0 }, align 8
@_vq_quantlist__44c1_s_p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44c1_s_p1_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c1_s_p1_0, ptr @_vq_quantmap__44c1_s_p1_0, i32 3, i32 3 }, align 8
@_vq_lengthlist__44c1_s_p1_0 = internal global <{ [1641 x i64], [4920 x i64] }> <{ [1641 x i64] [i64 2, i64 4, i64 4, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 6, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 8, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 9], [4920 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c1_s_p1_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__44c1_s_p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44c1_s_p2_0 = internal global [625 x i64] zeroinitializer, align 16
@_vq_quantlist__44c1_s_p2_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44c1_s_p2_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c1_s_p2_0, ptr @_vq_quantmap__44c1_s_p2_0, i32 5, i32 5 }, align 8
@_vq_quantthresh__44c1_s_p2_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44c1_s_p2_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_quantlist__44c1_s_p3_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44c1_s_p3_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c1_s_p3_0, ptr @_vq_quantmap__44c1_s_p3_0, i32 5, i32 5 }, align 8
@_vq_lengthlist__44c1_s_p3_0 = internal global <{ [105 x i64], [520 x i64] }> <{ [105 x i64] [i64 2, i64 3, i64 4, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 5, i64 4, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 4, i64 4, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 6, i64 6, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 6, i64 6, i64 7, i64 7], [520 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c1_s_p3_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44c1_s_p3_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_quantlist__44c1_s_p4_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__44c1_s_p4_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c1_s_p4_0, ptr @_vq_quantmap__44c1_s_p4_0, i32 9, i32 9 }, align 8
@_vq_lengthlist__44c1_s_p4_0 = internal global <{ [68 x i64], [13 x i64] }> <{ [68 x i64] [i64 1, i64 3, i64 2, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 10, i64 10], [13 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c1_s_p4_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__44c1_s_p4_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__44c1_s_p5_0 = internal global [81 x i64] [i64 1, i64 3, i64 3, i64 5, i64 5, i64 6, i64 6, i64 8, i64 8, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 0, i64 0, i64 0, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 0, i64 0, i64 0, i64 10, i64 10, i64 9, i64 9, i64 11, i64 11, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 11, i64 11], align 16
@_vq_quantlist__44c1_s_p5_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__44c1_s_p5_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c1_s_p5_0, ptr @_vq_quantmap__44c1_s_p5_0, i32 9, i32 9 }, align 8
@_vq_quantthresh__44c1_s_p5_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__44c1_s_p5_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__44c1_s_p6_0 = internal global [289 x i64] [i64 1, i64 3, i64 4, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 8, i64 8, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 12, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14], align 16
@_vq_quantlist__44c1_s_p6_0 = internal global [17 x i64] [i64 8, i64 7, i64 9, i64 6, i64 10, i64 5, i64 11, i64 4, i64 12, i64 3, i64 13, i64 2, i64 14, i64 1, i64 15, i64 0, i64 16], align 16
@_vq_auxt__44c1_s_p6_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c1_s_p6_0, ptr @_vq_quantmap__44c1_s_p6_0, i32 17, i32 17 }, align 8
@_vq_quantthresh__44c1_s_p6_0 = internal global [16 x float] [float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00], align 16
@_vq_quantmap__44c1_s_p6_0 = internal global [17 x i64] [i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16], align 16
@_vq_lengthlist__44c1_s_p7_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 6, i64 7, i64 6, i64 6, i64 4, i64 7, i64 7, i64 10, i64 9, i64 9, i64 10, i64 9, i64 9, i64 5, i64 7, i64 7, i64 10, i64 9, i64 9, i64 10, i64 9, i64 9, i64 6, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 10, i64 10, i64 6, i64 9, i64 9, i64 10, i64 11, i64 10, i64 10, i64 9, i64 9, i64 6, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 7, i64 10, i64 10, i64 11, i64 10, i64 10, i64 11, i64 11, i64 11, i64 6, i64 9, i64 9, i64 10, i64 9, i64 9, i64 11, i64 10, i64 10, i64 6, i64 9, i64 9, i64 10, i64 9, i64 9, i64 11, i64 10, i64 10], align 16
@_vq_quantlist__44c1_s_p7_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44c1_s_p7_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c1_s_p7_0, ptr @_vq_quantmap__44c1_s_p7_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__44c1_s_p7_0 = internal global [2 x float] [float -5.500000e+00, float 5.500000e+00], align 4
@_vq_quantmap__44c1_s_p7_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44c1_s_p7_1 = internal global [121 x i64] [i64 2, i64 3, i64 3, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 10, i64 10, i64 10, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8], align 16
@_vq_quantlist__44c1_s_p7_1 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__44c1_s_p7_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c1_s_p7_1, ptr @_vq_quantmap__44c1_s_p7_1, i32 11, i32 11 }, align 8
@_vq_quantthresh__44c1_s_p7_1 = internal global [10 x float] [float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00], align 16
@_vq_quantmap__44c1_s_p7_1 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_lengthlist__44c1_s_p8_0 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 9, i64 8, i64 10, i64 10, i64 6, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 7, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 0, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 0, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 0, i64 12, i64 12, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 12, i64 11, i64 0, i64 12, i64 13, i64 9, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 0, i64 0, i64 0, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 10, i64 10, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 13, i64 14, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 0, i64 0, i64 0, i64 14, i64 14, i64 10, i64 10, i64 11, i64 10, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 12, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 12, i64 12, i64 11, i64 10, i64 12, i64 11, i64 14, i64 13], align 16
@_vq_quantlist__44c1_s_p8_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44c1_s_p8_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c1_s_p8_0, ptr @_vq_quantmap__44c1_s_p8_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__44c1_s_p8_0 = internal global [12 x float] [float -2.750000e+01, float -2.250000e+01, float -1.750000e+01, float -1.250000e+01, float -7.500000e+00, float -2.500000e+00, float 2.500000e+00, float 7.500000e+00, float 1.250000e+01, float 1.750000e+01, float 2.250000e+01, float 2.750000e+01], align 16
@_vq_quantmap__44c1_s_p8_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44c1_s_p8_1 = internal global [25 x i64] [i64 2, i64 3, i64 3, i64 5, i64 5, i64 6, i64 6, i64 6, i64 5, i64 5, i64 6, i64 6, i64 6, i64 5, i64 5, i64 6, i64 6, i64 6, i64 5, i64 5, i64 6, i64 6, i64 6, i64 5, i64 5], align 16
@_vq_quantlist__44c1_s_p8_1 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44c1_s_p8_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c1_s_p8_1, ptr @_vq_quantmap__44c1_s_p8_1, i32 5, i32 5 }, align 8
@_vq_quantthresh__44c1_s_p8_1 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44c1_s_p8_1 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__44c1_s_p9_0 = internal global [169 x i64] [i64 1, i64 6, i64 6, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 5, i64 7, i64 6, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 4, i64 6, i64 6, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 7, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8], align 16
@_vq_quantlist__44c1_s_p9_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44c1_s_p9_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c1_s_p9_0, ptr @_vq_quantmap__44c1_s_p9_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__44c1_s_p9_0 = internal global [12 x float] [float -1.215500e+03, float -9.945000e+02, float -7.735000e+02, float -5.525000e+02, float -3.315000e+02, float -1.105000e+02, float 1.105000e+02, float 3.315000e+02, float 5.525000e+02, float 7.735000e+02, float 9.945000e+02, float 1.215500e+03], align 16
@_vq_quantmap__44c1_s_p9_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44c1_s_p9_1 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 12, i64 12, i64 13, i64 12, i64 6, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 10, i64 10, i64 11, i64 12, i64 13, i64 13, i64 6, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 11, i64 11, i64 12, i64 12, i64 15, i64 7, i64 7, i64 7, i64 7, i64 9, i64 9, i64 11, i64 11, i64 13, i64 13, i64 14, i64 13, i64 15, i64 7, i64 7, i64 8, i64 7, i64 9, i64 9, i64 10, i64 10, i64 12, i64 11, i64 14, i64 12, i64 15, i64 10, i64 10, i64 8, i64 8, i64 10, i64 10, i64 12, i64 11, i64 12, i64 13, i64 14, i64 13, i64 15, i64 10, i64 10, i64 8, i64 8, i64 11, i64 10, i64 11, i64 11, i64 13, i64 12, i64 13, i64 15, i64 14, i64 15, i64 15, i64 10, i64 10, i64 10, i64 10, i64 12, i64 13, i64 13, i64 12, i64 15, i64 14, i64 15, i64 15, i64 13, i64 10, i64 10, i64 11, i64 11, i64 13, i64 13, i64 13, i64 12, i64 13, i64 13, i64 15, i64 15, i64 15, i64 14, i64 15, i64 11, i64 11, i64 13, i64 13, i64 13, i64 13, i64 14, i64 15, i64 15, i64 15, i64 15, i64 13, i64 13, i64 11, i64 11, i64 12, i64 13, i64 13, i64 14, i64 13, i64 15, i64 15, i64 15, i64 14, i64 15, i64 15, i64 13, i64 12, i64 12, i64 11, i64 13, i64 13, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 14, i64 13, i64 12, i64 13, i64 12, i64 15, i64 13, i64 15, i64 15], align 16
@_vq_quantlist__44c1_s_p9_1 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44c1_s_p9_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c1_s_p9_1, ptr @_vq_quantmap__44c1_s_p9_1, i32 13, i32 13 }, align 8
@_vq_quantthresh__44c1_s_p9_1 = internal global [12 x float] [float -9.350000e+01, float -7.650000e+01, float -5.950000e+01, float -4.250000e+01, float -2.550000e+01, float -8.500000e+00, float 8.500000e+00, float 2.550000e+01, float 4.250000e+01, float 5.950000e+01, float 7.650000e+01, float 9.350000e+01], align 16
@_vq_quantmap__44c1_s_p9_1 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44c1_s_p9_2 = internal global [289 x i64] [i64 2, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 8, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 10, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 10, i64 9, i64 9, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 10, i64 9, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 10, i64 10, i64 11, i64 11, i64 9, i64 9, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9], align 16
@_vq_quantlist__44c1_s_p9_2 = internal global [17 x i64] [i64 8, i64 7, i64 9, i64 6, i64 10, i64 5, i64 11, i64 4, i64 12, i64 3, i64 13, i64 2, i64 14, i64 1, i64 15, i64 0, i64 16], align 16
@_vq_auxt__44c1_s_p9_2 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c1_s_p9_2, ptr @_vq_quantmap__44c1_s_p9_2, i32 17, i32 17 }, align 8
@_vq_quantthresh__44c1_s_p9_2 = internal global [16 x float] [float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00], align 16
@_vq_quantmap__44c1_s_p9_2 = internal global [17 x i64] [i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16], align 16
@_44c1_sm_p1_0 = internal global %struct.static_codebook { i64 8, i64 6561, ptr @_vq_lengthlist__44c1_sm_p1_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__44c1_sm_p1_0, ptr null, ptr @_vq_auxt__44c1_sm_p1_0, ptr null, i32 0 }, align 8
@_44c1_sm_p2_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__44c1_sm_p2_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44c1_sm_p2_0, ptr null, ptr @_vq_auxt__44c1_sm_p2_0, ptr null, i32 0 }, align 8
@_44c1_sm_p3_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__44c1_sm_p3_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44c1_sm_p3_0, ptr null, ptr @_vq_auxt__44c1_sm_p3_0, ptr null, i32 0 }, align 8
@_44c1_sm_p4_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__44c1_sm_p4_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44c1_sm_p4_0, ptr null, ptr @_vq_auxt__44c1_sm_p4_0, ptr null, i32 0 }, align 8
@_44c1_sm_p5_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__44c1_sm_p5_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44c1_sm_p5_0, ptr null, ptr @_vq_auxt__44c1_sm_p5_0, ptr null, i32 0 }, align 8
@_44c1_sm_p6_0 = internal global %struct.static_codebook { i64 2, i64 289, ptr @_vq_lengthlist__44c1_sm_p6_0, i32 1, i64 -529530880, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__44c1_sm_p6_0, ptr null, ptr @_vq_auxt__44c1_sm_p6_0, ptr null, i32 0 }, align 8
@_44c1_sm_p7_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__44c1_sm_p7_0, i32 1, i64 -529137664, i64 1618345984, i32 2, i32 0, ptr @_vq_quantlist__44c1_sm_p7_0, ptr null, ptr @_vq_auxt__44c1_sm_p7_0, ptr null, i32 0 }, align 8
@_44c1_sm_p7_1 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__44c1_sm_p7_1, i32 1, i64 -531365888, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44c1_sm_p7_1, ptr null, ptr @_vq_auxt__44c1_sm_p7_1, ptr null, i32 0 }, align 8
@_44c1_sm_p8_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44c1_sm_p8_0, i32 1, i64 -526516224, i64 1616117760, i32 4, i32 0, ptr @_vq_quantlist__44c1_sm_p8_0, ptr null, ptr @_vq_auxt__44c1_sm_p8_0, ptr null, i32 0 }, align 8
@_44c1_sm_p8_1 = internal global %struct.static_codebook { i64 2, i64 25, ptr @_vq_lengthlist__44c1_sm_p8_1, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44c1_sm_p8_1, ptr null, ptr @_vq_auxt__44c1_sm_p8_1, ptr null, i32 0 }, align 8
@_44c1_sm_p9_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44c1_sm_p9_0, i32 1, i64 -514541568, i64 1627103232, i32 4, i32 0, ptr @_vq_quantlist__44c1_sm_p9_0, ptr null, ptr @_vq_auxt__44c1_sm_p9_0, ptr null, i32 0 }, align 8
@_44c1_sm_p9_1 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44c1_sm_p9_1, i32 1, i64 -522616832, i64 1620115456, i32 4, i32 0, ptr @_vq_quantlist__44c1_sm_p9_1, ptr null, ptr @_vq_auxt__44c1_sm_p9_1, ptr null, i32 0 }, align 8
@_44c1_sm_p9_2 = internal global %struct.static_codebook { i64 2, i64 289, ptr @_vq_lengthlist__44c1_sm_p9_2, i32 1, i64 -529530880, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__44c1_sm_p9_2, ptr null, ptr @_vq_auxt__44c1_sm_p9_2, ptr null, i32 0 }, align 8
@_vq_quantlist__44c1_sm_p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44c1_sm_p1_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c1_sm_p1_0, ptr @_vq_quantmap__44c1_sm_p1_0, i32 3, i32 3 }, align 8
@_vq_lengthlist__44c1_sm_p1_0 = internal global <{ [1641 x i64], [4920 x i64] }> <{ [1641 x i64] [i64 1, i64 5, i64 5, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 8, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 8, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 10, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 10, i64 9], [4920 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c1_sm_p1_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__44c1_sm_p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_quantlist__44c1_sm_p2_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44c1_sm_p2_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c1_sm_p2_0, ptr @_vq_quantmap__44c1_sm_p2_0, i32 5, i32 5 }, align 8
@_vq_lengthlist__44c1_sm_p2_0 = internal global <{ [443 x i64], [182 x i64] }> <{ [443 x i64] [i64 1, i64 5, i64 5, i64 0, i64 0, i64 0, i64 5, i64 6, i64 0, i64 0, i64 0, i64 5, i64 6, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 6, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 6, i64 7, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 8, i64 8, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 10, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 8, i64 8, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 9, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 8, i64 8, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 8, i64 8, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 10, i64 10, i64 0, i64 0, i64 0, i64 9, i64 10, i64 0, i64 0, i64 0, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 10, i64 10, i64 0, i64 0, i64 0, i64 10, i64 9, i64 0, i64 0, i64 0, i64 10, i64 10], [182 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c1_sm_p2_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44c1_sm_p2_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_quantlist__44c1_sm_p3_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44c1_sm_p3_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c1_sm_p3_0, ptr @_vq_quantmap__44c1_sm_p3_0, i32 5, i32 5 }, align 8
@_vq_lengthlist__44c1_sm_p3_0 = internal global <{ [105 x i64], [520 x i64] }> <{ [105 x i64] [i64 2, i64 3, i64 4, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 4, i64 4, i64 7, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 4, i64 4, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 6, i64 6, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 6, i64 7, i64 8, i64 8], [520 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c1_sm_p3_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44c1_sm_p3_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_quantlist__44c1_sm_p4_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__44c1_sm_p4_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c1_sm_p4_0, ptr @_vq_quantmap__44c1_sm_p4_0, i32 9, i32 9 }, align 8
@_vq_lengthlist__44c1_sm_p4_0 = internal global <{ [68 x i64], [13 x i64] }> <{ [68 x i64] [i64 1, i64 3, i64 3, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 5, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 5, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 7, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 10, i64 10], [13 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c1_sm_p4_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__44c1_sm_p4_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__44c1_sm_p5_0 = internal global [81 x i64] [i64 2, i64 3, i64 3, i64 5, i64 5, i64 6, i64 6, i64 8, i64 8, i64 0, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 0, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 0, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 7, i64 7, i64 7, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 8, i64 10, i64 10], align 16
@_vq_quantlist__44c1_sm_p5_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__44c1_sm_p5_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c1_sm_p5_0, ptr @_vq_quantmap__44c1_sm_p5_0, i32 9, i32 9 }, align 8
@_vq_quantthresh__44c1_sm_p5_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__44c1_sm_p5_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__44c1_sm_p6_0 = internal global [289 x i64] [i64 2, i64 3, i64 4, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 0, i64 5, i64 5, i64 6, i64 6, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 0, i64 5, i64 5, i64 6, i64 6, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 0, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 13, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 13, i64 13, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 11, i64 12, i64 12, i64 13, i64 12, i64 14, i64 14], align 16
@_vq_quantlist__44c1_sm_p6_0 = internal global [17 x i64] [i64 8, i64 7, i64 9, i64 6, i64 10, i64 5, i64 11, i64 4, i64 12, i64 3, i64 13, i64 2, i64 14, i64 1, i64 15, i64 0, i64 16], align 16
@_vq_auxt__44c1_sm_p6_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c1_sm_p6_0, ptr @_vq_quantmap__44c1_sm_p6_0, i32 17, i32 17 }, align 8
@_vq_quantthresh__44c1_sm_p6_0 = internal global [16 x float] [float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00], align 16
@_vq_quantmap__44c1_sm_p6_0 = internal global [17 x i64] [i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16], align 16
@_vq_lengthlist__44c1_sm_p7_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 6, i64 7, i64 6, i64 6, i64 4, i64 7, i64 7, i64 10, i64 9, i64 9, i64 10, i64 9, i64 9, i64 5, i64 7, i64 7, i64 10, i64 9, i64 9, i64 10, i64 9, i64 9, i64 6, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 6, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 6, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 7, i64 10, i64 10, i64 11, i64 10, i64 10, i64 11, i64 11, i64 11, i64 6, i64 9, i64 9, i64 10, i64 9, i64 9, i64 11, i64 10, i64 10, i64 6, i64 9, i64 9, i64 10, i64 9, i64 9, i64 11, i64 10, i64 10], align 16
@_vq_quantlist__44c1_sm_p7_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44c1_sm_p7_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c1_sm_p7_0, ptr @_vq_quantmap__44c1_sm_p7_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__44c1_sm_p7_0 = internal global [2 x float] [float -5.500000e+00, float 5.500000e+00], align 4
@_vq_quantmap__44c1_sm_p7_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44c1_sm_p7_1 = internal global [121 x i64] [i64 2, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 10, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 10, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 10, i64 7, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 8, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8], align 16
@_vq_quantlist__44c1_sm_p7_1 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__44c1_sm_p7_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c1_sm_p7_1, ptr @_vq_quantmap__44c1_sm_p7_1, i32 11, i32 11 }, align 8
@_vq_quantthresh__44c1_sm_p7_1 = internal global [10 x float] [float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00], align 16
@_vq_quantmap__44c1_sm_p7_1 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_lengthlist__44c1_sm_p8_0 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 6, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 7, i64 5, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 11, i64 10, i64 0, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 0, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 0, i64 12, i64 12, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 11, i64 0, i64 13, i64 13, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 12, i64 12, i64 12, i64 0, i64 0, i64 0, i64 10, i64 10, i64 9, i64 9, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 13, i64 13, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 14, i64 14, i64 10, i64 10, i64 11, i64 10, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 12, i64 11, i64 11, i64 11, i64 12, i64 12, i64 14, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 12, i64 12, i64 11, i64 10, i64 12, i64 12, i64 14, i64 13], align 16
@_vq_quantlist__44c1_sm_p8_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44c1_sm_p8_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c1_sm_p8_0, ptr @_vq_quantmap__44c1_sm_p8_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__44c1_sm_p8_0 = internal global [12 x float] [float -2.750000e+01, float -2.250000e+01, float -1.750000e+01, float -1.250000e+01, float -7.500000e+00, float -2.500000e+00, float 2.500000e+00, float 7.500000e+00, float 1.250000e+01, float 1.750000e+01, float 2.250000e+01, float 2.750000e+01], align 16
@_vq_quantmap__44c1_sm_p8_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44c1_sm_p8_1 = internal global [25 x i64] [i64 2, i64 4, i64 4, i64 4, i64 5, i64 6, i64 5, i64 5, i64 5, i64 5, i64 6, i64 5, i64 5, i64 5, i64 5, i64 6, i64 5, i64 5, i64 5, i64 5, i64 6, i64 6, i64 6, i64 5, i64 5], align 16
@_vq_quantlist__44c1_sm_p8_1 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44c1_sm_p8_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c1_sm_p8_1, ptr @_vq_quantmap__44c1_sm_p8_1, i32 5, i32 5 }, align 8
@_vq_quantthresh__44c1_sm_p8_1 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44c1_sm_p8_1 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__44c1_sm_p9_0 = internal global [169 x i64] [i64 1, i64 5, i64 5, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 4, i64 5, i64 5, i64 11, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 4, i64 5, i64 4, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 6, i64 7, i64 11, i64 9, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 6, i64 7, i64 9, i64 8, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 9, i64 9, i64 7, i64 8, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 9, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 8, i64 11, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 9, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 9, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10], align 16
@_vq_quantlist__44c1_sm_p9_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44c1_sm_p9_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c1_sm_p9_0, ptr @_vq_quantmap__44c1_sm_p9_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__44c1_sm_p9_0 = internal global [12 x float] [float -1.215500e+03, float -9.945000e+02, float -7.735000e+02, float -5.525000e+02, float -3.315000e+02, float -1.105000e+02, float 1.105000e+02, float 3.315000e+02, float 5.525000e+02, float 7.735000e+02, float 9.945000e+02, float 1.215500e+03], align 16
@_vq_quantmap__44c1_sm_p9_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44c1_sm_p9_1 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 10, i64 10, i64 12, i64 12, i64 13, i64 13, i64 6, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 10, i64 10, i64 12, i64 12, i64 14, i64 13, i64 6, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 10, i64 10, i64 12, i64 12, i64 13, i64 13, i64 16, i64 7, i64 7, i64 7, i64 7, i64 9, i64 9, i64 11, i64 11, i64 13, i64 14, i64 13, i64 15, i64 18, i64 7, i64 6, i64 8, i64 7, i64 9, i64 9, i64 11, i64 10, i64 12, i64 12, i64 14, i64 12, i64 19, i64 10, i64 10, i64 8, i64 8, i64 10, i64 10, i64 12, i64 11, i64 13, i64 15, i64 15, i64 15, i64 17, i64 11, i64 11, i64 8, i64 7, i64 11, i64 10, i64 12, i64 12, i64 13, i64 13, i64 14, i64 15, i64 16, i64 17, i64 17, i64 10, i64 11, i64 10, i64 10, i64 13, i64 13, i64 14, i64 13, i64 16, i64 15, i64 17, i64 17, i64 16, i64 10, i64 10, i64 11, i64 11, i64 14, i64 14, i64 16, i64 13, i64 14, i64 14, i64 17, i64 19, i64 17, i64 15, i64 14, i64 11, i64 11, i64 13, i64 13, i64 15, i64 14, i64 16, i64 15, i64 17, i64 16, i64 17, i64 14, i64 14, i64 11, i64 11, i64 14, i64 13, i64 14, i64 14, i64 14, i64 15, i64 17, i64 16, i64 16, i64 16, i64 17, i64 13, i64 13, i64 13, i64 13, i64 16, i64 14, i64 17, i64 15, i64 16, i64 17, i64 18, i64 18, i64 17, i64 13, i64 13, i64 13, i64 13, i64 15, i64 15, i64 16, i64 16], align 16
@_vq_quantlist__44c1_sm_p9_1 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44c1_sm_p9_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c1_sm_p9_1, ptr @_vq_quantmap__44c1_sm_p9_1, i32 13, i32 13 }, align 8
@_vq_quantthresh__44c1_sm_p9_1 = internal global [12 x float] [float -9.350000e+01, float -7.650000e+01, float -5.950000e+01, float -4.250000e+01, float -2.550000e+01, float -8.500000e+00, float 8.500000e+00, float 2.550000e+01, float 4.250000e+01, float 5.950000e+01, float 7.650000e+01, float 9.350000e+01], align 16
@_vq_quantmap__44c1_sm_p9_1 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44c1_sm_p9_2 = internal global [289 x i64] [i64 2, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 6, i64 6, i64 7, i64 7, i64 8, i64 7, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 7, i64 7, i64 8, i64 8, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 11, i64 11, i64 11, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 7, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 11, i64 10, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 9, i64 9, i64 9, i64 10, i64 11, i64 10, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 11, i64 10, i64 11, i64 11, i64 10, i64 11, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 9, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 11, i64 10, i64 11, i64 10, i64 11, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 10, i64 10, i64 10, i64 11, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9], align 16
@_vq_quantlist__44c1_sm_p9_2 = internal global [17 x i64] [i64 8, i64 7, i64 9, i64 6, i64 10, i64 5, i64 11, i64 4, i64 12, i64 3, i64 13, i64 2, i64 14, i64 1, i64 15, i64 0, i64 16], align 16
@_vq_auxt__44c1_sm_p9_2 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c1_sm_p9_2, ptr @_vq_quantmap__44c1_sm_p9_2, i32 17, i32 17 }, align 8
@_vq_quantthresh__44c1_sm_p9_2 = internal global [16 x float] [float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00], align 16
@_vq_quantmap__44c1_sm_p9_2 = internal global [17 x i64] [i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16], align 16
@_huff_lengthlist__44c1_s_long = internal global [100 x i64] [i64 3, i64 4, i64 19, i64 9, i64 10, i64 9, i64 9, i64 10, i64 11, i64 12, i64 4, i64 2, i64 19, i64 5, i64 6, i64 6, i64 8, i64 10, i64 12, i64 11, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 18, i64 18, i64 8, i64 4, i64 18, i64 6, i64 8, i64 7, i64 10, i64 13, i64 14, i64 13, i64 10, i64 5, i64 18, i64 7, i64 4, i64 6, i64 7, i64 10, i64 12, i64 13, i64 9, i64 6, i64 18, i64 7, i64 5, i64 6, i64 7, i64 10, i64 12, i64 13, i64 9, i64 7, i64 18, i64 9, i64 7, i64 6, i64 6, i64 7, i64 10, i64 13, i64 9, i64 9, i64 18, i64 12, i64 9, i64 8, i64 6, i64 6, i64 9, i64 12, i64 10, i64 12, i64 18, i64 15, i64 12, i64 11, i64 9, i64 8, i64 8, i64 11, i64 11, i64 14, i64 18, i64 17, i64 15, i64 13, i64 12, i64 9, i64 10, i64 12], align 16
@_huff_lengthlist__44c1_sm_long = internal global [100 x i64] [i64 3, i64 4, i64 10, i64 9, i64 11, i64 9, i64 10, i64 11, i64 11, i64 13, i64 4, i64 2, i64 11, i64 5, i64 7, i64 7, i64 8, i64 10, i64 12, i64 13, i64 10, i64 10, i64 7, i64 12, i64 8, i64 9, i64 9, i64 10, i64 12, i64 13, i64 8, i64 5, i64 13, i64 6, i64 9, i64 7, i64 10, i64 12, i64 15, i64 15, i64 10, i64 6, i64 7, i64 8, i64 5, i64 5, i64 7, i64 10, i64 12, i64 13, i64 9, i64 6, i64 8, i64 7, i64 5, i64 5, i64 6, i64 9, i64 11, i64 12, i64 9, i64 8, i64 9, i64 9, i64 6, i64 5, i64 5, i64 7, i64 10, i64 13, i64 10, i64 10, i64 10, i64 12, i64 9, i64 7, i64 6, i64 7, i64 9, i64 13, i64 10, i64 13, i64 11, i64 17, i64 11, i64 11, i64 9, i64 8, i64 9, i64 12, i64 12, i64 16, i64 14, i64 17, i64 15, i64 14, i64 12, i64 10, i64 10, i64 12], align 16
@_huff_book__44c2_s_short = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__44c2_s_short, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_resbook_44s_2 = internal global %struct.static_bookblock { [12 x [3 x ptr]] [[3 x ptr] zeroinitializer, [3 x ptr] [ptr null, ptr null, ptr @_44c2_s_p1_0], [3 x ptr] [ptr null, ptr null, ptr @_44c2_s_p2_0], [3 x ptr] [ptr null, ptr null, ptr @_44c2_s_p3_0], [3 x ptr] [ptr null, ptr null, ptr @_44c2_s_p4_0], [3 x ptr] [ptr null, ptr null, ptr @_44c2_s_p5_0], [3 x ptr] [ptr null, ptr null, ptr @_44c2_s_p6_0], [3 x ptr] [ptr @_44c2_s_p7_0, ptr @_44c2_s_p7_1, ptr null], [3 x ptr] [ptr @_44c2_s_p8_0, ptr @_44c2_s_p8_1, ptr null], [3 x ptr] [ptr @_44c2_s_p9_0, ptr @_44c2_s_p9_1, ptr @_44c2_s_p9_2], [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer] }, align 8
@_huff_book__44c2_s_long = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__44c2_s_long, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_lengthlist__44c2_s_short = internal global [100 x i64] [i64 9, i64 9, i64 12, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 6, i64 2, i64 9, i64 4, i64 7, i64 6, i64 8, i64 11, i64 15, i64 17, i64 12, i64 7, i64 8, i64 9, i64 7, i64 9, i64 10, i64 13, i64 15, i64 17, i64 11, i64 4, i64 12, i64 4, i64 9, i64 5, i64 8, i64 11, i64 16, i64 17, i64 12, i64 6, i64 7, i64 6, i64 6, i64 6, i64 8, i64 11, i64 15, i64 17, i64 11, i64 5, i64 9, i64 5, i64 6, i64 5, i64 6, i64 10, i64 15, i64 15, i64 12, i64 7, i64 11, i64 7, i64 7, i64 6, i64 7, i64 10, i64 13, i64 16, i64 13, i64 8, i64 11, i64 9, i64 8, i64 6, i64 7, i64 10, i64 12, i64 16, i64 13, i64 9, i64 9, i64 8, i64 5, i64 5, i64 6, i64 9, i64 12, i64 14, i64 16, i64 10, i64 9, i64 9, i64 6, i64 5, i64 6, i64 8, i64 11, i64 14], align 16
@_44c2_s_p1_0 = internal global %struct.static_codebook { i64 8, i64 6561, ptr @_vq_lengthlist__44c2_s_p1_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__44c2_s_p1_0, ptr null, ptr @_vq_auxt__44c2_s_p1_0, ptr null, i32 0 }, align 8
@_44c2_s_p2_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__44c2_s_p2_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44c2_s_p2_0, ptr null, ptr @_vq_auxt__44c2_s_p2_0, ptr null, i32 0 }, align 8
@_44c2_s_p3_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__44c2_s_p3_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44c2_s_p3_0, ptr null, ptr @_vq_auxt__44c2_s_p3_0, ptr null, i32 0 }, align 8
@_44c2_s_p4_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__44c2_s_p4_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44c2_s_p4_0, ptr null, ptr @_vq_auxt__44c2_s_p4_0, ptr null, i32 0 }, align 8
@_44c2_s_p5_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__44c2_s_p5_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44c2_s_p5_0, ptr null, ptr @_vq_auxt__44c2_s_p5_0, ptr null, i32 0 }, align 8
@_44c2_s_p6_0 = internal global %struct.static_codebook { i64 2, i64 289, ptr @_vq_lengthlist__44c2_s_p6_0, i32 1, i64 -529530880, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__44c2_s_p6_0, ptr null, ptr @_vq_auxt__44c2_s_p6_0, ptr null, i32 0 }, align 8
@_44c2_s_p7_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__44c2_s_p7_0, i32 1, i64 -529137664, i64 1618345984, i32 2, i32 0, ptr @_vq_quantlist__44c2_s_p7_0, ptr null, ptr @_vq_auxt__44c2_s_p7_0, ptr null, i32 0 }, align 8
@_44c2_s_p7_1 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__44c2_s_p7_1, i32 1, i64 -531365888, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44c2_s_p7_1, ptr null, ptr @_vq_auxt__44c2_s_p7_1, ptr null, i32 0 }, align 8
@_44c2_s_p8_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44c2_s_p8_0, i32 1, i64 -526516224, i64 1616117760, i32 4, i32 0, ptr @_vq_quantlist__44c2_s_p8_0, ptr null, ptr @_vq_auxt__44c2_s_p8_0, ptr null, i32 0 }, align 8
@_44c2_s_p8_1 = internal global %struct.static_codebook { i64 2, i64 25, ptr @_vq_lengthlist__44c2_s_p8_1, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44c2_s_p8_1, ptr null, ptr @_vq_auxt__44c2_s_p8_1, ptr null, i32 0 }, align 8
@_44c2_s_p9_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44c2_s_p9_0, i32 1, i64 -514541568, i64 1627103232, i32 4, i32 0, ptr @_vq_quantlist__44c2_s_p9_0, ptr null, ptr @_vq_auxt__44c2_s_p9_0, ptr null, i32 0 }, align 8
@_44c2_s_p9_1 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44c2_s_p9_1, i32 1, i64 -522616832, i64 1620115456, i32 4, i32 0, ptr @_vq_quantlist__44c2_s_p9_1, ptr null, ptr @_vq_auxt__44c2_s_p9_1, ptr null, i32 0 }, align 8
@_44c2_s_p9_2 = internal global %struct.static_codebook { i64 2, i64 289, ptr @_vq_lengthlist__44c2_s_p9_2, i32 1, i64 -529530880, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__44c2_s_p9_2, ptr null, ptr @_vq_auxt__44c2_s_p9_2, ptr null, i32 0 }, align 8
@_vq_quantlist__44c2_s_p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44c2_s_p1_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c2_s_p1_0, ptr @_vq_quantmap__44c2_s_p1_0, i32 3, i32 3 }, align 8
@_vq_lengthlist__44c2_s_p1_0 = internal global <{ [1641 x i64], [4920 x i64] }> <{ [1641 x i64] [i64 2, i64 4, i64 4, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 6, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 10, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 8, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 10, i64 9], [4920 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c2_s_p1_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__44c2_s_p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_quantlist__44c2_s_p2_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44c2_s_p2_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c2_s_p2_0, ptr @_vq_quantmap__44c2_s_p2_0, i32 5, i32 5 }, align 8
@_vq_lengthlist__44c2_s_p2_0 = internal global <{ [443 x i64], [182 x i64] }> <{ [443 x i64] [i64 1, i64 4, i64 4, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 6, i64 6, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 6, i64 6, i64 0, i64 0, i64 0, i64 8, i64 9, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 11, i64 10, i64 0, i64 0, i64 0, i64 11, i64 11, i64 0, i64 0, i64 0, i64 11, i64 11, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 10, i64 11, i64 0, i64 0, i64 0, i64 11, i64 11, i64 0, i64 0, i64 0, i64 11, i64 11, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 11, i64 11, i64 0, i64 0, i64 0, i64 11, i64 11, i64 0, i64 0, i64 0, i64 11, i64 11, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 11, i64 11, i64 0, i64 0, i64 0, i64 11, i64 11, i64 0, i64 0, i64 0, i64 11, i64 11, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 11, i64 12, i64 0, i64 0, i64 0, i64 11, i64 12, i64 0, i64 0, i64 0, i64 12, i64 11, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 12, i64 11, i64 0, i64 0, i64 0, i64 11, i64 11, i64 0, i64 0, i64 0, i64 11, i64 11], [182 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c2_s_p2_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44c2_s_p2_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_quantlist__44c2_s_p3_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44c2_s_p3_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c2_s_p3_0, ptr @_vq_quantmap__44c2_s_p3_0, i32 5, i32 5 }, align 8
@_vq_lengthlist__44c2_s_p3_0 = internal global <{ [105 x i64], [520 x i64] }> <{ [105 x i64] [i64 2, i64 4, i64 3, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 4, i64 4, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 4, i64 5, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 6, i64 6, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 6, i64 6, i64 7, i64 7], [520 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c2_s_p3_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44c2_s_p3_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_quantlist__44c2_s_p4_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__44c2_s_p4_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c2_s_p4_0, ptr @_vq_quantmap__44c2_s_p4_0, i32 9, i32 9 }, align 8
@_vq_lengthlist__44c2_s_p4_0 = internal global <{ [68 x i64], [13 x i64] }> <{ [68 x i64] [i64 1, i64 3, i64 3, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 6, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 6, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 6, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9], [13 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c2_s_p4_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__44c2_s_p4_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__44c2_s_p5_0 = internal global [81 x i64] [i64 1, i64 3, i64 3, i64 6, i64 6, i64 6, i64 6, i64 8, i64 8, i64 0, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 0, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 0, i64 7, i64 7, i64 8, i64 7, i64 8, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 0, i64 0, i64 0, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 0, i64 0, i64 0, i64 10, i64 10, i64 9, i64 9, i64 11, i64 11, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 11, i64 11], align 16
@_vq_quantlist__44c2_s_p5_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__44c2_s_p5_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c2_s_p5_0, ptr @_vq_quantmap__44c2_s_p5_0, i32 9, i32 9 }, align 8
@_vq_quantthresh__44c2_s_p5_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__44c2_s_p5_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__44c2_s_p6_0 = internal global [289 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 0, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 0, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 0, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 11, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 11, i64 11, i64 11, i64 12, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 12, i64 14, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 13, i64 14], align 16
@_vq_quantlist__44c2_s_p6_0 = internal global [17 x i64] [i64 8, i64 7, i64 9, i64 6, i64 10, i64 5, i64 11, i64 4, i64 12, i64 3, i64 13, i64 2, i64 14, i64 1, i64 15, i64 0, i64 16], align 16
@_vq_auxt__44c2_s_p6_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c2_s_p6_0, ptr @_vq_quantmap__44c2_s_p6_0, i32 17, i32 17 }, align 8
@_vq_quantthresh__44c2_s_p6_0 = internal global [16 x float] [float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00], align 16
@_vq_quantmap__44c2_s_p6_0 = internal global [17 x i64] [i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16], align 16
@_vq_lengthlist__44c2_s_p7_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 6, i64 7, i64 6, i64 6, i64 4, i64 7, i64 7, i64 10, i64 9, i64 9, i64 10, i64 9, i64 9, i64 5, i64 7, i64 7, i64 10, i64 9, i64 9, i64 10, i64 9, i64 9, i64 6, i64 10, i64 9, i64 10, i64 10, i64 10, i64 11, i64 10, i64 10, i64 6, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 9, i64 9, i64 6, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 9, i64 9, i64 7, i64 10, i64 10, i64 11, i64 10, i64 10, i64 11, i64 11, i64 10, i64 6, i64 9, i64 9, i64 10, i64 9, i64 9, i64 11, i64 10, i64 10, i64 6, i64 9, i64 9, i64 10, i64 9, i64 10, i64 11, i64 10, i64 10], align 16
@_vq_quantlist__44c2_s_p7_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44c2_s_p7_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c2_s_p7_0, ptr @_vq_quantmap__44c2_s_p7_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__44c2_s_p7_0 = internal global [2 x float] [float -5.500000e+00, float 5.500000e+00], align 4
@_vq_quantmap__44c2_s_p7_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44c2_s_p7_1 = internal global [121 x i64] [i64 2, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 10, i64 6, i64 6, i64 6, i64 6, i64 7, i64 7, i64 8, i64 7, i64 8, i64 8, i64 9, i64 6, i64 6, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 10, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 10, i64 9, i64 9, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 9, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 9, i64 10, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 9, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8], align 16
@_vq_quantlist__44c2_s_p7_1 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__44c2_s_p7_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c2_s_p7_1, ptr @_vq_quantmap__44c2_s_p7_1, i32 11, i32 11 }, align 8
@_vq_quantthresh__44c2_s_p7_1 = internal global [10 x float] [float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00], align 16
@_vq_quantmap__44c2_s_p7_1 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_lengthlist__44c2_s_p8_0 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 6, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 9, i64 8, i64 9, i64 9, i64 10, i64 10, i64 7, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 8, i64 9, i64 10, i64 9, i64 11, i64 11, i64 0, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 0, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 0, i64 12, i64 12, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 13, i64 12, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 12, i64 0, i64 0, i64 0, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 10, i64 10, i64 9, i64 9, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 0, i64 0, i64 0, i64 13, i64 13, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 14, i64 14, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 12, i64 12, i64 11, i64 12, i64 12, i64 12, i64 14, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 14, i64 13], align 16
@_vq_quantlist__44c2_s_p8_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44c2_s_p8_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c2_s_p8_0, ptr @_vq_quantmap__44c2_s_p8_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__44c2_s_p8_0 = internal global [12 x float] [float -2.750000e+01, float -2.250000e+01, float -1.750000e+01, float -1.250000e+01, float -7.500000e+00, float -2.500000e+00, float 2.500000e+00, float 7.500000e+00, float 1.250000e+01, float 1.750000e+01, float 2.250000e+01, float 2.750000e+01], align 16
@_vq_quantmap__44c2_s_p8_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44c2_s_p8_1 = internal global [25 x i64] [i64 2, i64 4, i64 4, i64 4, i64 5, i64 6, i64 5, i64 5, i64 5, i64 5, i64 6, i64 5, i64 5, i64 5, i64 5, i64 6, i64 5, i64 5, i64 5, i64 5, i64 6, i64 6, i64 6, i64 5, i64 5], align 16
@_vq_quantlist__44c2_s_p8_1 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44c2_s_p8_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c2_s_p8_1, ptr @_vq_quantmap__44c2_s_p8_1, i32 5, i32 5 }, align 8
@_vq_quantthresh__44c2_s_p8_1 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44c2_s_p8_1 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__44c2_s_p9_0 = internal global [169 x i64] [i64 1, i64 5, i64 4, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 5, i64 7, i64 7, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 5, i64 9, i64 6, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9], align 16
@_vq_quantlist__44c2_s_p9_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44c2_s_p9_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c2_s_p9_0, ptr @_vq_quantmap__44c2_s_p9_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__44c2_s_p9_0 = internal global [12 x float] [float -1.215500e+03, float -9.945000e+02, float -7.735000e+02, float -5.525000e+02, float -3.315000e+02, float -1.105000e+02, float 1.105000e+02, float 3.315000e+02, float 5.525000e+02, float 7.735000e+02, float 9.945000e+02, float 1.215500e+03], align 16
@_vq_quantmap__44c2_s_p9_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44c2_s_p9_1 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 11, i64 11, i64 12, i64 12, i64 6, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 10, i64 10, i64 12, i64 11, i64 13, i64 13, i64 6, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 11, i64 11, i64 12, i64 13, i64 16, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 13, i64 13, i64 16, i64 14, i64 16, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 13, i64 13, i64 15, i64 13, i64 16, i64 10, i64 10, i64 8, i64 8, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 15, i64 14, i64 16, i64 11, i64 11, i64 8, i64 8, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 14, i64 13, i64 16, i64 16, i64 16, i64 10, i64 11, i64 10, i64 10, i64 12, i64 12, i64 14, i64 13, i64 13, i64 13, i64 16, i64 16, i64 16, i64 10, i64 9, i64 10, i64 7, i64 13, i64 12, i64 13, i64 13, i64 13, i64 13, i64 16, i64 16, i64 16, i64 14, i64 15, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 15, i64 14, i64 16, i64 16, i64 16, i64 16, i64 14, i64 11, i64 9, i64 12, i64 9, i64 15, i64 13, i64 13, i64 14, i64 16, i64 16, i64 16, i64 16, i64 16, i64 13, i64 13, i64 12, i64 12, i64 14, i64 15, i64 16, i64 15, i64 16, i64 16, i64 15, i64 16, i64 16, i64 13, i64 12, i64 12, i64 11, i64 15, i64 13, i64 14, i64 15], align 16
@_vq_quantlist__44c2_s_p9_1 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44c2_s_p9_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c2_s_p9_1, ptr @_vq_quantmap__44c2_s_p9_1, i32 13, i32 13 }, align 8
@_vq_quantthresh__44c2_s_p9_1 = internal global [12 x float] [float -9.350000e+01, float -7.650000e+01, float -5.950000e+01, float -4.250000e+01, float -2.550000e+01, float -8.500000e+00, float 8.500000e+00, float 2.550000e+01, float 4.250000e+01, float 5.950000e+01, float 7.650000e+01, float 9.350000e+01], align 16
@_vq_quantmap__44c2_s_p9_1 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44c2_s_p9_2 = internal global [289 x i64] [i64 2, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 7, i64 7, i64 8, i64 8, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 11, i64 10, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 7, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 11, i64 11, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 11, i64 11, i64 10, i64 11, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 9, i64 9, i64 11, i64 10, i64 10, i64 11, i64 10, i64 10, i64 11, i64 9, i64 9, i64 10, i64 10, i64 9, i64 9, i64 10, i64 10, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 10, i64 11, i64 10, i64 10, i64 9, i64 9, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 10, i64 10, i64 9, i64 10, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 10, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 10, i64 11, i64 11, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10], align 16
@_vq_quantlist__44c2_s_p9_2 = internal global [17 x i64] [i64 8, i64 7, i64 9, i64 6, i64 10, i64 5, i64 11, i64 4, i64 12, i64 3, i64 13, i64 2, i64 14, i64 1, i64 15, i64 0, i64 16], align 16
@_vq_auxt__44c2_s_p9_2 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c2_s_p9_2, ptr @_vq_quantmap__44c2_s_p9_2, i32 17, i32 17 }, align 8
@_vq_quantthresh__44c2_s_p9_2 = internal global [16 x float] [float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00], align 16
@_vq_quantmap__44c2_s_p9_2 = internal global [17 x i64] [i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16], align 16
@_huff_lengthlist__44c2_s_long = internal global [100 x i64] [i64 5, i64 5, i64 12, i64 10, i64 11, i64 10, i64 10, i64 10, i64 11, i64 13, i64 5, i64 1, i64 9, i64 5, i64 8, i64 7, i64 8, i64 10, i64 13, i64 13, i64 12, i64 9, i64 8, i64 11, i64 7, i64 8, i64 9, i64 11, i64 13, i64 15, i64 9, i64 5, i64 12, i64 6, i64 9, i64 8, i64 10, i64 12, i64 15, i64 14, i64 12, i64 7, i64 6, i64 8, i64 5, i64 6, i64 7, i64 10, i64 12, i64 13, i64 10, i64 7, i64 8, i64 7, i64 6, i64 6, i64 7, i64 9, i64 12, i64 12, i64 10, i64 8, i64 9, i64 9, i64 7, i64 6, i64 6, i64 7, i64 10, i64 11, i64 10, i64 9, i64 10, i64 11, i64 9, i64 8, i64 6, i64 6, i64 8, i64 11, i64 10, i64 12, i64 13, i64 15, i64 11, i64 10, i64 8, i64 7, i64 8, i64 11, i64 11, i64 13, i64 16, i64 16, i64 14, i64 13, i64 11, i64 9, i64 9, i64 10], align 16
@_huff_book__44c3_s_short = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__44c3_s_short, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_resbook_44s_3 = internal global %struct.static_bookblock { [12 x [3 x ptr]] [[3 x ptr] zeroinitializer, [3 x ptr] [ptr null, ptr null, ptr @_44c3_s_p1_0], [3 x ptr] [ptr null, ptr null, ptr @_44c3_s_p2_0], [3 x ptr] [ptr null, ptr null, ptr @_44c3_s_p3_0], [3 x ptr] [ptr null, ptr null, ptr @_44c3_s_p4_0], [3 x ptr] [ptr null, ptr null, ptr @_44c3_s_p5_0], [3 x ptr] [ptr null, ptr null, ptr @_44c3_s_p6_0], [3 x ptr] [ptr @_44c3_s_p7_0, ptr @_44c3_s_p7_1, ptr null], [3 x ptr] [ptr @_44c3_s_p8_0, ptr @_44c3_s_p8_1, ptr null], [3 x ptr] [ptr @_44c3_s_p9_0, ptr @_44c3_s_p9_1, ptr @_44c3_s_p9_2], [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer] }, align 8
@_huff_book__44c3_s_long = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__44c3_s_long, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_lengthlist__44c3_s_short = internal global [100 x i64] [i64 10, i64 10, i64 13, i64 12, i64 13, i64 12, i64 12, i64 12, i64 12, i64 13, i64 8, i64 3, i64 11, i64 5, i64 10, i64 5, i64 7, i64 11, i64 14, i64 16, i64 11, i64 6, i64 9, i64 8, i64 7, i64 7, i64 9, i64 12, i64 15, i64 16, i64 12, i64 4, i64 12, i64 4, i64 10, i64 5, i64 8, i64 12, i64 15, i64 16, i64 12, i64 6, i64 8, i64 7, i64 5, i64 5, i64 7, i64 11, i64 14, i64 15, i64 11, i64 4, i64 9, i64 4, i64 6, i64 4, i64 6, i64 9, i64 13, i64 15, i64 10, i64 6, i64 10, i64 7, i64 7, i64 5, i64 6, i64 9, i64 13, i64 15, i64 12, i64 9, i64 11, i64 9, i64 8, i64 6, i64 7, i64 9, i64 12, i64 15, i64 13, i64 11, i64 10, i64 9, i64 6, i64 5, i64 5, i64 8, i64 11, i64 14, i64 16, i64 12, i64 11, i64 10, i64 6, i64 5, i64 6, i64 8, i64 10, i64 14], align 16
@_44c3_s_p1_0 = internal global %struct.static_codebook { i64 8, i64 6561, ptr @_vq_lengthlist__44c3_s_p1_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__44c3_s_p1_0, ptr null, ptr @_vq_auxt__44c3_s_p1_0, ptr null, i32 0 }, align 8
@_44c3_s_p2_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__44c3_s_p2_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44c3_s_p2_0, ptr null, ptr @_vq_auxt__44c3_s_p2_0, ptr null, i32 0 }, align 8
@_44c3_s_p3_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__44c3_s_p3_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44c3_s_p3_0, ptr null, ptr @_vq_auxt__44c3_s_p3_0, ptr null, i32 0 }, align 8
@_44c3_s_p4_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__44c3_s_p4_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44c3_s_p4_0, ptr null, ptr @_vq_auxt__44c3_s_p4_0, ptr null, i32 0 }, align 8
@_44c3_s_p5_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__44c3_s_p5_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44c3_s_p5_0, ptr null, ptr @_vq_auxt__44c3_s_p5_0, ptr null, i32 0 }, align 8
@_44c3_s_p6_0 = internal global %struct.static_codebook { i64 2, i64 289, ptr @_vq_lengthlist__44c3_s_p6_0, i32 1, i64 -529530880, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__44c3_s_p6_0, ptr null, ptr @_vq_auxt__44c3_s_p6_0, ptr null, i32 0 }, align 8
@_44c3_s_p7_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__44c3_s_p7_0, i32 1, i64 -529137664, i64 1618345984, i32 2, i32 0, ptr @_vq_quantlist__44c3_s_p7_0, ptr null, ptr @_vq_auxt__44c3_s_p7_0, ptr null, i32 0 }, align 8
@_44c3_s_p7_1 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__44c3_s_p7_1, i32 1, i64 -531365888, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44c3_s_p7_1, ptr null, ptr @_vq_auxt__44c3_s_p7_1, ptr null, i32 0 }, align 8
@_44c3_s_p8_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44c3_s_p8_0, i32 1, i64 -526516224, i64 1616117760, i32 4, i32 0, ptr @_vq_quantlist__44c3_s_p8_0, ptr null, ptr @_vq_auxt__44c3_s_p8_0, ptr null, i32 0 }, align 8
@_44c3_s_p8_1 = internal global %struct.static_codebook { i64 2, i64 25, ptr @_vq_lengthlist__44c3_s_p8_1, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44c3_s_p8_1, ptr null, ptr @_vq_auxt__44c3_s_p8_1, ptr null, i32 0 }, align 8
@_44c3_s_p9_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44c3_s_p9_0, i32 1, i64 -514332672, i64 1627381760, i32 4, i32 0, ptr @_vq_quantlist__44c3_s_p9_0, ptr null, ptr @_vq_auxt__44c3_s_p9_0, ptr null, i32 0 }, align 8
@_44c3_s_p9_1 = internal global %struct.static_codebook { i64 2, i64 225, ptr @_vq_lengthlist__44c3_s_p9_1, i32 1, i64 -522338304, i64 1620115456, i32 4, i32 0, ptr @_vq_quantlist__44c3_s_p9_1, ptr null, ptr @_vq_auxt__44c3_s_p9_1, ptr null, i32 0 }, align 8
@_44c3_s_p9_2 = internal global %struct.static_codebook { i64 2, i64 289, ptr @_vq_lengthlist__44c3_s_p9_2, i32 1, i64 -529530880, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__44c3_s_p9_2, ptr null, ptr @_vq_auxt__44c3_s_p9_2, ptr null, i32 0 }, align 8
@_vq_quantlist__44c3_s_p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44c3_s_p1_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c3_s_p1_0, ptr @_vq_quantmap__44c3_s_p1_0, i32 3, i32 3 }, align 8
@_vq_lengthlist__44c3_s_p1_0 = internal global <{ [1641 x i64], [4920 x i64] }> <{ [1641 x i64] [i64 2, i64 4, i64 4, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 6, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 10, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 8, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 10, i64 9], [4920 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c3_s_p1_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__44c3_s_p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_quantlist__44c3_s_p2_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44c3_s_p2_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c3_s_p2_0, ptr @_vq_quantmap__44c3_s_p2_0, i32 5, i32 5 }, align 8
@_vq_lengthlist__44c3_s_p2_0 = internal global <{ [443 x i64], [182 x i64] }> <{ [443 x i64] [i64 2, i64 5, i64 5, i64 0, i64 0, i64 0, i64 5, i64 5, i64 0, i64 0, i64 0, i64 5, i64 5, i64 0, i64 0, i64 0, i64 8, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 6, i64 6, i64 0, i64 0, i64 0, i64 8, i64 7, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 10, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 5, i64 6, i64 0, i64 0, i64 0, i64 7, i64 8, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 9, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 7, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 7, i64 8, i64 0, i64 0, i64 0, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 7, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 8, i64 7, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 8, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 10, i64 0, i64 0, i64 0, i64 9, i64 9, i64 0, i64 0, i64 0, i64 9, i64 9, i64 0, i64 0, i64 0, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 10, i64 9, i64 0, i64 0, i64 0, i64 9, i64 9, i64 0, i64 0, i64 0, i64 9, i64 9, i64 0, i64 0, i64 0, i64 10, i64 10], [182 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c3_s_p2_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44c3_s_p2_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_quantlist__44c3_s_p3_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44c3_s_p3_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c3_s_p3_0, ptr @_vq_quantmap__44c3_s_p3_0, i32 5, i32 5 }, align 8
@_vq_lengthlist__44c3_s_p3_0 = internal global <{ [105 x i64], [520 x i64] }> <{ [105 x i64] [i64 2, i64 3, i64 4, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 4, i64 4, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 4, i64 4, i64 6, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 6, i64 6, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 6, i64 7, i64 8, i64 8], [520 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c3_s_p3_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44c3_s_p3_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_quantlist__44c3_s_p4_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__44c3_s_p4_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c3_s_p4_0, ptr @_vq_quantmap__44c3_s_p4_0, i32 9, i32 9 }, align 8
@_vq_lengthlist__44c3_s_p4_0 = internal global <{ [68 x i64], [13 x i64] }> <{ [68 x i64] [i64 2, i64 3, i64 3, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 4, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 4, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 5, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9], [13 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c3_s_p4_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__44c3_s_p4_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__44c3_s_p5_0 = internal global [81 x i64] [i64 2, i64 3, i64 3, i64 5, i64 5, i64 7, i64 7, i64 9, i64 8, i64 0, i64 4, i64 4, i64 7, i64 7, i64 7, i64 7, i64 9, i64 9, i64 0, i64 5, i64 5, i64 6, i64 7, i64 7, i64 7, i64 9, i64 9, i64 0, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 7, i64 7, i64 7, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 10, i64 10, i64 9, i64 9, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 10, i64 10], align 16
@_vq_quantlist__44c3_s_p5_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__44c3_s_p5_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c3_s_p5_0, ptr @_vq_quantmap__44c3_s_p5_0, i32 9, i32 9 }, align 8
@_vq_quantthresh__44c3_s_p5_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__44c3_s_p5_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__44c3_s_p6_0 = internal global [289 x i64] [i64 2, i64 3, i64 3, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 0, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 0, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 0, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 12, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 10, i64 10, i64 11, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13], align 16
@_vq_quantlist__44c3_s_p6_0 = internal global [17 x i64] [i64 8, i64 7, i64 9, i64 6, i64 10, i64 5, i64 11, i64 4, i64 12, i64 3, i64 13, i64 2, i64 14, i64 1, i64 15, i64 0, i64 16], align 16
@_vq_auxt__44c3_s_p6_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c3_s_p6_0, ptr @_vq_quantmap__44c3_s_p6_0, i32 17, i32 17 }, align 8
@_vq_quantthresh__44c3_s_p6_0 = internal global [16 x float] [float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00], align 16
@_vq_quantmap__44c3_s_p6_0 = internal global [17 x i64] [i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16], align 16
@_vq_lengthlist__44c3_s_p7_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 6, i64 7, i64 6, i64 6, i64 4, i64 7, i64 7, i64 10, i64 9, i64 9, i64 10, i64 9, i64 9, i64 5, i64 7, i64 7, i64 10, i64 9, i64 9, i64 10, i64 9, i64 9, i64 6, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 10, i64 10, i64 6, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 6, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 7, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 10, i64 11, i64 6, i64 9, i64 9, i64 10, i64 10, i64 9, i64 11, i64 10, i64 10, i64 6, i64 9, i64 9, i64 10, i64 9, i64 9, i64 10, i64 10, i64 10], align 16
@_vq_quantlist__44c3_s_p7_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44c3_s_p7_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c3_s_p7_0, ptr @_vq_quantmap__44c3_s_p7_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__44c3_s_p7_0 = internal global [2 x float] [float -5.500000e+00, float 5.500000e+00], align 4
@_vq_quantmap__44c3_s_p7_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44c3_s_p7_1 = internal global [121 x i64] [i64 2, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 10, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 10, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 10, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9], align 16
@_vq_quantlist__44c3_s_p7_1 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__44c3_s_p7_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c3_s_p7_1, ptr @_vq_quantmap__44c3_s_p7_1, i32 11, i32 11 }, align 8
@_vq_quantthresh__44c3_s_p7_1 = internal global [10 x float] [float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00], align 16
@_vq_quantmap__44c3_s_p7_1 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_lengthlist__44c3_s_p8_0 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 7, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 6, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 7, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 10, i64 11, i64 11, i64 0, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 0, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 0, i64 11, i64 12, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 12, i64 0, i64 13, i64 13, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 10, i64 9, i64 9, i64 9, i64 10, i64 11, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 10, i64 10, i64 9, i64 9, i64 11, i64 11, i64 11, i64 11, i64 12, i64 13, i64 0, i64 0, i64 0, i64 13, i64 13, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 14, i64 14, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 12, i64 12, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 12, i64 12, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13], align 16
@_vq_quantlist__44c3_s_p8_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44c3_s_p8_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c3_s_p8_0, ptr @_vq_quantmap__44c3_s_p8_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__44c3_s_p8_0 = internal global [12 x float] [float -2.750000e+01, float -2.250000e+01, float -1.750000e+01, float -1.250000e+01, float -7.500000e+00, float -2.500000e+00, float 2.500000e+00, float 7.500000e+00, float 1.250000e+01, float 1.750000e+01, float 2.250000e+01, float 2.750000e+01], align 16
@_vq_quantmap__44c3_s_p8_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44c3_s_p8_1 = internal global [25 x i64] [i64 2, i64 4, i64 4, i64 5, i64 5, i64 6, i64 5, i64 5, i64 5, i64 5, i64 6, i64 4, i64 5, i64 5, i64 5, i64 6, i64 5, i64 5, i64 5, i64 5, i64 6, i64 6, i64 6, i64 5, i64 5], align 16
@_vq_quantlist__44c3_s_p8_1 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44c3_s_p8_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c3_s_p8_1, ptr @_vq_quantmap__44c3_s_p8_1, i32 5, i32 5 }, align 8
@_vq_quantthresh__44c3_s_p8_1 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44c3_s_p8_1 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__44c3_s_p9_0 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 5, i64 10, i64 7, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 5, i64 8, i64 6, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9], align 16
@_vq_quantlist__44c3_s_p9_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44c3_s_p9_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c3_s_p9_0, ptr @_vq_quantmap__44c3_s_p9_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__44c3_s_p9_0 = internal global [12 x float] [float -1.402500e+03, float -1.147500e+03, float -8.925000e+02, float -6.375000e+02, float -3.825000e+02, float -1.275000e+02, float 1.275000e+02, float 3.825000e+02, float 6.375000e+02, float 8.925000e+02, float 1.147500e+03, float 1.402500e+03], align 16
@_vq_quantmap__44c3_s_p9_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44c3_s_p9_1 = internal global [225 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 6, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 10, i64 9, i64 11, i64 11, i64 13, i64 12, i64 13, i64 14, i64 6, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 17, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 12, i64 12, i64 14, i64 13, i64 14, i64 14, i64 17, i64 8, i64 7, i64 8, i64 7, i64 9, i64 9, i64 10, i64 10, i64 12, i64 12, i64 13, i64 13, i64 13, i64 14, i64 17, i64 11, i64 11, i64 8, i64 8, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 15, i64 14, i64 17, i64 11, i64 11, i64 8, i64 7, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 14, i64 14, i64 13, i64 17, i64 17, i64 17, i64 10, i64 11, i64 10, i64 10, i64 12, i64 12, i64 13, i64 12, i64 13, i64 13, i64 14, i64 14, i64 17, i64 16, i64 16, i64 10, i64 10, i64 11, i64 9, i64 13, i64 12, i64 13, i64 13, i64 13, i64 13, i64 14, i64 14, i64 16, i64 16, i64 15, i64 13, i64 15, i64 11, i64 12, i64 12, i64 12, i64 14, i64 14, i64 14, i64 14, i64 14, i64 15, i64 16, i64 16, i64 16, i64 14, i64 14, i64 11, i64 9, i64 12, i64 10, i64 13, i64 13, i64 14, i64 14, i64 14, i64 14, i64 16, i64 16, i64 16, i64 16, i64 16, i64 12, i64 13, i64 12, i64 12, i64 13, i64 14, i64 14, i64 14, i64 15, i64 15, i64 15, i64 16, i64 16, i64 15, i64 16, i64 13, i64 11, i64 13, i64 10, i64 14, i64 12, i64 15, i64 14, i64 16, i64 14, i64 15, i64 16, i64 16, i64 16, i64 16, i64 15, i64 15, i64 13, i64 13, i64 13, i64 13, i64 14, i64 14, i64 16, i64 16, i64 16, i64 16, i64 16, i64 15, i64 16, i64 16, i64 14, i64 13, i64 12, i64 13, i64 13, i64 14, i64 16, i64 16, i64 16], align 16
@_vq_quantlist__44c3_s_p9_1 = internal global [15 x i64] [i64 7, i64 6, i64 8, i64 5, i64 9, i64 4, i64 10, i64 3, i64 11, i64 2, i64 12, i64 1, i64 13, i64 0, i64 14], align 16
@_vq_auxt__44c3_s_p9_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c3_s_p9_1, ptr @_vq_quantmap__44c3_s_p9_1, i32 15, i32 15 }, align 8
@_vq_quantthresh__44c3_s_p9_1 = internal global [14 x float] [float -1.105000e+02, float -9.350000e+01, float -7.650000e+01, float -5.950000e+01, float -4.250000e+01, float -2.550000e+01, float -8.500000e+00, float 8.500000e+00, float 2.550000e+01, float 4.250000e+01, float 5.950000e+01, float 7.650000e+01, float 9.350000e+01, float 1.105000e+02], align 16
@_vq_quantmap__44c3_s_p9_1 = internal global [15 x i64] [i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14], align 16
@_vq_lengthlist__44c3_s_p9_2 = internal global [289 x i64] [i64 3, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 8, i64 10, i64 5, i64 5, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 5, i64 5, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 8, i64 7, i64 8, i64 8, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 10, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 10, i64 11, i64 10, i64 9, i64 9, i64 9, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 10, i64 11, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9], align 16
@_vq_quantlist__44c3_s_p9_2 = internal global [17 x i64] [i64 8, i64 7, i64 9, i64 6, i64 10, i64 5, i64 11, i64 4, i64 12, i64 3, i64 13, i64 2, i64 14, i64 1, i64 15, i64 0, i64 16], align 16
@_vq_auxt__44c3_s_p9_2 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c3_s_p9_2, ptr @_vq_quantmap__44c3_s_p9_2, i32 17, i32 17 }, align 8
@_vq_quantthresh__44c3_s_p9_2 = internal global [16 x float] [float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00], align 16
@_vq_quantmap__44c3_s_p9_2 = internal global [17 x i64] [i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16], align 16
@_huff_lengthlist__44c3_s_long = internal global [100 x i64] [i64 4, i64 5, i64 11, i64 10, i64 12, i64 10, i64 10, i64 10, i64 11, i64 12, i64 4, i64 2, i64 11, i64 5, i64 11, i64 6, i64 7, i64 9, i64 13, i64 16, i64 11, i64 11, i64 7, i64 11, i64 6, i64 8, i64 8, i64 9, i64 11, i64 12, i64 10, i64 5, i64 11, i64 6, i64 10, i64 7, i64 9, i64 11, i64 16, i64 16, i64 14, i64 9, i64 6, i64 9, i64 4, i64 5, i64 7, i64 8, i64 11, i64 13, i64 10, i64 6, i64 7, i64 7, i64 5, i64 5, i64 6, i64 8, i64 10, i64 11, i64 10, i64 7, i64 8, i64 8, i64 6, i64 6, i64 5, i64 7, i64 9, i64 10, i64 10, i64 9, i64 8, i64 11, i64 8, i64 7, i64 6, i64 6, i64 7, i64 10, i64 10, i64 12, i64 10, i64 14, i64 9, i64 9, i64 7, i64 7, i64 7, i64 9, i64 10, i64 14, i64 11, i64 16, i64 12, i64 12, i64 9, i64 8, i64 8, i64 9], align 16
@_huff_book__44c4_s_short = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__44c4_s_short, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_resbook_44s_4 = internal global %struct.static_bookblock { [12 x [3 x ptr]] [[3 x ptr] zeroinitializer, [3 x ptr] [ptr null, ptr null, ptr @_44c4_s_p1_0], [3 x ptr] [ptr null, ptr null, ptr @_44c4_s_p2_0], [3 x ptr] [ptr null, ptr null, ptr @_44c4_s_p3_0], [3 x ptr] [ptr null, ptr null, ptr @_44c4_s_p4_0], [3 x ptr] [ptr null, ptr null, ptr @_44c4_s_p5_0], [3 x ptr] [ptr null, ptr null, ptr @_44c4_s_p6_0], [3 x ptr] [ptr @_44c4_s_p7_0, ptr @_44c4_s_p7_1, ptr null], [3 x ptr] [ptr @_44c4_s_p8_0, ptr @_44c4_s_p8_1, ptr null], [3 x ptr] [ptr @_44c4_s_p9_0, ptr @_44c4_s_p9_1, ptr @_44c4_s_p9_2], [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer] }, align 8
@_huff_book__44c4_s_long = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__44c4_s_long, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_lengthlist__44c4_s_short = internal global [100 x i64] [i64 4, i64 9, i64 13, i64 12, i64 16, i64 11, i64 12, i64 15, i64 15, i64 16, i64 4, i64 2, i64 11, i64 5, i64 10, i64 6, i64 8, i64 11, i64 14, i64 14, i64 13, i64 11, i64 8, i64 11, i64 7, i64 8, i64 10, i64 13, i64 17, i64 17, i64 10, i64 4, i64 11, i64 5, i64 9, i64 6, i64 9, i64 13, i64 17, i64 17, i64 13, i64 9, i64 6, i64 9, i64 5, i64 5, i64 7, i64 11, i64 15, i64 17, i64 10, i64 5, i64 7, i64 6, i64 5, i64 4, i64 7, i64 10, i64 15, i64 15, i64 10, i64 7, i64 9, i64 8, i64 7, i64 6, i64 7, i64 10, i64 14, i64 13, i64 13, i64 10, i64 11, i64 10, i64 8, i64 7, i64 8, i64 10, i64 14, i64 14, i64 12, i64 11, i64 10, i64 9, i64 6, i64 5, i64 6, i64 9, i64 13, i64 17, i64 14, i64 13, i64 11, i64 10, i64 6, i64 6, i64 6, i64 8, i64 11, i64 16], align 16
@_44c4_s_p1_0 = internal global %struct.static_codebook { i64 8, i64 6561, ptr @_vq_lengthlist__44c4_s_p1_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__44c4_s_p1_0, ptr null, ptr @_vq_auxt__44c4_s_p1_0, ptr null, i32 0 }, align 8
@_44c4_s_p2_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__44c4_s_p2_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44c4_s_p2_0, ptr null, ptr @_vq_auxt__44c4_s_p2_0, ptr null, i32 0 }, align 8
@_44c4_s_p3_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__44c4_s_p3_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44c4_s_p3_0, ptr null, ptr @_vq_auxt__44c4_s_p3_0, ptr null, i32 0 }, align 8
@_44c4_s_p4_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__44c4_s_p4_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44c4_s_p4_0, ptr null, ptr @_vq_auxt__44c4_s_p4_0, ptr null, i32 0 }, align 8
@_44c4_s_p5_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__44c4_s_p5_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44c4_s_p5_0, ptr null, ptr @_vq_auxt__44c4_s_p5_0, ptr null, i32 0 }, align 8
@_44c4_s_p6_0 = internal global %struct.static_codebook { i64 2, i64 289, ptr @_vq_lengthlist__44c4_s_p6_0, i32 1, i64 -529530880, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__44c4_s_p6_0, ptr null, ptr @_vq_auxt__44c4_s_p6_0, ptr null, i32 0 }, align 8
@_44c4_s_p7_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__44c4_s_p7_0, i32 1, i64 -529137664, i64 1618345984, i32 2, i32 0, ptr @_vq_quantlist__44c4_s_p7_0, ptr null, ptr @_vq_auxt__44c4_s_p7_0, ptr null, i32 0 }, align 8
@_44c4_s_p7_1 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__44c4_s_p7_1, i32 1, i64 -531365888, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44c4_s_p7_1, ptr null, ptr @_vq_auxt__44c4_s_p7_1, ptr null, i32 0 }, align 8
@_44c4_s_p8_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44c4_s_p8_0, i32 1, i64 -526516224, i64 1616117760, i32 4, i32 0, ptr @_vq_quantlist__44c4_s_p8_0, ptr null, ptr @_vq_auxt__44c4_s_p8_0, ptr null, i32 0 }, align 8
@_44c4_s_p8_1 = internal global %struct.static_codebook { i64 2, i64 25, ptr @_vq_lengthlist__44c4_s_p8_1, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44c4_s_p8_1, ptr null, ptr @_vq_auxt__44c4_s_p8_1, ptr null, i32 0 }, align 8
@_44c4_s_p9_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44c4_s_p9_0, i32 1, i64 -513964032, i64 1628680192, i32 4, i32 0, ptr @_vq_quantlist__44c4_s_p9_0, ptr null, ptr @_vq_auxt__44c4_s_p9_0, ptr null, i32 0 }, align 8
@_44c4_s_p9_1 = internal global %struct.static_codebook { i64 2, i64 225, ptr @_vq_lengthlist__44c4_s_p9_1, i32 1, i64 -520986624, i64 1620377600, i32 4, i32 0, ptr @_vq_quantlist__44c4_s_p9_1, ptr null, ptr @_vq_auxt__44c4_s_p9_1, ptr null, i32 0 }, align 8
@_44c4_s_p9_2 = internal global %struct.static_codebook { i64 2, i64 441, ptr @_vq_lengthlist__44c4_s_p9_2, i32 1, i64 -529268736, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__44c4_s_p9_2, ptr null, ptr @_vq_auxt__44c4_s_p9_2, ptr null, i32 0 }, align 8
@_vq_quantlist__44c4_s_p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44c4_s_p1_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c4_s_p1_0, ptr @_vq_quantmap__44c4_s_p1_0, i32 3, i32 3 }, align 8
@_vq_lengthlist__44c4_s_p1_0 = internal global <{ [1641 x i64], [4920 x i64] }> <{ [1641 x i64] [i64 2, i64 4, i64 4, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 6, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 10, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 10, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 8, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 10, i64 9], [4920 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c4_s_p1_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__44c4_s_p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_quantlist__44c4_s_p2_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44c4_s_p2_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c4_s_p2_0, ptr @_vq_quantmap__44c4_s_p2_0, i32 5, i32 5 }, align 8
@_vq_lengthlist__44c4_s_p2_0 = internal global <{ [443 x i64], [182 x i64] }> <{ [443 x i64] [i64 2, i64 5, i64 5, i64 0, i64 0, i64 0, i64 5, i64 5, i64 0, i64 0, i64 0, i64 5, i64 5, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 6, i64 6, i64 0, i64 0, i64 0, i64 8, i64 7, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 6, i64 6, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 7, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 7, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 8, i64 7, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 8, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 10, i64 10, i64 0, i64 0, i64 0, i64 9, i64 9, i64 0, i64 0, i64 0, i64 9, i64 9, i64 0, i64 0, i64 0, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 10, i64 10, i64 0, i64 0, i64 0, i64 9, i64 9, i64 0, i64 0, i64 0, i64 9, i64 9, i64 0, i64 0, i64 0, i64 10, i64 10], [182 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c4_s_p2_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44c4_s_p2_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_quantlist__44c4_s_p3_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44c4_s_p3_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c4_s_p3_0, ptr @_vq_quantmap__44c4_s_p3_0, i32 5, i32 5 }, align 8
@_vq_lengthlist__44c4_s_p3_0 = internal global <{ [105 x i64], [520 x i64] }> <{ [105 x i64] [i64 2, i64 3, i64 4, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 5, i64 4, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 4, i64 4, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 6, i64 6, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 6, i64 6, i64 7, i64 7], [520 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c4_s_p3_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44c4_s_p3_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_quantlist__44c4_s_p4_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__44c4_s_p4_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c4_s_p4_0, ptr @_vq_quantmap__44c4_s_p4_0, i32 9, i32 9 }, align 8
@_vq_lengthlist__44c4_s_p4_0 = internal global <{ [68 x i64], [13 x i64] }> <{ [68 x i64] [i64 2, i64 3, i64 3, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 4, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 4, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 5, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9], [13 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c4_s_p4_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__44c4_s_p4_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__44c4_s_p5_0 = internal global [81 x i64] [i64 2, i64 3, i64 3, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 0, i64 4, i64 4, i64 7, i64 7, i64 7, i64 7, i64 9, i64 9, i64 0, i64 4, i64 4, i64 7, i64 7, i64 7, i64 7, i64 9, i64 9, i64 0, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 10, i64 10, i64 9, i64 9, i64 11, i64 11, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 11, i64 11], align 16
@_vq_quantlist__44c4_s_p5_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__44c4_s_p5_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c4_s_p5_0, ptr @_vq_quantmap__44c4_s_p5_0, i32 9, i32 9 }, align 8
@_vq_quantthresh__44c4_s_p5_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__44c4_s_p5_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__44c4_s_p6_0 = internal global [289 x i64] [i64 2, i64 4, i64 4, i64 6, i64 6, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 11, i64 11, i64 0, i64 4, i64 4, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 0, i64 4, i64 4, i64 6, i64 6, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 9, i64 10, i64 11, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 10, i64 10, i64 11, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 12, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 12, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13], align 16
@_vq_quantlist__44c4_s_p6_0 = internal global [17 x i64] [i64 8, i64 7, i64 9, i64 6, i64 10, i64 5, i64 11, i64 4, i64 12, i64 3, i64 13, i64 2, i64 14, i64 1, i64 15, i64 0, i64 16], align 16
@_vq_auxt__44c4_s_p6_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c4_s_p6_0, ptr @_vq_quantmap__44c4_s_p6_0, i32 17, i32 17 }, align 8
@_vq_quantthresh__44c4_s_p6_0 = internal global [16 x float] [float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00], align 16
@_vq_quantmap__44c4_s_p6_0 = internal global [17 x i64] [i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16], align 16
@_vq_lengthlist__44c4_s_p7_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 6, i64 7, i64 6, i64 6, i64 4, i64 7, i64 7, i64 10, i64 9, i64 9, i64 10, i64 9, i64 9, i64 5, i64 7, i64 7, i64 10, i64 9, i64 9, i64 10, i64 9, i64 9, i64 6, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 10, i64 10, i64 6, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 6, i64 9, i64 9, i64 10, i64 9, i64 10, i64 11, i64 9, i64 9, i64 7, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 6, i64 9, i64 9, i64 10, i64 9, i64 9, i64 10, i64 10, i64 9, i64 6, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10], align 16
@_vq_quantlist__44c4_s_p7_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44c4_s_p7_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c4_s_p7_0, ptr @_vq_quantmap__44c4_s_p7_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__44c4_s_p7_0 = internal global [2 x float] [float -5.500000e+00, float 5.500000e+00], align 4
@_vq_quantmap__44c4_s_p7_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44c4_s_p7_1 = internal global [121 x i64] [i64 2, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 10, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 10, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 10, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 8, i64 8, i64 8, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8], align 16
@_vq_quantlist__44c4_s_p7_1 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__44c4_s_p7_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c4_s_p7_1, ptr @_vq_quantmap__44c4_s_p7_1, i32 11, i32 11 }, align 8
@_vq_quantthresh__44c4_s_p7_1 = internal global [10 x float] [float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00], align 16
@_vq_quantmap__44c4_s_p7_1 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_lengthlist__44c4_s_p8_0 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 6, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 7, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 0, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 0, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 0, i64 12, i64 12, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 0, i64 12, i64 12, i64 9, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 11, i64 0, i64 0, i64 0, i64 9, i64 10, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 10, i64 10, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 13, i64 13, i64 10, i64 10, i64 10, i64 11, i64 12, i64 12, i64 12, i64 12, i64 0, i64 0, i64 0, i64 14, i64 14, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 12, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 12, i64 12, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13], align 16
@_vq_quantlist__44c4_s_p8_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44c4_s_p8_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c4_s_p8_0, ptr @_vq_quantmap__44c4_s_p8_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__44c4_s_p8_0 = internal global [12 x float] [float -2.750000e+01, float -2.250000e+01, float -1.750000e+01, float -1.250000e+01, float -7.500000e+00, float -2.500000e+00, float 2.500000e+00, float 7.500000e+00, float 1.250000e+01, float 1.750000e+01, float 2.250000e+01, float 2.750000e+01], align 16
@_vq_quantmap__44c4_s_p8_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44c4_s_p8_1 = internal global [25 x i64] [i64 2, i64 4, i64 4, i64 5, i64 5, i64 6, i64 5, i64 5, i64 5, i64 5, i64 6, i64 4, i64 5, i64 5, i64 5, i64 6, i64 5, i64 5, i64 5, i64 5, i64 6, i64 6, i64 6, i64 5, i64 5], align 16
@_vq_quantlist__44c4_s_p8_1 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44c4_s_p8_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c4_s_p8_1, ptr @_vq_quantmap__44c4_s_p8_1, i32 5, i32 5 }, align 8
@_vq_quantthresh__44c4_s_p8_1 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44c4_s_p8_1 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__44c4_s_p9_0 = internal global [169 x i64] [i64 1, i64 3, i64 3, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 5, i64 7, i64 7, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 5, i64 7, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9], align 16
@_vq_quantlist__44c4_s_p9_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44c4_s_p9_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c4_s_p9_0, ptr @_vq_quantmap__44c4_s_p9_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__44c4_s_p9_0 = internal global [12 x float] [float -1.732500e+03, float -1.417500e+03, float -1.102500e+03, float -7.875000e+02, float -4.725000e+02, float -1.575000e+02, float 1.575000e+02, float 4.725000e+02, float 7.875000e+02, float 1.102500e+03, float 1.417500e+03, float 1.732500e+03], align 16
@_vq_quantmap__44c4_s_p9_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44c4_s_p9_1 = internal global [225 x i64] [i64 1, i64 4, i64 4, i64 5, i64 6, i64 7, i64 7, i64 9, i64 9, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 6, i64 5, i64 5, i64 6, i64 7, i64 8, i64 8, i64 10, i64 10, i64 11, i64 11, i64 13, i64 13, i64 13, i64 13, i64 6, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 11, i64 10, i64 11, i64 11, i64 12, i64 13, i64 12, i64 13, i64 17, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 15, i64 14, i64 17, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 11, i64 10, i64 12, i64 12, i64 13, i64 13, i64 14, i64 13, i64 17, i64 11, i64 12, i64 9, i64 9, i64 10, i64 10, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 14, i64 14, i64 17, i64 12, i64 11, i64 9, i64 8, i64 11, i64 10, i64 11, i64 12, i64 13, i64 13, i64 13, i64 14, i64 14, i64 14, i64 17, i64 17, i64 17, i64 11, i64 11, i64 11, i64 11, i64 13, i64 13, i64 13, i64 13, i64 14, i64 13, i64 15, i64 14, i64 17, i64 17, i64 17, i64 11, i64 10, i64 11, i64 9, i64 13, i64 12, i64 13, i64 14, i64 15, i64 14, i64 15, i64 14, i64 17, i64 17, i64 17, i64 14, i64 14, i64 11, i64 12, i64 12, i64 13, i64 14, i64 14, i64 16, i64 15, i64 15, i64 15, i64 17, i64 17, i64 17, i64 15, i64 15, i64 12, i64 11, i64 13, i64 11, i64 13, i64 13, i64 13, i64 15, i64 16, i64 14, i64 17, i64 17, i64 17, i64 17, i64 17, i64 13, i64 13, i64 14, i64 13, i64 14, i64 14, i64 15, i64 15, i64 16, i64 15, i64 17, i64 17, i64 17, i64 17, i64 17, i64 14, i64 14, i64 14, i64 12, i64 14, i64 12, i64 16, i64 14, i64 15, i64 14, i64 17, i64 17, i64 17, i64 17, i64 17, i64 16, i64 17, i64 13, i64 14, i64 14, i64 15, i64 15, i64 15, i64 17, i64 15, i64 17, i64 17, i64 17, i64 17, i64 17, i64 16, i64 17, i64 13, i64 14, i64 14, i64 14, i64 15, i64 17, i64 15, i64 15], align 16
@_vq_quantlist__44c4_s_p9_1 = internal global [15 x i64] [i64 7, i64 6, i64 8, i64 5, i64 9, i64 4, i64 10, i64 3, i64 11, i64 2, i64 12, i64 1, i64 13, i64 0, i64 14], align 16
@_vq_auxt__44c4_s_p9_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c4_s_p9_1, ptr @_vq_quantmap__44c4_s_p9_1, i32 15, i32 15 }, align 8
@_vq_quantthresh__44c4_s_p9_1 = internal global [14 x float] [float -1.365000e+02, float -1.155000e+02, float -9.450000e+01, float -7.350000e+01, float -5.250000e+01, float -3.150000e+01, float -1.050000e+01, float 1.050000e+01, float 3.150000e+01, float 5.250000e+01, float 7.350000e+01, float 9.450000e+01, float 1.155000e+02, float 1.365000e+02], align 16
@_vq_quantmap__44c4_s_p9_1 = internal global [15 x i64] [i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14], align 16
@_vq_lengthlist__44c4_s_p9_2 = internal global [441 x i64] [i64 3, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 11, i64 5, i64 5, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 5, i64 5, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 11, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 12, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 12, i64 11, i64 12, i64 12, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10], align 16
@_vq_quantlist__44c4_s_p9_2 = internal global [21 x i64] [i64 10, i64 9, i64 11, i64 8, i64 12, i64 7, i64 13, i64 6, i64 14, i64 5, i64 15, i64 4, i64 16, i64 3, i64 17, i64 2, i64 18, i64 1, i64 19, i64 0, i64 20], align 16
@_vq_auxt__44c4_s_p9_2 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c4_s_p9_2, ptr @_vq_quantmap__44c4_s_p9_2, i32 21, i32 21 }, align 8
@_vq_quantthresh__44c4_s_p9_2 = internal global [20 x float] [float -9.500000e+00, float -8.500000e+00, float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00, float 8.500000e+00, float 9.500000e+00], align 16
@_vq_quantmap__44c4_s_p9_2 = internal global [21 x i64] [i64 19, i64 17, i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16, i64 18, i64 20], align 16
@_huff_lengthlist__44c4_s_long = internal global [100 x i64] [i64 3, i64 5, i64 11, i64 11, i64 13, i64 11, i64 11, i64 11, i64 12, i64 12, i64 5, i64 2, i64 11, i64 6, i64 10, i64 7, i64 8, i64 10, i64 13, i64 16, i64 10, i64 9, i64 6, i64 10, i64 6, i64 7, i64 8, i64 9, i64 11, i64 12, i64 11, i64 5, i64 11, i64 7, i64 10, i64 8, i64 10, i64 12, i64 15, i64 17, i64 12, i64 8, i64 5, i64 9, i64 4, i64 5, i64 7, i64 8, i64 10, i64 12, i64 10, i64 6, i64 7, i64 8, i64 5, i64 5, i64 6, i64 8, i64 10, i64 11, i64 10, i64 8, i64 8, i64 9, i64 6, i64 6, i64 6, i64 7, i64 9, i64 10, i64 11, i64 10, i64 9, i64 11, i64 8, i64 7, i64 6, i64 6, i64 7, i64 9, i64 11, i64 13, i64 10, i64 15, i64 9, i64 9, i64 7, i64 7, i64 7, i64 8, i64 10, i64 15, i64 11, i64 17, i64 11, i64 11, i64 9, i64 8, i64 7, i64 8], align 16
@_huff_book__44c5_s_short = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__44c5_s_short, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_resbook_44s_5 = internal global %struct.static_bookblock { [12 x [3 x ptr]] [[3 x ptr] zeroinitializer, [3 x ptr] [ptr null, ptr null, ptr @_44c5_s_p1_0], [3 x ptr] [ptr null, ptr null, ptr @_44c5_s_p2_0], [3 x ptr] [ptr null, ptr null, ptr @_44c5_s_p3_0], [3 x ptr] [ptr null, ptr null, ptr @_44c5_s_p4_0], [3 x ptr] [ptr null, ptr null, ptr @_44c5_s_p5_0], [3 x ptr] [ptr null, ptr null, ptr @_44c5_s_p6_0], [3 x ptr] [ptr @_44c5_s_p7_0, ptr @_44c5_s_p7_1, ptr null], [3 x ptr] [ptr @_44c5_s_p8_0, ptr @_44c5_s_p8_1, ptr null], [3 x ptr] [ptr @_44c5_s_p9_0, ptr @_44c5_s_p9_1, ptr @_44c5_s_p9_2], [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer] }, align 8
@_huff_book__44c5_s_long = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__44c5_s_long, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_lengthlist__44c5_s_short = internal global [100 x i64] [i64 3, i64 9, i64 10, i64 15, i64 10, i64 10, i64 11, i64 15, i64 15, i64 17, i64 4, i64 5, i64 7, i64 8, i64 7, i64 7, i64 9, i64 13, i64 15, i64 16, i64 7, i64 6, i64 6, i64 10, i64 6, i64 8, i64 9, i64 12, i64 12, i64 16, i64 10, i64 8, i64 11, i64 8, i64 8, i64 7, i64 11, i64 15, i64 17, i64 17, i64 8, i64 5, i64 5, i64 8, i64 3, i64 4, i64 6, i64 10, i64 15, i64 17, i64 10, i64 7, i64 7, i64 7, i64 4, i64 4, i64 5, i64 10, i64 14, i64 17, i64 10, i64 9, i64 8, i64 9, i64 6, i64 5, i64 6, i64 10, i64 14, i64 17, i64 12, i64 12, i64 11, i64 12, i64 9, i64 8, i64 8, i64 11, i64 14, i64 17, i64 13, i64 14, i64 13, i64 10, i64 7, i64 5, i64 6, i64 9, i64 13, i64 17, i64 14, i64 14, i64 14, i64 10, i64 7, i64 5, i64 6, i64 7, i64 10, i64 15], align 16
@_44c5_s_p1_0 = internal global %struct.static_codebook { i64 8, i64 6561, ptr @_vq_lengthlist__44c5_s_p1_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__44c5_s_p1_0, ptr null, ptr @_vq_auxt__44c5_s_p1_0, ptr null, i32 0 }, align 8
@_44c5_s_p2_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__44c5_s_p2_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44c5_s_p2_0, ptr null, ptr @_vq_auxt__44c5_s_p2_0, ptr null, i32 0 }, align 8
@_44c5_s_p3_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__44c5_s_p3_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44c5_s_p3_0, ptr null, ptr @_vq_auxt__44c5_s_p3_0, ptr null, i32 0 }, align 8
@_44c5_s_p4_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__44c5_s_p4_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44c5_s_p4_0, ptr null, ptr @_vq_auxt__44c5_s_p4_0, ptr null, i32 0 }, align 8
@_44c5_s_p5_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__44c5_s_p5_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44c5_s_p5_0, ptr null, ptr @_vq_auxt__44c5_s_p5_0, ptr null, i32 0 }, align 8
@_44c5_s_p6_0 = internal global %struct.static_codebook { i64 2, i64 289, ptr @_vq_lengthlist__44c5_s_p6_0, i32 1, i64 -529530880, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__44c5_s_p6_0, ptr null, ptr @_vq_auxt__44c5_s_p6_0, ptr null, i32 0 }, align 8
@_44c5_s_p7_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__44c5_s_p7_0, i32 1, i64 -529137664, i64 1618345984, i32 2, i32 0, ptr @_vq_quantlist__44c5_s_p7_0, ptr null, ptr @_vq_auxt__44c5_s_p7_0, ptr null, i32 0 }, align 8
@_44c5_s_p7_1 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__44c5_s_p7_1, i32 1, i64 -531365888, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44c5_s_p7_1, ptr null, ptr @_vq_auxt__44c5_s_p7_1, ptr null, i32 0 }, align 8
@_44c5_s_p8_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44c5_s_p8_0, i32 1, i64 -526516224, i64 1616117760, i32 4, i32 0, ptr @_vq_quantlist__44c5_s_p8_0, ptr null, ptr @_vq_auxt__44c5_s_p8_0, ptr null, i32 0 }, align 8
@_44c5_s_p8_1 = internal global %struct.static_codebook { i64 2, i64 25, ptr @_vq_lengthlist__44c5_s_p8_1, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44c5_s_p8_1, ptr null, ptr @_vq_auxt__44c5_s_p8_1, ptr null, i32 0 }, align 8
@_44c5_s_p9_0 = internal global %struct.static_codebook { i64 2, i64 225, ptr @_vq_lengthlist__44c5_s_p9_0, i32 1, i64 -512522752, i64 1628852224, i32 4, i32 0, ptr @_vq_quantlist__44c5_s_p9_0, ptr null, ptr @_vq_auxt__44c5_s_p9_0, ptr null, i32 0 }, align 8
@_44c5_s_p9_1 = internal global %struct.static_codebook { i64 2, i64 289, ptr @_vq_lengthlist__44c5_s_p9_1, i32 1, i64 -520814592, i64 1620377600, i32 5, i32 0, ptr @_vq_quantlist__44c5_s_p9_1, ptr null, ptr @_vq_auxt__44c5_s_p9_1, ptr null, i32 0 }, align 8
@_44c5_s_p9_2 = internal global %struct.static_codebook { i64 2, i64 441, ptr @_vq_lengthlist__44c5_s_p9_2, i32 1, i64 -529268736, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__44c5_s_p9_2, ptr null, ptr @_vq_auxt__44c5_s_p9_2, ptr null, i32 0 }, align 8
@_vq_quantlist__44c5_s_p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44c5_s_p1_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c5_s_p1_0, ptr @_vq_quantmap__44c5_s_p1_0, i32 3, i32 3 }, align 8
@_vq_lengthlist__44c5_s_p1_0 = internal global <{ [1641 x i64], [4920 x i64] }> <{ [1641 x i64] [i64 2, i64 4, i64 4, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 7, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 6, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 10, i64 11, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 9, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 10, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 10, i64 11, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 9, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 11, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 11, i64 10], [4920 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c5_s_p1_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__44c5_s_p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_quantlist__44c5_s_p2_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44c5_s_p2_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c5_s_p2_0, ptr @_vq_quantmap__44c5_s_p2_0, i32 5, i32 5 }, align 8
@_vq_lengthlist__44c5_s_p2_0 = internal global <{ [443 x i64], [182 x i64] }> <{ [443 x i64] [i64 2, i64 4, i64 4, i64 0, i64 0, i64 0, i64 6, i64 5, i64 0, i64 0, i64 0, i64 5, i64 5, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 6, i64 5, i64 0, i64 0, i64 0, i64 8, i64 7, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 5, i64 6, i64 0, i64 0, i64 0, i64 7, i64 8, i64 0, i64 0, i64 0, i64 7, i64 8, i64 0, i64 0, i64 0, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 8, i64 7, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 7, i64 8, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 8, i64 7, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 7, i64 8, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 10, i64 10, i64 0, i64 0, i64 0, i64 10, i64 10, i64 0, i64 0, i64 0, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 10, i64 10, i64 0, i64 0, i64 0, i64 10, i64 10, i64 0, i64 0, i64 0, i64 10, i64 10], [182 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c5_s_p2_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44c5_s_p2_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_quantlist__44c5_s_p3_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44c5_s_p3_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c5_s_p3_0, ptr @_vq_quantmap__44c5_s_p3_0, i32 5, i32 5 }, align 8
@_vq_lengthlist__44c5_s_p3_0 = internal global <{ [105 x i64], [520 x i64] }> <{ [105 x i64] [i64 2, i64 4, i64 3, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 4, i64 4, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 4, i64 5, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 6, i64 6, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 6, i64 6, i64 7, i64 7], [520 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c5_s_p3_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44c5_s_p3_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_quantlist__44c5_s_p4_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__44c5_s_p4_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c5_s_p4_0, ptr @_vq_quantmap__44c5_s_p4_0, i32 9, i32 9 }, align 8
@_vq_lengthlist__44c5_s_p4_0 = internal global <{ [68 x i64], [13 x i64] }> <{ [68 x i64] [i64 2, i64 3, i64 3, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 4, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 4, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 5, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9], [13 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c5_s_p4_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__44c5_s_p4_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__44c5_s_p5_0 = internal global [81 x i64] [i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 7, i64 9, i64 9, i64 0, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 0, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 0, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 7, i64 8, i64 8, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 10, i64 10], align 16
@_vq_quantlist__44c5_s_p5_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__44c5_s_p5_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c5_s_p5_0, ptr @_vq_quantmap__44c5_s_p5_0, i32 9, i32 9 }, align 8
@_vq_quantthresh__44c5_s_p5_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__44c5_s_p5_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__44c5_s_p6_0 = internal global [289 x i64] [i64 2, i64 4, i64 4, i64 6, i64 6, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 4, i64 4, i64 6, i64 6, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 4, i64 4, i64 6, i64 6, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 0, i64 0, i64 0, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 0, i64 0, i64 0, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 12, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 10, i64 10, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13], align 16
@_vq_quantlist__44c5_s_p6_0 = internal global [17 x i64] [i64 8, i64 7, i64 9, i64 6, i64 10, i64 5, i64 11, i64 4, i64 12, i64 3, i64 13, i64 2, i64 14, i64 1, i64 15, i64 0, i64 16], align 16
@_vq_auxt__44c5_s_p6_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c5_s_p6_0, ptr @_vq_quantmap__44c5_s_p6_0, i32 17, i32 17 }, align 8
@_vq_quantthresh__44c5_s_p6_0 = internal global [16 x float] [float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00], align 16
@_vq_quantmap__44c5_s_p6_0 = internal global [17 x i64] [i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16], align 16
@_vq_lengthlist__44c5_s_p7_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 6, i64 7, i64 6, i64 6, i64 4, i64 7, i64 7, i64 10, i64 9, i64 9, i64 10, i64 9, i64 9, i64 5, i64 7, i64 7, i64 10, i64 9, i64 9, i64 10, i64 9, i64 9, i64 6, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 10, i64 10, i64 6, i64 9, i64 9, i64 10, i64 10, i64 9, i64 11, i64 10, i64 10, i64 6, i64 9, i64 9, i64 10, i64 9, i64 10, i64 11, i64 10, i64 9, i64 7, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 6, i64 9, i64 9, i64 10, i64 10, i64 9, i64 10, i64 9, i64 9, i64 6, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 9, i64 9], align 16
@_vq_quantlist__44c5_s_p7_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44c5_s_p7_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c5_s_p7_0, ptr @_vq_quantmap__44c5_s_p7_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__44c5_s_p7_0 = internal global [2 x float] [float -5.500000e+00, float 5.500000e+00], align 4
@_vq_quantmap__44c5_s_p7_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44c5_s_p7_1 = internal global [121 x i64] [i64 2, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 10, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 10, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 10, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 8, i64 8, i64 9, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8], align 16
@_vq_quantlist__44c5_s_p7_1 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__44c5_s_p7_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c5_s_p7_1, ptr @_vq_quantmap__44c5_s_p7_1, i32 11, i32 11 }, align 8
@_vq_quantthresh__44c5_s_p7_1 = internal global [10 x float] [float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00], align 16
@_vq_quantmap__44c5_s_p7_1 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_lengthlist__44c5_s_p8_0 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 6, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 7, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 0, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 0, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 0, i64 11, i64 12, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 0, i64 13, i64 12, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 0, i64 0, i64 0, i64 9, i64 10, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 11, i64 0, i64 0, i64 0, i64 10, i64 10, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 13, i64 13, i64 10, i64 10, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 0, i64 0, i64 0, i64 14, i64 14, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 0, i64 0, i64 12, i64 12, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 12, i64 12, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13], align 16
@_vq_quantlist__44c5_s_p8_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44c5_s_p8_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c5_s_p8_0, ptr @_vq_quantmap__44c5_s_p8_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__44c5_s_p8_0 = internal global [12 x float] [float -2.750000e+01, float -2.250000e+01, float -1.750000e+01, float -1.250000e+01, float -7.500000e+00, float -2.500000e+00, float 2.500000e+00, float 7.500000e+00, float 1.250000e+01, float 1.750000e+01, float 2.250000e+01, float 2.750000e+01], align 16
@_vq_quantmap__44c5_s_p8_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44c5_s_p8_1 = internal global [25 x i64] [i64 2, i64 4, i64 4, i64 5, i64 5, i64 6, i64 5, i64 5, i64 5, i64 5, i64 6, i64 4, i64 5, i64 5, i64 5, i64 6, i64 5, i64 5, i64 5, i64 5, i64 6, i64 6, i64 6, i64 5, i64 5], align 16
@_vq_quantlist__44c5_s_p8_1 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44c5_s_p8_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c5_s_p8_1, ptr @_vq_quantmap__44c5_s_p8_1, i32 5, i32 5 }, align 8
@_vq_quantthresh__44c5_s_p8_1 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44c5_s_p8_1 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__44c5_s_p9_0 = internal global [225 x i64] [i64 1, i64 3, i64 3, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 5, i64 7, i64 7, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 5, i64 9, i64 7, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10], align 16
@_vq_quantlist__44c5_s_p9_0 = internal global [15 x i64] [i64 7, i64 6, i64 8, i64 5, i64 9, i64 4, i64 10, i64 3, i64 11, i64 2, i64 12, i64 1, i64 13, i64 0, i64 14], align 16
@_vq_auxt__44c5_s_p9_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c5_s_p9_0, ptr @_vq_quantmap__44c5_s_p9_0, i32 15, i32 15 }, align 8
@_vq_quantthresh__44c5_s_p9_0 = internal global [14 x float] [float -2.320500e+03, float -1.963500e+03, float -1.606500e+03, float -1.249500e+03, float -8.925000e+02, float -5.355000e+02, float -1.785000e+02, float 1.785000e+02, float 5.355000e+02, float 8.925000e+02, float 1.249500e+03, float 1.606500e+03, float 1.963500e+03, float 2.320500e+03], align 16
@_vq_quantmap__44c5_s_p9_0 = internal global [15 x i64] [i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14], align 16
@_vq_lengthlist__44c5_s_p9_1 = internal global [289 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 8, i64 7, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 6, i64 5, i64 5, i64 6, i64 6, i64 8, i64 8, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 6, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 18, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 13, i64 14, i64 18, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 11, i64 10, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 14, i64 15, i64 18, i64 12, i64 12, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 13, i64 14, i64 14, i64 14, i64 18, i64 12, i64 12, i64 9, i64 8, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 14, i64 13, i64 13, i64 14, i64 15, i64 15, i64 18, i64 16, i64 18, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 13, i64 14, i64 14, i64 14, i64 14, i64 15, i64 17, i64 18, i64 17, i64 11, i64 10, i64 11, i64 9, i64 12, i64 13, i64 13, i64 13, i64 14, i64 14, i64 13, i64 14, i64 14, i64 14, i64 18, i64 18, i64 18, i64 13, i64 14, i64 11, i64 12, i64 12, i64 12, i64 13, i64 14, i64 13, i64 13, i64 14, i64 15, i64 16, i64 15, i64 18, i64 18, i64 18, i64 15, i64 13, i64 12, i64 9, i64 12, i64 11, i64 13, i64 14, i64 14, i64 15, i64 14, i64 14, i64 16, i64 14, i64 18, i64 18, i64 18, i64 18, i64 18, i64 12, i64 13, i64 13, i64 13, i64 13, i64 14, i64 15, i64 14, i64 15, i64 15, i64 15, i64 15, i64 18, i64 18, i64 18, i64 18, i64 17, i64 14, i64 12, i64 13, i64 11, i64 14, i64 12, i64 15, i64 14, i64 14, i64 15, i64 16, i64 15, i64 18, i64 18, i64 18, i64 17, i64 18, i64 15, i64 18, i64 13, i64 13, i64 14, i64 13, i64 15, i64 14, i64 16, i64 15, i64 17, i64 16, i64 18, i64 18, i64 17, i64 18, i64 18, i64 15, i64 17, i64 14, i64 13, i64 14, i64 12, i64 14, i64 14, i64 15, i64 15, i64 15, i64 15, i64 18, i64 18, i64 18, i64 17, i64 17, i64 18, i64 18, i64 14, i64 15, i64 14, i64 14, i64 14, i64 14, i64 15, i64 14, i64 16, i64 16, i64 17, i64 18, i64 18, i64 18, i64 18, i64 17, i64 17, i64 15, i64 15, i64 13, i64 13, i64 15, i64 13, i64 15, i64 13, i64 15, i64 15], align 16
@_vq_quantlist__44c5_s_p9_1 = internal global [17 x i64] [i64 8, i64 7, i64 9, i64 6, i64 10, i64 5, i64 11, i64 4, i64 12, i64 3, i64 13, i64 2, i64 14, i64 1, i64 15, i64 0, i64 16], align 16
@_vq_auxt__44c5_s_p9_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c5_s_p9_1, ptr @_vq_quantmap__44c5_s_p9_1, i32 17, i32 17 }, align 8
@_vq_quantthresh__44c5_s_p9_1 = internal global [16 x float] [float -1.575000e+02, float -1.365000e+02, float -1.155000e+02, float -9.450000e+01, float -7.350000e+01, float -5.250000e+01, float -3.150000e+01, float -1.050000e+01, float 1.050000e+01, float 3.150000e+01, float 5.250000e+01, float 7.350000e+01, float 9.450000e+01, float 1.155000e+02, float 1.365000e+02, float 1.575000e+02], align 16
@_vq_quantmap__44c5_s_p9_1 = internal global [17 x i64] [i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16], align 16
@_vq_lengthlist__44c5_s_p9_2 = internal global [441 x i64] [i64 3, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 11, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 11, i64 5, i64 5, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 11, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 8, i64 8, i64 8, i64 8, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10], align 16
@_vq_quantlist__44c5_s_p9_2 = internal global [21 x i64] [i64 10, i64 9, i64 11, i64 8, i64 12, i64 7, i64 13, i64 6, i64 14, i64 5, i64 15, i64 4, i64 16, i64 3, i64 17, i64 2, i64 18, i64 1, i64 19, i64 0, i64 20], align 16
@_vq_auxt__44c5_s_p9_2 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c5_s_p9_2, ptr @_vq_quantmap__44c5_s_p9_2, i32 21, i32 21 }, align 8
@_vq_quantthresh__44c5_s_p9_2 = internal global [20 x float] [float -9.500000e+00, float -8.500000e+00, float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00, float 8.500000e+00, float 9.500000e+00], align 16
@_vq_quantmap__44c5_s_p9_2 = internal global [21 x i64] [i64 19, i64 17, i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16, i64 18, i64 20], align 16
@_huff_lengthlist__44c5_s_long = internal global [100 x i64] [i64 3, i64 6, i64 9, i64 14, i64 11, i64 13, i64 12, i64 12, i64 12, i64 12, i64 6, i64 3, i64 5, i64 8, i64 6, i64 8, i64 10, i64 11, i64 12, i64 14, i64 9, i64 5, i64 4, i64 10, i64 5, i64 7, i64 8, i64 9, i64 11, i64 12, i64 13, i64 8, i64 10, i64 9, i64 9, i64 9, i64 12, i64 15, i64 16, i64 17, i64 10, i64 6, i64 5, i64 9, i64 3, i64 5, i64 6, i64 8, i64 10, i64 12, i64 10, i64 8, i64 7, i64 9, i64 5, i64 5, i64 6, i64 8, i64 10, i64 11, i64 10, i64 9, i64 8, i64 11, i64 6, i64 6, i64 6, i64 7, i64 8, i64 10, i64 12, i64 11, i64 9, i64 13, i64 8, i64 7, i64 6, i64 6, i64 7, i64 9, i64 11, i64 13, i64 10, i64 15, i64 9, i64 9, i64 7, i64 7, i64 7, i64 8, i64 10, i64 15, i64 10, i64 17, i64 11, i64 10, i64 9, i64 8, i64 7, i64 7], align 16
@_huff_book__44c6_s_short = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__44c6_s_short, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_resbook_44s_6 = internal global %struct.static_bookblock { [12 x [3 x ptr]] [[3 x ptr] zeroinitializer, [3 x ptr] [ptr null, ptr null, ptr @_44c6_s_p1_0], [3 x ptr] [ptr null, ptr null, ptr @_44c6_s_p2_0], [3 x ptr] [ptr null, ptr null, ptr @_44c6_s_p3_0], [3 x ptr] [ptr null, ptr null, ptr @_44c6_s_p4_0], [3 x ptr] [ptr @_44c6_s_p5_0, ptr @_44c6_s_p5_1, ptr null], [3 x ptr] [ptr @_44c6_s_p6_0, ptr @_44c6_s_p6_1, ptr null], [3 x ptr] [ptr @_44c6_s_p7_0, ptr @_44c6_s_p7_1, ptr null], [3 x ptr] [ptr @_44c6_s_p8_0, ptr @_44c6_s_p8_1, ptr null], [3 x ptr] [ptr @_44c6_s_p9_0, ptr @_44c6_s_p9_1, ptr @_44c6_s_p9_2], [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer] }, align 8
@_huff_book__44c6_s_long = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__44c6_s_long, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_residue_44_high = internal global { i64, i64, i32, i32, i32, [64 x i32], <{ i32, [255 x i32] }>, <{ [9 x float], [55 x float] }>, <{ [9 x float], [55 x float] }> } { i64 0, i64 -1, i32 -1, i32 10, i32 -1, [64 x i32] zeroinitializer, <{ i32, [255 x i32] }> <{ i32 -1, [255 x i32] zeroinitializer }>, <{ [9 x float], [55 x float] }> <{ [9 x float] [float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 4.500000e+00, float 8.500000e+00, float 1.650000e+01, float 3.250000e+01, float 7.150000e+01, float 1.575000e+02], [55 x float] zeroinitializer }>, <{ [9 x float], [55 x float] }> <{ [9 x float] [float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 8.500000e+00, float 1.650000e+01, float 7.150000e+01, float 1.575000e+02], [55 x float] zeroinitializer }> }, align 8
@_huff_lengthlist__44c6_s_short = internal global [100 x i64] [i64 4, i64 9, i64 11, i64 11, i64 13, i64 13, i64 17, i64 16, i64 17, i64 17, i64 4, i64 4, i64 6, i64 7, i64 9, i64 9, i64 12, i64 15, i64 17, i64 17, i64 7, i64 5, i64 4, i64 5, i64 7, i64 8, i64 11, i64 12, i64 17, i64 17, i64 9, i64 6, i64 4, i64 3, i64 5, i64 6, i64 10, i64 14, i64 17, i64 17, i64 11, i64 8, i64 6, i64 4, i64 5, i64 6, i64 9, i64 13, i64 17, i64 17, i64 11, i64 10, i64 7, i64 5, i64 5, i64 5, i64 8, i64 12, i64 17, i64 17, i64 13, i64 12, i64 9, i64 8, i64 7, i64 6, i64 8, i64 11, i64 17, i64 17, i64 13, i64 13, i64 9, i64 6, i64 6, i64 5, i64 6, i64 9, i64 17, i64 17, i64 17, i64 16, i64 10, i64 8, i64 7, i64 7, i64 8, i64 9, i64 17, i64 17, i64 17, i64 17, i64 14, i64 12, i64 11, i64 11, i64 11, i64 13, i64 17, i64 17], align 16
@_44c6_s_p1_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__44c6_s_p1_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__44c6_s_p1_0, ptr null, ptr @_vq_auxt__44c6_s_p1_0, ptr null, i32 0 }, align 8
@_44c6_s_p2_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__44c6_s_p2_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44c6_s_p2_0, ptr null, ptr @_vq_auxt__44c6_s_p2_0, ptr null, i32 0 }, align 8
@_44c6_s_p3_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__44c6_s_p3_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44c6_s_p3_0, ptr null, ptr @_vq_auxt__44c6_s_p3_0, ptr null, i32 0 }, align 8
@_44c6_s_p4_0 = internal global %struct.static_codebook { i64 2, i64 289, ptr @_vq_lengthlist__44c6_s_p4_0, i32 1, i64 -529530880, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__44c6_s_p4_0, ptr null, ptr @_vq_auxt__44c6_s_p4_0, ptr null, i32 0 }, align 8
@_44c6_s_p5_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__44c6_s_p5_0, i32 1, i64 -529137664, i64 1618345984, i32 2, i32 0, ptr @_vq_quantlist__44c6_s_p5_0, ptr null, ptr @_vq_auxt__44c6_s_p5_0, ptr null, i32 0 }, align 8
@_44c6_s_p5_1 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__44c6_s_p5_1, i32 1, i64 -531365888, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44c6_s_p5_1, ptr null, ptr @_vq_auxt__44c6_s_p5_1, ptr null, i32 0 }, align 8
@_44c6_s_p6_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44c6_s_p6_0, i32 1, i64 -526516224, i64 1616117760, i32 4, i32 0, ptr @_vq_quantlist__44c6_s_p6_0, ptr null, ptr @_vq_auxt__44c6_s_p6_0, ptr null, i32 0 }, align 8
@_44c6_s_p6_1 = internal global %struct.static_codebook { i64 2, i64 25, ptr @_vq_lengthlist__44c6_s_p6_1, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44c6_s_p6_1, ptr null, ptr @_vq_auxt__44c6_s_p6_1, ptr null, i32 0 }, align 8
@_44c6_s_p7_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44c6_s_p7_0, i32 1, i64 -523206656, i64 1618345984, i32 4, i32 0, ptr @_vq_quantlist__44c6_s_p7_0, ptr null, ptr @_vq_auxt__44c6_s_p7_0, ptr null, i32 0 }, align 8
@_44c6_s_p7_1 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__44c6_s_p7_1, i32 1, i64 -531365888, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44c6_s_p7_1, ptr null, ptr @_vq_auxt__44c6_s_p7_1, ptr null, i32 0 }, align 8
@_44c6_s_p8_0 = internal global %struct.static_codebook { i64 2, i64 225, ptr @_vq_lengthlist__44c6_s_p8_0, i32 1, i64 -520986624, i64 1620377600, i32 4, i32 0, ptr @_vq_quantlist__44c6_s_p8_0, ptr null, ptr @_vq_auxt__44c6_s_p8_0, ptr null, i32 0 }, align 8
@_44c6_s_p8_1 = internal global %struct.static_codebook { i64 2, i64 441, ptr @_vq_lengthlist__44c6_s_p8_1, i32 1, i64 -529268736, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__44c6_s_p8_1, ptr null, ptr @_vq_auxt__44c6_s_p8_1, ptr null, i32 0 }, align 8
@_44c6_s_p9_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44c6_s_p9_0, i32 1, i64 -511845376, i64 1630791680, i32 4, i32 0, ptr @_vq_quantlist__44c6_s_p9_0, ptr null, ptr @_vq_auxt__44c6_s_p9_0, ptr null, i32 0 }, align 8
@_44c6_s_p9_1 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44c6_s_p9_1, i32 1, i64 -518889472, i64 1622704128, i32 4, i32 0, ptr @_vq_quantlist__44c6_s_p9_1, ptr null, ptr @_vq_auxt__44c6_s_p9_1, ptr null, i32 0 }, align 8
@_44c6_s_p9_2 = internal global %struct.static_codebook { i64 1, i64 49, ptr @_vq_lengthlist__44c6_s_p9_2, i32 1, i64 -526909440, i64 1611661312, i32 6, i32 0, ptr @_vq_quantlist__44c6_s_p9_2, ptr null, ptr @_vq_auxt__44c6_s_p9_2, ptr null, i32 0 }, align 8
@_vq_lengthlist__44c6_s_p1_0 = internal global [81 x i64] [i64 1, i64 5, i64 5, i64 0, i64 5, i64 5, i64 0, i64 5, i64 5, i64 5, i64 8, i64 7, i64 0, i64 9, i64 8, i64 0, i64 8, i64 8, i64 6, i64 7, i64 8, i64 0, i64 8, i64 9, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 8, i64 8, i64 0, i64 8, i64 8, i64 0, i64 8, i64 8, i64 5, i64 8, i64 8, i64 0, i64 8, i64 8, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 9, i64 8, i64 0, i64 8, i64 8, i64 0, i64 8, i64 8, i64 5, i64 8, i64 9, i64 0, i64 8, i64 8, i64 0, i64 8, i64 8], align 16
@_vq_quantlist__44c6_s_p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44c6_s_p1_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c6_s_p1_0, ptr @_vq_quantmap__44c6_s_p1_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__44c6_s_p1_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__44c6_s_p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44c6_s_p2_0 = internal global [625 x i64] [i64 3, i64 5, i64 5, i64 8, i64 8, i64 0, i64 5, i64 5, i64 9, i64 9, i64 0, i64 5, i64 5, i64 9, i64 9, i64 0, i64 7, i64 7, i64 10, i64 10, i64 0, i64 0, i64 0, i64 10, i64 10, i64 5, i64 7, i64 7, i64 9, i64 9, i64 0, i64 8, i64 7, i64 10, i64 9, i64 0, i64 8, i64 8, i64 10, i64 10, i64 0, i64 10, i64 10, i64 11, i64 11, i64 0, i64 0, i64 0, i64 11, i64 11, i64 5, i64 7, i64 7, i64 9, i64 9, i64 0, i64 7, i64 8, i64 9, i64 10, i64 0, i64 7, i64 8, i64 10, i64 10, i64 0, i64 10, i64 10, i64 11, i64 11, i64 0, i64 0, i64 0, i64 11, i64 11, i64 8, i64 9, i64 9, i64 11, i64 10, i64 0, i64 11, i64 10, i64 12, i64 12, i64 0, i64 11, i64 11, i64 12, i64 12, i64 0, i64 13, i64 13, i64 14, i64 14, i64 0, i64 0, i64 0, i64 14, i64 14, i64 8, i64 9, i64 9, i64 10, i64 11, i64 0, i64 10, i64 11, i64 12, i64 12, i64 0, i64 11, i64 11, i64 12, i64 12, i64 0, i64 13, i64 13, i64 14, i64 14, i64 0, i64 0, i64 0, i64 14, i64 14, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 8, i64 8, i64 11, i64 11, i64 0, i64 7, i64 7, i64 10, i64 10, i64 0, i64 7, i64 7, i64 10, i64 10, i64 0, i64 9, i64 8, i64 11, i64 10, i64 0, i64 0, i64 0, i64 11, i64 11, i64 5, i64 7, i64 8, i64 11, i64 11, i64 0, i64 7, i64 7, i64 10, i64 10, i64 0, i64 7, i64 7, i64 10, i64 10, i64 0, i64 8, i64 9, i64 10, i64 11, i64 0, i64 0, i64 0, i64 11, i64 11, i64 9, i64 10, i64 10, i64 12, i64 12, i64 0, i64 10, i64 10, i64 12, i64 11, i64 0, i64 10, i64 10, i64 12, i64 12, i64 0, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 13, i64 13, i64 9, i64 10, i64 10, i64 12, i64 12, i64 0, i64 10, i64 10, i64 11, i64 12, i64 0, i64 10, i64 10, i64 12, i64 12, i64 0, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 8, i64 7, i64 11, i64 10, i64 0, i64 7, i64 7, i64 10, i64 10, i64 0, i64 7, i64 7, i64 10, i64 10, i64 0, i64 8, i64 9, i64 11, i64 11, i64 0, i64 0, i64 0, i64 11, i64 10, i64 5, i64 7, i64 8, i64 10, i64 11, i64 0, i64 7, i64 7, i64 10, i64 10, i64 0, i64 7, i64 7, i64 10, i64 10, i64 0, i64 9, i64 8, i64 11, i64 11, i64 0, i64 0, i64 0, i64 11, i64 11, i64 9, i64 10, i64 10, i64 12, i64 12, i64 0, i64 10, i64 10, i64 12, i64 12, i64 0, i64 10, i64 10, i64 12, i64 12, i64 0, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 13, i64 13, i64 9, i64 9, i64 10, i64 12, i64 12, i64 0, i64 10, i64 10, i64 12, i64 12, i64 0, i64 10, i64 10, i64 12, i64 12, i64 0, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 10, i64 10, i64 13, i64 13, i64 0, i64 9, i64 8, i64 12, i64 12, i64 0, i64 8, i64 9, i64 12, i64 12, i64 0, i64 10, i64 9, i64 12, i64 12, i64 0, i64 0, i64 0, i64 12, i64 12, i64 7, i64 10, i64 10, i64 13, i64 13, i64 0, i64 9, i64 9, i64 12, i64 12, i64 0, i64 9, i64 8, i64 12, i64 12, i64 0, i64 9, i64 10, i64 12, i64 12, i64 0, i64 0, i64 0, i64 12, i64 12, i64 10, i64 11, i64 11, i64 14, i64 14, i64 0, i64 11, i64 10, i64 13, i64 13, i64 0, i64 11, i64 11, i64 13, i64 13, i64 0, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 13, i64 13, i64 10, i64 11, i64 11, i64 14, i64 14, i64 0, i64 10, i64 11, i64 13, i64 13, i64 0, i64 11, i64 11, i64 13, i64 13, i64 0, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 10, i64 11, i64 11, i64 14, i64 14, i64 0, i64 11, i64 11, i64 13, i64 13, i64 0, i64 11, i64 10, i64 13, i64 13, i64 0, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 13, i64 13, i64 10, i64 11, i64 11, i64 14, i64 14, i64 0, i64 11, i64 11, i64 13, i64 13, i64 0, i64 10, i64 11, i64 13, i64 13, i64 0, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 13, i64 13], align 16
@_vq_quantlist__44c6_s_p2_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44c6_s_p2_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c6_s_p2_0, ptr @_vq_quantmap__44c6_s_p2_0, i32 5, i32 5 }, align 8
@_vq_quantthresh__44c6_s_p2_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44c6_s_p2_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_quantlist__44c6_s_p3_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__44c6_s_p3_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c6_s_p3_0, ptr @_vq_quantmap__44c6_s_p3_0, i32 9, i32 9 }, align 8
@_vq_lengthlist__44c6_s_p3_0 = internal global <{ [63 x i64], [18 x i64] }> <{ [63 x i64] [i64 2, i64 4, i64 4, i64 5, i64 5, i64 7, i64 7, i64 9, i64 9, i64 0, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 0, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 0, i64 5, i64 5, i64 6, i64 6, i64 8, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 6, i64 6, i64 8, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10], [18 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c6_s_p3_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__44c6_s_p3_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_quantlist__44c6_s_p4_0 = internal global [17 x i64] [i64 8, i64 7, i64 9, i64 6, i64 10, i64 5, i64 11, i64 4, i64 12, i64 3, i64 13, i64 2, i64 14, i64 1, i64 15, i64 0, i64 16], align 16
@_vq_auxt__44c6_s_p4_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c6_s_p4_0, ptr @_vq_quantmap__44c6_s_p4_0, i32 17, i32 17 }, align 8
@_vq_lengthlist__44c6_s_p4_0 = internal global <{ [153 x i64], [136 x i64] }> <{ [153 x i64] [i64 3, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 0, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 0, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 0, i64 5, i64 5, i64 6, i64 6, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 6, i64 6, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 0, i64 0, i64 0, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13], [136 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c6_s_p4_0 = internal global [16 x float] [float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00], align 16
@_vq_quantmap__44c6_s_p4_0 = internal global [17 x i64] [i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16], align 16
@_vq_lengthlist__44c6_s_p5_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 5, i64 7, i64 7, i64 5, i64 7, i64 7, i64 4, i64 7, i64 7, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 4, i64 7, i64 7, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 5, i64 9, i64 9, i64 9, i64 11, i64 11, i64 9, i64 11, i64 11, i64 7, i64 10, i64 10, i64 11, i64 12, i64 11, i64 12, i64 12, i64 12, i64 7, i64 10, i64 10, i64 11, i64 12, i64 12, i64 12, i64 12, i64 12, i64 6, i64 10, i64 10, i64 9, i64 11, i64 11, i64 10, i64 11, i64 11, i64 7, i64 10, i64 9, i64 11, i64 12, i64 12, i64 11, i64 12, i64 11, i64 7, i64 10, i64 10, i64 11, i64 12, i64 12, i64 11, i64 12, i64 12], align 16
@_vq_quantlist__44c6_s_p5_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44c6_s_p5_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c6_s_p5_0, ptr @_vq_quantmap__44c6_s_p5_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__44c6_s_p5_0 = internal global [2 x float] [float -5.500000e+00, float 5.500000e+00], align 4
@_vq_quantmap__44c6_s_p5_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44c6_s_p5_1 = internal global [121 x i64] [i64 3, i64 4, i64 4, i64 6, i64 6, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 11, i64 4, i64 4, i64 6, i64 6, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 11, i64 4, i64 4, i64 6, i64 6, i64 8, i64 8, i64 9, i64 8, i64 9, i64 9, i64 12, i64 5, i64 5, i64 6, i64 6, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 12, i64 12, i64 12, i64 6, i64 6, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 11, i64 11, i64 11, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 11, i64 11, i64 11, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 11, i64 11, i64 11, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 11, i64 11, i64 11, i64 11, i64 11, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 11, i64 11, i64 11, i64 11, i64 11, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 11, i64 11, i64 11, i64 11, i64 11, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8], align 16
@_vq_quantlist__44c6_s_p5_1 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__44c6_s_p5_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c6_s_p5_1, ptr @_vq_quantmap__44c6_s_p5_1, i32 11, i32 11 }, align 8
@_vq_quantthresh__44c6_s_p5_1 = internal global [10 x float] [float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00], align 16
@_vq_quantmap__44c6_s_p5_1 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_quantlist__44c6_s_p6_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44c6_s_p6_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c6_s_p6_0, ptr @_vq_quantmap__44c6_s_p6_0, i32 13, i32 13 }, align 8
@_vq_lengthlist__44c6_s_p6_0 = internal global <{ [91 x i64], [78 x i64] }> <{ [91 x i64] [i64 1, i64 4, i64 4, i64 6, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 5, i64 5, i64 5, i64 7, i64 7, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 6, i64 5, i64 5, i64 7, i64 7, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 0, i64 7, i64 7, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 0, i64 7, i64 7, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 11, i64 11, i64 8, i64 8, i64 10, i64 9, i64 10, i64 11, i64 11, i64 11, i64 12, i64 12, i64 0, i64 12, i64 12, i64 8, i64 8, i64 10, i64 9, i64 11, i64 11, i64 12, i64 11, i64 13, i64 13], [78 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c6_s_p6_0 = internal global [12 x float] [float -2.750000e+01, float -2.250000e+01, float -1.750000e+01, float -1.250000e+01, float -7.500000e+00, float -2.500000e+00, float 2.500000e+00, float 7.500000e+00, float 1.250000e+01, float 1.750000e+01, float 2.250000e+01, float 2.750000e+01], align 16
@_vq_quantmap__44c6_s_p6_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44c6_s_p6_1 = internal global [25 x i64] [i64 3, i64 4, i64 4, i64 5, i64 5, i64 6, i64 4, i64 4, i64 5, i64 5, i64 6, i64 4, i64 4, i64 5, i64 4, i64 6, i64 5, i64 5, i64 5, i64 5, i64 6, i64 6, i64 6, i64 5, i64 5], align 16
@_vq_quantlist__44c6_s_p6_1 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44c6_s_p6_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c6_s_p6_1, ptr @_vq_quantmap__44c6_s_p6_1, i32 5, i32 5 }, align 8
@_vq_quantthresh__44c6_s_p6_1 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44c6_s_p6_1 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__44c6_s_p7_0 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 5, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 11, i64 11, i64 12, i64 12, i64 6, i64 5, i64 5, i64 7, i64 7, i64 9, i64 9, i64 9, i64 9, i64 11, i64 11, i64 12, i64 12, i64 19, i64 7, i64 7, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 19, i64 7, i64 7, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 19, i64 11, i64 11, i64 8, i64 8, i64 10, i64 10, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 19, i64 12, i64 12, i64 8, i64 8, i64 10, i64 9, i64 11, i64 11, i64 12, i64 12, i64 13, i64 12, i64 19, i64 19, i64 19, i64 11, i64 11, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 19, i64 19, i64 19, i64 11, i64 11, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 19, i64 19, i64 19, i64 14, i64 14, i64 11, i64 11, i64 11, i64 12, i64 13, i64 13, i64 13, i64 13, i64 19, i64 19, i64 19, i64 15, i64 15, i64 11, i64 11, i64 12, i64 12, i64 13, i64 12, i64 14, i64 14, i64 19, i64 19, i64 19, i64 19, i64 18, i64 13, i64 13, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 18, i64 18, i64 18, i64 18, i64 18, i64 13, i64 12, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14], align 16
@_vq_quantlist__44c6_s_p7_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44c6_s_p7_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c6_s_p7_0, ptr @_vq_quantmap__44c6_s_p7_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__44c6_s_p7_0 = internal global [12 x float] [float -6.050000e+01, float -4.950000e+01, float -3.850000e+01, float -2.750000e+01, float -1.650000e+01, float -5.500000e+00, float 5.500000e+00, float 1.650000e+01, float 2.750000e+01, float 3.850000e+01, float 4.950000e+01, float 6.050000e+01], align 16
@_vq_quantmap__44c6_s_p7_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44c6_s_p7_1 = internal global [121 x i64] [i64 3, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 9, i64 5, i64 5, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 9, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 9, i64 9, i64 9, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 7, i64 8, i64 9, i64 9, i64 9, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 9, i64 9, i64 9, i64 7, i64 7, i64 8, i64 8, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 8, i64 9, i64 8, i64 8, i64 7, i64 7, i64 7, i64 7, i64 9, i64 9, i64 8, i64 8, i64 9, i64 8, i64 8, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 8, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8], align 16
@_vq_quantlist__44c6_s_p7_1 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__44c6_s_p7_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c6_s_p7_1, ptr @_vq_quantmap__44c6_s_p7_1, i32 11, i32 11 }, align 8
@_vq_quantthresh__44c6_s_p7_1 = internal global [10 x float] [float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00], align 16
@_vq_quantmap__44c6_s_p7_1 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_lengthlist__44c6_s_p8_0 = internal global [225 x i64] [i64 1, i64 4, i64 4, i64 7, i64 7, i64 8, i64 8, i64 7, i64 7, i64 9, i64 9, i64 9, i64 10, i64 11, i64 11, i64 6, i64 5, i64 5, i64 8, i64 8, i64 9, i64 9, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 6, i64 5, i64 5, i64 8, i64 8, i64 9, i64 9, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 17, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 8, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 11, i64 17, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 9, i64 9, i64 10, i64 10, i64 11, i64 12, i64 12, i64 12, i64 17, i64 12, i64 13, i64 9, i64 9, i64 10, i64 10, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 13, i64 12, i64 17, i64 13, i64 13, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 12, i64 11, i64 12, i64 12, i64 17, i64 17, i64 17, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 17, i64 17, i64 17, i64 9, i64 9, i64 9, i64 9, i64 11, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 17, i64 17, i64 17, i64 13, i64 13, i64 10, i64 10, i64 11, i64 11, i64 12, i64 11, i64 12, i64 13, i64 13, i64 13, i64 17, i64 17, i64 17, i64 14, i64 13, i64 10, i64 9, i64 11, i64 9, i64 12, i64 12, i64 12, i64 13, i64 13, i64 14, i64 17, i64 17, i64 17, i64 17, i64 17, i64 11, i64 12, i64 11, i64 11, i64 12, i64 12, i64 13, i64 14, i64 13, i64 14, i64 17, i64 17, i64 17, i64 17, i64 17, i64 12, i64 10, i64 11, i64 8, i64 12, i64 11, i64 13, i64 14, i64 14, i64 14, i64 17, i64 17, i64 16, i64 16, i64 16, i64 13, i64 15, i64 11, i64 12, i64 12, i64 13, i64 13, i64 13, i64 14, i64 14, i64 16, i64 16, i64 16, i64 16, i64 16, i64 14, i64 13, i64 12, i64 9, i64 13, i64 10, i64 14, i64 13, i64 14, i64 13], align 16
@_vq_quantlist__44c6_s_p8_0 = internal global [15 x i64] [i64 7, i64 6, i64 8, i64 5, i64 9, i64 4, i64 10, i64 3, i64 11, i64 2, i64 12, i64 1, i64 13, i64 0, i64 14], align 16
@_vq_auxt__44c6_s_p8_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c6_s_p8_0, ptr @_vq_quantmap__44c6_s_p8_0, i32 15, i32 15 }, align 8
@_vq_quantthresh__44c6_s_p8_0 = internal global [14 x float] [float -1.365000e+02, float -1.155000e+02, float -9.450000e+01, float -7.350000e+01, float -5.250000e+01, float -3.150000e+01, float -1.050000e+01, float 1.050000e+01, float 3.150000e+01, float 5.250000e+01, float 7.350000e+01, float 9.450000e+01, float 1.155000e+02, float 1.365000e+02], align 16
@_vq_quantmap__44c6_s_p8_0 = internal global [15 x i64] [i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14], align 16
@_vq_lengthlist__44c6_s_p8_1 = internal global [441 x i64] [i64 3, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 8, i64 9, i64 9, i64 9, i64 11, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 6, i64 6, i64 7, i64 7, i64 8, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 11, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 11, i64 10, i64 11, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 11, i64 11, i64 11, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 9, i64 9, i64 9, i64 11, i64 11, i64 11, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 9, i64 10, i64 9, i64 10, i64 10, i64 9, i64 11, i64 11, i64 11, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 9, i64 10, i64 9, i64 9, i64 9, i64 9, i64 11, i64 11, i64 11, i64 11, i64 11, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 9, i64 9, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 11, i64 11, i64 11, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 9, i64 10, i64 10, i64 9, i64 10, i64 9, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 9, i64 10, i64 9, i64 10, i64 10, i64 9, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 9, i64 10, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 9, i64 10, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10], align 16
@_vq_quantlist__44c6_s_p8_1 = internal global [21 x i64] [i64 10, i64 9, i64 11, i64 8, i64 12, i64 7, i64 13, i64 6, i64 14, i64 5, i64 15, i64 4, i64 16, i64 3, i64 17, i64 2, i64 18, i64 1, i64 19, i64 0, i64 20], align 16
@_vq_auxt__44c6_s_p8_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c6_s_p8_1, ptr @_vq_quantmap__44c6_s_p8_1, i32 21, i32 21 }, align 8
@_vq_quantthresh__44c6_s_p8_1 = internal global [20 x float] [float -9.500000e+00, float -8.500000e+00, float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00, float 8.500000e+00, float 9.500000e+00], align 16
@_vq_quantmap__44c6_s_p8_1 = internal global [21 x i64] [i64 19, i64 17, i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16, i64 18, i64 20], align 16
@_vq_lengthlist__44c6_s_p9_0 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 6, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 6, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8], align 16
@_vq_quantlist__44c6_s_p9_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44c6_s_p9_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c6_s_p9_0, ptr @_vq_quantmap__44c6_s_p9_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__44c6_s_p9_0 = internal global [12 x float] [float -3.503500e+03, float -2.866500e+03, float -2.229500e+03, float -1.592500e+03, float -9.555000e+02, float -3.185000e+02, float 3.185000e+02, float 9.555000e+02, float 1.592500e+03, float 2.229500e+03, float 2.866500e+03, float 3.503500e+03], align 16
@_vq_quantmap__44c6_s_p9_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44c6_s_p9_1 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 9, i64 10, i64 11, i64 6, i64 6, i64 6, i64 7, i64 8, i64 8, i64 8, i64 7, i64 8, i64 9, i64 10, i64 11, i64 10, i64 6, i64 5, i64 6, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 10, i64 10, i64 11, i64 14, i64 9, i64 8, i64 8, i64 8, i64 9, i64 8, i64 8, i64 9, i64 10, i64 10, i64 12, i64 11, i64 14, i64 8, i64 8, i64 9, i64 8, i64 9, i64 8, i64 8, i64 8, i64 11, i64 10, i64 11, i64 11, i64 14, i64 14, i64 13, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 12, i64 12, i64 8, i64 7, i64 10, i64 9, i64 9, i64 9, i64 11, i64 11, i64 11, i64 10, i64 13, i64 13, i64 13, i64 8, i64 9, i64 9, i64 8, i64 12, i64 11, i64 11, i64 11, i64 13, i64 11, i64 13, i64 13, i64 13, i64 9, i64 8, i64 9, i64 8, i64 10, i64 10, i64 11, i64 10, i64 11, i64 10, i64 13, i64 13, i64 13, i64 12, i64 12, i64 9, i64 10, i64 11, i64 11, i64 11, i64 12, i64 13, i64 12, i64 13, i64 13, i64 13, i64 13, i64 12, i64 10, i64 10, i64 10, i64 9, i64 13, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 12, i64 12, i64 10, i64 10, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 12, i64 12, i64 11, i64 12, i64 12, i64 12, i64 12, i64 13], align 16
@_vq_quantlist__44c6_s_p9_1 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44c6_s_p9_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c6_s_p9_1, ptr @_vq_quantmap__44c6_s_p9_1, i32 13, i32 13 }, align 8
@_vq_quantthresh__44c6_s_p9_1 = internal global [12 x float] [float -2.695000e+02, float -2.205000e+02, float -1.715000e+02, float -1.225000e+02, float -7.350000e+01, float -2.450000e+01, float 2.450000e+01, float 7.350000e+01, float 1.225000e+02, float 1.715000e+02, float 2.205000e+02, float 2.695000e+02], align 16
@_vq_quantmap__44c6_s_p9_1 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44c6_s_p9_2 = internal global [49 x i64] [i64 2, i64 4, i64 3, i64 5, i64 5, i64 5, i64 5, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 7, i64 6, i64 7, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7], align 16
@_vq_quantlist__44c6_s_p9_2 = internal global [49 x i64] [i64 24, i64 23, i64 25, i64 22, i64 26, i64 21, i64 27, i64 20, i64 28, i64 19, i64 29, i64 18, i64 30, i64 17, i64 31, i64 16, i64 32, i64 15, i64 33, i64 14, i64 34, i64 13, i64 35, i64 12, i64 36, i64 11, i64 37, i64 10, i64 38, i64 9, i64 39, i64 8, i64 40, i64 7, i64 41, i64 6, i64 42, i64 5, i64 43, i64 4, i64 44, i64 3, i64 45, i64 2, i64 46, i64 1, i64 47, i64 0, i64 48], align 16
@_vq_auxt__44c6_s_p9_2 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c6_s_p9_2, ptr @_vq_quantmap__44c6_s_p9_2, i32 49, i32 49 }, align 8
@_vq_quantthresh__44c6_s_p9_2 = internal global [48 x float] [float -2.350000e+01, float -2.250000e+01, float -2.150000e+01, float -2.050000e+01, float -1.950000e+01, float -1.850000e+01, float -1.750000e+01, float -1.650000e+01, float -1.550000e+01, float -1.450000e+01, float -1.350000e+01, float -1.250000e+01, float -1.150000e+01, float -1.050000e+01, float -9.500000e+00, float -8.500000e+00, float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00, float 8.500000e+00, float 9.500000e+00, float 1.050000e+01, float 1.150000e+01, float 1.250000e+01, float 1.350000e+01, float 1.450000e+01, float 1.550000e+01, float 1.650000e+01, float 1.750000e+01, float 1.850000e+01, float 1.950000e+01, float 2.050000e+01, float 2.150000e+01, float 2.250000e+01, float 2.350000e+01], align 16
@_vq_quantmap__44c6_s_p9_2 = internal global [49 x i64] [i64 47, i64 45, i64 43, i64 41, i64 39, i64 37, i64 35, i64 33, i64 31, i64 29, i64 27, i64 25, i64 23, i64 21, i64 19, i64 17, i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16, i64 18, i64 20, i64 22, i64 24, i64 26, i64 28, i64 30, i64 32, i64 34, i64 36, i64 38, i64 40, i64 42, i64 44, i64 46, i64 48], align 16
@_huff_lengthlist__44c6_s_long = internal global [100 x i64] [i64 3, i64 8, i64 11, i64 13, i64 13, i64 13, i64 12, i64 12, i64 13, i64 18, i64 6, i64 3, i64 4, i64 7, i64 9, i64 9, i64 11, i64 11, i64 13, i64 16, i64 9, i64 4, i64 3, i64 5, i64 7, i64 7, i64 9, i64 10, i64 14, i64 18, i64 11, i64 7, i64 4, i64 4, i64 6, i64 6, i64 8, i64 10, i64 14, i64 15, i64 11, i64 9, i64 6, i64 6, i64 6, i64 6, i64 8, i64 10, i64 13, i64 15, i64 10, i64 9, i64 7, i64 6, i64 6, i64 6, i64 7, i64 8, i64 12, i64 12, i64 12, i64 10, i64 9, i64 8, i64 7, i64 6, i64 6, i64 7, i64 11, i64 12, i64 11, i64 10, i64 10, i64 9, i64 9, i64 7, i64 7, i64 6, i64 9, i64 12, i64 12, i64 12, i64 13, i64 13, i64 13, i64 10, i64 9, i64 8, i64 10, i64 12, i64 13, i64 14, i64 16, i64 16, i64 17, i64 14, i64 12, i64 11, i64 11, i64 13], align 16
@_huff_book__44c7_s_short = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__44c7_s_short, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_resbook_44s_7 = internal global %struct.static_bookblock { [12 x [3 x ptr]] [[3 x ptr] zeroinitializer, [3 x ptr] [ptr null, ptr null, ptr @_44c7_s_p1_0], [3 x ptr] [ptr null, ptr null, ptr @_44c7_s_p2_0], [3 x ptr] [ptr null, ptr null, ptr @_44c7_s_p3_0], [3 x ptr] [ptr null, ptr null, ptr @_44c7_s_p4_0], [3 x ptr] [ptr @_44c7_s_p5_0, ptr @_44c7_s_p5_1, ptr null], [3 x ptr] [ptr @_44c7_s_p6_0, ptr @_44c7_s_p6_1, ptr null], [3 x ptr] [ptr @_44c7_s_p7_0, ptr @_44c7_s_p7_1, ptr null], [3 x ptr] [ptr @_44c7_s_p8_0, ptr @_44c7_s_p8_1, ptr null], [3 x ptr] [ptr @_44c7_s_p9_0, ptr @_44c7_s_p9_1, ptr @_44c7_s_p9_2], [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer] }, align 8
@_huff_book__44c7_s_long = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__44c7_s_long, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_lengthlist__44c7_s_short = internal global [100 x i64] [i64 4, i64 10, i64 12, i64 13, i64 15, i64 15, i64 16, i64 16, i64 17, i64 17, i64 5, i64 5, i64 7, i64 8, i64 9, i64 9, i64 12, i64 17, i64 18, i64 18, i64 7, i64 5, i64 4, i64 5, i64 7, i64 8, i64 10, i64 13, i64 18, i64 18, i64 8, i64 6, i64 5, i64 4, i64 5, i64 6, i64 9, i64 12, i64 17, i64 18, i64 10, i64 9, i64 6, i64 4, i64 4, i64 5, i64 8, i64 12, i64 18, i64 17, i64 11, i64 9, i64 7, i64 5, i64 4, i64 4, i64 6, i64 10, i64 17, i64 17, i64 13, i64 12, i64 10, i64 8, i64 6, i64 5, i64 6, i64 9, i64 17, i64 17, i64 14, i64 13, i64 12, i64 7, i64 6, i64 5, i64 5, i64 8, i64 16, i64 17, i64 16, i64 15, i64 14, i64 8, i64 8, i64 7, i64 7, i64 9, i64 14, i64 17, i64 17, i64 17, i64 17, i64 12, i64 11, i64 11, i64 11, i64 12, i64 16, i64 17], align 16
@_44c7_s_p1_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__44c7_s_p1_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__44c7_s_p1_0, ptr null, ptr @_vq_auxt__44c7_s_p1_0, ptr null, i32 0 }, align 8
@_44c7_s_p2_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__44c7_s_p2_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44c7_s_p2_0, ptr null, ptr @_vq_auxt__44c7_s_p2_0, ptr null, i32 0 }, align 8
@_44c7_s_p3_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__44c7_s_p3_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44c7_s_p3_0, ptr null, ptr @_vq_auxt__44c7_s_p3_0, ptr null, i32 0 }, align 8
@_44c7_s_p4_0 = internal global %struct.static_codebook { i64 2, i64 289, ptr @_vq_lengthlist__44c7_s_p4_0, i32 1, i64 -529530880, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__44c7_s_p4_0, ptr null, ptr @_vq_auxt__44c7_s_p4_0, ptr null, i32 0 }, align 8
@_44c7_s_p5_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__44c7_s_p5_0, i32 1, i64 -529137664, i64 1618345984, i32 2, i32 0, ptr @_vq_quantlist__44c7_s_p5_0, ptr null, ptr @_vq_auxt__44c7_s_p5_0, ptr null, i32 0 }, align 8
@_44c7_s_p5_1 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__44c7_s_p5_1, i32 1, i64 -531365888, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44c7_s_p5_1, ptr null, ptr @_vq_auxt__44c7_s_p5_1, ptr null, i32 0 }, align 8
@_44c7_s_p6_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44c7_s_p6_0, i32 1, i64 -526516224, i64 1616117760, i32 4, i32 0, ptr @_vq_quantlist__44c7_s_p6_0, ptr null, ptr @_vq_auxt__44c7_s_p6_0, ptr null, i32 0 }, align 8
@_44c7_s_p6_1 = internal global %struct.static_codebook { i64 2, i64 25, ptr @_vq_lengthlist__44c7_s_p6_1, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44c7_s_p6_1, ptr null, ptr @_vq_auxt__44c7_s_p6_1, ptr null, i32 0 }, align 8
@_44c7_s_p7_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44c7_s_p7_0, i32 1, i64 -523206656, i64 1618345984, i32 4, i32 0, ptr @_vq_quantlist__44c7_s_p7_0, ptr null, ptr @_vq_auxt__44c7_s_p7_0, ptr null, i32 0 }, align 8
@_44c7_s_p7_1 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__44c7_s_p7_1, i32 1, i64 -531365888, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44c7_s_p7_1, ptr null, ptr @_vq_auxt__44c7_s_p7_1, ptr null, i32 0 }, align 8
@_44c7_s_p8_0 = internal global %struct.static_codebook { i64 2, i64 225, ptr @_vq_lengthlist__44c7_s_p8_0, i32 1, i64 -520986624, i64 1620377600, i32 4, i32 0, ptr @_vq_quantlist__44c7_s_p8_0, ptr null, ptr @_vq_auxt__44c7_s_p8_0, ptr null, i32 0 }, align 8
@_44c7_s_p8_1 = internal global %struct.static_codebook { i64 2, i64 441, ptr @_vq_lengthlist__44c7_s_p8_1, i32 1, i64 -529268736, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__44c7_s_p8_1, ptr null, ptr @_vq_auxt__44c7_s_p8_1, ptr null, i32 0 }, align 8
@_44c7_s_p9_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44c7_s_p9_0, i32 1, i64 -511845376, i64 1630791680, i32 4, i32 0, ptr @_vq_quantlist__44c7_s_p9_0, ptr null, ptr @_vq_auxt__44c7_s_p9_0, ptr null, i32 0 }, align 8
@_44c7_s_p9_1 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44c7_s_p9_1, i32 1, i64 -518889472, i64 1622704128, i32 4, i32 0, ptr @_vq_quantlist__44c7_s_p9_1, ptr null, ptr @_vq_auxt__44c7_s_p9_1, ptr null, i32 0 }, align 8
@_44c7_s_p9_2 = internal global %struct.static_codebook { i64 1, i64 49, ptr @_vq_lengthlist__44c7_s_p9_2, i32 1, i64 -526909440, i64 1611661312, i32 6, i32 0, ptr @_vq_quantlist__44c7_s_p9_2, ptr null, ptr @_vq_auxt__44c7_s_p9_2, ptr null, i32 0 }, align 8
@_vq_lengthlist__44c7_s_p1_0 = internal global [81 x i64] [i64 1, i64 5, i64 5, i64 0, i64 5, i64 5, i64 0, i64 5, i64 5, i64 6, i64 8, i64 7, i64 0, i64 9, i64 8, i64 0, i64 8, i64 8, i64 5, i64 7, i64 8, i64 0, i64 8, i64 9, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 8, i64 8, i64 0, i64 8, i64 8, i64 0, i64 8, i64 8, i64 5, i64 8, i64 8, i64 0, i64 8, i64 8, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 9, i64 8, i64 0, i64 8, i64 8, i64 0, i64 8, i64 8, i64 5, i64 8, i64 9, i64 0, i64 8, i64 8, i64 0, i64 8, i64 8], align 16
@_vq_quantlist__44c7_s_p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44c7_s_p1_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c7_s_p1_0, ptr @_vq_quantmap__44c7_s_p1_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__44c7_s_p1_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__44c7_s_p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44c7_s_p2_0 = internal global [625 x i64] [i64 3, i64 5, i64 5, i64 8, i64 8, i64 0, i64 5, i64 5, i64 9, i64 9, i64 0, i64 5, i64 5, i64 9, i64 9, i64 0, i64 7, i64 7, i64 10, i64 9, i64 0, i64 0, i64 0, i64 9, i64 10, i64 5, i64 7, i64 7, i64 9, i64 9, i64 0, i64 8, i64 7, i64 10, i64 9, i64 0, i64 8, i64 7, i64 10, i64 9, i64 0, i64 10, i64 9, i64 11, i64 11, i64 0, i64 0, i64 0, i64 11, i64 11, i64 6, i64 7, i64 7, i64 9, i64 9, i64 0, i64 7, i64 8, i64 9, i64 10, i64 0, i64 7, i64 8, i64 10, i64 10, i64 0, i64 9, i64 9, i64 11, i64 11, i64 0, i64 0, i64 0, i64 11, i64 11, i64 8, i64 9, i64 9, i64 11, i64 10, i64 0, i64 11, i64 10, i64 12, i64 12, i64 0, i64 11, i64 11, i64 12, i64 12, i64 0, i64 13, i64 13, i64 14, i64 14, i64 0, i64 0, i64 0, i64 14, i64 14, i64 8, i64 9, i64 9, i64 10, i64 11, i64 0, i64 10, i64 11, i64 11, i64 12, i64 0, i64 11, i64 11, i64 12, i64 12, i64 0, i64 13, i64 13, i64 14, i64 14, i64 0, i64 0, i64 0, i64 14, i64 14, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 8, i64 7, i64 11, i64 11, i64 0, i64 7, i64 7, i64 10, i64 10, i64 0, i64 7, i64 7, i64 10, i64 10, i64 0, i64 9, i64 8, i64 11, i64 10, i64 0, i64 0, i64 0, i64 11, i64 11, i64 5, i64 7, i64 8, i64 11, i64 11, i64 0, i64 7, i64 7, i64 10, i64 10, i64 0, i64 7, i64 7, i64 10, i64 10, i64 0, i64 8, i64 9, i64 10, i64 11, i64 0, i64 0, i64 0, i64 11, i64 11, i64 9, i64 10, i64 10, i64 12, i64 12, i64 0, i64 10, i64 10, i64 12, i64 11, i64 0, i64 10, i64 10, i64 12, i64 12, i64 0, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 13, i64 13, i64 9, i64 10, i64 10, i64 12, i64 12, i64 0, i64 10, i64 10, i64 11, i64 12, i64 0, i64 10, i64 10, i64 12, i64 12, i64 0, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 8, i64 7, i64 11, i64 10, i64 0, i64 7, i64 7, i64 10, i64 10, i64 0, i64 7, i64 7, i64 10, i64 10, i64 0, i64 9, i64 9, i64 11, i64 11, i64 0, i64 0, i64 0, i64 11, i64 10, i64 5, i64 7, i64 8, i64 10, i64 11, i64 0, i64 7, i64 7, i64 10, i64 10, i64 0, i64 7, i64 7, i64 10, i64 10, i64 0, i64 9, i64 9, i64 11, i64 11, i64 0, i64 0, i64 0, i64 10, i64 11, i64 9, i64 10, i64 9, i64 12, i64 11, i64 0, i64 10, i64 10, i64 12, i64 12, i64 0, i64 10, i64 10, i64 12, i64 11, i64 0, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 13, i64 13, i64 9, i64 9, i64 10, i64 11, i64 12, i64 0, i64 10, i64 10, i64 12, i64 12, i64 0, i64 10, i64 10, i64 11, i64 12, i64 0, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 13, i64 13, i64 0, i64 9, i64 8, i64 12, i64 12, i64 0, i64 8, i64 9, i64 12, i64 12, i64 0, i64 10, i64 9, i64 12, i64 12, i64 0, i64 0, i64 0, i64 12, i64 12, i64 7, i64 10, i64 9, i64 13, i64 13, i64 0, i64 9, i64 9, i64 12, i64 12, i64 0, i64 9, i64 8, i64 12, i64 12, i64 0, i64 9, i64 10, i64 12, i64 12, i64 0, i64 0, i64 0, i64 12, i64 12, i64 10, i64 11, i64 11, i64 14, i64 14, i64 0, i64 11, i64 10, i64 13, i64 12, i64 0, i64 11, i64 11, i64 13, i64 13, i64 0, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 13, i64 13, i64 10, i64 11, i64 11, i64 14, i64 14, i64 0, i64 10, i64 11, i64 12, i64 13, i64 0, i64 11, i64 11, i64 13, i64 13, i64 0, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 10, i64 11, i64 11, i64 14, i64 14, i64 0, i64 11, i64 11, i64 13, i64 13, i64 0, i64 11, i64 10, i64 13, i64 13, i64 0, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 13, i64 13, i64 10, i64 11, i64 11, i64 14, i64 14, i64 0, i64 11, i64 11, i64 13, i64 13, i64 0, i64 10, i64 11, i64 13, i64 13, i64 0, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 13, i64 13], align 16
@_vq_quantlist__44c7_s_p2_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44c7_s_p2_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c7_s_p2_0, ptr @_vq_quantmap__44c7_s_p2_0, i32 5, i32 5 }, align 8
@_vq_quantthresh__44c7_s_p2_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44c7_s_p2_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_quantlist__44c7_s_p3_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__44c7_s_p3_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c7_s_p3_0, ptr @_vq_quantmap__44c7_s_p3_0, i32 9, i32 9 }, align 8
@_vq_lengthlist__44c7_s_p3_0 = internal global <{ [63 x i64], [18 x i64] }> <{ [63 x i64] [i64 2, i64 4, i64 4, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 0, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 0, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 0, i64 5, i64 5, i64 6, i64 6, i64 8, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 6, i64 6, i64 8, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 0, i64 0, i64 0, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10], [18 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c7_s_p3_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__44c7_s_p3_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_quantlist__44c7_s_p4_0 = internal global [17 x i64] [i64 8, i64 7, i64 9, i64 6, i64 10, i64 5, i64 11, i64 4, i64 12, i64 3, i64 13, i64 2, i64 14, i64 1, i64 15, i64 0, i64 16], align 16
@_vq_auxt__44c7_s_p4_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c7_s_p4_0, ptr @_vq_quantmap__44c7_s_p4_0, i32 17, i32 17 }, align 8
@_vq_lengthlist__44c7_s_p4_0 = internal global <{ [153 x i64], [136 x i64] }> <{ [153 x i64] [i64 3, i64 4, i64 4, i64 6, i64 5, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 0, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 0, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 0, i64 5, i64 5, i64 6, i64 6, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 6, i64 6, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13], [136 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c7_s_p4_0 = internal global [16 x float] [float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00], align 16
@_vq_quantmap__44c7_s_p4_0 = internal global [17 x i64] [i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16], align 16
@_vq_lengthlist__44c7_s_p5_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 5, i64 7, i64 7, i64 5, i64 7, i64 7, i64 4, i64 7, i64 7, i64 10, i64 11, i64 10, i64 10, i64 11, i64 11, i64 4, i64 7, i64 7, i64 10, i64 10, i64 11, i64 10, i64 10, i64 11, i64 5, i64 10, i64 10, i64 9, i64 12, i64 11, i64 10, i64 12, i64 12, i64 7, i64 11, i64 10, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 7, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 13, i64 5, i64 10, i64 10, i64 10, i64 12, i64 12, i64 10, i64 12, i64 12, i64 7, i64 11, i64 10, i64 12, i64 13, i64 13, i64 12, i64 12, i64 12, i64 7, i64 10, i64 11, i64 12, i64 13, i64 13, i64 12, i64 12, i64 12], align 16
@_vq_quantlist__44c7_s_p5_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44c7_s_p5_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c7_s_p5_0, ptr @_vq_quantmap__44c7_s_p5_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__44c7_s_p5_0 = internal global [2 x float] [float -5.500000e+00, float 5.500000e+00], align 4
@_vq_quantmap__44c7_s_p5_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44c7_s_p5_1 = internal global [121 x i64] [i64 3, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 9, i64 12, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 11, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 12, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 12, i64 12, i64 12, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 12, i64 12, i64 12, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 12, i64 11, i64 11, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 12, i64 12, i64 11, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 12, i64 12, i64 12, i64 11, i64 11, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 12, i64 12, i64 12, i64 11, i64 11, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 12, i64 12, i64 12, i64 11, i64 11, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8], align 16
@_vq_quantlist__44c7_s_p5_1 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__44c7_s_p5_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c7_s_p5_1, ptr @_vq_quantmap__44c7_s_p5_1, i32 11, i32 11 }, align 8
@_vq_quantthresh__44c7_s_p5_1 = internal global [10 x float] [float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00], align 16
@_vq_quantmap__44c7_s_p5_1 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_quantlist__44c7_s_p6_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44c7_s_p6_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c7_s_p6_0, ptr @_vq_quantmap__44c7_s_p6_0, i32 13, i32 13 }, align 8
@_vq_lengthlist__44c7_s_p6_0 = internal global <{ [91 x i64], [78 x i64] }> <{ [91 x i64] [i64 1, i64 4, i64 4, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 5, i64 5, i64 5, i64 7, i64 7, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 6, i64 5, i64 5, i64 7, i64 7, i64 9, i64 9, i64 9, i64 9, i64 11, i64 10, i64 11, i64 11, i64 0, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 7, i64 7, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 11, i64 10, i64 8, i64 8, i64 10, i64 10, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 0, i64 11, i64 11, i64 8, i64 8, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13], [78 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c7_s_p6_0 = internal global [12 x float] [float -2.750000e+01, float -2.250000e+01, float -1.750000e+01, float -1.250000e+01, float -7.500000e+00, float -2.500000e+00, float 2.500000e+00, float 7.500000e+00, float 1.250000e+01, float 1.750000e+01, float 2.250000e+01, float 2.750000e+01], align 16
@_vq_quantmap__44c7_s_p6_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44c7_s_p6_1 = internal global [25 x i64] [i64 3, i64 4, i64 4, i64 5, i64 5, i64 6, i64 4, i64 4, i64 5, i64 5, i64 6, i64 4, i64 4, i64 4, i64 5, i64 6, i64 5, i64 5, i64 5, i64 5, i64 6, i64 6, i64 6, i64 5, i64 5], align 16
@_vq_quantlist__44c7_s_p6_1 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44c7_s_p6_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c7_s_p6_1, ptr @_vq_quantmap__44c7_s_p6_1, i32 5, i32 5 }, align 8
@_vq_quantthresh__44c7_s_p6_1 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44c7_s_p6_1 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__44c7_s_p7_0 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 5, i64 5, i64 5, i64 7, i64 7, i64 9, i64 8, i64 9, i64 9, i64 11, i64 11, i64 12, i64 12, i64 6, i64 5, i64 5, i64 7, i64 7, i64 9, i64 9, i64 9, i64 10, i64 11, i64 11, i64 12, i64 12, i64 20, i64 7, i64 7, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 20, i64 7, i64 7, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 20, i64 11, i64 11, i64 8, i64 8, i64 10, i64 9, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 20, i64 12, i64 12, i64 8, i64 8, i64 9, i64 9, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 20, i64 20, i64 20, i64 11, i64 11, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 20, i64 20, i64 20, i64 11, i64 11, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 20, i64 20, i64 20, i64 14, i64 14, i64 11, i64 11, i64 11, i64 12, i64 13, i64 13, i64 13, i64 13, i64 20, i64 20, i64 20, i64 15, i64 14, i64 11, i64 11, i64 11, i64 11, i64 13, i64 13, i64 14, i64 14, i64 20, i64 20, i64 20, i64 20, i64 19, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 19, i64 19, i64 19, i64 19, i64 19, i64 13, i64 12, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14], align 16
@_vq_quantlist__44c7_s_p7_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44c7_s_p7_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c7_s_p7_0, ptr @_vq_quantmap__44c7_s_p7_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__44c7_s_p7_0 = internal global [12 x float] [float -6.050000e+01, float -4.950000e+01, float -3.850000e+01, float -2.750000e+01, float -1.650000e+01, float -5.500000e+00, float 5.500000e+00, float 1.650000e+01, float 2.750000e+01, float 3.850000e+01, float 4.950000e+01, float 6.050000e+01], align 16
@_vq_quantmap__44c7_s_p7_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44c7_s_p7_1 = internal global [121 x i64] [i64 3, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 9, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 9, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 7, i64 8, i64 9, i64 9, i64 9, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 7, i64 7, i64 8, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 7, i64 7, i64 7, i64 7, i64 8, i64 7, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8], align 16
@_vq_quantlist__44c7_s_p7_1 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__44c7_s_p7_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c7_s_p7_1, ptr @_vq_quantmap__44c7_s_p7_1, i32 11, i32 11 }, align 8
@_vq_quantthresh__44c7_s_p7_1 = internal global [10 x float] [float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00], align 16
@_vq_quantmap__44c7_s_p7_1 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_lengthlist__44c7_s_p8_0 = internal global [225 x i64] [i64 1, i64 4, i64 4, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 10, i64 11, i64 11, i64 6, i64 5, i64 5, i64 8, i64 8, i64 9, i64 9, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 6, i64 5, i64 5, i64 8, i64 8, i64 9, i64 9, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 17, i64 8, i64 8, i64 8, i64 8, i64 10, i64 9, i64 8, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 17, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 17, i64 12, i64 13, i64 9, i64 9, i64 10, i64 10, i64 9, i64 9, i64 10, i64 11, i64 11, i64 11, i64 12, i64 12, i64 17, i64 13, i64 13, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 17, i64 17, i64 17, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 17, i64 17, i64 17, i64 9, i64 9, i64 9, i64 9, i64 11, i64 10, i64 11, i64 12, i64 11, i64 12, i64 13, i64 12, i64 17, i64 17, i64 17, i64 13, i64 14, i64 10, i64 10, i64 10, i64 11, i64 12, i64 11, i64 12, i64 12, i64 12, i64 13, i64 17, i64 17, i64 17, i64 14, i64 14, i64 10, i64 9, i64 10, i64 9, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 17, i64 17, i64 17, i64 17, i64 17, i64 11, i64 11, i64 11, i64 11, i64 11, i64 12, i64 13, i64 13, i64 13, i64 14, i64 17, i64 17, i64 17, i64 17, i64 17, i64 12, i64 10, i64 11, i64 9, i64 12, i64 11, i64 13, i64 15, i64 14, i64 14, i64 17, i64 17, i64 17, i64 17, i64 17, i64 14, i64 15, i64 11, i64 12, i64 12, i64 13, i64 13, i64 12, i64 14, i64 14, i64 17, i64 16, i64 16, i64 16, i64 16, i64 15, i64 13, i64 12, i64 9, i64 12, i64 10, i64 14, i64 12, i64 15, i64 14], align 16
@_vq_quantlist__44c7_s_p8_0 = internal global [15 x i64] [i64 7, i64 6, i64 8, i64 5, i64 9, i64 4, i64 10, i64 3, i64 11, i64 2, i64 12, i64 1, i64 13, i64 0, i64 14], align 16
@_vq_auxt__44c7_s_p8_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c7_s_p8_0, ptr @_vq_quantmap__44c7_s_p8_0, i32 15, i32 15 }, align 8
@_vq_quantthresh__44c7_s_p8_0 = internal global [14 x float] [float -1.365000e+02, float -1.155000e+02, float -9.450000e+01, float -7.350000e+01, float -5.250000e+01, float -3.150000e+01, float -1.050000e+01, float 1.050000e+01, float 3.150000e+01, float 5.250000e+01, float 7.350000e+01, float 9.450000e+01, float 1.155000e+02, float 1.365000e+02], align 16
@_vq_quantmap__44c7_s_p8_0 = internal global [15 x i64] [i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14], align 16
@_vq_lengthlist__44c7_s_p8_1 = internal global [441 x i64] [i64 3, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 11, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 11, i64 11, i64 11, i64 7, i64 7, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 11, i64 11, i64 11, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 11, i64 11, i64 11, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 9, i64 11, i64 11, i64 11, i64 8, i64 9, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 9, i64 9, i64 10, i64 9, i64 11, i64 11, i64 11, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 10, i64 11, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 9, i64 11, i64 11, i64 10, i64 11, i64 11, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 10, i64 9, i64 11, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 10, i64 11, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 10, i64 10, i64 9, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 11, i64 11, i64 11, i64 10, i64 10, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 11, i64 11, i64 11, i64 10, i64 10, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10], align 16
@_vq_quantlist__44c7_s_p8_1 = internal global [21 x i64] [i64 10, i64 9, i64 11, i64 8, i64 12, i64 7, i64 13, i64 6, i64 14, i64 5, i64 15, i64 4, i64 16, i64 3, i64 17, i64 2, i64 18, i64 1, i64 19, i64 0, i64 20], align 16
@_vq_auxt__44c7_s_p8_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c7_s_p8_1, ptr @_vq_quantmap__44c7_s_p8_1, i32 21, i32 21 }, align 8
@_vq_quantthresh__44c7_s_p8_1 = internal global [20 x float] [float -9.500000e+00, float -8.500000e+00, float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00, float 8.500000e+00, float 9.500000e+00], align 16
@_vq_quantmap__44c7_s_p8_1 = internal global [21 x i64] [i64 19, i64 17, i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16, i64 18, i64 20], align 16
@_vq_lengthlist__44c7_s_p9_0 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 5, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 6, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8], align 16
@_vq_quantlist__44c7_s_p9_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44c7_s_p9_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c7_s_p9_0, ptr @_vq_quantmap__44c7_s_p9_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__44c7_s_p9_0 = internal global [12 x float] [float -3.503500e+03, float -2.866500e+03, float -2.229500e+03, float -1.592500e+03, float -9.555000e+02, float -3.185000e+02, float 3.185000e+02, float 9.555000e+02, float 1.592500e+03, float 2.229500e+03, float 2.866500e+03, float 3.503500e+03], align 16
@_vq_quantmap__44c7_s_p9_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44c7_s_p9_1 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 9, i64 8, i64 10, i64 10, i64 6, i64 6, i64 6, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 11, i64 6, i64 5, i64 6, i64 8, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 11, i64 14, i64 9, i64 8, i64 9, i64 8, i64 9, i64 8, i64 8, i64 9, i64 10, i64 10, i64 11, i64 11, i64 14, i64 8, i64 9, i64 8, i64 8, i64 8, i64 9, i64 9, i64 8, i64 12, i64 10, i64 11, i64 11, i64 14, i64 13, i64 13, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 12, i64 12, i64 12, i64 14, i64 14, i64 13, i64 8, i64 7, i64 10, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 10, i64 14, i64 14, i64 14, i64 8, i64 9, i64 9, i64 8, i64 11, i64 10, i64 12, i64 11, i64 11, i64 11, i64 14, i64 14, i64 14, i64 9, i64 7, i64 9, i64 8, i64 10, i64 10, i64 11, i64 11, i64 11, i64 10, i64 14, i64 14, i64 14, i64 12, i64 12, i64 10, i64 9, i64 11, i64 11, i64 11, i64 13, i64 12, i64 13, i64 14, i64 14, i64 14, i64 12, i64 12, i64 10, i64 10, i64 11, i64 8, i64 11, i64 11, i64 14, i64 13, i64 14, i64 14, i64 14, i64 14, i64 14, i64 12, i64 13, i64 11, i64 12, i64 12, i64 11, i64 14, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 12, i64 11, i64 11, i64 9, i64 12, i64 12, i64 12, i64 13], align 16
@_vq_quantlist__44c7_s_p9_1 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44c7_s_p9_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c7_s_p9_1, ptr @_vq_quantmap__44c7_s_p9_1, i32 13, i32 13 }, align 8
@_vq_quantthresh__44c7_s_p9_1 = internal global [12 x float] [float -2.695000e+02, float -2.205000e+02, float -1.715000e+02, float -1.225000e+02, float -7.350000e+01, float -2.450000e+01, float 2.450000e+01, float 7.350000e+01, float 1.225000e+02, float 1.715000e+02, float 2.205000e+02, float 2.695000e+02], align 16
@_vq_quantmap__44c7_s_p9_1 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44c7_s_p9_2 = internal global [49 x i64] [i64 2, i64 4, i64 3, i64 4, i64 5, i64 5, i64 5, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7], align 16
@_vq_quantlist__44c7_s_p9_2 = internal global [49 x i64] [i64 24, i64 23, i64 25, i64 22, i64 26, i64 21, i64 27, i64 20, i64 28, i64 19, i64 29, i64 18, i64 30, i64 17, i64 31, i64 16, i64 32, i64 15, i64 33, i64 14, i64 34, i64 13, i64 35, i64 12, i64 36, i64 11, i64 37, i64 10, i64 38, i64 9, i64 39, i64 8, i64 40, i64 7, i64 41, i64 6, i64 42, i64 5, i64 43, i64 4, i64 44, i64 3, i64 45, i64 2, i64 46, i64 1, i64 47, i64 0, i64 48], align 16
@_vq_auxt__44c7_s_p9_2 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c7_s_p9_2, ptr @_vq_quantmap__44c7_s_p9_2, i32 49, i32 49 }, align 8
@_vq_quantthresh__44c7_s_p9_2 = internal global [48 x float] [float -2.350000e+01, float -2.250000e+01, float -2.150000e+01, float -2.050000e+01, float -1.950000e+01, float -1.850000e+01, float -1.750000e+01, float -1.650000e+01, float -1.550000e+01, float -1.450000e+01, float -1.350000e+01, float -1.250000e+01, float -1.150000e+01, float -1.050000e+01, float -9.500000e+00, float -8.500000e+00, float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00, float 8.500000e+00, float 9.500000e+00, float 1.050000e+01, float 1.150000e+01, float 1.250000e+01, float 1.350000e+01, float 1.450000e+01, float 1.550000e+01, float 1.650000e+01, float 1.750000e+01, float 1.850000e+01, float 1.950000e+01, float 2.050000e+01, float 2.150000e+01, float 2.250000e+01, float 2.350000e+01], align 16
@_vq_quantmap__44c7_s_p9_2 = internal global [49 x i64] [i64 47, i64 45, i64 43, i64 41, i64 39, i64 37, i64 35, i64 33, i64 31, i64 29, i64 27, i64 25, i64 23, i64 21, i64 19, i64 17, i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16, i64 18, i64 20, i64 22, i64 24, i64 26, i64 28, i64 30, i64 32, i64 34, i64 36, i64 38, i64 40, i64 42, i64 44, i64 46, i64 48], align 16
@_huff_lengthlist__44c7_s_long = internal global [100 x i64] [i64 3, i64 8, i64 11, i64 13, i64 14, i64 13, i64 13, i64 12, i64 14, i64 16, i64 6, i64 4, i64 5, i64 7, i64 9, i64 10, i64 11, i64 11, i64 13, i64 15, i64 10, i64 4, i64 3, i64 5, i64 7, i64 7, i64 10, i64 10, i64 14, i64 16, i64 11, i64 7, i64 4, i64 4, i64 5, i64 6, i64 8, i64 10, i64 13, i64 15, i64 12, i64 9, i64 6, i64 5, i64 5, i64 6, i64 8, i64 9, i64 13, i64 15, i64 11, i64 9, i64 7, i64 6, i64 5, i64 5, i64 6, i64 8, i64 11, i64 13, i64 11, i64 10, i64 9, i64 8, i64 7, i64 6, i64 6, i64 7, i64 11, i64 12, i64 12, i64 11, i64 10, i64 9, i64 8, i64 7, i64 6, i64 6, i64 9, i64 11, i64 12, i64 12, i64 12, i64 12, i64 12, i64 10, i64 9, i64 8, i64 10, i64 12, i64 12, i64 14, i64 15, i64 16, i64 16, i64 14, i64 12, i64 10, i64 11, i64 13], align 16
@_huff_book__44c8_s_short = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__44c8_s_short, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_resbook_44s_8 = internal global %struct.static_bookblock { [12 x [3 x ptr]] [[3 x ptr] zeroinitializer, [3 x ptr] [ptr null, ptr null, ptr @_44c8_s_p1_0], [3 x ptr] [ptr null, ptr null, ptr @_44c8_s_p2_0], [3 x ptr] [ptr null, ptr null, ptr @_44c8_s_p3_0], [3 x ptr] [ptr null, ptr null, ptr @_44c8_s_p4_0], [3 x ptr] [ptr @_44c8_s_p5_0, ptr @_44c8_s_p5_1, ptr null], [3 x ptr] [ptr @_44c8_s_p6_0, ptr @_44c8_s_p6_1, ptr null], [3 x ptr] [ptr @_44c8_s_p7_0, ptr @_44c8_s_p7_1, ptr null], [3 x ptr] [ptr @_44c8_s_p8_0, ptr @_44c8_s_p8_1, ptr null], [3 x ptr] [ptr @_44c8_s_p9_0, ptr @_44c8_s_p9_1, ptr @_44c8_s_p9_2], [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer] }, align 8
@_huff_book__44c8_s_long = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__44c8_s_long, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_lengthlist__44c8_s_short = internal global [100 x i64] [i64 4, i64 11, i64 13, i64 14, i64 16, i64 15, i64 16, i64 16, i64 17, i64 16, i64 5, i64 6, i64 8, i64 9, i64 10, i64 9, i64 11, i64 17, i64 16, i64 17, i64 6, i64 6, i64 6, i64 6, i64 7, i64 8, i64 9, i64 14, i64 16, i64 17, i64 8, i64 6, i64 5, i64 4, i64 6, i64 7, i64 9, i64 12, i64 14, i64 17, i64 9, i64 7, i64 6, i64 5, i64 5, i64 5, i64 8, i64 11, i64 14, i64 17, i64 10, i64 9, i64 7, i64 6, i64 5, i64 3, i64 5, i64 8, i64 13, i64 17, i64 12, i64 11, i64 9, i64 8, i64 7, i64 4, i64 4, i64 6, i64 14, i64 17, i64 13, i64 13, i64 12, i64 8, i64 7, i64 5, i64 4, i64 5, i64 12, i64 17, i64 17, i64 14, i64 15, i64 10, i64 8, i64 7, i64 7, i64 7, i64 11, i64 17, i64 17, i64 16, i64 17, i64 14, i64 12, i64 10, i64 11, i64 11, i64 15, i64 17], align 16
@_44c8_s_p1_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__44c8_s_p1_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__44c8_s_p1_0, ptr null, ptr @_vq_auxt__44c8_s_p1_0, ptr null, i32 0 }, align 8
@_44c8_s_p2_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__44c8_s_p2_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44c8_s_p2_0, ptr null, ptr @_vq_auxt__44c8_s_p2_0, ptr null, i32 0 }, align 8
@_44c8_s_p3_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__44c8_s_p3_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44c8_s_p3_0, ptr null, ptr @_vq_auxt__44c8_s_p3_0, ptr null, i32 0 }, align 8
@_44c8_s_p4_0 = internal global %struct.static_codebook { i64 2, i64 289, ptr @_vq_lengthlist__44c8_s_p4_0, i32 1, i64 -529530880, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__44c8_s_p4_0, ptr null, ptr @_vq_auxt__44c8_s_p4_0, ptr null, i32 0 }, align 8
@_44c8_s_p5_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__44c8_s_p5_0, i32 1, i64 -529137664, i64 1618345984, i32 2, i32 0, ptr @_vq_quantlist__44c8_s_p5_0, ptr null, ptr @_vq_auxt__44c8_s_p5_0, ptr null, i32 0 }, align 8
@_44c8_s_p5_1 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__44c8_s_p5_1, i32 1, i64 -531365888, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44c8_s_p5_1, ptr null, ptr @_vq_auxt__44c8_s_p5_1, ptr null, i32 0 }, align 8
@_44c8_s_p6_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44c8_s_p6_0, i32 1, i64 -526516224, i64 1616117760, i32 4, i32 0, ptr @_vq_quantlist__44c8_s_p6_0, ptr null, ptr @_vq_auxt__44c8_s_p6_0, ptr null, i32 0 }, align 8
@_44c8_s_p6_1 = internal global %struct.static_codebook { i64 2, i64 25, ptr @_vq_lengthlist__44c8_s_p6_1, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44c8_s_p6_1, ptr null, ptr @_vq_auxt__44c8_s_p6_1, ptr null, i32 0 }, align 8
@_44c8_s_p7_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44c8_s_p7_0, i32 1, i64 -523206656, i64 1618345984, i32 4, i32 0, ptr @_vq_quantlist__44c8_s_p7_0, ptr null, ptr @_vq_auxt__44c8_s_p7_0, ptr null, i32 0 }, align 8
@_44c8_s_p7_1 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__44c8_s_p7_1, i32 1, i64 -531365888, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44c8_s_p7_1, ptr null, ptr @_vq_auxt__44c8_s_p7_1, ptr null, i32 0 }, align 8
@_44c8_s_p8_0 = internal global %struct.static_codebook { i64 2, i64 225, ptr @_vq_lengthlist__44c8_s_p8_0, i32 1, i64 -520986624, i64 1620377600, i32 4, i32 0, ptr @_vq_quantlist__44c8_s_p8_0, ptr null, ptr @_vq_auxt__44c8_s_p8_0, ptr null, i32 0 }, align 8
@_44c8_s_p8_1 = internal global %struct.static_codebook { i64 2, i64 441, ptr @_vq_lengthlist__44c8_s_p8_1, i32 1, i64 -529268736, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__44c8_s_p8_1, ptr null, ptr @_vq_auxt__44c8_s_p8_1, ptr null, i32 0 }, align 8
@_44c8_s_p9_0 = internal global %struct.static_codebook { i64 2, i64 289, ptr @_vq_lengthlist__44c8_s_p9_0, i32 1, i64 -509798400, i64 1631393792, i32 5, i32 0, ptr @_vq_quantlist__44c8_s_p9_0, ptr null, ptr @_vq_auxt__44c8_s_p9_0, ptr null, i32 0 }, align 8
@_44c8_s_p9_1 = internal global %struct.static_codebook { i64 2, i64 361, ptr @_vq_lengthlist__44c8_s_p9_1, i32 1, i64 -518287360, i64 1622704128, i32 5, i32 0, ptr @_vq_quantlist__44c8_s_p9_1, ptr null, ptr @_vq_auxt__44c8_s_p9_1, ptr null, i32 0 }, align 8
@_44c8_s_p9_2 = internal global %struct.static_codebook { i64 1, i64 49, ptr @_vq_lengthlist__44c8_s_p9_2, i32 1, i64 -526909440, i64 1611661312, i32 6, i32 0, ptr @_vq_quantlist__44c8_s_p9_2, ptr null, ptr @_vq_auxt__44c8_s_p9_2, ptr null, i32 0 }, align 8
@_vq_lengthlist__44c8_s_p1_0 = internal global [81 x i64] [i64 1, i64 5, i64 5, i64 0, i64 5, i64 5, i64 0, i64 5, i64 5, i64 6, i64 7, i64 7, i64 0, i64 9, i64 8, i64 0, i64 8, i64 8, i64 6, i64 7, i64 8, i64 0, i64 8, i64 9, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 8, i64 8, i64 0, i64 8, i64 8, i64 0, i64 8, i64 8, i64 5, i64 8, i64 8, i64 0, i64 8, i64 8, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 8, i64 8, i64 0, i64 8, i64 8, i64 0, i64 8, i64 7, i64 5, i64 8, i64 8, i64 0, i64 8, i64 8, i64 0, i64 7, i64 8], align 16
@_vq_quantlist__44c8_s_p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44c8_s_p1_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c8_s_p1_0, ptr @_vq_quantmap__44c8_s_p1_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__44c8_s_p1_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__44c8_s_p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44c8_s_p2_0 = internal global [625 x i64] [i64 3, i64 5, i64 5, i64 8, i64 8, i64 0, i64 6, i64 6, i64 8, i64 8, i64 0, i64 5, i64 6, i64 8, i64 8, i64 0, i64 7, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 9, i64 9, i64 5, i64 7, i64 6, i64 9, i64 9, i64 0, i64 7, i64 7, i64 10, i64 9, i64 0, i64 7, i64 7, i64 10, i64 9, i64 0, i64 9, i64 9, i64 11, i64 11, i64 0, i64 0, i64 0, i64 11, i64 11, i64 5, i64 6, i64 7, i64 9, i64 9, i64 0, i64 7, i64 7, i64 9, i64 10, i64 0, i64 7, i64 7, i64 9, i64 10, i64 0, i64 9, i64 9, i64 11, i64 11, i64 0, i64 0, i64 0, i64 11, i64 11, i64 8, i64 9, i64 9, i64 11, i64 10, i64 0, i64 11, i64 10, i64 12, i64 11, i64 0, i64 10, i64 10, i64 12, i64 11, i64 0, i64 13, i64 13, i64 14, i64 13, i64 0, i64 0, i64 0, i64 14, i64 13, i64 8, i64 9, i64 9, i64 10, i64 11, i64 0, i64 10, i64 11, i64 11, i64 12, i64 0, i64 10, i64 10, i64 12, i64 12, i64 0, i64 13, i64 13, i64 13, i64 14, i64 0, i64 0, i64 0, i64 13, i64 14, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 7, i64 7, i64 10, i64 10, i64 0, i64 7, i64 7, i64 10, i64 10, i64 0, i64 7, i64 7, i64 10, i64 10, i64 0, i64 9, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 10, i64 10, i64 6, i64 7, i64 7, i64 10, i64 10, i64 0, i64 7, i64 7, i64 10, i64 10, i64 0, i64 7, i64 7, i64 10, i64 10, i64 0, i64 8, i64 9, i64 10, i64 10, i64 0, i64 0, i64 0, i64 10, i64 10, i64 8, i64 10, i64 9, i64 12, i64 12, i64 0, i64 10, i64 9, i64 12, i64 11, i64 0, i64 10, i64 10, i64 11, i64 12, i64 0, i64 12, i64 11, i64 13, i64 12, i64 0, i64 0, i64 0, i64 13, i64 13, i64 8, i64 9, i64 10, i64 11, i64 12, i64 0, i64 9, i64 10, i64 11, i64 12, i64 0, i64 10, i64 10, i64 11, i64 12, i64 0, i64 11, i64 12, i64 12, i64 13, i64 0, i64 0, i64 0, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 8, i64 7, i64 11, i64 10, i64 0, i64 7, i64 7, i64 10, i64 10, i64 0, i64 7, i64 7, i64 10, i64 9, i64 0, i64 8, i64 9, i64 10, i64 10, i64 0, i64 0, i64 0, i64 10, i64 10, i64 6, i64 7, i64 8, i64 10, i64 11, i64 0, i64 7, i64 7, i64 10, i64 10, i64 0, i64 7, i64 7, i64 10, i64 10, i64 0, i64 9, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 10, i64 10, i64 8, i64 10, i64 9, i64 12, i64 11, i64 0, i64 10, i64 10, i64 12, i64 11, i64 0, i64 10, i64 10, i64 12, i64 11, i64 0, i64 11, i64 12, i64 13, i64 12, i64 0, i64 0, i64 0, i64 13, i64 12, i64 9, i64 9, i64 10, i64 11, i64 12, i64 0, i64 10, i64 10, i64 11, i64 12, i64 0, i64 10, i64 10, i64 11, i64 12, i64 0, i64 12, i64 11, i64 12, i64 13, i64 0, i64 0, i64 0, i64 12, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 12, i64 13, i64 0, i64 9, i64 8, i64 12, i64 11, i64 0, i64 8, i64 9, i64 11, i64 12, i64 0, i64 10, i64 9, i64 12, i64 11, i64 0, i64 0, i64 0, i64 11, i64 12, i64 7, i64 9, i64 9, i64 13, i64 13, i64 0, i64 9, i64 9, i64 11, i64 12, i64 0, i64 9, i64 8, i64 12, i64 11, i64 0, i64 9, i64 10, i64 11, i64 12, i64 0, i64 0, i64 0, i64 12, i64 11, i64 9, i64 11, i64 11, i64 14, i64 13, i64 0, i64 10, i64 10, i64 13, i64 12, i64 0, i64 10, i64 10, i64 13, i64 13, i64 0, i64 12, i64 11, i64 13, i64 12, i64 0, i64 0, i64 0, i64 13, i64 13, i64 9, i64 11, i64 11, i64 13, i64 14, i64 0, i64 10, i64 10, i64 12, i64 13, i64 0, i64 10, i64 10, i64 13, i64 13, i64 0, i64 11, i64 12, i64 12, i64 13, i64 0, i64 0, i64 0, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 11, i64 11, i64 14, i64 13, i64 0, i64 10, i64 10, i64 13, i64 12, i64 0, i64 10, i64 10, i64 13, i64 12, i64 0, i64 11, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 13, i64 12, i64 9, i64 11, i64 11, i64 13, i64 14, i64 0, i64 10, i64 10, i64 13, i64 13, i64 0, i64 10, i64 10, i64 12, i64 13, i64 0, i64 12, i64 11, i64 13, i64 13, i64 0, i64 0, i64 0, i64 12, i64 13], align 16
@_vq_quantlist__44c8_s_p2_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44c8_s_p2_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c8_s_p2_0, ptr @_vq_quantmap__44c8_s_p2_0, i32 5, i32 5 }, align 8
@_vq_quantthresh__44c8_s_p2_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44c8_s_p2_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_quantlist__44c8_s_p3_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__44c8_s_p3_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c8_s_p3_0, ptr @_vq_quantmap__44c8_s_p3_0, i32 9, i32 9 }, align 8
@_vq_lengthlist__44c8_s_p3_0 = internal global <{ [63 x i64], [18 x i64] }> <{ [63 x i64] [i64 3, i64 3, i64 4, i64 5, i64 5, i64 7, i64 6, i64 8, i64 8, i64 0, i64 4, i64 4, i64 5, i64 5, i64 7, i64 7, i64 9, i64 9, i64 0, i64 4, i64 4, i64 5, i64 6, i64 7, i64 7, i64 9, i64 9, i64 0, i64 5, i64 5, i64 6, i64 6, i64 8, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 6, i64 6, i64 8, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 10, i64 10], [18 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c8_s_p3_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__44c8_s_p3_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_quantlist__44c8_s_p4_0 = internal global [17 x i64] [i64 8, i64 7, i64 9, i64 6, i64 10, i64 5, i64 11, i64 4, i64 12, i64 3, i64 13, i64 2, i64 14, i64 1, i64 15, i64 0, i64 16], align 16
@_vq_auxt__44c8_s_p4_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c8_s_p4_0, ptr @_vq_quantmap__44c8_s_p4_0, i32 17, i32 17 }, align 8
@_vq_lengthlist__44c8_s_p4_0 = internal global <{ [153 x i64], [136 x i64] }> <{ [153 x i64] [i64 3, i64 4, i64 4, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 0, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 0, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 10, i64 11, i64 11, i64 0, i64 5, i64 5, i64 6, i64 6, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 6, i64 6, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13], [136 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c8_s_p4_0 = internal global [16 x float] [float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00], align 16
@_vq_quantmap__44c8_s_p4_0 = internal global [17 x i64] [i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16], align 16
@_vq_lengthlist__44c8_s_p5_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 5, i64 7, i64 7, i64 6, i64 7, i64 7, i64 4, i64 6, i64 6, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 4, i64 6, i64 6, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 5, i64 10, i64 10, i64 9, i64 12, i64 12, i64 10, i64 12, i64 12, i64 7, i64 10, i64 10, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 7, i64 10, i64 10, i64 12, i64 12, i64 12, i64 12, i64 12, i64 13, i64 6, i64 10, i64 10, i64 10, i64 12, i64 12, i64 11, i64 12, i64 12, i64 8, i64 10, i64 10, i64 12, i64 13, i64 12, i64 12, i64 12, i64 12, i64 7, i64 10, i64 10, i64 12, i64 12, i64 13, i64 12, i64 13, i64 12], align 16
@_vq_quantlist__44c8_s_p5_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44c8_s_p5_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c8_s_p5_0, ptr @_vq_quantmap__44c8_s_p5_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__44c8_s_p5_0 = internal global [2 x float] [float -5.500000e+00, float 5.500000e+00], align 4
@_vq_quantmap__44c8_s_p5_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44c8_s_p5_1 = internal global [121 x i64] [i64 4, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 10, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 10, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 11, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 11, i64 11, i64 11, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 11, i64 11, i64 11, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 11, i64 11, i64 11, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 11, i64 11, i64 11, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 11, i64 11, i64 11, i64 11, i64 11, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 11, i64 11, i64 11, i64 11, i64 11, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 11, i64 11, i64 11, i64 11, i64 11, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8], align 16
@_vq_quantlist__44c8_s_p5_1 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__44c8_s_p5_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c8_s_p5_1, ptr @_vq_quantmap__44c8_s_p5_1, i32 11, i32 11 }, align 8
@_vq_quantthresh__44c8_s_p5_1 = internal global [10 x float] [float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00], align 16
@_vq_quantmap__44c8_s_p5_1 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_quantlist__44c8_s_p6_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44c8_s_p6_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c8_s_p6_0, ptr @_vq_quantmap__44c8_s_p6_0, i32 13, i32 13 }, align 8
@_vq_lengthlist__44c8_s_p6_0 = internal global <{ [91 x i64], [78 x i64] }> <{ [91 x i64] [i64 1, i64 4, i64 4, i64 7, i64 6, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 5, i64 5, i64 5, i64 7, i64 7, i64 9, i64 9, i64 10, i64 9, i64 11, i64 11, i64 12, i64 12, i64 6, i64 5, i64 5, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 7, i64 7, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 12, i64 12, i64 12, i64 12, i64 0, i64 10, i64 10, i64 8, i64 8, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 11, i64 11, i64 8, i64 8, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13], [78 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c8_s_p6_0 = internal global [12 x float] [float -2.750000e+01, float -2.250000e+01, float -1.750000e+01, float -1.250000e+01, float -7.500000e+00, float -2.500000e+00, float 2.500000e+00, float 7.500000e+00, float 1.250000e+01, float 1.750000e+01, float 2.250000e+01, float 2.750000e+01], align 16
@_vq_quantmap__44c8_s_p6_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44c8_s_p6_1 = internal global [25 x i64] [i64 3, i64 4, i64 4, i64 5, i64 5, i64 5, i64 4, i64 4, i64 5, i64 5, i64 5, i64 4, i64 4, i64 5, i64 5, i64 6, i64 5, i64 5, i64 5, i64 5, i64 6, i64 6, i64 6, i64 5, i64 5], align 16
@_vq_quantlist__44c8_s_p6_1 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44c8_s_p6_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c8_s_p6_1, ptr @_vq_quantmap__44c8_s_p6_1, i32 5, i32 5 }, align 8
@_vq_quantthresh__44c8_s_p6_1 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44c8_s_p6_1 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__44c8_s_p7_0 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 5, i64 5, i64 5, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 6, i64 5, i64 5, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 20, i64 6, i64 7, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 20, i64 7, i64 7, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 20, i64 11, i64 11, i64 8, i64 8, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 20, i64 12, i64 12, i64 8, i64 8, i64 10, i64 9, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 20, i64 20, i64 20, i64 11, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 20, i64 20, i64 20, i64 10, i64 11, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 20, i64 20, i64 20, i64 14, i64 15, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 13, i64 20, i64 20, i64 20, i64 15, i64 15, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 20, i64 20, i64 20, i64 20, i64 19, i64 13, i64 13, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 19, i64 19, i64 19, i64 19, i64 19, i64 13, i64 13, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14], align 16
@_vq_quantlist__44c8_s_p7_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44c8_s_p7_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c8_s_p7_0, ptr @_vq_quantmap__44c8_s_p7_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__44c8_s_p7_0 = internal global [12 x float] [float -6.050000e+01, float -4.950000e+01, float -3.850000e+01, float -2.750000e+01, float -1.650000e+01, float -5.500000e+00, float 5.500000e+00, float 1.650000e+01, float 2.750000e+01, float 3.850000e+01, float 4.950000e+01, float 6.050000e+01], align 16
@_vq_quantmap__44c8_s_p7_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44c8_s_p7_1 = internal global [121 x i64] [i64 4, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 5, i64 5, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 5, i64 5, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7], align 16
@_vq_quantlist__44c8_s_p7_1 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__44c8_s_p7_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c8_s_p7_1, ptr @_vq_quantmap__44c8_s_p7_1, i32 11, i32 11 }, align 8
@_vq_quantthresh__44c8_s_p7_1 = internal global [10 x float] [float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00], align 16
@_vq_quantmap__44c8_s_p7_1 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_lengthlist__44c8_s_p8_0 = internal global [225 x i64] [i64 1, i64 4, i64 4, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 6, i64 5, i64 5, i64 7, i64 7, i64 9, i64 9, i64 8, i64 8, i64 10, i64 10, i64 11, i64 11, i64 11, i64 12, i64 6, i64 5, i64 5, i64 7, i64 7, i64 9, i64 9, i64 9, i64 8, i64 10, i64 10, i64 11, i64 10, i64 11, i64 12, i64 18, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 18, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 13, i64 18, i64 12, i64 12, i64 9, i64 9, i64 10, i64 10, i64 9, i64 9, i64 10, i64 11, i64 11, i64 12, i64 13, i64 12, i64 18, i64 12, i64 12, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 13, i64 13, i64 18, i64 18, i64 18, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 18, i64 18, i64 18, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 18, i64 18, i64 18, i64 13, i64 13, i64 10, i64 10, i64 11, i64 11, i64 12, i64 11, i64 12, i64 12, i64 13, i64 13, i64 18, i64 18, i64 18, i64 14, i64 14, i64 10, i64 9, i64 11, i64 10, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 18, i64 18, i64 18, i64 18, i64 18, i64 11, i64 12, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 13, i64 18, i64 18, i64 18, i64 18, i64 18, i64 12, i64 11, i64 11, i64 10, i64 12, i64 11, i64 13, i64 13, i64 13, i64 14, i64 18, i64 18, i64 18, i64 18, i64 18, i64 15, i64 16, i64 12, i64 12, i64 12, i64 13, i64 13, i64 13, i64 14, i64 14, i64 18, i64 17, i64 17, i64 17, i64 17, i64 16, i64 14, i64 12, i64 11, i64 12, i64 11, i64 13, i64 12, i64 15, i64 14], align 16
@_vq_quantlist__44c8_s_p8_0 = internal global [15 x i64] [i64 7, i64 6, i64 8, i64 5, i64 9, i64 4, i64 10, i64 3, i64 11, i64 2, i64 12, i64 1, i64 13, i64 0, i64 14], align 16
@_vq_auxt__44c8_s_p8_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c8_s_p8_0, ptr @_vq_quantmap__44c8_s_p8_0, i32 15, i32 15 }, align 8
@_vq_quantthresh__44c8_s_p8_0 = internal global [14 x float] [float -1.365000e+02, float -1.155000e+02, float -9.450000e+01, float -7.350000e+01, float -5.250000e+01, float -3.150000e+01, float -1.050000e+01, float 1.050000e+01, float 3.150000e+01, float 5.250000e+01, float 7.350000e+01, float 9.450000e+01, float 1.155000e+02, float 1.365000e+02], align 16
@_vq_quantmap__44c8_s_p8_0 = internal global [15 x i64] [i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14], align 16
@_vq_lengthlist__44c8_s_p8_1 = internal global [441 x i64] [i64 4, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 11, i64 11, i64 10, i64 11, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 9, i64 9, i64 10, i64 11, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 11, i64 10, i64 11, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 11, i64 11, i64 11, i64 10, i64 10, i64 11, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 11, i64 10, i64 10, i64 10, i64 11, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 9, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 10, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 9, i64 10, i64 9, i64 9], align 16
@_vq_quantlist__44c8_s_p8_1 = internal global [21 x i64] [i64 10, i64 9, i64 11, i64 8, i64 12, i64 7, i64 13, i64 6, i64 14, i64 5, i64 15, i64 4, i64 16, i64 3, i64 17, i64 2, i64 18, i64 1, i64 19, i64 0, i64 20], align 16
@_vq_auxt__44c8_s_p8_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c8_s_p8_1, ptr @_vq_quantmap__44c8_s_p8_1, i32 21, i32 21 }, align 8
@_vq_quantthresh__44c8_s_p8_1 = internal global [20 x float] [float -9.500000e+00, float -8.500000e+00, float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00, float 8.500000e+00, float 9.500000e+00], align 16
@_vq_quantmap__44c8_s_p8_1 = internal global [21 x i64] [i64 19, i64 17, i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16, i64 18, i64 20], align 16
@_vq_lengthlist__44c8_s_p9_0 = internal global [289 x i64] [i64 1, i64 5, i64 5, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 7, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 6, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9], align 16
@_vq_quantlist__44c8_s_p9_0 = internal global [17 x i64] [i64 8, i64 7, i64 9, i64 6, i64 10, i64 5, i64 11, i64 4, i64 12, i64 3, i64 13, i64 2, i64 14, i64 1, i64 15, i64 0, i64 16], align 16
@_vq_auxt__44c8_s_p9_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c8_s_p9_0, ptr @_vq_quantmap__44c8_s_p9_0, i32 17, i32 17 }, align 8
@_vq_quantthresh__44c8_s_p9_0 = internal global [16 x float] [float -6.982500e+03, float -6.051500e+03, float -5.120500e+03, float -4.189500e+03, float -3.258500e+03, float -2.327500e+03, float -1.396500e+03, float -4.655000e+02, float 4.655000e+02, float 1.396500e+03, float 2.327500e+03, float 3.258500e+03, float 4.189500e+03, float 5.120500e+03, float 6.051500e+03, float 6.982500e+03], align 16
@_vq_quantmap__44c8_s_p9_0 = internal global [17 x i64] [i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16], align 16
@_vq_lengthlist__44c8_s_p9_1 = internal global [361 x i64] [i64 1, i64 4, i64 4, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 11, i64 10, i64 13, i64 12, i64 11, i64 12, i64 6, i64 6, i64 6, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 10, i64 10, i64 10, i64 12, i64 12, i64 12, i64 12, i64 13, i64 15, i64 5, i64 5, i64 5, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 9, i64 10, i64 11, i64 12, i64 13, i64 12, i64 13, i64 13, i64 12, i64 15, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 14, i64 12, i64 13, i64 15, i64 12, i64 14, i64 15, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 12, i64 11, i64 12, i64 11, i64 12, i64 13, i64 13, i64 13, i64 15, i64 13, i64 13, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 11, i64 10, i64 11, i64 12, i64 12, i64 12, i64 14, i64 13, i64 14, i64 15, i64 15, i64 13, i64 13, i64 9, i64 8, i64 10, i64 9, i64 10, i64 10, i64 11, i64 10, i64 12, i64 12, i64 13, i64 13, i64 14, i64 13, i64 14, i64 15, i64 15, i64 15, i64 15, i64 9, i64 9, i64 9, i64 9, i64 10, i64 11, i64 12, i64 12, i64 12, i64 13, i64 13, i64 13, i64 14, i64 15, i64 15, i64 14, i64 15, i64 15, i64 15, i64 9, i64 7, i64 9, i64 8, i64 12, i64 11, i64 11, i64 13, i64 12, i64 12, i64 13, i64 12, i64 14, i64 13, i64 13, i64 14, i64 15, i64 15, i64 15, i64 13, i64 13, i64 10, i64 10, i64 12, i64 11, i64 13, i64 13, i64 12, i64 12, i64 13, i64 13, i64 14, i64 13, i64 13, i64 15, i64 15, i64 15, i64 15, i64 12, i64 13, i64 11, i64 9, i64 11, i64 10, i64 12, i64 12, i64 15, i64 13, i64 13, i64 13, i64 14, i64 13, i64 14, i64 13, i64 15, i64 15, i64 15, i64 15, i64 15, i64 12, i64 12, i64 11, i64 11, i64 12, i64 13, i64 15, i64 13, i64 13, i64 14, i64 14, i64 14, i64 15, i64 14, i64 15, i64 15, i64 15, i64 15, i64 15, i64 13, i64 11, i64 12, i64 11, i64 12, i64 11, i64 13, i64 14, i64 13, i64 13, i64 14, i64 14, i64 13, i64 14, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 12, i64 12, i64 12, i64 13, i64 15, i64 13, i64 15, i64 14, i64 15, i64 14, i64 13, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 14, i64 15, i64 13, i64 13, i64 12, i64 11, i64 14, i64 12, i64 15, i64 13, i64 14, i64 14, i64 14, i64 13, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 14, i64 13, i64 14, i64 13, i64 15, i64 13, i64 15, i64 15, i64 15, i64 14, i64 15, i64 14, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 14, i64 14, i64 14, i64 13, i64 13, i64 13, i64 15, i64 15, i64 15, i64 15, i64 14, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 12, i64 13, i64 13, i64 13, i64 14, i64 15, i64 15, i64 13, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 14, i64 14, i64 15, i64 15, i64 15, i64 14, i64 14, i64 15], align 16
@_vq_quantlist__44c8_s_p9_1 = internal global [19 x i64] [i64 9, i64 8, i64 10, i64 7, i64 11, i64 6, i64 12, i64 5, i64 13, i64 4, i64 14, i64 3, i64 15, i64 2, i64 16, i64 1, i64 17, i64 0, i64 18], align 16
@_vq_auxt__44c8_s_p9_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c8_s_p9_1, ptr @_vq_quantmap__44c8_s_p9_1, i32 19, i32 19 }, align 8
@_vq_quantthresh__44c8_s_p9_1 = internal global [18 x float] [float -4.165000e+02, float -3.675000e+02, float -3.185000e+02, float -2.695000e+02, float -2.205000e+02, float -1.715000e+02, float -1.225000e+02, float -7.350000e+01, float -2.450000e+01, float 2.450000e+01, float 7.350000e+01, float 1.225000e+02, float 1.715000e+02, float 2.205000e+02, float 2.695000e+02, float 3.185000e+02, float 3.675000e+02, float 4.165000e+02], align 16
@_vq_quantmap__44c8_s_p9_1 = internal global [19 x i64] [i64 17, i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16, i64 18], align 16
@_vq_lengthlist__44c8_s_p9_2 = internal global [49 x i64] [i64 3, i64 4, i64 3, i64 4, i64 5, i64 5, i64 5, i64 5, i64 5, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 7, i64 6, i64 7, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7], align 16
@_vq_quantlist__44c8_s_p9_2 = internal global [49 x i64] [i64 24, i64 23, i64 25, i64 22, i64 26, i64 21, i64 27, i64 20, i64 28, i64 19, i64 29, i64 18, i64 30, i64 17, i64 31, i64 16, i64 32, i64 15, i64 33, i64 14, i64 34, i64 13, i64 35, i64 12, i64 36, i64 11, i64 37, i64 10, i64 38, i64 9, i64 39, i64 8, i64 40, i64 7, i64 41, i64 6, i64 42, i64 5, i64 43, i64 4, i64 44, i64 3, i64 45, i64 2, i64 46, i64 1, i64 47, i64 0, i64 48], align 16
@_vq_auxt__44c8_s_p9_2 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c8_s_p9_2, ptr @_vq_quantmap__44c8_s_p9_2, i32 49, i32 49 }, align 8
@_vq_quantthresh__44c8_s_p9_2 = internal global [48 x float] [float -2.350000e+01, float -2.250000e+01, float -2.150000e+01, float -2.050000e+01, float -1.950000e+01, float -1.850000e+01, float -1.750000e+01, float -1.650000e+01, float -1.550000e+01, float -1.450000e+01, float -1.350000e+01, float -1.250000e+01, float -1.150000e+01, float -1.050000e+01, float -9.500000e+00, float -8.500000e+00, float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00, float 8.500000e+00, float 9.500000e+00, float 1.050000e+01, float 1.150000e+01, float 1.250000e+01, float 1.350000e+01, float 1.450000e+01, float 1.550000e+01, float 1.650000e+01, float 1.750000e+01, float 1.850000e+01, float 1.950000e+01, float 2.050000e+01, float 2.150000e+01, float 2.250000e+01, float 2.350000e+01], align 16
@_vq_quantmap__44c8_s_p9_2 = internal global [49 x i64] [i64 47, i64 45, i64 43, i64 41, i64 39, i64 37, i64 35, i64 33, i64 31, i64 29, i64 27, i64 25, i64 23, i64 21, i64 19, i64 17, i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16, i64 18, i64 20, i64 22, i64 24, i64 26, i64 28, i64 30, i64 32, i64 34, i64 36, i64 38, i64 40, i64 42, i64 44, i64 46, i64 48], align 16
@_huff_lengthlist__44c8_s_long = internal global [100 x i64] [i64 3, i64 8, i64 12, i64 14, i64 14, i64 13, i64 13, i64 12, i64 13, i64 15, i64 6, i64 4, i64 6, i64 8, i64 10, i64 10, i64 11, i64 11, i64 13, i64 15, i64 9, i64 5, i64 4, i64 5, i64 7, i64 8, i64 9, i64 10, i64 13, i64 15, i64 11, i64 7, i64 4, i64 4, i64 5, i64 6, i64 8, i64 9, i64 13, i64 14, i64 12, i64 9, i64 6, i64 5, i64 5, i64 5, i64 7, i64 9, i64 12, i64 14, i64 11, i64 10, i64 7, i64 6, i64 5, i64 4, i64 6, i64 7, i64 11, i64 12, i64 11, i64 10, i64 9, i64 8, i64 7, i64 5, i64 6, i64 6, i64 10, i64 11, i64 12, i64 11, i64 10, i64 9, i64 8, i64 6, i64 6, i64 5, i64 8, i64 10, i64 12, i64 12, i64 12, i64 11, i64 11, i64 10, i64 9, i64 7, i64 8, i64 11, i64 12, i64 13, i64 14, i64 14, i64 15, i64 13, i64 10, i64 9, i64 9, i64 11], align 16
@_huff_book__44c9_s_short = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__44c9_s_short, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_resbook_44s_9 = internal global %struct.static_bookblock { [12 x [3 x ptr]] [[3 x ptr] zeroinitializer, [3 x ptr] [ptr null, ptr null, ptr @_44c9_s_p1_0], [3 x ptr] [ptr null, ptr null, ptr @_44c9_s_p2_0], [3 x ptr] [ptr null, ptr null, ptr @_44c9_s_p3_0], [3 x ptr] [ptr null, ptr null, ptr @_44c9_s_p4_0], [3 x ptr] [ptr @_44c9_s_p5_0, ptr @_44c9_s_p5_1, ptr null], [3 x ptr] [ptr @_44c9_s_p6_0, ptr @_44c9_s_p6_1, ptr null], [3 x ptr] [ptr @_44c9_s_p7_0, ptr @_44c9_s_p7_1, ptr null], [3 x ptr] [ptr @_44c9_s_p8_0, ptr @_44c9_s_p8_1, ptr null], [3 x ptr] [ptr @_44c9_s_p9_0, ptr @_44c9_s_p9_1, ptr @_44c9_s_p9_2], [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer] }, align 8
@_huff_book__44c9_s_long = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__44c9_s_long, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_lengthlist__44c9_s_short = internal global [100 x i64] [i64 5, i64 13, i64 17, i64 15, i64 16, i64 16, i64 18, i64 17, i64 18, i64 18, i64 5, i64 7, i64 10, i64 12, i64 12, i64 12, i64 12, i64 17, i64 18, i64 17, i64 7, i64 6, i64 7, i64 8, i64 9, i64 9, i64 9, i64 13, i64 17, i64 17, i64 8, i64 6, i64 6, i64 5, i64 6, i64 7, i64 8, i64 11, i64 16, i64 18, i64 9, i64 7, i64 7, i64 5, i64 5, i64 6, i64 7, i64 10, i64 15, i64 18, i64 9, i64 8, i64 7, i64 6, i64 5, i64 4, i64 5, i64 7, i64 13, i64 17, i64 11, i64 11, i64 9, i64 8, i64 7, i64 4, i64 3, i64 5, i64 12, i64 18, i64 13, i64 13, i64 12, i64 10, i64 7, i64 5, i64 4, i64 3, i64 8, i64 13, i64 16, i64 16, i64 16, i64 13, i64 8, i64 8, i64 7, i64 5, i64 8, i64 12, i64 15, i64 18, i64 17, i64 15, i64 11, i64 10, i64 9, i64 8, i64 10, i64 14], align 16
@_44c9_s_p1_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__44c9_s_p1_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__44c9_s_p1_0, ptr null, ptr @_vq_auxt__44c9_s_p1_0, ptr null, i32 0 }, align 8
@_44c9_s_p2_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__44c9_s_p2_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44c9_s_p2_0, ptr null, ptr @_vq_auxt__44c9_s_p2_0, ptr null, i32 0 }, align 8
@_44c9_s_p3_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__44c9_s_p3_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44c9_s_p3_0, ptr null, ptr @_vq_auxt__44c9_s_p3_0, ptr null, i32 0 }, align 8
@_44c9_s_p4_0 = internal global %struct.static_codebook { i64 2, i64 289, ptr @_vq_lengthlist__44c9_s_p4_0, i32 1, i64 -529530880, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__44c9_s_p4_0, ptr null, ptr @_vq_auxt__44c9_s_p4_0, ptr null, i32 0 }, align 8
@_44c9_s_p5_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__44c9_s_p5_0, i32 1, i64 -529137664, i64 1618345984, i32 2, i32 0, ptr @_vq_quantlist__44c9_s_p5_0, ptr null, ptr @_vq_auxt__44c9_s_p5_0, ptr null, i32 0 }, align 8
@_44c9_s_p5_1 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__44c9_s_p5_1, i32 1, i64 -531365888, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44c9_s_p5_1, ptr null, ptr @_vq_auxt__44c9_s_p5_1, ptr null, i32 0 }, align 8
@_44c9_s_p6_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44c9_s_p6_0, i32 1, i64 -526516224, i64 1616117760, i32 4, i32 0, ptr @_vq_quantlist__44c9_s_p6_0, ptr null, ptr @_vq_auxt__44c9_s_p6_0, ptr null, i32 0 }, align 8
@_44c9_s_p6_1 = internal global %struct.static_codebook { i64 2, i64 25, ptr @_vq_lengthlist__44c9_s_p6_1, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44c9_s_p6_1, ptr null, ptr @_vq_auxt__44c9_s_p6_1, ptr null, i32 0 }, align 8
@_44c9_s_p7_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44c9_s_p7_0, i32 1, i64 -523206656, i64 1618345984, i32 4, i32 0, ptr @_vq_quantlist__44c9_s_p7_0, ptr null, ptr @_vq_auxt__44c9_s_p7_0, ptr null, i32 0 }, align 8
@_44c9_s_p7_1 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__44c9_s_p7_1, i32 1, i64 -531365888, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44c9_s_p7_1, ptr null, ptr @_vq_auxt__44c9_s_p7_1, ptr null, i32 0 }, align 8
@_44c9_s_p8_0 = internal global %struct.static_codebook { i64 2, i64 225, ptr @_vq_lengthlist__44c9_s_p8_0, i32 1, i64 -520986624, i64 1620377600, i32 4, i32 0, ptr @_vq_quantlist__44c9_s_p8_0, ptr null, ptr @_vq_auxt__44c9_s_p8_0, ptr null, i32 0 }, align 8
@_44c9_s_p8_1 = internal global %struct.static_codebook { i64 2, i64 441, ptr @_vq_lengthlist__44c9_s_p8_1, i32 1, i64 -529268736, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__44c9_s_p8_1, ptr null, ptr @_vq_auxt__44c9_s_p8_1, ptr null, i32 0 }, align 8
@_44c9_s_p9_0 = internal global %struct.static_codebook { i64 2, i64 361, ptr @_vq_lengthlist__44c9_s_p9_0, i32 1, i64 -508535424, i64 1631393792, i32 5, i32 0, ptr @_vq_quantlist__44c9_s_p9_0, ptr null, ptr @_vq_auxt__44c9_s_p9_0, ptr null, i32 0 }, align 8
@_44c9_s_p9_1 = internal global %struct.static_codebook { i64 2, i64 361, ptr @_vq_lengthlist__44c9_s_p9_1, i32 1, i64 -518287360, i64 1622704128, i32 5, i32 0, ptr @_vq_quantlist__44c9_s_p9_1, ptr null, ptr @_vq_auxt__44c9_s_p9_1, ptr null, i32 0 }, align 8
@_44c9_s_p9_2 = internal global %struct.static_codebook { i64 1, i64 49, ptr @_vq_lengthlist__44c9_s_p9_2, i32 1, i64 -526909440, i64 1611661312, i32 6, i32 0, ptr @_vq_quantlist__44c9_s_p9_2, ptr null, ptr @_vq_auxt__44c9_s_p9_2, ptr null, i32 0 }, align 8
@_vq_lengthlist__44c9_s_p1_0 = internal global [81 x i64] [i64 1, i64 5, i64 5, i64 0, i64 5, i64 5, i64 0, i64 5, i64 5, i64 6, i64 8, i64 8, i64 0, i64 9, i64 8, i64 0, i64 8, i64 8, i64 6, i64 8, i64 8, i64 0, i64 8, i64 9, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 8, i64 8, i64 0, i64 8, i64 7, i64 0, i64 8, i64 8, i64 5, i64 8, i64 8, i64 0, i64 7, i64 8, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 9, i64 8, i64 0, i64 8, i64 8, i64 0, i64 7, i64 7, i64 5, i64 8, i64 9, i64 0, i64 8, i64 8, i64 0, i64 7, i64 7], align 16
@_vq_quantlist__44c9_s_p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44c9_s_p1_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c9_s_p1_0, ptr @_vq_quantmap__44c9_s_p1_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__44c9_s_p1_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__44c9_s_p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44c9_s_p2_0 = internal global [625 x i64] [i64 3, i64 6, i64 6, i64 8, i64 8, i64 0, i64 6, i64 6, i64 8, i64 8, i64 0, i64 5, i64 5, i64 8, i64 8, i64 0, i64 7, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 9, i64 9, i64 6, i64 7, i64 7, i64 9, i64 8, i64 0, i64 8, i64 7, i64 9, i64 9, i64 0, i64 7, i64 7, i64 9, i64 9, i64 0, i64 9, i64 9, i64 11, i64 10, i64 0, i64 0, i64 0, i64 10, i64 10, i64 6, i64 7, i64 7, i64 8, i64 9, i64 0, i64 7, i64 8, i64 9, i64 9, i64 0, i64 7, i64 7, i64 9, i64 9, i64 0, i64 9, i64 9, i64 10, i64 11, i64 0, i64 0, i64 0, i64 10, i64 10, i64 8, i64 9, i64 9, i64 10, i64 10, i64 0, i64 10, i64 10, i64 11, i64 11, i64 0, i64 10, i64 10, i64 11, i64 11, i64 0, i64 12, i64 12, i64 13, i64 12, i64 0, i64 0, i64 0, i64 13, i64 13, i64 8, i64 8, i64 9, i64 10, i64 10, i64 0, i64 10, i64 10, i64 11, i64 12, i64 0, i64 10, i64 10, i64 11, i64 11, i64 0, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 8, i64 7, i64 10, i64 10, i64 0, i64 7, i64 7, i64 10, i64 9, i64 0, i64 7, i64 7, i64 10, i64 10, i64 0, i64 9, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 10, i64 10, i64 6, i64 7, i64 7, i64 10, i64 10, i64 0, i64 7, i64 7, i64 9, i64 10, i64 0, i64 7, i64 7, i64 10, i64 10, i64 0, i64 8, i64 9, i64 10, i64 10, i64 0, i64 0, i64 0, i64 10, i64 10, i64 8, i64 9, i64 9, i64 11, i64 11, i64 0, i64 10, i64 9, i64 11, i64 11, i64 0, i64 10, i64 10, i64 11, i64 11, i64 0, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 12, i64 12, i64 8, i64 9, i64 9, i64 11, i64 11, i64 0, i64 9, i64 10, i64 11, i64 11, i64 0, i64 10, i64 10, i64 11, i64 11, i64 0, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 12, i64 12, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 8, i64 7, i64 10, i64 10, i64 0, i64 7, i64 7, i64 10, i64 10, i64 0, i64 7, i64 7, i64 10, i64 9, i64 0, i64 8, i64 9, i64 10, i64 10, i64 0, i64 0, i64 0, i64 10, i64 9, i64 5, i64 7, i64 8, i64 10, i64 10, i64 0, i64 7, i64 7, i64 10, i64 10, i64 0, i64 7, i64 7, i64 9, i64 10, i64 0, i64 9, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 10, i64 10, i64 8, i64 9, i64 9, i64 12, i64 11, i64 0, i64 10, i64 10, i64 11, i64 11, i64 0, i64 10, i64 9, i64 11, i64 11, i64 0, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 12, i64 12, i64 8, i64 9, i64 9, i64 11, i64 11, i64 0, i64 10, i64 10, i64 11, i64 11, i64 0, i64 9, i64 10, i64 11, i64 11, i64 0, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 12, i64 12, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 12, i64 12, i64 0, i64 9, i64 9, i64 11, i64 11, i64 0, i64 8, i64 9, i64 11, i64 11, i64 0, i64 10, i64 9, i64 12, i64 11, i64 0, i64 0, i64 0, i64 11, i64 11, i64 7, i64 9, i64 9, i64 12, i64 12, i64 0, i64 8, i64 9, i64 11, i64 11, i64 0, i64 9, i64 8, i64 11, i64 11, i64 0, i64 9, i64 10, i64 11, i64 11, i64 0, i64 0, i64 0, i64 11, i64 11, i64 9, i64 11, i64 11, i64 13, i64 13, i64 0, i64 10, i64 10, i64 12, i64 12, i64 0, i64 10, i64 10, i64 12, i64 12, i64 0, i64 12, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 13, i64 13, i64 9, i64 10, i64 11, i64 13, i64 13, i64 0, i64 10, i64 10, i64 12, i64 12, i64 0, i64 10, i64 10, i64 12, i64 12, i64 0, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 12, i64 12, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 11, i64 10, i64 13, i64 13, i64 0, i64 10, i64 10, i64 12, i64 12, i64 0, i64 10, i64 9, i64 12, i64 12, i64 0, i64 11, i64 11, i64 12, i64 13, i64 0, i64 0, i64 0, i64 12, i64 11, i64 9, i64 10, i64 10, i64 12, i64 13, i64 0, i64 10, i64 10, i64 12, i64 12, i64 0, i64 10, i64 10, i64 12, i64 12, i64 0, i64 11, i64 11, i64 13, i64 12, i64 0, i64 0, i64 0, i64 12, i64 12], align 16
@_vq_quantlist__44c9_s_p2_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44c9_s_p2_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c9_s_p2_0, ptr @_vq_quantmap__44c9_s_p2_0, i32 5, i32 5 }, align 8
@_vq_quantthresh__44c9_s_p2_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44c9_s_p2_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_quantlist__44c9_s_p3_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__44c9_s_p3_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c9_s_p3_0, ptr @_vq_quantmap__44c9_s_p3_0, i32 9, i32 9 }, align 8
@_vq_lengthlist__44c9_s_p3_0 = internal global <{ [63 x i64], [18 x i64] }> <{ [63 x i64] [i64 3, i64 4, i64 4, i64 5, i64 5, i64 6, i64 6, i64 8, i64 8, i64 0, i64 4, i64 4, i64 5, i64 5, i64 7, i64 6, i64 8, i64 8, i64 0, i64 4, i64 4, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 0, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9], [18 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c9_s_p3_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__44c9_s_p3_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_quantlist__44c9_s_p4_0 = internal global [17 x i64] [i64 8, i64 7, i64 9, i64 6, i64 10, i64 5, i64 11, i64 4, i64 12, i64 3, i64 13, i64 2, i64 14, i64 1, i64 15, i64 0, i64 16], align 16
@_vq_auxt__44c9_s_p4_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c9_s_p4_0, ptr @_vq_quantmap__44c9_s_p4_0, i32 17, i32 17 }, align 8
@_vq_lengthlist__44c9_s_p4_0 = internal global <{ [153 x i64], [136 x i64] }> <{ [153 x i64] [i64 4, i64 4, i64 4, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 0, i64 5, i64 5, i64 5, i64 5, i64 6, i64 6, i64 8, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 0, i64 5, i64 5, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 0, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 7, i64 7, i64 7, i64 7, i64 9, i64 9, i64 9, i64 9, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 7, i64 7, i64 7, i64 8, i64 9, i64 9, i64 9, i64 9, i64 11, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 7, i64 7, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13], [136 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c9_s_p4_0 = internal global [16 x float] [float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00], align 16
@_vq_quantmap__44c9_s_p4_0 = internal global [17 x i64] [i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16], align 16
@_vq_lengthlist__44c9_s_p5_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 5, i64 7, i64 7, i64 6, i64 7, i64 7, i64 4, i64 6, i64 6, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 4, i64 6, i64 6, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 5, i64 10, i64 10, i64 9, i64 12, i64 12, i64 10, i64 12, i64 12, i64 7, i64 10, i64 10, i64 12, i64 12, i64 12, i64 12, i64 12, i64 13, i64 7, i64 10, i64 10, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 6, i64 10, i64 10, i64 10, i64 12, i64 12, i64 11, i64 12, i64 12, i64 8, i64 10, i64 10, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 7, i64 10, i64 10, i64 12, i64 12, i64 13, i64 12, i64 12, i64 12], align 16
@_vq_quantlist__44c9_s_p5_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44c9_s_p5_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c9_s_p5_0, ptr @_vq_quantmap__44c9_s_p5_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__44c9_s_p5_0 = internal global [2 x float] [float -5.500000e+00, float 5.500000e+00], align 4
@_vq_quantmap__44c9_s_p5_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44c9_s_p5_1 = internal global [121 x i64] [i64 4, i64 5, i64 5, i64 6, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 10, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 10, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 11, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 11, i64 11, i64 11, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 11, i64 11, i64 11, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 11, i64 11, i64 11, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 11, i64 11, i64 11, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 11, i64 11, i64 11, i64 11, i64 11, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 11, i64 11, i64 11, i64 11, i64 11, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 11, i64 11, i64 11, i64 11, i64 11, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7], align 16
@_vq_quantlist__44c9_s_p5_1 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__44c9_s_p5_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c9_s_p5_1, ptr @_vq_quantmap__44c9_s_p5_1, i32 11, i32 11 }, align 8
@_vq_quantthresh__44c9_s_p5_1 = internal global [10 x float] [float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00], align 16
@_vq_quantmap__44c9_s_p5_1 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_quantlist__44c9_s_p6_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44c9_s_p6_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c9_s_p6_0, ptr @_vq_quantmap__44c9_s_p6_0, i32 13, i32 13 }, align 8
@_vq_lengthlist__44c9_s_p6_0 = internal global <{ [91 x i64], [78 x i64] }> <{ [91 x i64] [i64 2, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 5, i64 4, i64 4, i64 6, i64 6, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 6, i64 4, i64 4, i64 6, i64 6, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 12, i64 12, i64 0, i64 6, i64 6, i64 6, i64 6, i64 8, i64 8, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 6, i64 6, i64 6, i64 6, i64 8, i64 8, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 10, i64 10, i64 8, i64 8, i64 9, i64 9, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 11, i64 11, i64 8, i64 8, i64 9, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13], [78 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__44c9_s_p6_0 = internal global [12 x float] [float -2.750000e+01, float -2.250000e+01, float -1.750000e+01, float -1.250000e+01, float -7.500000e+00, float -2.500000e+00, float 2.500000e+00, float 7.500000e+00, float 1.250000e+01, float 1.750000e+01, float 2.250000e+01, float 2.750000e+01], align 16
@_vq_quantmap__44c9_s_p6_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44c9_s_p6_1 = internal global [25 x i64] [i64 4, i64 4, i64 4, i64 5, i64 5, i64 5, i64 4, i64 4, i64 5, i64 5, i64 5, i64 4, i64 4, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5], align 16
@_vq_quantlist__44c9_s_p6_1 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44c9_s_p6_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c9_s_p6_1, ptr @_vq_quantmap__44c9_s_p6_1, i32 5, i32 5 }, align 8
@_vq_quantthresh__44c9_s_p6_1 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44c9_s_p6_1 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__44c9_s_p7_0 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 6, i64 5, i64 5, i64 7, i64 7, i64 9, i64 8, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 6, i64 5, i64 5, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 20, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 20, i64 7, i64 7, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 13, i64 12, i64 20, i64 10, i64 10, i64 8, i64 8, i64 9, i64 9, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 20, i64 11, i64 11, i64 8, i64 8, i64 9, i64 9, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 20, i64 20, i64 20, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 20, i64 20, i64 20, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 20, i64 20, i64 20, i64 14, i64 14, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 13, i64 20, i64 20, i64 20, i64 14, i64 15, i64 11, i64 11, i64 11, i64 11, i64 13, i64 13, i64 14, i64 13, i64 20, i64 20, i64 20, i64 20, i64 19, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 19, i64 19, i64 19, i64 19, i64 19, i64 13, i64 13, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14], align 16
@_vq_quantlist__44c9_s_p7_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44c9_s_p7_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c9_s_p7_0, ptr @_vq_quantmap__44c9_s_p7_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__44c9_s_p7_0 = internal global [12 x float] [float -6.050000e+01, float -4.950000e+01, float -3.850000e+01, float -2.750000e+01, float -1.650000e+01, float -5.500000e+00, float 5.500000e+00, float 1.650000e+01, float 2.750000e+01, float 3.850000e+01, float 4.950000e+01, float 6.050000e+01], align 16
@_vq_quantmap__44c9_s_p7_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44c9_s_p7_1 = internal global [121 x i64] [i64 5, i64 6, i64 6, i64 6, i64 6, i64 7, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 6, i64 6, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 6, i64 6, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 6, i64 6, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7], align 16
@_vq_quantlist__44c9_s_p7_1 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__44c9_s_p7_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c9_s_p7_1, ptr @_vq_quantmap__44c9_s_p7_1, i32 11, i32 11 }, align 8
@_vq_quantthresh__44c9_s_p7_1 = internal global [10 x float] [float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00], align 16
@_vq_quantmap__44c9_s_p7_1 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_lengthlist__44c9_s_p8_0 = internal global [225 x i64] [i64 1, i64 4, i64 4, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 6, i64 5, i64 5, i64 7, i64 7, i64 9, i64 9, i64 8, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 6, i64 5, i64 5, i64 7, i64 7, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 19, i64 7, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 13, i64 19, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 12, i64 12, i64 12, i64 19, i64 12, i64 12, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 12, i64 12, i64 12, i64 12, i64 19, i64 12, i64 12, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 11, i64 13, i64 13, i64 19, i64 19, i64 19, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 19, i64 19, i64 19, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 19, i64 19, i64 19, i64 13, i64 13, i64 10, i64 10, i64 10, i64 10, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 19, i64 19, i64 19, i64 13, i64 13, i64 10, i64 10, i64 10, i64 10, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 19, i64 19, i64 19, i64 19, i64 19, i64 11, i64 12, i64 11, i64 11, i64 12, i64 12, i64 13, i64 12, i64 13, i64 13, i64 19, i64 19, i64 19, i64 18, i64 18, i64 12, i64 11, i64 11, i64 10, i64 12, i64 11, i64 13, i64 13, i64 13, i64 14, i64 18, i64 18, i64 18, i64 18, i64 18, i64 15, i64 16, i64 12, i64 12, i64 13, i64 12, i64 13, i64 13, i64 14, i64 14, i64 18, i64 18, i64 18, i64 18, i64 18, i64 16, i64 15, i64 12, i64 11, i64 12, i64 11, i64 13, i64 13, i64 14, i64 14], align 16
@_vq_quantlist__44c9_s_p8_0 = internal global [15 x i64] [i64 7, i64 6, i64 8, i64 5, i64 9, i64 4, i64 10, i64 3, i64 11, i64 2, i64 12, i64 1, i64 13, i64 0, i64 14], align 16
@_vq_auxt__44c9_s_p8_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c9_s_p8_0, ptr @_vq_quantmap__44c9_s_p8_0, i32 15, i32 15 }, align 8
@_vq_quantthresh__44c9_s_p8_0 = internal global [14 x float] [float -1.365000e+02, float -1.155000e+02, float -9.450000e+01, float -7.350000e+01, float -5.250000e+01, float -3.150000e+01, float -1.050000e+01, float 1.050000e+01, float 3.150000e+01, float 5.250000e+01, float 7.350000e+01, float 9.450000e+01, float 1.155000e+02, float 1.365000e+02], align 16
@_vq_quantmap__44c9_s_p8_0 = internal global [15 x i64] [i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14], align 16
@_vq_lengthlist__44c9_s_p8_1 = internal global [441 x i64] [i64 4, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 7, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 10, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9], align 16
@_vq_quantlist__44c9_s_p8_1 = internal global [21 x i64] [i64 10, i64 9, i64 11, i64 8, i64 12, i64 7, i64 13, i64 6, i64 14, i64 5, i64 15, i64 4, i64 16, i64 3, i64 17, i64 2, i64 18, i64 1, i64 19, i64 0, i64 20], align 16
@_vq_auxt__44c9_s_p8_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c9_s_p8_1, ptr @_vq_quantmap__44c9_s_p8_1, i32 21, i32 21 }, align 8
@_vq_quantthresh__44c9_s_p8_1 = internal global [20 x float] [float -9.500000e+00, float -8.500000e+00, float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00, float 8.500000e+00, float 9.500000e+00], align 16
@_vq_quantmap__44c9_s_p8_1 = internal global [21 x i64] [i64 19, i64 17, i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16, i64 18, i64 20], align 16
@_vq_lengthlist__44c9_s_p9_0 = internal global [361 x i64] [i64 1, i64 4, i64 4, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 7, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 7, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9], align 16
@_vq_quantlist__44c9_s_p9_0 = internal global [19 x i64] [i64 9, i64 8, i64 10, i64 7, i64 11, i64 6, i64 12, i64 5, i64 13, i64 4, i64 14, i64 3, i64 15, i64 2, i64 16, i64 1, i64 17, i64 0, i64 18], align 16
@_vq_auxt__44c9_s_p9_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c9_s_p9_0, ptr @_vq_quantmap__44c9_s_p9_0, i32 19, i32 19 }, align 8
@_vq_quantthresh__44c9_s_p9_0 = internal global [18 x float] [float -7.913500e+03, float -6.982500e+03, float -6.051500e+03, float -5.120500e+03, float -4.189500e+03, float -3.258500e+03, float -2.327500e+03, float -1.396500e+03, float -4.655000e+02, float 4.655000e+02, float 1.396500e+03, float 2.327500e+03, float 3.258500e+03, float 4.189500e+03, float 5.120500e+03, float 6.051500e+03, float 6.982500e+03, float 7.913500e+03], align 16
@_vq_quantmap__44c9_s_p9_0 = internal global [19 x i64] [i64 17, i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16, i64 18], align 16
@_vq_lengthlist__44c9_s_p9_1 = internal global [361 x i64] [i64 1, i64 4, i64 4, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 10, i64 10, i64 10, i64 12, i64 11, i64 12, i64 13, i64 13, i64 12, i64 6, i64 5, i64 5, i64 8, i64 8, i64 8, i64 9, i64 8, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 14, i64 13, i64 13, i64 12, i64 5, i64 5, i64 5, i64 8, i64 8, i64 9, i64 8, i64 8, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 14, i64 12, i64 13, i64 13, i64 16, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 12, i64 13, i64 13, i64 13, i64 13, i64 14, i64 14, i64 16, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 11, i64 11, i64 12, i64 11, i64 13, i64 13, i64 14, i64 13, i64 13, i64 13, i64 16, i64 14, i64 13, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 12, i64 12, i64 13, i64 13, i64 13, i64 14, i64 13, i64 15, i64 14, i64 16, i64 13, i64 13, i64 9, i64 8, i64 9, i64 9, i64 10, i64 10, i64 12, i64 11, i64 13, i64 13, i64 14, i64 14, i64 14, i64 14, i64 15, i64 14, i64 16, i64 16, i64 16, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 12, i64 12, i64 12, i64 13, i64 13, i64 13, i64 15, i64 13, i64 15, i64 15, i64 16, i64 16, i64 16, i64 9, i64 7, i64 9, i64 8, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 16, i64 15, i64 14, i64 14, i64 14, i64 16, i64 16, i64 16, i64 13, i64 13, i64 10, i64 10, i64 11, i64 11, i64 13, i64 15, i64 13, i64 14, i64 13, i64 14, i64 14, i64 13, i64 14, i64 14, i64 16, i64 16, i64 16, i64 13, i64 12, i64 10, i64 9, i64 11, i64 11, i64 12, i64 12, i64 14, i64 14, i64 13, i64 14, i64 14, i64 14, i64 14, i64 14, i64 16, i64 16, i64 16, i64 16, i64 16, i64 12, i64 13, i64 11, i64 11, i64 12, i64 13, i64 13, i64 13, i64 14, i64 15, i64 14, i64 14, i64 16, i64 15, i64 16, i64 16, i64 16, i64 16, i64 16, i64 12, i64 11, i64 12, i64 12, i64 15, i64 13, i64 13, i64 13, i64 14, i64 13, i64 15, i64 14, i64 15, i64 14, i64 16, i64 16, i64 16, i64 16, i64 16, i64 14, i64 15, i64 12, i64 13, i64 13, i64 12, i64 14, i64 15, i64 15, i64 14, i64 15, i64 14, i64 15, i64 13, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 13, i64 13, i64 14, i64 12, i64 16, i64 12, i64 16, i64 15, i64 14, i64 15, i64 14, i64 14, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 15, i64 14, i64 14, i64 14, i64 15, i64 16, i64 16, i64 16, i64 16, i64 14, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 14, i64 14, i64 14, i64 12, i64 15, i64 11, i64 15, i64 13, i64 16, i64 15, i64 16, i64 15, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 15, i64 16, i64 14, i64 14, i64 15, i64 13, i64 15, i64 16, i64 16, i64 16, i64 16, i64 15, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 15, i64 15, i64 14, i64 13, i64 14, i64 16, i64 16, i64 14, i64 15, i64 16], align 16
@_vq_quantlist__44c9_s_p9_1 = internal global [19 x i64] [i64 9, i64 8, i64 10, i64 7, i64 11, i64 6, i64 12, i64 5, i64 13, i64 4, i64 14, i64 3, i64 15, i64 2, i64 16, i64 1, i64 17, i64 0, i64 18], align 16
@_vq_auxt__44c9_s_p9_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c9_s_p9_1, ptr @_vq_quantmap__44c9_s_p9_1, i32 19, i32 19 }, align 8
@_vq_quantthresh__44c9_s_p9_1 = internal global [18 x float] [float -4.165000e+02, float -3.675000e+02, float -3.185000e+02, float -2.695000e+02, float -2.205000e+02, float -1.715000e+02, float -1.225000e+02, float -7.350000e+01, float -2.450000e+01, float 2.450000e+01, float 7.350000e+01, float 1.225000e+02, float 1.715000e+02, float 2.205000e+02, float 2.695000e+02, float 3.185000e+02, float 3.675000e+02, float 4.165000e+02], align 16
@_vq_quantmap__44c9_s_p9_1 = internal global [19 x i64] [i64 17, i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16, i64 18], align 16
@_vq_lengthlist__44c9_s_p9_2 = internal global [49 x i64] [i64 3, i64 4, i64 4, i64 4, i64 5, i64 5, i64 5, i64 5, i64 5, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 7, i64 6, i64 6, i64 7, i64 7, i64 6, i64 7, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7], align 16
@_vq_quantlist__44c9_s_p9_2 = internal global [49 x i64] [i64 24, i64 23, i64 25, i64 22, i64 26, i64 21, i64 27, i64 20, i64 28, i64 19, i64 29, i64 18, i64 30, i64 17, i64 31, i64 16, i64 32, i64 15, i64 33, i64 14, i64 34, i64 13, i64 35, i64 12, i64 36, i64 11, i64 37, i64 10, i64 38, i64 9, i64 39, i64 8, i64 40, i64 7, i64 41, i64 6, i64 42, i64 5, i64 43, i64 4, i64 44, i64 3, i64 45, i64 2, i64 46, i64 1, i64 47, i64 0, i64 48], align 16
@_vq_auxt__44c9_s_p9_2 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44c9_s_p9_2, ptr @_vq_quantmap__44c9_s_p9_2, i32 49, i32 49 }, align 8
@_vq_quantthresh__44c9_s_p9_2 = internal global [48 x float] [float -2.350000e+01, float -2.250000e+01, float -2.150000e+01, float -2.050000e+01, float -1.950000e+01, float -1.850000e+01, float -1.750000e+01, float -1.650000e+01, float -1.550000e+01, float -1.450000e+01, float -1.350000e+01, float -1.250000e+01, float -1.150000e+01, float -1.050000e+01, float -9.500000e+00, float -8.500000e+00, float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00, float 8.500000e+00, float 9.500000e+00, float 1.050000e+01, float 1.150000e+01, float 1.250000e+01, float 1.350000e+01, float 1.450000e+01, float 1.550000e+01, float 1.650000e+01, float 1.750000e+01, float 1.850000e+01, float 1.950000e+01, float 2.050000e+01, float 2.150000e+01, float 2.250000e+01, float 2.350000e+01], align 16
@_vq_quantmap__44c9_s_p9_2 = internal global [49 x i64] [i64 47, i64 45, i64 43, i64 41, i64 39, i64 37, i64 35, i64 33, i64 31, i64 29, i64 27, i64 25, i64 23, i64 21, i64 19, i64 17, i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16, i64 18, i64 20, i64 22, i64 24, i64 26, i64 28, i64 30, i64 32, i64 34, i64 36, i64 38, i64 40, i64 42, i64 44, i64 46, i64 48], align 16
@_huff_lengthlist__44c9_s_long = internal global [100 x i64] [i64 3, i64 8, i64 13, i64 14, i64 15, i64 15, i64 13, i64 13, i64 14, i64 14, i64 6, i64 5, i64 8, i64 10, i64 12, i64 12, i64 13, i64 12, i64 13, i64 14, i64 10, i64 6, i64 5, i64 6, i64 8, i64 9, i64 11, i64 11, i64 13, i64 14, i64 13, i64 8, i64 5, i64 4, i64 5, i64 6, i64 9, i64 10, i64 13, i64 14, i64 14, i64 11, i64 7, i64 5, i64 4, i64 5, i64 8, i64 9, i64 12, i64 14, i64 12, i64 11, i64 8, i64 6, i64 5, i64 3, i64 5, i64 7, i64 10, i64 13, i64 12, i64 10, i64 10, i64 8, i64 7, i64 5, i64 4, i64 6, i64 9, i64 12, i64 13, i64 12, i64 11, i64 10, i64 9, i64 6, i64 5, i64 5, i64 7, i64 10, i64 13, i64 12, i64 12, i64 11, i64 11, i64 9, i64 8, i64 7, i64 8, i64 10, i64 12, i64 12, i64 13, i64 13, i64 14, i64 12, i64 10, i64 9, i64 9, i64 10], align 16
@_res_44u_0 = internal global [2 x %struct.vorbis_residue_template] [%struct.vorbis_residue_template { i32 1, i32 0, ptr @_residue_44_low_un, ptr @_huff_book__44u0__short, ptr @_huff_book__44u0__short, ptr @_resbook_44u_0, ptr @_resbook_44u_0 }, %struct.vorbis_residue_template { i32 1, i32 0, ptr @_residue_44_low_un, ptr @_huff_book__44u0__long, ptr @_huff_book__44u0__long, ptr @_resbook_44u_0, ptr @_resbook_44u_0 }], align 16
@_res_44u_1 = internal global [2 x %struct.vorbis_residue_template] [%struct.vorbis_residue_template { i32 1, i32 0, ptr @_residue_44_low_un, ptr @_huff_book__44u1__short, ptr @_huff_book__44u1__short, ptr @_resbook_44u_1, ptr @_resbook_44u_1 }, %struct.vorbis_residue_template { i32 1, i32 0, ptr @_residue_44_low_un, ptr @_huff_book__44u1__long, ptr @_huff_book__44u1__long, ptr @_resbook_44u_1, ptr @_resbook_44u_1 }], align 16
@_res_44u_2 = internal global [2 x %struct.vorbis_residue_template] [%struct.vorbis_residue_template { i32 1, i32 0, ptr @_residue_44_low_un, ptr @_huff_book__44u2__short, ptr @_huff_book__44u2__short, ptr @_resbook_44u_2, ptr @_resbook_44u_2 }, %struct.vorbis_residue_template { i32 1, i32 0, ptr @_residue_44_low_un, ptr @_huff_book__44u2__long, ptr @_huff_book__44u2__long, ptr @_resbook_44u_2, ptr @_resbook_44u_2 }], align 16
@_res_44u_3 = internal global [2 x %struct.vorbis_residue_template] [%struct.vorbis_residue_template { i32 1, i32 0, ptr @_residue_44_low_un, ptr @_huff_book__44u3__short, ptr @_huff_book__44u3__short, ptr @_resbook_44u_3, ptr @_resbook_44u_3 }, %struct.vorbis_residue_template { i32 1, i32 0, ptr @_residue_44_low_un, ptr @_huff_book__44u3__long, ptr @_huff_book__44u3__long, ptr @_resbook_44u_3, ptr @_resbook_44u_3 }], align 16
@_res_44u_4 = internal global [2 x %struct.vorbis_residue_template] [%struct.vorbis_residue_template { i32 1, i32 0, ptr @_residue_44_low_un, ptr @_huff_book__44u4__short, ptr @_huff_book__44u4__short, ptr @_resbook_44u_4, ptr @_resbook_44u_4 }, %struct.vorbis_residue_template { i32 1, i32 0, ptr @_residue_44_low_un, ptr @_huff_book__44u4__long, ptr @_huff_book__44u4__long, ptr @_resbook_44u_4, ptr @_resbook_44u_4 }], align 16
@_res_44u_5 = internal global [2 x %struct.vorbis_residue_template] [%struct.vorbis_residue_template { i32 1, i32 0, ptr @_residue_44_mid_un, ptr @_huff_book__44u5__short, ptr @_huff_book__44u5__short, ptr @_resbook_44u_5, ptr @_resbook_44u_5 }, %struct.vorbis_residue_template { i32 1, i32 0, ptr @_residue_44_mid_un, ptr @_huff_book__44u5__long, ptr @_huff_book__44u5__long, ptr @_resbook_44u_5, ptr @_resbook_44u_5 }], align 16
@_res_44u_6 = internal global [2 x %struct.vorbis_residue_template] [%struct.vorbis_residue_template { i32 1, i32 0, ptr @_residue_44_mid_un, ptr @_huff_book__44u6__short, ptr @_huff_book__44u6__short, ptr @_resbook_44u_6, ptr @_resbook_44u_6 }, %struct.vorbis_residue_template { i32 1, i32 0, ptr @_residue_44_mid_un, ptr @_huff_book__44u6__long, ptr @_huff_book__44u6__long, ptr @_resbook_44u_6, ptr @_resbook_44u_6 }], align 16
@_res_44u_7 = internal global [2 x %struct.vorbis_residue_template] [%struct.vorbis_residue_template { i32 1, i32 0, ptr @_residue_44_mid_un, ptr @_huff_book__44u7__short, ptr @_huff_book__44u7__short, ptr @_resbook_44u_7, ptr @_resbook_44u_7 }, %struct.vorbis_residue_template { i32 1, i32 0, ptr @_residue_44_mid_un, ptr @_huff_book__44u7__long, ptr @_huff_book__44u7__long, ptr @_resbook_44u_7, ptr @_resbook_44u_7 }], align 16
@_res_44u_8 = internal global [2 x %struct.vorbis_residue_template] [%struct.vorbis_residue_template { i32 1, i32 0, ptr @_residue_44_hi_un, ptr @_huff_book__44u8__short, ptr @_huff_book__44u8__short, ptr @_resbook_44u_8, ptr @_resbook_44u_8 }, %struct.vorbis_residue_template { i32 1, i32 0, ptr @_residue_44_hi_un, ptr @_huff_book__44u8__long, ptr @_huff_book__44u8__long, ptr @_resbook_44u_8, ptr @_resbook_44u_8 }], align 16
@_res_44u_9 = internal global [2 x %struct.vorbis_residue_template] [%struct.vorbis_residue_template { i32 1, i32 0, ptr @_residue_44_hi_un, ptr @_huff_book__44u9__short, ptr @_huff_book__44u9__short, ptr @_resbook_44u_9, ptr @_resbook_44u_9 }, %struct.vorbis_residue_template { i32 1, i32 0, ptr @_residue_44_hi_un, ptr @_huff_book__44u9__long, ptr @_huff_book__44u9__long, ptr @_resbook_44u_9, ptr @_resbook_44u_9 }], align 16
@_map_nominal_u = internal global <{ %struct.vorbis_info_mapping0, { i32, [256 x i32], <{ i32, [15 x i32] }>, <{ i32, [15 x i32] }>, i32, [256 x i32], [256 x i32] } }> <{ %struct.vorbis_info_mapping0 { i32 1, [256 x i32] zeroinitializer, [16 x i32] zeroinitializer, [16 x i32] zeroinitializer, i32 0, [256 x i32] zeroinitializer, [256 x i32] zeroinitializer }, { i32, [256 x i32], <{ i32, [15 x i32] }>, <{ i32, [15 x i32] }>, i32, [256 x i32], [256 x i32] } { i32 1, [256 x i32] zeroinitializer, <{ i32, [15 x i32] }> <{ i32 1, [15 x i32] zeroinitializer }>, <{ i32, [15 x i32] }> <{ i32 1, [15 x i32] zeroinitializer }>, i32 0, [256 x i32] zeroinitializer, [256 x i32] zeroinitializer } }>, align 16
@_huff_book__44u0__short = internal global %struct.static_codebook { i64 2, i64 64, ptr @_huff_lengthlist__44u0__short, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_resbook_44u_0 = internal global %struct.static_bookblock { [12 x [3 x ptr]] [[3 x ptr] zeroinitializer, [3 x ptr] [ptr null, ptr null, ptr @_44u0__p1_0], [3 x ptr] [ptr null, ptr null, ptr @_44u0__p2_0], [3 x ptr] [ptr null, ptr null, ptr @_44u0__p3_0], [3 x ptr] [ptr null, ptr null, ptr @_44u0__p4_0], [3 x ptr] [ptr null, ptr null, ptr @_44u0__p5_0], [3 x ptr] [ptr @_44u0__p6_0, ptr @_44u0__p6_1, ptr null], [3 x ptr] [ptr @_44u0__p7_0, ptr @_44u0__p7_1, ptr @_44u0__p7_2], [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer] }, align 8
@_huff_book__44u0__long = internal global %struct.static_codebook { i64 2, i64 64, ptr @_huff_lengthlist__44u0__long, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_residue_44_low_un = internal global { i64, i64, i32, i32, i32, [64 x i32], <{ i32, [255 x i32] }>, <{ float, float, float, float, float, float, float, [57 x float] }>, <{ float, float, float, float, float, float, float, [57 x float] }> } { i64 0, i64 -1, i32 -1, i32 8, i32 -1, [64 x i32] zeroinitializer, <{ i32, [255 x i32] }> <{ i32 -1, [255 x i32] zeroinitializer }>, <{ float, float, float, float, float, float, float, [57 x float] }> <{ float 5.000000e-01, float 1.500000e+00, float 1.500000e+00, float 2.500000e+00, float 2.500000e+00, float 4.500000e+00, float 2.850000e+01, [57 x float] zeroinitializer }>, <{ float, float, float, float, float, float, float, [57 x float] }> <{ float -1.000000e+00, float 2.500000e+01, float -1.000000e+00, float 4.500000e+01, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, [57 x float] zeroinitializer }> }, align 8
@_huff_lengthlist__44u0__short = internal global [64 x i64] [i64 6, i64 10, i64 11, i64 12, i64 13, i64 12, i64 12, i64 12, i64 4, i64 6, i64 6, i64 9, i64 9, i64 10, i64 11, i64 13, i64 3, i64 4, i64 3, i64 7, i64 6, i64 8, i64 10, i64 15, i64 5, i64 7, i64 7, i64 9, i64 8, i64 9, i64 11, i64 16, i64 6, i64 7, i64 5, i64 8, i64 5, i64 7, i64 10, i64 16, i64 7, i64 8, i64 7, i64 9, i64 6, i64 7, i64 10, i64 16, i64 10, i64 6, i64 3, i64 5, i64 4, i64 5, i64 7, i64 16, i64 13, i64 8, i64 5, i64 7, i64 6, i64 7, i64 10, i64 15], align 16
@_44u0__p1_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__44u0__p1_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__44u0__p1_0, ptr null, ptr @_vq_auxt__44u0__p1_0, ptr null, i32 0 }, align 8
@_44u0__p2_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__44u0__p2_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__44u0__p2_0, ptr null, ptr @_vq_auxt__44u0__p2_0, ptr null, i32 0 }, align 8
@_44u0__p3_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__44u0__p3_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44u0__p3_0, ptr null, ptr @_vq_auxt__44u0__p3_0, ptr null, i32 0 }, align 8
@_44u0__p4_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__44u0__p4_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44u0__p4_0, ptr null, ptr @_vq_auxt__44u0__p4_0, ptr null, i32 0 }, align 8
@_44u0__p5_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__44u0__p5_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44u0__p5_0, ptr null, ptr @_vq_auxt__44u0__p5_0, ptr null, i32 0 }, align 8
@_44u0__p6_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44u0__p6_0, i32 1, i64 -526516224, i64 1616117760, i32 4, i32 0, ptr @_vq_quantlist__44u0__p6_0, ptr null, ptr @_vq_auxt__44u0__p6_0, ptr null, i32 0 }, align 8
@_44u0__p6_1 = internal global %struct.static_codebook { i64 2, i64 25, ptr @_vq_lengthlist__44u0__p6_1, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44u0__p6_1, ptr null, ptr @_vq_auxt__44u0__p6_1, ptr null, i32 0 }, align 8
@_44u0__p7_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__44u0__p7_0, i32 1, i64 -518709248, i64 1626677248, i32 3, i32 0, ptr @_vq_quantlist__44u0__p7_0, ptr null, ptr @_vq_auxt__44u0__p7_0, ptr null, i32 0 }, align 8
@_44u0__p7_1 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44u0__p7_1, i32 1, i64 -523010048, i64 1618608128, i32 4, i32 0, ptr @_vq_quantlist__44u0__p7_1, ptr null, ptr @_vq_auxt__44u0__p7_1, ptr null, i32 0 }, align 8
@_44u0__p7_2 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44u0__p7_2, i32 1, i64 -531103744, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44u0__p7_2, ptr null, ptr @_vq_auxt__44u0__p7_2, ptr null, i32 0 }, align 8
@_vq_lengthlist__44u0__p1_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 5, i64 8, i64 7, i64 5, i64 7, i64 8, i64 5, i64 8, i64 8, i64 8, i64 11, i64 11, i64 8, i64 10, i64 11, i64 5, i64 8, i64 8, i64 8, i64 10, i64 10, i64 8, i64 11, i64 11, i64 4, i64 8, i64 8, i64 8, i64 11, i64 11, i64 8, i64 11, i64 11, i64 8, i64 11, i64 11, i64 11, i64 13, i64 14, i64 11, i64 13, i64 14, i64 7, i64 11, i64 11, i64 10, i64 14, i64 12, i64 11, i64 13, i64 14, i64 4, i64 8, i64 8, i64 8, i64 11, i64 11, i64 8, i64 11, i64 11, i64 8, i64 11, i64 11, i64 11, i64 14, i64 13, i64 10, i64 12, i64 13, i64 8, i64 11, i64 12, i64 11, i64 14, i64 14, i64 11, i64 14, i64 13], align 16
@_vq_quantlist__44u0__p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44u0__p1_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u0__p1_0, ptr @_vq_quantmap__44u0__p1_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__44u0__p1_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__44u0__p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44u0__p2_0 = internal global [81 x i64] [i64 2, i64 4, i64 4, i64 5, i64 6, i64 6, i64 5, i64 6, i64 6, i64 5, i64 7, i64 6, i64 7, i64 8, i64 8, i64 6, i64 7, i64 8, i64 5, i64 6, i64 7, i64 6, i64 8, i64 7, i64 7, i64 8, i64 8, i64 5, i64 7, i64 7, i64 7, i64 8, i64 8, i64 7, i64 8, i64 8, i64 7, i64 8, i64 8, i64 8, i64 9, i64 10, i64 8, i64 10, i64 10, i64 6, i64 8, i64 8, i64 7, i64 10, i64 8, i64 8, i64 10, i64 10, i64 5, i64 7, i64 7, i64 7, i64 8, i64 8, i64 7, i64 8, i64 8, i64 6, i64 8, i64 8, i64 8, i64 10, i64 10, i64 7, i64 8, i64 10, i64 6, i64 8, i64 8, i64 8, i64 10, i64 10, i64 8, i64 10, i64 9], align 16
@_vq_quantlist__44u0__p2_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44u0__p2_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u0__p2_0, ptr @_vq_quantmap__44u0__p2_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__44u0__p2_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__44u0__p2_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44u0__p3_0 = internal global [625 x i64] [i64 1, i64 5, i64 5, i64 8, i64 8, i64 5, i64 7, i64 7, i64 9, i64 9, i64 5, i64 7, i64 8, i64 9, i64 9, i64 8, i64 10, i64 9, i64 12, i64 11, i64 8, i64 9, i64 10, i64 11, i64 12, i64 6, i64 8, i64 8, i64 10, i64 10, i64 8, i64 10, i64 10, i64 11, i64 11, i64 8, i64 9, i64 10, i64 11, i64 11, i64 10, i64 12, i64 11, i64 13, i64 13, i64 10, i64 11, i64 11, i64 13, i64 13, i64 6, i64 8, i64 8, i64 10, i64 10, i64 8, i64 10, i64 9, i64 11, i64 11, i64 8, i64 10, i64 10, i64 11, i64 11, i64 10, i64 11, i64 11, i64 13, i64 13, i64 10, i64 11, i64 11, i64 13, i64 13, i64 9, i64 11, i64 11, i64 15, i64 14, i64 10, i64 12, i64 11, i64 15, i64 14, i64 10, i64 12, i64 11, i64 15, i64 14, i64 12, i64 14, i64 13, i64 16, i64 15, i64 12, i64 13, i64 13, i64 17, i64 15, i64 9, i64 11, i64 11, i64 14, i64 14, i64 10, i64 11, i64 12, i64 14, i64 15, i64 10, i64 11, i64 12, i64 14, i64 17, i64 12, i64 13, i64 14, i64 15, i64 16, i64 13, i64 13, i64 14, i64 15, i64 17, i64 5, i64 8, i64 8, i64 11, i64 11, i64 8, i64 10, i64 10, i64 12, i64 12, i64 8, i64 10, i64 10, i64 12, i64 12, i64 11, i64 12, i64 12, i64 15, i64 14, i64 11, i64 12, i64 12, i64 14, i64 15, i64 8, i64 10, i64 10, i64 13, i64 12, i64 10, i64 12, i64 12, i64 13, i64 13, i64 10, i64 12, i64 12, i64 14, i64 14, i64 12, i64 13, i64 13, i64 15, i64 15, i64 11, i64 13, i64 13, i64 15, i64 16, i64 7, i64 10, i64 10, i64 12, i64 12, i64 9, i64 12, i64 11, i64 14, i64 13, i64 10, i64 12, i64 12, i64 13, i64 14, i64 12, i64 13, i64 12, i64 15, i64 15, i64 12, i64 13, i64 13, i64 16, i64 17, i64 10, i64 12, i64 12, i64 15, i64 16, i64 12, i64 13, i64 13, i64 17, i64 15, i64 11, i64 13, i64 13, i64 17, i64 16, i64 15, i64 15, i64 15, i64 17, i64 17, i64 13, i64 15, i64 16, i64 18, i64 18, i64 9, i64 12, i64 12, i64 15, i64 17, i64 11, i64 13, i64 12, i64 16, i64 16, i64 11, i64 13, i64 13, i64 16, i64 18, i64 14, i64 15, i64 14, i64 16, i64 16, i64 13, i64 15, i64 15, i64 17, i64 18, i64 5, i64 8, i64 8, i64 11, i64 11, i64 8, i64 10, i64 10, i64 12, i64 12, i64 8, i64 10, i64 10, i64 12, i64 12, i64 10, i64 12, i64 12, i64 15, i64 15, i64 11, i64 12, i64 12, i64 14, i64 15, i64 7, i64 10, i64 10, i64 12, i64 12, i64 10, i64 12, i64 12, i64 14, i64 14, i64 9, i64 11, i64 12, i64 13, i64 13, i64 12, i64 13, i64 13, i64 16, i64 16, i64 12, i64 12, i64 13, i64 15, i64 15, i64 8, i64 10, i64 10, i64 12, i64 13, i64 10, i64 12, i64 12, i64 13, i64 14, i64 10, i64 12, i64 12, i64 13, i64 13, i64 12, i64 13, i64 13, i64 16, i64 16, i64 12, i64 13, i64 13, i64 15, i64 15, i64 10, i64 12, i64 12, i64 15, i64 16, i64 11, i64 13, i64 13, i64 17, i64 16, i64 11, i64 12, i64 13, i64 17, i64 16, i64 13, i64 15, i64 15, i64 18, i64 19, i64 14, i64 14, i64 14, i64 17, i64 16, i64 10, i64 12, i64 12, i64 15, i64 15, i64 11, i64 13, i64 13, i64 15, i64 16, i64 11, i64 13, i64 13, i64 15, i64 17, i64 13, i64 15, i64 15, i64 18, i64 20, i64 14, i64 15, i64 15, i64 17, i64 17, i64 8, i64 11, i64 11, i64 15, i64 16, i64 10, i64 13, i64 12, i64 17, i64 16, i64 10, i64 12, i64 13, i64 16, i64 17, i64 15, i64 16, i64 15, i64 20, i64 19, i64 14, i64 15, i64 16, i64 18, i64 19, i64 9, i64 12, i64 12, i64 15, i64 17, i64 11, i64 13, i64 14, i64 18, i64 18, i64 11, i64 13, i64 14, i64 17, i64 17, i64 16, i64 17, i64 18, i64 19, i64 19, i64 15, i64 16, i64 18, i64 19, i64 20, i64 9, i64 12, i64 12, i64 16, i64 16, i64 11, i64 14, i64 12, i64 17, i64 17, i64 11, i64 13, i64 13, i64 16, i64 19, i64 15, i64 16, i64 15, i64 20, i64 19, i64 15, i64 15, i64 15, i64 19, i64 17, i64 12, i64 14, i64 14, i64 18, i64 19, i64 14, i64 15, i64 15, i64 19, i64 18, i64 13, i64 15, i64 15, i64 18, i64 17, i64 17, i64 18, i64 19, i64 20, i64 0, i64 15, i64 16, i64 17, i64 20, i64 0, i64 12, i64 15, i64 14, i64 17, i64 18, i64 13, i64 16, i64 14, i64 20, i64 20, i64 13, i64 16, i64 15, i64 19, i64 18, i64 16, i64 20, i64 17, i64 20, i64 19, i64 16, i64 17, i64 16, i64 0, i64 19, i64 8, i64 11, i64 11, i64 15, i64 15, i64 10, i64 12, i64 12, i64 17, i64 17, i64 10, i64 12, i64 13, i64 16, i64 16, i64 13, i64 14, i64 15, i64 17, i64 17, i64 15, i64 16, i64 17, i64 19, i64 19, i64 9, i64 12, i64 12, i64 16, i64 17, i64 11, i64 13, i64 13, i64 18, i64 16, i64 11, i64 13, i64 13, i64 16, i64 17, i64 14, i64 15, i64 16, i64 19, i64 18, i64 15, i64 16, i64 17, i64 17, i64 18, i64 9, i64 12, i64 12, i64 17, i64 16, i64 11, i64 14, i64 13, i64 16, i64 16, i64 12, i64 14, i64 13, i64 17, i64 18, i64 14, i64 16, i64 15, i64 18, i64 19, i64 17, i64 17, i64 17, i64 19, i64 18, i64 12, i64 14, i64 14, i64 19, i64 17, i64 13, i64 15, i64 15, i64 17, i64 0, i64 13, i64 14, i64 16, i64 0, i64 0, i64 15, i64 16, i64 16, i64 19, i64 0, i64 16, i64 16, i64 19, i64 19, i64 0, i64 12, i64 15, i64 14, i64 19, i64 18, i64 13, i64 15, i64 15, i64 19, i64 0, i64 14, i64 16, i64 15, i64 0, i64 19, i64 15, i64 17, i64 17, i64 0, i64 19, i64 17, i64 18, i64 17, i64 0, i64 19], align 16
@_vq_quantlist__44u0__p3_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44u0__p3_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u0__p3_0, ptr @_vq_quantmap__44u0__p3_0, i32 5, i32 5 }, align 8
@_vq_quantthresh__44u0__p3_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44u0__p3_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__44u0__p4_0 = internal global [625 x i64] [i64 4, i64 5, i64 5, i64 8, i64 8, i64 5, i64 7, i64 6, i64 9, i64 9, i64 5, i64 6, i64 7, i64 9, i64 9, i64 9, i64 9, i64 9, i64 11, i64 11, i64 9, i64 9, i64 9, i64 11, i64 11, i64 5, i64 7, i64 7, i64 9, i64 9, i64 7, i64 8, i64 8, i64 10, i64 10, i64 6, i64 7, i64 8, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 12, i64 9, i64 10, i64 10, i64 11, i64 12, i64 5, i64 7, i64 7, i64 9, i64 9, i64 6, i64 8, i64 7, i64 10, i64 10, i64 7, i64 8, i64 8, i64 10, i64 10, i64 9, i64 10, i64 10, i64 12, i64 11, i64 10, i64 10, i64 10, i64 12, i64 11, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 11, i64 10, i64 13, i64 13, i64 9, i64 10, i64 10, i64 13, i64 13, i64 12, i64 12, i64 12, i64 14, i64 14, i64 11, i64 12, i64 12, i64 14, i64 14, i64 9, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 13, i64 13, i64 10, i64 10, i64 10, i64 12, i64 13, i64 11, i64 12, i64 12, i64 14, i64 14, i64 12, i64 13, i64 12, i64 14, i64 14, i64 5, i64 7, i64 7, i64 10, i64 10, i64 7, i64 8, i64 8, i64 10, i64 10, i64 7, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 13, i64 12, i64 10, i64 10, i64 10, i64 12, i64 12, i64 7, i64 8, i64 8, i64 11, i64 10, i64 8, i64 8, i64 9, i64 10, i64 11, i64 8, i64 9, i64 9, i64 11, i64 11, i64 10, i64 10, i64 11, i64 12, i64 13, i64 10, i64 11, i64 11, i64 13, i64 14, i64 6, i64 8, i64 8, i64 10, i64 10, i64 7, i64 9, i64 8, i64 11, i64 10, i64 8, i64 9, i64 9, i64 11, i64 11, i64 10, i64 11, i64 10, i64 13, i64 11, i64 10, i64 11, i64 11, i64 13, i64 13, i64 10, i64 11, i64 10, i64 13, i64 13, i64 10, i64 10, i64 11, i64 13, i64 14, i64 10, i64 11, i64 11, i64 14, i64 13, i64 12, i64 11, i64 13, i64 12, i64 14, i64 12, i64 13, i64 13, i64 15, i64 15, i64 9, i64 10, i64 10, i64 13, i64 13, i64 10, i64 11, i64 10, i64 13, i64 13, i64 10, i64 11, i64 11, i64 13, i64 14, i64 12, i64 13, i64 11, i64 15, i64 12, i64 12, i64 13, i64 13, i64 14, i64 15, i64 5, i64 7, i64 7, i64 10, i64 9, i64 7, i64 8, i64 8, i64 10, i64 10, i64 7, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 10, i64 12, i64 13, i64 6, i64 8, i64 8, i64 10, i64 10, i64 8, i64 9, i64 9, i64 11, i64 11, i64 7, i64 8, i64 9, i64 10, i64 11, i64 10, i64 11, i64 11, i64 13, i64 13, i64 10, i64 10, i64 11, i64 11, i64 14, i64 7, i64 8, i64 8, i64 10, i64 10, i64 8, i64 9, i64 9, i64 11, i64 11, i64 8, i64 9, i64 8, i64 11, i64 10, i64 10, i64 11, i64 11, i64 13, i64 13, i64 10, i64 11, i64 10, i64 13, i64 11, i64 9, i64 10, i64 10, i64 13, i64 13, i64 10, i64 11, i64 11, i64 14, i64 13, i64 10, i64 10, i64 11, i64 12, i64 13, i64 13, i64 13, i64 13, i64 15, i64 14, i64 12, i64 11, i64 13, i64 12, i64 15, i64 9, i64 10, i64 11, i64 13, i64 13, i64 10, i64 11, i64 11, i64 13, i64 14, i64 10, i64 11, i64 10, i64 13, i64 13, i64 12, i64 13, i64 13, i64 15, i64 15, i64 12, i64 13, i64 11, i64 15, i64 12, i64 8, i64 10, i64 10, i64 13, i64 12, i64 10, i64 11, i64 11, i64 13, i64 13, i64 9, i64 10, i64 11, i64 13, i64 13, i64 13, i64 13, i64 13, i64 15, i64 15, i64 12, i64 13, i64 13, i64 15, i64 15, i64 9, i64 10, i64 10, i64 13, i64 13, i64 10, i64 11, i64 11, i64 13, i64 14, i64 10, i64 11, i64 11, i64 14, i64 13, i64 13, i64 13, i64 14, i64 14, i64 15, i64 13, i64 13, i64 13, i64 14, i64 15, i64 9, i64 10, i64 10, i64 13, i64 13, i64 10, i64 11, i64 10, i64 14, i64 13, i64 10, i64 11, i64 11, i64 13, i64 14, i64 13, i64 14, i64 13, i64 15, i64 14, i64 12, i64 13, i64 13, i64 14, i64 15, i64 11, i64 13, i64 13, i64 15, i64 14, i64 11, i64 11, i64 13, i64 14, i64 15, i64 12, i64 14, i64 13, i64 15, i64 15, i64 13, i64 12, i64 15, i64 12, i64 16, i64 14, i64 14, i64 15, i64 17, i64 16, i64 11, i64 12, i64 12, i64 14, i64 15, i64 11, i64 13, i64 11, i64 15, i64 14, i64 12, i64 13, i64 13, i64 15, i64 15, i64 14, i64 14, i64 12, i64 17, i64 13, i64 14, i64 15, i64 15, i64 18, i64 16, i64 8, i64 10, i64 10, i64 13, i64 12, i64 9, i64 10, i64 10, i64 13, i64 13, i64 10, i64 10, i64 11, i64 13, i64 13, i64 12, i64 13, i64 13, i64 14, i64 14, i64 12, i64 13, i64 13, i64 15, i64 15, i64 9, i64 10, i64 10, i64 13, i64 13, i64 10, i64 11, i64 11, i64 14, i64 13, i64 10, i64 10, i64 11, i64 13, i64 14, i64 12, i64 13, i64 13, i64 17, i64 15, i64 12, i64 12, i64 13, i64 14, i64 16, i64 9, i64 10, i64 10, i64 13, i64 13, i64 10, i64 11, i64 11, i64 13, i64 13, i64 10, i64 11, i64 10, i64 14, i64 13, i64 13, i64 13, i64 13, i64 14, i64 15, i64 13, i64 14, i64 13, i64 15, i64 15, i64 11, i64 13, i64 12, i64 14, i64 14, i64 12, i64 13, i64 13, i64 16, i64 14, i64 11, i64 12, i64 13, i64 15, i64 15, i64 14, i64 15, i64 16, i64 17, i64 18, i64 14, i64 12, i64 15, i64 14, i64 16, i64 11, i64 12, i64 13, i64 14, i64 15, i64 12, i64 13, i64 13, i64 15, i64 16, i64 11, i64 13, i64 11, i64 15, i64 14, i64 14, i64 16, i64 14, i64 16, i64 17, i64 14, i64 15, i64 12, i64 16, i64 12], align 16
@_vq_quantlist__44u0__p4_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44u0__p4_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u0__p4_0, ptr @_vq_quantmap__44u0__p4_0, i32 5, i32 5 }, align 8
@_vq_quantthresh__44u0__p4_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44u0__p4_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__44u0__p5_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 4, i64 6, i64 5, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 4, i64 5, i64 6, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 11, i64 11, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 11, i64 11, i64 8, i64 8, i64 8, i64 10, i64 9, i64 10, i64 11, i64 12, i64 12, i64 8, i64 8, i64 8, i64 9, i64 9, i64 11, i64 11, i64 12, i64 12, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13], align 16
@_vq_quantlist__44u0__p5_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__44u0__p5_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u0__p5_0, ptr @_vq_quantmap__44u0__p5_0, i32 9, i32 9 }, align 8
@_vq_quantthresh__44u0__p5_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__44u0__p5_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__44u0__p6_0 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 8, i64 8, i64 10, i64 9, i64 10, i64 10, i64 14, i64 14, i64 4, i64 6, i64 5, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 14, i64 14, i64 4, i64 5, i64 6, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 14, i64 14, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 15, i64 15, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 14, i64 15, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 11, i64 12, i64 12, i64 15, i64 16, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 15, i64 15, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 11, i64 12, i64 12, i64 13, i64 13, i64 16, i64 16, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 16, i64 17, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 13, i64 14, i64 13, i64 14, i64 14, i64 18, i64 17, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 13, i64 14, i64 14, i64 14, i64 18, i64 18, i64 14, i64 14, i64 14, i64 15, i64 15, i64 15, i64 16, i64 16, i64 16, i64 17, i64 17, i64 0, i64 19, i64 14, i64 14, i64 14, i64 15, i64 15, i64 16, i64 17, i64 16, i64 17, i64 17, i64 17, i64 19, i64 0], align 16
@_vq_quantlist__44u0__p6_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44u0__p6_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u0__p6_0, ptr @_vq_quantmap__44u0__p6_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__44u0__p6_0 = internal global [12 x float] [float -2.750000e+01, float -2.250000e+01, float -1.750000e+01, float -1.250000e+01, float -7.500000e+00, float -2.500000e+00, float 2.500000e+00, float 7.500000e+00, float 1.250000e+01, float 1.750000e+01, float 2.250000e+01, float 2.750000e+01], align 16
@_vq_quantmap__44u0__p6_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44u0__p6_1 = internal global [25 x i64] [i64 2, i64 4, i64 4, i64 5, i64 5, i64 4, i64 5, i64 5, i64 5, i64 5, i64 4, i64 5, i64 5, i64 5, i64 5, i64 5, i64 6, i64 6, i64 6, i64 6, i64 5, i64 6, i64 6, i64 6, i64 6], align 16
@_vq_quantlist__44u0__p6_1 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44u0__p6_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u0__p6_1, ptr @_vq_quantmap__44u0__p6_1, i32 5, i32 5 }, align 8
@_vq_quantthresh__44u0__p6_1 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44u0__p6_1 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__44u0__p7_0 = internal global [625 x i64] [i64 1, i64 5, i64 5, i64 11, i64 11, i64 9, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 8, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 9, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 8, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10], align 16
@_vq_quantlist__44u0__p7_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44u0__p7_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u0__p7_0, ptr @_vq_quantmap__44u0__p7_0, i32 5, i32 5 }, align 8
@_vq_quantthresh__44u0__p7_0 = internal global [4 x float] [float -2.535000e+02, float -8.450000e+01, float 8.450000e+01, float 2.535000e+02], align 16
@_vq_quantmap__44u0__p7_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__44u0__p7_1 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 4, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 11, i64 10, i64 12, i64 11, i64 4, i64 6, i64 7, i64 8, i64 8, i64 7, i64 8, i64 9, i64 9, i64 10, i64 11, i64 12, i64 11, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 11, i64 13, i64 13, i64 7, i64 8, i64 8, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 7, i64 8, i64 8, i64 10, i64 10, i64 12, i64 12, i64 13, i64 12, i64 16, i64 13, i64 13, i64 14, i64 7, i64 8, i64 8, i64 10, i64 11, i64 12, i64 12, i64 13, i64 12, i64 13, i64 13, i64 14, i64 14, i64 8, i64 9, i64 10, i64 12, i64 12, i64 14, i64 13, i64 16, i64 15, i64 16, i64 16, i64 16, i64 15, i64 8, i64 10, i64 10, i64 12, i64 12, i64 14, i64 13, i64 14, i64 15, i64 16, i64 16, i64 15, i64 16, i64 10, i64 11, i64 12, i64 14, i64 14, i64 14, i64 14, i64 16, i64 13, i64 16, i64 15, i64 16, i64 16, i64 10, i64 11, i64 12, i64 13, i64 13, i64 15, i64 14, i64 14, i64 15, i64 16, i64 16, i64 14, i64 14, i64 13, i64 14, i64 13, i64 15, i64 16, i64 16, i64 16, i64 15, i64 15, i64 16, i64 16, i64 16, i64 16, i64 11, i64 15, i64 14, i64 16, i64 16, i64 14, i64 14, i64 16, i64 15, i64 16, i64 14, i64 16, i64 15], align 16
@_vq_quantlist__44u0__p7_1 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44u0__p7_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u0__p7_1, ptr @_vq_quantmap__44u0__p7_1, i32 13, i32 13 }, align 8
@_vq_quantthresh__44u0__p7_1 = internal global [12 x float] [float -7.150000e+01, float -5.850000e+01, float -4.550000e+01, float -3.250000e+01, float -1.950000e+01, float -6.500000e+00, float 6.500000e+00, float 1.950000e+01, float 3.250000e+01, float 4.550000e+01, float 5.850000e+01, float 7.150000e+01], align 16
@_vq_quantmap__44u0__p7_1 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44u0__p7_2 = internal global [169 x i64] [i64 2, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 5, i64 5, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 5, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 6, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 6, i64 7, i64 7, i64 8, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9], align 16
@_vq_quantlist__44u0__p7_2 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44u0__p7_2 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u0__p7_2, ptr @_vq_quantmap__44u0__p7_2, i32 13, i32 13 }, align 8
@_vq_quantthresh__44u0__p7_2 = internal global [12 x float] [float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00], align 16
@_vq_quantmap__44u0__p7_2 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_huff_lengthlist__44u0__long = internal global [64 x i64] [i64 3, i64 7, i64 12, i64 10, i64 15, i64 10, i64 9, i64 18, i64 5, i64 2, i64 5, i64 6, i64 8, i64 7, i64 9, i64 20, i64 10, i64 4, i64 4, i64 6, i64 6, i64 8, i64 11, i64 20, i64 9, i64 5, i64 6, i64 5, i64 7, i64 6, i64 9, i64 20, i64 11, i64 7, i64 5, i64 7, i64 5, i64 7, i64 10, i64 20, i64 10, i64 6, i64 7, i64 6, i64 6, i64 6, i64 8, i64 17, i64 9, i64 8, i64 10, i64 7, i64 7, i64 5, i64 5, i64 17, i64 11, i64 18, i64 19, i64 14, i64 13, i64 9, i64 8, i64 19], align 16
@_huff_book__44u1__short = internal global %struct.static_codebook { i64 2, i64 64, ptr @_huff_lengthlist__44u1__short, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_resbook_44u_1 = internal global %struct.static_bookblock { [12 x [3 x ptr]] [[3 x ptr] zeroinitializer, [3 x ptr] [ptr null, ptr null, ptr @_44u1__p1_0], [3 x ptr] [ptr null, ptr null, ptr @_44u1__p2_0], [3 x ptr] [ptr null, ptr null, ptr @_44u1__p3_0], [3 x ptr] [ptr null, ptr null, ptr @_44u1__p4_0], [3 x ptr] [ptr null, ptr null, ptr @_44u1__p5_0], [3 x ptr] [ptr @_44u1__p6_0, ptr @_44u1__p6_1, ptr null], [3 x ptr] [ptr @_44u1__p7_0, ptr @_44u1__p7_1, ptr @_44u1__p7_2], [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer] }, align 8
@_huff_book__44u1__long = internal global %struct.static_codebook { i64 2, i64 64, ptr @_huff_lengthlist__44u1__long, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_lengthlist__44u1__short = internal global [64 x i64] [i64 7, i64 12, i64 12, i64 14, i64 16, i64 13, i64 12, i64 15, i64 6, i64 9, i64 10, i64 13, i64 11, i64 11, i64 12, i64 12, i64 4, i64 5, i64 5, i64 8, i64 5, i64 7, i64 9, i64 12, i64 6, i64 7, i64 8, i64 10, i64 8, i64 9, i64 11, i64 16, i64 5, i64 5, i64 4, i64 7, i64 4, i64 5, i64 7, i64 15, i64 6, i64 5, i64 5, i64 8, i64 5, i64 5, i64 6, i64 15, i64 8, i64 7, i64 4, i64 7, i64 3, i64 4, i64 5, i64 16, i64 15, i64 11, i64 6, i64 8, i64 5, i64 6, i64 8, i64 16], align 16
@_44u1__p1_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__44u1__p1_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__44u1__p1_0, ptr null, ptr @_vq_auxt__44u1__p1_0, ptr null, i32 0 }, align 8
@_44u1__p2_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__44u1__p2_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__44u1__p2_0, ptr null, ptr @_vq_auxt__44u1__p2_0, ptr null, i32 0 }, align 8
@_44u1__p3_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__44u1__p3_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44u1__p3_0, ptr null, ptr @_vq_auxt__44u1__p3_0, ptr null, i32 0 }, align 8
@_44u1__p4_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__44u1__p4_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44u1__p4_0, ptr null, ptr @_vq_auxt__44u1__p4_0, ptr null, i32 0 }, align 8
@_44u1__p5_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__44u1__p5_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44u1__p5_0, ptr null, ptr @_vq_auxt__44u1__p5_0, ptr null, i32 0 }, align 8
@_44u1__p6_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44u1__p6_0, i32 1, i64 -526516224, i64 1616117760, i32 4, i32 0, ptr @_vq_quantlist__44u1__p6_0, ptr null, ptr @_vq_auxt__44u1__p6_0, ptr null, i32 0 }, align 8
@_44u1__p6_1 = internal global %struct.static_codebook { i64 2, i64 25, ptr @_vq_lengthlist__44u1__p6_1, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44u1__p6_1, ptr null, ptr @_vq_auxt__44u1__p6_1, ptr null, i32 0 }, align 8
@_44u1__p7_0 = internal global %struct.static_codebook { i64 2, i64 49, ptr @_vq_lengthlist__44u1__p7_0, i32 1, i64 -518017024, i64 1626677248, i32 3, i32 0, ptr @_vq_quantlist__44u1__p7_0, ptr null, ptr @_vq_auxt__44u1__p7_0, ptr null, i32 0 }, align 8
@_44u1__p7_1 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44u1__p7_1, i32 1, i64 -523010048, i64 1618608128, i32 4, i32 0, ptr @_vq_quantlist__44u1__p7_1, ptr null, ptr @_vq_auxt__44u1__p7_1, ptr null, i32 0 }, align 8
@_44u1__p7_2 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44u1__p7_2, i32 1, i64 -531103744, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44u1__p7_2, ptr null, ptr @_vq_auxt__44u1__p7_2, ptr null, i32 0 }, align 8
@_vq_lengthlist__44u1__p1_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 5, i64 8, i64 7, i64 5, i64 7, i64 8, i64 5, i64 8, i64 8, i64 8, i64 11, i64 11, i64 8, i64 10, i64 11, i64 5, i64 8, i64 8, i64 8, i64 11, i64 10, i64 8, i64 11, i64 11, i64 4, i64 8, i64 8, i64 8, i64 11, i64 11, i64 8, i64 11, i64 11, i64 8, i64 11, i64 11, i64 11, i64 13, i64 14, i64 11, i64 13, i64 14, i64 8, i64 11, i64 11, i64 10, i64 14, i64 11, i64 11, i64 13, i64 14, i64 4, i64 8, i64 8, i64 8, i64 11, i64 11, i64 8, i64 11, i64 11, i64 7, i64 11, i64 11, i64 11, i64 14, i64 13, i64 10, i64 12, i64 13, i64 8, i64 11, i64 11, i64 11, i64 14, i64 14, i64 11, i64 14, i64 13], align 16
@_vq_quantlist__44u1__p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44u1__p1_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u1__p1_0, ptr @_vq_quantmap__44u1__p1_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__44u1__p1_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__44u1__p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44u1__p2_0 = internal global [81 x i64] [i64 2, i64 5, i64 5, i64 5, i64 6, i64 6, i64 5, i64 6, i64 6, i64 5, i64 6, i64 6, i64 7, i64 8, i64 8, i64 6, i64 7, i64 8, i64 5, i64 6, i64 6, i64 6, i64 8, i64 7, i64 7, i64 8, i64 8, i64 5, i64 6, i64 6, i64 7, i64 8, i64 8, i64 6, i64 8, i64 8, i64 7, i64 8, i64 8, i64 8, i64 9, i64 10, i64 8, i64 9, i64 9, i64 6, i64 8, i64 8, i64 7, i64 9, i64 8, i64 8, i64 9, i64 10, i64 5, i64 6, i64 6, i64 6, i64 8, i64 8, i64 7, i64 8, i64 8, i64 6, i64 8, i64 8, i64 8, i64 10, i64 9, i64 7, i64 8, i64 9, i64 7, i64 8, i64 8, i64 8, i64 9, i64 9, i64 8, i64 10, i64 9], align 16
@_vq_quantlist__44u1__p2_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44u1__p2_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u1__p2_0, ptr @_vq_quantmap__44u1__p2_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__44u1__p2_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__44u1__p2_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44u1__p3_0 = internal global [625 x i64] [i64 2, i64 5, i64 4, i64 7, i64 7, i64 5, i64 7, i64 7, i64 9, i64 8, i64 5, i64 7, i64 7, i64 8, i64 9, i64 8, i64 9, i64 9, i64 11, i64 11, i64 8, i64 9, i64 9, i64 11, i64 11, i64 5, i64 7, i64 7, i64 10, i64 10, i64 7, i64 9, i64 9, i64 11, i64 10, i64 7, i64 9, i64 9, i64 10, i64 10, i64 9, i64 11, i64 10, i64 13, i64 12, i64 9, i64 10, i64 10, i64 12, i64 13, i64 5, i64 7, i64 7, i64 10, i64 9, i64 7, i64 9, i64 9, i64 11, i64 10, i64 7, i64 9, i64 9, i64 10, i64 11, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 11, i64 12, i64 13, i64 8, i64 10, i64 10, i64 14, i64 13, i64 9, i64 11, i64 11, i64 15, i64 13, i64 9, i64 11, i64 11, i64 15, i64 13, i64 12, i64 14, i64 12, i64 16, i64 14, i64 12, i64 13, i64 12, i64 15, i64 14, i64 8, i64 10, i64 10, i64 13, i64 14, i64 9, i64 11, i64 11, i64 13, i64 14, i64 10, i64 11, i64 11, i64 13, i64 15, i64 12, i64 12, i64 13, i64 14, i64 15, i64 12, i64 13, i64 14, i64 14, i64 16, i64 5, i64 7, i64 7, i64 10, i64 10, i64 7, i64 9, i64 9, i64 11, i64 11, i64 7, i64 9, i64 9, i64 11, i64 12, i64 10, i64 11, i64 11, i64 14, i64 14, i64 10, i64 11, i64 11, i64 14, i64 14, i64 7, i64 9, i64 9, i64 12, i64 12, i64 9, i64 11, i64 11, i64 13, i64 12, i64 9, i64 11, i64 11, i64 13, i64 13, i64 12, i64 12, i64 12, i64 14, i64 14, i64 11, i64 12, i64 13, i64 15, i64 15, i64 7, i64 9, i64 9, i64 12, i64 11, i64 9, i64 11, i64 10, i64 12, i64 12, i64 9, i64 11, i64 11, i64 12, i64 13, i64 11, i64 12, i64 11, i64 14, i64 14, i64 11, i64 12, i64 12, i64 15, i64 16, i64 9, i64 11, i64 11, i64 15, i64 15, i64 11, i64 12, i64 12, i64 16, i64 15, i64 10, i64 12, i64 12, i64 16, i64 15, i64 14, i64 15, i64 15, i64 17, i64 16, i64 13, i64 14, i64 14, i64 17, i64 17, i64 9, i64 11, i64 11, i64 14, i64 15, i64 10, i64 12, i64 11, i64 15, i64 15, i64 10, i64 12, i64 12, i64 15, i64 17, i64 13, i64 14, i64 13, i64 16, i64 15, i64 13, i64 14, i64 15, i64 17, i64 17, i64 5, i64 7, i64 7, i64 10, i64 10, i64 7, i64 9, i64 9, i64 12, i64 11, i64 7, i64 9, i64 9, i64 11, i64 12, i64 10, i64 11, i64 11, i64 14, i64 14, i64 10, i64 11, i64 11, i64 13, i64 14, i64 7, i64 9, i64 9, i64 11, i64 12, i64 9, i64 11, i64 11, i64 13, i64 13, i64 9, i64 10, i64 11, i64 12, i64 12, i64 11, i64 12, i64 12, i64 15, i64 15, i64 11, i64 12, i64 12, i64 13, i64 14, i64 7, i64 10, i64 9, i64 12, i64 12, i64 9, i64 11, i64 11, i64 13, i64 13, i64 9, i64 11, i64 11, i64 12, i64 12, i64 11, i64 12, i64 12, i64 16, i64 15, i64 11, i64 12, i64 12, i64 14, i64 14, i64 9, i64 11, i64 11, i64 15, i64 14, i64 10, i64 12, i64 12, i64 16, i64 15, i64 10, i64 11, i64 12, i64 15, i64 15, i64 13, i64 14, i64 14, i64 17, i64 18, i64 13, i64 13, i64 14, i64 15, i64 16, i64 9, i64 11, i64 11, i64 15, i64 16, i64 10, i64 12, i64 12, i64 15, i64 15, i64 11, i64 12, i64 12, i64 14, i64 17, i64 13, i64 14, i64 14, i64 17, i64 17, i64 14, i64 14, i64 14, i64 16, i64 18, i64 7, i64 10, i64 10, i64 14, i64 15, i64 10, i64 12, i64 12, i64 16, i64 15, i64 10, i64 11, i64 12, i64 16, i64 16, i64 14, i64 16, i64 15, i64 18, i64 17, i64 13, i64 15, i64 14, i64 17, i64 19, i64 9, i64 11, i64 12, i64 16, i64 15, i64 11, i64 13, i64 13, i64 17, i64 16, i64 10, i64 13, i64 13, i64 16, i64 16, i64 15, i64 16, i64 16, i64 17, i64 19, i64 13, i64 15, i64 15, i64 17, i64 17, i64 8, i64 11, i64 11, i64 15, i64 15, i64 10, i64 13, i64 11, i64 16, i64 16, i64 10, i64 13, i64 13, i64 16, i64 17, i64 14, i64 16, i64 15, i64 18, i64 19, i64 13, i64 15, i64 15, i64 17, i64 17, i64 12, i64 14, i64 14, i64 18, i64 18, i64 13, i64 14, i64 15, i64 18, i64 19, i64 12, i64 14, i64 15, i64 17, i64 18, i64 16, i64 18, i64 18, i64 19, i64 0, i64 14, i64 15, i64 16, i64 18, i64 18, i64 11, i64 14, i64 13, i64 17, i64 18, i64 12, i64 16, i64 14, i64 19, i64 19, i64 12, i64 15, i64 14, i64 0, i64 18, i64 15, i64 17, i64 16, i64 18, i64 17, i64 14, i64 17, i64 16, i64 18, i64 18, i64 7, i64 10, i64 10, i64 15, i64 14, i64 10, i64 12, i64 11, i64 16, i64 16, i64 10, i64 11, i64 12, i64 16, i64 16, i64 13, i64 15, i64 14, i64 19, i64 18, i64 14, i64 15, i64 16, i64 18, i64 18, i64 8, i64 11, i64 11, i64 15, i64 15, i64 10, i64 13, i64 12, i64 17, i64 16, i64 10, i64 12, i64 13, i64 16, i64 17, i64 14, i64 14, i64 15, i64 19, i64 18, i64 14, i64 15, i64 16, i64 18, i64 0, i64 9, i64 11, i64 11, i64 16, i64 15, i64 11, i64 13, i64 12, i64 15, i64 16, i64 11, i64 13, i64 13, i64 16, i64 16, i64 14, i64 15, i64 14, i64 0, i64 17, i64 15, i64 16, i64 16, i64 19, i64 18, i64 11, i64 14, i64 14, i64 18, i64 17, i64 12, i64 14, i64 15, i64 17, i64 17, i64 12, i64 13, i64 15, i64 0, i64 17, i64 14, i64 15, i64 16, i64 18, i64 17, i64 16, i64 17, i64 18, i64 17, i64 19, i64 11, i64 14, i64 13, i64 17, i64 19, i64 12, i64 15, i64 14, i64 18, i64 19, i64 13, i64 16, i64 14, i64 0, i64 19, i64 14, i64 17, i64 15, i64 0, i64 18, i64 15, i64 18, i64 16, i64 0, i64 0], align 16
@_vq_quantlist__44u1__p3_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44u1__p3_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u1__p3_0, ptr @_vq_quantmap__44u1__p3_0, i32 5, i32 5 }, align 8
@_vq_quantthresh__44u1__p3_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44u1__p3_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__44u1__p4_0 = internal global [625 x i64] [i64 4, i64 5, i64 5, i64 8, i64 8, i64 6, i64 7, i64 6, i64 9, i64 9, i64 6, i64 6, i64 7, i64 9, i64 9, i64 9, i64 9, i64 9, i64 11, i64 11, i64 9, i64 9, i64 9, i64 11, i64 11, i64 6, i64 7, i64 7, i64 9, i64 9, i64 7, i64 8, i64 8, i64 10, i64 10, i64 6, i64 7, i64 8, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 12, i64 9, i64 9, i64 10, i64 11, i64 12, i64 6, i64 7, i64 7, i64 9, i64 9, i64 6, i64 8, i64 7, i64 10, i64 9, i64 7, i64 8, i64 8, i64 10, i64 10, i64 9, i64 10, i64 9, i64 12, i64 11, i64 10, i64 10, i64 10, i64 12, i64 11, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 10, i64 13, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 12, i64 12, i64 12, i64 14, i64 14, i64 11, i64 12, i64 12, i64 13, i64 14, i64 9, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 13, i64 12, i64 10, i64 10, i64 10, i64 12, i64 13, i64 12, i64 12, i64 12, i64 14, i64 13, i64 12, i64 12, i64 12, i64 14, i64 14, i64 5, i64 7, i64 7, i64 9, i64 9, i64 7, i64 8, i64 7, i64 10, i64 10, i64 7, i64 7, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 10, i64 12, i64 12, i64 7, i64 8, i64 8, i64 10, i64 10, i64 8, i64 8, i64 9, i64 10, i64 11, i64 8, i64 8, i64 8, i64 11, i64 11, i64 10, i64 10, i64 11, i64 11, i64 13, i64 10, i64 11, i64 11, i64 12, i64 13, i64 6, i64 7, i64 7, i64 10, i64 10, i64 7, i64 8, i64 8, i64 11, i64 10, i64 8, i64 8, i64 9, i64 11, i64 11, i64 10, i64 11, i64 10, i64 13, i64 11, i64 10, i64 11, i64 11, i64 13, i64 12, i64 10, i64 11, i64 10, i64 13, i64 12, i64 10, i64 10, i64 11, i64 13, i64 13, i64 10, i64 11, i64 11, i64 13, i64 13, i64 12, i64 11, i64 13, i64 12, i64 14, i64 12, i64 13, i64 13, i64 15, i64 15, i64 9, i64 10, i64 10, i64 12, i64 13, i64 10, i64 11, i64 10, i64 13, i64 13, i64 10, i64 11, i64 11, i64 13, i64 14, i64 12, i64 13, i64 11, i64 14, i64 12, i64 12, i64 13, i64 13, i64 14, i64 15, i64 5, i64 7, i64 7, i64 9, i64 10, i64 7, i64 8, i64 7, i64 10, i64 10, i64 7, i64 7, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 10, i64 12, i64 12, i64 6, i64 7, i64 7, i64 10, i64 10, i64 8, i64 9, i64 8, i64 11, i64 11, i64 7, i64 8, i64 8, i64 10, i64 11, i64 10, i64 11, i64 11, i64 12, i64 13, i64 10, i64 10, i64 11, i64 11, i64 13, i64 7, i64 8, i64 8, i64 10, i64 10, i64 8, i64 8, i64 8, i64 11, i64 11, i64 8, i64 9, i64 8, i64 11, i64 10, i64 10, i64 11, i64 10, i64 13, i64 12, i64 10, i64 11, i64 10, i64 13, i64 12, i64 9, i64 10, i64 10, i64 13, i64 12, i64 10, i64 11, i64 11, i64 13, i64 13, i64 9, i64 10, i64 10, i64 12, i64 13, i64 13, i64 13, i64 13, i64 15, i64 14, i64 12, i64 11, i64 13, i64 12, i64 15, i64 10, i64 10, i64 11, i64 12, i64 13, i64 10, i64 11, i64 11, i64 13, i64 13, i64 10, i64 11, i64 10, i64 13, i64 13, i64 12, i64 13, i64 13, i64 15, i64 15, i64 12, i64 13, i64 11, i64 14, i64 12, i64 8, i64 10, i64 9, i64 12, i64 12, i64 9, i64 10, i64 10, i64 13, i64 13, i64 9, i64 10, i64 10, i64 13, i64 13, i64 13, i64 13, i64 13, i64 14, i64 15, i64 12, i64 12, i64 12, i64 14, i64 14, i64 9, i64 10, i64 10, i64 13, i64 12, i64 10, i64 11, i64 11, i64 13, i64 13, i64 10, i64 11, i64 11, i64 13, i64 12, i64 13, i64 13, i64 14, i64 14, i64 16, i64 12, i64 13, i64 13, i64 15, i64 14, i64 9, i64 10, i64 10, i64 13, i64 13, i64 10, i64 11, i64 10, i64 13, i64 13, i64 10, i64 11, i64 11, i64 13, i64 13, i64 13, i64 14, i64 12, i64 15, i64 14, i64 12, i64 13, i64 13, i64 14, i64 15, i64 12, i64 12, i64 12, i64 14, i64 14, i64 11, i64 12, i64 12, i64 14, i64 15, i64 12, i64 13, i64 13, i64 15, i64 14, i64 14, i64 12, i64 15, i64 12, i64 16, i64 14, i64 14, i64 15, i64 17, i64 16, i64 11, i64 12, i64 12, i64 14, i64 14, i64 11, i64 12, i64 11, i64 15, i64 14, i64 12, i64 13, i64 13, i64 15, i64 15, i64 13, i64 14, i64 12, i64 16, i64 13, i64 14, i64 14, i64 15, i64 17, i64 16, i64 8, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 13, i64 12, i64 10, i64 10, i64 10, i64 13, i64 13, i64 12, i64 13, i64 12, i64 14, i64 14, i64 12, i64 13, i64 13, i64 15, i64 14, i64 9, i64 10, i64 10, i64 13, i64 13, i64 10, i64 11, i64 11, i64 13, i64 13, i64 10, i64 10, i64 11, i64 12, i64 13, i64 13, i64 13, i64 13, i64 15, i64 15, i64 12, i64 12, i64 13, i64 14, i64 15, i64 9, i64 10, i64 10, i64 12, i64 13, i64 10, i64 11, i64 11, i64 12, i64 13, i64 10, i64 11, i64 10, i64 13, i64 13, i64 12, i64 13, i64 13, i64 14, i64 15, i64 13, i64 14, i64 13, i64 15, i64 14, i64 11, i64 12, i64 12, i64 15, i64 14, i64 12, i64 13, i64 13, i64 15, i64 14, i64 11, i64 12, i64 12, i64 14, i64 15, i64 14, i64 14, i64 14, i64 17, i64 15, i64 13, i64 12, i64 15, i64 13, i64 16, i64 12, i64 12, i64 12, i64 14, i64 15, i64 12, i64 13, i64 13, i64 14, i64 15, i64 11, i64 12, i64 12, i64 15, i64 14, i64 14, i64 15, i64 14, i64 16, i64 17, i64 13, i64 15, i64 12, i64 16, i64 12], align 16
@_vq_quantlist__44u1__p4_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44u1__p4_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u1__p4_0, ptr @_vq_quantmap__44u1__p4_0, i32 5, i32 5 }, align 8
@_vq_quantthresh__44u1__p4_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44u1__p4_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__44u1__p5_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 7, i64 7, i64 8, i64 8, i64 10, i64 10, i64 4, i64 6, i64 5, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 4, i64 5, i64 6, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 7, i64 8, i64 7, i64 9, i64 9, i64 9, i64 9, i64 11, i64 11, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 11, i64 11, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 11, i64 12, i64 12, i64 8, i64 8, i64 9, i64 9, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13], align 16
@_vq_quantlist__44u1__p5_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__44u1__p5_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u1__p5_0, ptr @_vq_quantmap__44u1__p5_0, i32 9, i32 9 }, align 8
@_vq_quantthresh__44u1__p5_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__44u1__p5_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__44u1__p6_0 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 7, i64 7, i64 9, i64 8, i64 10, i64 9, i64 11, i64 10, i64 14, i64 13, i64 4, i64 5, i64 5, i64 8, i64 8, i64 9, i64 9, i64 11, i64 11, i64 11, i64 11, i64 14, i64 14, i64 4, i64 5, i64 5, i64 8, i64 8, i64 9, i64 9, i64 10, i64 11, i64 11, i64 11, i64 14, i64 14, i64 7, i64 8, i64 8, i64 9, i64 9, i64 11, i64 10, i64 11, i64 11, i64 12, i64 12, i64 16, i64 15, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 11, i64 11, i64 11, i64 12, i64 12, i64 15, i64 15, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 16, i64 16, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 16, i64 15, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 16, i64 17, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 13, i64 14, i64 16, i64 16, i64 11, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 14, i64 15, i64 18, i64 17, i64 11, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 13, i64 14, i64 14, i64 15, i64 18, i64 18, i64 15, i64 14, i64 15, i64 15, i64 15, i64 16, i64 16, i64 17, i64 17, i64 18, i64 17, i64 20, i64 20, i64 14, i64 15, i64 15, i64 15, i64 15, i64 16, i64 17, i64 17, i64 16, i64 18, i64 0, i64 19, i64 0], align 16
@_vq_quantlist__44u1__p6_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44u1__p6_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u1__p6_0, ptr @_vq_quantmap__44u1__p6_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__44u1__p6_0 = internal global [12 x float] [float -2.750000e+01, float -2.250000e+01, float -1.750000e+01, float -1.250000e+01, float -7.500000e+00, float -2.500000e+00, float 2.500000e+00, float 7.500000e+00, float 1.250000e+01, float 1.750000e+01, float 2.250000e+01, float 2.750000e+01], align 16
@_vq_quantmap__44u1__p6_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44u1__p6_1 = internal global [25 x i64] [i64 2, i64 4, i64 4, i64 5, i64 5, i64 4, i64 5, i64 5, i64 6, i64 5, i64 4, i64 5, i64 5, i64 5, i64 6, i64 5, i64 6, i64 5, i64 6, i64 6, i64 5, i64 5, i64 6, i64 6, i64 6], align 16
@_vq_quantlist__44u1__p6_1 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44u1__p6_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u1__p6_1, ptr @_vq_quantmap__44u1__p6_1, i32 5, i32 5 }, align 8
@_vq_quantthresh__44u1__p6_1 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44u1__p6_1 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__44u1__p7_0 = internal global [49 x i64] [i64 1, i64 3, i64 3, i64 9, i64 9, i64 9, i64 9, i64 5, i64 7, i64 7, i64 9, i64 9, i64 9, i64 9, i64 5, i64 6, i64 6, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8], align 16
@_vq_quantlist__44u1__p7_0 = internal global [7 x i64] [i64 3, i64 2, i64 4, i64 1, i64 5, i64 0, i64 6], align 16
@_vq_auxt__44u1__p7_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u1__p7_0, ptr @_vq_quantmap__44u1__p7_0, i32 7, i32 7 }, align 8
@_vq_quantthresh__44u1__p7_0 = internal global [6 x float] [float -4.225000e+02, float -2.535000e+02, float -8.450000e+01, float 8.450000e+01, float 2.535000e+02, float 4.225000e+02], align 16
@_vq_quantmap__44u1__p7_0 = internal global [7 x i64] [i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6], align 16
@_vq_lengthlist__44u1__p7_1 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 6, i64 7, i64 8, i64 8, i64 9, i64 9, i64 11, i64 10, i64 4, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 11, i64 10, i64 12, i64 11, i64 4, i64 6, i64 7, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 11, i64 12, i64 11, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 7, i64 8, i64 8, i64 10, i64 10, i64 13, i64 12, i64 13, i64 13, i64 16, i64 13, i64 13, i64 14, i64 7, i64 8, i64 8, i64 10, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 14, i64 14, i64 8, i64 10, i64 10, i64 13, i64 12, i64 13, i64 13, i64 16, i64 14, i64 15, i64 15, i64 16, i64 15, i64 8, i64 10, i64 11, i64 12, i64 13, i64 13, i64 13, i64 13, i64 16, i64 15, i64 16, i64 16, i64 14, i64 10, i64 12, i64 13, i64 14, i64 15, i64 15, i64 14, i64 14, i64 14, i64 15, i64 16, i64 15, i64 16, i64 10, i64 11, i64 12, i64 13, i64 13, i64 15, i64 15, i64 16, i64 16, i64 16, i64 14, i64 16, i64 16, i64 12, i64 13, i64 13, i64 15, i64 14, i64 15, i64 14, i64 15, i64 15, i64 14, i64 15, i64 16, i64 16, i64 11, i64 14, i64 14, i64 15, i64 14, i64 16, i64 15, i64 16, i64 14, i64 15, i64 16, i64 14, i64 15], align 16
@_vq_quantlist__44u1__p7_1 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44u1__p7_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u1__p7_1, ptr @_vq_quantmap__44u1__p7_1, i32 13, i32 13 }, align 8
@_vq_quantthresh__44u1__p7_1 = internal global [12 x float] [float -7.150000e+01, float -5.850000e+01, float -4.550000e+01, float -3.250000e+01, float -1.950000e+01, float -6.500000e+00, float 6.500000e+00, float 1.950000e+01, float 3.250000e+01, float 4.550000e+01, float 5.850000e+01, float 7.150000e+01], align 16
@_vq_quantmap__44u1__p7_1 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44u1__p7_2 = internal global [169 x i64] [i64 2, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 5, i64 6, i64 6, i64 6, i64 7, i64 8, i64 7, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 9, i64 9, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9], align 16
@_vq_quantlist__44u1__p7_2 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44u1__p7_2 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u1__p7_2, ptr @_vq_quantmap__44u1__p7_2, i32 13, i32 13 }, align 8
@_vq_quantthresh__44u1__p7_2 = internal global [12 x float] [float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00], align 16
@_vq_quantmap__44u1__p7_2 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_huff_lengthlist__44u1__long = internal global [64 x i64] [i64 4, i64 8, i64 13, i64 11, i64 14, i64 11, i64 10, i64 14, i64 6, i64 3, i64 5, i64 6, i64 8, i64 7, i64 9, i64 14, i64 12, i64 4, i64 3, i64 6, i64 5, i64 7, i64 10, i64 18, i64 11, i64 6, i64 6, i64 6, i64 6, i64 6, i64 8, i64 16, i64 13, i64 7, i64 4, i64 6, i64 4, i64 6, i64 9, i64 19, i64 11, i64 6, i64 6, i64 5, i64 5, i64 5, i64 7, i64 16, i64 10, i64 8, i64 9, i64 7, i64 9, i64 6, i64 4, i64 12, i64 11, i64 16, i64 18, i64 19, i64 18, i64 10, i64 7, i64 11], align 16
@_huff_book__44u2__short = internal global %struct.static_codebook { i64 2, i64 64, ptr @_huff_lengthlist__44u2__short, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_resbook_44u_2 = internal global %struct.static_bookblock { [12 x [3 x ptr]] [[3 x ptr] zeroinitializer, [3 x ptr] [ptr null, ptr null, ptr @_44u2__p1_0], [3 x ptr] [ptr null, ptr null, ptr @_44u2__p2_0], [3 x ptr] [ptr null, ptr null, ptr @_44u2__p3_0], [3 x ptr] [ptr null, ptr null, ptr @_44u2__p4_0], [3 x ptr] [ptr null, ptr null, ptr @_44u2__p5_0], [3 x ptr] [ptr @_44u2__p6_0, ptr @_44u2__p6_1, ptr null], [3 x ptr] [ptr @_44u2__p7_0, ptr @_44u2__p7_1, ptr @_44u2__p7_2], [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer] }, align 8
@_huff_book__44u2__long = internal global %struct.static_codebook { i64 2, i64 64, ptr @_huff_lengthlist__44u2__long, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_lengthlist__44u2__short = internal global [64 x i64] [i64 16, i64 15, i64 15, i64 16, i64 14, i64 16, i64 16, i64 16, i64 16, i64 9, i64 8, i64 11, i64 10, i64 10, i64 10, i64 15, i64 16, i64 6, i64 3, i64 7, i64 5, i64 7, i64 9, i64 16, i64 16, i64 11, i64 7, i64 11, i64 9, i64 10, i64 12, i64 16, i64 16, i64 9, i64 4, i64 8, i64 3, i64 5, i64 8, i64 16, i64 16, i64 11, i64 6, i64 9, i64 4, i64 4, i64 7, i64 16, i64 16, i64 11, i64 5, i64 9, i64 3, i64 3, i64 5, i64 12, i64 16, i64 15, i64 6, i64 11, i64 5, i64 5, i64 6, i64 14], align 16
@_44u2__p1_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__44u2__p1_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__44u2__p1_0, ptr null, ptr @_vq_auxt__44u2__p1_0, ptr null, i32 0 }, align 8
@_44u2__p2_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__44u2__p2_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__44u2__p2_0, ptr null, ptr @_vq_auxt__44u2__p2_0, ptr null, i32 0 }, align 8
@_44u2__p3_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__44u2__p3_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44u2__p3_0, ptr null, ptr @_vq_auxt__44u2__p3_0, ptr null, i32 0 }, align 8
@_44u2__p4_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__44u2__p4_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44u2__p4_0, ptr null, ptr @_vq_auxt__44u2__p4_0, ptr null, i32 0 }, align 8
@_44u2__p5_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__44u2__p5_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44u2__p5_0, ptr null, ptr @_vq_auxt__44u2__p5_0, ptr null, i32 0 }, align 8
@_44u2__p6_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44u2__p6_0, i32 1, i64 -526516224, i64 1616117760, i32 4, i32 0, ptr @_vq_quantlist__44u2__p6_0, ptr null, ptr @_vq_auxt__44u2__p6_0, ptr null, i32 0 }, align 8
@_44u2__p6_1 = internal global %struct.static_codebook { i64 2, i64 25, ptr @_vq_lengthlist__44u2__p6_1, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44u2__p6_1, ptr null, ptr @_vq_auxt__44u2__p6_1, ptr null, i32 0 }, align 8
@_44u2__p7_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__44u2__p7_0, i32 1, i64 -516612096, i64 1626677248, i32 4, i32 0, ptr @_vq_quantlist__44u2__p7_0, ptr null, ptr @_vq_auxt__44u2__p7_0, ptr null, i32 0 }, align 8
@_44u2__p7_1 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44u2__p7_1, i32 1, i64 -523010048, i64 1618608128, i32 4, i32 0, ptr @_vq_quantlist__44u2__p7_1, ptr null, ptr @_vq_auxt__44u2__p7_1, ptr null, i32 0 }, align 8
@_44u2__p7_2 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44u2__p7_2, i32 1, i64 -531103744, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44u2__p7_2, ptr null, ptr @_vq_auxt__44u2__p7_2, ptr null, i32 0 }, align 8
@_vq_lengthlist__44u2__p1_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 5, i64 8, i64 7, i64 5, i64 7, i64 8, i64 5, i64 8, i64 8, i64 8, i64 11, i64 11, i64 8, i64 10, i64 11, i64 5, i64 8, i64 8, i64 8, i64 11, i64 10, i64 8, i64 11, i64 11, i64 4, i64 8, i64 8, i64 8, i64 11, i64 11, i64 8, i64 11, i64 11, i64 8, i64 11, i64 11, i64 11, i64 13, i64 14, i64 11, i64 13, i64 13, i64 8, i64 11, i64 11, i64 10, i64 13, i64 12, i64 11, i64 13, i64 14, i64 4, i64 8, i64 8, i64 8, i64 11, i64 11, i64 8, i64 11, i64 11, i64 7, i64 11, i64 11, i64 11, i64 14, i64 13, i64 10, i64 12, i64 13, i64 8, i64 11, i64 11, i64 11, i64 14, i64 13, i64 11, i64 13, i64 13], align 16
@_vq_quantlist__44u2__p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44u2__p1_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u2__p1_0, ptr @_vq_quantmap__44u2__p1_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__44u2__p1_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__44u2__p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44u2__p2_0 = internal global [81 x i64] [i64 3, i64 4, i64 4, i64 5, i64 6, i64 6, i64 5, i64 6, i64 6, i64 5, i64 6, i64 6, i64 6, i64 8, i64 8, i64 6, i64 7, i64 8, i64 5, i64 6, i64 6, i64 6, i64 8, i64 7, i64 6, i64 8, i64 8, i64 5, i64 6, i64 6, i64 6, i64 8, i64 7, i64 6, i64 7, i64 8, i64 6, i64 8, i64 8, i64 8, i64 9, i64 9, i64 8, i64 9, i64 9, i64 6, i64 8, i64 8, i64 7, i64 9, i64 8, i64 8, i64 9, i64 9, i64 5, i64 6, i64 6, i64 6, i64 8, i64 8, i64 6, i64 7, i64 8, i64 6, i64 8, i64 8, i64 8, i64 9, i64 9, i64 7, i64 8, i64 9, i64 6, i64 8, i64 8, i64 8, i64 9, i64 9, i64 8, i64 9, i64 9], align 16
@_vq_quantlist__44u2__p2_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44u2__p2_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u2__p2_0, ptr @_vq_quantmap__44u2__p2_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__44u2__p2_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__44u2__p2_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44u2__p3_0 = internal global [625 x i64] [i64 2, i64 4, i64 4, i64 8, i64 8, i64 5, i64 7, i64 7, i64 9, i64 9, i64 5, i64 7, i64 7, i64 9, i64 9, i64 8, i64 9, i64 9, i64 12, i64 12, i64 8, i64 9, i64 10, i64 11, i64 12, i64 5, i64 7, i64 7, i64 10, i64 10, i64 7, i64 9, i64 9, i64 11, i64 10, i64 7, i64 8, i64 9, i64 10, i64 11, i64 10, i64 11, i64 10, i64 14, i64 13, i64 9, i64 10, i64 10, i64 12, i64 13, i64 5, i64 7, i64 7, i64 10, i64 10, i64 7, i64 9, i64 8, i64 11, i64 10, i64 7, i64 9, i64 9, i64 11, i64 11, i64 9, i64 10, i64 10, i64 13, i64 12, i64 10, i64 10, i64 11, i64 13, i64 13, i64 8, i64 10, i64 10, i64 15, i64 13, i64 10, i64 11, i64 11, i64 15, i64 13, i64 9, i64 11, i64 11, i64 14, i64 13, i64 13, i64 14, i64 13, i64 17, i64 15, i64 12, i64 13, i64 13, i64 15, i64 15, i64 8, i64 10, i64 10, i64 13, i64 14, i64 9, i64 11, i64 11, i64 13, i64 14, i64 10, i64 11, i64 12, i64 13, i64 16, i64 12, i64 13, i64 13, i64 15, i64 15, i64 13, i64 13, i64 14, i64 15, i64 17, i64 5, i64 7, i64 7, i64 10, i64 10, i64 7, i64 9, i64 9, i64 11, i64 11, i64 7, i64 9, i64 9, i64 11, i64 12, i64 10, i64 11, i64 11, i64 14, i64 14, i64 10, i64 11, i64 12, i64 14, i64 14, i64 7, i64 9, i64 9, i64 12, i64 12, i64 9, i64 11, i64 11, i64 13, i64 12, i64 9, i64 11, i64 11, i64 13, i64 13, i64 12, i64 13, i64 12, i64 14, i64 14, i64 11, i64 12, i64 12, i64 15, i64 14, i64 7, i64 9, i64 9, i64 12, i64 11, i64 9, i64 11, i64 10, i64 13, i64 11, i64 9, i64 11, i64 11, i64 12, i64 13, i64 11, i64 12, i64 11, i64 14, i64 13, i64 11, i64 12, i64 12, i64 15, i64 15, i64 10, i64 12, i64 12, i64 16, i64 15, i64 11, i64 13, i64 13, i64 16, i64 16, i64 10, i64 12, i64 12, i64 16, i64 16, i64 14, i64 14, i64 14, i64 17, i64 16, i64 13, i64 14, i64 14, i64 17, i64 18, i64 9, i64 11, i64 11, i64 14, i64 15, i64 10, i64 12, i64 11, i64 15, i64 15, i64 10, i64 12, i64 12, i64 15, i64 17, i64 13, i64 15, i64 13, i64 17, i64 16, i64 13, i64 14, i64 15, i64 17, i64 19, i64 5, i64 7, i64 7, i64 10, i64 10, i64 7, i64 9, i64 9, i64 12, i64 11, i64 7, i64 9, i64 9, i64 11, i64 11, i64 10, i64 11, i64 11, i64 15, i64 14, i64 10, i64 11, i64 12, i64 13, i64 14, i64 7, i64 9, i64 9, i64 12, i64 12, i64 9, i64 11, i64 11, i64 13, i64 12, i64 8, i64 10, i64 11, i64 12, i64 12, i64 11, i64 12, i64 12, i64 15, i64 15, i64 11, i64 11, i64 12, i64 14, i64 14, i64 7, i64 9, i64 9, i64 12, i64 12, i64 9, i64 11, i64 11, i64 13, i64 13, i64 9, i64 11, i64 11, i64 12, i64 12, i64 11, i64 12, i64 12, i64 16, i64 15, i64 11, i64 12, i64 13, i64 14, i64 14, i64 9, i64 11, i64 11, i64 16, i64 15, i64 10, i64 12, i64 12, i64 16, i64 15, i64 10, i64 11, i64 12, i64 14, i64 14, i64 13, i64 14, i64 15, i64 18, i64 17, i64 13, i64 13, i64 14, i64 16, i64 16, i64 10, i64 12, i64 12, i64 15, i64 15, i64 10, i64 13, i64 12, i64 15, i64 17, i64 11, i64 13, i64 12, i64 15, i64 16, i64 13, i64 15, i64 14, i64 17, i64 18, i64 14, i64 15, i64 14, i64 15, i64 17, i64 8, i64 10, i64 10, i64 15, i64 15, i64 10, i64 12, i64 12, i64 17, i64 15, i64 10, i64 12, i64 12, i64 17, i64 16, i64 14, i64 16, i64 15, i64 17, i64 17, i64 13, i64 14, i64 15, i64 16, i64 16, i64 9, i64 11, i64 12, i64 16, i64 16, i64 11, i64 13, i64 13, i64 16, i64 17, i64 11, i64 13, i64 13, i64 16, i64 16, i64 15, i64 16, i64 16, i64 0, i64 0, i64 14, i64 15, i64 15, i64 19, i64 17, i64 9, i64 11, i64 11, i64 17, i64 16, i64 10, i64 13, i64 11, i64 16, i64 16, i64 11, i64 12, i64 12, i64 16, i64 17, i64 15, i64 16, i64 15, i64 19, i64 19, i64 14, i64 16, i64 15, i64 0, i64 18, i64 12, i64 14, i64 15, i64 0, i64 0, i64 14, i64 15, i64 16, i64 18, i64 18, i64 13, i64 14, i64 15, i64 17, i64 17, i64 16, i64 18, i64 18, i64 0, i64 0, i64 15, i64 16, i64 16, i64 19, i64 18, i64 11, i64 14, i64 13, i64 0, i64 18, i64 13, i64 16, i64 13, i64 17, i64 17, i64 13, i64 15, i64 14, i64 0, i64 0, i64 17, i64 17, i64 15, i64 19, i64 18, i64 14, i64 16, i64 16, i64 19, i64 0, i64 8, i64 10, i64 10, i64 15, i64 15, i64 10, i64 12, i64 11, i64 16, i64 16, i64 10, i64 11, i64 12, i64 17, i64 16, i64 14, i64 15, i64 15, i64 17, i64 18, i64 15, i64 15, i64 16, i64 0, i64 0, i64 9, i64 11, i64 11, i64 15, i64 15, i64 11, i64 13, i64 12, i64 16, i64 18, i64 10, i64 12, i64 13, i64 17, i64 17, i64 13, i64 15, i64 15, i64 17, i64 19, i64 15, i64 15, i64 16, i64 19, i64 18, i64 9, i64 12, i64 11, i64 0, i64 16, i64 11, i64 13, i64 12, i64 16, i64 16, i64 11, i64 13, i64 13, i64 16, i64 17, i64 14, i64 16, i64 15, i64 19, i64 19, i64 15, i64 15, i64 16, i64 18, i64 18, i64 12, i64 14, i64 14, i64 17, i64 18, i64 13, i64 14, i64 15, i64 18, i64 0, i64 13, i64 14, i64 15, i64 18, i64 19, i64 15, i64 17, i64 16, i64 0, i64 19, i64 16, i64 15, i64 18, i64 17, i64 19, i64 12, i64 14, i64 14, i64 19, i64 19, i64 13, i64 15, i64 15, i64 0, i64 18, i64 13, i64 17, i64 15, i64 18, i64 18, i64 15, i64 16, i64 17, i64 0, i64 19, i64 17, i64 19, i64 18, i64 18, i64 0], align 16
@_vq_quantlist__44u2__p3_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44u2__p3_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u2__p3_0, ptr @_vq_quantmap__44u2__p3_0, i32 5, i32 5 }, align 8
@_vq_quantthresh__44u2__p3_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44u2__p3_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__44u2__p4_0 = internal global [625 x i64] [i64 4, i64 5, i64 5, i64 9, i64 9, i64 6, i64 7, i64 6, i64 9, i64 9, i64 6, i64 6, i64 7, i64 9, i64 9, i64 9, i64 10, i64 9, i64 12, i64 11, i64 9, i64 9, i64 10, i64 11, i64 12, i64 6, i64 7, i64 7, i64 10, i64 10, i64 7, i64 8, i64 7, i64 10, i64 10, i64 7, i64 7, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 11, i64 12, i64 6, i64 7, i64 7, i64 10, i64 10, i64 7, i64 8, i64 7, i64 10, i64 10, i64 7, i64 7, i64 7, i64 10, i64 10, i64 9, i64 10, i64 10, i64 12, i64 11, i64 10, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 13, i64 12, i64 10, i64 10, i64 10, i64 13, i64 13, i64 10, i64 10, i64 10, i64 13, i64 12, i64 12, i64 12, i64 12, i64 14, i64 14, i64 12, i64 12, i64 12, i64 14, i64 14, i64 9, i64 10, i64 10, i64 12, i64 13, i64 9, i64 10, i64 10, i64 13, i64 13, i64 10, i64 10, i64 10, i64 13, i64 13, i64 12, i64 12, i64 12, i64 15, i64 14, i64 12, i64 13, i64 12, i64 14, i64 14, i64 5, i64 7, i64 7, i64 10, i64 10, i64 7, i64 8, i64 7, i64 10, i64 10, i64 7, i64 7, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 10, i64 12, i64 12, i64 7, i64 8, i64 8, i64 10, i64 10, i64 8, i64 8, i64 8, i64 10, i64 11, i64 8, i64 8, i64 8, i64 11, i64 10, i64 10, i64 10, i64 11, i64 11, i64 13, i64 10, i64 10, i64 11, i64 12, i64 13, i64 6, i64 7, i64 7, i64 10, i64 10, i64 7, i64 8, i64 7, i64 11, i64 10, i64 8, i64 8, i64 8, i64 10, i64 11, i64 10, i64 11, i64 10, i64 13, i64 11, i64 10, i64 10, i64 10, i64 13, i64 12, i64 10, i64 11, i64 10, i64 13, i64 13, i64 10, i64 10, i64 10, i64 12, i64 13, i64 10, i64 11, i64 11, i64 13, i64 13, i64 12, i64 11, i64 13, i64 11, i64 14, i64 12, i64 13, i64 13, i64 14, i64 14, i64 9, i64 10, i64 10, i64 12, i64 13, i64 10, i64 10, i64 10, i64 13, i64 12, i64 10, i64 10, i64 11, i64 13, i64 13, i64 12, i64 13, i64 11, i64 14, i64 12, i64 13, i64 13, i64 13, i64 15, i64 14, i64 5, i64 7, i64 7, i64 10, i64 10, i64 7, i64 7, i64 7, i64 10, i64 10, i64 7, i64 7, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 10, i64 12, i64 13, i64 6, i64 7, i64 7, i64 10, i64 10, i64 8, i64 8, i64 8, i64 11, i64 10, i64 7, i64 7, i64 8, i64 10, i64 11, i64 10, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 11, i64 11, i64 13, i64 7, i64 8, i64 8, i64 10, i64 10, i64 7, i64 8, i64 8, i64 10, i64 11, i64 8, i64 8, i64 8, i64 11, i64 10, i64 10, i64 11, i64 10, i64 13, i64 12, i64 10, i64 11, i64 10, i64 13, i64 11, i64 9, i64 10, i64 10, i64 13, i64 13, i64 10, i64 11, i64 11, i64 13, i64 13, i64 10, i64 10, i64 10, i64 12, i64 13, i64 13, i64 13, i64 13, i64 14, i64 14, i64 12, i64 11, i64 13, i64 12, i64 14, i64 10, i64 10, i64 11, i64 13, i64 13, i64 10, i64 11, i64 11, i64 13, i64 13, i64 10, i64 10, i64 10, i64 13, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 12, i64 13, i64 11, i64 15, i64 12, i64 9, i64 10, i64 10, i64 13, i64 13, i64 10, i64 10, i64 10, i64 13, i64 13, i64 10, i64 10, i64 10, i64 13, i64 13, i64 13, i64 13, i64 13, i64 15, i64 15, i64 12, i64 13, i64 13, i64 14, i64 14, i64 9, i64 10, i64 10, i64 13, i64 13, i64 10, i64 10, i64 11, i64 13, i64 13, i64 10, i64 11, i64 10, i64 13, i64 12, i64 13, i64 12, i64 13, i64 14, i64 15, i64 13, i64 13, i64 13, i64 15, i64 14, i64 9, i64 10, i64 10, i64 13, i64 13, i64 10, i64 10, i64 10, i64 13, i64 12, i64 10, i64 10, i64 11, i64 12, i64 13, i64 13, i64 13, i64 12, i64 15, i64 14, i64 13, i64 13, i64 13, i64 14, i64 14, i64 12, i64 13, i64 12, i64 15, i64 14, i64 12, i64 11, i64 12, i64 14, i64 14, i64 12, i64 13, i64 12, i64 15, i64 14, i64 14, i64 12, i64 15, i64 12, i64 16, i64 14, i64 14, i64 15, i64 16, i64 16, i64 12, i64 12, i64 12, i64 14, i64 15, i64 11, i64 12, i64 11, i64 15, i64 14, i64 12, i64 13, i64 13, i64 14, i64 15, i64 14, i64 14, i64 12, i64 16, i64 13, i64 14, i64 14, i64 15, i64 16, i64 16, i64 9, i64 10, i64 10, i64 13, i64 13, i64 10, i64 10, i64 10, i64 13, i64 13, i64 10, i64 10, i64 10, i64 13, i64 13, i64 12, i64 13, i64 12, i64 14, i64 14, i64 13, i64 13, i64 13, i64 15, i64 15, i64 9, i64 10, i64 10, i64 13, i64 13, i64 10, i64 11, i64 10, i64 13, i64 12, i64 10, i64 10, i64 10, i64 12, i64 13, i64 13, i64 13, i64 13, i64 14, i64 14, i64 12, i64 12, i64 13, i64 14, i64 15, i64 9, i64 10, i64 10, i64 13, i64 13, i64 10, i64 10, i64 11, i64 12, i64 13, i64 10, i64 11, i64 10, i64 13, i64 13, i64 13, i64 13, i64 13, i64 14, i64 15, i64 13, i64 13, i64 13, i64 15, i64 14, i64 12, i64 12, i64 12, i64 15, i64 14, i64 12, i64 13, i64 12, i64 15, i64 14, i64 11, i64 11, i64 12, i64 14, i64 15, i64 14, i64 14, i64 14, i64 17, i64 16, i64 14, i64 12, i64 14, i64 13, i64 17, i64 12, i64 12, i64 13, i64 14, i64 16, i64 13, i64 13, i64 13, i64 13, i64 15, i64 12, i64 12, i64 11, i64 14, i64 14, i64 14, i64 15, i64 14, i64 16, i64 16, i64 14, i64 14, i64 12, i64 16, i64 12], align 16
@_vq_quantlist__44u2__p4_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44u2__p4_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u2__p4_0, ptr @_vq_quantmap__44u2__p4_0, i32 5, i32 5 }, align 8
@_vq_quantthresh__44u2__p4_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44u2__p4_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__44u2__p5_0 = internal global [81 x i64] [i64 2, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 4, i64 5, i64 4, i64 7, i64 7, i64 8, i64 7, i64 9, i64 9, i64 4, i64 4, i64 4, i64 7, i64 7, i64 7, i64 8, i64 9, i64 9, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 9, i64 10, i64 10, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 8, i64 10, i64 10, i64 7, i64 8, i64 7, i64 8, i64 9, i64 9, i64 10, i64 11, i64 11, i64 7, i64 7, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12], align 16
@_vq_quantlist__44u2__p5_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__44u2__p5_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u2__p5_0, ptr @_vq_quantmap__44u2__p5_0, i32 9, i32 9 }, align 8
@_vq_quantthresh__44u2__p5_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__44u2__p5_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__44u2__p6_0 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 8, i64 8, i64 9, i64 10, i64 11, i64 11, i64 14, i64 14, i64 4, i64 6, i64 5, i64 8, i64 8, i64 9, i64 9, i64 11, i64 11, i64 11, i64 11, i64 14, i64 14, i64 4, i64 5, i64 5, i64 8, i64 8, i64 9, i64 9, i64 10, i64 11, i64 11, i64 12, i64 14, i64 14, i64 7, i64 8, i64 8, i64 9, i64 9, i64 11, i64 10, i64 11, i64 11, i64 12, i64 12, i64 15, i64 15, i64 7, i64 8, i64 8, i64 9, i64 9, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 15, i64 14, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 12, i64 16, i64 16, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 15, i64 16, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 17, i64 16, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 12, i64 13, i64 14, i64 14, i64 16, i64 16, i64 11, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 14, i64 14, i64 17, i64 17, i64 11, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 15, i64 14, i64 18, i64 17, i64 15, i64 14, i64 15, i64 15, i64 15, i64 16, i64 16, i64 17, i64 18, i64 19, i64 17, i64 19, i64 0, i64 15, i64 15, i64 15, i64 15, i64 15, i64 16, i64 17, i64 16, i64 16, i64 18, i64 17, i64 0, i64 0], align 16
@_vq_quantlist__44u2__p6_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44u2__p6_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u2__p6_0, ptr @_vq_quantmap__44u2__p6_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__44u2__p6_0 = internal global [12 x float] [float -2.750000e+01, float -2.250000e+01, float -1.750000e+01, float -1.250000e+01, float -7.500000e+00, float -2.500000e+00, float 2.500000e+00, float 7.500000e+00, float 1.250000e+01, float 1.750000e+01, float 2.250000e+01, float 2.750000e+01], align 16
@_vq_quantmap__44u2__p6_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44u2__p6_1 = internal global [25 x i64] [i64 2, i64 4, i64 4, i64 5, i64 5, i64 4, i64 5, i64 5, i64 6, i64 5, i64 4, i64 5, i64 5, i64 5, i64 5, i64 5, i64 6, i64 6, i64 6, i64 6, i64 5, i64 5, i64 6, i64 6, i64 6], align 16
@_vq_quantlist__44u2__p6_1 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44u2__p6_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u2__p6_1, ptr @_vq_quantmap__44u2__p6_1, i32 5, i32 5 }, align 8
@_vq_quantthresh__44u2__p6_1 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44u2__p6_1 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__44u2__p7_0 = internal global [81 x i64] [i64 1, i64 3, i64 3, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 4, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 4, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9], align 16
@_vq_quantlist__44u2__p7_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__44u2__p7_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u2__p7_0, ptr @_vq_quantmap__44u2__p7_0, i32 9, i32 9 }, align 8
@_vq_quantthresh__44u2__p7_0 = internal global [8 x float] [float -5.915000e+02, float -4.225000e+02, float -2.535000e+02, float -8.450000e+01, float 8.450000e+01, float 2.535000e+02, float 4.225000e+02, float 5.915000e+02], align 16
@_vq_quantmap__44u2__p7_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__44u2__p7_1 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 8, i64 7, i64 9, i64 9, i64 10, i64 10, i64 4, i64 7, i64 6, i64 8, i64 8, i64 8, i64 8, i64 10, i64 9, i64 11, i64 10, i64 12, i64 12, i64 4, i64 6, i64 7, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 7, i64 8, i64 8, i64 10, i64 9, i64 10, i64 10, i64 12, i64 11, i64 13, i64 12, i64 13, i64 13, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 13, i64 13, i64 14, i64 15, i64 7, i64 8, i64 9, i64 10, i64 10, i64 12, i64 11, i64 14, i64 13, i64 13, i64 14, i64 14, i64 15, i64 7, i64 8, i64 9, i64 10, i64 10, i64 11, i64 12, i64 13, i64 13, i64 15, i64 14, i64 14, i64 15, i64 8, i64 10, i64 10, i64 12, i64 11, i64 13, i64 13, i64 15, i64 15, i64 15, i64 17, i64 15, i64 15, i64 8, i64 10, i64 10, i64 11, i64 12, i64 14, i64 13, i64 14, i64 15, i64 17, i64 15, i64 15, i64 15, i64 10, i64 11, i64 11, i64 14, i64 13, i64 14, i64 14, i64 15, i64 15, i64 17, i64 17, i64 16, i64 17, i64 10, i64 11, i64 12, i64 13, i64 13, i64 14, i64 14, i64 14, i64 15, i64 16, i64 15, i64 15, i64 17, i64 11, i64 12, i64 13, i64 14, i64 13, i64 16, i64 16, i64 16, i64 14, i64 17, i64 16, i64 17, i64 17, i64 11, i64 12, i64 13, i64 15, i64 15, i64 15, i64 15, i64 16, i64 15, i64 15, i64 15, i64 15, i64 17], align 16
@_vq_quantlist__44u2__p7_1 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44u2__p7_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u2__p7_1, ptr @_vq_quantmap__44u2__p7_1, i32 13, i32 13 }, align 8
@_vq_quantthresh__44u2__p7_1 = internal global [12 x float] [float -7.150000e+01, float -5.850000e+01, float -4.550000e+01, float -3.250000e+01, float -1.950000e+01, float -6.500000e+00, float 6.500000e+00, float 1.950000e+01, float 3.250000e+01, float 4.550000e+01, float 5.850000e+01, float 7.150000e+01], align 16
@_vq_quantmap__44u2__p7_1 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44u2__p7_2 = internal global [169 x i64] [i64 2, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9], align 16
@_vq_quantlist__44u2__p7_2 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44u2__p7_2 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u2__p7_2, ptr @_vq_quantmap__44u2__p7_2, i32 13, i32 13 }, align 8
@_vq_quantthresh__44u2__p7_2 = internal global [12 x float] [float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00], align 16
@_vq_quantmap__44u2__p7_2 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_huff_lengthlist__44u2__long = internal global [64 x i64] [i64 8, i64 14, i64 15, i64 15, i64 17, i64 15, i64 12, i64 13, i64 13, i64 3, i64 4, i64 7, i64 8, i64 7, i64 8, i64 11, i64 20, i64 4, i64 3, i64 6, i64 5, i64 7, i64 9, i64 16, i64 15, i64 6, i64 5, i64 6, i64 6, i64 6, i64 8, i64 15, i64 20, i64 7, i64 4, i64 6, i64 4, i64 5, i64 8, i64 18, i64 16, i64 7, i64 6, i64 6, i64 5, i64 5, i64 6, i64 14, i64 11, i64 7, i64 8, i64 7, i64 7, i64 5, i64 4, i64 10, i64 10, i64 13, i64 15, i64 16, i64 19, i64 10, i64 6, i64 10], align 16
@_huff_book__44u3__short = internal global %struct.static_codebook { i64 2, i64 64, ptr @_huff_lengthlist__44u3__short, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_resbook_44u_3 = internal global %struct.static_bookblock { [12 x [3 x ptr]] [[3 x ptr] zeroinitializer, [3 x ptr] [ptr null, ptr null, ptr @_44u3__p1_0], [3 x ptr] [ptr null, ptr null, ptr @_44u3__p2_0], [3 x ptr] [ptr null, ptr null, ptr @_44u3__p3_0], [3 x ptr] [ptr null, ptr null, ptr @_44u3__p4_0], [3 x ptr] [ptr null, ptr null, ptr @_44u3__p5_0], [3 x ptr] [ptr @_44u3__p6_0, ptr @_44u3__p6_1, ptr null], [3 x ptr] [ptr @_44u3__p7_0, ptr @_44u3__p7_1, ptr @_44u3__p7_2], [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer] }, align 8
@_huff_book__44u3__long = internal global %struct.static_codebook { i64 2, i64 64, ptr @_huff_lengthlist__44u3__long, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_lengthlist__44u3__short = internal global [64 x i64] [i64 17, i64 17, i64 17, i64 17, i64 17, i64 17, i64 16, i64 16, i64 16, i64 12, i64 11, i64 13, i64 11, i64 12, i64 11, i64 15, i64 16, i64 9, i64 4, i64 8, i64 5, i64 7, i64 9, i64 15, i64 16, i64 14, i64 9, i64 12, i64 10, i64 10, i64 12, i64 16, i64 16, i64 11, i64 4, i64 9, i64 3, i64 4, i64 8, i64 16, i64 16, i64 12, i64 6, i64 10, i64 3, i64 4, i64 7, i64 16, i64 16, i64 12, i64 6, i64 11, i64 3, i64 3, i64 4, i64 12, i64 16, i64 16, i64 7, i64 13, i64 5, i64 5, i64 6, i64 13], align 16
@_44u3__p1_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__44u3__p1_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__44u3__p1_0, ptr null, ptr @_vq_auxt__44u3__p1_0, ptr null, i32 0 }, align 8
@_44u3__p2_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__44u3__p2_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__44u3__p2_0, ptr null, ptr @_vq_auxt__44u3__p2_0, ptr null, i32 0 }, align 8
@_44u3__p3_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__44u3__p3_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44u3__p3_0, ptr null, ptr @_vq_auxt__44u3__p3_0, ptr null, i32 0 }, align 8
@_44u3__p4_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__44u3__p4_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44u3__p4_0, ptr null, ptr @_vq_auxt__44u3__p4_0, ptr null, i32 0 }, align 8
@_44u3__p5_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__44u3__p5_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44u3__p5_0, ptr null, ptr @_vq_auxt__44u3__p5_0, ptr null, i32 0 }, align 8
@_44u3__p6_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44u3__p6_0, i32 1, i64 -526516224, i64 1616117760, i32 4, i32 0, ptr @_vq_quantlist__44u3__p6_0, ptr null, ptr @_vq_auxt__44u3__p6_0, ptr null, i32 0 }, align 8
@_44u3__p6_1 = internal global %struct.static_codebook { i64 2, i64 25, ptr @_vq_lengthlist__44u3__p6_1, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44u3__p6_1, ptr null, ptr @_vq_auxt__44u3__p6_1, ptr null, i32 0 }, align 8
@_44u3__p7_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__44u3__p7_0, i32 1, i64 -515907584, i64 1627381760, i32 4, i32 0, ptr @_vq_quantlist__44u3__p7_0, ptr null, ptr @_vq_auxt__44u3__p7_0, ptr null, i32 0 }, align 8
@_44u3__p7_1 = internal global %struct.static_codebook { i64 2, i64 225, ptr @_vq_lengthlist__44u3__p7_1, i32 1, i64 -522338304, i64 1620115456, i32 4, i32 0, ptr @_vq_quantlist__44u3__p7_1, ptr null, ptr @_vq_auxt__44u3__p7_1, ptr null, i32 0 }, align 8
@_44u3__p7_2 = internal global %struct.static_codebook { i64 2, i64 289, ptr @_vq_lengthlist__44u3__p7_2, i32 1, i64 -529530880, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__44u3__p7_2, ptr null, ptr @_vq_auxt__44u3__p7_2, ptr null, i32 0 }, align 8
@_vq_lengthlist__44u3__p1_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 5, i64 8, i64 7, i64 5, i64 7, i64 8, i64 5, i64 8, i64 8, i64 8, i64 11, i64 11, i64 8, i64 10, i64 11, i64 5, i64 8, i64 8, i64 8, i64 11, i64 10, i64 8, i64 11, i64 11, i64 4, i64 8, i64 8, i64 8, i64 11, i64 11, i64 8, i64 11, i64 11, i64 8, i64 11, i64 11, i64 11, i64 13, i64 14, i64 11, i64 13, i64 14, i64 7, i64 11, i64 11, i64 10, i64 13, i64 11, i64 11, i64 13, i64 14, i64 4, i64 8, i64 8, i64 8, i64 11, i64 11, i64 8, i64 11, i64 11, i64 8, i64 11, i64 11, i64 11, i64 14, i64 14, i64 10, i64 12, i64 14, i64 8, i64 11, i64 11, i64 11, i64 14, i64 13, i64 11, i64 14, i64 13], align 16
@_vq_quantlist__44u3__p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44u3__p1_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u3__p1_0, ptr @_vq_quantmap__44u3__p1_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__44u3__p1_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__44u3__p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44u3__p2_0 = internal global [81 x i64] [i64 3, i64 4, i64 4, i64 5, i64 6, i64 6, i64 5, i64 6, i64 6, i64 5, i64 6, i64 6, i64 6, i64 8, i64 8, i64 6, i64 7, i64 8, i64 5, i64 6, i64 6, i64 6, i64 8, i64 7, i64 6, i64 8, i64 8, i64 5, i64 6, i64 6, i64 6, i64 8, i64 7, i64 6, i64 8, i64 8, i64 6, i64 8, i64 8, i64 8, i64 8, i64 9, i64 8, i64 9, i64 9, i64 6, i64 8, i64 7, i64 7, i64 9, i64 8, i64 8, i64 9, i64 9, i64 5, i64 6, i64 6, i64 6, i64 8, i64 8, i64 6, i64 8, i64 8, i64 6, i64 8, i64 8, i64 8, i64 9, i64 9, i64 7, i64 8, i64 9, i64 6, i64 8, i64 8, i64 8, i64 9, i64 9, i64 8, i64 9, i64 8], align 16
@_vq_quantlist__44u3__p2_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44u3__p2_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u3__p2_0, ptr @_vq_quantmap__44u3__p2_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__44u3__p2_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__44u3__p2_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44u3__p3_0 = internal global [625 x i64] [i64 2, i64 4, i64 4, i64 8, i64 8, i64 5, i64 7, i64 7, i64 9, i64 9, i64 5, i64 7, i64 7, i64 9, i64 9, i64 8, i64 10, i64 9, i64 12, i64 12, i64 8, i64 9, i64 10, i64 12, i64 12, i64 5, i64 7, i64 7, i64 10, i64 10, i64 7, i64 9, i64 9, i64 11, i64 11, i64 7, i64 8, i64 9, i64 10, i64 11, i64 10, i64 11, i64 10, i64 14, i64 13, i64 9, i64 10, i64 11, i64 13, i64 13, i64 5, i64 7, i64 7, i64 10, i64 10, i64 7, i64 9, i64 8, i64 11, i64 10, i64 7, i64 9, i64 9, i64 11, i64 11, i64 9, i64 10, i64 10, i64 13, i64 12, i64 10, i64 10, i64 11, i64 13, i64 14, i64 8, i64 10, i64 10, i64 14, i64 13, i64 10, i64 11, i64 11, i64 15, i64 13, i64 9, i64 11, i64 11, i64 14, i64 13, i64 13, i64 14, i64 13, i64 17, i64 15, i64 12, i64 13, i64 13, i64 17, i64 14, i64 8, i64 10, i64 10, i64 14, i64 14, i64 9, i64 11, i64 11, i64 14, i64 15, i64 10, i64 11, i64 12, i64 14, i64 16, i64 12, i64 13, i64 13, i64 14, i64 17, i64 13, i64 13, i64 14, i64 14, i64 17, i64 5, i64 7, i64 7, i64 10, i64 10, i64 7, i64 9, i64 9, i64 11, i64 11, i64 7, i64 9, i64 9, i64 11, i64 11, i64 10, i64 11, i64 11, i64 15, i64 14, i64 10, i64 11, i64 11, i64 15, i64 14, i64 7, i64 9, i64 9, i64 12, i64 12, i64 9, i64 11, i64 11, i64 13, i64 13, i64 9, i64 11, i64 11, i64 13, i64 13, i64 11, i64 12, i64 12, i64 15, i64 14, i64 11, i64 12, i64 12, i64 15, i64 16, i64 7, i64 9, i64 9, i64 12, i64 11, i64 8, i64 11, i64 10, i64 13, i64 12, i64 9, i64 11, i64 11, i64 12, i64 13, i64 11, i64 12, i64 11, i64 16, i64 14, i64 11, i64 12, i64 13, i64 15, i64 16, i64 10, i64 12, i64 12, i64 17, i64 15, i64 11, i64 12, i64 13, i64 16, i64 15, i64 11, i64 12, i64 12, i64 16, i64 16, i64 15, i64 15, i64 15, i64 16, i64 16, i64 13, i64 14, i64 15, i64 0, i64 17, i64 9, i64 11, i64 11, i64 15, i64 15, i64 10, i64 12, i64 11, i64 16, i64 15, i64 11, i64 12, i64 12, i64 15, i64 17, i64 13, i64 15, i64 13, i64 16, i64 15, i64 13, i64 15, i64 14, i64 0, i64 18, i64 5, i64 7, i64 7, i64 10, i64 10, i64 7, i64 9, i64 9, i64 12, i64 11, i64 7, i64 9, i64 9, i64 11, i64 11, i64 10, i64 11, i64 11, i64 14, i64 14, i64 10, i64 11, i64 11, i64 14, i64 15, i64 7, i64 9, i64 9, i64 12, i64 11, i64 9, i64 11, i64 11, i64 13, i64 12, i64 8, i64 10, i64 11, i64 11, i64 12, i64 11, i64 12, i64 12, i64 16, i64 15, i64 11, i64 11, i64 12, i64 13, i64 14, i64 7, i64 9, i64 9, i64 12, i64 12, i64 9, i64 11, i64 11, i64 13, i64 13, i64 9, i64 11, i64 11, i64 13, i64 13, i64 11, i64 12, i64 12, i64 16, i64 15, i64 12, i64 12, i64 12, i64 15, i64 15, i64 9, i64 11, i64 11, i64 17, i64 15, i64 11, i64 12, i64 12, i64 17, i64 16, i64 10, i64 11, i64 12, i64 15, i64 15, i64 13, i64 14, i64 15, i64 18, i64 17, i64 13, i64 13, i64 14, i64 15, i64 15, i64 9, i64 12, i64 12, i64 15, i64 14, i64 11, i64 13, i64 12, i64 16, i64 16, i64 11, i64 12, i64 12, i64 15, i64 15, i64 13, i64 15, i64 14, i64 0, i64 0, i64 14, i64 15, i64 14, i64 16, i64 18, i64 8, i64 10, i64 10, i64 15, i64 15, i64 10, i64 12, i64 12, i64 16, i64 14, i64 10, i64 11, i64 11, i64 16, i64 16, i64 15, i64 16, i64 16, i64 18, i64 16, i64 13, i64 15, i64 14, i64 17, i64 18, i64 9, i64 11, i64 11, i64 16, i64 15, i64 11, i64 12, i64 13, i64 17, i64 17, i64 11, i64 13, i64 13, i64 16, i64 15, i64 15, i64 16, i64 16, i64 18, i64 18, i64 14, i64 16, i64 15, i64 18, i64 17, i64 9, i64 11, i64 11, i64 16, i64 16, i64 10, i64 13, i64 12, i64 16, i64 16, i64 11, i64 12, i64 12, i64 16, i64 16, i64 14, i64 16, i64 16, i64 17, i64 0, i64 14, i64 15, i64 15, i64 18, i64 16, i64 12, i64 14, i64 14, i64 0, i64 0, i64 14, i64 15, i64 16, i64 0, i64 0, i64 14, i64 15, i64 15, i64 0, i64 0, i64 17, i64 17, i64 16, i64 0, i64 0, i64 15, i64 16, i64 18, i64 17, i64 0, i64 11, i64 14, i64 14, i64 18, i64 0, i64 12, i64 15, i64 13, i64 0, i64 18, i64 13, i64 15, i64 14, i64 18, i64 0, i64 15, i64 16, i64 15, i64 0, i64 18, i64 15, i64 18, i64 17, i64 0, i64 18, i64 8, i64 10, i64 10, i64 15, i64 15, i64 10, i64 12, i64 11, i64 15, i64 15, i64 10, i64 11, i64 12, i64 15, i64 15, i64 13, i64 14, i64 15, i64 17, i64 0, i64 14, i64 15, i64 16, i64 17, i64 0, i64 9, i64 11, i64 11, i64 15, i64 15, i64 11, i64 12, i64 12, i64 17, i64 15, i64 10, i64 12, i64 13, i64 16, i64 15, i64 13, i64 15, i64 15, i64 18, i64 18, i64 15, i64 16, i64 17, i64 18, i64 18, i64 9, i64 12, i64 11, i64 16, i64 16, i64 11, i64 13, i64 13, i64 16, i64 16, i64 11, i64 13, i64 13, i64 18, i64 15, i64 14, i64 15, i64 15, i64 18, i64 0, i64 16, i64 16, i64 17, i64 0, i64 17, i64 12, i64 13, i64 13, i64 18, i64 18, i64 13, i64 14, i64 14, i64 17, i64 18, i64 13, i64 14, i64 15, i64 18, i64 17, i64 17, i64 18, i64 18, i64 0, i64 18, i64 16, i64 16, i64 18, i64 16, i64 0, i64 12, i64 15, i64 13, i64 18, i64 18, i64 13, i64 14, i64 15, i64 18, i64 18, i64 13, i64 16, i64 14, i64 17, i64 18, i64 15, i64 17, i64 16, i64 0, i64 18, i64 17, i64 0, i64 17, i64 0, i64 0], align 16
@_vq_quantlist__44u3__p3_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44u3__p3_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u3__p3_0, ptr @_vq_quantmap__44u3__p3_0, i32 5, i32 5 }, align 8
@_vq_quantthresh__44u3__p3_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44u3__p3_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__44u3__p4_0 = internal global [625 x i64] [i64 4, i64 6, i64 6, i64 9, i64 9, i64 6, i64 7, i64 6, i64 9, i64 9, i64 6, i64 6, i64 7, i64 9, i64 9, i64 9, i64 10, i64 9, i64 12, i64 11, i64 9, i64 9, i64 10, i64 11, i64 12, i64 6, i64 7, i64 7, i64 9, i64 9, i64 7, i64 7, i64 7, i64 10, i64 10, i64 6, i64 7, i64 7, i64 9, i64 10, i64 10, i64 10, i64 10, i64 12, i64 12, i64 9, i64 9, i64 10, i64 11, i64 12, i64 6, i64 7, i64 7, i64 9, i64 9, i64 7, i64 7, i64 7, i64 10, i64 9, i64 7, i64 7, i64 7, i64 10, i64 10, i64 9, i64 10, i64 9, i64 12, i64 11, i64 10, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 10, i64 13, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 12, i64 12, i64 12, i64 14, i64 14, i64 12, i64 12, i64 12, i64 13, i64 14, i64 9, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 10, i64 12, i64 13, i64 11, i64 12, i64 12, i64 14, i64 13, i64 12, i64 12, i64 12, i64 14, i64 14, i64 6, i64 7, i64 7, i64 10, i64 9, i64 7, i64 8, i64 7, i64 10, i64 10, i64 7, i64 7, i64 7, i64 10, i64 10, i64 10, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 10, i64 12, i64 12, i64 7, i64 8, i64 8, i64 10, i64 10, i64 8, i64 8, i64 8, i64 10, i64 10, i64 7, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 13, i64 10, i64 10, i64 11, i64 12, i64 13, i64 6, i64 7, i64 7, i64 10, i64 10, i64 7, i64 8, i64 7, i64 10, i64 10, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 11, i64 10, i64 13, i64 11, i64 10, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 10, i64 13, i64 12, i64 10, i64 10, i64 10, i64 12, i64 13, i64 10, i64 10, i64 10, i64 13, i64 12, i64 12, i64 11, i64 13, i64 12, i64 14, i64 12, i64 12, i64 13, i64 14, i64 14, i64 9, i64 10, i64 10, i64 12, i64 13, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 11, i64 12, i64 13, i64 12, i64 12, i64 11, i64 14, i64 12, i64 12, i64 12, i64 13, i64 14, i64 14, i64 6, i64 7, i64 7, i64 9, i64 9, i64 7, i64 7, i64 7, i64 10, i64 10, i64 7, i64 7, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 10, i64 12, i64 12, i64 6, i64 7, i64 7, i64 10, i64 10, i64 8, i64 8, i64 8, i64 10, i64 10, i64 7, i64 7, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 11, i64 11, i64 13, i64 7, i64 8, i64 8, i64 10, i64 10, i64 7, i64 8, i64 8, i64 10, i64 10, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 12, i64 12, i64 10, i64 11, i64 10, i64 13, i64 11, i64 9, i64 10, i64 10, i64 13, i64 12, i64 10, i64 11, i64 10, i64 13, i64 12, i64 9, i64 10, i64 10, i64 12, i64 13, i64 12, i64 13, i64 12, i64 14, i64 14, i64 12, i64 11, i64 12, i64 12, i64 14, i64 10, i64 10, i64 10, i64 12, i64 13, i64 10, i64 10, i64 11, i64 12, i64 13, i64 10, i64 10, i64 10, i64 12, i64 12, i64 12, i64 13, i64 12, i64 14, i64 14, i64 12, i64 12, i64 11, i64 14, i64 12, i64 9, i64 10, i64 9, i64 12, i64 12, i64 10, i64 10, i64 10, i64 13, i64 13, i64 9, i64 10, i64 10, i64 13, i64 13, i64 12, i64 13, i64 13, i64 15, i64 14, i64 12, i64 12, i64 13, i64 14, i64 14, i64 9, i64 10, i64 10, i64 13, i64 13, i64 10, i64 10, i64 10, i64 12, i64 13, i64 10, i64 10, i64 10, i64 13, i64 12, i64 13, i64 12, i64 13, i64 14, i64 15, i64 12, i64 13, i64 13, i64 15, i64 14, i64 9, i64 10, i64 10, i64 13, i64 12, i64 10, i64 10, i64 10, i64 13, i64 12, i64 10, i64 10, i64 10, i64 12, i64 13, i64 12, i64 13, i64 12, i64 14, i64 14, i64 13, i64 12, i64 12, i64 14, i64 14, i64 12, i64 12, i64 12, i64 15, i64 14, i64 12, i64 11, i64 12, i64 14, i64 14, i64 12, i64 13, i64 12, i64 14, i64 14, i64 14, i64 12, i64 14, i64 12, i64 16, i64 14, i64 14, i64 14, i64 16, i64 16, i64 11, i64 12, i64 12, i64 14, i64 14, i64 11, i64 12, i64 11, i64 15, i64 13, i64 12, i64 12, i64 12, i64 14, i64 15, i64 13, i64 14, i64 12, i64 16, i64 13, i64 14, i64 14, i64 15, i64 16, i64 16, i64 9, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 13, i64 12, i64 9, i64 10, i64 10, i64 13, i64 13, i64 12, i64 12, i64 12, i64 14, i64 14, i64 12, i64 13, i64 13, i64 14, i64 15, i64 9, i64 10, i64 10, i64 13, i64 12, i64 10, i64 11, i64 10, i64 13, i64 12, i64 10, i64 10, i64 10, i64 12, i64 13, i64 12, i64 13, i64 12, i64 14, i64 14, i64 12, i64 12, i64 13, i64 14, i64 15, i64 9, i64 10, i64 10, i64 13, i64 13, i64 10, i64 10, i64 10, i64 12, i64 13, i64 10, i64 10, i64 10, i64 13, i64 13, i64 12, i64 13, i64 13, i64 14, i64 15, i64 13, i64 13, i64 12, i64 14, i64 14, i64 11, i64 12, i64 12, i64 14, i64 14, i64 12, i64 13, i64 12, i64 15, i64 14, i64 11, i64 11, i64 12, i64 14, i64 15, i64 14, i64 14, i64 14, i64 16, i64 16, i64 14, i64 12, i64 14, i64 13, i64 16, i64 12, i64 12, i64 12, i64 14, i64 15, i64 12, i64 12, i64 13, i64 14, i64 15, i64 12, i64 12, i64 11, i64 14, i64 14, i64 14, i64 14, i64 14, i64 16, i64 16, i64 14, i64 14, i64 12, i64 16, i64 12], align 16
@_vq_quantlist__44u3__p4_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44u3__p4_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u3__p4_0, ptr @_vq_quantmap__44u3__p4_0, i32 5, i32 5 }, align 8
@_vq_quantthresh__44u3__p4_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44u3__p4_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__44u3__p5_0 = internal global [81 x i64] [i64 2, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 4, i64 5, i64 4, i64 7, i64 6, i64 8, i64 8, i64 9, i64 9, i64 4, i64 4, i64 4, i64 6, i64 7, i64 8, i64 8, i64 9, i64 9, i64 6, i64 7, i64 6, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 6, i64 6, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12], align 16
@_vq_quantlist__44u3__p5_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__44u3__p5_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u3__p5_0, ptr @_vq_quantmap__44u3__p5_0, i32 9, i32 9 }, align 8
@_vq_quantthresh__44u3__p5_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__44u3__p5_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__44u3__p6_0 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 8, i64 8, i64 9, i64 10, i64 10, i64 11, i64 13, i64 14, i64 4, i64 6, i64 5, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 14, i64 14, i64 4, i64 5, i64 6, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 14, i64 14, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 15, i64 15, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 14, i64 15, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 12, i64 16, i64 16, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 16, i64 16, i64 10, i64 11, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 17, i64 16, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 17, i64 17, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 13, i64 13, i64 14, i64 14, i64 14, i64 16, i64 17, i64 11, i64 12, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 14, i64 14, i64 19, i64 17, i64 14, i64 14, i64 14, i64 16, i64 15, i64 16, i64 16, i64 16, i64 17, i64 17, i64 17, i64 20, i64 19, i64 14, i64 15, i64 15, i64 15, i64 15, i64 15, i64 16, i64 16, i64 17, i64 17, i64 17, i64 20, i64 19], align 16
@_vq_quantlist__44u3__p6_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44u3__p6_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u3__p6_0, ptr @_vq_quantmap__44u3__p6_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__44u3__p6_0 = internal global [12 x float] [float -2.750000e+01, float -2.250000e+01, float -1.750000e+01, float -1.250000e+01, float -7.500000e+00, float -2.500000e+00, float 2.500000e+00, float 7.500000e+00, float 1.250000e+01, float 1.750000e+01, float 2.250000e+01, float 2.750000e+01], align 16
@_vq_quantmap__44u3__p6_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44u3__p6_1 = internal global [25 x i64] [i64 2, i64 4, i64 4, i64 5, i64 5, i64 4, i64 5, i64 5, i64 6, i64 5, i64 4, i64 5, i64 5, i64 5, i64 6, i64 5, i64 6, i64 5, i64 6, i64 6, i64 5, i64 5, i64 6, i64 6, i64 6], align 16
@_vq_quantlist__44u3__p6_1 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44u3__p6_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u3__p6_1, ptr @_vq_quantmap__44u3__p6_1, i32 5, i32 5 }, align 8
@_vq_quantthresh__44u3__p6_1 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44u3__p6_1 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__44u3__p7_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 4, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 3, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8], align 16
@_vq_quantlist__44u3__p7_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__44u3__p7_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u3__p7_0, ptr @_vq_quantmap__44u3__p7_0, i32 9, i32 9 }, align 8
@_vq_quantthresh__44u3__p7_0 = internal global [8 x float] [float -8.925000e+02, float -6.375000e+02, float -3.825000e+02, float -1.275000e+02, float 1.275000e+02, float 3.825000e+02, float 6.375000e+02, float 8.925000e+02], align 16
@_vq_quantmap__44u3__p7_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__44u3__p7_1 = internal global [225 x i64] [i64 1, i64 4, i64 4, i64 6, i64 5, i64 7, i64 7, i64 9, i64 8, i64 10, i64 10, i64 11, i64 11, i64 12, i64 13, i64 4, i64 7, i64 6, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 14, i64 13, i64 14, i64 13, i64 4, i64 6, i64 7, i64 7, i64 8, i64 9, i64 9, i64 10, i64 10, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 6, i64 8, i64 8, i64 10, i64 9, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 15, i64 14, i64 6, i64 8, i64 8, i64 9, i64 9, i64 11, i64 11, i64 12, i64 12, i64 14, i64 14, i64 14, i64 15, i64 15, i64 15, i64 8, i64 9, i64 9, i64 11, i64 10, i64 13, i64 12, i64 14, i64 14, i64 14, i64 14, i64 15, i64 16, i64 15, i64 15, i64 8, i64 9, i64 9, i64 11, i64 11, i64 12, i64 12, i64 14, i64 14, i64 15, i64 14, i64 15, i64 15, i64 14, i64 17, i64 9, i64 10, i64 10, i64 13, i64 12, i64 14, i64 14, i64 15, i64 14, i64 14, i64 17, i64 15, i64 15, i64 16, i64 15, i64 9, i64 11, i64 11, i64 12, i64 13, i64 14, i64 14, i64 15, i64 15, i64 15, i64 16, i64 15, i64 17, i64 16, i64 17, i64 11, i64 12, i64 12, i64 14, i64 14, i64 15, i64 14, i64 16, i64 16, i64 16, i64 15, i64 15, i64 17, i64 16, i64 16, i64 11, i64 12, i64 13, i64 14, i64 15, i64 15, i64 15, i64 15, i64 15, i64 16, i64 16, i64 17, i64 17, i64 16, i64 17, i64 12, i64 13, i64 13, i64 15, i64 14, i64 15, i64 15, i64 15, i64 15, i64 16, i64 16, i64 16, i64 17, i64 17, i64 17, i64 13, i64 12, i64 14, i64 14, i64 15, i64 15, i64 15, i64 15, i64 16, i64 17, i64 17, i64 15, i64 17, i64 17, i64 17, i64 12, i64 14, i64 14, i64 16, i64 15, i64 17, i64 16, i64 17, i64 16, i64 17, i64 16, i64 17, i64 17, i64 17, i64 17, i64 14, i64 13, i64 14, i64 15, i64 16, i64 17, i64 17, i64 17, i64 15, i64 17, i64 17, i64 17, i64 16, i64 17, i64 16], align 16
@_vq_quantlist__44u3__p7_1 = internal global [15 x i64] [i64 7, i64 6, i64 8, i64 5, i64 9, i64 4, i64 10, i64 3, i64 11, i64 2, i64 12, i64 1, i64 13, i64 0, i64 14], align 16
@_vq_auxt__44u3__p7_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u3__p7_1, ptr @_vq_quantmap__44u3__p7_1, i32 15, i32 15 }, align 8
@_vq_quantthresh__44u3__p7_1 = internal global [14 x float] [float -1.105000e+02, float -9.350000e+01, float -7.650000e+01, float -5.950000e+01, float -4.250000e+01, float -2.550000e+01, float -8.500000e+00, float 8.500000e+00, float 2.550000e+01, float 4.250000e+01, float 5.950000e+01, float 7.650000e+01, float 9.350000e+01, float 1.105000e+02], align 16
@_vq_quantmap__44u3__p7_1 = internal global [15 x i64] [i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14], align 16
@_vq_lengthlist__44u3__p7_2 = internal global [289 x i64] [i64 3, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 5, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 5, i64 6, i64 6, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 10, i64 10, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 10, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10], align 16
@_vq_quantlist__44u3__p7_2 = internal global [17 x i64] [i64 8, i64 7, i64 9, i64 6, i64 10, i64 5, i64 11, i64 4, i64 12, i64 3, i64 13, i64 2, i64 14, i64 1, i64 15, i64 0, i64 16], align 16
@_vq_auxt__44u3__p7_2 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u3__p7_2, ptr @_vq_quantmap__44u3__p7_2, i32 17, i32 17 }, align 8
@_vq_quantthresh__44u3__p7_2 = internal global [16 x float] [float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00], align 16
@_vq_quantmap__44u3__p7_2 = internal global [17 x i64] [i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16], align 16
@_huff_lengthlist__44u3__long = internal global [64 x i64] [i64 7, i64 11, i64 14, i64 13, i64 14, i64 12, i64 12, i64 12, i64 12, i64 2, i64 5, i64 8, i64 9, i64 8, i64 9, i64 11, i64 17, i64 4, i64 3, i64 6, i64 5, i64 7, i64 9, i64 15, i64 14, i64 6, i64 6, i64 7, i64 7, i64 7, i64 8, i64 14, i64 17, i64 8, i64 5, i64 7, i64 4, i64 5, i64 7, i64 15, i64 13, i64 7, i64 6, i64 7, i64 5, i64 5, i64 6, i64 14, i64 10, i64 8, i64 8, i64 7, i64 7, i64 5, i64 4, i64 9, i64 10, i64 12, i64 15, i64 14, i64 16, i64 10, i64 6, i64 9], align 16
@_huff_book__44u4__short = internal global %struct.static_codebook { i64 2, i64 64, ptr @_huff_lengthlist__44u4__short, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_resbook_44u_4 = internal global %struct.static_bookblock { [12 x [3 x ptr]] [[3 x ptr] zeroinitializer, [3 x ptr] [ptr null, ptr null, ptr @_44u4__p1_0], [3 x ptr] [ptr null, ptr null, ptr @_44u4__p2_0], [3 x ptr] [ptr null, ptr null, ptr @_44u4__p3_0], [3 x ptr] [ptr null, ptr null, ptr @_44u4__p4_0], [3 x ptr] [ptr null, ptr null, ptr @_44u4__p5_0], [3 x ptr] [ptr @_44u4__p6_0, ptr @_44u4__p6_1, ptr null], [3 x ptr] [ptr @_44u4__p7_0, ptr @_44u4__p7_1, ptr @_44u4__p7_2], [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer] }, align 8
@_huff_book__44u4__long = internal global %struct.static_codebook { i64 2, i64 64, ptr @_huff_lengthlist__44u4__long, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_lengthlist__44u4__short = internal global [64 x i64] [i64 3, i64 9, i64 14, i64 12, i64 17, i64 13, i64 13, i64 13, i64 4, i64 7, i64 8, i64 9, i64 12, i64 10, i64 11, i64 12, i64 6, i64 5, i64 4, i64 7, i64 6, i64 7, i64 9, i64 14, i64 8, i64 8, i64 7, i64 9, i64 8, i64 9, i64 10, i64 13, i64 9, i64 8, i64 5, i64 7, i64 3, i64 5, i64 8, i64 15, i64 9, i64 9, i64 6, i64 8, i64 4, i64 5, i64 7, i64 16, i64 11, i64 10, i64 6, i64 9, i64 4, i64 3, i64 6, i64 15, i64 17, i64 16, i64 8, i64 11, i64 5, i64 5, i64 7, i64 16], align 16
@_44u4__p1_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__44u4__p1_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__44u4__p1_0, ptr null, ptr @_vq_auxt__44u4__p1_0, ptr null, i32 0 }, align 8
@_44u4__p2_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__44u4__p2_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__44u4__p2_0, ptr null, ptr @_vq_auxt__44u4__p2_0, ptr null, i32 0 }, align 8
@_44u4__p3_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__44u4__p3_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44u4__p3_0, ptr null, ptr @_vq_auxt__44u4__p3_0, ptr null, i32 0 }, align 8
@_44u4__p4_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__44u4__p4_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44u4__p4_0, ptr null, ptr @_vq_auxt__44u4__p4_0, ptr null, i32 0 }, align 8
@_44u4__p5_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__44u4__p5_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44u4__p5_0, ptr null, ptr @_vq_auxt__44u4__p5_0, ptr null, i32 0 }, align 8
@_44u4__p6_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44u4__p6_0, i32 1, i64 -526516224, i64 1616117760, i32 4, i32 0, ptr @_vq_quantlist__44u4__p6_0, ptr null, ptr @_vq_auxt__44u4__p6_0, ptr null, i32 0 }, align 8
@_44u4__p6_1 = internal global %struct.static_codebook { i64 2, i64 25, ptr @_vq_lengthlist__44u4__p6_1, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44u4__p6_1, ptr null, ptr @_vq_auxt__44u4__p6_1, ptr null, i32 0 }, align 8
@_44u4__p7_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44u4__p7_0, i32 1, i64 -514332672, i64 1627381760, i32 4, i32 0, ptr @_vq_quantlist__44u4__p7_0, ptr null, ptr @_vq_auxt__44u4__p7_0, ptr null, i32 0 }, align 8
@_44u4__p7_1 = internal global %struct.static_codebook { i64 2, i64 225, ptr @_vq_lengthlist__44u4__p7_1, i32 1, i64 -522338304, i64 1620115456, i32 4, i32 0, ptr @_vq_quantlist__44u4__p7_1, ptr null, ptr @_vq_auxt__44u4__p7_1, ptr null, i32 0 }, align 8
@_44u4__p7_2 = internal global %struct.static_codebook { i64 2, i64 289, ptr @_vq_lengthlist__44u4__p7_2, i32 1, i64 -529530880, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__44u4__p7_2, ptr null, ptr @_vq_auxt__44u4__p7_2, ptr null, i32 0 }, align 8
@_vq_lengthlist__44u4__p1_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 5, i64 8, i64 7, i64 5, i64 7, i64 8, i64 5, i64 8, i64 8, i64 8, i64 11, i64 11, i64 8, i64 10, i64 11, i64 5, i64 8, i64 8, i64 8, i64 11, i64 10, i64 8, i64 11, i64 11, i64 4, i64 8, i64 8, i64 8, i64 11, i64 11, i64 8, i64 11, i64 11, i64 8, i64 11, i64 11, i64 11, i64 13, i64 14, i64 11, i64 14, i64 14, i64 7, i64 11, i64 10, i64 10, i64 14, i64 12, i64 11, i64 14, i64 14, i64 4, i64 8, i64 8, i64 8, i64 11, i64 11, i64 8, i64 11, i64 11, i64 8, i64 11, i64 11, i64 11, i64 14, i64 14, i64 10, i64 12, i64 14, i64 8, i64 11, i64 11, i64 11, i64 14, i64 14, i64 11, i64 14, i64 13], align 16
@_vq_quantlist__44u4__p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44u4__p1_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u4__p1_0, ptr @_vq_quantmap__44u4__p1_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__44u4__p1_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__44u4__p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44u4__p2_0 = internal global [81 x i64] [i64 2, i64 5, i64 5, i64 5, i64 6, i64 6, i64 5, i64 6, i64 6, i64 5, i64 6, i64 6, i64 7, i64 8, i64 8, i64 6, i64 7, i64 8, i64 5, i64 6, i64 6, i64 6, i64 8, i64 7, i64 7, i64 8, i64 8, i64 5, i64 6, i64 6, i64 7, i64 8, i64 8, i64 6, i64 8, i64 8, i64 7, i64 8, i64 8, i64 8, i64 9, i64 10, i64 8, i64 10, i64 10, i64 6, i64 8, i64 8, i64 7, i64 9, i64 8, i64 8, i64 9, i64 10, i64 5, i64 6, i64 6, i64 6, i64 8, i64 8, i64 7, i64 8, i64 8, i64 6, i64 8, i64 8, i64 8, i64 10, i64 9, i64 8, i64 8, i64 9, i64 6, i64 8, i64 8, i64 8, i64 10, i64 10, i64 8, i64 10, i64 9], align 16
@_vq_quantlist__44u4__p2_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44u4__p2_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u4__p2_0, ptr @_vq_quantmap__44u4__p2_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__44u4__p2_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__44u4__p2_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44u4__p3_0 = internal global [625 x i64] [i64 2, i64 4, i64 4, i64 7, i64 7, i64 5, i64 7, i64 7, i64 9, i64 9, i64 5, i64 7, i64 7, i64 9, i64 9, i64 8, i64 10, i64 9, i64 12, i64 12, i64 8, i64 9, i64 9, i64 12, i64 12, i64 5, i64 7, i64 7, i64 10, i64 9, i64 7, i64 9, i64 9, i64 11, i64 11, i64 7, i64 8, i64 9, i64 10, i64 11, i64 10, i64 11, i64 11, i64 13, i64 13, i64 9, i64 10, i64 11, i64 13, i64 13, i64 5, i64 7, i64 7, i64 9, i64 10, i64 7, i64 9, i64 9, i64 11, i64 11, i64 7, i64 9, i64 9, i64 11, i64 11, i64 9, i64 11, i64 10, i64 13, i64 12, i64 10, i64 11, i64 11, i64 13, i64 13, i64 8, i64 10, i64 10, i64 13, i64 13, i64 10, i64 11, i64 11, i64 15, i64 13, i64 9, i64 11, i64 11, i64 14, i64 13, i64 13, i64 15, i64 13, i64 16, i64 15, i64 12, i64 13, i64 13, i64 15, i64 15, i64 8, i64 10, i64 10, i64 13, i64 14, i64 9, i64 11, i64 11, i64 14, i64 14, i64 10, i64 11, i64 12, i64 14, i64 16, i64 12, i64 13, i64 13, i64 14, i64 16, i64 13, i64 14, i64 14, i64 15, i64 17, i64 5, i64 7, i64 7, i64 10, i64 10, i64 7, i64 9, i64 9, i64 11, i64 11, i64 7, i64 9, i64 9, i64 11, i64 11, i64 10, i64 11, i64 11, i64 15, i64 14, i64 10, i64 11, i64 11, i64 14, i64 14, i64 7, i64 9, i64 9, i64 12, i64 12, i64 9, i64 11, i64 11, i64 13, i64 13, i64 9, i64 11, i64 11, i64 13, i64 13, i64 11, i64 12, i64 13, i64 15, i64 15, i64 11, i64 13, i64 13, i64 16, i64 15, i64 7, i64 9, i64 9, i64 11, i64 11, i64 9, i64 11, i64 10, i64 13, i64 12, i64 9, i64 11, i64 12, i64 13, i64 13, i64 11, i64 13, i64 12, i64 16, i64 14, i64 11, i64 13, i64 13, i64 15, i64 16, i64 10, i64 12, i64 12, i64 18, i64 15, i64 11, i64 12, i64 13, i64 16, i64 15, i64 11, i64 13, i64 13, i64 17, i64 16, i64 15, i64 15, i64 15, i64 17, i64 17, i64 14, i64 15, i64 16, i64 18, i64 19, i64 9, i64 11, i64 11, i64 15, i64 15, i64 10, i64 12, i64 11, i64 15, i64 16, i64 11, i64 13, i64 13, i64 15, i64 16, i64 13, i64 15, i64 13, i64 18, i64 15, i64 14, i64 15, i64 15, i64 17, i64 19, i64 5, i64 7, i64 7, i64 10, i64 10, i64 7, i64 9, i64 9, i64 12, i64 11, i64 7, i64 9, i64 9, i64 11, i64 12, i64 10, i64 12, i64 11, i64 14, i64 14, i64 10, i64 11, i64 12, i64 14, i64 15, i64 7, i64 9, i64 9, i64 11, i64 11, i64 9, i64 11, i64 11, i64 13, i64 12, i64 9, i64 10, i64 11, i64 12, i64 13, i64 11, i64 13, i64 13, i64 16, i64 17, i64 11, i64 11, i64 13, i64 14, i64 15, i64 7, i64 9, i64 9, i64 12, i64 12, i64 9, i64 11, i64 11, i64 13, i64 13, i64 9, i64 11, i64 11, i64 13, i64 13, i64 11, i64 13, i64 12, i64 15, i64 16, i64 11, i64 13, i64 13, i64 16, i64 15, i64 9, i64 11, i64 11, i64 16, i64 15, i64 11, i64 13, i64 12, i64 16, i64 15, i64 10, i64 12, i64 12, i64 16, i64 15, i64 14, i64 15, i64 16, i64 19, i64 17, i64 13, i64 14, i64 15, i64 15, i64 16, i64 10, i64 11, i64 12, i64 15, i64 15, i64 11, i64 13, i64 13, i64 16, i64 16, i64 11, i64 13, i64 12, i64 16, i64 17, i64 14, i64 15, i64 15, i64 18, i64 17, i64 14, i64 16, i64 14, i64 16, i64 19, i64 7, i64 10, i64 10, i64 15, i64 14, i64 10, i64 12, i64 12, i64 16, i64 15, i64 10, i64 11, i64 11, i64 16, i64 15, i64 14, i64 16, i64 16, i64 19, i64 18, i64 13, i64 15, i64 14, i64 17, i64 17, i64 9, i64 11, i64 11, i64 17, i64 16, i64 11, i64 13, i64 14, i64 18, i64 17, i64 11, i64 13, i64 13, i64 16, i64 16, i64 15, i64 16, i64 17, i64 19, i64 0, i64 14, i64 15, i64 18, i64 16, i64 19, i64 9, i64 11, i64 11, i64 16, i64 15, i64 11, i64 13, i64 12, i64 18, i64 16, i64 11, i64 13, i64 13, i64 17, i64 16, i64 14, i64 16, i64 16, i64 17, i64 19, i64 15, i64 16, i64 15, i64 18, i64 0, i64 12, i64 14, i64 15, i64 18, i64 19, i64 13, i64 15, i64 16, i64 19, i64 17, i64 14, i64 16, i64 15, i64 18, i64 0, i64 17, i64 16, i64 19, i64 0, i64 18, i64 16, i64 17, i64 18, i64 0, i64 0, i64 11, i64 13, i64 14, i64 18, i64 19, i64 13, i64 15, i64 13, i64 19, i64 19, i64 14, i64 15, i64 15, i64 17, i64 17, i64 15, i64 17, i64 15, i64 19, i64 17, i64 16, i64 18, i64 18, i64 19, i64 0, i64 8, i64 10, i64 10, i64 14, i64 14, i64 10, i64 12, i64 11, i64 15, i64 15, i64 10, i64 11, i64 12, i64 15, i64 17, i64 13, i64 15, i64 15, i64 17, i64 16, i64 14, i64 15, i64 15, i64 18, i64 0, i64 9, i64 11, i64 11, i64 15, i64 15, i64 11, i64 13, i64 13, i64 18, i64 16, i64 10, i64 12, i64 13, i64 16, i64 17, i64 14, i64 15, i64 16, i64 17, i64 18, i64 14, i64 15, i64 17, i64 19, i64 19, i64 9, i64 12, i64 12, i64 15, i64 16, i64 11, i64 13, i64 13, i64 16, i64 17, i64 11, i64 14, i64 13, i64 19, i64 16, i64 14, i64 16, i64 15, i64 18, i64 19, i64 15, i64 16, i64 18, i64 19, i64 18, i64 12, i64 14, i64 14, i64 19, i64 18, i64 13, i64 15, i64 17, i64 18, i64 17, i64 13, i64 14, i64 15, i64 18, i64 0, i64 16, i64 0, i64 0, i64 18, i64 18, i64 16, i64 15, i64 0, i64 17, i64 19, i64 12, i64 15, i64 14, i64 17, i64 0, i64 13, i64 15, i64 16, i64 19, i64 18, i64 13, i64 16, i64 15, i64 0, i64 19, i64 16, i64 18, i64 16, i64 19, i64 18, i64 17, i64 19, i64 16, i64 0, i64 19], align 16
@_vq_quantlist__44u4__p3_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44u4__p3_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u4__p3_0, ptr @_vq_quantmap__44u4__p3_0, i32 5, i32 5 }, align 8
@_vq_quantthresh__44u4__p3_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44u4__p3_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__44u4__p4_0 = internal global [625 x i64] [i64 4, i64 5, i64 5, i64 8, i64 8, i64 6, i64 7, i64 6, i64 9, i64 9, i64 6, i64 6, i64 7, i64 9, i64 9, i64 9, i64 9, i64 9, i64 11, i64 11, i64 8, i64 9, i64 9, i64 11, i64 11, i64 6, i64 7, i64 7, i64 9, i64 9, i64 7, i64 8, i64 8, i64 10, i64 10, i64 6, i64 7, i64 8, i64 9, i64 10, i64 9, i64 10, i64 10, i64 11, i64 12, i64 9, i64 9, i64 10, i64 11, i64 12, i64 6, i64 7, i64 7, i64 9, i64 9, i64 7, i64 8, i64 7, i64 10, i64 9, i64 7, i64 8, i64 8, i64 10, i64 10, i64 9, i64 10, i64 9, i64 12, i64 11, i64 9, i64 10, i64 10, i64 12, i64 11, i64 9, i64 9, i64 9, i64 12, i64 11, i64 9, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 11, i64 12, i64 12, i64 13, i64 14, i64 11, i64 11, i64 12, i64 13, i64 14, i64 9, i64 9, i64 9, i64 11, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 11, i64 12, i64 11, i64 14, i64 13, i64 11, i64 12, i64 12, i64 13, i64 13, i64 5, i64 7, i64 7, i64 9, i64 9, i64 7, i64 8, i64 8, i64 10, i64 10, i64 7, i64 7, i64 8, i64 10, i64 10, i64 9, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 7, i64 8, i64 8, i64 10, i64 10, i64 8, i64 8, i64 9, i64 10, i64 11, i64 8, i64 9, i64 9, i64 11, i64 11, i64 10, i64 10, i64 11, i64 11, i64 13, i64 10, i64 10, i64 11, i64 12, i64 13, i64 6, i64 7, i64 8, i64 10, i64 10, i64 7, i64 9, i64 8, i64 11, i64 10, i64 8, i64 8, i64 9, i64 10, i64 11, i64 10, i64 11, i64 10, i64 13, i64 11, i64 10, i64 11, i64 11, i64 13, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 11, i64 12, i64 13, i64 10, i64 11, i64 11, i64 13, i64 13, i64 12, i64 11, i64 13, i64 12, i64 15, i64 12, i64 13, i64 13, i64 14, i64 14, i64 9, i64 10, i64 10, i64 12, i64 12, i64 9, i64 11, i64 10, i64 13, i64 12, i64 10, i64 11, i64 11, i64 13, i64 13, i64 11, i64 13, i64 11, i64 14, i64 12, i64 12, i64 13, i64 13, i64 14, i64 15, i64 5, i64 7, i64 7, i64 9, i64 9, i64 7, i64 8, i64 7, i64 10, i64 10, i64 7, i64 8, i64 8, i64 10, i64 10, i64 9, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 6, i64 8, i64 7, i64 10, i64 10, i64 8, i64 9, i64 8, i64 11, i64 10, i64 7, i64 8, i64 9, i64 10, i64 11, i64 10, i64 11, i64 11, i64 12, i64 13, i64 10, i64 10, i64 11, i64 11, i64 13, i64 7, i64 8, i64 8, i64 10, i64 10, i64 8, i64 9, i64 9, i64 10, i64 11, i64 8, i64 9, i64 8, i64 11, i64 10, i64 10, i64 11, i64 11, i64 13, i64 12, i64 10, i64 11, i64 10, i64 13, i64 11, i64 9, i64 10, i64 10, i64 13, i64 12, i64 10, i64 11, i64 11, i64 13, i64 13, i64 9, i64 10, i64 10, i64 12, i64 13, i64 12, i64 13, i64 13, i64 15, i64 14, i64 11, i64 11, i64 13, i64 12, i64 14, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 11, i64 11, i64 13, i64 13, i64 10, i64 11, i64 10, i64 13, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 12, i64 13, i64 11, i64 15, i64 12, i64 8, i64 9, i64 9, i64 12, i64 12, i64 9, i64 10, i64 10, i64 13, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 12, i64 13, i64 12, i64 14, i64 14, i64 11, i64 12, i64 12, i64 14, i64 13, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 11, i64 13, i64 13, i64 10, i64 11, i64 11, i64 13, i64 12, i64 12, i64 13, i64 13, i64 14, i64 15, i64 12, i64 13, i64 13, i64 15, i64 14, i64 9, i64 10, i64 10, i64 12, i64 12, i64 9, i64 11, i64 10, i64 13, i64 12, i64 10, i64 10, i64 11, i64 12, i64 13, i64 12, i64 13, i64 12, i64 15, i64 14, i64 12, i64 13, i64 13, i64 14, i64 14, i64 11, i64 12, i64 12, i64 14, i64 13, i64 11, i64 11, i64 12, i64 13, i64 14, i64 12, i64 13, i64 13, i64 15, i64 14, i64 13, i64 12, i64 14, i64 12, i64 16, i64 14, i64 15, i64 14, i64 16, i64 16, i64 11, i64 12, i64 12, i64 14, i64 14, i64 11, i64 12, i64 11, i64 15, i64 13, i64 12, i64 13, i64 13, i64 14, i64 15, i64 13, i64 14, i64 12, i64 16, i64 13, i64 14, i64 14, i64 15, i64 16, i64 16, i64 8, i64 9, i64 9, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 13, i64 11, i64 12, i64 12, i64 14, i64 13, i64 12, i64 12, i64 13, i64 14, i64 14, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 11, i64 11, i64 13, i64 12, i64 10, i64 10, i64 11, i64 12, i64 13, i64 12, i64 13, i64 13, i64 14, i64 14, i64 12, i64 12, i64 13, i64 14, i64 15, i64 9, i64 10, i64 10, i64 12, i64 13, i64 10, i64 11, i64 11, i64 12, i64 13, i64 10, i64 11, i64 10, i64 13, i64 13, i64 12, i64 13, i64 13, i64 14, i64 15, i64 12, i64 13, i64 13, i64 15, i64 14, i64 11, i64 12, i64 12, i64 14, i64 14, i64 12, i64 13, i64 13, i64 15, i64 14, i64 11, i64 11, i64 12, i64 14, i64 15, i64 14, i64 14, i64 14, i64 17, i64 16, i64 13, i64 12, i64 14, i64 13, i64 16, i64 11, i64 12, i64 12, i64 13, i64 15, i64 12, i64 13, i64 13, i64 14, i64 15, i64 11, i64 12, i64 11, i64 14, i64 14, i64 14, i64 15, i64 14, i64 15, i64 17, i64 13, i64 14, i64 12, i64 16, i64 12], align 16
@_vq_quantlist__44u4__p4_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44u4__p4_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u4__p4_0, ptr @_vq_quantmap__44u4__p4_0, i32 5, i32 5 }, align 8
@_vq_quantthresh__44u4__p4_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44u4__p4_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__44u4__p5_0 = internal global [81 x i64] [i64 2, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 4, i64 5, i64 4, i64 7, i64 6, i64 8, i64 7, i64 10, i64 9, i64 4, i64 4, i64 5, i64 6, i64 7, i64 7, i64 8, i64 9, i64 9, i64 6, i64 7, i64 6, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 6, i64 6, i64 7, i64 8, i64 8, i64 8, i64 9, i64 10, i64 10, i64 7, i64 8, i64 7, i64 9, i64 8, i64 10, i64 10, i64 11, i64 11, i64 7, i64 7, i64 8, i64 8, i64 9, i64 10, i64 10, i64 11, i64 11, i64 9, i64 10, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12], align 16
@_vq_quantlist__44u4__p5_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__44u4__p5_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u4__p5_0, ptr @_vq_quantmap__44u4__p5_0, i32 9, i32 9 }, align 8
@_vq_quantthresh__44u4__p5_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__44u4__p5_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__44u4__p6_0 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 8, i64 8, i64 9, i64 10, i64 10, i64 11, i64 13, i64 13, i64 4, i64 6, i64 5, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 14, i64 14, i64 4, i64 5, i64 6, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 14, i64 14, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 15, i64 15, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 15, i64 15, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 16, i64 16, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 16, i64 16, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 13, i64 16, i64 16, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 13, i64 13, i64 14, i64 16, i64 17, i64 11, i64 12, i64 11, i64 12, i64 12, i64 13, i64 13, i64 13, i64 14, i64 14, i64 14, i64 17, i64 16, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 15, i64 14, i64 17, i64 17, i64 14, i64 14, i64 14, i64 15, i64 15, i64 16, i64 16, i64 17, i64 17, i64 17, i64 19, i64 19, i64 0, i64 14, i64 15, i64 15, i64 15, i64 15, i64 16, i64 16, i64 16, i64 17, i64 17, i64 19, i64 20, i64 20], align 16
@_vq_quantlist__44u4__p6_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44u4__p6_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u4__p6_0, ptr @_vq_quantmap__44u4__p6_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__44u4__p6_0 = internal global [12 x float] [float -2.750000e+01, float -2.250000e+01, float -1.750000e+01, float -1.250000e+01, float -7.500000e+00, float -2.500000e+00, float 2.500000e+00, float 7.500000e+00, float 1.250000e+01, float 1.750000e+01, float 2.250000e+01, float 2.750000e+01], align 16
@_vq_quantmap__44u4__p6_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44u4__p6_1 = internal global [25 x i64] [i64 2, i64 4, i64 4, i64 5, i64 5, i64 4, i64 5, i64 5, i64 6, i64 5, i64 4, i64 5, i64 5, i64 5, i64 6, i64 5, i64 6, i64 5, i64 6, i64 6, i64 5, i64 5, i64 6, i64 6, i64 6], align 16
@_vq_quantlist__44u4__p6_1 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44u4__p6_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u4__p6_1, ptr @_vq_quantmap__44u4__p6_1, i32 5, i32 5 }, align 8
@_vq_quantthresh__44u4__p6_1 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44u4__p6_1 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__44u4__p7_0 = internal global [169 x i64] [i64 1, i64 3, i64 3, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 4, i64 10, i64 9, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 4, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10], align 16
@_vq_quantlist__44u4__p7_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44u4__p7_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u4__p7_0, ptr @_vq_quantmap__44u4__p7_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__44u4__p7_0 = internal global [12 x float] [float -1.402500e+03, float -1.147500e+03, float -8.925000e+02, float -6.375000e+02, float -3.825000e+02, float -1.275000e+02, float 1.275000e+02, float 3.825000e+02, float 6.375000e+02, float 8.925000e+02, float 1.147500e+03, float 1.402500e+03], align 16
@_vq_quantmap__44u4__p7_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44u4__p7_1 = internal global [225 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 9, i64 8, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 4, i64 7, i64 6, i64 8, i64 7, i64 9, i64 9, i64 10, i64 10, i64 11, i64 10, i64 12, i64 11, i64 12, i64 12, i64 4, i64 6, i64 6, i64 7, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 6, i64 8, i64 8, i64 10, i64 9, i64 11, i64 10, i64 11, i64 11, i64 12, i64 12, i64 14, i64 13, i64 13, i64 13, i64 6, i64 8, i64 8, i64 9, i64 9, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 13, i64 14, i64 13, i64 14, i64 8, i64 9, i64 9, i64 11, i64 10, i64 12, i64 12, i64 13, i64 12, i64 13, i64 14, i64 14, i64 14, i64 14, i64 14, i64 8, i64 9, i64 9, i64 10, i64 11, i64 12, i64 11, i64 12, i64 13, i64 13, i64 14, i64 14, i64 13, i64 14, i64 14, i64 9, i64 10, i64 10, i64 12, i64 12, i64 14, i64 13, i64 14, i64 14, i64 15, i64 15, i64 16, i64 15, i64 15, i64 15, i64 9, i64 10, i64 10, i64 11, i64 12, i64 13, i64 13, i64 13, i64 14, i64 15, i64 15, i64 18, i64 16, i64 17, i64 15, i64 10, i64 12, i64 12, i64 13, i64 13, i64 15, i64 14, i64 15, i64 14, i64 16, i64 16, i64 16, i64 15, i64 16, i64 15, i64 10, i64 11, i64 11, i64 13, i64 13, i64 14, i64 14, i64 17, i64 16, i64 15, i64 16, i64 18, i64 16, i64 15, i64 16, i64 11, i64 12, i64 13, i64 14, i64 13, i64 15, i64 14, i64 15, i64 16, i64 17, i64 15, i64 16, i64 16, i64 15, i64 16, i64 11, i64 12, i64 13, i64 14, i64 15, i64 14, i64 16, i64 15, i64 15, i64 16, i64 15, i64 15, i64 17, i64 17, i64 17, i64 12, i64 13, i64 13, i64 14, i64 14, i64 14, i64 15, i64 16, i64 14, i64 15, i64 15, i64 16, i64 16, i64 16, i64 16, i64 12, i64 13, i64 13, i64 13, i64 14, i64 15, i64 15, i64 15, i64 14, i64 16, i64 16, i64 16, i64 16, i64 16, i64 17], align 16
@_vq_quantlist__44u4__p7_1 = internal global [15 x i64] [i64 7, i64 6, i64 8, i64 5, i64 9, i64 4, i64 10, i64 3, i64 11, i64 2, i64 12, i64 1, i64 13, i64 0, i64 14], align 16
@_vq_auxt__44u4__p7_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u4__p7_1, ptr @_vq_quantmap__44u4__p7_1, i32 15, i32 15 }, align 8
@_vq_quantthresh__44u4__p7_1 = internal global [14 x float] [float -1.105000e+02, float -9.350000e+01, float -7.650000e+01, float -5.950000e+01, float -4.250000e+01, float -2.550000e+01, float -8.500000e+00, float 8.500000e+00, float 2.550000e+01, float 4.250000e+01, float 5.950000e+01, float 7.650000e+01, float 9.350000e+01, float 1.105000e+02], align 16
@_vq_quantmap__44u4__p7_1 = internal global [15 x i64] [i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14], align 16
@_vq_lengthlist__44u4__p7_2 = internal global [289 x i64] [i64 3, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10], align 16
@_vq_quantlist__44u4__p7_2 = internal global [17 x i64] [i64 8, i64 7, i64 9, i64 6, i64 10, i64 5, i64 11, i64 4, i64 12, i64 3, i64 13, i64 2, i64 14, i64 1, i64 15, i64 0, i64 16], align 16
@_vq_auxt__44u4__p7_2 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u4__p7_2, ptr @_vq_quantmap__44u4__p7_2, i32 17, i32 17 }, align 8
@_vq_quantthresh__44u4__p7_2 = internal global [16 x float] [float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00], align 16
@_vq_quantmap__44u4__p7_2 = internal global [17 x i64] [i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16], align 16
@_huff_lengthlist__44u4__long = internal global [64 x i64] [i64 3, i64 7, i64 11, i64 11, i64 12, i64 11, i64 11, i64 12, i64 5, i64 3, i64 5, i64 7, i64 8, i64 8, i64 9, i64 11, i64 9, i64 4, i64 4, i64 6, i64 6, i64 7, i64 9, i64 15, i64 10, i64 6, i64 6, i64 7, i64 7, i64 7, i64 8, i64 14, i64 12, i64 7, i64 5, i64 6, i64 4, i64 5, i64 7, i64 15, i64 10, i64 7, i64 6, i64 7, i64 5, i64 5, i64 6, i64 13, i64 9, i64 8, i64 8, i64 7, i64 7, i64 5, i64 4, i64 8, i64 10, i64 12, i64 14, i64 13, i64 14, i64 10, i64 5, i64 7], align 16
@_huff_book__44u5__short = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__44u5__short, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_resbook_44u_5 = internal global %struct.static_bookblock { [12 x [3 x ptr]] [[3 x ptr] zeroinitializer, [3 x ptr] [ptr null, ptr null, ptr @_44u5__p1_0], [3 x ptr] [ptr null, ptr null, ptr @_44u5__p2_0], [3 x ptr] [ptr null, ptr null, ptr @_44u5__p3_0], [3 x ptr] [ptr null, ptr null, ptr @_44u5__p4_0], [3 x ptr] [ptr null, ptr null, ptr @_44u5__p5_0], [3 x ptr] [ptr null, ptr null, ptr @_44u5__p6_0], [3 x ptr] [ptr @_44u5__p7_0, ptr @_44u5__p7_1, ptr null], [3 x ptr] [ptr @_44u5__p8_0, ptr @_44u5__p8_1, ptr null], [3 x ptr] [ptr @_44u5__p9_0, ptr @_44u5__p9_1, ptr @_44u5__p9_2], [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer] }, align 8
@_huff_book__44u5__long = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__44u5__long, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_residue_44_mid_un = internal global { i64, i64, i32, i32, i32, [64 x i32], <{ i32, [255 x i32] }>, <{ [9 x float], [55 x float] }>, <{ [9 x float], [55 x float] }> } { i64 0, i64 -1, i32 -1, i32 10, i32 -1, [64 x i32] zeroinitializer, <{ i32, [255 x i32] }> <{ i32 -1, [255 x i32] zeroinitializer }>, <{ [9 x float], [55 x float] }> <{ [9 x float] [float 5.000000e-01, float 1.500000e+00, float 1.500000e+00, float 2.500000e+00, float 2.500000e+00, float 4.500000e+00, float 4.500000e+00, float 1.650000e+01, float 6.050000e+01], [55 x float] zeroinitializer }>, <{ [9 x float], [55 x float] }> <{ [9 x float] [float -1.000000e+00, float 3.000000e+01, float -1.000000e+00, float 5.000000e+01, float -1.000000e+00, float 8.000000e+01, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00], [55 x float] zeroinitializer }> }, align 8
@_huff_lengthlist__44u5__short = internal global [100 x i64] [i64 4, i64 11, i64 16, i64 14, i64 18, i64 15, i64 18, i64 15, i64 17, i64 17, i64 4, i64 6, i64 9, i64 9, i64 12, i64 9, i64 14, i64 10, i64 14, i64 17, i64 6, i64 6, i64 5, i64 7, i64 6, i64 8, i64 10, i64 10, i64 16, i64 17, i64 7, i64 8, i64 7, i64 9, i64 9, i64 10, i64 12, i64 12, i64 14, i64 17, i64 8, i64 6, i64 5, i64 7, i64 4, i64 7, i64 5, i64 7, i64 14, i64 17, i64 9, i64 9, i64 8, i64 9, i64 7, i64 10, i64 8, i64 10, i64 14, i64 17, i64 11, i64 9, i64 7, i64 9, i64 4, i64 7, i64 3, i64 6, i64 15, i64 17, i64 11, i64 10, i64 10, i64 10, i64 6, i64 9, i64 5, i64 6, i64 14, i64 17, i64 17, i64 17, i64 10, i64 15, i64 4, i64 8, i64 3, i64 5, i64 12, i64 17, i64 17, i64 17, i64 12, i64 16, i64 7, i64 11, i64 6, i64 8, i64 16, i64 17], align 16
@_44u5__p1_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__44u5__p1_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__44u5__p1_0, ptr null, ptr @_vq_auxt__44u5__p1_0, ptr null, i32 0 }, align 8
@_44u5__p2_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__44u5__p2_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__44u5__p2_0, ptr null, ptr @_vq_auxt__44u5__p2_0, ptr null, i32 0 }, align 8
@_44u5__p3_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__44u5__p3_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44u5__p3_0, ptr null, ptr @_vq_auxt__44u5__p3_0, ptr null, i32 0 }, align 8
@_44u5__p4_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__44u5__p4_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44u5__p4_0, ptr null, ptr @_vq_auxt__44u5__p4_0, ptr null, i32 0 }, align 8
@_44u5__p5_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__44u5__p5_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44u5__p5_0, ptr null, ptr @_vq_auxt__44u5__p5_0, ptr null, i32 0 }, align 8
@_44u5__p6_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__44u5__p6_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44u5__p6_0, ptr null, ptr @_vq_auxt__44u5__p6_0, ptr null, i32 0 }, align 8
@_44u5__p7_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__44u5__p7_0, i32 1, i64 -529137664, i64 1618345984, i32 2, i32 0, ptr @_vq_quantlist__44u5__p7_0, ptr null, ptr @_vq_auxt__44u5__p7_0, ptr null, i32 0 }, align 8
@_44u5__p7_1 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__44u5__p7_1, i32 1, i64 -531365888, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44u5__p7_1, ptr null, ptr @_vq_auxt__44u5__p7_1, ptr null, i32 0 }, align 8
@_44u5__p8_0 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__44u5__p8_0, i32 1, i64 -524582912, i64 1618345984, i32 4, i32 0, ptr @_vq_quantlist__44u5__p8_0, ptr null, ptr @_vq_auxt__44u5__p8_0, ptr null, i32 0 }, align 8
@_44u5__p8_1 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__44u5__p8_1, i32 1, i64 -531365888, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44u5__p8_1, ptr null, ptr @_vq_auxt__44u5__p8_1, ptr null, i32 0 }, align 8
@_44u5__p9_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44u5__p9_0, i32 1, i64 -514332672, i64 1627381760, i32 4, i32 0, ptr @_vq_quantlist__44u5__p9_0, ptr null, ptr @_vq_auxt__44u5__p9_0, ptr null, i32 0 }, align 8
@_44u5__p9_1 = internal global %struct.static_codebook { i64 2, i64 225, ptr @_vq_lengthlist__44u5__p9_1, i32 1, i64 -522338304, i64 1620115456, i32 4, i32 0, ptr @_vq_quantlist__44u5__p9_1, ptr null, ptr @_vq_auxt__44u5__p9_1, ptr null, i32 0 }, align 8
@_44u5__p9_2 = internal global %struct.static_codebook { i64 2, i64 289, ptr @_vq_lengthlist__44u5__p9_2, i32 1, i64 -529530880, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__44u5__p9_2, ptr null, ptr @_vq_auxt__44u5__p9_2, ptr null, i32 0 }, align 8
@_vq_lengthlist__44u5__p1_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 5, i64 8, i64 7, i64 5, i64 7, i64 7, i64 5, i64 8, i64 8, i64 8, i64 10, i64 10, i64 7, i64 9, i64 10, i64 5, i64 8, i64 8, i64 7, i64 10, i64 9, i64 8, i64 10, i64 10, i64 4, i64 8, i64 8, i64 8, i64 11, i64 10, i64 8, i64 10, i64 10, i64 8, i64 11, i64 11, i64 10, i64 12, i64 13, i64 10, i64 13, i64 13, i64 7, i64 10, i64 10, i64 9, i64 13, i64 11, i64 10, i64 13, i64 13, i64 5, i64 8, i64 8, i64 8, i64 10, i64 10, i64 8, i64 10, i64 10, i64 7, i64 10, i64 10, i64 10, i64 13, i64 13, i64 10, i64 11, i64 13, i64 8, i64 10, i64 11, i64 10, i64 13, i64 13, i64 10, i64 13, i64 12], align 16
@_vq_quantlist__44u5__p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44u5__p1_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u5__p1_0, ptr @_vq_quantmap__44u5__p1_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__44u5__p1_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__44u5__p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44u5__p2_0 = internal global [81 x i64] [i64 3, i64 4, i64 4, i64 5, i64 6, i64 6, i64 5, i64 6, i64 6, i64 5, i64 6, i64 6, i64 6, i64 8, i64 8, i64 6, i64 7, i64 8, i64 5, i64 6, i64 6, i64 6, i64 8, i64 7, i64 6, i64 8, i64 8, i64 5, i64 6, i64 6, i64 6, i64 8, i64 7, i64 6, i64 8, i64 8, i64 6, i64 8, i64 8, i64 8, i64 9, i64 9, i64 8, i64 9, i64 9, i64 6, i64 7, i64 8, i64 7, i64 9, i64 8, i64 8, i64 9, i64 9, i64 5, i64 6, i64 6, i64 6, i64 8, i64 7, i64 6, i64 8, i64 8, i64 6, i64 8, i64 8, i64 8, i64 9, i64 9, i64 7, i64 8, i64 9, i64 6, i64 8, i64 8, i64 8, i64 9, i64 9, i64 8, i64 9, i64 9], align 16
@_vq_quantlist__44u5__p2_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44u5__p2_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u5__p2_0, ptr @_vq_quantmap__44u5__p2_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__44u5__p2_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__44u5__p2_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44u5__p3_0 = internal global [625 x i64] [i64 2, i64 4, i64 5, i64 8, i64 8, i64 5, i64 7, i64 6, i64 9, i64 9, i64 5, i64 6, i64 7, i64 9, i64 9, i64 8, i64 10, i64 9, i64 12, i64 12, i64 8, i64 9, i64 10, i64 12, i64 13, i64 5, i64 7, i64 7, i64 10, i64 9, i64 7, i64 9, i64 9, i64 11, i64 11, i64 7, i64 8, i64 9, i64 10, i64 11, i64 10, i64 11, i64 11, i64 13, i64 14, i64 9, i64 10, i64 11, i64 13, i64 13, i64 5, i64 7, i64 7, i64 9, i64 9, i64 7, i64 9, i64 8, i64 11, i64 10, i64 7, i64 9, i64 9, i64 11, i64 11, i64 9, i64 11, i64 10, i64 14, i64 13, i64 10, i64 11, i64 11, i64 13, i64 14, i64 8, i64 10, i64 10, i64 13, i64 13, i64 10, i64 11, i64 11, i64 15, i64 14, i64 9, i64 11, i64 11, i64 14, i64 14, i64 13, i64 15, i64 14, i64 18, i64 16, i64 12, i64 13, i64 14, i64 16, i64 16, i64 8, i64 10, i64 10, i64 13, i64 13, i64 9, i64 11, i64 11, i64 14, i64 14, i64 10, i64 11, i64 12, i64 14, i64 15, i64 12, i64 13, i64 13, i64 16, i64 16, i64 13, i64 14, i64 14, i64 15, i64 17, i64 5, i64 7, i64 7, i64 10, i64 10, i64 7, i64 9, i64 9, i64 11, i64 11, i64 7, i64 9, i64 9, i64 11, i64 11, i64 10, i64 11, i64 11, i64 15, i64 14, i64 10, i64 11, i64 11, i64 14, i64 14, i64 7, i64 9, i64 9, i64 12, i64 11, i64 9, i64 11, i64 11, i64 13, i64 13, i64 9, i64 11, i64 11, i64 13, i64 13, i64 12, i64 12, i64 13, i64 15, i64 15, i64 11, i64 12, i64 13, i64 16, i64 15, i64 6, i64 9, i64 9, i64 11, i64 11, i64 8, i64 11, i64 10, i64 13, i64 12, i64 9, i64 10, i64 11, i64 12, i64 14, i64 11, i64 13, i64 11, i64 16, i64 14, i64 11, i64 13, i64 13, i64 15, i64 16, i64 10, i64 11, i64 11, i64 15, i64 15, i64 11, i64 12, i64 13, i64 16, i64 15, i64 11, i64 13, i64 13, i64 16, i64 16, i64 14, i64 15, i64 15, i64 17, i64 18, i64 14, i64 15, i64 16, i64 17, i64 18, i64 9, i64 11, i64 11, i64 14, i64 15, i64 10, i64 12, i64 11, i64 15, i64 15, i64 11, i64 12, i64 13, i64 15, i64 16, i64 13, i64 15, i64 13, i64 17, i64 15, i64 14, i64 15, i64 16, i64 18, i64 19, i64 5, i64 7, i64 7, i64 10, i64 10, i64 7, i64 9, i64 9, i64 11, i64 11, i64 7, i64 9, i64 9, i64 11, i64 11, i64 10, i64 11, i64 11, i64 15, i64 14, i64 10, i64 11, i64 11, i64 14, i64 15, i64 6, i64 9, i64 9, i64 11, i64 11, i64 9, i64 11, i64 10, i64 13, i64 13, i64 8, i64 10, i64 11, i64 12, i64 13, i64 11, i64 13, i64 13, i64 15, i64 15, i64 11, i64 11, i64 13, i64 13, i64 15, i64 7, i64 9, i64 9, i64 11, i64 12, i64 9, i64 11, i64 11, i64 13, i64 13, i64 9, i64 11, i64 11, i64 13, i64 13, i64 11, i64 13, i64 12, i64 17, i64 16, i64 11, i64 13, i64 12, i64 16, i64 15, i64 9, i64 11, i64 11, i64 15, i64 14, i64 11, i64 13, i64 13, i64 16, i64 16, i64 10, i64 11, i64 12, i64 15, i64 15, i64 14, i64 15, i64 15, i64 17, i64 17, i64 13, i64 13, i64 15, i64 15, i64 17, i64 10, i64 11, i64 12, i64 15, i64 15, i64 11, i64 13, i64 13, i64 16, i64 19, i64 11, i64 13, i64 12, i64 17, i64 17, i64 14, i64 16, i64 15, i64 19, i64 17, i64 14, i64 15, i64 15, i64 18, i64 18, i64 8, i64 10, i64 10, i64 14, i64 14, i64 10, i64 12, i64 11, i64 16, i64 15, i64 9, i64 11, i64 11, i64 15, i64 16, i64 14, i64 16, i64 15, i64 17, i64 17, i64 13, i64 14, i64 14, i64 18, i64 17, i64 9, i64 11, i64 11, i64 16, i64 15, i64 11, i64 13, i64 13, i64 16, i64 18, i64 11, i64 13, i64 13, i64 17, i64 16, i64 15, i64 16, i64 17, i64 18, i64 0, i64 15, i64 15, i64 16, i64 0, i64 18, i64 9, i64 11, i64 11, i64 16, i64 15, i64 10, i64 13, i64 12, i64 17, i64 15, i64 11, i64 13, i64 13, i64 16, i64 17, i64 14, i64 18, i64 15, i64 19, i64 18, i64 15, i64 16, i64 16, i64 19, i64 18, i64 13, i64 15, i64 15, i64 19, i64 17, i64 13, i64 15, i64 15, i64 18, i64 18, i64 14, i64 15, i64 15, i64 19, i64 0, i64 17, i64 18, i64 0, i64 19, i64 19, i64 16, i64 17, i64 17, i64 0, i64 18, i64 12, i64 14, i64 13, i64 18, i64 17, i64 13, i64 15, i64 13, i64 19, i64 18, i64 14, i64 15, i64 15, i64 19, i64 19, i64 16, i64 17, i64 15, i64 0, i64 17, i64 16, i64 19, i64 17, i64 19, i64 18, i64 8, i64 10, i64 10, i64 14, i64 14, i64 10, i64 11, i64 11, i64 15, i64 15, i64 10, i64 11, i64 11, i64 16, i64 16, i64 13, i64 15, i64 15, i64 17, i64 16, i64 14, i64 15, i64 15, i64 18, i64 19, i64 9, i64 11, i64 11, i64 16, i64 15, i64 11, i64 13, i64 13, i64 19, i64 16, i64 10, i64 12, i64 13, i64 15, i64 17, i64 15, i64 15, i64 15, i64 19, i64 19, i64 15, i64 16, i64 16, i64 17, i64 0, i64 9, i64 11, i64 11, i64 16, i64 16, i64 11, i64 13, i64 13, i64 16, i64 17, i64 11, i64 13, i64 13, i64 18, i64 18, i64 14, i64 16, i64 15, i64 18, i64 18, i64 15, i64 17, i64 16, i64 19, i64 0, i64 12, i64 14, i64 14, i64 17, i64 18, i64 13, i64 16, i64 16, i64 18, i64 18, i64 13, i64 14, i64 15, i64 17, i64 0, i64 16, i64 17, i64 17, i64 0, i64 0, i64 16, i64 15, i64 0, i64 19, i64 17, i64 12, i64 15, i64 14, i64 17, i64 18, i64 14, i64 15, i64 16, i64 0, i64 18, i64 14, i64 16, i64 16, i64 18, i64 0, i64 16, i64 17, i64 17, i64 0, i64 0, i64 17, i64 19, i64 17, i64 19, i64 0], align 16
@_vq_quantlist__44u5__p3_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44u5__p3_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u5__p3_0, ptr @_vq_quantmap__44u5__p3_0, i32 5, i32 5 }, align 8
@_vq_quantthresh__44u5__p3_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44u5__p3_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__44u5__p4_0 = internal global [625 x i64] [i64 4, i64 6, i64 6, i64 8, i64 8, i64 6, i64 7, i64 6, i64 9, i64 9, i64 6, i64 6, i64 7, i64 9, i64 9, i64 8, i64 9, i64 9, i64 11, i64 11, i64 8, i64 9, i64 9, i64 11, i64 11, i64 6, i64 7, i64 7, i64 9, i64 9, i64 7, i64 8, i64 8, i64 10, i64 10, i64 6, i64 7, i64 8, i64 9, i64 10, i64 9, i64 10, i64 10, i64 11, i64 11, i64 9, i64 9, i64 10, i64 11, i64 12, i64 6, i64 7, i64 7, i64 9, i64 9, i64 6, i64 8, i64 7, i64 10, i64 9, i64 7, i64 8, i64 8, i64 10, i64 10, i64 9, i64 10, i64 9, i64 12, i64 11, i64 9, i64 10, i64 10, i64 12, i64 11, i64 8, i64 9, i64 9, i64 12, i64 11, i64 9, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 11, i64 12, i64 12, i64 13, i64 13, i64 11, i64 11, i64 12, i64 12, i64 13, i64 8, i64 9, i64 9, i64 11, i64 11, i64 9, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 11, i64 12, i64 11, i64 13, i64 13, i64 11, i64 12, i64 12, i64 14, i64 13, i64 6, i64 7, i64 7, i64 9, i64 9, i64 7, i64 8, i64 7, i64 10, i64 10, i64 7, i64 7, i64 8, i64 9, i64 10, i64 9, i64 10, i64 10, i64 12, i64 11, i64 9, i64 10, i64 10, i64 11, i64 11, i64 7, i64 8, i64 8, i64 10, i64 10, i64 8, i64 8, i64 9, i64 10, i64 11, i64 8, i64 8, i64 8, i64 11, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 10, i64 10, i64 11, i64 12, i64 12, i64 6, i64 7, i64 7, i64 10, i64 10, i64 7, i64 8, i64 8, i64 11, i64 10, i64 8, i64 8, i64 9, i64 10, i64 11, i64 10, i64 11, i64 10, i64 13, i64 11, i64 10, i64 10, i64 11, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 10, i64 12, i64 13, i64 10, i64 11, i64 11, i64 13, i64 13, i64 12, i64 11, i64 12, i64 11, i64 14, i64 12, i64 12, i64 13, i64 13, i64 14, i64 9, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 11, i64 12, i64 13, i64 11, i64 12, i64 11, i64 14, i64 12, i64 12, i64 12, i64 12, i64 14, i64 14, i64 6, i64 7, i64 7, i64 9, i64 9, i64 7, i64 8, i64 7, i64 10, i64 10, i64 7, i64 7, i64 8, i64 10, i64 10, i64 9, i64 10, i64 10, i64 11, i64 11, i64 9, i64 10, i64 10, i64 12, i64 12, i64 6, i64 7, i64 7, i64 10, i64 10, i64 8, i64 9, i64 8, i64 11, i64 10, i64 7, i64 8, i64 8, i64 10, i64 11, i64 10, i64 10, i64 11, i64 12, i64 12, i64 10, i64 10, i64 11, i64 11, i64 13, i64 7, i64 8, i64 8, i64 10, i64 10, i64 8, i64 8, i64 8, i64 10, i64 11, i64 8, i64 9, i64 8, i64 11, i64 10, i64 10, i64 11, i64 10, i64 12, i64 12, i64 10, i64 11, i64 10, i64 12, i64 11, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 11, i64 11, i64 13, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 12, i64 12, i64 12, i64 14, i64 14, i64 11, i64 11, i64 12, i64 12, i64 14, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 11, i64 11, i64 12, i64 12, i64 10, i64 10, i64 10, i64 12, i64 12, i64 12, i64 13, i64 12, i64 14, i64 14, i64 11, i64 12, i64 11, i64 14, i64 11, i64 8, i64 9, i64 9, i64 11, i64 11, i64 9, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 11, i64 12, i64 12, i64 14, i64 14, i64 11, i64 12, i64 12, i64 13, i64 13, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 11, i64 12, i64 13, i64 10, i64 11, i64 10, i64 13, i64 12, i64 12, i64 12, i64 13, i64 14, i64 14, i64 12, i64 12, i64 12, i64 14, i64 13, i64 9, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 13, i64 12, i64 10, i64 10, i64 11, i64 12, i64 13, i64 12, i64 13, i64 12, i64 14, i64 13, i64 12, i64 12, i64 13, i64 13, i64 14, i64 11, i64 12, i64 11, i64 14, i64 13, i64 11, i64 11, i64 12, i64 13, i64 14, i64 12, i64 13, i64 12, i64 14, i64 14, i64 13, i64 12, i64 14, i64 11, i64 16, i64 13, i64 14, i64 14, i64 16, i64 15, i64 11, i64 11, i64 11, i64 13, i64 13, i64 11, i64 12, i64 11, i64 14, i64 13, i64 12, i64 12, i64 13, i64 14, i64 15, i64 12, i64 14, i64 12, i64 16, i64 12, i64 14, i64 14, i64 14, i64 16, i64 16, i64 8, i64 9, i64 9, i64 11, i64 11, i64 9, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 11, i64 12, i64 12, i64 13, i64 13, i64 12, i64 12, i64 12, i64 14, i64 14, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 11, i64 10, i64 13, i64 12, i64 9, i64 10, i64 10, i64 12, i64 13, i64 12, i64 12, i64 12, i64 14, i64 13, i64 12, i64 12, i64 13, i64 13, i64 15, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 11, i64 12, i64 13, i64 10, i64 11, i64 10, i64 13, i64 12, i64 12, i64 13, i64 12, i64 14, i64 14, i64 12, i64 13, i64 12, i64 14, i64 13, i64 11, i64 11, i64 11, i64 13, i64 13, i64 12, i64 13, i64 12, i64 14, i64 14, i64 11, i64 11, i64 12, i64 13, i64 14, i64 13, i64 14, i64 14, i64 16, i64 15, i64 13, i64 12, i64 14, i64 12, i64 15, i64 11, i64 12, i64 12, i64 13, i64 14, i64 12, i64 12, i64 13, i64 14, i64 14, i64 11, i64 12, i64 11, i64 14, i64 13, i64 13, i64 14, i64 14, i64 15, i64 16, i64 13, i64 14, i64 11, i64 16, i64 11], align 16
@_vq_quantlist__44u5__p4_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44u5__p4_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u5__p4_0, ptr @_vq_quantmap__44u5__p4_0, i32 5, i32 5 }, align 8
@_vq_quantthresh__44u5__p4_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44u5__p4_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__44u5__p5_0 = internal global [81 x i64] [i64 2, i64 4, i64 3, i64 6, i64 6, i64 8, i64 7, i64 10, i64 10, i64 3, i64 5, i64 5, i64 8, i64 7, i64 8, i64 8, i64 11, i64 11, i64 3, i64 5, i64 5, i64 7, i64 8, i64 8, i64 8, i64 10, i64 11, i64 6, i64 8, i64 7, i64 9, i64 9, i64 10, i64 9, i64 12, i64 11, i64 7, i64 7, i64 8, i64 9, i64 9, i64 9, i64 10, i64 11, i64 12, i64 8, i64 8, i64 8, i64 10, i64 9, i64 11, i64 11, i64 13, i64 12, i64 8, i64 8, i64 8, i64 9, i64 10, i64 11, i64 12, i64 12, i64 13, i64 10, i64 11, i64 10, i64 12, i64 11, i64 13, i64 12, i64 14, i64 14, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 14, i64 14], align 16
@_vq_quantlist__44u5__p5_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__44u5__p5_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u5__p5_0, ptr @_vq_quantmap__44u5__p5_0, i32 9, i32 9 }, align 8
@_vq_quantthresh__44u5__p5_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__44u5__p5_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__44u5__p6_0 = internal global [81 x i64] [i64 3, i64 4, i64 4, i64 5, i64 6, i64 7, i64 7, i64 9, i64 9, i64 4, i64 5, i64 4, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 4, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 6, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 10, i64 10, i64 6, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 10, i64 10, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 11, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 10, i64 11, i64 11, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11], align 16
@_vq_quantlist__44u5__p6_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__44u5__p6_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u5__p6_0, ptr @_vq_quantmap__44u5__p6_0, i32 9, i32 9 }, align 8
@_vq_quantthresh__44u5__p6_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__44u5__p6_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__44u5__p7_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 5, i64 7, i64 7, i64 5, i64 7, i64 7, i64 5, i64 9, i64 8, i64 8, i64 11, i64 10, i64 7, i64 10, i64 10, i64 5, i64 9, i64 9, i64 8, i64 10, i64 10, i64 8, i64 10, i64 11, i64 4, i64 9, i64 9, i64 9, i64 11, i64 11, i64 9, i64 12, i64 11, i64 8, i64 11, i64 11, i64 11, i64 12, i64 12, i64 10, i64 12, i64 12, i64 7, i64 11, i64 11, i64 10, i64 12, i64 12, i64 10, i64 12, i64 12, i64 4, i64 9, i64 9, i64 9, i64 11, i64 11, i64 9, i64 11, i64 11, i64 7, i64 11, i64 11, i64 10, i64 12, i64 12, i64 10, i64 11, i64 12, i64 8, i64 11, i64 11, i64 10, i64 12, i64 12, i64 11, i64 12, i64 12], align 16
@_vq_quantlist__44u5__p7_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44u5__p7_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u5__p7_0, ptr @_vq_quantmap__44u5__p7_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__44u5__p7_0 = internal global [2 x float] [float -5.500000e+00, float 5.500000e+00], align 4
@_vq_quantmap__44u5__p7_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44u5__p7_1 = internal global [121 x i64] [i64 2, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 4, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 9, i64 8, i64 9, i64 8, i64 4, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10], align 16
@_vq_quantlist__44u5__p7_1 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__44u5__p7_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u5__p7_1, ptr @_vq_quantmap__44u5__p7_1, i32 11, i32 11 }, align 8
@_vq_quantthresh__44u5__p7_1 = internal global [10 x float] [float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00], align 16
@_vq_quantmap__44u5__p7_1 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_lengthlist__44u5__p8_0 = internal global [121 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 4, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 4, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 6, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 12, i64 11, i64 13, i64 12, i64 6, i64 7, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 12, i64 12, i64 12, i64 14, i64 13, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 13, i64 14, i64 13, i64 10, i64 11, i64 10, i64 12, i64 12, i64 13, i64 13, i64 14, i64 13, i64 15, i64 14, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 13, i64 13, i64 15, i64 15, i64 11, i64 12, i64 12, i64 13, i64 12, i64 13, i64 14, i64 14, i64 14, i64 15, i64 14, i64 11, i64 11, i64 12, i64 13, i64 13, i64 13, i64 14, i64 14, i64 14, i64 15, i64 15], align 16
@_vq_quantlist__44u5__p8_0 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__44u5__p8_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u5__p8_0, ptr @_vq_quantmap__44u5__p8_0, i32 11, i32 11 }, align 8
@_vq_quantthresh__44u5__p8_0 = internal global [10 x float] [float -4.950000e+01, float -3.850000e+01, float -2.750000e+01, float -1.650000e+01, float -5.500000e+00, float 5.500000e+00, float 1.650000e+01, float 2.750000e+01, float 3.850000e+01, float 4.950000e+01], align 16
@_vq_quantmap__44u5__p8_0 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_lengthlist__44u5__p8_1 = internal global [121 x i64] [i64 3, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 5, i64 6, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 5, i64 6, i64 6, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 6, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8], align 16
@_vq_quantlist__44u5__p8_1 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__44u5__p8_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u5__p8_1, ptr @_vq_quantmap__44u5__p8_1, i32 11, i32 11 }, align 8
@_vq_quantthresh__44u5__p8_1 = internal global [10 x float] [float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00], align 16
@_vq_quantmap__44u5__p8_1 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_lengthlist__44u5__p9_0 = internal global [169 x i64] [i64 1, i64 3, i64 3, i64 12, i64 10, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 3, i64 8, i64 9, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 4, i64 9, i64 9, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 11, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 9, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11], align 16
@_vq_quantlist__44u5__p9_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44u5__p9_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u5__p9_0, ptr @_vq_quantmap__44u5__p9_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__44u5__p9_0 = internal global [12 x float] [float -1.402500e+03, float -1.147500e+03, float -8.925000e+02, float -6.375000e+02, float -3.825000e+02, float -1.275000e+02, float 1.275000e+02, float 3.825000e+02, float 6.375000e+02, float 8.925000e+02, float 1.147500e+03, float 1.402500e+03], align 16
@_vq_quantmap__44u5__p9_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44u5__p9_1 = internal global [225 x i64] [i64 1, i64 4, i64 4, i64 7, i64 7, i64 8, i64 9, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 5, i64 6, i64 6, i64 9, i64 8, i64 10, i64 10, i64 9, i64 8, i64 9, i64 9, i64 10, i64 9, i64 11, i64 10, i64 4, i64 6, i64 6, i64 8, i64 9, i64 9, i64 10, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 10, i64 7, i64 8, i64 8, i64 10, i64 10, i64 11, i64 11, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 7, i64 8, i64 8, i64 10, i64 10, i64 11, i64 11, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 12, i64 8, i64 9, i64 10, i64 11, i64 10, i64 12, i64 12, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 8, i64 9, i64 9, i64 11, i64 11, i64 11, i64 12, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 11, i64 12, i64 12, i64 12, i64 13, i64 13, i64 13, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 11, i64 12, i64 12, i64 13, i64 13, i64 12, i64 13, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 11, i64 12, i64 13, i64 14, i64 14, i64 15, i64 15, i64 15, i64 14, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 14, i64 14, i64 9, i64 10, i64 11, i64 12, i64 11, i64 12, i64 13, i64 14, i64 13, i64 14, i64 13, i64 14, i64 14, i64 14, i64 14, i64 9, i64 11, i64 11, i64 11, i64 11, i64 12, i64 13, i64 13, i64 13, i64 14, i64 13, i64 15, i64 15, i64 14, i64 14, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 14, i64 14, i64 14, i64 15, i64 15, i64 15, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 13, i64 13, i64 15, i64 14, i64 15, i64 14, i64 14, i64 14], align 16
@_vq_quantlist__44u5__p9_1 = internal global [15 x i64] [i64 7, i64 6, i64 8, i64 5, i64 9, i64 4, i64 10, i64 3, i64 11, i64 2, i64 12, i64 1, i64 13, i64 0, i64 14], align 16
@_vq_auxt__44u5__p9_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u5__p9_1, ptr @_vq_quantmap__44u5__p9_1, i32 15, i32 15 }, align 8
@_vq_quantthresh__44u5__p9_1 = internal global [14 x float] [float -1.105000e+02, float -9.350000e+01, float -7.650000e+01, float -5.950000e+01, float -4.250000e+01, float -2.550000e+01, float -8.500000e+00, float 8.500000e+00, float 2.550000e+01, float 4.250000e+01, float 5.950000e+01, float 7.650000e+01, float 9.350000e+01, float 1.105000e+02], align 16
@_vq_quantmap__44u5__p9_1 = internal global [15 x i64] [i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14], align 16
@_vq_lengthlist__44u5__p9_2 = internal global [289 x i64] [i64 3, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 9, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 9, i64 9, i64 9, i64 10, i64 10, i64 9, i64 9], align 16
@_vq_quantlist__44u5__p9_2 = internal global [17 x i64] [i64 8, i64 7, i64 9, i64 6, i64 10, i64 5, i64 11, i64 4, i64 12, i64 3, i64 13, i64 2, i64 14, i64 1, i64 15, i64 0, i64 16], align 16
@_vq_auxt__44u5__p9_2 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u5__p9_2, ptr @_vq_quantmap__44u5__p9_2, i32 17, i32 17 }, align 8
@_vq_quantthresh__44u5__p9_2 = internal global [16 x float] [float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00], align 16
@_vq_quantmap__44u5__p9_2 = internal global [17 x i64] [i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16], align 16
@_huff_lengthlist__44u5__long = internal global [100 x i64] [i64 3, i64 8, i64 13, i64 12, i64 14, i64 13, i64 16, i64 11, i64 12, i64 13, i64 5, i64 4, i64 5, i64 6, i64 8, i64 9, i64 10, i64 9, i64 12, i64 12, i64 10, i64 5, i64 4, i64 6, i64 6, i64 8, i64 9, i64 10, i64 14, i64 16, i64 10, i64 6, i64 6, i64 6, i64 6, i64 7, i64 9, i64 8, i64 12, i64 13, i64 13, i64 7, i64 5, i64 6, i64 4, i64 6, i64 6, i64 7, i64 11, i64 16, i64 10, i64 7, i64 7, i64 7, i64 6, i64 6, i64 7, i64 7, i64 11, i64 14, i64 14, i64 9, i64 8, i64 8, i64 5, i64 6, i64 6, i64 7, i64 11, i64 16, i64 9, i64 8, i64 8, i64 8, i64 6, i64 6, i64 6, i64 4, i64 7, i64 12, i64 11, i64 10, i64 12, i64 11, i64 10, i64 9, i64 10, i64 5, i64 6, i64 10, i64 10, i64 13, i64 15, i64 15, i64 15, i64 15, i64 14, i64 8, i64 7, i64 9], align 16
@_huff_book__44u6__short = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__44u6__short, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_resbook_44u_6 = internal global %struct.static_bookblock { [12 x [3 x ptr]] [[3 x ptr] zeroinitializer, [3 x ptr] [ptr null, ptr null, ptr @_44u6__p1_0], [3 x ptr] [ptr null, ptr null, ptr @_44u6__p2_0], [3 x ptr] [ptr null, ptr null, ptr @_44u6__p3_0], [3 x ptr] [ptr null, ptr null, ptr @_44u6__p4_0], [3 x ptr] [ptr null, ptr null, ptr @_44u6__p5_0], [3 x ptr] [ptr null, ptr null, ptr @_44u6__p6_0], [3 x ptr] [ptr @_44u6__p7_0, ptr @_44u6__p7_1, ptr null], [3 x ptr] [ptr @_44u6__p8_0, ptr @_44u6__p8_1, ptr null], [3 x ptr] [ptr @_44u6__p9_0, ptr @_44u6__p9_1, ptr @_44u6__p9_2], [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer] }, align 8
@_huff_book__44u6__long = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__44u6__long, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_lengthlist__44u6__short = internal global [100 x i64] [i64 5, i64 11, i64 15, i64 14, i64 17, i64 14, i64 17, i64 15, i64 17, i64 17, i64 4, i64 6, i64 9, i64 9, i64 14, i64 9, i64 17, i64 10, i64 15, i64 17, i64 6, i64 6, i64 5, i64 7, i64 7, i64 9, i64 11, i64 10, i64 15, i64 17, i64 6, i64 8, i64 8, i64 10, i64 9, i64 11, i64 14, i64 13, i64 16, i64 17, i64 7, i64 6, i64 5, i64 7, i64 5, i64 7, i64 5, i64 8, i64 15, i64 17, i64 9, i64 8, i64 8, i64 9, i64 8, i64 10, i64 10, i64 11, i64 14, i64 17, i64 10, i64 8, i64 7, i64 9, i64 4, i64 7, i64 3, i64 5, i64 11, i64 17, i64 10, i64 10, i64 10, i64 10, i64 6, i64 9, i64 4, i64 5, i64 11, i64 17, i64 16, i64 16, i64 13, i64 15, i64 5, i64 10, i64 4, i64 3, i64 9, i64 16, i64 17, i64 17, i64 14, i64 17, i64 7, i64 11, i64 6, i64 6, i64 11, i64 17], align 16
@_44u6__p1_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__44u6__p1_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__44u6__p1_0, ptr null, ptr @_vq_auxt__44u6__p1_0, ptr null, i32 0 }, align 8
@_44u6__p2_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__44u6__p2_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__44u6__p2_0, ptr null, ptr @_vq_auxt__44u6__p2_0, ptr null, i32 0 }, align 8
@_44u6__p3_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__44u6__p3_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44u6__p3_0, ptr null, ptr @_vq_auxt__44u6__p3_0, ptr null, i32 0 }, align 8
@_44u6__p4_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__44u6__p4_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44u6__p4_0, ptr null, ptr @_vq_auxt__44u6__p4_0, ptr null, i32 0 }, align 8
@_44u6__p5_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__44u6__p5_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44u6__p5_0, ptr null, ptr @_vq_auxt__44u6__p5_0, ptr null, i32 0 }, align 8
@_44u6__p6_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__44u6__p6_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44u6__p6_0, ptr null, ptr @_vq_auxt__44u6__p6_0, ptr null, i32 0 }, align 8
@_44u6__p7_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__44u6__p7_0, i32 1, i64 -529137664, i64 1618345984, i32 2, i32 0, ptr @_vq_quantlist__44u6__p7_0, ptr null, ptr @_vq_auxt__44u6__p7_0, ptr null, i32 0 }, align 8
@_44u6__p7_1 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__44u6__p7_1, i32 1, i64 -531365888, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44u6__p7_1, ptr null, ptr @_vq_auxt__44u6__p7_1, ptr null, i32 0 }, align 8
@_44u6__p8_0 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__44u6__p8_0, i32 1, i64 -524582912, i64 1618345984, i32 4, i32 0, ptr @_vq_quantlist__44u6__p8_0, ptr null, ptr @_vq_auxt__44u6__p8_0, ptr null, i32 0 }, align 8
@_44u6__p8_1 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__44u6__p8_1, i32 1, i64 -531365888, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44u6__p8_1, ptr null, ptr @_vq_auxt__44u6__p8_1, ptr null, i32 0 }, align 8
@_44u6__p9_0 = internal global %struct.static_codebook { i64 2, i64 225, ptr @_vq_lengthlist__44u6__p9_0, i32 1, i64 -514071552, i64 1627381760, i32 4, i32 0, ptr @_vq_quantlist__44u6__p9_0, ptr null, ptr @_vq_auxt__44u6__p9_0, ptr null, i32 0 }, align 8
@_44u6__p9_1 = internal global %struct.static_codebook { i64 2, i64 225, ptr @_vq_lengthlist__44u6__p9_1, i32 1, i64 -522338304, i64 1620115456, i32 4, i32 0, ptr @_vq_quantlist__44u6__p9_1, ptr null, ptr @_vq_auxt__44u6__p9_1, ptr null, i32 0 }, align 8
@_44u6__p9_2 = internal global %struct.static_codebook { i64 2, i64 289, ptr @_vq_lengthlist__44u6__p9_2, i32 1, i64 -529530880, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__44u6__p9_2, ptr null, ptr @_vq_auxt__44u6__p9_2, ptr null, i32 0 }, align 8
@_vq_lengthlist__44u6__p1_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 4, i64 8, i64 7, i64 5, i64 7, i64 7, i64 5, i64 8, i64 8, i64 8, i64 10, i64 10, i64 7, i64 9, i64 10, i64 5, i64 8, i64 8, i64 7, i64 10, i64 9, i64 8, i64 10, i64 10, i64 5, i64 8, i64 8, i64 8, i64 11, i64 10, i64 8, i64 10, i64 10, i64 8, i64 11, i64 10, i64 10, i64 12, i64 13, i64 10, i64 13, i64 13, i64 7, i64 10, i64 10, i64 10, i64 13, i64 11, i64 10, i64 13, i64 13, i64 5, i64 8, i64 8, i64 8, i64 11, i64 10, i64 8, i64 10, i64 10, i64 7, i64 10, i64 10, i64 10, i64 13, i64 13, i64 9, i64 11, i64 13, i64 8, i64 10, i64 11, i64 10, i64 13, i64 13, i64 10, i64 13, i64 12], align 16
@_vq_quantlist__44u6__p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44u6__p1_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u6__p1_0, ptr @_vq_quantmap__44u6__p1_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__44u6__p1_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__44u6__p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44u6__p2_0 = internal global [81 x i64] [i64 3, i64 5, i64 4, i64 5, i64 6, i64 6, i64 5, i64 6, i64 6, i64 5, i64 6, i64 6, i64 6, i64 7, i64 8, i64 6, i64 7, i64 8, i64 5, i64 6, i64 6, i64 6, i64 8, i64 7, i64 6, i64 8, i64 7, i64 5, i64 6, i64 6, i64 6, i64 8, i64 7, i64 6, i64 7, i64 8, i64 6, i64 8, i64 8, i64 8, i64 8, i64 9, i64 8, i64 9, i64 9, i64 6, i64 7, i64 7, i64 7, i64 9, i64 8, i64 8, i64 9, i64 9, i64 5, i64 6, i64 6, i64 6, i64 8, i64 7, i64 6, i64 7, i64 8, i64 6, i64 7, i64 7, i64 8, i64 9, i64 9, i64 7, i64 8, i64 9, i64 6, i64 8, i64 8, i64 8, i64 9, i64 9, i64 8, i64 9, i64 8], align 16
@_vq_quantlist__44u6__p2_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44u6__p2_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u6__p2_0, ptr @_vq_quantmap__44u6__p2_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__44u6__p2_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__44u6__p2_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44u6__p3_0 = internal global [625 x i64] [i64 2, i64 4, i64 5, i64 8, i64 8, i64 5, i64 7, i64 6, i64 9, i64 9, i64 5, i64 6, i64 7, i64 9, i64 9, i64 8, i64 10, i64 9, i64 13, i64 12, i64 8, i64 9, i64 10, i64 12, i64 13, i64 5, i64 7, i64 7, i64 10, i64 9, i64 7, i64 9, i64 9, i64 11, i64 11, i64 7, i64 8, i64 9, i64 10, i64 11, i64 10, i64 11, i64 11, i64 13, i64 14, i64 9, i64 10, i64 11, i64 13, i64 13, i64 5, i64 7, i64 7, i64 9, i64 9, i64 7, i64 9, i64 8, i64 11, i64 10, i64 7, i64 9, i64 9, i64 11, i64 11, i64 9, i64 11, i64 10, i64 14, i64 13, i64 10, i64 11, i64 11, i64 14, i64 13, i64 8, i64 10, i64 10, i64 14, i64 13, i64 10, i64 12, i64 11, i64 15, i64 14, i64 9, i64 11, i64 11, i64 15, i64 14, i64 13, i64 15, i64 14, i64 20, i64 16, i64 13, i64 13, i64 14, i64 16, i64 16, i64 8, i64 10, i64 10, i64 13, i64 14, i64 9, i64 11, i64 11, i64 14, i64 15, i64 10, i64 11, i64 12, i64 14, i64 15, i64 13, i64 13, i64 14, i64 16, i64 16, i64 13, i64 14, i64 14, i64 16, i64 17, i64 5, i64 7, i64 7, i64 10, i64 10, i64 7, i64 9, i64 9, i64 11, i64 11, i64 7, i64 9, i64 9, i64 11, i64 11, i64 10, i64 11, i64 11, i64 15, i64 14, i64 10, i64 11, i64 11, i64 14, i64 14, i64 7, i64 9, i64 9, i64 12, i64 11, i64 9, i64 11, i64 11, i64 12, i64 13, i64 9, i64 11, i64 11, i64 13, i64 13, i64 11, i64 12, i64 13, i64 14, i64 16, i64 11, i64 12, i64 13, i64 16, i64 16, i64 6, i64 9, i64 8, i64 11, i64 11, i64 8, i64 11, i64 10, i64 13, i64 12, i64 9, i64 10, i64 11, i64 12, i64 13, i64 11, i64 13, i64 11, i64 15, i64 14, i64 11, i64 13, i64 13, i64 15, i64 15, i64 10, i64 12, i64 11, i64 15, i64 14, i64 11, i64 12, i64 13, i64 17, i64 16, i64 11, i64 13, i64 13, i64 16, i64 17, i64 14, i64 15, i64 16, i64 17, i64 17, i64 14, i64 15, i64 16, i64 20, i64 0, i64 9, i64 11, i64 11, i64 14, i64 15, i64 10, i64 13, i64 12, i64 16, i64 16, i64 11, i64 13, i64 13, i64 17, i64 17, i64 13, i64 15, i64 14, i64 17, i64 15, i64 15, i64 16, i64 16, i64 0, i64 0, i64 5, i64 7, i64 7, i64 10, i64 10, i64 7, i64 9, i64 9, i64 11, i64 11, i64 7, i64 8, i64 9, i64 11, i64 11, i64 10, i64 11, i64 11, i64 14, i64 14, i64 10, i64 11, i64 11, i64 14, i64 14, i64 6, i64 9, i64 9, i64 11, i64 11, i64 9, i64 11, i64 11, i64 14, i64 12, i64 8, i64 10, i64 11, i64 12, i64 13, i64 11, i64 13, i64 13, i64 16, i64 16, i64 11, i64 11, i64 13, i64 14, i64 16, i64 7, i64 9, i64 9, i64 11, i64 12, i64 9, i64 11, i64 11, i64 13, i64 13, i64 9, i64 11, i64 11, i64 13, i64 12, i64 11, i64 13, i64 12, i64 16, i64 16, i64 12, i64 13, i64 12, i64 16, i64 14, i64 9, i64 11, i64 11, i64 16, i64 15, i64 11, i64 13, i64 13, i64 17, i64 15, i64 10, i64 12, i64 12, i64 15, i64 16, i64 14, i64 16, i64 16, i64 0, i64 17, i64 13, i64 14, i64 15, i64 15, i64 17, i64 10, i64 11, i64 12, i64 15, i64 15, i64 11, i64 13, i64 13, i64 17, i64 17, i64 11, i64 13, i64 13, i64 15, i64 16, i64 14, i64 15, i64 15, i64 19, i64 18, i64 14, i64 15, i64 15, i64 19, i64 16, i64 8, i64 10, i64 10, i64 14, i64 14, i64 10, i64 12, i64 11, i64 15, i64 16, i64 10, i64 11, i64 11, i64 15, i64 17, i64 13, i64 16, i64 15, i64 19, i64 19, i64 13, i64 15, i64 14, i64 17, i64 17, i64 9, i64 11, i64 12, i64 15, i64 16, i64 11, i64 13, i64 13, i64 18, i64 19, i64 11, i64 13, i64 13, i64 16, i64 17, i64 16, i64 16, i64 17, i64 0, i64 0, i64 15, i64 15, i64 16, i64 0, i64 19, i64 9, i64 11, i64 11, i64 15, i64 16, i64 10, i64 13, i64 12, i64 17, i64 15, i64 11, i64 13, i64 13, i64 16, i64 17, i64 14, i64 17, i64 15, i64 18, i64 17, i64 15, i64 16, i64 15, i64 18, i64 0, i64 13, i64 14, i64 15, i64 0, i64 19, i64 14, i64 16, i64 16, i64 0, i64 17, i64 15, i64 16, i64 16, i64 0, i64 17, i64 16, i64 17, i64 0, i64 0, i64 0, i64 16, i64 17, i64 19, i64 0, i64 0, i64 12, i64 14, i64 14, i64 17, i64 17, i64 13, i64 15, i64 13, i64 0, i64 19, i64 14, i64 16, i64 16, i64 18, i64 19, i64 16, i64 18, i64 15, i64 19, i64 18, i64 17, i64 18, i64 17, i64 19, i64 0, i64 8, i64 10, i64 10, i64 14, i64 13, i64 10, i64 11, i64 11, i64 16, i64 15, i64 10, i64 11, i64 11, i64 15, i64 15, i64 13, i64 15, i64 15, i64 19, i64 18, i64 14, i64 15, i64 16, i64 0, i64 18, i64 9, i64 11, i64 11, i64 15, i64 14, i64 11, i64 13, i64 13, i64 0, i64 16, i64 10, i64 12, i64 13, i64 15, i64 17, i64 14, i64 16, i64 16, i64 0, i64 18, i64 15, i64 16, i64 17, i64 17, i64 0, i64 9, i64 11, i64 11, i64 16, i64 15, i64 11, i64 13, i64 13, i64 16, i64 16, i64 11, i64 14, i64 13, i64 18, i64 18, i64 15, i64 17, i64 15, i64 18, i64 17, i64 15, i64 16, i64 18, i64 0, i64 0, i64 12, i64 14, i64 14, i64 18, i64 19, i64 14, i64 15, i64 16, i64 0, i64 18, i64 13, i64 14, i64 15, i64 18, i64 0, i64 17, i64 17, i64 17, i64 0, i64 0, i64 16, i64 15, i64 18, i64 17, i64 0, i64 12, i64 14, i64 15, i64 17, i64 19, i64 14, i64 16, i64 16, i64 19, i64 0, i64 14, i64 17, i64 16, i64 0, i64 18, i64 17, i64 19, i64 17, i64 0, i64 0, i64 16, i64 18, i64 17, i64 0, i64 17], align 16
@_vq_quantlist__44u6__p3_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44u6__p3_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u6__p3_0, ptr @_vq_quantmap__44u6__p3_0, i32 5, i32 5 }, align 8
@_vq_quantthresh__44u6__p3_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44u6__p3_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__44u6__p4_0 = internal global [625 x i64] [i64 4, i64 6, i64 6, i64 8, i64 8, i64 6, i64 7, i64 6, i64 9, i64 9, i64 6, i64 6, i64 7, i64 9, i64 9, i64 8, i64 9, i64 9, i64 11, i64 11, i64 8, i64 9, i64 9, i64 11, i64 11, i64 6, i64 7, i64 7, i64 9, i64 9, i64 7, i64 8, i64 8, i64 10, i64 10, i64 6, i64 7, i64 8, i64 9, i64 10, i64 9, i64 10, i64 10, i64 11, i64 12, i64 9, i64 9, i64 10, i64 11, i64 12, i64 6, i64 7, i64 7, i64 9, i64 9, i64 7, i64 8, i64 7, i64 10, i64 9, i64 7, i64 8, i64 8, i64 10, i64 10, i64 9, i64 10, i64 9, i64 12, i64 11, i64 9, i64 10, i64 10, i64 12, i64 11, i64 8, i64 9, i64 9, i64 11, i64 11, i64 9, i64 10, i64 10, i64 12, i64 12, i64 9, i64 9, i64 10, i64 12, i64 12, i64 11, i64 12, i64 12, i64 13, i64 13, i64 11, i64 11, i64 12, i64 12, i64 13, i64 8, i64 9, i64 9, i64 11, i64 11, i64 9, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 11, i64 12, i64 11, i64 13, i64 13, i64 11, i64 12, i64 12, i64 13, i64 13, i64 6, i64 7, i64 7, i64 9, i64 9, i64 7, i64 8, i64 7, i64 10, i64 9, i64 7, i64 7, i64 8, i64 9, i64 10, i64 9, i64 10, i64 10, i64 12, i64 11, i64 9, i64 10, i64 10, i64 11, i64 12, i64 7, i64 8, i64 8, i64 10, i64 10, i64 8, i64 8, i64 9, i64 10, i64 10, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 11, i64 12, i64 12, i64 10, i64 10, i64 11, i64 12, i64 12, i64 6, i64 7, i64 7, i64 10, i64 10, i64 7, i64 8, i64 8, i64 11, i64 10, i64 8, i64 8, i64 9, i64 10, i64 11, i64 10, i64 11, i64 10, i64 12, i64 11, i64 10, i64 10, i64 11, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 11, i64 12, i64 12, i64 10, i64 11, i64 10, i64 13, i64 12, i64 12, i64 12, i64 12, i64 12, i64 14, i64 12, i64 12, i64 12, i64 13, i64 14, i64 9, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 11, i64 12, i64 13, i64 11, i64 12, i64 11, i64 14, i64 12, i64 12, i64 12, i64 13, i64 14, i64 14, i64 6, i64 7, i64 7, i64 9, i64 9, i64 7, i64 8, i64 7, i64 10, i64 9, i64 7, i64 7, i64 8, i64 10, i64 10, i64 9, i64 10, i64 10, i64 12, i64 11, i64 9, i64 10, i64 10, i64 11, i64 12, i64 6, i64 7, i64 7, i64 10, i64 10, i64 8, i64 9, i64 8, i64 11, i64 10, i64 7, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 11, i64 12, i64 12, i64 10, i64 10, i64 10, i64 11, i64 12, i64 7, i64 8, i64 8, i64 10, i64 10, i64 8, i64 8, i64 8, i64 10, i64 10, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 11, i64 10, i64 12, i64 12, i64 10, i64 11, i64 10, i64 12, i64 11, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 11, i64 10, i64 13, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 12, i64 12, i64 12, i64 14, i64 14, i64 11, i64 11, i64 12, i64 12, i64 13, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 11, i64 11, i64 12, i64 12, i64 10, i64 11, i64 10, i64 12, i64 12, i64 12, i64 12, i64 12, i64 14, i64 14, i64 12, i64 12, i64 12, i64 14, i64 12, i64 8, i64 9, i64 9, i64 11, i64 11, i64 9, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 11, i64 12, i64 12, i64 13, i64 13, i64 11, i64 12, i64 12, i64 13, i64 13, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 11, i64 12, i64 13, i64 10, i64 11, i64 10, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 14, i64 12, i64 12, i64 12, i64 14, i64 14, i64 9, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 10, i64 12, i64 12, i64 12, i64 12, i64 12, i64 14, i64 13, i64 12, i64 12, i64 12, i64 14, i64 14, i64 11, i64 12, i64 12, i64 13, i64 13, i64 11, i64 12, i64 12, i64 14, i64 14, i64 12, i64 12, i64 12, i64 14, i64 14, i64 13, i64 12, i64 14, i64 12, i64 15, i64 13, i64 14, i64 14, i64 15, i64 15, i64 11, i64 11, i64 11, i64 13, i64 13, i64 11, i64 12, i64 11, i64 14, i64 13, i64 12, i64 12, i64 12, i64 14, i64 14, i64 12, i64 14, i64 12, i64 15, i64 12, i64 13, i64 14, i64 14, i64 15, i64 16, i64 8, i64 9, i64 9, i64 11, i64 11, i64 9, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 11, i64 12, i64 12, i64 13, i64 13, i64 11, i64 12, i64 12, i64 13, i64 14, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 11, i64 10, i64 13, i64 12, i64 9, i64 10, i64 10, i64 12, i64 13, i64 12, i64 12, i64 12, i64 15, i64 14, i64 12, i64 12, i64 13, i64 13, i64 14, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 11, i64 12, i64 12, i64 10, i64 11, i64 10, i64 12, i64 12, i64 12, i64 13, i64 12, i64 14, i64 14, i64 12, i64 13, i64 12, i64 14, i64 13, i64 11, i64 11, i64 11, i64 13, i64 13, i64 12, i64 12, i64 12, i64 14, i64 13, i64 11, i64 11, i64 12, i64 13, i64 14, i64 13, i64 14, i64 14, i64 15, i64 15, i64 12, i64 12, i64 14, i64 12, i64 15, i64 11, i64 12, i64 12, i64 13, i64 14, i64 12, i64 12, i64 12, i64 14, i64 14, i64 11, i64 12, i64 12, i64 14, i64 14, i64 13, i64 14, i64 14, i64 15, i64 15, i64 13, i64 14, i64 12, i64 16, i64 12], align 16
@_vq_quantlist__44u6__p4_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44u6__p4_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u6__p4_0, ptr @_vq_quantmap__44u6__p4_0, i32 5, i32 5 }, align 8
@_vq_quantthresh__44u6__p4_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44u6__p4_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__44u6__p5_0 = internal global [81 x i64] [i64 2, i64 3, i64 3, i64 6, i64 6, i64 8, i64 8, i64 10, i64 10, i64 4, i64 5, i64 5, i64 8, i64 7, i64 8, i64 8, i64 11, i64 11, i64 3, i64 5, i64 5, i64 7, i64 8, i64 8, i64 8, i64 11, i64 11, i64 6, i64 8, i64 7, i64 10, i64 9, i64 10, i64 9, i64 12, i64 12, i64 6, i64 7, i64 8, i64 9, i64 10, i64 9, i64 10, i64 12, i64 12, i64 8, i64 8, i64 8, i64 10, i64 9, i64 12, i64 11, i64 13, i64 13, i64 8, i64 8, i64 8, i64 9, i64 10, i64 11, i64 12, i64 12, i64 13, i64 10, i64 11, i64 11, i64 12, i64 11, i64 13, i64 12, i64 14, i64 14, i64 10, i64 10, i64 11, i64 11, i64 12, i64 13, i64 13, i64 14, i64 14], align 16
@_vq_quantlist__44u6__p5_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__44u6__p5_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u6__p5_0, ptr @_vq_quantmap__44u6__p5_0, i32 9, i32 9 }, align 8
@_vq_quantthresh__44u6__p5_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__44u6__p5_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__44u6__p6_0 = internal global [81 x i64] [i64 3, i64 4, i64 4, i64 5, i64 5, i64 7, i64 7, i64 9, i64 9, i64 4, i64 5, i64 4, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 4, i64 4, i64 5, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 10, i64 10, i64 6, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 10, i64 10, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 11, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11], align 16
@_vq_quantlist__44u6__p6_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__44u6__p6_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u6__p6_0, ptr @_vq_quantmap__44u6__p6_0, i32 9, i32 9 }, align 8
@_vq_quantthresh__44u6__p6_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__44u6__p6_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__44u6__p7_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 5, i64 7, i64 7, i64 5, i64 7, i64 7, i64 5, i64 9, i64 8, i64 8, i64 11, i64 10, i64 8, i64 11, i64 10, i64 5, i64 8, i64 9, i64 7, i64 10, i64 10, i64 8, i64 10, i64 11, i64 4, i64 9, i64 9, i64 9, i64 12, i64 11, i64 9, i64 11, i64 12, i64 8, i64 11, i64 12, i64 11, i64 12, i64 13, i64 10, i64 13, i64 12, i64 7, i64 12, i64 11, i64 10, i64 12, i64 12, i64 10, i64 13, i64 13, i64 4, i64 9, i64 9, i64 8, i64 11, i64 11, i64 9, i64 11, i64 12, i64 7, i64 12, i64 12, i64 10, i64 13, i64 13, i64 10, i64 12, i64 13, i64 8, i64 12, i64 12, i64 10, i64 13, i64 13, i64 11, i64 13, i64 12], align 16
@_vq_quantlist__44u6__p7_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44u6__p7_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u6__p7_0, ptr @_vq_quantmap__44u6__p7_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__44u6__p7_0 = internal global [2 x float] [float -5.500000e+00, float 5.500000e+00], align 4
@_vq_quantmap__44u6__p7_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44u6__p7_1 = internal global [121 x i64] [i64 3, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 4, i64 5, i64 5, i64 6, i64 6, i64 8, i64 7, i64 8, i64 8, i64 8, i64 8, i64 4, i64 5, i64 5, i64 6, i64 6, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 6, i64 7, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 6, i64 6, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 7, i64 8, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10], align 16
@_vq_quantlist__44u6__p7_1 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__44u6__p7_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u6__p7_1, ptr @_vq_quantmap__44u6__p7_1, i32 11, i32 11 }, align 8
@_vq_quantthresh__44u6__p7_1 = internal global [10 x float] [float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00], align 16
@_vq_quantmap__44u6__p7_1 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_lengthlist__44u6__p8_0 = internal global [121 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 4, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 4, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 6, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 6, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 13, i64 13, i64 13, i64 14, i64 14, i64 11, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 14, i64 14, i64 15, i64 14, i64 11, i64 11, i64 11, i64 13, i64 13, i64 14, i64 13, i64 14, i64 14, i64 15, i64 14], align 16
@_vq_quantlist__44u6__p8_0 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__44u6__p8_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u6__p8_0, ptr @_vq_quantmap__44u6__p8_0, i32 11, i32 11 }, align 8
@_vq_quantthresh__44u6__p8_0 = internal global [10 x float] [float -4.950000e+01, float -3.850000e+01, float -2.750000e+01, float -1.650000e+01, float -5.500000e+00, float 5.500000e+00, float 1.650000e+01, float 2.750000e+01, float 3.850000e+01, float 4.950000e+01], align 16
@_vq_quantmap__44u6__p8_0 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_lengthlist__44u6__p8_1 = internal global [121 x i64] [i64 3, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 5, i64 6, i64 6, i64 7, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 5, i64 6, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 6, i64 7, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8], align 16
@_vq_quantlist__44u6__p8_1 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__44u6__p8_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u6__p8_1, ptr @_vq_quantmap__44u6__p8_1, i32 11, i32 11 }, align 8
@_vq_quantthresh__44u6__p8_1 = internal global [10 x float] [float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00], align 16
@_vq_quantmap__44u6__p8_1 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_lengthlist__44u6__p9_0 = internal global [225 x i64] [i64 1, i64 3, i64 3, i64 10, i64 12, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 3, i64 9, i64 9, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 12, i64 12, i64 4, i64 9, i64 9, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 9, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 9, i64 11, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12], align 16
@_vq_quantlist__44u6__p9_0 = internal global [15 x i64] [i64 7, i64 6, i64 8, i64 5, i64 9, i64 4, i64 10, i64 3, i64 11, i64 2, i64 12, i64 1, i64 13, i64 0, i64 14], align 16
@_vq_auxt__44u6__p9_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u6__p9_0, ptr @_vq_quantmap__44u6__p9_0, i32 15, i32 15 }, align 8
@_vq_quantthresh__44u6__p9_0 = internal global [14 x float] [float -1.657500e+03, float -1.402500e+03, float -1.147500e+03, float -8.925000e+02, float -6.375000e+02, float -3.825000e+02, float -1.275000e+02, float 1.275000e+02, float 3.825000e+02, float 6.375000e+02, float 8.925000e+02, float 1.147500e+03, float 1.402500e+03, float 1.657500e+03], align 16
@_vq_quantmap__44u6__p9_0 = internal global [15 x i64] [i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14], align 16
@_vq_lengthlist__44u6__p9_1 = internal global [225 x i64] [i64 1, i64 4, i64 4, i64 7, i64 7, i64 8, i64 8, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 5, i64 6, i64 6, i64 8, i64 8, i64 10, i64 10, i64 9, i64 9, i64 10, i64 9, i64 10, i64 9, i64 10, i64 10, i64 4, i64 6, i64 6, i64 8, i64 9, i64 10, i64 10, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 7, i64 9, i64 8, i64 10, i64 10, i64 11, i64 11, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 7, i64 8, i64 8, i64 10, i64 10, i64 11, i64 11, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 8, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 8, i64 9, i64 9, i64 11, i64 11, i64 12, i64 12, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 13, i64 12, i64 13, i64 12, i64 13, i64 13, i64 13, i64 13, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 13, i64 12, i64 13, i64 12, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 12, i64 13, i64 13, i64 14, i64 13, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 14, i64 14, i64 9, i64 11, i64 10, i64 11, i64 11, i64 12, i64 13, i64 13, i64 12, i64 13, i64 13, i64 15, i64 13, i64 14, i64 14, i64 9, i64 10, i64 10, i64 11, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 13, i64 14, i64 14, i64 14, i64 14, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 12, i64 13, i64 13, i64 14, i64 14, i64 14, i64 14, i64 14, i64 15, i64 10, i64 11, i64 11, i64 11, i64 12, i64 13, i64 13, i64 13, i64 13, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14], align 16
@_vq_quantlist__44u6__p9_1 = internal global [15 x i64] [i64 7, i64 6, i64 8, i64 5, i64 9, i64 4, i64 10, i64 3, i64 11, i64 2, i64 12, i64 1, i64 13, i64 0, i64 14], align 16
@_vq_auxt__44u6__p9_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u6__p9_1, ptr @_vq_quantmap__44u6__p9_1, i32 15, i32 15 }, align 8
@_vq_quantthresh__44u6__p9_1 = internal global [14 x float] [float -1.105000e+02, float -9.350000e+01, float -7.650000e+01, float -5.950000e+01, float -4.250000e+01, float -2.550000e+01, float -8.500000e+00, float 8.500000e+00, float 2.550000e+01, float 4.250000e+01, float 5.950000e+01, float 7.650000e+01, float 9.350000e+01, float 1.105000e+02], align 16
@_vq_quantmap__44u6__p9_1 = internal global [15 x i64] [i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14], align 16
@_vq_lengthlist__44u6__p9_2 = internal global [289 x i64] [i64 3, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 9, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 9, i64 9, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 9, i64 9, i64 9, i64 10, i64 9], align 16
@_vq_quantlist__44u6__p9_2 = internal global [17 x i64] [i64 8, i64 7, i64 9, i64 6, i64 10, i64 5, i64 11, i64 4, i64 12, i64 3, i64 13, i64 2, i64 14, i64 1, i64 15, i64 0, i64 16], align 16
@_vq_auxt__44u6__p9_2 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u6__p9_2, ptr @_vq_quantmap__44u6__p9_2, i32 17, i32 17 }, align 8
@_vq_quantthresh__44u6__p9_2 = internal global [16 x float] [float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00], align 16
@_vq_quantmap__44u6__p9_2 = internal global [17 x i64] [i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16], align 16
@_huff_lengthlist__44u6__long = internal global [100 x i64] [i64 3, i64 9, i64 14, i64 13, i64 15, i64 13, i64 16, i64 12, i64 12, i64 12, i64 5, i64 4, i64 6, i64 7, i64 8, i64 9, i64 10, i64 10, i64 13, i64 12, i64 10, i64 5, i64 5, i64 6, i64 6, i64 9, i64 9, i64 10, i64 14, i64 14, i64 10, i64 6, i64 6, i64 7, i64 6, i64 8, i64 9, i64 9, i64 13, i64 12, i64 13, i64 7, i64 5, i64 6, i64 4, i64 6, i64 6, i64 7, i64 11, i64 15, i64 10, i64 8, i64 7, i64 7, i64 6, i64 7, i64 7, i64 7, i64 11, i64 13, i64 16, i64 10, i64 8, i64 8, i64 5, i64 6, i64 4, i64 6, i64 10, i64 14, i64 9, i64 9, i64 9, i64 8, i64 6, i64 6, i64 5, i64 4, i64 7, i64 11, i64 11, i64 11, i64 12, i64 11, i64 10, i64 9, i64 9, i64 5, i64 5, i64 9, i64 10, i64 13, i64 14, i64 14, i64 14, i64 14, i64 15, i64 8, i64 7, i64 8], align 16
@_huff_book__44u7__short = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__44u7__short, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_resbook_44u_7 = internal global %struct.static_bookblock { [12 x [3 x ptr]] [[3 x ptr] zeroinitializer, [3 x ptr] [ptr null, ptr null, ptr @_44u7__p1_0], [3 x ptr] [ptr null, ptr null, ptr @_44u7__p2_0], [3 x ptr] [ptr null, ptr null, ptr @_44u7__p3_0], [3 x ptr] [ptr null, ptr null, ptr @_44u7__p4_0], [3 x ptr] [ptr null, ptr null, ptr @_44u7__p5_0], [3 x ptr] [ptr null, ptr null, ptr @_44u7__p6_0], [3 x ptr] [ptr @_44u7__p7_0, ptr @_44u7__p7_1, ptr null], [3 x ptr] [ptr @_44u7__p8_0, ptr @_44u7__p8_1, ptr null], [3 x ptr] [ptr @_44u7__p9_0, ptr @_44u7__p9_1, ptr @_44u7__p9_2], [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer] }, align 8
@_huff_book__44u7__long = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__44u7__long, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_lengthlist__44u7__short = internal global [100 x i64] [i64 6, i64 14, i64 18, i64 18, i64 18, i64 18, i64 17, i64 17, i64 17, i64 17, i64 4, i64 8, i64 11, i64 12, i64 13, i64 11, i64 13, i64 11, i64 16, i64 17, i64 6, i64 7, i64 8, i64 9, i64 8, i64 9, i64 12, i64 9, i64 14, i64 17, i64 6, i64 9, i64 11, i64 12, i64 12, i64 12, i64 15, i64 12, i64 17, i64 17, i64 6, i64 6, i64 6, i64 8, i64 5, i64 7, i64 7, i64 8, i64 14, i64 17, i64 7, i64 9, i64 9, i64 11, i64 8, i64 10, i64 10, i64 11, i64 14, i64 16, i64 8, i64 7, i64 7, i64 8, i64 5, i64 7, i64 4, i64 5, i64 11, i64 17, i64 9, i64 8, i64 10, i64 9, i64 7, i64 9, i64 4, i64 2, i64 9, i64 16, i64 15, i64 14, i64 16, i64 14, i64 8, i64 14, i64 4, i64 3, i64 7, i64 16, i64 17, i64 17, i64 16, i64 17, i64 9, i64 15, i64 6, i64 5, i64 10, i64 17], align 16
@_44u7__p1_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__44u7__p1_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__44u7__p1_0, ptr null, ptr @_vq_auxt__44u7__p1_0, ptr null, i32 0 }, align 8
@_44u7__p2_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__44u7__p2_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__44u7__p2_0, ptr null, ptr @_vq_auxt__44u7__p2_0, ptr null, i32 0 }, align 8
@_44u7__p3_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__44u7__p3_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44u7__p3_0, ptr null, ptr @_vq_auxt__44u7__p3_0, ptr null, i32 0 }, align 8
@_44u7__p4_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__44u7__p4_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44u7__p4_0, ptr null, ptr @_vq_auxt__44u7__p4_0, ptr null, i32 0 }, align 8
@_44u7__p5_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__44u7__p5_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44u7__p5_0, ptr null, ptr @_vq_auxt__44u7__p5_0, ptr null, i32 0 }, align 8
@_44u7__p6_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__44u7__p6_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44u7__p6_0, ptr null, ptr @_vq_auxt__44u7__p6_0, ptr null, i32 0 }, align 8
@_44u7__p7_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__44u7__p7_0, i32 1, i64 -529137664, i64 1618345984, i32 2, i32 0, ptr @_vq_quantlist__44u7__p7_0, ptr null, ptr @_vq_auxt__44u7__p7_0, ptr null, i32 0 }, align 8
@_44u7__p7_1 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__44u7__p7_1, i32 1, i64 -531365888, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44u7__p7_1, ptr null, ptr @_vq_auxt__44u7__p7_1, ptr null, i32 0 }, align 8
@_44u7__p8_0 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__44u7__p8_0, i32 1, i64 -524582912, i64 1618345984, i32 4, i32 0, ptr @_vq_quantlist__44u7__p8_0, ptr null, ptr @_vq_auxt__44u7__p8_0, ptr null, i32 0 }, align 8
@_44u7__p8_1 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__44u7__p8_1, i32 1, i64 -531365888, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44u7__p8_1, ptr null, ptr @_vq_auxt__44u7__p8_1, ptr null, i32 0 }, align 8
@_44u7__p9_0 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__44u7__p9_0, i32 1, i64 -512171520, i64 1630791680, i32 4, i32 0, ptr @_vq_quantlist__44u7__p9_0, ptr null, ptr @_vq_auxt__44u7__p9_0, ptr null, i32 0 }, align 8
@_44u7__p9_1 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44u7__p9_1, i32 1, i64 -518889472, i64 1622704128, i32 4, i32 0, ptr @_vq_quantlist__44u7__p9_1, ptr null, ptr @_vq_auxt__44u7__p9_1, ptr null, i32 0 }, align 8
@_44u7__p9_2 = internal global %struct.static_codebook { i64 1, i64 49, ptr @_vq_lengthlist__44u7__p9_2, i32 1, i64 -526909440, i64 1611661312, i32 6, i32 0, ptr @_vq_quantlist__44u7__p9_2, ptr null, ptr @_vq_auxt__44u7__p9_2, ptr null, i32 0 }, align 8
@_vq_lengthlist__44u7__p1_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 5, i64 7, i64 7, i64 4, i64 7, i64 7, i64 5, i64 8, i64 8, i64 8, i64 10, i64 10, i64 7, i64 10, i64 10, i64 5, i64 8, i64 8, i64 7, i64 10, i64 9, i64 8, i64 10, i64 10, i64 5, i64 8, i64 8, i64 8, i64 11, i64 10, i64 8, i64 10, i64 10, i64 8, i64 11, i64 10, i64 10, i64 12, i64 13, i64 11, i64 13, i64 13, i64 7, i64 10, i64 10, i64 10, i64 13, i64 11, i64 11, i64 13, i64 13, i64 5, i64 8, i64 8, i64 8, i64 11, i64 10, i64 8, i64 10, i64 10, i64 7, i64 10, i64 10, i64 11, i64 13, i64 13, i64 10, i64 11, i64 13, i64 8, i64 11, i64 11, i64 10, i64 13, i64 13, i64 10, i64 13, i64 12], align 16
@_vq_quantlist__44u7__p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44u7__p1_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u7__p1_0, ptr @_vq_quantmap__44u7__p1_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__44u7__p1_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__44u7__p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44u7__p2_0 = internal global [81 x i64] [i64 3, i64 5, i64 4, i64 5, i64 6, i64 6, i64 5, i64 6, i64 6, i64 5, i64 6, i64 6, i64 6, i64 7, i64 8, i64 6, i64 7, i64 7, i64 5, i64 6, i64 6, i64 6, i64 7, i64 7, i64 6, i64 8, i64 8, i64 5, i64 6, i64 6, i64 6, i64 8, i64 7, i64 6, i64 7, i64 8, i64 6, i64 8, i64 8, i64 8, i64 9, i64 9, i64 8, i64 9, i64 9, i64 6, i64 7, i64 7, i64 7, i64 9, i64 8, i64 8, i64 9, i64 9, i64 5, i64 6, i64 6, i64 6, i64 8, i64 7, i64 6, i64 7, i64 8, i64 6, i64 7, i64 7, i64 8, i64 9, i64 9, i64 7, i64 8, i64 9, i64 6, i64 8, i64 8, i64 8, i64 9, i64 9, i64 8, i64 9, i64 9], align 16
@_vq_quantlist__44u7__p2_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44u7__p2_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u7__p2_0, ptr @_vq_quantmap__44u7__p2_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__44u7__p2_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__44u7__p2_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44u7__p3_0 = internal global [625 x i64] [i64 2, i64 5, i64 5, i64 8, i64 8, i64 5, i64 7, i64 6, i64 9, i64 9, i64 5, i64 6, i64 7, i64 9, i64 9, i64 8, i64 9, i64 9, i64 12, i64 12, i64 8, i64 9, i64 9, i64 12, i64 12, i64 5, i64 7, i64 7, i64 10, i64 9, i64 7, i64 9, i64 9, i64 11, i64 11, i64 6, i64 8, i64 9, i64 10, i64 11, i64 10, i64 11, i64 11, i64 13, i64 14, i64 9, i64 10, i64 11, i64 13, i64 13, i64 5, i64 7, i64 7, i64 9, i64 9, i64 6, i64 9, i64 8, i64 11, i64 10, i64 7, i64 9, i64 9, i64 11, i64 11, i64 9, i64 11, i64 10, i64 13, i64 13, i64 10, i64 11, i64 11, i64 14, i64 13, i64 8, i64 10, i64 10, i64 14, i64 13, i64 10, i64 11, i64 11, i64 16, i64 14, i64 9, i64 11, i64 11, i64 14, i64 14, i64 13, i64 15, i64 14, i64 17, i64 16, i64 12, i64 13, i64 14, i64 16, i64 15, i64 8, i64 9, i64 10, i64 13, i64 14, i64 9, i64 11, i64 11, i64 14, i64 14, i64 10, i64 11, i64 11, i64 14, i64 15, i64 13, i64 13, i64 14, i64 17, i64 17, i64 13, i64 14, i64 15, i64 16, i64 17, i64 5, i64 7, i64 7, i64 10, i64 10, i64 7, i64 9, i64 8, i64 11, i64 11, i64 7, i64 8, i64 9, i64 11, i64 11, i64 10, i64 11, i64 11, i64 14, i64 14, i64 10, i64 11, i64 11, i64 14, i64 14, i64 7, i64 9, i64 9, i64 11, i64 11, i64 9, i64 11, i64 11, i64 13, i64 13, i64 9, i64 11, i64 11, i64 13, i64 13, i64 11, i64 12, i64 13, i64 15, i64 17, i64 11, i64 12, i64 13, i64 16, i64 18, i64 6, i64 8, i64 8, i64 11, i64 11, i64 8, i64 10, i64 10, i64 13, i64 12, i64 9, i64 11, i64 11, i64 12, i64 13, i64 11, i64 13, i64 11, i64 16, i64 14, i64 11, i64 13, i64 12, i64 16, i64 16, i64 10, i64 11, i64 11, i64 15, i64 15, i64 11, i64 13, i64 13, i64 16, i64 16, i64 11, i64 13, i64 13, i64 18, i64 16, i64 14, i64 14, i64 15, i64 17, i64 16, i64 14, i64 15, i64 17, i64 19, i64 0, i64 9, i64 11, i64 11, i64 14, i64 15, i64 10, i64 12, i64 12, i64 15, i64 17, i64 11, i64 13, i64 13, i64 15, i64 17, i64 14, i64 15, i64 13, i64 0, i64 15, i64 15, i64 17, i64 16, i64 18, i64 0, i64 5, i64 7, i64 7, i64 9, i64 10, i64 7, i64 9, i64 9, i64 11, i64 11, i64 7, i64 8, i64 9, i64 11, i64 11, i64 10, i64 11, i64 11, i64 14, i64 14, i64 10, i64 11, i64 11, i64 14, i64 14, i64 6, i64 8, i64 9, i64 11, i64 11, i64 9, i64 11, i64 11, i64 14, i64 13, i64 8, i64 10, i64 10, i64 11, i64 14, i64 11, i64 13, i64 13, i64 17, i64 15, i64 11, i64 12, i64 13, i64 14, i64 16, i64 7, i64 9, i64 9, i64 11, i64 11, i64 9, i64 11, i64 11, i64 13, i64 12, i64 9, i64 11, i64 11, i64 12, i64 13, i64 11, i64 13, i64 12, i64 15, i64 15, i64 11, i64 13, i64 12, i64 16, i64 15, i64 9, i64 11, i64 11, i64 15, i64 15, i64 11, i64 12, i64 13, i64 16, i64 15, i64 10, i64 11, i64 12, i64 16, i64 15, i64 15, i64 16, i64 16, i64 0, i64 0, i64 14, i64 13, i64 15, i64 16, i64 19, i64 9, i64 11, i64 12, i64 15, i64 15, i64 11, i64 13, i64 13, i64 17, i64 16, i64 11, i64 13, i64 12, i64 15, i64 17, i64 14, i64 16, i64 16, i64 18, i64 0, i64 15, i64 15, i64 16, i64 18, i64 17, i64 8, i64 10, i64 10, i64 13, i64 14, i64 10, i64 11, i64 11, i64 15, i64 16, i64 10, i64 11, i64 11, i64 15, i64 16, i64 14, i64 15, i64 15, i64 17, i64 19, i64 14, i64 14, i64 15, i64 19, i64 19, i64 9, i64 11, i64 11, i64 16, i64 15, i64 11, i64 13, i64 13, i64 17, i64 17, i64 11, i64 13, i64 13, i64 17, i64 17, i64 15, i64 17, i64 16, i64 0, i64 0, i64 15, i64 17, i64 17, i64 0, i64 17, i64 9, i64 11, i64 11, i64 15, i64 15, i64 11, i64 13, i64 12, i64 16, i64 16, i64 11, i64 13, i64 13, i64 18, i64 17, i64 15, i64 16, i64 15, i64 19, i64 19, i64 14, i64 16, i64 18, i64 17, i64 19, i64 13, i64 15, i64 15, i64 0, i64 18, i64 14, i64 16, i64 17, i64 17, i64 18, i64 14, i64 16, i64 16, i64 19, i64 19, i64 18, i64 19, i64 19, i64 0, i64 0, i64 16, i64 17, i64 18, i64 19, i64 0, i64 12, i64 14, i64 14, i64 16, i64 18, i64 13, i64 16, i64 14, i64 0, i64 19, i64 14, i64 16, i64 17, i64 19, i64 0, i64 16, i64 19, i64 16, i64 19, i64 17, i64 17, i64 18, i64 18, i64 0, i64 0, i64 8, i64 10, i64 10, i64 14, i64 13, i64 9, i64 11, i64 11, i64 15, i64 14, i64 10, i64 11, i64 12, i64 14, i64 16, i64 13, i64 15, i64 14, i64 19, i64 19, i64 14, i64 16, i64 16, i64 18, i64 17, i64 9, i64 11, i64 11, i64 16, i64 15, i64 11, i64 13, i64 13, i64 0, i64 17, i64 10, i64 12, i64 13, i64 15, i64 16, i64 15, i64 18, i64 16, i64 19, i64 19, i64 14, i64 15, i64 16, i64 18, i64 18, i64 9, i64 11, i64 12, i64 15, i64 15, i64 11, i64 13, i64 13, i64 17, i64 19, i64 11, i64 13, i64 13, i64 17, i64 17, i64 15, i64 17, i64 16, i64 19, i64 19, i64 15, i64 17, i64 16, i64 0, i64 0, i64 12, i64 14, i64 14, i64 0, i64 19, i64 14, i64 16, i64 15, i64 0, i64 19, i64 13, i64 14, i64 16, i64 19, i64 0, i64 16, i64 18, i64 18, i64 0, i64 0, i64 16, i64 16, i64 17, i64 17, i64 0, i64 13, i64 14, i64 14, i64 17, i64 0, i64 14, i64 17, i64 16, i64 0, i64 19, i64 14, i64 16, i64 16, i64 19, i64 18, i64 17, i64 19, i64 17, i64 0, i64 0, i64 18, i64 18, i64 17, i64 0, i64 0], align 16
@_vq_quantlist__44u7__p3_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44u7__p3_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u7__p3_0, ptr @_vq_quantmap__44u7__p3_0, i32 5, i32 5 }, align 8
@_vq_quantthresh__44u7__p3_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44u7__p3_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__44u7__p4_0 = internal global [625 x i64] [i64 5, i64 6, i64 6, i64 8, i64 8, i64 6, i64 7, i64 6, i64 9, i64 9, i64 6, i64 6, i64 7, i64 9, i64 9, i64 8, i64 9, i64 9, i64 11, i64 11, i64 8, i64 9, i64 9, i64 11, i64 11, i64 6, i64 7, i64 7, i64 9, i64 9, i64 7, i64 8, i64 7, i64 10, i64 10, i64 6, i64 7, i64 8, i64 9, i64 10, i64 9, i64 10, i64 10, i64 11, i64 12, i64 9, i64 9, i64 10, i64 11, i64 12, i64 6, i64 7, i64 7, i64 9, i64 9, i64 6, i64 7, i64 7, i64 10, i64 9, i64 7, i64 7, i64 8, i64 10, i64 10, i64 9, i64 10, i64 9, i64 12, i64 11, i64 9, i64 10, i64 10, i64 12, i64 11, i64 8, i64 9, i64 9, i64 11, i64 11, i64 9, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 11, i64 12, i64 11, i64 12, i64 12, i64 13, i64 13, i64 11, i64 11, i64 12, i64 12, i64 13, i64 8, i64 9, i64 9, i64 11, i64 11, i64 9, i64 10, i64 10, i64 12, i64 11, i64 9, i64 10, i64 10, i64 12, i64 12, i64 11, i64 12, i64 11, i64 13, i64 12, i64 11, i64 12, i64 12, i64 13, i64 14, i64 6, i64 7, i64 7, i64 9, i64 9, i64 7, i64 8, i64 7, i64 10, i64 9, i64 7, i64 7, i64 8, i64 9, i64 10, i64 9, i64 10, i64 10, i64 12, i64 11, i64 9, i64 10, i64 10, i64 11, i64 12, i64 7, i64 8, i64 8, i64 10, i64 10, i64 8, i64 8, i64 8, i64 10, i64 10, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 11, i64 12, i64 12, i64 10, i64 10, i64 11, i64 12, i64 12, i64 6, i64 7, i64 7, i64 10, i64 10, i64 7, i64 8, i64 8, i64 10, i64 10, i64 8, i64 8, i64 8, i64 10, i64 11, i64 9, i64 10, i64 10, i64 12, i64 11, i64 10, i64 10, i64 11, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 10, i64 12, i64 12, i64 10, i64 11, i64 10, i64 12, i64 12, i64 12, i64 12, i64 12, i64 13, i64 14, i64 12, i64 12, i64 12, i64 13, i64 14, i64 9, i64 10, i64 10, i64 11, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 11, i64 12, i64 12, i64 11, i64 12, i64 11, i64 14, i64 12, i64 12, i64 12, i64 12, i64 14, i64 14, i64 6, i64 7, i64 7, i64 9, i64 9, i64 7, i64 8, i64 7, i64 10, i64 9, i64 7, i64 7, i64 8, i64 9, i64 10, i64 9, i64 10, i64 10, i64 12, i64 11, i64 9, i64 10, i64 10, i64 11, i64 12, i64 6, i64 7, i64 7, i64 10, i64 10, i64 8, i64 8, i64 8, i64 11, i64 10, i64 7, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 10, i64 11, i64 12, i64 7, i64 8, i64 8, i64 10, i64 10, i64 8, i64 8, i64 8, i64 10, i64 10, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 11, i64 10, i64 12, i64 12, i64 10, i64 11, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 11, i64 10, i64 13, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 12, i64 12, i64 12, i64 14, i64 14, i64 11, i64 11, i64 12, i64 12, i64 14, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 10, i64 12, i64 12, i64 10, i64 11, i64 10, i64 12, i64 12, i64 12, i64 12, i64 12, i64 14, i64 14, i64 12, i64 12, i64 12, i64 14, i64 13, i64 8, i64 9, i64 9, i64 11, i64 11, i64 9, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 11, i64 12, i64 12, i64 14, i64 13, i64 11, i64 12, i64 12, i64 13, i64 13, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 10, i64 12, i64 12, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 13, i64 14, i64 14, i64 12, i64 12, i64 12, i64 14, i64 14, i64 9, i64 10, i64 9, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 11, i64 12, i64 12, i64 12, i64 12, i64 11, i64 14, i64 13, i64 12, i64 12, i64 12, i64 13, i64 14, i64 11, i64 12, i64 12, i64 13, i64 13, i64 12, i64 12, i64 12, i64 14, i64 14, i64 12, i64 13, i64 12, i64 14, i64 14, i64 13, i64 13, i64 14, i64 13, i64 15, i64 14, i64 14, i64 14, i64 15, i64 15, i64 11, i64 11, i64 11, i64 13, i64 13, i64 11, i64 12, i64 11, i64 14, i64 13, i64 12, i64 12, i64 12, i64 14, i64 14, i64 12, i64 13, i64 12, i64 15, i64 12, i64 13, i64 14, i64 14, i64 15, i64 15, i64 8, i64 9, i64 9, i64 11, i64 11, i64 9, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 11, i64 12, i64 12, i64 13, i64 13, i64 11, i64 12, i64 12, i64 13, i64 14, i64 9, i64 10, i64 10, i64 12, i64 11, i64 10, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 12, i64 13, i64 12, i64 14, i64 13, i64 11, i64 12, i64 12, i64 13, i64 14, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 10, i64 12, i64 12, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 12, i64 14, i64 14, i64 12, i64 13, i64 12, i64 14, i64 13, i64 11, i64 11, i64 11, i64 13, i64 13, i64 12, i64 12, i64 12, i64 14, i64 13, i64 11, i64 11, i64 12, i64 13, i64 14, i64 13, i64 14, i64 14, i64 15, i64 15, i64 13, i64 12, i64 13, i64 12, i64 15, i64 11, i64 12, i64 12, i64 13, i64 14, i64 12, i64 12, i64 12, i64 14, i64 14, i64 11, i64 12, i64 12, i64 14, i64 14, i64 13, i64 14, i64 14, i64 15, i64 15, i64 13, i64 14, i64 13, i64 15, i64 13], align 16
@_vq_quantlist__44u7__p4_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44u7__p4_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u7__p4_0, ptr @_vq_quantmap__44u7__p4_0, i32 5, i32 5 }, align 8
@_vq_quantthresh__44u7__p4_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44u7__p4_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__44u7__p5_0 = internal global [81 x i64] [i64 2, i64 3, i64 3, i64 6, i64 6, i64 8, i64 8, i64 10, i64 10, i64 3, i64 5, i64 5, i64 8, i64 7, i64 8, i64 8, i64 11, i64 11, i64 4, i64 5, i64 5, i64 7, i64 8, i64 8, i64 8, i64 11, i64 11, i64 6, i64 8, i64 7, i64 9, i64 9, i64 10, i64 9, i64 12, i64 12, i64 6, i64 7, i64 8, i64 9, i64 10, i64 9, i64 10, i64 12, i64 12, i64 8, i64 8, i64 8, i64 10, i64 9, i64 12, i64 11, i64 13, i64 13, i64 8, i64 8, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 13, i64 10, i64 11, i64 11, i64 12, i64 11, i64 13, i64 13, i64 14, i64 14, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14], align 16
@_vq_quantlist__44u7__p5_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__44u7__p5_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u7__p5_0, ptr @_vq_quantmap__44u7__p5_0, i32 9, i32 9 }, align 8
@_vq_quantthresh__44u7__p5_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__44u7__p5_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__44u7__p6_0 = internal global [81 x i64] [i64 4, i64 4, i64 4, i64 5, i64 5, i64 7, i64 7, i64 9, i64 9, i64 4, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 4, i64 4, i64 5, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 5, i64 6, i64 6, i64 6, i64 7, i64 8, i64 8, i64 9, i64 9, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11], align 16
@_vq_quantlist__44u7__p6_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__44u7__p6_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u7__p6_0, ptr @_vq_quantmap__44u7__p6_0, i32 9, i32 9 }, align 8
@_vq_quantthresh__44u7__p6_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__44u7__p6_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__44u7__p7_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 5, i64 7, i64 7, i64 5, i64 7, i64 7, i64 5, i64 9, i64 8, i64 8, i64 10, i64 10, i64 8, i64 10, i64 10, i64 5, i64 8, i64 9, i64 8, i64 10, i64 10, i64 8, i64 10, i64 10, i64 4, i64 9, i64 9, i64 9, i64 11, i64 12, i64 8, i64 12, i64 11, i64 8, i64 12, i64 11, i64 11, i64 12, i64 13, i64 10, i64 13, i64 13, i64 7, i64 12, i64 11, i64 10, i64 13, i64 12, i64 10, i64 13, i64 13, i64 4, i64 9, i64 9, i64 8, i64 11, i64 12, i64 9, i64 11, i64 12, i64 7, i64 11, i64 12, i64 10, i64 13, i64 13, i64 10, i64 12, i64 13, i64 8, i64 11, i64 12, i64 10, i64 13, i64 13, i64 10, i64 13, i64 12], align 16
@_vq_quantlist__44u7__p7_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44u7__p7_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u7__p7_0, ptr @_vq_quantmap__44u7__p7_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__44u7__p7_0 = internal global [2 x float] [float -5.500000e+00, float 5.500000e+00], align 4
@_vq_quantmap__44u7__p7_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44u7__p7_1 = internal global [121 x i64] [i64 3, i64 5, i64 4, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 5, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 5, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 6, i64 6, i64 6, i64 7, i64 7, i64 8, i64 7, i64 8, i64 8, i64 8, i64 8, i64 6, i64 6, i64 6, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 8, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9], align 16
@_vq_quantlist__44u7__p7_1 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__44u7__p7_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u7__p7_1, ptr @_vq_quantmap__44u7__p7_1, i32 11, i32 11 }, align 8
@_vq_quantthresh__44u7__p7_1 = internal global [10 x float] [float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00], align 16
@_vq_quantmap__44u7__p7_1 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_lengthlist__44u7__p8_0 = internal global [121 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 4, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 4, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 6, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 6, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 14, i64 13, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 13, i64 13, i64 13, i64 14, i64 14, i64 11, i64 12, i64 11, i64 13, i64 12, i64 13, i64 14, i64 14, i64 14, i64 15, i64 15, i64 11, i64 11, i64 12, i64 13, i64 13, i64 13, i64 13, i64 14, i64 14, i64 15, i64 15], align 16
@_vq_quantlist__44u7__p8_0 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__44u7__p8_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u7__p8_0, ptr @_vq_quantmap__44u7__p8_0, i32 11, i32 11 }, align 8
@_vq_quantthresh__44u7__p8_0 = internal global [10 x float] [float -4.950000e+01, float -3.850000e+01, float -2.750000e+01, float -1.650000e+01, float -5.500000e+00, float 5.500000e+00, float 1.650000e+01, float 2.750000e+01, float 3.850000e+01, float 4.950000e+01], align 16
@_vq_quantmap__44u7__p8_0 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_lengthlist__44u7__p8_1 = internal global [121 x i64] [i64 3, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 5, i64 6, i64 6, i64 7, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 5, i64 6, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 6, i64 7, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8], align 16
@_vq_quantlist__44u7__p8_1 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__44u7__p8_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u7__p8_1, ptr @_vq_quantmap__44u7__p8_1, i32 11, i32 11 }, align 8
@_vq_quantthresh__44u7__p8_1 = internal global [10 x float] [float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00], align 16
@_vq_quantmap__44u7__p8_1 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_lengthlist__44u7__p9_0 = internal global [121 x i64] [i64 1, i64 4, i64 4, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 5, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 4, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8], align 16
@_vq_quantlist__44u7__p9_0 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__44u7__p9_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u7__p9_0, ptr @_vq_quantmap__44u7__p9_0, i32 11, i32 11 }, align 8
@_vq_quantthresh__44u7__p9_0 = internal global [10 x float] [float -2.866500e+03, float -2.229500e+03, float -1.592500e+03, float -9.555000e+02, float -3.185000e+02, float 3.185000e+02, float 9.555000e+02, float 1.592500e+03, float 2.229500e+03, float 2.866500e+03], align 16
@_vq_quantmap__44u7__p9_0 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_lengthlist__44u7__p9_1 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 5, i64 5, i64 7, i64 7, i64 10, i64 9, i64 11, i64 11, i64 12, i64 12, i64 4, i64 7, i64 6, i64 8, i64 8, i64 9, i64 9, i64 11, i64 10, i64 13, i64 12, i64 13, i64 13, i64 4, i64 6, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 11, i64 13, i64 13, i64 12, i64 13, i64 5, i64 8, i64 8, i64 10, i64 9, i64 12, i64 11, i64 12, i64 12, i64 13, i64 13, i64 15, i64 14, i64 6, i64 8, i64 8, i64 10, i64 10, i64 11, i64 11, i64 13, i64 12, i64 13, i64 14, i64 14, i64 15, i64 8, i64 10, i64 10, i64 12, i64 11, i64 13, i64 13, i64 14, i64 15, i64 15, i64 16, i64 15, i64 16, i64 8, i64 9, i64 10, i64 12, i64 12, i64 13, i64 13, i64 16, i64 15, i64 15, i64 15, i64 15, i64 15, i64 10, i64 11, i64 11, i64 14, i64 13, i64 14, i64 14, i64 16, i64 16, i64 15, i64 16, i64 16, i64 16, i64 10, i64 12, i64 12, i64 12, i64 14, i64 14, i64 14, i64 15, i64 16, i64 15, i64 16, i64 15, i64 16, i64 11, i64 12, i64 12, i64 14, i64 14, i64 16, i64 16, i64 15, i64 16, i64 16, i64 16, i64 16, i64 16, i64 12, i64 12, i64 13, i64 13, i64 15, i64 15, i64 14, i64 15, i64 16, i64 16, i64 16, i64 16, i64 16, i64 12, i64 14, i64 14, i64 15, i64 14, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 13, i64 14, i64 13, i64 14, i64 15, i64 16, i64 15, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16], align 16
@_vq_quantlist__44u7__p9_1 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44u7__p9_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u7__p9_1, ptr @_vq_quantmap__44u7__p9_1, i32 13, i32 13 }, align 8
@_vq_quantthresh__44u7__p9_1 = internal global [12 x float] [float -2.695000e+02, float -2.205000e+02, float -1.715000e+02, float -1.225000e+02, float -7.350000e+01, float -2.450000e+01, float 2.450000e+01, float 7.350000e+01, float 1.225000e+02, float 1.715000e+02, float 2.205000e+02, float 2.695000e+02], align 16
@_vq_quantmap__44u7__p9_1 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44u7__p9_2 = internal global [49 x i64] [i64 2, i64 4, i64 3, i64 4, i64 4, i64 5, i64 5, i64 5, i64 5, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 7, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8], align 16
@_vq_quantlist__44u7__p9_2 = internal global [49 x i64] [i64 24, i64 23, i64 25, i64 22, i64 26, i64 21, i64 27, i64 20, i64 28, i64 19, i64 29, i64 18, i64 30, i64 17, i64 31, i64 16, i64 32, i64 15, i64 33, i64 14, i64 34, i64 13, i64 35, i64 12, i64 36, i64 11, i64 37, i64 10, i64 38, i64 9, i64 39, i64 8, i64 40, i64 7, i64 41, i64 6, i64 42, i64 5, i64 43, i64 4, i64 44, i64 3, i64 45, i64 2, i64 46, i64 1, i64 47, i64 0, i64 48], align 16
@_vq_auxt__44u7__p9_2 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u7__p9_2, ptr @_vq_quantmap__44u7__p9_2, i32 49, i32 49 }, align 8
@_vq_quantthresh__44u7__p9_2 = internal global [48 x float] [float -2.350000e+01, float -2.250000e+01, float -2.150000e+01, float -2.050000e+01, float -1.950000e+01, float -1.850000e+01, float -1.750000e+01, float -1.650000e+01, float -1.550000e+01, float -1.450000e+01, float -1.350000e+01, float -1.250000e+01, float -1.150000e+01, float -1.050000e+01, float -9.500000e+00, float -8.500000e+00, float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00, float 8.500000e+00, float 9.500000e+00, float 1.050000e+01, float 1.150000e+01, float 1.250000e+01, float 1.350000e+01, float 1.450000e+01, float 1.550000e+01, float 1.650000e+01, float 1.750000e+01, float 1.850000e+01, float 1.950000e+01, float 2.050000e+01, float 2.150000e+01, float 2.250000e+01, float 2.350000e+01], align 16
@_vq_quantmap__44u7__p9_2 = internal global [49 x i64] [i64 47, i64 45, i64 43, i64 41, i64 39, i64 37, i64 35, i64 33, i64 31, i64 29, i64 27, i64 25, i64 23, i64 21, i64 19, i64 17, i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16, i64 18, i64 20, i64 22, i64 24, i64 26, i64 28, i64 30, i64 32, i64 34, i64 36, i64 38, i64 40, i64 42, i64 44, i64 46, i64 48], align 16
@_huff_lengthlist__44u7__long = internal global [100 x i64] [i64 3, i64 9, i64 15, i64 13, i64 16, i64 13, i64 16, i64 12, i64 12, i64 12, i64 5, i64 5, i64 7, i64 8, i64 8, i64 10, i64 11, i64 10, i64 13, i64 13, i64 10, i64 5, i64 5, i64 6, i64 6, i64 9, i64 9, i64 10, i64 14, i64 14, i64 9, i64 6, i64 6, i64 7, i64 6, i64 8, i64 9, i64 10, i64 13, i64 12, i64 13, i64 7, i64 5, i64 6, i64 4, i64 6, i64 6, i64 8, i64 12, i64 13, i64 11, i64 8, i64 7, i64 8, i64 6, i64 7, i64 7, i64 7, i64 11, i64 13, i64 15, i64 10, i64 8, i64 8, i64 5, i64 6, i64 4, i64 5, i64 9, i64 13, i64 9, i64 9, i64 8, i64 9, i64 7, i64 7, i64 4, i64 4, i64 6, i64 11, i64 11, i64 11, i64 12, i64 12, i64 10, i64 10, i64 8, i64 5, i64 5, i64 9, i64 10, i64 12, i64 13, i64 15, i64 13, i64 13, i64 12, i64 7, i64 6, i64 8], align 16
@_huff_book__44u8__short = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__44u8__short, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_resbook_44u_8 = internal global %struct.static_bookblock { [12 x [3 x ptr]] [[3 x ptr] zeroinitializer, [3 x ptr] [ptr null, ptr null, ptr @_44u8_p1_0], [3 x ptr] [ptr null, ptr null, ptr @_44u8_p2_0], [3 x ptr] [ptr null, ptr null, ptr @_44u8_p3_0], [3 x ptr] [ptr null, ptr null, ptr @_44u8_p4_0], [3 x ptr] [ptr @_44u8_p5_0, ptr @_44u8_p5_1, ptr null], [3 x ptr] [ptr @_44u8_p6_0, ptr @_44u8_p6_1, ptr null], [3 x ptr] [ptr @_44u8_p7_0, ptr @_44u8_p7_1, ptr null], [3 x ptr] [ptr @_44u8_p8_0, ptr @_44u8_p8_1, ptr null], [3 x ptr] [ptr @_44u8_p9_0, ptr @_44u8_p9_1, ptr @_44u8_p9_2], [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer] }, align 8
@_huff_book__44u8__long = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__44u8__long, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_residue_44_hi_un = internal global { i64, i64, i32, i32, i32, [64 x i32], <{ i32, [255 x i32] }>, <{ [9 x float], [55 x float] }>, <{ [9 x float], [55 x float] }> } { i64 0, i64 -1, i32 -1, i32 10, i32 -1, [64 x i32] zeroinitializer, <{ i32, [255 x i32] }> <{ i32 -1, [255 x i32] zeroinitializer }>, <{ [9 x float], [55 x float] }> <{ [9 x float] [float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 4.500000e+00, float 8.500000e+00, float 1.650000e+01, float 3.250000e+01, float 7.150000e+01, float 1.575000e+02], [55 x float] zeroinitializer }>, <{ [9 x float], [55 x float] }> <{ [9 x float] [float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00], [55 x float] zeroinitializer }> }, align 8
@_huff_lengthlist__44u8__short = internal global [100 x i64] [i64 7, i64 15, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 4, i64 6, i64 9, i64 10, i64 10, i64 11, i64 16, i64 15, i64 18, i64 18, i64 5, i64 6, i64 6, i64 6, i64 8, i64 10, i64 15, i64 15, i64 18, i64 18, i64 5, i64 6, i64 5, i64 4, i64 6, i64 9, i64 12, i64 15, i64 17, i64 18, i64 7, i64 6, i64 6, i64 5, i64 6, i64 5, i64 8, i64 11, i64 15, i64 18, i64 10, i64 9, i64 9, i64 7, i64 4, i64 3, i64 6, i64 10, i64 16, i64 17, i64 13, i64 12, i64 12, i64 6, i64 6, i64 4, i64 5, i64 9, i64 14, i64 16, i64 16, i64 17, i64 13, i64 5, i64 5, i64 4, i64 5, i64 8, i64 13, i64 16, i64 17, i64 17, i64 14, i64 7, i64 7, i64 6, i64 7, i64 10, i64 15, i64 17, i64 17, i64 17, i64 17, i64 11, i64 12, i64 12, i64 12, i64 14, i64 17, i64 17], align 16
@_44u8_p1_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__44u8_p1_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__44u8_p1_0, ptr null, ptr @_vq_auxt__44u8_p1_0, ptr null, i32 0 }, align 8
@_44u8_p2_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__44u8_p2_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44u8_p2_0, ptr null, ptr @_vq_auxt__44u8_p2_0, ptr null, i32 0 }, align 8
@_44u8_p3_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__44u8_p3_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44u8_p3_0, ptr null, ptr @_vq_auxt__44u8_p3_0, ptr null, i32 0 }, align 8
@_44u8_p4_0 = internal global %struct.static_codebook { i64 2, i64 289, ptr @_vq_lengthlist__44u8_p4_0, i32 1, i64 -529530880, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__44u8_p4_0, ptr null, ptr @_vq_auxt__44u8_p4_0, ptr null, i32 0 }, align 8
@_44u8_p5_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__44u8_p5_0, i32 1, i64 -529137664, i64 1618345984, i32 2, i32 0, ptr @_vq_quantlist__44u8_p5_0, ptr null, ptr @_vq_auxt__44u8_p5_0, ptr null, i32 0 }, align 8
@_44u8_p5_1 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__44u8_p5_1, i32 1, i64 -531365888, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44u8_p5_1, ptr null, ptr @_vq_auxt__44u8_p5_1, ptr null, i32 0 }, align 8
@_44u8_p6_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44u8_p6_0, i32 1, i64 -526516224, i64 1616117760, i32 4, i32 0, ptr @_vq_quantlist__44u8_p6_0, ptr null, ptr @_vq_auxt__44u8_p6_0, ptr null, i32 0 }, align 8
@_44u8_p6_1 = internal global %struct.static_codebook { i64 2, i64 25, ptr @_vq_lengthlist__44u8_p6_1, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44u8_p6_1, ptr null, ptr @_vq_auxt__44u8_p6_1, ptr null, i32 0 }, align 8
@_44u8_p7_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44u8_p7_0, i32 1, i64 -523206656, i64 1618345984, i32 4, i32 0, ptr @_vq_quantlist__44u8_p7_0, ptr null, ptr @_vq_auxt__44u8_p7_0, ptr null, i32 0 }, align 8
@_44u8_p7_1 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__44u8_p7_1, i32 1, i64 -531365888, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44u8_p7_1, ptr null, ptr @_vq_auxt__44u8_p7_1, ptr null, i32 0 }, align 8
@_44u8_p8_0 = internal global %struct.static_codebook { i64 2, i64 225, ptr @_vq_lengthlist__44u8_p8_0, i32 1, i64 -520986624, i64 1620377600, i32 4, i32 0, ptr @_vq_quantlist__44u8_p8_0, ptr null, ptr @_vq_auxt__44u8_p8_0, ptr null, i32 0 }, align 8
@_44u8_p8_1 = internal global %struct.static_codebook { i64 2, i64 441, ptr @_vq_lengthlist__44u8_p8_1, i32 1, i64 -529268736, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__44u8_p8_1, ptr null, ptr @_vq_auxt__44u8_p8_1, ptr null, i32 0 }, align 8
@_44u8_p9_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__44u8_p9_0, i32 1, i64 -511895552, i64 1631393792, i32 4, i32 0, ptr @_vq_quantlist__44u8_p9_0, ptr null, ptr @_vq_auxt__44u8_p9_0, ptr null, i32 0 }, align 8
@_44u8_p9_1 = internal global %struct.static_codebook { i64 2, i64 361, ptr @_vq_lengthlist__44u8_p9_1, i32 1, i64 -518287360, i64 1622704128, i32 5, i32 0, ptr @_vq_quantlist__44u8_p9_1, ptr null, ptr @_vq_auxt__44u8_p9_1, ptr null, i32 0 }, align 8
@_44u8_p9_2 = internal global %struct.static_codebook { i64 1, i64 49, ptr @_vq_lengthlist__44u8_p9_2, i32 1, i64 -526909440, i64 1611661312, i32 6, i32 0, ptr @_vq_quantlist__44u8_p9_2, ptr null, ptr @_vq_auxt__44u8_p9_2, ptr null, i32 0 }, align 8
@_vq_lengthlist__44u8_p1_0 = internal global [81 x i64] [i64 1, i64 5, i64 5, i64 5, i64 7, i64 7, i64 5, i64 7, i64 7, i64 5, i64 7, i64 7, i64 8, i64 9, i64 9, i64 7, i64 8, i64 9, i64 5, i64 7, i64 7, i64 7, i64 9, i64 8, i64 8, i64 9, i64 9, i64 5, i64 7, i64 7, i64 7, i64 9, i64 9, i64 7, i64 9, i64 9, i64 8, i64 9, i64 9, i64 9, i64 10, i64 11, i64 9, i64 10, i64 10, i64 7, i64 9, i64 9, i64 9, i64 10, i64 9, i64 9, i64 10, i64 11, i64 5, i64 7, i64 7, i64 7, i64 9, i64 9, i64 8, i64 9, i64 9, i64 7, i64 9, i64 9, i64 9, i64 11, i64 10, i64 9, i64 9, i64 10, i64 8, i64 9, i64 9, i64 9, i64 10, i64 10, i64 9, i64 11, i64 10], align 16
@_vq_quantlist__44u8_p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44u8_p1_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u8_p1_0, ptr @_vq_quantmap__44u8_p1_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__44u8_p1_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__44u8_p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44u8_p2_0 = internal global [625 x i64] [i64 4, i64 5, i64 5, i64 8, i64 8, i64 6, i64 7, i64 6, i64 9, i64 9, i64 5, i64 6, i64 7, i64 9, i64 9, i64 8, i64 9, i64 9, i64 11, i64 11, i64 8, i64 9, i64 9, i64 11, i64 11, i64 6, i64 7, i64 7, i64 9, i64 9, i64 7, i64 8, i64 8, i64 10, i64 10, i64 7, i64 7, i64 8, i64 9, i64 10, i64 9, i64 10, i64 10, i64 12, i64 12, i64 9, i64 9, i64 10, i64 11, i64 12, i64 6, i64 7, i64 7, i64 9, i64 9, i64 7, i64 8, i64 7, i64 10, i64 9, i64 7, i64 8, i64 8, i64 10, i64 10, i64 9, i64 10, i64 9, i64 12, i64 11, i64 9, i64 10, i64 10, i64 12, i64 12, i64 8, i64 9, i64 9, i64 11, i64 11, i64 9, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 11, i64 12, i64 12, i64 13, i64 13, i64 11, i64 11, i64 12, i64 13, i64 13, i64 8, i64 9, i64 9, i64 11, i64 11, i64 9, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 11, i64 12, i64 11, i64 13, i64 13, i64 11, i64 12, i64 12, i64 14, i64 13, i64 5, i64 7, i64 7, i64 9, i64 9, i64 7, i64 8, i64 8, i64 10, i64 10, i64 7, i64 8, i64 8, i64 10, i64 10, i64 9, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 11, i64 12, i64 7, i64 8, i64 8, i64 10, i64 10, i64 8, i64 9, i64 9, i64 11, i64 11, i64 8, i64 9, i64 9, i64 10, i64 11, i64 10, i64 11, i64 11, i64 12, i64 12, i64 10, i64 10, i64 11, i64 12, i64 13, i64 6, i64 8, i64 8, i64 10, i64 10, i64 7, i64 8, i64 8, i64 11, i64 10, i64 8, i64 8, i64 9, i64 10, i64 11, i64 10, i64 11, i64 10, i64 12, i64 11, i64 10, i64 11, i64 11, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 11, i64 11, i64 13, i64 13, i64 10, i64 11, i64 11, i64 13, i64 13, i64 12, i64 12, i64 13, i64 13, i64 14, i64 12, i64 12, i64 13, i64 14, i64 14, i64 9, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 11, i64 11, i64 12, i64 13, i64 11, i64 12, i64 11, i64 14, i64 12, i64 12, i64 12, i64 12, i64 14, i64 14, i64 5, i64 7, i64 7, i64 9, i64 9, i64 7, i64 8, i64 8, i64 10, i64 10, i64 7, i64 8, i64 8, i64 10, i64 10, i64 9, i64 10, i64 10, i64 12, i64 11, i64 9, i64 10, i64 10, i64 12, i64 12, i64 6, i64 8, i64 8, i64 10, i64 10, i64 8, i64 9, i64 8, i64 11, i64 10, i64 7, i64 8, i64 8, i64 10, i64 11, i64 10, i64 11, i64 11, i64 13, i64 12, i64 10, i64 10, i64 11, i64 11, i64 13, i64 7, i64 8, i64 8, i64 10, i64 10, i64 8, i64 9, i64 9, i64 11, i64 10, i64 8, i64 9, i64 9, i64 11, i64 11, i64 10, i64 11, i64 10, i64 13, i64 12, i64 10, i64 11, i64 11, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 11, i64 11, i64 13, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 11, i64 11, i64 12, i64 12, i64 14, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 11, i64 11, i64 13, i64 13, i64 10, i64 11, i64 11, i64 13, i64 12, i64 12, i64 13, i64 12, i64 14, i64 14, i64 12, i64 13, i64 12, i64 14, i64 13, i64 8, i64 9, i64 9, i64 11, i64 11, i64 9, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 11, i64 12, i64 12, i64 14, i64 13, i64 11, i64 12, i64 12, i64 13, i64 14, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 11, i64 11, i64 13, i64 13, i64 10, i64 11, i64 11, i64 13, i64 13, i64 12, i64 13, i64 13, i64 14, i64 15, i64 12, i64 12, i64 13, i64 14, i64 14, i64 9, i64 10, i64 10, i64 12, i64 12, i64 9, i64 11, i64 10, i64 13, i64 12, i64 10, i64 11, i64 11, i64 12, i64 13, i64 12, i64 13, i64 12, i64 14, i64 13, i64 12, i64 12, i64 13, i64 14, i64 14, i64 11, i64 12, i64 12, i64 14, i64 14, i64 12, i64 12, i64 12, i64 14, i64 14, i64 12, i64 13, i64 13, i64 14, i64 14, i64 13, i64 13, i64 14, i64 14, i64 16, i64 14, i64 14, i64 14, i64 15, i64 15, i64 11, i64 12, i64 12, i64 14, i64 14, i64 11, i64 12, i64 11, i64 14, i64 13, i64 12, i64 12, i64 13, i64 14, i64 14, i64 13, i64 14, i64 12, i64 15, i64 13, i64 14, i64 14, i64 14, i64 15, i64 16, i64 8, i64 9, i64 9, i64 11, i64 11, i64 9, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 11, i64 12, i64 12, i64 14, i64 13, i64 11, i64 12, i64 12, i64 13, i64 14, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 11, i64 10, i64 13, i64 12, i64 9, i64 10, i64 11, i64 12, i64 13, i64 12, i64 13, i64 12, i64 14, i64 14, i64 12, i64 12, i64 13, i64 13, i64 14, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 11, i64 11, i64 13, i64 13, i64 10, i64 11, i64 11, i64 13, i64 13, i64 12, i64 12, i64 12, i64 14, i64 14, i64 12, i64 13, i64 12, i64 15, i64 14, i64 11, i64 12, i64 11, i64 14, i64 13, i64 12, i64 13, i64 12, i64 14, i64 14, i64 11, i64 11, i64 12, i64 13, i64 14, i64 13, i64 14, i64 14, i64 16, i64 15, i64 13, i64 12, i64 14, i64 13, i64 15, i64 11, i64 12, i64 12, i64 13, i64 14, i64 12, i64 13, i64 13, i64 14, i64 14, i64 12, i64 13, i64 12, i64 14, i64 14, i64 14, i64 14, i64 14, i64 15, i64 16, i64 13, i64 14, i64 13, i64 15, i64 14], align 16
@_vq_quantlist__44u8_p2_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44u8_p2_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u8_p2_0, ptr @_vq_quantmap__44u8_p2_0, i32 5, i32 5 }, align 8
@_vq_quantthresh__44u8_p2_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44u8_p2_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__44u8_p3_0 = internal global [81 x i64] [i64 3, i64 4, i64 4, i64 5, i64 5, i64 7, i64 7, i64 9, i64 9, i64 4, i64 5, i64 4, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 4, i64 4, i64 5, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 10, i64 10, i64 6, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 10, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 11, i64 10, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 11, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 10, i64 12, i64 12, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 12, i64 12], align 16
@_vq_quantlist__44u8_p3_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__44u8_p3_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u8_p3_0, ptr @_vq_quantmap__44u8_p3_0, i32 9, i32 9 }, align 8
@_vq_quantthresh__44u8_p3_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__44u8_p3_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__44u8_p4_0 = internal global [289 x i64] [i64 4, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 4, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 5, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 12, i64 6, i64 6, i64 6, i64 7, i64 7, i64 8, i64 7, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 6, i64 6, i64 6, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 7, i64 7, i64 7, i64 8, i64 7, i64 9, i64 8, i64 9, i64 9, i64 10, i64 9, i64 11, i64 10, i64 11, i64 11, i64 12, i64 12, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 11, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 12, i64 13, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 13, i64 12, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 13, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 13, i64 12, i64 13, i64 13, i64 11, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13], align 16
@_vq_quantlist__44u8_p4_0 = internal global [17 x i64] [i64 8, i64 7, i64 9, i64 6, i64 10, i64 5, i64 11, i64 4, i64 12, i64 3, i64 13, i64 2, i64 14, i64 1, i64 15, i64 0, i64 16], align 16
@_vq_auxt__44u8_p4_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u8_p4_0, ptr @_vq_quantmap__44u8_p4_0, i32 17, i32 17 }, align 8
@_vq_quantthresh__44u8_p4_0 = internal global [16 x float] [float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00], align 16
@_vq_quantmap__44u8_p4_0 = internal global [17 x i64] [i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16], align 16
@_vq_lengthlist__44u8_p5_0 = internal global [81 x i64] [i64 1, i64 5, i64 5, i64 5, i64 7, i64 7, i64 5, i64 7, i64 7, i64 5, i64 8, i64 7, i64 7, i64 8, i64 9, i64 7, i64 9, i64 9, i64 5, i64 7, i64 8, i64 7, i64 9, i64 9, i64 7, i64 9, i64 8, i64 5, i64 7, i64 7, i64 8, i64 9, i64 9, i64 7, i64 9, i64 9, i64 7, i64 9, i64 9, i64 8, i64 9, i64 11, i64 9, i64 11, i64 11, i64 7, i64 9, i64 9, i64 9, i64 11, i64 10, i64 9, i64 11, i64 11, i64 5, i64 7, i64 8, i64 7, i64 9, i64 9, i64 8, i64 9, i64 9, i64 7, i64 9, i64 9, i64 9, i64 11, i64 11, i64 9, i64 10, i64 11, i64 7, i64 9, i64 9, i64 9, i64 11, i64 11, i64 8, i64 11, i64 9], align 16
@_vq_quantlist__44u8_p5_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44u8_p5_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u8_p5_0, ptr @_vq_quantmap__44u8_p5_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__44u8_p5_0 = internal global [2 x float] [float -5.500000e+00, float 5.500000e+00], align 4
@_vq_quantmap__44u8_p5_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44u8_p5_1 = internal global [121 x i64] [i64 4, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 5, i64 6, i64 6, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 5, i64 6, i64 6, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 6, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 7, i64 8, i64 8, i64 6, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8], align 16
@_vq_quantlist__44u8_p5_1 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__44u8_p5_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u8_p5_1, ptr @_vq_quantmap__44u8_p5_1, i32 11, i32 11 }, align 8
@_vq_quantthresh__44u8_p5_1 = internal global [10 x float] [float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00], align 16
@_vq_quantmap__44u8_p5_1 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_lengthlist__44u8_p6_0 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 10, i64 10, i64 10, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 12, i64 12, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13], align 16
@_vq_quantlist__44u8_p6_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44u8_p6_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u8_p6_0, ptr @_vq_quantmap__44u8_p6_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__44u8_p6_0 = internal global [12 x float] [float -2.750000e+01, float -2.250000e+01, float -1.750000e+01, float -1.250000e+01, float -7.500000e+00, float -2.500000e+00, float 2.500000e+00, float 7.500000e+00, float 1.250000e+01, float 1.750000e+01, float 2.250000e+01, float 2.750000e+01], align 16
@_vq_quantmap__44u8_p6_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44u8_p6_1 = internal global [25 x i64] [i64 3, i64 4, i64 4, i64 5, i64 5, i64 4, i64 5, i64 5, i64 5, i64 5, i64 4, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5], align 16
@_vq_quantlist__44u8_p6_1 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44u8_p6_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u8_p6_1, ptr @_vq_quantmap__44u8_p6_1, i32 5, i32 5 }, align 8
@_vq_quantthresh__44u8_p6_1 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44u8_p6_1 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__44u8_p7_0 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 4, i64 6, i64 6, i64 8, i64 8, i64 9, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 4, i64 6, i64 6, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 12, i64 13, i64 13, i64 13, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 14, i64 14, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 13, i64 13, i64 14, i64 14, i64 15, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 14, i64 14, i64 16, i64 15, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 14, i64 14, i64 16, i64 15], align 16
@_vq_quantlist__44u8_p7_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44u8_p7_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u8_p7_0, ptr @_vq_quantmap__44u8_p7_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__44u8_p7_0 = internal global [12 x float] [float -6.050000e+01, float -4.950000e+01, float -3.850000e+01, float -2.750000e+01, float -1.650000e+01, float -5.500000e+00, float 5.500000e+00, float 1.650000e+01, float 2.750000e+01, float 3.850000e+01, float 4.950000e+01, float 6.050000e+01], align 16
@_vq_quantmap__44u8_p7_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44u8_p7_1 = internal global [121 x i64] [i64 4, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 5, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 5, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8], align 16
@_vq_quantlist__44u8_p7_1 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__44u8_p7_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u8_p7_1, ptr @_vq_quantmap__44u8_p7_1, i32 11, i32 11 }, align 8
@_vq_quantthresh__44u8_p7_1 = internal global [10 x float] [float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00], align 16
@_vq_quantmap__44u8_p7_1 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_lengthlist__44u8_p8_0 = internal global [225 x i64] [i64 1, i64 4, i64 4, i64 7, i64 7, i64 8, i64 8, i64 8, i64 7, i64 9, i64 8, i64 10, i64 10, i64 11, i64 11, i64 4, i64 6, i64 6, i64 8, i64 8, i64 10, i64 10, i64 9, i64 9, i64 10, i64 10, i64 11, i64 10, i64 12, i64 12, i64 4, i64 6, i64 6, i64 8, i64 8, i64 9, i64 10, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 12, i64 7, i64 8, i64 8, i64 10, i64 10, i64 11, i64 11, i64 11, i64 10, i64 11, i64 11, i64 13, i64 12, i64 13, i64 12, i64 7, i64 8, i64 8, i64 10, i64 10, i64 11, i64 11, i64 10, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 8, i64 10, i64 9, i64 11, i64 11, i64 12, i64 12, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 8, i64 9, i64 9, i64 11, i64 11, i64 12, i64 12, i64 11, i64 11, i64 12, i64 12, i64 14, i64 13, i64 13, i64 13, i64 8, i64 9, i64 9, i64 11, i64 10, i64 12, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 13, i64 14, i64 13, i64 8, i64 9, i64 9, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 13, i64 13, i64 14, i64 14, i64 14, i64 9, i64 10, i64 10, i64 12, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 15, i64 13, i64 14, i64 14, i64 9, i64 10, i64 10, i64 11, i64 12, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 15, i64 14, i64 14, i64 14, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 13, i64 14, i64 14, i64 15, i64 14, i64 15, i64 15, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 13, i64 14, i64 14, i64 14, i64 14, i64 15, i64 16, i64 15, i64 11, i64 12, i64 12, i64 13, i64 12, i64 14, i64 14, i64 14, i64 13, i64 15, i64 14, i64 16, i64 15, i64 16, i64 15, i64 11, i64 12, i64 12, i64 13, i64 13, i64 13, i64 14, i64 14, i64 15, i64 15, i64 15, i64 15, i64 16, i64 15, i64 15], align 16
@_vq_quantlist__44u8_p8_0 = internal global [15 x i64] [i64 7, i64 6, i64 8, i64 5, i64 9, i64 4, i64 10, i64 3, i64 11, i64 2, i64 12, i64 1, i64 13, i64 0, i64 14], align 16
@_vq_auxt__44u8_p8_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u8_p8_0, ptr @_vq_quantmap__44u8_p8_0, i32 15, i32 15 }, align 8
@_vq_quantthresh__44u8_p8_0 = internal global [14 x float] [float -1.365000e+02, float -1.155000e+02, float -9.450000e+01, float -7.350000e+01, float -5.250000e+01, float -3.150000e+01, float -1.050000e+01, float 1.050000e+01, float 3.150000e+01, float 5.250000e+01, float 7.350000e+01, float 9.450000e+01, float 1.155000e+02, float 1.365000e+02], align 16
@_vq_quantmap__44u8_p8_0 = internal global [15 x i64] [i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14], align 16
@_vq_lengthlist__44u8_p8_1 = internal global [441 x i64] [i64 4, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 6, i64 6, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 6, i64 7, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 9, i64 10, i64 9, i64 10, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 9, i64 10, i64 9, i64 10, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 9, i64 10, i64 10, i64 9, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10], align 16
@_vq_quantlist__44u8_p8_1 = internal global [21 x i64] [i64 10, i64 9, i64 11, i64 8, i64 12, i64 7, i64 13, i64 6, i64 14, i64 5, i64 15, i64 4, i64 16, i64 3, i64 17, i64 2, i64 18, i64 1, i64 19, i64 0, i64 20], align 16
@_vq_auxt__44u8_p8_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u8_p8_1, ptr @_vq_quantmap__44u8_p8_1, i32 21, i32 21 }, align 8
@_vq_quantthresh__44u8_p8_1 = internal global [20 x float] [float -9.500000e+00, float -8.500000e+00, float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00, float 8.500000e+00, float 9.500000e+00], align 16
@_vq_quantmap__44u8_p8_1 = internal global [21 x i64] [i64 19, i64 17, i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16, i64 18, i64 20], align 16
@_vq_lengthlist__44u8_p9_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 5, i64 9, i64 9, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 4, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8], align 16
@_vq_quantlist__44u8_p9_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__44u8_p9_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u8_p9_0, ptr @_vq_quantmap__44u8_p9_0, i32 9, i32 9 }, align 8
@_vq_quantthresh__44u8_p9_0 = internal global [8 x float] [float -3.258500e+03, float -2.327500e+03, float -1.396500e+03, float -4.655000e+02, float 4.655000e+02, float 1.396500e+03, float 2.327500e+03, float 3.258500e+03], align 16
@_vq_quantmap__44u8_p9_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__44u8_p9_1 = internal global [361 x i64] [i64 1, i64 4, i64 4, i64 7, i64 7, i64 8, i64 8, i64 7, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 4, i64 7, i64 6, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 9, i64 9, i64 11, i64 10, i64 12, i64 11, i64 13, i64 12, i64 13, i64 14, i64 4, i64 6, i64 6, i64 9, i64 9, i64 9, i64 9, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 12, i64 12, i64 12, i64 12, i64 13, i64 12, i64 7, i64 9, i64 8, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 11, i64 14, i64 12, i64 13, i64 14, i64 14, i64 13, i64 7, i64 8, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 13, i64 13, i64 13, i64 14, i64 15, i64 15, i64 13, i64 8, i64 9, i64 9, i64 11, i64 11, i64 11, i64 11, i64 11, i64 12, i64 13, i64 12, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 15, i64 13, i64 8, i64 9, i64 9, i64 10, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 12, i64 13, i64 14, i64 13, i64 15, i64 14, i64 15, i64 15, i64 15, i64 8, i64 9, i64 9, i64 10, i64 10, i64 12, i64 11, i64 13, i64 12, i64 13, i64 13, i64 14, i64 14, i64 13, i64 15, i64 14, i64 15, i64 14, i64 14, i64 8, i64 9, i64 9, i64 10, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 14, i64 14, i64 15, i64 15, i64 15, i64 12, i64 14, i64 14, i64 9, i64 11, i64 10, i64 11, i64 11, i64 14, i64 12, i64 13, i64 14, i64 15, i64 14, i64 14, i64 14, i64 14, i64 15, i64 15, i64 15, i64 15, i64 15, i64 9, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 14, i64 14, i64 15, i64 15, i64 14, i64 15, i64 15, i64 15, i64 15, i64 10, i64 11, i64 11, i64 12, i64 12, i64 14, i64 14, i64 13, i64 14, i64 14, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 10, i64 11, i64 11, i64 12, i64 13, i64 13, i64 13, i64 14, i64 14, i64 15, i64 15, i64 14, i64 14, i64 15, i64 15, i64 15, i64 15, i64 14, i64 15, i64 11, i64 12, i64 13, i64 15, i64 13, i64 14, i64 15, i64 15, i64 15, i64 15, i64 14, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 11, i64 12, i64 12, i64 14, i64 14, i64 14, i64 13, i64 14, i64 15, i64 15, i64 14, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 13, i64 13, i64 14, i64 13, i64 13, i64 14, i64 14, i64 15, i64 14, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 11, i64 14, i64 13, i64 14, i64 14, i64 15, i64 14, i64 14, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 12, i64 12, i64 13, i64 14, i64 13, i64 13, i64 14, i64 15, i64 14, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 13, i64 13, i64 14, i64 14, i64 13, i64 15, i64 14, i64 14, i64 15, i64 15, i64 14, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15], align 16
@_vq_quantlist__44u8_p9_1 = internal global [19 x i64] [i64 9, i64 8, i64 10, i64 7, i64 11, i64 6, i64 12, i64 5, i64 13, i64 4, i64 14, i64 3, i64 15, i64 2, i64 16, i64 1, i64 17, i64 0, i64 18], align 16
@_vq_auxt__44u8_p9_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u8_p9_1, ptr @_vq_quantmap__44u8_p9_1, i32 19, i32 19 }, align 8
@_vq_quantthresh__44u8_p9_1 = internal global [18 x float] [float -4.165000e+02, float -3.675000e+02, float -3.185000e+02, float -2.695000e+02, float -2.205000e+02, float -1.715000e+02, float -1.225000e+02, float -7.350000e+01, float -2.450000e+01, float 2.450000e+01, float 7.350000e+01, float 1.225000e+02, float 1.715000e+02, float 2.205000e+02, float 2.695000e+02, float 3.185000e+02, float 3.675000e+02, float 4.165000e+02], align 16
@_vq_quantmap__44u8_p9_1 = internal global [19 x i64] [i64 17, i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16, i64 18], align 16
@_vq_lengthlist__44u8_p9_2 = internal global [49 x i64] [i64 2, i64 4, i64 4, i64 5, i64 5, i64 5, i64 5, i64 5, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7], align 16
@_vq_quantlist__44u8_p9_2 = internal global [49 x i64] [i64 24, i64 23, i64 25, i64 22, i64 26, i64 21, i64 27, i64 20, i64 28, i64 19, i64 29, i64 18, i64 30, i64 17, i64 31, i64 16, i64 32, i64 15, i64 33, i64 14, i64 34, i64 13, i64 35, i64 12, i64 36, i64 11, i64 37, i64 10, i64 38, i64 9, i64 39, i64 8, i64 40, i64 7, i64 41, i64 6, i64 42, i64 5, i64 43, i64 4, i64 44, i64 3, i64 45, i64 2, i64 46, i64 1, i64 47, i64 0, i64 48], align 16
@_vq_auxt__44u8_p9_2 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u8_p9_2, ptr @_vq_quantmap__44u8_p9_2, i32 49, i32 49 }, align 8
@_vq_quantthresh__44u8_p9_2 = internal global [48 x float] [float -2.350000e+01, float -2.250000e+01, float -2.150000e+01, float -2.050000e+01, float -1.950000e+01, float -1.850000e+01, float -1.750000e+01, float -1.650000e+01, float -1.550000e+01, float -1.450000e+01, float -1.350000e+01, float -1.250000e+01, float -1.150000e+01, float -1.050000e+01, float -9.500000e+00, float -8.500000e+00, float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00, float 8.500000e+00, float 9.500000e+00, float 1.050000e+01, float 1.150000e+01, float 1.250000e+01, float 1.350000e+01, float 1.450000e+01, float 1.550000e+01, float 1.650000e+01, float 1.750000e+01, float 1.850000e+01, float 1.950000e+01, float 2.050000e+01, float 2.150000e+01, float 2.250000e+01, float 2.350000e+01], align 16
@_vq_quantmap__44u8_p9_2 = internal global [49 x i64] [i64 47, i64 45, i64 43, i64 41, i64 39, i64 37, i64 35, i64 33, i64 31, i64 29, i64 27, i64 25, i64 23, i64 21, i64 19, i64 17, i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16, i64 18, i64 20, i64 22, i64 24, i64 26, i64 28, i64 30, i64 32, i64 34, i64 36, i64 38, i64 40, i64 42, i64 44, i64 46, i64 48], align 16
@_huff_lengthlist__44u8__long = internal global [100 x i64] [i64 3, i64 9, i64 13, i64 13, i64 14, i64 13, i64 13, i64 13, i64 13, i64 14, i64 5, i64 4, i64 6, i64 8, i64 10, i64 12, i64 13, i64 15, i64 13, i64 14, i64 9, i64 5, i64 3, i64 5, i64 8, i64 10, i64 12, i64 14, i64 13, i64 13, i64 11, i64 7, i64 4, i64 3, i64 5, i64 7, i64 10, i64 11, i64 12, i64 14, i64 11, i64 9, i64 7, i64 4, i64 4, i64 6, i64 8, i64 10, i64 13, i64 14, i64 10, i64 11, i64 9, i64 7, i64 6, i64 6, i64 7, i64 9, i64 12, i64 15, i64 12, i64 11, i64 11, i64 8, i64 7, i64 6, i64 6, i64 7, i64 11, i64 14, i64 12, i64 12, i64 12, i64 10, i64 8, i64 7, i64 6, i64 7, i64 9, i64 13, i64 11, i64 12, i64 13, i64 12, i64 11, i64 8, i64 8, i64 7, i64 9, i64 12, i64 11, i64 14, i64 16, i64 16, i64 15, i64 11, i64 10, i64 9, i64 9, i64 11], align 16
@_huff_book__44u9__short = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__44u9__short, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_resbook_44u_9 = internal global %struct.static_bookblock { [12 x [3 x ptr]] [[3 x ptr] zeroinitializer, [3 x ptr] [ptr null, ptr null, ptr @_44u9_p1_0], [3 x ptr] [ptr null, ptr null, ptr @_44u9_p2_0], [3 x ptr] [ptr null, ptr null, ptr @_44u9_p3_0], [3 x ptr] [ptr null, ptr null, ptr @_44u9_p4_0], [3 x ptr] [ptr @_44u9_p5_0, ptr @_44u9_p5_1, ptr null], [3 x ptr] [ptr @_44u9_p6_0, ptr @_44u9_p6_1, ptr null], [3 x ptr] [ptr @_44u9_p7_0, ptr @_44u9_p7_1, ptr null], [3 x ptr] [ptr @_44u9_p8_0, ptr @_44u9_p8_1, ptr null], [3 x ptr] [ptr @_44u9_p9_0, ptr @_44u9_p9_1, ptr @_44u9_p9_2], [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer] }, align 8
@_huff_book__44u9__long = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__44u9__long, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_lengthlist__44u9__short = internal global [100 x i64] [i64 10, i64 17, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 5, i64 8, i64 12, i64 13, i64 14, i64 13, i64 16, i64 17, i64 16, i64 17, i64 5, i64 6, i64 8, i64 8, i64 10, i64 9, i64 12, i64 16, i64 16, i64 17, i64 5, i64 6, i64 7, i64 5, i64 6, i64 9, i64 12, i64 15, i64 16, i64 16, i64 7, i64 6, i64 6, i64 4, i64 5, i64 7, i64 9, i64 14, i64 15, i64 17, i64 10, i64 8, i64 8, i64 6, i64 6, i64 3, i64 5, i64 9, i64 13, i64 18, i64 14, i64 11, i64 11, i64 10, i64 6, i64 3, i64 4, i64 7, i64 13, i64 17, i64 15, i64 16, i64 16, i64 10, i64 5, i64 6, i64 4, i64 4, i64 9, i64 13, i64 18, i64 18, i64 18, i64 11, i64 6, i64 8, i64 5, i64 6, i64 10, i64 15, i64 18, i64 18, i64 18, i64 14, i64 10, i64 11, i64 9, i64 10, i64 16, i64 18], align 16
@_44u9_p1_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__44u9_p1_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__44u9_p1_0, ptr null, ptr @_vq_auxt__44u9_p1_0, ptr null, i32 0 }, align 8
@_44u9_p2_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__44u9_p2_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44u9_p2_0, ptr null, ptr @_vq_auxt__44u9_p2_0, ptr null, i32 0 }, align 8
@_44u9_p3_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__44u9_p3_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44u9_p3_0, ptr null, ptr @_vq_auxt__44u9_p3_0, ptr null, i32 0 }, align 8
@_44u9_p4_0 = internal global %struct.static_codebook { i64 2, i64 289, ptr @_vq_lengthlist__44u9_p4_0, i32 1, i64 -529530880, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__44u9_p4_0, ptr null, ptr @_vq_auxt__44u9_p4_0, ptr null, i32 0 }, align 8
@_44u9_p5_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__44u9_p5_0, i32 1, i64 -529137664, i64 1618345984, i32 2, i32 0, ptr @_vq_quantlist__44u9_p5_0, ptr null, ptr @_vq_auxt__44u9_p5_0, ptr null, i32 0 }, align 8
@_44u9_p5_1 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__44u9_p5_1, i32 1, i64 -531365888, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44u9_p5_1, ptr null, ptr @_vq_auxt__44u9_p5_1, ptr null, i32 0 }, align 8
@_44u9_p6_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44u9_p6_0, i32 1, i64 -526516224, i64 1616117760, i32 4, i32 0, ptr @_vq_quantlist__44u9_p6_0, ptr null, ptr @_vq_auxt__44u9_p6_0, ptr null, i32 0 }, align 8
@_44u9_p6_1 = internal global %struct.static_codebook { i64 2, i64 25, ptr @_vq_lengthlist__44u9_p6_1, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__44u9_p6_1, ptr null, ptr @_vq_auxt__44u9_p6_1, ptr null, i32 0 }, align 8
@_44u9_p7_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__44u9_p7_0, i32 1, i64 -523206656, i64 1618345984, i32 4, i32 0, ptr @_vq_quantlist__44u9_p7_0, ptr null, ptr @_vq_auxt__44u9_p7_0, ptr null, i32 0 }, align 8
@_44u9_p7_1 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__44u9_p7_1, i32 1, i64 -531365888, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__44u9_p7_1, ptr null, ptr @_vq_auxt__44u9_p7_1, ptr null, i32 0 }, align 8
@_44u9_p8_0 = internal global %struct.static_codebook { i64 2, i64 225, ptr @_vq_lengthlist__44u9_p8_0, i32 1, i64 -520986624, i64 1620377600, i32 4, i32 0, ptr @_vq_quantlist__44u9_p8_0, ptr null, ptr @_vq_auxt__44u9_p8_0, ptr null, i32 0 }, align 8
@_44u9_p8_1 = internal global %struct.static_codebook { i64 2, i64 441, ptr @_vq_lengthlist__44u9_p8_1, i32 1, i64 -529268736, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__44u9_p8_1, ptr null, ptr @_vq_auxt__44u9_p8_1, ptr null, i32 0 }, align 8
@_44u9_p9_0 = internal global %struct.static_codebook { i64 2, i64 225, ptr @_vq_lengthlist__44u9_p9_0, i32 1, i64 -510036736, i64 1631393792, i32 4, i32 0, ptr @_vq_quantlist__44u9_p9_0, ptr null, ptr @_vq_auxt__44u9_p9_0, ptr null, i32 0 }, align 8
@_44u9_p9_1 = internal global %struct.static_codebook { i64 2, i64 361, ptr @_vq_lengthlist__44u9_p9_1, i32 1, i64 -518287360, i64 1622704128, i32 5, i32 0, ptr @_vq_quantlist__44u9_p9_1, ptr null, ptr @_vq_auxt__44u9_p9_1, ptr null, i32 0 }, align 8
@_44u9_p9_2 = internal global %struct.static_codebook { i64 1, i64 49, ptr @_vq_lengthlist__44u9_p9_2, i32 1, i64 -526909440, i64 1611661312, i32 6, i32 0, ptr @_vq_quantlist__44u9_p9_2, ptr null, ptr @_vq_auxt__44u9_p9_2, ptr null, i32 0 }, align 8
@_vq_lengthlist__44u9_p1_0 = internal global [81 x i64] [i64 1, i64 5, i64 5, i64 5, i64 7, i64 7, i64 5, i64 7, i64 7, i64 5, i64 7, i64 7, i64 8, i64 9, i64 9, i64 7, i64 9, i64 9, i64 5, i64 7, i64 7, i64 7, i64 9, i64 9, i64 7, i64 9, i64 9, i64 5, i64 7, i64 7, i64 7, i64 9, i64 9, i64 7, i64 9, i64 9, i64 8, i64 9, i64 9, i64 9, i64 10, i64 11, i64 9, i64 11, i64 10, i64 7, i64 9, i64 9, i64 9, i64 11, i64 10, i64 9, i64 10, i64 11, i64 5, i64 7, i64 7, i64 7, i64 9, i64 9, i64 7, i64 9, i64 9, i64 7, i64 9, i64 9, i64 9, i64 11, i64 11, i64 9, i64 10, i64 11, i64 8, i64 9, i64 9, i64 9, i64 10, i64 10, i64 9, i64 11, i64 10], align 16
@_vq_quantlist__44u9_p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44u9_p1_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u9_p1_0, ptr @_vq_quantmap__44u9_p1_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__44u9_p1_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__44u9_p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44u9_p2_0 = internal global [625 x i64] [i64 3, i64 6, i64 5, i64 8, i64 8, i64 6, i64 7, i64 7, i64 9, i64 9, i64 6, i64 7, i64 7, i64 9, i64 9, i64 8, i64 9, i64 9, i64 11, i64 10, i64 8, i64 9, i64 9, i64 10, i64 11, i64 6, i64 7, i64 7, i64 9, i64 9, i64 7, i64 8, i64 8, i64 10, i64 10, i64 7, i64 8, i64 8, i64 9, i64 10, i64 9, i64 10, i64 10, i64 11, i64 11, i64 9, i64 9, i64 10, i64 11, i64 11, i64 6, i64 7, i64 7, i64 9, i64 9, i64 7, i64 8, i64 7, i64 10, i64 9, i64 7, i64 8, i64 8, i64 10, i64 10, i64 9, i64 10, i64 9, i64 11, i64 11, i64 9, i64 10, i64 10, i64 11, i64 11, i64 8, i64 9, i64 9, i64 11, i64 11, i64 9, i64 10, i64 10, i64 12, i64 11, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 11, i64 11, i64 11, i64 12, i64 13, i64 8, i64 9, i64 9, i64 11, i64 11, i64 9, i64 10, i64 10, i64 11, i64 11, i64 9, i64 10, i64 10, i64 12, i64 12, i64 11, i64 11, i64 11, i64 13, i64 12, i64 11, i64 11, i64 11, i64 13, i64 13, i64 6, i64 7, i64 7, i64 9, i64 9, i64 7, i64 8, i64 8, i64 10, i64 9, i64 7, i64 8, i64 8, i64 9, i64 10, i64 9, i64 10, i64 10, i64 11, i64 11, i64 9, i64 10, i64 10, i64 11, i64 11, i64 7, i64 8, i64 8, i64 10, i64 10, i64 8, i64 9, i64 9, i64 10, i64 10, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 10, i64 11, i64 12, i64 7, i64 8, i64 8, i64 10, i64 10, i64 8, i64 9, i64 8, i64 10, i64 10, i64 8, i64 9, i64 9, i64 10, i64 10, i64 9, i64 10, i64 10, i64 12, i64 11, i64 10, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 11, i64 10, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 10, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 13, i64 11, i64 12, i64 12, i64 13, i64 13, i64 9, i64 10, i64 10, i64 11, i64 11, i64 9, i64 10, i64 10, i64 12, i64 11, i64 10, i64 10, i64 10, i64 12, i64 12, i64 11, i64 12, i64 11, i64 13, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 6, i64 7, i64 7, i64 9, i64 9, i64 7, i64 8, i64 8, i64 10, i64 9, i64 7, i64 8, i64 8, i64 9, i64 10, i64 9, i64 10, i64 10, i64 12, i64 11, i64 9, i64 10, i64 10, i64 11, i64 11, i64 7, i64 8, i64 8, i64 10, i64 9, i64 8, i64 9, i64 9, i64 11, i64 10, i64 8, i64 8, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 10, i64 11, i64 12, i64 7, i64 8, i64 8, i64 10, i64 10, i64 8, i64 9, i64 9, i64 10, i64 10, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 11, i64 11, i64 10, i64 11, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 11, i64 12, i64 11, i64 12, i64 12, i64 13, i64 13, i64 11, i64 11, i64 12, i64 11, i64 13, i64 9, i64 10, i64 10, i64 11, i64 12, i64 10, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 10, i64 12, i64 12, i64 11, i64 12, i64 12, i64 13, i64 13, i64 12, i64 12, i64 12, i64 13, i64 13, i64 8, i64 9, i64 9, i64 11, i64 11, i64 9, i64 10, i64 10, i64 12, i64 11, i64 9, i64 10, i64 10, i64 11, i64 12, i64 11, i64 12, i64 12, i64 13, i64 13, i64 11, i64 11, i64 12, i64 13, i64 13, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 10, i64 12, i64 12, i64 10, i64 11, i64 10, i64 12, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 12, i64 12, i64 12, i64 13, i64 13, i64 9, i64 10, i64 10, i64 12, i64 11, i64 10, i64 10, i64 10, i64 12, i64 11, i64 10, i64 10, i64 10, i64 12, i64 12, i64 11, i64 12, i64 12, i64 13, i64 13, i64 12, i64 12, i64 12, i64 13, i64 14, i64 11, i64 12, i64 12, i64 13, i64 13, i64 11, i64 12, i64 12, i64 13, i64 13, i64 11, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 14, i64 13, i64 15, i64 13, i64 13, i64 13, i64 14, i64 14, i64 11, i64 11, i64 11, i64 13, i64 13, i64 11, i64 12, i64 11, i64 13, i64 13, i64 11, i64 12, i64 12, i64 13, i64 13, i64 12, i64 13, i64 12, i64 14, i64 12, i64 13, i64 13, i64 13, i64 15, i64 14, i64 8, i64 9, i64 9, i64 11, i64 11, i64 9, i64 10, i64 10, i64 11, i64 11, i64 9, i64 10, i64 10, i64 11, i64 12, i64 11, i64 12, i64 11, i64 13, i64 13, i64 11, i64 12, i64 12, i64 13, i64 13, i64 9, i64 10, i64 10, i64 11, i64 11, i64 10, i64 11, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 11, i64 11, i64 12, i64 12, i64 13, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 11, i64 12, i64 12, i64 10, i64 11, i64 10, i64 12, i64 12, i64 11, i64 12, i64 12, i64 13, i64 13, i64 12, i64 12, i64 12, i64 13, i64 13, i64 11, i64 11, i64 11, i64 13, i64 13, i64 11, i64 12, i64 12, i64 13, i64 13, i64 11, i64 11, i64 12, i64 13, i64 13, i64 13, i64 13, i64 13, i64 14, i64 14, i64 12, i64 12, i64 13, i64 12, i64 14, i64 11, i64 11, i64 12, i64 13, i64 13, i64 12, i64 12, i64 12, i64 14, i64 13, i64 11, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 13, i64 14, i64 14, i64 13, i64 13, i64 13, i64 14, i64 13], align 16
@_vq_quantlist__44u9_p2_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44u9_p2_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u9_p2_0, ptr @_vq_quantmap__44u9_p2_0, i32 5, i32 5 }, align 8
@_vq_quantthresh__44u9_p2_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44u9_p2_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__44u9_p3_0 = internal global [81 x i64] [i64 3, i64 4, i64 4, i64 5, i64 5, i64 7, i64 7, i64 9, i64 8, i64 4, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 4, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 5, i64 6, i64 6, i64 7, i64 6, i64 8, i64 7, i64 9, i64 9, i64 5, i64 6, i64 6, i64 6, i64 7, i64 7, i64 8, i64 9, i64 9, i64 7, i64 7, i64 7, i64 8, i64 7, i64 9, i64 8, i64 10, i64 10, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11], align 16
@_vq_quantlist__44u9_p3_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__44u9_p3_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u9_p3_0, ptr @_vq_quantmap__44u9_p3_0, i32 9, i32 9 }, align 8
@_vq_quantthresh__44u9_p3_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__44u9_p3_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__44u9_p4_0 = internal global [289 x i64] [i64 4, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 5, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 10, i64 9, i64 11, i64 10, i64 12, i64 11, i64 5, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 6, i64 6, i64 6, i64 7, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 6, i64 6, i64 6, i64 6, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 10, i64 12, i64 11, i64 12, i64 12, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 12, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 10, i64 11, i64 11, i64 12, i64 11, i64 13, i64 12, i64 13, i64 13, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 13, i64 10, i64 11, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 11, i64 12, i64 12, i64 13, i64 12, i64 13, i64 13, i64 14, i64 13, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 14, i64 11, i64 12, i64 11, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 14, i64 13, i64 14, i64 14, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 14, i64 14, i64 14], align 16
@_vq_quantlist__44u9_p4_0 = internal global [17 x i64] [i64 8, i64 7, i64 9, i64 6, i64 10, i64 5, i64 11, i64 4, i64 12, i64 3, i64 13, i64 2, i64 14, i64 1, i64 15, i64 0, i64 16], align 16
@_vq_auxt__44u9_p4_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u9_p4_0, ptr @_vq_quantmap__44u9_p4_0, i32 17, i32 17 }, align 8
@_vq_quantthresh__44u9_p4_0 = internal global [16 x float] [float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00], align 16
@_vq_quantmap__44u9_p4_0 = internal global [17 x i64] [i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16], align 16
@_vq_lengthlist__44u9_p5_0 = internal global [81 x i64] [i64 1, i64 5, i64 5, i64 5, i64 7, i64 7, i64 5, i64 7, i64 7, i64 5, i64 8, i64 7, i64 7, i64 8, i64 9, i64 7, i64 8, i64 9, i64 5, i64 7, i64 8, i64 7, i64 9, i64 8, i64 7, i64 9, i64 8, i64 5, i64 8, i64 8, i64 8, i64 9, i64 9, i64 7, i64 9, i64 9, i64 7, i64 9, i64 9, i64 8, i64 9, i64 11, i64 9, i64 11, i64 10, i64 7, i64 9, i64 9, i64 9, i64 11, i64 9, i64 9, i64 10, i64 11, i64 5, i64 7, i64 8, i64 7, i64 9, i64 9, i64 8, i64 9, i64 9, i64 7, i64 9, i64 9, i64 9, i64 11, i64 10, i64 9, i64 9, i64 11, i64 7, i64 9, i64 9, i64 9, i64 10, i64 11, i64 8, i64 11, i64 9], align 16
@_vq_quantlist__44u9_p5_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__44u9_p5_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u9_p5_0, ptr @_vq_quantmap__44u9_p5_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__44u9_p5_0 = internal global [2 x float] [float -5.500000e+00, float 5.500000e+00], align 4
@_vq_quantmap__44u9_p5_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__44u9_p5_1 = internal global [121 x i64] [i64 5, i64 6, i64 6, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 6, i64 6, i64 6, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 6, i64 6, i64 6, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 6, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8], align 16
@_vq_quantlist__44u9_p5_1 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__44u9_p5_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u9_p5_1, ptr @_vq_quantmap__44u9_p5_1, i32 11, i32 11 }, align 8
@_vq_quantthresh__44u9_p5_1 = internal global [10 x float] [float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00], align 16
@_vq_quantmap__44u9_p5_1 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_lengthlist__44u9_p6_0 = internal global [169 x i64] [i64 2, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 4, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 11, i64 11, i64 4, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 11, i64 11, i64 6, i64 7, i64 7, i64 8, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 6, i64 7, i64 7, i64 8, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 10, i64 11, i64 11, i64 12, i64 12, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 9, i64 11, i64 11, i64 12, i64 12, i64 8, i64 9, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 12, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 13, i64 12, i64 13, i64 13], align 16
@_vq_quantlist__44u9_p6_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44u9_p6_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u9_p6_0, ptr @_vq_quantmap__44u9_p6_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__44u9_p6_0 = internal global [12 x float] [float -2.750000e+01, float -2.250000e+01, float -1.750000e+01, float -1.250000e+01, float -7.500000e+00, float -2.500000e+00, float 2.500000e+00, float 7.500000e+00, float 1.250000e+01, float 1.750000e+01, float 2.250000e+01, float 2.750000e+01], align 16
@_vq_quantmap__44u9_p6_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44u9_p6_1 = internal global [25 x i64] [i64 4, i64 4, i64 4, i64 5, i64 5, i64 4, i64 5, i64 4, i64 5, i64 5, i64 4, i64 4, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5], align 16
@_vq_quantlist__44u9_p6_1 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__44u9_p6_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u9_p6_1, ptr @_vq_quantmap__44u9_p6_1, i32 5, i32 5 }, align 8
@_vq_quantthresh__44u9_p6_1 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__44u9_p6_1 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__44u9_p7_0 = internal global [169 x i64] [i64 1, i64 5, i64 4, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 10, i64 12, i64 12, i64 13, i64 12, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 11, i64 13, i64 13, i64 13, i64 14, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 12, i64 13, i64 12, i64 13, i64 13, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 12, i64 13, i64 13, i64 14, i64 14, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 14, i64 14, i64 15, i64 14, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 13, i64 14, i64 14, i64 15, i64 15, i64 15], align 16
@_vq_quantlist__44u9_p7_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__44u9_p7_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u9_p7_0, ptr @_vq_quantmap__44u9_p7_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__44u9_p7_0 = internal global [12 x float] [float -6.050000e+01, float -4.950000e+01, float -3.850000e+01, float -2.750000e+01, float -1.650000e+01, float -5.500000e+00, float 5.500000e+00, float 1.650000e+01, float 2.750000e+01, float 3.850000e+01, float 4.950000e+01, float 6.050000e+01], align 16
@_vq_quantmap__44u9_p7_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__44u9_p7_1 = internal global [121 x i64] [i64 5, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 6, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 6, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 7, i64 8, i64 8, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8], align 16
@_vq_quantlist__44u9_p7_1 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__44u9_p7_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u9_p7_1, ptr @_vq_quantmap__44u9_p7_1, i32 11, i32 11 }, align 8
@_vq_quantthresh__44u9_p7_1 = internal global [10 x float] [float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00], align 16
@_vq_quantmap__44u9_p7_1 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_lengthlist__44u9_p8_0 = internal global [225 x i64] [i64 1, i64 4, i64 4, i64 7, i64 7, i64 8, i64 8, i64 8, i64 7, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 4, i64 6, i64 6, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 10, i64 12, i64 11, i64 4, i64 6, i64 6, i64 8, i64 8, i64 9, i64 10, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 7, i64 8, i64 8, i64 10, i64 10, i64 11, i64 11, i64 11, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 12, i64 7, i64 8, i64 8, i64 10, i64 10, i64 11, i64 11, i64 10, i64 10, i64 11, i64 12, i64 12, i64 12, i64 13, i64 13, i64 8, i64 10, i64 9, i64 11, i64 11, i64 12, i64 12, i64 11, i64 12, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 8, i64 9, i64 9, i64 11, i64 11, i64 12, i64 12, i64 11, i64 12, i64 12, i64 13, i64 13, i64 13, i64 14, i64 14, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 13, i64 12, i64 13, i64 13, i64 14, i64 14, i64 15, i64 14, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 12, i64 12, i64 13, i64 13, i64 13, i64 14, i64 14, i64 14, i64 15, i64 9, i64 10, i64 10, i64 11, i64 11, i64 13, i64 12, i64 13, i64 13, i64 14, i64 14, i64 15, i64 15, i64 15, i64 15, i64 9, i64 10, i64 10, i64 11, i64 12, i64 12, i64 12, i64 13, i64 13, i64 14, i64 15, i64 14, i64 15, i64 15, i64 15, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 15, i64 15, i64 15, i64 16, i64 16, i64 15, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 14, i64 14, i64 14, i64 15, i64 14, i64 15, i64 16, i64 16, i64 17, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 15, i64 14, i64 16, i64 15, i64 15, i64 16, i64 16, i64 16, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 14, i64 15, i64 15, i64 15, i64 16, i64 16, i64 17, i64 16], align 16
@_vq_quantlist__44u9_p8_0 = internal global [15 x i64] [i64 7, i64 6, i64 8, i64 5, i64 9, i64 4, i64 10, i64 3, i64 11, i64 2, i64 12, i64 1, i64 13, i64 0, i64 14], align 16
@_vq_auxt__44u9_p8_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u9_p8_0, ptr @_vq_quantmap__44u9_p8_0, i32 15, i32 15 }, align 8
@_vq_quantthresh__44u9_p8_0 = internal global [14 x float] [float -1.365000e+02, float -1.155000e+02, float -9.450000e+01, float -7.350000e+01, float -5.250000e+01, float -3.150000e+01, float -1.050000e+01, float 1.050000e+01, float 3.150000e+01, float 5.250000e+01, float 7.350000e+01, float 9.450000e+01, float 1.155000e+02, float 1.365000e+02], align 16
@_vq_quantmap__44u9_p8_0 = internal global [15 x i64] [i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14], align 16
@_vq_lengthlist__44u9_p8_1 = internal global [441 x i64] [i64 4, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 9, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 9, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 9, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 9, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10], align 16
@_vq_quantlist__44u9_p8_1 = internal global [21 x i64] [i64 10, i64 9, i64 11, i64 8, i64 12, i64 7, i64 13, i64 6, i64 14, i64 5, i64 15, i64 4, i64 16, i64 3, i64 17, i64 2, i64 18, i64 1, i64 19, i64 0, i64 20], align 16
@_vq_auxt__44u9_p8_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u9_p8_1, ptr @_vq_quantmap__44u9_p8_1, i32 21, i32 21 }, align 8
@_vq_quantthresh__44u9_p8_1 = internal global [20 x float] [float -9.500000e+00, float -8.500000e+00, float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00, float 8.500000e+00, float 9.500000e+00], align 16
@_vq_quantmap__44u9_p8_1 = internal global [21 x i64] [i64 19, i64 17, i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16, i64 18, i64 20], align 16
@_vq_lengthlist__44u9_p9_0 = internal global [225 x i64] [i64 1, i64 5, i64 5, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 5, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 5, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9], align 16
@_vq_quantlist__44u9_p9_0 = internal global [15 x i64] [i64 7, i64 6, i64 8, i64 5, i64 9, i64 4, i64 10, i64 3, i64 11, i64 2, i64 12, i64 1, i64 13, i64 0, i64 14], align 16
@_vq_auxt__44u9_p9_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u9_p9_0, ptr @_vq_quantmap__44u9_p9_0, i32 15, i32 15 }, align 8
@_vq_quantthresh__44u9_p9_0 = internal global [14 x float] [float -6.051500e+03, float -5.120500e+03, float -4.189500e+03, float -3.258500e+03, float -2.327500e+03, float -1.396500e+03, float -4.655000e+02, float 4.655000e+02, float 1.396500e+03, float 2.327500e+03, float 3.258500e+03, float 4.189500e+03, float 5.120500e+03, float 6.051500e+03], align 16
@_vq_quantmap__44u9_p9_0 = internal global [15 x i64] [i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14], align 16
@_vq_lengthlist__44u9_p9_1 = internal global [361 x i64] [i64 1, i64 4, i64 4, i64 7, i64 7, i64 8, i64 8, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 12, i64 11, i64 12, i64 11, i64 12, i64 12, i64 4, i64 7, i64 6, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 11, i64 9, i64 11, i64 11, i64 13, i64 12, i64 14, i64 12, i64 4, i64 6, i64 6, i64 9, i64 9, i64 9, i64 9, i64 8, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 13, i64 13, i64 7, i64 9, i64 8, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 14, i64 13, i64 14, i64 14, i64 15, i64 13, i64 7, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 13, i64 13, i64 13, i64 14, i64 14, i64 15, i64 13, i64 8, i64 9, i64 9, i64 12, i64 10, i64 11, i64 11, i64 12, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 15, i64 16, i64 15, i64 14, i64 8, i64 9, i64 9, i64 10, i64 11, i64 12, i64 11, i64 11, i64 12, i64 13, i64 12, i64 14, i64 14, i64 13, i64 15, i64 16, i64 15, i64 14, i64 16, i64 7, i64 9, i64 9, i64 10, i64 10, i64 12, i64 11, i64 12, i64 13, i64 16, i64 13, i64 14, i64 16, i64 14, i64 15, i64 15, i64 15, i64 15, i64 15, i64 7, i64 9, i64 9, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 14, i64 16, i64 14, i64 14, i64 16, i64 16, i64 14, i64 14, i64 14, i64 15, i64 9, i64 10, i64 11, i64 12, i64 12, i64 12, i64 13, i64 13, i64 13, i64 16, i64 15, i64 16, i64 15, i64 14, i64 15, i64 15, i64 15, i64 16, i64 16, i64 9, i64 10, i64 11, i64 12, i64 13, i64 13, i64 14, i64 13, i64 14, i64 15, i64 14, i64 14, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 10, i64 11, i64 11, i64 13, i64 13, i64 15, i64 13, i64 15, i64 13, i64 14, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 15, i64 14, i64 16, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 15, i64 13, i64 15, i64 14, i64 15, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 12, i64 13, i64 13, i64 13, i64 13, i64 15, i64 14, i64 15, i64 16, i64 16, i64 16, i64 16, i64 14, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 13, i64 12, i64 12, i64 14, i64 14, i64 13, i64 15, i64 14, i64 16, i64 15, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 15, i64 12, i64 12, i64 13, i64 13, i64 14, i64 16, i64 15, i64 16, i64 15, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 12, i64 13, i64 13, i64 14, i64 15, i64 14, i64 14, i64 16, i64 16, i64 15, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 15, i64 16, i64 16, i64 13, i64 14, i64 14, i64 13, i64 14, i64 14, i64 15, i64 16, i64 15, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 15, i64 16, i64 12, i64 13, i64 13, i64 14, i64 14, i64 14, i64 14, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 15, i64 16, i64 16, i64 16, i64 16, i64 16], align 16
@_vq_quantlist__44u9_p9_1 = internal global [19 x i64] [i64 9, i64 8, i64 10, i64 7, i64 11, i64 6, i64 12, i64 5, i64 13, i64 4, i64 14, i64 3, i64 15, i64 2, i64 16, i64 1, i64 17, i64 0, i64 18], align 16
@_vq_auxt__44u9_p9_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u9_p9_1, ptr @_vq_quantmap__44u9_p9_1, i32 19, i32 19 }, align 8
@_vq_quantthresh__44u9_p9_1 = internal global [18 x float] [float -4.165000e+02, float -3.675000e+02, float -3.185000e+02, float -2.695000e+02, float -2.205000e+02, float -1.715000e+02, float -1.225000e+02, float -7.350000e+01, float -2.450000e+01, float 2.450000e+01, float 7.350000e+01, float 1.225000e+02, float 1.715000e+02, float 2.205000e+02, float 2.695000e+02, float 3.185000e+02, float 3.675000e+02, float 4.165000e+02], align 16
@_vq_quantmap__44u9_p9_1 = internal global [19 x i64] [i64 17, i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16, i64 18], align 16
@_vq_lengthlist__44u9_p9_2 = internal global [49 x i64] [i64 2, i64 4, i64 4, i64 5, i64 5, i64 5, i64 5, i64 5, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7], align 16
@_vq_quantlist__44u9_p9_2 = internal global [49 x i64] [i64 24, i64 23, i64 25, i64 22, i64 26, i64 21, i64 27, i64 20, i64 28, i64 19, i64 29, i64 18, i64 30, i64 17, i64 31, i64 16, i64 32, i64 15, i64 33, i64 14, i64 34, i64 13, i64 35, i64 12, i64 36, i64 11, i64 37, i64 10, i64 38, i64 9, i64 39, i64 8, i64 40, i64 7, i64 41, i64 6, i64 42, i64 5, i64 43, i64 4, i64 44, i64 3, i64 45, i64 2, i64 46, i64 1, i64 47, i64 0, i64 48], align 16
@_vq_auxt__44u9_p9_2 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__44u9_p9_2, ptr @_vq_quantmap__44u9_p9_2, i32 49, i32 49 }, align 8
@_vq_quantthresh__44u9_p9_2 = internal global [48 x float] [float -2.350000e+01, float -2.250000e+01, float -2.150000e+01, float -2.050000e+01, float -1.950000e+01, float -1.850000e+01, float -1.750000e+01, float -1.650000e+01, float -1.550000e+01, float -1.450000e+01, float -1.350000e+01, float -1.250000e+01, float -1.150000e+01, float -1.050000e+01, float -9.500000e+00, float -8.500000e+00, float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00, float 8.500000e+00, float 9.500000e+00, float 1.050000e+01, float 1.150000e+01, float 1.250000e+01, float 1.350000e+01, float 1.450000e+01, float 1.550000e+01, float 1.650000e+01, float 1.750000e+01, float 1.850000e+01, float 1.950000e+01, float 2.050000e+01, float 2.150000e+01, float 2.250000e+01, float 2.350000e+01], align 16
@_vq_quantmap__44u9_p9_2 = internal global [49 x i64] [i64 47, i64 45, i64 43, i64 41, i64 39, i64 37, i64 35, i64 33, i64 31, i64 29, i64 27, i64 25, i64 23, i64 21, i64 19, i64 17, i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16, i64 18, i64 20, i64 22, i64 24, i64 26, i64 28, i64 30, i64 32, i64 34, i64 36, i64 38, i64 40, i64 42, i64 44, i64 46, i64 48], align 16
@_huff_lengthlist__44u9__long = internal global [100 x i64] [i64 3, i64 9, i64 13, i64 13, i64 14, i64 14, i64 13, i64 14, i64 14, i64 13, i64 5, i64 5, i64 9, i64 10, i64 12, i64 13, i64 13, i64 14, i64 14, i64 14, i64 9, i64 5, i64 6, i64 6, i64 8, i64 11, i64 12, i64 14, i64 14, i64 14, i64 11, i64 7, i64 5, i64 3, i64 5, i64 8, i64 10, i64 12, i64 13, i64 12, i64 12, i64 10, i64 7, i64 4, i64 3, i64 5, i64 8, i64 10, i64 12, i64 13, i64 10, i64 12, i64 9, i64 7, i64 4, i64 4, i64 6, i64 8, i64 11, i64 13, i64 12, i64 12, i64 11, i64 9, i64 7, i64 5, i64 6, i64 7, i64 9, i64 13, i64 12, i64 12, i64 12, i64 11, i64 8, i64 7, i64 6, i64 6, i64 8, i64 12, i64 12, i64 12, i64 13, i64 12, i64 10, i64 9, i64 7, i64 7, i64 8, i64 11, i64 11, i64 13, i64 15, i64 15, i64 14, i64 12, i64 10, i64 9, i64 9, i64 10], align 16
@_res_8s_0 = internal global [1 x %struct.vorbis_residue_template] [%struct.vorbis_residue_template { i32 2, i32 0, ptr @_residue_44_mid, ptr @_huff_book__8c0_s_single, ptr @_huff_book__8c0_s_single, ptr @_resbook_8s_0, ptr @_resbook_8s_0 }], align 16
@_res_8s_1 = internal global [1 x %struct.vorbis_residue_template] [%struct.vorbis_residue_template { i32 2, i32 0, ptr @_residue_44_mid, ptr @_huff_book__8c1_s_single, ptr @_huff_book__8c1_s_single, ptr @_resbook_8s_1, ptr @_resbook_8s_1 }], align 16
@_huff_book__8c0_s_single = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__8c0_s_single, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_resbook_8s_0 = internal global %struct.static_bookblock { [12 x [3 x ptr]] [[3 x ptr] zeroinitializer, [3 x ptr] [ptr null, ptr null, ptr @_8c0_s_p1_0], [3 x ptr] [ptr null, ptr null, ptr @_8c0_s_p2_0], [3 x ptr] [ptr null, ptr null, ptr @_8c0_s_p3_0], [3 x ptr] [ptr null, ptr null, ptr @_8c0_s_p4_0], [3 x ptr] [ptr null, ptr null, ptr @_8c0_s_p5_0], [3 x ptr] [ptr null, ptr null, ptr @_8c0_s_p6_0], [3 x ptr] [ptr @_8c0_s_p7_0, ptr @_8c0_s_p7_1, ptr null], [3 x ptr] [ptr @_8c0_s_p8_0, ptr @_8c0_s_p8_1, ptr null], [3 x ptr] [ptr @_8c0_s_p9_0, ptr @_8c0_s_p9_1, ptr @_8c0_s_p9_2], [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer] }, align 8
@_huff_lengthlist__8c0_s_single = internal global [100 x i64] [i64 4, i64 5, i64 18, i64 7, i64 10, i64 6, i64 7, i64 8, i64 9, i64 10, i64 5, i64 2, i64 18, i64 5, i64 7, i64 5, i64 6, i64 7, i64 8, i64 11, i64 17, i64 17, i64 17, i64 17, i64 17, i64 17, i64 17, i64 17, i64 17, i64 17, i64 7, i64 4, i64 17, i64 6, i64 9, i64 6, i64 8, i64 10, i64 12, i64 15, i64 11, i64 7, i64 17, i64 9, i64 6, i64 6, i64 7, i64 9, i64 11, i64 15, i64 6, i64 4, i64 17, i64 6, i64 6, i64 4, i64 5, i64 8, i64 11, i64 16, i64 6, i64 6, i64 17, i64 8, i64 6, i64 5, i64 6, i64 9, i64 13, i64 16, i64 8, i64 9, i64 17, i64 11, i64 9, i64 8, i64 8, i64 11, i64 13, i64 17, i64 9, i64 12, i64 17, i64 15, i64 14, i64 13, i64 12, i64 13, i64 14, i64 17, i64 12, i64 15, i64 17, i64 17, i64 17, i64 17, i64 17, i64 16, i64 17, i64 17], align 16
@_8c0_s_p1_0 = internal global %struct.static_codebook { i64 8, i64 6561, ptr @_vq_lengthlist__8c0_s_p1_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__8c0_s_p1_0, ptr null, ptr @_vq_auxt__8c0_s_p1_0, ptr null, i32 0 }, align 8
@_8c0_s_p2_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__8c0_s_p2_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__8c0_s_p2_0, ptr null, ptr @_vq_auxt__8c0_s_p2_0, ptr null, i32 0 }, align 8
@_8c0_s_p3_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__8c0_s_p3_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__8c0_s_p3_0, ptr null, ptr @_vq_auxt__8c0_s_p3_0, ptr null, i32 0 }, align 8
@_8c0_s_p4_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__8c0_s_p4_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__8c0_s_p4_0, ptr null, ptr @_vq_auxt__8c0_s_p4_0, ptr null, i32 0 }, align 8
@_8c0_s_p5_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__8c0_s_p5_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__8c0_s_p5_0, ptr null, ptr @_vq_auxt__8c0_s_p5_0, ptr null, i32 0 }, align 8
@_8c0_s_p6_0 = internal global %struct.static_codebook { i64 2, i64 289, ptr @_vq_lengthlist__8c0_s_p6_0, i32 1, i64 -529530880, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__8c0_s_p6_0, ptr null, ptr @_vq_auxt__8c0_s_p6_0, ptr null, i32 0 }, align 8
@_8c0_s_p7_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__8c0_s_p7_0, i32 1, i64 -529137664, i64 1618345984, i32 2, i32 0, ptr @_vq_quantlist__8c0_s_p7_0, ptr null, ptr @_vq_auxt__8c0_s_p7_0, ptr null, i32 0 }, align 8
@_8c0_s_p7_1 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__8c0_s_p7_1, i32 1, i64 -531365888, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__8c0_s_p7_1, ptr null, ptr @_vq_auxt__8c0_s_p7_1, ptr null, i32 0 }, align 8
@_8c0_s_p8_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__8c0_s_p8_0, i32 1, i64 -526516224, i64 1616117760, i32 4, i32 0, ptr @_vq_quantlist__8c0_s_p8_0, ptr null, ptr @_vq_auxt__8c0_s_p8_0, ptr null, i32 0 }, align 8
@_8c0_s_p8_1 = internal global %struct.static_codebook { i64 2, i64 25, ptr @_vq_lengthlist__8c0_s_p8_1, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__8c0_s_p8_1, ptr null, ptr @_vq_auxt__8c0_s_p8_1, ptr null, i32 0 }, align 8
@_8c0_s_p9_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__8c0_s_p9_0, i32 1, i64 -518803456, i64 1628680192, i32 2, i32 0, ptr @_vq_quantlist__8c0_s_p9_0, ptr null, ptr @_vq_auxt__8c0_s_p9_0, ptr null, i32 0 }, align 8
@_8c0_s_p9_1 = internal global %struct.static_codebook { i64 2, i64 225, ptr @_vq_lengthlist__8c0_s_p9_1, i32 1, i64 -520986624, i64 1620377600, i32 4, i32 0, ptr @_vq_quantlist__8c0_s_p9_1, ptr null, ptr @_vq_auxt__8c0_s_p9_1, ptr null, i32 0 }, align 8
@_8c0_s_p9_2 = internal global %struct.static_codebook { i64 2, i64 441, ptr @_vq_lengthlist__8c0_s_p9_2, i32 1, i64 -529268736, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__8c0_s_p9_2, ptr null, ptr @_vq_auxt__8c0_s_p9_2, ptr null, i32 0 }, align 8
@_vq_quantlist__8c0_s_p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__8c0_s_p1_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8c0_s_p1_0, ptr @_vq_quantmap__8c0_s_p1_0, i32 3, i32 3 }, align 8
@_vq_lengthlist__8c0_s_p1_0 = internal global <{ [1641 x i64], [4920 x i64] }> <{ [1641 x i64] [i64 1, i64 5, i64 4, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 10, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 11, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 11, i64 11, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 11, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 11, i64 11, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 11, i64 11, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 10, i64 11, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 11, i64 11, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 11, i64 9], [4920 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__8c0_s_p1_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__8c0_s_p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__8c0_s_p2_0 = internal global [625 x i64] zeroinitializer, align 16
@_vq_quantlist__8c0_s_p2_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__8c0_s_p2_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8c0_s_p2_0, ptr @_vq_quantmap__8c0_s_p2_0, i32 5, i32 5 }, align 8
@_vq_quantthresh__8c0_s_p2_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__8c0_s_p2_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_quantlist__8c0_s_p3_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__8c0_s_p3_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8c0_s_p3_0, ptr @_vq_quantmap__8c0_s_p3_0, i32 5, i32 5 }, align 8
@_vq_lengthlist__8c0_s_p3_0 = internal global <{ [105 x i64], [520 x i64] }> <{ [105 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 5, i64 6, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 5, i64 5, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 7, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 7, i64 7, i64 8, i64 8], [520 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__8c0_s_p3_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__8c0_s_p3_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_quantlist__8c0_s_p4_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__8c0_s_p4_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8c0_s_p4_0, ptr @_vq_quantmap__8c0_s_p4_0, i32 9, i32 9 }, align 8
@_vq_lengthlist__8c0_s_p4_0 = internal global <{ [68 x i64], [13 x i64] }> <{ [68 x i64] [i64 1, i64 2, i64 3, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 10, i64 10], [13 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__8c0_s_p4_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__8c0_s_p4_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__8c0_s_p5_0 = internal global [81 x i64] [i64 1, i64 3, i64 3, i64 5, i64 5, i64 7, i64 6, i64 8, i64 8, i64 0, i64 0, i64 0, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 7, i64 7, i64 7, i64 7, i64 8, i64 9, i64 0, i64 0, i64 0, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 0, i64 0, i64 0, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 0, i64 0, i64 0, i64 9, i64 9, i64 8, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 9, i64 9, i64 8, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 10, i64 10, i64 9, i64 9, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 10, i64 10], align 16
@_vq_quantlist__8c0_s_p5_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__8c0_s_p5_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8c0_s_p5_0, ptr @_vq_quantmap__8c0_s_p5_0, i32 9, i32 9 }, align 8
@_vq_quantthresh__8c0_s_p5_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__8c0_s_p5_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__8c0_s_p6_0 = internal global [289 x i64] [i64 1, i64 3, i64 3, i64 6, i64 6, i64 8, i64 8, i64 9, i64 9, i64 8, i64 8, i64 10, i64 9, i64 10, i64 10, i64 11, i64 11, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 12, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 11, i64 0, i64 0, i64 0, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 9, i64 9, i64 11, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 0, i64 0, i64 0, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 10, i64 9, i64 10, i64 11, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 10, i64 9, i64 10, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 13, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 13, i64 14, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 14, i64 14, i64 14, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 14, i64 14, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14], align 16
@_vq_quantlist__8c0_s_p6_0 = internal global [17 x i64] [i64 8, i64 7, i64 9, i64 6, i64 10, i64 5, i64 11, i64 4, i64 12, i64 3, i64 13, i64 2, i64 14, i64 1, i64 15, i64 0, i64 16], align 16
@_vq_auxt__8c0_s_p6_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8c0_s_p6_0, ptr @_vq_quantmap__8c0_s_p6_0, i32 17, i32 17 }, align 8
@_vq_quantthresh__8c0_s_p6_0 = internal global [16 x float] [float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00], align 16
@_vq_quantmap__8c0_s_p6_0 = internal global [17 x i64] [i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16], align 16
@_vq_lengthlist__8c0_s_p7_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 7, i64 6, i64 6, i64 7, i64 6, i64 6, i64 4, i64 7, i64 7, i64 11, i64 9, i64 10, i64 12, i64 9, i64 10, i64 4, i64 7, i64 7, i64 10, i64 10, i64 10, i64 11, i64 9, i64 9, i64 6, i64 11, i64 10, i64 11, i64 11, i64 12, i64 11, i64 11, i64 11, i64 6, i64 10, i64 10, i64 11, i64 11, i64 12, i64 11, i64 10, i64 10, i64 6, i64 9, i64 10, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 7, i64 10, i64 11, i64 12, i64 11, i64 11, i64 12, i64 11, i64 12, i64 6, i64 9, i64 9, i64 10, i64 9, i64 9, i64 11, i64 10, i64 10, i64 6, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 10, i64 10], align 16
@_vq_quantlist__8c0_s_p7_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__8c0_s_p7_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8c0_s_p7_0, ptr @_vq_quantmap__8c0_s_p7_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__8c0_s_p7_0 = internal global [2 x float] [float -5.500000e+00, float 5.500000e+00], align 4
@_vq_quantmap__8c0_s_p7_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__8c0_s_p7_1 = internal global [121 x i64] [i64 1, i64 3, i64 3, i64 6, i64 6, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 9, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 8, i64 9, i64 10, i64 10, i64 10, i64 8, i64 8, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 10, i64 11, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 10, i64 10, i64 9, i64 9, i64 10, i64 10, i64 10, i64 9, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10], align 16
@_vq_quantlist__8c0_s_p7_1 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__8c0_s_p7_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8c0_s_p7_1, ptr @_vq_quantmap__8c0_s_p7_1, i32 11, i32 11 }, align 8
@_vq_quantthresh__8c0_s_p7_1 = internal global [10 x float] [float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00], align 16
@_vq_quantmap__8c0_s_p7_1 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_lengthlist__8c0_s_p8_0 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 7, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 7, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 7, i64 7, i64 8, i64 9, i64 10, i64 10, i64 7, i64 6, i64 6, i64 7, i64 7, i64 8, i64 7, i64 7, i64 7, i64 9, i64 9, i64 10, i64 12, i64 0, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 0, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 8, i64 9, i64 9, i64 9, i64 11, i64 10, i64 0, i64 0, i64 13, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 0, i64 13, i64 0, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 11, i64 10, i64 11, i64 11, i64 0, i64 0, i64 0, i64 8, i64 9, i64 10, i64 9, i64 10, i64 10, i64 13, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 8, i64 9, i64 9, i64 9, i64 10, i64 10, i64 13, i64 12, i64 12, i64 13, i64 0, i64 0, i64 0, i64 12, i64 0, i64 10, i64 10, i64 12, i64 11, i64 10, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 13, i64 13, i64 10, i64 10, i64 10, i64 11, i64 12, i64 0, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 13, i64 11, i64 0, i64 12, i64 12, i64 12, i64 13, i64 12, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 13, i64 13, i64 11, i64 13, i64 13, i64 11, i64 12], align 16
@_vq_quantlist__8c0_s_p8_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__8c0_s_p8_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8c0_s_p8_0, ptr @_vq_quantmap__8c0_s_p8_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__8c0_s_p8_0 = internal global [12 x float] [float -2.750000e+01, float -2.250000e+01, float -1.750000e+01, float -1.250000e+01, float -7.500000e+00, float -2.500000e+00, float 2.500000e+00, float 7.500000e+00, float 1.250000e+01, float 1.750000e+01, float 2.250000e+01, float 2.750000e+01], align 16
@_vq_quantmap__8c0_s_p8_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__8c0_s_p8_1 = internal global [25 x i64] [i64 1, i64 3, i64 4, i64 5, i64 5, i64 7, i64 6, i64 6, i64 6, i64 5, i64 7, i64 7, i64 7, i64 6, i64 6, i64 7, i64 7, i64 7, i64 6, i64 6, i64 7, i64 7, i64 7, i64 6, i64 6], align 16
@_vq_quantlist__8c0_s_p8_1 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__8c0_s_p8_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8c0_s_p8_1, ptr @_vq_quantmap__8c0_s_p8_1, i32 5, i32 5 }, align 8
@_vq_quantthresh__8c0_s_p8_1 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__8c0_s_p8_1 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__8c0_s_p9_0 = internal global [81 x i64] [i64 1, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7], align 16
@_vq_quantlist__8c0_s_p9_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__8c0_s_p9_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8c0_s_p9_0, ptr @_vq_quantmap__8c0_s_p9_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__8c0_s_p9_0 = internal global [2 x float] [float -1.575000e+02, float 1.575000e+02], align 4
@_vq_quantmap__8c0_s_p9_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__8c0_s_p9_1 = internal global [225 x i64] [i64 1, i64 4, i64 4, i64 5, i64 5, i64 10, i64 8, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 6, i64 6, i64 6, i64 7, i64 6, i64 11, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 7, i64 5, i64 6, i64 6, i64 6, i64 8, i64 7, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 7, i64 8, i64 8, i64 8, i64 9, i64 9, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 9, i64 8, i64 7, i64 8, i64 9, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11], align 16
@_vq_quantlist__8c0_s_p9_1 = internal global [15 x i64] [i64 7, i64 6, i64 8, i64 5, i64 9, i64 4, i64 10, i64 3, i64 11, i64 2, i64 12, i64 1, i64 13, i64 0, i64 14], align 16
@_vq_auxt__8c0_s_p9_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8c0_s_p9_1, ptr @_vq_quantmap__8c0_s_p9_1, i32 15, i32 15 }, align 8
@_vq_quantthresh__8c0_s_p9_1 = internal global [14 x float] [float -1.365000e+02, float -1.155000e+02, float -9.450000e+01, float -7.350000e+01, float -5.250000e+01, float -3.150000e+01, float -1.050000e+01, float 1.050000e+01, float 3.150000e+01, float 5.250000e+01, float 7.350000e+01, float 9.450000e+01, float 1.155000e+02, float 1.365000e+02], align 16
@_vq_quantmap__8c0_s_p9_1 = internal global [15 x i64] [i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14], align 16
@_vq_lengthlist__8c0_s_p9_2 = internal global [441 x i64] [i64 1, i64 5, i64 5, i64 7, i64 7, i64 8, i64 7, i64 8, i64 8, i64 10, i64 10, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 10, i64 12, i64 11, i64 12, i64 12, i64 12, i64 9, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 10, i64 11, i64 11, i64 12, i64 12, i64 11, i64 12, i64 8, i64 8, i64 7, i64 7, i64 8, i64 9, i64 10, i64 10, i64 10, i64 9, i64 10, i64 10, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 8, i64 9, i64 10, i64 10, i64 11, i64 10, i64 10, i64 11, i64 11, i64 12, i64 10, i64 10, i64 12, i64 12, i64 11, i64 11, i64 10, i64 9, i64 9, i64 10, i64 8, i64 9, i64 10, i64 10, i64 10, i64 9, i64 10, i64 10, i64 11, i64 11, i64 10, i64 11, i64 10, i64 10, i64 10, i64 12, i64 12, i64 12, i64 9, i64 10, i64 9, i64 10, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 11, i64 12, i64 11, i64 12, i64 11, i64 12, i64 10, i64 11, i64 10, i64 11, i64 9, i64 10, i64 9, i64 10, i64 9, i64 10, i64 10, i64 9, i64 10, i64 10, i64 11, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 11, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 11, i64 11, i64 11, i64 11, i64 10, i64 12, i64 10, i64 12, i64 12, i64 11, i64 12, i64 10, i64 10, i64 11, i64 10, i64 9, i64 11, i64 10, i64 11, i64 9, i64 10, i64 11, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 10, i64 9, i64 9, i64 11, i64 10, i64 9, i64 12, i64 11, i64 10, i64 12, i64 12, i64 11, i64 11, i64 11, i64 11, i64 10, i64 11, i64 11, i64 12, i64 11, i64 10, i64 12, i64 9, i64 11, i64 10, i64 11, i64 10, i64 10, i64 11, i64 10, i64 11, i64 9, i64 10, i64 10, i64 10, i64 11, i64 12, i64 11, i64 11, i64 12, i64 11, i64 10, i64 10, i64 11, i64 11, i64 9, i64 10, i64 10, i64 12, i64 10, i64 11, i64 10, i64 10, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 11, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 10, i64 11, i64 11, i64 9, i64 11, i64 10, i64 12, i64 10, i64 12, i64 11, i64 10, i64 11, i64 10, i64 10, i64 10, i64 11, i64 10, i64 10, i64 11, i64 11, i64 10, i64 11, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 10, i64 10, i64 10, i64 11, i64 10, i64 11, i64 12, i64 11, i64 10, i64 11, i64 10, i64 10, i64 11, i64 11, i64 10, i64 12, i64 10, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 10, i64 12, i64 10, i64 10, i64 11, i64 11, i64 11, i64 10, i64 10, i64 11, i64 10, i64 10, i64 10, i64 11, i64 10, i64 11, i64 10, i64 12, i64 11, i64 11, i64 10, i64 10, i64 10, i64 12, i64 10, i64 10, i64 11, i64 9, i64 10, i64 11, i64 11, i64 11, i64 10, i64 10, i64 11, i64 10, i64 10, i64 9, i64 11, i64 11, i64 12, i64 12, i64 11, i64 12, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 9, i64 10, i64 11, i64 10, i64 12, i64 10, i64 10, i64 10, i64 10, i64 11, i64 10, i64 10, i64 11, i64 10, i64 10, i64 12, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 12, i64 10, i64 10, i64 10, i64 10, i64 12, i64 9, i64 11, i64 10, i64 10, i64 11, i64 10, i64 12, i64 12, i64 10, i64 12, i64 12, i64 12, i64 10, i64 10, i64 10, i64 10, i64 9, i64 10, i64 11, i64 10, i64 10, i64 12, i64 10, i64 10, i64 12, i64 11, i64 10, i64 11, i64 10, i64 10, i64 12, i64 11, i64 10, i64 12, i64 10, i64 10, i64 11, i64 9, i64 11, i64 10, i64 9, i64 10, i64 9, i64 10], align 16
@_vq_quantlist__8c0_s_p9_2 = internal global [21 x i64] [i64 10, i64 9, i64 11, i64 8, i64 12, i64 7, i64 13, i64 6, i64 14, i64 5, i64 15, i64 4, i64 16, i64 3, i64 17, i64 2, i64 18, i64 1, i64 19, i64 0, i64 20], align 16
@_vq_auxt__8c0_s_p9_2 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8c0_s_p9_2, ptr @_vq_quantmap__8c0_s_p9_2, i32 21, i32 21 }, align 8
@_vq_quantthresh__8c0_s_p9_2 = internal global [20 x float] [float -9.500000e+00, float -8.500000e+00, float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00, float 8.500000e+00, float 9.500000e+00], align 16
@_vq_quantmap__8c0_s_p9_2 = internal global [21 x i64] [i64 19, i64 17, i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16, i64 18, i64 20], align 16
@_huff_book__8c1_s_single = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__8c1_s_single, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_resbook_8s_1 = internal global %struct.static_bookblock { [12 x [3 x ptr]] [[3 x ptr] zeroinitializer, [3 x ptr] [ptr null, ptr null, ptr @_8c1_s_p1_0], [3 x ptr] [ptr null, ptr null, ptr @_8c1_s_p2_0], [3 x ptr] [ptr null, ptr null, ptr @_8c1_s_p3_0], [3 x ptr] [ptr null, ptr null, ptr @_8c1_s_p4_0], [3 x ptr] [ptr null, ptr null, ptr @_8c1_s_p5_0], [3 x ptr] [ptr null, ptr null, ptr @_8c1_s_p6_0], [3 x ptr] [ptr @_8c1_s_p7_0, ptr @_8c1_s_p7_1, ptr null], [3 x ptr] [ptr @_8c1_s_p8_0, ptr @_8c1_s_p8_1, ptr null], [3 x ptr] [ptr @_8c1_s_p9_0, ptr @_8c1_s_p9_1, ptr @_8c1_s_p9_2], [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer] }, align 8
@_huff_lengthlist__8c1_s_single = internal global [100 x i64] [i64 4, i64 6, i64 18, i64 8, i64 11, i64 8, i64 8, i64 9, i64 9, i64 10, i64 4, i64 4, i64 18, i64 5, i64 9, i64 5, i64 6, i64 7, i64 8, i64 10, i64 18, i64 18, i64 18, i64 18, i64 17, i64 17, i64 17, i64 17, i64 17, i64 17, i64 7, i64 5, i64 17, i64 6, i64 11, i64 6, i64 7, i64 8, i64 9, i64 12, i64 12, i64 9, i64 17, i64 12, i64 8, i64 8, i64 9, i64 10, i64 10, i64 13, i64 7, i64 5, i64 17, i64 6, i64 8, i64 4, i64 5, i64 6, i64 8, i64 10, i64 6, i64 5, i64 17, i64 6, i64 8, i64 5, i64 4, i64 5, i64 7, i64 9, i64 7, i64 7, i64 17, i64 8, i64 9, i64 6, i64 5, i64 5, i64 6, i64 8, i64 8, i64 8, i64 17, i64 9, i64 11, i64 8, i64 6, i64 6, i64 6, i64 7, i64 9, i64 10, i64 17, i64 12, i64 12, i64 10, i64 9, i64 7, i64 7, i64 8], align 16
@_8c1_s_p1_0 = internal global %struct.static_codebook { i64 8, i64 6561, ptr @_vq_lengthlist__8c1_s_p1_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__8c1_s_p1_0, ptr null, ptr @_vq_auxt__8c1_s_p1_0, ptr null, i32 0 }, align 8
@_8c1_s_p2_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__8c1_s_p2_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__8c1_s_p2_0, ptr null, ptr @_vq_auxt__8c1_s_p2_0, ptr null, i32 0 }, align 8
@_8c1_s_p3_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__8c1_s_p3_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__8c1_s_p3_0, ptr null, ptr @_vq_auxt__8c1_s_p3_0, ptr null, i32 0 }, align 8
@_8c1_s_p4_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__8c1_s_p4_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__8c1_s_p4_0, ptr null, ptr @_vq_auxt__8c1_s_p4_0, ptr null, i32 0 }, align 8
@_8c1_s_p5_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__8c1_s_p5_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__8c1_s_p5_0, ptr null, ptr @_vq_auxt__8c1_s_p5_0, ptr null, i32 0 }, align 8
@_8c1_s_p6_0 = internal global %struct.static_codebook { i64 2, i64 289, ptr @_vq_lengthlist__8c1_s_p6_0, i32 1, i64 -529530880, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__8c1_s_p6_0, ptr null, ptr @_vq_auxt__8c1_s_p6_0, ptr null, i32 0 }, align 8
@_8c1_s_p7_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__8c1_s_p7_0, i32 1, i64 -529137664, i64 1618345984, i32 2, i32 0, ptr @_vq_quantlist__8c1_s_p7_0, ptr null, ptr @_vq_auxt__8c1_s_p7_0, ptr null, i32 0 }, align 8
@_8c1_s_p7_1 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__8c1_s_p7_1, i32 1, i64 -531365888, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__8c1_s_p7_1, ptr null, ptr @_vq_auxt__8c1_s_p7_1, ptr null, i32 0 }, align 8
@_8c1_s_p8_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__8c1_s_p8_0, i32 1, i64 -526516224, i64 1616117760, i32 4, i32 0, ptr @_vq_quantlist__8c1_s_p8_0, ptr null, ptr @_vq_auxt__8c1_s_p8_0, ptr null, i32 0 }, align 8
@_8c1_s_p8_1 = internal global %struct.static_codebook { i64 2, i64 25, ptr @_vq_lengthlist__8c1_s_p8_1, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__8c1_s_p8_1, ptr null, ptr @_vq_auxt__8c1_s_p8_1, ptr null, i32 0 }, align 8
@_8c1_s_p9_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__8c1_s_p9_0, i32 1, i64 -513964032, i64 1628680192, i32 4, i32 0, ptr @_vq_quantlist__8c1_s_p9_0, ptr null, ptr @_vq_auxt__8c1_s_p9_0, ptr null, i32 0 }, align 8
@_8c1_s_p9_1 = internal global %struct.static_codebook { i64 2, i64 225, ptr @_vq_lengthlist__8c1_s_p9_1, i32 1, i64 -520986624, i64 1620377600, i32 4, i32 0, ptr @_vq_quantlist__8c1_s_p9_1, ptr null, ptr @_vq_auxt__8c1_s_p9_1, ptr null, i32 0 }, align 8
@_8c1_s_p9_2 = internal global %struct.static_codebook { i64 2, i64 441, ptr @_vq_lengthlist__8c1_s_p9_2, i32 1, i64 -529268736, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__8c1_s_p9_2, ptr null, ptr @_vq_auxt__8c1_s_p9_2, ptr null, i32 0 }, align 8
@_vq_quantlist__8c1_s_p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__8c1_s_p1_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8c1_s_p1_0, ptr @_vq_quantmap__8c1_s_p1_0, i32 3, i32 3 }, align 8
@_vq_lengthlist__8c1_s_p1_0 = internal global <{ [1641 x i64], [4920 x i64] }> <{ [1641 x i64] [i64 1, i64 5, i64 5, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 8, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 8, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 10, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 10, i64 8], [4920 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__8c1_s_p1_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__8c1_s_p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__8c1_s_p2_0 = internal global [625 x i64] zeroinitializer, align 16
@_vq_quantlist__8c1_s_p2_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__8c1_s_p2_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8c1_s_p2_0, ptr @_vq_quantmap__8c1_s_p2_0, i32 5, i32 5 }, align 8
@_vq_quantthresh__8c1_s_p2_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__8c1_s_p2_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_quantlist__8c1_s_p3_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__8c1_s_p3_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8c1_s_p3_0, ptr @_vq_quantmap__8c1_s_p3_0, i32 5, i32 5 }, align 8
@_vq_lengthlist__8c1_s_p3_0 = internal global <{ [105 x i64], [520 x i64] }> <{ [105 x i64] [i64 2, i64 4, i64 4, i64 5, i64 5, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 4, i64 4, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 4, i64 4, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 6, i64 6, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 6, i64 6, i64 7, i64 7], [520 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__8c1_s_p3_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__8c1_s_p3_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_quantlist__8c1_s_p4_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__8c1_s_p4_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8c1_s_p4_0, ptr @_vq_quantmap__8c1_s_p4_0, i32 9, i32 9 }, align 8
@_vq_lengthlist__8c1_s_p4_0 = internal global <{ [68 x i64], [13 x i64] }> <{ [68 x i64] [i64 1, i64 2, i64 3, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 10, i64 10], [13 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__8c1_s_p4_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__8c1_s_p4_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__8c1_s_p5_0 = internal global [81 x i64] [i64 1, i64 3, i64 3, i64 4, i64 5, i64 6, i64 6, i64 8, i64 8, i64 0, i64 0, i64 0, i64 8, i64 8, i64 7, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 8, i64 8, i64 7, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 9, i64 10, i64 8, i64 8, i64 9, i64 9, i64 0, i64 0, i64 0, i64 10, i64 10, i64 8, i64 8, i64 9, i64 9, i64 0, i64 0, i64 0, i64 11, i64 10, i64 8, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 11, i64 11, i64 8, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 12, i64 12, i64 9, i64 9, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 10, i64 10], align 16
@_vq_quantlist__8c1_s_p5_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__8c1_s_p5_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8c1_s_p5_0, ptr @_vq_quantmap__8c1_s_p5_0, i32 9, i32 9 }, align 8
@_vq_quantthresh__8c1_s_p5_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__8c1_s_p5_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__8c1_s_p6_0 = internal global [289 x i64] [i64 1, i64 3, i64 3, i64 5, i64 5, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 0, i64 0, i64 0, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 9, i64 9, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 0, i64 0, i64 0, i64 9, i64 9, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 0, i64 0, i64 0, i64 10, i64 10, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 10, i64 10, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 11, i64 11, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 13, i64 14, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 14, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 14, i64 14, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 14, i64 14], align 16
@_vq_quantlist__8c1_s_p6_0 = internal global [17 x i64] [i64 8, i64 7, i64 9, i64 6, i64 10, i64 5, i64 11, i64 4, i64 12, i64 3, i64 13, i64 2, i64 14, i64 1, i64 15, i64 0, i64 16], align 16
@_vq_auxt__8c1_s_p6_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8c1_s_p6_0, ptr @_vq_quantmap__8c1_s_p6_0, i32 17, i32 17 }, align 8
@_vq_quantthresh__8c1_s_p6_0 = internal global [16 x float] [float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00], align 16
@_vq_quantmap__8c1_s_p6_0 = internal global [17 x i64] [i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16], align 16
@_vq_lengthlist__8c1_s_p7_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 6, i64 7, i64 6, i64 6, i64 4, i64 7, i64 7, i64 10, i64 9, i64 9, i64 10, i64 9, i64 9, i64 5, i64 7, i64 7, i64 10, i64 9, i64 9, i64 10, i64 9, i64 9, i64 6, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 10, i64 10, i64 6, i64 9, i64 9, i64 10, i64 9, i64 10, i64 11, i64 10, i64 10, i64 6, i64 9, i64 9, i64 10, i64 9, i64 9, i64 11, i64 9, i64 10, i64 7, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 6, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 9, i64 9, i64 6, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9], align 16
@_vq_quantlist__8c1_s_p7_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__8c1_s_p7_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8c1_s_p7_0, ptr @_vq_quantmap__8c1_s_p7_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__8c1_s_p7_0 = internal global [2 x float] [float -5.500000e+00, float 5.500000e+00], align 4
@_vq_quantmap__8c1_s_p7_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__8c1_s_p7_1 = internal global [121 x i64] [i64 2, i64 3, i64 3, i64 5, i64 5, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 10, i64 10, i64 9, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8], align 16
@_vq_quantlist__8c1_s_p7_1 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__8c1_s_p7_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8c1_s_p7_1, ptr @_vq_quantmap__8c1_s_p7_1, i32 11, i32 11 }, align 8
@_vq_quantthresh__8c1_s_p7_1 = internal global [10 x float] [float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00], align 16
@_vq_quantmap__8c1_s_p7_1 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_lengthlist__8c1_s_p8_0 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 7, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 10, i64 11, i64 11, i64 7, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 0, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 11, i64 11, i64 0, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 0, i64 12, i64 12, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 11, i64 11, i64 11, i64 0, i64 13, i64 12, i64 9, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 11, i64 0, i64 0, i64 0, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 10, i64 10, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 13, i64 13, i64 10, i64 10, i64 11, i64 11, i64 12, i64 11, i64 13, i64 12, i64 0, i64 0, i64 0, i64 14, i64 14, i64 10, i64 10, i64 11, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 0, i64 0, i64 12, i64 12, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 12, i64 12, i64 11, i64 10, i64 12, i64 11, i64 13, i64 12], align 16
@_vq_quantlist__8c1_s_p8_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__8c1_s_p8_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8c1_s_p8_0, ptr @_vq_quantmap__8c1_s_p8_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__8c1_s_p8_0 = internal global [12 x float] [float -2.750000e+01, float -2.250000e+01, float -1.750000e+01, float -1.250000e+01, float -7.500000e+00, float -2.500000e+00, float 2.500000e+00, float 7.500000e+00, float 1.250000e+01, float 1.750000e+01, float 2.250000e+01, float 2.750000e+01], align 16
@_vq_quantmap__8c1_s_p8_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__8c1_s_p8_1 = internal global [25 x i64] [i64 2, i64 3, i64 3, i64 5, i64 5, i64 6, i64 6, i64 6, i64 5, i64 5, i64 6, i64 6, i64 6, i64 5, i64 5, i64 6, i64 6, i64 6, i64 5, i64 5, i64 6, i64 6, i64 6, i64 5, i64 5], align 16
@_vq_quantlist__8c1_s_p8_1 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__8c1_s_p8_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8c1_s_p8_1, ptr @_vq_quantmap__8c1_s_p8_1, i32 5, i32 5 }, align 8
@_vq_quantthresh__8c1_s_p8_1 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__8c1_s_p8_1 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__8c1_s_p9_0 = internal global [169 x i64] [i64 1, i64 3, i64 3, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 5, i64 6, i64 6, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 6, i64 7, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9], align 16
@_vq_quantlist__8c1_s_p9_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__8c1_s_p9_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8c1_s_p9_0, ptr @_vq_quantmap__8c1_s_p9_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__8c1_s_p9_0 = internal global [12 x float] [float -1.732500e+03, float -1.417500e+03, float -1.102500e+03, float -7.875000e+02, float -4.725000e+02, float -1.575000e+02, float 1.575000e+02, float 4.725000e+02, float 7.875000e+02, float 1.102500e+03, float 1.417500e+03, float 1.732500e+03], align 16
@_vq_quantmap__8c1_s_p9_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__8c1_s_p9_1 = internal global [225 x i64] [i64 1, i64 4, i64 4, i64 5, i64 5, i64 7, i64 7, i64 9, i64 9, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 6, i64 5, i64 5, i64 6, i64 6, i64 9, i64 9, i64 10, i64 10, i64 12, i64 12, i64 12, i64 13, i64 15, i64 14, i64 6, i64 5, i64 5, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 12, i64 12, i64 12, i64 13, i64 14, i64 13, i64 17, i64 7, i64 7, i64 8, i64 8, i64 10, i64 10, i64 11, i64 11, i64 12, i64 13, i64 13, i64 13, i64 13, i64 13, i64 17, i64 7, i64 7, i64 8, i64 8, i64 10, i64 10, i64 11, i64 11, i64 13, i64 13, i64 13, i64 13, i64 14, i64 14, i64 17, i64 11, i64 11, i64 9, i64 9, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 13, i64 14, i64 15, i64 13, i64 17, i64 12, i64 12, i64 9, i64 9, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 14, i64 16, i64 17, i64 17, i64 17, i64 11, i64 12, i64 12, i64 12, i64 13, i64 13, i64 13, i64 14, i64 15, i64 14, i64 15, i64 15, i64 17, i64 17, i64 17, i64 12, i64 12, i64 11, i64 11, i64 13, i64 13, i64 14, i64 14, i64 15, i64 14, i64 15, i64 15, i64 17, i64 17, i64 17, i64 15, i64 15, i64 13, i64 13, i64 14, i64 14, i64 15, i64 14, i64 15, i64 15, i64 16, i64 15, i64 17, i64 17, i64 17, i64 15, i64 15, i64 13, i64 13, i64 13, i64 14, i64 14, i64 15, i64 15, i64 15, i64 15, i64 16, i64 17, i64 17, i64 17, i64 17, i64 16, i64 14, i64 15, i64 14, i64 14, i64 15, i64 14, i64 14, i64 15, i64 15, i64 15, i64 17, i64 17, i64 17, i64 17, i64 17, i64 14, i64 14, i64 16, i64 14, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15, i64 17, i64 17, i64 17, i64 17, i64 17, i64 17, i64 16, i64 16, i64 15, i64 17, i64 15, i64 15, i64 14, i64 17, i64 15, i64 17, i64 16, i64 17, i64 17, i64 17, i64 17, i64 16, i64 15, i64 14, i64 15, i64 15, i64 15, i64 15, i64 15, i64 15], align 16
@_vq_quantlist__8c1_s_p9_1 = internal global [15 x i64] [i64 7, i64 6, i64 8, i64 5, i64 9, i64 4, i64 10, i64 3, i64 11, i64 2, i64 12, i64 1, i64 13, i64 0, i64 14], align 16
@_vq_auxt__8c1_s_p9_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8c1_s_p9_1, ptr @_vq_quantmap__8c1_s_p9_1, i32 15, i32 15 }, align 8
@_vq_quantthresh__8c1_s_p9_1 = internal global [14 x float] [float -1.365000e+02, float -1.155000e+02, float -9.450000e+01, float -7.350000e+01, float -5.250000e+01, float -3.150000e+01, float -1.050000e+01, float 1.050000e+01, float 3.150000e+01, float 5.250000e+01, float 7.350000e+01, float 9.450000e+01, float 1.155000e+02, float 1.365000e+02], align 16
@_vq_quantmap__8c1_s_p9_1 = internal global [15 x i64] [i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14], align 16
@_vq_lengthlist__8c1_s_p9_2 = internal global [441 x i64] [i64 2, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 11, i64 11, i64 12, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 12, i64 11, i64 9, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 12, i64 11, i64 12, i64 11, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 12, i64 11, i64 12, i64 11, i64 11, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 12, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 12, i64 11, i64 11, i64 12, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 11, i64 12, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 11, i64 12, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 11, i64 11, i64 12, i64 11, i64 11, i64 12, i64 10, i64 10, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 12, i64 12, i64 11, i64 12, i64 11, i64 11, i64 12, i64 12, i64 12, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 12, i64 12, i64 11, i64 12, i64 12, i64 11, i64 12, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10], align 16
@_vq_quantlist__8c1_s_p9_2 = internal global [21 x i64] [i64 10, i64 9, i64 11, i64 8, i64 12, i64 7, i64 13, i64 6, i64 14, i64 5, i64 15, i64 4, i64 16, i64 3, i64 17, i64 2, i64 18, i64 1, i64 19, i64 0, i64 20], align 16
@_vq_auxt__8c1_s_p9_2 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8c1_s_p9_2, ptr @_vq_quantmap__8c1_s_p9_2, i32 21, i32 21 }, align 8
@_vq_quantthresh__8c1_s_p9_2 = internal global [20 x float] [float -9.500000e+00, float -8.500000e+00, float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00, float 8.500000e+00, float 9.500000e+00], align 16
@_vq_quantmap__8c1_s_p9_2 = internal global [21 x i64] [i64 19, i64 17, i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16, i64 18, i64 20], align 16
@_res_8u_0 = internal global [1 x %struct.vorbis_residue_template] [%struct.vorbis_residue_template { i32 1, i32 0, ptr @_residue_44_low_un, ptr @_huff_book__8u0__single, ptr @_huff_book__8u0__single, ptr @_resbook_8u_0, ptr @_resbook_8u_0 }], align 16
@_res_8u_1 = internal global [1 x %struct.vorbis_residue_template] [%struct.vorbis_residue_template { i32 1, i32 0, ptr @_residue_44_mid_un, ptr @_huff_book__8u1__single, ptr @_huff_book__8u1__single, ptr @_resbook_8u_1, ptr @_resbook_8u_1 }], align 16
@_huff_book__8u0__single = internal global %struct.static_codebook { i64 2, i64 64, ptr @_huff_lengthlist__8u0__single, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_resbook_8u_0 = internal global %struct.static_bookblock { [12 x [3 x ptr]] [[3 x ptr] zeroinitializer, [3 x ptr] [ptr null, ptr null, ptr @_8u0__p1_0], [3 x ptr] [ptr null, ptr null, ptr @_8u0__p2_0], [3 x ptr] [ptr null, ptr null, ptr @_8u0__p3_0], [3 x ptr] [ptr null, ptr null, ptr @_8u0__p4_0], [3 x ptr] [ptr null, ptr null, ptr @_8u0__p5_0], [3 x ptr] [ptr @_8u0__p6_0, ptr @_8u0__p6_1, ptr null], [3 x ptr] [ptr @_8u0__p7_0, ptr @_8u0__p7_1, ptr @_8u0__p7_2], [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer] }, align 8
@_huff_lengthlist__8u0__single = internal global [64 x i64] [i64 4, i64 7, i64 11, i64 9, i64 12, i64 8, i64 7, i64 10, i64 6, i64 4, i64 5, i64 5, i64 7, i64 5, i64 6, i64 16, i64 9, i64 5, i64 5, i64 6, i64 7, i64 7, i64 9, i64 16, i64 7, i64 4, i64 6, i64 5, i64 7, i64 5, i64 7, i64 17, i64 10, i64 7, i64 7, i64 8, i64 7, i64 7, i64 8, i64 18, i64 7, i64 5, i64 6, i64 4, i64 5, i64 4, i64 5, i64 15, i64 7, i64 6, i64 7, i64 5, i64 6, i64 4, i64 5, i64 15, i64 12, i64 13, i64 18, i64 12, i64 17, i64 11, i64 9, i64 17], align 16
@_8u0__p1_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__8u0__p1_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__8u0__p1_0, ptr null, ptr @_vq_auxt__8u0__p1_0, ptr null, i32 0 }, align 8
@_8u0__p2_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__8u0__p2_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__8u0__p2_0, ptr null, ptr @_vq_auxt__8u0__p2_0, ptr null, i32 0 }, align 8
@_8u0__p3_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__8u0__p3_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__8u0__p3_0, ptr null, ptr @_vq_auxt__8u0__p3_0, ptr null, i32 0 }, align 8
@_8u0__p4_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__8u0__p4_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__8u0__p4_0, ptr null, ptr @_vq_auxt__8u0__p4_0, ptr null, i32 0 }, align 8
@_8u0__p5_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__8u0__p5_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__8u0__p5_0, ptr null, ptr @_vq_auxt__8u0__p5_0, ptr null, i32 0 }, align 8
@_8u0__p6_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__8u0__p6_0, i32 1, i64 -526516224, i64 1616117760, i32 4, i32 0, ptr @_vq_quantlist__8u0__p6_0, ptr null, ptr @_vq_auxt__8u0__p6_0, ptr null, i32 0 }, align 8
@_8u0__p6_1 = internal global %struct.static_codebook { i64 2, i64 25, ptr @_vq_lengthlist__8u0__p6_1, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__8u0__p6_1, ptr null, ptr @_vq_auxt__8u0__p6_1, ptr null, i32 0 }, align 8
@_8u0__p7_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__8u0__p7_0, i32 1, i64 -518803456, i64 1628680192, i32 2, i32 0, ptr @_vq_quantlist__8u0__p7_0, ptr null, ptr @_vq_auxt__8u0__p7_0, ptr null, i32 0 }, align 8
@_8u0__p7_1 = internal global %struct.static_codebook { i64 2, i64 225, ptr @_vq_lengthlist__8u0__p7_1, i32 1, i64 -520986624, i64 1620377600, i32 4, i32 0, ptr @_vq_quantlist__8u0__p7_1, ptr null, ptr @_vq_auxt__8u0__p7_1, ptr null, i32 0 }, align 8
@_8u0__p7_2 = internal global %struct.static_codebook { i64 2, i64 441, ptr @_vq_lengthlist__8u0__p7_2, i32 1, i64 -529268736, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__8u0__p7_2, ptr null, ptr @_vq_auxt__8u0__p7_2, ptr null, i32 0 }, align 8
@_vq_lengthlist__8u0__p1_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 5, i64 7, i64 7, i64 5, i64 7, i64 7, i64 5, i64 8, i64 8, i64 8, i64 10, i64 10, i64 7, i64 10, i64 10, i64 5, i64 8, i64 8, i64 7, i64 10, i64 10, i64 8, i64 10, i64 10, i64 4, i64 9, i64 8, i64 8, i64 11, i64 11, i64 8, i64 11, i64 11, i64 7, i64 11, i64 11, i64 10, i64 11, i64 13, i64 10, i64 13, i64 13, i64 7, i64 11, i64 11, i64 10, i64 13, i64 12, i64 10, i64 13, i64 13, i64 5, i64 9, i64 8, i64 8, i64 11, i64 11, i64 8, i64 11, i64 11, i64 7, i64 11, i64 11, i64 9, i64 13, i64 13, i64 10, i64 12, i64 13, i64 7, i64 11, i64 11, i64 10, i64 13, i64 13, i64 10, i64 13, i64 11], align 16
@_vq_quantlist__8u0__p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__8u0__p1_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8u0__p1_0, ptr @_vq_quantmap__8u0__p1_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__8u0__p1_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__8u0__p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__8u0__p2_0 = internal global [81 x i64] [i64 2, i64 4, i64 4, i64 5, i64 6, i64 6, i64 5, i64 6, i64 6, i64 5, i64 7, i64 7, i64 6, i64 7, i64 8, i64 6, i64 7, i64 8, i64 5, i64 7, i64 7, i64 6, i64 8, i64 8, i64 7, i64 9, i64 7, i64 5, i64 7, i64 7, i64 7, i64 9, i64 9, i64 7, i64 8, i64 8, i64 6, i64 9, i64 8, i64 7, i64 7, i64 10, i64 8, i64 10, i64 10, i64 6, i64 8, i64 8, i64 8, i64 10, i64 8, i64 8, i64 10, i64 10, i64 5, i64 7, i64 7, i64 7, i64 8, i64 8, i64 7, i64 8, i64 9, i64 6, i64 8, i64 8, i64 8, i64 10, i64 10, i64 8, i64 8, i64 10, i64 6, i64 8, i64 9, i64 8, i64 10, i64 10, i64 7, i64 10, i64 8], align 16
@_vq_quantlist__8u0__p2_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__8u0__p2_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8u0__p2_0, ptr @_vq_quantmap__8u0__p2_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__8u0__p2_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__8u0__p2_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__8u0__p3_0 = internal global [625 x i64] [i64 1, i64 5, i64 5, i64 7, i64 7, i64 6, i64 7, i64 7, i64 9, i64 9, i64 6, i64 7, i64 7, i64 9, i64 9, i64 8, i64 10, i64 9, i64 11, i64 11, i64 8, i64 9, i64 9, i64 11, i64 11, i64 6, i64 8, i64 8, i64 10, i64 10, i64 8, i64 10, i64 10, i64 11, i64 11, i64 8, i64 10, i64 10, i64 11, i64 11, i64 10, i64 11, i64 11, i64 12, i64 12, i64 10, i64 11, i64 11, i64 12, i64 13, i64 6, i64 8, i64 8, i64 10, i64 10, i64 8, i64 10, i64 10, i64 11, i64 11, i64 8, i64 10, i64 10, i64 11, i64 11, i64 9, i64 10, i64 11, i64 12, i64 12, i64 10, i64 11, i64 11, i64 12, i64 12, i64 8, i64 11, i64 11, i64 14, i64 13, i64 10, i64 12, i64 11, i64 15, i64 13, i64 10, i64 12, i64 11, i64 14, i64 14, i64 12, i64 13, i64 12, i64 16, i64 14, i64 12, i64 14, i64 12, i64 16, i64 15, i64 8, i64 11, i64 11, i64 13, i64 14, i64 10, i64 11, i64 12, i64 13, i64 15, i64 10, i64 11, i64 12, i64 13, i64 15, i64 11, i64 12, i64 13, i64 14, i64 15, i64 12, i64 12, i64 14, i64 14, i64 16, i64 5, i64 8, i64 8, i64 11, i64 11, i64 9, i64 11, i64 11, i64 12, i64 12, i64 8, i64 10, i64 11, i64 12, i64 12, i64 11, i64 12, i64 12, i64 15, i64 14, i64 11, i64 12, i64 12, i64 14, i64 14, i64 7, i64 11, i64 10, i64 13, i64 12, i64 10, i64 11, i64 12, i64 13, i64 14, i64 10, i64 12, i64 12, i64 14, i64 13, i64 12, i64 13, i64 13, i64 14, i64 15, i64 12, i64 13, i64 13, i64 15, i64 15, i64 7, i64 10, i64 11, i64 12, i64 13, i64 10, i64 12, i64 11, i64 14, i64 13, i64 10, i64 12, i64 13, i64 13, i64 15, i64 12, i64 13, i64 12, i64 14, i64 14, i64 11, i64 13, i64 13, i64 15, i64 16, i64 9, i64 12, i64 12, i64 15, i64 14, i64 11, i64 13, i64 13, i64 15, i64 16, i64 11, i64 13, i64 13, i64 16, i64 16, i64 13, i64 14, i64 15, i64 15, i64 15, i64 12, i64 14, i64 15, i64 17, i64 16, i64 9, i64 12, i64 12, i64 14, i64 15, i64 11, i64 13, i64 13, i64 15, i64 16, i64 11, i64 13, i64 13, i64 16, i64 18, i64 13, i64 14, i64 14, i64 17, i64 16, i64 13, i64 15, i64 15, i64 17, i64 18, i64 5, i64 8, i64 9, i64 11, i64 11, i64 8, i64 11, i64 11, i64 12, i64 12, i64 8, i64 10, i64 11, i64 12, i64 12, i64 11, i64 12, i64 12, i64 14, i64 14, i64 11, i64 12, i64 12, i64 14, i64 15, i64 7, i64 11, i64 10, i64 12, i64 13, i64 10, i64 12, i64 12, i64 14, i64 13, i64 10, i64 11, i64 12, i64 13, i64 14, i64 11, i64 13, i64 13, i64 15, i64 14, i64 12, i64 13, i64 13, i64 14, i64 15, i64 7, i64 10, i64 11, i64 13, i64 13, i64 10, i64 12, i64 12, i64 13, i64 14, i64 10, i64 12, i64 12, i64 13, i64 13, i64 11, i64 13, i64 13, i64 16, i64 16, i64 12, i64 13, i64 13, i64 15, i64 14, i64 9, i64 12, i64 12, i64 16, i64 15, i64 10, i64 13, i64 13, i64 15, i64 15, i64 11, i64 13, i64 13, i64 17, i64 15, i64 12, i64 15, i64 15, i64 18, i64 17, i64 13, i64 14, i64 14, i64 15, i64 16, i64 9, i64 12, i64 12, i64 15, i64 15, i64 11, i64 13, i64 13, i64 15, i64 16, i64 11, i64 13, i64 13, i64 15, i64 15, i64 12, i64 15, i64 15, i64 16, i64 16, i64 13, i64 15, i64 14, i64 17, i64 15, i64 7, i64 11, i64 11, i64 15, i64 15, i64 10, i64 13, i64 13, i64 16, i64 15, i64 10, i64 13, i64 13, i64 15, i64 16, i64 14, i64 15, i64 15, i64 17, i64 19, i64 13, i64 15, i64 14, i64 15, i64 18, i64 9, i64 12, i64 12, i64 16, i64 16, i64 11, i64 13, i64 14, i64 17, i64 16, i64 11, i64 13, i64 13, i64 17, i64 16, i64 15, i64 15, i64 16, i64 17, i64 19, i64 13, i64 15, i64 16, i64 0, i64 18, i64 9, i64 12, i64 12, i64 16, i64 15, i64 11, i64 14, i64 13, i64 17, i64 17, i64 11, i64 13, i64 14, i64 16, i64 16, i64 15, i64 16, i64 16, i64 19, i64 18, i64 13, i64 15, i64 15, i64 17, i64 19, i64 11, i64 14, i64 14, i64 19, i64 16, i64 12, i64 14, i64 15, i64 0, i64 18, i64 12, i64 16, i64 15, i64 18, i64 17, i64 15, i64 15, i64 18, i64 16, i64 19, i64 14, i64 15, i64 17, i64 19, i64 19, i64 11, i64 14, i64 14, i64 18, i64 19, i64 13, i64 15, i64 14, i64 19, i64 19, i64 12, i64 16, i64 15, i64 18, i64 17, i64 15, i64 17, i64 15, i64 0, i64 16, i64 14, i64 17, i64 16, i64 19, i64 0, i64 7, i64 11, i64 11, i64 14, i64 14, i64 10, i64 12, i64 12, i64 15, i64 15, i64 10, i64 13, i64 13, i64 16, i64 15, i64 13, i64 15, i64 15, i64 17, i64 0, i64 14, i64 15, i64 15, i64 16, i64 19, i64 9, i64 12, i64 12, i64 16, i64 16, i64 11, i64 14, i64 14, i64 16, i64 16, i64 11, i64 13, i64 13, i64 16, i64 16, i64 14, i64 17, i64 16, i64 19, i64 0, i64 14, i64 18, i64 17, i64 17, i64 19, i64 9, i64 12, i64 12, i64 15, i64 16, i64 11, i64 13, i64 13, i64 15, i64 17, i64 12, i64 14, i64 13, i64 19, i64 16, i64 13, i64 15, i64 15, i64 17, i64 19, i64 15, i64 17, i64 16, i64 17, i64 19, i64 11, i64 14, i64 14, i64 19, i64 16, i64 12, i64 15, i64 15, i64 19, i64 17, i64 13, i64 14, i64 15, i64 17, i64 19, i64 14, i64 16, i64 17, i64 19, i64 19, i64 16, i64 15, i64 16, i64 17, i64 19, i64 11, i64 15, i64 14, i64 16, i64 16, i64 12, i64 15, i64 15, i64 19, i64 0, i64 12, i64 14, i64 15, i64 19, i64 19, i64 14, i64 16, i64 16, i64 0, i64 18, i64 15, i64 19, i64 14, i64 18, i64 16], align 16
@_vq_quantlist__8u0__p3_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__8u0__p3_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8u0__p3_0, ptr @_vq_quantmap__8u0__p3_0, i32 5, i32 5 }, align 8
@_vq_quantthresh__8u0__p3_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__8u0__p3_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__8u0__p4_0 = internal global [625 x i64] [i64 3, i64 5, i64 5, i64 8, i64 8, i64 5, i64 6, i64 7, i64 9, i64 9, i64 6, i64 7, i64 6, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 11, i64 9, i64 9, i64 9, i64 11, i64 10, i64 6, i64 7, i64 7, i64 10, i64 10, i64 7, i64 7, i64 8, i64 10, i64 10, i64 7, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 9, i64 10, i64 10, i64 11, i64 12, i64 6, i64 7, i64 7, i64 10, i64 10, i64 7, i64 8, i64 8, i64 10, i64 10, i64 7, i64 8, i64 7, i64 10, i64 10, i64 9, i64 10, i64 10, i64 12, i64 11, i64 10, i64 10, i64 10, i64 11, i64 10, i64 9, i64 10, i64 10, i64 12, i64 11, i64 10, i64 10, i64 10, i64 13, i64 11, i64 9, i64 10, i64 10, i64 12, i64 12, i64 11, i64 11, i64 12, i64 12, i64 13, i64 11, i64 11, i64 11, i64 12, i64 13, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 11, i64 12, i64 12, i64 10, i64 10, i64 11, i64 12, i64 12, i64 11, i64 11, i64 11, i64 13, i64 13, i64 11, i64 12, i64 12, i64 13, i64 13, i64 5, i64 7, i64 7, i64 10, i64 10, i64 7, i64 8, i64 8, i64 10, i64 10, i64 7, i64 8, i64 8, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 10, i64 11, i64 10, i64 12, i64 12, i64 7, i64 8, i64 8, i64 11, i64 11, i64 7, i64 8, i64 9, i64 10, i64 11, i64 8, i64 9, i64 9, i64 11, i64 11, i64 11, i64 10, i64 11, i64 10, i64 12, i64 10, i64 11, i64 11, i64 12, i64 13, i64 7, i64 8, i64 8, i64 10, i64 11, i64 8, i64 9, i64 8, i64 12, i64 10, i64 8, i64 9, i64 9, i64 11, i64 12, i64 10, i64 11, i64 10, i64 13, i64 11, i64 10, i64 11, i64 11, i64 13, i64 12, i64 9, i64 11, i64 10, i64 13, i64 12, i64 10, i64 10, i64 11, i64 12, i64 12, i64 10, i64 11, i64 11, i64 13, i64 13, i64 12, i64 10, i64 13, i64 11, i64 14, i64 11, i64 12, i64 12, i64 15, i64 13, i64 9, i64 11, i64 11, i64 13, i64 13, i64 10, i64 11, i64 11, i64 13, i64 12, i64 10, i64 11, i64 11, i64 12, i64 14, i64 12, i64 13, i64 11, i64 14, i64 12, i64 12, i64 12, i64 12, i64 14, i64 14, i64 5, i64 7, i64 7, i64 10, i64 10, i64 7, i64 8, i64 8, i64 10, i64 10, i64 7, i64 8, i64 8, i64 11, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 10, i64 11, i64 10, i64 12, i64 12, i64 7, i64 8, i64 8, i64 10, i64 11, i64 8, i64 9, i64 9, i64 12, i64 11, i64 8, i64 8, i64 9, i64 10, i64 11, i64 10, i64 11, i64 11, i64 12, i64 13, i64 11, i64 10, i64 11, i64 11, i64 13, i64 6, i64 8, i64 8, i64 10, i64 11, i64 8, i64 9, i64 9, i64 11, i64 11, i64 7, i64 9, i64 7, i64 11, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 10, i64 11, i64 10, i64 13, i64 10, i64 9, i64 11, i64 10, i64 13, i64 12, i64 10, i64 12, i64 11, i64 13, i64 13, i64 10, i64 10, i64 11, i64 12, i64 13, i64 11, i64 12, i64 13, i64 15, i64 14, i64 11, i64 11, i64 13, i64 12, i64 13, i64 9, i64 10, i64 11, i64 12, i64 13, i64 10, i64 11, i64 11, i64 12, i64 13, i64 10, i64 11, i64 10, i64 13, i64 12, i64 12, i64 13, i64 13, i64 13, i64 14, i64 12, i64 12, i64 11, i64 14, i64 11, i64 8, i64 10, i64 10, i64 12, i64 13, i64 10, i64 11, i64 11, i64 13, i64 13, i64 10, i64 11, i64 10, i64 13, i64 13, i64 12, i64 13, i64 14, i64 15, i64 14, i64 12, i64 12, i64 12, i64 14, i64 13, i64 9, i64 10, i64 10, i64 13, i64 12, i64 10, i64 10, i64 12, i64 13, i64 13, i64 10, i64 11, i64 11, i64 15, i64 12, i64 12, i64 12, i64 13, i64 15, i64 14, i64 12, i64 13, i64 13, i64 15, i64 13, i64 9, i64 10, i64 11, i64 12, i64 13, i64 10, i64 12, i64 10, i64 13, i64 12, i64 10, i64 11, i64 11, i64 12, i64 13, i64 12, i64 14, i64 12, i64 15, i64 13, i64 12, i64 12, i64 12, i64 15, i64 14, i64 11, i64 12, i64 11, i64 14, i64 13, i64 11, i64 11, i64 12, i64 14, i64 14, i64 12, i64 13, i64 13, i64 14, i64 13, i64 13, i64 11, i64 15, i64 11, i64 15, i64 14, i64 14, i64 14, i64 16, i64 15, i64 11, i64 12, i64 12, i64 13, i64 14, i64 11, i64 13, i64 11, i64 14, i64 14, i64 12, i64 12, i64 13, i64 14, i64 15, i64 12, i64 14, i64 12, i64 15, i64 12, i64 13, i64 15, i64 14, i64 16, i64 15, i64 8, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 10, i64 12, i64 13, i64 10, i64 11, i64 11, i64 13, i64 13, i64 12, i64 12, i64 12, i64 13, i64 14, i64 13, i64 13, i64 13, i64 15, i64 15, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 11, i64 11, i64 13, i64 12, i64 10, i64 10, i64 11, i64 13, i64 13, i64 12, i64 12, i64 12, i64 14, i64 14, i64 12, i64 12, i64 13, i64 15, i64 14, i64 9, i64 10, i64 10, i64 13, i64 12, i64 10, i64 10, i64 12, i64 12, i64 13, i64 10, i64 11, i64 10, i64 13, i64 13, i64 12, i64 13, i64 13, i64 14, i64 14, i64 12, i64 13, i64 12, i64 14, i64 13, i64 11, i64 12, i64 12, i64 14, i64 13, i64 12, i64 13, i64 12, i64 14, i64 14, i64 10, i64 12, i64 12, i64 14, i64 14, i64 14, i64 14, i64 14, i64 16, i64 14, i64 13, i64 12, i64 14, i64 12, i64 15, i64 10, i64 12, i64 12, i64 14, i64 15, i64 12, i64 13, i64 13, i64 14, i64 16, i64 11, i64 12, i64 11, i64 15, i64 14, i64 13, i64 14, i64 14, i64 14, i64 15, i64 13, i64 14, i64 11, i64 14, i64 12], align 16
@_vq_quantlist__8u0__p4_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__8u0__p4_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8u0__p4_0, ptr @_vq_quantmap__8u0__p4_0, i32 5, i32 5 }, align 8
@_vq_quantthresh__8u0__p4_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__8u0__p4_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__8u0__p5_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 7, i64 7, i64 7, i64 7, i64 9, i64 9, i64 4, i64 6, i64 6, i64 8, i64 7, i64 8, i64 8, i64 10, i64 10, i64 4, i64 6, i64 6, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 6, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 11, i64 11, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 11, i64 11, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 12, i64 11, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12], align 16
@_vq_quantlist__8u0__p5_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__8u0__p5_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8u0__p5_0, ptr @_vq_quantmap__8u0__p5_0, i32 9, i32 9 }, align 8
@_vq_quantthresh__8u0__p5_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__8u0__p5_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__8u0__p6_0 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 7, i64 7, i64 9, i64 9, i64 11, i64 11, i64 12, i64 12, i64 16, i64 16, i64 3, i64 6, i64 6, i64 9, i64 9, i64 11, i64 11, i64 12, i64 12, i64 13, i64 14, i64 18, i64 16, i64 3, i64 6, i64 7, i64 9, i64 9, i64 11, i64 11, i64 13, i64 12, i64 14, i64 14, i64 17, i64 16, i64 7, i64 9, i64 9, i64 11, i64 11, i64 12, i64 12, i64 14, i64 14, i64 14, i64 14, i64 17, i64 16, i64 7, i64 9, i64 9, i64 11, i64 11, i64 13, i64 12, i64 13, i64 13, i64 14, i64 14, i64 17, i64 0, i64 9, i64 11, i64 11, i64 12, i64 13, i64 14, i64 14, i64 14, i64 13, i64 15, i64 14, i64 17, i64 17, i64 9, i64 11, i64 11, i64 12, i64 12, i64 14, i64 14, i64 13, i64 14, i64 14, i64 15, i64 0, i64 0, i64 11, i64 12, i64 12, i64 15, i64 14, i64 15, i64 14, i64 15, i64 14, i64 15, i64 16, i64 17, i64 0, i64 11, i64 12, i64 13, i64 13, i64 13, i64 14, i64 14, i64 15, i64 14, i64 15, i64 15, i64 0, i64 0, i64 12, i64 14, i64 14, i64 15, i64 15, i64 14, i64 16, i64 15, i64 15, i64 17, i64 16, i64 0, i64 18, i64 13, i64 14, i64 14, i64 15, i64 14, i64 15, i64 14, i64 15, i64 16, i64 17, i64 16, i64 0, i64 0, i64 17, i64 17, i64 18, i64 0, i64 16, i64 18, i64 16, i64 0, i64 0, i64 0, i64 17, i64 0, i64 0, i64 16, i64 0, i64 0, i64 16, i64 16, i64 0, i64 15, i64 0, i64 17, i64 0, i64 0, i64 0, i64 0], align 16
@_vq_quantlist__8u0__p6_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__8u0__p6_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8u0__p6_0, ptr @_vq_quantmap__8u0__p6_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__8u0__p6_0 = internal global [12 x float] [float -2.750000e+01, float -2.250000e+01, float -1.750000e+01, float -1.250000e+01, float -7.500000e+00, float -2.500000e+00, float 2.500000e+00, float 7.500000e+00, float 1.250000e+01, float 1.750000e+01, float 2.250000e+01, float 2.750000e+01], align 16
@_vq_quantmap__8u0__p6_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__8u0__p6_1 = internal global [25 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 4, i64 6, i64 5, i64 7, i64 7, i64 4, i64 5, i64 6, i64 7, i64 7, i64 6, i64 7, i64 7, i64 7, i64 7, i64 6, i64 7, i64 7, i64 7, i64 7], align 16
@_vq_quantlist__8u0__p6_1 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__8u0__p6_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8u0__p6_1, ptr @_vq_quantmap__8u0__p6_1, i32 5, i32 5 }, align 8
@_vq_quantthresh__8u0__p6_1 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__8u0__p6_1 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__8u0__p7_0 = internal global [81 x i64] [i64 1, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7], align 16
@_vq_quantlist__8u0__p7_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__8u0__p7_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8u0__p7_0, ptr @_vq_quantmap__8u0__p7_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__8u0__p7_0 = internal global [2 x float] [float -1.575000e+02, float 1.575000e+02], align 4
@_vq_quantmap__8u0__p7_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__8u0__p7_1 = internal global [225 x i64] [i64 1, i64 5, i64 5, i64 5, i64 5, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 5, i64 7, i64 6, i64 8, i64 8, i64 9, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 6, i64 6, i64 7, i64 9, i64 7, i64 11, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 5, i64 6, i64 6, i64 11, i64 8, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 5, i64 6, i64 6, i64 9, i64 10, i64 11, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 7, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 7, i64 11, i64 8, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10], align 16
@_vq_quantlist__8u0__p7_1 = internal global [15 x i64] [i64 7, i64 6, i64 8, i64 5, i64 9, i64 4, i64 10, i64 3, i64 11, i64 2, i64 12, i64 1, i64 13, i64 0, i64 14], align 16
@_vq_auxt__8u0__p7_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8u0__p7_1, ptr @_vq_quantmap__8u0__p7_1, i32 15, i32 15 }, align 8
@_vq_quantthresh__8u0__p7_1 = internal global [14 x float] [float -1.365000e+02, float -1.155000e+02, float -9.450000e+01, float -7.350000e+01, float -5.250000e+01, float -3.150000e+01, float -1.050000e+01, float 1.050000e+01, float 3.150000e+01, float 5.250000e+01, float 7.350000e+01, float 9.450000e+01, float 1.155000e+02, float 1.365000e+02], align 16
@_vq_quantmap__8u0__p7_1 = internal global [15 x i64] [i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14], align 16
@_vq_lengthlist__8u0__p7_2 = internal global [441 x i64] [i64 1, i64 6, i64 5, i64 7, i64 7, i64 9, i64 9, i64 9, i64 9, i64 10, i64 12, i64 12, i64 10, i64 11, i64 11, i64 10, i64 11, i64 11, i64 11, i64 10, i64 11, i64 6, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 9, i64 10, i64 11, i64 11, i64 10, i64 11, i64 11, i64 11, i64 11, i64 10, i64 11, i64 11, i64 11, i64 11, i64 6, i64 7, i64 8, i64 9, i64 9, i64 9, i64 10, i64 11, i64 10, i64 11, i64 12, i64 11, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 12, i64 10, i64 8, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 9, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 9, i64 9, i64 10, i64 10, i64 11, i64 10, i64 9, i64 12, i64 10, i64 11, i64 10, i64 9, i64 10, i64 10, i64 10, i64 8, i64 9, i64 9, i64 10, i64 9, i64 10, i64 9, i64 9, i64 10, i64 10, i64 9, i64 10, i64 9, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 10, i64 8, i64 8, i64 9, i64 9, i64 10, i64 9, i64 11, i64 9, i64 8, i64 9, i64 9, i64 10, i64 11, i64 10, i64 10, i64 10, i64 11, i64 12, i64 9, i64 9, i64 11, i64 8, i64 9, i64 8, i64 11, i64 10, i64 11, i64 10, i64 10, i64 9, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 8, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 11, i64 12, i64 11, i64 10, i64 10, i64 10, i64 12, i64 11, i64 11, i64 11, i64 10, i64 8, i64 10, i64 9, i64 11, i64 10, i64 10, i64 11, i64 12, i64 10, i64 11, i64 12, i64 11, i64 11, i64 12, i64 11, i64 12, i64 12, i64 10, i64 11, i64 11, i64 10, i64 9, i64 9, i64 10, i64 11, i64 12, i64 10, i64 10, i64 10, i64 11, i64 10, i64 11, i64 11, i64 10, i64 12, i64 12, i64 10, i64 11, i64 10, i64 11, i64 12, i64 10, i64 9, i64 10, i64 10, i64 11, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 12, i64 11, i64 11, i64 11, i64 9, i64 11, i64 10, i64 11, i64 10, i64 11, i64 10, i64 9, i64 9, i64 10, i64 11, i64 11, i64 11, i64 10, i64 10, i64 11, i64 12, i64 12, i64 11, i64 12, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 11, i64 9, i64 11, i64 11, i64 12, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 12, i64 11, i64 11, i64 12, i64 11, i64 11, i64 11, i64 10, i64 11, i64 11, i64 9, i64 11, i64 10, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 12, i64 10, i64 11, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 9, i64 11, i64 10, i64 11, i64 11, i64 10, i64 10, i64 11, i64 11, i64 9, i64 11, i64 11, i64 12, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 10, i64 9, i64 10, i64 11, i64 11, i64 12, i64 11, i64 10, i64 10, i64 12, i64 11, i64 11, i64 12, i64 11, i64 12, i64 11, i64 11, i64 10, i64 10, i64 11, i64 11, i64 10, i64 12, i64 11, i64 10, i64 11, i64 10, i64 11, i64 10, i64 10, i64 10, i64 11, i64 11, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 12, i64 11, i64 11, i64 11, i64 11, i64 10, i64 9, i64 10, i64 11, i64 11, i64 11, i64 12, i64 11, i64 11, i64 11, i64 12, i64 10, i64 11, i64 11, i64 11, i64 9, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 11, i64 11, i64 12, i64 11, i64 10, i64 11, i64 12, i64 11, i64 10, i64 10, i64 11, i64 9, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 11, i64 11, i64 10, i64 12, i64 11, i64 11, i64 11, i64 12, i64 11, i64 11, i64 11, i64 10, i64 10, i64 11, i64 11], align 16
@_vq_quantlist__8u0__p7_2 = internal global [21 x i64] [i64 10, i64 9, i64 11, i64 8, i64 12, i64 7, i64 13, i64 6, i64 14, i64 5, i64 15, i64 4, i64 16, i64 3, i64 17, i64 2, i64 18, i64 1, i64 19, i64 0, i64 20], align 16
@_vq_auxt__8u0__p7_2 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8u0__p7_2, ptr @_vq_quantmap__8u0__p7_2, i32 21, i32 21 }, align 8
@_vq_quantthresh__8u0__p7_2 = internal global [20 x float] [float -9.500000e+00, float -8.500000e+00, float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00, float 8.500000e+00, float 9.500000e+00], align 16
@_vq_quantmap__8u0__p7_2 = internal global [21 x i64] [i64 19, i64 17, i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16, i64 18, i64 20], align 16
@_huff_book__8u1__single = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__8u1__single, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_resbook_8u_1 = internal global %struct.static_bookblock { [12 x [3 x ptr]] [[3 x ptr] zeroinitializer, [3 x ptr] [ptr null, ptr null, ptr @_8u1__p1_0], [3 x ptr] [ptr null, ptr null, ptr @_8u1__p2_0], [3 x ptr] [ptr null, ptr null, ptr @_8u1__p3_0], [3 x ptr] [ptr null, ptr null, ptr @_8u1__p4_0], [3 x ptr] [ptr null, ptr null, ptr @_8u1__p5_0], [3 x ptr] [ptr null, ptr null, ptr @_8u1__p6_0], [3 x ptr] [ptr @_8u1__p7_0, ptr @_8u1__p7_1, ptr null], [3 x ptr] [ptr @_8u1__p8_0, ptr @_8u1__p8_1, ptr null], [3 x ptr] [ptr @_8u1__p9_0, ptr @_8u1__p9_1, ptr @_8u1__p9_2], [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer] }, align 8
@_huff_lengthlist__8u1__single = internal global [100 x i64] [i64 4, i64 7, i64 13, i64 9, i64 15, i64 9, i64 16, i64 8, i64 10, i64 13, i64 7, i64 5, i64 8, i64 6, i64 9, i64 7, i64 10, i64 7, i64 10, i64 11, i64 11, i64 6, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 12, i64 16, i64 8, i64 5, i64 8, i64 6, i64 8, i64 6, i64 9, i64 7, i64 10, i64 12, i64 11, i64 7, i64 7, i64 7, i64 6, i64 7, i64 7, i64 7, i64 11, i64 15, i64 7, i64 5, i64 8, i64 6, i64 7, i64 5, i64 7, i64 6, i64 9, i64 13, i64 13, i64 9, i64 9, i64 8, i64 6, i64 6, i64 5, i64 5, i64 9, i64 14, i64 8, i64 6, i64 8, i64 6, i64 6, i64 4, i64 5, i64 3, i64 5, i64 13, i64 9, i64 9, i64 11, i64 8, i64 10, i64 7, i64 8, i64 4, i64 5, i64 12, i64 11, i64 16, i64 17, i64 15, i64 17, i64 12, i64 13, i64 8, i64 8, i64 15], align 16
@_8u1__p1_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__8u1__p1_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__8u1__p1_0, ptr null, ptr @_vq_auxt__8u1__p1_0, ptr null, i32 0 }, align 8
@_8u1__p2_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__8u1__p2_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__8u1__p2_0, ptr null, ptr @_vq_auxt__8u1__p2_0, ptr null, i32 0 }, align 8
@_8u1__p3_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__8u1__p3_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__8u1__p3_0, ptr null, ptr @_vq_auxt__8u1__p3_0, ptr null, i32 0 }, align 8
@_8u1__p4_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__8u1__p4_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__8u1__p4_0, ptr null, ptr @_vq_auxt__8u1__p4_0, ptr null, i32 0 }, align 8
@_8u1__p5_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__8u1__p5_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__8u1__p5_0, ptr null, ptr @_vq_auxt__8u1__p5_0, ptr null, i32 0 }, align 8
@_8u1__p6_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__8u1__p6_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__8u1__p6_0, ptr null, ptr @_vq_auxt__8u1__p6_0, ptr null, i32 0 }, align 8
@_8u1__p7_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__8u1__p7_0, i32 1, i64 -529137664, i64 1618345984, i32 2, i32 0, ptr @_vq_quantlist__8u1__p7_0, ptr null, ptr @_vq_auxt__8u1__p7_0, ptr null, i32 0 }, align 8
@_8u1__p7_1 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__8u1__p7_1, i32 1, i64 -531365888, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__8u1__p7_1, ptr null, ptr @_vq_auxt__8u1__p7_1, ptr null, i32 0 }, align 8
@_8u1__p8_0 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__8u1__p8_0, i32 1, i64 -524582912, i64 1618345984, i32 4, i32 0, ptr @_vq_quantlist__8u1__p8_0, ptr null, ptr @_vq_auxt__8u1__p8_0, ptr null, i32 0 }, align 8
@_8u1__p8_1 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__8u1__p8_1, i32 1, i64 -531365888, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__8u1__p8_1, ptr null, ptr @_vq_auxt__8u1__p8_1, ptr null, i32 0 }, align 8
@_8u1__p9_0 = internal global %struct.static_codebook { i64 2, i64 225, ptr @_vq_lengthlist__8u1__p9_0, i32 1, i64 -514071552, i64 1627381760, i32 4, i32 0, ptr @_vq_quantlist__8u1__p9_0, ptr null, ptr @_vq_auxt__8u1__p9_0, ptr null, i32 0 }, align 8
@_8u1__p9_1 = internal global %struct.static_codebook { i64 2, i64 225, ptr @_vq_lengthlist__8u1__p9_1, i32 1, i64 -522338304, i64 1620115456, i32 4, i32 0, ptr @_vq_quantlist__8u1__p9_1, ptr null, ptr @_vq_auxt__8u1__p9_1, ptr null, i32 0 }, align 8
@_8u1__p9_2 = internal global %struct.static_codebook { i64 2, i64 289, ptr @_vq_lengthlist__8u1__p9_2, i32 1, i64 -529530880, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__8u1__p9_2, ptr null, ptr @_vq_auxt__8u1__p9_2, ptr null, i32 0 }, align 8
@_vq_lengthlist__8u1__p1_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 5, i64 7, i64 7, i64 5, i64 7, i64 7, i64 5, i64 8, i64 8, i64 7, i64 9, i64 10, i64 7, i64 9, i64 9, i64 5, i64 8, i64 8, i64 7, i64 10, i64 9, i64 7, i64 9, i64 9, i64 5, i64 8, i64 8, i64 8, i64 10, i64 10, i64 8, i64 10, i64 10, i64 7, i64 10, i64 10, i64 9, i64 10, i64 12, i64 10, i64 12, i64 12, i64 7, i64 10, i64 10, i64 9, i64 12, i64 11, i64 10, i64 12, i64 12, i64 5, i64 8, i64 8, i64 8, i64 10, i64 10, i64 8, i64 10, i64 10, i64 7, i64 10, i64 10, i64 10, i64 12, i64 12, i64 9, i64 11, i64 12, i64 7, i64 10, i64 10, i64 10, i64 12, i64 12, i64 9, i64 12, i64 10], align 16
@_vq_quantlist__8u1__p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__8u1__p1_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8u1__p1_0, ptr @_vq_quantmap__8u1__p1_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__8u1__p1_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__8u1__p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__8u1__p2_0 = internal global [81 x i64] [i64 3, i64 4, i64 5, i64 5, i64 6, i64 6, i64 5, i64 6, i64 6, i64 5, i64 7, i64 6, i64 6, i64 7, i64 8, i64 6, i64 7, i64 8, i64 5, i64 6, i64 6, i64 6, i64 8, i64 7, i64 6, i64 8, i64 7, i64 5, i64 6, i64 6, i64 7, i64 8, i64 8, i64 6, i64 7, i64 7, i64 6, i64 8, i64 7, i64 7, i64 7, i64 9, i64 8, i64 9, i64 9, i64 6, i64 7, i64 8, i64 7, i64 9, i64 7, i64 8, i64 9, i64 9, i64 5, i64 6, i64 6, i64 6, i64 7, i64 7, i64 7, i64 8, i64 8, i64 6, i64 8, i64 7, i64 8, i64 9, i64 9, i64 7, i64 7, i64 9, i64 6, i64 7, i64 8, i64 8, i64 9, i64 9, i64 7, i64 9, i64 7], align 16
@_vq_quantlist__8u1__p2_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__8u1__p2_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8u1__p2_0, ptr @_vq_quantmap__8u1__p2_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__8u1__p2_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__8u1__p2_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__8u1__p3_0 = internal global [625 x i64] [i64 1, i64 5, i64 5, i64 7, i64 7, i64 6, i64 7, i64 7, i64 9, i64 9, i64 6, i64 7, i64 7, i64 9, i64 9, i64 8, i64 10, i64 9, i64 11, i64 11, i64 9, i64 9, i64 9, i64 11, i64 11, i64 6, i64 8, i64 8, i64 10, i64 10, i64 8, i64 10, i64 10, i64 11, i64 11, i64 8, i64 9, i64 10, i64 11, i64 11, i64 10, i64 11, i64 11, i64 12, i64 12, i64 10, i64 11, i64 11, i64 12, i64 13, i64 6, i64 8, i64 8, i64 10, i64 10, i64 8, i64 10, i64 9, i64 11, i64 11, i64 8, i64 10, i64 9, i64 11, i64 11, i64 10, i64 11, i64 11, i64 12, i64 12, i64 10, i64 11, i64 11, i64 12, i64 12, i64 9, i64 11, i64 11, i64 14, i64 13, i64 10, i64 12, i64 11, i64 14, i64 14, i64 10, i64 12, i64 11, i64 14, i64 13, i64 12, i64 13, i64 13, i64 15, i64 14, i64 12, i64 13, i64 13, i64 15, i64 14, i64 8, i64 11, i64 11, i64 13, i64 14, i64 10, i64 11, i64 12, i64 13, i64 15, i64 10, i64 11, i64 12, i64 14, i64 14, i64 12, i64 13, i64 13, i64 14, i64 15, i64 12, i64 13, i64 13, i64 14, i64 15, i64 5, i64 8, i64 8, i64 11, i64 11, i64 8, i64 10, i64 10, i64 12, i64 12, i64 8, i64 10, i64 10, i64 12, i64 12, i64 11, i64 12, i64 12, i64 14, i64 13, i64 11, i64 12, i64 12, i64 13, i64 14, i64 8, i64 10, i64 10, i64 12, i64 12, i64 9, i64 11, i64 12, i64 13, i64 14, i64 10, i64 12, i64 12, i64 13, i64 13, i64 12, i64 12, i64 13, i64 14, i64 14, i64 11, i64 13, i64 13, i64 15, i64 15, i64 7, i64 10, i64 10, i64 12, i64 12, i64 9, i64 12, i64 11, i64 14, i64 12, i64 10, i64 11, i64 12, i64 13, i64 14, i64 12, i64 13, i64 12, i64 14, i64 14, i64 12, i64 13, i64 13, i64 15, i64 16, i64 10, i64 12, i64 12, i64 15, i64 14, i64 11, i64 12, i64 13, i64 15, i64 15, i64 11, i64 13, i64 13, i64 15, i64 16, i64 14, i64 14, i64 15, i64 15, i64 16, i64 13, i64 14, i64 15, i64 17, i64 15, i64 9, i64 12, i64 12, i64 14, i64 15, i64 11, i64 13, i64 12, i64 15, i64 15, i64 11, i64 13, i64 13, i64 15, i64 15, i64 13, i64 14, i64 13, i64 15, i64 14, i64 13, i64 14, i64 14, i64 17, i64 0, i64 5, i64 8, i64 8, i64 11, i64 11, i64 8, i64 10, i64 10, i64 12, i64 12, i64 8, i64 10, i64 10, i64 12, i64 12, i64 11, i64 12, i64 12, i64 14, i64 14, i64 11, i64 12, i64 12, i64 14, i64 14, i64 7, i64 10, i64 10, i64 12, i64 12, i64 10, i64 12, i64 12, i64 13, i64 13, i64 9, i64 11, i64 12, i64 12, i64 13, i64 11, i64 12, i64 13, i64 15, i64 15, i64 11, i64 12, i64 13, i64 14, i64 15, i64 8, i64 10, i64 10, i64 12, i64 12, i64 10, i64 12, i64 11, i64 13, i64 13, i64 10, i64 12, i64 11, i64 13, i64 13, i64 11, i64 13, i64 13, i64 15, i64 14, i64 12, i64 13, i64 12, i64 15, i64 13, i64 9, i64 12, i64 12, i64 14, i64 14, i64 11, i64 13, i64 13, i64 16, i64 15, i64 11, i64 12, i64 13, i64 16, i64 15, i64 13, i64 14, i64 15, i64 16, i64 16, i64 13, i64 13, i64 15, i64 15, i64 16, i64 10, i64 12, i64 12, i64 15, i64 14, i64 11, i64 13, i64 13, i64 14, i64 16, i64 11, i64 13, i64 13, i64 15, i64 16, i64 13, i64 15, i64 15, i64 16, i64 17, i64 13, i64 15, i64 14, i64 16, i64 15, i64 8, i64 11, i64 11, i64 14, i64 15, i64 10, i64 12, i64 12, i64 15, i64 15, i64 10, i64 12, i64 12, i64 15, i64 16, i64 14, i64 15, i64 15, i64 16, i64 17, i64 13, i64 14, i64 14, i64 16, i64 16, i64 9, i64 12, i64 12, i64 15, i64 15, i64 11, i64 13, i64 14, i64 15, i64 17, i64 11, i64 13, i64 13, i64 15, i64 16, i64 14, i64 15, i64 16, i64 19, i64 17, i64 13, i64 15, i64 15, i64 0, i64 17, i64 9, i64 12, i64 12, i64 15, i64 15, i64 11, i64 14, i64 13, i64 16, i64 15, i64 11, i64 13, i64 13, i64 15, i64 16, i64 15, i64 15, i64 15, i64 18, i64 17, i64 13, i64 15, i64 15, i64 17, i64 17, i64 11, i64 15, i64 14, i64 18, i64 16, i64 12, i64 14, i64 15, i64 17, i64 17, i64 12, i64 15, i64 15, i64 18, i64 18, i64 15, i64 15, i64 16, i64 15, i64 19, i64 14, i64 16, i64 16, i64 0, i64 0, i64 11, i64 14, i64 14, i64 16, i64 17, i64 12, i64 15, i64 14, i64 18, i64 17, i64 12, i64 15, i64 15, i64 18, i64 18, i64 15, i64 17, i64 15, i64 18, i64 16, i64 14, i64 16, i64 16, i64 18, i64 18, i64 7, i64 11, i64 11, i64 14, i64 14, i64 10, i64 12, i64 12, i64 15, i64 15, i64 10, i64 12, i64 13, i64 15, i64 15, i64 13, i64 14, i64 15, i64 16, i64 16, i64 14, i64 15, i64 15, i64 18, i64 18, i64 9, i64 12, i64 12, i64 15, i64 15, i64 11, i64 13, i64 13, i64 16, i64 15, i64 11, i64 12, i64 13, i64 16, i64 16, i64 14, i64 15, i64 15, i64 17, i64 16, i64 15, i64 16, i64 16, i64 17, i64 17, i64 9, i64 12, i64 12, i64 15, i64 15, i64 11, i64 13, i64 13, i64 15, i64 17, i64 11, i64 14, i64 13, i64 16, i64 15, i64 13, i64 15, i64 15, i64 17, i64 17, i64 15, i64 15, i64 15, i64 18, i64 17, i64 11, i64 14, i64 14, i64 17, i64 15, i64 12, i64 14, i64 15, i64 17, i64 18, i64 13, i64 13, i64 15, i64 17, i64 17, i64 14, i64 16, i64 16, i64 19, i64 18, i64 16, i64 15, i64 17, i64 17, i64 0, i64 11, i64 14, i64 14, i64 17, i64 17, i64 12, i64 15, i64 15, i64 18, i64 0, i64 12, i64 15, i64 14, i64 18, i64 16, i64 14, i64 17, i64 17, i64 19, i64 0, i64 16, i64 18, i64 15, i64 0, i64 16], align 16
@_vq_quantlist__8u1__p3_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__8u1__p3_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8u1__p3_0, ptr @_vq_quantmap__8u1__p3_0, i32 5, i32 5 }, align 8
@_vq_quantthresh__8u1__p3_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__8u1__p3_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__8u1__p4_0 = internal global [625 x i64] [i64 4, i64 5, i64 5, i64 9, i64 9, i64 6, i64 7, i64 7, i64 9, i64 9, i64 6, i64 7, i64 7, i64 9, i64 9, i64 9, i64 9, i64 9, i64 11, i64 11, i64 9, i64 9, i64 9, i64 11, i64 11, i64 6, i64 7, i64 7, i64 9, i64 9, i64 7, i64 7, i64 8, i64 9, i64 10, i64 7, i64 7, i64 8, i64 9, i64 10, i64 9, i64 9, i64 10, i64 10, i64 11, i64 9, i64 9, i64 10, i64 10, i64 12, i64 6, i64 7, i64 7, i64 9, i64 9, i64 7, i64 8, i64 7, i64 10, i64 9, i64 7, i64 8, i64 7, i64 10, i64 9, i64 9, i64 10, i64 9, i64 12, i64 11, i64 10, i64 10, i64 9, i64 12, i64 10, i64 9, i64 10, i64 10, i64 12, i64 11, i64 9, i64 10, i64 10, i64 12, i64 11, i64 9, i64 10, i64 10, i64 12, i64 12, i64 11, i64 11, i64 12, i64 12, i64 13, i64 11, i64 11, i64 12, i64 12, i64 13, i64 9, i64 9, i64 10, i64 12, i64 11, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 10, i64 12, i64 12, i64 11, i64 12, i64 11, i64 13, i64 12, i64 11, i64 12, i64 11, i64 13, i64 12, i64 6, i64 7, i64 7, i64 9, i64 9, i64 7, i64 8, i64 8, i64 10, i64 10, i64 7, i64 8, i64 7, i64 10, i64 9, i64 10, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 10, i64 12, i64 11, i64 7, i64 8, i64 7, i64 10, i64 10, i64 7, i64 7, i64 9, i64 10, i64 11, i64 8, i64 9, i64 9, i64 11, i64 10, i64 10, i64 10, i64 11, i64 10, i64 12, i64 10, i64 10, i64 11, i64 12, i64 12, i64 7, i64 8, i64 8, i64 10, i64 10, i64 7, i64 9, i64 8, i64 11, i64 10, i64 8, i64 8, i64 9, i64 11, i64 11, i64 10, i64 11, i64 10, i64 12, i64 11, i64 10, i64 11, i64 11, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 11, i64 11, i64 13, i64 12, i64 11, i64 10, i64 12, i64 10, i64 14, i64 12, i64 12, i64 12, i64 13, i64 14, i64 9, i64 10, i64 10, i64 12, i64 12, i64 9, i64 11, i64 10, i64 12, i64 12, i64 10, i64 11, i64 11, i64 12, i64 12, i64 11, i64 12, i64 11, i64 14, i64 12, i64 12, i64 12, i64 12, i64 14, i64 14, i64 5, i64 7, i64 7, i64 9, i64 9, i64 7, i64 7, i64 7, i64 9, i64 10, i64 7, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 10, i64 10, i64 10, i64 12, i64 12, i64 7, i64 8, i64 8, i64 10, i64 10, i64 8, i64 9, i64 8, i64 11, i64 10, i64 7, i64 8, i64 9, i64 10, i64 11, i64 10, i64 10, i64 10, i64 11, i64 12, i64 10, i64 10, i64 11, i64 11, i64 13, i64 6, i64 7, i64 8, i64 10, i64 10, i64 8, i64 9, i64 9, i64 10, i64 10, i64 7, i64 9, i64 7, i64 11, i64 10, i64 10, i64 11, i64 10, i64 12, i64 12, i64 10, i64 11, i64 10, i64 12, i64 10, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 11, i64 11, i64 13, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 12, i64 12, i64 12, i64 14, i64 13, i64 11, i64 11, i64 12, i64 11, i64 14, i64 9, i64 10, i64 10, i64 11, i64 12, i64 10, i64 11, i64 11, i64 12, i64 13, i64 9, i64 10, i64 10, i64 12, i64 12, i64 12, i64 12, i64 12, i64 14, i64 13, i64 11, i64 12, i64 10, i64 14, i64 11, i64 9, i64 9, i64 10, i64 11, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 12, i64 12, i64 12, i64 14, i64 14, i64 11, i64 12, i64 12, i64 13, i64 12, i64 9, i64 10, i64 9, i64 12, i64 12, i64 9, i64 10, i64 11, i64 12, i64 13, i64 10, i64 11, i64 10, i64 13, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 12, i64 12, i64 12, i64 13, i64 13, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 11, i64 10, i64 13, i64 12, i64 10, i64 10, i64 11, i64 12, i64 13, i64 12, i64 13, i64 12, i64 14, i64 13, i64 12, i64 12, i64 12, i64 13, i64 14, i64 11, i64 12, i64 11, i64 14, i64 13, i64 10, i64 10, i64 11, i64 13, i64 13, i64 12, i64 12, i64 12, i64 14, i64 13, i64 12, i64 10, i64 14, i64 10, i64 15, i64 13, i64 14, i64 14, i64 14, i64 14, i64 11, i64 11, i64 12, i64 13, i64 14, i64 10, i64 12, i64 11, i64 13, i64 13, i64 12, i64 12, i64 12, i64 13, i64 15, i64 12, i64 13, i64 11, i64 15, i64 12, i64 13, i64 13, i64 14, i64 14, i64 14, i64 9, i64 10, i64 9, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 10, i64 12, i64 12, i64 11, i64 11, i64 12, i64 12, i64 13, i64 12, i64 12, i64 12, i64 14, i64 14, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 11, i64 10, i64 13, i64 12, i64 10, i64 10, i64 11, i64 12, i64 13, i64 12, i64 12, i64 12, i64 14, i64 13, i64 12, i64 12, i64 13, i64 13, i64 14, i64 9, i64 10, i64 10, i64 12, i64 13, i64 10, i64 10, i64 11, i64 11, i64 12, i64 9, i64 11, i64 10, i64 13, i64 12, i64 12, i64 12, i64 12, i64 13, i64 14, i64 12, i64 13, i64 12, i64 14, i64 13, i64 11, i64 12, i64 11, i64 13, i64 13, i64 12, i64 13, i64 12, i64 14, i64 13, i64 10, i64 11, i64 12, i64 13, i64 13, i64 13, i64 13, i64 13, i64 14, i64 15, i64 12, i64 11, i64 14, i64 12, i64 14, i64 11, i64 11, i64 12, i64 12, i64 13, i64 12, i64 12, i64 12, i64 13, i64 14, i64 10, i64 12, i64 10, i64 14, i64 13, i64 13, i64 13, i64 13, i64 14, i64 15, i64 12, i64 14, i64 11, i64 15, i64 10], align 16
@_vq_quantlist__8u1__p4_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__8u1__p4_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8u1__p4_0, ptr @_vq_quantmap__8u1__p4_0, i32 5, i32 5 }, align 8
@_vq_quantthresh__8u1__p4_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__8u1__p4_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__8u1__p5_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 7, i64 7, i64 7, i64 7, i64 9, i64 9, i64 4, i64 6, i64 5, i64 8, i64 7, i64 8, i64 8, i64 10, i64 10, i64 4, i64 6, i64 6, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 11, i64 11, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 11, i64 11, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 12, i64 11, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 13, i64 12, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13], align 16
@_vq_quantlist__8u1__p5_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__8u1__p5_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8u1__p5_0, ptr @_vq_quantmap__8u1__p5_0, i32 9, i32 9 }, align 8
@_vq_quantthresh__8u1__p5_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__8u1__p5_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__8u1__p6_0 = internal global [81 x i64] [i64 3, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 4, i64 4, i64 5, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 4, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 6, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 6, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 9, i64 10, i64 10, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 8, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10], align 16
@_vq_quantlist__8u1__p6_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__8u1__p6_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8u1__p6_0, ptr @_vq_quantmap__8u1__p6_0, i32 9, i32 9 }, align 8
@_vq_quantthresh__8u1__p6_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__8u1__p6_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__8u1__p7_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 5, i64 7, i64 7, i64 5, i64 7, i64 7, i64 5, i64 9, i64 9, i64 8, i64 10, i64 10, i64 8, i64 10, i64 10, i64 5, i64 9, i64 9, i64 7, i64 10, i64 10, i64 8, i64 10, i64 10, i64 4, i64 10, i64 10, i64 9, i64 12, i64 12, i64 9, i64 11, i64 11, i64 7, i64 12, i64 11, i64 10, i64 11, i64 13, i64 10, i64 13, i64 13, i64 7, i64 12, i64 12, i64 10, i64 13, i64 12, i64 10, i64 13, i64 13, i64 4, i64 10, i64 10, i64 9, i64 12, i64 12, i64 9, i64 12, i64 12, i64 7, i64 12, i64 12, i64 10, i64 13, i64 13, i64 10, i64 12, i64 13, i64 7, i64 11, i64 12, i64 10, i64 13, i64 13, i64 10, i64 13, i64 11], align 16
@_vq_quantlist__8u1__p7_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__8u1__p7_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8u1__p7_0, ptr @_vq_quantmap__8u1__p7_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__8u1__p7_0 = internal global [2 x float] [float -5.500000e+00, float 5.500000e+00], align 4
@_vq_quantmap__8u1__p7_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__8u1__p7_1 = internal global [121 x i64] [i64 2, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 4, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 4, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10], align 16
@_vq_quantlist__8u1__p7_1 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__8u1__p7_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8u1__p7_1, ptr @_vq_quantmap__8u1__p7_1, i32 11, i32 11 }, align 8
@_vq_quantthresh__8u1__p7_1 = internal global [10 x float] [float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00], align 16
@_vq_quantmap__8u1__p7_1 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_lengthlist__8u1__p8_0 = internal global [121 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 8, i64 8, i64 10, i64 10, i64 11, i64 11, i64 4, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 11, i64 11, i64 13, i64 12, i64 4, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 11, i64 11, i64 12, i64 12, i64 6, i64 7, i64 7, i64 9, i64 9, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 6, i64 7, i64 7, i64 9, i64 9, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 8, i64 9, i64 9, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 8, i64 9, i64 9, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 9, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 15, i64 15, i64 9, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 15, i64 14, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 15, i64 15, i64 16, i64 16, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 15, i64 15, i64 15, i64 15], align 16
@_vq_quantlist__8u1__p8_0 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__8u1__p8_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8u1__p8_0, ptr @_vq_quantmap__8u1__p8_0, i32 11, i32 11 }, align 8
@_vq_quantthresh__8u1__p8_0 = internal global [10 x float] [float -4.950000e+01, float -3.850000e+01, float -2.750000e+01, float -1.650000e+01, float -5.500000e+00, float 5.500000e+00, float 1.650000e+01, float 2.750000e+01, float 3.850000e+01, float 4.950000e+01], align 16
@_vq_quantmap__8u1__p8_0 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_lengthlist__8u1__p8_1 = internal global [121 x i64] [i64 2, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 5, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 5, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 8, i64 9, i64 9, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 8, i64 9, i64 9, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9], align 16
@_vq_quantlist__8u1__p8_1 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__8u1__p8_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8u1__p8_1, ptr @_vq_quantmap__8u1__p8_1, i32 11, i32 11 }, align 8
@_vq_quantthresh__8u1__p8_1 = internal global [10 x float] [float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00], align 16
@_vq_quantmap__8u1__p8_1 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_lengthlist__8u1__p9_0 = internal global [225 x i64] [i64 1, i64 4, i64 4, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 3, i64 11, i64 8, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 3, i64 9, i64 9, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10], align 16
@_vq_quantlist__8u1__p9_0 = internal global [15 x i64] [i64 7, i64 6, i64 8, i64 5, i64 9, i64 4, i64 10, i64 3, i64 11, i64 2, i64 12, i64 1, i64 13, i64 0, i64 14], align 16
@_vq_auxt__8u1__p9_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8u1__p9_0, ptr @_vq_quantmap__8u1__p9_0, i32 15, i32 15 }, align 8
@_vq_quantthresh__8u1__p9_0 = internal global [14 x float] [float -1.657500e+03, float -1.402500e+03, float -1.147500e+03, float -8.925000e+02, float -6.375000e+02, float -3.825000e+02, float -1.275000e+02, float 1.275000e+02, float 3.825000e+02, float 6.375000e+02, float 8.925000e+02, float 1.147500e+03, float 1.402500e+03, float 1.657500e+03], align 16
@_vq_quantmap__8u1__p9_0 = internal global [15 x i64] [i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14], align 16
@_vq_lengthlist__8u1__p9_1 = internal global [225 x i64] [i64 1, i64 4, i64 4, i64 7, i64 7, i64 9, i64 9, i64 7, i64 7, i64 8, i64 8, i64 10, i64 10, i64 11, i64 11, i64 4, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 8, i64 8, i64 10, i64 10, i64 10, i64 11, i64 10, i64 11, i64 4, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 8, i64 8, i64 10, i64 9, i64 11, i64 11, i64 11, i64 11, i64 7, i64 9, i64 9, i64 12, i64 12, i64 11, i64 12, i64 10, i64 10, i64 11, i64 10, i64 12, i64 11, i64 11, i64 11, i64 7, i64 9, i64 9, i64 11, i64 11, i64 13, i64 12, i64 9, i64 9, i64 11, i64 10, i64 11, i64 11, i64 12, i64 11, i64 9, i64 10, i64 10, i64 12, i64 12, i64 14, i64 14, i64 10, i64 10, i64 11, i64 12, i64 12, i64 11, i64 11, i64 11, i64 9, i64 10, i64 11, i64 11, i64 13, i64 14, i64 13, i64 10, i64 11, i64 11, i64 11, i64 12, i64 11, i64 12, i64 12, i64 7, i64 8, i64 8, i64 10, i64 9, i64 11, i64 10, i64 11, i64 12, i64 12, i64 11, i64 12, i64 14, i64 12, i64 13, i64 7, i64 8, i64 8, i64 9, i64 10, i64 10, i64 11, i64 12, i64 12, i64 12, i64 11, i64 12, i64 12, i64 12, i64 13, i64 9, i64 9, i64 9, i64 11, i64 11, i64 13, i64 12, i64 12, i64 12, i64 12, i64 11, i64 12, i64 12, i64 13, i64 12, i64 8, i64 10, i64 10, i64 11, i64 10, i64 11, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 14, i64 12, i64 12, i64 9, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 12, i64 12, i64 13, i64 13, i64 12, i64 10, i64 11, i64 11, i64 12, i64 11, i64 12, i64 12, i64 12, i64 11, i64 12, i64 13, i64 12, i64 12, i64 12, i64 13, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 12, i64 12, i64 11, i64 12, i64 13, i64 13, i64 12, i64 12, i64 13, i64 12, i64 11, i64 12, i64 12, i64 13, i64 13, i64 12, i64 13, i64 12, i64 13, i64 13, i64 13, i64 13, i64 14, i64 13], align 16
@_vq_quantlist__8u1__p9_1 = internal global [15 x i64] [i64 7, i64 6, i64 8, i64 5, i64 9, i64 4, i64 10, i64 3, i64 11, i64 2, i64 12, i64 1, i64 13, i64 0, i64 14], align 16
@_vq_auxt__8u1__p9_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8u1__p9_1, ptr @_vq_quantmap__8u1__p9_1, i32 15, i32 15 }, align 8
@_vq_quantthresh__8u1__p9_1 = internal global [14 x float] [float -1.105000e+02, float -9.350000e+01, float -7.650000e+01, float -5.950000e+01, float -4.250000e+01, float -2.550000e+01, float -8.500000e+00, float 8.500000e+00, float 2.550000e+01, float 4.250000e+01, float 5.950000e+01, float 7.650000e+01, float 9.350000e+01, float 1.105000e+02], align 16
@_vq_quantmap__8u1__p9_1 = internal global [15 x i64] [i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14], align 16
@_vq_lengthlist__8u1__p9_2 = internal global [289 x i64] [i64 2, i64 5, i64 4, i64 6, i64 6, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 9, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 10, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10], align 16
@_vq_quantlist__8u1__p9_2 = internal global [17 x i64] [i64 8, i64 7, i64 9, i64 6, i64 10, i64 5, i64 11, i64 4, i64 12, i64 3, i64 13, i64 2, i64 14, i64 1, i64 15, i64 0, i64 16], align 16
@_vq_auxt__8u1__p9_2 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__8u1__p9_2, ptr @_vq_quantmap__8u1__p9_2, i32 17, i32 17 }, align 8
@_vq_quantthresh__8u1__p9_2 = internal global [16 x float] [float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00], align 16
@_vq_quantmap__8u1__p9_2 = internal global [17 x i64] [i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16], align 16
@_vp_tonemask_adj_16 = internal global <{ %struct.vp_adjblock, %struct.vp_adjblock, { <{ i32, i32, i32, i32, i32, i32, i32, [10 x i32] }> }, { <{ [9 x i32], [8 x i32] }> } }> <{ %struct.vp_adjblock { [17 x i32] [i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -16, i32 -10, i32 0, i32 0, i32 0, i32 0, i32 10, i32 0, i32 0, i32 0, i32 0, i32 0] }, %struct.vp_adjblock { [17 x i32] [i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -16, i32 -10, i32 0, i32 0, i32 0, i32 0, i32 10, i32 0, i32 0, i32 0, i32 0, i32 0] }, { <{ i32, i32, i32, i32, i32, i32, i32, [10 x i32] }> } { <{ i32, i32, i32, i32, i32, i32, i32, [10 x i32] }> <{ i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -16, i32 -10, [10 x i32] zeroinitializer }> }, { <{ [9 x i32], [8 x i32] }> } { <{ [9 x i32], [8 x i32] }> <{ [9 x i32] [i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -26, i32 -20, i32 -10, i32 -5], [8 x i32] zeroinitializer }> } }>, align 16
@_res_16s_0 = internal global [1 x %struct.vorbis_residue_template] [%struct.vorbis_residue_template { i32 2, i32 0, ptr @_residue_44_mid, ptr @_huff_book__16c0_s_single, ptr @_huff_book__16c0_s_single, ptr @_resbook_16s_0, ptr @_resbook_16s_0 }], align 16
@_res_16s_1 = internal global [2 x %struct.vorbis_residue_template] [%struct.vorbis_residue_template { i32 2, i32 0, ptr @_residue_44_mid, ptr @_huff_book__16c1_s_short, ptr @_huff_book__16c1_s_short, ptr @_resbook_16s_1, ptr @_resbook_16s_1 }, %struct.vorbis_residue_template { i32 2, i32 0, ptr @_residue_44_mid, ptr @_huff_book__16c1_s_long, ptr @_huff_book__16c1_s_long, ptr @_resbook_16s_1, ptr @_resbook_16s_1 }], align 16
@_res_16s_2 = internal global [2 x %struct.vorbis_residue_template] [%struct.vorbis_residue_template { i32 2, i32 0, ptr @_residue_44_high, ptr @_huff_book__16c2_s_short, ptr @_huff_book__16c2_s_short, ptr @_resbook_16s_2, ptr @_resbook_16s_2 }, %struct.vorbis_residue_template { i32 2, i32 0, ptr @_residue_44_high, ptr @_huff_book__16c2_s_long, ptr @_huff_book__16c2_s_long, ptr @_resbook_16s_2, ptr @_resbook_16s_2 }], align 16
@_huff_book__16c0_s_single = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__16c0_s_single, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_resbook_16s_0 = internal global %struct.static_bookblock { [12 x [3 x ptr]] [[3 x ptr] zeroinitializer, [3 x ptr] [ptr null, ptr null, ptr @_16c0_s_p1_0], [3 x ptr] [ptr null, ptr null, ptr @_16c0_s_p2_0], [3 x ptr] [ptr null, ptr null, ptr @_16c0_s_p3_0], [3 x ptr] [ptr null, ptr null, ptr @_16c0_s_p4_0], [3 x ptr] [ptr null, ptr null, ptr @_16c0_s_p5_0], [3 x ptr] [ptr null, ptr null, ptr @_16c0_s_p6_0], [3 x ptr] [ptr @_16c0_s_p7_0, ptr @_16c0_s_p7_1, ptr null], [3 x ptr] [ptr @_16c0_s_p8_0, ptr @_16c0_s_p8_1, ptr null], [3 x ptr] [ptr @_16c0_s_p9_0, ptr @_16c0_s_p9_1, ptr @_16c0_s_p9_2], [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer] }, align 8
@_huff_lengthlist__16c0_s_single = internal global [100 x i64] [i64 3, i64 4, i64 19, i64 7, i64 9, i64 7, i64 8, i64 11, i64 9, i64 12, i64 4, i64 1, i64 19, i64 6, i64 7, i64 7, i64 8, i64 10, i64 11, i64 13, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 8, i64 6, i64 18, i64 8, i64 9, i64 9, i64 11, i64 12, i64 14, i64 18, i64 9, i64 6, i64 18, i64 9, i64 7, i64 8, i64 9, i64 11, i64 12, i64 18, i64 7, i64 6, i64 18, i64 8, i64 7, i64 7, i64 7, i64 9, i64 11, i64 17, i64 8, i64 8, i64 18, i64 9, i64 7, i64 6, i64 6, i64 8, i64 11, i64 17, i64 10, i64 10, i64 18, i64 12, i64 9, i64 8, i64 7, i64 9, i64 12, i64 18, i64 13, i64 15, i64 18, i64 15, i64 13, i64 11, i64 10, i64 11, i64 15, i64 18, i64 14, i64 18, i64 18, i64 18, i64 18, i64 18, i64 16, i64 16, i64 18, i64 18], align 16
@_16c0_s_p1_0 = internal global %struct.static_codebook { i64 8, i64 6561, ptr @_vq_lengthlist__16c0_s_p1_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__16c0_s_p1_0, ptr null, ptr @_vq_auxt__16c0_s_p1_0, ptr null, i32 0 }, align 8
@_16c0_s_p2_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__16c0_s_p2_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__16c0_s_p2_0, ptr null, ptr @_vq_auxt__16c0_s_p2_0, ptr null, i32 0 }, align 8
@_16c0_s_p3_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__16c0_s_p3_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__16c0_s_p3_0, ptr null, ptr @_vq_auxt__16c0_s_p3_0, ptr null, i32 0 }, align 8
@_16c0_s_p4_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__16c0_s_p4_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__16c0_s_p4_0, ptr null, ptr @_vq_auxt__16c0_s_p4_0, ptr null, i32 0 }, align 8
@_16c0_s_p5_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__16c0_s_p5_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__16c0_s_p5_0, ptr null, ptr @_vq_auxt__16c0_s_p5_0, ptr null, i32 0 }, align 8
@_16c0_s_p6_0 = internal global %struct.static_codebook { i64 2, i64 289, ptr @_vq_lengthlist__16c0_s_p6_0, i32 1, i64 -529530880, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__16c0_s_p6_0, ptr null, ptr @_vq_auxt__16c0_s_p6_0, ptr null, i32 0 }, align 8
@_16c0_s_p7_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__16c0_s_p7_0, i32 1, i64 -529137664, i64 1618345984, i32 2, i32 0, ptr @_vq_quantlist__16c0_s_p7_0, ptr null, ptr @_vq_auxt__16c0_s_p7_0, ptr null, i32 0 }, align 8
@_16c0_s_p7_1 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__16c0_s_p7_1, i32 1, i64 -531365888, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__16c0_s_p7_1, ptr null, ptr @_vq_auxt__16c0_s_p7_1, ptr null, i32 0 }, align 8
@_16c0_s_p8_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__16c0_s_p8_0, i32 1, i64 -526516224, i64 1616117760, i32 4, i32 0, ptr @_vq_quantlist__16c0_s_p8_0, ptr null, ptr @_vq_auxt__16c0_s_p8_0, ptr null, i32 0 }, align 8
@_16c0_s_p8_1 = internal global %struct.static_codebook { i64 2, i64 25, ptr @_vq_lengthlist__16c0_s_p8_1, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__16c0_s_p8_1, ptr null, ptr @_vq_auxt__16c0_s_p8_1, ptr null, i32 0 }, align 8
@_16c0_s_p9_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__16c0_s_p9_0, i32 1, i64 -518803456, i64 1628680192, i32 2, i32 0, ptr @_vq_quantlist__16c0_s_p9_0, ptr null, ptr @_vq_auxt__16c0_s_p9_0, ptr null, i32 0 }, align 8
@_16c0_s_p9_1 = internal global %struct.static_codebook { i64 2, i64 225, ptr @_vq_lengthlist__16c0_s_p9_1, i32 1, i64 -520986624, i64 1620377600, i32 4, i32 0, ptr @_vq_quantlist__16c0_s_p9_1, ptr null, ptr @_vq_auxt__16c0_s_p9_1, ptr null, i32 0 }, align 8
@_16c0_s_p9_2 = internal global %struct.static_codebook { i64 2, i64 441, ptr @_vq_lengthlist__16c0_s_p9_2, i32 1, i64 -529268736, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__16c0_s_p9_2, ptr null, ptr @_vq_auxt__16c0_s_p9_2, ptr null, i32 0 }, align 8
@_vq_quantlist__16c0_s_p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__16c0_s_p1_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c0_s_p1_0, ptr @_vq_quantmap__16c0_s_p1_0, i32 3, i32 3 }, align 8
@_vq_lengthlist__16c0_s_p1_0 = internal global <{ [1641 x i64], [4920 x i64] }> <{ [1641 x i64] [i64 1, i64 4, i64 4, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 12, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 10, i64 12, i64 11, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 12, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 10, i64 11, i64 12, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 10, i64 12, i64 11, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 10, i64 12, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 10, i64 11, i64 12, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 12, i64 9], [4920 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__16c0_s_p1_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__16c0_s_p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__16c0_s_p2_0 = internal global [625 x i64] zeroinitializer, align 16
@_vq_quantlist__16c0_s_p2_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__16c0_s_p2_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c0_s_p2_0, ptr @_vq_quantmap__16c0_s_p2_0, i32 5, i32 5 }, align 8
@_vq_quantthresh__16c0_s_p2_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__16c0_s_p2_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_quantlist__16c0_s_p3_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__16c0_s_p3_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c0_s_p3_0, ptr @_vq_quantmap__16c0_s_p3_0, i32 5, i32 5 }, align 8
@_vq_lengthlist__16c0_s_p3_0 = internal global <{ [105 x i64], [520 x i64] }> <{ [105 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 6, i64 6, i64 7, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 6, i64 6, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 6, i64 6, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 6, i64 6, i64 9, i64 9], [520 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__16c0_s_p3_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__16c0_s_p3_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_quantlist__16c0_s_p4_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__16c0_s_p4_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c0_s_p4_0, ptr @_vq_quantmap__16c0_s_p4_0, i32 9, i32 9 }, align 8
@_vq_lengthlist__16c0_s_p4_0 = internal global <{ [68 x i64], [13 x i64] }> <{ [68 x i64] [i64 1, i64 3, i64 2, i64 7, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9], [13 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__16c0_s_p4_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__16c0_s_p4_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__16c0_s_p5_0 = internal global [81 x i64] [i64 1, i64 3, i64 3, i64 6, i64 6, i64 6, i64 6, i64 8, i64 8, i64 0, i64 0, i64 0, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 0, i64 0, i64 0, i64 8, i64 9, i64 8, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 10, i64 10, i64 9, i64 9, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 10, i64 10], align 16
@_vq_quantlist__16c0_s_p5_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__16c0_s_p5_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c0_s_p5_0, ptr @_vq_quantmap__16c0_s_p5_0, i32 9, i32 9 }, align 8
@_vq_quantthresh__16c0_s_p5_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__16c0_s_p5_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__16c0_s_p6_0 = internal global [289 x i64] [i64 1, i64 3, i64 4, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 0, i64 0, i64 0, i64 6, i64 6, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 0, i64 0, i64 0, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 0, i64 0, i64 0, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 13, i64 14, i64 0, i64 0, i64 0, i64 0, i64 0, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 13, i64 14, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 14, i64 14, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 13, i64 14, i64 15, i64 14, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 13, i64 14, i64 14, i64 15, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 12, i64 12, i64 13, i64 13, i64 14, i64 13, i64 14, i64 14], align 16
@_vq_quantlist__16c0_s_p6_0 = internal global [17 x i64] [i64 8, i64 7, i64 9, i64 6, i64 10, i64 5, i64 11, i64 4, i64 12, i64 3, i64 13, i64 2, i64 14, i64 1, i64 15, i64 0, i64 16], align 16
@_vq_auxt__16c0_s_p6_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c0_s_p6_0, ptr @_vq_quantmap__16c0_s_p6_0, i32 17, i32 17 }, align 8
@_vq_quantthresh__16c0_s_p6_0 = internal global [16 x float] [float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00], align 16
@_vq_quantmap__16c0_s_p6_0 = internal global [17 x i64] [i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16], align 16
@_vq_lengthlist__16c0_s_p7_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 6, i64 7, i64 6, i64 6, i64 4, i64 7, i64 7, i64 11, i64 10, i64 10, i64 11, i64 11, i64 10, i64 4, i64 7, i64 7, i64 10, i64 10, i64 10, i64 11, i64 10, i64 10, i64 6, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 6, i64 9, i64 9, i64 11, i64 12, i64 12, i64 11, i64 9, i64 9, i64 6, i64 9, i64 10, i64 11, i64 12, i64 12, i64 11, i64 9, i64 10, i64 7, i64 11, i64 11, i64 11, i64 11, i64 11, i64 12, i64 13, i64 12, i64 6, i64 9, i64 10, i64 11, i64 10, i64 10, i64 12, i64 13, i64 13, i64 6, i64 10, i64 9, i64 11, i64 10, i64 10, i64 11, i64 12, i64 13], align 16
@_vq_quantlist__16c0_s_p7_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__16c0_s_p7_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c0_s_p7_0, ptr @_vq_quantmap__16c0_s_p7_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__16c0_s_p7_0 = internal global [2 x float] [float -5.500000e+00, float 5.500000e+00], align 4
@_vq_quantmap__16c0_s_p7_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__16c0_s_p7_1 = internal global [121 x i64] [i64 1, i64 3, i64 4, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 7, i64 7, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 6, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 8, i64 10, i64 10, i64 10, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 8, i64 9, i64 10, i64 10, i64 10, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 11, i64 11, i64 11, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 11, i64 11, i64 11, i64 10, i64 11, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 11, i64 11, i64 11, i64 10, i64 11, i64 10, i64 10, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10], align 16
@_vq_quantlist__16c0_s_p7_1 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__16c0_s_p7_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c0_s_p7_1, ptr @_vq_quantmap__16c0_s_p7_1, i32 11, i32 11 }, align 8
@_vq_quantthresh__16c0_s_p7_1 = internal global [10 x float] [float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00], align 16
@_vq_quantmap__16c0_s_p7_1 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_lengthlist__16c0_s_p8_0 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 7, i64 7, i64 7, i64 7, i64 7, i64 6, i64 8, i64 8, i64 10, i64 10, i64 6, i64 5, i64 6, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 10, i64 10, i64 7, i64 6, i64 6, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 0, i64 8, i64 8, i64 8, i64 8, i64 9, i64 8, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 0, i64 9, i64 8, i64 8, i64 8, i64 9, i64 9, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 0, i64 12, i64 11, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 10, i64 0, i64 12, i64 13, i64 8, i64 8, i64 9, i64 10, i64 9, i64 9, i64 11, i64 11, i64 11, i64 12, i64 0, i64 0, i64 0, i64 8, i64 8, i64 8, i64 8, i64 10, i64 9, i64 12, i64 13, i64 12, i64 14, i64 0, i64 0, i64 0, i64 8, i64 8, i64 8, i64 9, i64 10, i64 10, i64 12, i64 12, i64 13, i64 14, i64 0, i64 0, i64 0, i64 13, i64 13, i64 9, i64 9, i64 11, i64 11, i64 0, i64 0, i64 14, i64 0, i64 0, i64 0, i64 0, i64 14, i64 14, i64 10, i64 10, i64 12, i64 11, i64 12, i64 14, i64 14, i64 14, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 11, i64 13, i64 13, i64 14, i64 13, i64 14, i64 14, i64 0, i64 0, i64 0, i64 0, i64 0, i64 12, i64 13, i64 13, i64 12, i64 13, i64 14, i64 14, i64 14], align 16
@_vq_quantlist__16c0_s_p8_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__16c0_s_p8_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c0_s_p8_0, ptr @_vq_quantmap__16c0_s_p8_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__16c0_s_p8_0 = internal global [12 x float] [float -2.750000e+01, float -2.250000e+01, float -1.750000e+01, float -1.250000e+01, float -7.500000e+00, float -2.500000e+00, float 2.500000e+00, float 7.500000e+00, float 1.250000e+01, float 1.750000e+01, float 2.250000e+01, float 2.750000e+01], align 16
@_vq_quantmap__16c0_s_p8_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__16c0_s_p8_1 = internal global [25 x i64] [i64 1, i64 4, i64 3, i64 5, i64 5, i64 7, i64 7, i64 7, i64 6, i64 6, i64 7, i64 7, i64 7, i64 5, i64 5, i64 7, i64 7, i64 7, i64 6, i64 6, i64 7, i64 7, i64 7, i64 6, i64 6], align 16
@_vq_quantlist__16c0_s_p8_1 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__16c0_s_p8_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c0_s_p8_1, ptr @_vq_quantmap__16c0_s_p8_1, i32 5, i32 5 }, align 8
@_vq_quantthresh__16c0_s_p8_1 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__16c0_s_p8_1 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__16c0_s_p9_0 = internal global [81 x i64] [i64 1, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7], align 16
@_vq_quantlist__16c0_s_p9_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__16c0_s_p9_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c0_s_p9_0, ptr @_vq_quantmap__16c0_s_p9_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__16c0_s_p9_0 = internal global [2 x float] [float -1.575000e+02, float 1.575000e+02], align 4
@_vq_quantmap__16c0_s_p9_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__16c0_s_p9_1 = internal global [225 x i64] [i64 1, i64 5, i64 5, i64 5, i64 5, i64 9, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 7, i64 6, i64 6, i64 6, i64 6, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 7, i64 6, i64 6, i64 6, i64 6, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 7, i64 7, i64 8, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 8, i64 7, i64 10, i64 10, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10], align 16
@_vq_quantlist__16c0_s_p9_1 = internal global [15 x i64] [i64 7, i64 6, i64 8, i64 5, i64 9, i64 4, i64 10, i64 3, i64 11, i64 2, i64 12, i64 1, i64 13, i64 0, i64 14], align 16
@_vq_auxt__16c0_s_p9_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c0_s_p9_1, ptr @_vq_quantmap__16c0_s_p9_1, i32 15, i32 15 }, align 8
@_vq_quantthresh__16c0_s_p9_1 = internal global [14 x float] [float -1.365000e+02, float -1.155000e+02, float -9.450000e+01, float -7.350000e+01, float -5.250000e+01, float -3.150000e+01, float -1.050000e+01, float 1.050000e+01, float 3.150000e+01, float 5.250000e+01, float 7.350000e+01, float 9.450000e+01, float 1.155000e+02, float 1.365000e+02], align 16
@_vq_quantmap__16c0_s_p9_1 = internal global [15 x i64] [i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14], align 16
@_vq_lengthlist__16c0_s_p9_2 = internal global [441 x i64] [i64 1, i64 5, i64 5, i64 7, i64 8, i64 8, i64 7, i64 9, i64 9, i64 9, i64 12, i64 12, i64 11, i64 12, i64 12, i64 10, i64 10, i64 11, i64 12, i64 12, i64 12, i64 11, i64 12, i64 12, i64 8, i64 9, i64 8, i64 7, i64 9, i64 10, i64 10, i64 11, i64 11, i64 10, i64 11, i64 12, i64 10, i64 12, i64 10, i64 12, i64 12, i64 12, i64 11, i64 12, i64 11, i64 9, i64 8, i64 8, i64 9, i64 10, i64 9, i64 8, i64 9, i64 10, i64 12, i64 12, i64 11, i64 11, i64 12, i64 11, i64 10, i64 11, i64 12, i64 11, i64 12, i64 12, i64 8, i64 9, i64 9, i64 9, i64 10, i64 11, i64 12, i64 11, i64 12, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 11, i64 11, i64 12, i64 12, i64 11, i64 11, i64 9, i64 9, i64 8, i64 9, i64 9, i64 11, i64 9, i64 9, i64 10, i64 9, i64 11, i64 11, i64 11, i64 11, i64 12, i64 11, i64 11, i64 10, i64 12, i64 12, i64 12, i64 9, i64 12, i64 11, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 11, i64 11, i64 11, i64 12, i64 10, i64 12, i64 12, i64 12, i64 10, i64 10, i64 9, i64 10, i64 9, i64 10, i64 10, i64 9, i64 9, i64 9, i64 10, i64 10, i64 12, i64 10, i64 11, i64 11, i64 9, i64 11, i64 11, i64 10, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 9, i64 9, i64 10, i64 10, i64 9, i64 9, i64 10, i64 11, i64 11, i64 10, i64 11, i64 10, i64 11, i64 10, i64 11, i64 11, i64 10, i64 11, i64 11, i64 11, i64 10, i64 9, i64 10, i64 10, i64 9, i64 10, i64 9, i64 9, i64 11, i64 9, i64 9, i64 11, i64 10, i64 10, i64 11, i64 11, i64 10, i64 10, i64 11, i64 10, i64 11, i64 8, i64 9, i64 11, i64 11, i64 10, i64 9, i64 10, i64 11, i64 11, i64 10, i64 11, i64 11, i64 10, i64 10, i64 10, i64 11, i64 10, i64 9, i64 10, i64 10, i64 11, i64 9, i64 10, i64 10, i64 9, i64 11, i64 10, i64 10, i64 10, i64 10, i64 11, i64 10, i64 11, i64 11, i64 9, i64 11, i64 10, i64 11, i64 10, i64 10, i64 11, i64 11, i64 10, i64 10, i64 10, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 10, i64 10, i64 10, i64 9, i64 10, i64 10, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 10, i64 11, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 10, i64 11, i64 10, i64 11, i64 10, i64 10, i64 10, i64 9, i64 11, i64 11, i64 10, i64 10, i64 10, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 9, i64 10, i64 10, i64 10, i64 11, i64 10, i64 11, i64 10, i64 10, i64 10, i64 11, i64 9, i64 10, i64 11, i64 10, i64 11, i64 10, i64 10, i64 9, i64 10, i64 10, i64 10, i64 11, i64 10, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 10, i64 11, i64 11, i64 10, i64 10, i64 11, i64 11, i64 10, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 11, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 10, i64 9, i64 9, i64 10, i64 10, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 9, i64 10, i64 10, i64 10, i64 10, i64 9, i64 10, i64 9, i64 10, i64 11, i64 10, i64 11, i64 10, i64 10, i64 11, i64 11, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 11, i64 10, i64 10, i64 10, i64 9, i64 11, i64 11, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 11, i64 10, i64 10, i64 10, i64 10, i64 11, i64 10, i64 10, i64 11, i64 9, i64 10, i64 10, i64 10], align 16
@_vq_quantlist__16c0_s_p9_2 = internal global [21 x i64] [i64 10, i64 9, i64 11, i64 8, i64 12, i64 7, i64 13, i64 6, i64 14, i64 5, i64 15, i64 4, i64 16, i64 3, i64 17, i64 2, i64 18, i64 1, i64 19, i64 0, i64 20], align 16
@_vq_auxt__16c0_s_p9_2 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c0_s_p9_2, ptr @_vq_quantmap__16c0_s_p9_2, i32 21, i32 21 }, align 8
@_vq_quantthresh__16c0_s_p9_2 = internal global [20 x float] [float -9.500000e+00, float -8.500000e+00, float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00, float 8.500000e+00, float 9.500000e+00], align 16
@_vq_quantmap__16c0_s_p9_2 = internal global [21 x i64] [i64 19, i64 17, i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16, i64 18, i64 20], align 16
@_huff_book__16c1_s_short = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__16c1_s_short, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_resbook_16s_1 = internal global %struct.static_bookblock { [12 x [3 x ptr]] [[3 x ptr] zeroinitializer, [3 x ptr] [ptr null, ptr null, ptr @_16c1_s_p1_0], [3 x ptr] [ptr null, ptr null, ptr @_16c1_s_p2_0], [3 x ptr] [ptr null, ptr null, ptr @_16c1_s_p3_0], [3 x ptr] [ptr null, ptr null, ptr @_16c1_s_p4_0], [3 x ptr] [ptr null, ptr null, ptr @_16c1_s_p5_0], [3 x ptr] [ptr null, ptr null, ptr @_16c1_s_p6_0], [3 x ptr] [ptr @_16c1_s_p7_0, ptr @_16c1_s_p7_1, ptr null], [3 x ptr] [ptr @_16c1_s_p8_0, ptr @_16c1_s_p8_1, ptr null], [3 x ptr] [ptr @_16c1_s_p9_0, ptr @_16c1_s_p9_1, ptr @_16c1_s_p9_2], [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer] }, align 8
@_huff_book__16c1_s_long = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__16c1_s_long, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_lengthlist__16c1_s_short = internal global [100 x i64] [i64 5, i64 6, i64 17, i64 8, i64 12, i64 9, i64 10, i64 10, i64 12, i64 13, i64 5, i64 2, i64 17, i64 4, i64 9, i64 5, i64 7, i64 8, i64 11, i64 13, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 6, i64 4, i64 16, i64 5, i64 10, i64 5, i64 7, i64 10, i64 14, i64 16, i64 13, i64 9, i64 16, i64 11, i64 8, i64 7, i64 8, i64 9, i64 13, i64 16, i64 7, i64 4, i64 16, i64 5, i64 7, i64 4, i64 6, i64 8, i64 11, i64 13, i64 8, i64 6, i64 16, i64 7, i64 8, i64 5, i64 5, i64 7, i64 9, i64 13, i64 9, i64 8, i64 16, i64 9, i64 8, i64 6, i64 6, i64 7, i64 9, i64 13, i64 11, i64 11, i64 16, i64 10, i64 10, i64 7, i64 7, i64 7, i64 9, i64 13, i64 13, i64 13, i64 16, i64 13, i64 13, i64 9, i64 9, i64 9, i64 10, i64 13], align 16
@_16c1_s_p1_0 = internal global %struct.static_codebook { i64 8, i64 6561, ptr @_vq_lengthlist__16c1_s_p1_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__16c1_s_p1_0, ptr null, ptr @_vq_auxt__16c1_s_p1_0, ptr null, i32 0 }, align 8
@_16c1_s_p2_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__16c1_s_p2_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__16c1_s_p2_0, ptr null, ptr @_vq_auxt__16c1_s_p2_0, ptr null, i32 0 }, align 8
@_16c1_s_p3_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__16c1_s_p3_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__16c1_s_p3_0, ptr null, ptr @_vq_auxt__16c1_s_p3_0, ptr null, i32 0 }, align 8
@_16c1_s_p4_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__16c1_s_p4_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__16c1_s_p4_0, ptr null, ptr @_vq_auxt__16c1_s_p4_0, ptr null, i32 0 }, align 8
@_16c1_s_p5_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__16c1_s_p5_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__16c1_s_p5_0, ptr null, ptr @_vq_auxt__16c1_s_p5_0, ptr null, i32 0 }, align 8
@_16c1_s_p6_0 = internal global %struct.static_codebook { i64 2, i64 289, ptr @_vq_lengthlist__16c1_s_p6_0, i32 1, i64 -529530880, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__16c1_s_p6_0, ptr null, ptr @_vq_auxt__16c1_s_p6_0, ptr null, i32 0 }, align 8
@_16c1_s_p7_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__16c1_s_p7_0, i32 1, i64 -529137664, i64 1618345984, i32 2, i32 0, ptr @_vq_quantlist__16c1_s_p7_0, ptr null, ptr @_vq_auxt__16c1_s_p7_0, ptr null, i32 0 }, align 8
@_16c1_s_p7_1 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__16c1_s_p7_1, i32 1, i64 -531365888, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__16c1_s_p7_1, ptr null, ptr @_vq_auxt__16c1_s_p7_1, ptr null, i32 0 }, align 8
@_16c1_s_p8_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__16c1_s_p8_0, i32 1, i64 -526516224, i64 1616117760, i32 4, i32 0, ptr @_vq_quantlist__16c1_s_p8_0, ptr null, ptr @_vq_auxt__16c1_s_p8_0, ptr null, i32 0 }, align 8
@_16c1_s_p8_1 = internal global %struct.static_codebook { i64 2, i64 25, ptr @_vq_lengthlist__16c1_s_p8_1, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__16c1_s_p8_1, ptr null, ptr @_vq_auxt__16c1_s_p8_1, ptr null, i32 0 }, align 8
@_16c1_s_p9_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__16c1_s_p9_0, i32 1, i64 -513964032, i64 1628680192, i32 4, i32 0, ptr @_vq_quantlist__16c1_s_p9_0, ptr null, ptr @_vq_auxt__16c1_s_p9_0, ptr null, i32 0 }, align 8
@_16c1_s_p9_1 = internal global %struct.static_codebook { i64 2, i64 225, ptr @_vq_lengthlist__16c1_s_p9_1, i32 1, i64 -520986624, i64 1620377600, i32 4, i32 0, ptr @_vq_quantlist__16c1_s_p9_1, ptr null, ptr @_vq_auxt__16c1_s_p9_1, ptr null, i32 0 }, align 8
@_16c1_s_p9_2 = internal global %struct.static_codebook { i64 2, i64 441, ptr @_vq_lengthlist__16c1_s_p9_2, i32 1, i64 -529268736, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__16c1_s_p9_2, ptr null, ptr @_vq_auxt__16c1_s_p9_2, ptr null, i32 0 }, align 8
@_vq_quantlist__16c1_s_p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__16c1_s_p1_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c1_s_p1_0, ptr @_vq_quantmap__16c1_s_p1_0, i32 3, i32 3 }, align 8
@_vq_lengthlist__16c1_s_p1_0 = internal global <{ [1641 x i64], [4920 x i64] }> <{ [1641 x i64] [i64 1, i64 5, i64 5, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 8, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 8, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 8, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 11, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 11, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 11, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 10, i64 11, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 7, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 11, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 11, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 10, i64 11, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 11, i64 9], [4920 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__16c1_s_p1_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__16c1_s_p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__16c1_s_p2_0 = internal global [625 x i64] zeroinitializer, align 16
@_vq_quantlist__16c1_s_p2_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__16c1_s_p2_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c1_s_p2_0, ptr @_vq_quantmap__16c1_s_p2_0, i32 5, i32 5 }, align 8
@_vq_quantthresh__16c1_s_p2_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__16c1_s_p2_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_quantlist__16c1_s_p3_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__16c1_s_p3_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c1_s_p3_0, ptr @_vq_quantmap__16c1_s_p3_0, i32 5, i32 5 }, align 8
@_vq_lengthlist__16c1_s_p3_0 = internal global <{ [105 x i64], [520 x i64] }> <{ [105 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 5, i64 5, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 5, i64 5, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 7, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 7, i64 7, i64 9, i64 9], [520 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__16c1_s_p3_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__16c1_s_p3_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_quantlist__16c1_s_p4_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__16c1_s_p4_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c1_s_p4_0, ptr @_vq_quantmap__16c1_s_p4_0, i32 9, i32 9 }, align 8
@_vq_lengthlist__16c1_s_p4_0 = internal global <{ [68 x i64], [13 x i64] }> <{ [68 x i64] [i64 1, i64 2, i64 3, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 10, i64 10], [13 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__16c1_s_p4_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__16c1_s_p4_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__16c1_s_p5_0 = internal global [81 x i64] [i64 1, i64 3, i64 3, i64 5, i64 5, i64 6, i64 6, i64 8, i64 8, i64 0, i64 0, i64 0, i64 7, i64 7, i64 7, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 7, i64 7, i64 7, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 0, i64 0, i64 0, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 9, i64 9, i64 8, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 9, i64 9, i64 8, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 10, i64 10, i64 9, i64 9, i64 10, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 10, i64 10], align 16
@_vq_quantlist__16c1_s_p5_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__16c1_s_p5_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c1_s_p5_0, ptr @_vq_quantmap__16c1_s_p5_0, i32 9, i32 9 }, align 8
@_vq_quantthresh__16c1_s_p5_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__16c1_s_p5_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__16c1_s_p6_0 = internal global [289 x i64] [i64 1, i64 3, i64 3, i64 6, i64 6, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 8, i64 8, i64 8, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 0, i64 0, i64 0, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 0, i64 0, i64 0, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 10, i64 10, i64 11, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 14, i64 14, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 14, i64 14], align 16
@_vq_quantlist__16c1_s_p6_0 = internal global [17 x i64] [i64 8, i64 7, i64 9, i64 6, i64 10, i64 5, i64 11, i64 4, i64 12, i64 3, i64 13, i64 2, i64 14, i64 1, i64 15, i64 0, i64 16], align 16
@_vq_auxt__16c1_s_p6_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c1_s_p6_0, ptr @_vq_quantmap__16c1_s_p6_0, i32 17, i32 17 }, align 8
@_vq_quantthresh__16c1_s_p6_0 = internal global [16 x float] [float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00], align 16
@_vq_quantmap__16c1_s_p6_0 = internal global [17 x i64] [i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16], align 16
@_vq_lengthlist__16c1_s_p7_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 6, i64 7, i64 6, i64 6, i64 4, i64 7, i64 7, i64 10, i64 9, i64 10, i64 10, i64 10, i64 9, i64 4, i64 7, i64 7, i64 10, i64 10, i64 10, i64 11, i64 10, i64 10, i64 6, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 6, i64 10, i64 9, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 6, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 7, i64 11, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 11, i64 6, i64 10, i64 10, i64 11, i64 10, i64 10, i64 11, i64 11, i64 11, i64 6, i64 10, i64 10, i64 10, i64 11, i64 10, i64 11, i64 11, i64 11], align 16
@_vq_quantlist__16c1_s_p7_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__16c1_s_p7_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c1_s_p7_0, ptr @_vq_quantmap__16c1_s_p7_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__16c1_s_p7_0 = internal global [2 x float] [float -5.500000e+00, float 5.500000e+00], align 4
@_vq_quantmap__16c1_s_p7_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__16c1_s_p7_1 = internal global [121 x i64] [i64 2, i64 3, i64 3, i64 5, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 10, i64 10, i64 10, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9], align 16
@_vq_quantlist__16c1_s_p7_1 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__16c1_s_p7_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c1_s_p7_1, ptr @_vq_quantmap__16c1_s_p7_1, i32 11, i32 11 }, align 8
@_vq_quantthresh__16c1_s_p7_1 = internal global [10 x float] [float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00], align 16
@_vq_quantmap__16c1_s_p7_1 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_lengthlist__16c1_s_p8_0 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 6, i64 5, i64 5, i64 7, i64 8, i64 8, i64 9, i64 8, i64 8, i64 9, i64 9, i64 10, i64 11, i64 6, i64 5, i64 5, i64 8, i64 8, i64 9, i64 9, i64 8, i64 8, i64 9, i64 10, i64 10, i64 11, i64 0, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 0, i64 9, i64 9, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 0, i64 13, i64 13, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 14, i64 13, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 10, i64 10, i64 9, i64 9, i64 11, i64 11, i64 12, i64 12, i64 13, i64 12, i64 0, i64 0, i64 0, i64 10, i64 10, i64 9, i64 9, i64 10, i64 10, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 13, i64 14, i64 11, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 14, i64 0, i64 0, i64 0, i64 14, i64 14, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 14, i64 15, i64 0, i64 0, i64 0, i64 0, i64 0, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 14, i64 15], align 16
@_vq_quantlist__16c1_s_p8_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__16c1_s_p8_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c1_s_p8_0, ptr @_vq_quantmap__16c1_s_p8_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__16c1_s_p8_0 = internal global [12 x float] [float -2.750000e+01, float -2.250000e+01, float -1.750000e+01, float -1.250000e+01, float -7.500000e+00, float -2.500000e+00, float 2.500000e+00, float 7.500000e+00, float 1.250000e+01, float 1.750000e+01, float 2.250000e+01, float 2.750000e+01], align 16
@_vq_quantmap__16c1_s_p8_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__16c1_s_p8_1 = internal global [25 x i64] [i64 2, i64 3, i64 3, i64 5, i64 5, i64 6, i64 6, i64 6, i64 5, i64 5, i64 6, i64 6, i64 6, i64 5, i64 5, i64 6, i64 6, i64 6, i64 5, i64 5, i64 6, i64 6, i64 6, i64 5, i64 5], align 16
@_vq_quantlist__16c1_s_p8_1 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__16c1_s_p8_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c1_s_p8_1, ptr @_vq_quantmap__16c1_s_p8_1, i32 5, i32 5 }, align 8
@_vq_quantthresh__16c1_s_p8_1 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__16c1_s_p8_1 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__16c1_s_p9_0 = internal global [169 x i64] [i64 1, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8], align 16
@_vq_quantlist__16c1_s_p9_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__16c1_s_p9_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c1_s_p9_0, ptr @_vq_quantmap__16c1_s_p9_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__16c1_s_p9_0 = internal global [12 x float] [float -1.732500e+03, float -1.417500e+03, float -1.102500e+03, float -7.875000e+02, float -4.725000e+02, float -1.575000e+02, float 1.575000e+02, float 4.725000e+02, float 7.875000e+02, float 1.102500e+03, float 1.417500e+03, float 1.732500e+03], align 16
@_vq_quantmap__16c1_s_p9_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__16c1_s_p9_1 = internal global [225 x i64] [i64 1, i64 4, i64 4, i64 4, i64 4, i64 8, i64 8, i64 12, i64 13, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 6, i64 6, i64 6, i64 6, i64 6, i64 10, i64 9, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 7, i64 6, i64 5, i64 6, i64 6, i64 10, i64 9, i64 12, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 7, i64 7, i64 9, i64 9, i64 11, i64 11, i64 12, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 7, i64 7, i64 8, i64 8, i64 11, i64 12, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 12, i64 12, i64 10, i64 10, i64 13, i64 12, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 12, i64 12, i64 10, i64 10, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 12, i64 13, i64 12, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 12, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 12, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 12, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13], align 16
@_vq_quantlist__16c1_s_p9_1 = internal global [15 x i64] [i64 7, i64 6, i64 8, i64 5, i64 9, i64 4, i64 10, i64 3, i64 11, i64 2, i64 12, i64 1, i64 13, i64 0, i64 14], align 16
@_vq_auxt__16c1_s_p9_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c1_s_p9_1, ptr @_vq_quantmap__16c1_s_p9_1, i32 15, i32 15 }, align 8
@_vq_quantthresh__16c1_s_p9_1 = internal global [14 x float] [float -1.365000e+02, float -1.155000e+02, float -9.450000e+01, float -7.350000e+01, float -5.250000e+01, float -3.150000e+01, float -1.050000e+01, float 1.050000e+01, float 3.150000e+01, float 5.250000e+01, float 7.350000e+01, float 9.450000e+01, float 1.155000e+02, float 1.365000e+02], align 16
@_vq_quantmap__16c1_s_p9_1 = internal global [15 x i64] [i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14], align 16
@_vq_lengthlist__16c1_s_p9_2 = internal global [441 x i64] [i64 1, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 8, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 9, i64 10, i64 10, i64 11, i64 12, i64 12, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 10, i64 12, i64 11, i64 11, i64 13, i64 11, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 11, i64 11, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 12, i64 11, i64 12, i64 12, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 12, i64 11, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 11, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 9, i64 10, i64 10, i64 9, i64 11, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 11, i64 12, i64 11, i64 12, i64 12, i64 11, i64 12, i64 11, i64 10, i64 9, i64 10, i64 10, i64 11, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 11, i64 12, i64 12, i64 12, i64 10, i64 10, i64 10, i64 11, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 12, i64 13, i64 12, i64 12, i64 11, i64 9, i64 10, i64 10, i64 11, i64 11, i64 10, i64 11, i64 11, i64 11, i64 12, i64 11, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 12, i64 13, i64 10, i64 10, i64 12, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 11, i64 13, i64 12, i64 12, i64 12, i64 12, i64 13, i64 12, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 12, i64 11, i64 12, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 12, i64 11, i64 12, i64 12, i64 11, i64 11, i64 11, i64 11, i64 11, i64 12, i64 11, i64 11, i64 11, i64 11, i64 12, i64 11, i64 11, i64 12, i64 11, i64 12, i64 13, i64 13, i64 12, i64 12, i64 12, i64 12, i64 11, i64 11, i64 11, i64 11, i64 11, i64 12, i64 11, i64 11, i64 12, i64 11, i64 12, i64 11, i64 11, i64 11, i64 11, i64 13, i64 12, i64 12, i64 12, i64 12, i64 13, i64 11, i64 11, i64 11, i64 12, i64 12, i64 11, i64 11, i64 11, i64 12, i64 11, i64 12, i64 12, i64 12, i64 11, i64 12, i64 13, i64 12, i64 11, i64 11, i64 12, i64 12, i64 11, i64 12, i64 11, i64 11, i64 11, i64 12, i64 12, i64 11, i64 12, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 13, i64 12, i64 13, i64 12, i64 12, i64 12, i64 12, i64 11, i64 11, i64 12, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 12, i64 11, i64 13, i64 13, i64 12, i64 12, i64 11, i64 12, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 11, i64 12, i64 12, i64 11, i64 12, i64 12, i64 13, i64 12, i64 12, i64 13, i64 12, i64 12, i64 12, i64 12, i64 12, i64 11, i64 12, i64 12, i64 12, i64 11, i64 12, i64 11, i64 11, i64 11, i64 12, i64 13, i64 12, i64 13, i64 13, i64 13, i64 13, i64 13, i64 12, i64 13, i64 13, i64 12, i64 12, i64 13, i64 11, i64 11, i64 11, i64 11, i64 11, i64 12, i64 11, i64 11, i64 12, i64 11], align 16
@_vq_quantlist__16c1_s_p9_2 = internal global [21 x i64] [i64 10, i64 9, i64 11, i64 8, i64 12, i64 7, i64 13, i64 6, i64 14, i64 5, i64 15, i64 4, i64 16, i64 3, i64 17, i64 2, i64 18, i64 1, i64 19, i64 0, i64 20], align 16
@_vq_auxt__16c1_s_p9_2 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c1_s_p9_2, ptr @_vq_quantmap__16c1_s_p9_2, i32 21, i32 21 }, align 8
@_vq_quantthresh__16c1_s_p9_2 = internal global [20 x float] [float -9.500000e+00, float -8.500000e+00, float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00, float 8.500000e+00, float 9.500000e+00], align 16
@_vq_quantmap__16c1_s_p9_2 = internal global [21 x i64] [i64 19, i64 17, i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16, i64 18, i64 20], align 16
@_huff_lengthlist__16c1_s_long = internal global [100 x i64] [i64 2, i64 5, i64 20, i64 7, i64 10, i64 7, i64 8, i64 10, i64 11, i64 11, i64 4, i64 2, i64 20, i64 5, i64 8, i64 6, i64 7, i64 9, i64 10, i64 10, i64 20, i64 20, i64 20, i64 20, i64 19, i64 19, i64 19, i64 19, i64 19, i64 19, i64 7, i64 5, i64 19, i64 6, i64 10, i64 7, i64 9, i64 11, i64 13, i64 17, i64 11, i64 8, i64 19, i64 10, i64 7, i64 7, i64 8, i64 10, i64 11, i64 15, i64 7, i64 5, i64 19, i64 7, i64 7, i64 5, i64 6, i64 9, i64 11, i64 16, i64 7, i64 6, i64 19, i64 8, i64 7, i64 6, i64 6, i64 7, i64 9, i64 13, i64 9, i64 9, i64 19, i64 11, i64 9, i64 8, i64 6, i64 7, i64 8, i64 13, i64 12, i64 14, i64 19, i64 16, i64 13, i64 10, i64 9, i64 8, i64 9, i64 13, i64 14, i64 17, i64 19, i64 18, i64 18, i64 17, i64 12, i64 11, i64 11, i64 13], align 16
@_huff_book__16c2_s_short = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__16c2_s_short, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_resbook_16s_2 = internal global %struct.static_bookblock { [12 x [3 x ptr]] [[3 x ptr] zeroinitializer, [3 x ptr] [ptr null, ptr null, ptr @_16c2_s_p1_0], [3 x ptr] [ptr null, ptr null, ptr @_16c2_s_p2_0], [3 x ptr] [ptr null, ptr null, ptr @_16c2_s_p3_0], [3 x ptr] [ptr null, ptr null, ptr @_16c2_s_p4_0], [3 x ptr] [ptr @_16c2_s_p5_0, ptr @_16c2_s_p5_1, ptr null], [3 x ptr] [ptr @_16c2_s_p6_0, ptr @_16c2_s_p6_1, ptr null], [3 x ptr] [ptr @_16c2_s_p7_0, ptr @_16c2_s_p7_1, ptr null], [3 x ptr] [ptr @_16c2_s_p8_0, ptr @_16c2_s_p8_1, ptr null], [3 x ptr] [ptr @_16c2_s_p9_0, ptr @_16c2_s_p9_1, ptr @_16c2_s_p9_2], [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer] }, align 8
@_huff_book__16c2_s_long = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__16c2_s_long, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_lengthlist__16c2_s_short = internal global [100 x i64] [i64 7, i64 10, i64 11, i64 11, i64 11, i64 14, i64 15, i64 15, i64 17, i64 14, i64 8, i64 6, i64 7, i64 7, i64 8, i64 9, i64 11, i64 11, i64 14, i64 17, i64 9, i64 6, i64 6, i64 6, i64 7, i64 7, i64 10, i64 11, i64 15, i64 16, i64 9, i64 6, i64 6, i64 4, i64 4, i64 5, i64 8, i64 9, i64 12, i64 16, i64 10, i64 6, i64 6, i64 4, i64 4, i64 4, i64 6, i64 9, i64 13, i64 16, i64 10, i64 7, i64 6, i64 5, i64 4, i64 3, i64 5, i64 7, i64 13, i64 16, i64 11, i64 9, i64 8, i64 7, i64 6, i64 5, i64 5, i64 6, i64 12, i64 15, i64 10, i64 10, i64 10, i64 9, i64 7, i64 6, i64 6, i64 7, i64 11, i64 15, i64 13, i64 13, i64 13, i64 13, i64 11, i64 10, i64 10, i64 9, i64 12, i64 16, i64 16, i64 16, i64 16, i64 14, i64 16, i64 15, i64 15, i64 12, i64 14, i64 14], align 16
@_16c2_s_p1_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__16c2_s_p1_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__16c2_s_p1_0, ptr null, ptr @_vq_auxt__16c2_s_p1_0, ptr null, i32 0 }, align 8
@_16c2_s_p2_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__16c2_s_p2_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__16c2_s_p2_0, ptr null, ptr @_vq_auxt__16c2_s_p2_0, ptr null, i32 0 }, align 8
@_16c2_s_p3_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__16c2_s_p3_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__16c2_s_p3_0, ptr null, ptr @_vq_auxt__16c2_s_p3_0, ptr null, i32 0 }, align 8
@_16c2_s_p4_0 = internal global %struct.static_codebook { i64 2, i64 289, ptr @_vq_lengthlist__16c2_s_p4_0, i32 1, i64 -529530880, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__16c2_s_p4_0, ptr null, ptr @_vq_auxt__16c2_s_p4_0, ptr null, i32 0 }, align 8
@_16c2_s_p5_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__16c2_s_p5_0, i32 1, i64 -529137664, i64 1618345984, i32 2, i32 0, ptr @_vq_quantlist__16c2_s_p5_0, ptr null, ptr @_vq_auxt__16c2_s_p5_0, ptr null, i32 0 }, align 8
@_16c2_s_p5_1 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__16c2_s_p5_1, i32 1, i64 -531365888, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__16c2_s_p5_1, ptr null, ptr @_vq_auxt__16c2_s_p5_1, ptr null, i32 0 }, align 8
@_16c2_s_p6_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__16c2_s_p6_0, i32 1, i64 -526516224, i64 1616117760, i32 4, i32 0, ptr @_vq_quantlist__16c2_s_p6_0, ptr null, ptr @_vq_auxt__16c2_s_p6_0, ptr null, i32 0 }, align 8
@_16c2_s_p6_1 = internal global %struct.static_codebook { i64 2, i64 25, ptr @_vq_lengthlist__16c2_s_p6_1, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__16c2_s_p6_1, ptr null, ptr @_vq_auxt__16c2_s_p6_1, ptr null, i32 0 }, align 8
@_16c2_s_p7_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__16c2_s_p7_0, i32 1, i64 -523206656, i64 1618345984, i32 4, i32 0, ptr @_vq_quantlist__16c2_s_p7_0, ptr null, ptr @_vq_auxt__16c2_s_p7_0, ptr null, i32 0 }, align 8
@_16c2_s_p7_1 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__16c2_s_p7_1, i32 1, i64 -531365888, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__16c2_s_p7_1, ptr null, ptr @_vq_auxt__16c2_s_p7_1, ptr null, i32 0 }, align 8
@_16c2_s_p8_0 = internal global %struct.static_codebook { i64 2, i64 225, ptr @_vq_lengthlist__16c2_s_p8_0, i32 1, i64 -520986624, i64 1620377600, i32 4, i32 0, ptr @_vq_quantlist__16c2_s_p8_0, ptr null, ptr @_vq_auxt__16c2_s_p8_0, ptr null, i32 0 }, align 8
@_16c2_s_p8_1 = internal global %struct.static_codebook { i64 2, i64 441, ptr @_vq_lengthlist__16c2_s_p8_1, i32 1, i64 -529268736, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__16c2_s_p8_1, ptr null, ptr @_vq_auxt__16c2_s_p8_1, ptr null, i32 0 }, align 8
@_16c2_s_p9_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__16c2_s_p9_0, i32 1, i64 -510275072, i64 1631393792, i32 4, i32 0, ptr @_vq_quantlist__16c2_s_p9_0, ptr null, ptr @_vq_auxt__16c2_s_p9_0, ptr null, i32 0 }, align 8
@_16c2_s_p9_1 = internal global %struct.static_codebook { i64 2, i64 289, ptr @_vq_lengthlist__16c2_s_p9_1, i32 1, i64 -518488064, i64 1622704128, i32 5, i32 0, ptr @_vq_quantlist__16c2_s_p9_1, ptr null, ptr @_vq_auxt__16c2_s_p9_1, ptr null, i32 0 }, align 8
@_16c2_s_p9_2 = internal global %struct.static_codebook { i64 1, i64 27, ptr @_vq_lengthlist__16c2_s_p9_2, i32 1, i64 -528875520, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__16c2_s_p9_2, ptr null, ptr @_vq_auxt__16c2_s_p9_2, ptr null, i32 0 }, align 8
@_vq_quantlist__16c2_s_p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__16c2_s_p1_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c2_s_p1_0, ptr @_vq_quantmap__16c2_s_p1_0, i32 3, i32 3 }, align 8
@_vq_lengthlist__16c2_s_p1_0 = internal global <{ [21 x i64], [60 x i64] }> <{ [21 x i64] [i64 1, i64 3, i64 3, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 5, i64 5, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 4, i64 5, i64 5], [60 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__16c2_s_p1_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__16c2_s_p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__16c2_s_p2_0 = internal global [625 x i64] [i64 2, i64 4, i64 3, i64 7, i64 7, i64 0, i64 0, i64 0, i64 7, i64 8, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 8, i64 8, i64 4, i64 5, i64 4, i64 8, i64 8, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 9, i64 9, i64 0, i64 0, i64 0, i64 9, i64 9, i64 4, i64 4, i64 5, i64 8, i64 8, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 8, i64 8, i64 0, i64 0, i64 0, i64 9, i64 9, i64 0, i64 0, i64 0, i64 9, i64 9, i64 7, i64 8, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 12, i64 11, i64 0, i64 0, i64 0, i64 11, i64 11, i64 0, i64 0, i64 0, i64 14, i64 13, i64 0, i64 0, i64 0, i64 14, i64 13, i64 7, i64 8, i64 8, i64 9, i64 10, i64 0, i64 0, i64 0, i64 11, i64 12, i64 0, i64 0, i64 0, i64 11, i64 11, i64 0, i64 0, i64 0, i64 14, i64 14, i64 0, i64 0, i64 0, i64 13, i64 14, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 8, i64 8, i64 11, i64 11, i64 0, i64 0, i64 0, i64 11, i64 11, i64 0, i64 0, i64 0, i64 12, i64 11, i64 0, i64 0, i64 0, i64 12, i64 12, i64 0, i64 0, i64 0, i64 13, i64 13, i64 8, i64 8, i64 8, i64 11, i64 11, i64 0, i64 0, i64 0, i64 11, i64 11, i64 0, i64 0, i64 0, i64 11, i64 12, i64 0, i64 0, i64 0, i64 12, i64 13, i64 0, i64 0, i64 0, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 8, i64 8, i64 12, i64 11, i64 0, i64 0, i64 0, i64 12, i64 11, i64 0, i64 0, i64 0, i64 11, i64 11, i64 0, i64 0, i64 0, i64 13, i64 13, i64 0, i64 0, i64 0, i64 13, i64 12, i64 8, i64 8, i64 8, i64 11, i64 12, i64 0, i64 0, i64 0, i64 11, i64 12, i64 0, i64 0, i64 0, i64 11, i64 11, i64 0, i64 0, i64 0, i64 13, i64 13, i64 0, i64 0, i64 0, i64 12, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 9, i64 14, i64 13, i64 0, i64 0, i64 0, i64 13, i64 12, i64 0, i64 0, i64 0, i64 13, i64 13, i64 0, i64 0, i64 0, i64 13, i64 12, i64 0, i64 0, i64 0, i64 13, i64 13, i64 8, i64 9, i64 9, i64 13, i64 14, i64 0, i64 0, i64 0, i64 12, i64 13, i64 0, i64 0, i64 0, i64 13, i64 13, i64 0, i64 0, i64 0, i64 12, i64 13, i64 0, i64 0, i64 0, i64 13, i64 13, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 9, i64 9, i64 14, i64 13, i64 0, i64 0, i64 0, i64 13, i64 13, i64 0, i64 0, i64 0, i64 13, i64 12, i64 0, i64 0, i64 0, i64 13, i64 13, i64 0, i64 0, i64 0, i64 13, i64 12, i64 8, i64 9, i64 9, i64 14, i64 14, i64 0, i64 0, i64 0, i64 13, i64 13, i64 0, i64 0, i64 0, i64 12, i64 13, i64 0, i64 0, i64 0, i64 13, i64 13, i64 0, i64 0, i64 0, i64 12, i64 13], align 16
@_vq_quantlist__16c2_s_p2_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__16c2_s_p2_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c2_s_p2_0, ptr @_vq_quantmap__16c2_s_p2_0, i32 5, i32 5 }, align 8
@_vq_quantthresh__16c2_s_p2_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__16c2_s_p2_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_quantlist__16c2_s_p3_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__16c2_s_p3_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c2_s_p3_0, ptr @_vq_quantmap__16c2_s_p3_0, i32 9, i32 9 }, align 8
@_vq_lengthlist__16c2_s_p3_0 = internal global <{ [63 x i64], [18 x i64] }> <{ [63 x i64] [i64 1, i64 3, i64 3, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 0, i64 0, i64 0, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 10, i64 10, i64 0, i64 0, i64 0, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 0, i64 0, i64 0, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10], [18 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__16c2_s_p3_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__16c2_s_p3_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_quantlist__16c2_s_p4_0 = internal global [17 x i64] [i64 8, i64 7, i64 9, i64 6, i64 10, i64 5, i64 11, i64 4, i64 12, i64 3, i64 13, i64 2, i64 14, i64 1, i64 15, i64 0, i64 16], align 16
@_vq_auxt__16c2_s_p4_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c2_s_p4_0, ptr @_vq_quantmap__16c2_s_p4_0, i32 17, i32 17 }, align 8
@_vq_lengthlist__16c2_s_p4_0 = internal global <{ [153 x i64], [136 x i64] }> <{ [153 x i64] [i64 2, i64 3, i64 3, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 0, i64 0, i64 0, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 0, i64 0, i64 0, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 0, i64 0, i64 0, i64 6, i64 6, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 0, i64 0, i64 0, i64 6, i64 6, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 0, i64 0, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12], [136 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__16c2_s_p4_0 = internal global [16 x float] [float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00], align 16
@_vq_quantmap__16c2_s_p4_0 = internal global [17 x i64] [i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16], align 16
@_vq_lengthlist__16c2_s_p5_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 5, i64 7, i64 7, i64 6, i64 7, i64 7, i64 4, i64 6, i64 6, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 4, i64 7, i64 6, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 5, i64 9, i64 9, i64 9, i64 12, i64 11, i64 10, i64 11, i64 12, i64 7, i64 10, i64 10, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 7, i64 10, i64 10, i64 11, i64 12, i64 12, i64 12, i64 12, i64 13, i64 6, i64 10, i64 10, i64 10, i64 12, i64 12, i64 10, i64 12, i64 12, i64 7, i64 10, i64 10, i64 11, i64 13, i64 12, i64 12, i64 12, i64 12, i64 7, i64 10, i64 10, i64 11, i64 12, i64 12, i64 12, i64 12, i64 12], align 16
@_vq_quantlist__16c2_s_p5_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__16c2_s_p5_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c2_s_p5_0, ptr @_vq_quantmap__16c2_s_p5_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__16c2_s_p5_0 = internal global [2 x float] [float -5.500000e+00, float 5.500000e+00], align 4
@_vq_quantmap__16c2_s_p5_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__16c2_s_p5_1 = internal global [121 x i64] [i64 2, i64 3, i64 3, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 11, i64 11, i64 11, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 11, i64 11, i64 11, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 11, i64 11, i64 11, i64 6, i64 6, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 11, i64 11, i64 11, i64 6, i64 6, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 11, i64 11, i64 11, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 11, i64 11, i64 11, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 11, i64 11, i64 11, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 11, i64 11, i64 11, i64 11, i64 11, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 11, i64 11, i64 11, i64 11, i64 11, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 11, i64 11, i64 11, i64 11, i64 11, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8], align 16
@_vq_quantlist__16c2_s_p5_1 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__16c2_s_p5_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c2_s_p5_1, ptr @_vq_quantmap__16c2_s_p5_1, i32 11, i32 11 }, align 8
@_vq_quantthresh__16c2_s_p5_1 = internal global [10 x float] [float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00], align 16
@_vq_quantmap__16c2_s_p5_1 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_quantlist__16c2_s_p6_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__16c2_s_p6_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c2_s_p6_0, ptr @_vq_quantmap__16c2_s_p6_0, i32 13, i32 13 }, align 8
@_vq_lengthlist__16c2_s_p6_0 = internal global <{ [91 x i64], [78 x i64] }> <{ [91 x i64] [i64 1, i64 4, i64 4, i64 7, i64 6, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 5, i64 5, i64 5, i64 7, i64 7, i64 9, i64 9, i64 9, i64 9, i64 11, i64 11, i64 12, i64 12, i64 6, i64 5, i64 5, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 0, i64 7, i64 7, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 11, i64 12, i64 12, i64 12, i64 0, i64 11, i64 11, i64 8, i64 8, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 0, i64 11, i64 12, i64 8, i64 8, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13], [78 x i64] zeroinitializer }>, align 16
@_vq_quantthresh__16c2_s_p6_0 = internal global [12 x float] [float -2.750000e+01, float -2.250000e+01, float -1.750000e+01, float -1.250000e+01, float -7.500000e+00, float -2.500000e+00, float 2.500000e+00, float 7.500000e+00, float 1.250000e+01, float 1.750000e+01, float 2.250000e+01, float 2.750000e+01], align 16
@_vq_quantmap__16c2_s_p6_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__16c2_s_p6_1 = internal global [25 x i64] [i64 2, i64 3, i64 3, i64 5, i64 5, i64 6, i64 6, i64 6, i64 5, i64 5, i64 6, i64 6, i64 6, i64 5, i64 5, i64 6, i64 6, i64 6, i64 5, i64 5, i64 6, i64 6, i64 6, i64 5, i64 5], align 16
@_vq_quantlist__16c2_s_p6_1 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__16c2_s_p6_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c2_s_p6_1, ptr @_vq_quantmap__16c2_s_p6_1, i32 5, i32 5 }, align 8
@_vq_quantthresh__16c2_s_p6_1 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__16c2_s_p6_1 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__16c2_s_p7_0 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 5, i64 5, i64 5, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 6, i64 5, i64 5, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 13, i64 18, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 12, i64 12, i64 13, i64 13, i64 18, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 12, i64 12, i64 13, i64 13, i64 18, i64 11, i64 10, i64 8, i64 8, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 18, i64 11, i64 11, i64 8, i64 8, i64 10, i64 10, i64 11, i64 11, i64 12, i64 13, i64 13, i64 13, i64 18, i64 18, i64 18, i64 10, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 18, i64 18, i64 18, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 18, i64 18, i64 18, i64 14, i64 14, i64 12, i64 12, i64 12, i64 12, i64 14, i64 14, i64 15, i64 14, i64 18, i64 18, i64 18, i64 15, i64 15, i64 11, i64 12, i64 12, i64 12, i64 13, i64 13, i64 15, i64 15, i64 18, i64 18, i64 18, i64 18, i64 18, i64 13, i64 13, i64 13, i64 13, i64 13, i64 14, i64 17, i64 16, i64 18, i64 18, i64 18, i64 18, i64 18, i64 13, i64 14, i64 13, i64 13, i64 14, i64 13, i64 15, i64 14], align 16
@_vq_quantlist__16c2_s_p7_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__16c2_s_p7_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c2_s_p7_0, ptr @_vq_quantmap__16c2_s_p7_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__16c2_s_p7_0 = internal global [12 x float] [float -6.050000e+01, float -4.950000e+01, float -3.850000e+01, float -2.750000e+01, float -1.650000e+01, float -5.500000e+00, float 5.500000e+00, float 1.650000e+01, float 2.750000e+01, float 3.850000e+01, float 4.950000e+01, float 6.050000e+01], align 16
@_vq_quantmap__16c2_s_p7_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__16c2_s_p7_1 = internal global [121 x i64] [i64 2, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 9, i64 9, i64 9, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 7, i64 7, i64 8, i64 8, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8], align 16
@_vq_quantlist__16c2_s_p7_1 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__16c2_s_p7_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c2_s_p7_1, ptr @_vq_quantmap__16c2_s_p7_1, i32 11, i32 11 }, align 8
@_vq_quantthresh__16c2_s_p7_1 = internal global [10 x float] [float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00], align 16
@_vq_quantmap__16c2_s_p7_1 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_lengthlist__16c2_s_p8_0 = internal global [225 x i64] [i64 1, i64 4, i64 4, i64 7, i64 6, i64 7, i64 7, i64 6, i64 6, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 6, i64 6, i64 6, i64 8, i64 8, i64 9, i64 8, i64 8, i64 8, i64 9, i64 9, i64 11, i64 10, i64 11, i64 11, i64 7, i64 6, i64 6, i64 8, i64 8, i64 9, i64 8, i64 7, i64 7, i64 9, i64 9, i64 10, i64 10, i64 12, i64 11, i64 14, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 11, i64 13, i64 14, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 12, i64 14, i64 13, i64 11, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 11, i64 10, i64 13, i64 12, i64 14, i64 11, i64 13, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 10, i64 13, i64 12, i64 14, i64 14, i64 14, i64 8, i64 9, i64 9, i64 9, i64 11, i64 11, i64 11, i64 11, i64 11, i64 12, i64 13, i64 13, i64 14, i64 14, i64 14, i64 9, i64 8, i64 9, i64 9, i64 10, i64 10, i64 12, i64 10, i64 11, i64 12, i64 12, i64 14, i64 14, i64 14, i64 14, i64 11, i64 12, i64 10, i64 10, i64 12, i64 12, i64 12, i64 12, i64 13, i64 14, i64 12, i64 12, i64 14, i64 14, i64 14, i64 12, i64 12, i64 9, i64 10, i64 11, i64 11, i64 12, i64 14, i64 12, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 11, i64 11, i64 12, i64 11, i64 12, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 12, i64 11, i64 11, i64 11, i64 11, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 13, i64 12, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 14, i64 12, i64 12, i64 12, i64 13, i64 14, i64 14, i64 13, i64 13], align 16
@_vq_quantlist__16c2_s_p8_0 = internal global [15 x i64] [i64 7, i64 6, i64 8, i64 5, i64 9, i64 4, i64 10, i64 3, i64 11, i64 2, i64 12, i64 1, i64 13, i64 0, i64 14], align 16
@_vq_auxt__16c2_s_p8_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c2_s_p8_0, ptr @_vq_quantmap__16c2_s_p8_0, i32 15, i32 15 }, align 8
@_vq_quantthresh__16c2_s_p8_0 = internal global [14 x float] [float -1.365000e+02, float -1.155000e+02, float -9.450000e+01, float -7.350000e+01, float -5.250000e+01, float -3.150000e+01, float -1.050000e+01, float 1.050000e+01, float 3.150000e+01, float 5.250000e+01, float 7.350000e+01, float 9.450000e+01, float 1.155000e+02, float 1.365000e+02], align 16
@_vq_quantmap__16c2_s_p8_0 = internal global [15 x i64] [i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14], align 16
@_vq_lengthlist__16c2_s_p8_1 = internal global [441 x i64] [i64 2, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 11, i64 12, i64 11, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 9, i64 11, i64 11, i64 10, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 11, i64 11, i64 11, i64 8, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 9, i64 10, i64 10, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 8, i64 8, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 9, i64 10, i64 11, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 9, i64 9, i64 10, i64 10, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 12, i64 11, i64 11, i64 11, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 12, i64 11, i64 13, i64 13, i64 11, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 10, i64 10, i64 10, i64 10, i64 11, i64 12, i64 11, i64 12, i64 11, i64 9, i64 9, i64 9, i64 10, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 12, i64 11, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 12, i64 12, i64 12, i64 11, i64 11, i64 11, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 10, i64 10, i64 10, i64 11, i64 10, i64 12, i64 11, i64 11, i64 12, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 10, i64 10, i64 11, i64 11, i64 11, i64 12, i64 11, i64 12, i64 11, i64 11, i64 12, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 10, i64 10, i64 11, i64 10, i64 12, i64 11, i64 11, i64 11, i64 12, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 10, i64 11, i64 12, i64 11, i64 11, i64 11, i64 12, i64 11, i64 12, i64 11, i64 12, i64 10, i64 11, i64 10, i64 10, i64 10, i64 10, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 12, i64 11, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 10, i64 10, i64 11, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 12, i64 11, i64 10, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10], align 16
@_vq_quantlist__16c2_s_p8_1 = internal global [21 x i64] [i64 10, i64 9, i64 11, i64 8, i64 12, i64 7, i64 13, i64 6, i64 14, i64 5, i64 15, i64 4, i64 16, i64 3, i64 17, i64 2, i64 18, i64 1, i64 19, i64 0, i64 20], align 16
@_vq_auxt__16c2_s_p8_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c2_s_p8_1, ptr @_vq_quantmap__16c2_s_p8_1, i32 21, i32 21 }, align 8
@_vq_quantthresh__16c2_s_p8_1 = internal global [20 x float] [float -9.500000e+00, float -8.500000e+00, float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00, float 8.500000e+00, float 9.500000e+00], align 16
@_vq_quantmap__16c2_s_p8_1 = internal global [21 x i64] [i64 19, i64 17, i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16, i64 18, i64 20], align 16
@_vq_lengthlist__16c2_s_p9_0 = internal global [169 x i64] [i64 1, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8], align 16
@_vq_quantlist__16c2_s_p9_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__16c2_s_p9_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c2_s_p9_0, ptr @_vq_quantmap__16c2_s_p9_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__16c2_s_p9_0 = internal global [12 x float] [float -5.120500e+03, float -4.189500e+03, float -3.258500e+03, float -2.327500e+03, float -1.396500e+03, float -4.655000e+02, float 4.655000e+02, float 1.396500e+03, float 2.327500e+03, float 3.258500e+03, float 4.189500e+03, float 5.120500e+03], align 16
@_vq_quantmap__16c2_s_p9_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__16c2_s_p9_1 = internal global [289 x i64] [i64 1, i64 5, i64 5, i64 9, i64 8, i64 7, i64 7, i64 7, i64 6, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 8, i64 7, i64 6, i64 8, i64 8, i64 10, i64 9, i64 10, i64 10, i64 10, i64 9, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 8, i64 6, i64 6, i64 8, i64 8, i64 9, i64 8, i64 9, i64 8, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 8, i64 10, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 8, i64 9, i64 9, i64 9, i64 10, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 10, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10], align 16
@_vq_quantlist__16c2_s_p9_1 = internal global [17 x i64] [i64 8, i64 7, i64 9, i64 6, i64 10, i64 5, i64 11, i64 4, i64 12, i64 3, i64 13, i64 2, i64 14, i64 1, i64 15, i64 0, i64 16], align 16
@_vq_auxt__16c2_s_p9_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c2_s_p9_1, ptr @_vq_quantmap__16c2_s_p9_1, i32 17, i32 17 }, align 8
@_vq_quantthresh__16c2_s_p9_1 = internal global [16 x float] [float -3.675000e+02, float -3.185000e+02, float -2.695000e+02, float -2.205000e+02, float -1.715000e+02, float -1.225000e+02, float -7.350000e+01, float -2.450000e+01, float 2.450000e+01, float 7.350000e+01, float 1.225000e+02, float 1.715000e+02, float 2.205000e+02, float 2.695000e+02, float 3.185000e+02, float 3.675000e+02], align 16
@_vq_quantmap__16c2_s_p9_1 = internal global [17 x i64] [i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16], align 16
@_vq_lengthlist__16c2_s_p9_2 = internal global [27 x i64] [i64 1, i64 4, i64 4, i64 5, i64 5, i64 6, i64 6, i64 6, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 7, i64 8, i64 7, i64 7, i64 4, i64 4], align 16
@_vq_quantlist__16c2_s_p9_2 = internal global [27 x i64] [i64 13, i64 12, i64 14, i64 11, i64 15, i64 10, i64 16, i64 9, i64 17, i64 8, i64 18, i64 7, i64 19, i64 6, i64 20, i64 5, i64 21, i64 4, i64 22, i64 3, i64 23, i64 2, i64 24, i64 1, i64 25, i64 0, i64 26], align 16
@_vq_auxt__16c2_s_p9_2 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16c2_s_p9_2, ptr @_vq_quantmap__16c2_s_p9_2, i32 27, i32 27 }, align 8
@_vq_quantthresh__16c2_s_p9_2 = internal global [26 x float] [float -1.250000e+01, float -1.150000e+01, float -1.050000e+01, float -9.500000e+00, float -8.500000e+00, float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00, float 8.500000e+00, float 9.500000e+00, float 1.050000e+01, float 1.150000e+01, float 1.250000e+01], align 16
@_vq_quantmap__16c2_s_p9_2 = internal global [27 x i64] [i64 25, i64 23, i64 21, i64 19, i64 17, i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16, i64 18, i64 20, i64 22, i64 24, i64 26], align 16
@_huff_lengthlist__16c2_s_long = internal global [100 x i64] [i64 4, i64 7, i64 9, i64 9, i64 9, i64 8, i64 9, i64 10, i64 15, i64 19, i64 5, i64 4, i64 5, i64 6, i64 7, i64 7, i64 8, i64 9, i64 14, i64 16, i64 6, i64 5, i64 4, i64 5, i64 6, i64 7, i64 8, i64 10, i64 12, i64 19, i64 7, i64 6, i64 5, i64 4, i64 5, i64 6, i64 7, i64 9, i64 11, i64 18, i64 8, i64 7, i64 6, i64 5, i64 5, i64 5, i64 7, i64 9, i64 10, i64 17, i64 8, i64 7, i64 7, i64 5, i64 5, i64 5, i64 6, i64 7, i64 12, i64 18, i64 8, i64 8, i64 8, i64 7, i64 7, i64 5, i64 5, i64 7, i64 12, i64 18, i64 8, i64 9, i64 10, i64 9, i64 9, i64 7, i64 6, i64 7, i64 12, i64 17, i64 14, i64 18, i64 16, i64 16, i64 15, i64 12, i64 11, i64 10, i64 12, i64 18, i64 15, i64 17, i64 18, i64 18, i64 18, i64 15, i64 14, i64 14, i64 16, i64 18], align 16
@_res_16u_0 = internal global [1 x %struct.vorbis_residue_template] [%struct.vorbis_residue_template { i32 1, i32 0, ptr @_residue_44_low_un, ptr @_huff_book__16u0__single, ptr @_huff_book__16u0__single, ptr @_resbook_16u_0, ptr @_resbook_16u_0 }], align 16
@_res_16u_1 = internal global [2 x %struct.vorbis_residue_template] [%struct.vorbis_residue_template { i32 1, i32 0, ptr @_residue_44_mid_un, ptr @_huff_book__16u1__short, ptr @_huff_book__16u1__short, ptr @_resbook_16u_1, ptr @_resbook_16u_1 }, %struct.vorbis_residue_template { i32 1, i32 0, ptr @_residue_44_mid_un, ptr @_huff_book__16u1__long, ptr @_huff_book__16u1__long, ptr @_resbook_16u_1, ptr @_resbook_16u_1 }], align 16
@_res_16u_2 = internal global [2 x %struct.vorbis_residue_template] [%struct.vorbis_residue_template { i32 1, i32 0, ptr @_residue_44_hi_un, ptr @_huff_book__16u2__short, ptr @_huff_book__16u2__short, ptr @_resbook_16u_2, ptr @_resbook_16u_2 }, %struct.vorbis_residue_template { i32 1, i32 0, ptr @_residue_44_hi_un, ptr @_huff_book__16u2__long, ptr @_huff_book__16u2__long, ptr @_resbook_16u_2, ptr @_resbook_16u_2 }], align 16
@_huff_book__16u0__single = internal global %struct.static_codebook { i64 2, i64 64, ptr @_huff_lengthlist__16u0__single, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_resbook_16u_0 = internal global %struct.static_bookblock { [12 x [3 x ptr]] [[3 x ptr] zeroinitializer, [3 x ptr] [ptr null, ptr null, ptr @_16u0__p1_0], [3 x ptr] [ptr null, ptr null, ptr @_16u0__p2_0], [3 x ptr] [ptr null, ptr null, ptr @_16u0__p3_0], [3 x ptr] [ptr null, ptr null, ptr @_16u0__p4_0], [3 x ptr] [ptr null, ptr null, ptr @_16u0__p5_0], [3 x ptr] [ptr @_16u0__p6_0, ptr @_16u0__p6_1, ptr null], [3 x ptr] [ptr @_16u0__p7_0, ptr @_16u0__p7_1, ptr @_16u0__p7_2], [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer] }, align 8
@_huff_lengthlist__16u0__single = internal global [64 x i64] [i64 3, i64 5, i64 8, i64 7, i64 14, i64 8, i64 9, i64 19, i64 5, i64 2, i64 5, i64 5, i64 9, i64 6, i64 9, i64 19, i64 8, i64 4, i64 5, i64 7, i64 8, i64 9, i64 13, i64 19, i64 7, i64 4, i64 6, i64 5, i64 9, i64 6, i64 9, i64 19, i64 12, i64 8, i64 7, i64 9, i64 10, i64 11, i64 13, i64 19, i64 8, i64 5, i64 8, i64 6, i64 9, i64 6, i64 7, i64 19, i64 8, i64 8, i64 10, i64 7, i64 7, i64 4, i64 5, i64 19, i64 12, i64 17, i64 19, i64 15, i64 18, i64 13, i64 11, i64 18], align 16
@_16u0__p1_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__16u0__p1_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__16u0__p1_0, ptr null, ptr @_vq_auxt__16u0__p1_0, ptr null, i32 0 }, align 8
@_16u0__p2_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__16u0__p2_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__16u0__p2_0, ptr null, ptr @_vq_auxt__16u0__p2_0, ptr null, i32 0 }, align 8
@_16u0__p3_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__16u0__p3_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__16u0__p3_0, ptr null, ptr @_vq_auxt__16u0__p3_0, ptr null, i32 0 }, align 8
@_16u0__p4_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__16u0__p4_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__16u0__p4_0, ptr null, ptr @_vq_auxt__16u0__p4_0, ptr null, i32 0 }, align 8
@_16u0__p5_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__16u0__p5_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__16u0__p5_0, ptr null, ptr @_vq_auxt__16u0__p5_0, ptr null, i32 0 }, align 8
@_16u0__p6_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__16u0__p6_0, i32 1, i64 -526516224, i64 1616117760, i32 4, i32 0, ptr @_vq_quantlist__16u0__p6_0, ptr null, ptr @_vq_auxt__16u0__p6_0, ptr null, i32 0 }, align 8
@_16u0__p6_1 = internal global %struct.static_codebook { i64 2, i64 25, ptr @_vq_lengthlist__16u0__p6_1, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__16u0__p6_1, ptr null, ptr @_vq_auxt__16u0__p6_1, ptr null, i32 0 }, align 8
@_16u0__p7_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__16u0__p7_0, i32 1, i64 -518803456, i64 1628680192, i32 2, i32 0, ptr @_vq_quantlist__16u0__p7_0, ptr null, ptr @_vq_auxt__16u0__p7_0, ptr null, i32 0 }, align 8
@_16u0__p7_1 = internal global %struct.static_codebook { i64 2, i64 225, ptr @_vq_lengthlist__16u0__p7_1, i32 1, i64 -520986624, i64 1620377600, i32 4, i32 0, ptr @_vq_quantlist__16u0__p7_1, ptr null, ptr @_vq_auxt__16u0__p7_1, ptr null, i32 0 }, align 8
@_16u0__p7_2 = internal global %struct.static_codebook { i64 2, i64 441, ptr @_vq_lengthlist__16u0__p7_2, i32 1, i64 -529268736, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__16u0__p7_2, ptr null, ptr @_vq_auxt__16u0__p7_2, ptr null, i32 0 }, align 8
@_vq_lengthlist__16u0__p1_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 5, i64 7, i64 7, i64 5, i64 7, i64 8, i64 5, i64 8, i64 8, i64 8, i64 10, i64 10, i64 8, i64 10, i64 11, i64 5, i64 8, i64 8, i64 8, i64 10, i64 10, i64 8, i64 10, i64 10, i64 4, i64 9, i64 9, i64 9, i64 12, i64 11, i64 8, i64 11, i64 11, i64 8, i64 12, i64 11, i64 10, i64 12, i64 14, i64 10, i64 13, i64 13, i64 7, i64 11, i64 11, i64 10, i64 14, i64 12, i64 11, i64 14, i64 14, i64 4, i64 9, i64 9, i64 8, i64 11, i64 11, i64 9, i64 11, i64 12, i64 7, i64 11, i64 11, i64 10, i64 13, i64 14, i64 10, i64 12, i64 14, i64 8, i64 11, i64 12, i64 10, i64 14, i64 14, i64 10, i64 13, i64 12], align 16
@_vq_quantlist__16u0__p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__16u0__p1_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16u0__p1_0, ptr @_vq_quantmap__16u0__p1_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__16u0__p1_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__16u0__p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__16u0__p2_0 = internal global [81 x i64] [i64 2, i64 4, i64 4, i64 5, i64 6, i64 6, i64 5, i64 6, i64 6, i64 5, i64 7, i64 7, i64 7, i64 8, i64 9, i64 7, i64 8, i64 9, i64 5, i64 7, i64 7, i64 7, i64 9, i64 8, i64 7, i64 9, i64 7, i64 4, i64 7, i64 7, i64 7, i64 9, i64 9, i64 7, i64 8, i64 8, i64 6, i64 9, i64 8, i64 7, i64 8, i64 11, i64 9, i64 11, i64 10, i64 6, i64 8, i64 9, i64 8, i64 11, i64 8, i64 9, i64 10, i64 11, i64 4, i64 7, i64 7, i64 7, i64 8, i64 8, i64 7, i64 9, i64 9, i64 6, i64 9, i64 8, i64 9, i64 11, i64 10, i64 8, i64 8, i64 11, i64 6, i64 8, i64 9, i64 9, i64 10, i64 11, i64 8, i64 11, i64 8], align 16
@_vq_quantlist__16u0__p2_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__16u0__p2_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16u0__p2_0, ptr @_vq_quantmap__16u0__p2_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__16u0__p2_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__16u0__p2_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__16u0__p3_0 = internal global [625 x i64] [i64 1, i64 5, i64 5, i64 7, i64 7, i64 6, i64 7, i64 7, i64 8, i64 8, i64 6, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 11, i64 11, i64 8, i64 9, i64 9, i64 11, i64 11, i64 6, i64 9, i64 8, i64 10, i64 10, i64 8, i64 10, i64 10, i64 11, i64 11, i64 8, i64 10, i64 10, i64 11, i64 11, i64 10, i64 11, i64 10, i64 13, i64 12, i64 9, i64 11, i64 10, i64 13, i64 13, i64 6, i64 8, i64 9, i64 10, i64 10, i64 8, i64 10, i64 10, i64 11, i64 11, i64 8, i64 10, i64 10, i64 11, i64 11, i64 9, i64 10, i64 11, i64 13, i64 12, i64 10, i64 10, i64 11, i64 12, i64 12, i64 8, i64 11, i64 11, i64 14, i64 13, i64 10, i64 12, i64 11, i64 15, i64 13, i64 9, i64 12, i64 11, i64 15, i64 14, i64 12, i64 14, i64 13, i64 16, i64 14, i64 12, i64 13, i64 13, i64 17, i64 14, i64 8, i64 11, i64 11, i64 13, i64 14, i64 9, i64 11, i64 12, i64 14, i64 15, i64 10, i64 11, i64 12, i64 13, i64 15, i64 11, i64 13, i64 13, i64 14, i64 16, i64 12, i64 13, i64 14, i64 14, i64 16, i64 5, i64 9, i64 9, i64 11, i64 11, i64 9, i64 11, i64 11, i64 12, i64 12, i64 8, i64 11, i64 11, i64 12, i64 12, i64 11, i64 12, i64 12, i64 15, i64 14, i64 10, i64 12, i64 12, i64 15, i64 15, i64 8, i64 11, i64 11, i64 13, i64 12, i64 10, i64 12, i64 12, i64 13, i64 13, i64 10, i64 12, i64 12, i64 14, i64 13, i64 12, i64 12, i64 13, i64 14, i64 15, i64 11, i64 13, i64 13, i64 17, i64 16, i64 7, i64 11, i64 11, i64 13, i64 13, i64 10, i64 12, i64 12, i64 14, i64 13, i64 10, i64 12, i64 12, i64 13, i64 14, i64 12, i64 13, i64 12, i64 15, i64 14, i64 11, i64 13, i64 13, i64 15, i64 14, i64 9, i64 12, i64 12, i64 16, i64 15, i64 11, i64 13, i64 13, i64 17, i64 16, i64 10, i64 13, i64 13, i64 16, i64 16, i64 13, i64 14, i64 15, i64 15, i64 16, i64 13, i64 15, i64 14, i64 19, i64 17, i64 9, i64 12, i64 12, i64 14, i64 16, i64 11, i64 13, i64 13, i64 15, i64 16, i64 10, i64 13, i64 13, i64 17, i64 16, i64 13, i64 14, i64 13, i64 17, i64 15, i64 12, i64 15, i64 15, i64 16, i64 17, i64 5, i64 9, i64 9, i64 11, i64 11, i64 8, i64 11, i64 11, i64 13, i64 12, i64 9, i64 11, i64 11, i64 12, i64 12, i64 10, i64 12, i64 12, i64 14, i64 15, i64 11, i64 12, i64 12, i64 14, i64 14, i64 7, i64 11, i64 10, i64 13, i64 12, i64 10, i64 12, i64 12, i64 14, i64 13, i64 10, i64 11, i64 12, i64 13, i64 13, i64 11, i64 13, i64 13, i64 15, i64 16, i64 12, i64 12, i64 13, i64 15, i64 15, i64 7, i64 11, i64 11, i64 13, i64 13, i64 10, i64 13, i64 13, i64 14, i64 14, i64 10, i64 12, i64 12, i64 13, i64 13, i64 11, i64 13, i64 13, i64 16, i64 15, i64 12, i64 13, i64 13, i64 15, i64 14, i64 9, i64 12, i64 12, i64 15, i64 15, i64 10, i64 13, i64 13, i64 17, i64 16, i64 11, i64 12, i64 13, i64 15, i64 15, i64 12, i64 15, i64 14, i64 18, i64 18, i64 13, i64 14, i64 14, i64 16, i64 17, i64 9, i64 12, i64 12, i64 15, i64 16, i64 10, i64 13, i64 13, i64 15, i64 16, i64 11, i64 13, i64 13, i64 15, i64 16, i64 13, i64 15, i64 15, i64 17, i64 17, i64 13, i64 15, i64 14, i64 16, i64 15, i64 7, i64 11, i64 11, i64 15, i64 16, i64 10, i64 13, i64 12, i64 16, i64 17, i64 10, i64 12, i64 13, i64 15, i64 17, i64 15, i64 16, i64 16, i64 18, i64 17, i64 13, i64 15, i64 15, i64 17, i64 18, i64 8, i64 12, i64 12, i64 16, i64 16, i64 11, i64 13, i64 14, i64 17, i64 18, i64 11, i64 13, i64 13, i64 18, i64 16, i64 15, i64 17, i64 16, i64 17, i64 19, i64 14, i64 15, i64 15, i64 17, i64 16, i64 8, i64 12, i64 12, i64 16, i64 15, i64 11, i64 14, i64 13, i64 18, i64 17, i64 11, i64 13, i64 14, i64 18, i64 17, i64 15, i64 16, i64 16, i64 18, i64 17, i64 13, i64 16, i64 16, i64 18, i64 18, i64 11, i64 15, i64 14, i64 18, i64 17, i64 13, i64 14, i64 15, i64 18, i64 0, i64 12, i64 15, i64 15, i64 0, i64 17, i64 17, i64 16, i64 17, i64 17, i64 18, i64 14, i64 16, i64 18, i64 18, i64 0, i64 11, i64 14, i64 14, i64 17, i64 0, i64 12, i64 15, i64 14, i64 17, i64 19, i64 12, i64 15, i64 14, i64 18, i64 0, i64 15, i64 18, i64 16, i64 0, i64 17, i64 14, i64 18, i64 16, i64 18, i64 0, i64 7, i64 11, i64 11, i64 16, i64 15, i64 10, i64 12, i64 12, i64 18, i64 16, i64 10, i64 13, i64 13, i64 16, i64 15, i64 13, i64 15, i64 14, i64 17, i64 17, i64 14, i64 16, i64 16, i64 19, i64 18, i64 8, i64 12, i64 12, i64 16, i64 16, i64 11, i64 13, i64 13, i64 18, i64 16, i64 11, i64 13, i64 14, i64 17, i64 16, i64 14, i64 15, i64 15, i64 19, i64 18, i64 15, i64 16, i64 16, i64 0, i64 19, i64 8, i64 12, i64 12, i64 16, i64 17, i64 11, i64 13, i64 13, i64 17, i64 17, i64 11, i64 14, i64 13, i64 17, i64 17, i64 13, i64 15, i64 15, i64 17, i64 19, i64 15, i64 17, i64 17, i64 19, i64 0, i64 11, i64 14, i64 15, i64 19, i64 17, i64 12, i64 15, i64 16, i64 18, i64 18, i64 12, i64 14, i64 15, i64 19, i64 17, i64 14, i64 16, i64 17, i64 0, i64 18, i64 16, i64 16, i64 19, i64 17, i64 0, i64 11, i64 14, i64 14, i64 18, i64 19, i64 12, i64 15, i64 14, i64 17, i64 17, i64 13, i64 16, i64 14, i64 17, i64 16, i64 14, i64 17, i64 16, i64 18, i64 18, i64 15, i64 18, i64 15, i64 0, i64 18], align 16
@_vq_quantlist__16u0__p3_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__16u0__p3_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16u0__p3_0, ptr @_vq_quantmap__16u0__p3_0, i32 5, i32 5 }, align 8
@_vq_quantthresh__16u0__p3_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__16u0__p3_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__16u0__p4_0 = internal global [625 x i64] [i64 3, i64 5, i64 5, i64 8, i64 8, i64 6, i64 6, i64 6, i64 9, i64 9, i64 6, i64 6, i64 6, i64 9, i64 9, i64 9, i64 10, i64 9, i64 11, i64 11, i64 9, i64 9, i64 9, i64 11, i64 11, i64 6, i64 7, i64 7, i64 10, i64 10, i64 7, i64 7, i64 8, i64 10, i64 10, i64 7, i64 7, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 12, i64 9, i64 10, i64 10, i64 11, i64 12, i64 6, i64 7, i64 7, i64 10, i64 10, i64 7, i64 8, i64 7, i64 10, i64 10, i64 7, i64 8, i64 7, i64 10, i64 10, i64 10, i64 11, i64 10, i64 12, i64 11, i64 10, i64 10, i64 10, i64 13, i64 10, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 11, i64 10, i64 14, i64 12, i64 9, i64 11, i64 11, i64 13, i64 13, i64 11, i64 12, i64 13, i64 13, i64 13, i64 11, i64 12, i64 12, i64 15, i64 13, i64 9, i64 10, i64 10, i64 12, i64 13, i64 9, i64 11, i64 10, i64 12, i64 13, i64 10, i64 10, i64 11, i64 12, i64 13, i64 11, i64 12, i64 12, i64 12, i64 13, i64 11, i64 12, i64 12, i64 13, i64 13, i64 5, i64 7, i64 7, i64 10, i64 10, i64 7, i64 8, i64 8, i64 10, i64 10, i64 7, i64 8, i64 8, i64 10, i64 10, i64 10, i64 11, i64 10, i64 12, i64 13, i64 10, i64 10, i64 11, i64 12, i64 12, i64 6, i64 8, i64 8, i64 11, i64 10, i64 7, i64 8, i64 9, i64 10, i64 12, i64 8, i64 9, i64 9, i64 11, i64 11, i64 11, i64 10, i64 11, i64 11, i64 12, i64 10, i64 11, i64 11, i64 13, i64 12, i64 7, i64 8, i64 8, i64 10, i64 11, i64 8, i64 9, i64 8, i64 11, i64 10, i64 8, i64 9, i64 9, i64 11, i64 11, i64 10, i64 12, i64 10, i64 13, i64 11, i64 10, i64 11, i64 11, i64 13, i64 13, i64 10, i64 11, i64 10, i64 14, i64 13, i64 10, i64 10, i64 11, i64 13, i64 13, i64 10, i64 12, i64 11, i64 14, i64 13, i64 12, i64 11, i64 13, i64 12, i64 13, i64 13, i64 12, i64 13, i64 14, i64 14, i64 10, i64 11, i64 11, i64 13, i64 13, i64 10, i64 11, i64 10, i64 12, i64 13, i64 10, i64 12, i64 12, i64 12, i64 14, i64 12, i64 12, i64 12, i64 14, i64 12, i64 12, i64 13, i64 12, i64 17, i64 15, i64 5, i64 7, i64 7, i64 10, i64 10, i64 7, i64 8, i64 8, i64 10, i64 10, i64 7, i64 8, i64 8, i64 11, i64 10, i64 10, i64 10, i64 11, i64 12, i64 12, i64 10, i64 11, i64 11, i64 12, i64 13, i64 6, i64 8, i64 8, i64 11, i64 10, i64 8, i64 9, i64 9, i64 11, i64 11, i64 7, i64 8, i64 9, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 10, i64 10, i64 11, i64 12, i64 13, i64 6, i64 8, i64 8, i64 10, i64 11, i64 8, i64 9, i64 9, i64 11, i64 11, i64 7, i64 9, i64 7, i64 11, i64 10, i64 10, i64 12, i64 12, i64 13, i64 13, i64 11, i64 11, i64 10, i64 13, i64 11, i64 9, i64 11, i64 10, i64 14, i64 13, i64 11, i64 11, i64 11, i64 15, i64 13, i64 10, i64 10, i64 11, i64 13, i64 13, i64 12, i64 13, i64 13, i64 14, i64 14, i64 12, i64 11, i64 12, i64 12, i64 13, i64 10, i64 11, i64 11, i64 12, i64 13, i64 10, i64 11, i64 12, i64 13, i64 13, i64 10, i64 11, i64 10, i64 13, i64 12, i64 12, i64 12, i64 13, i64 14, i64 0, i64 12, i64 13, i64 11, i64 13, i64 11, i64 8, i64 10, i64 10, i64 13, i64 13, i64 10, i64 11, i64 11, i64 14, i64 13, i64 10, i64 11, i64 11, i64 13, i64 12, i64 13, i64 14, i64 14, i64 14, i64 15, i64 12, i64 12, i64 12, i64 15, i64 14, i64 9, i64 11, i64 10, i64 13, i64 12, i64 10, i64 10, i64 11, i64 13, i64 14, i64 11, i64 11, i64 11, i64 15, i64 12, i64 13, i64 12, i64 14, i64 15, i64 16, i64 13, i64 13, i64 13, i64 14, i64 13, i64 9, i64 11, i64 11, i64 12, i64 12, i64 10, i64 12, i64 11, i64 13, i64 13, i64 10, i64 11, i64 11, i64 13, i64 14, i64 13, i64 13, i64 13, i64 15, i64 15, i64 13, i64 13, i64 14, i64 17, i64 15, i64 11, i64 12, i64 12, i64 14, i64 14, i64 10, i64 11, i64 12, i64 13, i64 15, i64 12, i64 13, i64 13, i64 0, i64 15, i64 13, i64 11, i64 14, i64 12, i64 16, i64 14, i64 16, i64 14, i64 0, i64 15, i64 11, i64 12, i64 12, i64 14, i64 16, i64 11, i64 13, i64 12, i64 16, i64 15, i64 12, i64 13, i64 13, i64 14, i64 15, i64 12, i64 14, i64 12, i64 15, i64 13, i64 15, i64 14, i64 14, i64 16, i64 16, i64 8, i64 10, i64 10, i64 13, i64 13, i64 10, i64 11, i64 10, i64 13, i64 14, i64 10, i64 11, i64 11, i64 13, i64 13, i64 13, i64 13, i64 12, i64 14, i64 14, i64 14, i64 13, i64 13, i64 16, i64 17, i64 9, i64 10, i64 10, i64 12, i64 14, i64 10, i64 12, i64 11, i64 14, i64 13, i64 10, i64 11, i64 12, i64 13, i64 14, i64 12, i64 12, i64 12, i64 15, i64 15, i64 13, i64 13, i64 13, i64 14, i64 14, i64 9, i64 10, i64 10, i64 13, i64 13, i64 10, i64 11, i64 12, i64 12, i64 14, i64 10, i64 11, i64 10, i64 13, i64 13, i64 13, i64 13, i64 13, i64 14, i64 16, i64 13, i64 13, i64 13, i64 14, i64 14, i64 11, i64 12, i64 13, i64 15, i64 13, i64 12, i64 14, i64 13, i64 14, i64 16, i64 12, i64 12, i64 13, i64 13, i64 14, i64 13, i64 14, i64 14, i64 17, i64 15, i64 13, i64 12, i64 17, i64 13, i64 16, i64 11, i64 12, i64 13, i64 14, i64 15, i64 12, i64 13, i64 14, i64 14, i64 17, i64 11, i64 12, i64 11, i64 14, i64 14, i64 13, i64 16, i64 14, i64 16, i64 0, i64 14, i64 15, i64 11, i64 15, i64 11], align 16
@_vq_quantlist__16u0__p4_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__16u0__p4_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16u0__p4_0, ptr @_vq_quantmap__16u0__p4_0, i32 5, i32 5 }, align 8
@_vq_quantthresh__16u0__p4_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__16u0__p4_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__16u0__p5_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 7, i64 7, i64 7, i64 7, i64 9, i64 9, i64 4, i64 6, i64 6, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 4, i64 6, i64 6, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 11, i64 10, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 11, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12], align 16
@_vq_quantlist__16u0__p5_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__16u0__p5_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16u0__p5_0, ptr @_vq_quantmap__16u0__p5_0, i32 9, i32 9 }, align 8
@_vq_quantthresh__16u0__p5_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__16u0__p5_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__16u0__p6_0 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 7, i64 7, i64 10, i64 10, i64 12, i64 12, i64 13, i64 13, i64 18, i64 17, i64 3, i64 6, i64 6, i64 9, i64 9, i64 11, i64 11, i64 13, i64 13, i64 14, i64 14, i64 18, i64 17, i64 3, i64 6, i64 6, i64 9, i64 9, i64 11, i64 11, i64 13, i64 13, i64 14, i64 14, i64 17, i64 18, i64 7, i64 9, i64 9, i64 11, i64 11, i64 13, i64 13, i64 14, i64 14, i64 15, i64 15, i64 0, i64 0, i64 7, i64 9, i64 9, i64 11, i64 11, i64 13, i64 13, i64 14, i64 14, i64 15, i64 16, i64 19, i64 18, i64 10, i64 11, i64 11, i64 13, i64 13, i64 14, i64 14, i64 16, i64 15, i64 17, i64 18, i64 0, i64 0, i64 10, i64 11, i64 11, i64 13, i64 13, i64 14, i64 14, i64 15, i64 15, i64 16, i64 18, i64 0, i64 0, i64 11, i64 13, i64 13, i64 14, i64 14, i64 15, i64 15, i64 17, i64 17, i64 0, i64 19, i64 0, i64 0, i64 11, i64 13, i64 13, i64 14, i64 14, i64 14, i64 15, i64 16, i64 18, i64 0, i64 19, i64 0, i64 0, i64 13, i64 14, i64 14, i64 15, i64 15, i64 18, i64 17, i64 18, i64 18, i64 0, i64 19, i64 0, i64 0, i64 13, i64 14, i64 14, i64 15, i64 16, i64 16, i64 16, i64 18, i64 18, i64 19, i64 0, i64 0, i64 0, i64 16, i64 17, i64 17, i64 0, i64 17, i64 19, i64 19, i64 0, i64 19, i64 0, i64 0, i64 0, i64 0, i64 16, i64 19, i64 16, i64 17, i64 18, i64 0, i64 19, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0], align 16
@_vq_quantlist__16u0__p6_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__16u0__p6_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16u0__p6_0, ptr @_vq_quantmap__16u0__p6_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__16u0__p6_0 = internal global [12 x float] [float -2.750000e+01, float -2.250000e+01, float -1.750000e+01, float -1.250000e+01, float -7.500000e+00, float -2.500000e+00, float 2.500000e+00, float 7.500000e+00, float 1.250000e+01, float 1.750000e+01, float 2.250000e+01, float 2.750000e+01], align 16
@_vq_quantmap__16u0__p6_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__16u0__p6_1 = internal global [25 x i64] [i64 1, i64 4, i64 5, i64 6, i64 6, i64 4, i64 6, i64 6, i64 6, i64 6, i64 4, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 6, i64 7, i64 7, i64 6, i64 6, i64 6, i64 7, i64 7], align 16
@_vq_quantlist__16u0__p6_1 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__16u0__p6_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16u0__p6_1, ptr @_vq_quantmap__16u0__p6_1, i32 5, i32 5 }, align 8
@_vq_quantthresh__16u0__p6_1 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__16u0__p6_1 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__16u0__p7_0 = internal global [81 x i64] [i64 1, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7], align 16
@_vq_quantlist__16u0__p7_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__16u0__p7_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16u0__p7_0, ptr @_vq_quantmap__16u0__p7_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__16u0__p7_0 = internal global [2 x float] [float -1.575000e+02, float 1.575000e+02], align 4
@_vq_quantmap__16u0__p7_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__16u0__p7_1 = internal global [225 x i64] [i64 1, i64 5, i64 5, i64 6, i64 5, i64 9, i64 10, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 5, i64 8, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 5, i64 8, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 5, i64 10, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 4, i64 8, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10], align 16
@_vq_quantlist__16u0__p7_1 = internal global [15 x i64] [i64 7, i64 6, i64 8, i64 5, i64 9, i64 4, i64 10, i64 3, i64 11, i64 2, i64 12, i64 1, i64 13, i64 0, i64 14], align 16
@_vq_auxt__16u0__p7_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16u0__p7_1, ptr @_vq_quantmap__16u0__p7_1, i32 15, i32 15 }, align 8
@_vq_quantthresh__16u0__p7_1 = internal global [14 x float] [float -1.365000e+02, float -1.155000e+02, float -9.450000e+01, float -7.350000e+01, float -5.250000e+01, float -3.150000e+01, float -1.050000e+01, float 1.050000e+01, float 3.150000e+01, float 5.250000e+01, float 7.350000e+01, float 9.450000e+01, float 1.155000e+02, float 1.365000e+02], align 16
@_vq_quantmap__16u0__p7_1 = internal global [15 x i64] [i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14], align 16
@_vq_lengthlist__16u0__p7_2 = internal global [441 x i64] [i64 1, i64 6, i64 6, i64 7, i64 8, i64 7, i64 7, i64 10, i64 9, i64 10, i64 9, i64 11, i64 10, i64 9, i64 11, i64 10, i64 9, i64 9, i64 9, i64 9, i64 10, i64 6, i64 8, i64 7, i64 9, i64 9, i64 8, i64 8, i64 10, i64 10, i64 9, i64 11, i64 11, i64 12, i64 12, i64 10, i64 9, i64 11, i64 9, i64 12, i64 10, i64 9, i64 6, i64 9, i64 8, i64 9, i64 12, i64 8, i64 8, i64 11, i64 9, i64 11, i64 11, i64 12, i64 11, i64 12, i64 12, i64 10, i64 11, i64 11, i64 10, i64 10, i64 11, i64 7, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 9, i64 10, i64 10, i64 12, i64 10, i64 10, i64 10, i64 11, i64 12, i64 10, i64 10, i64 7, i64 9, i64 9, i64 9, i64 10, i64 9, i64 9, i64 10, i64 10, i64 9, i64 9, i64 9, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 12, i64 7, i64 9, i64 10, i64 9, i64 11, i64 9, i64 10, i64 9, i64 10, i64 11, i64 11, i64 11, i64 10, i64 11, i64 12, i64 9, i64 12, i64 11, i64 10, i64 10, i64 10, i64 7, i64 9, i64 9, i64 9, i64 9, i64 10, i64 12, i64 10, i64 9, i64 11, i64 12, i64 10, i64 11, i64 12, i64 12, i64 11, i64 9, i64 10, i64 11, i64 10, i64 11, i64 7, i64 9, i64 10, i64 10, i64 11, i64 10, i64 9, i64 10, i64 11, i64 11, i64 11, i64 10, i64 12, i64 12, i64 12, i64 11, i64 11, i64 10, i64 11, i64 11, i64 12, i64 8, i64 9, i64 10, i64 12, i64 11, i64 10, i64 10, i64 12, i64 12, i64 12, i64 12, i64 12, i64 10, i64 11, i64 11, i64 9, i64 11, i64 10, i64 12, i64 11, i64 11, i64 8, i64 9, i64 10, i64 10, i64 11, i64 12, i64 11, i64 11, i64 10, i64 10, i64 10, i64 12, i64 12, i64 12, i64 9, i64 10, i64 12, i64 12, i64 12, i64 12, i64 12, i64 8, i64 10, i64 11, i64 10, i64 10, i64 12, i64 9, i64 11, i64 12, i64 12, i64 11, i64 12, i64 12, i64 12, i64 12, i64 10, i64 12, i64 10, i64 10, i64 10, i64 10, i64 8, i64 12, i64 11, i64 11, i64 11, i64 10, i64 10, i64 11, i64 12, i64 12, i64 12, i64 12, i64 11, i64 12, i64 12, i64 12, i64 11, i64 11, i64 11, i64 12, i64 10, i64 9, i64 10, i64 10, i64 12, i64 10, i64 12, i64 10, i64 12, i64 12, i64 10, i64 10, i64 10, i64 11, i64 12, i64 12, i64 12, i64 11, i64 12, i64 12, i64 12, i64 11, i64 10, i64 11, i64 12, i64 12, i64 12, i64 11, i64 12, i64 12, i64 11, i64 12, i64 12, i64 11, i64 12, i64 12, i64 12, i64 12, i64 11, i64 12, i64 12, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 11, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 11, i64 12, i64 11, i64 10, i64 11, i64 11, i64 12, i64 11, i64 11, i64 9, i64 10, i64 10, i64 10, i64 12, i64 10, i64 10, i64 11, i64 9, i64 11, i64 12, i64 11, i64 12, i64 11, i64 12, i64 12, i64 10, i64 11, i64 10, i64 12, i64 9, i64 9, i64 9, i64 12, i64 11, i64 10, i64 11, i64 10, i64 12, i64 10, i64 12, i64 10, i64 12, i64 12, i64 12, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 9, i64 10, i64 10, i64 11, i64 10, i64 11, i64 11, i64 12, i64 11, i64 10, i64 11, i64 12, i64 12, i64 12, i64 11, i64 11, i64 9, i64 12, i64 10, i64 12, i64 9, i64 10, i64 12, i64 10, i64 10, i64 11, i64 10, i64 11, i64 11, i64 12, i64 11, i64 10, i64 11, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 11, i64 11, i64 10, i64 9, i64 10, i64 10, i64 10, i64 9, i64 11, i64 11, i64 10, i64 9, i64 12, i64 10, i64 11, i64 12, i64 11, i64 12, i64 12, i64 11, i64 12, i64 11, i64 12, i64 11, i64 10, i64 11, i64 10, i64 12, i64 11, i64 12, i64 11, i64 12, i64 11, i64 12, i64 10, i64 11, i64 10, i64 10, i64 12, i64 11, i64 10, i64 11, i64 11, i64 11, i64 10], align 16
@_vq_quantlist__16u0__p7_2 = internal global [21 x i64] [i64 10, i64 9, i64 11, i64 8, i64 12, i64 7, i64 13, i64 6, i64 14, i64 5, i64 15, i64 4, i64 16, i64 3, i64 17, i64 2, i64 18, i64 1, i64 19, i64 0, i64 20], align 16
@_vq_auxt__16u0__p7_2 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16u0__p7_2, ptr @_vq_quantmap__16u0__p7_2, i32 21, i32 21 }, align 8
@_vq_quantthresh__16u0__p7_2 = internal global [20 x float] [float -9.500000e+00, float -8.500000e+00, float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00, float 8.500000e+00, float 9.500000e+00], align 16
@_vq_quantmap__16u0__p7_2 = internal global [21 x i64] [i64 19, i64 17, i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16, i64 18, i64 20], align 16
@_huff_book__16u1__short = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__16u1__short, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_resbook_16u_1 = internal global %struct.static_bookblock { [12 x [3 x ptr]] [[3 x ptr] zeroinitializer, [3 x ptr] [ptr null, ptr null, ptr @_16u1__p1_0], [3 x ptr] [ptr null, ptr null, ptr @_16u1__p2_0], [3 x ptr] [ptr null, ptr null, ptr @_16u1__p3_0], [3 x ptr] [ptr null, ptr null, ptr @_16u1__p4_0], [3 x ptr] [ptr null, ptr null, ptr @_16u1__p5_0], [3 x ptr] [ptr null, ptr null, ptr @_16u1__p6_0], [3 x ptr] [ptr @_16u1__p7_0, ptr @_16u1__p7_1, ptr null], [3 x ptr] [ptr @_16u1__p8_0, ptr @_16u1__p8_1, ptr null], [3 x ptr] [ptr @_16u1__p9_0, ptr @_16u1__p9_1, ptr @_16u1__p9_2], [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer] }, align 8
@_huff_book__16u1__long = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__16u1__long, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_lengthlist__16u1__short = internal global [100 x i64] [i64 5, i64 7, i64 10, i64 9, i64 11, i64 10, i64 15, i64 11, i64 13, i64 16, i64 6, i64 4, i64 6, i64 6, i64 7, i64 7, i64 10, i64 9, i64 12, i64 16, i64 10, i64 6, i64 5, i64 6, i64 6, i64 7, i64 10, i64 11, i64 16, i64 16, i64 9, i64 6, i64 7, i64 6, i64 7, i64 7, i64 10, i64 8, i64 14, i64 16, i64 11, i64 6, i64 5, i64 4, i64 5, i64 6, i64 8, i64 9, i64 15, i64 16, i64 9, i64 6, i64 6, i64 5, i64 6, i64 6, i64 9, i64 8, i64 14, i64 16, i64 12, i64 7, i64 6, i64 6, i64 5, i64 6, i64 6, i64 7, i64 13, i64 16, i64 8, i64 6, i64 7, i64 6, i64 5, i64 5, i64 4, i64 4, i64 11, i64 16, i64 9, i64 8, i64 9, i64 9, i64 7, i64 7, i64 6, i64 5, i64 13, i64 16, i64 14, i64 14, i64 16, i64 15, i64 16, i64 15, i64 16, i64 16, i64 16, i64 16], align 16
@_16u1__p1_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__16u1__p1_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__16u1__p1_0, ptr null, ptr @_vq_auxt__16u1__p1_0, ptr null, i32 0 }, align 8
@_16u1__p2_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__16u1__p2_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__16u1__p2_0, ptr null, ptr @_vq_auxt__16u1__p2_0, ptr null, i32 0 }, align 8
@_16u1__p3_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__16u1__p3_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__16u1__p3_0, ptr null, ptr @_vq_auxt__16u1__p3_0, ptr null, i32 0 }, align 8
@_16u1__p4_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__16u1__p4_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__16u1__p4_0, ptr null, ptr @_vq_auxt__16u1__p4_0, ptr null, i32 0 }, align 8
@_16u1__p5_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__16u1__p5_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__16u1__p5_0, ptr null, ptr @_vq_auxt__16u1__p5_0, ptr null, i32 0 }, align 8
@_16u1__p6_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__16u1__p6_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__16u1__p6_0, ptr null, ptr @_vq_auxt__16u1__p6_0, ptr null, i32 0 }, align 8
@_16u1__p7_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__16u1__p7_0, i32 1, i64 -529137664, i64 1618345984, i32 2, i32 0, ptr @_vq_quantlist__16u1__p7_0, ptr null, ptr @_vq_auxt__16u1__p7_0, ptr null, i32 0 }, align 8
@_16u1__p7_1 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__16u1__p7_1, i32 1, i64 -531365888, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__16u1__p7_1, ptr null, ptr @_vq_auxt__16u1__p7_1, ptr null, i32 0 }, align 8
@_16u1__p8_0 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__16u1__p8_0, i32 1, i64 -524582912, i64 1618345984, i32 4, i32 0, ptr @_vq_quantlist__16u1__p8_0, ptr null, ptr @_vq_auxt__16u1__p8_0, ptr null, i32 0 }, align 8
@_16u1__p8_1 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__16u1__p8_1, i32 1, i64 -531365888, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__16u1__p8_1, ptr null, ptr @_vq_auxt__16u1__p8_1, ptr null, i32 0 }, align 8
@_16u1__p9_0 = internal global %struct.static_codebook { i64 2, i64 225, ptr @_vq_lengthlist__16u1__p9_0, i32 1, i64 -514071552, i64 1627381760, i32 4, i32 0, ptr @_vq_quantlist__16u1__p9_0, ptr null, ptr @_vq_auxt__16u1__p9_0, ptr null, i32 0 }, align 8
@_16u1__p9_1 = internal global %struct.static_codebook { i64 2, i64 225, ptr @_vq_lengthlist__16u1__p9_1, i32 1, i64 -522338304, i64 1620115456, i32 4, i32 0, ptr @_vq_quantlist__16u1__p9_1, ptr null, ptr @_vq_auxt__16u1__p9_1, ptr null, i32 0 }, align 8
@_16u1__p9_2 = internal global %struct.static_codebook { i64 2, i64 289, ptr @_vq_lengthlist__16u1__p9_2, i32 1, i64 -529530880, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__16u1__p9_2, ptr null, ptr @_vq_auxt__16u1__p9_2, ptr null, i32 0 }, align 8
@_vq_lengthlist__16u1__p1_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 5, i64 7, i64 7, i64 5, i64 7, i64 7, i64 5, i64 8, i64 7, i64 7, i64 10, i64 10, i64 7, i64 9, i64 10, i64 5, i64 7, i64 8, i64 7, i64 10, i64 9, i64 7, i64 10, i64 10, i64 5, i64 8, i64 8, i64 8, i64 10, i64 10, i64 8, i64 10, i64 10, i64 7, i64 10, i64 10, i64 10, i64 11, i64 12, i64 10, i64 12, i64 13, i64 7, i64 10, i64 10, i64 9, i64 13, i64 11, i64 10, i64 12, i64 13, i64 5, i64 8, i64 8, i64 8, i64 10, i64 10, i64 8, i64 10, i64 10, i64 7, i64 10, i64 10, i64 10, i64 12, i64 12, i64 9, i64 11, i64 12, i64 7, i64 10, i64 11, i64 10, i64 12, i64 12, i64 10, i64 13, i64 11], align 16
@_vq_quantlist__16u1__p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__16u1__p1_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16u1__p1_0, ptr @_vq_quantmap__16u1__p1_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__16u1__p1_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__16u1__p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__16u1__p2_0 = internal global [81 x i64] [i64 3, i64 4, i64 4, i64 5, i64 6, i64 6, i64 5, i64 6, i64 6, i64 5, i64 6, i64 6, i64 6, i64 7, i64 8, i64 6, i64 7, i64 8, i64 5, i64 6, i64 6, i64 6, i64 8, i64 7, i64 6, i64 8, i64 7, i64 5, i64 6, i64 6, i64 6, i64 8, i64 8, i64 6, i64 8, i64 8, i64 6, i64 8, i64 8, i64 7, i64 7, i64 10, i64 8, i64 9, i64 9, i64 6, i64 8, i64 8, i64 7, i64 9, i64 8, i64 8, i64 9, i64 10, i64 5, i64 6, i64 6, i64 6, i64 8, i64 8, i64 7, i64 8, i64 8, i64 6, i64 8, i64 8, i64 8, i64 10, i64 9, i64 7, i64 8, i64 9, i64 6, i64 8, i64 8, i64 8, i64 9, i64 9, i64 7, i64 10, i64 8], align 16
@_vq_quantlist__16u1__p2_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__16u1__p2_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16u1__p2_0, ptr @_vq_quantmap__16u1__p2_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__16u1__p2_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__16u1__p2_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__16u1__p3_0 = internal global [625 x i64] [i64 1, i64 5, i64 5, i64 8, i64 8, i64 6, i64 7, i64 7, i64 9, i64 9, i64 5, i64 7, i64 7, i64 9, i64 9, i64 9, i64 10, i64 9, i64 11, i64 11, i64 9, i64 9, i64 10, i64 11, i64 11, i64 6, i64 8, i64 8, i64 10, i64 10, i64 8, i64 9, i64 10, i64 11, i64 11, i64 8, i64 9, i64 10, i64 11, i64 11, i64 10, i64 11, i64 11, i64 12, i64 13, i64 10, i64 11, i64 11, i64 13, i64 13, i64 6, i64 8, i64 8, i64 10, i64 10, i64 8, i64 10, i64 9, i64 11, i64 11, i64 8, i64 10, i64 9, i64 11, i64 11, i64 10, i64 11, i64 11, i64 13, i64 13, i64 10, i64 11, i64 11, i64 13, i64 12, i64 9, i64 11, i64 11, i64 14, i64 13, i64 10, i64 12, i64 12, i64 15, i64 14, i64 10, i64 12, i64 11, i64 14, i64 13, i64 12, i64 13, i64 13, i64 15, i64 15, i64 12, i64 13, i64 13, i64 16, i64 14, i64 9, i64 11, i64 11, i64 13, i64 14, i64 10, i64 11, i64 12, i64 14, i64 14, i64 10, i64 12, i64 12, i64 14, i64 15, i64 12, i64 13, i64 13, i64 14, i64 15, i64 12, i64 13, i64 14, i64 15, i64 16, i64 5, i64 8, i64 8, i64 11, i64 11, i64 8, i64 10, i64 10, i64 12, i64 12, i64 8, i64 10, i64 10, i64 12, i64 12, i64 11, i64 12, i64 12, i64 14, i64 14, i64 11, i64 12, i64 12, i64 14, i64 14, i64 8, i64 10, i64 10, i64 12, i64 12, i64 9, i64 11, i64 12, i64 12, i64 13, i64 10, i64 12, i64 12, i64 13, i64 13, i64 12, i64 12, i64 13, i64 14, i64 15, i64 11, i64 13, i64 13, i64 15, i64 15, i64 7, i64 10, i64 10, i64 12, i64 12, i64 9, i64 12, i64 11, i64 13, i64 12, i64 10, i64 11, i64 12, i64 13, i64 13, i64 12, i64 13, i64 12, i64 15, i64 14, i64 11, i64 12, i64 13, i64 15, i64 15, i64 10, i64 12, i64 12, i64 15, i64 14, i64 11, i64 13, i64 13, i64 16, i64 15, i64 11, i64 13, i64 13, i64 16, i64 15, i64 14, i64 13, i64 14, i64 15, i64 16, i64 13, i64 15, i64 15, i64 17, i64 17, i64 10, i64 12, i64 12, i64 14, i64 15, i64 11, i64 12, i64 12, i64 15, i64 15, i64 11, i64 13, i64 13, i64 15, i64 16, i64 13, i64 15, i64 13, i64 16, i64 15, i64 13, i64 15, i64 15, i64 16, i64 17, i64 5, i64 8, i64 8, i64 11, i64 11, i64 8, i64 10, i64 10, i64 12, i64 12, i64 8, i64 10, i64 10, i64 12, i64 12, i64 11, i64 12, i64 12, i64 14, i64 14, i64 11, i64 12, i64 12, i64 14, i64 14, i64 7, i64 10, i64 10, i64 12, i64 12, i64 10, i64 12, i64 12, i64 14, i64 13, i64 9, i64 11, i64 12, i64 12, i64 13, i64 12, i64 13, i64 13, i64 15, i64 15, i64 12, i64 12, i64 13, i64 13, i64 15, i64 7, i64 10, i64 10, i64 12, i64 13, i64 10, i64 11, i64 12, i64 13, i64 13, i64 10, i64 12, i64 11, i64 13, i64 13, i64 11, i64 13, i64 13, i64 15, i64 15, i64 12, i64 13, i64 12, i64 15, i64 14, i64 9, i64 12, i64 12, i64 15, i64 14, i64 11, i64 13, i64 13, i64 15, i64 15, i64 11, i64 12, i64 13, i64 15, i64 15, i64 13, i64 14, i64 14, i64 17, i64 19, i64 13, i64 13, i64 14, i64 16, i64 16, i64 10, i64 12, i64 12, i64 14, i64 15, i64 11, i64 13, i64 13, i64 15, i64 16, i64 11, i64 13, i64 12, i64 16, i64 15, i64 13, i64 15, i64 15, i64 17, i64 18, i64 14, i64 15, i64 13, i64 16, i64 15, i64 8, i64 11, i64 11, i64 15, i64 14, i64 10, i64 12, i64 12, i64 16, i64 15, i64 10, i64 12, i64 12, i64 16, i64 16, i64 14, i64 15, i64 15, i64 18, i64 17, i64 13, i64 14, i64 15, i64 16, i64 18, i64 9, i64 12, i64 12, i64 15, i64 15, i64 11, i64 12, i64 14, i64 16, i64 17, i64 11, i64 13, i64 13, i64 16, i64 15, i64 15, i64 15, i64 15, i64 17, i64 18, i64 14, i64 15, i64 16, i64 17, i64 17, i64 9, i64 12, i64 12, i64 15, i64 15, i64 11, i64 14, i64 13, i64 16, i64 16, i64 11, i64 13, i64 13, i64 16, i64 16, i64 15, i64 16, i64 15, i64 17, i64 18, i64 14, i64 16, i64 15, i64 17, i64 16, i64 12, i64 14, i64 14, i64 17, i64 16, i64 12, i64 14, i64 15, i64 18, i64 17, i64 13, i64 15, i64 15, i64 17, i64 17, i64 15, i64 15, i64 18, i64 16, i64 20, i64 15, i64 16, i64 17, i64 18, i64 18, i64 11, i64 14, i64 14, i64 16, i64 17, i64 13, i64 15, i64 14, i64 18, i64 17, i64 13, i64 15, i64 15, i64 17, i64 17, i64 15, i64 17, i64 15, i64 18, i64 17, i64 15, i64 17, i64 16, i64 19, i64 18, i64 8, i64 11, i64 11, i64 14, i64 15, i64 10, i64 12, i64 12, i64 15, i64 15, i64 10, i64 12, i64 12, i64 16, i64 16, i64 13, i64 14, i64 14, i64 17, i64 16, i64 14, i64 15, i64 15, i64 17, i64 17, i64 9, i64 12, i64 12, i64 15, i64 16, i64 11, i64 13, i64 13, i64 16, i64 16, i64 11, i64 12, i64 13, i64 16, i64 16, i64 14, i64 16, i64 15, i64 20, i64 17, i64 14, i64 16, i64 16, i64 17, i64 17, i64 9, i64 12, i64 12, i64 15, i64 16, i64 11, i64 13, i64 13, i64 16, i64 17, i64 11, i64 13, i64 13, i64 17, i64 16, i64 14, i64 15, i64 15, i64 17, i64 18, i64 15, i64 15, i64 15, i64 18, i64 18, i64 11, i64 14, i64 14, i64 17, i64 16, i64 13, i64 15, i64 15, i64 17, i64 17, i64 13, i64 14, i64 14, i64 18, i64 17, i64 15, i64 16, i64 16, i64 18, i64 19, i64 15, i64 15, i64 17, i64 17, i64 19, i64 11, i64 14, i64 14, i64 16, i64 17, i64 13, i64 15, i64 14, i64 17, i64 19, i64 13, i64 15, i64 14, i64 18, i64 17, i64 15, i64 17, i64 16, i64 18, i64 18, i64 15, i64 17, i64 15, i64 18, i64 16], align 16
@_vq_quantlist__16u1__p3_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__16u1__p3_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16u1__p3_0, ptr @_vq_quantmap__16u1__p3_0, i32 5, i32 5 }, align 8
@_vq_quantthresh__16u1__p3_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__16u1__p3_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__16u1__p4_0 = internal global [625 x i64] [i64 4, i64 5, i64 5, i64 8, i64 8, i64 6, i64 6, i64 7, i64 9, i64 9, i64 6, i64 6, i64 6, i64 9, i64 9, i64 9, i64 10, i64 9, i64 11, i64 11, i64 9, i64 9, i64 10, i64 11, i64 11, i64 6, i64 7, i64 7, i64 10, i64 9, i64 7, i64 7, i64 8, i64 9, i64 10, i64 7, i64 7, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 12, i64 9, i64 9, i64 10, i64 11, i64 12, i64 6, i64 7, i64 7, i64 9, i64 9, i64 7, i64 8, i64 7, i64 10, i64 10, i64 7, i64 8, i64 7, i64 10, i64 10, i64 9, i64 10, i64 9, i64 12, i64 11, i64 10, i64 10, i64 9, i64 12, i64 10, i64 9, i64 10, i64 10, i64 12, i64 11, i64 10, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 12, i64 11, i64 12, i64 13, i64 13, i64 11, i64 11, i64 12, i64 12, i64 13, i64 9, i64 10, i64 10, i64 11, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 10, i64 12, i64 12, i64 11, i64 12, i64 11, i64 14, i64 13, i64 11, i64 12, i64 12, i64 14, i64 13, i64 5, i64 7, i64 7, i64 10, i64 10, i64 7, i64 8, i64 8, i64 10, i64 10, i64 7, i64 8, i64 7, i64 10, i64 10, i64 10, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 10, i64 12, i64 12, i64 6, i64 8, i64 7, i64 10, i64 10, i64 7, i64 7, i64 9, i64 10, i64 11, i64 8, i64 9, i64 9, i64 11, i64 10, i64 10, i64 10, i64 11, i64 11, i64 13, i64 10, i64 10, i64 11, i64 12, i64 13, i64 6, i64 8, i64 8, i64 10, i64 10, i64 7, i64 9, i64 8, i64 11, i64 10, i64 8, i64 9, i64 9, i64 10, i64 11, i64 10, i64 11, i64 10, i64 13, i64 11, i64 10, i64 11, i64 10, i64 12, i64 12, i64 10, i64 11, i64 10, i64 12, i64 11, i64 10, i64 10, i64 10, i64 12, i64 13, i64 10, i64 11, i64 11, i64 13, i64 12, i64 11, i64 11, i64 13, i64 11, i64 14, i64 12, i64 12, i64 13, i64 14, i64 14, i64 9, i64 10, i64 10, i64 12, i64 13, i64 10, i64 11, i64 10, i64 13, i64 12, i64 10, i64 11, i64 11, i64 12, i64 13, i64 11, i64 12, i64 11, i64 14, i64 12, i64 12, i64 13, i64 13, i64 15, i64 14, i64 5, i64 7, i64 7, i64 10, i64 10, i64 7, i64 7, i64 8, i64 10, i64 10, i64 7, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 12, i64 10, i64 10, i64 10, i64 12, i64 12, i64 7, i64 8, i64 8, i64 10, i64 10, i64 8, i64 9, i64 8, i64 11, i64 10, i64 7, i64 8, i64 9, i64 10, i64 11, i64 10, i64 11, i64 11, i64 12, i64 12, i64 10, i64 10, i64 11, i64 11, i64 13, i64 7, i64 7, i64 8, i64 10, i64 10, i64 8, i64 8, i64 9, i64 10, i64 11, i64 7, i64 9, i64 7, i64 11, i64 10, i64 10, i64 11, i64 11, i64 13, i64 12, i64 11, i64 11, i64 10, i64 13, i64 11, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 11, i64 11, i64 13, i64 12, i64 10, i64 10, i64 11, i64 12, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 11, i64 11, i64 12, i64 12, i64 14, i64 10, i64 10, i64 11, i64 12, i64 12, i64 10, i64 11, i64 11, i64 12, i64 13, i64 10, i64 10, i64 10, i64 13, i64 12, i64 12, i64 13, i64 13, i64 15, i64 14, i64 12, i64 13, i64 10, i64 14, i64 11, i64 8, i64 10, i64 10, i64 12, i64 12, i64 10, i64 11, i64 10, i64 13, i64 13, i64 9, i64 10, i64 10, i64 12, i64 12, i64 12, i64 13, i64 13, i64 15, i64 14, i64 11, i64 12, i64 12, i64 13, i64 13, i64 9, i64 10, i64 10, i64 13, i64 12, i64 10, i64 10, i64 11, i64 13, i64 13, i64 10, i64 11, i64 10, i64 13, i64 12, i64 12, i64 12, i64 13, i64 14, i64 15, i64 12, i64 13, i64 12, i64 15, i64 13, i64 9, i64 10, i64 10, i64 12, i64 13, i64 10, i64 11, i64 10, i64 13, i64 12, i64 10, i64 10, i64 11, i64 12, i64 13, i64 12, i64 14, i64 12, i64 15, i64 13, i64 12, i64 12, i64 13, i64 14, i64 15, i64 11, i64 12, i64 11, i64 14, i64 13, i64 11, i64 11, i64 12, i64 14, i64 15, i64 12, i64 13, i64 12, i64 15, i64 14, i64 13, i64 11, i64 15, i64 11, i64 16, i64 13, i64 14, i64 14, i64 16, i64 15, i64 11, i64 12, i64 12, i64 14, i64 14, i64 11, i64 12, i64 11, i64 14, i64 13, i64 12, i64 12, i64 13, i64 14, i64 15, i64 13, i64 14, i64 12, i64 16, i64 12, i64 14, i64 14, i64 14, i64 15, i64 15, i64 8, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 11, i64 13, i64 13, i64 11, i64 12, i64 12, i64 13, i64 13, i64 12, i64 13, i64 13, i64 14, i64 15, i64 9, i64 10, i64 10, i64 13, i64 12, i64 10, i64 11, i64 11, i64 13, i64 12, i64 10, i64 10, i64 11, i64 13, i64 13, i64 12, i64 13, i64 12, i64 15, i64 14, i64 12, i64 12, i64 13, i64 13, i64 16, i64 9, i64 9, i64 10, i64 12, i64 13, i64 10, i64 10, i64 11, i64 12, i64 13, i64 10, i64 11, i64 10, i64 13, i64 13, i64 12, i64 12, i64 13, i64 13, i64 15, i64 13, i64 13, i64 12, i64 15, i64 13, i64 11, i64 12, i64 12, i64 14, i64 14, i64 12, i64 13, i64 12, i64 15, i64 14, i64 11, i64 11, i64 12, i64 13, i64 14, i64 14, i64 14, i64 14, i64 16, i64 15, i64 13, i64 12, i64 15, i64 12, i64 16, i64 11, i64 11, i64 12, i64 13, i64 14, i64 12, i64 13, i64 13, i64 14, i64 15, i64 10, i64 12, i64 11, i64 14, i64 13, i64 14, i64 15, i64 14, i64 16, i64 16, i64 13, i64 14, i64 11, i64 15, i64 11], align 16
@_vq_quantlist__16u1__p4_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__16u1__p4_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16u1__p4_0, ptr @_vq_quantmap__16u1__p4_0, i32 5, i32 5 }, align 8
@_vq_quantthresh__16u1__p4_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__16u1__p4_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__16u1__p5_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 7, i64 7, i64 7, i64 7, i64 9, i64 9, i64 4, i64 6, i64 6, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 4, i64 5, i64 6, i64 8, i64 8, i64 8, i64 8, i64 10, i64 10, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 11, i64 11, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 11, i64 11, i64 7, i64 8, i64 8, i64 10, i64 9, i64 11, i64 11, i64 12, i64 11, i64 7, i64 8, i64 8, i64 9, i64 9, i64 11, i64 11, i64 12, i64 12, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 12, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13], align 16
@_vq_quantlist__16u1__p5_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__16u1__p5_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16u1__p5_0, ptr @_vq_quantmap__16u1__p5_0, i32 9, i32 9 }, align 8
@_vq_quantthresh__16u1__p5_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__16u1__p5_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__16u1__p6_0 = internal global [81 x i64] [i64 3, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 4, i64 4, i64 4, i64 6, i64 6, i64 8, i64 8, i64 9, i64 9, i64 4, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 6, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 10, i64 9, i64 6, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 10, i64 7, i64 8, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11], align 16
@_vq_quantlist__16u1__p6_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__16u1__p6_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16u1__p6_0, ptr @_vq_quantmap__16u1__p6_0, i32 9, i32 9 }, align 8
@_vq_quantthresh__16u1__p6_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__16u1__p6_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__16u1__p7_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 4, i64 8, i64 8, i64 4, i64 8, i64 8, i64 5, i64 11, i64 9, i64 8, i64 12, i64 11, i64 8, i64 12, i64 11, i64 5, i64 10, i64 11, i64 8, i64 11, i64 12, i64 8, i64 11, i64 12, i64 4, i64 11, i64 11, i64 11, i64 14, i64 13, i64 10, i64 13, i64 13, i64 8, i64 14, i64 13, i64 12, i64 14, i64 16, i64 12, i64 16, i64 15, i64 8, i64 14, i64 14, i64 13, i64 16, i64 14, i64 12, i64 15, i64 16, i64 4, i64 11, i64 11, i64 10, i64 14, i64 13, i64 11, i64 14, i64 14, i64 8, i64 15, i64 14, i64 12, i64 15, i64 15, i64 12, i64 14, i64 16, i64 8, i64 14, i64 14, i64 11, i64 16, i64 15, i64 12, i64 15, i64 13], align 16
@_vq_quantlist__16u1__p7_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__16u1__p7_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16u1__p7_0, ptr @_vq_quantmap__16u1__p7_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__16u1__p7_0 = internal global [2 x float] [float -5.500000e+00, float 5.500000e+00], align 4
@_vq_quantmap__16u1__p7_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__16u1__p7_1 = internal global [121 x i64] [i64 2, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 4, i64 6, i64 5, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 4, i64 5, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10], align 16
@_vq_quantlist__16u1__p7_1 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__16u1__p7_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16u1__p7_1, ptr @_vq_quantmap__16u1__p7_1, i32 11, i32 11 }, align 8
@_vq_quantthresh__16u1__p7_1 = internal global [10 x float] [float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00], align 16
@_vq_quantmap__16u1__p7_1 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_lengthlist__16u1__p8_0 = internal global [121 x i64] [i64 1, i64 4, i64 4, i64 5, i64 5, i64 8, i64 8, i64 10, i64 10, i64 12, i64 12, i64 4, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 12, i64 11, i64 14, i64 13, i64 4, i64 7, i64 7, i64 7, i64 8, i64 9, i64 10, i64 11, i64 11, i64 13, i64 12, i64 5, i64 8, i64 8, i64 9, i64 9, i64 11, i64 11, i64 12, i64 13, i64 15, i64 14, i64 5, i64 7, i64 8, i64 9, i64 9, i64 11, i64 11, i64 13, i64 13, i64 17, i64 15, i64 8, i64 9, i64 10, i64 11, i64 11, i64 12, i64 13, i64 17, i64 14, i64 17, i64 16, i64 8, i64 10, i64 9, i64 11, i64 11, i64 12, i64 12, i64 13, i64 15, i64 15, i64 17, i64 10, i64 11, i64 11, i64 12, i64 13, i64 14, i64 15, i64 15, i64 16, i64 16, i64 17, i64 9, i64 11, i64 11, i64 12, i64 12, i64 14, i64 15, i64 17, i64 15, i64 15, i64 16, i64 11, i64 14, i64 12, i64 14, i64 15, i64 16, i64 15, i64 16, i64 16, i64 16, i64 15, i64 11, i64 13, i64 13, i64 14, i64 14, i64 15, i64 15, i64 16, i64 16, i64 15, i64 16], align 16
@_vq_quantlist__16u1__p8_0 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__16u1__p8_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16u1__p8_0, ptr @_vq_quantmap__16u1__p8_0, i32 11, i32 11 }, align 8
@_vq_quantthresh__16u1__p8_0 = internal global [10 x float] [float -4.950000e+01, float -3.850000e+01, float -2.750000e+01, float -1.650000e+01, float -5.500000e+00, float 5.500000e+00, float 1.650000e+01, float 2.750000e+01, float 3.850000e+01, float 4.950000e+01], align 16
@_vq_quantmap__16u1__p8_0 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_lengthlist__16u1__p8_1 = internal global [121 x i64] [i64 2, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 4, i64 6, i64 6, i64 7, i64 7, i64 8, i64 7, i64 8, i64 8, i64 8, i64 8, i64 4, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 9, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9], align 16
@_vq_quantlist__16u1__p8_1 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__16u1__p8_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16u1__p8_1, ptr @_vq_quantmap__16u1__p8_1, i32 11, i32 11 }, align 8
@_vq_quantthresh__16u1__p8_1 = internal global [10 x float] [float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00], align 16
@_vq_quantmap__16u1__p8_1 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_lengthlist__16u1__p9_0 = internal global [225 x i64] [i64 1, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8], align 16
@_vq_quantlist__16u1__p9_0 = internal global [15 x i64] [i64 7, i64 6, i64 8, i64 5, i64 9, i64 4, i64 10, i64 3, i64 11, i64 2, i64 12, i64 1, i64 13, i64 0, i64 14], align 16
@_vq_auxt__16u1__p9_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16u1__p9_0, ptr @_vq_quantmap__16u1__p9_0, i32 15, i32 15 }, align 8
@_vq_quantthresh__16u1__p9_0 = internal global [14 x float] [float -1.657500e+03, float -1.402500e+03, float -1.147500e+03, float -8.925000e+02, float -6.375000e+02, float -3.825000e+02, float -1.275000e+02, float 1.275000e+02, float 3.825000e+02, float 6.375000e+02, float 8.925000e+02, float 1.147500e+03, float 1.402500e+03, float 1.657500e+03], align 16
@_vq_quantmap__16u1__p9_0 = internal global [15 x i64] [i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14], align 16
@_vq_lengthlist__16u1__p9_1 = internal global [225 x i64] [i64 1, i64 6, i64 5, i64 9, i64 9, i64 10, i64 10, i64 6, i64 7, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 5, i64 10, i64 8, i64 10, i64 8, i64 10, i64 10, i64 8, i64 8, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 5, i64 8, i64 9, i64 10, i64 10, i64 10, i64 10, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 8, i64 9, i64 10, i64 10, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 6, i64 8, i64 8, i64 10, i64 10, i64 10, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 5, i64 8, i64 8, i64 10, i64 10, i64 10, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9], align 16
@_vq_quantlist__16u1__p9_1 = internal global [15 x i64] [i64 7, i64 6, i64 8, i64 5, i64 9, i64 4, i64 10, i64 3, i64 11, i64 2, i64 12, i64 1, i64 13, i64 0, i64 14], align 16
@_vq_auxt__16u1__p9_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16u1__p9_1, ptr @_vq_quantmap__16u1__p9_1, i32 15, i32 15 }, align 8
@_vq_quantthresh__16u1__p9_1 = internal global [14 x float] [float -1.105000e+02, float -9.350000e+01, float -7.650000e+01, float -5.950000e+01, float -4.250000e+01, float -2.550000e+01, float -8.500000e+00, float 8.500000e+00, float 2.550000e+01, float 4.250000e+01, float 5.950000e+01, float 7.650000e+01, float 9.350000e+01, float 1.105000e+02], align 16
@_vq_quantmap__16u1__p9_1 = internal global [15 x i64] [i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14], align 16
@_vq_lengthlist__16u1__p9_2 = internal global [289 x i64] [i64 1, i64 6, i64 6, i64 7, i64 8, i64 8, i64 11, i64 10, i64 9, i64 9, i64 11, i64 9, i64 10, i64 9, i64 11, i64 11, i64 9, i64 6, i64 7, i64 6, i64 11, i64 8, i64 11, i64 9, i64 10, i64 10, i64 11, i64 9, i64 11, i64 10, i64 10, i64 10, i64 11, i64 9, i64 5, i64 7, i64 7, i64 8, i64 8, i64 10, i64 11, i64 8, i64 8, i64 11, i64 9, i64 9, i64 10, i64 11, i64 9, i64 10, i64 11, i64 8, i64 9, i64 6, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 9, i64 11, i64 10, i64 9, i64 11, i64 8, i64 8, i64 8, i64 9, i64 8, i64 9, i64 10, i64 11, i64 9, i64 9, i64 11, i64 11, i64 10, i64 9, i64 9, i64 11, i64 10, i64 8, i64 11, i64 8, i64 9, i64 8, i64 11, i64 9, i64 10, i64 9, i64 10, i64 11, i64 11, i64 10, i64 10, i64 9, i64 10, i64 10, i64 8, i64 8, i64 9, i64 10, i64 10, i64 10, i64 9, i64 11, i64 9, i64 10, i64 11, i64 11, i64 11, i64 11, i64 10, i64 9, i64 11, i64 9, i64 9, i64 11, i64 11, i64 10, i64 8, i64 11, i64 11, i64 11, i64 9, i64 10, i64 10, i64 11, i64 10, i64 11, i64 11, i64 9, i64 11, i64 10, i64 9, i64 11, i64 10, i64 10, i64 10, i64 10, i64 9, i64 11, i64 10, i64 11, i64 10, i64 9, i64 9, i64 10, i64 11, i64 9, i64 8, i64 10, i64 11, i64 11, i64 10, i64 10, i64 11, i64 9, i64 11, i64 10, i64 11, i64 11, i64 10, i64 11, i64 9, i64 9, i64 8, i64 10, i64 8, i64 9, i64 11, i64 9, i64 8, i64 10, i64 10, i64 9, i64 11, i64 10, i64 11, i64 10, i64 11, i64 9, i64 11, i64 8, i64 10, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 10, i64 11, i64 11, i64 10, i64 9, i64 8, i64 10, i64 10, i64 9, i64 11, i64 10, i64 11, i64 11, i64 11, i64 9, i64 9, i64 9, i64 11, i64 11, i64 11, i64 10, i64 10, i64 9, i64 9, i64 10, i64 9, i64 11, i64 11, i64 11, i64 11, i64 8, i64 10, i64 11, i64 10, i64 11, i64 11, i64 10, i64 11, i64 11, i64 9, i64 9, i64 9, i64 10, i64 9, i64 11, i64 9, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 11, i64 11, i64 10, i64 11, i64 10, i64 11, i64 11, i64 9, i64 11, i64 10, i64 11, i64 10, i64 9, i64 10, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 9, i64 10, i64 9, i64 10, i64 11, i64 11, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 11, i64 11, i64 10], align 16
@_vq_quantlist__16u1__p9_2 = internal global [17 x i64] [i64 8, i64 7, i64 9, i64 6, i64 10, i64 5, i64 11, i64 4, i64 12, i64 3, i64 13, i64 2, i64 14, i64 1, i64 15, i64 0, i64 16], align 16
@_vq_auxt__16u1__p9_2 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16u1__p9_2, ptr @_vq_quantmap__16u1__p9_2, i32 17, i32 17 }, align 8
@_vq_quantthresh__16u1__p9_2 = internal global [16 x float] [float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00], align 16
@_vq_quantmap__16u1__p9_2 = internal global [17 x i64] [i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16], align 16
@_huff_lengthlist__16u1__long = internal global [100 x i64] [i64 3, i64 6, i64 10, i64 8, i64 12, i64 8, i64 14, i64 8, i64 14, i64 19, i64 5, i64 3, i64 5, i64 5, i64 7, i64 6, i64 11, i64 7, i64 16, i64 19, i64 7, i64 5, i64 6, i64 7, i64 7, i64 9, i64 11, i64 12, i64 19, i64 19, i64 6, i64 4, i64 7, i64 5, i64 7, i64 6, i64 10, i64 7, i64 18, i64 18, i64 8, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 9, i64 18, i64 18, i64 7, i64 5, i64 8, i64 5, i64 7, i64 5, i64 8, i64 6, i64 18, i64 18, i64 12, i64 9, i64 10, i64 9, i64 9, i64 9, i64 8, i64 9, i64 18, i64 18, i64 8, i64 7, i64 10, i64 6, i64 8, i64 5, i64 6, i64 4, i64 11, i64 18, i64 11, i64 15, i64 16, i64 12, i64 11, i64 8, i64 8, i64 6, i64 9, i64 18, i64 14, i64 18, i64 18, i64 18, i64 16, i64 16, i64 16, i64 13, i64 16, i64 18], align 16
@_huff_book__16u2__short = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__16u2__short, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_resbook_16u_2 = internal global %struct.static_bookblock { [12 x [3 x ptr]] [[3 x ptr] zeroinitializer, [3 x ptr] [ptr null, ptr null, ptr @_16u2_p1_0], [3 x ptr] [ptr null, ptr null, ptr @_16u2_p2_0], [3 x ptr] [ptr null, ptr null, ptr @_16u2_p3_0], [3 x ptr] [ptr null, ptr null, ptr @_16u2_p4_0], [3 x ptr] [ptr @_16u2_p5_0, ptr @_16u2_p5_1, ptr null], [3 x ptr] [ptr @_16u2_p6_0, ptr @_16u2_p6_1, ptr null], [3 x ptr] [ptr @_16u2_p7_0, ptr @_16u2_p7_1, ptr null], [3 x ptr] [ptr @_16u2_p8_0, ptr @_16u2_p8_1, ptr null], [3 x ptr] [ptr @_16u2_p9_0, ptr @_16u2_p9_1, ptr @_16u2_p9_2], [3 x ptr] zeroinitializer, [3 x ptr] zeroinitializer] }, align 8
@_huff_book__16u2__long = internal global %struct.static_codebook { i64 2, i64 100, ptr @_huff_lengthlist__16u2__long, i32 0, i64 0, i64 0, i32 0, i32 0, ptr null, ptr null, ptr null, ptr null, i32 0 }, align 8
@_huff_lengthlist__16u2__short = internal global [100 x i64] [i64 8, i64 11, i64 12, i64 12, i64 14, i64 15, i64 16, i64 16, i64 16, i64 16, i64 9, i64 7, i64 7, i64 8, i64 9, i64 11, i64 13, i64 14, i64 16, i64 16, i64 13, i64 7, i64 6, i64 6, i64 7, i64 9, i64 12, i64 13, i64 15, i64 16, i64 15, i64 7, i64 6, i64 5, i64 4, i64 6, i64 10, i64 11, i64 14, i64 16, i64 12, i64 8, i64 7, i64 4, i64 2, i64 4, i64 7, i64 10, i64 14, i64 16, i64 11, i64 9, i64 7, i64 5, i64 3, i64 4, i64 6, i64 9, i64 14, i64 16, i64 11, i64 10, i64 9, i64 7, i64 5, i64 5, i64 6, i64 9, i64 16, i64 16, i64 10, i64 10, i64 9, i64 8, i64 6, i64 6, i64 7, i64 10, i64 16, i64 16, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 11, i64 14, i64 16, i64 16, i64 16, i64 14, i64 14, i64 13, i64 14, i64 16, i64 16, i64 16, i64 16, i64 16], align 16
@_16u2_p1_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__16u2_p1_0, i32 1, i64 -535822336, i64 1611661312, i32 2, i32 0, ptr @_vq_quantlist__16u2_p1_0, ptr null, ptr @_vq_auxt__16u2_p1_0, ptr null, i32 0 }, align 8
@_16u2_p2_0 = internal global %struct.static_codebook { i64 4, i64 625, ptr @_vq_lengthlist__16u2_p2_0, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__16u2_p2_0, ptr null, ptr @_vq_auxt__16u2_p2_0, ptr null, i32 0 }, align 8
@_16u2_p3_0 = internal global %struct.static_codebook { i64 2, i64 81, ptr @_vq_lengthlist__16u2_p3_0, i32 1, i64 -531628032, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__16u2_p3_0, ptr null, ptr @_vq_auxt__16u2_p3_0, ptr null, i32 0 }, align 8
@_16u2_p4_0 = internal global %struct.static_codebook { i64 2, i64 289, ptr @_vq_lengthlist__16u2_p4_0, i32 1, i64 -529530880, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__16u2_p4_0, ptr null, ptr @_vq_auxt__16u2_p4_0, ptr null, i32 0 }, align 8
@_16u2_p5_0 = internal global %struct.static_codebook { i64 4, i64 81, ptr @_vq_lengthlist__16u2_p5_0, i32 1, i64 -529137664, i64 1618345984, i32 2, i32 0, ptr @_vq_quantlist__16u2_p5_0, ptr null, ptr @_vq_auxt__16u2_p5_0, ptr null, i32 0 }, align 8
@_16u2_p5_1 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__16u2_p5_1, i32 1, i64 -531365888, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__16u2_p5_1, ptr null, ptr @_vq_auxt__16u2_p5_1, ptr null, i32 0 }, align 8
@_16u2_p6_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__16u2_p6_0, i32 1, i64 -526516224, i64 1616117760, i32 4, i32 0, ptr @_vq_quantlist__16u2_p6_0, ptr null, ptr @_vq_auxt__16u2_p6_0, ptr null, i32 0 }, align 8
@_16u2_p6_1 = internal global %struct.static_codebook { i64 2, i64 25, ptr @_vq_lengthlist__16u2_p6_1, i32 1, i64 -533725184, i64 1611661312, i32 3, i32 0, ptr @_vq_quantlist__16u2_p6_1, ptr null, ptr @_vq_auxt__16u2_p6_1, ptr null, i32 0 }, align 8
@_16u2_p7_0 = internal global %struct.static_codebook { i64 2, i64 169, ptr @_vq_lengthlist__16u2_p7_0, i32 1, i64 -523206656, i64 1618345984, i32 4, i32 0, ptr @_vq_quantlist__16u2_p7_0, ptr null, ptr @_vq_auxt__16u2_p7_0, ptr null, i32 0 }, align 8
@_16u2_p7_1 = internal global %struct.static_codebook { i64 2, i64 121, ptr @_vq_lengthlist__16u2_p7_1, i32 1, i64 -531365888, i64 1611661312, i32 4, i32 0, ptr @_vq_quantlist__16u2_p7_1, ptr null, ptr @_vq_auxt__16u2_p7_1, ptr null, i32 0 }, align 8
@_16u2_p8_0 = internal global %struct.static_codebook { i64 2, i64 225, ptr @_vq_lengthlist__16u2_p8_0, i32 1, i64 -520986624, i64 1620377600, i32 4, i32 0, ptr @_vq_quantlist__16u2_p8_0, ptr null, ptr @_vq_auxt__16u2_p8_0, ptr null, i32 0 }, align 8
@_16u2_p8_1 = internal global %struct.static_codebook { i64 2, i64 441, ptr @_vq_lengthlist__16u2_p8_1, i32 1, i64 -529268736, i64 1611661312, i32 5, i32 0, ptr @_vq_quantlist__16u2_p8_1, ptr null, ptr @_vq_auxt__16u2_p8_1, ptr null, i32 0 }, align 8
@_16u2_p9_0 = internal global %struct.static_codebook { i64 2, i64 225, ptr @_vq_lengthlist__16u2_p9_0, i32 1, i64 -510275072, i64 1611661312, i32 14, i32 0, ptr @_vq_quantlist__16u2_p9_0, ptr null, ptr @_vq_auxt__16u2_p9_0, ptr null, i32 0 }, align 8
@_16u2_p9_1 = internal global %struct.static_codebook { i64 2, i64 361, ptr @_vq_lengthlist__16u2_p9_1, i32 1, i64 -518488064, i64 1611661312, i32 10, i32 0, ptr @_vq_quantlist__16u2_p9_1, ptr null, ptr @_vq_auxt__16u2_p9_1, ptr null, i32 0 }, align 8
@_16u2_p9_2 = internal global %struct.static_codebook { i64 1, i64 49, ptr @_vq_lengthlist__16u2_p9_2, i32 1, i64 -526909440, i64 1611661312, i32 6, i32 0, ptr @_vq_quantlist__16u2_p9_2, ptr null, ptr @_vq_auxt__16u2_p9_2, ptr null, i32 0 }, align 8
@_vq_lengthlist__16u2_p1_0 = internal global [81 x i64] [i64 1, i64 5, i64 5, i64 5, i64 7, i64 7, i64 5, i64 7, i64 7, i64 5, i64 7, i64 7, i64 7, i64 9, i64 9, i64 7, i64 9, i64 9, i64 5, i64 7, i64 7, i64 7, i64 9, i64 9, i64 7, i64 9, i64 9, i64 5, i64 7, i64 7, i64 8, i64 9, i64 9, i64 7, i64 9, i64 9, i64 7, i64 9, i64 9, i64 9, i64 10, i64 10, i64 9, i64 10, i64 10, i64 7, i64 9, i64 9, i64 9, i64 10, i64 10, i64 9, i64 10, i64 11, i64 5, i64 7, i64 8, i64 8, i64 9, i64 9, i64 8, i64 9, i64 9, i64 7, i64 9, i64 9, i64 9, i64 10, i64 10, i64 9, i64 9, i64 10, i64 7, i64 9, i64 9, i64 9, i64 10, i64 10, i64 9, i64 11, i64 10], align 16
@_vq_quantlist__16u2_p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__16u2_p1_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16u2_p1_0, ptr @_vq_quantmap__16u2_p1_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__16u2_p1_0 = internal global [2 x float] [float -5.000000e-01, float 5.000000e-01], align 4
@_vq_quantmap__16u2_p1_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__16u2_p2_0 = internal global [625 x i64] [i64 3, i64 5, i64 5, i64 8, i64 8, i64 5, i64 7, i64 7, i64 9, i64 9, i64 5, i64 7, i64 7, i64 9, i64 9, i64 9, i64 10, i64 9, i64 11, i64 11, i64 9, i64 9, i64 9, i64 11, i64 11, i64 5, i64 7, i64 7, i64 9, i64 9, i64 7, i64 8, i64 8, i64 10, i64 10, i64 7, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 11, i64 12, i64 5, i64 7, i64 7, i64 9, i64 9, i64 7, i64 8, i64 8, i64 10, i64 10, i64 7, i64 8, i64 8, i64 10, i64 10, i64 9, i64 10, i64 10, i64 12, i64 11, i64 10, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 11, i64 10, i64 13, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 12, i64 12, i64 12, i64 14, i64 14, i64 11, i64 12, i64 12, i64 13, i64 14, i64 9, i64 10, i64 10, i64 12, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 10, i64 12, i64 12, i64 11, i64 12, i64 12, i64 14, i64 13, i64 12, i64 13, i64 12, i64 14, i64 14, i64 5, i64 7, i64 7, i64 9, i64 9, i64 7, i64 8, i64 8, i64 10, i64 10, i64 7, i64 8, i64 8, i64 10, i64 10, i64 10, i64 11, i64 10, i64 12, i64 12, i64 10, i64 10, i64 11, i64 12, i64 12, i64 7, i64 8, i64 8, i64 10, i64 10, i64 8, i64 9, i64 9, i64 11, i64 11, i64 8, i64 9, i64 9, i64 11, i64 11, i64 11, i64 11, i64 11, i64 12, i64 13, i64 10, i64 11, i64 11, i64 12, i64 13, i64 7, i64 8, i64 8, i64 10, i64 10, i64 8, i64 9, i64 8, i64 11, i64 10, i64 8, i64 9, i64 9, i64 11, i64 11, i64 10, i64 11, i64 10, i64 13, i64 12, i64 10, i64 11, i64 11, i64 13, i64 13, i64 9, i64 11, i64 10, i64 13, i64 13, i64 10, i64 11, i64 11, i64 13, i64 13, i64 10, i64 11, i64 11, i64 13, i64 13, i64 12, i64 12, i64 13, i64 13, i64 15, i64 12, i64 12, i64 13, i64 14, i64 15, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 11, i64 10, i64 13, i64 12, i64 10, i64 11, i64 11, i64 13, i64 13, i64 11, i64 13, i64 11, i64 14, i64 13, i64 12, i64 13, i64 13, i64 15, i64 15, i64 5, i64 7, i64 7, i64 9, i64 9, i64 7, i64 8, i64 8, i64 10, i64 10, i64 7, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 10, i64 12, i64 12, i64 10, i64 10, i64 11, i64 12, i64 12, i64 7, i64 8, i64 8, i64 10, i64 10, i64 8, i64 9, i64 9, i64 11, i64 11, i64 8, i64 8, i64 9, i64 10, i64 11, i64 10, i64 11, i64 11, i64 13, i64 13, i64 10, i64 10, i64 11, i64 12, i64 13, i64 7, i64 8, i64 8, i64 10, i64 11, i64 8, i64 9, i64 9, i64 11, i64 11, i64 8, i64 9, i64 9, i64 11, i64 11, i64 10, i64 11, i64 11, i64 13, i64 12, i64 11, i64 11, i64 11, i64 13, i64 12, i64 9, i64 10, i64 10, i64 12, i64 12, i64 10, i64 11, i64 11, i64 13, i64 13, i64 10, i64 10, i64 11, i64 12, i64 13, i64 12, i64 13, i64 13, i64 15, i64 14, i64 11, i64 11, i64 13, i64 12, i64 14, i64 10, i64 10, i64 11, i64 13, i64 13, i64 10, i64 11, i64 11, i64 13, i64 13, i64 10, i64 11, i64 11, i64 13, i64 13, i64 12, i64 13, i64 13, i64 14, i64 14, i64 12, i64 13, i64 12, i64 14, i64 13, i64 8, i64 10, i64 9, i64 12, i64 12, i64 9, i64 11, i64 10, i64 13, i64 13, i64 9, i64 10, i64 10, i64 12, i64 13, i64 12, i64 13, i64 13, i64 14, i64 14, i64 12, i64 12, i64 13, i64 14, i64 14, i64 9, i64 11, i64 10, i64 13, i64 13, i64 10, i64 11, i64 11, i64 13, i64 13, i64 10, i64 11, i64 11, i64 13, i64 13, i64 12, i64 13, i64 13, i64 15, i64 15, i64 13, i64 13, i64 13, i64 14, i64 15, i64 9, i64 10, i64 10, i64 12, i64 13, i64 10, i64 11, i64 10, i64 13, i64 12, i64 10, i64 11, i64 11, i64 13, i64 13, i64 12, i64 13, i64 12, i64 15, i64 14, i64 13, i64 13, i64 13, i64 14, i64 15, i64 11, i64 12, i64 12, i64 15, i64 14, i64 12, i64 12, i64 13, i64 15, i64 15, i64 12, i64 13, i64 13, i64 15, i64 14, i64 14, i64 13, i64 15, i64 14, i64 16, i64 13, i64 14, i64 15, i64 16, i64 16, i64 11, i64 12, i64 12, i64 14, i64 14, i64 11, i64 12, i64 12, i64 15, i64 14, i64 12, i64 13, i64 13, i64 15, i64 15, i64 13, i64 14, i64 13, i64 16, i64 14, i64 14, i64 14, i64 14, i64 16, i64 16, i64 8, i64 9, i64 9, i64 12, i64 12, i64 9, i64 10, i64 10, i64 13, i64 12, i64 9, i64 10, i64 10, i64 13, i64 13, i64 12, i64 12, i64 12, i64 14, i64 14, i64 12, i64 12, i64 13, i64 15, i64 15, i64 9, i64 10, i64 10, i64 13, i64 12, i64 10, i64 11, i64 11, i64 13, i64 13, i64 10, i64 10, i64 11, i64 13, i64 14, i64 12, i64 13, i64 13, i64 15, i64 15, i64 12, i64 12, i64 13, i64 14, i64 15, i64 9, i64 10, i64 10, i64 13, i64 13, i64 10, i64 11, i64 11, i64 13, i64 13, i64 10, i64 11, i64 11, i64 13, i64 13, i64 12, i64 13, i64 13, i64 14, i64 14, i64 13, i64 14, i64 13, i64 15, i64 14, i64 11, i64 12, i64 12, i64 14, i64 14, i64 12, i64 13, i64 13, i64 15, i64 14, i64 11, i64 12, i64 12, i64 14, i64 15, i64 14, i64 14, i64 14, i64 16, i64 15, i64 13, i64 12, i64 14, i64 14, i64 16, i64 11, i64 12, i64 13, i64 14, i64 15, i64 12, i64 13, i64 13, i64 14, i64 16, i64 12, i64 13, i64 12, i64 15, i64 14, i64 13, i64 15, i64 14, i64 16, i64 16, i64 14, i64 15, i64 13, i64 16, i64 13], align 16
@_vq_quantlist__16u2_p2_0 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__16u2_p2_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16u2_p2_0, ptr @_vq_quantmap__16u2_p2_0, i32 5, i32 5 }, align 8
@_vq_quantthresh__16u2_p2_0 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__16u2_p2_0 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__16u2_p3_0 = internal global [81 x i64] [i64 2, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 9, i64 9, i64 4, i64 5, i64 5, i64 6, i64 6, i64 8, i64 7, i64 9, i64 9, i64 4, i64 5, i64 5, i64 6, i64 6, i64 7, i64 8, i64 9, i64 9, i64 6, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 10, i64 10, i64 6, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 10, i64 7, i64 8, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 11, i64 11, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11], align 16
@_vq_quantlist__16u2_p3_0 = internal global [9 x i64] [i64 4, i64 3, i64 5, i64 2, i64 6, i64 1, i64 7, i64 0, i64 8], align 16
@_vq_auxt__16u2_p3_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16u2_p3_0, ptr @_vq_quantmap__16u2_p3_0, i32 9, i32 9 }, align 8
@_vq_quantthresh__16u2_p3_0 = internal global [8 x float] [float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00], align 16
@_vq_quantmap__16u2_p3_0 = internal global [9 x i64] [i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8], align 16
@_vq_lengthlist__16u2_p4_0 = internal global [289 x i64] [i64 2, i64 4, i64 4, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 5, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 11, i64 5, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 13, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 11, i64 12, i64 12, i64 13, i64 13, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 14, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 11, i64 12, i64 12, i64 13, i64 12, i64 13, i64 13, i64 11, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 14, i64 14, i64 11, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 13, i64 12, i64 13, i64 13, i64 14, i64 14, i64 11, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 13, i64 13, i64 14, i64 14, i64 14, i64 14, i64 11, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 14, i64 13, i64 14, i64 14, i64 14, i64 14], align 16
@_vq_quantlist__16u2_p4_0 = internal global [17 x i64] [i64 8, i64 7, i64 9, i64 6, i64 10, i64 5, i64 11, i64 4, i64 12, i64 3, i64 13, i64 2, i64 14, i64 1, i64 15, i64 0, i64 16], align 16
@_vq_auxt__16u2_p4_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16u2_p4_0, ptr @_vq_quantmap__16u2_p4_0, i32 17, i32 17 }, align 8
@_vq_quantthresh__16u2_p4_0 = internal global [16 x float] [float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00], align 16
@_vq_quantmap__16u2_p4_0 = internal global [17 x i64] [i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16], align 16
@_vq_lengthlist__16u2_p5_0 = internal global [81 x i64] [i64 1, i64 4, i64 4, i64 5, i64 7, i64 7, i64 5, i64 7, i64 7, i64 5, i64 9, i64 8, i64 7, i64 10, i64 9, i64 7, i64 10, i64 9, i64 5, i64 8, i64 9, i64 7, i64 9, i64 10, i64 7, i64 9, i64 10, i64 4, i64 9, i64 9, i64 9, i64 11, i64 11, i64 8, i64 11, i64 11, i64 7, i64 11, i64 11, i64 10, i64 10, i64 13, i64 10, i64 14, i64 13, i64 7, i64 11, i64 11, i64 10, i64 13, i64 11, i64 10, i64 13, i64 14, i64 5, i64 9, i64 9, i64 8, i64 11, i64 11, i64 9, i64 11, i64 11, i64 7, i64 11, i64 11, i64 10, i64 14, i64 13, i64 10, i64 12, i64 14, i64 7, i64 11, i64 11, i64 10, i64 13, i64 13, i64 10, i64 13, i64 10], align 16
@_vq_quantlist__16u2_p5_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_auxt__16u2_p5_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16u2_p5_0, ptr @_vq_quantmap__16u2_p5_0, i32 3, i32 3 }, align 8
@_vq_quantthresh__16u2_p5_0 = internal global [2 x float] [float -5.500000e+00, float 5.500000e+00], align 4
@_vq_quantmap__16u2_p5_0 = internal global [3 x i64] [i64 1, i64 0, i64 2], align 16
@_vq_lengthlist__16u2_p5_1 = internal global [121 x i64] [i64 2, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 5, i64 5, i64 5, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 5, i64 5, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9], align 16
@_vq_quantlist__16u2_p5_1 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__16u2_p5_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16u2_p5_1, ptr @_vq_quantmap__16u2_p5_1, i32 11, i32 11 }, align 8
@_vq_quantthresh__16u2_p5_1 = internal global [10 x float] [float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00], align 16
@_vq_quantmap__16u2_p5_1 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_lengthlist__16u2_p6_0 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 4, i64 6, i64 6, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 12, i64 11, i64 4, i64 6, i64 6, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 12, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 12, i64 12, i64 13, i64 12, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 12, i64 12, i64 12, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 12, i64 13, i64 13, i64 13, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 8, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 9, i64 10, i64 10, i64 11, i64 12, i64 13, i64 12, i64 13, i64 14, i64 14, i64 14, i64 14, i64 14, i64 9, i64 10, i64 10, i64 11, i64 12, i64 12, i64 13, i64 13, i64 13, i64 14, i64 14, i64 14, i64 14, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 15, i64 15, i64 15, i64 15, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 14, i64 14, i64 15, i64 15], align 16
@_vq_quantlist__16u2_p6_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__16u2_p6_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16u2_p6_0, ptr @_vq_quantmap__16u2_p6_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__16u2_p6_0 = internal global [12 x float] [float -2.750000e+01, float -2.250000e+01, float -1.750000e+01, float -1.250000e+01, float -7.500000e+00, float -2.500000e+00, float 2.500000e+00, float 7.500000e+00, float 1.250000e+01, float 1.750000e+01, float 2.250000e+01, float 2.750000e+01], align 16
@_vq_quantmap__16u2_p6_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__16u2_p6_1 = internal global [25 x i64] [i64 2, i64 4, i64 4, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 6, i64 6, i64 5, i64 5, i64 5, i64 6, i64 6], align 16
@_vq_quantlist__16u2_p6_1 = internal global [5 x i64] [i64 2, i64 1, i64 3, i64 0, i64 4], align 16
@_vq_auxt__16u2_p6_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16u2_p6_1, ptr @_vq_quantmap__16u2_p6_1, i32 5, i32 5 }, align 8
@_vq_quantthresh__16u2_p6_1 = internal global [4 x float] [float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00], align 16
@_vq_quantmap__16u2_p6_1 = internal global [5 x i64] [i64 3, i64 1, i64 0, i64 2, i64 4], align 16
@_vq_lengthlist__16u2_p7_0 = internal global [169 x i64] [i64 1, i64 4, i64 4, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 4, i64 6, i64 6, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 4, i64 6, i64 6, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 11, i64 12, i64 11, i64 7, i64 8, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 10, i64 11, i64 12, i64 12, i64 13, i64 7, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 12, i64 13, i64 13, i64 7, i64 9, i64 8, i64 10, i64 10, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 7, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 12, i64 13, i64 13, i64 13, i64 13, i64 8, i64 9, i64 9, i64 10, i64 11, i64 11, i64 12, i64 12, i64 12, i64 13, i64 13, i64 13, i64 13, i64 8, i64 9, i64 9, i64 10, i64 11, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 14, i64 14, i64 9, i64 10, i64 10, i64 12, i64 11, i64 12, i64 13, i64 13, i64 13, i64 14, i64 13, i64 13, i64 13, i64 9, i64 10, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 14, i64 13, i64 13, i64 14, i64 13, i64 10, i64 11, i64 11, i64 12, i64 13, i64 14, i64 14, i64 14, i64 15, i64 14, i64 14, i64 14, i64 14, i64 10, i64 11, i64 11, i64 12, i64 12, i64 13, i64 13, i64 13, i64 14, i64 14, i64 14, i64 15, i64 14], align 16
@_vq_quantlist__16u2_p7_0 = internal global [13 x i64] [i64 6, i64 5, i64 7, i64 4, i64 8, i64 3, i64 9, i64 2, i64 10, i64 1, i64 11, i64 0, i64 12], align 16
@_vq_auxt__16u2_p7_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16u2_p7_0, ptr @_vq_quantmap__16u2_p7_0, i32 13, i32 13 }, align 8
@_vq_quantthresh__16u2_p7_0 = internal global [12 x float] [float -6.050000e+01, float -4.950000e+01, float -3.850000e+01, float -2.750000e+01, float -1.650000e+01, float -5.500000e+00, float 5.500000e+00, float 1.650000e+01, float 2.750000e+01, float 3.850000e+01, float 4.950000e+01, float 6.050000e+01], align 16
@_vq_quantmap__16u2_p7_0 = internal global [13 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__16u2_p7_1 = internal global [121 x i64] [i64 3, i64 5, i64 5, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 5, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 5, i64 6, i64 6, i64 6, i64 6, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 6, i64 6, i64 7, i64 7, i64 7, i64 8, i64 7, i64 8, i64 8, i64 8, i64 8, i64 6, i64 7, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8], align 16
@_vq_quantlist__16u2_p7_1 = internal global [11 x i64] [i64 5, i64 4, i64 6, i64 3, i64 7, i64 2, i64 8, i64 1, i64 9, i64 0, i64 10], align 16
@_vq_auxt__16u2_p7_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16u2_p7_1, ptr @_vq_quantmap__16u2_p7_1, i32 11, i32 11 }, align 8
@_vq_quantthresh__16u2_p7_1 = internal global [10 x float] [float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00], align 16
@_vq_quantmap__16u2_p7_1 = internal global [11 x i64] [i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10], align 16
@_vq_lengthlist__16u2_p8_0 = internal global [225 x i64] [i64 1, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 7, i64 7, i64 8, i64 8, i64 10, i64 9, i64 11, i64 11, i64 4, i64 6, i64 6, i64 8, i64 8, i64 10, i64 9, i64 9, i64 8, i64 9, i64 9, i64 10, i64 10, i64 12, i64 14, i64 4, i64 6, i64 7, i64 8, i64 9, i64 9, i64 10, i64 9, i64 8, i64 9, i64 9, i64 10, i64 12, i64 12, i64 11, i64 7, i64 8, i64 8, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 10, i64 10, i64 11, i64 13, i64 13, i64 12, i64 7, i64 8, i64 8, i64 9, i64 11, i64 11, i64 10, i64 9, i64 9, i64 11, i64 10, i64 12, i64 11, i64 11, i64 14, i64 8, i64 9, i64 9, i64 11, i64 10, i64 11, i64 11, i64 10, i64 10, i64 11, i64 11, i64 13, i64 12, i64 14, i64 12, i64 8, i64 9, i64 9, i64 11, i64 12, i64 11, i64 11, i64 10, i64 10, i64 12, i64 11, i64 12, i64 12, i64 12, i64 14, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 12, i64 11, i64 13, i64 13, i64 14, i64 12, i64 7, i64 8, i64 9, i64 9, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 12, i64 12, i64 14, i64 14, i64 14, i64 8, i64 10, i64 9, i64 10, i64 11, i64 11, i64 11, i64 11, i64 14, i64 12, i64 12, i64 13, i64 14, i64 14, i64 13, i64 9, i64 9, i64 9, i64 10, i64 11, i64 11, i64 11, i64 12, i64 12, i64 12, i64 14, i64 12, i64 14, i64 13, i64 14, i64 10, i64 10, i64 10, i64 12, i64 11, i64 12, i64 11, i64 14, i64 13, i64 14, i64 13, i64 14, i64 14, i64 13, i64 14, i64 9, i64 10, i64 10, i64 11, i64 12, i64 11, i64 13, i64 12, i64 13, i64 13, i64 14, i64 14, i64 14, i64 13, i64 14, i64 10, i64 13, i64 13, i64 12, i64 12, i64 11, i64 12, i64 14, i64 13, i64 14, i64 13, i64 14, i64 12, i64 14, i64 13, i64 10, i64 11, i64 11, i64 12, i64 11, i64 12, i64 12, i64 14, i64 14, i64 14, i64 13, i64 14, i64 14, i64 14, i64 14], align 16
@_vq_quantlist__16u2_p8_0 = internal global [15 x i64] [i64 7, i64 6, i64 8, i64 5, i64 9, i64 4, i64 10, i64 3, i64 11, i64 2, i64 12, i64 1, i64 13, i64 0, i64 14], align 16
@_vq_auxt__16u2_p8_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16u2_p8_0, ptr @_vq_quantmap__16u2_p8_0, i32 15, i32 15 }, align 8
@_vq_quantthresh__16u2_p8_0 = internal global [14 x float] [float -1.365000e+02, float -1.155000e+02, float -9.450000e+01, float -7.350000e+01, float -5.250000e+01, float -3.150000e+01, float -1.050000e+01, float 1.050000e+01, float 3.150000e+01, float 5.250000e+01, float 7.350000e+01, float 9.450000e+01, float 1.155000e+02, float 1.365000e+02], align 16
@_vq_quantmap__16u2_p8_0 = internal global [15 x i64] [i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14], align 16
@_vq_lengthlist__16u2_p8_1 = internal global [441 x i64] [i64 2, i64 5, i64 5, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 9, i64 10, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 10, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 7, i64 7, i64 7, i64 8, i64 8, i64 9, i64 8, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 10, i64 11, i64 10, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 10, i64 10, i64 11, i64 10, i64 8, i64 8, i64 8, i64 8, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 10, i64 10, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 10, i64 11, i64 10, i64 11, i64 10, i64 11, i64 10, i64 8, i64 9, i64 9, i64 9, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 10, i64 10, i64 10, i64 9, i64 10, i64 9, i64 9, i64 10, i64 10, i64 10, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 9, i64 9, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 10, i64 11, i64 10, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 9, i64 10, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 10, i64 11, i64 10, i64 11, i64 10, i64 10, i64 11, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 10, i64 10, i64 11, i64 11, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 10, i64 10, i64 11, i64 10, i64 10, i64 11, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 9, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 10, i64 11, i64 10, i64 11, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 10, i64 10, i64 10, i64 11, i64 10, i64 11, i64 11, i64 11, i64 11, i64 10, i64 12, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 10, i64 10, i64 10, i64 11, i64 11, i64 12, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 11, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 11, i64 10, i64 11, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 11, i64 11, i64 10, i64 11, i64 11, i64 10, i64 11, i64 11, i64 10, i64 11, i64 11, i64 11, i64 10, i64 11, i64 11], align 16
@_vq_quantlist__16u2_p8_1 = internal global [21 x i64] [i64 10, i64 9, i64 11, i64 8, i64 12, i64 7, i64 13, i64 6, i64 14, i64 5, i64 15, i64 4, i64 16, i64 3, i64 17, i64 2, i64 18, i64 1, i64 19, i64 0, i64 20], align 16
@_vq_auxt__16u2_p8_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16u2_p8_1, ptr @_vq_quantmap__16u2_p8_1, i32 21, i32 21 }, align 8
@_vq_quantthresh__16u2_p8_1 = internal global [20 x float] [float -9.500000e+00, float -8.500000e+00, float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00, float 8.500000e+00, float 9.500000e+00], align 16
@_vq_quantmap__16u2_p8_1 = internal global [21 x i64] [i64 19, i64 17, i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16, i64 18, i64 20], align 16
@_vq_lengthlist__16u2_p9_0 = internal global [225 x i64] [i64 1, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 5, i64 4, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 4, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 10, i64 6, i64 6, i64 5, i64 10, i64 10, i64 10, i64 10, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 9, i64 5, i64 5], align 16
@_vq_quantlist__16u2_p9_0 = internal global [15 x i64] [i64 5586, i64 4655, i64 6517, i64 3724, i64 7448, i64 2793, i64 8379, i64 1862, i64 9310, i64 931, i64 10241, i64 0, i64 11172, i64 5521, i64 5651], align 16
@_vq_auxt__16u2_p9_0 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16u2_p9_0, ptr @_vq_quantmap__16u2_p9_0, i32 15, i32 15 }, align 8
@_vq_quantthresh__16u2_p9_0 = internal global [14 x float] [float -5.120500e+03, float -4.189500e+03, float -3.258500e+03, float -2.327500e+03, float -1.396500e+03, float -4.980000e+02, float -3.250000e+01, float 3.250000e+01, float 4.980000e+02, float 1.396500e+03, float 2.327500e+03, float 3.258500e+03, float 4.189500e+03, float 5.120500e+03], align 16
@_vq_quantmap__16u2_p9_0 = internal global [15 x i64] [i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 13, i64 0, i64 14, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12], align 16
@_vq_lengthlist__16u2_p9_1 = internal global [361 x i64] [i64 1, i64 12, i64 10, i64 12, i64 10, i64 12, i64 10, i64 12, i64 11, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 5, i64 5, i64 9, i64 10, i64 12, i64 11, i64 11, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 10, i64 9, i64 9, i64 11, i64 9, i64 11, i64 11, i64 12, i64 11, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 8, i64 8, i64 10, i64 11, i64 9, i64 12, i64 11, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 9, i64 8, i64 10, i64 11, i64 12, i64 11, i64 12, i64 11, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 8, i64 9, i64 11, i64 11, i64 10, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 9, i64 10, i64 11, i64 12, i64 11, i64 12, i64 11, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 9, i64 9, i64 11, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 12, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 5, i64 8, i64 9, i64 9, i64 8, i64 11, i64 9, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 5, i64 5, i64 4, i64 8, i64 8, i64 8, i64 8, i64 10, i64 9, i64 10, i64 10, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 11, i64 5, i64 4], align 16
@_vq_quantlist__16u2_p9_1 = internal global [19 x i64] [i64 392, i64 343, i64 441, i64 294, i64 490, i64 245, i64 539, i64 196, i64 588, i64 147, i64 637, i64 98, i64 686, i64 49, i64 735, i64 0, i64 784, i64 388, i64 396], align 16
@_vq_auxt__16u2_p9_1 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16u2_p9_1, ptr @_vq_quantmap__16u2_p9_1, i32 19, i32 19 }, align 8
@_vq_quantthresh__16u2_p9_1 = internal global [18 x float] [float -3.675000e+02, float -3.185000e+02, float -2.695000e+02, float -2.205000e+02, float -1.715000e+02, float -1.225000e+02, float -7.350000e+01, float -2.650000e+01, float -2.000000e+00, float 2.000000e+00, float 2.650000e+01, float 7.350000e+01, float 1.225000e+02, float 1.715000e+02, float 2.205000e+02, float 2.695000e+02, float 3.185000e+02, float 3.675000e+02], align 16
@_vq_quantmap__16u2_p9_1 = internal global [19 x i64] [i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 17, i64 0, i64 18, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16], align 16
@_vq_lengthlist__16u2_p9_2 = internal global [49 x i64] [i64 1, i64 3, i64 3, i64 4, i64 7, i64 7, i64 7, i64 8, i64 7, i64 7, i64 7, i64 7, i64 8, i64 8, i64 8, i64 8, i64 7, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 7, i64 9, i64 9, i64 8, i64 9, i64 9, i64 9, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 12, i64 12, i64 10, i64 11], align 16
@_vq_quantlist__16u2_p9_2 = internal global [49 x i64] [i64 24, i64 23, i64 25, i64 22, i64 26, i64 21, i64 27, i64 20, i64 28, i64 19, i64 29, i64 18, i64 30, i64 17, i64 31, i64 16, i64 32, i64 15, i64 33, i64 14, i64 34, i64 13, i64 35, i64 12, i64 36, i64 11, i64 37, i64 10, i64 38, i64 9, i64 39, i64 8, i64 40, i64 7, i64 41, i64 6, i64 42, i64 5, i64 43, i64 4, i64 44, i64 3, i64 45, i64 2, i64 46, i64 1, i64 47, i64 0, i64 48], align 16
@_vq_auxt__16u2_p9_2 = internal global %struct.encode_aux_threshmatch { ptr @_vq_quantthresh__16u2_p9_2, ptr @_vq_quantmap__16u2_p9_2, i32 49, i32 49 }, align 8
@_vq_quantthresh__16u2_p9_2 = internal global [48 x float] [float -2.350000e+01, float -2.250000e+01, float -2.150000e+01, float -2.050000e+01, float -1.950000e+01, float -1.850000e+01, float -1.750000e+01, float -1.650000e+01, float -1.550000e+01, float -1.450000e+01, float -1.350000e+01, float -1.250000e+01, float -1.150000e+01, float -1.050000e+01, float -9.500000e+00, float -8.500000e+00, float -7.500000e+00, float -6.500000e+00, float -5.500000e+00, float -4.500000e+00, float -3.500000e+00, float -2.500000e+00, float -1.500000e+00, float -5.000000e-01, float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00, float 8.500000e+00, float 9.500000e+00, float 1.050000e+01, float 1.150000e+01, float 1.250000e+01, float 1.350000e+01, float 1.450000e+01, float 1.550000e+01, float 1.650000e+01, float 1.750000e+01, float 1.850000e+01, float 1.950000e+01, float 2.050000e+01, float 2.150000e+01, float 2.250000e+01, float 2.350000e+01], align 16
@_vq_quantmap__16u2_p9_2 = internal global [49 x i64] [i64 47, i64 45, i64 43, i64 41, i64 39, i64 37, i64 35, i64 33, i64 31, i64 29, i64 27, i64 25, i64 23, i64 21, i64 19, i64 17, i64 15, i64 13, i64 11, i64 9, i64 7, i64 5, i64 3, i64 1, i64 0, i64 2, i64 4, i64 6, i64 8, i64 10, i64 12, i64 14, i64 16, i64 18, i64 20, i64 22, i64 24, i64 26, i64 28, i64 30, i64 32, i64 34, i64 36, i64 38, i64 40, i64 42, i64 44, i64 46, i64 48], align 16
@_huff_lengthlist__16u2__long = internal global [100 x i64] [i64 5, i64 7, i64 10, i64 10, i64 10, i64 11, i64 11, i64 13, i64 18, i64 19, i64 6, i64 5, i64 5, i64 6, i64 7, i64 8, i64 9, i64 12, i64 19, i64 19, i64 8, i64 5, i64 4, i64 4, i64 6, i64 7, i64 9, i64 13, i64 19, i64 19, i64 8, i64 5, i64 4, i64 4, i64 5, i64 6, i64 8, i64 12, i64 17, i64 19, i64 7, i64 5, i64 5, i64 4, i64 4, i64 5, i64 7, i64 12, i64 18, i64 18, i64 8, i64 7, i64 7, i64 6, i64 5, i64 5, i64 6, i64 10, i64 18, i64 18, i64 9, i64 9, i64 9, i64 8, i64 6, i64 5, i64 6, i64 9, i64 18, i64 18, i64 11, i64 13, i64 13, i64 13, i64 8, i64 7, i64 7, i64 9, i64 16, i64 18, i64 13, i64 17, i64 18, i64 16, i64 11, i64 9, i64 9, i64 9, i64 17, i64 18, i64 15, i64 18, i64 18, i64 18, i64 15, i64 13, i64 13, i64 14, i64 18, i64 18], align 16
@_psy_info_template = internal unnamed_addr constant { i32, float, float, [3 x float], float, float, float, [17 x float], i32, float, float, float, i32, i32, i32, [3 x <{ float, [16 x float] }>], <{ float, [39 x float] }>, float, i32, i32, i32, i32, double } { i32 -1, float -1.400000e+02, float -1.400000e+02, [3 x float] zeroinitializer, float 0.000000e+00, float 0.000000e+00, float -4.000000e+01, [17 x float] zeroinitializer, i32 1, float -0.000000e+00, float 5.000000e-01, float 5.000000e-01, i32 0, i32 0, i32 0, [3 x <{ float, [16 x float] }>] [<{ float, [16 x float] }> <{ float -1.000000e+00, [16 x float] zeroinitializer }>, <{ float, [16 x float] }> <{ float -1.000000e+00, [16 x float] zeroinitializer }>, <{ float, [16 x float] }> <{ float -1.000000e+00, [16 x float] zeroinitializer }>], <{ float, [39 x float] }> <{ float -1.000000e+00, [39 x float] zeroinitializer }>, float 1.050000e+02, i32 0, i32 0, i32 -1, i32 -1, double 0.000000e+00 }, align 8
@_mode_template = internal unnamed_addr constant [2 x %struct.vorbis_info_mode] [%struct.vorbis_info_mode zeroinitializer, %struct.vorbis_info_mode { i32 1, i32 0, i32 0, i32 1 }], align 16
@setup_list = internal unnamed_addr constant [23 x ptr] [ptr @ve_setup_44_stereo, ptr @ve_setup_44_stereo_low, ptr @ve_setup_44_uncoupled, ptr @ve_setup_44_uncoupled_low, ptr @ve_setup_32_stereo, ptr @ve_setup_32_stereo_low, ptr @ve_setup_32_uncoupled, ptr @ve_setup_32_uncoupled_low, ptr @ve_setup_22_stereo, ptr @ve_setup_22_uncoupled, ptr @ve_setup_16_stereo, ptr @ve_setup_16_uncoupled, ptr @ve_setup_11_stereo, ptr @ve_setup_11_uncoupled, ptr @ve_setup_8_stereo, ptr @ve_setup_8_uncoupled, ptr @ve_setup_X_stereo, ptr @ve_setup_X_uncoupled, ptr @ve_setup_X_stereo_low, ptr @ve_setup_X_uncoupled_low, ptr @ve_setup_XX_stereo, ptr @ve_setup_XX_uncoupled, ptr null], align 16
@__const._vorbis_pack_comment.temp = private unnamed_addr constant [30 x i8] c"Xiph.Org libVorbis I 20030909\00", align 16
@tonemasks = internal unnamed_addr constant [17 x [6 x [56 x float]]] [[6 x [56 x float]] [[56 x float] [float -6.000000e+01, float -6.000000e+01, float -6.000000e+01, float -6.000000e+01, float -6.000000e+01, float -6.000000e+01, float -6.000000e+01, float -6.000000e+01, float -6.000000e+01, float -6.000000e+01, float -6.000000e+01, float -6.000000e+01, float -6.200000e+01, float -6.200000e+01, float -6.500000e+01, float -7.300000e+01, float -6.900000e+01, float -6.800000e+01, float -6.800000e+01, float -6.700000e+01, float -7.000000e+01, float -7.000000e+01, float -7.200000e+01, float -7.400000e+01, float -7.500000e+01, float -7.900000e+01, float -7.900000e+01, float -8.000000e+01, float -8.300000e+01, float -8.800000e+01, float -9.300000e+01, float -1.000000e+02, float -1.100000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -4.800000e+01, float -4.800000e+01, float -4.800000e+01, float -4.800000e+01, float -4.800000e+01, float -4.800000e+01, float -4.800000e+01, float -4.800000e+01, float -4.800000e+01, float -4.800000e+01, float -4.800000e+01, float -4.800000e+01, float -4.800000e+01, float -5.300000e+01, float -6.100000e+01, float -6.600000e+01, float -6.600000e+01, float -6.800000e+01, float -6.700000e+01, float -7.000000e+01, float -7.600000e+01, float -7.600000e+01, float -7.200000e+01, float -7.300000e+01, float -7.500000e+01, float -7.600000e+01, float -7.800000e+01, float -7.900000e+01, float -8.300000e+01, float -8.800000e+01, float -9.300000e+01, float -1.000000e+02, float -1.100000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -3.700000e+01, float -3.700000e+01, float -3.700000e+01, float -3.700000e+01, float -3.700000e+01, float -3.700000e+01, float -3.700000e+01, float -3.700000e+01, float -3.800000e+01, float -4.000000e+01, float -4.200000e+01, float -4.600000e+01, float -4.800000e+01, float -5.300000e+01, float -5.500000e+01, float -6.200000e+01, float -6.500000e+01, float -5.800000e+01, float -5.600000e+01, float -5.600000e+01, float -6.100000e+01, float -6.000000e+01, float -6.500000e+01, float -6.700000e+01, float -6.900000e+01, float -7.100000e+01, float -7.700000e+01, float -7.700000e+01, float -7.800000e+01, float -8.000000e+01, float -8.200000e+01, float -8.400000e+01, float -8.800000e+01, float -9.300000e+01, float -9.800000e+01, float -1.060000e+02, float -1.120000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -2.500000e+01, float -2.500000e+01, float -2.500000e+01, float -2.500000e+01, float -2.500000e+01, float -2.500000e+01, float -2.500000e+01, float -2.500000e+01, float -2.500000e+01, float -2.600000e+01, float -2.700000e+01, float -2.900000e+01, float -3.200000e+01, float -3.800000e+01, float -4.800000e+01, float -5.200000e+01, float -5.200000e+01, float -5.000000e+01, float -4.800000e+01, float -4.800000e+01, float -5.100000e+01, float -5.200000e+01, float -5.400000e+01, float -6.000000e+01, float -6.700000e+01, float -6.700000e+01, float -6.600000e+01, float -6.800000e+01, float -6.900000e+01, float -7.300000e+01, float -7.300000e+01, float -7.600000e+01, float -8.000000e+01, float -8.100000e+01, float -8.100000e+01, float -8.500000e+01, float -8.500000e+01, float -8.600000e+01, float -8.800000e+01, float -9.300000e+01, float -1.000000e+02, float -1.100000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -1.600000e+01, float -1.600000e+01, float -1.600000e+01, float -1.600000e+01, float -1.600000e+01, float -1.600000e+01, float -1.600000e+01, float -1.600000e+01, float -1.700000e+01, float -1.900000e+01, float -2.000000e+01, float -2.200000e+01, float -2.600000e+01, float -2.800000e+01, float -3.100000e+01, float -4.000000e+01, float -4.700000e+01, float -3.900000e+01, float -3.900000e+01, float -4.000000e+01, float -4.200000e+01, float -4.300000e+01, float -4.700000e+01, float -5.100000e+01, float -5.700000e+01, float -5.200000e+01, float -5.500000e+01, float -5.500000e+01, float -6.000000e+01, float -5.800000e+01, float -6.200000e+01, float -6.300000e+01, float -7.000000e+01, float -6.700000e+01, float -6.900000e+01, float -7.200000e+01, float -7.300000e+01, float -7.700000e+01, float -8.000000e+01, float -8.200000e+01, float -8.300000e+01, float -8.700000e+01, float -9.000000e+01, float -9.400000e+01, float -9.800000e+01, float -1.040000e+02, float -1.150000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -8.000000e+00, float -8.000000e+00, float -8.000000e+00, float -8.000000e+00, float -8.000000e+00, float -8.000000e+00, float -8.000000e+00, float -8.000000e+00, float -8.000000e+00, float -8.000000e+00, float -1.000000e+01, float -1.100000e+01, float -1.500000e+01, float -1.900000e+01, float -2.500000e+01, float -3.000000e+01, float -3.400000e+01, float -3.100000e+01, float -3.000000e+01, float -3.100000e+01, float -2.900000e+01, float -3.200000e+01, float -3.500000e+01, float -4.200000e+01, float -4.800000e+01, float -4.200000e+01, float -4.400000e+01, float -4.600000e+01, float -5.000000e+01, float -5.000000e+01, float -5.100000e+01, float -5.200000e+01, float -5.900000e+01, float -5.400000e+01, float -5.500000e+01, float -5.500000e+01, float -5.800000e+01, float -6.200000e+01, float -6.300000e+01, float -6.600000e+01, float -7.200000e+01, float -7.300000e+01, float -7.600000e+01, float -7.500000e+01, float -7.800000e+01, float -8.000000e+01, float -8.000000e+01, float -8.100000e+01, float -8.400000e+01, float -8.800000e+01, float -9.000000e+01, float -9.400000e+01, float -9.800000e+01, float -1.010000e+02, float -1.060000e+02, float -1.100000e+02]], [6 x [56 x float]] [[56 x float] [float -6.600000e+01, float -6.600000e+01, float -6.600000e+01, float -6.600000e+01, float -6.600000e+01, float -6.600000e+01, float -6.600000e+01, float -6.600000e+01, float -6.600000e+01, float -6.600000e+01, float -6.600000e+01, float -6.600000e+01, float -6.600000e+01, float -6.700000e+01, float -6.700000e+01, float -6.700000e+01, float -7.600000e+01, float -7.200000e+01, float -7.100000e+01, float -7.400000e+01, float -7.600000e+01, float -7.600000e+01, float -7.500000e+01, float -7.800000e+01, float -7.900000e+01, float -7.900000e+01, float -8.100000e+01, float -8.300000e+01, float -8.600000e+01, float -8.900000e+01, float -9.300000e+01, float -9.700000e+01, float -1.000000e+02, float -1.050000e+02, float -1.100000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -4.700000e+01, float -4.700000e+01, float -4.700000e+01, float -4.700000e+01, float -4.700000e+01, float -4.700000e+01, float -4.700000e+01, float -4.700000e+01, float -4.700000e+01, float -4.700000e+01, float -4.700000e+01, float -4.800000e+01, float -5.100000e+01, float -5.500000e+01, float -5.900000e+01, float -6.600000e+01, float -6.600000e+01, float -6.600000e+01, float -6.700000e+01, float -6.600000e+01, float -6.800000e+01, float -6.900000e+01, float -7.000000e+01, float -7.400000e+01, float -7.900000e+01, float -7.700000e+01, float -7.700000e+01, float -7.800000e+01, float -8.000000e+01, float -8.100000e+01, float -8.200000e+01, float -8.400000e+01, float -8.600000e+01, float -8.800000e+01, float -9.100000e+01, float -9.500000e+01, float -1.000000e+02, float -1.080000e+02, float -1.160000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -3.600000e+01, float -3.600000e+01, float -3.600000e+01, float -3.600000e+01, float -3.600000e+01, float -3.600000e+01, float -3.600000e+01, float -3.600000e+01, float -3.600000e+01, float -3.700000e+01, float -3.700000e+01, float -4.100000e+01, float -4.400000e+01, float -4.800000e+01, float -5.100000e+01, float -5.800000e+01, float -6.200000e+01, float -6.000000e+01, float -5.700000e+01, float -5.900000e+01, float -5.900000e+01, float -6.000000e+01, float -6.300000e+01, float -6.500000e+01, float -7.200000e+01, float -7.100000e+01, float -7.000000e+01, float -7.200000e+01, float -7.400000e+01, float -7.700000e+01, float -7.600000e+01, float -7.800000e+01, float -8.100000e+01, float -8.100000e+01, float -8.000000e+01, float -8.300000e+01, float -8.600000e+01, float -9.100000e+01, float -9.600000e+01, float -1.000000e+02, float -1.050000e+02, float -1.100000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -3.000000e+01, float -3.200000e+01, float -3.200000e+01, float -3.300000e+01, float -3.500000e+01, float -4.100000e+01, float -4.900000e+01, float -5.000000e+01, float -4.900000e+01, float -4.700000e+01, float -4.800000e+01, float -4.800000e+01, float -5.200000e+01, float -5.100000e+01, float -5.700000e+01, float -6.500000e+01, float -6.100000e+01, float -5.900000e+01, float -6.100000e+01, float -6.400000e+01, float -6.900000e+01, float -7.000000e+01, float -7.400000e+01, float -7.700000e+01, float -7.700000e+01, float -7.800000e+01, float -8.100000e+01, float -8.400000e+01, float -8.500000e+01, float -8.700000e+01, float -9.000000e+01, float -9.200000e+01, float -9.600000e+01, float -1.000000e+02, float -1.070000e+02, float -1.120000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -1.900000e+01, float -1.900000e+01, float -1.900000e+01, float -1.900000e+01, float -1.900000e+01, float -1.900000e+01, float -1.900000e+01, float -1.900000e+01, float -2.000000e+01, float -2.100000e+01, float -2.300000e+01, float -2.700000e+01, float -3.000000e+01, float -3.500000e+01, float -3.600000e+01, float -4.100000e+01, float -4.600000e+01, float -4.400000e+01, float -4.200000e+01, float -4.000000e+01, float -4.100000e+01, float -4.100000e+01, float -4.300000e+01, float -4.800000e+01, float -5.500000e+01, float -5.300000e+01, float -5.200000e+01, float -5.300000e+01, float -5.600000e+01, float -5.900000e+01, float -5.800000e+01, float -6.000000e+01, float -6.700000e+01, float -6.600000e+01, float -6.900000e+01, float -7.100000e+01, float -7.200000e+01, float -7.500000e+01, float -7.900000e+01, float -8.100000e+01, float -8.400000e+01, float -8.700000e+01, float -9.000000e+01, float -9.300000e+01, float -9.700000e+01, float -1.010000e+02, float -1.070000e+02, float -1.140000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.000000e+00, float -9.000000e+00, float -9.000000e+00, float -9.000000e+00, float -9.000000e+00, float -9.000000e+00, float -9.000000e+00, float -9.000000e+00, float -1.100000e+01, float -1.200000e+01, float -1.200000e+01, float -1.500000e+01, float -1.600000e+01, float -2.000000e+01, float -2.300000e+01, float -3.000000e+01, float -3.700000e+01, float -3.400000e+01, float -3.300000e+01, float -3.400000e+01, float -3.100000e+01, float -3.200000e+01, float -3.200000e+01, float -3.800000e+01, float -4.700000e+01, float -4.400000e+01, float -4.100000e+01, float -4.000000e+01, float -4.700000e+01, float -4.900000e+01, float -4.600000e+01, float -4.600000e+01, float -5.800000e+01, float -5.000000e+01, float -5.000000e+01, float -5.400000e+01, float -5.800000e+01, float -6.200000e+01, float -6.400000e+01, float -6.700000e+01, float -6.700000e+01, float -7.000000e+01, float -7.200000e+01, float -7.600000e+01, float -7.900000e+01, float -8.300000e+01, float -8.700000e+01, float -9.100000e+01, float -9.600000e+01, float -1.000000e+02, float -1.040000e+02, float -1.100000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02]], [6 x [56 x float]] [[56 x float] [float -6.200000e+01, float -6.200000e+01, float -6.200000e+01, float -6.200000e+01, float -6.200000e+01, float -6.200000e+01, float -6.200000e+01, float -6.200000e+01, float -6.200000e+01, float -6.200000e+01, float -6.300000e+01, float -6.400000e+01, float -6.600000e+01, float -6.700000e+01, float -6.600000e+01, float -6.800000e+01, float -7.500000e+01, float -7.200000e+01, float -7.600000e+01, float -7.500000e+01, float -7.600000e+01, float -7.800000e+01, float -7.900000e+01, float -8.200000e+01, float -8.400000e+01, float -8.500000e+01, float -9.000000e+01, float -9.400000e+01, float -1.010000e+02, float -1.100000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -5.900000e+01, float -5.900000e+01, float -5.900000e+01, float -5.900000e+01, float -5.900000e+01, float -5.900000e+01, float -5.900000e+01, float -5.900000e+01, float -5.900000e+01, float -5.900000e+01, float -5.900000e+01, float -6.000000e+01, float -6.000000e+01, float -6.100000e+01, float -6.300000e+01, float -6.600000e+01, float -7.100000e+01, float -6.800000e+01, float -7.000000e+01, float -7.000000e+01, float -7.100000e+01, float -7.200000e+01, float -7.200000e+01, float -7.500000e+01, float -8.100000e+01, float -7.800000e+01, float -7.900000e+01, float -8.200000e+01, float -8.300000e+01, float -8.600000e+01, float -9.000000e+01, float -9.700000e+01, float -1.030000e+02, float -1.130000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -5.300000e+01, float -5.300000e+01, float -5.300000e+01, float -5.300000e+01, float -5.300000e+01, float -5.300000e+01, float -5.300000e+01, float -5.300000e+01, float -5.300000e+01, float -5.400000e+01, float -5.500000e+01, float -5.700000e+01, float -5.600000e+01, float -5.700000e+01, float -5.500000e+01, float -6.100000e+01, float -6.500000e+01, float -6.000000e+01, float -6.000000e+01, float -6.200000e+01, float -6.300000e+01, float -6.300000e+01, float -6.600000e+01, float -6.800000e+01, float -7.400000e+01, float -7.300000e+01, float -7.500000e+01, float -7.500000e+01, float -7.800000e+01, float -8.000000e+01, float -8.000000e+01, float -8.200000e+01, float -8.500000e+01, float -9.000000e+01, float -9.600000e+01, float -1.010000e+02, float -1.080000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -4.600000e+01, float -4.600000e+01, float -4.600000e+01, float -4.600000e+01, float -4.600000e+01, float -4.600000e+01, float -4.600000e+01, float -4.600000e+01, float -4.600000e+01, float -4.600000e+01, float -4.700000e+01, float -4.700000e+01, float -4.700000e+01, float -4.700000e+01, float -4.800000e+01, float -5.100000e+01, float -5.700000e+01, float -5.100000e+01, float -4.900000e+01, float -5.000000e+01, float -5.100000e+01, float -5.300000e+01, float -5.400000e+01, float -5.900000e+01, float -6.600000e+01, float -6.000000e+01, float -6.200000e+01, float -6.700000e+01, float -6.700000e+01, float -7.000000e+01, float -7.200000e+01, float -7.500000e+01, float -7.600000e+01, float -7.800000e+01, float -8.100000e+01, float -8.500000e+01, float -8.800000e+01, float -9.400000e+01, float -9.700000e+01, float -1.040000e+02, float -1.120000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -3.600000e+01, float -3.600000e+01, float -3.600000e+01, float -3.600000e+01, float -3.600000e+01, float -3.600000e+01, float -3.600000e+01, float -3.600000e+01, float -3.900000e+01, float -4.100000e+01, float -4.200000e+01, float -4.200000e+01, float -3.900000e+01, float -3.800000e+01, float -4.100000e+01, float -4.300000e+01, float -5.200000e+01, float -4.400000e+01, float -4.000000e+01, float -3.900000e+01, float -3.700000e+01, float -3.700000e+01, float -4.000000e+01, float -4.700000e+01, float -5.400000e+01, float -5.000000e+01, float -4.800000e+01, float -5.000000e+01, float -5.500000e+01, float -6.100000e+01, float -5.900000e+01, float -6.200000e+01, float -6.600000e+01, float -6.600000e+01, float -6.600000e+01, float -6.900000e+01, float -6.900000e+01, float -7.300000e+01, float -7.400000e+01, float -7.400000e+01, float -7.500000e+01, float -7.700000e+01, float -7.900000e+01, float -8.200000e+01, float -8.700000e+01, float -9.100000e+01, float -9.500000e+01, float -1.000000e+02, float -1.080000e+02, float -1.150000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -2.800000e+01, float -2.600000e+01, float -2.400000e+01, float -2.200000e+01, float -2.000000e+01, float -2.000000e+01, float -2.300000e+01, float -2.900000e+01, float -3.000000e+01, float -3.100000e+01, float -2.800000e+01, float -2.700000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -3.500000e+01, float -4.000000e+01, float -3.300000e+01, float -3.200000e+01, float -2.900000e+01, float -3.000000e+01, float -3.000000e+01, float -3.000000e+01, float -3.700000e+01, float -4.500000e+01, float -4.100000e+01, float -3.700000e+01, float -3.800000e+01, float -4.500000e+01, float -4.700000e+01, float -4.700000e+01, float -4.800000e+01, float -5.300000e+01, float -4.900000e+01, float -4.800000e+01, float -5.000000e+01, float -4.900000e+01, float -4.900000e+01, float -5.100000e+01, float -5.200000e+01, float -5.800000e+01, float -5.600000e+01, float -5.700000e+01, float -5.600000e+01, float -6.000000e+01, float -6.100000e+01, float -6.200000e+01, float -7.000000e+01, float -7.200000e+01, float -7.400000e+01, float -7.800000e+01, float -8.300000e+01, float -8.800000e+01, float -9.300000e+01, float -1.000000e+02, float -1.060000e+02]], [6 x [56 x float]] [[56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.100000e+02, float -1.050000e+02, float -1.000000e+02, float -9.500000e+01, float -9.100000e+01, float -8.700000e+01, float -8.300000e+01, float -8.000000e+01, float -7.800000e+01, float -7.600000e+01, float -7.800000e+01, float -7.800000e+01, float -8.100000e+01, float -8.300000e+01, float -8.500000e+01, float -8.600000e+01, float -8.500000e+01, float -8.600000e+01, float -8.700000e+01, float -9.000000e+01, float -9.700000e+01, float -1.070000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.100000e+02, float -1.050000e+02, float -1.000000e+02, float -9.500000e+01, float -9.000000e+01, float -8.500000e+01, float -8.100000e+01, float -7.700000e+01, float -7.300000e+01, float -7.000000e+01, float -6.700000e+01, float -6.700000e+01, float -6.800000e+01, float -7.500000e+01, float -7.300000e+01, float -7.000000e+01, float -6.900000e+01, float -7.000000e+01, float -7.200000e+01, float -7.500000e+01, float -7.900000e+01, float -8.400000e+01, float -8.300000e+01, float -8.400000e+01, float -8.600000e+01, float -8.800000e+01, float -8.900000e+01, float -8.900000e+01, float -9.300000e+01, float -9.800000e+01, float -1.050000e+02, float -1.120000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -1.050000e+02, float -1.000000e+02, float -9.500000e+01, float -9.000000e+01, float -8.500000e+01, float -8.000000e+01, float -7.600000e+01, float -7.100000e+01, float -6.800000e+01, float -6.800000e+01, float -6.500000e+01, float -6.300000e+01, float -6.300000e+01, float -6.200000e+01, float -6.200000e+01, float -6.400000e+01, float -6.500000e+01, float -6.400000e+01, float -6.100000e+01, float -6.200000e+01, float -6.300000e+01, float -6.400000e+01, float -6.600000e+01, float -6.800000e+01, float -7.300000e+01, float -7.300000e+01, float -7.400000e+01, float -7.500000e+01, float -7.600000e+01, float -8.100000e+01, float -8.300000e+01, float -8.500000e+01, float -8.800000e+01, float -8.900000e+01, float -9.200000e+01, float -9.500000e+01, float -1.000000e+02, float -1.080000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -8.000000e+01, float -7.500000e+01, float -7.100000e+01, float -6.800000e+01, float -6.500000e+01, float -6.300000e+01, float -6.200000e+01, float -6.100000e+01, float -6.100000e+01, float -6.100000e+01, float -6.100000e+01, float -5.900000e+01, float -5.600000e+01, float -5.700000e+01, float -5.300000e+01, float -5.000000e+01, float -5.800000e+01, float -5.200000e+01, float -5.000000e+01, float -5.000000e+01, float -5.200000e+01, float -5.300000e+01, float -5.400000e+01, float -5.800000e+01, float -6.700000e+01, float -6.300000e+01, float -6.700000e+01, float -6.800000e+01, float -7.200000e+01, float -7.500000e+01, float -7.800000e+01, float -8.000000e+01, float -8.100000e+01, float -8.100000e+01, float -8.200000e+01, float -8.500000e+01, float -8.900000e+01, float -9.000000e+01, float -9.300000e+01, float -9.700000e+01, float -1.010000e+02, float -1.070000e+02, float -1.140000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -6.500000e+01, float -6.100000e+01, float -5.900000e+01, float -5.700000e+01, float -5.600000e+01, float -5.500000e+01, float -5.500000e+01, float -5.600000e+01, float -5.600000e+01, float -5.700000e+01, float -5.500000e+01, float -5.300000e+01, float -5.200000e+01, float -4.700000e+01, float -4.400000e+01, float -4.400000e+01, float -5.000000e+01, float -4.400000e+01, float -4.100000e+01, float -3.900000e+01, float -3.900000e+01, float -4.200000e+01, float -4.000000e+01, float -4.600000e+01, float -5.100000e+01, float -4.900000e+01, float -5.000000e+01, float -5.300000e+01, float -5.400000e+01, float -6.300000e+01, float -6.000000e+01, float -6.100000e+01, float -6.200000e+01, float -6.600000e+01, float -6.600000e+01, float -6.600000e+01, float -7.000000e+01, float -7.300000e+01, float -7.400000e+01, float -7.500000e+01, float -7.600000e+01, float -7.500000e+01, float -7.900000e+01, float -8.500000e+01, float -8.900000e+01, float -9.100000e+01, float -9.600000e+01, float -1.020000e+02, float -1.100000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -5.200000e+01, float -5.000000e+01, float -4.900000e+01, float -4.900000e+01, float -4.800000e+01, float -4.800000e+01, float -4.800000e+01, float -4.900000e+01, float -5.000000e+01, float -5.000000e+01, float -4.900000e+01, float -4.600000e+01, float -4.300000e+01, float -3.900000e+01, float -3.500000e+01, float -3.300000e+01, float -3.800000e+01, float -3.600000e+01, float -3.200000e+01, float -2.900000e+01, float -3.200000e+01, float -3.200000e+01, float -3.200000e+01, float -3.500000e+01, float -4.400000e+01, float -3.900000e+01, float -3.800000e+01, float -3.800000e+01, float -4.600000e+01, float -5.000000e+01, float -4.500000e+01, float -4.600000e+01, float -5.300000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.400000e+01, float -5.400000e+01, float -5.300000e+01, float -5.300000e+01, float -5.600000e+01, float -5.700000e+01, float -5.900000e+01, float -6.600000e+01, float -7.000000e+01, float -7.200000e+01, float -7.400000e+01, float -7.900000e+01, float -8.300000e+01, float -8.500000e+01, float -9.000000e+01, float -9.700000e+01, float -1.140000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02]], [6 x [56 x float]] [[56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.100000e+02, float -1.050000e+02, float -1.000000e+02, float -9.500000e+01, float -9.000000e+01, float -8.600000e+01, float -8.000000e+01, float -7.500000e+01, float -7.500000e+01, float -7.900000e+01, float -8.000000e+01, float -7.900000e+01, float -8.000000e+01, float -8.100000e+01, float -8.200000e+01, float -8.800000e+01, float -9.500000e+01, float -1.030000e+02, float -1.100000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.080000e+02, float -1.030000e+02, float -9.800000e+01, float -9.300000e+01, float -8.800000e+01, float -8.300000e+01, float -7.900000e+01, float -7.800000e+01, float -7.500000e+01, float -7.100000e+01, float -6.700000e+01, float -6.800000e+01, float -7.300000e+01, float -7.300000e+01, float -7.200000e+01, float -7.300000e+01, float -7.500000e+01, float -7.700000e+01, float -8.000000e+01, float -8.200000e+01, float -8.800000e+01, float -9.300000e+01, float -1.000000e+02, float -1.070000e+02, float -1.140000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.100000e+02, float -1.050000e+02, float -1.010000e+02, float -9.600000e+01, float -9.000000e+01, float -8.600000e+01, float -8.100000e+01, float -7.700000e+01, float -7.300000e+01, float -6.900000e+01, float -6.600000e+01, float -6.100000e+01, float -6.200000e+01, float -6.600000e+01, float -6.400000e+01, float -6.200000e+01, float -6.500000e+01, float -6.600000e+01, float -7.000000e+01, float -7.200000e+01, float -7.600000e+01, float -8.100000e+01, float -8.000000e+01, float -8.400000e+01, float -9.000000e+01, float -9.500000e+01, float -1.020000e+02, float -1.100000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.070000e+02, float -1.030000e+02, float -9.700000e+01, float -9.200000e+01, float -8.800000e+01, float -8.300000e+01, float -7.900000e+01, float -7.400000e+01, float -7.000000e+01, float -6.600000e+01, float -5.900000e+01, float -5.300000e+01, float -5.800000e+01, float -6.200000e+01, float -5.500000e+01, float -5.400000e+01, float -5.400000e+01, float -5.400000e+01, float -5.800000e+01, float -6.100000e+01, float -6.200000e+01, float -7.200000e+01, float -7.000000e+01, float -7.200000e+01, float -7.500000e+01, float -7.800000e+01, float -8.000000e+01, float -8.100000e+01, float -8.000000e+01, float -8.300000e+01, float -8.300000e+01, float -8.800000e+01, float -9.300000e+01, float -1.000000e+02, float -1.070000e+02, float -1.150000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.050000e+02, float -1.000000e+02, float -9.500000e+01, float -9.000000e+01, float -8.500000e+01, float -8.000000e+01, float -7.500000e+01, float -7.000000e+01, float -6.600000e+01, float -6.200000e+01, float -5.600000e+01, float -4.800000e+01, float -4.400000e+01, float -4.800000e+01, float -4.600000e+01, float -4.600000e+01, float -4.300000e+01, float -4.600000e+01, float -4.800000e+01, float -4.800000e+01, float -5.100000e+01, float -5.800000e+01, float -5.800000e+01, float -5.900000e+01, float -6.000000e+01, float -6.200000e+01, float -6.200000e+01, float -6.100000e+01, float -6.100000e+01, float -6.500000e+01, float -6.400000e+01, float -6.500000e+01, float -6.800000e+01, float -7.000000e+01, float -7.400000e+01, float -7.500000e+01, float -7.800000e+01, float -8.100000e+01, float -8.600000e+01, float -9.500000e+01, float -1.100000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -1.050000e+02, float -1.000000e+02, float -9.500000e+01, float -9.000000e+01, float -8.500000e+01, float -8.000000e+01, float -7.500000e+01, float -7.000000e+01, float -6.500000e+01, float -6.100000e+01, float -5.500000e+01, float -4.900000e+01, float -3.900000e+01, float -3.300000e+01, float -4.000000e+01, float -3.500000e+01, float -3.200000e+01, float -3.800000e+01, float -4.000000e+01, float -3.300000e+01, float -3.500000e+01, float -3.700000e+01, float -4.600000e+01, float -4.100000e+01, float -4.500000e+01, float -4.400000e+01, float -4.600000e+01, float -4.200000e+01, float -4.500000e+01, float -4.600000e+01, float -5.200000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.400000e+01, float -5.400000e+01, float -5.500000e+01, float -5.700000e+01, float -6.200000e+01, float -6.400000e+01, float -6.600000e+01, float -6.800000e+01, float -7.000000e+01, float -7.600000e+01, float -8.100000e+01, float -9.000000e+01, float -1.000000e+02, float -1.100000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02]], [6 x [56 x float]] [[56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.050000e+02, float -9.800000e+01, float -9.000000e+01, float -8.500000e+01, float -8.200000e+01, float -8.300000e+01, float -8.000000e+01, float -7.800000e+01, float -8.400000e+01, float -7.900000e+01, float -8.000000e+01, float -8.300000e+01, float -8.700000e+01, float -8.900000e+01, float -9.100000e+01, float -9.300000e+01, float -9.900000e+01, float -1.060000e+02, float -1.170000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.050000e+02, float -9.800000e+01, float -9.000000e+01, float -8.500000e+01, float -8.000000e+01, float -7.500000e+01, float -7.000000e+01, float -6.800000e+01, float -7.400000e+01, float -7.200000e+01, float -7.400000e+01, float -7.700000e+01, float -8.000000e+01, float -8.200000e+01, float -8.500000e+01, float -8.700000e+01, float -9.200000e+01, float -8.900000e+01, float -9.100000e+01, float -9.500000e+01, float -1.000000e+02, float -1.060000e+02, float -1.120000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.050000e+02, float -9.800000e+01, float -9.000000e+01, float -8.300000e+01, float -7.500000e+01, float -7.100000e+01, float -6.300000e+01, float -6.400000e+01, float -6.700000e+01, float -6.200000e+01, float -6.400000e+01, float -6.700000e+01, float -7.000000e+01, float -7.300000e+01, float -7.700000e+01, float -8.100000e+01, float -8.400000e+01, float -8.300000e+01, float -8.500000e+01, float -8.900000e+01, float -9.000000e+01, float -9.300000e+01, float -9.800000e+01, float -1.040000e+02, float -1.090000e+02, float -1.140000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.030000e+02, float -9.600000e+01, float -8.800000e+01, float -8.100000e+01, float -7.500000e+01, float -6.800000e+01, float -5.800000e+01, float -5.400000e+01, float -5.600000e+01, float -5.400000e+01, float -5.600000e+01, float -5.600000e+01, float -5.800000e+01, float -6.000000e+01, float -6.300000e+01, float -6.600000e+01, float -7.400000e+01, float -6.900000e+01, float -7.200000e+01, float -7.200000e+01, float -7.500000e+01, float -7.400000e+01, float -7.700000e+01, float -8.100000e+01, float -8.100000e+01, float -8.200000e+01, float -8.400000e+01, float -8.700000e+01, float -9.300000e+01, float -9.600000e+01, float -9.900000e+01, float -1.040000e+02, float -1.100000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.080000e+02, float -1.020000e+02, float -9.600000e+01, float -9.100000e+01, float -8.500000e+01, float -8.000000e+01, float -7.400000e+01, float -6.800000e+01, float -6.000000e+01, float -5.100000e+01, float -4.600000e+01, float -4.800000e+01, float -4.600000e+01, float -4.300000e+01, float -4.500000e+01, float -4.700000e+01, float -4.700000e+01, float -4.900000e+01, float -4.800000e+01, float -5.600000e+01, float -5.300000e+01, float -5.500000e+01, float -5.800000e+01, float -5.700000e+01, float -6.300000e+01, float -5.800000e+01, float -6.000000e+01, float -6.600000e+01, float -6.400000e+01, float -6.700000e+01, float -7.000000e+01, float -7.000000e+01, float -7.400000e+01, float -7.700000e+01, float -8.400000e+01, float -8.600000e+01, float -8.900000e+01, float -9.100000e+01, float -9.300000e+01, float -9.400000e+01, float -1.010000e+02, float -1.090000e+02, float -1.180000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.080000e+02, float -1.030000e+02, float -9.800000e+01, float -9.300000e+01, float -8.800000e+01, float -8.300000e+01, float -7.800000e+01, float -7.300000e+01, float -6.800000e+01, float -6.000000e+01, float -5.300000e+01, float -4.400000e+01, float -3.500000e+01, float -3.800000e+01, float -3.800000e+01, float -3.400000e+01, float -3.400000e+01, float -3.600000e+01, float -4.000000e+01, float -4.100000e+01, float -4.400000e+01, float -5.100000e+01, float -4.500000e+01, float -4.600000e+01, float -4.700000e+01, float -4.600000e+01, float -5.400000e+01, float -5.000000e+01, float -4.900000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.100000e+01, float -5.400000e+01, float -5.700000e+01, float -5.800000e+01, float -6.000000e+01, float -6.600000e+01, float -6.600000e+01, float -6.600000e+01, float -6.400000e+01, float -6.500000e+01, float -6.800000e+01, float -7.700000e+01, float -8.200000e+01, float -8.700000e+01, float -9.500000e+01, float -1.100000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02]], [6 x [56 x float]] [[56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.070000e+02, float -1.020000e+02, float -9.700000e+01, float -9.200000e+01, float -8.700000e+01, float -8.300000e+01, float -7.800000e+01, float -7.500000e+01, float -8.200000e+01, float -7.900000e+01, float -8.300000e+01, float -8.500000e+01, float -8.900000e+01, float -9.200000e+01, float -9.500000e+01, float -9.800000e+01, float -1.010000e+02, float -1.050000e+02, float -1.090000e+02, float -1.130000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.060000e+02, float -1.000000e+02, float -9.500000e+01, float -9.000000e+01, float -8.600000e+01, float -8.100000e+01, float -7.800000e+01, float -7.400000e+01, float -6.900000e+01, float -7.400000e+01, float -7.400000e+01, float -7.600000e+01, float -7.900000e+01, float -8.300000e+01, float -8.400000e+01, float -8.600000e+01, float -8.900000e+01, float -9.200000e+01, float -9.700000e+01, float -9.300000e+01, float -1.000000e+02, float -1.030000e+02, float -1.070000e+02, float -1.100000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.060000e+02, float -1.000000e+02, float -9.500000e+01, float -9.000000e+01, float -8.700000e+01, float -8.300000e+01, float -8.000000e+01, float -7.500000e+01, float -6.900000e+01, float -6.000000e+01, float -6.600000e+01, float -6.600000e+01, float -6.800000e+01, float -7.000000e+01, float -7.400000e+01, float -7.800000e+01, float -7.900000e+01, float -8.100000e+01, float -8.100000e+01, float -8.300000e+01, float -8.400000e+01, float -8.700000e+01, float -9.300000e+01, float -9.600000e+01, float -9.900000e+01, float -1.030000e+02, float -1.070000e+02, float -1.100000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.080000e+02, float -1.030000e+02, float -9.800000e+01, float -9.300000e+01, float -8.900000e+01, float -8.500000e+01, float -8.200000e+01, float -7.800000e+01, float -7.100000e+01, float -6.200000e+01, float -5.500000e+01, float -5.800000e+01, float -5.800000e+01, float -5.400000e+01, float -5.400000e+01, float -5.500000e+01, float -5.900000e+01, float -6.100000e+01, float -6.200000e+01, float -7.000000e+01, float -6.600000e+01, float -6.600000e+01, float -6.700000e+01, float -7.000000e+01, float -7.200000e+01, float -7.500000e+01, float -7.800000e+01, float -8.400000e+01, float -8.400000e+01, float -8.400000e+01, float -8.800000e+01, float -9.100000e+01, float -9.000000e+01, float -9.500000e+01, float -9.800000e+01, float -1.020000e+02, float -1.030000e+02, float -1.060000e+02, float -1.100000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.080000e+02, float -1.030000e+02, float -9.800000e+01, float -9.400000e+01, float -9.000000e+01, float -8.700000e+01, float -8.200000e+01, float -7.900000e+01, float -7.300000e+01, float -6.700000e+01, float -5.800000e+01, float -4.700000e+01, float -5.000000e+01, float -4.500000e+01, float -4.100000e+01, float -4.500000e+01, float -4.800000e+01, float -4.400000e+01, float -4.400000e+01, float -4.900000e+01, float -5.400000e+01, float -5.100000e+01, float -4.800000e+01, float -4.700000e+01, float -4.900000e+01, float -5.000000e+01, float -5.100000e+01, float -5.700000e+01, float -5.800000e+01, float -6.000000e+01, float -6.300000e+01, float -6.900000e+01, float -7.000000e+01, float -6.900000e+01, float -7.100000e+01, float -7.400000e+01, float -7.800000e+01, float -8.200000e+01, float -9.000000e+01, float -9.500000e+01, float -1.010000e+02, float -1.050000e+02, float -1.100000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.050000e+02, float -1.010000e+02, float -9.700000e+01, float -9.300000e+01, float -9.000000e+01, float -8.500000e+01, float -8.000000e+01, float -7.700000e+01, float -7.200000e+01, float -6.500000e+01, float -5.600000e+01, float -4.800000e+01, float -3.700000e+01, float -4.000000e+01, float -3.600000e+01, float -3.400000e+01, float -4.000000e+01, float -5.000000e+01, float -4.700000e+01, float -3.800000e+01, float -4.100000e+01, float -4.700000e+01, float -3.800000e+01, float -3.500000e+01, float -3.900000e+01, float -3.800000e+01, float -4.300000e+01, float -4.000000e+01, float -4.500000e+01, float -5.000000e+01, float -4.500000e+01, float -4.400000e+01, float -4.700000e+01, float -5.000000e+01, float -5.500000e+01, float -4.800000e+01, float -4.800000e+01, float -5.200000e+01, float -6.600000e+01, float -7.000000e+01, float -7.600000e+01, float -8.200000e+01, float -9.000000e+01, float -9.700000e+01, float -1.050000e+02, float -1.100000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02]], [6 x [56 x float]] [[56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.080000e+02, float -1.030000e+02, float -9.800000e+01, float -9.300000e+01, float -8.600000e+01, float -7.900000e+01, float -7.600000e+01, float -8.300000e+01, float -8.100000e+01, float -8.500000e+01, float -8.700000e+01, float -8.900000e+01, float -9.300000e+01, float -9.800000e+01, float -1.020000e+02, float -1.070000e+02, float -1.120000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.080000e+02, float -1.030000e+02, float -9.800000e+01, float -9.300000e+01, float -8.600000e+01, float -7.900000e+01, float -7.100000e+01, float -7.700000e+01, float -7.400000e+01, float -7.700000e+01, float -7.900000e+01, float -8.100000e+01, float -8.400000e+01, float -8.500000e+01, float -9.000000e+01, float -9.200000e+01, float -9.300000e+01, float -9.200000e+01, float -9.800000e+01, float -1.010000e+02, float -1.080000e+02, float -1.120000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.080000e+02, float -1.030000e+02, float -9.800000e+01, float -9.300000e+01, float -8.700000e+01, float -7.800000e+01, float -6.800000e+01, float -6.500000e+01, float -6.600000e+01, float -6.200000e+01, float -6.500000e+01, float -6.700000e+01, float -7.000000e+01, float -7.300000e+01, float -7.500000e+01, float -7.800000e+01, float -8.200000e+01, float -8.200000e+01, float -8.300000e+01, float -8.400000e+01, float -9.100000e+01, float -9.300000e+01, float -9.800000e+01, float -1.020000e+02, float -1.060000e+02, float -1.100000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.050000e+02, float -1.000000e+02, float -9.500000e+01, float -9.000000e+01, float -8.200000e+01, float -7.400000e+01, float -6.200000e+01, float -5.700000e+01, float -5.800000e+01, float -5.600000e+01, float -5.100000e+01, float -5.200000e+01, float -5.200000e+01, float -5.400000e+01, float -5.400000e+01, float -5.800000e+01, float -6.600000e+01, float -5.900000e+01, float -6.000000e+01, float -6.300000e+01, float -6.600000e+01, float -6.900000e+01, float -7.300000e+01, float -7.900000e+01, float -8.300000e+01, float -8.400000e+01, float -8.000000e+01, float -8.100000e+01, float -8.100000e+01, float -8.200000e+01, float -8.800000e+01, float -9.200000e+01, float -9.800000e+01, float -1.050000e+02, float -1.130000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.070000e+02, float -1.020000e+02, float -9.700000e+01, float -9.200000e+01, float -8.400000e+01, float -7.900000e+01, float -6.900000e+01, float -5.700000e+01, float -4.700000e+01, float -5.200000e+01, float -4.700000e+01, float -4.400000e+01, float -4.500000e+01, float -5.000000e+01, float -5.200000e+01, float -4.200000e+01, float -4.200000e+01, float -5.300000e+01, float -4.300000e+01, float -4.300000e+01, float -4.800000e+01, float -5.100000e+01, float -5.600000e+01, float -5.500000e+01, float -5.200000e+01, float -5.700000e+01, float -5.900000e+01, float -6.100000e+01, float -6.200000e+01, float -6.700000e+01, float -7.100000e+01, float -7.800000e+01, float -8.300000e+01, float -8.600000e+01, float -9.400000e+01, float -9.800000e+01, float -1.030000e+02, float -1.100000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.050000e+02, float -1.000000e+02, float -9.500000e+01, float -9.000000e+01, float -8.400000e+01, float -7.800000e+01, float -7.000000e+01, float -6.100000e+01, float -5.100000e+01, float -4.100000e+01, float -4.000000e+01, float -3.800000e+01, float -4.000000e+01, float -4.600000e+01, float -5.200000e+01, float -5.100000e+01, float -4.100000e+01, float -4.000000e+01, float -4.600000e+01, float -4.000000e+01, float -3.800000e+01, float -3.800000e+01, float -4.100000e+01, float -4.600000e+01, float -4.100000e+01, float -4.600000e+01, float -4.700000e+01, float -4.300000e+01, float -4.300000e+01, float -4.500000e+01, float -4.100000e+01, float -4.500000e+01, float -5.600000e+01, float -6.700000e+01, float -6.800000e+01, float -8.300000e+01, float -8.700000e+01, float -9.000000e+01, float -9.500000e+01, float -1.020000e+02, float -1.070000e+02, float -1.130000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02]], [6 x [56 x float]] [[56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.090000e+02, float -1.050000e+02, float -1.010000e+02, float -9.600000e+01, float -9.100000e+01, float -8.400000e+01, float -7.700000e+01, float -8.200000e+01, float -8.200000e+01, float -8.500000e+01, float -8.900000e+01, float -9.400000e+01, float -1.000000e+02, float -1.060000e+02, float -1.100000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.060000e+02, float -1.030000e+02, float -9.800000e+01, float -9.200000e+01, float -8.500000e+01, float -8.000000e+01, float -7.100000e+01, float -7.500000e+01, float -7.200000e+01, float -7.600000e+01, float -8.000000e+01, float -8.400000e+01, float -8.600000e+01, float -8.900000e+01, float -9.300000e+01, float -1.000000e+02, float -1.070000e+02, float -1.130000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.070000e+02, float -1.040000e+02, float -1.010000e+02, float -9.700000e+01, float -9.200000e+01, float -8.800000e+01, float -8.400000e+01, float -8.000000e+01, float -6.400000e+01, float -6.600000e+01, float -6.300000e+01, float -6.400000e+01, float -6.600000e+01, float -6.900000e+01, float -7.300000e+01, float -7.700000e+01, float -8.300000e+01, float -8.300000e+01, float -8.600000e+01, float -9.100000e+01, float -9.800000e+01, float -1.040000e+02, float -1.110000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.070000e+02, float -1.040000e+02, float -1.010000e+02, float -9.700000e+01, float -9.200000e+01, float -9.000000e+01, float -8.400000e+01, float -7.400000e+01, float -5.700000e+01, float -5.800000e+01, float -5.200000e+01, float -5.500000e+01, float -5.400000e+01, float -5.000000e+01, float -5.200000e+01, float -5.000000e+01, float -5.200000e+01, float -6.300000e+01, float -6.200000e+01, float -6.900000e+01, float -7.600000e+01, float -7.700000e+01, float -7.800000e+01, float -7.800000e+01, float -7.900000e+01, float -8.200000e+01, float -8.800000e+01, float -9.400000e+01, float -1.000000e+02, float -1.060000e+02, float -1.110000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.060000e+02, float -1.020000e+02, float -9.800000e+01, float -9.500000e+01, float -9.000000e+01, float -8.500000e+01, float -8.300000e+01, float -7.800000e+01, float -7.000000e+01, float -5.000000e+01, float -5.000000e+01, float -4.100000e+01, float -4.400000e+01, float -4.900000e+01, float -4.700000e+01, float -5.000000e+01, float -5.000000e+01, float -4.400000e+01, float -5.500000e+01, float -4.600000e+01, float -4.700000e+01, float -4.800000e+01, float -4.800000e+01, float -5.400000e+01, float -4.900000e+01, float -4.900000e+01, float -5.800000e+01, float -6.200000e+01, float -7.100000e+01, float -8.100000e+01, float -8.700000e+01, float -9.200000e+01, float -9.700000e+01, float -1.020000e+02, float -1.080000e+02, float -1.140000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.060000e+02, float -1.020000e+02, float -9.800000e+01, float -9.500000e+01, float -9.000000e+01, float -8.500000e+01, float -8.300000e+01, float -7.800000e+01, float -7.000000e+01, float -4.500000e+01, float -4.300000e+01, float -4.100000e+01, float -4.700000e+01, float -5.000000e+01, float -5.100000e+01, float -5.000000e+01, float -4.900000e+01, float -4.500000e+01, float -4.700000e+01, float -4.100000e+01, float -4.400000e+01, float -4.100000e+01, float -3.900000e+01, float -4.300000e+01, float -3.800000e+01, float -3.700000e+01, float -4.000000e+01, float -4.100000e+01, float -4.400000e+01, float -5.000000e+01, float -5.800000e+01, float -6.500000e+01, float -7.300000e+01, float -7.900000e+01, float -8.500000e+01, float -9.200000e+01, float -9.700000e+01, float -1.010000e+02, float -1.050000e+02, float -1.090000e+02, float -1.130000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02]], [6 x [56 x float]] [[56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.070000e+02, float -1.000000e+02, float -9.500000e+01, float -8.700000e+01, float -8.100000e+01, float -8.500000e+01, float -8.300000e+01, float -8.800000e+01, float -9.300000e+01, float -1.000000e+02, float -1.070000e+02, float -1.140000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.070000e+02, float -1.010000e+02, float -9.500000e+01, float -8.800000e+01, float -8.300000e+01, float -7.600000e+01, float -7.300000e+01, float -7.200000e+01, float -7.900000e+01, float -8.400000e+01, float -9.000000e+01, float -9.500000e+01, float -1.000000e+02, float -1.050000e+02, float -1.100000e+02, float -1.150000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.040000e+02, float -9.800000e+01, float -9.200000e+01, float -8.700000e+01, float -8.100000e+01, float -7.000000e+01, float -6.500000e+01, float -6.200000e+01, float -6.700000e+01, float -7.100000e+01, float -7.400000e+01, float -8.000000e+01, float -8.500000e+01, float -9.100000e+01, float -9.500000e+01, float -9.900000e+01, float -1.030000e+02, float -1.080000e+02, float -1.110000e+02, float -1.140000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.030000e+02, float -9.700000e+01, float -9.000000e+01, float -8.500000e+01, float -7.600000e+01, float -6.000000e+01, float -5.600000e+01, float -5.400000e+01, float -6.000000e+01, float -6.200000e+01, float -6.100000e+01, float -5.600000e+01, float -6.300000e+01, float -6.500000e+01, float -7.300000e+01, float -7.400000e+01, float -7.700000e+01, float -7.500000e+01, float -7.800000e+01, float -8.100000e+01, float -8.600000e+01, float -8.700000e+01, float -8.800000e+01, float -9.100000e+01, float -9.400000e+01, float -9.800000e+01, float -1.030000e+02, float -1.100000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.050000e+02, float -1.000000e+02, float -9.700000e+01, float -9.200000e+01, float -8.600000e+01, float -8.100000e+01, float -7.900000e+01, float -7.000000e+01, float -5.700000e+01, float -5.100000e+01, float -4.700000e+01, float -5.100000e+01, float -5.800000e+01, float -6.000000e+01, float -5.600000e+01, float -5.300000e+01, float -5.000000e+01, float -5.800000e+01, float -5.200000e+01, float -5.000000e+01, float -5.000000e+01, float -5.300000e+01, float -5.500000e+01, float -6.400000e+01, float -6.900000e+01, float -7.100000e+01, float -8.500000e+01, float -8.200000e+01, float -7.800000e+01, float -8.100000e+01, float -8.500000e+01, float -9.500000e+01, float -1.020000e+02, float -1.120000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.050000e+02, float -1.000000e+02, float -9.700000e+01, float -9.200000e+01, float -8.500000e+01, float -8.300000e+01, float -7.900000e+01, float -7.200000e+01, float -4.900000e+01, float -4.000000e+01, float -4.300000e+01, float -4.300000e+01, float -5.400000e+01, float -5.600000e+01, float -5.100000e+01, float -5.000000e+01, float -4.000000e+01, float -4.300000e+01, float -3.800000e+01, float -3.600000e+01, float -3.500000e+01, float -3.700000e+01, float -3.800000e+01, float -3.700000e+01, float -4.400000e+01, float -5.400000e+01, float -6.000000e+01, float -5.700000e+01, float -6.000000e+01, float -7.000000e+01, float -7.500000e+01, float -8.400000e+01, float -9.200000e+01, float -1.030000e+02, float -1.120000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02]], [6 x [56 x float]] [[56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.100000e+02, float -1.020000e+02, float -9.500000e+01, float -8.900000e+01, float -8.200000e+01, float -8.300000e+01, float -8.400000e+01, float -9.000000e+01, float -9.200000e+01, float -9.900000e+01, float -1.070000e+02, float -1.130000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.070000e+02, float -1.010000e+02, float -9.500000e+01, float -8.900000e+01, float -8.300000e+01, float -7.200000e+01, float -7.400000e+01, float -7.800000e+01, float -8.500000e+01, float -8.800000e+01, float -8.800000e+01, float -9.000000e+01, float -9.200000e+01, float -9.800000e+01, float -1.050000e+02, float -1.110000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.090000e+02, float -1.030000e+02, float -9.700000e+01, float -9.300000e+01, float -8.700000e+01, float -8.100000e+01, float -7.000000e+01, float -7.000000e+01, float -6.700000e+01, float -7.500000e+01, float -7.300000e+01, float -7.600000e+01, float -7.900000e+01, float -8.100000e+01, float -8.300000e+01, float -8.800000e+01, float -8.900000e+01, float -9.700000e+01, float -1.030000e+02, float -1.100000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.070000e+02, float -1.000000e+02, float -9.400000e+01, float -8.800000e+01, float -8.300000e+01, float -7.500000e+01, float -6.300000e+01, float -5.900000e+01, float -5.900000e+01, float -6.300000e+01, float -6.600000e+01, float -6.000000e+01, float -6.200000e+01, float -6.700000e+01, float -6.700000e+01, float -7.700000e+01, float -7.600000e+01, float -8.100000e+01, float -8.800000e+01, float -8.600000e+01, float -9.200000e+01, float -9.600000e+01, float -1.020000e+02, float -1.090000e+02, float -1.160000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.050000e+02, float -9.800000e+01, float -9.200000e+01, float -8.600000e+01, float -8.100000e+01, float -7.300000e+01, float -5.600000e+01, float -5.200000e+01, float -4.700000e+01, float -5.500000e+01, float -6.000000e+01, float -5.800000e+01, float -5.200000e+01, float -5.100000e+01, float -4.500000e+01, float -4.900000e+01, float -5.000000e+01, float -5.300000e+01, float -5.400000e+01, float -6.100000e+01, float -7.100000e+01, float -7.000000e+01, float -6.900000e+01, float -7.800000e+01, float -7.900000e+01, float -8.700000e+01, float -9.000000e+01, float -9.600000e+01, float -1.040000e+02, float -1.120000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.030000e+02, float -9.600000e+01, float -9.000000e+01, float -8.600000e+01, float -7.800000e+01, float -7.000000e+01, float -5.100000e+01, float -4.200000e+01, float -4.700000e+01, float -4.800000e+01, float -5.500000e+01, float -5.400000e+01, float -5.400000e+01, float -5.300000e+01, float -4.200000e+01, float -3.500000e+01, float -2.800000e+01, float -3.300000e+01, float -3.800000e+01, float -3.700000e+01, float -4.400000e+01, float -4.700000e+01, float -4.900000e+01, float -5.400000e+01, float -6.300000e+01, float -6.800000e+01, float -7.800000e+01, float -8.200000e+01, float -8.900000e+01, float -9.400000e+01, float -9.900000e+01, float -1.040000e+02, float -1.090000e+02, float -1.140000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02]], [6 x [56 x float]] [[56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.100000e+02, float -1.000000e+02, float -9.000000e+01, float -7.900000e+01, float -8.500000e+01, float -8.100000e+01, float -8.200000e+01, float -8.200000e+01, float -8.900000e+01, float -9.400000e+01, float -9.900000e+01, float -1.030000e+02, float -1.090000e+02, float -1.150000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.050000e+02, float -9.700000e+01, float -8.500000e+01, float -7.200000e+01, float -7.400000e+01, float -7.000000e+01, float -7.000000e+01, float -7.000000e+01, float -7.600000e+01, float -8.500000e+01, float -9.100000e+01, float -9.300000e+01, float -9.700000e+01, float -1.030000e+02, float -1.090000e+02, float -1.150000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.120000e+02, float -9.300000e+01, float -8.100000e+01, float -6.800000e+01, float -6.200000e+01, float -6.000000e+01, float -6.000000e+01, float -5.700000e+01, float -6.300000e+01, float -7.000000e+01, float -7.700000e+01, float -8.200000e+01, float -9.000000e+01, float -9.300000e+01, float -9.800000e+01, float -1.040000e+02, float -1.090000e+02, float -1.130000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.130000e+02, float -1.000000e+02, float -9.300000e+01, float -8.400000e+01, float -6.300000e+01, float -5.800000e+01, float -4.800000e+01, float -5.300000e+01, float -5.400000e+01, float -5.200000e+01, float -5.200000e+01, float -5.700000e+01, float -6.400000e+01, float -6.600000e+01, float -7.600000e+01, float -8.300000e+01, float -8.100000e+01, float -8.500000e+01, float -8.500000e+01, float -9.000000e+01, float -9.500000e+01, float -9.800000e+01, float -1.010000e+02, float -1.030000e+02, float -1.060000e+02, float -1.080000e+02, float -1.110000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.050000e+02, float -9.500000e+01, float -8.600000e+01, float -7.400000e+01, float -5.300000e+01, float -5.000000e+01, float -3.800000e+01, float -4.300000e+01, float -4.900000e+01, float -4.300000e+01, float -4.200000e+01, float -3.900000e+01, float -3.900000e+01, float -4.600000e+01, float -5.200000e+01, float -5.700000e+01, float -5.600000e+01, float -7.200000e+01, float -6.900000e+01, float -7.400000e+01, float -8.100000e+01, float -8.700000e+01, float -9.200000e+01, float -9.400000e+01, float -9.700000e+01, float -9.900000e+01, float -1.020000e+02, float -1.050000e+02, float -1.080000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.080000e+02, float -9.900000e+01, float -9.000000e+01, float -7.600000e+01, float -6.600000e+01, float -4.500000e+01, float -4.300000e+01, float -4.100000e+01, float -4.400000e+01, float -4.700000e+01, float -4.300000e+01, float -4.700000e+01, float -4.000000e+01, float -3.000000e+01, float -3.100000e+01, float -3.100000e+01, float -3.900000e+01, float -3.300000e+01, float -4.000000e+01, float -4.100000e+01, float -4.300000e+01, float -5.300000e+01, float -5.900000e+01, float -7.000000e+01, float -7.300000e+01, float -7.700000e+01, float -7.900000e+01, float -8.200000e+01, float -8.400000e+01, float -8.700000e+01, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02]], [6 x [56 x float]] [[56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.100000e+02, float -9.100000e+01, float -7.600000e+01, float -7.500000e+01, float -8.500000e+01, float -9.300000e+01, float -9.800000e+01, float -1.040000e+02, float -1.100000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.100000e+02, float -9.100000e+01, float -7.000000e+01, float -7.000000e+01, float -7.500000e+01, float -8.600000e+01, float -8.900000e+01, float -9.400000e+01, float -9.800000e+01, float -1.010000e+02, float -1.060000e+02, float -1.100000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.100000e+02, float -9.500000e+01, float -8.000000e+01, float -6.000000e+01, float -6.500000e+01, float -6.400000e+01, float -7.400000e+01, float -8.300000e+01, float -8.800000e+01, float -9.100000e+01, float -9.500000e+01, float -9.900000e+01, float -1.030000e+02, float -1.070000e+02, float -1.100000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.100000e+02, float -9.500000e+01, float -8.000000e+01, float -5.800000e+01, float -5.500000e+01, float -4.900000e+01, float -6.600000e+01, float -6.800000e+01, float -7.100000e+01, float -7.800000e+01, float -7.800000e+01, float -8.000000e+01, float -8.800000e+01, float -8.500000e+01, float -8.900000e+01, float -9.700000e+01, float -1.000000e+02, float -1.050000e+02, float -1.100000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.100000e+02, float -9.500000e+01, float -8.000000e+01, float -5.300000e+01, float -5.200000e+01, float -4.100000e+01, float -5.900000e+01, float -5.900000e+01, float -4.900000e+01, float -5.800000e+01, float -5.600000e+01, float -6.300000e+01, float -8.600000e+01, float -7.900000e+01, float -9.000000e+01, float -9.300000e+01, float -9.800000e+01, float -1.030000e+02, float -1.070000e+02, float -1.120000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.100000e+02, float -9.700000e+01, float -9.100000e+01, float -7.300000e+01, float -4.500000e+01, float -4.000000e+01, float -3.300000e+01, float -5.300000e+01, float -6.100000e+01, float -4.900000e+01, float -5.400000e+01, float -5.000000e+01, float -5.000000e+01, float -6.000000e+01, float -5.200000e+01, float -6.700000e+01, float -7.400000e+01, float -8.100000e+01, float -9.200000e+01, float -9.600000e+01, float -1.000000e+02, float -1.050000e+02, float -1.100000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02]], [6 x [56 x float]] [[56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.130000e+02, float -1.060000e+02, float -9.900000e+01, float -9.200000e+01, float -7.700000e+01, float -8.000000e+01, float -8.800000e+01, float -9.700000e+01, float -1.060000e+02, float -1.150000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.160000e+02, float -1.090000e+02, float -1.020000e+02, float -9.500000e+01, float -8.900000e+01, float -7.400000e+01, float -7.200000e+01, float -8.800000e+01, float -8.700000e+01, float -9.500000e+01, float -1.020000e+02, float -1.090000e+02, float -1.160000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.160000e+02, float -1.090000e+02, float -1.020000e+02, float -9.500000e+01, float -8.900000e+01, float -7.500000e+01, float -6.600000e+01, float -7.400000e+01, float -7.700000e+01, float -7.800000e+01, float -8.600000e+01, float -8.700000e+01, float -9.000000e+01, float -9.600000e+01, float -1.050000e+02, float -1.150000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.150000e+02, float -1.080000e+02, float -1.010000e+02, float -9.400000e+01, float -8.800000e+01, float -6.600000e+01, float -5.600000e+01, float -6.100000e+01, float -7.000000e+01, float -6.500000e+01, float -7.800000e+01, float -7.200000e+01, float -8.300000e+01, float -8.400000e+01, float -9.300000e+01, float -9.800000e+01, float -1.050000e+02, float -1.100000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.100000e+02, float -1.050000e+02, float -9.500000e+01, float -8.900000e+01, float -8.200000e+01, float -5.700000e+01, float -5.200000e+01, float -5.200000e+01, float -5.900000e+01, float -5.600000e+01, float -5.900000e+01, float -5.800000e+01, float -6.900000e+01, float -6.700000e+01, float -8.800000e+01, float -8.200000e+01, float -8.200000e+01, float -8.900000e+01, float -9.400000e+01, float -1.000000e+02, float -1.080000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.100000e+02, float -1.010000e+02, float -9.600000e+01, float -9.000000e+01, float -8.300000e+01, float -7.700000e+01, float -5.400000e+01, float -4.300000e+01, float -3.800000e+01, float -5.000000e+01, float -4.800000e+01, float -5.200000e+01, float -4.800000e+01, float -4.200000e+01, float -4.200000e+01, float -5.100000e+01, float -5.200000e+01, float -5.300000e+01, float -5.900000e+01, float -6.500000e+01, float -7.100000e+01, float -7.800000e+01, float -8.500000e+01, float -9.500000e+01, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02]], [6 x [56 x float]] [[56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.200000e+02, float -1.050000e+02, float -8.600000e+01, float -6.800000e+01, float -7.800000e+01, float -7.900000e+01, float -9.000000e+01, float -1.000000e+02, float -1.100000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.200000e+02, float -1.050000e+02, float -8.600000e+01, float -6.600000e+01, float -7.300000e+01, float -7.700000e+01, float -8.800000e+01, float -9.600000e+01, float -1.050000e+02, float -1.150000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.200000e+02, float -1.050000e+02, float -9.200000e+01, float -8.000000e+01, float -6.100000e+01, float -6.400000e+01, float -6.800000e+01, float -8.000000e+01, float -8.700000e+01, float -9.200000e+01, float -1.000000e+02, float -1.100000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.200000e+02, float -1.040000e+02, float -9.100000e+01, float -7.900000e+01, float -5.200000e+01, float -6.000000e+01, float -5.400000e+01, float -6.400000e+01, float -6.900000e+01, float -7.700000e+01, float -8.000000e+01, float -8.200000e+01, float -8.400000e+01, float -8.500000e+01, float -8.700000e+01, float -8.800000e+01, float -9.000000e+01, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.180000e+02, float -1.000000e+02, float -8.700000e+01, float -7.700000e+01, float -4.900000e+01, float -5.000000e+01, float -4.400000e+01, float -5.800000e+01, float -6.100000e+01, float -6.100000e+01, float -6.700000e+01, float -6.500000e+01, float -6.200000e+01, float -6.200000e+01, float -6.200000e+01, float -6.500000e+01, float -6.800000e+01, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.150000e+02, float -9.800000e+01, float -8.400000e+01, float -6.200000e+01, float -4.900000e+01, float -4.400000e+01, float -3.800000e+01, float -4.600000e+01, float -4.900000e+01, float -4.900000e+01, float -4.600000e+01, float -3.900000e+01, float -3.700000e+01, float -3.900000e+01, float -4.000000e+01, float -4.200000e+01, float -4.300000e+01, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02]], [6 x [56 x float]] [[56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.100000e+02, float -8.800000e+01, float -7.400000e+01, float -7.700000e+01, float -8.200000e+01, float -8.200000e+01, float -8.500000e+01, float -9.000000e+01, float -9.400000e+01, float -9.900000e+01, float -1.040000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.100000e+02, float -8.800000e+01, float -6.600000e+01, float -7.000000e+01, float -8.100000e+01, float -8.000000e+01, float -8.100000e+01, float -8.400000e+01, float -8.800000e+01, float -9.100000e+01, float -9.300000e+01, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.100000e+02, float -8.800000e+01, float -6.100000e+01, float -6.300000e+01, float -7.000000e+01, float -7.100000e+01, float -7.400000e+01, float -7.700000e+01, float -8.000000e+01, float -8.300000e+01, float -8.500000e+01, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.100000e+02, float -8.600000e+01, float -6.200000e+01, float -6.300000e+01, float -6.200000e+01, float -6.200000e+01, float -5.800000e+01, float -5.200000e+01, float -5.000000e+01, float -5.000000e+01, float -5.200000e+01, float -5.400000e+01, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.180000e+02, float -1.080000e+02, float -8.400000e+01, float -5.300000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.500000e+01, float -4.700000e+01, float -4.500000e+01, float -4.000000e+01, float -4.000000e+01, float -4.000000e+01, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.180000e+02, float -1.000000e+02, float -7.300000e+01, float -4.300000e+01, float -3.700000e+01, float -4.200000e+01, float -4.300000e+01, float -5.300000e+01, float -3.800000e+01, float -3.700000e+01, float -3.500000e+01, float -3.500000e+01, float -3.800000e+01, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02]], [6 x [56 x float]] [[56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.100000e+02, float -1.000000e+02, float -9.100000e+01, float -8.400000e+01, float -7.400000e+01, float -8.000000e+01, float -8.000000e+01, float -8.000000e+01, float -8.000000e+01, float -8.000000e+01, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.100000e+02, float -1.000000e+02, float -9.100000e+01, float -8.400000e+01, float -7.400000e+01, float -6.800000e+01, float -6.800000e+01, float -6.800000e+01, float -6.800000e+01, float -6.800000e+01, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.100000e+02, float -1.000000e+02, float -8.600000e+01, float -7.800000e+01, float -7.000000e+01, float -6.000000e+01, float -4.500000e+01, float -3.000000e+01, float -2.100000e+01, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.100000e+02, float -1.000000e+02, float -8.700000e+01, float -7.800000e+01, float -6.700000e+01, float -4.800000e+01, float -3.800000e+01, float -2.900000e+01, float -2.100000e+01, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.100000e+02, float -1.000000e+02, float -8.600000e+01, float -6.900000e+01, float -5.600000e+01, float -4.500000e+01, float -3.500000e+01, float -3.300000e+01, float -2.900000e+01, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02], [56 x float] [float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -1.100000e+02, float -1.000000e+02, float -8.300000e+01, float -7.100000e+01, float -4.800000e+01, float -2.700000e+01, float -3.800000e+01, float -3.700000e+01, float -3.400000e+01, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02, float -9.990000e+02]]], align 16
@hypot_lookup = internal unnamed_addr constant [32 x float] [float 0xBF8458CD20000000, float 0xBF87079E60000000, float 0xBF8A1016C0000000, float 0xBF8D7C2CA0000000, float 0xBF90AC3A80000000, float 0xBF92D948E0000000, float 0xBF954C9860000000, float 0xBF980ECFA0000000, float 0xBF9B289540000000, float 0xBF9EA42280000000, float 0xBFA145F9E0000000, float 0xBFA3760C00000000, float 0xBFA5E82D80000000, float 0xBFA8A350E0000000, float 0xBFABAE46C0000000, float 0xBFAF104500000000, float 0xBFB16872C0000000, float 0xBFB37BE120000000, float 0xBFB5C61960000000, float 0xBFB84AD7A0000000, float 0xBFBB0D8440000000, float 0xBFBE1144C0000000, float 0xBFC0AC5C20000000, float 0xBFC272FBA0000000, float 0xBFC45D28E0000000, float 0xBFC66B2F20000000, float 0xBFC89CD3E0000000, float 0xBFCAF15620000000, float 0xBFCD676640000000, float 0xBFCFFD2640000000, float 0xBFD15814A0000000, float 0xBFD2BEC240000000], align 16
@drfti1.ntryh = internal unnamed_addr constant [4 x i32] [i32 4, i32 2, i32 3, i32 5], align 16
@vwin64 = internal global [32 x float] [float 0x3F4F000300000000, float 0x3F8168C980000000, float 0x3F98199E40000000, float 0x3FA77F8E80000000, float 0x3FB3492AC0000000, float 0x3FBC8BBE20000000, float 0x3FC3B47F00000000, float 0x3FC9DCF680000000, float 0x3FD053A6C0000000, float 0x3FD3FB89C0000000, float 0x3FD7D5D820000000, float 0x3FDBD08820000000, float 0x3FDFD855A0000000, float 0x3FE1ECB740000000, float 0x3FE3E01F00000000, float 0x3FE5BD23A0000000, float 0x3FE77B7F20000000, float 0x3FE91445A0000000, float 0x3FEA823400000000, float 0x3FEBC1E4C0000000, float 0x3FECD1E5C0000000, float 0x3FEDB2AE00000000, float 0x3FEE6675C0000000, float 0x3FEEF0F3E0000000, float 0x3FEF570840000000, float 0x3FEF9E5880000000, float 0x3FEFCCE960000000, float 0x3FEFE8B880000000, float 0x3FEFF75E20000000, float 0x3FEFFDBB20000000, float 0x3FEFFFB440000000, float 0x3FEFFFFF00000000], align 16
@vwin128 = internal global [64 x float] [float 0x3F2F013500000000, float 0x3F616EE220000000, float 0x3F783170E0000000, float 0x3F87AE2940000000, float 0x3F938A5280000000, float 0x3F9D210BC0000000, float 0x3FA44A6540000000, float 0x3FAAEEC940000000, float 0x3FB13C7140000000, float 0x3FB57180E0000000, float 0x3FBA134440000000, float 0x3FBF1DED80000000, float 0x3FC2469480000000, float 0x3FC52E0C80000000, float 0x3FC842A820000000, float 0x3FCB816860000000, float 0x3FCEE705E0000000, float 0x3FD137F8A0000000, float 0x3FD30C2B80000000, float 0x3FD4EE10E0000000, float 0x3FD6DB8080000000, float 0x3FD8D23780000000, float 0x3FDACFDCE0000000, float 0x3FDCD20600000000, float 0x3FDED63C60000000, float 0x3FE06D01A0000000, float 0x3FE16D6F20000000, float 0x3FE26B2C40000000, float 0x3FE3650540000000, float 0x3FE459D120000000, float 0x3FE54874C0000000, float 0x3FE62FE620000000, float 0x3FE70F2FC0000000, float 0x3FE7E57320000000, float 0x3FE8B1EB80000000, float 0x3FE973EFE0000000, float 0x3FEA2AF4A0000000, float 0x3FEAD68D00000000, float 0x3FEB766B20000000, float 0x3FEC0A6100000000, float 0x3FEC925F80000000, float 0x3FED0E7620000000, float 0x3FED7ED140000000, float 0x3FEDE3B8C0000000, float 0x3FEE3D8DA0000000, float 0x3FEE8CC7C0000000, float 0x3FEED1F340000000, float 0x3FEF0DAD00000000, float 0x3FEF40A060000000, float 0x3FEF6B8340000000, float 0x3FEF8F1320000000, float 0x3FEFAC11E0000000, float 0x3FEFC34220000000, float 0x3FEFD564E0000000, float 0x3FEFE33600000000, float 0x3FEFED6940000000, float 0x3FEFF4A880000000, float 0x3FEFF99080000000, float 0x3FEFFCAF60000000, float 0x3FEFFE8220000000, float 0x3FEFFF73C0000000, float 0x3FEFFFDB60000000, float 0x3FEFFFFB40000000, float 1.000000e+00], align 16
@vwin256 = internal global [128 x float] [float 0x3F0F0180A0000000, float 0x3F41706640000000, float 0x3F58374EC0000000, float 0x3F67B97C40000000, float 0x3F7399E4C0000000, float 0x3F7D441160000000, float 0x3F846CDEA0000000, float 0x3F8B2C87E0000000, float 0x3F916FF700000000, float 0x3F95C2E760000000, float 0x3F9A8E5DE0000000, float 0x3F9FD18C00000000, float 0x3FA2C5C5A0000000, float 0x3FA5DDAE40000000, float 0x3FA92FF360000000, float 0x3FACBBFB80000000, float 0x3FB0408F60000000, float 0x3FB23F53E0000000, float 0x3FB459E8E0000000, float 0x3FB68FE4C0000000, float 0x3FB8E0D5A0000000, float 0x3FBB4C4200000000, float 0x3FBDD1A7E0000000, float 0x3FC0383E80000000, float 0x3FC1941720000000, float 0x3FC2FC1000000000, float 0x3FC46FD6C0000000, float 0x3FC5EF14C0000000, float 0x3FC7796E80000000, float 0x3FC90E8440000000, float 0x3FCAADF1A0000000, float 0x3FCC574D60000000, float 0x3FCE0A2A60000000, float 0x3FCFC61680000000, float 0x3FD0C54DC0000000, float 0x3FD1AB9F80000000, float 0x3FD295C120000000, float 0x3FD3837140000000, float 0x3FD4746C80000000, float 0x3FD5686E00000000, float 0x3FD65F2EE0000000, float 0x3FD75866C0000000, float 0x3FD853CBA0000000, float 0x3FD9511260000000, float 0x3FDA4FEEC0000000, float 0x3FDB501340000000, float 0x3FDC5131C0000000, float 0x3FDD52FB20000000, float 0x3FDE552040000000, float 0x3FDF575160000000, float 0x3FE02C9F60000000, float 0x3FE0AD4C60000000, float 0x3FE12D8820000000, float 0x3FE1AD2B20000000, float 0x3FE22C0E80000000, float 0x3FE2AA0BC0000000, float 0x3FE326FCE0000000, float 0x3FE3A2BCE0000000, float 0x3FE41D2740000000, float 0x3FE49618A0000000, float 0x3FE50D6E80000000, float 0x3FE58307C0000000, float 0x3FE5F6C460000000, float 0x3FE6688560000000, float 0x3FE6D82DA0000000, float 0x3FE745A140000000, float 0x3FE7B0C600000000, float 0x3FE8198340000000, float 0x3FE87FC220000000, float 0x3FE8E36D60000000, float 0x3FE94471C0000000, float 0x3FE9A2BDC0000000, float 0x3FE9FE41E0000000, float 0x3FEA56F080000000, float 0x3FEAACBDE0000000, float 0x3FEAFFA060000000, float 0x3FEB4F9020000000, float 0x3FEB9C8780000000, float 0x3FEBE682A0000000, float 0x3FEC2D7FC0000000, float 0x3FEC717EC0000000, float 0x3FECB281C0000000, float 0x3FECF08C40000000, float 0x3FED2BA420000000, float 0x3FED63D0A0000000, float 0x3FED991AA0000000, float 0x3FEDCB8CE0000000, float 0x3FEDFB3360000000, float 0x3FEE281C00000000, float 0x3FEE525580000000, float 0x3FEE79F060000000, float 0x3FEE9EFE20000000, float 0x3FEEC19160000000, float 0x3FEEE1BDE0000000, float 0x3FEEFF9820000000, float 0x3FEF1B3580000000, float 0x3FEF34AC60000000, float 0x3FEF4C1360000000, float 0x3FEF6181E0000000, float 0x3FEF750F80000000, float 0x3FEF86D460000000, float 0x3FEF96E8E0000000, float 0x3FEFA56520000000, float 0x3FEFB261A0000000, float 0x3FEFBDF6E0000000, float 0x3FEFC83CA0000000, float 0x3FEFD14B20000000, float 0x3FEFD939A0000000, float 0x3FEFE01F60000000, float 0x3FEFE612C0000000, float 0x3FEFEB29C0000000, float 0x3FEFEF79A0000000, float 0x3FEFF316C0000000, float 0x3FEFF614E0000000, float 0x3FEFF886A0000000, float 0x3FEFFA7DE0000000, float 0x3FEFFC0B60000000, float 0x3FEFFD3EA0000000, float 0x3FEFFE2660000000, float 0x3FEFFECFE0000000, float 0x3FEFFF4760000000, float 0x3FEFFF97C0000000, float 0x3FEFFFCA80000000, float 0x3FEFFFE800000000, float 0x3FEFFFF740000000, float 0x3FEFFFFDC0000000, float 0x3FEFFFFFC0000000, float 1.000000e+00], align 16
@vwin512 = internal global [256 x float] [float 0x3EEF019520000000, float 0x3F2170C6C0000000, float 0x3F3838C4C0000000, float 0x3F47BC4BC0000000, float 0x3F539DBD40000000, float 0x3F5D4CAAA0000000, float 0x3F64754700000000, float 0x3F6B3B79E0000000, float 0x3F717C5520000000, float 0x3F75D64540000000, float 0x3F7AAB61A0000000, float 0x3F7FFB7980000000, float 0x3F82E32B60000000, float 0x3F8605DF40000000, float 0x3F8965B840000000, float 0x3F8D029380000000, float 0x3F906E25C0000000, float 0x3F92795C20000000, float 0x3F94A2D720000000, float 0x3F96EA8020000000, float 0x3F99503EA0000000, float 0x3F9BD3F8C0000000, float 0x3F9E759360000000, float 0x3FA09A78E0000000, float 0x3FA208FAA0000000, float 0x3FA3863F40000000, float 0x3FA51235C0000000, float 0x3FA6ACCCA0000000, float 0x3FA855F1A0000000, float 0x3FAA0D9180000000, float 0x3FABD39820000000, float 0x3FADA7F0A0000000, float 0x3FAF8A8520000000, float 0x3FB0BD9F80000000, float 0x3FB1BD0340000000, float 0x3FB2C361A0000000, float 0x3FB3D0ADC0000000, float 0x3FB4E4DA80000000, float 0x3FB5FFDA40000000, float 0x3FB7219EA0000000, float 0x3FB84A1900000000, float 0x3FB9793A20000000, float 0x3FBAAEF240000000, float 0x3FBBEB3160000000, float 0x3FBD2DE660000000, float 0x3FBE770040000000, float 0x3FBFC66D20000000, float 0x3FC08E0D40000000, float 0x3FC13BFAC0000000, float 0x3FC1ECF560000000, float 0x3FC2A0F320000000, float 0x3FC357E9A0000000, float 0x3FC411CE80000000, float 0x3FC4CE96A0000000, float 0x3FC58E3700000000, float 0x3FC650A440000000, float 0x3FC715D2A0000000, float 0x3FC7DDB640000000, float 0x3FC8A842A0000000, float 0x3FC9756B80000000, float 0x3FCA4523C0000000, float 0x3FCB175E60000000, float 0x3FCBEC0E00000000, float 0x3FCCC32500000000, float 0x3FCD9C9540000000, float 0x3FCE785080000000, float 0x3FCF564880000000, float 0x3FD01B3720000000, float 0x3FD08C5960000000, float 0x3FD0FE8340000000, float 0x3FD171AD20000000, float 0x3FD1E5CF00000000, float 0x3FD25AE0C0000000, float 0x3FD2D0DA60000000, float 0x3FD347B380000000, float 0x3FD3BF63A0000000, float 0x3FD437E260000000, float 0x3FD4B12720000000, float 0x3FD52B28E0000000, float 0x3FD5A5DF20000000, float 0x3FD62140A0000000, float 0x3FD69D4480000000, float 0x3FD719E1A0000000, float 0x3FD7970EA0000000, float 0x3FD814C240000000, float 0x3FD892F320000000, float 0x3FD91197C0000000, float 0x3FD990A680000000, float 0x3FDA1015E0000000, float 0x3FDA8FDC20000000, float 0x3FDB0FEFA0000000, float 0x3FDB904680000000, float 0x3FDC10D700000000, float 0x3FDC919720000000, float 0x3FDD127D20000000, float 0x3FDD937F00000000, float 0x3FDE1492C0000000, float 0x3FDE95AEA0000000, float 0x3FDF16C860000000, float 0x3FDF97D640000000, float 0x3FE00C6720000000, float 0x3FE04CD320000000, float 0x3FE08D2A40000000, float 0x3FE0CD6780000000, float 0x3FE10D8600000000, float 0x3FE14D80C0000000, float 0x3FE18D52E0000000, float 0x3FE1CCF780000000, float 0x3FE20C69C0000000, float 0x3FE24BA4E0000000, float 0x3FE28AA420000000, float 0x3FE2C962A0000000, float 0x3FE307DBC0000000, float 0x3FE3460AE0000000, float 0x3FE383EB80000000, float 0x3FE3C178E0000000, float 0x3FE3FEAEA0000000, float 0x3FE43B8840000000, float 0x3FE4780180000000, float 0x3FE4B41600000000, float 0x3FE4EFC180000000, float 0x3FE52AFFC0000000, float 0x3FE565CD00000000, float 0x3FE5A024E0000000, float 0x3FE5DA03A0000000, float 0x3FE6136560000000, float 0x3FE64C4660000000, float 0x3FE684A2E0000000, float 0x3FE6BC7780000000, float 0x3FE6F3C080000000, float 0x3FE72A7AC0000000, float 0x3FE760A2E0000000, float 0x3FE79635A0000000, float 0x3FE7CB3000000000, float 0x3FE7FF8F00000000, float 0x3FE8334FC0000000, float 0x3FE8666F80000000, float 0x3FE898EBA0000000, float 0x3FE8CAC180000000, float 0x3FE8FBEEE0000000, float 0x3FE92C7140000000, float 0x3FE95C46C0000000, float 0x3FE98B6D00000000, float 0x3FE9B9E220000000, float 0x3FE9E7A460000000, float 0x3FEA14B220000000, float 0x3FEA410980000000, float 0x3FEA6CA960000000, float 0x3FEA979040000000, float 0x3FEAC1BCE0000000, float 0x3FEAEB2E40000000, float 0x3FEB13E340000000, float 0x3FEB3BDB40000000, float 0x3FEB631580000000, float 0x3FEB899140000000, float 0x3FEBAF4E20000000, float 0x3FEBD44BA0000000, float 0x3FEBF889C0000000, float 0x3FEC1C0860000000, float 0x3FEC3EC740000000, float 0x3FEC60C6C0000000, float 0x3FEC820700000000, float 0x3FECA28860000000, float 0x3FECC24B80000000, float 0x3FECE150A0000000, float 0x3FECFF98C0000000, float 0x3FED1D24A0000000, float 0x3FED39F500000000, float 0x3FED560B20000000, float 0x3FED716800000000, float 0x3FED8C0CC0000000, float 0x3FEDA5FB00000000, float 0x3FEDBF33E0000000, float 0x3FEDD7B920000000, float 0x3FEDEF8C20000000, float 0x3FEE06AEC0000000, float 0x3FEE1D22E0000000, float 0x3FEE32EA20000000, float 0x3FEE4806A0000000, float 0x3FEE5C7A80000000, float 0x3FEE7047A0000000, float 0x3FEE837060000000, float 0x3FEE95F700000000, float 0x3FEEA7DDC0000000, float 0x3FEEB92700000000, float 0x3FEEC9D560000000, float 0x3FEED9EB40000000, float 0x3FEEE96B40000000, float 0x3FEEF85800000000, float 0x3FEF06B440000000, float 0x3FEF1482A0000000, float 0x3FEF21C600000000, float 0x3FEF2E8100000000, float 0x3FEF3AB6C0000000, float 0x3FEF4669E0000000, float 0x3FEF519D60000000, float 0x3FEF5C5440000000, float 0x3FEF669160000000, float 0x3FEF7057E0000000, float 0x3FEF79AAA0000000, float 0x3FEF828CC0000000, float 0x3FEF8B0120000000, float 0x3FEF930B00000000, float 0x3FEF9AAD40000000, float 0x3FEFA1EB00000000, float 0x3FEFA8C740000000, float 0x3FEFAF4520000000, float 0x3FEFB567C0000000, float 0x3FEFBB31E0000000, float 0x3FEFC0A6C0000000, float 0x3FEFC5C960000000, float 0x3FEFCA9C80000000, float 0x3FEFCF2360000000, float 0x3FEFD360E0000000, float 0x3FEFD757C0000000, float 0x3FEFDB0B00000000, float 0x3FEFDE7D80000000, float 0x3FEFE1B200000000, float 0x3FEFE4AB60000000, float 0x3FEFE76C60000000, float 0x3FEFE9F780000000, float 0x3FEFEC4FA0000000, float 0x3FEFEE7720000000, float 0x3FEFF070E0000000, float 0x3FEFF23F20000000, float 0x3FEFF3E480000000, float 0x3FEFF56340000000, float 0x3FEFF6BDC0000000, float 0x3FEFF7F660000000, float 0x3FEFF90F40000000, float 0x3FEFFA0AA0000000, float 0x3FEFFAEA80000000, float 0x3FEFFBB100000000, float 0x3FEFFC6000000000, float 0x3FEFFCF980000000, float 0x3FEFFD7F20000000, float 0x3FEFFDF2C0000000, float 0x3FEFFE5620000000, float 0x3FEFFEAAA0000000, float 0x3FEFFEF200000000, float 0x3FEFFF2DA0000000, float 0x3FEFFF5EC0000000, float 0x3FEFFF86C0000000, float 0x3FEFFFA6E0000000, float 0x3FEFFFC020000000, float 0x3FEFFFD380000000, float 0x3FEFFFE240000000, float 0x3FEFFFECE0000000, float 0x3FEFFFF460000000, float 0x3FEFFFF980000000, float 0x3FEFFFFCA0000000, float 0x3FEFFFFE80000000, float 0x3FEFFFFF80000000, float 0x3FEFFFFFE0000000, float 1.000000e+00, float 1.000000e+00], align 16
@vwin1024 = internal global [512 x float] [float 0x3ECF018780000000, float 0x3F0170DFA0000000, float 0x3F18392260000000, float 0x3F27BCFF00000000, float 0x3F339EB280000000, float 0x3F3D4ECE60000000, float 0x3F44775DC0000000, float 0x3F4B3F2E20000000, float 0x3F517F6400000000, float 0x3F55DB0C00000000, float 0x3F5AB28440000000, float 0x3F6002E060000000, float 0x3F62EA5A20000000, float 0x3F660FA820000000, float 0x3F6972C2A0000000, float 0x3F6D13A100000000, float 0x3F70791D20000000, float 0x3F72874280000000, float 0x3F74B43B40000000, float 0x3F77000200000000, float 0x3F796A9100000000, float 0x3F7BF3E200000000, float 0x3F7E9BEEC0000000, float 0x3F80B15840000000, float 0x3F82241000000000, float 0x3F83A61B20000000, float 0x3F85377580000000, float 0x3F86D81B60000000, float 0x3F88880860000000, float 0x3F8A473840000000, float 0x3F8C15A680000000, float 0x3F8DF34E60000000, float 0x3F8FE02B00000000, float 0x3F90EE1BC0000000, float 0x3F91F3B740000000, float 0x3F9300E540000000, float 0x3F9415A320000000, float 0x3F9531EE00000000, float 0x3F9655C2E0000000, float 0x3F97811EC0000000, float 0x3F98B3FE60000000, float 0x3F99EE5EA0000000, float 0x3F9B303C20000000, float 0x3F9C799380000000, float 0x3F9DCA6140000000, float 0x3F9F22A1C0000000, float 0x3FA04128C0000000, float 0x3FA0F4B620000000, float 0x3FA1ABF760000000, float 0x3FA266EA20000000, float 0x3FA3258CC0000000, float 0x3FA3E7DCC0000000, float 0x3FA4ADD860000000, float 0x3FA5777D20000000, float 0x3FA644C8E0000000, float 0x3FA715B940000000, float 0x3FA7EA4C20000000, float 0x3FA8C27EE0000000, float 0x3FA99E4F20000000, float 0x3FAA7DBA40000000, float 0x3FAB60BE00000000, float 0x3FAC475760000000, float 0x3FAD318400000000, float 0x3FAE1F4100000000, float 0x3FAF108BA0000000, float 0x3FB002B080000000, float 0x3FB07EDF20000000, float 0x3FB0FCD040000000, float 0x3FB17C8260000000, float 0x3FB1FDF3E0000000, float 0x3FB2812340000000, float 0x3FB3060EE0000000, float 0x3FB38CB520000000, float 0x3FB4151460000000, float 0x3FB49F2B00000000, float 0x3FB52AF740000000, float 0x3FB5B87740000000, float 0x3FB647A980000000, float 0x3FB6D88BE0000000, float 0x3FB76B1CC0000000, float 0x3FB7FF5A20000000, float 0x3FB8954240000000, float 0x3FB92CD300000000, float 0x3FB9C60AA0000000, float 0x3FBA60E700000000, float 0x3FBAFD6600000000, float 0x3FBB9B85E0000000, float 0x3FBC3B4440000000, float 0x3FBCDC9F00000000, float 0x3FBD7F9420000000, float 0x3FBE242160000000, float 0x3FBECA4460000000, float 0x3FBF71FB20000000, float 0x3FC00DA1A0000000, float 0x3FC0630D20000000, float 0x3FC0B93EE0000000, float 0x3FC11035C0000000, float 0x3FC167F0A0000000, float 0x3FC1C06E20000000, float 0x3FC219AD00000000, float 0x3FC273AC00000000, float 0x3FC2CE69E0000000, float 0x3FC329E540000000, float 0x3FC3861D00000000, float 0x3FC3E30F80000000, float 0x3FC440BBA0000000, float 0x3FC49F1FE0000000, float 0x3FC4FE3AE0000000, float 0x3FC55E0B40000000, float 0x3FC5BE8FA0000000, float 0x3FC61FC660000000, float 0x3FC681AE40000000, float 0x3FC6E445A0000000, float 0x3FC7478B00000000, float 0x3FC7AB7D00000000, float 0x3FC8101A00000000, float 0x3FC8756060000000, float 0x3FC8DB4EC0000000, float 0x3FC941E340000000, float 0x3FC9A91CA0000000, float 0x3FCA10F8E0000000, float 0x3FCA7976A0000000, float 0x3FCAE29440000000, float 0x3FCB4C4FE0000000, float 0x3FCBB6A7E0000000, float 0x3FCC219AA0000000, float 0x3FCC8D2640000000, float 0x3FCCF94920000000, float 0x3FCD660180000000, float 0x3FCDD34D80000000, float 0x3FCE412B80000000, float 0x3FCEAF9960000000, float 0x3FCF1E95A0000000, float 0x3FCF8E1E20000000, float 0x3FCFFE3140000000, float 0x3FD0376680000000, float 0x3FD06FF7C0000000, float 0x3FD0A8CB60000000, float 0x3FD0E1E080000000, float 0x3FD11B3600000000, float 0x3FD154CB20000000, float 0x3FD18E9EA0000000, float 0x3FD1C8AFC0000000, float 0x3FD202FD40000000, float 0x3FD23D8640000000, float 0x3FD27849C0000000, float 0x3FD2B346C0000000, float 0x3FD2EE7C00000000, float 0x3FD329E8C0000000, float 0x3FD3658BA0000000, float 0x3FD3A163E0000000, float 0x3FD3DD7040000000, float 0x3FD419AFE0000000, float 0x3FD4562160000000, float 0x3FD492C3E0000000, float 0x3FD4CF9620000000, float 0x3FD50C9740000000, float 0x3FD549C5E0000000, float 0x3FD5872120000000, float 0x3FD5C4A7C0000000, float 0x3FD60258C0000000, float 0x3FD64032C0000000, float 0x3FD67E34E0000000, float 0x3FD6BC5DC0000000, float 0x3FD6FAAC80000000, float 0x3FD7391FC0000000, float 0x3FD777B660000000, float 0x3FD7B66F40000000, float 0x3FD7F54940000000, float 0x3FD8344320000000, float 0x3FD8735BA0000000, float 0x3FD8B291C0000000, float 0x3FD8F1E440000000, float 0x3FD93151C0000000, float 0x3FD970D960000000, float 0x3FD9B079A0000000, float 0x3FD9F03180000000, float 0x3FDA2FFFA0000000, float 0x3FDA6FE300000000, float 0x3FDAAFDA40000000, float 0x3FDAEFE420000000, float 0x3FDB2FFF80000000, float 0x3FDB702B00000000, float 0x3FDBB065A0000000, float 0x3FDBF0AE00000000, float 0x3FDC3102E0000000, float 0x3FDC716320000000, float 0x3FDCB1CD80000000, float 0x3FDCF240A0000000, float 0x3FDD32BB60000000, float 0x3FDD733C80000000, float 0x3FDDB3C2A0000000, float 0x3FDDF44CC0000000, float 0x3FDE34D960000000, float 0x3FDE756760000000, float 0x3FDEB5F5A0000000, float 0x3FDEF682A0000000, float 0x3FDF370D60000000, float 0x3FDF779480000000, float 0x3FDFB816A0000000, float 0x3FDFF892C0000000, float 0x3FE01C83C0000000, float 0x3FE03CB9E0000000, float 0x3FE05CEB00000000, float 0x3FE07D16C0000000, float 0x3FE09D3C40000000, float 0x3FE0BD5AE0000000, float 0x3FE0DD7240000000, float 0x3FE0FD8180000000, float 0x3FE11D8840000000, float 0x3FE13D85A0000000, float 0x3FE15D7940000000, float 0x3FE17D6260000000, float 0x3FE19D4080000000, float 0x3FE1BD12E0000000, float 0x3FE1DCD900000000, float 0x3FE1FC9220000000, float 0x3FE21C3DE0000000, float 0x3FE23BDB80000000, float 0x3FE25B6A80000000, float 0x3FE27AEA20000000, float 0x3FE29A5A00000000, float 0x3FE2B9B940000000, float 0x3FE2D907A0000000, float 0x3FE2F84440000000, float 0x3FE3176EA0000000, float 0x3FE3368640000000, float 0x3FE3558AA0000000, float 0x3FE3747AE0000000, float 0x3FE39356C0000000, float 0x3FE3B21D80000000, float 0x3FE3D0CEA0000000, float 0x3FE3EF69A0000000, float 0x3FE40DEDC0000000, float 0x3FE42C5AC0000000, float 0x3FE44AAFC0000000, float 0x3FE468EC80000000, float 0x3FE4871040000000, float 0x3FE4A51A80000000, float 0x3FE4C30AE0000000, float 0x3FE4E0E0A0000000, float 0x3FE4FE9B60000000, float 0x3FE51C3AA0000000, float 0x3FE539BDE0000000, float 0x3FE5572480000000, float 0x3FE5746E20000000, float 0x3FE5919A20000000, float 0x3FE5AEA800000000, float 0x3FE5CB9780000000, float 0x3FE5E867E0000000, float 0x3FE60518E0000000, float 0x3FE621A9C0000000, float 0x3FE63E1A60000000, float 0x3FE65A6A00000000, float 0x3FE6769860000000, float 0x3FE692A4E0000000, float 0x3FE6AE8F40000000, float 0x3FE6CA5700000000, float 0x3FE6E5FB80000000, float 0x3FE7017CA0000000, float 0x3FE71CD9C0000000, float 0x3FE73812A0000000, float 0x3FE75326C0000000, float 0x3FE76E15C0000000, float 0x3FE788DF20000000, float 0x3FE7A382A0000000, float 0x3FE7BDFFE0000000, float 0x3FE7D85660000000, float 0x3FE7F28600000000, float 0x3FE80C8E20000000, float 0x3FE8266E80000000, float 0x3FE84026E0000000, float 0x3FE859B6C0000000, float 0x3FE8731DE0000000, float 0x3FE88C5C00000000, float 0x3FE8A570C0000000, float 0x3FE8BE5BC0000000, float 0x3FE8D71CC0000000, float 0x3FE8EFB380000000, float 0x3FE9081FA0000000, float 0x3FE92060E0000000, float 0x3FE9387700000000, float 0x3FE95061C0000000, float 0x3FE96820C0000000, float 0x3FE97FB3E0000000, float 0x3FE9971AE0000000, float 0x3FE9AE5580000000, float 0x3FE9C56380000000, float 0x3FE9DC44C0000000, float 0x3FE9F2F8E0000000, float 0x3FEA097FA0000000, float 0x3FEA1FD920000000, float 0x3FEA3604E0000000, float 0x3FEA4C02C0000000, float 0x3FEA61D2C0000000, float 0x3FEA777480000000, float 0x3FEA8CE7E0000000, float 0x3FEAA22CE0000000, float 0x3FEAB74340000000, float 0x3FEACC2AC0000000, float 0x3FEAE0E380000000, float 0x3FEAF56D20000000, float 0x3FEB09C7C0000000, float 0x3FEB1DF300000000, float 0x3FEB31EF00000000, float 0x3FEB45BBA0000000, float 0x3FEB5958C0000000, float 0x3FEB6CC640000000, float 0x3FEB800420000000, float 0x3FEB931260000000, float 0x3FEBA5F0C0000000, float 0x3FEBB89F60000000, float 0x3FEBCB1E40000000, float 0x3FEBDD6D20000000, float 0x3FEBEF8C40000000, float 0x3FEC017B60000000, float 0x3FEC133AA0000000, float 0x3FEC24CA00000000, float 0x3FEC362980000000, float 0x3FEC475920000000, float 0x3FEC5858E0000000, float 0x3FEC6928C0000000, float 0x3FEC79C8E0000000, float 0x3FEC8A3940000000, float 0x3FEC9A7A00000000, float 0x3FECAA8B00000000, float 0x3FECBA6C80000000, float 0x3FECCA1E80000000, float 0x3FECD9A120000000, float 0x3FECE8F460000000, float 0x3FECF81860000000, float 0x3FED070D60000000, float 0x3FED15D340000000, float 0x3FED246A40000000, float 0x3FED32D260000000, float 0x3FED410C00000000, float 0x3FED4F1700000000, float 0x3FED5CF3A0000000, float 0x3FED6AA200000000, float 0x3FED782260000000, float 0x3FED8574C0000000, float 0x3FED929960000000, float 0x3FED9F9080000000, float 0x3FEDAC5A20000000, float 0x3FEDB8F680000000, float 0x3FEDC56600000000, float 0x3FEDD1A880000000, float 0x3FEDDDBE80000000, float 0x3FEDE9A800000000, float 0x3FEDF56540000000, float 0x3FEE00F6A0000000, float 0x3FEE0C5C20000000, float 0x3FEE179620000000, float 0x3FEE22A4C0000000, float 0x3FEE2D8860000000, float 0x3FEE384140000000, float 0x3FEE42CF60000000, float 0x3FEE4D3360000000, float 0x3FEE576D40000000, float 0x3FEE617D40000000, float 0x3FEE6B63E0000000, float 0x3FEE752120000000, float 0x3FEE7EB580000000, float 0x3FEE882120000000, float 0x3FEE916460000000, float 0x3FEE9A7F80000000, float 0x3FEEA372E0000000, float 0x3FEEAC3EA0000000, float 0x3FEEB4E340000000, float 0x3FEEBD6100000000, float 0x3FEEC5B820000000, float 0x3FEECDE900000000, float 0x3FEED5F3E0000000, float 0x3FEEDDD940000000, float 0x3FEEE59920000000, float 0x3FEEED3420000000, float 0x3FEEF4AA80000000, float 0x3FEEFBFC80000000, float 0x3FEF032AA0000000, float 0x3FEF0A3500000000, float 0x3FEF111C40000000, float 0x3FEF17E060000000, float 0x3FEF1E8200000000, float 0x3FEF250160000000, float 0x3FEF2B5EE0000000, float 0x3FEF319AE0000000, float 0x3FEF37B5A0000000, float 0x3FEF3DAFA0000000, float 0x3FEF438920000000, float 0x3FEF494280000000, float 0x3FEF4EDC40000000, float 0x3FEF5456A0000000, float 0x3FEF59B200000000, float 0x3FEF5EEEC0000000, float 0x3FEF640D60000000, float 0x3FEF690E00000000, float 0x3FEF6DF140000000, float 0x3FEF72B740000000, float 0x3FEF7760A0000000, float 0x3FEF7BEDA0000000, float 0x3FEF805EA0000000, float 0x3FEF84B400000000, float 0x3FEF88EE20000000, float 0x3FEF8D0D80000000, float 0x3FEF911260000000, float 0x3FEF94FD20000000, float 0x3FEF98CE40000000, float 0x3FEF9C8600000000, float 0x3FEFA024C0000000, float 0x3FEFA3AB20000000, float 0x3FEFA71920000000, float 0x3FEFAA6F80000000, float 0x3FEFADAE60000000, float 0x3FEFB0D640000000, float 0x3FEFB3E780000000, float 0x3FEFB6E260000000, float 0x3FEFB9C780000000, float 0x3FEFBC9700000000, float 0x3FEFBF5160000000, float 0x3FEFC1F700000000, float 0x3FEFC48840000000, float 0x3FEFC70580000000, float 0x3FEFC96F00000000, float 0x3FEFCBC560000000, float 0x3FEFCE08C0000000, float 0x3FEFD03980000000, float 0x3FEFD25840000000, float 0x3FEFD46520000000, float 0x3FEFD66080000000, float 0x3FEFD84AC0000000, float 0x3FEFDA2460000000, float 0x3FEFDBEDA0000000, float 0x3FEFDDA6E0000000, float 0x3FEFDF5060000000, float 0x3FEFE0EAA0000000, float 0x3FEFE275E0000000, float 0x3FEFE3F280000000, float 0x3FEFE560E0000000, float 0x3FEFE6C140000000, float 0x3FEFE81400000000, float 0x3FEFE959A0000000, float 0x3FEFEA9240000000, float 0x3FEFEBBE40000000, float 0x3FEFECDDE0000000, float 0x3FEFEDF1A0000000, float 0x3FEFEEF9C0000000, float 0x3FEFEFF6A0000000, float 0x3FEFF0E860000000, float 0x3FEFF1CF80000000, float 0x3FEFF2AC40000000, float 0x3FEFF37EE0000000, float 0x3FEFF447A0000000, float 0x3FEFF50700000000, float 0x3FEFF5BD20000000, float 0x3FEFF66A60000000, float 0x3FEFF70F00000000, float 0x3FEFF7AB40000000, float 0x3FEFF83F80000000, float 0x3FEFF8CBE0000000, float 0x3FEFF950C0000000, float 0x3FEFF9CE80000000, float 0x3FEFFA4520000000, float 0x3FEFFAB500000000, float 0x3FEFFB1E80000000, float 0x3FEFFB81A0000000, float 0x3FEFFBDEE0000000, float 0x3FEFFC3660000000, float 0x3FEFFC8860000000, float 0x3FEFFCD500000000, float 0x3FEFFD1CA0000000, float 0x3FEFFD5F80000000, float 0x3FEFFD9DA0000000, float 0x3FEFFDD780000000, float 0x3FEFFE0D20000000, float 0x3FEFFE3EC0000000, float 0x3FEFFE6CA0000000, float 0x3FEFFE96E0000000, float 0x3FEFFEBDC0000000, float 0x3FEFFEE160000000, float 0x3FEFFF0200000000, float 0x3FEFFF1FC0000000, float 0x3FEFFF3AC0000000, float 0x3FEFFF5360000000, float 0x3FEFFF6980000000, float 0x3FEFFF7D80000000, float 0x3FEFFF8F80000000, float 0x3FEFFF9F80000000, float 0x3FEFFFADC0000000, float 0x3FEFFFBA60000000, float 0x3FEFFFC580000000, float 0x3FEFFFCF20000000, float 0x3FEFFFD7A0000000, float 0x3FEFFFDEE0000000, float 0x3FEFFFE540000000, float 0x3FEFFFEA80000000, float 0x3FEFFFEF00000000, float 0x3FEFFFF2C0000000, float 0x3FEFFFF5E0000000, float 0x3FEFFFF860000000, float 0x3FEFFFFA60000000, float 0x3FEFFFFC00000000, float 0x3FEFFFFD40000000, float 0x3FEFFFFE20000000, float 0x3FEFFFFEC0000000, float 0x3FEFFFFF40000000, float 0x3FEFFFFFA0000000, float 0x3FEFFFFFC0000000, float 0x3FEFFFFFE0000000, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00], align 16
@vwin2048 = internal global [1024 x float] [float 0x3EAF01F560000000, float 0x3EE170E300000000, float 0x3EF8393C20000000, float 0x3F07BD2D60000000, float 0x3F139EF000000000, float 0x3F1D4F5760000000, float 0x3F2477E300000000, float 0x3F2B401AA0000000, float 0x3F31802700000000, float 0x3F35DC3CA0000000, float 0x3F3AB44B00000000, float 0x3F40042780000000, float 0x3F42EC2300000000, float 0x3F461215E0000000, float 0x3F4975FE60000000, float 0x3F4D17DA80000000, float 0x3F507BD3E0000000, float 0x3F528AB1E0000000, float 0x3F54B88600000000, float 0x3F57054EE0000000, float 0x3F59710B40000000, float 0x3F5BFBB980000000, float 0x3F5EA557E0000000, float 0x3F60B6F280000000, float 0x3F622AAF80000000, float 0x3F63ADE200000000, float 0x3F65408920000000, float 0x3F66E2A3E0000000, float 0x3F68943140000000, float 0x3F6A553020000000, float 0x3F6C259F80000000, float 0x3F6E057E20000000, float 0x3F6FF4CB00000000, float 0x3F70F9C260000000, float 0x3F7200D520000000, float 0x3F730F9D20000000, float 0x3F74261980000000, float 0x3F754449E0000000, float 0x3F766A2D40000000, float 0x3F7797C340000000, float 0x3F78CD0AC0000000, float 0x3F7A0A0340000000, float 0x3F7B4EABE0000000, float 0x3F7C9B03E0000000, float 0x3F7DEF0A60000000, float 0x3F7F4ABE80000000, float 0x3F80570FC0000000, float 0x3F810C9620000000, float 0x3F81C5F220000000, float 0x3F82832320000000, float 0x3F834428C0000000, float 0x3F84090260000000, float 0x3F84D1AFC0000000, float 0x3F859E3020000000, float 0x3F866E8320000000, float 0x3F8742A820000000, float 0x3F881A9EC0000000, float 0x3F88F66640000000, float 0x3F89D5FE60000000, float 0x3F8AB96640000000, float 0x3F8BA09D60000000, float 0x3F8C8BA340000000, float 0x3F8D7A7740000000, float 0x3F8E6D18C0000000, float 0x3F8F638740000000, float 0x3F902EE0E0000000, float 0x3F90ADE420000000, float 0x3F912ECCC0000000, float 0x3F91B19A80000000, float 0x3F92364D20000000, float 0x3F92BCE420000000, float 0x3F93455F60000000, float 0x3F93CFBE60000000, float 0x3F945C00C0000000, float 0x3F94EA2640000000, float 0x3F957A2E60000000, float 0x3F960C18E0000000, float 0x3F969FE560000000, float 0x3F97359340000000, float 0x3F97CD2260000000, float 0x3F98669240000000, float 0x3F9901E280000000, float 0x3F999F12A0000000, float 0x3F9A3E2260000000, float 0x3F9ADF1120000000, float 0x3F9B81DEA0000000, float 0x3F9C268A60000000, float 0x3F9CCD1400000000, float 0x3F9D757AE0000000, float 0x3F9E1FBEC0000000, float 0x3F9ECBDF20000000, float 0x3F9F79DB80000000, float 0x3FA014D9A0000000, float 0x3FA06DB320000000, float 0x3FA0C779E0000000, float 0x3FA1222DA0000000, float 0x3FA17DCE40000000, float 0x3FA1DA5B80000000, float 0x3FA237D4E0000000, float 0x3FA2963A60000000, float 0x3FA2F58BC0000000, float 0x3FA355C880000000, float 0x3FA3B6F0A0000000, float 0x3FA41903C0000000, float 0x3FA47C0180000000, float 0x3FA4DFE9C0000000, float 0x3FA544BC20000000, float 0x3FA5AA7880000000, float 0x3FA6111E60000000, float 0x3FA678ADA0000000, float 0x3FA6E125E0000000, float 0x3FA74A86E0000000, float 0x3FA7B4D040000000, float 0x3FA82001E0000000, float 0x3FA88C1B40000000, float 0x3FA8F91C40000000, float 0x3FA9670460000000, float 0x3FA9D5D380000000, float 0x3FAA458920000000, float 0x3FAAB62500000000, float 0x3FAB27A6E0000000, float 0x3FAB9A0E60000000, float 0x3FAC0D5B20000000, float 0x3FAC818CE0000000, float 0x3FACF6A320000000, float 0x3FAD6C9DC0000000, float 0x3FADE37C60000000, float 0x3FAE5B3E80000000, float 0x3FAED3E3C0000000, float 0x3FAF4D6C00000000, float 0x3FAFC7D6C0000000, float 0x3FB02191E0000000, float 0x3FB05FA920000000, float 0x3FB09E3140000000, float 0x3FB0DD29E0000000, float 0x3FB11C92C0000000, float 0x3FB15C6BC0000000, float 0x3FB19CB4E0000000, float 0x3FB1DD6DA0000000, float 0x3FB21E95E0000000, float 0x3FB2602DA0000000, float 0x3FB2A23480000000, float 0x3FB2E4AA60000000, float 0x3FB3278F00000000, float 0x3FB36AE220000000, float 0x3FB3AEA3C0000000, float 0x3FB3F2D360000000, float 0x3FB4377100000000, float 0x3FB47C7C40000000, float 0x3FB4C1F520000000, float 0x3FB507DB40000000, float 0x3FB54E2E80000000, float 0x3FB594EE80000000, float 0x3FB5DC1B40000000, float 0x3FB623B440000000, float 0x3FB66BB9A0000000, float 0x3FB6B42AE0000000, float 0x3FB6FD07C0000000, float 0x3FB7465040000000, float 0x3FB7900400000000, float 0x3FB7DA22C0000000, float 0x3FB824AC40000000, float 0x3FB86FA040000000, float 0x3FB8BAFEA0000000, float 0x3FB906C720000000, float 0x3FB952F960000000, float 0x3FB99F9520000000, float 0x3FB9EC9A60000000, float 0x3FBA3A0880000000, float 0x3FBA87DF80000000, float 0x3FBAD61F20000000, float 0x3FBB24C700000000, float 0x3FBB73D700000000, float 0x3FBBC34EA0000000, float 0x3FBC132DE0000000, float 0x3FBC637460000000, float 0x3FBCB421C0000000, float 0x3FBD0535E0000000, float 0x3FBD56B080000000, float 0x3FBDA89140000000, float 0x3FBDFAD7E0000000, float 0x3FBE4D8420000000, float 0x3FBEA095C0000000, float 0x3FBEF40C60000000, float 0x3FBF47E7C0000000, float 0x3FBF9C27A0000000, float 0x3FBFF0CBA0000000, float 0x3FC022E9C0000000, float 0x3FC04D9F80000000, float 0x3FC0788700000000, float 0x3FC0A39FE0000000, float 0x3FC0CEEA20000000, float 0x3FC0FA65A0000000, float 0x3FC1261220000000, float 0x3FC151EFA0000000, float 0x3FC17DFDC0000000, float 0x3FC1AA3C80000000, float 0x3FC1D6ABC0000000, float 0x3FC2034B20000000, float 0x3FC2301AC0000000, float 0x3FC25D1A40000000, float 0x3FC28A49A0000000, float 0x3FC2B7A8A0000000, float 0x3FC2E53700000000, float 0x3FC312F4C0000000, float 0x3FC340E1A0000000, float 0x3FC36EFD80000000, float 0x3FC39D4820000000, float 0x3FC3CBC160000000, float 0x3FC3FA6920000000, float 0x3FC4293F40000000, float 0x3FC4584380000000, float 0x3FC48775A0000000, float 0x3FC4B6D580000000, float 0x3FC4E66300000000, float 0x3FC5161E00000000, float 0x3FC5460640000000, float 0x3FC5761B80000000, float 0x3FC5A65DC0000000, float 0x3FC5D6CCA0000000, float 0x3FC6076800000000, float 0x3FC6382FC0000000, float 0x3FC66923C0000000, float 0x3FC69A43A0000000, float 0x3FC6CB8F60000000, float 0x3FC6FD06C0000000, float 0x3FC72EA980000000, float 0x3FC7607760000000, float 0x3FC7927060000000, float 0x3FC7C49440000000, float 0x3FC7F6E2C0000000, float 0x3FC8295BC0000000, float 0x3FC85BFF00000000, float 0x3FC88ECC40000000, float 0x3FC8C1C380000000, float 0x3FC8F4E460000000, float 0x3FC9282EA0000000, float 0x3FC95BA240000000, float 0x3FC98F3EE0000000, float 0x3FC9C30460000000, float 0x3FC9F6F2A0000000, float 0x3FCA2B0940000000, float 0x3FCA5F4840000000, float 0x3FCA93AF20000000, float 0x3FCAC83E00000000, float 0x3FCAFCF460000000, float 0x3FCB31D240000000, float 0x3FCB66D740000000, float 0x3FCB9C0340000000, float 0x3FCBD15620000000, float 0x3FCC06CF80000000, float 0x3FCC3C6F40000000, float 0x3FCC723520000000, float 0x3FCCA820E0000000, float 0x3FCCDE3260000000, float 0x3FCD146960000000, float 0x3FCD4AC580000000, float 0x3FCD8146C0000000, float 0x3FCDB7ECC0000000, float 0x3FCDEEB760000000, float 0x3FCE25A660000000, float 0x3FCE5CB980000000, float 0x3FCE93F080000000, float 0x3FCECB4B40000000, float 0x3FCF02C960000000, float 0x3FCF3A6AA0000000, float 0x3FCF722F00000000, float 0x3FCFAA1600000000, float 0x3FCFE21FA0000000, float 0x3FD00D25C0000000, float 0x3FD0294CA0000000, float 0x3FD0458480000000, float 0x3FD061CD20000000, float 0x3FD07E2680000000, float 0x3FD09A9040000000, float 0x3FD0B70A80000000, float 0x3FD0D39520000000, float 0x3FD0F02FE0000000, float 0x3FD10CDAA0000000, float 0x3FD1299560000000, float 0x3FD1465FE0000000, float 0x3FD1633A20000000, float 0x3FD1802400000000, float 0x3FD19D1D20000000, float 0x3FD1BA25C0000000, float 0x3FD1D73D80000000, float 0x3FD1F46440000000, float 0x3FD2119A00000000, float 0x3FD22EDE80000000, float 0x3FD24C31C0000000, float 0x3FD2699380000000, float 0x3FD28703A0000000, float 0x3FD2A48220000000, float 0x3FD2C20EC0000000, float 0x3FD2DFA980000000, float 0x3FD2FD5200000000, float 0x3FD31B0860000000, float 0x3FD338CC60000000, float 0x3FD3569DE0000000, float 0x3FD3747CC0000000, float 0x3FD39268E0000000, float 0x3FD3B06220000000, float 0x3FD3CE6860000000, float 0x3FD3EC7B60000000, float 0x3FD40A9B40000000, float 0x3FD428C780000000, float 0x3FD4470060000000, float 0x3FD4654560000000, float 0x3FD48396A0000000, float 0x3FD4A1F400000000, float 0x3FD4C05D20000000, float 0x3FD4DED220000000, float 0x3FD4FD52A0000000, float 0x3FD51BDEA0000000, float 0x3FD53A7600000000, float 0x3FD55918A0000000, float 0x3FD577C640000000, float 0x3FD5967EC0000000, float 0x3FD5B54220000000, float 0x3FD5D41020000000, float 0x3FD5F2E8A0000000, float 0x3FD611CB60000000, float 0x3FD630B880000000, float 0x3FD64FAFA0000000, float 0x3FD66EB0A0000000, float 0x3FD68DBB80000000, float 0x3FD6ACD000000000, float 0x3FD6CBEE00000000, float 0x3FD6EB1560000000, float 0x3FD70A45E0000000, float 0x3FD7297F80000000, float 0x3FD748C220000000, float 0x3FD7680D80000000, float 0x3FD7876160000000, float 0x3FD7A6BDE0000000, float 0x3FD7C622C0000000, float 0x3FD7E58FC0000000, float 0x3FD80504C0000000, float 0x3FD82481A0000000, float 0x3FD8440660000000, float 0x3FD86392C0000000, float 0x3FD8832680000000, float 0x3FD8A2C180000000, float 0x3FD8C263C0000000, float 0x3FD8E20D00000000, float 0x3FD901BD20000000, float 0x3FD92173E0000000, float 0x3FD9413140000000, float 0x3FD960F520000000, float 0x3FD980BF20000000, float 0x3FD9A08F60000000, float 0x3FD9C06580000000, float 0x3FD9E04160000000, float 0x3FDA002300000000, float 0x3FDA200A20000000, float 0x3FDA3FF6A0000000, float 0x3FDA5FE840000000, float 0x3FDA7FDF00000000, float 0x3FDA9FDAA0000000, float 0x3FDABFDB00000000, float 0x3FDADFDFE0000000, float 0x3FDAFFE960000000, float 0x3FDB1FF700000000, float 0x3FDB4008E0000000, float 0x3FDB601EA0000000, float 0x3FDB803860000000, float 0x3FDBA055A0000000, float 0x3FDBC07680000000, float 0x3FDBE09AC0000000, float 0x3FDC00C220000000, float 0x3FDC20ECA0000000, float 0x3FDC411A00000000, float 0x3FDC614A20000000, float 0x3FDC817CE0000000, float 0x3FDCA1B200000000, float 0x3FDCC1E980000000, float 0x3FDCE22320000000, float 0x3FDD025EA0000000, float 0x3FDD229C00000000, float 0x3FDD42DB20000000, float 0x3FDD631BA0000000, float 0x3FDD835D80000000, float 0x3FDDA3A0A0000000, float 0x3FDDC3E4E0000000, float 0x3FDDE429E0000000, float 0x3FDE046FA0000000, float 0x3FDE24B600000000, float 0x3FDE44FCC0000000, float 0x3FDE6543E0000000, float 0x3FDE858B00000000, float 0x3FDEA5D220000000, float 0x3FDEC61900000000, float 0x3FDEE65FA0000000, float 0x3FDF06A5A0000000, float 0x3FDF26EB00000000, float 0x3FDF472F80000000, float 0x3FDF677320000000, float 0x3FDF87B580000000, float 0x3FDFA7F6A0000000, float 0x3FDFC83660000000, float 0x3FDFE87460000000, float 0x3FE0045860000000, float 0x3FE01475A0000000, float 0x3FE02491C0000000, float 0x3FE034ACC0000000, float 0x3FE044C6A0000000, float 0x3FE054DF40000000, float 0x3FE064F680000000, float 0x3FE0750C60000000, float 0x3FE08520A0000000, float 0x3FE0953360000000, float 0x3FE0A54480000000, float 0x3FE0B553E0000000, float 0x3FE0C56180000000, float 0x3FE0D56D20000000, float 0x3FE0E576E0000000, float 0x3FE0F57E80000000, float 0x3FE1058400000000, float 0x3FE1158760000000, float 0x3FE1258880000000, float 0x3FE1358740000000, float 0x3FE1458380000000, float 0x3FE1557D60000000, float 0x3FE1657480000000, float 0x3FE1756920000000, float 0x3FE1855B00000000, float 0x3FE1954A00000000, float 0x3FE1A53620000000, float 0x3FE1B51F60000000, float 0x3FE1C50580000000, float 0x3FE1D4E8A0000000, float 0x3FE1E4C880000000, float 0x3FE1F4A520000000, float 0x3FE2047E60000000, float 0x3FE2145440000000, float 0x3FE22426A0000000, float 0x3FE233F580000000, float 0x3FE243C0A0000000, float 0x3FE2538820000000, float 0x3FE2634BE0000000, float 0x3FE2730BC0000000, float 0x3FE282C7A0000000, float 0x3FE2927F80000000, float 0x3FE2A23360000000, float 0x3FE2B1E300000000, float 0x3FE2C18E80000000, float 0x3FE2D135A0000000, float 0x3FE2E0D860000000, float 0x3FE2F076C0000000, float 0x3FE30010A0000000, float 0x3FE30FA5C0000000, float 0x3FE31F3660000000, float 0x3FE32EC240000000, float 0x3FE33E4940000000, float 0x3FE34DCB60000000, float 0x3FE35D48A0000000, float 0x3FE36CC0C0000000, float 0x3FE37C33E0000000, float 0x3FE38BA1C0000000, float 0x3FE39B0A80000000, float 0x3FE3AA6DE0000000, float 0x3FE3B9CBE0000000, float 0x3FE3C92480000000, float 0x3FE3D87780000000, float 0x3FE3E7C500000000, float 0x3FE3F70CC0000000, float 0x3FE4064EE0000000, float 0x3FE4158B40000000, float 0x3FE424C1C0000000, float 0x3FE433F240000000, float 0x3FE4431CC0000000, float 0x3FE4524140000000, float 0x3FE4615FA0000000, float 0x3FE47077C0000000, float 0x3FE47F89A0000000, float 0x3FE48E9520000000, float 0x3FE49D9A60000000, float 0x3FE4AC9900000000, float 0x3FE4BB9140000000, float 0x3FE4CA82C0000000, float 0x3FE4D96DC0000000, float 0x3FE4E851E0000000, float 0x3FE4F72F40000000, float 0x3FE50605E0000000, float 0x3FE514D580000000, float 0x3FE5239E20000000, float 0x3FE5325FC0000000, float 0x3FE5411A40000000, float 0x3FE54FCD80000000, float 0x3FE55E79A0000000, float 0x3FE56D1E60000000, float 0x3FE57BBBE0000000, float 0x3FE58A51E0000000, float 0x3FE598E060000000, float 0x3FE5A76760000000, float 0x3FE5B5E6C0000000, float 0x3FE5C45E80000000, float 0x3FE5D2CE80000000, float 0x3FE5E136C0000000, float 0x3FE5EF9720000000, float 0x3FE5FDEFA0000000, float 0x3FE60C4020000000, float 0x3FE61A88A0000000, float 0x3FE628C900000000, float 0x3FE6370140000000, float 0x3FE6453160000000, float 0x3FE6535940000000, float 0x3FE66178C0000000, float 0x3FE66F8FE0000000, float 0x3FE67D9EC0000000, float 0x3FE68BA500000000, float 0x3FE699A2C0000000, float 0x3FE6A797E0000000, float 0x3FE6B58480000000, float 0x3FE6C36840000000, float 0x3FE6D14360000000, float 0x3FE6DF15C0000000, float 0x3FE6ECDF20000000, float 0x3FE6FA9FC0000000, float 0x3FE7085760000000, float 0x3FE71605E0000000, float 0x3FE723AB60000000, float 0x3FE73147E0000000, float 0x3FE73EDB20000000, float 0x3FE74C6520000000, float 0x3FE759E600000000, float 0x3FE7675D80000000, float 0x3FE774CBA0000000, float 0x3FE7823040000000, float 0x3FE78F8BA0000000, float 0x3FE79CDD60000000, float 0x3FE7AA2580000000, float 0x3FE7B76420000000, float 0x3FE7C49920000000, float 0x3FE7D1C460000000, float 0x3FE7DEE600000000, float 0x3FE7EBFDC0000000, float 0x3FE7F90BC0000000, float 0x3FE8060FC0000000, float 0x3FE8130A00000000, float 0x3FE81FFA20000000, float 0x3FE82CE060000000, float 0x3FE839BC80000000, float 0x3FE8468EA0000000, float 0x3FE85356A0000000, float 0x3FE8601460000000, float 0x3FE86CC800000000, float 0x3FE8797160000000, float 0x3FE8861060000000, float 0x3FE892A520000000, float 0x3FE89F2F80000000, float 0x3FE8ABAF60000000, float 0x3FE8B824E0000000, float 0x3FE8C48FE0000000, float 0x3FE8D0F080000000, float 0x3FE8DD4660000000, float 0x3FE8E991C0000000, float 0x3FE8F5D280000000, float 0x3FE9020880000000, float 0x3FE90E33E0000000, float 0x3FE91A5480000000, float 0x3FE9266A60000000, float 0x3FE9327580000000, float 0x3FE93E75C0000000, float 0x3FE94A6B20000000, float 0x3FE95655A0000000, float 0x3FE9623520000000, float 0x3FE96E09A0000000, float 0x3FE979D340000000, float 0x3FE98591E0000000, float 0x3FE9914560000000, float 0x3FE99CEDC0000000, float 0x3FE9A88B20000000, float 0x3FE9B41D40000000, float 0x3FE9BFA440000000, float 0x3FE9CB2000000000, float 0x3FE9D690A0000000, float 0x3FE9E1F600000000, float 0x3FE9ED5000000000, float 0x3FE9F89EC0000000, float 0x3FEA03E240000000, float 0x3FEA0F1A40000000, float 0x3FEA1A4700000000, float 0x3FEA256840000000, float 0x3FEA307E40000000, float 0x3FEA3B88A0000000, float 0x3FEA4687A0000000, float 0x3FEA517B20000000, float 0x3FEA5C6300000000, float 0x3FEA673F80000000, float 0x3FEA721060000000, float 0x3FEA7CD5C0000000, float 0x3FEA878F60000000, float 0x3FEA923D80000000, float 0x3FEA9CE000000000, float 0x3FEAA776E0000000, float 0x3FEAB20200000000, float 0x3FEABC8180000000, float 0x3FEAC6F540000000, float 0x3FEAD15D60000000, float 0x3FEADBB9C0000000, float 0x3FEAE60A60000000, float 0x3FEAF04F20000000, float 0x3FEAFA8840000000, float 0x3FEB04B580000000, float 0x3FEB0ED700000000, float 0x3FEB18ECA0000000, float 0x3FEB22F680000000, float 0x3FEB2CF480000000, float 0x3FEB36E6A0000000, float 0x3FEB40CD00000000, float 0x3FEB4AA760000000, float 0x3FEB5475E0000000, float 0x3FEB5E38A0000000, float 0x3FEB67EF60000000, float 0x3FEB719A40000000, float 0x3FEB7B3920000000, float 0x3FEB84CC20000000, float 0x3FEB8E5340000000, float 0x3FEB97CE60000000, float 0x3FEBA13DA0000000, float 0x3FEBAAA0E0000000, float 0x3FEBB3F840000000, float 0x3FEBBD43A0000000, float 0x3FEBC68300000000, float 0x3FEBCFB660000000, float 0x3FEBD8DDE0000000, float 0x3FEBE1F960000000, float 0x3FEBEB0900000000, float 0x3FEBF40C80000000, float 0x3FEBFD0420000000, float 0x3FEC05EFC0000000, float 0x3FEC0ECF60000000, float 0x3FEC17A300000000, float 0x3FEC206AA0000000, float 0x3FEC292660000000, float 0x3FEC31D620000000, float 0x3FEC3A79E0000000, float 0x3FEC4311A0000000, float 0x3FEC4B9D80000000, float 0x3FEC541D60000000, float 0x3FEC5C9140000000, float 0x3FEC64F940000000, float 0x3FEC6D5540000000, float 0x3FEC75A540000000, float 0x3FEC7DE960000000, float 0x3FEC8621A0000000, float 0x3FEC8E4DE0000000, float 0x3FEC966E40000000, float 0x3FEC9E82A0000000, float 0x3FECA68B40000000, float 0x3FECAE87E0000000, float 0x3FECB678A0000000, float 0x3FECBE5D80000000, float 0x3FECC63680000000, float 0x3FECCE03A0000000, float 0x3FECD5C4E0000000, float 0x3FECDD7A60000000, float 0x3FECE52400000000, float 0x3FECECC1E0000000, float 0x3FECF453E0000000, float 0x3FECFBDA20000000, float 0x3FED035480000000, float 0x3FED0AC340000000, float 0x3FED122620000000, float 0x3FED197D60000000, float 0x3FED20C8E0000000, float 0x3FED2808A0000000, float 0x3FED2F3CC0000000, float 0x3FED366540000000, float 0x3FED3D8200000000, float 0x3FED449320000000, float 0x3FED4B98A0000000, float 0x3FED529280000000, float 0x3FED5980E0000000, float 0x3FED6063A0000000, float 0x3FED673AC0000000, float 0x3FED6E0680000000, float 0x3FED74C6A0000000, float 0x3FED7B7B40000000, float 0x3FED822480000000, float 0x3FED88C240000000, float 0x3FED8F5480000000, float 0x3FED95DB80000000, float 0x3FED9C5700000000, float 0x3FEDA2C720000000, float 0x3FEDA92C00000000, float 0x3FEDAF8580000000, float 0x3FEDB5D3A0000000, float 0x3FEDBC16A0000000, float 0x3FEDC24E60000000, float 0x3FEDC87AC0000000, float 0x3FEDCE9C20000000, float 0x3FEDD4B240000000, float 0x3FEDDABD20000000, float 0x3FEDE0BD00000000, float 0x3FEDE6B1C0000000, float 0x3FEDEC9B60000000, float 0x3FEDF27A20000000, float 0x3FEDF84DC0000000, float 0x3FEDFE1660000000, float 0x3FEE03D400000000, float 0x3FEE0986C0000000, float 0x3FEE0F2EA0000000, float 0x3FEE14CBA0000000, float 0x3FEE1A5DE0000000, float 0x3FEE1FE520000000, float 0x3FEE2561C0000000, float 0x3FEE2AD380000000, float 0x3FEE303AA0000000, float 0x3FEE359700000000, float 0x3FEE3AE8C0000000, float 0x3FEE402FE0000000, float 0x3FEE456C60000000, float 0x3FEE4A9E60000000, float 0x3FEE4FC5C0000000, float 0x3FEE54E2A0000000, float 0x3FEE59F520000000, float 0x3FEE5EFD20000000, float 0x3FEE63FAC0000000, float 0x3FEE68EE20000000, float 0x3FEE6DD700000000, float 0x3FEE72B5A0000000, float 0x3FEE778A00000000, float 0x3FEE7C5440000000, float 0x3FEE811420000000, float 0x3FEE85CA00000000, float 0x3FEE8A75C0000000, float 0x3FEE8F1760000000, float 0x3FEE93AEE0000000, float 0x3FEE983C80000000, float 0x3FEE9CC020000000, float 0x3FEEA139C0000000, float 0x3FEEA5A980000000, float 0x3FEEAA0F60000000, float 0x3FEEAE6B80000000, float 0x3FEEB2BDC0000000, float 0x3FEEB70660000000, float 0x3FEEBB4540000000, float 0x3FEEBF7A60000000, float 0x3FEEC3A600000000, float 0x3FEEC7C800000000, float 0x3FEECBE060000000, float 0x3FEECFEF40000000, float 0x3FEED3F4C0000000, float 0x3FEED7F0C0000000, float 0x3FEEDBE360000000, float 0x3FEEDFCCA0000000, float 0x3FEEE3ACA0000000, float 0x3FEEE78360000000, float 0x3FEEEB50E0000000, float 0x3FEEEF1520000000, float 0x3FEEF2D060000000, float 0x3FEEF68260000000, float 0x3FEEFA2B60000000, float 0x3FEEFDCB60000000, float 0x3FEF016280000000, float 0x3FEF04F080000000, float 0x3FEF0875C0000000, float 0x3FEF0BF220000000, float 0x3FEF0F65C0000000, float 0x3FEF12D080000000, float 0x3FEF1632A0000000, float 0x3FEF198C00000000, float 0x3FEF1CDCE0000000, float 0x3FEF202520000000, float 0x3FEF2364C0000000, float 0x3FEF269BE0000000, float 0x3FEF29CAA0000000, float 0x3FEF2CF100000000, float 0x3FEF300F00000000, float 0x3FEF3324A0000000, float 0x3FEF363200000000, float 0x3FEF393720000000, float 0x3FEF3C3420000000, float 0x3FEF3F2900000000, float 0x3FEF4215C0000000, float 0x3FEF44FA80000000, float 0x3FEF47D720000000, float 0x3FEF4AAC00000000, float 0x3FEF4D78C0000000, float 0x3FEF503DC0000000, float 0x3FEF52FB00000000, float 0x3FEF55B060000000, float 0x3FEF585E20000000, float 0x3FEF5B0420000000, float 0x3FEF5DA280000000, float 0x3FEF603940000000, float 0x3FEF62C880000000, float 0x3FEF655040000000, float 0x3FEF67D0A0000000, float 0x3FEF6A49A0000000, float 0x3FEF6CBB20000000, float 0x3FEF6F2560000000, float 0x3FEF718880000000, float 0x3FEF73E440000000, float 0x3FEF763900000000, float 0x3FEF788680000000, float 0x3FEF7ACD00000000, float 0x3FEF7D0C60000000, float 0x3FEF7F44E0000000, float 0x3FEF817680000000, float 0x3FEF83A120000000, float 0x3FEF85C500000000, float 0x3FEF87E220000000, float 0x3FEF89F880000000, float 0x3FEF8C0820000000, float 0x3FEF8E1120000000, float 0x3FEF901380000000, float 0x3FEF920F80000000, float 0x3FEF9404E0000000, float 0x3FEF95F3C0000000, float 0x3FEF97DC40000000, float 0x3FEF99BE80000000, float 0x3FEF9B9A60000000, float 0x3FEF9D7000000000, float 0x3FEF9F3F60000000, float 0x3FEFA108A0000000, float 0x3FEFA2CBC0000000, float 0x3FEFA488E0000000, float 0x3FEFA63FE0000000, float 0x3FEFA7F100000000, float 0x3FEFA99C20000000, float 0x3FEFAB4160000000, float 0x3FEFACE0E0000000, float 0x3FEFAE7A80000000, float 0x3FEFB00E60000000, float 0x3FEFB19CA0000000, float 0x3FEFB32540000000, float 0x3FEFB4A840000000, float 0x3FEFB625C0000000, float 0x3FEFB79DC0000000, float 0x3FEFB91040000000, float 0x3FEFBA7D60000000, float 0x3FEFBBE520000000, float 0x3FEFBD47A0000000, float 0x3FEFBEA4C0000000, float 0x3FEFBFFCC0000000, float 0x3FEFC14F80000000, float 0x3FEFC29D40000000, float 0x3FEFC3E5E0000000, float 0x3FEFC52960000000, float 0x3FEFC66800000000, float 0x3FEFC7A1A0000000, float 0x3FEFC8D680000000, float 0x3FEFCA0660000000, float 0x3FEFCB3180000000, float 0x3FEFCC57E0000000, float 0x3FEFCD79A0000000, float 0x3FEFCE96A0000000, float 0x3FEFCFAF00000000, float 0x3FEFD0C2E0000000, float 0x3FEFD1D240000000, float 0x3FEFD2DD20000000, float 0x3FEFD3E380000000, float 0x3FEFD4E580000000, float 0x3FEFD5E340000000, float 0x3FEFD6DCA0000000, float 0x3FEFD7D1C0000000, float 0x3FEFD8C2C0000000, float 0x3FEFD9AF80000000, float 0x3FEFDA9840000000, float 0x3FEFDB7CE0000000, float 0x3FEFDC5D60000000, float 0x3FEFDD3A00000000, float 0x3FEFDE12A0000000, float 0x3FEFDEE760000000, float 0x3FEFDFB860000000, float 0x3FEFE08580000000, float 0x3FEFE14EC0000000, float 0x3FEFE21460000000, float 0x3FEFE2D660000000, float 0x3FEFE394A0000000, float 0x3FEFE44F60000000, float 0x3FEFE50680000000, float 0x3FEFE5BA40000000, float 0x3FEFE66A60000000, float 0x3FEFE71740000000, float 0x3FEFE7C0A0000000, float 0x3FEFE866A0000000, float 0x3FEFE90960000000, float 0x3FEFE9A900000000, float 0x3FEFEA4540000000, float 0x3FEFEADE60000000, float 0x3FEFEB7460000000, float 0x3FEFEC0740000000, float 0x3FEFEC9720000000, float 0x3FEFED2400000000, float 0x3FEFEDADE0000000, float 0x3FEFEE34C0000000, float 0x3FEFEEB8E0000000, float 0x3FEFEF3A00000000, float 0x3FEFEFB880000000, float 0x3FEFF03420000000, float 0x3FEFF0AD00000000, float 0x3FEFF12320000000, float 0x3FEFF196C0000000, float 0x3FEFF207A0000000, float 0x3FEFF27600000000, float 0x3FEFF2E1C0000000, float 0x3FEFF34B20000000, float 0x3FEFF3B1E0000000, float 0x3FEFF41660000000, float 0x3FEFF47860000000, float 0x3FEFF4D800000000, float 0x3FEFF53560000000, float 0x3FEFF59080000000, float 0x3FEFF5E940000000, float 0x3FEFF63FE0000000, float 0x3FEFF69460000000, float 0x3FEFF6E6A0000000, float 0x3FEFF736E0000000, float 0x3FEFF78500000000, float 0x3FEFF7D120000000, float 0x3FEFF81B20000000, float 0x3FEFF86340000000, float 0x3FEFF8A980000000, float 0x3FEFF8EDE0000000, float 0x3FEFF93040000000, float 0x3FEFF970E0000000, float 0x3FEFF9AFC0000000, float 0x3FEFF9ECC0000000, float 0x3FEFFA2820000000, float 0x3FEFFA61C0000000, float 0x3FEFFA99A0000000, float 0x3FEFFAD000000000, float 0x3FEFFB04C0000000, float 0x3FEFFB37E0000000, float 0x3FEFFB6980000000, float 0x3FEFFB9980000000, float 0x3FEFFBC820000000, float 0x3FEFFBF540000000, float 0x3FEFFC2100000000, float 0x3FEFFC4B60000000, float 0x3FEFFC7460000000, float 0x3FEFFC9C00000000, float 0x3FEFFCC260000000, float 0x3FEFFCE760000000, float 0x3FEFFD0B40000000, float 0x3FEFFD2DC0000000, float 0x3FEFFD4F40000000, float 0x3FEFFD6F80000000, float 0x3FEFFD8E80000000, float 0x3FEFFDAC80000000, float 0x3FEFFDC960000000, float 0x3FEFFDE540000000, float 0x3FEFFE0020000000, float 0x3FEFFE19E0000000, float 0x3FEFFE32A0000000, float 0x3FEFFE4A80000000, float 0x3FEFFE6180000000, float 0x3FEFFE7780000000, float 0x3FEFFE8CA0000000, float 0x3FEFFEA0E0000000, float 0x3FEFFEB440000000, float 0x3FEFFEC6E0000000, float 0x3FEFFED8C0000000, float 0x3FEFFEE9C0000000, float 0x3FEFFEFA20000000, float 0x3FEFFF09A0000000, float 0x3FEFFF1880000000, float 0x3FEFFF26C0000000, float 0x3FEFFF3440000000, float 0x3FEFFF4120000000, float 0x3FEFFF4D80000000, float 0x3FEFFF5920000000, float 0x3FEFFF6440000000, float 0x3FEFFF6EC0000000, float 0x3FEFFF78C0000000, float 0x3FEFFF8240000000, float 0x3FEFFF8B20000000, float 0x3FEFFF93A0000000, float 0x3FEFFF9BA0000000, float 0x3FEFFFA340000000, float 0x3FEFFFAA60000000, float 0x3FEFFFB100000000, float 0x3FEFFFB760000000, float 0x3FEFFFBD40000000, float 0x3FEFFFC2C0000000, float 0x3FEFFFC800000000, float 0x3FEFFFCCE0000000, float 0x3FEFFFD160000000, float 0x3FEFFFD5A0000000, float 0x3FEFFFD980000000, float 0x3FEFFFDD40000000, float 0x3FEFFFE0A0000000, float 0x3FEFFFE3C0000000, float 0x3FEFFFE6A0000000, float 0x3FEFFFE940000000, float 0x3FEFFFEBC0000000, float 0x3FEFFFEE00000000, float 0x3FEFFFF000000000, float 0x3FEFFFF1E0000000, float 0x3FEFFFF3A0000000, float 0x3FEFFFF520000000, float 0x3FEFFFF680000000, float 0x3FEFFFF7E0000000, float 0x3FEFFFF900000000, float 0x3FEFFFFA00000000, float 0x3FEFFFFAE0000000, float 0x3FEFFFFBA0000000, float 0x3FEFFFFC60000000, float 0x3FEFFFFD00000000, float 0x3FEFFFFD80000000, float 0x3FEFFFFDE0000000, float 0x3FEFFFFE60000000, float 0x3FEFFFFEA0000000, float 0x3FEFFFFF00000000, float 0x3FEFFFFF20000000, float 0x3FEFFFFF60000000, float 0x3FEFFFFF80000000, float 0x3FEFFFFFA0000000, float 0x3FEFFFFFC0000000, float 0x3FEFFFFFE0000000, float 0x3FEFFFFFE0000000, float 0x3FEFFFFFE0000000, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00], align 16
@vwin4096 = internal global [2048 x float] [float 0x3E8F011980000000, float 0x3EC170D560000000, float 0x3ED83949E0000000, float 0x3EE7BD37C0000000, float 0x3EF39EFDC0000000, float 0x3EFD4F7800000000, float 0x3F04780560000000, float 0x3F0B405420000000, float 0x3F118057A0000000, float 0x3F15DC8980000000, float 0x3F1AB4BC60000000, float 0x3F200478E0000000, float 0x3F22EC9500000000, float 0x3F2612B0C0000000, float 0x3F2976CD00000000, float 0x3F2D18E800000000, float 0x3F307C80E0000000, float 0x3F328B8D20000000, float 0x3F34B997E0000000, float 0x3F3706A0C0000000, float 0x3F3972A820000000, float 0x3F3BFDAD20000000, float 0x3F3EA7AF00000000, float 0x3F40B85700000000, float 0x3F422C54C0000000, float 0x3F43AFD0C0000000, float 0x3F4542CA20000000, float 0x3F46E54120000000, float 0x3F48973580000000, float 0x3F4A58A6C0000000, float 0x3F4C2994A0000000, float 0x3F4E09FF40000000, float 0x3F4FF9E5E0000000, float 0x3F50FCA440000000, float 0x3F52041340000000, float 0x3F53133FE0000000, float 0x3F542A2A00000000, float 0x3F5548D160000000, float 0x3F566F35C0000000, float 0x3F579D5740000000, float 0x3F58D33560000000, float 0x3F5A10D020000000, float 0x3F5B562740000000, float 0x3F5CA33A80000000, float 0x3F5DF809E0000000, float 0x3F5F5494E0000000, float 0x3F605C6DA0000000, float 0x3F61126EA0000000, float 0x3F61CC4D20000000, float 0x3F628A0920000000, float 0x3F634BA260000000, float 0x3F641118E0000000, float 0x3F64DA6C80000000, float 0x3F65A79D00000000, float 0x3F6678AA60000000, float 0x3F674D9480000000, float 0x3F68265B40000000, float 0x3F6902FE60000000, float 0x3F69E37DE0000000, float 0x3F6AC7D980000000, float 0x3F6BB01140000000, float 0x3F6C9C24C0000000, float 0x3F6D8C1420000000, float 0x3F6E7FDF20000000, float 0x3F6F7785A0000000, float 0x3F703983A0000000, float 0x3F70B93220000000, float 0x3F713ACE20000000, float 0x3F71BE5780000000, float 0x3F7243CE20000000, float 0x3F72CB3220000000, float 0x3F73548340000000, float 0x3F73DFC180000000, float 0x3F746CECC0000000, float 0x3F74FC0500000000, float 0x3F758D0A00000000, float 0x3F761FFBC0000000, float 0x3F76B4DA20000000, float 0x3F774BA500000000, float 0x3F77E45C80000000, float 0x3F787F0040000000, float 0x3F791B9060000000, float 0x3F79BA0CA0000000, float 0x3F7A5A7500000000, float 0x3F7AFCC940000000, float 0x3F7BA10980000000, float 0x3F7C473580000000, float 0x3F7CEF4D20000000, float 0x3F7D995060000000, float 0x3F7E453F20000000, float 0x3F7EF31940000000, float 0x3F7FA2DEA0000000, float 0x3F802A4780000000, float 0x3F80841540000000, float 0x3F80DED880000000, float 0x3F813A9120000000, float 0x3F81973F20000000, float 0x3F81F4E260000000, float 0x3F82537B00000000, float 0x3F82B308A0000000, float 0x3F83138B80000000, float 0x3F83750340000000, float 0x3F83D77020000000, float 0x3F843AD1E0000000, float 0x3F849F28A0000000, float 0x3F85047400000000, float 0x3F856AB440000000, float 0x3F85D1E920000000, float 0x3F863A12A0000000, float 0x3F86A330A0000000, float 0x3F870D4340000000, float 0x3F87784A20000000, float 0x3F87E44580000000, float 0x3F88513500000000, float 0x3F88BF18E0000000, float 0x3F892DF0C0000000, float 0x3F899DBCC0000000, float 0x3F8A0E7CE0000000, float 0x3F8A8030C0000000, float 0x3F8AF2D8A0000000, float 0x3F8B667440000000, float 0x3F8BDB0380000000, float 0x3F8C508680000000, float 0x3F8CC6FD00000000, float 0x3F8D3E6700000000, float 0x3F8DB6C460000000, float 0x3F8E301540000000, float 0x3F8EAA5940000000, float 0x3F8F259060000000, float 0x3F8FA1BAC0000000, float 0x3F900F6C00000000, float 0x3F904E7420000000, float 0x3F908DF5C0000000, float 0x3F90CDF0C0000000, float 0x3F910E6500000000, float 0x3F914F52A0000000, float 0x3F9190B9A0000000, float 0x3F91D299C0000000, float 0x3F9214F300000000, float 0x3F9257C580000000, float 0x3F929B1100000000, float 0x3F92DED5A0000000, float 0x3F93231340000000, float 0x3F9367C9C0000000, float 0x3F93ACF940000000, float 0x3F93F2A1A0000000, float 0x3F9438C2E0000000, float 0x3F947F5CE0000000, float 0x3F94C66FA0000000, float 0x3F950DFB20000000, float 0x3F9555FF20000000, float 0x3F959E7BE0000000, float 0x3F95E77120000000, float 0x3F9630DEE0000000, float 0x3F967AC500000000, float 0x3F96C523A0000000, float 0x3F970FFAA0000000, float 0x3F975B4A00000000, float 0x3F97A71180000000, float 0x3F97F35140000000, float 0x3F98400940000000, float 0x3F988D3940000000, float 0x3F98DAE160000000, float 0x3F99290180000000, float 0x3F997799A0000000, float 0x3F99C6A9A0000000, float 0x3F9A163180000000, float 0x3F9A663120000000, float 0x3F9AB6A8A0000000, float 0x3F9B0797A0000000, float 0x3F9B58FE60000000, float 0x3F9BAADCC0000000, float 0x3F9BFD32A0000000, float 0x3F9C500000000000, float 0x3F9CA344E0000000, float 0x3F9CF70100000000, float 0x3F9D4B3480000000, float 0x3F9D9FDF40000000, float 0x3F9DF50120000000, float 0x3F9E4A9A40000000, float 0x3F9EA0AA60000000, float 0x3F9EF731A0000000, float 0x3F9F4E2FC0000000, float 0x3F9FA5A4E0000000, float 0x3F9FFD90C0000000, float 0x3FA02AF9C0000000, float 0x3FA0576680000000, float 0x3FA0840EA0000000, float 0x3FA0B0F200000000, float 0x3FA0DE10A0000000, float 0x3FA10B6A80000000, float 0x3FA138FFA0000000, float 0x3FA166D000000000, float 0x3FA194DB60000000, float 0x3FA1C32200000000, float 0x3FA1F1A3A0000000, float 0x3FA2206060000000, float 0x3FA24F5820000000, float 0x3FA27E8AE0000000, float 0x3FA2ADF8A0000000, float 0x3FA2DDA140000000, float 0x3FA30D84E0000000, float 0x3FA33DA340000000, float 0x3FA36DFC80000000, float 0x3FA39E9080000000, float 0x3FA3CF5F60000000, float 0x3FA40068E0000000, float 0x3FA431AD20000000, float 0x3FA4632C00000000, float 0x3FA494E5A0000000, float 0x3FA4C6D9C0000000, float 0x3FA4F90860000000, float 0x3FA52B71A0000000, float 0x3FA55E1560000000, float 0x3FA590F380000000, float 0x3FA5C40C00000000, float 0x3FA5F75F00000000, float 0x3FA62AEC60000000, float 0x3FA65EB400000000, float 0x3FA692B5E0000000, float 0x3FA6C6F200000000, float 0x3FA6FB6860000000, float 0x3FA73018E0000000, float 0x3FA7650380000000, float 0x3FA79A2820000000, float 0x3FA7CF8700000000, float 0x3FA8051FC0000000, float 0x3FA83AF280000000, float 0x3FA870FF40000000, float 0x3FA8A745E0000000, float 0x3FA8DDC660000000, float 0x3FA91480A0000000, float 0x3FA94B74C0000000, float 0x3FA982A280000000, float 0x3FA9BA0A00000000, float 0x3FA9F1AB40000000, float 0x3FAA298620000000, float 0x3FAA619A80000000, float 0x3FAA99E880000000, float 0x3FAAD27000000000, float 0x3FAB0B30E0000000, float 0x3FAB442B40000000, float 0x3FAB7D5F00000000, float 0x3FABB6CC20000000, float 0x3FABF07280000000, float 0x3FAC2A5220000000, float 0x3FAC646B00000000, float 0x3FAC9EBD00000000, float 0x3FACD94820000000, float 0x3FAD140C80000000, float 0x3FAD4F09C0000000, float 0x3FAD8A4020000000, float 0x3FADC5AF60000000, float 0x3FAE015780000000, float 0x3FAE3D38A0000000, float 0x3FAE795280000000, float 0x3FAEB5A520000000, float 0x3FAEF230A0000000, float 0x3FAF2EF4C0000000, float 0x3FAF6BF180000000, float 0x3FAFA926E0000000, float 0x3FAFE694C0000000, float 0x3FB0121DA0000000, float 0x3FB0310D20000000, float 0x3FB05018C0000000, float 0x3FB06F40A0000000, float 0x3FB08E84A0000000, float 0x3FB0ADE4E0000000, float 0x3FB0CD6120000000, float 0x3FB0ECF980000000, float 0x3FB10CAE00000000, float 0x3FB12C7E80000000, float 0x3FB14C6B00000000, float 0x3FB16C73A0000000, float 0x3FB18C9820000000, float 0x3FB1ACD880000000, float 0x3FB1CD34E0000000, float 0x3FB1EDAD40000000, float 0x3FB20E4160000000, float 0x3FB22EF160000000, float 0x3FB24FBD40000000, float 0x3FB270A500000000, float 0x3FB291A860000000, float 0x3FB2B2C7A0000000, float 0x3FB2D40280000000, float 0x3FB2F55920000000, float 0x3FB316CB80000000, float 0x3FB3385960000000, float 0x3FB35A0300000000, float 0x3FB37BC840000000, float 0x3FB39DA900000000, float 0x3FB3BFA540000000, float 0x3FB3E1BD20000000, float 0x3FB403F080000000, float 0x3FB4263F40000000, float 0x3FB448A980000000, float 0x3FB46B2F40000000, float 0x3FB48DD040000000, float 0x3FB4B08CA0000000, float 0x3FB4D36460000000, float 0x3FB4F65780000000, float 0x3FB51965E0000000, float 0x3FB53C8F80000000, float 0x3FB55FD440000000, float 0x3FB5833460000000, float 0x3FB5A6AF80000000, float 0x3FB5CA45E0000000, float 0x3FB5EDF760000000, float 0x3FB611C3E0000000, float 0x3FB635AB80000000, float 0x3FB659AE20000000, float 0x3FB67DCBC0000000, float 0x3FB6A20460000000, float 0x3FB6C65800000000, float 0x3FB6EAC680000000, float 0x3FB70F4FE0000000, float 0x3FB733F400000000, float 0x3FB758B320000000, float 0x3FB77D8D00000000, float 0x3FB7A281A0000000, float 0x3FB7C79100000000, float 0x3FB7ECBB20000000, float 0x3FB811FFE0000000, float 0x3FB8375F40000000, float 0x3FB85CD940000000, float 0x3FB8826DE0000000, float 0x3FB8A81D20000000, float 0x3FB8CDE6E0000000, float 0x3FB8F3CB20000000, float 0x3FB919C9C0000000, float 0x3FB93FE2E0000000, float 0x3FB9661660000000, float 0x3FB98C6460000000, float 0x3FB9B2CCA0000000, float 0x3FB9D94F20000000, float 0x3FB9FFEC00000000, float 0x3FBA26A320000000, float 0x3FBA4D7480000000, float 0x3FBA746000000000, float 0x3FBA9B65A0000000, float 0x3FBAC28580000000, float 0x3FBAE9BF60000000, float 0x3FBB111340000000, float 0x3FBB388140000000, float 0x3FBB600940000000, float 0x3FBB87AB20000000, float 0x3FBBAF6700000000, float 0x3FBBD73CC0000000, float 0x3FBBFF2C60000000, float 0x3FBC2735C0000000, float 0x3FBC4F5900000000, float 0x3FBC779600000000, float 0x3FBC9FECC0000000, float 0x3FBCC85D20000000, float 0x3FBCF0E740000000, float 0x3FBD198B00000000, float 0x3FBD424840000000, float 0x3FBD6B1F20000000, float 0x3FBD940F80000000, float 0x3FBDBD1960000000, float 0x3FBDE63CC0000000, float 0x3FBE0F7980000000, float 0x3FBE38CFA0000000, float 0x3FBE623F20000000, float 0x3FBE8BC7E0000000, float 0x3FBEB569E0000000, float 0x3FBEDF2540000000, float 0x3FBF08F9C0000000, float 0x3FBF32E780000000, float 0x3FBF5CEE40000000, float 0x3FBF870E40000000, float 0x3FBFB14740000000, float 0x3FBFDB9940000000, float 0x3FC0030220000000, float 0x3FC0184420000000, float 0x3FC02D92A0000000, float 0x3FC042ED80000000, float 0x3FC05854C0000000, float 0x3FC06DC880000000, float 0x3FC08348A0000000, float 0x3FC098D500000000, float 0x3FC0AE6DE0000000, float 0x3FC0C41300000000, float 0x3FC0D9C460000000, float 0x3FC0EF8220000000, float 0x3FC1054C40000000, float 0x3FC11B2280000000, float 0x3FC1310500000000, float 0x3FC146F3A0000000, float 0x3FC15CEEA0000000, float 0x3FC172F5A0000000, float 0x3FC18908E0000000, float 0x3FC19F2840000000, float 0x3FC1B553C0000000, float 0x3FC1CB8B60000000, float 0x3FC1E1CF00000000, float 0x3FC1F81EC0000000, float 0x3FC20E7AA0000000, float 0x3FC224E260000000, float 0x3FC23B5620000000, float 0x3FC251D5E0000000, float 0x3FC26861A0000000, float 0x3FC27EF940000000, float 0x3FC2959CE0000000, float 0x3FC2AC4C60000000, float 0x3FC2C307C0000000, float 0x3FC2D9CF00000000, float 0x3FC2F0A200000000, float 0x3FC30780E0000000, float 0x3FC31E6B80000000, float 0x3FC3356200000000, float 0x3FC34C6420000000, float 0x3FC3637220000000, float 0x3FC37A8BC0000000, float 0x3FC391B120000000, float 0x3FC3A8E220000000, float 0x3FC3C01EC0000000, float 0x3FC3D76700000000, float 0x3FC3EEBAE0000000, float 0x3FC4061A60000000, float 0x3FC41D8560000000, float 0x3FC434FC00000000, float 0x3FC44C7E20000000, float 0x3FC4640BA0000000, float 0x3FC47BA4C0000000, float 0x3FC4934940000000, float 0x3FC4AAF940000000, float 0x3FC4C2B4A0000000, float 0x3FC4DA7B60000000, float 0x3FC4F24D80000000, float 0x3FC50A2B00000000, float 0x3FC52213E0000000, float 0x3FC53A0800000000, float 0x3FC5520760000000, float 0x3FC56A1200000000, float 0x3FC58227E0000000, float 0x3FC59A4900000000, float 0x3FC5B27540000000, float 0x3FC5CAACC0000000, float 0x3FC5E2EF40000000, float 0x3FC5FB3D00000000, float 0x3FC61395E0000000, float 0x3FC62BF9C0000000, float 0x3FC64468A0000000, float 0x3FC65CE2A0000000, float 0x3FC67567A0000000, float 0x3FC68DF7A0000000, float 0x3FC6A69280000000, float 0x3FC6BF3860000000, float 0x3FC6D7E920000000, float 0x3FC6F0A4C0000000, float 0x3FC7096B60000000, float 0x3FC7223CC0000000, float 0x3FC73B18E0000000, float 0x3FC753FFE0000000, float 0x3FC76CF1A0000000, float 0x3FC785EE20000000, float 0x3FC79EF560000000, float 0x3FC7B80760000000, float 0x3FC7D123E0000000, float 0x3FC7EA4B20000000, float 0x3FC8037D00000000, float 0x3FC81CB980000000, float 0x3FC83600A0000000, float 0x3FC84F5240000000, float 0x3FC868AE60000000, float 0x3FC8821500000000, float 0x3FC89B8620000000, float 0x3FC8B501C0000000, float 0x3FC8CE87C0000000, float 0x3FC8E81840000000, float 0x3FC901B300000000, float 0x3FC91B5820000000, float 0x3FC93507A0000000, float 0x3FC94EC180000000, float 0x3FC9688580000000, float 0x3FC98253E0000000, float 0x3FC99C2C80000000, float 0x3FC9B60F40000000, float 0x3FC9CFFC20000000, float 0x3FC9E9F340000000, float 0x3FCA03F480000000, float 0x3FCA1DFFE0000000, float 0x3FCA381540000000, float 0x3FCA5234C0000000, float 0x3FCA6C5E40000000, float 0x3FCA8691A0000000, float 0x3FCAA0CF20000000, float 0x3FCABB1680000000, float 0x3FCAD567E0000000, float 0x3FCAEFC320000000, float 0x3FCB0A2820000000, float 0x3FCB249720000000, float 0x3FCB3F0FC0000000, float 0x3FCB599260000000, float 0x3FCB741EA0000000, float 0x3FCB8EB4A0000000, float 0x3FCBA95460000000, float 0x3FCBC3FDC0000000, float 0x3FCBDEB0E0000000, float 0x3FCBF96DA0000000, float 0x3FCC1433E0000000, float 0x3FCC2F03C0000000, float 0x3FCC49DD20000000, float 0x3FCC64C020000000, float 0x3FCC7FAC80000000, float 0x3FCC9AA260000000, float 0x3FCCB5A1C0000000, float 0x3FCCD0AA80000000, float 0x3FCCEBBCA0000000, float 0x3FCD06D820000000, float 0x3FCD21FCE0000000, float 0x3FCD3D2B00000000, float 0x3FCD586260000000, float 0x3FCD73A300000000, float 0x3FCD8EECE0000000, float 0x3FCDAA3FE0000000, float 0x3FCDC59C00000000, float 0x3FCDE10160000000, float 0x3FCDFC6FC0000000, float 0x3FCE17E740000000, float 0x3FCE3367C0000000, float 0x3FCE4EF160000000, float 0x3FCE6A83E0000000, float 0x3FCE861F60000000, float 0x3FCEA1C3E0000000, float 0x3FCEBD7140000000, float 0x3FCED92760000000, float 0x3FCEF4E680000000, float 0x3FCF10AE60000000, float 0x3FCF2C7F00000000, float 0x3FCF485880000000, float 0x3FCF643AA0000000, float 0x3FCF802580000000, float 0x3FCF9C1900000000, float 0x3FCFB81540000000, float 0x3FCFD41A00000000, float 0x3FCFF02760000000, float 0x3FD0061EA0000000, float 0x3FD0142DE0000000, float 0x3FD0224160000000, float 0x3FD0305920000000, float 0x3FD03E7500000000, float 0x3FD04C9520000000, float 0x3FD05AB980000000, float 0x3FD068E1E0000000, float 0x3FD0770EA0000000, float 0x3FD0853F60000000, float 0x3FD0937440000000, float 0x3FD0A1AD60000000, float 0x3FD0AFEA80000000, float 0x3FD0BE2BA0000000, float 0x3FD0CC7100000000, float 0x3FD0DABA40000000, float 0x3FD0E907A0000000, float 0x3FD0F75900000000, float 0x3FD105AE80000000, float 0x3FD11407E0000000, float 0x3FD1226540000000, float 0x3FD130C680000000, float 0x3FD13F2BC0000000, float 0x3FD14D9500000000, float 0x3FD15C0220000000, float 0x3FD16A7320000000, float 0x3FD178E800000000, float 0x3FD18760C0000000, float 0x3FD195DD60000000, float 0x3FD1A45DE0000000, float 0x3FD1B2E220000000, float 0x3FD1C16A40000000, float 0x3FD1CFF620000000, float 0x3FD1DE85C0000000, float 0x3FD1ED1920000000, float 0x3FD1FBB040000000, float 0x3FD20A4B20000000, float 0x3FD218E9C0000000, float 0x3FD2278C00000000, float 0x3FD23631E0000000, float 0x3FD244DB80000000, float 0x3FD25388C0000000, float 0x3FD26239A0000000, float 0x3FD270EE20000000, float 0x3FD27FA640000000, float 0x3FD28E6200000000, float 0x3FD29D2120000000, float 0x3FD2ABE400000000, float 0x3FD2BAAA40000000, float 0x3FD2C97420000000, float 0x3FD2D84180000000, float 0x3FD2E71240000000, float 0x3FD2F5E6A0000000, float 0x3FD304BE60000000, float 0x3FD3139980000000, float 0x3FD3227820000000, float 0x3FD3315A20000000, float 0x3FD3403F80000000, float 0x3FD34F2840000000, float 0x3FD35E1460000000, float 0x3FD36D03E0000000, float 0x3FD37BF6A0000000, float 0x3FD38AECA0000000, float 0x3FD399E600000000, float 0x3FD3A8E2A0000000, float 0x3FD3B7E280000000, float 0x3FD3C6E5A0000000, float 0x3FD3D5EC00000000, float 0x3FD3E4F580000000, float 0x3FD3F40240000000, float 0x3FD4031220000000, float 0x3FD4122520000000, float 0x3FD4213B40000000, float 0x3FD43054A0000000, float 0x3FD43F7100000000, float 0x3FD44E9080000000, float 0x3FD45DB300000000, float 0x3FD46CD8A0000000, float 0x3FD47C0140000000, float 0x3FD48B2CE0000000, float 0x3FD49A5B80000000, float 0x3FD4A98D20000000, float 0x3FD4B8C1C0000000, float 0x3FD4C7F940000000, float 0x3FD4D733C0000000, float 0x3FD4E67120000000, float 0x3FD4F5B160000000, float 0x3FD504F480000000, float 0x3FD5143AA0000000, float 0x3FD5238360000000, float 0x3FD532CF20000000, float 0x3FD5421DA0000000, float 0x3FD5516EE0000000, float 0x3FD560C300000000, float 0x3FD57019C0000000, float 0x3FD57F7360000000, float 0x3FD58ECFA0000000, float 0x3FD59E2EA0000000, float 0x3FD5AD9040000000, float 0x3FD5BCF4A0000000, float 0x3FD5CC5BA0000000, float 0x3FD5DBC540000000, float 0x3FD5EB3180000000, float 0x3FD5FAA040000000, float 0x3FD60A11C0000000, float 0x3FD61985C0000000, float 0x3FD628FC40000000, float 0x3FD6387540000000, float 0x3FD647F0E0000000, float 0x3FD6576EE0000000, float 0x3FD666EF80000000, float 0x3FD6767280000000, float 0x3FD685F7E0000000, float 0x3FD6957FC0000000, float 0x3FD6A50A00000000, float 0x3FD6B496A0000000, float 0x3FD6C425A0000000, float 0x3FD6D3B700000000, float 0x3FD6E34AA0000000, float 0x3FD6F2E0A0000000, float 0x3FD70278E0000000, float 0x3FD7121380000000, float 0x3FD721B040000000, float 0x3FD7314F60000000, float 0x3FD740F0A0000000, float 0x3FD7509420000000, float 0x3FD76039C0000000, float 0x3FD76FE1A0000000, float 0x3FD77F8BA0000000, float 0x3FD78F37C0000000, float 0x3FD79EE600000000, float 0x3FD7AE9640000000, float 0x3FD7BE48C0000000, float 0x3FD7CDFD20000000, float 0x3FD7DDB3A0000000, float 0x3FD7ED6C40000000, float 0x3FD7FD26C0000000, float 0x3FD80CE340000000, float 0x3FD81CA1C0000000, float 0x3FD82C6220000000, float 0x3FD83C2480000000, float 0x3FD84BE8C0000000, float 0x3FD85BAEE0000000, float 0x3FD86B7700000000, float 0x3FD87B40E0000000, float 0x3FD88B0C80000000, float 0x3FD89ADA20000000, float 0x3FD8AAA960000000, float 0x3FD8BA7A80000000, float 0x3FD8CA4D60000000, float 0x3FD8DA2200000000, float 0x3FD8E9F860000000, float 0x3FD8F9D080000000, float 0x3FD909AA40000000, float 0x3FD91985A0000000, float 0x3FD92962A0000000, float 0x3FD9394160000000, float 0x3FD94921A0000000, float 0x3FD95903A0000000, float 0x3FD968E700000000, float 0x3FD978CC20000000, float 0x3FD988B2A0000000, float 0x3FD9989AC0000000, float 0x3FD9A88440000000, float 0x3FD9B86F60000000, float 0x3FD9C85BE0000000, float 0x3FD9D849E0000000, float 0x3FD9E83940000000, float 0x3FD9F82A20000000, float 0x3FDA081C40000000, float 0x3FDA180FE0000000, float 0x3FDA2804C0000000, float 0x3FDA37FB00000000, float 0x3FDA47F280000000, float 0x3FDA57EB60000000, float 0x3FDA67E580000000, float 0x3FDA77E0E0000000, float 0x3FDA87DD60000000, float 0x3FDA97DB40000000, float 0x3FDAA7DA40000000, float 0x3FDAB7DA60000000, float 0x3FDAC7DBC0000000, float 0x3FDAD7DE40000000, float 0x3FDAE7E1E0000000, float 0x3FDAF7E6A0000000, float 0x3FDB07EC60000000, float 0x3FDB17F340000000, float 0x3FDB27FB20000000, float 0x3FDB380400000000, float 0x3FDB480E00000000, float 0x3FDB5818E0000000, float 0x3FDB6824C0000000, float 0x3FDB783180000000, float 0x3FDB883F40000000, float 0x3FDB984E00000000, float 0x3FDBA85D80000000, float 0x3FDBB86E00000000, float 0x3FDBC87F40000000, float 0x3FDBD89160000000, float 0x3FDBE8A440000000, float 0x3FDBF8B800000000, float 0x3FDC08CC80000000, float 0x3FDC18E1C0000000, float 0x3FDC28F7A0000000, float 0x3FDC390E60000000, float 0x3FDC4925C0000000, float 0x3FDC593DE0000000, float 0x3FDC6956A0000000, float 0x3FDC796FE0000000, float 0x3FDC8989E0000000, float 0x3FDC99A480000000, float 0x3FDCA9BFA0000000, float 0x3FDCB9DB60000000, float 0x3FDCC9F7C0000000, float 0x3FDCDA1480000000, float 0x3FDCEA31C0000000, float 0x3FDCFA4FA0000000, float 0x3FDD0A6DE0000000, float 0x3FDD1A8C80000000, float 0x3FDD2AABA0000000, float 0x3FDD3ACB20000000, float 0x3FDD4AEB20000000, float 0x3FDD5B0B60000000, float 0x3FDD6B2C00000000, float 0x3FDD7B4D00000000, float 0x3FDD8B6E40000000, float 0x3FDD9B8FC0000000, float 0x3FDDABB1A0000000, float 0x3FDDBBD3C0000000, float 0x3FDDCBF600000000, float 0x3FDDDC1880000000, float 0x3FDDEC3B40000000, float 0x3FDDFC5E20000000, float 0x3FDE0C8140000000, float 0x3FDE1CA460000000, float 0x3FDE2CC7C0000000, float 0x3FDE3CEB20000000, float 0x3FDE4D0E80000000, float 0x3FDE5D3220000000, float 0x3FDE6D55A0000000, float 0x3FDE7D7940000000, float 0x3FDE8D9CC0000000, float 0x3FDE9DC060000000, float 0x3FDEADE3E0000000, float 0x3FDEBE0760000000, float 0x3FDECE2AC0000000, float 0x3FDEDE4E00000000, float 0x3FDEEE7120000000, float 0x3FDEFE9420000000, float 0x3FDF0EB700000000, float 0x3FDF1ED9C0000000, float 0x3FDF2EFC40000000, float 0x3FDF3F1E80000000, float 0x3FDF4F4080000000, float 0x3FDF5F6240000000, float 0x3FDF6F83C0000000, float 0x3FDF7FA500000000, float 0x3FDF8FC5E0000000, float 0x3FDF9FE680000000, float 0x3FDFB006C0000000, float 0x3FDFC02680000000, float 0x3FDFD04600000000, float 0x3FDFE06500000000, float 0x3FDFF083A0000000, float 0x3FE00050E0000000, float 0x3FE0085FC0000000, float 0x3FE0106E60000000, float 0x3FE0187CC0000000, float 0x3FE0208AC0000000, float 0x3FE02898A0000000, float 0x3FE030A620000000, float 0x3FE038B360000000, float 0x3FE040C060000000, float 0x3FE048CCE0000000, float 0x3FE050D940000000, float 0x3FE058E540000000, float 0x3FE060F0E0000000, float 0x3FE068FC20000000, float 0x3FE0710700000000, float 0x3FE07911A0000000, float 0x3FE0811BC0000000, float 0x3FE0892580000000, float 0x3FE0912EE0000000, float 0x3FE09937E0000000, float 0x3FE0A14060000000, float 0x3FE0A94880000000, float 0x3FE0B15040000000, float 0x3FE0B95780000000, float 0x3FE0C15E40000000, float 0x3FE0C96480000000, float 0x3FE0D16A60000000, float 0x3FE0D96FC0000000, float 0x3FE0E174A0000000, float 0x3FE0E978E0000000, float 0x3FE0F17CC0000000, float 0x3FE0F98020000000, float 0x3FE10182E0000000, float 0x3FE1098520000000, float 0x3FE11186C0000000, float 0x3FE11987E0000000, float 0x3FE1218860000000, float 0x3FE1298860000000, float 0x3FE13187C0000000, float 0x3FE1398680000000, float 0x3FE14184A0000000, float 0x3FE1498240000000, float 0x3FE1517F20000000, float 0x3FE1597B60000000, float 0x3FE1617700000000, float 0x3FE1697200000000, float 0x3FE1716C40000000, float 0x3FE17965E0000000, float 0x3FE1815EC0000000, float 0x3FE1895700000000, float 0x3FE1914E80000000, float 0x3FE1994560000000, float 0x3FE1A13B60000000, float 0x3FE1A930C0000000, float 0x3FE1B12560000000, float 0x3FE1B91940000000, float 0x3FE1C10C40000000, float 0x3FE1C8FEA0000000, float 0x3FE1D0F020000000, float 0x3FE1D8E0E0000000, float 0x3FE1E0D0E0000000, float 0x3FE1E8C000000000, float 0x3FE1F0AE40000000, float 0x3FE1F89BC0000000, float 0x3FE2008860000000, float 0x3FE2087420000000, float 0x3FE2105F20000000, float 0x3FE2184920000000, float 0x3FE2203260000000, float 0x3FE2281AA0000000, float 0x3FE2300220000000, float 0x3FE237E8A0000000, float 0x3FE23FCE40000000, float 0x3FE247B2E0000000, float 0x3FE24F96A0000000, float 0x3FE2577960000000, float 0x3FE25F5B40000000, float 0x3FE2673C20000000, float 0x3FE26F1C20000000, float 0x3FE276FB00000000, float 0x3FE27ED900000000, float 0x3FE286B600000000, float 0x3FE28E91E0000000, float 0x3FE2966CE0000000, float 0x3FE29E46C0000000, float 0x3FE2A61FA0000000, float 0x3FE2ADF780000000, float 0x3FE2B5CE40000000, float 0x3FE2BDA400000000, float 0x3FE2C578A0000000, float 0x3FE2CD4C40000000, float 0x3FE2D51EC0000000, float 0x3FE2DCF020000000, float 0x3FE2E4C060000000, float 0x3FE2EC8FA0000000, float 0x3FE2F45DA0000000, float 0x3FE2FC2A80000000, float 0x3FE303F640000000, float 0x3FE30BC0E0000000, float 0x3FE3138A60000000, float 0x3FE31B52A0000000, float 0x3FE32319C0000000, float 0x3FE32ADFA0000000, float 0x3FE332A460000000, float 0x3FE33A67E0000000, float 0x3FE3422A40000000, float 0x3FE349EB40000000, float 0x3FE351AB20000000, float 0x3FE35969C0000000, float 0x3FE3612720000000, float 0x3FE368E320000000, float 0x3FE3709E00000000, float 0x3FE3785780000000, float 0x3FE3800FC0000000, float 0x3FE387C6C0000000, float 0x3FE38F7C60000000, float 0x3FE39730C0000000, float 0x3FE39EE3C0000000, float 0x3FE3A69580000000, float 0x3FE3AE45E0000000, float 0x3FE3B5F4E0000000, float 0x3FE3BDA280000000, float 0x3FE3C54EC0000000, float 0x3FE3CCF9C0000000, float 0x3FE3D4A340000000, float 0x3FE3DC4B60000000, float 0x3FE3E3F220000000, float 0x3FE3EB9780000000, float 0x3FE3F33B60000000, float 0x3FE3FADDE0000000, float 0x3FE4027EE0000000, float 0x3FE40A1E80000000, float 0x3FE411BCC0000000, float 0x3FE4195960000000, float 0x3FE420F4A0000000, float 0x3FE4288E60000000, float 0x3FE43026A0000000, float 0x3FE437BD60000000, float 0x3FE43F52C0000000, float 0x3FE446E680000000, float 0x3FE44E78C0000000, float 0x3FE4560960000000, float 0x3FE45D98A0000000, float 0x3FE4652640000000, float 0x3FE46CB240000000, float 0x3FE4743CC0000000, float 0x3FE47BC5C0000000, float 0x3FE4834D20000000, float 0x3FE48AD2E0000000, float 0x3FE4925720000000, float 0x3FE499D9A0000000, float 0x3FE4A15AA0000000, float 0x3FE4A8DA00000000, float 0x3FE4B057C0000000, float 0x3FE4B7D3C0000000, float 0x3FE4BF4E40000000, float 0x3FE4C6C700000000, float 0x3FE4CE3E20000000, float 0x3FE4D5B3A0000000, float 0x3FE4DD2760000000, float 0x3FE4E49980000000, float 0x3FE4EC09E0000000, float 0x3FE4F378A0000000, float 0x3FE4FAE5A0000000, float 0x3FE50250E0000000, float 0x3FE509BA60000000, float 0x3FE5112240000000, float 0x3FE5188840000000, float 0x3FE51FECA0000000, float 0x3FE5274F20000000, float 0x3FE52EB000000000, float 0x3FE5360F00000000, float 0x3FE53D6C40000000, float 0x3FE544C7C0000000, float 0x3FE54C2160000000, float 0x3FE5537940000000, float 0x3FE55ACF40000000, float 0x3FE5622380000000, float 0x3FE56975E0000000, float 0x3FE570C680000000, float 0x3FE5781540000000, float 0x3FE57F6200000000, float 0x3FE586AD20000000, float 0x3FE58DF640000000, float 0x3FE5953D80000000, float 0x3FE59C82E0000000, float 0x3FE5A3C660000000, float 0x3FE5AB0800000000, float 0x3FE5B247A0000000, float 0x3FE5B98560000000, float 0x3FE5C0C140000000, float 0x3FE5C7FB40000000, float 0x3FE5CF3340000000, float 0x3FE5D66940000000, float 0x3FE5DD9D60000000, float 0x3FE5E4CF80000000, float 0x3FE5EBFFC0000000, float 0x3FE5F32E00000000, float 0x3FE5FA5A40000000, float 0x3FE6018480000000, float 0x3FE608ACC0000000, float 0x3FE60FD300000000, float 0x3FE616F740000000, float 0x3FE61E1980000000, float 0x3FE62539A0000000, float 0x3FE62C57E0000000, float 0x3FE6337400000000, float 0x3FE63A8E20000000, float 0x3FE641A620000000, float 0x3FE648BC20000000, float 0x3FE64FD000000000, float 0x3FE656E1E0000000, float 0x3FE65DF1A0000000, float 0x3FE664FF60000000, float 0x3FE66C0AE0000000, float 0x3FE6731460000000, float 0x3FE67A1BC0000000, float 0x3FE6812100000000, float 0x3FE6882440000000, float 0x3FE68F2540000000, float 0x3FE6962420000000, float 0x3FE69D20E0000000, float 0x3FE6A41B60000000, float 0x3FE6AB13E0000000, float 0x3FE6B20A20000000, float 0x3FE6B8FE40000000, float 0x3FE6BFF020000000, float 0x3FE6C6DFE0000000, float 0x3FE6CDCD80000000, float 0x3FE6D4B8C0000000, float 0x3FE6DBA200000000, float 0x3FE6E288E0000000, float 0x3FE6E96DA0000000, float 0x3FE6F05020000000, float 0x3FE6F73060000000, float 0x3FE6FE0E80000000, float 0x3FE704EA40000000, float 0x3FE70BC3C0000000, float 0x3FE7129B20000000, float 0x3FE7197020000000, float 0x3FE72042E0000000, float 0x3FE7271360000000, float 0x3FE72DE1A0000000, float 0x3FE734AD80000000, float 0x3FE73B7720000000, float 0x3FE7423E80000000, float 0x3FE7490380000000, float 0x3FE74FC640000000, float 0x3FE75686A0000000, float 0x3FE75D44C0000000, float 0x3FE7640080000000, float 0x3FE76AB9E0000000, float 0x3FE77170E0000000, float 0x3FE77825A0000000, float 0x3FE77ED800000000, float 0x3FE7858800000000, float 0x3FE78C35A0000000, float 0x3FE792E0E0000000, float 0x3FE79989C0000000, float 0x3FE7A03040000000, float 0x3FE7A6D460000000, float 0x3FE7AD7620000000, float 0x3FE7B41560000000, float 0x3FE7BAB240000000, float 0x3FE7C14CC0000000, float 0x3FE7C7E4E0000000, float 0x3FE7CE7A80000000, float 0x3FE7D50DC0000000, float 0x3FE7DB9E80000000, float 0x3FE7E22CE0000000, float 0x3FE7E8B8C0000000, float 0x3FE7EF4220000000, float 0x3FE7F5C920000000, float 0x3FE7FC4DA0000000, float 0x3FE802CFC0000000, float 0x3FE8094F40000000, float 0x3FE80FCC60000000, float 0x3FE8164700000000, float 0x3FE81CBF00000000, float 0x3FE82334A0000000, float 0x3FE829A7C0000000, float 0x3FE8301860000000, float 0x3FE8368680000000, float 0x3FE83CF200000000, float 0x3FE8435B00000000, float 0x3FE849C1A0000000, float 0x3FE8502580000000, float 0x3FE8568700000000, float 0x3FE85CE5E0000000, float 0x3FE8634240000000, float 0x3FE8699C00000000, float 0x3FE86FF340000000, float 0x3FE8764800000000, float 0x3FE87C9A00000000, float 0x3FE882E9A0000000, float 0x3FE8893680000000, float 0x3FE88F80E0000000, float 0x3FE895C8A0000000, float 0x3FE89C0DE0000000, float 0x3FE8A25060000000, float 0x3FE8A89060000000, float 0x3FE8AECDC0000000, float 0x3FE8B50880000000, float 0x3FE8BB40A0000000, float 0x3FE8C17620000000, float 0x3FE8C7A900000000, float 0x3FE8CDD940000000, float 0x3FE8D406E0000000, float 0x3FE8DA31E0000000, float 0x3FE8E05A40000000, float 0x3FE8E67FE0000000, float 0x3FE8ECA2E0000000, float 0x3FE8F2C340000000, float 0x3FE8F8E100000000, float 0x3FE8FEFC00000000, float 0x3FE9051460000000, float 0x3FE90B2A20000000, float 0x3FE9113D20000000, float 0x3FE9174D60000000, float 0x3FE91D5B00000000, float 0x3FE9236600000000, float 0x3FE9296E40000000, float 0x3FE92F73C0000000, float 0x3FE93576A0000000, float 0x3FE93B76A0000000, float 0x3FE9417420000000, float 0x3FE9476EC0000000, float 0x3FE94D66C0000000, float 0x3FE9535C00000000, float 0x3FE9594E80000000, float 0x3FE95F3E40000000, float 0x3FE9652B40000000, float 0x3FE96B15A0000000, float 0x3FE970FD20000000, float 0x3FE976E1E0000000, float 0x3FE97CC400000000, float 0x3FE982A340000000, float 0x3FE9887FC0000000, float 0x3FE98E5980000000, float 0x3FE9943080000000, float 0x3FE99A04C0000000, float 0x3FE99FD620000000, float 0x3FE9A5A4C0000000, float 0x3FE9AB70A0000000, float 0x3FE9B139C0000000, float 0x3FE9B70000000000, float 0x3FE9BCC380000000, float 0x3FE9C28440000000, float 0x3FE9C84220000000, float 0x3FE9CDFD40000000, float 0x3FE9D3B580000000, float 0x3FE9D96B00000000, float 0x3FE9DF1DC0000000, float 0x3FE9E4CD80000000, float 0x3FE9EA7AA0000000, float 0x3FE9F024C0000000, float 0x3FE9F5CC20000000, float 0x3FE9FB70C0000000, float 0x3FEA011260000000, float 0x3FEA06B140000000, float 0x3FEA0C4D60000000, float 0x3FEA11E680000000, float 0x3FEA177CE0000000, float 0x3FEA1D1060000000, float 0x3FEA22A100000000, float 0x3FEA282EE0000000, float 0x3FEA2DB9C0000000, float 0x3FEA3341E0000000, float 0x3FEA38C720000000, float 0x3FEA3E4980000000, float 0x3FEA43C8E0000000, float 0x3FEA494580000000, float 0x3FEA4EBF40000000, float 0x3FEA543620000000, float 0x3FEA59AA20000000, float 0x3FEA5F1B40000000, float 0x3FEA648980000000, float 0x3FEA69F4C0000000, float 0x3FEA6F5D40000000, float 0x3FEA74C2C0000000, float 0x3FEA7A2580000000, float 0x3FEA7F8540000000, float 0x3FEA84E220000000, float 0x3FEA8A3C00000000, float 0x3FEA8F9320000000, float 0x3FEA94E740000000, float 0x3FEA9A3880000000, float 0x3FEA9F86C0000000, float 0x3FEAA4D240000000, float 0x3FEAAA1AC0000000, float 0x3FEAAF6040000000, float 0x3FEAB4A300000000, float 0x3FEAB9E2C0000000, float 0x3FEABF1F80000000, float 0x3FEAC45980000000, float 0x3FEAC99060000000, float 0x3FEACEC480000000, float 0x3FEAD3F580000000, float 0x3FEAD923C0000000, float 0x3FEADE4F00000000, float 0x3FEAE37740000000, float 0x3FEAE89CA0000000, float 0x3FEAEDBF00000000, float 0x3FEAF2DE80000000, float 0x3FEAF7FB00000000, float 0x3FEAFD14A0000000, float 0x3FEB022B40000000, float 0x3FEB073F00000000, float 0x3FEB0C4FC0000000, float 0x3FEB115D80000000, float 0x3FEB166860000000, float 0x3FEB1B7040000000, float 0x3FEB207520000000, float 0x3FEB257720000000, float 0x3FEB2A7620000000, float 0x3FEB2F7220000000, float 0x3FEB346B40000000, float 0x3FEB396160000000, float 0x3FEB3E5480000000, float 0x3FEB4344A0000000, float 0x3FEB4831E0000000, float 0x3FEB4D1C20000000, float 0x3FEB520360000000, float 0x3FEB56E7C0000000, float 0x3FEB5BC900000000, float 0x3FEB60A760000000, float 0x3FEB6582C0000000, float 0x3FEB6A5B20000000, float 0x3FEB6F30A0000000, float 0x3FEB740300000000, float 0x3FEB78D280000000, float 0x3FEB7D9F00000000, float 0x3FEB826880000000, float 0x3FEB872F00000000, float 0x3FEB8BF2A0000000, float 0x3FEB90B320000000, float 0x3FEB9570C0000000, float 0x3FEB9A2B60000000, float 0x3FEB9EE300000000, float 0x3FEBA397A0000000, float 0x3FEBA84940000000, float 0x3FEBACF7E0000000, float 0x3FEBB1A380000000, float 0x3FEBB64C40000000, float 0x3FEBBAF1E0000000, float 0x3FEBBF94A0000000, float 0x3FEBC43440000000, float 0x3FEBC8D100000000, float 0x3FEBCD6AC0000000, float 0x3FEBD20160000000, float 0x3FEBD69520000000, float 0x3FEBDB25E0000000, float 0x3FEBDFB3A0000000, float 0x3FEBE43E60000000, float 0x3FEBE8C620000000, float 0x3FEBED4B00000000, float 0x3FEBF1CCC0000000, float 0x3FEBF64B80000000, float 0x3FEBFAC760000000, float 0x3FEBFF4020000000, float 0x3FEC03B5E0000000, float 0x3FEC0828C0000000, float 0x3FEC0C9880000000, float 0x3FEC110560000000, float 0x3FEC156F40000000, float 0x3FEC19D600000000, float 0x3FEC1E39E0000000, float 0x3FEC229AC0000000, float 0x3FEC26F8A0000000, float 0x3FEC2B5360000000, float 0x3FEC2FAB40000000, float 0x3FEC340020000000, float 0x3FEC385200000000, float 0x3FEC3CA100000000, float 0x3FEC40ECE0000000, float 0x3FEC4535C0000000, float 0x3FEC497BA0000000, float 0x3FEC4DBEA0000000, float 0x3FEC51FE80000000, float 0x3FEC563B80000000, float 0x3FEC5A7560000000, float 0x3FEC5EAC60000000, float 0x3FEC62E060000000, float 0x3FEC671160000000, float 0x3FEC6B3F60000000, float 0x3FEC6F6A60000000, float 0x3FEC739260000000, float 0x3FEC77B780000000, float 0x3FEC7BD980000000, float 0x3FEC7FF8A0000000, float 0x3FEC8414C0000000, float 0x3FEC882DC0000000, float 0x3FEC8C4400000000, float 0x3FEC905720000000, float 0x3FEC946740000000, float 0x3FEC987480000000, float 0x3FEC9C7EA0000000, float 0x3FECA085E0000000, float 0x3FECA48A40000000, float 0x3FECA88B80000000, float 0x3FECAC89C0000000, float 0x3FECB08520000000, float 0x3FECB47D80000000, float 0x3FECB872E0000000, float 0x3FECBC6560000000, float 0x3FECC054E0000000, float 0x3FECC44160000000, float 0x3FECC82AE0000000, float 0x3FECCC1160000000, float 0x3FECCFF500000000, float 0x3FECD3D5C0000000, float 0x3FECD7B360000000, float 0x3FECDB8E20000000, float 0x3FECDF65E0000000, float 0x3FECE33AC0000000, float 0x3FECE70CA0000000, float 0x3FECEADB80000000, float 0x3FECEEA760000000, float 0x3FECF27080000000, float 0x3FECF63680000000, float 0x3FECF9F9A0000000, float 0x3FECFDB9C0000000, float 0x3FED017700000000, float 0x3FED053140000000, float 0x3FED08E8A0000000, float 0x3FED0C9D20000000, float 0x3FED104E80000000, float 0x3FED13FD20000000, float 0x3FED17A8A0000000, float 0x3FED1B5160000000, float 0x3FED1EF720000000, float 0x3FED2299E0000000, float 0x3FED2639E0000000, float 0x3FED29D6C0000000, float 0x3FED2D70E0000000, float 0x3FED310800000000, float 0x3FED349C20000000, float 0x3FED382D80000000, float 0x3FED3BBBE0000000, float 0x3FED3F4760000000, float 0x3FED42CFE0000000, float 0x3FED465580000000, float 0x3FED49D860000000, float 0x3FED4D5820000000, float 0x3FED50D520000000, float 0x3FED544F20000000, float 0x3FED57C660000000, float 0x3FED5B3AA0000000, float 0x3FED5EAC00000000, float 0x3FED621A80000000, float 0x3FED658600000000, float 0x3FED68EEC0000000, float 0x3FED6C54A0000000, float 0x3FED6FB780000000, float 0x3FED7317A0000000, float 0x3FED7674E0000000, float 0x3FED79CF20000000, float 0x3FED7D26A0000000, float 0x3FED807B40000000, float 0x3FED83CD00000000, float 0x3FED871BE0000000, float 0x3FED8A67E0000000, float 0x3FED8DB100000000, float 0x3FED90F760000000, float 0x3FED943AC0000000, float 0x3FED977B60000000, float 0x3FED9AB920000000, float 0x3FED9DF420000000, float 0x3FEDA12C20000000, float 0x3FEDA46160000000, float 0x3FEDA793E0000000, float 0x3FEDAAC360000000, float 0x3FEDADF020000000, float 0x3FEDB11A20000000, float 0x3FEDB44120000000, float 0x3FEDB76580000000, float 0x3FEDBA8700000000, float 0x3FEDBDA5A0000000, float 0x3FEDC0C180000000, float 0x3FEDC3DA80000000, float 0x3FEDC6F0C0000000, float 0x3FEDCA0420000000, float 0x3FEDCD14C0000000, float 0x3FEDD022A0000000, float 0x3FEDD32DC0000000, float 0x3FEDD63600000000, float 0x3FEDD93B80000000, float 0x3FEDDC3E20000000, float 0x3FEDDF3E20000000, float 0x3FEDE23B40000000, float 0x3FEDE535A0000000, float 0x3FEDE82D40000000, float 0x3FEDEB2200000000, float 0x3FEDEE1420000000, float 0x3FEDF10380000000, float 0x3FEDF3F000000000, float 0x3FEDF6D9E0000000, float 0x3FEDF9C0E0000000, float 0x3FEDFCA540000000, float 0x3FEDFF86C0000000, float 0x3FEE0265A0000000, float 0x3FEE0541C0000000, float 0x3FEE081B20000000, float 0x3FEE0AF1C0000000, float 0x3FEE0DC5C0000000, float 0x3FEE109700000000, float 0x3FEE136560000000, float 0x3FEE163140000000, float 0x3FEE18FA40000000, float 0x3FEE1BC0A0000000, float 0x3FEE1E8460000000, float 0x3FEE214540000000, float 0x3FEE2403A0000000, float 0x3FEE26BF20000000, float 0x3FEE297820000000, float 0x3FEE2C2E40000000, float 0x3FEE2EE1E0000000, float 0x3FEE3192C0000000, float 0x3FEE3440E0000000, float 0x3FEE36EC60000000, float 0x3FEE399540000000, float 0x3FEE3C3B80000000, float 0x3FEE3EDF20000000, float 0x3FEE418000000000, float 0x3FEE441E40000000, float 0x3FEE46B9E0000000, float 0x3FEE4952E0000000, float 0x3FEE4BE920000000, float 0x3FEE4E7CE0000000, float 0x3FEE510E00000000, float 0x3FEE539C60000000, float 0x3FEE562840000000, float 0x3FEE58B180000000, float 0x3FEE5B3820000000, float 0x3FEE5DBC20000000, float 0x3FEE603D80000000, float 0x3FEE62BC60000000, float 0x3FEE6538A0000000, float 0x3FEE67B240000000, float 0x3FEE6A2940000000, float 0x3FEE6C9DC0000000, float 0x3FEE6F0FA0000000, float 0x3FEE717F00000000, float 0x3FEE73EBC0000000, float 0x3FEE7655E0000000, float 0x3FEE78BD80000000, float 0x3FEE7B22A0000000, float 0x3FEE7D8520000000, float 0x3FEE7FE520000000, float 0x3FEE8242A0000000, float 0x3FEE849D80000000, float 0x3FEE86F5E0000000, float 0x3FEE894BC0000000, float 0x3FEE8B9F00000000, float 0x3FEE8DEFE0000000, float 0x3FEE903E20000000, float 0x3FEE928A00000000, float 0x3FEE94D340000000, float 0x3FEE971A00000000, float 0x3FEE995E40000000, float 0x3FEE9BA020000000, float 0x3FEE9DDF60000000, float 0x3FEEA01C40000000, float 0x3FEEA256A0000000, float 0x3FEEA48E80000000, float 0x3FEEA6C3E0000000, float 0x3FEEA8F6E0000000, float 0x3FEEAB2760000000, float 0x3FEEAD5560000000, float 0x3FEEAF8100000000, float 0x3FEEB1AA20000000, float 0x3FEEB3D0E0000000, float 0x3FEEB5F520000000, float 0x3FEEB81700000000, float 0x3FEEBA3660000000, float 0x3FEEBC5360000000, float 0x3FEEBE6E00000000, float 0x3FEEC08640000000, float 0x3FEEC29C00000000, float 0x3FEEC4AF60000000, float 0x3FEEC6C060000000, float 0x3FEEC8CF00000000, float 0x3FEECADB20000000, float 0x3FEECCE500000000, float 0x3FEECEEC80000000, float 0x3FEED0F180000000, float 0x3FEED2F440000000, float 0x3FEED4F4A0000000, float 0x3FEED6F2A0000000, float 0x3FEED8EE40000000, float 0x3FEEDAE7A0000000, float 0x3FEEDCDEA0000000, float 0x3FEEDED340000000, float 0x3FEEE0C580000000, float 0x3FEEE2B580000000, float 0x3FEEE4A340000000, float 0x3FEEE68EA0000000, float 0x3FEEE877A0000000, float 0x3FEEEA5E60000000, float 0x3FEEEC42C0000000, float 0x3FEEEE2500000000, float 0x3FEEF004E0000000, float 0x3FEEF1E260000000, float 0x3FEEF3BDC0000000, float 0x3FEEF596C0000000, float 0x3FEEF76D80000000, float 0x3FEEF94200000000, float 0x3FEEFB1440000000, float 0x3FEEFCE440000000, float 0x3FEEFEB200000000, float 0x3FEF007D80000000, float 0x3FEF0246E0000000, float 0x3FEF040DE0000000, float 0x3FEF05D2C0000000, float 0x3FEF079540000000, float 0x3FEF0955C0000000, float 0x3FEF0B13E0000000, float 0x3FEF0CCFE0000000, float 0x3FEF0E89A0000000, float 0x3FEF104140000000, float 0x3FEF11F6A0000000, float 0x3FEF13A9E0000000, float 0x3FEF155AE0000000, float 0x3FEF1709C0000000, float 0x3FEF18B680000000, float 0x3FEF1A6100000000, float 0x3FEF1C0980000000, float 0x3FEF1DAFC0000000, float 0x3FEF1F53C0000000, float 0x3FEF20F5C0000000, float 0x3FEF2295A0000000, float 0x3FEF243360000000, float 0x3FEF25CEE0000000, float 0x3FEF276860000000, float 0x3FEF28FFC0000000, float 0x3FEF2A9500000000, float 0x3FEF2C2840000000, float 0x3FEF2DB940000000, float 0x3FEF2F4840000000, float 0x3FEF30D520000000, float 0x3FEF326000000000, float 0x3FEF33E8C0000000, float 0x3FEF356F80000000, float 0x3FEF36F420000000, float 0x3FEF3876A0000000, float 0x3FEF39F740000000, float 0x3FEF3B75A0000000, float 0x3FEF3CF220000000, float 0x3FEF3E6C80000000, float 0x3FEF3FE500000000, float 0x3FEF415B60000000, float 0x3FEF42CFC0000000, float 0x3FEF444200000000, float 0x3FEF45B260000000, float 0x3FEF4720C0000000, float 0x3FEF488D20000000, float 0x3FEF49F780000000, float 0x3FEF4B5FE0000000, float 0x3FEF4CC660000000, float 0x3FEF4E2AC0000000, float 0x3FEF4F8D40000000, float 0x3FEF50EDE0000000, float 0x3FEF524C60000000, float 0x3FEF53A900000000, float 0x3FEF5503C0000000, float 0x3FEF565C80000000, float 0x3FEF57B360000000, float 0x3FEF590840000000, float 0x3FEF5A5B40000000, float 0x3FEF5BAC60000000, float 0x3FEF5CFBA0000000, float 0x3FEF5E48E0000000, float 0x3FEF5F9440000000, float 0x3FEF60DDC0000000, float 0x3FEF622560000000, float 0x3FEF636B20000000, float 0x3FEF64AF00000000, float 0x3FEF65F120000000, float 0x3FEF673140000000, float 0x3FEF686F80000000, float 0x3FEF69AC00000000, float 0x3FEF6AE6A0000000, float 0x3FEF6C1F80000000, float 0x3FEF6D5660000000, float 0x3FEF6E8B80000000, float 0x3FEF6FBEE0000000, float 0x3FEF70F060000000, float 0x3FEF722020000000, float 0x3FEF734E00000000, float 0x3FEF747A20000000, float 0x3FEF75A480000000, float 0x3FEF76CD00000000, float 0x3FEF77F3C0000000, float 0x3FEF7918C0000000, float 0x3FEF7A3C00000000, float 0x3FEF7B5D80000000, float 0x3FEF7C7D40000000, float 0x3FEF7D9B40000000, float 0x3FEF7EB780000000, float 0x3FEF7FD200000000, float 0x3FEF80EAC0000000, float 0x3FEF8201C0000000, float 0x3FEF831720000000, float 0x3FEF842AC0000000, float 0x3FEF853CC0000000, float 0x3FEF864D00000000, float 0x3FEF875B80000000, float 0x3FEF886860000000, float 0x3FEF897380000000, float 0x3FEF8A7D00000000, float 0x3FEF8B84E0000000, float 0x3FEF8C8B00000000, float 0x3FEF8D8F80000000, float 0x3FEF8E9260000000, float 0x3FEF8F93A0000000, float 0x3FEF909320000000, float 0x3FEF919120000000, float 0x3FEF928D60000000, float 0x3FEF938820000000, float 0x3FEF948120000000, float 0x3FEF9578A0000000, float 0x3FEF966E80000000, float 0x3FEF9762C0000000, float 0x3FEF985580000000, float 0x3FEF994680000000, float 0x3FEF9A3600000000, float 0x3FEF9B2400000000, float 0x3FEF9C1060000000, float 0x3FEF9CFB20000000, float 0x3FEF9DE460000000, float 0x3FEF9ECC20000000, float 0x3FEF9FB240000000, float 0x3FEFA096E0000000, float 0x3FEFA17A00000000, float 0x3FEFA25BA0000000, float 0x3FEFA33BA0000000, float 0x3FEFA41A20000000, float 0x3FEFA4F720000000, float 0x3FEFA5D2C0000000, float 0x3FEFA6ACC0000000, float 0x3FEFA78540000000, float 0x3FEFA85C60000000, float 0x3FEFA931E0000000, float 0x3FEFAA0600000000, float 0x3FEFAAD8A0000000, float 0x3FEFABA9C0000000, float 0x3FEFAC7980000000, float 0x3FEFAD47C0000000, float 0x3FEFAE14A0000000, float 0x3FEFAEE000000000, float 0x3FEFAFAA00000000, float 0x3FEFB07280000000, float 0x3FEFB139A0000000, float 0x3FEFB1FF60000000, float 0x3FEFB2C3A0000000, float 0x3FEFB38680000000, float 0x3FEFB44800000000, float 0x3FEFB50820000000, float 0x3FEFB5C6E0000000, float 0x3FEFB68440000000, float 0x3FEFB74040000000, float 0x3FEFB7FAE0000000, float 0x3FEFB8B420000000, float 0x3FEFB96C00000000, float 0x3FEFBA22A0000000, float 0x3FEFBAD7C0000000, float 0x3FEFBB8BA0000000, float 0x3FEFBC3E40000000, float 0x3FEFBCEF80000000, float 0x3FEFBD9F60000000, float 0x3FEFBE4E00000000, float 0x3FEFBEFB40000000, float 0x3FEFBFA740000000, float 0x3FEFC051E0000000, float 0x3FEFC0FB60000000, float 0x3FEFC1A380000000, float 0x3FEFC24A40000000, float 0x3FEFC2EFE0000000, float 0x3FEFC39420000000, float 0x3FEFC43740000000, float 0x3FEFC4D900000000, float 0x3FEFC57980000000, float 0x3FEFC618E0000000, float 0x3FEFC6B6E0000000, float 0x3FEFC753C0000000, float 0x3FEFC7EF60000000, float 0x3FEFC889C0000000, float 0x3FEFC922E0000000, float 0x3FEFC9BAE0000000, float 0x3FEFCA51A0000000, float 0x3FEFCAE740000000, float 0x3FEFCB7BA0000000, float 0x3FEFCC0EC0000000, float 0x3FEFCCA0C0000000, float 0x3FEFCD31A0000000, float 0x3FEFCDC140000000, float 0x3FEFCE4FC0000000, float 0x3FEFCEDD20000000, float 0x3FEFCF6960000000, float 0x3FEFCFF480000000, float 0x3FEFD07E60000000, float 0x3FEFD10720000000, float 0x3FEFD18EE0000000, float 0x3FEFD21560000000, float 0x3FEFD29AC0000000, float 0x3FEFD31F20000000, float 0x3FEFD3A240000000, float 0x3FEFD42460000000, float 0x3FEFD4A580000000, float 0x3FEFD52560000000, float 0x3FEFD5A440000000, float 0x3FEFD62200000000, float 0x3FEFD69EC0000000, float 0x3FEFD71A60000000, float 0x3FEFD794E0000000, float 0x3FEFD80E60000000, float 0x3FEFD886E0000000, float 0x3FEFD8FE60000000, float 0x3FEFD974C0000000, float 0x3FEFD9EA20000000, float 0x3FEFDA5E60000000, float 0x3FEFDAD1C0000000, float 0x3FEFDB4400000000, float 0x3FEFDBB560000000, float 0x3FEFDC25A0000000, float 0x3FEFDC94E0000000, float 0x3FEFDD0340000000, float 0x3FEFDD7080000000, float 0x3FEFDDDCE0000000, float 0x3FEFDE4840000000, float 0x3FEFDEB2A0000000, float 0x3FEFDF1C00000000, float 0x3FEFDF8480000000, float 0x3FEFDFEC00000000, float 0x3FEFE05280000000, float 0x3FEFE0B820000000, float 0x3FEFE11CC0000000, float 0x3FEFE18080000000, float 0x3FEFE1E360000000, float 0x3FEFE24540000000, float 0x3FEFE2A640000000, float 0x3FEFE30640000000, float 0x3FEFE36560000000, float 0x3FEFE3C3A0000000, float 0x3FEFE42100000000, float 0x3FEFE47D80000000, float 0x3FEFE4D920000000, float 0x3FEFE533C0000000, float 0x3FEFE58DA0000000, float 0x3FEFE5E6A0000000, float 0x3FEFE63EC0000000, float 0x3FEFE695E0000000, float 0x3FEFE6EC60000000, float 0x3FEFE741E0000000, float 0x3FEFE796A0000000, float 0x3FEFE7EA60000000, float 0x3FEFE83D80000000, float 0x3FEFE88FA0000000, float 0x3FEFE8E100000000, float 0x3FEFE931A0000000, float 0x3FEFE98160000000, float 0x3FEFE9D060000000, float 0x3FEFEA1E80000000, float 0x3FEFEA6BE0000000, float 0x3FEFEAB860000000, float 0x3FEFEB0420000000, float 0x3FEFEB4F20000000, float 0x3FEFEB9960000000, float 0x3FEFEBE2E0000000, float 0x3FEFEC2B80000000, float 0x3FEFEC7360000000, float 0x3FEFECBAA0000000, float 0x3FEFED0100000000, float 0x3FEFED46C0000000, float 0x3FEFED8BA0000000, float 0x3FEFEDCFE0000000, float 0x3FEFEE1360000000, float 0x3FEFEE5620000000, float 0x3FEFEE9820000000, float 0x3FEFEED960000000, float 0x3FEFEF1A00000000, float 0x3FEFEF59E0000000, float 0x3FEFEF9920000000, float 0x3FEFEFD7A0000000, float 0x3FEFF01560000000, float 0x3FEFF05280000000, float 0x3FEFF08F00000000, float 0x3FEFF0CAC0000000, float 0x3FEFF105E0000000, float 0x3FEFF14040000000, float 0x3FEFF17A20000000, float 0x3FEFF1B320000000, float 0x3FEFF1EBA0000000, float 0x3FEFF22380000000, float 0x3FEFF25AA0000000, float 0x3FEFF29120000000, float 0x3FEFF2C720000000, float 0x3FEFF2FC60000000, float 0x3FEFF33100000000, float 0x3FEFF36500000000, float 0x3FEFF39880000000, float 0x3FEFF3CB40000000, float 0x3FEFF3FD80000000, float 0x3FEFF42F20000000, float 0x3FEFF46020000000, float 0x3FEFF49080000000, float 0x3FEFF4C060000000, float 0x3FEFF4EFA0000000, float 0x3FEFF51E40000000, float 0x3FEFF54C60000000, float 0x3FEFF579E0000000, float 0x3FEFF5A6E0000000, float 0x3FEFF5D340000000, float 0x3FEFF5FF20000000, float 0x3FEFF62A80000000, float 0x3FEFF65540000000, float 0x3FEFF67F60000000, float 0x3FEFF6A920000000, float 0x3FEFF6D240000000, float 0x3FEFF6FAE0000000, float 0x3FEFF72300000000, float 0x3FEFF74AA0000000, float 0x3FEFF771A0000000, float 0x3FEFF79820000000, float 0x3FEFF7BE40000000, float 0x3FEFF7E3C0000000, float 0x3FEFF808E0000000, float 0x3FEFF82D60000000, float 0x3FEFF85180000000, float 0x3FEFF87500000000, float 0x3FEFF89820000000, float 0x3FEFF8BAC0000000, float 0x3FEFF8DCE0000000, float 0x3FEFF8FEA0000000, float 0x3FEFF91FE0000000, float 0x3FEFF940A0000000, float 0x3FEFF960E0000000, float 0x3FEFF980C0000000, float 0x3FEFF9A020000000, float 0x3FEFF9BF20000000, float 0x3FEFF9DDA0000000, float 0x3FEFF9FBC0000000, float 0x3FEFFA1960000000, float 0x3FEFFA36A0000000, float 0x3FEFFA5380000000, float 0x3FEFFA6FE0000000, float 0x3FEFFA8BE0000000, float 0x3FEFFAA760000000, float 0x3FEFFAC280000000, float 0x3FEFFADD40000000, float 0x3FEFFAF7A0000000, float 0x3FEFFB11A0000000, float 0x3FEFFB2B40000000, float 0x3FEFFB4460000000, float 0x3FEFFB5D20000000, float 0x3FEFFB75A0000000, float 0x3FEFFB8DA0000000, float 0x3FEFFBA560000000, float 0x3FEFFBBCA0000000, float 0x3FEFFBD380000000, float 0x3FEFFBEA20000000, float 0x3FEFFC0060000000, float 0x3FEFFC1640000000, float 0x3FEFFC2BC0000000, float 0x3FEFFC40E0000000, float 0x3FEFFC55C0000000, float 0x3FEFFC6A40000000, float 0x3FEFFC7E60000000, float 0x3FEFFC9240000000, float 0x3FEFFCA5C0000000, float 0x3FEFFCB8E0000000, float 0x3FEFFCCBC0000000, float 0x3FEFFCDE40000000, float 0x3FEFFCF080000000, float 0x3FEFFD0260000000, float 0x3FEFFD1400000000, float 0x3FEFFD2540000000, float 0x3FEFFD3640000000, float 0x3FEFFD4700000000, float 0x3FEFFD5760000000, float 0x3FEFFD6780000000, float 0x3FEFFD7760000000, float 0x3FEFFD86E0000000, float 0x3FEFFD9620000000, float 0x3FEFFDA520000000, float 0x3FEFFDB3E0000000, float 0x3FEFFDC240000000, float 0x3FEFFDD080000000, float 0x3FEFFDDE60000000, float 0x3FEFFDEC00000000, float 0x3FEFFDF980000000, float 0x3FEFFE06A0000000, float 0x3FEFFE1380000000, float 0x3FEFFE2020000000, float 0x3FEFFE2CA0000000, float 0x3FEFFE38C0000000, float 0x3FEFFE44A0000000, float 0x3FEFFE5060000000, float 0x3FEFFE5BC0000000, float 0x3FEFFE6700000000, float 0x3FEFFE7200000000, float 0x3FEFFE7CE0000000, float 0x3FEFFE8760000000, float 0x3FEFFE91C0000000, float 0x3FEFFE9BE0000000, float 0x3FEFFEA5C0000000, float 0x3FEFFEAF80000000, float 0x3FEFFEB900000000, float 0x3FEFFEC260000000, float 0x3FEFFECB60000000, float 0x3FEFFED460000000, float 0x3FEFFEDD20000000, float 0x3FEFFEE5A0000000, float 0x3FEFFEEDE0000000, float 0x3FEFFEF620000000, float 0x3FEFFEFE00000000, float 0x3FEFFF05E0000000, float 0x3FEFFF0D80000000, float 0x3FEFFF14E0000000, float 0x3FEFFF1C20000000, float 0x3FEFFF2340000000, float 0x3FEFFF2A40000000, float 0x3FEFFF3100000000, float 0x3FEFFF3780000000, float 0x3FEFFF3E00000000, float 0x3FEFFF4440000000, float 0x3FEFFF4A60000000, float 0x3FEFFF5060000000, float 0x3FEFFF5640000000, float 0x3FEFFF5C00000000, float 0x3FEFFF6180000000, float 0x3FEFFF66E0000000, float 0x3FEFFF6C20000000, float 0x3FEFFF7140000000, float 0x3FEFFF7640000000, float 0x3FEFFF7B20000000, float 0x3FEFFF7FE0000000, float 0x3FEFFF8480000000, float 0x3FEFFF8900000000, float 0x3FEFFF8D60000000, float 0x3FEFFF91A0000000, float 0x3FEFFF95A0000000, float 0x3FEFFF99A0000000, float 0x3FEFFF9DA0000000, float 0x3FEFFFA160000000, float 0x3FEFFFA500000000, float 0x3FEFFFA8A0000000, float 0x3FEFFFAC00000000, float 0x3FEFFFAF60000000, float 0x3FEFFFB2A0000000, float 0x3FEFFFB5C0000000, float 0x3FEFFFB8E0000000, float 0x3FEFFFBBC0000000, float 0x3FEFFFBEA0000000, float 0x3FEFFFC180000000, float 0x3FEFFFC420000000, float 0x3FEFFFC6C0000000, float 0x3FEFFFC940000000, float 0x3FEFFFCBA0000000, float 0x3FEFFFCE00000000, float 0x3FEFFFD040000000, float 0x3FEFFFD280000000, float 0x3FEFFFD4A0000000, float 0x3FEFFFD6A0000000, float 0x3FEFFFD8A0000000, float 0x3FEFFFDA80000000, float 0x3FEFFFDC60000000, float 0x3FEFFFDE20000000, float 0x3FEFFFDFC0000000, float 0x3FEFFFE160000000, float 0x3FEFFFE300000000, float 0x3FEFFFE480000000, float 0x3FEFFFE5E0000000, float 0x3FEFFFE760000000, float 0x3FEFFFE8A0000000, float 0x3FEFFFE9E0000000, float 0x3FEFFFEB20000000, float 0x3FEFFFEC60000000, float 0x3FEFFFED80000000, float 0x3FEFFFEE80000000, float 0x3FEFFFEF80000000, float 0x3FEFFFF080000000, float 0x3FEFFFF180000000, float 0x3FEFFFF260000000, float 0x3FEFFFF340000000, float 0x3FEFFFF400000000, float 0x3FEFFFF4C0000000, float 0x3FEFFFF580000000, float 0x3FEFFFF640000000, float 0x3FEFFFF6E0000000, float 0x3FEFFFF780000000, float 0x3FEFFFF820000000, float 0x3FEFFFF8A0000000, float 0x3FEFFFF940000000, float 0x3FEFFFF9C0000000, float 0x3FEFFFFA20000000, float 0x3FEFFFFAA0000000, float 0x3FEFFFFB00000000, float 0x3FEFFFFB80000000, float 0x3FEFFFFBE0000000, float 0x3FEFFFFC20000000, float 0x3FEFFFFC80000000, float 0x3FEFFFFCC0000000, float 0x3FEFFFFD20000000, float 0x3FEFFFFD60000000, float 0x3FEFFFFDA0000000, float 0x3FEFFFFDE0000000, float 0x3FEFFFFE00000000, float 0x3FEFFFFE40000000, float 0x3FEFFFFE60000000, float 0x3FEFFFFEA0000000, float 0x3FEFFFFEC0000000, float 0x3FEFFFFEE0000000, float 0x3FEFFFFF00000000, float 0x3FEFFFFF20000000, float 0x3FEFFFFF40000000, float 0x3FEFFFFF60000000, float 0x3FEFFFFF60000000, float 0x3FEFFFFF80000000, float 0x3FEFFFFF80000000, float 0x3FEFFFFFA0000000, float 0x3FEFFFFFA0000000, float 0x3FEFFFFFC0000000, float 0x3FEFFFFFC0000000, float 0x3FEFFFFFC0000000, float 0x3FEFFFFFE0000000, float 0x3FEFFFFFE0000000, float 0x3FEFFFFFE0000000, float 0x3FEFFFFFE0000000, float 0x3FEFFFFFE0000000, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00], align 16
@vwin8192 = internal global [4096 x float] [float 0x3E6F07F8C0000000, float 0x3EA1710C40000000, float 0x3EB83912E0000000, float 0x3EC7BD2A00000000, float 0x3ED39EF6E0000000, float 0x3EDD4F85C0000000, float 0x3EE4781320000000, float 0x3EEB405E80000000, float 0x3EF1806700000000, float 0x3EF5DC9C60000000, float 0x3EFAB4D620000000, float 0x3F00048D80000000, float 0x3F02ECB240000000, float 0x3F0612D920000000, float 0x3F09770240000000, float 0x3F0D192A20000000, float 0x3F107CABC0000000, float 0x3F128BC3A0000000, float 0x3F14B9DCA0000000, float 0x3F1706F4E0000000, float 0x3F19731000000000, float 0x3F1BFE2AA0000000, float 0x3F1EA84480000000, float 0x3F20B8AFC0000000, float 0x3F222CBDC0000000, float 0x3F23B04C60000000, float 0x3F254359E0000000, float 0x3F26E5E7E0000000, float 0x3F2897F660000000, float 0x3F2A5983C0000000, float 0x3F2C2A91A0000000, float 0x3F2E0B1E60000000, float 0x3F2FFB2BC0000000, float 0x3F30FD5C60000000, float 0x3F3204E240000000, float 0x3F33142800000000, float 0x3F342B2D20000000, float 0x3F3549F240000000, float 0x3F367076A0000000, float 0x3F379EBAE0000000, float 0x3F38D4BEA0000000, float 0x3F3A1281C0000000, float 0x3F3B580440000000, float 0x3F3CA545C0000000, float 0x3F3DFA4720000000, float 0x3F3F570780000000, float 0x3F405DC360000000, float 0x3F4113E2C0000000, float 0x3F41CDE1A0000000, float 0x3F428BC000000000, float 0x3F434D7DE0000000, float 0x3F44131B40000000, float 0x3F44DC9800000000, float 0x3F45A9F420000000, float 0x3F467B2F80000000, float 0x3F47504A60000000, float 0x3F482944A0000000, float 0x3F49061E00000000, float 0x3F49E6D6C0000000, float 0x3F4ACB6E80000000, float 0x3F4BB3E5A0000000, float 0x3F4CA03BC0000000, float 0x3F4D907100000000, float 0x3F4E848540000000, float 0x3F4F7C7880000000, float 0x3F503C2580000000, float 0x3F50BBFE20000000, float 0x3F513DC620000000, float 0x3F51C17DC0000000, float 0x3F524724A0000000, float 0x3F52CEBAE0000000, float 0x3F535840A0000000, float 0x3F53E3B5C0000000, float 0x3F54711A20000000, float 0x3F55006DC0000000, float 0x3F5591B0C0000000, float 0x3F5624E300000000, float 0x3F56BA0480000000, float 0x3F57511520000000, float 0x3F57EA1520000000, float 0x3F58850420000000, float 0x3F5921E260000000, float 0x3F59C0AFC0000000, float 0x3F5A616C40000000, float 0x3F5B0417E0000000, float 0x3F5BA8B280000000, float 0x3F5C4F3C20000000, float 0x3F5CF7B4C0000000, float 0x3F5DA21C60000000, float 0x3F5E4E7300000000, float 0x3F5EFCB880000000, float 0x3F5FACECE0000000, float 0x3F602F8820000000, float 0x3F60899120000000, float 0x3F60E491A0000000, float 0x3F61408980000000, float 0x3F619D78C0000000, float 0x3F61FB5F60000000, float 0x3F625A3D60000000, float 0x3F62BA12A0000000, float 0x3F631ADF60000000, float 0x3F637CA340000000, float 0x3F63DF5E80000000, float 0x3F64431100000000, float 0x3F64A7BAE0000000, float 0x3F650D5BE0000000, float 0x3F6573F420000000, float 0x3F65DB83A0000000, float 0x3F66440A60000000, float 0x3F66AD8840000000, float 0x3F6717FD40000000, float 0x3F67836980000000, float 0x3F67EFCCE0000000, float 0x3F685D2760000000, float 0x3F68CB78E0000000, float 0x3F693AC180000000, float 0x3F69AB0140000000, float 0x3F6A1C3820000000, float 0x3F6A8E6600000000, float 0x3F6B018AC0000000, float 0x3F6B75A6A0000000, float 0x3F6BEAB980000000, float 0x3F6C60C340000000, float 0x3F6CD7C400000000, float 0x3F6D4FBBC0000000, float 0x3F6DC8AA40000000, float 0x3F6E428FE0000000, float 0x3F6EBD6C20000000, float 0x3F6F393F60000000, float 0x3F6FB60980000000, float 0x3F7019E520000000, float 0x3F70594100000000, float 0x3F70991840000000, float 0x3F70D96AE0000000, float 0x3F711A38C0000000, float 0x3F715B8220000000, float 0x3F719D46E0000000, float 0x3F71DF86E0000000, float 0x3F72224240000000, float 0x3F726578E0000000, float 0x3F72A92AE0000000, float 0x3F72ED5840000000, float 0x3F733200C0000000, float 0x3F737724A0000000, float 0x3F73BCC3C0000000, float 0x3F7402DE20000000, float 0x3F744973C0000000, float 0x3F749084A0000000, float 0x3F74D810C0000000, float 0x3F75201800000000, float 0x3F75689A80000000, float 0x3F75B19820000000, float 0x3F75FB1120000000, float 0x3F76450520000000, float 0x3F768F7460000000, float 0x3F76DA5EA0000000, float 0x3F7725C420000000, float 0x3F7771A4C0000000, float 0x3F77BE0080000000, float 0x3F780AD740000000, float 0x3F78582920000000, float 0x3F78A5F620000000, float 0x3F78F43E40000000, float 0x3F79430140000000, float 0x3F79923F60000000, float 0x3F79E1F880000000, float 0x3F7A322CC0000000, float 0x3F7A82DBE0000000, float 0x3F7AD40620000000, float 0x3F7B25AB40000000, float 0x3F7B77CB60000000, float 0x3F7BCA6660000000, float 0x3F7C1D7C60000000, float 0x3F7C710D60000000, float 0x3F7CC51920000000, float 0x3F7D199FE0000000, float 0x3F7D6EA180000000, float 0x3F7DC41E00000000, float 0x3F7E1A1560000000, float 0x3F7E7087A0000000, float 0x3F7EC774A0000000, float 0x3F7F1EDC80000000, float 0x3F7F76BF40000000, float 0x3F7FCF1CA0000000, float 0x3F8013FA80000000, float 0x3F8040A400000000, float 0x3F806D8AE0000000, float 0x3F809AAF20000000, float 0x3F80C810C0000000, float 0x3F80F5AFC0000000, float 0x3F81238C00000000, float 0x3F8151A5A0000000, float 0x3F817FFCA0000000, float 0x3F81AE9100000000, float 0x3F81DD62A0000000, float 0x3F820C71A0000000, float 0x3F823BBDE0000000, float 0x3F826B4760000000, float 0x3F829B0E40000000, float 0x3F82CB1260000000, float 0x3F82FB53C0000000, float 0x3F832BD260000000, float 0x3F835C8E60000000, float 0x3F838D8780000000, float 0x3F83BEBE00000000, float 0x3F83F031A0000000, float 0x3F8421E280000000, float 0x3F8453D0A0000000, float 0x3F8485FC00000000, float 0x3F84B86480000000, float 0x3F84EB0A40000000, float 0x3F851DED20000000, float 0x3F85510D40000000, float 0x3F85846A80000000, float 0x3F85B80500000000, float 0x3F85EBDCA0000000, float 0x3F861FF160000000, float 0x3F86544340000000, float 0x3F8688D240000000, float 0x3F86BD9E60000000, float 0x3F86F2A7A0000000, float 0x3F8727EE00000000, float 0x3F875D7180000000, float 0x3F87933220000000, float 0x3F87C92FC0000000, float 0x3F87FF6A80000000, float 0x3F8835E240000000, float 0x3F886C9720000000, float 0x3F88A38900000000, float 0x3F88DAB800000000, float 0x3F891223E0000000, float 0x3F8949CCE0000000, float 0x3F8981B2E0000000, float 0x3F89B9D5E0000000, float 0x3F89F23600000000, float 0x3F8A2AD300000000, float 0x3F8A63ACE0000000, float 0x3F8A9CC3E0000000, float 0x3F8AD617C0000000, float 0x3F8B0FA8A0000000, float 0x3F8B497660000000, float 0x3F8B838120000000, float 0x3F8BBDC8E0000000, float 0x3F8BF84D60000000, float 0x3F8C330EE0000000, float 0x3F8C6E0D40000000, float 0x3F8CA94880000000, float 0x3F8CE4C0A0000000, float 0x3F8D2075A0000000, float 0x3F8D5C6780000000, float 0x3F8D989640000000, float 0x3F8DD501C0000000, float 0x3F8E11AA20000000, float 0x3F8E4E8F60000000, float 0x3F8E8BB160000000, float 0x3F8EC91040000000, float 0x3F8F06ABE0000000, float 0x3F8F448440000000, float 0x3F8F829960000000, float 0x3F8FC0EB40000000, float 0x3F8FFF7A00000000, float 0x3F901F22C0000000, float 0x3F903EA6C0000000, float 0x3F905E4940000000, float 0x3F907E0A00000000, float 0x3F909DE920000000, float 0x3F90BDE6A0000000, float 0x3F90DE0260000000, float 0x3F90FE3CA0000000, float 0x3F911E9520000000, float 0x3F913F0BE0000000, float 0x3F915FA100000000, float 0x3F91805480000000, float 0x3F91A12640000000, float 0x3F91C21640000000, float 0x3F91E324A0000000, float 0x3F92045160000000, float 0x3F92259C40000000, float 0x3F92470580000000, float 0x3F92688D00000000, float 0x3F928A32C0000000, float 0x3F92ABF6C0000000, float 0x3F92CDD920000000, float 0x3F92EFD9A0000000, float 0x3F9311F880000000, float 0x3F93343580000000, float 0x3F935690E0000000, float 0x3F93790A60000000, float 0x3F939BA220000000, float 0x3F93BE5820000000, float 0x3F93E12C40000000, float 0x3F94041EA0000000, float 0x3F94272F40000000, float 0x3F944A5E20000000, float 0x3F946DAB20000000, float 0x3F94911640000000, float 0x3F94B49FA0000000, float 0x3F94D84720000000, float 0x3F94FC0CE0000000, float 0x3F951FF0C0000000, float 0x3F9543F2E0000000, float 0x3F95681300000000, float 0x3F958C5160000000, float 0x3F95B0ADE0000000, float 0x3F95D52880000000, float 0x3F95F9C140000000, float 0x3F961E7820000000, float 0x3F96434D20000000, float 0x3F96684040000000, float 0x3F968D5160000000, float 0x3F96B280C0000000, float 0x3F96D7CE20000000, float 0x3F96FD39A0000000, float 0x3F9722C340000000, float 0x3F97486AE0000000, float 0x3F976E30A0000000, float 0x3F97941460000000, float 0x3F97BA1620000000, float 0x3F97E03620000000, float 0x3F98067400000000, float 0x3F982CD000000000, float 0x3F98534A00000000, float 0x3F9879E200000000, float 0x3F98A09820000000, float 0x3F98C76C20000000, float 0x3F98EE5E40000000, float 0x3F99156E40000000, float 0x3F993C9C60000000, float 0x3F9963E860000000, float 0x3F998B5260000000, float 0x3F99B2DA60000000, float 0x3F99DA8060000000, float 0x3F9A024440000000, float 0x3F9A2A2620000000, float 0x3F9A522600000000, float 0x3F9A7A43C0000000, float 0x3F9AA27F80000000, float 0x3F9ACAD920000000, float 0x3F9AF350A0000000, float 0x3F9B1BE620000000, float 0x3F9B449980000000, float 0x3F9B6D6AC0000000, float 0x3F9B965A00000000, float 0x3F9BBF6700000000, float 0x3F9BE89200000000, float 0x3F9C11DAC0000000, float 0x3F9C3B4180000000, float 0x3F9C64C600000000, float 0x3F9C8E6860000000, float 0x3F9CB828A0000000, float 0x3F9CE206C0000000, float 0x3F9D0C02A0000000, float 0x3F9D361C60000000, float 0x3F9D605400000000, float 0x3F9D8AA960000000, float 0x3F9DB51C80000000, float 0x3F9DDFAD80000000, float 0x3F9E0A5C40000000, float 0x3F9E3528C0000000, float 0x3F9E601320000000, float 0x3F9E8B1B40000000, float 0x3F9EB64100000000, float 0x3F9EE184A0000000, float 0x3F9F0CE600000000, float 0x3F9F386520000000, float 0x3F9F6401E0000000, float 0x3F9F8FBC80000000, float 0x3F9FBB94C0000000, float 0x3F9FE78AA0000000, float 0x3FA009CF20000000, float 0x3FA01FE7E0000000, float 0x3FA0360F60000000, float 0x3FA04C45C0000000, float 0x3FA0628B00000000, float 0x3FA078DF00000000, float 0x3FA08F41E0000000, float 0x3FA0A5B380000000, float 0x3FA0BC3420000000, float 0x3FA0D2C360000000, float 0x3FA0E96180000000, float 0x3FA1000E80000000, float 0x3FA116CA40000000, float 0x3FA12D94E0000000, float 0x3FA1446E20000000, float 0x3FA15B5660000000, float 0x3FA1724D40000000, float 0x3FA1895300000000, float 0x3FA1A06780000000, float 0x3FA1B78AE0000000, float 0x3FA1CEBCE0000000, float 0x3FA1E5FDC0000000, float 0x3FA1FD4D60000000, float 0x3FA214ABC0000000, float 0x3FA22C18E0000000, float 0x3FA24394C0000000, float 0x3FA25B1F60000000, float 0x3FA272B8C0000000, float 0x3FA28A60E0000000, float 0x3FA2A217C0000000, float 0x3FA2B9DD40000000, float 0x3FA2D1B1A0000000, float 0x3FA2E994A0000000, float 0x3FA3018680000000, float 0x3FA3198700000000, float 0x3FA3319620000000, float 0x3FA349B420000000, float 0x3FA361E0C0000000, float 0x3FA37A1C00000000, float 0x3FA3926600000000, float 0x3FA3AABEC0000000, float 0x3FA3C32620000000, float 0x3FA3DB9C40000000, float 0x3FA3F42100000000, float 0x3FA40CB480000000, float 0x3FA42556A0000000, float 0x3FA43E0760000000, float 0x3FA456C6E0000000, float 0x3FA46F9500000000, float 0x3FA48871C0000000, float 0x3FA4A15D20000000, float 0x3FA4BA5740000000, float 0x3FA4D35FE0000000, float 0x3FA4EC7740000000, float 0x3FA5059D40000000, float 0x3FA51ED1E0000000, float 0x3FA5381500000000, float 0x3FA55166E0000000, float 0x3FA56AC760000000, float 0x3FA5843680000000, float 0x3FA59DB420000000, float 0x3FA5B74080000000, float 0x3FA5D0DB60000000, float 0x3FA5EA84C0000000, float 0x3FA6043CE0000000, float 0x3FA61E0380000000, float 0x3FA637D8C0000000, float 0x3FA651BCA0000000, float 0x3FA66BAF00000000, float 0x3FA685AFE0000000, float 0x3FA69FBF60000000, float 0x3FA6B9DD80000000, float 0x3FA6D40A20000000, float 0x3FA6EE4540000000, float 0x3FA7088F00000000, float 0x3FA722E740000000, float 0x3FA73D4E00000000, float 0x3FA757C360000000, float 0x3FA7724740000000, float 0x3FA78CD980000000, float 0x3FA7A77A60000000, float 0x3FA7C229E0000000, float 0x3FA7DCE7C0000000, float 0x3FA7F7B420000000, float 0x3FA8128F00000000, float 0x3FA82D7860000000, float 0x3FA8487040000000, float 0x3FA86376A0000000, float 0x3FA87E8B80000000, float 0x3FA899AEC0000000, float 0x3FA8B4E080000000, float 0x3FA8D020C0000000, float 0x3FA8EB6F80000000, float 0x3FA906CCA0000000, float 0x3FA9223840000000, float 0x3FA93DB240000000, float 0x3FA9593AC0000000, float 0x3FA974D1A0000000, float 0x3FA9907700000000, float 0x3FA9AC2AC0000000, float 0x3FA9C7ED00000000, float 0x3FA9E3BD80000000, float 0x3FA9FF9CA0000000, float 0x3FAA1B8A00000000, float 0x3FAA3785C0000000, float 0x3FAA539000000000, float 0x3FAA6FA8A0000000, float 0x3FAA8BCFA0000000, float 0x3FAAA80500000000, float 0x3FAAC448A0000000, float 0x3FAAE09AC0000000, float 0x3FAAFCFB40000000, float 0x3FAB196A20000000, float 0x3FAB35E740000000, float 0x3FAB5272C0000000, float 0x3FAB6F0CA0000000, float 0x3FAB8BB4E0000000, float 0x3FABA86B60000000, float 0x3FABC53040000000, float 0x3FABE20380000000, float 0x3FABFEE500000000, float 0x3FAC1BD4E0000000, float 0x3FAC38D300000000, float 0x3FAC55DF60000000, float 0x3FAC72FA20000000, float 0x3FAC902320000000, float 0x3FACAD5A80000000, float 0x3FACCAA000000000, float 0x3FACE7F3E0000000, float 0x3FAD055600000000, float 0x3FAD22C660000000, float 0x3FAD404520000000, float 0x3FAD5DD200000000, float 0x3FAD7B6D20000000, float 0x3FAD991680000000, float 0x3FADB6CE20000000, float 0x3FADD49400000000, float 0x3FADF26820000000, float 0x3FAE104A80000000, float 0x3FAE2E3B00000000, float 0x3FAE4C39C0000000, float 0x3FAE6A46C0000000, float 0x3FAE8861E0000000, float 0x3FAEA68B20000000, float 0x3FAEC4C2C0000000, float 0x3FAEE30860000000, float 0x3FAF015C40000000, float 0x3FAF1FBE60000000, float 0x3FAF3E2EA0000000, float 0x3FAF5CAD00000000, float 0x3FAF7B3980000000, float 0x3FAF99D440000000, float 0x3FAFB87D00000000, float 0x3FAFD73400000000, float 0x3FAFF5F920000000, float 0x3FB00A6620000000, float 0x3FB019D6E0000000, float 0x3FB0294EA0000000, float 0x3FB038CD60000000, float 0x3FB0485340000000, float 0x3FB057E020000000, float 0x3FB0677400000000, float 0x3FB0770F00000000, float 0x3FB086B100000000, float 0x3FB0965A20000000, float 0x3FB0A60A20000000, float 0x3FB0B5C140000000, float 0x3FB0C57F60000000, float 0x3FB0D544A0000000, float 0x3FB0E510C0000000, float 0x3FB0F4E400000000, float 0x3FB104BE40000000, float 0x3FB1149F80000000, float 0x3FB12487C0000000, float 0x3FB1347700000000, float 0x3FB1446D40000000, float 0x3FB1546A80000000, float 0x3FB1646EC0000000, float 0x3FB1747A20000000, float 0x3FB1848C60000000, float 0x3FB194A5A0000000, float 0x3FB1A4C5C0000000, float 0x3FB1B4ED00000000, float 0x3FB1C51B40000000, float 0x3FB1D55060000000, float 0x3FB1E58C80000000, float 0x3FB1F5CFA0000000, float 0x3FB20619C0000000, float 0x3FB2166AC0000000, float 0x3FB226C2E0000000, float 0x3FB23721C0000000, float 0x3FB24787C0000000, float 0x3FB257F4A0000000, float 0x3FB2686860000000, float 0x3FB278E340000000, float 0x3FB28964E0000000, float 0x3FB299EDA0000000, float 0x3FB2AA7D40000000, float 0x3FB2BB13C0000000, float 0x3FB2CBB140000000, float 0x3FB2DC55A0000000, float 0x3FB2ED00E0000000, float 0x3FB2FDB320000000, float 0x3FB30E6C40000000, float 0x3FB31F2C60000000, float 0x3FB32FF360000000, float 0x3FB340C140000000, float 0x3FB3519600000000, float 0x3FB36271C0000000, float 0x3FB3735460000000, float 0x3FB3843DE0000000, float 0x3FB3952E40000000, float 0x3FB3A62580000000, float 0x3FB3B723A0000000, float 0x3FB3C828A0000000, float 0x3FB3D934A0000000, float 0x3FB3EA4760000000, float 0x3FB3FB6100000000, float 0x3FB40C81A0000000, float 0x3FB41DA900000000, float 0x3FB42ED740000000, float 0x3FB4400C60000000, float 0x3FB4514860000000, float 0x3FB4628B40000000, float 0x3FB473D4E0000000, float 0x3FB4852560000000, float 0x3FB4967CC0000000, float 0x3FB4A7DB00000000, float 0x3FB4B94000000000, float 0x3FB4CAABE0000000, float 0x3FB4DC1EA0000000, float 0x3FB4ED9820000000, float 0x3FB4FF1880000000, float 0x3FB5109FC0000000, float 0x3FB5222DC0000000, float 0x3FB533C280000000, float 0x3FB5455E20000000, float 0x3FB5570080000000, float 0x3FB568A9C0000000, float 0x3FB57A59C0000000, float 0x3FB58C10A0000000, float 0x3FB59DCE20000000, float 0x3FB5AF92A0000000, float 0x3FB5C15DC0000000, float 0x3FB5D32FC0000000, float 0x3FB5E50860000000, float 0x3FB5F6E7E0000000, float 0x3FB608CE40000000, float 0x3FB61ABB40000000, float 0x3FB62CAF00000000, float 0x3FB63EA9A0000000, float 0x3FB650AB00000000, float 0x3FB662B300000000, float 0x3FB674C1E0000000, float 0x3FB686D760000000, float 0x3FB698F3C0000000, float 0x3FB6AB16C0000000, float 0x3FB6BD4080000000, float 0x3FB6CF7120000000, float 0x3FB6E1A860000000, float 0x3FB6F3E640000000, float 0x3FB7062B00000000, float 0x3FB7187660000000, float 0x3FB72AC880000000, float 0x3FB73D2160000000, float 0x3FB74F80E0000000, float 0x3FB761E720000000, float 0x3FB7745400000000, float 0x3FB786C7A0000000, float 0x3FB7994200000000, float 0x3FB7ABC300000000, float 0x3FB7BE4AA0000000, float 0x3FB7D0D900000000, float 0x3FB7E36E00000000, float 0x3FB7F609C0000000, float 0x3FB808AC20000000, float 0x3FB81B5540000000, float 0x3FB82E04E0000000, float 0x3FB840BB40000000, float 0x3FB8537840000000, float 0x3FB8663C00000000, float 0x3FB8790640000000, float 0x3FB88BD740000000, float 0x3FB89EAEE0000000, float 0x3FB8B18D00000000, float 0x3FB8C471E0000000, float 0x3FB8D75D60000000, float 0x3FB8EA4F80000000, float 0x3FB8FD4840000000, float 0x3FB91047A0000000, float 0x3FB9234D80000000, float 0x3FB9365A20000000, float 0x3FB9496D40000000, float 0x3FB95C8720000000, float 0x3FB96FA760000000, float 0x3FB982CE60000000, float 0x3FB995FC00000000, float 0x3FB9A93020000000, float 0x3FB9BC6AC0000000, float 0x3FB9CFAC20000000, float 0x3FB9E2F3E0000000, float 0x3FB9F64260000000, float 0x3FBA099760000000, float 0x3FBA1CF2E0000000, float 0x3FBA305500000000, float 0x3FBA43BDA0000000, float 0x3FBA572CE0000000, float 0x3FBA6AA2A0000000, float 0x3FBA7E1F00000000, float 0x3FBA91A1C0000000, float 0x3FBAA52B20000000, float 0x3FBAB8BB00000000, float 0x3FBACC5180000000, float 0x3FBADFEE60000000, float 0x3FBAF391E0000000, float 0x3FBB073BE0000000, float 0x3FBB1AEC60000000, float 0x3FBB2EA360000000, float 0x3FBB4260E0000000, float 0x3FBB5624C0000000, float 0x3FBB69EF40000000, float 0x3FBB7DC040000000, float 0x3FBB9197A0000000, float 0x3FBBA575A0000000, float 0x3FBBB95A00000000, float 0x3FBBCD44E0000000, float 0x3FBBE13640000000, float 0x3FBBF52E00000000, float 0x3FBC092C40000000, float 0x3FBC1D3100000000, float 0x3FBC313C40000000, float 0x3FBC454DE0000000, float 0x3FBC5965E0000000, float 0x3FBC6D8460000000, float 0x3FBC81A940000000, float 0x3FBC95D4A0000000, float 0x3FBCAA0680000000, float 0x3FBCBE3EA0000000, float 0x3FBCD27D40000000, float 0x3FBCE6C260000000, float 0x3FBCFB0DC0000000, float 0x3FBD0F5FA0000000, float 0x3FBD23B7E0000000, float 0x3FBD381680000000, float 0x3FBD4C7BA0000000, float 0x3FBD60E700000000, float 0x3FBD7558E0000000, float 0x3FBD89D100000000, float 0x3FBD9E4FA0000000, float 0x3FBDB2D480000000, float 0x3FBDC75FE0000000, float 0x3FBDDBF180000000, float 0x3FBDF08980000000, float 0x3FBE0527E0000000, float 0x3FBE19CCA0000000, float 0x3FBE2E77A0000000, float 0x3FBE432920000000, float 0x3FBE57E0E0000000, float 0x3FBE6C9EE0000000, float 0x3FBE816340000000, float 0x3FBE962E00000000, float 0x3FBEAAFF00000000, float 0x3FBEBFD660000000, float 0x3FBED4B400000000, float 0x3FBEE99800000000, float 0x3FBEFE8240000000, float 0x3FBF1372E0000000, float 0x3FBF2869A0000000, float 0x3FBF3D66E0000000, float 0x3FBF526A40000000, float 0x3FBF6773E0000000, float 0x3FBF7C83E0000000, float 0x3FBF919A20000000, float 0x3FBFA6B6A0000000, float 0x3FBFBBD960000000, float 0x3FBFD10260000000, float 0x3FBFE631A0000000, float 0x3FBFFB6720000000, float 0x3FC0085180000000, float 0x3FC012F280000000, float 0x3FC01D96A0000000, float 0x3FC0283DC0000000, float 0x3FC032E820000000, float 0x3FC03D95A0000000, float 0x3FC0484620000000, float 0x3FC052F9C0000000, float 0x3FC05DB080000000, float 0x3FC0686A60000000, float 0x3FC0732760000000, float 0x3FC07DE760000000, float 0x3FC088AA80000000, float 0x3FC09370C0000000, float 0x3FC09E3A20000000, float 0x3FC0A90680000000, float 0x3FC0B3D600000000, float 0x3FC0BEA880000000, float 0x3FC0C97E40000000, float 0x3FC0D456E0000000, float 0x3FC0DF32C0000000, float 0x3FC0EA11A0000000, float 0x3FC0F4F380000000, float 0x3FC0FFD880000000, float 0x3FC10AC0A0000000, float 0x3FC115ABC0000000, float 0x3FC12099E0000000, float 0x3FC12B8B20000000, float 0x3FC1367F80000000, float 0x3FC14176E0000000, float 0x3FC14C7140000000, float 0x3FC1576EC0000000, float 0x3FC1626F40000000, float 0x3FC16D72C0000000, float 0x3FC1787960000000, float 0x3FC1838300000000, float 0x3FC18E8FA0000000, float 0x3FC1999F40000000, float 0x3FC1A4B200000000, float 0x3FC1AFC7C0000000, float 0x3FC1BAE080000000, float 0x3FC1C5FC60000000, float 0x3FC1D11B20000000, float 0x3FC1DC3D00000000, float 0x3FC1E761E0000000, float 0x3FC1F289C0000000, float 0x3FC1FDB4A0000000, float 0x3FC208E280000000, float 0x3FC2141360000000, float 0x3FC21F4740000000, float 0x3FC22A7E20000000, float 0x3FC235B820000000, float 0x3FC240F500000000, float 0x3FC24C34E0000000, float 0x3FC25777C0000000, float 0x3FC262BDA0000000, float 0x3FC26E0660000000, float 0x3FC2795240000000, float 0x3FC284A120000000, float 0x3FC28FF2E0000000, float 0x3FC29B47A0000000, float 0x3FC2A69F60000000, float 0x3FC2B1FA20000000, float 0x3FC2BD57C0000000, float 0x3FC2C8B860000000, float 0x3FC2D41C00000000, float 0x3FC2DF82A0000000, float 0x3FC2EAEC20000000, float 0x3FC2F658A0000000, float 0x3FC301C800000000, float 0x3FC30D3A60000000, float 0x3FC318AFC0000000, float 0x3FC3242800000000, float 0x3FC32FA340000000, float 0x3FC33B2160000000, float 0x3FC346A280000000, float 0x3FC3522680000000, float 0x3FC35DAD80000000, float 0x3FC3693760000000, float 0x3FC374C440000000, float 0x3FC3805400000000, float 0x3FC38BE6A0000000, float 0x3FC3977C40000000, float 0x3FC3A314C0000000, float 0x3FC3AEB020000000, float 0x3FC3BA4E80000000, float 0x3FC3C5EFC0000000, float 0x3FC3D193E0000000, float 0x3FC3DD3AE0000000, float 0x3FC3E8E4E0000000, float 0x3FC3F491A0000000, float 0x3FC4004160000000, float 0x3FC40BF400000000, float 0x3FC417A980000000, float 0x3FC4236200000000, float 0x3FC42F1D40000000, float 0x3FC43ADB60000000, float 0x3FC4469C80000000, float 0x3FC4526060000000, float 0x3FC45E2740000000, float 0x3FC469F0E0000000, float 0x3FC475BD60000000, float 0x3FC4818CE0000000, float 0x3FC48D5F20000000, float 0x3FC4993440000000, float 0x3FC4A50C40000000, float 0x3FC4B0E700000000, float 0x3FC4BCC4C0000000, float 0x3FC4C8A540000000, float 0x3FC4D488A0000000, float 0x3FC4E06EE0000000, float 0x3FC4EC5800000000, float 0x3FC4F843E0000000, float 0x3FC50432A0000000, float 0x3FC5102420000000, float 0x3FC51C18A0000000, float 0x3FC5280FC0000000, float 0x3FC53409E0000000, float 0x3FC54006C0000000, float 0x3FC54C0660000000, float 0x3FC5580900000000, float 0x3FC5640E40000000, float 0x3FC5701660000000, float 0x3FC57C2160000000, float 0x3FC5882F20000000, float 0x3FC5943FA0000000, float 0x3FC5A05300000000, float 0x3FC5AC6920000000, float 0x3FC5B88200000000, float 0x3FC5C49DC0000000, float 0x3FC5D0BC40000000, float 0x3FC5DCDDA0000000, float 0x3FC5E901A0000000, float 0x3FC5F52880000000, float 0x3FC6015220000000, float 0x3FC60D7EA0000000, float 0x3FC619ADC0000000, float 0x3FC625DFC0000000, float 0x3FC6321460000000, float 0x3FC63E4BE0000000, float 0x3FC64A8620000000, float 0x3FC656C320000000, float 0x3FC66302E0000000, float 0x3FC66F4560000000, float 0x3FC67B8AA0000000, float 0x3FC687D280000000, float 0x3FC6941D40000000, float 0x3FC6A06AC0000000, float 0x3FC6ACBB00000000, float 0x3FC6B90DE0000000, float 0x3FC6C56380000000, float 0x3FC6D1BBE0000000, float 0x3FC6DE1700000000, float 0x3FC6EA74E0000000, float 0x3FC6F6D560000000, float 0x3FC70338A0000000, float 0x3FC70F9EA0000000, float 0x3FC71C0760000000, float 0x3FC72872C0000000, float 0x3FC734E0E0000000, float 0x3FC74151A0000000, float 0x3FC74DC520000000, float 0x3FC75A3B60000000, float 0x3FC766B440000000, float 0x3FC7732FC0000000, float 0x3FC77FAE00000000, float 0x3FC78C2F00000000, float 0x3FC798B2A0000000, float 0x3FC7A538E0000000, float 0x3FC7B1C1E0000000, float 0x3FC7BE4D80000000, float 0x3FC7CADBC0000000, float 0x3FC7D76CC0000000, float 0x3FC7E40060000000, float 0x3FC7F096A0000000, float 0x3FC7FD2FA0000000, float 0x3FC809CB40000000, float 0x3FC8166960000000, float 0x3FC8230A60000000, float 0x3FC82FADE0000000, float 0x3FC83C5400000000, float 0x3FC848FCE0000000, float 0x3FC855A840000000, float 0x3FC8625660000000, float 0x3FC86F0720000000, float 0x3FC87BBA60000000, float 0x3FC8887060000000, float 0x3FC89528E0000000, float 0x3FC8A1E420000000, float 0x3FC8AEA1E0000000, float 0x3FC8BB6240000000, float 0x3FC8C82540000000, float 0x3FC8D4EAE0000000, float 0x3FC8E1B320000000, float 0x3FC8EE7E00000000, float 0x3FC8FB4B60000000, float 0x3FC9081B60000000, float 0x3FC914EDE0000000, float 0x3FC921C320000000, float 0x3FC92E9AE0000000, float 0x3FC93B7520000000, float 0x3FC9485200000000, float 0x3FC9553180000000, float 0x3FC96213A0000000, float 0x3FC96EF820000000, float 0x3FC97BDF60000000, float 0x3FC988C920000000, float 0x3FC995B560000000, float 0x3FC9A2A440000000, float 0x3FC9AF95A0000000, float 0x3FC9BC8980000000, float 0x3FC9C98000000000, float 0x3FC9D67900000000, float 0x3FC9E37480000000, float 0x3FC9F072A0000000, float 0x3FC9FD7340000000, float 0x3FCA0A7660000000, float 0x3FCA177C20000000, float 0x3FCA248440000000, float 0x3FCA318F00000000, float 0x3FCA3E9C20000000, float 0x3FCA4BABE0000000, float 0x3FCA58BE20000000, float 0x3FCA65D2E0000000, float 0x3FCA72EA20000000, float 0x3FCA8003E0000000, float 0x3FCA8D2020000000, float 0x3FCA9A3EE0000000, float 0x3FCAA76000000000, float 0x3FCAB483C0000000, float 0x3FCAC1A9E0000000, float 0x3FCACED2A0000000, float 0x3FCADBFDC0000000, float 0x3FCAE92B60000000, float 0x3FCAF65B60000000, float 0x3FCB038E00000000, float 0x3FCB10C300000000, float 0x3FCB1DFA60000000, float 0x3FCB2B3460000000, float 0x3FCB3870C0000000, float 0x3FCB45AF80000000, float 0x3FCB52F0C0000000, float 0x3FCB603480000000, float 0x3FCB6D7AA0000000, float 0x3FCB7AC340000000, float 0x3FCB880E40000000, float 0x3FCB955BA0000000, float 0x3FCBA2AB80000000, float 0x3FCBAFFDE0000000, float 0x3FCBBD5280000000, float 0x3FCBCAA9A0000000, float 0x3FCBD80340000000, float 0x3FCBE55F20000000, float 0x3FCBF2BD80000000, float 0x3FCC001E40000000, float 0x3FCC0D8160000000, float 0x3FCC1AE6E0000000, float 0x3FCC284EE0000000, float 0x3FCC35B940000000, float 0x3FCC4325E0000000, float 0x3FCC509500000000, float 0x3FCC5E0680000000, float 0x3FCC6B7A40000000, float 0x3FCC78F080000000, float 0x3FCC866920000000, float 0x3FCC93E400000000, float 0x3FCCA16160000000, float 0x3FCCAEE100000000, float 0x3FCCBC6300000000, float 0x3FCCC9E760000000, float 0x3FCCD76E20000000, float 0x3FCCE4F740000000, float 0x3FCCF282A0000000, float 0x3FCD001060000000, float 0x3FCD0DA060000000, float 0x3FCD1B32E0000000, float 0x3FCD28C780000000, float 0x3FCD365EA0000000, float 0x3FCD43F800000000, float 0x3FCD5193A0000000, float 0x3FCD5F31A0000000, float 0x3FCD6CD200000000, float 0x3FCD7A74A0000000, float 0x3FCD881980000000, float 0x3FCD95C0C0000000, float 0x3FCDA36A40000000, float 0x3FCDB11600000000, float 0x3FCDBEC420000000, float 0x3FCDCC7480000000, float 0x3FCDDA2720000000, float 0x3FCDE7DC20000000, float 0x3FCDF59340000000, float 0x3FCE034CC0000000, float 0x3FCE110880000000, float 0x3FCE1EC680000000, float 0x3FCE2C86E0000000, float 0x3FCE3A4960000000, float 0x3FCE480E20000000, float 0x3FCE55D520000000, float 0x3FCE639E60000000, float 0x3FCE716A00000000, float 0x3FCE7F37C0000000, float 0x3FCE8D07A0000000, float 0x3FCE9AD9E0000000, float 0x3FCEA8AE60000000, float 0x3FCEB68500000000, float 0x3FCEC45DE0000000, float 0x3FCED23900000000, float 0x3FCEE01660000000, float 0x3FCEEDF5E0000000, float 0x3FCEFBD7A0000000, float 0x3FCF09BBA0000000, float 0x3FCF17A1C0000000, float 0x3FCF258A00000000, float 0x3FCF3374A0000000, float 0x3FCF416140000000, float 0x3FCF4F5040000000, float 0x3FCF5D4140000000, float 0x3FCF6B3480000000, float 0x3FCF792A00000000, float 0x3FCF8721A0000000, float 0x3FCF951B60000000, float 0x3FCFA31740000000, float 0x3FCFB11560000000, float 0x3FCFBF15A0000000, float 0x3FCFCD1800000000, float 0x3FCFDB1C80000000, float 0x3FCFE92340000000, float 0x3FCFF72C00000000, float 0x3FD0029B80000000, float 0x3FD009A200000000, float 0x3FD010A9A0000000, float 0x3FD017B260000000, float 0x3FD01EBC20000000, float 0x3FD025C6E0000000, float 0x3FD02CD2C0000000, float 0x3FD033DFA0000000, float 0x3FD03AEDA0000000, float 0x3FD041FCA0000000, float 0x3FD0490CC0000000, float 0x3FD0501DC0000000, float 0x3FD0573000000000, float 0x3FD05E4320000000, float 0x3FD0655760000000, float 0x3FD06C6CC0000000, float 0x3FD0738300000000, float 0x3FD07A9A60000000, float 0x3FD081B2C0000000, float 0x3FD088CC40000000, float 0x3FD08FE6A0000000, float 0x3FD0970220000000, float 0x3FD09E1EA0000000, float 0x3FD0A53C40000000, float 0x3FD0AC5AC0000000, float 0x3FD0B37A60000000, float 0x3FD0BA9B00000000, float 0x3FD0C1BCA0000000, float 0x3FD0C8DF40000000, float 0x3FD0D002E0000000, float 0x3FD0D727A0000000, float 0x3FD0DE4D40000000, float 0x3FD0E57400000000, float 0x3FD0EC9BA0000000, float 0x3FD0F3C460000000, float 0x3FD0FAEE00000000, float 0x3FD10218C0000000, float 0x3FD1094460000000, float 0x3FD1107120000000, float 0x3FD1179EE0000000, float 0x3FD11ECD80000000, float 0x3FD125FD20000000, float 0x3FD12D2DE0000000, float 0x3FD1345F80000000, float 0x3FD13B9220000000, float 0x3FD142C5C0000000, float 0x3FD149FA60000000, float 0x3FD1512FE0000000, float 0x3FD1586680000000, float 0x3FD15F9E00000000, float 0x3FD166D680000000, float 0x3FD16E1000000000, float 0x3FD1754A80000000, float 0x3FD17C85E0000000, float 0x3FD183C240000000, float 0x3FD18AFFA0000000, float 0x3FD1923DE0000000, float 0x3FD1997D20000000, float 0x3FD1A0BD60000000, float 0x3FD1A7FEA0000000, float 0x3FD1AF40C0000000, float 0x3FD1B683E0000000, float 0x3FD1BDC7E0000000, float 0x3FD1C50CE0000000, float 0x3FD1CC52C0000000, float 0x3FD1D399A0000000, float 0x3FD1DAE180000000, float 0x3FD1E22A40000000, float 0x3FD1E973E0000000, float 0x3FD1F0BEA0000000, float 0x3FD1F80A20000000, float 0x3FD1FF56A0000000, float 0x3FD206A420000000, float 0x3FD20DF260000000, float 0x3FD21541C0000000, float 0x3FD21C91E0000000, float 0x3FD223E320000000, float 0x3FD22B3520000000, float 0x3FD2328820000000, float 0x3FD239DC00000000, float 0x3FD24130C0000000, float 0x3FD2488680000000, float 0x3FD24FDD20000000, float 0x3FD25734A0000000, float 0x3FD25E8D20000000, float 0x3FD265E680000000, float 0x3FD26D40C0000000, float 0x3FD2749BE0000000, float 0x3FD27BF7E0000000, float 0x3FD28354E0000000, float 0x3FD28AB2C0000000, float 0x3FD2921160000000, float 0x3FD2997100000000, float 0x3FD2A0D180000000, float 0x3FD2A83300000000, float 0x3FD2AF9540000000, float 0x3FD2B6F860000000, float 0x3FD2BE5C60000000, float 0x3FD2C5C160000000, float 0x3FD2CD2720000000, float 0x3FD2D48DE0000000, float 0x3FD2DBF560000000, float 0x3FD2E35DC0000000, float 0x3FD2EAC700000000, float 0x3FD2F23140000000, float 0x3FD2F99C40000000, float 0x3FD3010820000000, float 0x3FD30874E0000000, float 0x3FD30FE260000000, float 0x3FD31750E0000000, float 0x3FD31EC020000000, float 0x3FD3263040000000, float 0x3FD32DA140000000, float 0x3FD3351320000000, float 0x3FD33C85E0000000, float 0x3FD343F960000000, float 0x3FD34B6DC0000000, float 0x3FD352E300000000, float 0x3FD35A5900000000, float 0x3FD361CFE0000000, float 0x3FD36947A0000000, float 0x3FD370C040000000, float 0x3FD37839A0000000, float 0x3FD37FB3C0000000, float 0x3FD3872EE0000000, float 0x3FD38EAAA0000000, float 0x3FD3962760000000, float 0x3FD39DA4E0000000, float 0x3FD3A52320000000, float 0x3FD3ACA240000000, float 0x3FD3B42240000000, float 0x3FD3BBA300000000, float 0x3FD3C32480000000, float 0x3FD3CAA6E0000000, float 0x3FD3D22A00000000, float 0x3FD3D9AE00000000, float 0x3FD3E132C0000000, float 0x3FD3E8B860000000, float 0x3FD3F03EC0000000, float 0x3FD3F7C5E0000000, float 0x3FD3FF4DE0000000, float 0x3FD406D680000000, float 0x3FD40E6020000000, float 0x3FD415EA60000000, float 0x3FD41D7580000000, float 0x3FD4250160000000, float 0x3FD42C8E00000000, float 0x3FD4341B60000000, float 0x3FD43BA9A0000000, float 0x3FD4433880000000, float 0x3FD44AC840000000, float 0x3FD45258C0000000, float 0x3FD459EA20000000, float 0x3FD4617C20000000, float 0x3FD4690EE0000000, float 0x3FD470A280000000, float 0x3FD47836C0000000, float 0x3FD47FCBE0000000, float 0x3FD48761A0000000, float 0x3FD48EF840000000, float 0x3FD4968FA0000000, float 0x3FD49E27A0000000, float 0x3FD4A5C080000000, float 0x3FD4AD5A00000000, float 0x3FD4B4F440000000, float 0x3FD4BC8F60000000, float 0x3FD4C42B20000000, float 0x3FD4CBC7A0000000, float 0x3FD4D364E0000000, float 0x3FD4DB02E0000000, float 0x3FD4E2A180000000, float 0x3FD4EA40E0000000, float 0x3FD4F1E100000000, float 0x3FD4F981E0000000, float 0x3FD5012380000000, float 0x3FD508C5C0000000, float 0x3FD51068C0000000, float 0x3FD5180C80000000, float 0x3FD51FB100000000, float 0x3FD5275620000000, float 0x3FD52EFBE0000000, float 0x3FD536A280000000, float 0x3FD53E49C0000000, float 0x3FD545F1A0000000, float 0x3FD54D9A60000000, float 0x3FD55543A0000000, float 0x3FD55CEDA0000000, float 0x3FD5649860000000, float 0x3FD56C43E0000000, float 0x3FD573EFE0000000, float 0x3FD57B9CC0000000, float 0x3FD5834A20000000, float 0x3FD58AF840000000, float 0x3FD592A720000000, float 0x3FD59A56A0000000, float 0x3FD5A206C0000000, float 0x3FD5A9B7A0000000, float 0x3FD5B16920000000, float 0x3FD5B91B40000000, float 0x3FD5C0CE20000000, float 0x3FD5C881A0000000, float 0x3FD5D035C0000000, float 0x3FD5D7EAA0000000, float 0x3FD5DFA000000000, float 0x3FD5E75620000000, float 0x3FD5EF0CE0000000, float 0x3FD5F6C460000000, float 0x3FD5FE7C60000000, float 0x3FD6063520000000, float 0x3FD60DEE80000000, float 0x3FD615A880000000, float 0x3FD61D6320000000, float 0x3FD6251E60000000, float 0x3FD62CDA40000000, float 0x3FD63496C0000000, float 0x3FD63C5400000000, float 0x3FD64411C0000000, float 0x3FD64BD020000000, float 0x3FD6538F20000000, float 0x3FD65B4EE0000000, float 0x3FD6630F20000000, float 0x3FD66AD000000000, float 0x3FD6729180000000, float 0x3FD67A53A0000000, float 0x3FD6821640000000, float 0x3FD689D9A0000000, float 0x3FD6919D80000000, float 0x3FD6996200000000, float 0x3FD6A12720000000, float 0x3FD6A8ECE0000000, float 0x3FD6B0B340000000, float 0x3FD6B87A20000000, float 0x3FD6C041A0000000, float 0x3FD6C809C0000000, float 0x3FD6CFD260000000, float 0x3FD6D79BA0000000, float 0x3FD6DF6580000000, float 0x3FD6E72FE0000000, float 0x3FD6EEFAE0000000, float 0x3FD6F6C680000000, float 0x3FD6FE92A0000000, float 0x3FD7065F60000000, float 0x3FD70E2CA0000000, float 0x3FD715FA80000000, float 0x3FD71DC8E0000000, float 0x3FD72597E0000000, float 0x3FD72D6760000000, float 0x3FD7353780000000, float 0x3FD73D0820000000, float 0x3FD744D940000000, float 0x3FD74CAB00000000, float 0x3FD7547D60000000, float 0x3FD75C5020000000, float 0x3FD7642380000000, float 0x3FD76BF780000000, float 0x3FD773CBE0000000, float 0x3FD77BA0E0000000, float 0x3FD7837680000000, float 0x3FD78B4C80000000, float 0x3FD7932320000000, float 0x3FD79AFA40000000, float 0x3FD7A2D1E0000000, float 0x3FD7AAAA00000000, float 0x3FD7B282C0000000, float 0x3FD7BA5BE0000000, float 0x3FD7C235A0000000, float 0x3FD7CA0FE0000000, float 0x3FD7D1EAA0000000, float 0x3FD7D9C5E0000000, float 0x3FD7E1A1A0000000, float 0x3FD7E97DE0000000, float 0x3FD7F15AA0000000, float 0x3FD7F937E0000000, float 0x3FD80115A0000000, float 0x3FD808F3E0000000, float 0x3FD810D2A0000000, float 0x3FD818B1E0000000, float 0x3FD82091A0000000, float 0x3FD82871E0000000, float 0x3FD8305280000000, float 0x3FD83833C0000000, float 0x3FD8401560000000, float 0x3FD847F780000000, float 0x3FD84FDA20000000, float 0x3FD857BD40000000, float 0x3FD85FA0C0000000, float 0x3FD86784C0000000, float 0x3FD86F6940000000, float 0x3FD8774E20000000, float 0x3FD87F33A0000000, float 0x3FD8871980000000, float 0x3FD88EFFC0000000, float 0x3FD896E680000000, float 0x3FD89ECDC0000000, float 0x3FD8A6B560000000, float 0x3FD8AE9D80000000, float 0x3FD8B68620000000, float 0x3FD8BE6F20000000, float 0x3FD8C65880000000, float 0x3FD8CE4260000000, float 0x3FD8D62CC0000000, float 0x3FD8DE1780000000, float 0x3FD8E602A0000000, float 0x3FD8EDEE40000000, float 0x3FD8F5DA40000000, float 0x3FD8FDC6C0000000, float 0x3FD905B3A0000000, float 0x3FD90DA0E0000000, float 0x3FD9158EA0000000, float 0x3FD91D7CC0000000, float 0x3FD9256B40000000, float 0x3FD92D5A20000000, float 0x3FD9354980000000, float 0x3FD93D3940000000, float 0x3FD9452960000000, float 0x3FD94D1A00000000, float 0x3FD9550B00000000, float 0x3FD95CFC40000000, float 0x3FD964EE00000000, float 0x3FD96CE020000000, float 0x3FD974D2A0000000, float 0x3FD97CC5A0000000, float 0x3FD984B8E0000000, float 0x3FD98CAC80000000, float 0x3FD994A080000000, float 0x3FD99C9500000000, float 0x3FD9A489C0000000, float 0x3FD9AC7F00000000, float 0x3FD9B47480000000, float 0x3FD9BC6A60000000, float 0x3FD9C460A0000000, float 0x3FD9CC5740000000, float 0x3FD9D44E40000000, float 0x3FD9DC45A0000000, float 0x3FD9E43D40000000, float 0x3FD9EC3560000000, float 0x3FD9F42DC0000000, float 0x3FD9FC2680000000, float 0x3FDA041FA0000000, float 0x3FDA0C1900000000, float 0x3FDA1412C0000000, float 0x3FDA1C0CE0000000, float 0x3FDA240760000000, float 0x3FDA2C0220000000, float 0x3FDA33FD40000000, float 0x3FDA3BF8C0000000, float 0x3FDA43F480000000, float 0x3FDA4BF0A0000000, float 0x3FDA53ED00000000, float 0x3FDA5BE9C0000000, float 0x3FDA63E6E0000000, float 0x3FDA6BE420000000, float 0x3FDA73E1E0000000, float 0x3FDA7BDFE0000000, float 0x3FDA83DE20000000, float 0x3FDA8BDCC0000000, float 0x3FDA93DBA0000000, float 0x3FDA9BDAE0000000, float 0x3FDAA3DA60000000, float 0x3FDAABDA20000000, float 0x3FDAB3DA40000000, float 0x3FDABBDAA0000000, float 0x3FDAC3DB60000000, float 0x3FDACBDC40000000, float 0x3FDAD3DD80000000, float 0x3FDADBDF00000000, float 0x3FDAE3E0E0000000, float 0x3FDAEBE300000000, float 0x3FDAF3E540000000, float 0x3FDAFBE7E0000000, float 0x3FDB03EAE0000000, float 0x3FDB0BEE00000000, float 0x3FDB13F160000000, float 0x3FDB1BF520000000, float 0x3FDB23F900000000, float 0x3FDB2BFD40000000, float 0x3FDB3401C0000000, float 0x3FDB3C0660000000, float 0x3FDB440B60000000, float 0x3FDB4C10A0000000, float 0x3FDB541600000000, float 0x3FDB5C1BC0000000, float 0x3FDB6421A0000000, float 0x3FDB6C27E0000000, float 0x3FDB742E40000000, float 0x3FDB7C34E0000000, float 0x3FDB843BC0000000, float 0x3FDB8C42E0000000, float 0x3FDB944A40000000, float 0x3FDB9C51C0000000, float 0x3FDBA45980000000, float 0x3FDBAC6180000000, float 0x3FDBB469C0000000, float 0x3FDBBC7240000000, float 0x3FDBC47AE0000000, float 0x3FDBCC83A0000000, float 0x3FDBD48CC0000000, float 0x3FDBDC9600000000, float 0x3FDBE49F80000000, float 0x3FDBECA920000000, float 0x3FDBF4B300000000, float 0x3FDBFCBD00000000, float 0x3FDC04C740000000, float 0x3FDC0CD1C0000000, float 0x3FDC14DC60000000, float 0x3FDC1CE720000000, float 0x3FDC24F220000000, float 0x3FDC2CFD40000000, float 0x3FDC3508A0000000, float 0x3FDC3D1420000000, float 0x3FDC451FE0000000, float 0x3FDC4D2BC0000000, float 0x3FDC5537C0000000, float 0x3FDC5D4400000000, float 0x3FDC655060000000, float 0x3FDC6D5CE0000000, float 0x3FDC756980000000, float 0x3FDC7D7660000000, float 0x3FDC858360000000, float 0x3FDC8D9080000000, float 0x3FDC959DC0000000, float 0x3FDC9DAB40000000, float 0x3FDCA5B8E0000000, float 0x3FDCADC680000000, float 0x3FDCB5D460000000, float 0x3FDCBDE260000000, float 0x3FDCC5F0A0000000, float 0x3FDCCDFEE0000000, float 0x3FDCD60D40000000, float 0x3FDCDE1BC0000000, float 0x3FDCE62A60000000, float 0x3FDCEE3940000000, float 0x3FDCF64820000000, float 0x3FDCFE5720000000, float 0x3FDD066640000000, float 0x3FDD0E7580000000, float 0x3FDD1684C0000000, float 0x3FDD1E9440000000, float 0x3FDD26A3E0000000, float 0x3FDD2EB380000000, float 0x3FDD36C340000000, float 0x3FDD3ED320000000, float 0x3FDD46E320000000, float 0x3FDD4EF320000000, float 0x3FDD570340000000, float 0x3FDD5F1380000000, float 0x3FDD6723E0000000, float 0x3FDD6F3440000000, float 0x3FDD7744C0000000, float 0x3FDD7F5540000000, float 0x3FDD8765E0000000, float 0x3FDD8F76A0000000, float 0x3FDD978760000000, float 0x3FDD9F9840000000, float 0x3FDDA7A920000000, float 0x3FDDAFBA20000000, float 0x3FDDB7CB20000000, float 0x3FDDBFDC40000000, float 0x3FDDC7ED60000000, float 0x3FDDCFFEA0000000, float 0x3FDDD80FE0000000, float 0x3FDDE02140000000, float 0x3FDDE832A0000000, float 0x3FDDF04400000000, float 0x3FDDF85560000000, float 0x3FDE0066E0000000, float 0x3FDE087880000000, float 0x3FDE108A00000000, float 0x3FDE189BA0000000, float 0x3FDE20AD40000000, float 0x3FDE28BEE0000000, float 0x3FDE30D080000000, float 0x3FDE38E240000000, float 0x3FDE40F400000000, float 0x3FDE4905A0000000, float 0x3FDE511760000000, float 0x3FDE592940000000, float 0x3FDE613B00000000, float 0x3FDE694CC0000000, float 0x3FDE715E80000000, float 0x3FDE797060000000, float 0x3FDE818220000000, float 0x3FDE8993E0000000, float 0x3FDE91A5C0000000, float 0x3FDE99B780000000, float 0x3FDEA1C940000000, float 0x3FDEA9DB00000000, float 0x3FDEB1ECC0000000, float 0x3FDEB9FE80000000, float 0x3FDEC21020000000, float 0x3FDECA21E0000000, float 0x3FDED23380000000, float 0x3FDEDA4520000000, float 0x3FDEE256C0000000, float 0x3FDEEA6860000000, float 0x3FDEF279E0000000, float 0x3FDEFA8B60000000, float 0x3FDF029CE0000000, float 0x3FDF0AAE60000000, float 0x3FDF12BFC0000000, float 0x3FDF1AD100000000, float 0x3FDF22E260000000, float 0x3FDF2AF3A0000000, float 0x3FDF3304C0000000, float 0x3FDF3B15E0000000, float 0x3FDF432700000000, float 0x3FDF4B3800000000, float 0x3FDF534900000000, float 0x3FDF5B59E0000000, float 0x3FDF636AC0000000, float 0x3FDF6B7B80000000, float 0x3FDF738C20000000, float 0x3FDF7B9CC0000000, float 0x3FDF83AD40000000, float 0x3FDF8BBDC0000000, float 0x3FDF93CE20000000, float 0x3FDF9BDE60000000, float 0x3FDFA3EEA0000000, float 0x3FDFABFEA0000000, float 0x3FDFB40EC0000000, float 0x3FDFBC1EA0000000, float 0x3FDFC42E80000000, float 0x3FDFCC3E20000000, float 0x3FDFD44DC0000000, float 0x3FDFDC5D60000000, float 0x3FDFE46CC0000000, float 0x3FDFEC7C00000000, float 0x3FDFF48B40000000, float 0x3FDFFC9A60000000, float 0x3FE00254A0000000, float 0x3FE0065C20000000, float 0x3FE00A6360000000, float 0x3FE00E6AC0000000, float 0x3FE0127200000000, float 0x3FE0167920000000, float 0x3FE01A8040000000, float 0x3FE01E8740000000, float 0x3FE0228E40000000, float 0x3FE0269520000000, float 0x3FE02A9C00000000, float 0x3FE02EA2C0000000, float 0x3FE032A980000000, float 0x3FE036B020000000, float 0x3FE03AB6A0000000, float 0x3FE03EBD20000000, float 0x3FE042C380000000, float 0x3FE046C9C0000000, float 0x3FE04AD000000000, float 0x3FE04ED640000000, float 0x3FE052DC40000000, float 0x3FE056E240000000, float 0x3FE05AE820000000, float 0x3FE05EEE00000000, float 0x3FE062F3A0000000, float 0x3FE066F960000000, float 0x3FE06AFEE0000000, float 0x3FE06F0460000000, float 0x3FE07309C0000000, float 0x3FE0770F00000000, float 0x3FE07B1420000000, float 0x3FE07F1940000000, float 0x3FE0831E40000000, float 0x3FE0872320000000, float 0x3FE08B27E0000000, float 0x3FE08F2CA0000000, float 0x3FE0933120000000, float 0x3FE09735A0000000, float 0x3FE09B3A00000000, float 0x3FE09F3E60000000, float 0x3FE0A34280000000, float 0x3FE0A74680000000, float 0x3FE0AB4A80000000, float 0x3FE0AF4E60000000, float 0x3FE0B35220000000, float 0x3FE0B755A0000000, float 0x3FE0BB5940000000, float 0x3FE0BF5CA0000000, float 0x3FE0C35FE0000000, float 0x3FE0C76300000000, float 0x3FE0CB6600000000, float 0x3FE0CF6900000000, float 0x3FE0D36BC0000000, float 0x3FE0D76E80000000, float 0x3FE0DB7100000000, float 0x3FE0DF7360000000, float 0x3FE0E375C0000000, float 0x3FE0E777E0000000, float 0x3FE0EB7A00000000, float 0x3FE0EF7BE0000000, float 0x3FE0F37DA0000000, float 0x3FE0F77F40000000, float 0x3FE0FB80E0000000, float 0x3FE0FF8240000000, float 0x3FE1038380000000, float 0x3FE10784A0000000, float 0x3FE10B8580000000, float 0x3FE10F8660000000, float 0x3FE1138720000000, float 0x3FE11787A0000000, float 0x3FE11B8800000000, float 0x3FE11F8860000000, float 0x3FE1238880000000, float 0x3FE1278880000000, float 0x3FE12B8840000000, float 0x3FE12F8800000000, float 0x3FE1338780000000, float 0x3FE13786E0000000, float 0x3FE13B8620000000, float 0x3FE13F8520000000, float 0x3FE1438420000000, float 0x3FE14782E0000000, float 0x3FE14B8180000000, float 0x3FE14F7FE0000000, float 0x3FE1537E40000000, float 0x3FE1577C60000000, float 0x3FE15B7A60000000, float 0x3FE15F7820000000, float 0x3FE16375C0000000, float 0x3FE1677340000000, float 0x3FE16B70A0000000, float 0x3FE16F6DC0000000, float 0x3FE1736AC0000000, float 0x3FE1776780000000, float 0x3FE17B6420000000, float 0x3FE17F60A0000000, float 0x3FE1835CE0000000, float 0x3FE1875900000000, float 0x3FE18B5500000000, float 0x3FE18F50C0000000, float 0x3FE1934C40000000, float 0x3FE19747C0000000, float 0x3FE19B42E0000000, float 0x3FE19F3E00000000, float 0x3FE1A338E0000000, float 0x3FE1A73380000000, float 0x3FE1AB2E00000000, float 0x3FE1AF2840000000, float 0x3FE1B32260000000, float 0x3FE1B71C60000000, float 0x3FE1BB1600000000, float 0x3FE1BF0FA0000000, float 0x3FE1C30900000000, float 0x3FE1C70220000000, float 0x3FE1CAFB00000000, float 0x3FE1CEF3E0000000, float 0x3FE1D2EC60000000, float 0x3FE1D6E4C0000000, float 0x3FE1DADD00000000, float 0x3FE1DED4E0000000, float 0x3FE1E2CCA0000000, float 0x3FE1E6C440000000, float 0x3FE1EABBA0000000, float 0x3FE1EEB2C0000000, float 0x3FE1F2A9C0000000, float 0x3FE1F6A080000000, float 0x3FE1FA9700000000, float 0x3FE1FE8D40000000, float 0x3FE2028360000000, float 0x3FE2067940000000, float 0x3FE20A6F00000000, float 0x3FE20E6480000000, float 0x3FE21259C0000000, float 0x3FE2164EC0000000, float 0x3FE21A4380000000, float 0x3FE21E3820000000, float 0x3FE2222C80000000, float 0x3FE22620C0000000, float 0x3FE22A14A0000000, float 0x3FE22E0860000000, float 0x3FE231FBE0000000, float 0x3FE235EF20000000, float 0x3FE239E220000000, float 0x3FE23DD4E0000000, float 0x3FE241C780000000, float 0x3FE245B9C0000000, float 0x3FE249ABE0000000, float 0x3FE24D9DC0000000, float 0x3FE2518F60000000, float 0x3FE25580E0000000, float 0x3FE2597200000000, float 0x3FE25D62E0000000, float 0x3FE26153A0000000, float 0x3FE2654400000000, float 0x3FE2693440000000, float 0x3FE26D2440000000, float 0x3FE27113E0000000, float 0x3FE2750360000000, float 0x3FE278F2A0000000, float 0x3FE27CE1A0000000, float 0x3FE280D060000000, float 0x3FE284BEE0000000, float 0x3FE288AD00000000, float 0x3FE28C9B00000000, float 0x3FE29088C0000000, float 0x3FE2947640000000, float 0x3FE2986360000000, float 0x3FE29C5060000000, float 0x3FE2A03D20000000, float 0x3FE2A42980000000, float 0x3FE2A815C0000000, float 0x3FE2AC01A0000000, float 0x3FE2AFED40000000, float 0x3FE2B3D8A0000000, float 0x3FE2B7C3E0000000, float 0x3FE2BBAEA0000000, float 0x3FE2BF9940000000, float 0x3FE2C383A0000000, float 0x3FE2C76DA0000000, float 0x3FE2CB5780000000, float 0x3FE2CF4100000000, float 0x3FE2D32A40000000, float 0x3FE2D71320000000, float 0x3FE2DAFBE0000000, float 0x3FE2DEE440000000, float 0x3FE2E2CC80000000, float 0x3FE2E6B440000000, float 0x3FE2EA9BE0000000, float 0x3FE2EE8340000000, float 0x3FE2F26A40000000, float 0x3FE2F65100000000, float 0x3FE2FA3760000000, float 0x3FE2FE1DA0000000, float 0x3FE3020380000000, float 0x3FE305E920000000, float 0x3FE309CE60000000, float 0x3FE30DB360000000, float 0x3FE3119820000000, float 0x3FE3157C80000000, float 0x3FE31960C0000000, float 0x3FE31D4480000000, float 0x3FE3212820000000, float 0x3FE3250B60000000, float 0x3FE328EE60000000, float 0x3FE32CD100000000, float 0x3FE330B360000000, float 0x3FE3349560000000, float 0x3FE3387720000000, float 0x3FE33C58A0000000, float 0x3FE34039C0000000, float 0x3FE3441AA0000000, float 0x3FE347FB20000000, float 0x3FE34BDB60000000, float 0x3FE34FBB40000000, float 0x3FE3539AE0000000, float 0x3FE3577A40000000, float 0x3FE35B5940000000, float 0x3FE35F37E0000000, float 0x3FE3631640000000, float 0x3FE366F440000000, float 0x3FE36AD200000000, float 0x3FE36EAF60000000, float 0x3FE3728C80000000, float 0x3FE3766940000000, float 0x3FE37A45C0000000, float 0x3FE37E21E0000000, float 0x3FE381FDA0000000, float 0x3FE385D920000000, float 0x3FE389B440000000, float 0x3FE38D8F20000000, float 0x3FE39169A0000000, float 0x3FE39543E0000000, float 0x3FE3991DA0000000, float 0x3FE39CF720000000, float 0x3FE3A0D060000000, float 0x3FE3A4A940000000, float 0x3FE3A881C0000000, float 0x3FE3AC59E0000000, float 0x3FE3B031C0000000, float 0x3FE3B40940000000, float 0x3FE3B7E060000000, float 0x3FE3BBB740000000, float 0x3FE3BF8DC0000000, float 0x3FE3C363E0000000, float 0x3FE3C739A0000000, float 0x3FE3CB0F20000000, float 0x3FE3CEE440000000, float 0x3FE3D2B900000000, float 0x3FE3D68D60000000, float 0x3FE3DA6180000000, float 0x3FE3DE3540000000, float 0x3FE3E208A0000000, float 0x3FE3E5DBA0000000, float 0x3FE3E9AE40000000, float 0x3FE3ED80A0000000, float 0x3FE3F15280000000, float 0x3FE3F52420000000, float 0x3FE3F8F560000000, float 0x3FE3FCC640000000, float 0x3FE40096C0000000, float 0x3FE4046700000000, float 0x3FE40836C0000000, float 0x3FE40C0640000000, float 0x3FE40FD540000000, float 0x3FE413A400000000, float 0x3FE4177260000000, float 0x3FE41B4060000000, float 0x3FE41F0E00000000, float 0x3FE422DB40000000, float 0x3FE426A820000000, float 0x3FE42A74A0000000, float 0x3FE42E40C0000000, float 0x3FE4320C80000000, float 0x3FE435D7E0000000, float 0x3FE439A2E0000000, float 0x3FE43D6D80000000, float 0x3FE44137C0000000, float 0x3FE44501A0000000, float 0x3FE448CB20000000, float 0x3FE44C9440000000, float 0x3FE4505D00000000, float 0x3FE4542560000000, float 0x3FE457ED60000000, float 0x3FE45BB4E0000000, float 0x3FE45F7C20000000, float 0x3FE4634300000000, float 0x3FE4670960000000, float 0x3FE46ACF60000000, float 0x3FE46E9500000000, float 0x3FE4725A60000000, float 0x3FE4761F20000000, float 0x3FE479E3A0000000, float 0x3FE47DA7C0000000, float 0x3FE4816B60000000, float 0x3FE4852EC0000000, float 0x3FE488F1A0000000, float 0x3FE48CB420000000, float 0x3FE4907620000000, float 0x3FE49437E0000000, float 0x3FE497F920000000, float 0x3FE49BBA00000000, float 0x3FE49F7A80000000, float 0x3FE4A33AA0000000, float 0x3FE4A6FA40000000, float 0x3FE4AAB980000000, float 0x3FE4AE7860000000, float 0x3FE4B236E0000000, float 0x3FE4B5F4E0000000, float 0x3FE4B9B280000000, float 0x3FE4BD6FC0000000, float 0x3FE4C12CA0000000, float 0x3FE4C4E900000000, float 0x3FE4C8A500000000, float 0x3FE4CC6080000000, float 0x3FE4D01BA0000000, float 0x3FE4D3D660000000, float 0x3FE4D790C0000000, float 0x3FE4DB4AA0000000, float 0x3FE4DF0420000000, float 0x3FE4E2BD20000000, float 0x3FE4E675C0000000, float 0x3FE4EA2E00000000, float 0x3FE4EDE5C0000000, float 0x3FE4F19D20000000, float 0x3FE4F55400000000, float 0x3FE4F90A80000000, float 0x3FE4FCC080000000, float 0x3FE5007640000000, float 0x3FE5042B60000000, float 0x3FE507E020000000, float 0x3FE50B9480000000, float 0x3FE50F4860000000, float 0x3FE512FBE0000000, float 0x3FE516AF00000000, float 0x3FE51A6180000000, float 0x3FE51E13C0000000, float 0x3FE521C560000000, float 0x3FE52576C0000000, float 0x3FE5292780000000, float 0x3FE52CD800000000, float 0x3FE53087E0000000, float 0x3FE5343760000000, float 0x3FE537E680000000, float 0x3FE53B9520000000, float 0x3FE53F4340000000, float 0x3FE542F100000000, float 0x3FE5469E40000000, float 0x3FE54A4B20000000, float 0x3FE54DF780000000, float 0x3FE551A380000000, float 0x3FE5554EE0000000, float 0x3FE558FA00000000, float 0x3FE55CA480000000, float 0x3FE5604EA0000000, float 0x3FE563F840000000, float 0x3FE567A180000000, float 0x3FE56B4A40000000, float 0x3FE56EF280000000, float 0x3FE5729A60000000, float 0x3FE57641C0000000, float 0x3FE579E8A0000000, float 0x3FE57D8F00000000, float 0x3FE5813500000000, float 0x3FE584DA80000000, float 0x3FE5887F80000000, float 0x3FE58C2420000000, float 0x3FE58FC840000000, float 0x3FE5936BE0000000, float 0x3FE5970F00000000, float 0x3FE59AB1C0000000, float 0x3FE59E53E0000000, float 0x3FE5A1F5A0000000, float 0x3FE5A59700000000, float 0x3FE5A937C0000000, float 0x3FE5ACD820000000, float 0x3FE5B077E0000000, float 0x3FE5B41740000000, float 0x3FE5B7B620000000, float 0x3FE5BB54A0000000, float 0x3FE5BEF280000000, float 0x3FE5C29000000000, float 0x3FE5C62CE0000000, float 0x3FE5C9C960000000, float 0x3FE5CD6560000000, float 0x3FE5D100E0000000, float 0x3FE5D49C00000000, float 0x3FE5D83680000000, float 0x3FE5DBD080000000, float 0x3FE5DF6A20000000, float 0x3FE5E30340000000, float 0x3FE5E69BC0000000, float 0x3FE5EA33E0000000, float 0x3FE5EDCB80000000, float 0x3FE5F162A0000000, float 0x3FE5F4F940000000, float 0x3FE5F88F60000000, float 0x3FE5FC2500000000, float 0x3FE5FFBA20000000, float 0x3FE6034EC0000000, float 0x3FE606E2E0000000, float 0x3FE60A7680000000, float 0x3FE60E09A0000000, float 0x3FE6119C40000000, float 0x3FE6152E60000000, float 0x3FE618C000000000, float 0x3FE61C5120000000, float 0x3FE61FE1C0000000, float 0x3FE62371C0000000, float 0x3FE6270160000000, float 0x3FE62A9080000000, float 0x3FE62E1F00000000, float 0x3FE631AD20000000, float 0x3FE6353AC0000000, float 0x3FE638C7C0000000, float 0x3FE63C5440000000, float 0x3FE63FE040000000, float 0x3FE6436BE0000000, float 0x3FE646F6C0000000, float 0x3FE64A8140000000, float 0x3FE64E0B40000000, float 0x3FE65194C0000000, float 0x3FE6551DA0000000, float 0x3FE658A600000000, float 0x3FE65C2DE0000000, float 0x3FE65FB540000000, float 0x3FE6633C20000000, float 0x3FE666C260000000, float 0x3FE66A4840000000, float 0x3FE66DCD80000000, float 0x3FE6715240000000, float 0x3FE674D680000000, float 0x3FE6785A20000000, float 0x3FE67BDD40000000, float 0x3FE67F6000000000, float 0x3FE682E200000000, float 0x3FE68663A0000000, float 0x3FE689E4A0000000, float 0x3FE68D6520000000, float 0x3FE690E520000000, float 0x3FE69464A0000000, float 0x3FE697E380000000, float 0x3FE69B61E0000000, float 0x3FE69EDFA0000000, float 0x3FE6A25D00000000, float 0x3FE6A5D9C0000000, float 0x3FE6A95600000000, float 0x3FE6ACD1A0000000, float 0x3FE6B04CC0000000, float 0x3FE6B3C760000000, float 0x3FE6B74160000000, float 0x3FE6BABAE0000000, float 0x3FE6BE33E0000000, float 0x3FE6C1AC40000000, float 0x3FE6C52420000000, float 0x3FE6C89B80000000, float 0x3FE6CC1240000000, float 0x3FE6CF8880000000, float 0x3FE6D2FE20000000, float 0x3FE6D67340000000, float 0x3FE6D9E7E0000000, float 0x3FE6DD5BE0000000, float 0x3FE6E0CF60000000, float 0x3FE6E44240000000, float 0x3FE6E7B4A0000000, float 0x3FE6EB2680000000, float 0x3FE6EE97C0000000, float 0x3FE6F20860000000, float 0x3FE6F57880000000, float 0x3FE6F8E820000000, float 0x3FE6FC5720000000, float 0x3FE6FFC5A0000000, float 0x3FE7033380000000, float 0x3FE706A0E0000000, float 0x3FE70A0DA0000000, float 0x3FE70D79E0000000, float 0x3FE710E580000000, float 0x3FE71450A0000000, float 0x3FE717BB20000000, float 0x3FE71B2500000000, float 0x3FE71E8E60000000, float 0x3FE721F740000000, float 0x3FE7255F80000000, float 0x3FE728C720000000, float 0x3FE72C2E40000000, float 0x3FE72F94C0000000, float 0x3FE732FAC0000000, float 0x3FE7366020000000, float 0x3FE739C500000000, float 0x3FE73D2940000000, float 0x3FE7408CE0000000, float 0x3FE743F000000000, float 0x3FE7475280000000, float 0x3FE74AB460000000, float 0x3FE74E15C0000000, float 0x3FE7517680000000, float 0x3FE754D6C0000000, float 0x3FE7583660000000, float 0x3FE75B9560000000, float 0x3FE75EF3E0000000, float 0x3FE76251C0000000, float 0x3FE765AF00000000, float 0x3FE7690BC0000000, float 0x3FE76C67E0000000, float 0x3FE76FC360000000, float 0x3FE7731E60000000, float 0x3FE77678A0000000, float 0x3FE779D280000000, float 0x3FE77D2BA0000000, float 0x3FE7808440000000, float 0x3FE783DC40000000, float 0x3FE78733A0000000, float 0x3FE78A8A80000000, float 0x3FE78DE0A0000000, float 0x3FE7913640000000, float 0x3FE7948B60000000, float 0x3FE797DFC0000000, float 0x3FE79B33A0000000, float 0x3FE79E86E0000000, float 0x3FE7A1D980000000, float 0x3FE7A52BA0000000, float 0x3FE7A87D00000000, float 0x3FE7ABCDE0000000, float 0x3FE7AF1E20000000, float 0x3FE7B26DC0000000, float 0x3FE7B5BCE0000000, float 0x3FE7B90B60000000, float 0x3FE7BC5920000000, float 0x3FE7BFA660000000, float 0x3FE7C2F300000000, float 0x3FE7C63F20000000, float 0x3FE7C98A80000000, float 0x3FE7CCD560000000, float 0x3FE7D01F80000000, float 0x3FE7D36920000000, float 0x3FE7D6B220000000, float 0x3FE7D9FA80000000, float 0x3FE7DD4260000000, float 0x3FE7E08980000000, float 0x3FE7E3D000000000, float 0x3FE7E71600000000, float 0x3FE7EA5B60000000, float 0x3FE7EDA000000000, float 0x3FE7F0E420000000, float 0x3FE7F427A0000000, float 0x3FE7F76A80000000, float 0x3FE7FAACC0000000, float 0x3FE7FDEE60000000, float 0x3FE8012F60000000, float 0x3FE8046FE0000000, float 0x3FE807AFA0000000, float 0x3FE80AEEC0000000, float 0x3FE80E2D40000000, float 0x3FE8116B40000000, float 0x3FE814A880000000, float 0x3FE817E540000000, float 0x3FE81B2140000000, float 0x3FE81E5CA0000000, float 0x3FE8219780000000, float 0x3FE824D1A0000000, float 0x3FE8280B40000000, float 0x3FE82B4420000000, float 0x3FE82E7C80000000, float 0x3FE831B420000000, float 0x3FE834EB20000000, float 0x3FE83821A0000000, float 0x3FE83B5760000000, float 0x3FE83E8C80000000, float 0x3FE841C100000000, float 0x3FE844F4E0000000, float 0x3FE8482820000000, float 0x3FE84B5AC0000000, float 0x3FE84E8CC0000000, float 0x3FE851BE20000000, float 0x3FE854EEE0000000, float 0x3FE8581F00000000, float 0x3FE85B4E60000000, float 0x3FE85E7D40000000, float 0x3FE861AB60000000, float 0x3FE864D8E0000000, float 0x3FE86805E0000000, float 0x3FE86B3220000000, float 0x3FE86E5DC0000000, float 0x3FE87188A0000000, float 0x3FE874B300000000, float 0x3FE877DCC0000000, float 0x3FE87B05C0000000, float 0x3FE87E2E20000000, float 0x3FE88155E0000000, float 0x3FE8847D00000000, float 0x3FE887A380000000, float 0x3FE88AC960000000, float 0x3FE88DEE80000000, float 0x3FE8911320000000, float 0x3FE8943700000000, float 0x3FE8975A40000000, float 0x3FE89A7CC0000000, float 0x3FE89D9EC0000000, float 0x3FE8A0C000000000, float 0x3FE8A3E0A0000000, float 0x3FE8A700A0000000, float 0x3FE8AA2000000000, float 0x3FE8AD3EA0000000, float 0x3FE8B05CC0000000, float 0x3FE8B37A20000000, float 0x3FE8B696C0000000, float 0x3FE8B9B2E0000000, float 0x3FE8BCCE40000000, float 0x3FE8BFE900000000, float 0x3FE8C30320000000, float 0x3FE8C61CA0000000, float 0x3FE8C93560000000, float 0x3FE8CC4D80000000, float 0x3FE8CF6500000000, float 0x3FE8D27BC0000000, float 0x3FE8D591E0000000, float 0x3FE8D8A760000000, float 0x3FE8DBBC40000000, float 0x3FE8DED060000000, float 0x3FE8E1E3E0000000, float 0x3FE8E4F6C0000000, float 0x3FE8E808E0000000, float 0x3FE8EB1A60000000, float 0x3FE8EE2B40000000, float 0x3FE8F13B80000000, float 0x3FE8F44B00000000, float 0x3FE8F759E0000000, float 0x3FE8FA6800000000, float 0x3FE8FD7580000000, float 0x3FE9008260000000, float 0x3FE9038E80000000, float 0x3FE9069A20000000, float 0x3FE909A4E0000000, float 0x3FE90CAF20000000, float 0x3FE90FB8A0000000, float 0x3FE912C160000000, float 0x3FE915C9A0000000, float 0x3FE918D120000000, float 0x3FE91BD7E0000000, float 0x3FE91EDE00000000, float 0x3FE921E380000000, float 0x3FE924E840000000, float 0x3FE927EC60000000, float 0x3FE92AEFE0000000, float 0x3FE92DF2A0000000, float 0x3FE930F4C0000000, float 0x3FE933F620000000, float 0x3FE936F6E0000000, float 0x3FE939F6E0000000, float 0x3FE93CF640000000, float 0x3FE93FF500000000, float 0x3FE942F300000000, float 0x3FE945F060000000, float 0x3FE948ED00000000, float 0x3FE94BE900000000, float 0x3FE94EE440000000, float 0x3FE951DEE0000000, float 0x3FE954D8E0000000, float 0x3FE957D220000000, float 0x3FE95ACAA0000000, float 0x3FE95DC280000000, float 0x3FE960B9C0000000, float 0x3FE963B040000000, float 0x3FE966A620000000, float 0x3FE9699B40000000, float 0x3FE96C8FC0000000, float 0x3FE96F8380000000, float 0x3FE97276A0000000, float 0x3FE9756900000000, float 0x3FE9785AA0000000, float 0x3FE97B4BA0000000, float 0x3FE97E3C00000000, float 0x3FE9812BA0000000, float 0x3FE9841AA0000000, float 0x3FE98708E0000000, float 0x3FE989F660000000, float 0x3FE98CE340000000, float 0x3FE98FCF80000000, float 0x3FE992BB00000000, float 0x3FE995A5C0000000, float 0x3FE9988FE0000000, float 0x3FE99B7940000000, float 0x3FE99E6200000000, float 0x3FE9A14A00000000, float 0x3FE9A43160000000, float 0x3FE9A71800000000, float 0x3FE9A9FE00000000, float 0x3FE9ACE340000000, float 0x3FE9AFC7C0000000, float 0x3FE9B2ABA0000000, float 0x3FE9B58EC0000000, float 0x3FE9B87120000000, float 0x3FE9BB52E0000000, float 0x3FE9BE3400000000, float 0x3FE9C11460000000, float 0x3FE9C3F400000000, float 0x3FE9C6D2E0000000, float 0x3FE9C9B120000000, float 0x3FE9CC8EC0000000, float 0x3FE9CF6BA0000000, float 0x3FE9D247C0000000, float 0x3FE9D52320000000, float 0x3FE9D7FDE0000000, float 0x3FE9DAD800000000, float 0x3FE9DDB140000000, float 0x3FE9E089E0000000, float 0x3FE9E361E0000000, float 0x3FE9E63920000000, float 0x3FE9E90FA0000000, float 0x3FE9EBE560000000, float 0x3FE9EEBA80000000, float 0x3FE9F18EE0000000, float 0x3FE9F462A0000000, float 0x3FE9F73580000000, float 0x3FE9FA07E0000000, float 0x3FE9FCD960000000, float 0x3FE9FFAA40000000, float 0x3FEA027A60000000, float 0x3FEA0549E0000000, float 0x3FEA0818A0000000, float 0x3FEA0AE6A0000000, float 0x3FEA0DB3E0000000, float 0x3FEA108080000000, float 0x3FEA134C60000000, float 0x3FEA1617A0000000, float 0x3FEA18E200000000, float 0x3FEA1BABC0000000, float 0x3FEA1E74E0000000, float 0x3FEA213D20000000, float 0x3FEA2404C0000000, float 0x3FEA26CBA0000000, float 0x3FEA2991E0000000, float 0x3FEA2C5760000000, float 0x3FEA2F1C20000000, float 0x3FEA31E020000000, float 0x3FEA34A380000000, float 0x3FEA376600000000, float 0x3FEA3A2800000000, float 0x3FEA3CE920000000, float 0x3FEA3FA9A0000000, float 0x3FEA426960000000, float 0x3FEA452860000000, float 0x3FEA47E6A0000000, float 0x3FEA4AA440000000, float 0x3FEA4D6120000000, float 0x3FEA501D40000000, float 0x3FEA52D8C0000000, float 0x3FEA559360000000, float 0x3FEA584D60000000, float 0x3FEA5B06A0000000, float 0x3FEA5DBF40000000, float 0x3FEA607720000000, float 0x3FEA632E20000000, float 0x3FEA65E4A0000000, float 0x3FEA689A40000000, float 0x3FEA6B4F20000000, float 0x3FEA6E0360000000, float 0x3FEA70B6E0000000, float 0x3FEA7369A0000000, float 0x3FEA761BC0000000, float 0x3FEA78CD00000000, float 0x3FEA7B7DA0000000, float 0x3FEA7E2D80000000, float 0x3FEA80DCC0000000, float 0x3FEA838B20000000, float 0x3FEA8638E0000000, float 0x3FEA88E5C0000000, float 0x3FEA8B9220000000, float 0x3FEA8E3DA0000000, float 0x3FEA90E860000000, float 0x3FEA939280000000, float 0x3FEA963BE0000000, float 0x3FEA98E460000000, float 0x3FEA9B8C60000000, float 0x3FEA9E3380000000, float 0x3FEAA0D9E0000000, float 0x3FEAA37FA0000000, float 0x3FEAA624A0000000, float 0x3FEAA8C8E0000000, float 0x3FEAAB6C60000000, float 0x3FEAAE0F20000000, float 0x3FEAB0B140000000, float 0x3FEAB352A0000000, float 0x3FEAB5F320000000, float 0x3FEAB89300000000, float 0x3FEABB3240000000, float 0x3FEABDD0A0000000, float 0x3FEAC06E40000000, float 0x3FEAC30B40000000, float 0x3FEAC5A780000000, float 0x3FEAC84300000000, float 0x3FEACADDC0000000, float 0x3FEACD77C0000000, float 0x3FEAD01100000000, float 0x3FEAD2A980000000, float 0x3FEAD54160000000, float 0x3FEAD7D880000000, float 0x3FEADA6EC0000000, float 0x3FEADD0460000000, float 0x3FEADF9960000000, float 0x3FEAE22D80000000, float 0x3FEAE4C0E0000000, float 0x3FEAE75380000000, float 0x3FEAE9E580000000, float 0x3FEAEC76C0000000, float 0x3FEAEF0740000000, float 0x3FEAF196E0000000, float 0x3FEAF425E0000000, float 0x3FEAF6B440000000, float 0x3FEAF941C0000000, float 0x3FEAFBCE80000000, float 0x3FEAFE5AA0000000, float 0x3FEB00E5E0000000, float 0x3FEB037080000000, float 0x3FEB05FA60000000, float 0x3FEB088380000000, float 0x3FEB0B0BE0000000, float 0x3FEB0D9380000000, float 0x3FEB101A60000000, float 0x3FEB12A080000000, float 0x3FEB1525E0000000, float 0x3FEB17AAA0000000, float 0x3FEB1A2E80000000, float 0x3FEB1CB1C0000000, float 0x3FEB1F3440000000, float 0x3FEB21B5E0000000, float 0x3FEB2436E0000000, float 0x3FEB26B720000000, float 0x3FEB2936A0000000, float 0x3FEB2BB560000000, float 0x3FEB2E3360000000, float 0x3FEB30B0C0000000, float 0x3FEB332D40000000, float 0x3FEB35A900000000, float 0x3FEB382420000000, float 0x3FEB3A9E60000000, float 0x3FEB3D1800000000, float 0x3FEB3F90E0000000, float 0x3FEB4208E0000000, float 0x3FEB448040000000, float 0x3FEB46F6E0000000, float 0x3FEB496CC0000000, float 0x3FEB4BE1E0000000, float 0x3FEB4E5640000000, float 0x3FEB50C9E0000000, float 0x3FEB533CC0000000, float 0x3FEB55AEE0000000, float 0x3FEB582060000000, float 0x3FEB5A9100000000, float 0x3FEB5D00E0000000, float 0x3FEB5F7020000000, float 0x3FEB61DE80000000, float 0x3FEB644C40000000, float 0x3FEB66B920000000, float 0x3FEB692560000000, float 0x3FEB6B90E0000000, float 0x3FEB6DFB80000000, float 0x3FEB706580000000, float 0x3FEB72CEC0000000, float 0x3FEB753740000000, float 0x3FEB779F00000000, float 0x3FEB7A05E0000000, float 0x3FEB7C6C20000000, float 0x3FEB7ED1A0000000, float 0x3FEB813660000000, float 0x3FEB839A80000000, float 0x3FEB85FDC0000000, float 0x3FEB886040000000, float 0x3FEB8AC200000000, float 0x3FEB8D2300000000, float 0x3FEB8F8340000000, float 0x3FEB91E2E0000000, float 0x3FEB9441A0000000, float 0x3FEB969FA0000000, float 0x3FEB98FD00000000, float 0x3FEB9B5980000000, float 0x3FEB9DB560000000, float 0x3FEBA01060000000, float 0x3FEBA26AC0000000, float 0x3FEBA4C440000000, float 0x3FEBA71D20000000, float 0x3FEBA97520000000, float 0x3FEBABCC80000000, float 0x3FEBAE2300000000, float 0x3FEBB078E0000000, float 0x3FEBB2CE00000000, float 0x3FEBB52240000000, float 0x3FEBB775E0000000, float 0x3FEBB9C8C0000000, float 0x3FEBBC1AE0000000, float 0x3FEBBE6C20000000, float 0x3FEBC0BCC0000000, float 0x3FEBC30CA0000000, float 0x3FEBC55BC0000000, float 0x3FEBC7AA20000000, float 0x3FEBC9F7C0000000, float 0x3FEBCC4480000000, float 0x3FEBCE90A0000000, float 0x3FEBD0DC00000000, float 0x3FEBD326A0000000, float 0x3FEBD57080000000, float 0x3FEBD7B9A0000000, float 0x3FEBDA0200000000, float 0x3FEBDC49A0000000, float 0x3FEBDE9080000000, float 0x3FEBE0D6A0000000, float 0x3FEBE31C00000000, float 0x3FEBE560A0000000, float 0x3FEBE7A480000000, float 0x3FEBE9E7A0000000, float 0x3FEBEC2A00000000, float 0x3FEBEE6BA0000000, float 0x3FEBF0ACA0000000, float 0x3FEBF2ECC0000000, float 0x3FEBF52C20000000, float 0x3FEBF76AC0000000, float 0x3FEBF9A8A0000000, float 0x3FEBFBE5C0000000, float 0x3FEBFE2240000000, float 0x3FEC005DE0000000, float 0x3FEC0298C0000000, float 0x3FEC04D2E0000000, float 0x3FEC070C40000000, float 0x3FEC094500000000, float 0x3FEC0B7CE0000000, float 0x3FEC0DB400000000, float 0x3FEC0FEA80000000, float 0x3FEC122020000000, float 0x3FEC145500000000, float 0x3FEC168920000000, float 0x3FEC18BCA0000000, float 0x3FEC1AEF40000000, float 0x3FEC1D2140000000, float 0x3FEC1F5260000000, float 0x3FEC2182C0000000, float 0x3FEC23B280000000, float 0x3FEC25E160000000, float 0x3FEC280FA0000000, float 0x3FEC2A3D00000000, float 0x3FEC2C69A0000000, float 0x3FEC2E95A0000000, float 0x3FEC30C0C0000000, float 0x3FEC32EB40000000, float 0x3FEC3514E0000000, float 0x3FEC373DE0000000, float 0x3FEC396600000000, float 0x3FEC3B8D80000000, float 0x3FEC3DB440000000, float 0x3FEC3FDA20000000, float 0x3FEC41FF60000000, float 0x3FEC4423C0000000, float 0x3FEC464780000000, float 0x3FEC486A80000000, float 0x3FEC4A8CA0000000, float 0x3FEC4CAE20000000, float 0x3FEC4ECEE0000000, float 0x3FEC50EEE0000000, float 0x3FEC530E00000000, float 0x3FEC552C80000000, float 0x3FEC574A40000000, float 0x3FEC596740000000, float 0x3FEC5B8380000000, float 0x3FEC5D9EE0000000, float 0x3FEC5FB9A0000000, float 0x3FEC61D3A0000000, float 0x3FEC63ECE0000000, float 0x3FEC660560000000, float 0x3FEC681D20000000, float 0x3FEC6A3420000000, float 0x3FEC6C4A60000000, float 0x3FEC6E5FE0000000, float 0x3FEC7074A0000000, float 0x3FEC7288A0000000, float 0x3FEC749C00000000, float 0x3FEC76AE80000000, float 0x3FEC78C040000000, float 0x3FEC7AD140000000, float 0x3FEC7CE1A0000000, float 0x3FEC7EF120000000, float 0x3FEC80FFE0000000, float 0x3FEC830E00000000, float 0x3FEC851B40000000, float 0x3FEC8727C0000000, float 0x3FEC8933A0000000, float 0x3FEC8B3EC0000000, float 0x3FEC8D4900000000, float 0x3FEC8F52A0000000, float 0x3FEC915B60000000, float 0x3FEC936380000000, float 0x3FEC956AE0000000, float 0x3FEC977180000000, float 0x3FEC997740000000, float 0x3FEC9B7C60000000, float 0x3FEC9D80C0000000, float 0x3FEC9F8460000000, float 0x3FECA18740000000, float 0x3FECA38960000000, float 0x3FECA58AC0000000, float 0x3FECA78B60000000, float 0x3FECA98B60000000, float 0x3FECAB8A80000000, float 0x3FECAD88E0000000, float 0x3FECAF86A0000000, float 0x3FECB18380000000, float 0x3FECB37FC0000000, float 0x3FECB57B20000000, float 0x3FECB775E0000000, float 0x3FECB96FC0000000, float 0x3FECBB6900000000, float 0x3FECBD6180000000, float 0x3FECBF5940000000, float 0x3FECC15040000000, float 0x3FECC34680000000, float 0x3FECC53C00000000, float 0x3FECC730C0000000, float 0x3FECC924C0000000, float 0x3FECCB1820000000, float 0x3FECCD0AA0000000, float 0x3FECCEFC60000000, float 0x3FECD0ED80000000, float 0x3FECD2DDC0000000, float 0x3FECD4CD60000000, float 0x3FECD6BC40000000, float 0x3FECD8AA60000000, float 0x3FECDA97C0000000, float 0x3FECDC8460000000, float 0x3FECDE7040000000, float 0x3FECE05B60000000, float 0x3FECE245C0000000, float 0x3FECE42F80000000, float 0x3FECE61860000000, float 0x3FECE800A0000000, float 0x3FECE9E800000000, float 0x3FECEBCEC0000000, float 0x3FECEDB4C0000000, float 0x3FECEF9A00000000, float 0x3FECF17E80000000, float 0x3FECF36240000000, float 0x3FECF54540000000, float 0x3FECF727A0000000, float 0x3FECF90920000000, float 0x3FECFAEA00000000, float 0x3FECFCCA00000000, float 0x3FECFEA960000000, float 0x3FED008800000000, float 0x3FED0265E0000000, float 0x3FED044300000000, float 0x3FED061F60000000, float 0x3FED07FB20000000, float 0x3FED09D600000000, float 0x3FED0BB040000000, float 0x3FED0D89C0000000, float 0x3FED0F6280000000, float 0x3FED113A80000000, float 0x3FED1311C0000000, float 0x3FED14E840000000, float 0x3FED16BE00000000, float 0x3FED189320000000, float 0x3FED1A6780000000, float 0x3FED1C3B20000000, float 0x3FED1E0E00000000, float 0x3FED1FE020000000, float 0x3FED21B180000000, float 0x3FED238220000000, float 0x3FED255220000000, float 0x3FED272160000000, float 0x3FED28EFE0000000, float 0x3FED2ABDA0000000, float 0x3FED2C8AA0000000, float 0x3FED2E56E0000000, float 0x3FED302280000000, float 0x3FED31ED40000000, float 0x3FED33B760000000, float 0x3FED3580C0000000, float 0x3FED374960000000, float 0x3FED391160000000, float 0x3FED3AD880000000, float 0x3FED3C9F00000000, float 0x3FED3E64C0000000, float 0x3FED4029C0000000, float 0x3FED41EE00000000, float 0x3FED43B1A0000000, float 0x3FED457460000000, float 0x3FED473680000000, float 0x3FED48F7E0000000, float 0x3FED4AB880000000, float 0x3FED4C7880000000, float 0x3FED4E37A0000000, float 0x3FED4FF620000000, float 0x3FED51B3E0000000, float 0x3FED5370E0000000, float 0x3FED552D40000000, float 0x3FED56E8C0000000, float 0x3FED58A3A0000000, float 0x3FED5A5DC0000000, float 0x3FED5C1740000000, float 0x3FED5DCFE0000000, float 0x3FED5F87E0000000, float 0x3FED613F20000000, float 0x3FED62F5A0000000, float 0x3FED64AB60000000, float 0x3FED666080000000, float 0x3FED6814E0000000, float 0x3FED69C880000000, float 0x3FED6B7B60000000, float 0x3FED6D2DA0000000, float 0x3FED6EDF20000000, float 0x3FED708FE0000000, float 0x3FED723FE0000000, float 0x3FED73EF40000000, float 0x3FED759DC0000000, float 0x3FED774BC0000000, float 0x3FED78F8E0000000, float 0x3FED7AA540000000, float 0x3FED7C5100000000, float 0x3FED7DFC00000000, float 0x3FED7FA660000000, float 0x3FED815000000000, float 0x3FED82F8C0000000, float 0x3FED84A100000000, float 0x3FED864860000000, float 0x3FED87EF20000000, float 0x3FED899520000000, float 0x3FED8B3A60000000, float 0x3FED8CDF00000000, float 0x3FED8E82E0000000, float 0x3FED902600000000, float 0x3FED91C880000000, float 0x3FED936A40000000, float 0x3FED950B40000000, float 0x3FED96AB80000000, float 0x3FED984B20000000, float 0x3FED99EA00000000, float 0x3FED9B8820000000, float 0x3FED9D25A0000000, float 0x3FED9EC260000000, float 0x3FEDA05E60000000, float 0x3FEDA1F9C0000000, float 0x3FEDA39460000000, float 0x3FEDA52E40000000, float 0x3FEDA6C780000000, float 0x3FEDA86000000000, float 0x3FEDA9F7C0000000, float 0x3FEDAB8EE0000000, float 0x3FEDAD2540000000, float 0x3FEDAEBAE0000000, float 0x3FEDB04FE0000000, float 0x3FEDB1E420000000, float 0x3FEDB377A0000000, float 0x3FEDB50A80000000, float 0x3FEDB69CA0000000, float 0x3FEDB82E20000000, float 0x3FEDB9BEE0000000, float 0x3FEDBB4EE0000000, float 0x3FEDBCDE40000000, float 0x3FEDBE6CE0000000, float 0x3FEDBFFAC0000000, float 0x3FEDC18800000000, float 0x3FEDC31480000000, float 0x3FEDC4A060000000, float 0x3FEDC62B60000000, float 0x3FEDC7B5E0000000, float 0x3FEDC93FA0000000, float 0x3FEDCAC8A0000000, float 0x3FEDCC50E0000000, float 0x3FEDCDD880000000, float 0x3FEDCF5F80000000, float 0x3FEDD0E5A0000000, float 0x3FEDD26B40000000, float 0x3FEDD3F000000000, float 0x3FEDD57420000000, float 0x3FEDD6F7A0000000, float 0x3FEDD87A60000000, float 0x3FEDD9FC60000000, float 0x3FEDDB7DC0000000, float 0x3FEDDCFE60000000, float 0x3FEDDE7E60000000, float 0x3FEDDFFDA0000000, float 0x3FEDE17C40000000, float 0x3FEDE2FA20000000, float 0x3FEDE47740000000, float 0x3FEDE5F3C0000000, float 0x3FEDE76FA0000000, float 0x3FEDE8EAA0000000, float 0x3FEDEA6520000000, float 0x3FEDEBDEE0000000, float 0x3FEDED57E0000000, float 0x3FEDEED040000000, float 0x3FEDF047E0000000, float 0x3FEDF1BEE0000000, float 0x3FEDF33520000000, float 0x3FEDF4AAC0000000, float 0x3FEDF61FA0000000, float 0x3FEDF793E0000000, float 0x3FEDF90760000000, float 0x3FEDFA7A40000000, float 0x3FEDFBEC60000000, float 0x3FEDFD5DE0000000, float 0x3FEDFECEA0000000, float 0x3FEE003EC0000000, float 0x3FEE01AE40000000, float 0x3FEE031CE0000000, float 0x3FEE048B00000000, float 0x3FEE05F860000000, float 0x3FEE076500000000, float 0x3FEE08D120000000, float 0x3FEE0A3C60000000, float 0x3FEE0BA700000000, float 0x3FEE0D1100000000, float 0x3FEE0E7A40000000, float 0x3FEE0FE2E0000000, float 0x3FEE114AE0000000, float 0x3FEE12B220000000, float 0x3FEE1418A0000000, float 0x3FEE157E80000000, float 0x3FEE16E3C0000000, float 0x3FEE184840000000, float 0x3FEE19AC20000000, float 0x3FEE1B0F60000000, float 0x3FEE1C71E0000000, float 0x3FEE1DD3A0000000, float 0x3FEE1F34E0000000, float 0x3FEE209560000000, float 0x3FEE21F520000000, float 0x3FEE235440000000, float 0x3FEE24B2C0000000, float 0x3FEE261080000000, float 0x3FEE276DA0000000, float 0x3FEE28CA20000000, float 0x3FEE2A25E0000000, float 0x3FEE2B8100000000, float 0x3FEE2CDB60000000, float 0x3FEE2E3540000000, float 0x3FEE2F8E40000000, float 0x3FEE30E6C0000000, float 0x3FEE323E80000000, float 0x3FEE3395A0000000, float 0x3FEE34EC00000000, float 0x3FEE3641C0000000, float 0x3FEE3796E0000000, float 0x3FEE38EB60000000, float 0x3FEE3A3F20000000, float 0x3FEE3B9240000000, float 0x3FEE3CE4A0000000, float 0x3FEE3E3660000000, float 0x3FEE3F8780000000, float 0x3FEE40D800000000, float 0x3FEE4227C0000000, float 0x3FEE4376E0000000, float 0x3FEE44C560000000, float 0x3FEE461340000000, float 0x3FEE476060000000, float 0x3FEE48ACE0000000, float 0x3FEE49F8A0000000, float 0x3FEE4B43E0000000, float 0x3FEE4C8E60000000, float 0x3FEE4DD840000000, float 0x3FEE4F2160000000, float 0x3FEE5069E0000000, float 0x3FEE51B1E0000000, float 0x3FEE52F900000000, float 0x3FEE543FA0000000, float 0x3FEE558580000000, float 0x3FEE56CAE0000000, float 0x3FEE580F60000000, float 0x3FEE595360000000, float 0x3FEE5A96C0000000, float 0x3FEE5BD960000000, float 0x3FEE5D1B60000000, float 0x3FEE5E5CC0000000, float 0x3FEE5F9D60000000, float 0x3FEE60DD80000000, float 0x3FEE621CE0000000, float 0x3FEE635BA0000000, float 0x3FEE6499C0000000, float 0x3FEE65D740000000, float 0x3FEE671400000000, float 0x3FEE685040000000, float 0x3FEE698BC0000000, float 0x3FEE6AC6A0000000, float 0x3FEE6C00E0000000, float 0x3FEE6D3A80000000, float 0x3FEE6E7360000000, float 0x3FEE6FABC0000000, float 0x3FEE70E360000000, float 0x3FEE721A60000000, float 0x3FEE7350C0000000, float 0x3FEE748680000000, float 0x3FEE75BBA0000000, float 0x3FEE76F000000000, float 0x3FEE7823E0000000, float 0x3FEE795700000000, float 0x3FEE7A89A0000000, float 0x3FEE7BBB80000000, float 0x3FEE7CECC0000000, float 0x3FEE7E1D60000000, float 0x3FEE7F4D60000000, float 0x3FEE807CC0000000, float 0x3FEE81AB80000000, float 0x3FEE82D980000000, float 0x3FEE840700000000, float 0x3FEE8533E0000000, float 0x3FEE866000000000, float 0x3FEE878BA0000000, float 0x3FEE88B680000000, float 0x3FEE89E0C0000000, float 0x3FEE8B0A80000000, float 0x3FEE8C3380000000, float 0x3FEE8D5BE0000000, float 0x3FEE8E83A0000000, float 0x3FEE8FAAE0000000, float 0x3FEE90D160000000, float 0x3FEE91F740000000, float 0x3FEE931C80000000, float 0x3FEE944120000000, float 0x3FEE956520000000, float 0x3FEE968880000000, float 0x3FEE97AB60000000, float 0x3FEE98CD80000000, float 0x3FEE99EF00000000, float 0x3FEE9B0FE0000000, float 0x3FEE9C3020000000, float 0x3FEE9D4FE0000000, float 0x3FEE9E6EE0000000, float 0x3FEE9F8D40000000, float 0x3FEEA0AB20000000, float 0x3FEEA1C840000000, float 0x3FEEA2E4C0000000, float 0x3FEEA400C0000000, float 0x3FEEA51C20000000, float 0x3FEEA636C0000000, float 0x3FEEA750E0000000, float 0x3FEEA86A60000000, float 0x3FEEA98340000000, float 0x3FEEAA9B80000000, float 0x3FEEABB320000000, float 0x3FEEACCA20000000, float 0x3FEEADE080000000, float 0x3FEEAEF660000000, float 0x3FEEB00B80000000, float 0x3FEEB12020000000, float 0x3FEEB23400000000, float 0x3FEEB34760000000, float 0x3FEEB45A20000000, float 0x3FEEB56C40000000, float 0x3FEEB67DE0000000, float 0x3FEEB78EC0000000, float 0x3FEEB89F20000000, float 0x3FEEB9AEC0000000, float 0x3FEEBABDE0000000, float 0x3FEEBBCC60000000, float 0x3FEEBCDA40000000, float 0x3FEEBDE7A0000000, float 0x3FEEBEF440000000, float 0x3FEEC00060000000, float 0x3FEEC10BE0000000, float 0x3FEEC216C0000000, float 0x3FEEC32100000000, float 0x3FEEC42AC0000000, float 0x3FEEC533E0000000, float 0x3FEEC63C60000000, float 0x3FEEC74440000000, float 0x3FEEC84B80000000, float 0x3FEEC95240000000, float 0x3FEECA5860000000, float 0x3FEECB5DE0000000, float 0x3FEECC62C0000000, float 0x3FEECD6720000000, float 0x3FEECE6AC0000000, float 0x3FEECF6E00000000, float 0x3FEED07080000000, float 0x3FEED17280000000, float 0x3FEED273C0000000, float 0x3FEED374A0000000, float 0x3FEED474C0000000, float 0x3FEED57460000000, float 0x3FEED67360000000, float 0x3FEED771C0000000, float 0x3FEED86FA0000000, float 0x3FEED96CE0000000, float 0x3FEEDA6980000000, float 0x3FEEDB65A0000000, float 0x3FEEDC6120000000, float 0x3FEEDD5C00000000, float 0x3FEEDE5640000000, float 0x3FEEDF5000000000, float 0x3FEEE04940000000, float 0x3FEEE141C0000000, float 0x3FEEE239C0000000, float 0x3FEEE33120000000, float 0x3FEEE42800000000, float 0x3FEEE51E40000000, float 0x3FEEE61400000000, float 0x3FEEE70900000000, float 0x3FEEE7FDA0000000, float 0x3FEEE8F180000000, float 0x3FEEE9E4E0000000, float 0x3FEEEAD7C0000000, float 0x3FEEEBC9E0000000, float 0x3FEEECBB80000000, float 0x3FEEEDACA0000000, float 0x3FEEEE9D20000000, float 0x3FEEEF8D20000000, float 0x3FEEF07C80000000, float 0x3FEEF16B40000000, float 0x3FEEF25980000000, float 0x3FEEF34720000000, float 0x3FEEF43440000000, float 0x3FEEF520C0000000, float 0x3FEEF60CA0000000, float 0x3FEEF6F800000000, float 0x3FEEF7E2E0000000, float 0x3FEEF8CD20000000, float 0x3FEEF9B6C0000000, float 0x3FEEFA9FE0000000, float 0x3FEEFB8880000000, float 0x3FEEFC7080000000, float 0x3FEEFD57E0000000, float 0x3FEEFE3EC0000000, float 0x3FEEFF2520000000, float 0x3FEF000AE0000000, float 0x3FEF00F020000000, float 0x3FEF01D4C0000000, float 0x3FEF02B8C0000000, float 0x3FEF039C60000000, float 0x3FEF047F40000000, float 0x3FEF0561C0000000, float 0x3FEF064380000000, float 0x3FEF0724E0000000, float 0x3FEF0805A0000000, float 0x3FEF08E5C0000000, float 0x3FEF09C580000000, float 0x3FEF0AA480000000, float 0x3FEF0B8320000000, float 0x3FEF0C6120000000, float 0x3FEF0D3E80000000, float 0x3FEF0E1B60000000, float 0x3FEF0EF7C0000000, float 0x3FEF0FD380000000, float 0x3FEF10AEC0000000, float 0x3FEF118980000000, float 0x3FEF1263A0000000, float 0x3FEF133D40000000, float 0x3FEF141660000000, float 0x3FEF14EEE0000000, float 0x3FEF15C6E0000000, float 0x3FEF169E40000000, float 0x3FEF177520000000, float 0x3FEF184B80000000, float 0x3FEF192160000000, float 0x3FEF19F6A0000000, float 0x3FEF1ACB60000000, float 0x3FEF1B9F80000000, float 0x3FEF1C7340000000, float 0x3FEF1D4660000000, float 0x3FEF1E18E0000000, float 0x3FEF1EEB00000000, float 0x3FEF1FBC80000000, float 0x3FEF208D80000000, float 0x3FEF215E00000000, float 0x3FEF222DE0000000, float 0x3FEF22FD40000000, float 0x3FEF23CC20000000, float 0x3FEF249A60000000, float 0x3FEF256840000000, float 0x3FEF263580000000, float 0x3FEF270240000000, float 0x3FEF27CE80000000, float 0x3FEF289A20000000, float 0x3FEF296540000000, float 0x3FEF2A2FE0000000, float 0x3FEF2AFA00000000, float 0x3FEF2BC3A0000000, float 0x3FEF2C8CA0000000, float 0x3FEF2D5540000000, float 0x3FEF2E1D40000000, float 0x3FEF2EE4C0000000, float 0x3FEF2FABA0000000, float 0x3FEF307220000000, float 0x3FEF313820000000, float 0x3FEF31FD80000000, float 0x3FEF32C260000000, float 0x3FEF3386C0000000, float 0x3FEF344AA0000000, float 0x3FEF350E00000000, float 0x3FEF35D0C0000000, float 0x3FEF369320000000, float 0x3FEF3754E0000000, float 0x3FEF381640000000, float 0x3FEF38D700000000, float 0x3FEF399740000000, float 0x3FEF3A5700000000, float 0x3FEF3B1640000000, float 0x3FEF3BD500000000, float 0x3FEF3C9340000000, float 0x3FEF3D50E0000000, float 0x3FEF3E0E20000000, float 0x3FEF3ECAE0000000, float 0x3FEF3F8700000000, float 0x3FEF4042C0000000, float 0x3FEF40FDE0000000, float 0x3FEF41B8A0000000, float 0x3FEF4272C0000000, float 0x3FEF432C80000000, float 0x3FEF43E5A0000000, float 0x3FEF449E60000000, float 0x3FEF455680000000, float 0x3FEF460E20000000, float 0x3FEF46C560000000, float 0x3FEF477C00000000, float 0x3FEF483240000000, float 0x3FEF48E7E0000000, float 0x3FEF499D20000000, float 0x3FEF4A51C0000000, float 0x3FEF4B0600000000, float 0x3FEF4BB9C0000000, float 0x3FEF4C6CE0000000, float 0x3FEF4D1FA0000000, float 0x3FEF4DD1E0000000, float 0x3FEF4E83A0000000, float 0x3FEF4F34E0000000, float 0x3FEF4FE5A0000000, float 0x3FEF5095E0000000, float 0x3FEF5145A0000000, float 0x3FEF51F500000000, float 0x3FEF52A3C0000000, float 0x3FEF535220000000, float 0x3FEF53FFE0000000, float 0x3FEF54AD40000000, float 0x3FEF555A20000000, float 0x3FEF560680000000, float 0x3FEF56B260000000, float 0x3FEF575DE0000000, float 0x3FEF5808C0000000, float 0x3FEF58B340000000, float 0x3FEF595D40000000, float 0x3FEF5A06C0000000, float 0x3FEF5AAFC0000000, float 0x3FEF5B5840000000, float 0x3FEF5C0060000000, float 0x3FEF5CA800000000, float 0x3FEF5D4F20000000, float 0x3FEF5DF5C0000000, float 0x3FEF5E9BE0000000, float 0x3FEF5F41A0000000, float 0x3FEF5FE6E0000000, float 0x3FEF608BA0000000, float 0x3FEF612FE0000000, float 0x3FEF61D3A0000000, float 0x3FEF627700000000, float 0x3FEF6319E0000000, float 0x3FEF63BC60000000, float 0x3FEF645E40000000, float 0x3FEF64FFC0000000, float 0x3FEF65A0C0000000, float 0x3FEF664140000000, float 0x3FEF66E160000000, float 0x3FEF678100000000, float 0x3FEF682020000000, float 0x3FEF68BEE0000000, float 0x3FEF695D20000000, float 0x3FEF69FAE0000000, float 0x3FEF6A9820000000, float 0x3FEF6B3500000000, float 0x3FEF6BD160000000, float 0x3FEF6C6D60000000, float 0x3FEF6D08E0000000, float 0x3FEF6DA3E0000000, float 0x3FEF6E3E60000000, float 0x3FEF6ED880000000, float 0x3FEF6F7240000000, float 0x3FEF700B60000000, float 0x3FEF70A420000000, float 0x3FEF713C80000000, float 0x3FEF71D460000000, float 0x3FEF726BC0000000, float 0x3FEF7302C0000000, float 0x3FEF739940000000, float 0x3FEF742F40000000, float 0x3FEF74C4E0000000, float 0x3FEF755A00000000, float 0x3FEF75EEC0000000, float 0x3FEF768300000000, float 0x3FEF7716E0000000, float 0x3FEF77AA40000000, float 0x3FEF783D20000000, float 0x3FEF78CFA0000000, float 0x3FEF7961C0000000, float 0x3FEF79F360000000, float 0x3FEF7A8480000000, float 0x3FEF7B1540000000, float 0x3FEF7BA5A0000000, float 0x3FEF7C3580000000, float 0x3FEF7CC4E0000000, float 0x3FEF7D53E0000000, float 0x3FEF7DE260000000, float 0x3FEF7E7080000000, float 0x3FEF7EFE40000000, float 0x3FEF7F8B80000000, float 0x3FEF801860000000, float 0x3FEF80A4C0000000, float 0x3FEF8130A0000000, float 0x3FEF81BC40000000, float 0x3FEF824740000000, float 0x3FEF82D200000000, float 0x3FEF835C40000000, float 0x3FEF83E600000000, float 0x3FEF846F60000000, float 0x3FEF84F860000000, float 0x3FEF8580E0000000, float 0x3FEF860900000000, float 0x3FEF8690C0000000, float 0x3FEF871800000000, float 0x3FEF879EE0000000, float 0x3FEF882540000000, float 0x3FEF88AB40000000, float 0x3FEF8930E0000000, float 0x3FEF89B600000000, float 0x3FEF8A3AC0000000, float 0x3FEF8ABF20000000, float 0x3FEF8B4300000000, float 0x3FEF8BC680000000, float 0x3FEF8C49A0000000, float 0x3FEF8CCC40000000, float 0x3FEF8D4E80000000, float 0x3FEF8DD060000000, float 0x3FEF8E51C0000000, float 0x3FEF8ED2C0000000, float 0x3FEF8F5360000000, float 0x3FEF8FD3A0000000, float 0x3FEF905360000000, float 0x3FEF90D2C0000000, float 0x3FEF9151C0000000, float 0x3FEF91D040000000, float 0x3FEF924E80000000, float 0x3FEF92CC40000000, float 0x3FEF9349A0000000, float 0x3FEF93C680000000, float 0x3FEF944300000000, float 0x3FEF94BF20000000, float 0x3FEF953AE0000000, float 0x3FEF95B640000000, float 0x3FEF963120000000, float 0x3FEF96ABC0000000, float 0x3FEF9725E0000000, float 0x3FEF979FA0000000, float 0x3FEF9818E0000000, float 0x3FEF9891E0000000, float 0x3FEF990A60000000, float 0x3FEF998280000000, float 0x3FEF99FA60000000, float 0x3FEF9A71A0000000, float 0x3FEF9AE8A0000000, float 0x3FEF9B5F40000000, float 0x3FEF9BD560000000, float 0x3FEF9C4B40000000, float 0x3FEF9CC0A0000000, float 0x3FEF9D35A0000000, float 0x3FEF9DAA40000000, float 0x3FEF9E1E80000000, float 0x3FEF9E9260000000, float 0x3FEF9F05C0000000, float 0x3FEF9F78E0000000, float 0x3FEF9FEBA0000000, float 0x3FEFA05DE0000000, float 0x3FEFA0CFE0000000, float 0x3FEFA14160000000, float 0x3FEFA1B280000000, float 0x3FEFA22360000000, float 0x3FEFA293C0000000, float 0x3FEFA303C0000000, float 0x3FEFA37360000000, float 0x3FEFA3E2A0000000, float 0x3FEFA45180000000, float 0x3FEFA4C000000000, float 0x3FEFA52E40000000, float 0x3FEFA59C00000000, float 0x3FEFA60960000000, float 0x3FEFA67660000000, float 0x3FEFA6E300000000, float 0x3FEFA74F40000000, float 0x3FEFA7BB20000000, float 0x3FEFA826C0000000, float 0x3FEFA891E0000000, float 0x3FEFA8FCA0000000, float 0x3FEFA96700000000, float 0x3FEFA9D120000000, float 0x3FEFAA3AC0000000, float 0x3FEFAAA420000000, float 0x3FEFAB0D00000000, float 0x3FEFAB75A0000000, float 0x3FEFABDDE0000000, float 0x3FEFAC45C0000000, float 0x3FEFACAD40000000, float 0x3FEFAD1460000000, float 0x3FEFAD7B20000000, float 0x3FEFADE180000000, float 0x3FEFAE47A0000000, float 0x3FEFAEAD40000000, float 0x3FEFAF12A0000000, float 0x3FEFAF77A0000000, float 0x3FEFAFDC40000000, float 0x3FEFB04080000000, float 0x3FEFB0A480000000, float 0x3FEFB10800000000, float 0x3FEFB16B40000000, float 0x3FEFB1CE00000000, float 0x3FEFB230A0000000, float 0x3FEFB292C0000000, float 0x3FEFB2F480000000, float 0x3FEFB35600000000, float 0x3FEFB3B720000000, float 0x3FEFB417E0000000, float 0x3FEFB47840000000, float 0x3FEFB4D840000000, float 0x3FEFB53800000000, float 0x3FEFB59760000000, float 0x3FEFB5F660000000, float 0x3FEFB65500000000, float 0x3FEFB6B360000000, float 0x3FEFB71160000000, float 0x3FEFB76F00000000, float 0x3FEFB7CC60000000, float 0x3FEFB82940000000, float 0x3FEFB88600000000, float 0x3FEFB8E240000000, float 0x3FEFB93E20000000, float 0x3FEFB999C0000000, float 0x3FEFB9F520000000, float 0x3FEFBA5000000000, float 0x3FEFBAAAA0000000, float 0x3FEFBB04E0000000, float 0x3FEFBB5EE0000000, float 0x3FEFBBB880000000, float 0x3FEFBC11C0000000, float 0x3FEFBC6AA0000000, float 0x3FEFBCC340000000, float 0x3FEFBD1B80000000, float 0x3FEFBD7380000000, float 0x3FEFBDCB20000000, float 0x3FEFBE2260000000, float 0x3FEFBE7960000000, float 0x3FEFBED000000000, float 0x3FEFBF2660000000, float 0x3FEFBF7C60000000, float 0x3FEFBFD200000000, float 0x3FEFC02760000000, float 0x3FEFC07C60000000, float 0x3FEFC0D120000000, float 0x3FEFC12580000000, float 0x3FEFC17980000000, float 0x3FEFC1CD40000000, float 0x3FEFC220C0000000, float 0x3FEFC273C0000000, float 0x3FEFC2C6A0000000, float 0x3FEFC31900000000, float 0x3FEFC36B40000000, float 0x3FEFC3BD00000000, float 0x3FEFC40E80000000, float 0x3FEFC45FC0000000, float 0x3FEFC4B0A0000000, float 0x3FEFC50140000000, float 0x3FEFC55180000000, float 0x3FEFC5A180000000, float 0x3FEFC5F120000000, float 0x3FEFC64080000000, float 0x3FEFC68F80000000, float 0x3FEFC6DE40000000, float 0x3FEFC72CA0000000, float 0x3FEFC77AC0000000, float 0x3FEFC7C880000000, float 0x3FEFC81600000000, float 0x3FEFC86340000000, float 0x3FEFC8B020000000, float 0x3FEFC8FCC0000000, float 0x3FEFC94900000000, float 0x3FEFC99500000000, float 0x3FEFC9E0A0000000, float 0x3FEFCA2C00000000, float 0x3FEFCA7720000000, float 0x3FEFCAC1E0000000, float 0x3FEFCB0C60000000, float 0x3FEFCB56A0000000, float 0x3FEFCBA080000000, float 0x3FEFCBEA20000000, float 0x3FEFCC3360000000, float 0x3FEFCC7C60000000, float 0x3FEFCCC520000000, float 0x3FEFCD0D80000000, float 0x3FEFCD55A0000000, float 0x3FEFCD9D80000000, float 0x3FEFCDE500000000, float 0x3FEFCE2C40000000, float 0x3FEFCE7340000000, float 0x3FEFCEBA00000000, float 0x3FEFCF0060000000, float 0x3FEFCF4660000000, float 0x3FEFCF8C40000000, float 0x3FEFCFD1C0000000, float 0x3FEFD01700000000, float 0x3FEFD05C00000000, float 0x3FEFD0A0A0000000, float 0x3FEFD0E500000000, float 0x3FEFD12920000000, float 0x3FEFD16D00000000, float 0x3FEFD1B080000000, float 0x3FEFD1F3E0000000, float 0x3FEFD236E0000000, float 0x3FEFD27980000000, float 0x3FEFD2BC00000000, float 0x3FEFD2FE20000000, float 0x3FEFD34000000000, float 0x3FEFD381A0000000, float 0x3FEFD3C300000000, float 0x3FEFD40400000000, float 0x3FEFD444C0000000, float 0x3FEFD48540000000, float 0x3FEFD4C580000000, float 0x3FEFD50580000000, float 0x3FEFD54520000000, float 0x3FEFD584A0000000, float 0x3FEFD5C3C0000000, float 0x3FEFD602A0000000, float 0x3FEFD64140000000, float 0x3FEFD67FA0000000, float 0x3FEFD6BDC0000000, float 0x3FEFD6FB80000000, float 0x3FEFD73920000000, float 0x3FEFD77660000000, float 0x3FEFD7B360000000, float 0x3FEFD7F020000000, float 0x3FEFD82CA0000000, float 0x3FEFD868E0000000, float 0x3FEFD8A4E0000000, float 0x3FEFD8E0A0000000, float 0x3FEFD91C00000000, float 0x3FEFD95740000000, float 0x3FEFD99220000000, float 0x3FEFD9CCE0000000, float 0x3FEFDA0740000000, float 0x3FEFDA4180000000, float 0x3FEFDA7B60000000, float 0x3FEFDAB500000000, float 0x3FEFDAEE60000000, float 0x3FEFDB27A0000000, float 0x3FEFDB6080000000, float 0x3FEFDB9920000000, float 0x3FEFDBD180000000, float 0x3FEFDC09A0000000, float 0x3FEFDC4180000000, float 0x3FEFDC7940000000, float 0x3FEFDCB0A0000000, float 0x3FEFDCE7C0000000, float 0x3FEFDD1EA0000000, float 0x3FEFDD5540000000, float 0x3FEFDD8BC0000000, float 0x3FEFDDC1E0000000, float 0x3FEFDDF7C0000000, float 0x3FEFDE2D80000000, float 0x3FEFDE62E0000000, float 0x3FEFDE9820000000, float 0x3FEFDECD00000000, float 0x3FEFDF01C0000000, float 0x3FEFDF3640000000, float 0x3FEFDF6A80000000, float 0x3FEFDF9E60000000, float 0x3FEFDFD220000000, float 0x3FEFE005C0000000, float 0x3FEFE03900000000, float 0x3FEFE06C00000000, float 0x3FEFE09EE0000000, float 0x3FEFE0D160000000, float 0x3FEFE103C0000000, float 0x3FEFE135E0000000, float 0x3FEFE167C0000000, float 0x3FEFE19960000000, float 0x3FEFE1CAC0000000, float 0x3FEFE1FBE0000000, float 0x3FEFE22CE0000000, float 0x3FEFE25DA0000000, float 0x3FEFE28E00000000, float 0x3FEFE2BE40000000, float 0x3FEFE2EE60000000, float 0x3FEFE31E20000000, float 0x3FEFE34DC0000000, float 0x3FEFE37D20000000, float 0x3FEFE3AC40000000, float 0x3FEFE3DB20000000, float 0x3FEFE409C0000000, float 0x3FEFE43840000000, float 0x3FEFE46680000000, float 0x3FEFE49480000000, float 0x3FEFE4C240000000, float 0x3FEFE4EFE0000000, float 0x3FEFE51D40000000, float 0x3FEFE54A60000000, float 0x3FEFE57740000000, float 0x3FEFE5A400000000, float 0x3FEFE5D060000000, float 0x3FEFE5FCC0000000, float 0x3FEFE628C0000000, float 0x3FEFE654A0000000, float 0x3FEFE68040000000, float 0x3FEFE6ABA0000000, float 0x3FEFE6D6C0000000, float 0x3FEFE701C0000000, float 0x3FEFE72C80000000, float 0x3FEFE75720000000, float 0x3FEFE78180000000, float 0x3FEFE7ABA0000000, float 0x3FEFE7D580000000, float 0x3FEFE7FF40000000, float 0x3FEFE828C0000000, float 0x3FEFE85220000000, float 0x3FEFE87B20000000, float 0x3FEFE8A420000000, float 0x3FEFE8CCC0000000, float 0x3FEFE8F540000000, float 0x3FEFE91D80000000, float 0x3FEFE945A0000000, float 0x3FEFE96D80000000, float 0x3FEFE99520000000, float 0x3FEFE9BCA0000000, float 0x3FEFE9E3E0000000, float 0x3FEFEA0B00000000, float 0x3FEFEA31E0000000, float 0x3FEFEA5880000000, float 0x3FEFEA7F00000000, float 0x3FEFEAA540000000, float 0x3FEFEACB60000000, float 0x3FEFEAF140000000, float 0x3FEFEB1700000000, float 0x3FEFEB3C80000000, float 0x3FEFEB61C0000000, float 0x3FEFEB86E0000000, float 0x3FEFEBABC0000000, float 0x3FEFEBD080000000, float 0x3FEFEBF520000000, float 0x3FEFEC1960000000, float 0x3FEFEC3DA0000000, float 0x3FEFEC6180000000, float 0x3FEFEC8540000000, float 0x3FEFECA8E0000000, float 0x3FEFECCC40000000, float 0x3FEFECEF80000000, float 0x3FEFED1280000000, float 0x3FEFED3560000000, float 0x3FEFED5800000000, float 0x3FEFED7A80000000, float 0x3FEFED9CC0000000, float 0x3FEFEDBEE0000000, float 0x3FEFEDE0C0000000, float 0x3FEFEE0280000000, float 0x3FEFEE2420000000, float 0x3FEFEE4580000000, float 0x3FEFEE66A0000000, float 0x3FEFEE87A0000000, float 0x3FEFEEA880000000, float 0x3FEFEEC920000000, float 0x3FEFEEE9A0000000, float 0x3FEFEF09E0000000, float 0x3FEFEF2A00000000, float 0x3FEFEF4A00000000, float 0x3FEFEF69C0000000, float 0x3FEFEF8960000000, float 0x3FEFEFA8C0000000, float 0x3FEFEFC800000000, float 0x3FEFEFE720000000, float 0x3FEFF00600000000, float 0x3FEFF024C0000000, float 0x3FEFF04360000000, float 0x3FEFF061C0000000, float 0x3FEFF08000000000, float 0x3FEFF09E00000000, float 0x3FEFF0BBE0000000, float 0x3FEFF0D9A0000000, float 0x3FEFF0F720000000, float 0x3FEFF11480000000, float 0x3FEFF131C0000000, float 0x3FEFF14EC0000000, float 0x3FEFF16BA0000000, float 0x3FEFF18860000000, float 0x3FEFF1A500000000, float 0x3FEFF1C160000000, float 0x3FEFF1DDA0000000, float 0x3FEFF1F9A0000000, float 0x3FEFF215A0000000, float 0x3FEFF23160000000, float 0x3FEFF24CE0000000, float 0x3FEFF26860000000, float 0x3FEFF283A0000000, float 0x3FEFF29EC0000000, float 0x3FEFF2B9A0000000, float 0x3FEFF2D480000000, float 0x3FEFF2EF20000000, float 0x3FEFF309A0000000, float 0x3FEFF323E0000000, float 0x3FEFF33E20000000, float 0x3FEFF35820000000, float 0x3FEFF37200000000, float 0x3FEFF38BA0000000, float 0x3FEFF3A540000000, float 0x3FEFF3BEA0000000, float 0x3FEFF3D7E0000000, float 0x3FEFF3F100000000, float 0x3FEFF409E0000000, float 0x3FEFF422C0000000, float 0x3FEFF43B60000000, float 0x3FEFF453E0000000, float 0x3FEFF46C40000000, float 0x3FEFF48480000000, float 0x3FEFF49C80000000, float 0x3FEFF4B460000000, float 0x3FEFF4CC40000000, float 0x3FEFF4E3E0000000, float 0x3FEFF4FB60000000, float 0x3FEFF512A0000000, float 0x3FEFF529E0000000, float 0x3FEFF540E0000000, float 0x3FEFF557C0000000, float 0x3FEFF56EA0000000, float 0x3FEFF58540000000, float 0x3FEFF59BA0000000, float 0x3FEFF5B200000000, float 0x3FEFF5C840000000, float 0x3FEFF5DE40000000, float 0x3FEFF5F440000000, float 0x3FEFF60A00000000, float 0x3FEFF61FA0000000, float 0x3FEFF63520000000, float 0x3FEFF64AA0000000, float 0x3FEFF65FC0000000, float 0x3FEFF674E0000000, float 0x3FEFF689E0000000, float 0x3FEFF69EC0000000, float 0x3FEFF6B380000000, float 0x3FEFF6C800000000, float 0x3FEFF6DC80000000, float 0x3FEFF6F0C0000000, float 0x3FEFF70500000000, float 0x3FEFF71900000000, float 0x3FEFF72CE0000000, float 0x3FEFF740C0000000, float 0x3FEFF75460000000, float 0x3FEFF767E0000000, float 0x3FEFF77B60000000, float 0x3FEFF78EA0000000, float 0x3FEFF7A1C0000000, float 0x3FEFF7B4C0000000, float 0x3FEFF7C7A0000000, float 0x3FEFF7DA80000000, float 0x3FEFF7ED20000000, float 0x3FEFF7FFA0000000, float 0x3FEFF81200000000, float 0x3FEFF82440000000, float 0x3FEFF83680000000, float 0x3FEFF84880000000, float 0x3FEFF85A60000000, float 0x3FEFF86C40000000, float 0x3FEFF87DE0000000, float 0x3FEFF88F60000000, float 0x3FEFF8A0E0000000, float 0x3FEFF8B220000000, float 0x3FEFF8C360000000, float 0x3FEFF8D460000000, float 0x3FEFF8E560000000, float 0x3FEFF8F640000000, float 0x3FEFF90700000000, float 0x3FEFF917A0000000, float 0x3FEFF92820000000, float 0x3FEFF93880000000, float 0x3FEFF948C0000000, float 0x3FEFF958E0000000, float 0x3FEFF968E0000000, float 0x3FEFF978E0000000, float 0x3FEFF988A0000000, float 0x3FEFF99860000000, float 0x3FEFF9A800000000, float 0x3FEFF9B760000000, float 0x3FEFF9C6C0000000, float 0x3FEFF9D620000000, float 0x3FEFF9E540000000, float 0x3FEFF9F440000000, float 0x3FEFFA0340000000, float 0x3FEFFA1200000000, float 0x3FEFFA20C0000000, float 0x3FEFFA2F60000000, float 0x3FEFFA3DE0000000, float 0x3FEFFA4C40000000, float 0x3FEFFA5AA0000000, float 0x3FEFFA68C0000000, float 0x3FEFFA76E0000000, float 0x3FEFFA84E0000000, float 0x3FEFFA92C0000000, float 0x3FEFFAA080000000, float 0x3FEFFAAE40000000, float 0x3FEFFABBC0000000, float 0x3FEFFAC940000000, float 0x3FEFFAD6A0000000, float 0x3FEFFAE400000000, float 0x3FEFFAF120000000, float 0x3FEFFAFE40000000, float 0x3FEFFB0B20000000, float 0x3FEFFB1800000000, float 0x3FEFFB24E0000000, float 0x3FEFFB3180000000, float 0x3FEFFB3E20000000, float 0x3FEFFB4AA0000000, float 0x3FEFFB5700000000, float 0x3FEFFB6360000000, float 0x3FEFFB6F80000000, float 0x3FEFFB7BA0000000, float 0x3FEFFB87A0000000, float 0x3FEFFB93A0000000, float 0x3FEFFB9F60000000, float 0x3FEFFBAB20000000, float 0x3FEFFBB6E0000000, float 0x3FEFFBC260000000, float 0x3FEFFBCDE0000000, float 0x3FEFFBD940000000, float 0x3FEFFBE480000000, float 0x3FEFFBEFC0000000, float 0x3FEFFBFAE0000000, float 0x3FEFFC05E0000000, float 0x3FEFFC10C0000000, float 0x3FEFFC1BA0000000, float 0x3FEFFC2660000000, float 0x3FEFFC3120000000, float 0x3FEFFC3BA0000000, float 0x3FEFFC4620000000, float 0x3FEFFC50A0000000, float 0x3FEFFC5AE0000000, float 0x3FEFFC6520000000, float 0x3FEFFC6F40000000, float 0x3FEFFC7960000000, float 0x3FEFFC8360000000, float 0x3FEFFC8D40000000, float 0x3FEFFC9720000000, float 0x3FEFFCA0E0000000, float 0x3FEFFCAA80000000, float 0x3FEFFCB420000000, float 0x3FEFFCBDA0000000, float 0x3FEFFCC700000000, float 0x3FEFFCD060000000, float 0x3FEFFCD9A0000000, float 0x3FEFFCE2E0000000, float 0x3FEFFCEC00000000, float 0x3FEFFCF500000000, float 0x3FEFFCFDE0000000, float 0x3FEFFD06C0000000, float 0x3FEFFD0FA0000000, float 0x3FEFFD1860000000, float 0x3FEFFD2100000000, float 0x3FEFFD2980000000, float 0x3FEFFD3200000000, float 0x3FEFFD3A80000000, float 0x3FEFFD42E0000000, float 0x3FEFFD4B20000000, float 0x3FEFFD5340000000, float 0x3FEFFD5B60000000, float 0x3FEFFD6380000000, float 0x3FEFFD6B80000000, float 0x3FEFFD7360000000, float 0x3FEFFD7B40000000, float 0x3FEFFD8300000000, float 0x3FEFFD8AC0000000, float 0x3FEFFD9260000000, float 0x3FEFFD99E0000000, float 0x3FEFFDA160000000, float 0x3FEFFDA8E0000000, float 0x3FEFFDB040000000, float 0x3FEFFDB780000000, float 0x3FEFFDBEC0000000, float 0x3FEFFDC5E0000000, float 0x3FEFFDCD00000000, float 0x3FEFFDD400000000, float 0x3FEFFDDB00000000, float 0x3FEFFDE1E0000000, float 0x3FEFFDE8A0000000, float 0x3FEFFDEF60000000, float 0x3FEFFDF620000000, float 0x3FEFFDFCC0000000, float 0x3FEFFE0360000000, float 0x3FEFFE09E0000000, float 0x3FEFFE1040000000, float 0x3FEFFE16C0000000, float 0x3FEFFE1D00000000, float 0x3FEFFE2340000000, float 0x3FEFFE2980000000, float 0x3FEFFE2FA0000000, float 0x3FEFFE35C0000000, float 0x3FEFFE3BC0000000, float 0x3FEFFE41C0000000, float 0x3FEFFE47A0000000, float 0x3FEFFE4D80000000, float 0x3FEFFE5340000000, float 0x3FEFFE5900000000, float 0x3FEFFE5EA0000000, float 0x3FEFFE6440000000, float 0x3FEFFE69E0000000, float 0x3FEFFE6F60000000, float 0x3FEFFE74C0000000, float 0x3FEFFE7A20000000, float 0x3FEFFE7F80000000, float 0x3FEFFE84C0000000, float 0x3FEFFE8A00000000, float 0x3FEFFE8F20000000, float 0x3FEFFE9440000000, float 0x3FEFFE9960000000, float 0x3FEFFE9E60000000, float 0x3FEFFEA360000000, float 0x3FEFFEA840000000, float 0x3FEFFEAD20000000, float 0x3FEFFEB1E0000000, float 0x3FEFFEB6A0000000, float 0x3FEFFEBB60000000, float 0x3FEFFEC000000000, float 0x3FEFFEC4A0000000, float 0x3FEFFEC920000000, float 0x3FEFFECDA0000000, float 0x3FEFFED220000000, float 0x3FEFFED680000000, float 0x3FEFFEDAE0000000, float 0x3FEFFEDF40000000, float 0x3FEFFEE380000000, float 0x3FEFFEE7C0000000, float 0x3FEFFEEBE0000000, float 0x3FEFFEF000000000, float 0x3FEFFEF400000000, float 0x3FEFFEF820000000, float 0x3FEFFEFC20000000, float 0x3FEFFF0000000000, float 0x3FEFFF03E0000000, float 0x3FEFFF07C0000000, float 0x3FEFFF0BA0000000, float 0x3FEFFF0F60000000, float 0x3FEFFF1300000000, float 0x3FEFFF16C0000000, float 0x3FEFFF1A60000000, float 0x3FEFFF1E00000000, float 0x3FEFFF2180000000, float 0x3FEFFF2500000000, float 0x3FEFFF2880000000, float 0x3FEFFF2BE0000000, float 0x3FEFFF2F40000000, float 0x3FEFFF32A0000000, float 0x3FEFFF35E0000000, float 0x3FEFFF3940000000, float 0x3FEFFF3C60000000, float 0x3FEFFF3FA0000000, float 0x3FEFFF42C0000000, float 0x3FEFFF45E0000000, float 0x3FEFFF48E0000000, float 0x3FEFFF4C00000000, float 0x3FEFFF4F00000000, float 0x3FEFFF51E0000000, float 0x3FEFFF54C0000000, float 0x3FEFFF57C0000000, float 0x3FEFFF5A80000000, float 0x3FEFFF5D60000000, float 0x3FEFFF6020000000, float 0x3FEFFF62E0000000, float 0x3FEFFF6580000000, float 0x3FEFFF6840000000, float 0x3FEFFF6AE0000000, float 0x3FEFFF6D80000000, float 0x3FEFFF7000000000, float 0x3FEFFF7280000000, float 0x3FEFFF7500000000, float 0x3FEFFF7780000000, float 0x3FEFFF7A00000000, float 0x3FEFFF7C60000000, float 0x3FEFFF7EC0000000, float 0x3FEFFF8100000000, float 0x3FEFFF8360000000, float 0x3FEFFF85A0000000, float 0x3FEFFF87E0000000, float 0x3FEFFF8A20000000, float 0x3FEFFF8C40000000, float 0x3FEFFF8E60000000, float 0x3FEFFF9080000000, float 0x3FEFFF92A0000000, float 0x3FEFFF94A0000000, float 0x3FEFFF96C0000000, float 0x3FEFFF98C0000000, float 0x3FEFFF9AA0000000, float 0x3FEFFF9CA0000000, float 0x3FEFFF9E80000000, float 0x3FEFFFA060000000, float 0x3FEFFFA240000000, float 0x3FEFFFA420000000, float 0x3FEFFFA5E0000000, float 0x3FEFFFA7C0000000, float 0x3FEFFFA980000000, float 0x3FEFFFAB20000000, float 0x3FEFFFACE0000000, float 0x3FEFFFAE80000000, float 0x3FEFFFB040000000, float 0x3FEFFFB1E0000000, float 0x3FEFFFB360000000, float 0x3FEFFFB500000000, float 0x3FEFFFB6A0000000, float 0x3FEFFFB820000000, float 0x3FEFFFB9A0000000, float 0x3FEFFFBB20000000, float 0x3FEFFFBC80000000, float 0x3FEFFFBE00000000, float 0x3FEFFFBF60000000, float 0x3FEFFFC0C0000000, float 0x3FEFFFC220000000, float 0x3FEFFFC380000000, float 0x3FEFFFC4C0000000, float 0x3FEFFFC620000000, float 0x3FEFFFC760000000, float 0x3FEFFFC8A0000000, float 0x3FEFFFC9E0000000, float 0x3FEFFFCB20000000, float 0x3FEFFFCC40000000, float 0x3FEFFFCD80000000, float 0x3FEFFFCEA0000000, float 0x3FEFFFCFC0000000, float 0x3FEFFFD0E0000000, float 0x3FEFFFD200000000, float 0x3FEFFFD300000000, float 0x3FEFFFD420000000, float 0x3FEFFFD520000000, float 0x3FEFFFD620000000, float 0x3FEFFFD720000000, float 0x3FEFFFD820000000, float 0x3FEFFFD920000000, float 0x3FEFFFDA00000000, float 0x3FEFFFDB00000000, float 0x3FEFFFDBE0000000, float 0x3FEFFFDCC0000000, float 0x3FEFFFDDA0000000, float 0x3FEFFFDE80000000, float 0x3FEFFFDF60000000, float 0x3FEFFFE040000000, float 0x3FEFFFE100000000, float 0x3FEFFFE1C0000000, float 0x3FEFFFE2A0000000, float 0x3FEFFFE360000000, float 0x3FEFFFE420000000, float 0x3FEFFFE4E0000000, float 0x3FEFFFE5A0000000, float 0x3FEFFFE640000000, float 0x3FEFFFE700000000, float 0x3FEFFFE7A0000000, float 0x3FEFFFE860000000, float 0x3FEFFFE900000000, float 0x3FEFFFE9A0000000, float 0x3FEFFFEA40000000, float 0x3FEFFFEAE0000000, float 0x3FEFFFEB80000000, float 0x3FEFFFEC00000000, float 0x3FEFFFECA0000000, float 0x3FEFFFED20000000, float 0x3FEFFFEDC0000000, float 0x3FEFFFEE40000000, float 0x3FEFFFEEC0000000, float 0x3FEFFFEF40000000, float 0x3FEFFFEFC0000000, float 0x3FEFFFF040000000, float 0x3FEFFFF0C0000000, float 0x3FEFFFF140000000, float 0x3FEFFFF1C0000000, float 0x3FEFFFF220000000, float 0x3FEFFFF2A0000000, float 0x3FEFFFF300000000, float 0x3FEFFFF360000000, float 0x3FEFFFF3E0000000, float 0x3FEFFFF440000000, float 0x3FEFFFF4A0000000, float 0x3FEFFFF500000000, float 0x3FEFFFF560000000, float 0x3FEFFFF5C0000000, float 0x3FEFFFF600000000, float 0x3FEFFFF660000000, float 0x3FEFFFF6C0000000, float 0x3FEFFFF700000000, float 0x3FEFFFF760000000, float 0x3FEFFFF7A0000000, float 0x3FEFFFF800000000, float 0x3FEFFFF840000000, float 0x3FEFFFF880000000, float 0x3FEFFFF8C0000000, float 0x3FEFFFF920000000, float 0x3FEFFFF960000000, float 0x3FEFFFF9A0000000, float 0x3FEFFFF9E0000000, float 0x3FEFFFFA20000000, float 0x3FEFFFFA40000000, float 0x3FEFFFFA80000000, float 0x3FEFFFFAC0000000, float 0x3FEFFFFB00000000, float 0x3FEFFFFB20000000, float 0x3FEFFFFB60000000, float 0x3FEFFFFB80000000, float 0x3FEFFFFBC0000000, float 0x3FEFFFFBE0000000, float 0x3FEFFFFC20000000, float 0x3FEFFFFC40000000, float 0x3FEFFFFC60000000, float 0x3FEFFFFCA0000000, float 0x3FEFFFFCC0000000, float 0x3FEFFFFCE0000000, float 0x3FEFFFFD00000000, float 0x3FEFFFFD20000000, float 0x3FEFFFFD40000000, float 0x3FEFFFFD60000000, float 0x3FEFFFFD80000000, float 0x3FEFFFFDA0000000, float 0x3FEFFFFDC0000000, float 0x3FEFFFFDE0000000, float 0x3FEFFFFE00000000, float 0x3FEFFFFE20000000, float 0x3FEFFFFE20000000, float 0x3FEFFFFE40000000, float 0x3FEFFFFE60000000, float 0x3FEFFFFE80000000, float 0x3FEFFFFE80000000, float 0x3FEFFFFEA0000000, float 0x3FEFFFFEC0000000, float 0x3FEFFFFEC0000000, float 0x3FEFFFFEE0000000, float 0x3FEFFFFEE0000000, float 0x3FEFFFFF00000000, float 0x3FEFFFFF00000000, float 0x3FEFFFFF20000000, float 0x3FEFFFFF20000000, float 0x3FEFFFFF40000000, float 0x3FEFFFFF40000000, float 0x3FEFFFFF40000000, float 0x3FEFFFFF60000000, float 0x3FEFFFFF60000000, float 0x3FEFFFFF60000000, float 0x3FEFFFFF80000000, float 0x3FEFFFFF80000000, float 0x3FEFFFFF80000000, float 0x3FEFFFFFA0000000, float 0x3FEFFFFFA0000000, float 0x3FEFFFFFA0000000, float 0x3FEFFFFFA0000000, float 0x3FEFFFFFC0000000, float 0x3FEFFFFFC0000000, float 0x3FEFFFFFC0000000, float 0x3FEFFFFFC0000000, float 0x3FEFFFFFC0000000, float 0x3FEFFFFFC0000000, float 0x3FEFFFFFE0000000, float 0x3FEFFFFFE0000000, float 0x3FEFFFFFE0000000, float 0x3FEFFFFFE0000000, float 0x3FEFFFFFE0000000, float 0x3FEFFFFFE0000000, float 0x3FEFFFFFE0000000, float 0x3FEFFFFFE0000000, float 0x3FEFFFFFE0000000, float 0x3FEFFFFFE0000000, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00], align 16
@FLOOR1_fromdB_LOOKUP = internal unnamed_addr constant [256 x float] [float 0x3E7C9687C0000000, float 0x3E7E722120000000, float 0x3E80365160000000, float 0x3E81440780000000, float 0x3E82634460000000, float 0x3E83952C00000000, float 0x3E84DAF4E0000000, float 0x3E8635E960000000, float 0x3E87A76A00000000, float 0x3E8930EE00000000, float 0x3E8AD40460000000, float 0x3E8C925700000000, float 0x3E8E6DAAA0000000, float 0x3E9033F100000000, float 0x3E91417F80000000, float 0x3E92609260000000, float 0x3E93924D20000000, float 0x3E94D7E640000000, float 0x3E9632A7E0000000, float 0x3E97A3F260000000, float 0x3E992D3C80000000, float 0x3E9AD015A0000000, float 0x3E9C8E26C0000000, float 0x3E9E6934C0000000, float 0x3EA0319100000000, float 0x3EA13EF800000000, float 0x3EA25DE0C0000000, float 0x3EA38F6EC0000000, float 0x3EA4D4D800000000, float 0x3EA62F66E0000000, float 0x3EA7A07B40000000, float 0x3EA9298BC0000000, float 0x3EAACC2760000000, float 0x3EAC89F720000000, float 0x3EAE64BF80000000, float 0x3EB02F3140000000, float 0x3EB13C70C0000000, float 0x3EB25B2F80000000, float 0x3EB38C90A0000000, float 0x3EB4D1CA40000000, float 0x3EB62C2660000000, float 0x3EB79D04A0000000, float 0x3EB925DB80000000, float 0x3EBAC839C0000000, float 0x3EBC85C820000000, float 0x3EBE604AE0000000, float 0x3EC02CD1E0000000, float 0x3EC139E9E0000000, float 0x3EC2587EA0000000, float 0x3EC389B300000000, float 0x3EC4CEBD00000000, float 0x3EC628E640000000, float 0x3EC7998E80000000, float 0x3EC9222BC0000000, float 0x3ECAC44CA0000000, float 0x3ECC8199C0000000, float 0x3ECE5BD700000000, float 0x3ED02A72E0000000, float 0x3ED1376380000000, float 0x3ED255CE40000000, float 0x3ED386D5E0000000, float 0x3ED4CBB020000000, float 0x3ED625A6A0000000, float 0x3ED79618E0000000, float 0x3ED91E7C80000000, float 0x3EDAC06020000000, float 0x3EDC7D6C00000000, float 0x3EDE5763C0000000, float 0x3EE0281440000000, float 0x3EE134DD60000000, float 0x3EE2531E20000000, float 0x3EE383F920000000, float 0x3EE4C8A3C0000000, float 0x3EE62267A0000000, float 0x3EE792A3C0000000, float 0x3EE91ACDE0000000, float 0x3EEABC7440000000, float 0x3EEC793EE0000000, float 0x3EEE52F120000000, float 0x3EF025B5E0000000, float 0x3EF13257C0000000, float 0x3EF2506E80000000, float 0x3EF3811CC0000000, float 0x3EF4C597C0000000, float 0x3EF61F28E0000000, float 0x3EF78F2F20000000, float 0x3EF9171FC0000000, float 0x3EFAB888E0000000, float 0x3EFC751240000000, float 0x3EFE4E7F00000000, float 0x3F00235800000000, float 0x3F012FD260000000, float 0x3F024DBF20000000, float 0x3F037E40C0000000, float 0x3F04C28C40000000, float 0x3F061BEAC0000000, float 0x3F078BBB00000000, float 0x3F09137240000000, float 0x3F0AB49E40000000, float 0x3F0C70E660000000, float 0x3F0E4A0DC0000000, float 0x3F1020FA60000000, float 0x3F112D4D60000000, float 0x3F124B1040000000, float 0x3F137B6540000000, float 0x3F14BF8120000000, float 0x3F1618AD00000000, float 0x3F17884760000000, float 0x3F190FC520000000, float 0x3F1AB0B400000000, float 0x3F1C6CBB20000000, float 0x3F1E459D00000000, float 0x3F201E9D20000000, float 0x3F212AC8C0000000, float 0x3F224861C0000000, float 0x3F23788A20000000, float 0x3F24BC76A0000000, float 0x3F26156FE0000000, float 0x3F2784D440000000, float 0x3F290C18A0000000, float 0x3F2AACCA60000000, float 0x3F2C689060000000, float 0x3F2E412D00000000, float 0x3F301C4020000000, float 0x3F31284480000000, float 0x3F3245B3A0000000, float 0x3F3375AF60000000, float 0x3F34B96C60000000, float 0x3F36123320000000, float 0x3F378161A0000000, float 0x3F39086CC0000000, float 0x3F3AA8E160000000, float 0x3F3C646640000000, float 0x3F3E3CBDA0000000, float 0x3F4019E3A0000000, float 0x3F4125C0A0000000, float 0x3F42430600000000, float 0x3F4372D520000000, float 0x3F44B662A0000000, float 0x3F460EF6E0000000, float 0x3F477DEF80000000, float 0x3F4904C140000000, float 0x3F4AA4F8E0000000, float 0x3F4C603CC0000000, float 0x3F4E384F00000000, float 0x3F50178760000000, float 0x3F51233D20000000, float 0x3F524058C0000000, float 0x3F536FFB60000000, float 0x3F54B35960000000, float 0x3F560BBB00000000, float 0x3F577A7DE0000000, float 0x3F59011660000000, float 0x3F5AA11100000000, float 0x3F5C5C13E0000000, float 0x3F5E33E0E0000000, float 0x3F60152B80000000, float 0x3F6120BA00000000, float 0x3F623DABC0000000, float 0x3F636D21E0000000, float 0x3F64B05080000000, float 0x3F66087FA0000000, float 0x3F67770CE0000000, float 0x3F68FD6C20000000, float 0x3F6A9D29A0000000, float 0x3F6C57EBA0000000, float 0x3F6E2F7380000000, float 0x3F7012CFE0000000, float 0x3F711E3740000000, float 0x3F723AFF20000000, float 0x3F736A48E0000000, float 0x3F74AD4820000000, float 0x3F760544E0000000, float 0x3F77739C40000000, float 0x3F78F9C240000000, float 0x3F7A9942E0000000, float 0x3F7C53C400000000, float 0x3F7E2B06A0000000, float 0x3F801074C0000000, float 0x3F811BB4E0000000, float 0x3F82385300000000, float 0x3F83677040000000, float 0x3F84AA4020000000, float 0x3F86020A80000000, float 0x3F87702C20000000, float 0x3F88F61900000000, float 0x3F8A955CA0000000, float 0x3F8C4F9D00000000, float 0x3F8E269A80000000, float 0x3F900E19E0000000, float 0x3F911932C0000000, float 0x3F9235A740000000, float 0x3F93649800000000, float 0x3F94A738A0000000, float 0x3F95FED0A0000000, float 0x3F976CBCA0000000, float 0x3F98F27040000000, float 0x3F9A917720000000, float 0x3F9C4B7680000000, float 0x3F9E222F20000000, float 0x3FA00BBF60000000, float 0x3FA116B120000000, float 0x3FA232FBE0000000, float 0x3FA361C040000000, float 0x3FA4A431A0000000, float 0x3FA5FB9720000000, float 0x3FA7694DA0000000, float 0x3FA8EEC800000000, float 0x3FAA8D9220000000, float 0x3FAC4750A0000000, float 0x3FAE1DC440000000, float 0x3FB0096540000000, float 0x3FB1142FE0000000, float 0x3FB2305100000000, float 0x3FB35EE900000000, float 0x3FB4A12B00000000, float 0x3FB5F85E40000000, float 0x3FB765DF00000000, float 0x3FB8EB2060000000, float 0x3FBA89ADA0000000, float 0x3FBC432B80000000, float 0x3FBE195A20000000, float 0x3FC0070B60000000, float 0x3FC111AEE0000000, float 0x3FC22DA660000000, float 0x3FC35C1200000000, float 0x3FC49E24E0000000, float 0x3FC5F525C0000000, float 0x3FC76270E0000000, float 0x3FC8E77940000000, float 0x3FCA85C9A0000000, float 0x3FCC3F06E0000000, float 0x3FCE14F080000000, float 0x3FD004B1E0000000, float 0x3FD10F2E60000000, float 0x3FD22AFC40000000, float 0x3FD3593B80000000, float 0x3FD49B1F20000000, float 0x3FD5F1EDA0000000, float 0x3FD75F0360000000, float 0x3FD8E3D2A0000000, float 0x3FDA81E660000000, float 0x3FDC3AE2E0000000, float 0x3FDE1087A0000000, float 0x3FE00258C0000000, float 0x3FE10CAE40000000, float 0x3FE2285260000000, float 0x3FE3566560000000, float 0x3FE49819C0000000, float 0x3FE5EEB620000000, float 0x3FE75B9640000000, float 0x3FE8E02CA0000000, float 0x3FEA7E03A0000000, float 0x3FEC36BF60000000, float 0x3FEE0C1F60000000, float 1.000000e+00], align 16
@switch.table.floor1_look = private unnamed_addr constant [4 x i32] [i32 256, i32 128, i32 86, i32 64], align 4

; Function Attrs: nounwind optsize uwtable
define dso_local i32 @main(i32 noundef %0, ptr nocapture noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.oe_options, align 8
  %5 = alloca %struct.oe_enc_opt, align 8
  %6 = alloca %struct.vorbis_comment, align 8
  call void @llvm.lifetime.start.p0(i64 224, ptr nonnull %4) #55
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(224) %4, ptr noundef nonnull align 8 dereferenceable(224) @__const.main.opt, i64 224, i1 false)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %3) #55
  store i32 1, ptr %3, align 4
  %7 = getelementptr inbounds %struct.oe_options, ptr %4, i64 0, i32 18
  %8 = getelementptr inbounds %struct.oe_options, ptr %4, i64 0, i32 20
  %9 = getelementptr inbounds %struct.oe_options, ptr %4, i64 0, i32 8
  %10 = getelementptr inbounds %struct.oe_options, ptr %4, i64 0, i32 9
  %11 = getelementptr inbounds %struct.oe_options, ptr %4, i64 0, i32 21
  %12 = getelementptr inbounds %struct.oe_options, ptr %4, i64 0, i32 19
  %13 = getelementptr inbounds %struct.oe_options, ptr %4, i64 0, i32 17
  %14 = getelementptr inbounds %struct.oe_options, ptr %4, i64 0, i32 26
  %15 = getelementptr inbounds %struct.oe_options, ptr %4, i64 0, i32 25
  %16 = getelementptr inbounds %struct.oe_options, ptr %4, i64 0, i32 24
  %17 = getelementptr inbounds %struct.oe_options, ptr %4, i64 0, i32 23
  %18 = getelementptr inbounds %struct.oe_options, ptr %4, i64 0, i32 31
  %19 = getelementptr inbounds %struct.oe_options, ptr %4, i64 0, i32 32
  %20 = getelementptr inbounds %struct.oe_options, ptr %4, i64 0, i32 30
  %21 = getelementptr inbounds %struct.oe_options, ptr %4, i64 0, i32 27
  %22 = getelementptr inbounds %struct.oe_options, ptr %4, i64 0, i32 28
  %23 = getelementptr inbounds %struct.oe_options, ptr %4, i64 0, i32 29
  %24 = getelementptr inbounds %struct.oe_options, ptr %4, i64 0, i32 1
  %25 = getelementptr inbounds %struct.oe_options, ptr %4, i64 0, i32 36
  %26 = getelementptr inbounds %struct.oe_options, ptr %4, i64 0, i32 4
  %27 = getelementptr inbounds %struct.oe_options, ptr %4, i64 0, i32 5
  %28 = getelementptr inbounds %struct.oe_options, ptr %4, i64 0, i32 12
  %29 = getelementptr inbounds %struct.oe_options, ptr %4, i64 0, i32 13
  %30 = getelementptr inbounds %struct.oe_options, ptr %4, i64 0, i32 10
  %31 = getelementptr inbounds %struct.oe_options, ptr %4, i64 0, i32 11
  %32 = getelementptr inbounds %struct.oe_options, ptr %4, i64 0, i32 6
  %33 = getelementptr inbounds %struct.oe_options, ptr %4, i64 0, i32 7
  %34 = getelementptr inbounds %struct.oe_options, ptr %4, i64 0, i32 2
  %35 = getelementptr inbounds %struct.oe_options, ptr %4, i64 0, i32 3
  %36 = getelementptr inbounds %struct.oe_options, ptr %4, i64 0, i32 16
  %37 = getelementptr inbounds %struct.oe_options, ptr %4, i64 0, i32 14
  %38 = getelementptr inbounds %struct.oe_options, ptr %4, i64 0, i32 15
  %39 = getelementptr inbounds %struct.oe_options, ptr %4, i64 0, i32 35
  %40 = getelementptr inbounds %struct.oe_options, ptr %4, i64 0, i32 34
  %41 = getelementptr inbounds %struct.oe_options, ptr %4, i64 0, i32 33
  %42 = getelementptr inbounds %struct.oe_options, ptr %4, i64 0, i32 22
  br label %43

43:                                               ; preds = %406, %2
  %44 = call i32 @_getopt_internal(i32 noundef %0, ptr noundef %1, ptr noundef nonnull @.str.142, ptr noundef nonnull @long_options, ptr noundef nonnull %3, i32 noundef 0) #56
  switch i32 %44, label %407 [
    i32 -1, label %408
    i32 0, label %45
    i32 97, label %146
    i32 99, label %159
    i32 100, label %179
    i32 71, label %192
    i32 104, label %205
    i32 108, label %206
    i32 115, label %219
    i32 116, label %224
    i32 98, label %237
    i32 109, label %245
    i32 77, label %263
    i32 113, label %281
    i32 110, label %298
    i32 88, label %308
    i32 80, label %321
    i32 111, label %331
    i32 81, label %341
    i32 114, label %342
    i32 118, label %343
    i32 66, label %346
    i32 67, label %364
    i32 78, label %377
    i32 82, label %390
    i32 63, label %403
  ]

45:                                               ; preds = %43
  %46 = load i32, ptr %3, align 4
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds [31 x %struct.option], ptr @long_options, i64 0, i64 %47
  %49 = load ptr, ptr %48, align 16
  %50 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %49, ptr noundef nonnull dereferenceable(8) @.str.24) #57
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %62

52:                                               ; preds = %45
  %53 = load i32, ptr %21, align 8
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %406

55:                                               ; preds = %52
  %56 = load i32, ptr %13, align 8
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %61

58:                                               ; preds = %55
  %59 = load ptr, ptr @stderr, align 8
  %60 = call i64 @fwrite(ptr nonnull @.str.143, i64 35, i64 1, ptr %59) #58
  br label %61

61:                                               ; preds = %58, %55
  store i32 1, ptr %21, align 8
  br label %406

62:                                               ; preds = %45
  %63 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %49, ptr noundef nonnull dereferenceable(15) @.str.16) #57
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %79

65:                                               ; preds = %62
  %66 = load i32, ptr %7, align 4
  %67 = icmp eq i32 %66, 1
  br i1 %67, label %71, label %68

68:                                               ; preds = %65
  store i32 1, ptr %7, align 4
  %69 = load ptr, ptr @stderr, align 8
  %70 = call i64 @fwrite(ptr nonnull @.str.144, i64 75, i64 1, ptr %69) #58
  br label %71

71:                                               ; preds = %68, %65
  %72 = load ptr, ptr @optarg, align 8
  %73 = call i32 (ptr, ptr, ...) @__isoc99_sscanf(ptr noundef %72, ptr noundef nonnull @.str.145, ptr noundef nonnull %42) #59
  %74 = icmp eq i32 %73, 1
  br i1 %74, label %406, label %75

75:                                               ; preds = %71
  %76 = load ptr, ptr @stderr, align 8
  %77 = load ptr, ptr @optarg, align 8
  %78 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %76, ptr noundef nonnull @.str.146, ptr noundef %77) #60
  store i32 0, ptr %42, align 4
  br label %406

79:                                               ; preds = %62
  %80 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %49, ptr noundef nonnull dereferenceable(9) @.str.25) #57
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %98

82:                                               ; preds = %79
  %83 = load ptr, ptr @optarg, align 8
  %84 = call i32 (ptr, ptr, ...) @__isoc99_sscanf(ptr noundef %83, ptr noundef nonnull @.str.145, ptr noundef nonnull %41) #59
  %85 = icmp eq i32 %84, 1
  br i1 %85, label %90, label %86

86:                                               ; preds = %82
  %87 = load ptr, ptr @stderr, align 8
  %88 = load ptr, ptr @optarg, align 8
  %89 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %87, ptr noundef nonnull @.str.147, ptr noundef %88) #60
  store i32 0, ptr %41, align 8
  br label %93

90:                                               ; preds = %82
  %91 = load i32, ptr %41, align 8
  %92 = icmp slt i32 %91, 100
  br i1 %92, label %93, label %406

93:                                               ; preds = %90, %86
  %94 = phi i32 [ 0, %86 ], [ %91, %90 ]
  %95 = load ptr, ptr @stderr, align 8
  %96 = mul nsw i32 %94, 1000
  %97 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %95, ptr noundef nonnull @.str.148, i32 noundef %94, i32 noundef %96) #60
  br label %406

98:                                               ; preds = %79
  %99 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %49, ptr noundef nonnull dereferenceable(8) @.str.26) #57
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %102

101:                                              ; preds = %98
  store i32 1, ptr %40, align 4
  br label %406

102:                                              ; preds = %98
  %103 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %49, ptr noundef nonnull dereferenceable(6) @.str.27) #57
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %105, label %115

105:                                              ; preds = %102
  %106 = load ptr, ptr @optarg, align 8
  %107 = call double @atof(ptr noundef %106) #57
  %108 = fptrunc double %107 to float
  store float %108, ptr %39, align 8
  %109 = call i32 (ptr, ptr, ...) @__isoc99_sscanf(ptr noundef %106, ptr noundef nonnull @.str.149, ptr noundef nonnull %39) #59
  %110 = icmp eq i32 %109, 1
  br i1 %110, label %406, label %111

111:                                              ; preds = %105
  store float 0.000000e+00, ptr %39, align 8
  %112 = load ptr, ptr @stderr, align 8
  %113 = load ptr, ptr @optarg, align 8
  %114 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %112, ptr noundef nonnull @.str.150, ptr noundef %113) #60
  br label %406

115:                                              ; preds = %102
  %116 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %49, ptr noundef nonnull dereferenceable(23) @.str.28) #57
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %118, label %139

118:                                              ; preds = %115
  %119 = load ptr, ptr @optarg, align 8
  %120 = call noalias ptr @strdup(ptr noundef %119) #59
  %121 = call ptr @strchr(ptr noundef nonnull dereferenceable(1) %120, i32 noundef 61) #57
  %122 = icmp eq ptr %121, null
  br i1 %122, label %136, label %123

123:                                              ; preds = %118
  %124 = getelementptr inbounds i8, ptr %121, i64 1
  store i8 0, ptr %121, align 1
  %125 = load ptr, ptr %37, align 8
  %126 = load i32, ptr %38, align 8
  %127 = add nsw i32 %126, 1
  store i32 %127, ptr %38, align 8
  %128 = sext i32 %127 to i64
  %129 = shl nsw i64 %128, 4
  %130 = call ptr @realloc(ptr noundef %125, i64 noundef %129) #61
  store ptr %130, ptr %37, align 8
  %131 = load i32, ptr %38, align 8
  %132 = add nsw i32 %131, -1
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds %struct.adv_opt, ptr %130, i64 %133
  store ptr %120, ptr %134, align 8
  %135 = getelementptr inbounds %struct.adv_opt, ptr %130, i64 %133, i32 1
  store ptr %124, ptr %135, align 8
  br label %406

136:                                              ; preds = %118
  %137 = load ptr, ptr @stderr, align 8
  %138 = call i64 @fwrite(ptr nonnull @.str.151, i64 43, i64 1, ptr %137) #58
  br label %406

139:                                              ; preds = %115
  %140 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %49, ptr noundef nonnull dereferenceable(17) @.str.29) #57
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %142, label %143

142:                                              ; preds = %139
  store i32 0, ptr %36, align 4
  br label %406

143:                                              ; preds = %139
  %144 = load ptr, ptr @stderr, align 8
  %145 = call i64 @fwrite(ptr nonnull @.str.152, i64 44, i64 1, ptr %144) #58
  call void @exit(i32 noundef 1) #62
  unreachable

146:                                              ; preds = %43
  %147 = load ptr, ptr %34, align 8
  %148 = load i32, ptr %35, align 8
  %149 = add nsw i32 %148, 1
  store i32 %149, ptr %35, align 8
  %150 = sext i32 %149 to i64
  %151 = shl nsw i64 %150, 3
  %152 = call ptr @realloc(ptr noundef %147, i64 noundef %151) #61
  store ptr %152, ptr %34, align 8
  %153 = load ptr, ptr @optarg, align 8
  %154 = call noalias ptr @strdup(ptr noundef %153) #59
  %155 = load i32, ptr %35, align 8
  %156 = add nsw i32 %155, -1
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds ptr, ptr %152, i64 %157
  store ptr %154, ptr %158, align 8
  br label %406

159:                                              ; preds = %43
  %160 = load ptr, ptr @optarg, align 8
  %161 = call ptr @strchr(ptr noundef nonnull dereferenceable(1) %160, i32 noundef 61) #57
  %162 = icmp eq ptr %161, null
  br i1 %162, label %163, label %166

163:                                              ; preds = %159
  %164 = load ptr, ptr @stderr, align 8
  %165 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %164, ptr noundef nonnull @.str.153, ptr noundef %160) #60
  br label %406

166:                                              ; preds = %159
  %167 = load ptr, ptr %32, align 8
  %168 = load i32, ptr %33, align 8
  %169 = add nsw i32 %168, 1
  store i32 %169, ptr %33, align 8
  %170 = sext i32 %169 to i64
  %171 = shl nsw i64 %170, 3
  %172 = call ptr @realloc(ptr noundef %167, i64 noundef %171) #61
  store ptr %172, ptr %32, align 8
  %173 = load ptr, ptr @optarg, align 8
  %174 = call noalias ptr @strdup(ptr noundef %173) #59
  %175 = load i32, ptr %33, align 8
  %176 = add nsw i32 %175, -1
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds ptr, ptr %172, i64 %177
  store ptr %174, ptr %178, align 8
  br label %406

179:                                              ; preds = %43
  %180 = load ptr, ptr %30, align 8
  %181 = load i32, ptr %31, align 8
  %182 = add nsw i32 %181, 1
  store i32 %182, ptr %31, align 8
  %183 = sext i32 %182 to i64
  %184 = shl nsw i64 %183, 3
  %185 = call ptr @realloc(ptr noundef %180, i64 noundef %184) #61
  store ptr %185, ptr %30, align 8
  %186 = load ptr, ptr @optarg, align 8
  %187 = call noalias ptr @strdup(ptr noundef %186) #59
  %188 = load i32, ptr %31, align 8
  %189 = add nsw i32 %188, -1
  %190 = sext i32 %189 to i64
  %191 = getelementptr inbounds ptr, ptr %185, i64 %190
  store ptr %187, ptr %191, align 8
  br label %406

192:                                              ; preds = %43
  %193 = load ptr, ptr %28, align 8
  %194 = load i32, ptr %29, align 8
  %195 = add nsw i32 %194, 1
  store i32 %195, ptr %29, align 8
  %196 = sext i32 %195 to i64
  %197 = shl nsw i64 %196, 3
  %198 = call ptr @realloc(ptr noundef %193, i64 noundef %197) #61
  store ptr %198, ptr %28, align 8
  %199 = load ptr, ptr @optarg, align 8
  %200 = call noalias ptr @strdup(ptr noundef %199) #59
  %201 = load i32, ptr %29, align 8
  %202 = add nsw i32 %201, -1
  %203 = sext i32 %202 to i64
  %204 = getelementptr inbounds ptr, ptr %198, i64 %203
  store ptr %200, ptr %204, align 8
  br label %406

205:                                              ; preds = %43
  call fastcc void @usage() #56
  call void @exit(i32 noundef 0) #62
  unreachable

206:                                              ; preds = %43
  %207 = load ptr, ptr %26, align 8
  %208 = load i32, ptr %27, align 8
  %209 = add nsw i32 %208, 1
  store i32 %209, ptr %27, align 8
  %210 = sext i32 %209 to i64
  %211 = shl nsw i64 %210, 3
  %212 = call ptr @realloc(ptr noundef %207, i64 noundef %211) #61
  store ptr %212, ptr %26, align 8
  %213 = load ptr, ptr @optarg, align 8
  %214 = call noalias ptr @strdup(ptr noundef %213) #59
  %215 = load i32, ptr %27, align 8
  %216 = add nsw i32 %215, -1
  %217 = sext i32 %216 to i64
  %218 = getelementptr inbounds ptr, ptr %212, i64 %217
  store ptr %214, ptr %218, align 8
  br label %406

219:                                              ; preds = %43
  %220 = load ptr, ptr @optarg, align 8
  %221 = call i32 (ptr, ptr, ...) @__isoc99_sscanf(ptr noundef %220, ptr noundef nonnull @.str.154, ptr noundef nonnull %25) #59
  %222 = icmp eq i32 %221, 1
  br i1 %222, label %406, label %223

223:                                              ; preds = %219
  store i32 0, ptr %25, align 4
  br label %406

224:                                              ; preds = %43
  %225 = load ptr, ptr %4, align 8
  %226 = load i32, ptr %24, align 8
  %227 = add nsw i32 %226, 1
  store i32 %227, ptr %24, align 8
  %228 = sext i32 %227 to i64
  %229 = shl nsw i64 %228, 3
  %230 = call ptr @realloc(ptr noundef %225, i64 noundef %229) #61
  store ptr %230, ptr %4, align 8
  %231 = load ptr, ptr @optarg, align 8
  %232 = call noalias ptr @strdup(ptr noundef %231) #59
  %233 = load i32, ptr %24, align 8
  %234 = add nsw i32 %233, -1
  %235 = sext i32 %234 to i64
  %236 = getelementptr inbounds ptr, ptr %230, i64 %235
  store ptr %232, ptr %236, align 8
  br label %406

237:                                              ; preds = %43
  %238 = load ptr, ptr @optarg, align 8
  %239 = call i32 (ptr, ptr, ...) @__isoc99_sscanf(ptr noundef %238, ptr noundef nonnull @.str.145, ptr noundef nonnull %23) #59
  %240 = icmp eq i32 %239, 1
  br i1 %240, label %406, label %241

241:                                              ; preds = %237
  %242 = load ptr, ptr @stderr, align 8
  %243 = load ptr, ptr @optarg, align 8
  %244 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %242, ptr noundef nonnull @.str.155, ptr noundef %243) #60
  store i32 -1, ptr %23, align 8
  br label %406

245:                                              ; preds = %43
  %246 = load ptr, ptr @optarg, align 8
  %247 = call i32 (ptr, ptr, ...) @__isoc99_sscanf(ptr noundef %246, ptr noundef nonnull @.str.145, ptr noundef nonnull %22) #59
  %248 = icmp eq i32 %247, 1
  br i1 %248, label %253, label %249

249:                                              ; preds = %245
  %250 = load ptr, ptr @stderr, align 8
  %251 = load ptr, ptr @optarg, align 8
  %252 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %250, ptr noundef nonnull @.str.156, ptr noundef %251) #60
  store i32 -1, ptr %22, align 4
  br label %253

253:                                              ; preds = %249, %245
  %254 = load i32, ptr %21, align 8
  %255 = icmp eq i32 %254, 0
  br i1 %255, label %256, label %406

256:                                              ; preds = %253
  %257 = load i32, ptr %13, align 8
  %258 = icmp eq i32 %257, 0
  br i1 %258, label %259, label %262

259:                                              ; preds = %256
  %260 = load ptr, ptr @stderr, align 8
  %261 = call i64 @fwrite(ptr nonnull @.str.143, i64 35, i64 1, ptr %260) #58
  br label %262

262:                                              ; preds = %259, %256
  store i32 1, ptr %21, align 8
  br label %406

263:                                              ; preds = %43
  %264 = load ptr, ptr @optarg, align 8
  %265 = call i32 (ptr, ptr, ...) @__isoc99_sscanf(ptr noundef %264, ptr noundef nonnull @.str.145, ptr noundef nonnull %20) #59
  %266 = icmp eq i32 %265, 1
  br i1 %266, label %271, label %267

267:                                              ; preds = %263
  %268 = load ptr, ptr @stderr, align 8
  %269 = load ptr, ptr @optarg, align 8
  %270 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %268, ptr noundef nonnull @.str.157, ptr noundef %269) #60
  store i32 -1, ptr %20, align 4
  br label %271

271:                                              ; preds = %267, %263
  %272 = load i32, ptr %21, align 8
  %273 = icmp eq i32 %272, 0
  br i1 %273, label %274, label %406

274:                                              ; preds = %271
  %275 = load i32, ptr %13, align 8
  %276 = icmp eq i32 %275, 0
  br i1 %276, label %277, label %280

277:                                              ; preds = %274
  %278 = load ptr, ptr @stderr, align 8
  %279 = call i64 @fwrite(ptr nonnull @.str.143, i64 35, i64 1, ptr %278) #58
  br label %280

280:                                              ; preds = %277, %274
  store i32 1, ptr %21, align 8
  br label %406

281:                                              ; preds = %43
  %282 = load ptr, ptr @optarg, align 8
  %283 = call i32 (ptr, ptr, ...) @__isoc99_sscanf(ptr noundef %282, ptr noundef nonnull @.str.149, ptr noundef nonnull %18) #59
  %284 = icmp eq i32 %283, 1
  br i1 %284, label %289, label %285

285:                                              ; preds = %281
  %286 = load ptr, ptr @stderr, align 8
  %287 = load ptr, ptr @optarg, align 8
  %288 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %286, ptr noundef nonnull @.str.158, ptr noundef %287) #60
  br label %406

289:                                              ; preds = %281
  store i32 1, ptr %19, align 4
  %290 = load float, ptr %18, align 8
  %291 = fpext float %290 to double
  %292 = fmul double %291, 1.000000e-01
  %293 = fptrunc double %292 to float
  store float %293, ptr %18, align 8
  %294 = fcmp ogt float %293, 1.000000e+00
  br i1 %294, label %295, label %406

295:                                              ; preds = %289
  store float 1.000000e+00, ptr %18, align 8
  %296 = load ptr, ptr @stderr, align 8
  %297 = call i64 @fwrite(ptr nonnull @.str.159, i64 63, i64 1, ptr %296) #58
  br label %406

298:                                              ; preds = %43
  %299 = load ptr, ptr %17, align 8
  %300 = icmp eq ptr %299, null
  br i1 %300, label %305, label %301

301:                                              ; preds = %298
  %302 = load ptr, ptr @stderr, align 8
  %303 = call i64 @fwrite(ptr nonnull @.str.160, i64 54, i64 1, ptr %302) #58
  %304 = load ptr, ptr %17, align 8
  call void @free(ptr noundef %304) #59
  br label %305

305:                                              ; preds = %301, %298
  %306 = load ptr, ptr @optarg, align 8
  %307 = call noalias ptr @strdup(ptr noundef %306) #59
  store ptr %307, ptr %17, align 8
  br label %406

308:                                              ; preds = %43
  %309 = load ptr, ptr %16, align 8
  %310 = icmp eq ptr %309, null
  br i1 %310, label %318, label %311

311:                                              ; preds = %308
  %312 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %309, ptr noundef nonnull dereferenceable(2) @.str.30) #57
  %313 = icmp eq i32 %312, 0
  br i1 %313, label %318, label %314

314:                                              ; preds = %311
  %315 = load ptr, ptr @stderr, align 8
  %316 = call i64 @fwrite(ptr nonnull @.str.161, i64 61, i64 1, ptr %315) #58
  %317 = load ptr, ptr %16, align 8
  call void @free(ptr noundef %317) #59
  br label %318

318:                                              ; preds = %314, %311, %308
  %319 = load ptr, ptr @optarg, align 8
  %320 = call noalias ptr @strdup(ptr noundef %319) #59
  store ptr %320, ptr %16, align 8
  br label %406

321:                                              ; preds = %43
  %322 = load ptr, ptr %15, align 8
  %323 = icmp eq ptr %322, null
  br i1 %323, label %328, label %324

324:                                              ; preds = %321
  %325 = load ptr, ptr @stderr, align 8
  %326 = call i64 @fwrite(ptr nonnull @.str.162, i64 73, i64 1, ptr %325) #58
  %327 = load ptr, ptr %15, align 8
  call void @free(ptr noundef %327) #59
  br label %328

328:                                              ; preds = %324, %321
  %329 = load ptr, ptr @optarg, align 8
  %330 = call noalias ptr @strdup(ptr noundef %329) #59
  store ptr %330, ptr %15, align 8
  br label %406

331:                                              ; preds = %43
  %332 = load ptr, ptr %14, align 8
  %333 = icmp eq ptr %332, null
  br i1 %333, label %338, label %334

334:                                              ; preds = %331
  %335 = load ptr, ptr @stderr, align 8
  %336 = call i64 @fwrite(ptr nonnull @.str.163, i64 59, i64 1, ptr %335) #58
  %337 = load ptr, ptr %14, align 8
  call void @free(ptr noundef %337) #59
  br label %338

338:                                              ; preds = %334, %331
  %339 = load ptr, ptr @optarg, align 8
  %340 = call noalias ptr @strdup(ptr noundef %339) #59
  store ptr %340, ptr %14, align 8
  br label %406

341:                                              ; preds = %43
  store i32 1, ptr %13, align 8
  br label %406

342:                                              ; preds = %43
  store i32 1, ptr %7, align 4
  br label %406

343:                                              ; preds = %43
  %344 = load ptr, ptr @stdout, align 8
  %345 = call i64 @fwrite(ptr nonnull @.str.32, i64 32, i64 1, ptr %344)
  call void @exit(i32 noundef 0) #62
  unreachable

346:                                              ; preds = %43
  %347 = load i32, ptr %7, align 4
  %348 = icmp eq i32 %347, 1
  br i1 %348, label %352, label %349

349:                                              ; preds = %346
  store i32 1, ptr %7, align 4
  %350 = load ptr, ptr @stderr, align 8
  %351 = call i64 @fwrite(ptr nonnull @.str.164, i64 76, i64 1, ptr %350) #58
  br label %352

352:                                              ; preds = %349, %346
  %353 = load ptr, ptr @optarg, align 8
  %354 = call i32 (ptr, ptr, ...) @__isoc99_sscanf(ptr noundef %353, ptr noundef nonnull @.str.154, ptr noundef nonnull %12) #59
  %355 = icmp eq i32 %354, 1
  br i1 %355, label %359, label %356

356:                                              ; preds = %352
  store i32 16, ptr %12, align 8
  %357 = load ptr, ptr @stderr, align 8
  %358 = call i64 @fwrite(ptr nonnull @.str.165, i64 53, i64 1, ptr %357) #58
  br label %359

359:                                              ; preds = %356, %352
  %360 = load i32, ptr %12, align 8
  switch i32 %360, label %361 [
    i32 8, label %406
    i32 16, label %406
  ]

361:                                              ; preds = %359
  %362 = load ptr, ptr @stderr, align 8
  %363 = call i64 @fwrite(ptr nonnull @.str.165, i64 53, i64 1, ptr %362) #58
  br label %406

364:                                              ; preds = %43
  %365 = load i32, ptr %7, align 4
  %366 = icmp eq i32 %365, 1
  br i1 %366, label %370, label %367

367:                                              ; preds = %364
  store i32 1, ptr %7, align 4
  %368 = load ptr, ptr @stderr, align 8
  %369 = call i64 @fwrite(ptr nonnull @.str.166, i64 78, i64 1, ptr %368) #58
  br label %370

370:                                              ; preds = %367, %364
  %371 = load ptr, ptr @optarg, align 8
  %372 = call i32 (ptr, ptr, ...) @__isoc99_sscanf(ptr noundef %371, ptr noundef nonnull @.str.154, ptr noundef nonnull %11) #59
  %373 = icmp eq i32 %372, 1
  br i1 %373, label %406, label %374

374:                                              ; preds = %370
  store i32 2, ptr %11, align 8
  %375 = load ptr, ptr @stderr, align 8
  %376 = call i64 @fwrite(ptr nonnull @.str.167, i64 54, i64 1, ptr %375) #58
  br label %406

377:                                              ; preds = %43
  %378 = load ptr, ptr %9, align 8
  %379 = load i32, ptr %10, align 8
  %380 = add nsw i32 %379, 1
  store i32 %380, ptr %10, align 8
  %381 = sext i32 %380 to i64
  %382 = shl nsw i64 %381, 3
  %383 = call ptr @realloc(ptr noundef %378, i64 noundef %382) #61
  store ptr %383, ptr %9, align 8
  %384 = load ptr, ptr @optarg, align 8
  %385 = call noalias ptr @strdup(ptr noundef %384) #59
  %386 = load i32, ptr %10, align 8
  %387 = add nsw i32 %386, -1
  %388 = sext i32 %387 to i64
  %389 = getelementptr inbounds ptr, ptr %383, i64 %388
  store ptr %385, ptr %389, align 8
  br label %406

390:                                              ; preds = %43
  %391 = load i32, ptr %7, align 4
  %392 = icmp eq i32 %391, 1
  br i1 %392, label %396, label %393

393:                                              ; preds = %390
  store i32 1, ptr %7, align 4
  %394 = load ptr, ptr @stderr, align 8
  %395 = call i64 @fwrite(ptr nonnull @.str.168, i64 76, i64 1, ptr %394) #58
  br label %396

396:                                              ; preds = %393, %390
  %397 = load ptr, ptr @optarg, align 8
  %398 = call i32 (ptr, ptr, ...) @__isoc99_sscanf(ptr noundef %397, ptr noundef nonnull @.str.154, ptr noundef nonnull %8) #59
  %399 = icmp eq i32 %398, 1
  br i1 %399, label %406, label %400

400:                                              ; preds = %396
  store i32 44100, ptr %8, align 4
  %401 = load ptr, ptr @stderr, align 8
  %402 = call i64 @fwrite(ptr nonnull @.str.169, i64 56, i64 1, ptr %401) #58
  br label %406

403:                                              ; preds = %43
  %404 = load ptr, ptr @stderr, align 8
  %405 = call i64 @fwrite(ptr nonnull @.str.170, i64 46, i64 1, ptr %404) #58
  br label %406

406:                                              ; preds = %403, %400, %396, %377, %374, %370, %361, %359, %359, %342, %341, %338, %328, %318, %305, %295, %289, %285, %280, %271, %262, %253, %241, %237, %224, %223, %219, %206, %192, %179, %166, %163, %146, %142, %136, %123, %111, %105, %101, %93, %90, %75, %71, %61, %52
  br label %43, !llvm.loop !7

407:                                              ; preds = %43
  call fastcc void @usage() #56
  call void @exit(i32 noundef 0) #62
  unreachable

408:                                              ; preds = %43
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %3) #55
  %409 = load i32, ptr @optind, align 4
  %410 = icmp slt i32 %409, %0
  br i1 %410, label %414, label %411

411:                                              ; preds = %408
  %412 = load ptr, ptr @stderr, align 8
  %413 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %412, ptr noundef nonnull @.str.31, ptr noundef nonnull @.str.32, ptr noundef nonnull @.str.33) #60
  br label %927

414:                                              ; preds = %408
  %415 = sext i32 %409 to i64
  %416 = getelementptr inbounds ptr, ptr %1, i64 %415
  %417 = sub nsw i32 %0, %409
  %418 = icmp sgt i32 %417, 0
  br i1 %418, label %419, label %443

419:                                              ; preds = %414
  %420 = icmp ne i32 %417, 1
  %421 = zext i32 %417 to i64
  br label %425

422:                                              ; preds = %425
  %423 = add nuw nsw i64 %426, 1
  %424 = icmp eq i64 %423, %421
  br i1 %424, label %435, label %425, !llvm.loop !9

425:                                              ; preds = %422, %419
  %426 = phi i64 [ 0, %419 ], [ %423, %422 ]
  %427 = getelementptr inbounds ptr, ptr %416, i64 %426
  %428 = load ptr, ptr %427, align 8
  %429 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %428, ptr noundef nonnull dereferenceable(2) @.str.34) #57
  %430 = icmp eq i32 %429, 0
  %431 = and i1 %420, %430
  br i1 %431, label %432, label %422

432:                                              ; preds = %425
  %433 = load ptr, ptr @stderr, align 8
  %434 = call i64 @fwrite(ptr nonnull @.str.35, i64 49, i64 1, ptr %433) #58
  call void @exit(i32 noundef 1) #62
  unreachable

435:                                              ; preds = %422
  %436 = icmp sgt i32 %417, 1
  %437 = load ptr, ptr %14, align 8
  %438 = icmp ne ptr %437, null
  %439 = select i1 %436, i1 %438, i1 false
  br i1 %439, label %440, label %443

440:                                              ; preds = %435
  %441 = load ptr, ptr @stderr, align 8
  %442 = call i64 @fwrite(ptr nonnull @.str.36, i64 77, i64 1, ptr %441) #58
  call void @exit(i32 noundef 1) #62
  unreachable

443:                                              ; preds = %435, %414
  %444 = load i32, ptr %25, align 4
  %445 = icmp eq i32 %444, 0
  br i1 %445, label %446, label %448

446:                                              ; preds = %443
  call void @srand(i32 noundef 0) #59
  %447 = call i32 @rand() #59
  store i32 %447, ptr %25, align 4
  br label %448

448:                                              ; preds = %446, %443
  br i1 %418, label %449, label %923

449:                                              ; preds = %448
  %450 = getelementptr inbounds %struct.oe_enc_opt, ptr %5, i64 0, i32 1
  %451 = getelementptr inbounds %struct.oe_enc_opt, ptr %5, i64 0, i32 3
  %452 = getelementptr inbounds %struct.oe_enc_opt, ptr %5, i64 0, i32 5
  %453 = getelementptr inbounds %struct.oe_enc_opt, ptr %5, i64 0, i32 4
  %454 = getelementptr inbounds %struct.oe_enc_opt, ptr %5, i64 0, i32 6
  %455 = getelementptr inbounds %struct.oe_enc_opt, ptr %5, i64 0, i32 14
  %456 = getelementptr inbounds %struct.oe_enc_opt, ptr %5, i64 0, i32 10
  %457 = getelementptr inbounds %struct.oe_enc_opt, ptr %5, i64 0, i32 9
  %458 = getelementptr inbounds %struct.oe_enc_opt, ptr %5, i64 0, i32 11
  %459 = getelementptr inbounds %struct.oe_enc_opt, ptr %5, i64 0, i32 12
  %460 = getelementptr inbounds %struct.oe_enc_opt, ptr %5, i64 0, i32 2
  %461 = getelementptr inbounds %struct.oe_enc_opt, ptr %5, i64 0, i32 7
  %462 = getelementptr inbounds %struct.oe_enc_opt, ptr %5, i64 0, i32 8
  %463 = getelementptr inbounds %struct.oe_enc_opt, ptr %5, i64 0, i32 23
  %464 = getelementptr inbounds %struct.oe_enc_opt, ptr %5, i64 0, i32 24
  %465 = getelementptr inbounds %struct.oe_enc_opt, ptr %5, i64 0, i32 25
  %466 = getelementptr inbounds %struct.oe_enc_opt, ptr %5, i64 0, i32 15
  %467 = getelementptr inbounds %struct.oe_enc_opt, ptr %5, i64 0, i32 19
  %468 = getelementptr inbounds %struct.oe_enc_opt, ptr %5, i64 0, i32 20
  %469 = getelementptr inbounds %struct.oe_enc_opt, ptr %5, i64 0, i32 21
  %470 = getelementptr inbounds %struct.oe_enc_opt, ptr %5, i64 0, i32 22
  %471 = getelementptr inbounds %struct.oe_enc_opt, ptr %5, i64 0, i32 13
  %472 = zext i32 %417 to i64
  br label %473

473:                                              ; preds = %918, %449
  %474 = phi i64 [ 0, %449 ], [ %921, %918 ]
  %475 = phi ptr [ undef, %449 ], [ %920, %918 ]
  %476 = phi i32 [ 0, %449 ], [ %919, %918 ]
  call void @llvm.lifetime.start.p0(i64 168, ptr nonnull %5) #55
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %6) #55
  %477 = load i32, ptr %25, align 4
  %478 = add i32 %477, 1
  store i32 %478, ptr %25, align 4
  store i32 %477, ptr %450, align 8
  store ptr @update_statistics_full, ptr %451, align 8
  store ptr @start_encode_full, ptr %452, align 8
  store ptr @final_statistics, ptr %453, align 8
  store ptr @encode_error, ptr %454, align 8
  store ptr %6, ptr %5, align 8
  %479 = load i32, ptr %36, align 4
  store i32 %479, ptr %455, align 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %6, i8 0, i64 32, i1 false)
  %480 = load i32, ptr %33, align 8
  %481 = icmp sgt i32 %480, 0
  br i1 %481, label %482, label %491

482:                                              ; preds = %482, %473
  %483 = phi i64 [ %487, %482 ], [ 0, %473 ]
  %484 = load ptr, ptr %32, align 8
  %485 = getelementptr inbounds ptr, ptr %484, i64 %483
  %486 = load ptr, ptr %485, align 8
  call void @vorbis_comment_add(ptr noundef nonnull %6, ptr noundef %486) #56
  %487 = add nuw nsw i64 %483, 1
  %488 = load i32, ptr %33, align 8
  %489 = sext i32 %488 to i64
  %490 = icmp slt i64 %487, %489
  br i1 %490, label %482, label %491, !llvm.loop !10

491:                                              ; preds = %482, %473
  %492 = load i32, ptr %24, align 8
  %493 = icmp eq i32 %492, 0
  br i1 %493, label %514, label %494

494:                                              ; preds = %491
  %495 = sext i32 %492 to i64
  %496 = icmp slt i64 %474, %495
  %497 = trunc i64 %474 to i32
  br i1 %496, label %508, label %498

498:                                              ; preds = %494
  %499 = load i32, ptr %13, align 8
  %500 = icmp eq i32 %499, 0
  br i1 %500, label %501, label %505

501:                                              ; preds = %498
  %502 = load ptr, ptr @stderr, align 8
  %503 = call i64 @fwrite(ptr nonnull @.str.172, i64 67, i64 1, ptr %502) #58
  %504 = load i32, ptr %24, align 8
  br label %505

505:                                              ; preds = %501, %498
  %506 = phi i32 [ %504, %501 ], [ %492, %498 ]
  %507 = add nsw i32 %506, -1
  br label %508

508:                                              ; preds = %505, %494
  %509 = phi i32 [ %507, %505 ], [ %497, %494 ]
  %510 = load ptr, ptr %4, align 8
  %511 = sext i32 %509 to i64
  %512 = getelementptr inbounds ptr, ptr %510, i64 %511
  %513 = load ptr, ptr %512, align 8
  call void @vorbis_comment_add_tag(ptr noundef nonnull %6, ptr noundef nonnull @.str.5, ptr noundef %513) #56
  br label %514

514:                                              ; preds = %508, %491
  %515 = phi ptr [ null, %491 ], [ %513, %508 ]
  %516 = load i32, ptr %35, align 8
  %517 = icmp eq i32 %516, 0
  br i1 %517, label %528, label %518

518:                                              ; preds = %514
  %519 = sext i32 %516 to i64
  %520 = icmp slt i64 %474, %519
  %521 = add nsw i32 %516, -1
  %522 = trunc i64 %474 to i32
  %523 = select i1 %520, i32 %522, i32 %521
  %524 = load ptr, ptr %34, align 8
  %525 = sext i32 %523 to i64
  %526 = getelementptr inbounds ptr, ptr %524, i64 %525
  %527 = load ptr, ptr %526, align 8
  call void @vorbis_comment_add_tag(ptr noundef nonnull %6, ptr noundef nonnull @.str.3, ptr noundef %527) #56
  br label %528

528:                                              ; preds = %518, %514
  %529 = phi ptr [ null, %514 ], [ %527, %518 ]
  %530 = load i32, ptr %29, align 8
  %531 = icmp eq i32 %530, 0
  br i1 %531, label %542, label %532

532:                                              ; preds = %528
  %533 = sext i32 %530 to i64
  %534 = icmp slt i64 %474, %533
  %535 = add nsw i32 %530, -1
  %536 = trunc i64 %474 to i32
  %537 = select i1 %534, i32 %536, i32 %535
  %538 = load ptr, ptr %28, align 8
  %539 = sext i32 %537 to i64
  %540 = getelementptr inbounds ptr, ptr %538, i64 %539
  %541 = load ptr, ptr %540, align 8
  call void @vorbis_comment_add_tag(ptr noundef nonnull %6, ptr noundef nonnull @.str.6, ptr noundef %541) #56
  br label %542

542:                                              ; preds = %532, %528
  %543 = phi ptr [ null, %528 ], [ %541, %532 ]
  %544 = load i32, ptr %31, align 8
  %545 = icmp eq i32 %544, 0
  br i1 %545, label %556, label %546

546:                                              ; preds = %542
  %547 = sext i32 %544 to i64
  %548 = icmp slt i64 %474, %547
  %549 = add nsw i32 %544, -1
  %550 = trunc i64 %474 to i32
  %551 = select i1 %548, i32 %550, i32 %549
  %552 = load ptr, ptr %30, align 8
  %553 = sext i32 %551 to i64
  %554 = getelementptr inbounds ptr, ptr %552, i64 %553
  %555 = load ptr, ptr %554, align 8
  call void @vorbis_comment_add_tag(ptr noundef nonnull %6, ptr noundef nonnull @.str.21, ptr noundef %555) #56
  br label %556

556:                                              ; preds = %546, %542
  %557 = phi ptr [ null, %542 ], [ %555, %546 ]
  %558 = load i32, ptr %27, align 8
  %559 = icmp eq i32 %558, 0
  br i1 %559, label %570, label %560

560:                                              ; preds = %556
  %561 = sext i32 %558 to i64
  %562 = icmp slt i64 %474, %561
  %563 = add nsw i32 %558, -1
  %564 = trunc i64 %474 to i32
  %565 = select i1 %562, i32 %564, i32 %563
  %566 = load ptr, ptr %26, align 8
  %567 = sext i32 %565 to i64
  %568 = getelementptr inbounds ptr, ptr %566, i64 %567
  %569 = load ptr, ptr %568, align 8
  call void @vorbis_comment_add_tag(ptr noundef nonnull %6, ptr noundef nonnull @.str.4, ptr noundef %569) #56
  br label %570

570:                                              ; preds = %560, %556
  %571 = phi ptr [ null, %556 ], [ %569, %560 ]
  %572 = load i32, ptr %10, align 8
  %573 = sext i32 %572 to i64
  %574 = icmp slt i64 %474, %573
  br i1 %574, label %575, label %579

575:                                              ; preds = %570
  %576 = load ptr, ptr %9, align 8
  %577 = getelementptr inbounds ptr, ptr %576, i64 %474
  %578 = load ptr, ptr %577, align 8
  call void @vorbis_comment_add_tag(ptr noundef nonnull %6, ptr noundef nonnull @.str.173, ptr noundef %578) #56
  br label %579

579:                                              ; preds = %575, %570
  %580 = phi ptr [ %578, %575 ], [ null, %570 ]
  %581 = getelementptr inbounds ptr, ptr %416, i64 %474
  %582 = load ptr, ptr %581, align 8
  %583 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %582, ptr noundef nonnull dereferenceable(2) @.str.34) #57
  %584 = icmp eq i32 %583, 0
  br i1 %584, label %585, label %591

585:                                              ; preds = %579
  %586 = load ptr, ptr @stdin, align 8
  store ptr null, ptr %581, align 8
  %587 = load ptr, ptr %14, align 8
  %588 = icmp eq ptr %587, null
  %589 = load ptr, ptr @stdout, align 8
  %590 = select i1 %588, ptr %589, ptr null
  br label %602

591:                                              ; preds = %579
  %592 = call noalias ptr @fopen(ptr noundef %582, ptr noundef nonnull @.str.37) #56
  %593 = icmp eq ptr %592, null
  br i1 %593, label %594, label %602

594:                                              ; preds = %591
  %595 = load ptr, ptr @stderr, align 8
  %596 = load ptr, ptr %581, align 8
  %597 = tail call ptr @__errno_location() #63
  %598 = load i32, ptr %597, align 4
  %599 = call ptr @strerror(i32 noundef %598) #59
  %600 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %595, ptr noundef nonnull @.str.38, ptr noundef %596, ptr noundef %599) #60
  %601 = add nsw i32 %476, 1
  br label %918

602:                                              ; preds = %591, %585
  %603 = phi ptr [ %586, %585 ], [ %592, %591 ]
  %604 = phi ptr [ %590, %585 ], [ null, %591 ]
  %605 = load i32, ptr %7, align 4
  %606 = icmp eq i32 %605, 0
  br i1 %606, label %622, label %607

607:                                              ; preds = %602
  %608 = load i32, ptr %8, align 4
  %609 = sext i32 %608 to i64
  store i64 %609, ptr %456, align 8
  %610 = load i32, ptr %11, align 8
  store i32 %610, ptr %457, align 8
  %611 = load i32, ptr %12, align 8
  store i32 %611, ptr %458, align 8
  %612 = load i32, ptr %42, align 4
  store i32 %612, ptr %459, align 4
  %613 = call noalias dereferenceable_or_null(40) ptr @malloc(i64 noundef 40) #64
  %614 = trunc i32 %610 to i16
  %615 = getelementptr inbounds %struct.wavfile, ptr %613, i64 0, i32 4
  store ptr %603, ptr %615, align 8
  %616 = getelementptr inbounds %struct.wavfile, ptr %613, i64 0, i32 3
  store i64 0, ptr %616, align 8
  %617 = trunc i32 %612 to i16
  %618 = getelementptr inbounds %struct.wavfile, ptr %613, i64 0, i32 5
  store i16 %617, ptr %618, align 8
  store i16 %614, ptr %613, align 8
  %619 = trunc i32 %611 to i16
  %620 = getelementptr inbounds %struct.wavfile, ptr %613, i64 0, i32 1
  store i16 %619, ptr %620, align 2
  %621 = getelementptr inbounds %struct.wavfile, ptr %613, i64 0, i32 2
  store i64 0, ptr %621, align 8
  store ptr @wav_read, ptr %460, align 8
  store ptr %613, ptr %461, align 8
  store i64 0, ptr %462, align 8
  br label %645

622:                                              ; preds = %602
  %623 = call ptr @open_audio_file(ptr noundef %603, ptr noundef nonnull %5) #56
  %624 = icmp eq ptr %623, null
  br i1 %624, label %635, label %625

625:                                              ; preds = %622
  %626 = load i32, ptr %13, align 8
  %627 = icmp eq i32 %626, 0
  br i1 %627, label %628, label %645

628:                                              ; preds = %625
  %629 = load ptr, ptr @stderr, align 8
  %630 = getelementptr inbounds %struct.input_format, ptr %623, i64 0, i32 4
  %631 = load ptr, ptr %630, align 8
  %632 = getelementptr inbounds %struct.input_format, ptr %623, i64 0, i32 5
  %633 = load ptr, ptr %632, align 8
  %634 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %629, ptr noundef nonnull @.str.39, ptr noundef %631, ptr noundef %633) #60
  br label %645

635:                                              ; preds = %622
  %636 = load ptr, ptr @stderr, align 8
  %637 = load ptr, ptr %581, align 8
  %638 = icmp eq ptr %637, null
  %639 = select i1 %638, ptr @.str.41, ptr %637
  %640 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %636, ptr noundef nonnull @.str.40, ptr noundef nonnull %639) #60
  br i1 %584, label %643, label %641

641:                                              ; preds = %635
  %642 = call i32 @fclose(ptr noundef %603) #56
  br label %643

643:                                              ; preds = %641, %635
  %644 = add nsw i32 %476, 1
  br label %918

645:                                              ; preds = %628, %625, %607
  %646 = phi ptr [ %623, %625 ], [ %623, %628 ], [ %475, %607 ]
  %647 = load ptr, ptr %14, align 8
  %648 = icmp eq ptr %647, null
  br i1 %648, label %654, label %649

649:                                              ; preds = %645
  %650 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %647, ptr noundef nonnull dereferenceable(2) @.str.34) #57
  %651 = icmp eq i32 %650, 0
  br i1 %651, label %652, label %656

652:                                              ; preds = %649
  %653 = load ptr, ptr @stdout, align 8
  br label %795

654:                                              ; preds = %645
  %655 = icmp eq ptr %604, null
  br i1 %655, label %660, label %795

656:                                              ; preds = %649
  %657 = icmp eq ptr %604, null
  br i1 %657, label %658, label %795

658:                                              ; preds = %656
  %659 = call noalias ptr @strdup(ptr noundef nonnull %647) #59
  br label %771

660:                                              ; preds = %654
  %661 = load ptr, ptr %17, align 8
  %662 = icmp eq ptr %661, null
  br i1 %662, label %746, label %663

663:                                              ; preds = %660
  %664 = load ptr, ptr %16, align 8
  %665 = load ptr, ptr %15, align 8
  %666 = call noalias dereferenceable_or_null(4097) ptr @calloc(i64 noundef 4097, i64 noundef 1) #65
  %667 = load i8, ptr %661, align 1
  %668 = icmp eq i8 %667, 0
  br i1 %668, label %771, label %669

669:                                              ; preds = %663
  %670 = icmp eq ptr %580, null
  %671 = select i1 %670, ptr @.str.140, ptr %580
  %672 = icmp eq ptr %571, null
  %673 = select i1 %672, ptr @.str.140, ptr %571
  %674 = icmp eq ptr %515, null
  %675 = select i1 %674, ptr @.str.140, ptr %515
  %676 = icmp eq ptr %543, null
  %677 = select i1 %676, ptr @.str.140, ptr %543
  %678 = icmp eq ptr %557, null
  %679 = select i1 %678, ptr @.str.140, ptr %557
  %680 = icmp eq ptr %529, null
  %681 = select i1 %680, ptr @.str.140, ptr %529
  br label %682

682:                                              ; preds = %739, %669
  %683 = phi i8 [ %667, %669 ], [ %742, %739 ]
  %684 = phi ptr [ %661, %669 ], [ %741, %739 ]
  %685 = phi i32 [ 0, %669 ], [ %740, %739 ]
  %686 = getelementptr inbounds i8, ptr %684, i64 1
  %687 = icmp eq i8 %683, 37
  br i1 %687, label %688, label %735

688:                                              ; preds = %682
  %689 = getelementptr inbounds i8, ptr %684, i64 2
  %690 = load i8, ptr %686, align 1
  %691 = sext i8 %690 to i32
  switch i32 %691, label %732 [
    i32 37, label %692
    i32 97, label %696
    i32 100, label %702
    i32 103, label %708
    i32 116, label %714
    i32 108, label %720
    i32 110, label %726
  ]

692:                                              ; preds = %688
  %693 = add nsw i32 %685, 1
  %694 = sext i32 %685 to i64
  %695 = getelementptr inbounds i8, ptr %666, i64 %694
  store i8 37, ptr %695, align 1
  br label %739

696:                                              ; preds = %688
  %697 = sext i32 %685 to i64
  %698 = getelementptr inbounds i8, ptr %666, i64 %697
  %699 = sub nsw i32 4096, %685
  %700 = call fastcc i32 @strncpy_filtered(ptr noundef %698, ptr noundef nonnull %681, i32 noundef %699, ptr noundef %664, ptr noundef %665) #56
  %701 = add nsw i32 %700, %685
  br label %739

702:                                              ; preds = %688
  %703 = sext i32 %685 to i64
  %704 = getelementptr inbounds i8, ptr %666, i64 %703
  %705 = sub nsw i32 4096, %685
  %706 = call fastcc i32 @strncpy_filtered(ptr noundef %704, ptr noundef nonnull %679, i32 noundef %705, ptr noundef %664, ptr noundef %665) #56
  %707 = add nsw i32 %706, %685
  br label %739

708:                                              ; preds = %688
  %709 = sext i32 %685 to i64
  %710 = getelementptr inbounds i8, ptr %666, i64 %709
  %711 = sub nsw i32 4096, %685
  %712 = call fastcc i32 @strncpy_filtered(ptr noundef %710, ptr noundef nonnull %677, i32 noundef %711, ptr noundef %664, ptr noundef %665) #56
  %713 = add nsw i32 %712, %685
  br label %739

714:                                              ; preds = %688
  %715 = sext i32 %685 to i64
  %716 = getelementptr inbounds i8, ptr %666, i64 %715
  %717 = sub nsw i32 4096, %685
  %718 = call fastcc i32 @strncpy_filtered(ptr noundef %716, ptr noundef nonnull %675, i32 noundef %717, ptr noundef %664, ptr noundef %665) #56
  %719 = add nsw i32 %718, %685
  br label %739

720:                                              ; preds = %688
  %721 = sext i32 %685 to i64
  %722 = getelementptr inbounds i8, ptr %666, i64 %721
  %723 = sub nsw i32 4096, %685
  %724 = call fastcc i32 @strncpy_filtered(ptr noundef %722, ptr noundef nonnull %673, i32 noundef %723, ptr noundef %664, ptr noundef %665) #56
  %725 = add nsw i32 %724, %685
  br label %739

726:                                              ; preds = %688
  %727 = sext i32 %685 to i64
  %728 = getelementptr inbounds i8, ptr %666, i64 %727
  %729 = sub nsw i32 4096, %685
  %730 = call fastcc i32 @strncpy_filtered(ptr noundef %728, ptr noundef nonnull %671, i32 noundef %729, ptr noundef %664, ptr noundef %665) #56
  %731 = add nsw i32 %730, %685
  br label %739

732:                                              ; preds = %688
  %733 = load ptr, ptr @stderr, align 8
  %734 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %733, ptr noundef nonnull @.str.141, i32 noundef %691) #60
  br label %739

735:                                              ; preds = %682
  %736 = add nsw i32 %685, 1
  %737 = sext i32 %685 to i64
  %738 = getelementptr inbounds i8, ptr %666, i64 %737
  store i8 %683, ptr %738, align 1
  br label %739

739:                                              ; preds = %735, %732, %726, %720, %714, %708, %702, %696, %692
  %740 = phi i32 [ %685, %732 ], [ %731, %726 ], [ %725, %720 ], [ %719, %714 ], [ %713, %708 ], [ %707, %702 ], [ %701, %696 ], [ %693, %692 ], [ %736, %735 ]
  %741 = phi ptr [ %689, %732 ], [ %689, %726 ], [ %689, %720 ], [ %689, %714 ], [ %689, %708 ], [ %689, %702 ], [ %689, %696 ], [ %689, %692 ], [ %686, %735 ]
  %742 = load i8, ptr %741, align 1
  %743 = icmp ne i8 %742, 0
  %744 = icmp slt i32 %740, 4096
  %745 = select i1 %743, i1 %744, i1 false
  br i1 %745, label %682, label %771, !llvm.loop !11

746:                                              ; preds = %660
  %747 = load ptr, ptr %581, align 8
  %748 = icmp eq ptr %747, null
  br i1 %748, label %767, label %749

749:                                              ; preds = %746
  %750 = call ptr @strrchr(ptr noundef nonnull dereferenceable(1) %747, i32 noundef 46) #57
  %751 = icmp eq ptr %750, null
  br i1 %751, label %752, label %756

752:                                              ; preds = %749
  %753 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %747) #57
  %754 = getelementptr inbounds i8, ptr %747, i64 %753
  %755 = getelementptr inbounds i8, ptr %754, i64 1
  br label %756

756:                                              ; preds = %752, %749
  %757 = phi ptr [ %755, %752 ], [ %750, %749 ]
  %758 = ptrtoint ptr %757 to i64
  %759 = ptrtoint ptr %747 to i64
  %760 = sub i64 %758, %759
  %761 = add nsw i64 %760, 5
  %762 = call noalias ptr @malloc(i64 noundef %761) #64
  %763 = call ptr @strncpy(ptr noundef %762, ptr noundef nonnull %747, i64 noundef %760) #59
  %764 = getelementptr inbounds i8, ptr %762, i64 %760
  store i8 0, ptr %764, align 1
  %765 = call i64 @strlen(ptr nonnull dereferenceable(1) %762)
  %766 = getelementptr inbounds i8, ptr %762, i64 %765
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(5) %766, ptr noundef nonnull align 1 dereferenceable(5) @.str.42, i64 5, i1 false)
  br label %771

767:                                              ; preds = %746
  %768 = load ptr, ptr @stderr, align 8
  %769 = call i64 @fwrite(ptr nonnull @.str.43, i64 50, i64 1, ptr %768) #58
  %770 = call noalias dereferenceable_or_null(12) ptr @strdup(ptr noundef nonnull @.str.44) #59
  br label %771

771:                                              ; preds = %767, %756, %739, %663, %658
  %772 = phi ptr [ %659, %658 ], [ %762, %756 ], [ %770, %767 ], [ %666, %663 ], [ %666, %739 ]
  %773 = call i32 @create_directories(ptr noundef %772) #56, !range !12
  %774 = icmp eq i32 %773, 0
  br i1 %774, label %782, label %775

775:                                              ; preds = %771
  br i1 %584, label %778, label %776

776:                                              ; preds = %775
  %777 = call i32 @fclose(ptr noundef %603) #56
  br label %778

778:                                              ; preds = %776, %775
  %779 = load ptr, ptr @stderr, align 8
  %780 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %779, ptr noundef nonnull @.str.45, ptr noundef %772) #60
  %781 = add nsw i32 %476, 1
  call void @free(ptr noundef %772) #59
  br label %918

782:                                              ; preds = %771
  %783 = call noalias ptr @fopen(ptr noundef %772, ptr noundef nonnull @.str.46) #56
  %784 = icmp eq ptr %783, null
  br i1 %784, label %785, label %795

785:                                              ; preds = %782
  br i1 %584, label %788, label %786

786:                                              ; preds = %785
  %787 = call i32 @fclose(ptr noundef %603) #56
  br label %788

788:                                              ; preds = %786, %785
  %789 = load ptr, ptr @stderr, align 8
  %790 = tail call ptr @__errno_location() #63
  %791 = load i32, ptr %790, align 4
  %792 = call ptr @strerror(i32 noundef %791) #59
  %793 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %789, ptr noundef nonnull @.str.47, ptr noundef %772, ptr noundef %792) #60
  %794 = add nsw i32 %476, 1
  call void @free(ptr noundef %772) #59
  br label %918

795:                                              ; preds = %782, %656, %654, %652
  %796 = phi ptr [ null, %654 ], [ null, %652 ], [ %772, %782 ], [ null, %656 ]
  %797 = phi ptr [ %604, %654 ], [ %653, %652 ], [ %783, %782 ], [ %604, %656 ]
  %798 = phi i1 [ true, %654 ], [ true, %652 ], [ false, %782 ], [ true, %656 ]
  store ptr %797, ptr %463, align 8
  store ptr %6, ptr %5, align 8
  store ptr %796, ptr %464, align 8
  %799 = load ptr, ptr %581, align 8
  store ptr %799, ptr %465, align 8
  %800 = load <4 x i32>, ptr %21, align 8
  %801 = shufflevector <4 x i32> %800, <4 x i32> poison, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  store <4 x i32> %801, ptr %466, align 8
  %802 = load float, ptr %18, align 8
  store float %802, ptr %467, align 8
  %803 = load i32, ptr %19, align 4
  store i32 %803, ptr %468, align 4
  %804 = load ptr, ptr %37, align 8
  store ptr %804, ptr %469, align 8
  %805 = load i32, ptr %38, align 8
  store i32 %805, ptr %470, align 8
  %806 = load i32, ptr %41, align 8
  %807 = icmp eq i32 %806, 0
  br i1 %807, label %825, label %808

808:                                              ; preds = %795
  %809 = sext i32 %806 to i64
  %810 = load i64, ptr %456, align 8
  %811 = icmp eq i64 %810, %809
  br i1 %811, label %825, label %812

812:                                              ; preds = %808
  %813 = trunc i64 %810 to i32
  store i32 %806, ptr %471, align 8
  %814 = call i32 @setup_resample(ptr noundef nonnull %5) #56, !range !12
  %815 = icmp eq i32 %814, 0
  br i1 %815, label %816, label %823

816:                                              ; preds = %812
  %817 = load i32, ptr %13, align 8
  %818 = icmp eq i32 %817, 0
  br i1 %818, label %819, label %825

819:                                              ; preds = %816
  %820 = load ptr, ptr @stderr, align 8
  %821 = load i32, ptr %41, align 8
  %822 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %820, ptr noundef nonnull @.str.48, i32 noundef %813, i32 noundef %821) #60
  br label %825

823:                                              ; preds = %812
  %824 = add nsw i32 %476, 1
  br label %897

825:                                              ; preds = %819, %816, %808, %795
  %826 = load i32, ptr %40, align 4
  %827 = icmp eq i32 %826, 0
  br i1 %827, label %848, label %828

828:                                              ; preds = %825
  %829 = load i32, ptr %457, align 8
  %830 = icmp eq i32 %829, 2
  br i1 %830, label %831, label %837

831:                                              ; preds = %828
  call void @setup_downmix(ptr noundef nonnull %5) #56
  %832 = load i32, ptr %13, align 8
  %833 = icmp eq i32 %832, 0
  br i1 %833, label %834, label %848

834:                                              ; preds = %831
  %835 = load ptr, ptr @stderr, align 8
  %836 = call i64 @fwrite(ptr nonnull @.str.49, i64 26, i64 1, ptr %835) #58
  br label %848

837:                                              ; preds = %828
  %838 = load ptr, ptr @stderr, align 8
  %839 = call i64 @fwrite(ptr nonnull @.str.50, i64 48, i64 1, ptr %838) #58
  %840 = add nsw i32 %476, 1
  %841 = load i32, ptr %41, align 8
  %842 = icmp eq i32 %841, 0
  %843 = sext i32 %841 to i64
  %844 = load i64, ptr %456, align 8
  %845 = icmp eq i64 %844, %843
  %846 = select i1 %842, i1 true, i1 %845
  br i1 %846, label %897, label %847

847:                                              ; preds = %837
  call void @clear_resample(ptr noundef nonnull %5) #56
  br label %897

848:                                              ; preds = %834, %831, %825
  %849 = load float, ptr %39, align 8
  %850 = fcmp ogt float %849, 0.000000e+00
  br i1 %850, label %851, label %865

851:                                              ; preds = %848
  %852 = call noalias dereferenceable_or_null(24) ptr @calloc(i64 noundef 1, i64 noundef 24) #65
  %853 = load ptr, ptr %460, align 8
  store ptr %853, ptr %852, align 8
  %854 = load ptr, ptr %461, align 8
  %855 = getelementptr inbounds %struct.scaler, ptr %852, i64 0, i32 1
  store ptr %854, ptr %855, align 8
  store ptr @read_scaler, ptr %460, align 8
  store ptr %852, ptr %461, align 8
  %856 = load i32, ptr %457, align 8
  %857 = getelementptr inbounds %struct.scaler, ptr %852, i64 0, i32 2
  store i32 %856, ptr %857, align 8
  %858 = getelementptr inbounds %struct.scaler, ptr %852, i64 0, i32 3
  store float %849, ptr %858, align 4
  %859 = load i32, ptr %13, align 8
  %860 = icmp eq i32 %859, 0
  br i1 %860, label %861, label %865

861:                                              ; preds = %851
  %862 = load ptr, ptr @stderr, align 8
  %863 = fpext float %849 to double
  %864 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %862, ptr noundef nonnull @.str.51, double noundef %863) #60
  br label %865

865:                                              ; preds = %861, %851, %848
  %866 = load i64, ptr %462, align 8
  %867 = icmp eq i64 %866, 0
  br i1 %867, label %868, label %869

868:                                              ; preds = %865
  store ptr @update_statistics_notime, ptr %451, align 8
  br label %869

869:                                              ; preds = %868, %865
  %870 = load i32, ptr %13, align 8
  %871 = icmp eq i32 %870, 0
  br i1 %871, label %873, label %872

872:                                              ; preds = %869
  store ptr @start_encode_null, ptr %452, align 8
  store ptr @update_statistics_null, ptr %451, align 8
  store ptr @final_statistics_null, ptr %453, align 8
  br label %873

873:                                              ; preds = %872, %869
  %874 = call i32 @oe_encode(ptr noundef nonnull %5) #56
  %875 = icmp ne i32 %874, 0
  %876 = zext i1 %875 to i32
  %877 = add nsw i32 %476, %876
  %878 = load float, ptr %39, align 8
  %879 = fcmp ogt float %878, 0.000000e+00
  br i1 %879, label %880, label %885

880:                                              ; preds = %873
  %881 = load ptr, ptr %461, align 8
  %882 = load ptr, ptr %881, align 8
  store ptr %882, ptr %460, align 8
  %883 = getelementptr inbounds %struct.scaler, ptr %881, i64 0, i32 1
  %884 = load ptr, ptr %883, align 8
  store ptr %884, ptr %461, align 8
  call void @free(ptr noundef %881) #59
  br label %885

885:                                              ; preds = %880, %873
  %886 = load i32, ptr %40, align 4
  %887 = icmp eq i32 %886, 0
  br i1 %887, label %889, label %888

888:                                              ; preds = %885
  call void @clear_downmix(ptr noundef nonnull %5) #56
  br label %889

889:                                              ; preds = %888, %885
  %890 = load i32, ptr %41, align 8
  %891 = icmp eq i32 %890, 0
  %892 = sext i32 %890 to i64
  %893 = load i64, ptr %456, align 8
  %894 = icmp eq i64 %893, %892
  %895 = select i1 %891, i1 true, i1 %894
  br i1 %895, label %897, label %896

896:                                              ; preds = %889
  call void @clear_resample(ptr noundef nonnull %5) #56
  br label %897

897:                                              ; preds = %896, %889, %847, %837, %823
  %898 = phi i32 [ %824, %823 ], [ %877, %896 ], [ %877, %889 ], [ %840, %847 ], [ %840, %837 ]
  %899 = icmp eq ptr %796, null
  br i1 %899, label %901, label %900

900:                                              ; preds = %897
  call void @free(ptr noundef nonnull %796) #59
  br label %901

901:                                              ; preds = %900, %897
  %902 = load ptr, ptr %14, align 8
  %903 = icmp eq ptr %902, null
  br i1 %903, label %905, label %904

904:                                              ; preds = %901
  call void @free(ptr noundef nonnull %902) #59
  br label %905

905:                                              ; preds = %904, %901
  call void @vorbis_comment_clear(ptr noundef nonnull %6) #56
  %906 = load i32, ptr %7, align 4
  %907 = icmp eq i32 %906, 0
  br i1 %907, label %908, label %912

908:                                              ; preds = %905
  %909 = getelementptr inbounds %struct.input_format, ptr %646, i64 0, i32 3
  %910 = load ptr, ptr %909, align 8
  %911 = load ptr, ptr %461, align 8
  call void %910(ptr noundef %911) #59
  br label %912

912:                                              ; preds = %908, %905
  br i1 %584, label %915, label %913

913:                                              ; preds = %912
  %914 = call i32 @fclose(ptr noundef %603) #56
  br label %915

915:                                              ; preds = %913, %912
  br i1 %798, label %918, label %916

916:                                              ; preds = %915
  %917 = call i32 @fclose(ptr noundef %797) #56
  br label %918

918:                                              ; preds = %916, %915, %788, %778, %643, %594
  %919 = phi i32 [ %601, %594 ], [ %781, %778 ], [ %794, %788 ], [ %644, %643 ], [ %898, %916 ], [ %898, %915 ]
  %920 = phi ptr [ %475, %594 ], [ %646, %778 ], [ %646, %788 ], [ null, %643 ], [ %646, %916 ], [ %646, %915 ]
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %6) #55
  call void @llvm.lifetime.end.p0(i64 168, ptr nonnull %5) #55
  %921 = add nuw nsw i64 %474, 1
  %922 = icmp eq i64 %921, %472
  br i1 %922, label %923, label %473, !llvm.loop !13

923:                                              ; preds = %918, %448
  %924 = phi i32 [ 0, %448 ], [ %919, %918 ]
  %925 = icmp ne i32 %924, 0
  %926 = zext i1 %925 to i32
  br label %927

927:                                              ; preds = %923, %411
  %928 = phi i32 [ 1, %411 ], [ %926, %923 ]
  call void @llvm.lifetime.end.p0(i64 224, ptr nonnull %4) #55
  ret i32 %928
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nofree nounwind optsize uwtable
define internal i32 @_getopt_internal(i32 noundef %0, ptr nocapture noundef %1, ptr noundef readonly %2, ptr noundef readonly %3, ptr noundef writeonly %4, i32 noundef %5) #3 {
  store ptr null, ptr @optarg, align 8
  %7 = load i32, ptr @optind, align 4
  %8 = icmp ne i32 %7, 0
  %9 = load i32, ptr @__getopt_initialized, align 4
  %10 = icmp ne i32 %9, 0
  %11 = select i1 %8, i1 %10, i1 false
  br i1 %11, label %29, label %12

12:                                               ; preds = %6
  %13 = icmp eq i32 %7, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %12
  store i32 1, ptr @optind, align 4
  br label %15

15:                                               ; preds = %14, %12
  %16 = phi i32 [ 1, %14 ], [ %7, %12 ]
  store i32 %16, ptr @last_nonopt, align 4
  store i32 %16, ptr @first_nonopt, align 4
  store ptr null, ptr @nextchar, align 8
  %17 = tail call ptr @getenv(ptr noundef nonnull @.str.197) #59
  store ptr %17, ptr @posixly_correct, align 8
  %18 = load i8, ptr %2, align 1
  switch i8 %18, label %23 [
    i8 45, label %19
    i8 43, label %21
  ]

19:                                               ; preds = %15
  store i32 2, ptr @ordering, align 4
  %20 = getelementptr inbounds i8, ptr %2, i64 1
  br label %27

21:                                               ; preds = %15
  store i32 0, ptr @ordering, align 4
  %22 = getelementptr inbounds i8, ptr %2, i64 1
  br label %27

23:                                               ; preds = %15
  %24 = icmp eq ptr %17, null
  br i1 %24, label %26, label %25

25:                                               ; preds = %23
  store i32 0, ptr @ordering, align 4
  br label %27

26:                                               ; preds = %23
  store i32 1, ptr @ordering, align 4
  br label %27

27:                                               ; preds = %26, %25, %21, %19
  %28 = phi ptr [ %20, %19 ], [ %22, %21 ], [ %2, %25 ], [ %2, %26 ]
  store i32 1, ptr @__getopt_initialized, align 4
  br label %35

29:                                               ; preds = %6
  %30 = load ptr, ptr @nextchar, align 8
  %31 = icmp eq ptr %30, null
  br i1 %31, label %35, label %32

32:                                               ; preds = %29
  %33 = load i8, ptr %30, align 1
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %35, label %130

35:                                               ; preds = %32, %29, %27
  %36 = phi ptr [ %28, %27 ], [ %2, %32 ], [ %2, %29 ]
  %37 = phi i32 [ %16, %27 ], [ %7, %32 ], [ %7, %29 ]
  %38 = load i32, ptr @last_nonopt, align 4
  %39 = icmp sgt i32 %38, %37
  br i1 %39, label %40, label %41

40:                                               ; preds = %35
  store i32 %37, ptr @last_nonopt, align 4
  br label %41

41:                                               ; preds = %40, %35
  %42 = phi i32 [ %37, %40 ], [ %38, %35 ]
  %43 = load i32, ptr @first_nonopt, align 4
  %44 = icmp sgt i32 %43, %37
  br i1 %44, label %45, label %46

45:                                               ; preds = %41
  store i32 %37, ptr @first_nonopt, align 4
  br label %46

46:                                               ; preds = %45, %41
  %47 = phi i32 [ %37, %45 ], [ %43, %41 ]
  %48 = load i32, ptr @ordering, align 4
  %49 = icmp eq i32 %48, 1
  br i1 %49, label %50, label %83

50:                                               ; preds = %46
  %51 = icmp eq i32 %47, %42
  %52 = icmp eq i32 %42, %37
  %53 = or i1 %51, %52
  br i1 %53, label %56, label %54

54:                                               ; preds = %50
  tail call fastcc void @exchange(ptr noundef %1) #56
  %55 = load i32, ptr @optind, align 4
  br label %58

56:                                               ; preds = %50
  br i1 %52, label %58, label %57

57:                                               ; preds = %56
  store i32 %37, ptr @first_nonopt, align 4
  br label %58

58:                                               ; preds = %57, %56, %54
  %59 = phi i32 [ %37, %56 ], [ %37, %57 ], [ %55, %54 ]
  %60 = icmp slt i32 %59, %0
  br i1 %60, label %61, label %80

61:                                               ; preds = %58
  %62 = sext i32 %59 to i64
  br label %63

63:                                               ; preds = %74, %61
  %64 = phi i32 [ %59, %61 ], [ %76, %74 ]
  %65 = phi i64 [ %62, %61 ], [ %75, %74 ]
  %66 = getelementptr inbounds ptr, ptr %1, i64 %65
  %67 = load ptr, ptr %66, align 8
  %68 = load i8, ptr %67, align 1
  %69 = icmp eq i8 %68, 45
  br i1 %69, label %70, label %74

70:                                               ; preds = %63
  %71 = getelementptr inbounds i8, ptr %67, i64 1
  %72 = load i8, ptr %71, align 1
  %73 = icmp eq i8 %72, 0
  br i1 %73, label %74, label %78

74:                                               ; preds = %70, %63
  %75 = add nsw i64 %65, 1
  %76 = trunc i64 %75 to i32
  store i32 %76, ptr @optind, align 4
  %77 = icmp eq i32 %76, %0
  br i1 %77, label %80, label %63, !llvm.loop !14

78:                                               ; preds = %70
  %.lcssa10 = phi i32 [ %64, %70 ]
  %.lcssa9 = phi i64 [ %65, %70 ]
  %79 = trunc i64 %.lcssa9 to i32
  br label %80

80:                                               ; preds = %78, %74, %58
  %81 = phi i32 [ %59, %58 ], [ %.lcssa10, %78 ], [ %0, %74 ]
  %82 = phi i32 [ %59, %58 ], [ %79, %78 ], [ %0, %74 ]
  store i32 %82, ptr @last_nonopt, align 4
  br label %83

83:                                               ; preds = %80, %46
  %84 = phi i32 [ %82, %80 ], [ %42, %46 ]
  %85 = phi i32 [ %81, %80 ], [ %37, %46 ]
  %86 = icmp eq i32 %85, %0
  br i1 %86, label %105, label %87

87:                                               ; preds = %83
  %88 = sext i32 %85 to i64
  %89 = getelementptr inbounds ptr, ptr %1, i64 %88
  %90 = load ptr, ptr %89, align 8
  %91 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %90, ptr noundef nonnull dereferenceable(3) @.str.115) #57
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %93, label %103

93:                                               ; preds = %87
  %94 = add nsw i32 %85, 1
  store i32 %94, ptr @optind, align 4
  %95 = load i32, ptr @first_nonopt, align 4
  %96 = icmp eq i32 %95, %84
  %97 = icmp eq i32 %84, %94
  %98 = select i1 %96, i1 true, i1 %97
  br i1 %98, label %100, label %99

99:                                               ; preds = %93
  tail call fastcc void @exchange(ptr noundef nonnull %1) #56
  br label %102

100:                                              ; preds = %93
  br i1 %96, label %101, label %102

101:                                              ; preds = %100
  store i32 %94, ptr @first_nonopt, align 4
  br label %102

102:                                              ; preds = %101, %100, %99
  store i32 %0, ptr @last_nonopt, align 4
  store i32 %0, ptr @optind, align 4
  br label %105

103:                                              ; preds = %87
  %104 = icmp eq i32 %85, %0
  br i1 %104, label %105, label %110

105:                                              ; preds = %103, %102, %83
  %106 = phi i32 [ %84, %103 ], [ %84, %83 ], [ %0, %102 ]
  %107 = load i32, ptr @first_nonopt, align 4
  %108 = icmp eq i32 %107, %106
  br i1 %108, label %536, label %109

109:                                              ; preds = %105
  store i32 %107, ptr @optind, align 4
  br label %536

110:                                              ; preds = %103
  %111 = sext i32 %85 to i64
  %112 = getelementptr inbounds ptr, ptr %1, i64 %111
  %113 = load ptr, ptr %112, align 8
  %114 = load i8, ptr %113, align 1
  %115 = icmp eq i8 %114, 45
  br i1 %115, label %116, label %120

116:                                              ; preds = %110
  %117 = getelementptr inbounds i8, ptr %113, i64 1
  %118 = load i8, ptr %117, align 1
  %119 = icmp eq i8 %118, 0
  br i1 %119, label %120, label %124

120:                                              ; preds = %116, %110
  %121 = icmp eq i32 %48, 0
  br i1 %121, label %536, label %122

122:                                              ; preds = %120
  %123 = add nsw i32 %85, 1
  store i32 %123, ptr @optind, align 4
  store ptr %113, ptr @optarg, align 8
  br label %536

124:                                              ; preds = %116
  %125 = icmp ne ptr %3, null
  %126 = icmp eq i8 %118, 45
  %127 = and i1 %125, %126
  %128 = zext i1 %127 to i64
  %129 = getelementptr inbounds i8, ptr %117, i64 %128
  store ptr %129, ptr @nextchar, align 8
  br label %130

130:                                              ; preds = %124, %32
  %131 = phi ptr [ %36, %124 ], [ %2, %32 ]
  %132 = phi ptr [ %129, %124 ], [ %30, %32 ]
  %133 = phi i32 [ %85, %124 ], [ %7, %32 ]
  %134 = icmp eq ptr %3, null
  br i1 %134, label %316, label %135

135:                                              ; preds = %130
  %136 = sext i32 %133 to i64
  %137 = getelementptr inbounds ptr, ptr %1, i64 %136
  %138 = load ptr, ptr %137, align 8
  %139 = getelementptr inbounds i8, ptr %138, i64 1
  %140 = load i8, ptr %139, align 1
  %141 = sext i8 %140 to i32
  %142 = icmp eq i8 %140, 45
  br i1 %142, label %152, label %143

143:                                              ; preds = %135
  %144 = icmp eq i32 %5, 0
  br i1 %144, label %316, label %145

145:                                              ; preds = %143
  %146 = getelementptr inbounds i8, ptr %138, i64 2
  %147 = load i8, ptr %146, align 1
  %148 = icmp eq i8 %147, 0
  br i1 %148, label %149, label %152

149:                                              ; preds = %145
  %150 = tail call ptr @strchr(ptr noundef nonnull dereferenceable(1) %131, i32 noundef %141) #57
  %151 = icmp eq ptr %150, null
  br i1 %151, label %152, label %316

152:                                              ; preds = %149, %145, %135
  br label %153

153:                                              ; preds = %156, %152
  %154 = phi ptr [ %157, %156 ], [ %132, %152 ]
  %155 = load i8, ptr %154, align 1
  switch i8 %155, label %156 [
    i8 0, label %158
    i8 61, label %158
  ]

156:                                              ; preds = %153
  %157 = getelementptr inbounds i8, ptr %154, i64 1
  br label %153, !llvm.loop !15

158:                                              ; preds = %153, %153
  %.lcssa8 = phi ptr [ %154, %153 ], [ %154, %153 ]
  %159 = load ptr, ptr %3, align 8
  %160 = icmp eq ptr %159, null
  br i1 %160, label %285, label %161

161:                                              ; preds = %158
  %162 = ptrtoint ptr %.lcssa8 to i64
  %163 = ptrtoint ptr %132 to i64
  %164 = sub i64 %162, %163
  %165 = trunc i64 %164 to i32
  br label %166

166:                                              ; preds = %184, %161
  %167 = phi ptr [ %159, %161 ], [ %190, %184 ]
  %168 = phi i32 [ 0, %161 ], [ %189, %184 ]
  %169 = phi i32 [ -1, %161 ], [ %187, %184 ]
  %170 = phi i32 [ 0, %161 ], [ %186, %184 ]
  %171 = phi ptr [ null, %161 ], [ %185, %184 ]
  %172 = phi ptr [ %3, %161 ], [ %188, %184 ]
  %173 = tail call i32 @strncmp(ptr noundef nonnull %167, ptr noundef %132, i64 noundef %164) #57
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %175, label %184

175:                                              ; preds = %166
  %176 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %167) #57
  %177 = trunc i64 %176 to i32
  %178 = icmp eq i32 %165, %177
  br i1 %178, label %211, label %179

179:                                              ; preds = %175
  %180 = icmp eq ptr %171, null
  %181 = select i1 %180, ptr %172, ptr %171
  %182 = select i1 %180, i32 %170, i32 1
  %183 = select i1 %180, i32 %168, i32 %169
  br label %184

184:                                              ; preds = %179, %166
  %185 = phi ptr [ %171, %166 ], [ %181, %179 ]
  %186 = phi i32 [ %170, %166 ], [ %182, %179 ]
  %187 = phi i32 [ %169, %166 ], [ %183, %179 ]
  %188 = getelementptr inbounds %struct.option, ptr %172, i64 1
  %189 = add nuw nsw i32 %168, 1
  %190 = load ptr, ptr %188, align 8
  %191 = icmp eq ptr %190, null
  br i1 %191, label %192, label %166, !llvm.loop !16

192:                                              ; preds = %184
  %.lcssa7 = phi ptr [ %185, %184 ]
  %.lcssa6 = phi i32 [ %186, %184 ]
  %.lcssa5 = phi i32 [ %187, %184 ]
  %193 = icmp eq i32 %.lcssa6, 0
  br i1 %193, label %209, label %194

194:                                              ; preds = %192
  %195 = load i32, ptr @opterr, align 4
  %196 = icmp eq i32 %195, 0
  br i1 %196, label %203, label %197

197:                                              ; preds = %194
  %198 = load ptr, ptr @stderr, align 8
  %199 = load ptr, ptr %1, align 8
  %200 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %198, ptr noundef nonnull @.str.116, ptr noundef %199, ptr noundef %138) #60
  %201 = load ptr, ptr @nextchar, align 8
  %202 = load i32, ptr @optind, align 4
  br label %203

203:                                              ; preds = %197, %194
  %204 = phi i32 [ %202, %197 ], [ %133, %194 ]
  %205 = phi ptr [ %201, %197 ], [ %132, %194 ]
  %206 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %205) #57
  %207 = getelementptr inbounds i8, ptr %205, i64 %206
  store ptr %207, ptr @nextchar, align 8
  %208 = add nsw i32 %204, 1
  store i32 %208, ptr @optind, align 4
  store i32 0, ptr @optopt, align 4
  br label %536

209:                                              ; preds = %192
  %210 = icmp eq ptr %.lcssa7, null
  br i1 %210, label %285, label %211

211:                                              ; preds = %209, %175
  %212 = phi ptr [ %.lcssa7, %209 ], [ %172, %175 ]
  %213 = phi i32 [ %.lcssa5, %209 ], [ %168, %175 ]
  %214 = add nsw i32 %133, 1
  store i32 %214, ptr @optind, align 4
  %215 = load i8, ptr %.lcssa8, align 1
  %216 = icmp eq i8 %215, 0
  %217 = getelementptr inbounds %struct.option, ptr %212, i64 0, i32 1
  %218 = load i32, ptr %217, align 8
  br i1 %216, label %245, label %219

219:                                              ; preds = %211
  %220 = icmp eq i32 %218, 0
  br i1 %220, label %223, label %221

221:                                              ; preds = %219
  %222 = getelementptr inbounds i8, ptr %.lcssa8, i64 1
  br label %271

223:                                              ; preds = %219
  %224 = load i32, ptr @opterr, align 4
  %225 = icmp eq i32 %224, 0
  br i1 %225, label %239, label %226

226:                                              ; preds = %223
  %227 = load i8, ptr %139, align 1
  %228 = icmp eq i8 %227, 45
  %229 = load ptr, ptr @stderr, align 8
  %230 = load ptr, ptr %1, align 8
  br i1 %228, label %231, label %234

231:                                              ; preds = %226
  %232 = load ptr, ptr %212, align 8
  %233 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %229, ptr noundef nonnull @.str.117, ptr noundef %230, ptr noundef %232) #60
  br label %239

234:                                              ; preds = %226
  %235 = load i8, ptr %138, align 1
  %236 = sext i8 %235 to i32
  %237 = load ptr, ptr %212, align 8
  %238 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %229, ptr noundef nonnull @.str.118, ptr noundef %230, i32 noundef %236, ptr noundef %237) #60
  br label %239

239:                                              ; preds = %234, %231, %223
  %240 = load ptr, ptr @nextchar, align 8
  %241 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %240) #57
  %242 = getelementptr inbounds i8, ptr %240, i64 %241
  store ptr %242, ptr @nextchar, align 8
  %243 = getelementptr inbounds %struct.option, ptr %212, i64 0, i32 3
  %244 = load i32, ptr %243, align 8
  store i32 %244, ptr @optopt, align 4
  br label %536

245:                                              ; preds = %211
  %246 = icmp eq i32 %218, 1
  br i1 %246, label %247, label %273

247:                                              ; preds = %245
  %248 = icmp slt i32 %214, %0
  br i1 %248, label %249, label %254

249:                                              ; preds = %247
  %250 = add nsw i32 %133, 2
  store i32 %250, ptr @optind, align 4
  %251 = sext i32 %214 to i64
  %252 = getelementptr inbounds ptr, ptr %1, i64 %251
  %253 = load ptr, ptr %252, align 8
  br label %271

254:                                              ; preds = %247
  %255 = load i32, ptr @opterr, align 4
  %256 = icmp eq i32 %255, 0
  br i1 %256, label %262, label %257

257:                                              ; preds = %254
  %258 = load ptr, ptr @stderr, align 8
  %259 = load ptr, ptr %1, align 8
  %260 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %258, ptr noundef nonnull @.str.119, ptr noundef %259, ptr noundef %138) #60
  %261 = load ptr, ptr @nextchar, align 8
  br label %262

262:                                              ; preds = %257, %254
  %263 = phi ptr [ %261, %257 ], [ %132, %254 ]
  %264 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %263) #57
  %265 = getelementptr inbounds i8, ptr %263, i64 %264
  store ptr %265, ptr @nextchar, align 8
  %266 = getelementptr inbounds %struct.option, ptr %212, i64 0, i32 3
  %267 = load i32, ptr %266, align 8
  store i32 %267, ptr @optopt, align 4
  %268 = load i8, ptr %131, align 1
  %269 = icmp eq i8 %268, 58
  %270 = select i1 %269, i32 58, i32 63
  br label %536

271:                                              ; preds = %249, %221
  %272 = phi ptr [ %253, %249 ], [ %222, %221 ]
  store ptr %272, ptr @optarg, align 8
  br label %273

273:                                              ; preds = %271, %245
  %274 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %132) #57
  %275 = getelementptr inbounds i8, ptr %132, i64 %274
  store ptr %275, ptr @nextchar, align 8
  %276 = icmp eq ptr %4, null
  br i1 %276, label %278, label %277

277:                                              ; preds = %273
  store i32 %213, ptr %4, align 4
  br label %278

278:                                              ; preds = %277, %273
  %279 = getelementptr inbounds %struct.option, ptr %212, i64 0, i32 2
  %280 = load ptr, ptr %279, align 8
  %281 = icmp eq ptr %280, null
  %282 = getelementptr inbounds %struct.option, ptr %212, i64 0, i32 3
  %283 = load i32, ptr %282, align 8
  br i1 %281, label %536, label %284

284:                                              ; preds = %278
  store i32 %283, ptr %280, align 4
  br label %536

285:                                              ; preds = %209, %158
  %286 = icmp eq i32 %5, 0
  br i1 %286, label %293, label %287

287:                                              ; preds = %285
  br i1 %142, label %296, label %288

288:                                              ; preds = %287
  %289 = load i8, ptr %132, align 1
  %290 = sext i8 %289 to i32
  %291 = tail call ptr @strchr(ptr noundef nonnull dereferenceable(1) %131, i32 noundef %290) #57
  %292 = icmp eq ptr %291, null
  br i1 %292, label %299, label %316

293:                                              ; preds = %285
  %294 = load i32, ptr @opterr, align 4
  %295 = icmp eq i32 %294, 0
  br i1 %295, label %313, label %302

296:                                              ; preds = %287
  %297 = load i32, ptr @opterr, align 4
  %298 = icmp eq i32 %297, 0
  br i1 %298, label %313, label %303

299:                                              ; preds = %288
  %300 = load i32, ptr @opterr, align 4
  %301 = icmp eq i32 %300, 0
  br i1 %301, label %313, label %307

302:                                              ; preds = %293
  br i1 %142, label %303, label %307

303:                                              ; preds = %302, %296
  %304 = load ptr, ptr @stderr, align 8
  %305 = load ptr, ptr %1, align 8
  %306 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %304, ptr noundef nonnull @.str.120, ptr noundef %305, ptr noundef %132) #60
  br label %313

307:                                              ; preds = %302, %299
  %308 = load ptr, ptr @stderr, align 8
  %309 = load ptr, ptr %1, align 8
  %310 = load i8, ptr %138, align 1
  %311 = sext i8 %310 to i32
  %312 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %308, ptr noundef nonnull @.str.121, ptr noundef %309, i32 noundef %311, ptr noundef %132) #60
  br label %313

313:                                              ; preds = %307, %303, %299, %296, %293
  store ptr @.str.103, ptr @nextchar, align 8
  %314 = load i32, ptr @optind, align 4
  %315 = add nsw i32 %314, 1
  store i32 %315, ptr @optind, align 4
  store i32 0, ptr @optopt, align 4
  br label %536

316:                                              ; preds = %288, %149, %143, %130
  %317 = getelementptr inbounds i8, ptr %132, i64 1
  store ptr %317, ptr @nextchar, align 8
  %318 = load i8, ptr %132, align 1
  %319 = sext i8 %318 to i32
  %320 = tail call ptr @strchr(ptr noundef nonnull dereferenceable(1) %131, i32 noundef %319) #57
  %321 = load i8, ptr %317, align 1
  %322 = icmp eq i8 %321, 0
  br i1 %322, label %323, label %325

323:                                              ; preds = %316
  %324 = add nsw i32 %133, 1
  store i32 %324, ptr @optind, align 4
  br label %325

325:                                              ; preds = %323, %316
  %326 = phi i32 [ %324, %323 ], [ %133, %316 ]
  %327 = icmp eq ptr %320, null
  %328 = icmp eq i8 %318, 58
  %329 = or i1 %328, %327
  br i1 %329, label %330, label %341

330:                                              ; preds = %325
  %331 = load i32, ptr @opterr, align 4
  %332 = icmp eq i32 %331, 0
  br i1 %332, label %340, label %333

333:                                              ; preds = %330
  %334 = load ptr, ptr @posixly_correct, align 8
  %335 = icmp eq ptr %334, null
  %336 = load ptr, ptr @stderr, align 8
  %337 = load ptr, ptr %1, align 8
  %338 = select i1 %335, ptr @.str.123, ptr @.str.122
  %339 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %336, ptr noundef nonnull %338, ptr noundef %337, i32 noundef %319) #60
  br label %340

340:                                              ; preds = %333, %330
  store i32 %319, ptr @optopt, align 4
  br label %536

341:                                              ; preds = %325
  %342 = load i8, ptr %320, align 1
  %343 = icmp eq i8 %342, 87
  %344 = getelementptr inbounds i8, ptr %320, i64 1
  %345 = load i8, ptr %344, align 1
  %346 = icmp eq i8 %345, 59
  %347 = select i1 %343, i1 %346, i1 false
  br i1 %347, label %348, label %500

348:                                              ; preds = %341
  %349 = load i8, ptr %317, align 1
  %350 = icmp eq i8 %349, 0
  br i1 %350, label %353, label %351

351:                                              ; preds = %348
  store ptr %317, ptr @optarg, align 8
  %352 = add nsw i32 %326, 1
  store i32 %352, ptr @optind, align 4
  br label %371

353:                                              ; preds = %348
  %354 = icmp eq i32 %326, %0
  br i1 %354, label %355, label %366

355:                                              ; preds = %353
  %356 = load i32, ptr @opterr, align 4
  %357 = icmp eq i32 %356, 0
  br i1 %357, label %362, label %358

358:                                              ; preds = %355
  %359 = load ptr, ptr @stderr, align 8
  %360 = load ptr, ptr %1, align 8
  %361 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %359, ptr noundef nonnull @.str.124, ptr noundef %360, i32 noundef %319) #60
  br label %362

362:                                              ; preds = %358, %355
  store i32 %319, ptr @optopt, align 4
  %363 = load i8, ptr %131, align 1
  %364 = icmp eq i8 %363, 58
  %365 = select i1 %364, i32 58, i32 63
  br label %536

366:                                              ; preds = %353
  %367 = add nsw i32 %326, 1
  store i32 %367, ptr @optind, align 4
  %368 = sext i32 %326 to i64
  %369 = getelementptr inbounds ptr, ptr %1, i64 %368
  %370 = load ptr, ptr %369, align 8
  store ptr %370, ptr @optarg, align 8
  br label %371

371:                                              ; preds = %366, %351
  %372 = phi i32 [ %367, %366 ], [ %352, %351 ]
  %373 = phi ptr [ %370, %366 ], [ %317, %351 ]
  store ptr %373, ptr @nextchar, align 8
  br label %374

374:                                              ; preds = %377, %371
  %375 = phi ptr [ %373, %371 ], [ %378, %377 ]
  %376 = load i8, ptr %375, align 1
  switch i8 %376, label %377 [
    i8 0, label %379
    i8 61, label %379
  ]

377:                                              ; preds = %374
  %378 = getelementptr inbounds i8, ptr %375, i64 1
  br label %374, !llvm.loop !17

379:                                              ; preds = %374, %374
  %.lcssa4 = phi ptr [ %375, %374 ], [ %375, %374 ]
  %.lcssa3 = phi i8 [ %376, %374 ], [ %376, %374 ]
  %380 = load ptr, ptr %3, align 8
  %381 = icmp eq ptr %380, null
  br i1 %381, label %499, label %382

382:                                              ; preds = %379
  %383 = ptrtoint ptr %.lcssa4 to i64
  %384 = ptrtoint ptr %373 to i64
  %385 = sub i64 %383, %384
  %386 = and i64 %385, 4294967295
  br label %387

387:                                              ; preds = %404, %382
  %388 = phi ptr [ %380, %382 ], [ %410, %404 ]
  %389 = phi i32 [ 0, %382 ], [ %409, %404 ]
  %390 = phi i32 [ 0, %382 ], [ %407, %404 ]
  %391 = phi i32 [ 0, %382 ], [ %406, %404 ]
  %392 = phi ptr [ null, %382 ], [ %405, %404 ]
  %393 = phi ptr [ %3, %382 ], [ %408, %404 ]
  %394 = tail call i32 @strncmp(ptr noundef nonnull %388, ptr noundef %373, i64 noundef %385) #57
  %395 = icmp eq i32 %394, 0
  br i1 %395, label %396, label %404

396:                                              ; preds = %387
  %397 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %388) #57
  %398 = icmp eq i64 %386, %397
  br i1 %398, label %434, label %399

399:                                              ; preds = %396
  %400 = icmp eq ptr %392, null
  %401 = select i1 %400, ptr %393, ptr %392
  %402 = select i1 %400, i32 %391, i32 1
  %403 = select i1 %400, i32 %389, i32 %390
  br label %404

404:                                              ; preds = %399, %387
  %405 = phi ptr [ %392, %387 ], [ %401, %399 ]
  %406 = phi i32 [ %391, %387 ], [ %402, %399 ]
  %407 = phi i32 [ %390, %387 ], [ %403, %399 ]
  %408 = getelementptr inbounds %struct.option, ptr %393, i64 1
  %409 = add nuw nsw i32 %389, 1
  %410 = load ptr, ptr %408, align 8
  %411 = icmp eq ptr %410, null
  br i1 %411, label %412, label %387, !llvm.loop !18

412:                                              ; preds = %404
  %.lcssa2 = phi ptr [ %405, %404 ]
  %.lcssa1 = phi i32 [ %406, %404 ]
  %.lcssa = phi i32 [ %407, %404 ]
  %413 = icmp eq i32 %.lcssa1, 0
  br i1 %413, label %432, label %414

414:                                              ; preds = %412
  %415 = load i32, ptr @opterr, align 4
  %416 = icmp eq i32 %415, 0
  br i1 %416, label %426, label %417

417:                                              ; preds = %414
  %418 = load ptr, ptr @stderr, align 8
  %419 = load ptr, ptr %1, align 8
  %420 = sext i32 %372 to i64
  %421 = getelementptr inbounds ptr, ptr %1, i64 %420
  %422 = load ptr, ptr %421, align 8
  %423 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %418, ptr noundef nonnull @.str.125, ptr noundef %419, ptr noundef %422) #60
  %424 = load ptr, ptr @nextchar, align 8
  %425 = load i32, ptr @optind, align 4
  br label %426

426:                                              ; preds = %417, %414
  %427 = phi i32 [ %425, %417 ], [ %372, %414 ]
  %428 = phi ptr [ %424, %417 ], [ %373, %414 ]
  %429 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %428) #57
  %430 = getelementptr inbounds i8, ptr %428, i64 %429
  store ptr %430, ptr @nextchar, align 8
  %431 = add nsw i32 %427, 1
  store i32 %431, ptr @optind, align 4
  br label %536

432:                                              ; preds = %412
  %433 = icmp eq ptr %.lcssa2, null
  br i1 %433, label %499, label %434

434:                                              ; preds = %432, %396
  %435 = phi ptr [ %.lcssa2, %432 ], [ %393, %396 ]
  %436 = phi i32 [ %.lcssa, %432 ], [ %389, %396 ]
  %437 = icmp eq i8 %.lcssa3, 0
  %438 = getelementptr inbounds %struct.option, ptr %435, i64 0, i32 1
  %439 = load i32, ptr %438, align 8
  br i1 %437, label %457, label %440

440:                                              ; preds = %434
  %441 = icmp eq i32 %439, 0
  br i1 %441, label %444, label %442

442:                                              ; preds = %440
  %443 = getelementptr inbounds i8, ptr %.lcssa4, i64 1
  br label %485

444:                                              ; preds = %440
  %445 = load i32, ptr @opterr, align 4
  %446 = icmp eq i32 %445, 0
  br i1 %446, label %453, label %447

447:                                              ; preds = %444
  %448 = load ptr, ptr @stderr, align 8
  %449 = load ptr, ptr %1, align 8
  %450 = load ptr, ptr %435, align 8
  %451 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %448, ptr noundef nonnull @.str.126, ptr noundef %449, ptr noundef %450) #60
  %452 = load ptr, ptr @nextchar, align 8
  br label %453

453:                                              ; preds = %447, %444
  %454 = phi ptr [ %452, %447 ], [ %373, %444 ]
  %455 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %454) #57
  %456 = getelementptr inbounds i8, ptr %454, i64 %455
  store ptr %456, ptr @nextchar, align 8
  br label %536

457:                                              ; preds = %434
  %458 = icmp eq i32 %439, 1
  br i1 %458, label %459, label %487

459:                                              ; preds = %457
  %460 = icmp slt i32 %372, %0
  br i1 %460, label %461, label %466

461:                                              ; preds = %459
  %462 = add nsw i32 %372, 1
  store i32 %462, ptr @optind, align 4
  %463 = sext i32 %372 to i64
  %464 = getelementptr inbounds ptr, ptr %1, i64 %463
  %465 = load ptr, ptr %464, align 8
  br label %485

466:                                              ; preds = %459
  %467 = load i32, ptr @opterr, align 4
  %468 = icmp eq i32 %467, 0
  br i1 %468, label %478, label %469

469:                                              ; preds = %466
  %470 = load ptr, ptr @stderr, align 8
  %471 = load ptr, ptr %1, align 8
  %472 = add nsw i32 %372, -1
  %473 = sext i32 %472 to i64
  %474 = getelementptr inbounds ptr, ptr %1, i64 %473
  %475 = load ptr, ptr %474, align 8
  %476 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %470, ptr noundef nonnull @.str.119, ptr noundef %471, ptr noundef %475) #60
  %477 = load ptr, ptr @nextchar, align 8
  br label %478

478:                                              ; preds = %469, %466
  %479 = phi ptr [ %477, %469 ], [ %373, %466 ]
  %480 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %479) #57
  %481 = getelementptr inbounds i8, ptr %479, i64 %480
  store ptr %481, ptr @nextchar, align 8
  %482 = load i8, ptr %131, align 1
  %483 = icmp eq i8 %482, 58
  %484 = select i1 %483, i32 58, i32 63
  br label %536

485:                                              ; preds = %461, %442
  %486 = phi ptr [ %465, %461 ], [ %443, %442 ]
  store ptr %486, ptr @optarg, align 8
  br label %487

487:                                              ; preds = %485, %457
  %488 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %373) #57
  %489 = getelementptr inbounds i8, ptr %373, i64 %488
  store ptr %489, ptr @nextchar, align 8
  %490 = icmp eq ptr %4, null
  br i1 %490, label %492, label %491

491:                                              ; preds = %487
  store i32 %436, ptr %4, align 4
  br label %492

492:                                              ; preds = %491, %487
  %493 = getelementptr inbounds %struct.option, ptr %435, i64 0, i32 2
  %494 = load ptr, ptr %493, align 8
  %495 = icmp eq ptr %494, null
  %496 = getelementptr inbounds %struct.option, ptr %435, i64 0, i32 3
  %497 = load i32, ptr %496, align 8
  br i1 %495, label %536, label %498

498:                                              ; preds = %492
  store i32 %497, ptr %494, align 4
  br label %536

499:                                              ; preds = %432, %379
  store ptr null, ptr @nextchar, align 8
  br label %536

500:                                              ; preds = %341
  %501 = icmp eq i8 %345, 58
  br i1 %501, label %502, label %536

502:                                              ; preds = %500
  %503 = getelementptr inbounds i8, ptr %320, i64 2
  %504 = load i8, ptr %503, align 1
  %505 = icmp eq i8 %504, 58
  %506 = load i8, ptr %317, align 1
  %507 = icmp eq i8 %506, 0
  br i1 %505, label %508, label %513

508:                                              ; preds = %502
  br i1 %507, label %511, label %509

509:                                              ; preds = %508
  %510 = add nsw i32 %326, 1
  store i32 %510, ptr @optind, align 4
  br label %511

511:                                              ; preds = %509, %508
  %512 = phi ptr [ %317, %509 ], [ null, %508 ]
  store ptr %512, ptr @optarg, align 8
  store ptr null, ptr @nextchar, align 8
  br label %536

513:                                              ; preds = %502
  br i1 %507, label %516, label %514

514:                                              ; preds = %513
  store ptr %317, ptr @optarg, align 8
  %515 = add nsw i32 %326, 1
  store i32 %515, ptr @optind, align 4
  br label %534

516:                                              ; preds = %513
  %517 = icmp eq i32 %326, %0
  br i1 %517, label %518, label %529

518:                                              ; preds = %516
  %519 = load i32, ptr @opterr, align 4
  %520 = icmp eq i32 %519, 0
  br i1 %520, label %525, label %521

521:                                              ; preds = %518
  %522 = load ptr, ptr @stderr, align 8
  %523 = load ptr, ptr %1, align 8
  %524 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %522, ptr noundef nonnull @.str.124, ptr noundef %523, i32 noundef %319) #60
  br label %525

525:                                              ; preds = %521, %518
  store i32 %319, ptr @optopt, align 4
  %526 = load i8, ptr %131, align 1
  %527 = icmp eq i8 %526, 58
  %528 = select i1 %527, i32 58, i32 63
  br label %534

529:                                              ; preds = %516
  %530 = add nsw i32 %326, 1
  store i32 %530, ptr @optind, align 4
  %531 = sext i32 %326 to i64
  %532 = getelementptr inbounds ptr, ptr %1, i64 %531
  %533 = load ptr, ptr %532, align 8
  store ptr %533, ptr @optarg, align 8
  br label %534

534:                                              ; preds = %529, %525, %514
  %535 = phi i32 [ %528, %525 ], [ %319, %529 ], [ %319, %514 ]
  store ptr null, ptr @nextchar, align 8
  br label %536

536:                                              ; preds = %534, %511, %500, %499, %498, %492, %478, %453, %426, %362, %340, %313, %284, %278, %262, %239, %203, %122, %120, %109, %105
  %537 = phi i32 [ 1, %122 ], [ -1, %109 ], [ -1, %105 ], [ -1, %120 ], [ 63, %340 ], [ 0, %498 ], [ 63, %453 ], [ %484, %478 ], [ 87, %499 ], [ 63, %426 ], [ %365, %362 ], [ 63, %203 ], [ 63, %313 ], [ %270, %262 ], [ 63, %239 ], [ 0, %284 ], [ %319, %511 ], [ %535, %534 ], [ %319, %500 ], [ %283, %278 ], [ %497, %492 ]
  ret i32 %537
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: read)
declare i32 @strcmp(ptr nocapture noundef, ptr nocapture noundef) local_unnamed_addr #4

; Function Attrs: nofree nounwind optsize
declare noundef i64 @fwrite(ptr nocapture noundef, i64 noundef, i64 noundef, ptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: nofree nounwind optsize
declare noundef i32 @__isoc99_sscanf(ptr nocapture noundef readonly, ptr nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: nofree nounwind optsize
declare noundef i32 @fprintf(ptr nocapture noundef, ptr nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(read)
declare double @atof(ptr nocapture noundef) local_unnamed_addr #6

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: readwrite, inaccessiblemem: readwrite)
declare noalias ptr @strdup(ptr nocapture noundef readonly) local_unnamed_addr #7

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: read)
declare ptr @strchr(ptr noundef, i32 noundef) local_unnamed_addr #4

; Function Attrs: mustprogress nounwind optsize willreturn allockind("realloc") allocsize(1) memory(argmem: readwrite, inaccessiblemem: readwrite)
declare noalias noundef ptr @realloc(ptr allocptr nocapture noundef, i64 noundef) local_unnamed_addr #8

; Function Attrs: noreturn nounwind optsize
declare void @exit(i32 noundef) local_unnamed_addr #9

; Function Attrs: nofree nounwind optsize uwtable
define internal fastcc void @usage() unnamed_addr #3 {
  %1 = load ptr, ptr @stdout, align 8
  %2 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %1, ptr noundef nonnull @.str.171, ptr noundef nonnull @.str.32, ptr noundef nonnull @.str.33) #56
  ret void
}

; Function Attrs: mustprogress nounwind optsize willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) local_unnamed_addr #10

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: nounwind optsize
declare void @srand(i32 noundef) local_unnamed_addr #11

; Function Attrs: nounwind optsize
declare i32 @rand() local_unnamed_addr #11

; Function Attrs: nofree nounwind optsize uwtable
define internal void @update_statistics_full(ptr nocapture readnone %0, i64 noundef %1, i64 noundef %2, double noundef %3) #3 {
  %5 = sitofp i64 %2 to double
  %6 = sitofp i64 %1 to double
  %7 = fdiv double %5, %6
  %8 = fdiv double %3, %7
  %9 = fsub double %8, %3
  %10 = fptosi double %9 to i32
  %11 = sdiv i32 %10, 60
  %12 = sitofp i32 %11 to double
  %13 = fmul double %12, 6.000000e+01
  %14 = fsub double %9, %13
  %15 = fptosi double %14 to i32
  %16 = load ptr, ptr @stderr, align 8
  %17 = tail call i32 @fputc(i32 13, ptr %16)
  %18 = load ptr, ptr @stderr, align 8
  %19 = fmul double %5, 1.000000e+02
  %20 = fdiv double %19, %6
  %21 = load i32, ptr @update_statistics_full.spinpoint, align 4
  %22 = add nsw i32 %21, 1
  store i32 %22, ptr @update_statistics_full.spinpoint, align 4
  %23 = srem i32 %21, 4
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds i8, ptr @.str.90, i64 %24
  %26 = load i8, ptr %25, align 1
  %27 = sext i8 %26 to i32
  %28 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %18, ptr noundef nonnull @.str.92, double noundef %20, i32 noundef %11, i32 noundef %15, i32 noundef %27) #60
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @start_encode_full(ptr noundef %0, ptr noundef %1, i32 noundef %2, float noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6, i32 noundef %7) #3 {
  %9 = icmp sgt i32 %2, 0
  br i1 %9, label %10, label %25

10:                                               ; preds = %8
  %11 = icmp sgt i32 %5, 0
  %12 = load ptr, ptr @stderr, align 8
  %13 = icmp eq ptr %0, null
  %14 = select i1 %13, ptr @.str.103, ptr @.str.102
  %15 = select i1 %13, ptr @.str.104, ptr %0
  %16 = icmp eq ptr %1, null
  %17 = select i1 %16, ptr @.str.103, ptr @.str.102
  %18 = select i1 %16, ptr @.str.105, ptr %1
  br i1 %11, label %19, label %23

19:                                               ; preds = %10
  %20 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %12, ptr noundef nonnull @.str.101, ptr noundef nonnull %14, ptr noundef nonnull %15, ptr noundef nonnull %14, ptr noundef nonnull %17, ptr noundef nonnull %18, ptr noundef nonnull %17, i32 noundef %2) #60
  tail call fastcc void @print_brconstraints(i32 noundef %6, i32 noundef %7) #56
  %21 = load ptr, ptr @stderr, align 8
  %22 = tail call i64 @fwrite(ptr nonnull @.str.106, i64 40, i64 1, ptr %21) #58
  br label %55

23:                                               ; preds = %10
  %24 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %12, ptr noundef nonnull @.str.107, ptr noundef nonnull %14, ptr noundef nonnull %15, ptr noundef nonnull %14, ptr noundef nonnull %17, ptr noundef nonnull %18, ptr noundef nonnull %17, i32 noundef %2) #60
  br label %55

25:                                               ; preds = %8
  %26 = icmp sgt i32 %4, 0
  br i1 %26, label %27, label %44

27:                                               ; preds = %25
  %28 = icmp sgt i32 %5, 0
  %29 = load ptr, ptr @stderr, align 8
  %30 = icmp eq ptr %0, null
  %31 = select i1 %30, ptr @.str.103, ptr @.str.102
  %32 = select i1 %30, ptr @.str.104, ptr %0
  %33 = icmp eq ptr %1, null
  %34 = select i1 %33, ptr @.str.103, ptr @.str.102
  %35 = select i1 %33, ptr @.str.105, ptr %1
  %36 = fmul float %3, 1.000000e+01
  %37 = fpext float %36 to double
  br i1 %28, label %38, label %42

38:                                               ; preds = %27
  %39 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %29, ptr noundef nonnull @.str.108, ptr noundef nonnull %31, ptr noundef nonnull %32, ptr noundef nonnull %31, ptr noundef nonnull %34, ptr noundef nonnull %35, ptr noundef nonnull %34, double noundef %37) #60
  tail call fastcc void @print_brconstraints(i32 noundef %6, i32 noundef %7) #56
  %40 = load ptr, ptr @stderr, align 8
  %41 = tail call i32 @fputc(i32 10, ptr %40)
  br label %55

42:                                               ; preds = %27
  %43 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %29, ptr noundef nonnull @.str.110, ptr noundef nonnull %31, ptr noundef nonnull %32, ptr noundef nonnull %31, ptr noundef nonnull %34, ptr noundef nonnull %35, ptr noundef nonnull %34, double noundef %37) #60
  br label %55

44:                                               ; preds = %25
  %45 = load ptr, ptr @stderr, align 8
  %46 = icmp eq ptr %0, null
  %47 = select i1 %46, ptr @.str.103, ptr @.str.102
  %48 = select i1 %46, ptr @.str.104, ptr %0
  %49 = icmp eq ptr %1, null
  %50 = select i1 %49, ptr @.str.103, ptr @.str.102
  %51 = select i1 %49, ptr @.str.105, ptr %1
  %52 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %45, ptr noundef nonnull @.str.111, ptr noundef nonnull %47, ptr noundef nonnull %48, ptr noundef nonnull %47, ptr noundef nonnull %50, ptr noundef nonnull %51, ptr noundef nonnull %50) #60
  tail call fastcc void @print_brconstraints(i32 noundef %6, i32 noundef %7) #56
  %53 = load ptr, ptr @stderr, align 8
  %54 = tail call i32 @fputc(i32 10, ptr %53)
  br label %55

55:                                               ; preds = %44, %42, %38, %23, %19
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @final_statistics(ptr noundef %0, double noundef %1, i32 noundef %2, i64 noundef %3, i64 noundef %4) #3 {
  %6 = icmp eq ptr %0, null
  %7 = load ptr, ptr @stderr, align 8
  br i1 %6, label %10, label %8

8:                                                ; preds = %5
  %9 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %7, ptr noundef nonnull @.str.94, ptr noundef nonnull %0) #60
  br label %12

10:                                               ; preds = %5
  %11 = tail call i64 @fwrite(ptr nonnull @.str.95, i64 17, i64 1, ptr %7) #58
  br label %12

12:                                               ; preds = %10, %8
  %13 = sitofp i64 %3 to double
  %14 = sitofp i32 %2 to double
  %15 = fdiv double %13, %14
  %16 = fdiv double %15, %1
  %17 = load ptr, ptr @stderr, align 8
  %18 = sext i32 %2 to i64
  %19 = sdiv i64 %3, %18
  %20 = sdiv i64 %19, 60
  %21 = trunc i64 %20 to i32
  %22 = sitofp i64 %19 to double
  %23 = sitofp i64 %20 to double
  %24 = fmul double %23, 6.000000e+01
  %25 = fsub double %22, %24
  %26 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %17, ptr noundef nonnull @.str.96, i32 noundef %21, double noundef %25) #60
  %27 = load ptr, ptr @stderr, align 8
  %28 = fdiv double %1, 6.000000e+01
  %29 = fptosi double %28 to i32
  %30 = tail call double @llvm.floor.f64(double %28)
  %31 = fmul double %30, 6.000000e+01
  %32 = fsub double %1, %31
  %33 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %27, ptr noundef nonnull @.str.97, i32 noundef %29, double noundef %32) #60
  %34 = load ptr, ptr @stderr, align 8
  %35 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %34, ptr noundef nonnull @.str.98, double noundef %16) #60
  %36 = load ptr, ptr @stderr, align 8
  %37 = sitofp i64 %4 to double
  %38 = fdiv double %37, %15
  %39 = fmul double %38, 8.000000e-03
  %40 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %36, ptr noundef nonnull @.str.99, double noundef %39) #60
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @encode_error(ptr noundef %0) #3 {
  %2 = load ptr, ptr @stderr, align 8
  %3 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %2, ptr noundef nonnull @.str.100, ptr noundef %0) #60
  ret void
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #12

; Function Attrs: mustprogress nounwind optsize willreturn uwtable
define internal void @vorbis_comment_add(ptr nocapture noundef %0, ptr nocapture noundef readonly %1) #13 {
  %3 = load ptr, ptr %0, align 8
  %4 = getelementptr inbounds %struct.vorbis_comment, ptr %0, i64 0, i32 2
  %5 = load i32, ptr %4, align 8
  %6 = add nsw i32 %5, 2
  %7 = sext i32 %6 to i64
  %8 = shl nsw i64 %7, 3
  %9 = tail call ptr @realloc(ptr noundef %3, i64 noundef %8) #61
  store ptr %9, ptr %0, align 8
  %10 = getelementptr inbounds %struct.vorbis_comment, ptr %0, i64 0, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = load i32, ptr %4, align 8
  %13 = add nsw i32 %12, 2
  %14 = sext i32 %13 to i64
  %15 = shl nsw i64 %14, 2
  %16 = tail call ptr @realloc(ptr noundef %11, i64 noundef %15) #61
  store ptr %16, ptr %10, align 8
  %17 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %1) #57
  %18 = trunc i64 %17 to i32
  %19 = load i32, ptr %4, align 8
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, ptr %16, i64 %20
  store i32 %18, ptr %21, align 4
  %22 = shl i64 %17, 32
  %23 = add i64 %22, 4294967296
  %24 = ashr exact i64 %23, 32
  %25 = tail call noalias ptr @malloc(i64 noundef %24) #64
  %26 = load ptr, ptr %0, align 8
  %27 = getelementptr inbounds ptr, ptr %26, i64 %20
  store ptr %25, ptr %27, align 8
  %28 = load ptr, ptr %0, align 8
  %29 = load i32, ptr %4, align 8
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds ptr, ptr %28, i64 %30
  %32 = load ptr, ptr %31, align 8
  %33 = tail call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %32, ptr noundef nonnull dereferenceable(1) %1) #59
  %34 = load i32, ptr %4, align 8
  %35 = add nsw i32 %34, 1
  store i32 %35, ptr %4, align 8
  %36 = load ptr, ptr %0, align 8
  %37 = sext i32 %35 to i64
  %38 = getelementptr inbounds ptr, ptr %36, i64 %37
  store ptr null, ptr %38, align 8
  ret void
}

; Function Attrs: mustprogress nounwind optsize willreturn uwtable
define internal void @vorbis_comment_add_tag(ptr nocapture noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2) #13 {
  %4 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %1) #57
  %5 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %2) #57
  %6 = add i64 %4, 2
  %7 = add i64 %6, %5
  %8 = alloca i8, i64 %7, align 16
  %9 = call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %8, ptr noundef nonnull dereferenceable(1) %1) #59
  %10 = call i64 @strlen(ptr nonnull dereferenceable(1) %8)
  %11 = getelementptr inbounds i8, ptr %8, i64 %10
  store i16 61, ptr %11, align 1
  %12 = call ptr @strcat(ptr noundef nonnull dereferenceable(1) %8, ptr noundef nonnull dereferenceable(1) %2) #59
  call void @vorbis_comment_add(ptr noundef %0, ptr noundef nonnull %8) #56
  ret void
}

; Function Attrs: nofree nounwind optsize
declare noalias noundef ptr @fopen(ptr nocapture noundef readonly, ptr nocapture noundef readonly) local_unnamed_addr #5

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(none)
declare ptr @__errno_location() local_unnamed_addr #14

; Function Attrs: nounwind optsize
declare ptr @strerror(i32 noundef) local_unnamed_addr #11

; Function Attrs: mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #15

; Function Attrs: nofree nounwind optsize uwtable
define internal i64 @wav_read(ptr nocapture noundef %0, ptr nocapture noundef readonly %1, i32 noundef %2) #3 {
  %4 = getelementptr inbounds %struct.wavfile, ptr %0, i64 0, i32 1
  %5 = load i16, ptr %4, align 2
  %6 = sdiv i16 %5, 8
  %7 = sext i16 %6 to i32
  %8 = mul nsw i32 %7, %2
  %9 = load i16, ptr %0, align 8
  %10 = sext i16 %9 to i32
  %11 = mul nsw i32 %8, %10
  %12 = sext i32 %11 to i64
  %13 = alloca i8, i64 %12, align 16
  %14 = getelementptr inbounds %struct.wavfile, ptr %0, i64 0, i32 4
  %15 = load ptr, ptr %14, align 8
  %16 = call i64 @fread(ptr noundef nonnull %13, i64 noundef 1, i64 noundef %12, ptr noundef %15) #56
  %17 = getelementptr inbounds %struct.wavfile, ptr %0, i64 0, i32 2
  %18 = load i64, ptr %17, align 8
  %19 = icmp eq i64 %18, 0
  %20 = load i16, ptr %0, align 8
  %21 = getelementptr inbounds %struct.wavfile, ptr %0, i64 0, i32 3
  %22 = load i64, ptr %21, align 8
  %23 = sext i16 %20 to i32
  %24 = mul nsw i32 %23, %7
  %25 = sext i32 %24 to i64
  br i1 %19, label %33, label %26

26:                                               ; preds = %3
  %27 = sdiv i64 %16, %25
  %28 = add nsw i64 %27, %22
  %29 = icmp sgt i64 %28, %18
  br i1 %29, label %30, label %33

30:                                               ; preds = %26
  %31 = sub nsw i64 %18, %22
  %32 = mul nsw i64 %31, %25
  br label %33

33:                                               ; preds = %30, %26, %3
  %34 = phi i64 [ %32, %30 ], [ %16, %26 ], [ %16, %3 ]
  %35 = sdiv i64 %34, %25
  %36 = getelementptr inbounds %struct.wavfile, ptr %0, i64 0, i32 3
  %37 = add nsw i64 %22, %35
  store i64 %37, ptr %36, align 8
  %38 = load i16, ptr %4, align 2
  switch i16 %38, label %209 [
    i16 8, label %39
    i16 16, label %70
    i16 24, label %155
  ]

39:                                               ; preds = %33
  %40 = icmp sgt i64 %35, 0
  br i1 %40, label %41, label %213

41:                                               ; preds = %66, %39
  %42 = phi i16 [ %67, %66 ], [ %20, %39 ]
  %43 = phi i64 [ %68, %66 ], [ 0, %39 ]
  %44 = icmp sgt i16 %42, 0
  br i1 %44, label %45, label %66

45:                                               ; preds = %45, %41
  %46 = phi i64 [ %62, %45 ], [ 0, %41 ]
  %47 = phi i16 [ %63, %45 ], [ %42, %41 ]
  %48 = sext i16 %47 to i64
  %49 = mul i64 %43, %48
  %50 = add i64 %49, %46
  %51 = shl i64 %50, 32
  %52 = ashr exact i64 %51, 32
  %53 = getelementptr inbounds i8, ptr %13, i64 %52
  %54 = load i8, ptr %53, align 1
  %55 = zext i8 %54 to i32
  %56 = add nsw i32 %55, -128
  %57 = sitofp i32 %56 to float
  %58 = fmul float %57, 7.812500e-03
  %59 = getelementptr inbounds ptr, ptr %1, i64 %46
  %60 = load ptr, ptr %59, align 8
  %61 = getelementptr inbounds float, ptr %60, i64 %43
  store float %58, ptr %61, align 4
  %62 = add nuw nsw i64 %46, 1
  %63 = load i16, ptr %0, align 8
  %64 = sext i16 %63 to i64
  %65 = icmp slt i64 %62, %64
  br i1 %65, label %45, label %66, !llvm.loop !19

66:                                               ; preds = %45, %41
  %67 = phi i16 [ %42, %41 ], [ %63, %45 ]
  %68 = add nuw nsw i64 %43, 1
  %69 = icmp eq i64 %68, %35
  br i1 %69, label %213, label %41, !llvm.loop !20

70:                                               ; preds = %33
  %71 = getelementptr inbounds %struct.wavfile, ptr %0, i64 0, i32 5
  %72 = load i16, ptr %71, align 8
  %73 = icmp eq i16 %72, 0
  %74 = icmp sgt i64 %35, 0
  br i1 %73, label %76, label %75

75:                                               ; preds = %70
  br i1 %74, label %116, label %213

76:                                               ; preds = %70
  br i1 %74, label %77, label %213

77:                                               ; preds = %112, %76
  %78 = phi i16 [ %113, %112 ], [ %20, %76 ]
  %79 = phi i64 [ %114, %112 ], [ 0, %76 ]
  %80 = icmp sgt i16 %78, 0
  br i1 %80, label %81, label %112

81:                                               ; preds = %77
  %82 = trunc i64 %79 to i32
  %83 = shl i32 %82, 1
  br label %84

84:                                               ; preds = %84, %81
  %85 = phi i64 [ 0, %81 ], [ %108, %84 ]
  %86 = phi i16 [ %78, %81 ], [ %109, %84 ]
  %87 = sext i16 %86 to i32
  %88 = mul nsw i32 %83, %87
  %89 = trunc i64 %85 to i32
  %90 = shl i32 %89, 1
  %91 = add nsw i32 %88, %90
  %92 = or i32 %91, 1
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds i8, ptr %13, i64 %93
  %95 = load i8, ptr %94, align 1
  %96 = sext i8 %95 to i32
  %97 = shl nsw i32 %96, 8
  %98 = sext i32 %91 to i64
  %99 = getelementptr inbounds i8, ptr %13, i64 %98
  %100 = load i8, ptr %99, align 2
  %101 = zext i8 %100 to i32
  %102 = or i32 %97, %101
  %103 = sitofp i32 %102 to float
  %104 = fmul float %103, 0x3F00000000000000
  %105 = getelementptr inbounds ptr, ptr %1, i64 %85
  %106 = load ptr, ptr %105, align 8
  %107 = getelementptr inbounds float, ptr %106, i64 %79
  store float %104, ptr %107, align 4
  %108 = add nuw nsw i64 %85, 1
  %109 = load i16, ptr %0, align 8
  %110 = sext i16 %109 to i64
  %111 = icmp slt i64 %108, %110
  br i1 %111, label %84, label %112, !llvm.loop !21

112:                                              ; preds = %84, %77
  %113 = phi i16 [ %78, %77 ], [ %109, %84 ]
  %114 = add nuw nsw i64 %79, 1
  %115 = icmp eq i64 %114, %35
  br i1 %115, label %213, label %77, !llvm.loop !22

116:                                              ; preds = %151, %75
  %117 = phi i16 [ %152, %151 ], [ %20, %75 ]
  %118 = phi i64 [ %153, %151 ], [ 0, %75 ]
  %119 = icmp sgt i16 %117, 0
  br i1 %119, label %120, label %151

120:                                              ; preds = %116
  %121 = trunc i64 %118 to i32
  %122 = shl i32 %121, 1
  br label %123

123:                                              ; preds = %123, %120
  %124 = phi i64 [ 0, %120 ], [ %147, %123 ]
  %125 = phi i16 [ %117, %120 ], [ %148, %123 ]
  %126 = sext i16 %125 to i32
  %127 = mul nsw i32 %122, %126
  %128 = trunc i64 %124 to i32
  %129 = shl i32 %128, 1
  %130 = add nsw i32 %127, %129
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds i8, ptr %13, i64 %131
  %133 = load i8, ptr %132, align 2
  %134 = sext i8 %133 to i32
  %135 = shl nsw i32 %134, 8
  %136 = or i32 %130, 1
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds i8, ptr %13, i64 %137
  %139 = load i8, ptr %138, align 1
  %140 = zext i8 %139 to i32
  %141 = or i32 %135, %140
  %142 = sitofp i32 %141 to float
  %143 = fmul float %142, 0x3F00000000000000
  %144 = getelementptr inbounds ptr, ptr %1, i64 %124
  %145 = load ptr, ptr %144, align 8
  %146 = getelementptr inbounds float, ptr %145, i64 %118
  store float %143, ptr %146, align 4
  %147 = add nuw nsw i64 %124, 1
  %148 = load i16, ptr %0, align 8
  %149 = sext i16 %148 to i64
  %150 = icmp slt i64 %147, %149
  br i1 %150, label %123, label %151, !llvm.loop !23

151:                                              ; preds = %123, %116
  %152 = phi i16 [ %117, %116 ], [ %148, %123 ]
  %153 = add nuw nsw i64 %118, 1
  %154 = icmp eq i64 %153, %35
  br i1 %154, label %213, label %116, !llvm.loop !24

155:                                              ; preds = %33
  %156 = getelementptr inbounds %struct.wavfile, ptr %0, i64 0, i32 5
  %157 = load i16, ptr %156, align 8
  %158 = icmp eq i16 %157, 0
  br i1 %158, label %159, label %206

159:                                              ; preds = %155
  %160 = icmp sgt i64 %35, 0
  br i1 %160, label %161, label %213

161:                                              ; preds = %202, %159
  %162 = phi i16 [ %203, %202 ], [ %20, %159 ]
  %163 = phi i64 [ %204, %202 ], [ 0, %159 ]
  %164 = icmp sgt i16 %162, 0
  br i1 %164, label %165, label %202

165:                                              ; preds = %161
  %166 = trunc i64 %163 to i32
  br label %167

167:                                              ; preds = %167, %165
  %168 = phi i64 [ 0, %165 ], [ %198, %167 ]
  %169 = phi i16 [ %162, %165 ], [ %199, %167 ]
  %170 = sext i16 %169 to i32
  %171 = mul i32 %170, %166
  %172 = trunc i64 %168 to i32
  %173 = add i32 %171, %172
  %174 = mul i32 %173, 3
  %175 = add nsw i32 %174, 2
  %176 = sext i32 %175 to i64
  %177 = getelementptr inbounds i8, ptr %13, i64 %176
  %178 = load i8, ptr %177, align 1
  %179 = sext i8 %178 to i32
  %180 = shl nsw i32 %179, 16
  %181 = add nsw i32 %174, 1
  %182 = sext i32 %181 to i64
  %183 = getelementptr inbounds i8, ptr %13, i64 %182
  %184 = load i8, ptr %183, align 1
  %185 = zext i8 %184 to i32
  %186 = shl nuw nsw i32 %185, 8
  %187 = or i32 %186, %180
  %188 = sext i32 %174 to i64
  %189 = getelementptr inbounds i8, ptr %13, i64 %188
  %190 = load i8, ptr %189, align 1
  %191 = zext i8 %190 to i32
  %192 = or i32 %187, %191
  %193 = sitofp i32 %192 to float
  %194 = fmul float %193, 0x3E80000000000000
  %195 = getelementptr inbounds ptr, ptr %1, i64 %168
  %196 = load ptr, ptr %195, align 8
  %197 = getelementptr inbounds float, ptr %196, i64 %163
  store float %194, ptr %197, align 4
  %198 = add nuw nsw i64 %168, 1
  %199 = load i16, ptr %0, align 8
  %200 = sext i16 %199 to i64
  %201 = icmp slt i64 %198, %200
  br i1 %201, label %167, label %202, !llvm.loop !25

202:                                              ; preds = %167, %161
  %203 = phi i16 [ %162, %161 ], [ %199, %167 ]
  %204 = add nuw nsw i64 %163, 1
  %205 = icmp eq i64 %204, %35
  br i1 %205, label %213, label %161, !llvm.loop !26

206:                                              ; preds = %155
  %207 = load ptr, ptr @stderr, align 8
  %208 = tail call i64 @fwrite(ptr nonnull @.str.80, i64 65, i64 1, ptr %207) #58
  br label %213

209:                                              ; preds = %33
  %210 = sext i16 %38 to i32
  %211 = load ptr, ptr @stderr, align 8
  %212 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %211, ptr noundef nonnull @.str.81, i32 noundef %210) #60
  br label %213

213:                                              ; preds = %209, %206, %202, %159, %151, %112, %76, %75, %66, %39
  %214 = phi i64 [ 0, %206 ], [ 0, %209 ], [ %35, %39 ], [ %35, %76 ], [ %35, %75 ], [ %35, %159 ], [ %35, %66 ], [ %35, %112 ], [ %35, %151 ], [ %35, %202 ]
  ret i64 %214
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @open_audio_file(ptr noundef %0, ptr noundef %1) #0 {
  %3 = load ptr, ptr @formats, align 16
  %4 = icmp eq ptr %3, null
  br i1 %4, label %46, label %5

5:                                                ; preds = %30, %2
  %6 = phi i64 [ %32, %30 ], [ 0, %2 ]
  %7 = phi ptr [ %33, %30 ], [ @formats, %2 ]
  %8 = phi i32 [ %31, %30 ], [ 0, %2 ]
  %9 = phi i32 [ %19, %30 ], [ 0, %2 ]
  %10 = phi ptr [ %18, %30 ], [ null, %2 ]
  %11 = getelementptr inbounds [3 x %struct.input_format], ptr @formats, i64 0, i64 %6, i32 1
  %12 = load i32, ptr %11, align 8
  %13 = icmp slt i32 %12, %9
  br i1 %13, label %17, label %14

14:                                               ; preds = %5
  %15 = zext i32 %12 to i64
  %16 = tail call ptr @realloc(ptr noundef %10, i64 noundef %15) #61
  br label %17

17:                                               ; preds = %14, %5
  %18 = phi ptr [ %16, %14 ], [ %10, %5 ]
  %19 = phi i32 [ %12, %14 ], [ %9, %5 ]
  %20 = icmp sgt i32 %12, %8
  br i1 %20, label %21, label %36

21:                                               ; preds = %17
  %22 = sext i32 %8 to i64
  %23 = getelementptr inbounds i8, ptr %18, i64 %22
  %24 = sub nsw i32 %19, %8
  %25 = sext i32 %24 to i64
  %26 = tail call i64 @fread(ptr noundef %23, i64 noundef 1, i64 noundef %25, ptr noundef %0) #56
  %27 = trunc i64 %26 to i32
  %28 = add nsw i32 %8, %27
  %29 = icmp slt i32 %28, %12
  br i1 %29, label %30, label %36

30:                                               ; preds = %41, %36, %21
  %31 = phi i32 [ %28, %21 ], [ %37, %41 ], [ %37, %36 ]
  %32 = add nuw i64 %6, 1
  %33 = getelementptr inbounds [3 x %struct.input_format], ptr @formats, i64 0, i64 %32
  %34 = load ptr, ptr %33, align 16
  %35 = icmp eq ptr %34, null
  br i1 %35, label %46, label %5, !llvm.loop !27

36:                                               ; preds = %21, %17
  %37 = phi i32 [ %28, %21 ], [ %8, %17 ]
  %38 = load ptr, ptr %7, align 16
  %39 = tail call i32 %38(ptr noundef %18, i32 noundef %37) #59
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %30, label %41

41:                                               ; preds = %36
  %42 = getelementptr inbounds [3 x %struct.input_format], ptr @formats, i64 0, i64 %6, i32 2
  %43 = load ptr, ptr %42, align 16
  %44 = tail call i32 %43(ptr noundef %0, ptr noundef %1, ptr noundef %18, i32 noundef %37) #59
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %30, label %46

46:                                               ; preds = %41, %30, %2
  %47 = phi ptr [ null, %2 ], [ %18, %41 ], [ %18, %30 ]
  %48 = phi ptr [ null, %2 ], [ null, %30 ], [ %7, %41 ]
  tail call void @free(ptr noundef %47) #59
  ret ptr %48
}

; Function Attrs: nofree nounwind optsize
declare noundef i32 @fclose(ptr nocapture noundef) #5

; Function Attrs: mustprogress nofree nounwind optsize willreturn allockind("alloc,zeroed") allocsize(0,1) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @calloc(i64 noundef, i64 noundef) local_unnamed_addr #16

; Function Attrs: nofree nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal fastcc i32 @strncpy_filtered(ptr noundef %0, ptr nocapture noundef readonly %1, i32 noundef %2, ptr noundef %3, ptr noundef readonly %4) unnamed_addr #17 {
  %6 = icmp eq ptr %3, null
  br i1 %6, label %10, label %7

7:                                                ; preds = %5
  %8 = load i8, ptr %3, align 1
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %17

10:                                               ; preds = %7, %5
  %11 = add nsw i32 %2, -1
  %12 = sext i32 %11 to i64
  %13 = tail call ptr @strncpy(ptr noundef %0, ptr noundef %1, i64 noundef %12) #59
  %14 = getelementptr inbounds i8, ptr %0, i64 %12
  store i8 0, ptr %14, align 1
  %15 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %0) #57
  %16 = trunc i64 %15 to i32
  br label %61

17:                                               ; preds = %7
  %18 = icmp eq ptr %4, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %17
  %20 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %4) #57
  br label %21

21:                                               ; preds = %19, %17
  %22 = phi i64 [ %20, %19 ], [ 0, %17 ]
  %23 = getelementptr inbounds i8, ptr %3, i64 %22
  %24 = add nsw i32 %2, -1
  %25 = load i8, ptr %1, align 1
  %26 = icmp ne i8 %25, 0
  %27 = icmp sgt i32 %2, 1
  %28 = and i1 %26, %27
  br i1 %28, label %29, label %58

29:                                               ; preds = %21
  %30 = ptrtoint ptr %3 to i64
  br label %31

31:                                               ; preds = %50, %29
  %32 = phi i8 [ %25, %29 ], [ %54, %50 ]
  %33 = phi i32 [ 0, %29 ], [ %52, %50 ]
  %34 = phi ptr [ %0, %29 ], [ %51, %50 ]
  %35 = phi ptr [ %1, %29 ], [ %53, %50 ]
  %36 = sext i8 %32 to i32
  %37 = tail call ptr @strchr(ptr noundef nonnull dereferenceable(1) %3, i32 noundef %36) #57
  %38 = icmp eq ptr %37, null
  br i1 %38, label %46, label %39

39:                                               ; preds = %31
  %40 = icmp ult ptr %37, %23
  br i1 %40, label %41, label %50

41:                                               ; preds = %39
  %42 = ptrtoint ptr %37 to i64
  %43 = sub i64 %42, %30
  %44 = getelementptr inbounds i8, ptr %4, i64 %43
  %45 = load i8, ptr %44, align 1
  br label %46

46:                                               ; preds = %41, %31
  %47 = phi i8 [ %45, %41 ], [ %32, %31 ]
  %48 = getelementptr inbounds i8, ptr %34, i64 1
  store i8 %47, ptr %34, align 1
  %49 = add nsw i32 %33, 1
  br label %50

50:                                               ; preds = %46, %39
  %51 = phi ptr [ %34, %39 ], [ %48, %46 ]
  %52 = phi i32 [ %33, %39 ], [ %49, %46 ]
  %53 = getelementptr inbounds i8, ptr %35, i64 1
  %54 = load i8, ptr %53, align 1
  %55 = icmp ne i8 %54, 0
  %56 = icmp slt i32 %52, %24
  %57 = select i1 %55, i1 %56, i1 false
  br i1 %57, label %31, label %58, !llvm.loop !28

58:                                               ; preds = %50, %21
  %59 = phi ptr [ %0, %21 ], [ %51, %50 ]
  %60 = phi i32 [ 0, %21 ], [ %52, %50 ]
  store i8 0, ptr %59, align 1
  br label %61

61:                                               ; preds = %58, %10
  %62 = phi i32 [ %16, %10 ], [ %60, %58 ]
  ret i32 %62
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: read)
declare ptr @strrchr(ptr noundef, i32 noundef) local_unnamed_addr #4

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: read)
declare i64 @strlen(ptr nocapture noundef) local_unnamed_addr #4

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: readwrite)
declare ptr @strncpy(ptr noalias noundef returned writeonly, ptr noalias nocapture noundef readonly, i64 noundef) local_unnamed_addr #18

; Function Attrs: nounwind optsize uwtable
define internal i32 @create_directories(ptr noundef %0) #0 {
  %2 = alloca %struct.stat, align 8
  call void @llvm.lifetime.start.p0(i64 144, ptr nonnull %2) #55
  %3 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %0) #57
  %4 = add i64 %3, 1
  %5 = tail call noalias ptr @malloc(i64 noundef %4) #64
  %6 = ptrtoint ptr %0 to i64
  %7 = getelementptr inbounds %struct.stat, ptr %2, i64 0, i32 3
  br label %8

8:                                                ; preds = %42, %1
  %9 = phi ptr [ %0, %1 ], [ %43, %42 ]
  %10 = getelementptr inbounds i8, ptr %9, i64 1
  %11 = tail call ptr @strchr(ptr nonnull dereferenceable(1) %10, i32 47)
  %12 = icmp eq ptr %11, null
  br i1 %12, label %44, label %13

13:                                               ; preds = %8
  %14 = ptrtoint ptr %11 to i64
  %15 = sub i64 %14, %6
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 1 %5, ptr align 1 %0, i64 %15, i1 false)
  %16 = getelementptr inbounds i8, ptr %5, i64 %15
  store i8 0, ptr %16, align 1
  %17 = call i32 @stat(ptr noundef %5, ptr noundef nonnull %2) #59
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %35, label %19

19:                                               ; preds = %13
  %20 = tail call ptr @__errno_location() #63
  %21 = load i32, ptr %20, align 4
  %22 = icmp eq i32 %21, 2
  br i1 %22, label %23, label %31

23:                                               ; preds = %19
  %24 = tail call i32 @mkdir(ptr noundef nonnull %5, i32 noundef 511) #59
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %42, label %26

26:                                               ; preds = %23
  %.lcssa3 = phi ptr [ %20, %23 ]
  %27 = load ptr, ptr @stderr, align 8
  %28 = load i32, ptr %.lcssa3, align 4
  %29 = tail call ptr @strerror(i32 noundef %28) #59
  %30 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %27, ptr noundef nonnull @.str.112, ptr noundef nonnull %5, ptr noundef %29) #60
  tail call void @free(ptr noundef nonnull %5) #59
  br label %45

31:                                               ; preds = %19
  %.lcssa = phi i32 [ %21, %19 ]
  %32 = load ptr, ptr @stderr, align 8
  %33 = tail call ptr @strerror(i32 noundef %.lcssa) #59
  %34 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %32, ptr noundef nonnull @.str.113, ptr noundef nonnull %5, ptr noundef %33) #60
  tail call void @free(ptr noundef nonnull %5) #59
  br label %45

35:                                               ; preds = %13
  %36 = load i32, ptr %7, align 8
  %37 = and i32 %36, 61440
  %38 = icmp eq i32 %37, 16384
  br i1 %38, label %42, label %39

39:                                               ; preds = %35
  %40 = load ptr, ptr @stderr, align 8
  %41 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %40, ptr noundef nonnull @.str.114, ptr noundef nonnull %5) #60
  tail call void @free(ptr noundef nonnull %5) #59
  br label %45

42:                                               ; preds = %35, %23
  %43 = getelementptr inbounds i8, ptr %11, i64 1
  br label %8, !llvm.loop !29

44:                                               ; preds = %8
  tail call void @free(ptr noundef %5) #59
  br label %45

45:                                               ; preds = %44, %39, %31, %26
  %46 = phi i32 [ -1, %26 ], [ -1, %31 ], [ -1, %39 ], [ 0, %44 ]
  call void @llvm.lifetime.end.p0(i64 144, ptr nonnull %2) #55
  ret i32 %46
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @setup_resample(ptr nocapture noundef %0) #0 {
  %2 = tail call noalias dereferenceable_or_null(80) ptr @calloc(i64 noundef 1, i64 noundef 80) #65
  %3 = getelementptr inbounds %struct.resampler, ptr %2, i64 0, i32 5
  store i32 4096, ptr %3, align 4
  %4 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr inbounds %struct.resampler, ptr %2, i64 0, i32 1
  store ptr %5, ptr %6, align 8
  %7 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 7
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds %struct.resampler, ptr %2, i64 0, i32 2
  store ptr %8, ptr %9, align 8
  %10 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 9
  %11 = load i32, ptr %10, align 8
  %12 = sext i32 %11 to i64
  %13 = shl nsw i64 %12, 3
  %14 = tail call noalias ptr @malloc(i64 noundef %13) #64
  %15 = getelementptr inbounds %struct.resampler, ptr %2, i64 0, i32 3
  store ptr %14, ptr %15, align 8
  %16 = getelementptr inbounds %struct.resampler, ptr %2, i64 0, i32 4
  store i32 %11, ptr %16, align 8
  %17 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 13
  %18 = load i32, ptr %17, align 8
  %19 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 10
  %20 = load i64, ptr %19, align 8
  %21 = trunc i64 %20 to i32
  %22 = tail call i32 (ptr, i32, i32, i32, i32, ...) @res_init(ptr noundef %2, i32 noundef %11, i32 noundef %18, i32 noundef %21, i32 noundef 0) #56, !range !12
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %27

24:                                               ; preds = %1
  %25 = load i32, ptr %10, align 8
  %26 = icmp sgt i32 %25, 0
  br i1 %26, label %30, label %42

27:                                               ; preds = %1
  %28 = load ptr, ptr @stderr, align 8
  %29 = tail call i64 @fwrite(ptr nonnull @.str.82, i64 30, i64 1, ptr %28) #58
  br label %58

30:                                               ; preds = %30, %24
  %31 = phi i64 [ %38, %30 ], [ 0, %24 ]
  %32 = load i32, ptr %3, align 4
  %33 = sext i32 %32 to i64
  %34 = shl nsw i64 %33, 2
  %35 = tail call noalias ptr @malloc(i64 noundef %34) #64
  %36 = load ptr, ptr %15, align 8
  %37 = getelementptr inbounds ptr, ptr %36, i64 %31
  store ptr %35, ptr %37, align 8
  %38 = add nuw nsw i64 %31, 1
  %39 = load i32, ptr %10, align 8
  %40 = sext i32 %39 to i64
  %41 = icmp slt i64 %38, %40
  br i1 %41, label %30, label %42, !llvm.loop !30

42:                                               ; preds = %30, %24
  store ptr @read_resampled, ptr %4, align 8
  store ptr %2, ptr %7, align 8
  %43 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 8
  %44 = load i64, ptr %43, align 8
  %45 = icmp eq i64 %44, 0
  %46 = load i32, ptr %17, align 8
  br i1 %45, label %56, label %47

47:                                               ; preds = %42
  %48 = sitofp i64 %44 to float
  %49 = sitofp i32 %46 to float
  %50 = load i64, ptr %19, align 8
  %51 = sitofp i64 %50 to float
  %52 = fdiv float %49, %51
  %53 = fmul float %52, %48
  %54 = fptosi float %53 to i32
  %55 = sext i32 %54 to i64
  store i64 %55, ptr %43, align 8
  br label %56

56:                                               ; preds = %47, %42
  %57 = sext i32 %46 to i64
  store i64 %57, ptr %19, align 8
  br label %58

58:                                               ; preds = %56, %27
  %59 = phi i32 [ -1, %27 ], [ 0, %56 ]
  ret i32 %59
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @setup_downmix(ptr nocapture noundef %0) #3 {
  %2 = tail call noalias dereferenceable_or_null(24) ptr @calloc(i64 noundef 1, i64 noundef 24) #65
  %3 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 9
  %4 = load i32, ptr %3, align 8
  %5 = icmp eq i32 %4, 2
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load ptr, ptr @stderr, align 8
  %8 = tail call i64 @fwrite(ptr nonnull @.str.83, i64 40, i64 1, ptr %7) #58
  br label %20

9:                                                ; preds = %1
  %10 = tail call noalias dereferenceable_or_null(16) ptr @malloc(i64 noundef 16) #64
  %11 = getelementptr inbounds %struct.downmix, ptr %2, i64 0, i32 2
  store ptr %10, ptr %11, align 8
  %12 = tail call noalias dereferenceable_or_null(16384) ptr @malloc(i64 noundef 16384) #64
  store ptr %12, ptr %10, align 8
  %13 = tail call noalias dereferenceable_or_null(16384) ptr @malloc(i64 noundef 16384) #64
  %14 = getelementptr inbounds ptr, ptr %10, i64 1
  store ptr %13, ptr %14, align 8
  %15 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 2
  %16 = load ptr, ptr %15, align 8
  store ptr %16, ptr %2, align 8
  %17 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 7
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr inbounds %struct.downmix, ptr %2, i64 0, i32 1
  store ptr %18, ptr %19, align 8
  store ptr @read_downmix, ptr %15, align 8
  store ptr %2, ptr %17, align 8
  store i32 1, ptr %3, align 8
  br label %20

20:                                               ; preds = %9, %6
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @clear_resample(ptr nocapture noundef %0) #0 {
  %2 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 7
  %3 = load ptr, ptr %2, align 8
  %4 = getelementptr inbounds %struct.resampler, ptr %3, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 2
  store ptr %5, ptr %6, align 8
  %7 = getelementptr inbounds %struct.resampler, ptr %3, i64 0, i32 2
  %8 = load ptr, ptr %7, align 8
  store ptr %8, ptr %2, align 8
  %9 = getelementptr inbounds %struct.res_state, ptr %3, i64 0, i32 4
  %10 = load ptr, ptr %9, align 8
  tail call void @free(ptr noundef %10) #59
  %11 = getelementptr inbounds %struct.res_state, ptr %3, i64 0, i32 5
  %12 = load ptr, ptr %11, align 8
  tail call void @free(ptr noundef %12) #59
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %3, i8 0, i64 40, i1 false)
  %13 = getelementptr inbounds %struct.resampler, ptr %3, i64 0, i32 4
  %14 = load i32, ptr %13, align 8
  %15 = icmp sgt i32 %14, 0
  br i1 %15, label %16, label %27

16:                                               ; preds = %1
  %17 = getelementptr inbounds %struct.resampler, ptr %3, i64 0, i32 3
  br label %18

18:                                               ; preds = %18, %16
  %19 = phi i64 [ 0, %16 ], [ %23, %18 ]
  %20 = load ptr, ptr %17, align 8
  %21 = getelementptr inbounds ptr, ptr %20, i64 %19
  %22 = load ptr, ptr %21, align 8
  tail call void @free(ptr noundef %22) #59
  %23 = add nuw nsw i64 %19, 1
  %24 = load i32, ptr %13, align 8
  %25 = sext i32 %24 to i64
  %26 = icmp slt i64 %23, %25
  br i1 %26, label %18, label %27, !llvm.loop !31

27:                                               ; preds = %18, %1
  %28 = getelementptr inbounds %struct.resampler, ptr %3, i64 0, i32 3
  %29 = load ptr, ptr %28, align 8
  tail call void @free(ptr noundef %29) #59
  tail call void @free(ptr noundef nonnull %3) #59
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i64 @read_scaler(ptr nocapture noundef readonly %0, ptr noundef %1, i32 noundef %2) #0 {
  %4 = load ptr, ptr %0, align 8
  %5 = getelementptr inbounds %struct.scaler, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = tail call i64 %4(ptr noundef %6, ptr noundef %1, i32 noundef %2) #59
  %8 = getelementptr inbounds %struct.scaler, ptr %0, i64 0, i32 2
  %9 = load i32, ptr %8, align 8
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %11, label %35

11:                                               ; preds = %3
  %12 = icmp sgt i64 %7, 0
  %13 = getelementptr inbounds %struct.scaler, ptr %0, i64 0, i32 3
  br label %14

14:                                               ; preds = %30, %11
  %15 = phi i32 [ %9, %11 ], [ %31, %30 ]
  %16 = phi i64 [ 0, %11 ], [ %32, %30 ]
  br i1 %12, label %17, label %30

17:                                               ; preds = %14
  %18 = getelementptr inbounds ptr, ptr %1, i64 %16
  br label %19

19:                                               ; preds = %19, %17
  %20 = phi i64 [ 0, %17 ], [ %26, %19 ]
  %21 = load float, ptr %13, align 4
  %22 = load ptr, ptr %18, align 8
  %23 = getelementptr inbounds float, ptr %22, i64 %20
  %24 = load float, ptr %23, align 4
  %25 = fmul float %21, %24
  store float %25, ptr %23, align 4
  %26 = add nuw nsw i64 %20, 1
  %27 = icmp eq i64 %26, %7
  br i1 %27, label %28, label %19, !llvm.loop !32

28:                                               ; preds = %19
  %29 = load i32, ptr %8, align 8
  br label %30

30:                                               ; preds = %28, %14
  %31 = phi i32 [ %29, %28 ], [ %15, %14 ]
  %32 = add nuw nsw i64 %16, 1
  %33 = sext i32 %31 to i64
  %34 = icmp slt i64 %32, %33
  br i1 %34, label %14, label %35, !llvm.loop !33

35:                                               ; preds = %30, %3
  ret i64 %7
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @update_statistics_notime(ptr nocapture readnone %0, i64 %1, i64 %2, double noundef %3) #3 {
  %5 = load ptr, ptr @stderr, align 8
  %6 = tail call i32 @fputc(i32 13, ptr %5)
  %7 = load ptr, ptr @stderr, align 8
  %8 = fptosi double %3 to i32
  %9 = sdiv i32 %8, 60
  %10 = sitofp i32 %9 to double
  %11 = fmul double %10, 6.000000e+01
  %12 = fsub double %3, %11
  %13 = fptosi double %12 to i32
  %14 = load i32, ptr @update_statistics_notime.spinpoint, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, ptr @update_statistics_notime.spinpoint, align 4
  %16 = srem i32 %14, 4
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds i8, ptr @.str.90, i64 %17
  %19 = load i8, ptr %18, align 1
  %20 = sext i8 %19 to i32
  %21 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %7, ptr noundef nonnull @.str.93, i32 noundef %9, i32 noundef %13, i32 noundef %20) #60
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal void @start_encode_null(ptr nocapture %0, ptr nocapture %1, i32 %2, float %3, i32 %4, i32 %5, i32 %6, i32 %7) #19 {
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal void @update_statistics_null(ptr nocapture %0, i64 %1, i64 %2, double %3) #19 {
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal void @final_statistics_null(ptr nocapture %0, double %1, i32 %2, i64 %3, i64 %4) #19 {
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @oe_encode(ptr nocapture noundef %0) #0 {
  %2 = alloca %struct.ovectl_ratemanage_arg, align 8
  %3 = alloca double, align 8
  %4 = alloca i64, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca %struct.ogg_stream_state, align 8
  %9 = alloca %struct.ogg_page, align 8
  %10 = alloca %struct.ogg_packet, align 8
  %11 = alloca %struct.vorbis_dsp_state, align 8
  %12 = alloca %struct.vorbis_block, align 8
  %13 = alloca %struct.vorbis_info, align 8
  %14 = alloca %struct.ovectl_ratemanage_arg, align 8
  %15 = alloca %struct.ogg_packet, align 8
  %16 = alloca %struct.ogg_packet, align 8
  %17 = alloca %struct.ogg_packet, align 8
  call void @llvm.lifetime.start.p0(i64 408, ptr nonnull %8) #55
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %9) #55
  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %10) #55
  call void @llvm.lifetime.start.p0(i64 144, ptr nonnull %11) #55
  call void @llvm.lifetime.start.p0(i64 192, ptr nonnull %12) #55
  call void @llvm.lifetime.start.p0(i64 56, ptr nonnull %13) #55
  %18 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 9
  %19 = load i32, ptr %18, align 8
  %20 = icmp sgt i32 %19, 255
  br i1 %20, label %21, label %24

21:                                               ; preds = %1
  %22 = load ptr, ptr @stderr, align 8
  %23 = tail call i64 @fwrite(ptr nonnull @.str.84, i64 79, i64 1, ptr %22) #58
  br label %455

24:                                               ; preds = %1
  %25 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 15
  %26 = load i32, ptr %25, align 8
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %39

28:                                               ; preds = %24
  %29 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 17
  %30 = load i32, ptr %29, align 8
  %31 = icmp sgt i32 %30, -1
  br i1 %31, label %36, label %32

32:                                               ; preds = %28
  %33 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 18
  %34 = load i32, ptr %33, align 4
  %35 = icmp sgt i32 %34, -1
  br i1 %35, label %36, label %39

36:                                               ; preds = %32, %28
  %37 = load ptr, ptr @stderr, align 8
  %38 = tail call i64 @fwrite(ptr nonnull @.str.85, i64 59, i64 1, ptr %37) #58
  br label %455

39:                                               ; preds = %32, %24
  %40 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 16
  %41 = load i32, ptr %40, align 4
  %42 = icmp slt i32 %41, 0
  %43 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 17
  %44 = load i32, ptr %43, align 8
  %45 = icmp slt i32 %44, 0
  %46 = select i1 %42, i1 %45, i1 false
  br i1 %46, label %47, label %53

47:                                               ; preds = %39
  %48 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 18
  %49 = load i32, ptr %48, align 4
  %50 = icmp slt i32 %49, 0
  br i1 %50, label %51, label %53

51:                                               ; preds = %47
  %52 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 20
  store i32 1, ptr %52, align 4
  br label %53

53:                                               ; preds = %51, %47, %39
  %54 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 5
  %55 = load ptr, ptr %54, align 8
  %56 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 25
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 24
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 19
  %61 = load float, ptr %60, align 8
  %62 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 20
  %63 = load i32, ptr %62, align 4
  %64 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 17
  %65 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 18
  %66 = load i32, ptr %65, align 4
  tail call void %55(ptr noundef %57, ptr noundef %59, i32 noundef %41, float noundef %61, i32 noundef %63, i32 noundef %26, i32 noundef %44, i32 noundef %66) #59
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(56) %13, i8 0, i64 48, i1 false)
  %67 = tail call noalias dereferenceable_or_null(5816) ptr @calloc(i64 noundef 1, i64 noundef 5816) #65
  %68 = getelementptr inbounds %struct.vorbis_info, ptr %13, i64 0, i32 7
  store ptr %67, ptr %68, align 8
  %69 = load i32, ptr %62, align 4
  %70 = icmp sgt i32 %69, 0
  %71 = load i32, ptr %18, align 8
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 10
  %74 = load i64, ptr %73, align 8
  br i1 %70, label %75, label %97

75:                                               ; preds = %53
  %76 = load float, ptr %60, align 8
  %77 = call i32 @vorbis_encode_setup_vbr(ptr noundef nonnull %13, i64 noundef %72, i64 noundef %74, float noundef %76) #56, !range !34
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %82, label %79

79:                                               ; preds = %75
  %80 = load ptr, ptr @stderr, align 8
  %81 = tail call i64 @fwrite(ptr nonnull @.str.86, i64 59, i64 1, ptr %80) #58
  call void @vorbis_info_clear(ptr noundef nonnull %13) #56
  br label %455

82:                                               ; preds = %75
  %83 = load i32, ptr %65, align 4
  %84 = icmp sgt i32 %83, 0
  br i1 %84, label %88, label %85

85:                                               ; preds = %82
  %86 = load i32, ptr %64, align 8
  %87 = icmp sgt i32 %86, 0
  br i1 %87, label %88, label %116

88:                                               ; preds = %85, %82
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %14) #55
  %89 = call i32 @vorbis_encode_ctl(ptr noundef nonnull %13, i32 noundef 16, ptr noundef nonnull %14) #56, !range !34
  %90 = load i32, ptr %64, align 8
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds %struct.ovectl_ratemanage_arg, ptr %14, i64 0, i32 1
  store i64 %91, ptr %92, align 8
  %93 = load i32, ptr %65, align 4
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds %struct.ovectl_ratemanage_arg, ptr %14, i64 0, i32 2
  store i64 %94, ptr %95, align 8
  store i32 1, ptr %14, align 8
  %96 = call i32 @vorbis_encode_ctl(ptr noundef nonnull %13, i32 noundef 17, ptr noundef nonnull %14) #56, !range !34
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %14) #55
  br label %116

97:                                               ; preds = %53
  %98 = load i32, ptr %65, align 4
  %99 = icmp sgt i32 %98, 0
  %100 = mul nsw i32 %98, 1000
  %101 = select i1 %99, i32 %100, i32 -1
  %102 = sext i32 %101 to i64
  %103 = load i32, ptr %40, align 4
  %104 = mul nsw i32 %103, 1000
  %105 = sext i32 %104 to i64
  %106 = load i32, ptr %64, align 8
  %107 = icmp sgt i32 %106, 0
  %108 = mul nsw i32 %106, 1000
  %109 = select i1 %107, i32 %108, i32 -1
  %110 = sext i32 %109 to i64
  %111 = call i32 @vorbis_encode_setup_managed(ptr noundef nonnull %13, i64 noundef %72, i64 noundef %74, i64 noundef %102, i64 noundef %105, i64 noundef %110) #56
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %116, label %113

113:                                              ; preds = %97
  %114 = load ptr, ptr @stderr, align 8
  %115 = tail call i64 @fwrite(ptr nonnull @.str.87, i64 59, i64 1, ptr %114) #58
  call void @vorbis_info_clear(ptr noundef nonnull %13) #56
  br label %455

116:                                              ; preds = %97, %88, %85
  %117 = load i32, ptr %25, align 8
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %122, label %119

119:                                              ; preds = %116
  %120 = load i32, ptr %40, align 4
  %121 = icmp slt i32 %120, 0
  br i1 %121, label %122, label %125

122:                                              ; preds = %119, %116
  %123 = phi i32 [ 18, %119 ], [ 17, %116 ]
  %124 = call i32 @vorbis_encode_ctl(ptr noundef nonnull %13, i32 noundef %123, ptr noundef null) #56, !range !34
  br label %125

125:                                              ; preds = %122, %119
  %126 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 21
  %127 = load ptr, ptr %126, align 8
  %128 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 22
  %129 = load i32, ptr %128, align 8
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %2) #55
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #55
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #55
  %130 = call i32 @vorbis_encode_ctl(ptr noundef nonnull %13, i32 noundef 16, ptr noundef nonnull %2) #56, !range !34
  %131 = icmp sgt i32 %129, 0
  br i1 %131, label %132, label %302

132:                                              ; preds = %125
  %133 = getelementptr inbounds %struct.ovectl_ratemanage_arg, ptr %2, i64 0, i32 3
  %134 = getelementptr inbounds %struct.ovectl_ratemanage_arg, ptr %2, i64 0, i32 2
  %135 = getelementptr inbounds %struct.ovectl_ratemanage_arg, ptr %2, i64 0, i32 1
  %136 = getelementptr inbounds %struct.ovectl_ratemanage_arg, ptr %2, i64 0, i32 5
  %137 = getelementptr inbounds %struct.ovectl_ratemanage_arg, ptr %2, i64 0, i32 4
  %138 = getelementptr inbounds %struct.ovectl_ratemanage_arg, ptr %2, i64 0, i32 7
  %139 = getelementptr inbounds %struct.ovectl_ratemanage_arg, ptr %2, i64 0, i32 6
  %140 = zext i32 %129 to i64
  br label %141

141:                                              ; preds = %289, %132
  %142 = phi i64 [ 0, %132 ], [ %292, %289 ]
  %143 = phi i32 [ 0, %132 ], [ %291, %289 ]
  %144 = phi i32 [ 0, %132 ], [ %290, %289 ]
  %145 = load ptr, ptr @stderr, align 8
  %146 = getelementptr inbounds %struct.adv_opt, ptr %127, i64 %142
  %147 = load ptr, ptr %146, align 8
  %148 = getelementptr inbounds %struct.adv_opt, ptr %127, i64 %142, i32 1
  %149 = load ptr, ptr %148, align 8
  %150 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %145, ptr noundef nonnull @.str.177, ptr noundef %147, ptr noundef %149) #60
  %151 = load ptr, ptr %146, align 8
  %152 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %151, ptr noundef nonnull dereferenceable(23) @.str.178) #57
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %154, label %165

154:                                              ; preds = %141
  %155 = load ptr, ptr %148, align 8
  %156 = call i32 (ptr, ptr, ...) @__isoc99_sscanf(ptr noundef %155, ptr noundef nonnull @.str.179, ptr noundef nonnull %3) #59
  %157 = icmp eq i32 %156, 1
  br i1 %157, label %163, label %158

158:                                              ; preds = %154
  %159 = load ptr, ptr @stderr, align 8
  %160 = load ptr, ptr %146, align 8
  %161 = load ptr, ptr %148, align 8
  %162 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %159, ptr noundef nonnull @.str.180, ptr noundef %160, ptr noundef %161) #60
  br label %289

163:                                              ; preds = %154
  %164 = load double, ptr %3, align 8
  store double %164, ptr %139, align 8
  br label %289

165:                                              ; preds = %141
  %166 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %151, ptr noundef nonnull dereferenceable(30) @.str.181) #57
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %168, label %179

168:                                              ; preds = %165
  %169 = load ptr, ptr %148, align 8
  %170 = call i32 (ptr, ptr, ...) @__isoc99_sscanf(ptr noundef %169, ptr noundef nonnull @.str.179, ptr noundef nonnull %3) #59
  %171 = icmp eq i32 %170, 1
  br i1 %171, label %177, label %172

172:                                              ; preds = %168
  %173 = load ptr, ptr @stderr, align 8
  %174 = load ptr, ptr %146, align 8
  %175 = load ptr, ptr %148, align 8
  %176 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %173, ptr noundef nonnull @.str.180, ptr noundef %174, ptr noundef %175) #60
  br label %289

177:                                              ; preds = %168
  %178 = load double, ptr %3, align 8
  store double %178, ptr %138, align 8
  br label %289

179:                                              ; preds = %165
  %180 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %151, ptr noundef nonnull dereferenceable(20) @.str.182) #57
  %181 = icmp eq i32 %180, 0
  br i1 %181, label %182, label %193

182:                                              ; preds = %179
  %183 = load ptr, ptr %148, align 8
  %184 = call i32 (ptr, ptr, ...) @__isoc99_sscanf(ptr noundef %183, ptr noundef nonnull @.str.183, ptr noundef nonnull %4) #59
  %185 = icmp eq i32 %184, 1
  br i1 %185, label %191, label %186

186:                                              ; preds = %182
  %187 = load ptr, ptr @stderr, align 8
  %188 = load ptr, ptr %146, align 8
  %189 = load ptr, ptr %148, align 8
  %190 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %187, ptr noundef nonnull @.str.184, ptr noundef %188, ptr noundef %189) #60
  br label %289

191:                                              ; preds = %182
  %192 = load i64, ptr %4, align 8
  store i64 %192, ptr %137, align 8
  br label %289

193:                                              ; preds = %179
  %194 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %151, ptr noundef nonnull dereferenceable(21) @.str.185) #57
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %196, label %207

196:                                              ; preds = %193
  %197 = load ptr, ptr %148, align 8
  %198 = call i32 (ptr, ptr, ...) @__isoc99_sscanf(ptr noundef %197, ptr noundef nonnull @.str.183, ptr noundef nonnull %4) #59
  %199 = icmp eq i32 %198, 1
  br i1 %199, label %205, label %200

200:                                              ; preds = %196
  %201 = load ptr, ptr @stderr, align 8
  %202 = load ptr, ptr %146, align 8
  %203 = load ptr, ptr %148, align 8
  %204 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %201, ptr noundef nonnull @.str.184, ptr noundef %202, ptr noundef %203) #60
  br label %289

205:                                              ; preds = %196
  %206 = load i64, ptr %4, align 8
  store i64 %206, ptr %136, align 8
  br label %289

207:                                              ; preds = %193
  %208 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %151, ptr noundef nonnull dereferenceable(17) @.str.186) #57
  %209 = icmp eq i32 %208, 0
  br i1 %209, label %210, label %221

210:                                              ; preds = %207
  %211 = load ptr, ptr %148, align 8
  %212 = call i32 (ptr, ptr, ...) @__isoc99_sscanf(ptr noundef %211, ptr noundef nonnull @.str.183, ptr noundef nonnull %4) #59
  %213 = icmp eq i32 %212, 1
  br i1 %213, label %219, label %214

214:                                              ; preds = %210
  %215 = load ptr, ptr @stderr, align 8
  %216 = load ptr, ptr %146, align 8
  %217 = load ptr, ptr %148, align 8
  %218 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %215, ptr noundef nonnull @.str.184, ptr noundef %216, ptr noundef %217) #60
  br label %289

219:                                              ; preds = %210
  %220 = load i64, ptr %4, align 8
  store i64 %220, ptr %135, align 8
  br label %289

221:                                              ; preds = %207
  %222 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %151, ptr noundef nonnull dereferenceable(17) @.str.187) #57
  %223 = icmp eq i32 %222, 0
  br i1 %223, label %224, label %235

224:                                              ; preds = %221
  %225 = load ptr, ptr %148, align 8
  %226 = call i32 (ptr, ptr, ...) @__isoc99_sscanf(ptr noundef %225, ptr noundef nonnull @.str.183, ptr noundef nonnull %4) #59
  %227 = icmp eq i32 %226, 1
  br i1 %227, label %233, label %228

228:                                              ; preds = %224
  %229 = load ptr, ptr @stderr, align 8
  %230 = load ptr, ptr %146, align 8
  %231 = load ptr, ptr %148, align 8
  %232 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %229, ptr noundef nonnull @.str.184, ptr noundef %230, ptr noundef %231) #60
  br label %289

233:                                              ; preds = %224
  %234 = load i64, ptr %4, align 8
  store i64 %234, ptr %134, align 8
  br label %289

235:                                              ; preds = %221
  %236 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %151, ptr noundef nonnull dereferenceable(20) @.str.188) #57
  %237 = icmp eq i32 %236, 0
  br i1 %237, label %238, label %249

238:                                              ; preds = %235
  %239 = load ptr, ptr %148, align 8
  %240 = call i32 (ptr, ptr, ...) @__isoc99_sscanf(ptr noundef %239, ptr noundef nonnull @.str.179, ptr noundef nonnull %3) #59
  %241 = icmp eq i32 %240, 1
  br i1 %241, label %247, label %242

242:                                              ; preds = %238
  %243 = load ptr, ptr @stderr, align 8
  %244 = load ptr, ptr %146, align 8
  %245 = load ptr, ptr %148, align 8
  %246 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %243, ptr noundef nonnull @.str.180, ptr noundef %244, ptr noundef %245) #60
  br label %289

247:                                              ; preds = %238
  %248 = load double, ptr %3, align 8
  store double %248, ptr %133, align 8
  br label %289

249:                                              ; preds = %235
  %250 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %151, ptr noundef nonnull dereferenceable(18) @.str.189) #57
  %251 = icmp eq i32 %250, 0
  br i1 %251, label %252, label %265

252:                                              ; preds = %249
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #55
  %253 = load ptr, ptr %148, align 8
  %254 = call i32 (ptr, ptr, ...) @__isoc99_sscanf(ptr noundef %253, ptr noundef nonnull @.str.179, ptr noundef nonnull %3) #59
  %255 = icmp eq i32 %254, 1
  br i1 %255, label %261, label %256

256:                                              ; preds = %252
  %257 = load ptr, ptr @stderr, align 8
  %258 = load ptr, ptr %146, align 8
  %259 = load ptr, ptr %148, align 8
  %260 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %257, ptr noundef nonnull @.str.180, ptr noundef %258, ptr noundef %259) #60
  br label %263

261:                                              ; preds = %252
  %262 = load double, ptr %3, align 8
  store double %262, ptr %5, align 8
  br label %263

263:                                              ; preds = %261, %256
  %264 = call i32 @vorbis_encode_ctl(ptr noundef nonnull %13, i32 noundef 49, ptr noundef nonnull %5) #56, !range !34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #55
  br label %289

265:                                              ; preds = %249
  %266 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %151, ptr noundef nonnull dereferenceable(18) @.str.190) #57
  %267 = icmp eq i32 %266, 0
  br i1 %267, label %268, label %286

268:                                              ; preds = %265
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #55
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #55
  %269 = load ptr, ptr %148, align 8
  %270 = call i32 (ptr, ptr, ...) @__isoc99_sscanf(ptr noundef %269, ptr noundef nonnull @.str.179, ptr noundef nonnull %3) #59
  %271 = icmp eq i32 %270, 1
  br i1 %271, label %277, label %272

272:                                              ; preds = %268
  %273 = load ptr, ptr @stderr, align 8
  %274 = load ptr, ptr %146, align 8
  %275 = load ptr, ptr %148, align 8
  %276 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %273, ptr noundef nonnull @.str.180, ptr noundef %274, ptr noundef %275) #60
  br label %279

277:                                              ; preds = %268
  %278 = load double, ptr %3, align 8
  store double %278, ptr %7, align 8
  br label %279

279:                                              ; preds = %277, %272
  %280 = call i32 @vorbis_encode_ctl(ptr noundef nonnull %13, i32 noundef 32, ptr noundef nonnull %6) #56, !range !34
  %281 = call i32 @vorbis_encode_ctl(ptr noundef nonnull %13, i32 noundef 33, ptr noundef nonnull %7) #56, !range !34
  %282 = load ptr, ptr @stderr, align 8
  %283 = load double, ptr %6, align 8
  %284 = load double, ptr %7, align 8
  %285 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %282, ptr noundef nonnull @.str.191, double noundef %283, double noundef %284) #60
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #55
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #55
  br label %289

286:                                              ; preds = %265
  %287 = load ptr, ptr @stderr, align 8
  %288 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %287, ptr noundef nonnull @.str.192, ptr noundef %151) #60
  br label %289

289:                                              ; preds = %286, %279, %263, %247, %242, %233, %228, %219, %214, %205, %200, %191, %186, %177, %172, %163, %158
  %290 = phi i32 [ %144, %286 ], [ %144, %279 ], [ %144, %263 ], [ %144, %163 ], [ %144, %158 ], [ %144, %177 ], [ %144, %172 ], [ %144, %191 ], [ %144, %186 ], [ %144, %205 ], [ %144, %200 ], [ 1, %219 ], [ 1, %214 ], [ 1, %233 ], [ 1, %228 ], [ 1, %247 ], [ 1, %242 ]
  %291 = phi i32 [ %143, %286 ], [ %143, %279 ], [ %143, %263 ], [ 1, %163 ], [ 1, %158 ], [ 1, %177 ], [ 1, %172 ], [ 1, %191 ], [ 1, %186 ], [ 1, %205 ], [ 1, %200 ], [ %143, %219 ], [ %143, %214 ], [ %143, %233 ], [ %143, %228 ], [ %143, %247 ], [ %143, %242 ]
  %292 = add nuw nsw i64 %142, 1
  %293 = icmp eq i64 %292, %140
  br i1 %293, label %294, label %141, !llvm.loop !35

294:                                              ; preds = %289
  %.lcssa16 = phi i32 [ %290, %289 ]
  %.lcssa15 = phi i32 [ %291, %289 ]
  %295 = icmp eq i32 %.lcssa16, 0
  br i1 %295, label %298, label %296

296:                                              ; preds = %294
  %297 = call i32 @vorbis_encode_ctl(ptr noundef nonnull %13, i32 noundef 19, ptr noundef nonnull %2) #56, !range !34
  br label %298

298:                                              ; preds = %296, %294
  %299 = icmp eq i32 %.lcssa15, 0
  br i1 %299, label %302, label %300

300:                                              ; preds = %298
  %301 = call i32 @vorbis_encode_ctl(ptr noundef nonnull %13, i32 noundef 18, ptr noundef nonnull %2) #56, !range !34
  br label %302

302:                                              ; preds = %300, %298, %125
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #55
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #55
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %2) #55
  %303 = call i32 @vorbis_encode_setup_init(ptr noundef nonnull %13) #56, !range !34
  %304 = call i32 @vorbis_analysis_init(ptr noundef nonnull %11, ptr noundef nonnull %13) #56, !range !36
  %305 = call i32 @vorbis_block_init(ptr noundef nonnull %11, ptr noundef nonnull %12) #56
  %306 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 1
  %307 = load i32, ptr %306, align 8
  %308 = call i32 @ogg_stream_init(ptr noundef nonnull %8, i32 noundef %307) #56, !range !12
  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %15) #55
  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %16) #55
  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %17) #55
  %309 = load ptr, ptr %0, align 8
  %310 = call i32 @vorbis_analysis_headerout(ptr noundef nonnull %11, ptr noundef %309, ptr noundef nonnull %15, ptr noundef nonnull %16, ptr noundef nonnull %17) #56, !range !37
  %311 = call i32 @ogg_stream_packetin(ptr noundef nonnull %8, ptr noundef nonnull %15) #56
  %312 = call i32 @ogg_stream_packetin(ptr noundef nonnull %8, ptr noundef nonnull %16) #56
  %313 = call i32 @ogg_stream_packetin(ptr noundef nonnull %8, ptr noundef nonnull %17) #56
  %314 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 23
  %315 = getelementptr inbounds %struct.ogg_page, ptr %9, i64 0, i32 1
  %316 = getelementptr inbounds %struct.ogg_page, ptr %9, i64 0, i32 2
  %317 = getelementptr inbounds %struct.ogg_page, ptr %9, i64 0, i32 3
  br label %318

318:                                              ; preds = %321, %302
  %319 = call i32 @ogg_stream_flush(ptr noundef nonnull %8, ptr noundef nonnull %9) #56, !range !36
  %320 = icmp eq i32 %319, 0
  br i1 %320, label %339, label %321

321:                                              ; preds = %318
  %322 = load ptr, ptr %314, align 8
  %323 = load ptr, ptr %9, align 8
  %324 = load i64, ptr %315, align 8
  %325 = call i64 @fwrite(ptr noundef %323, i64 noundef 1, i64 noundef %324, ptr noundef %322) #56
  %326 = load ptr, ptr %316, align 8
  %327 = load i64, ptr %317, align 8
  %328 = call i64 @fwrite(ptr noundef %326, i64 noundef 1, i64 noundef %327, ptr noundef %322) #56
  %329 = add i64 %328, %325
  %330 = shl i64 %329, 32
  %331 = ashr exact i64 %330, 32
  %332 = load i64, ptr %315, align 8
  %333 = load i64, ptr %317, align 8
  %334 = add nsw i64 %333, %332
  %335 = icmp eq i64 %334, %331
  br i1 %335, label %318, label %336, !llvm.loop !38

336:                                              ; preds = %321
  %337 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 6
  %338 = load ptr, ptr %337, align 8
  call void %338(ptr noundef nonnull @.str.88) #59
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %17) #55
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %16) #55
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %15) #55
  br label %439

339:                                              ; preds = %318
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %17) #55
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %16) #55
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %15) #55
  %340 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 2
  %341 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 7
  %342 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 3
  %343 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 8
  %344 = getelementptr inbounds %struct.vorbis_block, ptr %12, i64 0, i32 16
  %345 = getelementptr inbounds %struct.vorbis_block, ptr %12, i64 0, i32 1
  %346 = getelementptr inbounds %struct.vorbis_block, ptr %12, i64 0, i32 1, i32 2
  %347 = getelementptr inbounds %struct.vorbis_block, ptr %12, i64 0, i32 1, i32 3
  %348 = getelementptr inbounds %struct.vorbis_block, ptr %12, i64 0, i32 1, i32 1
  br label %351

349:                                              ; preds = %379
  %.lcssa12 = phi i64 [ %380, %379 ]
  %.lcssa10 = phi i64 [ %381, %379 ]
  %.lcssa8 = phi i32 [ %382, %379 ]
  %350 = icmp eq i32 %.lcssa8, 0
  br i1 %350, label %351, label %439

351:                                              ; preds = %349, %339
  %352 = phi i64 [ 0, %339 ], [ %377, %349 ]
  %353 = phi i64 [ 0, %339 ], [ %.lcssa10, %349 ]
  %354 = phi i64 [ 0, %339 ], [ %.lcssa12, %349 ]
  %355 = call ptr @vorbis_analysis_buffer(ptr noundef nonnull %11, i32 noundef 1024) #56
  %356 = load ptr, ptr %340, align 8
  %357 = load ptr, ptr %341, align 8
  %358 = call i64 %356(ptr noundef %357, ptr noundef %355, i32 noundef 1024) #59
  %359 = icmp eq i64 %358, 0
  br i1 %359, label %374, label %360

360:                                              ; preds = %351
  %361 = add nsw i64 %358, %352
  %362 = icmp sgt i64 %354, 39
  br i1 %362, label %363, label %371

363:                                              ; preds = %360
  %364 = load i64, ptr @timer_time.now.0, align 8
  %365 = add nsw i64 %364, 1
  store i64 %365, ptr @timer_time.now.0, align 8
  %366 = sitofp i64 %365 to double
  %367 = fadd double %366, -2.100000e+01
  %368 = load ptr, ptr %342, align 8
  %369 = load ptr, ptr %58, align 8
  %370 = load i64, ptr %343, align 8
  call void %368(ptr noundef %369, i64 noundef %370, i64 noundef %361, double noundef %367) #59
  br label %371

371:                                              ; preds = %363, %360
  %372 = phi i64 [ 0, %363 ], [ %354, %360 ]
  %373 = trunc i64 %358 to i32
  br label %374

374:                                              ; preds = %371, %351
  %375 = phi i32 [ %373, %371 ], [ 0, %351 ]
  %376 = phi i64 [ %372, %371 ], [ %354, %351 ]
  %377 = phi i64 [ %361, %371 ], [ %352, %351 ]
  %378 = call i32 @vorbis_analysis_wrote(ptr noundef nonnull %11, i32 noundef %375) #56, !range !34
  br label %379

379:                                              ; preds = %397, %374
  %380 = phi i64 [ %376, %374 ], [ %398, %397 ]
  %381 = phi i64 [ %353, %374 ], [ %394, %397 ]
  %382 = phi i32 [ 0, %374 ], [ %395, %397 ]
  %383 = call i32 @vorbis_analysis_blockout(ptr noundef nonnull %11, ptr noundef nonnull %12) #56, !range !36
  %384 = icmp eq i32 %383, 0
  br i1 %384, label %349, label %385

385:                                              ; preds = %379
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %344, i8 0, i64 32, i1 false)
  %386 = load ptr, ptr %346, align 8
  store ptr %386, ptr %347, align 8
  store i8 0, ptr %386, align 1
  store i64 0, ptr %345, align 8
  store i32 0, ptr %348, align 8
  %387 = load ptr, ptr @_mapping_P, align 8
  %388 = getelementptr inbounds %struct.vorbis_func_mapping, ptr %387, i64 0, i32 3
  %389 = load ptr, ptr %388, align 8
  %390 = call i32 %389(ptr noundef nonnull %12) #59
  %391 = call i32 @vorbis_bitrate_addblock(ptr noundef nonnull %12) #56, !range !12
  br label %392

392:                                              ; preds = %436, %385
  %393 = phi i64 [ %380, %385 ], [ %.lcssa.lcssa, %436 ]
  %394 = phi i64 [ %381, %385 ], [ %437, %436 ]
  %395 = phi i32 [ %382, %385 ], [ %438, %436 ]
  %396 = icmp eq i32 %395, 0
  br label %397

397:                                              ; preds = %401, %392
  %398 = phi i64 [ %403, %401 ], [ %393, %392 ]
  %399 = call i32 @vorbis_bitrate_flushpacket(ptr noundef nonnull %11, ptr noundef nonnull %10) #56, !range !36
  %400 = icmp eq i32 %399, 0
  br i1 %400, label %379, label %401, !llvm.loop !39

401:                                              ; preds = %397
  %402 = call i32 @ogg_stream_packetin(ptr noundef nonnull %8, ptr noundef nonnull %10) #56
  %403 = add nsw i64 %398, 1
  br i1 %396, label %404, label %397, !llvm.loop !40

404:                                              ; preds = %426, %401
  %.lcssa = phi i64 [ %.lcssa, %426 ], [ %403, %401 ]
  %405 = phi i64 [ %427, %426 ], [ %394, %401 ]
  %406 = call i32 @ogg_stream_pageout(ptr noundef nonnull %8, ptr noundef nonnull %9) #56, !range !36
  %407 = icmp eq i32 %406, 0
  br i1 %407, label %436, label %408, !llvm.loop !40

408:                                              ; preds = %404
  %409 = load ptr, ptr %314, align 8
  %410 = load ptr, ptr %9, align 8
  %411 = load i64, ptr %315, align 8
  %412 = call i64 @fwrite(ptr noundef %410, i64 noundef 1, i64 noundef %411, ptr noundef %409) #56
  %413 = load ptr, ptr %316, align 8
  %414 = load i64, ptr %317, align 8
  %415 = call i64 @fwrite(ptr noundef %413, i64 noundef 1, i64 noundef %414, ptr noundef %409) #56
  %416 = add i64 %415, %412
  %417 = shl i64 %416, 32
  %418 = ashr exact i64 %417, 32
  %419 = load i64, ptr %315, align 8
  %420 = load i64, ptr %317, align 8
  %421 = add nsw i64 %420, %419
  %422 = icmp eq i64 %421, %418
  br i1 %422, label %426, label %423

423:                                              ; preds = %408
  %.lcssa14 = phi i64 [ %377, %408 ]
  %.lcssa4 = phi i64 [ %405, %408 ]
  %424 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 6
  %425 = load ptr, ptr %424, align 8
  call void %425(ptr noundef nonnull @.str.89) #59
  br label %439

426:                                              ; preds = %408
  %427 = add nsw i64 %418, %405
  %428 = load ptr, ptr %9, align 8
  %429 = getelementptr inbounds i8, ptr %428, i64 5
  %430 = load i8, ptr %429, align 1
  %431 = lshr i8 %430, 2
  %432 = and i8 %431, 1
  %433 = icmp eq i8 %432, 0
  br i1 %433, label %404, label %434

434:                                              ; preds = %426
  %.lcssa7 = phi i64 [ %427, %426 ]
  %.lcssa6 = phi i8 [ %432, %426 ]
  %.lcssa5 = phi i64 [ %405, %426 ]
  %.lcssa.lcssa2 = phi i64 [ %.lcssa, %426 ]
  %435 = zext i8 %.lcssa6 to i32
  br label %436

436:                                              ; preds = %434, %404
  %.lcssa.lcssa = phi i64 [ %.lcssa.lcssa2, %434 ], [ %.lcssa, %404 ]
  %437 = phi i64 [ %.lcssa7, %434 ], [ %405, %404 ]
  %438 = phi i32 [ %435, %434 ], [ 0, %404 ]
  br label %392, !llvm.loop !40

439:                                              ; preds = %423, %349, %336
  %440 = phi i32 [ 1, %336 ], [ 1, %423 ], [ 0, %349 ]
  %441 = phi i64 [ 0, %336 ], [ %.lcssa4, %423 ], [ %.lcssa10, %349 ]
  %442 = phi i64 [ 0, %336 ], [ %.lcssa14, %423 ], [ %377, %349 ]
  %443 = call i32 @ogg_stream_clear(ptr noundef nonnull %8) #56
  %444 = call i32 @vorbis_block_clear(ptr noundef nonnull %12) #56
  call void @vorbis_dsp_clear(ptr noundef nonnull %11) #56
  call void @vorbis_info_clear(ptr noundef nonnull %13) #56
  %445 = load i64, ptr @timer_time.now.0, align 8
  %446 = add nsw i64 %445, 1
  store i64 %446, ptr @timer_time.now.0, align 8
  %447 = sitofp i64 %446 to double
  %448 = fadd double %447, -2.100000e+01
  %449 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 4
  %450 = load ptr, ptr %449, align 8
  %451 = load ptr, ptr %58, align 8
  %452 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 10
  %453 = load i64, ptr %452, align 8
  %454 = trunc i64 %453 to i32
  call void %450(ptr noundef %451, double noundef %448, i32 noundef %454, i64 noundef %442, i64 noundef %441) #59
  br label %455

455:                                              ; preds = %439, %113, %79, %36, %21
  %456 = phi i32 [ 1, %21 ], [ 1, %79 ], [ %440, %439 ], [ 1, %113 ], [ 1, %36 ]
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %13) #55
  call void @llvm.lifetime.end.p0(i64 192, ptr nonnull %12) #55
  call void @llvm.lifetime.end.p0(i64 144, ptr nonnull %11) #55
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %10) #55
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %9) #55
  call void @llvm.lifetime.end.p0(i64 408, ptr nonnull %8) #55
  ret i32 %456
}

; Function Attrs: mustprogress nounwind optsize willreturn uwtable
define internal void @clear_downmix(ptr nocapture noundef %0) #13 {
  %2 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 7
  %3 = load ptr, ptr %2, align 8
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 2
  store ptr %4, ptr %5, align 8
  %6 = getelementptr inbounds %struct.downmix, ptr %3, i64 0, i32 1
  %7 = load ptr, ptr %6, align 8
  store ptr %7, ptr %2, align 8
  %8 = getelementptr inbounds %struct.oe_enc_opt, ptr %0, i64 0, i32 9
  store i32 2, ptr %8, align 8
  %9 = getelementptr inbounds %struct.downmix, ptr %3, i64 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = load ptr, ptr %10, align 8
  tail call void @free(ptr noundef %11) #59
  %12 = load ptr, ptr %9, align 8
  %13 = getelementptr inbounds ptr, ptr %12, i64 1
  %14 = load ptr, ptr %13, align 8
  tail call void @free(ptr noundef %14) #59
  %15 = load ptr, ptr %9, align 8
  tail call void @free(ptr noundef %15) #59
  tail call void @free(ptr noundef %3) #59
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @vorbis_comment_clear(ptr noundef %0) #0 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %35, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.vorbis_comment, ptr %0, i64 0, i32 2
  %5 = load i32, ptr %4, align 8
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %21

7:                                                ; preds = %16, %3
  %8 = phi i32 [ %17, %16 ], [ %5, %3 ]
  %9 = phi i64 [ %18, %16 ], [ 0, %3 ]
  %10 = load ptr, ptr %0, align 8
  %11 = getelementptr inbounds ptr, ptr %10, i64 %9
  %12 = load ptr, ptr %11, align 8
  %13 = icmp eq ptr %12, null
  br i1 %13, label %16, label %14

14:                                               ; preds = %7
  tail call void @free(ptr noundef nonnull %12) #59
  %15 = load i32, ptr %4, align 8
  br label %16

16:                                               ; preds = %14, %7
  %17 = phi i32 [ %8, %7 ], [ %15, %14 ]
  %18 = add nuw nsw i64 %9, 1
  %19 = sext i32 %17 to i64
  %20 = icmp slt i64 %18, %19
  br i1 %20, label %7, label %21, !llvm.loop !41

21:                                               ; preds = %16, %3
  %22 = load ptr, ptr %0, align 8
  %23 = icmp eq ptr %22, null
  br i1 %23, label %25, label %24

24:                                               ; preds = %21
  tail call void @free(ptr noundef nonnull %22) #59
  br label %25

25:                                               ; preds = %24, %21
  %26 = getelementptr inbounds %struct.vorbis_comment, ptr %0, i64 0, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = icmp eq ptr %27, null
  br i1 %28, label %30, label %29

29:                                               ; preds = %25
  tail call void @free(ptr noundef nonnull %27) #59
  br label %30

30:                                               ; preds = %29, %25
  %31 = getelementptr inbounds %struct.vorbis_comment, ptr %0, i64 0, i32 3
  %32 = load ptr, ptr %31, align 8
  %33 = icmp eq ptr %32, null
  br i1 %33, label %35, label %34

34:                                               ; preds = %30
  tail call void @free(ptr noundef nonnull %32) #59
  br label %35

35:                                               ; preds = %34, %30, %1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %0, i8 0, i64 32, i1 false)
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @vorbis_encode_setup_vbr(ptr nocapture noundef %0, i64 noundef %1, i64 noundef %2, float noundef %3) #20 {
  %5 = getelementptr inbounds %struct.vorbis_info, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr inbounds %struct.codec_setup_info, ptr %6, i64 0, i32 19
  %8 = fpext float %3 to double
  %9 = fadd double %8, 1.000000e-05
  %10 = fptrunc double %9 to float
  %11 = fcmp ult float %10, 1.000000e+00
  %12 = select i1 %11, float %10, float 0x3FEFFF2E40000000
  %13 = fpext float %12 to double
  tail call fastcc void @get_setup_template(ptr noundef %0, i64 noundef %1, i64 noundef %2, double noundef %13, i32 noundef 0) #56
  %14 = load ptr, ptr %7, align 8
  %15 = icmp eq ptr %14, null
  br i1 %15, label %18, label %16

16:                                               ; preds = %4
  %17 = tail call fastcc i32 @vorbis_encode_setup_setting(ptr noundef nonnull %0, i64 noundef %1, i64 noundef %2) #56, !range !34
  br label %18

18:                                               ; preds = %16, %4
  %19 = phi i32 [ %17, %16 ], [ -130, %4 ]
  ret i32 %19
}

; Function Attrs: nounwind optsize uwtable
define internal void @vorbis_info_clear(ptr nocapture noundef %0) #0 {
  %2 = getelementptr inbounds %struct.vorbis_info, ptr %0, i64 0, i32 7
  %3 = load ptr, ptr %2, align 8
  %4 = icmp eq ptr %3, null
  br i1 %4, label %124, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 1
  %7 = load i32, ptr %6, align 8
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %13, label %9

9:                                                ; preds = %21, %5
  %10 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 2
  %11 = load i32, ptr %10, align 4
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %30, label %26

13:                                               ; preds = %21, %5
  %14 = phi i32 [ %22, %21 ], [ %7, %5 ]
  %15 = phi i64 [ %23, %21 ], [ 0, %5 ]
  %16 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 7, i64 %15
  %17 = load ptr, ptr %16, align 8
  %18 = icmp eq ptr %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %13
  tail call void @free(ptr noundef nonnull %17) #59
  %20 = load i32, ptr %6, align 8
  br label %21

21:                                               ; preds = %19, %13
  %22 = phi i32 [ %14, %13 ], [ %20, %19 ]
  %23 = add nuw nsw i64 %15, 1
  %24 = sext i32 %22 to i64
  %25 = icmp slt i64 %23, %24
  br i1 %25, label %13, label %9, !llvm.loop !42

26:                                               ; preds = %30, %9
  %27 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 3
  %28 = load i32, ptr %27, align 8
  %29 = icmp sgt i32 %28, 0
  br i1 %29, label %49, label %45

30:                                               ; preds = %30, %9
  %31 = phi i64 [ %41, %30 ], [ 0, %9 ]
  %32 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 8, i64 %31
  %33 = load i32, ptr %32, align 4
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds [0 x ptr], ptr @_mapping_P, i64 0, i64 %34
  %36 = load ptr, ptr %35, align 8
  %37 = getelementptr inbounds %struct.vorbis_func_mapping, ptr %36, i64 0, i32 2
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 9, i64 %31
  %40 = load ptr, ptr %39, align 8
  tail call void %38(ptr noundef %40) #59
  %41 = add nuw nsw i64 %31, 1
  %42 = load i32, ptr %10, align 4
  %43 = sext i32 %42 to i64
  %44 = icmp slt i64 %41, %43
  br i1 %44, label %30, label %26, !llvm.loop !43

45:                                               ; preds = %49, %26
  %46 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 4
  %47 = load i32, ptr %46, align 4
  %48 = icmp sgt i32 %47, 0
  br i1 %48, label %70, label %64

49:                                               ; preds = %49, %26
  %50 = phi i64 [ %60, %49 ], [ 0, %26 ]
  %51 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 10, i64 %50
  %52 = load i32, ptr %51, align 4
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds [0 x ptr], ptr @_floor_P, i64 0, i64 %53
  %55 = load ptr, ptr %54, align 8
  %56 = getelementptr inbounds %struct.vorbis_func_floor, ptr %55, i64 0, i32 3
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 11, i64 %50
  %59 = load ptr, ptr %58, align 8
  tail call void %57(ptr noundef %59) #59
  %60 = add nuw nsw i64 %50, 1
  %61 = load i32, ptr %27, align 8
  %62 = sext i32 %61 to i64
  %63 = icmp slt i64 %60, %62
  br i1 %63, label %49, label %45, !llvm.loop !44

64:                                               ; preds = %70, %45
  %65 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 5
  %66 = load i32, ptr %65, align 8
  %67 = icmp sgt i32 %66, 0
  br i1 %67, label %68, label %101

68:                                               ; preds = %64
  %69 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 15
  br label %85

70:                                               ; preds = %70, %45
  %71 = phi i64 [ %81, %70 ], [ 0, %45 ]
  %72 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 12, i64 %71
  %73 = load i32, ptr %72, align 4
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds [0 x ptr], ptr @_residue_P, i64 0, i64 %74
  %76 = load ptr, ptr %75, align 8
  %77 = getelementptr inbounds %struct.vorbis_func_residue, ptr %76, i64 0, i32 3
  %78 = load ptr, ptr %77, align 8
  %79 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 13, i64 %71
  %80 = load ptr, ptr %79, align 8
  tail call void %78(ptr noundef %80) #59
  %81 = add nuw nsw i64 %71, 1
  %82 = load i32, ptr %46, align 4
  %83 = sext i32 %82 to i64
  %84 = icmp slt i64 %81, %83
  br i1 %84, label %70, label %64, !llvm.loop !45

85:                                               ; preds = %96, %68
  %86 = phi i64 [ 0, %68 ], [ %97, %96 ]
  %87 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 14, i64 %86
  %88 = load ptr, ptr %87, align 8
  %89 = icmp eq ptr %88, null
  br i1 %89, label %91, label %90

90:                                               ; preds = %85
  tail call void @vorbis_staticbook_destroy(ptr noundef nonnull %88) #56
  br label %91

91:                                               ; preds = %90, %85
  %92 = load ptr, ptr %69, align 8
  %93 = icmp eq ptr %92, null
  br i1 %93, label %96, label %94

94:                                               ; preds = %91
  %95 = getelementptr inbounds %struct.codebook, ptr %92, i64 %86
  tail call void @vorbis_book_clear(ptr noundef nonnull %95) #56
  br label %96

96:                                               ; preds = %94, %91
  %97 = add nuw nsw i64 %86, 1
  %98 = load i32, ptr %65, align 8
  %99 = sext i32 %98 to i64
  %100 = icmp slt i64 %97, %99
  br i1 %100, label %85, label %101, !llvm.loop !46

101:                                              ; preds = %96, %64
  %102 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 15
  %103 = load ptr, ptr %102, align 8
  %104 = icmp eq ptr %103, null
  br i1 %104, label %106, label %105

105:                                              ; preds = %101
  tail call void @free(ptr noundef nonnull %103) #59
  br label %106

106:                                              ; preds = %105, %101
  %107 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 6
  %108 = load i32, ptr %107, align 4
  %109 = icmp sgt i32 %108, 0
  br i1 %109, label %110, label %123

110:                                              ; preds = %118, %106
  %111 = phi i32 [ %119, %118 ], [ %108, %106 ]
  %112 = phi i64 [ %120, %118 ], [ 0, %106 ]
  %113 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 16, i64 %112
  %114 = load ptr, ptr %113, align 8
  %115 = icmp eq ptr %114, null
  br i1 %115, label %118, label %116

116:                                              ; preds = %110
  tail call void @free(ptr noundef nonnull %114) #59
  %117 = load i32, ptr %107, align 4
  br label %118

118:                                              ; preds = %116, %110
  %119 = phi i32 [ %111, %110 ], [ %117, %116 ]
  %120 = add nuw nsw i64 %112, 1
  %121 = sext i32 %119 to i64
  %122 = icmp slt i64 %120, %121
  br i1 %122, label %110, label %123, !llvm.loop !47

123:                                              ; preds = %118, %106
  tail call void @free(ptr noundef nonnull %3) #59
  br label %124

124:                                              ; preds = %123, %1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(56) %0, i8 0, i64 56, i1 false)
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @vorbis_encode_ctl(ptr noundef %0, i32 noundef %1, ptr noundef %2) #21 {
  %4 = icmp eq ptr %0, null
  br i1 %4, label %176, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.vorbis_info, ptr %0, i64 0, i32 7
  %7 = icmp eq ptr %2, null
  br label %8

8:                                                ; preds = %46, %5
  %9 = phi i1 [ false, %5 ], [ true, %46 ]
  %10 = phi i32 [ %1, %5 ], [ 19, %46 ]
  %11 = load ptr, ptr %6, align 8
  %12 = and i32 %10, 15
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %18, label %14

14:                                               ; preds = %8
  %15 = getelementptr inbounds %struct.codec_setup_info, ptr %11, i64 0, i32 19, i32 1
  %16 = load i32, ptr %15, align 8
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %173

18:                                               ; preds = %14, %8
  switch i32 %10, label %173 [
    i32 16, label %19
    i32 17, label %43
    i32 18, label %50
    i32 19, label %110
    i32 32, label %153
    i32 33, label %156
    i32 48, label %163
    i32 49, label %166
  ]

19:                                               ; preds = %18
  %.lcssa10 = phi i1 [ %9, %18 ]
  %.lcssa1 = phi ptr [ %11, %18 ]
  %20 = getelementptr inbounds %struct.codec_setup_info, ptr %.lcssa1, i64 0, i32 19, i32 6
  %21 = load i32, ptr %20, align 8
  store i32 %21, ptr %2, align 8
  %22 = getelementptr inbounds %struct.codec_setup_info, ptr %.lcssa1, i64 0, i32 19, i32 12
  %23 = load double, ptr %22, align 8
  %24 = getelementptr inbounds %struct.ovectl_ratemanage_arg, ptr %2, i64 0, i32 6
  store double %23, ptr %24, align 8
  %25 = getelementptr inbounds %struct.codec_setup_info, ptr %.lcssa1, i64 0, i32 19, i32 13
  %26 = load double, ptr %25, align 8
  %27 = getelementptr inbounds %struct.ovectl_ratemanage_arg, ptr %2, i64 0, i32 7
  store double %26, ptr %27, align 8
  %28 = getelementptr inbounds %struct.codec_setup_info, ptr %.lcssa1, i64 0, i32 19, i32 11
  %29 = load double, ptr %28, align 8
  %30 = getelementptr inbounds %struct.ovectl_ratemanage_arg, ptr %2, i64 0, i32 3
  store double %29, ptr %30, align 8
  %31 = getelementptr inbounds %struct.codec_setup_info, ptr %.lcssa1, i64 0, i32 19, i32 7
  %32 = load i64, ptr %31, align 8
  %33 = getelementptr inbounds %struct.ovectl_ratemanage_arg, ptr %2, i64 0, i32 1
  store i64 %32, ptr %33, align 8
  %34 = getelementptr inbounds %struct.codec_setup_info, ptr %.lcssa1, i64 0, i32 19, i32 10
  %35 = load i64, ptr %34, align 8
  %36 = getelementptr inbounds %struct.ovectl_ratemanage_arg, ptr %2, i64 0, i32 2
  store i64 %35, ptr %36, align 8
  %37 = getelementptr inbounds %struct.codec_setup_info, ptr %.lcssa1, i64 0, i32 19, i32 8
  %38 = load i64, ptr %37, align 8
  %39 = getelementptr inbounds %struct.ovectl_ratemanage_arg, ptr %2, i64 0, i32 4
  store i64 %38, ptr %39, align 8
  %40 = getelementptr inbounds %struct.codec_setup_info, ptr %.lcssa1, i64 0, i32 19, i32 9
  %41 = load i64, ptr %40, align 8
  %42 = getelementptr inbounds %struct.ovectl_ratemanage_arg, ptr %2, i64 0, i32 5
  store i64 %41, ptr %42, align 8
  br i1 %.lcssa10, label %175, label %176

43:                                               ; preds = %18
  br i1 %7, label %44, label %46

44:                                               ; preds = %43
  %.lcssa8 = phi ptr [ %11, %43 ]
  %45 = getelementptr inbounds %struct.codec_setup_info, ptr %.lcssa8, i64 0, i32 19, i32 6
  store i32 0, ptr %45, align 8
  br label %176

46:                                               ; preds = %43
  %47 = load i32, ptr %2, align 8
  %48 = getelementptr inbounds %struct.codec_setup_info, ptr %11, i64 0, i32 19, i32 6
  store i32 %47, ptr %48, align 8
  %49 = tail call i32 @vorbis_encode_ctl(ptr noundef nonnull %0, i32 noundef 18, ptr noundef nonnull %2) #56, !range !34
  br label %8

50:                                               ; preds = %18
  %.lcssa11 = phi i1 [ %9, %18 ]
  %.lcssa2 = phi ptr [ %11, %18 ]
  br i1 %7, label %51, label %55

51:                                               ; preds = %50
  %52 = getelementptr inbounds %struct.codec_setup_info, ptr %.lcssa2, i64 0, i32 19, i32 8
  %53 = getelementptr inbounds %struct.codec_setup_info, ptr %.lcssa2, i64 0, i32 19, i32 12
  store double 0.000000e+00, ptr %53, align 8
  %54 = getelementptr inbounds %struct.codec_setup_info, ptr %.lcssa2, i64 0, i32 19, i32 12
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %52, i8 0, i64 16, i1 false)
  br label %70

55:                                               ; preds = %50
  %56 = getelementptr inbounds %struct.ovectl_ratemanage_arg, ptr %2, i64 0, i32 6
  %57 = load double, ptr %56, align 8
  %58 = getelementptr inbounds %struct.codec_setup_info, ptr %.lcssa2, i64 0, i32 19, i32 12
  store double %57, ptr %58, align 8
  %59 = getelementptr inbounds %struct.ovectl_ratemanage_arg, ptr %2, i64 0, i32 7
  %60 = load double, ptr %59, align 8
  %61 = getelementptr inbounds %struct.codec_setup_info, ptr %.lcssa2, i64 0, i32 19, i32 13
  store double %60, ptr %61, align 8
  %62 = getelementptr inbounds %struct.ovectl_ratemanage_arg, ptr %2, i64 0, i32 4
  %63 = load i64, ptr %62, align 8
  %64 = getelementptr inbounds %struct.codec_setup_info, ptr %.lcssa2, i64 0, i32 19, i32 8
  store i64 %63, ptr %64, align 8
  %65 = getelementptr inbounds %struct.ovectl_ratemanage_arg, ptr %2, i64 0, i32 5
  %66 = load i64, ptr %65, align 8
  %67 = getelementptr inbounds %struct.codec_setup_info, ptr %.lcssa2, i64 0, i32 19, i32 9
  store i64 %66, ptr %67, align 8
  %68 = getelementptr inbounds %struct.codec_setup_info, ptr %.lcssa2, i64 0, i32 19, i32 12
  %69 = fcmp olt double %57, 2.500000e-01
  br i1 %69, label %70, label %74

70:                                               ; preds = %55, %51
  %71 = phi ptr [ %54, %51 ], [ %68, %55 ]
  %72 = phi i64 [ 0, %51 ], [ %66, %55 ]
  %73 = phi i64 [ 0, %51 ], [ %63, %55 ]
  store double 2.500000e-01, ptr %71, align 8
  br label %77

74:                                               ; preds = %55
  %75 = fcmp ogt double %57, 1.000000e+01
  br i1 %75, label %76, label %77

76:                                               ; preds = %74
  store double 1.000000e+01, ptr %68, align 8
  br label %77

77:                                               ; preds = %76, %74, %70
  %78 = phi ptr [ %71, %70 ], [ %68, %76 ], [ %68, %74 ]
  %79 = phi i64 [ %72, %70 ], [ %66, %76 ], [ %66, %74 ]
  %80 = phi i64 [ %73, %70 ], [ %63, %76 ], [ %63, %74 ]
  %81 = phi double [ 2.500000e-01, %70 ], [ 1.000000e+01, %76 ], [ %57, %74 ]
  %82 = getelementptr inbounds %struct.codec_setup_info, ptr %.lcssa2, i64 0, i32 19, i32 13
  %83 = load double, ptr %82, align 8
  %84 = fcmp olt double %83, 0.000000e+00
  %85 = fcmp ogt double %83, 1.000000e+00
  %86 = or i1 %84, %85
  br i1 %86, label %87, label %89

87:                                               ; preds = %77
  %88 = select i1 %85, double 1.000000e+00, double 0.000000e+00
  store double %88, ptr %78, align 8
  br label %89

89:                                               ; preds = %87, %77
  %90 = phi double [ %81, %77 ], [ %88, %87 ]
  %91 = icmp sgt i64 %80, 0
  %92 = icmp sgt i64 %79, 0
  %93 = select i1 %91, i1 true, i1 %92
  %94 = fcmp ugt double %90, 0.000000e+00
  %95 = and i1 %93, %94
  br i1 %95, label %173, label %96

96:                                               ; preds = %89
  %97 = getelementptr inbounds %struct.codec_setup_info, ptr %.lcssa2, i64 0, i32 19, i32 7
  %98 = load i64, ptr %97, align 8
  %99 = icmp slt i64 %98, 1
  br i1 %99, label %100, label %104

100:                                              ; preds = %96
  %101 = getelementptr inbounds %struct.codec_setup_info, ptr %.lcssa2, i64 0, i32 19, i32 10
  %102 = load i64, ptr %101, align 8
  %103 = icmp slt i64 %102, 1
  br i1 %103, label %108, label %104

104:                                              ; preds = %100, %96
  %105 = getelementptr inbounds %struct.codec_setup_info, ptr %.lcssa2, i64 0, i32 19, i32 11
  %106 = load double, ptr %105, align 8
  %107 = fcmp ugt double %106, 0.000000e+00
  br i1 %107, label %173, label %108

108:                                              ; preds = %104, %100
  %109 = getelementptr inbounds %struct.codec_setup_info, ptr %.lcssa2, i64 0, i32 19, i32 6
  store i32 0, ptr %109, align 8
  br i1 %.lcssa11, label %175, label %176

110:                                              ; preds = %18
  %.lcssa12 = phi i1 [ %9, %18 ]
  %.lcssa3 = phi ptr [ %11, %18 ]
  br i1 %7, label %111, label %114

111:                                              ; preds = %110
  %112 = getelementptr inbounds %struct.codec_setup_info, ptr %.lcssa3, i64 0, i32 19, i32 7
  store i64 0, ptr %112, align 8
  %113 = getelementptr inbounds %struct.codec_setup_info, ptr %.lcssa3, i64 0, i32 19, i32 10
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %113, i8 0, i64 16, i1 false)
  br label %130

114:                                              ; preds = %110
  %115 = getelementptr inbounds %struct.codec_setup_info, ptr %.lcssa3, i64 0, i32 19, i32 11
  %116 = getelementptr inbounds %struct.ovectl_ratemanage_arg, ptr %2, i64 0, i32 3
  %117 = load double, ptr %116, align 8
  store double %117, ptr %115, align 8
  %118 = getelementptr inbounds %struct.ovectl_ratemanage_arg, ptr %2, i64 0, i32 1
  %119 = load i64, ptr %118, align 8
  %120 = getelementptr inbounds %struct.codec_setup_info, ptr %.lcssa3, i64 0, i32 19, i32 7
  store i64 %119, ptr %120, align 8
  %121 = getelementptr inbounds %struct.ovectl_ratemanage_arg, ptr %2, i64 0, i32 2
  %122 = load i64, ptr %121, align 8
  %123 = getelementptr inbounds %struct.codec_setup_info, ptr %.lcssa3, i64 0, i32 19, i32 10
  store i64 %122, ptr %123, align 8
  %124 = getelementptr inbounds %struct.codec_setup_info, ptr %.lcssa3, i64 0, i32 19, i32 11
  %125 = fcmp olt double %117, 0.000000e+00
  br i1 %125, label %126, label %127

126:                                              ; preds = %114
  store double 0.000000e+00, ptr %124, align 8
  br label %130

127:                                              ; preds = %114
  %128 = fcmp ogt double %117, 1.000000e+01
  br i1 %128, label %129, label %130

129:                                              ; preds = %127
  store double 1.000000e+01, ptr %124, align 8
  br label %130

130:                                              ; preds = %129, %127, %126, %111
  %131 = phi i64 [ %122, %126 ], [ %122, %129 ], [ %122, %127 ], [ 0, %111 ]
  %132 = phi i64 [ %119, %126 ], [ %119, %129 ], [ %119, %127 ], [ 0, %111 ]
  %133 = phi double [ 0.000000e+00, %126 ], [ 1.000000e+01, %129 ], [ %117, %127 ], [ 0.000000e+00, %111 ]
  %134 = getelementptr inbounds %struct.codec_setup_info, ptr %.lcssa3, i64 0, i32 19, i32 8
  %135 = load i64, ptr %134, align 8
  %136 = icmp slt i64 %135, 1
  br i1 %136, label %137, label %141

137:                                              ; preds = %130
  %138 = getelementptr inbounds %struct.codec_setup_info, ptr %.lcssa3, i64 0, i32 19, i32 9
  %139 = load i64, ptr %138, align 8
  %140 = icmp slt i64 %139, 1
  br i1 %140, label %145, label %141

141:                                              ; preds = %137, %130
  %142 = getelementptr inbounds %struct.codec_setup_info, ptr %.lcssa3, i64 0, i32 19, i32 12
  %143 = load double, ptr %142, align 8
  %144 = fcmp ugt double %143, 0.000000e+00
  br i1 %144, label %173, label %145

145:                                              ; preds = %141, %137
  %146 = icmp sgt i64 %132, 0
  %147 = icmp sgt i64 %131, 0
  %148 = select i1 %146, i1 true, i1 %147
  %149 = fcmp ugt double %133, 0.000000e+00
  %150 = and i1 %148, %149
  br i1 %150, label %173, label %151

151:                                              ; preds = %145
  %152 = getelementptr inbounds %struct.codec_setup_info, ptr %.lcssa3, i64 0, i32 19, i32 6
  store i32 0, ptr %152, align 8
  br i1 %.lcssa12, label %175, label %176

153:                                              ; preds = %18
  %.lcssa13 = phi i1 [ %9, %18 ]
  %.lcssa4 = phi ptr [ %11, %18 ]
  %154 = getelementptr inbounds %struct.codec_setup_info, ptr %.lcssa4, i64 0, i32 19, i32 17
  %155 = load double, ptr %154, align 8
  store double %155, ptr %2, align 8
  br i1 %.lcssa13, label %175, label %176

156:                                              ; preds = %18
  %.lcssa14 = phi i1 [ %9, %18 ]
  %.lcssa5 = phi ptr [ %11, %18 ]
  %157 = load double, ptr %2, align 8
  %158 = getelementptr inbounds %struct.codec_setup_info, ptr %.lcssa5, i64 0, i32 19, i32 17
  %159 = fcmp olt double %157, 2.000000e+00
  %160 = select i1 %159, double 2.000000e+00, double %157
  %161 = fcmp ogt double %160, 9.900000e+01
  %162 = select i1 %161, double 9.900000e+01, double %160
  store double %162, ptr %158, align 8
  br i1 %.lcssa14, label %175, label %176

163:                                              ; preds = %18
  %.lcssa15 = phi i1 [ %9, %18 ]
  %.lcssa6 = phi ptr [ %11, %18 ]
  %164 = getelementptr inbounds %struct.codec_setup_info, ptr %.lcssa6, i64 0, i32 19, i32 5
  %165 = load double, ptr %164, align 8
  store double %165, ptr %2, align 8
  br i1 %.lcssa15, label %175, label %176

166:                                              ; preds = %18
  %.lcssa16 = phi i1 [ %9, %18 ]
  %.lcssa7 = phi ptr [ %11, %18 ]
  %167 = load double, ptr %2, align 8
  %168 = getelementptr inbounds %struct.codec_setup_info, ptr %.lcssa7, i64 0, i32 19, i32 5
  %169 = fcmp ogt double %167, 0.000000e+00
  %170 = select i1 %169, double 0.000000e+00, double %167
  %171 = fcmp olt double %170, -1.500000e+01
  %172 = select i1 %171, double -1.500000e+01, double %170
  store double %172, ptr %168, align 8
  br i1 %.lcssa16, label %175, label %176

173:                                              ; preds = %145, %141, %104, %89, %18, %14
  %.lcssa9 = phi i1 [ %.lcssa12, %145 ], [ %.lcssa12, %141 ], [ %.lcssa11, %104 ], [ %.lcssa11, %89 ], [ %9, %18 ], [ %9, %14 ]
  %174 = phi i32 [ 0, %104 ], [ 0, %141 ], [ 0, %89 ], [ 0, %145 ], [ -131, %14 ], [ -130, %18 ]
  br i1 %.lcssa9, label %175, label %176

175:                                              ; preds = %173, %166, %163, %156, %153, %151, %108, %19
  br label %176

176:                                              ; preds = %175, %173, %166, %163, %156, %153, %151, %108, %44, %19, %3
  %177 = phi i32 [ 0, %175 ], [ %174, %173 ], [ 0, %166 ], [ 0, %163 ], [ 0, %156 ], [ 0, %153 ], [ 0, %19 ], [ 0, %108 ], [ 0, %151 ], [ -131, %3 ], [ 0, %44 ]
  ret i32 %177
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @vorbis_encode_setup_managed(ptr nocapture noundef %0, i64 noundef %1, i64 noundef %2, i64 noundef %3, i64 noundef %4, i64 noundef %5) #0 {
  %7 = getelementptr inbounds %struct.vorbis_info, ptr %0, i64 0, i32 7
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds %struct.codec_setup_info, ptr %8, i64 0, i32 19
  %10 = sitofp i64 %4 to double
  %11 = icmp slt i64 %4, 1
  br i1 %11, label %12, label %20

12:                                               ; preds = %6
  %13 = icmp sgt i64 %3, 0
  br i1 %13, label %14, label %18

14:                                               ; preds = %12
  %15 = sitofp i64 %3 to double
  %16 = fmul double %15, 8.750000e-01
  %17 = fptosi double %16 to i64
  br label %20

18:                                               ; preds = %12
  %19 = icmp sgt i64 %5, 0
  br i1 %19, label %20, label %38

20:                                               ; preds = %18, %14, %6
  %21 = phi i64 [ %17, %14 ], [ %4, %6 ], [ %5, %18 ]
  %22 = sitofp i64 %21 to double
  tail call fastcc void @get_setup_template(ptr noundef nonnull %0, i64 noundef %1, i64 noundef %2, double noundef %22, i32 noundef 1) #56
  %23 = load ptr, ptr %9, align 8
  %24 = icmp eq ptr %23, null
  br i1 %24, label %38, label %25

25:                                               ; preds = %20
  %26 = tail call fastcc i32 @vorbis_encode_setup_setting(ptr noundef nonnull %0, i64 noundef %1, i64 noundef %2) #56, !range !34
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %29, label %28

28:                                               ; preds = %25
  tail call void @vorbis_info_clear(ptr noundef nonnull %0) #56
  br label %38

29:                                               ; preds = %25
  %30 = getelementptr inbounds %struct.codec_setup_info, ptr %8, i64 0, i32 19, i32 6
  store i32 1, ptr %30, align 8
  %31 = getelementptr inbounds %struct.codec_setup_info, ptr %8, i64 0, i32 19, i32 13
  store double 5.000000e-01, ptr %31, align 8
  %32 = getelementptr inbounds %struct.codec_setup_info, ptr %8, i64 0, i32 19, i32 11
  store <2 x double> <double 2.000000e+00, double 4.000000e+00>, ptr %32, align 8
  %33 = getelementptr inbounds %struct.codec_setup_info, ptr %8, i64 0, i32 19, i32 7
  store i64 %5, ptr %33, align 8
  %34 = getelementptr inbounds %struct.codec_setup_info, ptr %8, i64 0, i32 19, i32 10
  store i64 %3, ptr %34, align 8
  %35 = fptosi double %10 to i64
  %36 = getelementptr inbounds %struct.codec_setup_info, ptr %8, i64 0, i32 19, i32 8
  store i64 %35, ptr %36, align 8
  %37 = getelementptr inbounds %struct.codec_setup_info, ptr %8, i64 0, i32 19, i32 9
  store i64 %35, ptr %37, align 8
  br label %38

38:                                               ; preds = %29, %28, %20, %18
  %39 = phi i32 [ %26, %28 ], [ 0, %29 ], [ -131, %18 ], [ -130, %20 ]
  ret i32 %39
}

; Function Attrs: nofree nounwind optsize uwtable
define internal i32 @vorbis_encode_setup_init(ptr nocapture noundef %0) #3 {
  %2 = getelementptr inbounds %struct.vorbis_info, ptr %0, i64 0, i32 7
  %3 = load ptr, ptr %2, align 8
  %4 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 19
  %5 = icmp eq ptr %3, null
  br i1 %5, label %971, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 19, i32 14
  %8 = load i32, ptr %7, align 8
  %9 = icmp eq i32 %8, 0
  %10 = zext i1 %9 to i64
  %11 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 19, i32 18
  %12 = load double, ptr %11, align 8
  %13 = fcmp ogt double %12, -8.000000e+01
  br i1 %13, label %16, label %14

14:                                               ; preds = %6
  %15 = fcmp olt double %12, -2.000000e+02
  br i1 %15, label %16, label %18

16:                                               ; preds = %14, %6
  %17 = phi double [ -8.000000e+01, %6 ], [ -2.000000e+02, %14 ]
  store double %17, ptr %11, align 8
  br label %18

18:                                               ; preds = %16, %14
  %19 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 19, i32 20
  %20 = load double, ptr %19, align 8
  %21 = fcmp ogt double %20, 0.000000e+00
  br i1 %21, label %24, label %22

22:                                               ; preds = %18
  %23 = fcmp olt double %20, -9.999900e+04
  br i1 %23, label %24, label %26

24:                                               ; preds = %22, %18
  %25 = phi double [ 0.000000e+00, %18 ], [ -9.999900e+04, %22 ]
  store double %25, ptr %19, align 8
  br label %26

26:                                               ; preds = %24, %22
  %27 = load ptr, ptr %4, align 8
  %28 = icmp eq ptr %27, null
  br i1 %28, label %971, label %29

29:                                               ; preds = %26
  %30 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 19, i32 1
  store i32 1, ptr %30, align 8
  %31 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 19, i32 2
  %32 = load double, ptr %31, align 8
  %33 = getelementptr inbounds %struct.ve_setup_data_template, ptr %27, i64 0, i32 6
  %34 = load ptr, ptr %33, align 8
  %35 = getelementptr inbounds %struct.ve_setup_data_template, ptr %27, i64 0, i32 7
  %36 = load ptr, ptr %35, align 8
  %37 = load ptr, ptr %2, align 8
  %38 = fptosi double %32 to i32
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i32, ptr %34, i64 %39
  %41 = load i32, ptr %40, align 4
  %42 = getelementptr inbounds i32, ptr %36, i64 %39
  %43 = load i32, ptr %42, align 4
  %44 = sext i32 %41 to i64
  store i64 %44, ptr %37, align 8
  %45 = sext i32 %43 to i64
  %46 = getelementptr inbounds [2 x i64], ptr %37, i64 0, i64 1
  store i64 %45, ptr %46, align 8
  %47 = load i64, ptr %3, align 8
  %48 = getelementptr inbounds [2 x i64], ptr %3, i64 0, i64 1
  %49 = load i64, ptr %48, align 8
  %50 = icmp eq i64 %47, %49
  %51 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 19, i32 4
  %52 = load double, ptr %51, align 8
  %53 = getelementptr inbounds %struct.ve_setup_data_template, ptr %27, i64 0, i32 32
  %54 = load ptr, ptr %53, align 8
  %55 = getelementptr inbounds %struct.ve_setup_data_template, ptr %27, i64 0, i32 33
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr inbounds %struct.ve_setup_data_template, ptr %27, i64 0, i32 34
  %58 = load ptr, ptr %57, align 8
  tail call fastcc void @vorbis_encode_floor_setup(ptr noundef nonnull %0, double noundef %52, i32 noundef 0, ptr noundef %54, ptr noundef %56, ptr noundef %58) #56
  br i1 %50, label %66, label %59

59:                                               ; preds = %29
  %60 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 19, i32 3
  %61 = load double, ptr %60, align 8
  %62 = load ptr, ptr %53, align 8
  %63 = load ptr, ptr %55, align 8
  %64 = getelementptr inbounds %struct.ve_setup_data_template, ptr %27, i64 0, i32 35
  %65 = load ptr, ptr %64, align 8
  tail call fastcc void @vorbis_encode_floor_setup(ptr noundef nonnull %0, double noundef %61, i32 noundef 1, ptr noundef %62, ptr noundef %63, ptr noundef %65) #56
  br label %66

66:                                               ; preds = %59, %29
  %67 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 19, i32 21
  %68 = load double, ptr %67, align 8
  %69 = getelementptr inbounds %struct.ve_setup_data_template, ptr %27, i64 0, i32 29
  %70 = load ptr, ptr %69, align 8
  %71 = getelementptr inbounds %struct.ve_setup_data_template, ptr %27, i64 0, i32 30
  %72 = load ptr, ptr %71, align 8
  %73 = fptosi double %68 to i32
  %74 = sitofp i32 %73 to double
  %75 = load ptr, ptr %2, align 8
  %76 = getelementptr inbounds %struct.codec_setup_info, ptr %75, i64 0, i32 17
  %77 = sext i32 %73 to i64
  %78 = getelementptr inbounds double, ptr %72, i64 %77
  %79 = load double, ptr %78, align 8
  %80 = fptosi double %79 to i32
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds %struct.vorbis_info_psy_global, ptr %70, i64 %81
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(492) %76, ptr noundef nonnull align 4 dereferenceable(492) %82, i64 492, i1 false)
  %83 = fsub double %68, %74
  %84 = fsub double 1.000000e+00, %83
  %85 = load <2 x double>, ptr %78, align 8
  %86 = insertelement <2 x double> poison, double %84, i64 0
  %87 = insertelement <2 x double> %86, double %83, i64 1
  %88 = fmul <2 x double> %87, %85
  %89 = shufflevector <2 x double> %88, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %90 = fadd <2 x double> %88, %89
  %91 = extractelement <2 x double> %90, i64 0
  %92 = fptosi double %91 to i32
  %93 = sitofp i32 %92 to double
  %94 = fsub double %91, %93
  %95 = fcmp oeq double %94, 0.000000e+00
  %96 = icmp sgt i32 %92, 0
  %97 = and i1 %96, %95
  %98 = select i1 %97, double 1.000000e+00, double %94
  %99 = sext i1 %97 to i32
  %100 = add nsw i32 %99, %92
  %101 = sext i32 %100 to i64
  %102 = fsub double 1.000000e+00, %98
  %103 = add nsw i32 %100, 1
  %104 = sext i32 %103 to i64
  br label %105

105:                                              ; preds = %105, %66
  %106 = phi i64 [ 0, %66 ], [ %129, %105 ]
  %107 = getelementptr inbounds %struct.vorbis_info_psy_global, ptr %70, i64 %101, i32 1, i64 %106
  %108 = load float, ptr %107, align 4
  %109 = fpext float %108 to double
  %110 = fmul double %102, %109
  %111 = getelementptr inbounds %struct.vorbis_info_psy_global, ptr %70, i64 %104, i32 1, i64 %106
  %112 = load float, ptr %111, align 4
  %113 = fpext float %112 to double
  %114 = fmul double %98, %113
  %115 = fadd double %110, %114
  %116 = fptrunc double %115 to float
  %117 = getelementptr inbounds %struct.codec_setup_info, ptr %75, i64 0, i32 17, i32 1, i64 %106
  store float %116, ptr %117, align 4
  %118 = getelementptr inbounds %struct.vorbis_info_psy_global, ptr %70, i64 %101, i32 2, i64 %106
  %119 = load float, ptr %118, align 4
  %120 = fpext float %119 to double
  %121 = fmul double %102, %120
  %122 = getelementptr inbounds %struct.vorbis_info_psy_global, ptr %70, i64 %104, i32 2, i64 %106
  %123 = load float, ptr %122, align 4
  %124 = fpext float %123 to double
  %125 = fmul double %98, %124
  %126 = fadd double %121, %125
  %127 = fptrunc double %126 to float
  %128 = getelementptr inbounds %struct.codec_setup_info, ptr %75, i64 0, i32 17, i32 2, i64 %106
  store float %127, ptr %128, align 4
  %129 = add nuw nsw i64 %106, 1
  %130 = icmp eq i64 %129, 4
  br i1 %130, label %131, label %105, !llvm.loop !48

131:                                              ; preds = %105
  %132 = getelementptr inbounds %struct.codec_setup_info, ptr %75, i64 0, i32 19, i32 20
  %133 = load double, ptr %132, align 8
  %134 = fptrunc double %133 to float
  %135 = getelementptr inbounds %struct.codec_setup_info, ptr %75, i64 0, i32 17, i32 5
  store float %134, ptr %135, align 4
  %136 = getelementptr inbounds %struct.ve_setup_data_template, ptr %27, i64 0, i32 31
  %137 = load ptr, ptr %136, align 8
  %138 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 19, i32 16
  %139 = load double, ptr %138, align 8
  %140 = fptrunc double %139 to float
  %141 = fptosi float %140 to i32
  %142 = sitofp i32 %141 to float
  %143 = fsub float %140, %142
  %144 = fpext float %143 to double
  %145 = load ptr, ptr %2, align 8
  %146 = icmp eq ptr %137, null
  br i1 %146, label %147, label %154

147:                                              ; preds = %131
  %148 = load i64, ptr %145, align 8
  %149 = trunc i64 %148 to i32
  %150 = getelementptr inbounds %struct.codec_setup_info, ptr %145, i64 0, i32 17, i32 10
  %151 = getelementptr inbounds [2 x i64], ptr %145, i64 0, i64 1
  %152 = load i64, ptr %151, align 8
  %153 = trunc i64 %152 to i32
  br label %300

154:                                              ; preds = %131
  %155 = getelementptr inbounds %struct.codec_setup_info, ptr %145, i64 0, i32 17, i32 8
  %156 = sext i32 %141 to i64
  %157 = getelementptr inbounds %struct.adj_stereo, ptr %137, i64 %156
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(60) %155, ptr noundef nonnull align 4 dereferenceable(60) %157, i64 60, i1 false)
  %158 = getelementptr inbounds %struct.codec_setup_info, ptr %145, i64 0, i32 17, i32 9
  %159 = getelementptr inbounds %struct.adj_stereo, ptr %137, i64 %156, i32 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(60) %158, ptr noundef nonnull align 4 dereferenceable(60) %159, i64 60, i1 false)
  %160 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 19, i32 6
  %161 = load i32, ptr %160, align 8
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %229, label %163

163:                                              ; preds = %154
  %164 = fsub double 1.000000e+00, %144
  %165 = add nsw i32 %141, 1
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds %struct.vorbis_info, ptr %0, i64 0, i32 2
  %168 = load i64, ptr %145, align 8
  %169 = sitofp i64 %168 to double
  %170 = getelementptr inbounds %struct.codec_setup_info, ptr %145, i64 0, i32 17, i32 7
  %171 = getelementptr inbounds [2 x i64], ptr %145, i64 0, i64 1
  %172 = getelementptr inbounds %struct.codec_setup_info, ptr %145, i64 0, i32 17, i32 10
  %173 = load i64, ptr %171, align 8
  %174 = sitofp i64 %173 to double
  br label %175

175:                                              ; preds = %175, %163
  %176 = phi i64 [ 0, %163 ], [ %227, %175 ]
  %177 = getelementptr inbounds %struct.adj_stereo, ptr %137, i64 %156, i32 2, i64 %176
  %178 = load float, ptr %177, align 4
  %179 = fpext float %178 to double
  %180 = fmul double %164, %179
  %181 = getelementptr inbounds %struct.adj_stereo, ptr %137, i64 %166, i32 2, i64 %176
  %182 = load float, ptr %181, align 4
  %183 = fpext float %182 to double
  %184 = fmul double %144, %183
  %185 = fadd double %180, %184
  %186 = fptrunc double %185 to float
  %187 = fpext float %186 to double
  %188 = fmul double %187, 1.000000e+03
  %189 = load i64, ptr %167, align 8
  %190 = sitofp i64 %189 to double
  %191 = fdiv double %188, %190
  %192 = fmul double %191, %169
  %193 = fptosi double %192 to i32
  %194 = getelementptr inbounds [15 x i32], ptr %170, i64 0, i64 %176
  store i32 %193, ptr %194, align 4
  %195 = load i64, ptr %167, align 8
  %196 = sitofp i64 %195 to double
  %197 = fdiv double %188, %196
  %198 = fmul double %197, %174
  %199 = fptosi double %198 to i32
  %200 = getelementptr inbounds %struct.codec_setup_info, ptr %145, i64 0, i32 17, i32 7, i64 1, i64 %176
  store i32 %199, ptr %200, align 4
  %201 = fptosi float %186 to i32
  %202 = getelementptr inbounds %struct.codec_setup_info, ptr %145, i64 0, i32 17, i32 6, i64 %176
  store i32 %201, ptr %202, align 4
  %203 = getelementptr inbounds %struct.adj_stereo, ptr %137, i64 %156, i32 3, i64 %176
  %204 = load float, ptr %203, align 4
  %205 = fpext float %204 to double
  %206 = fmul double %164, %205
  %207 = getelementptr inbounds %struct.adj_stereo, ptr %137, i64 %166, i32 3, i64 %176
  %208 = load float, ptr %207, align 4
  %209 = fpext float %208 to double
  %210 = fmul double %144, %209
  %211 = fadd double %206, %210
  %212 = fptrunc double %211 to float
  %213 = fpext float %212 to double
  %214 = fmul double %213, 1.000000e+03
  %215 = load i64, ptr %167, align 8
  %216 = sitofp i64 %215 to double
  %217 = fdiv double %214, %216
  %218 = fmul double %217, %169
  %219 = fptosi double %218 to i32
  %220 = getelementptr inbounds [15 x i32], ptr %172, i64 0, i64 %176
  store i32 %219, ptr %220, align 4
  %221 = load i64, ptr %167, align 8
  %222 = sitofp i64 %221 to double
  %223 = fdiv double %214, %222
  %224 = fmul double %223, %174
  %225 = fptosi double %224 to i32
  %226 = getelementptr inbounds %struct.codec_setup_info, ptr %145, i64 0, i32 17, i32 10, i64 1, i64 %176
  store i32 %225, ptr %226, align 4
  %227 = add nuw nsw i64 %176, 1
  %228 = icmp eq i64 %227, 15
  br i1 %228, label %306, label %175, !llvm.loop !49

229:                                              ; preds = %154
  %230 = getelementptr inbounds %struct.adj_stereo, ptr %137, i64 %156, i32 2, i64 7
  %231 = load float, ptr %230, align 4
  %232 = fpext float %231 to double
  %233 = fsub double 1.000000e+00, %144
  %234 = fmul double %233, %232
  %235 = add nsw i32 %141, 1
  %236 = sext i32 %235 to i64
  %237 = getelementptr inbounds %struct.adj_stereo, ptr %137, i64 %236, i32 2, i64 7
  %238 = load float, ptr %237, align 4
  %239 = fpext float %238 to double
  %240 = fmul double %144, %239
  %241 = fadd double %234, %240
  %242 = fptrunc double %241 to float
  %243 = fpext float %242 to double
  %244 = fmul double %243, 1.000000e+03
  %245 = getelementptr inbounds %struct.vorbis_info, ptr %0, i64 0, i32 2
  %246 = load i64, ptr %145, align 8
  %247 = sitofp i64 %246 to double
  %248 = getelementptr inbounds %struct.codec_setup_info, ptr %145, i64 0, i32 17, i32 7
  %249 = getelementptr inbounds [2 x i64], ptr %145, i64 0, i64 1
  %250 = fptosi float %242 to i32
  %251 = load i64, ptr %249, align 8
  %252 = sitofp i64 %251 to double
  br label %253

253:                                              ; preds = %253, %229
  %254 = phi i64 [ 0, %229 ], [ %268, %253 ]
  %255 = load i64, ptr %245, align 8
  %256 = sitofp i64 %255 to double
  %257 = fdiv double %244, %256
  %258 = fmul double %257, %247
  %259 = fptosi double %258 to i32
  %260 = getelementptr inbounds [15 x i32], ptr %248, i64 0, i64 %254
  store i32 %259, ptr %260, align 4
  %261 = load i64, ptr %245, align 8
  %262 = sitofp i64 %261 to double
  %263 = fdiv double %244, %262
  %264 = fmul double %263, %252
  %265 = fptosi double %264 to i32
  %266 = getelementptr inbounds %struct.codec_setup_info, ptr %145, i64 0, i32 17, i32 7, i64 1, i64 %254
  store i32 %265, ptr %266, align 4
  %267 = getelementptr inbounds %struct.codec_setup_info, ptr %145, i64 0, i32 17, i32 6, i64 %254
  store i32 %250, ptr %267, align 4
  %268 = add nuw nsw i64 %254, 1
  %269 = icmp eq i64 %268, 15
  br i1 %269, label %270, label %253, !llvm.loop !50

270:                                              ; preds = %253
  %271 = getelementptr inbounds %struct.adj_stereo, ptr %137, i64 %156, i32 3, i64 7
  %272 = load float, ptr %271, align 4
  %273 = fpext float %272 to double
  %274 = fmul double %233, %273
  %275 = getelementptr inbounds %struct.adj_stereo, ptr %137, i64 %236, i32 3, i64 7
  %276 = load float, ptr %275, align 4
  %277 = fpext float %276 to double
  %278 = fmul double %144, %277
  %279 = fadd double %274, %278
  %280 = fptrunc double %279 to float
  %281 = fpext float %280 to double
  %282 = fmul double %281, 1.000000e+03
  %283 = getelementptr inbounds %struct.codec_setup_info, ptr %145, i64 0, i32 17, i32 10
  br label %284

284:                                              ; preds = %284, %270
  %285 = phi i64 [ 0, %270 ], [ %298, %284 ]
  %286 = load i64, ptr %245, align 8
  %287 = sitofp i64 %286 to double
  %288 = fdiv double %282, %287
  %289 = fmul double %288, %247
  %290 = fptosi double %289 to i32
  %291 = getelementptr inbounds [15 x i32], ptr %283, i64 0, i64 %285
  store i32 %290, ptr %291, align 4
  %292 = load i64, ptr %245, align 8
  %293 = sitofp i64 %292 to double
  %294 = fdiv double %282, %293
  %295 = fmul double %294, %252
  %296 = fptosi double %295 to i32
  %297 = getelementptr inbounds %struct.codec_setup_info, ptr %145, i64 0, i32 17, i32 10, i64 1, i64 %285
  store i32 %296, ptr %297, align 4
  %298 = add nuw nsw i64 %285, 1
  %299 = icmp eq i64 %298, 15
  br i1 %299, label %306, label %284, !llvm.loop !51

300:                                              ; preds = %300, %147
  %301 = phi i64 [ 0, %147 ], [ %304, %300 ]
  %302 = getelementptr inbounds [15 x i32], ptr %150, i64 0, i64 %301
  store i32 %149, ptr %302, align 4
  %303 = getelementptr inbounds %struct.codec_setup_info, ptr %145, i64 0, i32 17, i32 10, i64 1, i64 %301
  store i32 %153, ptr %303, align 4
  %304 = add nuw nsw i64 %301, 1
  %305 = icmp eq i64 %304, 15
  br i1 %305, label %306, label %300, !llvm.loop !52

306:                                              ; preds = %300, %284, %175
  %307 = load double, ptr %51, align 8
  %308 = getelementptr inbounds %struct.ve_setup_data_template, ptr %27, i64 0, i32 23
  %309 = load ptr, ptr %308, align 8
  %310 = getelementptr inbounds %struct.ve_setup_data_template, ptr %27, i64 0, i32 24
  %311 = load ptr, ptr %310, align 8
  %312 = getelementptr inbounds %struct.ve_setup_data_template, ptr %27, i64 0, i32 25
  %313 = load ptr, ptr %312, align 8
  tail call fastcc void @vorbis_encode_psyset_setup(ptr noundef %0, double noundef %307, ptr noundef %309, ptr noundef %311, ptr noundef %313, i32 noundef 0) #56
  %314 = load double, ptr %51, align 8
  %315 = load ptr, ptr %308, align 8
  %316 = load ptr, ptr %310, align 8
  %317 = load ptr, ptr %312, align 8
  tail call fastcc void @vorbis_encode_psyset_setup(ptr noundef %0, double noundef %314, ptr noundef %315, ptr noundef %316, ptr noundef %317, i32 noundef 1) #56
  br i1 %50, label %330, label %318

318:                                              ; preds = %306
  %319 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 19, i32 3
  %320 = load double, ptr %319, align 8
  %321 = getelementptr inbounds %struct.ve_setup_data_template, ptr %27, i64 0, i32 23, i64 1
  %322 = load ptr, ptr %321, align 8
  %323 = getelementptr inbounds %struct.ve_setup_data_template, ptr %27, i64 0, i32 24, i64 1
  %324 = load ptr, ptr %323, align 8
  %325 = load ptr, ptr %312, align 8
  tail call fastcc void @vorbis_encode_psyset_setup(ptr noundef %0, double noundef %320, ptr noundef %322, ptr noundef %324, ptr noundef %325, i32 noundef 2) #56
  %326 = load double, ptr %319, align 8
  %327 = load ptr, ptr %321, align 8
  %328 = load ptr, ptr %323, align 8
  %329 = load ptr, ptr %312, align 8
  tail call fastcc void @vorbis_encode_psyset_setup(ptr noundef %0, double noundef %326, ptr noundef %327, ptr noundef %328, ptr noundef %329, i32 noundef 3) #56
  br label %330

330:                                              ; preds = %318, %306
  %331 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 19, i32 22, i64 %10
  %332 = load double, ptr %331, align 8
  %333 = getelementptr inbounds %struct.ve_setup_data_template, ptr %27, i64 0, i32 8
  %334 = load ptr, ptr %333, align 8
  %335 = getelementptr inbounds %struct.ve_setup_data_template, ptr %27, i64 0, i32 9
  %336 = load ptr, ptr %335, align 8
  %337 = getelementptr inbounds %struct.ve_setup_data_template, ptr %27, i64 0, i32 11
  %338 = load ptr, ptr %337, align 8
  tail call fastcc void @vorbis_encode_tonemask_setup(ptr noundef %0, double noundef %332, i32 noundef 0, ptr noundef %334, ptr noundef %336, ptr noundef %338) #56
  %339 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 19, i32 22, i64 1
  %340 = load double, ptr %339, align 8
  %341 = load ptr, ptr %333, align 8
  %342 = load ptr, ptr %335, align 8
  %343 = getelementptr inbounds %struct.ve_setup_data_template, ptr %27, i64 0, i32 13
  %344 = load ptr, ptr %343, align 8
  tail call fastcc void @vorbis_encode_tonemask_setup(ptr noundef %0, double noundef %340, i32 noundef 1, ptr noundef %341, ptr noundef %342, ptr noundef %344) #56
  br i1 %50, label %357, label %345

345:                                              ; preds = %330
  %346 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 19, i32 22, i64 2
  %347 = load double, ptr %346, align 8
  %348 = load ptr, ptr %333, align 8
  %349 = load ptr, ptr %335, align 8
  %350 = load ptr, ptr %343, align 8
  tail call fastcc void @vorbis_encode_tonemask_setup(ptr noundef %0, double noundef %347, i32 noundef 2, ptr noundef %348, ptr noundef %349, ptr noundef %350) #56
  %351 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 19, i32 22, i64 3
  %352 = load double, ptr %351, align 8
  %353 = load ptr, ptr %333, align 8
  %354 = load ptr, ptr %335, align 8
  %355 = getelementptr inbounds %struct.ve_setup_data_template, ptr %27, i64 0, i32 12
  %356 = load ptr, ptr %355, align 8
  tail call fastcc void @vorbis_encode_tonemask_setup(ptr noundef %0, double noundef %352, i32 noundef 3, ptr noundef %353, ptr noundef %354, ptr noundef %356) #56
  br label %357

357:                                              ; preds = %345, %330
  %358 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 19, i32 22, i64 %10, i32 3
  %359 = load double, ptr %358, align 8
  %360 = getelementptr inbounds %struct.ve_setup_data_template, ptr %27, i64 0, i32 20
  %361 = load ptr, ptr %360, align 8
  %362 = getelementptr inbounds %struct.ve_setup_data_template, ptr %27, i64 0, i32 21
  %363 = load ptr, ptr %362, align 8
  tail call fastcc void @vorbis_encode_compand_setup(ptr noundef %0, double noundef %359, i32 noundef 0, ptr noundef %361, ptr noundef %363) #56
  %364 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 19, i32 22, i64 1, i32 3
  %365 = load double, ptr %364, align 8
  %366 = load ptr, ptr %360, align 8
  %367 = load ptr, ptr %362, align 8
  tail call fastcc void @vorbis_encode_compand_setup(ptr noundef %0, double noundef %365, i32 noundef 1, ptr noundef %366, ptr noundef %367) #56
  br i1 %50, label %378, label %368

368:                                              ; preds = %357
  %369 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 19, i32 22, i64 2, i32 3
  %370 = load double, ptr %369, align 8
  %371 = load ptr, ptr %360, align 8
  %372 = getelementptr inbounds %struct.ve_setup_data_template, ptr %27, i64 0, i32 22
  %373 = load ptr, ptr %372, align 8
  tail call fastcc void @vorbis_encode_compand_setup(ptr noundef %0, double noundef %370, i32 noundef 2, ptr noundef %371, ptr noundef %373) #56
  %374 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 19, i32 22, i64 3, i32 3
  %375 = load double, ptr %374, align 8
  %376 = load ptr, ptr %360, align 8
  %377 = load ptr, ptr %372, align 8
  tail call fastcc void @vorbis_encode_compand_setup(ptr noundef %0, double noundef %375, i32 noundef 3, ptr noundef %376, ptr noundef %377) #56
  br label %378

378:                                              ; preds = %368, %357
  %379 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 19, i32 22, i64 %10, i32 1
  %380 = load double, ptr %379, align 8
  %381 = getelementptr inbounds %struct.ve_setup_data_template, ptr %27, i64 0, i32 10
  %382 = load ptr, ptr %381, align 8
  %383 = fptosi double %380 to i32
  %384 = sitofp i32 %383 to double
  %385 = load ptr, ptr %2, align 8
  %386 = getelementptr inbounds %struct.codec_setup_info, ptr %385, i64 0, i32 16, i64 0
  %387 = load ptr, ptr %386, align 8
  %388 = sext i32 %383 to i64
  %389 = getelementptr inbounds i32, ptr %382, i64 %388
  %390 = fsub double %380, %384
  %391 = fsub double 1.000000e+00, %390
  %392 = load <2 x i32>, ptr %389, align 4
  %393 = sitofp <2 x i32> %392 to <2 x double>
  %394 = insertelement <2 x double> poison, double %391, i64 0
  %395 = insertelement <2 x double> %394, double %390, i64 1
  %396 = fmul <2 x double> %395, %393
  %397 = shufflevector <2 x double> %396, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %398 = fadd <2 x double> %396, %397
  %399 = extractelement <2 x double> %398, i64 0
  %400 = fptrunc double %399 to float
  %401 = getelementptr inbounds %struct.vorbis_info_psy, ptr %387, i64 0, i32 6
  store float %400, ptr %401, align 8
  %402 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 19, i32 22, i64 1, i32 1
  %403 = load double, ptr %402, align 8
  %404 = load ptr, ptr %381, align 8
  %405 = fptosi double %403 to i32
  %406 = sitofp i32 %405 to double
  %407 = load ptr, ptr %2, align 8
  %408 = getelementptr inbounds %struct.codec_setup_info, ptr %407, i64 0, i32 16, i64 1
  %409 = load ptr, ptr %408, align 8
  %410 = sext i32 %405 to i64
  %411 = getelementptr inbounds i32, ptr %404, i64 %410
  %412 = fsub double %403, %406
  %413 = fsub double 1.000000e+00, %412
  %414 = load <2 x i32>, ptr %411, align 4
  %415 = sitofp <2 x i32> %414 to <2 x double>
  %416 = insertelement <2 x double> poison, double %413, i64 0
  %417 = insertelement <2 x double> %416, double %412, i64 1
  %418 = fmul <2 x double> %417, %415
  %419 = shufflevector <2 x double> %418, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %420 = fadd <2 x double> %418, %419
  %421 = extractelement <2 x double> %420, i64 0
  %422 = fptrunc double %421 to float
  %423 = getelementptr inbounds %struct.vorbis_info_psy, ptr %409, i64 0, i32 6
  store float %422, ptr %423, align 8
  br i1 %50, label %469, label %424

424:                                              ; preds = %378
  %425 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 19, i32 22, i64 2, i32 1
  %426 = load double, ptr %425, align 8
  %427 = load ptr, ptr %381, align 8
  %428 = fptosi double %426 to i32
  %429 = sitofp i32 %428 to double
  %430 = load ptr, ptr %2, align 8
  %431 = getelementptr inbounds %struct.codec_setup_info, ptr %430, i64 0, i32 16, i64 2
  %432 = load ptr, ptr %431, align 8
  %433 = sext i32 %428 to i64
  %434 = getelementptr inbounds i32, ptr %427, i64 %433
  %435 = fsub double %426, %429
  %436 = fsub double 1.000000e+00, %435
  %437 = load <2 x i32>, ptr %434, align 4
  %438 = sitofp <2 x i32> %437 to <2 x double>
  %439 = insertelement <2 x double> poison, double %436, i64 0
  %440 = insertelement <2 x double> %439, double %435, i64 1
  %441 = fmul <2 x double> %440, %438
  %442 = shufflevector <2 x double> %441, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %443 = fadd <2 x double> %441, %442
  %444 = extractelement <2 x double> %443, i64 0
  %445 = fptrunc double %444 to float
  %446 = getelementptr inbounds %struct.vorbis_info_psy, ptr %432, i64 0, i32 6
  store float %445, ptr %446, align 8
  %447 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 19, i32 22, i64 3, i32 1
  %448 = load double, ptr %447, align 8
  %449 = load ptr, ptr %381, align 8
  %450 = fptosi double %448 to i32
  %451 = sitofp i32 %450 to double
  %452 = load ptr, ptr %2, align 8
  %453 = getelementptr inbounds %struct.codec_setup_info, ptr %452, i64 0, i32 16, i64 3
  %454 = load ptr, ptr %453, align 8
  %455 = sext i32 %450 to i64
  %456 = getelementptr inbounds i32, ptr %449, i64 %455
  %457 = fsub double %448, %451
  %458 = fsub double 1.000000e+00, %457
  %459 = load <2 x i32>, ptr %456, align 4
  %460 = sitofp <2 x i32> %459 to <2 x double>
  %461 = insertelement <2 x double> poison, double %458, i64 0
  %462 = insertelement <2 x double> %461, double %457, i64 1
  %463 = fmul <2 x double> %462, %460
  %464 = shufflevector <2 x double> %463, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %465 = fadd <2 x double> %463, %464
  %466 = extractelement <2 x double> %465, i64 0
  %467 = fptrunc double %466 to float
  %468 = getelementptr inbounds %struct.vorbis_info_psy, ptr %454, i64 0, i32 6
  store float %467, ptr %468, align 8
  br label %469

469:                                              ; preds = %424, %378
  %470 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 19, i32 22, i64 %10, i32 2
  %471 = load double, ptr %470, align 8
  %472 = getelementptr inbounds %struct.ve_setup_data_template, ptr %27, i64 0, i32 19
  %473 = load ptr, ptr %472, align 8
  %474 = getelementptr inbounds %struct.ve_setup_data_template, ptr %27, i64 0, i32 15
  %475 = load ptr, ptr %474, align 8
  %476 = getelementptr inbounds %struct.ve_setup_data_template, ptr %27, i64 0, i32 14
  %477 = load ptr, ptr %476, align 8
  br i1 %9, label %481, label %478

478:                                              ; preds = %469
  %479 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 19, i32 5
  %480 = load double, ptr %479, align 8
  br label %481

481:                                              ; preds = %478, %469
  %482 = phi double [ %480, %478 ], [ 0.000000e+00, %469 ]
  tail call fastcc void @vorbis_encode_noisebias_setup(ptr noundef nonnull %0, double noundef %471, i32 noundef 0, ptr noundef %473, ptr noundef %475, ptr noundef %477, double noundef %482) #56
  %483 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 19, i32 22, i64 1, i32 2
  %484 = load double, ptr %483, align 8
  %485 = load ptr, ptr %472, align 8
  %486 = getelementptr inbounds %struct.ve_setup_data_template, ptr %27, i64 0, i32 16
  %487 = load ptr, ptr %486, align 8
  %488 = load ptr, ptr %476, align 8
  tail call fastcc void @vorbis_encode_noisebias_setup(ptr noundef nonnull %0, double noundef %484, i32 noundef 1, ptr noundef %485, ptr noundef %487, ptr noundef %488, double noundef 0.000000e+00) #56
  br i1 %50, label %537, label %489

489:                                              ; preds = %481
  %490 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 19, i32 22, i64 2, i32 2
  %491 = load double, ptr %490, align 8
  %492 = load ptr, ptr %472, align 8
  %493 = getelementptr inbounds %struct.ve_setup_data_template, ptr %27, i64 0, i32 17
  %494 = load ptr, ptr %493, align 8
  %495 = load ptr, ptr %476, align 8
  tail call fastcc void @vorbis_encode_noisebias_setup(ptr noundef nonnull %0, double noundef %491, i32 noundef 2, ptr noundef %492, ptr noundef %494, ptr noundef %495, double noundef 0.000000e+00) #56
  %496 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 19, i32 22, i64 3, i32 2
  %497 = load double, ptr %496, align 8
  %498 = load ptr, ptr %472, align 8
  %499 = getelementptr inbounds %struct.ve_setup_data_template, ptr %27, i64 0, i32 18
  %500 = load ptr, ptr %499, align 8
  %501 = load ptr, ptr %476, align 8
  tail call fastcc void @vorbis_encode_noisebias_setup(ptr noundef nonnull %0, double noundef %497, i32 noundef 3, ptr noundef %498, ptr noundef %500, ptr noundef %501, double noundef 0.000000e+00) #56
  %502 = load ptr, ptr %2, align 8
  %503 = getelementptr inbounds %struct.codec_setup_info, ptr %502, i64 0, i32 16, i64 0
  %504 = load ptr, ptr %503, align 8
  %505 = getelementptr inbounds %struct.codec_setup_info, ptr %502, i64 0, i32 19, i32 18
  %506 = load double, ptr %505, align 8
  %507 = fptrunc double %506 to float
  %508 = getelementptr inbounds %struct.vorbis_info_psy, ptr %504, i64 0, i32 1
  store float %507, ptr %508, align 4
  %509 = getelementptr inbounds %struct.codec_setup_info, ptr %502, i64 0, i32 19, i32 19
  %510 = load double, ptr %509, align 8
  %511 = fptrunc double %510 to float
  %512 = getelementptr inbounds %struct.vorbis_info_psy, ptr %504, i64 0, i32 2
  store float %511, ptr %512, align 8
  %513 = load ptr, ptr %2, align 8
  %514 = getelementptr inbounds %struct.codec_setup_info, ptr %513, i64 0, i32 16, i64 1
  %515 = load ptr, ptr %514, align 8
  %516 = getelementptr inbounds %struct.codec_setup_info, ptr %513, i64 0, i32 19, i32 18
  %517 = load double, ptr %516, align 8
  %518 = fptrunc double %517 to float
  %519 = getelementptr inbounds %struct.vorbis_info_psy, ptr %515, i64 0, i32 1
  store float %518, ptr %519, align 4
  %520 = getelementptr inbounds %struct.codec_setup_info, ptr %513, i64 0, i32 19, i32 19
  %521 = load double, ptr %520, align 8
  %522 = fptrunc double %521 to float
  %523 = getelementptr inbounds %struct.vorbis_info_psy, ptr %515, i64 0, i32 2
  store float %522, ptr %523, align 8
  %524 = load ptr, ptr %2, align 8
  %525 = getelementptr inbounds %struct.codec_setup_info, ptr %524, i64 0, i32 16, i64 2
  %526 = load ptr, ptr %525, align 8
  %527 = getelementptr inbounds %struct.codec_setup_info, ptr %524, i64 0, i32 19, i32 18
  %528 = load double, ptr %527, align 8
  %529 = fptrunc double %528 to float
  %530 = getelementptr inbounds %struct.vorbis_info_psy, ptr %526, i64 0, i32 1
  store float %529, ptr %530, align 4
  %531 = getelementptr inbounds %struct.codec_setup_info, ptr %524, i64 0, i32 19, i32 19
  %532 = load double, ptr %531, align 8
  %533 = fptrunc double %532 to float
  %534 = getelementptr inbounds %struct.vorbis_info_psy, ptr %526, i64 0, i32 2
  store float %533, ptr %534, align 8
  %535 = load ptr, ptr %2, align 8
  %536 = getelementptr inbounds %struct.codec_setup_info, ptr %535, i64 0, i32 16, i64 3
  br label %551

537:                                              ; preds = %481
  %538 = load ptr, ptr %2, align 8
  %539 = getelementptr inbounds %struct.codec_setup_info, ptr %538, i64 0, i32 16, i64 0
  %540 = load ptr, ptr %539, align 8
  %541 = getelementptr inbounds %struct.codec_setup_info, ptr %538, i64 0, i32 19, i32 18
  %542 = load double, ptr %541, align 8
  %543 = fptrunc double %542 to float
  %544 = getelementptr inbounds %struct.vorbis_info_psy, ptr %540, i64 0, i32 1
  store float %543, ptr %544, align 4
  %545 = getelementptr inbounds %struct.codec_setup_info, ptr %538, i64 0, i32 19, i32 19
  %546 = load double, ptr %545, align 8
  %547 = fptrunc double %546 to float
  %548 = getelementptr inbounds %struct.vorbis_info_psy, ptr %540, i64 0, i32 2
  store float %547, ptr %548, align 8
  %549 = load ptr, ptr %2, align 8
  %550 = getelementptr inbounds %struct.codec_setup_info, ptr %549, i64 0, i32 16, i64 1
  br label %551

551:                                              ; preds = %537, %489
  %552 = phi ptr [ %550, %537 ], [ %536, %489 ]
  %553 = phi ptr [ %549, %537 ], [ %535, %489 ]
  %554 = load ptr, ptr %552, align 8
  %555 = getelementptr inbounds %struct.codec_setup_info, ptr %553, i64 0, i32 19, i32 18
  %556 = load double, ptr %555, align 8
  %557 = fptrunc double %556 to float
  %558 = getelementptr inbounds %struct.vorbis_info_psy, ptr %554, i64 0, i32 1
  store float %557, ptr %558, align 4
  %559 = getelementptr inbounds %struct.codec_setup_info, ptr %553, i64 0, i32 19, i32 19
  %560 = load double, ptr %559, align 8
  %561 = fptrunc double %560 to float
  %562 = getelementptr inbounds %struct.vorbis_info_psy, ptr %554, i64 0, i32 2
  store float %561, ptr %562, align 8
  %563 = load double, ptr %31, align 8
  %564 = getelementptr inbounds %struct.ve_setup_data_template, ptr %27, i64 0, i32 36
  %565 = load ptr, ptr %564, align 8
  %566 = load ptr, ptr %2, align 8
  %567 = fptosi double %563 to i32
  %568 = sext i32 %567 to i64
  %569 = getelementptr inbounds %struct.adv_opt, ptr %565, i64 %568
  %570 = load ptr, ptr %569, align 8
  %571 = getelementptr inbounds %struct.adv_opt, ptr %565, i64 %568, i32 1
  %572 = load ptr, ptr %571, align 8
  %573 = load i64, ptr %566, align 8
  %574 = getelementptr inbounds [2 x i64], ptr %566, i64 0, i64 1
  %575 = load i64, ptr %574, align 8
  %576 = icmp ne i64 %573, %575
  %577 = getelementptr inbounds %struct.codec_setup_info, ptr %566, i64 0, i32 1
  %578 = getelementptr inbounds %struct.codec_setup_info, ptr %566, i64 0, i32 2
  %579 = getelementptr inbounds %struct.vorbis_info, ptr %0, i64 0, i32 1
  %580 = getelementptr inbounds %struct.vorbis_info, ptr %0, i64 0, i32 2
  br label %581

581:                                              ; preds = %905, %551
  %582 = phi i1 [ true, %551 ], [ false, %905 ]
  %583 = phi i64 [ 0, %551 ], [ 1, %905 ]
  %584 = tail call noalias dereferenceable_or_null(3208) ptr @calloc(i64 noundef 1, i64 noundef 3208) #65
  %585 = getelementptr inbounds %struct.codec_setup_info, ptr %566, i64 0, i32 9, i64 %583
  store ptr %584, ptr %585, align 8
  %586 = tail call noalias dereferenceable_or_null(16) ptr @calloc(i64 noundef 1, i64 noundef 16) #65
  %587 = getelementptr inbounds %struct.codec_setup_info, ptr %566, i64 0, i32 7, i64 %583
  store ptr %586, ptr %587, align 8
  %588 = getelementptr inbounds %struct.vorbis_info_mode, ptr @_mode_template, i64 %583
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %586, ptr noundef nonnull align 16 dereferenceable(16) %588, i64 16, i1 false)
  %589 = load i32, ptr %577, align 8
  %590 = sext i32 %589 to i64
  %591 = icmp slt i64 %583, %590
  br i1 %591, label %595, label %592

592:                                              ; preds = %581
  %593 = trunc i64 %583 to i32
  %594 = add nuw nsw i32 %593, 1
  store i32 %594, ptr %577, align 8
  br label %595

595:                                              ; preds = %592, %581
  %596 = getelementptr inbounds %struct.codec_setup_info, ptr %566, i64 0, i32 8, i64 %583
  store i32 0, ptr %596, align 4
  %597 = load ptr, ptr %585, align 8
  %598 = getelementptr inbounds %struct.vorbis_info_mapping0, ptr %570, i64 %583
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(3208) %597, ptr noundef nonnull align 4 dereferenceable(3208) %598, i64 3208, i1 false)
  %599 = load i32, ptr %578, align 4
  %600 = sext i32 %599 to i64
  %601 = icmp slt i64 %583, %600
  br i1 %601, label %605, label %602

602:                                              ; preds = %595
  %603 = trunc i64 %583 to i32
  %604 = add nuw nsw i32 %603, 1
  store i32 %604, ptr %578, align 4
  br label %605

605:                                              ; preds = %602, %595
  %606 = load i32, ptr %598, align 4
  %607 = icmp sgt i32 %606, 0
  br i1 %607, label %608, label %905

608:                                              ; preds = %885, %605
  %609 = phi i64 [ %901, %885 ], [ 0, %605 ]
  %610 = getelementptr inbounds %struct.vorbis_info_mapping0, ptr %570, i64 %583, i32 3, i64 %609
  %611 = load i32, ptr %610, align 4
  %612 = sext i32 %611 to i64
  %613 = getelementptr inbounds %struct.vorbis_residue_template, ptr %572, i64 %612
  %614 = load ptr, ptr %2, align 8
  %615 = tail call noalias dereferenceable_or_null(1824) ptr @malloc(i64 noundef 1824) #64
  %616 = getelementptr inbounds %struct.codec_setup_info, ptr %614, i64 0, i32 13, i64 %612
  store ptr %615, ptr %616, align 8
  %617 = getelementptr inbounds %struct.vorbis_residue_template, ptr %572, i64 %612, i32 2
  %618 = load ptr, ptr %617, align 8
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(1824) %615, ptr noundef nonnull align 8 dereferenceable(1824) %618, i64 1824, i1 false)
  %619 = getelementptr inbounds %struct.codec_setup_info, ptr %614, i64 0, i32 4
  %620 = load i32, ptr %619, align 4
  %621 = icmp sgt i32 %620, %611
  br i1 %621, label %624, label %622

622:                                              ; preds = %608
  %623 = add nsw i32 %611, 1
  store i32 %623, ptr %619, align 4
  br label %624

624:                                              ; preds = %622, %608
  %625 = getelementptr inbounds [2 x i64], ptr %614, i64 0, i64 %583
  %626 = load i64, ptr %625, align 8
  switch i64 %626, label %627 [
    i64 64, label %628
    i64 128, label %628
    i64 256, label %628
  ]

627:                                              ; preds = %624
  br label %628

628:                                              ; preds = %627, %624, %624, %624
  %629 = phi i32 [ 32, %627 ], [ 16, %624 ], [ 16, %624 ], [ 16, %624 ]
  %630 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %615, i64 0, i32 2
  store i32 %629, ptr %630, align 8
  %631 = load i32, ptr %613, align 8
  %632 = getelementptr inbounds %struct.codec_setup_info, ptr %614, i64 0, i32 12, i64 %612
  store i32 %631, ptr %632, align 4
  %633 = load i64, ptr %625, align 8
  %634 = ashr i64 %633, 1
  %635 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %615, i64 0, i32 1
  store i64 %634, ptr %635, align 8
  %636 = load i32, ptr %613, align 8
  %637 = icmp eq i32 %636, 2
  br i1 %637, label %638, label %642

638:                                              ; preds = %628
  %639 = load i32, ptr %579, align 4
  %640 = sext i32 %639 to i64
  %641 = mul nsw i64 %634, %640
  store i64 %641, ptr %635, align 8
  br label %642

642:                                              ; preds = %638, %628
  %643 = getelementptr inbounds %struct.codec_setup_info, ptr %614, i64 0, i32 19, i32 6
  %644 = load i32, ptr %643, align 8
  %645 = icmp eq i32 %644, 0
  %646 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %615, i64 0, i32 3
  %647 = load i32, ptr %646, align 4
  %648 = icmp sgt i32 %647, 0
  br i1 %645, label %654, label %649

649:                                              ; preds = %642
  br i1 %648, label %650, label %678

650:                                              ; preds = %649
  %651 = getelementptr inbounds %struct.vorbis_residue_template, ptr %572, i64 %612, i32 6
  %652 = load ptr, ptr %651, align 8
  %653 = zext i32 %647 to i64
  br label %659

654:                                              ; preds = %642
  br i1 %648, label %655, label %775

655:                                              ; preds = %654
  %656 = getelementptr inbounds %struct.vorbis_residue_template, ptr %572, i64 %612, i32 5
  %657 = load ptr, ptr %656, align 8
  %658 = zext i32 %647 to i64
  br label %756

659:                                              ; preds = %675, %650
  %660 = phi i64 [ 0, %650 ], [ %676, %675 ]
  %661 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %615, i64 0, i32 5, i64 %660
  br label %662

662:                                              ; preds = %672, %659
  %663 = phi i64 [ 0, %659 ], [ %673, %672 ]
  %664 = getelementptr inbounds [12 x [3 x ptr]], ptr %652, i64 0, i64 %660, i64 %663
  %665 = load ptr, ptr %664, align 8
  %666 = icmp eq ptr %665, null
  br i1 %666, label %672, label %667

667:                                              ; preds = %662
  %668 = trunc i64 %663 to i32
  %669 = shl nuw nsw i32 1, %668
  %670 = load i32, ptr %661, align 4
  %671 = or i32 %670, %669
  store i32 %671, ptr %661, align 4
  br label %672

672:                                              ; preds = %667, %662
  %673 = add nuw nsw i64 %663, 1
  %674 = icmp eq i64 %673, 3
  br i1 %674, label %675, label %662, !llvm.loop !53

675:                                              ; preds = %672
  %676 = add nuw nsw i64 %660, 1
  %677 = icmp eq i64 %676, %653
  br i1 %677, label %678, label %659, !llvm.loop !54

678:                                              ; preds = %675, %649
  %679 = getelementptr inbounds %struct.vorbis_residue_template, ptr %572, i64 %612, i32 4
  %680 = load ptr, ptr %679, align 8
  %681 = getelementptr inbounds %struct.codec_setup_info, ptr %614, i64 0, i32 5
  %682 = load i32, ptr %681, align 8
  %683 = icmp sgt i32 %682, 0
  br i1 %683, label %684, label %694

684:                                              ; preds = %678
  %685 = zext i32 %682 to i64
  br label %686

686:                                              ; preds = %691, %684
  %687 = phi i64 [ 0, %684 ], [ %692, %691 ]
  %688 = getelementptr inbounds %struct.codec_setup_info, ptr %614, i64 0, i32 14, i64 %687
  %689 = load ptr, ptr %688, align 8
  %690 = icmp eq ptr %689, %680
  br i1 %690, label %697, label %691

691:                                              ; preds = %686
  %692 = add nuw nsw i64 %687, 1
  %693 = icmp eq i64 %692, %685
  br i1 %693, label %694, label %686, !llvm.loop !55

694:                                              ; preds = %691, %678
  %695 = add nsw i32 %682, 1
  store i32 %695, ptr %681, align 8
  %696 = load ptr, ptr %679, align 8
  br label %699

697:                                              ; preds = %686
  %.lcssa = phi i64 [ %687, %686 ]
  %698 = trunc i64 %.lcssa to i32
  br label %699

699:                                              ; preds = %697, %694
  %700 = phi ptr [ %696, %694 ], [ %680, %697 ]
  %701 = phi i32 [ %682, %694 ], [ %698, %697 ]
  %702 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %615, i64 0, i32 4
  store i32 %701, ptr %702, align 8
  %703 = sext i32 %701 to i64
  %704 = getelementptr inbounds %struct.codec_setup_info, ptr %614, i64 0, i32 14, i64 %703
  store ptr %700, ptr %704, align 8
  %705 = load i32, ptr %646, align 4
  %706 = icmp sgt i32 %705, 0
  br i1 %706, label %707, label %853

707:                                              ; preds = %699
  %708 = getelementptr inbounds %struct.vorbis_residue_template, ptr %572, i64 %612, i32 6
  br label %709

709:                                              ; preds = %751, %707
  %710 = phi i64 [ 0, %707 ], [ %752, %751 ]
  %711 = phi i32 [ 0, %707 ], [ %.lcssa2, %751 ]
  br label %712

712:                                              ; preds = %747, %709
  %713 = phi i64 [ 0, %709 ], [ %749, %747 ]
  %714 = phi i32 [ %711, %709 ], [ %748, %747 ]
  %715 = load ptr, ptr %708, align 8
  %716 = getelementptr inbounds [12 x [3 x ptr]], ptr %715, i64 0, i64 %710, i64 %713
  %717 = load ptr, ptr %716, align 8
  %718 = icmp eq ptr %717, null
  br i1 %718, label %747, label %719

719:                                              ; preds = %712
  %720 = load i32, ptr %681, align 8
  %721 = icmp sgt i32 %720, 0
  br i1 %721, label %722, label %732

722:                                              ; preds = %719
  %723 = zext i32 %720 to i64
  br label %724

724:                                              ; preds = %729, %722
  %725 = phi i64 [ 0, %722 ], [ %730, %729 ]
  %726 = getelementptr inbounds %struct.codec_setup_info, ptr %614, i64 0, i32 14, i64 %725
  %727 = load ptr, ptr %726, align 8
  %728 = icmp eq ptr %727, %717
  br i1 %728, label %735, label %729

729:                                              ; preds = %724
  %730 = add nuw nsw i64 %725, 1
  %731 = icmp eq i64 %730, %723
  br i1 %731, label %732, label %724, !llvm.loop !55

732:                                              ; preds = %729, %719
  %733 = add nsw i32 %720, 1
  store i32 %733, ptr %681, align 8
  %734 = load ptr, ptr %708, align 8
  br label %737

735:                                              ; preds = %724
  %.lcssa1 = phi i64 [ %725, %724 ]
  %736 = trunc i64 %.lcssa1 to i32
  br label %737

737:                                              ; preds = %735, %732
  %738 = phi ptr [ %734, %732 ], [ %715, %735 ]
  %739 = phi i32 [ %720, %732 ], [ %736, %735 ]
  %740 = add nsw i32 %714, 1
  %741 = sext i32 %714 to i64
  %742 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %615, i64 0, i32 6, i64 %741
  store i32 %739, ptr %742, align 4
  %743 = getelementptr inbounds [12 x [3 x ptr]], ptr %738, i64 0, i64 %710, i64 %713
  %744 = load ptr, ptr %743, align 8
  %745 = sext i32 %739 to i64
  %746 = getelementptr inbounds %struct.codec_setup_info, ptr %614, i64 0, i32 14, i64 %745
  store ptr %744, ptr %746, align 8
  br label %747

747:                                              ; preds = %737, %712
  %748 = phi i32 [ %740, %737 ], [ %714, %712 ]
  %749 = add nuw nsw i64 %713, 1
  %750 = icmp eq i64 %749, 3
  br i1 %750, label %751, label %712, !llvm.loop !56

751:                                              ; preds = %747
  %.lcssa2 = phi i32 [ %748, %747 ]
  %752 = add nuw nsw i64 %710, 1
  %753 = load i32, ptr %646, align 4
  %754 = sext i32 %753 to i64
  %755 = icmp slt i64 %752, %754
  br i1 %755, label %709, label %853, !llvm.loop !57

756:                                              ; preds = %772, %655
  %757 = phi i64 [ 0, %655 ], [ %773, %772 ]
  %758 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %615, i64 0, i32 5, i64 %757
  br label %759

759:                                              ; preds = %769, %756
  %760 = phi i64 [ 0, %756 ], [ %770, %769 ]
  %761 = getelementptr inbounds [12 x [3 x ptr]], ptr %657, i64 0, i64 %757, i64 %760
  %762 = load ptr, ptr %761, align 8
  %763 = icmp eq ptr %762, null
  br i1 %763, label %769, label %764

764:                                              ; preds = %759
  %765 = trunc i64 %760 to i32
  %766 = shl nuw nsw i32 1, %765
  %767 = load i32, ptr %758, align 4
  %768 = or i32 %767, %766
  store i32 %768, ptr %758, align 4
  br label %769

769:                                              ; preds = %764, %759
  %770 = add nuw nsw i64 %760, 1
  %771 = icmp eq i64 %770, 3
  br i1 %771, label %772, label %759, !llvm.loop !58

772:                                              ; preds = %769
  %773 = add nuw nsw i64 %757, 1
  %774 = icmp eq i64 %773, %658
  br i1 %774, label %775, label %756, !llvm.loop !59

775:                                              ; preds = %772, %654
  %776 = getelementptr inbounds %struct.vorbis_residue_template, ptr %572, i64 %612, i32 3
  %777 = load ptr, ptr %776, align 8
  %778 = getelementptr inbounds %struct.codec_setup_info, ptr %614, i64 0, i32 5
  %779 = load i32, ptr %778, align 8
  %780 = icmp sgt i32 %779, 0
  br i1 %780, label %781, label %791

781:                                              ; preds = %775
  %782 = zext i32 %779 to i64
  br label %783

783:                                              ; preds = %788, %781
  %784 = phi i64 [ 0, %781 ], [ %789, %788 ]
  %785 = getelementptr inbounds %struct.codec_setup_info, ptr %614, i64 0, i32 14, i64 %784
  %786 = load ptr, ptr %785, align 8
  %787 = icmp eq ptr %786, %777
  br i1 %787, label %794, label %788

788:                                              ; preds = %783
  %789 = add nuw nsw i64 %784, 1
  %790 = icmp eq i64 %789, %782
  br i1 %790, label %791, label %783, !llvm.loop !55

791:                                              ; preds = %788, %775
  %792 = add nsw i32 %779, 1
  store i32 %792, ptr %778, align 8
  %793 = load ptr, ptr %776, align 8
  br label %796

794:                                              ; preds = %783
  %.lcssa3 = phi i64 [ %784, %783 ]
  %795 = trunc i64 %.lcssa3 to i32
  br label %796

796:                                              ; preds = %794, %791
  %797 = phi ptr [ %793, %791 ], [ %777, %794 ]
  %798 = phi i32 [ %779, %791 ], [ %795, %794 ]
  %799 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %615, i64 0, i32 4
  store i32 %798, ptr %799, align 8
  %800 = sext i32 %798 to i64
  %801 = getelementptr inbounds %struct.codec_setup_info, ptr %614, i64 0, i32 14, i64 %800
  store ptr %797, ptr %801, align 8
  %802 = load i32, ptr %646, align 4
  %803 = icmp sgt i32 %802, 0
  br i1 %803, label %804, label %853

804:                                              ; preds = %796
  %805 = getelementptr inbounds %struct.vorbis_residue_template, ptr %572, i64 %612, i32 5
  br label %806

806:                                              ; preds = %848, %804
  %807 = phi i64 [ 0, %804 ], [ %849, %848 ]
  %808 = phi i32 [ 0, %804 ], [ %.lcssa5, %848 ]
  br label %809

809:                                              ; preds = %844, %806
  %810 = phi i64 [ 0, %806 ], [ %846, %844 ]
  %811 = phi i32 [ %808, %806 ], [ %845, %844 ]
  %812 = load ptr, ptr %805, align 8
  %813 = getelementptr inbounds [12 x [3 x ptr]], ptr %812, i64 0, i64 %807, i64 %810
  %814 = load ptr, ptr %813, align 8
  %815 = icmp eq ptr %814, null
  br i1 %815, label %844, label %816

816:                                              ; preds = %809
  %817 = load i32, ptr %778, align 8
  %818 = icmp sgt i32 %817, 0
  br i1 %818, label %819, label %829

819:                                              ; preds = %816
  %820 = zext i32 %817 to i64
  br label %821

821:                                              ; preds = %826, %819
  %822 = phi i64 [ 0, %819 ], [ %827, %826 ]
  %823 = getelementptr inbounds %struct.codec_setup_info, ptr %614, i64 0, i32 14, i64 %822
  %824 = load ptr, ptr %823, align 8
  %825 = icmp eq ptr %824, %814
  br i1 %825, label %832, label %826

826:                                              ; preds = %821
  %827 = add nuw nsw i64 %822, 1
  %828 = icmp eq i64 %827, %820
  br i1 %828, label %829, label %821, !llvm.loop !55

829:                                              ; preds = %826, %816
  %830 = add nsw i32 %817, 1
  store i32 %830, ptr %778, align 8
  %831 = load ptr, ptr %805, align 8
  br label %834

832:                                              ; preds = %821
  %.lcssa4 = phi i64 [ %822, %821 ]
  %833 = trunc i64 %.lcssa4 to i32
  br label %834

834:                                              ; preds = %832, %829
  %835 = phi ptr [ %831, %829 ], [ %812, %832 ]
  %836 = phi i32 [ %817, %829 ], [ %833, %832 ]
  %837 = add nsw i32 %811, 1
  %838 = sext i32 %811 to i64
  %839 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %615, i64 0, i32 6, i64 %838
  store i32 %836, ptr %839, align 4
  %840 = getelementptr inbounds [12 x [3 x ptr]], ptr %835, i64 0, i64 %807, i64 %810
  %841 = load ptr, ptr %840, align 8
  %842 = sext i32 %836 to i64
  %843 = getelementptr inbounds %struct.codec_setup_info, ptr %614, i64 0, i32 14, i64 %842
  store ptr %841, ptr %843, align 8
  br label %844

844:                                              ; preds = %834, %809
  %845 = phi i32 [ %837, %834 ], [ %811, %809 ]
  %846 = add nuw nsw i64 %810, 1
  %847 = icmp eq i64 %846, 3
  br i1 %847, label %848, label %809, !llvm.loop !60

848:                                              ; preds = %844
  %.lcssa5 = phi i32 [ %845, %844 ]
  %849 = add nuw nsw i64 %807, 1
  %850 = load i32, ptr %646, align 4
  %851 = sext i32 %850 to i64
  %852 = icmp slt i64 %849, %851
  br i1 %852, label %806, label %853, !llvm.loop !61

853:                                              ; preds = %848, %796, %751, %699
  %854 = getelementptr inbounds %struct.codec_setup_info, ptr %614, i64 0, i32 19, i32 17
  %855 = load double, ptr %854, align 8
  %856 = fmul double %855, 1.000000e+03
  %857 = getelementptr inbounds %struct.codec_setup_info, ptr %614, i64 0, i32 11, i64 %583
  %858 = load ptr, ptr %857, align 8
  %859 = load i64, ptr %580, align 8
  %860 = sitofp i64 %859 to double
  %861 = fmul double %860, 5.000000e-01
  %862 = load i64, ptr %625, align 8
  %863 = ashr i64 %862, 1
  %864 = fcmp ogt double %856, %861
  %865 = select i1 %864, double %861, double %856
  %866 = fdiv double %865, %861
  %867 = sitofp i64 %863 to double
  %868 = fmul double %866, %867
  %869 = fptosi double %868 to i32
  %870 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %858, i64 0, i32 13
  store i32 %869, ptr %870, align 4
  %871 = getelementptr inbounds %struct.vorbis_residue_template, ptr %572, i64 %612, i32 1
  %872 = load i32, ptr %871, align 4
  %873 = icmp eq i32 %872, 0
  br i1 %873, label %885, label %874

874:                                              ; preds = %853
  %875 = load i32, ptr %643, align 8
  %876 = icmp eq i32 %875, 0
  %877 = getelementptr inbounds %struct.codec_setup_info, ptr %614, i64 0, i32 17, i32 6, i64 14
  %878 = getelementptr inbounds %struct.codec_setup_info, ptr %614, i64 0, i32 17, i32 6, i64 7
  %879 = select i1 %876, ptr %878, ptr %877
  %880 = load i32, ptr %879, align 4
  %881 = sitofp i32 %880 to double
  %882 = fmul double %881, 1.000000e+03
  %883 = fcmp ogt double %882, %861
  br i1 %883, label %884, label %885

884:                                              ; preds = %874
  br label %885

885:                                              ; preds = %884, %874, %853
  %886 = phi double [ %861, %884 ], [ %882, %874 ], [ %865, %853 ]
  %887 = getelementptr inbounds %struct.codec_setup_info, ptr %614, i64 0, i32 12, i64 %583
  %888 = load i32, ptr %887, align 4
  %889 = icmp eq i32 %888, 2
  %890 = fdiv double %886, %861
  %891 = fmul double %890, %867
  %892 = fmul double %891, 2.000000e+00
  %893 = select i1 %889, double %892, double %891
  %894 = load i32, ptr %630, align 8
  %895 = sitofp i32 %894 to double
  %896 = fdiv double %893, %895
  %897 = fadd double %896, 9.000000e-01
  %898 = fptosi double %897 to i32
  %899 = mul nsw i32 %894, %898
  %900 = sext i32 %899 to i64
  store i64 %900, ptr %635, align 8
  %901 = add nuw nsw i64 %609, 1
  %902 = load i32, ptr %598, align 4
  %903 = sext i32 %902 to i64
  %904 = icmp slt i64 %901, %903
  br i1 %904, label %608, label %905, !llvm.loop !62

905:                                              ; preds = %885, %605
  %906 = and i1 %576, %582
  br i1 %906, label %581, label %907, !llvm.loop !63

907:                                              ; preds = %905
  %908 = load ptr, ptr %2, align 8
  %909 = getelementptr inbounds %struct.codec_setup_info, ptr %908, i64 0, i32 19
  %910 = load ptr, ptr %909, align 8
  %911 = getelementptr inbounds %struct.ve_setup_data_template, ptr %910, i64 0, i32 1
  %912 = load ptr, ptr %911, align 8
  %913 = icmp eq ptr %912, null
  br i1 %913, label %934, label %914

914:                                              ; preds = %907
  %915 = load i32, ptr %579, align 4
  %916 = getelementptr inbounds %struct.codec_setup_info, ptr %908, i64 0, i32 19, i32 2
  %917 = load double, ptr %916, align 8
  %918 = fptosi double %917 to i32
  %919 = sitofp i32 %918 to double
  %920 = sext i32 %918 to i64
  %921 = getelementptr inbounds double, ptr %912, i64 %920
  %922 = fsub double %917, %919
  %923 = fsub double 1.000000e+00, %922
  %924 = load <2 x double>, ptr %921, align 8
  %925 = insertelement <2 x double> poison, double %923, i64 0
  %926 = insertelement <2 x double> %925, double %922, i64 1
  %927 = fmul <2 x double> %924, %926
  %928 = shufflevector <2 x double> %927, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %929 = fadd <2 x double> %928, %927
  %930 = extractelement <2 x double> %929, i64 0
  %931 = sitofp i32 %915 to double
  %932 = fmul double %930, %931
  %933 = fptosi double %932 to i64
  br label %934

934:                                              ; preds = %914, %907
  %935 = phi i64 [ %933, %914 ], [ -1, %907 ]
  %936 = getelementptr inbounds %struct.vorbis_info, ptr %0, i64 0, i32 4
  store i64 %935, ptr %936, align 8
  %937 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 19, i32 7
  %938 = load i64, ptr %937, align 8
  %939 = getelementptr inbounds %struct.vorbis_info, ptr %0, i64 0, i32 5
  store i64 %938, ptr %939, align 8
  %940 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 19, i32 10
  %941 = load i64, ptr %940, align 8
  %942 = getelementptr inbounds %struct.vorbis_info, ptr %0, i64 0, i32 3
  store i64 %941, ptr %942, align 8
  %943 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 19, i32 11
  %944 = load double, ptr %943, align 8
  %945 = fptosi double %944 to i64
  %946 = getelementptr inbounds %struct.vorbis_info, ptr %0, i64 0, i32 6
  store i64 %945, ptr %946, align 8
  %947 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 19, i32 6
  %948 = load i32, ptr %947, align 8
  %949 = icmp eq i32 %948, 0
  br i1 %949, label %971, label %950

950:                                              ; preds = %934
  %951 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 19, i32 12
  %952 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 18
  %953 = load <2 x double>, ptr %951, align 8
  store <2 x double> %953, ptr %952, align 8
  %954 = load double, ptr %943, align 8
  %955 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 18, i32 2
  store double %954, ptr %955, align 8
  %956 = load i64, ptr %937, align 8
  %957 = sitofp i64 %956 to double
  %958 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 18, i32 3
  store double %957, ptr %958, align 8
  %959 = load i64, ptr %940, align 8
  %960 = sitofp i64 %959 to double
  %961 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 18, i32 4
  store double %960, ptr %961, align 8
  %962 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 19, i32 8
  %963 = load i64, ptr %962, align 8
  %964 = sitofp i64 %963 to double
  %965 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 18, i32 5
  store double %964, ptr %965, align 8
  %966 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 19, i32 9
  %967 = load i64, ptr %966, align 8
  %968 = sitofp i64 %967 to double
  %969 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 18, i32 6
  store double %968, ptr %969, align 8
  %970 = getelementptr inbounds %struct.codec_setup_info, ptr %3, i64 0, i32 18, i32 7
  store <2 x double> <double -9.999990e+05, double 9.999990e+05>, ptr %970, align 8
  br label %971

971:                                              ; preds = %950, %934, %26, %1
  %972 = phi i32 [ -131, %1 ], [ -131, %26 ], [ 0, %950 ], [ 0, %934 ]
  ret i32 %972
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @vorbis_analysis_init(ptr noundef %0, ptr noundef %1) #0 {
  %3 = tail call fastcc i32 @_vds_shared_init(ptr noundef %0, ptr noundef %1, i32 noundef 1) #56, !range !36
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %19

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 19
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr inbounds %struct.vorbis_info, ptr %1, i64 0, i32 7
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr inbounds %struct.codec_setup_info, ptr %9, i64 0, i32 17
  %11 = tail call noalias dereferenceable_or_null(40) ptr @calloc(i64 noundef 1, i64 noundef 40) #65
  %12 = getelementptr inbounds %struct.vorbis_info, ptr %1, i64 0, i32 1
  %13 = load i32, ptr %12, align 4
  %14 = getelementptr inbounds %struct.vorbis_look_psy_global, ptr %11, i64 0, i32 1
  store i32 %13, ptr %14, align 4
  store float -9.999000e+03, ptr %11, align 8
  %15 = getelementptr inbounds %struct.vorbis_look_psy_global, ptr %11, i64 0, i32 2
  store ptr %10, ptr %15, align 8
  %16 = getelementptr inbounds %struct.private_state, ptr %7, i64 0, i32 8
  store ptr %11, ptr %16, align 8
  %17 = tail call noalias dereferenceable_or_null(280) ptr @calloc(i64 noundef 1, i64 noundef 280) #65
  store ptr %17, ptr %7, align 8
  tail call void @_ve_envelope_init(ptr noundef %17, ptr noundef %1) #56
  %18 = getelementptr inbounds %struct.private_state, ptr %7, i64 0, i32 12
  tail call void @vorbis_bitrate_init(ptr noundef %1, ptr noundef nonnull %18) #56
  br label %19

19:                                               ; preds = %5, %2
  %20 = phi i32 [ 0, %5 ], [ 1, %2 ]
  ret i32 %20
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write, argmem: readwrite, inaccessiblemem: readwrite) uwtable
define internal i32 @vorbis_block_init(ptr noundef %0, ptr nocapture noundef writeonly %1) #22 {
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(192) %1, i8 0, i64 192, i1 false)
  %3 = getelementptr inbounds %struct.vorbis_block, ptr %1, i64 0, i32 10
  store ptr %0, ptr %3, align 8
  %4 = getelementptr inbounds %struct.vorbis_block, ptr %1, i64 0, i32 11
  store ptr null, ptr %4, align 8
  %5 = load i32, ptr %0, align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %16, label %7

7:                                                ; preds = %2
  %8 = tail call noalias dereferenceable_or_null(80) ptr @calloc(i64 noundef 1, i64 noundef 80) #65
  %9 = getelementptr inbounds %struct.vorbis_block, ptr %1, i64 0, i32 20
  store ptr %8, ptr %9, align 8
  %10 = getelementptr inbounds %struct.vorbis_block, ptr %1, i64 0, i32 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %10, i8 0, i64 16, i1 false)
  %11 = tail call noalias dereferenceable_or_null(256) ptr @malloc(i64 noundef 256) #64
  %12 = getelementptr inbounds %struct.vorbis_block, ptr %1, i64 0, i32 1, i32 2
  store ptr %11, ptr %12, align 8
  %13 = getelementptr inbounds %struct.vorbis_block, ptr %1, i64 0, i32 1, i32 3
  store ptr %11, ptr %13, align 8
  store i8 0, ptr %11, align 1
  %14 = getelementptr inbounds %struct.vorbis_block, ptr %1, i64 0, i32 1, i32 4
  store i64 256, ptr %14, align 8
  %15 = getelementptr inbounds %struct.vorbis_block_internal, ptr %8, i64 0, i32 1
  store float -9.999000e+03, ptr %15, align 8
  br label %16

16:                                               ; preds = %7, %2
  ret i32 0
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: write, inaccessiblemem: readwrite) uwtable
define internal i32 @ogg_stream_init(ptr noundef writeonly %0, i32 noundef %1) #23 {
  %3 = icmp eq ptr %0, null
  br i1 %3, label %15, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds i8, ptr %0, i64 16
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(408) %5, i8 0, i64 392, i1 false)
  %6 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 1
  store i64 16384, ptr %6, align 8
  %7 = tail call noalias dereferenceable_or_null(16384) ptr @malloc(i64 noundef 16384) #64
  store ptr %7, ptr %0, align 8
  %8 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 6
  store i64 1024, ptr %8, align 8
  %9 = tail call noalias dereferenceable_or_null(4096) ptr @malloc(i64 noundef 4096) #64
  %10 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 4
  store ptr %9, ptr %10, align 8
  %11 = tail call noalias dereferenceable_or_null(8192) ptr @malloc(i64 noundef 8192) #64
  %12 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 5
  store ptr %11, ptr %12, align 8
  %13 = sext i32 %1 to i64
  %14 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 14
  store i64 %13, ptr %14, align 8
  br label %15

15:                                               ; preds = %4, %2
  %16 = phi i32 [ 0, %4 ], [ -1, %2 ]
  ret i32 %16
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @vorbis_analysis_headerout(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef writeonly %2, ptr nocapture noundef writeonly %3, ptr nocapture noundef writeonly %4) #0 {
  %6 = alloca %struct.oggpack_buffer, align 8
  %7 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 1
  %8 = load ptr, ptr %7, align 8
  call void @llvm.lifetime.start.p0(i64 40, ptr nonnull %6) #55
  %9 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 19
  %10 = load ptr, ptr %9, align 8
  %11 = icmp eq ptr %10, null
  br i1 %11, label %252, label %12

12:                                               ; preds = %5
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %6, i8 0, i64 16, i1 false)
  %13 = tail call noalias dereferenceable_or_null(256) ptr @malloc(i64 noundef 256) #64
  %14 = getelementptr inbounds %struct.oggpack_buffer, ptr %6, i64 0, i32 2
  store ptr %13, ptr %14, align 8
  %15 = getelementptr inbounds %struct.oggpack_buffer, ptr %6, i64 0, i32 3
  store ptr %13, ptr %15, align 8
  store i8 0, ptr %13, align 1
  %16 = getelementptr inbounds %struct.oggpack_buffer, ptr %6, i64 0, i32 4
  store i64 256, ptr %16, align 8
  %17 = getelementptr inbounds %struct.vorbis_info, ptr %8, i64 0, i32 7
  %18 = load ptr, ptr %17, align 8
  %19 = icmp eq ptr %18, null
  br i1 %19, label %252, label %20

20:                                               ; preds = %12
  call void @oggpack_write(ptr noundef nonnull %6, i64 noundef 1, i32 noundef 8) #56
  br label %21

21:                                               ; preds = %21, %20
  %22 = phi i32 [ %24, %21 ], [ 6, %20 ]
  %23 = phi ptr [ %25, %21 ], [ @.str.130, %20 ]
  %24 = add nsw i32 %22, -1
  %25 = getelementptr inbounds i8, ptr %23, i64 1
  %26 = load i8, ptr %23, align 1
  %27 = sext i8 %26 to i64
  call void @oggpack_write(ptr noundef nonnull %6, i64 noundef %27, i32 noundef 8) #56
  %28 = icmp eq i32 %24, 0
  br i1 %28, label %29, label %21, !llvm.loop !64

29:                                               ; preds = %21
  call void @oggpack_write(ptr noundef nonnull %6, i64 noundef 0, i32 noundef 32) #56
  %30 = getelementptr inbounds %struct.vorbis_info, ptr %8, i64 0, i32 1
  %31 = load i32, ptr %30, align 4
  %32 = sext i32 %31 to i64
  call void @oggpack_write(ptr noundef nonnull %6, i64 noundef %32, i32 noundef 8) #56
  %33 = getelementptr inbounds %struct.vorbis_info, ptr %8, i64 0, i32 2
  %34 = load i64, ptr %33, align 8
  call void @oggpack_write(ptr noundef nonnull %6, i64 noundef %34, i32 noundef 32) #56
  %35 = getelementptr inbounds %struct.vorbis_info, ptr %8, i64 0, i32 3
  %36 = load i64, ptr %35, align 8
  call void @oggpack_write(ptr noundef nonnull %6, i64 noundef %36, i32 noundef 32) #56
  %37 = getelementptr inbounds %struct.vorbis_info, ptr %8, i64 0, i32 4
  %38 = load i64, ptr %37, align 8
  call void @oggpack_write(ptr noundef nonnull %6, i64 noundef %38, i32 noundef 32) #56
  %39 = getelementptr inbounds %struct.vorbis_info, ptr %8, i64 0, i32 5
  %40 = load i64, ptr %39, align 8
  call void @oggpack_write(ptr noundef nonnull %6, i64 noundef %40, i32 noundef 32) #56
  %41 = load i64, ptr %18, align 8
  %42 = trunc i64 %41 to i32
  %43 = icmp ult i32 %42, 2
  br i1 %43, label %54, label %44

44:                                               ; preds = %29
  %45 = add i32 %42, -1
  br label %46

46:                                               ; preds = %46, %44
  %47 = phi i32 [ %49, %46 ], [ 0, %44 ]
  %48 = phi i32 [ %50, %46 ], [ %45, %44 ]
  %49 = add nuw nsw i32 %47, 1
  %50 = lshr i32 %48, 1
  %51 = icmp ult i32 %48, 2
  br i1 %51, label %52, label %46, !llvm.loop !65

52:                                               ; preds = %46
  %.lcssa1 = phi i32 [ %49, %46 ]
  %53 = zext i32 %.lcssa1 to i64
  br label %54

54:                                               ; preds = %52, %29
  %55 = phi i64 [ 0, %29 ], [ %53, %52 ]
  call void @oggpack_write(ptr noundef nonnull %6, i64 noundef %55, i32 noundef 4) #56
  %56 = getelementptr inbounds [2 x i64], ptr %18, i64 0, i64 1
  %57 = load i64, ptr %56, align 8
  %58 = trunc i64 %57 to i32
  %59 = icmp ult i32 %58, 2
  br i1 %59, label %70, label %60

60:                                               ; preds = %54
  %61 = add i32 %58, -1
  br label %62

62:                                               ; preds = %62, %60
  %63 = phi i32 [ %65, %62 ], [ 0, %60 ]
  %64 = phi i32 [ %66, %62 ], [ %61, %60 ]
  %65 = add nuw nsw i32 %63, 1
  %66 = lshr i32 %64, 1
  %67 = icmp ult i32 %64, 2
  br i1 %67, label %68, label %62, !llvm.loop !65

68:                                               ; preds = %62
  %.lcssa = phi i32 [ %65, %62 ]
  %69 = zext i32 %.lcssa to i64
  br label %70

70:                                               ; preds = %68, %54
  %71 = phi i64 [ 0, %54 ], [ %69, %68 ]
  call void @oggpack_write(ptr noundef nonnull %6, i64 noundef %71, i32 noundef 4) #56
  call void @oggpack_write(ptr noundef nonnull %6, i64 noundef 1, i32 noundef 1) #56
  %72 = getelementptr inbounds %struct.private_state, ptr %10, i64 0, i32 9
  %73 = load ptr, ptr %72, align 8
  %74 = icmp eq ptr %73, null
  br i1 %74, label %76, label %75

75:                                               ; preds = %70
  tail call void @free(ptr noundef nonnull %73) #59
  br label %76

76:                                               ; preds = %75, %70
  %77 = load i64, ptr %6, align 8
  %78 = getelementptr inbounds %struct.oggpack_buffer, ptr %6, i64 0, i32 1
  %79 = load i32, ptr %78, align 8
  %80 = add nsw i32 %79, 7
  %81 = sdiv i32 %80, 8
  %82 = sext i32 %81 to i64
  %83 = add nsw i64 %77, %82
  %84 = tail call noalias ptr @malloc(i64 noundef %83) #64
  store ptr %84, ptr %72, align 8
  %85 = load ptr, ptr %14, align 8
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 1 %84, ptr align 1 %85, i64 %83, i1 false)
  %86 = load ptr, ptr %72, align 8
  store ptr %86, ptr %2, align 8
  %87 = getelementptr inbounds %struct.ogg_packet, ptr %2, i64 0, i32 1
  store i64 %83, ptr %87, align 8
  %88 = getelementptr inbounds %struct.ogg_packet, ptr %2, i64 0, i32 2
  store i64 1, ptr %88, align 8
  %89 = getelementptr inbounds %struct.ogg_packet, ptr %2, i64 0, i32 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %89, i8 0, i64 16, i1 false)
  store ptr %85, ptr %15, align 8
  store i8 0, ptr %85, align 1
  store i64 0, ptr %6, align 8
  store i32 0, ptr %78, align 8
  call fastcc void @_vorbis_pack_comment(ptr noundef nonnull %6, ptr noundef %1) #56
  %90 = getelementptr inbounds %struct.private_state, ptr %10, i64 0, i32 10
  %91 = load ptr, ptr %90, align 8
  %92 = icmp eq ptr %91, null
  br i1 %92, label %94, label %93

93:                                               ; preds = %76
  tail call void @free(ptr noundef nonnull %91) #59
  br label %94

94:                                               ; preds = %93, %76
  %95 = load i64, ptr %6, align 8
  %96 = load i32, ptr %78, align 8
  %97 = add nsw i32 %96, 7
  %98 = sdiv i32 %97, 8
  %99 = sext i32 %98 to i64
  %100 = add nsw i64 %95, %99
  %101 = tail call noalias ptr @malloc(i64 noundef %100) #64
  store ptr %101, ptr %90, align 8
  %102 = load ptr, ptr %14, align 8
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 1 %101, ptr align 1 %102, i64 %100, i1 false)
  %103 = load ptr, ptr %90, align 8
  store ptr %103, ptr %3, align 8
  %104 = getelementptr inbounds %struct.ogg_packet, ptr %3, i64 0, i32 1
  store i64 %100, ptr %104, align 8
  %105 = getelementptr inbounds %struct.ogg_packet, ptr %3, i64 0, i32 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %105, i8 0, i64 24, i1 false)
  store ptr %102, ptr %15, align 8
  store i8 0, ptr %102, align 1
  store i64 0, ptr %6, align 8
  store i32 0, ptr %78, align 8
  %106 = load ptr, ptr %17, align 8
  %107 = icmp eq ptr %106, null
  br i1 %107, label %252, label %108

108:                                              ; preds = %94
  call void @oggpack_write(ptr noundef nonnull %6, i64 noundef 5, i32 noundef 8) #56
  br label %109

109:                                              ; preds = %109, %108
  %110 = phi i32 [ %112, %109 ], [ 6, %108 ]
  %111 = phi ptr [ %113, %109 ], [ @.str.130, %108 ]
  %112 = add nsw i32 %110, -1
  %113 = getelementptr inbounds i8, ptr %111, i64 1
  %114 = load i8, ptr %111, align 1
  %115 = sext i8 %114 to i64
  call void @oggpack_write(ptr noundef nonnull %6, i64 noundef %115, i32 noundef 8) #56
  %116 = icmp eq i32 %112, 0
  br i1 %116, label %117, label %109, !llvm.loop !64

117:                                              ; preds = %109
  %118 = getelementptr inbounds %struct.codec_setup_info, ptr %106, i64 0, i32 5
  %119 = load i32, ptr %118, align 8
  %120 = add nsw i32 %119, -1
  %121 = sext i32 %120 to i64
  call void @oggpack_write(ptr noundef nonnull %6, i64 noundef %121, i32 noundef 8) #56
  %122 = load i32, ptr %118, align 8
  %123 = icmp sgt i32 %122, 0
  br i1 %123, label %129, label %135

124:                                              ; preds = %129
  %125 = add nuw nsw i64 %130, 1
  %126 = load i32, ptr %118, align 8
  %127 = sext i32 %126 to i64
  %128 = icmp slt i64 %125, %127
  br i1 %128, label %129, label %135, !llvm.loop !66

129:                                              ; preds = %124, %117
  %130 = phi i64 [ %125, %124 ], [ 0, %117 ]
  %131 = getelementptr inbounds %struct.codec_setup_info, ptr %106, i64 0, i32 14, i64 %130
  %132 = load ptr, ptr %131, align 8
  %133 = call i32 @vorbis_staticbook_pack(ptr noundef %132, ptr noundef nonnull %6) #56, !range !12
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %124, label %252

135:                                              ; preds = %124, %117
  call void @oggpack_write(ptr noundef nonnull %6, i64 noundef 0, i32 noundef 6) #56
  call void @oggpack_write(ptr noundef nonnull %6, i64 noundef 0, i32 noundef 16) #56
  %136 = getelementptr inbounds %struct.codec_setup_info, ptr %106, i64 0, i32 3
  %137 = load i32, ptr %136, align 8
  %138 = add nsw i32 %137, -1
  %139 = sext i32 %138 to i64
  call void @oggpack_write(ptr noundef nonnull %6, i64 noundef %139, i32 noundef 6) #56
  %140 = load i32, ptr %136, align 8
  %141 = icmp sgt i32 %140, 0
  br i1 %141, label %142, label %160

142:                                              ; preds = %153, %135
  %143 = phi i64 [ %156, %153 ], [ 0, %135 ]
  %144 = getelementptr inbounds %struct.codec_setup_info, ptr %106, i64 0, i32 10, i64 %143
  %145 = load i32, ptr %144, align 4
  %146 = sext i32 %145 to i64
  call void @oggpack_write(ptr noundef nonnull %6, i64 noundef %146, i32 noundef 16) #56
  %147 = load i32, ptr %144, align 4
  %148 = sext i32 %147 to i64
  %149 = getelementptr inbounds [0 x ptr], ptr @_floor_P, i64 0, i64 %148
  %150 = load ptr, ptr %149, align 8
  %151 = load ptr, ptr %150, align 8
  %152 = icmp eq ptr %151, null
  br i1 %152, label %252, label %153

153:                                              ; preds = %142
  %154 = getelementptr inbounds %struct.codec_setup_info, ptr %106, i64 0, i32 11, i64 %143
  %155 = load ptr, ptr %154, align 8
  call void %151(ptr noundef %155, ptr noundef nonnull %6) #59
  %156 = add nuw nsw i64 %143, 1
  %157 = load i32, ptr %136, align 8
  %158 = sext i32 %157 to i64
  %159 = icmp slt i64 %156, %158
  br i1 %159, label %142, label %160, !llvm.loop !67

160:                                              ; preds = %153, %135
  %161 = getelementptr inbounds %struct.codec_setup_info, ptr %106, i64 0, i32 4
  %162 = load i32, ptr %161, align 4
  %163 = add nsw i32 %162, -1
  %164 = sext i32 %163 to i64
  call void @oggpack_write(ptr noundef nonnull %6, i64 noundef %164, i32 noundef 6) #56
  %165 = load i32, ptr %161, align 4
  %166 = icmp sgt i32 %165, 0
  br i1 %166, label %167, label %183

167:                                              ; preds = %167, %160
  %168 = phi i64 [ %179, %167 ], [ 0, %160 ]
  %169 = getelementptr inbounds %struct.codec_setup_info, ptr %106, i64 0, i32 12, i64 %168
  %170 = load i32, ptr %169, align 4
  %171 = sext i32 %170 to i64
  call void @oggpack_write(ptr noundef nonnull %6, i64 noundef %171, i32 noundef 16) #56
  %172 = load i32, ptr %169, align 4
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds [0 x ptr], ptr @_residue_P, i64 0, i64 %173
  %175 = load ptr, ptr %174, align 8
  %176 = load ptr, ptr %175, align 8
  %177 = getelementptr inbounds %struct.codec_setup_info, ptr %106, i64 0, i32 13, i64 %168
  %178 = load ptr, ptr %177, align 8
  call void %176(ptr noundef %178, ptr noundef nonnull %6) #59
  %179 = add nuw nsw i64 %168, 1
  %180 = load i32, ptr %161, align 4
  %181 = sext i32 %180 to i64
  %182 = icmp slt i64 %179, %181
  br i1 %182, label %167, label %183, !llvm.loop !68

183:                                              ; preds = %167, %160
  %184 = getelementptr inbounds %struct.codec_setup_info, ptr %106, i64 0, i32 2
  %185 = load i32, ptr %184, align 4
  %186 = add nsw i32 %185, -1
  %187 = sext i32 %186 to i64
  call void @oggpack_write(ptr noundef nonnull %6, i64 noundef %187, i32 noundef 6) #56
  %188 = load i32, ptr %184, align 4
  %189 = icmp sgt i32 %188, 0
  br i1 %189, label %190, label %206

190:                                              ; preds = %190, %183
  %191 = phi i64 [ %202, %190 ], [ 0, %183 ]
  %192 = getelementptr inbounds %struct.codec_setup_info, ptr %106, i64 0, i32 8, i64 %191
  %193 = load i32, ptr %192, align 4
  %194 = sext i32 %193 to i64
  call void @oggpack_write(ptr noundef nonnull %6, i64 noundef %194, i32 noundef 16) #56
  %195 = load i32, ptr %192, align 4
  %196 = sext i32 %195 to i64
  %197 = getelementptr inbounds [0 x ptr], ptr @_mapping_P, i64 0, i64 %196
  %198 = load ptr, ptr %197, align 8
  %199 = load ptr, ptr %198, align 8
  %200 = getelementptr inbounds %struct.codec_setup_info, ptr %106, i64 0, i32 9, i64 %191
  %201 = load ptr, ptr %200, align 8
  call void %199(ptr noundef %8, ptr noundef %201, ptr noundef nonnull %6) #59
  %202 = add nuw nsw i64 %191, 1
  %203 = load i32, ptr %184, align 4
  %204 = sext i32 %203 to i64
  %205 = icmp slt i64 %202, %204
  br i1 %205, label %190, label %206, !llvm.loop !69

206:                                              ; preds = %190, %183
  %207 = getelementptr inbounds %struct.codec_setup_info, ptr %106, i64 0, i32 1
  %208 = load i32, ptr %207, align 8
  %209 = add nsw i32 %208, -1
  %210 = sext i32 %209 to i64
  call void @oggpack_write(ptr noundef nonnull %6, i64 noundef %210, i32 noundef 6) #56
  %211 = load i32, ptr %207, align 8
  %212 = icmp sgt i32 %211, 0
  br i1 %212, label %213, label %235

213:                                              ; preds = %213, %206
  %214 = phi i64 [ %231, %213 ], [ 0, %206 ]
  %215 = getelementptr inbounds %struct.codec_setup_info, ptr %106, i64 0, i32 7, i64 %214
  %216 = load ptr, ptr %215, align 8
  %217 = load i32, ptr %216, align 4
  %218 = sext i32 %217 to i64
  call void @oggpack_write(ptr noundef nonnull %6, i64 noundef %218, i32 noundef 1) #56
  %219 = load ptr, ptr %215, align 8
  %220 = getelementptr inbounds %struct.vorbis_info_mode, ptr %219, i64 0, i32 1
  %221 = load i32, ptr %220, align 4
  %222 = sext i32 %221 to i64
  call void @oggpack_write(ptr noundef nonnull %6, i64 noundef %222, i32 noundef 16) #56
  %223 = load ptr, ptr %215, align 8
  %224 = getelementptr inbounds %struct.vorbis_info_mode, ptr %223, i64 0, i32 2
  %225 = load i32, ptr %224, align 4
  %226 = sext i32 %225 to i64
  call void @oggpack_write(ptr noundef nonnull %6, i64 noundef %226, i32 noundef 16) #56
  %227 = load ptr, ptr %215, align 8
  %228 = getelementptr inbounds %struct.vorbis_info_mode, ptr %227, i64 0, i32 3
  %229 = load i32, ptr %228, align 4
  %230 = sext i32 %229 to i64
  call void @oggpack_write(ptr noundef nonnull %6, i64 noundef %230, i32 noundef 8) #56
  %231 = add nuw nsw i64 %214, 1
  %232 = load i32, ptr %207, align 8
  %233 = sext i32 %232 to i64
  %234 = icmp slt i64 %231, %233
  br i1 %234, label %213, label %235, !llvm.loop !70

235:                                              ; preds = %213, %206
  call void @oggpack_write(ptr noundef nonnull %6, i64 noundef 1, i32 noundef 1) #56
  %236 = getelementptr inbounds %struct.private_state, ptr %10, i64 0, i32 11
  %237 = load ptr, ptr %236, align 8
  %238 = icmp eq ptr %237, null
  br i1 %238, label %240, label %239

239:                                              ; preds = %235
  call void @free(ptr noundef nonnull %237) #59
  br label %240

240:                                              ; preds = %239, %235
  %241 = load i64, ptr %6, align 8
  %242 = load i32, ptr %78, align 8
  %243 = add nsw i32 %242, 7
  %244 = sdiv i32 %243, 8
  %245 = sext i32 %244 to i64
  %246 = add nsw i64 %241, %245
  %247 = call noalias ptr @malloc(i64 noundef %246) #64
  store ptr %247, ptr %236, align 8
  %248 = load ptr, ptr %14, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %247, ptr align 1 %248, i64 %246, i1 false)
  %249 = load ptr, ptr %236, align 8
  store ptr %249, ptr %4, align 8
  %250 = getelementptr inbounds %struct.ogg_packet, ptr %4, i64 0, i32 1
  store i64 %246, ptr %250, align 8
  %251 = getelementptr inbounds %struct.ogg_packet, ptr %4, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %251, i8 0, i64 24, i1 false)
  call void @free(ptr noundef %248) #59
  br label %271

252:                                              ; preds = %142, %129, %94, %12, %5
  %253 = phi i32 [ -129, %5 ], [ -130, %12 ], [ -130, %94 ], [ -130, %142 ], [ -130, %129 ]
  %254 = getelementptr inbounds %struct.oggpack_buffer, ptr %6, i64 0, i32 2
  %255 = load ptr, ptr %254, align 8
  call void @free(ptr noundef %255) #59
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %6, i8 0, i64 40, i1 false)
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(48) %2, i8 0, i64 48, i1 false)
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(48) %3, i8 0, i64 48, i1 false)
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(48) %4, i8 0, i64 48, i1 false)
  %256 = getelementptr inbounds %struct.private_state, ptr %10, i64 0, i32 9
  %257 = load ptr, ptr %256, align 8
  %258 = icmp eq ptr %257, null
  br i1 %258, label %260, label %259

259:                                              ; preds = %252
  call void @free(ptr noundef nonnull %257) #59
  br label %260

260:                                              ; preds = %259, %252
  %261 = getelementptr inbounds %struct.private_state, ptr %10, i64 0, i32 10
  %262 = load ptr, ptr %261, align 8
  %263 = icmp eq ptr %262, null
  br i1 %263, label %265, label %264

264:                                              ; preds = %260
  call void @free(ptr noundef nonnull %262) #59
  br label %265

265:                                              ; preds = %264, %260
  %266 = getelementptr inbounds %struct.private_state, ptr %10, i64 0, i32 11
  %267 = load ptr, ptr %266, align 8
  %268 = icmp eq ptr %267, null
  br i1 %268, label %270, label %269

269:                                              ; preds = %265
  call void @free(ptr noundef nonnull %267) #59
  br label %270

270:                                              ; preds = %269, %265
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %256, i8 0, i64 24, i1 false)
  br label %271

271:                                              ; preds = %270, %240
  %272 = phi i32 [ %253, %270 ], [ 0, %240 ]
  call void @llvm.lifetime.end.p0(i64 40, ptr nonnull %6) #55
  ret i32 %272
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @ogg_stream_packetin(ptr nocapture noundef %0, ptr nocapture noundef readonly %1) #0 {
  %3 = getelementptr inbounds %struct.ogg_packet, ptr %1, i64 0, i32 1
  %4 = load i64, ptr %3, align 8
  %5 = sdiv i64 %4, 255
  %6 = trunc i64 %5 to i32
  %7 = add i32 %6, 1
  %8 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 3
  %9 = load i64, ptr %8, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %21, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 2
  %13 = load i64, ptr %12, align 8
  %14 = sub nsw i64 %13, %9
  store i64 %14, ptr %12, align 8
  %15 = icmp eq i64 %13, %9
  br i1 %15, label %19, label %16

16:                                               ; preds = %11
  %17 = load ptr, ptr %0, align 8
  %18 = getelementptr inbounds i8, ptr %17, i64 %9
  tail call void @llvm.memmove.p0.p0.i64(ptr align 1 %17, ptr nonnull align 1 %18, i64 %14, i1 false)
  br label %19

19:                                               ; preds = %16, %11
  store i64 0, ptr %8, align 8
  %20 = load i64, ptr %3, align 8
  br label %21

21:                                               ; preds = %19, %2
  %22 = phi i64 [ %20, %19 ], [ %4, %2 ]
  %23 = trunc i64 %22 to i32
  tail call fastcc void @_os_body_expand(ptr noundef nonnull %0, i32 noundef %23) #56
  tail call fastcc void @_os_lacing_expand(ptr noundef nonnull %0, i32 noundef %7) #56
  %24 = load ptr, ptr %0, align 8
  %25 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 2
  %26 = load i64, ptr %25, align 8
  %27 = getelementptr inbounds i8, ptr %24, i64 %26
  %28 = load ptr, ptr %1, align 8
  %29 = load i64, ptr %3, align 8
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 1 %27, ptr align 1 %28, i64 %29, i1 false)
  %30 = load i64, ptr %3, align 8
  %31 = load i64, ptr %25, align 8
  %32 = add nsw i64 %31, %30
  store i64 %32, ptr %25, align 8
  %33 = icmp sgt i32 %6, 0
  br i1 %33, label %34, label %55

34:                                               ; preds = %21
  %35 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 4
  %36 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 7
  %37 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 17
  %38 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 5
  %39 = and i64 %5, 4294967295
  br label %40

40:                                               ; preds = %40, %34
  %41 = phi i64 [ 0, %34 ], [ %51, %40 ]
  %42 = load ptr, ptr %35, align 8
  %43 = load i64, ptr %36, align 8
  %44 = add nsw i64 %43, %41
  %45 = getelementptr inbounds i32, ptr %42, i64 %44
  store i32 255, ptr %45, align 4
  %46 = load i64, ptr %37, align 8
  %47 = load ptr, ptr %38, align 8
  %48 = load i64, ptr %36, align 8
  %49 = add nsw i64 %48, %41
  %50 = getelementptr inbounds i64, ptr %47, i64 %49
  store i64 %46, ptr %50, align 8
  %51 = add nuw nsw i64 %41, 1
  %52 = icmp eq i64 %51, %39
  br i1 %52, label %53, label %40, !llvm.loop !71

53:                                               ; preds = %40
  %54 = and i64 %5, 4294967295
  br label %55

55:                                               ; preds = %53, %21
  %56 = phi i64 [ %54, %53 ], [ 0, %21 ]
  %57 = load i64, ptr %3, align 8
  %58 = srem i64 %57, 255
  %59 = trunc i64 %58 to i32
  %60 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 4
  %61 = load ptr, ptr %60, align 8
  %62 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 7
  %63 = load i64, ptr %62, align 8
  %64 = add nsw i64 %63, %56
  %65 = getelementptr inbounds i32, ptr %61, i64 %64
  store i32 %59, ptr %65, align 4
  %66 = getelementptr inbounds %struct.ogg_packet, ptr %1, i64 0, i32 4
  %67 = load i64, ptr %66, align 8
  %68 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 5
  %69 = load ptr, ptr %68, align 8
  %70 = load i64, ptr %62, align 8
  %71 = add nsw i64 %70, %56
  %72 = getelementptr inbounds i64, ptr %69, i64 %71
  store i64 %67, ptr %72, align 8
  %73 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 17
  store i64 %67, ptr %73, align 8
  %74 = load ptr, ptr %60, align 8
  %75 = load i64, ptr %62, align 8
  %76 = getelementptr inbounds i32, ptr %74, i64 %75
  %77 = load i32, ptr %76, align 4
  %78 = or i32 %77, 256
  store i32 %78, ptr %76, align 4
  %79 = sext i32 %7 to i64
  %80 = load i64, ptr %62, align 8
  %81 = add nsw i64 %80, %79
  store i64 %81, ptr %62, align 8
  %82 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 16
  %83 = load i64, ptr %82, align 8
  %84 = add nsw i64 %83, 1
  store i64 %84, ptr %82, align 8
  %85 = getelementptr inbounds %struct.ogg_packet, ptr %1, i64 0, i32 3
  %86 = load i64, ptr %85, align 8
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %90, label %88

88:                                               ; preds = %55
  %89 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 12
  store i32 1, ptr %89, align 8
  br label %90

90:                                               ; preds = %88, %55
  ret i32 0
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @ogg_stream_flush(ptr noundef %0, ptr noundef %1) #21 {
  %3 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 7
  %4 = load i64, ptr %3, align 8
  %5 = tail call i64 @llvm.smin.i64(i64 %4, i64 255)
  %6 = trunc i64 %5 to i32
  %7 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 5
  %8 = load ptr, ptr %7, align 8
  %9 = icmp eq i32 %6, 0
  br i1 %9, label %160, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 13
  %12 = load i32, ptr %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %21, label %14

14:                                               ; preds = %10
  %15 = icmp slt i32 %6, 1
  br i1 %15, label %54, label %16

16:                                               ; preds = %14
  %17 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 4
  %18 = load ptr, ptr %17, align 8
  %19 = shl i64 %5, 32
  %20 = ashr exact i64 %19, 32
  br label %39

21:                                               ; preds = %10
  %22 = icmp sgt i32 %6, 0
  br i1 %22, label %23, label %60

23:                                               ; preds = %21
  %24 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 4
  %25 = load ptr, ptr %24, align 8
  %26 = and i64 %5, 4294967295
  br label %27

27:                                               ; preds = %36, %23
  %28 = phi i64 [ 0, %23 ], [ %37, %36 ]
  %29 = getelementptr inbounds i32, ptr %25, i64 %28
  %30 = load i32, ptr %29, align 4
  %31 = and i32 %30, 255
  %32 = icmp eq i32 %31, 255
  br i1 %32, label %36, label %33

33:                                               ; preds = %27
  %.lcssa1 = phi i64 [ %28, %27 ]
  %34 = trunc i64 %.lcssa1 to i32
  %35 = add nuw nsw i32 %34, 1
  br label %60

36:                                               ; preds = %27
  %37 = add nuw nsw i64 %28, 1
  %38 = icmp eq i64 %37, %26
  br i1 %38, label %58, label %27, !llvm.loop !72

39:                                               ; preds = %39, %16
  %40 = phi i64 [ 0, %16 ], [ %47, %39 ]
  %41 = phi i64 [ 0, %16 ], [ %46, %39 ]
  %42 = getelementptr inbounds i32, ptr %18, i64 %40
  %43 = load i32, ptr %42, align 4
  %44 = and i32 %43, 255
  %45 = zext i32 %44 to i64
  %46 = add nuw nsw i64 %41, %45
  %47 = add nuw nsw i64 %40, 1
  %48 = icmp sge i64 %47, %20
  %49 = icmp ugt i64 %46, 4096
  %50 = select i1 %48, i1 true, i1 %49
  br i1 %50, label %51, label %39, !llvm.loop !73

51:                                               ; preds = %39
  %.lcssa4 = phi i64 [ %40, %39 ]
  %.lcssa3 = phi i64 [ %47, %39 ]
  %52 = trunc i64 %.lcssa3 to i32
  %53 = getelementptr inbounds i64, ptr %8, i64 %.lcssa4
  br label %54

54:                                               ; preds = %51, %14
  %55 = phi ptr [ %53, %51 ], [ %8, %14 ]
  %56 = phi i32 [ %52, %51 ], [ 0, %14 ]
  %57 = load i64, ptr %55, align 8
  br label %60

58:                                               ; preds = %36
  %59 = trunc i64 %5 to i32
  br label %60

60:                                               ; preds = %58, %54, %33, %21
  %61 = phi i32 [ %35, %33 ], [ %56, %54 ], [ 0, %21 ], [ %59, %58 ]
  %62 = phi i64 [ 0, %33 ], [ %57, %54 ], [ 0, %21 ], [ 0, %58 ]
  %63 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 10
  store i32 1399285583, ptr %63, align 8
  %64 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 10, i64 4
  store i8 0, ptr %64, align 4
  %65 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 10, i64 5
  store i8 0, ptr %65, align 1
  %66 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 4
  %67 = load ptr, ptr %66, align 8
  %68 = load i32, ptr %67, align 4
  %69 = and i32 %68, 256
  %70 = icmp eq i32 %69, 0
  %71 = zext i1 %70 to i8
  %72 = or i8 %71, 2
  %73 = select i1 %13, i8 %72, i8 %71
  store i8 %73, ptr %65, align 1
  %74 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 12
  %75 = load i32, ptr %74, align 8
  %76 = icmp ne i32 %75, 0
  %77 = sext i32 %61 to i64
  %78 = icmp eq i64 %4, %77
  %79 = select i1 %76, i1 %78, i1 false
  br i1 %79, label %80, label %82

80:                                               ; preds = %60
  %81 = or i8 %73, 4
  store i8 %81, ptr %65, align 1
  br label %82

82:                                               ; preds = %80, %60
  store i32 1, ptr %11, align 4
  br label %83

83:                                               ; preds = %83, %82
  %84 = phi i64 [ 6, %82 ], [ %89, %83 ]
  %85 = phi i64 [ %62, %82 ], [ %88, %83 ]
  %86 = trunc i64 %85 to i8
  %87 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 10, i64 %84
  store i8 %86, ptr %87, align 1
  %88 = ashr i64 %85, 8
  %89 = add nuw nsw i64 %84, 1
  %90 = icmp eq i64 %89, 14
  br i1 %90, label %91, label %83, !llvm.loop !74

91:                                               ; preds = %83
  %92 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 14
  %93 = load i64, ptr %92, align 8
  br label %94

94:                                               ; preds = %94, %91
  %95 = phi i64 [ 14, %91 ], [ %100, %94 ]
  %96 = phi i64 [ %93, %91 ], [ %99, %94 ]
  %97 = trunc i64 %96 to i8
  %98 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 10, i64 %95
  store i8 %97, ptr %98, align 1
  %99 = ashr i64 %96, 8
  %100 = add nuw nsw i64 %95, 1
  %101 = icmp eq i64 %100, 18
  br i1 %101, label %102, label %94, !llvm.loop !75

102:                                              ; preds = %94
  %103 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 15
  %104 = load i64, ptr %103, align 8
  %105 = icmp eq i64 %104, -1
  %106 = select i1 %105, i64 0, i64 %104
  %107 = add nuw nsw i64 %106, 1
  store i64 %107, ptr %103, align 8
  br label %108

108:                                              ; preds = %108, %102
  %109 = phi i64 [ 18, %102 ], [ %114, %108 ]
  %110 = phi i64 [ %106, %102 ], [ %113, %108 ]
  %111 = trunc i64 %110 to i8
  %112 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 10, i64 %109
  store i8 %111, ptr %112, align 1
  %113 = ashr i64 %110, 8
  %114 = add nuw nsw i64 %109, 1
  %115 = icmp eq i64 %114, 22
  br i1 %115, label %116, label %108, !llvm.loop !76

116:                                              ; preds = %108
  %117 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 10, i64 22
  %118 = trunc i32 %61 to i8
  %119 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 10, i64 26
  store i32 0, ptr %117, align 2
  store i8 %118, ptr %119, align 2
  %120 = icmp sgt i32 %61, 0
  br i1 %120, label %121, label %137

121:                                              ; preds = %116
  %122 = zext i32 %61 to i64
  br label %123

123:                                              ; preds = %123, %121
  %124 = phi i64 [ 0, %121 ], [ %133, %123 ]
  %125 = phi i32 [ 0, %121 ], [ %132, %123 ]
  %126 = getelementptr inbounds i32, ptr %67, i64 %124
  %127 = load i32, ptr %126, align 4
  %128 = trunc i32 %127 to i8
  %129 = add nuw nsw i64 %124, 27
  %130 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 10, i64 %129
  store i8 %128, ptr %130, align 1
  %131 = and i32 %127, 255
  %132 = add nuw nsw i32 %131, %125
  %133 = add nuw nsw i64 %124, 1
  %134 = icmp eq i64 %133, %122
  br i1 %134, label %135, label %123, !llvm.loop !77

135:                                              ; preds = %123
  %.lcssa = phi i32 [ %132, %123 ]
  %136 = zext i32 %.lcssa to i64
  br label %137

137:                                              ; preds = %135, %116
  %138 = phi i64 [ 0, %116 ], [ %136, %135 ]
  store ptr %63, ptr %1, align 8
  %139 = add nsw i32 %61, 27
  %140 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 11
  store i32 %139, ptr %140, align 4
  %141 = sext i32 %139 to i64
  %142 = getelementptr inbounds %struct.ogg_page, ptr %1, i64 0, i32 1
  store i64 %141, ptr %142, align 8
  %143 = load ptr, ptr %0, align 8
  %144 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 3
  %145 = load i64, ptr %144, align 8
  %146 = getelementptr inbounds i8, ptr %143, i64 %145
  %147 = getelementptr inbounds %struct.ogg_page, ptr %1, i64 0, i32 2
  store ptr %146, ptr %147, align 8
  %148 = getelementptr inbounds %struct.ogg_page, ptr %1, i64 0, i32 3
  store i64 %138, ptr %148, align 8
  %149 = load i64, ptr %3, align 8
  %150 = sub nsw i64 %149, %77
  store i64 %150, ptr %3, align 8
  %151 = load ptr, ptr %66, align 8
  %152 = getelementptr inbounds i32, ptr %151, i64 %77
  %153 = shl i64 %150, 2
  tail call void @llvm.memmove.p0.p0.i64(ptr align 4 %151, ptr align 4 %152, i64 %153, i1 false)
  %154 = load ptr, ptr %7, align 8
  %155 = getelementptr inbounds i64, ptr %154, i64 %77
  %156 = load i64, ptr %3, align 8
  %157 = shl i64 %156, 3
  tail call void @llvm.memmove.p0.p0.i64(ptr align 8 %154, ptr align 8 %155, i64 %157, i1 false)
  %158 = load i64, ptr %144, align 8
  %159 = add nsw i64 %158, %138
  store i64 %159, ptr %144, align 8
  tail call void @ogg_page_checksum_set(ptr noundef nonnull %1) #56
  br label %160

160:                                              ; preds = %137, %2
  %161 = phi i32 [ 1, %137 ], [ 0, %2 ]
  ret i32 %161
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @vorbis_analysis_buffer(ptr nocapture noundef %0, i32 noundef %1) #0 {
  %3 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 19
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr inbounds %struct.private_state, ptr %6, i64 0, i32 9
  %8 = load ptr, ptr %7, align 8
  %9 = icmp eq ptr %8, null
  br i1 %9, label %11, label %10

10:                                               ; preds = %2
  tail call void @free(ptr noundef nonnull %8) #59
  br label %11

11:                                               ; preds = %10, %2
  store ptr null, ptr %7, align 8
  %12 = getelementptr inbounds %struct.private_state, ptr %6, i64 0, i32 10
  %13 = load ptr, ptr %12, align 8
  %14 = icmp eq ptr %13, null
  br i1 %14, label %16, label %15

15:                                               ; preds = %11
  tail call void @free(ptr noundef nonnull %13) #59
  br label %16

16:                                               ; preds = %15, %11
  store ptr null, ptr %12, align 8
  %17 = getelementptr inbounds %struct.private_state, ptr %6, i64 0, i32 11
  %18 = load ptr, ptr %17, align 8
  %19 = icmp eq ptr %18, null
  br i1 %19, label %21, label %20

20:                                               ; preds = %16
  tail call void @free(ptr noundef nonnull %18) #59
  br label %21

21:                                               ; preds = %20, %16
  store ptr null, ptr %17, align 8
  %22 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 5
  %23 = load i32, ptr %22, align 4
  %24 = add nsw i32 %23, %1
  %25 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 4
  %26 = load i32, ptr %25, align 8
  %27 = icmp slt i32 %24, %26
  br i1 %27, label %28, label %31

28:                                               ; preds = %21
  %29 = getelementptr inbounds %struct.vorbis_info, ptr %4, i64 0, i32 1
  %30 = load i32, ptr %29, align 4
  br label %54

31:                                               ; preds = %21
  %32 = shl nsw i32 %1, 1
  %33 = add nsw i32 %23, %32
  store i32 %33, ptr %25, align 8
  %34 = getelementptr inbounds %struct.vorbis_info, ptr %4, i64 0, i32 1
  %35 = load i32, ptr %34, align 4
  %36 = icmp sgt i32 %35, 0
  br i1 %36, label %37, label %75

37:                                               ; preds = %31
  %38 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 2
  br label %39

39:                                               ; preds = %39, %37
  %40 = phi i64 [ 0, %37 ], [ %50, %39 ]
  %41 = load ptr, ptr %38, align 8
  %42 = getelementptr inbounds ptr, ptr %41, i64 %40
  %43 = load ptr, ptr %42, align 8
  %44 = load i32, ptr %25, align 8
  %45 = sext i32 %44 to i64
  %46 = shl nsw i64 %45, 2
  %47 = tail call ptr @realloc(ptr noundef %43, i64 noundef %46) #61
  %48 = load ptr, ptr %38, align 8
  %49 = getelementptr inbounds ptr, ptr %48, i64 %40
  store ptr %47, ptr %49, align 8
  %50 = add nuw nsw i64 %40, 1
  %51 = load i32, ptr %34, align 4
  %52 = sext i32 %51 to i64
  %53 = icmp slt i64 %50, %52
  br i1 %53, label %39, label %54, !llvm.loop !78

54:                                               ; preds = %39, %28
  %55 = phi i32 [ %30, %28 ], [ %51, %39 ]
  %56 = getelementptr inbounds %struct.vorbis_info, ptr %4, i64 0, i32 1
  %57 = icmp sgt i32 %55, 0
  br i1 %57, label %58, label %75

58:                                               ; preds = %54
  %59 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 2
  %60 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 3
  br label %61

61:                                               ; preds = %61, %58
  %62 = phi i64 [ 0, %58 ], [ %71, %61 ]
  %63 = load ptr, ptr %59, align 8
  %64 = getelementptr inbounds ptr, ptr %63, i64 %62
  %65 = load ptr, ptr %64, align 8
  %66 = load i32, ptr %22, align 4
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds float, ptr %65, i64 %67
  %69 = load ptr, ptr %60, align 8
  %70 = getelementptr inbounds ptr, ptr %69, i64 %62
  store ptr %68, ptr %70, align 8
  %71 = add nuw nsw i64 %62, 1
  %72 = load i32, ptr %56, align 4
  %73 = sext i32 %72 to i64
  %74 = icmp slt i64 %71, %73
  br i1 %74, label %61, label %75, !llvm.loop !79

75:                                               ; preds = %61, %54, %31
  %76 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 3
  %77 = load ptr, ptr %76, align 8
  ret ptr %77
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @vorbis_analysis_wrote(ptr nocapture noundef %0, i32 noundef %1) #0 {
  %3 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr inbounds %struct.vorbis_info, ptr %4, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8
  %7 = icmp slt i32 %1, 1
  br i1 %7, label %8, label %67

8:                                                ; preds = %2
  %9 = alloca [128 x i8], align 16
  %10 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 7
  %11 = load i32, ptr %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %8
  tail call fastcc void @_preextrapolate_helper(ptr noundef nonnull %0) #56
  br label %14

14:                                               ; preds = %13, %8
  %15 = getelementptr inbounds [2 x i64], ptr %6, i64 0, i64 1
  %16 = load i64, ptr %15, align 8
  %17 = trunc i64 %16 to i32
  %18 = mul i32 %17, 3
  %19 = tail call ptr @vorbis_analysis_buffer(ptr noundef nonnull %0, i32 noundef %18) #56
  %20 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 5
  %21 = load i32, ptr %20, align 4
  %22 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 8
  store i32 %21, ptr %22, align 8
  %23 = load i64, ptr %15, align 8
  %24 = trunc i64 %23 to i32
  %25 = mul i32 %24, 3
  %26 = add i32 %25, %21
  store i32 %26, ptr %20, align 4
  %27 = getelementptr inbounds %struct.vorbis_info, ptr %4, i64 0, i32 1
  %28 = load i32, ptr %27, align 4
  %29 = icmp sgt i32 %28, 0
  br i1 %29, label %30, label %87

30:                                               ; preds = %14
  %31 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 2
  br label %32

32:                                               ; preds = %62, %30
  %33 = phi i64 [ 0, %30 ], [ %63, %62 ]
  %34 = load i32, ptr %22, align 8
  %35 = icmp sgt i32 %34, 64
  br i1 %35, label %36, label %52

36:                                               ; preds = %32
  %37 = zext i32 %34 to i64
  %38 = load i64, ptr %15, align 8
  %39 = tail call i64 @llvm.smin.i64(i64 %38, i64 %37)
  %40 = load ptr, ptr %31, align 8
  %41 = getelementptr inbounds ptr, ptr %40, i64 %33
  %42 = load ptr, ptr %41, align 8
  %43 = getelementptr inbounds float, ptr %42, i64 %37
  %44 = sub i64 0, %39
  %45 = getelementptr inbounds float, ptr %43, i64 %44
  %46 = trunc i64 %39 to i32
  %47 = call float @vorbis_lpc_from_data(ptr noundef nonnull %45, ptr noundef nonnull %9, i32 noundef %46, i32 noundef 32) #56
  %48 = getelementptr inbounds float, ptr %43, i64 -32
  %49 = load i32, ptr %20, align 4
  %50 = sub nsw i32 %49, %34
  %51 = sext i32 %50 to i64
  call void @vorbis_lpc_predict(ptr noundef nonnull %9, ptr noundef nonnull %48, i32 noundef 32, ptr noundef nonnull %43, i64 noundef %51) #56
  br label %62

52:                                               ; preds = %32
  %53 = load ptr, ptr %31, align 8
  %54 = getelementptr inbounds ptr, ptr %53, i64 %33
  %55 = load ptr, ptr %54, align 8
  %56 = sext i32 %34 to i64
  %57 = getelementptr inbounds float, ptr %55, i64 %56
  %58 = load i32, ptr %20, align 4
  %59 = sub nsw i32 %58, %34
  %60 = sext i32 %59 to i64
  %61 = shl nsw i64 %60, 2
  tail call void @llvm.memset.p0.i64(ptr align 4 %57, i8 0, i64 %61, i1 false)
  br label %62

62:                                               ; preds = %52, %36
  %63 = add nuw nsw i64 %33, 1
  %64 = load i32, ptr %27, align 4
  %65 = sext i32 %64 to i64
  %66 = icmp slt i64 %63, %65
  br i1 %66, label %32, label %87, !llvm.loop !80

67:                                               ; preds = %2
  %68 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 5
  %69 = load i32, ptr %68, align 4
  %70 = add nsw i32 %69, %1
  %71 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 4
  %72 = load i32, ptr %71, align 8
  %73 = icmp sgt i32 %70, %72
  br i1 %73, label %87, label %74

74:                                               ; preds = %67
  store i32 %70, ptr %68, align 4
  %75 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 7
  %76 = load i32, ptr %75, align 4
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %87

78:                                               ; preds = %74
  %79 = sext i32 %70 to i64
  %80 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 12
  %81 = load i64, ptr %80, align 8
  %82 = sub nsw i64 %79, %81
  %83 = getelementptr inbounds [2 x i64], ptr %6, i64 0, i64 1
  %84 = load i64, ptr %83, align 8
  %85 = icmp sgt i64 %82, %84
  br i1 %85, label %86, label %87

86:                                               ; preds = %78
  tail call fastcc void @_preextrapolate_helper(ptr noundef nonnull %0) #56
  br label %87

87:                                               ; preds = %86, %78, %74, %67, %62, %14
  %88 = phi i32 [ -131, %67 ], [ 0, %74 ], [ 0, %78 ], [ 0, %86 ], [ 0, %14 ], [ 0, %62 ]
  ret i32 %88
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @vorbis_analysis_blockout(ptr noundef %0, ptr nocapture noundef %1) #0 {
  %3 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr inbounds %struct.vorbis_info, ptr %4, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 19
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds %struct.private_state, ptr %8, i64 0, i32 8
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 12
  %12 = load i64, ptr %11, align 8
  %13 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 10
  %14 = load i64, ptr %13, align 8
  %15 = getelementptr inbounds [2 x i64], ptr %6, i64 0, i64 %14
  %16 = load i64, ptr %15, align 8
  %17 = sdiv i64 %16, -2
  %18 = add i64 %17, %12
  %19 = getelementptr inbounds %struct.vorbis_block, ptr %1, i64 0, i32 20
  %20 = load ptr, ptr %19, align 8
  %21 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 7
  %22 = load i32, ptr %21, align 4
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %231, label %24

24:                                               ; preds = %2
  %25 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 8
  %26 = load i32, ptr %25, align 8
  %27 = icmp eq i32 %26, -1
  br i1 %27, label %231, label %28

28:                                               ; preds = %24
  %29 = tail call i64 @_ve_envelope_search(ptr noundef nonnull %0) #56
  %30 = icmp eq i64 %29, -1
  br i1 %30, label %31, label %36

31:                                               ; preds = %28
  %32 = load i32, ptr %25, align 8
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %231, label %34

34:                                               ; preds = %31
  %35 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 11
  store i64 0, ptr %35, align 8
  br label %44

36:                                               ; preds = %28
  %37 = load i64, ptr %6, align 8
  %38 = getelementptr inbounds [2 x i64], ptr %6, i64 0, i64 1
  %39 = load i64, ptr %38, align 8
  %40 = icmp eq i64 %37, %39
  %41 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 11
  br i1 %40, label %42, label %43

42:                                               ; preds = %36
  store i64 0, ptr %41, align 8
  br label %44

43:                                               ; preds = %36
  store i64 %29, ptr %41, align 8
  br label %44

44:                                               ; preds = %43, %42, %34
  %45 = phi i64 [ 0, %42 ], [ %29, %43 ], [ 0, %34 ]
  %46 = load i64, ptr %11, align 8
  %47 = load i64, ptr %13, align 8
  %48 = getelementptr inbounds [2 x i64], ptr %6, i64 0, i64 %47
  %49 = load i64, ptr %48, align 8
  %50 = sdiv i64 %49, 4
  %51 = add nsw i64 %50, %46
  %52 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 11
  %53 = getelementptr inbounds [2 x i64], ptr %6, i64 0, i64 %45
  %54 = load i64, ptr %53, align 8
  %55 = sdiv i64 %54, 4
  %56 = add nsw i64 %51, %55
  %57 = sdiv i64 %54, 2
  %58 = add nsw i64 %56, %57
  %59 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 5
  %60 = load i32, ptr %59, align 4
  %61 = sext i32 %60 to i64
  %62 = icmp sgt i64 %58, %61
  br i1 %62, label %231, label %63

63:                                               ; preds = %44
  tail call void @_vorbis_block_ripcord(ptr noundef nonnull %1) #56
  %64 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 9
  %65 = load i64, ptr %64, align 8
  %66 = getelementptr inbounds %struct.vorbis_block, ptr %1, i64 0, i32 2
  store i64 %65, ptr %66, align 8
  %67 = load i64, ptr %13, align 8
  %68 = getelementptr inbounds %struct.vorbis_block, ptr %1, i64 0, i32 3
  store i64 %67, ptr %68, align 8
  %69 = load i64, ptr %52, align 8
  %70 = getelementptr inbounds %struct.vorbis_block, ptr %1, i64 0, i32 4
  store i64 %69, ptr %70, align 8
  %71 = load i64, ptr %13, align 8
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %83, label %73

73:                                               ; preds = %63
  %74 = load i64, ptr %64, align 8
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %79, label %76

76:                                               ; preds = %73
  %77 = load i64, ptr %52, align 8
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %79, label %81

79:                                               ; preds = %76, %73
  %80 = getelementptr inbounds %struct.vorbis_block_internal, ptr %20, i64 0, i32 2
  store i32 0, ptr %80, align 4
  br label %89

81:                                               ; preds = %76
  %82 = getelementptr inbounds %struct.vorbis_block_internal, ptr %20, i64 0, i32 2
  store i32 1, ptr %82, align 4
  br label %89

83:                                               ; preds = %63
  %84 = tail call i32 @_ve_envelope_mark(ptr noundef nonnull %0) #56, !range !36
  %85 = icmp eq i32 %84, 0
  %86 = getelementptr inbounds %struct.vorbis_block_internal, ptr %20, i64 0, i32 2
  br i1 %85, label %88, label %87

87:                                               ; preds = %83
  store i32 0, ptr %86, align 4
  br label %89

88:                                               ; preds = %83
  store i32 1, ptr %86, align 4
  br label %89

89:                                               ; preds = %88, %87, %81, %79
  %90 = getelementptr inbounds %struct.vorbis_block, ptr %1, i64 0, i32 10
  store ptr %0, ptr %90, align 8
  %91 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 14
  %92 = load i64, ptr %91, align 8
  %93 = add nsw i64 %92, 1
  store i64 %93, ptr %91, align 8
  %94 = getelementptr inbounds %struct.vorbis_block, ptr %1, i64 0, i32 9
  store i64 %92, ptr %94, align 8
  %95 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 13
  %96 = load i64, ptr %95, align 8
  %97 = getelementptr inbounds %struct.vorbis_block, ptr %1, i64 0, i32 8
  store i64 %96, ptr %97, align 8
  %98 = load i64, ptr %13, align 8
  %99 = getelementptr inbounds [2 x i64], ptr %6, i64 0, i64 %98
  %100 = load i64, ptr %99, align 8
  %101 = trunc i64 %100 to i32
  %102 = getelementptr inbounds %struct.vorbis_block, ptr %1, i64 0, i32 5
  store i32 %101, ptr %102, align 8
  %103 = getelementptr inbounds %struct.vorbis_block_internal, ptr %20, i64 0, i32 1
  %104 = load float, ptr %103, align 8
  %105 = load float, ptr %10, align 8
  %106 = fcmp ogt float %104, %105
  br i1 %106, label %107, label %108

107:                                              ; preds = %89
  store float %104, ptr %10, align 8
  br label %108

108:                                              ; preds = %107, %89
  %109 = phi float [ %104, %107 ], [ %105, %89 ]
  %110 = load ptr, ptr %3, align 8
  %111 = getelementptr inbounds %struct.vorbis_info, ptr %110, i64 0, i32 7
  %112 = load ptr, ptr %111, align 8
  %113 = load i64, ptr %13, align 8
  %114 = getelementptr inbounds [2 x i64], ptr %112, i64 0, i64 %113
  %115 = load i64, ptr %114, align 8
  %116 = sdiv i64 %115, 2
  %117 = trunc i64 %116 to i32
  %118 = sitofp i32 %117 to float
  %119 = getelementptr inbounds %struct.vorbis_info, ptr %110, i64 0, i32 2
  %120 = load i64, ptr %119, align 8
  %121 = sitofp i64 %120 to float
  %122 = fdiv float %118, %121
  %123 = getelementptr inbounds %struct.codec_setup_info, ptr %112, i64 0, i32 17, i32 5
  %124 = load float, ptr %123, align 4
  %125 = fmul float %124, %122
  %126 = fadd float %109, %125
  %127 = fcmp olt float %126, -9.999000e+03
  %128 = select i1 %127, float -9.999000e+03, float %126
  store float %128, ptr %10, align 8
  store float %128, ptr %103, align 8
  %129 = getelementptr inbounds %struct.vorbis_info, ptr %4, i64 0, i32 1
  %130 = load i32, ptr %129, align 4
  %131 = sext i32 %130 to i64
  %132 = shl nsw i64 %131, 3
  %133 = tail call ptr @_vorbis_block_alloc(ptr noundef nonnull %1, i64 noundef %132) #56
  store ptr %133, ptr %1, align 8
  %134 = load i32, ptr %129, align 4
  %135 = sext i32 %134 to i64
  %136 = shl nsw i64 %135, 3
  %137 = tail call ptr @_vorbis_block_alloc(ptr noundef nonnull %1, i64 noundef %136) #56
  store ptr %137, ptr %20, align 8
  %138 = load i32, ptr %129, align 4
  %139 = icmp sgt i32 %138, 0
  br i1 %139, label %140, label %171

140:                                              ; preds = %108
  %141 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 2
  br label %142

142:                                              ; preds = %142, %140
  %143 = phi i64 [ 0, %140 ], [ %167, %142 ]
  %144 = load i32, ptr %102, align 8
  %145 = sext i32 %144 to i64
  %146 = add nsw i64 %18, %145
  %147 = shl i64 %146, 2
  %148 = tail call ptr @_vorbis_block_alloc(ptr noundef nonnull %1, i64 noundef %147) #56
  %149 = load ptr, ptr %20, align 8
  %150 = getelementptr inbounds ptr, ptr %149, i64 %143
  store ptr %148, ptr %150, align 8
  %151 = load ptr, ptr %20, align 8
  %152 = getelementptr inbounds ptr, ptr %151, i64 %143
  %153 = load ptr, ptr %152, align 8
  %154 = load ptr, ptr %141, align 8
  %155 = getelementptr inbounds ptr, ptr %154, i64 %143
  %156 = load ptr, ptr %155, align 8
  %157 = load i32, ptr %102, align 8
  %158 = sext i32 %157 to i64
  %159 = add nsw i64 %18, %158
  %160 = shl i64 %159, 2
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 4 %153, ptr align 4 %156, i64 %160, i1 false)
  %161 = load ptr, ptr %20, align 8
  %162 = getelementptr inbounds ptr, ptr %161, i64 %143
  %163 = load ptr, ptr %162, align 8
  %164 = getelementptr inbounds float, ptr %163, i64 %18
  %165 = load ptr, ptr %1, align 8
  %166 = getelementptr inbounds ptr, ptr %165, i64 %143
  store ptr %164, ptr %166, align 8
  %167 = add nuw nsw i64 %143, 1
  %168 = load i32, ptr %129, align 4
  %169 = sext i32 %168 to i64
  %170 = icmp slt i64 %167, %169
  br i1 %170, label %142, label %171, !llvm.loop !81

171:                                              ; preds = %142, %108
  %172 = load i32, ptr %25, align 8
  %173 = icmp eq i32 %172, 0
  br i1 %173, label %180, label %174

174:                                              ; preds = %171
  %175 = load i64, ptr %11, align 8
  %176 = sext i32 %172 to i64
  %177 = icmp slt i64 %175, %176
  br i1 %177, label %180, label %178

178:                                              ; preds = %174
  store i32 -1, ptr %25, align 8
  %179 = getelementptr inbounds %struct.vorbis_block, ptr %1, i64 0, i32 7
  store i32 1, ptr %179, align 8
  br label %231

180:                                              ; preds = %174, %171
  %181 = getelementptr inbounds [2 x i64], ptr %6, i64 0, i64 1
  %182 = load i64, ptr %181, align 8
  %183 = sdiv i64 %182, 2
  %184 = shl i64 %183, 32
  %185 = ashr exact i64 %184, 32
  %186 = sub i64 %56, %183
  %187 = trunc i64 %186 to i32
  %188 = icmp sgt i32 %187, 0
  br i1 %188, label %189, label %231

189:                                              ; preds = %180
  %190 = load ptr, ptr %8, align 8
  %191 = and i64 %186, 4294967295
  tail call void @_ve_envelope_shift(ptr noundef %190, i64 noundef %191) #56
  %192 = load i32, ptr %59, align 4
  %193 = sub nsw i32 %192, %187
  store i32 %193, ptr %59, align 4
  %194 = load i32, ptr %129, align 4
  %195 = icmp sgt i32 %194, 0
  br i1 %195, label %196, label %211

196:                                              ; preds = %189
  %197 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 2
  br label %198

198:                                              ; preds = %198, %196
  %199 = phi i64 [ 0, %196 ], [ %207, %198 ]
  %200 = load ptr, ptr %197, align 8
  %201 = getelementptr inbounds ptr, ptr %200, i64 %199
  %202 = load ptr, ptr %201, align 8
  %203 = getelementptr inbounds float, ptr %202, i64 %191
  %204 = load i32, ptr %59, align 4
  %205 = sext i32 %204 to i64
  %206 = shl nsw i64 %205, 2
  tail call void @llvm.memmove.p0.p0.i64(ptr align 4 %202, ptr align 4 %203, i64 %206, i1 false)
  %207 = add nuw nsw i64 %199, 1
  %208 = load i32, ptr %129, align 4
  %209 = sext i32 %208 to i64
  %210 = icmp slt i64 %207, %209
  br i1 %210, label %198, label %211, !llvm.loop !82

211:                                              ; preds = %198, %189
  %212 = load <2 x i64>, ptr %13, align 8
  store <2 x i64> %212, ptr %64, align 8
  store i64 %185, ptr %11, align 8
  %213 = load i32, ptr %25, align 8
  %214 = icmp eq i32 %213, 0
  br i1 %214, label %228, label %215

215:                                              ; preds = %211
  %216 = sub nsw i32 %213, %187
  %217 = icmp slt i32 %216, 1
  %218 = select i1 %217, i32 -1, i32 %216
  store i32 %218, ptr %25, align 8
  %219 = sext i32 %218 to i64
  %220 = icmp slt i64 %185, %219
  %221 = load i64, ptr %95, align 8
  br i1 %220, label %226, label %222

222:                                              ; preds = %215
  %223 = sub nsw i64 %191, %185
  %224 = add nsw i64 %223, %219
  %225 = add nsw i64 %224, %221
  store i64 %225, ptr %95, align 8
  br label %231

226:                                              ; preds = %215
  %227 = add nsw i64 %221, %191
  store i64 %227, ptr %95, align 8
  br label %231

228:                                              ; preds = %211
  %229 = load i64, ptr %95, align 8
  %230 = add nsw i64 %229, %191
  store i64 %230, ptr %95, align 8
  br label %231

231:                                              ; preds = %228, %226, %222, %180, %178, %44, %31, %24, %2
  %232 = phi i32 [ 1, %178 ], [ 0, %44 ], [ 0, %2 ], [ 0, %24 ], [ 1, %228 ], [ 1, %226 ], [ 1, %222 ], [ 1, %180 ], [ 0, %31 ]
  ret i32 %232
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @vorbis_bitrate_addblock(ptr nocapture noundef %0) #21 {
  %2 = alloca %struct.oggpack_buffer, align 8
  %3 = alloca %struct.oggpack_buffer, align 8
  %4 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 20
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 10
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %7, i64 0, i32 19
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 12
  %11 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %7, i64 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = getelementptr inbounds %struct.vorbis_info, ptr %12, i64 0, i32 7
  %14 = load ptr, ptr %13, align 8
  %15 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 7
  %16 = load i32, ptr %15, align 8
  %17 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 12, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 12, i32 4
  %20 = load i32, ptr %19, align 8
  call void @llvm.lifetime.start.p0(i64 40, ptr nonnull %2)
  %21 = load ptr, ptr %10, align 8
  %22 = icmp eq ptr %21, null
  br i1 %22, label %23, label %58

23:                                               ; preds = %1
  call void @llvm.lifetime.start.p0(i64 40, ptr nonnull %3)
  %24 = icmp eq i32 %18, 0
  br i1 %24, label %25, label %56

25:                                               ; preds = %23
  store i32 1, ptr %17, align 4
  %26 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 1
  %27 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 1, i32 2
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 12, i32 24
  %30 = load ptr, ptr %29, align 8
  store ptr %28, ptr %30, align 8
  %31 = load i64, ptr %26, align 8
  %32 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 1, i32 1
  %33 = load i32, ptr %32, align 8
  %34 = add nsw i32 %33, 7
  %35 = sdiv i32 %34, 8
  %36 = sext i32 %35 to i64
  %37 = add nsw i64 %31, %36
  %38 = load ptr, ptr %29, align 8
  %39 = getelementptr inbounds %struct.ogg_packet, ptr %38, i64 0, i32 1
  store i64 %37, ptr %39, align 8
  %40 = load ptr, ptr %29, align 8
  %41 = getelementptr inbounds %struct.ogg_packet, ptr %40, i64 0, i32 2
  store i64 0, ptr %41, align 8
  %42 = load i32, ptr %15, align 8
  %43 = sext i32 %42 to i64
  %44 = load ptr, ptr %29, align 8
  %45 = getelementptr inbounds %struct.ogg_packet, ptr %44, i64 0, i32 3
  store i64 %43, ptr %45, align 8
  %46 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 8
  %47 = load i64, ptr %46, align 8
  %48 = load ptr, ptr %29, align 8
  %49 = getelementptr inbounds %struct.ogg_packet, ptr %48, i64 0, i32 4
  store i64 %47, ptr %49, align 8
  %50 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 9
  %51 = load i64, ptr %50, align 8
  %52 = load ptr, ptr %29, align 8
  %53 = getelementptr inbounds %struct.ogg_packet, ptr %52, i64 0, i32 5
  store i64 %51, ptr %53, align 8
  %54 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 12, i32 23
  %55 = load ptr, ptr %54, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %3, ptr noundef nonnull align 8 dereferenceable(40) %55, i64 40, i1 false)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %55, ptr noundef nonnull align 8 dereferenceable(40) %26, i64 40, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %26, ptr noundef nonnull align 8 dereferenceable(40) %3, i64 40, i1 false)
  br label %56

56:                                               ; preds = %25, %23
  %57 = phi i32 [ 0, %25 ], [ -1, %23 ]
  call void @llvm.lifetime.end.p0(i64 40, ptr nonnull %3)
  br label %763

58:                                               ; preds = %1
  %59 = add nsw i32 %18, 1
  %60 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 12, i32 2
  %61 = load i32, ptr %60, align 8
  %62 = icmp slt i32 %59, %61
  %63 = select i1 %62, i32 %59, i32 0
  %64 = mul nsw i32 %20, %18
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds i32, ptr %21, i64 %65
  %67 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 12, i32 7
  %68 = load i32, ptr %67, align 4
  %69 = icmp eq i32 %63, %68
  br i1 %69, label %763, label %70

70:                                               ; preds = %58
  %71 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 12, i32 17
  %72 = load i32, ptr %71, align 8
  %73 = icmp eq i32 %63, %72
  br i1 %73, label %763, label %74

74:                                               ; preds = %70
  store i32 %63, ptr %17, align 4
  %75 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 3
  %76 = load i64, ptr %75, align 8
  %77 = icmp eq i64 %76, 0
  %78 = select i1 %77, i32 0, i32 -2147483648
  %79 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 12, i32 1
  %80 = load ptr, ptr %79, align 8
  %81 = sext i32 %18 to i64
  %82 = getelementptr inbounds i32, ptr %80, i64 %81
  store i32 %78, ptr %82, align 4
  %83 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 1
  %84 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 1, i32 2
  %85 = load ptr, ptr %84, align 8
  %86 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 12, i32 24
  %87 = load ptr, ptr %86, align 8
  %88 = getelementptr inbounds %struct.ogg_packet, ptr %87, i64 %81
  store ptr %85, ptr %88, align 8
  %89 = load i64, ptr %83, align 8
  %90 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 1, i32 1
  %91 = load i32, ptr %90, align 8
  %92 = add nsw i32 %91, 7
  %93 = sdiv i32 %92, 8
  %94 = sext i32 %93 to i64
  %95 = add nsw i64 %89, %94
  %96 = load ptr, ptr %86, align 8
  %97 = getelementptr inbounds %struct.ogg_packet, ptr %96, i64 %81, i32 1
  store i64 %95, ptr %97, align 8
  %98 = load ptr, ptr %86, align 8
  %99 = getelementptr inbounds %struct.ogg_packet, ptr %98, i64 %81, i32 2
  store i64 0, ptr %99, align 8
  %100 = load i32, ptr %15, align 8
  %101 = sext i32 %100 to i64
  %102 = load ptr, ptr %86, align 8
  %103 = getelementptr inbounds %struct.ogg_packet, ptr %102, i64 %81, i32 3
  store i64 %101, ptr %103, align 8
  %104 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 8
  %105 = load i64, ptr %104, align 8
  %106 = load ptr, ptr %86, align 8
  %107 = getelementptr inbounds %struct.ogg_packet, ptr %106, i64 %81, i32 4
  store i64 %105, ptr %107, align 8
  %108 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 9
  %109 = load i64, ptr %108, align 8
  %110 = load ptr, ptr %86, align 8
  %111 = getelementptr inbounds %struct.ogg_packet, ptr %110, i64 %81, i32 5
  store i64 %109, ptr %111, align 8
  %112 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 12, i32 23
  %113 = load ptr, ptr %112, align 8
  %114 = getelementptr inbounds %struct.oggpack_buffer, ptr %113, i64 %81
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %2, ptr noundef nonnull align 8 dereferenceable(40) %114, i64 40, i1 false)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %114, ptr noundef nonnull align 8 dereferenceable(40) %83, i64 40, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %83, ptr noundef nonnull align 8 dereferenceable(40) %2, i64 40, i1 false)
  %115 = getelementptr inbounds %struct.vorbis_block_internal, ptr %5, i64 0, i32 3
  %116 = load i32, ptr %115, align 8
  store i32 %116, ptr %66, align 4
  br label %117

117:                                              ; preds = %117, %74
  %118 = phi i64 [ 1, %74 ], [ %126, %117 ]
  %119 = getelementptr inbounds %struct.vorbis_block_internal, ptr %5, i64 0, i32 3, i64 %118
  %120 = load i32, ptr %119, align 4
  %121 = add nsw i64 %118, -1
  %122 = getelementptr inbounds %struct.vorbis_block_internal, ptr %5, i64 0, i32 3, i64 %121
  %123 = load i32, ptr %122, align 4
  %124 = sub i32 %120, %123
  %125 = getelementptr inbounds i32, ptr %66, i64 %118
  store i32 %124, ptr %125, align 4
  %126 = add nuw nsw i64 %118, 1
  %127 = icmp eq i64 %126, 15
  br i1 %127, label %128, label %117, !llvm.loop !83

128:                                              ; preds = %117
  %129 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 12, i32 5
  %130 = load ptr, ptr %129, align 8
  %131 = icmp eq ptr %130, null
  br i1 %131, label %310, label %132

132:                                              ; preds = %128
  %133 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 12, i32 6
  %134 = load i32, ptr %133, align 8
  %135 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 12, i32 11
  %136 = load i32, ptr %135, align 4
  %137 = icmp ne i32 %16, 0
  %138 = select i1 %137, i32 0, i32 %136
  %139 = icmp sgt i32 %20, 0
  br i1 %139, label %140, label %157

140:                                              ; preds = %132
  %141 = zext i32 %20 to i64
  br label %142

142:                                              ; preds = %142, %140
  %143 = phi i64 [ 0, %140 ], [ %155, %142 ]
  %144 = getelementptr inbounds i32, ptr %66, i64 %143
  %145 = load i32, ptr %144, align 4
  %146 = zext i32 %145 to i64
  %147 = udiv i32 %145, 255
  %148 = add nuw nsw i32 %147, 1
  %149 = zext i32 %148 to i64
  %150 = load ptr, ptr %129, align 8
  %151 = getelementptr inbounds i64, ptr %150, i64 %143
  %152 = load i64, ptr %151, align 8
  %153 = add i64 %152, %146
  %154 = add i64 %153, %149
  store i64 %154, ptr %151, align 8
  %155 = add nuw nsw i64 %143, 1
  %156 = icmp eq i64 %155, %141
  br i1 %156, label %157, label %142, !llvm.loop !84

157:                                              ; preds = %142, %132
  %158 = load i64, ptr %75, align 8
  %159 = getelementptr inbounds [2 x i64], ptr %14, i64 0, i64 %158
  %160 = load i64, ptr %159, align 8
  %161 = lshr i64 %160, 1
  %162 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 12, i32 9
  %163 = load i32, ptr %162, align 4
  %164 = trunc i64 %161 to i32
  %165 = add i32 %163, %164
  store i32 %165, ptr %162, align 4
  %166 = load i64, ptr %75, align 8
  %167 = getelementptr inbounds [2 x i64], ptr %14, i64 0, i64 %166
  %168 = load i64, ptr %167, align 8
  %169 = lshr i64 %168, 1
  %170 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 12, i32 8
  %171 = load i32, ptr %170, align 8
  %172 = trunc i64 %169 to i32
  %173 = add i32 %171, %172
  store i32 %173, ptr %170, align 8
  %174 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 12, i32 10
  %175 = load i32, ptr %174, align 8
  %176 = icmp ugt i32 %165, %175
  %177 = select i1 %176, i1 true, i1 %137
  br i1 %177, label %178, label %321

178:                                              ; preds = %157
  %179 = icmp ugt i32 %173, %138
  br i1 %179, label %180, label %248

180:                                              ; preds = %178
  %181 = load i64, ptr %75, align 8
  %182 = getelementptr inbounds [2 x i64], ptr %14, i64 0, i64 %181
  %183 = load i64, ptr %182, align 8
  %184 = lshr i64 %183, 1
  %185 = trunc i64 %184 to i32
  %186 = getelementptr inbounds %struct.codec_setup_info, ptr %14, i64 0, i32 18, i32 6
  %187 = load double, ptr %186, align 8
  %188 = tail call fastcc i32 @floater_interpolate(ptr noundef nonnull %10, ptr noundef %12, double noundef %187) #56
  %189 = getelementptr inbounds %struct.codec_setup_info, ptr %14, i64 0, i32 18, i32 5
  %190 = load double, ptr %189, align 8
  %191 = tail call fastcc i32 @floater_interpolate(ptr noundef nonnull %10, ptr noundef %12, double noundef %190) #56
  %192 = sitofp i32 %191 to double
  %193 = icmp slt i32 %188, 8
  %194 = sitofp i32 %188 to double
  %195 = select i1 %193, double %194, double 7.500000e+00
  %196 = fcmp olt double %195, %192
  %197 = select i1 %196, double %192, double %195
  %198 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 12, i32 22
  %199 = load double, ptr %198, align 8
  %200 = fsub double %197, %199
  %201 = sitofp i32 %185 to double
  %202 = fdiv double %200, %201
  %203 = getelementptr inbounds %struct.vorbis_info, ptr %12, i64 0, i32 2
  %204 = load i64, ptr %203, align 8
  %205 = sitofp i64 %204 to double
  %206 = fmul double %202, %205
  %207 = getelementptr inbounds %struct.codec_setup_info, ptr %14, i64 0, i32 18, i32 7
  %208 = load double, ptr %207, align 8
  %209 = fcmp olt double %206, %208
  %210 = fdiv double %208, %205
  %211 = fmul double %210, %201
  %212 = fadd double %199, %211
  %213 = select i1 %209, double %212, double %197
  %214 = getelementptr inbounds %struct.codec_setup_info, ptr %14, i64 0, i32 18, i32 8
  %215 = load double, ptr %214, align 8
  %216 = fcmp ogt double %206, %215
  %217 = fdiv double %215, %205
  %218 = fmul double %217, %201
  %219 = fadd double %199, %218
  %220 = select i1 %216, double %219, double %213
  store double %220, ptr %198, align 8
  %221 = tail call double @llvm.rint.f64(double %220)
  %222 = fptosi double %221 to i32
  %223 = load i32, ptr %133, align 8
  br label %224

224:                                              ; preds = %224, %180
  %225 = phi i32 [ %223, %180 ], [ %243, %224 ]
  %226 = load ptr, ptr %79, align 8
  %227 = sext i32 %225 to i64
  %228 = getelementptr inbounds i32, ptr %226, i64 %227
  %229 = load i32, ptr %228, align 4
  %230 = lshr i32 %229, 31
  %231 = zext i32 %230 to i64
  %232 = getelementptr inbounds [2 x i64], ptr %14, i64 0, i64 %231
  %233 = load i64, ptr %232, align 8
  %234 = lshr i64 %233, 1
  %235 = trunc i64 %234 to i32
  %236 = or i32 %229, %222
  store i32 %236, ptr %228, align 4
  %237 = load i32, ptr %170, align 8
  %238 = sub i32 %237, %235
  store i32 %238, ptr %170, align 8
  %239 = load i32, ptr %133, align 8
  %240 = add nsw i32 %239, 1
  %241 = load i32, ptr %60, align 8
  %242 = icmp slt i32 %240, %241
  %243 = select i1 %242, i32 %240, i32 0
  store i32 %243, ptr %133, align 8
  %244 = icmp ugt i32 %238, %138
  br i1 %244, label %224, label %245, !llvm.loop !85

245:                                              ; preds = %224
  %.lcssa2 = phi i32 [ %243, %224 ]
  %246 = load i32, ptr %174, align 8
  %247 = load i32, ptr %162, align 4
  br label %248

248:                                              ; preds = %245, %178
  %249 = phi i32 [ %246, %245 ], [ %175, %178 ]
  %250 = phi i32 [ %247, %245 ], [ %165, %178 ]
  %251 = phi i32 [ %.lcssa2, %245 ], [ %134, %178 ]
  %252 = icmp ugt i32 %250, %249
  br i1 %252, label %253, label %315

253:                                              ; preds = %248
  %254 = load i32, ptr %67, align 4
  %255 = load i32, ptr %19, align 8
  br label %256

256:                                              ; preds = %299, %253
  %257 = phi i32 [ %249, %253 ], [ %300, %299 ]
  %258 = phi i32 [ %250, %253 ], [ %304, %299 ]
  %259 = phi i32 [ %255, %253 ], [ %303, %299 ]
  %260 = phi i32 [ %254, %253 ], [ %308, %299 ]
  %261 = load ptr, ptr %79, align 8
  %262 = sext i32 %260 to i64
  %263 = getelementptr inbounds i32, ptr %261, i64 %262
  %264 = load i32, ptr %263, align 4
  %265 = lshr i32 %264, 31
  %266 = zext i32 %265 to i64
  %267 = getelementptr inbounds [2 x i64], ptr %14, i64 0, i64 %266
  %268 = load i64, ptr %267, align 8
  %269 = lshr i64 %268, 1
  %270 = trunc i64 %269 to i32
  %271 = icmp sgt i32 %259, 0
  br i1 %271, label %272, label %299

272:                                              ; preds = %272, %256
  %273 = phi i64 [ %291, %272 ], [ 0, %256 ]
  %274 = load ptr, ptr %10, align 8
  %275 = load i32, ptr %67, align 4
  %276 = mul nsw i32 %275, %20
  %277 = trunc i64 %273 to i32
  %278 = add nsw i32 %276, %277
  %279 = sext i32 %278 to i64
  %280 = getelementptr inbounds i32, ptr %274, i64 %279
  %281 = load i32, ptr %280, align 4
  %282 = zext i32 %281 to i64
  %283 = udiv i32 %281, 255
  %284 = add nuw nsw i32 %283, 1
  %285 = zext i32 %284 to i64
  %286 = load ptr, ptr %129, align 8
  %287 = getelementptr inbounds i64, ptr %286, i64 %273
  %288 = load i64, ptr %287, align 8
  %289 = add nuw nsw i64 %282, %285
  %290 = sub i64 %288, %289
  store i64 %290, ptr %287, align 8
  %291 = add nuw nsw i64 %273, 1
  %292 = load i32, ptr %19, align 8
  %293 = sext i32 %292 to i64
  %294 = icmp slt i64 %291, %293
  br i1 %294, label %272, label %295, !llvm.loop !86

295:                                              ; preds = %272
  %.lcssa1 = phi i32 [ %292, %272 ]
  %296 = load i32, ptr %162, align 4
  %297 = load i32, ptr %67, align 4
  %298 = load i32, ptr %174, align 8
  br label %299

299:                                              ; preds = %295, %256
  %300 = phi i32 [ %298, %295 ], [ %257, %256 ]
  %301 = phi i32 [ %297, %295 ], [ %260, %256 ]
  %302 = phi i32 [ %296, %295 ], [ %258, %256 ]
  %303 = phi i32 [ %.lcssa1, %295 ], [ %259, %256 ]
  %304 = sub i32 %302, %270
  store i32 %304, ptr %162, align 4
  %305 = add nsw i32 %301, 1
  %306 = load i32, ptr %60, align 8
  %307 = icmp slt i32 %305, %306
  %308 = select i1 %307, i32 %305, i32 0
  store i32 %308, ptr %67, align 4
  %309 = icmp ugt i32 %304, %300
  br i1 %309, label %256, label %315, !llvm.loop !87

310:                                              ; preds = %128
  %311 = load ptr, ptr %79, align 8
  %312 = getelementptr inbounds i32, ptr %311, i64 %81
  %313 = load i32, ptr %312, align 4
  %314 = or i32 %313, 7
  store i32 %314, ptr %312, align 4
  br label %315

315:                                              ; preds = %310, %299, %248
  %316 = phi i32 [ %18, %310 ], [ %134, %248 ], [ %134, %299 ]
  %317 = phi i32 [ %63, %310 ], [ %251, %248 ], [ %251, %299 ]
  %318 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 12, i32 12
  %319 = load ptr, ptr %318, align 8
  %320 = icmp eq ptr %319, null
  br i1 %320, label %753, label %325

321:                                              ; preds = %157
  %322 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 12, i32 12
  %323 = load ptr, ptr %322, align 8
  %324 = icmp eq ptr %323, null
  br i1 %324, label %753, label %327

325:                                              ; preds = %315
  %326 = icmp eq i32 %16, 0
  br i1 %326, label %327, label %333

327:                                              ; preds = %325, %321
  %328 = phi i32 [ %316, %325 ], [ %134, %321 ]
  %329 = phi i32 [ %317, %325 ], [ %134, %321 ]
  %330 = phi ptr [ %318, %325 ], [ %322, %321 ]
  %331 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 12, i32 19
  %332 = load i32, ptr %331, align 8
  br label %333

333:                                              ; preds = %327, %325
  %334 = phi i32 [ %328, %327 ], [ %316, %325 ]
  %335 = phi i32 [ %329, %327 ], [ %317, %325 ]
  %336 = phi ptr [ %330, %327 ], [ %318, %325 ]
  %337 = phi i32 [ %332, %327 ], [ 0, %325 ]
  %338 = icmp eq i32 %334, %335
  br i1 %338, label %339, label %342

339:                                              ; preds = %333
  %340 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 12, i32 18
  %341 = load i32, ptr %340, align 4
  br label %442

342:                                              ; preds = %333
  %343 = icmp eq i32 %20, 0
  %344 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 12, i32 15
  %345 = sext i32 %20 to i64
  %346 = shl nsw i64 %345, 1
  %347 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 12, i32 13
  %348 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 12, i32 14
  %349 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 12, i32 18
  %350 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 12, i32 16
  %351 = zext i32 %20 to i64
  br label %352

352:                                              ; preds = %413, %342
  %353 = phi i32 [ %334, %342 ], [ %440, %413 ]
  %354 = load ptr, ptr %79, align 8
  %355 = sext i32 %353 to i64
  %356 = getelementptr inbounds i32, ptr %354, i64 %355
  %357 = load i32, ptr %356, align 4
  %358 = lshr i32 %357, 31
  %359 = zext i32 %358 to i64
  %360 = getelementptr inbounds [2 x i64], ptr %14, i64 0, i64 %359
  %361 = load i64, ptr %360, align 8
  %362 = lshr i64 %361, 1
  %363 = trunc i64 %362 to i32
  %364 = and i32 %357, 2147483647
  br i1 %343, label %413, label %365

365:                                              ; preds = %365, %352
  %366 = phi i64 [ %411, %365 ], [ 0, %352 ]
  %367 = trunc i64 %366 to i32
  %368 = tail call i32 @llvm.umax.i32(i32 %364, i32 %367)
  %369 = zext i32 %368 to i64
  %370 = load i32, ptr %19, align 8
  %371 = load ptr, ptr %10, align 8
  %372 = sext i32 %370 to i64
  %373 = mul nsw i64 %372, %355
  %374 = add nsw i64 %373, %369
  %375 = getelementptr inbounds i32, ptr %371, i64 %374
  %376 = load i32, ptr %375, align 4
  %377 = zext i32 %376 to i64
  %378 = udiv i32 %376, 255
  %379 = add nuw nsw i32 %378, 1
  %380 = zext i32 %379 to i64
  %381 = add nuw nsw i64 %380, %377
  %382 = load ptr, ptr %336, align 8
  %383 = load i64, ptr %344, align 8
  %384 = mul i64 %346, %383
  %385 = add nsw i64 %366, %345
  %386 = add i64 %385, %384
  %387 = getelementptr inbounds i64, ptr %382, i64 %386
  %388 = load i64, ptr %387, align 8
  %389 = add nsw i64 %381, %388
  store i64 %389, ptr %387, align 8
  %390 = tail call i32 @llvm.umin.i32(i32 %364, i32 %367)
  %391 = zext i32 %390 to i64
  %392 = load i32, ptr %19, align 8
  %393 = load ptr, ptr %10, align 8
  %394 = sext i32 %392 to i64
  %395 = mul nsw i64 %394, %355
  %396 = add nsw i64 %395, %391
  %397 = getelementptr inbounds i32, ptr %393, i64 %396
  %398 = load i32, ptr %397, align 4
  %399 = zext i32 %398 to i64
  %400 = udiv i32 %398, 255
  %401 = add nuw nsw i32 %400, 1
  %402 = zext i32 %401 to i64
  %403 = add nuw nsw i64 %402, %399
  %404 = load ptr, ptr %336, align 8
  %405 = load i64, ptr %344, align 8
  %406 = mul i64 %346, %405
  %407 = add nsw i64 %406, %366
  %408 = getelementptr inbounds i64, ptr %404, i64 %407
  %409 = load i64, ptr %408, align 8
  %410 = add nsw i64 %403, %409
  store i64 %410, ptr %408, align 8
  %411 = add nuw nsw i64 %366, 1
  %412 = icmp eq i64 %411, %351
  br i1 %412, label %413, label %365, !llvm.loop !88

413:                                              ; preds = %365, %352
  %414 = load ptr, ptr %347, align 8
  %415 = load i64, ptr %344, align 8
  %416 = getelementptr inbounds i64, ptr %414, i64 %415
  store i64 %355, ptr %416, align 8
  %417 = load ptr, ptr %348, align 8
  %418 = load i64, ptr %344, align 8
  %419 = getelementptr inbounds i64, ptr %417, i64 %418
  store i64 0, ptr %419, align 8
  %420 = load i32, ptr %349, align 4
  %421 = add i32 %420, %363
  store i32 %421, ptr %349, align 4
  %422 = zext i32 %364 to i64
  %423 = load i32, ptr %19, align 8
  %424 = load ptr, ptr %10, align 8
  %425 = sext i32 %423 to i64
  %426 = mul nsw i64 %425, %355
  %427 = add nsw i64 %426, %422
  %428 = getelementptr inbounds i32, ptr %424, i64 %427
  %429 = load i32, ptr %428, align 4
  %430 = zext i32 %429 to i64
  %431 = udiv i32 %429, 255
  %432 = add nuw nsw i32 %431, 1
  %433 = zext i32 %432 to i64
  %434 = load i64, ptr %350, align 8
  %435 = add i64 %434, %430
  %436 = add i64 %435, %433
  store i64 %436, ptr %350, align 8
  %437 = add nsw i32 %353, 1
  %438 = load i32, ptr %60, align 8
  %439 = icmp slt i32 %437, %438
  %440 = select i1 %439, i32 %437, i32 0
  %441 = icmp eq i32 %440, %335
  br i1 %441, label %442, label %352, !llvm.loop !89

442:                                              ; preds = %413, %339
  %443 = phi i32 [ %341, %339 ], [ %421, %413 ]
  %444 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 12, i32 18
  %445 = icmp ugt i32 %443, %337
  br i1 %445, label %446, label %604

446:                                              ; preds = %442
  %447 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 12, i32 16
  %448 = load i64, ptr %447, align 8
  %449 = shl nsw i64 %448, 3
  %450 = sitofp i64 %449 to double
  %451 = uitofp i32 %443 to double
  %452 = fdiv double %450, %451
  %453 = getelementptr inbounds %struct.vorbis_info, ptr %12, i64 0, i32 2
  %454 = load i64, ptr %453, align 8
  %455 = sitofp i64 %454 to double
  %456 = fmul double %452, %455
  %457 = getelementptr inbounds %struct.codec_setup_info, ptr %14, i64 0, i32 18, i32 4
  %458 = load double, ptr %457, align 8
  %459 = fcmp ogt double %458, 0.000000e+00
  %460 = fcmp ogt double %456, %458
  %461 = select i1 %459, i1 %460, i1 false
  br i1 %461, label %462, label %465

462:                                              ; preds = %446
  %463 = sub i32 1, %20
  %464 = icmp slt i32 %463, -1
  br i1 %464, label %471, label %502

465:                                              ; preds = %446
  %466 = getelementptr inbounds %struct.codec_setup_info, ptr %14, i64 0, i32 18, i32 3
  %467 = load double, ptr %466, align 8
  %468 = fcmp ogt double %467, 0.000000e+00
  %469 = fcmp olt double %456, %467
  %470 = select i1 %468, i1 %469, i1 false
  br i1 %470, label %482, label %604

471:                                              ; preds = %479, %462
  %472 = phi i32 [ %480, %479 ], [ -1, %462 ]
  %473 = tail call fastcc i64 @limit_sum(ptr noundef nonnull %10, i32 noundef %472) #56
  %474 = shl nsw i64 %473, 3
  %475 = sitofp i64 %474 to double
  %476 = fdiv double %475, %451
  %477 = fmul double %476, %455
  %478 = fcmp ugt double %477, %458
  br i1 %478, label %479, label %502

479:                                              ; preds = %471
  %480 = add nsw i32 %472, -1
  %481 = icmp sgt i32 %480, %463
  br i1 %481, label %471, label %502, !llvm.loop !90

482:                                              ; preds = %465
  %483 = add i32 %20, -1
  %484 = icmp sgt i32 %20, 2
  br i1 %484, label %485, label %496

485:                                              ; preds = %493, %482
  %486 = phi i32 [ %494, %493 ], [ 1, %482 ]
  %487 = tail call fastcc i64 @limit_sum(ptr noundef nonnull %10, i32 noundef %486) #56
  %488 = shl nsw i64 %487, 3
  %489 = sitofp i64 %488 to double
  %490 = fdiv double %489, %451
  %491 = fmul double %490, %455
  %492 = fcmp ult double %491, %467
  br i1 %492, label %493, label %496

493:                                              ; preds = %485
  %494 = add nuw nsw i32 %486, 1
  %495 = icmp eq i32 %494, %483
  br i1 %495, label %496, label %485, !llvm.loop !91

496:                                              ; preds = %493, %485, %482
  %497 = phi i32 [ 1, %482 ], [ %486, %485 ], [ %483, %493 ]
  %498 = phi double [ %456, %482 ], [ %491, %485 ], [ %491, %493 ]
  %499 = fcmp ogt double %498, %458
  br i1 %499, label %500, label %502

500:                                              ; preds = %496
  %501 = add nsw i32 %497, -1
  br label %502

502:                                              ; preds = %500, %496, %479, %471, %462
  %503 = phi i32 [ %501, %500 ], [ %497, %496 ], [ -1, %462 ], [ %480, %479 ], [ %472, %471 ]
  %504 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 12, i32 15
  %505 = load i64, ptr %504, align 8
  %506 = trunc i64 %505 to i32
  %507 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 12, i32 14
  %508 = sext i32 %503 to i64
  %509 = add i32 %506, -1
  %510 = tail call i32 @llvm.smin.i32(i32 %509, i32 -1)
  br label %511

511:                                              ; preds = %515, %502
  %512 = phi i32 [ %506, %502 ], [ %513, %515 ]
  %513 = add i32 %512, -1
  %514 = icmp sgt i32 %513, -1
  br i1 %514, label %515, label %521

515:                                              ; preds = %511
  %516 = load ptr, ptr %507, align 8
  %517 = zext i32 %513 to i64
  %518 = getelementptr inbounds i64, ptr %516, i64 %517
  %519 = load i64, ptr %518, align 8
  %520 = icmp slt i64 %519, %508
  br i1 %520, label %521, label %511, !llvm.loop !92

521:                                              ; preds = %515, %511
  %522 = phi i32 [ %513, %515 ], [ %510, %511 ]
  %523 = icmp slt i32 %522, %506
  %524 = shl i32 %20, 1
  %525 = sext i32 %20 to i64
  br i1 %523, label %526, label %580

526:                                              ; preds = %521
  %527 = add nsw i32 %503, %20
  %528 = icmp slt i32 %20, 1
  %529 = tail call i32 @llvm.smax.i32(i32 %524, i32 1)
  %530 = shl i64 %505, 32
  %531 = ashr exact i64 %530, 32
  %532 = sext i32 %522 to i64
  %533 = zext i32 %529 to i64
  br label %534

534:                                              ; preds = %574, %526
  %535 = phi i64 [ %531, %526 ], [ %575, %574 ]
  %536 = load ptr, ptr %336, align 8
  %537 = trunc i64 %535 to i32
  %538 = mul i32 %524, %537
  %539 = sext i32 %538 to i64
  %540 = load ptr, ptr %507, align 8
  %541 = getelementptr inbounds i64, ptr %540, i64 %535
  %542 = load i64, ptr %541, align 8
  %543 = add nsw i64 %539, %525
  %544 = add i64 %543, %542
  %545 = getelementptr inbounds i64, ptr %536, i64 %544
  %546 = load i64, ptr %545, align 8
  %547 = load i64, ptr %447, align 8
  %548 = sub nsw i64 %547, %546
  store i64 %548, ptr %447, align 8
  %549 = add nsw i32 %527, %538
  %550 = sext i32 %549 to i64
  %551 = getelementptr inbounds i64, ptr %536, i64 %550
  %552 = load i64, ptr %551, align 8
  %553 = add nsw i64 %552, %548
  store i64 %553, ptr %447, align 8
  %554 = load i64, ptr %504, align 8
  %555 = icmp sle i64 %554, %535
  %556 = select i1 %555, i1 true, i1 %528
  br i1 %556, label %574, label %557

557:                                              ; preds = %534
  %558 = trunc i64 %535 to i32
  %559 = add i32 %558, 1
  %560 = mul i32 %524, %559
  %561 = sext i32 %560 to i64
  br label %562

562:                                              ; preds = %562, %557
  %563 = phi i64 [ 0, %557 ], [ %572, %562 ]
  %564 = load ptr, ptr %336, align 8
  %565 = add nsw i64 %563, %561
  %566 = getelementptr inbounds i64, ptr %564, i64 %565
  %567 = load i64, ptr %566, align 8
  %568 = add nsw i64 %563, %539
  %569 = getelementptr inbounds i64, ptr %564, i64 %568
  %570 = load i64, ptr %569, align 8
  %571 = add nsw i64 %570, %567
  store i64 %571, ptr %569, align 8
  %572 = add nuw nsw i64 %563, 1
  %573 = icmp eq i64 %572, %533
  br i1 %573, label %574, label %562, !llvm.loop !93

574:                                              ; preds = %562, %534
  %575 = add nsw i64 %535, -1
  %576 = icmp sgt i64 %575, %532
  br i1 %576, label %534, label %577, !llvm.loop !94

577:                                              ; preds = %574
  %.lcssa = phi i64 [ %575, %574 ]
  %578 = trunc i64 %.lcssa to i32
  %579 = load i64, ptr %504, align 8
  br label %580

580:                                              ; preds = %577, %521
  %581 = phi i64 [ %579, %577 ], [ %505, %521 ]
  %582 = phi i32 [ %578, %577 ], [ %506, %521 ]
  %583 = add nsw i32 %582, 1
  %584 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 12, i32 13
  %585 = load ptr, ptr %584, align 8
  %586 = getelementptr inbounds i64, ptr %585, i64 %581
  %587 = load i64, ptr %586, align 8
  %588 = sext i32 %583 to i64
  %589 = getelementptr inbounds i64, ptr %585, i64 %588
  store i64 %587, ptr %589, align 8
  %590 = load ptr, ptr %507, align 8
  %591 = getelementptr inbounds i64, ptr %590, i64 %588
  store i64 %508, ptr %591, align 8
  %592 = add nsw i32 %582, 2
  %593 = sext i32 %592 to i64
  store i64 %593, ptr %504, align 8
  %594 = load ptr, ptr %336, align 8
  %595 = mul i32 %524, %592
  %596 = sext i32 %595 to i64
  %597 = getelementptr inbounds i64, ptr %594, i64 %596
  %598 = shl nsw i64 %525, 4
  tail call void @llvm.memset.p0.i64(ptr align 8 %597, i8 0, i64 %598, i1 false)
  %599 = load ptr, ptr %507, align 8
  %600 = getelementptr inbounds i64, ptr %599, i64 %593
  store i64 0, ptr %600, align 8
  %601 = load ptr, ptr %584, align 8
  %602 = getelementptr inbounds i64, ptr %601, i64 %593
  store i64 -1, ptr %602, align 8
  %603 = load i32, ptr %444, align 4
  br label %604

604:                                              ; preds = %580, %465, %442
  %605 = phi i32 [ %443, %465 ], [ %603, %580 ], [ %443, %442 ]
  %606 = icmp ugt i32 %605, %337
  %607 = load i32, ptr %71, align 8
  br i1 %606, label %608, label %756

608:                                              ; preds = %604
  %609 = icmp sgt i32 %20, 0
  %610 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 12, i32 14
  %611 = sext i32 %20 to i64
  %612 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 12, i32 16
  %613 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 12, i32 13
  %614 = shl nsw i32 %20, 1
  %615 = sext i32 %614 to i64
  %616 = shl nsw i64 %611, 4
  %617 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 12, i32 15
  %618 = zext i32 %20 to i64
  br label %619

619:                                              ; preds = %745, %608
  %620 = phi i32 [ %605, %608 ], [ %751, %745 ]
  %621 = phi i32 [ %607, %608 ], [ %750, %745 ]
  %622 = load ptr, ptr %79, align 8
  %623 = sext i32 %621 to i64
  %624 = getelementptr inbounds i32, ptr %622, i64 %623
  %625 = load i32, ptr %624, align 4
  %626 = lshr i32 %625, 31
  %627 = zext i32 %626 to i64
  %628 = getelementptr inbounds [2 x i64], ptr %14, i64 0, i64 %627
  %629 = load i64, ptr %628, align 8
  %630 = lshr i64 %629, 1
  %631 = trunc i64 %630 to i32
  %632 = and i32 %625, 2147483647
  br i1 %609, label %633, label %684

633:                                              ; preds = %633, %619
  %634 = phi i64 [ %677, %633 ], [ 0, %619 ]
  %635 = load i32, ptr %71, align 8
  %636 = sext i32 %635 to i64
  %637 = trunc i64 %634 to i32
  %638 = tail call i32 @llvm.umax.i32(i32 %632, i32 %637)
  %639 = zext i32 %638 to i64
  %640 = load i32, ptr %19, align 8
  %641 = load ptr, ptr %10, align 8
  %642 = sext i32 %640 to i64
  %643 = mul nsw i64 %642, %636
  %644 = add nsw i64 %643, %639
  %645 = getelementptr inbounds i32, ptr %641, i64 %644
  %646 = load i32, ptr %645, align 4
  %647 = zext i32 %646 to i64
  %648 = udiv i32 %646, 255
  %649 = add nuw nsw i32 %648, 1
  %650 = zext i32 %649 to i64
  %651 = load ptr, ptr %336, align 8
  %652 = add nsw i64 %634, %611
  %653 = getelementptr inbounds i64, ptr %651, i64 %652
  %654 = load i64, ptr %653, align 8
  %655 = add nuw nsw i64 %647, %650
  %656 = sub i64 %654, %655
  store i64 %656, ptr %653, align 8
  %657 = load i32, ptr %71, align 8
  %658 = sext i32 %657 to i64
  %659 = tail call i32 @llvm.umin.i32(i32 %632, i32 %637)
  %660 = zext i32 %659 to i64
  %661 = load i32, ptr %19, align 8
  %662 = load ptr, ptr %10, align 8
  %663 = sext i32 %661 to i64
  %664 = mul nsw i64 %663, %658
  %665 = add nsw i64 %664, %660
  %666 = getelementptr inbounds i32, ptr %662, i64 %665
  %667 = load i32, ptr %666, align 4
  %668 = zext i32 %667 to i64
  %669 = udiv i32 %667, 255
  %670 = add nuw nsw i32 %669, 1
  %671 = zext i32 %670 to i64
  %672 = load ptr, ptr %336, align 8
  %673 = getelementptr inbounds i64, ptr %672, i64 %634
  %674 = load i64, ptr %673, align 8
  %675 = add nuw nsw i64 %668, %671
  %676 = sub i64 %674, %675
  store i64 %676, ptr %673, align 8
  %677 = add nuw nsw i64 %634, 1
  %678 = icmp eq i64 %677, %618
  br i1 %678, label %679, label %633, !llvm.loop !95

679:                                              ; preds = %633
  %680 = load i32, ptr %71, align 8
  %681 = load i32, ptr %444, align 4
  %682 = load ptr, ptr %79, align 8
  %683 = sext i32 %680 to i64
  br label %684

684:                                              ; preds = %679, %619
  %685 = phi i64 [ %683, %679 ], [ %623, %619 ]
  %686 = phi ptr [ %682, %679 ], [ %622, %619 ]
  %687 = phi i32 [ %681, %679 ], [ %620, %619 ]
  %688 = load ptr, ptr %610, align 8
  %689 = load i64, ptr %688, align 8
  %690 = zext i32 %632 to i64
  %691 = icmp sgt i64 %689, %690
  %692 = trunc i64 %689 to i32
  %693 = select i1 %691, i32 %692, i32 %632
  %694 = add nsw i64 %689, %611
  %695 = sext i32 %693 to i64
  %696 = icmp slt i64 %694, %695
  %697 = trunc i64 %694 to i32
  %698 = select i1 %696, i32 %697, i32 %693
  %699 = sext i32 %698 to i64
  %700 = load i32, ptr %19, align 8
  %701 = load ptr, ptr %10, align 8
  %702 = sext i32 %700 to i64
  %703 = mul nsw i64 %685, %702
  %704 = add nsw i64 %703, %699
  %705 = getelementptr inbounds i32, ptr %701, i64 %704
  %706 = load i32, ptr %705, align 4
  %707 = zext i32 %706 to i64
  %708 = udiv i32 %706, 255
  %709 = add nuw nsw i32 %708, 1
  %710 = zext i32 %709 to i64
  %711 = load i64, ptr %612, align 8
  %712 = add nuw nsw i64 %707, %710
  %713 = sub i64 %711, %712
  store i64 %713, ptr %612, align 8
  %714 = sub i32 %687, %631
  store i32 %714, ptr %444, align 4
  %715 = getelementptr inbounds i32, ptr %686, i64 %685
  %716 = load i32, ptr %715, align 4
  %717 = and i32 %716, -2147483648
  store i32 %717, ptr %715, align 4
  %718 = load ptr, ptr %79, align 8
  %719 = load i32, ptr %71, align 8
  %720 = sext i32 %719 to i64
  %721 = getelementptr inbounds i32, ptr %718, i64 %720
  %722 = load i32, ptr %721, align 4
  %723 = or i32 %722, %698
  store i32 %723, ptr %721, align 4
  %724 = load i32, ptr %71, align 8
  %725 = sext i32 %724 to i64
  %726 = load ptr, ptr %613, align 8
  %727 = load i64, ptr %726, align 8
  %728 = icmp eq i64 %727, %725
  br i1 %728, label %729, label %745

729:                                              ; preds = %684
  %730 = load ptr, ptr %336, align 8
  %731 = getelementptr inbounds i64, ptr %730, i64 %615
  %732 = load i64, ptr %617, align 8
  %733 = mul i64 %616, %732
  tail call void @llvm.memmove.p0.p0.i64(ptr align 8 %730, ptr align 8 %731, i64 %733, i1 false)
  %734 = load ptr, ptr %613, align 8
  %735 = getelementptr inbounds i64, ptr %734, i64 1
  %736 = load i64, ptr %617, align 8
  %737 = shl i64 %736, 3
  tail call void @llvm.memmove.p0.p0.i64(ptr align 8 %734, ptr nonnull align 8 %735, i64 %737, i1 false)
  %738 = load ptr, ptr %610, align 8
  %739 = getelementptr inbounds i64, ptr %738, i64 1
  %740 = load i64, ptr %617, align 8
  %741 = shl i64 %740, 3
  tail call void @llvm.memmove.p0.p0.i64(ptr align 8 %738, ptr nonnull align 8 %739, i64 %741, i1 false)
  %742 = load i64, ptr %617, align 8
  %743 = add nsw i64 %742, -1
  store i64 %743, ptr %617, align 8
  %744 = load i32, ptr %71, align 8
  br label %745

745:                                              ; preds = %729, %684
  %746 = phi i32 [ %744, %729 ], [ %724, %684 ]
  %747 = add nsw i32 %746, 1
  %748 = load i32, ptr %60, align 8
  %749 = icmp slt i32 %747, %748
  %750 = select i1 %749, i32 %747, i32 0
  store i32 %750, ptr %71, align 8
  %751 = load i32, ptr %444, align 4
  %752 = icmp ugt i32 %751, %337
  br i1 %752, label %619, label %756, !llvm.loop !96

753:                                              ; preds = %321, %315
  %754 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 12, i32 6
  %755 = load i32, ptr %754, align 8
  br label %756

756:                                              ; preds = %753, %745, %604
  %757 = phi i32 [ %755, %753 ], [ %607, %604 ], [ %750, %745 ]
  %758 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 12, i32 21
  store i32 %757, ptr %758, align 8
  %759 = icmp eq i32 %16, 0
  br i1 %759, label %763, label %760

760:                                              ; preds = %756
  %761 = load i32, ptr %17, align 4
  %762 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 12, i32 21
  store i32 %761, ptr %762, align 8
  br label %763

763:                                              ; preds = %760, %756, %70, %58, %56
  %764 = phi i32 [ %57, %56 ], [ -1, %70 ], [ -1, %58 ], [ 0, %760 ], [ 0, %756 ]
  call void @llvm.lifetime.end.p0(i64 40, ptr nonnull %2)
  ret i32 %764
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @vorbis_bitrate_flushpacket(ptr nocapture noundef readonly %0, ptr nocapture noundef %1) #21 {
  %3 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 19
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr inbounds %struct.private_state, ptr %4, i64 0, i32 12
  %6 = getelementptr inbounds %struct.private_state, ptr %4, i64 0, i32 12, i32 2
  %7 = load i32, ptr %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %16

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.private_state, ptr %4, i64 0, i32 12, i32 3
  %11 = load i32, ptr %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %61, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.private_state, ptr %4, i64 0, i32 12, i32 24
  %15 = load ptr, ptr %14, align 8
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(48) %1, ptr noundef nonnull align 8 dereferenceable(48) %15, i64 48, i1 false)
  store i32 0, ptr %10, align 4
  br label %61

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.private_state, ptr %4, i64 0, i32 12, i32 20
  %18 = load i32, ptr %17, align 4
  %19 = getelementptr inbounds %struct.private_state, ptr %4, i64 0, i32 12, i32 21
  %20 = load i32, ptr %19, align 8
  %21 = icmp eq i32 %18, %20
  br i1 %21, label %61, label %22

22:                                               ; preds = %16
  %23 = getelementptr inbounds %struct.private_state, ptr %4, i64 0, i32 12, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = sext i32 %18 to i64
  %26 = getelementptr inbounds i32, ptr %24, i64 %25
  %27 = load i32, ptr %26, align 4
  %28 = and i32 %27, 2147483647
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds %struct.private_state, ptr %4, i64 0, i32 12, i32 4
  %31 = load i32, ptr %30, align 8
  %32 = sext i32 %31 to i64
  %33 = load ptr, ptr %5, align 8
  %34 = mul nsw i64 %32, %25
  %35 = getelementptr inbounds i32, ptr %33, i64 %34
  %36 = getelementptr inbounds i32, ptr %35, i64 %29
  %37 = load i32, ptr %36, align 4
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds %struct.private_state, ptr %4, i64 0, i32 12, i32 24
  %40 = load ptr, ptr %39, align 8
  %41 = getelementptr inbounds %struct.ogg_packet, ptr %40, i64 %25
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(48) %1, ptr noundef nonnull align 8 dereferenceable(48) %41, i64 48, i1 false)
  %42 = icmp eq i32 %28, 0
  br i1 %42, label %54, label %43

43:                                               ; preds = %22
  %44 = load ptr, ptr %1, align 8
  br label %45

45:                                               ; preds = %45, %43
  %46 = phi ptr [ %44, %43 ], [ %51, %45 ]
  %47 = phi i64 [ 0, %43 ], [ %52, %45 ]
  %48 = getelementptr inbounds i32, ptr %35, i64 %47
  %49 = load i32, ptr %48, align 4
  %50 = zext i32 %49 to i64
  %51 = getelementptr inbounds i8, ptr %46, i64 %50
  store ptr %51, ptr %1, align 8
  %52 = add nuw nsw i64 %47, 1
  %53 = icmp eq i64 %52, %29
  br i1 %53, label %54, label %45, !llvm.loop !97

54:                                               ; preds = %45, %22
  %55 = getelementptr inbounds %struct.ogg_packet, ptr %1, i64 0, i32 1
  store i64 %38, ptr %55, align 8
  %56 = load i32, ptr %17, align 4
  %57 = add nsw i32 %56, 1
  %58 = load i32, ptr %6, align 8
  %59 = icmp slt i32 %57, %58
  %60 = select i1 %59, i32 %57, i32 0
  store i32 %60, ptr %17, align 4
  br label %61

61:                                               ; preds = %54, %16, %13, %9
  %62 = phi i32 [ 0, %9 ], [ 0, %16 ], [ 1, %54 ], [ 1, %13 ]
  ret i32 %62
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @ogg_stream_pageout(ptr noundef %0, ptr noundef %1) #21 {
  %3 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 12
  %4 = load i32, ptr %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %10, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 7
  %8 = load i64, ptr %7, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %10, label %27

10:                                               ; preds = %6, %2
  %11 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 2
  %12 = load i64, ptr %11, align 8
  %13 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 3
  %14 = load i64, ptr %13, align 8
  %15 = sub nsw i64 %12, %14
  %16 = icmp sgt i64 %15, 4096
  br i1 %16, label %27, label %17

17:                                               ; preds = %10
  %18 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 7
  %19 = load i64, ptr %18, align 8
  %20 = icmp sgt i64 %19, 254
  br i1 %20, label %27, label %21

21:                                               ; preds = %17
  %22 = icmp eq i64 %19, 0
  br i1 %22, label %29, label %23

23:                                               ; preds = %21
  %24 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 13
  %25 = load i32, ptr %24, align 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %29

27:                                               ; preds = %23, %17, %10, %6
  %28 = tail call i32 @ogg_stream_flush(ptr noundef nonnull %0, ptr noundef %1) #56, !range !36
  br label %29

29:                                               ; preds = %27, %23, %21
  %30 = phi i32 [ %28, %27 ], [ 0, %23 ], [ 0, %21 ]
  ret i32 %30
}

; Function Attrs: mustprogress nounwind optsize willreturn uwtable
define internal i32 @ogg_stream_clear(ptr noundef %0) #13 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %18, label %3

3:                                                ; preds = %1
  %4 = load ptr, ptr %0, align 8
  %5 = icmp eq ptr %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %3
  tail call void @free(ptr noundef nonnull %4) #59
  br label %7

7:                                                ; preds = %6, %3
  %8 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 4
  %9 = load ptr, ptr %8, align 8
  %10 = icmp eq ptr %9, null
  br i1 %10, label %12, label %11

11:                                               ; preds = %7
  tail call void @free(ptr noundef nonnull %9) #59
  br label %12

12:                                               ; preds = %11, %7
  %13 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 5
  %14 = load ptr, ptr %13, align 8
  %15 = icmp eq ptr %14, null
  br i1 %15, label %17, label %16

16:                                               ; preds = %12
  tail call void @free(ptr noundef nonnull %14) #59
  br label %17

17:                                               ; preds = %16, %12
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(408) %0, i8 0, i64 408, i1 false)
  br label %18

18:                                               ; preds = %17, %1
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @vorbis_block_clear(ptr nocapture noundef %0) #0 {
  %2 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 10
  %3 = load ptr, ptr %2, align 8
  %4 = icmp eq ptr %3, null
  br i1 %4, label %12, label %5

5:                                                ; preds = %1
  %6 = load i32, ptr %3, align 8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %12, label %8

8:                                                ; preds = %5
  %9 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 1
  %10 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 1, i32 2
  %11 = load ptr, ptr %10, align 8
  tail call void @free(ptr noundef %11) #59
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %9, i8 0, i64 40, i1 false)
  br label %12

12:                                               ; preds = %8, %5, %1
  tail call void @_vorbis_block_ripcord(ptr noundef nonnull %0) #56
  %13 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 11
  %14 = load ptr, ptr %13, align 8
  %15 = icmp eq ptr %14, null
  br i1 %15, label %17, label %16

16:                                               ; preds = %12
  tail call void @free(ptr noundef nonnull %14) #59
  br label %17

17:                                               ; preds = %16, %12
  %18 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 20
  %19 = load ptr, ptr %18, align 8
  %20 = icmp eq ptr %19, null
  br i1 %20, label %22, label %21

21:                                               ; preds = %17
  tail call void @free(ptr noundef nonnull %19) #59
  br label %22

22:                                               ; preds = %21, %17
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(192) %0, i8 0, i64 192, i1 false)
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal void @vorbis_dsp_clear(ptr noundef %0) #0 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %171, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8
  %6 = icmp eq ptr %5, null
  br i1 %6, label %10, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.vorbis_info, ptr %5, i64 0, i32 7
  %9 = load ptr, ptr %8, align 8
  br label %10

10:                                               ; preds = %7, %3
  %11 = phi ptr [ %9, %7 ], [ null, %3 ]
  %12 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 19
  %13 = load ptr, ptr %12, align 8
  %14 = icmp eq ptr %13, null
  br i1 %14, label %123, label %15

15:                                               ; preds = %10
  %16 = load ptr, ptr %13, align 8
  %17 = icmp eq ptr %16, null
  br i1 %17, label %20, label %18

18:                                               ; preds = %15
  tail call void @_ve_envelope_clear(ptr noundef nonnull %16) #56
  %19 = load ptr, ptr %13, align 8
  tail call void @free(ptr noundef %19) #59
  br label %20

20:                                               ; preds = %18, %15
  %21 = getelementptr inbounds %struct.private_state, ptr %13, i64 0, i32 2
  %22 = load ptr, ptr %21, align 8
  %23 = icmp eq ptr %22, null
  br i1 %23, label %29, label %24

24:                                               ; preds = %20
  %25 = load ptr, ptr %22, align 8
  tail call void @mdct_clear(ptr noundef %25) #56
  %26 = load ptr, ptr %21, align 8
  %27 = load ptr, ptr %26, align 8
  tail call void @free(ptr noundef %27) #59
  %28 = load ptr, ptr %21, align 8
  tail call void @free(ptr noundef %28) #59
  br label %29

29:                                               ; preds = %24, %20
  %30 = getelementptr inbounds %struct.private_state, ptr %13, i64 0, i32 2, i64 1
  %31 = load ptr, ptr %30, align 8
  %32 = icmp eq ptr %31, null
  br i1 %32, label %38, label %33

33:                                               ; preds = %29
  %34 = load ptr, ptr %31, align 8
  tail call void @mdct_clear(ptr noundef %34) #56
  %35 = load ptr, ptr %30, align 8
  %36 = load ptr, ptr %35, align 8
  tail call void @free(ptr noundef %36) #59
  %37 = load ptr, ptr %30, align 8
  tail call void @free(ptr noundef %37) #59
  br label %38

38:                                               ; preds = %33, %29
  %39 = getelementptr inbounds %struct.private_state, ptr %13, i64 0, i32 5
  %40 = load ptr, ptr %39, align 8
  %41 = icmp eq ptr %40, null
  br i1 %41, label %66, label %42

42:                                               ; preds = %38
  %43 = getelementptr inbounds %struct.codec_setup_info, ptr %11, i64 0, i32 3
  %44 = load i32, ptr %43, align 8
  %45 = icmp sgt i32 %44, 0
  br i1 %45, label %46, label %64

46:                                               ; preds = %46, %42
  %47 = phi i64 [ %58, %46 ], [ 0, %42 ]
  %48 = getelementptr inbounds %struct.codec_setup_info, ptr %11, i64 0, i32 10, i64 %47
  %49 = load i32, ptr %48, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds [0 x ptr], ptr @_floor_P, i64 0, i64 %50
  %52 = load ptr, ptr %51, align 8
  %53 = getelementptr inbounds %struct.vorbis_func_floor, ptr %52, i64 0, i32 4
  %54 = load ptr, ptr %53, align 8
  %55 = load ptr, ptr %39, align 8
  %56 = getelementptr inbounds ptr, ptr %55, i64 %47
  %57 = load ptr, ptr %56, align 8
  tail call void %54(ptr noundef %57) #59
  %58 = add nuw nsw i64 %47, 1
  %59 = load i32, ptr %43, align 8
  %60 = sext i32 %59 to i64
  %61 = icmp slt i64 %58, %60
  br i1 %61, label %46, label %62, !llvm.loop !98

62:                                               ; preds = %46
  %63 = load ptr, ptr %39, align 8
  br label %64

64:                                               ; preds = %62, %42
  %65 = phi ptr [ %63, %62 ], [ %40, %42 ]
  tail call void @free(ptr noundef %65) #59
  br label %66

66:                                               ; preds = %64, %38
  %67 = getelementptr inbounds %struct.private_state, ptr %13, i64 0, i32 6
  %68 = load ptr, ptr %67, align 8
  %69 = icmp eq ptr %68, null
  br i1 %69, label %94, label %70

70:                                               ; preds = %66
  %71 = getelementptr inbounds %struct.codec_setup_info, ptr %11, i64 0, i32 4
  %72 = load i32, ptr %71, align 4
  %73 = icmp sgt i32 %72, 0
  br i1 %73, label %74, label %92

74:                                               ; preds = %74, %70
  %75 = phi i64 [ %86, %74 ], [ 0, %70 ]
  %76 = getelementptr inbounds %struct.codec_setup_info, ptr %11, i64 0, i32 12, i64 %75
  %77 = load i32, ptr %76, align 4
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds [0 x ptr], ptr @_residue_P, i64 0, i64 %78
  %80 = load ptr, ptr %79, align 8
  %81 = getelementptr inbounds %struct.vorbis_func_residue, ptr %80, i64 0, i32 4
  %82 = load ptr, ptr %81, align 8
  %83 = load ptr, ptr %67, align 8
  %84 = getelementptr inbounds ptr, ptr %83, i64 %75
  %85 = load ptr, ptr %84, align 8
  tail call void %82(ptr noundef %85) #59
  %86 = add nuw nsw i64 %75, 1
  %87 = load i32, ptr %71, align 4
  %88 = sext i32 %87 to i64
  %89 = icmp slt i64 %86, %88
  br i1 %89, label %74, label %90, !llvm.loop !99

90:                                               ; preds = %74
  %91 = load ptr, ptr %67, align 8
  br label %92

92:                                               ; preds = %90, %70
  %93 = phi ptr [ %91, %90 ], [ %68, %70 ]
  tail call void @free(ptr noundef %93) #59
  br label %94

94:                                               ; preds = %92, %66
  %95 = getelementptr inbounds %struct.private_state, ptr %13, i64 0, i32 7
  %96 = load ptr, ptr %95, align 8
  %97 = icmp eq ptr %96, null
  br i1 %97, label %114, label %98

98:                                               ; preds = %94
  %99 = getelementptr inbounds %struct.codec_setup_info, ptr %11, i64 0, i32 6
  %100 = load i32, ptr %99, align 4
  %101 = icmp sgt i32 %100, 0
  br i1 %101, label %102, label %112

102:                                              ; preds = %102, %98
  %103 = phi i64 [ %106, %102 ], [ 0, %98 ]
  %104 = load ptr, ptr %95, align 8
  %105 = getelementptr inbounds %struct.vorbis_look_psy, ptr %104, i64 %103
  tail call void @_vp_psy_clear(ptr noundef %105) #56
  %106 = add nuw nsw i64 %103, 1
  %107 = load i32, ptr %99, align 4
  %108 = sext i32 %107 to i64
  %109 = icmp slt i64 %106, %108
  br i1 %109, label %102, label %110, !llvm.loop !100

110:                                              ; preds = %102
  %111 = load ptr, ptr %95, align 8
  br label %112

112:                                              ; preds = %110, %98
  %113 = phi ptr [ %111, %110 ], [ %96, %98 ]
  tail call void @free(ptr noundef %113) #59
  br label %114

114:                                              ; preds = %112, %94
  %115 = getelementptr inbounds %struct.private_state, ptr %13, i64 0, i32 8
  %116 = load ptr, ptr %115, align 8
  %117 = icmp eq ptr %116, null
  br i1 %117, label %119, label %118

118:                                              ; preds = %114
  tail call void @free(ptr noundef nonnull %116) #59
  br label %119

119:                                              ; preds = %118, %114
  %120 = getelementptr inbounds %struct.private_state, ptr %13, i64 0, i32 12
  tail call void @vorbis_bitrate_clear(ptr noundef nonnull %120) #56
  %121 = getelementptr inbounds %struct.private_state, ptr %13, i64 0, i32 3
  tail call void @drft_clear(ptr noundef nonnull %121) #56
  %122 = getelementptr inbounds %struct.private_state, ptr %13, i64 0, i32 3, i64 1
  tail call void @drft_clear(ptr noundef nonnull %122) #56
  br label %123

123:                                              ; preds = %119, %10
  %124 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 2
  %125 = load ptr, ptr %124, align 8
  %126 = icmp eq ptr %125, null
  br i1 %126, label %153, label %127

127:                                              ; preds = %123
  %128 = getelementptr inbounds %struct.vorbis_info, ptr %5, i64 0, i32 1
  %129 = load i32, ptr %128, align 4
  %130 = icmp sgt i32 %129, 0
  br i1 %130, label %131, label %147

131:                                              ; preds = %140, %127
  %132 = phi i32 [ %141, %140 ], [ %129, %127 ]
  %133 = phi i64 [ %142, %140 ], [ 0, %127 ]
  %134 = load ptr, ptr %124, align 8
  %135 = getelementptr inbounds ptr, ptr %134, i64 %133
  %136 = load ptr, ptr %135, align 8
  %137 = icmp eq ptr %136, null
  br i1 %137, label %140, label %138

138:                                              ; preds = %131
  tail call void @free(ptr noundef nonnull %136) #59
  %139 = load i32, ptr %128, align 4
  br label %140

140:                                              ; preds = %138, %131
  %141 = phi i32 [ %132, %131 ], [ %139, %138 ]
  %142 = add nuw nsw i64 %133, 1
  %143 = sext i32 %141 to i64
  %144 = icmp slt i64 %142, %143
  br i1 %144, label %131, label %145, !llvm.loop !101

145:                                              ; preds = %140
  %146 = load ptr, ptr %124, align 8
  br label %147

147:                                              ; preds = %145, %127
  %148 = phi ptr [ %146, %145 ], [ %125, %127 ]
  tail call void @free(ptr noundef %148) #59
  %149 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 3
  %150 = load ptr, ptr %149, align 8
  %151 = icmp eq ptr %150, null
  br i1 %151, label %153, label %152

152:                                              ; preds = %147
  tail call void @free(ptr noundef nonnull %150) #59
  br label %153

153:                                              ; preds = %152, %147, %123
  br i1 %14, label %170, label %154

154:                                              ; preds = %153
  %155 = getelementptr inbounds %struct.private_state, ptr %13, i64 0, i32 9
  %156 = load ptr, ptr %155, align 8
  %157 = icmp eq ptr %156, null
  br i1 %157, label %159, label %158

158:                                              ; preds = %154
  tail call void @free(ptr noundef nonnull %156) #59
  br label %159

159:                                              ; preds = %158, %154
  %160 = getelementptr inbounds %struct.private_state, ptr %13, i64 0, i32 10
  %161 = load ptr, ptr %160, align 8
  %162 = icmp eq ptr %161, null
  br i1 %162, label %164, label %163

163:                                              ; preds = %159
  tail call void @free(ptr noundef nonnull %161) #59
  br label %164

164:                                              ; preds = %163, %159
  %165 = getelementptr inbounds %struct.private_state, ptr %13, i64 0, i32 11
  %166 = load ptr, ptr %165, align 8
  %167 = icmp eq ptr %166, null
  br i1 %167, label %169, label %168

168:                                              ; preds = %164
  tail call void @free(ptr noundef nonnull %166) #59
  br label %169

169:                                              ; preds = %168, %164
  tail call void @free(ptr noundef nonnull %13) #59
  br label %170

170:                                              ; preds = %169, %153
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(144) %0, i8 0, i64 144, i1 false)
  br label %171

171:                                              ; preds = %170, %1
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @_ve_envelope_clear(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 4
  tail call void @mdct_clear(ptr noundef nonnull %2) #56
  br label %3

3:                                                ; preds = %3, %1
  %4 = phi i64 [ 0, %1 ], [ %7, %3 ]
  %5 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 6, i64 %4, i32 2
  %6 = load ptr, ptr %5, align 8
  tail call void @free(ptr noundef %6) #59
  %7 = add nuw nsw i64 %4, 1
  %8 = icmp eq i64 %7, 7
  br i1 %8, label %9, label %3, !llvm.loop !102

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 5
  %11 = load ptr, ptr %10, align 8
  tail call void @free(ptr noundef %11) #59
  %12 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 7
  %13 = load ptr, ptr %12, align 8
  tail call void @free(ptr noundef %13) #59
  %14 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 9
  %15 = load ptr, ptr %14, align 8
  tail call void @free(ptr noundef %15) #59
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(280) %0, i8 0, i64 280, i1 false)
  ret void
}

; Function Attrs: mustprogress nounwind optsize willreturn uwtable
define internal void @mdct_clear(ptr noundef %0) #13 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %14, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.mdct_lookup, ptr %0, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8
  %6 = icmp eq ptr %5, null
  br i1 %6, label %8, label %7

7:                                                ; preds = %3
  tail call void @free(ptr noundef nonnull %5) #59
  br label %8

8:                                                ; preds = %7, %3
  %9 = getelementptr inbounds %struct.mdct_lookup, ptr %0, i64 0, i32 3
  %10 = load ptr, ptr %9, align 8
  %11 = icmp eq ptr %10, null
  br i1 %11, label %13, label %12

12:                                               ; preds = %8
  tail call void @free(ptr noundef nonnull %10) #59
  br label %13

13:                                               ; preds = %12, %8
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %0, i8 0, i64 32, i1 false)
  br label %14

14:                                               ; preds = %13, %1
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @_vp_psy_clear(ptr noundef %0) #0 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %55, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.vorbis_look_psy, ptr %0, i64 0, i32 4
  %5 = load ptr, ptr %4, align 8
  %6 = icmp eq ptr %5, null
  br i1 %6, label %8, label %7

7:                                                ; preds = %3
  tail call void @free(ptr noundef nonnull %5) #59
  br label %8

8:                                                ; preds = %7, %3
  %9 = getelementptr inbounds %struct.vorbis_look_psy, ptr %0, i64 0, i32 5
  %10 = load ptr, ptr %9, align 8
  %11 = icmp eq ptr %10, null
  br i1 %11, label %13, label %12

12:                                               ; preds = %8
  tail call void @free(ptr noundef nonnull %10) #59
  br label %13

13:                                               ; preds = %12, %8
  %14 = getelementptr inbounds %struct.vorbis_look_psy, ptr %0, i64 0, i32 6
  %15 = load ptr, ptr %14, align 8
  %16 = icmp eq ptr %15, null
  br i1 %16, label %18, label %17

17:                                               ; preds = %13
  tail call void @free(ptr noundef nonnull %15) #59
  br label %18

18:                                               ; preds = %17, %13
  %19 = getelementptr inbounds %struct.vorbis_look_psy, ptr %0, i64 0, i32 2
  %20 = load ptr, ptr %19, align 8
  %21 = icmp eq ptr %20, null
  br i1 %21, label %41, label %22

22:                                               ; preds = %33, %18
  %23 = phi i64 [ %37, %33 ], [ 0, %18 ]
  br label %24

24:                                               ; preds = %24, %22
  %25 = phi i64 [ 0, %22 ], [ %31, %24 ]
  %26 = load ptr, ptr %19, align 8
  %27 = getelementptr inbounds ptr, ptr %26, i64 %23
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr inbounds ptr, ptr %28, i64 %25
  %30 = load ptr, ptr %29, align 8
  tail call void @free(ptr noundef %30) #59
  %31 = add nuw nsw i64 %25, 1
  %32 = icmp eq i64 %31, 8
  br i1 %32, label %33, label %24, !llvm.loop !103

33:                                               ; preds = %24
  %34 = load ptr, ptr %19, align 8
  %35 = getelementptr inbounds ptr, ptr %34, i64 %23
  %36 = load ptr, ptr %35, align 8
  tail call void @free(ptr noundef %36) #59
  %37 = add nuw nsw i64 %23, 1
  %38 = icmp eq i64 %37, 17
  br i1 %38, label %39, label %22, !llvm.loop !104

39:                                               ; preds = %33
  %40 = load ptr, ptr %19, align 8
  tail call void @free(ptr noundef %40) #59
  br label %41

41:                                               ; preds = %39, %18
  %42 = getelementptr inbounds %struct.vorbis_look_psy, ptr %0, i64 0, i32 3
  %43 = load ptr, ptr %42, align 8
  %44 = icmp eq ptr %43, null
  br i1 %44, label %54, label %45

45:                                               ; preds = %45, %41
  %46 = phi i64 [ %50, %45 ], [ 0, %41 ]
  %47 = load ptr, ptr %42, align 8
  %48 = getelementptr inbounds ptr, ptr %47, i64 %46
  %49 = load ptr, ptr %48, align 8
  tail call void @free(ptr noundef %49) #59
  %50 = add nuw nsw i64 %46, 1
  %51 = icmp eq i64 %50, 3
  br i1 %51, label %52, label %45, !llvm.loop !105

52:                                               ; preds = %45
  %53 = load ptr, ptr %42, align 8
  tail call void @free(ptr noundef %53) #59
  br label %54

54:                                               ; preds = %52, %41
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(88) %0, i8 0, i64 88, i1 false)
  br label %55

55:                                               ; preds = %54, %1
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @vorbis_bitrate_clear(ptr noundef %0) #0 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %63, label %3

3:                                                ; preds = %1
  %4 = load ptr, ptr %0, align 8
  %5 = icmp eq ptr %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %3
  tail call void @free(ptr noundef nonnull %4) #59
  br label %7

7:                                                ; preds = %6, %3
  %8 = getelementptr inbounds %struct.bitrate_manager_state, ptr %0, i64 0, i32 1
  %9 = load ptr, ptr %8, align 8
  %10 = icmp eq ptr %9, null
  br i1 %10, label %12, label %11

11:                                               ; preds = %7
  tail call void @free(ptr noundef nonnull %9) #59
  br label %12

12:                                               ; preds = %11, %7
  %13 = getelementptr inbounds %struct.bitrate_manager_state, ptr %0, i64 0, i32 5
  %14 = load ptr, ptr %13, align 8
  %15 = icmp eq ptr %14, null
  br i1 %15, label %17, label %16

16:                                               ; preds = %12
  tail call void @free(ptr noundef nonnull %14) #59
  br label %17

17:                                               ; preds = %16, %12
  %18 = getelementptr inbounds %struct.bitrate_manager_state, ptr %0, i64 0, i32 12
  %19 = load ptr, ptr %18, align 8
  %20 = icmp eq ptr %19, null
  br i1 %20, label %22, label %21

21:                                               ; preds = %17
  tail call void @free(ptr noundef nonnull %19) #59
  br label %22

22:                                               ; preds = %21, %17
  %23 = getelementptr inbounds %struct.bitrate_manager_state, ptr %0, i64 0, i32 13
  %24 = load ptr, ptr %23, align 8
  %25 = icmp eq ptr %24, null
  br i1 %25, label %27, label %26

26:                                               ; preds = %22
  tail call void @free(ptr noundef nonnull %24) #59
  br label %27

27:                                               ; preds = %26, %22
  %28 = getelementptr inbounds %struct.bitrate_manager_state, ptr %0, i64 0, i32 14
  %29 = load ptr, ptr %28, align 8
  %30 = icmp eq ptr %29, null
  br i1 %30, label %32, label %31

31:                                               ; preds = %27
  tail call void @free(ptr noundef nonnull %29) #59
  br label %32

32:                                               ; preds = %31, %27
  %33 = getelementptr inbounds %struct.bitrate_manager_state, ptr %0, i64 0, i32 23
  %34 = load ptr, ptr %33, align 8
  %35 = icmp eq ptr %34, null
  br i1 %35, label %57, label %36

36:                                               ; preds = %32
  %37 = getelementptr inbounds %struct.bitrate_manager_state, ptr %0, i64 0, i32 2
  %38 = load i32, ptr %37, align 8
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %42, label %40

40:                                               ; preds = %36
  %41 = icmp sgt i32 %38, 0
  br i1 %41, label %45, label %55

42:                                               ; preds = %36
  %43 = getelementptr inbounds %struct.oggpack_buffer, ptr %34, i64 0, i32 2
  %44 = load ptr, ptr %43, align 8
  tail call void @free(ptr noundef %44) #59
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %34, i8 0, i64 40, i1 false)
  br label %55

45:                                               ; preds = %45, %40
  %46 = phi i64 [ %51, %45 ], [ 0, %40 ]
  %47 = load ptr, ptr %33, align 8
  %48 = getelementptr inbounds %struct.oggpack_buffer, ptr %47, i64 %46
  %49 = getelementptr inbounds %struct.oggpack_buffer, ptr %47, i64 %46, i32 2
  %50 = load ptr, ptr %49, align 8
  tail call void @free(ptr noundef %50) #59
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %48, i8 0, i64 40, i1 false)
  %51 = add nuw nsw i64 %46, 1
  %52 = load i32, ptr %37, align 8
  %53 = sext i32 %52 to i64
  %54 = icmp slt i64 %51, %53
  br i1 %54, label %45, label %55, !llvm.loop !106

55:                                               ; preds = %45, %42, %40
  %56 = load ptr, ptr %33, align 8
  tail call void @free(ptr noundef %56) #59
  br label %57

57:                                               ; preds = %55, %32
  %58 = getelementptr inbounds %struct.bitrate_manager_state, ptr %0, i64 0, i32 24
  %59 = load ptr, ptr %58, align 8
  %60 = icmp eq ptr %59, null
  br i1 %60, label %62, label %61

61:                                               ; preds = %57
  tail call void @free(ptr noundef nonnull %59) #59
  br label %62

62:                                               ; preds = %61, %57
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(152) %0, i8 0, i64 152, i1 false)
  br label %63

63:                                               ; preds = %62, %1
  ret void
}

; Function Attrs: mustprogress nounwind optsize willreturn uwtable
define internal void @drft_clear(ptr noundef %0) #13 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %14, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.drft_lookup, ptr %0, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8
  %6 = icmp eq ptr %5, null
  br i1 %6, label %8, label %7

7:                                                ; preds = %3
  tail call void @free(ptr noundef nonnull %5) #59
  br label %8

8:                                                ; preds = %7, %3
  %9 = getelementptr inbounds %struct.drft_lookup, ptr %0, i64 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = icmp eq ptr %10, null
  br i1 %11, label %13, label %12

12:                                               ; preds = %8
  tail call void @free(ptr noundef nonnull %10) #59
  br label %13

13:                                               ; preds = %12, %8
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %0, i8 0, i64 24, i1 false)
  br label %14

14:                                               ; preds = %13, %1
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @res0_pack(ptr nocapture noundef readonly %0, ptr nocapture noundef %1) #0 {
  %3 = load i64, ptr %0, align 8
  tail call void @oggpack_write(ptr noundef %1, i64 noundef %3, i32 noundef 24) #56
  %4 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %0, i64 0, i32 1
  %5 = load i64, ptr %4, align 8
  tail call void @oggpack_write(ptr noundef %1, i64 noundef %5, i32 noundef 24) #56
  %6 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %0, i64 0, i32 2
  %7 = load i32, ptr %6, align 8
  %8 = add nsw i32 %7, -1
  %9 = sext i32 %8 to i64
  tail call void @oggpack_write(ptr noundef %1, i64 noundef %9, i32 noundef 24) #56
  %10 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %0, i64 0, i32 3
  %11 = load i32, ptr %10, align 4
  %12 = add nsw i32 %11, -1
  %13 = sext i32 %12 to i64
  tail call void @oggpack_write(ptr noundef %1, i64 noundef %13, i32 noundef 6) #56
  %14 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %0, i64 0, i32 4
  %15 = load i32, ptr %14, align 8
  %16 = sext i32 %15 to i64
  tail call void @oggpack_write(ptr noundef %1, i64 noundef %16, i32 noundef 8) #56
  %17 = load i32, ptr %10, align 4
  %18 = icmp sgt i32 %17, 0
  br i1 %18, label %23, label %68

19:                                               ; preds = %54
  %.lcssa1 = phi i32 [ %56, %54 ]
  %20 = icmp sgt i32 %.lcssa1, 0
  br i1 %20, label %21, label %68

21:                                               ; preds = %19
  %22 = zext i32 %.lcssa1 to i64
  br label %61

23:                                               ; preds = %54, %2
  %24 = phi i64 [ %57, %54 ], [ 0, %2 ]
  %25 = phi i32 [ %56, %54 ], [ 0, %2 ]
  %26 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %0, i64 0, i32 5, i64 %24
  %27 = load i32, ptr %26, align 4
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %41, label %29

29:                                               ; preds = %29, %23
  %30 = phi i32 [ %32, %29 ], [ 0, %23 ]
  %31 = phi i32 [ %33, %29 ], [ %27, %23 ]
  %32 = add nuw nsw i32 %30, 1
  %33 = lshr i32 %31, 1
  %34 = icmp ult i32 %31, 2
  br i1 %34, label %35, label %29, !llvm.loop !107

35:                                               ; preds = %29
  %.lcssa = phi i32 [ %30, %29 ]
  %36 = icmp ugt i32 %.lcssa, 2
  br i1 %36, label %37, label %41

37:                                               ; preds = %35
  %38 = sext i32 %27 to i64
  tail call void @oggpack_write(ptr noundef %1, i64 noundef %38, i32 noundef 3) #56
  tail call void @oggpack_write(ptr noundef %1, i64 noundef 1, i32 noundef 1) #56
  %39 = load i32, ptr %26, align 4
  %40 = ashr i32 %39, 3
  br label %41

41:                                               ; preds = %37, %35, %23
  %42 = phi i32 [ %40, %37 ], [ %27, %23 ], [ %27, %35 ]
  %43 = phi i32 [ 5, %37 ], [ 4, %23 ], [ 4, %35 ]
  %44 = sext i32 %42 to i64
  tail call void @oggpack_write(ptr noundef %1, i64 noundef %44, i32 noundef %43) #56
  %45 = load i32, ptr %26, align 4
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %54, label %47

47:                                               ; preds = %47, %41
  %48 = phi i32 [ %51, %47 ], [ 0, %41 ]
  %49 = phi i32 [ %52, %47 ], [ %45, %41 ]
  %50 = and i32 %49, 1
  %51 = add i32 %50, %48
  %52 = lshr i32 %49, 1
  %53 = icmp ult i32 %49, 2
  br i1 %53, label %54, label %47, !llvm.loop !108

54:                                               ; preds = %47, %41
  %55 = phi i32 [ 0, %41 ], [ %51, %47 ]
  %56 = add nsw i32 %55, %25
  %57 = add nuw nsw i64 %24, 1
  %58 = load i32, ptr %10, align 4
  %59 = sext i32 %58 to i64
  %60 = icmp slt i64 %57, %59
  br i1 %60, label %23, label %19, !llvm.loop !109

61:                                               ; preds = %61, %21
  %62 = phi i64 [ 0, %21 ], [ %66, %61 ]
  %63 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %0, i64 0, i32 6, i64 %62
  %64 = load i32, ptr %63, align 4
  %65 = sext i32 %64 to i64
  tail call void @oggpack_write(ptr noundef %1, i64 noundef %65, i32 noundef 8) #56
  %66 = add nuw nsw i64 %62, 1
  %67 = icmp eq i64 %66, %22
  br i1 %67, label %68, label %61, !llvm.loop !110

68:                                               ; preds = %61, %19, %2
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal noalias ptr @res0_unpack(ptr nocapture noundef readonly %0, ptr nocapture noundef %1) #0 {
  %3 = tail call noalias dereferenceable_or_null(1824) ptr @calloc(i64 noundef 1, i64 noundef 1824) #65
  %4 = getelementptr inbounds %struct.vorbis_info, ptr %0, i64 0, i32 7
  %5 = load ptr, ptr %4, align 8
  %6 = tail call i64 @oggpack_read(ptr noundef %1, i32 noundef 24) #56
  store i64 %6, ptr %3, align 8
  %7 = tail call i64 @oggpack_read(ptr noundef %1, i32 noundef 24) #56
  %8 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %3, i64 0, i32 1
  store i64 %7, ptr %8, align 8
  %9 = tail call i64 @oggpack_read(ptr noundef %1, i32 noundef 24) #56
  %10 = trunc i64 %9 to i32
  %11 = add i32 %10, 1
  %12 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %3, i64 0, i32 2
  store i32 %11, ptr %12, align 8
  %13 = tail call i64 @oggpack_read(ptr noundef %1, i32 noundef 6) #56
  %14 = trunc i64 %13 to i32
  %15 = add i32 %14, 1
  %16 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %3, i64 0, i32 3
  store i32 %15, ptr %16, align 4
  %17 = tail call i64 @oggpack_read(ptr noundef %1, i32 noundef 8) #56
  %18 = trunc i64 %17 to i32
  %19 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %3, i64 0, i32 4
  store i32 %18, ptr %19, align 8
  %20 = icmp ult i32 %14, 2147483647
  br i1 %20, label %21, label %67

21:                                               ; preds = %2
  %22 = zext i32 %15 to i64
  br label %27

23:                                               ; preds = %51
  %.lcssa = phi i32 [ %53, %51 ]
  %24 = icmp sgt i32 %.lcssa, 0
  br i1 %24, label %25, label %63

25:                                               ; preds = %23
  %26 = zext i32 %.lcssa to i64
  br label %56

27:                                               ; preds = %51, %21
  %28 = phi i64 [ 0, %21 ], [ %54, %51 ]
  %29 = phi i32 [ 0, %21 ], [ %53, %51 ]
  %30 = tail call i64 @oggpack_read(ptr noundef %1, i32 noundef 3) #56
  %31 = tail call i64 @oggpack_read(ptr noundef %1, i32 noundef 1) #56
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %39, label %33

33:                                               ; preds = %27
  %34 = tail call i64 @oggpack_read(ptr noundef %1, i32 noundef 5) #56
  %35 = shl i64 %34, 3
  %36 = shl i64 %30, 32
  %37 = ashr exact i64 %36, 32
  %38 = or i64 %35, %37
  br label %39

39:                                               ; preds = %33, %27
  %40 = phi i64 [ %38, %33 ], [ %30, %27 ]
  %41 = trunc i64 %40 to i32
  %42 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %3, i64 0, i32 5, i64 %28
  store i32 %41, ptr %42, align 4
  %43 = icmp eq i32 %41, 0
  br i1 %43, label %51, label %44

44:                                               ; preds = %44, %39
  %45 = phi i32 [ %48, %44 ], [ 0, %39 ]
  %46 = phi i32 [ %49, %44 ], [ %41, %39 ]
  %47 = and i32 %46, 1
  %48 = add i32 %47, %45
  %49 = lshr i32 %46, 1
  %50 = icmp ult i32 %46, 2
  br i1 %50, label %51, label %44, !llvm.loop !108

51:                                               ; preds = %44, %39
  %52 = phi i32 [ 0, %39 ], [ %48, %44 ]
  %53 = add nsw i32 %52, %29
  %54 = add nuw nsw i64 %28, 1
  %55 = icmp eq i64 %54, %22
  br i1 %55, label %23, label %27, !llvm.loop !111

56:                                               ; preds = %56, %25
  %57 = phi i64 [ 0, %25 ], [ %61, %56 ]
  %58 = tail call i64 @oggpack_read(ptr noundef %1, i32 noundef 8) #56
  %59 = trunc i64 %58 to i32
  %60 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %3, i64 0, i32 6, i64 %57
  store i32 %59, ptr %60, align 4
  %61 = add nuw nsw i64 %57, 1
  %62 = icmp eq i64 %61, %26
  br i1 %62, label %63, label %56, !llvm.loop !112

63:                                               ; preds = %56, %23
  %64 = getelementptr inbounds %struct.codec_setup_info, ptr %5, i64 0, i32 5
  %65 = load i32, ptr %64, align 8
  %66 = icmp sgt i32 %65, %18
  br i1 %66, label %71, label %82

67:                                               ; preds = %2
  %68 = getelementptr inbounds %struct.codec_setup_info, ptr %5, i64 0, i32 5
  %69 = load i32, ptr %68, align 8
  %70 = icmp sgt i32 %69, %18
  br i1 %70, label %83, label %82

71:                                               ; preds = %63
  br i1 %24, label %72, label %83

72:                                               ; preds = %71
  %73 = zext i32 %.lcssa to i64
  br label %77

74:                                               ; preds = %77
  %75 = add nuw nsw i64 %78, 1
  %76 = icmp eq i64 %75, %73
  br i1 %76, label %83, label %77, !llvm.loop !113

77:                                               ; preds = %74, %72
  %78 = phi i64 [ 0, %72 ], [ %75, %74 ]
  %79 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %3, i64 0, i32 6, i64 %78
  %80 = load i32, ptr %79, align 4
  %81 = icmp slt i32 %80, %65
  br i1 %81, label %74, label %82

82:                                               ; preds = %77, %67, %63
  tail call void @free(ptr noundef nonnull %3) #59
  br label %83

83:                                               ; preds = %82, %74, %71, %67
  %84 = phi ptr [ null, %82 ], [ %3, %71 ], [ %3, %67 ], [ %3, %74 ]
  ret ptr %84
}

; Function Attrs: nofree nounwind optsize uwtable
define internal noalias ptr @res0_look(ptr nocapture noundef readonly %0, ptr noundef %1) #3 {
  %3 = tail call noalias dereferenceable_or_null(80) ptr @calloc(i64 noundef 1, i64 noundef 80) #65
  %4 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr inbounds %struct.vorbis_info, ptr %5, i64 0, i32 7
  %7 = load ptr, ptr %6, align 8
  store ptr %1, ptr %3, align 8
  %8 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %1, i64 0, i32 3
  %9 = load i32, ptr %8, align 4
  %10 = getelementptr inbounds %struct.vorbis_look_residue0, ptr %3, i64 0, i32 1
  store i32 %9, ptr %10, align 8
  %11 = getelementptr inbounds %struct.codec_setup_info, ptr %7, i64 0, i32 15
  %12 = load ptr, ptr %11, align 8
  %13 = getelementptr inbounds %struct.vorbis_look_residue0, ptr %3, i64 0, i32 3
  store ptr %12, ptr %13, align 8
  %14 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %1, i64 0, i32 4
  %15 = load i32, ptr %14, align 8
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds %struct.codebook, ptr %12, i64 %16
  %18 = getelementptr inbounds %struct.vorbis_look_residue0, ptr %3, i64 0, i32 4
  store ptr %17, ptr %18, align 8
  %19 = load i64, ptr %17, align 8
  %20 = trunc i64 %19 to i32
  %21 = sext i32 %9 to i64
  %22 = tail call noalias ptr @calloc(i64 noundef %21, i64 noundef 8) #65
  %23 = getelementptr inbounds %struct.vorbis_look_residue0, ptr %3, i64 0, i32 5
  store ptr %22, ptr %23, align 8
  %24 = icmp sgt i32 %9, 0
  br i1 %24, label %25, label %76

25:                                               ; preds = %2
  %26 = zext i32 %9 to i64
  br label %27

27:                                               ; preds = %71, %25
  %28 = phi i64 [ 0, %25 ], [ %74, %71 ]
  %29 = phi i32 [ 0, %25 ], [ %73, %71 ]
  %30 = phi i32 [ 0, %25 ], [ %72, %71 ]
  %31 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %1, i64 0, i32 5, i64 %28
  %32 = load i32, ptr %31, align 4
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %71, label %34

34:                                               ; preds = %34, %27
  %35 = phi i32 [ %41, %34 ], [ 1, %27 ]
  %36 = phi i32 [ %38, %34 ], [ 0, %27 ]
  %37 = phi i32 [ %39, %34 ], [ %32, %27 ]
  %38 = add nuw nsw i32 %36, 1
  %39 = lshr i32 %37, 1
  %40 = icmp ult i32 %37, 2
  %41 = add nuw nsw i32 %35, 1
  br i1 %40, label %42, label %34, !llvm.loop !107

42:                                               ; preds = %34
  %.lcssa1 = phi i32 [ %35, %34 ]
  %.lcssa = phi i32 [ %38, %34 ]
  %43 = zext i32 %.lcssa to i64
  %44 = tail call noalias ptr @calloc(i64 noundef %43, i64 noundef 8) #65
  %45 = getelementptr inbounds ptr, ptr %22, i64 %28
  store ptr %44, ptr %45, align 8
  %46 = zext i32 %.lcssa1 to i64
  br label %47

47:                                               ; preds = %65, %42
  %48 = phi i64 [ 0, %42 ], [ %67, %65 ]
  %49 = phi i32 [ %30, %42 ], [ %66, %65 ]
  %50 = load i32, ptr %31, align 4
  %51 = trunc i64 %48 to i32
  %52 = shl nuw i32 1, %51
  %53 = and i32 %50, %52
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %65, label %55

55:                                               ; preds = %47
  %56 = load ptr, ptr %11, align 8
  %57 = add nsw i32 %49, 1
  %58 = sext i32 %49 to i64
  %59 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %1, i64 0, i32 6, i64 %58
  %60 = load i32, ptr %59, align 4
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds %struct.codebook, ptr %56, i64 %61
  %63 = load ptr, ptr %45, align 8
  %64 = getelementptr inbounds ptr, ptr %63, i64 %48
  store ptr %62, ptr %64, align 8
  br label %65

65:                                               ; preds = %55, %47
  %66 = phi i32 [ %57, %55 ], [ %49, %47 ]
  %67 = add nuw nsw i64 %48, 1
  %68 = icmp eq i64 %67, %46
  br i1 %68, label %69, label %47, !llvm.loop !114

69:                                               ; preds = %65
  %.lcssa2 = phi i32 [ %66, %65 ]
  %70 = tail call i32 @llvm.smax.i32(i32 %.lcssa, i32 %29)
  br label %71

71:                                               ; preds = %69, %27
  %72 = phi i32 [ %30, %27 ], [ %.lcssa2, %69 ]
  %73 = phi i32 [ %29, %27 ], [ %70, %69 ]
  %74 = add nuw nsw i64 %28, 1
  %75 = icmp eq i64 %74, %26
  br i1 %75, label %76, label %27, !llvm.loop !115

76:                                               ; preds = %71, %2
  %77 = phi i32 [ 0, %2 ], [ %73, %71 ]
  %78 = sitofp i32 %9 to float
  %79 = fpext float %78 to double
  %80 = sitofp i32 %20 to float
  %81 = fpext float %80 to double
  %82 = tail call double @pow(double noundef %79, double noundef %81) #59
  %83 = tail call double @llvm.rint.f64(double %82)
  %84 = fptosi double %83 to i32
  %85 = getelementptr inbounds %struct.vorbis_look_residue0, ptr %3, i64 0, i32 6
  store i32 %84, ptr %85, align 8
  %86 = getelementptr inbounds %struct.vorbis_look_residue0, ptr %3, i64 0, i32 2
  store i32 %77, ptr %86, align 4
  %87 = sext i32 %84 to i64
  %88 = shl nsw i64 %87, 3
  %89 = tail call noalias ptr @malloc(i64 noundef %88) #64
  %90 = getelementptr inbounds %struct.vorbis_look_residue0, ptr %3, i64 0, i32 7
  store ptr %89, ptr %90, align 8
  %91 = icmp sgt i32 %84, 0
  br i1 %91, label %92, label %120

92:                                               ; preds = %76
  %93 = sdiv i32 %84, %9
  %94 = sext i32 %93 to i64
  %95 = shl i64 %19, 32
  %96 = ashr exact i64 %95, 30
  %97 = icmp sgt i32 %20, 0
  %98 = zext i32 %84 to i64
  %99 = and i64 %19, 4294967295
  br label %100

100:                                              ; preds = %117, %92
  %101 = phi i64 [ 0, %92 ], [ %118, %117 ]
  %102 = tail call noalias ptr @malloc(i64 noundef %96) #64
  %103 = getelementptr inbounds ptr, ptr %89, i64 %101
  store ptr %102, ptr %103, align 8
  br i1 %97, label %104, label %117

104:                                              ; preds = %104, %100
  %105 = phi i64 [ %115, %104 ], [ 0, %100 ]
  %106 = phi i64 [ %111, %104 ], [ %94, %100 ]
  %107 = phi i64 [ %110, %104 ], [ %101, %100 ]
  %108 = sdiv i64 %107, %106
  %109 = mul nsw i64 %108, %106
  %110 = srem i64 %107, %106
  %111 = sdiv i64 %106, %21
  %112 = trunc i64 %108 to i32
  %113 = load ptr, ptr %103, align 8
  %114 = getelementptr inbounds i32, ptr %113, i64 %105
  store i32 %112, ptr %114, align 4
  %115 = add nuw nsw i64 %105, 1
  %116 = icmp eq i64 %115, %99
  br i1 %116, label %117, label %104, !llvm.loop !116

117:                                              ; preds = %104, %100
  %118 = add nuw nsw i64 %101, 1
  %119 = icmp eq i64 %118, %98
  br i1 %119, label %120, label %100, !llvm.loop !117

120:                                              ; preds = %117, %76
  ret ptr %3
}

; Function Attrs: mustprogress nounwind optsize willreturn memory(argmem: readwrite, inaccessiblemem: readwrite) uwtable
define internal void @res0_free_info(ptr noundef %0) #24 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %4, label %3

3:                                                ; preds = %1
  tail call void @free(ptr noundef nonnull %0) #59
  br label %4

4:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @res0_free_look(ptr noundef %0) #0 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %43, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.vorbis_look_residue0, ptr %0, i64 0, i32 1
  %5 = load i32, ptr %4, align 8
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %23

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.vorbis_look_residue0, ptr %0, i64 0, i32 5
  br label %9

9:                                                ; preds = %18, %7
  %10 = phi i32 [ %5, %7 ], [ %19, %18 ]
  %11 = phi i64 [ 0, %7 ], [ %20, %18 ]
  %12 = load ptr, ptr %8, align 8
  %13 = getelementptr inbounds ptr, ptr %12, i64 %11
  %14 = load ptr, ptr %13, align 8
  %15 = icmp eq ptr %14, null
  br i1 %15, label %18, label %16

16:                                               ; preds = %9
  tail call void @free(ptr noundef nonnull %14) #59
  %17 = load i32, ptr %4, align 8
  br label %18

18:                                               ; preds = %16, %9
  %19 = phi i32 [ %10, %9 ], [ %17, %16 ]
  %20 = add nuw nsw i64 %11, 1
  %21 = sext i32 %19 to i64
  %22 = icmp slt i64 %20, %21
  br i1 %22, label %9, label %23, !llvm.loop !118

23:                                               ; preds = %18, %3
  %24 = getelementptr inbounds %struct.vorbis_look_residue0, ptr %0, i64 0, i32 5
  %25 = load ptr, ptr %24, align 8
  tail call void @free(ptr noundef %25) #59
  %26 = getelementptr inbounds %struct.vorbis_look_residue0, ptr %0, i64 0, i32 6
  %27 = load i32, ptr %26, align 8
  %28 = icmp sgt i32 %27, 0
  br i1 %28, label %29, label %40

29:                                               ; preds = %23
  %30 = getelementptr inbounds %struct.vorbis_look_residue0, ptr %0, i64 0, i32 7
  br label %31

31:                                               ; preds = %31, %29
  %32 = phi i64 [ 0, %29 ], [ %36, %31 ]
  %33 = load ptr, ptr %30, align 8
  %34 = getelementptr inbounds ptr, ptr %33, i64 %32
  %35 = load ptr, ptr %34, align 8
  tail call void @free(ptr noundef %35) #59
  %36 = add nuw nsw i64 %32, 1
  %37 = load i32, ptr %26, align 8
  %38 = sext i32 %37 to i64
  %39 = icmp slt i64 %36, %38
  br i1 %39, label %31, label %40, !llvm.loop !119

40:                                               ; preds = %31, %23
  %41 = getelementptr inbounds %struct.vorbis_look_residue0, ptr %0, i64 0, i32 7
  %42 = load ptr, ptr %41, align 8
  tail call void @free(ptr noundef %42) #59
  tail call void @free(ptr noundef nonnull %0) #59
  br label %43

43:                                               ; preds = %40, %1
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal ptr @res2_class(ptr nocapture noundef %0, ptr nocapture noundef %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, i32 noundef %4) #3 {
  %6 = icmp sgt i32 %4, 0
  br i1 %6, label %7, label %110

7:                                                ; preds = %5
  %8 = zext i32 %4 to i64
  br label %9

9:                                                ; preds = %9, %7
  %10 = phi i64 [ 0, %7 ], [ %17, %9 ]
  %11 = phi i32 [ 0, %7 ], [ %16, %9 ]
  %12 = getelementptr inbounds i32, ptr %3, i64 %10
  %13 = load i32, ptr %12, align 4
  %14 = icmp ne i32 %13, 0
  %15 = zext i1 %14 to i32
  %16 = add nuw nsw i32 %11, %15
  %17 = add nuw nsw i64 %10, 1
  %18 = icmp eq i64 %17, %8
  br i1 %18, label %19, label %9, !llvm.loop !120

19:                                               ; preds = %9
  %.lcssa = phi i32 [ %16, %9 ]
  %20 = icmp eq i32 %.lcssa, 0
  br i1 %20, label %110, label %21

21:                                               ; preds = %19
  %22 = load ptr, ptr %1, align 8
  %23 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %22, i64 0, i32 2
  %24 = load i32, ptr %23, align 8
  %25 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %22, i64 0, i32 3
  %26 = load i32, ptr %25, align 4
  %27 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %22, i64 0, i32 1
  %28 = load i64, ptr %27, align 8
  %29 = load i64, ptr %22, align 8
  %30 = sub nsw i64 %28, %29
  %31 = trunc i64 %30 to i32
  %32 = sdiv i32 %31, %24
  %33 = tail call ptr @_vorbis_block_alloc(ptr noundef %0, i64 noundef 8) #56
  %34 = mul nsw i32 %31, %4
  %35 = sdiv i32 %34, %24
  %36 = sext i32 %35 to i64
  %37 = shl nsw i64 %36, 3
  %38 = tail call ptr @_vorbis_block_alloc(ptr noundef %0, i64 noundef %37) #56
  store ptr %38, ptr %33, align 8
  tail call void @llvm.memset.p0.i64(ptr align 8 %38, i8 0, i64 %37, i1 false)
  %39 = sext i32 %4 to i64
  %40 = sext i32 %32 to i64
  %41 = icmp sgt i32 %32, 0
  br i1 %41, label %42, label %106

42:                                               ; preds = %21
  %43 = load i64, ptr %22, align 8
  %44 = sdiv i64 %43, %39
  %45 = sext i32 %24 to i64
  %46 = icmp sgt i32 %24, 0
  %47 = icmp sgt i32 %4, 1
  %48 = icmp sgt i32 %26, 1
  %49 = tail call i32 @llvm.smax.i32(i32 %26, i32 2)
  %50 = add nsw i32 %49, -1
  %51 = zext i32 %50 to i64
  br label %52

52:                                               ; preds = %100, %42
  %53 = phi i64 [ 0, %42 ], [ %104, %100 ]
  %54 = phi i64 [ %44, %42 ], [ %58, %100 ]
  br i1 %46, label %55, label %57

55:                                               ; preds = %52
  %56 = load ptr, ptr %2, align 8
  br label %61

57:                                               ; preds = %83, %52
  %58 = phi i64 [ %54, %52 ], [ %85, %83 ]
  %59 = phi float [ 0.000000e+00, %52 ], [ %70, %83 ]
  %60 = phi float [ 0.000000e+00, %52 ], [ %84, %83 ]
  br i1 %48, label %88, label %100

61:                                               ; preds = %83, %55
  %62 = phi float [ 0.000000e+00, %55 ], [ %84, %83 ]
  %63 = phi float [ 0.000000e+00, %55 ], [ %70, %83 ]
  %64 = phi i64 [ 0, %55 ], [ %86, %83 ]
  %65 = phi i64 [ %54, %55 ], [ %85, %83 ]
  %66 = getelementptr inbounds float, ptr %56, i64 %65
  %67 = load float, ptr %66, align 4
  %68 = tail call float @llvm.fabs.f32(float %67)
  %69 = fcmp ogt float %68, %63
  %70 = select i1 %69, float %68, float %63
  br i1 %47, label %71, label %83

71:                                               ; preds = %71, %61
  %72 = phi float [ %80, %71 ], [ %62, %61 ]
  %73 = phi i64 [ %81, %71 ], [ 1, %61 ]
  %74 = getelementptr inbounds ptr, ptr %2, i64 %73
  %75 = load ptr, ptr %74, align 8
  %76 = getelementptr inbounds float, ptr %75, i64 %65
  %77 = load float, ptr %76, align 4
  %78 = tail call float @llvm.fabs.f32(float %77)
  %79 = fcmp ogt float %78, %72
  %80 = select i1 %79, float %78, float %72
  %81 = add nuw nsw i64 %73, 1
  %82 = icmp eq i64 %81, %39
  br i1 %82, label %83, label %71, !llvm.loop !121

83:                                               ; preds = %71, %61
  %84 = phi float [ %62, %61 ], [ %80, %71 ]
  %85 = add nsw i64 %65, 1
  %86 = add nsw i64 %64, %39
  %87 = icmp slt i64 %86, %45
  br i1 %87, label %61, label %57, !llvm.loop !122

88:                                               ; preds = %97, %57
  %89 = phi i64 [ %98, %97 ], [ 0, %57 ]
  %90 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %22, i64 0, i32 7, i64 %89
  %91 = load float, ptr %90, align 4
  %92 = fcmp ugt float %59, %91
  br i1 %92, label %97, label %93

93:                                               ; preds = %88
  %94 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %22, i64 0, i32 8, i64 %89
  %95 = load float, ptr %94, align 4
  %96 = fcmp ugt float %60, %95
  br i1 %96, label %97, label %100

97:                                               ; preds = %93, %88
  %98 = add nuw nsw i64 %89, 1
  %99 = icmp eq i64 %98, %51
  br i1 %99, label %100, label %88, !llvm.loop !123

100:                                              ; preds = %97, %93, %57
  %101 = phi i64 [ 0, %57 ], [ %51, %97 ], [ %89, %93 ]
  %102 = load ptr, ptr %33, align 8
  %103 = getelementptr inbounds i64, ptr %102, i64 %53
  store i64 %101, ptr %103, align 8
  %104 = add nuw nsw i64 %53, 1
  %105 = icmp eq i64 %104, %40
  br i1 %105, label %106, label %52, !llvm.loop !124

106:                                              ; preds = %100, %21
  %107 = getelementptr inbounds %struct.vorbis_look_residue0, ptr %1, i64 0, i32 10
  %108 = load i64, ptr %107, align 8
  %109 = add nsw i64 %108, 1
  store i64 %109, ptr %107, align 8
  br label %110

110:                                              ; preds = %106, %19, %5
  %111 = phi ptr [ %33, %106 ], [ null, %19 ], [ null, %5 ]
  ret ptr %111
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @res2_forward(ptr nocapture noundef %0, ptr nocapture noundef %1, ptr nocapture noundef readonly %2, ptr noundef readonly %3, ptr nocapture noundef readonly %4, i32 noundef %5, ptr nocapture noundef readonly %6) #0 {
  %8 = alloca ptr, align 8
  %9 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 5
  %10 = load i32, ptr %9, align 8
  %11 = sdiv i32 %10, 2
  %12 = sext i32 %11 to i64
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #55
  %13 = sext i32 %5 to i64
  %14 = shl nsw i64 %13, 2
  %15 = mul i64 %14, %12
  %16 = tail call ptr @_vorbis_block_alloc(ptr noundef %0, i64 noundef %15) #56
  store ptr %16, ptr %8, align 8
  %17 = icmp sgt i32 %5, 0
  br i1 %17, label %18, label %72

18:                                               ; preds = %7
  %19 = icmp sgt i32 %10, 1
  br label %20

20:                                               ; preds = %39, %18
  %21 = phi i64 [ 0, %18 ], [ %40, %39 ]
  %22 = phi i64 [ 0, %18 ], [ %29, %39 ]
  %23 = getelementptr inbounds ptr, ptr %2, i64 %21
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr inbounds i32, ptr %4, i64 %21
  %26 = load i32, ptr %25, align 4
  %27 = icmp ne i32 %26, 0
  %28 = zext i1 %27 to i64
  %29 = add nuw nsw i64 %22, %28
  br i1 %19, label %30, label %39

30:                                               ; preds = %30, %20
  %31 = phi i64 [ %36, %30 ], [ 0, %20 ]
  %32 = phi i64 [ %37, %30 ], [ %21, %20 ]
  %33 = getelementptr inbounds float, ptr %24, i64 %31
  %34 = load float, ptr %33, align 4
  %35 = getelementptr inbounds float, ptr %16, i64 %32
  store float %34, ptr %35, align 4
  %36 = add nuw nsw i64 %31, 1
  %37 = add nsw i64 %32, %13
  %38 = icmp eq i64 %36, %12
  br i1 %38, label %39, label %30, !llvm.loop !125

39:                                               ; preds = %30, %20
  %40 = add nuw nsw i64 %21, 1
  %41 = icmp eq i64 %40, %13
  br i1 %41, label %42, label %20, !llvm.loop !126

42:                                               ; preds = %39
  %.lcssa = phi i64 [ %29, %39 ]
  %43 = icmp eq i64 %.lcssa, 0
  br i1 %43, label %72, label %44

44:                                               ; preds = %42
  call fastcc void @_01forward(ptr noundef %0, ptr noundef %1, ptr noundef nonnull %8, i32 noundef 1, ptr noundef %6) #56
  %45 = icmp ne ptr %3, null
  %46 = and i1 %45, %17
  br i1 %46, label %47, label %72

47:                                               ; preds = %44
  %48 = icmp sgt i32 %10, 1
  br label %49

49:                                               ; preds = %69, %47
  %50 = phi i64 [ 0, %47 ], [ %70, %69 ]
  %51 = getelementptr inbounds ptr, ptr %2, i64 %50
  %52 = load ptr, ptr %51, align 8
  %53 = getelementptr inbounds ptr, ptr %3, i64 %50
  %54 = load ptr, ptr %53, align 8
  br i1 %48, label %55, label %69

55:                                               ; preds = %55, %49
  %56 = phi i64 [ %66, %55 ], [ 0, %49 ]
  %57 = phi i64 [ %67, %55 ], [ %50, %49 ]
  %58 = getelementptr inbounds float, ptr %52, i64 %56
  %59 = load float, ptr %58, align 4
  %60 = getelementptr inbounds float, ptr %16, i64 %57
  %61 = load float, ptr %60, align 4
  %62 = fsub float %59, %61
  %63 = getelementptr inbounds float, ptr %54, i64 %56
  %64 = load float, ptr %63, align 4
  %65 = fadd float %64, %62
  store float %65, ptr %63, align 4
  %66 = add nuw nsw i64 %56, 1
  %67 = add nsw i64 %57, %13
  %68 = icmp eq i64 %66, %12
  br i1 %68, label %69, label %55, !llvm.loop !127

69:                                               ; preds = %55, %49
  %70 = add nuw nsw i64 %50, 1
  %71 = icmp eq i64 %70, %13
  br i1 %71, label %72, label %49, !llvm.loop !128

72:                                               ; preds = %69, %44, %42, %7
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #55
  ret i32 0
}

; Function Attrs: nofree nounwind optsize uwtable
define internal i32 @res2_inverse(ptr nocapture noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, i32 noundef %4) #3 {
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %6, i64 0, i32 2
  %8 = load i32, ptr %7, align 8
  %9 = getelementptr inbounds %struct.vorbis_look_residue0, ptr %1, i64 0, i32 4
  %10 = load ptr, ptr %9, align 8
  %11 = load i64, ptr %10, align 8
  %12 = trunc i64 %11 to i32
  %13 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %6, i64 0, i32 1
  %14 = load i64, ptr %13, align 8
  %15 = load i64, ptr %6, align 8
  %16 = sub nsw i64 %14, %15
  %17 = trunc i64 %16 to i32
  %18 = sdiv i32 %17, %8
  %19 = add i32 %12, -1
  %20 = add i32 %19, %18
  %21 = sdiv i32 %20, %12
  %22 = sext i32 %21 to i64
  %23 = shl nsw i64 %22, 3
  %24 = tail call ptr @_vorbis_block_alloc(ptr noundef %0, i64 noundef %23) #56
  %25 = sext i32 %4 to i64
  %26 = icmp sgt i32 %4, 0
  br i1 %26, label %27, label %35

27:                                               ; preds = %32, %5
  %28 = phi i64 [ %33, %32 ], [ 0, %5 ]
  %29 = getelementptr inbounds i32, ptr %3, i64 %28
  %30 = load i32, ptr %29, align 4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %35

32:                                               ; preds = %27
  %33 = add nuw nsw i64 %28, 1
  %34 = icmp eq i64 %33, %25
  br i1 %34, label %130, label %27, !llvm.loop !129

35:                                               ; preds = %27, %5
  %36 = phi i64 [ 0, %5 ], [ %28, %27 ]
  %37 = icmp eq i64 %36, %25
  br i1 %37, label %130, label %38

38:                                               ; preds = %35
  %39 = getelementptr inbounds %struct.vorbis_look_residue0, ptr %1, i64 0, i32 2
  %40 = load i32, ptr %39, align 4
  %41 = icmp sgt i32 %40, 0
  br i1 %41, label %42, label %130

42:                                               ; preds = %38
  %43 = sext i32 %18 to i64
  %44 = icmp sgt i32 %18, 0
  %45 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 1
  %46 = getelementptr inbounds %struct.vorbis_look_residue0, ptr %1, i64 0, i32 7
  %47 = shl i64 %11, 32
  %48 = ashr exact i64 %47, 32
  %49 = icmp sgt i64 %47, 0
  %50 = getelementptr inbounds %struct.vorbis_look_residue0, ptr %1, i64 0, i32 5
  %51 = sext i32 %8 to i64
  br label %52

52:                                               ; preds = %125, %42
  %53 = phi i32 [ %40, %42 ], [ %126, %125 ]
  %54 = phi i64 [ 0, %42 ], [ %127, %125 ]
  br i1 %44, label %55, label %125

55:                                               ; preds = %52
  %56 = icmp eq i64 %54, 0
  %57 = trunc i64 %54 to i32
  %58 = shl nuw i32 1, %57
  br label %59

59:                                               ; preds = %119, %55
  %60 = phi i64 [ 0, %55 ], [ %120, %119 ]
  %61 = phi i64 [ 0, %55 ], [ %121, %119 ]
  br i1 %56, label %62, label %84

62:                                               ; preds = %59
  %63 = load ptr, ptr %9, align 8
  %64 = tail call fastcc i64 @decode_packed_entry_number(ptr noundef %63, ptr noundef nonnull %45) #56
  %65 = icmp sgt i64 %64, -1
  br i1 %65, label %66, label %72

66:                                               ; preds = %62
  %67 = getelementptr inbounds %struct.codebook, ptr %63, i64 0, i32 6
  %68 = load ptr, ptr %67, align 8
  %69 = getelementptr inbounds i32, ptr %68, i64 %64
  %70 = load i32, ptr %69, align 4
  %71 = zext i32 %70 to i64
  br label %72

72:                                               ; preds = %66, %62
  %73 = phi i64 [ %71, %66 ], [ %64, %62 ]
  %74 = and i64 %73, 4294967295
  %75 = icmp eq i64 %74, 4294967295
  br i1 %75, label %130, label %76

76:                                               ; preds = %72
  %77 = load ptr, ptr %46, align 8
  %78 = shl i64 %73, 32
  %79 = ashr exact i64 %78, 32
  %80 = getelementptr inbounds ptr, ptr %77, i64 %79
  %81 = load ptr, ptr %80, align 8
  %82 = getelementptr inbounds ptr, ptr %24, i64 %61
  store ptr %81, ptr %82, align 8
  %83 = icmp eq ptr %81, null
  br i1 %83, label %130, label %84

84:                                               ; preds = %76, %59
  %85 = icmp slt i64 %60, %43
  %86 = and i1 %49, %85
  br i1 %86, label %87, label %119

87:                                               ; preds = %84
  %88 = getelementptr inbounds ptr, ptr %24, i64 %61
  br label %89

89:                                               ; preds = %113, %87
  %90 = phi i64 [ %60, %87 ], [ %115, %113 ]
  %91 = phi i64 [ 0, %87 ], [ %114, %113 ]
  %92 = load ptr, ptr %88, align 8
  %93 = getelementptr inbounds i32, ptr %92, i64 %91
  %94 = load i32, ptr %93, align 4
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %6, i64 0, i32 5, i64 %95
  %97 = load i32, ptr %96, align 4
  %98 = and i32 %97, %58
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %113, label %100

100:                                              ; preds = %89
  %101 = load ptr, ptr %50, align 8
  %102 = getelementptr inbounds ptr, ptr %101, i64 %95
  %103 = load ptr, ptr %102, align 8
  %104 = getelementptr inbounds ptr, ptr %103, i64 %54
  %105 = load ptr, ptr %104, align 8
  %106 = icmp eq ptr %105, null
  br i1 %106, label %113, label %107

107:                                              ; preds = %100
  %108 = mul nsw i64 %90, %51
  %109 = load i64, ptr %6, align 8
  %110 = add nsw i64 %109, %108
  %111 = tail call i64 @vorbis_book_decodevv_add(ptr noundef nonnull %105, ptr noundef %2, i64 noundef %110, i32 noundef %4, ptr noundef nonnull %45, i32 noundef %8) #56, !range !130
  %112 = icmp eq i64 %111, -1
  br i1 %112, label %130, label %113

113:                                              ; preds = %107, %100, %89
  %114 = add nuw nsw i64 %91, 1
  %115 = add nsw i64 %90, 1
  %116 = icmp slt i64 %114, %48
  %117 = icmp slt i64 %115, %43
  %118 = select i1 %116, i1 %117, i1 false
  br i1 %118, label %89, label %119, !llvm.loop !131

119:                                              ; preds = %113, %84
  %120 = phi i64 [ %60, %84 ], [ %115, %113 ]
  %121 = add nuw nsw i64 %61, 1
  %122 = icmp slt i64 %120, %43
  br i1 %122, label %59, label %123, !llvm.loop !132

123:                                              ; preds = %119
  %124 = load i32, ptr %39, align 4
  br label %125

125:                                              ; preds = %123, %52
  %126 = phi i32 [ %124, %123 ], [ %53, %52 ]
  %127 = add nuw nsw i64 %54, 1
  %128 = sext i32 %126 to i64
  %129 = icmp slt i64 %127, %128
  br i1 %129, label %52, label %130, !llvm.loop !133

130:                                              ; preds = %125, %107, %76, %72, %38, %35, %32
  ret i32 0
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write, argmem: readwrite, inaccessiblemem: readwrite) uwtable
define internal ptr @_vorbis_block_alloc(ptr nocapture noundef %0, i64 noundef %1) #22 {
  %3 = add nsw i64 %1, 7
  %4 = and i64 %3, -8
  %5 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 12
  %6 = load i64, ptr %5, align 8
  %7 = add nsw i64 %6, %4
  %8 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 13
  %9 = load i64, ptr %8, align 8
  %10 = icmp sgt i64 %7, %9
  %11 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 11
  %12 = load ptr, ptr %11, align 8
  br i1 %10, label %13, label %25

13:                                               ; preds = %2
  %14 = icmp eq ptr %12, null
  br i1 %14, label %23, label %15

15:                                               ; preds = %13
  %16 = tail call noalias dereferenceable_or_null(16) ptr @malloc(i64 noundef 16) #64
  %17 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 14
  %18 = load i64, ptr %17, align 8
  %19 = add nsw i64 %18, %6
  store i64 %19, ptr %17, align 8
  %20 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 15
  %21 = load ptr, ptr %20, align 8
  %22 = getelementptr inbounds %struct.adv_opt, ptr %16, i64 0, i32 1
  store ptr %21, ptr %22, align 8
  store ptr %12, ptr %16, align 8
  store ptr %16, ptr %20, align 8
  br label %23

23:                                               ; preds = %15, %13
  store i64 %4, ptr %8, align 8
  %24 = tail call noalias ptr @malloc(i64 noundef %4) #64
  store ptr %24, ptr %11, align 8
  br label %25

25:                                               ; preds = %23, %2
  %26 = phi i64 [ 0, %23 ], [ %6, %2 ]
  %27 = phi ptr [ %24, %23 ], [ %12, %2 ]
  %28 = getelementptr inbounds i8, ptr %27, i64 %26
  %29 = add nsw i64 %26, %4
  store i64 %29, ptr %5, align 8
  ret ptr %28
}

; Function Attrs: inlinehint nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal fastcc i64 @decode_packed_entry_number(ptr nocapture noundef readonly %0, ptr nocapture noundef %1) unnamed_addr #25 {
  %3 = getelementptr inbounds %struct.codebook, ptr %0, i64 0, i32 10
  %4 = load i32, ptr %3, align 4
  %5 = getelementptr inbounds %struct.codebook, ptr %0, i64 0, i32 9
  %6 = load i32, ptr %5, align 8
  %7 = tail call i64 @oggpack_look(ptr noundef %1, i32 noundef %6) #56
  %8 = icmp sgt i64 %7, -1
  br i1 %8, label %9, label %38

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.codebook, ptr %0, i64 0, i32 8
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr inbounds i32, ptr %11, i64 %7
  %13 = load i32, ptr %12, align 4
  %14 = zext i32 %13 to i64
  %15 = icmp slt i32 %13, 0
  br i1 %15, label %16, label %23

16:                                               ; preds = %9
  %17 = lshr i64 %14, 15
  %18 = and i64 %17, 32767
  %19 = getelementptr inbounds %struct.codebook, ptr %0, i64 0, i32 2
  %20 = load i64, ptr %19, align 8
  %21 = and i64 %14, 32767
  %22 = sub nsw i64 %20, %21
  br label %41

23:                                               ; preds = %9
  %24 = getelementptr inbounds %struct.codebook, ptr %0, i64 0, i32 7
  %25 = load ptr, ptr %24, align 8
  %26 = add nsw i64 %14, -1
  %27 = getelementptr inbounds i8, ptr %25, i64 %26
  %28 = load i8, ptr %27, align 1
  %29 = sext i8 %28 to i32
  %30 = getelementptr inbounds %struct.oggpack_buffer, ptr %1, i64 0, i32 1
  %31 = load i32, ptr %30, align 8
  %32 = add nsw i32 %31, %29
  %33 = sdiv i32 %32, 8
  %34 = getelementptr inbounds %struct.oggpack_buffer, ptr %1, i64 0, i32 3
  %35 = load ptr, ptr %34, align 8
  %36 = sext i32 %33 to i64
  %37 = getelementptr inbounds i8, ptr %35, i64 %36
  store ptr %37, ptr %34, align 8
  br label %104

38:                                               ; preds = %2
  %39 = getelementptr inbounds %struct.codebook, ptr %0, i64 0, i32 2
  %40 = load i64, ptr %39, align 8
  br label %41

41:                                               ; preds = %38, %16
  %42 = phi i64 [ %40, %38 ], [ %22, %16 ]
  %43 = phi i64 [ 0, %38 ], [ %18, %16 ]
  %44 = tail call i64 @oggpack_look(ptr noundef %1, i32 noundef %4) #56
  %45 = icmp slt i64 %44, 0
  %46 = icmp sgt i32 %4, 1
  %47 = select i1 %45, i1 %46, i1 false
  br i1 %47, label %48, label %55

48:                                               ; preds = %48, %41
  %49 = phi i32 [ %50, %48 ], [ %4, %41 ]
  %50 = add nsw i32 %49, -1
  %51 = tail call i64 @oggpack_look(ptr noundef %1, i32 noundef %50) #56
  %52 = icmp slt i64 %51, 0
  %53 = icmp ugt i32 %49, 2
  %54 = and i1 %52, %53
  br i1 %54, label %48, label %55, !llvm.loop !134

55:                                               ; preds = %48, %41
  %56 = phi i64 [ %44, %41 ], [ %51, %48 ]
  %57 = phi i32 [ %4, %41 ], [ %50, %48 ]
  %58 = phi i1 [ %45, %41 ], [ %52, %48 ]
  br i1 %58, label %112, label %59

59:                                               ; preds = %55
  %60 = trunc i64 %56 to i32
  %61 = tail call i32 @llvm.bitreverse.i32(i32 %60)
  %62 = sub nsw i64 %42, %43
  %63 = icmp sgt i64 %62, 1
  br i1 %63, label %64, label %82

64:                                               ; preds = %59
  %65 = getelementptr inbounds %struct.codebook, ptr %0, i64 0, i32 5
  %66 = load ptr, ptr %65, align 8
  br label %67

67:                                               ; preds = %67, %64
  %68 = phi i64 [ %62, %64 ], [ %80, %67 ]
  %69 = phi i64 [ %43, %64 ], [ %77, %67 ]
  %70 = phi i64 [ %42, %64 ], [ %79, %67 ]
  %71 = lshr i64 %68, 1
  %72 = add nuw nsw i64 %71, %69
  %73 = getelementptr inbounds i32, ptr %66, i64 %72
  %74 = load i32, ptr %73, align 4
  %75 = icmp ugt i32 %74, %61
  %76 = select i1 %75, i64 0, i64 %71
  %77 = add nuw nsw i64 %76, %69
  %78 = select i1 %75, i64 %71, i64 0
  %79 = sub nsw i64 %70, %78
  %80 = sub nsw i64 %79, %77
  %81 = icmp sgt i64 %80, 1
  br i1 %81, label %67, label %82, !llvm.loop !135

82:                                               ; preds = %67, %59
  %83 = phi i64 [ %43, %59 ], [ %77, %67 ]
  %84 = getelementptr inbounds %struct.codebook, ptr %0, i64 0, i32 7
  %85 = load ptr, ptr %84, align 8
  %86 = getelementptr inbounds i8, ptr %85, i64 %83
  %87 = load i8, ptr %86, align 1
  %88 = sext i8 %87 to i32
  %89 = icmp slt i32 %57, %88
  %90 = getelementptr inbounds %struct.oggpack_buffer, ptr %1, i64 0, i32 1
  %91 = load i32, ptr %90, align 8
  %92 = getelementptr inbounds %struct.oggpack_buffer, ptr %1, i64 0, i32 3
  %93 = load ptr, ptr %92, align 8
  br i1 %89, label %99, label %94

94:                                               ; preds = %82
  %95 = add nsw i32 %91, %88
  %96 = sdiv i32 %95, 8
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds i8, ptr %93, i64 %97
  store ptr %98, ptr %92, align 8
  br label %104

99:                                               ; preds = %82
  %100 = add nsw i32 %91, %57
  %101 = sdiv i32 %100, 8
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds i8, ptr %93, i64 %102
  store ptr %103, ptr %92, align 8
  br label %104

104:                                              ; preds = %99, %94, %23
  %105 = phi i64 [ %97, %94 ], [ %36, %23 ], [ %102, %99 ]
  %106 = phi i32 [ %95, %94 ], [ %32, %23 ], [ %100, %99 ]
  %107 = phi ptr [ %90, %94 ], [ %30, %23 ], [ %90, %99 ]
  %108 = phi i64 [ %83, %94 ], [ %26, %23 ], [ -1, %99 ]
  %109 = load i64, ptr %1, align 8
  %110 = add nsw i64 %109, %105
  store i64 %110, ptr %1, align 8
  %111 = and i32 %106, 7
  store i32 %111, ptr %107, align 8
  br label %112

112:                                              ; preds = %104, %55
  %113 = phi i64 [ -1, %55 ], [ %108, %104 ]
  ret i64 %113
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal i64 @vorbis_book_decodevv_add(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i64 noundef %2, i32 noundef %3, ptr nocapture noundef %4, i32 noundef %5) #21 {
  %7 = sext i32 %3 to i64
  %8 = sdiv i64 %2, %7
  %9 = sext i32 %5 to i64
  %10 = add nsw i64 %9, %2
  %11 = sdiv i64 %10, %7
  %12 = icmp slt i64 %8, %11
  br i1 %12, label %13, label %50

13:                                               ; preds = %6
  %14 = getelementptr inbounds %struct.codebook, ptr %0, i64 0, i32 4
  br label %19

15:                                               ; preds = %30, %24
  %16 = phi i64 [ %21, %24 ], [ %45, %30 ]
  %17 = phi i32 [ %20, %24 ], [ %46, %30 ]
  %18 = icmp slt i64 %16, %11
  br i1 %18, label %19, label %50, !llvm.loop !136

19:                                               ; preds = %15, %13
  %20 = phi i32 [ 0, %13 ], [ %17, %15 ]
  %21 = phi i64 [ %8, %13 ], [ %16, %15 ]
  %22 = tail call fastcc i64 @decode_packed_entry_number(ptr noundef %0, ptr noundef %4) #56
  %23 = icmp eq i64 %22, -1
  br i1 %23, label %50, label %24

24:                                               ; preds = %19
  %25 = load ptr, ptr %14, align 8
  %26 = load i64, ptr %0, align 8
  %27 = mul nsw i64 %26, %22
  %28 = getelementptr inbounds float, ptr %25, i64 %27
  %29 = icmp sgt i64 %26, 0
  br i1 %29, label %30, label %15

30:                                               ; preds = %30, %24
  %31 = phi i32 [ %46, %30 ], [ %20, %24 ]
  %32 = phi i64 [ %45, %30 ], [ %21, %24 ]
  %33 = phi i64 [ %47, %30 ], [ 0, %24 ]
  %34 = getelementptr inbounds float, ptr %28, i64 %33
  %35 = load float, ptr %34, align 4
  %36 = add nsw i32 %31, 1
  %37 = sext i32 %31 to i64
  %38 = getelementptr inbounds ptr, ptr %1, i64 %37
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr inbounds float, ptr %39, i64 %32
  %41 = load float, ptr %40, align 4
  %42 = fadd float %35, %41
  store float %42, ptr %40, align 4
  %43 = icmp eq i32 %36, %3
  %44 = zext i1 %43 to i64
  %45 = add nsw i64 %32, %44
  %46 = select i1 %43, i32 0, i32 %36
  %47 = add nuw nsw i64 %33, 1
  %48 = load i64, ptr %0, align 8
  %49 = icmp slt i64 %47, %48
  br i1 %49, label %30, label %15, !llvm.loop !137

50:                                               ; preds = %19, %15, %6
  %51 = phi i64 [ 0, %6 ], [ 0, %15 ], [ -1, %19 ]
  ret i64 %51
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, inaccessiblemem: none) uwtable
define internal i64 @oggpack_look(ptr nocapture noundef readonly %0, i32 noundef %1) #26 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds [33 x i64], ptr @mask, i64 0, i64 %3
  %5 = load i64, ptr %4, align 8
  %6 = getelementptr inbounds %struct.oggpack_buffer, ptr %0, i64 0, i32 1
  %7 = load i32, ptr %6, align 8
  %8 = add nsw i32 %7, %1
  %9 = load i64, ptr %0, align 8
  %10 = add nsw i64 %9, 4
  %11 = getelementptr inbounds %struct.oggpack_buffer, ptr %0, i64 0, i32 4
  %12 = load i64, ptr %11, align 8
  %13 = icmp slt i64 %10, %12
  br i1 %13, label %20, label %14

14:                                               ; preds = %2
  %15 = shl nsw i64 %9, 3
  %16 = sext i32 %8 to i64
  %17 = add nsw i64 %15, %16
  %18 = shl nsw i64 %12, 3
  %19 = icmp sgt i64 %17, %18
  br i1 %19, label %68, label %20

20:                                               ; preds = %14, %2
  %21 = getelementptr inbounds %struct.oggpack_buffer, ptr %0, i64 0, i32 3
  %22 = load ptr, ptr %21, align 8
  %23 = load i8, ptr %22, align 1
  %24 = zext i8 %23 to i32
  %25 = lshr i32 %24, %7
  %26 = zext i32 %25 to i64
  %27 = icmp sgt i32 %8, 8
  br i1 %27, label %28, label %65

28:                                               ; preds = %20
  %29 = getelementptr inbounds i8, ptr %22, i64 1
  %30 = load i8, ptr %29, align 1
  %31 = zext i8 %30 to i32
  %32 = sub nsw i32 8, %7
  %33 = shl i32 %31, %32
  %34 = sext i32 %33 to i64
  %35 = or i64 %34, %26
  %36 = icmp ugt i32 %8, 16
  br i1 %36, label %37, label %65

37:                                               ; preds = %28
  %38 = getelementptr inbounds i8, ptr %22, i64 2
  %39 = load i8, ptr %38, align 1
  %40 = zext i8 %39 to i32
  %41 = sub nsw i32 16, %7
  %42 = shl i32 %40, %41
  %43 = sext i32 %42 to i64
  %44 = or i64 %35, %43
  %45 = icmp ugt i32 %8, 24
  br i1 %45, label %46, label %65

46:                                               ; preds = %37
  %47 = getelementptr inbounds i8, ptr %22, i64 3
  %48 = load i8, ptr %47, align 1
  %49 = zext i8 %48 to i32
  %50 = sub nsw i32 24, %7
  %51 = shl i32 %49, %50
  %52 = sext i32 %51 to i64
  %53 = or i64 %44, %52
  %54 = icmp ult i32 %8, 33
  %55 = icmp eq i32 %7, 0
  %56 = or i1 %55, %54
  br i1 %56, label %65, label %57

57:                                               ; preds = %46
  %58 = getelementptr inbounds i8, ptr %22, i64 4
  %59 = load i8, ptr %58, align 1
  %60 = zext i8 %59 to i32
  %61 = sub nsw i32 32, %7
  %62 = shl i32 %60, %61
  %63 = sext i32 %62 to i64
  %64 = or i64 %53, %63
  br label %65

65:                                               ; preds = %57, %46, %37, %28, %20
  %66 = phi i64 [ %64, %57 ], [ %53, %46 ], [ %44, %37 ], [ %35, %28 ], [ %26, %20 ]
  %67 = and i64 %66, %5
  br label %68

68:                                               ; preds = %65, %14
  %69 = phi i64 [ %67, %65 ], [ -1, %14 ]
  ret i64 %69
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.bitreverse.i32(i32) #27

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @_01forward(ptr nocapture noundef %0, ptr nocapture noundef %1, ptr nocapture noundef readonly %2, i32 noundef %3, ptr nocapture noundef readonly %4) unnamed_addr #0 {
  %6 = alloca [128 x i64], align 16
  %7 = alloca [128 x i64], align 16
  %8 = load ptr, ptr %1, align 8
  %9 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %8, i64 0, i32 2
  %10 = load i32, ptr %9, align 8
  %11 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %8, i64 0, i32 3
  %12 = load i32, ptr %11, align 4
  %13 = getelementptr inbounds %struct.vorbis_look_residue0, ptr %1, i64 0, i32 4
  %14 = load ptr, ptr %13, align 8
  %15 = load i64, ptr %14, align 8
  %16 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %8, i64 0, i32 1
  %17 = load i64, ptr %16, align 8
  %18 = load i64, ptr %8, align 8
  call void @llvm.lifetime.start.p0(i64 1024, ptr nonnull %6) #55
  call void @llvm.lifetime.start.p0(i64 1024, ptr nonnull %7) #55
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(1024) %6, i8 0, i64 1024, i1 false)
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(1024) %7, i8 0, i64 1024, i1 false)
  %19 = getelementptr inbounds %struct.vorbis_look_residue0, ptr %1, i64 0, i32 2
  %20 = load i32, ptr %19, align 4
  %21 = icmp sgt i32 %20, 0
  br i1 %21, label %22, label %170

22:                                               ; preds = %5
  %23 = sub nsw i64 %17, %18
  %24 = trunc i64 %23 to i32
  %25 = sdiv i32 %24, %10
  %26 = sext i32 %25 to i64
  %27 = icmp sgt i32 %25, 0
  %28 = sext i32 %3 to i64
  %29 = icmp slt i32 %3, 1
  %30 = shl i64 %15, 32
  %31 = ashr exact i64 %30, 32
  %32 = icmp sgt i64 %30, 4294967296
  %33 = sext i32 %12 to i64
  %34 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 1
  %35 = getelementptr inbounds %struct.vorbis_look_residue0, ptr %1, i64 0, i32 9
  %36 = icmp sgt i64 %30, 0
  %37 = sext i32 %10 to i64
  %38 = icmp sgt i32 %3, 0
  %39 = getelementptr inbounds %struct.vorbis_look_residue0, ptr %1, i64 0, i32 5
  %40 = getelementptr inbounds %struct.vorbis_look_residue0, ptr %1, i64 0, i32 8
  %41 = tail call i64 @llvm.smax.i64(i64 %31, i64 2)
  br label %42

42:                                               ; preds = %165, %22
  %43 = phi i32 [ %20, %22 ], [ %166, %165 ]
  %44 = phi i64 [ 0, %22 ], [ %167, %165 ]
  br i1 %27, label %45, label %165

45:                                               ; preds = %42
  %46 = icmp ne i64 %44, 0
  %47 = trunc i64 %44 to i32
  %48 = shl nuw i32 1, %47
  %49 = or i1 %46, %29
  br label %53

50:                                               ; preds = %157, %108
  %51 = phi i64 [ %54, %108 ], [ %159, %157 ]
  %52 = icmp slt i64 %51, %26
  br i1 %52, label %53, label %163, !llvm.loop !138

53:                                               ; preds = %50, %45
  %54 = phi i64 [ 0, %45 ], [ %51, %50 ]
  br i1 %49, label %108, label %55

55:                                               ; preds = %105, %53
  %56 = phi i64 [ %106, %105 ], [ 0, %53 ]
  %57 = getelementptr inbounds ptr, ptr %4, i64 %56
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr inbounds i64, ptr %58, i64 %54
  %60 = load i64, ptr %59, align 8
  br i1 %32, label %61, label %75

61:                                               ; preds = %71, %55
  %62 = phi i64 [ %73, %71 ], [ 1, %55 ]
  %63 = phi i64 [ %72, %71 ], [ %60, %55 ]
  %64 = mul nsw i64 %63, %33
  %65 = add nsw i64 %62, %54
  %66 = icmp slt i64 %65, %26
  br i1 %66, label %67, label %71

67:                                               ; preds = %61
  %68 = getelementptr inbounds i64, ptr %58, i64 %65
  %69 = load i64, ptr %68, align 8
  %70 = add nsw i64 %69, %64
  br label %71

71:                                               ; preds = %67, %61
  %72 = phi i64 [ %70, %67 ], [ %64, %61 ]
  %73 = add nuw nsw i64 %62, 1
  %74 = icmp eq i64 %73, %41
  br i1 %74, label %75, label %61, !llvm.loop !139

75:                                               ; preds = %71, %55
  %76 = phi i64 [ %60, %55 ], [ %72, %71 ]
  %77 = load ptr, ptr %13, align 8
  %78 = getelementptr inbounds %struct.codebook, ptr %77, i64 0, i32 1
  %79 = load i64, ptr %78, align 8
  %80 = icmp slt i64 %76, %79
  br i1 %80, label %81, label %105

81:                                               ; preds = %75
  %82 = getelementptr inbounds %struct.codebook, ptr %77, i64 0, i32 5
  %83 = load ptr, ptr %82, align 8
  %84 = shl i64 %76, 32
  %85 = ashr exact i64 %84, 32
  %86 = getelementptr inbounds i32, ptr %83, i64 %85
  %87 = load i32, ptr %86, align 4
  %88 = zext i32 %87 to i64
  %89 = getelementptr inbounds %struct.codebook, ptr %77, i64 0, i32 3
  %90 = load ptr, ptr %89, align 8
  %91 = getelementptr inbounds %struct.static_codebook, ptr %90, i64 0, i32 2
  %92 = load ptr, ptr %91, align 8
  %93 = getelementptr inbounds i64, ptr %92, i64 %85
  %94 = load i64, ptr %93, align 8
  %95 = trunc i64 %94 to i32
  tail call void @oggpack_write(ptr noundef nonnull %34, i64 noundef %88, i32 noundef %95) #56
  %96 = load ptr, ptr %89, align 8
  %97 = getelementptr inbounds %struct.static_codebook, ptr %96, i64 0, i32 2
  %98 = load ptr, ptr %97, align 8
  %99 = getelementptr inbounds i64, ptr %98, i64 %85
  %100 = load i64, ptr %99, align 8
  %101 = shl i64 %100, 32
  %102 = ashr exact i64 %101, 32
  %103 = load i64, ptr %35, align 8
  %104 = add nsw i64 %102, %103
  store i64 %104, ptr %35, align 8
  br label %105

105:                                              ; preds = %81, %75
  %106 = add nuw nsw i64 %56, 1
  %107 = icmp eq i64 %106, %28
  br i1 %107, label %108, label %55, !llvm.loop !140

108:                                              ; preds = %105, %53
  %109 = icmp slt i64 %54, %26
  %110 = and i1 %36, %109
  br i1 %110, label %111, label %50

111:                                              ; preds = %157, %108
  %112 = phi i64 [ %159, %157 ], [ %54, %108 ]
  %113 = phi i64 [ %158, %157 ], [ 0, %108 ]
  %114 = mul nsw i64 %112, %37
  %115 = load i64, ptr %8, align 8
  %116 = add nsw i64 %115, %114
  br i1 %38, label %117, label %157

117:                                              ; preds = %154, %111
  %118 = phi i64 [ %155, %154 ], [ 0, %111 ]
  %119 = getelementptr inbounds ptr, ptr %4, i64 %118
  %120 = load ptr, ptr %119, align 8
  %121 = getelementptr inbounds i64, ptr %120, i64 %112
  %122 = load i64, ptr %121, align 8
  br i1 %46, label %127, label %123

123:                                              ; preds = %117
  %124 = getelementptr inbounds [128 x i64], ptr %7, i64 0, i64 %122
  %125 = load i64, ptr %124, align 8
  %126 = add nsw i64 %125, %37
  store i64 %126, ptr %124, align 8
  br label %127

127:                                              ; preds = %123, %117
  %128 = getelementptr inbounds ptr, ptr %4, i64 %118
  %129 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %8, i64 0, i32 5, i64 %122
  %130 = load i32, ptr %129, align 4
  %131 = and i32 %130, %48
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %154, label %133

133:                                              ; preds = %127
  %134 = load ptr, ptr %39, align 8
  %135 = getelementptr inbounds ptr, ptr %134, i64 %122
  %136 = load ptr, ptr %135, align 8
  %137 = getelementptr inbounds ptr, ptr %136, i64 %44
  %138 = load ptr, ptr %137, align 8
  %139 = icmp eq ptr %138, null
  br i1 %139, label %154, label %140

140:                                              ; preds = %133
  %141 = getelementptr inbounds ptr, ptr %2, i64 %118
  %142 = load ptr, ptr %141, align 8
  %143 = getelementptr inbounds float, ptr %142, i64 %116
  %144 = tail call fastcc i32 @_encodepart(ptr noundef nonnull %34, ptr noundef %143, i32 noundef %10, ptr noundef nonnull %138, ptr poison) #56
  %145 = sext i32 %144 to i64
  %146 = load i64, ptr %40, align 8
  %147 = add nsw i64 %146, %145
  store i64 %147, ptr %40, align 8
  %148 = load ptr, ptr %128, align 8
  %149 = getelementptr inbounds i64, ptr %148, i64 %112
  %150 = load i64, ptr %149, align 8
  %151 = getelementptr inbounds [128 x i64], ptr %6, i64 0, i64 %150
  %152 = load i64, ptr %151, align 8
  %153 = add nsw i64 %152, %145
  store i64 %153, ptr %151, align 8
  br label %154

154:                                              ; preds = %140, %133, %127
  %155 = add nuw nsw i64 %118, 1
  %156 = icmp eq i64 %155, %28
  br i1 %156, label %157, label %117, !llvm.loop !141

157:                                              ; preds = %154, %111
  %158 = add nuw nsw i64 %113, 1
  %159 = add nsw i64 %112, 1
  %160 = icmp slt i64 %158, %31
  %161 = icmp slt i64 %159, %26
  %162 = select i1 %160, i1 %161, i1 false
  br i1 %162, label %111, label %50, !llvm.loop !142

163:                                              ; preds = %50
  %164 = load i32, ptr %19, align 4
  br label %165

165:                                              ; preds = %163, %42
  %166 = phi i32 [ %164, %163 ], [ %43, %42 ]
  %167 = add nuw nsw i64 %44, 1
  %168 = sext i32 %166 to i64
  %169 = icmp slt i64 %167, %168
  br i1 %169, label %42, label %170, !llvm.loop !143

170:                                              ; preds = %165, %5
  call void @llvm.lifetime.end.p0(i64 1024, ptr nonnull %7) #55
  call void @llvm.lifetime.end.p0(i64 1024, ptr nonnull %6) #55
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smax.i64(i64, i64) #27

; Function Attrs: mustprogress nounwind optsize willreturn uwtable
define internal void @oggpack_write(ptr nocapture noundef %0, i64 noundef %1, i32 noundef %2) #13 {
  %4 = load i64, ptr %0, align 8
  %5 = add nsw i64 %4, 4
  %6 = getelementptr inbounds %struct.oggpack_buffer, ptr %0, i64 0, i32 4
  %7 = load i64, ptr %6, align 8
  %8 = icmp slt i64 %5, %7
  br i1 %8, label %9, label %12

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.oggpack_buffer, ptr %0, i64 0, i32 3
  %11 = load ptr, ptr %10, align 8
  br label %22

12:                                               ; preds = %3
  %13 = getelementptr inbounds %struct.oggpack_buffer, ptr %0, i64 0, i32 2
  %14 = load ptr, ptr %13, align 8
  %15 = add nsw i64 %7, 256
  %16 = tail call ptr @realloc(ptr noundef %14, i64 noundef %15) #61
  store ptr %16, ptr %13, align 8
  %17 = load i64, ptr %6, align 8
  %18 = add nsw i64 %17, 256
  store i64 %18, ptr %6, align 8
  %19 = load i64, ptr %0, align 8
  %20 = getelementptr inbounds i8, ptr %16, i64 %19
  %21 = getelementptr inbounds %struct.oggpack_buffer, ptr %0, i64 0, i32 3
  store ptr %20, ptr %21, align 8
  br label %22

22:                                               ; preds = %12, %9
  %23 = phi ptr [ %11, %9 ], [ %20, %12 ]
  %24 = sext i32 %2 to i64
  %25 = getelementptr inbounds [33 x i64], ptr @mask, i64 0, i64 %24
  %26 = load i64, ptr %25, align 8
  %27 = and i64 %26, %1
  %28 = getelementptr inbounds %struct.oggpack_buffer, ptr %0, i64 0, i32 1
  %29 = load i32, ptr %28, align 8
  %30 = add nsw i32 %29, %2
  %31 = zext i32 %29 to i64
  %32 = shl i64 %27, %31
  %33 = getelementptr inbounds %struct.oggpack_buffer, ptr %0, i64 0, i32 3
  %34 = load i8, ptr %23, align 1
  %35 = trunc i64 %32 to i8
  %36 = or i8 %34, %35
  store i8 %36, ptr %23, align 1
  %37 = icmp sgt i32 %30, 7
  br i1 %37, label %38, label %75

38:                                               ; preds = %22
  %39 = load i32, ptr %28, align 8
  %40 = sub nsw i32 8, %39
  %41 = zext i32 %40 to i64
  %42 = lshr i64 %27, %41
  %43 = trunc i64 %42 to i8
  %44 = load ptr, ptr %33, align 8
  %45 = getelementptr inbounds i8, ptr %44, i64 1
  store i8 %43, ptr %45, align 1
  %46 = icmp ugt i32 %30, 15
  br i1 %46, label %47, label %75

47:                                               ; preds = %38
  %48 = load i32, ptr %28, align 8
  %49 = sub nsw i32 16, %48
  %50 = zext i32 %49 to i64
  %51 = lshr i64 %27, %50
  %52 = trunc i64 %51 to i8
  %53 = load ptr, ptr %33, align 8
  %54 = getelementptr inbounds i8, ptr %53, i64 2
  store i8 %52, ptr %54, align 1
  %55 = icmp ugt i32 %30, 23
  br i1 %55, label %56, label %75

56:                                               ; preds = %47
  %57 = load i32, ptr %28, align 8
  %58 = sub nsw i32 24, %57
  %59 = zext i32 %58 to i64
  %60 = lshr i64 %27, %59
  %61 = trunc i64 %60 to i8
  %62 = load ptr, ptr %33, align 8
  %63 = getelementptr inbounds i8, ptr %62, i64 3
  store i8 %61, ptr %63, align 1
  %64 = icmp ugt i32 %30, 31
  br i1 %64, label %65, label %75

65:                                               ; preds = %56
  %66 = load i32, ptr %28, align 8
  %67 = icmp eq i32 %66, 0
  %68 = sub nsw i32 32, %66
  %69 = zext i32 %68 to i64
  %70 = lshr i64 %27, %69
  %71 = trunc i64 %70 to i8
  %72 = select i1 %67, i8 0, i8 %71
  %73 = load ptr, ptr %33, align 8
  %74 = getelementptr inbounds i8, ptr %73, i64 4
  store i8 %72, ptr %74, align 1
  br label %75

75:                                               ; preds = %65, %56, %47, %38, %22
  %76 = sdiv i32 %30, 8
  %77 = sext i32 %76 to i64
  %78 = load i64, ptr %0, align 8
  %79 = add nsw i64 %78, %77
  store i64 %79, ptr %0, align 8
  %80 = load ptr, ptr %33, align 8
  %81 = getelementptr inbounds i8, ptr %80, i64 %77
  store ptr %81, ptr %33, align 8
  %82 = and i32 %30, 7
  store i32 %82, ptr %28, align 8
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc i32 @_encodepart(ptr nocapture noundef %0, ptr nocapture noundef %1, i32 noundef %2, ptr nocapture noundef readonly %3, ptr nocapture readnone %4) unnamed_addr #0 {
  %6 = load i64, ptr %3, align 8
  %7 = trunc i64 %6 to i32
  %8 = sdiv i32 %2, %7
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %190

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.codebook, ptr %3, i64 0, i32 3
  %12 = getelementptr inbounds %struct.codebook, ptr %3, i64 0, i32 1
  %13 = getelementptr inbounds %struct.codebook, ptr %3, i64 0, i32 4
  %14 = getelementptr inbounds %struct.codebook, ptr %3, i64 0, i32 5
  %15 = shl i64 %6, 32
  %16 = ashr exact i64 %15, 32
  %17 = zext i32 %8 to i64
  %18 = load ptr, ptr %11, align 8
  br label %19

19:                                               ; preds = %171, %10
  %20 = phi ptr [ %18, %10 ], [ %181, %171 ]
  %21 = phi i64 [ 0, %10 ], [ %188, %171 ]
  %22 = phi i32 [ 0, %10 ], [ %187, %171 ]
  %23 = mul nsw i64 %21, %16
  %24 = getelementptr inbounds float, ptr %1, i64 %23
  %25 = load i64, ptr %3, align 8
  %26 = trunc i64 %25 to i32
  %27 = icmp sgt i32 %26, 0
  br i1 %27, label %28, label %98

28:                                               ; preds = %19
  %29 = getelementptr inbounds %struct.static_codebook, ptr %20, i64 0, i32 10
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr inbounds %struct.encode_aux_threshmatch, ptr %30, i64 0, i32 3
  %32 = load i32, ptr %31, align 4
  %33 = ashr i32 %32, 1
  %34 = load ptr, ptr %30, align 8
  %35 = sext i32 %33 to i64
  %36 = getelementptr inbounds float, ptr %34, i64 %35
  %37 = load float, ptr %36, align 4
  %38 = add i32 %32, -1
  %39 = add nsw i32 %33, -1
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds float, ptr %34, i64 %40
  %42 = getelementptr inbounds %struct.encode_aux_threshmatch, ptr %30, i64 0, i32 2
  %43 = load i32, ptr %42, align 8
  %44 = getelementptr inbounds %struct.encode_aux_threshmatch, ptr %30, i64 0, i32 1
  %45 = load ptr, ptr %44, align 8
  %46 = sext i32 %38 to i64
  %47 = add nsw i32 %33, 1
  %48 = tail call i32 @llvm.smax.i32(i32 %38, i32 %47)
  %49 = zext i32 %33 to i64
  %50 = tail call i32 @llvm.smin.i32(i32 %33, i32 1)
  %51 = add nsw i32 %50, -1
  %52 = shl i64 %25, 32
  %53 = ashr exact i64 %52, 32
  br label %54

54:                                               ; preds = %88, %28
  %55 = phi i64 [ %53, %28 ], [ %58, %88 ]
  %56 = phi i32 [ 0, %28 ], [ %96, %88 ]
  %57 = phi i32 [ 0, %28 ], [ %95, %88 ]
  %58 = add nsw i64 %55, -1
  %59 = getelementptr inbounds float, ptr %24, i64 %58
  %60 = load float, ptr %59, align 4
  %61 = fcmp olt float %60, %37
  br i1 %61, label %62, label %76

62:                                               ; preds = %54
  %63 = load float, ptr %41, align 4
  %64 = fcmp olt float %60, %63
  br i1 %64, label %65, label %88

65:                                               ; preds = %69, %62
  %66 = phi i64 [ %70, %69 ], [ %49, %62 ]
  %67 = trunc i64 %66 to i32
  %68 = icmp sgt i32 %67, 1
  br i1 %68, label %69, label %88

69:                                               ; preds = %65
  %70 = add nsw i64 %66, -1
  %71 = add nsw i64 %66, 4294967294
  %72 = and i64 %71, 4294967295
  %73 = getelementptr inbounds float, ptr %34, i64 %72
  %74 = load float, ptr %73, align 4
  %75 = fcmp ult float %60, %74
  br i1 %75, label %65, label %84, !llvm.loop !144

76:                                               ; preds = %80, %54
  %77 = phi i64 [ %78, %80 ], [ %35, %54 ]
  %78 = add nsw i64 %77, 1
  %79 = icmp slt i64 %78, %46
  br i1 %79, label %80, label %88

80:                                               ; preds = %76
  %81 = getelementptr inbounds float, ptr %34, i64 %78
  %82 = load float, ptr %81, align 4
  %83 = fcmp olt float %60, %82
  br i1 %83, label %86, label %76, !llvm.loop !145

84:                                               ; preds = %69
  %.lcssa1 = phi i64 [ %70, %69 ]
  %85 = trunc i64 %.lcssa1 to i32
  br label %88

86:                                               ; preds = %80
  %.lcssa = phi i64 [ %78, %80 ]
  %87 = trunc i64 %.lcssa to i32
  br label %88

88:                                               ; preds = %86, %84, %76, %65, %62
  %89 = phi i32 [ %33, %62 ], [ %85, %84 ], [ %87, %86 ], [ %51, %65 ], [ %48, %76 ]
  %90 = mul nsw i32 %57, %43
  %91 = sext i32 %89 to i64
  %92 = getelementptr inbounds i64, ptr %45, i64 %91
  %93 = load i64, ptr %92, align 8
  %94 = trunc i64 %93 to i32
  %95 = add i32 %90, %94
  %96 = add nuw nsw i32 %56, 1
  %97 = icmp eq i32 %96, %26
  br i1 %97, label %98, label %54, !llvm.loop !146

98:                                               ; preds = %88, %19
  %99 = phi i32 [ 0, %19 ], [ %95, %88 ]
  %100 = getelementptr inbounds %struct.static_codebook, ptr %20, i64 0, i32 2
  %101 = load ptr, ptr %100, align 8
  %102 = sext i32 %99 to i64
  %103 = getelementptr inbounds i64, ptr %101, i64 %102
  %104 = load i64, ptr %103, align 8
  %105 = icmp slt i64 %104, 1
  br i1 %105, label %106, label %149

106:                                              ; preds = %98
  %107 = load i64, ptr %12, align 8
  %108 = icmp sgt i64 %107, 0
  br i1 %108, label %109, label %149

109:                                              ; preds = %106
  %110 = load ptr, ptr %13, align 8
  %111 = shl i64 %25, 32
  %112 = ashr exact i64 %111, 32
  %113 = and i64 %25, 4294967295
  br label %114

114:                                              ; preds = %143, %109
  %115 = phi i64 [ 0, %109 ], [ %147, %143 ]
  %116 = phi ptr [ %110, %109 ], [ %146, %143 ]
  %117 = phi float [ 0.000000e+00, %109 ], [ %145, %143 ]
  %118 = phi i32 [ -1, %109 ], [ %144, %143 ]
  %119 = getelementptr inbounds i64, ptr %101, i64 %115
  %120 = load i64, ptr %119, align 8
  %121 = icmp sgt i64 %120, 0
  br i1 %121, label %122, label %143

122:                                              ; preds = %114
  br i1 %27, label %123, label %135

123:                                              ; preds = %123, %122
  %124 = phi i64 [ %133, %123 ], [ 0, %122 ]
  %125 = phi float [ %132, %123 ], [ 0.000000e+00, %122 ]
  %126 = getelementptr inbounds float, ptr %116, i64 %124
  %127 = load float, ptr %126, align 4
  %128 = getelementptr inbounds float, ptr %24, i64 %124
  %129 = load float, ptr %128, align 4
  %130 = fsub float %127, %129
  %131 = fmul float %130, %130
  %132 = fadd float %125, %131
  %133 = add nuw nsw i64 %124, 1
  %134 = icmp eq i64 %133, %113
  br i1 %134, label %135, label %123, !llvm.loop !147

135:                                              ; preds = %123, %122
  %136 = phi float [ 0.000000e+00, %122 ], [ %132, %123 ]
  %137 = icmp eq i32 %118, -1
  %138 = fcmp olt float %136, %117
  %139 = select i1 %137, i1 true, i1 %138
  %140 = trunc i64 %115 to i32
  %141 = select i1 %139, i32 %140, i32 %118
  %142 = select i1 %139, float %136, float %117
  br label %143

143:                                              ; preds = %135, %114
  %144 = phi i32 [ %141, %135 ], [ %118, %114 ]
  %145 = phi float [ %142, %135 ], [ %117, %114 ]
  %146 = getelementptr inbounds float, ptr %116, i64 %112
  %147 = add nuw nsw i64 %115, 1
  %148 = icmp eq i64 %147, %107
  br i1 %148, label %149, label %114, !llvm.loop !148

149:                                              ; preds = %143, %106, %98
  %150 = phi i32 [ %99, %98 ], [ -1, %106 ], [ %144, %143 ]
  br i1 %27, label %151, label %171

151:                                              ; preds = %149
  %152 = load ptr, ptr %13, align 8
  %153 = mul nsw i32 %150, %26
  %154 = sext i32 %153 to i64
  %155 = getelementptr inbounds float, ptr %152, i64 %154
  br label %156

156:                                              ; preds = %156, %151
  %157 = phi ptr [ %160, %156 ], [ %155, %151 ]
  %158 = phi ptr [ %162, %156 ], [ %24, %151 ]
  %159 = phi i32 [ %165, %156 ], [ 0, %151 ]
  %160 = getelementptr inbounds float, ptr %157, i64 1
  %161 = load float, ptr %157, align 4
  %162 = getelementptr inbounds float, ptr %158, i64 1
  %163 = load float, ptr %158, align 4
  %164 = fsub float %163, %161
  store float %164, ptr %158, align 4
  %165 = add nuw nsw i32 %159, 1
  %166 = icmp eq i32 %165, %26
  br i1 %166, label %167, label %156, !llvm.loop !149

167:                                              ; preds = %156
  %168 = load ptr, ptr %11, align 8
  %169 = getelementptr inbounds %struct.static_codebook, ptr %168, i64 0, i32 2
  %170 = load ptr, ptr %169, align 8
  br label %171

171:                                              ; preds = %167, %149
  %172 = phi ptr [ %170, %167 ], [ %101, %149 ]
  %173 = load ptr, ptr %14, align 8
  %174 = sext i32 %150 to i64
  %175 = getelementptr inbounds i32, ptr %173, i64 %174
  %176 = load i32, ptr %175, align 4
  %177 = zext i32 %176 to i64
  %178 = getelementptr inbounds i64, ptr %172, i64 %174
  %179 = load i64, ptr %178, align 8
  %180 = trunc i64 %179 to i32
  tail call void @oggpack_write(ptr noundef %0, i64 noundef %177, i32 noundef %180) #56
  %181 = load ptr, ptr %11, align 8
  %182 = getelementptr inbounds %struct.static_codebook, ptr %181, i64 0, i32 2
  %183 = load ptr, ptr %182, align 8
  %184 = getelementptr inbounds i64, ptr %183, i64 %174
  %185 = load i64, ptr %184, align 8
  %186 = trunc i64 %185 to i32
  %187 = add nsw i32 %22, %186
  %188 = add nuw nsw i64 %21, 1
  %189 = icmp eq i64 %188, %17
  br i1 %189, label %190, label %19, !llvm.loop !150

190:                                              ; preds = %171, %5
  %191 = phi i32 [ 0, %5 ], [ %187, %171 ]
  ret i32 %191
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #27

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #27

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #27

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write)
declare double @pow(double noundef, double noundef) local_unnamed_addr #28

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.rint.f64(double) #27

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal i64 @oggpack_read(ptr nocapture noundef %0, i32 noundef %1) #29 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds [33 x i64], ptr @mask, i64 0, i64 %3
  %5 = load i64, ptr %4, align 8
  %6 = getelementptr inbounds %struct.oggpack_buffer, ptr %0, i64 0, i32 1
  %7 = load i32, ptr %6, align 8
  %8 = add nsw i32 %7, %1
  %9 = load i64, ptr %0, align 8
  %10 = add nsw i64 %9, 4
  %11 = getelementptr inbounds %struct.oggpack_buffer, ptr %0, i64 0, i32 4
  %12 = load i64, ptr %11, align 8
  %13 = icmp slt i64 %10, %12
  br i1 %13, label %23, label %14

14:                                               ; preds = %2
  %15 = shl nsw i64 %9, 3
  %16 = sext i32 %8 to i64
  %17 = add nsw i64 %15, %16
  %18 = shl nsw i64 %12, 3
  %19 = icmp sgt i64 %17, %18
  br i1 %19, label %20, label %23

20:                                               ; preds = %14
  %21 = getelementptr inbounds %struct.oggpack_buffer, ptr %0, i64 0, i32 3
  %22 = load ptr, ptr %21, align 8
  br label %71

23:                                               ; preds = %14, %2
  %24 = getelementptr inbounds %struct.oggpack_buffer, ptr %0, i64 0, i32 3
  %25 = load ptr, ptr %24, align 8
  %26 = load i8, ptr %25, align 1
  %27 = zext i8 %26 to i32
  %28 = lshr i32 %27, %7
  %29 = zext i32 %28 to i64
  %30 = icmp sgt i32 %8, 8
  br i1 %30, label %31, label %68

31:                                               ; preds = %23
  %32 = getelementptr inbounds i8, ptr %25, i64 1
  %33 = load i8, ptr %32, align 1
  %34 = zext i8 %33 to i32
  %35 = sub nsw i32 8, %7
  %36 = shl i32 %34, %35
  %37 = sext i32 %36 to i64
  %38 = or i64 %37, %29
  %39 = icmp ugt i32 %8, 16
  br i1 %39, label %40, label %68

40:                                               ; preds = %31
  %41 = getelementptr inbounds i8, ptr %25, i64 2
  %42 = load i8, ptr %41, align 1
  %43 = zext i8 %42 to i32
  %44 = sub nsw i32 16, %7
  %45 = shl i32 %43, %44
  %46 = sext i32 %45 to i64
  %47 = or i64 %38, %46
  %48 = icmp ugt i32 %8, 24
  br i1 %48, label %49, label %68

49:                                               ; preds = %40
  %50 = getelementptr inbounds i8, ptr %25, i64 3
  %51 = load i8, ptr %50, align 1
  %52 = zext i8 %51 to i32
  %53 = sub nsw i32 24, %7
  %54 = shl i32 %52, %53
  %55 = sext i32 %54 to i64
  %56 = or i64 %47, %55
  %57 = icmp ult i32 %8, 33
  %58 = icmp eq i32 %7, 0
  %59 = or i1 %58, %57
  br i1 %59, label %68, label %60

60:                                               ; preds = %49
  %61 = getelementptr inbounds i8, ptr %25, i64 4
  %62 = load i8, ptr %61, align 1
  %63 = zext i8 %62 to i32
  %64 = sub nsw i32 32, %7
  %65 = shl i32 %63, %64
  %66 = sext i32 %65 to i64
  %67 = or i64 %56, %66
  br label %68

68:                                               ; preds = %60, %49, %40, %31, %23
  %69 = phi i64 [ %67, %60 ], [ %56, %49 ], [ %47, %40 ], [ %38, %31 ], [ %29, %23 ]
  %70 = and i64 %69, %5
  br label %71

71:                                               ; preds = %68, %20
  %72 = phi ptr [ %22, %20 ], [ %25, %68 ]
  %73 = phi i64 [ -1, %20 ], [ %70, %68 ]
  %74 = sdiv i32 %8, 8
  %75 = getelementptr inbounds %struct.oggpack_buffer, ptr %0, i64 0, i32 3
  %76 = sext i32 %74 to i64
  %77 = getelementptr inbounds i8, ptr %72, i64 %76
  store ptr %77, ptr %75, align 8
  %78 = add nsw i64 %9, %76
  store i64 %78, ptr %0, align 8
  %79 = and i32 %8, 7
  store i32 %79, ptr %6, align 8
  ret i64 %73
}

; Function Attrs: nofree nounwind optsize uwtable
define internal ptr @res1_class(ptr nocapture noundef %0, ptr nocapture noundef %1, ptr nocapture noundef %2, ptr nocapture noundef readonly %3, i32 noundef %4) #3 {
  %6 = icmp sgt i32 %4, 0
  br i1 %6, label %7, label %126

7:                                                ; preds = %5
  %8 = zext i32 %4 to i64
  br label %9

9:                                                ; preds = %21, %7
  %10 = phi i64 [ 0, %7 ], [ %23, %21 ]
  %11 = phi i32 [ 0, %7 ], [ %22, %21 ]
  %12 = getelementptr inbounds i32, ptr %3, i64 %10
  %13 = load i32, ptr %12, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %21, label %15

15:                                               ; preds = %9
  %16 = getelementptr inbounds ptr, ptr %2, i64 %10
  %17 = load ptr, ptr %16, align 8
  %18 = add nsw i32 %11, 1
  %19 = sext i32 %11 to i64
  %20 = getelementptr inbounds ptr, ptr %2, i64 %19
  store ptr %17, ptr %20, align 8
  br label %21

21:                                               ; preds = %15, %9
  %22 = phi i32 [ %18, %15 ], [ %11, %9 ]
  %23 = add nuw nsw i64 %10, 1
  %24 = icmp eq i64 %23, %8
  br i1 %24, label %25, label %9, !llvm.loop !151

25:                                               ; preds = %21
  %.lcssa = phi i32 [ %22, %21 ]
  %26 = icmp eq i32 %.lcssa, 0
  br i1 %26, label %126, label %27

27:                                               ; preds = %25
  %28 = load ptr, ptr %1, align 8
  %29 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %28, i64 0, i32 2
  %30 = load i32, ptr %29, align 8
  %31 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %28, i64 0, i32 3
  %32 = load i32, ptr %31, align 4
  %33 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %28, i64 0, i32 1
  %34 = load i64, ptr %33, align 8
  %35 = load i64, ptr %28, align 8
  %36 = sub nsw i64 %34, %35
  %37 = trunc i64 %36 to i32
  %38 = sdiv i32 %37, %30
  %39 = sext i32 %.lcssa to i64
  %40 = shl nsw i64 %39, 3
  %41 = tail call ptr @_vorbis_block_alloc(ptr noundef %0, i64 noundef %40) #56
  %42 = sitofp i32 %30 to double
  %43 = fdiv double 1.000000e+02, %42
  %44 = fptrunc double %43 to float
  %45 = icmp sgt i32 %.lcssa, 0
  %46 = sext i32 %38 to i64
  br i1 %45, label %47, label %49

47:                                               ; preds = %27
  %48 = shl nsw i64 %46, 3
  br label %58

49:                                               ; preds = %58, %27
  %50 = icmp sgt i32 %38, 0
  br i1 %50, label %51, label %122

51:                                               ; preds = %49
  %52 = sext i32 %30 to i64
  %53 = icmp sgt i32 %30, 0
  %54 = icmp sgt i32 %32, 1
  %55 = tail call i32 @llvm.smax.i32(i32 %32, i32 2)
  %56 = add nsw i32 %55, -1
  %57 = zext i32 %56 to i64
  br label %64

58:                                               ; preds = %58, %47
  %59 = phi i64 [ 0, %47 ], [ %62, %58 ]
  %60 = tail call ptr @_vorbis_block_alloc(ptr noundef %0, i64 noundef %48) #56
  %61 = getelementptr inbounds ptr, ptr %41, i64 %59
  store ptr %60, ptr %61, align 8
  tail call void @llvm.memset.p0.i64(ptr align 8 %60, i8 0, i64 %48, i1 false)
  %62 = add nuw nsw i64 %59, 1
  %63 = icmp eq i64 %62, %39
  br i1 %63, label %49, label %58, !llvm.loop !152

64:                                               ; preds = %119, %51
  %65 = phi i64 [ 0, %51 ], [ %120, %119 ]
  br i1 %45, label %66, label %119

66:                                               ; preds = %64
  %67 = load i64, ptr %28, align 8
  %68 = mul nsw i64 %65, %52
  %69 = add nsw i64 %67, %68
  %70 = shl i64 %69, 32
  %71 = ashr exact i64 %70, 32
  br label %72

72:                                               ; preds = %112, %66
  %73 = phi i64 [ 0, %66 ], [ %117, %112 ]
  br i1 %53, label %74, label %92

74:                                               ; preds = %72
  %75 = getelementptr inbounds ptr, ptr %2, i64 %73
  %76 = load ptr, ptr %75, align 8
  br label %77

77:                                               ; preds = %77, %74
  %78 = phi float [ 0.000000e+00, %74 ], [ %89, %77 ]
  %79 = phi float [ 0.000000e+00, %74 ], [ %86, %77 ]
  %80 = phi i64 [ 0, %74 ], [ %90, %77 ]
  %81 = add nsw i64 %80, %71
  %82 = getelementptr inbounds float, ptr %76, i64 %81
  %83 = load float, ptr %82, align 4
  %84 = tail call float @llvm.fabs.f32(float %83)
  %85 = fcmp ogt float %84, %79
  %86 = select i1 %85, float %84, float %79
  %87 = tail call float @llvm.rint.f32(float %83)
  %88 = tail call float @llvm.fabs.f32(float %87)
  %89 = fadd float %78, %88
  %90 = add nuw nsw i64 %80, 1
  %91 = icmp eq i64 %90, %52
  br i1 %91, label %92, label %77, !llvm.loop !153

92:                                               ; preds = %77, %72
  %93 = phi float [ 0.000000e+00, %72 ], [ %86, %77 ]
  %94 = phi float [ 0.000000e+00, %72 ], [ %89, %77 ]
  %95 = fmul float %94, %44
  %96 = fptosi float %95 to i32
  %97 = sitofp i32 %96 to float
  br i1 %54, label %98, label %112

98:                                               ; preds = %109, %92
  %99 = phi i64 [ %110, %109 ], [ 0, %92 ]
  %100 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %28, i64 0, i32 7, i64 %99
  %101 = load float, ptr %100, align 4
  %102 = fcmp ugt float %93, %101
  br i1 %102, label %109, label %103

103:                                              ; preds = %98
  %104 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %28, i64 0, i32 8, i64 %99
  %105 = load float, ptr %104, align 4
  %106 = fcmp olt float %105, 0.000000e+00
  %107 = fcmp ogt float %105, %97
  %108 = select i1 %106, i1 true, i1 %107
  br i1 %108, label %112, label %109

109:                                              ; preds = %103, %98
  %110 = add nuw nsw i64 %99, 1
  %111 = icmp eq i64 %110, %57
  br i1 %111, label %112, label %98, !llvm.loop !154

112:                                              ; preds = %109, %103, %92
  %113 = phi i64 [ 0, %92 ], [ %57, %109 ], [ %99, %103 ]
  %114 = getelementptr inbounds ptr, ptr %41, i64 %73
  %115 = load ptr, ptr %114, align 8
  %116 = getelementptr inbounds i64, ptr %115, i64 %65
  store i64 %113, ptr %116, align 8
  %117 = add nuw nsw i64 %73, 1
  %118 = icmp eq i64 %117, %39
  br i1 %118, label %119, label %72, !llvm.loop !155

119:                                              ; preds = %112, %64
  %120 = add nuw nsw i64 %65, 1
  %121 = icmp eq i64 %120, %46
  br i1 %121, label %122, label %64, !llvm.loop !156

122:                                              ; preds = %119, %49
  %123 = getelementptr inbounds %struct.vorbis_look_residue0, ptr %1, i64 0, i32 10
  %124 = load i64, ptr %123, align 8
  %125 = add nsw i64 %124, 1
  store i64 %125, ptr %123, align 8
  br label %126

126:                                              ; preds = %122, %25, %5
  %127 = phi ptr [ %41, %122 ], [ null, %25 ], [ null, %5 ]
  ret ptr %127
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @res1_forward(ptr nocapture noundef %0, ptr nocapture noundef %1, ptr nocapture noundef %2, ptr noundef readonly %3, ptr nocapture noundef readonly %4, i32 noundef %5, ptr nocapture noundef readonly %6) #0 {
  %8 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 5
  %9 = load i32, ptr %8, align 8
  %10 = sdiv i32 %9, 2
  %11 = icmp sgt i32 %5, 0
  br i1 %11, label %12, label %86

12:                                               ; preds = %7
  %13 = icmp eq ptr %3, null
  %14 = icmp slt i32 %9, 2
  %15 = zext i32 %5 to i64
  %16 = select i1 %13, i1 true, i1 %14
  %17 = zext i32 %10 to i64
  br label %18

18:                                               ; preds = %45, %12
  %19 = phi i64 [ 0, %12 ], [ %47, %45 ]
  %20 = phi i32 [ 0, %12 ], [ %46, %45 ]
  %21 = getelementptr inbounds i32, ptr %4, i64 %19
  %22 = load i32, ptr %21, align 4
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %45, label %24

24:                                               ; preds = %18
  br i1 %16, label %39, label %25

25:                                               ; preds = %24
  %26 = getelementptr inbounds ptr, ptr %2, i64 %19
  %27 = getelementptr inbounds ptr, ptr %3, i64 %19
  br label %28

28:                                               ; preds = %28, %25
  %29 = phi i64 [ 0, %25 ], [ %37, %28 ]
  %30 = load ptr, ptr %26, align 8
  %31 = getelementptr inbounds float, ptr %30, i64 %29
  %32 = load float, ptr %31, align 4
  %33 = load ptr, ptr %27, align 8
  %34 = getelementptr inbounds float, ptr %33, i64 %29
  %35 = load float, ptr %34, align 4
  %36 = fadd float %32, %35
  store float %36, ptr %34, align 4
  %37 = add nuw nsw i64 %29, 1
  %38 = icmp eq i64 %37, %17
  br i1 %38, label %39, label %28, !llvm.loop !157

39:                                               ; preds = %28, %24
  %40 = getelementptr inbounds ptr, ptr %2, i64 %19
  %41 = load ptr, ptr %40, align 8
  %42 = add nsw i32 %20, 1
  %43 = sext i32 %20 to i64
  %44 = getelementptr inbounds ptr, ptr %2, i64 %43
  store ptr %41, ptr %44, align 8
  br label %45

45:                                               ; preds = %39, %18
  %46 = phi i32 [ %42, %39 ], [ %20, %18 ]
  %47 = add nuw nsw i64 %19, 1
  %48 = icmp eq i64 %47, %15
  br i1 %48, label %49, label %18, !llvm.loop !158

49:                                               ; preds = %45
  %.lcssa = phi i32 [ %46, %45 ]
  %50 = icmp eq i32 %.lcssa, 0
  br i1 %50, label %86, label %51

51:                                               ; preds = %49
  tail call fastcc void @_01forward(ptr noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %.lcssa, ptr noundef %6) #56
  %52 = icmp ne ptr %3, null
  %53 = and i1 %52, %11
  br i1 %53, label %54, label %86

54:                                               ; preds = %51
  %55 = icmp sgt i32 %9, 1
  %56 = zext i32 %5 to i64
  %57 = zext i32 %10 to i64
  br label %58

58:                                               ; preds = %82, %54
  %59 = phi i64 [ 0, %54 ], [ %84, %82 ]
  %60 = phi i32 [ 0, %54 ], [ %83, %82 ]
  %61 = getelementptr inbounds i32, ptr %4, i64 %59
  %62 = load i32, ptr %61, align 4
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %82, label %64

64:                                               ; preds = %58
  br i1 %55, label %65, label %80

65:                                               ; preds = %64
  %66 = sext i32 %60 to i64
  %67 = getelementptr inbounds ptr, ptr %2, i64 %66
  %68 = getelementptr inbounds ptr, ptr %3, i64 %59
  br label %69

69:                                               ; preds = %69, %65
  %70 = phi i64 [ 0, %65 ], [ %78, %69 ]
  %71 = load ptr, ptr %67, align 8
  %72 = getelementptr inbounds float, ptr %71, i64 %70
  %73 = load float, ptr %72, align 4
  %74 = load ptr, ptr %68, align 8
  %75 = getelementptr inbounds float, ptr %74, i64 %70
  %76 = load float, ptr %75, align 4
  %77 = fsub float %76, %73
  store float %77, ptr %75, align 4
  %78 = add nuw nsw i64 %70, 1
  %79 = icmp eq i64 %78, %57
  br i1 %79, label %80, label %69, !llvm.loop !159

80:                                               ; preds = %69, %64
  %81 = add nsw i32 %60, 1
  br label %82

82:                                               ; preds = %80, %58
  %83 = phi i32 [ %81, %80 ], [ %60, %58 ]
  %84 = add nuw nsw i64 %59, 1
  %85 = icmp eq i64 %84, %56
  br i1 %85, label %86, label %58, !llvm.loop !160

86:                                               ; preds = %82, %51, %49, %7
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @res1_inverse(ptr noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef %2, ptr nocapture noundef readonly %3, i32 noundef %4) #0 {
  %6 = icmp sgt i32 %4, 0
  br i1 %6, label %7, label %28

7:                                                ; preds = %5
  %8 = zext i32 %4 to i64
  br label %9

9:                                                ; preds = %21, %7
  %10 = phi i64 [ 0, %7 ], [ %23, %21 ]
  %11 = phi i32 [ 0, %7 ], [ %22, %21 ]
  %12 = getelementptr inbounds i32, ptr %3, i64 %10
  %13 = load i32, ptr %12, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %21, label %15

15:                                               ; preds = %9
  %16 = getelementptr inbounds ptr, ptr %2, i64 %10
  %17 = load ptr, ptr %16, align 8
  %18 = add nsw i32 %11, 1
  %19 = sext i32 %11 to i64
  %20 = getelementptr inbounds ptr, ptr %2, i64 %19
  store ptr %17, ptr %20, align 8
  br label %21

21:                                               ; preds = %15, %9
  %22 = phi i32 [ %18, %15 ], [ %11, %9 ]
  %23 = add nuw nsw i64 %10, 1
  %24 = icmp eq i64 %23, %8
  br i1 %24, label %25, label %9, !llvm.loop !161

25:                                               ; preds = %21
  %.lcssa = phi i32 [ %22, %21 ]
  %26 = icmp eq i32 %.lcssa, 0
  br i1 %26, label %28, label %27

27:                                               ; preds = %25
  tail call fastcc void @_01inverse(ptr noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %.lcssa, ptr noundef nonnull @vorbis_book_decodev_add) #56
  br label %28

28:                                               ; preds = %27, %25, %5
  ret i32 0
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal i64 @vorbis_book_decodev_add(ptr nocapture noundef readonly %0, ptr nocapture noundef %1, ptr nocapture noundef %2, i32 noundef %3) #21 {
  %5 = load i64, ptr %0, align 8
  %6 = icmp sgt i64 %5, 8
  %7 = icmp sgt i32 %3, 0
  br i1 %6, label %11, label %8

8:                                                ; preds = %4
  br i1 %7, label %9, label %152

9:                                                ; preds = %8
  %10 = getelementptr inbounds %struct.codebook, ptr %0, i64 0, i32 4
  br label %46

11:                                               ; preds = %4
  br i1 %7, label %12, label %152

12:                                               ; preds = %11
  %13 = getelementptr inbounds %struct.codebook, ptr %0, i64 0, i32 4
  br label %19

14:                                               ; preds = %34
  %.lcssa = phi i64 [ %40, %34 ]
  %15 = trunc i64 %.lcssa to i32
  br label %16

16:                                               ; preds = %24, %14
  %17 = phi i32 [ %20, %24 ], [ %15, %14 ]
  %18 = icmp slt i32 %17, %3
  br i1 %18, label %19, label %152, !llvm.loop !162

19:                                               ; preds = %16, %12
  %20 = phi i32 [ 0, %12 ], [ %17, %16 ]
  %21 = tail call fastcc i64 @decode_packed_entry_number(ptr noundef nonnull %0, ptr noundef %2) #56
  %22 = and i64 %21, 4294967295
  %23 = icmp eq i64 %22, 4294967295
  br i1 %23, label %152, label %24

24:                                               ; preds = %19
  %25 = load ptr, ptr %13, align 8
  %26 = shl i64 %21, 32
  %27 = ashr exact i64 %26, 32
  %28 = load i64, ptr %0, align 8
  %29 = mul nsw i64 %28, %27
  %30 = getelementptr inbounds float, ptr %25, i64 %29
  %31 = icmp sgt i64 %28, 0
  br i1 %31, label %32, label %16

32:                                               ; preds = %24
  %33 = sext i32 %20 to i64
  br label %34

34:                                               ; preds = %34, %32
  %35 = phi i64 [ %33, %32 ], [ %40, %34 ]
  %36 = phi i64 [ 0, %32 ], [ %37, %34 ]
  %37 = add nuw nsw i64 %36, 1
  %38 = getelementptr inbounds float, ptr %30, i64 %36
  %39 = load float, ptr %38, align 4
  %40 = add i64 %35, 1
  %41 = getelementptr inbounds float, ptr %1, i64 %35
  %42 = load float, ptr %41, align 4
  %43 = fadd float %39, %42
  store float %43, ptr %41, align 4
  %44 = load i64, ptr %0, align 8
  %45 = icmp sgt i64 %44, %37
  br i1 %45, label %34, label %14, !llvm.loop !163

46:                                               ; preds = %149, %9
  %47 = phi i32 [ 0, %9 ], [ %150, %149 ]
  %48 = tail call fastcc i64 @decode_packed_entry_number(ptr noundef nonnull %0, ptr noundef %2) #56
  %49 = and i64 %48, 4294967295
  %50 = icmp eq i64 %49, 4294967295
  br i1 %50, label %152, label %51

51:                                               ; preds = %46
  %52 = load ptr, ptr %10, align 8
  %53 = shl i64 %48, 32
  %54 = ashr exact i64 %53, 32
  %55 = load i64, ptr %0, align 8
  %56 = mul nsw i64 %55, %54
  %57 = getelementptr inbounds float, ptr %52, i64 %56
  %58 = trunc i64 %55 to i32
  switch i32 %58, label %149 [
    i32 8, label %59
    i32 7, label %66
    i32 6, label %78
    i32 5, label %90
    i32 4, label %102
    i32 3, label %114
    i32 2, label %126
    i32 1, label %138
  ]

59:                                               ; preds = %51
  %60 = load float, ptr %57, align 4
  %61 = add nsw i32 %47, 1
  %62 = sext i32 %47 to i64
  %63 = getelementptr inbounds float, ptr %1, i64 %62
  %64 = load float, ptr %63, align 4
  %65 = fadd float %60, %64
  store float %65, ptr %63, align 4
  br label %66

66:                                               ; preds = %59, %51
  %67 = phi i32 [ %47, %51 ], [ %61, %59 ]
  %68 = phi i32 [ 0, %51 ], [ 1, %59 ]
  %69 = add nuw nsw i32 %68, 1
  %70 = zext i32 %68 to i64
  %71 = getelementptr inbounds float, ptr %57, i64 %70
  %72 = load float, ptr %71, align 4
  %73 = add nsw i32 %67, 1
  %74 = sext i32 %67 to i64
  %75 = getelementptr inbounds float, ptr %1, i64 %74
  %76 = load float, ptr %75, align 4
  %77 = fadd float %72, %76
  store float %77, ptr %75, align 4
  br label %78

78:                                               ; preds = %66, %51
  %79 = phi i32 [ %47, %51 ], [ %73, %66 ]
  %80 = phi i32 [ 0, %51 ], [ %69, %66 ]
  %81 = add nuw nsw i32 %80, 1
  %82 = zext i32 %80 to i64
  %83 = getelementptr inbounds float, ptr %57, i64 %82
  %84 = load float, ptr %83, align 4
  %85 = add nsw i32 %79, 1
  %86 = sext i32 %79 to i64
  %87 = getelementptr inbounds float, ptr %1, i64 %86
  %88 = load float, ptr %87, align 4
  %89 = fadd float %84, %88
  store float %89, ptr %87, align 4
  br label %90

90:                                               ; preds = %78, %51
  %91 = phi i32 [ %47, %51 ], [ %85, %78 ]
  %92 = phi i32 [ 0, %51 ], [ %81, %78 ]
  %93 = add nuw nsw i32 %92, 1
  %94 = zext i32 %92 to i64
  %95 = getelementptr inbounds float, ptr %57, i64 %94
  %96 = load float, ptr %95, align 4
  %97 = add nsw i32 %91, 1
  %98 = sext i32 %91 to i64
  %99 = getelementptr inbounds float, ptr %1, i64 %98
  %100 = load float, ptr %99, align 4
  %101 = fadd float %96, %100
  store float %101, ptr %99, align 4
  br label %102

102:                                              ; preds = %90, %51
  %103 = phi i32 [ %47, %51 ], [ %97, %90 ]
  %104 = phi i32 [ 0, %51 ], [ %93, %90 ]
  %105 = add nuw nsw i32 %104, 1
  %106 = zext i32 %104 to i64
  %107 = getelementptr inbounds float, ptr %57, i64 %106
  %108 = load float, ptr %107, align 4
  %109 = add nsw i32 %103, 1
  %110 = sext i32 %103 to i64
  %111 = getelementptr inbounds float, ptr %1, i64 %110
  %112 = load float, ptr %111, align 4
  %113 = fadd float %108, %112
  store float %113, ptr %111, align 4
  br label %114

114:                                              ; preds = %102, %51
  %115 = phi i32 [ %47, %51 ], [ %109, %102 ]
  %116 = phi i32 [ 0, %51 ], [ %105, %102 ]
  %117 = add nuw nsw i32 %116, 1
  %118 = zext i32 %116 to i64
  %119 = getelementptr inbounds float, ptr %57, i64 %118
  %120 = load float, ptr %119, align 4
  %121 = add nsw i32 %115, 1
  %122 = sext i32 %115 to i64
  %123 = getelementptr inbounds float, ptr %1, i64 %122
  %124 = load float, ptr %123, align 4
  %125 = fadd float %120, %124
  store float %125, ptr %123, align 4
  br label %126

126:                                              ; preds = %114, %51
  %127 = phi i32 [ %47, %51 ], [ %121, %114 ]
  %128 = phi i32 [ 0, %51 ], [ %117, %114 ]
  %129 = add nuw nsw i32 %128, 1
  %130 = zext i32 %128 to i64
  %131 = getelementptr inbounds float, ptr %57, i64 %130
  %132 = load float, ptr %131, align 4
  %133 = add nsw i32 %127, 1
  %134 = sext i32 %127 to i64
  %135 = getelementptr inbounds float, ptr %1, i64 %134
  %136 = load float, ptr %135, align 4
  %137 = fadd float %132, %136
  store float %137, ptr %135, align 4
  br label %138

138:                                              ; preds = %126, %51
  %139 = phi i32 [ %47, %51 ], [ %133, %126 ]
  %140 = phi i32 [ 0, %51 ], [ %129, %126 ]
  %141 = zext i32 %140 to i64
  %142 = getelementptr inbounds float, ptr %57, i64 %141
  %143 = load float, ptr %142, align 4
  %144 = add nsw i32 %139, 1
  %145 = sext i32 %139 to i64
  %146 = getelementptr inbounds float, ptr %1, i64 %145
  %147 = load float, ptr %146, align 4
  %148 = fadd float %143, %147
  store float %148, ptr %146, align 4
  br label %149

149:                                              ; preds = %138, %51
  %150 = phi i32 [ %47, %51 ], [ %144, %138 ]
  %151 = icmp slt i32 %150, %3
  br i1 %151, label %46, label %152, !llvm.loop !164

152:                                              ; preds = %149, %46, %19, %16, %11, %8
  %153 = phi i64 [ 0, %11 ], [ 0, %8 ], [ -1, %19 ], [ 0, %16 ], [ -1, %46 ], [ 0, %149 ]
  ret i64 %153
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @_01inverse(ptr noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, i32 noundef %3, ptr nocapture noundef readonly %4) unnamed_addr #0 {
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %6, i64 0, i32 2
  %8 = load i32, ptr %7, align 8
  %9 = getelementptr inbounds %struct.vorbis_look_residue0, ptr %1, i64 0, i32 4
  %10 = load ptr, ptr %9, align 8
  %11 = load i64, ptr %10, align 8
  %12 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %6, i64 0, i32 1
  %13 = load i64, ptr %12, align 8
  %14 = load i64, ptr %6, align 8
  %15 = sub nsw i64 %13, %14
  %16 = trunc i64 %15 to i32
  %17 = sdiv i32 %16, %8
  %18 = sext i32 %3 to i64
  %19 = shl nsw i64 %18, 3
  %20 = alloca i8, i64 %19, align 16
  %21 = icmp sgt i32 %3, 0
  br i1 %21, label %22, label %29

22:                                               ; preds = %5
  %23 = trunc i64 %11 to i32
  %24 = add i32 %23, -1
  %25 = add i32 %24, %17
  %26 = sdiv i32 %25, %23
  %27 = sext i32 %26 to i64
  %28 = shl nsw i64 %27, 3
  br label %44

29:                                               ; preds = %44, %5
  %30 = getelementptr inbounds %struct.vorbis_look_residue0, ptr %1, i64 0, i32 2
  %31 = load i32, ptr %30, align 4
  %32 = icmp sgt i32 %31, 0
  br i1 %32, label %33, label %145

33:                                               ; preds = %29
  %34 = sext i32 %17 to i64
  %35 = icmp sgt i32 %17, 0
  %36 = icmp slt i32 %3, 1
  %37 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 1
  %38 = getelementptr inbounds %struct.vorbis_look_residue0, ptr %1, i64 0, i32 7
  %39 = shl i64 %11, 32
  %40 = ashr exact i64 %39, 32
  %41 = icmp sgt i64 %39, 0
  %42 = sext i32 %8 to i64
  %43 = getelementptr inbounds %struct.vorbis_look_residue0, ptr %1, i64 0, i32 5
  br label %50

44:                                               ; preds = %44, %22
  %45 = phi i64 [ 0, %22 ], [ %48, %44 ]
  %46 = tail call ptr @_vorbis_block_alloc(ptr noundef %0, i64 noundef %28) #56
  %47 = getelementptr inbounds ptr, ptr %20, i64 %45
  store ptr %46, ptr %47, align 8
  %48 = add nuw nsw i64 %45, 1
  %49 = icmp eq i64 %48, %18
  br i1 %49, label %29, label %44, !llvm.loop !165

50:                                               ; preds = %140, %33
  %51 = phi i32 [ %31, %33 ], [ %141, %140 ]
  %52 = phi i64 [ 0, %33 ], [ %142, %140 ]
  br i1 %35, label %53, label %140

53:                                               ; preds = %50
  %54 = icmp ne i64 %52, 0
  %55 = trunc i64 %52 to i32
  %56 = shl nuw i32 1, %55
  %57 = or i1 %54, %36
  br label %58

58:                                               ; preds = %134, %53
  %59 = phi i64 [ 0, %53 ], [ %135, %134 ]
  %60 = phi i64 [ 0, %53 ], [ %136, %134 ]
  br i1 %57, label %89, label %64

61:                                               ; preds = %79
  %62 = add nuw nsw i64 %65, 1
  %63 = icmp eq i64 %62, %18
  br i1 %63, label %89, label %64, !llvm.loop !166

64:                                               ; preds = %61, %58
  %65 = phi i64 [ %62, %61 ], [ 0, %58 ]
  %66 = load ptr, ptr %9, align 8
  %67 = tail call fastcc i64 @decode_packed_entry_number(ptr noundef %66, ptr noundef nonnull %37) #56
  %68 = icmp sgt i64 %67, -1
  br i1 %68, label %69, label %75

69:                                               ; preds = %64
  %70 = getelementptr inbounds %struct.codebook, ptr %66, i64 0, i32 6
  %71 = load ptr, ptr %70, align 8
  %72 = getelementptr inbounds i32, ptr %71, i64 %67
  %73 = load i32, ptr %72, align 4
  %74 = zext i32 %73 to i64
  br label %75

75:                                               ; preds = %69, %64
  %76 = phi i64 [ %74, %69 ], [ %67, %64 ]
  %77 = and i64 %76, 4294967295
  %78 = icmp eq i64 %77, 4294967295
  br i1 %78, label %145, label %79

79:                                               ; preds = %75
  %80 = load ptr, ptr %38, align 8
  %81 = shl i64 %76, 32
  %82 = ashr exact i64 %81, 32
  %83 = getelementptr inbounds ptr, ptr %80, i64 %82
  %84 = load ptr, ptr %83, align 8
  %85 = getelementptr inbounds ptr, ptr %20, i64 %65
  %86 = load ptr, ptr %85, align 8
  %87 = getelementptr inbounds ptr, ptr %86, i64 %60
  store ptr %84, ptr %87, align 8
  %88 = icmp eq ptr %84, null
  br i1 %88, label %145, label %61

89:                                               ; preds = %61, %58
  %90 = icmp slt i64 %59, %34
  %91 = select i1 %41, i1 %90, i1 false
  br i1 %91, label %92, label %134

92:                                               ; preds = %128, %89
  %93 = phi i64 [ %130, %128 ], [ %59, %89 ]
  %94 = phi i64 [ %129, %128 ], [ 0, %89 ]
  br i1 %21, label %95, label %128

95:                                               ; preds = %92
  %96 = mul nsw i64 %93, %42
  br label %97

97:                                               ; preds = %125, %95
  %98 = phi i64 [ 0, %95 ], [ %126, %125 ]
  %99 = load i64, ptr %6, align 8
  %100 = add nsw i64 %99, %96
  %101 = getelementptr inbounds ptr, ptr %20, i64 %98
  %102 = load ptr, ptr %101, align 8
  %103 = getelementptr inbounds ptr, ptr %102, i64 %60
  %104 = load ptr, ptr %103, align 8
  %105 = getelementptr inbounds i32, ptr %104, i64 %94
  %106 = load i32, ptr %105, align 4
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds %struct.vorbis_info_residue0, ptr %6, i64 0, i32 5, i64 %107
  %109 = load i32, ptr %108, align 4
  %110 = and i32 %109, %56
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %125, label %112

112:                                              ; preds = %97
  %113 = load ptr, ptr %43, align 8
  %114 = getelementptr inbounds ptr, ptr %113, i64 %107
  %115 = load ptr, ptr %114, align 8
  %116 = getelementptr inbounds ptr, ptr %115, i64 %52
  %117 = load ptr, ptr %116, align 8
  %118 = icmp eq ptr %117, null
  br i1 %118, label %125, label %119

119:                                              ; preds = %112
  %120 = getelementptr inbounds ptr, ptr %2, i64 %98
  %121 = load ptr, ptr %120, align 8
  %122 = getelementptr inbounds float, ptr %121, i64 %100
  %123 = tail call i64 %4(ptr noundef nonnull %117, ptr noundef %122, ptr noundef nonnull %37, i32 noundef %8) #59, !callees !167
  %124 = icmp eq i64 %123, -1
  br i1 %124, label %145, label %125

125:                                              ; preds = %119, %112, %97
  %126 = add nuw nsw i64 %98, 1
  %127 = icmp eq i64 %126, %18
  br i1 %127, label %128, label %97, !llvm.loop !168

128:                                              ; preds = %125, %92
  %129 = add nuw nsw i64 %94, 1
  %130 = add nsw i64 %93, 1
  %131 = icmp slt i64 %129, %40
  %132 = icmp slt i64 %130, %34
  %133 = select i1 %131, i1 %132, i1 false
  br i1 %133, label %92, label %134, !llvm.loop !169

134:                                              ; preds = %128, %89
  %135 = phi i64 [ %59, %89 ], [ %130, %128 ]
  %136 = add nuw nsw i64 %60, 1
  %137 = icmp slt i64 %135, %34
  br i1 %137, label %58, label %138, !llvm.loop !170

138:                                              ; preds = %134
  %139 = load i32, ptr %30, align 4
  br label %140

140:                                              ; preds = %138, %50
  %141 = phi i32 [ %139, %138 ], [ %51, %50 ]
  %142 = add nuw nsw i64 %52, 1
  %143 = sext i32 %141 to i64
  %144 = icmp slt i64 %142, %143
  br i1 %144, label %50, label %145, !llvm.loop !171

145:                                              ; preds = %140, %119, %79, %75, %29
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal i64 @vorbis_book_decodevs_add(ptr nocapture noundef readonly %0, ptr nocapture noundef %1, ptr nocapture noundef %2, i32 noundef %3) #21 {
  %5 = sext i32 %3 to i64
  %6 = load i64, ptr %0, align 8
  %7 = sdiv i64 %5, %6
  %8 = trunc i64 %7 to i32
  %9 = shl i64 %7, 32
  %10 = ashr exact i64 %9, 29
  %11 = alloca i8, i64 %10, align 16
  %12 = icmp sgt i32 %8, 0
  br i1 %12, label %13, label %16

13:                                               ; preds = %4
  %14 = getelementptr inbounds %struct.codebook, ptr %0, i64 0, i32 4
  %15 = and i64 %7, 4294967295
  br label %23

16:                                               ; preds = %27, %4
  %17 = phi i64 [ %6, %4 ], [ %29, %27 ]
  %18 = icmp sgt i64 %17, 0
  br i1 %18, label %19, label %58

19:                                               ; preds = %16
  %20 = shl i64 %7, 32
  %21 = ashr exact i64 %20, 32
  %22 = and i64 %7, 4294967295
  br label %35

23:                                               ; preds = %27, %13
  %24 = phi i64 [ 0, %13 ], [ %33, %27 ]
  %25 = tail call fastcc i64 @decode_packed_entry_number(ptr noundef nonnull %0, ptr noundef %2) #56
  %26 = icmp eq i64 %25, -1
  br i1 %26, label %58, label %27

27:                                               ; preds = %23
  %28 = load ptr, ptr %14, align 8
  %29 = load i64, ptr %0, align 8
  %30 = mul nsw i64 %29, %25
  %31 = getelementptr inbounds float, ptr %28, i64 %30
  %32 = getelementptr inbounds ptr, ptr %11, i64 %24
  store ptr %31, ptr %32, align 8
  %33 = add nuw nsw i64 %24, 1
  %34 = icmp eq i64 %33, %15
  br i1 %34, label %16, label %23, !llvm.loop !172

35:                                               ; preds = %53, %19
  %36 = phi i64 [ %17, %19 ], [ %54, %53 ]
  %37 = phi i64 [ 0, %19 ], [ %55, %53 ]
  %38 = phi i64 [ 0, %19 ], [ %56, %53 ]
  br i1 %12, label %39, label %53

39:                                               ; preds = %39, %35
  %40 = phi i64 [ %49, %39 ], [ 0, %35 ]
  %41 = getelementptr inbounds ptr, ptr %11, i64 %40
  %42 = load ptr, ptr %41, align 8
  %43 = getelementptr inbounds float, ptr %42, i64 %37
  %44 = load float, ptr %43, align 4
  %45 = add nsw i64 %40, %38
  %46 = getelementptr inbounds float, ptr %1, i64 %45
  %47 = load float, ptr %46, align 4
  %48 = fadd float %44, %47
  store float %48, ptr %46, align 4
  %49 = add nuw nsw i64 %40, 1
  %50 = icmp eq i64 %49, %22
  br i1 %50, label %51, label %39, !llvm.loop !173

51:                                               ; preds = %39
  %52 = load i64, ptr %0, align 8
  br label %53

53:                                               ; preds = %51, %35
  %54 = phi i64 [ %52, %51 ], [ %36, %35 ]
  %55 = add nuw nsw i64 %37, 1
  %56 = add i64 %38, %21
  %57 = icmp sgt i64 %54, %55
  br i1 %57, label %35, label %58, !llvm.loop !174

58:                                               ; preds = %53, %23, %16
  %59 = phi i64 [ 0, %16 ], [ 0, %53 ], [ -1, %23 ]
  ret i64 %59
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.rint.f32(float) #27

; Function Attrs: nounwind optsize uwtable
define internal i32 @res0_inverse(ptr noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef %2, ptr nocapture noundef readonly %3, i32 noundef %4) #0 {
  %6 = icmp sgt i32 %4, 0
  br i1 %6, label %7, label %28

7:                                                ; preds = %5
  %8 = zext i32 %4 to i64
  br label %9

9:                                                ; preds = %21, %7
  %10 = phi i64 [ 0, %7 ], [ %23, %21 ]
  %11 = phi i32 [ 0, %7 ], [ %22, %21 ]
  %12 = getelementptr inbounds i32, ptr %3, i64 %10
  %13 = load i32, ptr %12, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %21, label %15

15:                                               ; preds = %9
  %16 = getelementptr inbounds ptr, ptr %2, i64 %10
  %17 = load ptr, ptr %16, align 8
  %18 = add nsw i32 %11, 1
  %19 = sext i32 %11 to i64
  %20 = getelementptr inbounds ptr, ptr %2, i64 %19
  store ptr %17, ptr %20, align 8
  br label %21

21:                                               ; preds = %15, %9
  %22 = phi i32 [ %18, %15 ], [ %11, %9 ]
  %23 = add nuw nsw i64 %10, 1
  %24 = icmp eq i64 %23, %8
  br i1 %24, label %25, label %9, !llvm.loop !175

25:                                               ; preds = %21
  %.lcssa = phi i32 [ %22, %21 ]
  %26 = icmp eq i32 %.lcssa, 0
  br i1 %26, label %28, label %27

27:                                               ; preds = %25
  tail call fastcc void @_01inverse(ptr noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %.lcssa, ptr noundef nonnull @vorbis_book_decodevs_add) #56
  br label %28

28:                                               ; preds = %27, %25, %5
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal void @floor1_pack(ptr nocapture noundef readonly %0, ptr nocapture noundef %1) #0 {
  %3 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %0, i64 0, i32 7, i64 1
  %4 = load i32, ptr %3, align 4
  %5 = load i32, ptr %0, align 4
  %6 = sext i32 %5 to i64
  tail call void @oggpack_write(ptr noundef %1, i64 noundef %6, i32 noundef 5) #56
  %7 = load i32, ptr %0, align 4
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %14, label %58

9:                                                ; preds = %14
  %.lcssa1 = phi i32 [ %21, %14 ]
  %10 = icmp slt i32 %.lcssa1, 0
  br i1 %10, label %58, label %11

11:                                               ; preds = %9
  %12 = add nuw i32 %.lcssa1, 1
  %13 = zext i32 %12 to i64
  br label %26

14:                                               ; preds = %14, %2
  %15 = phi i64 [ %22, %14 ], [ 0, %2 ]
  %16 = phi i32 [ %21, %14 ], [ -1, %2 ]
  %17 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %0, i64 0, i32 1, i64 %15
  %18 = load i32, ptr %17, align 4
  %19 = sext i32 %18 to i64
  tail call void @oggpack_write(ptr noundef %1, i64 noundef %19, i32 noundef 4) #56
  %20 = load i32, ptr %17, align 4
  %21 = tail call i32 @llvm.smax.i32(i32 %16, i32 %20)
  %22 = add nuw nsw i64 %15, 1
  %23 = load i32, ptr %0, align 4
  %24 = sext i32 %23 to i64
  %25 = icmp slt i64 %22, %24
  br i1 %25, label %14, label %9, !llvm.loop !176

26:                                               ; preds = %55, %11
  %27 = phi i64 [ 0, %11 ], [ %56, %55 ]
  %28 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %0, i64 0, i32 2, i64 %27
  %29 = load i32, ptr %28, align 4
  %30 = add nsw i32 %29, -1
  %31 = sext i32 %30 to i64
  tail call void @oggpack_write(ptr noundef %1, i64 noundef %31, i32 noundef 3) #56
  %32 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %0, i64 0, i32 3, i64 %27
  %33 = load i32, ptr %32, align 4
  %34 = sext i32 %33 to i64
  tail call void @oggpack_write(ptr noundef %1, i64 noundef %34, i32 noundef 2) #56
  %35 = load i32, ptr %32, align 4
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %43, label %37

37:                                               ; preds = %26
  %38 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %0, i64 0, i32 4, i64 %27
  %39 = load i32, ptr %38, align 4
  %40 = sext i32 %39 to i64
  tail call void @oggpack_write(ptr noundef %1, i64 noundef %40, i32 noundef 8) #56
  %41 = load i32, ptr %32, align 4
  %42 = icmp eq i32 %41, 31
  br i1 %42, label %55, label %43

43:                                               ; preds = %37, %26
  br label %44

44:                                               ; preds = %44, %43
  %45 = phi i64 [ %50, %44 ], [ 0, %43 ]
  %46 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %0, i64 0, i32 5, i64 %27, i64 %45
  %47 = load i32, ptr %46, align 4
  %48 = add nsw i32 %47, 1
  %49 = sext i32 %48 to i64
  tail call void @oggpack_write(ptr noundef %1, i64 noundef %49, i32 noundef 8) #56
  %50 = add nuw nsw i64 %45, 1
  %51 = load i32, ptr %32, align 4
  %52 = shl nuw i32 1, %51
  %53 = sext i32 %52 to i64
  %54 = icmp slt i64 %50, %53
  br i1 %54, label %44, label %55, !llvm.loop !177

55:                                               ; preds = %44, %37
  %56 = add nuw nsw i64 %27, 1
  %57 = icmp eq i64 %56, %13
  br i1 %57, label %58, label %26, !llvm.loop !178

58:                                               ; preds = %55, %9, %2
  %59 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %0, i64 0, i32 6
  %60 = load i32, ptr %59, align 4
  %61 = add nsw i32 %60, -1
  %62 = sext i32 %61 to i64
  tail call void @oggpack_write(ptr noundef %1, i64 noundef %62, i32 noundef 2) #56
  %63 = icmp ult i32 %4, 2
  br i1 %63, label %64, label %65

64:                                               ; preds = %58
  tail call void @oggpack_write(ptr noundef %1, i64 noundef 0, i32 noundef 4) #56
  br label %81

65:                                               ; preds = %58
  %66 = add i32 %4, -1
  br label %67

67:                                               ; preds = %67, %65
  %68 = phi i32 [ %70, %67 ], [ 0, %65 ]
  %69 = phi i32 [ %71, %67 ], [ %66, %65 ]
  %70 = add nuw nsw i32 %68, 1
  %71 = lshr i32 %69, 1
  %72 = icmp ult i32 %69, 2
  br i1 %72, label %73, label %67, !llvm.loop !65

73:                                               ; preds = %67
  %.lcssa = phi i32 [ %70, %67 ]
  %74 = zext i32 %.lcssa to i64
  tail call void @oggpack_write(ptr noundef %1, i64 noundef %74, i32 noundef 4) #56
  br label %75

75:                                               ; preds = %75, %73
  %76 = phi i32 [ %78, %75 ], [ 0, %73 ]
  %77 = phi i32 [ %79, %75 ], [ %66, %73 ]
  %78 = add nuw nsw i32 %76, 1
  %79 = lshr i32 %77, 1
  %80 = icmp ult i32 %77, 2
  br i1 %80, label %81, label %75, !llvm.loop !65

81:                                               ; preds = %75, %64
  %82 = phi i32 [ 0, %64 ], [ %78, %75 ]
  %83 = load i32, ptr %0, align 4
  %84 = icmp sgt i32 %83, 0
  br i1 %84, label %85, label %116

85:                                               ; preds = %110, %81
  %86 = phi i32 [ %111, %110 ], [ %83, %81 ]
  %87 = phi i64 [ %113, %110 ], [ 0, %81 ]
  %88 = phi i32 [ %112, %110 ], [ 0, %81 ]
  %89 = phi i32 [ %95, %110 ], [ 0, %81 ]
  %90 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %0, i64 0, i32 1, i64 %87
  %91 = load i32, ptr %90, align 4
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %0, i64 0, i32 2, i64 %92
  %94 = load i32, ptr %93, align 4
  %95 = add nsw i32 %94, %89
  %96 = icmp slt i32 %88, %95
  br i1 %96, label %97, label %110

97:                                               ; preds = %85
  %98 = sext i32 %88 to i64
  %99 = sext i32 %95 to i64
  br label %100

100:                                              ; preds = %100, %97
  %101 = phi i64 [ %98, %97 ], [ %106, %100 ]
  %102 = add nsw i64 %101, 2
  %103 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %0, i64 0, i32 7, i64 %102
  %104 = load i32, ptr %103, align 4
  %105 = sext i32 %104 to i64
  tail call void @oggpack_write(ptr noundef %1, i64 noundef %105, i32 noundef %82) #56
  %106 = add nsw i64 %101, 1
  %107 = icmp eq i64 %106, %99
  br i1 %107, label %108, label %100, !llvm.loop !179

108:                                              ; preds = %100
  %109 = load i32, ptr %0, align 4
  br label %110

110:                                              ; preds = %108, %85
  %111 = phi i32 [ %86, %85 ], [ %109, %108 ]
  %112 = phi i32 [ %88, %85 ], [ %95, %108 ]
  %113 = add nuw nsw i64 %87, 1
  %114 = sext i32 %111 to i64
  %115 = icmp slt i64 %113, %114
  br i1 %115, label %85, label %116, !llvm.loop !180

116:                                              ; preds = %110, %81
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal noalias ptr @floor1_unpack(ptr nocapture noundef readonly %0, ptr nocapture noundef %1) #0 {
  %3 = getelementptr inbounds %struct.vorbis_info, ptr %0, i64 0, i32 7
  %4 = load ptr, ptr %3, align 8
  %5 = tail call noalias dereferenceable_or_null(1120) ptr @calloc(i64 noundef 1, i64 noundef 1120) #65
  %6 = tail call i64 @oggpack_read(ptr noundef %1, i32 noundef 5) #56
  %7 = trunc i64 %6 to i32
  store i32 %7, ptr %5, align 4
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %74

9:                                                ; preds = %2
  %10 = and i64 %6, 4294967295
  br label %17

11:                                               ; preds = %17
  %.lcssa = phi i32 [ %23, %17 ]
  %12 = icmp slt i32 %.lcssa, 0
  br i1 %12, label %74, label %13

13:                                               ; preds = %11
  %14 = getelementptr inbounds %struct.codec_setup_info, ptr %4, i64 0, i32 5
  %15 = add nuw i32 %.lcssa, 1
  %16 = zext i32 %15 to i64
  br label %26

17:                                               ; preds = %17, %9
  %18 = phi i64 [ 0, %9 ], [ %24, %17 ]
  %19 = phi i32 [ -1, %9 ], [ %23, %17 ]
  %20 = tail call i64 @oggpack_read(ptr noundef %1, i32 noundef 4) #56
  %21 = trunc i64 %20 to i32
  %22 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %5, i64 0, i32 1, i64 %18
  store i32 %21, ptr %22, align 4
  %23 = tail call i32 @llvm.smax.i32(i32 %19, i32 %21)
  %24 = add nuw nsw i64 %18, 1
  %25 = icmp eq i64 %24, %10
  br i1 %25, label %11, label %17, !llvm.loop !181

26:                                               ; preds = %69, %13
  %27 = phi i64 [ 0, %13 ], [ %70, %69 ]
  %28 = tail call i64 @oggpack_read(ptr noundef %1, i32 noundef 3) #56
  %29 = trunc i64 %28 to i32
  %30 = add i32 %29, 1
  %31 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %5, i64 0, i32 2, i64 %27
  store i32 %30, ptr %31, align 4
  %32 = tail call i64 @oggpack_read(ptr noundef %1, i32 noundef 2) #56
  %33 = trunc i64 %32 to i32
  %34 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %5, i64 0, i32 3, i64 %27
  store i32 %33, ptr %34, align 4
  %35 = icmp slt i32 %33, 0
  br i1 %35, label %122, label %36

36:                                               ; preds = %26
  %37 = icmp eq i32 %33, 0
  br i1 %37, label %38, label %41

38:                                               ; preds = %36
  %39 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %5, i64 0, i32 4, i64 %27
  %40 = load i32, ptr %39, align 4
  br label %45

41:                                               ; preds = %36
  %42 = tail call i64 @oggpack_read(ptr noundef %1, i32 noundef 8) #56
  %43 = trunc i64 %42 to i32
  %44 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %5, i64 0, i32 4, i64 %27
  store i32 %43, ptr %44, align 4
  br label %45

45:                                               ; preds = %41, %38
  %46 = phi i32 [ %40, %38 ], [ %43, %41 ]
  %47 = icmp slt i32 %46, 0
  br i1 %47, label %122, label %48

48:                                               ; preds = %45
  %49 = load i32, ptr %14, align 8
  %50 = icmp slt i32 %46, %49
  br i1 %50, label %51, label %122

51:                                               ; preds = %48
  %52 = icmp eq i32 %33, 31
  br i1 %52, label %69, label %59

53:                                               ; preds = %66
  %54 = add nuw nsw i64 %60, 1
  %55 = load i32, ptr %34, align 4
  %56 = shl nuw i32 1, %55
  %57 = sext i32 %56 to i64
  %58 = icmp slt i64 %54, %57
  br i1 %58, label %59, label %69, !llvm.loop !182

59:                                               ; preds = %53, %51
  %60 = phi i64 [ %54, %53 ], [ 0, %51 ]
  %61 = tail call i64 @oggpack_read(ptr noundef %1, i32 noundef 8) #56
  %62 = trunc i64 %61 to i32
  %63 = add i32 %62, -1
  %64 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %5, i64 0, i32 5, i64 %27, i64 %60
  store i32 %63, ptr %64, align 4
  %65 = icmp ugt i32 %62, -2147483648
  br i1 %65, label %122, label %66

66:                                               ; preds = %59
  %67 = load i32, ptr %14, align 8
  %68 = icmp slt i32 %63, %67
  br i1 %68, label %53, label %122

69:                                               ; preds = %53, %51
  %70 = add nuw nsw i64 %27, 1
  %71 = icmp eq i64 %70, %16
  br i1 %71, label %72, label %26, !llvm.loop !183

72:                                               ; preds = %69
  %73 = load i32, ptr %5, align 4
  br label %74

74:                                               ; preds = %72, %11, %2
  %75 = phi i32 [ %73, %72 ], [ %7, %11 ], [ %7, %2 ]
  %76 = tail call i64 @oggpack_read(ptr noundef %1, i32 noundef 2) #56
  %77 = trunc i64 %76 to i32
  %78 = add i32 %77, 1
  %79 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %5, i64 0, i32 6
  store i32 %78, ptr %79, align 4
  %80 = tail call i64 @oggpack_read(ptr noundef %1, i32 noundef 4) #56
  %81 = trunc i64 %80 to i32
  %82 = icmp sgt i32 %75, 0
  %83 = shl nuw i32 1, %81
  br i1 %82, label %84, label %119

84:                                               ; preds = %113, %74
  %85 = phi i32 [ %114, %113 ], [ %75, %74 ]
  %86 = phi i64 [ %116, %113 ], [ 0, %74 ]
  %87 = phi i32 [ %115, %113 ], [ 0, %74 ]
  %88 = phi i32 [ %94, %113 ], [ 0, %74 ]
  %89 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %5, i64 0, i32 1, i64 %86
  %90 = load i32, ptr %89, align 4
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %5, i64 0, i32 2, i64 %91
  %93 = load i32, ptr %92, align 4
  %94 = add nsw i32 %93, %88
  %95 = icmp slt i32 %87, %94
  br i1 %95, label %96, label %113

96:                                               ; preds = %84
  %97 = sext i32 %87 to i64
  br label %98

98:                                               ; preds = %107, %96
  %99 = phi i64 [ %97, %96 ], [ %108, %107 ]
  %100 = tail call i64 @oggpack_read(ptr noundef %1, i32 noundef %81) #56
  %101 = trunc i64 %100 to i32
  %102 = add nsw i64 %99, 2
  %103 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %5, i64 0, i32 7, i64 %102
  store i32 %101, ptr %103, align 4
  %104 = icmp sgt i32 %101, -1
  %105 = icmp sgt i32 %83, %101
  %106 = select i1 %104, i1 %105, i1 false
  br i1 %106, label %107, label %122

107:                                              ; preds = %98
  %108 = add nsw i64 %99, 1
  %109 = trunc i64 %108 to i32
  %110 = icmp eq i32 %94, %109
  br i1 %110, label %111, label %98, !llvm.loop !184

111:                                              ; preds = %107
  %112 = load i32, ptr %5, align 4
  br label %113

113:                                              ; preds = %111, %84
  %114 = phi i32 [ %85, %84 ], [ %112, %111 ]
  %115 = phi i32 [ %87, %84 ], [ %94, %111 ]
  %116 = add nuw nsw i64 %86, 1
  %117 = sext i32 %114 to i64
  %118 = icmp slt i64 %116, %117
  br i1 %118, label %84, label %119, !llvm.loop !185

119:                                              ; preds = %113, %74
  %120 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %5, i64 0, i32 7
  store i32 0, ptr %120, align 4
  %121 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %5, i64 0, i32 7, i64 1
  store i32 %83, ptr %121, align 4
  br label %123

122:                                              ; preds = %98, %66, %59, %48, %45, %26
  tail call void @free(ptr noundef nonnull %5) #59
  br label %123

123:                                              ; preds = %122, %119
  %124 = phi ptr [ null, %122 ], [ %5, %119 ]
  ret ptr %124
}

; Function Attrs: nofree nounwind optsize uwtable
define internal noalias ptr @floor1_look(ptr nocapture readnone %0, ptr noundef %1) #3 {
  %3 = alloca [65 x ptr], align 16
  call void @llvm.lifetime.start.p0(i64 520, ptr nonnull %3) #55
  %4 = tail call noalias dereferenceable_or_null(1328) ptr @calloc(i64 noundef 1, i64 noundef 1328) #65
  %5 = getelementptr inbounds %struct.vorbis_look_floor1, ptr %4, i64 0, i32 8
  store ptr %1, ptr %5, align 8
  %6 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %1, i64 0, i32 7
  %7 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %1, i64 0, i32 7, i64 1
  %8 = load i32, ptr %7, align 4
  %9 = getelementptr inbounds %struct.vorbis_look_floor1, ptr %4, i64 0, i32 6
  store i32 %8, ptr %9, align 8
  %10 = load i32, ptr %1, align 4
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %14, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.vorbis_look_floor1, ptr %4, i64 0, i32 5
  store i32 2, ptr %13, align 4
  br label %33

14:                                               ; preds = %2
  %15 = zext i32 %10 to i64
  br label %16

16:                                               ; preds = %16, %14
  %17 = phi i64 [ 0, %14 ], [ %25, %16 ]
  %18 = phi i32 [ 0, %14 ], [ %24, %16 ]
  %19 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %1, i64 0, i32 1, i64 %17
  %20 = load i32, ptr %19, align 4
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %1, i64 0, i32 2, i64 %21
  %23 = load i32, ptr %22, align 4
  %24 = add nsw i32 %23, %18
  %25 = add nuw nsw i64 %17, 1
  %26 = icmp eq i64 %25, %15
  br i1 %26, label %27, label %16, !llvm.loop !186

27:                                               ; preds = %16
  %.lcssa2 = phi i32 [ %24, %16 ]
  %28 = add i32 %.lcssa2, 2
  %29 = getelementptr inbounds %struct.vorbis_look_floor1, ptr %4, i64 0, i32 5
  store i32 %28, ptr %29, align 4
  %30 = icmp sgt i32 %.lcssa2, -2
  br i1 %30, label %33, label %31

31:                                               ; preds = %27
  %32 = sext i32 %28 to i64
  call void @qsort(ptr noundef nonnull %3, i64 noundef %32, i64 noundef 8, ptr noundef nonnull @icomp) #59
  br label %102

33:                                               ; preds = %27, %12
  %34 = phi i32 [ 2, %12 ], [ %28, %27 ]
  %35 = phi i32 [ 0, %12 ], [ %.lcssa2, %27 ]
  %36 = tail call i32 @llvm.smax.i32(i32 %34, i32 1)
  %37 = zext i32 %36 to i64
  %38 = add nuw nsw i64 %37, 1
  %39 = and i64 %38, 4294967294
  %40 = add nsw i64 %37, -1
  %41 = insertelement <2 x i64> poison, i64 %40, i64 0
  %42 = shufflevector <2 x i64> %41, <2 x i64> poison, <2 x i32> zeroinitializer
  br label %43

43:                                               ; preds = %57, %33
  %44 = phi i64 [ 0, %33 ], [ %58, %57 ]
  %45 = phi <2 x i64> [ <i64 0, i64 1>, %33 ], [ %59, %57 ]
  %46 = icmp ule <2 x i64> %45, %42
  %47 = extractelement <2 x i1> %46, i64 0
  br i1 %47, label %48, label %51

48:                                               ; preds = %43
  %49 = getelementptr inbounds [65 x ptr], ptr %3, i64 0, i64 %44
  %50 = getelementptr inbounds i32, ptr %6, i64 %44
  store ptr %50, ptr %49, align 16
  br label %51

51:                                               ; preds = %48, %43
  %52 = extractelement <2 x i1> %46, i64 1
  br i1 %52, label %53, label %57

53:                                               ; preds = %51
  %54 = or i64 %44, 1
  %55 = getelementptr inbounds [65 x ptr], ptr %3, i64 0, i64 %54
  %56 = getelementptr inbounds i32, ptr %6, i64 %54
  store ptr %56, ptr %55, align 8
  br label %57

57:                                               ; preds = %53, %51
  %58 = add i64 %44, 2
  %59 = add <2 x i64> %45, <i64 2, i64 2>
  %60 = icmp eq i64 %58, %39
  br i1 %60, label %61, label %43, !llvm.loop !187

61:                                               ; preds = %57
  %62 = sext i32 %34 to i64
  call void @qsort(ptr noundef nonnull %3, i64 noundef %62, i64 noundef 8, ptr noundef nonnull @icomp) #59
  %63 = ptrtoint ptr %6 to i64
  %64 = call i32 @llvm.smax.i32(i32 %34, i32 1)
  %65 = zext i32 %64 to i64
  br label %69

66:                                               ; preds = %69
  %67 = call i32 @llvm.smax.i32(i32 %34, i32 1)
  %68 = zext i32 %67 to i64
  br label %83

69:                                               ; preds = %69, %61
  %70 = phi i64 [ 0, %61 ], [ %78, %69 ]
  %71 = getelementptr inbounds [65 x ptr], ptr %3, i64 0, i64 %70
  %72 = load ptr, ptr %71, align 8
  %73 = ptrtoint ptr %72 to i64
  %74 = sub i64 %73, %63
  %75 = lshr exact i64 %74, 2
  %76 = trunc i64 %75 to i32
  %77 = getelementptr inbounds %struct.vorbis_look_floor1, ptr %4, i64 0, i32 1, i64 %70
  store i32 %76, ptr %77, align 4
  %78 = add nuw nsw i64 %70, 1
  %79 = icmp eq i64 %78, %65
  br i1 %79, label %66, label %69, !llvm.loop !190

80:                                               ; preds = %83
  %81 = call i32 @llvm.smax.i32(i32 %34, i32 1)
  %82 = zext i32 %81 to i64
  br label %92

83:                                               ; preds = %83, %66
  %84 = phi i64 [ 0, %66 ], [ %90, %83 ]
  %85 = getelementptr inbounds %struct.vorbis_look_floor1, ptr %4, i64 0, i32 1, i64 %84
  %86 = load i32, ptr %85, align 4
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds %struct.vorbis_look_floor1, ptr %4, i64 0, i32 2, i64 %87
  %89 = trunc i64 %84 to i32
  store i32 %89, ptr %88, align 4
  %90 = add nuw nsw i64 %84, 1
  %91 = icmp eq i64 %90, %68
  br i1 %91, label %80, label %83, !llvm.loop !191

92:                                               ; preds = %92, %80
  %93 = phi i64 [ 0, %80 ], [ %100, %92 ]
  %94 = getelementptr inbounds %struct.vorbis_look_floor1, ptr %4, i64 0, i32 1, i64 %93
  %95 = load i32, ptr %94, align 4
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %1, i64 0, i32 7, i64 %96
  %98 = load i32, ptr %97, align 4
  %99 = getelementptr inbounds [65 x i32], ptr %4, i64 0, i64 %93
  store i32 %98, ptr %99, align 4
  %100 = add nuw nsw i64 %93, 1
  %101 = icmp eq i64 %100, %82
  br i1 %101, label %102, label %92, !llvm.loop !192

102:                                              ; preds = %92, %31
  %103 = phi i32 [ %.lcssa2, %31 ], [ %35, %92 ]
  %104 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %1, i64 0, i32 6
  %105 = load i32, ptr %104, align 4
  %106 = add i32 %105, -1
  %107 = icmp ult i32 %106, 4
  br i1 %107, label %108, label %113

108:                                              ; preds = %102
  %109 = sext i32 %106 to i64
  %110 = getelementptr inbounds [4 x i32], ptr @switch.table.floor1_look, i64 0, i64 %109
  %111 = load i32, ptr %110, align 4
  %112 = getelementptr inbounds %struct.vorbis_look_floor1, ptr %4, i64 0, i32 7
  store i32 %111, ptr %112, align 4
  br label %113

113:                                              ; preds = %108, %102
  %114 = icmp sgt i32 %103, 0
  br i1 %114, label %115, label %151

115:                                              ; preds = %113
  %116 = zext i32 %103 to i64
  br label %117

117:                                              ; preds = %145, %115
  %118 = phi i64 [ 0, %115 ], [ %148, %145 ]
  %119 = phi i64 [ 2, %115 ], [ %149, %145 ]
  %120 = load i32, ptr %9, align 8
  %121 = add nuw nsw i64 %118, 2
  %122 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %1, i64 0, i32 7, i64 %121
  %123 = load i32, ptr %122, align 4
  br label %124

124:                                              ; preds = %124, %117
  %125 = phi i64 [ 0, %117 ], [ %143, %124 ]
  %126 = phi i32 [ %120, %117 ], [ %142, %124 ]
  %127 = phi i32 [ 0, %117 ], [ %137, %124 ]
  %128 = phi i32 [ 1, %117 ], [ %141, %124 ]
  %129 = phi i32 [ 0, %117 ], [ %136, %124 ]
  %130 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %1, i64 0, i32 7, i64 %125
  %131 = load i32, ptr %130, align 4
  %132 = icmp sgt i32 %131, %127
  %133 = icmp slt i32 %131, %123
  %134 = select i1 %132, i1 %133, i1 false
  %135 = trunc i64 %125 to i32
  %136 = select i1 %134, i32 %135, i32 %129
  %137 = select i1 %134, i32 %131, i32 %127
  %138 = icmp slt i32 %131, %126
  %139 = icmp sgt i32 %131, %123
  %140 = select i1 %138, i1 %139, i1 false
  %141 = select i1 %140, i32 %135, i32 %128
  %142 = select i1 %140, i32 %131, i32 %126
  %143 = add nuw nsw i64 %125, 1
  %144 = icmp eq i64 %143, %119
  br i1 %144, label %145, label %124, !llvm.loop !193

145:                                              ; preds = %124
  %.lcssa1 = phi i32 [ %136, %124 ]
  %.lcssa = phi i32 [ %141, %124 ]
  %146 = getelementptr inbounds %struct.vorbis_look_floor1, ptr %4, i64 0, i32 4, i64 %118
  store i32 %.lcssa1, ptr %146, align 4
  %147 = getelementptr inbounds %struct.vorbis_look_floor1, ptr %4, i64 0, i32 3, i64 %118
  store i32 %.lcssa, ptr %147, align 4
  %148 = add nuw nsw i64 %118, 1
  %149 = add nuw nsw i64 %119, 1
  %150 = icmp eq i64 %148, %116
  br i1 %150, label %151, label %117, !llvm.loop !194

151:                                              ; preds = %145, %113
  call void @llvm.lifetime.end.p0(i64 520, ptr nonnull %3) #55
  ret ptr %4
}

; Function Attrs: mustprogress nounwind optsize willreturn memory(argmem: readwrite, inaccessiblemem: readwrite) uwtable
define internal void @floor1_free_info(ptr noundef %0) #24 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %4, label %3

3:                                                ; preds = %1
  tail call void @free(ptr noundef nonnull %0) #59
  br label %4

4:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: mustprogress nounwind optsize willreturn memory(argmem: readwrite, inaccessiblemem: readwrite) uwtable
define internal void @floor1_free_look(ptr noundef %0) #24 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %4, label %3

3:                                                ; preds = %1
  tail call void @free(ptr noundef nonnull %0) #59
  br label %4

4:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal ptr @floor1_inverse1(ptr nocapture noundef %0, ptr nocapture noundef readonly %1) #3 {
  %3 = getelementptr inbounds %struct.vorbis_look_floor1, ptr %1, i64 0, i32 8
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 10
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %6, i64 0, i32 1
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds %struct.vorbis_info, ptr %8, i64 0, i32 7
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr inbounds %struct.codec_setup_info, ptr %10, i64 0, i32 15
  %12 = load ptr, ptr %11, align 8
  %13 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 1
  %14 = tail call i64 @oggpack_read(ptr noundef nonnull %13, i32 noundef 1) #56
  %15 = icmp eq i64 %14, 1
  br i1 %15, label %16, label %205

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.vorbis_look_floor1, ptr %1, i64 0, i32 5
  %18 = load i32, ptr %17, align 4
  %19 = sext i32 %18 to i64
  %20 = shl nsw i64 %19, 2
  %21 = tail call ptr @_vorbis_block_alloc(ptr noundef nonnull %0, i64 noundef %20) #56
  %22 = getelementptr inbounds %struct.vorbis_look_floor1, ptr %1, i64 0, i32 7
  %23 = load i32, ptr %22, align 4
  %24 = add nsw i32 %23, -1
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %26, %16
  %27 = phi i32 [ %29, %26 ], [ 0, %16 ]
  %28 = phi i32 [ %30, %26 ], [ %24, %16 ]
  %29 = add nuw nsw i32 %27, 1
  %30 = lshr i32 %28, 1
  %31 = icmp ult i32 %28, 2
  br i1 %31, label %32, label %26, !llvm.loop !107

32:                                               ; preds = %26, %16
  %33 = phi i32 [ 0, %16 ], [ %29, %26 ]
  %34 = tail call i64 @oggpack_read(ptr noundef nonnull %13, i32 noundef %33) #56
  %35 = trunc i64 %34 to i32
  store i32 %35, ptr %21, align 4
  %36 = load i32, ptr %22, align 4
  %37 = add nsw i32 %36, -1
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %45, label %39

39:                                               ; preds = %39, %32
  %40 = phi i32 [ %42, %39 ], [ 0, %32 ]
  %41 = phi i32 [ %43, %39 ], [ %37, %32 ]
  %42 = add nuw nsw i32 %40, 1
  %43 = lshr i32 %41, 1
  %44 = icmp ult i32 %41, 2
  br i1 %44, label %45, label %39, !llvm.loop !107

45:                                               ; preds = %39, %32
  %46 = phi i32 [ 0, %32 ], [ %42, %39 ]
  %47 = tail call i64 @oggpack_read(ptr noundef nonnull %13, i32 noundef %46) #56
  %48 = trunc i64 %47 to i32
  %49 = getelementptr inbounds i32, ptr %21, i64 1
  store i32 %48, ptr %49, align 4
  %50 = load i32, ptr %4, align 4
  %51 = icmp sgt i32 %50, 0
  br i1 %51, label %55, label %52

52:                                               ; preds = %123, %45
  %53 = load i32, ptr %17, align 4
  %54 = icmp sgt i32 %53, 2
  br i1 %54, label %129, label %205

55:                                               ; preds = %123, %45
  %56 = phi i64 [ %125, %123 ], [ 0, %45 ]
  %57 = phi i32 [ %124, %123 ], [ 2, %45 ]
  %58 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %4, i64 0, i32 1, i64 %56
  %59 = load i32, ptr %58, align 4
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %4, i64 0, i32 2, i64 %60
  %62 = load i32, ptr %61, align 4
  %63 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %4, i64 0, i32 3, i64 %60
  %64 = load i32, ptr %63, align 4
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %83, label %66

66:                                               ; preds = %55
  %67 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %4, i64 0, i32 4, i64 %60
  %68 = load i32, ptr %67, align 4
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds %struct.codebook, ptr %12, i64 %69
  %71 = tail call fastcc i64 @decode_packed_entry_number(ptr noundef %70, ptr noundef nonnull %13) #56
  %72 = icmp sgt i64 %71, -1
  br i1 %72, label %73, label %79

73:                                               ; preds = %66
  %74 = getelementptr inbounds %struct.codebook, ptr %12, i64 %69, i32 6
  %75 = load ptr, ptr %74, align 8
  %76 = getelementptr inbounds i32, ptr %75, i64 %71
  %77 = load i32, ptr %76, align 4
  %78 = zext i32 %77 to i64
  br label %79

79:                                               ; preds = %73, %66
  %80 = phi i64 [ %78, %73 ], [ %71, %66 ]
  %81 = trunc i64 %80 to i32
  %82 = icmp eq i32 %81, -1
  br i1 %82, label %205, label %83

83:                                               ; preds = %79, %55
  %84 = phi i32 [ %81, %79 ], [ 0, %55 ]
  %85 = icmp sgt i32 %62, 0
  br i1 %85, label %86, label %123

86:                                               ; preds = %83
  %87 = shl nsw i32 -1, %64
  %88 = xor i32 %87, -1
  %89 = sext i32 %57 to i64
  %90 = zext i32 %62 to i64
  br label %91

91:                                               ; preds = %120, %86
  %92 = phi i64 [ 0, %86 ], [ %121, %120 ]
  %93 = phi i32 [ %84, %86 ], [ %98, %120 ]
  %94 = and i32 %93, %88
  %95 = zext i32 %94 to i64
  %96 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %4, i64 0, i32 5, i64 %60, i64 %95
  %97 = load i32, ptr %96, align 4
  %98 = ashr i32 %93, %64
  %99 = icmp sgt i32 %97, -1
  br i1 %99, label %100, label %117

100:                                              ; preds = %91
  %101 = zext i32 %97 to i64
  %102 = getelementptr inbounds %struct.codebook, ptr %12, i64 %101
  %103 = tail call fastcc i64 @decode_packed_entry_number(ptr noundef %102, ptr noundef nonnull %13) #56
  %104 = icmp sgt i64 %103, -1
  br i1 %104, label %105, label %111

105:                                              ; preds = %100
  %106 = getelementptr inbounds %struct.codebook, ptr %12, i64 %101, i32 6
  %107 = load ptr, ptr %106, align 8
  %108 = getelementptr inbounds i32, ptr %107, i64 %103
  %109 = load i32, ptr %108, align 4
  %110 = zext i32 %109 to i64
  br label %111

111:                                              ; preds = %105, %100
  %112 = phi i64 [ %110, %105 ], [ %103, %100 ]
  %113 = trunc i64 %112 to i32
  %114 = add nsw i64 %92, %89
  %115 = getelementptr inbounds i32, ptr %21, i64 %114
  store i32 %113, ptr %115, align 4
  %116 = icmp eq i32 %113, -1
  br i1 %116, label %205, label %120

117:                                              ; preds = %91
  %118 = add nsw i64 %92, %89
  %119 = getelementptr inbounds i32, ptr %21, i64 %118
  store i32 0, ptr %119, align 4
  br label %120

120:                                              ; preds = %117, %111
  %121 = add nuw nsw i64 %92, 1
  %122 = icmp eq i64 %121, %90
  br i1 %122, label %123, label %91, !llvm.loop !195

123:                                              ; preds = %120, %83
  %124 = add nsw i32 %62, %57
  %125 = add nuw nsw i64 %56, 1
  %126 = load i32, ptr %4, align 4
  %127 = sext i32 %126 to i64
  %128 = icmp slt i64 %125, %127
  br i1 %128, label %55, label %52, !llvm.loop !196

129:                                              ; preds = %200, %52
  %130 = phi i64 [ %201, %200 ], [ 2, %52 ]
  %131 = add nsw i64 %130, -2
  %132 = getelementptr inbounds %struct.vorbis_look_floor1, ptr %1, i64 0, i32 4, i64 %131
  %133 = load i32, ptr %132, align 4
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %4, i64 0, i32 7, i64 %134
  %136 = load i32, ptr %135, align 4
  %137 = getelementptr inbounds %struct.vorbis_look_floor1, ptr %1, i64 0, i32 3, i64 %131
  %138 = load i32, ptr %137, align 4
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %4, i64 0, i32 7, i64 %139
  %141 = load i32, ptr %140, align 4
  %142 = getelementptr inbounds i32, ptr %21, i64 %134
  %143 = load i32, ptr %142, align 4
  %144 = getelementptr inbounds i32, ptr %21, i64 %139
  %145 = load i32, ptr %144, align 4
  %146 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %4, i64 0, i32 7, i64 %130
  %147 = load i32, ptr %146, align 4
  %148 = and i32 %143, 32767
  %149 = and i32 %145, 32767
  %150 = sub nsw i32 %149, %148
  %151 = sub nsw i32 %141, %136
  %152 = tail call i32 @llvm.abs.i32(i32 %150, i1 true)
  %153 = sub nsw i32 %147, %136
  %154 = mul nsw i32 %152, %153
  %155 = sdiv i32 %154, %151
  %156 = icmp slt i32 %150, 0
  %157 = sub i32 0, %155
  %158 = select i1 %156, i32 %157, i32 %155
  %159 = add i32 %158, %148
  %160 = load i32, ptr %22, align 4
  %161 = sub nsw i32 %160, %159
  %162 = getelementptr inbounds i32, ptr %21, i64 %130
  %163 = load i32, ptr %162, align 4
  %164 = icmp eq i32 %163, 0
  br i1 %164, label %198, label %165

165:                                              ; preds = %129
  %166 = tail call i32 @llvm.smin.i32(i32 %161, i32 %159)
  %167 = shl i32 %166, 1
  %168 = icmp slt i32 %163, %167
  br i1 %168, label %176, label %169

169:                                              ; preds = %165
  %170 = icmp sgt i32 %161, %159
  br i1 %170, label %171, label %173

171:                                              ; preds = %169
  %172 = sub nsw i32 %163, %159
  br label %185

173:                                              ; preds = %169
  %174 = xor i32 %163, -1
  %175 = add i32 %161, %174
  br label %185

176:                                              ; preds = %165
  %177 = and i32 %163, 1
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %183, label %179

179:                                              ; preds = %176
  %180 = add nsw i32 %163, 1
  %181 = ashr i32 %180, 1
  %182 = sub nsw i32 0, %181
  br label %185

183:                                              ; preds = %176
  %184 = ashr i32 %163, 1
  br label %185

185:                                              ; preds = %183, %179, %173, %171
  %186 = phi i32 [ %172, %171 ], [ %175, %173 ], [ %182, %179 ], [ %184, %183 ]
  %187 = add nsw i32 %186, %159
  store i32 %187, ptr %162, align 4
  %188 = load i32, ptr %132, align 4
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds i32, ptr %21, i64 %189
  %191 = load i32, ptr %190, align 4
  %192 = and i32 %191, 32767
  store i32 %192, ptr %190, align 4
  %193 = load i32, ptr %137, align 4
  %194 = sext i32 %193 to i64
  %195 = getelementptr inbounds i32, ptr %21, i64 %194
  %196 = load i32, ptr %195, align 4
  %197 = and i32 %196, 32767
  store i32 %197, ptr %195, align 4
  br label %200

198:                                              ; preds = %129
  %199 = or i32 %159, 32768
  store i32 %199, ptr %162, align 4
  br label %200

200:                                              ; preds = %198, %185
  %201 = add nuw nsw i64 %130, 1
  %202 = load i32, ptr %17, align 4
  %203 = sext i32 %202 to i64
  %204 = icmp slt i64 %201, %203
  br i1 %204, label %129, label %205, !llvm.loop !197

205:                                              ; preds = %200, %111, %79, %52, %2
  %206 = phi ptr [ null, %2 ], [ %21, %52 ], [ %21, %200 ], [ null, %111 ], [ null, %79 ]
  ret ptr %206
}

; Function Attrs: nofree nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal i32 @floor1_inverse2(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr noundef readonly %2, ptr nocapture noundef %3) #30 {
  %5 = getelementptr inbounds %struct.vorbis_look_floor1, ptr %1, i64 0, i32 8
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 10
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %8, i64 0, i32 1
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr inbounds %struct.vorbis_info, ptr %10, i64 0, i32 7
  %12 = load ptr, ptr %11, align 8
  %13 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 3
  %14 = load i64, ptr %13, align 8
  %15 = getelementptr inbounds [2 x i64], ptr %12, i64 0, i64 %14
  %16 = load i64, ptr %15, align 8
  %17 = sdiv i64 %16, 2
  %18 = trunc i64 %17 to i32
  %19 = icmp eq ptr %2, null
  br i1 %19, label %110, label %20

20:                                               ; preds = %4
  %21 = load i32, ptr %2, align 4
  %22 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %6, i64 0, i32 6
  %23 = load i32, ptr %22, align 4
  %24 = mul nsw i32 %23, %21
  %25 = getelementptr inbounds %struct.vorbis_look_floor1, ptr %1, i64 0, i32 5
  %26 = load i32, ptr %25, align 4
  %27 = icmp sgt i32 %26, 1
  br i1 %27, label %39, label %28

28:                                               ; preds = %95, %20
  %29 = phi i32 [ 0, %20 ], [ %96, %95 ]
  %30 = phi i32 [ %24, %20 ], [ %98, %95 ]
  %31 = icmp slt i32 %29, %18
  br i1 %31, label %32, label %113

32:                                               ; preds = %28
  %33 = sext i32 %30 to i64
  %34 = getelementptr inbounds [256 x float], ptr @FLOOR1_fromdB_LOOKUP, i64 0, i64 %33
  %35 = load float, ptr %34, align 4
  %36 = sext i32 %29 to i64
  %37 = shl i64 %17, 32
  %38 = ashr exact i64 %37, 32
  br label %103

39:                                               ; preds = %95, %20
  %40 = phi i64 [ %99, %95 ], [ 1, %20 ]
  %41 = phi i32 [ %98, %95 ], [ %24, %20 ]
  %42 = phi i32 [ %97, %95 ], [ 0, %20 ]
  %43 = phi i32 [ %96, %95 ], [ 0, %20 ]
  %44 = getelementptr inbounds %struct.vorbis_look_floor1, ptr %1, i64 0, i32 1, i64 %40
  %45 = load i32, ptr %44, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds i32, ptr %2, i64 %46
  %48 = load i32, ptr %47, align 4
  %49 = icmp ult i32 %48, 32768
  br i1 %49, label %50, label %95

50:                                               ; preds = %39
  %51 = load i32, ptr %22, align 4
  %52 = mul nsw i32 %51, %48
  %53 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %6, i64 0, i32 7, i64 %46
  %54 = load i32, ptr %53, align 4
  %55 = sub nsw i32 %52, %41
  %56 = sub nsw i32 %54, %42
  %57 = tail call i32 @llvm.abs.i32(i32 %55, i1 true)
  %58 = sdiv i32 %55, %56
  %59 = icmp sgt i32 %55, -1
  %60 = select i1 %59, i32 1, i32 -1
  %61 = mul nsw i32 %58, %56
  %62 = tail call i32 @llvm.abs.i32(i32 %61, i1 true)
  %63 = sub nsw i32 %57, %62
  %64 = sext i32 %41 to i64
  %65 = getelementptr inbounds [256 x float], ptr @FLOOR1_fromdB_LOOKUP, i64 0, i64 %64
  %66 = load float, ptr %65, align 4
  %67 = sext i32 %42 to i64
  %68 = getelementptr inbounds float, ptr %3, i64 %67
  %69 = load float, ptr %68, align 4
  %70 = fmul float %66, %69
  store float %70, ptr %68, align 4
  %71 = add nsw i32 %42, 1
  %72 = icmp slt i32 %71, %54
  br i1 %72, label %73, label %95

73:                                               ; preds = %50
  %74 = add nsw i64 %67, 1
  br label %75

75:                                               ; preds = %75, %73
  %76 = phi i64 [ %74, %73 ], [ %92, %75 ]
  %77 = phi i32 [ 0, %73 ], [ %83, %75 ]
  %78 = phi i32 [ %41, %73 ], [ %85, %75 ]
  %79 = add nsw i32 %77, %63
  %80 = icmp slt i32 %79, %56
  %81 = select i1 %80, i32 0, i32 %60
  %82 = select i1 %80, i32 0, i32 %56
  %83 = sub nsw i32 %79, %82
  %84 = add i32 %78, %58
  %85 = add i32 %84, %81
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds [256 x float], ptr @FLOOR1_fromdB_LOOKUP, i64 0, i64 %86
  %88 = load float, ptr %87, align 4
  %89 = getelementptr inbounds float, ptr %3, i64 %76
  %90 = load float, ptr %89, align 4
  %91 = fmul float %88, %90
  store float %91, ptr %89, align 4
  %92 = add nsw i64 %76, 1
  %93 = trunc i64 %92 to i32
  %94 = icmp eq i32 %54, %93
  br i1 %94, label %95, label %75, !llvm.loop !198

95:                                               ; preds = %75, %50, %39
  %96 = phi i32 [ %43, %39 ], [ %54, %50 ], [ %54, %75 ]
  %97 = phi i32 [ %42, %39 ], [ %54, %50 ], [ %54, %75 ]
  %98 = phi i32 [ %41, %39 ], [ %52, %50 ], [ %52, %75 ]
  %99 = add nuw nsw i64 %40, 1
  %100 = load i32, ptr %25, align 4
  %101 = sext i32 %100 to i64
  %102 = icmp slt i64 %99, %101
  br i1 %102, label %39, label %28, !llvm.loop !199

103:                                              ; preds = %103, %32
  %104 = phi i64 [ %36, %32 ], [ %108, %103 ]
  %105 = getelementptr inbounds float, ptr %3, i64 %104
  %106 = load float, ptr %105, align 4
  %107 = fmul float %35, %106
  store float %107, ptr %105, align 4
  %108 = add nsw i64 %104, 1
  %109 = icmp eq i64 %108, %38
  br i1 %109, label %113, label %103, !llvm.loop !200

110:                                              ; preds = %4
  %111 = shl i64 %17, 32
  %112 = ashr exact i64 %111, 30
  tail call void @llvm.memset.p0.i64(ptr align 4 %3, i8 0, i64 %112, i1 false)
  br label %113

113:                                              ; preds = %110, %103, %28
  %114 = phi i32 [ 0, %110 ], [ 1, %28 ], [ 1, %103 ]
  ret i32 %114
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #27

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, inaccessiblemem: none) uwtable
define internal i32 @icomp(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #26 {
  %3 = load ptr, ptr %0, align 8
  %4 = load i32, ptr %3, align 4
  %5 = load ptr, ptr %1, align 8
  %6 = load i32, ptr %5, align 4
  %7 = sub nsw i32 %4, %6
  ret i32 %7
}

; Function Attrs: nofree optsize
declare void @qsort(ptr noundef, i64 noundef, i64 noundef, ptr nocapture noundef) local_unnamed_addr #31

; Function Attrs: nounwind optsize uwtable
define internal noalias ptr @floor0_unpack(ptr nocapture noundef readonly %0, ptr nocapture noundef %1) #0 {
  %3 = getelementptr inbounds %struct.vorbis_info, ptr %0, i64 0, i32 7
  %4 = load ptr, ptr %3, align 8
  %5 = tail call noalias dereferenceable_or_null(112) ptr @malloc(i64 noundef 112) #64
  %6 = tail call i64 @oggpack_read(ptr noundef %1, i32 noundef 8) #56
  %7 = trunc i64 %6 to i32
  store i32 %7, ptr %5, align 8
  %8 = tail call i64 @oggpack_read(ptr noundef %1, i32 noundef 16) #56
  %9 = getelementptr inbounds %struct.vorbis_info_floor0, ptr %5, i64 0, i32 1
  store i64 %8, ptr %9, align 8
  %10 = tail call i64 @oggpack_read(ptr noundef %1, i32 noundef 16) #56
  %11 = getelementptr inbounds %struct.vorbis_info_floor0, ptr %5, i64 0, i32 2
  store i64 %10, ptr %11, align 8
  %12 = tail call i64 @oggpack_read(ptr noundef %1, i32 noundef 6) #56
  %13 = trunc i64 %12 to i32
  %14 = getelementptr inbounds %struct.vorbis_info_floor0, ptr %5, i64 0, i32 3
  store i32 %13, ptr %14, align 8
  %15 = tail call i64 @oggpack_read(ptr noundef %1, i32 noundef 8) #56
  %16 = trunc i64 %15 to i32
  %17 = getelementptr inbounds %struct.vorbis_info_floor0, ptr %5, i64 0, i32 4
  store i32 %16, ptr %17, align 4
  %18 = tail call i64 @oggpack_read(ptr noundef %1, i32 noundef 4) #56
  %19 = trunc i64 %18 to i32
  %20 = add i32 %19, 1
  %21 = getelementptr inbounds %struct.vorbis_info_floor0, ptr %5, i64 0, i32 5
  store i32 %20, ptr %21, align 8
  %22 = icmp slt i32 %7, 1
  %23 = icmp slt i64 %8, 1
  %24 = select i1 %22, i1 true, i1 %23
  br i1 %24, label %44, label %25

25:                                               ; preds = %2
  %26 = icmp slt i64 %10, 1
  %27 = icmp ugt i32 %19, 2147483646
  %28 = select i1 %26, i1 true, i1 %27
  br i1 %28, label %44, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %struct.codec_setup_info, ptr %4, i64 0, i32 5
  %31 = zext i32 %20 to i64
  br label %35

32:                                               ; preds = %41
  %33 = add nuw nsw i64 %36, 1
  %34 = icmp eq i64 %33, %31
  br i1 %34, label %45, label %35, !llvm.loop !201

35:                                               ; preds = %32, %29
  %36 = phi i64 [ 0, %29 ], [ %33, %32 ]
  %37 = tail call i64 @oggpack_read(ptr noundef %1, i32 noundef 8) #56
  %38 = trunc i64 %37 to i32
  %39 = getelementptr inbounds %struct.vorbis_info_floor0, ptr %5, i64 0, i32 6, i64 %36
  store i32 %38, ptr %39, align 4
  %40 = icmp slt i32 %38, 0
  br i1 %40, label %44, label %41

41:                                               ; preds = %35
  %42 = load i32, ptr %30, align 8
  %43 = icmp sgt i32 %42, %38
  br i1 %43, label %32, label %44

44:                                               ; preds = %41, %35, %25, %2
  tail call void @free(ptr noundef nonnull %5) #59
  br label %45

45:                                               ; preds = %44, %32
  %46 = phi ptr [ null, %44 ], [ %5, %32 ]
  ret ptr %46
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write, argmem: read, inaccessiblemem: readwrite) uwtable
define internal noalias ptr @floor0_look(ptr nocapture readnone %0, ptr noundef %1) #32 {
  %3 = tail call noalias dereferenceable_or_null(48) ptr @calloc(i64 noundef 1, i64 noundef 48) #65
  %4 = load i32, ptr %1, align 8
  %5 = getelementptr inbounds %struct.vorbis_look_floor0, ptr %3, i64 0, i32 1
  store i32 %4, ptr %5, align 4
  %6 = getelementptr inbounds %struct.vorbis_info_floor0, ptr %1, i64 0, i32 2
  %7 = load i64, ptr %6, align 8
  %8 = trunc i64 %7 to i32
  store i32 %8, ptr %3, align 8
  %9 = getelementptr inbounds %struct.vorbis_look_floor0, ptr %3, i64 0, i32 4
  store ptr %1, ptr %9, align 8
  %10 = tail call noalias dereferenceable_or_null(16) ptr @calloc(i64 noundef 2, i64 noundef 8) #65
  %11 = getelementptr inbounds %struct.vorbis_look_floor0, ptr %3, i64 0, i32 2
  store ptr %10, ptr %11, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nounwind optsize willreturn memory(argmem: readwrite, inaccessiblemem: readwrite) uwtable
define internal void @floor0_free_info(ptr noundef %0) #24 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %4, label %3

3:                                                ; preds = %1
  tail call void @free(ptr noundef nonnull %0) #59
  br label %4

4:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: mustprogress nounwind optsize willreturn uwtable
define internal void @floor0_free_look(ptr noundef %0) #13 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %22, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.vorbis_look_floor0, ptr %0, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8
  %6 = icmp eq ptr %5, null
  br i1 %6, label %21, label %7

7:                                                ; preds = %3
  %8 = load ptr, ptr %5, align 8
  %9 = icmp eq ptr %8, null
  br i1 %9, label %12, label %10

10:                                               ; preds = %7
  tail call void @free(ptr noundef nonnull %8) #59
  %11 = load ptr, ptr %4, align 8
  br label %12

12:                                               ; preds = %10, %7
  %13 = phi ptr [ %11, %10 ], [ %5, %7 ]
  %14 = getelementptr inbounds ptr, ptr %13, i64 1
  %15 = load ptr, ptr %14, align 8
  %16 = icmp eq ptr %15, null
  br i1 %16, label %19, label %17

17:                                               ; preds = %12
  tail call void @free(ptr noundef nonnull %15) #59
  %18 = load ptr, ptr %4, align 8
  br label %19

19:                                               ; preds = %17, %12
  %20 = phi ptr [ %18, %17 ], [ %13, %12 ]
  tail call void @free(ptr noundef %20) #59
  br label %21

21:                                               ; preds = %19, %3
  tail call void @free(ptr noundef nonnull %0) #59
  br label %22

22:                                               ; preds = %21, %1
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal ptr @floor0_inverse1(ptr nocapture noundef %0, ptr nocapture noundef readonly %1) #3 {
  %3 = getelementptr inbounds %struct.vorbis_look_floor0, ptr %1, i64 0, i32 4
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 1
  %6 = getelementptr inbounds %struct.vorbis_info_floor0, ptr %4, i64 0, i32 3
  %7 = load i32, ptr %6, align 8
  %8 = tail call i64 @oggpack_read(ptr noundef nonnull %5, i32 noundef %7) #56
  %9 = trunc i64 %8 to i32
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %11, label %118

11:                                               ; preds = %2
  %12 = load i32, ptr %6, align 8
  %13 = shl nsw i32 -1, %12
  %14 = xor i32 %13, -1
  %15 = sitofp i32 %9 to float
  %16 = uitofp i32 %14 to float
  %17 = fdiv float %15, %16
  %18 = getelementptr inbounds %struct.vorbis_info_floor0, ptr %4, i64 0, i32 4
  %19 = load i32, ptr %18, align 4
  %20 = sitofp i32 %19 to float
  %21 = fmul float %17, %20
  %22 = getelementptr inbounds %struct.vorbis_info_floor0, ptr %4, i64 0, i32 5
  %23 = load i32, ptr %22, align 8
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %31, label %25

25:                                               ; preds = %25, %11
  %26 = phi i32 [ %28, %25 ], [ 0, %11 ]
  %27 = phi i32 [ %29, %25 ], [ %23, %11 ]
  %28 = add nuw nsw i32 %26, 1
  %29 = lshr i32 %27, 1
  %30 = icmp ult i32 %27, 2
  br i1 %30, label %31, label %25, !llvm.loop !202

31:                                               ; preds = %25, %11
  %32 = phi i32 [ 0, %11 ], [ %28, %25 ]
  %33 = tail call i64 @oggpack_read(ptr noundef nonnull %5, i32 noundef %32) #56
  %34 = trunc i64 %33 to i32
  %35 = icmp eq i32 %34, -1
  br i1 %35, label %118, label %36

36:                                               ; preds = %31
  %37 = load i32, ptr %22, align 8
  %38 = icmp sgt i32 %37, %34
  br i1 %38, label %39, label %118

39:                                               ; preds = %36
  %40 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 10
  %41 = load ptr, ptr %40, align 8
  %42 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %41, i64 0, i32 1
  %43 = load ptr, ptr %42, align 8
  %44 = getelementptr inbounds %struct.vorbis_info, ptr %43, i64 0, i32 7
  %45 = load ptr, ptr %44, align 8
  %46 = getelementptr inbounds %struct.codec_setup_info, ptr %45, i64 0, i32 15
  %47 = load ptr, ptr %46, align 8
  %48 = shl i64 %33, 32
  %49 = ashr exact i64 %48, 32
  %50 = getelementptr inbounds %struct.vorbis_info_floor0, ptr %4, i64 0, i32 6, i64 %49
  %51 = load i32, ptr %50, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds %struct.codebook, ptr %47, i64 %52
  %54 = getelementptr inbounds %struct.vorbis_look_floor0, ptr %1, i64 0, i32 1
  %55 = load i32, ptr %54, align 4
  %56 = sext i32 %55 to i64
  %57 = load i64, ptr %53, align 8
  %58 = add nsw i64 %57, %56
  %59 = shl i64 %58, 2
  %60 = add i64 %59, 4
  %61 = tail call ptr @_vorbis_block_alloc(ptr noundef %0, i64 noundef %60) #56
  %62 = load i32, ptr %54, align 4
  %63 = icmp sgt i32 %62, 0
  br i1 %63, label %64, label %114

64:                                               ; preds = %39
  %65 = load i64, ptr %53, align 8
  br label %70

66:                                               ; preds = %78
  %.lcssa2 = phi i32 [ %82, %78 ]
  %67 = icmp sgt i32 %.lcssa2, 0
  br i1 %67, label %68, label %114

68:                                               ; preds = %66
  %69 = load i64, ptr %53, align 8
  br label %84

70:                                               ; preds = %78, %64
  %71 = phi i64 [ %79, %78 ], [ %65, %64 ]
  %72 = phi i32 [ %81, %78 ], [ 0, %64 ]
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds float, ptr %61, i64 %73
  %75 = trunc i64 %71 to i32
  %76 = tail call i64 @vorbis_book_decodev_set(ptr noundef nonnull %53, ptr noundef %74, ptr noundef nonnull %5, i32 noundef %75) #56, !range !130
  %77 = icmp eq i64 %76, -1
  br i1 %77, label %118, label %78

78:                                               ; preds = %70
  %79 = load i64, ptr %53, align 8
  %80 = trunc i64 %79 to i32
  %81 = add i32 %72, %80
  %82 = load i32, ptr %54, align 4
  %83 = icmp slt i32 %81, %82
  br i1 %83, label %70, label %66, !llvm.loop !203

84:                                               ; preds = %105, %68
  %85 = phi i32 [ %106, %105 ], [ %.lcssa2, %68 ]
  %86 = phi i64 [ %107, %105 ], [ %69, %68 ]
  %87 = phi float [ %112, %105 ], [ 0.000000e+00, %68 ]
  %88 = phi i32 [ %108, %105 ], [ 0, %68 ]
  %89 = icmp sgt i64 %86, 0
  br i1 %89, label %90, label %105

90:                                               ; preds = %84
  %91 = sext i32 %88 to i64
  br label %92

92:                                               ; preds = %92, %90
  %93 = phi i64 [ 0, %90 ], [ %98, %92 ]
  %94 = phi i64 [ %91, %90 ], [ %99, %92 ]
  %95 = getelementptr inbounds float, ptr %61, i64 %94
  %96 = load float, ptr %95, align 4
  %97 = fadd float %87, %96
  store float %97, ptr %95, align 4
  %98 = add nuw nsw i64 %93, 1
  %99 = add i64 %94, 1
  %100 = load i64, ptr %53, align 8
  %101 = icmp sgt i64 %100, %98
  br i1 %101, label %92, label %102, !llvm.loop !204

102:                                              ; preds = %92
  %.lcssa1 = phi i64 [ %99, %92 ]
  %.lcssa = phi i64 [ %100, %92 ]
  %103 = trunc i64 %.lcssa1 to i32
  %104 = load i32, ptr %54, align 4
  br label %105

105:                                              ; preds = %102, %84
  %106 = phi i32 [ %85, %84 ], [ %104, %102 ]
  %107 = phi i64 [ %86, %84 ], [ %.lcssa, %102 ]
  %108 = phi i32 [ %88, %84 ], [ %103, %102 ]
  %109 = add nsw i32 %108, -1
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds float, ptr %61, i64 %110
  %112 = load float, ptr %111, align 4
  %113 = icmp slt i32 %108, %106
  br i1 %113, label %84, label %114, !llvm.loop !205

114:                                              ; preds = %105, %66, %39
  %115 = phi i32 [ %.lcssa2, %66 ], [ %62, %39 ], [ %106, %105 ]
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds float, ptr %61, i64 %116
  store float %21, ptr %117, align 4
  br label %118

118:                                              ; preds = %114, %70, %36, %31, %2
  %119 = phi ptr [ %61, %114 ], [ null, %2 ], [ null, %36 ], [ null, %31 ], [ null, %70 ]
  ret ptr %119
}

; Function Attrs: nofree nounwind optsize uwtable
define internal i32 @floor0_inverse2(ptr nocapture noundef readonly %0, ptr nocapture noundef %1, ptr noundef %2, ptr nocapture noundef %3) #3 {
  %5 = getelementptr inbounds %struct.vorbis_look_floor0, ptr %1, i64 0, i32 4
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr inbounds %struct.vorbis_look_floor0, ptr %1, i64 0, i32 2
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 3
  %10 = load i64, ptr %9, align 8
  %11 = getelementptr inbounds ptr, ptr %8, i64 %10
  %12 = load ptr, ptr %11, align 8
  %13 = icmp eq ptr %12, null
  br i1 %13, label %14, label %117

14:                                               ; preds = %4
  %15 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 10
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %16, i64 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr inbounds %struct.vorbis_info, ptr %18, i64 0, i32 7
  %20 = load ptr, ptr %19, align 8
  %21 = shl i64 %10, 32
  %22 = ashr exact i64 %21, 32
  %23 = getelementptr inbounds [2 x i64], ptr %20, i64 0, i64 %22
  %24 = load i64, ptr %23, align 8
  %25 = sdiv i64 %24, 2
  %26 = trunc i64 %25 to i32
  %27 = load i32, ptr %1, align 8
  %28 = getelementptr inbounds %struct.vorbis_info_floor0, ptr %6, i64 0, i32 1
  %29 = load i64, ptr %28, align 8
  %30 = sitofp i64 %29 to float
  %31 = fmul float %30, 5.000000e-01
  %32 = fmul float %31, 0x3F483F91E0000000
  %33 = fpext float %32 to double
  %34 = tail call double @atan(double noundef %33) #59
  %35 = load i64, ptr %28, align 8
  %36 = sitofp i64 %35 to float
  %37 = fmul float %36, 5.000000e-01
  %38 = fmul float %37, %37
  %39 = fmul float %38, 0x3E53DD3DC0000000
  %40 = fpext float %39 to double
  %41 = tail call double @atan(double noundef %40) #59
  %42 = load i64, ptr %28, align 8
  %43 = shl i64 %25, 32
  %44 = add i64 %43, 4294967296
  %45 = ashr exact i64 %44, 30
  %46 = tail call noalias ptr @malloc(i64 noundef %45) #64
  %47 = load ptr, ptr %7, align 8
  %48 = getelementptr inbounds ptr, ptr %47, i64 %22
  store ptr %46, ptr %48, align 8
  %49 = icmp sgt i32 %26, 0
  br i1 %49, label %50, label %110

50:                                               ; preds = %14
  %51 = sitofp i32 %27 to double
  %52 = fmul double %34, 0x402A333340000000
  %53 = fmul double %41, 0x4001EB8520000000
  %54 = fadd double %52, %53
  %55 = sitofp i64 %42 to float
  %56 = fmul float %55, 5.000000e-01
  %57 = fmul float %56, 0x3F1A36E2E0000000
  %58 = fpext float %57 to double
  %59 = fadd double %54, %58
  %60 = fdiv double %51, %59
  %61 = fptrunc double %60 to float
  %62 = sitofp i32 %26 to float
  %63 = fpext float %61 to double
  %64 = and i64 %25, 4294967295
  br label %65

65:                                               ; preds = %65, %50
  %66 = phi i64 [ 0, %50 ], [ %108, %65 ]
  %67 = load i64, ptr %28, align 8
  %68 = sitofp i64 %67 to float
  %69 = fmul float %68, 5.000000e-01
  %70 = fdiv float %69, %62
  %71 = trunc i64 %66 to i32
  %72 = sitofp i32 %71 to float
  %73 = fmul float %70, %72
  %74 = fmul float %73, 0x3F483F91E0000000
  %75 = fpext float %74 to double
  %76 = tail call double @atan(double noundef %75) #59
  %77 = fmul double %76, 0x402A333340000000
  %78 = load i64, ptr %28, align 8
  %79 = sitofp i64 %78 to float
  %80 = fmul float %79, 5.000000e-01
  %81 = fdiv float %80, %62
  %82 = fmul float %81, %72
  %83 = fmul float %82, %82
  %84 = fmul float %83, 0x3E53DD3DC0000000
  %85 = fpext float %84 to double
  %86 = tail call double @atan(double noundef %85) #59
  %87 = fmul double %86, 0x4001EB8520000000
  %88 = fadd double %77, %87
  %89 = load i64, ptr %28, align 8
  %90 = sitofp i64 %89 to float
  %91 = fmul float %90, 5.000000e-01
  %92 = fdiv float %91, %62
  %93 = fmul float %92, %72
  %94 = fmul float %93, 0x3F1A36E2E0000000
  %95 = fpext float %94 to double
  %96 = fadd double %88, %95
  %97 = fmul double %96, %63
  %98 = tail call double @llvm.floor.f64(double %97)
  %99 = fptosi double %98 to i32
  %100 = load i32, ptr %1, align 8
  %101 = icmp sgt i32 %100, %99
  %102 = add nsw i32 %100, -1
  %103 = select i1 %101, i32 %99, i32 %102
  %104 = load ptr, ptr %7, align 8
  %105 = getelementptr inbounds ptr, ptr %104, i64 %22
  %106 = load ptr, ptr %105, align 8
  %107 = getelementptr inbounds i32, ptr %106, i64 %66
  store i32 %103, ptr %107, align 4
  %108 = add nuw nsw i64 %66, 1
  %109 = icmp eq i64 %108, %64
  br i1 %109, label %110, label %65, !llvm.loop !206

110:                                              ; preds = %65, %14
  %111 = phi i64 [ 0, %14 ], [ %64, %65 ]
  %112 = load ptr, ptr %7, align 8
  %113 = getelementptr inbounds ptr, ptr %112, i64 %22
  %114 = load ptr, ptr %113, align 8
  %115 = getelementptr inbounds i32, ptr %114, i64 %111
  store i32 -1, ptr %115, align 4
  %116 = getelementptr inbounds %struct.vorbis_look_floor0, ptr %1, i64 0, i32 3, i64 %22
  store i32 %26, ptr %116, align 4
  br label %117

117:                                              ; preds = %110, %4
  %118 = icmp eq ptr %2, null
  br i1 %118, label %135, label %119

119:                                              ; preds = %117
  %120 = getelementptr inbounds %struct.vorbis_look_floor0, ptr %1, i64 0, i32 1
  %121 = load i32, ptr %120, align 4
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds float, ptr %2, i64 %122
  %124 = load float, ptr %123, align 4
  %125 = load ptr, ptr %7, align 8
  %126 = load i64, ptr %9, align 8
  %127 = getelementptr inbounds ptr, ptr %125, i64 %126
  %128 = load ptr, ptr %127, align 8
  %129 = getelementptr inbounds %struct.vorbis_look_floor0, ptr %1, i64 0, i32 3, i64 %126
  %130 = load i32, ptr %129, align 4
  %131 = load i32, ptr %1, align 8
  %132 = getelementptr inbounds %struct.vorbis_info_floor0, ptr %6, i64 0, i32 4
  %133 = load i32, ptr %132, align 4
  %134 = sitofp i32 %133 to float
  tail call void @vorbis_lsp_to_curve(ptr noundef %3, ptr noundef %128, i32 noundef %130, i32 noundef %131, ptr noundef nonnull %2, i32 noundef %121, float noundef %124, float noundef %134) #56
  br label %141

135:                                              ; preds = %117
  %136 = load i64, ptr %9, align 8
  %137 = getelementptr inbounds %struct.vorbis_look_floor0, ptr %1, i64 0, i32 3, i64 %136
  %138 = load i32, ptr %137, align 4
  %139 = sext i32 %138 to i64
  %140 = shl nsw i64 %139, 2
  tail call void @llvm.memset.p0.i64(ptr align 4 %3, i8 0, i64 %140, i1 false)
  br label %141

141:                                              ; preds = %135, %119
  %142 = phi i32 [ 1, %119 ], [ 0, %135 ]
  ret i32 %142
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write)
declare double @atan(double noundef) local_unnamed_addr #28

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.floor.f64(double) #27

; Function Attrs: nofree nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal void @vorbis_lsp_to_curve(ptr nocapture noundef %0, ptr nocapture noundef readonly %1, i32 noundef %2, i32 noundef %3, ptr nocapture noundef %4, i32 noundef %5, float noundef %6, float noundef %7) #33 {
  %9 = alloca i32, align 4
  %10 = sitofp i32 %3 to double
  %11 = fdiv double 0x400921FB54442D18, %10
  %12 = fptrunc double %11 to float
  %13 = icmp sgt i32 %5, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %8
  %15 = zext i32 %5 to i64
  br label %23

16:                                               ; preds = %23, %8
  %17 = icmp sgt i32 %2, 0
  br i1 %17, label %18, label %174

18:                                               ; preds = %16
  %19 = ashr i32 %5, 1
  %20 = and i32 %5, 1
  %21 = icmp eq i32 %20, 0
  %22 = add i32 %5, 32
  br label %49

23:                                               ; preds = %23, %14
  %24 = phi i64 [ 0, %14 ], [ %47, %23 ]
  %25 = getelementptr inbounds float, ptr %4, i64 %24
  %26 = load float, ptr %25, align 4
  %27 = fpext float %26 to double
  %28 = fmul double %27, 0x40445F3071E2C65E
  %29 = fadd double %28, -5.000000e-01
  %30 = fadd double %29, 5.000000e-01
  %31 = fptosi double %30 to i32
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds [129 x float], ptr @COS_LOOKUP, i64 0, i64 %32
  %34 = load float, ptr %33, align 4
  %35 = fpext float %34 to double
  %36 = sitofp i32 %31 to double
  %37 = fsub double %28, %36
  %38 = add nsw i32 %31, 1
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds [129 x float], ptr @COS_LOOKUP, i64 0, i64 %39
  %41 = load float, ptr %40, align 4
  %42 = fsub float %41, %34
  %43 = fpext float %42 to double
  %44 = fmul double %37, %43
  %45 = fadd double %44, %35
  %46 = fptrunc double %45 to float
  store float %46, ptr %25, align 4
  %47 = add nuw nsw i64 %24, 1
  %48 = icmp eq i64 %47, %15
  br i1 %48, label %16, label %23, !llvm.loop !207

49:                                               ; preds = %171, %18
  %50 = phi i64 [ 0, %18 ], [ %.lcssa2, %171 ]
  %51 = shl i64 %50, 32
  %52 = ashr exact i64 %51, 32
  %53 = getelementptr inbounds i32, ptr %1, i64 %52
  %54 = load i32, ptr %53, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %9) #55
  %55 = sitofp i32 %54 to float
  %56 = fmul float %12, %55
  %57 = fpext float %56 to double
  %58 = fmul double %57, 0x40445F3071E2C65E
  %59 = fadd double %58, -5.000000e-01
  %60 = fadd double %59, 5.000000e-01
  %61 = fptosi double %60 to i32
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds [129 x float], ptr @COS_LOOKUP, i64 0, i64 %62
  %64 = load float, ptr %63, align 4
  %65 = fpext float %64 to double
  %66 = sitofp i32 %61 to double
  %67 = fsub double %58, %66
  %68 = add nsw i32 %61, 1
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds [129 x float], ptr @COS_LOOKUP, i64 0, i64 %69
  %71 = load float, ptr %70, align 4
  %72 = fsub float %71, %64
  %73 = fpext float %72 to double
  %74 = fmul double %67, %73
  %75 = fadd double %74, %65
  %76 = fptrunc double %75 to float
  %77 = insertelement <2 x float> poison, float %76, i64 0
  %78 = shufflevector <2 x float> %77, <2 x float> poison, <2 x i32> zeroinitializer
  br label %79

79:                                               ; preds = %79, %49
  %80 = phi ptr [ %4, %49 ], [ %86, %79 ]
  %81 = phi i32 [ %19, %49 ], [ %87, %79 ]
  %82 = phi <2 x float> [ <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>, %49 ], [ %85, %79 ]
  %83 = load <2 x float>, ptr %80, align 4
  %84 = fsub <2 x float> %83, %78
  %85 = fmul <2 x float> %82, %84
  %86 = getelementptr inbounds float, ptr %80, i64 2
  %87 = add nsw i32 %81, -1
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %79, !llvm.loop !208

89:                                               ; preds = %79
  %.lcssa1 = phi <2 x float> [ %85, %79 ]
  %.lcssa = phi ptr [ %86, %79 ]
  br i1 %21, label %97, label %90

90:                                               ; preds = %89
  %91 = load float, ptr %.lcssa, align 4
  %92 = fsub float %91, %76
  %93 = extractelement <2 x float> %.lcssa1, i64 0
  %94 = fmul float %93, %92
  %95 = fmul float %94, %94
  %96 = fmul float %76, %76
  br label %102

97:                                               ; preds = %89
  %98 = fadd float %76, 1.000000e+00
  %99 = extractelement <2 x float> %.lcssa1, i64 0
  %100 = fmul float %98, %99
  %101 = fmul float %99, %100
  br label %102

102:                                              ; preds = %97, %90
  %103 = phi float [ %96, %90 ], [ %76, %97 ]
  %104 = phi float [ %95, %90 ], [ %101, %97 ]
  %105 = fsub float 1.000000e+00, %103
  %106 = extractelement <2 x float> %.lcssa1, i64 1
  %107 = fmul float %106, %105
  %108 = fmul float %106, %107
  %109 = fadd float %104, %108
  %110 = fpext float %109 to double
  %111 = call double @frexp(double noundef %110, ptr noundef nonnull %9) #59
  %112 = fptrunc double %111 to float
  %113 = fmul float %112, 6.400000e+01
  %114 = fadd float %113, -3.200000e+01
  %115 = fpext float %114 to double
  %116 = fadd double %115, -5.000000e-01
  %117 = fadd double %116, 5.000000e-01
  %118 = fptosi double %117 to i32
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds [33 x float], ptr @INVSQ_LOOKUP, i64 0, i64 %119
  %121 = load float, ptr %120, align 4
  %122 = fpext float %121 to double
  %123 = sitofp i32 %118 to double
  %124 = fsub double %115, %123
  %125 = add nsw i32 %118, 1
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds [33 x float], ptr @INVSQ_LOOKUP, i64 0, i64 %126
  %128 = load float, ptr %127, align 4
  %129 = fsub float %128, %121
  %130 = fpext float %129 to double
  %131 = fmul double %124, %130
  %132 = fadd double %131, %122
  %133 = fptrunc double %132 to float
  %134 = fmul float %133, %6
  %135 = load i32, ptr %9, align 4
  %136 = add i32 %22, %135
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds [65 x float], ptr @INVSQ2EXP_LOOKUP, i64 0, i64 %137
  %139 = load float, ptr %138, align 4
  %140 = fmul float %139, %134
  %141 = fsub float %140, %7
  %142 = fmul float %141, 8.000000e+00
  %143 = fsub float -5.000000e-01, %142
  %144 = fpext float %143 to double
  %145 = fadd double %144, 5.000000e-01
  %146 = fptosi double %145 to i32
  %147 = icmp slt i32 %146, 0
  br i1 %147, label %160, label %148

148:                                              ; preds = %102
  %149 = icmp ugt i32 %146, 1119
  br i1 %149, label %160, label %150

150:                                              ; preds = %148
  %151 = lshr i32 %146, 5
  %152 = zext i32 %151 to i64
  %153 = getelementptr inbounds [35 x float], ptr @FROMdB_LOOKUP, i64 0, i64 %152
  %154 = load float, ptr %153, align 4
  %155 = and i32 %146, 31
  %156 = zext i32 %155 to i64
  %157 = getelementptr inbounds [32 x float], ptr @FROMdB2_LOOKUP, i64 0, i64 %156
  %158 = load float, ptr %157, align 4
  %159 = fmul float %154, %158
  br label %160

160:                                              ; preds = %150, %148, %102
  %161 = phi float [ 1.000000e+00, %102 ], [ %159, %150 ], [ 0.000000e+00, %148 ]
  br label %162

162:                                              ; preds = %162, %160
  %163 = phi i64 [ %164, %162 ], [ %52, %160 ]
  %164 = add i64 %163, 1
  %165 = getelementptr inbounds float, ptr %0, i64 %163
  %166 = load float, ptr %165, align 4
  %167 = fmul float %161, %166
  store float %167, ptr %165, align 4
  %168 = getelementptr inbounds i32, ptr %1, i64 %164
  %169 = load i32, ptr %168, align 4
  %170 = icmp eq i32 %169, %54
  br i1 %170, label %162, label %171, !llvm.loop !209

171:                                              ; preds = %162
  %.lcssa2 = phi i64 [ %164, %162 ]
  %172 = trunc i64 %.lcssa2 to i32
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9) #55
  %173 = icmp slt i32 %172, %2
  br i1 %173, label %49, label %174, !llvm.loop !210

174:                                              ; preds = %171, %16
  ret void
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: write)
declare double @frexp(double noundef, ptr nocapture noundef) local_unnamed_addr #34

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal i64 @vorbis_book_decodev_set(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1, ptr nocapture noundef %2, i32 noundef %3) #21 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %38

6:                                                ; preds = %4
  %7 = getelementptr inbounds %struct.codebook, ptr %0, i64 0, i32 4
  br label %13

8:                                                ; preds = %28
  %.lcssa = phi i64 [ %34, %28 ]
  %9 = trunc i64 %.lcssa to i32
  br label %10

10:                                               ; preds = %18, %8
  %11 = phi i32 [ %14, %18 ], [ %9, %8 ]
  %12 = icmp slt i32 %11, %3
  br i1 %12, label %13, label %38, !llvm.loop !211

13:                                               ; preds = %10, %6
  %14 = phi i32 [ 0, %6 ], [ %11, %10 ]
  %15 = tail call fastcc i64 @decode_packed_entry_number(ptr noundef %0, ptr noundef %2) #56
  %16 = and i64 %15, 4294967295
  %17 = icmp eq i64 %16, 4294967295
  br i1 %17, label %38, label %18

18:                                               ; preds = %13
  %19 = load ptr, ptr %7, align 8
  %20 = shl i64 %15, 32
  %21 = ashr exact i64 %20, 32
  %22 = load i64, ptr %0, align 8
  %23 = mul nsw i64 %22, %21
  %24 = getelementptr inbounds float, ptr %19, i64 %23
  %25 = icmp sgt i64 %22, 0
  br i1 %25, label %26, label %10

26:                                               ; preds = %18
  %27 = sext i32 %14 to i64
  br label %28

28:                                               ; preds = %28, %26
  %29 = phi i64 [ 0, %26 ], [ %31, %28 ]
  %30 = phi i64 [ %27, %26 ], [ %34, %28 ]
  %31 = add nuw nsw i64 %29, 1
  %32 = getelementptr inbounds float, ptr %24, i64 %29
  %33 = load float, ptr %32, align 4
  %34 = add i64 %30, 1
  %35 = getelementptr inbounds float, ptr %1, i64 %30
  store float %33, ptr %35, align 4
  %36 = load i64, ptr %0, align 8
  %37 = icmp sgt i64 %36, %31
  br i1 %37, label %28, label %8, !llvm.loop !212

38:                                               ; preds = %13, %10, %4
  %39 = phi i64 [ 0, %4 ], [ 0, %10 ], [ -1, %13 ]
  ret i64 %39
}

; Function Attrs: nounwind optsize uwtable
define internal void @_vorbis_block_ripcord(ptr nocapture noundef %0) #0 {
  %2 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 15
  %3 = load ptr, ptr %2, align 8
  %4 = icmp eq ptr %3, null
  br i1 %4, label %11, label %5

5:                                                ; preds = %5, %1
  %6 = phi ptr [ %8, %5 ], [ %3, %1 ]
  %7 = getelementptr inbounds %struct.adv_opt, ptr %6, i64 0, i32 1
  %8 = load ptr, ptr %7, align 8
  %9 = load ptr, ptr %6, align 8
  tail call void @free(ptr noundef %9) #59
  tail call void @free(ptr noundef nonnull %6) #59
  %10 = icmp eq ptr %8, null
  br i1 %10, label %11, label %5, !llvm.loop !213

11:                                               ; preds = %5, %1
  %12 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 14
  %13 = load i64, ptr %12, align 8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %25, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 11
  %17 = load ptr, ptr %16, align 8
  %18 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 13
  %19 = load i64, ptr %18, align 8
  %20 = add nsw i64 %19, %13
  %21 = tail call ptr @realloc(ptr noundef %17, i64 noundef %20) #61
  store ptr %21, ptr %16, align 8
  %22 = load i64, ptr %12, align 8
  %23 = load i64, ptr %18, align 8
  %24 = add nsw i64 %23, %22
  store i64 %24, ptr %18, align 8
  store i64 0, ptr %12, align 8
  br label %25

25:                                               ; preds = %15, %11
  %26 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 12
  store i64 0, ptr %26, align 8
  store ptr null, ptr %2, align 8
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal fastcc i32 @floater_interpolate(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, double noundef %2) unnamed_addr #35 {
  %4 = getelementptr inbounds %struct.bitrate_manager_state, ptr %0, i64 0, i32 22
  %5 = load double, ptr %4, align 8
  %6 = tail call double @llvm.rint.f64(double %5)
  %7 = fptosi double %6 to i32
  %8 = getelementptr inbounds %struct.bitrate_manager_state, ptr %0, i64 0, i32 5
  %9 = load ptr, ptr %8, align 8
  %10 = sext i32 %7 to i64
  %11 = getelementptr inbounds %struct.bitrate_manager_state, ptr %0, i64 0, i32 9
  %12 = load i32, ptr %11, align 4
  %13 = uitofp i32 %12 to double
  %14 = getelementptr inbounds %struct.vorbis_info, ptr %1, i64 0, i32 2
  %15 = load i64, ptr %14, align 8
  %16 = sitofp i64 %15 to double
  %17 = zext i32 %7 to i64
  br label %18

18:                                               ; preds = %18, %3
  %19 = phi i64 [ %31, %18 ], [ %17, %3 ]
  %20 = phi i64 [ %32, %18 ], [ %10, %3 ]
  %21 = getelementptr inbounds i64, ptr %9, i64 %20
  %22 = load i64, ptr %21, align 8
  %23 = shl nsw i64 %22, 3
  %24 = sitofp i64 %23 to double
  %25 = fdiv double %24, %13
  %26 = fmul double %25, %16
  %27 = fcmp ogt double %26, %2
  %28 = trunc i64 %19 to i32
  %29 = icmp sgt i32 %28, 0
  %30 = and i1 %29, %27
  %31 = add nsw i64 %19, -1
  %32 = and i64 %31, 4294967295
  br i1 %30, label %18, label %33, !llvm.loop !214

33:                                               ; preds = %18
  %.lcssa1 = phi double [ %26, %18 ]
  %.lcssa = phi i32 [ %28, %18 ]
  %34 = add nsw i32 %.lcssa, 1
  %35 = getelementptr inbounds %struct.bitrate_manager_state, ptr %0, i64 0, i32 4
  %36 = load i32, ptr %35, align 8
  %37 = icmp slt i32 %34, %36
  br i1 %37, label %38, label %56

38:                                               ; preds = %33
  %39 = sext i32 %34 to i64
  %40 = getelementptr inbounds i64, ptr %9, i64 %39
  %41 = load i64, ptr %40, align 8
  %42 = shl nsw i64 %41, 3
  %43 = sitofp i64 %42 to double
  %44 = fdiv double %43, %13
  %45 = fmul double %44, %16
  %46 = insertelement <2 x double> poison, double %45, i64 0
  %47 = insertelement <2 x double> %46, double %.lcssa1, i64 1
  %48 = insertelement <2 x double> poison, double %2, i64 0
  %49 = shufflevector <2 x double> %48, <2 x double> poison, <2 x i32> zeroinitializer
  %50 = fsub <2 x double> %47, %49
  %51 = tail call <2 x double> @llvm.fabs.v2f64(<2 x double> %50)
  %52 = extractelement <2 x double> %51, i64 0
  %53 = extractelement <2 x double> %51, i64 1
  %54 = fcmp olt double %52, %53
  br i1 %54, label %55, label %56

55:                                               ; preds = %38
  br label %56

56:                                               ; preds = %55, %38, %33
  %57 = phi i32 [ %34, %55 ], [ %.lcssa, %38 ], [ %.lcssa, %33 ]
  ret i32 %57
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.umax.i32(i32, i32) #27

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.umin.i32(i32, i32) #27

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal fastcc i64 @limit_sum(ptr nocapture noundef readonly %0, i32 noundef %1) unnamed_addr #36 {
  %3 = getelementptr inbounds %struct.bitrate_manager_state, ptr %0, i64 0, i32 15
  %4 = load i64, ptr %3, align 8
  %5 = trunc i64 %4 to i32
  %6 = getelementptr inbounds %struct.bitrate_manager_state, ptr %0, i64 0, i32 16
  %7 = load i64, ptr %6, align 8
  %8 = getelementptr inbounds %struct.bitrate_manager_state, ptr %0, i64 0, i32 4
  %9 = load i32, ptr %8, align 8
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds %struct.bitrate_manager_state, ptr %0, i64 0, i32 12
  %12 = load ptr, ptr %11, align 8
  %13 = shl i64 %4, 32
  %14 = ashr exact i64 %13, 31
  %15 = mul i64 %14, %10
  %16 = add nsw i64 %15, %10
  %17 = getelementptr inbounds i64, ptr %12, i64 %16
  %18 = load i64, ptr %17, align 8
  %19 = sub i64 %7, %18
  %20 = sext i32 %1 to i64
  %21 = add nsw i64 %10, %20
  %22 = add nsw i64 %15, %21
  %23 = getelementptr inbounds i64, ptr %12, i64 %22
  %24 = load i64, ptr %23, align 8
  %25 = add nsw i64 %19, %24
  %26 = icmp sgt i32 %5, 0
  br i1 %26, label %27, label %52

27:                                               ; preds = %2
  %28 = getelementptr inbounds %struct.bitrate_manager_state, ptr %0, i64 0, i32 14
  %29 = load ptr, ptr %28, align 8
  %30 = shl nsw i64 %10, 1
  %31 = and i64 %4, 4294967295
  br label %32

32:                                               ; preds = %40, %27
  %33 = phi i64 [ %31, %27 ], [ %35, %40 ]
  %34 = phi i64 [ %25, %27 ], [ %50, %40 ]
  %35 = add nsw i64 %33, -1
  %36 = and i64 %35, 4294967295
  %37 = getelementptr inbounds i64, ptr %29, i64 %36
  %38 = load i64, ptr %37, align 8
  %39 = icmp sgt i64 %38, %20
  br i1 %39, label %40, label %52

40:                                               ; preds = %32
  %41 = mul i64 %30, %36
  %42 = add i64 %41, %10
  %43 = add i64 %42, %38
  %44 = getelementptr inbounds i64, ptr %12, i64 %43
  %45 = load i64, ptr %44, align 8
  %46 = sub i64 %34, %45
  %47 = add nsw i64 %41, %21
  %48 = getelementptr inbounds i64, ptr %12, i64 %47
  %49 = load i64, ptr %48, align 8
  %50 = add nsw i64 %46, %49
  %51 = icmp ugt i64 %33, 1
  br i1 %51, label %32, label %52, !llvm.loop !215

52:                                               ; preds = %40, %32, %2
  %53 = phi i64 [ %25, %2 ], [ %34, %32 ], [ %50, %40 ]
  ret i64 %53
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memmove.p0.p0.i64(ptr nocapture writeonly, ptr nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x double> @llvm.fabs.v2f64(<2 x double>) #27

; Function Attrs: nounwind optsize uwtable
define internal void @mapping0_pack(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef %2) #0 {
  %4 = load i32, ptr %1, align 4
  %5 = icmp sgt i32 %4, 1
  br i1 %5, label %6, label %10

6:                                                ; preds = %3
  tail call void @oggpack_write(ptr noundef %2, i64 noundef 1, i32 noundef 1) #56
  %7 = load i32, ptr %1, align 4
  %8 = add nsw i32 %7, -1
  %9 = sext i32 %8 to i64
  tail call void @oggpack_write(ptr noundef %2, i64 noundef %9, i32 noundef 4) #56
  br label %11

10:                                               ; preds = %3
  tail call void @oggpack_write(ptr noundef %2, i64 noundef 0, i32 noundef 1) #56
  br label %11

11:                                               ; preds = %10, %6
  %12 = getelementptr inbounds %struct.vorbis_info_mapping0, ptr %1, i64 0, i32 4
  %13 = load i32, ptr %12, align 4
  %14 = icmp sgt i32 %13, 0
  br i1 %14, label %15, label %55

15:                                               ; preds = %11
  tail call void @oggpack_write(ptr noundef %2, i64 noundef 1, i32 noundef 1) #56
  %16 = load i32, ptr %12, align 4
  %17 = add nsw i32 %16, -1
  %18 = sext i32 %17 to i64
  tail call void @oggpack_write(ptr noundef %2, i64 noundef %18, i32 noundef 8) #56
  %19 = load i32, ptr %12, align 4
  %20 = icmp sgt i32 %19, 0
  br i1 %20, label %21, label %56

21:                                               ; preds = %15
  %22 = getelementptr inbounds %struct.vorbis_info, ptr %0, i64 0, i32 1
  br label %23

23:                                               ; preds = %49, %21
  %24 = phi i64 [ 0, %21 ], [ %51, %49 ]
  %25 = getelementptr inbounds %struct.vorbis_info_mapping0, ptr %1, i64 0, i32 5, i64 %24
  %26 = load i32, ptr %25, align 4
  %27 = sext i32 %26 to i64
  %28 = load i32, ptr %22, align 4
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %36, label %30

30:                                               ; preds = %30, %23
  %31 = phi i32 [ %33, %30 ], [ 0, %23 ]
  %32 = phi i32 [ %34, %30 ], [ %28, %23 ]
  %33 = add nuw nsw i32 %31, 1
  %34 = lshr i32 %32, 1
  %35 = icmp ult i32 %32, 2
  br i1 %35, label %36, label %30, !llvm.loop !107

36:                                               ; preds = %30, %23
  %37 = phi i32 [ 0, %23 ], [ %33, %30 ]
  tail call void @oggpack_write(ptr noundef %2, i64 noundef %27, i32 noundef %37) #56
  %38 = getelementptr inbounds %struct.vorbis_info_mapping0, ptr %1, i64 0, i32 6, i64 %24
  %39 = load i32, ptr %38, align 4
  %40 = sext i32 %39 to i64
  %41 = load i32, ptr %22, align 4
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %49, label %43

43:                                               ; preds = %43, %36
  %44 = phi i32 [ %46, %43 ], [ 0, %36 ]
  %45 = phi i32 [ %47, %43 ], [ %41, %36 ]
  %46 = add nuw nsw i32 %44, 1
  %47 = lshr i32 %45, 1
  %48 = icmp ult i32 %45, 2
  br i1 %48, label %49, label %43, !llvm.loop !107

49:                                               ; preds = %43, %36
  %50 = phi i32 [ 0, %36 ], [ %46, %43 ]
  tail call void @oggpack_write(ptr noundef %2, i64 noundef %40, i32 noundef %50) #56
  %51 = add nuw nsw i64 %24, 1
  %52 = load i32, ptr %12, align 4
  %53 = sext i32 %52 to i64
  %54 = icmp slt i64 %51, %53
  br i1 %54, label %23, label %56, !llvm.loop !216

55:                                               ; preds = %11
  tail call void @oggpack_write(ptr noundef %2, i64 noundef 0, i32 noundef 1) #56
  br label %56

56:                                               ; preds = %55, %49, %15
  tail call void @oggpack_write(ptr noundef %2, i64 noundef 0, i32 noundef 2) #56
  %57 = load i32, ptr %1, align 4
  %58 = icmp sgt i32 %57, 1
  br i1 %58, label %59, label %74

59:                                               ; preds = %56
  %60 = getelementptr inbounds %struct.vorbis_info, ptr %0, i64 0, i32 1
  %61 = load i32, ptr %60, align 4
  %62 = icmp sgt i32 %61, 0
  br i1 %62, label %63, label %77

63:                                               ; preds = %63, %59
  %64 = phi i64 [ %68, %63 ], [ 0, %59 ]
  %65 = getelementptr inbounds %struct.vorbis_info_mapping0, ptr %1, i64 0, i32 1, i64 %64
  %66 = load i32, ptr %65, align 4
  %67 = sext i32 %66 to i64
  tail call void @oggpack_write(ptr noundef %2, i64 noundef %67, i32 noundef 4) #56
  %68 = add nuw nsw i64 %64, 1
  %69 = load i32, ptr %60, align 4
  %70 = sext i32 %69 to i64
  %71 = icmp slt i64 %68, %70
  br i1 %71, label %63, label %72, !llvm.loop !217

72:                                               ; preds = %63
  %73 = load i32, ptr %1, align 4
  br label %74

74:                                               ; preds = %72, %56
  %75 = phi i32 [ %73, %72 ], [ %57, %56 ]
  %76 = icmp sgt i32 %75, 0
  br i1 %76, label %77, label %90

77:                                               ; preds = %74, %59
  br label %78

78:                                               ; preds = %78, %77
  %79 = phi i64 [ %86, %78 ], [ 0, %77 ]
  tail call void @oggpack_write(ptr noundef %2, i64 noundef 0, i32 noundef 8) #56
  %80 = getelementptr inbounds %struct.vorbis_info_mapping0, ptr %1, i64 0, i32 2, i64 %79
  %81 = load i32, ptr %80, align 4
  %82 = sext i32 %81 to i64
  tail call void @oggpack_write(ptr noundef %2, i64 noundef %82, i32 noundef 8) #56
  %83 = getelementptr inbounds %struct.vorbis_info_mapping0, ptr %1, i64 0, i32 3, i64 %79
  %84 = load i32, ptr %83, align 4
  %85 = sext i32 %84 to i64
  tail call void @oggpack_write(ptr noundef %2, i64 noundef %85, i32 noundef 8) #56
  %86 = add nuw nsw i64 %79, 1
  %87 = load i32, ptr %1, align 4
  %88 = sext i32 %87 to i64
  %89 = icmp slt i64 %86, %88
  br i1 %89, label %78, label %90, !llvm.loop !218

90:                                               ; preds = %78, %74
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal noalias ptr @mapping0_unpack(ptr nocapture noundef readonly %0, ptr nocapture noundef %1) #0 {
  %3 = tail call noalias dereferenceable_or_null(3208) ptr @calloc(i64 noundef 1, i64 noundef 3208) #65
  %4 = getelementptr inbounds %struct.vorbis_info, ptr %0, i64 0, i32 7
  %5 = load ptr, ptr %4, align 8
  %6 = tail call i64 @oggpack_read(ptr noundef %1, i32 noundef 1) #56
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %12, label %8

8:                                                ; preds = %2
  %9 = tail call i64 @oggpack_read(ptr noundef %1, i32 noundef 4) #56
  %10 = trunc i64 %9 to i32
  %11 = add i32 %10, 1
  br label %12

12:                                               ; preds = %8, %2
  %13 = phi i32 [ %11, %8 ], [ 1, %2 ]
  store i32 %13, ptr %3, align 4
  %14 = tail call i64 @oggpack_read(ptr noundef %1, i32 noundef 1) #56
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %67, label %16

16:                                               ; preds = %12
  %17 = tail call i64 @oggpack_read(ptr noundef %1, i32 noundef 8) #56
  %18 = trunc i64 %17 to i32
  %19 = add i32 %18, 1
  %20 = getelementptr inbounds %struct.vorbis_info_mapping0, ptr %3, i64 0, i32 4
  store i32 %19, ptr %20, align 4
  %21 = icmp ult i32 %18, 2147483647
  br i1 %21, label %22, label %67

22:                                               ; preds = %16
  %23 = getelementptr inbounds %struct.vorbis_info, ptr %0, i64 0, i32 1
  %24 = load i32, ptr %23, align 4
  %25 = sext i32 %19 to i64
  br label %29

26:                                               ; preds = %62
  %27 = add nuw nsw i64 %31, 1
  %28 = icmp slt i64 %27, %25
  br i1 %28, label %29, label %67, !llvm.loop !219

29:                                               ; preds = %26, %22
  %30 = phi i32 [ %24, %22 ], [ %63, %26 ]
  %31 = phi i64 [ 0, %22 ], [ %27, %26 ]
  %32 = icmp eq i32 %30, 0
  br i1 %32, label %39, label %33

33:                                               ; preds = %33, %29
  %34 = phi i32 [ %36, %33 ], [ 0, %29 ]
  %35 = phi i32 [ %37, %33 ], [ %30, %29 ]
  %36 = add nuw nsw i32 %34, 1
  %37 = lshr i32 %35, 1
  %38 = icmp ult i32 %35, 2
  br i1 %38, label %39, label %33, !llvm.loop !107

39:                                               ; preds = %33, %29
  %40 = phi i32 [ 0, %29 ], [ %36, %33 ]
  %41 = tail call i64 @oggpack_read(ptr noundef %1, i32 noundef %40) #56
  %42 = trunc i64 %41 to i32
  %43 = getelementptr inbounds %struct.vorbis_info_mapping0, ptr %3, i64 0, i32 5, i64 %31
  store i32 %42, ptr %43, align 4
  %44 = load i32, ptr %23, align 4
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %52, label %46

46:                                               ; preds = %46, %39
  %47 = phi i32 [ %49, %46 ], [ 0, %39 ]
  %48 = phi i32 [ %50, %46 ], [ %44, %39 ]
  %49 = add nuw nsw i32 %47, 1
  %50 = lshr i32 %48, 1
  %51 = icmp ult i32 %48, 2
  br i1 %51, label %52, label %46, !llvm.loop !107

52:                                               ; preds = %46, %39
  %53 = phi i32 [ 0, %39 ], [ %49, %46 ]
  %54 = tail call i64 @oggpack_read(ptr noundef %1, i32 noundef %53) #56
  %55 = trunc i64 %54 to i32
  %56 = getelementptr inbounds %struct.vorbis_info_mapping0, ptr %3, i64 0, i32 6, i64 %31
  store i32 %55, ptr %56, align 4
  %57 = icmp slt i32 %42, 0
  %58 = icmp slt i32 %55, 0
  %59 = select i1 %57, i1 true, i1 %58
  %60 = icmp eq i32 %42, %55
  %61 = select i1 %59, i1 true, i1 %60
  br i1 %61, label %110, label %62

62:                                               ; preds = %52
  %63 = load i32, ptr %23, align 4
  %64 = icmp sgt i32 %63, %42
  %65 = icmp sgt i32 %63, %55
  %66 = select i1 %64, i1 %65, i1 false
  br i1 %66, label %26, label %110

67:                                               ; preds = %26, %16, %12
  %68 = tail call i64 @oggpack_read(ptr noundef %1, i32 noundef 2) #56
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %110, label %70

70:                                               ; preds = %67
  %71 = icmp sgt i32 %13, 1
  br i1 %71, label %72, label %87

72:                                               ; preds = %70
  %73 = getelementptr inbounds %struct.vorbis_info, ptr %0, i64 0, i32 1
  %74 = load i32, ptr %73, align 4
  %75 = icmp sgt i32 %74, 0
  br i1 %75, label %81, label %89

76:                                               ; preds = %81
  %77 = add nuw nsw i64 %82, 1
  %78 = load i32, ptr %73, align 4
  %79 = sext i32 %78 to i64
  %80 = icmp slt i64 %77, %79
  br i1 %80, label %81, label %87, !llvm.loop !220

81:                                               ; preds = %76, %72
  %82 = phi i64 [ %77, %76 ], [ 0, %72 ]
  %83 = tail call i64 @oggpack_read(ptr noundef %1, i32 noundef 4) #56
  %84 = trunc i64 %83 to i32
  %85 = getelementptr inbounds %struct.vorbis_info_mapping0, ptr %3, i64 0, i32 1, i64 %82
  store i32 %84, ptr %85, align 4
  %86 = icmp sgt i32 %13, %84
  br i1 %86, label %76, label %110

87:                                               ; preds = %76, %70
  %88 = icmp sgt i32 %13, 0
  br i1 %88, label %89, label %111

89:                                               ; preds = %87, %72
  %90 = getelementptr inbounds %struct.codec_setup_info, ptr %5, i64 0, i32 3
  %91 = getelementptr inbounds %struct.codec_setup_info, ptr %5, i64 0, i32 4
  %92 = zext i32 %13 to i64
  br label %96

93:                                               ; preds = %104
  %94 = add nuw nsw i64 %97, 1
  %95 = icmp eq i64 %94, %92
  br i1 %95, label %111, label %96, !llvm.loop !221

96:                                               ; preds = %93, %89
  %97 = phi i64 [ 0, %89 ], [ %94, %93 ]
  %98 = tail call i64 @oggpack_read(ptr noundef %1, i32 noundef 8) #56
  %99 = tail call i64 @oggpack_read(ptr noundef %1, i32 noundef 8) #56
  %100 = trunc i64 %99 to i32
  %101 = getelementptr inbounds %struct.vorbis_info_mapping0, ptr %3, i64 0, i32 2, i64 %97
  store i32 %100, ptr %101, align 4
  %102 = load i32, ptr %90, align 8
  %103 = icmp sgt i32 %102, %100
  br i1 %103, label %104, label %110

104:                                              ; preds = %96
  %105 = tail call i64 @oggpack_read(ptr noundef %1, i32 noundef 8) #56
  %106 = trunc i64 %105 to i32
  %107 = getelementptr inbounds %struct.vorbis_info_mapping0, ptr %3, i64 0, i32 3, i64 %97
  store i32 %106, ptr %107, align 4
  %108 = load i32, ptr %91, align 4
  %109 = icmp sgt i32 %108, %106
  br i1 %109, label %93, label %110

110:                                              ; preds = %104, %96, %81, %67, %62, %52
  tail call void @free(ptr noundef nonnull %3) #59
  br label %111

111:                                              ; preds = %110, %93, %87
  %112 = phi ptr [ null, %110 ], [ %3, %87 ], [ %3, %93 ]
  ret ptr %112
}

; Function Attrs: mustprogress nounwind optsize willreturn memory(argmem: readwrite, inaccessiblemem: readwrite) uwtable
define internal void @mapping0_free_info(ptr noundef %0) #24 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %4, label %3

3:                                                ; preds = %1
  tail call void @free(ptr noundef nonnull %0) #59
  br label %4

4:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @mapping0_forward(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 10
  %3 = load ptr, ptr %2, align 8
  %4 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %3, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr inbounds %struct.vorbis_info, ptr %5, i64 0, i32 7
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %3, i64 0, i32 19
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 20
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 5
  %13 = load i32, ptr %12, align 8
  %14 = getelementptr inbounds %struct.vorbis_info, ptr %5, i64 0, i32 1
  %15 = load i32, ptr %14, align 4
  %16 = sext i32 %15 to i64
  %17 = shl nsw i64 %16, 2
  %18 = alloca i8, i64 %17, align 16
  %19 = shl nsw i64 %16, 3
  %20 = tail call ptr @_vorbis_block_alloc(ptr noundef %0, i64 noundef %19) #56
  %21 = load i32, ptr %14, align 4
  %22 = sext i32 %21 to i64
  %23 = shl nsw i64 %22, 3
  %24 = tail call ptr @_vorbis_block_alloc(ptr noundef %0, i64 noundef %23) #56
  %25 = load i32, ptr %14, align 4
  %26 = sext i32 %25 to i64
  %27 = shl nsw i64 %26, 3
  %28 = tail call ptr @_vorbis_block_alloc(ptr noundef %0, i64 noundef %27) #56
  %29 = getelementptr inbounds %struct.vorbis_block_internal, ptr %11, i64 0, i32 1
  %30 = load float, ptr %29, align 8
  %31 = load i32, ptr %14, align 4
  %32 = sext i32 %31 to i64
  %33 = shl nsw i64 %32, 2
  %34 = alloca i8, i64 %33, align 16
  %35 = getelementptr inbounds %struct.vorbis_block_internal, ptr %11, i64 0, i32 2
  %36 = load i32, ptr %35, align 4
  %37 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 3
  %38 = load i64, ptr %37, align 8
  %39 = trunc i64 %38 to i32
  %40 = shl i64 %38, 32
  %41 = ashr exact i64 %40, 32
  %42 = getelementptr inbounds %struct.codec_setup_info, ptr %7, i64 0, i32 9, i64 %41
  %43 = load ptr, ptr %42, align 8
  %44 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 7
  %45 = load ptr, ptr %44, align 8
  %46 = sext i32 %36 to i64
  %47 = getelementptr inbounds %struct.vorbis_look_psy, ptr %45, i64 %46
  %48 = icmp eq i64 %38, 0
  %49 = select i1 %48, i64 0, i64 2
  %50 = getelementptr inbounds %struct.vorbis_look_psy, ptr %47, i64 %49
  %51 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 6
  store i32 %39, ptr %51, align 4
  %52 = load i32, ptr %14, align 4
  %53 = icmp sgt i32 %52, 0
  br i1 %53, label %58, label %54

54:                                               ; preds = %1
  %55 = sdiv i32 %13, 2
  %56 = sext i32 %55 to i64
  %57 = shl nsw i64 %56, 2
  br label %139

58:                                               ; preds = %1
  %59 = sitofp i32 %13 to float
  %60 = fdiv float 4.000000e+00, %59
  %61 = sdiv i32 %13, 2
  %62 = sext i32 %61 to i64
  %63 = shl nsw i64 %62, 2
  %64 = bitcast float %60 to i32
  %65 = and i32 %64, 2147483647
  %66 = sitofp i32 %65 to float
  %67 = fmul float %66, 0x3EA8151820000000
  %68 = fadd float %67, 0xC087E22B60000000
  %69 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 1
  %70 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 2
  %71 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 4
  %72 = add nsw i32 %13, -1
  %73 = icmp sgt i32 %13, 2
  %74 = sext i32 %72 to i64
  br label %75

75:                                               ; preds = %131, %58
  %76 = phi i64 [ 0, %58 ], [ %135, %131 ]
  %77 = phi float [ %30, %58 ], [ %134, %131 ]
  %78 = load ptr, ptr %0, align 8
  %79 = getelementptr inbounds ptr, ptr %78, i64 %76
  %80 = load ptr, ptr %79, align 8
  %81 = tail call ptr @_vorbis_block_alloc(ptr noundef nonnull %0, i64 noundef %63) #56
  %82 = getelementptr inbounds ptr, ptr %20, i64 %76
  store ptr %81, ptr %82, align 8
  %83 = load i64, ptr %70, align 8
  %84 = trunc i64 %83 to i32
  %85 = load i64, ptr %37, align 8
  %86 = trunc i64 %85 to i32
  %87 = load i64, ptr %71, align 8
  %88 = trunc i64 %87 to i32
  tail call void @_vorbis_apply_window(ptr noundef %80, ptr noundef nonnull %69, ptr noundef %7, i32 noundef %84, i32 noundef %86, i32 noundef %88) #56
  %89 = load i64, ptr %37, align 8
  %90 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 2, i64 %89
  %91 = load ptr, ptr %90, align 8
  %92 = load ptr, ptr %91, align 8
  %93 = load ptr, ptr %82, align 8
  tail call void @mdct_forward(ptr noundef %92, ptr noundef %80, ptr noundef %93) #56
  %94 = load i64, ptr %37, align 8
  %95 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 3, i64 %94
  tail call void @drft_forward(ptr noundef nonnull %95, ptr noundef %80) #56
  %96 = load i32, ptr %80, align 4
  %97 = and i32 %96, 2147483647
  %98 = sitofp i32 %97 to float
  %99 = fmul float %98, 0x3EA8151820000000
  %100 = fadd float %99, 0xC087E22B60000000
  %101 = fadd float %68, %100
  store float %101, ptr %80, align 4
  %102 = getelementptr inbounds float, ptr %34, i64 %76
  store float %101, ptr %102, align 4
  br i1 %73, label %103, label %127

103:                                              ; preds = %103, %75
  %104 = phi i64 [ %124, %103 ], [ 1, %75 ]
  %105 = phi float [ %123, %103 ], [ %101, %75 ]
  %106 = getelementptr inbounds float, ptr %80, i64 %104
  %107 = add nuw nsw i64 %104, 1
  %108 = load <2 x float>, ptr %106, align 4
  %109 = fmul <2 x float> %108, %108
  %110 = shufflevector <2 x float> %109, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %111 = fadd <2 x float> %109, %110
  %112 = bitcast <2 x float> %111 to <2 x i32>
  %113 = extractelement <2 x i32> %112, i64 0
  %114 = and i32 %113, 2147483647
  %115 = sitofp i32 %114 to float
  %116 = fmul float %115, 0x3EA8151820000000
  %117 = fadd float %116, 0xC087E22B60000000
  %118 = fmul float %117, 5.000000e-01
  %119 = fadd float %68, %118
  %120 = lshr i64 %107, 1
  %121 = getelementptr inbounds float, ptr %80, i64 %120
  store float %119, ptr %121, align 4
  %122 = fcmp ogt float %119, %105
  %123 = select i1 %122, float %119, float %105
  %124 = add nuw nsw i64 %104, 2
  %125 = icmp slt i64 %124, %74
  br i1 %125, label %103, label %126, !llvm.loop !222

126:                                              ; preds = %103
  %.lcssa = phi float [ %123, %103 ]
  store float %.lcssa, ptr %102, align 4
  br label %127

127:                                              ; preds = %126, %75
  %128 = phi float [ %.lcssa, %126 ], [ %101, %75 ]
  %129 = fcmp ogt float %128, 0.000000e+00
  br i1 %129, label %130, label %131

130:                                              ; preds = %127
  store float 0.000000e+00, ptr %102, align 4
  br label %131

131:                                              ; preds = %130, %127
  %132 = phi float [ 0.000000e+00, %130 ], [ %128, %127 ]
  %133 = fcmp ogt float %132, %77
  %134 = select i1 %133, float %132, float %77
  %135 = add nuw nsw i64 %76, 1
  %136 = load i32, ptr %14, align 4
  %137 = sext i32 %136 to i64
  %138 = icmp slt i64 %135, %137
  br i1 %138, label %75, label %139, !llvm.loop !223

139:                                              ; preds = %131, %54
  %140 = phi i64 [ %57, %54 ], [ %63, %131 ]
  %141 = phi i64 [ %56, %54 ], [ %62, %131 ]
  %142 = phi i32 [ %55, %54 ], [ %61, %131 ]
  %143 = phi float [ %30, %54 ], [ %134, %131 ]
  %144 = tail call ptr @_vorbis_block_alloc(ptr noundef %0, i64 noundef %140) #56
  %145 = tail call ptr @_vorbis_block_alloc(ptr noundef %0, i64 noundef %140) #56
  %146 = load i32, ptr %14, align 4
  %147 = icmp sgt i32 %146, 0
  br i1 %147, label %148, label %264

148:                                              ; preds = %139
  %149 = icmp sgt i32 %13, 1
  %150 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 5
  %151 = zext i32 %142 to i64
  br label %152

152:                                              ; preds = %259, %148
  %153 = phi i64 [ 0, %148 ], [ %260, %259 ]
  %154 = getelementptr inbounds %struct.vorbis_info_mapping0, ptr %43, i64 0, i32 1, i64 %153
  %155 = load i32, ptr %154, align 4
  %156 = getelementptr inbounds ptr, ptr %20, i64 %153
  %157 = load ptr, ptr %156, align 8
  %158 = load ptr, ptr %0, align 8
  %159 = getelementptr inbounds ptr, ptr %158, i64 %153
  %160 = load ptr, ptr %159, align 8
  %161 = getelementptr inbounds float, ptr %160, i64 %141
  store i32 %39, ptr %51, align 4
  %162 = tail call ptr @_vorbis_block_alloc(ptr noundef nonnull %0, i64 noundef 120) #56
  %163 = getelementptr inbounds ptr, ptr %28, i64 %153
  store ptr %162, ptr %163, align 8
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(120) %162, i8 0, i64 120, i1 false)
  br i1 %149, label %164, label %175

164:                                              ; preds = %164, %152
  %165 = phi i64 [ %173, %164 ], [ 0, %152 ]
  %166 = getelementptr inbounds float, ptr %157, i64 %165
  %167 = load i32, ptr %166, align 4
  %168 = and i32 %167, 2147483647
  %169 = sitofp i32 %168 to float
  %170 = fmul float %169, 0x3EA8151820000000
  %171 = fadd float %170, 0xC087E22B60000000
  %172 = getelementptr inbounds float, ptr %161, i64 %165
  store float %171, ptr %172, align 4
  %173 = add nuw nsw i64 %165, 1
  %174 = icmp eq i64 %173, %151
  br i1 %174, label %175, label %164, !llvm.loop !224

175:                                              ; preds = %164, %152
  tail call void @_vp_noisemask(ptr noundef %50, ptr noundef %161, ptr noundef %144) #56
  %176 = getelementptr inbounds float, ptr %34, i64 %153
  %177 = load float, ptr %176, align 4
  tail call void @_vp_tonemask(ptr noundef %50, ptr noundef %160, ptr noundef %145, float noundef %143, float noundef %177) #56
  tail call void @_vp_offset_and_mix(ptr noundef %50, ptr noundef %144, ptr noundef %145, i32 noundef 1, ptr noundef %160) #56
  %178 = sext i32 %155 to i64
  %179 = getelementptr inbounds %struct.vorbis_info_mapping0, ptr %43, i64 0, i32 2, i64 %178
  %180 = load i32, ptr %179, align 4
  %181 = sext i32 %180 to i64
  %182 = getelementptr inbounds %struct.codec_setup_info, ptr %7, i64 0, i32 10, i64 %181
  %183 = load i32, ptr %182, align 4
  %184 = icmp eq i32 %183, 1
  br i1 %184, label %185, label %466

185:                                              ; preds = %175
  %186 = load ptr, ptr %150, align 8
  %187 = getelementptr inbounds ptr, ptr %186, i64 %181
  %188 = load ptr, ptr %187, align 8
  %189 = tail call ptr @floor1_fit(ptr noundef nonnull %0, ptr noundef %188, ptr noundef %161, ptr noundef %160) #56
  %190 = load ptr, ptr %163, align 8
  %191 = getelementptr inbounds ptr, ptr %190, i64 7
  store ptr %189, ptr %191, align 8
  %192 = load ptr, ptr %2, align 8
  %193 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %192, i64 0, i32 19
  %194 = load ptr, ptr %193, align 8
  %195 = getelementptr inbounds %struct.private_state, ptr %194, i64 0, i32 12
  %196 = load ptr, ptr %195, align 8
  %197 = icmp eq ptr %196, null
  br i1 %197, label %259, label %198

198:                                              ; preds = %185
  %199 = load ptr, ptr %163, align 8
  %200 = getelementptr inbounds ptr, ptr %199, i64 7
  %201 = load ptr, ptr %200, align 8
  %202 = icmp eq ptr %201, null
  br i1 %202, label %259, label %203

203:                                              ; preds = %198
  tail call void @_vp_offset_and_mix(ptr noundef %50, ptr noundef %144, ptr noundef %145, i32 noundef 2, ptr noundef %160) #56
  %204 = load ptr, ptr %150, align 8
  %205 = load i32, ptr %179, align 4
  %206 = sext i32 %205 to i64
  %207 = getelementptr inbounds ptr, ptr %204, i64 %206
  %208 = load ptr, ptr %207, align 8
  %209 = tail call ptr @floor1_fit(ptr noundef nonnull %0, ptr noundef %208, ptr noundef %161, ptr noundef %160) #56
  %210 = load ptr, ptr %163, align 8
  %211 = getelementptr inbounds ptr, ptr %210, i64 14
  store ptr %209, ptr %211, align 8
  tail call void @_vp_offset_and_mix(ptr noundef %50, ptr noundef %144, ptr noundef %145, i32 noundef 0, ptr noundef %160) #56
  %212 = load ptr, ptr %150, align 8
  %213 = load i32, ptr %179, align 4
  %214 = sext i32 %213 to i64
  %215 = getelementptr inbounds ptr, ptr %212, i64 %214
  %216 = load ptr, ptr %215, align 8
  %217 = tail call ptr @floor1_fit(ptr noundef nonnull %0, ptr noundef %216, ptr noundef %161, ptr noundef %160) #56
  %218 = load ptr, ptr %163, align 8
  store ptr %217, ptr %218, align 8
  br label %219

219:                                              ; preds = %219, %203
  %220 = phi i64 [ 1, %203 ], [ %236, %219 ]
  %221 = load ptr, ptr %150, align 8
  %222 = load i32, ptr %179, align 4
  %223 = sext i32 %222 to i64
  %224 = getelementptr inbounds ptr, ptr %221, i64 %223
  %225 = load ptr, ptr %224, align 8
  %226 = load ptr, ptr %163, align 8
  %227 = load ptr, ptr %226, align 8
  %228 = getelementptr inbounds ptr, ptr %226, i64 7
  %229 = load ptr, ptr %228, align 8
  %230 = trunc i64 %220 to i32
  %231 = shl i32 %230, 16
  %232 = udiv i32 %231, 7
  %233 = tail call ptr @floor1_interpolate_fit(ptr noundef nonnull %0, ptr noundef %225, ptr noundef %227, ptr noundef %229, i32 noundef %232) #56
  %234 = load ptr, ptr %163, align 8
  %235 = getelementptr inbounds ptr, ptr %234, i64 %220
  store ptr %233, ptr %235, align 8
  %236 = add nuw nsw i64 %220, 1
  %237 = icmp eq i64 %236, 7
  br i1 %237, label %238, label %219, !llvm.loop !225

238:                                              ; preds = %238, %219
  %239 = phi i64 [ %257, %238 ], [ 8, %219 ]
  %240 = load ptr, ptr %150, align 8
  %241 = load i32, ptr %179, align 4
  %242 = sext i32 %241 to i64
  %243 = getelementptr inbounds ptr, ptr %240, i64 %242
  %244 = load ptr, ptr %243, align 8
  %245 = load ptr, ptr %163, align 8
  %246 = getelementptr inbounds ptr, ptr %245, i64 7
  %247 = load ptr, ptr %246, align 8
  %248 = getelementptr inbounds ptr, ptr %245, i64 14
  %249 = load ptr, ptr %248, align 8
  %250 = trunc i64 %239 to i32
  %251 = shl i32 %250, 16
  %252 = add i32 %251, -458752
  %253 = udiv i32 %252, 7
  %254 = tail call ptr @floor1_interpolate_fit(ptr noundef nonnull %0, ptr noundef %244, ptr noundef %247, ptr noundef %249, i32 noundef %253) #56
  %255 = load ptr, ptr %163, align 8
  %256 = getelementptr inbounds ptr, ptr %255, i64 %239
  store ptr %254, ptr %256, align 8
  %257 = add nuw nsw i64 %239, 1
  %258 = icmp eq i64 %257, 14
  br i1 %258, label %259, label %238, !llvm.loop !226

259:                                              ; preds = %238, %198, %185
  %260 = add nuw nsw i64 %153, 1
  %261 = load i32, ptr %14, align 4
  %262 = sext i32 %261 to i64
  %263 = icmp slt i64 %260, %262
  br i1 %263, label %152, label %264, !llvm.loop !227

264:                                              ; preds = %259, %139
  store float %143, ptr %29, align 8
  %265 = load i32, ptr %14, align 4
  %266 = sext i32 %265 to i64
  %267 = shl nsw i64 %266, 3
  %268 = alloca i8, i64 %267, align 16
  %269 = shl nsw i64 %266, 2
  %270 = alloca i8, i64 %269, align 16
  %271 = alloca i8, i64 %267, align 16
  %272 = getelementptr inbounds %struct.vorbis_info_mapping0, ptr %43, i64 0, i32 4
  %273 = load i32, ptr %272, align 4
  %274 = icmp eq i32 %273, 0
  br i1 %274, label %282, label %275

275:                                              ; preds = %264
  %276 = getelementptr inbounds %struct.codec_setup_info, ptr %7, i64 0, i32 17
  %277 = tail call ptr @_vp_quantize_couple_memo(ptr noundef %0, ptr noundef nonnull %276, ptr noundef %50, ptr noundef nonnull %43, ptr noundef %20) #56
  %278 = tail call ptr @_vp_quantize_couple_sort(ptr noundef %0, ptr noundef %50, ptr noundef nonnull %43, ptr noundef %277) #56
  %279 = load i32, ptr %14, align 4
  %280 = sext i32 %279 to i64
  %281 = shl nsw i64 %280, 3
  br label %282

282:                                              ; preds = %275, %264
  %283 = phi i64 [ %281, %275 ], [ %267, %264 ]
  %284 = phi i32 [ %279, %275 ], [ %265, %264 ]
  %285 = phi ptr [ %278, %275 ], [ undef, %264 ]
  %286 = phi ptr [ %277, %275 ], [ undef, %264 ]
  call void @llvm.memset.p0.i64(ptr nonnull align 16 %271, i8 0, i64 %283, i1 false)
  %287 = getelementptr inbounds %struct.vorbis_look_psy, ptr %47, i64 %49, i32 1
  %288 = load ptr, ptr %287, align 8
  %289 = getelementptr inbounds %struct.vorbis_info_psy, ptr %288, i64 0, i32 18
  %290 = load i32, ptr %289, align 4
  %291 = icmp ne i32 %290, 0
  %292 = icmp sgt i32 %284, 0
  %293 = select i1 %291, i1 %292, i1 false
  br i1 %293, label %294, label %308

294:                                              ; preds = %282
  %295 = sext i32 %13 to i64
  %296 = shl nsw i64 %295, 1
  %297 = and i64 %296, 9223372036854775806
  br label %298

298:                                              ; preds = %298, %294
  %299 = phi i64 [ 0, %294 ], [ %304, %298 ]
  %300 = getelementptr inbounds ptr, ptr %20, i64 %299
  %301 = load ptr, ptr %300, align 8
  %302 = alloca i8, i64 %297, align 16
  %303 = getelementptr inbounds ptr, ptr %271, i64 %299
  store ptr %302, ptr %303, align 8
  call void @_vp_noise_normalize_sort(ptr noundef %50, ptr noundef %301, ptr noundef nonnull %302) #56
  %304 = add nuw nsw i64 %299, 1
  %305 = load i32, ptr %14, align 4
  %306 = sext i32 %305 to i64
  %307 = icmp slt i64 %304, %306
  br i1 %307, label %298, label %308, !llvm.loop !228

308:                                              ; preds = %298, %282
  %309 = load ptr, ptr %2, align 8
  %310 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %309, i64 0, i32 19
  %311 = load ptr, ptr %310, align 8
  %312 = getelementptr inbounds %struct.private_state, ptr %311, i64 0, i32 12
  %313 = load ptr, ptr %312, align 8
  %314 = icmp eq ptr %313, null
  %315 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 1
  %316 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 4
  %317 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 2
  %318 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 4
  %319 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 5
  %320 = getelementptr inbounds %struct.codec_setup_info, ptr %7, i64 0, i32 17
  %321 = getelementptr inbounds %struct.private_state, ptr %9, i64 0, i32 6
  %322 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 1, i32 1
  %323 = select i1 %314, i64 7, i64 0
  br label %324

324:                                              ; preds = %449, %308
  %325 = phi i64 [ %323, %308 ], [ %457, %449 ]
  call void @oggpack_write(ptr noundef nonnull %315, i64 noundef 0, i32 noundef 1) #56
  %326 = load i32, ptr %316, align 8
  call void @oggpack_write(ptr noundef nonnull %315, i64 noundef %41, i32 noundef %326) #56
  %327 = load i64, ptr %37, align 8
  %328 = icmp eq i64 %327, 0
  br i1 %328, label %332, label %329

329:                                              ; preds = %324
  %330 = load i64, ptr %317, align 8
  call void @oggpack_write(ptr noundef nonnull %315, i64 noundef %330, i32 noundef 1) #56
  %331 = load i64, ptr %318, align 8
  call void @oggpack_write(ptr noundef nonnull %315, i64 noundef %331, i32 noundef 1) #56
  br label %332

332:                                              ; preds = %329, %324
  %333 = load i32, ptr %14, align 4
  %334 = icmp sgt i32 %333, 0
  br i1 %334, label %335, label %369

335:                                              ; preds = %335, %332
  %336 = phi i64 [ %365, %335 ], [ 0, %332 ]
  %337 = getelementptr inbounds %struct.vorbis_info_mapping0, ptr %43, i64 0, i32 1, i64 %336
  %338 = load i32, ptr %337, align 4
  %339 = getelementptr inbounds ptr, ptr %20, i64 %336
  %340 = load ptr, ptr %339, align 8
  %341 = load ptr, ptr %0, align 8
  %342 = getelementptr inbounds ptr, ptr %341, i64 %336
  %343 = load ptr, ptr %342, align 8
  %344 = call ptr @_vorbis_block_alloc(ptr noundef nonnull %0, i64 noundef %140) #56
  %345 = getelementptr inbounds ptr, ptr %24, i64 %336
  store ptr %344, ptr %345, align 8
  %346 = load ptr, ptr %319, align 8
  %347 = sext i32 %338 to i64
  %348 = getelementptr inbounds %struct.vorbis_info_mapping0, ptr %43, i64 0, i32 2, i64 %347
  %349 = load i32, ptr %348, align 4
  %350 = sext i32 %349 to i64
  %351 = getelementptr inbounds ptr, ptr %346, i64 %350
  %352 = load ptr, ptr %351, align 8
  %353 = getelementptr inbounds ptr, ptr %28, i64 %336
  %354 = load ptr, ptr %353, align 8
  %355 = getelementptr inbounds ptr, ptr %354, i64 %325
  %356 = load ptr, ptr %355, align 8
  %357 = call i32 @floor1_encode(ptr noundef nonnull %0, ptr noundef %352, ptr noundef %356, ptr noundef %344) #56, !range !36
  %358 = getelementptr inbounds i32, ptr %18, i64 %336
  store i32 %357, ptr %358, align 4
  %359 = load i64, ptr %37, align 8
  %360 = getelementptr inbounds %struct.codec_setup_info, ptr %7, i64 0, i32 17, i32 10, i64 %359, i64 %325
  %361 = load i32, ptr %360, align 4
  call void @_vp_remove_floor(ptr noundef %50, ptr noundef %340, ptr noundef %344, ptr noundef %343, i32 noundef %361) #56
  %362 = getelementptr inbounds float, ptr %343, i64 %141
  %363 = getelementptr inbounds ptr, ptr %271, i64 %336
  %364 = load ptr, ptr %363, align 8
  call void @_vp_noise_normalize(ptr noundef %50, ptr noundef %343, ptr noundef %362, ptr noundef %364) #56
  %365 = add nuw nsw i64 %336, 1
  %366 = load i32, ptr %14, align 4
  %367 = sext i32 %366 to i64
  %368 = icmp slt i64 %365, %367
  br i1 %368, label %335, label %369, !llvm.loop !229

369:                                              ; preds = %335, %332
  %370 = load i32, ptr %272, align 4
  %371 = icmp eq i32 %370, 0
  br i1 %371, label %378, label %372

372:                                              ; preds = %369
  %373 = load ptr, ptr %0, align 8
  %374 = load i64, ptr %37, align 8
  %375 = getelementptr inbounds %struct.codec_setup_info, ptr %7, i64 0, i32 17, i32 10, i64 %374, i64 %325
  %376 = load i32, ptr %375, align 4
  %377 = trunc i64 %325 to i32
  call void @_vp_couple(i32 noundef %377, ptr noundef nonnull %320, ptr noundef %50, ptr noundef nonnull %43, ptr noundef %373, ptr noundef %286, ptr noundef %285, ptr noundef %24, ptr noundef nonnull %18, i32 noundef %376) #56
  br label %378

378:                                              ; preds = %372, %369
  %379 = load i32, ptr %43, align 4
  %380 = icmp sgt i32 %379, 0
  br i1 %380, label %381, label %443

381:                                              ; preds = %415, %378
  %382 = phi i64 [ %439, %415 ], [ 0, %378 ]
  %383 = getelementptr inbounds %struct.vorbis_info_mapping0, ptr %43, i64 0, i32 3, i64 %382
  %384 = load i32, ptr %383, align 4
  %385 = load i32, ptr %14, align 4
  %386 = icmp sgt i32 %385, 0
  br i1 %386, label %387, label %415

387:                                              ; preds = %409, %381
  %388 = phi i32 [ %410, %409 ], [ %385, %381 ]
  %389 = phi i64 [ %412, %409 ], [ 0, %381 ]
  %390 = phi i32 [ %411, %409 ], [ 0, %381 ]
  %391 = getelementptr inbounds %struct.vorbis_info_mapping0, ptr %43, i64 0, i32 1, i64 %389
  %392 = load i32, ptr %391, align 4
  %393 = zext i32 %392 to i64
  %394 = icmp eq i64 %382, %393
  br i1 %394, label %395, label %409

395:                                              ; preds = %387
  %396 = sext i32 %390 to i64
  %397 = getelementptr inbounds i32, ptr %270, i64 %396
  %398 = getelementptr inbounds i32, ptr %18, i64 %389
  %399 = load i32, ptr %398, align 4
  %400 = icmp ne i32 %399, 0
  %401 = zext i1 %400 to i32
  store i32 %401, ptr %397, align 4
  %402 = load ptr, ptr %0, align 8
  %403 = getelementptr inbounds ptr, ptr %402, i64 %389
  %404 = load ptr, ptr %403, align 8
  %405 = getelementptr inbounds float, ptr %404, i64 %141
  %406 = add nsw i32 %390, 1
  %407 = getelementptr inbounds ptr, ptr %268, i64 %396
  store ptr %405, ptr %407, align 8
  %408 = load i32, ptr %14, align 4
  br label %409

409:                                              ; preds = %395, %387
  %410 = phi i32 [ %408, %395 ], [ %388, %387 ]
  %411 = phi i32 [ %406, %395 ], [ %390, %387 ]
  %412 = add nuw nsw i64 %389, 1
  %413 = sext i32 %410 to i64
  %414 = icmp slt i64 %412, %413
  br i1 %414, label %387, label %415, !llvm.loop !230

415:                                              ; preds = %409, %381
  %416 = phi i32 [ 0, %381 ], [ %411, %409 ]
  %417 = sext i32 %384 to i64
  %418 = getelementptr inbounds %struct.codec_setup_info, ptr %7, i64 0, i32 12, i64 %417
  %419 = load i32, ptr %418, align 4
  %420 = sext i32 %419 to i64
  %421 = getelementptr inbounds [3 x ptr], ptr @_residue_P, i64 0, i64 %420
  %422 = load ptr, ptr %421, align 8
  %423 = getelementptr inbounds %struct.vorbis_func_residue, ptr %422, i64 0, i32 5
  %424 = load ptr, ptr %423, align 8
  %425 = load ptr, ptr %321, align 8
  %426 = getelementptr inbounds ptr, ptr %425, i64 %417
  %427 = load ptr, ptr %426, align 8
  %428 = call ptr %424(ptr noundef %0, ptr noundef %427, ptr noundef nonnull %268, ptr noundef nonnull %270, i32 noundef %416) #59
  %429 = load i32, ptr %418, align 4
  %430 = sext i32 %429 to i64
  %431 = getelementptr inbounds [3 x ptr], ptr @_residue_P, i64 0, i64 %430
  %432 = load ptr, ptr %431, align 8
  %433 = getelementptr inbounds %struct.vorbis_func_residue, ptr %432, i64 0, i32 6
  %434 = load ptr, ptr %433, align 8
  %435 = load ptr, ptr %321, align 8
  %436 = getelementptr inbounds ptr, ptr %435, i64 %417
  %437 = load ptr, ptr %436, align 8
  %438 = call i32 %434(ptr noundef %0, ptr noundef %437, ptr noundef nonnull %268, ptr noundef null, ptr noundef nonnull %270, i32 noundef %416, ptr noundef %428) #59
  %439 = add nuw nsw i64 %382, 1
  %440 = load i32, ptr %43, align 4
  %441 = sext i32 %440 to i64
  %442 = icmp slt i64 %439, %441
  br i1 %442, label %381, label %443, !llvm.loop !231

443:                                              ; preds = %415, %378
  %444 = load i32, ptr %322, align 8
  %445 = icmp sgt i32 %444, 0
  br i1 %445, label %446, label %449

446:                                              ; preds = %443
  %447 = sub nsw i32 8, %444
  call void @oggpack_write(ptr noundef nonnull %315, i64 noundef 0, i32 noundef %447) #56
  %448 = load i32, ptr %322, align 8
  br label %449

449:                                              ; preds = %446, %443
  %450 = phi i32 [ %444, %443 ], [ %448, %446 ]
  %451 = load i64, ptr %315, align 8
  %452 = add nsw i32 %450, 7
  %453 = sdiv i32 %452, 8
  %454 = trunc i64 %451 to i32
  %455 = add i32 %453, %454
  %456 = getelementptr inbounds %struct.vorbis_block_internal, ptr %11, i64 0, i32 3, i64 %325
  store i32 %455, ptr %456, align 4
  %457 = add nuw nsw i64 %325, 1
  %458 = load ptr, ptr %2, align 8
  %459 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %458, i64 0, i32 19
  %460 = load ptr, ptr %459, align 8
  %461 = getelementptr inbounds %struct.private_state, ptr %460, i64 0, i32 12
  %462 = load ptr, ptr %461, align 8
  %463 = icmp eq ptr %462, null
  %464 = select i1 %463, i64 7, i64 14
  %465 = icmp ult i64 %325, %464
  br i1 %465, label %324, label %466, !llvm.loop !232

466:                                              ; preds = %449, %175
  %467 = phi i32 [ 0, %449 ], [ -1, %175 ]
  ret i32 %467
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @mapping0_inverse(ptr noundef %0, ptr nocapture noundef readonly %1) #0 {
  %3 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 10
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %4, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr inbounds %struct.vorbis_info, ptr %6, i64 0, i32 7
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %4, i64 0, i32 19
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 3
  %12 = load i64, ptr %11, align 8
  %13 = getelementptr inbounds [2 x i64], ptr %8, i64 0, i64 %12
  %14 = load i64, ptr %13, align 8
  %15 = trunc i64 %14 to i32
  %16 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 5
  store i32 %15, ptr %16, align 8
  %17 = shl i64 %14, 32
  %18 = ashr exact i64 %17, 32
  %19 = getelementptr inbounds %struct.vorbis_info, ptr %6, i64 0, i32 1
  %20 = load i32, ptr %19, align 4
  %21 = sext i32 %20 to i64
  %22 = shl nsw i64 %21, 3
  %23 = alloca i8, i64 %22, align 16
  %24 = shl nsw i64 %21, 2
  %25 = alloca i8, i64 %24, align 16
  %26 = alloca i8, i64 %24, align 16
  %27 = alloca i8, i64 %22, align 16
  %28 = icmp sgt i32 %20, 0
  br i1 %28, label %29, label %33

29:                                               ; preds = %2
  %30 = getelementptr inbounds %struct.private_state, ptr %10, i64 0, i32 5
  %31 = ashr exact i64 %17, 30
  %32 = lshr exact i64 %31, 1
  br label %39

33:                                               ; preds = %39, %2
  %34 = getelementptr inbounds %struct.vorbis_info_mapping0, ptr %1, i64 0, i32 4
  %35 = load i32, ptr %34, align 4
  %36 = icmp sgt i32 %35, 0
  br i1 %36, label %37, label %69

37:                                               ; preds = %33
  %38 = zext i32 %35 to i64
  br label %74

39:                                               ; preds = %39, %29
  %40 = phi i64 [ 0, %29 ], [ %65, %39 ]
  %41 = getelementptr inbounds %struct.vorbis_info_mapping0, ptr %1, i64 0, i32 1, i64 %40
  %42 = load i32, ptr %41, align 4
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds %struct.vorbis_info_mapping0, ptr %1, i64 0, i32 2, i64 %43
  %45 = load i32, ptr %44, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds %struct.codec_setup_info, ptr %8, i64 0, i32 10, i64 %46
  %48 = load i32, ptr %47, align 4
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds [2 x ptr], ptr @_floor_P, i64 0, i64 %49
  %51 = load ptr, ptr %50, align 8
  %52 = getelementptr inbounds %struct.vorbis_func_floor, ptr %51, i64 0, i32 5
  %53 = load ptr, ptr %52, align 8
  %54 = load ptr, ptr %30, align 8
  %55 = getelementptr inbounds ptr, ptr %54, i64 %46
  %56 = load ptr, ptr %55, align 8
  %57 = tail call ptr %53(ptr noundef nonnull %0, ptr noundef %56) #59
  %58 = getelementptr inbounds ptr, ptr %27, i64 %40
  store ptr %57, ptr %58, align 8
  %59 = icmp ne ptr %57, null
  %60 = zext i1 %59 to i32
  %61 = getelementptr inbounds i32, ptr %26, i64 %40
  store i32 %60, ptr %61, align 4
  %62 = load ptr, ptr %0, align 8
  %63 = getelementptr inbounds ptr, ptr %62, i64 %40
  %64 = load ptr, ptr %63, align 8
  tail call void @llvm.memset.p0.i64(ptr align 4 %64, i8 0, i64 %32, i1 false)
  %65 = add nuw nsw i64 %40, 1
  %66 = load i32, ptr %19, align 4
  %67 = sext i32 %66 to i64
  %68 = icmp slt i64 %65, %67
  br i1 %68, label %39, label %33, !llvm.loop !233

69:                                               ; preds = %91, %33
  %70 = load i32, ptr %1, align 4
  %71 = icmp sgt i32 %70, 0
  br i1 %71, label %72, label %147

72:                                               ; preds = %69
  %73 = getelementptr inbounds %struct.private_state, ptr %10, i64 0, i32 6
  br label %94

74:                                               ; preds = %91, %37
  %75 = phi i64 [ 0, %37 ], [ %92, %91 ]
  %76 = getelementptr inbounds %struct.vorbis_info_mapping0, ptr %1, i64 0, i32 5, i64 %75
  %77 = load i32, ptr %76, align 4
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds i32, ptr %26, i64 %78
  %80 = load i32, ptr %79, align 4
  %81 = icmp eq i32 %80, 0
  %82 = getelementptr inbounds %struct.vorbis_info_mapping0, ptr %1, i64 0, i32 6, i64 %75
  %83 = load i32, ptr %82, align 4
  %84 = sext i32 %83 to i64
  br i1 %81, label %85, label %89

85:                                               ; preds = %74
  %86 = getelementptr inbounds i32, ptr %26, i64 %84
  %87 = load i32, ptr %86, align 4
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %91, label %89

89:                                               ; preds = %85, %74
  store i32 1, ptr %79, align 4
  %90 = getelementptr inbounds i32, ptr %26, i64 %84
  store i32 1, ptr %90, align 4
  br label %91

91:                                               ; preds = %89, %85
  %92 = add nuw nsw i64 %75, 1
  %93 = icmp eq i64 %92, %38
  br i1 %93, label %69, label %74, !llvm.loop !234

94:                                               ; preds = %125, %72
  %95 = phi i64 [ 0, %72 ], [ %141, %125 ]
  %96 = load i32, ptr %19, align 4
  %97 = icmp sgt i32 %96, 0
  br i1 %97, label %98, label %125

98:                                               ; preds = %119, %94
  %99 = phi i32 [ %120, %119 ], [ %96, %94 ]
  %100 = phi i64 [ %122, %119 ], [ 0, %94 ]
  %101 = phi i32 [ %121, %119 ], [ 0, %94 ]
  %102 = getelementptr inbounds %struct.vorbis_info_mapping0, ptr %1, i64 0, i32 1, i64 %100
  %103 = load i32, ptr %102, align 4
  %104 = zext i32 %103 to i64
  %105 = icmp eq i64 %95, %104
  br i1 %105, label %106, label %119

106:                                              ; preds = %98
  %107 = getelementptr inbounds i32, ptr %26, i64 %100
  %108 = load i32, ptr %107, align 4
  %109 = icmp ne i32 %108, 0
  %110 = sext i32 %101 to i64
  %111 = getelementptr inbounds i32, ptr %25, i64 %110
  %112 = zext i1 %109 to i32
  store i32 %112, ptr %111, align 4
  %113 = load ptr, ptr %0, align 8
  %114 = getelementptr inbounds ptr, ptr %113, i64 %100
  %115 = load ptr, ptr %114, align 8
  %116 = add nsw i32 %101, 1
  %117 = getelementptr inbounds ptr, ptr %23, i64 %110
  store ptr %115, ptr %117, align 8
  %118 = load i32, ptr %19, align 4
  br label %119

119:                                              ; preds = %106, %98
  %120 = phi i32 [ %118, %106 ], [ %99, %98 ]
  %121 = phi i32 [ %116, %106 ], [ %101, %98 ]
  %122 = add nuw nsw i64 %100, 1
  %123 = sext i32 %120 to i64
  %124 = icmp slt i64 %122, %123
  br i1 %124, label %98, label %125, !llvm.loop !235

125:                                              ; preds = %119, %94
  %126 = phi i32 [ 0, %94 ], [ %121, %119 ]
  %127 = getelementptr inbounds %struct.vorbis_info_mapping0, ptr %1, i64 0, i32 3, i64 %95
  %128 = load i32, ptr %127, align 4
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds %struct.codec_setup_info, ptr %8, i64 0, i32 12, i64 %129
  %131 = load i32, ptr %130, align 4
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds [3 x ptr], ptr @_residue_P, i64 0, i64 %132
  %134 = load ptr, ptr %133, align 8
  %135 = getelementptr inbounds %struct.vorbis_func_residue, ptr %134, i64 0, i32 7
  %136 = load ptr, ptr %135, align 8
  %137 = load ptr, ptr %73, align 8
  %138 = getelementptr inbounds ptr, ptr %137, i64 %129
  %139 = load ptr, ptr %138, align 8
  %140 = call i32 %136(ptr noundef %0, ptr noundef %139, ptr noundef nonnull %23, ptr noundef nonnull %25, i32 noundef %126) #59
  %141 = add nuw nsw i64 %95, 1
  %142 = load i32, ptr %1, align 4
  %143 = sext i32 %142 to i64
  %144 = icmp slt i64 %141, %143
  br i1 %144, label %94, label %145, !llvm.loop !236

145:                                              ; preds = %125
  %146 = load i32, ptr %34, align 4
  br label %147

147:                                              ; preds = %145, %69
  %148 = phi i32 [ %146, %145 ], [ %35, %69 ]
  %149 = icmp sgt i32 %148, 0
  br i1 %149, label %150, label %157

150:                                              ; preds = %147
  %151 = sdiv i64 %18, 2
  %152 = icmp sgt i64 %17, 4294967296
  %153 = call i64 @llvm.smax.i64(i64 %151, i64 1)
  %154 = zext i32 %148 to i64
  br label %162

155:                                              ; preds = %195, %162
  %156 = icmp sgt i64 %163, 1
  br i1 %156, label %162, label %157, !llvm.loop !237

157:                                              ; preds = %155, %147
  %158 = load i32, ptr %19, align 4
  %159 = icmp sgt i32 %158, 0
  br i1 %159, label %160, label %241

160:                                              ; preds = %157
  %161 = getelementptr inbounds %struct.private_state, ptr %10, i64 0, i32 5
  br label %200

162:                                              ; preds = %155, %150
  %163 = phi i64 [ %154, %150 ], [ %164, %155 ]
  %164 = add nsw i64 %163, -1
  %165 = load ptr, ptr %0, align 8
  %166 = and i64 %164, 4294967295
  %167 = getelementptr inbounds %struct.vorbis_info_mapping0, ptr %1, i64 0, i32 5, i64 %166
  %168 = load i32, ptr %167, align 4
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds ptr, ptr %165, i64 %169
  %171 = load ptr, ptr %170, align 8
  %172 = getelementptr inbounds %struct.vorbis_info_mapping0, ptr %1, i64 0, i32 6, i64 %166
  %173 = load i32, ptr %172, align 4
  %174 = sext i32 %173 to i64
  %175 = getelementptr inbounds ptr, ptr %165, i64 %174
  %176 = load ptr, ptr %175, align 8
  br i1 %152, label %177, label %155

177:                                              ; preds = %195, %162
  %178 = phi i64 [ %196, %195 ], [ 0, %162 ]
  %179 = getelementptr inbounds float, ptr %171, i64 %178
  %180 = load float, ptr %179, align 4
  %181 = getelementptr inbounds float, ptr %176, i64 %178
  %182 = load float, ptr %181, align 4
  %183 = fcmp ogt float %180, 0.000000e+00
  %184 = fcmp ogt float %182, 0.000000e+00
  br i1 %183, label %185, label %190

185:                                              ; preds = %177
  br i1 %184, label %186, label %188

186:                                              ; preds = %185
  %187 = fsub float %180, %182
  store float %187, ptr %181, align 4
  br label %195

188:                                              ; preds = %185
  store float %180, ptr %181, align 4
  %189 = fadd float %180, %182
  store float %189, ptr %179, align 4
  br label %195

190:                                              ; preds = %177
  br i1 %184, label %191, label %193

191:                                              ; preds = %190
  %192 = fadd float %180, %182
  store float %192, ptr %181, align 4
  br label %195

193:                                              ; preds = %190
  store float %180, ptr %181, align 4
  %194 = fsub float %180, %182
  store float %194, ptr %179, align 4
  br label %195

195:                                              ; preds = %193, %191, %188, %186
  %196 = add nuw nsw i64 %178, 1
  %197 = icmp eq i64 %196, %153
  br i1 %197, label %155, label %177, !llvm.loop !238

198:                                              ; preds = %200
  %.lcssa = phi i32 [ %225, %200 ]
  %199 = icmp sgt i32 %.lcssa, 0
  br i1 %199, label %228, label %241

200:                                              ; preds = %200, %160
  %201 = phi i64 [ 0, %160 ], [ %224, %200 ]
  %202 = load ptr, ptr %0, align 8
  %203 = getelementptr inbounds ptr, ptr %202, i64 %201
  %204 = load ptr, ptr %203, align 8
  %205 = getelementptr inbounds %struct.vorbis_info_mapping0, ptr %1, i64 0, i32 1, i64 %201
  %206 = load i32, ptr %205, align 4
  %207 = sext i32 %206 to i64
  %208 = getelementptr inbounds %struct.vorbis_info_mapping0, ptr %1, i64 0, i32 2, i64 %207
  %209 = load i32, ptr %208, align 4
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds %struct.codec_setup_info, ptr %8, i64 0, i32 10, i64 %210
  %212 = load i32, ptr %211, align 4
  %213 = sext i32 %212 to i64
  %214 = getelementptr inbounds [2 x ptr], ptr @_floor_P, i64 0, i64 %213
  %215 = load ptr, ptr %214, align 8
  %216 = getelementptr inbounds %struct.vorbis_func_floor, ptr %215, i64 0, i32 6
  %217 = load ptr, ptr %216, align 8
  %218 = load ptr, ptr %161, align 8
  %219 = getelementptr inbounds ptr, ptr %218, i64 %210
  %220 = load ptr, ptr %219, align 8
  %221 = getelementptr inbounds ptr, ptr %27, i64 %201
  %222 = load ptr, ptr %221, align 8
  %223 = call i32 %217(ptr noundef nonnull %0, ptr noundef %220, ptr noundef %222, ptr noundef %204) #59
  %224 = add nuw nsw i64 %201, 1
  %225 = load i32, ptr %19, align 4
  %226 = sext i32 %225 to i64
  %227 = icmp slt i64 %224, %226
  br i1 %227, label %200, label %198, !llvm.loop !239

228:                                              ; preds = %228, %198
  %229 = phi i64 [ %237, %228 ], [ 0, %198 ]
  %230 = load ptr, ptr %0, align 8
  %231 = getelementptr inbounds ptr, ptr %230, i64 %229
  %232 = load ptr, ptr %231, align 8
  %233 = load i64, ptr %11, align 8
  %234 = getelementptr inbounds %struct.private_state, ptr %10, i64 0, i32 2, i64 %233
  %235 = load ptr, ptr %234, align 8
  %236 = load ptr, ptr %235, align 8
  call void @mdct_backward(ptr noundef %236, ptr noundef %232, ptr noundef %232) #56
  %237 = add nuw nsw i64 %229, 1
  %238 = load i32, ptr %19, align 4
  %239 = sext i32 %238 to i64
  %240 = icmp slt i64 %237, %239
  br i1 %240, label %228, label %241, !llvm.loop !240

241:                                              ; preds = %228, %198, %157
  ret i32 0
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @mdct_backward(ptr nocapture noundef readonly %0, ptr noundef readonly %1, ptr noundef %2) #21 {
  %4 = load i32, ptr %0, align 8
  %5 = ashr i32 %4, 1
  %6 = ashr i32 %4, 2
  %7 = sext i32 %5 to i64
  %8 = getelementptr inbounds float, ptr %1, i64 %7
  %9 = getelementptr inbounds float, ptr %8, i64 -7
  %10 = getelementptr inbounds float, ptr %2, i64 %7
  %11 = sext i32 %6 to i64
  %12 = getelementptr inbounds float, ptr %10, i64 %11
  %13 = getelementptr inbounds %struct.mdct_lookup, ptr %0, i64 0, i32 2
  %14 = load ptr, ptr %13, align 8
  %15 = getelementptr inbounds float, ptr %14, i64 %11
  br label %16

16:                                               ; preds = %16, %3
  %17 = phi ptr [ %9, %3 ], [ %60, %16 ]
  %18 = phi ptr [ %12, %3 ], [ %20, %16 ]
  %19 = phi ptr [ %15, %3 ], [ %61, %16 ]
  %20 = getelementptr inbounds float, ptr %18, i64 -4
  %21 = getelementptr inbounds float, ptr %17, i64 2
  %22 = load float, ptr %21, align 4
  %23 = fneg float %22
  %24 = getelementptr inbounds float, ptr %19, i64 3
  %25 = load float, ptr %24, align 4
  %26 = fmul float %25, %23
  %27 = load float, ptr %17, align 4
  %28 = getelementptr inbounds float, ptr %19, i64 2
  %29 = load float, ptr %28, align 4
  %30 = fmul float %27, %29
  %31 = fsub float %26, %30
  store float %31, ptr %20, align 4
  %32 = load float, ptr %17, align 4
  %33 = load float, ptr %24, align 4
  %34 = fmul float %32, %33
  %35 = load float, ptr %21, align 4
  %36 = load float, ptr %28, align 4
  %37 = fmul float %35, %36
  %38 = fsub float %34, %37
  %39 = getelementptr inbounds float, ptr %18, i64 -3
  store float %38, ptr %39, align 4
  %40 = getelementptr inbounds float, ptr %17, i64 6
  %41 = load float, ptr %40, align 4
  %42 = fneg float %41
  %43 = getelementptr inbounds float, ptr %19, i64 1
  %44 = load float, ptr %43, align 4
  %45 = fmul float %44, %42
  %46 = getelementptr inbounds float, ptr %17, i64 4
  %47 = load float, ptr %46, align 4
  %48 = load float, ptr %19, align 4
  %49 = fmul float %47, %48
  %50 = fsub float %45, %49
  %51 = getelementptr inbounds float, ptr %18, i64 -2
  store float %50, ptr %51, align 4
  %52 = load float, ptr %46, align 4
  %53 = load float, ptr %43, align 4
  %54 = fmul float %52, %53
  %55 = load float, ptr %40, align 4
  %56 = load float, ptr %19, align 4
  %57 = fmul float %55, %56
  %58 = fsub float %54, %57
  %59 = getelementptr inbounds float, ptr %18, i64 -1
  store float %58, ptr %59, align 4
  %60 = getelementptr inbounds float, ptr %17, i64 -8
  %61 = getelementptr inbounds float, ptr %19, i64 4
  %62 = icmp ult ptr %60, %1
  br i1 %62, label %63, label %16, !llvm.loop !241

63:                                               ; preds = %16
  %64 = getelementptr inbounds float, ptr %8, i64 -8
  %65 = load ptr, ptr %13, align 8
  %66 = getelementptr inbounds float, ptr %65, i64 %11
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi ptr [ %64, %63 ], [ %109, %67 ]
  %69 = phi ptr [ %12, %63 ], [ %110, %67 ]
  %70 = phi ptr [ %66, %63 ], [ %71, %67 ]
  %71 = getelementptr inbounds float, ptr %70, i64 -4
  %72 = getelementptr inbounds float, ptr %68, i64 4
  %73 = load float, ptr %72, align 4
  %74 = getelementptr inbounds float, ptr %70, i64 -1
  %75 = load float, ptr %74, align 4
  %76 = fmul float %73, %75
  %77 = getelementptr inbounds float, ptr %68, i64 6
  %78 = load float, ptr %77, align 4
  %79 = getelementptr inbounds float, ptr %70, i64 -2
  %80 = load float, ptr %79, align 4
  %81 = fmul float %78, %80
  %82 = fadd float %76, %81
  store float %82, ptr %69, align 4
  %83 = load float, ptr %72, align 4
  %84 = load float, ptr %79, align 4
  %85 = fmul float %83, %84
  %86 = load float, ptr %77, align 4
  %87 = load float, ptr %74, align 4
  %88 = fmul float %86, %87
  %89 = fsub float %85, %88
  %90 = getelementptr inbounds float, ptr %69, i64 1
  store float %89, ptr %90, align 4
  %91 = load float, ptr %68, align 4
  %92 = getelementptr inbounds float, ptr %70, i64 -3
  %93 = load float, ptr %92, align 4
  %94 = fmul float %91, %93
  %95 = getelementptr inbounds float, ptr %68, i64 2
  %96 = load float, ptr %95, align 4
  %97 = load float, ptr %71, align 4
  %98 = fmul float %96, %97
  %99 = fadd float %94, %98
  %100 = getelementptr inbounds float, ptr %69, i64 2
  store float %99, ptr %100, align 4
  %101 = load float, ptr %68, align 4
  %102 = load float, ptr %71, align 4
  %103 = fmul float %101, %102
  %104 = load float, ptr %95, align 4
  %105 = load float, ptr %92, align 4
  %106 = fmul float %104, %105
  %107 = fsub float %103, %106
  %108 = getelementptr inbounds float, ptr %69, i64 3
  store float %107, ptr %108, align 4
  %109 = getelementptr inbounds float, ptr %68, i64 -8
  %110 = getelementptr inbounds float, ptr %69, i64 4
  %111 = icmp ult ptr %109, %1
  br i1 %111, label %112, label %67, !llvm.loop !242

112:                                              ; preds = %67
  tail call fastcc void @mdct_butterflies(ptr noundef nonnull %0, ptr noundef %10, i32 noundef %5) #56
  %113 = load i32, ptr %0, align 8
  %114 = getelementptr inbounds %struct.mdct_lookup, ptr %0, i64 0, i32 3
  %115 = load ptr, ptr %114, align 8
  %116 = ashr i32 %113, 1
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds float, ptr %2, i64 %117
  %119 = load ptr, ptr %13, align 8
  %120 = sext i32 %113 to i64
  %121 = getelementptr inbounds float, ptr %119, i64 %120
  br label %122

122:                                              ; preds = %122, %112
  %123 = phi ptr [ %121, %112 ], [ %200, %122 ]
  %124 = phi ptr [ %118, %112 ], [ %151, %122 ]
  %125 = phi ptr [ %2, %112 ], [ %202, %122 ]
  %126 = phi ptr [ %115, %112 ], [ %201, %122 ]
  %127 = load i32, ptr %126, align 4
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds float, ptr %118, i64 %128
  %130 = getelementptr inbounds i32, ptr %126, i64 1
  %131 = load i32, ptr %130, align 4
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds float, ptr %118, i64 %132
  %134 = getelementptr inbounds float, ptr %129, i64 1
  %135 = load float, ptr %134, align 4
  %136 = getelementptr inbounds float, ptr %133, i64 1
  %137 = load float, ptr %136, align 4
  %138 = fsub float %135, %137
  %139 = load float, ptr %129, align 4
  %140 = load float, ptr %133, align 4
  %141 = fadd float %139, %140
  %142 = load float, ptr %123, align 4
  %143 = fmul float %141, %142
  %144 = getelementptr inbounds float, ptr %123, i64 1
  %145 = load float, ptr %144, align 4
  %146 = fmul float %138, %145
  %147 = fadd float %143, %146
  %148 = fmul float %141, %145
  %149 = fmul float %138, %142
  %150 = fsub float %148, %149
  %151 = getelementptr inbounds float, ptr %124, i64 -4
  %152 = fadd float %135, %137
  %153 = fmul float %152, 5.000000e-01
  %154 = fsub float %139, %140
  %155 = fmul float %154, 5.000000e-01
  %156 = fadd float %153, %147
  store float %156, ptr %125, align 4
  %157 = fsub float %153, %147
  %158 = getelementptr inbounds float, ptr %124, i64 -2
  store float %157, ptr %158, align 4
  %159 = fadd float %155, %150
  %160 = getelementptr inbounds float, ptr %125, i64 1
  store float %159, ptr %160, align 4
  %161 = fsub float %150, %155
  %162 = getelementptr inbounds float, ptr %124, i64 -1
  store float %161, ptr %162, align 4
  %163 = getelementptr inbounds i32, ptr %126, i64 2
  %164 = load i32, ptr %163, align 4
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds float, ptr %118, i64 %165
  %167 = getelementptr inbounds i32, ptr %126, i64 3
  %168 = load i32, ptr %167, align 4
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds float, ptr %118, i64 %169
  %171 = getelementptr inbounds float, ptr %166, i64 1
  %172 = load float, ptr %171, align 4
  %173 = getelementptr inbounds float, ptr %170, i64 1
  %174 = load float, ptr %173, align 4
  %175 = fsub float %172, %174
  %176 = load float, ptr %166, align 4
  %177 = load float, ptr %170, align 4
  %178 = fadd float %176, %177
  %179 = getelementptr inbounds float, ptr %123, i64 2
  %180 = load float, ptr %179, align 4
  %181 = fmul float %178, %180
  %182 = getelementptr inbounds float, ptr %123, i64 3
  %183 = load float, ptr %182, align 4
  %184 = fmul float %175, %183
  %185 = fadd float %181, %184
  %186 = fmul float %178, %183
  %187 = fmul float %175, %180
  %188 = fsub float %186, %187
  %189 = fadd float %172, %174
  %190 = fmul float %189, 5.000000e-01
  %191 = fsub float %176, %177
  %192 = fmul float %191, 5.000000e-01
  %193 = fadd float %190, %185
  %194 = getelementptr inbounds float, ptr %125, i64 2
  store float %193, ptr %194, align 4
  %195 = fsub float %190, %185
  store float %195, ptr %151, align 4
  %196 = fadd float %192, %188
  %197 = getelementptr inbounds float, ptr %125, i64 3
  store float %196, ptr %197, align 4
  %198 = fsub float %188, %192
  %199 = getelementptr inbounds float, ptr %124, i64 -3
  store float %198, ptr %199, align 4
  %200 = getelementptr inbounds float, ptr %123, i64 4
  %201 = getelementptr inbounds i32, ptr %126, i64 4
  %202 = getelementptr inbounds float, ptr %125, i64 4
  %203 = icmp ult ptr %202, %151
  br i1 %203, label %122, label %204, !llvm.loop !243

204:                                              ; preds = %122
  %205 = load ptr, ptr %13, align 8
  %206 = getelementptr inbounds float, ptr %205, i64 %7
  br label %207

207:                                              ; preds = %207, %204
  %208 = phi ptr [ %206, %204 ], [ %295, %207 ]
  %209 = phi ptr [ %12, %204 ], [ %212, %207 ]
  %210 = phi ptr [ %12, %204 ], [ %293, %207 ]
  %211 = phi ptr [ %2, %204 ], [ %294, %207 ]
  %212 = getelementptr inbounds float, ptr %209, i64 -4
  %213 = load float, ptr %211, align 4
  %214 = getelementptr inbounds float, ptr %208, i64 1
  %215 = load float, ptr %214, align 4
  %216 = fmul float %213, %215
  %217 = getelementptr inbounds float, ptr %211, i64 1
  %218 = load float, ptr %217, align 4
  %219 = load float, ptr %208, align 4
  %220 = fmul float %218, %219
  %221 = fsub float %216, %220
  %222 = getelementptr inbounds float, ptr %209, i64 -1
  store float %221, ptr %222, align 4
  %223 = load float, ptr %211, align 4
  %224 = load float, ptr %208, align 4
  %225 = fmul float %223, %224
  %226 = load float, ptr %217, align 4
  %227 = load float, ptr %214, align 4
  %228 = fmul float %226, %227
  %229 = fadd float %225, %228
  %230 = fneg float %229
  store float %230, ptr %210, align 4
  %231 = getelementptr inbounds float, ptr %211, i64 2
  %232 = load float, ptr %231, align 4
  %233 = getelementptr inbounds float, ptr %208, i64 3
  %234 = load float, ptr %233, align 4
  %235 = fmul float %232, %234
  %236 = getelementptr inbounds float, ptr %211, i64 3
  %237 = load float, ptr %236, align 4
  %238 = getelementptr inbounds float, ptr %208, i64 2
  %239 = load float, ptr %238, align 4
  %240 = fmul float %237, %239
  %241 = fsub float %235, %240
  %242 = getelementptr inbounds float, ptr %209, i64 -2
  store float %241, ptr %242, align 4
  %243 = load float, ptr %231, align 4
  %244 = load float, ptr %238, align 4
  %245 = fmul float %243, %244
  %246 = load float, ptr %236, align 4
  %247 = load float, ptr %233, align 4
  %248 = fmul float %246, %247
  %249 = fadd float %245, %248
  %250 = fneg float %249
  %251 = getelementptr inbounds float, ptr %210, i64 1
  store float %250, ptr %251, align 4
  %252 = getelementptr inbounds float, ptr %211, i64 4
  %253 = load float, ptr %252, align 4
  %254 = getelementptr inbounds float, ptr %208, i64 5
  %255 = load float, ptr %254, align 4
  %256 = fmul float %253, %255
  %257 = getelementptr inbounds float, ptr %211, i64 5
  %258 = load float, ptr %257, align 4
  %259 = getelementptr inbounds float, ptr %208, i64 4
  %260 = load float, ptr %259, align 4
  %261 = fmul float %258, %260
  %262 = fsub float %256, %261
  %263 = getelementptr inbounds float, ptr %209, i64 -3
  store float %262, ptr %263, align 4
  %264 = load float, ptr %252, align 4
  %265 = load float, ptr %259, align 4
  %266 = fmul float %264, %265
  %267 = load float, ptr %257, align 4
  %268 = load float, ptr %254, align 4
  %269 = fmul float %267, %268
  %270 = fadd float %266, %269
  %271 = fneg float %270
  %272 = getelementptr inbounds float, ptr %210, i64 2
  store float %271, ptr %272, align 4
  %273 = getelementptr inbounds float, ptr %211, i64 6
  %274 = load float, ptr %273, align 4
  %275 = getelementptr inbounds float, ptr %208, i64 7
  %276 = load float, ptr %275, align 4
  %277 = fmul float %274, %276
  %278 = getelementptr inbounds float, ptr %211, i64 7
  %279 = load float, ptr %278, align 4
  %280 = getelementptr inbounds float, ptr %208, i64 6
  %281 = load float, ptr %280, align 4
  %282 = fmul float %279, %281
  %283 = fsub float %277, %282
  store float %283, ptr %212, align 4
  %284 = load float, ptr %273, align 4
  %285 = load float, ptr %280, align 4
  %286 = fmul float %284, %285
  %287 = load float, ptr %278, align 4
  %288 = load float, ptr %275, align 4
  %289 = fmul float %287, %288
  %290 = fadd float %286, %289
  %291 = fneg float %290
  %292 = getelementptr inbounds float, ptr %210, i64 3
  store float %291, ptr %292, align 4
  %293 = getelementptr inbounds float, ptr %210, i64 4
  %294 = getelementptr inbounds float, ptr %211, i64 8
  %295 = getelementptr inbounds float, ptr %208, i64 8
  %296 = icmp ult ptr %294, %212
  br i1 %296, label %207, label %297, !llvm.loop !244

297:                                              ; preds = %207
  %298 = getelementptr inbounds float, ptr %2, i64 %11
  br label %299

299:                                              ; preds = %299, %297
  %300 = phi ptr [ %298, %297 ], [ %303, %299 ]
  %301 = phi ptr [ %298, %297 ], [ %322, %299 ]
  %302 = phi ptr [ %12, %297 ], [ %304, %299 ]
  %303 = getelementptr inbounds float, ptr %300, i64 -4
  %304 = getelementptr inbounds float, ptr %302, i64 -4
  %305 = getelementptr inbounds float, ptr %302, i64 -1
  %306 = load float, ptr %305, align 4
  %307 = getelementptr inbounds float, ptr %300, i64 -1
  store float %306, ptr %307, align 4
  %308 = fneg float %306
  store float %308, ptr %301, align 4
  %309 = getelementptr inbounds float, ptr %302, i64 -2
  %310 = load float, ptr %309, align 4
  %311 = getelementptr inbounds float, ptr %300, i64 -2
  store float %310, ptr %311, align 4
  %312 = fneg float %310
  %313 = getelementptr inbounds float, ptr %301, i64 1
  store float %312, ptr %313, align 4
  %314 = getelementptr inbounds float, ptr %302, i64 -3
  %315 = load float, ptr %314, align 4
  %316 = getelementptr inbounds float, ptr %300, i64 -3
  store float %315, ptr %316, align 4
  %317 = fneg float %315
  %318 = getelementptr inbounds float, ptr %301, i64 2
  store float %317, ptr %318, align 4
  %319 = load float, ptr %304, align 4
  store float %319, ptr %303, align 4
  %320 = fneg float %319
  %321 = getelementptr inbounds float, ptr %301, i64 3
  store float %320, ptr %321, align 4
  %322 = getelementptr inbounds float, ptr %301, i64 4
  %323 = icmp ult ptr %322, %304
  br i1 %323, label %299, label %324, !llvm.loop !245

324:                                              ; preds = %324, %299
  %325 = phi ptr [ %327, %324 ], [ %12, %299 ]
  %326 = phi ptr [ %338, %324 ], [ %12, %299 ]
  %327 = getelementptr inbounds float, ptr %325, i64 -4
  %328 = getelementptr inbounds float, ptr %326, i64 3
  %329 = load float, ptr %328, align 4
  store float %329, ptr %327, align 4
  %330 = getelementptr inbounds float, ptr %326, i64 2
  %331 = load float, ptr %330, align 4
  %332 = getelementptr inbounds float, ptr %325, i64 -3
  store float %331, ptr %332, align 4
  %333 = getelementptr inbounds float, ptr %326, i64 1
  %334 = load float, ptr %333, align 4
  %335 = getelementptr inbounds float, ptr %325, i64 -2
  store float %334, ptr %335, align 4
  %336 = load float, ptr %326, align 4
  %337 = getelementptr inbounds float, ptr %325, i64 -1
  store float %336, ptr %337, align 4
  %338 = getelementptr inbounds float, ptr %326, i64 4
  %339 = icmp ugt ptr %327, %10
  br i1 %339, label %324, label %340, !llvm.loop !246

340:                                              ; preds = %324
  ret void
}

; Function Attrs: inlinehint nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal fastcc void @mdct_butterflies(ptr nocapture noundef readonly %0, ptr noundef %1, i32 noundef %2) unnamed_addr #25 {
  %4 = getelementptr inbounds %struct.mdct_lookup, ptr %0, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr inbounds %struct.mdct_lookup, ptr %0, i64 0, i32 1
  %7 = load i32, ptr %6, align 4
  %8 = icmp sgt i32 %7, 6
  br i1 %8, label %9, label %138

9:                                                ; preds = %3
  %10 = sext i32 %2 to i64
  %11 = getelementptr inbounds float, ptr %1, i64 %10
  %12 = ashr i32 %2, 1
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds float, ptr %1, i64 %13
  %15 = getelementptr inbounds float, ptr %14, i64 -8
  br label %16

16:                                               ; preds = %16, %9
  %17 = phi ptr [ %15, %9 ], [ %118, %16 ]
  %18 = phi ptr [ %11, %9 ], [ %20, %16 ]
  %19 = phi ptr [ %5, %9 ], [ %119, %16 ]
  %20 = getelementptr inbounds float, ptr %18, i64 -8
  %21 = getelementptr inbounds float, ptr %18, i64 -2
  %22 = load float, ptr %21, align 4
  %23 = getelementptr inbounds float, ptr %17, i64 6
  %24 = load float, ptr %23, align 4
  %25 = fsub float %22, %24
  %26 = getelementptr inbounds float, ptr %18, i64 -1
  %27 = load float, ptr %26, align 4
  %28 = getelementptr inbounds float, ptr %17, i64 7
  %29 = load float, ptr %28, align 4
  %30 = fsub float %27, %29
  %31 = fadd float %22, %24
  store float %31, ptr %21, align 4
  %32 = load float, ptr %28, align 4
  %33 = fadd float %27, %32
  store float %33, ptr %26, align 4
  %34 = getelementptr inbounds float, ptr %19, i64 1
  %35 = load float, ptr %34, align 4
  %36 = fmul float %30, %35
  %37 = load float, ptr %19, align 4
  %38 = fmul float %25, %37
  %39 = fadd float %36, %38
  store float %39, ptr %23, align 4
  %40 = load float, ptr %19, align 4
  %41 = fmul float %30, %40
  %42 = load float, ptr %34, align 4
  %43 = fmul float %25, %42
  %44 = fsub float %41, %43
  store float %44, ptr %28, align 4
  %45 = getelementptr inbounds float, ptr %18, i64 -4
  %46 = load float, ptr %45, align 4
  %47 = getelementptr inbounds float, ptr %17, i64 4
  %48 = load float, ptr %47, align 4
  %49 = fsub float %46, %48
  %50 = getelementptr inbounds float, ptr %18, i64 -3
  %51 = load float, ptr %50, align 4
  %52 = getelementptr inbounds float, ptr %17, i64 5
  %53 = load float, ptr %52, align 4
  %54 = fsub float %51, %53
  %55 = fadd float %46, %48
  store float %55, ptr %45, align 4
  %56 = load float, ptr %52, align 4
  %57 = fadd float %51, %56
  store float %57, ptr %50, align 4
  %58 = getelementptr inbounds float, ptr %19, i64 5
  %59 = load float, ptr %58, align 4
  %60 = fmul float %54, %59
  %61 = getelementptr inbounds float, ptr %19, i64 4
  %62 = load float, ptr %61, align 4
  %63 = fmul float %49, %62
  %64 = fadd float %60, %63
  store float %64, ptr %47, align 4
  %65 = load float, ptr %61, align 4
  %66 = fmul float %54, %65
  %67 = load float, ptr %58, align 4
  %68 = fmul float %49, %67
  %69 = fsub float %66, %68
  store float %69, ptr %52, align 4
  %70 = getelementptr inbounds float, ptr %18, i64 -6
  %71 = load float, ptr %70, align 4
  %72 = getelementptr inbounds float, ptr %17, i64 2
  %73 = load float, ptr %72, align 4
  %74 = fsub float %71, %73
  %75 = getelementptr inbounds float, ptr %18, i64 -5
  %76 = load float, ptr %75, align 4
  %77 = getelementptr inbounds float, ptr %17, i64 3
  %78 = load float, ptr %77, align 4
  %79 = fsub float %76, %78
  %80 = fadd float %71, %73
  store float %80, ptr %70, align 4
  %81 = load float, ptr %77, align 4
  %82 = fadd float %76, %81
  store float %82, ptr %75, align 4
  %83 = getelementptr inbounds float, ptr %19, i64 9
  %84 = load float, ptr %83, align 4
  %85 = fmul float %79, %84
  %86 = getelementptr inbounds float, ptr %19, i64 8
  %87 = load float, ptr %86, align 4
  %88 = fmul float %74, %87
  %89 = fadd float %85, %88
  store float %89, ptr %72, align 4
  %90 = load float, ptr %86, align 4
  %91 = fmul float %79, %90
  %92 = load float, ptr %83, align 4
  %93 = fmul float %74, %92
  %94 = fsub float %91, %93
  store float %94, ptr %77, align 4
  %95 = load float, ptr %20, align 4
  %96 = load float, ptr %17, align 4
  %97 = fsub float %95, %96
  %98 = getelementptr inbounds float, ptr %18, i64 -7
  %99 = load float, ptr %98, align 4
  %100 = getelementptr inbounds float, ptr %17, i64 1
  %101 = load float, ptr %100, align 4
  %102 = fsub float %99, %101
  %103 = fadd float %95, %96
  store float %103, ptr %20, align 4
  %104 = load float, ptr %100, align 4
  %105 = fadd float %99, %104
  store float %105, ptr %98, align 4
  %106 = getelementptr inbounds float, ptr %19, i64 13
  %107 = load float, ptr %106, align 4
  %108 = fmul float %102, %107
  %109 = getelementptr inbounds float, ptr %19, i64 12
  %110 = load float, ptr %109, align 4
  %111 = fmul float %97, %110
  %112 = fadd float %108, %111
  store float %112, ptr %17, align 4
  %113 = load float, ptr %109, align 4
  %114 = fmul float %102, %113
  %115 = load float, ptr %106, align 4
  %116 = fmul float %97, %115
  %117 = fsub float %114, %116
  store float %117, ptr %100, align 4
  %118 = getelementptr inbounds float, ptr %17, i64 -8
  %119 = getelementptr inbounds float, ptr %19, i64 16
  %120 = icmp ult ptr %118, %1
  br i1 %120, label %121, label %16, !llvm.loop !247

121:                                              ; preds = %16
  %122 = icmp sgt i32 %7, 7
  br i1 %122, label %123, label %138

123:                                              ; preds = %121
  %124 = add i32 %7, -7
  br label %125

125:                                              ; preds = %257, %123
  %126 = phi i32 [ %258, %257 ], [ 1, %123 ]
  %127 = icmp eq i32 %126, 31
  br i1 %127, label %257, label %128

128:                                              ; preds = %125
  %129 = shl nuw i32 1, %126
  %130 = ashr i32 %2, %126
  %131 = shl i32 4, %126
  %132 = sext i32 %130 to i64
  %133 = ashr i32 %130, 1
  %134 = sext i32 %133 to i64
  %135 = sext i32 %131 to i64
  %136 = tail call i32 @llvm.smax.i32(i32 %129, i32 1)
  %137 = zext i32 %136 to i64
  br label %142

138:                                              ; preds = %257, %121, %3
  %139 = icmp sgt i32 %2, 0
  br i1 %139, label %140, label %464

140:                                              ; preds = %138
  %141 = zext i32 %2 to i64
  br label %260

142:                                              ; preds = %254, %128
  %143 = phi i64 [ 0, %128 ], [ %255, %254 ]
  %144 = mul nsw i64 %143, %132
  %145 = getelementptr inbounds float, ptr %1, i64 %144
  %146 = getelementptr inbounds float, ptr %145, i64 %132
  %147 = getelementptr inbounds float, ptr %145, i64 %134
  %148 = getelementptr inbounds float, ptr %147, i64 -8
  br label %149

149:                                              ; preds = %149, %142
  %150 = phi ptr [ %148, %142 ], [ %252, %149 ]
  %151 = phi ptr [ %146, %142 ], [ %153, %149 ]
  %152 = phi ptr [ %5, %142 ], [ %251, %149 ]
  %153 = getelementptr inbounds float, ptr %151, i64 -8
  %154 = getelementptr inbounds float, ptr %151, i64 -2
  %155 = load float, ptr %154, align 4
  %156 = getelementptr inbounds float, ptr %150, i64 6
  %157 = load float, ptr %156, align 4
  %158 = fsub float %155, %157
  %159 = getelementptr inbounds float, ptr %151, i64 -1
  %160 = load float, ptr %159, align 4
  %161 = getelementptr inbounds float, ptr %150, i64 7
  %162 = load float, ptr %161, align 4
  %163 = fsub float %160, %162
  %164 = fadd float %155, %157
  store float %164, ptr %154, align 4
  %165 = load float, ptr %161, align 4
  %166 = fadd float %160, %165
  store float %166, ptr %159, align 4
  %167 = getelementptr inbounds float, ptr %152, i64 1
  %168 = load float, ptr %167, align 4
  %169 = fmul float %163, %168
  %170 = load float, ptr %152, align 4
  %171 = fmul float %158, %170
  %172 = fadd float %169, %171
  store float %172, ptr %156, align 4
  %173 = load float, ptr %152, align 4
  %174 = fmul float %163, %173
  %175 = load float, ptr %167, align 4
  %176 = fmul float %158, %175
  %177 = fsub float %174, %176
  store float %177, ptr %161, align 4
  %178 = getelementptr inbounds float, ptr %152, i64 %135
  %179 = getelementptr inbounds float, ptr %151, i64 -4
  %180 = load float, ptr %179, align 4
  %181 = getelementptr inbounds float, ptr %150, i64 4
  %182 = load float, ptr %181, align 4
  %183 = fsub float %180, %182
  %184 = getelementptr inbounds float, ptr %151, i64 -3
  %185 = load float, ptr %184, align 4
  %186 = getelementptr inbounds float, ptr %150, i64 5
  %187 = load float, ptr %186, align 4
  %188 = fsub float %185, %187
  %189 = fadd float %180, %182
  store float %189, ptr %179, align 4
  %190 = load float, ptr %186, align 4
  %191 = fadd float %185, %190
  store float %191, ptr %184, align 4
  %192 = getelementptr inbounds float, ptr %178, i64 1
  %193 = load float, ptr %192, align 4
  %194 = fmul float %188, %193
  %195 = load float, ptr %178, align 4
  %196 = fmul float %183, %195
  %197 = fadd float %194, %196
  store float %197, ptr %181, align 4
  %198 = load float, ptr %178, align 4
  %199 = fmul float %188, %198
  %200 = load float, ptr %192, align 4
  %201 = fmul float %183, %200
  %202 = fsub float %199, %201
  store float %202, ptr %186, align 4
  %203 = getelementptr inbounds float, ptr %178, i64 %135
  %204 = getelementptr inbounds float, ptr %151, i64 -6
  %205 = load float, ptr %204, align 4
  %206 = getelementptr inbounds float, ptr %150, i64 2
  %207 = load float, ptr %206, align 4
  %208 = fsub float %205, %207
  %209 = getelementptr inbounds float, ptr %151, i64 -5
  %210 = load float, ptr %209, align 4
  %211 = getelementptr inbounds float, ptr %150, i64 3
  %212 = load float, ptr %211, align 4
  %213 = fsub float %210, %212
  %214 = fadd float %205, %207
  store float %214, ptr %204, align 4
  %215 = load float, ptr %211, align 4
  %216 = fadd float %210, %215
  store float %216, ptr %209, align 4
  %217 = getelementptr inbounds float, ptr %203, i64 1
  %218 = load float, ptr %217, align 4
  %219 = fmul float %213, %218
  %220 = load float, ptr %203, align 4
  %221 = fmul float %208, %220
  %222 = fadd float %219, %221
  store float %222, ptr %206, align 4
  %223 = load float, ptr %203, align 4
  %224 = fmul float %213, %223
  %225 = load float, ptr %217, align 4
  %226 = fmul float %208, %225
  %227 = fsub float %224, %226
  store float %227, ptr %211, align 4
  %228 = getelementptr inbounds float, ptr %203, i64 %135
  %229 = load float, ptr %153, align 4
  %230 = load float, ptr %150, align 4
  %231 = fsub float %229, %230
  %232 = getelementptr inbounds float, ptr %151, i64 -7
  %233 = load float, ptr %232, align 4
  %234 = getelementptr inbounds float, ptr %150, i64 1
  %235 = load float, ptr %234, align 4
  %236 = fsub float %233, %235
  %237 = fadd float %229, %230
  store float %237, ptr %153, align 4
  %238 = load float, ptr %234, align 4
  %239 = fadd float %233, %238
  store float %239, ptr %232, align 4
  %240 = getelementptr inbounds float, ptr %228, i64 1
  %241 = load float, ptr %240, align 4
  %242 = fmul float %236, %241
  %243 = load float, ptr %228, align 4
  %244 = fmul float %231, %243
  %245 = fadd float %242, %244
  store float %245, ptr %150, align 4
  %246 = load float, ptr %228, align 4
  %247 = fmul float %236, %246
  %248 = load float, ptr %240, align 4
  %249 = fmul float %231, %248
  %250 = fsub float %247, %249
  store float %250, ptr %234, align 4
  %251 = getelementptr inbounds float, ptr %228, i64 %135
  %252 = getelementptr inbounds float, ptr %150, i64 -8
  %253 = icmp ult ptr %252, %145
  br i1 %253, label %254, label %149, !llvm.loop !248

254:                                              ; preds = %149
  %255 = add nuw nsw i64 %143, 1
  %256 = icmp eq i64 %255, %137
  br i1 %256, label %257, label %142, !llvm.loop !249

257:                                              ; preds = %254, %125
  %258 = add nuw i32 %126, 1
  %259 = icmp eq i32 %126, %124
  br i1 %259, label %138, label %125, !llvm.loop !250

260:                                              ; preds = %260, %140
  %261 = phi i64 [ 0, %140 ], [ %462, %260 ]
  %262 = getelementptr inbounds float, ptr %1, i64 %261
  %263 = getelementptr inbounds float, ptr %262, i64 30
  %264 = getelementptr inbounds float, ptr %262, i64 14
  %265 = getelementptr inbounds float, ptr %262, i64 28
  %266 = getelementptr inbounds float, ptr %262, i64 12
  %267 = getelementptr inbounds float, ptr %262, i64 26
  %268 = load float, ptr %267, align 4
  %269 = getelementptr inbounds float, ptr %262, i64 10
  %270 = load float, ptr %269, align 4
  %271 = getelementptr inbounds float, ptr %262, i64 27
  %272 = load float, ptr %271, align 4
  %273 = getelementptr inbounds float, ptr %262, i64 11
  %274 = load float, ptr %273, align 4
  %275 = getelementptr inbounds float, ptr %262, i64 24
  %276 = getelementptr inbounds float, ptr %262, i64 8
  %277 = getelementptr inbounds float, ptr %262, i64 22
  %278 = getelementptr inbounds float, ptr %262, i64 6
  %279 = getelementptr inbounds float, ptr %262, i64 4
  %280 = getelementptr inbounds float, ptr %262, i64 20
  %281 = getelementptr inbounds float, ptr %262, i64 2
  %282 = load float, ptr %281, align 4
  %283 = getelementptr inbounds float, ptr %262, i64 18
  %284 = load float, ptr %283, align 4
  %285 = getelementptr inbounds float, ptr %262, i64 3
  %286 = load float, ptr %285, align 4
  %287 = getelementptr inbounds float, ptr %262, i64 19
  %288 = load float, ptr %287, align 4
  %289 = getelementptr inbounds float, ptr %262, i64 16
  %290 = load <2 x float>, ptr %263, align 4
  %291 = load <2 x float>, ptr %264, align 4
  %292 = fsub <2 x float> %290, %291
  %293 = insertelement <2 x float> poison, float %282, i64 0
  %294 = insertelement <2 x float> %293, float %272, i64 1
  %295 = insertelement <2 x float> poison, float %284, i64 0
  %296 = insertelement <2 x float> %295, float %274, i64 1
  %297 = fsub <2 x float> %294, %296
  %298 = insertelement <2 x float> poison, float %286, i64 0
  %299 = insertelement <2 x float> %298, float %268, i64 1
  %300 = insertelement <2 x float> poison, float %288, i64 0
  %301 = insertelement <2 x float> %300, float %270, i64 1
  %302 = fsub <2 x float> %299, %301
  %303 = shufflevector <2 x float> %302, <2 x float> %297, <2 x i32> <i32 1, i32 2>
  %304 = shufflevector <2 x float> %297, <2 x float> %302, <2 x i32> <i32 1, i32 2>
  %305 = fadd <2 x float> %303, %304
  %306 = fmul <2 x float> %305, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %307 = fsub <2 x float> %302, %297
  %308 = fmul <2 x float> %307, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %309 = fsub <2 x float> %308, %306
  %310 = fadd <2 x float> %306, %308
  %311 = shufflevector <2 x float> %310, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %312 = load <2 x float>, ptr %278, align 4
  %313 = load <2 x float>, ptr %277, align 4
  %314 = fadd <2 x float> %312, %313
  %315 = insertelement <2 x float> poison, float %272, i64 0
  %316 = insertelement <2 x float> %315, float %282, i64 1
  %317 = insertelement <2 x float> poison, float %274, i64 0
  %318 = insertelement <2 x float> %317, float %284, i64 1
  %319 = fadd <2 x float> %316, %318
  %320 = fadd <2 x float> %299, %301
  %321 = fadd <2 x float> %290, %291
  %322 = shufflevector <2 x float> %312, <2 x float> %313, <2 x i32> <i32 1, i32 2>
  %323 = shufflevector <2 x float> %312, <2 x float> %313, <2 x i32> <i32 3, i32 0>
  %324 = fsub <2 x float> %322, %323
  %325 = fsub <2 x float> %292, %324
  %326 = fsub <2 x float> %325, %309
  %327 = shufflevector <2 x float> %326, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %328 = fadd <2 x float> %325, %309
  %329 = shufflevector <2 x float> %328, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %330 = fadd <2 x float> %292, %324
  %331 = fsub <2 x float> %330, %311
  %332 = shufflevector <2 x float> %331, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %333 = fadd <2 x float> %330, %311
  %334 = shufflevector <2 x float> %333, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %335 = fsub <2 x float> %320, %319
  %336 = fsub <2 x float> %321, %314
  %337 = fsub <2 x float> %336, %335
  %338 = shufflevector <2 x float> %337, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %339 = fadd <2 x float> %336, %335
  %340 = shufflevector <2 x float> %339, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %341 = load <2 x float>, ptr %265, align 4
  %342 = load <2 x float>, ptr %266, align 4
  %343 = fadd <2 x float> %341, %342
  %344 = load <2 x float>, ptr %275, align 4
  %345 = load <2 x float>, ptr %276, align 4
  %346 = fadd <2 x float> %344, %345
  %347 = load <2 x float>, ptr %279, align 4
  %348 = load <2 x float>, ptr %280, align 4
  %349 = fadd <2 x float> %347, %348
  %350 = load <2 x float>, ptr %262, align 4
  %351 = load <2 x float>, ptr %289, align 4
  %352 = fadd <2 x float> %350, %351
  %353 = shufflevector <2 x float> %341, <2 x float> %347, <2 x i32> <i32 1, i32 2>
  %354 = shufflevector <2 x float> %342, <2 x float> %348, <2 x i32> <i32 1, i32 2>
  %355 = fsub <2 x float> %353, %354
  %356 = shufflevector <2 x float> %341, <2 x float> %347, <2 x i32> <i32 0, i32 3>
  %357 = shufflevector <2 x float> %342, <2 x float> %348, <2 x i32> <i32 0, i32 3>
  %358 = fsub <2 x float> %356, %357
  %359 = fmul <2 x float> %358, <float 0x3FD87DE2A0000000, float 0x3FED906BC0000000>
  %360 = fmul <2 x float> %355, <float 0x3FED906BC0000000, float 0x3FD87DE2A0000000>
  %361 = fadd <2 x float> %360, %359
  %362 = fmul <2 x float> %358, <float 0x3FED906BC0000000, float 0x3FD87DE2A0000000>
  %363 = fmul <2 x float> %355, <float 0x3FD87DE2A0000000, float 0x3FED906BC0000000>
  %364 = fsub <2 x float> %362, %363
  %365 = shufflevector <2 x float> %364, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %366 = shufflevector <2 x float> %344, <2 x float> %350, <2 x i32> <i32 1, i32 2>
  %367 = shufflevector <2 x float> %345, <2 x float> %351, <2 x i32> <i32 1, i32 2>
  %368 = fsub <2 x float> %366, %367
  %369 = shufflevector <2 x float> %344, <2 x float> %350, <2 x i32> <i32 0, i32 3>
  %370 = shufflevector <2 x float> %345, <2 x float> %351, <2 x i32> <i32 0, i32 3>
  %371 = fsub <2 x float> %369, %370
  %372 = fmul <2 x float> %371, <float 0x3FED906BC0000000, float 0x3FD87DE2A0000000>
  %373 = fmul <2 x float> %368, <float 0x3FD87DE2A0000000, float 0x3FED906BC0000000>
  %374 = fadd <2 x float> %373, %372
  %375 = fmul <2 x float> %371, <float 0x3FD87DE2A0000000, float 0x3FED906BC0000000>
  %376 = fmul <2 x float> %368, <float 0x3FED906BC0000000, float 0x3FD87DE2A0000000>
  %377 = fsub <2 x float> %375, %376
  %378 = shufflevector <2 x float> %377, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %379 = fsub <2 x float> %378, %374
  %380 = fsub <2 x float> %374, %378
  %381 = fadd <2 x float> %374, %378
  %382 = fsub <2 x float> %365, %361
  %383 = fsub <2 x float> %361, %365
  %384 = fadd <2 x float> %361, %365
  %385 = shufflevector <2 x float> %379, <2 x float> poison, <2 x i32> zeroinitializer
  %386 = shufflevector <2 x float> %380, <2 x float> undef, <2 x i32> <i32 1, i32 1>
  %387 = fsub <2 x float> %385, %386
  %388 = fadd <2 x float> %385, %386
  %389 = shufflevector <2 x float> %387, <2 x float> %388, <2 x i32> <i32 0, i32 3>
  %390 = fmul <2 x float> %389, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %391 = shufflevector <2 x float> %382, <2 x float> undef, <2 x i32> <i32 1, i32 1>
  %392 = shufflevector <2 x float> %383, <2 x float> poison, <2 x i32> zeroinitializer
  %393 = fadd <2 x float> %391, %392
  %394 = fsub <2 x float> %391, %392
  %395 = shufflevector <2 x float> %393, <2 x float> %394, <2 x i32> <i32 0, i32 3>
  %396 = fmul <2 x float> %395, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %397 = fsub <2 x float> %396, %390
  %398 = shufflevector <2 x float> %397, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %399 = fadd <2 x float> %396, %390
  %400 = shufflevector <2 x float> %399, <2 x float> poison, <4 x i32> <i32 1, i32 0, i32 1, i32 0>
  %401 = fsub <2 x float> %384, %381
  %402 = shufflevector <2 x float> %401, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %403 = fadd <2 x float> %384, %381
  %404 = shufflevector <2 x float> %403, <2 x float> poison, <4 x i32> <i32 1, i32 0, i32 1, i32 0>
  %405 = fsub <2 x float> %352, %346
  %406 = fsub <2 x float> %352, %346
  %407 = fadd <2 x float> %346, %352
  %408 = fsub <2 x float> %343, %349
  %409 = fsub <2 x float> %343, %349
  %410 = fadd <2 x float> %343, %349
  %411 = fadd <4 x float> %327, %398
  %412 = fsub <4 x float> %327, %398
  %413 = shufflevector <4 x float> %411, <4 x float> %412, <4 x i32> <i32 0, i32 5, i32 6, i32 3>
  store <4 x float> %413, ptr %262, align 4
  %414 = fsub <4 x float> %329, %400
  %415 = fadd <4 x float> %329, %400
  %416 = shufflevector <4 x float> %414, <4 x float> %415, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  store <4 x float> %416, ptr %279, align 4
  %417 = fadd <4 x float> %332, %402
  %418 = fsub <4 x float> %332, %402
  %419 = shufflevector <4 x float> %417, <4 x float> %418, <4 x i32> <i32 0, i32 5, i32 6, i32 3>
  store <4 x float> %419, ptr %276, align 4
  %420 = fsub <4 x float> %334, %404
  %421 = fadd <4 x float> %334, %404
  %422 = shufflevector <4 x float> %420, <4 x float> %421, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  store <4 x float> %422, ptr %266, align 4
  %423 = shufflevector <2 x float> %405, <2 x float> undef, <2 x i32> <i32 1, i32 1>
  %424 = shufflevector <2 x float> %406, <2 x float> poison, <2 x i32> zeroinitializer
  %425 = fsub <2 x float> %423, %424
  %426 = fadd <2 x float> %423, %424
  %427 = shufflevector <2 x float> %425, <2 x float> %426, <2 x i32> <i32 0, i32 3>
  %428 = fmul <2 x float> %427, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %429 = fadd <2 x float> %319, %320
  %430 = shufflevector <2 x float> %429, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %431 = shufflevector <2 x float> %408, <2 x float> poison, <2 x i32> zeroinitializer
  %432 = shufflevector <2 x float> %409, <2 x float> undef, <2 x i32> <i32 1, i32 1>
  %433 = fadd <2 x float> %431, %432
  %434 = fsub <2 x float> %431, %432
  %435 = shufflevector <2 x float> %433, <2 x float> %434, <2 x i32> <i32 0, i32 3>
  %436 = fmul <2 x float> %435, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %437 = fadd <2 x float> %321, %314
  %438 = fsub <2 x float> %436, %428
  %439 = shufflevector <2 x float> %438, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %440 = fadd <4 x float> %338, %439
  %441 = fsub <4 x float> %338, %439
  %442 = shufflevector <4 x float> %440, <4 x float> %441, <4 x i32> <i32 0, i32 5, i32 6, i32 3>
  store <4 x float> %442, ptr %289, align 4
  %443 = fadd <2 x float> %436, %428
  %444 = shufflevector <2 x float> %443, <2 x float> poison, <4 x i32> <i32 1, i32 0, i32 1, i32 0>
  %445 = fsub <4 x float> %340, %444
  %446 = fadd <4 x float> %340, %444
  %447 = shufflevector <4 x float> %445, <4 x float> %446, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  store <4 x float> %447, ptr %280, align 4
  %448 = fsub <2 x float> %410, %407
  %449 = shufflevector <2 x float> %448, <2 x float> poison, <4 x i32> <i32 1, i32 0, i32 1, i32 0>
  %450 = fsub <2 x float> %437, %430
  %451 = shufflevector <2 x float> %450, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %452 = fadd <4 x float> %451, %449
  %453 = fsub <4 x float> %451, %449
  %454 = shufflevector <4 x float> %452, <4 x float> %453, <4 x i32> <i32 0, i32 5, i32 6, i32 3>
  store <4 x float> %454, ptr %275, align 4
  %455 = fadd <2 x float> %410, %407
  %456 = shufflevector <2 x float> %455, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %457 = fadd <2 x float> %437, %430
  %458 = shufflevector <2 x float> %457, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %459 = fsub <4 x float> %458, %456
  %460 = fadd <4 x float> %458, %456
  %461 = shufflevector <4 x float> %459, <4 x float> %460, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  store <4 x float> %461, ptr %265, align 4
  %462 = add nuw nsw i64 %261, 32
  %463 = icmp ult i64 %462, %141
  br i1 %463, label %260, label %464, !llvm.loop !251

464:                                              ; preds = %260, %138
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal void @_vorbis_apply_window(ptr nocapture noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, i32 noundef %3, i32 noundef %4, i32 noundef %5) #30 {
  %7 = icmp eq i32 %4, 0
  %8 = select i1 %7, i32 0, i32 %3
  %9 = select i1 %7, i32 0, i32 %5
  %10 = sext i32 %8 to i64
  %11 = getelementptr inbounds i32, ptr %1, i64 %10
  %12 = load i32, ptr %11, align 4
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds [8 x ptr], ptr @vwin, i64 0, i64 %13
  %15 = load ptr, ptr %14, align 8
  %16 = sext i32 %9 to i64
  %17 = getelementptr inbounds i32, ptr %1, i64 %16
  %18 = load i32, ptr %17, align 4
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds [8 x ptr], ptr @vwin, i64 0, i64 %19
  %21 = load ptr, ptr %20, align 8
  %22 = sext i32 %4 to i64
  %23 = getelementptr inbounds i64, ptr %2, i64 %22
  %24 = load i64, ptr %23, align 8
  %25 = getelementptr inbounds i64, ptr %2, i64 %10
  %26 = load i64, ptr %25, align 8
  %27 = getelementptr inbounds i64, ptr %2, i64 %16
  %28 = load i64, ptr %27, align 8
  %29 = sdiv i64 %24, 4
  %30 = sdiv i64 %26, -4
  %31 = add nsw i64 %30, %29
  %32 = sdiv i64 %26, 2
  %33 = add nsw i64 %31, %32
  %34 = sdiv i64 %24, 2
  %35 = add nsw i64 %34, %29
  %36 = sdiv i64 %28, -4
  %37 = add nsw i64 %35, %36
  %38 = sdiv i64 %28, 2
  %39 = add nsw i64 %37, %38
  %40 = icmp sgt i64 %31, 0
  br i1 %40, label %41, label %44

41:                                               ; preds = %6
  %42 = shl nuw i64 %31, 2
  tail call void @llvm.memset.p0.i64(ptr align 4 %0, i8 0, i64 %42, i1 false)
  %43 = and i64 %31, 4294967295
  br label %44

44:                                               ; preds = %41, %6
  %45 = phi i64 [ 0, %6 ], [ %43, %41 ]
  %46 = icmp sgt i64 %33, %45
  br i1 %46, label %47, label %58

47:                                               ; preds = %47, %44
  %48 = phi i64 [ %55, %47 ], [ %45, %44 ]
  %49 = phi i64 [ %56, %47 ], [ 0, %44 ]
  %50 = getelementptr inbounds float, ptr %15, i64 %49
  %51 = load float, ptr %50, align 4
  %52 = getelementptr inbounds float, ptr %0, i64 %48
  %53 = load float, ptr %52, align 4
  %54 = fmul float %51, %53
  store float %54, ptr %52, align 4
  %55 = add nuw nsw i64 %48, 1
  %56 = add nuw i64 %49, 1
  %57 = icmp sgt i64 %33, %55
  br i1 %57, label %47, label %58, !llvm.loop !252

58:                                               ; preds = %47, %44
  %59 = shl i64 %37, 32
  %60 = ashr exact i64 %59, 32
  %61 = icmp sgt i64 %39, %60
  br i1 %61, label %62, label %64

62:                                               ; preds = %58
  %63 = trunc i64 %38 to i32
  br label %69

64:                                               ; preds = %69, %58
  %65 = phi i64 [ %37, %58 ], [ %79, %69 ]
  %66 = shl i64 %65, 32
  %67 = ashr exact i64 %66, 32
  %68 = icmp sgt i64 %24, %67
  br i1 %68, label %81, label %86

69:                                               ; preds = %69, %62
  %70 = phi i64 [ %60, %62 ], [ %79, %69 ]
  %71 = phi i32 [ %63, %62 ], [ %72, %69 ]
  %72 = add i32 %71, -1
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds float, ptr %21, i64 %73
  %75 = load float, ptr %74, align 4
  %76 = getelementptr inbounds float, ptr %0, i64 %70
  %77 = load float, ptr %76, align 4
  %78 = fmul float %75, %77
  store float %78, ptr %76, align 4
  %79 = add nsw i64 %70, 1
  %80 = icmp sgt i64 %39, %79
  br i1 %80, label %69, label %64, !llvm.loop !253

81:                                               ; preds = %81, %64
  %82 = phi i64 [ %84, %81 ], [ %67, %64 ]
  %83 = getelementptr inbounds float, ptr %0, i64 %82
  store float 0.000000e+00, ptr %83, align 4
  %84 = add nsw i64 %82, 1
  %85 = icmp sgt i64 %24, %84
  br i1 %85, label %81, label %86, !llvm.loop !254

86:                                               ; preds = %81, %64
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @mdct_forward(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef writeonly %2) #21 {
  %4 = load i32, ptr %0, align 8
  %5 = ashr i32 %4, 1
  %6 = ashr i32 %4, 2
  %7 = ashr i32 %4, 3
  %8 = sext i32 %4 to i64
  %9 = shl nsw i64 %8, 2
  %10 = alloca i8, i64 %9, align 16
  %11 = sext i32 %5 to i64
  %12 = getelementptr inbounds float, ptr %10, i64 %11
  %13 = getelementptr inbounds float, ptr %1, i64 %11
  %14 = sext i32 %6 to i64
  %15 = getelementptr inbounds float, ptr %13, i64 %14
  %16 = getelementptr inbounds %struct.mdct_lookup, ptr %0, i64 0, i32 2
  %17 = load ptr, ptr %16, align 8
  %18 = getelementptr inbounds float, ptr %17, i64 %11
  %19 = icmp sgt i32 %4, 7
  br i1 %19, label %20, label %57

20:                                               ; preds = %3
  %21 = getelementptr inbounds float, ptr %15, i64 1
  %22 = sext i32 %7 to i64
  br label %23

23:                                               ; preds = %23, %20
  %24 = phi i64 [ 0, %20 ], [ %53, %23 ]
  %25 = phi ptr [ %18, %20 ], [ %29, %23 ]
  %26 = phi ptr [ %21, %20 ], [ %52, %23 ]
  %27 = phi ptr [ %15, %20 ], [ %28, %23 ]
  %28 = getelementptr inbounds float, ptr %27, i64 -4
  %29 = getelementptr inbounds float, ptr %25, i64 -2
  %30 = getelementptr inbounds float, ptr %27, i64 -2
  %31 = load float, ptr %30, align 4
  %32 = load float, ptr %26, align 4
  %33 = fadd float %31, %32
  %34 = load float, ptr %28, align 4
  %35 = getelementptr inbounds float, ptr %26, i64 2
  %36 = load float, ptr %35, align 4
  %37 = fadd float %34, %36
  %38 = getelementptr inbounds float, ptr %25, i64 -1
  %39 = load float, ptr %38, align 4
  %40 = fmul float %37, %39
  %41 = load float, ptr %29, align 4
  %42 = fmul float %33, %41
  %43 = fadd float %40, %42
  %44 = getelementptr inbounds float, ptr %12, i64 %24
  store float %43, ptr %44, align 4
  %45 = load float, ptr %29, align 4
  %46 = fmul float %37, %45
  %47 = load float, ptr %38, align 4
  %48 = fmul float %33, %47
  %49 = fsub float %46, %48
  %50 = or i64 %24, 1
  %51 = getelementptr inbounds float, ptr %12, i64 %50
  store float %49, ptr %51, align 4
  %52 = getelementptr inbounds float, ptr %26, i64 4
  %53 = add nuw nsw i64 %24, 2
  %54 = icmp slt i64 %53, %22
  br i1 %54, label %23, label %55, !llvm.loop !255

55:                                               ; preds = %23
  %.lcssa5 = phi ptr [ %28, %23 ]
  %.lcssa4 = phi ptr [ %29, %23 ]
  %.lcssa3 = phi i64 [ %53, %23 ]
  %56 = trunc i64 %.lcssa3 to i32
  br label %57

57:                                               ; preds = %55, %3
  %58 = phi ptr [ %15, %3 ], [ %.lcssa5, %55 ]
  %59 = phi ptr [ %18, %3 ], [ %.lcssa4, %55 ]
  %60 = phi i32 [ 0, %3 ], [ %56, %55 ]
  %61 = getelementptr inbounds float, ptr %1, i64 1
  %62 = sub nsw i32 %5, %7
  %63 = icmp slt i32 %60, %62
  br i1 %63, label %64, label %102

64:                                               ; preds = %57
  %65 = zext i32 %60 to i64
  %66 = sext i32 %62 to i64
  br label %67

67:                                               ; preds = %67, %64
  %68 = phi i64 [ %65, %64 ], [ %98, %67 ]
  %69 = phi ptr [ %59, %64 ], [ %72, %67 ]
  %70 = phi ptr [ %61, %64 ], [ %97, %67 ]
  %71 = phi ptr [ %58, %64 ], [ %73, %67 ]
  %72 = getelementptr inbounds float, ptr %69, i64 -2
  %73 = getelementptr inbounds float, ptr %71, i64 -4
  %74 = getelementptr inbounds float, ptr %71, i64 -2
  %75 = load float, ptr %74, align 4
  %76 = load float, ptr %70, align 4
  %77 = fsub float %75, %76
  %78 = load float, ptr %73, align 4
  %79 = getelementptr inbounds float, ptr %70, i64 2
  %80 = load float, ptr %79, align 4
  %81 = fsub float %78, %80
  %82 = getelementptr inbounds float, ptr %69, i64 -1
  %83 = load float, ptr %82, align 4
  %84 = fmul float %81, %83
  %85 = load float, ptr %72, align 4
  %86 = fmul float %77, %85
  %87 = fadd float %84, %86
  %88 = getelementptr inbounds float, ptr %12, i64 %68
  store float %87, ptr %88, align 4
  %89 = load float, ptr %72, align 4
  %90 = fmul float %81, %89
  %91 = load float, ptr %82, align 4
  %92 = fmul float %77, %91
  %93 = fsub float %90, %92
  %94 = and i64 %68, 4294967294
  %95 = or i64 %94, 1
  %96 = getelementptr inbounds float, ptr %12, i64 %95
  store float %93, ptr %96, align 4
  %97 = getelementptr inbounds float, ptr %70, i64 4
  %98 = add nuw nsw i64 %68, 2
  %99 = icmp slt i64 %98, %66
  br i1 %99, label %67, label %100, !llvm.loop !256

100:                                              ; preds = %67
  %.lcssa2 = phi ptr [ %72, %67 ]
  %.lcssa1 = phi ptr [ %97, %67 ]
  %.lcssa = phi i64 [ %98, %67 ]
  %101 = trunc i64 %.lcssa to i32
  br label %102

102:                                              ; preds = %100, %57
  %103 = phi ptr [ %61, %57 ], [ %.lcssa1, %100 ]
  %104 = phi ptr [ %59, %57 ], [ %.lcssa2, %100 ]
  %105 = phi i32 [ %60, %57 ], [ %101, %100 ]
  %106 = icmp slt i32 %105, %5
  br i1 %106, label %107, label %145

107:                                              ; preds = %102
  %108 = getelementptr inbounds float, ptr %1, i64 %8
  %109 = zext i32 %105 to i64
  br label %110

110:                                              ; preds = %110, %107
  %111 = phi i64 [ %109, %107 ], [ %143, %110 ]
  %112 = phi ptr [ %104, %107 ], [ %115, %110 ]
  %113 = phi ptr [ %103, %107 ], [ %142, %110 ]
  %114 = phi ptr [ %108, %107 ], [ %116, %110 ]
  %115 = getelementptr inbounds float, ptr %112, i64 -2
  %116 = getelementptr inbounds float, ptr %114, i64 -4
  %117 = getelementptr inbounds float, ptr %114, i64 -2
  %118 = load float, ptr %117, align 4
  %119 = fneg float %118
  %120 = load float, ptr %113, align 4
  %121 = fsub float %119, %120
  %122 = load float, ptr %116, align 4
  %123 = fneg float %122
  %124 = getelementptr inbounds float, ptr %113, i64 2
  %125 = load float, ptr %124, align 4
  %126 = fsub float %123, %125
  %127 = getelementptr inbounds float, ptr %112, i64 -1
  %128 = load float, ptr %127, align 4
  %129 = fmul float %126, %128
  %130 = load float, ptr %115, align 4
  %131 = fmul float %121, %130
  %132 = fadd float %129, %131
  %133 = getelementptr inbounds float, ptr %12, i64 %111
  store float %132, ptr %133, align 4
  %134 = load float, ptr %115, align 4
  %135 = fmul float %126, %134
  %136 = load float, ptr %127, align 4
  %137 = fmul float %121, %136
  %138 = fsub float %135, %137
  %139 = and i64 %111, 4294967294
  %140 = or i64 %139, 1
  %141 = getelementptr inbounds float, ptr %12, i64 %140
  store float %138, ptr %141, align 4
  %142 = getelementptr inbounds float, ptr %113, i64 4
  %143 = add nuw nsw i64 %111, 2
  %144 = icmp slt i64 %143, %11
  br i1 %144, label %110, label %145, !llvm.loop !257

145:                                              ; preds = %110, %102
  call fastcc void @mdct_butterflies(ptr noundef nonnull %0, ptr noundef nonnull %12, i32 noundef %5) #56
  %146 = load i32, ptr %0, align 8
  %147 = getelementptr inbounds %struct.mdct_lookup, ptr %0, i64 0, i32 3
  %148 = load ptr, ptr %147, align 8
  %149 = ashr i32 %146, 1
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds float, ptr %10, i64 %150
  %152 = load ptr, ptr %16, align 8
  %153 = sext i32 %146 to i64
  %154 = getelementptr inbounds float, ptr %152, i64 %153
  br label %155

155:                                              ; preds = %155, %145
  %156 = phi ptr [ %154, %145 ], [ %233, %155 ]
  %157 = phi ptr [ %151, %145 ], [ %184, %155 ]
  %158 = phi ptr [ %10, %145 ], [ %235, %155 ]
  %159 = phi ptr [ %148, %145 ], [ %234, %155 ]
  %160 = load i32, ptr %159, align 4
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds float, ptr %151, i64 %161
  %163 = getelementptr inbounds i32, ptr %159, i64 1
  %164 = load i32, ptr %163, align 4
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds float, ptr %151, i64 %165
  %167 = getelementptr inbounds float, ptr %162, i64 1
  %168 = load float, ptr %167, align 4
  %169 = getelementptr inbounds float, ptr %166, i64 1
  %170 = load float, ptr %169, align 4
  %171 = fsub float %168, %170
  %172 = load float, ptr %162, align 4
  %173 = load float, ptr %166, align 4
  %174 = fadd float %172, %173
  %175 = load float, ptr %156, align 4
  %176 = fmul float %174, %175
  %177 = getelementptr inbounds float, ptr %156, i64 1
  %178 = load float, ptr %177, align 4
  %179 = fmul float %171, %178
  %180 = fadd float %176, %179
  %181 = fmul float %174, %178
  %182 = fmul float %171, %175
  %183 = fsub float %181, %182
  %184 = getelementptr inbounds float, ptr %157, i64 -4
  %185 = fadd float %168, %170
  %186 = fmul float %185, 5.000000e-01
  %187 = fsub float %172, %173
  %188 = fmul float %187, 5.000000e-01
  %189 = fadd float %186, %180
  store float %189, ptr %158, align 4
  %190 = fsub float %186, %180
  %191 = getelementptr inbounds float, ptr %157, i64 -2
  store float %190, ptr %191, align 4
  %192 = fadd float %188, %183
  %193 = getelementptr inbounds float, ptr %158, i64 1
  store float %192, ptr %193, align 4
  %194 = fsub float %183, %188
  %195 = getelementptr inbounds float, ptr %157, i64 -1
  store float %194, ptr %195, align 4
  %196 = getelementptr inbounds i32, ptr %159, i64 2
  %197 = load i32, ptr %196, align 4
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds float, ptr %151, i64 %198
  %200 = getelementptr inbounds i32, ptr %159, i64 3
  %201 = load i32, ptr %200, align 4
  %202 = sext i32 %201 to i64
  %203 = getelementptr inbounds float, ptr %151, i64 %202
  %204 = getelementptr inbounds float, ptr %199, i64 1
  %205 = load float, ptr %204, align 4
  %206 = getelementptr inbounds float, ptr %203, i64 1
  %207 = load float, ptr %206, align 4
  %208 = fsub float %205, %207
  %209 = load float, ptr %199, align 4
  %210 = load float, ptr %203, align 4
  %211 = fadd float %209, %210
  %212 = getelementptr inbounds float, ptr %156, i64 2
  %213 = load float, ptr %212, align 4
  %214 = fmul float %211, %213
  %215 = getelementptr inbounds float, ptr %156, i64 3
  %216 = load float, ptr %215, align 4
  %217 = fmul float %208, %216
  %218 = fadd float %214, %217
  %219 = fmul float %211, %216
  %220 = fmul float %208, %213
  %221 = fsub float %219, %220
  %222 = fadd float %205, %207
  %223 = fmul float %222, 5.000000e-01
  %224 = fsub float %209, %210
  %225 = fmul float %224, 5.000000e-01
  %226 = fadd float %223, %218
  %227 = getelementptr inbounds float, ptr %158, i64 2
  store float %226, ptr %227, align 4
  %228 = fsub float %223, %218
  store float %228, ptr %184, align 4
  %229 = fadd float %225, %221
  %230 = getelementptr inbounds float, ptr %158, i64 3
  store float %229, ptr %230, align 4
  %231 = fsub float %221, %225
  %232 = getelementptr inbounds float, ptr %157, i64 -3
  store float %231, ptr %232, align 4
  %233 = getelementptr inbounds float, ptr %156, i64 4
  %234 = getelementptr inbounds i32, ptr %159, i64 4
  %235 = getelementptr inbounds float, ptr %158, i64 4
  %236 = icmp ult ptr %235, %184
  br i1 %236, label %155, label %237, !llvm.loop !243

237:                                              ; preds = %155
  %238 = icmp sgt i32 %4, 3
  br i1 %238, label %239, label %272

239:                                              ; preds = %237
  %240 = getelementptr inbounds float, ptr %2, i64 %11
  %241 = getelementptr inbounds float, ptr %152, i64 %11
  %242 = getelementptr inbounds %struct.mdct_lookup, ptr %0, i64 0, i32 4
  %243 = call i32 @llvm.smax.i32(i32 %6, i32 1)
  %244 = zext i32 %243 to i64
  br label %245

245:                                              ; preds = %245, %239
  %246 = phi i64 [ 0, %239 ], [ %270, %245 ]
  %247 = phi ptr [ %241, %239 ], [ %269, %245 ]
  %248 = phi ptr [ %240, %239 ], [ %250, %245 ]
  %249 = phi ptr [ %10, %239 ], [ %268, %245 ]
  %250 = getelementptr inbounds float, ptr %248, i64 -1
  %251 = load <2 x float>, ptr %249, align 4
  %252 = load <2 x float>, ptr %247, align 4
  %253 = fmul <2 x float> %251, %252
  %254 = shufflevector <2 x float> %253, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %255 = fadd <2 x float> %253, %254
  %256 = extractelement <2 x float> %255, i64 0
  %257 = load float, ptr %242, align 8
  %258 = fmul float %257, %256
  %259 = getelementptr inbounds float, ptr %2, i64 %246
  store float %258, ptr %259, align 4
  %260 = load <2 x float>, ptr %247, align 4
  %261 = shufflevector <2 x float> %260, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %262 = fmul <2 x float> %251, %261
  %263 = shufflevector <2 x float> %262, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %264 = fsub <2 x float> %262, %263
  %265 = extractelement <2 x float> %264, i64 0
  %266 = load float, ptr %242, align 8
  %267 = fmul float %266, %265
  store float %267, ptr %250, align 4
  %268 = getelementptr inbounds float, ptr %249, i64 2
  %269 = getelementptr inbounds float, ptr %247, i64 2
  %270 = add nuw nsw i64 %246, 1
  %271 = icmp eq i64 %270, %244
  br i1 %271, label %272, label %245, !llvm.loop !258

272:                                              ; preds = %245, %237
  ret void
}

; Function Attrs: nofree nounwind optsize memory(readwrite, inaccessiblemem: write) uwtable
define internal void @drft_forward(ptr nocapture noundef readonly %0, ptr nocapture noundef %1) #37 {
  %3 = load i32, ptr %0, align 8
  %4 = icmp eq i32 %3, 1
  br i1 %4, label %79, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.drft_lookup, ptr %0, i64 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = sext i32 %3 to i64
  %9 = getelementptr inbounds float, ptr %7, i64 %8
  %10 = getelementptr inbounds %struct.drft_lookup, ptr %0, i64 0, i32 2
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr inbounds i32, ptr %11, i64 1
  %13 = load i32, ptr %12, align 4
  %14 = getelementptr float, ptr %9, i64 -1
  %15 = icmp sgt i32 %13, 0
  br i1 %15, label %16, label %79

16:                                               ; preds = %5
  %17 = add nuw i32 %13, 1
  %18 = zext i32 %13 to i64
  br label %19

19:                                               ; preds = %62, %16
  %20 = phi i64 [ 0, %16 ], [ %65, %62 ]
  %21 = phi i32 [ %3, %16 ], [ %29, %62 ]
  %22 = phi i32 [ 1, %16 ], [ %64, %62 ]
  %23 = phi i32 [ %3, %16 ], [ %34, %62 ]
  %24 = trunc i64 %20 to i32
  %25 = sub i32 %17, %24
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i32, ptr %11, i64 %26
  %28 = load i32, ptr %27, align 4
  %29 = sdiv i32 %21, %28
  %30 = sdiv i32 %3, %21
  %31 = mul nsw i32 %30, %29
  %32 = add nsw i32 %28, -1
  %33 = mul nsw i32 %30, %32
  %34 = sub nsw i32 %23, %33
  switch i32 %28, label %53 [
    i32 4, label %35
    i32 2, label %47
  ]

35:                                               ; preds = %19
  %36 = add nsw i32 %34, %30
  %37 = add nsw i32 %36, %30
  %38 = icmp eq i32 %22, 1
  %39 = sext i32 %34 to i64
  %40 = getelementptr float, ptr %14, i64 %39
  %41 = sext i32 %36 to i64
  %42 = getelementptr float, ptr %14, i64 %41
  %43 = sext i32 %37 to i64
  %44 = getelementptr float, ptr %14, i64 %43
  br i1 %38, label %46, label %45

45:                                               ; preds = %35
  tail call fastcc void @dradf4(i32 noundef %30, i32 noundef %29, ptr noundef %7, ptr noundef %1, ptr noundef nonnull %40, ptr noundef nonnull %42, ptr noundef nonnull %44) #56
  br label %62

46:                                               ; preds = %35
  tail call fastcc void @dradf4(i32 noundef %30, i32 noundef %29, ptr noundef %1, ptr noundef %7, ptr noundef nonnull %40, ptr noundef nonnull %42, ptr noundef nonnull %44) #56
  br label %62

47:                                               ; preds = %19
  %48 = icmp eq i32 %22, 1
  %49 = sext i32 %34 to i64
  %50 = getelementptr float, ptr %14, i64 %49
  br i1 %48, label %51, label %52

51:                                               ; preds = %47
  tail call fastcc void @dradf2(i32 noundef %30, i32 noundef %29, ptr noundef %1, ptr noundef %7, ptr noundef nonnull %50) #56
  br label %62

52:                                               ; preds = %47
  tail call fastcc void @dradf2(i32 noundef %30, i32 noundef %29, ptr noundef %7, ptr noundef %1, ptr noundef nonnull %50) #56
  br label %62

53:                                               ; preds = %19
  %54 = sub nuw nsw i32 1, %22
  %55 = icmp eq i32 %30, 1
  %56 = select i1 %55, i32 %22, i32 %54
  %57 = icmp eq i32 %56, 0
  %58 = sext i32 %34 to i64
  %59 = getelementptr float, ptr %14, i64 %58
  br i1 %57, label %60, label %61

60:                                               ; preds = %53
  tail call fastcc void @dradfg(i32 noundef %30, i32 noundef %28, i32 noundef %29, i32 noundef %31, ptr noundef %1, ptr noundef %1, ptr noundef %1, ptr noundef %7, ptr noundef %7, ptr noundef nonnull %59) #56
  br label %62

61:                                               ; preds = %53
  tail call fastcc void @dradfg(i32 noundef %30, i32 noundef %28, i32 noundef %29, i32 noundef %31, ptr noundef %7, ptr noundef %7, ptr noundef %7, ptr noundef %1, ptr noundef %1, ptr noundef nonnull %59) #56
  br label %62

62:                                               ; preds = %61, %60, %52, %51, %46, %45
  %63 = phi i1 [ true, %61 ], [ false, %60 ], [ false, %52 ], [ true, %51 ], [ false, %45 ], [ true, %46 ]
  %64 = phi i32 [ 0, %61 ], [ 1, %60 ], [ 1, %52 ], [ 0, %51 ], [ 1, %45 ], [ 0, %46 ]
  %65 = add nuw nsw i64 %20, 1
  %66 = icmp eq i64 %65, %18
  br i1 %66, label %67, label %19, !llvm.loop !259

67:                                               ; preds = %62
  %.lcssa = phi i1 [ %63, %62 ]
  %68 = icmp sgt i32 %3, 0
  %69 = and i1 %68, %.lcssa
  br i1 %69, label %70, label %79

70:                                               ; preds = %67
  %71 = zext i32 %3 to i64
  br label %72

72:                                               ; preds = %72, %70
  %73 = phi i64 [ 0, %70 ], [ %77, %72 ]
  %74 = getelementptr inbounds float, ptr %7, i64 %73
  %75 = load float, ptr %74, align 4
  %76 = getelementptr inbounds float, ptr %1, i64 %73
  store float %75, ptr %76, align 4
  %77 = add nuw nsw i64 %73, 1
  %78 = icmp eq i64 %77, %71
  br i1 %78, label %79, label %72, !llvm.loop !260

79:                                               ; preds = %72, %67, %5, %2
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @_vp_noisemask(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef %2) #21 {
  %4 = load i32, ptr %0, align 8
  %5 = sext i32 %4 to i64
  %6 = shl nsw i64 %5, 2
  %7 = alloca i8, i64 %6, align 16
  %8 = getelementptr inbounds %struct.vorbis_look_psy, ptr %0, i64 0, i32 6
  %9 = load ptr, ptr %8, align 8
  tail call fastcc void @bark_noise_hybridmp(i32 noundef %4, ptr noundef %9, ptr noundef %1, ptr noundef %2, float noundef 1.400000e+02, i32 noundef -1) #56
  %10 = icmp sgt i32 %4, 0
  br i1 %10, label %11, label %23

11:                                               ; preds = %3
  %12 = zext i32 %4 to i64
  br label %13

13:                                               ; preds = %13, %11
  %14 = phi i64 [ 0, %11 ], [ %21, %13 ]
  %15 = getelementptr inbounds float, ptr %1, i64 %14
  %16 = load float, ptr %15, align 4
  %17 = getelementptr inbounds float, ptr %2, i64 %14
  %18 = load float, ptr %17, align 4
  %19 = fsub float %16, %18
  %20 = getelementptr inbounds float, ptr %7, i64 %14
  store float %19, ptr %20, align 4
  %21 = add nuw nsw i64 %14, 1
  %22 = icmp eq i64 %21, %12
  br i1 %22, label %23, label %13, !llvm.loop !261

23:                                               ; preds = %13, %3
  %24 = load ptr, ptr %8, align 8
  %25 = getelementptr inbounds %struct.vorbis_look_psy, ptr %0, i64 0, i32 1
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr inbounds %struct.vorbis_info_psy, ptr %26, i64 0, i32 14
  %28 = load i32, ptr %27, align 8
  call fastcc void @bark_noise_hybridmp(i32 noundef %4, ptr noundef %24, ptr noundef nonnull %7, ptr noundef %2, float noundef 0.000000e+00, i32 noundef %28) #56
  br i1 %10, label %29, label %61

29:                                               ; preds = %23
  %30 = zext i32 %4 to i64
  br label %34

31:                                               ; preds = %34
  br i1 %10, label %32, label %61

32:                                               ; preds = %31
  %33 = zext i32 %4 to i64
  br label %43

34:                                               ; preds = %34, %29
  %35 = phi i64 [ 0, %29 ], [ %41, %34 ]
  %36 = getelementptr inbounds float, ptr %1, i64 %35
  %37 = load float, ptr %36, align 4
  %38 = getelementptr inbounds float, ptr %7, i64 %35
  %39 = load float, ptr %38, align 4
  %40 = fsub float %37, %39
  store float %40, ptr %38, align 4
  %41 = add nuw nsw i64 %35, 1
  %42 = icmp eq i64 %41, %30
  br i1 %42, label %31, label %34, !llvm.loop !262

43:                                               ; preds = %43, %32
  %44 = phi i64 [ 0, %32 ], [ %59, %43 ]
  %45 = getelementptr inbounds float, ptr %2, i64 %44
  %46 = load float, ptr %45, align 4
  %47 = fpext float %46 to double
  %48 = fadd double %47, 5.000000e-01
  %49 = fptosi double %48 to i32
  %50 = tail call i32 @llvm.smin.i32(i32 %49, i32 39)
  %51 = tail call i32 @llvm.smax.i32(i32 %50, i32 0)
  %52 = getelementptr inbounds float, ptr %7, i64 %44
  %53 = load float, ptr %52, align 4
  %54 = load ptr, ptr %25, align 8
  %55 = zext i32 %51 to i64
  %56 = getelementptr inbounds %struct.vorbis_info_psy, ptr %54, i64 0, i32 16, i64 %55
  %57 = load float, ptr %56, align 4
  %58 = fadd float %53, %57
  store float %58, ptr %45, align 4
  %59 = add nuw nsw i64 %44, 1
  %60 = icmp eq i64 %59, %33
  br i1 %60, label %61, label %43, !llvm.loop !263

61:                                               ; preds = %43, %31, %23
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal void @_vp_tonemask(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef %2, float noundef %3, float noundef %4) #30 {
  %6 = load i32, ptr %0, align 8
  %7 = getelementptr inbounds %struct.vorbis_look_psy, ptr %0, i64 0, i32 10
  %8 = load i32, ptr %7, align 4
  %9 = sext i32 %8 to i64
  %10 = shl nsw i64 %9, 2
  %11 = alloca i8, i64 %10, align 16
  %12 = getelementptr inbounds %struct.vorbis_look_psy, ptr %0, i64 0, i32 1
  %13 = load ptr, ptr %12, align 8
  %14 = getelementptr inbounds %struct.vorbis_info_psy, ptr %13, i64 0, i32 1
  %15 = load float, ptr %14, align 4
  %16 = fadd float %15, %4
  %17 = icmp sgt i32 %8, 0
  br i1 %17, label %18, label %51

18:                                               ; preds = %5
  %19 = zext i32 %8 to i64
  %20 = add nuw nsw i64 %19, 3
  %21 = and i64 %20, 8589934588
  %22 = add nsw i64 %19, -1
  %23 = insertelement <4 x i64> poison, i64 %22, i64 0
  %24 = shufflevector <4 x i64> %23, <4 x i64> poison, <4 x i32> zeroinitializer
  br label %25

25:                                               ; preds = %47, %18
  %26 = phi i64 [ 0, %18 ], [ %48, %47 ]
  %27 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %18 ], [ %49, %47 ]
  %28 = icmp ule <4 x i64> %27, %24
  %29 = extractelement <4 x i1> %28, i64 0
  br i1 %29, label %30, label %32

30:                                               ; preds = %25
  %31 = getelementptr inbounds float, ptr %11, i64 %26
  store float -9.999000e+03, ptr %31, align 16
  br label %32

32:                                               ; preds = %30, %25
  %33 = extractelement <4 x i1> %28, i64 1
  br i1 %33, label %34, label %37

34:                                               ; preds = %32
  %35 = or i64 %26, 1
  %36 = getelementptr inbounds float, ptr %11, i64 %35
  store float -9.999000e+03, ptr %36, align 4
  br label %37

37:                                               ; preds = %34, %32
  %38 = extractelement <4 x i1> %28, i64 2
  br i1 %38, label %39, label %42

39:                                               ; preds = %37
  %40 = or i64 %26, 2
  %41 = getelementptr inbounds float, ptr %11, i64 %40
  store float -9.999000e+03, ptr %41, align 8
  br label %42

42:                                               ; preds = %39, %37
  %43 = extractelement <4 x i1> %28, i64 3
  br i1 %43, label %44, label %47

44:                                               ; preds = %42
  %45 = or i64 %26, 3
  %46 = getelementptr inbounds float, ptr %11, i64 %45
  store float -9.999000e+03, ptr %46, align 4
  br label %47

47:                                               ; preds = %44, %42
  %48 = add i64 %26, 4
  %49 = add <4 x i64> %27, <i64 4, i64 4, i64 4, i64 4>
  %50 = icmp eq i64 %48, %21
  br i1 %50, label %51, label %25, !llvm.loop !264

51:                                               ; preds = %47, %5
  %52 = getelementptr inbounds %struct.vorbis_info_psy, ptr %13, i64 0, i32 2
  %53 = load float, ptr %52, align 8
  %54 = fcmp olt float %16, %53
  %55 = select i1 %54, float %53, float %16
  %56 = icmp sgt i32 %6, 0
  br i1 %56, label %59, label %57

57:                                               ; preds = %51
  %58 = sext i32 %6 to i64
  br label %185

59:                                               ; preds = %51
  %60 = getelementptr inbounds %struct.vorbis_look_psy, ptr %0, i64 0, i32 4
  %61 = zext i32 %6 to i64
  br label %62

62:                                               ; preds = %62, %59
  %63 = phi i64 [ 0, %59 ], [ %69, %62 ]
  %64 = load ptr, ptr %60, align 8
  %65 = getelementptr inbounds float, ptr %64, i64 %63
  %66 = load float, ptr %65, align 4
  %67 = fadd float %55, %66
  %68 = getelementptr inbounds float, ptr %2, i64 %63
  store float %67, ptr %68, align 4
  %69 = add nuw nsw i64 %63, 1
  %70 = icmp eq i64 %69, %61
  br i1 %70, label %71, label %62, !llvm.loop !265

71:                                               ; preds = %62
  %72 = load ptr, ptr %12, align 8
  %73 = load i32, ptr %0, align 8
  %74 = getelementptr inbounds %struct.vorbis_look_psy, ptr %0, i64 0, i32 2
  %75 = load ptr, ptr %74, align 8
  %76 = sext i32 %73 to i64
  %77 = getelementptr inbounds %struct.vorbis_info_psy, ptr %72, i64 0, i32 17
  %78 = load float, ptr %77, align 8
  %79 = fsub float %78, %3
  %80 = icmp sgt i32 %73, 0
  br i1 %80, label %81, label %185

81:                                               ; preds = %71
  %82 = getelementptr inbounds %struct.vorbis_look_psy, ptr %0, i64 0, i32 5
  %83 = getelementptr inbounds %struct.vorbis_look_psy, ptr %0, i64 0, i32 8
  %84 = getelementptr inbounds %struct.vorbis_look_psy, ptr %0, i64 0, i32 9
  %85 = getelementptr inbounds %struct.vorbis_look_psy, ptr %0, i64 0, i32 7
  %86 = add nsw i64 %76, -1
  %87 = load ptr, ptr %82, align 8
  br label %88

88:                                               ; preds = %183, %81
  %89 = phi i64 [ 0, %81 ], [ %116, %183 ]
  %90 = getelementptr inbounds float, ptr %1, i64 %89
  %91 = load float, ptr %90, align 4
  %92 = getelementptr inbounds i64, ptr %87, i64 %89
  %93 = load i64, ptr %92, align 8
  %94 = add nsw i64 %89, 1
  %95 = icmp slt i64 %94, %76
  br i1 %95, label %96, label %113

96:                                               ; preds = %88
  %97 = getelementptr inbounds i64, ptr %87, i64 %94
  %98 = load i64, ptr %97, align 8
  %99 = icmp eq i64 %98, %93
  br i1 %99, label %104, label %113

100:                                              ; preds = %104
  %101 = getelementptr inbounds i64, ptr %87, i64 %111
  %102 = load i64, ptr %101, align 8
  %103 = icmp eq i64 %102, %93
  br i1 %103, label %104, label %113, !llvm.loop !266

104:                                              ; preds = %100, %96
  %105 = phi float [ %110, %100 ], [ %91, %96 ]
  %106 = phi i64 [ %111, %100 ], [ %94, %96 ]
  %107 = getelementptr inbounds float, ptr %1, i64 %106
  %108 = load float, ptr %107, align 4
  %109 = fcmp ogt float %108, %105
  %110 = select i1 %109, float %108, float %105
  %111 = add i64 %106, 1
  %112 = icmp eq i64 %111, %76
  br i1 %112, label %113, label %100, !llvm.loop !266

113:                                              ; preds = %104, %100, %96, %88
  %114 = phi i64 [ %89, %88 ], [ %89, %96 ], [ %106, %100 ], [ %86, %104 ]
  %115 = phi float [ %91, %88 ], [ %91, %96 ], [ %110, %104 ], [ %110, %100 ]
  %116 = phi i64 [ %94, %88 ], [ %94, %96 ], [ %111, %100 ], [ %76, %104 ]
  %117 = fadd float %115, 6.000000e+00
  %118 = getelementptr inbounds float, ptr %2, i64 %114
  %119 = load float, ptr %118, align 4
  %120 = fcmp ogt float %117, %119
  br i1 %120, label %121, label %183

121:                                              ; preds = %113
  %122 = load i64, ptr %83, align 8
  %123 = ashr i64 %93, %122
  %124 = tail call i64 @llvm.smin.i64(i64 %123, i64 16)
  %125 = tail call i64 @llvm.smax.i64(i64 %124, i64 0)
  %126 = getelementptr inbounds ptr, ptr %75, i64 %125
  %127 = load ptr, ptr %126, align 8
  %128 = load i32, ptr %7, align 4
  %129 = load i32, ptr %84, align 8
  %130 = fadd float %79, %115
  %131 = fpext float %130 to double
  %132 = fadd double %131, -3.000000e+01
  %133 = fmul double %132, 0x3FB99999A0000000
  %134 = fptosi double %133 to i32
  %135 = tail call i32 @llvm.smax.i32(i32 %134, i32 0)
  %136 = tail call i32 @llvm.umin.i32(i32 %135, i32 7)
  %137 = zext i32 %136 to i64
  %138 = getelementptr inbounds ptr, ptr %127, i64 %137
  %139 = load ptr, ptr %138, align 8
  %140 = getelementptr inbounds float, ptr %139, i64 2
  %141 = load <2 x float>, ptr %139, align 4
  %142 = fptosi <2 x float> %141 to <2 x i32>
  %143 = extractelement <2 x i32> %142, i64 0
  %144 = extractelement <2 x i32> %142, i64 1
  %145 = icmp slt i32 %143, %144
  br i1 %145, label %146, label %183

146:                                              ; preds = %121
  %147 = getelementptr inbounds i64, ptr %87, i64 %114
  %148 = load i64, ptr %147, align 8
  %149 = load i64, ptr %85, align 8
  %150 = sub nsw i64 %148, %149
  %151 = trunc i64 %150 to i32
  %152 = extractelement <2 x float> %141, i64 0
  %153 = fadd float %152, -1.600000e+01
  %154 = sitofp i32 %129 to float
  %155 = fmul float %153, %154
  %156 = sitofp i32 %151 to float
  %157 = fadd float %155, %156
  %158 = ashr i32 %129, 1
  %159 = sitofp i32 %158 to float
  %160 = fsub float %157, %159
  %161 = fptosi float %160 to i32
  %162 = sext i32 %143 to i64
  br label %163

163:                                              ; preds = %176, %146
  %164 = phi i64 [ %162, %146 ], [ %179, %176 ]
  %165 = phi i32 [ %161, %146 ], [ %177, %176 ]
  %166 = icmp sgt i32 %165, 0
  br i1 %166, label %167, label %176

167:                                              ; preds = %163
  %168 = getelementptr inbounds float, ptr %140, i64 %164
  %169 = load float, ptr %168, align 4
  %170 = fadd float %115, %169
  %171 = zext i32 %165 to i64
  %172 = getelementptr inbounds float, ptr %11, i64 %171
  %173 = load float, ptr %172, align 4
  %174 = fcmp olt float %173, %170
  br i1 %174, label %175, label %176

175:                                              ; preds = %167
  store float %170, ptr %172, align 4
  br label %176

176:                                              ; preds = %175, %167, %163
  %177 = add nsw i32 %165, %129
  %178 = icmp sge i32 %177, %128
  %179 = add nsw i64 %164, 1
  %180 = trunc i64 %179 to i32
  %181 = icmp eq i32 %144, %180
  %182 = select i1 %178, i1 true, i1 %181
  br i1 %182, label %183, label %163, !llvm.loop !267

183:                                              ; preds = %176, %121, %113
  %184 = icmp slt i64 %116, %76
  br i1 %184, label %88, label %185, !llvm.loop !268

185:                                              ; preds = %183, %71, %57
  %186 = phi i64 [ %58, %57 ], [ %76, %71 ], [ %76, %183 ]
  %187 = phi i32 [ %6, %57 ], [ %73, %71 ], [ %73, %183 ]
  %188 = load i32, ptr %7, align 4
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds %struct.vorbis_look_psy, ptr %0, i64 0, i32 9
  %191 = load i32, ptr %190, align 8
  call fastcc void @seed_chase(ptr noundef nonnull %11, i32 noundef %191, i64 noundef %189) #56
  %192 = getelementptr inbounds %struct.vorbis_look_psy, ptr %0, i64 0, i32 5
  %193 = getelementptr inbounds %struct.vorbis_look_psy, ptr %0, i64 0, i32 7
  %194 = icmp sgt i32 %187, 1
  br i1 %194, label %195, label %281

195:                                              ; preds = %185
  %196 = load ptr, ptr %192, align 8
  %197 = load i64, ptr %196, align 8
  %198 = ashr i32 %191, 1
  %199 = sub nsw i32 0, %198
  %200 = sext i32 %199 to i64
  %201 = add i64 %197, %200
  %202 = load i64, ptr %193, align 8
  %203 = sub i64 %201, %202
  br label %204

204:                                              ; preds = %273, %195
  %205 = phi i32 [ %187, %195 ], [ %275, %273 ]
  %206 = phi i64 [ 1, %195 ], [ %277, %273 ]
  %207 = phi i64 [ 0, %195 ], [ %276, %273 ]
  %208 = phi i64 [ %203, %195 ], [ %244, %273 ]
  %209 = getelementptr inbounds float, ptr %11, i64 %208
  %210 = load float, ptr %209, align 4
  %211 = load ptr, ptr %192, align 8
  %212 = getelementptr inbounds i64, ptr %211, i64 %207
  %213 = load i64, ptr %212, align 8
  %214 = getelementptr inbounds i64, ptr %211, i64 %206
  %215 = load i64, ptr %214, align 8
  %216 = add nsw i64 %215, %213
  %217 = ashr i64 %216, 1
  %218 = load i64, ptr %193, align 8
  %219 = sub nsw i64 %217, %218
  %220 = load ptr, ptr %12, align 8
  %221 = getelementptr inbounds %struct.vorbis_info_psy, ptr %220, i64 0, i32 6
  %222 = load float, ptr %221, align 8
  %223 = fcmp ogt float %210, %222
  %224 = select i1 %223, float %222, float %210
  %225 = icmp slt i64 %208, %219
  br i1 %225, label %226, label %243

226:                                              ; preds = %240, %204
  %227 = phi i64 [ %229, %240 ], [ %208, %204 ]
  %228 = phi float [ %241, %240 ], [ %224, %204 ]
  %229 = add nsw i64 %227, 1
  %230 = getelementptr inbounds float, ptr %11, i64 %229
  %231 = load float, ptr %230, align 4
  %232 = fcmp ogt float %231, -9.999000e+03
  br i1 %232, label %233, label %237

233:                                              ; preds = %226
  %234 = fcmp olt float %231, %228
  %235 = fcmp oeq float %228, -9.999000e+03
  %236 = or i1 %235, %234
  br i1 %236, label %239, label %240

237:                                              ; preds = %226
  %238 = fcmp oeq float %228, -9.999000e+03
  br i1 %238, label %239, label %240

239:                                              ; preds = %237, %233
  br label %240

240:                                              ; preds = %239, %237, %233
  %241 = phi float [ %231, %239 ], [ %228, %233 ], [ %228, %237 ]
  %242 = icmp slt i64 %229, %219
  br i1 %242, label %226, label %243, !llvm.loop !269

243:                                              ; preds = %240, %204
  %244 = phi i64 [ %208, %204 ], [ %219, %240 ]
  %245 = phi float [ %224, %204 ], [ %241, %240 ]
  %246 = add nsw i64 %244, %218
  %247 = sext i32 %205 to i64
  %248 = icmp slt i64 %207, %247
  br i1 %248, label %249, label %273

249:                                              ; preds = %263, %243
  %250 = phi i32 [ %264, %263 ], [ %205, %243 ]
  %251 = phi i32 [ %265, %263 ], [ %205, %243 ]
  %252 = phi i64 [ %266, %263 ], [ %207, %243 ]
  %253 = load ptr, ptr %192, align 8
  %254 = getelementptr inbounds i64, ptr %253, i64 %252
  %255 = load i64, ptr %254, align 8
  %256 = icmp sgt i64 %255, %246
  br i1 %256, label %269, label %257

257:                                              ; preds = %249
  %258 = getelementptr inbounds float, ptr %2, i64 %252
  %259 = load float, ptr %258, align 4
  %260 = fcmp olt float %259, %245
  br i1 %260, label %261, label %263

261:                                              ; preds = %257
  store float %245, ptr %258, align 4
  %262 = load i32, ptr %0, align 8
  br label %263

263:                                              ; preds = %261, %257
  %264 = phi i32 [ %250, %257 ], [ %262, %261 ]
  %265 = phi i32 [ %251, %257 ], [ %262, %261 ]
  %266 = add nsw i64 %252, 1
  %267 = sext i32 %265 to i64
  %268 = icmp slt i64 %266, %267
  br i1 %268, label %249, label %269, !llvm.loop !270

269:                                              ; preds = %263, %249
  %270 = phi i32 [ %250, %249 ], [ %264, %263 ]
  %271 = phi i64 [ %252, %249 ], [ %266, %263 ]
  %272 = sext i32 %270 to i64
  br label %273

273:                                              ; preds = %269, %243
  %274 = phi i64 [ %272, %269 ], [ %247, %243 ]
  %275 = phi i32 [ %270, %269 ], [ %205, %243 ]
  %276 = phi i64 [ %271, %269 ], [ %207, %243 ]
  %277 = add nsw i64 %276, 1
  %278 = icmp slt i64 %277, %274
  br i1 %278, label %204, label %279, !llvm.loop !271

279:                                              ; preds = %273
  %.lcssa2 = phi i64 [ %274, %273 ]
  %.lcssa1 = phi i32 [ %275, %273 ]
  %.lcssa = phi i64 [ %276, %273 ]
  %280 = load i32, ptr %7, align 4
  br label %281

281:                                              ; preds = %279, %185
  %282 = phi i32 [ %188, %185 ], [ %280, %279 ]
  %283 = phi i64 [ %186, %185 ], [ %.lcssa2, %279 ]
  %284 = phi i32 [ %187, %185 ], [ %.lcssa1, %279 ]
  %285 = phi i64 [ 0, %185 ], [ %.lcssa, %279 ]
  %286 = add nsw i32 %282, -1
  %287 = sext i32 %286 to i64
  %288 = getelementptr inbounds float, ptr %11, i64 %287
  %289 = load float, ptr %288, align 4
  %290 = icmp slt i64 %285, %283
  br i1 %290, label %291, label %304

291:                                              ; preds = %299, %281
  %292 = phi i32 [ %300, %299 ], [ %284, %281 ]
  %293 = phi i64 [ %301, %299 ], [ %285, %281 ]
  %294 = getelementptr inbounds float, ptr %2, i64 %293
  %295 = load float, ptr %294, align 4
  %296 = fcmp olt float %295, %289
  br i1 %296, label %297, label %299

297:                                              ; preds = %291
  store float %289, ptr %294, align 4
  %298 = load i32, ptr %0, align 8
  br label %299

299:                                              ; preds = %297, %291
  %300 = phi i32 [ %292, %291 ], [ %298, %297 ]
  %301 = add nsw i64 %293, 1
  %302 = sext i32 %300 to i64
  %303 = icmp slt i64 %301, %302
  br i1 %303, label %291, label %304, !llvm.loop !272

304:                                              ; preds = %299, %281
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal void @_vp_offset_and_mix(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, i32 noundef %3, ptr nocapture noundef writeonly %4) #38 {
  %6 = load i32, ptr %0, align 8
  %7 = getelementptr inbounds %struct.vorbis_look_psy, ptr %0, i64 0, i32 1
  %8 = load ptr, ptr %7, align 8
  %9 = sext i32 %3 to i64
  %10 = getelementptr inbounds %struct.vorbis_info_psy, ptr %8, i64 0, i32 3, i64 %9
  %11 = load float, ptr %10, align 4
  %12 = icmp sgt i32 %6, 0
  br i1 %12, label %13, label %39

13:                                               ; preds = %5
  %14 = getelementptr inbounds %struct.vorbis_look_psy, ptr %0, i64 0, i32 3
  %15 = zext i32 %6 to i64
  br label %16

16:                                               ; preds = %16, %13
  %17 = phi i64 [ 0, %13 ], [ %37, %16 ]
  %18 = getelementptr inbounds float, ptr %1, i64 %17
  %19 = load float, ptr %18, align 4
  %20 = load ptr, ptr %14, align 8
  %21 = getelementptr inbounds ptr, ptr %20, i64 %9
  %22 = load ptr, ptr %21, align 8
  %23 = getelementptr inbounds float, ptr %22, i64 %17
  %24 = load float, ptr %23, align 4
  %25 = fadd float %19, %24
  %26 = load ptr, ptr %7, align 8
  %27 = getelementptr inbounds %struct.vorbis_info_psy, ptr %26, i64 0, i32 9
  %28 = load float, ptr %27, align 4
  %29 = fcmp ogt float %25, %28
  %30 = select i1 %29, float %28, float %25
  %31 = getelementptr inbounds float, ptr %2, i64 %17
  %32 = load float, ptr %31, align 4
  %33 = fadd float %11, %32
  %34 = fcmp olt float %30, %33
  %35 = select i1 %34, float %33, float %30
  %36 = getelementptr inbounds float, ptr %4, i64 %17
  store float %35, ptr %36, align 4
  %37 = add nuw nsw i64 %17, 1
  %38 = icmp eq i64 %37, %15
  br i1 %38, label %39, label %16, !llvm.loop !273

39:                                               ; preds = %16, %5
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @floor1_fit(ptr nocapture noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3) #0 {
  %5 = alloca [64 x %struct.lsfit_acc], align 16
  %6 = alloca [65 x i32], align 16
  %7 = alloca [65 x i32], align 16
  %8 = alloca [65 x i32], align 16
  %9 = alloca [65 x i32], align 16
  %10 = alloca [65 x i32], align 16
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = getelementptr inbounds %struct.vorbis_look_floor1, ptr %1, i64 0, i32 8
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr inbounds %struct.vorbis_look_floor1, ptr %1, i64 0, i32 6
  %20 = load i32, ptr %19, align 8
  %21 = getelementptr inbounds %struct.vorbis_look_floor1, ptr %1, i64 0, i32 5
  %22 = load i32, ptr %21, align 4
  %23 = sext i32 %22 to i64
  call void @llvm.lifetime.start.p0(i64 4096, ptr nonnull %5) #55
  call void @llvm.lifetime.start.p0(i64 260, ptr nonnull %6) #55
  call void @llvm.lifetime.start.p0(i64 260, ptr nonnull %7) #55
  call void @llvm.lifetime.start.p0(i64 260, ptr nonnull %8) #55
  call void @llvm.lifetime.start.p0(i64 260, ptr nonnull %9) #55
  call void @llvm.lifetime.start.p0(i64 260, ptr nonnull %10) #55
  %24 = icmp sgt i32 %22, 0
  br i1 %24, label %25, label %125

25:                                               ; preds = %4
  %26 = add nsw i64 %23, 3
  %27 = and i64 %26, -4
  %28 = add nsw i64 %23, -1
  %29 = insertelement <4 x i64> poison, i64 %28, i64 0
  %30 = shufflevector <4 x i64> %29, <4 x i64> poison, <4 x i32> zeroinitializer
  br label %31

31:                                               ; preds = %53, %25
  %32 = phi i64 [ 0, %25 ], [ %54, %53 ]
  %33 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %25 ], [ %55, %53 ]
  %34 = icmp ule <4 x i64> %33, %30
  %35 = extractelement <4 x i1> %34, i64 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %31
  %37 = getelementptr inbounds [65 x i32], ptr %6, i64 0, i64 %32
  store i32 -200, ptr %37, align 16
  br label %38

38:                                               ; preds = %36, %31
  %39 = extractelement <4 x i1> %34, i64 1
  br i1 %39, label %40, label %43

40:                                               ; preds = %38
  %41 = or i64 %32, 1
  %42 = getelementptr inbounds [65 x i32], ptr %6, i64 0, i64 %41
  store i32 -200, ptr %42, align 4
  br label %43

43:                                               ; preds = %40, %38
  %44 = extractelement <4 x i1> %34, i64 2
  br i1 %44, label %45, label %48

45:                                               ; preds = %43
  %46 = or i64 %32, 2
  %47 = getelementptr inbounds [65 x i32], ptr %6, i64 0, i64 %46
  store i32 -200, ptr %47, align 8
  br label %48

48:                                               ; preds = %45, %43
  %49 = extractelement <4 x i1> %34, i64 3
  br i1 %49, label %50, label %53

50:                                               ; preds = %48
  %51 = or i64 %32, 3
  %52 = getelementptr inbounds [65 x i32], ptr %6, i64 0, i64 %51
  store i32 -200, ptr %52, align 4
  br label %53

53:                                               ; preds = %50, %48
  %54 = add i64 %32, 4
  %55 = add <4 x i64> %33, <i64 4, i64 4, i64 4, i64 4>
  %56 = icmp eq i64 %54, %27
  br i1 %56, label %57, label %31, !llvm.loop !274

57:                                               ; preds = %53
  br i1 %24, label %58, label %125

58:                                               ; preds = %57
  %59 = add nsw i64 %23, 3
  %60 = and i64 %59, -4
  %61 = add nsw i64 %23, -1
  %62 = insertelement <4 x i64> poison, i64 %61, i64 0
  %63 = shufflevector <4 x i64> %62, <4 x i64> poison, <4 x i32> zeroinitializer
  br label %64

64:                                               ; preds = %86, %58
  %65 = phi i64 [ 0, %58 ], [ %87, %86 ]
  %66 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %58 ], [ %88, %86 ]
  %67 = icmp ule <4 x i64> %66, %63
  %68 = extractelement <4 x i1> %67, i64 0
  br i1 %68, label %69, label %71

69:                                               ; preds = %64
  %70 = getelementptr inbounds [65 x i32], ptr %7, i64 0, i64 %65
  store i32 -200, ptr %70, align 16
  br label %71

71:                                               ; preds = %69, %64
  %72 = extractelement <4 x i1> %67, i64 1
  br i1 %72, label %73, label %76

73:                                               ; preds = %71
  %74 = or i64 %65, 1
  %75 = getelementptr inbounds [65 x i32], ptr %7, i64 0, i64 %74
  store i32 -200, ptr %75, align 4
  br label %76

76:                                               ; preds = %73, %71
  %77 = extractelement <4 x i1> %67, i64 2
  br i1 %77, label %78, label %81

78:                                               ; preds = %76
  %79 = or i64 %65, 2
  %80 = getelementptr inbounds [65 x i32], ptr %7, i64 0, i64 %79
  store i32 -200, ptr %80, align 8
  br label %81

81:                                               ; preds = %78, %76
  %82 = extractelement <4 x i1> %67, i64 3
  br i1 %82, label %83, label %86

83:                                               ; preds = %81
  %84 = or i64 %65, 3
  %85 = getelementptr inbounds [65 x i32], ptr %7, i64 0, i64 %84
  store i32 -200, ptr %85, align 4
  br label %86

86:                                               ; preds = %83, %81
  %87 = add i64 %65, 4
  %88 = add <4 x i64> %66, <i64 4, i64 4, i64 4, i64 4>
  %89 = icmp eq i64 %87, %60
  br i1 %89, label %90, label %64, !llvm.loop !275

90:                                               ; preds = %86
  br i1 %24, label %91, label %125

91:                                               ; preds = %90
  %92 = shl nuw nsw i64 %23, 2
  call void @llvm.memset.p0.i64(ptr nonnull align 16 %8, i8 0, i64 %92, i1 false)
  %93 = add nsw i64 %23, 3
  %94 = and i64 %93, -4
  %95 = add nsw i64 %23, -1
  %96 = insertelement <4 x i64> poison, i64 %95, i64 0
  %97 = shufflevector <4 x i64> %96, <4 x i64> poison, <4 x i32> zeroinitializer
  br label %98

98:                                               ; preds = %120, %91
  %99 = phi i64 [ 0, %91 ], [ %121, %120 ]
  %100 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %91 ], [ %122, %120 ]
  %101 = icmp ule <4 x i64> %100, %97
  %102 = extractelement <4 x i1> %101, i64 0
  br i1 %102, label %103, label %105

103:                                              ; preds = %98
  %104 = getelementptr inbounds [65 x i32], ptr %9, i64 0, i64 %99
  store i32 1, ptr %104, align 16
  br label %105

105:                                              ; preds = %103, %98
  %106 = extractelement <4 x i1> %101, i64 1
  br i1 %106, label %107, label %110

107:                                              ; preds = %105
  %108 = or i64 %99, 1
  %109 = getelementptr inbounds [65 x i32], ptr %9, i64 0, i64 %108
  store i32 1, ptr %109, align 4
  br label %110

110:                                              ; preds = %107, %105
  %111 = extractelement <4 x i1> %101, i64 2
  br i1 %111, label %112, label %115

112:                                              ; preds = %110
  %113 = or i64 %99, 2
  %114 = getelementptr inbounds [65 x i32], ptr %9, i64 0, i64 %113
  store i32 1, ptr %114, align 8
  br label %115

115:                                              ; preds = %112, %110
  %116 = extractelement <4 x i1> %101, i64 3
  br i1 %116, label %117, label %120

117:                                              ; preds = %115
  %118 = or i64 %99, 3
  %119 = getelementptr inbounds [65 x i32], ptr %9, i64 0, i64 %118
  store i32 1, ptr %119, align 4
  br label %120

120:                                              ; preds = %117, %115
  %121 = add i64 %99, 4
  %122 = add <4 x i64> %100, <i64 4, i64 4, i64 4, i64 4>
  %123 = icmp eq i64 %121, %94
  br i1 %123, label %124, label %98, !llvm.loop !276

124:                                              ; preds = %120
  br i1 %24, label %127, label %125

125:                                              ; preds = %124, %90, %57, %4
  %126 = icmp eq i32 %22, 0
  br i1 %126, label %133, label %451

127:                                              ; preds = %124
  %128 = shl nuw nsw i64 %23, 2
  call void @llvm.memset.p0.i64(ptr nonnull align 16 %10, i8 -1, i64 %128, i1 false)
  %129 = icmp eq i32 %22, 1
  br i1 %129, label %451, label %130

130:                                              ; preds = %127
  %131 = load i32, ptr %1, align 4
  %132 = add nsw i64 %23, -2
  br label %136

133:                                              ; preds = %125
  %134 = call fastcc i32 @accumulate_fit(ptr noundef %3, ptr noundef %2, i32 noundef 0, i32 noundef %20, ptr noundef nonnull %5, i32 noundef %20, ptr noundef %18) #56
  %135 = sext i32 %134 to i64
  br label %148

136:                                              ; preds = %136, %130
  %137 = phi i32 [ %142, %136 ], [ %131, %130 ]
  %138 = phi i64 [ %140, %136 ], [ 0, %130 ]
  %139 = phi i64 [ %146, %136 ], [ 0, %130 ]
  %140 = add nuw nsw i64 %138, 1
  %141 = getelementptr inbounds [65 x i32], ptr %1, i64 0, i64 %140
  %142 = load i32, ptr %141, align 4
  %143 = getelementptr inbounds %struct.lsfit_acc, ptr %5, i64 %138
  %144 = call fastcc i32 @accumulate_fit(ptr noundef %3, ptr noundef %2, i32 noundef %137, i32 noundef %142, ptr noundef nonnull %143, i32 noundef %20, ptr noundef %18) #56
  %145 = sext i32 %144 to i64
  %146 = add nsw i64 %139, %145
  %147 = icmp eq i64 %138, %132
  br i1 %147, label %148, label %136, !llvm.loop !277

148:                                              ; preds = %136, %133
  %149 = phi i64 [ %135, %133 ], [ %146, %136 ]
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %451, label %151

151:                                              ; preds = %148
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %11) #55
  store i32 -200, ptr %11, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %12) #55
  store i32 -200, ptr %12, align 4
  %152 = add i32 %22, -1
  call fastcc void @fit_line(ptr noundef nonnull %5, i32 noundef %152, ptr noundef nonnull %11, ptr noundef nonnull %12) #56
  %153 = load i32, ptr %11, align 4
  store i32 %153, ptr %6, align 16
  store i32 %153, ptr %7, align 16
  %154 = load i32, ptr %12, align 4
  %155 = getelementptr inbounds [65 x i32], ptr %7, i64 0, i64 1
  store i32 %154, ptr %155, align 4
  %156 = getelementptr inbounds [65 x i32], ptr %6, i64 0, i64 1
  store i32 %154, ptr %156, align 4
  %157 = icmp sgt i32 %22, 2
  br i1 %157, label %158, label %373

158:                                              ; preds = %151
  %159 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %18, i64 0, i32 12
  %160 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %18, i64 0, i32 8
  %161 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %18, i64 0, i32 9
  %162 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %18, i64 0, i32 10
  br label %163

163:                                              ; preds = %367, %158
  %164 = phi i64 [ 2, %158 ], [ %368, %367 ]
  %165 = getelementptr inbounds %struct.vorbis_look_floor1, ptr %1, i64 0, i32 2, i64 %164
  %166 = load i32, ptr %165, align 4
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds [65 x i32], ptr %8, i64 0, i64 %167
  %169 = load i32, ptr %168, align 4
  %170 = getelementptr inbounds [65 x i32], ptr %9, i64 0, i64 %167
  %171 = load i32, ptr %170, align 4
  %172 = sext i32 %169 to i64
  %173 = getelementptr inbounds [65 x i32], ptr %10, i64 0, i64 %172
  %174 = load i32, ptr %173, align 4
  %175 = icmp eq i32 %174, %171
  br i1 %175, label %367, label %176

176:                                              ; preds = %163
  %177 = getelementptr inbounds %struct.vorbis_look_floor1, ptr %1, i64 0, i32 2, i64 %172
  %178 = load i32, ptr %177, align 4
  %179 = sext i32 %171 to i64
  %180 = getelementptr inbounds %struct.vorbis_look_floor1, ptr %1, i64 0, i32 2, i64 %179
  %181 = load i32, ptr %180, align 4
  store i32 %171, ptr %173, align 4
  %182 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %18, i64 0, i32 7, i64 %172
  %183 = load i32, ptr %182, align 4
  %184 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %18, i64 0, i32 7, i64 %179
  %185 = load i32, ptr %184, align 4
  %186 = getelementptr inbounds i32, ptr %6, i64 %172
  %187 = load i32, ptr %186, align 4
  %188 = icmp slt i32 %187, 0
  %189 = getelementptr inbounds i32, ptr %7, i64 %172
  %190 = load i32, ptr %189, align 4
  br i1 %188, label %196, label %191

191:                                              ; preds = %176
  %192 = icmp slt i32 %190, 0
  br i1 %192, label %196, label %193

193:                                              ; preds = %191
  %194 = add nuw nsw i32 %190, %187
  %195 = lshr i32 %194, 1
  br label %196

196:                                              ; preds = %193, %191, %176
  %197 = phi i32 [ %195, %193 ], [ %187, %191 ], [ %190, %176 ]
  %198 = getelementptr inbounds i32, ptr %6, i64 %179
  %199 = load i32, ptr %198, align 4
  %200 = icmp slt i32 %199, 0
  %201 = getelementptr inbounds i32, ptr %7, i64 %179
  %202 = load i32, ptr %201, align 4
  br i1 %200, label %208, label %203

203:                                              ; preds = %196
  %204 = icmp slt i32 %202, 0
  br i1 %204, label %208, label %205

205:                                              ; preds = %203
  %206 = add nuw nsw i32 %202, %199
  %207 = lshr i32 %206, 1
  br label %208

208:                                              ; preds = %205, %203, %196
  %209 = phi i32 [ %207, %205 ], [ %199, %203 ], [ %202, %196 ]
  %210 = icmp eq i32 %197, -1
  %211 = icmp eq i32 %209, -1
  %212 = select i1 %210, i1 true, i1 %211
  br i1 %212, label %213, label %214

213:                                              ; preds = %208
  tail call void @exit(i32 noundef 1) #62
  unreachable

214:                                              ; preds = %208
  %215 = sub nsw i32 %209, %197
  %216 = sub nsw i32 %185, %183
  %217 = tail call i32 @llvm.abs.i32(i32 %215, i1 true)
  %218 = sdiv i32 %215, %216
  %219 = icmp sgt i32 %215, -1
  %220 = select i1 %219, i32 1, i32 -1
  %221 = sext i32 %183 to i64
  %222 = getelementptr inbounds float, ptr %3, i64 %221
  %223 = load float, ptr %222, align 4
  %224 = fmul float %223, 0x401D41D420000000
  %225 = fadd float %224, 1.023500e+03
  %226 = fptosi float %225 to i32
  %227 = tail call i32 @llvm.smax.i32(i32 %226, i32 0)
  %228 = tail call i32 @llvm.smin.i32(i32 %227, i32 1023)
  %229 = mul nsw i32 %218, %216
  %230 = tail call i32 @llvm.abs.i32(i32 %229, i1 true)
  %231 = sub nsw i32 %217, %230
  %232 = sub nsw i32 %197, %228
  %233 = mul nsw i32 %232, %232
  %234 = getelementptr inbounds float, ptr %2, i64 %221
  %235 = load float, ptr %234, align 4
  %236 = load float, ptr %159, align 4
  %237 = fadd float %235, %236
  %238 = fcmp ult float %237, %223
  br i1 %238, label %249, label %239

239:                                              ; preds = %214
  %240 = sitofp i32 %197 to float
  %241 = load float, ptr %160, align 4
  %242 = fadd float %241, %240
  %243 = sitofp i32 %228 to float
  %244 = fcmp olt float %242, %243
  br i1 %244, label %314, label %245

245:                                              ; preds = %239
  %246 = load float, ptr %161, align 4
  %247 = fsub float %240, %246
  %248 = fcmp ogt float %247, %243
  br i1 %248, label %314, label %249

249:                                              ; preds = %245, %214
  %250 = add nsw i32 %183, 1
  %251 = icmp slt i32 %250, %185
  br i1 %251, label %252, label %296

252:                                              ; preds = %249
  %253 = sext i32 %250 to i64
  br label %254

254:                                              ; preds = %292, %252
  %255 = phi i64 [ %253, %252 ], [ %293, %292 ]
  %256 = phi i32 [ %233, %252 ], [ %275, %292 ]
  %257 = phi i32 [ 0, %252 ], [ %263, %292 ]
  %258 = phi i32 [ %197, %252 ], [ %265, %292 ]
  %259 = add nsw i32 %257, %231
  %260 = icmp slt i32 %259, %216
  %261 = select i1 %260, i32 0, i32 %220
  %262 = select i1 %260, i32 0, i32 %216
  %263 = sub nsw i32 %259, %262
  %264 = add i32 %258, %218
  %265 = add i32 %264, %261
  %266 = getelementptr inbounds float, ptr %3, i64 %255
  %267 = load float, ptr %266, align 4
  %268 = fmul float %267, 0x401D41D420000000
  %269 = fadd float %268, 1.023500e+03
  %270 = fptosi float %269 to i32
  %271 = tail call i32 @llvm.smax.i32(i32 %270, i32 0)
  %272 = tail call i32 @llvm.smin.i32(i32 %271, i32 1023)
  %273 = sub nsw i32 %265, %272
  %274 = mul nsw i32 %273, %273
  %275 = add nuw nsw i32 %274, %256
  %276 = getelementptr inbounds float, ptr %2, i64 %255
  %277 = load float, ptr %276, align 4
  %278 = fadd float %236, %277
  %279 = fcmp oge float %278, %267
  %280 = icmp ne i32 %272, 0
  %281 = select i1 %279, i1 %280, i1 false
  br i1 %281, label %282, label %292

282:                                              ; preds = %254
  %283 = sitofp i32 %265 to float
  %284 = load float, ptr %160, align 4
  %285 = fadd float %284, %283
  %286 = sitofp i32 %272 to float
  %287 = fcmp olt float %285, %286
  br i1 %287, label %314, label %288

288:                                              ; preds = %282
  %289 = load float, ptr %161, align 4
  %290 = fsub float %283, %289
  %291 = fcmp ogt float %290, %286
  br i1 %291, label %314, label %292

292:                                              ; preds = %288, %254
  %293 = add nsw i64 %255, 1
  %294 = trunc i64 %293 to i32
  %295 = icmp eq i32 %185, %294
  br i1 %295, label %296, label %254, !llvm.loop !278

296:                                              ; preds = %292, %249
  %297 = phi i32 [ %233, %249 ], [ %275, %292 ]
  %298 = phi i32 [ 1, %249 ], [ %216, %292 ]
  %299 = load float, ptr %160, align 4
  %300 = fmul float %299, %299
  %301 = sitofp i32 %298 to float
  %302 = fdiv float %300, %301
  %303 = load float, ptr %162, align 4
  %304 = fcmp ogt float %302, %303
  br i1 %304, label %364, label %305

305:                                              ; preds = %296
  %306 = load float, ptr %161, align 4
  %307 = fmul float %306, %306
  %308 = fdiv float %307, %301
  %309 = fcmp ogt float %308, %303
  br i1 %309, label %364, label %310

310:                                              ; preds = %305
  %311 = udiv i32 %297, %298
  %312 = sitofp i32 %311 to float
  %313 = fcmp uge float %303, %312
  br i1 %313, label %364, label %314

314:                                              ; preds = %310, %288, %282, %245, %239
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %13) #55
  store i32 -200, ptr %13, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %14) #55
  store i32 -200, ptr %14, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %15) #55
  store i32 -200, ptr %15, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %16) #55
  store i32 -200, ptr %16, align 4
  %315 = sext i32 %178 to i64
  %316 = getelementptr inbounds %struct.lsfit_acc, ptr %5, i64 %315
  %317 = sub nsw i32 %166, %178
  call fastcc void @fit_line(ptr noundef nonnull %316, i32 noundef %317, ptr noundef nonnull %13, ptr noundef nonnull %14) #56
  %318 = getelementptr inbounds %struct.lsfit_acc, ptr %5, i64 %167
  %319 = sub nsw i32 %181, %166
  call fastcc void @fit_line(ptr noundef nonnull %318, i32 noundef %319, ptr noundef nonnull %15, ptr noundef nonnull %16) #56
  %320 = load i32, ptr %13, align 4
  store i32 %320, ptr %189, align 4
  %321 = icmp eq i32 %169, 0
  br i1 %321, label %322, label %323

322:                                              ; preds = %314
  store i32 %320, ptr %186, align 4
  br label %323

323:                                              ; preds = %322, %314
  %324 = load i32, ptr %14, align 4
  %325 = getelementptr inbounds [65 x i32], ptr %6, i64 0, i64 %164
  store i32 %324, ptr %325, align 4
  %326 = load i32, ptr %15, align 4
  %327 = getelementptr inbounds [65 x i32], ptr %7, i64 0, i64 %164
  store i32 %326, ptr %327, align 4
  %328 = load i32, ptr %16, align 4
  store i32 %328, ptr %198, align 4
  %329 = icmp eq i32 %171, 1
  br i1 %329, label %330, label %331

330:                                              ; preds = %323
  store i32 %328, ptr %201, align 4
  br label %331

331:                                              ; preds = %330, %323
  %332 = icmp sgt i32 %324, -1
  %333 = icmp sgt i32 %326, -1
  %334 = select i1 %332, i1 true, i1 %333
  br i1 %334, label %335, label %363

335:                                              ; preds = %331
  %336 = icmp sgt i32 %166, 0
  br i1 %336, label %337, label %349

337:                                              ; preds = %335
  %338 = add nsw i32 %166, -1
  %339 = zext i32 %338 to i64
  %340 = trunc i64 %164 to i32
  br label %341

341:                                              ; preds = %346, %337
  %342 = phi i64 [ %339, %337 ], [ %347, %346 ]
  %343 = getelementptr inbounds [65 x i32], ptr %9, i64 0, i64 %342
  %344 = load i32, ptr %343, align 4
  %345 = icmp eq i32 %344, %171
  br i1 %345, label %346, label %349

346:                                              ; preds = %341
  store i32 %340, ptr %343, align 4
  %347 = add nsw i64 %342, -1
  %348 = icmp sgt i64 %342, 0
  br i1 %348, label %341, label %349, !llvm.loop !279

349:                                              ; preds = %346, %341, %335
  %350 = add nsw i32 %166, 1
  %351 = icmp slt i32 %350, %22
  br i1 %351, label %352, label %363

352:                                              ; preds = %349
  %353 = sext i32 %350 to i64
  %354 = trunc i64 %164 to i32
  br label %355

355:                                              ; preds = %360, %352
  %356 = phi i64 [ %353, %352 ], [ %361, %360 ]
  %357 = getelementptr inbounds [65 x i32], ptr %8, i64 0, i64 %356
  %358 = load i32, ptr %357, align 4
  %359 = icmp eq i32 %358, %169
  br i1 %359, label %360, label %363

360:                                              ; preds = %355
  store i32 %354, ptr %357, align 4
  %361 = add nsw i64 %356, 1
  %362 = icmp eq i64 %361, %23
  br i1 %362, label %363, label %355, !llvm.loop !280

363:                                              ; preds = %360, %355, %349, %331
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %16) #55
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %15) #55
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %14) #55
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %13) #55
  br label %367

364:                                              ; preds = %310, %305, %296
  %365 = getelementptr inbounds [65 x i32], ptr %6, i64 0, i64 %164
  store i32 -200, ptr %365, align 4
  %366 = getelementptr inbounds [65 x i32], ptr %7, i64 0, i64 %164
  store i32 -200, ptr %366, align 4
  br label %367

367:                                              ; preds = %364, %363, %163
  %368 = add nuw nsw i64 %164, 1
  %369 = icmp eq i64 %368, %23
  br i1 %369, label %370, label %163, !llvm.loop !281

370:                                              ; preds = %367
  %371 = load i32, ptr %6, align 16
  %372 = load i32, ptr %7, align 16
  br label %373

373:                                              ; preds = %370, %151
  %374 = phi i32 [ %372, %370 ], [ %153, %151 ]
  %375 = phi i32 [ %371, %370 ], [ %153, %151 ]
  %376 = shl nsw i64 %23, 2
  %377 = tail call ptr @_vorbis_block_alloc(ptr noundef %0, i64 noundef %376) #56
  %378 = icmp slt i32 %375, 0
  br i1 %378, label %384, label %379

379:                                              ; preds = %373
  %380 = icmp slt i32 %374, 0
  br i1 %380, label %384, label %381

381:                                              ; preds = %379
  %382 = add nuw nsw i32 %374, %375
  %383 = lshr i32 %382, 1
  br label %384

384:                                              ; preds = %381, %379, %373
  %385 = phi i32 [ %383, %381 ], [ %375, %379 ], [ %374, %373 ]
  store i32 %385, ptr %377, align 4
  %386 = load i32, ptr %156, align 4
  %387 = icmp slt i32 %386, 0
  %388 = load i32, ptr %155, align 4
  br i1 %387, label %394, label %389

389:                                              ; preds = %384
  %390 = icmp slt i32 %388, 0
  br i1 %390, label %394, label %391

391:                                              ; preds = %389
  %392 = add nuw nsw i32 %388, %386
  %393 = lshr i32 %392, 1
  br label %394

394:                                              ; preds = %391, %389, %384
  %395 = phi i32 [ %393, %391 ], [ %386, %389 ], [ %388, %384 ]
  %396 = getelementptr inbounds i32, ptr %377, i64 1
  store i32 %395, ptr %396, align 4
  br i1 %157, label %397, label %450

397:                                              ; preds = %440, %394
  %398 = phi i64 [ %448, %440 ], [ 2, %394 ]
  %399 = add nsw i64 %398, -2
  %400 = getelementptr inbounds %struct.vorbis_look_floor1, ptr %1, i64 0, i32 4, i64 %399
  %401 = load i32, ptr %400, align 4
  %402 = getelementptr inbounds %struct.vorbis_look_floor1, ptr %1, i64 0, i32 3, i64 %399
  %403 = load i32, ptr %402, align 4
  %404 = sext i32 %401 to i64
  %405 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %18, i64 0, i32 7, i64 %404
  %406 = load i32, ptr %405, align 4
  %407 = sext i32 %403 to i64
  %408 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %18, i64 0, i32 7, i64 %407
  %409 = load i32, ptr %408, align 4
  %410 = getelementptr inbounds i32, ptr %377, i64 %404
  %411 = load i32, ptr %410, align 4
  %412 = getelementptr inbounds i32, ptr %377, i64 %407
  %413 = load i32, ptr %412, align 4
  %414 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %18, i64 0, i32 7, i64 %398
  %415 = load i32, ptr %414, align 4
  %416 = and i32 %411, 32767
  %417 = and i32 %413, 32767
  %418 = sub nsw i32 %417, %416
  %419 = sub nsw i32 %409, %406
  %420 = tail call i32 @llvm.abs.i32(i32 %418, i1 true)
  %421 = sub nsw i32 %415, %406
  %422 = mul nsw i32 %420, %421
  %423 = sdiv i32 %422, %419
  %424 = icmp slt i32 %418, 0
  %425 = sub i32 0, %423
  %426 = select i1 %424, i32 %425, i32 %423
  %427 = add i32 %426, %416
  %428 = shl i64 %398, 32
  %429 = ashr exact i64 %428, 32
  %430 = getelementptr inbounds i32, ptr %6, i64 %429
  %431 = load i32, ptr %430, align 4
  %432 = icmp slt i32 %431, 0
  %433 = getelementptr inbounds i32, ptr %7, i64 %429
  %434 = load i32, ptr %433, align 4
  br i1 %432, label %440, label %435

435:                                              ; preds = %397
  %436 = icmp slt i32 %434, 0
  br i1 %436, label %440, label %437

437:                                              ; preds = %435
  %438 = add nuw nsw i32 %434, %431
  %439 = lshr i32 %438, 1
  br label %440

440:                                              ; preds = %437, %435, %397
  %441 = phi i32 [ %439, %437 ], [ %431, %435 ], [ %434, %397 ]
  %442 = icmp slt i32 %441, 0
  %443 = icmp eq i32 %427, %441
  %444 = select i1 %442, i1 true, i1 %443
  %445 = or i32 %427, 32768
  %446 = select i1 %444, i32 %445, i32 %441
  %447 = getelementptr inbounds i32, ptr %377, i64 %398
  store i32 %446, ptr %447, align 4
  %448 = add nuw nsw i64 %398, 1
  %449 = icmp eq i64 %448, %23
  br i1 %449, label %450, label %397, !llvm.loop !282

450:                                              ; preds = %440, %394
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %12) #55
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %11) #55
  br label %451

451:                                              ; preds = %450, %148, %127, %125
  %452 = phi ptr [ %377, %450 ], [ null, %148 ], [ null, %127 ], [ null, %125 ]
  call void @llvm.lifetime.end.p0(i64 260, ptr nonnull %10) #55
  call void @llvm.lifetime.end.p0(i64 260, ptr nonnull %9) #55
  call void @llvm.lifetime.end.p0(i64 260, ptr nonnull %8) #55
  call void @llvm.lifetime.end.p0(i64 260, ptr nonnull %7) #55
  call void @llvm.lifetime.end.p0(i64 260, ptr nonnull %6) #55
  call void @llvm.lifetime.end.p0(i64 4096, ptr nonnull %5) #55
  ret ptr %452
}

; Function Attrs: nofree nounwind optsize memory(write, argmem: readwrite, inaccessiblemem: readwrite) uwtable
define internal ptr @floor1_interpolate_fit(ptr nocapture noundef %0, ptr nocapture noundef readonly %1, ptr noundef readonly %2, ptr noundef readonly %3, i32 noundef %4) #39 {
  %6 = getelementptr inbounds %struct.vorbis_look_floor1, ptr %1, i64 0, i32 5
  %7 = load i32, ptr %6, align 4
  %8 = sext i32 %7 to i64
  %9 = icmp ne ptr %2, null
  %10 = icmp ne ptr %3, null
  %11 = and i1 %9, %10
  br i1 %11, label %12, label %44

12:                                               ; preds = %5
  %13 = shl nsw i64 %8, 2
  %14 = tail call ptr @_vorbis_block_alloc(ptr noundef %0, i64 noundef %13) #56
  %15 = icmp sgt i32 %7, 0
  br i1 %15, label %16, label %44

16:                                               ; preds = %12
  %17 = sub nsw i32 65536, %4
  br label %18

18:                                               ; preds = %41, %16
  %19 = phi i64 [ 0, %16 ], [ %42, %41 ]
  %20 = getelementptr inbounds i32, ptr %2, i64 %19
  %21 = load i32, ptr %20, align 4
  %22 = and i32 %21, 32767
  %23 = mul nsw i32 %22, %17
  %24 = getelementptr inbounds i32, ptr %3, i64 %19
  %25 = load i32, ptr %24, align 4
  %26 = and i32 %25, 32767
  %27 = mul nsw i32 %26, %4
  %28 = add i32 %23, 32768
  %29 = add i32 %28, %27
  %30 = ashr i32 %29, 16
  %31 = getelementptr inbounds i32, ptr %14, i64 %19
  store i32 %30, ptr %31, align 4
  %32 = load i32, ptr %20, align 4
  %33 = and i32 %32, 32768
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %41, label %35

35:                                               ; preds = %18
  %36 = load i32, ptr %24, align 4
  %37 = and i32 %36, 32768
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %41, label %39

39:                                               ; preds = %35
  %40 = or i32 %30, 32768
  store i32 %40, ptr %31, align 4
  br label %41

41:                                               ; preds = %39, %35, %18
  %42 = add nuw nsw i64 %19, 1
  %43 = icmp eq i64 %42, %8
  br i1 %43, label %44, label %18, !llvm.loop !283

44:                                               ; preds = %41, %12, %5
  %45 = phi ptr [ null, %5 ], [ %14, %12 ], [ %14, %41 ]
  ret ptr %45
}

; Function Attrs: nofree nounwind optsize uwtable
define internal ptr @_vp_quantize_couple_memo(ptr nocapture noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, ptr nocapture noundef readonly %4) #3 {
  %6 = load i32, ptr %2, align 8
  %7 = getelementptr inbounds %struct.vorbis_info_mapping0, ptr %3, i64 0, i32 4
  %8 = load i32, ptr %7, align 4
  %9 = sext i32 %8 to i64
  %10 = shl nsw i64 %9, 3
  %11 = tail call ptr @_vorbis_block_alloc(ptr noundef %0, i64 noundef %10) #56
  %12 = getelementptr inbounds %struct.vorbis_look_psy, ptr %2, i64 0, i32 1
  %13 = load ptr, ptr %12, align 8
  %14 = load i32, ptr %13, align 8
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds %struct.vorbis_info_psy_global, ptr %1, i64 0, i32 7, i64 %15, i64 7
  %17 = load i32, ptr %16, align 4
  %18 = load i32, ptr %7, align 4
  %19 = icmp sgt i32 %18, 0
  br i1 %19, label %20, label %162

20:                                               ; preds = %5
  %21 = sext i32 %6 to i64
  %22 = shl nsw i64 %21, 2
  %23 = icmp sgt i32 %17, 0
  %24 = zext i32 %17 to i64
  %25 = zext i32 %6 to i64
  br label %26

26:                                               ; preds = %157, %20
  %27 = phi i64 [ 0, %20 ], [ %158, %157 ]
  %28 = getelementptr inbounds %struct.vorbis_info_mapping0, ptr %3, i64 0, i32 5, i64 %27
  %29 = load i32, ptr %28, align 4
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds ptr, ptr %4, i64 %30
  %32 = load ptr, ptr %31, align 8
  %33 = getelementptr inbounds %struct.vorbis_info_mapping0, ptr %3, i64 0, i32 6, i64 %27
  %34 = load i32, ptr %33, align 4
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds ptr, ptr %4, i64 %35
  %37 = load ptr, ptr %36, align 8
  %38 = tail call ptr @_vorbis_block_alloc(ptr noundef %0, i64 noundef %22) #56
  %39 = getelementptr inbounds ptr, ptr %11, i64 %27
  store ptr %38, ptr %39, align 8
  br i1 %23, label %45, label %40

40:                                               ; preds = %95, %26
  %41 = phi i32 [ 0, %26 ], [ %17, %95 ]
  %42 = icmp slt i32 %41, %6
  br i1 %42, label %43, label %157

43:                                               ; preds = %40
  %44 = zext i32 %41 to i64
  br label %101

45:                                               ; preds = %95, %26
  %46 = phi i64 [ %99, %95 ], [ 0, %26 ]
  %47 = getelementptr inbounds float, ptr %32, i64 %46
  %48 = load float, ptr %47, align 4
  %49 = getelementptr inbounds float, ptr %37, i64 %46
  %50 = load float, ptr %49, align 4
  %51 = fcmp ogt float %48, 0.000000e+00
  br i1 %51, label %52, label %73

52:                                               ; preds = %45
  %53 = fcmp ogt float %50, 0.000000e+00
  br i1 %53, label %54, label %59

54:                                               ; preds = %52
  %55 = fmul float %48, %48
  %56 = fmul float %50, %50
  %57 = fadd float %55, %56
  %58 = tail call float @llvm.sqrt.f32(float %57)
  br label %95

59:                                               ; preds = %52
  %60 = fneg float %50
  %61 = fcmp ogt float %48, %60
  br i1 %61, label %62, label %67

62:                                               ; preds = %59
  %63 = fmul float %48, %48
  %64 = fmul float %50, %50
  %65 = fsub float %63, %64
  %66 = tail call float @sqrtf(float noundef %65) #28
  br label %95

67:                                               ; preds = %59
  %68 = fmul float %50, %50
  %69 = fmul float %48, %48
  %70 = fsub float %68, %69
  %71 = tail call float @sqrtf(float noundef %70) #28
  %72 = fneg float %71
  br label %95

73:                                               ; preds = %45
  %74 = fcmp olt float %50, 0.000000e+00
  br i1 %74, label %75, label %81

75:                                               ; preds = %73
  %76 = fmul float %48, %48
  %77 = fmul float %50, %50
  %78 = fadd float %76, %77
  %79 = tail call float @llvm.sqrt.f32(float %78)
  %80 = fneg float %79
  br label %95

81:                                               ; preds = %73
  %82 = fneg float %48
  %83 = fcmp olt float %50, %82
  br i1 %83, label %84, label %90

84:                                               ; preds = %81
  %85 = fmul float %48, %48
  %86 = fmul float %50, %50
  %87 = fsub float %85, %86
  %88 = tail call float @sqrtf(float noundef %87) #28
  %89 = fneg float %88
  br label %95

90:                                               ; preds = %81
  %91 = fmul float %50, %50
  %92 = fmul float %48, %48
  %93 = fsub float %91, %92
  %94 = tail call float @sqrtf(float noundef %93) #28
  br label %95

95:                                               ; preds = %90, %84, %75, %67, %62, %54
  %96 = phi float [ %58, %54 ], [ %66, %62 ], [ %72, %67 ], [ %80, %75 ], [ %89, %84 ], [ %94, %90 ]
  %97 = load ptr, ptr %39, align 8
  %98 = getelementptr inbounds float, ptr %97, i64 %46
  store float %96, ptr %98, align 4
  %99 = add nuw nsw i64 %46, 1
  %100 = icmp eq i64 %99, %24
  br i1 %100, label %40, label %45, !llvm.loop !284

101:                                              ; preds = %151, %43
  %102 = phi i64 [ %44, %43 ], [ %155, %151 ]
  %103 = getelementptr inbounds float, ptr %32, i64 %102
  %104 = load float, ptr %103, align 4
  %105 = getelementptr inbounds float, ptr %37, i64 %102
  %106 = load float, ptr %105, align 4
  %107 = fcmp ogt float %104, 0.000000e+00
  br i1 %107, label %108, label %129

108:                                              ; preds = %101
  %109 = fcmp ogt float %106, 0.000000e+00
  br i1 %109, label %110, label %115

110:                                              ; preds = %108
  %111 = fmul float %104, %104
  %112 = fmul float %106, %106
  %113 = fadd float %111, %112
  %114 = tail call float @llvm.sqrt.f32(float %113)
  br label %151

115:                                              ; preds = %108
  %116 = fneg float %106
  %117 = fcmp ogt float %104, %116
  br i1 %117, label %118, label %123

118:                                              ; preds = %115
  %119 = fmul float %104, %104
  %120 = fmul float %106, %106
  %121 = fadd float %119, %120
  %122 = tail call float @llvm.sqrt.f32(float %121)
  br label %151

123:                                              ; preds = %115
  %124 = fmul float %106, %106
  %125 = fmul float %104, %104
  %126 = fadd float %125, %124
  %127 = tail call float @llvm.sqrt.f32(float %126)
  %128 = fneg float %127
  br label %151

129:                                              ; preds = %101
  %130 = fcmp olt float %106, 0.000000e+00
  br i1 %130, label %131, label %137

131:                                              ; preds = %129
  %132 = fmul float %104, %104
  %133 = fmul float %106, %106
  %134 = fadd float %132, %133
  %135 = tail call float @llvm.sqrt.f32(float %134)
  %136 = fneg float %135
  br label %151

137:                                              ; preds = %129
  %138 = fneg float %104
  %139 = fcmp olt float %106, %138
  br i1 %139, label %140, label %146

140:                                              ; preds = %137
  %141 = fmul float %104, %104
  %142 = fmul float %106, %106
  %143 = fadd float %141, %142
  %144 = tail call float @llvm.sqrt.f32(float %143)
  %145 = fneg float %144
  br label %151

146:                                              ; preds = %137
  %147 = fmul float %106, %106
  %148 = fmul float %104, %104
  %149 = fadd float %148, %147
  %150 = tail call float @llvm.sqrt.f32(float %149)
  br label %151

151:                                              ; preds = %146, %140, %131, %123, %118, %110
  %152 = phi float [ %114, %110 ], [ %122, %118 ], [ %128, %123 ], [ %136, %131 ], [ %145, %140 ], [ %150, %146 ]
  %153 = load ptr, ptr %39, align 8
  %154 = getelementptr inbounds float, ptr %153, i64 %102
  store float %152, ptr %154, align 4
  %155 = add nuw nsw i64 %102, 1
  %156 = icmp eq i64 %155, %25
  br i1 %156, label %157, label %101, !llvm.loop !285

157:                                              ; preds = %151, %40
  %158 = add nuw nsw i64 %27, 1
  %159 = load i32, ptr %7, align 4
  %160 = sext i32 %159 to i64
  %161 = icmp slt i64 %158, %160
  br i1 %161, label %26, label %162, !llvm.loop !286

162:                                              ; preds = %157, %5
  ret ptr %11
}

; Function Attrs: nofree nounwind optsize uwtable
define internal ptr @_vp_quantize_couple_sort(ptr nocapture noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3) #3 {
  %5 = getelementptr inbounds %struct.vorbis_look_psy, ptr %1, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr inbounds %struct.vorbis_info_psy, ptr %6, i64 0, i32 19
  %8 = load i32, ptr %7, align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %91, label %10

10:                                               ; preds = %4
  %11 = load i32, ptr %1, align 8
  %12 = getelementptr inbounds %struct.vorbis_info_mapping0, ptr %2, i64 0, i32 4
  %13 = load i32, ptr %12, align 4
  %14 = sext i32 %13 to i64
  %15 = shl nsw i64 %14, 3
  %16 = tail call ptr @_vorbis_block_alloc(ptr noundef %0, i64 noundef %15) #56
  %17 = load ptr, ptr %5, align 8
  %18 = getelementptr inbounds %struct.vorbis_info_psy, ptr %17, i64 0, i32 21
  %19 = load i32, ptr %18, align 8
  %20 = sext i32 %19 to i64
  %21 = shl nsw i64 %20, 3
  %22 = alloca i8, i64 %21, align 16
  %23 = load i32, ptr %12, align 4
  %24 = icmp sgt i32 %23, 0
  br i1 %24, label %25, label %91

25:                                               ; preds = %10
  %26 = sext i32 %11 to i64
  %27 = shl nsw i64 %26, 2
  %28 = icmp sgt i32 %11, 0
  %29 = icmp sgt i32 %19, 0
  %30 = zext i32 %19 to i64
  %31 = zext i32 %19 to i64
  %32 = add nuw nsw i64 %30, 1
  %33 = and i64 %32, 8589934590
  %34 = add nsw i64 %30, -1
  %35 = insertelement <2 x i64> poison, i64 %34, i64 0
  %36 = shufflevector <2 x i64> %35, <2 x i64> poison, <2 x i32> zeroinitializer
  br label %37

37:                                               ; preds = %86, %25
  %38 = phi i64 [ 0, %25 ], [ %87, %86 ]
  %39 = call ptr @_vorbis_block_alloc(ptr noundef %0, i64 noundef %27) #56
  %40 = getelementptr inbounds ptr, ptr %16, i64 %38
  store ptr %39, ptr %40, align 8
  br i1 %28, label %41, label %86

41:                                               ; preds = %37
  %42 = getelementptr inbounds ptr, ptr %3, i64 %38
  br label %43

43:                                               ; preds = %83, %41
  %44 = phi i64 [ 0, %41 ], [ %84, %83 ]
  br i1 %29, label %46, label %45

45:                                               ; preds = %43
  call void @qsort(ptr noundef nonnull %22, i64 noundef %20, i64 noundef 8, ptr noundef nonnull @apsort) #59
  br label %83

46:                                               ; preds = %43
  %47 = load ptr, ptr %42, align 8
  %48 = getelementptr float, ptr %47, i64 %44
  br label %49

49:                                               ; preds = %63, %46
  %50 = phi i64 [ 0, %46 ], [ %64, %63 ]
  %51 = phi <2 x i64> [ <i64 0, i64 1>, %46 ], [ %65, %63 ]
  %52 = icmp ule <2 x i64> %51, %36
  %53 = extractelement <2 x i1> %52, i64 0
  br i1 %53, label %54, label %57

54:                                               ; preds = %49
  %55 = getelementptr inbounds ptr, ptr %22, i64 %50
  %56 = getelementptr float, ptr %48, i64 %50
  store ptr %56, ptr %55, align 16
  br label %57

57:                                               ; preds = %54, %49
  %58 = extractelement <2 x i1> %52, i64 1
  br i1 %58, label %59, label %63

59:                                               ; preds = %57
  %60 = or i64 %50, 1
  %61 = getelementptr inbounds ptr, ptr %22, i64 %60
  %62 = getelementptr float, ptr %48, i64 %60
  store ptr %62, ptr %61, align 8
  br label %63

63:                                               ; preds = %59, %57
  %64 = add i64 %50, 2
  %65 = add <2 x i64> %51, <i64 2, i64 2>
  %66 = icmp eq i64 %64, %33
  br i1 %66, label %67, label %49, !llvm.loop !287

67:                                               ; preds = %63
  call void @qsort(ptr noundef nonnull %22, i64 noundef %20, i64 noundef 8, ptr noundef nonnull @apsort) #59
  br i1 %29, label %68, label %83

68:                                               ; preds = %68, %67
  %69 = phi i64 [ %81, %68 ], [ 0, %67 ]
  %70 = getelementptr inbounds ptr, ptr %22, i64 %69
  %71 = load ptr, ptr %70, align 8
  %72 = load ptr, ptr %42, align 8
  %73 = ptrtoint ptr %71 to i64
  %74 = ptrtoint ptr %72 to i64
  %75 = sub i64 %73, %74
  %76 = lshr exact i64 %75, 2
  %77 = trunc i64 %76 to i32
  %78 = load ptr, ptr %40, align 8
  %79 = add nsw i64 %69, %44
  %80 = getelementptr inbounds i32, ptr %78, i64 %79
  store i32 %77, ptr %80, align 4
  %81 = add nuw nsw i64 %69, 1
  %82 = icmp eq i64 %81, %31
  br i1 %82, label %83, label %68, !llvm.loop !288

83:                                               ; preds = %68, %67, %45
  %84 = add i64 %44, %20
  %85 = icmp slt i64 %84, %26
  br i1 %85, label %43, label %86, !llvm.loop !289

86:                                               ; preds = %83, %37
  %87 = add nuw nsw i64 %38, 1
  %88 = load i32, ptr %12, align 4
  %89 = sext i32 %88 to i64
  %90 = icmp slt i64 %87, %89
  br i1 %90, label %37, label %91, !llvm.loop !290

91:                                               ; preds = %86, %10, %4
  %92 = phi ptr [ null, %4 ], [ %16, %10 ], [ %16, %86 ]
  ret ptr %92
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @_vp_noise_normalize_sort(ptr nocapture noundef readonly %0, ptr noundef %1, ptr nocapture noundef writeonly %2) #3 {
  %4 = load i32, ptr %0, align 8
  %5 = getelementptr inbounds %struct.vorbis_look_psy, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr inbounds %struct.vorbis_info_psy, ptr %6, i64 0, i32 21
  %8 = load i32, ptr %7, align 8
  %9 = sext i32 %8 to i64
  %10 = shl nsw i64 %9, 3
  %11 = alloca i8, i64 %10, align 16
  %12 = getelementptr inbounds %struct.vorbis_info_psy, ptr %6, i64 0, i32 20
  %13 = load i32, ptr %12, align 4
  %14 = icmp slt i32 %13, %4
  br i1 %14, label %15, label %74

15:                                               ; preds = %3
  %16 = ptrtoint ptr %1 to i64
  br label %17

17:                                               ; preds = %71, %15
  %18 = phi i32 [ %13, %15 ], [ %72, %71 ]
  %19 = phi i32 [ %8, %15 ], [ %23, %71 ]
  %20 = add nsw i32 %18, %19
  %21 = icmp sgt i32 %20, %4
  %22 = sub nsw i32 %4, %18
  %23 = select i1 %21, i32 %22, i32 %19
  %24 = icmp sgt i32 %23, 0
  br i1 %24, label %27, label %25

25:                                               ; preds = %17
  %26 = sext i32 %23 to i64
  call void @qsort(ptr noundef nonnull %11, i64 noundef %26, i64 noundef 8, ptr noundef nonnull @apsort) #59
  br label %71

27:                                               ; preds = %17
  %28 = sext i32 %18 to i64
  %29 = getelementptr float, ptr %1, i64 %28
  %30 = zext i32 %23 to i64
  %31 = add nuw nsw i64 %30, 1
  %32 = and i64 %31, 8589934590
  %33 = add nsw i64 %30, -1
  %34 = insertelement <2 x i64> poison, i64 %33, i64 0
  %35 = shufflevector <2 x i64> %34, <2 x i64> poison, <2 x i32> zeroinitializer
  br label %36

36:                                               ; preds = %50, %27
  %37 = phi i64 [ 0, %27 ], [ %51, %50 ]
  %38 = phi <2 x i64> [ <i64 0, i64 1>, %27 ], [ %52, %50 ]
  %39 = icmp ule <2 x i64> %38, %35
  %40 = extractelement <2 x i1> %39, i64 0
  br i1 %40, label %41, label %44

41:                                               ; preds = %36
  %42 = getelementptr inbounds ptr, ptr %11, i64 %37
  %43 = getelementptr float, ptr %29, i64 %37
  store ptr %43, ptr %42, align 16
  br label %44

44:                                               ; preds = %41, %36
  %45 = extractelement <2 x i1> %39, i64 1
  br i1 %45, label %46, label %50

46:                                               ; preds = %44
  %47 = or i64 %37, 1
  %48 = getelementptr inbounds ptr, ptr %11, i64 %47
  %49 = getelementptr float, ptr %29, i64 %47
  store ptr %49, ptr %48, align 8
  br label %50

50:                                               ; preds = %46, %44
  %51 = add i64 %37, 2
  %52 = add <2 x i64> %38, <i64 2, i64 2>
  %53 = icmp eq i64 %51, %32
  br i1 %53, label %54, label %36, !llvm.loop !291

54:                                               ; preds = %50
  call void @qsort(ptr noundef nonnull %11, i64 noundef %30, i64 noundef 8, ptr noundef nonnull @apsort) #59
  br i1 %24, label %55, label %71

55:                                               ; preds = %54
  %56 = sub i32 %18, %13
  br label %57

57:                                               ; preds = %57, %55
  %58 = phi i64 [ 0, %55 ], [ %69, %57 ]
  %59 = getelementptr inbounds ptr, ptr %11, i64 %58
  %60 = load ptr, ptr %59, align 8
  %61 = ptrtoint ptr %60 to i64
  %62 = sub i64 %61, %16
  %63 = lshr exact i64 %62, 2
  %64 = trunc i64 %63 to i32
  %65 = trunc i64 %58 to i32
  %66 = add i32 %56, %65
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds i32, ptr %2, i64 %67
  store i32 %64, ptr %68, align 4
  %69 = add nuw nsw i64 %58, 1
  %70 = icmp ult i64 %69, %30
  br i1 %70, label %57, label %71, !llvm.loop !292

71:                                               ; preds = %57, %54, %25
  %72 = add nsw i32 %23, %18
  %73 = icmp slt i32 %72, %4
  br i1 %73, label %17, label %74, !llvm.loop !293

74:                                               ; preds = %71, %3
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @floor1_encode(ptr nocapture noundef %0, ptr nocapture noundef %1, ptr noundef %2, ptr nocapture noundef writeonly %3) #0 {
  %5 = alloca [65 x i32], align 16
  %6 = alloca [8 x i32], align 16
  %7 = alloca [8 x i32], align 16
  %8 = getelementptr inbounds %struct.vorbis_look_floor1, ptr %1, i64 0, i32 8
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr inbounds %struct.vorbis_look_floor1, ptr %1, i64 0, i32 5
  %11 = load i32, ptr %10, align 4
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 10
  %14 = load ptr, ptr %13, align 8
  %15 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %14, i64 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr inbounds %struct.vorbis_info, ptr %16, i64 0, i32 7
  %18 = load ptr, ptr %17, align 8
  call void @llvm.lifetime.start.p0(i64 260, ptr nonnull %5) #55
  %19 = getelementptr inbounds %struct.codec_setup_info, ptr %18, i64 0, i32 14
  %20 = getelementptr inbounds %struct.codec_setup_info, ptr %18, i64 0, i32 15
  %21 = load ptr, ptr %20, align 8
  %22 = icmp eq ptr %2, null
  br i1 %22, label %406, label %23

23:                                               ; preds = %4
  %24 = icmp sgt i32 %11, 0
  br i1 %24, label %29, label %25

25:                                               ; preds = %23
  %26 = getelementptr inbounds [65 x i32], ptr %5, i64 0, i64 1
  %27 = load <2 x i32>, ptr %2, align 4
  store <2 x i32> %27, ptr %5, align 16
  %28 = extractelement <2 x i32> %27, i64 0
  br label %129

29:                                               ; preds = %23
  %30 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %9, i64 0, i32 6
  br label %31

31:                                               ; preds = %47, %29
  %32 = phi i64 [ 0, %29 ], [ %51, %47 ]
  %33 = getelementptr inbounds i32, ptr %2, i64 %32
  %34 = load i32, ptr %33, align 4
  %35 = and i32 %34, 32767
  %36 = load i32, ptr %30, align 4
  switch i32 %36, label %47 [
    i32 1, label %37
    i32 2, label %39
    i32 3, label %41
    i32 4, label %45
  ]

37:                                               ; preds = %31
  %38 = lshr i32 %35, 2
  br label %47

39:                                               ; preds = %31
  %40 = lshr i32 %35, 3
  br label %47

41:                                               ; preds = %31
  %42 = trunc i32 %35 to i16
  %43 = udiv i16 %42, 12
  %44 = zext i16 %43 to i32
  br label %47

45:                                               ; preds = %31
  %46 = lshr i32 %35, 4
  br label %47

47:                                               ; preds = %45, %41, %39, %37, %31
  %48 = phi i32 [ %35, %31 ], [ %46, %45 ], [ %44, %41 ], [ %40, %39 ], [ %38, %37 ]
  %49 = and i32 %34, 32768
  %50 = or i32 %48, %49
  store i32 %50, ptr %33, align 4
  %51 = add nuw nsw i64 %32, 1
  %52 = icmp eq i64 %51, %12
  br i1 %52, label %53, label %31, !llvm.loop !294

53:                                               ; preds = %47
  %54 = getelementptr inbounds [65 x i32], ptr %5, i64 0, i64 1
  %55 = load <2 x i32>, ptr %2, align 4
  store <2 x i32> %55, ptr %5, align 16
  %56 = icmp sgt i32 %11, 2
  %57 = extractelement <2 x i32> %55, i64 0
  br i1 %56, label %58, label %129

58:                                               ; preds = %53
  %59 = getelementptr inbounds %struct.vorbis_look_floor1, ptr %1, i64 0, i32 7
  br label %60

60:                                               ; preds = %126, %58
  %61 = phi i64 [ 2, %58 ], [ %127, %126 ]
  %62 = add nsw i64 %61, -2
  %63 = getelementptr inbounds %struct.vorbis_look_floor1, ptr %1, i64 0, i32 4, i64 %62
  %64 = load i32, ptr %63, align 4
  %65 = getelementptr inbounds %struct.vorbis_look_floor1, ptr %1, i64 0, i32 3, i64 %62
  %66 = load i32, ptr %65, align 4
  %67 = sext i32 %64 to i64
  %68 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %9, i64 0, i32 7, i64 %67
  %69 = load i32, ptr %68, align 4
  %70 = sext i32 %66 to i64
  %71 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %9, i64 0, i32 7, i64 %70
  %72 = load i32, ptr %71, align 4
  %73 = getelementptr inbounds i32, ptr %2, i64 %67
  %74 = load i32, ptr %73, align 4
  %75 = getelementptr inbounds i32, ptr %2, i64 %70
  %76 = load i32, ptr %75, align 4
  %77 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %9, i64 0, i32 7, i64 %61
  %78 = load i32, ptr %77, align 4
  %79 = and i32 %74, 32767
  %80 = and i32 %76, 32767
  %81 = sub nsw i32 %80, %79
  %82 = sub nsw i32 %72, %69
  %83 = tail call i32 @llvm.abs.i32(i32 %81, i1 true)
  %84 = sub nsw i32 %78, %69
  %85 = mul nsw i32 %83, %84
  %86 = sdiv i32 %85, %82
  %87 = icmp slt i32 %81, 0
  %88 = sub i32 0, %86
  %89 = select i1 %87, i32 %88, i32 %86
  %90 = add i32 %89, %79
  %91 = getelementptr inbounds i32, ptr %2, i64 %61
  %92 = load i32, ptr %91, align 4
  %93 = and i32 %92, 32768
  %94 = icmp ne i32 %93, 0
  %95 = icmp eq i32 %90, %92
  %96 = select i1 %94, i1 true, i1 %95
  br i1 %96, label %97, label %100

97:                                               ; preds = %60
  %98 = or i32 %90, 32768
  store i32 %98, ptr %91, align 4
  %99 = getelementptr inbounds [65 x i32], ptr %5, i64 0, i64 %61
  store i32 0, ptr %99, align 4
  br label %126

100:                                              ; preds = %60
  %101 = load i32, ptr %59, align 4
  %102 = sub nsw i32 %101, %90
  %103 = tail call i32 @llvm.smin.i32(i32 %102, i32 %90)
  %104 = sub nsw i32 %92, %90
  %105 = icmp slt i32 %104, 0
  br i1 %105, label %106, label %115

106:                                              ; preds = %100
  %107 = sub nsw i32 0, %103
  %108 = icmp slt i32 %104, %107
  br i1 %108, label %109, label %112

109:                                              ; preds = %106
  %110 = xor i32 %104, -1
  %111 = add i32 %103, %110
  br label %121

112:                                              ; preds = %106
  %113 = shl i32 %104, 1
  %114 = xor i32 %113, -1
  br label %121

115:                                              ; preds = %100
  %116 = icmp slt i32 %104, %103
  br i1 %116, label %119, label %117

117:                                              ; preds = %115
  %118 = add nsw i32 %103, %104
  br label %121

119:                                              ; preds = %115
  %120 = shl nuw i32 %104, 1
  br label %121

121:                                              ; preds = %119, %117, %112, %109
  %122 = phi i32 [ %111, %109 ], [ %114, %112 ], [ %118, %117 ], [ %120, %119 ]
  %123 = getelementptr inbounds [65 x i32], ptr %5, i64 0, i64 %61
  store i32 %122, ptr %123, align 4
  store i32 %79, ptr %73, align 4
  %124 = load i32, ptr %75, align 4
  %125 = and i32 %124, 32767
  store i32 %125, ptr %75, align 4
  br label %126

126:                                              ; preds = %121, %97
  %127 = add nuw nsw i64 %61, 1
  %128 = icmp eq i64 %127, %12
  br i1 %128, label %129, label %60, !llvm.loop !295

129:                                              ; preds = %126, %53, %25
  %130 = phi ptr [ %26, %25 ], [ %54, %53 ], [ %54, %126 ]
  %131 = phi i32 [ %28, %25 ], [ %57, %53 ], [ %57, %126 ]
  %132 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 1
  tail call void @oggpack_write(ptr noundef nonnull %132, i64 noundef 1, i32 noundef 1) #56
  %133 = getelementptr inbounds %struct.vorbis_look_floor1, ptr %1, i64 0, i32 11
  %134 = load i64, ptr %133, align 8
  %135 = add nsw i64 %134, 1
  store i64 %135, ptr %133, align 8
  %136 = getelementptr inbounds %struct.vorbis_look_floor1, ptr %1, i64 0, i32 7
  %137 = load i32, ptr %136, align 4
  %138 = add nsw i32 %137, -1
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %140, label %142

140:                                              ; preds = %129
  %141 = getelementptr inbounds %struct.vorbis_look_floor1, ptr %1, i64 0, i32 10
  br label %160

142:                                              ; preds = %142, %129
  %143 = phi i32 [ %145, %142 ], [ 0, %129 ]
  %144 = phi i32 [ %146, %142 ], [ %138, %129 ]
  %145 = add nuw nsw i32 %143, 1
  %146 = lshr i32 %144, 1
  %147 = icmp ult i32 %144, 2
  br i1 %147, label %148, label %142, !llvm.loop !107

148:                                              ; preds = %142
  %.lcssa1 = phi i32 [ %145, %142 ]
  %149 = shl nuw nsw i32 %.lcssa1, 1
  %150 = zext i32 %149 to i64
  %151 = getelementptr inbounds %struct.vorbis_look_floor1, ptr %1, i64 0, i32 10
  %152 = load i64, ptr %151, align 8
  %153 = add nsw i64 %152, %150
  store i64 %153, ptr %151, align 8
  br label %154

154:                                              ; preds = %154, %148
  %155 = phi i32 [ %157, %154 ], [ 0, %148 ]
  %156 = phi i32 [ %158, %154 ], [ %138, %148 ]
  %157 = add nuw nsw i32 %155, 1
  %158 = lshr i32 %156, 1
  %159 = icmp ult i32 %156, 2
  br i1 %159, label %160, label %154, !llvm.loop !107

160:                                              ; preds = %154, %140
  %161 = phi ptr [ %141, %140 ], [ %151, %154 ]
  %162 = phi i32 [ 0, %140 ], [ %157, %154 ]
  %163 = sext i32 %131 to i64
  tail call void @oggpack_write(ptr noundef nonnull %132, i64 noundef %163, i32 noundef %162) #56
  %164 = load i32, ptr %130, align 4
  %165 = sext i32 %164 to i64
  %166 = load i32, ptr %136, align 4
  %167 = add nsw i32 %166, -1
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %175, label %169

169:                                              ; preds = %169, %160
  %170 = phi i32 [ %172, %169 ], [ 0, %160 ]
  %171 = phi i32 [ %173, %169 ], [ %167, %160 ]
  %172 = add nuw nsw i32 %170, 1
  %173 = lshr i32 %171, 1
  %174 = icmp ult i32 %171, 2
  br i1 %174, label %175, label %169, !llvm.loop !107

175:                                              ; preds = %169, %160
  %176 = phi i32 [ 0, %160 ], [ %172, %169 ]
  tail call void @oggpack_write(ptr noundef nonnull %132, i64 noundef %165, i32 noundef %176) #56
  %177 = load i32, ptr %9, align 4
  %178 = icmp sgt i32 %177, 0
  br i1 %178, label %179, label %328

179:                                              ; preds = %175
  %180 = getelementptr inbounds %struct.vorbis_look_floor1, ptr %1, i64 0, i32 9
  br label %181

181:                                              ; preds = %321, %179
  %182 = phi i64 [ 0, %179 ], [ %324, %321 ]
  %183 = phi i64 [ 2, %179 ], [ %323, %321 ]
  %184 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %9, i64 0, i32 1, i64 %182
  %185 = load i32, ptr %184, align 4
  %186 = sext i32 %185 to i64
  %187 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %9, i64 0, i32 2, i64 %186
  %188 = load i32, ptr %187, align 4
  %189 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %9, i64 0, i32 3, i64 %186
  %190 = load i32, ptr %189, align 4
  %191 = shl nuw i32 1, %190
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %6) #55
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(32) %6, i8 0, i64 32, i1 false)
  %192 = icmp eq i32 %190, 0
  br i1 %192, label %275, label %193

193:                                              ; preds = %181
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %7) #55
  %194 = icmp eq i32 %190, 31
  br i1 %194, label %198, label %195

195:                                              ; preds = %193
  %196 = tail call i32 @llvm.smax.i32(i32 %191, i32 1)
  %197 = zext i32 %196 to i64
  br label %204

198:                                              ; preds = %216, %193
  %199 = icmp sgt i32 %188, 0
  br i1 %199, label %200, label %248

200:                                              ; preds = %198
  %201 = tail call i32 @llvm.smax.i32(i32 %191, i32 1)
  %202 = zext i32 %188 to i64
  %203 = zext i32 %201 to i64
  br label %221

204:                                              ; preds = %216, %195
  %205 = phi i64 [ 0, %195 ], [ %219, %216 ]
  %206 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %9, i64 0, i32 5, i64 %186, i64 %205
  %207 = load i32, ptr %206, align 4
  %208 = icmp slt i32 %207, 0
  br i1 %208, label %216, label %209

209:                                              ; preds = %204
  %210 = zext i32 %207 to i64
  %211 = getelementptr inbounds ptr, ptr %19, i64 %210
  %212 = load ptr, ptr %211, align 8
  %213 = getelementptr inbounds %struct.static_codebook, ptr %212, i64 0, i32 1
  %214 = load i64, ptr %213, align 8
  %215 = trunc i64 %214 to i32
  br label %216

216:                                              ; preds = %209, %204
  %217 = phi i32 [ %215, %209 ], [ 1, %204 ]
  %218 = getelementptr inbounds [8 x i32], ptr %7, i64 0, i64 %205
  store i32 %217, ptr %218, align 4
  %219 = add nuw nsw i64 %205, 1
  %220 = icmp eq i64 %219, %197
  br i1 %220, label %198, label %204, !llvm.loop !296

221:                                              ; preds = %240, %200
  %222 = phi i64 [ 0, %200 ], [ %246, %240 ]
  %223 = phi i32 [ 0, %200 ], [ %245, %240 ]
  %224 = phi i32 [ 0, %200 ], [ %244, %240 ]
  br i1 %194, label %240, label %225

225:                                              ; preds = %221
  %226 = add nsw i64 %183, %222
  %227 = getelementptr inbounds [65 x i32], ptr %5, i64 0, i64 %226
  %228 = load i32, ptr %227, align 4
  br label %229

229:                                              ; preds = %237, %225
  %230 = phi i64 [ 0, %225 ], [ %238, %237 ]
  %231 = getelementptr inbounds [8 x i32], ptr %7, i64 0, i64 %230
  %232 = load i32, ptr %231, align 4
  %233 = icmp slt i32 %228, %232
  br i1 %233, label %234, label %237

234:                                              ; preds = %229
  %.lcssa = phi i64 [ %230, %229 ]
  %235 = trunc i64 %.lcssa to i32
  %236 = getelementptr inbounds [8 x i32], ptr %6, i64 0, i64 %222
  store i32 %235, ptr %236, align 4
  br label %240

237:                                              ; preds = %229
  %238 = add nuw nsw i64 %230, 1
  %239 = icmp eq i64 %238, %203
  br i1 %239, label %240, label %229, !llvm.loop !297

240:                                              ; preds = %237, %234, %221
  %241 = getelementptr inbounds [8 x i32], ptr %6, i64 0, i64 %222
  %242 = load i32, ptr %241, align 4
  %243 = shl i32 %242, %223
  %244 = or i32 %243, %224
  %245 = add nsw i32 %223, %190
  %246 = add nuw nsw i64 %222, 1
  %247 = icmp eq i64 %246, %202
  br i1 %247, label %248, label %221, !llvm.loop !298

248:                                              ; preds = %240, %198
  %249 = phi i32 [ 0, %198 ], [ %244, %240 ]
  %250 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %9, i64 0, i32 4, i64 %186
  %251 = load i32, ptr %250, align 4
  %252 = sext i32 %251 to i64
  %253 = getelementptr inbounds %struct.codebook, ptr %21, i64 %252, i32 5
  %254 = load ptr, ptr %253, align 8
  %255 = sext i32 %249 to i64
  %256 = getelementptr inbounds i32, ptr %254, i64 %255
  %257 = load i32, ptr %256, align 4
  %258 = zext i32 %257 to i64
  %259 = getelementptr inbounds %struct.codebook, ptr %21, i64 %252, i32 3
  %260 = load ptr, ptr %259, align 8
  %261 = getelementptr inbounds %struct.static_codebook, ptr %260, i64 0, i32 2
  %262 = load ptr, ptr %261, align 8
  %263 = getelementptr inbounds i64, ptr %262, i64 %255
  %264 = load i64, ptr %263, align 8
  %265 = trunc i64 %264 to i32
  tail call void @oggpack_write(ptr noundef nonnull %132, i64 noundef %258, i32 noundef %265) #56
  %266 = load ptr, ptr %259, align 8
  %267 = getelementptr inbounds %struct.static_codebook, ptr %266, i64 0, i32 2
  %268 = load ptr, ptr %267, align 8
  %269 = getelementptr inbounds i64, ptr %268, i64 %255
  %270 = load i64, ptr %269, align 8
  %271 = shl i64 %270, 32
  %272 = ashr exact i64 %271, 32
  %273 = load i64, ptr %180, align 8
  %274 = add nsw i64 %272, %273
  store i64 %274, ptr %180, align 8
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %7) #55
  br label %275

275:                                              ; preds = %248, %181
  %276 = icmp sgt i32 %188, 0
  br i1 %276, label %277, label %321

277:                                              ; preds = %275
  %278 = zext i32 %188 to i64
  br label %279

279:                                              ; preds = %318, %277
  %280 = phi i64 [ 0, %277 ], [ %319, %318 ]
  %281 = getelementptr inbounds [8 x i32], ptr %6, i64 0, i64 %280
  %282 = load i32, ptr %281, align 4
  %283 = sext i32 %282 to i64
  %284 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %9, i64 0, i32 5, i64 %186, i64 %283
  %285 = load i32, ptr %284, align 4
  %286 = icmp sgt i32 %285, -1
  br i1 %286, label %287, label %318

287:                                              ; preds = %279
  %288 = add nsw i64 %183, %280
  %289 = getelementptr inbounds [65 x i32], ptr %5, i64 0, i64 %288
  %290 = load i32, ptr %289, align 4
  %291 = sext i32 %290 to i64
  %292 = zext i32 %285 to i64
  %293 = getelementptr inbounds %struct.codebook, ptr %21, i64 %292, i32 1
  %294 = load i64, ptr %293, align 8
  %295 = icmp sgt i64 %294, %291
  br i1 %295, label %296, label %318

296:                                              ; preds = %287
  %297 = getelementptr inbounds %struct.codebook, ptr %21, i64 %292, i32 5
  %298 = load ptr, ptr %297, align 8
  %299 = getelementptr inbounds i32, ptr %298, i64 %291
  %300 = load i32, ptr %299, align 4
  %301 = zext i32 %300 to i64
  %302 = getelementptr inbounds %struct.codebook, ptr %21, i64 %292, i32 3
  %303 = load ptr, ptr %302, align 8
  %304 = getelementptr inbounds %struct.static_codebook, ptr %303, i64 0, i32 2
  %305 = load ptr, ptr %304, align 8
  %306 = getelementptr inbounds i64, ptr %305, i64 %291
  %307 = load i64, ptr %306, align 8
  %308 = trunc i64 %307 to i32
  tail call void @oggpack_write(ptr noundef nonnull %132, i64 noundef %301, i32 noundef %308) #56
  %309 = load ptr, ptr %302, align 8
  %310 = getelementptr inbounds %struct.static_codebook, ptr %309, i64 0, i32 2
  %311 = load ptr, ptr %310, align 8
  %312 = getelementptr inbounds i64, ptr %311, i64 %291
  %313 = load i64, ptr %312, align 8
  %314 = shl i64 %313, 32
  %315 = ashr exact i64 %314, 32
  %316 = load i64, ptr %161, align 8
  %317 = add nsw i64 %315, %316
  store i64 %317, ptr %161, align 8
  br label %318

318:                                              ; preds = %296, %287, %279
  %319 = add nuw nsw i64 %280, 1
  %320 = icmp eq i64 %319, %278
  br i1 %320, label %321, label %279, !llvm.loop !299

321:                                              ; preds = %318, %275
  %322 = sext i32 %188 to i64
  %323 = add nsw i64 %183, %322
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %6) #55
  %324 = add nuw nsw i64 %182, 1
  %325 = load i32, ptr %9, align 4
  %326 = sext i32 %325 to i64
  %327 = icmp slt i64 %324, %326
  br i1 %327, label %181, label %328, !llvm.loop !300

328:                                              ; preds = %321, %175
  %329 = load i32, ptr %2, align 4
  %330 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %9, i64 0, i32 6
  %331 = load i32, ptr %330, align 4
  %332 = mul nsw i32 %331, %329
  %333 = load i32, ptr %10, align 4
  %334 = icmp sgt i32 %333, 1
  br i1 %334, label %335, label %389

335:                                              ; preds = %381, %328
  %336 = phi i32 [ %384, %381 ], [ %332, %328 ]
  %337 = phi i32 [ %383, %381 ], [ 0, %328 ]
  %338 = phi i32 [ %382, %381 ], [ 0, %328 ]
  %339 = phi i64 [ %385, %381 ], [ 1, %328 ]
  %340 = getelementptr inbounds %struct.vorbis_look_floor1, ptr %1, i64 0, i32 1, i64 %339
  %341 = load i32, ptr %340, align 4
  %342 = sext i32 %341 to i64
  %343 = getelementptr inbounds i32, ptr %2, i64 %342
  %344 = load i32, ptr %343, align 4
  %345 = icmp ult i32 %344, 32768
  br i1 %345, label %346, label %381

346:                                              ; preds = %335
  %347 = load i32, ptr %330, align 4
  %348 = mul nsw i32 %347, %344
  %349 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %9, i64 0, i32 7, i64 %342
  %350 = load i32, ptr %349, align 4
  %351 = sub nsw i32 %348, %336
  %352 = sub nsw i32 %350, %337
  %353 = tail call i32 @llvm.abs.i32(i32 %351, i1 true)
  %354 = sdiv i32 %351, %352
  %355 = icmp sgt i32 %351, -1
  %356 = select i1 %355, i32 1, i32 -1
  %357 = mul nsw i32 %354, %352
  %358 = tail call i32 @llvm.abs.i32(i32 %357, i1 true)
  %359 = sub nsw i32 %353, %358
  %360 = sext i32 %337 to i64
  %361 = getelementptr inbounds i32, ptr %3, i64 %360
  store i32 %336, ptr %361, align 4
  %362 = add nsw i32 %337, 1
  %363 = icmp slt i32 %362, %350
  br i1 %363, label %364, label %381

364:                                              ; preds = %346
  %365 = add nsw i64 %360, 1
  br label %366

366:                                              ; preds = %366, %364
  %367 = phi i64 [ %365, %364 ], [ %378, %366 ]
  %368 = phi i32 [ 0, %364 ], [ %374, %366 ]
  %369 = phi i32 [ %336, %364 ], [ %376, %366 ]
  %370 = add nsw i32 %368, %359
  %371 = icmp slt i32 %370, %352
  %372 = select i1 %371, i32 0, i32 %356
  %373 = select i1 %371, i32 0, i32 %352
  %374 = sub nsw i32 %370, %373
  %375 = add i32 %369, %354
  %376 = add i32 %375, %372
  %377 = getelementptr inbounds i32, ptr %3, i64 %367
  store i32 %376, ptr %377, align 4
  %378 = add nsw i64 %367, 1
  %379 = trunc i64 %378 to i32
  %380 = icmp eq i32 %350, %379
  br i1 %380, label %381, label %366, !llvm.loop !301

381:                                              ; preds = %366, %346, %335
  %382 = phi i32 [ %338, %335 ], [ %350, %346 ], [ %350, %366 ]
  %383 = phi i32 [ %337, %335 ], [ %350, %346 ], [ %350, %366 ]
  %384 = phi i32 [ %336, %335 ], [ %348, %346 ], [ %348, %366 ]
  %385 = add nuw nsw i64 %339, 1
  %386 = load i32, ptr %10, align 4
  %387 = sext i32 %386 to i64
  %388 = icmp slt i64 %385, %387
  br i1 %388, label %335, label %389, !llvm.loop !302

389:                                              ; preds = %381, %328
  %390 = phi i32 [ 0, %328 ], [ %382, %381 ]
  %391 = phi i32 [ %332, %328 ], [ %384, %381 ]
  %392 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 5
  %393 = load i32, ptr %392, align 8
  %394 = sdiv i32 %393, 2
  %395 = icmp slt i32 %390, %394
  br i1 %395, label %396, label %413

396:                                              ; preds = %389
  %397 = sext i32 %390 to i64
  br label %398

398:                                              ; preds = %398, %396
  %399 = phi i64 [ %401, %398 ], [ %397, %396 ]
  %400 = getelementptr inbounds i32, ptr %3, i64 %399
  store i32 %391, ptr %400, align 4
  %401 = add nsw i64 %399, 1
  %402 = load i32, ptr %392, align 8
  %403 = sdiv i32 %402, 2
  %404 = sext i32 %403 to i64
  %405 = icmp slt i64 %401, %404
  br i1 %405, label %398, label %413, !llvm.loop !303

406:                                              ; preds = %4
  %407 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 1
  tail call void @oggpack_write(ptr noundef nonnull %407, i64 noundef 0, i32 noundef 1) #56
  %408 = getelementptr inbounds %struct.vorbis_block, ptr %0, i64 0, i32 5
  %409 = load i32, ptr %408, align 8
  %410 = sdiv i32 %409, 2
  %411 = sext i32 %410 to i64
  %412 = shl nsw i64 %411, 2
  tail call void @llvm.memset.p0.i64(ptr align 4 %3, i8 0, i64 %412, i1 false)
  br label %413

413:                                              ; preds = %406, %398, %389
  %414 = phi i32 [ 0, %406 ], [ 1, %389 ], [ 1, %398 ]
  %415 = load i64, ptr @floor1_encode.seq, align 8
  %416 = add nsw i64 %415, 1
  store i64 %416, ptr @floor1_encode.seq, align 8
  call void @llvm.lifetime.end.p0(i64 260, ptr nonnull %5) #55
  ret i32 %414
}

; Function Attrs: nofree nosync nounwind optsize memory(argmem: readwrite) uwtable
define internal void @_vp_remove_floor(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr nocapture noundef writeonly %3, i32 noundef %4) #40 {
  %6 = load i32, ptr %0, align 8
  %7 = tail call i32 @llvm.smin.i32(i32 %6, i32 %4)
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %11

9:                                                ; preds = %5
  %10 = zext i32 %7 to i64
  br label %23

11:                                               ; preds = %23, %5
  %12 = phi i32 [ 0, %5 ], [ %7, %23 ]
  %13 = icmp slt i32 %12, %6
  br i1 %13, label %14, label %36

14:                                               ; preds = %11
  %15 = zext i32 %12 to i64
  %16 = shl nuw nsw i64 %15, 2
  %17 = getelementptr i8, ptr %3, i64 %16
  %18 = xor i32 %12, -1
  %19 = add i32 %6, %18
  %20 = zext i32 %19 to i64
  %21 = shl nuw nsw i64 %20, 2
  %22 = add nuw nsw i64 %21, 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(1) %17, i8 0, i64 %22, i1 false)
  br label %36

23:                                               ; preds = %23, %9
  %24 = phi i64 [ 0, %9 ], [ %34, %23 ]
  %25 = getelementptr inbounds float, ptr %1, i64 %24
  %26 = load float, ptr %25, align 4
  %27 = getelementptr inbounds i32, ptr %2, i64 %24
  %28 = load i32, ptr %27, align 4
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds [256 x float], ptr @FLOOR1_fromdB_INV_LOOKUP, i64 0, i64 %29
  %31 = load float, ptr %30, align 4
  %32 = fmul float %26, %31
  %33 = getelementptr inbounds float, ptr %3, i64 %24
  store float %32, ptr %33, align 4
  %34 = add nuw nsw i64 %24, 1
  %35 = icmp eq i64 %34, %10
  br i1 %35, label %11, label %23, !llvm.loop !304

36:                                               ; preds = %14, %11
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal void @_vp_noise_normalize(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef writeonly %2, ptr nocapture noundef readonly %3) #30 {
  %5 = load i32, ptr %0, align 8
  %6 = getelementptr inbounds %struct.vorbis_look_psy, ptr %0, i64 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr inbounds %struct.vorbis_info_psy, ptr %7, i64 0, i32 21
  %9 = load i32, ptr %8, align 8
  %10 = getelementptr inbounds %struct.vorbis_info_psy, ptr %7, i64 0, i32 20
  %11 = load i32, ptr %10, align 4
  %12 = tail call i32 @llvm.smin.i32(i32 %11, i32 %5)
  %13 = getelementptr inbounds %struct.vorbis_info_psy, ptr %7, i64 0, i32 18
  %14 = load i32, ptr %13, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %111, label %16

16:                                               ; preds = %4
  %17 = icmp sgt i32 %12, 0
  br i1 %17, label %18, label %20

18:                                               ; preds = %16
  %19 = zext i32 %12 to i64
  br label %29

20:                                               ; preds = %29, %16
  %21 = phi i32 [ 0, %16 ], [ %12, %29 ]
  %22 = add nsw i32 %21, %9
  %23 = icmp sgt i32 %22, %5
  br i1 %23, label %111, label %24

24:                                               ; preds = %20
  %25 = icmp sgt i32 %9, 0
  %26 = getelementptr inbounds %struct.vorbis_info_psy, ptr %7, i64 0, i32 22
  %27 = zext i32 %9 to i64
  %28 = sext i32 %9 to i64
  br label %41

29:                                               ; preds = %29, %18
  %30 = phi i64 [ 0, %18 ], [ %35, %29 ]
  %31 = getelementptr inbounds float, ptr %1, i64 %30
  %32 = load float, ptr %31, align 4
  %33 = tail call float @llvm.rint.f32(float %32)
  %34 = getelementptr inbounds float, ptr %2, i64 %30
  store float %33, ptr %34, align 4
  %35 = add nuw nsw i64 %30, 1
  %36 = icmp eq i64 %35, %19
  br i1 %36, label %20, label %29, !llvm.loop !305

37:                                               ; preds = %100, %94, %90
  %38 = add nsw i32 %43, %9
  %39 = icmp sgt i32 %38, %5
  %40 = add i32 %42, %9
  br i1 %39, label %111, label %41, !llvm.loop !306

41:                                               ; preds = %37, %24
  %42 = phi i32 [ %21, %24 ], [ %40, %37 ]
  %43 = phi i32 [ %22, %24 ], [ %38, %37 ]
  %44 = icmp slt i32 %42, %43
  br i1 %44, label %45, label %47

45:                                               ; preds = %41
  %46 = sext i32 %42 to i64
  br label %51

47:                                               ; preds = %51, %41
  %48 = phi float [ 0.000000e+00, %41 ], [ %57, %51 ]
  br i1 %25, label %49, label %94

49:                                               ; preds = %47
  %50 = sub i32 %42, %12
  br label %61

51:                                               ; preds = %51, %45
  %52 = phi i64 [ %46, %45 ], [ %58, %51 ]
  %53 = phi float [ 0.000000e+00, %45 ], [ %57, %51 ]
  %54 = getelementptr inbounds float, ptr %1, i64 %52
  %55 = load float, ptr %54, align 4
  %56 = fmul float %55, %55
  %57 = fadd float %53, %56
  %58 = add nsw i64 %52, 1
  %59 = trunc i64 %58 to i32
  %60 = icmp eq i32 %43, %59
  br i1 %60, label %47, label %51, !llvm.loop !307

61:                                               ; preds = %90, %49
  %62 = phi i64 [ 0, %49 ], [ %92, %90 ]
  %63 = phi float [ %48, %49 ], [ %91, %90 ]
  %64 = trunc i64 %62 to i32
  %65 = add i32 %50, %64
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds i32, ptr %3, i64 %66
  %68 = load i32, ptr %67, align 4
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds float, ptr %1, i64 %69
  %71 = load float, ptr %70, align 4
  %72 = fmul float %71, %71
  %73 = fcmp ult float %72, 2.500000e-01
  br i1 %73, label %80, label %74

74:                                               ; preds = %61
  %75 = tail call float @llvm.rint.f32(float %71)
  %76 = getelementptr inbounds float, ptr %2, i64 %69
  store float %75, ptr %76, align 4
  %77 = load float, ptr %70, align 4
  %78 = fmul float %77, %77
  %79 = fsub float %63, %78
  br label %90

80:                                               ; preds = %61
  %81 = fpext float %63 to double
  %82 = load double, ptr %26, align 8
  %83 = fcmp ogt double %82, %81
  br i1 %83, label %94, label %84

84:                                               ; preds = %80
  %85 = bitcast float %71 to i32
  %86 = and i32 %85, -2147483648
  %87 = or i32 %86, 1065353216
  %88 = getelementptr inbounds float, ptr %2, i64 %69
  store i32 %87, ptr %88, align 4
  %89 = fadd float %63, -1.000000e+00
  br label %90

90:                                               ; preds = %84, %74
  %91 = phi float [ %79, %74 ], [ %89, %84 ]
  %92 = add nuw nsw i64 %62, 1
  %93 = icmp eq i64 %92, %27
  br i1 %93, label %37, label %61, !llvm.loop !308

94:                                               ; preds = %80, %47
  %95 = phi i32 [ 0, %47 ], [ %64, %80 ]
  %96 = icmp slt i32 %95, %9
  br i1 %96, label %97, label %37

97:                                               ; preds = %94
  %98 = sub i32 %42, %12
  %99 = sext i32 %95 to i64
  br label %100

100:                                              ; preds = %100, %97
  %101 = phi i64 [ %99, %97 ], [ %109, %100 ]
  %102 = trunc i64 %101 to i32
  %103 = add i32 %98, %102
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds i32, ptr %3, i64 %104
  %106 = load i32, ptr %105, align 4
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds float, ptr %2, i64 %107
  store float 0.000000e+00, ptr %108, align 4
  %109 = add nsw i64 %101, 1
  %110 = icmp eq i64 %109, %28
  br i1 %110, label %37, label %100, !llvm.loop !309

111:                                              ; preds = %37, %20, %4
  %112 = phi i32 [ 0, %4 ], [ %21, %20 ], [ %43, %37 ]
  %113 = icmp slt i32 %112, %5
  br i1 %113, label %114, label %125

114:                                              ; preds = %111
  %115 = sext i32 %112 to i64
  %116 = sext i32 %5 to i64
  br label %117

117:                                              ; preds = %117, %114
  %118 = phi i64 [ %115, %114 ], [ %123, %117 ]
  %119 = getelementptr inbounds float, ptr %1, i64 %118
  %120 = load float, ptr %119, align 4
  %121 = tail call float @llvm.rint.f32(float %120)
  %122 = getelementptr inbounds float, ptr %2, i64 %118
  store float %121, ptr %122, align 4
  %123 = add nsw i64 %118, 1
  %124 = icmp eq i64 %123, %116
  br i1 %124, label %125, label %117, !llvm.loop !310

125:                                              ; preds = %117, %111
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @_vp_couple(i32 noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, ptr nocapture noundef readonly %4, ptr nocapture noundef readonly %5, ptr nocapture noundef readonly %6, ptr nocapture noundef readonly %7, ptr nocapture noundef %8, i32 noundef %9) #21 {
  %11 = getelementptr inbounds %struct.vorbis_info_mapping0, ptr %3, i64 0, i32 4
  %12 = load i32, ptr %11, align 4
  %13 = icmp sgt i32 %12, 0
  br i1 %13, label %14, label %236

14:                                               ; preds = %10
  %15 = load i32, ptr %2, align 8
  %16 = sext i32 %15 to i64
  %17 = sext i32 %0 to i64
  %18 = getelementptr inbounds %struct.vorbis_info_psy_global, ptr %1, i64 0, i32 8, i64 %17
  %19 = getelementptr inbounds %struct.vorbis_info_psy_global, ptr %1, i64 0, i32 9, i64 %17
  %20 = getelementptr inbounds %struct.vorbis_look_psy, ptr %2, i64 0, i32 1
  %21 = sext i32 %9 to i64
  br label %22

22:                                               ; preds = %231, %14
  %23 = phi i64 [ 0, %14 ], [ %232, %231 ]
  %24 = getelementptr inbounds %struct.vorbis_info_mapping0, ptr %3, i64 0, i32 5, i64 %23
  %25 = load i32, ptr %24, align 4
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i32, ptr %8, i64 %26
  %28 = load i32, ptr %27, align 4
  %29 = icmp eq i32 %28, 0
  %30 = getelementptr inbounds %struct.vorbis_info_mapping0, ptr %3, i64 0, i32 6, i64 %23
  %31 = load i32, ptr %30, align 4
  %32 = sext i32 %31 to i64
  br i1 %29, label %33, label %37

33:                                               ; preds = %22
  %34 = getelementptr inbounds i32, ptr %8, i64 %32
  %35 = load i32, ptr %34, align 4
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %231, label %37

37:                                               ; preds = %33, %22
  %38 = getelementptr inbounds ptr, ptr %4, i64 %26
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr inbounds %struct.vorbis_info_mapping0, ptr %3, i64 0, i32 6, i64 %23
  %41 = getelementptr inbounds ptr, ptr %4, i64 %32
  %42 = load ptr, ptr %41, align 8
  %43 = getelementptr inbounds float, ptr %39, i64 %16
  %44 = getelementptr inbounds float, ptr %42, i64 %16
  %45 = getelementptr inbounds ptr, ptr %7, i64 %26
  %46 = load ptr, ptr %45, align 8
  %47 = getelementptr inbounds ptr, ptr %7, i64 %32
  %48 = load ptr, ptr %47, align 8
  %49 = load i32, ptr %18, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds [9 x double], ptr @stereo_threshholds, i64 0, i64 %50
  %52 = load double, ptr %51, align 8
  %53 = fptrunc double %52 to float
  %54 = load i32, ptr %19, align 4
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds [9 x double], ptr @stereo_threshholds, i64 0, i64 %55
  %57 = load double, ptr %56, align 8
  %58 = fptrunc double %57 to float
  %59 = load ptr, ptr %20, align 8
  %60 = getelementptr inbounds %struct.vorbis_info_psy, ptr %59, i64 0, i32 19
  %61 = load i32, ptr %60, align 8
  %62 = icmp eq i32 %61, 0
  %63 = getelementptr inbounds %struct.vorbis_info_psy, ptr %59, i64 0, i32 21
  %64 = select i1 %62, ptr %2, ptr %63
  %65 = load i32, ptr %64, align 8
  %66 = load i32, ptr %59, align 8
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds %struct.vorbis_info_psy_global, ptr %1, i64 0, i32 7, i64 %67, i64 %17
  %69 = load i32, ptr %68, align 4
  store i32 1, ptr %27, align 4
  %70 = load i32, ptr %40, align 4
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds i32, ptr %8, i64 %71
  store i32 1, ptr %72, align 4
  %73 = load i32, ptr %2, align 8
  %74 = icmp sgt i32 %73, 0
  br i1 %74, label %75, label %231

75:                                               ; preds = %37
  %76 = icmp sgt i32 %65, 0
  %77 = getelementptr inbounds ptr, ptr %5, i64 %23
  %78 = icmp slt i32 %65, 1
  %79 = getelementptr inbounds ptr, ptr %6, i64 %23
  %80 = sext i32 %69 to i64
  %81 = sext i32 %65 to i64
  %82 = zext i32 %65 to i64
  %83 = zext i32 %65 to i64
  br label %84

84:                                               ; preds = %226, %75
  %85 = phi i64 [ 0, %75 ], [ %227, %226 ]
  br i1 %76, label %86, label %226

86:                                               ; preds = %185, %84
  %87 = phi i64 [ %187, %185 ], [ 0, %84 ]
  %88 = phi float [ %186, %185 ], [ 0.000000e+00, %84 ]
  %89 = add nsw i64 %87, %85
  %90 = icmp slt i64 %89, %21
  br i1 %90, label %91, label %182

91:                                               ; preds = %86
  %92 = icmp sge i64 %89, %80
  %93 = getelementptr inbounds float, ptr %39, i64 %89
  %94 = load float, ptr %93, align 4
  %95 = tail call float @llvm.fabs.f32(float %94)
  %96 = fcmp olt float %95, %58
  %97 = select i1 %92, i1 %96, i1 false
  br i1 %97, label %98, label %103

98:                                               ; preds = %91
  %99 = getelementptr inbounds float, ptr %42, i64 %89
  %100 = load float, ptr %99, align 4
  %101 = tail call float @llvm.fabs.f32(float %100)
  %102 = fcmp olt float %101, %58
  br i1 %102, label %110, label %103

103:                                              ; preds = %98, %91
  %104 = fcmp olt float %95, %53
  br i1 %104, label %105, label %141

105:                                              ; preds = %103
  %106 = getelementptr inbounds float, ptr %42, i64 %89
  %107 = load float, ptr %106, align 4
  %108 = tail call float @llvm.fabs.f32(float %107)
  %109 = fcmp olt float %108, %53
  br i1 %109, label %110, label %141

110:                                              ; preds = %105, %98
  %111 = load ptr, ptr %77, align 8
  %112 = getelementptr inbounds float, ptr %111, i64 %89
  %113 = load float, ptr %112, align 4
  %114 = getelementptr inbounds i32, ptr %46, i64 %89
  %115 = load i32, ptr %114, align 4
  %116 = getelementptr inbounds i32, ptr %48, i64 %89
  %117 = load i32, ptr %116, align 4
  %118 = getelementptr inbounds float, ptr %43, i64 %89
  %119 = getelementptr inbounds float, ptr %44, i64 %89
  %120 = sub nsw i32 %115, %117
  %121 = tail call i32 @llvm.abs.i32(i32 %120, i1 true)
  %122 = sub nsw i32 31, %121
  %123 = icmp ult i32 %121, 32
  %124 = select i1 %123, i32 %122, i32 0
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds [32 x float], ptr @hypot_lookup, i64 0, i64 %125
  %127 = load float, ptr %126, align 4
  %128 = fadd float %127, 1.000000e+00
  %129 = tail call i32 @llvm.smax.i32(i32 %115, i32 %117)
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds [256 x float], ptr @FLOOR1_fromdB_INV_LOOKUP, i64 0, i64 %130
  %132 = load float, ptr %131, align 4
  %133 = fmul float %128, %132
  %134 = fmul float %113, %133
  store float %134, ptr %118, align 4
  store float 0.000000e+00, ptr %119, align 4
  %135 = load float, ptr %118, align 4
  %136 = tail call float @llvm.rint.f32(float %135)
  %137 = fcmp oeq float %136, 0.000000e+00
  br i1 %137, label %138, label %185

138:                                              ; preds = %110
  %139 = fmul float %135, %135
  %140 = fadd float %88, %139
  br label %185

141:                                              ; preds = %105, %103
  %142 = getelementptr inbounds float, ptr %43, i64 %89
  %143 = getelementptr inbounds float, ptr %44, i64 %89
  %144 = load float, ptr %142, align 4
  %145 = tail call float @llvm.fabs.f32(float %144)
  %146 = load float, ptr %143, align 4
  %147 = tail call float @llvm.fabs.f32(float %146)
  %148 = fcmp ogt float %145, %147
  %149 = zext i1 %148 to i32
  %150 = fcmp olt float %145, %147
  %151 = sext i1 %150 to i32
  %152 = add nsw i32 %151, %149
  switch i32 %152, label %165 [
    i32 0, label %153
    i32 1, label %158
  ]

153:                                              ; preds = %141
  %154 = getelementptr inbounds float, ptr %42, i64 %89
  %155 = load float, ptr %154, align 4
  %156 = tail call float @llvm.fabs.f32(float %155)
  %157 = fcmp ogt float %95, %156
  br i1 %157, label %158, label %165

158:                                              ; preds = %153, %141
  %159 = fcmp ogt float %144, 0.000000e+00
  %160 = fsub float %144, %146
  %161 = fsub float %146, %144
  %162 = select i1 %159, float %160, float %161
  store float %162, ptr %143, align 4
  %163 = load float, ptr %142, align 4
  %164 = tail call float @llvm.fabs.f32(float %163)
  br label %171

165:                                              ; preds = %153, %141
  %166 = fcmp ogt float %146, 0.000000e+00
  %167 = fsub float %144, %146
  %168 = fsub float %146, %144
  %169 = select i1 %166, float %167, float %168
  store float %169, ptr %143, align 4
  store float %146, ptr %142, align 4
  %170 = load float, ptr %143, align 4
  br label %171

171:                                              ; preds = %165, %158
  %172 = phi float [ %147, %165 ], [ %164, %158 ]
  %173 = phi float [ %170, %165 ], [ %162, %158 ]
  %174 = fpext float %173 to double
  %175 = fpext float %172 to double
  %176 = fmul double %175, 0x3FFFFF9720000000
  %177 = fcmp olt double %176, %174
  br i1 %177, label %178, label %185

178:                                              ; preds = %171
  %179 = fmul float %172, -2.000000e+00
  store float %179, ptr %143, align 4
  %180 = load float, ptr %142, align 4
  %181 = fneg float %180
  store float %181, ptr %142, align 4
  br label %185

182:                                              ; preds = %86
  %183 = getelementptr inbounds float, ptr %43, i64 %89
  store float 0.000000e+00, ptr %183, align 4
  %184 = getelementptr inbounds float, ptr %44, i64 %89
  store float 0.000000e+00, ptr %184, align 4
  br label %185

185:                                              ; preds = %182, %178, %171, %138, %110
  %186 = phi float [ %140, %138 ], [ %88, %110 ], [ %88, %182 ], [ %88, %171 ], [ %88, %178 ]
  %187 = add nuw nsw i64 %87, 1
  %188 = icmp eq i64 %187, %82
  br i1 %188, label %189, label %86, !llvm.loop !311

189:                                              ; preds = %185
  %.lcssa = phi float [ %186, %185 ]
  %190 = load ptr, ptr %20, align 8
  %191 = getelementptr inbounds %struct.vorbis_info_psy, ptr %190, i64 0, i32 19
  %192 = load i32, ptr %191, align 8
  %193 = icmp eq i32 %192, 0
  %194 = select i1 %193, i1 true, i1 %78
  br i1 %194, label %226, label %195

195:                                              ; preds = %222, %189
  %196 = phi i64 [ %224, %222 ], [ 0, %189 ]
  %197 = phi float [ %223, %222 ], [ %.lcssa, %189 ]
  %198 = fpext float %197 to double
  %199 = load ptr, ptr %20, align 8
  %200 = getelementptr inbounds %struct.vorbis_info_psy, ptr %199, i64 0, i32 22
  %201 = load double, ptr %200, align 8
  %202 = fcmp ugt double %201, %198
  br i1 %202, label %226, label %203

203:                                              ; preds = %195
  %204 = load ptr, ptr %79, align 8
  %205 = add nsw i64 %196, %85
  %206 = getelementptr inbounds i32, ptr %204, i64 %205
  %207 = load i32, ptr %206, align 4
  %208 = icmp sge i32 %207, %9
  %209 = icmp slt i32 %207, %69
  %210 = select i1 %208, i1 true, i1 %209
  br i1 %210, label %222, label %211

211:                                              ; preds = %203
  %212 = sext i32 %207 to i64
  %213 = getelementptr inbounds float, ptr %43, i64 %212
  %214 = load float, ptr %213, align 4
  %215 = tail call float @llvm.rint.f32(float %214)
  %216 = fcmp oeq float %215, 0.000000e+00
  br i1 %216, label %217, label %222

217:                                              ; preds = %211
  %218 = bitcast float %214 to i32
  %219 = and i32 %218, -2147483648
  %220 = or i32 %219, 1065353216
  store i32 %220, ptr %213, align 4
  %221 = fadd float %197, -1.000000e+00
  br label %222

222:                                              ; preds = %217, %211, %203
  %223 = phi float [ %221, %217 ], [ %197, %211 ], [ %197, %203 ]
  %224 = add nuw nsw i64 %196, 1
  %225 = icmp eq i64 %224, %83
  br i1 %225, label %226, label %195, !llvm.loop !312

226:                                              ; preds = %222, %195, %189, %84
  %227 = add nsw i64 %85, %81
  %228 = load i32, ptr %2, align 8
  %229 = sext i32 %228 to i64
  %230 = icmp slt i64 %227, %229
  br i1 %230, label %84, label %231, !llvm.loop !313

231:                                              ; preds = %226, %37, %33
  %232 = add nuw nsw i64 %23, 1
  %233 = load i32, ptr %11, align 4
  %234 = sext i32 %233 to i64
  %235 = icmp slt i64 %232, %234
  br i1 %235, label %22, label %236, !llvm.loop !314

236:                                              ; preds = %231, %10
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(read, inaccessiblemem: none) uwtable
define internal i32 @apsort(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #41 {
  %3 = load ptr, ptr %0, align 8
  %4 = load float, ptr %3, align 4
  %5 = tail call float @llvm.fabs.f32(float %4)
  %6 = load ptr, ptr %1, align 8
  %7 = load float, ptr %6, align 4
  %8 = tail call float @llvm.fabs.f32(float %7)
  %9 = fcmp olt float %5, %8
  %10 = zext i1 %9 to i32
  %11 = fcmp ogt float %5, %8
  %12 = sext i1 %11 to i32
  %13 = add nsw i32 %12, %10
  ret i32 %13
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.sqrt.f32(float) #27

declare float @sqrtf(float) local_unnamed_addr

; Function Attrs: nofree nosync nounwind optsize memory(argmem: readwrite) uwtable
define internal fastcc i32 @accumulate_fit(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 noundef %2, i32 noundef %3, ptr nocapture noundef writeonly %4, i32 noundef %5, ptr nocapture noundef readonly %6) unnamed_addr #40 {
  %8 = getelementptr inbounds i8, ptr %4, i64 16
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(64) %8, i8 0, i64 48, i1 false)
  %9 = sext i32 %2 to i64
  store i64 %9, ptr %4, align 8
  %10 = sext i32 %3 to i64
  %11 = getelementptr inbounds %struct.lsfit_acc, ptr %4, i64 0, i32 1
  store i64 %10, ptr %11, align 8
  %12 = icmp slt i32 %3, %5
  %13 = add nsw i32 %5, -1
  %14 = select i1 %12, i32 %3, i32 %13
  %15 = icmp slt i32 %14, %2
  br i1 %15, label %81, label %16

16:                                               ; preds = %7
  %17 = sext i32 %14 to i64
  %18 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %6, i64 0, i32 12
  br label %19

19:                                               ; preds = %66, %16
  %20 = phi i64 [ %9, %16 ], [ %79, %66 ]
  %21 = phi i64 [ 0, %16 ], [ %78, %66 ]
  %22 = phi i64 [ 0, %16 ], [ %77, %66 ]
  %23 = phi i64 [ 0, %16 ], [ %76, %66 ]
  %24 = phi i64 [ 0, %16 ], [ %75, %66 ]
  %25 = phi i64 [ 0, %16 ], [ %74, %66 ]
  %26 = phi i64 [ 0, %16 ], [ %73, %66 ]
  %27 = phi i64 [ 0, %16 ], [ %72, %66 ]
  %28 = phi i64 [ 0, %16 ], [ %71, %66 ]
  %29 = phi i64 [ 0, %16 ], [ %70, %66 ]
  %30 = phi i64 [ 0, %16 ], [ %69, %66 ]
  %31 = phi i64 [ 0, %16 ], [ %68, %66 ]
  %32 = phi i64 [ 0, %16 ], [ %67, %66 ]
  %33 = getelementptr inbounds float, ptr %0, i64 %20
  %34 = load float, ptr %33, align 4
  %35 = fmul float %34, 0x401D41D420000000
  %36 = fadd float %35, 1.023500e+03
  %37 = fptosi float %36 to i32
  %38 = tail call i32 @llvm.smax.i32(i32 %37, i32 0)
  %39 = tail call i32 @llvm.smin.i32(i32 %38, i32 1023)
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %66, label %41

41:                                               ; preds = %19
  %42 = getelementptr inbounds float, ptr %1, i64 %20
  %43 = load float, ptr %42, align 4
  %44 = load float, ptr %18, align 4
  %45 = fadd float %43, %44
  %46 = fcmp ult float %45, %34
  %47 = zext i32 %39 to i64
  %48 = mul nsw i64 %20, %20
  %49 = mul nuw nsw i32 %39, %39
  %50 = zext i32 %49 to i64
  %51 = mul nsw i64 %20, %47
  br i1 %46, label %59, label %52

52:                                               ; preds = %41
  %53 = add nsw i64 %20, %32
  %54 = add nsw i64 %31, %47
  %55 = add nsw i64 %48, %30
  %56 = add nsw i64 %29, %50
  %57 = add nsw i64 %51, %28
  %58 = add nsw i64 %27, 1
  br label %66

59:                                               ; preds = %41
  %60 = add nsw i64 %20, %26
  %61 = add nsw i64 %25, %47
  %62 = add nsw i64 %48, %24
  %63 = add nsw i64 %23, %50
  %64 = add nsw i64 %51, %22
  %65 = add nsw i64 %21, 1
  br label %66

66:                                               ; preds = %59, %52, %19
  %67 = phi i64 [ %53, %52 ], [ %32, %59 ], [ %32, %19 ]
  %68 = phi i64 [ %54, %52 ], [ %31, %59 ], [ %31, %19 ]
  %69 = phi i64 [ %55, %52 ], [ %30, %59 ], [ %30, %19 ]
  %70 = phi i64 [ %56, %52 ], [ %29, %59 ], [ %29, %19 ]
  %71 = phi i64 [ %57, %52 ], [ %28, %59 ], [ %28, %19 ]
  %72 = phi i64 [ %58, %52 ], [ %27, %59 ], [ %27, %19 ]
  %73 = phi i64 [ %26, %52 ], [ %60, %59 ], [ %26, %19 ]
  %74 = phi i64 [ %25, %52 ], [ %61, %59 ], [ %25, %19 ]
  %75 = phi i64 [ %24, %52 ], [ %62, %59 ], [ %24, %19 ]
  %76 = phi i64 [ %23, %52 ], [ %63, %59 ], [ %23, %19 ]
  %77 = phi i64 [ %22, %52 ], [ %64, %59 ], [ %22, %19 ]
  %78 = phi i64 [ %21, %52 ], [ %65, %59 ], [ %21, %19 ]
  %79 = add nsw i64 %20, 1
  %80 = icmp eq i64 %20, %17
  br i1 %80, label %81, label %19, !llvm.loop !315

81:                                               ; preds = %66, %7
  %82 = phi i64 [ 0, %7 ], [ %67, %66 ]
  %83 = phi i64 [ 0, %7 ], [ %68, %66 ]
  %84 = phi i64 [ 0, %7 ], [ %69, %66 ]
  %85 = phi i64 [ 0, %7 ], [ %70, %66 ]
  %86 = phi i64 [ 0, %7 ], [ %71, %66 ]
  %87 = phi i64 [ 0, %7 ], [ %72, %66 ]
  %88 = phi i64 [ 0, %7 ], [ %73, %66 ]
  %89 = phi i64 [ 0, %7 ], [ %74, %66 ]
  %90 = phi i64 [ 0, %7 ], [ %75, %66 ]
  %91 = phi i64 [ 0, %7 ], [ %76, %66 ]
  %92 = phi i64 [ 0, %7 ], [ %77, %66 ]
  %93 = phi i64 [ 0, %7 ], [ %78, %66 ]
  %94 = add nsw i64 %88, %82
  %95 = add nsw i64 %89, %83
  %96 = add nsw i64 %90, %84
  %97 = add nsw i64 %91, %85
  %98 = add nsw i64 %92, %86
  %99 = add nsw i64 %93, %87
  %100 = sitofp i64 %99 to float
  %101 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %6, i64 0, i32 11
  %102 = load float, ptr %101, align 4
  %103 = fmul float %102, %100
  %104 = add nsw i64 %87, 1
  %105 = sitofp i64 %104 to float
  %106 = fdiv float %103, %105
  %107 = fptosi float %106 to i32
  %108 = sext i32 %107 to i64
  %109 = mul nsw i64 %82, %108
  %110 = add nsw i64 %94, %109
  %111 = getelementptr inbounds %struct.lsfit_acc, ptr %4, i64 0, i32 2
  store i64 %110, ptr %111, align 8
  %112 = mul nsw i64 %83, %108
  %113 = add nsw i64 %95, %112
  %114 = getelementptr inbounds %struct.lsfit_acc, ptr %4, i64 0, i32 3
  store i64 %113, ptr %114, align 8
  %115 = mul nsw i64 %84, %108
  %116 = add nsw i64 %96, %115
  %117 = getelementptr inbounds %struct.lsfit_acc, ptr %4, i64 0, i32 4
  store i64 %116, ptr %117, align 8
  %118 = mul nsw i64 %85, %108
  %119 = add nsw i64 %97, %118
  %120 = getelementptr inbounds %struct.lsfit_acc, ptr %4, i64 0, i32 5
  store i64 %119, ptr %120, align 8
  %121 = mul nsw i64 %86, %108
  %122 = add nsw i64 %98, %121
  %123 = getelementptr inbounds %struct.lsfit_acc, ptr %4, i64 0, i32 6
  store i64 %122, ptr %123, align 8
  %124 = mul nsw i64 %87, %108
  %125 = add nsw i64 %124, %99
  %126 = getelementptr inbounds %struct.lsfit_acc, ptr %4, i64 0, i32 7
  store i64 %125, ptr %126, align 8
  %127 = trunc i64 %87 to i32
  ret i32 %127
}

; Function Attrs: nofree nosync nounwind optsize memory(argmem: readwrite) uwtable
define internal fastcc void @fit_line(ptr nocapture noundef readonly %0, i32 noundef %1, ptr nocapture noundef %2, ptr nocapture noundef %3) unnamed_addr #40 {
  %5 = load i64, ptr %0, align 8
  %6 = add nsw i32 %1, -1
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds %struct.lsfit_acc, ptr %0, i64 %7, i32 1
  %9 = load i64, ptr %8, align 8
  %10 = sext i32 %1 to i64
  %11 = icmp sgt i32 %1, 0
  br i1 %11, label %12, label %36

12:                                               ; preds = %12, %4
  %13 = phi i64 [ %21, %12 ], [ 0, %4 ]
  %14 = phi i64 [ %24, %12 ], [ 0, %4 ]
  %15 = phi i64 [ %27, %12 ], [ 0, %4 ]
  %16 = phi i64 [ %30, %12 ], [ 0, %4 ]
  %17 = phi i64 [ %33, %12 ], [ 0, %4 ]
  %18 = phi i64 [ %34, %12 ], [ 0, %4 ]
  %19 = getelementptr inbounds %struct.lsfit_acc, ptr %0, i64 %18, i32 2
  %20 = load i64, ptr %19, align 8
  %21 = add nsw i64 %20, %13
  %22 = getelementptr inbounds %struct.lsfit_acc, ptr %0, i64 %18, i32 3
  %23 = load i64, ptr %22, align 8
  %24 = add nsw i64 %23, %14
  %25 = getelementptr inbounds %struct.lsfit_acc, ptr %0, i64 %18, i32 4
  %26 = load i64, ptr %25, align 8
  %27 = add nsw i64 %26, %15
  %28 = getelementptr inbounds %struct.lsfit_acc, ptr %0, i64 %18, i32 6
  %29 = load i64, ptr %28, align 8
  %30 = add nsw i64 %29, %16
  %31 = getelementptr inbounds %struct.lsfit_acc, ptr %0, i64 %18, i32 7
  %32 = load i64, ptr %31, align 8
  %33 = add nsw i64 %32, %17
  %34 = add nuw nsw i64 %18, 1
  %35 = icmp eq i64 %34, %10
  br i1 %35, label %36, label %12, !llvm.loop !316

36:                                               ; preds = %12, %4
  %37 = phi i64 [ 0, %4 ], [ %33, %12 ]
  %38 = phi i64 [ 0, %4 ], [ %30, %12 ]
  %39 = phi i64 [ 0, %4 ], [ %27, %12 ]
  %40 = phi i64 [ 0, %4 ], [ %24, %12 ]
  %41 = phi i64 [ 0, %4 ], [ %21, %12 ]
  %42 = load i32, ptr %2, align 4
  %43 = icmp sgt i32 %42, -1
  br i1 %43, label %44, label %53

44:                                               ; preds = %36
  %45 = add nsw i64 %41, %5
  %46 = zext i32 %42 to i64
  %47 = add nsw i64 %40, %46
  %48 = mul nsw i64 %5, %5
  %49 = add nsw i64 %39, %48
  %50 = mul nsw i64 %5, %46
  %51 = add nsw i64 %50, %38
  %52 = add nsw i64 %37, 1
  br label %53

53:                                               ; preds = %44, %36
  %54 = phi i64 [ %52, %44 ], [ %37, %36 ]
  %55 = phi i64 [ %51, %44 ], [ %38, %36 ]
  %56 = phi i64 [ %49, %44 ], [ %39, %36 ]
  %57 = phi i64 [ %47, %44 ], [ %40, %36 ]
  %58 = phi i64 [ %45, %44 ], [ %41, %36 ]
  %59 = load i32, ptr %3, align 4
  %60 = icmp sgt i32 %59, -1
  br i1 %60, label %61, label %70

61:                                               ; preds = %53
  %62 = add nsw i64 %58, %9
  %63 = zext i32 %59 to i64
  %64 = add nsw i64 %57, %63
  %65 = mul nsw i64 %9, %9
  %66 = add nsw i64 %56, %65
  %67 = mul nsw i64 %9, %63
  %68 = add nsw i64 %67, %55
  %69 = add nsw i64 %54, 1
  br label %70

70:                                               ; preds = %61, %53
  %71 = phi i64 [ %69, %61 ], [ %54, %53 ]
  %72 = phi i64 [ %68, %61 ], [ %55, %53 ]
  %73 = phi i64 [ %66, %61 ], [ %56, %53 ]
  %74 = phi i64 [ %64, %61 ], [ %57, %53 ]
  %75 = phi i64 [ %62, %61 ], [ %58, %53 ]
  %76 = icmp eq i64 %71, 0
  br i1 %76, label %124, label %77

77:                                               ; preds = %70
  %78 = sitofp i64 %75 to double
  %79 = sitofp i64 %74 to double
  %80 = sitofp i64 %73 to double
  %81 = sitofp i64 %72 to double
  %82 = sitofp i64 %71 to double
  %83 = fmul double %82, %80
  %84 = fmul double %78, %78
  %85 = fsub double %83, %84
  %86 = fdiv double 1.000000e+00, %85
  %87 = fmul double %80, %79
  %88 = fmul double %81, %78
  %89 = fsub double %87, %88
  %90 = fmul double %89, %86
  %91 = fmul double %82, %81
  %92 = fmul double %79, %78
  %93 = fsub double %91, %92
  %94 = fmul double %93, %86
  %95 = sitofp i64 %5 to double
  %96 = fmul double %94, %95
  %97 = fadd double %90, %96
  %98 = tail call double @llvm.rint.f64(double %97)
  %99 = fptosi double %98 to i32
  store i32 %99, ptr %2, align 4
  %100 = sitofp i64 %9 to double
  %101 = fmul double %94, %100
  %102 = fadd double %90, %101
  %103 = tail call double @llvm.rint.f64(double %102)
  %104 = fptosi double %103 to i32
  store i32 %104, ptr %3, align 4
  %105 = load i32, ptr %2, align 4
  %106 = icmp sgt i32 %105, 1023
  br i1 %106, label %107, label %109

107:                                              ; preds = %77
  store i32 1023, ptr %2, align 4
  %108 = load i32, ptr %3, align 4
  br label %109

109:                                              ; preds = %107, %77
  %110 = phi i32 [ 1023, %107 ], [ %105, %77 ]
  %111 = phi i32 [ %108, %107 ], [ %104, %77 ]
  %112 = icmp sgt i32 %111, 1023
  br i1 %112, label %113, label %115

113:                                              ; preds = %109
  store i32 1023, ptr %3, align 4
  %114 = load i32, ptr %2, align 4
  br label %115

115:                                              ; preds = %113, %109
  %116 = phi i32 [ 1023, %113 ], [ %111, %109 ]
  %117 = phi i32 [ %114, %113 ], [ %110, %109 ]
  %118 = icmp slt i32 %117, 0
  br i1 %118, label %119, label %121

119:                                              ; preds = %115
  store i32 0, ptr %2, align 4
  %120 = load i32, ptr %3, align 4
  br label %121

121:                                              ; preds = %119, %115
  %122 = phi i32 [ %120, %119 ], [ %116, %115 ]
  %123 = icmp slt i32 %122, 0
  br i1 %123, label %125, label %126

124:                                              ; preds = %70
  store i32 0, ptr %2, align 4
  br label %125

125:                                              ; preds = %124, %121
  store i32 0, ptr %3, align 4
  br label %126

126:                                              ; preds = %125, %121
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #27

; Function Attrs: nofree nosync nounwind optsize memory(argmem: readwrite) uwtable
define internal fastcc void @seed_chase(ptr nocapture noundef %0, i32 noundef %1, i64 noundef %2) unnamed_addr #40 {
  %4 = shl nsw i64 %2, 3
  %5 = alloca i8, i64 %4, align 16
  %6 = shl nsw i64 %2, 2
  %7 = alloca i8, i64 %6, align 16
  %8 = icmp sgt i64 %2, 0
  br i1 %8, label %9, label %95

9:                                                ; preds = %3
  %10 = sext i32 %1 to i64
  br label %16

11:                                               ; preds = %54
  %.lcssa2 = phi i64 [ %55, %54 ]
  %12 = icmp sgt i64 %.lcssa2, -1
  br i1 %12, label %13, label %95

13:                                               ; preds = %11
  %14 = sext i32 %1 to i64
  %15 = add nsw i64 %14, 1
  br label %61

16:                                               ; preds = %54, %9
  %17 = phi i64 [ 0, %9 ], [ %59, %54 ]
  %18 = phi i64 [ 0, %9 ], [ %58, %54 ]
  %19 = icmp slt i64 %18, 2
  br i1 %19, label %23, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds float, ptr %0, i64 %17
  %22 = load float, ptr %21, align 4
  br label %27

23:                                               ; preds = %16
  %24 = getelementptr inbounds i64, ptr %5, i64 %18
  store i64 %17, ptr %24, align 8
  %25 = getelementptr inbounds float, ptr %0, i64 %17
  %26 = load float, ptr %25, align 4
  br label %54

27:                                               ; preds = %47, %20
  %28 = phi i64 [ %29, %47 ], [ %18, %20 ]
  %29 = add nsw i64 %28, -1
  %30 = getelementptr inbounds float, ptr %7, i64 %29
  %31 = load float, ptr %30, align 4
  %32 = fcmp olt float %22, %31
  br i1 %32, label %33, label %35

33:                                               ; preds = %27
  %.lcssa = phi i64 [ %28, %27 ]
  %34 = getelementptr inbounds i64, ptr %5, i64 %.lcssa
  store i64 %17, ptr %34, align 8
  br label %54

35:                                               ; preds = %27
  %36 = getelementptr inbounds i64, ptr %5, i64 %29
  %37 = load i64, ptr %36, align 8
  %38 = add nsw i64 %37, %10
  %39 = icmp slt i64 %17, %38
  %40 = icmp ugt i64 %28, 1
  %41 = and i1 %40, %39
  br i1 %41, label %42, label %52

42:                                               ; preds = %35
  %43 = add nsw i64 %28, -2
  %44 = getelementptr inbounds float, ptr %7, i64 %43
  %45 = load float, ptr %44, align 4
  %46 = fcmp ugt float %31, %45
  br i1 %46, label %52, label %47

47:                                               ; preds = %42
  %48 = getelementptr inbounds i64, ptr %5, i64 %43
  %49 = load i64, ptr %48, align 8
  %50 = add nsw i64 %49, %10
  %51 = icmp slt i64 %17, %50
  br i1 %51, label %27, label %52

52:                                               ; preds = %47, %42, %35
  %.lcssa1 = phi i64 [ %28, %47 ], [ %28, %42 ], [ %28, %35 ]
  %53 = getelementptr inbounds i64, ptr %5, i64 %.lcssa1
  store i64 %17, ptr %53, align 8
  br label %54

54:                                               ; preds = %52, %33, %23
  %55 = phi i64 [ %18, %23 ], [ %.lcssa1, %52 ], [ %.lcssa, %33 ]
  %56 = phi float [ %26, %23 ], [ %22, %52 ], [ %22, %33 ]
  %57 = getelementptr inbounds float, ptr %7, i64 %55
  store float %56, ptr %57, align 4
  %58 = add nsw i64 %55, 1
  %59 = add nuw nsw i64 %17, 1
  %60 = icmp eq i64 %59, %2
  br i1 %60, label %11, label %16, !llvm.loop !317

61:                                               ; preds = %91, %13
  %62 = phi i64 [ 0, %13 ], [ %93, %91 ]
  %63 = phi i64 [ 0, %13 ], [ %92, %91 ]
  %64 = icmp slt i64 %62, %.lcssa2
  br i1 %64, label %65, label %75

65:                                               ; preds = %61
  %66 = add nuw nsw i64 %62, 1
  %67 = getelementptr inbounds float, ptr %7, i64 %66
  %68 = load float, ptr %67, align 4
  %69 = getelementptr inbounds float, ptr %7, i64 %62
  %70 = load float, ptr %69, align 4
  %71 = fcmp ogt float %68, %70
  br i1 %71, label %72, label %75

72:                                               ; preds = %65
  %73 = getelementptr inbounds i64, ptr %5, i64 %66
  %74 = load i64, ptr %73, align 8
  br label %79

75:                                               ; preds = %65, %61
  %76 = getelementptr inbounds i64, ptr %5, i64 %62
  %77 = load i64, ptr %76, align 8
  %78 = add i64 %15, %77
  br label %79

79:                                               ; preds = %75, %72
  %80 = phi i64 [ %74, %72 ], [ %78, %75 ]
  %81 = tail call i64 @llvm.smin.i64(i64 %80, i64 %2)
  %82 = icmp slt i64 %63, %81
  br i1 %82, label %83, label %91

83:                                               ; preds = %79
  %84 = getelementptr inbounds float, ptr %7, i64 %62
  %85 = load float, ptr %84, align 4
  br label %86

86:                                               ; preds = %86, %83
  %87 = phi i64 [ %63, %83 ], [ %89, %86 ]
  %88 = getelementptr inbounds float, ptr %0, i64 %87
  store float %85, ptr %88, align 4
  %89 = add nsw i64 %87, 1
  %90 = icmp eq i64 %89, %81
  br i1 %90, label %91, label %86, !llvm.loop !318

91:                                               ; preds = %86, %79
  %92 = phi i64 [ %63, %79 ], [ %81, %86 ]
  %93 = add nuw nsw i64 %62, 1
  %94 = icmp eq i64 %62, %.lcssa2
  br i1 %94, label %95, label %61, !llvm.loop !319

95:                                               ; preds = %91, %11, %3
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(argmem: readwrite) uwtable
define internal fastcc void @bark_noise_hybridmp(i32 noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr nocapture noundef %3, float noundef %4, i32 noundef %5) unnamed_addr #42 {
  %7 = sext i32 %0 to i64
  %8 = shl nsw i64 %7, 2
  %9 = alloca i8, i64 %8, align 16
  %10 = alloca i8, i64 %8, align 16
  %11 = alloca i8, i64 %8, align 16
  %12 = alloca i8, i64 %8, align 16
  %13 = alloca i8, i64 %8, align 16
  %14 = load float, ptr %2, align 4
  %15 = fadd float %14, %4
  %16 = fcmp olt float %15, 1.000000e+00
  %17 = select i1 %16, float 1.000000e+00, float %15
  %18 = fmul float %17, %17
  %19 = fmul float %18, 5.000000e-01
  %20 = fadd float %19, 0.000000e+00
  %21 = fmul float %17, %19
  %22 = fadd float %21, 0.000000e+00
  store float %20, ptr %9, align 16
  store float %20, ptr %10, align 16
  store float 0.000000e+00, ptr %11, align 16
  store float %22, ptr %12, align 16
  store float 0.000000e+00, ptr %13, align 16
  %23 = icmp sgt i32 %0, 1
  br i1 %23, label %24, label %26

24:                                               ; preds = %6
  %25 = zext i32 %0 to i64
  br label %30

26:                                               ; preds = %30, %6
  %27 = load i64, ptr %1, align 8
  %28 = and i64 %27, 140737488355328
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %69, label %80

30:                                               ; preds = %30, %24
  %31 = phi i64 [ 1, %24 ], [ %61, %30 ]
  %32 = phi float [ 1.000000e+00, %24 ], [ %62, %30 ]
  %33 = phi float [ %22, %24 ], [ %47, %30 ]
  %34 = phi float [ %20, %24 ], [ %45, %30 ]
  %35 = phi float [ %20, %24 ], [ %43, %30 ]
  %36 = phi <2 x float> [ zeroinitializer, %24 ], [ %53, %30 ]
  %37 = getelementptr inbounds float, ptr %2, i64 %31
  %38 = load float, ptr %37, align 4
  %39 = fadd float %38, %4
  %40 = fcmp olt float %39, 1.000000e+00
  %41 = select i1 %40, float 1.000000e+00, float %39
  %42 = fmul float %41, %41
  %43 = fadd float %35, %42
  %44 = fmul float %32, %42
  %45 = fadd float %34, %44
  %46 = fmul float %41, %42
  %47 = fadd float %33, %46
  %48 = insertelement <2 x float> poison, float %41, i64 0
  %49 = insertelement <2 x float> %48, float %32, i64 1
  %50 = insertelement <2 x float> poison, float %44, i64 0
  %51 = shufflevector <2 x float> %50, <2 x float> poison, <2 x i32> zeroinitializer
  %52 = fmul <2 x float> %49, %51
  %53 = fadd <2 x float> %36, %52
  %54 = getelementptr inbounds float, ptr %9, i64 %31
  store float %43, ptr %54, align 4
  %55 = getelementptr inbounds float, ptr %10, i64 %31
  store float %45, ptr %55, align 4
  %56 = getelementptr inbounds float, ptr %11, i64 %31
  %57 = extractelement <2 x float> %53, i64 1
  store float %57, ptr %56, align 4
  %58 = getelementptr inbounds float, ptr %12, i64 %31
  store float %47, ptr %58, align 4
  %59 = getelementptr inbounds float, ptr %13, i64 %31
  %60 = extractelement <2 x float> %53, i64 0
  store float %60, ptr %59, align 4
  %61 = add nuw nsw i64 %31, 1
  %62 = fadd float %32, 1.000000e+00
  %63 = icmp eq i64 %61, %25
  br i1 %63, label %26, label %30, !llvm.loop !320

64:                                               ; preds = %80
  %.lcssa11 = phi float [ %115, %80 ]
  %.lcssa10 = phi <2 x float> [ %126, %80 ]
  %.lcssa9 = phi i64 [ %136, %80 ]
  %.lcssa8 = phi float [ %137, %80 ]
  %65 = trunc i64 %.lcssa9 to i32
  %66 = and i64 %.lcssa9, 4294967295
  %67 = getelementptr inbounds i64, ptr %1, i64 %66
  %68 = load i64, ptr %67, align 8
  br label %69

69:                                               ; preds = %64, %26
  %70 = phi i64 [ %68, %64 ], [ %27, %26 ]
  %71 = phi i32 [ %65, %64 ], [ 0, %26 ]
  %72 = phi float [ %.lcssa11, %64 ], [ undef, %26 ]
  %73 = phi float [ %.lcssa8, %64 ], [ 0.000000e+00, %26 ]
  %74 = phi <2 x float> [ %.lcssa10, %64 ], [ undef, %26 ]
  %75 = trunc i64 %70 to i32
  %76 = and i32 %75, 65535
  %77 = icmp slt i32 %76, %0
  br i1 %77, label %78, label %144

78:                                               ; preds = %69
  %79 = zext i32 %71 to i64
  br label %154

80:                                               ; preds = %80, %26
  %81 = phi i64 [ %136, %80 ], [ 0, %26 ]
  %82 = phi i64 [ %139, %80 ], [ %27, %26 ]
  %83 = phi float [ %137, %80 ], [ 0.000000e+00, %26 ]
  %84 = lshr i64 %82, 16
  %85 = and i64 %82, 65535
  %86 = getelementptr inbounds float, ptr %9, i64 %85
  %87 = load float, ptr %86, align 4
  %88 = mul i64 %84, -4294967296
  %89 = ashr exact i64 %88, 32
  %90 = getelementptr inbounds float, ptr %9, i64 %89
  %91 = load float, ptr %90, align 4
  %92 = fadd float %87, %91
  %93 = getelementptr inbounds float, ptr %10, i64 %85
  %94 = load float, ptr %93, align 4
  %95 = getelementptr inbounds float, ptr %10, i64 %89
  %96 = load float, ptr %95, align 4
  %97 = fsub float %94, %96
  %98 = getelementptr inbounds float, ptr %11, i64 %85
  %99 = load float, ptr %98, align 4
  %100 = getelementptr inbounds float, ptr %11, i64 %89
  %101 = load float, ptr %100, align 4
  %102 = fadd float %99, %101
  %103 = getelementptr inbounds float, ptr %12, i64 %85
  %104 = load float, ptr %103, align 4
  %105 = getelementptr inbounds float, ptr %12, i64 %89
  %106 = load float, ptr %105, align 4
  %107 = fadd float %104, %106
  %108 = getelementptr inbounds float, ptr %13, i64 %85
  %109 = load float, ptr %108, align 4
  %110 = getelementptr inbounds float, ptr %13, i64 %89
  %111 = load float, ptr %110, align 4
  %112 = fsub float %109, %111
  %113 = fmul float %102, %107
  %114 = fmul float %97, %112
  %115 = fsub float %113, %114
  %116 = insertelement <2 x float> poison, float %92, i64 0
  %117 = shufflevector <2 x float> %116, <2 x float> poison, <2 x i32> zeroinitializer
  %118 = insertelement <2 x float> poison, float %112, i64 0
  %119 = insertelement <2 x float> %118, float %102, i64 1
  %120 = fmul <2 x float> %117, %119
  %121 = insertelement <2 x float> poison, float %97, i64 0
  %122 = shufflevector <2 x float> %121, <2 x float> poison, <2 x i32> zeroinitializer
  %123 = insertelement <2 x float> poison, float %107, i64 0
  %124 = insertelement <2 x float> %123, float %97, i64 1
  %125 = fmul <2 x float> %122, %124
  %126 = fsub <2 x float> %120, %125
  %127 = extractelement <2 x float> %126, i64 0
  %128 = fmul float %83, %127
  %129 = fadd float %115, %128
  %130 = extractelement <2 x float> %126, i64 1
  %131 = fdiv float %129, %130
  %132 = fcmp olt float %131, 0.000000e+00
  %133 = select i1 %132, float 0.000000e+00, float %131
  %134 = fsub float %133, %4
  %135 = getelementptr inbounds float, ptr %3, i64 %81
  store float %134, ptr %135, align 4
  %136 = add nuw nsw i64 %81, 1
  %137 = fadd float %83, 1.000000e+00
  %138 = getelementptr inbounds i64, ptr %1, i64 %136
  %139 = load i64, ptr %138, align 8
  %140 = and i64 %139, 140737488355328
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %64, label %80

142:                                              ; preds = %154
  %.lcssa7 = phi float [ %196, %154 ]
  %.lcssa6 = phi <2 x float> [ %202, %154 ]
  %.lcssa5 = phi i64 [ %212, %154 ]
  %.lcssa4 = phi float [ %213, %154 ]
  %143 = trunc i64 %.lcssa5 to i32
  br label %144

144:                                              ; preds = %142, %69
  %145 = phi i32 [ %71, %69 ], [ %143, %142 ]
  %146 = phi float [ %72, %69 ], [ %.lcssa7, %142 ]
  %147 = phi float [ %73, %69 ], [ %.lcssa4, %142 ]
  %148 = phi <2 x float> [ %74, %69 ], [ %.lcssa6, %142 ]
  %149 = icmp slt i32 %145, %0
  br i1 %149, label %150, label %233

150:                                              ; preds = %144
  %151 = zext i32 %145 to i64
  %152 = extractelement <2 x float> %148, i64 0
  %153 = extractelement <2 x float> %148, i64 1
  br label %219

154:                                              ; preds = %154, %78
  %155 = phi i64 [ %79, %78 ], [ %212, %154 ]
  %156 = phi i64 [ %70, %78 ], [ %215, %154 ]
  %157 = phi float [ %73, %78 ], [ %213, %154 ]
  %158 = and i64 %156, 65535
  %159 = getelementptr inbounds float, ptr %9, i64 %158
  %160 = load float, ptr %159, align 4
  %161 = shl i64 %156, 16
  %162 = ashr i64 %161, 32
  %163 = getelementptr inbounds float, ptr %9, i64 %162
  %164 = load float, ptr %163, align 4
  %165 = fsub float %160, %164
  %166 = getelementptr inbounds float, ptr %10, i64 %158
  %167 = load float, ptr %166, align 4
  %168 = getelementptr inbounds float, ptr %10, i64 %162
  %169 = load float, ptr %168, align 4
  %170 = getelementptr inbounds float, ptr %11, i64 %158
  %171 = load float, ptr %170, align 4
  %172 = getelementptr inbounds float, ptr %11, i64 %162
  %173 = load float, ptr %172, align 4
  %174 = getelementptr inbounds float, ptr %12, i64 %158
  %175 = load float, ptr %174, align 4
  %176 = getelementptr inbounds float, ptr %12, i64 %162
  %177 = load float, ptr %176, align 4
  %178 = getelementptr inbounds float, ptr %13, i64 %158
  %179 = load float, ptr %178, align 4
  %180 = getelementptr inbounds float, ptr %13, i64 %162
  %181 = load float, ptr %180, align 4
  %182 = insertelement <2 x float> poison, float %175, i64 0
  %183 = insertelement <2 x float> %182, float %167, i64 1
  %184 = insertelement <2 x float> poison, float %177, i64 0
  %185 = insertelement <2 x float> %184, float %169, i64 1
  %186 = fsub <2 x float> %183, %185
  %187 = insertelement <2 x float> poison, float %179, i64 0
  %188 = insertelement <2 x float> %187, float %171, i64 1
  %189 = insertelement <2 x float> poison, float %181, i64 0
  %190 = insertelement <2 x float> %189, float %173, i64 1
  %191 = fsub <2 x float> %188, %190
  %192 = shufflevector <2 x float> %191, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %193 = fmul <2 x float> %186, %192
  %194 = shufflevector <2 x float> %193, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %195 = fsub <2 x float> %193, %194
  %196 = extractelement <2 x float> %195, i64 0
  %197 = insertelement <2 x float> poison, float %165, i64 0
  %198 = shufflevector <2 x float> %197, <2 x float> poison, <2 x i32> zeroinitializer
  %199 = fmul <2 x float> %198, %191
  %200 = shufflevector <2 x float> %186, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %201 = fmul <2 x float> %200, %186
  %202 = fsub <2 x float> %199, %201
  %203 = extractelement <2 x float> %202, i64 0
  %204 = fmul float %157, %203
  %205 = fadd float %196, %204
  %206 = extractelement <2 x float> %202, i64 1
  %207 = fdiv float %205, %206
  %208 = fcmp olt float %207, 0.000000e+00
  %209 = select i1 %208, float 0.000000e+00, float %207
  %210 = fsub float %209, %4
  %211 = getelementptr inbounds float, ptr %3, i64 %155
  store float %210, ptr %211, align 4
  %212 = add nuw nsw i64 %155, 1
  %213 = fadd float %157, 1.000000e+00
  %214 = getelementptr inbounds i64, ptr %1, i64 %212
  %215 = load i64, ptr %214, align 8
  %216 = trunc i64 %215 to i32
  %217 = and i32 %216, 65535
  %218 = icmp slt i32 %217, %0
  br i1 %218, label %154, label %142

219:                                              ; preds = %219, %150
  %220 = phi i64 [ %151, %150 ], [ %229, %219 ]
  %221 = phi float [ %147, %150 ], [ %230, %219 ]
  %222 = fmul float %152, %221
  %223 = fadd float %146, %222
  %224 = fdiv float %223, %153
  %225 = fcmp olt float %224, 0.000000e+00
  %226 = select i1 %225, float 0.000000e+00, float %224
  %227 = fsub float %226, %4
  %228 = getelementptr inbounds float, ptr %3, i64 %220
  store float %227, ptr %228, align 4
  %229 = add nuw nsw i64 %220, 1
  %230 = fadd float %221, 1.000000e+00
  %231 = trunc i64 %229 to i32
  %232 = icmp slt i32 %231, %0
  br i1 %232, label %219, label %233, !llvm.loop !321

233:                                              ; preds = %219, %144
  %234 = icmp slt i32 %5, 1
  br i1 %234, label %414, label %235

235:                                              ; preds = %233
  %236 = lshr i32 %5, 1
  %237 = sub nsw i32 %236, %5
  %238 = icmp sgt i32 %237, -1
  br i1 %238, label %244, label %239

239:                                              ; preds = %235
  %240 = lshr i32 %5, 1
  %241 = zext i32 %240 to i64
  %242 = sub nsw i32 %5, %236
  %243 = zext i32 %242 to i64
  br label %259

244:                                              ; preds = %315, %235
  %245 = phi i32 [ 0, %235 ], [ %242, %315 ]
  %246 = phi float [ %146, %235 ], [ %293, %315 ]
  %247 = phi float [ 0.000000e+00, %235 ], [ %317, %315 ]
  %248 = phi <2 x float> [ %148, %235 ], [ %304, %315 ]
  %249 = add nuw nsw i32 %245, %236
  %250 = icmp slt i32 %249, %0
  br i1 %250, label %251, label %325

251:                                              ; preds = %244
  %252 = lshr i32 %5, 1
  %253 = zext i32 %252 to i64
  %254 = zext i32 %245 to i64
  %255 = add nuw nsw i64 %253, %254
  %256 = sext i32 %5 to i64
  %257 = zext i32 %236 to i64
  %258 = sub nsw i64 %7, %257
  br label %335

259:                                              ; preds = %315, %239
  %260 = phi i64 [ 0, %239 ], [ %316, %315 ]
  %261 = phi i64 [ %241, %239 ], [ %321, %315 ]
  %262 = phi i32 [ %237, %239 ], [ %320, %315 ]
  %263 = phi float [ 0.000000e+00, %239 ], [ %317, %315 ]
  %264 = getelementptr inbounds float, ptr %9, i64 %261
  %265 = load float, ptr %264, align 4
  %266 = sub nsw i32 0, %262
  %267 = zext i32 %266 to i64
  %268 = getelementptr inbounds float, ptr %9, i64 %267
  %269 = load float, ptr %268, align 4
  %270 = fadd float %265, %269
  %271 = getelementptr inbounds float, ptr %10, i64 %261
  %272 = load float, ptr %271, align 4
  %273 = getelementptr inbounds float, ptr %10, i64 %267
  %274 = load float, ptr %273, align 4
  %275 = fsub float %272, %274
  %276 = getelementptr inbounds float, ptr %11, i64 %261
  %277 = load float, ptr %276, align 4
  %278 = getelementptr inbounds float, ptr %11, i64 %267
  %279 = load float, ptr %278, align 4
  %280 = fadd float %277, %279
  %281 = getelementptr inbounds float, ptr %12, i64 %261
  %282 = load float, ptr %281, align 4
  %283 = getelementptr inbounds float, ptr %12, i64 %267
  %284 = load float, ptr %283, align 4
  %285 = fadd float %282, %284
  %286 = getelementptr inbounds float, ptr %13, i64 %261
  %287 = load float, ptr %286, align 4
  %288 = getelementptr inbounds float, ptr %13, i64 %267
  %289 = load float, ptr %288, align 4
  %290 = fsub float %287, %289
  %291 = fmul float %280, %285
  %292 = fmul float %275, %290
  %293 = fsub float %291, %292
  %294 = insertelement <2 x float> poison, float %270, i64 0
  %295 = shufflevector <2 x float> %294, <2 x float> poison, <2 x i32> zeroinitializer
  %296 = insertelement <2 x float> poison, float %290, i64 0
  %297 = insertelement <2 x float> %296, float %280, i64 1
  %298 = fmul <2 x float> %295, %297
  %299 = insertelement <2 x float> poison, float %275, i64 0
  %300 = shufflevector <2 x float> %299, <2 x float> poison, <2 x i32> zeroinitializer
  %301 = insertelement <2 x float> poison, float %285, i64 0
  %302 = insertelement <2 x float> %301, float %275, i64 1
  %303 = fmul <2 x float> %300, %302
  %304 = fsub <2 x float> %298, %303
  %305 = extractelement <2 x float> %304, i64 0
  %306 = fmul float %263, %305
  %307 = fadd float %293, %306
  %308 = extractelement <2 x float> %304, i64 1
  %309 = fdiv float %307, %308
  %310 = fsub float %309, %4
  %311 = getelementptr inbounds float, ptr %3, i64 %260
  %312 = load float, ptr %311, align 4
  %313 = fcmp olt float %310, %312
  br i1 %313, label %314, label %315

314:                                              ; preds = %259
  store float %310, ptr %311, align 4
  br label %315

315:                                              ; preds = %314, %259
  %316 = add nuw nsw i64 %260, 1
  %317 = fadd float %263, 1.000000e+00
  %318 = trunc i64 %316 to i32
  %319 = add i32 %236, %318
  %320 = sub nsw i32 %319, %5
  %321 = add nuw nsw i64 %261, 1
  %322 = icmp eq i64 %316, %243
  br i1 %322, label %244, label %259

323:                                              ; preds = %393
  %.lcssa3 = phi i64 [ %394, %393 ]
  %.lcssa2 = phi float [ %395, %393 ]
  %.lcssa1 = phi float [ %376, %393 ]
  %.lcssa = phi <2 x float> [ %382, %393 ]
  %324 = trunc i64 %.lcssa3 to i32
  br label %325

325:                                              ; preds = %323, %244
  %326 = phi i32 [ %245, %244 ], [ %324, %323 ]
  %327 = phi float [ %246, %244 ], [ %.lcssa1, %323 ]
  %328 = phi float [ %247, %244 ], [ %.lcssa2, %323 ]
  %329 = phi <2 x float> [ %248, %244 ], [ %.lcssa, %323 ]
  %330 = icmp slt i32 %326, %0
  br i1 %330, label %331, label %414

331:                                              ; preds = %325
  %332 = zext i32 %326 to i64
  %333 = extractelement <2 x float> %329, i64 0
  %334 = extractelement <2 x float> %329, i64 1
  br label %398

335:                                              ; preds = %393, %251
  %336 = phi i64 [ %254, %251 ], [ %394, %393 ]
  %337 = phi i64 [ %255, %251 ], [ %397, %393 ]
  %338 = phi float [ %247, %251 ], [ %395, %393 ]
  %339 = sub nsw i64 %337, %256
  %340 = and i64 %337, 4294967295
  %341 = getelementptr inbounds float, ptr %9, i64 %340
  %342 = load float, ptr %341, align 4
  %343 = getelementptr inbounds float, ptr %9, i64 %339
  %344 = load float, ptr %343, align 4
  %345 = fsub float %342, %344
  %346 = getelementptr inbounds float, ptr %10, i64 %340
  %347 = load float, ptr %346, align 4
  %348 = getelementptr inbounds float, ptr %10, i64 %339
  %349 = load float, ptr %348, align 4
  %350 = getelementptr inbounds float, ptr %11, i64 %340
  %351 = load float, ptr %350, align 4
  %352 = getelementptr inbounds float, ptr %11, i64 %339
  %353 = load float, ptr %352, align 4
  %354 = getelementptr inbounds float, ptr %12, i64 %340
  %355 = load float, ptr %354, align 4
  %356 = getelementptr inbounds float, ptr %12, i64 %339
  %357 = load float, ptr %356, align 4
  %358 = getelementptr inbounds float, ptr %13, i64 %340
  %359 = load float, ptr %358, align 4
  %360 = getelementptr inbounds float, ptr %13, i64 %339
  %361 = load float, ptr %360, align 4
  %362 = insertelement <2 x float> poison, float %355, i64 0
  %363 = insertelement <2 x float> %362, float %347, i64 1
  %364 = insertelement <2 x float> poison, float %357, i64 0
  %365 = insertelement <2 x float> %364, float %349, i64 1
  %366 = fsub <2 x float> %363, %365
  %367 = insertelement <2 x float> poison, float %359, i64 0
  %368 = insertelement <2 x float> %367, float %351, i64 1
  %369 = insertelement <2 x float> poison, float %361, i64 0
  %370 = insertelement <2 x float> %369, float %353, i64 1
  %371 = fsub <2 x float> %368, %370
  %372 = shufflevector <2 x float> %371, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %373 = fmul <2 x float> %366, %372
  %374 = shufflevector <2 x float> %373, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %375 = fsub <2 x float> %373, %374
  %376 = extractelement <2 x float> %375, i64 0
  %377 = insertelement <2 x float> poison, float %345, i64 0
  %378 = shufflevector <2 x float> %377, <2 x float> poison, <2 x i32> zeroinitializer
  %379 = fmul <2 x float> %378, %371
  %380 = shufflevector <2 x float> %366, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %381 = fmul <2 x float> %380, %366
  %382 = fsub <2 x float> %379, %381
  %383 = extractelement <2 x float> %382, i64 0
  %384 = fmul float %338, %383
  %385 = fadd float %376, %384
  %386 = extractelement <2 x float> %382, i64 1
  %387 = fdiv float %385, %386
  %388 = fsub float %387, %4
  %389 = getelementptr inbounds float, ptr %3, i64 %336
  %390 = load float, ptr %389, align 4
  %391 = fcmp olt float %388, %390
  br i1 %391, label %392, label %393

392:                                              ; preds = %335
  store float %388, ptr %389, align 4
  br label %393

393:                                              ; preds = %392, %335
  %394 = add nuw nsw i64 %336, 1
  %395 = fadd float %338, 1.000000e+00
  %396 = icmp slt i64 %394, %258
  %397 = add nuw nsw i64 %337, 1
  br i1 %396, label %335, label %323

398:                                              ; preds = %409, %331
  %399 = phi i64 [ %332, %331 ], [ %410, %409 ]
  %400 = phi float [ %328, %331 ], [ %411, %409 ]
  %401 = fmul float %333, %400
  %402 = fadd float %327, %401
  %403 = fdiv float %402, %334
  %404 = fsub float %403, %4
  %405 = getelementptr inbounds float, ptr %3, i64 %399
  %406 = load float, ptr %405, align 4
  %407 = fcmp olt float %404, %406
  br i1 %407, label %408, label %409

408:                                              ; preds = %398
  store float %404, ptr %405, align 4
  br label %409

409:                                              ; preds = %408, %398
  %410 = add nuw nsw i64 %399, 1
  %411 = fadd float %400, 1.000000e+00
  %412 = trunc i64 %410 to i32
  %413 = icmp slt i32 %412, %0
  br i1 %413, label %398, label %414, !llvm.loop !322

414:                                              ; preds = %409, %325, %233
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(argmem: readwrite) uwtable
define internal fastcc void @dradf4(i32 noundef %0, i32 noundef %1, ptr nocapture noundef readonly %2, ptr nocapture noundef writeonly %3, ptr nocapture noundef readonly %4, ptr nocapture noundef readonly %5, ptr nocapture noundef readonly %6) unnamed_addr #42 {
  %8 = mul i32 %1, %0
  %9 = shl i32 %8, 1
  %10 = icmp slt i32 %1, 1
  br i1 %10, label %62, label %11

11:                                               ; preds = %7
  %12 = mul i32 %8, 3
  %13 = shl i32 %0, 1
  %14 = sext i32 %8 to i64
  %15 = sext i32 %0 to i64
  %16 = sext i32 %12 to i64
  %17 = sext i32 %9 to i64
  br label %18

18:                                               ; preds = %18, %11
  %19 = phi i64 [ %17, %11 ], [ %59, %18 ]
  %20 = phi i64 [ %16, %11 ], [ %58, %18 ]
  %21 = phi i64 [ %14, %11 ], [ %57, %18 ]
  %22 = phi i32 [ 0, %11 ], [ %60, %18 ]
  %23 = phi i32 [ 0, %11 ], [ %40, %18 ]
  %24 = getelementptr inbounds float, ptr %2, i64 %21
  %25 = load float, ptr %24, align 4
  %26 = getelementptr inbounds float, ptr %2, i64 %20
  %27 = load float, ptr %26, align 4
  %28 = fadd float %25, %27
  %29 = sext i32 %23 to i64
  %30 = getelementptr inbounds float, ptr %2, i64 %29
  %31 = load float, ptr %30, align 4
  %32 = getelementptr inbounds float, ptr %2, i64 %19
  %33 = load float, ptr %32, align 4
  %34 = fadd float %31, %33
  %35 = fadd float %28, %34
  %36 = shl i32 %23, 2
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds float, ptr %3, i64 %37
  store float %35, ptr %38, align 4
  %39 = fsub float %34, %28
  %40 = add i32 %23, %0
  %41 = shl i32 %40, 2
  %42 = add nsw i32 %41, -1
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds float, ptr %3, i64 %43
  store float %39, ptr %44, align 4
  %45 = load float, ptr %30, align 4
  %46 = load float, ptr %32, align 4
  %47 = fsub float %45, %46
  %48 = add nsw i32 %36, %13
  %49 = add nsw i32 %48, -1
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds float, ptr %3, i64 %50
  store float %47, ptr %51, align 4
  %52 = load float, ptr %26, align 4
  %53 = load float, ptr %24, align 4
  %54 = fsub float %52, %53
  %55 = sext i32 %48 to i64
  %56 = getelementptr inbounds float, ptr %3, i64 %55
  store float %54, ptr %56, align 4
  %57 = add i64 %21, %15
  %58 = add i64 %20, %15
  %59 = add i64 %19, %15
  %60 = add nuw nsw i32 %22, 1
  %61 = icmp eq i32 %60, %1
  br i1 %61, label %62, label %18, !llvm.loop !323

62:                                               ; preds = %18, %7
  %63 = icmp slt i32 %0, 2
  br i1 %63, label %248, label %64

64:                                               ; preds = %62
  %65 = icmp eq i32 %0, 2
  br i1 %65, label %196, label %66

66:                                               ; preds = %64
  br i1 %10, label %192, label %67

67:                                               ; preds = %66
  %68 = shl nuw i32 %0, 1
  %69 = zext i32 %0 to i64
  %70 = sext i32 %8 to i64
  %71 = shl i32 %0, 2
  %72 = sext i32 %68 to i64
  br label %73

73:                                               ; preds = %186, %67
  %74 = phi i32 [ %68, %67 ], [ %190, %186 ]
  %75 = phi i32 [ 0, %67 ], [ %189, %186 ]
  %76 = phi i64 [ 0, %67 ], [ %187, %186 ]
  %77 = phi i32 [ 0, %67 ], [ %188, %186 ]
  %78 = sext i32 %74 to i64
  %79 = sext i32 %75 to i64
  br label %80

80:                                               ; preds = %80, %73
  %81 = phi i64 [ %78, %73 ], [ %87, %80 ]
  %82 = phi i64 [ %79, %73 ], [ %86, %80 ]
  %83 = phi i64 [ %76, %73 ], [ %85, %80 ]
  %84 = phi i64 [ 2, %73 ], [ %184, %80 ]
  %85 = add nsw i64 %83, 2
  %86 = add nsw i64 %82, 2
  %87 = add nsw i64 %81, -2
  %88 = add nsw i64 %85, %70
  %89 = add nsw i64 %84, -2
  %90 = getelementptr inbounds float, ptr %4, i64 %89
  %91 = load float, ptr %90, align 4
  %92 = add nsw i64 %88, -1
  %93 = getelementptr inbounds float, ptr %2, i64 %92
  %94 = load float, ptr %93, align 4
  %95 = add nsw i64 %84, -1
  %96 = getelementptr inbounds float, ptr %4, i64 %95
  %97 = load float, ptr %96, align 4
  %98 = getelementptr inbounds float, ptr %2, i64 %88
  %99 = load float, ptr %98, align 4
  %100 = fmul float %91, %99
  %101 = fmul float %94, %97
  %102 = fsub float %100, %101
  %103 = add nsw i64 %88, %70
  %104 = getelementptr inbounds float, ptr %5, i64 %89
  %105 = load float, ptr %104, align 4
  %106 = add nsw i64 %103, -1
  %107 = getelementptr inbounds float, ptr %2, i64 %106
  %108 = load float, ptr %107, align 4
  %109 = getelementptr inbounds float, ptr %5, i64 %95
  %110 = load float, ptr %109, align 4
  %111 = getelementptr inbounds float, ptr %2, i64 %103
  %112 = load float, ptr %111, align 4
  %113 = add nsw i64 %103, %70
  %114 = getelementptr inbounds float, ptr %6, i64 %89
  %115 = add nsw i64 %113, -1
  %116 = getelementptr inbounds float, ptr %2, i64 %115
  %117 = load <2 x float>, ptr %114, align 4
  %118 = load <2 x float>, ptr %116, align 4
  %119 = fmul <2 x float> %117, %118
  %120 = shufflevector <2 x float> %119, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %121 = fadd <2 x float> %119, %120
  %122 = getelementptr inbounds float, ptr %2, i64 %85
  %123 = load float, ptr %122, align 4
  %124 = add nsw i64 %83, 1
  %125 = getelementptr inbounds float, ptr %2, i64 %124
  %126 = load float, ptr %125, align 4
  %127 = or i64 %82, 1
  %128 = getelementptr inbounds float, ptr %3, i64 %127
  %129 = getelementptr inbounds float, ptr %3, i64 %86
  %130 = add nsw i64 %81, -3
  %131 = getelementptr inbounds float, ptr %3, i64 %130
  %132 = insertelement <2 x float> poison, float %105, i64 0
  %133 = insertelement <2 x float> %132, float %91, i64 1
  %134 = insertelement <2 x float> poison, float %108, i64 0
  %135 = insertelement <2 x float> %134, float %94, i64 1
  %136 = fmul <2 x float> %133, %135
  %137 = insertelement <2 x float> poison, float %110, i64 0
  %138 = insertelement <2 x float> %137, float %97, i64 1
  %139 = insertelement <2 x float> poison, float %112, i64 0
  %140 = insertelement <2 x float> %139, float %99, i64 1
  %141 = fmul <2 x float> %138, %140
  %142 = fadd <2 x float> %136, %141
  %143 = insertelement <2 x float> %117, float %105, i64 1
  %144 = shufflevector <2 x float> %118, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %145 = insertelement <2 x float> %144, float %112, i64 1
  %146 = fmul <2 x float> %143, %145
  %147 = insertelement <2 x float> %118, float %108, i64 1
  %148 = shufflevector <2 x float> %117, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %149 = insertelement <2 x float> %148, float %110, i64 1
  %150 = fmul <2 x float> %147, %149
  %151 = fsub <2 x float> %146, %150
  %152 = shufflevector <2 x float> %142, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %153 = fadd <2 x float> %152, %121
  %154 = extractelement <2 x float> %153, i64 0
  %155 = extractelement <2 x float> %151, i64 0
  %156 = fadd float %102, %155
  %157 = extractelement <2 x float> %151, i64 1
  %158 = fadd float %157, %123
  %159 = insertelement <2 x float> poison, float %102, i64 0
  %160 = insertelement <2 x float> %159, float %123, i64 1
  %161 = fsub <2 x float> %160, %151
  %162 = extractelement <2 x float> %142, i64 0
  %163 = fadd float %162, %126
  %164 = insertelement <2 x float> poison, float %126, i64 0
  %165 = shufflevector <2 x float> %164, <2 x float> %121, <2 x i32> <i32 0, i32 2>
  %166 = fsub <2 x float> %165, %142
  %167 = fadd float %154, %163
  store float %167, ptr %128, align 4
  %168 = fadd float %158, %156
  store float %168, ptr %129, align 4
  %169 = fsub <2 x float> %166, %161
  store <2 x float> %169, ptr %131, align 4
  %170 = fadd <2 x float> %161, %166
  %171 = extractelement <2 x float> %170, i64 0
  %172 = add nsw i64 %86, %72
  %173 = add nsw i64 %172, -1
  %174 = getelementptr inbounds float, ptr %3, i64 %173
  store float %171, ptr %174, align 4
  %175 = fadd <2 x float> %161, %166
  %176 = extractelement <2 x float> %175, i64 1
  %177 = getelementptr inbounds float, ptr %3, i64 %172
  store float %176, ptr %177, align 4
  %178 = fsub float %163, %154
  %179 = add nsw i64 %87, %72
  %180 = add nsw i64 %179, -1
  %181 = getelementptr inbounds float, ptr %3, i64 %180
  store float %178, ptr %181, align 4
  %182 = fsub float %156, %158
  %183 = getelementptr inbounds float, ptr %3, i64 %179
  store float %182, ptr %183, align 4
  %184 = add nuw nsw i64 %84, 2
  %185 = icmp ult i64 %184, %69
  br i1 %185, label %80, label %186, !llvm.loop !324

186:                                              ; preds = %80
  %187 = add i64 %76, %69
  %188 = add nuw nsw i32 %77, 1
  %189 = add i32 %75, %71
  %190 = add i32 %74, %71
  %191 = icmp eq i32 %188, %1
  br i1 %191, label %192, label %73, !llvm.loop !325

192:                                              ; preds = %186, %66
  %193 = and i32 %0, 1
  %194 = icmp ne i32 %193, 0
  %195 = or i1 %194, %10
  br i1 %195, label %248, label %197

196:                                              ; preds = %64
  br i1 %10, label %248, label %197

197:                                              ; preds = %196, %192
  %198 = shl nuw i32 %0, 1
  %199 = shl i32 %0, 2
  %200 = add i32 %0, -1
  %201 = add i32 %200, %8
  %202 = add i32 %201, %9
  %203 = sext i32 %201 to i64
  %204 = sext i32 %0 to i64
  %205 = sext i32 %8 to i64
  %206 = sext i32 %202 to i64
  %207 = sext i32 %199 to i64
  %208 = sext i32 %198 to i64
  br label %209

209:                                              ; preds = %209, %197
  %210 = phi i64 [ %204, %197 ], [ %245, %209 ]
  %211 = phi i64 [ %204, %197 ], [ %244, %209 ]
  %212 = phi i64 [ %206, %197 ], [ %243, %209 ]
  %213 = phi i64 [ %203, %197 ], [ %242, %209 ]
  %214 = phi i32 [ 0, %197 ], [ %246, %209 ]
  %215 = getelementptr inbounds float, ptr %2, i64 %213
  %216 = load float, ptr %215, align 4
  %217 = getelementptr inbounds float, ptr %2, i64 %212
  %218 = load float, ptr %217, align 4
  %219 = fadd float %216, %218
  %220 = fmul float %219, 0xBFE6A09E60000000
  %221 = fsub float %216, %218
  %222 = fmul float %221, 0x3FE6A09E60000000
  %223 = add nsw i64 %210, -1
  %224 = getelementptr inbounds float, ptr %2, i64 %223
  %225 = load float, ptr %224, align 4
  %226 = fadd float %225, %222
  %227 = add nsw i64 %211, -1
  %228 = getelementptr inbounds float, ptr %3, i64 %227
  store float %226, ptr %228, align 4
  %229 = load float, ptr %224, align 4
  %230 = fsub float %229, %222
  %231 = add nsw i64 %211, %208
  %232 = add nsw i64 %231, -1
  %233 = getelementptr inbounds float, ptr %3, i64 %232
  store float %230, ptr %233, align 4
  %234 = add nsw i64 %213, %205
  %235 = getelementptr inbounds float, ptr %2, i64 %234
  %236 = load float, ptr %235, align 4
  %237 = fsub float %220, %236
  %238 = getelementptr inbounds float, ptr %3, i64 %211
  store float %237, ptr %238, align 4
  %239 = load float, ptr %235, align 4
  %240 = fadd float %220, %239
  %241 = getelementptr inbounds float, ptr %3, i64 %231
  store float %240, ptr %241, align 4
  %242 = add i64 %213, %204
  %243 = add i64 %212, %204
  %244 = add i64 %211, %207
  %245 = add i64 %210, %204
  %246 = add nuw nsw i32 %214, 1
  %247 = icmp eq i32 %246, %1
  br i1 %247, label %248, label %209, !llvm.loop !326

248:                                              ; preds = %209, %196, %192, %62
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(argmem: readwrite) uwtable
define internal fastcc void @dradf2(i32 noundef %0, i32 noundef %1, ptr nocapture noundef readonly %2, ptr nocapture noundef writeonly %3, ptr nocapture noundef readonly %4) unnamed_addr #42 {
  %6 = mul i32 %1, %0
  %7 = shl i32 %0, 1
  %8 = icmp slt i32 %1, 1
  br i1 %8, label %36, label %9

9:                                                ; preds = %5
  %10 = add i32 %7, -1
  %11 = sext i32 %6 to i64
  %12 = sext i32 %0 to i64
  br label %13

13:                                               ; preds = %13, %9
  %14 = phi i64 [ 0, %9 ], [ %32, %13 ]
  %15 = phi i64 [ %11, %9 ], [ %33, %13 ]
  %16 = phi i32 [ 0, %9 ], [ %34, %13 ]
  %17 = getelementptr inbounds float, ptr %2, i64 %14
  %18 = load float, ptr %17, align 4
  %19 = getelementptr inbounds float, ptr %2, i64 %15
  %20 = load float, ptr %19, align 4
  %21 = fadd float %18, %20
  %22 = trunc i64 %14 to i32
  %23 = shl i32 %22, 1
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds float, ptr %3, i64 %24
  store float %21, ptr %25, align 4
  %26 = load float, ptr %17, align 4
  %27 = load float, ptr %19, align 4
  %28 = fsub float %26, %27
  %29 = add i32 %10, %23
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds float, ptr %3, i64 %30
  store float %28, ptr %31, align 4
  %32 = add i64 %14, %12
  %33 = add i64 %15, %12
  %34 = add nuw nsw i32 %16, 1
  %35 = icmp eq i32 %34, %1
  br i1 %35, label %36, label %13, !llvm.loop !327

36:                                               ; preds = %13, %5
  %37 = icmp slt i32 %0, 2
  br i1 %37, label %136, label %38

38:                                               ; preds = %36
  %39 = icmp eq i32 %0, 2
  br i1 %39, label %110, label %40

40:                                               ; preds = %38
  br i1 %8, label %106, label %41

41:                                               ; preds = %40
  %42 = sext i32 %6 to i64
  %43 = zext i32 %0 to i64
  br label %44

44:                                               ; preds = %100, %41
  %45 = phi i64 [ %42, %41 ], [ %101, %100 ]
  %46 = phi i32 [ %7, %41 ], [ %104, %100 ]
  %47 = phi i32 [ 0, %41 ], [ %103, %100 ]
  %48 = phi i32 [ 0, %41 ], [ %50, %100 ]
  %49 = phi i32 [ 0, %41 ], [ %102, %100 ]
  %50 = add i32 %48, %0
  %51 = sext i32 %46 to i64
  %52 = sext i32 %48 to i64
  %53 = sext i32 %47 to i64
  br label %54

54:                                               ; preds = %54, %44
  %55 = phi i64 [ 2, %44 ], [ %98, %54 ]
  %56 = phi i64 [ %45, %44 ], [ %60, %54 ]
  %57 = phi i64 [ %51, %44 ], [ %61, %54 ]
  %58 = phi i64 [ %52, %44 ], [ %62, %54 ]
  %59 = phi i64 [ %53, %44 ], [ %63, %54 ]
  %60 = add nsw i64 %56, 2
  %61 = add nsw i64 %57, -2
  %62 = add nsw i64 %58, 2
  %63 = add nsw i64 %59, 2
  %64 = add nsw i64 %55, -2
  %65 = getelementptr inbounds float, ptr %4, i64 %64
  %66 = load float, ptr %65, align 4
  %67 = add nsw i64 %56, 1
  %68 = getelementptr inbounds float, ptr %2, i64 %67
  %69 = load float, ptr %68, align 4
  %70 = fmul float %66, %69
  %71 = add nsw i64 %55, -1
  %72 = getelementptr inbounds float, ptr %4, i64 %71
  %73 = load float, ptr %72, align 4
  %74 = getelementptr inbounds float, ptr %2, i64 %60
  %75 = load float, ptr %74, align 4
  %76 = fmul float %73, %75
  %77 = fadd float %70, %76
  %78 = fmul float %66, %75
  %79 = fmul float %69, %73
  %80 = fsub float %78, %79
  %81 = getelementptr inbounds float, ptr %2, i64 %62
  %82 = load float, ptr %81, align 4
  %83 = fadd float %82, %80
  %84 = getelementptr inbounds float, ptr %3, i64 %63
  store float %83, ptr %84, align 4
  %85 = load float, ptr %81, align 4
  %86 = fsub float %80, %85
  %87 = getelementptr inbounds float, ptr %3, i64 %61
  store float %86, ptr %87, align 4
  %88 = add nsw i64 %58, 1
  %89 = getelementptr inbounds float, ptr %2, i64 %88
  %90 = load float, ptr %89, align 4
  %91 = fadd float %77, %90
  %92 = or i64 %59, 1
  %93 = getelementptr inbounds float, ptr %3, i64 %92
  store float %91, ptr %93, align 4
  %94 = load float, ptr %89, align 4
  %95 = fsub float %94, %77
  %96 = add nsw i64 %57, -3
  %97 = getelementptr inbounds float, ptr %3, i64 %96
  store float %95, ptr %97, align 4
  %98 = add nuw nsw i64 %55, 2
  %99 = icmp ult i64 %98, %43
  br i1 %99, label %54, label %100, !llvm.loop !328

100:                                              ; preds = %54
  %101 = add i64 %45, %43
  %102 = add nuw nsw i32 %49, 1
  %103 = add i32 %47, %7
  %104 = add i32 %46, %7
  %105 = icmp eq i32 %102, %1
  br i1 %105, label %106, label %44, !llvm.loop !329

106:                                              ; preds = %100, %40
  %107 = and i32 %0, 1
  %108 = icmp ne i32 %107, 0
  %109 = or i1 %108, %8
  br i1 %109, label %136, label %111

110:                                              ; preds = %38
  br i1 %8, label %136, label %111

111:                                              ; preds = %110, %106
  %112 = add i32 %0, -1
  %113 = add i32 %6, %112
  %114 = sext i32 %112 to i64
  %115 = sext i32 %0 to i64
  %116 = sext i32 %113 to i64
  %117 = sext i32 %7 to i64
  br label %118

118:                                              ; preds = %118, %111
  %119 = phi i64 [ %115, %111 ], [ %131, %118 ]
  %120 = phi i64 [ %116, %111 ], [ %132, %118 ]
  %121 = phi i64 [ %114, %111 ], [ %133, %118 ]
  %122 = phi i32 [ 0, %111 ], [ %134, %118 ]
  %123 = getelementptr inbounds float, ptr %2, i64 %120
  %124 = load float, ptr %123, align 4
  %125 = fneg float %124
  %126 = getelementptr inbounds float, ptr %3, i64 %119
  store float %125, ptr %126, align 4
  %127 = getelementptr inbounds float, ptr %2, i64 %121
  %128 = load float, ptr %127, align 4
  %129 = add nsw i64 %119, -1
  %130 = getelementptr inbounds float, ptr %3, i64 %129
  store float %128, ptr %130, align 4
  %131 = add i64 %119, %117
  %132 = add i64 %120, %115
  %133 = add i64 %121, %115
  %134 = add nuw nsw i32 %122, 1
  %135 = icmp eq i32 %134, %1
  br i1 %135, label %136, label %118, !llvm.loop !330

136:                                              ; preds = %118, %110, %106, %36
  ret void
}

; Function Attrs: nofree nounwind optsize memory(write, argmem: readwrite) uwtable
define internal fastcc void @dradfg(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, ptr nocapture noundef writeonly %4, ptr nocapture noundef %5, ptr nocapture noundef %6, ptr nocapture noundef %7, ptr nocapture noundef %8, ptr nocapture noundef readonly %9) unnamed_addr #43 {
  %11 = sitofp i32 %1 to float
  %12 = fdiv float 0x401921FB60000000, %11
  %13 = fpext float %12 to double
  %14 = tail call double @cos(double noundef %13) #59
  %15 = fptrunc double %14 to float
  %16 = tail call double @sin(double noundef %13) #59
  %17 = fptrunc double %16 to float
  %18 = add nsw i32 %1, 1
  %19 = ashr i32 %18, 1
  %20 = add nsw i32 %0, -1
  %21 = ashr i32 %20, 1
  %22 = mul i32 %2, %0
  %23 = mul i32 %1, %0
  %24 = icmp eq i32 %0, 1
  br i1 %24, label %297, label %25

25:                                               ; preds = %10
  %26 = icmp sgt i32 %3, 0
  br i1 %26, label %27, label %29

27:                                               ; preds = %25
  %28 = zext i32 %3 to i64
  br label %34

29:                                               ; preds = %34, %25
  %30 = icmp sgt i32 %1, 1
  br i1 %30, label %31, label %170

31:                                               ; preds = %29
  %32 = icmp sgt i32 %2, 0
  %33 = sext i32 %0 to i64
  br label %41

34:                                               ; preds = %34, %27
  %35 = phi i64 [ 0, %27 ], [ %39, %34 ]
  %36 = getelementptr inbounds float, ptr %6, i64 %35
  %37 = load float, ptr %36, align 4
  %38 = getelementptr inbounds float, ptr %8, i64 %35
  store float %37, ptr %38, align 4
  %39 = add nuw nsw i64 %35, 1
  %40 = icmp eq i64 %39, %28
  br i1 %40, label %29, label %34, !llvm.loop !331

41:                                               ; preds = %55, %31
  %42 = phi i32 [ %22, %31 ], [ %57, %55 ]
  %43 = phi i32 [ 1, %31 ], [ %56, %55 ]
  br i1 %32, label %44, label %55

44:                                               ; preds = %41
  %45 = sext i32 %42 to i64
  br label %46

46:                                               ; preds = %46, %44
  %47 = phi i64 [ %45, %44 ], [ %52, %46 ]
  %48 = phi i32 [ 0, %44 ], [ %53, %46 ]
  %49 = getelementptr inbounds float, ptr %5, i64 %47
  %50 = load float, ptr %49, align 4
  %51 = getelementptr inbounds float, ptr %7, i64 %47
  store float %50, ptr %51, align 4
  %52 = add i64 %47, %33
  %53 = add nuw nsw i32 %48, 1
  %54 = icmp eq i32 %53, %2
  br i1 %54, label %55, label %46, !llvm.loop !332

55:                                               ; preds = %46, %41
  %56 = add nuw nsw i32 %43, 1
  %57 = add i32 %42, %22
  %58 = icmp eq i32 %56, %1
  br i1 %58, label %59, label %41, !llvm.loop !333

59:                                               ; preds = %55
  %60 = icmp sgt i32 %21, %2
  br i1 %60, label %67, label %61

61:                                               ; preds = %59
  br i1 %30, label %62, label %170

62:                                               ; preds = %61
  %63 = icmp sgt i32 %0, 2
  %64 = icmp sgt i32 %2, 0
  %65 = add i32 %22, 2
  %66 = sext i32 %0 to i64
  br label %120

67:                                               ; preds = %59
  br i1 %30, label %68, label %170

68:                                               ; preds = %67
  %69 = icmp sgt i32 %2, 0
  %70 = icmp sgt i32 %0, 2
  br label %71

71:                                               ; preds = %115, %68
  %72 = phi i32 [ %22, %68 ], [ %118, %115 ]
  %73 = phi i32 [ -1, %68 ], [ %117, %115 ]
  %74 = phi i32 [ 1, %68 ], [ %116, %115 ]
  %75 = sext i32 %73 to i64
  br i1 %69, label %76, label %115

76:                                               ; preds = %111, %71
  %77 = phi i32 [ %113, %111 ], [ %72, %71 ]
  %78 = phi i32 [ %112, %111 ], [ 0, %71 ]
  br i1 %70, label %79, label %111

79:                                               ; preds = %76
  %80 = sext i32 %77 to i64
  br label %81

81:                                               ; preds = %81, %79
  %82 = phi i64 [ %80, %79 ], [ %86, %81 ]
  %83 = phi i64 [ %75, %79 ], [ %85, %81 ]
  %84 = phi i32 [ 2, %79 ], [ %109, %81 ]
  %85 = add nsw i64 %83, 2
  %86 = add nsw i64 %82, 2
  %87 = add nsw i64 %83, 1
  %88 = getelementptr inbounds float, ptr %9, i64 %87
  %89 = load float, ptr %88, align 4
  %90 = add nsw i64 %82, 1
  %91 = getelementptr inbounds float, ptr %5, i64 %90
  %92 = load float, ptr %91, align 4
  %93 = fmul float %89, %92
  %94 = getelementptr inbounds float, ptr %9, i64 %85
  %95 = load float, ptr %94, align 4
  %96 = getelementptr inbounds float, ptr %5, i64 %86
  %97 = load float, ptr %96, align 4
  %98 = fmul float %95, %97
  %99 = fadd float %93, %98
  %100 = getelementptr inbounds float, ptr %7, i64 %90
  store float %99, ptr %100, align 4
  %101 = load float, ptr %88, align 4
  %102 = load float, ptr %96, align 4
  %103 = fmul float %101, %102
  %104 = load float, ptr %94, align 4
  %105 = load float, ptr %91, align 4
  %106 = fmul float %104, %105
  %107 = fsub float %103, %106
  %108 = getelementptr inbounds float, ptr %7, i64 %86
  store float %107, ptr %108, align 4
  %109 = add nuw nsw i32 %84, 2
  %110 = icmp slt i32 %109, %0
  br i1 %110, label %81, label %111, !llvm.loop !334

111:                                              ; preds = %81, %76
  %112 = add nuw nsw i32 %78, 1
  %113 = add i32 %77, %0
  %114 = icmp eq i32 %112, %2
  br i1 %114, label %115, label %76, !llvm.loop !335

115:                                              ; preds = %111, %71
  %116 = add nuw nsw i32 %74, 1
  %117 = add i32 %73, %0
  %118 = add i32 %72, %22
  %119 = icmp eq i32 %116, %1
  br i1 %119, label %170, label %71, !llvm.loop !336

120:                                              ; preds = %165, %62
  %121 = phi i32 [ -1, %62 ], [ %168, %165 ]
  %122 = phi i32 [ %65, %62 ], [ %167, %165 ]
  %123 = phi i32 [ 1, %62 ], [ %166, %165 ]
  br i1 %63, label %124, label %165

124:                                              ; preds = %120
  %125 = sext i32 %121 to i64
  br label %126

126:                                              ; preds = %161, %124
  %127 = phi i64 [ %125, %124 ], [ %130, %161 ]
  %128 = phi i32 [ %122, %124 ], [ %164, %161 ]
  %129 = phi i32 [ 2, %124 ], [ %162, %161 ]
  %130 = add nsw i64 %127, 2
  br i1 %64, label %131, label %161

131:                                              ; preds = %126
  %132 = sext i32 %128 to i64
  %133 = add nsw i64 %127, 1
  %134 = getelementptr inbounds float, ptr %9, i64 %133
  %135 = getelementptr inbounds float, ptr %9, i64 %130
  br label %136

136:                                              ; preds = %136, %131
  %137 = phi i64 [ %132, %131 ], [ %158, %136 ]
  %138 = phi i32 [ 0, %131 ], [ %159, %136 ]
  %139 = load float, ptr %134, align 4
  %140 = add nsw i64 %137, -1
  %141 = getelementptr inbounds float, ptr %5, i64 %140
  %142 = load float, ptr %141, align 4
  %143 = fmul float %139, %142
  %144 = load float, ptr %135, align 4
  %145 = getelementptr inbounds float, ptr %5, i64 %137
  %146 = load float, ptr %145, align 4
  %147 = fmul float %144, %146
  %148 = fadd float %143, %147
  %149 = getelementptr inbounds float, ptr %7, i64 %140
  store float %148, ptr %149, align 4
  %150 = load float, ptr %134, align 4
  %151 = load float, ptr %145, align 4
  %152 = fmul float %150, %151
  %153 = load float, ptr %135, align 4
  %154 = load float, ptr %141, align 4
  %155 = fmul float %153, %154
  %156 = fsub float %152, %155
  %157 = getelementptr inbounds float, ptr %7, i64 %137
  store float %156, ptr %157, align 4
  %158 = add i64 %137, %66
  %159 = add nuw nsw i32 %138, 1
  %160 = icmp eq i32 %159, %2
  br i1 %160, label %161, label %136, !llvm.loop !337

161:                                              ; preds = %136, %126
  %162 = add nuw nsw i32 %129, 2
  %163 = icmp slt i32 %162, %0
  %164 = add i32 %128, 2
  br i1 %163, label %126, label %165, !llvm.loop !338

165:                                              ; preds = %161, %120
  %166 = add nuw nsw i32 %123, 1
  %167 = add i32 %122, %22
  %168 = add i32 %121, %0
  %169 = icmp eq i32 %166, %1
  br i1 %169, label %170, label %120, !llvm.loop !339

170:                                              ; preds = %165, %115, %67, %61, %29
  %171 = icmp slt i32 %21, %2
  %172 = icmp sgt i32 %1, 2
  br i1 %171, label %181, label %173

173:                                              ; preds = %170
  br i1 %172, label %174, label %297

174:                                              ; preds = %173
  %175 = icmp sgt i32 %2, 0
  %176 = icmp sgt i32 %0, 2
  %177 = add nsw i32 %1, -1
  %178 = mul i32 %22, %177
  %179 = sext i32 %0 to i64
  %180 = tail call i32 @llvm.smax.i32(i32 %19, i32 2)
  br label %246

181:                                              ; preds = %170
  br i1 %172, label %182, label %297

182:                                              ; preds = %181
  %183 = icmp sgt i32 %0, 2
  %184 = icmp sgt i32 %2, 0
  %185 = add nsw i32 %1, -1
  %186 = mul i32 %185, %2
  %187 = add i32 %186, -1
  %188 = mul i32 %187, %0
  %189 = add i32 %188, 2
  %190 = sext i32 %0 to i64
  %191 = add nsw i32 %2, -1
  %192 = mul i32 %191, %0
  %193 = add i32 %192, 2
  %194 = tail call i32 @llvm.smax.i32(i32 %19, i32 2)
  br label %195

195:                                              ; preds = %241, %182
  %196 = phi i32 [ %193, %182 ], [ %244, %241 ]
  %197 = phi i32 [ %189, %182 ], [ %243, %241 ]
  %198 = phi i32 [ 1, %182 ], [ %242, %241 ]
  br i1 %183, label %199, label %241

199:                                              ; preds = %236, %195
  %200 = phi i32 [ %240, %236 ], [ %196, %195 ]
  %201 = phi i32 [ %239, %236 ], [ %197, %195 ]
  %202 = phi i32 [ %237, %236 ], [ 2, %195 ]
  br i1 %184, label %203, label %236

203:                                              ; preds = %199
  %204 = sext i32 %200 to i64
  %205 = sext i32 %201 to i64
  br label %206

206:                                              ; preds = %206, %203
  %207 = phi i64 [ %204, %203 ], [ %210, %206 ]
  %208 = phi i64 [ %205, %203 ], [ %211, %206 ]
  %209 = phi i32 [ 0, %203 ], [ %234, %206 ]
  %210 = add i64 %207, %190
  %211 = add i64 %208, %190
  %212 = add nsw i64 %210, -1
  %213 = getelementptr inbounds float, ptr %7, i64 %212
  %214 = load float, ptr %213, align 4
  %215 = add nsw i64 %211, -1
  %216 = getelementptr inbounds float, ptr %7, i64 %215
  %217 = load float, ptr %216, align 4
  %218 = fadd float %214, %217
  %219 = getelementptr inbounds float, ptr %5, i64 %212
  store float %218, ptr %219, align 4
  %220 = getelementptr inbounds float, ptr %7, i64 %210
  %221 = load float, ptr %220, align 4
  %222 = getelementptr inbounds float, ptr %7, i64 %211
  %223 = load float, ptr %222, align 4
  %224 = fsub float %221, %223
  %225 = getelementptr inbounds float, ptr %5, i64 %215
  store float %224, ptr %225, align 4
  %226 = load float, ptr %220, align 4
  %227 = load float, ptr %222, align 4
  %228 = fadd float %226, %227
  %229 = getelementptr inbounds float, ptr %5, i64 %210
  store float %228, ptr %229, align 4
  %230 = load float, ptr %216, align 4
  %231 = load float, ptr %213, align 4
  %232 = fsub float %230, %231
  %233 = getelementptr inbounds float, ptr %5, i64 %211
  store float %232, ptr %233, align 4
  %234 = add nuw nsw i32 %209, 1
  %235 = icmp eq i32 %234, %2
  br i1 %235, label %236, label %206, !llvm.loop !340

236:                                              ; preds = %206, %199
  %237 = add nuw nsw i32 %202, 2
  %238 = icmp slt i32 %237, %0
  %239 = add i32 %201, 2
  %240 = add i32 %200, 2
  br i1 %238, label %199, label %241, !llvm.loop !341

241:                                              ; preds = %236, %195
  %242 = add nuw nsw i32 %198, 1
  %243 = sub i32 %197, %22
  %244 = add i32 %196, %22
  %245 = icmp eq i32 %242, %194
  br i1 %245, label %297, label %195, !llvm.loop !342

246:                                              ; preds = %292, %174
  %247 = phi i32 [ %22, %174 ], [ %295, %292 ]
  %248 = phi i32 [ %178, %174 ], [ %294, %292 ]
  %249 = phi i32 [ 1, %174 ], [ %293, %292 ]
  br i1 %175, label %250, label %292

250:                                              ; preds = %246
  %251 = sext i32 %247 to i64
  %252 = sext i32 %248 to i64
  br label %253

253:                                              ; preds = %287, %250
  %254 = phi i64 [ %251, %250 ], [ %288, %287 ]
  %255 = phi i64 [ %252, %250 ], [ %289, %287 ]
  %256 = phi i32 [ 0, %250 ], [ %290, %287 ]
  br i1 %176, label %257, label %287

257:                                              ; preds = %257, %253
  %258 = phi i64 [ %261, %257 ], [ %254, %253 ]
  %259 = phi i64 [ %262, %257 ], [ %255, %253 ]
  %260 = phi i32 [ %285, %257 ], [ 2, %253 ]
  %261 = add nsw i64 %258, 2
  %262 = add nsw i64 %259, 2
  %263 = add nsw i64 %258, 1
  %264 = getelementptr inbounds float, ptr %7, i64 %263
  %265 = load float, ptr %264, align 4
  %266 = add nsw i64 %259, 1
  %267 = getelementptr inbounds float, ptr %7, i64 %266
  %268 = load float, ptr %267, align 4
  %269 = fadd float %265, %268
  %270 = getelementptr inbounds float, ptr %5, i64 %263
  store float %269, ptr %270, align 4
  %271 = getelementptr inbounds float, ptr %7, i64 %261
  %272 = load float, ptr %271, align 4
  %273 = getelementptr inbounds float, ptr %7, i64 %262
  %274 = load float, ptr %273, align 4
  %275 = fsub float %272, %274
  %276 = getelementptr inbounds float, ptr %5, i64 %266
  store float %275, ptr %276, align 4
  %277 = load float, ptr %271, align 4
  %278 = load float, ptr %273, align 4
  %279 = fadd float %277, %278
  %280 = getelementptr inbounds float, ptr %5, i64 %261
  store float %279, ptr %280, align 4
  %281 = load float, ptr %267, align 4
  %282 = load float, ptr %264, align 4
  %283 = fsub float %281, %282
  %284 = getelementptr inbounds float, ptr %5, i64 %262
  store float %283, ptr %284, align 4
  %285 = add nuw nsw i32 %260, 2
  %286 = icmp slt i32 %285, %0
  br i1 %286, label %257, label %287, !llvm.loop !343

287:                                              ; preds = %257, %253
  %288 = add i64 %254, %179
  %289 = add i64 %255, %179
  %290 = add nuw nsw i32 %256, 1
  %291 = icmp eq i32 %290, %2
  br i1 %291, label %292, label %253, !llvm.loop !344

292:                                              ; preds = %287, %246
  %293 = add nuw nsw i32 %249, 1
  %294 = sub i32 %248, %22
  %295 = add i32 %247, %22
  %296 = icmp eq i32 %293, %180
  br i1 %296, label %297, label %246, !llvm.loop !345

297:                                              ; preds = %292, %241, %181, %173, %10
  %298 = icmp sgt i32 %3, 0
  br i1 %298, label %299, label %308

299:                                              ; preds = %297
  %300 = zext i32 %3 to i64
  br label %301

301:                                              ; preds = %301, %299
  %302 = phi i64 [ 0, %299 ], [ %306, %301 ]
  %303 = getelementptr inbounds float, ptr %8, i64 %302
  %304 = load float, ptr %303, align 4
  %305 = getelementptr inbounds float, ptr %6, i64 %302
  store float %304, ptr %305, align 4
  %306 = add nuw nsw i64 %302, 1
  %307 = icmp eq i64 %306, %300
  br i1 %307, label %308, label %301, !llvm.loop !346

308:                                              ; preds = %301, %297
  %309 = icmp sgt i32 %1, 2
  br i1 %309, label %312, label %310

310:                                              ; preds = %308
  %311 = add i32 %1, -1
  br label %476

312:                                              ; preds = %308
  %313 = mul i32 %3, %1
  %314 = icmp sgt i32 %2, 0
  %315 = add i32 %2, -1
  %316 = mul i32 %315, %0
  %317 = sext i32 %0 to i64
  %318 = xor i32 %2, -1
  %319 = mul i32 %318, %0
  %320 = add i32 %313, %319
  %321 = tail call i32 @llvm.smax.i32(i32 %19, i32 2)
  br label %322

322:                                              ; preds = %347, %312
  %323 = phi i32 [ %320, %312 ], [ %350, %347 ]
  %324 = phi i32 [ %316, %312 ], [ %349, %347 ]
  %325 = phi i32 [ 1, %312 ], [ %348, %347 ]
  br i1 %314, label %326, label %347

326:                                              ; preds = %322
  %327 = sext i32 %323 to i64
  %328 = sext i32 %324 to i64
  br label %329

329:                                              ; preds = %329, %326
  %330 = phi i64 [ %327, %326 ], [ %334, %329 ]
  %331 = phi i64 [ %328, %326 ], [ %333, %329 ]
  %332 = phi i32 [ 0, %326 ], [ %345, %329 ]
  %333 = add i64 %331, %317
  %334 = add i64 %330, %317
  %335 = getelementptr inbounds float, ptr %7, i64 %333
  %336 = load float, ptr %335, align 4
  %337 = getelementptr inbounds float, ptr %7, i64 %334
  %338 = load float, ptr %337, align 4
  %339 = fadd float %336, %338
  %340 = getelementptr inbounds float, ptr %5, i64 %333
  store float %339, ptr %340, align 4
  %341 = load float, ptr %337, align 4
  %342 = load float, ptr %335, align 4
  %343 = fsub float %341, %342
  %344 = getelementptr inbounds float, ptr %5, i64 %334
  store float %343, ptr %344, align 4
  %345 = add nuw nsw i32 %332, 1
  %346 = icmp eq i32 %345, %2
  br i1 %346, label %347, label %329, !llvm.loop !347

347:                                              ; preds = %329, %322
  %348 = add nuw nsw i32 %325, 1
  %349 = add i32 %324, %22
  %350 = sub i32 %323, %22
  %351 = icmp eq i32 %348, %321
  br i1 %351, label %352, label %322, !llvm.loop !348

352:                                              ; preds = %347
  %353 = add i32 %1, -1
  br i1 %309, label %354, label %476

354:                                              ; preds = %352
  %355 = mul i32 %353, %3
  %356 = icmp ugt i32 %1, 4
  %357 = sext i32 %3 to i64
  %358 = sext i32 %355 to i64
  %359 = add nsw i32 %1, -2
  %360 = mul i32 %359, %3
  %361 = shl i32 %3, 1
  %362 = tail call i32 @llvm.smax.i32(i32 %19, i32 3)
  %363 = tail call i32 @llvm.smax.i32(i32 %19, i32 2)
  %364 = zext i32 %3 to i64
  br label %369

365:                                              ; preds = %451
  br i1 %309, label %366, label %476

366:                                              ; preds = %365
  %367 = tail call i32 @llvm.smax.i32(i32 %19, i32 2)
  %368 = zext i32 %3 to i64
  br label %456

369:                                              ; preds = %451, %354
  %370 = phi i32 [ %355, %354 ], [ %454, %451 ]
  %371 = phi i32 [ %3, %354 ], [ %453, %451 ]
  %372 = phi i32 [ 1, %354 ], [ %452, %451 ]
  %373 = phi float [ 1.000000e+00, %354 ], [ %379, %451 ]
  %374 = phi float [ 0.000000e+00, %354 ], [ %382, %451 ]
  %375 = sext i32 %370 to i64
  %376 = sext i32 %371 to i64
  %377 = fmul float %373, %15
  %378 = fmul float %374, %17
  %379 = fsub float %377, %378
  %380 = fmul float %374, %15
  %381 = fmul float %373, %17
  %382 = fadd float %380, %381
  br i1 %298, label %384, label %383

383:                                              ; preds = %384, %369
  br i1 %356, label %407, label %451

384:                                              ; preds = %384, %369
  %385 = phi i64 [ %403, %384 ], [ %375, %369 ]
  %386 = phi i64 [ %399, %384 ], [ %358, %369 ]
  %387 = phi i64 [ %392, %384 ], [ %357, %369 ]
  %388 = phi i64 [ %397, %384 ], [ %376, %369 ]
  %389 = phi i64 [ %405, %384 ], [ 0, %369 ]
  %390 = getelementptr inbounds float, ptr %6, i64 %389
  %391 = load float, ptr %390, align 4
  %392 = add nsw i64 %387, 1
  %393 = getelementptr inbounds float, ptr %6, i64 %387
  %394 = load float, ptr %393, align 4
  %395 = fmul float %379, %394
  %396 = fadd float %391, %395
  %397 = add nsw i64 %388, 1
  %398 = getelementptr inbounds float, ptr %8, i64 %388
  store float %396, ptr %398, align 4
  %399 = add nsw i64 %386, 1
  %400 = getelementptr inbounds float, ptr %6, i64 %386
  %401 = load float, ptr %400, align 4
  %402 = fmul float %382, %401
  %403 = add nsw i64 %385, 1
  %404 = getelementptr inbounds float, ptr %8, i64 %385
  store float %402, ptr %404, align 4
  %405 = add nuw nsw i64 %389, 1
  %406 = icmp eq i64 %405, %364
  br i1 %406, label %383, label %384, !llvm.loop !349

407:                                              ; preds = %446, %383
  %408 = phi i32 [ %449, %446 ], [ %361, %383 ]
  %409 = phi i32 [ %448, %446 ], [ %360, %383 ]
  %410 = phi i32 [ %447, %446 ], [ 2, %383 ]
  %411 = phi float [ %415, %446 ], [ %379, %383 ]
  %412 = phi float [ %418, %446 ], [ %382, %383 ]
  %413 = fmul float %379, %411
  %414 = fmul float %382, %412
  %415 = fsub float %413, %414
  %416 = fmul float %379, %412
  %417 = fmul float %382, %411
  %418 = fadd float %416, %417
  br i1 %298, label %419, label %446

419:                                              ; preds = %407
  %420 = sext i32 %408 to i64
  %421 = sext i32 %409 to i64
  br label %422

422:                                              ; preds = %422, %419
  %423 = phi i64 [ %376, %419 ], [ %432, %422 ]
  %424 = phi i64 [ %375, %419 ], [ %440, %422 ]
  %425 = phi i64 [ %420, %419 ], [ %428, %422 ]
  %426 = phi i64 [ %421, %419 ], [ %436, %422 ]
  %427 = phi i32 [ 0, %419 ], [ %444, %422 ]
  %428 = add nsw i64 %425, 1
  %429 = getelementptr inbounds float, ptr %6, i64 %425
  %430 = load float, ptr %429, align 4
  %431 = fmul float %415, %430
  %432 = add nsw i64 %423, 1
  %433 = getelementptr inbounds float, ptr %8, i64 %423
  %434 = load float, ptr %433, align 4
  %435 = fadd float %434, %431
  store float %435, ptr %433, align 4
  %436 = add nsw i64 %426, 1
  %437 = getelementptr inbounds float, ptr %6, i64 %426
  %438 = load float, ptr %437, align 4
  %439 = fmul float %418, %438
  %440 = add nsw i64 %424, 1
  %441 = getelementptr inbounds float, ptr %8, i64 %424
  %442 = load float, ptr %441, align 4
  %443 = fadd float %442, %439
  store float %443, ptr %441, align 4
  %444 = add nuw nsw i32 %427, 1
  %445 = icmp eq i32 %444, %3
  br i1 %445, label %446, label %422, !llvm.loop !350

446:                                              ; preds = %422, %407
  %447 = add nuw nsw i32 %410, 1
  %448 = sub i32 %409, %3
  %449 = add i32 %408, %3
  %450 = icmp eq i32 %447, %362
  br i1 %450, label %451, label %407, !llvm.loop !351

451:                                              ; preds = %446, %383
  %452 = add nuw nsw i32 %372, 1
  %453 = add i32 %371, %3
  %454 = sub i32 %370, %3
  %455 = icmp eq i32 %452, %363
  br i1 %455, label %365, label %369, !llvm.loop !352

456:                                              ; preds = %472, %366
  %457 = phi i32 [ %3, %366 ], [ %474, %472 ]
  %458 = phi i32 [ 1, %366 ], [ %473, %472 ]
  br i1 %298, label %459, label %472

459:                                              ; preds = %456
  %460 = sext i32 %457 to i64
  br label %461

461:                                              ; preds = %461, %459
  %462 = phi i64 [ %460, %459 ], [ %464, %461 ]
  %463 = phi i64 [ 0, %459 ], [ %470, %461 ]
  %464 = add nsw i64 %462, 1
  %465 = getelementptr inbounds float, ptr %6, i64 %462
  %466 = load float, ptr %465, align 4
  %467 = getelementptr inbounds float, ptr %8, i64 %463
  %468 = load float, ptr %467, align 4
  %469 = fadd float %466, %468
  store float %469, ptr %467, align 4
  %470 = add nuw nsw i64 %463, 1
  %471 = icmp eq i64 %470, %368
  br i1 %471, label %472, label %461, !llvm.loop !353

472:                                              ; preds = %461, %456
  %473 = add nuw nsw i32 %458, 1
  %474 = add i32 %457, %3
  %475 = icmp eq i32 %473, %367
  br i1 %475, label %476, label %456, !llvm.loop !354

476:                                              ; preds = %472, %365, %352, %310
  %477 = phi i32 [ %353, %365 ], [ %353, %352 ], [ %311, %310 ], [ %353, %472 ]
  %478 = icmp slt i32 %0, %2
  br i1 %478, label %485, label %479

479:                                              ; preds = %476
  %480 = icmp sgt i32 %2, 0
  br i1 %480, label %481, label %528

481:                                              ; preds = %479
  %482 = icmp sgt i32 %0, 0
  %483 = sext i32 %0 to i64
  %484 = sext i32 %23 to i64
  br label %492

485:                                              ; preds = %476
  %486 = icmp sgt i32 %0, 0
  br i1 %486, label %487, label %528

487:                                              ; preds = %485
  %488 = icmp sgt i32 %2, 0
  %489 = zext i32 %0 to i64
  %490 = sext i32 %23 to i64
  %491 = zext i32 %0 to i64
  br label %512

492:                                              ; preds = %507, %481
  %493 = phi i64 [ 0, %481 ], [ %509, %507 ]
  %494 = phi i64 [ 0, %481 ], [ %508, %507 ]
  %495 = phi i32 [ 0, %481 ], [ %510, %507 ]
  br i1 %482, label %496, label %507

496:                                              ; preds = %496, %492
  %497 = phi i64 [ %503, %496 ], [ %493, %492 ]
  %498 = phi i64 [ %500, %496 ], [ %494, %492 ]
  %499 = phi i32 [ %505, %496 ], [ 0, %492 ]
  %500 = add nsw i64 %498, 1
  %501 = getelementptr inbounds float, ptr %7, i64 %498
  %502 = load float, ptr %501, align 4
  %503 = add nsw i64 %497, 1
  %504 = getelementptr inbounds float, ptr %4, i64 %497
  store float %502, ptr %504, align 4
  %505 = add nuw nsw i32 %499, 1
  %506 = icmp eq i32 %505, %0
  br i1 %506, label %507, label %496, !llvm.loop !355

507:                                              ; preds = %496, %492
  %508 = add i64 %494, %483
  %509 = add i64 %493, %484
  %510 = add nuw nsw i32 %495, 1
  %511 = icmp eq i32 %510, %2
  br i1 %511, label %528, label %492, !llvm.loop !356

512:                                              ; preds = %525, %487
  %513 = phi i64 [ 0, %487 ], [ %526, %525 ]
  br i1 %488, label %514, label %525

514:                                              ; preds = %514, %512
  %515 = phi i64 [ %522, %514 ], [ %513, %512 ]
  %516 = phi i64 [ %521, %514 ], [ %513, %512 ]
  %517 = phi i32 [ %523, %514 ], [ 0, %512 ]
  %518 = getelementptr inbounds float, ptr %7, i64 %516
  %519 = load float, ptr %518, align 4
  %520 = getelementptr inbounds float, ptr %4, i64 %515
  store float %519, ptr %520, align 4
  %521 = add i64 %516, %489
  %522 = add i64 %515, %490
  %523 = add nuw nsw i32 %517, 1
  %524 = icmp eq i32 %523, %2
  br i1 %524, label %525, label %514, !llvm.loop !357

525:                                              ; preds = %514, %512
  %526 = add nuw nsw i64 %513, 1
  %527 = icmp eq i64 %526, %491
  br i1 %527, label %528, label %512, !llvm.loop !358

528:                                              ; preds = %525, %507, %485, %479
  %529 = shl i32 %0, 1
  br i1 %309, label %530, label %568

530:                                              ; preds = %528
  %531 = icmp sgt i32 %2, 0
  %532 = mul i32 %22, %477
  %533 = sext i32 %0 to i64
  %534 = sext i32 %23 to i64
  %535 = tail call i32 @llvm.smax.i32(i32 %19, i32 2)
  br label %536

536:                                              ; preds = %562, %530
  %537 = phi i32 [ %529, %530 ], [ %566, %562 ]
  %538 = phi i32 [ %22, %530 ], [ %565, %562 ]
  %539 = phi i32 [ %532, %530 ], [ %564, %562 ]
  %540 = phi i32 [ 1, %530 ], [ %563, %562 ]
  br i1 %531, label %541, label %562

541:                                              ; preds = %536
  %542 = sext i32 %537 to i64
  %543 = sext i32 %538 to i64
  %544 = sext i32 %539 to i64
  br label %545

545:                                              ; preds = %545, %541
  %546 = phi i64 [ %542, %541 ], [ %557, %545 ]
  %547 = phi i64 [ %543, %541 ], [ %558, %545 ]
  %548 = phi i64 [ %544, %541 ], [ %559, %545 ]
  %549 = phi i32 [ 0, %541 ], [ %560, %545 ]
  %550 = getelementptr inbounds float, ptr %7, i64 %547
  %551 = load float, ptr %550, align 4
  %552 = add nsw i64 %546, -1
  %553 = getelementptr inbounds float, ptr %4, i64 %552
  store float %551, ptr %553, align 4
  %554 = getelementptr inbounds float, ptr %7, i64 %548
  %555 = load float, ptr %554, align 4
  %556 = getelementptr inbounds float, ptr %4, i64 %546
  store float %555, ptr %556, align 4
  %557 = add i64 %546, %534
  %558 = add i64 %547, %533
  %559 = add i64 %548, %533
  %560 = add nuw nsw i32 %549, 1
  %561 = icmp eq i32 %560, %2
  br i1 %561, label %562, label %545, !llvm.loop !359

562:                                              ; preds = %545, %536
  %563 = add nuw nsw i32 %540, 1
  %564 = sub i32 %539, %22
  %565 = add i32 %538, %22
  %566 = add i32 %537, %529
  %567 = icmp eq i32 %563, %535
  br i1 %567, label %568, label %536, !llvm.loop !360

568:                                              ; preds = %562, %528
  br i1 %24, label %722, label %569

569:                                              ; preds = %568
  %570 = icmp slt i32 %21, %2
  br i1 %570, label %643, label %571

571:                                              ; preds = %569
  br i1 %309, label %572, label %722

572:                                              ; preds = %571
  %573 = icmp sgt i32 %2, 0
  %574 = icmp sgt i32 %0, 2
  %575 = sext i32 %0 to i64
  %576 = mul i32 %22, %477
  %577 = sext i32 %23 to i64
  %578 = tail call i32 @llvm.smax.i32(i32 %19, i32 2)
  br label %579

579:                                              ; preds = %636, %572
  %580 = phi i32 [ %0, %572 ], [ %641, %636 ]
  %581 = phi i32 [ %529, %572 ], [ %640, %636 ]
  %582 = phi i32 [ %22, %572 ], [ %639, %636 ]
  %583 = phi i32 [ %576, %572 ], [ %638, %636 ]
  %584 = phi i32 [ 1, %572 ], [ %637, %636 ]
  br i1 %573, label %585, label %636

585:                                              ; preds = %579
  %586 = sext i32 %580 to i64
  %587 = sext i32 %581 to i64
  %588 = sext i32 %582 to i64
  %589 = sext i32 %583 to i64
  br label %590

590:                                              ; preds = %629, %585
  %591 = phi i64 [ %586, %585 ], [ %630, %629 ]
  %592 = phi i64 [ %587, %585 ], [ %631, %629 ]
  %593 = phi i64 [ %588, %585 ], [ %632, %629 ]
  %594 = phi i64 [ %589, %585 ], [ %633, %629 ]
  %595 = phi i32 [ 0, %585 ], [ %634, %629 ]
  br i1 %574, label %596, label %629

596:                                              ; preds = %596, %590
  %597 = phi i64 [ %627, %596 ], [ 2, %590 ]
  %598 = sub nsw i64 %575, %597
  %599 = add nsw i64 %597, %593
  %600 = add nsw i64 %599, -1
  %601 = getelementptr inbounds float, ptr %7, i64 %600
  %602 = load float, ptr %601, align 4
  %603 = add nsw i64 %597, %594
  %604 = add nsw i64 %603, -1
  %605 = getelementptr inbounds float, ptr %7, i64 %604
  %606 = load float, ptr %605, align 4
  %607 = fadd float %602, %606
  %608 = add nsw i64 %597, %592
  %609 = add nsw i64 %608, -1
  %610 = getelementptr inbounds float, ptr %4, i64 %609
  store float %607, ptr %610, align 4
  %611 = load float, ptr %601, align 4
  %612 = load float, ptr %605, align 4
  %613 = fsub float %611, %612
  %614 = add nsw i64 %598, %591
  %615 = add nsw i64 %614, -1
  %616 = getelementptr inbounds float, ptr %4, i64 %615
  store float %613, ptr %616, align 4
  %617 = getelementptr inbounds float, ptr %7, i64 %599
  %618 = load float, ptr %617, align 4
  %619 = getelementptr inbounds float, ptr %7, i64 %603
  %620 = load float, ptr %619, align 4
  %621 = fadd float %618, %620
  %622 = getelementptr inbounds float, ptr %4, i64 %608
  store float %621, ptr %622, align 4
  %623 = load float, ptr %619, align 4
  %624 = load float, ptr %617, align 4
  %625 = fsub float %623, %624
  %626 = getelementptr inbounds float, ptr %4, i64 %614
  store float %625, ptr %626, align 4
  %627 = add nuw nsw i64 %597, 2
  %628 = icmp slt i64 %627, %575
  br i1 %628, label %596, label %629, !llvm.loop !361

629:                                              ; preds = %596, %590
  %630 = add i64 %591, %577
  %631 = add i64 %592, %577
  %632 = add i64 %593, %575
  %633 = add i64 %594, %575
  %634 = add nuw nsw i32 %595, 1
  %635 = icmp eq i32 %634, %2
  br i1 %635, label %636, label %590, !llvm.loop !362

636:                                              ; preds = %629, %579
  %637 = add nuw nsw i32 %584, 1
  %638 = sub i32 %583, %22
  %639 = add i32 %582, %22
  %640 = add i32 %581, %529
  %641 = add i32 %580, %529
  %642 = icmp eq i32 %637, %578
  br i1 %642, label %722, label %579, !llvm.loop !363

643:                                              ; preds = %569
  br i1 %309, label %644, label %722

644:                                              ; preds = %643
  %645 = icmp sgt i32 %0, 2
  %646 = icmp sgt i32 %2, 0
  %647 = mul i32 %22, %477
  %648 = add i32 %647, 2
  %649 = sext i32 %0 to i64
  %650 = add i32 %22, 2
  %651 = add i32 %529, 2
  %652 = sext i32 %23 to i64
  %653 = add i32 %529, -2
  %654 = tail call i32 @llvm.smax.i32(i32 %19, i32 2)
  br label %655

655:                                              ; preds = %715, %644
  %656 = phi i32 [ %653, %644 ], [ %720, %715 ]
  %657 = phi i32 [ %651, %644 ], [ %719, %715 ]
  %658 = phi i32 [ %650, %644 ], [ %718, %715 ]
  %659 = phi i32 [ %648, %644 ], [ %717, %715 ]
  %660 = phi i32 [ 1, %644 ], [ %716, %715 ]
  br i1 %645, label %661, label %715

661:                                              ; preds = %708, %655
  %662 = phi i32 [ %714, %708 ], [ %656, %655 ]
  %663 = phi i32 [ %713, %708 ], [ %657, %655 ]
  %664 = phi i32 [ %712, %708 ], [ %658, %655 ]
  %665 = phi i32 [ %711, %708 ], [ %659, %655 ]
  %666 = phi i32 [ %709, %708 ], [ 2, %655 ]
  br i1 %646, label %667, label %708

667:                                              ; preds = %661
  %668 = sext i32 %662 to i64
  %669 = sext i32 %663 to i64
  %670 = sext i32 %664 to i64
  %671 = sext i32 %665 to i64
  br label %672

672:                                              ; preds = %672, %667
  %673 = phi i64 [ %668, %667 ], [ %702, %672 ]
  %674 = phi i64 [ %669, %667 ], [ %703, %672 ]
  %675 = phi i64 [ %670, %667 ], [ %704, %672 ]
  %676 = phi i64 [ %671, %667 ], [ %705, %672 ]
  %677 = phi i32 [ 0, %667 ], [ %706, %672 ]
  %678 = add nsw i64 %675, -1
  %679 = getelementptr inbounds float, ptr %7, i64 %678
  %680 = load float, ptr %679, align 4
  %681 = add nsw i64 %676, -1
  %682 = getelementptr inbounds float, ptr %7, i64 %681
  %683 = load float, ptr %682, align 4
  %684 = fadd float %680, %683
  %685 = add nsw i64 %674, -1
  %686 = getelementptr inbounds float, ptr %4, i64 %685
  store float %684, ptr %686, align 4
  %687 = load float, ptr %679, align 4
  %688 = load float, ptr %682, align 4
  %689 = fsub float %687, %688
  %690 = add nsw i64 %673, -1
  %691 = getelementptr inbounds float, ptr %4, i64 %690
  store float %689, ptr %691, align 4
  %692 = getelementptr inbounds float, ptr %7, i64 %675
  %693 = load float, ptr %692, align 4
  %694 = getelementptr inbounds float, ptr %7, i64 %676
  %695 = load float, ptr %694, align 4
  %696 = fadd float %693, %695
  %697 = getelementptr inbounds float, ptr %4, i64 %674
  store float %696, ptr %697, align 4
  %698 = load float, ptr %694, align 4
  %699 = load float, ptr %692, align 4
  %700 = fsub float %698, %699
  %701 = getelementptr inbounds float, ptr %4, i64 %673
  store float %700, ptr %701, align 4
  %702 = add i64 %673, %652
  %703 = add i64 %674, %652
  %704 = add i64 %675, %649
  %705 = add i64 %676, %649
  %706 = add nuw nsw i32 %677, 1
  %707 = icmp eq i32 %706, %2
  br i1 %707, label %708, label %672, !llvm.loop !364

708:                                              ; preds = %672, %661
  %709 = add nuw nsw i32 %666, 2
  %710 = icmp slt i32 %709, %0
  %711 = add i32 %665, 2
  %712 = add i32 %664, 2
  %713 = add i32 %663, 2
  %714 = add i32 %662, -2
  br i1 %710, label %661, label %715, !llvm.loop !365

715:                                              ; preds = %708, %655
  %716 = add nuw nsw i32 %660, 1
  %717 = sub i32 %659, %22
  %718 = add i32 %658, %22
  %719 = add i32 %657, %529
  %720 = add i32 %656, %529
  %721 = icmp eq i32 %716, %654
  br i1 %721, label %722, label %655, !llvm.loop !366

722:                                              ; preds = %715, %643, %636, %571, %568
  ret void
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write)
declare double @cos(double noundef) local_unnamed_addr #28

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write)
declare double @sin(double noundef) local_unnamed_addr #28

; Function Attrs: nounwind optsize uwtable
define internal i64 @_ve_envelope_search(ptr nocapture noundef readonly %0) #0 {
  %2 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8
  %4 = getelementptr inbounds %struct.vorbis_info, ptr %3, i64 0, i32 7
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr inbounds %struct.codec_setup_info, ptr %5, i64 0, i32 17
  %7 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 19
  %8 = load ptr, ptr %7, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr inbounds %struct.envelope_lookup, ptr %9, i64 0, i32 11
  %11 = load i64, ptr %10, align 8
  %12 = getelementptr inbounds %struct.envelope_lookup, ptr %9, i64 0, i32 2
  %13 = load i32, ptr %12, align 8
  %14 = sext i32 %13 to i64
  %15 = sdiv i64 %11, %14
  %16 = trunc i64 %15 to i32
  %17 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 5
  %18 = load i32, ptr %17, align 4
  %19 = sdiv i32 %18, %13
  %20 = add nsw i32 %19, -4
  %21 = tail call i32 @llvm.smax.i32(i32 %16, i32 0)
  %22 = add nsw i32 %19, 2
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds %struct.envelope_lookup, ptr %9, i64 0, i32 10
  %25 = load i64, ptr %24, align 8
  %26 = icmp slt i64 %25, %23
  br i1 %26, label %27, label %32

27:                                               ; preds = %1
  store i64 %23, ptr %24, align 8
  %28 = getelementptr inbounds %struct.envelope_lookup, ptr %9, i64 0, i32 9
  %29 = load ptr, ptr %28, align 8
  %30 = shl nsw i64 %23, 2
  %31 = tail call ptr @realloc(ptr noundef %29, i64 noundef %30) #61
  store ptr %31, ptr %28, align 8
  br label %32

32:                                               ; preds = %27, %1
  %33 = sext i32 %20 to i64
  %34 = icmp slt i32 %21, %20
  br i1 %34, label %35, label %103

35:                                               ; preds = %32
  %36 = zext i32 %21 to i64
  %37 = getelementptr inbounds %struct.envelope_lookup, ptr %9, i64 0, i32 8
  %38 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 2
  %39 = getelementptr inbounds %struct.envelope_lookup, ptr %9, i64 0, i32 6
  %40 = getelementptr inbounds %struct.envelope_lookup, ptr %9, i64 0, i32 7
  %41 = getelementptr inbounds %struct.envelope_lookup, ptr %9, i64 0, i32 9
  br label %42

42:                                               ; preds = %100, %35
  %43 = phi i64 [ %36, %35 ], [ %101, %100 ]
  %44 = load i32, ptr %37, align 8
  %45 = add nsw i32 %44, 1
  %46 = icmp slt i32 %44, 24
  %47 = select i1 %46, i32 %45, i32 24
  store i32 %47, ptr %37, align 8
  %48 = load i32, ptr %9, align 8
  %49 = icmp sgt i32 %48, 0
  br i1 %49, label %54, label %50

50:                                               ; preds = %42
  %51 = load ptr, ptr %41, align 8
  %52 = add nuw nsw i64 %43, 2
  %53 = getelementptr inbounds i32, ptr %51, i64 %52
  store i32 0, ptr %53, align 4
  br label %100

54:                                               ; preds = %54, %42
  %55 = phi i64 [ %69, %54 ], [ 0, %42 ]
  %56 = phi i32 [ %68, %54 ], [ 0, %42 ]
  %57 = load ptr, ptr %38, align 8
  %58 = getelementptr inbounds ptr, ptr %57, i64 %55
  %59 = load ptr, ptr %58, align 8
  %60 = load i32, ptr %12, align 8
  %61 = sext i32 %60 to i64
  %62 = mul nsw i64 %43, %61
  %63 = getelementptr inbounds float, ptr %59, i64 %62
  %64 = load ptr, ptr %40, align 8
  %65 = mul nuw nsw i64 %55, 7
  %66 = getelementptr inbounds %struct.envelope_filter_state, ptr %64, i64 %65
  %67 = tail call fastcc i32 @_ve_amp(ptr noundef nonnull %9, ptr noundef nonnull %6, ptr noundef %63, ptr noundef nonnull %39, ptr noundef %66) #56
  %68 = or i32 %67, %56
  %69 = add nuw nsw i64 %55, 1
  %70 = load i32, ptr %9, align 8
  %71 = sext i32 %70 to i64
  %72 = icmp slt i64 %69, %71
  br i1 %72, label %54, label %73, !llvm.loop !367

73:                                               ; preds = %54
  %.lcssa1 = phi i32 [ %68, %54 ]
  %74 = load ptr, ptr %41, align 8
  %75 = add nuw nsw i64 %43, 2
  %76 = getelementptr inbounds i32, ptr %74, i64 %75
  store i32 0, ptr %76, align 4
  %77 = and i32 %.lcssa1, 1
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %85, label %79

79:                                               ; preds = %73
  %80 = load ptr, ptr %41, align 8
  %81 = getelementptr inbounds i32, ptr %80, i64 %43
  store i32 1, ptr %81, align 4
  %82 = load ptr, ptr %41, align 8
  %83 = add nuw nsw i64 %43, 1
  %84 = getelementptr inbounds i32, ptr %82, i64 %83
  store i32 1, ptr %84, align 4
  br label %85

85:                                               ; preds = %79, %73
  %86 = and i32 %.lcssa1, 2
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %96, label %88

88:                                               ; preds = %85
  %89 = load ptr, ptr %41, align 8
  %90 = getelementptr inbounds i32, ptr %89, i64 %43
  store i32 1, ptr %90, align 4
  %91 = icmp eq i64 %43, 0
  br i1 %91, label %96, label %92

92:                                               ; preds = %88
  %93 = load ptr, ptr %41, align 8
  %94 = add nsw i64 %43, -1
  %95 = getelementptr inbounds i32, ptr %93, i64 %94
  store i32 1, ptr %95, align 4
  br label %96

96:                                               ; preds = %92, %88, %85
  %97 = and i32 %.lcssa1, 4
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %100, label %99

99:                                               ; preds = %96
  store i32 -1, ptr %37, align 8
  br label %100

100:                                              ; preds = %99, %96, %50
  %101 = add nuw nsw i64 %43, 1
  %102 = icmp eq i64 %101, %33
  br i1 %102, label %103, label %42, !llvm.loop !368

103:                                              ; preds = %100, %32
  %104 = load i32, ptr %12, align 8
  %105 = mul nsw i32 %104, %20
  %106 = sext i32 %105 to i64
  store i64 %106, ptr %10, align 8
  %107 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 12
  %108 = load i64, ptr %107, align 8
  %109 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 10
  %110 = load i64, ptr %109, align 8
  %111 = getelementptr inbounds [2 x i64], ptr %5, i64 0, i64 %110
  %112 = load i64, ptr %111, align 8
  %113 = sdiv i64 %112, 4
  %114 = add nsw i64 %113, %108
  %115 = getelementptr inbounds [2 x i64], ptr %5, i64 0, i64 1
  %116 = load i64, ptr %115, align 8
  %117 = sdiv i64 %116, 2
  %118 = add nsw i64 %114, %117
  %119 = load i64, ptr %5, align 8
  %120 = sdiv i64 %119, 4
  %121 = add nsw i64 %118, %120
  %122 = getelementptr inbounds %struct.envelope_lookup, ptr %9, i64 0, i32 13
  %123 = load i64, ptr %122, align 8
  %124 = sext i32 %104 to i64
  %125 = sub nsw i64 %106, %124
  %126 = icmp slt i64 %123, %125
  br i1 %126, label %127, label %145

127:                                              ; preds = %103
  %128 = getelementptr inbounds %struct.envelope_lookup, ptr %9, i64 0, i32 9
  br label %129

129:                                              ; preds = %142, %127
  %130 = phi i64 [ %123, %127 ], [ %143, %142 ]
  %131 = icmp slt i64 %130, %121
  br i1 %131, label %132, label %145

132:                                              ; preds = %129
  store i64 %130, ptr %122, align 8
  %133 = load ptr, ptr %128, align 8
  %134 = sdiv i64 %130, %124
  %135 = getelementptr inbounds i32, ptr %133, i64 %134
  %136 = load i32, ptr %135, align 4
  %137 = icmp ne i32 %136, 0
  %138 = icmp sgt i64 %130, %108
  %139 = select i1 %137, i1 %138, i1 false
  br i1 %139, label %140, label %142

140:                                              ; preds = %132
  %.lcssa = phi i64 [ %130, %132 ]
  %141 = getelementptr inbounds %struct.envelope_lookup, ptr %9, i64 0, i32 12
  store i64 %.lcssa, ptr %141, align 8
  br label %145

142:                                              ; preds = %132
  %143 = add nsw i64 %130, %124
  %144 = icmp slt i64 %143, %125
  br i1 %144, label %129, label %145, !llvm.loop !369

145:                                              ; preds = %142, %140, %129, %103
  %146 = phi i64 [ 0, %140 ], [ -1, %103 ], [ 1, %129 ], [ -1, %142 ]
  ret i64 %146
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @_ve_envelope_mark(ptr nocapture noundef readonly %0) #36 {
  %2 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 19
  %3 = load ptr, ptr %2, align 8
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr inbounds %struct.vorbis_info, ptr %6, i64 0, i32 7
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 12
  %10 = load i64, ptr %9, align 8
  %11 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 10
  %12 = load i64, ptr %11, align 8
  %13 = getelementptr inbounds [2 x i64], ptr %8, i64 0, i64 %12
  %14 = load i64, ptr %13, align 8
  %15 = sdiv i64 %14, 4
  %16 = add nsw i64 %15, %10
  %17 = icmp eq i64 %12, 0
  br i1 %17, label %29, label %18

18:                                               ; preds = %1
  %19 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 9
  %20 = load i64, ptr %19, align 8
  %21 = getelementptr inbounds [2 x i64], ptr %8, i64 0, i64 %20
  %22 = load i64, ptr %21, align 8
  %23 = sdiv i64 %22, 4
  %24 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 11
  %25 = load i64, ptr %24, align 8
  %26 = getelementptr inbounds [2 x i64], ptr %8, i64 0, i64 %25
  %27 = load i64, ptr %26, align 8
  %28 = sdiv i64 %27, 4
  br label %32

29:                                               ; preds = %1
  %30 = load i64, ptr %8, align 8
  %31 = sdiv i64 %30, 4
  br label %32

32:                                               ; preds = %29, %18
  %33 = phi i64 [ %28, %18 ], [ %31, %29 ]
  %34 = phi i64 [ %23, %18 ], [ %31, %29 ]
  %35 = add nsw i64 %15, %34
  %36 = sub i64 %10, %35
  %37 = add nsw i64 %16, %33
  %38 = getelementptr inbounds %struct.envelope_lookup, ptr %4, i64 0, i32 12
  %39 = load i64, ptr %38, align 8
  %40 = icmp sge i64 %39, %36
  %41 = icmp slt i64 %39, %37
  %42 = select i1 %40, i1 %41, i1 false
  br i1 %42, label %67, label %43

43:                                               ; preds = %32
  %44 = getelementptr inbounds %struct.envelope_lookup, ptr %4, i64 0, i32 2
  %45 = load i32, ptr %44, align 8
  %46 = sext i32 %45 to i64
  %47 = sdiv i64 %36, %46
  %48 = sdiv i64 %37, %46
  %49 = icmp slt i64 %47, %48
  br i1 %49, label %50, label %67

50:                                               ; preds = %43
  %51 = getelementptr inbounds %struct.envelope_lookup, ptr %4, i64 0, i32 9
  %52 = load ptr, ptr %51, align 8
  %53 = getelementptr inbounds i32, ptr %52, i64 %47
  %54 = load i32, ptr %53, align 4
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %67

56:                                               ; preds = %60, %50
  %57 = phi i64 [ %58, %60 ], [ %47, %50 ]
  %58 = add i64 %57, 1
  %59 = icmp eq i64 %58, %48
  br i1 %59, label %64, label %60, !llvm.loop !370

60:                                               ; preds = %56
  %61 = getelementptr inbounds i32, ptr %52, i64 %58
  %62 = load i32, ptr %61, align 4
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %56, label %64, !llvm.loop !370

64:                                               ; preds = %60, %56
  %.lcssa = phi i64 [ %58, %60 ], [ %58, %56 ]
  %65 = icmp slt i64 %.lcssa, %48
  %66 = zext i1 %65 to i32
  br label %67

67:                                               ; preds = %64, %50, %43, %32
  %68 = phi i32 [ 1, %32 ], [ 0, %43 ], [ 1, %50 ], [ %66, %64 ]
  ret i32 %68
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal void @_ve_envelope_shift(ptr nocapture noundef %0, i64 noundef %1) #44 {
  %3 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 11
  %4 = load i64, ptr %3, align 8
  %5 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 2
  %6 = load i32, ptr %5, align 8
  %7 = sext i32 %6 to i64
  %8 = sdiv i64 %4, %7
  %9 = add i64 %8, 2
  %10 = sdiv i64 %1, %7
  %11 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 9
  %12 = load ptr, ptr %11, align 8
  %13 = shl i64 %10, 32
  %14 = ashr exact i64 %13, 32
  %15 = getelementptr inbounds i32, ptr %12, i64 %14
  %16 = sub i64 %9, %10
  %17 = shl i64 %16, 32
  %18 = ashr exact i64 %17, 30
  tail call void @llvm.memmove.p0.p0.i64(ptr align 4 %12, ptr align 4 %15, i64 %18, i1 false)
  %19 = load i64, ptr %3, align 8
  %20 = sub nsw i64 %19, %1
  store i64 %20, ptr %3, align 8
  %21 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 12
  %22 = load i64, ptr %21, align 8
  %23 = icmp sgt i64 %22, -1
  br i1 %23, label %24, label %26

24:                                               ; preds = %2
  %25 = sub nsw i64 %22, %1
  store i64 %25, ptr %21, align 8
  br label %26

26:                                               ; preds = %24, %2
  %27 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 13
  %28 = load i64, ptr %27, align 8
  %29 = sub nsw i64 %28, %1
  store i64 %29, ptr %27, align 8
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal fastcc i32 @_ve_amp(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, ptr nocapture noundef %4) unnamed_addr #21 {
  %6 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 1
  %7 = load i32, ptr %6, align 4
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 3
  %10 = load float, ptr %9, align 4
  %11 = shl nsw i64 %8, 2
  %12 = alloca i8, i64 %11, align 16
  %13 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 8
  %14 = load i32, ptr %13, align 8
  %15 = icmp sgt i32 %14, 5
  %16 = sdiv i32 %14, 2
  %17 = select i1 %15, i32 %16, i32 2
  %18 = getelementptr inbounds %struct.vorbis_info_psy_global, ptr %1, i64 0, i32 3
  %19 = load float, ptr %18, align 4
  %20 = add nsw i32 %16, -2
  %21 = sitofp i32 %20 to float
  %22 = fsub float %19, %21
  %23 = fcmp olt float %22, 0.000000e+00
  %24 = select i1 %23, float 0.000000e+00, float %22
  %25 = fcmp ogt float %24, %19
  %26 = select i1 %25, float %19, float %24
  %27 = icmp sgt i32 %7, 0
  br i1 %27, label %28, label %41

28:                                               ; preds = %5
  %29 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 5
  %30 = load ptr, ptr %29, align 8
  br label %31

31:                                               ; preds = %31, %28
  %32 = phi i64 [ 0, %28 ], [ %39, %31 ]
  %33 = getelementptr inbounds float, ptr %2, i64 %32
  %34 = load float, ptr %33, align 4
  %35 = getelementptr inbounds float, ptr %30, i64 %32
  %36 = load float, ptr %35, align 4
  %37 = fmul float %34, %36
  %38 = getelementptr inbounds float, ptr %12, i64 %32
  store float %37, ptr %38, align 4
  %39 = add nuw nsw i64 %32, 1
  %40 = icmp eq i64 %39, %8
  br i1 %40, label %41, label %31, !llvm.loop !371

41:                                               ; preds = %31, %5
  %42 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 4
  call void @mdct_forward(ptr noundef nonnull %42, ptr noundef nonnull %12, ptr noundef nonnull %12) #56
  %43 = load float, ptr %12, align 16
  %44 = fmul float %43, %43
  %45 = fpext float %44 to double
  %46 = getelementptr inbounds float, ptr %12, i64 1
  %47 = load float, ptr %46, align 4
  %48 = fpext float %47 to double
  %49 = fmul double %48, 0x3FE6666666666666
  %50 = fmul double %49, %48
  %51 = fadd double %50, %45
  %52 = getelementptr inbounds float, ptr %12, i64 2
  %53 = load float, ptr %52, align 8
  %54 = fpext float %53 to double
  %55 = fmul double %54, 2.000000e-01
  %56 = fmul double %55, %54
  %57 = fadd double %51, %56
  %58 = fptrunc double %57 to float
  %59 = getelementptr inbounds %struct.envelope_filter_state, ptr %4, i64 0, i32 5
  %60 = load i32, ptr %59, align 4
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %67

62:                                               ; preds = %41
  %63 = getelementptr inbounds %struct.envelope_filter_state, ptr %4, i64 0, i32 4
  %64 = load float, ptr %63, align 4
  %65 = fadd float %64, %58
  %66 = getelementptr inbounds %struct.envelope_filter_state, ptr %4, i64 0, i32 3
  store float %65, ptr %66, align 4
  store float %58, ptr %63, align 4
  br label %74

67:                                               ; preds = %41
  %68 = getelementptr inbounds %struct.envelope_filter_state, ptr %4, i64 0, i32 3
  %69 = load <2 x float>, ptr %68, align 4
  %70 = insertelement <2 x float> poison, float %58, i64 0
  %71 = shufflevector <2 x float> %70, <2 x float> poison, <2 x i32> zeroinitializer
  %72 = fadd <2 x float> %69, %71
  store <2 x float> %72, ptr %68, align 4
  %73 = extractelement <2 x float> %72, i64 0
  br label %74

74:                                               ; preds = %67, %62
  %75 = phi float [ %65, %62 ], [ %73, %67 ]
  %76 = sext i32 %60 to i64
  %77 = getelementptr inbounds %struct.envelope_filter_state, ptr %4, i64 0, i32 2, i64 %76
  %78 = load float, ptr %77, align 4
  %79 = getelementptr inbounds %struct.envelope_filter_state, ptr %4, i64 0, i32 3
  %80 = fsub float %75, %78
  store float %80, ptr %79, align 4
  store float %58, ptr %77, align 4
  %81 = load i32, ptr %59, align 4
  %82 = add nsw i32 %81, 1
  %83 = icmp sgt i32 %81, 13
  %84 = select i1 %83, i32 0, i32 %82
  store i32 %84, ptr %59, align 4
  %85 = sdiv i64 %8, 2
  %86 = icmp sgt i32 %7, 1
  br i1 %86, label %87, label %98

87:                                               ; preds = %74
  %88 = fmul float %75, 6.250000e-02
  %89 = bitcast float %88 to i32
  %90 = and i32 %89, 2147483647
  %91 = sitofp i32 %90 to float
  %92 = fmul float %91, 0x3EA8151820000000
  %93 = fadd float %92, 0xC087E22B60000000
  %94 = fpext float %93 to double
  %95 = fmul double %94, 5.000000e-01
  %96 = fadd double %95, -1.500000e+01
  %97 = fptrunc double %96 to float
  br label %101

98:                                               ; preds = %101, %74
  %99 = zext i32 %17 to i64
  %100 = icmp eq i32 %17, 0
  br label %125

101:                                              ; preds = %101, %87
  %102 = phi i64 [ %123, %101 ], [ 0, %87 ]
  %103 = phi float [ %122, %101 ], [ %97, %87 ]
  %104 = getelementptr inbounds float, ptr %12, i64 %102
  %105 = load <2 x float>, ptr %104, align 8
  %106 = fmul <2 x float> %105, %105
  %107 = shufflevector <2 x float> %106, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %108 = fadd <2 x float> %106, %107
  %109 = bitcast <2 x float> %108 to <2 x i32>
  %110 = extractelement <2 x i32> %109, i64 0
  %111 = and i32 %110, 2147483647
  %112 = sitofp i32 %111 to float
  %113 = fmul float %112, 0x3EA8151820000000
  %114 = fadd float %113, 0xC087E22B60000000
  %115 = fmul float %114, 5.000000e-01
  %116 = fcmp olt float %115, %103
  %117 = select i1 %116, float %103, float %115
  %118 = fcmp olt float %117, %10
  %119 = select i1 %118, float %10, float %117
  %120 = lshr exact i64 %102, 1
  %121 = getelementptr inbounds float, ptr %12, i64 %120
  store float %119, ptr %121, align 4
  %122 = fadd float %103, -8.000000e+00
  %123 = add nuw nsw i64 %102, 2
  %124 = icmp slt i64 %123, %85
  br i1 %124, label %101, label %98, !llvm.loop !372

125:                                              ; preds = %185, %98
  %126 = phi i32 [ 0, %98 ], [ %207, %185 ]
  %127 = phi i64 [ 0, %98 ], [ %208, %185 ]
  %128 = getelementptr inbounds %struct.envelope_band, ptr %3, i64 %127, i32 1
  %129 = load i32, ptr %128, align 4
  %130 = sext i32 %129 to i64
  %131 = icmp sgt i32 %129, 0
  br i1 %131, label %132, label %150

132:                                              ; preds = %125
  %133 = getelementptr inbounds %struct.envelope_band, ptr %3, i64 %127
  %134 = load i32, ptr %133, align 8
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds %struct.envelope_band, ptr %3, i64 %127, i32 2
  %137 = load ptr, ptr %136, align 8
  br label %138

138:                                              ; preds = %138, %132
  %139 = phi i64 [ 0, %132 ], [ %148, %138 ]
  %140 = phi float [ 0.000000e+00, %132 ], [ %147, %138 ]
  %141 = add nsw i64 %139, %135
  %142 = getelementptr inbounds float, ptr %12, i64 %141
  %143 = load float, ptr %142, align 4
  %144 = getelementptr inbounds float, ptr %137, i64 %139
  %145 = load float, ptr %144, align 4
  %146 = fmul float %143, %145
  %147 = fadd float %140, %146
  %148 = add nuw nsw i64 %139, 1
  %149 = icmp eq i64 %148, %130
  br i1 %149, label %150, label %138, !llvm.loop !373

150:                                              ; preds = %138, %125
  %151 = phi float [ 0.000000e+00, %125 ], [ %147, %138 ]
  %152 = getelementptr inbounds %struct.envelope_band, ptr %3, i64 %127, i32 3
  %153 = load float, ptr %152, align 8
  %154 = fmul float %151, %153
  %155 = getelementptr inbounds %struct.envelope_filter_state, ptr %4, i64 %127
  %156 = getelementptr inbounds %struct.envelope_filter_state, ptr %4, i64 %127, i32 1
  %157 = load i32, ptr %156, align 4
  %158 = icmp slt i32 %157, 1
  %159 = select i1 %158, i32 16, i32 -1
  %160 = add nsw i32 %159, %157
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds [17 x float], ptr %155, i64 0, i64 %161
  %163 = load float, ptr %162, align 4
  %164 = fcmp olt float %154, %163
  %165 = select i1 %164, float %163, float %154
  %166 = fcmp ogt float %154, %163
  %167 = select i1 %166, float %163, float %154
  br i1 %100, label %185, label %168

168:                                              ; preds = %168, %150
  %169 = phi float [ %182, %168 ], [ 9.999900e+04, %150 ]
  %170 = phi float [ %180, %168 ], [ -9.999900e+04, %150 ]
  %171 = phi i64 [ %183, %168 ], [ 0, %150 ]
  %172 = phi i32 [ %175, %168 ], [ %160, %150 ]
  %173 = icmp slt i32 %172, 1
  %174 = select i1 %173, i32 16, i32 -1
  %175 = add nsw i32 %174, %172
  %176 = sext i32 %175 to i64
  %177 = getelementptr inbounds [17 x float], ptr %155, i64 0, i64 %176
  %178 = load float, ptr %177, align 4
  %179 = fcmp olt float %170, %178
  %180 = select i1 %179, float %178, float %170
  %181 = fcmp ogt float %169, %178
  %182 = select i1 %181, float %178, float %169
  %183 = add nuw nsw i64 %171, 1
  %184 = icmp eq i64 %183, %99
  br i1 %184, label %185, label %168, !llvm.loop !374

185:                                              ; preds = %168, %150
  %186 = phi float [ -9.999900e+04, %150 ], [ %180, %168 ]
  %187 = phi float [ 9.999900e+04, %150 ], [ %182, %168 ]
  %188 = fsub float %167, %187
  %189 = fsub float %165, %186
  %190 = sext i32 %157 to i64
  %191 = getelementptr inbounds [17 x float], ptr %155, i64 0, i64 %190
  store float %154, ptr %191, align 4
  %192 = load i32, ptr %156, align 4
  %193 = add nsw i32 %192, 1
  %194 = icmp sgt i32 %192, 15
  %195 = select i1 %194, i32 0, i32 %193
  store i32 %195, ptr %156, align 4
  %196 = getelementptr inbounds %struct.vorbis_info_psy_global, ptr %1, i64 0, i32 1, i64 %127
  %197 = load float, ptr %196, align 4
  %198 = fadd float %26, %197
  %199 = fcmp ogt float %189, %198
  %200 = or i32 %126, 5
  %201 = select i1 %199, i32 %200, i32 %126
  %202 = getelementptr inbounds %struct.vorbis_info_psy_global, ptr %1, i64 0, i32 2, i64 %127
  %203 = load float, ptr %202, align 4
  %204 = fsub float %203, %26
  %205 = fcmp olt float %188, %204
  %206 = or i32 %201, 2
  %207 = select i1 %205, i32 %206, i32 %201
  %208 = add nuw nsw i64 %127, 1
  %209 = icmp eq i64 %208, 7
  br i1 %209, label %210, label %125, !llvm.loop !375

210:                                              ; preds = %185
  %.lcssa = phi i32 [ %207, %185 ]
  ret i32 %.lcssa
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal fastcc void @_preextrapolate_helper(ptr nocapture noundef %0) unnamed_addr #21 {
  %2 = alloca [128 x i8], align 16
  %3 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 5
  %4 = load i32, ptr %3, align 4
  %5 = sext i32 %4 to i64
  %6 = shl nsw i64 %5, 2
  %7 = alloca i8, i64 %6, align 16
  %8 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 7
  store i32 1, ptr %8, align 4
  %9 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 12
  %10 = load i64, ptr %9, align 8
  %11 = sub nsw i64 %5, %10
  %12 = icmp sgt i64 %11, 64
  br i1 %12, label %13, label %83

13:                                               ; preds = %1
  %14 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 1
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr inbounds %struct.vorbis_info, ptr %15, i64 0, i32 1
  %17 = load i32, ptr %16, align 4
  %18 = icmp sgt i32 %17, 0
  br i1 %18, label %19, label %83

19:                                               ; preds = %13
  %20 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 2
  br label %21

21:                                               ; preds = %75, %19
  %22 = phi ptr [ %15, %19 ], [ %76, %75 ]
  %23 = phi i32 [ %4, %19 ], [ %77, %75 ]
  %24 = phi i64 [ 0, %19 ], [ %78, %75 ]
  %25 = sext i32 %23 to i64
  %26 = icmp sgt i32 %23, 0
  br i1 %26, label %27, label %66

27:                                               ; preds = %21
  %28 = load ptr, ptr %20, align 8
  %29 = getelementptr inbounds ptr, ptr %28, i64 %24
  br label %30

30:                                               ; preds = %30, %27
  %31 = phi i64 [ 0, %27 ], [ %38, %30 ]
  %32 = load ptr, ptr %29, align 8
  %33 = xor i64 %31, -1
  %34 = add nsw i64 %25, %33
  %35 = getelementptr inbounds float, ptr %32, i64 %34
  %36 = load float, ptr %35, align 4
  %37 = getelementptr inbounds float, ptr %7, i64 %31
  store float %36, ptr %37, align 4
  %38 = add nuw nsw i64 %31, 1
  %39 = icmp eq i64 %38, %25
  br i1 %39, label %40, label %30, !llvm.loop !376

40:                                               ; preds = %30
  %41 = load i64, ptr %9, align 8
  %42 = trunc i64 %41 to i32
  %43 = sub i32 %23, %42
  %44 = call float @vorbis_lpc_from_data(ptr noundef nonnull %7, ptr noundef nonnull %2, i32 noundef %43, i32 noundef 32) #56
  %45 = getelementptr inbounds float, ptr %7, i64 %25
  %46 = sub i64 0, %41
  %47 = getelementptr inbounds float, ptr %45, i64 %46
  %48 = getelementptr inbounds float, ptr %47, i64 -32
  call void @vorbis_lpc_predict(ptr noundef nonnull %2, ptr noundef nonnull %48, i32 noundef 32, ptr noundef nonnull %47, i64 noundef %41) #56
  br i1 %26, label %49, label %75

49:                                               ; preds = %49, %40
  %50 = phi i64 [ %62, %49 ], [ %25, %40 ]
  %51 = phi i64 [ %60, %49 ], [ 0, %40 ]
  %52 = getelementptr inbounds float, ptr %7, i64 %51
  %53 = load float, ptr %52, align 4
  %54 = load ptr, ptr %20, align 8
  %55 = getelementptr inbounds ptr, ptr %54, i64 %24
  %56 = load ptr, ptr %55, align 8
  %57 = xor i64 %51, -1
  %58 = add i64 %50, %57
  %59 = getelementptr inbounds float, ptr %56, i64 %58
  store float %53, ptr %59, align 4
  %60 = add nuw nsw i64 %51, 1
  %61 = load i32, ptr %3, align 4
  %62 = sext i32 %61 to i64
  %63 = icmp slt i64 %60, %62
  br i1 %63, label %49, label %64, !llvm.loop !377

64:                                               ; preds = %49
  %.lcssa = phi i32 [ %61, %49 ]
  %65 = load ptr, ptr %14, align 8
  br label %75

66:                                               ; preds = %21
  %67 = load i64, ptr %9, align 8
  %68 = trunc i64 %67 to i32
  %69 = sub i32 %23, %68
  %70 = call float @vorbis_lpc_from_data(ptr noundef nonnull %7, ptr noundef nonnull %2, i32 noundef %69, i32 noundef 32) #56
  %71 = getelementptr inbounds float, ptr %7, i64 %25
  %72 = sub i64 0, %67
  %73 = getelementptr inbounds float, ptr %71, i64 %72
  %74 = getelementptr inbounds float, ptr %73, i64 -32
  call void @vorbis_lpc_predict(ptr noundef nonnull %2, ptr noundef nonnull %74, i32 noundef 32, ptr noundef nonnull %73, i64 noundef %67) #56
  br label %75

75:                                               ; preds = %66, %64, %40
  %76 = phi ptr [ %65, %64 ], [ %22, %40 ], [ %22, %66 ]
  %77 = phi i32 [ %.lcssa, %64 ], [ %23, %40 ], [ %23, %66 ]
  %78 = add nuw nsw i64 %24, 1
  %79 = getelementptr inbounds %struct.vorbis_info, ptr %76, i64 0, i32 1
  %80 = load i32, ptr %79, align 4
  %81 = sext i32 %80 to i64
  %82 = icmp slt i64 %78, %81
  br i1 %82, label %21, label %83, !llvm.loop !378

83:                                               ; preds = %75, %13, %1
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(argmem: readwrite) uwtable
define internal float @vorbis_lpc_from_data(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1, i32 noundef %2, i32 noundef %3) #40 {
  %5 = add nsw i32 %3, 1
  %6 = sext i32 %5 to i64
  %7 = shl nsw i64 %6, 3
  %8 = alloca i8, i64 %7, align 16
  %9 = sext i32 %3 to i64
  %10 = shl nsw i64 %9, 3
  %11 = alloca i8, i64 %10, align 16
  %12 = icmp eq i32 %5, 0
  br i1 %12, label %39, label %13

13:                                               ; preds = %4
  %14 = sext i32 %2 to i64
  br label %15

15:                                               ; preds = %32, %13
  %16 = phi i64 [ %9, %13 ], [ %35, %32 ]
  %17 = icmp slt i64 %16, %14
  br i1 %17, label %18, label %32

18:                                               ; preds = %18, %15
  %19 = phi i64 [ %30, %18 ], [ %16, %15 ]
  %20 = phi double [ %29, %18 ], [ 0.000000e+00, %15 ]
  %21 = getelementptr inbounds float, ptr %0, i64 %19
  %22 = load float, ptr %21, align 4
  %23 = fpext float %22 to double
  %24 = sub nsw i64 %19, %16
  %25 = getelementptr inbounds float, ptr %0, i64 %24
  %26 = load float, ptr %25, align 4
  %27 = fpext float %26 to double
  %28 = fmul double %23, %27
  %29 = fadd double %20, %28
  %30 = add nsw i64 %19, 1
  %31 = icmp slt i64 %30, %14
  br i1 %31, label %18, label %32, !llvm.loop !379

32:                                               ; preds = %18, %15
  %33 = phi double [ 0.000000e+00, %15 ], [ %29, %18 ]
  %34 = getelementptr inbounds double, ptr %8, i64 %16
  store double %33, ptr %34, align 8
  %35 = add nsw i64 %16, -1
  %36 = icmp eq i64 %16, 0
  br i1 %36, label %37, label %15, !llvm.loop !380

37:                                               ; preds = %32
  %38 = load double, ptr %8, align 16
  br label %39

39:                                               ; preds = %37, %4
  %40 = phi double [ %38, %37 ], [ undef, %4 ]
  %41 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %42 = zext i32 %41 to i64
  %43 = icmp slt i32 %3, 1
  br i1 %43, label %44, label %49

44:                                               ; preds = %110, %39
  %45 = phi double [ %40, %39 ], [ %114, %110 ]
  %46 = icmp sgt i32 %3, 0
  br i1 %46, label %47, label %127

47:                                               ; preds = %44
  %48 = zext i32 %3 to i64
  br label %119

49:                                               ; preds = %110, %39
  %50 = phi i32 [ %117, %110 ], [ 1, %39 ]
  %51 = phi i32 [ %115, %110 ], [ 0, %39 ]
  %52 = phi double [ %114, %110 ], [ %40, %39 ]
  %53 = phi i64 [ %54, %110 ], [ 0, %39 ]
  %54 = add nuw nsw i64 %53, 1
  %55 = fcmp une double %52, 0.000000e+00
  br i1 %55, label %58, label %56

56:                                               ; preds = %49
  %57 = shl nsw i64 %9, 2
  tail call void @llvm.memset.p0.i64(ptr align 4 %1, i8 0, i64 %57, i1 false)
  br label %129

58:                                               ; preds = %49
  %59 = and i64 %54, 4294967295
  %60 = getelementptr inbounds double, ptr %8, i64 %59
  %61 = load double, ptr %60, align 8
  %62 = fneg double %61
  %63 = icmp eq i64 %53, 0
  br i1 %63, label %64, label %67

64:                                               ; preds = %58
  %65 = fdiv double %62, %52
  %66 = getelementptr inbounds double, ptr %11, i64 %53
  store double %65, ptr %66, align 8
  br label %110

67:                                               ; preds = %67, %58
  %68 = phi i64 [ %77, %67 ], [ 0, %58 ]
  %69 = phi double [ %76, %67 ], [ %62, %58 ]
  %70 = getelementptr inbounds double, ptr %11, i64 %68
  %71 = load double, ptr %70, align 8
  %72 = sub nsw i64 %53, %68
  %73 = getelementptr inbounds double, ptr %8, i64 %72
  %74 = load double, ptr %73, align 8
  %75 = fmul double %71, %74
  %76 = fsub double %69, %75
  %77 = add nuw nsw i64 %68, 1
  %78 = icmp eq i64 %77, %53
  br i1 %78, label %79, label %67, !llvm.loop !381

79:                                               ; preds = %67
  %.lcssa = phi double [ %76, %67 ]
  %80 = fdiv double %.lcssa, %52
  %81 = getelementptr inbounds double, ptr %11, i64 %53
  store double %80, ptr %81, align 8
  %82 = icmp ult i64 %53, 2
  br i1 %82, label %100, label %83

83:                                               ; preds = %79
  %84 = zext i32 %50 to i64
  br label %85

85:                                               ; preds = %85, %83
  %86 = phi i64 [ 0, %83 ], [ %98, %85 ]
  %87 = getelementptr inbounds double, ptr %11, i64 %86
  %88 = load double, ptr %87, align 8
  %89 = xor i64 %86, -1
  %90 = add nsw i64 %53, %89
  %91 = getelementptr inbounds double, ptr %11, i64 %90
  %92 = load double, ptr %91, align 8
  %93 = fmul double %80, %92
  %94 = fadd double %88, %93
  store double %94, ptr %87, align 8
  %95 = fmul double %80, %88
  %96 = load double, ptr %91, align 8
  %97 = fadd double %95, %96
  store double %97, ptr %91, align 8
  %98 = add nuw nsw i64 %86, 1
  %99 = icmp eq i64 %98, %84
  br i1 %99, label %100, label %85, !llvm.loop !382

100:                                              ; preds = %85, %79
  %101 = phi i32 [ 0, %79 ], [ %50, %85 ]
  %102 = and i32 %51, 1
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %110, label %104

104:                                              ; preds = %100
  %105 = zext i32 %101 to i64
  %106 = getelementptr inbounds double, ptr %11, i64 %105
  %107 = load double, ptr %106, align 8
  %108 = fmul double %80, %107
  %109 = fadd double %107, %108
  store double %109, ptr %106, align 8
  br label %110

110:                                              ; preds = %104, %100, %64
  %111 = phi double [ %65, %64 ], [ %80, %100 ], [ %80, %104 ]
  %112 = fmul double %111, %111
  %113 = fsub double 1.000000e+00, %112
  %114 = fmul double %52, %113
  %115 = trunc i64 %54 to i32
  %116 = lshr i32 %115, 1
  %117 = tail call i32 @llvm.umax.i32(i32 %116, i32 1)
  %118 = icmp eq i64 %54, %42
  br i1 %118, label %44, label %49

119:                                              ; preds = %119, %47
  %120 = phi i64 [ 0, %47 ], [ %125, %119 ]
  %121 = getelementptr inbounds double, ptr %11, i64 %120
  %122 = load double, ptr %121, align 8
  %123 = fptrunc double %122 to float
  %124 = getelementptr inbounds float, ptr %1, i64 %120
  store float %123, ptr %124, align 4
  %125 = add nuw nsw i64 %120, 1
  %126 = icmp eq i64 %125, %48
  br i1 %126, label %127, label %119, !llvm.loop !383

127:                                              ; preds = %119, %44
  %128 = fptrunc double %45 to float
  br label %129

129:                                              ; preds = %127, %56
  %130 = phi float [ %128, %127 ], [ 0.000000e+00, %56 ]
  ret float %130
}

; Function Attrs: nofree nosync nounwind optsize memory(argmem: readwrite) uwtable
define internal void @vorbis_lpc_predict(ptr nocapture noundef readonly %0, ptr noundef readonly %1, i32 noundef %2, ptr nocapture noundef writeonly %3, i64 noundef %4) #40 {
  %6 = sext i32 %2 to i64
  %7 = add nsw i64 %6, %4
  %8 = shl i64 %7, 2
  %9 = alloca i8, i64 %8, align 16
  %10 = icmp eq ptr %1, null
  %11 = icmp sgt i32 %2, 0
  br i1 %10, label %15, label %12

12:                                               ; preds = %5
  br i1 %11, label %13, label %18

13:                                               ; preds = %12
  %14 = shl nuw nsw i64 %6, 2
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 16 %9, ptr nonnull align 4 %1, i64 %14, i1 false)
  br label %18

15:                                               ; preds = %5
  br i1 %11, label %16, label %18

16:                                               ; preds = %15
  %17 = shl nuw nsw i64 %6, 2
  call void @llvm.memset.p0.i64(ptr nonnull align 16 %9, i8 0, i64 %17, i1 false)
  br label %18

18:                                               ; preds = %16, %15, %13, %12
  %19 = icmp sgt i64 %4, 0
  br i1 %19, label %20, label %46

20:                                               ; preds = %18
  %21 = icmp sgt i32 %2, 0
  br label %22

22:                                               ; preds = %38, %20
  %23 = phi i64 [ %6, %20 ], [ %44, %38 ]
  %24 = phi i64 [ 0, %20 ], [ %43, %38 ]
  br i1 %21, label %25, label %38

25:                                               ; preds = %25, %22
  %26 = phi float [ %36, %25 ], [ 0.000000e+00, %22 ]
  %27 = phi i64 [ %32, %25 ], [ %6, %22 ]
  %28 = phi i64 [ %29, %25 ], [ %24, %22 ]
  %29 = add nuw i64 %28, 1
  %30 = getelementptr inbounds float, ptr %9, i64 %28
  %31 = load float, ptr %30, align 4
  %32 = add nsw i64 %27, -1
  %33 = getelementptr inbounds float, ptr %0, i64 %32
  %34 = load float, ptr %33, align 4
  %35 = fmul float %31, %34
  %36 = fsub float %26, %35
  %37 = icmp eq i64 %29, %23
  br i1 %37, label %38, label %25, !llvm.loop !384

38:                                               ; preds = %25, %22
  %39 = phi i64 [ %24, %22 ], [ %23, %25 ]
  %40 = phi float [ 0.000000e+00, %22 ], [ %36, %25 ]
  %41 = getelementptr inbounds float, ptr %9, i64 %39
  store float %40, ptr %41, align 4
  %42 = getelementptr inbounds float, ptr %3, i64 %24
  store float %40, ptr %42, align 4
  %43 = add nuw nsw i64 %24, 1
  %44 = add i64 %23, 1
  %45 = icmp eq i64 %43, %4
  br i1 %45, label %46, label %22, !llvm.loop !385

46:                                               ; preds = %38, %18
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @ogg_page_checksum_set(ptr noundef readonly %0) #20 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %72, label %3

3:                                                ; preds = %1
  %4 = load ptr, ptr %0, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 22
  store i8 0, ptr %5, align 1
  %6 = load ptr, ptr %0, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 23
  store i8 0, ptr %7, align 1
  %8 = load ptr, ptr %0, align 8
  %9 = getelementptr inbounds i8, ptr %8, i64 24
  store i8 0, ptr %9, align 1
  %10 = load ptr, ptr %0, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 25
  store i8 0, ptr %11, align 1
  %12 = getelementptr inbounds %struct.ogg_page, ptr %0, i64 0, i32 1
  %13 = load i64, ptr %12, align 8
  %14 = icmp sgt i64 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %3
  %16 = load ptr, ptr %0, align 8
  br label %25

17:                                               ; preds = %25, %3
  %18 = phi i32 [ 0, %3 ], [ %37, %25 ]
  %19 = getelementptr inbounds %struct.ogg_page, ptr %0, i64 0, i32 3
  %20 = load i64, ptr %19, align 8
  %21 = icmp sgt i64 %20, 0
  br i1 %21, label %22, label %55

22:                                               ; preds = %17
  %23 = getelementptr inbounds %struct.ogg_page, ptr %0, i64 0, i32 2
  %24 = load ptr, ptr %23, align 8
  br label %40

25:                                               ; preds = %25, %15
  %26 = phi i64 [ 0, %15 ], [ %38, %25 ]
  %27 = phi i32 [ 0, %15 ], [ %37, %25 ]
  %28 = shl i32 %27, 8
  %29 = lshr i32 %27, 24
  %30 = getelementptr inbounds i8, ptr %16, i64 %26
  %31 = load i8, ptr %30, align 1
  %32 = zext i8 %31 to i32
  %33 = xor i32 %29, %32
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds [256 x i32], ptr @crc_lookup, i64 0, i64 %34
  %36 = load i32, ptr %35, align 4
  %37 = xor i32 %36, %28
  %38 = add nuw nsw i64 %26, 1
  %39 = icmp eq i64 %38, %13
  br i1 %39, label %17, label %25, !llvm.loop !386

40:                                               ; preds = %40, %22
  %41 = phi i64 [ 0, %22 ], [ %53, %40 ]
  %42 = phi i32 [ %18, %22 ], [ %52, %40 ]
  %43 = shl i32 %42, 8
  %44 = lshr i32 %42, 24
  %45 = getelementptr inbounds i8, ptr %24, i64 %41
  %46 = load i8, ptr %45, align 1
  %47 = zext i8 %46 to i32
  %48 = xor i32 %44, %47
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds [256 x i32], ptr @crc_lookup, i64 0, i64 %49
  %51 = load i32, ptr %50, align 4
  %52 = xor i32 %51, %43
  %53 = add nuw nsw i64 %41, 1
  %54 = icmp eq i64 %53, %20
  br i1 %54, label %55, label %40, !llvm.loop !387

55:                                               ; preds = %40, %17
  %56 = phi i32 [ %18, %17 ], [ %52, %40 ]
  %57 = trunc i32 %56 to i8
  %58 = load ptr, ptr %0, align 8
  %59 = getelementptr inbounds i8, ptr %58, i64 22
  store i8 %57, ptr %59, align 1
  %60 = lshr i32 %56, 8
  %61 = trunc i32 %60 to i8
  %62 = load ptr, ptr %0, align 8
  %63 = getelementptr inbounds i8, ptr %62, i64 23
  store i8 %61, ptr %63, align 1
  %64 = lshr i32 %56, 16
  %65 = trunc i32 %64 to i8
  %66 = load ptr, ptr %0, align 8
  %67 = getelementptr inbounds i8, ptr %66, i64 24
  store i8 %65, ptr %67, align 1
  %68 = lshr i32 %56, 24
  %69 = trunc i32 %68 to i8
  %70 = load ptr, ptr %0, align 8
  %71 = getelementptr inbounds i8, ptr %70, i64 25
  store i8 %69, ptr %71, align 1
  br label %72

72:                                               ; preds = %55, %1
  ret void
}

; Function Attrs: mustprogress nounwind optsize willreturn uwtable
define internal fastcc void @_os_body_expand(ptr nocapture noundef %0, i32 noundef %1) unnamed_addr #13 {
  %3 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 1
  %4 = load i64, ptr %3, align 8
  %5 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 2
  %6 = load i64, ptr %5, align 8
  %7 = sext i32 %1 to i64
  %8 = add nsw i64 %6, %7
  %9 = icmp sgt i64 %4, %8
  br i1 %9, label %16, label %10

10:                                               ; preds = %2
  %11 = add nsw i32 %1, 1024
  %12 = sext i32 %11 to i64
  %13 = add nsw i64 %4, %12
  store i64 %13, ptr %3, align 8
  %14 = load ptr, ptr %0, align 8
  %15 = tail call ptr @realloc(ptr noundef %14, i64 noundef %13) #61
  store ptr %15, ptr %0, align 8
  br label %16

16:                                               ; preds = %10, %2
  ret void
}

; Function Attrs: mustprogress nounwind optsize willreturn uwtable
define internal fastcc void @_os_lacing_expand(ptr nocapture noundef %0, i32 noundef %1) unnamed_addr #13 {
  %3 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 6
  %4 = load i64, ptr %3, align 8
  %5 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 7
  %6 = load i64, ptr %5, align 8
  %7 = sext i32 %1 to i64
  %8 = add nsw i64 %6, %7
  %9 = icmp sgt i64 %4, %8
  br i1 %9, label %23, label %10

10:                                               ; preds = %2
  %11 = add nsw i32 %1, 32
  %12 = sext i32 %11 to i64
  %13 = add nsw i64 %4, %12
  store i64 %13, ptr %3, align 8
  %14 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 4
  %15 = load ptr, ptr %14, align 8
  %16 = shl i64 %13, 2
  %17 = tail call ptr @realloc(ptr noundef %15, i64 noundef %16) #61
  store ptr %17, ptr %14, align 8
  %18 = getelementptr inbounds %struct.ogg_stream_state, ptr %0, i64 0, i32 5
  %19 = load ptr, ptr %18, align 8
  %20 = load i64, ptr %3, align 8
  %21 = shl i64 %20, 3
  %22 = tail call ptr @realloc(ptr noundef %19, i64 noundef %21) #61
  store ptr %22, ptr %18, align 8
  br label %23

23:                                               ; preds = %10, %2
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @_vorbis_pack_comment(ptr nocapture noundef %0, ptr nocapture noundef readonly %1) unnamed_addr #0 {
  tail call void @oggpack_write(ptr noundef %0, i64 noundef 3, i32 noundef 8) #56
  br label %3

3:                                                ; preds = %3, %2
  %4 = phi i32 [ %6, %3 ], [ 6, %2 ]
  %5 = phi ptr [ %7, %3 ], [ @.str.130, %2 ]
  %6 = add nsw i32 %4, -1
  %7 = getelementptr inbounds i8, ptr %5, i64 1
  %8 = load i8, ptr %5, align 1
  %9 = sext i8 %8 to i64
  tail call void @oggpack_write(ptr noundef %0, i64 noundef %9, i32 noundef 8) #56
  %10 = icmp eq i32 %6, 0
  br i1 %10, label %11, label %3, !llvm.loop !64

11:                                               ; preds = %3
  tail call void @oggpack_write(ptr noundef %0, i64 noundef 29, i32 noundef 32) #56
  br label %12

12:                                               ; preds = %12, %11
  %13 = phi i32 [ %15, %12 ], [ 29, %11 ]
  %14 = phi ptr [ %16, %12 ], [ @__const._vorbis_pack_comment.temp, %11 ]
  %15 = add nsw i32 %13, -1
  %16 = getelementptr inbounds i8, ptr %14, i64 1
  %17 = load i8, ptr %14, align 1
  %18 = sext i8 %17 to i64
  tail call void @oggpack_write(ptr noundef %0, i64 noundef %18, i32 noundef 8) #56
  %19 = icmp eq i32 %15, 0
  br i1 %19, label %20, label %12, !llvm.loop !64

20:                                               ; preds = %12
  %21 = getelementptr inbounds %struct.vorbis_comment, ptr %1, i64 0, i32 2
  %22 = load i32, ptr %21, align 8
  %23 = sext i32 %22 to i64
  tail call void @oggpack_write(ptr noundef %0, i64 noundef %23, i32 noundef 32) #56
  %24 = load i32, ptr %21, align 8
  %25 = icmp sgt i32 %24, 0
  br i1 %25, label %26, label %61

26:                                               ; preds = %20
  %27 = getelementptr inbounds %struct.vorbis_comment, ptr %1, i64 0, i32 1
  br label %28

28:                                               ; preds = %56, %26
  %29 = phi i64 [ 0, %26 ], [ %57, %56 ]
  %30 = load ptr, ptr %1, align 8
  %31 = getelementptr inbounds ptr, ptr %30, i64 %29
  %32 = load ptr, ptr %31, align 8
  %33 = icmp eq ptr %32, null
  br i1 %33, label %55, label %34

34:                                               ; preds = %28
  %35 = load ptr, ptr %27, align 8
  %36 = getelementptr inbounds i32, ptr %35, i64 %29
  %37 = load i32, ptr %36, align 4
  %38 = sext i32 %37 to i64
  tail call void @oggpack_write(ptr noundef %0, i64 noundef %38, i32 noundef 32) #56
  %39 = load ptr, ptr %27, align 8
  %40 = getelementptr inbounds i32, ptr %39, i64 %29
  %41 = load i32, ptr %40, align 4
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %56, label %43

43:                                               ; preds = %34
  %44 = load ptr, ptr %1, align 8
  %45 = getelementptr inbounds ptr, ptr %44, i64 %29
  %46 = load ptr, ptr %45, align 8
  br label %47

47:                                               ; preds = %47, %43
  %48 = phi i32 [ %50, %47 ], [ %41, %43 ]
  %49 = phi ptr [ %51, %47 ], [ %46, %43 ]
  %50 = add nsw i32 %48, -1
  %51 = getelementptr inbounds i8, ptr %49, i64 1
  %52 = load i8, ptr %49, align 1
  %53 = sext i8 %52 to i64
  tail call void @oggpack_write(ptr noundef %0, i64 noundef %53, i32 noundef 8) #56
  %54 = icmp eq i32 %50, 0
  br i1 %54, label %56, label %47, !llvm.loop !64

55:                                               ; preds = %28
  tail call void @oggpack_write(ptr noundef %0, i64 noundef 0, i32 noundef 32) #56
  br label %56

56:                                               ; preds = %55, %47, %34
  %57 = add nuw nsw i64 %29, 1
  %58 = load i32, ptr %21, align 8
  %59 = sext i32 %58 to i64
  %60 = icmp slt i64 %57, %59
  br i1 %60, label %28, label %61, !llvm.loop !388

61:                                               ; preds = %56, %20
  tail call void @oggpack_write(ptr noundef %0, i64 noundef 1, i32 noundef 1) #56
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @vorbis_staticbook_pack(ptr nocapture noundef readonly %0, ptr nocapture noundef %1) #0 {
  tail call void @oggpack_write(ptr noundef %1, i64 noundef 5653314, i32 noundef 24) #56
  %3 = load i64, ptr %0, align 8
  tail call void @oggpack_write(ptr noundef %1, i64 noundef %3, i32 noundef 16) #56
  %4 = getelementptr inbounds %struct.static_codebook, ptr %0, i64 0, i32 1
  %5 = load i64, ptr %4, align 8
  tail call void @oggpack_write(ptr noundef %1, i64 noundef %5, i32 noundef 24) #56
  %6 = load i64, ptr %4, align 8
  %7 = icmp sgt i64 %6, 1
  br i1 %7, label %8, label %23

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.static_codebook, ptr %0, i64 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = load i64, ptr %10, align 8
  br label %12

12:                                               ; preds = %20, %8
  %13 = phi i64 [ %11, %8 ], [ %18, %20 ]
  %14 = phi i64 [ 1, %8 ], [ %21, %20 ]
  %15 = icmp eq i64 %13, 0
  br i1 %15, label %23, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds i64, ptr %10, i64 %14
  %18 = load i64, ptr %17, align 8
  %19 = icmp slt i64 %18, %13
  br i1 %19, label %23, label %20

20:                                               ; preds = %16
  %21 = add nuw nsw i64 %14, 1
  %22 = icmp eq i64 %21, %6
  br i1 %22, label %26, label %12, !llvm.loop !389

23:                                               ; preds = %16, %12, %2
  %24 = phi i64 [ 1, %2 ], [ %14, %12 ], [ %14, %16 ]
  %25 = icmp eq i64 %24, %6
  br i1 %25, label %26, label %85

26:                                               ; preds = %23, %20
  tail call void @oggpack_write(ptr noundef %1, i64 noundef 1, i32 noundef 1) #56
  %27 = getelementptr inbounds %struct.static_codebook, ptr %0, i64 0, i32 2
  %28 = load ptr, ptr %27, align 8
  %29 = load i64, ptr %28, align 8
  %30 = add nsw i64 %29, -1
  tail call void @oggpack_write(ptr noundef %1, i64 noundef %30, i32 noundef 5) #56
  %31 = load i64, ptr %4, align 8
  %32 = icmp sgt i64 %31, 1
  br i1 %32, label %33, label %69

33:                                               ; preds = %64, %26
  %34 = phi i64 [ %65, %64 ], [ %31, %26 ]
  %35 = phi i64 [ %67, %64 ], [ 1, %26 ]
  %36 = phi i64 [ %66, %64 ], [ 0, %26 ]
  %37 = load ptr, ptr %27, align 8
  %38 = getelementptr inbounds i64, ptr %37, i64 %35
  %39 = load i64, ptr %38, align 8
  %40 = add nsw i64 %35, -1
  %41 = getelementptr inbounds i64, ptr %37, i64 %40
  %42 = load i64, ptr %41, align 8
  %43 = icmp sgt i64 %39, %42
  br i1 %43, label %44, label %64

44:                                               ; preds = %58, %33
  %45 = phi i64 [ %35, %58 ], [ %36, %33 ]
  %46 = phi i64 [ %60, %58 ], [ %42, %33 ]
  %47 = sub nsw i64 %35, %45
  %48 = load i64, ptr %4, align 8
  %49 = sub nsw i64 %48, %45
  %50 = trunc i64 %49 to i32
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %58, label %52

52:                                               ; preds = %52, %44
  %53 = phi i32 [ %55, %52 ], [ 0, %44 ]
  %54 = phi i32 [ %56, %52 ], [ %50, %44 ]
  %55 = add nuw nsw i32 %53, 1
  %56 = lshr i32 %54, 1
  %57 = icmp ult i32 %54, 2
  br i1 %57, label %58, label %52, !llvm.loop !202

58:                                               ; preds = %52, %44
  %59 = phi i32 [ 0, %44 ], [ %55, %52 ]
  tail call void @oggpack_write(ptr noundef %1, i64 noundef %47, i32 noundef %59) #56
  %60 = add nsw i64 %46, 1
  %61 = icmp eq i64 %60, %39
  br i1 %61, label %62, label %44, !llvm.loop !390

62:                                               ; preds = %58
  %63 = load i64, ptr %4, align 8
  br label %64

64:                                               ; preds = %62, %33
  %65 = phi i64 [ %34, %33 ], [ %63, %62 ]
  %66 = phi i64 [ %36, %33 ], [ %35, %62 ]
  %67 = add nuw nsw i64 %35, 1
  %68 = icmp slt i64 %67, %65
  br i1 %68, label %33, label %69, !llvm.loop !391

69:                                               ; preds = %64, %26
  %70 = phi i64 [ 0, %26 ], [ %66, %64 ]
  %71 = phi i64 [ 1, %26 ], [ %67, %64 ]
  %72 = phi i64 [ %31, %26 ], [ %65, %64 ]
  %73 = sub nsw i64 %71, %70
  %74 = sub nsw i64 %72, %70
  %75 = trunc i64 %74 to i32
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %83, label %77

77:                                               ; preds = %77, %69
  %78 = phi i32 [ %80, %77 ], [ 0, %69 ]
  %79 = phi i32 [ %81, %77 ], [ %75, %69 ]
  %80 = add nuw nsw i32 %78, 1
  %81 = lshr i32 %79, 1
  %82 = icmp ult i32 %79, 2
  br i1 %82, label %83, label %77, !llvm.loop !202

83:                                               ; preds = %77, %69
  %84 = phi i32 [ 0, %69 ], [ %80, %77 ]
  tail call void @oggpack_write(ptr noundef %1, i64 noundef %73, i32 noundef %84) #56
  br label %137

85:                                               ; preds = %23
  tail call void @oggpack_write(ptr noundef %1, i64 noundef 0, i32 noundef 1) #56
  %86 = load i64, ptr %4, align 8
  %87 = icmp sgt i64 %86, 0
  br i1 %87, label %88, label %99

88:                                               ; preds = %85
  %89 = getelementptr inbounds %struct.static_codebook, ptr %0, i64 0, i32 2
  %90 = load ptr, ptr %89, align 8
  br label %91

91:                                               ; preds = %96, %88
  %92 = phi i64 [ 0, %88 ], [ %97, %96 ]
  %93 = getelementptr inbounds i64, ptr %90, i64 %92
  %94 = load i64, ptr %93, align 8
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %99, label %96

96:                                               ; preds = %91
  %97 = add nuw nsw i64 %92, 1
  %98 = icmp eq i64 %97, %86
  br i1 %98, label %102, label %91, !llvm.loop !392

99:                                               ; preds = %91, %85
  %100 = phi i64 [ 0, %85 ], [ %92, %91 ]
  %101 = icmp eq i64 %100, %86
  br i1 %101, label %102, label %116

102:                                              ; preds = %99, %96
  tail call void @oggpack_write(ptr noundef %1, i64 noundef 0, i32 noundef 1) #56
  %103 = load i64, ptr %4, align 8
  %104 = icmp sgt i64 %103, 0
  br i1 %104, label %105, label %137

105:                                              ; preds = %102
  %106 = getelementptr inbounds %struct.static_codebook, ptr %0, i64 0, i32 2
  br label %107

107:                                              ; preds = %107, %105
  %108 = phi i64 [ 0, %105 ], [ %113, %107 ]
  %109 = load ptr, ptr %106, align 8
  %110 = getelementptr inbounds i64, ptr %109, i64 %108
  %111 = load i64, ptr %110, align 8
  %112 = add nsw i64 %111, -1
  tail call void @oggpack_write(ptr noundef %1, i64 noundef %112, i32 noundef 5) #56
  %113 = add nuw nsw i64 %108, 1
  %114 = load i64, ptr %4, align 8
  %115 = icmp slt i64 %113, %114
  br i1 %115, label %107, label %137, !llvm.loop !393

116:                                              ; preds = %99
  tail call void @oggpack_write(ptr noundef %1, i64 noundef 1, i32 noundef 1) #56
  %117 = load i64, ptr %4, align 8
  %118 = icmp sgt i64 %117, 0
  br i1 %118, label %119, label %137

119:                                              ; preds = %116
  %120 = getelementptr inbounds %struct.static_codebook, ptr %0, i64 0, i32 2
  br label %121

121:                                              ; preds = %133, %119
  %122 = phi i64 [ 0, %119 ], [ %134, %133 ]
  %123 = load ptr, ptr %120, align 8
  %124 = getelementptr inbounds i64, ptr %123, i64 %122
  %125 = load i64, ptr %124, align 8
  %126 = icmp eq i64 %125, 0
  br i1 %126, label %127, label %128

127:                                              ; preds = %121
  tail call void @oggpack_write(ptr noundef %1, i64 noundef 0, i32 noundef 1) #56
  br label %133

128:                                              ; preds = %121
  tail call void @oggpack_write(ptr noundef %1, i64 noundef 1, i32 noundef 1) #56
  %129 = load ptr, ptr %120, align 8
  %130 = getelementptr inbounds i64, ptr %129, i64 %122
  %131 = load i64, ptr %130, align 8
  %132 = add nsw i64 %131, -1
  tail call void @oggpack_write(ptr noundef %1, i64 noundef %132, i32 noundef 5) #56
  br label %133

133:                                              ; preds = %128, %127
  %134 = add nuw nsw i64 %122, 1
  %135 = load i64, ptr %4, align 8
  %136 = icmp slt i64 %134, %135
  br i1 %136, label %121, label %137, !llvm.loop !394

137:                                              ; preds = %133, %116, %107, %102, %83
  %138 = getelementptr inbounds %struct.static_codebook, ptr %0, i64 0, i32 3
  %139 = load i32, ptr %138, align 8
  %140 = sext i32 %139 to i64
  tail call void @oggpack_write(ptr noundef %1, i64 noundef %140, i32 noundef 4) #56
  %141 = load i32, ptr %138, align 8
  switch i32 %141, label %182 [
    i32 0, label %181
    i32 1, label %142
    i32 2, label %142
  ]

142:                                              ; preds = %137, %137
  %143 = getelementptr inbounds %struct.static_codebook, ptr %0, i64 0, i32 8
  %144 = load ptr, ptr %143, align 8
  %145 = icmp eq ptr %144, null
  br i1 %145, label %182, label %146

146:                                              ; preds = %142
  %147 = getelementptr inbounds %struct.static_codebook, ptr %0, i64 0, i32 4
  %148 = load i64, ptr %147, align 8
  tail call void @oggpack_write(ptr noundef %1, i64 noundef %148, i32 noundef 32) #56
  %149 = getelementptr inbounds %struct.static_codebook, ptr %0, i64 0, i32 5
  %150 = load i64, ptr %149, align 8
  tail call void @oggpack_write(ptr noundef %1, i64 noundef %150, i32 noundef 32) #56
  %151 = getelementptr inbounds %struct.static_codebook, ptr %0, i64 0, i32 6
  %152 = load i32, ptr %151, align 8
  %153 = add nsw i32 %152, -1
  %154 = sext i32 %153 to i64
  tail call void @oggpack_write(ptr noundef %1, i64 noundef %154, i32 noundef 4) #56
  %155 = getelementptr inbounds %struct.static_codebook, ptr %0, i64 0, i32 7
  %156 = load i32, ptr %155, align 4
  %157 = sext i32 %156 to i64
  tail call void @oggpack_write(ptr noundef %1, i64 noundef %157, i32 noundef 1) #56
  %158 = load i32, ptr %138, align 8
  switch i32 %158, label %181 [
    i32 1, label %159
    i32 2, label %161
  ]

159:                                              ; preds = %146
  %160 = tail call i64 @_book_maptype1_quantvals(ptr noundef nonnull %0) #56
  br label %165

161:                                              ; preds = %146
  %162 = load i64, ptr %4, align 8
  %163 = load i64, ptr %0, align 8
  %164 = mul nsw i64 %163, %162
  br label %165

165:                                              ; preds = %161, %159
  %166 = phi i64 [ %164, %161 ], [ %160, %159 ]
  %167 = trunc i64 %166 to i32
  %168 = icmp sgt i32 %167, 0
  br i1 %168, label %169, label %181

169:                                              ; preds = %165
  %170 = and i64 %166, 4294967295
  %171 = tail call i64 @llvm.smax.i64(i64 %170, i64 1)
  br label %172

172:                                              ; preds = %172, %169
  %173 = phi i64 [ %179, %172 ], [ 0, %169 ]
  %174 = load ptr, ptr %143, align 8
  %175 = getelementptr inbounds i64, ptr %174, i64 %173
  %176 = load i64, ptr %175, align 8
  %177 = tail call i64 @llvm.abs.i64(i64 %176, i1 true)
  %178 = load i32, ptr %151, align 8
  tail call void @oggpack_write(ptr noundef %1, i64 noundef %177, i32 noundef %178) #56
  %179 = add nuw nsw i64 %173, 1
  %180 = icmp eq i64 %179, %171
  br i1 %180, label %181, label %172, !llvm.loop !395

181:                                              ; preds = %172, %165, %146, %137
  br label %182

182:                                              ; preds = %181, %142, %137
  %183 = phi i32 [ 0, %181 ], [ -1, %142 ], [ -1, %137 ]
  ret i32 %183
}

; Function Attrs: nofree nounwind optsize memory(write, argmem: readwrite) uwtable
define internal i64 @_book_maptype1_quantvals(ptr nocapture noundef readonly %0) #43 {
  %2 = getelementptr inbounds %struct.static_codebook, ptr %0, i64 0, i32 1
  %3 = load i64, ptr %2, align 8
  %4 = sitofp i64 %3 to float
  %5 = fpext float %4 to double
  %6 = load i64, ptr %0, align 8
  %7 = sitofp i64 %6 to float
  %8 = fdiv float 1.000000e+00, %7
  %9 = fpext float %8 to double
  %10 = tail call double @pow(double noundef %5, double noundef %9) #59
  %11 = tail call double @llvm.floor.f64(double %10)
  %12 = fptosi double %11 to i64
  %13 = load i64, ptr %0, align 8
  %14 = icmp sgt i64 %13, 0
  %15 = load i64, ptr %2, align 8
  br label %16

16:                                               ; preds = %34, %1
  %17 = phi i64 [ %12, %1 ], [ %37, %34 ]
  br i1 %14, label %18, label %28

18:                                               ; preds = %16
  %19 = add nsw i64 %17, 1
  br label %20

20:                                               ; preds = %20, %18
  %21 = phi i64 [ 0, %18 ], [ %26, %20 ]
  %22 = phi i64 [ 1, %18 ], [ %25, %20 ]
  %23 = phi i64 [ 1, %18 ], [ %24, %20 ]
  %24 = mul nsw i64 %23, %17
  %25 = mul nsw i64 %22, %19
  %26 = add nuw nsw i64 %21, 1
  %27 = icmp eq i64 %26, %13
  br i1 %27, label %28, label %20, !llvm.loop !396

28:                                               ; preds = %20, %16
  %29 = phi i64 [ 1, %16 ], [ %24, %20 ]
  %30 = phi i64 [ 1, %16 ], [ %25, %20 ]
  %31 = icmp sle i64 %29, %15
  %32 = icmp sgt i64 %30, %15
  %33 = select i1 %31, i1 %32, i1 false
  br i1 %33, label %38, label %34

34:                                               ; preds = %28
  %35 = icmp sgt i64 %29, %15
  %36 = select i1 %35, i64 -1, i64 1
  %37 = add nsw i64 %36, %17
  br label %16

38:                                               ; preds = %28
  %.lcssa = phi i64 [ %17, %28 ]
  ret i64 %.lcssa
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.abs.i64(i64, i1 immarg) #27

; Function Attrs: nounwind optsize uwtable
define internal fastcc i32 @_vds_shared_init(ptr noundef %0, ptr noundef %1, i32 noundef %2) unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.vorbis_info, ptr %1, i64 0, i32 7
  %5 = load ptr, ptr %4, align 8
  %6 = icmp eq ptr %5, null
  br i1 %6, label %239, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.codec_setup_info, ptr %5, i64 0, i32 20
  %9 = load i32, ptr %8, align 8
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(144) %0, i8 0, i64 136, i1 false)
  %10 = tail call noalias dereferenceable_or_null(304) ptr @calloc(i64 noundef 1, i64 noundef 304) #65
  %11 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 19
  store ptr %10, ptr %11, align 8
  %12 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 1
  store ptr %1, ptr %12, align 8
  %13 = getelementptr inbounds %struct.codec_setup_info, ptr %5, i64 0, i32 1
  %14 = load i32, ptr %13, align 8
  %15 = icmp ult i32 %14, 2
  br i1 %15, label %24, label %16

16:                                               ; preds = %7
  %17 = add i32 %14, -1
  br label %18

18:                                               ; preds = %18, %16
  %19 = phi i32 [ %21, %18 ], [ 0, %16 ]
  %20 = phi i32 [ %22, %18 ], [ %17, %16 ]
  %21 = add nuw nsw i32 %19, 1
  %22 = lshr i32 %20, 1
  %23 = icmp ult i32 %20, 2
  br i1 %23, label %24, label %18, !llvm.loop !65

24:                                               ; preds = %18, %7
  %25 = phi i32 [ 0, %7 ], [ %21, %18 ]
  %26 = getelementptr inbounds %struct.private_state, ptr %10, i64 0, i32 4
  store i32 %25, ptr %26, align 8
  %27 = tail call noalias dereferenceable_or_null(8) ptr @calloc(i64 noundef 1, i64 noundef 8) #65
  %28 = getelementptr inbounds %struct.private_state, ptr %10, i64 0, i32 2
  store ptr %27, ptr %28, align 8
  %29 = tail call noalias dereferenceable_or_null(8) ptr @calloc(i64 noundef 1, i64 noundef 8) #65
  %30 = getelementptr inbounds %struct.private_state, ptr %10, i64 0, i32 2, i64 1
  store ptr %29, ptr %30, align 8
  %31 = tail call noalias dereferenceable_or_null(32) ptr @calloc(i64 noundef 1, i64 noundef 32) #65
  store ptr %31, ptr %27, align 8
  %32 = tail call noalias dereferenceable_or_null(32) ptr @calloc(i64 noundef 1, i64 noundef 32) #65
  store ptr %32, ptr %29, align 8
  %33 = load i64, ptr %5, align 8
  %34 = zext i32 %9 to i64
  %35 = ashr i64 %33, %34
  %36 = trunc i64 %35 to i32
  tail call void @mdct_init(ptr noundef %31, i32 noundef %36) #56
  %37 = load ptr, ptr %30, align 8
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr inbounds [2 x i64], ptr %5, i64 0, i64 1
  %40 = load i64, ptr %39, align 8
  %41 = ashr i64 %40, %34
  %42 = trunc i64 %41 to i32
  tail call void @mdct_init(ptr noundef %38, i32 noundef %42) #56
  %43 = load i64, ptr %5, align 8
  %44 = trunc i64 %43 to i32
  %45 = icmp ult i32 %44, 2
  br i1 %45, label %54, label %46

46:                                               ; preds = %24
  %47 = add i32 %44, -1
  br label %48

48:                                               ; preds = %48, %46
  %49 = phi i32 [ %51, %48 ], [ 0, %46 ]
  %50 = phi i32 [ %52, %48 ], [ %47, %46 ]
  %51 = add nuw nsw i32 %49, 1
  %52 = lshr i32 %50, 1
  %53 = icmp ult i32 %50, 2
  br i1 %53, label %54, label %48, !llvm.loop !65

54:                                               ; preds = %48, %24
  %55 = phi i32 [ 0, %24 ], [ %51, %48 ]
  %56 = add nsw i32 %55, -6
  %57 = getelementptr inbounds %struct.private_state, ptr %10, i64 0, i32 1
  store i32 %56, ptr %57, align 8
  %58 = load i64, ptr %39, align 8
  %59 = trunc i64 %58 to i32
  %60 = icmp ult i32 %59, 2
  br i1 %60, label %71, label %61

61:                                               ; preds = %54
  %62 = add i32 %59, -1
  br label %63

63:                                               ; preds = %63, %61
  %64 = phi i32 [ %66, %63 ], [ 0, %61 ]
  %65 = phi i32 [ %67, %63 ], [ %62, %61 ]
  %66 = add nuw nsw i32 %64, 1
  %67 = lshr i32 %65, 1
  %68 = icmp ult i32 %65, 2
  br i1 %68, label %69, label %63, !llvm.loop !65

69:                                               ; preds = %63
  %.lcssa = phi i32 [ %64, %63 ]
  %70 = add nsw i32 %.lcssa, -5
  br label %71

71:                                               ; preds = %69, %54
  %72 = phi i32 [ -6, %54 ], [ %70, %69 ]
  %73 = getelementptr inbounds %struct.private_state, ptr %10, i64 0, i32 1, i64 1
  store i32 %72, ptr %73, align 4
  %74 = icmp eq i32 %2, 0
  br i1 %74, label %131, label %75

75:                                               ; preds = %71
  %76 = getelementptr inbounds %struct.private_state, ptr %10, i64 0, i32 3
  %77 = load i64, ptr %5, align 8
  %78 = trunc i64 %77 to i32
  tail call void @drft_init(ptr noundef nonnull %76, i32 noundef %78) #56
  %79 = getelementptr inbounds %struct.private_state, ptr %10, i64 0, i32 3, i64 1
  %80 = load i64, ptr %39, align 8
  %81 = trunc i64 %80 to i32
  tail call void @drft_init(ptr noundef nonnull %79, i32 noundef %81) #56
  %82 = getelementptr inbounds %struct.codec_setup_info, ptr %5, i64 0, i32 15
  %83 = load ptr, ptr %82, align 8
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %102

85:                                               ; preds = %75
  %86 = getelementptr inbounds %struct.codec_setup_info, ptr %5, i64 0, i32 5
  %87 = load i32, ptr %86, align 8
  %88 = sext i32 %87 to i64
  %89 = tail call noalias ptr @calloc(i64 noundef %88, i64 noundef 80) #65
  store ptr %89, ptr %82, align 8
  %90 = icmp sgt i32 %87, 0
  br i1 %90, label %91, label %102

91:                                               ; preds = %91, %85
  %92 = phi i64 [ %98, %91 ], [ 0, %85 ]
  %93 = load ptr, ptr %82, align 8
  %94 = getelementptr inbounds %struct.codebook, ptr %93, i64 %92
  %95 = getelementptr inbounds %struct.codec_setup_info, ptr %5, i64 0, i32 14, i64 %92
  %96 = load ptr, ptr %95, align 8
  %97 = tail call i32 @vorbis_book_init_encode(ptr noundef %94, ptr noundef %96) #56
  %98 = add nuw nsw i64 %92, 1
  %99 = load i32, ptr %86, align 8
  %100 = sext i32 %99 to i64
  %101 = icmp slt i64 %98, %100
  br i1 %101, label %91, label %102, !llvm.loop !397

102:                                              ; preds = %91, %85, %75
  %103 = getelementptr inbounds %struct.codec_setup_info, ptr %5, i64 0, i32 6
  %104 = load i32, ptr %103, align 4
  %105 = sext i32 %104 to i64
  %106 = tail call noalias ptr @calloc(i64 noundef %105, i64 noundef 88) #65
  %107 = getelementptr inbounds %struct.private_state, ptr %10, i64 0, i32 7
  store ptr %106, ptr %107, align 8
  %108 = load i32, ptr %103, align 4
  %109 = icmp sgt i32 %108, 0
  br i1 %109, label %110, label %130

110:                                              ; preds = %102
  %111 = getelementptr inbounds %struct.codec_setup_info, ptr %5, i64 0, i32 17
  %112 = getelementptr inbounds %struct.vorbis_info, ptr %1, i64 0, i32 2
  br label %113

113:                                              ; preds = %113, %110
  %114 = phi i64 [ 0, %110 ], [ %126, %113 ]
  %115 = load ptr, ptr %107, align 8
  %116 = getelementptr inbounds %struct.vorbis_look_psy, ptr %115, i64 %114
  %117 = getelementptr inbounds %struct.codec_setup_info, ptr %5, i64 0, i32 16, i64 %114
  %118 = load ptr, ptr %117, align 8
  %119 = load i32, ptr %118, align 8
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds [2 x i64], ptr %5, i64 0, i64 %120
  %122 = load i64, ptr %121, align 8
  %123 = sdiv i64 %122, 2
  %124 = trunc i64 %123 to i32
  %125 = load i64, ptr %112, align 8
  tail call void @_vp_psy_init(ptr noundef %116, ptr noundef nonnull %118, ptr noundef nonnull %111, i32 noundef %124, i64 noundef %125) #56
  %126 = add nuw nsw i64 %114, 1
  %127 = load i32, ptr %103, align 4
  %128 = sext i32 %127 to i64
  %129 = icmp slt i64 %126, %128
  br i1 %129, label %113, label %130, !llvm.loop !398

130:                                              ; preds = %113, %102
  store i32 1, ptr %0, align 8
  br label %153

131:                                              ; preds = %71
  %132 = getelementptr inbounds %struct.codec_setup_info, ptr %5, i64 0, i32 15
  %133 = load ptr, ptr %132, align 8
  %134 = icmp eq ptr %133, null
  br i1 %134, label %135, label %153

135:                                              ; preds = %131
  %136 = getelementptr inbounds %struct.codec_setup_info, ptr %5, i64 0, i32 5
  %137 = load i32, ptr %136, align 8
  %138 = sext i32 %137 to i64
  %139 = tail call noalias ptr @calloc(i64 noundef %138, i64 noundef 80) #65
  store ptr %139, ptr %132, align 8
  %140 = icmp sgt i32 %137, 0
  br i1 %140, label %141, label %153

141:                                              ; preds = %141, %135
  %142 = phi i64 [ %149, %141 ], [ 0, %135 ]
  %143 = load ptr, ptr %132, align 8
  %144 = getelementptr inbounds %struct.codebook, ptr %143, i64 %142
  %145 = getelementptr inbounds %struct.codec_setup_info, ptr %5, i64 0, i32 14, i64 %142
  %146 = load ptr, ptr %145, align 8
  %147 = tail call i32 @vorbis_book_init_decode(ptr noundef %144, ptr noundef %146) #56
  %148 = load ptr, ptr %145, align 8
  tail call void @vorbis_staticbook_destroy(ptr noundef %148) #56
  store ptr null, ptr %145, align 8
  %149 = add nuw nsw i64 %142, 1
  %150 = load i32, ptr %136, align 8
  %151 = sext i32 %150 to i64
  %152 = icmp slt i64 %149, %151
  br i1 %152, label %141, label %153, !llvm.loop !399

153:                                              ; preds = %141, %135, %131, %130
  %154 = load i64, ptr %39, align 8
  %155 = trunc i64 %154 to i32
  %156 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 4
  store i32 %155, ptr %156, align 8
  %157 = getelementptr inbounds %struct.vorbis_info, ptr %1, i64 0, i32 1
  %158 = load i32, ptr %157, align 4
  %159 = sext i32 %158 to i64
  %160 = shl nsw i64 %159, 3
  %161 = tail call noalias ptr @malloc(i64 noundef %160) #64
  %162 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 2
  store ptr %161, ptr %162, align 8
  %163 = load i32, ptr %157, align 4
  %164 = sext i32 %163 to i64
  %165 = shl nsw i64 %164, 3
  %166 = tail call noalias ptr @malloc(i64 noundef %165) #64
  %167 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 3
  store ptr %166, ptr %167, align 8
  %168 = load i32, ptr %157, align 4
  %169 = icmp sgt i32 %168, 0
  br i1 %169, label %170, label %181

170:                                              ; preds = %170, %153
  %171 = phi i64 [ %177, %170 ], [ 0, %153 ]
  %172 = load i32, ptr %156, align 8
  %173 = sext i32 %172 to i64
  %174 = tail call noalias ptr @calloc(i64 noundef %173, i64 noundef 4) #65
  %175 = load ptr, ptr %162, align 8
  %176 = getelementptr inbounds ptr, ptr %175, i64 %171
  store ptr %174, ptr %176, align 8
  %177 = add nuw nsw i64 %171, 1
  %178 = load i32, ptr %157, align 4
  %179 = sext i32 %178 to i64
  %180 = icmp slt i64 %177, %179
  br i1 %180, label %170, label %181, !llvm.loop !400

181:                                              ; preds = %170, %153
  %182 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 9
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %182, i8 0, i64 16, i1 false)
  %183 = load i64, ptr %39, align 8
  %184 = sdiv i64 %183, 2
  %185 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 12
  store i64 %184, ptr %185, align 8
  %186 = trunc i64 %184 to i32
  %187 = getelementptr inbounds %struct.vorbis_dsp_state, ptr %0, i64 0, i32 5
  store i32 %186, ptr %187, align 4
  %188 = getelementptr inbounds %struct.codec_setup_info, ptr %5, i64 0, i32 3
  %189 = load i32, ptr %188, align 8
  %190 = sext i32 %189 to i64
  %191 = tail call noalias ptr @calloc(i64 noundef %190, i64 noundef 8) #65
  %192 = getelementptr inbounds %struct.private_state, ptr %10, i64 0, i32 5
  store ptr %191, ptr %192, align 8
  %193 = getelementptr inbounds %struct.codec_setup_info, ptr %5, i64 0, i32 4
  %194 = load i32, ptr %193, align 4
  %195 = sext i32 %194 to i64
  %196 = tail call noalias ptr @calloc(i64 noundef %195, i64 noundef 8) #65
  %197 = getelementptr inbounds %struct.private_state, ptr %10, i64 0, i32 6
  store ptr %196, ptr %197, align 8
  %198 = load i32, ptr %188, align 8
  %199 = icmp sgt i32 %198, 0
  br i1 %199, label %203, label %200

200:                                              ; preds = %203, %181
  %201 = load i32, ptr %193, align 4
  %202 = icmp sgt i32 %201, 0
  br i1 %202, label %221, label %239

203:                                              ; preds = %203, %181
  %204 = phi i64 [ %217, %203 ], [ 0, %181 ]
  %205 = getelementptr inbounds %struct.codec_setup_info, ptr %5, i64 0, i32 10, i64 %204
  %206 = load i32, ptr %205, align 4
  %207 = sext i32 %206 to i64
  %208 = getelementptr inbounds [0 x ptr], ptr @_floor_P, i64 0, i64 %207
  %209 = load ptr, ptr %208, align 8
  %210 = getelementptr inbounds %struct.vorbis_func_floor, ptr %209, i64 0, i32 2
  %211 = load ptr, ptr %210, align 8
  %212 = getelementptr inbounds %struct.codec_setup_info, ptr %5, i64 0, i32 11, i64 %204
  %213 = load ptr, ptr %212, align 8
  %214 = tail call ptr %211(ptr noundef %0, ptr noundef %213) #59
  %215 = load ptr, ptr %192, align 8
  %216 = getelementptr inbounds ptr, ptr %215, i64 %204
  store ptr %214, ptr %216, align 8
  %217 = add nuw nsw i64 %204, 1
  %218 = load i32, ptr %188, align 8
  %219 = sext i32 %218 to i64
  %220 = icmp slt i64 %217, %219
  br i1 %220, label %203, label %200, !llvm.loop !401

221:                                              ; preds = %221, %200
  %222 = phi i64 [ %235, %221 ], [ 0, %200 ]
  %223 = getelementptr inbounds %struct.codec_setup_info, ptr %5, i64 0, i32 12, i64 %222
  %224 = load i32, ptr %223, align 4
  %225 = sext i32 %224 to i64
  %226 = getelementptr inbounds [0 x ptr], ptr @_residue_P, i64 0, i64 %225
  %227 = load ptr, ptr %226, align 8
  %228 = getelementptr inbounds %struct.vorbis_func_residue, ptr %227, i64 0, i32 2
  %229 = load ptr, ptr %228, align 8
  %230 = getelementptr inbounds %struct.codec_setup_info, ptr %5, i64 0, i32 13, i64 %222
  %231 = load ptr, ptr %230, align 8
  %232 = tail call ptr %229(ptr noundef %0, ptr noundef %231) #59
  %233 = load ptr, ptr %197, align 8
  %234 = getelementptr inbounds ptr, ptr %233, i64 %222
  store ptr %232, ptr %234, align 8
  %235 = add nuw nsw i64 %222, 1
  %236 = load i32, ptr %193, align 4
  %237 = sext i32 %236 to i64
  %238 = icmp slt i64 %235, %237
  br i1 %238, label %221, label %239, !llvm.loop !402

239:                                              ; preds = %221, %200, %3
  %240 = phi i32 [ 1, %3 ], [ 0, %200 ], [ 0, %221 ]
  ret i32 %240
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @_ve_envelope_init(ptr nocapture noundef %0, ptr nocapture noundef readonly %1) #3 {
  %3 = getelementptr inbounds %struct.vorbis_info, ptr %1, i64 0, i32 7
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr inbounds %struct.vorbis_info, ptr %1, i64 0, i32 1
  %6 = load i32, ptr %5, align 4
  %7 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 1
  store i32 128, ptr %7, align 4
  %8 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 2
  store i32 64, ptr %8, align 8
  %9 = getelementptr inbounds %struct.codec_setup_info, ptr %4, i64 0, i32 17, i32 4
  %10 = load float, ptr %9, align 4
  %11 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 3
  store float %10, ptr %11, align 4
  store i32 %6, ptr %0, align 8
  %12 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 10
  store i64 128, ptr %12, align 8
  %13 = getelementptr inbounds [2 x i64], ptr %4, i64 0, i64 1
  %14 = load i64, ptr %13, align 8
  %15 = sdiv i64 %14, 2
  %16 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 13
  store i64 %15, ptr %16, align 8
  %17 = tail call noalias dereferenceable_or_null(512) ptr @calloc(i64 noundef 128, i64 noundef 4) #65
  %18 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 5
  store ptr %17, ptr %18, align 8
  %19 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 4
  tail call void @mdct_init(ptr noundef nonnull %19, i32 noundef 128) #56
  br label %20

20:                                               ; preds = %20, %2
  %21 = phi i64 [ 0, %2 ], [ %34, %20 ]
  %22 = trunc i64 %21 to i32
  %23 = sitofp i32 %22 to double
  %24 = fdiv double %23, 1.270000e+02
  %25 = fmul double %24, 0x400921FB54442D18
  %26 = tail call double @sin(double noundef %25) #59
  %27 = fptrunc double %26 to float
  %28 = load ptr, ptr %18, align 8
  %29 = getelementptr inbounds float, ptr %28, i64 %21
  store float %27, ptr %29, align 4
  %30 = load ptr, ptr %18, align 8
  %31 = getelementptr inbounds float, ptr %30, i64 %21
  %32 = load float, ptr %31, align 4
  %33 = fmul float %32, %32
  store float %33, ptr %31, align 4
  %34 = add nuw nsw i64 %21, 1
  %35 = icmp eq i64 %34, 128
  br i1 %35, label %36, label %20, !llvm.loop !403

36:                                               ; preds = %20
  %37 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 6
  store i32 2, ptr %37, align 8
  %38 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 6, i64 0, i32 1
  store i32 4, ptr %38, align 4
  %39 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 6, i64 1
  store i32 4, ptr %39, align 8
  %40 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 6, i64 1, i32 1
  store i32 5, ptr %40, align 4
  %41 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 6, i64 2
  store i32 6, ptr %41, align 8
  %42 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 6, i64 2, i32 1
  store i32 6, ptr %42, align 4
  %43 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 6, i64 3
  store i32 9, ptr %43, align 8
  %44 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 6, i64 3, i32 1
  store i32 8, ptr %44, align 4
  %45 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 6, i64 4
  store i32 13, ptr %45, align 8
  %46 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 6, i64 4, i32 1
  store i32 8, ptr %46, align 4
  %47 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 6, i64 5
  store i32 17, ptr %47, align 8
  %48 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 6, i64 5, i32 1
  store i32 8, ptr %48, align 4
  %49 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 6, i64 6
  store i32 22, ptr %49, align 8
  %50 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 6, i64 6, i32 1
  store i32 8, ptr %50, align 4
  br label %51

51:                                               ; preds = %85, %36
  %52 = phi i64 [ 0, %36 ], [ %89, %85 ]
  %53 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 6, i64 %52, i32 1
  %54 = load i32, ptr %53, align 4
  %55 = sext i32 %54 to i64
  %56 = shl nsw i64 %55, 2
  %57 = tail call noalias ptr @malloc(i64 noundef %56) #64
  %58 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 6, i64 %52, i32 2
  store ptr %57, ptr %58, align 8
  %59 = icmp sgt i32 %54, 0
  br i1 %59, label %63, label %60

60:                                               ; preds = %51
  %61 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 6, i64 %52, i32 3
  %62 = load float, ptr %61, align 8
  br label %85

63:                                               ; preds = %51
  %64 = sitofp i32 %54 to double
  %65 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 6, i64 %52, i32 3
  %66 = zext i32 %54 to i64
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi i64 [ 0, %63 ], [ %83, %67 ]
  %69 = trunc i64 %68 to i32
  %70 = sitofp i32 %69 to double
  %71 = fadd double %70, 5.000000e-01
  %72 = fdiv double %71, %64
  %73 = fmul double %72, 0x400921FB54442D18
  %74 = tail call double @sin(double noundef %73) #59
  %75 = fptrunc double %74 to float
  %76 = load ptr, ptr %58, align 8
  %77 = getelementptr inbounds float, ptr %76, i64 %68
  store float %75, ptr %77, align 4
  %78 = load ptr, ptr %58, align 8
  %79 = getelementptr inbounds float, ptr %78, i64 %68
  %80 = load float, ptr %79, align 4
  %81 = load float, ptr %65, align 8
  %82 = fadd float %80, %81
  store float %82, ptr %65, align 8
  %83 = add nuw nsw i64 %68, 1
  %84 = icmp eq i64 %83, %66
  br i1 %84, label %85, label %67, !llvm.loop !404

85:                                               ; preds = %67, %60
  %86 = phi float [ %62, %60 ], [ %82, %67 ]
  %87 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 6, i64 %52, i32 3
  %88 = fdiv float 1.000000e+00, %86
  store float %88, ptr %87, align 8
  %89 = add nuw nsw i64 %52, 1
  %90 = icmp eq i64 %89, 7
  br i1 %90, label %91, label %51, !llvm.loop !405

91:                                               ; preds = %85
  %92 = mul nsw i32 %6, 7
  %93 = sext i32 %92 to i64
  %94 = tail call noalias ptr @calloc(i64 noundef %93, i64 noundef 144) #65
  %95 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 7
  store ptr %94, ptr %95, align 8
  %96 = load i64, ptr %12, align 8
  %97 = tail call noalias ptr @calloc(i64 noundef %96, i64 noundef 4) #65
  %98 = getelementptr inbounds %struct.envelope_lookup, ptr %0, i64 0, i32 9
  store ptr %97, ptr %98, align 8
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @vorbis_bitrate_init(ptr nocapture noundef readonly %0, ptr nocapture noundef %1) #3 {
  %3 = getelementptr inbounds %struct.vorbis_info, ptr %0, i64 0, i32 7
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr inbounds %struct.codec_setup_info, ptr %4, i64 0, i32 18
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(152) %1, i8 0, i64 152, i1 false)
  %6 = load double, ptr %5, align 8
  %7 = getelementptr inbounds %struct.vorbis_info, ptr %0, i64 0, i32 2
  %8 = load i64, ptr %7, align 8
  %9 = sitofp i64 %8 to double
  %10 = fmul double %6, %9
  %11 = fptoui double %10 to i32
  %12 = getelementptr inbounds %struct.bitrate_manager_state, ptr %1, i64 0, i32 10
  store i32 %11, ptr %12, align 8
  %13 = load double, ptr %5, align 8
  %14 = load i64, ptr %7, align 8
  %15 = sitofp i64 %14 to double
  %16 = fmul double %13, %15
  %17 = getelementptr inbounds %struct.codec_setup_info, ptr %4, i64 0, i32 18, i32 1
  %18 = load double, ptr %17, align 8
  %19 = fmul double %18, %16
  %20 = fptoui double %19 to i32
  %21 = getelementptr inbounds %struct.bitrate_manager_state, ptr %1, i64 0, i32 11
  store i32 %20, ptr %21, align 4
  %22 = getelementptr inbounds %struct.codec_setup_info, ptr %4, i64 0, i32 18, i32 2
  %23 = load double, ptr %22, align 8
  %24 = load i64, ptr %7, align 8
  %25 = sitofp i64 %24 to double
  %26 = fmul double %23, %25
  %27 = fptoui double %26 to i32
  %28 = getelementptr inbounds %struct.bitrate_manager_state, ptr %1, i64 0, i32 19
  store i32 %27, ptr %28, align 8
  %29 = sub i32 %11, %20
  %30 = tail call i32 @llvm.umax.i32(i32 %29, i32 %27)
  %31 = add i32 %30, %20
  %32 = zext i32 %31 to i64
  %33 = icmp eq i32 %31, 0
  br i1 %33, label %112, label %34

34:                                               ; preds = %2
  %35 = getelementptr inbounds %struct.codec_setup_info, ptr %4, i64 0, i32 18, i32 5
  %36 = load double, ptr %35, align 8
  %37 = fcmp ogt double %36, 0.000000e+00
  br i1 %37, label %50, label %38

38:                                               ; preds = %34
  %39 = getelementptr inbounds %struct.codec_setup_info, ptr %4, i64 0, i32 18, i32 6
  %40 = load double, ptr %39, align 8
  %41 = fcmp ogt double %40, 0.000000e+00
  br i1 %41, label %50, label %42

42:                                               ; preds = %38
  %43 = getelementptr inbounds %struct.codec_setup_info, ptr %4, i64 0, i32 18, i32 4
  %44 = load double, ptr %43, align 8
  %45 = fcmp ogt double %44, 0.000000e+00
  br i1 %45, label %50, label %46

46:                                               ; preds = %42
  %47 = getelementptr inbounds %struct.codec_setup_info, ptr %4, i64 0, i32 18, i32 3
  %48 = load double, ptr %47, align 8
  %49 = fcmp ogt double %48, 0.000000e+00
  br i1 %49, label %50, label %112

50:                                               ; preds = %46, %42, %38, %34
  %51 = load i64, ptr %4, align 8
  %52 = ashr i64 %51, 1
  %53 = sdiv i64 %32, %52
  %54 = add nsw i64 %53, 3
  %55 = trunc i64 %54 to i32
  %56 = getelementptr inbounds %struct.bitrate_manager_state, ptr %1, i64 0, i32 2
  store i32 %55, ptr %56, align 8
  %57 = getelementptr inbounds %struct.bitrate_manager_state, ptr %1, i64 0, i32 4
  store i32 15, ptr %57, align 8
  %58 = tail call noalias ptr @calloc(i64 noundef %54, i64 noundef 60) #65
  store ptr %58, ptr %1, align 8
  %59 = tail call noalias ptr @calloc(i64 noundef %54, i64 noundef 4) #65
  %60 = getelementptr inbounds %struct.bitrate_manager_state, ptr %1, i64 0, i32 1
  store ptr %59, ptr %60, align 8
  %61 = load double, ptr %35, align 8
  %62 = fcmp ogt double %61, 0.000000e+00
  br i1 %62, label %67, label %63

63:                                               ; preds = %50
  %64 = getelementptr inbounds %struct.codec_setup_info, ptr %4, i64 0, i32 18, i32 6
  %65 = load double, ptr %64, align 8
  %66 = fcmp ogt double %65, 0.000000e+00
  br i1 %66, label %67, label %74

67:                                               ; preds = %63, %50
  %68 = load double, ptr %5, align 8
  %69 = fcmp ogt double %68, 0.000000e+00
  br i1 %69, label %70, label %74

70:                                               ; preds = %67
  %71 = tail call noalias dereferenceable_or_null(120) ptr @calloc(i64 noundef 15, i64 noundef 8) #65
  %72 = getelementptr inbounds %struct.bitrate_manager_state, ptr %1, i64 0, i32 5
  store ptr %71, ptr %72, align 8
  %73 = getelementptr inbounds %struct.bitrate_manager_state, ptr %1, i64 0, i32 22
  store double 7.000000e+00, ptr %73, align 8
  br label %76

74:                                               ; preds = %67, %63
  %75 = getelementptr inbounds %struct.bitrate_manager_state, ptr %1, i64 0, i32 7
  store i32 -1, ptr %75, align 4
  br label %76

76:                                               ; preds = %74, %70
  %77 = getelementptr inbounds %struct.codec_setup_info, ptr %4, i64 0, i32 18, i32 3
  %78 = load double, ptr %77, align 8
  %79 = fcmp ogt double %78, 0.000000e+00
  br i1 %79, label %84, label %80

80:                                               ; preds = %76
  %81 = getelementptr inbounds %struct.codec_setup_info, ptr %4, i64 0, i32 18, i32 4
  %82 = load double, ptr %81, align 8
  %83 = fcmp ogt double %82, 0.000000e+00
  br i1 %83, label %84, label %94

84:                                               ; preds = %80, %76
  %85 = load double, ptr %22, align 8
  %86 = fcmp ogt double %85, 0.000000e+00
  br i1 %86, label %87, label %94

87:                                               ; preds = %84
  %88 = tail call noalias dereferenceable_or_null(7440) ptr @calloc(i64 noundef 930, i64 noundef 8) #65
  %89 = getelementptr inbounds %struct.bitrate_manager_state, ptr %1, i64 0, i32 12
  store ptr %88, ptr %89, align 8
  %90 = tail call noalias dereferenceable_or_null(248) ptr @calloc(i64 noundef 31, i64 noundef 8) #65
  %91 = getelementptr inbounds %struct.bitrate_manager_state, ptr %1, i64 0, i32 13
  store ptr %90, ptr %91, align 8
  %92 = tail call noalias dereferenceable_or_null(248) ptr @calloc(i64 noundef 31, i64 noundef 8) #65
  %93 = getelementptr inbounds %struct.bitrate_manager_state, ptr %1, i64 0, i32 14
  store ptr %92, ptr %93, align 8
  br label %96

94:                                               ; preds = %84, %80
  %95 = getelementptr inbounds %struct.bitrate_manager_state, ptr %1, i64 0, i32 17
  store i32 -1, ptr %95, align 8
  br label %96

96:                                               ; preds = %94, %87
  %97 = tail call noalias ptr @calloc(i64 noundef %54, i64 noundef 40) #65
  %98 = getelementptr inbounds %struct.bitrate_manager_state, ptr %1, i64 0, i32 23
  store ptr %97, ptr %98, align 8
  %99 = tail call noalias ptr @calloc(i64 noundef %54, i64 noundef 48) #65
  %100 = getelementptr inbounds %struct.bitrate_manager_state, ptr %1, i64 0, i32 24
  store ptr %99, ptr %100, align 8
  %101 = icmp sgt i64 %53, -3
  br i1 %101, label %102, label %121

102:                                              ; preds = %102, %96
  %103 = phi i64 [ %110, %102 ], [ 0, %96 ]
  %104 = load ptr, ptr %98, align 8
  %105 = getelementptr inbounds %struct.oggpack_buffer, ptr %104, i64 %103
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %105, i8 0, i64 16, i1 false)
  %106 = tail call noalias dereferenceable_or_null(256) ptr @malloc(i64 noundef 256) #64
  %107 = getelementptr inbounds %struct.oggpack_buffer, ptr %104, i64 %103, i32 2
  store ptr %106, ptr %107, align 8
  %108 = getelementptr inbounds %struct.oggpack_buffer, ptr %104, i64 %103, i32 3
  store ptr %106, ptr %108, align 8
  store i8 0, ptr %106, align 1
  %109 = getelementptr inbounds %struct.oggpack_buffer, ptr %104, i64 %103, i32 4
  store i64 256, ptr %109, align 8
  %110 = add nuw nsw i64 %103, 1
  %111 = icmp eq i64 %110, %54
  br i1 %111, label %121, label %102, !llvm.loop !406

112:                                              ; preds = %46, %2
  %113 = tail call noalias dereferenceable_or_null(40) ptr @calloc(i64 noundef 1, i64 noundef 40) #65
  %114 = getelementptr inbounds %struct.bitrate_manager_state, ptr %1, i64 0, i32 23
  store ptr %113, ptr %114, align 8
  %115 = tail call noalias dereferenceable_or_null(48) ptr @calloc(i64 noundef 1, i64 noundef 48) #65
  %116 = getelementptr inbounds %struct.bitrate_manager_state, ptr %1, i64 0, i32 24
  store ptr %115, ptr %116, align 8
  %117 = tail call noalias dereferenceable_or_null(256) ptr @malloc(i64 noundef 256) #64
  %118 = getelementptr inbounds %struct.oggpack_buffer, ptr %113, i64 0, i32 2
  store ptr %117, ptr %118, align 8
  %119 = getelementptr inbounds %struct.oggpack_buffer, ptr %113, i64 0, i32 3
  store ptr %117, ptr %119, align 8
  store i8 0, ptr %117, align 1
  %120 = getelementptr inbounds %struct.oggpack_buffer, ptr %113, i64 0, i32 4
  store i64 256, ptr %120, align 8
  br label %121

121:                                              ; preds = %112, %102, %96
  ret void
}

; Function Attrs: nofree nounwind optsize memory(write, inaccessiblemem: readwrite) uwtable
define internal void @mdct_init(ptr nocapture noundef writeonly %0, i32 noundef %1) #45 {
  %3 = sdiv i32 %1, 4
  %4 = sext i32 %3 to i64
  %5 = shl nsw i64 %4, 2
  %6 = tail call noalias ptr @malloc(i64 noundef %5) #64
  %7 = add nsw i32 %3, %1
  %8 = sext i32 %7 to i64
  %9 = shl nsw i64 %8, 2
  %10 = tail call noalias ptr @malloc(i64 noundef %9) #64
  %11 = sitofp i32 %1 to float
  %12 = fpext float %11 to double
  %13 = tail call double @log(double noundef %12) #59
  %14 = fdiv double %13, 0x3FE62E42FEFA39EF
  %15 = tail call double @llvm.rint.f64(double %14)
  %16 = fptosi double %15 to i32
  %17 = getelementptr inbounds %struct.mdct_lookup, ptr %0, i64 0, i32 1
  store i32 %16, ptr %17, align 4
  store i32 %1, ptr %0, align 8
  %18 = getelementptr inbounds %struct.mdct_lookup, ptr %0, i64 0, i32 2
  store ptr %10, ptr %18, align 8
  %19 = getelementptr inbounds %struct.mdct_lookup, ptr %0, i64 0, i32 3
  store ptr %6, ptr %19, align 8
  %20 = icmp sgt i32 %1, 3
  br i1 %20, label %21, label %117

21:                                               ; preds = %2
  %22 = lshr i32 %1, 1
  %23 = sitofp i32 %1 to double
  %24 = fdiv double 0x400921FB54442D18, %23
  %25 = shl nuw nsw i32 %1, 1
  %26 = sitofp i32 %25 to double
  %27 = fdiv double 0x400921FB54442D18, %26
  %28 = zext i32 %22 to i64
  %29 = zext i32 %3 to i64
  br label %38

30:                                               ; preds = %38
  %31 = sdiv i32 %1, 8
  %32 = icmp sgt i32 %1, 7
  br i1 %32, label %33, label %117

33:                                               ; preds = %30
  %34 = sitofp i32 %1 to double
  %35 = fdiv double 0x400921FB54442D18, %34
  %36 = zext i32 %1 to i64
  %37 = zext i32 %31 to i64
  br label %66

38:                                               ; preds = %38, %21
  %39 = phi i64 [ 0, %21 ], [ %64, %38 ]
  %40 = trunc i64 %39 to i32
  %41 = shl i32 %40, 2
  %42 = sitofp i32 %41 to double
  %43 = fmul double %24, %42
  %44 = tail call double @cos(double noundef %43) #59
  %45 = fptrunc double %44 to float
  %46 = shl nuw nsw i64 %39, 1
  %47 = getelementptr inbounds float, ptr %10, i64 %46
  store float %45, ptr %47, align 4
  %48 = tail call double @sin(double noundef %43) #59
  %49 = fptrunc double %48 to float
  %50 = fneg float %49
  %51 = or i64 %46, 1
  %52 = getelementptr inbounds float, ptr %10, i64 %51
  store float %50, ptr %52, align 4
  %53 = trunc i64 %51 to i32
  %54 = sitofp i32 %53 to double
  %55 = fmul double %27, %54
  %56 = tail call double @cos(double noundef %55) #59
  %57 = fptrunc double %56 to float
  %58 = add nuw nsw i64 %46, %28
  %59 = getelementptr inbounds float, ptr %10, i64 %58
  store float %57, ptr %59, align 4
  %60 = tail call double @sin(double noundef %55) #59
  %61 = fptrunc double %60 to float
  %62 = add nuw nsw i64 %58, 1
  %63 = getelementptr inbounds float, ptr %10, i64 %62
  store float %61, ptr %63, align 4
  %64 = add nuw nsw i64 %39, 1
  %65 = icmp eq i64 %64, %29
  br i1 %65, label %30, label %38, !llvm.loop !407

66:                                               ; preds = %66, %33
  %67 = phi i64 [ 0, %33 ], [ %84, %66 ]
  %68 = trunc i64 %67 to i32
  %69 = shl i32 %68, 2
  %70 = or i32 %69, 2
  %71 = sitofp i32 %70 to double
  %72 = fmul double %35, %71
  %73 = tail call double @cos(double noundef %72) #59
  %74 = fmul double %73, 5.000000e-01
  %75 = fptrunc double %74 to float
  %76 = shl nuw nsw i64 %67, 1
  %77 = add nuw nsw i64 %76, %36
  %78 = getelementptr inbounds float, ptr %10, i64 %77
  store float %75, ptr %78, align 4
  %79 = tail call double @sin(double noundef %72) #59
  %80 = fmul double %79, -5.000000e-01
  %81 = fptrunc double %80 to float
  %82 = add nuw nsw i64 %77, 1
  %83 = getelementptr inbounds float, ptr %10, i64 %82
  store float %81, ptr %83, align 4
  %84 = add nuw nsw i64 %67, 1
  %85 = icmp eq i64 %84, %37
  br i1 %85, label %86, label %66, !llvm.loop !408

86:                                               ; preds = %66
  %87 = add nsw i32 %16, -1
  %88 = shl nsw i32 -1, %87
  %89 = add nsw i32 %16, -2
  %90 = shl nuw i32 1, %89
  br i1 %32, label %91, label %117

91:                                               ; preds = %86
  %92 = zext i32 %31 to i64
  br label %93

93:                                               ; preds = %108, %91
  %94 = phi i64 [ 0, %91 ], [ %115, %108 ]
  %95 = trunc i64 %94 to i32
  br label %96

96:                                               ; preds = %96, %93
  %97 = phi i32 [ %90, %93 ], [ %106, %96 ]
  %98 = phi i32 [ 0, %93 ], [ %104, %96 ]
  %99 = phi i32 [ 0, %93 ], [ %105, %96 ]
  %100 = and i32 %97, %95
  %101 = icmp eq i32 %100, 0
  %102 = shl nuw i32 1, %99
  %103 = select i1 %101, i32 0, i32 %102
  %104 = or i32 %103, %98
  %105 = add nuw nsw i32 %99, 1
  %106 = ashr i32 %90, %105
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %108, label %96, !llvm.loop !409

108:                                              ; preds = %96
  %.lcssa = phi i32 [ %104, %96 ]
  %109 = or i32 %.lcssa, %88
  %110 = sub nsw i32 -2, %109
  %111 = shl nuw nsw i64 %94, 1
  %112 = getelementptr inbounds i32, ptr %6, i64 %111
  store i32 %110, ptr %112, align 4
  %113 = or i64 %111, 1
  %114 = getelementptr inbounds i32, ptr %6, i64 %113
  store i32 %.lcssa, ptr %114, align 4
  %115 = add nuw nsw i64 %94, 1
  %116 = icmp eq i64 %115, %92
  br i1 %116, label %117, label %93, !llvm.loop !410

117:                                              ; preds = %108, %86, %30, %2
  %118 = fdiv float 4.000000e+00, %11
  %119 = getelementptr inbounds %struct.mdct_lookup, ptr %0, i64 0, i32 4
  store float %118, ptr %119, align 8
  ret void
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write)
declare double @log(double noundef) local_unnamed_addr #28

; Function Attrs: nofree nounwind optsize memory(readwrite, argmem: write) uwtable
define internal void @drft_init(ptr nocapture noundef writeonly %0, i32 noundef %1) #46 {
  store i32 %1, ptr %0, align 8
  %3 = mul nsw i32 %1, 3
  %4 = sext i32 %3 to i64
  %5 = tail call noalias ptr @calloc(i64 noundef %4, i64 noundef 4) #65
  %6 = getelementptr inbounds %struct.drft_lookup, ptr %0, i64 0, i32 1
  store ptr %5, ptr %6, align 8
  %7 = tail call noalias dereferenceable_or_null(128) ptr @calloc(i64 noundef 32, i64 noundef 4) #65
  %8 = getelementptr inbounds %struct.drft_lookup, ptr %0, i64 0, i32 2
  store ptr %7, ptr %8, align 8
  %9 = icmp eq i32 %1, 1
  br i1 %9, label %119, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds i32, ptr %7, i64 2
  br label %12

12:                                               ; preds = %29, %10
  %13 = phi i64 [ -1, %10 ], [ %17, %29 ]
  %14 = phi i32 [ 0, %10 ], [ %25, %29 ]
  %15 = phi i32 [ %1, %10 ], [ %31, %29 ]
  %16 = phi i64 [ 0, %10 ], [ %30, %29 ]
  %17 = add i64 %13, 1
  %18 = icmp slt i64 %13, 3
  br i1 %18, label %19, label %22

19:                                               ; preds = %12
  %20 = getelementptr inbounds [4 x i32], ptr @drfti1.ntryh, i64 0, i64 %17
  %21 = load i32, ptr %20, align 4
  br label %24

22:                                               ; preds = %12
  %23 = add nsw i32 %14, 2
  br label %24

24:                                               ; preds = %22, %19
  %25 = phi i32 [ %21, %19 ], [ %23, %22 ]
  %26 = icmp ne i32 %25, 2
  %27 = shl i64 %16, 32
  %28 = ashr exact i64 %27, 32
  br label %29

29:                                               ; preds = %56, %24
  %30 = phi i64 [ %32, %56 ], [ %28, %24 ]
  %31 = phi i32 [ %33, %56 ], [ %15, %24 ]
  %32 = add i64 %30, 1
  %33 = sdiv i32 %31, %25
  %34 = mul nsw i32 %33, %25
  %35 = icmp eq i32 %31, %34
  br i1 %35, label %36, label %12

36:                                               ; preds = %29
  %37 = add nsw i64 %30, 2
  %38 = getelementptr inbounds i32, ptr %7, i64 %37
  store i32 %25, ptr %38, align 4
  %39 = icmp eq i64 %30, 0
  %40 = select i1 %26, i1 true, i1 %39
  br i1 %40, label %56, label %41

41:                                               ; preds = %36
  %42 = icmp slt i64 %30, 1
  br i1 %42, label %55, label %43

43:                                               ; preds = %41
  %44 = and i64 %32, 4294967295
  br label %45

45:                                               ; preds = %45, %43
  %46 = phi i64 [ 1, %43 ], [ %53, %45 ]
  %47 = sub nsw i64 %32, %46
  %48 = add nsw i64 %47, 1
  %49 = getelementptr inbounds i32, ptr %7, i64 %48
  %50 = load i32, ptr %49, align 4
  %51 = add nsw i64 %47, 2
  %52 = getelementptr inbounds i32, ptr %7, i64 %51
  store i32 %50, ptr %52, align 4
  %53 = add nuw nsw i64 %46, 1
  %54 = icmp eq i64 %53, %44
  br i1 %54, label %55, label %45, !llvm.loop !411

55:                                               ; preds = %45, %41
  store i32 2, ptr %11, align 4
  br label %56

56:                                               ; preds = %55, %36
  %57 = icmp eq i32 %33, 1
  br i1 %57, label %58, label %29

58:                                               ; preds = %56
  %.lcssa1 = phi i64 [ %30, %56 ]
  %.lcssa = phi i64 [ %32, %56 ]
  %59 = sext i32 %1 to i64
  %60 = trunc i64 %.lcssa1 to i32
  %61 = trunc i64 %.lcssa to i32
  %62 = getelementptr inbounds float, ptr %5, i64 %59
  store i32 %1, ptr %7, align 4
  %63 = getelementptr inbounds i32, ptr %7, i64 1
  store i32 %61, ptr %63, align 4
  %64 = sitofp i32 %1 to float
  %65 = fdiv float 0x401921FB60000000, %64
  %66 = icmp sgt i32 %60, 0
  br i1 %66, label %67, label %119

67:                                               ; preds = %58
  %68 = and i64 %.lcssa1, 4294967295
  br label %69

69:                                               ; preds = %115, %67
  %70 = phi i64 [ 0, %67 ], [ %117, %115 ]
  %71 = phi i32 [ 0, %67 ], [ %116, %115 ]
  %72 = phi i32 [ 1, %67 ], [ %76, %115 ]
  %73 = add nuw nsw i64 %70, 2
  %74 = getelementptr inbounds i32, ptr %7, i64 %73
  %75 = load i32, ptr %74, align 4
  %76 = mul nsw i32 %75, %72
  %77 = sdiv i32 %1, %76
  %78 = add i32 %75, -1
  %79 = icmp sgt i32 %75, 1
  br i1 %79, label %80, label %115

80:                                               ; preds = %69
  %81 = icmp sgt i32 %77, 2
  %82 = sext i32 %71 to i64
  %83 = sext i32 %77 to i64
  br label %84

84:                                               ; preds = %108, %80
  %85 = phi i64 [ %82, %80 ], [ %109, %108 ]
  %86 = phi i32 [ 0, %80 ], [ %110, %108 ]
  %87 = phi i32 [ 0, %80 ], [ %88, %108 ]
  %88 = add nsw i32 %87, %72
  %89 = sitofp i32 %88 to float
  %90 = fmul float %65, %89
  br i1 %81, label %91, label %108

91:                                               ; preds = %91, %84
  %92 = phi i64 [ %104, %91 ], [ %85, %84 ]
  %93 = phi float [ %95, %91 ], [ 0.000000e+00, %84 ]
  %94 = phi i32 [ %106, %91 ], [ 2, %84 ]
  %95 = fadd float %93, 1.000000e+00
  %96 = fmul float %90, %95
  %97 = fpext float %96 to double
  %98 = tail call double @cos(double noundef %97) #59
  %99 = fptrunc double %98 to float
  %100 = add nsw i64 %92, 1
  %101 = getelementptr inbounds float, ptr %62, i64 %92
  store float %99, ptr %101, align 4
  %102 = tail call double @sin(double noundef %97) #59
  %103 = fptrunc double %102 to float
  %104 = add nsw i64 %92, 2
  %105 = getelementptr inbounds float, ptr %62, i64 %100
  store float %103, ptr %105, align 4
  %106 = add nuw nsw i32 %94, 2
  %107 = icmp slt i32 %106, %77
  br i1 %107, label %91, label %108, !llvm.loop !412

108:                                              ; preds = %91, %84
  %109 = add i64 %85, %83
  %110 = add nuw nsw i32 %86, 1
  %111 = icmp eq i32 %110, %78
  br i1 %111, label %112, label %84, !llvm.loop !413

112:                                              ; preds = %108
  %113 = mul i32 %77, %78
  %114 = add i32 %113, %71
  br label %115

115:                                              ; preds = %112, %69
  %116 = phi i32 [ %71, %69 ], [ %114, %112 ]
  %117 = add nuw nsw i64 %70, 1
  %118 = icmp eq i64 %117, %68
  br i1 %118, label %119, label %69, !llvm.loop !414

119:                                              ; preds = %115, %58, %2
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @vorbis_book_init_encode(ptr nocapture noundef writeonly %0, ptr noundef %1) #0 {
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(80) %0, i8 0, i64 80, i1 false)
  %3 = getelementptr inbounds %struct.codebook, ptr %0, i64 0, i32 3
  store ptr %1, ptr %3, align 8
  %4 = getelementptr inbounds %struct.static_codebook, ptr %1, i64 0, i32 1
  %5 = load i64, ptr %4, align 8
  %6 = getelementptr inbounds %struct.codebook, ptr %0, i64 0, i32 1
  store i64 %5, ptr %6, align 8
  %7 = load i64, ptr %4, align 8
  %8 = getelementptr inbounds %struct.codebook, ptr %0, i64 0, i32 2
  store i64 %7, ptr %8, align 8
  %9 = load i64, ptr %1, align 8
  store i64 %9, ptr %0, align 8
  %10 = getelementptr inbounds %struct.static_codebook, ptr %1, i64 0, i32 2
  %11 = load ptr, ptr %10, align 8
  %12 = load i64, ptr %4, align 8
  %13 = tail call ptr @_make_words(ptr noundef %11, i64 noundef %12, i64 noundef 0) #56
  %14 = getelementptr inbounds %struct.codebook, ptr %0, i64 0, i32 5
  store ptr %13, ptr %14, align 8
  %15 = load i64, ptr %4, align 8
  %16 = trunc i64 %15 to i32
  %17 = tail call ptr @_book_unquantize(ptr noundef nonnull %1, i32 noundef %16, ptr noundef null) #56
  %18 = getelementptr inbounds %struct.codebook, ptr %0, i64 0, i32 4
  store ptr %17, ptr %18, align 8
  ret i32 0
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @_vp_psy_init(ptr nocapture noundef %0, ptr noundef %1, ptr nocapture noundef readonly %2, i32 noundef %3, i64 noundef %4) #3 {
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(88) %0, i8 0, i64 88, i1 false)
  %6 = load i32, ptr %2, align 4
  %7 = getelementptr inbounds %struct.vorbis_look_psy, ptr %0, i64 0, i32 9
  store i32 %6, ptr %7, align 8
  %8 = load i32, ptr %2, align 4
  %9 = sitofp i32 %8 to float
  %10 = fmul float %9, 8.000000e+00
  %11 = fpext float %10 to double
  %12 = tail call double @log(double noundef %11) #59
  %13 = fdiv double %12, 0x3FE62E42FEFA39EF
  %14 = tail call double @llvm.rint.f64(double %13)
  %15 = fadd double %14, -1.000000e+00
  %16 = fptosi double %15 to i64
  %17 = getelementptr inbounds %struct.vorbis_look_psy, ptr %0, i64 0, i32 8
  store i64 %16, ptr %17, align 8
  %18 = sitofp i64 %4 to float
  %19 = fmul float %18, 2.500000e-01
  %20 = fpext float %19 to double
  %21 = fmul double %20, 5.000000e-01
  %22 = sitofp i32 %3 to double
  %23 = fdiv double %21, %22
  %24 = tail call double @log(double noundef %23) #59
  %25 = fmul double %24, 0x3FF7154760000000
  %26 = fadd double %25, 0xC017DCF680000000
  %27 = load i64, ptr %17, align 8
  %28 = trunc i64 %27 to i32
  %29 = add i32 %28, 1
  %30 = shl nuw i32 1, %29
  %31 = sitofp i32 %30 to double
  %32 = fmul double %26, %31
  %33 = load i32, ptr %2, align 4
  %34 = sitofp i32 %33 to double
  %35 = fsub double %32, %34
  %36 = fptosi double %35 to i64
  %37 = getelementptr inbounds %struct.vorbis_look_psy, ptr %0, i64 0, i32 7
  store i64 %36, ptr %37, align 8
  %38 = sitofp i32 %3 to float
  %39 = fadd float %38, 2.500000e-01
  %40 = fmul float %39, %18
  %41 = fpext float %40 to double
  %42 = fmul double %41, 5.000000e-01
  %43 = fdiv double %42, %22
  %44 = tail call double @log(double noundef %43) #59
  %45 = fmul double %44, 0x3FF7154760000000
  %46 = fadd double %45, 0xC017DCF680000000
  %47 = load i64, ptr %17, align 8
  %48 = trunc i64 %47 to i32
  %49 = add i32 %48, 1
  %50 = shl nuw i32 1, %49
  %51 = sitofp i32 %50 to double
  %52 = fmul double %46, %51
  %53 = fadd double %52, 5.000000e-01
  %54 = fptosi double %53 to i64
  %55 = load i64, ptr %37, align 8
  %56 = sub nsw i64 %54, %55
  %57 = trunc i64 %56 to i32
  %58 = add i32 %57, 1
  %59 = getelementptr inbounds %struct.vorbis_look_psy, ptr %0, i64 0, i32 10
  store i32 %58, ptr %59, align 4
  %60 = sext i32 %3 to i64
  %61 = shl nsw i64 %60, 2
  %62 = tail call noalias ptr @malloc(i64 noundef %61) #64
  %63 = getelementptr inbounds %struct.vorbis_look_psy, ptr %0, i64 0, i32 4
  store ptr %62, ptr %63, align 8
  %64 = shl nsw i64 %60, 3
  %65 = tail call noalias ptr @malloc(i64 noundef %64) #64
  %66 = getelementptr inbounds %struct.vorbis_look_psy, ptr %0, i64 0, i32 5
  store ptr %65, ptr %66, align 8
  %67 = tail call noalias ptr @malloc(i64 noundef %64) #64
  %68 = getelementptr inbounds %struct.vorbis_look_psy, ptr %0, i64 0, i32 6
  store ptr %67, ptr %68, align 8
  %69 = getelementptr inbounds %struct.vorbis_look_psy, ptr %0, i64 0, i32 1
  store ptr %1, ptr %69, align 8
  store i32 %3, ptr %0, align 8
  %70 = getelementptr inbounds %struct.vorbis_look_psy, ptr %0, i64 0, i32 11
  store i64 %4, ptr %70, align 8
  %71 = sitofp i64 %4 to double
  br label %83

72:                                               ; preds = %120
  %73 = icmp sgt i32 %3, 0
  br i1 %73, label %74, label %242

74:                                               ; preds = %72
  %75 = shl nuw nsw i32 %3, 1
  %76 = zext i32 %75 to i64
  %77 = sdiv i64 %4, %76
  %78 = getelementptr inbounds %struct.vorbis_info_psy, ptr %1, i64 0, i32 12
  %79 = getelementptr inbounds %struct.vorbis_info_psy, ptr %1, i64 0, i32 10
  %80 = getelementptr inbounds %struct.vorbis_info_psy, ptr %1, i64 0, i32 13
  %81 = getelementptr inbounds %struct.vorbis_info_psy, ptr %1, i64 0, i32 11
  %82 = add nsw i64 %60, 1
  br label %124

83:                                               ; preds = %120, %5
  %84 = phi i64 [ 0, %5 ], [ %86, %120 ]
  %85 = phi i64 [ 0, %5 ], [ %121, %120 ]
  %86 = add nuw nsw i64 %84, 1
  %87 = sitofp i64 %86 to double
  %88 = fmul double %87, 1.250000e-01
  %89 = fadd double %88, -2.000000e+00
  %90 = fadd double %89, 0x4017DCF680000000
  %91 = fmul double %90, 0x3FE62E42A0000000
  %92 = tail call double @exp(double noundef %91) #59
  %93 = fmul double %92, 2.000000e+00
  %94 = fmul double %93, %22
  %95 = fdiv double %94, %71
  %96 = tail call double @llvm.rint.f64(double %95)
  %97 = fptosi double %96 to i32
  %98 = sext i32 %97 to i64
  %99 = icmp slt i64 %85, %98
  br i1 %99, label %100, label %120

100:                                              ; preds = %83
  %101 = getelementptr inbounds [88 x float], ptr @ATH, i64 0, i64 %84
  %102 = load float, ptr %101, align 4
  %103 = getelementptr inbounds [88 x float], ptr @ATH, i64 0, i64 %86
  %104 = load float, ptr %103, align 4
  %105 = fsub float %104, %102
  %106 = sub nsw i64 %98, %85
  %107 = sitofp i64 %106 to float
  %108 = fdiv float %105, %107
  %109 = tail call i64 @llvm.smin.i64(i64 %98, i64 %60)
  %110 = icmp slt i64 %85, %109
  br i1 %110, label %111, label %120

111:                                              ; preds = %111, %100
  %112 = phi i64 [ %118, %111 ], [ %85, %100 ]
  %113 = phi float [ %117, %111 ], [ %102, %100 ]
  %114 = fadd float %113, 1.000000e+02
  %115 = load ptr, ptr %63, align 8
  %116 = getelementptr inbounds float, ptr %115, i64 %112
  store float %114, ptr %116, align 4
  %117 = fadd float %108, %113
  %118 = add nsw i64 %112, 1
  %119 = icmp eq i64 %118, %109
  br i1 %119, label %120, label %111, !llvm.loop !415

120:                                              ; preds = %111, %100, %83
  %121 = phi i64 [ %85, %83 ], [ %85, %100 ], [ %109, %111 ]
  %122 = icmp eq i64 %86, 87
  br i1 %122, label %72, label %83, !llvm.loop !416

123:                                              ; preds = %210
  br i1 %73, label %219, label %242

124:                                              ; preds = %210, %74
  %125 = phi i64 [ 0, %74 ], [ %217, %210 ]
  %126 = phi i64 [ -99, %74 ], [ %178, %210 ]
  %127 = phi i64 [ 1, %74 ], [ %211, %210 ]
  %128 = mul nsw i64 %77, %125
  %129 = sitofp i64 %128 to float
  %130 = fmul float %129, 0x3F483F91E0000000
  %131 = fpext float %130 to double
  %132 = tail call double @atan(double noundef %131) #59
  %133 = fmul double %132, 0x402A333340000000
  %134 = mul nsw i64 %128, %128
  %135 = sitofp i64 %134 to float
  %136 = fmul float %135, 0x3E53DD3DC0000000
  %137 = fpext float %136 to double
  %138 = tail call double @atan(double noundef %137) #59
  %139 = fmul double %138, 0x4001EB8520000000
  %140 = fadd double %133, %139
  %141 = fmul float %129, 0x3F1A36E2E0000000
  %142 = fpext float %141 to double
  %143 = fadd double %140, %142
  %144 = fptrunc double %143 to float
  %145 = load i32, ptr %78, align 8
  %146 = sext i32 %145 to i64
  %147 = add nsw i64 %126, %146
  %148 = icmp slt i64 %147, %125
  br i1 %148, label %149, label %177

149:                                              ; preds = %171, %124
  %150 = phi i64 [ %172, %171 ], [ %126, %124 ]
  %151 = mul nsw i64 %150, %77
  %152 = sitofp i64 %151 to float
  %153 = fmul float %152, 0x3F483F91E0000000
  %154 = fpext float %153 to double
  %155 = tail call double @atan(double noundef %154) #59
  %156 = fmul double %155, 0x402A333340000000
  %157 = mul nsw i64 %151, %151
  %158 = sitofp i64 %157 to float
  %159 = fmul float %158, 0x3E53DD3DC0000000
  %160 = fpext float %159 to double
  %161 = tail call double @atan(double noundef %160) #59
  %162 = fmul double %161, 0x4001EB8520000000
  %163 = fadd double %156, %162
  %164 = fmul float %152, 0x3F1A36E2E0000000
  %165 = fpext float %164 to double
  %166 = fadd double %163, %165
  %167 = load float, ptr %79, align 8
  %168 = fsub float %144, %167
  %169 = fpext float %168 to double
  %170 = fcmp olt double %166, %169
  br i1 %170, label %171, label %177

171:                                              ; preds = %149
  %172 = add nsw i64 %150, 1
  %173 = load i32, ptr %78, align 8
  %174 = sext i32 %173 to i64
  %175 = add nsw i64 %172, %174
  %176 = icmp slt i64 %175, %125
  br i1 %176, label %149, label %177, !llvm.loop !417

177:                                              ; preds = %171, %149, %124
  %178 = phi i64 [ %126, %124 ], [ %172, %171 ], [ %150, %149 ]
  %179 = icmp sgt i64 %127, %60
  br i1 %179, label %210, label %180

180:                                              ; preds = %207, %177
  %181 = phi i64 [ %208, %207 ], [ %127, %177 ]
  %182 = load i32, ptr %80, align 4
  %183 = sext i32 %182 to i64
  %184 = add nsw i64 %125, %183
  %185 = icmp slt i64 %181, %184
  br i1 %185, label %207, label %186

186:                                              ; preds = %180
  %187 = mul nsw i64 %181, %77
  %188 = sitofp i64 %187 to float
  %189 = fmul float %188, 0x3F483F91E0000000
  %190 = fpext float %189 to double
  %191 = tail call double @atan(double noundef %190) #59
  %192 = fmul double %191, 0x402A333340000000
  %193 = mul nsw i64 %187, %187
  %194 = sitofp i64 %193 to float
  %195 = fmul float %194, 0x3E53DD3DC0000000
  %196 = fpext float %195 to double
  %197 = tail call double @atan(double noundef %196) #59
  %198 = fmul double %197, 0x4001EB8520000000
  %199 = fadd double %192, %198
  %200 = fmul float %188, 0x3F1A36E2E0000000
  %201 = fpext float %200 to double
  %202 = fadd double %199, %201
  %203 = load float, ptr %81, align 4
  %204 = fadd float %203, %144
  %205 = fpext float %204 to double
  %206 = fcmp olt double %202, %205
  br i1 %206, label %207, label %210

207:                                              ; preds = %186, %180
  %208 = add i64 %181, 1
  %209 = icmp eq i64 %181, %60
  br i1 %209, label %210, label %180, !llvm.loop !418

210:                                              ; preds = %207, %186, %177
  %211 = phi i64 [ %127, %177 ], [ %82, %207 ], [ %181, %186 ]
  %212 = shl i64 %178, 16
  %213 = add i64 %212, -65537
  %214 = add i64 %213, %211
  %215 = load ptr, ptr %68, align 8
  %216 = getelementptr inbounds i64, ptr %215, i64 %125
  store i64 %214, ptr %216, align 8
  %217 = add nuw nsw i64 %125, 1
  %218 = icmp eq i64 %217, %60
  br i1 %218, label %123, label %124, !llvm.loop !419

219:                                              ; preds = %219, %123
  %220 = phi i64 [ %240, %219 ], [ 0, %123 ]
  %221 = sitofp i64 %220 to float
  %222 = fadd float %221, 2.500000e-01
  %223 = fpext float %222 to double
  %224 = fmul double %223, 5.000000e-01
  %225 = fmul double %224, %71
  %226 = fdiv double %225, %22
  %227 = tail call double @log(double noundef %226) #59
  %228 = fmul double %227, 0x3FF7154760000000
  %229 = fadd double %228, 0xC017DCF680000000
  %230 = load i64, ptr %17, align 8
  %231 = trunc i64 %230 to i32
  %232 = add i32 %231, 1
  %233 = shl nuw i32 1, %232
  %234 = sitofp i32 %233 to double
  %235 = fmul double %229, %234
  %236 = fadd double %235, 5.000000e-01
  %237 = fptosi double %236 to i64
  %238 = load ptr, ptr %66, align 8
  %239 = getelementptr inbounds i64, ptr %238, i64 %220
  store i64 %237, ptr %239, align 8
  %240 = add nuw nsw i64 %220, 1
  %241 = icmp eq i64 %240, %60
  br i1 %241, label %242, label %219, !llvm.loop !420

242:                                              ; preds = %219, %123, %72
  %243 = getelementptr inbounds %struct.vorbis_info_psy, ptr %1, i64 0, i32 7
  %244 = fmul double %71, 5.000000e-01
  %245 = fdiv double %244, %22
  %246 = fptrunc double %245 to float
  %247 = getelementptr inbounds %struct.vorbis_info_psy, ptr %1, i64 0, i32 4
  %248 = load float, ptr %247, align 8
  %249 = getelementptr inbounds %struct.vorbis_info_psy, ptr %1, i64 0, i32 5
  %250 = load float, ptr %249, align 4
  %251 = tail call fastcc ptr @setup_tone_curves(ptr noundef nonnull %243, float noundef %246, i32 noundef %3, float noundef %248, float noundef %250) #56
  %252 = getelementptr inbounds %struct.vorbis_look_psy, ptr %0, i64 0, i32 2
  store ptr %251, ptr %252, align 8
  %253 = tail call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #64
  %254 = getelementptr inbounds %struct.vorbis_look_psy, ptr %0, i64 0, i32 3
  store ptr %253, ptr %254, align 8
  br label %258

255:                                              ; preds = %258
  br i1 %73, label %256, label %310

256:                                              ; preds = %255
  %257 = fmul double %22, 2.000000e+00
  br label %265

258:                                              ; preds = %258, %242
  %259 = phi i64 [ 0, %242 ], [ %263, %258 ]
  %260 = tail call noalias ptr @malloc(i64 noundef %61) #64
  %261 = load ptr, ptr %254, align 8
  %262 = getelementptr inbounds ptr, ptr %261, i64 %259
  store ptr %260, ptr %262, align 8
  %263 = add nuw nsw i64 %259, 1
  %264 = icmp eq i64 %263, 3
  br i1 %264, label %255, label %258, !llvm.loop !421

265:                                              ; preds = %307, %256
  %266 = phi i64 [ 0, %256 ], [ %308, %307 ]
  %267 = sitofp i64 %266 to double
  %268 = fadd double %267, 5.000000e-01
  %269 = fmul double %268, %71
  %270 = fdiv double %269, %257
  %271 = tail call double @log(double noundef %270) #59
  %272 = fmul double %271, 0x3FF7154760000000
  %273 = fadd double %272, 0xC017DCF680000000
  %274 = fmul double %273, 2.000000e+00
  %275 = fptrunc double %274 to float
  %276 = fcmp olt float %275, 0.000000e+00
  %277 = select i1 %276, float 0.000000e+00, float %275
  %278 = fcmp oge float %277, 1.600000e+01
  %279 = select i1 %278, float 1.600000e+01, float %277
  %280 = fptosi float %279 to i32
  %281 = sitofp i32 %280 to float
  %282 = fsub float %279, %281
  %283 = sext i32 %280 to i64
  %284 = fpext float %282 to double
  %285 = fsub double 1.000000e+00, %284
  %286 = add nsw i32 %280, 1
  %287 = sext i32 %286 to i64
  br label %288

288:                                              ; preds = %288, %265
  %289 = phi i64 [ 0, %265 ], [ %305, %288 ]
  %290 = load ptr, ptr %69, align 8
  %291 = getelementptr inbounds %struct.vorbis_info_psy, ptr %290, i64 0, i32 15, i64 %289, i64 %283
  %292 = load float, ptr %291, align 4
  %293 = fpext float %292 to double
  %294 = fmul double %285, %293
  %295 = getelementptr inbounds %struct.vorbis_info_psy, ptr %290, i64 0, i32 15, i64 %289, i64 %287
  %296 = load float, ptr %295, align 4
  %297 = fmul float %282, %296
  %298 = fpext float %297 to double
  %299 = fadd double %294, %298
  %300 = fptrunc double %299 to float
  %301 = load ptr, ptr %254, align 8
  %302 = getelementptr inbounds ptr, ptr %301, i64 %289
  %303 = load ptr, ptr %302, align 8
  %304 = getelementptr inbounds float, ptr %303, i64 %266
  store float %300, ptr %304, align 4
  %305 = add nuw nsw i64 %289, 1
  %306 = icmp eq i64 %305, 3
  br i1 %306, label %307, label %288, !llvm.loop !422

307:                                              ; preds = %288
  %308 = add nuw nsw i64 %266, 1
  %309 = icmp eq i64 %308, %60
  br i1 %309, label %310, label %265, !llvm.loop !423

310:                                              ; preds = %307, %255
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @vorbis_book_init_decode(ptr nocapture noundef %0, ptr nocapture noundef readonly %1) #0 {
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(80) %0, i8 0, i64 80, i1 false)
  %3 = getelementptr inbounds %struct.static_codebook, ptr %1, i64 0, i32 1
  %4 = load i64, ptr %3, align 8
  %5 = icmp sgt i64 %4, 0
  br i1 %5, label %6, label %19

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.static_codebook, ptr %1, i64 0, i32 2
  %8 = load ptr, ptr %7, align 8
  br label %9

9:                                                ; preds = %9, %6
  %10 = phi i64 [ 0, %6 ], [ %17, %9 ]
  %11 = phi i32 [ 0, %6 ], [ %16, %9 ]
  %12 = getelementptr inbounds i64, ptr %8, i64 %10
  %13 = load i64, ptr %12, align 8
  %14 = icmp sgt i64 %13, 0
  %15 = zext i1 %14 to i32
  %16 = add nuw nsw i32 %11, %15
  %17 = add nuw nsw i64 %10, 1
  %18 = icmp eq i64 %17, %4
  br i1 %18, label %19, label %9, !llvm.loop !424

19:                                               ; preds = %9, %2
  %20 = phi i32 [ 0, %2 ], [ %16, %9 ]
  %21 = getelementptr inbounds %struct.codebook, ptr %0, i64 0, i32 1
  store i64 %4, ptr %21, align 8
  %22 = zext i32 %20 to i64
  %23 = getelementptr inbounds %struct.codebook, ptr %0, i64 0, i32 2
  store i64 %22, ptr %23, align 8
  %24 = load i64, ptr %1, align 8
  store i64 %24, ptr %0, align 8
  %25 = getelementptr inbounds %struct.static_codebook, ptr %1, i64 0, i32 2
  %26 = load ptr, ptr %25, align 8
  %27 = load i64, ptr %3, align 8
  %28 = tail call ptr @_make_words(ptr noundef %26, i64 noundef %27, i64 noundef %22) #56
  %29 = shl nuw nsw i64 %22, 3
  %30 = alloca i8, i64 %29, align 16
  %31 = icmp eq ptr %28, null
  br i1 %31, label %280, label %32

32:                                               ; preds = %19
  %33 = icmp eq i32 %20, 0
  br i1 %33, label %42, label %34

34:                                               ; preds = %34, %32
  %35 = phi i64 [ %40, %34 ], [ 0, %32 ]
  %36 = getelementptr inbounds i32, ptr %28, i64 %35
  %37 = load i32, ptr %36, align 4
  %38 = tail call i32 @llvm.bitreverse.i32(i32 %37)
  store i32 %38, ptr %36, align 4
  %39 = getelementptr inbounds ptr, ptr %30, i64 %35
  store ptr %36, ptr %39, align 8
  %40 = add nuw nsw i64 %35, 1
  %41 = icmp eq i64 %40, %22
  br i1 %41, label %42, label %34, !llvm.loop !425

42:                                               ; preds = %34, %32
  call void @qsort(ptr noundef nonnull %30, i64 noundef %22, i64 noundef 8, ptr noundef nonnull @sort32a) #59
  %43 = shl nuw nsw i64 %22, 2
  %44 = alloca i8, i64 %43, align 16
  %45 = call noalias ptr @malloc(i64 noundef %43) #64
  %46 = getelementptr inbounds %struct.codebook, ptr %0, i64 0, i32 5
  store ptr %45, ptr %46, align 8
  br i1 %33, label %73, label %47

47:                                               ; preds = %42
  %48 = ptrtoint ptr %28 to i64
  br label %50

49:                                               ; preds = %50
  br i1 %33, label %73, label %62

50:                                               ; preds = %50, %47
  %51 = phi i64 [ 0, %47 ], [ %60, %50 ]
  %52 = getelementptr inbounds ptr, ptr %30, i64 %51
  %53 = load ptr, ptr %52, align 8
  %54 = ptrtoint ptr %53 to i64
  %55 = sub i64 %54, %48
  %56 = shl i64 %55, 30
  %57 = ashr i64 %56, 32
  %58 = getelementptr inbounds i32, ptr %44, i64 %57
  %59 = trunc i64 %51 to i32
  store i32 %59, ptr %58, align 4
  %60 = add nuw nsw i64 %51, 1
  %61 = icmp eq i64 %60, %22
  br i1 %61, label %49, label %50, !llvm.loop !426

62:                                               ; preds = %62, %49
  %63 = phi i64 [ %71, %62 ], [ 0, %49 ]
  %64 = getelementptr inbounds i32, ptr %28, i64 %63
  %65 = load i32, ptr %64, align 4
  %66 = load ptr, ptr %46, align 8
  %67 = getelementptr inbounds i32, ptr %44, i64 %63
  %68 = load i32, ptr %67, align 4
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds i32, ptr %66, i64 %69
  store i32 %65, ptr %70, align 4
  %71 = add nuw nsw i64 %63, 1
  %72 = icmp eq i64 %71, %22
  br i1 %72, label %73, label %62, !llvm.loop !427

73:                                               ; preds = %62, %49, %42
  call void @free(ptr noundef %28) #59
  %74 = call ptr @_book_unquantize(ptr noundef nonnull %1, i32 noundef %20, ptr noundef nonnull %44) #56
  %75 = getelementptr inbounds %struct.codebook, ptr %0, i64 0, i32 4
  store ptr %74, ptr %75, align 8
  %76 = call noalias ptr @malloc(i64 noundef %43) #64
  %77 = getelementptr inbounds %struct.codebook, ptr %0, i64 0, i32 6
  store ptr %76, ptr %77, align 8
  %78 = load i64, ptr %3, align 8
  %79 = icmp sgt i64 %78, 0
  br i1 %79, label %80, label %103

80:                                               ; preds = %98, %73
  %81 = phi i64 [ %99, %98 ], [ %78, %73 ]
  %82 = phi i64 [ %101, %98 ], [ 0, %73 ]
  %83 = phi i32 [ %100, %98 ], [ 0, %73 ]
  %84 = load ptr, ptr %25, align 8
  %85 = getelementptr inbounds i64, ptr %84, i64 %82
  %86 = load i64, ptr %85, align 8
  %87 = icmp sgt i64 %86, 0
  br i1 %87, label %88, label %98

88:                                               ; preds = %80
  %89 = load ptr, ptr %77, align 8
  %90 = add nsw i32 %83, 1
  %91 = sext i32 %83 to i64
  %92 = getelementptr inbounds i32, ptr %44, i64 %91
  %93 = load i32, ptr %92, align 4
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds i32, ptr %89, i64 %94
  %96 = trunc i64 %82 to i32
  store i32 %96, ptr %95, align 4
  %97 = load i64, ptr %3, align 8
  br label %98

98:                                               ; preds = %88, %80
  %99 = phi i64 [ %97, %88 ], [ %81, %80 ]
  %100 = phi i32 [ %90, %88 ], [ %83, %80 ]
  %101 = add nuw nsw i64 %82, 1
  %102 = icmp sgt i64 %99, %101
  br i1 %102, label %80, label %103, !llvm.loop !428

103:                                              ; preds = %98, %73
  %104 = phi i32 [ 0, %73 ], [ %100, %98 ]
  %105 = sext i32 %104 to i64
  %106 = call noalias ptr @malloc(i64 noundef %105) #64
  %107 = getelementptr inbounds %struct.codebook, ptr %0, i64 0, i32 7
  store ptr %106, ptr %107, align 8
  %108 = load i64, ptr %3, align 8
  %109 = icmp sgt i64 %108, 0
  br i1 %109, label %110, label %133

110:                                              ; preds = %128, %103
  %111 = phi i64 [ %129, %128 ], [ %108, %103 ]
  %112 = phi i64 [ %131, %128 ], [ 0, %103 ]
  %113 = phi i32 [ %130, %128 ], [ 0, %103 ]
  %114 = load ptr, ptr %25, align 8
  %115 = getelementptr inbounds i64, ptr %114, i64 %112
  %116 = load i64, ptr %115, align 8
  %117 = icmp sgt i64 %116, 0
  br i1 %117, label %118, label %128

118:                                              ; preds = %110
  %119 = trunc i64 %116 to i8
  %120 = load ptr, ptr %107, align 8
  %121 = add nsw i32 %113, 1
  %122 = sext i32 %113 to i64
  %123 = getelementptr inbounds i32, ptr %44, i64 %122
  %124 = load i32, ptr %123, align 4
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds i8, ptr %120, i64 %125
  store i8 %119, ptr %126, align 1
  %127 = load i64, ptr %3, align 8
  br label %128

128:                                              ; preds = %118, %110
  %129 = phi i64 [ %127, %118 ], [ %111, %110 ]
  %130 = phi i32 [ %121, %118 ], [ %113, %110 ]
  %131 = add nuw nsw i64 %112, 1
  %132 = icmp sgt i64 %129, %131
  br i1 %132, label %110, label %133, !llvm.loop !429

133:                                              ; preds = %128, %103
  %134 = phi i32 [ 0, %103 ], [ %130, %128 ]
  %135 = load i64, ptr %23, align 8
  %136 = trunc i64 %135 to i32
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %150, label %138

138:                                              ; preds = %138, %133
  %139 = phi i32 [ %141, %138 ], [ 0, %133 ]
  %140 = phi i32 [ %142, %138 ], [ %136, %133 ]
  %141 = add nuw nsw i32 %139, 1
  %142 = lshr i32 %140, 1
  %143 = icmp ult i32 %140, 2
  br i1 %143, label %144, label %138, !llvm.loop !202

144:                                              ; preds = %138
  %.lcssa = phi i32 [ %139, %138 ]
  %145 = icmp ult i32 %.lcssa, 8
  br i1 %145, label %150, label %146

146:                                              ; preds = %144
  %147 = add nsw i32 %.lcssa, -3
  %148 = icmp ugt i32 %.lcssa, 11
  %149 = select i1 %148, i32 8, i32 %147
  br label %150

150:                                              ; preds = %146, %144, %133
  %151 = phi i32 [ 5, %144 ], [ %149, %146 ], [ 5, %133 ]
  %152 = getelementptr inbounds %struct.codebook, ptr %0, i64 0, i32 9
  store i32 %151, ptr %152, align 8
  %153 = shl nuw i32 1, %151
  %154 = sext i32 %153 to i64
  %155 = call noalias ptr @calloc(i64 noundef %154, i64 noundef 4) #65
  %156 = getelementptr inbounds %struct.codebook, ptr %0, i64 0, i32 8
  store ptr %155, ptr %156, align 8
  %157 = getelementptr inbounds %struct.codebook, ptr %0, i64 0, i32 10
  store i32 0, ptr %157, align 4
  %158 = icmp sgt i32 %134, 0
  br i1 %158, label %159, label %216

159:                                              ; preds = %150
  %160 = zext i32 %134 to i64
  %161 = load ptr, ptr %107, align 8
  br label %162

162:                                              ; preds = %209, %159
  %163 = phi ptr [ %161, %159 ], [ %210, %209 ]
  %164 = phi i32 [ %151, %159 ], [ %211, %209 ]
  %165 = phi i32 [ %151, %159 ], [ %212, %209 ]
  %166 = phi ptr [ %161, %159 ], [ %213, %209 ]
  %167 = phi i64 [ 0, %159 ], [ %214, %209 ]
  %168 = load i32, ptr %157, align 4
  %169 = getelementptr inbounds i8, ptr %166, i64 %167
  %170 = load i8, ptr %169, align 1
  %171 = sext i8 %170 to i32
  %172 = icmp slt i32 %168, %171
  br i1 %172, label %173, label %176

173:                                              ; preds = %162
  store i32 %171, ptr %157, align 4
  %174 = load i8, ptr %169, align 1
  %175 = sext i8 %174 to i32
  br label %176

176:                                              ; preds = %173, %162
  %177 = phi i32 [ %175, %173 ], [ %171, %162 ]
  %178 = icmp slt i32 %165, %177
  br i1 %178, label %209, label %179

179:                                              ; preds = %176
  %180 = load ptr, ptr %46, align 8
  %181 = getelementptr inbounds i32, ptr %180, i64 %167
  %182 = load i32, ptr %181, align 4
  %183 = call i32 @llvm.bitreverse.i32(i32 %182)
  %184 = getelementptr inbounds i8, ptr %163, i64 %167
  %185 = load i8, ptr %184, align 1
  %186 = sext i8 %185 to i32
  %187 = sub nsw i32 %164, %186
  %188 = icmp eq i32 %187, 31
  br i1 %188, label %209, label %189

189:                                              ; preds = %179
  %190 = trunc i64 %167 to i32
  %191 = add i32 %190, 1
  br label %192

192:                                              ; preds = %192, %189
  %193 = phi i32 [ %186, %189 ], [ %205, %192 ]
  %194 = phi i32 [ 0, %189 ], [ %200, %192 ]
  %195 = load ptr, ptr %156, align 8
  %196 = shl i32 %194, %193
  %197 = or i32 %196, %183
  %198 = zext i32 %197 to i64
  %199 = getelementptr inbounds i32, ptr %195, i64 %198
  store i32 %191, ptr %199, align 4
  %200 = add nuw nsw i32 %194, 1
  %201 = load i32, ptr %152, align 8
  %202 = load ptr, ptr %107, align 8
  %203 = getelementptr inbounds i8, ptr %202, i64 %167
  %204 = load i8, ptr %203, align 1
  %205 = sext i8 %204 to i32
  %206 = sub nsw i32 %201, %205
  %207 = shl nuw i32 1, %206
  %208 = icmp slt i32 %200, %207
  br i1 %208, label %192, label %209, !llvm.loop !430

209:                                              ; preds = %192, %179, %176
  %210 = phi ptr [ %163, %179 ], [ %163, %176 ], [ %202, %192 ]
  %211 = phi i32 [ %164, %179 ], [ %164, %176 ], [ %201, %192 ]
  %212 = phi i32 [ %164, %179 ], [ %165, %176 ], [ %201, %192 ]
  %213 = phi ptr [ %163, %179 ], [ %166, %176 ], [ %202, %192 ]
  %214 = add nuw nsw i64 %167, 1
  %215 = icmp eq i64 %214, %160
  br i1 %215, label %216, label %162, !llvm.loop !431

216:                                              ; preds = %209, %150
  %217 = phi i32 [ %151, %150 ], [ %211, %209 ]
  %218 = sub nsw i32 31, %217
  %219 = zext i32 %218 to i64
  %220 = shl i64 4294967294, %219
  %221 = trunc i64 %220 to i32
  %222 = icmp eq i32 %151, 31
  br i1 %222, label %281, label %223

223:                                              ; preds = %216
  %224 = sext i32 %134 to i64
  %225 = call i32 @llvm.smax.i32(i32 %153, i32 1)
  br label %226

226:                                              ; preds = %275, %223
  %227 = phi i32 [ 0, %223 ], [ %278, %275 ]
  %228 = phi i64 [ 0, %223 ], [ %277, %275 ]
  %229 = phi i64 [ 0, %223 ], [ %276, %275 ]
  %230 = load i32, ptr %152, align 8
  %231 = sub nsw i32 32, %230
  %232 = shl i32 %227, %231
  %233 = load ptr, ptr %156, align 8
  %234 = call i32 @llvm.bitreverse.i32(i32 %232)
  %235 = zext i32 %234 to i64
  %236 = getelementptr inbounds i32, ptr %233, i64 %235
  %237 = load i32, ptr %236, align 4
  %238 = icmp eq i32 %237, 0
  br i1 %238, label %239, label %275

239:                                              ; preds = %226
  %240 = add i64 %229, 1
  %241 = call i64 @llvm.smax.i64(i64 %240, i64 %224)
  %242 = add nsw i64 %241, -1
  br label %243

243:                                              ; preds = %246, %239
  %244 = phi i64 [ %247, %246 ], [ %229, %239 ]
  %245 = icmp eq i64 %244, %242
  br i1 %245, label %252, label %246

246:                                              ; preds = %243
  %247 = add nsw i64 %244, 1
  %248 = load ptr, ptr %46, align 8
  %249 = getelementptr inbounds i32, ptr %248, i64 %247
  %250 = load i32, ptr %249, align 4
  %251 = icmp ugt i32 %250, %232
  br i1 %251, label %252, label %243, !llvm.loop !432

252:                                              ; preds = %246, %243
  %253 = phi i64 [ %242, %243 ], [ %244, %246 ]
  %254 = icmp slt i64 %228, %224
  br i1 %254, label %255, label %266

255:                                              ; preds = %252
  %256 = load ptr, ptr %46, align 8
  br label %257

257:                                              ; preds = %263, %255
  %258 = phi i64 [ %228, %255 ], [ %264, %263 ]
  %259 = getelementptr inbounds i32, ptr %256, i64 %258
  %260 = load i32, ptr %259, align 4
  %261 = and i32 %260, %221
  %262 = icmp ult i32 %232, %261
  br i1 %262, label %266, label %263

263:                                              ; preds = %257
  %264 = add i64 %258, 1
  %265 = icmp eq i64 %264, %224
  br i1 %265, label %266, label %257, !llvm.loop !433

266:                                              ; preds = %263, %257, %252
  %267 = phi i64 [ %228, %252 ], [ %224, %263 ], [ %258, %257 ]
  %268 = sub nsw i64 %224, %267
  %269 = call i64 @llvm.umin.i64(i64 %253, i64 32767)
  %270 = call i64 @llvm.umin.i64(i64 %268, i64 32767)
  %271 = shl nuw nsw i64 %269, 15
  %272 = or i64 %270, %271
  %273 = trunc i64 %272 to i32
  %274 = or i32 %273, -2147483648
  store i32 %274, ptr %236, align 4
  br label %275

275:                                              ; preds = %266, %226
  %276 = phi i64 [ %253, %266 ], [ %229, %226 ]
  %277 = phi i64 [ %267, %266 ], [ %228, %226 ]
  %278 = add nuw nsw i32 %227, 1
  %279 = icmp eq i32 %278, %225
  br i1 %279, label %281, label %226, !llvm.loop !434

280:                                              ; preds = %19
  tail call void @vorbis_book_clear(ptr noundef nonnull %0) #56
  br label %281

281:                                              ; preds = %280, %275, %216
  %282 = phi i32 [ -1, %280 ], [ 0, %216 ], [ 0, %275 ]
  ret i32 %282
}

; Function Attrs: mustprogress nounwind optsize willreturn uwtable
define internal void @vorbis_staticbook_destroy(ptr nocapture noundef %0) #13 {
  %2 = getelementptr inbounds %struct.static_codebook, ptr %0, i64 0, i32 12
  %3 = load i32, ptr %2, align 8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %6, label %5

5:                                                ; preds = %1
  tail call void @vorbis_staticbook_clear(ptr noundef nonnull %0) #56
  tail call void @free(ptr noundef nonnull %0) #59
  br label %6

6:                                                ; preds = %5, %1
  ret void
}

; Function Attrs: mustprogress nounwind optsize willreturn uwtable
define internal void @vorbis_staticbook_clear(ptr nocapture noundef %0) #13 {
  %2 = getelementptr inbounds %struct.static_codebook, ptr %0, i64 0, i32 12
  %3 = load i32, ptr %2, align 8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %44, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.static_codebook, ptr %0, i64 0, i32 8
  %7 = load ptr, ptr %6, align 8
  %8 = icmp eq ptr %7, null
  br i1 %8, label %10, label %9

9:                                                ; preds = %5
  tail call void @free(ptr noundef nonnull %7) #59
  br label %10

10:                                               ; preds = %9, %5
  %11 = getelementptr inbounds %struct.static_codebook, ptr %0, i64 0, i32 2
  %12 = load ptr, ptr %11, align 8
  %13 = icmp eq ptr %12, null
  br i1 %13, label %15, label %14

14:                                               ; preds = %10
  tail call void @free(ptr noundef nonnull %12) #59
  br label %15

15:                                               ; preds = %14, %10
  %16 = getelementptr inbounds %struct.static_codebook, ptr %0, i64 0, i32 9
  %17 = load ptr, ptr %16, align 8
  %18 = icmp eq ptr %17, null
  br i1 %18, label %32, label %19

19:                                               ; preds = %15
  %20 = load ptr, ptr %17, align 8
  tail call void @free(ptr noundef %20) #59
  %21 = load ptr, ptr %16, align 8
  %22 = getelementptr inbounds %struct.encode_aux_nearestmatch, ptr %21, i64 0, i32 1
  %23 = load ptr, ptr %22, align 8
  tail call void @free(ptr noundef %23) #59
  %24 = load ptr, ptr %16, align 8
  %25 = getelementptr inbounds %struct.encode_aux_nearestmatch, ptr %24, i64 0, i32 2
  %26 = load ptr, ptr %25, align 8
  tail call void @free(ptr noundef %26) #59
  %27 = load ptr, ptr %16, align 8
  %28 = getelementptr inbounds %struct.encode_aux_nearestmatch, ptr %27, i64 0, i32 3
  %29 = load ptr, ptr %28, align 8
  tail call void @free(ptr noundef %29) #59
  %30 = load ptr, ptr %16, align 8
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(48) %30, i8 0, i64 48, i1 false)
  %31 = load ptr, ptr %16, align 8
  tail call void @free(ptr noundef %31) #59
  br label %32

32:                                               ; preds = %19, %15
  %33 = getelementptr inbounds %struct.static_codebook, ptr %0, i64 0, i32 10
  %34 = load ptr, ptr %33, align 8
  %35 = icmp eq ptr %34, null
  br i1 %35, label %43, label %36

36:                                               ; preds = %32
  %37 = load ptr, ptr %34, align 8
  tail call void @free(ptr noundef %37) #59
  %38 = load ptr, ptr %33, align 8
  %39 = getelementptr inbounds %struct.encode_aux_threshmatch, ptr %38, i64 0, i32 1
  %40 = load ptr, ptr %39, align 8
  tail call void @free(ptr noundef %40) #59
  %41 = load ptr, ptr %33, align 8
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %41, i8 0, i64 24, i1 false)
  %42 = load ptr, ptr %33, align 8
  tail call void @free(ptr noundef %42) #59
  br label %43

43:                                               ; preds = %36, %32
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(96) %0, i8 0, i64 96, i1 false)
  br label %44

44:                                               ; preds = %43, %1
  ret void
}

; Function Attrs: nounwind optsize memory(readwrite, argmem: read) uwtable
define internal noalias ptr @_make_words(ptr nocapture noundef readonly %0, i64 noundef %1, i64 noundef %2) #47 {
  %4 = alloca [33 x i32], align 16
  call void @llvm.lifetime.start.p0(i64 132, ptr nonnull %4) #55
  %5 = icmp eq i64 %2, 0
  %6 = select i1 %5, i64 %1, i64 %2
  %7 = shl i64 %6, 2
  %8 = tail call noalias ptr @malloc(i64 noundef %7) #64
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(132) %4, i8 0, i64 132, i1 false)
  %9 = icmp sgt i64 %1, 0
  br i1 %9, label %10, label %101

10:                                               ; preds = %3
  %11 = zext i1 %5 to i64
  %12 = getelementptr inbounds [33 x i32], ptr %4, i64 0, i64 1
  br label %14

13:                                               ; preds = %66
  br i1 %9, label %71, label %101

14:                                               ; preds = %66, %10
  %15 = phi i64 [ 0, %10 ], [ %69, %66 ]
  %16 = phi i64 [ 0, %10 ], [ %68, %66 ]
  %17 = getelementptr inbounds i64, ptr %0, i64 %15
  %18 = load i64, ptr %17, align 8
  %19 = icmp sgt i64 %18, 0
  br i1 %19, label %20, label %66

20:                                               ; preds = %14
  %21 = getelementptr inbounds [33 x i32], ptr %4, i64 0, i64 %18
  %22 = load i32, ptr %21, align 4
  %23 = icmp ugt i64 %18, 31
  %24 = trunc i64 %18 to i32
  %25 = lshr i32 %22, %24
  %26 = icmp eq i32 %25, 0
  %27 = select i1 %23, i1 true, i1 %26
  br i1 %27, label %28, label %65

28:                                               ; preds = %20
  %29 = getelementptr inbounds i32, ptr %8, i64 %16
  store i32 %22, ptr %29, align 4
  br label %30

30:                                               ; preds = %46, %28
  %31 = phi i64 [ %48, %46 ], [ %18, %28 ]
  %32 = getelementptr inbounds [33 x i32], ptr %4, i64 0, i64 %31
  %33 = load i32, ptr %32, align 4
  %34 = and i32 %33, 1
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %46, label %36

36:                                               ; preds = %30
  %.lcssa2 = phi i64 [ %31, %30 ]
  %.lcssa = phi ptr [ %32, %30 ]
  %37 = icmp eq i64 %.lcssa2, 1
  br i1 %37, label %38, label %41

38:                                               ; preds = %36
  %39 = load i32, ptr %12, align 4
  %40 = add i32 %39, 1
  store i32 %40, ptr %12, align 4
  br label %50

41:                                               ; preds = %36
  %42 = add nsw i64 %.lcssa2, -1
  %43 = getelementptr inbounds [33 x i32], ptr %4, i64 0, i64 %42
  %44 = load i32, ptr %43, align 4
  %45 = shl i32 %44, 1
  store i32 %45, ptr %.lcssa, align 4
  br label %50

46:                                               ; preds = %30
  %47 = add nuw i32 %33, 1
  store i32 %47, ptr %32, align 4
  %48 = add nsw i64 %31, -1
  %49 = icmp sgt i64 %31, 1
  br i1 %49, label %30, label %50, !llvm.loop !435

50:                                               ; preds = %46, %41, %38
  %51 = icmp slt i64 %18, 32
  br i1 %51, label %52, label %66

52:                                               ; preds = %60, %50
  %53 = phi i32 [ %57, %60 ], [ %22, %50 ]
  %54 = phi i64 [ %55, %60 ], [ %18, %50 ]
  %55 = add nsw i64 %54, 1
  %56 = getelementptr inbounds [33 x i32], ptr %4, i64 0, i64 %55
  %57 = load i32, ptr %56, align 4
  %58 = lshr i32 %57, 1
  %59 = icmp eq i32 %58, %53
  br i1 %59, label %60, label %66

60:                                               ; preds = %52
  %61 = getelementptr inbounds [33 x i32], ptr %4, i64 0, i64 %54
  %62 = load i32, ptr %61, align 4
  %63 = shl i32 %62, 1
  store i32 %63, ptr %56, align 4
  %64 = icmp eq i64 %55, 32
  br i1 %64, label %66, label %52, !llvm.loop !436

65:                                               ; preds = %20
  tail call void @free(ptr noundef %8) #59
  br label %101

66:                                               ; preds = %60, %52, %50, %14
  %67 = phi i64 [ %11, %14 ], [ 1, %50 ], [ 1, %60 ], [ 1, %52 ]
  %68 = add nuw nsw i64 %67, %16
  %69 = add nuw nsw i64 %15, 1
  %70 = icmp eq i64 %69, %1
  br i1 %70, label %13, label %14, !llvm.loop !437

71:                                               ; preds = %97, %13
  %72 = phi i64 [ %99, %97 ], [ 0, %13 ]
  %73 = phi i64 [ %98, %97 ], [ 0, %13 ]
  %74 = getelementptr inbounds i64, ptr %0, i64 %72
  %75 = load i64, ptr %74, align 8
  %76 = icmp sgt i64 %75, 0
  br i1 %76, label %77, label %90

77:                                               ; preds = %71
  %78 = getelementptr inbounds i32, ptr %8, i64 %73
  %79 = load i32, ptr %78, align 4
  br label %80

80:                                               ; preds = %80, %77
  %81 = phi i32 [ 0, %77 ], [ %87, %80 ]
  %82 = phi i64 [ 0, %77 ], [ %88, %80 ]
  %83 = shl i32 %81, 1
  %84 = trunc i64 %82 to i32
  %85 = lshr i32 %79, %84
  %86 = and i32 %85, 1
  %87 = or i32 %86, %83
  %88 = add nuw nsw i64 %82, 1
  %89 = icmp eq i64 %88, %75
  br i1 %89, label %90, label %80, !llvm.loop !438

90:                                               ; preds = %80, %71
  %91 = phi i32 [ 0, %71 ], [ %87, %80 ]
  %92 = icmp ne i64 %75, 0
  %93 = or i1 %92, %5
  br i1 %93, label %94, label %97

94:                                               ; preds = %90
  %95 = add nsw i64 %73, 1
  %96 = getelementptr inbounds i32, ptr %8, i64 %73
  store i32 %91, ptr %96, align 4
  br label %97

97:                                               ; preds = %94, %90
  %98 = phi i64 [ %95, %94 ], [ %73, %90 ]
  %99 = add nuw nsw i64 %72, 1
  %100 = icmp eq i64 %99, %1
  br i1 %100, label %101, label %71, !llvm.loop !439

101:                                              ; preds = %97, %65, %13, %3
  %102 = phi ptr [ null, %65 ], [ %8, %13 ], [ %8, %3 ], [ %8, %97 ]
  call void @llvm.lifetime.end.p0(i64 132, ptr nonnull %4) #55
  ret ptr %102
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, inaccessiblemem: none) uwtable
define internal i32 @sort32a(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #26 {
  %3 = load ptr, ptr %0, align 8
  %4 = load i32, ptr %3, align 4
  %5 = load ptr, ptr %1, align 8
  %6 = load i32, ptr %5, align 4
  %7 = icmp ugt i32 %4, %6
  %8 = zext i1 %7 to i32
  %9 = icmp ult i32 %4, %6
  %10 = sext i1 %9 to i32
  %11 = add nsw i32 %10, %8
  ret i32 %11
}

; Function Attrs: nofree nounwind optsize uwtable
define internal noalias ptr @_book_unquantize(ptr nocapture noundef readonly %0, i32 noundef %1, ptr noundef readonly %2) #3 {
  %4 = getelementptr inbounds %struct.static_codebook, ptr %0, i64 0, i32 3
  %5 = load i32, ptr %4, align 8
  %6 = add i32 %5, -1
  %7 = icmp ult i32 %6, 2
  br i1 %7, label %8, label %169

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.static_codebook, ptr %0, i64 0, i32 4
  %10 = load i64, ptr %9, align 8
  %11 = and i64 %10, 2097151
  %12 = sitofp i64 %11 to double
  %13 = and i64 %10, 2147483648
  %14 = icmp eq i64 %13, 0
  %15 = fneg double %12
  %16 = select i1 %14, double %12, double %15
  %17 = trunc i64 %10 to i32
  %18 = lshr i32 %17, 21
  %19 = and i32 %18, 1023
  %20 = add nsw i32 %19, -788
  %21 = tail call double @ldexp(double noundef %16, i32 noundef %20) #59
  %22 = fptrunc double %21 to float
  %23 = getelementptr inbounds %struct.static_codebook, ptr %0, i64 0, i32 5
  %24 = load i64, ptr %23, align 8
  %25 = and i64 %24, 2097151
  %26 = sitofp i64 %25 to double
  %27 = and i64 %24, 2147483648
  %28 = icmp eq i64 %27, 0
  %29 = fneg double %26
  %30 = select i1 %28, double %26, double %29
  %31 = trunc i64 %24 to i32
  %32 = lshr i32 %31, 21
  %33 = and i32 %32, 1023
  %34 = add nsw i32 %33, -788
  %35 = tail call double @ldexp(double noundef %30, i32 noundef %34) #59
  %36 = fptrunc double %35 to float
  %37 = sext i32 %1 to i64
  %38 = load i64, ptr %0, align 8
  %39 = mul nsw i64 %38, %37
  %40 = tail call noalias ptr @calloc(i64 noundef %39, i64 noundef 4) #65
  %41 = load i32, ptr %4, align 8
  switch i32 %41, label %169 [
    i32 1, label %54
    i32 2, label %42
  ]

42:                                               ; preds = %8
  %43 = getelementptr inbounds %struct.static_codebook, ptr %0, i64 0, i32 1
  %44 = load i64, ptr %43, align 8
  %45 = icmp sgt i64 %44, 0
  br i1 %45, label %46, label %169

46:                                               ; preds = %42
  %47 = icmp eq ptr %2, null
  %48 = getelementptr inbounds %struct.static_codebook, ptr %0, i64 0, i32 2
  %49 = icmp sgt i64 %38, 0
  %50 = getelementptr inbounds %struct.static_codebook, ptr %0, i64 0, i32 8
  %51 = fpext float %36 to double
  %52 = fpext float %22 to double
  %53 = getelementptr inbounds %struct.static_codebook, ptr %0, i64 0, i32 7
  br label %120

54:                                               ; preds = %8
  %55 = tail call i64 @_book_maptype1_quantvals(ptr noundef nonnull %0) #56
  %56 = trunc i64 %55 to i32
  %57 = getelementptr inbounds %struct.static_codebook, ptr %0, i64 0, i32 1
  %58 = load i64, ptr %57, align 8
  %59 = icmp sgt i64 %58, 0
  br i1 %59, label %60, label %169

60:                                               ; preds = %54
  %61 = icmp eq ptr %2, null
  %62 = getelementptr inbounds %struct.static_codebook, ptr %0, i64 0, i32 2
  %63 = shl i64 %55, 32
  %64 = ashr exact i64 %63, 32
  %65 = getelementptr inbounds %struct.static_codebook, ptr %0, i64 0, i32 8
  %66 = fpext float %36 to double
  %67 = fpext float %22 to double
  %68 = getelementptr inbounds %struct.static_codebook, ptr %0, i64 0, i32 7
  br label %69

69:                                               ; preds = %116, %60
  %70 = phi i64 [ 0, %60 ], [ %118, %116 ]
  %71 = phi i64 [ 0, %60 ], [ %117, %116 ]
  br i1 %61, label %77, label %72

72:                                               ; preds = %69
  %73 = load ptr, ptr %62, align 8
  %74 = getelementptr inbounds i64, ptr %73, i64 %70
  %75 = load i64, ptr %74, align 8
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %116, label %77

77:                                               ; preds = %72, %69
  %78 = load i64, ptr %0, align 8
  %79 = icmp sgt i64 %78, 0
  br i1 %79, label %80, label %114

80:                                               ; preds = %77
  %81 = load ptr, ptr %65, align 8
  %82 = load i32, ptr %68, align 4
  %83 = icmp eq i32 %82, 0
  %84 = getelementptr inbounds i32, ptr %2, i64 %71
  br label %85

85:                                               ; preds = %106, %80
  %86 = phi i32 [ 1, %80 ], [ %111, %106 ]
  %87 = phi float [ 0.000000e+00, %80 ], [ %102, %106 ]
  %88 = phi i64 [ 0, %80 ], [ %112, %106 ]
  %89 = sext i32 %86 to i64
  %90 = sdiv i64 %70, %89
  %91 = srem i64 %90, %64
  %92 = getelementptr inbounds i64, ptr %81, i64 %91
  %93 = load i64, ptr %92, align 8
  %94 = sitofp i64 %93 to float
  %95 = tail call float @llvm.fabs.f32(float %94)
  %96 = fpext float %95 to double
  %97 = fmul double %66, %96
  %98 = fadd double %97, %67
  %99 = fpext float %87 to double
  %100 = fadd double %98, %99
  %101 = fptrunc double %100 to float
  %102 = select i1 %83, float %87, float %101
  br i1 %61, label %106, label %103

103:                                              ; preds = %85
  %104 = load i32, ptr %84, align 4
  %105 = sext i32 %104 to i64
  br label %106

106:                                              ; preds = %103, %85
  %107 = phi i64 [ %105, %103 ], [ %71, %85 ]
  %108 = mul nsw i64 %78, %107
  %109 = add nsw i64 %108, %88
  %110 = getelementptr inbounds float, ptr %40, i64 %109
  store float %101, ptr %110, align 4
  %111 = mul nsw i32 %86, %56
  %112 = add nuw nsw i64 %88, 1
  %113 = icmp eq i64 %112, %78
  br i1 %113, label %114, label %85, !llvm.loop !440

114:                                              ; preds = %106, %77
  %115 = add nsw i64 %71, 1
  br label %116

116:                                              ; preds = %114, %72
  %117 = phi i64 [ %71, %72 ], [ %115, %114 ]
  %118 = add nuw nsw i64 %70, 1
  %119 = icmp eq i64 %118, %58
  br i1 %119, label %169, label %69, !llvm.loop !441

120:                                              ; preds = %165, %46
  %121 = phi i64 [ 0, %46 ], [ %167, %165 ]
  %122 = phi i64 [ 0, %46 ], [ %166, %165 ]
  br i1 %47, label %128, label %123

123:                                              ; preds = %120
  %124 = load ptr, ptr %48, align 8
  %125 = getelementptr inbounds i64, ptr %124, i64 %121
  %126 = load i64, ptr %125, align 8
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %165, label %128

128:                                              ; preds = %123, %120
  br i1 %49, label %129, label %163

129:                                              ; preds = %128
  %130 = load ptr, ptr %50, align 8
  %131 = mul nsw i64 %121, %38
  %132 = load i32, ptr %53, align 4
  %133 = icmp eq i32 %132, 0
  %134 = getelementptr inbounds i32, ptr %2, i64 %122
  %135 = mul nsw i64 %122, %38
  br label %136

136:                                              ; preds = %158, %129
  %137 = phi float [ 0.000000e+00, %129 ], [ %150, %158 ]
  %138 = phi i64 [ 0, %129 ], [ %161, %158 ]
  %139 = add nsw i64 %138, %131
  %140 = getelementptr inbounds i64, ptr %130, i64 %139
  %141 = load i64, ptr %140, align 8
  %142 = sitofp i64 %141 to float
  %143 = tail call float @llvm.fabs.f32(float %142)
  %144 = fpext float %143 to double
  %145 = fmul double %51, %144
  %146 = fadd double %145, %52
  %147 = fpext float %137 to double
  %148 = fadd double %146, %147
  %149 = fptrunc double %148 to float
  %150 = select i1 %133, float %137, float %149
  br i1 %47, label %156, label %151

151:                                              ; preds = %136
  %152 = load i32, ptr %134, align 4
  %153 = sext i32 %152 to i64
  %154 = mul nsw i64 %38, %153
  %155 = add nsw i64 %154, %138
  br label %158

156:                                              ; preds = %136
  %157 = add nsw i64 %138, %135
  br label %158

158:                                              ; preds = %156, %151
  %159 = phi i64 [ %157, %156 ], [ %155, %151 ]
  %160 = getelementptr inbounds float, ptr %40, i64 %159
  store float %149, ptr %160, align 4
  %161 = add nuw nsw i64 %138, 1
  %162 = icmp eq i64 %161, %38
  br i1 %162, label %163, label %136, !llvm.loop !442

163:                                              ; preds = %158, %128
  %164 = add nsw i64 %122, 1
  br label %165

165:                                              ; preds = %163, %123
  %166 = phi i64 [ %122, %123 ], [ %164, %163 ]
  %167 = add nuw nsw i64 %121, 1
  %168 = icmp eq i64 %167, %44
  br i1 %168, label %169, label %120, !llvm.loop !443

169:                                              ; preds = %165, %116, %54, %42, %8, %3
  %170 = phi ptr [ %40, %8 ], [ null, %3 ], [ %40, %54 ], [ %40, %42 ], [ %40, %116 ], [ %40, %165 ]
  ret ptr %170
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.umin.i64(i64, i64) #27

; Function Attrs: mustprogress nounwind optsize willreturn uwtable
define internal void @vorbis_book_clear(ptr nocapture noundef %0) #13 {
  %2 = getelementptr inbounds %struct.codebook, ptr %0, i64 0, i32 4
  %3 = load ptr, ptr %2, align 8
  %4 = icmp eq ptr %3, null
  br i1 %4, label %6, label %5

5:                                                ; preds = %1
  tail call void @free(ptr noundef nonnull %3) #59
  br label %6

6:                                                ; preds = %5, %1
  %7 = getelementptr inbounds %struct.codebook, ptr %0, i64 0, i32 5
  %8 = load ptr, ptr %7, align 8
  %9 = icmp eq ptr %8, null
  br i1 %9, label %11, label %10

10:                                               ; preds = %6
  tail call void @free(ptr noundef nonnull %8) #59
  br label %11

11:                                               ; preds = %10, %6
  %12 = getelementptr inbounds %struct.codebook, ptr %0, i64 0, i32 6
  %13 = load ptr, ptr %12, align 8
  %14 = icmp eq ptr %13, null
  br i1 %14, label %16, label %15

15:                                               ; preds = %11
  tail call void @free(ptr noundef nonnull %13) #59
  br label %16

16:                                               ; preds = %15, %11
  %17 = getelementptr inbounds %struct.codebook, ptr %0, i64 0, i32 7
  %18 = load ptr, ptr %17, align 8
  %19 = icmp eq ptr %18, null
  br i1 %19, label %21, label %20

20:                                               ; preds = %16
  tail call void @free(ptr noundef nonnull %18) #59
  br label %21

21:                                               ; preds = %20, %16
  %22 = getelementptr inbounds %struct.codebook, ptr %0, i64 0, i32 8
  %23 = load ptr, ptr %22, align 8
  %24 = icmp eq ptr %23, null
  br i1 %24, label %26, label %25

25:                                               ; preds = %21
  tail call void @free(ptr noundef nonnull %23) #59
  br label %26

26:                                               ; preds = %25, %21
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(80) %0, i8 0, i64 80, i1 false)
  ret void
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn
declare double @ldexp(double noundef, i32 noundef) local_unnamed_addr #48

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write)
declare double @exp(double noundef) local_unnamed_addr #28

; Function Attrs: nofree nounwind optsize uwtable
define internal fastcc noalias ptr @setup_tone_curves(ptr nocapture noundef readonly %0, float noundef %1, i32 noundef %2, float noundef %3, float noundef %4) unnamed_addr #3 {
  %6 = alloca [56 x float], align 16
  %7 = alloca [17 x [8 x [56 x float]]], align 16
  %8 = alloca [8 x [56 x float]], align 16
  call void @llvm.lifetime.start.p0(i64 224, ptr nonnull %6) #55
  call void @llvm.lifetime.start.p0(i64 30464, ptr nonnull %7) #55
  call void @llvm.lifetime.start.p0(i64 1792, ptr nonnull %8) #55
  %9 = sext i32 %2 to i64
  %10 = shl nsw i64 %9, 2
  %11 = alloca i8, i64 %10, align 16
  %12 = tail call noalias dereferenceable_or_null(136) ptr @malloc(i64 noundef 136) #64
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(30464) %7, i8 0, i64 30464, i1 false)
  %13 = insertelement <2 x float> <float poison, float 0.000000e+00>, float %3, i64 0
  %14 = insertelement <2 x float> <float 0.000000e+00, float poison>, float %3, i64 1
  %15 = fcmp olt <2 x float> %13, %14
  %16 = insertelement <4 x float> poison, float %4, i64 0
  %17 = shufflevector <4 x float> %16, <4 x float> poison, <4 x i32> zeroinitializer
  %18 = insertelement <4 x float> poison, float %3, i64 0
  %19 = shufflevector <4 x float> %18, <4 x float> poison, <4 x i32> zeroinitializer
  %20 = shufflevector <2 x i1> %15, <2 x i1> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %21 = shufflevector <2 x i1> %15, <2 x i1> poison, <4 x i32> zeroinitializer
  br label %31

22:                                               ; preds = %242
  %23 = fpext float %1 to double
  %24 = icmp sgt i32 %2, 0
  %25 = zext i32 %2 to i64
  %26 = add nuw nsw i64 %25, 3
  %27 = and i64 %26, 8589934588
  %28 = add nsw i64 %25, -1
  %29 = insertelement <4 x i64> poison, i64 %28, i64 0
  %30 = shufflevector <4 x i64> %29, <4 x i64> poison, <4 x i32> zeroinitializer
  br label %245

31:                                               ; preds = %242, %5
  %32 = phi i64 [ 0, %5 ], [ %243, %242 ]
  %33 = mul nuw nsw i64 %32, 1792
  %34 = add nuw nsw i64 %33, 448
  %35 = getelementptr i8, ptr %7, i64 %34
  %36 = mul nuw nsw i64 %32, 1344
  %37 = getelementptr i8, ptr @tonemasks, i64 %36
  %38 = shl nuw nsw i64 %32, 2
  br label %43

39:                                               ; preds = %63
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 16 dereferenceable(1344) %35, ptr noundef nonnull align 16 dereferenceable(1344) %37, i64 1344, i1 false)
  %40 = getelementptr inbounds [17 x [8 x [56 x float]]], ptr %7, i64 0, i64 %32
  %41 = getelementptr inbounds [17 x [6 x [56 x float]]], ptr @tonemasks, i64 0, i64 %32
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 16 dereferenceable(224) %40, ptr noundef nonnull align 16 dereferenceable(224) %41, i64 224, i1 false)
  %42 = getelementptr inbounds [17 x [8 x [56 x float]]], ptr %7, i64 0, i64 %32, i64 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 16 dereferenceable(224) %42, ptr noundef nonnull align 16 dereferenceable(224) %41, i64 224, i1 false)
  br label %72

43:                                               ; preds = %63, %31
  %44 = phi i64 [ 0, %31 ], [ %65, %63 ]
  %45 = add nuw nsw i64 %44, %38
  br label %46

46:                                               ; preds = %59, %43
  %47 = phi i64 [ 0, %43 ], [ %61, %59 ]
  %48 = phi float [ 9.990000e+02, %43 ], [ %60, %59 ]
  %49 = add nuw nsw i64 %45, %47
  %50 = icmp ult i64 %49, 88
  br i1 %50, label %51, label %56

51:                                               ; preds = %46
  %52 = getelementptr inbounds [88 x float], ptr @ATH, i64 0, i64 %49
  %53 = load float, ptr %52, align 4
  %54 = fcmp ogt float %48, %53
  br i1 %54, label %55, label %59

55:                                               ; preds = %51
  br label %59

56:                                               ; preds = %46
  %57 = fcmp ogt float %48, -3.000000e+01
  br i1 %57, label %58, label %59

58:                                               ; preds = %56
  br label %59

59:                                               ; preds = %58, %56, %55, %51
  %60 = phi float [ %53, %55 ], [ %48, %51 ], [ -3.000000e+01, %58 ], [ %48, %56 ]
  %61 = add nuw nsw i64 %47, 1
  %62 = icmp eq i64 %61, 4
  br i1 %62, label %63, label %46, !llvm.loop !444

63:                                               ; preds = %59
  %.lcssa6 = phi float [ %60, %59 ]
  %64 = getelementptr inbounds [56 x float], ptr %6, i64 0, i64 %44
  store float %.lcssa6, ptr %64, align 4
  %65 = add nuw nsw i64 %44, 1
  %66 = icmp eq i64 %65, 56
  br i1 %66, label %39, label %43, !llvm.loop !445

67:                                               ; preds = %94
  %68 = getelementptr inbounds float, ptr %0, i64 %32
  %69 = load float, ptr %68, align 4
  %70 = fpext float %69 to double
  %71 = fadd double %70, 1.000000e+02
  br label %97

72:                                               ; preds = %94, %39
  %73 = phi i64 [ 0, %39 ], [ %95, %94 ]
  br label %74

74:                                               ; preds = %74, %72
  %75 = phi i64 [ 0, %72 ], [ %91, %74 ]
  %76 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %72 ], [ %92, %74 ]
  %77 = sub <4 x i32> <i32 16, i32 16, i32 16, i32 16>, %76
  %78 = tail call <4 x i32> @llvm.abs.v4i32(<4 x i32> %77, i1 true)
  %79 = sitofp <4 x i32> %78 to <4 x float>
  %80 = fmul <4 x float> %17, %79
  %81 = fadd <4 x float> %80, %19
  %82 = fcmp olt <4 x float> %81, zeroinitializer
  %83 = and <4 x i1> %20, %82
  %84 = select <4 x i1> %83, <4 x float> zeroinitializer, <4 x float> %81
  %85 = fcmp ogt <4 x float> %84, zeroinitializer
  %86 = and <4 x i1> %21, %85
  %87 = select <4 x i1> %86, <4 x float> zeroinitializer, <4 x float> %84
  %88 = getelementptr inbounds [17 x [8 x [56 x float]]], ptr %7, i64 0, i64 %32, i64 %73, i64 %75
  %89 = load <4 x float>, ptr %88, align 16
  %90 = fadd <4 x float> %87, %89
  store <4 x float> %90, ptr %88, align 16
  %91 = add nuw i64 %75, 4
  %92 = add <4 x i32> %76, <i32 4, i32 4, i32 4, i32 4>
  %93 = icmp eq i64 %91, 56
  br i1 %93, label %94, label %74, !llvm.loop !446

94:                                               ; preds = %74
  %95 = add nuw nsw i64 %73, 1
  %96 = icmp eq i64 %95, 8
  br i1 %96, label %67, label %72, !llvm.loop !447

97:                                               ; preds = %165, %67
  %98 = phi i64 [ 0, %67 ], [ %166, %165 ]
  %99 = getelementptr inbounds [17 x [8 x [56 x float]]], ptr %7, i64 0, i64 %32, i64 %98
  %100 = trunc i64 %98 to i32
  %101 = tail call i32 @llvm.umax.i32(i32 %100, i32 2)
  %102 = sitofp i32 %101 to double
  %103 = fmul double %102, 1.000000e+01
  %104 = fsub double %71, %103
  %105 = fadd double %104, -3.000000e+01
  %106 = fptrunc double %105 to float
  %107 = insertelement <4 x float> poison, float %106, i64 0
  %108 = shufflevector <4 x float> %107, <4 x float> poison, <4 x i32> zeroinitializer
  br label %109

109:                                              ; preds = %109, %97
  %110 = phi i64 [ 0, %97 ], [ %114, %109 ]
  %111 = getelementptr inbounds float, ptr %99, i64 %110
  %112 = load <4 x float>, ptr %111, align 16
  %113 = fadd <4 x float> %112, %108
  store <4 x float> %113, ptr %111, align 16
  %114 = add nuw i64 %110, 4
  %115 = icmp eq i64 %114, 56
  br i1 %115, label %116, label %109, !llvm.loop !448

116:                                              ; preds = %109
  %117 = getelementptr inbounds [8 x [56 x float]], ptr %8, i64 0, i64 %98
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 16 dereferenceable(224) %117, ptr noundef nonnull align 16 dereferenceable(224) %6, i64 224, i1 false)
  %118 = sitofp i32 %100 to float
  %119 = fmul float %118, 1.000000e+01
  %120 = fpext float %119 to double
  %121 = fsub double 1.000000e+02, %120
  %122 = fadd double %121, -3.000000e+01
  %123 = fptrunc double %122 to float
  %124 = insertelement <4 x float> poison, float %123, i64 0
  %125 = shufflevector <4 x float> %124, <4 x float> poison, <4 x i32> zeroinitializer
  br label %126

126:                                              ; preds = %126, %116
  %127 = phi i64 [ 0, %116 ], [ %131, %126 ]
  %128 = getelementptr inbounds float, ptr %117, i64 %127
  %129 = load <4 x float>, ptr %128, align 16
  %130 = fadd <4 x float> %129, %125
  store <4 x float> %130, ptr %128, align 16
  %131 = add nuw i64 %127, 4
  %132 = icmp eq i64 %131, 56
  br i1 %132, label %133, label %126, !llvm.loop !449

133:                                              ; preds = %162, %126
  %134 = phi i64 [ %163, %162 ], [ 0, %126 ]
  %135 = getelementptr inbounds float, ptr %99, i64 %134
  %136 = load <4 x float>, ptr %135, align 16
  %137 = getelementptr inbounds float, ptr %117, i64 %134
  %138 = load <4 x float>, ptr %137, align 16
  %139 = fcmp ogt <4 x float> %136, %138
  %140 = extractelement <4 x i1> %139, i64 0
  br i1 %140, label %141, label %144

141:                                              ; preds = %133
  %142 = getelementptr inbounds float, ptr %117, i64 %134
  %143 = extractelement <4 x float> %136, i64 0
  store float %143, ptr %142, align 16
  br label %144

144:                                              ; preds = %141, %133
  %145 = extractelement <4 x i1> %139, i64 1
  br i1 %145, label %146, label %150

146:                                              ; preds = %144
  %147 = or i64 %134, 1
  %148 = getelementptr inbounds float, ptr %117, i64 %147
  %149 = extractelement <4 x float> %136, i64 1
  store float %149, ptr %148, align 4
  br label %150

150:                                              ; preds = %146, %144
  %151 = extractelement <4 x i1> %139, i64 2
  br i1 %151, label %152, label %156

152:                                              ; preds = %150
  %153 = or i64 %134, 2
  %154 = getelementptr inbounds float, ptr %117, i64 %153
  %155 = extractelement <4 x float> %136, i64 2
  store float %155, ptr %154, align 8
  br label %156

156:                                              ; preds = %152, %150
  %157 = extractelement <4 x i1> %139, i64 3
  br i1 %157, label %158, label %162

158:                                              ; preds = %156
  %159 = or i64 %134, 3
  %160 = getelementptr inbounds float, ptr %117, i64 %159
  %161 = extractelement <4 x float> %136, i64 3
  store float %161, ptr %160, align 4
  br label %162

162:                                              ; preds = %158, %156
  %163 = add nuw i64 %134, 4
  %164 = icmp eq i64 %163, 56
  br i1 %164, label %165, label %133, !llvm.loop !450

165:                                              ; preds = %162
  %166 = add nuw nsw i64 %98, 1
  %167 = icmp eq i64 %166, 8
  br i1 %167, label %168, label %97, !llvm.loop !451

168:                                              ; preds = %239, %165
  %169 = phi i64 [ %240, %239 ], [ 1, %165 ]
  %170 = getelementptr inbounds [8 x [56 x float]], ptr %8, i64 0, i64 %169
  %171 = add nsw i64 %169, -1
  %172 = getelementptr inbounds [8 x [56 x float]], ptr %8, i64 0, i64 %171
  br label %173

173:                                              ; preds = %202, %168
  %174 = phi i64 [ 0, %168 ], [ %203, %202 ]
  %175 = getelementptr inbounds float, ptr %172, i64 %174
  %176 = load <4 x float>, ptr %175, align 16
  %177 = getelementptr inbounds float, ptr %170, i64 %174
  %178 = load <4 x float>, ptr %177, align 16
  %179 = fcmp olt <4 x float> %176, %178
  %180 = extractelement <4 x i1> %179, i64 0
  br i1 %180, label %181, label %184

181:                                              ; preds = %173
  %182 = getelementptr inbounds float, ptr %170, i64 %174
  %183 = extractelement <4 x float> %176, i64 0
  store float %183, ptr %182, align 16
  br label %184

184:                                              ; preds = %181, %173
  %185 = extractelement <4 x i1> %179, i64 1
  br i1 %185, label %186, label %190

186:                                              ; preds = %184
  %187 = or i64 %174, 1
  %188 = getelementptr inbounds float, ptr %170, i64 %187
  %189 = extractelement <4 x float> %176, i64 1
  store float %189, ptr %188, align 4
  br label %190

190:                                              ; preds = %186, %184
  %191 = extractelement <4 x i1> %179, i64 2
  br i1 %191, label %192, label %196

192:                                              ; preds = %190
  %193 = or i64 %174, 2
  %194 = getelementptr inbounds float, ptr %170, i64 %193
  %195 = extractelement <4 x float> %176, i64 2
  store float %195, ptr %194, align 8
  br label %196

196:                                              ; preds = %192, %190
  %197 = extractelement <4 x i1> %179, i64 3
  br i1 %197, label %198, label %202

198:                                              ; preds = %196
  %199 = or i64 %174, 3
  %200 = getelementptr inbounds float, ptr %170, i64 %199
  %201 = extractelement <4 x float> %176, i64 3
  store float %201, ptr %200, align 4
  br label %202

202:                                              ; preds = %198, %196
  %203 = add nuw i64 %174, 4
  %204 = icmp eq i64 %203, 56
  br i1 %204, label %205, label %173, !llvm.loop !452

205:                                              ; preds = %202
  %206 = getelementptr inbounds [17 x [8 x [56 x float]]], ptr %7, i64 0, i64 %32, i64 %169
  br label %207

207:                                              ; preds = %236, %205
  %208 = phi i64 [ 0, %205 ], [ %237, %236 ]
  %209 = getelementptr inbounds float, ptr %170, i64 %208
  %210 = load <4 x float>, ptr %209, align 16
  %211 = getelementptr inbounds float, ptr %206, i64 %208
  %212 = load <4 x float>, ptr %211, align 16
  %213 = fcmp olt <4 x float> %210, %212
  %214 = extractelement <4 x i1> %213, i64 0
  br i1 %214, label %215, label %218

215:                                              ; preds = %207
  %216 = getelementptr inbounds float, ptr %206, i64 %208
  %217 = extractelement <4 x float> %210, i64 0
  store float %217, ptr %216, align 16
  br label %218

218:                                              ; preds = %215, %207
  %219 = extractelement <4 x i1> %213, i64 1
  br i1 %219, label %220, label %224

220:                                              ; preds = %218
  %221 = or i64 %208, 1
  %222 = getelementptr inbounds float, ptr %206, i64 %221
  %223 = extractelement <4 x float> %210, i64 1
  store float %223, ptr %222, align 4
  br label %224

224:                                              ; preds = %220, %218
  %225 = extractelement <4 x i1> %213, i64 2
  br i1 %225, label %226, label %230

226:                                              ; preds = %224
  %227 = or i64 %208, 2
  %228 = getelementptr inbounds float, ptr %206, i64 %227
  %229 = extractelement <4 x float> %210, i64 2
  store float %229, ptr %228, align 8
  br label %230

230:                                              ; preds = %226, %224
  %231 = extractelement <4 x i1> %213, i64 3
  br i1 %231, label %232, label %236

232:                                              ; preds = %230
  %233 = or i64 %208, 3
  %234 = getelementptr inbounds float, ptr %206, i64 %233
  %235 = extractelement <4 x float> %210, i64 3
  store float %235, ptr %234, align 4
  br label %236

236:                                              ; preds = %232, %230
  %237 = add nuw i64 %208, 4
  %238 = icmp eq i64 %237, 56
  br i1 %238, label %239, label %207, !llvm.loop !453

239:                                              ; preds = %236
  %240 = add nuw nsw i64 %169, 1
  %241 = icmp eq i64 %240, 8
  br i1 %241, label %242, label %168, !llvm.loop !454

242:                                              ; preds = %239
  %243 = add nuw nsw i64 %32, 1
  %244 = icmp eq i64 %243, 17
  br i1 %244, label %22, label %31, !llvm.loop !455

245:                                              ; preds = %517, %22
  %246 = phi i64 [ 0, %22 ], [ %282, %517 ]
  %247 = tail call noalias dereferenceable_or_null(64) ptr @malloc(i64 noundef 64) #64
  %248 = getelementptr inbounds ptr, ptr %12, i64 %246
  store ptr %247, ptr %248, align 8
  %249 = trunc i64 %246 to i32
  %250 = sitofp i32 %249 to double
  %251 = fmul double %250, 5.000000e-01
  %252 = fadd double %251, 0x4017DCF680000000
  %253 = fmul double %252, 0x3FE62E42A0000000
  %254 = tail call double @exp(double noundef %253) #59
  %255 = fdiv double %254, %23
  %256 = tail call double @llvm.floor.f64(double %255)
  %257 = fptosi double %256 to i32
  %258 = sitofp i32 %257 to float
  %259 = fmul float %258, %1
  %260 = fadd float %259, 1.000000e+00
  %261 = fpext float %260 to double
  %262 = tail call double @log(double noundef %261) #59
  %263 = fmul double %262, 0x3FF7154760000000
  %264 = fadd double %263, 0xC017DCF680000000
  %265 = fmul double %264, 2.000000e+00
  %266 = tail call double @llvm.ceil.f64(double %265)
  %267 = fptosi double %266 to i32
  %268 = add nsw i32 %257, 1
  %269 = sitofp i32 %268 to float
  %270 = fmul float %269, %1
  %271 = fpext float %270 to double
  %272 = tail call double @log(double noundef %271) #59
  %273 = fmul double %272, 0x3FF7154760000000
  %274 = fadd double %273, 0xC017DCF680000000
  %275 = fmul double %274, 2.000000e+00
  %276 = tail call double @llvm.floor.f64(double %275)
  %277 = fptosi double %276 to i32
  %278 = tail call i32 @llvm.smin.i32(i32 %249, i32 %267)
  %279 = tail call i32 @llvm.smax.i32(i32 %278, i32 0)
  %280 = tail call i32 @llvm.smin.i32(i32 %277, i32 16)
  %281 = icmp sgt i32 %279, %280
  %282 = add nuw nsw i64 %246, 1
  %283 = icmp ult i64 %246, 16
  %284 = zext i32 %279 to i64
  %285 = sext i32 %280 to i64
  br label %286

286:                                              ; preds = %511, %245
  %287 = phi i64 [ 0, %245 ], [ %515, %511 ]
  %288 = tail call noalias dereferenceable_or_null(232) ptr @malloc(i64 noundef 232) #64
  %289 = getelementptr inbounds ptr, ptr %247, i64 %287
  store ptr %288, ptr %289, align 8
  br i1 %24, label %290, label %316

290:                                              ; preds = %312, %286
  %291 = phi i64 [ %313, %312 ], [ 0, %286 ]
  %292 = phi <4 x i64> [ %314, %312 ], [ <i64 0, i64 1, i64 2, i64 3>, %286 ]
  %293 = icmp ule <4 x i64> %292, %30
  %294 = extractelement <4 x i1> %293, i64 0
  br i1 %294, label %295, label %297

295:                                              ; preds = %290
  %296 = getelementptr inbounds float, ptr %11, i64 %291
  store float 9.990000e+02, ptr %296, align 16
  br label %297

297:                                              ; preds = %295, %290
  %298 = extractelement <4 x i1> %293, i64 1
  br i1 %298, label %299, label %302

299:                                              ; preds = %297
  %300 = or i64 %291, 1
  %301 = getelementptr inbounds float, ptr %11, i64 %300
  store float 9.990000e+02, ptr %301, align 4
  br label %302

302:                                              ; preds = %299, %297
  %303 = extractelement <4 x i1> %293, i64 2
  br i1 %303, label %304, label %307

304:                                              ; preds = %302
  %305 = or i64 %291, 2
  %306 = getelementptr inbounds float, ptr %11, i64 %305
  store float 9.990000e+02, ptr %306, align 8
  br label %307

307:                                              ; preds = %304, %302
  %308 = extractelement <4 x i1> %293, i64 3
  br i1 %308, label %309, label %312

309:                                              ; preds = %307
  %310 = or i64 %291, 3
  %311 = getelementptr inbounds float, ptr %11, i64 %310
  store float 9.990000e+02, ptr %311, align 4
  br label %312

312:                                              ; preds = %309, %307
  %313 = add i64 %291, 4
  %314 = add <4 x i64> %292, <i64 4, i64 4, i64 4, i64 4>
  %315 = icmp eq i64 %313, %27
  br i1 %315, label %316, label %290, !llvm.loop !456

316:                                              ; preds = %312, %286
  br i1 %281, label %390, label %317

317:                                              ; preds = %387, %316
  %318 = phi i64 [ %388, %387 ], [ %284, %316 ]
  %319 = trunc i64 %318 to i32
  %320 = sitofp i32 %319 to double
  %321 = fmul double %320, 5.000000e-01
  br label %328

322:                                              ; preds = %374
  %.lcssa = phi i32 [ %375, %374 ]
  %323 = icmp slt i32 %.lcssa, %2
  br i1 %323, label %324, label %387

324:                                              ; preds = %322
  %325 = getelementptr inbounds [17 x [8 x [56 x float]]], ptr %7, i64 0, i64 %318, i64 %287, i64 55
  %326 = load float, ptr %325, align 4
  %327 = sext i32 %.lcssa to i64
  br label %378

328:                                              ; preds = %374, %317
  %329 = phi i64 [ 0, %317 ], [ %376, %374 ]
  %330 = phi i32 [ 0, %317 ], [ %375, %374 ]
  %331 = trunc i64 %329 to i32
  %332 = sitofp i32 %331 to double
  %333 = fmul double %332, 1.250000e-01
  %334 = fadd double %321, %333
  %335 = fadd double %334, -2.062500e+00
  %336 = fadd double %335, 0x4017DCF680000000
  %337 = fmul double %336, 0x3FE62E42A0000000
  %338 = tail call double @exp(double noundef %337) #59
  %339 = fdiv double %338, %23
  %340 = fptosi double %339 to i32
  %341 = fadd double %334, -1.937500e+00
  %342 = fadd double %341, 0x4017DCF680000000
  %343 = fmul double %342, 0x3FE62E42A0000000
  %344 = tail call double @exp(double noundef %343) #59
  %345 = fdiv double %344, %23
  %346 = fadd double %345, 1.000000e+00
  %347 = fptosi double %346 to i32
  %348 = tail call i32 @llvm.smax.i32(i32 %340, i32 0)
  %349 = tail call i32 @llvm.smin.i32(i32 %348, i32 %2)
  %350 = tail call i32 @llvm.smin.i32(i32 %349, i32 %330)
  %351 = tail call i32 @llvm.smax.i32(i32 %347, i32 0)
  %352 = tail call i32 @llvm.smin.i32(i32 %351, i32 %2)
  %353 = icmp slt i32 %350, %352
  br i1 %353, label %354, label %374

354:                                              ; preds = %328
  %355 = getelementptr inbounds [17 x [8 x [56 x float]]], ptr %7, i64 0, i64 %318, i64 %287, i64 %329
  %356 = load float, ptr %355, align 4
  %357 = tail call i32 @llvm.smin.i32(i32 %330, i32 %2)
  %358 = sext i32 %357 to i64
  %359 = zext i32 %348 to i64
  %360 = tail call i64 @llvm.smin.i64(i64 %358, i64 %359)
  %361 = trunc i64 %360 to i32
  %362 = add i32 %352, %361
  %363 = sub i32 %362, %350
  br label %364

364:                                              ; preds = %370, %354
  %365 = phi i64 [ %360, %354 ], [ %371, %370 ]
  %366 = getelementptr inbounds float, ptr %11, i64 %365
  %367 = load float, ptr %366, align 4
  %368 = fcmp ogt float %367, %356
  br i1 %368, label %369, label %370

369:                                              ; preds = %364
  store float %356, ptr %366, align 4
  br label %370

370:                                              ; preds = %369, %364
  %371 = add nsw i64 %365, 1
  %372 = trunc i64 %371 to i32
  %373 = icmp eq i32 %363, %372
  br i1 %373, label %374, label %364, !llvm.loop !457

374:                                              ; preds = %370, %328
  %375 = phi i32 [ %350, %328 ], [ %363, %370 ]
  %376 = add nuw nsw i64 %329, 1
  %377 = icmp eq i64 %376, 56
  br i1 %377, label %322, label %328, !llvm.loop !458

378:                                              ; preds = %384, %324
  %379 = phi i64 [ %327, %324 ], [ %385, %384 ]
  %380 = getelementptr inbounds float, ptr %11, i64 %379
  %381 = load float, ptr %380, align 4
  %382 = fcmp ogt float %381, %326
  br i1 %382, label %383, label %384

383:                                              ; preds = %378
  store float %326, ptr %380, align 4
  br label %384

384:                                              ; preds = %383, %378
  %385 = add nsw i64 %379, 1
  %386 = icmp eq i64 %385, %9
  br i1 %386, label %387, label %378, !llvm.loop !459

387:                                              ; preds = %384, %322
  %388 = add nuw nsw i64 %318, 1
  %389 = icmp slt i64 %318, %285
  br i1 %389, label %317, label %390, !llvm.loop !460

390:                                              ; preds = %387, %316
  br i1 %283, label %398, label %391

391:                                              ; preds = %454, %392, %390
  br label %459

392:                                              ; preds = %444
  %.lcssa1 = phi i32 [ %445, %444 ]
  %393 = icmp slt i32 %.lcssa1, %2
  br i1 %393, label %394, label %391

394:                                              ; preds = %392
  %395 = getelementptr inbounds [17 x [8 x [56 x float]]], ptr %7, i64 0, i64 %282, i64 %287, i64 55
  %396 = load float, ptr %395, align 4
  %397 = sext i32 %.lcssa1 to i64
  br label %448

398:                                              ; preds = %444, %390
  %399 = phi i64 [ %446, %444 ], [ 0, %390 ]
  %400 = phi i32 [ %445, %444 ], [ 0, %390 ]
  %401 = trunc i64 %399 to i32
  %402 = sitofp i32 %401 to double
  %403 = fmul double %402, 1.250000e-01
  %404 = fadd double %251, %403
  %405 = fadd double %404, -2.062500e+00
  %406 = fadd double %405, 0x4017DCF680000000
  %407 = fmul double %406, 0x3FE62E42A0000000
  %408 = tail call double @exp(double noundef %407) #59
  %409 = fdiv double %408, %23
  %410 = fptosi double %409 to i32
  %411 = fadd double %404, -1.937500e+00
  %412 = fadd double %411, 0x4017DCF680000000
  %413 = fmul double %412, 0x3FE62E42A0000000
  %414 = tail call double @exp(double noundef %413) #59
  %415 = fdiv double %414, %23
  %416 = fadd double %415, 1.000000e+00
  %417 = fptosi double %416 to i32
  %418 = tail call i32 @llvm.smax.i32(i32 %410, i32 0)
  %419 = tail call i32 @llvm.smin.i32(i32 %418, i32 %2)
  %420 = tail call i32 @llvm.smin.i32(i32 %419, i32 %400)
  %421 = tail call i32 @llvm.smax.i32(i32 %417, i32 0)
  %422 = tail call i32 @llvm.smin.i32(i32 %421, i32 %2)
  %423 = icmp slt i32 %420, %422
  br i1 %423, label %424, label %444

424:                                              ; preds = %398
  %425 = getelementptr inbounds [17 x [8 x [56 x float]]], ptr %7, i64 0, i64 %282, i64 %287, i64 %399
  %426 = load float, ptr %425, align 4
  %427 = tail call i32 @llvm.smin.i32(i32 %400, i32 %2)
  %428 = sext i32 %427 to i64
  %429 = zext i32 %418 to i64
  %430 = tail call i64 @llvm.smin.i64(i64 %428, i64 %429)
  %431 = trunc i64 %430 to i32
  %432 = add i32 %422, %431
  %433 = sub i32 %432, %420
  br label %434

434:                                              ; preds = %440, %424
  %435 = phi i64 [ %430, %424 ], [ %441, %440 ]
  %436 = getelementptr inbounds float, ptr %11, i64 %435
  %437 = load float, ptr %436, align 4
  %438 = fcmp ogt float %437, %426
  br i1 %438, label %439, label %440

439:                                              ; preds = %434
  store float %426, ptr %436, align 4
  br label %440

440:                                              ; preds = %439, %434
  %441 = add nsw i64 %435, 1
  %442 = trunc i64 %441 to i32
  %443 = icmp eq i32 %433, %442
  br i1 %443, label %444, label %434, !llvm.loop !461

444:                                              ; preds = %440, %398
  %445 = phi i32 [ %420, %398 ], [ %433, %440 ]
  %446 = add nuw nsw i64 %399, 1
  %447 = icmp eq i64 %446, 56
  br i1 %447, label %392, label %398, !llvm.loop !462

448:                                              ; preds = %454, %394
  %449 = phi i64 [ %397, %394 ], [ %455, %454 ]
  %450 = getelementptr inbounds float, ptr %11, i64 %449
  %451 = load float, ptr %450, align 4
  %452 = fcmp ogt float %451, %396
  br i1 %452, label %453, label %454

453:                                              ; preds = %448
  store float %396, ptr %450, align 4
  br label %454

454:                                              ; preds = %453, %448
  %455 = add nsw i64 %449, 1
  %456 = icmp eq i64 %455, %9
  br i1 %456, label %391, label %448, !llvm.loop !463

457:                                              ; preds = %478
  %458 = load ptr, ptr %289, align 8
  br label %485

459:                                              ; preds = %478, %391
  %460 = phi i64 [ %483, %478 ], [ 0, %391 ]
  %461 = trunc i64 %460 to i32
  %462 = sitofp i32 %461 to double
  %463 = fmul double %462, 1.250000e-01
  %464 = fadd double %251, %463
  %465 = fadd double %464, -2.000000e+00
  %466 = fadd double %465, 0x4017DCF680000000
  %467 = fmul double %466, 0x3FE62E42A0000000
  %468 = tail call double @exp(double noundef %467) #59
  %469 = fdiv double %468, %23
  %470 = fptosi double %469 to i32
  %471 = icmp sgt i32 %470, -1
  %472 = icmp slt i32 %470, %2
  %473 = and i1 %471, %472
  br i1 %473, label %474, label %478

474:                                              ; preds = %459
  %475 = zext i32 %470 to i64
  %476 = getelementptr inbounds float, ptr %11, i64 %475
  %477 = load float, ptr %476, align 4
  br label %478

478:                                              ; preds = %474, %459
  %479 = phi float [ %477, %474 ], [ -9.990000e+02, %459 ]
  %480 = load ptr, ptr %289, align 8
  %481 = add nuw nsw i64 %460, 2
  %482 = getelementptr inbounds float, ptr %480, i64 %481
  store float %479, ptr %482, align 4
  %483 = add nuw nsw i64 %460, 1
  %484 = icmp eq i64 %483, 56
  br i1 %484, label %457, label %459, !llvm.loop !464

485:                                              ; preds = %491, %457
  %486 = phi i64 [ 0, %457 ], [ %492, %491 ]
  %487 = add nuw nsw i64 %486, 2
  %488 = getelementptr inbounds float, ptr %458, i64 %487
  %489 = load float, ptr %488, align 4
  %490 = fcmp ogt float %489, -2.000000e+02
  br i1 %490, label %494, label %491

491:                                              ; preds = %485
  %492 = add nuw nsw i64 %486, 1
  %493 = icmp eq i64 %492, 16
  br i1 %493, label %496, label %485, !llvm.loop !465

494:                                              ; preds = %485
  %.lcssa2 = phi i64 [ %486, %485 ]
  %495 = trunc i64 %.lcssa2 to i32
  br label %496

496:                                              ; preds = %494, %491
  %497 = phi i32 [ %495, %494 ], [ 16, %491 ]
  %498 = sitofp i32 %497 to float
  store float %498, ptr %458, align 4
  %499 = load ptr, ptr %289, align 8
  br label %500

500:                                              ; preds = %506, %496
  %501 = phi i64 [ 55, %496 ], [ %507, %506 ]
  %502 = add nuw nsw i64 %501, 2
  %503 = getelementptr inbounds float, ptr %499, i64 %502
  %504 = load float, ptr %503, align 4
  %505 = fcmp ogt float %504, -2.000000e+02
  br i1 %505, label %509, label %506

506:                                              ; preds = %500
  %507 = add nsw i64 %501, -1
  %508 = icmp ugt i64 %501, 18
  br i1 %508, label %500, label %511, !llvm.loop !466

509:                                              ; preds = %500
  %.lcssa4 = phi i64 [ %501, %500 ]
  %510 = trunc i64 %.lcssa4 to i32
  br label %511

511:                                              ; preds = %509, %506
  %512 = phi i32 [ %510, %509 ], [ 17, %506 ]
  %513 = sitofp i32 %512 to float
  %514 = getelementptr inbounds float, ptr %499, i64 1
  store float %513, ptr %514, align 4
  %515 = add nuw nsw i64 %287, 1
  %516 = icmp eq i64 %515, 8
  br i1 %516, label %517, label %286, !llvm.loop !467

517:                                              ; preds = %511
  %518 = icmp eq i64 %282, 17
  br i1 %518, label %519, label %245, !llvm.loop !468

519:                                              ; preds = %517
  call void @llvm.lifetime.end.p0(i64 1792, ptr nonnull %8) #55
  call void @llvm.lifetime.end.p0(i64 30464, ptr nonnull %7) #55
  call void @llvm.lifetime.end.p0(i64 224, ptr nonnull %6) #55
  ret ptr %12
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <4 x i32> @llvm.abs.v4i32(<4 x i32>, i1 immarg) #27

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.ceil.f64(double) #27

; Function Attrs: nofree nounwind optsize uwtable
define internal fastcc void @vorbis_encode_floor_setup(ptr nocapture noundef readonly %0, double noundef %1, i32 noundef %2, ptr nocapture noundef readonly %3, ptr nocapture noundef readonly %4, ptr nocapture noundef readonly %5) unnamed_addr #3 {
  %7 = fptosi double %1 to i32
  %8 = tail call noalias dereferenceable_or_null(1120) ptr @calloc(i64 noundef 1, i64 noundef 1120) #65
  %9 = getelementptr inbounds %struct.vorbis_info, ptr %0, i64 0, i32 7
  %10 = load ptr, ptr %9, align 8
  %11 = sext i32 %7 to i64
  %12 = getelementptr inbounds i32, ptr %5, i64 %11
  %13 = load i32, ptr %12, align 4
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %4, i64 %14
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(1120) %8, ptr noundef nonnull align 4 dereferenceable(1120) %15, i64 1116, i1 false)
  %16 = zext i32 %2 to i64
  %17 = getelementptr inbounds [2 x i64], ptr %10, i64 0, i64 %16
  %18 = load i64, ptr %17, align 8
  %19 = lshr i64 %18, 1
  %20 = trunc i64 %19 to i32
  %21 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %8, i64 0, i32 13
  store i32 %20, ptr %21, align 4
  %22 = load i32, ptr %8, align 4
  %23 = icmp sgt i32 %22, 0
  br i1 %23, label %24, label %93

24:                                               ; preds = %6
  %25 = zext i32 %22 to i64
  br label %32

26:                                               ; preds = %32
  %.lcssa1 = phi i32 [ %37, %32 ]
  %27 = icmp slt i32 %.lcssa1, 0
  br i1 %27, label %93, label %28

28:                                               ; preds = %26
  %29 = getelementptr inbounds %struct.codec_setup_info, ptr %10, i64 0, i32 5
  %30 = add nuw i32 %.lcssa1, 1
  %31 = zext i32 %30 to i64
  br label %46

32:                                               ; preds = %32, %24
  %33 = phi i64 [ 0, %24 ], [ %38, %32 ]
  %34 = phi i32 [ -1, %24 ], [ %37, %32 ]
  %35 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %8, i64 0, i32 1, i64 %33
  %36 = load i32, ptr %35, align 4
  %37 = tail call i32 @llvm.smax.i32(i32 %36, i32 %34)
  %38 = add nuw nsw i64 %33, 1
  %39 = icmp eq i64 %38, %25
  br i1 %39, label %26, label %32, !llvm.loop !469

40:                                               ; preds = %75
  %.lcssa = phi i32 [ %76, %75 ]
  %41 = icmp slt i32 %.lcssa, 0
  br i1 %41, label %93, label %42

42:                                               ; preds = %40
  %43 = getelementptr inbounds %struct.codec_setup_info, ptr %10, i64 0, i32 5
  %44 = add nuw i32 %.lcssa, 1
  %45 = zext i32 %44 to i64
  br label %79

46:                                               ; preds = %75, %28
  %47 = phi i64 [ 0, %28 ], [ %77, %75 ]
  %48 = phi i32 [ -1, %28 ], [ %76, %75 ]
  %49 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %8, i64 0, i32 4, i64 %47
  %50 = load i32, ptr %49, align 4
  %51 = tail call i32 @llvm.smax.i32(i32 %50, i32 %48)
  %52 = load i32, ptr %29, align 8
  %53 = add nsw i32 %52, %50
  store i32 %53, ptr %49, align 4
  %54 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %8, i64 0, i32 3, i64 %47
  %55 = load i32, ptr %54, align 4
  %56 = icmp eq i32 %55, 31
  br i1 %56, label %75, label %57

57:                                               ; preds = %69, %46
  %58 = phi i32 [ %70, %69 ], [ %55, %46 ]
  %59 = phi i64 [ %71, %69 ], [ 0, %46 ]
  %60 = phi i32 [ %63, %69 ], [ %51, %46 ]
  %61 = getelementptr inbounds %struct.vorbis_info_floor1, ptr %8, i64 0, i32 5, i64 %47, i64 %59
  %62 = load i32, ptr %61, align 4
  %63 = tail call i32 @llvm.smax.i32(i32 %62, i32 %60)
  %64 = icmp sgt i32 %62, -1
  br i1 %64, label %65, label %69

65:                                               ; preds = %57
  %66 = load i32, ptr %29, align 8
  %67 = add nsw i32 %66, %62
  store i32 %67, ptr %61, align 4
  %68 = load i32, ptr %54, align 4
  br label %69

69:                                               ; preds = %65, %57
  %70 = phi i32 [ %58, %57 ], [ %68, %65 ]
  %71 = add nuw nsw i64 %59, 1
  %72 = shl nuw i32 1, %70
  %73 = sext i32 %72 to i64
  %74 = icmp slt i64 %71, %73
  br i1 %74, label %57, label %75, !llvm.loop !470

75:                                               ; preds = %69, %46
  %76 = phi i32 [ %51, %46 ], [ %63, %69 ]
  %77 = add nuw nsw i64 %47, 1
  %78 = icmp eq i64 %77, %31
  br i1 %78, label %40, label %46, !llvm.loop !471

79:                                               ; preds = %79, %42
  %80 = phi i64 [ 0, %42 ], [ %91, %79 ]
  %81 = load i32, ptr %12, align 4
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds ptr, ptr %3, i64 %82
  %84 = load ptr, ptr %83, align 8
  %85 = getelementptr inbounds ptr, ptr %84, i64 %80
  %86 = load ptr, ptr %85, align 8
  %87 = load i32, ptr %43, align 8
  %88 = add nsw i32 %87, 1
  store i32 %88, ptr %43, align 8
  %89 = sext i32 %87 to i64
  %90 = getelementptr inbounds %struct.codec_setup_info, ptr %10, i64 0, i32 14, i64 %89
  store ptr %86, ptr %90, align 8
  %91 = add nuw nsw i64 %80, 1
  %92 = icmp eq i64 %91, %45
  br i1 %92, label %93, label %79, !llvm.loop !472

93:                                               ; preds = %79, %40, %26, %6
  %94 = getelementptr inbounds %struct.codec_setup_info, ptr %10, i64 0, i32 3
  %95 = load i32, ptr %94, align 8
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds %struct.codec_setup_info, ptr %10, i64 0, i32 10, i64 %96
  store i32 1, ptr %97, align 4
  %98 = load i32, ptr %94, align 8
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds %struct.codec_setup_info, ptr %10, i64 0, i32 11, i64 %99
  store ptr %8, ptr %100, align 8
  %101 = load i32, ptr %94, align 8
  %102 = add nsw i32 %101, 1
  store i32 %102, ptr %94, align 8
  ret void
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn uwtable
define internal fastcc void @vorbis_encode_psyset_setup(ptr nocapture noundef readonly %0, double noundef %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, ptr nocapture noundef readonly %4, i32 noundef %5) unnamed_addr #49 {
  %7 = getelementptr inbounds %struct.vorbis_info, ptr %0, i64 0, i32 7
  %8 = load ptr, ptr %7, align 8
  %9 = zext i32 %5 to i64
  %10 = getelementptr inbounds %struct.codec_setup_info, ptr %8, i64 0, i32 16, i64 %9
  %11 = load ptr, ptr %10, align 8
  %12 = fptosi double %1 to i32
  %13 = getelementptr inbounds %struct.codec_setup_info, ptr %8, i64 0, i32 6
  %14 = load i32, ptr %13, align 4
  %15 = icmp sgt i32 %14, %5
  br i1 %15, label %18, label %16

16:                                               ; preds = %6
  %17 = add nuw nsw i32 %5, 1
  store i32 %17, ptr %13, align 4
  br label %18

18:                                               ; preds = %16, %6
  %19 = icmp eq ptr %11, null
  br i1 %19, label %20, label %22

20:                                               ; preds = %18
  %21 = tail call noalias dereferenceable_or_null(528) ptr @calloc(i64 noundef 1, i64 noundef 528) #65
  store ptr %21, ptr %10, align 8
  br label %22

22:                                               ; preds = %20, %18
  %23 = phi ptr [ %11, %18 ], [ %21, %20 ]
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(528) %23, ptr noundef nonnull align 8 dereferenceable(528) @_psy_info_template, i64 528, i1 false)
  %24 = lshr i32 %5, 1
  store i32 %24, ptr %23, align 8
  %25 = getelementptr inbounds %struct.codec_setup_info, ptr %8, i64 0, i32 19, i32 15
  %26 = load i32, ptr %25, align 4
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %41, label %28

28:                                               ; preds = %22
  %29 = getelementptr inbounds %struct.vorbis_info_psy, ptr %23, i64 0, i32 18
  store i32 1, ptr %29, align 4
  %30 = getelementptr inbounds %struct.vorbis_info_psy, ptr %23, i64 0, i32 19
  store i32 1, ptr %30, align 8
  %31 = sext i32 %12 to i64
  %32 = getelementptr inbounds i32, ptr %2, i64 %31
  %33 = load i32, ptr %32, align 4
  %34 = getelementptr inbounds %struct.vorbis_info_psy, ptr %23, i64 0, i32 20
  store i32 %33, ptr %34, align 4
  %35 = getelementptr inbounds i32, ptr %3, i64 %31
  %36 = load i32, ptr %35, align 4
  %37 = getelementptr inbounds %struct.vorbis_info_psy, ptr %23, i64 0, i32 21
  store i32 %36, ptr %37, align 8
  %38 = getelementptr inbounds double, ptr %4, i64 %31
  %39 = load double, ptr %38, align 8
  %40 = getelementptr inbounds %struct.vorbis_info_psy, ptr %23, i64 0, i32 22
  store double %39, ptr %40, align 8
  br label %41

41:                                               ; preds = %28, %22
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal fastcc void @vorbis_encode_tonemask_setup(ptr nocapture noundef readonly %0, double noundef %1, i32 noundef %2, ptr nocapture noundef readonly %3, ptr nocapture noundef readonly %4, ptr nocapture noundef readonly %5) unnamed_addr #20 {
  %7 = fptosi double %1 to i32
  %8 = sitofp i32 %7 to double
  %9 = fsub double %1, %8
  %10 = getelementptr inbounds %struct.vorbis_info, ptr %0, i64 0, i32 7
  %11 = load ptr, ptr %10, align 8
  %12 = zext i32 %2 to i64
  %13 = getelementptr inbounds %struct.codec_setup_info, ptr %11, i64 0, i32 16, i64 %12
  %14 = load ptr, ptr %13, align 8
  %15 = sext i32 %7 to i64
  %16 = getelementptr inbounds %struct.att3, ptr %3, i64 %15
  %17 = load i32, ptr %16, align 4
  %18 = sitofp i32 %17 to double
  %19 = fsub double 1.000000e+00, %9
  %20 = fmul double %19, %18
  %21 = add nsw i32 %7, 1
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds %struct.att3, ptr %3, i64 %22
  %24 = load i32, ptr %23, align 4
  %25 = sitofp i32 %24 to double
  %26 = fmul double %9, %25
  %27 = fadd double %20, %26
  %28 = fptrunc double %27 to float
  %29 = getelementptr inbounds %struct.vorbis_info_psy, ptr %14, i64 0, i32 3
  store float %28, ptr %29, align 4
  %30 = getelementptr inbounds [3 x i32], ptr %16, i64 0, i64 1
  %31 = load i32, ptr %30, align 4
  %32 = sitofp i32 %31 to double
  %33 = fmul double %19, %32
  %34 = getelementptr inbounds [3 x i32], ptr %23, i64 0, i64 1
  %35 = load i32, ptr %34, align 4
  %36 = sitofp i32 %35 to double
  %37 = fmul double %9, %36
  %38 = fadd double %33, %37
  %39 = fptrunc double %38 to float
  %40 = getelementptr inbounds %struct.vorbis_info_psy, ptr %14, i64 0, i32 3, i64 1
  store float %39, ptr %40, align 4
  %41 = getelementptr inbounds [3 x i32], ptr %16, i64 0, i64 2
  %42 = load i32, ptr %41, align 4
  %43 = sitofp i32 %42 to double
  %44 = fmul double %19, %43
  %45 = getelementptr inbounds [3 x i32], ptr %23, i64 0, i64 2
  %46 = load i32, ptr %45, align 4
  %47 = sitofp i32 %46 to double
  %48 = fmul double %9, %47
  %49 = fadd double %44, %48
  %50 = fptrunc double %49 to float
  %51 = getelementptr inbounds %struct.vorbis_info_psy, ptr %14, i64 0, i32 3, i64 2
  store float %50, ptr %51, align 4
  %52 = getelementptr inbounds %struct.att3, ptr %3, i64 %15, i32 1
  %53 = load float, ptr %52, align 4
  %54 = fpext float %53 to double
  %55 = fmul double %19, %54
  %56 = getelementptr inbounds %struct.att3, ptr %3, i64 %22, i32 1
  %57 = load float, ptr %56, align 4
  %58 = fpext float %57 to double
  %59 = fmul double %9, %58
  %60 = fadd double %55, %59
  %61 = fptrunc double %60 to float
  %62 = getelementptr inbounds %struct.vorbis_info_psy, ptr %14, i64 0, i32 4
  store float %61, ptr %62, align 8
  %63 = getelementptr inbounds %struct.att3, ptr %3, i64 %15, i32 2
  %64 = load float, ptr %63, align 4
  %65 = fpext float %64 to double
  %66 = fmul double %19, %65
  %67 = getelementptr inbounds %struct.att3, ptr %3, i64 %22, i32 2
  %68 = load float, ptr %67, align 4
  %69 = fpext float %68 to double
  %70 = fmul double %9, %69
  %71 = fadd double %66, %70
  %72 = fptrunc double %71 to float
  %73 = getelementptr inbounds %struct.vorbis_info_psy, ptr %14, i64 0, i32 5
  store float %72, ptr %73, align 4
  %74 = getelementptr inbounds i32, ptr %4, i64 %15
  %75 = load i32, ptr %74, align 4
  %76 = sitofp i32 %75 to double
  %77 = fmul double %19, %76
  %78 = getelementptr inbounds i32, ptr %4, i64 %22
  %79 = load i32, ptr %78, align 4
  %80 = sitofp i32 %79 to double
  %81 = fmul double %9, %80
  %82 = fadd double %77, %81
  %83 = fptrunc double %82 to float
  %84 = getelementptr inbounds %struct.vorbis_info_psy, ptr %14, i64 0, i32 17
  store float %83, ptr %84, align 8
  %85 = getelementptr inbounds %struct.vp_adjblock, ptr %5, i64 %15
  %86 = getelementptr inbounds %struct.vp_adjblock, ptr %5, i64 %22
  br label %87

87:                                               ; preds = %87, %6
  %88 = phi i64 [ 0, %6 ], [ %100, %87 ]
  %89 = getelementptr inbounds [17 x i32], ptr %85, i64 0, i64 %88
  %90 = load i32, ptr %89, align 4
  %91 = sitofp i32 %90 to double
  %92 = fmul double %19, %91
  %93 = getelementptr inbounds [17 x i32], ptr %86, i64 0, i64 %88
  %94 = load i32, ptr %93, align 4
  %95 = sitofp i32 %94 to double
  %96 = fmul double %9, %95
  %97 = fadd double %92, %96
  %98 = fptrunc double %97 to float
  %99 = getelementptr inbounds %struct.vorbis_info_psy, ptr %14, i64 0, i32 7, i64 %88
  store float %98, ptr %99, align 4
  %100 = add nuw nsw i64 %88, 1
  %101 = icmp eq i64 %100, 17
  br i1 %101, label %102, label %87, !llvm.loop !473

102:                                              ; preds = %87
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal fastcc void @vorbis_encode_compand_setup(ptr nocapture noundef readonly %0, double noundef %1, i32 noundef %2, ptr nocapture noundef readonly %3, ptr nocapture noundef readonly %4) unnamed_addr #20 {
  %6 = fptosi double %1 to i32
  %7 = sitofp i32 %6 to double
  %8 = getelementptr inbounds %struct.vorbis_info, ptr %0, i64 0, i32 7
  %9 = load ptr, ptr %8, align 8
  %10 = zext i32 %2 to i64
  %11 = getelementptr inbounds %struct.codec_setup_info, ptr %9, i64 0, i32 16, i64 %10
  %12 = load ptr, ptr %11, align 8
  %13 = sext i32 %6 to i64
  %14 = getelementptr inbounds double, ptr %4, i64 %13
  %15 = fsub double %1, %7
  %16 = fsub double 1.000000e+00, %15
  %17 = load <2 x double>, ptr %14, align 8
  %18 = insertelement <2 x double> poison, double %16, i64 0
  %19 = insertelement <2 x double> %18, double %15, i64 1
  %20 = fmul <2 x double> %19, %17
  %21 = shufflevector <2 x double> %20, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %22 = fadd <2 x double> %20, %21
  %23 = extractelement <2 x double> %22, i64 0
  %24 = fptosi double %23 to i32
  %25 = sitofp i32 %24 to double
  %26 = fsub double %23, %25
  %27 = fcmp oeq double %26, 0.000000e+00
  %28 = icmp sgt i32 %24, 0
  %29 = and i1 %28, %27
  %30 = select i1 %29, double 1.000000e+00, double %26
  %31 = sext i1 %29 to i32
  %32 = add nsw i32 %31, %24
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds %struct.compandblock, ptr %3, i64 %33
  %35 = fsub double 1.000000e+00, %30
  %36 = add nsw i32 %32, 1
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds %struct.compandblock, ptr %3, i64 %37
  br label %39

39:                                               ; preds = %39, %5
  %40 = phi i64 [ 0, %5 ], [ %52, %39 ]
  %41 = getelementptr inbounds [40 x i32], ptr %34, i64 0, i64 %40
  %42 = load i32, ptr %41, align 4
  %43 = sitofp i32 %42 to double
  %44 = fmul double %35, %43
  %45 = getelementptr inbounds [40 x i32], ptr %38, i64 0, i64 %40
  %46 = load i32, ptr %45, align 4
  %47 = sitofp i32 %46 to double
  %48 = fmul double %30, %47
  %49 = fadd double %44, %48
  %50 = fptrunc double %49 to float
  %51 = getelementptr inbounds %struct.vorbis_info_psy, ptr %12, i64 0, i32 16, i64 %40
  store float %50, ptr %51, align 4
  %52 = add nuw nsw i64 %40, 1
  %53 = icmp eq i64 %52, 40
  br i1 %53, label %54, label %39, !llvm.loop !474

54:                                               ; preds = %39
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal fastcc void @vorbis_encode_noisebias_setup(ptr nocapture noundef readonly %0, double noundef %1, i32 noundef %2, ptr nocapture noundef readonly %3, ptr nocapture noundef readonly %4, ptr nocapture noundef readonly %5, double noundef %6) unnamed_addr #20 {
  %8 = fptosi double %1 to i32
  %9 = sitofp i32 %8 to double
  %10 = fsub double %1, %9
  %11 = getelementptr inbounds %struct.vorbis_info, ptr %0, i64 0, i32 7
  %12 = load ptr, ptr %11, align 8
  %13 = zext i32 %2 to i64
  %14 = getelementptr inbounds %struct.codec_setup_info, ptr %12, i64 0, i32 16, i64 %13
  %15 = load ptr, ptr %14, align 8
  %16 = sext i32 %8 to i64
  %17 = getelementptr inbounds i32, ptr %3, i64 %16
  %18 = load i32, ptr %17, align 4
  %19 = sitofp i32 %18 to double
  %20 = fsub double 1.000000e+00, %10
  %21 = fmul double %20, %19
  %22 = add nsw i32 %8, 1
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds i32, ptr %3, i64 %23
  %25 = load i32, ptr %24, align 4
  %26 = sitofp i32 %25 to double
  %27 = fmul double %10, %26
  %28 = fadd double %21, %27
  %29 = fptrunc double %28 to float
  %30 = getelementptr inbounds %struct.vorbis_info_psy, ptr %15, i64 0, i32 9
  store float %29, ptr %30, align 4
  %31 = getelementptr inbounds %struct.noiseguard, ptr %5, i64 %13
  %32 = load i32, ptr %31, align 4
  %33 = getelementptr inbounds %struct.vorbis_info_psy, ptr %15, i64 0, i32 12
  store i32 %32, ptr %33, align 8
  %34 = getelementptr inbounds %struct.noiseguard, ptr %5, i64 %13, i32 1
  %35 = load i32, ptr %34, align 4
  %36 = getelementptr inbounds %struct.vorbis_info_psy, ptr %15, i64 0, i32 13
  store i32 %35, ptr %36, align 4
  %37 = getelementptr inbounds %struct.noiseguard, ptr %5, i64 %13, i32 2
  %38 = load i32, ptr %37, align 4
  %39 = getelementptr inbounds %struct.vorbis_info_psy, ptr %15, i64 0, i32 14
  store i32 %38, ptr %39, align 8
  %40 = getelementptr inbounds %struct.noise3, ptr %4, i64 %16
  %41 = getelementptr inbounds %struct.noise3, ptr %4, i64 %23
  br label %42

42:                                               ; preds = %59, %7
  %43 = phi i64 [ 0, %7 ], [ %60, %59 ]
  br label %44

44:                                               ; preds = %44, %42
  %45 = phi i64 [ 0, %42 ], [ %57, %44 ]
  %46 = getelementptr inbounds [3 x [17 x i32]], ptr %40, i64 0, i64 %43, i64 %45
  %47 = load i32, ptr %46, align 4
  %48 = sitofp i32 %47 to double
  %49 = fmul double %20, %48
  %50 = getelementptr inbounds [3 x [17 x i32]], ptr %41, i64 0, i64 %43, i64 %45
  %51 = load i32, ptr %50, align 4
  %52 = sitofp i32 %51 to double
  %53 = fmul double %10, %52
  %54 = fadd double %49, %53
  %55 = fptrunc double %54 to float
  %56 = getelementptr inbounds %struct.vorbis_info_psy, ptr %15, i64 0, i32 15, i64 %43, i64 %45
  store float %55, ptr %56, align 4
  %57 = add nuw nsw i64 %45, 1
  %58 = icmp eq i64 %57, 17
  br i1 %58, label %59, label %44, !llvm.loop !475

59:                                               ; preds = %44
  %60 = add nuw nsw i64 %43, 1
  %61 = icmp eq i64 %60, 3
  br i1 %61, label %62, label %42, !llvm.loop !476

62:                                               ; preds = %78, %59
  %63 = phi i64 [ %79, %78 ], [ 0, %59 ]
  %64 = getelementptr inbounds %struct.vorbis_info_psy, ptr %15, i64 0, i32 15, i64 %63
  %65 = load float, ptr %64, align 4
  %66 = fadd float %65, 6.000000e+00
  br label %67

67:                                               ; preds = %67, %62
  %68 = phi i64 [ 0, %62 ], [ %76, %67 ]
  %69 = getelementptr inbounds %struct.vorbis_info_psy, ptr %15, i64 0, i32 15, i64 %63, i64 %68
  %70 = load float, ptr %69, align 4
  %71 = fpext float %70 to double
  %72 = fadd double %71, %6
  %73 = fptrunc double %72 to float
  %74 = fcmp ogt float %66, %73
  %75 = select i1 %74, float %66, float %73
  store float %75, ptr %69, align 4
  %76 = add nuw nsw i64 %68, 1
  %77 = icmp eq i64 %76, 17
  br i1 %77, label %78, label %67, !llvm.loop !477

78:                                               ; preds = %67
  %79 = add nuw nsw i64 %63, 1
  %80 = icmp eq i64 %79, 3
  br i1 %80, label %81, label %62, !llvm.loop !478

81:                                               ; preds = %78
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal fastcc void @get_setup_template(ptr nocapture noundef readonly %0, i64 noundef %1, i64 noundef %2, double noundef %3, i32 noundef %4) unnamed_addr #20 {
  %6 = getelementptr inbounds %struct.vorbis_info, ptr %0, i64 0, i32 7
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr inbounds %struct.codec_setup_info, ptr %7, i64 0, i32 19
  %9 = icmp eq i32 %4, 0
  %10 = sitofp i64 %1 to double
  %11 = select i1 %9, double 1.000000e+00, double %10
  %12 = fdiv double %3, %11
  br label %13

13:                                               ; preds = %88, %5
  %14 = phi i64 [ 0, %5 ], [ %89, %88 ]
  %15 = getelementptr inbounds [23 x ptr], ptr @setup_list, i64 0, i64 %14
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr inbounds %struct.ve_setup_data_template, ptr %16, i64 0, i32 3
  %18 = load i32, ptr %17, align 8
  %19 = icmp eq i32 %18, -1
  %20 = sext i32 %18 to i64
  %21 = icmp eq i64 %20, %1
  %22 = or i1 %19, %21
  br i1 %22, label %23, label %88

23:                                               ; preds = %13
  %24 = getelementptr inbounds %struct.ve_setup_data_template, ptr %16, i64 0, i32 4
  %25 = load i64, ptr %24, align 8
  %26 = icmp sgt i64 %25, %2
  br i1 %26, label %88, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.ve_setup_data_template, ptr %16, i64 0, i32 5
  %29 = load i64, ptr %28, align 8
  %30 = icmp slt i64 %29, %2
  br i1 %30, label %88, label %31

31:                                               ; preds = %27
  %32 = getelementptr inbounds %struct.ve_setup_data_template, ptr %16, i64 0, i32 1
  %33 = getelementptr inbounds %struct.ve_setup_data_template, ptr %16, i64 0, i32 2
  %34 = select i1 %9, ptr %33, ptr %32
  %35 = load ptr, ptr %34, align 8
  %36 = load double, ptr %35, align 8
  %37 = fcmp olt double %12, %36
  br i1 %37, label %88, label %38, !llvm.loop !479

38:                                               ; preds = %31
  %39 = load i32, ptr %16, align 8
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds double, ptr %35, i64 %40
  %42 = load double, ptr %41, align 8
  %43 = fcmp ogt double %12, %42
  br i1 %43, label %88, label %44, !llvm.loop !479

44:                                               ; preds = %38
  %.lcssa4 = phi ptr [ %16, %38 ]
  %.lcssa3 = phi i32 [ %39, %38 ]
  %.lcssa2 = phi ptr [ %35, %38 ]
  %45 = icmp sgt i32 %.lcssa3, 0
  br i1 %45, label %46, label %63

46:                                               ; preds = %44
  %47 = zext i32 %.lcssa3 to i64
  br label %48

48:                                               ; preds = %58, %46
  %49 = phi i64 [ 0, %46 ], [ %53, %58 ]
  %50 = getelementptr inbounds double, ptr %.lcssa2, i64 %49
  %51 = load double, ptr %50, align 8
  %52 = fcmp ult double %12, %51
  %53 = add nuw nsw i64 %49, 1
  br i1 %52, label %58, label %54

54:                                               ; preds = %48
  %55 = getelementptr inbounds double, ptr %.lcssa2, i64 %53
  %56 = load double, ptr %55, align 8
  %57 = fcmp olt double %12, %56
  br i1 %57, label %61, label %58

58:                                               ; preds = %54, %48
  %59 = icmp eq i64 %53, %47
  br i1 %59, label %60, label %48, !llvm.loop !480

60:                                               ; preds = %58
  store ptr %.lcssa4, ptr %8, align 8
  br label %66

61:                                               ; preds = %54
  %.lcssa = phi i64 [ %49, %54 ]
  %62 = trunc i64 %.lcssa to i32
  br label %63

63:                                               ; preds = %61, %44
  %64 = phi i32 [ 0, %44 ], [ %62, %61 ]
  store ptr %.lcssa4, ptr %8, align 8
  %65 = icmp eq i32 %64, %.lcssa3
  br i1 %65, label %66, label %70

66:                                               ; preds = %63, %60
  %67 = sitofp i32 %.lcssa3 to double
  %68 = fadd double %67, -1.000000e-03
  %69 = getelementptr inbounds %struct.codec_setup_info, ptr %7, i64 0, i32 19, i32 2
  store double %68, ptr %69, align 8
  br label %92

70:                                               ; preds = %63
  %71 = zext i32 %64 to i64
  %72 = getelementptr inbounds double, ptr %.lcssa2, i64 %71
  %73 = load <2 x double>, ptr %72, align 8
  %74 = fptrunc <2 x double> %73 to <2 x float>
  %75 = extractelement <2 x float> %74, i64 0
  %76 = fpext float %75 to double
  %77 = fsub double %12, %76
  %78 = shufflevector <2 x float> %74, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %79 = fsub <2 x float> %78, %74
  %80 = extractelement <2 x float> %79, i64 0
  %81 = fpext float %80 to double
  %82 = fdiv double %77, %81
  %83 = fptrunc double %82 to float
  %84 = sitofp i32 %64 to float
  %85 = fadd float %84, %83
  %86 = fpext float %85 to double
  %87 = getelementptr inbounds %struct.codec_setup_info, ptr %7, i64 0, i32 19, i32 2
  store double %86, ptr %87, align 8
  br label %92

88:                                               ; preds = %38, %31, %27, %23, %13
  %89 = add nuw nsw i64 %14, 1
  %90 = icmp eq i64 %89, 22
  br i1 %90, label %91, label %13, !llvm.loop !479

91:                                               ; preds = %88
  store ptr null, ptr %8, align 8
  br label %92

92:                                               ; preds = %91, %70, %66
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal fastcc i32 @vorbis_encode_setup_setting(ptr nocapture noundef %0, i64 noundef %1, i64 noundef %2) unnamed_addr #20 {
  %4 = getelementptr inbounds %struct.vorbis_info, ptr %0, i64 0, i32 7
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr inbounds %struct.codec_setup_info, ptr %5, i64 0, i32 19
  %7 = load ptr, ptr %6, align 8
  %8 = trunc i64 %1 to i32
  store i32 0, ptr %0, align 8
  %9 = getelementptr inbounds %struct.vorbis_info, ptr %0, i64 0, i32 1
  store i32 %8, ptr %9, align 4
  %10 = getelementptr inbounds %struct.vorbis_info, ptr %0, i64 0, i32 2
  store i64 %2, ptr %10, align 8
  %11 = getelementptr inbounds %struct.codec_setup_info, ptr %5, i64 0, i32 19, i32 2
  %12 = load double, ptr %11, align 8
  %13 = fptosi double %12 to i32
  %14 = sitofp i32 %13 to double
  %15 = fsub double %12, %14
  %16 = getelementptr inbounds %struct.codec_setup_info, ptr %5, i64 0, i32 19, i32 4
  store double %12, ptr %16, align 8
  %17 = getelementptr inbounds %struct.codec_setup_info, ptr %5, i64 0, i32 19, i32 3
  store double %12, ptr %17, align 8
  %18 = getelementptr inbounds %struct.codec_setup_info, ptr %5, i64 0, i32 19, i32 6
  store i32 0, ptr %18, align 8
  %19 = getelementptr inbounds %struct.codec_setup_info, ptr %5, i64 0, i32 19, i32 14
  store i32 1, ptr %19, align 8
  %20 = getelementptr inbounds %struct.codec_setup_info, ptr %5, i64 0, i32 19, i32 15
  store i32 1, ptr %20, align 4
  %21 = getelementptr inbounds %struct.codec_setup_info, ptr %5, i64 0, i32 19, i32 16
  store double %12, ptr %21, align 8
  %22 = getelementptr inbounds %struct.ve_setup_data_template, ptr %7, i64 0, i32 28
  %23 = load ptr, ptr %22, align 8
  %24 = sext i32 %13 to i64
  %25 = getelementptr inbounds double, ptr %23, i64 %24
  %26 = load double, ptr %25, align 8
  %27 = fsub double 1.000000e+00, %15
  %28 = fmul double %27, %26
  %29 = add nsw i32 %13, 1
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds double, ptr %23, i64 %30
  %32 = load double, ptr %31, align 8
  %33 = fmul double %15, %32
  %34 = fadd double %28, %33
  %35 = getelementptr inbounds %struct.codec_setup_info, ptr %5, i64 0, i32 19, i32 17
  store double %34, ptr %35, align 8
  %36 = getelementptr inbounds %struct.ve_setup_data_template, ptr %7, i64 0, i32 26
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr inbounds i32, ptr %37, i64 %24
  %39 = load i32, ptr %38, align 4
  %40 = sitofp i32 %39 to double
  %41 = fmul double %27, %40
  %42 = getelementptr inbounds i32, ptr %37, i64 %30
  %43 = load i32, ptr %42, align 4
  %44 = sitofp i32 %43 to double
  %45 = fmul double %15, %44
  %46 = fadd double %41, %45
  %47 = getelementptr inbounds %struct.codec_setup_info, ptr %5, i64 0, i32 19, i32 18
  store double %46, ptr %47, align 8
  %48 = getelementptr inbounds %struct.ve_setup_data_template, ptr %7, i64 0, i32 27
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr inbounds i32, ptr %49, i64 %24
  %51 = load i32, ptr %50, align 4
  %52 = sitofp i32 %51 to double
  %53 = fmul double %27, %52
  %54 = getelementptr inbounds i32, ptr %49, i64 %30
  %55 = load i32, ptr %54, align 4
  %56 = sitofp i32 %55 to double
  %57 = fmul double %15, %56
  %58 = fadd double %53, %57
  %59 = getelementptr inbounds %struct.codec_setup_info, ptr %5, i64 0, i32 19, i32 19
  store double %58, ptr %59, align 8
  %60 = getelementptr inbounds %struct.codec_setup_info, ptr %5, i64 0, i32 19, i32 20
  store double -6.000000e+00, ptr %60, align 8
  %61 = getelementptr inbounds %struct.codec_setup_info, ptr %5, i64 0, i32 19, i32 21
  store double %12, ptr %61, align 8
  br label %62

62:                                               ; preds = %62, %3
  %63 = phi i64 [ 0, %3 ], [ %68, %62 ]
  %64 = getelementptr inbounds %struct.codec_setup_info, ptr %5, i64 0, i32 19, i32 22, i64 %63
  store double %12, ptr %64, align 8
  %65 = getelementptr inbounds %struct.codec_setup_info, ptr %5, i64 0, i32 19, i32 22, i64 %63, i32 1
  store double %12, ptr %65, align 8
  %66 = getelementptr inbounds %struct.codec_setup_info, ptr %5, i64 0, i32 19, i32 22, i64 %63, i32 2
  store double %12, ptr %66, align 8
  %67 = getelementptr inbounds %struct.codec_setup_info, ptr %5, i64 0, i32 19, i32 22, i64 %63, i32 3
  store double %12, ptr %67, align 8
  %68 = add nuw nsw i64 %63, 1
  %69 = icmp eq i64 %68, 4
  br i1 %69, label %70, label %62, !llvm.loop !481

70:                                               ; preds = %62
  ret i32 0
}

; Function Attrs: nofree nounwind
declare noundef i32 @fputc(i32 noundef, ptr nocapture noundef) local_unnamed_addr #50

; Function Attrs: nounwind optsize uwtable
define internal i64 @read_downmix(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 noundef %2) #0 {
  %4 = load ptr, ptr %0, align 8
  %5 = getelementptr inbounds %struct.downmix, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr inbounds %struct.downmix, ptr %0, i64 0, i32 2
  %8 = load ptr, ptr %7, align 8
  %9 = tail call i64 %4(ptr noundef %6, ptr noundef %8, i32 noundef %2) #59
  %10 = icmp sgt i64 %9, 0
  br i1 %10, label %11, label %27

11:                                               ; preds = %11, %3
  %12 = phi i64 [ %25, %11 ], [ 0, %3 ]
  %13 = load ptr, ptr %7, align 8
  %14 = load ptr, ptr %13, align 8
  %15 = getelementptr inbounds float, ptr %14, i64 %12
  %16 = load float, ptr %15, align 4
  %17 = getelementptr inbounds ptr, ptr %13, i64 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr inbounds float, ptr %18, i64 %12
  %20 = load float, ptr %19, align 4
  %21 = fadd float %16, %20
  %22 = fmul float %21, 5.000000e-01
  %23 = load ptr, ptr %1, align 8
  %24 = getelementptr inbounds float, ptr %23, i64 %12
  store float %22, ptr %24, align 4
  %25 = add nuw nsw i64 %12, 1
  %26 = icmp eq i64 %25, %9
  br i1 %26, label %27, label %11, !llvm.loop !482

27:                                               ; preds = %11, %3
  ret i64 %9
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @res_init(ptr noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, ...) #0 {
  %6 = alloca [1 x %struct.__va_list_tag], align 16
  %7 = icmp eq ptr %0, null
  %8 = icmp slt i32 %1, 1
  %9 = or i1 %7, %8
  %10 = icmp slt i32 %2, 1
  %11 = or i1 %9, %10
  %12 = icmp slt i32 %3, 1
  %13 = or i1 %11, %12
  br i1 %13, label %311, label %14

14:                                               ; preds = %5
  %15 = icmp eq i32 %4, 0
  br i1 %15, label %108, label %16

16:                                               ; preds = %14
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %6) #55
  call void @llvm.va_start(ptr nonnull %6)
  %17 = load i32, ptr %6, align 16
  %18 = getelementptr inbounds %struct.__va_list_tag, ptr %6, i64 0, i32 1
  %19 = getelementptr inbounds %struct.__va_list_tag, ptr %6, i64 0, i32 2
  %20 = getelementptr inbounds %struct.__va_list_tag, ptr %6, i64 0, i32 3
  %21 = load ptr, ptr %20, align 16
  %22 = load i32, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  br label %24

24:                                               ; preds = %100, %16
  %25 = phi ptr [ %23, %16 ], [ %101, %100 ]
  %26 = phi i32 [ %22, %16 ], [ %87, %100 ]
  %27 = phi i32 [ %17, %16 ], [ %102, %100 ]
  %28 = phi i32 [ %4, %16 ], [ %104, %100 ]
  %29 = phi double [ 1.600000e+01, %16 ], [ %89, %100 ]
  %30 = phi double [ 8.000000e-01, %16 ], [ %90, %100 ]
  %31 = phi double [ 1.000000e+00, %16 ], [ %91, %100 ]
  %32 = phi i32 [ 45, %16 ], [ %92, %100 ]
  switch i32 %28, label %107 [
    i32 1, label %33
    i32 2, label %46
    i32 3, label %59
    i32 4, label %72
  ]

33:                                               ; preds = %24
  %34 = icmp ult i32 %26, 161
  br i1 %34, label %35, label %39

35:                                               ; preds = %33
  %36 = zext i32 %26 to i64
  %37 = getelementptr i8, ptr %21, i64 %36
  %38 = add nuw nsw i32 %26, 16
  store i32 %38, ptr %18, align 4
  br label %41

39:                                               ; preds = %33
  %40 = getelementptr i8, ptr %25, i64 8
  store ptr %40, ptr %19, align 8
  br label %41

41:                                               ; preds = %39, %35
  %42 = phi ptr [ %25, %35 ], [ %40, %39 ]
  %43 = phi i32 [ %38, %35 ], [ %26, %39 ]
  %44 = phi ptr [ %37, %35 ], [ %25, %39 ]
  %45 = load double, ptr %44, align 8
  br label %85

46:                                               ; preds = %24
  %47 = icmp ult i32 %26, 161
  br i1 %47, label %48, label %52

48:                                               ; preds = %46
  %49 = zext i32 %26 to i64
  %50 = getelementptr i8, ptr %21, i64 %49
  %51 = add nuw nsw i32 %26, 16
  store i32 %51, ptr %18, align 4
  br label %54

52:                                               ; preds = %46
  %53 = getelementptr i8, ptr %25, i64 8
  store ptr %53, ptr %19, align 8
  br label %54

54:                                               ; preds = %52, %48
  %55 = phi ptr [ %25, %48 ], [ %53, %52 ]
  %56 = phi i32 [ %51, %48 ], [ %26, %52 ]
  %57 = phi ptr [ %50, %48 ], [ %25, %52 ]
  %58 = load double, ptr %57, align 8
  br label %85

59:                                               ; preds = %24
  %60 = icmp ult i32 %27, 41
  br i1 %60, label %61, label %65

61:                                               ; preds = %59
  %62 = zext i32 %27 to i64
  %63 = getelementptr i8, ptr %21, i64 %62
  %64 = add nuw nsw i32 %27, 8
  store i32 %64, ptr %6, align 16
  br label %67

65:                                               ; preds = %59
  %66 = getelementptr i8, ptr %25, i64 8
  store ptr %66, ptr %19, align 8
  br label %67

67:                                               ; preds = %65, %61
  %68 = phi ptr [ %25, %61 ], [ %66, %65 ]
  %69 = phi i32 [ %64, %61 ], [ %27, %65 ]
  %70 = phi ptr [ %63, %61 ], [ %25, %65 ]
  %71 = load i32, ptr %70, align 4
  br label %85

72:                                               ; preds = %24
  %73 = icmp ult i32 %26, 161
  br i1 %73, label %74, label %78

74:                                               ; preds = %72
  %75 = zext i32 %26 to i64
  %76 = getelementptr i8, ptr %21, i64 %75
  %77 = add nuw nsw i32 %26, 16
  store i32 %77, ptr %18, align 4
  br label %80

78:                                               ; preds = %72
  %79 = getelementptr i8, ptr %25, i64 8
  store ptr %79, ptr %19, align 8
  br label %80

80:                                               ; preds = %78, %74
  %81 = phi ptr [ %25, %74 ], [ %79, %78 ]
  %82 = phi i32 [ %77, %74 ], [ %26, %78 ]
  %83 = phi ptr [ %76, %74 ], [ %25, %78 ]
  %84 = load double, ptr %83, align 8
  br label %85

85:                                               ; preds = %80, %67, %54, %41
  %86 = phi ptr [ %81, %80 ], [ %68, %67 ], [ %55, %54 ], [ %42, %41 ]
  %87 = phi i32 [ %82, %80 ], [ %26, %67 ], [ %56, %54 ], [ %43, %41 ]
  %88 = phi i32 [ %27, %80 ], [ %69, %67 ], [ %27, %54 ], [ %27, %41 ]
  %89 = phi double [ %84, %80 ], [ %29, %67 ], [ %29, %54 ], [ %29, %41 ]
  %90 = phi double [ %30, %80 ], [ %30, %67 ], [ %58, %54 ], [ %30, %41 ]
  %91 = phi double [ %31, %80 ], [ %31, %67 ], [ %31, %54 ], [ %45, %41 ]
  %92 = phi i32 [ %32, %80 ], [ %71, %67 ], [ %32, %54 ], [ %32, %41 ]
  %93 = icmp ult i32 %88, 41
  br i1 %93, label %94, label %98

94:                                               ; preds = %85
  %95 = zext i32 %88 to i64
  %96 = getelementptr i8, ptr %21, i64 %95
  %97 = add nuw nsw i32 %88, 8
  store i32 %97, ptr %6, align 16
  br label %100

98:                                               ; preds = %85
  %99 = getelementptr i8, ptr %86, i64 8
  store ptr %99, ptr %19, align 8
  br label %100

100:                                              ; preds = %98, %94
  %101 = phi ptr [ %86, %94 ], [ %99, %98 ]
  %102 = phi i32 [ %97, %94 ], [ %88, %98 ]
  %103 = phi ptr [ %96, %94 ], [ %86, %98 ]
  %104 = load i32, ptr %103, align 4
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %106, label %24, !llvm.loop !483

106:                                              ; preds = %100
  %.lcssa5 = phi double [ %89, %100 ]
  %.lcssa4 = phi double [ %90, %100 ]
  %.lcssa3 = phi double [ %91, %100 ]
  %.lcssa2 = phi i32 [ %92, %100 ]
  call void @llvm.va_end(ptr nonnull %6)
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %6) #55
  br label %108

107:                                              ; preds = %24
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %6) #55
  br label %311

108:                                              ; preds = %106, %14
  %109 = phi double [ 1.600000e+01, %14 ], [ %.lcssa5, %106 ]
  %110 = phi double [ 8.000000e-01, %14 ], [ %.lcssa4, %106 ]
  %111 = phi double [ 1.000000e+00, %14 ], [ %.lcssa3, %106 ]
  %112 = phi i32 [ 45, %14 ], [ %.lcssa2, %106 ]
  %113 = or i32 %3, %2
  %114 = and i32 %113, 1
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %121, label %116

116:                                              ; preds = %121, %108
  %117 = phi i32 [ %3, %108 ], [ %125, %121 ]
  %118 = phi i32 [ %2, %108 ], [ %126, %121 ]
  %119 = phi i32 [ 1, %108 ], [ %127, %121 ]
  %120 = icmp sgt i32 %117, 0
  br i1 %120, label %131, label %155

121:                                              ; preds = %121, %108
  %122 = phi i32 [ %127, %121 ], [ 1, %108 ]
  %123 = phi i32 [ %126, %121 ], [ %2, %108 ]
  %124 = phi i32 [ %125, %121 ], [ %3, %108 ]
  %125 = lshr i32 %124, 1
  %126 = lshr i32 %123, 1
  %127 = shl i32 %122, 1
  %128 = or i32 %125, %126
  %129 = and i32 %128, 1
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %121, label %116, !llvm.loop !484

131:                                              ; preds = %151, %116
  %132 = phi i32 [ %153, %151 ], [ %118, %116 ]
  %133 = phi i32 [ %152, %151 ], [ %117, %116 ]
  %134 = and i32 %133, 1
  %135 = and i32 %134, %132
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %137, label %143

137:                                              ; preds = %131
  %138 = xor i32 %134, 1
  %139 = lshr i32 %133, %138
  %140 = and i32 %132, 1
  %141 = xor i32 %140, 1
  %142 = ashr i32 %132, %141
  br label %151

143:                                              ; preds = %131
  %144 = icmp slt i32 %133, %132
  br i1 %144, label %145, label %148

145:                                              ; preds = %143
  %146 = sub nsw i32 %132, %133
  %147 = ashr i32 %146, 1
  br label %151

148:                                              ; preds = %143
  %149 = sub nsw i32 %133, %132
  %150 = ashr i32 %149, 1
  br label %151

151:                                              ; preds = %148, %145, %137
  %152 = phi i32 [ %139, %137 ], [ %133, %145 ], [ %150, %148 ]
  %153 = phi i32 [ %142, %137 ], [ %147, %145 ], [ %132, %148 ]
  %154 = icmp sgt i32 %152, 0
  br i1 %154, label %131, label %155, !llvm.loop !485

155:                                              ; preds = %151, %116
  %156 = phi i32 [ %118, %116 ], [ %153, %151 ]
  %157 = mul nsw i32 %156, %119
  %158 = sdiv i32 %2, %157
  %159 = sdiv i32 %3, %157
  %160 = icmp slt i32 %158, %159
  br i1 %160, label %161, label %168

161:                                              ; preds = %155
  %162 = sitofp i32 %158 to double
  %163 = fmul double %110, %162
  %164 = sitofp i32 %159 to double
  %165 = fdiv double %163, %164
  %166 = mul nsw i32 %159, %112
  %167 = sdiv i32 %166, %158
  br label %168

168:                                              ; preds = %161, %155
  %169 = phi double [ %165, %161 ], [ %110, %155 ]
  %170 = phi i32 [ %167, %161 ], [ %112, %155 ]
  %171 = mul nsw i32 %170, %158
  %172 = sext i32 %171 to i64
  %173 = call noalias ptr @calloc(i64 noundef %172, i64 noundef 4) #65
  %174 = getelementptr inbounds %struct.res_state, ptr %0, i64 0, i32 4
  store ptr %173, ptr %174, align 8
  %175 = icmp eq ptr %173, null
  br i1 %175, label %311, label %176

176:                                              ; preds = %168
  %177 = mul nsw i32 %170, %1
  %178 = sext i32 %177 to i64
  %179 = call noalias ptr @calloc(i64 noundef %178, i64 noundef 4) #65
  %180 = getelementptr inbounds %struct.res_state, ptr %0, i64 0, i32 5
  store ptr %179, ptr %180, align 8
  %181 = icmp eq ptr %179, null
  br i1 %181, label %182, label %183

182:                                              ; preds = %176
  call void @free(ptr noundef nonnull %173) #59
  store ptr null, ptr %174, align 8
  br label %311

183:                                              ; preds = %176
  %184 = sdiv i32 %170, 2
  %185 = add nsw i32 %184, 1
  %186 = getelementptr inbounds %struct.res_state, ptr %0, i64 0, i32 6
  store i32 %185, ptr %186, align 8
  store i32 %1, ptr %0, align 8
  %187 = getelementptr inbounds %struct.res_state, ptr %0, i64 0, i32 2
  store i32 %158, ptr %187, align 8
  %188 = getelementptr inbounds %struct.res_state, ptr %0, i64 0, i32 1
  store i32 %159, ptr %188, align 4
  %189 = getelementptr inbounds %struct.res_state, ptr %0, i64 0, i32 3
  store i32 %170, ptr %189, align 4
  %190 = getelementptr inbounds %struct.res_state, ptr %0, i64 0, i32 7
  store i32 0, ptr %190, align 4
  %191 = sitofp i32 %158 to double
  %192 = fdiv double %169, %191
  %193 = getelementptr inbounds float, ptr %173, i64 %172
  %194 = and i32 %171, 1
  %195 = icmp eq i32 %194, 0
  %196 = sext i32 %170 to i64
  br i1 %195, label %197, label %205

197:                                              ; preds = %183
  %198 = getelementptr inbounds float, ptr %173, i64 %196
  %199 = icmp slt i32 %170, %171
  %200 = getelementptr inbounds float, ptr %173, i64 1
  %201 = select i1 %199, ptr %173, ptr %200
  %202 = select i1 %199, ptr %198, ptr %200
  %203 = add nsw i32 %171, -1
  %204 = icmp eq i32 %203, 0
  br i1 %204, label %240, label %205

205:                                              ; preds = %197, %183
  %206 = phi ptr [ %202, %197 ], [ %173, %183 ]
  %207 = phi ptr [ %201, %197 ], [ %173, %183 ]
  %208 = phi i32 [ %203, %197 ], [ %171, %183 ]
  %209 = sdiv i32 %208, -2
  br label %210

210:                                              ; preds = %224, %205
  %211 = phi i32 [ %208, %205 ], [ %215, %224 ]
  %212 = phi ptr [ %206, %205 ], [ %233, %224 ]
  %213 = phi ptr [ %207, %205 ], [ %232, %224 ]
  %214 = phi i32 [ %209, %205 ], [ %228, %224 ]
  %215 = add nsw i32 %211, -1
  %216 = icmp eq i32 %214, 0
  br i1 %216, label %224, label %217

217:                                              ; preds = %210
  %218 = sitofp i32 %214 to double
  %219 = fmul double %218, 0x400921FB54442D18
  %220 = fmul double %192, %219
  %221 = call double @sin(double noundef %220) #59
  %222 = fdiv double %221, %219
  %223 = fmul double %222, %191
  br label %224

224:                                              ; preds = %217, %210
  %225 = phi double [ %223, %217 ], [ %169, %210 ]
  %226 = fmul double %111, %225
  %227 = fptrunc double %226 to float
  store float %227, ptr %212, align 4
  %228 = add nsw i32 %214, 1
  %229 = getelementptr inbounds float, ptr %212, i64 %196
  %230 = icmp ult ptr %229, %193
  %231 = getelementptr inbounds float, ptr %213, i64 1
  %232 = select i1 %230, ptr %213, ptr %231
  %233 = select i1 %230, ptr %229, ptr %231
  %234 = icmp eq i32 %215, 0
  br i1 %234, label %235, label %210, !llvm.loop !486

235:                                              ; preds = %224
  %236 = load ptr, ptr %174, align 8
  %237 = getelementptr inbounds float, ptr %236, i64 %172
  br i1 %195, label %238, label %249

238:                                              ; preds = %235
  %239 = add nsw i32 %171, -1
  br label %240

240:                                              ; preds = %238, %197
  %241 = phi i32 [ %239, %238 ], [ 0, %197 ]
  %242 = phi ptr [ %237, %238 ], [ %193, %197 ]
  %243 = phi ptr [ %236, %238 ], [ %173, %197 ]
  store float 0.000000e+00, ptr %243, align 4
  %244 = getelementptr inbounds float, ptr %243, i64 %196
  %245 = icmp slt i32 %170, %171
  %246 = getelementptr inbounds float, ptr %243, i64 1
  %247 = select i1 %245, ptr %243, ptr %246
  %248 = select i1 %245, ptr %244, ptr %246
  br label %249

249:                                              ; preds = %240, %235
  %250 = phi ptr [ %242, %240 ], [ %237, %235 ]
  %251 = phi i32 [ %241, %240 ], [ %171, %235 ]
  %252 = phi ptr [ %247, %240 ], [ %236, %235 ]
  %253 = phi ptr [ %248, %240 ], [ %236, %235 ]
  %254 = sdiv i32 %251, -2
  %255 = add nsw i32 %254, -1
  br label %256

256:                                              ; preds = %256, %249
  %257 = phi double [ 1.000000e+00, %249 ], [ %264, %256 ]
  %258 = phi double [ 1.000000e+00, %249 ], [ %265, %256 ]
  %259 = phi i32 [ 0, %249 ], [ %260, %256 ]
  %260 = add nuw nsw i32 %259, 2
  %261 = sitofp i32 %260 to double
  %262 = fdiv double %109, %261
  %263 = fmul double %262, %262
  %264 = fmul double %257, %263
  %265 = fadd double %258, %264
  %266 = fmul double %265, 0x3B92E3B40A0E9B4F
  %267 = fcmp ogt double %264, %266
  br i1 %267, label %256, label %268, !llvm.loop !487

268:                                              ; preds = %256
  %.lcssa1 = phi double [ %265, %256 ]
  %269 = sitofp i32 %255 to double
  %270 = fmul double %269, %269
  %271 = icmp eq i32 %251, 0
  br i1 %271, label %311, label %272

272:                                              ; preds = %268
  %273 = sext i32 %170 to i64
  br label %274

274:                                              ; preds = %297, %272
  %275 = phi i32 [ %251, %272 ], [ %298, %297 ]
  %276 = phi ptr [ %253, %272 ], [ %309, %297 ]
  %277 = phi ptr [ %252, %272 ], [ %308, %297 ]
  %278 = phi i32 [ %254, %272 ], [ %304, %297 ]
  %279 = sitofp i32 %278 to double
  %280 = fmul double %279, %279
  %281 = fdiv double %280, %270
  %282 = fsub double 1.000000e+00, %281
  %283 = call double @sqrt(double noundef %282) #59
  %284 = fmul double %109, %283
  br label %285

285:                                              ; preds = %285, %274
  %286 = phi double [ 1.000000e+00, %274 ], [ %293, %285 ]
  %287 = phi double [ 1.000000e+00, %274 ], [ %294, %285 ]
  %288 = phi i32 [ 0, %274 ], [ %289, %285 ]
  %289 = add nuw nsw i32 %288, 2
  %290 = sitofp i32 %289 to double
  %291 = fdiv double %284, %290
  %292 = fmul double %291, %291
  %293 = fmul double %286, %292
  %294 = fadd double %287, %293
  %295 = fmul double %294, 0x3B92E3B40A0E9B4F
  %296 = fcmp ogt double %293, %295
  br i1 %296, label %285, label %297, !llvm.loop !487

297:                                              ; preds = %285
  %.lcssa = phi double [ %294, %285 ]
  %298 = add nsw i32 %275, -1
  %299 = fdiv double %.lcssa, %.lcssa1
  %300 = load float, ptr %276, align 4
  %301 = fpext float %300 to double
  %302 = fmul double %299, %301
  %303 = fptrunc double %302 to float
  store float %303, ptr %276, align 4
  %304 = add nsw i32 %278, 1
  %305 = getelementptr inbounds float, ptr %276, i64 %273
  %306 = icmp ult ptr %305, %250
  %307 = getelementptr inbounds float, ptr %277, i64 1
  %308 = select i1 %306, ptr %277, ptr %307
  %309 = select i1 %306, ptr %305, ptr %307
  %310 = icmp eq i32 %298, 0
  br i1 %310, label %311, label %274, !llvm.loop !488

311:                                              ; preds = %297, %268, %182, %168, %107, %5
  %312 = phi i32 [ -1, %182 ], [ -1, %107 ], [ -1, %5 ], [ -1, %168 ], [ 0, %268 ], [ 0, %297 ]
  ret i32 %312
}

; Function Attrs: nounwind optsize uwtable
define internal i64 @read_resampled(ptr nocapture noundef %0, ptr nocapture noundef readonly %1, i32 noundef %2) #0 {
  %4 = sext i32 %2 to i64
  %5 = getelementptr inbounds %struct.res_state, ptr %0, i64 0, i32 1
  %6 = load i32, ptr %5, align 4
  %7 = zext i32 %6 to i64
  %8 = mul nsw i64 %7, %4
  %9 = getelementptr inbounds %struct.res_state, ptr %0, i64 0, i32 2
  %10 = load i32, ptr %9, align 8
  %11 = zext i32 %10 to i64
  %12 = udiv i64 %8, %11
  %13 = trunc i64 %12 to i32
  %14 = getelementptr inbounds %struct.resampler, ptr %0, i64 0, i32 5
  %15 = load i32, ptr %14, align 4
  %16 = tail call i32 @llvm.smin.i32(i32 %15, i32 %13)
  %17 = getelementptr inbounds %struct.resampler, ptr %0, i64 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr inbounds %struct.resampler, ptr %0, i64 0, i32 2
  %20 = load ptr, ptr %19, align 8
  %21 = getelementptr inbounds %struct.resampler, ptr %0, i64 0, i32 3
  %22 = load ptr, ptr %21, align 8
  %23 = tail call i64 %18(ptr noundef %20, ptr noundef %22, i32 noundef %16) #59
  %24 = icmp slt i64 %23, 1
  br i1 %24, label %25, label %32

25:                                               ; preds = %3
  %26 = getelementptr inbounds %struct.resampler, ptr %0, i64 0, i32 6
  %27 = load i32, ptr %26, align 8
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %41

29:                                               ; preds = %25
  store i32 1, ptr %26, align 8
  %30 = tail call i32 @res_drain(ptr noundef nonnull %0, ptr noundef %1) #56
  %31 = sext i32 %30 to i64
  br label %41

32:                                               ; preds = %3
  %33 = load ptr, ptr %21, align 8
  %34 = tail call i32 @res_push(ptr noundef nonnull %0, ptr noundef %1, ptr noundef %33, i64 noundef %23) #56
  %35 = icmp slt i32 %34, 1
  br i1 %35, label %36, label %39

36:                                               ; preds = %32
  %37 = load ptr, ptr @stderr, align 8
  %38 = tail call i64 @fwrite(ptr nonnull @.str.176, i64 87, i64 1, ptr %37) #58
  br label %39

39:                                               ; preds = %36, %32
  %40 = sext i32 %34 to i64
  br label %41

41:                                               ; preds = %39, %29, %25
  %42 = phi i64 [ %31, %29 ], [ %40, %39 ], [ 0, %25 ]
  ret i64 %42
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @res_drain(ptr nocapture noundef %0, ptr nocapture noundef readonly %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %3) #55
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4) #55
  %5 = getelementptr inbounds %struct.res_state, ptr %0, i64 0, i32 3
  %6 = load i32, ptr %5, align 4
  %7 = zext i32 %6 to i64
  %8 = tail call noalias ptr @calloc(i64 noundef %7, i64 noundef 4) #65
  %9 = icmp eq ptr %8, null
  br i1 %9, label %40, label %10

10:                                               ; preds = %2
  %11 = load i32, ptr %0, align 8
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %37, label %13

13:                                               ; preds = %10
  %14 = getelementptr inbounds %struct.res_state, ptr %0, i64 0, i32 6
  %15 = getelementptr inbounds %struct.res_state, ptr %0, i64 0, i32 7
  %16 = getelementptr inbounds %struct.res_state, ptr %0, i64 0, i32 5
  br label %17

17:                                               ; preds = %17, %13
  %18 = phi i64 [ 0, %13 ], [ %33, %17 ]
  %19 = load i32, ptr %14, align 8
  store i32 %19, ptr %3, align 4
  %20 = load i32, ptr %15, align 4
  store i32 %20, ptr %4, align 4
  %21 = load ptr, ptr %16, align 8
  %22 = load i32, ptr %5, align 4
  %23 = trunc i64 %18 to i32
  %24 = mul i32 %22, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds float, ptr %21, i64 %25
  %27 = getelementptr inbounds ptr, ptr %1, i64 %18
  %28 = load ptr, ptr %27, align 8
  %29 = lshr i32 %22, 1
  %30 = add nsw i32 %29, -1
  %31 = zext i32 %30 to i64
  %32 = call fastcc i32 @push(ptr noundef nonnull %0, ptr noundef %26, ptr noundef nonnull %3, ptr noundef nonnull %4, ptr noundef %28, i32 noundef 1, ptr noundef nonnull %8, i32 noundef 1, i64 noundef %31) #56
  %33 = add nuw nsw i64 %18, 1
  %34 = load i32, ptr %0, align 8
  %35 = zext i32 %34 to i64
  %36 = icmp ult i64 %33, %35
  br i1 %36, label %17, label %37, !llvm.loop !489

37:                                               ; preds = %17, %10
  %38 = phi i32 [ -1, %10 ], [ %32, %17 ]
  tail call void @free(ptr noundef %8) #59
  %39 = getelementptr inbounds %struct.res_state, ptr %0, i64 0, i32 6
  store i32 -1, ptr %39, align 8
  br label %40

40:                                               ; preds = %37, %2
  %41 = phi i32 [ %38, %37 ], [ -1, %2 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4) #55
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %3) #55
  ret i32 %41
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @res_push(ptr nocapture noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, i64 noundef %3) #21 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5) #55
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6) #55
  %7 = load i32, ptr %0, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %36, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.res_state, ptr %0, i64 0, i32 6
  %11 = getelementptr inbounds %struct.res_state, ptr %0, i64 0, i32 7
  %12 = getelementptr inbounds %struct.res_state, ptr %0, i64 0, i32 5
  %13 = getelementptr inbounds %struct.res_state, ptr %0, i64 0, i32 3
  br label %14

14:                                               ; preds = %14, %9
  %15 = phi i64 [ 0, %9 ], [ %29, %14 ]
  %16 = load i32, ptr %10, align 8
  store i32 %16, ptr %5, align 4
  %17 = load i32, ptr %11, align 4
  store i32 %17, ptr %6, align 4
  %18 = load ptr, ptr %12, align 8
  %19 = load i32, ptr %13, align 4
  %20 = trunc i64 %15 to i32
  %21 = mul i32 %19, %20
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds float, ptr %18, i64 %22
  %24 = getelementptr inbounds ptr, ptr %1, i64 %15
  %25 = load ptr, ptr %24, align 8
  %26 = getelementptr inbounds ptr, ptr %2, i64 %15
  %27 = load ptr, ptr %26, align 8
  %28 = call fastcc i32 @push(ptr noundef nonnull %0, ptr noundef %23, ptr noundef nonnull %5, ptr noundef nonnull %6, ptr noundef %25, i32 noundef 1, ptr noundef %27, i32 noundef 1, i64 noundef %3) #56
  %29 = add nuw nsw i64 %15, 1
  %30 = load i32, ptr %0, align 8
  %31 = zext i32 %30 to i64
  %32 = icmp ult i64 %29, %31
  br i1 %32, label %14, label %33, !llvm.loop !490

33:                                               ; preds = %14
  %.lcssa = phi i32 [ %28, %14 ]
  %34 = load i32, ptr %5, align 4
  %35 = load i32, ptr %6, align 4
  br label %36

36:                                               ; preds = %33, %4
  %37 = phi i32 [ -1, %4 ], [ %35, %33 ]
  %38 = phi i32 [ -1, %4 ], [ %34, %33 ]
  %39 = phi i32 [ -1, %4 ], [ %.lcssa, %33 ]
  %40 = getelementptr inbounds %struct.res_state, ptr %0, i64 0, i32 6
  store i32 %38, ptr %40, align 8
  %41 = getelementptr inbounds %struct.res_state, ptr %0, i64 0, i32 7
  store i32 %37, ptr %41, align 4
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6) #55
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5) #55
  ret i32 %39
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal fastcc i32 @push(ptr nocapture noundef readonly %0, ptr noundef %1, ptr nocapture noundef %2, ptr nocapture noundef %3, ptr noundef %4, i32 noundef %5, ptr noundef %6, i32 noundef %7, i64 noundef %8) unnamed_addr #20 {
  %10 = load i32, ptr %2, align 4
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds %struct.res_state, ptr %0, i64 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds float, ptr %1, i64 %14
  %16 = getelementptr inbounds %struct.res_state, ptr %0, i64 0, i32 2
  %17 = getelementptr inbounds %struct.res_state, ptr %0, i64 0, i32 1
  %18 = icmp slt i64 %11, %14
  %19 = icmp ne i64 %8, 0
  %20 = and i1 %18, %19
  br i1 %20, label %21, label %35

21:                                               ; preds = %9
  %22 = getelementptr inbounds float, ptr %1, i64 %11
  %23 = sext i32 %7 to i64
  br label %24

24:                                               ; preds = %24, %21
  %25 = phi ptr [ %6, %21 ], [ %30, %24 ]
  %26 = phi i64 [ %8, %21 ], [ %31, %24 ]
  %27 = phi ptr [ %22, %21 ], [ %29, %24 ]
  %28 = load float, ptr %25, align 4
  %29 = getelementptr inbounds float, ptr %27, i64 1
  store float %28, ptr %27, align 4
  %30 = getelementptr inbounds float, ptr %25, i64 %23
  %31 = add i64 %26, -1
  %32 = icmp ult ptr %29, %15
  %33 = icmp ne i64 %31, 0
  %34 = select i1 %32, i1 %33, i1 false
  br i1 %34, label %24, label %35, !llvm.loop !491

35:                                               ; preds = %24, %9
  %36 = phi i64 [ %8, %9 ], [ %31, %24 ]
  %37 = phi ptr [ %6, %9 ], [ %30, %24 ]
  %38 = icmp eq i64 %36, 0
  br i1 %38, label %154, label %39

39:                                               ; preds = %35
  %40 = sext i32 %7 to i64
  %41 = mul i64 %36, %40
  %42 = getelementptr inbounds float, ptr %37, i64 %41
  %43 = icmp sgt i64 %41, 0
  br i1 %43, label %44, label %98

44:                                               ; preds = %39
  %45 = getelementptr inbounds %struct.res_state, ptr %0, i64 0, i32 4
  %46 = sext i32 %5 to i64
  %47 = load i32, ptr %3, align 4
  br label %52

48:                                               ; preds = %90, %82
  %49 = phi i32 [ %87, %82 ], [ %94, %90 ]
  %50 = phi ptr [ %55, %82 ], [ %95, %90 ]
  %51 = icmp ult ptr %50, %42
  br i1 %51, label %52, label %98, !llvm.loop !492

52:                                               ; preds = %48, %44
  %53 = phi i32 [ %47, %44 ], [ %49, %48 ]
  %54 = phi ptr [ %4, %44 ], [ %84, %48 ]
  %55 = phi ptr [ %37, %44 ], [ %50, %48 ]
  %56 = load i32, ptr %12, align 4
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %82, label %58

58:                                               ; preds = %52
  %59 = load ptr, ptr %45, align 8
  %60 = mul i32 %56, %53
  %61 = zext i32 %60 to i64
  %62 = getelementptr inbounds float, ptr %59, i64 %61
  br label %63

63:                                               ; preds = %63, %58
  %64 = phi float [ %73, %63 ], [ 0.000000e+00, %58 ]
  %65 = phi i32 [ %76, %63 ], [ %7, %58 ]
  %66 = phi ptr [ %80, %63 ], [ %62, %58 ]
  %67 = phi i32 [ %69, %63 ], [ %56, %58 ]
  %68 = phi ptr [ %79, %63 ], [ %55, %58 ]
  %69 = add nsw i32 %67, -1
  %70 = load float, ptr %68, align 4
  %71 = load float, ptr %66, align 4
  %72 = fmul float %70, %71
  %73 = fadd float %64, %72
  %74 = icmp eq ptr %68, %37
  %75 = select i1 %74, ptr %15, ptr %68
  %76 = select i1 %74, i32 1, i32 %65
  %77 = sext i32 %76 to i64
  %78 = sub nsw i64 0, %77
  %79 = getelementptr inbounds float, ptr %75, i64 %78
  %80 = getelementptr inbounds float, ptr %66, i64 1
  %81 = icmp eq i32 %69, 0
  br i1 %81, label %82, label %63, !llvm.loop !493

82:                                               ; preds = %63, %52
  %83 = phi float [ 0.000000e+00, %52 ], [ %73, %63 ]
  store float %83, ptr %54, align 4
  %84 = getelementptr inbounds float, ptr %54, i64 %46
  %85 = load i32, ptr %17, align 4
  %86 = load i32, ptr %3, align 4
  %87 = add i32 %86, %85
  store i32 %87, ptr %3, align 4
  %88 = load i32, ptr %16, align 8
  %89 = icmp ult i32 %87, %88
  br i1 %89, label %48, label %90

90:                                               ; preds = %90, %82
  %91 = phi i32 [ %96, %90 ], [ %88, %82 ]
  %92 = phi i32 [ %94, %90 ], [ %87, %82 ]
  %93 = phi ptr [ %95, %90 ], [ %55, %82 ]
  %94 = sub i32 %92, %91
  store i32 %94, ptr %3, align 4
  %95 = getelementptr inbounds float, ptr %93, i64 %40
  %96 = load i32, ptr %16, align 8
  %97 = icmp ult i32 %94, %96
  br i1 %97, label %48, label %90, !llvm.loop !494

98:                                               ; preds = %48, %39
  %99 = phi ptr [ %37, %39 ], [ %50, %48 ]
  %100 = phi ptr [ %4, %39 ], [ %84, %48 ]
  %101 = ptrtoint ptr %99 to i64
  %102 = ptrtoint ptr %42 to i64
  %103 = sub i64 %101, %102
  %104 = ashr exact i64 %103, 2
  %105 = sdiv i64 %104, %40
  %106 = add i64 %105, %36
  %107 = load i32, ptr %12, align 4
  %108 = zext i32 %107 to i64
  %109 = icmp ult i64 %106, %108
  br i1 %109, label %110, label %124

110:                                              ; preds = %98
  %111 = icmp slt i64 %106, %14
  br i1 %111, label %112, label %121

112:                                              ; preds = %110
  %113 = getelementptr float, ptr %1, i64 %106
  br label %114

114:                                              ; preds = %114, %112
  %115 = phi ptr [ %117, %114 ], [ %113, %112 ]
  %116 = phi ptr [ %119, %114 ], [ %1, %112 ]
  %117 = getelementptr inbounds float, ptr %115, i64 1
  %118 = load float, ptr %115, align 4
  %119 = getelementptr inbounds float, ptr %116, i64 1
  store float %118, ptr %116, align 4
  %120 = icmp ult ptr %117, %15
  br i1 %120, label %114, label %121, !llvm.loop !495

121:                                              ; preds = %114, %110
  %122 = phi ptr [ %1, %110 ], [ %119, %114 ]
  %123 = mul nsw i64 %106, %40
  br label %127

124:                                              ; preds = %98
  %125 = mul i32 %107, %7
  %126 = zext i32 %125 to i64
  br label %127

127:                                              ; preds = %124, %121
  %128 = phi ptr [ %122, %121 ], [ %1, %124 ]
  %129 = phi i64 [ %123, %121 ], [ %126, %124 ]
  %130 = sub nsw i64 0, %129
  %131 = getelementptr inbounds float, ptr %99, i64 %130
  %132 = icmp ult ptr %131, %42
  br i1 %132, label %133, label %140

133:                                              ; preds = %133, %127
  %134 = phi ptr [ %138, %133 ], [ %131, %127 ]
  %135 = phi ptr [ %137, %133 ], [ %128, %127 ]
  %136 = load float, ptr %134, align 4
  %137 = getelementptr inbounds float, ptr %135, i64 1
  store float %136, ptr %135, align 4
  %138 = getelementptr inbounds float, ptr %134, i64 %40
  %139 = icmp ult ptr %138, %42
  br i1 %139, label %133, label %140, !llvm.loop !496

140:                                              ; preds = %133, %127
  %141 = phi ptr [ %128, %127 ], [ %137, %133 ]
  %142 = ptrtoint ptr %141 to i64
  %143 = ptrtoint ptr %1 to i64
  %144 = sub i64 %142, %143
  %145 = lshr exact i64 %144, 2
  %146 = trunc i64 %145 to i32
  store i32 %146, ptr %2, align 4
  %147 = ptrtoint ptr %100 to i64
  %148 = ptrtoint ptr %4 to i64
  %149 = sub i64 %147, %148
  %150 = ashr exact i64 %149, 2
  %151 = sext i32 %5 to i64
  %152 = sdiv i64 %150, %151
  %153 = trunc i64 %152 to i32
  br label %154

154:                                              ; preds = %140, %35
  %155 = phi i32 [ %153, %140 ], [ 0, %35 ]
  ret i32 %155
}

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.va_start(ptr) #51

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.va_end(ptr) #51

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write)
declare double @sqrt(double noundef) local_unnamed_addr #28

; Function Attrs: nofree nounwind optsize
declare noundef i32 @stat(ptr nocapture noundef readonly, ptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: nofree nounwind optsize
declare noundef i32 @mkdir(ptr nocapture noundef readonly, i32 noundef) local_unnamed_addr #5

; Function Attrs: nofree nounwind optsize
declare noundef i64 @fread(ptr nocapture noundef, i64 noundef, i64 noundef, ptr nocapture noundef) #5

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: read) uwtable
define internal i32 @wav_id(ptr nocapture noundef readonly %0, i32 noundef %1) #52 {
  %3 = icmp slt i32 %1, 12
  br i1 %3, label %12, label %4

4:                                                ; preds = %2
  %5 = tail call i32 @bcmp(ptr noundef nonnull dereferenceable(4) %0, ptr noundef nonnull dereferenceable(4) @.str.71, i64 4)
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %12

7:                                                ; preds = %4
  %8 = getelementptr inbounds i8, ptr %0, i64 8
  %9 = tail call i32 @bcmp(ptr noundef nonnull dereferenceable(4) %8, ptr noundef nonnull dereferenceable(4) @.str.72, i64 4)
  %10 = icmp eq i32 %9, 0
  %11 = zext i1 %10 to i32
  br label %12

12:                                               ; preds = %7, %4, %2
  %13 = phi i32 [ 0, %2 ], [ 0, %4 ], [ %11, %7 ]
  ret i32 %13
}

; Function Attrs: nofree nounwind optsize uwtable
define internal i32 @wav_open(ptr noundef %0, ptr nocapture noundef %1, ptr nocapture readnone %2, i32 %3) #3 {
  %5 = alloca [16 x i8], align 16
  %6 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %5) #55
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6) #55
  %7 = tail call noalias dereferenceable_or_null(40) ptr @malloc(i64 noundef 40) #64
  %8 = call fastcc i32 @find_wav_chunk(ptr noundef %0, ptr noundef nonnull @.str.73, ptr noundef nonnull %6) #56, !range !36
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %123, label %10

10:                                               ; preds = %4
  %11 = load i32, ptr %6, align 4
  %12 = icmp ult i32 %11, 16
  br i1 %12, label %13, label %16

13:                                               ; preds = %10
  %14 = load ptr, ptr @stderr, align 8
  %15 = tail call i64 @fwrite(ptr nonnull @.str.74, i64 49, i64 1, ptr %14) #58
  br label %123

16:                                               ; preds = %10
  %17 = and i32 %11, -3
  %18 = icmp eq i32 %17, 16
  br i1 %18, label %22, label %19

19:                                               ; preds = %16
  %20 = load ptr, ptr @stderr, align 8
  %21 = tail call i64 @fwrite(ptr nonnull @.str.75, i64 86, i64 1, ptr %20) #58
  br label %22

22:                                               ; preds = %19, %16
  %23 = call i64 @fread(ptr noundef nonnull %5, i64 noundef 1, i64 noundef 16, ptr noundef %0) #56
  %24 = icmp ult i64 %23, 16
  br i1 %24, label %25, label %28

25:                                               ; preds = %22
  %26 = load ptr, ptr @stderr, align 8
  %27 = tail call i64 @fwrite(ptr nonnull @.str.76, i64 46, i64 1, ptr %26) #58
  br label %123

28:                                               ; preds = %22
  %29 = add i32 %11, -16
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %34, label %31

31:                                               ; preds = %28
  %32 = tail call fastcc i32 @seek_forward(ptr noundef %0, i32 noundef %29) #56, !range !36
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %123, label %34

34:                                               ; preds = %31, %28
  %35 = getelementptr inbounds [16 x i8], ptr %5, i64 0, i64 1
  %36 = load i8, ptr %35, align 1
  %37 = load i8, ptr %5, align 16
  %38 = getelementptr inbounds i8, ptr %5, i64 2
  %39 = getelementptr inbounds i8, ptr %5, i64 3
  %40 = load i8, ptr %39, align 1
  %41 = zext i8 %40 to i16
  %42 = shl nuw i16 %41, 8
  %43 = load i8, ptr %38, align 2
  %44 = zext i8 %43 to i16
  %45 = or i16 %42, %44
  %46 = getelementptr inbounds i8, ptr %5, i64 4
  %47 = load i32, ptr %46, align 4
  %48 = getelementptr inbounds i8, ptr %5, i64 12
  %49 = load i16, ptr %48, align 4
  %50 = getelementptr inbounds i8, ptr %5, i64 14
  %51 = getelementptr inbounds i8, ptr %5, i64 15
  %52 = load i8, ptr %51, align 1
  %53 = zext i8 %52 to i16
  %54 = shl nuw i16 %53, 8
  %55 = load i8, ptr %50, align 2
  %56 = zext i8 %55 to i16
  %57 = or i16 %54, %56
  %58 = call fastcc i32 @find_wav_chunk(ptr noundef %0, ptr noundef nonnull @.str.77, ptr noundef nonnull %6) #56, !range !36
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %123, label %60

60:                                               ; preds = %34
  %61 = zext i8 %36 to i16
  %62 = shl nuw i16 %61, 8
  %63 = zext i8 %37 to i16
  %64 = or i16 %62, %63
  switch i16 %64, label %68 [
    i16 1, label %65
    i16 3, label %71
  ]

65:                                               ; preds = %60
  %66 = sdiv i16 %57, 8
  %67 = sext i16 %66 to i32
  br label %71

68:                                               ; preds = %60
  %69 = load ptr, ptr @stderr, align 8
  %70 = tail call i64 @fwrite(ptr nonnull @.str.78, i64 88, i64 1, ptr %69) #58
  br label %123

71:                                               ; preds = %65, %60
  %72 = phi ptr [ @wav_read, %65 ], [ @wav_ieee_read, %60 ]
  %73 = phi i32 [ %67, %65 ], [ 4, %60 ]
  %74 = getelementptr inbounds %struct.oe_enc_opt, ptr %1, i64 0, i32 2
  store ptr %72, ptr %74, align 8
  %75 = sext i16 %49 to i32
  %76 = sext i16 %45 to i32
  %77 = mul nsw i32 %73, %76
  %78 = icmp eq i32 %77, %75
  br i1 %78, label %79, label %120

79:                                               ; preds = %71
  %80 = sext i16 %57 to i32
  %81 = shl nsw i32 %73, 3
  %82 = icmp eq i32 %81, %80
  br i1 %82, label %83, label %120

83:                                               ; preds = %79
  switch i16 %57, label %84 [
    i16 24, label %88
    i16 16, label %88
    i16 8, label %88
  ]

84:                                               ; preds = %83
  %85 = icmp eq i16 %57, 32
  %86 = icmp eq i16 %64, 3
  %87 = and i1 %86, %85
  br i1 %87, label %88, label %120

88:                                               ; preds = %84, %83, %83, %83
  %89 = sext i32 %47 to i64
  %90 = getelementptr inbounds %struct.oe_enc_opt, ptr %1, i64 0, i32 10
  store i64 %89, ptr %90, align 8
  %91 = getelementptr inbounds %struct.oe_enc_opt, ptr %1, i64 0, i32 9
  store i32 %76, ptr %91, align 8
  %92 = getelementptr inbounds %struct.wavfile, ptr %7, i64 0, i32 4
  store ptr %0, ptr %92, align 8
  %93 = getelementptr inbounds %struct.wavfile, ptr %7, i64 0, i32 3
  store i64 0, ptr %93, align 8
  %94 = getelementptr inbounds %struct.wavfile, ptr %7, i64 0, i32 5
  store i16 0, ptr %94, align 8
  store i16 %45, ptr %7, align 8
  %95 = getelementptr inbounds %struct.wavfile, ptr %7, i64 0, i32 1
  store i16 %57, ptr %95, align 2
  %96 = load i32, ptr %6, align 4
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %102, label %98

98:                                               ; preds = %88
  %99 = udiv i32 %96, %75
  %100 = zext i32 %99 to i64
  %101 = getelementptr inbounds %struct.oe_enc_opt, ptr %1, i64 0, i32 8
  store i64 %100, ptr %101, align 8
  br label %116

102:                                              ; preds = %88
  %103 = tail call i64 @ftell(ptr noundef %0) #56
  %104 = tail call i32 @fseek(ptr noundef %0, i64 noundef 0, i32 noundef 2) #56
  %105 = icmp eq i32 %104, -1
  br i1 %105, label %106, label %108

106:                                              ; preds = %102
  %107 = getelementptr inbounds %struct.oe_enc_opt, ptr %1, i64 0, i32 8
  store i64 0, ptr %107, align 8
  br label %116

108:                                              ; preds = %102
  %109 = tail call i64 @ftell(ptr noundef %0) #56
  %110 = sub nsw i64 %109, %103
  %111 = sext i16 %49 to i64
  %112 = sdiv i64 %110, %111
  %113 = getelementptr inbounds %struct.oe_enc_opt, ptr %1, i64 0, i32 8
  store i64 %112, ptr %113, align 8
  %114 = tail call i32 @fseek(ptr noundef %0, i64 noundef %103, i32 noundef 0) #56
  %115 = load i64, ptr %113, align 8
  br label %116

116:                                              ; preds = %108, %106, %98
  %117 = phi i64 [ 0, %106 ], [ %115, %108 ], [ %100, %98 ]
  %118 = getelementptr inbounds %struct.wavfile, ptr %7, i64 0, i32 2
  store i64 %117, ptr %118, align 8
  %119 = getelementptr inbounds %struct.oe_enc_opt, ptr %1, i64 0, i32 7
  store ptr %7, ptr %119, align 8
  br label %123

120:                                              ; preds = %84, %79, %71
  %121 = load ptr, ptr @stderr, align 8
  %122 = tail call i64 @fwrite(ptr nonnull @.str.79, i64 92, i64 1, ptr %121) #58
  br label %123

123:                                              ; preds = %120, %116, %68, %34, %31, %25, %13, %4
  %124 = phi i32 [ 0, %13 ], [ 0, %25 ], [ 1, %116 ], [ 0, %120 ], [ 0, %68 ], [ 0, %4 ], [ 0, %31 ], [ 0, %34 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6) #55
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %5) #55
  ret i32 %124
}

; Function Attrs: mustprogress nounwind optsize willreturn memory(argmem: readwrite, inaccessiblemem: readwrite) uwtable
define internal void @wav_close(ptr nocapture noundef %0) #24 {
  tail call void @free(ptr noundef %0) #59
  ret void
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: read) uwtable
define internal i32 @aiff_id(ptr nocapture noundef readonly %0, i32 noundef %1) #52 {
  %3 = icmp slt i32 %1, 12
  br i1 %3, label %18, label %4

4:                                                ; preds = %2
  %5 = tail call i32 @bcmp(ptr noundef nonnull dereferenceable(4) %0, ptr noundef nonnull dereferenceable(4) @.str.56, i64 4)
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %18

7:                                                ; preds = %4
  %8 = getelementptr inbounds i8, ptr %0, i64 8
  %9 = tail call i32 @bcmp(ptr noundef nonnull dereferenceable(3) %8, ptr noundef nonnull dereferenceable(3) @.str.57, i64 3)
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %18

11:                                               ; preds = %7
  %12 = getelementptr inbounds i8, ptr %0, i64 11
  %13 = load i8, ptr %12, align 1
  %14 = icmp eq i8 %13, 67
  %15 = icmp eq i8 %13, 70
  %16 = or i1 %14, %15
  %17 = zext i1 %16 to i32
  br label %18

18:                                               ; preds = %11, %7, %4, %2
  %19 = phi i32 [ 0, %2 ], [ 0, %4 ], [ 0, %7 ], [ %17, %11 ]
  ret i32 %19
}

; Function Attrs: nofree nounwind optsize uwtable
define internal i32 @aiff_open(ptr noundef %0, ptr nocapture noundef writeonly %1, ptr nocapture noundef readonly %2, i32 %3) #3 {
  %5 = alloca i32, align 4
  %6 = alloca [8 x i8], align 1
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5) #55
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #55
  %7 = tail call noalias dereferenceable_or_null(40) ptr @malloc(i64 noundef 40) #64
  %8 = getelementptr inbounds i8, ptr %2, i64 11
  %9 = load i8, ptr %8, align 1
  %10 = icmp eq i8 %9, 67
  %11 = call fastcc i32 @find_aiff_chunk(ptr noundef %0, ptr noundef nonnull @.str.58, ptr noundef nonnull %5) #56, !range !36
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %16

13:                                               ; preds = %4
  %14 = load ptr, ptr @stderr, align 8
  %15 = tail call i64 @fwrite(ptr nonnull @.str.59, i64 44, i64 1, ptr %14) #58
  br label %168

16:                                               ; preds = %4
  %17 = load i32, ptr %5, align 4
  %18 = icmp ult i32 %17, 18
  br i1 %18, label %19, label %22

19:                                               ; preds = %16
  %20 = load ptr, ptr @stderr, align 8
  %21 = tail call i64 @fwrite(ptr nonnull @.str.60, i64 47, i64 1, ptr %20) #58
  br label %168

22:                                               ; preds = %16
  %23 = zext i32 %17 to i64
  %24 = alloca i8, i64 %23, align 16
  %25 = call i64 @fread(ptr noundef nonnull %24, i64 noundef 1, i64 noundef %23, ptr noundef %0) #56
  %26 = icmp ult i64 %25, %23
  br i1 %26, label %27, label %30

27:                                               ; preds = %22
  %28 = load ptr, ptr @stderr, align 8
  %29 = tail call i64 @fwrite(ptr nonnull @.str.61, i64 47, i64 1, ptr %28) #58
  br label %168

30:                                               ; preds = %22
  %31 = load i8, ptr %24, align 16
  %32 = zext i8 %31 to i16
  %33 = shl nuw i16 %32, 8
  %34 = getelementptr inbounds i8, ptr %24, i64 1
  %35 = load i8, ptr %34, align 1
  %36 = zext i8 %35 to i16
  %37 = or i16 %33, %36
  %38 = getelementptr inbounds i8, ptr %24, i64 2
  %39 = load i8, ptr %38, align 2
  %40 = zext i8 %39 to i32
  %41 = shl nuw i32 %40, 24
  %42 = getelementptr inbounds i8, ptr %24, i64 3
  %43 = load i8, ptr %42, align 1
  %44 = zext i8 %43 to i32
  %45 = shl nuw nsw i32 %44, 16
  %46 = or i32 %45, %41
  %47 = getelementptr inbounds i8, ptr %24, i64 4
  %48 = load i8, ptr %47, align 4
  %49 = zext i8 %48 to i32
  %50 = shl nuw nsw i32 %49, 8
  %51 = or i32 %46, %50
  %52 = getelementptr inbounds i8, ptr %24, i64 5
  %53 = load i8, ptr %52, align 1
  %54 = zext i8 %53 to i32
  %55 = or i32 %51, %54
  %56 = getelementptr inbounds i8, ptr %24, i64 6
  %57 = load i8, ptr %56, align 2
  %58 = zext i8 %57 to i16
  %59 = shl nuw i16 %58, 8
  %60 = getelementptr inbounds i8, ptr %24, i64 7
  %61 = load i8, ptr %60, align 1
  %62 = zext i8 %61 to i16
  %63 = or i16 %59, %62
  %64 = getelementptr inbounds i8, ptr %24, i64 8
  %65 = call double @read_IEEE80(ptr noundef nonnull %64) #56
  %66 = fptosi double %65 to i32
  %67 = getelementptr inbounds %struct.wavfile, ptr %7, i64 0, i32 5
  store i16 1, ptr %67, align 8
  br i1 %10, label %68, label %95

68:                                               ; preds = %30
  %69 = icmp ult i32 %17, 22
  br i1 %69, label %70, label %73

70:                                               ; preds = %68
  %71 = load ptr, ptr @stderr, align 8
  %72 = tail call i64 @fwrite(ptr nonnull @.str.62, i64 34, i64 1, ptr %71) #58
  br label %168

73:                                               ; preds = %68
  %74 = getelementptr inbounds i8, ptr %24, i64 18
  %75 = call i32 @bcmp(ptr noundef nonnull dereferenceable(4) %74, ptr noundef nonnull dereferenceable(4) @.str.63, i64 4)
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %95, label %77

77:                                               ; preds = %73
  %78 = call i32 @bcmp(ptr noundef nonnull dereferenceable(4) %74, ptr noundef nonnull dereferenceable(4) @.str.64, i64 4)
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %81

80:                                               ; preds = %77
  store i16 0, ptr %67, align 8
  br label %95

81:                                               ; preds = %77
  %82 = load ptr, ptr @stderr, align 8
  %83 = load i8, ptr %74, align 2
  %84 = zext i8 %83 to i32
  %85 = getelementptr inbounds i8, ptr %24, i64 19
  %86 = load i8, ptr %85, align 1
  %87 = zext i8 %86 to i32
  %88 = getelementptr inbounds i8, ptr %24, i64 20
  %89 = load i8, ptr %88, align 4
  %90 = zext i8 %89 to i32
  %91 = getelementptr inbounds i8, ptr %24, i64 21
  %92 = load i8, ptr %91, align 1
  %93 = zext i8 %92 to i32
  %94 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %82, ptr noundef nonnull @.str.65, i32 noundef %84, i32 noundef %87, i32 noundef %90, i32 noundef %93) #60
  br label %168

95:                                               ; preds = %80, %73, %30
  %96 = call fastcc i32 @find_aiff_chunk(ptr noundef %0, ptr noundef nonnull @.str.66, ptr noundef nonnull %5) #56, !range !36
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %98, label %101

98:                                               ; preds = %95
  %99 = load ptr, ptr @stderr, align 8
  %100 = tail call i64 @fwrite(ptr nonnull @.str.67, i64 42, i64 1, ptr %99) #58
  br label %168

101:                                              ; preds = %95
  %102 = load i32, ptr %5, align 4
  %103 = icmp ult i32 %102, 8
  br i1 %103, label %104, label %107

104:                                              ; preds = %101
  %105 = load ptr, ptr @stderr, align 8
  %106 = tail call i64 @fwrite(ptr nonnull @.str.68, i64 45, i64 1, ptr %105) #58
  br label %168

107:                                              ; preds = %101
  %108 = call i64 @fread(ptr noundef nonnull %6, i64 noundef 1, i64 noundef 8, ptr noundef %0) #56
  %109 = icmp ult i64 %108, 8
  br i1 %109, label %110, label %113

110:                                              ; preds = %107
  %111 = load ptr, ptr @stderr, align 8
  %112 = tail call i64 @fwrite(ptr nonnull @.str.69, i64 44, i64 1, ptr %111) #58
  br label %168

113:                                              ; preds = %107
  %114 = load i8, ptr %6, align 1
  %115 = zext i8 %114 to i32
  %116 = shl nuw i32 %115, 24
  %117 = getelementptr inbounds [8 x i8], ptr %6, i64 0, i64 1
  %118 = load i8, ptr %117, align 1
  %119 = zext i8 %118 to i32
  %120 = shl nuw nsw i32 %119, 16
  %121 = or i32 %120, %116
  %122 = getelementptr inbounds [8 x i8], ptr %6, i64 0, i64 2
  %123 = load i8, ptr %122, align 1
  %124 = zext i8 %123 to i32
  %125 = shl nuw nsw i32 %124, 8
  %126 = or i32 %121, %125
  %127 = getelementptr inbounds [8 x i8], ptr %6, i64 0, i64 3
  %128 = load i8, ptr %127, align 1
  %129 = zext i8 %128 to i32
  %130 = or i32 %126, %129
  %131 = getelementptr inbounds i8, ptr %6, i64 4
  %132 = load i8, ptr %131, align 1
  %133 = zext i8 %132 to i32
  %134 = shl nuw i32 %133, 24
  %135 = getelementptr inbounds i8, ptr %6, i64 5
  %136 = load i8, ptr %135, align 1
  %137 = zext i8 %136 to i32
  %138 = shl nuw nsw i32 %137, 16
  %139 = or i32 %138, %134
  %140 = getelementptr inbounds i8, ptr %6, i64 6
  %141 = load i8, ptr %140, align 1
  %142 = zext i8 %141 to i32
  %143 = shl nuw nsw i32 %142, 8
  %144 = or i32 %139, %143
  %145 = getelementptr inbounds i8, ptr %6, i64 7
  %146 = load i8, ptr %145, align 1
  %147 = zext i8 %146 to i32
  %148 = or i32 %144, %147
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %150, label %165

150:                                              ; preds = %113
  switch i16 %63, label %165 [
    i16 16, label %151
    i16 8, label %151
  ]

151:                                              ; preds = %150, %150
  %152 = sext i32 %66 to i64
  %153 = getelementptr inbounds %struct.oe_enc_opt, ptr %1, i64 0, i32 10
  store i64 %152, ptr %153, align 8
  %154 = sext i16 %37 to i32
  %155 = getelementptr inbounds %struct.oe_enc_opt, ptr %1, i64 0, i32 9
  store i32 %154, ptr %155, align 8
  %156 = getelementptr inbounds %struct.oe_enc_opt, ptr %1, i64 0, i32 2
  store ptr @wav_read, ptr %156, align 8
  %157 = sext i32 %55 to i64
  %158 = getelementptr inbounds %struct.oe_enc_opt, ptr %1, i64 0, i32 8
  store i64 %157, ptr %158, align 8
  %159 = getelementptr inbounds %struct.wavfile, ptr %7, i64 0, i32 4
  store ptr %0, ptr %159, align 8
  %160 = getelementptr inbounds %struct.wavfile, ptr %7, i64 0, i32 3
  store i64 0, ptr %160, align 8
  store i16 %37, ptr %7, align 8
  %161 = getelementptr inbounds %struct.wavfile, ptr %7, i64 0, i32 1
  store i16 %63, ptr %161, align 2
  %162 = getelementptr inbounds %struct.wavfile, ptr %7, i64 0, i32 2
  store i64 %157, ptr %162, align 8
  %163 = getelementptr inbounds %struct.oe_enc_opt, ptr %1, i64 0, i32 7
  store ptr %7, ptr %163, align 8
  %164 = tail call fastcc i32 @seek_forward(ptr noundef %0, i32 noundef %130) #56, !range !36
  br label %168

165:                                              ; preds = %150, %113
  %166 = load ptr, ptr @stderr, align 8
  %167 = tail call i64 @fwrite(ptr nonnull @.str.70, i64 92, i64 1, ptr %166) #58
  br label %168

168:                                              ; preds = %165, %151, %110, %104, %98, %81, %70, %27, %19, %13
  %169 = phi i32 [ 0, %19 ], [ 0, %27 ], [ 0, %70 ], [ 0, %81 ], [ 0, %104 ], [ 0, %110 ], [ 1, %151 ], [ 0, %165 ], [ 0, %98 ], [ 0, %13 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #55
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5) #55
  ret i32 %169
}

; Function Attrs: nofree nounwind optsize uwtable
define internal fastcc i32 @find_aiff_chunk(ptr nocapture noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef writeonly %2) unnamed_addr #3 {
  %4 = alloca [8 x i8], align 1
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #55
  %5 = getelementptr inbounds i8, ptr %4, i64 4
  %6 = getelementptr inbounds i8, ptr %4, i64 5
  %7 = getelementptr inbounds i8, ptr %4, i64 6
  %8 = getelementptr inbounds i8, ptr %4, i64 7
  br label %9

9:                                                ; preds = %37, %3
  %10 = call i64 @fread(ptr noundef nonnull %4, i64 noundef 1, i64 noundef 8, ptr noundef %0) #56
  %11 = icmp ult i64 %10, 8
  br i1 %11, label %12, label %15

12:                                               ; preds = %9
  %13 = load ptr, ptr @stderr, align 8
  %14 = tail call i64 @fwrite(ptr nonnull @.str.174, i64 38, i64 1, ptr %13) #58
  br label %41

15:                                               ; preds = %9
  %16 = load i8, ptr %5, align 1
  %17 = zext i8 %16 to i32
  %18 = shl nuw i32 %17, 24
  %19 = load i8, ptr %6, align 1
  %20 = zext i8 %19 to i32
  %21 = shl nuw nsw i32 %20, 16
  %22 = or i32 %21, %18
  %23 = load i8, ptr %7, align 1
  %24 = zext i8 %23 to i32
  %25 = shl nuw nsw i32 %24, 8
  %26 = or i32 %22, %25
  %27 = load i8, ptr %8, align 1
  %28 = zext i8 %27 to i32
  %29 = or i32 %26, %28
  store i32 %29, ptr %2, align 4
  %30 = call i32 @bcmp(ptr noundef nonnull dereferenceable(4) %4, ptr noundef nonnull dereferenceable(4) %1, i64 4)
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %41, label %32

32:                                               ; preds = %15
  %33 = and i32 %28, 1
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %37, label %35

35:                                               ; preds = %32
  %36 = add i32 %29, 1
  store i32 %36, ptr %2, align 4
  br label %37

37:                                               ; preds = %35, %32
  %38 = phi i32 [ %36, %35 ], [ %29, %32 ]
  %39 = tail call fastcc i32 @seek_forward(ptr noundef %0, i32 noundef %38) #56, !range !36
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %9

41:                                               ; preds = %37, %15, %12
  %42 = phi i32 [ 0, %12 ], [ 1, %15 ], [ 0, %37 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #55
  ret i32 %42
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn uwtable
define internal double @read_IEEE80(ptr nocapture noundef readonly %0) #49 {
  %2 = load i8, ptr %0, align 1
  %3 = zext i8 %2 to i32
  %4 = shl nuw nsw i32 %3, 8
  %5 = and i32 %4, 32512
  %6 = getelementptr inbounds i8, ptr %0, i64 1
  %7 = load i8, ptr %6, align 1
  %8 = zext i8 %7 to i32
  %9 = or i32 %5, %8
  %10 = getelementptr inbounds i8, ptr %0, i64 2
  %11 = load i8, ptr %10, align 1
  %12 = icmp eq i32 %9, 32767
  br i1 %12, label %13, label %18

13:                                               ; preds = %1
  %14 = icmp sgt i8 %11, -1
  br i1 %14, label %15, label %59

15:                                               ; preds = %13
  %16 = icmp eq i8 %2, 0
  %17 = select i1 %16, double 0x7FF0000000000000, double 0xFFF0000000000000
  br label %59

18:                                               ; preds = %1
  %19 = zext i8 %11 to i64
  %20 = shl nuw nsw i64 %19, 24
  %21 = getelementptr inbounds i8, ptr %0, i64 3
  %22 = load i8, ptr %21, align 1
  %23 = zext i8 %22 to i64
  %24 = shl nuw nsw i64 %23, 16
  %25 = or i64 %24, %20
  %26 = getelementptr inbounds i8, ptr %0, i64 4
  %27 = load i8, ptr %26, align 1
  %28 = zext i8 %27 to i64
  %29 = shl nuw nsw i64 %28, 8
  %30 = or i64 %25, %29
  %31 = getelementptr inbounds i8, ptr %0, i64 5
  %32 = load i8, ptr %31, align 1
  %33 = zext i8 %32 to i64
  %34 = or i64 %30, %33
  %35 = uitofp i64 %34 to double
  %36 = tail call double @ldexp(double noundef %35, i32 noundef 32) #59
  %37 = getelementptr inbounds i8, ptr %0, i64 6
  %38 = load i8, ptr %37, align 1
  %39 = zext i8 %38 to i32
  %40 = shl nuw i32 %39, 24
  %41 = getelementptr inbounds i8, ptr %0, i64 7
  %42 = load i8, ptr %41, align 1
  %43 = zext i8 %42 to i32
  %44 = shl nuw nsw i32 %43, 16
  %45 = or i32 %44, %40
  %46 = getelementptr inbounds i8, ptr %0, i64 8
  %47 = load i8, ptr %46, align 1
  %48 = zext i8 %47 to i32
  %49 = shl nuw nsw i32 %48, 8
  %50 = or i32 %45, %49
  %51 = getelementptr inbounds i8, ptr %0, i64 9
  %52 = load i8, ptr %51, align 1
  %53 = zext i8 %52 to i32
  %54 = or i32 %50, %53
  %55 = sitofp i32 %54 to double
  %56 = fadd double %36, %55
  %57 = add nsw i32 %9, -16446
  %58 = tail call double @ldexp(double noundef %56, i32 noundef %57) #59
  br label %59

59:                                               ; preds = %18, %15, %13
  %60 = phi double [ %58, %18 ], [ 0x7FF0000000000000, %13 ], [ %17, %15 ]
  ret double %60
}

; Function Attrs: nofree nounwind willreturn memory(argmem: read)
declare i32 @bcmp(ptr nocapture, ptr nocapture, i64) local_unnamed_addr #53

; Function Attrs: nofree nounwind optsize uwtable
define internal fastcc i32 @seek_forward(ptr nocapture noundef %0, i32 noundef %1) unnamed_addr #3 {
  %3 = alloca [1024 x i8], align 16
  %4 = sext i32 %1 to i64
  %5 = tail call i32 @fseek(ptr noundef %0, i64 noundef %4, i32 noundef 1) #56
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %21, label %7

7:                                                ; preds = %2
  call void @llvm.lifetime.start.p0(i64 1024, ptr nonnull %3) #55
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %13, label %12

9:                                                ; preds = %13
  %10 = sub nsw i32 %14, %18
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %13, label %12, !llvm.loop !497

12:                                               ; preds = %9, %7
  call void @llvm.lifetime.end.p0(i64 1024, ptr nonnull %3) #55
  br label %21

13:                                               ; preds = %9, %7
  %14 = phi i32 [ %10, %9 ], [ %1, %7 ]
  %15 = tail call i32 @llvm.smin.i32(i32 %14, i32 1024)
  %16 = zext i32 %15 to i64
  %17 = call i64 @fread(ptr noundef nonnull %3, i64 noundef 1, i64 noundef %16, ptr noundef %0) #56
  %18 = trunc i64 %17 to i32
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %9

20:                                               ; preds = %13
  call void @llvm.lifetime.end.p0(i64 1024, ptr nonnull %3) #55
  br label %21

21:                                               ; preds = %20, %12, %2
  %22 = phi i32 [ 0, %20 ], [ 1, %12 ], [ 1, %2 ]
  ret i32 %22
}

; Function Attrs: nofree nounwind optsize
declare noundef i32 @fseek(ptr nocapture noundef, i64 noundef, i32 noundef) local_unnamed_addr #5

; Function Attrs: nofree nounwind optsize uwtable
define internal fastcc i32 @find_wav_chunk(ptr nocapture noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef %2) unnamed_addr #3 {
  %4 = alloca [8 x i8], align 1
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #55
  %5 = getelementptr inbounds i8, ptr %4, i64 4
  %6 = getelementptr inbounds i8, ptr %4, i64 6
  %7 = getelementptr inbounds i8, ptr %4, i64 5
  br label %8

8:                                                ; preds = %30, %3
  %9 = call i64 @fread(ptr noundef nonnull %4, i64 noundef 1, i64 noundef 8, ptr noundef %0) #56
  %10 = icmp ult i64 %9, 8
  br i1 %10, label %11, label %14

11:                                               ; preds = %8
  %12 = load ptr, ptr @stderr, align 8
  %13 = call i64 @fwrite(ptr nonnull @.str.76, i64 46, i64 1, ptr %12) #58
  br label %36

14:                                               ; preds = %8
  %15 = call i32 @bcmp(ptr noundef nonnull dereferenceable(4) %4, ptr noundef nonnull dereferenceable(4) %1, i64 4)
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %34, label %17

17:                                               ; preds = %14
  %18 = load i16, ptr %6, align 1
  %19 = zext i16 %18 to i32
  %20 = shl nuw i32 %19, 16
  %21 = load i8, ptr %7, align 1
  %22 = zext i8 %21 to i32
  %23 = shl nuw nsw i32 %22, 8
  %24 = or i32 %23, %20
  %25 = load i8, ptr %5, align 1
  %26 = zext i8 %25 to i32
  %27 = or i32 %24, %26
  store i32 %27, ptr %2, align 4
  %28 = call fastcc i32 @seek_forward(ptr noundef %0, i32 noundef %27) #56, !range !36
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %36, label %30

30:                                               ; preds = %17
  store i8 0, ptr %5, align 1
  %31 = load ptr, ptr @stderr, align 8
  %32 = load i32, ptr %2, align 4
  %33 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %31, ptr noundef nonnull @.str.175, ptr noundef nonnull %4, i32 noundef %32) #60
  br label %8

34:                                               ; preds = %14
  %35 = load i32, ptr %5, align 1
  store i32 %35, ptr %2, align 4
  br label %36

36:                                               ; preds = %34, %17, %11
  %37 = phi i32 [ 0, %11 ], [ 1, %34 ], [ 0, %17 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #55
  ret i32 %37
}

; Function Attrs: nofree nounwind optsize uwtable
define internal i64 @wav_ieee_read(ptr nocapture noundef %0, ptr nocapture noundef readonly %1, i32 noundef %2) #3 {
  %4 = shl nsw i32 %2, 2
  %5 = load i16, ptr %0, align 8
  %6 = sext i16 %5 to i32
  %7 = mul nsw i32 %4, %6
  %8 = sext i32 %7 to i64
  %9 = alloca i8, i64 %8, align 16
  %10 = getelementptr inbounds %struct.wavfile, ptr %0, i64 0, i32 4
  %11 = load ptr, ptr %10, align 8
  %12 = call i64 @fread(ptr noundef nonnull %9, i64 noundef 1, i64 noundef %8, ptr noundef %11) #56
  %13 = getelementptr inbounds %struct.wavfile, ptr %0, i64 0, i32 2
  %14 = load i64, ptr %13, align 8
  %15 = icmp eq i64 %14, 0
  %16 = load i16, ptr %0, align 8
  %17 = getelementptr inbounds %struct.wavfile, ptr %0, i64 0, i32 3
  %18 = load i64, ptr %17, align 8
  %19 = sext i16 %16 to i32
  %20 = shl nsw i32 %19, 2
  %21 = sext i32 %20 to i64
  br i1 %15, label %29, label %22

22:                                               ; preds = %3
  %23 = sdiv i64 %12, %21
  %24 = add nsw i64 %23, %18
  %25 = icmp sgt i64 %24, %14
  br i1 %25, label %26, label %29

26:                                               ; preds = %22
  %27 = sub nsw i64 %14, %18
  %28 = mul nsw i64 %27, %21
  br label %29

29:                                               ; preds = %26, %22, %3
  %30 = phi i64 [ %28, %26 ], [ %12, %22 ], [ %12, %3 ]
  %31 = sdiv i64 %30, %21
  %32 = getelementptr inbounds %struct.wavfile, ptr %0, i64 0, i32 3
  %33 = add nsw i64 %18, %31
  store i64 %33, ptr %32, align 8
  %34 = icmp sgt i64 %31, 0
  br i1 %34, label %35, label %60

35:                                               ; preds = %56, %29
  %36 = phi i16 [ %57, %56 ], [ %16, %29 ]
  %37 = phi i64 [ %58, %56 ], [ 0, %29 ]
  %38 = icmp sgt i16 %36, 0
  br i1 %38, label %39, label %56

39:                                               ; preds = %39, %35
  %40 = phi i64 [ %52, %39 ], [ 0, %35 ]
  %41 = phi i16 [ %53, %39 ], [ %36, %35 ]
  %42 = sext i16 %41 to i64
  %43 = mul i64 %37, %42
  %44 = add i64 %43, %40
  %45 = shl i64 %44, 32
  %46 = ashr exact i64 %45, 32
  %47 = getelementptr inbounds float, ptr %9, i64 %46
  %48 = load float, ptr %47, align 4
  %49 = getelementptr inbounds ptr, ptr %1, i64 %40
  %50 = load ptr, ptr %49, align 8
  %51 = getelementptr inbounds float, ptr %50, i64 %37
  store float %48, ptr %51, align 4
  %52 = add nuw nsw i64 %40, 1
  %53 = load i16, ptr %0, align 8
  %54 = sext i16 %53 to i64
  %55 = icmp slt i64 %52, %54
  br i1 %55, label %39, label %56, !llvm.loop !498

56:                                               ; preds = %39, %35
  %57 = phi i16 [ %36, %35 ], [ %53, %39 ]
  %58 = add nuw nsw i64 %37, 1
  %59 = icmp eq i64 %58, %31
  br i1 %59, label %60, label %35, !llvm.loop !499

60:                                               ; preds = %56, %29
  ret i64 %31
}

; Function Attrs: nofree nounwind optsize
declare noundef i64 @ftell(ptr nocapture noundef) #5

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: readwrite)
declare ptr @strcpy(ptr noalias noundef returned writeonly, ptr noalias nocapture noundef readonly) local_unnamed_addr #18

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: readwrite)
declare ptr @strcat(ptr noalias noundef returned, ptr noalias nocapture noundef readonly) local_unnamed_addr #18

; Function Attrs: nofree nounwind optsize uwtable
define internal fastcc void @print_brconstraints(i32 noundef %0, i32 noundef %1) unnamed_addr #3 {
  %3 = icmp sgt i32 %0, 0
  %4 = icmp sgt i32 %1, 0
  %5 = and i1 %3, %4
  %6 = load ptr, ptr @stderr, align 8
  br i1 %5, label %7, label %9

7:                                                ; preds = %2
  %8 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %6, ptr noundef nonnull @.str.193, i32 noundef %0, i32 noundef %1) #60
  br label %17

9:                                                ; preds = %2
  br i1 %3, label %10, label %12

10:                                               ; preds = %9
  %11 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %6, ptr noundef nonnull @.str.194, i32 noundef %0) #60
  br label %17

12:                                               ; preds = %9
  br i1 %4, label %13, label %15

13:                                               ; preds = %12
  %14 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %6, ptr noundef nonnull @.str.195, i32 noundef %1) #60
  br label %17

15:                                               ; preds = %12
  %16 = tail call i64 @fwrite(ptr nonnull @.str.196, i64 15, i64 1, ptr %6) #58
  br label %17

17:                                               ; preds = %15, %13, %10, %7
  ret void
}

; Function Attrs: nofree nounwind optsize memory(read)
declare noundef ptr @getenv(ptr nocapture noundef) local_unnamed_addr #54

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal fastcc void @exchange(ptr nocapture noundef %0) unnamed_addr #20 {
  %2 = load i32, ptr @first_nonopt, align 4
  %3 = load i32, ptr @last_nonopt, align 4
  %4 = load i32, ptr @optind, align 4
  %5 = icmp sgt i32 %4, %3
  %6 = icmp sgt i32 %3, %2
  %7 = select i1 %5, i1 %6, i1 false
  br i1 %7, label %8, label %56

8:                                                ; preds = %1
  %9 = sext i32 %3 to i64
  br label %10

10:                                               ; preds = %50, %8
  %11 = phi i32 [ %52, %50 ], [ %2, %8 ]
  %12 = phi i32 [ %51, %50 ], [ %4, %8 ]
  %13 = sub nsw i32 %12, %3
  %14 = sub nsw i32 %3, %11
  %15 = icmp sgt i32 %13, %14
  br i1 %15, label %21, label %16

16:                                               ; preds = %10
  %17 = icmp sgt i32 %13, 0
  br i1 %17, label %18, label %48

18:                                               ; preds = %16
  %19 = sext i32 %11 to i64
  %20 = zext i32 %13 to i64
  br label %38

21:                                               ; preds = %10
  %22 = icmp sgt i32 %14, 0
  %23 = sub i32 %12, %14
  br i1 %22, label %24, label %50

24:                                               ; preds = %21
  %25 = sext i32 %11 to i64
  %26 = sext i32 %23 to i64
  %27 = zext i32 %14 to i64
  br label %28

28:                                               ; preds = %28, %24
  %29 = phi i64 [ 0, %24 ], [ %36, %28 ]
  %30 = add nsw i64 %29, %25
  %31 = getelementptr inbounds ptr, ptr %0, i64 %30
  %32 = load ptr, ptr %31, align 8
  %33 = add nsw i64 %29, %26
  %34 = getelementptr inbounds ptr, ptr %0, i64 %33
  %35 = load ptr, ptr %34, align 8
  store ptr %35, ptr %31, align 8
  store ptr %32, ptr %34, align 8
  %36 = add nuw nsw i64 %29, 1
  %37 = icmp eq i64 %36, %27
  br i1 %37, label %50, label %28, !llvm.loop !500

38:                                               ; preds = %38, %18
  %39 = phi i64 [ 0, %18 ], [ %46, %38 ]
  %40 = add nsw i64 %39, %19
  %41 = getelementptr inbounds ptr, ptr %0, i64 %40
  %42 = load ptr, ptr %41, align 8
  %43 = add nsw i64 %39, %9
  %44 = getelementptr inbounds ptr, ptr %0, i64 %43
  %45 = load ptr, ptr %44, align 8
  store ptr %45, ptr %41, align 8
  store ptr %42, ptr %44, align 8
  %46 = add nuw nsw i64 %39, 1
  %47 = icmp eq i64 %46, %20
  br i1 %47, label %48, label %38, !llvm.loop !501

48:                                               ; preds = %38, %16
  %49 = add nsw i32 %11, %13
  br label %50

50:                                               ; preds = %48, %28, %21
  %51 = phi i32 [ %12, %48 ], [ %23, %21 ], [ %23, %28 ]
  %52 = phi i32 [ %49, %48 ], [ %11, %21 ], [ %11, %28 ]
  %53 = icmp sgt i32 %51, %3
  %54 = icmp sgt i32 %3, %52
  %55 = select i1 %53, i1 %54, i1 false
  br i1 %55, label %10, label %56, !llvm.loop !502

56:                                               ; preds = %50, %1
  %57 = sub i32 %2, %3
  %58 = add i32 %57, %4
  store i32 %58, ptr @first_nonopt, align 4
  store i32 %4, ptr @last_nonopt, align 4
  ret void
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: read)
declare i32 @strncmp(ptr nocapture noundef, ptr nocapture noundef, i64 noundef) local_unnamed_addr #4

; Function Attrs: nofree nounwind optsize uwtable
define dso_local i32 @getopt(i32 noundef %0, ptr nocapture noundef nonnull %1, ptr noundef nonnull %2) #3 {
  %4 = tail call i32 @_getopt_internal(i32 noundef %0, ptr noundef nonnull %1, ptr noundef nonnull %2, ptr noundef null, ptr noundef null, i32 noundef 0) #56
  ret i32 %4
}

; Function Attrs: nofree nounwind optsize uwtable
define dso_local i32 @getopt_long(i32 noundef %0, ptr nocapture noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4) #3 {
  %6 = tail call i32 @_getopt_internal(i32 noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, i32 noundef 0) #56
  ret i32 %6
}

; Function Attrs: nofree nounwind optsize uwtable
define dso_local i32 @getopt_long_only(i32 noundef %0, ptr nocapture noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4) #3 {
  %6 = tail call i32 @_getopt_internal(i32 noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, i32 noundef 1) #56
  ret i32 %6
}

attributes #0 = { nounwind optsize uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #3 = { nofree nounwind optsize uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { mustprogress nofree nounwind optsize willreturn memory(argmem: read) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nofree nounwind optsize "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { mustprogress nofree nounwind optsize willreturn memory(read) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { mustprogress nofree nounwind optsize willreturn memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { mustprogress nounwind optsize willreturn allockind("realloc") allocsize(1) memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #9 = { noreturn nounwind optsize "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #10 = { mustprogress nounwind optsize willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #11 = { nounwind optsize "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #12 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #13 = { mustprogress nounwind optsize willreturn uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #14 = { mustprogress nofree nosync nounwind optsize willreturn memory(none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #15 = { mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #16 = { mustprogress nofree nounwind optsize willreturn allockind("alloc,zeroed") allocsize(0,1) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #17 = { nofree nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #18 = { mustprogress nofree nounwind optsize willreturn memory(argmem: readwrite) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #19 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #20 = { nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #21 = { nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #22 = { mustprogress nofree nounwind optsize willreturn memory(write, argmem: readwrite, inaccessiblemem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #23 = { mustprogress nofree nounwind optsize willreturn memory(argmem: write, inaccessiblemem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #24 = { mustprogress nounwind optsize willreturn memory(argmem: readwrite, inaccessiblemem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #25 = { inlinehint nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #26 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #27 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #28 = { mustprogress nofree nounwind optsize willreturn memory(write) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #29 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, argmem: readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #30 = { nofree nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #31 = { nofree optsize "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #32 = { mustprogress nofree nounwind optsize willreturn memory(write, argmem: read, inaccessiblemem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #33 = { nofree nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #34 = { mustprogress nofree nounwind optsize willreturn memory(argmem: write) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #35 = { nofree nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #36 = { nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #37 = { nofree nounwind optsize memory(readwrite, inaccessiblemem: write) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #38 = { nofree norecurse nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #39 = { nofree nounwind optsize memory(write, argmem: readwrite, inaccessiblemem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #40 = { nofree nosync nounwind optsize memory(argmem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #41 = { mustprogress nofree nosync nounwind optsize willreturn memory(read, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #42 = { nofree norecurse nosync nounwind optsize memory(argmem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #43 = { nofree nounwind optsize memory(write, argmem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #44 = { mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #45 = { nofree nounwind optsize memory(write, inaccessiblemem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #46 = { nofree nounwind optsize memory(readwrite, argmem: write) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #47 = { nounwind optsize memory(readwrite, argmem: read) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #48 = { mustprogress nofree nounwind optsize willreturn "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #49 = { mustprogress nofree nounwind optsize willreturn uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #50 = { nofree nounwind }
attributes #51 = { nocallback nofree nosync nounwind willreturn }
attributes #52 = { mustprogress nofree nounwind optsize willreturn memory(argmem: read) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #53 = { nofree nounwind willreturn memory(argmem: read) }
attributes #54 = { nofree nounwind optsize memory(read) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #55 = { nounwind }
attributes #56 = { optsize }
attributes #57 = { nounwind optsize willreturn memory(read) }
attributes #58 = { cold }
attributes #59 = { nounwind optsize }
attributes #60 = { cold optsize }
attributes #61 = { nounwind optsize allocsize(1) }
attributes #62 = { noreturn nounwind optsize }
attributes #63 = { nounwind optsize willreturn memory(none) }
attributes #64 = { nounwind optsize allocsize(0) }
attributes #65 = { nounwind optsize allocsize(0,1) }

!llvm.ident = !{!0}
!llvm.module.flags = !{!1, !2, !3, !4, !5, !6}

!0 = !{!"clang version 17.0.6 (https://github.com/Casperento/llvm-project.git 9b0073551ece0d22bf3378af2b03e456a26031b6)"}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 8, !"PIC Level", i32 2}
!3 = !{i32 7, !"PIE Level", i32 2}
!4 = !{i32 7, !"uwtable", i32 2}
!5 = !{i32 1, !"ThinLTO", i32 0}
!6 = !{i32 1, !"EnableSplitLTOUnit", i32 1}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.mustprogress"}
!9 = distinct !{!9, !8}
!10 = distinct !{!10, !8}
!11 = distinct !{!11, !8}
!12 = !{i32 -1, i32 1}
!13 = distinct !{!13, !8}
!14 = distinct !{!14, !8}
!15 = distinct !{!15, !8}
!16 = distinct !{!16, !8}
!17 = distinct !{!17, !8}
!18 = distinct !{!18, !8}
!19 = distinct !{!19, !8}
!20 = distinct !{!20, !8}
!21 = distinct !{!21, !8}
!22 = distinct !{!22, !8}
!23 = distinct !{!23, !8}
!24 = distinct !{!24, !8}
!25 = distinct !{!25, !8}
!26 = distinct !{!26, !8}
!27 = distinct !{!27, !8}
!28 = distinct !{!28, !8}
!29 = distinct !{!29, !8}
!30 = distinct !{!30, !8}
!31 = distinct !{!31, !8}
!32 = distinct !{!32, !8}
!33 = distinct !{!33, !8}
!34 = !{i32 -131, i32 1}
!35 = distinct !{!35, !8}
!36 = !{i32 0, i32 2}
!37 = !{i32 -130, i32 1}
!38 = distinct !{!38, !8}
!39 = distinct !{!39, !8}
!40 = distinct !{!40, !8}
!41 = distinct !{!41, !8}
!42 = distinct !{!42, !8}
!43 = distinct !{!43, !8}
!44 = distinct !{!44, !8}
!45 = distinct !{!45, !8}
!46 = distinct !{!46, !8}
!47 = distinct !{!47, !8}
!48 = distinct !{!48, !8}
!49 = distinct !{!49, !8}
!50 = distinct !{!50, !8}
!51 = distinct !{!51, !8}
!52 = distinct !{!52, !8}
!53 = distinct !{!53, !8}
!54 = distinct !{!54, !8}
!55 = distinct !{!55, !8}
!56 = distinct !{!56, !8}
!57 = distinct !{!57, !8}
!58 = distinct !{!58, !8}
!59 = distinct !{!59, !8}
!60 = distinct !{!60, !8}
!61 = distinct !{!61, !8}
!62 = distinct !{!62, !8}
!63 = distinct !{!63, !8}
!64 = distinct !{!64, !8}
!65 = distinct !{!65, !8}
!66 = distinct !{!66, !8}
!67 = distinct !{!67, !8}
!68 = distinct !{!68, !8}
!69 = distinct !{!69, !8}
!70 = distinct !{!70, !8}
!71 = distinct !{!71, !8}
!72 = distinct !{!72, !8}
!73 = distinct !{!73, !8}
!74 = distinct !{!74, !8}
!75 = distinct !{!75, !8}
!76 = distinct !{!76, !8}
!77 = distinct !{!77, !8}
!78 = distinct !{!78, !8}
!79 = distinct !{!79, !8}
!80 = distinct !{!80, !8}
!81 = distinct !{!81, !8}
!82 = distinct !{!82, !8}
!83 = distinct !{!83, !8}
!84 = distinct !{!84, !8}
!85 = distinct !{!85, !8}
!86 = distinct !{!86, !8}
!87 = distinct !{!87, !8}
!88 = distinct !{!88, !8}
!89 = distinct !{!89, !8}
!90 = distinct !{!90, !8}
!91 = distinct !{!91, !8}
!92 = distinct !{!92, !8}
!93 = distinct !{!93, !8}
!94 = distinct !{!94, !8}
!95 = distinct !{!95, !8}
!96 = distinct !{!96, !8}
!97 = distinct !{!97, !8}
!98 = distinct !{!98, !8}
!99 = distinct !{!99, !8}
!100 = distinct !{!100, !8}
!101 = distinct !{!101, !8}
!102 = distinct !{!102, !8}
!103 = distinct !{!103, !8}
!104 = distinct !{!104, !8}
!105 = distinct !{!105, !8}
!106 = distinct !{!106, !8}
!107 = distinct !{!107, !8}
!108 = distinct !{!108, !8}
!109 = distinct !{!109, !8}
!110 = distinct !{!110, !8}
!111 = distinct !{!111, !8}
!112 = distinct !{!112, !8}
!113 = distinct !{!113, !8}
!114 = distinct !{!114, !8}
!115 = distinct !{!115, !8}
!116 = distinct !{!116, !8}
!117 = distinct !{!117, !8}
!118 = distinct !{!118, !8}
!119 = distinct !{!119, !8}
!120 = distinct !{!120, !8}
!121 = distinct !{!121, !8}
!122 = distinct !{!122, !8}
!123 = distinct !{!123, !8}
!124 = distinct !{!124, !8}
!125 = distinct !{!125, !8}
!126 = distinct !{!126, !8}
!127 = distinct !{!127, !8}
!128 = distinct !{!128, !8}
!129 = distinct !{!129, !8}
!130 = !{i64 -1, i64 1}
!131 = distinct !{!131, !8}
!132 = distinct !{!132, !8}
!133 = distinct !{!133, !8}
!134 = distinct !{!134, !8}
!135 = distinct !{!135, !8}
!136 = distinct !{!136, !8}
!137 = distinct !{!137, !8}
!138 = distinct !{!138, !8}
!139 = distinct !{!139, !8}
!140 = distinct !{!140, !8}
!141 = distinct !{!141, !8}
!142 = distinct !{!142, !8}
!143 = distinct !{!143, !8}
!144 = distinct !{!144, !8}
!145 = distinct !{!145, !8}
!146 = distinct !{!146, !8}
!147 = distinct !{!147, !8}
!148 = distinct !{!148, !8}
!149 = distinct !{!149, !8}
!150 = distinct !{!150, !8}
!151 = distinct !{!151, !8}
!152 = distinct !{!152, !8}
!153 = distinct !{!153, !8}
!154 = distinct !{!154, !8}
!155 = distinct !{!155, !8}
!156 = distinct !{!156, !8}
!157 = distinct !{!157, !8}
!158 = distinct !{!158, !8}
!159 = distinct !{!159, !8}
!160 = distinct !{!160, !8}
!161 = distinct !{!161, !8}
!162 = distinct !{!162, !8}
!163 = distinct !{!163, !8}
!164 = distinct !{!164, !8}
!165 = distinct !{!165, !8}
!166 = distinct !{!166, !8}
!167 = !{ptr @vorbis_book_decodev_add, ptr @vorbis_book_decodevs_add}
!168 = distinct !{!168, !8}
!169 = distinct !{!169, !8}
!170 = distinct !{!170, !8}
!171 = distinct !{!171, !8}
!172 = distinct !{!172, !8}
!173 = distinct !{!173, !8}
!174 = distinct !{!174, !8}
!175 = distinct !{!175, !8}
!176 = distinct !{!176, !8}
!177 = distinct !{!177, !8}
!178 = distinct !{!178, !8}
!179 = distinct !{!179, !8}
!180 = distinct !{!180, !8}
!181 = distinct !{!181, !8}
!182 = distinct !{!182, !8}
!183 = distinct !{!183, !8}
!184 = distinct !{!184, !8}
!185 = distinct !{!185, !8}
!186 = distinct !{!186, !8}
!187 = distinct !{!187, !8, !188, !189}
!188 = !{!"llvm.loop.isvectorized", i32 1}
!189 = !{!"llvm.loop.unroll.runtime.disable"}
!190 = distinct !{!190, !8}
!191 = distinct !{!191, !8}
!192 = distinct !{!192, !8}
!193 = distinct !{!193, !8}
!194 = distinct !{!194, !8}
!195 = distinct !{!195, !8}
!196 = distinct !{!196, !8}
!197 = distinct !{!197, !8}
!198 = distinct !{!198, !8}
!199 = distinct !{!199, !8}
!200 = distinct !{!200, !8}
!201 = distinct !{!201, !8}
!202 = distinct !{!202, !8}
!203 = distinct !{!203, !8}
!204 = distinct !{!204, !8}
!205 = distinct !{!205, !8}
!206 = distinct !{!206, !8}
!207 = distinct !{!207, !8}
!208 = distinct !{!208, !8}
!209 = distinct !{!209, !8}
!210 = distinct !{!210, !8}
!211 = distinct !{!211, !8}
!212 = distinct !{!212, !8}
!213 = distinct !{!213, !8}
!214 = distinct !{!214, !8}
!215 = distinct !{!215, !8}
!216 = distinct !{!216, !8}
!217 = distinct !{!217, !8}
!218 = distinct !{!218, !8}
!219 = distinct !{!219, !8}
!220 = distinct !{!220, !8}
!221 = distinct !{!221, !8}
!222 = distinct !{!222, !8}
!223 = distinct !{!223, !8}
!224 = distinct !{!224, !8}
!225 = distinct !{!225, !8}
!226 = distinct !{!226, !8}
!227 = distinct !{!227, !8}
!228 = distinct !{!228, !8}
!229 = distinct !{!229, !8}
!230 = distinct !{!230, !8}
!231 = distinct !{!231, !8}
!232 = distinct !{!232, !8}
!233 = distinct !{!233, !8}
!234 = distinct !{!234, !8}
!235 = distinct !{!235, !8}
!236 = distinct !{!236, !8}
!237 = distinct !{!237, !8}
!238 = distinct !{!238, !8}
!239 = distinct !{!239, !8}
!240 = distinct !{!240, !8}
!241 = distinct !{!241, !8}
!242 = distinct !{!242, !8}
!243 = distinct !{!243, !8}
!244 = distinct !{!244, !8}
!245 = distinct !{!245, !8}
!246 = distinct !{!246, !8}
!247 = distinct !{!247, !8}
!248 = distinct !{!248, !8}
!249 = distinct !{!249, !8}
!250 = distinct !{!250, !8}
!251 = distinct !{!251, !8}
!252 = distinct !{!252, !8}
!253 = distinct !{!253, !8}
!254 = distinct !{!254, !8}
!255 = distinct !{!255, !8}
!256 = distinct !{!256, !8}
!257 = distinct !{!257, !8}
!258 = distinct !{!258, !8}
!259 = distinct !{!259, !8}
!260 = distinct !{!260, !8}
!261 = distinct !{!261, !8}
!262 = distinct !{!262, !8}
!263 = distinct !{!263, !8}
!264 = distinct !{!264, !8, !188, !189}
!265 = distinct !{!265, !8}
!266 = distinct !{!266, !8}
!267 = distinct !{!267, !8}
!268 = distinct !{!268, !8}
!269 = distinct !{!269, !8}
!270 = distinct !{!270, !8}
!271 = distinct !{!271, !8}
!272 = distinct !{!272, !8}
!273 = distinct !{!273, !8}
!274 = distinct !{!274, !8, !188, !189}
!275 = distinct !{!275, !8, !188, !189}
!276 = distinct !{!276, !8, !188, !189}
!277 = distinct !{!277, !8}
!278 = distinct !{!278, !8}
!279 = distinct !{!279, !8}
!280 = distinct !{!280, !8}
!281 = distinct !{!281, !8}
!282 = distinct !{!282, !8}
!283 = distinct !{!283, !8}
!284 = distinct !{!284, !8}
!285 = distinct !{!285, !8}
!286 = distinct !{!286, !8}
!287 = distinct !{!287, !8, !188, !189}
!288 = distinct !{!288, !8}
!289 = distinct !{!289, !8}
!290 = distinct !{!290, !8}
!291 = distinct !{!291, !8, !188, !189}
!292 = distinct !{!292, !8}
!293 = distinct !{!293, !8}
!294 = distinct !{!294, !8}
!295 = distinct !{!295, !8}
!296 = distinct !{!296, !8}
!297 = distinct !{!297, !8}
!298 = distinct !{!298, !8}
!299 = distinct !{!299, !8}
!300 = distinct !{!300, !8}
!301 = distinct !{!301, !8}
!302 = distinct !{!302, !8}
!303 = distinct !{!303, !8}
!304 = distinct !{!304, !8}
!305 = distinct !{!305, !8}
!306 = distinct !{!306, !8}
!307 = distinct !{!307, !8}
!308 = distinct !{!308, !8}
!309 = distinct !{!309, !8}
!310 = distinct !{!310, !8}
!311 = distinct !{!311, !8}
!312 = distinct !{!312, !8}
!313 = distinct !{!313, !8}
!314 = distinct !{!314, !8}
!315 = distinct !{!315, !8}
!316 = distinct !{!316, !8}
!317 = distinct !{!317, !8}
!318 = distinct !{!318, !8}
!319 = distinct !{!319, !8}
!320 = distinct !{!320, !8}
!321 = distinct !{!321, !8}
!322 = distinct !{!322, !8}
!323 = distinct !{!323, !8}
!324 = distinct !{!324, !8}
!325 = distinct !{!325, !8}
!326 = distinct !{!326, !8}
!327 = distinct !{!327, !8}
!328 = distinct !{!328, !8}
!329 = distinct !{!329, !8}
!330 = distinct !{!330, !8}
!331 = distinct !{!331, !8}
!332 = distinct !{!332, !8}
!333 = distinct !{!333, !8}
!334 = distinct !{!334, !8}
!335 = distinct !{!335, !8}
!336 = distinct !{!336, !8}
!337 = distinct !{!337, !8}
!338 = distinct !{!338, !8}
!339 = distinct !{!339, !8}
!340 = distinct !{!340, !8}
!341 = distinct !{!341, !8}
!342 = distinct !{!342, !8}
!343 = distinct !{!343, !8}
!344 = distinct !{!344, !8}
!345 = distinct !{!345, !8}
!346 = distinct !{!346, !8}
!347 = distinct !{!347, !8}
!348 = distinct !{!348, !8}
!349 = distinct !{!349, !8}
!350 = distinct !{!350, !8}
!351 = distinct !{!351, !8}
!352 = distinct !{!352, !8}
!353 = distinct !{!353, !8}
!354 = distinct !{!354, !8}
!355 = distinct !{!355, !8}
!356 = distinct !{!356, !8}
!357 = distinct !{!357, !8}
!358 = distinct !{!358, !8}
!359 = distinct !{!359, !8}
!360 = distinct !{!360, !8}
!361 = distinct !{!361, !8}
!362 = distinct !{!362, !8}
!363 = distinct !{!363, !8}
!364 = distinct !{!364, !8}
!365 = distinct !{!365, !8}
!366 = distinct !{!366, !8}
!367 = distinct !{!367, !8}
!368 = distinct !{!368, !8}
!369 = distinct !{!369, !8}
!370 = distinct !{!370, !8}
!371 = distinct !{!371, !8}
!372 = distinct !{!372, !8}
!373 = distinct !{!373, !8}
!374 = distinct !{!374, !8}
!375 = distinct !{!375, !8}
!376 = distinct !{!376, !8}
!377 = distinct !{!377, !8}
!378 = distinct !{!378, !8}
!379 = distinct !{!379, !8}
!380 = distinct !{!380, !8}
!381 = distinct !{!381, !8}
!382 = distinct !{!382, !8}
!383 = distinct !{!383, !8}
!384 = distinct !{!384, !8}
!385 = distinct !{!385, !8}
!386 = distinct !{!386, !8}
!387 = distinct !{!387, !8}
!388 = distinct !{!388, !8}
!389 = distinct !{!389, !8}
!390 = distinct !{!390, !8}
!391 = distinct !{!391, !8}
!392 = distinct !{!392, !8}
!393 = distinct !{!393, !8}
!394 = distinct !{!394, !8}
!395 = distinct !{!395, !8}
!396 = distinct !{!396, !8}
!397 = distinct !{!397, !8}
!398 = distinct !{!398, !8}
!399 = distinct !{!399, !8}
!400 = distinct !{!400, !8}
!401 = distinct !{!401, !8}
!402 = distinct !{!402, !8}
!403 = distinct !{!403, !8}
!404 = distinct !{!404, !8}
!405 = distinct !{!405, !8}
!406 = distinct !{!406, !8}
!407 = distinct !{!407, !8}
!408 = distinct !{!408, !8}
!409 = distinct !{!409, !8}
!410 = distinct !{!410, !8}
!411 = distinct !{!411, !8}
!412 = distinct !{!412, !8}
!413 = distinct !{!413, !8}
!414 = distinct !{!414, !8}
!415 = distinct !{!415, !8}
!416 = distinct !{!416, !8}
!417 = distinct !{!417, !8}
!418 = distinct !{!418, !8}
!419 = distinct !{!419, !8}
!420 = distinct !{!420, !8}
!421 = distinct !{!421, !8}
!422 = distinct !{!422, !8}
!423 = distinct !{!423, !8}
!424 = distinct !{!424, !8}
!425 = distinct !{!425, !8}
!426 = distinct !{!426, !8}
!427 = distinct !{!427, !8}
!428 = distinct !{!428, !8}
!429 = distinct !{!429, !8}
!430 = distinct !{!430, !8}
!431 = distinct !{!431, !8}
!432 = distinct !{!432, !8}
!433 = distinct !{!433, !8}
!434 = distinct !{!434, !8}
!435 = distinct !{!435, !8}
!436 = distinct !{!436, !8}
!437 = distinct !{!437, !8}
!438 = distinct !{!438, !8}
!439 = distinct !{!439, !8}
!440 = distinct !{!440, !8}
!441 = distinct !{!441, !8}
!442 = distinct !{!442, !8}
!443 = distinct !{!443, !8}
!444 = distinct !{!444, !8}
!445 = distinct !{!445, !8}
!446 = distinct !{!446, !8, !188, !189}
!447 = distinct !{!447, !8}
!448 = distinct !{!448, !8, !188, !189}
!449 = distinct !{!449, !8, !188, !189}
!450 = distinct !{!450, !8, !188, !189}
!451 = distinct !{!451, !8}
!452 = distinct !{!452, !8, !188, !189}
!453 = distinct !{!453, !8, !188, !189}
!454 = distinct !{!454, !8}
!455 = distinct !{!455, !8}
!456 = distinct !{!456, !8, !188, !189}
!457 = distinct !{!457, !8}
!458 = distinct !{!458, !8}
!459 = distinct !{!459, !8}
!460 = distinct !{!460, !8}
!461 = distinct !{!461, !8}
!462 = distinct !{!462, !8}
!463 = distinct !{!463, !8}
!464 = distinct !{!464, !8}
!465 = distinct !{!465, !8}
!466 = distinct !{!466, !8}
!467 = distinct !{!467, !8}
!468 = distinct !{!468, !8}
!469 = distinct !{!469, !8}
!470 = distinct !{!470, !8}
!471 = distinct !{!471, !8}
!472 = distinct !{!472, !8}
!473 = distinct !{!473, !8}
!474 = distinct !{!474, !8}
!475 = distinct !{!475, !8}
!476 = distinct !{!476, !8}
!477 = distinct !{!477, !8}
!478 = distinct !{!478, !8}
!479 = distinct !{!479, !8}
!480 = distinct !{!480, !8}
!481 = distinct !{!481, !8}
!482 = distinct !{!482, !8}
!483 = distinct !{!483, !8}
!484 = distinct !{!484, !8}
!485 = distinct !{!485, !8}
!486 = distinct !{!486, !8}
!487 = distinct !{!487, !8}
!488 = distinct !{!488, !8}
!489 = distinct !{!489, !8}
!490 = distinct !{!490, !8}
!491 = distinct !{!491, !8}
!492 = distinct !{!492, !8}
!493 = distinct !{!493, !8}
!494 = distinct !{!494, !8}
!495 = distinct !{!495, !8}
!496 = distinct !{!496, !8}
!497 = distinct !{!497, !8}
!498 = distinct !{!498, !8}
!499 = distinct !{!499, !8}
!500 = distinct !{!500, !8}
!501 = distinct !{!501, !8}
!502 = distinct !{!502, !8}

; ModuleID = '/src/llvm-test-suite/build/MultiSource/Benchmarks/MallocBench/espresso/espresso.e.bc'
source_filename = "ld-temp.o"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.anon = type { ptr, i32, i32, i32, i32 }
%struct.pla_types_struct = type { ptr, i32 }
%struct.anon.1 = type { ptr, ptr, i32 }
%struct.cdata_struct = type { ptr, ptr, ptr, ptr, i32, i32, i32 }
%struct.cube_struct = type { i32, i32, i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i32, i32, ptr, i32, i32 }
%struct.set_family = type { i32, i32, i32, i32, i32, ptr, ptr }
%struct.sm_col_struct = type { i32, i32, i32, ptr, ptr, ptr, ptr, ptr }
%struct.sm_element_struct = type { i32, i32, ptr, ptr, ptr, ptr, ptr }
%struct.PLA_t = type { ptr, ptr, ptr, ptr, i32, ptr, ptr, ptr, ptr, ptr }
%struct.symbolic_struct = type { ptr, i32, ptr, i32, ptr }
%struct.pair_struct = type { i32, ptr, ptr }
%struct.symbolic_list_struct = type { i32, i32, ptr }
%struct.symbolic_label_struct = type { ptr, ptr }
%struct.cost_struct = type { i32, i32, i32, i32, i32, i32 }
%struct.sm_matrix_struct = type { ptr, i32, ptr, i32, ptr, ptr, i32, ptr, ptr, i32, ptr }
%struct.stats_struct = type { i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32 }
%struct.rusage = type { %struct.timeval, %struct.timeval, %union.anon, %union.anon, %union.anon, %union.anon, %union.anon, %union.anon, %union.anon, %union.anon, %union.anon, %union.anon, %union.anon, %union.anon, %union.anon, %union.anon }
%struct.timeval = type { i64, i64 }
%union.anon = type { i64 }

@.str = private unnamed_addr constant [39 x i8] c"BINATE_SPLIT_SELECT: split against %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c"cl=%s\0Acr=%s\0A\00", align 1
@complement.compl_level = internal unnamed_addr global i32 0, align 4
@.str.2 = private unnamed_addr constant [11 x i8] c"COMPLEMENT\00", align 1
@.str.1.3 = private unnamed_addr constant [16 x i8] c"exit COMPLEMENT\00", align 1
@simp_comp.simplify_level = internal unnamed_addr global i32 0, align 4
@.str.2.4 = private unnamed_addr constant [9 x i8] c"SIMPCOMP\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"exit SIMPCOMP (new)\00", align 1
@.str.4 = private unnamed_addr constant [22 x i8] c"exit SIMPCOMP (compl)\00", align 1
@simplify.simplify_level = internal unnamed_addr global i32 0, align 4
@.str.5 = private unnamed_addr constant [9 x i8] c"SIMPLIFY\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"exit SIMPLIFY\00", align 1
@.str.7 = private unnamed_addr constant [32 x i8] c"compl_merge: left %d, right %d\0A\00", align 1
@.str.8 = private unnamed_addr constant [25 x i8] c"%s (cl)\0A%s (cr)\0ALeft is\0A\00", align 1
@.str.10 = private unnamed_addr constant [11 x i8] c"Result %d\0A\00", align 1
@str = private unnamed_addr constant [9 x i8] c"Right is\00", align 1
@.str.9 = private unnamed_addr constant [42 x i8] c"cube size is silly, error in .i/.o or .mv\00", align 1
@lineno = internal unnamed_addr global i32 0, align 4
@line_length_error = internal unnamed_addr global i1 false, align 4
@.str.11 = private unnamed_addr constant [20 x i8] c"product term(s) %s\0A\00", align 1
@.str.1.12 = private unnamed_addr constant [39 x i8] c"span more than one line (warning only)\00", align 1
@.str.2.13 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.6.14 = private unnamed_addr constant [70 x i8] c"declared size of variable %d (counting from variable 0) is too small\0A\00", align 1
@.str.7.15 = private unnamed_addr constant [35 x i8] c"(warning): input line #%d ignored\0A\00", align 1
@.str.9.16 = private unnamed_addr constant [18 x i8] c"extra .i ignored\0A\00", align 1
@.str.10.17 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.11.18 = private unnamed_addr constant [17 x i8] c"error reading .i\00", align 1
@.str.13 = private unnamed_addr constant [18 x i8] c"extra .o ignored\0A\00", align 1
@.str.14 = private unnamed_addr constant [27 x i8] c".o cannot appear before .i\00", align 1
@.str.15 = private unnamed_addr constant [17 x i8] c"error reading .o\00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c"mv\00", align 1
@.str.17 = private unnamed_addr constant [19 x i8] c"extra .mv ignored\0A\00", align 1
@.str.18 = private unnamed_addr constant [22 x i8] c"cannot mix .i and .mv\00", align 1
@.str.19 = private unnamed_addr constant [6 x i8] c"%d %d\00", align 1
@.str.20 = private unnamed_addr constant [18 x i8] c"error reading .mv\00", align 1
@.str.21 = private unnamed_addr constant [57 x i8] c"num_binary_vars (second field of .mv) cannot be negative\00", align 1
@.str.22 = private unnamed_addr constant [75 x i8] c"num_vars (1st field of .mv) must exceed num_binary_vars (2nd field of .mv)\00", align 1
@.str.26 = private unnamed_addr constant [5 x i8] c"kiss\00", align 1
@.str.27 = private unnamed_addr constant [5 x i8] c"type\00", align 1
@.str.28 = private unnamed_addr constant [30 x i8] c"unknown type in .type command\00", align 1
@.str.30 = private unnamed_addr constant [45 x i8] c"PLA size must be declared before .ilb or .ob\00", align 1
@.str.31 = private unnamed_addr constant [7 x i8] c"%s.bar\00", align 1
@.str.32 = private unnamed_addr constant [3 x i8] c"ob\00", align 1
@.str.33 = private unnamed_addr constant [6 x i8] c"label\00", align 1
@.str.34 = private unnamed_addr constant [40 x i8] c"PLA size must be declared before .label\00", align 1
@.str.35 = private unnamed_addr constant [7 x i8] c"var=%d\00", align 1
@.str.36 = private unnamed_addr constant [21 x i8] c"Error reading labels\00", align 1
@.str.37 = private unnamed_addr constant [9 x i8] c"symbolic\00", align 1
@.str.38 = private unnamed_addr constant [24 x i8] c"error reading .symbolic\00", align 1
@.str.39 = private unnamed_addr constant [16 x i8] c"symbolic-output\00", align 1
@.str.40 = private unnamed_addr constant [31 x i8] c"error reading .symbolic-output\00", align 1
@.str.41 = private unnamed_addr constant [6 x i8] c"phase\00", align 1
@.str.42 = private unnamed_addr constant [40 x i8] c"PLA size must be declared before .phase\00", align 1
@.str.43 = private unnamed_addr constant [22 x i8] c"extra .phase ignored\0A\00", align 1
@.str.44 = private unnamed_addr constant [41 x i8] c"only 0 or 1 allowed in phase description\00", align 1
@.str.45 = private unnamed_addr constant [5 x i8] c"pair\00", align 1
@.str.46 = private unnamed_addr constant [21 x i8] c"extra .pair ignored\0A\00", align 1
@.str.47 = private unnamed_addr constant [22 x i8] c"syntax error in .pair\00", align 1
@.str.48 = private unnamed_addr constant [6 x i8] c"%c%s \00", align 1
@.str.49 = private unnamed_addr constant [46 x i8] c" with .kiss option, third to last and second\0A\00", align 1
@.str.50 = private unnamed_addr constant [42 x i8] c"to last variables must be the same size.\0A\00", align 1
@.str.51 = private unnamed_addr constant [12 x i8] c"MAP-INPUT  \00", align 1
@.str.52 = private unnamed_addr constant [12 x i8] c"MAP-OUTPUT \00", align 1
@.str.53 = private unnamed_addr constant [12 x i8] c"# PLA is %s\00", align 1
@.str.54 = private unnamed_addr constant [32 x i8] c" with %d inputs and %d outputs\0A\00", align 1
@.str.55 = private unnamed_addr constant [40 x i8] c" with %d variables (%d binary, mv sizes\00", align 1
@.str.56 = private unnamed_addr constant [4 x i8] c" %d\00", align 1
@.str.58 = private unnamed_addr constant [22 x i8] c"# ON-set cost is  %s\0A\00", align 1
@.str.59 = private unnamed_addr constant [22 x i8] c"# OFF-set cost is %s\0A\00", align 1
@.str.60 = private unnamed_addr constant [22 x i8] c"# DC-set cost is  %s\0A\00", align 1
@.str.61 = private unnamed_addr constant [15 x i8] c"# phase is %s\0A\00", align 1
@.str.62 = private unnamed_addr constant [20 x i8] c"# two-bit decoders:\00", align 1
@.str.63 = private unnamed_addr constant [9 x i8] c" (%d %d)\00", align 1
@.str.65 = private unnamed_addr constant [13 x i8] c"# symbolic: \00", align 1
@.str.66 = private unnamed_addr constant [20 x i8] c"# output symbolic: \00", align 1
@.str.67 = private unnamed_addr constant [2 x i8] c";\00", align 1
@str.19 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.23 = private unnamed_addr constant [34 x i8] c"unreasonable expansion in unravel\00", align 1
@.str.1.24 = private unnamed_addr constant [39 x i8] c"COMPONENT_REDUCTION: split into %d %d\0A\00", align 1
@Fmin = internal unnamed_addr global ptr null, align 8
@phase = internal unnamed_addr global ptr null, align 8
@.str.2.26 = private unnamed_addr constant [17 x i8] c"ESPRESSO-POS(%d)\00", align 1
@.str.3.25 = private unnamed_addr constant [14 x i8] c"EXACT-POS(%d)\00", align 1
@.str.4.28 = private unnamed_addr constant [17 x i8] c"ESPRESSO-NEG(%d)\00", align 1
@.str.5.27 = private unnamed_addr constant [14 x i8] c"EXACT-NEG(%d)\00", align 1
@fmt_cost.s = internal global [200 x i8] zeroinitializer, align 16
@.str.29 = private unnamed_addr constant [25 x i8] c"c=%d in=%d out=%d tot=%d\00", align 1
@.str.1.30 = private unnamed_addr constant [24 x i8] c"c=%d in=%d mv=%d out=%d\00", align 1
@.str.2.33 = private unnamed_addr constant [17 x i8] c"# %s\09Cost is %s\0A\00", align 1
@.str.3.36 = private unnamed_addr constant [30 x i8] c"# %s\09Time was %s, cost is %s\0A\00", align 1
@.str.4.41 = private unnamed_addr constant [14 x i8] c"espresso: %s\0A\00", align 1
@.str.57 = private unnamed_addr constant [7 x i8] c".p %d\0A\00", align 1
@.str.1.58 = private unnamed_addr constant [3 x i8] c"01\00", align 1
@.str.2.59 = private unnamed_addr constant [4 x i8] c".e\0A\00", align 1
@.str.3.60 = private unnamed_addr constant [3 x i8] c"~1\00", align 1
@.str.4.61 = private unnamed_addr constant [3 x i8] c"~2\00", align 1
@.str.5.62 = private unnamed_addr constant [3 x i8] c"~0\00", align 1
@.str.6.63 = private unnamed_addr constant [6 x i8] c".end\0A\00", align 1
@.str.7.65 = private unnamed_addr constant [7 x i8] c".type \00", align 1
@.str.8.66 = private unnamed_addr constant [7 x i8] c".i %d\0A\00", align 1
@.str.9.67 = private unnamed_addr constant [7 x i8] c".o %d\0A\00", align 1
@.str.10.68 = private unnamed_addr constant [10 x i8] c".mv %d %d\00", align 1
@.str.11.69 = private unnamed_addr constant [4 x i8] c" %d\00", align 1
@.str.13.70 = private unnamed_addr constant [5 x i8] c".ilb\00", align 1
@.str.14.71 = private unnamed_addr constant [4 x i8] c" %s\00", align 1
@.str.15.72 = private unnamed_addr constant [4 x i8] c".ob\00", align 1
@.str.16.73 = private unnamed_addr constant [14 x i8] c".label var=%d\00", align 1
@.str.17.74 = private unnamed_addr constant [9 x i8] c"#.phase \00", align 1
@.str.19.86 = private unnamed_addr constant [8 x i8] c"\0A.group\00", align 1
@.str.20.87 = private unnamed_addr constant [3 x i8] c" (\00", align 1
@.str.21.88 = private unnamed_addr constant [4 x i8] c" \\\0A\00", align 1
@.str.22.80 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.24 = private unnamed_addr constant [7 x i8] c".label\00", align 1
@.str.25 = private unnamed_addr constant [55 x i8] c"Cannot have no-output function for EQNTOTT output mode\00", align 1
@.str.26.76 = private unnamed_addr constant [57 x i8] c"Must have binary-valued function for EQNTOTT output mode\00", align 1
@.str.27.77 = private unnamed_addr constant [6 x i8] c"%s = \00", align 1
@.str.29.78 = private unnamed_addr constant [5 x i8] c" | (\00", align 1
@.str.30.79 = private unnamed_addr constant [6 x i8] c"\0A    \00", align 1
@.str.34.64 = private unnamed_addr constant [5 x i8] c"?01-\00", align 1
@.str.35.85 = private unnamed_addr constant [3 x i8] c"1~\00", align 1
@pc1.s1 = internal global [256 x i8] zeroinitializer, align 16
@pc2.s2 = internal global [256 x i8] zeroinitializer, align 16
@.str.36.102 = private unnamed_addr constant [19 x i8] c"%s[%d]: ord(T)=%d\0A\00", align 1
@.str.37.103 = private unnamed_addr constant [13 x i8] c"cofactor=%s\0A\00", align 1
@.str.38.104 = private unnamed_addr constant [9 x i8] c"%4d. %s\0A\00", align 1
@.str.40.81 = private unnamed_addr constant [8 x i8] c"v%d.bar\00", align 1
@.str.41.82 = private unnamed_addr constant [4 x i8] c"v%d\00", align 1
@.str.42.83 = private unnamed_addr constant [7 x i8] c"v%d.%d\00", align 1
@.str.43.75 = private unnamed_addr constant [41 x i8] c"more than 1 part in a symbolic variable\0A\00", align 1
@.str.44.89 = private unnamed_addr constant [55 x i8] c"# Symbolic constraints for variable %d (Numeric form)\0A\00", align 1
@.str.45.90 = private unnamed_addr constant [29 x i8] c"# unconstrained weight = %d\0A\00", align 1
@.str.46.91 = private unnamed_addr constant [14 x i8] c"num_codes=%d\0A\00", align 1
@.str.47.92 = private unnamed_addr constant [12 x i8] c"weight=%d: \00", align 1
@.str.48.93 = private unnamed_addr constant [56 x i8] c"# Symbolic constraints for variable %d (Symbolic form)\0A\00", align 1
@.str.49.94 = private unnamed_addr constant [12 x i8] c"#   w=%d: (\00", align 1
@.str.50.95 = private unnamed_addr constant [4 x i8] c" )\0A\00", align 1
@str.84 = private unnamed_addr constant [17 x i8] c".option unmerged\00", align 1
@str.51 = private unnamed_addr constant [5 x i8] c".end\00", align 1
@str.52 = private unnamed_addr constant [3 x i8] c";\0A\00", align 1
@.str.109 = private unnamed_addr constant [48 x i8] c"# Outputs %d and %d (%s and %s) are equivalent\0A\00", align 1
@.str.1.110 = private unnamed_addr constant [52 x i8] c"# Outputs %d and NOT %d (%s and %s) are equivalent\0A\00", align 1
@.str.2.111 = private unnamed_addr constant [52 x i8] c"# Outputs NOT %d and %d (%s and %s) are equivalent\0A\00", align 1
@.str.3.112 = private unnamed_addr constant [56 x i8] c"# Outputs NOT %d and NOT %d (%s and %s) are equivalent\0A\00", align 1
@str.113 = private unnamed_addr constant [28 x i8] c"# No outputs are equivalent\00", align 1
@.str.116 = private unnamed_addr constant [12 x i8] c"SIMPLIFY   \00", align 1
@.str.1.117 = private unnamed_addr constant [12 x i8] c"SETUP      \00", align 1
@.str.2.118 = private unnamed_addr constant [12 x i8] c"ADJUST     \00", align 1
@.str.121 = private unnamed_addr constant [15 x i8] c"ESSENTIAL: %s\0A\00", align 1
@.str.124 = private unnamed_addr constant [12 x i8] c"PRIMES     \00", align 1
@.str.1.125 = private unnamed_addr constant [12 x i8] c"ESSENTIALS \00", align 1
@.str.2.126 = private unnamed_addr constant [12 x i8] c"PI-TABLE   \00", align 1
@.str.3.127 = private unnamed_addr constant [12 x i8] c"MINCOV     \00", align 1
@.str.4.128 = private unnamed_addr constant [8 x i8] c"(stdin)\00", align 1
@.str.5.129 = private unnamed_addr constant [10 x i8] c"%s.primes\00", align 1
@.str.6.130 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.7.131 = private unnamed_addr constant [29 x i8] c"espresso: Unable to open %s\0A\00", align 1
@.str.8.132 = private unnamed_addr constant [6 x i8] c"%s.pi\00", align 1
@.str.9.133 = private unnamed_addr constant [24 x i8] c"# Essential primes are\0A\00", align 1
@.str.10.134 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.11.135 = private unnamed_addr constant [32 x i8] c"# Totally redundant primes are\0A\00", align 1
@.str.12 = private unnamed_addr constant [34 x i8] c"# Partially redundant primes are\0A\00", align 1
@.str.138 = private unnamed_addr constant [25 x i8] c"EXPAND: %s (covered %d)\0A\00", align 1
@.str.1.139 = private unnamed_addr constant [18 x i8] c"\0AEXPAND1:    \09%s\0A\00", align 1
@.str.2.145 = private unnamed_addr constant [38 x i8] c"ON-set and OFF-set are not orthogonal\00", align 1
@.str.3.146 = private unnamed_addr constant [34 x i8] c"ESSEN_PARTS:\09RAISE=%s FREESET=%s\0A\00", align 1
@.str.4.144 = private unnamed_addr constant [36 x i8] c"ESSEN_RAISING:\09RAISE=%s FREESET=%s\0A\00", align 1
@.str.5.141 = private unnamed_addr constant [35 x i8] c"MOST_FREQUENT:\09best=%d FREESET=%s\0A\00", align 1
@.str.6.142 = private unnamed_addr constant [58 x i8] c"SELECT_FEASIBLE: started with %d pfcc, ended with %d fcc\0A\00", align 1
@.str.7.143 = private unnamed_addr constant [33 x i8] c"FEASIBLE:  \09RAISE=%s FREESET=%s\0A\00", align 1
@.str.8.140 = private unnamed_addr constant [33 x i8] c"MINCOV:    \09RAISE=%s FREESET=%s\0A\00", align 1
@.str.147 = private unnamed_addr constant [23 x i8] c"\0AEXPAND1_GASP:    \09%s\0A\00", align 1
@.str.1.154 = private unnamed_addr constant [10 x i8] c"NEWPRIMES\00", align 1
@.str.2.150 = private unnamed_addr constant [49 x i8] c"empty reduction in reduce_gasp, shouldn't happen\00", align 1
@.str.3.151 = private unnamed_addr constant [31 x i8] c"REDUCE_GASP: %s reduced to %s\0A\00", align 1
@espresso_getopt.scan = internal unnamed_addr global ptr null, align 8
@.str.155 = private unnamed_addr constant [23 x i8] c"%s: unknown option %c\0A\00", align 1
@.str.158 = private unnamed_addr constant [3 x i8] c"-f\00", align 1
@.str.1.159 = private unnamed_addr constant [3 x i8] c"-r\00", align 1
@.str.2.160 = private unnamed_addr constant [3 x i8] c"-d\00", align 1
@.str.3.161 = private unnamed_addr constant [4 x i8] c"-fd\00", align 1
@.str.4.162 = private unnamed_addr constant [4 x i8] c"-fr\00", align 1
@.str.5.163 = private unnamed_addr constant [4 x i8] c"-dr\00", align 1
@.str.6.164 = private unnamed_addr constant [5 x i8] c"-fdr\00", align 1
@.str.7.165 = private unnamed_addr constant [4 x i8] c"-fc\00", align 1
@.str.8.166 = private unnamed_addr constant [4 x i8] c"-rc\00", align 1
@.str.9.167 = private unnamed_addr constant [4 x i8] c"-dc\00", align 1
@.str.10.168 = private unnamed_addr constant [5 x i8] c"-fdc\00", align 1
@.str.11.169 = private unnamed_addr constant [5 x i8] c"-frc\00", align 1
@.str.12.170 = private unnamed_addr constant [5 x i8] c"-drc\00", align 1
@.str.13.171 = private unnamed_addr constant [6 x i8] c"-fdrc\00", align 1
@.str.14.172 = private unnamed_addr constant [10 x i8] c"-pleasure\00", align 1
@.str.15.173 = private unnamed_addr constant [5 x i8] c"-eqn\00", align 1
@.str.16.174 = private unnamed_addr constant [9 x i8] c"-eqntott\00", align 1
@.str.17.175 = private unnamed_addr constant [6 x i8] c"-kiss\00", align 1
@.str.18.176 = private unnamed_addr constant [6 x i8] c"-cons\00", align 1
@.str.19.177 = private unnamed_addr constant [7 x i8] c"-scons\00", align 1
@.str.222 = private unnamed_addr constant [10 x i8] c"DONT_CARE\00", align 1
@.str.1.223 = private unnamed_addr constant [9 x i8] c"DONTCARE\00", align 1
@.str.2.224 = private unnamed_addr constant [10 x i8] c"dont_care\00", align 1
@.str.3.225 = private unnamed_addr constant [9 x i8] c"dontcare\00", align 1
@.str.4.226 = private unnamed_addr constant [10 x i8] c"simpcomp+\00", align 1
@.str.5.227 = private unnamed_addr constant [10 x i8] c"simpcomp-\00", align 1
@.str.6.228 = private unnamed_addr constant [10 x i8] c"term1    \00", align 1
@.str.7.229 = private unnamed_addr constant [10 x i8] c"term2    \00", align 1
@.str.8.230 = private unnamed_addr constant [11 x i8] c"union     \00", align 1
@.str.9.231 = private unnamed_addr constant [9 x i8] c"simplify\00", align 1
@.str.10.232 = private unnamed_addr constant [11 x i8] c"separate  \00", align 1
@.str.11.235 = private unnamed_addr constant [35 x i8] c"symbolic-output index out of range\00", align 1
@.str.12.236 = private unnamed_addr constant [6 x i8] c"error\00", align 1
@.str.13.240 = private unnamed_addr constant [36 x i8] c".symbolic requires binary variables\00", align 1
@.str.14.241 = private unnamed_addr constant [27 x i8] c"bad cube in form_bitvector\00", align 1
@.str.15.237 = private unnamed_addr constant [4 x i8] c"X%d\00", align 1
@.str.16.242 = private unnamed_addr constant [47 x i8] c"use .symbolic and .symbolic-output to specify\0A\00", align 1
@.str.17.243 = private unnamed_addr constant [52 x i8] c"the present state and next state field information\0A\00", align 1
@.str.18.244 = private unnamed_addr constant [53 x i8] c"disassemble_pla: need two multiple-valued variables\0A\00", align 1
@.str.19.245 = private unnamed_addr constant [39 x i8] c"disassemble_pla: # outputs < # states\0A\00", align 1
@.str.20.246 = private unnamed_addr constant [41 x i8] c"# state EVERY to %d, before=%d after=%d\0A\00", align 1
@.str.21.247 = private unnamed_addr constant [44 x i8] c"# state ANY to NOWHERE, before=%d after=%d\0A\00", align 1
@.str.22.248 = private unnamed_addr constant [38 x i8] c"# state %d to %d, before=%d after=%d\0A\00", align 1
@.str.23.249 = private unnamed_addr constant [3 x i8] c"~1\00", align 1
@.str.256 = private unnamed_addr constant [61 x i8] c"# IRRED: F=%d E=%d R=%d Rt=%d Rp=%d Rc=%d Final=%d Bound=%d\0A\00", align 1
@.str.1.262 = private unnamed_addr constant [38 x i8] c"IRRED1: zr=%d ze=%d to-go=%d time=%s\0A\00", align 1
@.str.2.263 = private unnamed_addr constant [39 x i8] c"IRRED1: zr=%d zrt=%d to-go=%d time=%s\0A\00", align 1
@Rp_current = internal unnamed_addr global i32 0, align 4
@.str.3.257 = private unnamed_addr constant [48 x i8] c"IRRED1: %d of %d to-go=%d, table=%dx%d time=%s\0A\00", align 1
@.str.4.258 = private unnamed_addr constant [42 x i8] c"IRRED1: delete redundant rows, now %dx%d\0A\00", align 1
@tautology.taut_level = internal unnamed_addr global i32 0, align 4
@.str.5.264 = private unnamed_addr constant [10 x i8] c"TAUTOLOGY\00", align 1
@.str.6.267 = private unnamed_addr constant [24 x i8] c"exit TAUTOLOGY[%d]: %s\0A\00", align 1
@.str.7.265 = private unnamed_addr constant [6 x i8] c"FALSE\00", align 1
@.str.8.266 = private unnamed_addr constant [5 x i8] c"TRUE\00", align 1
@.str.10.260 = private unnamed_addr constant [52 x i8] c"UNATE_REDUCTION: %d unate variables, reduced to %d\0A\00", align 1
@ftautology.ftaut_level = internal unnamed_addr global i32 0, align 4
@.str.11.259 = private unnamed_addr constant [15 x i8] c"FIND_TAUTOLOGY\00", align 1
@.str.12.261 = private unnamed_addr constant [44 x i8] c"exit FIND_TAUTOLOGY[%d]: table is %d by %d\0A\00", align 1
@.str.291 = private unnamed_addr constant [9 x i8] c"ESPRESSO\00", align 1
@.str.1.292 = private unnamed_addr constant [5 x i8] c"many\00", align 1
@.str.2.290 = private unnamed_addr constant [6 x i8] c"exact\00", align 1
@.str.3.293 = private unnamed_addr constant [3 x i8] c"qm\00", align 1
@.str.4.294 = private unnamed_addr constant [14 x i8] c"single_output\00", align 1
@.str.5.295 = private unnamed_addr constant [3 x i8] c"so\00", align 1
@.str.6.296 = private unnamed_addr constant [8 x i8] c"so_both\00", align 1
@.str.7.297 = private unnamed_addr constant [9 x i8] c"simplify\00", align 1
@.str.8.298 = private unnamed_addr constant [5 x i8] c"echo\00", align 1
@.str.9.299 = private unnamed_addr constant [4 x i8] c"opo\00", align 1
@.str.10.300 = private unnamed_addr constant [7 x i8] c"opoall\00", align 1
@.str.11.301 = private unnamed_addr constant [5 x i8] c"pair\00", align 1
@.str.12.302 = private unnamed_addr constant [8 x i8] c"pairall\00", align 1
@.str.13.303 = private unnamed_addr constant [6 x i8] c"check\00", align 1
@.str.14.304 = private unnamed_addr constant [6 x i8] c"stats\00", align 1
@.str.15.305 = private unnamed_addr constant [7 x i8] c"verify\00", align 1
@.str.16.306 = private unnamed_addr constant [10 x i8] c"PLAverify\00", align 1
@.str.17.307 = private unnamed_addr constant [6 x i8] c"equiv\00", align 1
@.str.18.308 = private unnamed_addr constant [4 x i8] c"map\00", align 1
@.str.19.309 = private unnamed_addr constant [6 x i8] c"mapdc\00", align 1
@.str.20.310 = private unnamed_addr constant [4 x i8] c"fsm\00", align 1
@.str.21.311 = private unnamed_addr constant [8 x i8] c"contain\00", align 1
@.str.22.312 = private unnamed_addr constant [8 x i8] c"d1merge\00", align 1
@.str.23.313 = private unnamed_addr constant [11 x i8] c"d1merge_in\00", align 1
@.str.24.314 = private unnamed_addr constant [9 x i8] c"disjoint\00", align 1
@.str.25.315 = private unnamed_addr constant [7 x i8] c"dsharp\00", align 1
@.str.26.316 = private unnamed_addr constant [10 x i8] c"intersect\00", align 1
@.str.27.317 = private unnamed_addr constant [9 x i8] c"minterms\00", align 1
@.str.28.318 = private unnamed_addr constant [7 x i8] c"primes\00", align 1
@.str.29.319 = private unnamed_addr constant [9 x i8] c"separate\00", align 1
@.str.30.287 = private unnamed_addr constant [6 x i8] c"sharp\00", align 1
@.str.31.320 = private unnamed_addr constant [6 x i8] c"union\00", align 1
@.str.32.321 = private unnamed_addr constant [4 x i8] c"xor\00", align 1
@.str.33.277 = private unnamed_addr constant [6 x i8] c"essen\00", align 1
@.str.34.278 = private unnamed_addr constant [7 x i8] c"expand\00", align 1
@.str.35.289 = private unnamed_addr constant [5 x i8] c"gasp\00", align 1
@.str.36.280 = private unnamed_addr constant [6 x i8] c"irred\00", align 1
@.str.37.322 = private unnamed_addr constant [12 x i8] c"make_sparse\00", align 1
@.str.38.282 = private unnamed_addr constant [7 x i8] c"reduce\00", align 1
@.str.39.288 = private unnamed_addr constant [5 x i8] c"taut\00", align 1
@.str.40.323 = private unnamed_addr constant [11 x i8] c"super_gasp\00", align 1
@.str.41.324 = private unnamed_addr constant [8 x i8] c"lexsort\00", align 1
@.str.42.325 = private unnamed_addr constant [5 x i8] c"test\00", align 1
@option_table = internal global [44 x %struct.anon] [%struct.anon { ptr @.str.291, i32 0, i32 1, i32 1, i32 1 }, %struct.anon { ptr @.str.1.292, i32 37, i32 1, i32 1, i32 1 }, %struct.anon { ptr @.str.2.290, i32 9, i32 1, i32 1, i32 1 }, %struct.anon { ptr @.str.3.293, i32 24, i32 1, i32 1, i32 1 }, %struct.anon { ptr @.str.4.294, i32 28, i32 1, i32 1, i32 1 }, %struct.anon { ptr @.str.5.295, i32 28, i32 1, i32 1, i32 1 }, %struct.anon { ptr @.str.6.296, i32 29, i32 1, i32 1, i32 1 }, %struct.anon { ptr @.str.7.297, i32 27, i32 1, i32 0, i32 0 }, %struct.anon { ptr @.str.8.298, i32 7, i32 1, i32 0, i32 0 }, %struct.anon { ptr @.str.9.299, i32 19, i32 1, i32 1, i32 1 }, %struct.anon { ptr @.str.10.300, i32 20, i32 1, i32 1, i32 1 }, %struct.anon { ptr @.str.11.301, i32 21, i32 1, i32 1, i32 1 }, %struct.anon { ptr @.str.12.302, i32 22, i32 1, i32 1, i32 1 }, %struct.anon { ptr @.str.13.303, i32 2, i32 1, i32 1, i32 1 }, %struct.anon { ptr @.str.14.304, i32 30, i32 1, i32 0, i32 0 }, %struct.anon { ptr @.str.15.305, i32 36, i32 2, i32 0, i32 1 }, %struct.anon { ptr @.str.16.306, i32 1, i32 2, i32 0, i32 1 }, %struct.anon { ptr @.str.17.307, i32 34, i32 1, i32 1, i32 1 }, %struct.anon { ptr @.str.18.308, i32 16, i32 1, i32 0, i32 0 }, %struct.anon { ptr @.str.19.309, i32 17, i32 1, i32 0, i32 0 }, %struct.anon { ptr @.str.20.310, i32 41, i32 1, i32 0, i32 1 }, %struct.anon { ptr @.str.21.311, i32 3, i32 1, i32 0, i32 0 }, %struct.anon { ptr @.str.22.312, i32 4, i32 1, i32 0, i32 0 }, %struct.anon { ptr @.str.23.313, i32 40, i32 1, i32 0, i32 0 }, %struct.anon { ptr @.str.24.314, i32 5, i32 1, i32 1, i32 0 }, %struct.anon { ptr @.str.25.315, i32 6, i32 2, i32 0, i32 0 }, %struct.anon { ptr @.str.26.316, i32 12, i32 2, i32 0, i32 0 }, %struct.anon { ptr @.str.27.317, i32 18, i32 1, i32 0, i32 0 }, %struct.anon { ptr @.str.28.318, i32 23, i32 1, i32 0, i32 1 }, %struct.anon { ptr @.str.29.319, i32 38, i32 1, i32 1, i32 1 }, %struct.anon { ptr @.str.30.287, i32 26, i32 2, i32 0, i32 0 }, %struct.anon { ptr @.str.31.320, i32 35, i32 2, i32 0, i32 0 }, %struct.anon { ptr @.str.32.321, i32 39, i32 2, i32 1, i32 1 }, %struct.anon { ptr @.str.33.277, i32 8, i32 1, i32 0, i32 1 }, %struct.anon { ptr @.str.34.278, i32 10, i32 1, i32 1, i32 0 }, %struct.anon { ptr @.str.35.289, i32 11, i32 1, i32 1, i32 1 }, %struct.anon { ptr @.str.36.280, i32 13, i32 1, i32 0, i32 1 }, %struct.anon { ptr @.str.37.322, i32 15, i32 1, i32 1, i32 1 }, %struct.anon { ptr @.str.38.282, i32 25, i32 1, i32 0, i32 1 }, %struct.anon { ptr @.str.39.288, i32 32, i32 1, i32 0, i32 0 }, %struct.anon { ptr @.str.40.323, i32 31, i32 1, i32 1, i32 1 }, %struct.anon { ptr @.str.41.324, i32 14, i32 1, i32 0, i32 0 }, %struct.anon { ptr @.str.42.325, i32 33, i32 1, i32 1, i32 1 }, %struct.anon { ptr null, i32 42, i32 0, i32 0, i32 0 }], align 16
@.str.43.275 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.44.276 = private unnamed_addr constant [6 x i8] c"compl\00", align 1
@.str.45.279 = private unnamed_addr constant [8 x i8] c"expand1\00", align 1
@.str.46.281 = private unnamed_addr constant [7 x i8] c"irred1\00", align 1
@.str.47.283 = private unnamed_addr constant [8 x i8] c"reduce1\00", align 1
@.str.48.284 = private unnamed_addr constant [7 x i8] c"mincov\00", align 1
@.str.49.285 = private unnamed_addr constant [8 x i8] c"mincov1\00", align 1
@.str.50.286 = private unnamed_addr constant [7 x i8] c"sparse\00", align 1
@debug_table = internal global [17 x %struct.pla_types_struct] [%struct.pla_types_struct { ptr @.str.43.275, i32 10614 }, %struct.pla_types_struct { ptr @.str.44.276, i32 1 }, %struct.pla_types_struct { ptr @.str.33.277, i32 2 }, %struct.pla_types_struct { ptr @.str.34.278, i32 4 }, %struct.pla_types_struct { ptr @.str.45.279, i32 12 }, %struct.pla_types_struct { ptr @.str.36.280, i32 32 }, %struct.pla_types_struct { ptr @.str.46.281, i32 16416 }, %struct.pla_types_struct { ptr @.str.38.282, i32 64 }, %struct.pla_types_struct { ptr @.str.47.283, i32 192 }, %struct.pla_types_struct { ptr @.str.48.284, i32 2048 }, %struct.pla_types_struct { ptr @.str.49.285, i32 6144 }, %struct.pla_types_struct { ptr @.str.50.286, i32 256 }, %struct.pla_types_struct { ptr @.str.30.287, i32 8192 }, %struct.pla_types_struct { ptr @.str.39.288, i32 512 }, %struct.pla_types_struct { ptr @.str.35.289, i32 16 }, %struct.pla_types_struct { ptr @.str.2.290, i32 1024 }, %struct.pla_types_struct zeroinitializer], align 16
@.str.51.326 = private unnamed_addr constant [4 x i8] c"eat\00", align 1
@echo_comments = internal global i32 0, align 4
@.str.52.327 = private unnamed_addr constant [8 x i8] c"eatdots\00", align 1
@echo_unknown_commands = internal global i32 0, align 4
@.str.53.328 = private unnamed_addr constant [5 x i8] c"fast\00", align 1
@single_expand = internal global i32 0, align 4
@.str.54.329 = private unnamed_addr constant [5 x i8] c"kiss\00", align 1
@kiss = internal global i32 0, align 4
@.str.55.330 = private unnamed_addr constant [5 x i8] c"ness\00", align 1
@remove_essential = internal global i32 0, align 4
@.str.56.331 = private unnamed_addr constant [5 x i8] c"nirr\00", align 1
@.str.57.332 = private unnamed_addr constant [8 x i8] c"nunwrap\00", align 1
@unwrap_onset = internal global i32 0, align 4
@.str.58.333 = private unnamed_addr constant [6 x i8] c"onset\00", align 1
@recompute_onset = internal global i32 0, align 4
@.str.59.334 = private unnamed_addr constant [4 x i8] c"pos\00", align 1
@pos = internal global i32 0, align 4
@.str.60.335 = private unnamed_addr constant [7 x i8] c"random\00", align 1
@.str.61.336 = private unnamed_addr constant [7 x i8] c"strong\00", align 1
@use_super_gasp = internal global i32 0, align 4
@esp_opt_table = internal global [12 x %struct.anon.1] [%struct.anon.1 { ptr @.str.51.326, ptr @echo_comments, i32 0 }, %struct.anon.1 { ptr @.str.52.327, ptr @echo_unknown_commands, i32 0 }, %struct.anon.1 { ptr @.str.53.328, ptr @single_expand, i32 1 }, %struct.anon.1 { ptr @.str.54.329, ptr @kiss, i32 1 }, %struct.anon.1 { ptr @.str.55.330, ptr @remove_essential, i32 0 }, %struct.anon.1 { ptr @.str.56.331, ptr @force_irredundant, i32 0 }, %struct.anon.1 { ptr @.str.57.332, ptr @unwrap_onset, i32 0 }, %struct.anon.1 { ptr @.str.58.333, ptr @recompute_onset, i32 1 }, %struct.anon.1 { ptr @.str.59.334, ptr @pos, i32 1 }, %struct.anon.1 { ptr @.str.60.335, ptr @use_random_order, i32 1 }, %struct.anon.1 { ptr @.str.61.336, ptr @use_super_gasp, i32 1 }, %struct.anon.1 zeroinitializer], align 16
@print_solution = internal global i32 0, align 4
@.str.62.270 = private unnamed_addr constant [17 x i8] c"D:S:de:o:r:stv:x\00", align 1
@optarg = dso_local global ptr null, align 8
@.str.63.271 = private unnamed_addr constant [25 x i8] c"%s: bad subcommand \22%s\22\0A\00", align 1
@pla_types = internal global [21 x %struct.pla_types_struct] [%struct.pla_types_struct { ptr @.str.158, i32 1 }, %struct.pla_types_struct { ptr @.str.1.159, i32 4 }, %struct.pla_types_struct { ptr @.str.2.160, i32 2 }, %struct.pla_types_struct { ptr @.str.3.161, i32 3 }, %struct.pla_types_struct { ptr @.str.4.162, i32 5 }, %struct.pla_types_struct { ptr @.str.5.163, i32 6 }, %struct.pla_types_struct { ptr @.str.6.164, i32 7 }, %struct.pla_types_struct { ptr @.str.7.165, i32 257 }, %struct.pla_types_struct { ptr @.str.8.166, i32 260 }, %struct.pla_types_struct { ptr @.str.9.167, i32 258 }, %struct.pla_types_struct { ptr @.str.10.168, i32 259 }, %struct.pla_types_struct { ptr @.str.11.169, i32 261 }, %struct.pla_types_struct { ptr @.str.12.170, i32 262 }, %struct.pla_types_struct { ptr @.str.13.171, i32 263 }, %struct.pla_types_struct { ptr @.str.14.172, i32 8 }, %struct.pla_types_struct { ptr @.str.15.173, i32 16 }, %struct.pla_types_struct { ptr @.str.16.174, i32 16 }, %struct.pla_types_struct { ptr @.str.17.175, i32 128 }, %struct.pla_types_struct { ptr @.str.18.176, i32 256 }, %struct.pla_types_struct { ptr @.str.19.177, i32 512 }, %struct.pla_types_struct zeroinitializer], align 16
@.str.64 = private unnamed_addr constant [26 x i8] c"%s: bad output type \22%s\22\0A\00", align 1
@.str.65.272 = private unnamed_addr constant [30 x i8] c"%s: bad espresso option \22%s\22\0A\00", align 1
@.str.66.273 = private unnamed_addr constant [25 x i8] c"%s: bad debug type \22%s\22\0A\00", align 1
@.str.67.274 = private unnamed_addr constant [6 x i8] c"%d-%d\00", align 1
@.str.68 = private unnamed_addr constant [27 x i8] c"%s: bad output range \22%s\22\0A\00", align 1
@.str.69 = private unnamed_addr constant [11 x i8] c"# espresso\00", align 1
@.str.70 = private unnamed_addr constant [4 x i8] c" %s\00", align 1
@.str.72 = private unnamed_addr constant [6 x i8] c"# %s\0A\00", align 1
@.str.73 = private unnamed_addr constant [58 x i8] c"UC Berkeley, Espresso Version #2.3, Release date 01/31/88\00", align 1
@optind = dso_local global i32 0, align 4
@.str.74 = private unnamed_addr constant [35 x i8] c"trailing arguments on command line\00", align 1
@.str.75 = private unnamed_addr constant [12 x i8] c"ESPRESSO   \00", align 1
@last_fp = internal unnamed_addr global ptr null, align 8
@.str.76 = private unnamed_addr constant [11 x i8] c"SIMPLIFY  \00", align 1
@.str.77 = private unnamed_addr constant [12 x i8] c"PRIMES     \00", align 1
@.str.78 = private unnamed_addr constant [24 x i8] c"ON-set is%sa tautology\0A\00", align 1
@.str.79 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.80 = private unnamed_addr constant [6 x i8] c" not \00", align 1
@.str.83 = private unnamed_addr constant [26 x i8] c"cover verification failed\00", align 1
@stdin = external local_unnamed_addr global ptr, align 8
@.str.84 = private unnamed_addr constant [8 x i8] c"(stdin)\00", align 1
@.str.85 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.86 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.87 = private unnamed_addr constant [23 x i8] c"%s: Unable to open %s\0A\00", align 1
@input_type = internal unnamed_addr global i32 3, align 4
@.str.88 = private unnamed_addr constant [35 x i8] c"%s: Unable to find PLA on file %s\0A\00", align 1
@filename = internal global ptr null, align 8
@total_time = internal global [16 x i64] zeroinitializer, align 16
@total_calls = internal global [16 x i32] zeroinitializer, align 16
@.str.89 = private unnamed_addr constant [40 x i8] c"# %s\09%2d call(s) for %s (%2ld.%01ld%%)\0A\00", align 1
@total_name = internal global [16 x ptr] zeroinitializer, align 16
@.str.90 = private unnamed_addr constant [12 x i8] c"READ       \00", align 1
@.str.91 = private unnamed_addr constant [12 x i8] c"WRITE      \00", align 1
@.str.92 = private unnamed_addr constant [12 x i8] c"COMPL      \00", align 1
@.str.93 = private unnamed_addr constant [12 x i8] c"REDUCE     \00", align 1
@.str.94 = private unnamed_addr constant [12 x i8] c"EXPAND     \00", align 1
@.str.95 = private unnamed_addr constant [12 x i8] c"ESSEN      \00", align 1
@.str.96 = private unnamed_addr constant [12 x i8] c"IRRED      \00", align 1
@.str.97 = private unnamed_addr constant [12 x i8] c"REDUCE_GASP\00", align 1
@.str.98 = private unnamed_addr constant [12 x i8] c"EXPAND_GASP\00", align 1
@.str.99 = private unnamed_addr constant [12 x i8] c"IRRED_GASP \00", align 1
@.str.100 = private unnamed_addr constant [12 x i8] c"MV_REDUCE  \00", align 1
@.str.101 = private unnamed_addr constant [12 x i8] c"RAISE_IN   \00", align 1
@.str.102 = private unnamed_addr constant [12 x i8] c"VERIFY     \00", align 1
@.str.103 = private unnamed_addr constant [12 x i8] c"MINCOV     \00", align 1
@.str.104 = private unnamed_addr constant [17 x i8] c"                \00", align 1
@.str.105 = private unnamed_addr constant [19 x i8] c",\0A                \00", align 1
@.str.106 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.107 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.108 = private unnamed_addr constant [5 x i8] c"%s\0A\0A\00", align 1
@.str.132 = private unnamed_addr constant [4 x i8] c"-do\00", align 1
@.str.133 = private unnamed_addr constant [42 x i8] c"espresso: bad keyword \22%s\22 following -do\0A\00", align 1
@.str.134 = private unnamed_addr constant [5 x i8] c"-out\00", align 1
@.str.135 = private unnamed_addr constant [43 x i8] c"espresso: bad keyword \22%s\22 following -out\0A\00", align 1
@.str.136 = private unnamed_addr constant [5 x i8] c"-fdr\00", align 1
@.str.137 = private unnamed_addr constant [4 x i8] c"-fr\00", align 1
@.str.138.337 = private unnamed_addr constant [3 x i8] c"-f\00", align 1
@str.140 = private unnamed_addr constant [21 x i8] c"PLA's compared equal\00", align 1
@str.141 = private unnamed_addr constant [52 x i8] c"PLA comparison failed; the PLA's are not equivalent\00", align 1
@str.142 = private unnamed_addr constant [37 x i8] c"SYNOPSIS: espresso [options] [file]\0A\00", align 1
@str.143 = private unnamed_addr constant [29 x i8] c"  -d        Enable debugging\00", align 1
@str.144 = private unnamed_addr constant [36 x i8] c"  -e[opt]   Select espresso option:\00", align 1
@str.145 = private unnamed_addr constant [63 x i8] c"                fast, ness, nirr, nunwrap, onset, pos, strong,\00", align 1
@str.146 = private unnamed_addr constant [43 x i8] c"                eat, eatdots, kiss, random\00", align 1
@str.147 = private unnamed_addr constant [34 x i8] c"  -o[type]  Select output format:\00", align 1
@str.148 = private unnamed_addr constant [62 x i8] c"                f, fd, fr, fdr, pleasure, eqntott, kiss, cons\00", align 1
@str.149 = private unnamed_addr constant [42 x i8] c"  -rn-m     Select range for subcommands:\00", align 1
@str.150 = private unnamed_addr constant [62 x i8] c"                d1merge: first and last variables (0 ... m-1)\00", align 1
@str.151 = private unnamed_addr constant [63 x i8] c"                minterms: first and last variables (0 ... m-1)\00", align 1
@str.152 = private unnamed_addr constant [59 x i8] c"                opoall: first and last outputs (0 ... m-1)\00", align 1
@str.153 = private unnamed_addr constant [44 x i8] c"  -s        Provide short execution summary\00", align 1
@str.154 = private unnamed_addr constant [43 x i8] c"  -t        Provide longer execution trace\00", align 1
@str.155 = private unnamed_addr constant [42 x i8] c"  -x        Suppress printing of solution\00", align 1
@str.156 = private unnamed_addr constant [53 x i8] c"  -v[type]  Verbose debugging detail (-v '' for all)\00", align 1
@str.157 = private unnamed_addr constant [38 x i8] c"  -D[cmd]   Execute subcommand 'cmd':\00", align 1
@str.158 = private unnamed_addr constant [45 x i8] c"  -Sn       Select strategy for subcommands:\00", align 1
@str.159 = private unnamed_addr constant [63 x i8] c"                opo: bit2=exact bit1=repeated bit0=skip sparse\00", align 1
@str.160 = private unnamed_addr constant [44 x i8] c"                opoall: 0=minimize, 1=exact\00", align 1
@str.161 = private unnamed_addr constant [66 x i8] c"                pair: 0=algebraic, 1=strongd, 2=espresso, 3=exact\00", align 1
@str.162 = private unnamed_addr constant [52 x i8] c"                pairall: 0=minimize, 1=exact, 2=opo\00", align 1
@str.163 = private unnamed_addr constant [49 x i8] c"                so_espresso: 0=minimize, 1=exact\00", align 1
@str.164 = private unnamed_addr constant [45 x i8] c"                so_both: 0=minimize, 1=exact\00", align 1
@Gminterm = internal unnamed_addr global ptr null, align 8
@Gcube = internal unnamed_addr global ptr null, align 8
@.str.340 = private unnamed_addr constant [21 x i8] c"\0A\0AOutput space # %d\0A\00", align 1
@mapindex = internal unnamed_addr constant [16 x [16 x i32]] [[16 x i32] [i32 0, i32 1, i32 3, i32 2, i32 16, i32 17, i32 19, i32 18, i32 80, i32 81, i32 83, i32 82, i32 64, i32 65, i32 67, i32 66], [16 x i32] [i32 4, i32 5, i32 7, i32 6, i32 20, i32 21, i32 23, i32 22, i32 84, i32 85, i32 87, i32 86, i32 68, i32 69, i32 71, i32 70], [16 x i32] [i32 12, i32 13, i32 15, i32 14, i32 28, i32 29, i32 31, i32 30, i32 92, i32 93, i32 95, i32 94, i32 76, i32 77, i32 79, i32 78], [16 x i32] [i32 8, i32 9, i32 11, i32 10, i32 24, i32 25, i32 27, i32 26, i32 88, i32 89, i32 91, i32 90, i32 72, i32 73, i32 75, i32 74], [16 x i32] [i32 32, i32 33, i32 35, i32 34, i32 48, i32 49, i32 51, i32 50, i32 112, i32 113, i32 115, i32 114, i32 96, i32 97, i32 99, i32 98], [16 x i32] [i32 36, i32 37, i32 39, i32 38, i32 52, i32 53, i32 55, i32 54, i32 116, i32 117, i32 119, i32 118, i32 100, i32 101, i32 103, i32 102], [16 x i32] [i32 44, i32 45, i32 47, i32 46, i32 60, i32 61, i32 63, i32 62, i32 124, i32 125, i32 127, i32 126, i32 108, i32 109, i32 111, i32 110], [16 x i32] [i32 40, i32 41, i32 43, i32 42, i32 56, i32 57, i32 59, i32 58, i32 120, i32 121, i32 123, i32 122, i32 104, i32 105, i32 107, i32 106], [16 x i32] [i32 160, i32 161, i32 163, i32 162, i32 176, i32 177, i32 179, i32 178, i32 240, i32 241, i32 243, i32 242, i32 224, i32 225, i32 227, i32 226], [16 x i32] [i32 164, i32 165, i32 167, i32 166, i32 180, i32 181, i32 183, i32 182, i32 244, i32 245, i32 247, i32 246, i32 228, i32 229, i32 231, i32 230], [16 x i32] [i32 172, i32 173, i32 175, i32 174, i32 188, i32 189, i32 191, i32 190, i32 252, i32 253, i32 255, i32 254, i32 236, i32 237, i32 239, i32 238], [16 x i32] [i32 168, i32 169, i32 171, i32 170, i32 184, i32 185, i32 187, i32 186, i32 248, i32 249, i32 251, i32 250, i32 232, i32 233, i32 235, i32 234], [16 x i32] [i32 128, i32 129, i32 131, i32 130, i32 144, i32 145, i32 147, i32 146, i32 208, i32 209, i32 211, i32 210, i32 192, i32 193, i32 195, i32 194], [16 x i32] [i32 132, i32 133, i32 135, i32 134, i32 148, i32 149, i32 151, i32 150, i32 212, i32 213, i32 215, i32 214, i32 196, i32 197, i32 199, i32 198], [16 x i32] [i32 140, i32 141, i32 143, i32 142, i32 156, i32 157, i32 159, i32 158, i32 220, i32 221, i32 223, i32 222, i32 204, i32 205, i32 207, i32 206], [16 x i32] [i32 136, i32 137, i32 139, i32 138, i32 152, i32 153, i32 155, i32 154, i32 216, i32 217, i32 219, i32 218, i32 200, i32 201, i32 203, i32 202]], align 16
@.str.1.341 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.2.354 = private unnamed_addr constant [7 x i8] c"%d %d\0A\00", align 1
@.str.1.362 = private unnamed_addr constant [18 x i8] c"lower bound = %d\0A\00", align 1
@.str.2.363 = private unnamed_addr constant [50 x i8] c"matrix     = %d by %d with %d elements (%4.3f%%)\0A\00", align 1
@.str.3.364 = private unnamed_addr constant [26 x i8] c"cover size = %d elements\0A\00", align 1
@.str.4.365 = private unnamed_addr constant [17 x i8] c"cover cost = %d\0A\00", align 1
@.str.5.366 = private unnamed_addr constant [17 x i8] c"time       = %s\0A\00", align 1
@.str.6.367 = private unnamed_addr constant [17 x i8] c"components = %d\0A\00", align 1
@.str.7.368 = private unnamed_addr constant [17 x i8] c"gimpel     = %d\0A\00", align 1
@.str.8.369 = private unnamed_addr constant [17 x i8] c"nodes      = %d\0A\00", align 1
@.str.9.370 = private unnamed_addr constant [17 x i8] c"max_depth  = %d\0A\00", align 1
@.str.10.371 = private unnamed_addr constant [34 x i8] c"Fatal error: file %s, line %d\0A%s\0A\00", align 1
@.str.11.372 = private unnamed_addr constant [74 x i8] c"/src/llvm-test-suite/MultiSource/Benchmarks/MallocBench/espresso/mincov.c\00", align 1
@.str.12.373 = private unnamed_addr constant [53 x i8] c"mincov: internal error -- cover verification failed\0A\00", align 1
@.str.13.376 = private unnamed_addr constant [14 x i8] c"ABSMIN[%2d]%s\00", align 1
@.str.14.375 = private unnamed_addr constant [2 x i8] c"*\00", align 1
@.str.15.374 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.16.377 = private unnamed_addr constant [38 x i8] c" %3dx%3d sel=%3d bnd=%3d lb=%3d %12s \00", align 1
@.str.19.378 = private unnamed_addr constant [49 x i8] c"new 'best' solution %d at level %d (time is %s)\0A\00", align 1
@.str.20.379 = private unnamed_addr constant [12 x i8] c"comp %d %d\0A\00", align 1
@.str.21.380 = private unnamed_addr constant [9 x i8] c"pick=%d\0A\00", align 1
@str.361 = private unnamed_addr constant [28 x i8] c"**** heuristic covering ...\00", align 1
@str.22 = private unnamed_addr constant [5 x i8] c"BEST\00", align 1
@str.23 = private unnamed_addr constant [8 x i8] c"bounded\00", align 1
@skip_make_sparse = internal global i32 0, align 4
@opo_exact = internal unnamed_addr global i32 0, align 4
@.str.392 = private unnamed_addr constant [26 x i8] c"\0AOPO loop for output #%d\0A\00", align 1
@.str.1.393 = private unnamed_addr constant [18 x i8] c"PLA->phase is %s\0A\00", align 1
@.str.2.394 = private unnamed_addr constant [18 x i8] c"phase      is %s\0A\00", align 1
@.str.3.387 = private unnamed_addr constant [11 x i8] c"OPO-SETUP \00", align 1
@.str.4.388 = private unnamed_addr constant [11 x i8] c"OPO       \00", align 1
@.str.5.389 = private unnamed_addr constant [33 x i8] c"error in output phase assignment\00", align 1
@opo_recur.level = internal unnamed_addr global i32 0, align 4
@.str.6.390 = private unnamed_addr constant [39 x i8] c"# OPO[%d]: %4d = %4d x %4d, time = %s\0A\00", align 1
@.str.7.391 = private unnamed_addr constant [40 x i8] c"output_phase_setup: must have an output\00", align 1
@.str.8.397 = private unnamed_addr constant [15 x i8] c"# phase is %s\0A\00", align 1
@.str.9.385 = private unnamed_addr constant [6 x i8] c"EXACT\00", align 1
@.str.10.386 = private unnamed_addr constant [11 x i8] c"ESPRESSO  \00", align 1
@.str.400 = private unnamed_addr constant [38 x i8] c"can only pair binary-valued variables\00", align 1
@.str.1.401 = private unnamed_addr constant [6 x i8] c"%s+%s\00", align 1
@summary = internal global i32 0, align 4
@.str.2.404 = private unnamed_addr constant [5 x i8] c"    \00", align 1
@.str.3.405 = private unnamed_addr constant [5 x i8] c"%3d \00", align 1
@.str.5.406 = private unnamed_addr constant [3 x i8] c"# \00", align 1
@.str.6.407 = private unnamed_addr constant [11 x i8] c"ESPRESSO  \00", align 1
@.str.7.408 = private unnamed_addr constant [8 x i8] c"pair is\00", align 1
@.str.8.409 = private unnamed_addr constant [9 x i8] c" (%d %d)\00", align 1
@best_cost = internal unnamed_addr global i32 0, align 4
@best_pair = internal unnamed_addr global ptr null, align 8
@cost_array = internal unnamed_addr global ptr null, align 8
@trace = internal global i32 0, align 4
@.str.9.410 = private unnamed_addr constant [12 x i8] c"cost is %d \00", align 1
@global_PLA = internal unnamed_addr global ptr null, align 8
@pair_minim_strategy = internal unnamed_addr global i32 0, align 4
@best_phase = internal unnamed_addr global ptr null, align 8
@best_R = internal unnamed_addr global ptr null, align 8
@best_D = internal unnamed_addr global ptr null, align 8
@best_F = internal unnamed_addr global ptr null, align 8
@.str.10.413 = private unnamed_addr constant [11 x i8] c"OPO       \00", align 1
@.str.11.414 = private unnamed_addr constant [15 x i8] c"# phase is %s\0A\00", align 1
@.str.12.415 = private unnamed_addr constant [11 x i8] c"EXACT     \00", align 1
@use_random_order = internal global i32 0, align 4
@toggle = internal unnamed_addr global i32 1, align 4
@.str.422 = private unnamed_addr constant [21 x i8] c"REDUCE: %s to %s %s\0A\00", align 1
@sccc.sccc_level = internal unnamed_addr global i32 0, align 4
@.str.1.423 = private unnamed_addr constant [5 x i8] c"SCCC\00", align 1
@.str.2.424 = private unnamed_addr constant [24 x i8] c"SCCC[%d]: result is %s\0A\00", align 1
@.str.477 = private unnamed_addr constant [26 x i8] c"sf_join: sf_size mismatch\00", align 1
@.str.1.482 = private unnamed_addr constant [28 x i8] c"sf_append: sf_size mismatch\00", align 1
@set_family_garbage = internal unnamed_addr global ptr null, align 8
@.str.2.493 = private unnamed_addr constant [12 x i8] c"A[%d] = %s\0A\00", align 1
@s1 = internal global [120 x i8] zeroinitializer, align 16
@bit_count = internal global [256 x i32] [i32 0, i32 1, i32 1, i32 2, i32 1, i32 2, i32 2, i32 3, i32 1, i32 2, i32 2, i32 3, i32 2, i32 3, i32 3, i32 4, i32 1, i32 2, i32 2, i32 3, i32 2, i32 3, i32 3, i32 4, i32 2, i32 3, i32 3, i32 4, i32 3, i32 4, i32 4, i32 5, i32 1, i32 2, i32 2, i32 3, i32 2, i32 3, i32 3, i32 4, i32 2, i32 3, i32 3, i32 4, i32 3, i32 4, i32 4, i32 5, i32 2, i32 3, i32 3, i32 4, i32 3, i32 4, i32 4, i32 5, i32 3, i32 4, i32 4, i32 5, i32 4, i32 5, i32 5, i32 6, i32 1, i32 2, i32 2, i32 3, i32 2, i32 3, i32 3, i32 4, i32 2, i32 3, i32 3, i32 4, i32 3, i32 4, i32 4, i32 5, i32 2, i32 3, i32 3, i32 4, i32 3, i32 4, i32 4, i32 5, i32 3, i32 4, i32 4, i32 5, i32 4, i32 5, i32 5, i32 6, i32 2, i32 3, i32 3, i32 4, i32 3, i32 4, i32 4, i32 5, i32 3, i32 4, i32 4, i32 5, i32 4, i32 5, i32 5, i32 6, i32 3, i32 4, i32 4, i32 5, i32 4, i32 5, i32 5, i32 6, i32 4, i32 5, i32 5, i32 6, i32 5, i32 6, i32 6, i32 7, i32 1, i32 2, i32 2, i32 3, i32 2, i32 3, i32 3, i32 4, i32 2, i32 3, i32 3, i32 4, i32 3, i32 4, i32 4, i32 5, i32 2, i32 3, i32 3, i32 4, i32 3, i32 4, i32 4, i32 5, i32 3, i32 4, i32 4, i32 5, i32 4, i32 5, i32 5, i32 6, i32 2, i32 3, i32 3, i32 4, i32 3, i32 4, i32 4, i32 5, i32 3, i32 4, i32 4, i32 5, i32 4, i32 5, i32 5, i32 6, i32 3, i32 4, i32 4, i32 5, i32 4, i32 5, i32 5, i32 6, i32 4, i32 5, i32 5, i32 6, i32 5, i32 6, i32 6, i32 7, i32 2, i32 3, i32 3, i32 4, i32 3, i32 4, i32 4, i32 5, i32 3, i32 4, i32 4, i32 5, i32 4, i32 5, i32 5, i32 6, i32 3, i32 4, i32 4, i32 5, i32 4, i32 5, i32 5, i32 6, i32 4, i32 5, i32 5, i32 6, i32 5, i32 6, i32 6, i32 7, i32 3, i32 4, i32 4, i32 5, i32 4, i32 5, i32 5, i32 6, i32 4, i32 5, i32 5, i32 6, i32 5, i32 6, i32 6, i32 7, i32 4, i32 5, i32 5, i32 6, i32 5, i32 6, i32 6, i32 7, i32 5, i32 6, i32 6, i32 7, i32 6, i32 7, i32 7, i32 8], align 16
@start_time = internal global i64 0, align 8
@.str.538 = private unnamed_addr constant [41 x i8] c"# SHARP[%d]: %4d = %4d x %4d, time = %s\0A\00", align 1
@force_irredundant = internal global i32 0, align 4
@cdata = internal global %struct.cdata_struct zeroinitializer, align 8
@debug = internal global i32 0, align 4
@.str.572 = private unnamed_addr constant [48 x i8] c"# EXACT_MINCOV[%d]: %4d = %4d x %4d, time = %s\0A\00", align 1
@.str.2.567 = private unnamed_addr constant [54 x i8] c"abs_select_restricted: should not have best_var == -1\00", align 1
@str.573 = private unnamed_addr constant [43 x i8] c"MINCOV: family of all minimal coverings is\00", align 1
@.str.578 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@verbose_debug = internal global i32 0, align 4
@stderr = external local_unnamed_addr global ptr, align 8
@.str.3.586 = private unnamed_addr constant [47 x i8] c"Warning: cannot permute columns without names\0A\00", align 1
@.str.4.587 = private unnamed_addr constant [41 x i8] c"PLA_verify: PLA's are not the same size\0A\00", align 1
@cube = internal global %struct.cube_struct zeroinitializer, align 8
@stdout = external local_unnamed_addr global ptr, align 8
@str.583 = private unnamed_addr constant [48 x i8] c"some minterm in Fold is not covered by F u Dold\00", align 1
@str.13 = private unnamed_addr constant [48 x i8] c"some minterm in F is not covered by Fold u Dold\00", align 1
@str.14 = private unnamed_addr constant [55 x i8] c"Some minterm(s) belong to both the ON-SET and DC-SET !\00", align 1
@str.15 = private unnamed_addr constant [56 x i8] c"Some minterm(s) belong to both the ON-SET and OFF-SET !\00", align 1
@str.16 = private unnamed_addr constant [56 x i8] c"Some minterm(s) belong to both the OFF-SET and DC-SET !\00", align 1
@str.17 = private unnamed_addr constant [38 x i8] c"There are minterms left unspecified !\00", align 1
@str.18 = private unnamed_addr constant [52 x i8] c"Union of ON-SET, OFF-SET and DC-SET is the universe\00", align 1
@str.19.590 = private unnamed_addr constant [32 x i8] c"DC-SET and OFF-SET are disjoint\00", align 1
@str.20 = private unnamed_addr constant [32 x i8] c"ON-SET and OFF-SET are disjoint\00", align 1
@str.21 = private unnamed_addr constant [31 x i8] c"ON-SET and DC-SET are disjoint\00", align 1

; Function Attrs: nounwind optsize uwtable
define internal ptr @cofactor(ptr noundef %0, ptr noundef %1) #0 {
  %3 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 11), align 8, !tbaa !7
  %4 = load ptr, ptr %3, align 8, !tbaa !13
  %5 = getelementptr inbounds ptr, ptr %0, i64 1
  %6 = load ptr, ptr %5, align 8, !tbaa !13
  %7 = ptrtoint ptr %6 to i64
  %8 = ptrtoint ptr %0 to i64
  %9 = sub i64 %7, %8
  %10 = shl i64 %9, 29
  %11 = add i64 %10, 8589934592
  %12 = ashr exact i64 %11, 29
  %13 = and i64 %12, -8
  %14 = tail call noalias ptr @malloc(i64 noundef %13) #42
  %15 = load i32, ptr @cube, align 8, !tbaa !14
  %16 = icmp slt i32 %15, 33
  %17 = add nsw i32 %15, -1
  %18 = lshr i32 %17, 3
  %19 = and i32 %18, 536870908
  %20 = add nuw nsw i32 %19, 8
  %21 = select i1 %16, i32 8, i32 %20
  %22 = zext i32 %21 to i64
  %23 = tail call noalias ptr @malloc(i64 noundef %22) #42
  %24 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %23, i32 noundef %15) #43
  %25 = load ptr, ptr %0, align 8, !tbaa !13
  %26 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %27 = tail call ptr (ptr, ptr, ptr, ...) @set_diff(ptr noundef %4, ptr noundef %26, ptr noundef %1) #43
  %28 = tail call ptr (ptr, ptr, ptr, ...) @set_or(ptr noundef %24, ptr noundef %25, ptr noundef %27) #43
  store ptr %28, ptr %14, align 8, !tbaa !13
  %29 = getelementptr inbounds ptr, ptr %14, i64 2
  %30 = getelementptr inbounds ptr, ptr %0, i64 2
  %31 = load ptr, ptr %30, align 8, !tbaa !13
  %32 = icmp eq ptr %31, null
  br i1 %32, label %120, label %33

33:                                               ; preds = %2
  %34 = getelementptr inbounds ptr, ptr %0, i64 3
  %35 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 15), align 4
  %36 = icmp eq i32 %35, -1
  %37 = sext i32 %35 to i64
  %38 = getelementptr inbounds i32, ptr %1, i64 %37
  %39 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 14), align 8
  %40 = icmp sgt i32 %35, 1
  %41 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8
  %42 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4
  %43 = icmp slt i32 %41, %42
  %44 = sext i32 %41 to i64
  %45 = zext i32 %35 to i64
  %46 = sext i32 %42 to i64
  br label %47

47:                                               ; preds = %115, %33
  %48 = phi ptr [ %31, %33 ], [ %118, %115 ]
  %49 = phi ptr [ %34, %33 ], [ %117, %115 ]
  %50 = phi ptr [ %29, %33 ], [ %116, %115 ]
  %51 = icmp eq ptr %48, %1
  br i1 %51, label %115, label %52

52:                                               ; preds = %47
  br i1 %36, label %78, label %53

53:                                               ; preds = %52
  %54 = getelementptr inbounds i32, ptr %48, i64 %37
  %55 = load i32, ptr %54, align 4, !tbaa !16
  %56 = load i32, ptr %38, align 4, !tbaa !16
  %57 = and i32 %56, %55
  %58 = lshr i32 %57, 1
  %59 = or i32 %58, %57
  %60 = xor i32 %59, -1
  %61 = and i32 %39, %60
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %115

63:                                               ; preds = %53
  br i1 %40, label %67, label %78

64:                                               ; preds = %67
  %65 = add nuw nsw i64 %68, 1
  %66 = icmp eq i64 %65, %45
  br i1 %66, label %78, label %67

67:                                               ; preds = %64, %63
  %68 = phi i64 [ %65, %64 ], [ 1, %63 ]
  %69 = getelementptr inbounds i32, ptr %48, i64 %68
  %70 = load i32, ptr %69, align 4, !tbaa !16
  %71 = getelementptr inbounds i32, ptr %1, i64 %68
  %72 = load i32, ptr %71, align 4, !tbaa !16
  %73 = and i32 %72, %70
  %74 = lshr i32 %73, 1
  %75 = or i32 %74, %73
  %76 = and i32 %75, 1431655765
  %77 = icmp eq i32 %76, 1431655765
  br i1 %77, label %64, label %115

78:                                               ; preds = %64, %63, %52
  br i1 %43, label %79, label %113

79:                                               ; preds = %78
  %80 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %81 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 7), align 8, !tbaa !18
  %82 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 6), align 8, !tbaa !19
  br label %83

83:                                               ; preds = %110, %79
  %84 = phi i64 [ %44, %79 ], [ %111, %110 ]
  %85 = getelementptr inbounds ptr, ptr %80, i64 %84
  %86 = load ptr, ptr %85, align 8, !tbaa !13
  %87 = getelementptr inbounds i32, ptr %81, i64 %84
  %88 = load i32, ptr %87, align 4, !tbaa !16
  %89 = getelementptr inbounds i32, ptr %82, i64 %84
  %90 = load i32, ptr %89, align 4, !tbaa !16
  %91 = icmp sgt i32 %90, %88
  br i1 %91, label %115, label %92

92:                                               ; preds = %83
  %93 = sext i32 %90 to i64
  %94 = add i32 %88, 1
  br label %99

95:                                               ; preds = %99
  %96 = add nsw i64 %100, 1
  %97 = trunc i64 %96 to i32
  %98 = icmp eq i32 %94, %97
  br i1 %98, label %115, label %99

99:                                               ; preds = %95, %92
  %100 = phi i64 [ %93, %92 ], [ %96, %95 ]
  %101 = getelementptr inbounds i32, ptr %48, i64 %100
  %102 = load i32, ptr %101, align 4, !tbaa !16
  %103 = getelementptr inbounds i32, ptr %1, i64 %100
  %104 = load i32, ptr %103, align 4, !tbaa !16
  %105 = and i32 %104, %102
  %106 = getelementptr inbounds i32, ptr %86, i64 %100
  %107 = load i32, ptr %106, align 4, !tbaa !16
  %108 = and i32 %105, %107
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %95, label %110

110:                                              ; preds = %99
  %111 = add nsw i64 %84, 1
  %112 = icmp eq i64 %111, %46
  br i1 %112, label %113, label %83

113:                                              ; preds = %110, %78
  %114 = getelementptr inbounds ptr, ptr %50, i64 1
  store ptr %48, ptr %50, align 8, !tbaa !13
  br label %115

115:                                              ; preds = %113, %95, %83, %67, %53, %47
  %116 = phi ptr [ %114, %113 ], [ %50, %47 ], [ %50, %53 ], [ %50, %95 ], [ %50, %83 ], [ %50, %67 ]
  %117 = getelementptr inbounds ptr, ptr %49, i64 1
  %118 = load ptr, ptr %49, align 8, !tbaa !13
  %119 = icmp eq ptr %118, null
  br i1 %119, label %120, label %47

120:                                              ; preds = %115, %2
  %121 = phi ptr [ %29, %2 ], [ %116, %115 ]
  %122 = getelementptr inbounds ptr, ptr %121, i64 1
  store ptr null, ptr %121, align 8, !tbaa !13
  %123 = getelementptr inbounds ptr, ptr %14, i64 1
  store ptr %122, ptr %123, align 8, !tbaa !13
  ret ptr %14
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #1

; Function Attrs: nounwind optsize uwtable
define internal ptr @scofactor(ptr noundef %0, ptr noundef %1, i32 noundef %2) #0 {
  %4 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 11), align 8, !tbaa !7
  %5 = getelementptr inbounds ptr, ptr %4, i64 1
  %6 = load ptr, ptr %5, align 8, !tbaa !13
  %7 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 6), align 8, !tbaa !19
  %8 = sext i32 %2 to i64
  %9 = getelementptr inbounds i32, ptr %7, i64 %8
  %10 = load i32, ptr %9, align 4, !tbaa !16
  %11 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 7), align 8, !tbaa !18
  %12 = getelementptr inbounds i32, ptr %11, i64 %8
  %13 = load i32, ptr %12, align 4, !tbaa !16
  %14 = getelementptr inbounds ptr, ptr %0, i64 1
  %15 = load ptr, ptr %14, align 8, !tbaa !13
  %16 = ptrtoint ptr %15 to i64
  %17 = ptrtoint ptr %0 to i64
  %18 = sub i64 %16, %17
  %19 = shl i64 %18, 29
  %20 = add i64 %19, 8589934592
  %21 = ashr exact i64 %20, 29
  %22 = and i64 %21, -8
  %23 = tail call noalias ptr @malloc(i64 noundef %22) #42
  %24 = load i32, ptr @cube, align 8, !tbaa !14
  %25 = icmp slt i32 %24, 33
  %26 = add nsw i32 %24, -1
  %27 = lshr i32 %26, 3
  %28 = and i32 %27, 536870908
  %29 = add nuw nsw i32 %28, 8
  %30 = select i1 %25, i32 8, i32 %29
  %31 = zext i32 %30 to i64
  %32 = tail call noalias ptr @malloc(i64 noundef %31) #42
  %33 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %32, i32 noundef %24) #43
  %34 = load ptr, ptr %0, align 8, !tbaa !13
  %35 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %36 = tail call ptr (ptr, ptr, ptr, ...) @set_diff(ptr noundef %6, ptr noundef %35, ptr noundef %1) #43
  %37 = tail call ptr (ptr, ptr, ptr, ...) @set_or(ptr noundef %33, ptr noundef %34, ptr noundef %36) #43
  store ptr %37, ptr %23, align 8, !tbaa !13
  %38 = getelementptr inbounds ptr, ptr %23, i64 2
  %39 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %40 = getelementptr inbounds ptr, ptr %39, i64 %8
  %41 = load ptr, ptr %40, align 8, !tbaa !13
  %42 = tail call ptr (ptr, ptr, ptr, ...) @set_and(ptr noundef %6, ptr noundef %41, ptr noundef %1) #43
  %43 = getelementptr inbounds ptr, ptr %0, i64 2
  %44 = load ptr, ptr %43, align 8, !tbaa !13
  %45 = icmp eq ptr %44, null
  br i1 %45, label %75, label %46

46:                                               ; preds = %3
  %47 = getelementptr inbounds ptr, ptr %0, i64 3
  %48 = sext i32 %10 to i64
  %49 = tail call i32 @llvm.smax.i32(i32 %10, i32 %13)
  %50 = add i32 %49, 1
  br label %51

51:                                               ; preds = %70, %46
  %52 = phi ptr [ %73, %70 ], [ %44, %46 ]
  %53 = phi ptr [ %72, %70 ], [ %47, %46 ]
  %54 = phi ptr [ %71, %70 ], [ %38, %46 ]
  %55 = icmp eq ptr %52, %1
  br i1 %55, label %70, label %56

56:                                               ; preds = %66, %51
  %57 = phi i64 [ %67, %66 ], [ %48, %51 ]
  %58 = getelementptr inbounds i32, ptr %52, i64 %57
  %59 = load i32, ptr %58, align 4, !tbaa !16
  %60 = getelementptr inbounds i32, ptr %6, i64 %57
  %61 = load i32, ptr %60, align 4, !tbaa !16
  %62 = and i32 %61, %59
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %66, label %64

64:                                               ; preds = %56
  %65 = getelementptr inbounds ptr, ptr %54, i64 1
  store ptr %52, ptr %54, align 8, !tbaa !13
  br label %70

66:                                               ; preds = %56
  %67 = add nsw i64 %57, 1
  %68 = trunc i64 %67 to i32
  %69 = icmp eq i32 %50, %68
  br i1 %69, label %70, label %56

70:                                               ; preds = %66, %64, %51
  %71 = phi ptr [ %54, %51 ], [ %65, %64 ], [ %54, %66 ]
  %72 = getelementptr inbounds ptr, ptr %53, i64 1
  %73 = load ptr, ptr %53, align 8, !tbaa !13
  %74 = icmp eq ptr %73, null
  br i1 %74, label %75, label %51

75:                                               ; preds = %70, %3
  %76 = phi ptr [ %38, %3 ], [ %71, %70 ]
  %77 = getelementptr inbounds ptr, ptr %76, i64 1
  store ptr null, ptr %76, align 8, !tbaa !13
  %78 = getelementptr inbounds ptr, ptr %23, i64 1
  store ptr %77, ptr %78, align 8, !tbaa !13
  ret ptr %23
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #2

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @massive_count(ptr nocapture noundef readonly %0) #3 {
  %2 = load ptr, ptr @cdata, align 8, !tbaa !20
  %3 = load i32, ptr @cube, align 8, !tbaa !14
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = zext i32 %3 to i64
  %7 = shl nuw nsw i64 %6, 2
  tail call void @llvm.memset.p0.i64(ptr align 4 %2, i8 0, i64 %7, i1 false), !tbaa !16
  br label %8

8:                                                ; preds = %5, %1
  %9 = load ptr, ptr %0, align 8, !tbaa !13
  %10 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %11 = getelementptr inbounds ptr, ptr %0, i64 2
  %12 = load ptr, ptr %11, align 8, !tbaa !13
  %13 = icmp eq ptr %12, null
  br i1 %13, label %281, label %14

14:                                               ; preds = %8
  %15 = getelementptr inbounds ptr, ptr %0, i64 3
  br label %20

16:                                               ; preds = %278, %20
  %17 = getelementptr inbounds ptr, ptr %22, i64 1
  %18 = load ptr, ptr %22, align 8, !tbaa !13
  %19 = icmp eq ptr %18, null
  br i1 %19, label %281, label %20

20:                                               ; preds = %16, %14
  %21 = phi ptr [ %18, %16 ], [ %12, %14 ]
  %22 = phi ptr [ %17, %16 ], [ %15, %14 ]
  %23 = load i32, ptr %21, align 4, !tbaa !16
  %24 = and i32 %23, 1023
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %16, label %26

26:                                               ; preds = %20
  %27 = and i32 %23, 1023
  %28 = zext i32 %27 to i64
  br label %29

29:                                               ; preds = %278, %26
  %30 = phi i64 [ %28, %26 ], [ %279, %278 ]
  %31 = getelementptr inbounds i32, ptr %10, i64 %30
  %32 = load i32, ptr %31, align 4, !tbaa !16
  %33 = getelementptr inbounds i32, ptr %21, i64 %30
  %34 = load i32, ptr %33, align 4, !tbaa !16
  %35 = getelementptr inbounds i32, ptr %9, i64 %30
  %36 = load i32, ptr %35, align 4, !tbaa !16
  %37 = or i32 %36, %34
  %38 = xor i32 %37, -1
  %39 = and i32 %32, %38
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %278, label %41

41:                                               ; preds = %29
  %42 = shl i64 %30, 5
  %43 = add i64 %42, 4294967264
  %44 = and i64 %43, 4294967264
  %45 = getelementptr inbounds i32, ptr %2, i64 %44
  %46 = icmp ult i32 %39, 16777216
  br i1 %46, label %102, label %47

47:                                               ; preds = %41
  %48 = icmp sgt i32 %39, -1
  br i1 %48, label %53, label %49

49:                                               ; preds = %47
  %50 = getelementptr inbounds i32, ptr %45, i64 31
  %51 = load i32, ptr %50, align 4, !tbaa !16
  %52 = add nsw i32 %51, 1
  store i32 %52, ptr %50, align 4, !tbaa !16
  br label %53

53:                                               ; preds = %49, %47
  %54 = and i32 %39, 1073741824
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %60, label %56

56:                                               ; preds = %53
  %57 = getelementptr inbounds i32, ptr %45, i64 30
  %58 = load i32, ptr %57, align 4, !tbaa !16
  %59 = add nsw i32 %58, 1
  store i32 %59, ptr %57, align 4, !tbaa !16
  br label %60

60:                                               ; preds = %56, %53
  %61 = and i32 %39, 536870912
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %67, label %63

63:                                               ; preds = %60
  %64 = getelementptr inbounds i32, ptr %45, i64 29
  %65 = load i32, ptr %64, align 4, !tbaa !16
  %66 = add nsw i32 %65, 1
  store i32 %66, ptr %64, align 4, !tbaa !16
  br label %67

67:                                               ; preds = %63, %60
  %68 = and i32 %39, 268435456
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %74, label %70

70:                                               ; preds = %67
  %71 = getelementptr inbounds i32, ptr %45, i64 28
  %72 = load i32, ptr %71, align 4, !tbaa !16
  %73 = add nsw i32 %72, 1
  store i32 %73, ptr %71, align 4, !tbaa !16
  br label %74

74:                                               ; preds = %70, %67
  %75 = and i32 %39, 134217728
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %81, label %77

77:                                               ; preds = %74
  %78 = getelementptr inbounds i32, ptr %45, i64 27
  %79 = load i32, ptr %78, align 4, !tbaa !16
  %80 = add nsw i32 %79, 1
  store i32 %80, ptr %78, align 4, !tbaa !16
  br label %81

81:                                               ; preds = %77, %74
  %82 = and i32 %39, 67108864
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %88, label %84

84:                                               ; preds = %81
  %85 = getelementptr inbounds i32, ptr %45, i64 26
  %86 = load i32, ptr %85, align 4, !tbaa !16
  %87 = add nsw i32 %86, 1
  store i32 %87, ptr %85, align 4, !tbaa !16
  br label %88

88:                                               ; preds = %84, %81
  %89 = and i32 %39, 33554432
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %95, label %91

91:                                               ; preds = %88
  %92 = getelementptr inbounds i32, ptr %45, i64 25
  %93 = load i32, ptr %92, align 4, !tbaa !16
  %94 = add nsw i32 %93, 1
  store i32 %94, ptr %92, align 4, !tbaa !16
  br label %95

95:                                               ; preds = %91, %88
  %96 = and i32 %39, 16777216
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %102, label %98

98:                                               ; preds = %95
  %99 = getelementptr inbounds i32, ptr %45, i64 24
  %100 = load i32, ptr %99, align 4, !tbaa !16
  %101 = add nsw i32 %100, 1
  store i32 %101, ptr %99, align 4, !tbaa !16
  br label %102

102:                                              ; preds = %98, %95, %41
  %103 = and i32 %39, 16711680
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %161, label %105

105:                                              ; preds = %102
  %106 = and i32 %39, 8388608
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %112, label %108

108:                                              ; preds = %105
  %109 = getelementptr inbounds i32, ptr %45, i64 23
  %110 = load i32, ptr %109, align 4, !tbaa !16
  %111 = add nsw i32 %110, 1
  store i32 %111, ptr %109, align 4, !tbaa !16
  br label %112

112:                                              ; preds = %108, %105
  %113 = and i32 %39, 4194304
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %119, label %115

115:                                              ; preds = %112
  %116 = getelementptr inbounds i32, ptr %45, i64 22
  %117 = load i32, ptr %116, align 4, !tbaa !16
  %118 = add nsw i32 %117, 1
  store i32 %118, ptr %116, align 4, !tbaa !16
  br label %119

119:                                              ; preds = %115, %112
  %120 = and i32 %39, 2097152
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %126, label %122

122:                                              ; preds = %119
  %123 = getelementptr inbounds i32, ptr %45, i64 21
  %124 = load i32, ptr %123, align 4, !tbaa !16
  %125 = add nsw i32 %124, 1
  store i32 %125, ptr %123, align 4, !tbaa !16
  br label %126

126:                                              ; preds = %122, %119
  %127 = and i32 %39, 1048576
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %133, label %129

129:                                              ; preds = %126
  %130 = getelementptr inbounds i32, ptr %45, i64 20
  %131 = load i32, ptr %130, align 4, !tbaa !16
  %132 = add nsw i32 %131, 1
  store i32 %132, ptr %130, align 4, !tbaa !16
  br label %133

133:                                              ; preds = %129, %126
  %134 = and i32 %39, 524288
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %140, label %136

136:                                              ; preds = %133
  %137 = getelementptr inbounds i32, ptr %45, i64 19
  %138 = load i32, ptr %137, align 4, !tbaa !16
  %139 = add nsw i32 %138, 1
  store i32 %139, ptr %137, align 4, !tbaa !16
  br label %140

140:                                              ; preds = %136, %133
  %141 = and i32 %39, 262144
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %147, label %143

143:                                              ; preds = %140
  %144 = getelementptr inbounds i32, ptr %45, i64 18
  %145 = load i32, ptr %144, align 4, !tbaa !16
  %146 = add nsw i32 %145, 1
  store i32 %146, ptr %144, align 4, !tbaa !16
  br label %147

147:                                              ; preds = %143, %140
  %148 = and i32 %39, 131072
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %154, label %150

150:                                              ; preds = %147
  %151 = getelementptr inbounds i32, ptr %45, i64 17
  %152 = load i32, ptr %151, align 4, !tbaa !16
  %153 = add nsw i32 %152, 1
  store i32 %153, ptr %151, align 4, !tbaa !16
  br label %154

154:                                              ; preds = %150, %147
  %155 = and i32 %39, 65536
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %161, label %157

157:                                              ; preds = %154
  %158 = getelementptr inbounds i32, ptr %45, i64 16
  %159 = load i32, ptr %158, align 4, !tbaa !16
  %160 = add nsw i32 %159, 1
  store i32 %160, ptr %158, align 4, !tbaa !16
  br label %161

161:                                              ; preds = %157, %154, %102
  %162 = and i32 %39, 65280
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %220, label %164

164:                                              ; preds = %161
  %165 = and i32 %39, 32768
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %171, label %167

167:                                              ; preds = %164
  %168 = getelementptr inbounds i32, ptr %45, i64 15
  %169 = load i32, ptr %168, align 4, !tbaa !16
  %170 = add nsw i32 %169, 1
  store i32 %170, ptr %168, align 4, !tbaa !16
  br label %171

171:                                              ; preds = %167, %164
  %172 = and i32 %39, 16384
  %173 = icmp eq i32 %172, 0
  br i1 %173, label %178, label %174

174:                                              ; preds = %171
  %175 = getelementptr inbounds i32, ptr %45, i64 14
  %176 = load i32, ptr %175, align 4, !tbaa !16
  %177 = add nsw i32 %176, 1
  store i32 %177, ptr %175, align 4, !tbaa !16
  br label %178

178:                                              ; preds = %174, %171
  %179 = and i32 %39, 8192
  %180 = icmp eq i32 %179, 0
  br i1 %180, label %185, label %181

181:                                              ; preds = %178
  %182 = getelementptr inbounds i32, ptr %45, i64 13
  %183 = load i32, ptr %182, align 4, !tbaa !16
  %184 = add nsw i32 %183, 1
  store i32 %184, ptr %182, align 4, !tbaa !16
  br label %185

185:                                              ; preds = %181, %178
  %186 = and i32 %39, 4096
  %187 = icmp eq i32 %186, 0
  br i1 %187, label %192, label %188

188:                                              ; preds = %185
  %189 = getelementptr inbounds i32, ptr %45, i64 12
  %190 = load i32, ptr %189, align 4, !tbaa !16
  %191 = add nsw i32 %190, 1
  store i32 %191, ptr %189, align 4, !tbaa !16
  br label %192

192:                                              ; preds = %188, %185
  %193 = and i32 %39, 2048
  %194 = icmp eq i32 %193, 0
  br i1 %194, label %199, label %195

195:                                              ; preds = %192
  %196 = getelementptr inbounds i32, ptr %45, i64 11
  %197 = load i32, ptr %196, align 4, !tbaa !16
  %198 = add nsw i32 %197, 1
  store i32 %198, ptr %196, align 4, !tbaa !16
  br label %199

199:                                              ; preds = %195, %192
  %200 = and i32 %39, 1024
  %201 = icmp eq i32 %200, 0
  br i1 %201, label %206, label %202

202:                                              ; preds = %199
  %203 = getelementptr inbounds i32, ptr %45, i64 10
  %204 = load i32, ptr %203, align 4, !tbaa !16
  %205 = add nsw i32 %204, 1
  store i32 %205, ptr %203, align 4, !tbaa !16
  br label %206

206:                                              ; preds = %202, %199
  %207 = and i32 %39, 512
  %208 = icmp eq i32 %207, 0
  br i1 %208, label %213, label %209

209:                                              ; preds = %206
  %210 = getelementptr inbounds i32, ptr %45, i64 9
  %211 = load i32, ptr %210, align 4, !tbaa !16
  %212 = add nsw i32 %211, 1
  store i32 %212, ptr %210, align 4, !tbaa !16
  br label %213

213:                                              ; preds = %209, %206
  %214 = and i32 %39, 256
  %215 = icmp eq i32 %214, 0
  br i1 %215, label %220, label %216

216:                                              ; preds = %213
  %217 = getelementptr inbounds i32, ptr %45, i64 8
  %218 = load i32, ptr %217, align 4, !tbaa !16
  %219 = add nsw i32 %218, 1
  store i32 %219, ptr %217, align 4, !tbaa !16
  br label %220

220:                                              ; preds = %216, %213, %161
  %221 = and i32 %39, 255
  %222 = icmp eq i32 %221, 0
  br i1 %222, label %278, label %223

223:                                              ; preds = %220
  %224 = and i32 %39, 128
  %225 = icmp eq i32 %224, 0
  br i1 %225, label %230, label %226

226:                                              ; preds = %223
  %227 = getelementptr inbounds i32, ptr %45, i64 7
  %228 = load i32, ptr %227, align 4, !tbaa !16
  %229 = add nsw i32 %228, 1
  store i32 %229, ptr %227, align 4, !tbaa !16
  br label %230

230:                                              ; preds = %226, %223
  %231 = and i32 %39, 64
  %232 = icmp eq i32 %231, 0
  br i1 %232, label %237, label %233

233:                                              ; preds = %230
  %234 = getelementptr inbounds i32, ptr %45, i64 6
  %235 = load i32, ptr %234, align 4, !tbaa !16
  %236 = add nsw i32 %235, 1
  store i32 %236, ptr %234, align 4, !tbaa !16
  br label %237

237:                                              ; preds = %233, %230
  %238 = and i32 %39, 32
  %239 = icmp eq i32 %238, 0
  br i1 %239, label %244, label %240

240:                                              ; preds = %237
  %241 = getelementptr inbounds i32, ptr %45, i64 5
  %242 = load i32, ptr %241, align 4, !tbaa !16
  %243 = add nsw i32 %242, 1
  store i32 %243, ptr %241, align 4, !tbaa !16
  br label %244

244:                                              ; preds = %240, %237
  %245 = and i32 %39, 16
  %246 = icmp eq i32 %245, 0
  br i1 %246, label %251, label %247

247:                                              ; preds = %244
  %248 = getelementptr inbounds i32, ptr %45, i64 4
  %249 = load i32, ptr %248, align 4, !tbaa !16
  %250 = add nsw i32 %249, 1
  store i32 %250, ptr %248, align 4, !tbaa !16
  br label %251

251:                                              ; preds = %247, %244
  %252 = and i32 %39, 8
  %253 = icmp eq i32 %252, 0
  br i1 %253, label %258, label %254

254:                                              ; preds = %251
  %255 = getelementptr inbounds i32, ptr %45, i64 3
  %256 = load i32, ptr %255, align 4, !tbaa !16
  %257 = add nsw i32 %256, 1
  store i32 %257, ptr %255, align 4, !tbaa !16
  br label %258

258:                                              ; preds = %254, %251
  %259 = and i32 %39, 4
  %260 = icmp eq i32 %259, 0
  br i1 %260, label %265, label %261

261:                                              ; preds = %258
  %262 = getelementptr inbounds i32, ptr %45, i64 2
  %263 = load i32, ptr %262, align 4, !tbaa !16
  %264 = add nsw i32 %263, 1
  store i32 %264, ptr %262, align 4, !tbaa !16
  br label %265

265:                                              ; preds = %261, %258
  %266 = and i32 %39, 2
  %267 = icmp eq i32 %266, 0
  br i1 %267, label %272, label %268

268:                                              ; preds = %265
  %269 = getelementptr inbounds i32, ptr %45, i64 1
  %270 = load i32, ptr %269, align 4, !tbaa !16
  %271 = add nsw i32 %270, 1
  store i32 %271, ptr %269, align 4, !tbaa !16
  br label %272

272:                                              ; preds = %268, %265
  %273 = and i32 %39, 1
  %274 = icmp eq i32 %273, 0
  br i1 %274, label %278, label %275

275:                                              ; preds = %272
  %276 = load i32, ptr %45, align 4, !tbaa !16
  %277 = add nsw i32 %276, 1
  store i32 %277, ptr %45, align 4, !tbaa !16
  br label %278

278:                                              ; preds = %275, %272, %220, %29
  %279 = add nsw i64 %30, -1
  %280 = icmp sgt i64 %30, 1
  br i1 %280, label %29, label %16

281:                                              ; preds = %16, %8
  store i32 0, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 4), align 8, !tbaa !22
  store i32 0, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 5), align 4, !tbaa !23
  %282 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %283 = icmp sgt i32 %282, 0
  br i1 %283, label %284, label %375

284:                                              ; preds = %281
  %285 = load ptr, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 1), align 8
  %286 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8
  %287 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8
  %288 = load ptr, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 2), align 8, !tbaa !25
  %289 = load ptr, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 3), align 8, !tbaa !26
  br label %290

290:                                              ; preds = %356, %284
  %291 = phi i64 [ 0, %284 ], [ %371, %356 ]
  %292 = phi i32 [ 32000, %284 ], [ %360, %356 ]
  %293 = phi i32 [ 0, %284 ], [ %359, %356 ]
  %294 = phi i32 [ 0, %284 ], [ %358, %356 ]
  %295 = phi i32 [ -1, %284 ], [ %357, %356 ]
  %296 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %297 = sext i32 %296 to i64
  %298 = icmp slt i64 %291, %297
  br i1 %298, label %299, label %314

299:                                              ; preds = %290
  %300 = shl nuw nsw i64 %291, 1
  %301 = getelementptr inbounds i32, ptr %2, i64 %300
  %302 = load i32, ptr %301, align 4, !tbaa !16
  %303 = or i64 %300, 1
  %304 = getelementptr inbounds i32, ptr %2, i64 %303
  %305 = load i32, ptr %304, align 4, !tbaa !16
  %306 = icmp sgt i32 %302, 0
  %307 = zext i1 %306 to i32
  %308 = icmp sgt i32 %305, 0
  %309 = zext i1 %308 to i32
  %310 = add nuw nsw i32 %309, %307
  %311 = add nsw i32 %305, %302
  %312 = getelementptr inbounds i32, ptr %285, i64 %291
  store i32 %311, ptr %312, align 4, !tbaa !16
  %313 = tail call i32 @llvm.smax.i32(i32 %302, i32 %305)
  br label %340

314:                                              ; preds = %290
  %315 = getelementptr inbounds i32, ptr %285, i64 %291
  store i32 0, ptr %315, align 4, !tbaa !16
  %316 = getelementptr inbounds i32, ptr %286, i64 %291
  %317 = load i32, ptr %316, align 4, !tbaa !16
  %318 = getelementptr inbounds i32, ptr %287, i64 %291
  %319 = load i32, ptr %318, align 4, !tbaa !16
  %320 = icmp sgt i32 %319, %317
  br i1 %320, label %340, label %321

321:                                              ; preds = %314
  %322 = sext i32 %319 to i64
  %323 = add i32 %317, 1
  br label %324

324:                                              ; preds = %324, %321
  %325 = phi i64 [ %322, %321 ], [ %337, %324 ]
  %326 = phi i32 [ 0, %321 ], [ %331, %324 ]
  %327 = phi i32 [ 0, %321 ], [ %336, %324 ]
  %328 = phi i32 [ 0, %321 ], [ %335, %324 ]
  %329 = getelementptr inbounds i32, ptr %2, i64 %325
  %330 = load i32, ptr %329, align 4, !tbaa !16
  %331 = add nsw i32 %326, %330
  store i32 %331, ptr %315, align 4, !tbaa !16
  %332 = load i32, ptr %329, align 4, !tbaa !16
  %333 = icmp sgt i32 %332, 0
  %334 = zext i1 %333 to i32
  %335 = add nuw nsw i32 %328, %334
  %336 = tail call i32 @llvm.smax.i32(i32 %335, i32 %327)
  %337 = add nsw i64 %325, 1
  %338 = trunc i64 %337 to i32
  %339 = icmp eq i32 %323, %338
  br i1 %339, label %340, label %324

340:                                              ; preds = %324, %314, %299
  %341 = phi i32 [ %311, %299 ], [ 0, %314 ], [ %331, %324 ]
  %342 = phi i32 [ %310, %299 ], [ 0, %314 ], [ %335, %324 ]
  %343 = phi i32 [ %313, %299 ], [ 0, %314 ], [ %336, %324 ]
  %344 = icmp sgt i32 %342, %294
  %345 = trunc i64 %291 to i32
  br i1 %344, label %356, label %346

346:                                              ; preds = %340
  %347 = icmp eq i32 %342, %294
  br i1 %347, label %348, label %356

348:                                              ; preds = %346
  %349 = icmp sgt i32 %341, %293
  br i1 %349, label %356, label %350

350:                                              ; preds = %348
  %351 = icmp eq i32 %341, %293
  %352 = icmp slt i32 %343, %292
  %353 = select i1 %351, i1 %352, i1 false
  %354 = select i1 %353, i32 %345, i32 %295
  %355 = select i1 %353, i32 %343, i32 %292
  br label %356

356:                                              ; preds = %350, %348, %346, %340
  %357 = phi i32 [ %295, %346 ], [ %345, %348 ], [ %354, %350 ], [ %345, %340 ]
  %358 = phi i32 [ %294, %346 ], [ %294, %348 ], [ %294, %350 ], [ %342, %340 ]
  %359 = phi i32 [ %293, %346 ], [ %341, %348 ], [ %293, %350 ], [ %341, %340 ]
  %360 = phi i32 [ %292, %346 ], [ %343, %348 ], [ %355, %350 ], [ %343, %340 ]
  %361 = getelementptr inbounds i32, ptr %288, i64 %291
  store i32 %342, ptr %361, align 4, !tbaa !16
  %362 = icmp eq i32 %342, 1
  %363 = zext i1 %362 to i32
  %364 = getelementptr inbounds i32, ptr %289, i64 %291
  store i32 %363, ptr %364, align 4, !tbaa !16
  %365 = icmp sgt i32 %342, 0
  %366 = zext i1 %365 to i32
  %367 = load i32, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 4), align 8, !tbaa !22
  %368 = add nsw i32 %367, %366
  store i32 %368, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 4), align 8, !tbaa !22
  %369 = load i32, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 5), align 4, !tbaa !23
  %370 = add nsw i32 %369, %363
  store i32 %370, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 5), align 4, !tbaa !23
  %371 = add nuw nsw i64 %291, 1
  %372 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %373 = sext i32 %372 to i64
  %374 = icmp slt i64 %371, %373
  br i1 %374, label %290, label %375

375:                                              ; preds = %356, %281
  %376 = phi i32 [ -1, %281 ], [ %357, %356 ]
  store i32 %376, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 6), align 8, !tbaa !28
  ret void
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nounwind optsize uwtable
define internal i32 @binate_split_select(ptr nocapture noundef readonly %0, ptr noundef %1, ptr noundef %2, i32 noundef %3) #0 {
  %5 = load i32, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 6), align 8, !tbaa !28
  %6 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  %7 = sext i32 %5 to i64
  %8 = getelementptr inbounds i32, ptr %6, i64 %7
  %9 = load i32, ptr %8, align 4, !tbaa !16
  %10 = load ptr, ptr %0, align 8, !tbaa !13
  %11 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %12 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %13 = getelementptr inbounds ptr, ptr %12, i64 %7
  %14 = load ptr, ptr %13, align 8, !tbaa !13
  %15 = tail call ptr (ptr, ptr, ptr, ...) @set_diff(ptr noundef %1, ptr noundef %11, ptr noundef %14) #43
  %16 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %17 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %18 = getelementptr inbounds ptr, ptr %17, i64 %7
  %19 = load ptr, ptr %18, align 8, !tbaa !13
  %20 = tail call ptr (ptr, ptr, ptr, ...) @set_diff(ptr noundef %2, ptr noundef %16, ptr noundef %19) #43
  %21 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %22 = getelementptr inbounds i32, ptr %21, i64 %7
  %23 = load i32, ptr %22, align 4, !tbaa !16
  %24 = icmp sgt i32 %23, %9
  br i1 %24, label %44, label %25

25:                                               ; preds = %25, %4
  %26 = phi i32 [ %38, %25 ], [ %23, %4 ]
  %27 = phi i32 [ %37, %25 ], [ 0, %4 ]
  %28 = ashr i32 %26, 5
  %29 = add nsw i32 %28, 1
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds i32, ptr %10, i64 %30
  %32 = load i32, ptr %31, align 4, !tbaa !16
  %33 = and i32 %26, 31
  %34 = xor i32 %32, -1
  %35 = lshr i32 %34, %33
  %36 = and i32 %35, 1
  %37 = add nuw nsw i32 %36, %27
  %38 = add i32 %26, 1
  %39 = icmp eq i32 %26, %9
  br i1 %39, label %40, label %25

40:                                               ; preds = %25
  %.lcssa = phi i32 [ %37, %25 ]
  %41 = icmp ult i32 %.lcssa, 2
  br i1 %41, label %44, label %42

42:                                               ; preds = %40
  %43 = lshr i32 %.lcssa, 1
  br label %47

44:                                               ; preds = %64, %40, %4
  %45 = phi i32 [ %23, %40 ], [ %23, %4 ], [ %66, %64 ]
  %46 = icmp sgt i32 %45, %9
  br i1 %46, label %86, label %68

47:                                               ; preds = %64, %42
  %48 = phi i32 [ %66, %64 ], [ %23, %42 ]
  %49 = phi i32 [ %65, %64 ], [ %43, %42 ]
  %50 = ashr i32 %48, 5
  %51 = add nsw i32 %50, 1
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i32, ptr %10, i64 %52
  %54 = load i32, ptr %53, align 4, !tbaa !16
  %55 = and i32 %48, 31
  %56 = shl nuw i32 1, %55
  %57 = and i32 %54, %56
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %64

59:                                               ; preds = %47
  %60 = add nsw i32 %49, -1
  %61 = getelementptr inbounds i32, ptr %1, i64 %52
  %62 = load i32, ptr %61, align 4, !tbaa !16
  %63 = or i32 %62, %56
  store i32 %63, ptr %61, align 4, !tbaa !16
  br label %64

64:                                               ; preds = %59, %47
  %65 = phi i32 [ %49, %47 ], [ %60, %59 ]
  %66 = add nsw i32 %48, 1
  %67 = icmp sgt i32 %65, 0
  br i1 %67, label %47, label %44

68:                                               ; preds = %83, %44
  %69 = phi i32 [ %84, %83 ], [ %45, %44 ]
  %70 = ashr i32 %69, 5
  %71 = add nsw i32 %70, 1
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds i32, ptr %10, i64 %72
  %74 = load i32, ptr %73, align 4, !tbaa !16
  %75 = and i32 %69, 31
  %76 = shl nuw i32 1, %75
  %77 = and i32 %74, %76
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %83

79:                                               ; preds = %68
  %80 = getelementptr inbounds i32, ptr %2, i64 %72
  %81 = load i32, ptr %80, align 4, !tbaa !16
  %82 = or i32 %81, %76
  store i32 %82, ptr %80, align 4, !tbaa !16
  br label %83

83:                                               ; preds = %79, %68
  %84 = add i32 %69, 1
  %85 = icmp eq i32 %69, %9
  br i1 %85, label %86, label %68

86:                                               ; preds = %83, %44
  %87 = load i32, ptr @debug, align 4, !tbaa !16
  %88 = and i32 %87, %3
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %98, label %90

90:                                               ; preds = %86
  %91 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %5) #44
  %92 = load i32, ptr @verbose_debug, align 4, !tbaa !16
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %98, label %94

94:                                               ; preds = %90
  %95 = tail call ptr (ptr, ...) @pc1(ptr noundef %1) #43
  %96 = tail call ptr (ptr, ...) @pc2(ptr noundef %2) #43
  %97 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, ptr noundef %95, ptr noundef %96) #44
  br label %98

98:                                               ; preds = %94, %90, %86
  ret i32 %5
}

; Function Attrs: nofree nounwind optsize
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: nounwind optsize uwtable
define internal ptr @cube1list(ptr nocapture noundef readonly %0) #0 {
  %2 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %3 = load i32, ptr %2, align 4, !tbaa !31
  %4 = add nsw i32 %3, 3
  %5 = sext i32 %4 to i64
  %6 = shl nsw i64 %5, 3
  %7 = tail call noalias ptr @malloc(i64 noundef %6) #42
  %8 = load i32, ptr @cube, align 8, !tbaa !14
  %9 = icmp slt i32 %8, 33
  %10 = add nsw i32 %8, -1
  %11 = lshr i32 %10, 3
  %12 = and i32 %11, 536870908
  %13 = add nuw nsw i32 %12, 8
  %14 = select i1 %9, i32 8, i32 %13
  %15 = zext i32 %14 to i64
  %16 = tail call noalias ptr @malloc(i64 noundef %15) #42
  %17 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %16, i32 noundef %8) #43
  store ptr %17, ptr %7, align 8, !tbaa !13
  %18 = getelementptr inbounds ptr, ptr %7, i64 2
  %19 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %20 = load ptr, ptr %19, align 8, !tbaa !33
  %21 = load i32, ptr %2, align 4, !tbaa !31
  %22 = load i32, ptr %0, align 8, !tbaa !34
  %23 = mul nsw i32 %22, %21
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds i32, ptr %20, i64 %24
  %26 = icmp sgt i32 %23, 0
  br i1 %26, label %27, label %35

27:                                               ; preds = %1
  %28 = sext i32 %22 to i64
  br label %29

29:                                               ; preds = %29, %27
  %30 = phi ptr [ %20, %27 ], [ %33, %29 ]
  %31 = phi ptr [ %18, %27 ], [ %32, %29 ]
  %32 = getelementptr inbounds ptr, ptr %31, i64 1
  store ptr %30, ptr %31, align 8, !tbaa !13
  %33 = getelementptr inbounds i32, ptr %30, i64 %28
  %34 = icmp ult ptr %33, %25
  br i1 %34, label %29, label %35

35:                                               ; preds = %29, %1
  %36 = phi ptr [ %18, %1 ], [ %32, %29 ]
  %37 = getelementptr inbounds ptr, ptr %36, i64 1
  store ptr null, ptr %36, align 8, !tbaa !13
  %38 = getelementptr inbounds ptr, ptr %7, i64 1
  store ptr %37, ptr %38, align 8, !tbaa !13
  ret ptr %7
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @cube2list(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #0 {
  %3 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %4 = load i32, ptr %3, align 4, !tbaa !31
  %5 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 3
  %6 = load i32, ptr %5, align 4, !tbaa !31
  %7 = add i32 %4, 3
  %8 = add i32 %7, %6
  %9 = sext i32 %8 to i64
  %10 = shl nsw i64 %9, 3
  %11 = tail call noalias ptr @malloc(i64 noundef %10) #42
  %12 = load i32, ptr @cube, align 8, !tbaa !14
  %13 = icmp slt i32 %12, 33
  %14 = add nsw i32 %12, -1
  %15 = lshr i32 %14, 3
  %16 = and i32 %15, 536870908
  %17 = add nuw nsw i32 %16, 8
  %18 = select i1 %13, i32 8, i32 %17
  %19 = zext i32 %18 to i64
  %20 = tail call noalias ptr @malloc(i64 noundef %19) #42
  %21 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %20, i32 noundef %12) #43
  store ptr %21, ptr %11, align 8, !tbaa !13
  %22 = getelementptr inbounds ptr, ptr %11, i64 2
  %23 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %24 = load ptr, ptr %23, align 8, !tbaa !33
  %25 = load i32, ptr %3, align 4, !tbaa !31
  %26 = load i32, ptr %0, align 8, !tbaa !34
  %27 = mul nsw i32 %26, %25
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds i32, ptr %24, i64 %28
  %30 = icmp sgt i32 %27, 0
  br i1 %30, label %31, label %39

31:                                               ; preds = %2
  %32 = sext i32 %26 to i64
  br label %33

33:                                               ; preds = %33, %31
  %34 = phi ptr [ %22, %31 ], [ %36, %33 ]
  %35 = phi ptr [ %24, %31 ], [ %37, %33 ]
  %36 = getelementptr inbounds ptr, ptr %34, i64 1
  store ptr %35, ptr %34, align 8, !tbaa !13
  %37 = getelementptr inbounds i32, ptr %35, i64 %32
  %38 = icmp ult ptr %37, %29
  br i1 %38, label %33, label %39

39:                                               ; preds = %33, %2
  %40 = phi ptr [ %22, %2 ], [ %36, %33 ]
  %41 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 5
  %42 = load ptr, ptr %41, align 8, !tbaa !33
  %43 = load i32, ptr %5, align 4, !tbaa !31
  %44 = load i32, ptr %1, align 8, !tbaa !34
  %45 = mul nsw i32 %44, %43
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds i32, ptr %42, i64 %46
  %48 = icmp sgt i32 %45, 0
  br i1 %48, label %49, label %57

49:                                               ; preds = %39
  %50 = sext i32 %44 to i64
  br label %51

51:                                               ; preds = %51, %49
  %52 = phi ptr [ %40, %49 ], [ %54, %51 ]
  %53 = phi ptr [ %42, %49 ], [ %55, %51 ]
  %54 = getelementptr inbounds ptr, ptr %52, i64 1
  store ptr %53, ptr %52, align 8, !tbaa !13
  %55 = getelementptr inbounds i32, ptr %53, i64 %50
  %56 = icmp ult ptr %55, %47
  br i1 %56, label %51, label %57

57:                                               ; preds = %51, %39
  %58 = phi ptr [ %40, %39 ], [ %54, %51 ]
  %59 = getelementptr inbounds ptr, ptr %58, i64 1
  store ptr null, ptr %58, align 8, !tbaa !13
  %60 = getelementptr inbounds ptr, ptr %11, i64 1
  store ptr %59, ptr %60, align 8, !tbaa !13
  ret ptr %11
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @cube3list(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2) #0 {
  %4 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %5 = load i32, ptr %4, align 4, !tbaa !31
  %6 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 3
  %7 = load i32, ptr %6, align 4, !tbaa !31
  %8 = getelementptr inbounds %struct.set_family, ptr %2, i64 0, i32 3
  %9 = load i32, ptr %8, align 4, !tbaa !31
  %10 = add i32 %5, 3
  %11 = add i32 %10, %7
  %12 = add i32 %11, %9
  %13 = sext i32 %12 to i64
  %14 = shl nsw i64 %13, 3
  %15 = tail call noalias ptr @malloc(i64 noundef %14) #42
  %16 = load i32, ptr @cube, align 8, !tbaa !14
  %17 = icmp slt i32 %16, 33
  %18 = add nsw i32 %16, -1
  %19 = lshr i32 %18, 3
  %20 = and i32 %19, 536870908
  %21 = add nuw nsw i32 %20, 8
  %22 = select i1 %17, i32 8, i32 %21
  %23 = zext i32 %22 to i64
  %24 = tail call noalias ptr @malloc(i64 noundef %23) #42
  %25 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %24, i32 noundef %16) #43
  store ptr %25, ptr %15, align 8, !tbaa !13
  %26 = getelementptr inbounds ptr, ptr %15, i64 2
  %27 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %28 = load ptr, ptr %27, align 8, !tbaa !33
  %29 = load i32, ptr %4, align 4, !tbaa !31
  %30 = load i32, ptr %0, align 8, !tbaa !34
  %31 = mul nsw i32 %30, %29
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, ptr %28, i64 %32
  %34 = icmp sgt i32 %31, 0
  br i1 %34, label %35, label %43

35:                                               ; preds = %3
  %36 = sext i32 %30 to i64
  br label %37

37:                                               ; preds = %37, %35
  %38 = phi ptr [ %26, %35 ], [ %40, %37 ]
  %39 = phi ptr [ %28, %35 ], [ %41, %37 ]
  %40 = getelementptr inbounds ptr, ptr %38, i64 1
  store ptr %39, ptr %38, align 8, !tbaa !13
  %41 = getelementptr inbounds i32, ptr %39, i64 %36
  %42 = icmp ult ptr %41, %33
  br i1 %42, label %37, label %43

43:                                               ; preds = %37, %3
  %44 = phi ptr [ %26, %3 ], [ %40, %37 ]
  %45 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 5
  %46 = load ptr, ptr %45, align 8, !tbaa !33
  %47 = load i32, ptr %6, align 4, !tbaa !31
  %48 = load i32, ptr %1, align 8, !tbaa !34
  %49 = mul nsw i32 %48, %47
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, ptr %46, i64 %50
  %52 = icmp sgt i32 %49, 0
  br i1 %52, label %53, label %61

53:                                               ; preds = %43
  %54 = sext i32 %48 to i64
  br label %55

55:                                               ; preds = %55, %53
  %56 = phi ptr [ %44, %53 ], [ %58, %55 ]
  %57 = phi ptr [ %46, %53 ], [ %59, %55 ]
  %58 = getelementptr inbounds ptr, ptr %56, i64 1
  store ptr %57, ptr %56, align 8, !tbaa !13
  %59 = getelementptr inbounds i32, ptr %57, i64 %54
  %60 = icmp ult ptr %59, %51
  br i1 %60, label %55, label %61

61:                                               ; preds = %55, %43
  %62 = phi ptr [ %44, %43 ], [ %58, %55 ]
  %63 = getelementptr inbounds %struct.set_family, ptr %2, i64 0, i32 5
  %64 = load ptr, ptr %63, align 8, !tbaa !33
  %65 = load i32, ptr %8, align 4, !tbaa !31
  %66 = load i32, ptr %2, align 8, !tbaa !34
  %67 = mul nsw i32 %66, %65
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i32, ptr %64, i64 %68
  %70 = icmp sgt i32 %67, 0
  br i1 %70, label %71, label %79

71:                                               ; preds = %61
  %72 = sext i32 %66 to i64
  br label %73

73:                                               ; preds = %73, %71
  %74 = phi ptr [ %62, %71 ], [ %76, %73 ]
  %75 = phi ptr [ %64, %71 ], [ %77, %73 ]
  %76 = getelementptr inbounds ptr, ptr %74, i64 1
  store ptr %75, ptr %74, align 8, !tbaa !13
  %77 = getelementptr inbounds i32, ptr %75, i64 %72
  %78 = icmp ult ptr %77, %69
  br i1 %78, label %73, label %79

79:                                               ; preds = %73, %61
  %80 = phi ptr [ %62, %61 ], [ %76, %73 ]
  %81 = getelementptr inbounds ptr, ptr %80, i64 1
  store ptr null, ptr %80, align 8, !tbaa !13
  %82 = getelementptr inbounds ptr, ptr %15, i64 1
  store ptr %81, ptr %82, align 8, !tbaa !13
  ret ptr %15
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @cubeunlist(ptr noundef %0) #0 {
  %2 = load ptr, ptr %0, align 8, !tbaa !13
  %3 = getelementptr inbounds ptr, ptr %0, i64 1
  %4 = load ptr, ptr %3, align 8, !tbaa !13
  %5 = ptrtoint ptr %4 to i64
  %6 = ptrtoint ptr %0 to i64
  %7 = sub i64 %5, %6
  %8 = ashr exact i64 %7, 3
  %9 = add nsw i64 %8, -3
  %10 = load i32, ptr @cube, align 8, !tbaa !14
  %11 = tail call ptr (i64, i32, ...) @sf_new(i64 noundef %9, i32 noundef %10) #43
  %12 = getelementptr inbounds ptr, ptr %0, i64 2
  %13 = load ptr, ptr %12, align 8, !tbaa !13
  %14 = icmp eq ptr %13, null
  br i1 %14, label %48, label %15

15:                                               ; preds = %1
  %16 = getelementptr inbounds %struct.set_family, ptr %11, i64 0, i32 5
  %17 = load ptr, ptr %16, align 8, !tbaa !33
  br label %18

18:                                               ; preds = %43, %15
  %19 = phi i64 [ 2, %15 ], [ %44, %43 ]
  %20 = phi ptr [ %13, %15 ], [ %46, %43 ]
  %21 = load i32, ptr %11, align 8, !tbaa !34
  %22 = add nsw i64 %19, -2
  %23 = sext i32 %21 to i64
  %24 = mul nsw i64 %22, %23
  %25 = getelementptr inbounds i32, ptr %17, i64 %24
  %26 = load i32, ptr %20, align 4, !tbaa !16
  %27 = and i32 %26, 1023
  %28 = load i32, ptr %25, align 4, !tbaa !16
  %29 = and i32 %28, -1024
  %30 = or i32 %29, %27
  store i32 %30, ptr %25, align 4, !tbaa !16
  %31 = and i32 %26, 1023
  %32 = zext i32 %31 to i64
  br label %33

33:                                               ; preds = %33, %18
  %34 = phi i64 [ %41, %33 ], [ %32, %18 ]
  %35 = getelementptr inbounds i32, ptr %20, i64 %34
  %36 = load i32, ptr %35, align 4, !tbaa !16
  %37 = getelementptr inbounds i32, ptr %2, i64 %34
  %38 = load i32, ptr %37, align 4, !tbaa !16
  %39 = or i32 %38, %36
  %40 = getelementptr inbounds i32, ptr %25, i64 %34
  store i32 %39, ptr %40, align 4, !tbaa !16
  %41 = add nsw i64 %34, -1
  %42 = icmp ugt i64 %34, 1
  br i1 %42, label %33, label %43

43:                                               ; preds = %33
  %44 = add nuw nsw i64 %19, 1
  %45 = getelementptr inbounds ptr, ptr %0, i64 %44
  %46 = load ptr, ptr %45, align 8, !tbaa !13
  %47 = icmp eq ptr %46, null
  br i1 %47, label %48, label %18

48:                                               ; preds = %43, %1
  %49 = load ptr, ptr %3, align 8, !tbaa !13
  %50 = ptrtoint ptr %49 to i64
  %51 = sub i64 %50, %6
  %52 = lshr exact i64 %51, 3
  %53 = trunc i64 %52 to i32
  %54 = add i32 %53, -3
  %55 = getelementptr inbounds %struct.set_family, ptr %11, i64 0, i32 3
  store i32 %54, ptr %55, align 4, !tbaa !31
  ret ptr %11
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write, argmem: none, inaccessiblemem: readwrite) uwtable
define internal noalias ptr @sm_col_alloc() #6 {
  %1 = tail call noalias dereferenceable_or_null(56) ptr @malloc(i64 noundef 56) #42
  store i32 0, ptr %1, align 8, !tbaa !35
  %2 = getelementptr inbounds %struct.sm_col_struct, ptr %1, i64 0, i32 1
  store i32 0, ptr %2, align 4, !tbaa !37
  %3 = getelementptr inbounds %struct.sm_col_struct, ptr %1, i64 0, i32 3
  %4 = getelementptr inbounds %struct.sm_col_struct, ptr %1, i64 0, i32 2
  store i32 0, ptr %4, align 8, !tbaa !38
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %3, i8 0, i64 40, i1 false)
  ret ptr %1
}

; Function Attrs: nounwind optsize uwtable
define internal void @sm_col_free(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.sm_col_struct, ptr %0, i64 0, i32 3
  %3 = load ptr, ptr %2, align 8, !tbaa !39
  %4 = icmp eq ptr %3, null
  br i1 %4, label %12, label %5

5:                                                ; preds = %5, %1
  %6 = phi ptr [ %8, %5 ], [ %3, %1 ]
  %7 = getelementptr inbounds %struct.sm_element_struct, ptr %6, i64 0, i32 2
  %8 = load ptr, ptr %7, align 8, !tbaa !40
  tail call void @free(ptr noundef nonnull %6) #43
  %9 = icmp eq ptr %8, null
  br i1 %9, label %10, label %5

10:                                               ; preds = %5
  %11 = icmp eq ptr %0, null
  br i1 %11, label %13, label %12

12:                                               ; preds = %10, %1
  tail call void @free(ptr noundef nonnull %0) #43
  br label %13

13:                                               ; preds = %12, %10
  ret void
}

; Function Attrs: mustprogress nounwind optsize willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) local_unnamed_addr #7

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @sm_col_contains(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #8 {
  %3 = getelementptr inbounds %struct.sm_col_struct, ptr %0, i64 0, i32 3
  %4 = load ptr, ptr %3, align 8, !tbaa !39
  %5 = icmp eq ptr %4, null
  br i1 %5, label %26, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.sm_col_struct, ptr %1, i64 0, i32 3
  br label %8

8:                                                ; preds = %22, %6
  %9 = phi ptr [ %24, %22 ], [ %7, %6 ]
  %10 = phi ptr [ %23, %22 ], [ %4, %6 ]
  %11 = load ptr, ptr %9, align 8, !tbaa !13
  %12 = icmp eq ptr %11, null
  br i1 %12, label %26, label %13

13:                                               ; preds = %8
  %14 = load i32, ptr %10, align 8, !tbaa !42
  %15 = load i32, ptr %11, align 8, !tbaa !42
  %16 = icmp slt i32 %14, %15
  br i1 %16, label %26, label %17

17:                                               ; preds = %13
  %18 = icmp eq i32 %14, %15
  br i1 %18, label %19, label %22

19:                                               ; preds = %17
  %20 = getelementptr inbounds %struct.sm_element_struct, ptr %10, i64 0, i32 2
  %21 = load ptr, ptr %20, align 8, !tbaa !40
  br label %22

22:                                               ; preds = %19, %17
  %23 = phi ptr [ %21, %19 ], [ %10, %17 ]
  %24 = getelementptr inbounds %struct.sm_element_struct, ptr %11, i64 0, i32 2
  %25 = icmp eq ptr %23, null
  br i1 %25, label %26, label %8

26:                                               ; preds = %22, %13, %8, %2
  %27 = phi i32 [ 1, %2 ], [ 1, %22 ], [ 0, %8 ], [ 0, %13 ]
  ret i32 %27
}

; Function Attrs: mustprogress nounwind optsize willreturn memory(write, argmem: readwrite, inaccessiblemem: readwrite) uwtable
define internal void @sm_col_remove_element(ptr nocapture noundef %0, ptr nocapture noundef %1) #9 {
  %3 = getelementptr inbounds %struct.sm_element_struct, ptr %1, i64 0, i32 3
  %4 = load ptr, ptr %3, align 8, !tbaa !43
  %5 = icmp eq ptr %4, null
  %6 = getelementptr inbounds %struct.sm_element_struct, ptr %1, i64 0, i32 2
  %7 = load ptr, ptr %6, align 8, !tbaa !40
  br i1 %5, label %8, label %10

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.sm_col_struct, ptr %0, i64 0, i32 3
  store ptr %7, ptr %9, align 8, !tbaa !39
  br label %13

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.sm_element_struct, ptr %4, i64 0, i32 2
  store ptr %7, ptr %11, align 8, !tbaa !40
  %12 = load ptr, ptr %6, align 8, !tbaa !40
  br label %13

13:                                               ; preds = %10, %8
  %14 = phi ptr [ %12, %10 ], [ %7, %8 ]
  %15 = icmp eq ptr %14, null
  %16 = getelementptr inbounds %struct.sm_element_struct, ptr %14, i64 0, i32 3
  %17 = getelementptr inbounds %struct.sm_col_struct, ptr %0, i64 0, i32 4
  %18 = select i1 %15, ptr %17, ptr %16
  store ptr %4, ptr %18, align 8, !tbaa !13
  %19 = getelementptr inbounds %struct.sm_col_struct, ptr %0, i64 0, i32 1
  %20 = load i32, ptr %19, align 4, !tbaa !37
  %21 = add nsw i32 %20, -1
  store i32 %21, ptr %19, align 4, !tbaa !37
  tail call void @free(ptr noundef nonnull %1) #43
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @complement(ptr noundef %0) #0 {
  %2 = load i32, ptr @debug, align 4, !tbaa !16
  %3 = and i32 %2, 1
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = load i32, ptr @complement.compl_level, align 4, !tbaa !16
  %7 = add nsw i32 %6, 1
  store i32 %7, ptr @complement.compl_level, align 4, !tbaa !16
  tail call void (ptr, ptr, i32, ...) @debug_print(ptr noundef %0, ptr noundef nonnull @.str.2, i32 noundef %6) #43
  br label %8

8:                                                ; preds = %5, %1
  %9 = load ptr, ptr %0, align 8, !tbaa !13
  %10 = getelementptr inbounds ptr, ptr %0, i64 2
  %11 = load ptr, ptr %10, align 8, !tbaa !13
  %12 = icmp eq ptr %11, null
  br i1 %12, label %13, label %22

13:                                               ; preds = %8
  %14 = load i32, ptr @cube, align 8, !tbaa !14
  %15 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 1, i32 noundef %14) #43
  %16 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %17 = tail call ptr (ptr, ptr, ...) @sf_addset(ptr noundef %15, ptr noundef %16) #43
  %18 = load ptr, ptr %0, align 8, !tbaa !13
  %19 = icmp eq ptr %18, null
  br i1 %19, label %21, label %20

20:                                               ; preds = %13
  tail call void @free(ptr noundef nonnull %18) #43
  br label %21

21:                                               ; preds = %20, %13
  tail call void @free(ptr noundef nonnull %0) #43
  br label %175

22:                                               ; preds = %8
  %23 = getelementptr inbounds ptr, ptr %0, i64 3
  %24 = load ptr, ptr %23, align 8, !tbaa !13
  %25 = icmp eq ptr %24, null
  br i1 %25, label %26, label %33

26:                                               ; preds = %22
  %27 = tail call ptr (ptr, ptr, ptr, ...) @set_or(ptr noundef %9, ptr noundef %9, ptr noundef nonnull %11) #43
  %28 = tail call fastcc ptr @compl_cube(ptr noundef %27) #44
  %29 = load ptr, ptr %0, align 8, !tbaa !13
  %30 = icmp eq ptr %29, null
  br i1 %30, label %32, label %31

31:                                               ; preds = %26
  tail call void @free(ptr noundef nonnull %29) #43
  br label %32

32:                                               ; preds = %31, %26
  tail call void @free(ptr noundef nonnull %0) #43
  br label %175

33:                                               ; preds = %37, %22
  %34 = phi ptr [ %38, %37 ], [ %10, %22 ]
  %35 = load ptr, ptr %34, align 8, !tbaa !13
  %36 = icmp eq ptr %35, null
  br i1 %36, label %48, label %37

37:                                               ; preds = %33
  %38 = getelementptr inbounds ptr, ptr %34, i64 1
  %39 = tail call i32 (ptr, ptr, ...) @full_row(ptr noundef nonnull %35, ptr noundef %9) #43
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %33, label %41

41:                                               ; preds = %37
  %42 = load i32, ptr @cube, align 8, !tbaa !14
  %43 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 0, i32 noundef %42) #43
  %44 = load ptr, ptr %0, align 8, !tbaa !13
  %45 = icmp eq ptr %44, null
  br i1 %45, label %47, label %46

46:                                               ; preds = %41
  tail call void @free(ptr noundef nonnull %44) #43
  br label %47

47:                                               ; preds = %46, %41
  tail call void @free(ptr noundef nonnull %0) #43
  br label %175

48:                                               ; preds = %33
  %49 = load i32, ptr %9, align 4, !tbaa !16
  %50 = shl i32 %49, 5
  %51 = and i32 %50, 32736
  %52 = icmp ult i32 %51, 33
  %53 = add nsw i32 %51, -1
  %54 = lshr i32 %53, 3
  %55 = and i32 %54, 536870908
  %56 = add nuw nsw i32 %55, 8
  %57 = select i1 %52, i32 8, i32 %56
  %58 = zext i32 %57 to i64
  %59 = tail call noalias ptr @malloc(i64 noundef %58) #42
  %60 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %59, ptr noundef nonnull %9) #43
  %61 = load ptr, ptr %10, align 8, !tbaa !13
  %62 = icmp eq ptr %61, null
  br i1 %62, label %82, label %67

63:                                               ; preds = %73
  %64 = getelementptr inbounds ptr, ptr %69, i64 1
  %65 = load ptr, ptr %69, align 8, !tbaa !13
  %66 = icmp eq ptr %65, null
  br i1 %66, label %82, label %67

67:                                               ; preds = %63, %48
  %68 = phi ptr [ %65, %63 ], [ %61, %48 ]
  %69 = phi ptr [ %64, %63 ], [ %23, %48 ]
  %70 = load i32, ptr %60, align 4, !tbaa !16
  %71 = and i32 %70, 1023
  %72 = zext i32 %71 to i64
  br label %73

73:                                               ; preds = %73, %67
  %74 = phi i64 [ %80, %73 ], [ %72, %67 ]
  %75 = getelementptr inbounds i32, ptr %60, i64 %74
  %76 = load i32, ptr %75, align 4, !tbaa !16
  %77 = getelementptr inbounds i32, ptr %68, i64 %74
  %78 = load i32, ptr %77, align 4, !tbaa !16
  %79 = or i32 %78, %76
  store i32 %79, ptr %75, align 4, !tbaa !16
  %80 = add nsw i64 %74, -1
  %81 = icmp ugt i64 %74, 1
  br i1 %81, label %73, label %63

82:                                               ; preds = %63, %48
  %83 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %84 = tail call i32 (ptr, ptr, ...) @setp_equal(ptr noundef %60, ptr noundef %83) #43
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %96

86:                                               ; preds = %82
  %87 = tail call fastcc ptr @compl_cube(ptr noundef %60) #44
  %88 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %89 = tail call ptr (ptr, ptr, ptr, ...) @set_diff(ptr noundef %60, ptr noundef %88, ptr noundef %60) #43
  %90 = tail call ptr (ptr, ptr, ptr, ...) @set_or(ptr noundef nonnull %9, ptr noundef nonnull %9, ptr noundef %89) #43
  %91 = icmp eq ptr %60, null
  br i1 %91, label %93, label %92

92:                                               ; preds = %86
  tail call void @free(ptr noundef nonnull %60) #43
  br label %93

93:                                               ; preds = %92, %86
  %94 = tail call ptr @complement(ptr noundef nonnull %0) #44
  %95 = tail call ptr (ptr, ptr, ...) @sf_append(ptr noundef %94, ptr noundef %87) #43
  br label %175

96:                                               ; preds = %82
  %97 = icmp eq ptr %60, null
  br i1 %97, label %99, label %98

98:                                               ; preds = %96
  tail call void @free(ptr noundef nonnull %60) #43
  br label %99

99:                                               ; preds = %98, %96
  tail call void (ptr, ...) @massive_count(ptr noundef nonnull %0) #43
  %100 = load i32, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 4), align 8, !tbaa !22
  %101 = icmp eq i32 %100, 1
  br i1 %101, label %102, label %109

102:                                              ; preds = %99
  %103 = load i32, ptr @cube, align 8, !tbaa !14
  %104 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 0, i32 noundef %103) #43
  %105 = load ptr, ptr %0, align 8, !tbaa !13
  %106 = icmp eq ptr %105, null
  br i1 %106, label %108, label %107

107:                                              ; preds = %102
  tail call void @free(ptr noundef nonnull %105) #43
  br label %108

108:                                              ; preds = %107, %102
  tail call void @free(ptr noundef nonnull %0) #43
  br label %175

109:                                              ; preds = %99
  %110 = load i32, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 5), align 4, !tbaa !23
  %111 = icmp eq i32 %110, %100
  br i1 %111, label %112, label %120

112:                                              ; preds = %109
  %113 = tail call ptr (ptr, ...) @map_cover_to_unate(ptr noundef nonnull %0) #43
  %114 = load ptr, ptr %0, align 8, !tbaa !13
  %115 = icmp eq ptr %114, null
  br i1 %115, label %117, label %116

116:                                              ; preds = %112
  tail call void @free(ptr noundef nonnull %114) #43
  br label %117

117:                                              ; preds = %116, %112
  tail call void @free(ptr noundef nonnull %0) #43
  %118 = tail call ptr (ptr, ...) @unate_compl(ptr noundef %113) #43
  %119 = tail call ptr (ptr, ...) @map_unate_to_cover(ptr noundef %118) #43
  tail call void (ptr, ...) @sf_free(ptr noundef %118) #43
  br label %175

120:                                              ; preds = %109
  %121 = load i32, ptr @cube, align 8, !tbaa !14
  %122 = icmp slt i32 %121, 33
  %123 = add nsw i32 %121, -1
  %124 = lshr i32 %123, 3
  %125 = and i32 %124, 536870908
  %126 = add nuw nsw i32 %125, 8
  %127 = select i1 %122, i32 8, i32 %126
  %128 = zext i32 %127 to i64
  %129 = tail call noalias ptr @malloc(i64 noundef %128) #42
  %130 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %129, i32 noundef %121) #43
  %131 = load i32, ptr @cube, align 8, !tbaa !14
  %132 = icmp slt i32 %131, 33
  %133 = add nsw i32 %131, -1
  %134 = lshr i32 %133, 3
  %135 = and i32 %134, 536870908
  %136 = add nuw nsw i32 %135, 8
  %137 = select i1 %132, i32 8, i32 %136
  %138 = zext i32 %137 to i64
  %139 = tail call noalias ptr @malloc(i64 noundef %138) #42
  %140 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %139, i32 noundef %131) #43
  %141 = tail call i32 (ptr, ptr, ptr, i32, ...) @binate_split_select(ptr noundef nonnull %0, ptr noundef %130, ptr noundef %140, i32 noundef 1) #43
  %142 = tail call ptr (ptr, ptr, i32, ...) @scofactor(ptr noundef nonnull %0, ptr noundef %130, i32 noundef %141) #43
  %143 = tail call ptr @complement(ptr noundef %142) #44
  %144 = tail call ptr (ptr, ptr, i32, ...) @scofactor(ptr noundef nonnull %0, ptr noundef %140, i32 noundef %141) #43
  %145 = tail call ptr @complement(ptr noundef %144) #44
  %146 = getelementptr inbounds %struct.set_family, ptr %145, i64 0, i32 3
  %147 = load i32, ptr %146, align 4, !tbaa !31
  %148 = getelementptr inbounds %struct.set_family, ptr %143, i64 0, i32 3
  %149 = load i32, ptr %148, align 4, !tbaa !31
  %150 = mul nsw i32 %149, %147
  %151 = sext i32 %150 to i64
  %152 = add nsw i32 %149, %147
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds ptr, ptr %0, i64 1
  %155 = load ptr, ptr %154, align 8, !tbaa !13
  %156 = ptrtoint ptr %155 to i64
  %157 = ptrtoint ptr %0 to i64
  %158 = sub i64 %156, %157
  %159 = ashr exact i64 %158, 3
  %160 = add nsw i64 %159, -3
  %161 = mul nsw i64 %160, %153
  %162 = icmp slt i64 %161, %151
  %163 = zext i1 %162 to i32
  %164 = tail call fastcc ptr @compl_merge(ptr noundef nonnull %0, ptr noundef %143, ptr noundef %145, ptr noundef %130, ptr noundef %140, i32 noundef %141, i32 noundef %163) #44
  %165 = icmp eq ptr %130, null
  br i1 %165, label %167, label %166

166:                                              ; preds = %120
  tail call void @free(ptr noundef nonnull %130) #43
  br label %167

167:                                              ; preds = %166, %120
  %168 = icmp eq ptr %140, null
  br i1 %168, label %170, label %169

169:                                              ; preds = %167
  tail call void @free(ptr noundef nonnull %140) #43
  br label %170

170:                                              ; preds = %169, %167
  %171 = load ptr, ptr %0, align 8, !tbaa !13
  %172 = icmp eq ptr %171, null
  br i1 %172, label %174, label %173

173:                                              ; preds = %170
  tail call void @free(ptr noundef nonnull %171) #43
  br label %174

174:                                              ; preds = %173, %170
  tail call void @free(ptr noundef nonnull %0) #43
  br label %175

175:                                              ; preds = %174, %117, %108, %93, %47, %32, %21
  %176 = phi ptr [ %164, %174 ], [ %43, %47 ], [ %119, %117 ], [ %104, %108 ], [ %95, %93 ], [ %28, %32 ], [ %17, %21 ]
  %177 = load i32, ptr @debug, align 4, !tbaa !16
  %178 = and i32 %177, 1
  %179 = icmp eq i32 %178, 0
  br i1 %179, label %183, label %180

180:                                              ; preds = %175
  %181 = load i32, ptr @complement.compl_level, align 4, !tbaa !16
  %182 = add nsw i32 %181, -1
  store i32 %182, ptr @complement.compl_level, align 4, !tbaa !16
  tail call void (ptr, ptr, i32, ...) @debug1_print(ptr noundef %176, ptr noundef nonnull @.str.1.3, i32 noundef %182) #43
  br label %183

183:                                              ; preds = %180, %175
  ret ptr %176
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc ptr @compl_cube(ptr nocapture noundef readonly %0) unnamed_addr #0 {
  %2 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 11), align 8, !tbaa !7
  %3 = getelementptr inbounds ptr, ptr %2, i64 7
  %4 = load ptr, ptr %3, align 8, !tbaa !13
  %5 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %6 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %7 = load i32, ptr @cube, align 8, !tbaa !14
  %8 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef %6, i32 noundef %7) #43
  %9 = load i32, ptr %5, align 4, !tbaa !16
  %10 = and i32 %9, 1023
  %11 = load i32, ptr %4, align 4, !tbaa !16
  %12 = and i32 %11, -1024
  %13 = or i32 %12, %10
  store i32 %13, ptr %4, align 4, !tbaa !16
  %14 = and i32 %9, 1023
  %15 = zext i32 %14 to i64
  br label %16

16:                                               ; preds = %16, %1
  %17 = phi i64 [ %25, %16 ], [ %15, %1 ]
  %18 = getelementptr inbounds i32, ptr %5, i64 %17
  %19 = load i32, ptr %18, align 4, !tbaa !16
  %20 = getelementptr inbounds i32, ptr %0, i64 %17
  %21 = load i32, ptr %20, align 4, !tbaa !16
  %22 = xor i32 %21, -1
  %23 = and i32 %19, %22
  %24 = getelementptr inbounds i32, ptr %4, i64 %17
  store i32 %23, ptr %24, align 4, !tbaa !16
  %25 = add nsw i64 %17, -1
  %26 = icmp ugt i64 %17, 1
  br i1 %26, label %16, label %27

27:                                               ; preds = %16
  %28 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %29 = icmp sgt i32 %28, 0
  br i1 %29, label %30, label %75

30:                                               ; preds = %27
  %31 = getelementptr inbounds %struct.set_family, ptr %8, i64 0, i32 5
  %32 = getelementptr inbounds %struct.set_family, ptr %8, i64 0, i32 3
  br label %33

33:                                               ; preds = %70, %30
  %34 = phi i64 [ 0, %30 ], [ %71, %70 ]
  %35 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %36 = getelementptr inbounds ptr, ptr %35, i64 %34
  %37 = load ptr, ptr %36, align 8, !tbaa !13
  %38 = tail call i32 (ptr, ptr, ...) @setp_disjoint(ptr noundef nonnull %4, ptr noundef %37) #43
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %70

40:                                               ; preds = %33
  %41 = load ptr, ptr %31, align 8, !tbaa !33
  %42 = load i32, ptr %8, align 8, !tbaa !34
  %43 = load i32, ptr %32, align 4, !tbaa !31
  %44 = add nsw i32 %43, 1
  store i32 %44, ptr %32, align 4, !tbaa !31
  %45 = mul nsw i32 %43, %42
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds i32, ptr %41, i64 %46
  %48 = load i32, ptr %4, align 4, !tbaa !16
  %49 = and i32 %48, 1023
  %50 = load i32, ptr %47, align 4, !tbaa !16
  %51 = and i32 %50, -1024
  %52 = or i32 %51, %49
  store i32 %52, ptr %47, align 4, !tbaa !16
  %53 = and i32 %48, 1023
  %54 = zext i32 %53 to i64
  br label %55

55:                                               ; preds = %55, %40
  %56 = phi i64 [ %68, %55 ], [ %54, %40 ]
  %57 = getelementptr inbounds i32, ptr %4, i64 %56
  %58 = load i32, ptr %57, align 4, !tbaa !16
  %59 = getelementptr inbounds i32, ptr %37, i64 %56
  %60 = load i32, ptr %59, align 4, !tbaa !16
  %61 = and i32 %60, %58
  %62 = getelementptr inbounds i32, ptr %5, i64 %56
  %63 = load i32, ptr %62, align 4, !tbaa !16
  %64 = xor i32 %60, -1
  %65 = and i32 %63, %64
  %66 = or i32 %65, %61
  %67 = getelementptr inbounds i32, ptr %47, i64 %56
  store i32 %66, ptr %67, align 4, !tbaa !16
  %68 = add nsw i64 %56, -1
  %69 = icmp ugt i64 %56, 1
  br i1 %69, label %55, label %70

70:                                               ; preds = %55, %33
  %71 = add nuw nsw i64 %34, 1
  %72 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %73 = sext i32 %72 to i64
  %74 = icmp slt i64 %71, %73
  br i1 %74, label %33, label %75

75:                                               ; preds = %70, %27
  ret ptr %8
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc ptr @compl_merge(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, i32 noundef %5, i32 noundef %6) unnamed_addr #0 {
  %8 = load i32, ptr @debug, align 4, !tbaa !16
  %9 = and i32 %8, 1
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %21, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 3
  %13 = load i32, ptr %12, align 4, !tbaa !31
  %14 = getelementptr inbounds %struct.set_family, ptr %2, i64 0, i32 3
  %15 = load i32, ptr %14, align 4, !tbaa !31
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.7, i32 noundef %13, i32 noundef %15) #44
  %17 = tail call ptr (ptr, ...) @pc1(ptr noundef %3) #43
  %18 = tail call ptr (ptr, ...) @pc2(ptr noundef %4) #43
  %19 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.8, ptr noundef %17, ptr noundef %18) #44
  tail call void (ptr, ...) @cprint(ptr noundef %1) #43
  %20 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str)
  tail call void (ptr, ...) @cprint(ptr noundef %2) #43
  br label %21

21:                                               ; preds = %11, %7
  %22 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 5
  %23 = load ptr, ptr %22, align 8, !tbaa !33
  %24 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 3
  %25 = load i32, ptr %24, align 4, !tbaa !31
  %26 = load i32, ptr %1, align 8, !tbaa !34
  %27 = mul nsw i32 %26, %25
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds i32, ptr %23, i64 %28
  %30 = icmp sgt i32 %27, 0
  br i1 %30, label %31, label %52

31:                                               ; preds = %45, %21
  %32 = phi ptr [ %50, %45 ], [ %23, %21 ]
  %33 = load i32, ptr %32, align 4, !tbaa !16
  %34 = and i32 %33, 1023
  %35 = zext i32 %34 to i64
  br label %36

36:                                               ; preds = %36, %31
  %37 = phi i64 [ %43, %36 ], [ %35, %31 ]
  %38 = getelementptr inbounds i32, ptr %32, i64 %37
  %39 = load i32, ptr %38, align 4, !tbaa !16
  %40 = getelementptr inbounds i32, ptr %3, i64 %37
  %41 = load i32, ptr %40, align 4, !tbaa !16
  %42 = and i32 %41, %39
  store i32 %42, ptr %38, align 4, !tbaa !16
  %43 = add nsw i64 %37, -1
  %44 = icmp ugt i64 %37, 1
  br i1 %44, label %36, label %45

45:                                               ; preds = %36
  %46 = load i32, ptr %32, align 4, !tbaa !16
  %47 = or i32 %46, 8192
  store i32 %47, ptr %32, align 4, !tbaa !16
  %48 = load i32, ptr %1, align 8, !tbaa !34
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i32, ptr %32, i64 %49
  %51 = icmp ult ptr %50, %29
  br i1 %51, label %31, label %52

52:                                               ; preds = %45, %21
  %53 = getelementptr inbounds %struct.set_family, ptr %2, i64 0, i32 5
  %54 = load ptr, ptr %53, align 8, !tbaa !33
  %55 = getelementptr inbounds %struct.set_family, ptr %2, i64 0, i32 3
  %56 = load i32, ptr %55, align 4, !tbaa !31
  %57 = load i32, ptr %2, align 8, !tbaa !34
  %58 = mul nsw i32 %57, %56
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i32, ptr %54, i64 %59
  %61 = icmp sgt i32 %58, 0
  br i1 %61, label %62, label %83

62:                                               ; preds = %76, %52
  %63 = phi ptr [ %81, %76 ], [ %54, %52 ]
  %64 = load i32, ptr %63, align 4, !tbaa !16
  %65 = and i32 %64, 1023
  %66 = zext i32 %65 to i64
  br label %67

67:                                               ; preds = %67, %62
  %68 = phi i64 [ %74, %67 ], [ %66, %62 ]
  %69 = getelementptr inbounds i32, ptr %63, i64 %68
  %70 = load i32, ptr %69, align 4, !tbaa !16
  %71 = getelementptr inbounds i32, ptr %4, i64 %68
  %72 = load i32, ptr %71, align 4, !tbaa !16
  %73 = and i32 %72, %70
  store i32 %73, ptr %69, align 4, !tbaa !16
  %74 = add nsw i64 %68, -1
  %75 = icmp ugt i64 %68, 1
  br i1 %75, label %67, label %76

76:                                               ; preds = %67
  %77 = load i32, ptr %63, align 4, !tbaa !16
  %78 = or i32 %77, 8192
  store i32 %78, ptr %63, align 4, !tbaa !16
  %79 = load i32, ptr %2, align 8, !tbaa !34
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds i32, ptr %63, i64 %80
  %82 = icmp ult ptr %81, %60
  br i1 %82, label %62, label %83

83:                                               ; preds = %76, %52
  %84 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 11), align 8, !tbaa !7
  %85 = load ptr, ptr %84, align 8, !tbaa !13
  %86 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %87 = sext i32 %5 to i64
  %88 = getelementptr inbounds ptr, ptr %86, i64 %87
  %89 = load ptr, ptr %88, align 8, !tbaa !13
  %90 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %85, ptr noundef %89) #43
  %91 = tail call ptr (ptr, ...) @sf_list(ptr noundef nonnull %1) #43
  %92 = load i32, ptr %24, align 4, !tbaa !31
  %93 = sext i32 %92 to i64
  tail call void @qsort(ptr noundef %91, i64 noundef %93, i64 noundef 8, ptr noundef nonnull @d1_order) #43
  %94 = tail call ptr (ptr, ...) @sf_list(ptr noundef nonnull %2) #43
  %95 = load i32, ptr %55, align 4, !tbaa !31
  %96 = sext i32 %95 to i64
  tail call void @qsort(ptr noundef %94, i64 noundef %96, i64 noundef 8, ptr noundef nonnull @d1_order) #43
  %97 = load ptr, ptr %91, align 8, !tbaa !13
  %98 = load ptr, ptr %94, align 8, !tbaa !13
  %99 = icmp ne ptr %97, null
  %100 = icmp ne ptr %98, null
  %101 = select i1 %99, i1 %100, i1 false
  br i1 %101, label %102, label %140

102:                                              ; preds = %132, %83
  %103 = phi ptr [ %136, %132 ], [ %98, %83 ]
  %104 = phi ptr [ %135, %132 ], [ %97, %83 ]
  %105 = phi ptr [ %134, %132 ], [ %94, %83 ]
  %106 = phi ptr [ %133, %132 ], [ %91, %83 ]
  %107 = tail call i32 (ptr, ptr, ...) @d1_order(ptr noundef %106, ptr noundef %105) #43
  switch i32 %107, label %132 [
    i32 1, label %108
    i32 -1, label %111
    i32 0, label %114
  ]

108:                                              ; preds = %102
  %109 = getelementptr inbounds ptr, ptr %105, i64 1
  %110 = load ptr, ptr %109, align 8, !tbaa !13
  br label %132

111:                                              ; preds = %102
  %112 = getelementptr inbounds ptr, ptr %106, i64 1
  %113 = load ptr, ptr %112, align 8, !tbaa !13
  br label %132

114:                                              ; preds = %102
  %115 = load i32, ptr %103, align 4, !tbaa !16
  %116 = and i32 %115, -8193
  store i32 %116, ptr %103, align 4, !tbaa !16
  %117 = load i32, ptr %104, align 4, !tbaa !16
  %118 = and i32 %117, 1023
  %119 = zext i32 %118 to i64
  br label %120

120:                                              ; preds = %120, %114
  %121 = phi i64 [ %127, %120 ], [ %119, %114 ]
  %122 = getelementptr inbounds i32, ptr %104, i64 %121
  %123 = load i32, ptr %122, align 4, !tbaa !16
  %124 = getelementptr inbounds i32, ptr %103, i64 %121
  %125 = load i32, ptr %124, align 4, !tbaa !16
  %126 = or i32 %125, %123
  store i32 %126, ptr %122, align 4, !tbaa !16
  %127 = add nsw i64 %121, -1
  %128 = icmp ugt i64 %121, 1
  br i1 %128, label %120, label %129

129:                                              ; preds = %120
  %130 = getelementptr inbounds ptr, ptr %105, i64 1
  %131 = load ptr, ptr %130, align 8, !tbaa !13
  br label %132

132:                                              ; preds = %129, %111, %108, %102
  %133 = phi ptr [ %106, %102 ], [ %106, %129 ], [ %112, %111 ], [ %106, %108 ]
  %134 = phi ptr [ %105, %102 ], [ %130, %129 ], [ %105, %111 ], [ %109, %108 ]
  %135 = phi ptr [ %104, %102 ], [ %104, %129 ], [ %113, %111 ], [ %104, %108 ]
  %136 = phi ptr [ %103, %102 ], [ %131, %129 ], [ %103, %111 ], [ %110, %108 ]
  %137 = icmp ne ptr %135, null
  %138 = icmp ne ptr %136, null
  %139 = select i1 %137, i1 %138, i1 false
  br i1 %139, label %102, label %140

140:                                              ; preds = %132, %83
  switch i32 %6, label %144 [
    i32 1, label %141
    i32 0, label %143
  ]

141:                                              ; preds = %140
  %142 = tail call ptr (ptr, ...) @cubeunlist(ptr noundef %0) #43
  tail call fastcc void @compl_lift_onset(ptr noundef nonnull %91, ptr noundef %142, ptr noundef %4, i32 noundef %5) #44
  tail call fastcc void @compl_lift_onset(ptr noundef nonnull %94, ptr noundef %142, ptr noundef %3, i32 noundef %5) #44
  tail call void (ptr, ...) @sf_free(ptr noundef %142) #43
  br label %144

143:                                              ; preds = %140
  tail call fastcc void @compl_lift(ptr noundef nonnull %91, ptr noundef nonnull %94, ptr noundef %4, i32 noundef %5) #44
  tail call fastcc void @compl_lift(ptr noundef nonnull %94, ptr noundef nonnull %91, ptr noundef %3, i32 noundef %5) #44
  br label %144

144:                                              ; preds = %143, %141, %140
  tail call void @free(ptr noundef %91) #43
  tail call void @free(ptr noundef %94) #43
  %145 = load i32, ptr %24, align 4, !tbaa !31
  %146 = load i32, ptr %55, align 4, !tbaa !31
  %147 = add nsw i32 %146, %145
  %148 = load i32, ptr @cube, align 8, !tbaa !14
  %149 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef %147, i32 noundef %148) #43
  %150 = getelementptr inbounds %struct.set_family, ptr %149, i64 0, i32 5
  %151 = load ptr, ptr %150, align 8, !tbaa !33
  %152 = load ptr, ptr %22, align 8, !tbaa !33
  %153 = load i32, ptr %24, align 4, !tbaa !31
  %154 = load i32, ptr %1, align 8, !tbaa !34
  %155 = mul nsw i32 %154, %153
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds i32, ptr %152, i64 %156
  %158 = icmp sgt i32 %155, 0
  br i1 %158, label %159, label %184

159:                                              ; preds = %144
  %160 = getelementptr inbounds %struct.set_family, ptr %149, i64 0, i32 3
  br label %161

161:                                              ; preds = %174, %159
  %162 = phi ptr [ %152, %159 ], [ %182, %174 ]
  %163 = phi ptr [ %151, %159 ], [ %179, %174 ]
  %164 = load i32, ptr %162, align 4, !tbaa !16
  %165 = and i32 %164, 1023
  %166 = zext i32 %165 to i64
  br label %167

167:                                              ; preds = %167, %161
  %168 = phi i64 [ %172, %167 ], [ %166, %161 ]
  %169 = getelementptr inbounds i32, ptr %162, i64 %168
  %170 = load i32, ptr %169, align 4, !tbaa !16
  %171 = getelementptr inbounds i32, ptr %163, i64 %168
  store i32 %170, ptr %171, align 4, !tbaa !16
  %172 = add nsw i64 %168, -1
  %173 = icmp eq i64 %168, 0
  br i1 %173, label %174, label %167

174:                                              ; preds = %167
  %175 = load i32, ptr %160, align 4, !tbaa !31
  %176 = add nsw i32 %175, 1
  store i32 %176, ptr %160, align 4, !tbaa !31
  %177 = load i32, ptr %149, align 8, !tbaa !34
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds i32, ptr %163, i64 %178
  %180 = load i32, ptr %1, align 8, !tbaa !34
  %181 = sext i32 %180 to i64
  %182 = getelementptr inbounds i32, ptr %162, i64 %181
  %183 = icmp ult ptr %182, %157
  br i1 %183, label %161, label %184

184:                                              ; preds = %174, %144
  %185 = phi ptr [ %151, %144 ], [ %179, %174 ]
  %186 = load ptr, ptr %53, align 8, !tbaa !33
  %187 = load i32, ptr %55, align 4, !tbaa !31
  %188 = load i32, ptr %2, align 8, !tbaa !34
  %189 = mul nsw i32 %188, %187
  %190 = sext i32 %189 to i64
  %191 = getelementptr inbounds i32, ptr %186, i64 %190
  %192 = icmp sgt i32 %189, 0
  br i1 %192, label %193, label %225

193:                                              ; preds = %184
  %194 = getelementptr inbounds %struct.set_family, ptr %149, i64 0, i32 3
  br label %195

195:                                              ; preds = %219, %193
  %196 = phi i32 [ %188, %193 ], [ %220, %219 ]
  %197 = phi ptr [ %186, %193 ], [ %223, %219 ]
  %198 = phi ptr [ %185, %193 ], [ %221, %219 ]
  %199 = load i32, ptr %197, align 4, !tbaa !16
  %200 = and i32 %199, 8192
  %201 = icmp eq i32 %200, 0
  br i1 %201, label %219, label %202

202:                                              ; preds = %195
  %203 = and i32 %199, 1023
  %204 = zext i32 %203 to i64
  br label %205

205:                                              ; preds = %205, %202
  %206 = phi i64 [ %210, %205 ], [ %204, %202 ]
  %207 = getelementptr inbounds i32, ptr %197, i64 %206
  %208 = load i32, ptr %207, align 4, !tbaa !16
  %209 = getelementptr inbounds i32, ptr %198, i64 %206
  store i32 %208, ptr %209, align 4, !tbaa !16
  %210 = add nsw i64 %206, -1
  %211 = icmp eq i64 %206, 0
  br i1 %211, label %212, label %205

212:                                              ; preds = %205
  %213 = load i32, ptr %194, align 4, !tbaa !31
  %214 = add nsw i32 %213, 1
  store i32 %214, ptr %194, align 4, !tbaa !31
  %215 = load i32, ptr %149, align 8, !tbaa !34
  %216 = sext i32 %215 to i64
  %217 = getelementptr inbounds i32, ptr %198, i64 %216
  %218 = load i32, ptr %2, align 8, !tbaa !34
  br label %219

219:                                              ; preds = %212, %195
  %220 = phi i32 [ %218, %212 ], [ %196, %195 ]
  %221 = phi ptr [ %217, %212 ], [ %198, %195 ]
  %222 = sext i32 %220 to i64
  %223 = getelementptr inbounds i32, ptr %197, i64 %222
  %224 = icmp ult ptr %223, %191
  br i1 %224, label %195, label %225

225:                                              ; preds = %219, %184
  %226 = load i32, ptr @debug, align 4, !tbaa !16
  %227 = and i32 %226, 1
  %228 = icmp eq i32 %227, 0
  br i1 %228, label %236, label %229

229:                                              ; preds = %225
  %230 = getelementptr inbounds %struct.set_family, ptr %149, i64 0, i32 3
  %231 = load i32, ptr %230, align 4, !tbaa !31
  %232 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.10, i32 noundef %231) #44
  %233 = load i32, ptr @verbose_debug, align 4, !tbaa !16
  %234 = icmp eq i32 %233, 0
  br i1 %234, label %236, label %235

235:                                              ; preds = %229
  tail call void (ptr, ...) @cprint(ptr noundef nonnull %149) #43
  br label %236

236:                                              ; preds = %235, %229, %225
  tail call void (ptr, ...) @sf_free(ptr noundef nonnull %1) #43
  tail call void (ptr, ...) @sf_free(ptr noundef nonnull %2) #43
  ret ptr %149
}

; Function Attrs: nofree nounwind
declare noundef i32 @puts(ptr nocapture noundef readonly) local_unnamed_addr #10

; Function Attrs: nofree optsize
declare void @qsort(ptr noundef, i64 noundef, i64 noundef, ptr nocapture noundef) local_unnamed_addr #11

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @compl_lift_onset(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, i32 noundef %3) unnamed_addr #0 {
  %5 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 11), align 8, !tbaa !7
  %6 = getelementptr inbounds ptr, ptr %5, i64 4
  %7 = load ptr, ptr %6, align 8, !tbaa !13
  %8 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %9 = sext i32 %3 to i64
  %10 = getelementptr inbounds ptr, ptr %8, i64 %9
  %11 = load ptr, ptr %10, align 8, !tbaa !13
  %12 = load ptr, ptr %0, align 8, !tbaa !13
  %13 = icmp eq ptr %12, null
  br i1 %13, label %93, label %14

14:                                               ; preds = %4
  %15 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 5
  %16 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 3
  br label %17

17:                                               ; preds = %90, %14
  %18 = phi ptr [ %12, %14 ], [ %91, %90 ]
  %19 = phi ptr [ %0, %14 ], [ %20, %90 ]
  %20 = getelementptr inbounds ptr, ptr %19, i64 1
  %21 = load i32, ptr %18, align 4, !tbaa !16
  %22 = and i32 %21, 8192
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %90, label %24

24:                                               ; preds = %17
  %25 = load i32, ptr %2, align 4, !tbaa !16
  %26 = and i32 %25, 1023
  %27 = load i32, ptr %7, align 4, !tbaa !16
  %28 = and i32 %27, -1024
  %29 = or i32 %28, %26
  store i32 %29, ptr %7, align 4, !tbaa !16
  %30 = and i32 %25, 1023
  %31 = zext i32 %30 to i64
  br label %32

32:                                               ; preds = %32, %24
  %33 = phi i64 [ %40, %32 ], [ %31, %24 ]
  %34 = getelementptr inbounds i32, ptr %2, i64 %33
  %35 = load i32, ptr %34, align 4, !tbaa !16
  %36 = getelementptr inbounds i32, ptr %11, i64 %33
  %37 = load i32, ptr %36, align 4, !tbaa !16
  %38 = and i32 %37, %35
  %39 = getelementptr inbounds i32, ptr %7, i64 %33
  store i32 %38, ptr %39, align 4, !tbaa !16
  %40 = add nsw i64 %33, -1
  %41 = icmp ugt i64 %33, 1
  br i1 %41, label %32, label %42

42:                                               ; preds = %32
  %43 = load i32, ptr %18, align 4, !tbaa !16
  %44 = and i32 %43, 1023
  %45 = load i32, ptr %7, align 4, !tbaa !16
  %46 = and i32 %45, -1024
  %47 = or i32 %46, %44
  store i32 %47, ptr %7, align 4, !tbaa !16
  %48 = and i32 %43, 1023
  %49 = zext i32 %48 to i64
  br label %50

50:                                               ; preds = %50, %42
  %51 = phi i64 [ %57, %50 ], [ %49, %42 ]
  %52 = getelementptr inbounds i32, ptr %18, i64 %51
  %53 = load i32, ptr %52, align 4, !tbaa !16
  %54 = getelementptr inbounds i32, ptr %7, i64 %51
  %55 = load i32, ptr %54, align 4, !tbaa !16
  %56 = or i32 %55, %53
  store i32 %56, ptr %54, align 4, !tbaa !16
  %57 = add nsw i64 %51, -1
  %58 = icmp ugt i64 %51, 1
  br i1 %58, label %50, label %59

59:                                               ; preds = %50
  %60 = load ptr, ptr %15, align 8, !tbaa !33
  %61 = load i32, ptr %16, align 4, !tbaa !31
  %62 = load i32, ptr %1, align 8, !tbaa !34
  %63 = mul nsw i32 %62, %61
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds i32, ptr %60, i64 %64
  %66 = icmp sgt i32 %63, 0
  br i1 %66, label %67, label %76

67:                                               ; preds = %71, %59
  %68 = phi ptr [ %74, %71 ], [ %60, %59 ]
  %69 = tail call i32 (ptr, ptr, ...) @cdist0(ptr noundef %68, ptr noundef nonnull %7) #43
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %90

71:                                               ; preds = %67
  %72 = load i32, ptr %1, align 8, !tbaa !34
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds i32, ptr %68, i64 %73
  %75 = icmp ult ptr %74, %65
  br i1 %75, label %67, label %76

76:                                               ; preds = %71, %59
  %77 = load i32, ptr %7, align 4, !tbaa !16
  %78 = and i32 %77, 1023
  %79 = zext i32 %78 to i64
  br label %80

80:                                               ; preds = %80, %76
  %81 = phi i64 [ %85, %80 ], [ %79, %76 ]
  %82 = getelementptr inbounds i32, ptr %7, i64 %81
  %83 = load i32, ptr %82, align 4, !tbaa !16
  %84 = getelementptr inbounds i32, ptr %18, i64 %81
  store i32 %83, ptr %84, align 4, !tbaa !16
  %85 = add nsw i64 %81, -1
  %86 = icmp eq i64 %81, 0
  br i1 %86, label %87, label %80

87:                                               ; preds = %80
  %88 = load i32, ptr %18, align 4, !tbaa !16
  %89 = or i32 %88, 8192
  store i32 %89, ptr %18, align 4, !tbaa !16
  br label %90

90:                                               ; preds = %87, %67, %17
  %91 = load ptr, ptr %20, align 8, !tbaa !13
  %92 = icmp eq ptr %91, null
  br i1 %92, label %93, label %17

93:                                               ; preds = %90, %4
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @compl_lift(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr noundef %2, i32 noundef %3) unnamed_addr #0 {
  %5 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 11), align 8, !tbaa !7
  %6 = getelementptr inbounds ptr, ptr %5, i64 4
  %7 = load ptr, ptr %6, align 8, !tbaa !13
  %8 = getelementptr inbounds ptr, ptr %5, i64 5
  %9 = load ptr, ptr %8, align 8, !tbaa !13
  %10 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %11 = sext i32 %3 to i64
  %12 = getelementptr inbounds ptr, ptr %10, i64 %11
  %13 = load ptr, ptr %12, align 8, !tbaa !13
  %14 = tail call ptr (ptr, ptr, ptr, ...) @set_and(ptr noundef %9, ptr noundef %2, ptr noundef %13) #43
  %15 = load ptr, ptr %0, align 8, !tbaa !13
  %16 = icmp eq ptr %15, null
  br i1 %16, label %68, label %17

17:                                               ; preds = %65, %4
  %18 = phi ptr [ %66, %65 ], [ %15, %4 ]
  %19 = phi ptr [ %20, %65 ], [ %0, %4 ]
  %20 = getelementptr inbounds ptr, ptr %19, i64 1
  %21 = load i32, ptr %18, align 4, !tbaa !16
  %22 = and i32 %21, 8192
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %65, label %24

24:                                               ; preds = %17
  %25 = tail call ptr (ptr, ptr, ptr, ptr, ...) @set_merge(ptr noundef %7, ptr noundef %2, ptr noundef nonnull %18, ptr noundef %13) #43
  br label %26

26:                                               ; preds = %49, %24
  %27 = phi ptr [ %1, %24 ], [ %28, %49 ]
  %28 = getelementptr inbounds ptr, ptr %27, i64 1
  %29 = load ptr, ptr %27, align 8, !tbaa !13
  %30 = icmp eq ptr %29, null
  br i1 %30, label %65, label %31

31:                                               ; preds = %26
  %32 = load i32, ptr %7, align 4, !tbaa !16
  %33 = and i32 %32, 1023
  %34 = tail call i32 @llvm.smin.i32(i32 %33, i32 1)
  %35 = add nsw i32 %34, -1
  br label %36

36:                                               ; preds = %46, %31
  %37 = phi i32 [ %33, %31 ], [ %47, %46 ]
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds i32, ptr %7, i64 %38
  %40 = load i32, ptr %39, align 4, !tbaa !16
  %41 = getelementptr inbounds i32, ptr %29, i64 %38
  %42 = load i32, ptr %41, align 4, !tbaa !16
  %43 = xor i32 %42, -1
  %44 = and i32 %40, %43
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %49

46:                                               ; preds = %36
  %47 = add nsw i32 %37, -1
  %48 = icmp sgt i32 %37, 1
  br i1 %48, label %36, label %49

49:                                               ; preds = %46, %36
  %50 = phi i32 [ %37, %36 ], [ %35, %46 ]
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %26

52:                                               ; preds = %49
  %53 = load i32, ptr %18, align 4, !tbaa !16
  %54 = and i32 %53, 1023
  %55 = zext i32 %54 to i64
  br label %56

56:                                               ; preds = %56, %52
  %57 = phi i64 [ %63, %56 ], [ %55, %52 ]
  %58 = getelementptr inbounds i32, ptr %18, i64 %57
  %59 = load i32, ptr %58, align 4, !tbaa !16
  %60 = getelementptr inbounds i32, ptr %9, i64 %57
  %61 = load i32, ptr %60, align 4, !tbaa !16
  %62 = or i32 %61, %59
  store i32 %62, ptr %58, align 4, !tbaa !16
  %63 = add nsw i64 %57, -1
  %64 = icmp ugt i64 %57, 1
  br i1 %64, label %56, label %65

65:                                               ; preds = %56, %26, %17
  %66 = load ptr, ptr %20, align 8, !tbaa !13
  %67 = icmp eq ptr %66, null
  br i1 %67, label %68, label %17

68:                                               ; preds = %65, %4
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #2

; Function Attrs: nounwind optsize uwtable
define internal void @simp_comp(ptr noundef %0, ptr nocapture noundef %1, ptr nocapture noundef %2) #0 {
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #45
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #45
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #45
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #45
  %8 = load i32, ptr @debug, align 4, !tbaa !16
  %9 = and i32 %8, 1
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %14, label %11

11:                                               ; preds = %3
  %12 = load i32, ptr @simp_comp.simplify_level, align 4, !tbaa !16
  %13 = add nsw i32 %12, 1
  store i32 %13, ptr @simp_comp.simplify_level, align 4, !tbaa !16
  tail call void (ptr, ptr, i32, ...) @debug_print(ptr noundef %0, ptr noundef nonnull @.str.2.4, i32 noundef %12) #43
  br label %14

14:                                               ; preds = %11, %3
  %15 = load ptr, ptr %0, align 8, !tbaa !13
  %16 = getelementptr inbounds ptr, ptr %0, i64 2
  %17 = load ptr, ptr %16, align 8, !tbaa !13
  %18 = icmp eq ptr %17, null
  br i1 %18, label %19, label %28

19:                                               ; preds = %14
  %20 = load i32, ptr @cube, align 8, !tbaa !14
  %21 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 1, i32 noundef %20) #43
  store ptr %21, ptr %1, align 8, !tbaa !13
  %22 = load i32, ptr @cube, align 8, !tbaa !14
  %23 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 1, i32 noundef %22) #43
  %24 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %25 = tail call ptr (ptr, ptr, ...) @sf_addset(ptr noundef %23, ptr noundef %24) #43
  store ptr %25, ptr %2, align 8, !tbaa !13
  %26 = load ptr, ptr %0, align 8, !tbaa !13
  %27 = icmp eq ptr %26, null
  br i1 %27, label %227, label %225

28:                                               ; preds = %14
  %29 = getelementptr inbounds ptr, ptr %0, i64 3
  %30 = load ptr, ptr %29, align 8, !tbaa !13
  %31 = icmp eq ptr %30, null
  br i1 %31, label %32, label %40

32:                                               ; preds = %28
  %33 = tail call ptr (ptr, ptr, ptr, ...) @set_or(ptr noundef %15, ptr noundef %15, ptr noundef nonnull %17) #43
  %34 = load i32, ptr @cube, align 8, !tbaa !14
  %35 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 1, i32 noundef %34) #43
  %36 = tail call ptr (ptr, ptr, ...) @sf_addset(ptr noundef %35, ptr noundef %15) #43
  store ptr %36, ptr %1, align 8, !tbaa !13
  %37 = tail call fastcc ptr @compl_cube(ptr noundef %15) #44
  store ptr %37, ptr %2, align 8, !tbaa !13
  %38 = load ptr, ptr %0, align 8, !tbaa !13
  %39 = icmp eq ptr %38, null
  br i1 %39, label %227, label %225

40:                                               ; preds = %44, %28
  %41 = phi ptr [ %45, %44 ], [ %16, %28 ]
  %42 = load ptr, ptr %41, align 8, !tbaa !13
  %43 = icmp eq ptr %42, null
  br i1 %43, label %57, label %44

44:                                               ; preds = %40
  %45 = getelementptr inbounds ptr, ptr %41, i64 1
  %46 = tail call i32 (ptr, ptr, ...) @full_row(ptr noundef nonnull %42, ptr noundef %15) #43
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %40, label %48

48:                                               ; preds = %44
  %49 = load i32, ptr @cube, align 8, !tbaa !14
  %50 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 1, i32 noundef %49) #43
  %51 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %52 = tail call ptr (ptr, ptr, ...) @sf_addset(ptr noundef %50, ptr noundef %51) #43
  store ptr %52, ptr %1, align 8, !tbaa !13
  %53 = load i32, ptr @cube, align 8, !tbaa !14
  %54 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 1, i32 noundef %53) #43
  store ptr %54, ptr %2, align 8, !tbaa !13
  %55 = load ptr, ptr %0, align 8, !tbaa !13
  %56 = icmp eq ptr %55, null
  br i1 %56, label %227, label %225

57:                                               ; preds = %40
  %58 = load i32, ptr %15, align 4, !tbaa !16
  %59 = shl i32 %58, 5
  %60 = and i32 %59, 32736
  %61 = icmp ult i32 %60, 33
  %62 = add nsw i32 %60, -1
  %63 = lshr i32 %62, 3
  %64 = and i32 %63, 536870908
  %65 = add nuw nsw i32 %64, 8
  %66 = select i1 %61, i32 8, i32 %65
  %67 = zext i32 %66 to i64
  %68 = tail call noalias ptr @malloc(i64 noundef %67) #42
  %69 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %68, ptr noundef nonnull %15) #43
  %70 = load ptr, ptr %16, align 8, !tbaa !13
  %71 = icmp eq ptr %70, null
  br i1 %71, label %91, label %76

72:                                               ; preds = %82
  %73 = getelementptr inbounds ptr, ptr %78, i64 1
  %74 = load ptr, ptr %78, align 8, !tbaa !13
  %75 = icmp eq ptr %74, null
  br i1 %75, label %91, label %76

76:                                               ; preds = %72, %57
  %77 = phi ptr [ %74, %72 ], [ %70, %57 ]
  %78 = phi ptr [ %73, %72 ], [ %29, %57 ]
  %79 = load i32, ptr %69, align 4, !tbaa !16
  %80 = and i32 %79, 1023
  %81 = zext i32 %80 to i64
  br label %82

82:                                               ; preds = %82, %76
  %83 = phi i64 [ %89, %82 ], [ %81, %76 ]
  %84 = getelementptr inbounds i32, ptr %69, i64 %83
  %85 = load i32, ptr %84, align 4, !tbaa !16
  %86 = getelementptr inbounds i32, ptr %77, i64 %83
  %87 = load i32, ptr %86, align 4, !tbaa !16
  %88 = or i32 %87, %85
  store i32 %88, ptr %84, align 4, !tbaa !16
  %89 = add nsw i64 %83, -1
  %90 = icmp ugt i64 %83, 1
  br i1 %90, label %82, label %72

91:                                               ; preds = %72, %57
  %92 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %93 = tail call i32 (ptr, ptr, ...) @setp_equal(ptr noundef %69, ptr noundef %92) #43
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %146

95:                                               ; preds = %91
  %96 = load i32, ptr @cube, align 8, !tbaa !14
  %97 = icmp slt i32 %96, 33
  %98 = add nsw i32 %96, -1
  %99 = lshr i32 %98, 3
  %100 = and i32 %99, 536870908
  %101 = add nuw nsw i32 %100, 8
  %102 = select i1 %97, i32 8, i32 %101
  %103 = zext i32 %102 to i64
  %104 = tail call noalias ptr @malloc(i64 noundef %103) #42
  %105 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %104, i32 noundef %96) #43
  %106 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %107 = tail call ptr (ptr, ptr, ptr, ...) @set_diff(ptr noundef %105, ptr noundef %106, ptr noundef %69) #43
  %108 = tail call ptr (ptr, ptr, ptr, ...) @set_or(ptr noundef nonnull %15, ptr noundef nonnull %15, ptr noundef %105) #43
  %109 = icmp eq ptr %105, null
  br i1 %109, label %111, label %110

110:                                              ; preds = %95
  tail call void @free(ptr noundef nonnull %105) #43
  br label %111

111:                                              ; preds = %110, %95
  tail call void @simp_comp(ptr noundef nonnull %0, ptr noundef %1, ptr noundef %2) #44
  %112 = load ptr, ptr %1, align 8, !tbaa !13
  %113 = getelementptr inbounds %struct.set_family, ptr %112, i64 0, i32 5
  %114 = load ptr, ptr %113, align 8, !tbaa !33
  %115 = getelementptr inbounds %struct.set_family, ptr %112, i64 0, i32 3
  %116 = load i32, ptr %115, align 4, !tbaa !31
  %117 = load i32, ptr %112, align 8, !tbaa !34
  %118 = mul nsw i32 %117, %116
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds i32, ptr %114, i64 %119
  %121 = icmp sgt i32 %118, 0
  br i1 %121, label %122, label %141

122:                                              ; preds = %136, %111
  %123 = phi ptr [ %139, %136 ], [ %114, %111 ]
  %124 = load i32, ptr %123, align 4, !tbaa !16
  %125 = and i32 %124, 1023
  %126 = zext i32 %125 to i64
  br label %127

127:                                              ; preds = %127, %122
  %128 = phi i64 [ %134, %127 ], [ %126, %122 ]
  %129 = getelementptr inbounds i32, ptr %123, i64 %128
  %130 = load i32, ptr %129, align 4, !tbaa !16
  %131 = getelementptr inbounds i32, ptr %69, i64 %128
  %132 = load i32, ptr %131, align 4, !tbaa !16
  %133 = and i32 %132, %130
  store i32 %133, ptr %129, align 4, !tbaa !16
  %134 = add nsw i64 %128, -1
  %135 = icmp ugt i64 %128, 1
  br i1 %135, label %127, label %136

136:                                              ; preds = %127
  %137 = load i32, ptr %112, align 8, !tbaa !34
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds i32, ptr %123, i64 %138
  %140 = icmp ult ptr %139, %120
  br i1 %140, label %122, label %141

141:                                              ; preds = %136, %111
  %142 = load ptr, ptr %2, align 8, !tbaa !13
  %143 = tail call fastcc ptr @compl_cube(ptr noundef %69) #44
  %144 = tail call ptr (ptr, ptr, ...) @sf_append(ptr noundef %142, ptr noundef %143) #43
  store ptr %144, ptr %2, align 8, !tbaa !13
  %145 = icmp eq ptr %69, null
  br i1 %145, label %229, label %227

146:                                              ; preds = %91
  %147 = icmp eq ptr %69, null
  br i1 %147, label %149, label %148

148:                                              ; preds = %146
  tail call void @free(ptr noundef nonnull %69) #43
  br label %149

149:                                              ; preds = %148, %146
  tail call void (ptr, ...) @massive_count(ptr noundef nonnull %0) #43
  %150 = load i32, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 4), align 8, !tbaa !22
  %151 = icmp eq i32 %150, 1
  br i1 %151, label %152, label %161

152:                                              ; preds = %149
  %153 = load i32, ptr @cube, align 8, !tbaa !14
  %154 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 1, i32 noundef %153) #43
  %155 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %156 = tail call ptr (ptr, ptr, ...) @sf_addset(ptr noundef %154, ptr noundef %155) #43
  store ptr %156, ptr %1, align 8, !tbaa !13
  %157 = load i32, ptr @cube, align 8, !tbaa !14
  %158 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 1, i32 noundef %157) #43
  store ptr %158, ptr %2, align 8, !tbaa !13
  %159 = load ptr, ptr %0, align 8, !tbaa !13
  %160 = icmp eq ptr %159, null
  br i1 %160, label %227, label %225

161:                                              ; preds = %149
  %162 = load i32, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 5), align 4, !tbaa !23
  %163 = icmp eq i32 %162, %150
  br i1 %163, label %164, label %172

164:                                              ; preds = %161
  %165 = tail call ptr (ptr, ...) @cubeunlist(ptr noundef nonnull %0) #43
  %166 = tail call ptr (ptr, ...) @sf_contain(ptr noundef %165) #43
  store ptr %166, ptr %1, align 8, !tbaa !13
  %167 = tail call ptr (ptr, ...) @map_cover_to_unate(ptr noundef nonnull %0) #43
  %168 = tail call ptr (ptr, ...) @unate_compl(ptr noundef %167) #43
  %169 = tail call ptr (ptr, ...) @map_unate_to_cover(ptr noundef %168) #43
  store ptr %169, ptr %2, align 8, !tbaa !13
  tail call void (ptr, ...) @sf_free(ptr noundef %168) #43
  %170 = load ptr, ptr %0, align 8, !tbaa !13
  %171 = icmp eq ptr %170, null
  br i1 %171, label %227, label %225

172:                                              ; preds = %161
  %173 = load i32, ptr @cube, align 8, !tbaa !14
  %174 = icmp slt i32 %173, 33
  %175 = add nsw i32 %173, -1
  %176 = lshr i32 %175, 3
  %177 = and i32 %176, 536870908
  %178 = add nuw nsw i32 %177, 8
  %179 = select i1 %174, i32 8, i32 %178
  %180 = zext i32 %179 to i64
  %181 = tail call noalias ptr @malloc(i64 noundef %180) #42
  %182 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %181, i32 noundef %173) #43
  %183 = load i32, ptr @cube, align 8, !tbaa !14
  %184 = icmp slt i32 %183, 33
  %185 = add nsw i32 %183, -1
  %186 = lshr i32 %185, 3
  %187 = and i32 %186, 536870908
  %188 = add nuw nsw i32 %187, 8
  %189 = select i1 %184, i32 8, i32 %188
  %190 = zext i32 %189 to i64
  %191 = tail call noalias ptr @malloc(i64 noundef %190) #42
  %192 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %191, i32 noundef %183) #43
  %193 = tail call i32 (ptr, ptr, ptr, i32, ...) @binate_split_select(ptr noundef nonnull %0, ptr noundef %182, ptr noundef %192, i32 noundef 1) #43
  %194 = tail call ptr (ptr, ptr, i32, ...) @scofactor(ptr noundef nonnull %0, ptr noundef %182, i32 noundef %193) #43
  call void @simp_comp(ptr noundef %194, ptr noundef nonnull %4, ptr noundef nonnull %6) #44
  %195 = tail call ptr (ptr, ptr, i32, ...) @scofactor(ptr noundef nonnull %0, ptr noundef %192, i32 noundef %193) #43
  call void @simp_comp(ptr noundef %195, ptr noundef nonnull %5, ptr noundef nonnull %7) #44
  %196 = load ptr, ptr %4, align 8, !tbaa !13
  %197 = load ptr, ptr %5, align 8, !tbaa !13
  %198 = tail call fastcc ptr @compl_merge(ptr noundef nonnull %0, ptr noundef %196, ptr noundef %197, ptr noundef %182, ptr noundef %192, i32 noundef %193, i32 noundef 0) #44
  store ptr %198, ptr %1, align 8, !tbaa !13
  %199 = load ptr, ptr %6, align 8, !tbaa !13
  %200 = load ptr, ptr %7, align 8, !tbaa !13
  %201 = tail call fastcc ptr @compl_merge(ptr noundef nonnull %0, ptr noundef %199, ptr noundef %200, ptr noundef %182, ptr noundef %192, i32 noundef %193, i32 noundef 0) #44
  store ptr %201, ptr %2, align 8, !tbaa !13
  %202 = load ptr, ptr %1, align 8, !tbaa !13
  %203 = getelementptr inbounds %struct.set_family, ptr %202, i64 0, i32 3
  %204 = load i32, ptr %203, align 4, !tbaa !31
  %205 = sext i32 %204 to i64
  %206 = getelementptr inbounds ptr, ptr %0, i64 1
  %207 = load ptr, ptr %206, align 8, !tbaa !13
  %208 = ptrtoint ptr %207 to i64
  %209 = ptrtoint ptr %0 to i64
  %210 = sub i64 %208, %209
  %211 = ashr exact i64 %210, 3
  %212 = add nsw i64 %211, -3
  %213 = icmp slt i64 %212, %205
  br i1 %213, label %214, label %216

214:                                              ; preds = %172
  tail call void (ptr, ...) @sf_free(ptr noundef nonnull %202) #43
  %215 = tail call ptr (ptr, ...) @cubeunlist(ptr noundef nonnull %0) #43
  store ptr %215, ptr %1, align 8, !tbaa !13
  br label %216

216:                                              ; preds = %214, %172
  %217 = icmp eq ptr %182, null
  br i1 %217, label %219, label %218

218:                                              ; preds = %216
  tail call void @free(ptr noundef nonnull %182) #43
  br label %219

219:                                              ; preds = %218, %216
  %220 = icmp eq ptr %192, null
  br i1 %220, label %222, label %221

221:                                              ; preds = %219
  tail call void @free(ptr noundef nonnull %192) #43
  br label %222

222:                                              ; preds = %221, %219
  %223 = load ptr, ptr %0, align 8, !tbaa !13
  %224 = icmp eq ptr %223, null
  br i1 %224, label %227, label %225

225:                                              ; preds = %222, %164, %152, %48, %32, %19
  %226 = phi ptr [ %26, %19 ], [ %38, %32 ], [ %55, %48 ], [ %159, %152 ], [ %170, %164 ], [ %223, %222 ]
  tail call void @free(ptr noundef nonnull %226) #43
  br label %227

227:                                              ; preds = %225, %222, %164, %152, %141, %48, %32, %19
  %228 = phi ptr [ %0, %19 ], [ %0, %32 ], [ %0, %48 ], [ %69, %141 ], [ %0, %152 ], [ %0, %164 ], [ %0, %222 ], [ %0, %225 ]
  tail call void @free(ptr noundef nonnull %228) #43
  br label %229

229:                                              ; preds = %227, %141
  %230 = load i32, ptr @debug, align 4, !tbaa !16
  %231 = and i32 %230, 1
  %232 = icmp eq i32 %231, 0
  br i1 %232, label %240, label %233

233:                                              ; preds = %229
  %234 = load ptr, ptr %1, align 8, !tbaa !13
  %235 = load i32, ptr @simp_comp.simplify_level, align 4, !tbaa !16
  tail call void (ptr, ptr, i32, ...) @debug1_print(ptr noundef %234, ptr noundef nonnull @.str.3, i32 noundef %235) #43
  %236 = load ptr, ptr %2, align 8, !tbaa !13
  %237 = load i32, ptr @simp_comp.simplify_level, align 4, !tbaa !16
  tail call void (ptr, ptr, i32, ...) @debug1_print(ptr noundef %236, ptr noundef nonnull @.str.4, i32 noundef %237) #43
  %238 = load i32, ptr @simp_comp.simplify_level, align 4, !tbaa !16
  %239 = add nsw i32 %238, -1
  store i32 %239, ptr @simp_comp.simplify_level, align 4, !tbaa !16
  br label %240

240:                                              ; preds = %233, %229
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #45
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #45
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #45
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #45
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #12

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #12

; Function Attrs: nounwind optsize uwtable
define internal ptr @simplify(ptr noundef %0) #0 {
  %2 = load i32, ptr @debug, align 4, !tbaa !16
  %3 = and i32 %2, 1
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = load i32, ptr @simplify.simplify_level, align 4, !tbaa !16
  %7 = add nsw i32 %6, 1
  store i32 %7, ptr @simplify.simplify_level, align 4, !tbaa !16
  tail call void (ptr, ptr, i32, ...) @debug_print(ptr noundef %0, ptr noundef nonnull @.str.5, i32 noundef %6) #43
  br label %8

8:                                                ; preds = %5, %1
  %9 = load ptr, ptr %0, align 8, !tbaa !13
  %10 = getelementptr inbounds ptr, ptr %0, i64 2
  %11 = load ptr, ptr %10, align 8, !tbaa !13
  %12 = icmp eq ptr %11, null
  br i1 %12, label %13, label %18

13:                                               ; preds = %8
  %14 = load i32, ptr @cube, align 8, !tbaa !14
  %15 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 0, i32 noundef %14) #43
  %16 = load ptr, ptr %0, align 8, !tbaa !13
  %17 = icmp eq ptr %16, null
  br i1 %17, label %205, label %202

18:                                               ; preds = %8
  %19 = getelementptr inbounds ptr, ptr %0, i64 3
  %20 = load ptr, ptr %19, align 8, !tbaa !13
  %21 = icmp eq ptr %20, null
  br i1 %21, label %22, label %30

22:                                               ; preds = %18
  %23 = load i32, ptr @cube, align 8, !tbaa !14
  %24 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 1, i32 noundef %23) #43
  %25 = load ptr, ptr %10, align 8, !tbaa !13
  %26 = tail call ptr (ptr, ptr, ptr, ...) @set_or(ptr noundef %9, ptr noundef %9, ptr noundef %25) #43
  %27 = tail call ptr (ptr, ptr, ...) @sf_addset(ptr noundef %24, ptr noundef %26) #43
  %28 = load ptr, ptr %0, align 8, !tbaa !13
  %29 = icmp eq ptr %28, null
  br i1 %29, label %205, label %202

30:                                               ; preds = %34, %18
  %31 = phi ptr [ %35, %34 ], [ %10, %18 ]
  %32 = load ptr, ptr %31, align 8, !tbaa !13
  %33 = icmp eq ptr %32, null
  br i1 %33, label %45, label %34

34:                                               ; preds = %30
  %35 = getelementptr inbounds ptr, ptr %31, i64 1
  %36 = tail call i32 (ptr, ptr, ...) @full_row(ptr noundef nonnull %32, ptr noundef %9) #43
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %30, label %38

38:                                               ; preds = %34
  %39 = load i32, ptr @cube, align 8, !tbaa !14
  %40 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 1, i32 noundef %39) #43
  %41 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %42 = tail call ptr (ptr, ptr, ...) @sf_addset(ptr noundef %40, ptr noundef %41) #43
  %43 = load ptr, ptr %0, align 8, !tbaa !13
  %44 = icmp eq ptr %43, null
  br i1 %44, label %205, label %202

45:                                               ; preds = %30
  %46 = load i32, ptr %9, align 4, !tbaa !16
  %47 = shl i32 %46, 5
  %48 = and i32 %47, 32736
  %49 = icmp ult i32 %48, 33
  %50 = add nsw i32 %48, -1
  %51 = lshr i32 %50, 3
  %52 = and i32 %51, 536870908
  %53 = add nuw nsw i32 %52, 8
  %54 = select i1 %49, i32 8, i32 %53
  %55 = zext i32 %54 to i64
  %56 = tail call noalias ptr @malloc(i64 noundef %55) #42
  %57 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %56, ptr noundef nonnull %9) #43
  %58 = load ptr, ptr %10, align 8, !tbaa !13
  %59 = icmp eq ptr %58, null
  br i1 %59, label %79, label %64

60:                                               ; preds = %70
  %61 = getelementptr inbounds ptr, ptr %66, i64 1
  %62 = load ptr, ptr %66, align 8, !tbaa !13
  %63 = icmp eq ptr %62, null
  br i1 %63, label %79, label %64

64:                                               ; preds = %60, %45
  %65 = phi ptr [ %62, %60 ], [ %58, %45 ]
  %66 = phi ptr [ %61, %60 ], [ %19, %45 ]
  %67 = load i32, ptr %57, align 4, !tbaa !16
  %68 = and i32 %67, 1023
  %69 = zext i32 %68 to i64
  br label %70

70:                                               ; preds = %70, %64
  %71 = phi i64 [ %77, %70 ], [ %69, %64 ]
  %72 = getelementptr inbounds i32, ptr %57, i64 %71
  %73 = load i32, ptr %72, align 4, !tbaa !16
  %74 = getelementptr inbounds i32, ptr %65, i64 %71
  %75 = load i32, ptr %74, align 4, !tbaa !16
  %76 = or i32 %75, %73
  store i32 %76, ptr %72, align 4, !tbaa !16
  %77 = add nsw i64 %71, -1
  %78 = icmp ugt i64 %71, 1
  br i1 %78, label %70, label %60

79:                                               ; preds = %60, %45
  %80 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %81 = tail call i32 (ptr, ptr, ...) @setp_equal(ptr noundef %57, ptr noundef %80) #43
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %131

83:                                               ; preds = %79
  %84 = load i32, ptr @cube, align 8, !tbaa !14
  %85 = icmp slt i32 %84, 33
  %86 = add nsw i32 %84, -1
  %87 = lshr i32 %86, 3
  %88 = and i32 %87, 536870908
  %89 = add nuw nsw i32 %88, 8
  %90 = select i1 %85, i32 8, i32 %89
  %91 = zext i32 %90 to i64
  %92 = tail call noalias ptr @malloc(i64 noundef %91) #42
  %93 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %92, i32 noundef %84) #43
  %94 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %95 = tail call ptr (ptr, ptr, ptr, ...) @set_diff(ptr noundef %93, ptr noundef %94, ptr noundef %57) #43
  %96 = tail call ptr (ptr, ptr, ptr, ...) @set_or(ptr noundef nonnull %9, ptr noundef nonnull %9, ptr noundef %93) #43
  %97 = icmp eq ptr %93, null
  br i1 %97, label %99, label %98

98:                                               ; preds = %83
  tail call void @free(ptr noundef nonnull %93) #43
  br label %99

99:                                               ; preds = %98, %83
  %100 = tail call ptr @simplify(ptr noundef nonnull %0) #44
  %101 = getelementptr inbounds %struct.set_family, ptr %100, i64 0, i32 5
  %102 = load ptr, ptr %101, align 8, !tbaa !33
  %103 = getelementptr inbounds %struct.set_family, ptr %100, i64 0, i32 3
  %104 = load i32, ptr %103, align 4, !tbaa !31
  %105 = load i32, ptr %100, align 8, !tbaa !34
  %106 = mul nsw i32 %105, %104
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds i32, ptr %102, i64 %107
  %109 = icmp sgt i32 %106, 0
  br i1 %109, label %110, label %129

110:                                              ; preds = %124, %99
  %111 = phi ptr [ %127, %124 ], [ %102, %99 ]
  %112 = load i32, ptr %111, align 4, !tbaa !16
  %113 = and i32 %112, 1023
  %114 = zext i32 %113 to i64
  br label %115

115:                                              ; preds = %115, %110
  %116 = phi i64 [ %122, %115 ], [ %114, %110 ]
  %117 = getelementptr inbounds i32, ptr %111, i64 %116
  %118 = load i32, ptr %117, align 4, !tbaa !16
  %119 = getelementptr inbounds i32, ptr %57, i64 %116
  %120 = load i32, ptr %119, align 4, !tbaa !16
  %121 = and i32 %120, %118
  store i32 %121, ptr %117, align 4, !tbaa !16
  %122 = add nsw i64 %116, -1
  %123 = icmp ugt i64 %116, 1
  br i1 %123, label %115, label %124

124:                                              ; preds = %115
  %125 = load i32, ptr %100, align 8, !tbaa !34
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds i32, ptr %111, i64 %126
  %128 = icmp ult ptr %127, %108
  br i1 %128, label %110, label %205

129:                                              ; preds = %99
  %130 = icmp eq ptr %57, null
  br i1 %130, label %208, label %205

131:                                              ; preds = %79
  %132 = icmp eq ptr %57, null
  br i1 %132, label %134, label %133

133:                                              ; preds = %131
  tail call void @free(ptr noundef nonnull %57) #43
  br label %134

134:                                              ; preds = %133, %131
  tail call void (ptr, ...) @massive_count(ptr noundef nonnull %0) #43
  %135 = load i32, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 4), align 8, !tbaa !22
  %136 = icmp eq i32 %135, 1
  br i1 %136, label %137, label %144

137:                                              ; preds = %134
  %138 = load i32, ptr @cube, align 8, !tbaa !14
  %139 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 1, i32 noundef %138) #43
  %140 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %141 = tail call ptr (ptr, ptr, ...) @sf_addset(ptr noundef %139, ptr noundef %140) #43
  %142 = load ptr, ptr %0, align 8, !tbaa !13
  %143 = icmp eq ptr %142, null
  br i1 %143, label %205, label %202

144:                                              ; preds = %134
  %145 = load i32, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 5), align 4, !tbaa !23
  %146 = icmp eq i32 %145, %135
  br i1 %146, label %147, label %152

147:                                              ; preds = %144
  %148 = tail call ptr (ptr, ...) @cubeunlist(ptr noundef nonnull %0) #43
  %149 = tail call ptr (ptr, ...) @sf_contain(ptr noundef %148) #43
  %150 = load ptr, ptr %0, align 8, !tbaa !13
  %151 = icmp eq ptr %150, null
  br i1 %151, label %205, label %202

152:                                              ; preds = %144
  %153 = load i32, ptr @cube, align 8, !tbaa !14
  %154 = icmp slt i32 %153, 33
  %155 = add nsw i32 %153, -1
  %156 = lshr i32 %155, 3
  %157 = and i32 %156, 536870908
  %158 = add nuw nsw i32 %157, 8
  %159 = select i1 %154, i32 8, i32 %158
  %160 = zext i32 %159 to i64
  %161 = tail call noalias ptr @malloc(i64 noundef %160) #42
  %162 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %161, i32 noundef %153) #43
  %163 = load i32, ptr @cube, align 8, !tbaa !14
  %164 = icmp slt i32 %163, 33
  %165 = add nsw i32 %163, -1
  %166 = lshr i32 %165, 3
  %167 = and i32 %166, 536870908
  %168 = add nuw nsw i32 %167, 8
  %169 = select i1 %164, i32 8, i32 %168
  %170 = zext i32 %169 to i64
  %171 = tail call noalias ptr @malloc(i64 noundef %170) #42
  %172 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %171, i32 noundef %163) #43
  %173 = tail call i32 (ptr, ptr, ptr, i32, ...) @binate_split_select(ptr noundef nonnull %0, ptr noundef %162, ptr noundef %172, i32 noundef 1) #43
  %174 = tail call ptr (ptr, ptr, i32, ...) @scofactor(ptr noundef nonnull %0, ptr noundef %162, i32 noundef %173) #43
  %175 = tail call ptr @simplify(ptr noundef %174) #44
  %176 = tail call ptr (ptr, ptr, i32, ...) @scofactor(ptr noundef nonnull %0, ptr noundef %172, i32 noundef %173) #43
  %177 = tail call ptr @simplify(ptr noundef %176) #44
  %178 = tail call fastcc ptr @compl_merge(ptr noundef nonnull %0, ptr noundef %175, ptr noundef %177, ptr noundef %162, ptr noundef %172, i32 noundef %173, i32 noundef 0) #44
  %179 = getelementptr inbounds %struct.set_family, ptr %178, i64 0, i32 3
  %180 = load i32, ptr %179, align 4, !tbaa !31
  %181 = sext i32 %180 to i64
  %182 = getelementptr inbounds ptr, ptr %0, i64 1
  %183 = load ptr, ptr %182, align 8, !tbaa !13
  %184 = ptrtoint ptr %183 to i64
  %185 = ptrtoint ptr %0 to i64
  %186 = sub i64 %184, %185
  %187 = ashr exact i64 %186, 3
  %188 = add nsw i64 %187, -3
  %189 = icmp slt i64 %188, %181
  br i1 %189, label %190, label %192

190:                                              ; preds = %152
  tail call void (ptr, ...) @sf_free(ptr noundef nonnull %178) #43
  %191 = tail call ptr (ptr, ...) @cubeunlist(ptr noundef nonnull %0) #43
  br label %192

192:                                              ; preds = %190, %152
  %193 = phi ptr [ %191, %190 ], [ %178, %152 ]
  %194 = icmp eq ptr %162, null
  br i1 %194, label %196, label %195

195:                                              ; preds = %192
  tail call void @free(ptr noundef nonnull %162) #43
  br label %196

196:                                              ; preds = %195, %192
  %197 = icmp eq ptr %172, null
  br i1 %197, label %199, label %198

198:                                              ; preds = %196
  tail call void @free(ptr noundef nonnull %172) #43
  br label %199

199:                                              ; preds = %198, %196
  %200 = load ptr, ptr %0, align 8, !tbaa !13
  %201 = icmp eq ptr %200, null
  br i1 %201, label %205, label %202

202:                                              ; preds = %199, %147, %137, %38, %22, %13
  %203 = phi ptr [ %16, %13 ], [ %28, %22 ], [ %43, %38 ], [ %142, %137 ], [ %150, %147 ], [ %200, %199 ]
  %204 = phi ptr [ %15, %13 ], [ %27, %22 ], [ %42, %38 ], [ %141, %137 ], [ %149, %147 ], [ %193, %199 ]
  tail call void @free(ptr noundef nonnull %203) #43
  br label %205

205:                                              ; preds = %202, %199, %147, %137, %129, %124, %38, %22, %13
  %206 = phi ptr [ %0, %13 ], [ %0, %22 ], [ %0, %38 ], [ %57, %129 ], [ %0, %137 ], [ %0, %147 ], [ %0, %199 ], [ %0, %202 ], [ %57, %124 ]
  %207 = phi ptr [ %15, %13 ], [ %27, %22 ], [ %42, %38 ], [ %100, %129 ], [ %141, %137 ], [ %149, %147 ], [ %193, %199 ], [ %204, %202 ], [ %100, %124 ]
  tail call void @free(ptr noundef nonnull %206) #43
  br label %208

208:                                              ; preds = %205, %129
  %209 = phi ptr [ %100, %129 ], [ %207, %205 ]
  %210 = load i32, ptr @debug, align 4, !tbaa !16
  %211 = and i32 %210, 1
  %212 = icmp eq i32 %211, 0
  br i1 %212, label %216, label %213

213:                                              ; preds = %208
  %214 = load i32, ptr @simplify.simplify_level, align 4, !tbaa !16
  %215 = add nsw i32 %214, -1
  store i32 %215, ptr @simplify.simplify_level, align 4, !tbaa !16
  tail call void (ptr, ptr, i32, ...) @debug1_print(ptr noundef %209, ptr noundef nonnull @.str.6, i32 noundef %215) #43
  br label %216

216:                                              ; preds = %213, %208
  ret ptr %209
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @sf_contain(ptr noundef %0) #0 {
  %2 = tail call ptr @sf_sort(ptr noundef %0, ptr noundef nonnull @descend) #44
  %3 = tail call i32 @rm_equal(ptr noundef %2, ptr noundef nonnull @descend) #44
  %4 = tail call i32 @rm_contain(ptr noundef %2) #44
  %5 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 1
  %6 = load i32, ptr %5, align 4, !tbaa !44
  %7 = tail call ptr @sf_unlist(ptr noundef %2, i32 noundef %4, i32 noundef %6) #44
  tail call void (ptr, ...) @sf_free(ptr noundef %0) #43
  ret ptr %7
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @sf_sort(ptr nocapture noundef readonly %0, ptr nocapture noundef %1) #0 {
  %3 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %4 = load i32, ptr %3, align 4, !tbaa !31
  %5 = add nsw i32 %4, 1
  %6 = sext i32 %5 to i64
  %7 = shl nsw i64 %6, 3
  %8 = tail call noalias ptr @malloc(i64 noundef %7) #42
  %9 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %10 = load ptr, ptr %9, align 8, !tbaa !33
  %11 = load i32, ptr %0, align 8, !tbaa !34
  %12 = mul nsw i32 %11, %4
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds i32, ptr %10, i64 %13
  %15 = icmp sgt i32 %12, 0
  br i1 %15, label %16, label %32

16:                                               ; preds = %16, %2
  %17 = phi ptr [ %28, %16 ], [ %10, %2 ]
  %18 = phi ptr [ %25, %16 ], [ %8, %2 ]
  %19 = load i32, ptr %17, align 4, !tbaa !16
  %20 = and i32 %19, 65535
  store i32 %20, ptr %17, align 4, !tbaa !16
  %21 = tail call i32 (ptr, ...) @set_ord(ptr noundef nonnull %17) #43
  %22 = shl i32 %21, 16
  %23 = load i32, ptr %17, align 4, !tbaa !16
  %24 = or i32 %23, %22
  store i32 %24, ptr %17, align 4, !tbaa !16
  %25 = getelementptr inbounds ptr, ptr %18, i64 1
  store ptr %17, ptr %18, align 8, !tbaa !13
  %26 = load i32, ptr %0, align 8, !tbaa !34
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i32, ptr %17, i64 %27
  %29 = icmp ult ptr %28, %14
  br i1 %29, label %16, label %30

30:                                               ; preds = %16
  %.lcssa = phi ptr [ %25, %16 ]
  %31 = load i32, ptr %3, align 4, !tbaa !31
  br label %32

32:                                               ; preds = %30, %2
  %33 = phi i32 [ %4, %2 ], [ %31, %30 ]
  %34 = phi ptr [ %8, %2 ], [ %.lcssa, %30 ]
  store ptr null, ptr %34, align 8, !tbaa !13
  %35 = sext i32 %33 to i64
  tail call void @qsort(ptr noundef %8, i64 noundef %35, i64 noundef 8, ptr noundef %1) #43
  ret ptr %8
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @rm_equal(ptr noundef %0, ptr nocapture noundef readonly %1) #0 {
  %3 = load ptr, ptr %0, align 8, !tbaa !13
  %4 = icmp eq ptr %3, null
  br i1 %4, label %29, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds ptr, ptr %0, i64 1
  %7 = load ptr, ptr %6, align 8, !tbaa !13
  %8 = icmp eq ptr %7, null
  br i1 %8, label %25, label %9

9:                                                ; preds = %18, %5
  %10 = phi ptr [ %20, %18 ], [ %6, %5 ]
  %11 = phi ptr [ %19, %18 ], [ %0, %5 ]
  %12 = phi ptr [ %10, %18 ], [ %0, %5 ]
  %13 = tail call i32 (ptr, ptr, ...) %1(ptr noundef nonnull %10, ptr noundef nonnull %12) #43
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %18, label %15

15:                                               ; preds = %9
  %16 = load ptr, ptr %12, align 8, !tbaa !13
  %17 = getelementptr inbounds ptr, ptr %11, i64 1
  store ptr %16, ptr %11, align 8, !tbaa !13
  br label %18

18:                                               ; preds = %15, %9
  %19 = phi ptr [ %17, %15 ], [ %11, %9 ]
  %20 = getelementptr inbounds ptr, ptr %10, i64 1
  %21 = load ptr, ptr %20, align 8, !tbaa !13
  %22 = icmp eq ptr %21, null
  br i1 %22, label %23, label %9

23:                                               ; preds = %18
  %.lcssa1 = phi ptr [ %19, %18 ]
  %.lcssa = phi ptr [ %10, %18 ]
  %24 = load ptr, ptr %.lcssa, align 8, !tbaa !13
  br label %25

25:                                               ; preds = %23, %5
  %26 = phi ptr [ %3, %5 ], [ %24, %23 ]
  %27 = phi ptr [ %0, %5 ], [ %.lcssa1, %23 ]
  %28 = getelementptr inbounds ptr, ptr %27, i64 1
  store ptr %26, ptr %27, align 8, !tbaa !13
  store ptr null, ptr %28, align 8, !tbaa !13
  br label %29

29:                                               ; preds = %25, %2
  %30 = phi ptr [ %28, %25 ], [ %0, %2 ]
  %31 = ptrtoint ptr %30 to i64
  %32 = ptrtoint ptr %0 to i64
  %33 = sub i64 %31, %32
  %34 = lshr exact i64 %33, 3
  %35 = trunc i64 %34 to i32
  ret i32 %35
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @rm_contain(ptr noundef %0) #3 {
  %2 = load ptr, ptr %0, align 8, !tbaa !13
  %3 = icmp eq ptr %2, null
  br i1 %3, label %46, label %4

4:                                                ; preds = %42, %1
  %5 = phi ptr [ %44, %42 ], [ %2, %1 ]
  %6 = phi ptr [ %10, %42 ], [ %0, %1 ]
  %7 = phi i32 [ %12, %42 ], [ -1, %1 ]
  %8 = phi ptr [ %43, %42 ], [ %0, %1 ]
  %9 = phi ptr [ %14, %42 ], [ undef, %1 ]
  %10 = getelementptr inbounds ptr, ptr %6, i64 1
  %11 = load i32, ptr %5, align 4, !tbaa !16
  %12 = lshr i32 %11, 16
  %13 = icmp eq i32 %12, %7
  %14 = select i1 %13, ptr %9, ptr %8
  %15 = and i32 %11, 1023
  %16 = tail call i32 @llvm.smin.i32(i32 %15, i32 1)
  %17 = add nsw i32 %16, -1
  br label %18

18:                                               ; preds = %37, %4
  %19 = phi ptr [ %0, %4 ], [ %22, %37 ]
  %20 = icmp eq ptr %19, %14
  br i1 %20, label %40, label %21

21:                                               ; preds = %18
  %22 = getelementptr inbounds ptr, ptr %19, i64 1
  %23 = load ptr, ptr %19, align 8, !tbaa !13
  br label %24

24:                                               ; preds = %34, %21
  %25 = phi i32 [ %15, %21 ], [ %35, %34 ]
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds i32, ptr %5, i64 %26
  %28 = load i32, ptr %27, align 4, !tbaa !16
  %29 = getelementptr inbounds i32, ptr %23, i64 %26
  %30 = load i32, ptr %29, align 4, !tbaa !16
  %31 = xor i32 %30, -1
  %32 = and i32 %28, %31
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %37

34:                                               ; preds = %24
  %35 = add nsw i32 %25, -1
  %36 = icmp sgt i32 %25, 1
  br i1 %36, label %24, label %37

37:                                               ; preds = %34, %24
  %38 = phi i32 [ %25, %24 ], [ %17, %34 ]
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %42, label %18

40:                                               ; preds = %18
  %41 = getelementptr inbounds ptr, ptr %8, i64 1
  store ptr %5, ptr %8, align 8, !tbaa !13
  br label %42

42:                                               ; preds = %40, %37
  %43 = phi ptr [ %41, %40 ], [ %8, %37 ]
  %44 = load ptr, ptr %10, align 8, !tbaa !13
  %45 = icmp eq ptr %44, null
  br i1 %45, label %46, label %4

46:                                               ; preds = %42, %1
  %47 = phi ptr [ %0, %1 ], [ %43, %42 ]
  store ptr null, ptr %47, align 8, !tbaa !13
  %48 = ptrtoint ptr %47 to i64
  %49 = ptrtoint ptr %0 to i64
  %50 = sub i64 %48, %49
  %51 = lshr exact i64 %50, 3
  %52 = trunc i64 %51 to i32
  ret i32 %52
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @sf_unlist(ptr nocapture noundef %0, i32 noundef %1, i32 noundef %2) #0 {
  %4 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef %1, i32 noundef %2) #43
  %5 = getelementptr inbounds %struct.set_family, ptr %4, i64 0, i32 3
  store i32 %1, ptr %5, align 4, !tbaa !31
  %6 = load ptr, ptr %0, align 8, !tbaa !13
  %7 = icmp eq ptr %6, null
  br i1 %7, label %32, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.set_family, ptr %4, i64 0, i32 5
  %10 = load ptr, ptr %9, align 8, !tbaa !33
  br label %11

11:                                               ; preds = %25, %8
  %12 = phi ptr [ %30, %25 ], [ %6, %8 ]
  %13 = phi ptr [ %26, %25 ], [ %0, %8 ]
  %14 = phi ptr [ %29, %25 ], [ %10, %8 ]
  %15 = load i32, ptr %12, align 4, !tbaa !16
  %16 = and i32 %15, 1023
  %17 = zext i32 %16 to i64
  br label %18

18:                                               ; preds = %18, %11
  %19 = phi i64 [ %23, %18 ], [ %17, %11 ]
  %20 = getelementptr inbounds i32, ptr %12, i64 %19
  %21 = load i32, ptr %20, align 4, !tbaa !16
  %22 = getelementptr inbounds i32, ptr %14, i64 %19
  store i32 %21, ptr %22, align 4, !tbaa !16
  %23 = add nsw i64 %19, -1
  %24 = icmp eq i64 %19, 0
  br i1 %24, label %25, label %18

25:                                               ; preds = %18
  %26 = getelementptr inbounds ptr, ptr %13, i64 1
  %27 = load i32, ptr %4, align 8, !tbaa !34
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds i32, ptr %14, i64 %28
  %30 = load ptr, ptr %26, align 8, !tbaa !13
  %31 = icmp eq ptr %30, null
  br i1 %31, label %32, label %11

32:                                               ; preds = %25, %3
  tail call void @free(ptr noundef nonnull %0) #43
  ret ptr %4
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @sf_rev_contain(ptr noundef %0) #0 {
  %2 = tail call ptr @sf_sort(ptr noundef %0, ptr noundef nonnull @ascend) #44
  %3 = tail call i32 @rm_equal(ptr noundef %2, ptr noundef nonnull @ascend) #44
  %4 = tail call i32 @rm_rev_contain(ptr noundef %2) #44
  %5 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 1
  %6 = load i32, ptr %5, align 4, !tbaa !44
  %7 = tail call ptr @sf_unlist(ptr noundef %2, i32 noundef %4, i32 noundef %6) #44
  tail call void (ptr, ...) @sf_free(ptr noundef %0) #43
  ret ptr %7
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @rm_rev_contain(ptr noundef %0) #3 {
  %2 = load ptr, ptr %0, align 8, !tbaa !13
  %3 = icmp eq ptr %2, null
  br i1 %3, label %47, label %4

4:                                                ; preds = %43, %1
  %5 = phi ptr [ %45, %43 ], [ %2, %1 ]
  %6 = phi ptr [ %10, %43 ], [ %0, %1 ]
  %7 = phi i32 [ %12, %43 ], [ -1, %1 ]
  %8 = phi ptr [ %44, %43 ], [ %0, %1 ]
  %9 = phi ptr [ %14, %43 ], [ undef, %1 ]
  %10 = getelementptr inbounds ptr, ptr %6, i64 1
  %11 = load i32, ptr %5, align 4, !tbaa !16
  %12 = lshr i32 %11, 16
  %13 = icmp eq i32 %12, %7
  %14 = select i1 %13, ptr %9, ptr %8
  br label %15

15:                                               ; preds = %38, %4
  %16 = phi ptr [ %0, %4 ], [ %19, %38 ]
  %17 = icmp eq ptr %16, %14
  br i1 %17, label %41, label %18

18:                                               ; preds = %15
  %19 = getelementptr inbounds ptr, ptr %16, i64 1
  %20 = load ptr, ptr %16, align 8, !tbaa !13
  %21 = load i32, ptr %20, align 4, !tbaa !16
  %22 = and i32 %21, 1023
  %23 = tail call i32 @llvm.smin.i32(i32 %22, i32 1)
  %24 = add nsw i32 %23, -1
  br label %25

25:                                               ; preds = %35, %18
  %26 = phi i32 [ %22, %18 ], [ %36, %35 ]
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds i32, ptr %20, i64 %27
  %29 = load i32, ptr %28, align 4, !tbaa !16
  %30 = getelementptr inbounds i32, ptr %5, i64 %27
  %31 = load i32, ptr %30, align 4, !tbaa !16
  %32 = xor i32 %31, -1
  %33 = and i32 %29, %32
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %38

35:                                               ; preds = %25
  %36 = add nsw i32 %26, -1
  %37 = icmp sgt i32 %26, 1
  br i1 %37, label %25, label %38

38:                                               ; preds = %35, %25
  %39 = phi i32 [ %26, %25 ], [ %24, %35 ]
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %43, label %15

41:                                               ; preds = %15
  %42 = getelementptr inbounds ptr, ptr %8, i64 1
  store ptr %5, ptr %8, align 8, !tbaa !13
  br label %43

43:                                               ; preds = %41, %38
  %44 = phi ptr [ %42, %41 ], [ %8, %38 ]
  %45 = load ptr, ptr %10, align 8, !tbaa !13
  %46 = icmp eq ptr %45, null
  br i1 %46, label %47, label %4

47:                                               ; preds = %43, %1
  %48 = phi ptr [ %0, %1 ], [ %44, %43 ]
  store ptr null, ptr %48, align 8, !tbaa !13
  %49 = ptrtoint ptr %48 to i64
  %50 = ptrtoint ptr %0 to i64
  %51 = sub i64 %49, %50
  %52 = lshr exact i64 %51, 3
  %53 = trunc i64 %52 to i32
  ret i32 %53
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @sf_dupl(ptr noundef %0) #0 {
  %2 = tail call ptr @sf_sort(ptr noundef %0, ptr noundef nonnull @descend) #44
  %3 = tail call i32 @rm_equal(ptr noundef %2, ptr noundef nonnull @descend) #44
  %4 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 1
  %5 = load i32, ptr %4, align 4, !tbaa !44
  %6 = tail call ptr @sf_unlist(ptr noundef %2, i32 noundef %3, i32 noundef %5) #44
  tail call void (ptr, ...) @sf_free(ptr noundef %0) #43
  ret ptr %6
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @sf_union(ptr noundef %0, ptr noundef %1) #0 {
  %3 = tail call ptr @sf_list(ptr noundef %0) #44
  %4 = tail call ptr @sf_list(ptr noundef %1) #44
  %5 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %6 = load i32, ptr %5, align 4, !tbaa !31
  %7 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 3
  %8 = load i32, ptr %7, align 4, !tbaa !31
  %9 = tail call i32 @llvm.smax.i32(i32 %6, i32 %8)
  %10 = add nsw i32 %9, 1
  %11 = sext i32 %10 to i64
  %12 = shl nsw i64 %11, 3
  %13 = tail call noalias ptr @malloc(i64 noundef %12) #42
  %14 = tail call i32 @rm2_equal(ptr noundef %3, ptr noundef %4, ptr noundef %13, ptr noundef nonnull @descend) #44
  %15 = tail call i32 @rm2_contain(ptr noundef %3, ptr noundef %4) #44
  %16 = tail call i32 @rm2_contain(ptr noundef %4, ptr noundef %3) #44
  %17 = add i32 %15, %14
  %18 = add i32 %17, %16
  %19 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 1
  %20 = load i32, ptr %19, align 4, !tbaa !44
  %21 = tail call ptr @sf_merge(ptr noundef %3, ptr noundef %4, ptr noundef %13, i32 noundef %18, i32 noundef %20) #44
  tail call void (ptr, ...) @sf_free(ptr noundef %0) #43
  tail call void (ptr, ...) @sf_free(ptr noundef %1) #43
  ret ptr %21
}

; Function Attrs: nofree nounwind optsize memory(write, argmem: readwrite, inaccessiblemem: readwrite) uwtable
define internal noalias ptr @sf_list(ptr nocapture noundef readonly %0) #13 {
  %2 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %3 = load i32, ptr %2, align 4, !tbaa !31
  %4 = add nsw i32 %3, 1
  %5 = sext i32 %4 to i64
  %6 = shl nsw i64 %5, 3
  %7 = tail call noalias ptr @malloc(i64 noundef %6) #42
  %8 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %9 = load ptr, ptr %8, align 8, !tbaa !33
  %10 = load i32, ptr %0, align 8, !tbaa !34
  %11 = mul nsw i32 %10, %3
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds i32, ptr %9, i64 %12
  %14 = icmp sgt i32 %11, 0
  br i1 %14, label %15, label %23

15:                                               ; preds = %1
  %16 = sext i32 %10 to i64
  br label %17

17:                                               ; preds = %17, %15
  %18 = phi ptr [ %9, %15 ], [ %21, %17 ]
  %19 = phi ptr [ %7, %15 ], [ %20, %17 ]
  %20 = getelementptr inbounds ptr, ptr %19, i64 1
  store ptr %18, ptr %19, align 8, !tbaa !13
  %21 = getelementptr inbounds i32, ptr %18, i64 %16
  %22 = icmp ult ptr %21, %13
  br i1 %22, label %17, label %23

23:                                               ; preds = %17, %1
  %24 = phi ptr [ %7, %1 ], [ %20, %17 ]
  store ptr null, ptr %24, align 8, !tbaa !13
  ret ptr %7
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @rm2_equal(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr nocapture noundef readonly %3) #0 {
  %5 = load ptr, ptr %0, align 8, !tbaa !13
  %6 = icmp eq ptr %5, null
  br i1 %6, label %48, label %7

7:                                                ; preds = %4
  %8 = load ptr, ptr %1, align 8, !tbaa !13
  %9 = icmp eq ptr %8, null
  br i1 %9, label %41, label %13

10:                                               ; preds = %33
  %11 = load ptr, ptr %34, align 8, !tbaa !13
  %12 = icmp eq ptr %11, null
  br i1 %12, label %41, label %13

13:                                               ; preds = %10, %7
  %14 = phi ptr [ %34, %10 ], [ %1, %7 ]
  %15 = phi ptr [ %35, %10 ], [ %0, %7 ]
  %16 = phi ptr [ %36, %10 ], [ %0, %7 ]
  %17 = phi ptr [ %37, %10 ], [ %1, %7 ]
  %18 = phi ptr [ %38, %10 ], [ %2, %7 ]
  %19 = tail call i32 (ptr, ptr, ...) %3(ptr noundef nonnull %15, ptr noundef nonnull %14) #43
  switch i32 %19, label %33 [
    i32 -1, label %20
    i32 0, label %24
    i32 1, label %29
  ]

20:                                               ; preds = %13
  %21 = getelementptr inbounds ptr, ptr %15, i64 1
  %22 = load ptr, ptr %15, align 8, !tbaa !13
  %23 = getelementptr inbounds ptr, ptr %16, i64 1
  store ptr %22, ptr %16, align 8, !tbaa !13
  br label %33

24:                                               ; preds = %13
  %25 = getelementptr inbounds ptr, ptr %15, i64 1
  %26 = load ptr, ptr %15, align 8, !tbaa !13
  %27 = getelementptr inbounds ptr, ptr %18, i64 1
  store ptr %26, ptr %18, align 8, !tbaa !13
  %28 = getelementptr inbounds ptr, ptr %14, i64 1
  br label %33

29:                                               ; preds = %13
  %30 = getelementptr inbounds ptr, ptr %14, i64 1
  %31 = load ptr, ptr %14, align 8, !tbaa !13
  %32 = getelementptr inbounds ptr, ptr %17, i64 1
  store ptr %31, ptr %17, align 8, !tbaa !13
  br label %33

33:                                               ; preds = %29, %24, %20, %13
  %34 = phi ptr [ %14, %13 ], [ %30, %29 ], [ %28, %24 ], [ %14, %20 ]
  %35 = phi ptr [ %15, %13 ], [ %15, %29 ], [ %25, %24 ], [ %21, %20 ]
  %36 = phi ptr [ %16, %13 ], [ %16, %29 ], [ %16, %24 ], [ %23, %20 ]
  %37 = phi ptr [ %17, %13 ], [ %32, %29 ], [ %17, %24 ], [ %17, %20 ]
  %38 = phi ptr [ %18, %13 ], [ %18, %29 ], [ %27, %24 ], [ %18, %20 ]
  %39 = load ptr, ptr %35, align 8, !tbaa !13
  %40 = icmp eq ptr %39, null
  br i1 %40, label %48, label %10

41:                                               ; preds = %10, %7
  %42 = phi ptr [ %5, %7 ], [ %39, %10 ]
  %43 = phi ptr [ %2, %7 ], [ %38, %10 ]
  %44 = phi ptr [ %1, %7 ], [ %37, %10 ]
  %45 = phi ptr [ %0, %7 ], [ %36, %10 ]
  %46 = phi ptr [ %0, %7 ], [ %35, %10 ]
  %47 = phi ptr [ %1, %7 ], [ %34, %10 ]
  br label %55

48:                                               ; preds = %55, %33, %4
  %49 = phi ptr [ %2, %4 ], [ %43, %55 ], [ %38, %33 ]
  %50 = phi ptr [ %1, %4 ], [ %44, %55 ], [ %37, %33 ]
  %51 = phi ptr [ %1, %4 ], [ %47, %55 ], [ %34, %33 ]
  %52 = phi ptr [ %0, %4 ], [ %60, %55 ], [ %36, %33 ]
  %53 = load ptr, ptr %51, align 8, !tbaa !13
  %54 = icmp eq ptr %53, null
  br i1 %54, label %71, label %63

55:                                               ; preds = %55, %41
  %56 = phi ptr [ %61, %55 ], [ %42, %41 ]
  %57 = phi ptr [ %60, %55 ], [ %45, %41 ]
  %58 = phi ptr [ %59, %55 ], [ %46, %41 ]
  %59 = getelementptr inbounds ptr, ptr %58, i64 1
  %60 = getelementptr inbounds ptr, ptr %57, i64 1
  store ptr %56, ptr %57, align 8, !tbaa !13
  %61 = load ptr, ptr %59, align 8, !tbaa !13
  %62 = icmp eq ptr %61, null
  br i1 %62, label %48, label %55

63:                                               ; preds = %63, %48
  %64 = phi ptr [ %69, %63 ], [ %53, %48 ]
  %65 = phi ptr [ %68, %63 ], [ %50, %48 ]
  %66 = phi ptr [ %67, %63 ], [ %51, %48 ]
  %67 = getelementptr inbounds ptr, ptr %66, i64 1
  %68 = getelementptr inbounds ptr, ptr %65, i64 1
  store ptr %64, ptr %65, align 8, !tbaa !13
  %69 = load ptr, ptr %67, align 8, !tbaa !13
  %70 = icmp eq ptr %69, null
  br i1 %70, label %71, label %63

71:                                               ; preds = %63, %48
  %72 = phi ptr [ %50, %48 ], [ %68, %63 ]
  store ptr null, ptr %49, align 8, !tbaa !13
  store ptr null, ptr %72, align 8, !tbaa !13
  store ptr null, ptr %52, align 8, !tbaa !13
  %73 = ptrtoint ptr %49 to i64
  %74 = ptrtoint ptr %2 to i64
  %75 = sub i64 %73, %74
  %76 = lshr exact i64 %75, 3
  %77 = trunc i64 %76 to i32
  ret i32 %77
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @rm2_contain(ptr noundef %0, ptr nocapture noundef readonly %1) #3 {
  %3 = load ptr, ptr %0, align 8, !tbaa !13
  %4 = icmp eq ptr %3, null
  br i1 %4, label %47, label %5

5:                                                ; preds = %43, %2
  %6 = phi ptr [ %45, %43 ], [ %3, %2 ]
  %7 = phi ptr [ %9, %43 ], [ %0, %2 ]
  %8 = phi ptr [ %44, %43 ], [ %0, %2 ]
  %9 = getelementptr inbounds ptr, ptr %7, i64 1
  br label %10

10:                                               ; preds = %38, %5
  %11 = phi ptr [ %12, %38 ], [ %1, %5 ]
  %12 = getelementptr inbounds ptr, ptr %11, i64 1
  %13 = load ptr, ptr %11, align 8, !tbaa !13
  %14 = icmp eq ptr %13, null
  br i1 %14, label %41, label %15

15:                                               ; preds = %10
  %16 = load i32, ptr %13, align 4, !tbaa !16
  %17 = lshr i32 %16, 16
  %18 = load i32, ptr %6, align 4, !tbaa !16
  %19 = lshr i32 %18, 16
  %20 = icmp ugt i32 %17, %19
  br i1 %20, label %21, label %41

21:                                               ; preds = %15
  %22 = and i32 %18, 1023
  %23 = tail call i32 @llvm.smin.i32(i32 %22, i32 1)
  %24 = add nsw i32 %23, -1
  br label %25

25:                                               ; preds = %35, %21
  %26 = phi i32 [ %22, %21 ], [ %36, %35 ]
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds i32, ptr %6, i64 %27
  %29 = load i32, ptr %28, align 4, !tbaa !16
  %30 = getelementptr inbounds i32, ptr %13, i64 %27
  %31 = load i32, ptr %30, align 4, !tbaa !16
  %32 = xor i32 %31, -1
  %33 = and i32 %29, %32
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %38

35:                                               ; preds = %25
  %36 = add nsw i32 %26, -1
  %37 = icmp sgt i32 %26, 1
  br i1 %37, label %25, label %38

38:                                               ; preds = %35, %25
  %39 = phi i32 [ %26, %25 ], [ %24, %35 ]
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %43, label %10

41:                                               ; preds = %15, %10
  %42 = getelementptr inbounds ptr, ptr %8, i64 1
  store ptr %6, ptr %8, align 8, !tbaa !13
  br label %43

43:                                               ; preds = %41, %38
  %44 = phi ptr [ %42, %41 ], [ %8, %38 ]
  %45 = load ptr, ptr %9, align 8, !tbaa !13
  %46 = icmp eq ptr %45, null
  br i1 %46, label %47, label %5

47:                                               ; preds = %43, %2
  %48 = phi ptr [ %0, %2 ], [ %44, %43 ]
  store ptr null, ptr %48, align 8, !tbaa !13
  %49 = ptrtoint ptr %48 to i64
  %50 = ptrtoint ptr %0 to i64
  %51 = sub i64 %49, %50
  %52 = lshr exact i64 %51, 3
  %53 = trunc i64 %52 to i32
  ret i32 %53
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @sf_merge(ptr noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %3, i32 noundef %4) #0 {
  %6 = alloca [3 x ptr], align 16
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %6) #45
  %7 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef %3, i32 noundef %4) #43
  %8 = getelementptr inbounds %struct.set_family, ptr %7, i64 0, i32 3
  store i32 %3, ptr %8, align 4, !tbaa !31
  %9 = getelementptr inbounds %struct.set_family, ptr %7, i64 0, i32 5
  %10 = load ptr, ptr %9, align 8, !tbaa !33
  store ptr %0, ptr %6, align 16, !tbaa !13
  %11 = getelementptr inbounds [3 x ptr], ptr %6, i64 0, i64 1
  store ptr %1, ptr %11, align 8, !tbaa !13
  %12 = getelementptr inbounds [3 x ptr], ptr %6, i64 0, i64 2
  store ptr %2, ptr %12, align 16, !tbaa !13
  br label %15

13:                                               ; preds = %31
  %14 = add nuw nsw i64 %18, 1
  br i1 %16, label %15, label %35

15:                                               ; preds = %13, %5
  %16 = phi i1 [ true, %5 ], [ false, %13 ]
  %17 = phi i64 [ 0, %5 ], [ 1, %13 ]
  %18 = phi i64 [ 1, %5 ], [ %14, %13 ]
  %19 = getelementptr inbounds [3 x ptr], ptr %6, i64 0, i64 %17
  %20 = load ptr, ptr %19, align 8, !tbaa !13
  br label %21

21:                                               ; preds = %31, %15
  %22 = phi ptr [ %20, %15 ], [ %32, %31 ]
  %23 = phi i64 [ %18, %15 ], [ %33, %31 ]
  %24 = load ptr, ptr %22, align 8, !tbaa !13
  %25 = getelementptr inbounds [3 x ptr], ptr %6, i64 0, i64 %23
  %26 = load ptr, ptr %25, align 8, !tbaa !13
  %27 = load ptr, ptr %26, align 8, !tbaa !13
  %28 = tail call i32 (ptr, ptr, ...) @desc1(ptr noundef %24, ptr noundef %27) #43
  %29 = icmp sgt i32 %28, 0
  br i1 %29, label %30, label %31

30:                                               ; preds = %21
  store ptr %22, ptr %25, align 8, !tbaa !13
  store ptr %26, ptr %19, align 8, !tbaa !13
  br label %31

31:                                               ; preds = %30, %21
  %32 = phi ptr [ %22, %21 ], [ %26, %30 ]
  %33 = add nuw nsw i64 %23, 1
  %34 = icmp eq i64 %33, 3
  br i1 %34, label %13, label %21

35:                                               ; preds = %13
  %36 = load ptr, ptr %6, align 16, !tbaa !13
  %37 = load ptr, ptr %36, align 8, !tbaa !13
  %38 = icmp eq ptr %37, null
  br i1 %38, label %80, label %39

39:                                               ; preds = %35
  %40 = load ptr, ptr %12, align 16, !tbaa !13
  %41 = load ptr, ptr %11, align 8, !tbaa !13
  br label %42

42:                                               ; preds = %74, %39
  %43 = phi ptr [ %78, %74 ], [ %37, %39 ]
  %44 = phi ptr [ %77, %74 ], [ %40, %39 ]
  %45 = phi ptr [ %76, %74 ], [ %41, %39 ]
  %46 = phi ptr [ %75, %74 ], [ %36, %39 ]
  %47 = phi ptr [ %62, %74 ], [ %10, %39 ]
  %48 = load i32, ptr %43, align 4, !tbaa !16
  %49 = and i32 %48, 1023
  %50 = zext i32 %49 to i64
  br label %51

51:                                               ; preds = %51, %42
  %52 = phi i64 [ %56, %51 ], [ %50, %42 ]
  %53 = getelementptr inbounds i32, ptr %43, i64 %52
  %54 = load i32, ptr %53, align 4, !tbaa !16
  %55 = getelementptr inbounds i32, ptr %47, i64 %52
  store i32 %54, ptr %55, align 4, !tbaa !16
  %56 = add nsw i64 %52, -1
  %57 = icmp eq i64 %52, 0
  br i1 %57, label %58, label %51

58:                                               ; preds = %51
  %59 = getelementptr inbounds ptr, ptr %46, i64 1
  %60 = load i32, ptr %7, align 8, !tbaa !34
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i32, ptr %47, i64 %61
  %63 = load ptr, ptr %59, align 8, !tbaa !13
  %64 = load ptr, ptr %44, align 8, !tbaa !13
  %65 = tail call i32 (ptr, ptr, ...) @desc1(ptr noundef %63, ptr noundef %64) #43
  %66 = icmp sgt i32 %65, 0
  br i1 %66, label %74, label %67

67:                                               ; preds = %58
  %68 = load ptr, ptr %59, align 8, !tbaa !13
  %69 = load ptr, ptr %45, align 8, !tbaa !13
  %70 = tail call i32 (ptr, ptr, ...) @desc1(ptr noundef %68, ptr noundef %69) #43
  %71 = icmp sgt i32 %70, 0
  %72 = select i1 %71, ptr %45, ptr %59
  %73 = select i1 %71, ptr %59, ptr %45
  br label %74

74:                                               ; preds = %67, %58
  %75 = phi ptr [ %45, %58 ], [ %72, %67 ]
  %76 = phi ptr [ %44, %58 ], [ %73, %67 ]
  %77 = phi ptr [ %59, %58 ], [ %44, %67 ]
  %78 = load ptr, ptr %75, align 8, !tbaa !13
  %79 = icmp eq ptr %78, null
  br i1 %79, label %80, label %42

80:                                               ; preds = %74, %35
  %81 = icmp eq ptr %0, null
  br i1 %81, label %83, label %82

82:                                               ; preds = %80
  tail call void @free(ptr noundef nonnull %0) #43
  br label %83

83:                                               ; preds = %82, %80
  %84 = icmp eq ptr %1, null
  br i1 %84, label %86, label %85

85:                                               ; preds = %83
  tail call void @free(ptr noundef nonnull %1) #43
  br label %86

86:                                               ; preds = %85, %83
  %87 = icmp eq ptr %2, null
  br i1 %87, label %89, label %88

88:                                               ; preds = %86
  tail call void @free(ptr noundef nonnull %2) #43
  br label %89

89:                                               ; preds = %88, %86
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %6) #45
  ret ptr %7
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @dist_merge(ptr noundef %0, ptr noundef %1) #0 {
  %3 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 11), align 8, !tbaa !7
  %4 = load ptr, ptr %3, align 8, !tbaa !13
  %5 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %4, ptr noundef %1) #43
  %6 = tail call ptr @sf_sort(ptr noundef %0, ptr noundef nonnull @d1_order) #44
  %7 = tail call i32 @d1_rm_equal(ptr noundef %6, ptr noundef nonnull @d1_order) #44
  %8 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 1
  %9 = load i32, ptr %8, align 4, !tbaa !44
  %10 = tail call ptr @sf_unlist(ptr noundef %6, i32 noundef %7, i32 noundef %9) #44
  tail call void (ptr, ...) @sf_free(ptr noundef %0) #43
  ret ptr %10
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @d1_rm_equal(ptr noundef %0, ptr nocapture noundef readonly %1) #0 {
  %3 = load ptr, ptr %0, align 8, !tbaa !13
  %4 = icmp eq ptr %3, null
  br i1 %4, label %44, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds ptr, ptr %0, i64 1
  %7 = load ptr, ptr %6, align 8, !tbaa !13
  %8 = icmp eq ptr %7, null
  br i1 %8, label %38, label %9

9:                                                ; preds = %27, %5
  %10 = phi i64 [ %30, %27 ], [ 1, %5 ]
  %11 = phi ptr [ %31, %27 ], [ %6, %5 ]
  %12 = phi i32 [ %29, %27 ], [ 0, %5 ]
  %13 = phi i32 [ %28, %27 ], [ 0, %5 ]
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds ptr, ptr %0, i64 %14
  %16 = tail call i32 (ptr, ptr, ...) %1(ptr noundef nonnull %15, ptr noundef nonnull %11) #43
  %17 = icmp eq i32 %16, 0
  %18 = load ptr, ptr %15, align 8, !tbaa !13
  br i1 %17, label %19, label %22

19:                                               ; preds = %9
  %20 = load ptr, ptr %11, align 8, !tbaa !13
  %21 = tail call ptr (ptr, ptr, ptr, ...) @set_or(ptr noundef %18, ptr noundef %18, ptr noundef %20) #43
  br label %27

22:                                               ; preds = %9
  %23 = add nsw i32 %12, 1
  %24 = sext i32 %12 to i64
  %25 = getelementptr inbounds ptr, ptr %0, i64 %24
  store ptr %18, ptr %25, align 8, !tbaa !13
  %26 = trunc i64 %10 to i32
  br label %27

27:                                               ; preds = %22, %19
  %28 = phi i32 [ %13, %19 ], [ %26, %22 ]
  %29 = phi i32 [ %12, %19 ], [ %23, %22 ]
  %30 = add nuw i64 %10, 1
  %31 = getelementptr inbounds ptr, ptr %0, i64 %30
  %32 = load ptr, ptr %31, align 8, !tbaa !13
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %9

34:                                               ; preds = %27
  %.lcssa1 = phi i32 [ %28, %27 ]
  %.lcssa = phi i32 [ %29, %27 ]
  %35 = sext i32 %.lcssa1 to i64
  %36 = getelementptr inbounds ptr, ptr %0, i64 %35
  %37 = load ptr, ptr %36, align 8, !tbaa !13
  br label %38

38:                                               ; preds = %34, %5
  %39 = phi ptr [ %37, %34 ], [ %3, %5 ]
  %40 = phi i32 [ %.lcssa, %34 ], [ 0, %5 ]
  %41 = add nsw i32 %40, 1
  %42 = sext i32 %40 to i64
  %43 = getelementptr inbounds ptr, ptr %0, i64 %42
  store ptr %39, ptr %43, align 8, !tbaa !13
  br label %44

44:                                               ; preds = %38, %2
  %45 = phi i32 [ %41, %38 ], [ 0, %2 ]
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds ptr, ptr %0, i64 %46
  store ptr null, ptr %47, align 8, !tbaa !13
  ret i32 %45
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @d1merge(ptr noundef %0, i32 noundef %1) #0 {
  %3 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %4 = sext i32 %1 to i64
  %5 = getelementptr inbounds ptr, ptr %3, i64 %4
  %6 = load ptr, ptr %5, align 8, !tbaa !13
  %7 = tail call ptr @dist_merge(ptr noundef %0, ptr noundef %6) #44
  ret ptr %7
}

; Function Attrs: nounwind optsize uwtable
define internal void @cube_setup() #0 {
  %1 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %2 = icmp slt i32 %1, 0
  %3 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4
  %4 = icmp slt i32 %3, %1
  %5 = select i1 %2, i1 true, i1 %4
  br i1 %5, label %6, label %9

6:                                                ; preds = %0
  tail call void (ptr, ...) @fatal(ptr noundef nonnull @.str.9) #43
  %7 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4
  %8 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  br label %9

9:                                                ; preds = %6, %0
  %10 = phi i32 [ %1, %0 ], [ %8, %6 ]
  %11 = phi i32 [ %3, %0 ], [ %7, %6 ]
  %12 = sub nsw i32 %11, %10
  store i32 %12, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 17), align 8, !tbaa !45
  %13 = icmp sgt i32 %12, 0
  %14 = add nsw i32 %11, -1
  %15 = select i1 %13, i32 %14, i32 -1
  store i32 %15, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  store i32 0, ptr @cube, align 8, !tbaa !14
  %16 = sext i32 %11 to i64
  %17 = shl nsw i64 %16, 2
  %18 = tail call noalias ptr @malloc(i64 noundef %17) #42
  store ptr %18, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %19 = tail call noalias ptr @malloc(i64 noundef %17) #42
  store ptr %19, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  %20 = tail call noalias ptr @malloc(i64 noundef %17) #42
  store ptr %20, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 6), align 8, !tbaa !19
  %21 = tail call noalias ptr @malloc(i64 noundef %17) #42
  store ptr %21, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 7), align 8, !tbaa !18
  %22 = icmp sgt i32 %11, 0
  br i1 %22, label %23, label %59

23:                                               ; preds = %9
  %24 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8
  br label %25

25:                                               ; preds = %37, %23
  %26 = phi i32 [ %11, %23 ], [ %38, %37 ]
  %27 = phi i32 [ 0, %23 ], [ %48, %37 ]
  %28 = phi i32 [ %10, %23 ], [ %40, %37 ]
  %29 = phi i64 [ 0, %23 ], [ %54, %37 ]
  %30 = sext i32 %28 to i64
  %31 = icmp slt i64 %29, %30
  br i1 %31, label %32, label %37

32:                                               ; preds = %25
  %33 = getelementptr inbounds i32, ptr %24, i64 %29
  store i32 2, ptr %33, align 4, !tbaa !16
  %34 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %35 = load i32, ptr @cube, align 8, !tbaa !14
  %36 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  br label %37

37:                                               ; preds = %32, %25
  %38 = phi i32 [ %36, %32 ], [ %26, %25 ]
  %39 = phi i32 [ %35, %32 ], [ %27, %25 ]
  %40 = phi i32 [ %34, %32 ], [ %28, %25 ]
  %41 = getelementptr inbounds i32, ptr %18, i64 %29
  store i32 %39, ptr %41, align 4, !tbaa !16
  %42 = ashr i32 %39, 5
  %43 = add nsw i32 %42, 1
  %44 = getelementptr inbounds i32, ptr %20, i64 %29
  store i32 %43, ptr %44, align 4, !tbaa !16
  %45 = getelementptr inbounds i32, ptr %24, i64 %29
  %46 = load i32, ptr %45, align 4, !tbaa !16
  %47 = tail call i32 @llvm.abs.i32(i32 %46, i1 true)
  %48 = add nsw i32 %47, %39
  store i32 %48, ptr @cube, align 8, !tbaa !14
  %49 = add nsw i32 %48, -1
  %50 = getelementptr inbounds i32, ptr %19, i64 %29
  store i32 %49, ptr %50, align 4, !tbaa !16
  %51 = ashr i32 %49, 5
  %52 = add nsw i32 %51, 1
  %53 = getelementptr inbounds i32, ptr %21, i64 %29
  store i32 %52, ptr %53, align 4, !tbaa !16
  %54 = add nuw nsw i64 %29, 1
  %55 = sext i32 %38 to i64
  %56 = icmp slt i64 %54, %55
  br i1 %56, label %25, label %57

57:                                               ; preds = %37
  %.lcssa1 = phi i32 [ %48, %37 ]
  %.lcssa = phi i64 [ %55, %37 ]
  %58 = shl nsw i64 %.lcssa, 2
  br label %59

59:                                               ; preds = %57, %9
  %60 = phi i64 [ %58, %57 ], [ %17, %9 ]
  %61 = phi i64 [ %.lcssa, %57 ], [ %16, %9 ]
  %62 = phi i32 [ %.lcssa1, %57 ], [ 0, %9 ]
  %63 = shl nsw i64 %61, 3
  %64 = tail call noalias ptr @malloc(i64 noundef %63) #42
  store ptr %64, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %65 = tail call noalias ptr @malloc(i64 noundef %60) #42
  store ptr %65, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 16), align 8, !tbaa !47
  %66 = icmp slt i32 %62, 33
  %67 = add nsw i32 %62, -1
  %68 = lshr i32 %67, 3
  %69 = and i32 %68, 536870908
  %70 = add nuw nsw i32 %69, 8
  %71 = select i1 %66, i32 8, i32 %70
  %72 = zext i32 %71 to i64
  %73 = tail call noalias ptr @malloc(i64 noundef %72) #42
  %74 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %73, i32 noundef %62) #43
  store ptr %74, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 8), align 8, !tbaa !48
  %75 = load i32, ptr @cube, align 8, !tbaa !14
  %76 = icmp slt i32 %75, 33
  %77 = add nsw i32 %75, -1
  %78 = lshr i32 %77, 3
  %79 = and i32 %78, 536870908
  %80 = add nuw nsw i32 %79, 8
  %81 = select i1 %76, i32 8, i32 %80
  %82 = zext i32 %81 to i64
  %83 = tail call noalias ptr @malloc(i64 noundef %82) #42
  %84 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %83, i32 noundef %75) #43
  store ptr %84, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 9), align 8, !tbaa !49
  %85 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %86 = icmp sgt i32 %85, 0
  br i1 %86, label %87, label %161

87:                                               ; preds = %153, %59
  %88 = phi i64 [ %157, %153 ], [ 0, %59 ]
  %89 = load i32, ptr @cube, align 8, !tbaa !14
  %90 = icmp slt i32 %89, 33
  %91 = add nsw i32 %89, -1
  %92 = lshr i32 %91, 3
  %93 = and i32 %92, 536870908
  %94 = add nuw nsw i32 %93, 8
  %95 = select i1 %90, i32 8, i32 %94
  %96 = zext i32 %95 to i64
  %97 = tail call noalias ptr @malloc(i64 noundef %96) #42
  %98 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %97, i32 noundef %89) #43
  %99 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %100 = getelementptr inbounds ptr, ptr %99, i64 %88
  store ptr %98, ptr %100, align 8, !tbaa !13
  %101 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %102 = getelementptr inbounds i32, ptr %101, i64 %88
  %103 = load i32, ptr %102, align 4, !tbaa !16
  %104 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  %105 = getelementptr inbounds i32, ptr %104, i64 %88
  %106 = load i32, ptr %105, align 4, !tbaa !16
  %107 = icmp sgt i32 %103, %106
  br i1 %107, label %121, label %108

108:                                              ; preds = %108, %87
  %109 = phi i32 [ %118, %108 ], [ %103, %87 ]
  %110 = and i32 %109, 31
  %111 = shl nuw i32 1, %110
  %112 = ashr i32 %109, 5
  %113 = add nsw i32 %112, 1
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds i32, ptr %98, i64 %114
  %116 = load i32, ptr %115, align 4, !tbaa !16
  %117 = or i32 %116, %111
  store i32 %117, ptr %115, align 4, !tbaa !16
  %118 = add nsw i32 %109, 1
  %119 = load i32, ptr %105, align 4, !tbaa !16
  %120 = icmp slt i32 %109, %119
  br i1 %120, label %108, label %121

121:                                              ; preds = %108, %87
  %122 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %123 = sext i32 %122 to i64
  %124 = icmp slt i64 %88, %123
  br i1 %124, label %125, label %139

125:                                              ; preds = %121
  %126 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 8), align 8, !tbaa !48
  %127 = load i32, ptr %126, align 4, !tbaa !16
  %128 = and i32 %127, 1023
  %129 = zext i32 %128 to i64
  br label %130

130:                                              ; preds = %130, %125
  %131 = phi i64 [ %137, %130 ], [ %129, %125 ]
  %132 = getelementptr inbounds i32, ptr %126, i64 %131
  %133 = load i32, ptr %132, align 4, !tbaa !16
  %134 = getelementptr inbounds i32, ptr %98, i64 %131
  %135 = load i32, ptr %134, align 4, !tbaa !16
  %136 = or i32 %135, %133
  store i32 %136, ptr %132, align 4, !tbaa !16
  %137 = add nsw i64 %131, -1
  %138 = icmp ugt i64 %131, 1
  br i1 %138, label %130, label %153

139:                                              ; preds = %121
  %140 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 9), align 8, !tbaa !49
  %141 = load i32, ptr %140, align 4, !tbaa !16
  %142 = and i32 %141, 1023
  %143 = zext i32 %142 to i64
  br label %144

144:                                              ; preds = %144, %139
  %145 = phi i64 [ %151, %144 ], [ %143, %139 ]
  %146 = getelementptr inbounds i32, ptr %140, i64 %145
  %147 = load i32, ptr %146, align 4, !tbaa !16
  %148 = getelementptr inbounds i32, ptr %98, i64 %145
  %149 = load i32, ptr %148, align 4, !tbaa !16
  %150 = or i32 %149, %147
  store i32 %150, ptr %146, align 4, !tbaa !16
  %151 = add nsw i64 %145, -1
  %152 = icmp ugt i64 %145, 1
  br i1 %152, label %144, label %153

153:                                              ; preds = %144, %130
  %154 = phi i32 [ 0, %130 ], [ 1, %144 ]
  %155 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 16), align 8, !tbaa !47
  %156 = getelementptr inbounds i32, ptr %155, i64 %88
  store i32 %154, ptr %156, align 4, !tbaa !16
  %157 = add nuw nsw i64 %88, 1
  %158 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %159 = sext i32 %158 to i64
  %160 = icmp slt i64 %157, %159
  br i1 %160, label %87, label %161

161:                                              ; preds = %153, %59
  %162 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %164, label %165

164:                                              ; preds = %161
  store i32 -1, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 15), align 4, !tbaa !50
  br label %176

165:                                              ; preds = %161
  %166 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 7), align 8, !tbaa !18
  %167 = add nsw i32 %162, -1
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds i32, ptr %166, i64 %168
  %170 = load i32, ptr %169, align 4, !tbaa !16
  store i32 %170, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 15), align 4, !tbaa !50
  %171 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 8), align 8, !tbaa !48
  %172 = sext i32 %170 to i64
  %173 = getelementptr inbounds i32, ptr %171, i64 %172
  %174 = load i32, ptr %173, align 4, !tbaa !16
  %175 = and i32 %174, 1431655765
  store i32 %175, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 14), align 8, !tbaa !51
  br label %176

176:                                              ; preds = %165, %164
  %177 = tail call noalias dereferenceable_or_null(80) ptr @malloc(i64 noundef 80) #42
  store ptr %177, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 11), align 8, !tbaa !7
  br label %178

178:                                              ; preds = %178, %176
  %179 = phi i64 [ 0, %176 ], [ %192, %178 ]
  %180 = load i32, ptr @cube, align 8, !tbaa !14
  %181 = icmp slt i32 %180, 33
  %182 = add nsw i32 %180, -1
  %183 = lshr i32 %182, 3
  %184 = and i32 %183, 536870908
  %185 = add nuw nsw i32 %184, 8
  %186 = select i1 %181, i32 8, i32 %185
  %187 = zext i32 %186 to i64
  %188 = tail call noalias ptr @malloc(i64 noundef %187) #42
  %189 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %188, i32 noundef %180) #43
  %190 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 11), align 8, !tbaa !7
  %191 = getelementptr inbounds ptr, ptr %190, i64 %179
  store ptr %189, ptr %191, align 8, !tbaa !13
  %192 = add nuw nsw i64 %179, 1
  %193 = icmp eq i64 %192, 10
  br i1 %193, label %194, label %178

194:                                              ; preds = %178
  %195 = load i32, ptr @cube, align 8, !tbaa !14
  %196 = icmp slt i32 %195, 33
  %197 = add nsw i32 %195, -1
  %198 = lshr i32 %197, 3
  %199 = and i32 %198, 536870908
  %200 = add nuw nsw i32 %199, 8
  %201 = select i1 %196, i32 8, i32 %200
  %202 = zext i32 %201 to i64
  %203 = tail call noalias ptr @malloc(i64 noundef %202) #42
  %204 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %203, i32 noundef %195) #43
  %205 = load i32, ptr @cube, align 8, !tbaa !14
  %206 = tail call ptr (ptr, i32, ...) @set_fill(ptr noundef %204, i32 noundef %205) #43
  store ptr %206, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %207 = load i32, ptr @cube, align 8, !tbaa !14
  %208 = icmp slt i32 %207, 33
  %209 = add nsw i32 %207, -1
  %210 = lshr i32 %209, 3
  %211 = and i32 %210, 536870908
  %212 = add nuw nsw i32 %211, 8
  %213 = select i1 %208, i32 8, i32 %212
  %214 = zext i32 %213 to i64
  %215 = tail call noalias ptr @malloc(i64 noundef %214) #42
  %216 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %215, i32 noundef %207) #43
  store ptr %216, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 13), align 8, !tbaa !52
  %217 = load i32, ptr @cube, align 8, !tbaa !14
  %218 = sext i32 %217 to i64
  %219 = shl nsw i64 %218, 2
  %220 = tail call noalias ptr @malloc(i64 noundef %219) #42
  store ptr %220, ptr @cdata, align 8, !tbaa !20
  %221 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %222 = sext i32 %221 to i64
  %223 = shl nsw i64 %222, 2
  %224 = tail call noalias ptr @malloc(i64 noundef %223) #42
  store ptr %224, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 1), align 8, !tbaa !53
  %225 = tail call noalias ptr @malloc(i64 noundef %223) #42
  store ptr %225, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 2), align 8, !tbaa !25
  %226 = tail call noalias ptr @malloc(i64 noundef %223) #42
  store ptr %226, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 3), align 8, !tbaa !26
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #2

; Function Attrs: nounwind optsize uwtable
define internal void @setdown_cube() #0 {
  %1 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %2 = icmp eq ptr %1, null
  br i1 %2, label %4, label %3

3:                                                ; preds = %0
  tail call void @free(ptr noundef nonnull %1) #43
  store ptr null, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  br label %4

4:                                                ; preds = %3, %0
  %5 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  %6 = icmp eq ptr %5, null
  br i1 %6, label %8, label %7

7:                                                ; preds = %4
  tail call void @free(ptr noundef nonnull %5) #43
  store ptr null, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  br label %8

8:                                                ; preds = %7, %4
  %9 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 6), align 8, !tbaa !19
  %10 = icmp eq ptr %9, null
  br i1 %10, label %12, label %11

11:                                               ; preds = %8
  tail call void @free(ptr noundef nonnull %9) #43
  store ptr null, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 6), align 8, !tbaa !19
  br label %12

12:                                               ; preds = %11, %8
  %13 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 7), align 8, !tbaa !18
  %14 = icmp eq ptr %13, null
  br i1 %14, label %16, label %15

15:                                               ; preds = %12
  tail call void @free(ptr noundef nonnull %13) #43
  store ptr null, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 7), align 8, !tbaa !18
  br label %16

16:                                               ; preds = %15, %12
  %17 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 16), align 8, !tbaa !47
  %18 = icmp eq ptr %17, null
  br i1 %18, label %20, label %19

19:                                               ; preds = %16
  tail call void @free(ptr noundef nonnull %17) #43
  store ptr null, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 16), align 8, !tbaa !47
  br label %20

20:                                               ; preds = %19, %16
  %21 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 8), align 8, !tbaa !48
  %22 = icmp eq ptr %21, null
  br i1 %22, label %24, label %23

23:                                               ; preds = %20
  tail call void @free(ptr noundef nonnull %21) #43
  store ptr null, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 8), align 8, !tbaa !48
  br label %24

24:                                               ; preds = %23, %20
  %25 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 9), align 8, !tbaa !49
  %26 = icmp eq ptr %25, null
  br i1 %26, label %28, label %27

27:                                               ; preds = %24
  tail call void @free(ptr noundef nonnull %25) #43
  store ptr null, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 9), align 8, !tbaa !49
  br label %28

28:                                               ; preds = %27, %24
  %29 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %30 = icmp eq ptr %29, null
  br i1 %30, label %32, label %31

31:                                               ; preds = %28
  tail call void @free(ptr noundef nonnull %29) #43
  store ptr null, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  br label %32

32:                                               ; preds = %31, %28
  %33 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 13), align 8, !tbaa !52
  %34 = icmp eq ptr %33, null
  br i1 %34, label %36, label %35

35:                                               ; preds = %32
  tail call void @free(ptr noundef nonnull %33) #43
  store ptr null, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 13), align 8, !tbaa !52
  br label %36

36:                                               ; preds = %35, %32
  %37 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %38 = icmp sgt i32 %37, 0
  %39 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  br i1 %38, label %40, label %58

40:                                               ; preds = %52, %36
  %41 = phi i32 [ %53, %52 ], [ %37, %36 ]
  %42 = phi ptr [ %54, %52 ], [ %39, %36 ]
  %43 = phi i64 [ %55, %52 ], [ 0, %36 ]
  %44 = getelementptr inbounds ptr, ptr %42, i64 %43
  %45 = load ptr, ptr %44, align 8, !tbaa !13
  %46 = icmp eq ptr %45, null
  br i1 %46, label %52, label %47

47:                                               ; preds = %40
  tail call void @free(ptr noundef nonnull %45) #43
  %48 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %49 = getelementptr inbounds ptr, ptr %48, i64 %43
  store ptr null, ptr %49, align 8, !tbaa !13
  %50 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %51 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  br label %52

52:                                               ; preds = %47, %40
  %53 = phi i32 [ %41, %40 ], [ %51, %47 ]
  %54 = phi ptr [ %42, %40 ], [ %50, %47 ]
  %55 = add nuw nsw i64 %43, 1
  %56 = sext i32 %53 to i64
  %57 = icmp slt i64 %55, %56
  br i1 %57, label %40, label %58

58:                                               ; preds = %52, %36
  %59 = phi ptr [ %39, %36 ], [ %54, %52 ]
  %60 = icmp eq ptr %59, null
  br i1 %60, label %62, label %61

61:                                               ; preds = %58
  tail call void @free(ptr noundef nonnull %59) #43
  store ptr null, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  br label %62

62:                                               ; preds = %61, %58
  %63 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 11), align 8, !tbaa !7
  br label %64

64:                                               ; preds = %74, %62
  %65 = phi ptr [ %63, %62 ], [ %75, %74 ]
  %66 = phi i64 [ 0, %62 ], [ %76, %74 ]
  %67 = getelementptr inbounds ptr, ptr %65, i64 %66
  %68 = load ptr, ptr %67, align 8, !tbaa !13
  %69 = icmp eq ptr %68, null
  br i1 %69, label %74, label %70

70:                                               ; preds = %64
  tail call void @free(ptr noundef nonnull %68) #43
  %71 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 11), align 8, !tbaa !7
  %72 = getelementptr inbounds ptr, ptr %71, i64 %66
  store ptr null, ptr %72, align 8, !tbaa !13
  %73 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 11), align 8, !tbaa !7
  br label %74

74:                                               ; preds = %70, %64
  %75 = phi ptr [ %65, %64 ], [ %73, %70 ]
  %76 = add nuw nsw i64 %66, 1
  %77 = icmp eq i64 %76, 10
  br i1 %77, label %78, label %64

78:                                               ; preds = %74
  %.lcssa = phi ptr [ %75, %74 ]
  %79 = icmp eq ptr %.lcssa, null
  br i1 %79, label %81, label %80

80:                                               ; preds = %78
  tail call void @free(ptr noundef nonnull %.lcssa) #43
  store ptr null, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 11), align 8, !tbaa !7
  br label %81

81:                                               ; preds = %80, %78
  %82 = load ptr, ptr @cdata, align 8, !tbaa !20
  %83 = icmp eq ptr %82, null
  br i1 %83, label %85, label %84

84:                                               ; preds = %81
  tail call void @free(ptr noundef nonnull %82) #43
  store ptr null, ptr @cdata, align 8, !tbaa !20
  br label %85

85:                                               ; preds = %84, %81
  %86 = load ptr, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 1), align 8, !tbaa !53
  %87 = icmp eq ptr %86, null
  br i1 %87, label %89, label %88

88:                                               ; preds = %85
  tail call void @free(ptr noundef nonnull %86) #43
  store ptr null, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 1), align 8, !tbaa !53
  br label %89

89:                                               ; preds = %88, %85
  %90 = load ptr, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 2), align 8, !tbaa !25
  %91 = icmp eq ptr %90, null
  br i1 %91, label %93, label %92

92:                                               ; preds = %89
  tail call void @free(ptr noundef nonnull %90) #43
  store ptr null, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 2), align 8, !tbaa !25
  br label %93

93:                                               ; preds = %92, %89
  %94 = load ptr, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 3), align 8, !tbaa !26
  %95 = icmp eq ptr %94, null
  br i1 %95, label %97, label %96

96:                                               ; preds = %93
  tail call void @free(ptr noundef nonnull %94) #43
  br label %97

97:                                               ; preds = %96, %93
  store ptr null, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 16), align 8, !tbaa !47
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), i8 0, i64 16, i1 false)
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(64) getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 6), i8 0, i64 64, i1 false)
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) @cdata, i8 0, i64 32, i1 false)
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @skip_line(ptr nocapture noundef %0, ptr nocapture noundef %1, i32 noundef %2) #14 {
  %4 = icmp eq i32 %2, 0
  br label %5

5:                                                ; preds = %10, %3
  %6 = tail call i32 @getc(ptr noundef %0) #44
  switch i32 %6, label %7 [
    i32 -1, label %11
    i32 10, label %11
  ]

7:                                                ; preds = %5
  br i1 %4, label %10, label %8

8:                                                ; preds = %7
  %9 = tail call i32 @putc(i32 noundef %6, ptr noundef %1) #44
  br label %10

10:                                               ; preds = %8, %7
  br label %5

11:                                               ; preds = %5, %5
  br i1 %4, label %14, label %12

12:                                               ; preds = %11
  %13 = tail call i32 @putc(i32 noundef 10, ptr noundef %1) #44
  br label %14

14:                                               ; preds = %12, %11
  %15 = load i32, ptr @lineno, align 4, !tbaa !16
  %16 = add nsw i32 %15, 1
  store i32 %16, ptr @lineno, align 4, !tbaa !16
  ret void
}

; Function Attrs: nofree nounwind optsize
declare noundef i32 @getc(ptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: nofree nounwind optsize
declare noundef i32 @putc(i32 noundef, ptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: nofree nounwind optsize uwtable
define internal ptr @get_word(ptr nocapture noundef %0, ptr noundef returned writeonly %1) #14 {
  br label %3

3:                                                ; preds = %6, %2
  %4 = tail call i32 @getc(ptr noundef %0) #44
  %5 = icmp eq i32 %4, -1
  br i1 %5, label %14, label %6

6:                                                ; preds = %3
  %7 = tail call ptr @__ctype_b_loc() #46
  %8 = load ptr, ptr %7, align 8, !tbaa !13
  %9 = sext i32 %4 to i64
  %10 = getelementptr inbounds i16, ptr %8, i64 %9
  %11 = load i16, ptr %10, align 2, !tbaa !54
  %12 = and i16 %11, 8192
  %13 = icmp eq i16 %12, 0
  br i1 %13, label %14, label %3

14:                                               ; preds = %6, %3
  %.lcssa1 = phi i32 [ %4, %6 ], [ %4, %3 ]
  %15 = trunc i32 %.lcssa1 to i8
  store i8 %15, ptr %1, align 1, !tbaa !56
  br label %16

16:                                               ; preds = %28, %14
  %17 = phi i64 [ %30, %28 ], [ 1, %14 ]
  %18 = tail call i32 @getc(ptr noundef %0) #44
  %19 = icmp eq i32 %18, -1
  br i1 %19, label %32, label %20

20:                                               ; preds = %16
  %21 = tail call ptr @__ctype_b_loc() #46
  %22 = load ptr, ptr %21, align 8, !tbaa !13
  %23 = sext i32 %18 to i64
  %24 = getelementptr inbounds i16, ptr %22, i64 %23
  %25 = load i16, ptr %24, align 2, !tbaa !54
  %26 = and i16 %25, 8192
  %27 = icmp eq i16 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  %29 = trunc i32 %18 to i8
  %30 = add nuw i64 %17, 1
  %31 = getelementptr inbounds i8, ptr %1, i64 %17
  store i8 %29, ptr %31, align 1, !tbaa !56
  br label %16

32:                                               ; preds = %20, %16
  %.lcssa = phi i64 [ %17, %20 ], [ %17, %16 ]
  %33 = and i64 %.lcssa, 4294967295
  %34 = getelementptr inbounds i8, ptr %1, i64 %33
  store i8 0, ptr %34, align 1, !tbaa !56
  ret ptr %1
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(none)
declare ptr @__ctype_b_loc() local_unnamed_addr #15

; Function Attrs: nounwind optsize uwtable
define internal void @read_cube(ptr noundef %0, ptr nocapture noundef %1) #0 {
  %3 = alloca [256 x i8], align 16
  %4 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 11), align 8, !tbaa !7
  %5 = load ptr, ptr %4, align 8, !tbaa !13
  %6 = getelementptr inbounds ptr, ptr %4, i64 1
  %7 = load ptr, ptr %6, align 8, !tbaa !13
  %8 = getelementptr inbounds ptr, ptr %4, i64 2
  %9 = load ptr, ptr %8, align 8, !tbaa !13
  call void @llvm.lifetime.start.p0(i64 256, ptr nonnull %3) #45
  %10 = load i32, ptr @cube, align 8, !tbaa !14
  %11 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %5, i32 noundef %10) #43
  %12 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %13 = icmp sgt i32 %12, 0
  br i1 %13, label %22, label %14

14:                                               ; preds = %71, %2
  %15 = phi i32 [ %12, %2 ], [ %74, %71 ]
  %16 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %17 = add nsw i32 %16, -1
  %18 = icmp slt i32 %15, %17
  br i1 %18, label %19, label %221

19:                                               ; preds = %14
  %20 = getelementptr inbounds %struct.PLA_t, ptr %1, i64 0, i32 7
  %21 = sext i32 %15 to i64
  br label %76

22:                                               ; preds = %71, %2
  %23 = phi i32 [ %73, %71 ], [ 0, %2 ]
  %24 = tail call i32 @getc(ptr noundef %0) #44
  switch i32 %24, label %334 [
    i32 63, label %71
    i32 10, label %31
    i32 32, label %40
    i32 124, label %40
    i32 9, label %40
    i32 50, label %42
    i32 45, label %42
    i32 48, label %25
    i32 49, label %60
  ]

25:                                               ; preds = %22
  %26 = shl nsw i32 %23, 1
  %27 = and i32 %26, 30
  %28 = ashr i32 %23, 4
  %29 = add nsw i32 %28, 1
  %30 = sext i32 %29 to i64
  br label %53

31:                                               ; preds = %22
  %32 = load i1, ptr @line_length_error, align 4
  br i1 %32, label %36, label %33

33:                                               ; preds = %31
  %34 = load ptr, ptr @stderr, align 8, !tbaa !13
  %35 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %34, ptr noundef nonnull @.str.11, ptr noundef nonnull @.str.1.12) #47
  br label %36

36:                                               ; preds = %33, %31
  store i1 true, ptr @line_length_error, align 4
  %37 = load i32, ptr @lineno, align 4, !tbaa !16
  %38 = add nsw i32 %37, 1
  store i32 %38, ptr @lineno, align 4, !tbaa !16
  %39 = add nsw i32 %23, -1
  br label %71

40:                                               ; preds = %22, %22, %22
  %41 = add nsw i32 %23, -1
  br label %71

42:                                               ; preds = %22, %22
  %43 = shl nsw i32 %23, 1
  %44 = and i32 %43, 30
  %45 = or i32 %44, 1
  %46 = shl nuw i32 1, %45
  %47 = ashr i32 %23, 4
  %48 = add nsw i32 %47, 1
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i32, ptr %5, i64 %49
  %51 = load i32, ptr %50, align 4, !tbaa !16
  %52 = or i32 %51, %46
  store i32 %52, ptr %50, align 4, !tbaa !16
  br label %53

53:                                               ; preds = %42, %25
  %54 = phi i64 [ %30, %25 ], [ %49, %42 ]
  %55 = phi i32 [ %27, %25 ], [ %44, %42 ]
  %56 = shl nuw nsw i32 1, %55
  %57 = getelementptr inbounds i32, ptr %5, i64 %54
  %58 = load i32, ptr %57, align 4, !tbaa !16
  %59 = or i32 %58, %56
  store i32 %59, ptr %57, align 4, !tbaa !16
  br label %71

60:                                               ; preds = %22
  %61 = shl nsw i32 %23, 1
  %62 = and i32 %61, 30
  %63 = or i32 %62, 1
  %64 = shl nuw i32 1, %63
  %65 = ashr i32 %23, 4
  %66 = add nsw i32 %65, 1
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds i32, ptr %5, i64 %67
  %69 = load i32, ptr %68, align 4, !tbaa !16
  %70 = or i32 %69, %64
  store i32 %70, ptr %68, align 4, !tbaa !16
  br label %71

71:                                               ; preds = %60, %53, %40, %36, %22
  %72 = phi i32 [ %23, %60 ], [ %23, %53 ], [ %41, %40 ], [ %39, %36 ], [ %23, %22 ]
  %73 = add nsw i32 %72, 1
  %74 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %75 = icmp slt i32 %73, %74
  br i1 %75, label %22, label %14

76:                                               ; preds = %213, %19
  %77 = phi i64 [ %21, %19 ], [ %214, %213 ]
  %78 = trunc i64 %77 to i32
  %79 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %80 = getelementptr inbounds i32, ptr %79, i64 %77
  %81 = load i32, ptr %80, align 4, !tbaa !16
  %82 = icmp slt i32 %81, 0
  br i1 %82, label %83, label %175

83:                                               ; preds = %76
  %84 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.2.13, ptr noundef nonnull %3) #43
  %85 = load i16, ptr %3, align 16
  %86 = icmp eq i16 %85, 45
  %87 = load i32, ptr %3, align 16
  %88 = icmp eq i32 %87, 5852737
  %89 = select i1 %86, i1 true, i1 %88
  br i1 %89, label %90, label %102

90:                                               ; preds = %83
  %91 = load i32, ptr @kiss, align 4, !tbaa !16
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %97, label %93

93:                                               ; preds = %90
  %94 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %95 = add nsw i32 %94, -2
  %96 = icmp eq i32 %95, %78
  br i1 %96, label %213, label %97

97:                                               ; preds = %93, %90
  %98 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %99 = getelementptr inbounds ptr, ptr %98, i64 %77
  %100 = load ptr, ptr %99, align 8, !tbaa !13
  %101 = call ptr (ptr, ptr, ptr, ...) @set_or(ptr noundef %5, ptr noundef %5, ptr noundef %100) #43
  br label %213

102:                                              ; preds = %83
  %103 = and i32 %87, 65535
  %104 = icmp eq i32 %103, 126
  br i1 %104, label %213, label %105

105:                                              ; preds = %102
  %106 = load i32, ptr @kiss, align 4, !tbaa !16
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %119, label %108

108:                                              ; preds = %105
  %109 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %110 = add nsw i32 %109, -2
  %111 = icmp eq i32 %110, %78
  br i1 %111, label %112, label %119

112:                                              ; preds = %108
  %113 = add nsw i64 %77, -1
  %114 = add i64 %77, -1
  %115 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %116 = getelementptr inbounds i32, ptr %115, i64 %113
  %117 = load i32, ptr %116, align 4, !tbaa !16
  %118 = call i32 @llvm.abs.i32(i32 %117, i1 true)
  br label %119

119:                                              ; preds = %112, %108, %105
  %120 = phi i64 [ %114, %112 ], [ %77, %108 ], [ %77, %105 ]
  %121 = phi i32 [ %118, %112 ], [ 0, %108 ], [ 0, %105 ]
  %122 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %123 = shl i64 %120, 32
  %124 = ashr exact i64 %123, 32
  %125 = getelementptr inbounds i32, ptr %122, i64 %124
  %126 = load i32, ptr %125, align 4, !tbaa !16
  %127 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  %128 = getelementptr inbounds i32, ptr %127, i64 %124
  %129 = load i32, ptr %128, align 4, !tbaa !16
  %130 = icmp sgt i32 %126, %129
  br i1 %130, label %172, label %131

131:                                              ; preds = %119
  %132 = load ptr, ptr %20, align 8, !tbaa !58
  %133 = sext i32 %126 to i64
  %134 = add i32 %129, 1
  br label %135

135:                                              ; preds = %168, %131
  %136 = phi i64 [ %133, %131 ], [ %169, %168 ]
  %137 = getelementptr inbounds ptr, ptr %132, i64 %136
  %138 = load ptr, ptr %137, align 8, !tbaa !13
  %139 = icmp eq ptr %138, null
  br i1 %139, label %140, label %154

140:                                              ; preds = %135
  %.lcssa = phi i64 [ %136, %135 ]
  %141 = trunc i64 %.lcssa to i32
  %142 = call ptr @util_strsav(ptr noundef nonnull %3) #43
  %143 = load ptr, ptr %20, align 8, !tbaa !58
  %144 = getelementptr inbounds ptr, ptr %143, i64 %.lcssa
  store ptr %142, ptr %144, align 8, !tbaa !13
  %145 = add nsw i32 %121, %141
  %146 = and i32 %145, 31
  %147 = shl nuw i32 1, %146
  %148 = ashr i32 %145, 5
  %149 = add nsw i32 %148, 1
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds i32, ptr %5, i64 %150
  %152 = load i32, ptr %151, align 4, !tbaa !16
  %153 = or i32 %152, %147
  store i32 %153, ptr %151, align 4, !tbaa !16
  br label %213

154:                                              ; preds = %135
  %155 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %138, ptr noundef nonnull dereferenceable(1) %3) #48
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %157, label %168

157:                                              ; preds = %154
  %.lcssa1 = phi i64 [ %136, %154 ]
  %158 = trunc i64 %.lcssa1 to i32
  %159 = add nsw i32 %121, %158
  %160 = and i32 %159, 31
  %161 = shl nuw i32 1, %160
  %162 = ashr i32 %159, 5
  %163 = add nsw i32 %162, 1
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds i32, ptr %5, i64 %164
  %166 = load i32, ptr %165, align 4, !tbaa !16
  %167 = or i32 %166, %161
  store i32 %167, ptr %165, align 4, !tbaa !16
  br label %213

168:                                              ; preds = %154
  %169 = add nsw i64 %136, 1
  %170 = trunc i64 %169 to i32
  %171 = icmp eq i32 %134, %170
  br i1 %171, label %172, label %135

172:                                              ; preds = %168, %119
  %.lcssa2 = phi i32 [ %78, %168 ], [ %78, %119 ]
  %173 = load ptr, ptr @stderr, align 8, !tbaa !13
  %174 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %173, ptr noundef nonnull @.str.6.14, i32 noundef %.lcssa2) #47
  call void @exit(i32 noundef -1) #49
  unreachable

175:                                              ; preds = %76
  %176 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %177 = getelementptr inbounds i32, ptr %176, i64 %77
  %178 = load i32, ptr %177, align 4, !tbaa !16
  %179 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  %180 = getelementptr inbounds i32, ptr %179, i64 %77
  %181 = load i32, ptr %180, align 4, !tbaa !16
  %182 = icmp sgt i32 %178, %181
  br i1 %182, label %213, label %183

183:                                              ; preds = %206, %175
  %184 = phi i32 [ %208, %206 ], [ %178, %175 ]
  %185 = call i32 @getc(ptr noundef %0) #44
  switch i32 %185, label %334 [
    i32 48, label %206
    i32 10, label %186
    i32 32, label %195
    i32 124, label %195
    i32 9, label %195
    i32 49, label %197
  ]

186:                                              ; preds = %183
  %187 = load i1, ptr @line_length_error, align 4
  br i1 %187, label %191, label %188

188:                                              ; preds = %186
  %189 = load ptr, ptr @stderr, align 8, !tbaa !13
  %190 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %189, ptr noundef nonnull @.str.11, ptr noundef nonnull @.str.1.12) #47
  br label %191

191:                                              ; preds = %188, %186
  store i1 true, ptr @line_length_error, align 4
  %192 = load i32, ptr @lineno, align 4, !tbaa !16
  %193 = add nsw i32 %192, 1
  store i32 %193, ptr @lineno, align 4, !tbaa !16
  %194 = add nsw i32 %184, -1
  br label %206

195:                                              ; preds = %183, %183, %183
  %196 = add nsw i32 %184, -1
  br label %206

197:                                              ; preds = %183
  %198 = and i32 %184, 31
  %199 = shl nuw i32 1, %198
  %200 = ashr i32 %184, 5
  %201 = add nsw i32 %200, 1
  %202 = sext i32 %201 to i64
  %203 = getelementptr inbounds i32, ptr %5, i64 %202
  %204 = load i32, ptr %203, align 4, !tbaa !16
  %205 = or i32 %204, %199
  store i32 %205, ptr %203, align 4, !tbaa !16
  br label %206

206:                                              ; preds = %197, %195, %191, %183
  %207 = phi i32 [ %184, %197 ], [ %196, %195 ], [ %194, %191 ], [ %184, %183 ]
  %208 = add nsw i32 %207, 1
  %209 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  %210 = getelementptr inbounds i32, ptr %209, i64 %77
  %211 = load i32, ptr %210, align 4, !tbaa !16
  %212 = icmp slt i32 %207, %211
  br i1 %212, label %183, label %213

213:                                              ; preds = %206, %175, %157, %140, %102, %97, %93
  %214 = add nsw i64 %77, 1
  %215 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %216 = add nsw i32 %215, -1
  %217 = sext i32 %216 to i64
  %218 = icmp slt i64 %214, %217
  br i1 %218, label %76, label %219

219:                                              ; preds = %213
  %.lcssa5 = phi i64 [ %214, %213 ]
  %.lcssa4 = phi i32 [ %215, %213 ]
  %220 = trunc i64 %.lcssa5 to i32
  br label %221

221:                                              ; preds = %219, %14
  %222 = phi i32 [ %15, %14 ], [ %220, %219 ]
  %223 = phi i32 [ %16, %14 ], [ %.lcssa4, %219 ]
  %224 = load i32, ptr @kiss, align 4, !tbaa !16
  %225 = icmp eq i32 %224, 0
  br i1 %225, label %233, label %226

226:                                              ; preds = %221
  %227 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %228 = add nsw i32 %223, -2
  %229 = sext i32 %228 to i64
  %230 = getelementptr inbounds ptr, ptr %227, i64 %229
  %231 = load ptr, ptr %230, align 8, !tbaa !13
  %232 = call ptr (ptr, ptr, ptr, ...) @set_xor(ptr noundef %7, ptr noundef %5, ptr noundef %231) #43
  br label %235

233:                                              ; preds = %221
  %234 = call ptr (ptr, ptr, ...) @set_copy(ptr noundef %7, ptr noundef %5) #43
  br label %235

235:                                              ; preds = %233, %226
  %236 = phi i32 [ 1, %226 ], [ 0, %233 ]
  %237 = call ptr (ptr, ptr, ...) @set_copy(ptr noundef %9, ptr noundef %5) #43
  %238 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %239 = sext i32 %222 to i64
  %240 = getelementptr inbounds i32, ptr %238, i64 %239
  %241 = load i32, ptr %240, align 4, !tbaa !16
  %242 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  %243 = getelementptr inbounds i32, ptr %242, i64 %239
  %244 = load i32, ptr %243, align 4, !tbaa !16
  %245 = icmp sgt i32 %241, %244
  br i1 %245, label %314, label %246

246:                                              ; preds = %235
  %247 = getelementptr inbounds %struct.PLA_t, ptr %1, i64 0, i32 4
  br label %248

248:                                              ; preds = %304, %246
  %249 = phi i32 [ %241, %246 ], [ %309, %304 ]
  %250 = phi i32 [ %236, %246 ], [ %307, %304 ]
  %251 = phi i32 [ 0, %246 ], [ %306, %304 ]
  %252 = phi i32 [ %236, %246 ], [ %305, %304 ]
  %253 = call i32 @getc(ptr noundef %0) #44
  switch i32 %253, label %334 [
    i32 126, label %304
    i32 10, label %254
    i32 32, label %263
    i32 124, label %263
    i32 9, label %263
    i32 52, label %265
    i32 49, label %265
    i32 51, label %278
    i32 48, label %278
    i32 50, label %291
    i32 45, label %291
  ]

254:                                              ; preds = %248
  %255 = load i1, ptr @line_length_error, align 4
  br i1 %255, label %259, label %256

256:                                              ; preds = %254
  %257 = load ptr, ptr @stderr, align 8, !tbaa !13
  %258 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %257, ptr noundef nonnull @.str.11, ptr noundef nonnull @.str.1.12) #47
  br label %259

259:                                              ; preds = %256, %254
  store i1 true, ptr @line_length_error, align 4
  %260 = load i32, ptr @lineno, align 4, !tbaa !16
  %261 = add nsw i32 %260, 1
  store i32 %261, ptr @lineno, align 4, !tbaa !16
  %262 = add nsw i32 %249, -1
  br label %304

263:                                              ; preds = %248, %248, %248
  %264 = add nsw i32 %249, -1
  br label %304

265:                                              ; preds = %248, %248
  %266 = load i32, ptr %247, align 8, !tbaa !60
  %267 = and i32 %266, 1
  %268 = icmp eq i32 %267, 0
  br i1 %268, label %304, label %269

269:                                              ; preds = %265
  %270 = and i32 %249, 31
  %271 = shl nuw i32 1, %270
  %272 = ashr i32 %249, 5
  %273 = add nsw i32 %272, 1
  %274 = sext i32 %273 to i64
  %275 = getelementptr inbounds i32, ptr %5, i64 %274
  %276 = load i32, ptr %275, align 4, !tbaa !16
  %277 = or i32 %276, %271
  store i32 %277, ptr %275, align 4, !tbaa !16
  br label %304

278:                                              ; preds = %248, %248
  %279 = load i32, ptr %247, align 8, !tbaa !60
  %280 = and i32 %279, 4
  %281 = icmp eq i32 %280, 0
  br i1 %281, label %304, label %282

282:                                              ; preds = %278
  %283 = and i32 %249, 31
  %284 = shl nuw i32 1, %283
  %285 = ashr i32 %249, 5
  %286 = add nsw i32 %285, 1
  %287 = sext i32 %286 to i64
  %288 = getelementptr inbounds i32, ptr %7, i64 %287
  %289 = load i32, ptr %288, align 4, !tbaa !16
  %290 = or i32 %289, %284
  store i32 %290, ptr %288, align 4, !tbaa !16
  br label %304

291:                                              ; preds = %248, %248
  %292 = load i32, ptr %247, align 8, !tbaa !60
  %293 = and i32 %292, 2
  %294 = icmp eq i32 %293, 0
  br i1 %294, label %304, label %295

295:                                              ; preds = %291
  %296 = and i32 %249, 31
  %297 = shl nuw i32 1, %296
  %298 = ashr i32 %249, 5
  %299 = add nsw i32 %298, 1
  %300 = sext i32 %299 to i64
  %301 = getelementptr inbounds i32, ptr %9, i64 %300
  %302 = load i32, ptr %301, align 4, !tbaa !16
  %303 = or i32 %302, %297
  store i32 %303, ptr %301, align 4, !tbaa !16
  br label %304

304:                                              ; preds = %295, %291, %282, %278, %269, %265, %263, %259, %248
  %305 = phi i32 [ %252, %295 ], [ %252, %291 ], [ %252, %282 ], [ %252, %278 ], [ 1, %269 ], [ %252, %265 ], [ %252, %263 ], [ %252, %259 ], [ %252, %248 ]
  %306 = phi i32 [ 1, %295 ], [ %251, %291 ], [ %251, %282 ], [ %251, %278 ], [ %251, %269 ], [ %251, %265 ], [ %251, %263 ], [ %251, %259 ], [ %251, %248 ]
  %307 = phi i32 [ %250, %295 ], [ %250, %291 ], [ 1, %282 ], [ %250, %278 ], [ %250, %269 ], [ %250, %265 ], [ %250, %263 ], [ %250, %259 ], [ %250, %248 ]
  %308 = phi i32 [ %249, %295 ], [ %249, %291 ], [ %249, %282 ], [ %249, %278 ], [ %249, %269 ], [ %249, %265 ], [ %264, %263 ], [ %262, %259 ], [ %249, %248 ]
  %309 = add nsw i32 %308, 1
  %310 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  %311 = getelementptr inbounds i32, ptr %310, i64 %239
  %312 = load i32, ptr %311, align 4, !tbaa !16
  %313 = icmp slt i32 %308, %312
  br i1 %313, label %248, label %314

314:                                              ; preds = %304, %235
  %315 = phi i32 [ %236, %235 ], [ %305, %304 ]
  %316 = phi i32 [ 0, %235 ], [ %306, %304 ]
  %317 = phi i32 [ %236, %235 ], [ %307, %304 ]
  %318 = icmp eq i32 %315, 0
  br i1 %318, label %322, label %319

319:                                              ; preds = %314
  %320 = load ptr, ptr %1, align 8, !tbaa !61
  %321 = call ptr (ptr, ptr, ...) @sf_addset(ptr noundef %320, ptr noundef %5) #43
  store ptr %321, ptr %1, align 8, !tbaa !61
  br label %322

322:                                              ; preds = %319, %314
  %323 = icmp eq i32 %316, 0
  br i1 %323, label %328, label %324

324:                                              ; preds = %322
  %325 = getelementptr inbounds %struct.PLA_t, ptr %1, i64 0, i32 1
  %326 = load ptr, ptr %325, align 8, !tbaa !62
  %327 = call ptr (ptr, ptr, ...) @sf_addset(ptr noundef %326, ptr noundef %9) #43
  store ptr %327, ptr %325, align 8, !tbaa !62
  br label %328

328:                                              ; preds = %324, %322
  %329 = icmp eq i32 %317, 0
  br i1 %329, label %339, label %330

330:                                              ; preds = %328
  %331 = getelementptr inbounds %struct.PLA_t, ptr %1, i64 0, i32 2
  %332 = load ptr, ptr %331, align 8, !tbaa !63
  %333 = call ptr (ptr, ptr, ...) @sf_addset(ptr noundef %332, ptr noundef %7) #43
  store ptr %333, ptr %331, align 8, !tbaa !63
  br label %339

334:                                              ; preds = %248, %183, %22
  %335 = load ptr, ptr @stderr, align 8, !tbaa !13
  %336 = load i32, ptr @lineno, align 4, !tbaa !16
  %337 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %335, ptr noundef nonnull @.str.7.15, i32 noundef %336) #47
  %338 = load ptr, ptr @stdout, align 8, !tbaa !13
  call void @skip_line(ptr noundef %0, ptr noundef %338, i32 noundef 1) #44
  br label %339

339:                                              ; preds = %334, %330, %328
  call void @llvm.lifetime.end.p0(i64 256, ptr nonnull %3) #45
  ret void
}

; Function Attrs: nofree nounwind optsize
declare noundef i32 @fprintf(ptr nocapture noundef, ptr nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: optsize
declare i32 @__isoc99_fscanf(ptr noundef, ptr noundef, ...) local_unnamed_addr #16

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: read)
declare i32 @strcmp(ptr nocapture noundef, ptr nocapture noundef) local_unnamed_addr #17

; Function Attrs: noreturn nounwind optsize
declare void @exit(i32 noundef) local_unnamed_addr #18

; Function Attrs: nounwind optsize uwtable
define internal void @parse_pla(ptr noundef %0, ptr nocapture noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca [256 x i8], align 16
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  %8 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %3) #45
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4) #45
  call void @llvm.lifetime.start.p0(i64 256, ptr nonnull %5) #45
  store i32 1, ptr @lineno, align 4, !tbaa !16
  store i1 false, ptr @line_length_error, align 4
  %9 = getelementptr inbounds %struct.PLA_t, ptr %1, i64 0, i32 6
  %10 = getelementptr inbounds i8, ptr %5, i64 1
  %11 = getelementptr inbounds %struct.PLA_t, ptr %1, i64 0, i32 5
  %12 = getelementptr inbounds %struct.PLA_t, ptr %1, i64 0, i32 9
  %13 = getelementptr inbounds %struct.PLA_t, ptr %1, i64 0, i32 8
  %14 = getelementptr inbounds %struct.PLA_t, ptr %1, i64 0, i32 7
  %15 = getelementptr inbounds %struct.PLA_t, ptr %1, i64 0, i32 4
  %16 = getelementptr inbounds %struct.PLA_t, ptr %1, i64 0, i32 1
  %17 = getelementptr inbounds %struct.PLA_t, ptr %1, i64 0, i32 2
  br label %18

18:                                               ; preds = %378, %2
  %19 = call i32 @getc(ptr noundef %0) #44
  switch i32 %19, label %468 [
    i32 -1, label %492
    i32 10, label %20
    i32 32, label %378
    i32 9, label %378
    i32 12, label %378
    i32 13, label %378
    i32 35, label %23
    i32 46, label %27
  ]

20:                                               ; preds = %18
  %21 = load i32, ptr @lineno, align 4, !tbaa !16
  %22 = add nsw i32 %21, 1
  store i32 %22, ptr @lineno, align 4, !tbaa !16
  br label %378

23:                                               ; preds = %18
  %24 = call i32 @ungetc(i32 noundef 35, ptr noundef %0) #44
  %25 = load ptr, ptr @stdout, align 8, !tbaa !13
  %26 = load i32, ptr @echo_comments, align 4, !tbaa !16
  call void @skip_line(ptr noundef %0, ptr noundef %25, i32 noundef %26) #44
  br label %378

27:                                               ; preds = %18
  %28 = call ptr @get_word(ptr noundef %0, ptr noundef nonnull %5) #44
  %29 = load i16, ptr %5, align 16
  switch i16 %29, label %78 [
    i16 105, label %30
    i16 111, label %51
  ]

30:                                               ; preds = %27
  %31 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %32 = icmp eq ptr %31, null
  br i1 %32, label %41, label %33

33:                                               ; preds = %30
  %34 = load ptr, ptr @stderr, align 8, !tbaa !13
  %35 = call i64 @fwrite(ptr nonnull @.str.9.16, i64 17, i64 1, ptr %34) #50
  br label %36

36:                                               ; preds = %36, %33
  %37 = call i32 @getc(ptr noundef %0) #44
  switch i32 %37, label %36 [
    i32 -1, label %38
    i32 10, label %38
  ]

38:                                               ; preds = %36, %36
  %39 = load i32, ptr @lineno, align 4, !tbaa !16
  %40 = add nsw i32 %39, 1
  store i32 %40, ptr @lineno, align 4, !tbaa !16
  br label %378

41:                                               ; preds = %30
  %42 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.10.17, ptr noundef nonnull getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2)) #43
  %43 = icmp eq i32 %42, 1
  br i1 %43, label %45, label %44

44:                                               ; preds = %41
  call void (ptr, ...) @fatal(ptr noundef nonnull @.str.11.18) #43
  br label %45

45:                                               ; preds = %44, %41
  %46 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %47 = add nsw i32 %46, 1
  store i32 %47, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %48 = sext i32 %47 to i64
  %49 = shl nsw i64 %48, 2
  %50 = call noalias ptr @malloc(i64 noundef %49) #42
  store ptr %50, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  br label %378

51:                                               ; preds = %27
  %52 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %53 = icmp eq ptr %52, null
  br i1 %53, label %62, label %54

54:                                               ; preds = %51
  %55 = load ptr, ptr @stderr, align 8, !tbaa !13
  %56 = call i64 @fwrite(ptr nonnull @.str.13, i64 17, i64 1, ptr %55) #50
  br label %57

57:                                               ; preds = %57, %54
  %58 = call i32 @getc(ptr noundef %0) #44
  switch i32 %58, label %57 [
    i32 -1, label %59
    i32 10, label %59
  ]

59:                                               ; preds = %57, %57
  %60 = load i32, ptr @lineno, align 4, !tbaa !16
  %61 = add nsw i32 %60, 1
  store i32 %61, ptr @lineno, align 4, !tbaa !16
  br label %378

62:                                               ; preds = %51
  %63 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %64 = icmp eq ptr %63, null
  br i1 %64, label %65, label %67

65:                                               ; preds = %62
  call void (ptr, ...) @fatal(ptr noundef nonnull @.str.14) #43
  %66 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  br label %67

67:                                               ; preds = %65, %62
  %68 = phi ptr [ %66, %65 ], [ %63, %62 ]
  %69 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %70 = add nsw i32 %69, -1
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds i32, ptr %68, i64 %71
  %73 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.10.17, ptr noundef %72) #43
  %74 = icmp eq i32 %73, 1
  br i1 %74, label %76, label %75

75:                                               ; preds = %67
  call void (ptr, ...) @fatal(ptr noundef nonnull @.str.15) #43
  br label %76

76:                                               ; preds = %75, %67
  call void (...) @cube_setup() #43
  %77 = call i32 @PLA_labels(ptr noundef %1) #44
  br label %378

78:                                               ; preds = %27
  %79 = call i32 @bcmp(ptr noundef nonnull dereferenceable(3) %5, ptr noundef nonnull dereferenceable(3) @.str.16, i64 3)
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %81, label %134

81:                                               ; preds = %78
  %82 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %83 = icmp eq ptr %82, null
  br i1 %83, label %92, label %84

84:                                               ; preds = %81
  %85 = load ptr, ptr @stderr, align 8, !tbaa !13
  %86 = call i64 @fwrite(ptr nonnull @.str.17, i64 18, i64 1, ptr %85) #50
  br label %87

87:                                               ; preds = %87, %84
  %88 = call i32 @getc(ptr noundef %0) #44
  switch i32 %88, label %87 [
    i32 -1, label %89
    i32 10, label %89
  ]

89:                                               ; preds = %87, %87
  %90 = load i32, ptr @lineno, align 4, !tbaa !16
  %91 = add nsw i32 %90, 1
  store i32 %91, ptr @lineno, align 4, !tbaa !16
  br label %378

92:                                               ; preds = %81
  %93 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %94 = icmp eq ptr %93, null
  br i1 %94, label %96, label %95

95:                                               ; preds = %92
  call void (ptr, ...) @fatal(ptr noundef nonnull @.str.18) #43
  br label %96

96:                                               ; preds = %95, %92
  %97 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.19, ptr noundef nonnull getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), ptr noundef nonnull getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2)) #43
  %98 = icmp eq i32 %97, 2
  br i1 %98, label %100, label %99

99:                                               ; preds = %96
  call void (ptr, ...) @fatal(ptr noundef nonnull @.str.20) #43
  br label %100

100:                                              ; preds = %99, %96
  %101 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %102 = icmp slt i32 %101, 0
  br i1 %102, label %103, label %105

103:                                              ; preds = %100
  call void (ptr, ...) @fatal(ptr noundef nonnull @.str.21) #43
  %104 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  br label %105

105:                                              ; preds = %103, %100
  %106 = phi i32 [ %104, %103 ], [ %101, %100 ]
  %107 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %108 = icmp slt i32 %107, %106
  br i1 %108, label %109, label %112

109:                                              ; preds = %105
  call void (ptr, ...) @fatal(ptr noundef nonnull @.str.22) #43
  %110 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %111 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  br label %112

112:                                              ; preds = %109, %105
  %113 = phi i32 [ %111, %109 ], [ %106, %105 ]
  %114 = phi i32 [ %110, %109 ], [ %107, %105 ]
  %115 = sext i32 %114 to i64
  %116 = shl nsw i64 %115, 2
  %117 = call noalias ptr @malloc(i64 noundef %116) #42
  store ptr %117, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  store i32 %113, ptr %3, align 4, !tbaa !16
  %118 = icmp slt i32 %113, %114
  br i1 %118, label %119, label %132

119:                                              ; preds = %127, %112
  %120 = phi i32 [ %129, %127 ], [ %113, %112 ]
  %121 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %122 = sext i32 %120 to i64
  %123 = getelementptr inbounds i32, ptr %121, i64 %122
  %124 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.10.17, ptr noundef %123) #43
  %125 = icmp eq i32 %124, 1
  br i1 %125, label %127, label %126

126:                                              ; preds = %119
  call void (ptr, ...) @fatal(ptr noundef nonnull @.str.20) #43
  br label %127

127:                                              ; preds = %126, %119
  %128 = load i32, ptr %3, align 4, !tbaa !16
  %129 = add nsw i32 %128, 1
  store i32 %129, ptr %3, align 4, !tbaa !16
  %130 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %131 = icmp slt i32 %129, %130
  br i1 %131, label %119, label %132

132:                                              ; preds = %127, %112
  call void (...) @cube_setup() #43
  %133 = call i32 @PLA_labels(ptr noundef %1) #44
  br label %378

134:                                              ; preds = %78
  %135 = icmp eq i16 %29, 112
  br i1 %135, label %136, label %138

136:                                              ; preds = %134
  %137 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.10.17, ptr noundef nonnull %4) #43
  br label %378

138:                                              ; preds = %134
  %139 = icmp eq i16 %29, 101
  %140 = load i32, ptr %5, align 16
  %141 = icmp eq i32 %140, 6581861
  %142 = select i1 %139, i1 true, i1 %141
  br i1 %142, label %492, label %143

143:                                              ; preds = %138
  %144 = call i32 @bcmp(ptr noundef nonnull dereferenceable(5) %5, ptr noundef nonnull dereferenceable(5) @.str.26, i64 5)
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %146, label %147

146:                                              ; preds = %143
  store i32 1, ptr @kiss, align 4, !tbaa !16
  br label %378

147:                                              ; preds = %143
  %148 = call i32 @bcmp(ptr noundef nonnull dereferenceable(5) %5, ptr noundef nonnull dereferenceable(5) @.str.27, i64 5)
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %150, label %169

150:                                              ; preds = %147
  %151 = call ptr @get_word(ptr noundef %0, ptr noundef nonnull %5) #44
  %152 = load ptr, ptr @pla_types, align 8, !tbaa !64
  %153 = icmp eq ptr %152, null
  br i1 %153, label %168, label %159

154:                                              ; preds = %159
  %155 = add nuw i64 %160, 1
  %156 = getelementptr inbounds [0 x %struct.pla_types_struct], ptr @pla_types, i64 0, i64 %155
  %157 = load ptr, ptr %156, align 8, !tbaa !64
  %158 = icmp eq ptr %157, null
  br i1 %158, label %168, label %159

159:                                              ; preds = %154, %150
  %160 = phi i64 [ %155, %154 ], [ 0, %150 ]
  %161 = phi ptr [ %157, %154 ], [ %152, %150 ]
  %162 = getelementptr inbounds i8, ptr %161, i64 1
  %163 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %162, ptr noundef nonnull dereferenceable(1) %5) #48
  %164 = icmp eq i32 %163, 0
  br i1 %164, label %165, label %154

165:                                              ; preds = %159
  %.lcssa3 = phi i64 [ %160, %159 ]
  %166 = getelementptr inbounds [0 x %struct.pla_types_struct], ptr @pla_types, i64 0, i64 %.lcssa3, i32 1
  %167 = load i32, ptr %166, align 8, !tbaa !66
  store i32 %167, ptr %15, align 8, !tbaa !60
  br label %378

168:                                              ; preds = %154, %150
  call void (ptr, ...) @fatal(ptr noundef nonnull @.str.28) #43
  br label %378

169:                                              ; preds = %147
  %170 = icmp eq i32 %140, 6450281
  br i1 %170, label %171, label %209

171:                                              ; preds = %169
  %172 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %173 = icmp eq ptr %172, null
  br i1 %173, label %174, label %175

174:                                              ; preds = %171
  call void (ptr, ...) @fatal(ptr noundef nonnull @.str.30) #43
  br label %175

175:                                              ; preds = %174, %171
  %176 = load ptr, ptr %14, align 8, !tbaa !58
  %177 = icmp eq ptr %176, null
  br i1 %177, label %178, label %180

178:                                              ; preds = %175
  %179 = call i32 @PLA_labels(ptr noundef nonnull %1) #44
  br label %180

180:                                              ; preds = %178, %175
  store i32 0, ptr %3, align 4, !tbaa !16
  %181 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %182 = icmp sgt i32 %181, 0
  br i1 %182, label %183, label %378

183:                                              ; preds = %183, %180
  %184 = call ptr @get_word(ptr noundef %0, ptr noundef nonnull %5) #44
  %185 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %186 = load i32, ptr %3, align 4, !tbaa !16
  %187 = sext i32 %186 to i64
  %188 = getelementptr inbounds i32, ptr %185, i64 %187
  %189 = load i32, ptr %188, align 4, !tbaa !16
  %190 = call ptr @util_strsav(ptr noundef nonnull %5) #43
  %191 = load ptr, ptr %14, align 8, !tbaa !58
  %192 = add nsw i32 %189, 1
  %193 = sext i32 %192 to i64
  %194 = getelementptr inbounds ptr, ptr %191, i64 %193
  store ptr %190, ptr %194, align 8, !tbaa !13
  %195 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %5) #48
  %196 = add i64 %195, 6
  %197 = call noalias ptr @malloc(i64 noundef %196) #42
  %198 = load ptr, ptr %14, align 8, !tbaa !58
  %199 = sext i32 %189 to i64
  %200 = getelementptr inbounds ptr, ptr %198, i64 %199
  store ptr %197, ptr %200, align 8, !tbaa !13
  %201 = load ptr, ptr %14, align 8, !tbaa !58
  %202 = getelementptr inbounds ptr, ptr %201, i64 %199
  %203 = load ptr, ptr %202, align 8, !tbaa !13
  %204 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %203, ptr noundef nonnull dereferenceable(1) @.str.31, ptr noundef nonnull %5) #43
  %205 = load i32, ptr %3, align 4, !tbaa !16
  %206 = add nsw i32 %205, 1
  store i32 %206, ptr %3, align 4, !tbaa !16
  %207 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %208 = icmp slt i32 %206, %207
  br i1 %208, label %183, label %378

209:                                              ; preds = %169
  %210 = call i32 @bcmp(ptr noundef nonnull dereferenceable(3) %5, ptr noundef nonnull dereferenceable(3) @.str.32, i64 3)
  %211 = icmp eq i32 %210, 0
  br i1 %211, label %212, label %248

212:                                              ; preds = %209
  %213 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %214 = icmp eq ptr %213, null
  br i1 %214, label %215, label %216

215:                                              ; preds = %212
  call void (ptr, ...) @fatal(ptr noundef nonnull @.str.30) #43
  br label %216

216:                                              ; preds = %215, %212
  %217 = load ptr, ptr %14, align 8, !tbaa !58
  %218 = icmp eq ptr %217, null
  br i1 %218, label %219, label %221

219:                                              ; preds = %216
  %220 = call i32 @PLA_labels(ptr noundef nonnull %1) #44
  br label %221

221:                                              ; preds = %219, %216
  %222 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %223 = add nsw i32 %222, -1
  store i32 %223, ptr %3, align 4, !tbaa !16
  %224 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %225 = sext i32 %223 to i64
  %226 = getelementptr inbounds i32, ptr %224, i64 %225
  %227 = load i32, ptr %226, align 4, !tbaa !16
  %228 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  %229 = getelementptr inbounds i32, ptr %228, i64 %225
  %230 = load i32, ptr %229, align 4, !tbaa !16
  %231 = icmp sgt i32 %227, %230
  br i1 %231, label %378, label %232

232:                                              ; preds = %221
  %233 = sext i32 %227 to i64
  br label %234

234:                                              ; preds = %234, %232
  %235 = phi i64 [ %233, %232 ], [ %240, %234 ]
  %236 = call ptr @get_word(ptr noundef %0, ptr noundef nonnull %5) #44
  %237 = call ptr @util_strsav(ptr noundef nonnull %5) #43
  %238 = load ptr, ptr %14, align 8, !tbaa !58
  %239 = getelementptr inbounds ptr, ptr %238, i64 %235
  store ptr %237, ptr %239, align 8, !tbaa !13
  %240 = add nsw i64 %235, 1
  %241 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  %242 = load i32, ptr %3, align 4, !tbaa !16
  %243 = sext i32 %242 to i64
  %244 = getelementptr inbounds i32, ptr %241, i64 %243
  %245 = load i32, ptr %244, align 4, !tbaa !16
  %246 = sext i32 %245 to i64
  %247 = icmp slt i64 %235, %246
  br i1 %247, label %234, label %378

248:                                              ; preds = %209
  %249 = call i32 @bcmp(ptr noundef nonnull dereferenceable(6) %5, ptr noundef nonnull dereferenceable(6) @.str.33, i64 6)
  %250 = icmp eq i32 %249, 0
  br i1 %250, label %251, label %290

251:                                              ; preds = %248
  %252 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %253 = icmp eq ptr %252, null
  br i1 %253, label %254, label %255

254:                                              ; preds = %251
  call void (ptr, ...) @fatal(ptr noundef nonnull @.str.34) #43
  br label %255

255:                                              ; preds = %254, %251
  %256 = load ptr, ptr %14, align 8, !tbaa !58
  %257 = icmp eq ptr %256, null
  br i1 %257, label %258, label %260

258:                                              ; preds = %255
  %259 = call i32 @PLA_labels(ptr noundef nonnull %1) #44
  br label %260

260:                                              ; preds = %258, %255
  %261 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.35, ptr noundef nonnull %3) #43
  %262 = icmp eq i32 %261, 1
  br i1 %262, label %264, label %263

263:                                              ; preds = %260
  call void (ptr, ...) @fatal(ptr noundef nonnull @.str.36) #43
  br label %264

264:                                              ; preds = %263, %260
  %265 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %266 = load i32, ptr %3, align 4, !tbaa !16
  %267 = sext i32 %266 to i64
  %268 = getelementptr inbounds i32, ptr %265, i64 %267
  %269 = load i32, ptr %268, align 4, !tbaa !16
  %270 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  %271 = getelementptr inbounds i32, ptr %270, i64 %267
  %272 = load i32, ptr %271, align 4, !tbaa !16
  %273 = icmp sgt i32 %269, %272
  br i1 %273, label %378, label %274

274:                                              ; preds = %264
  %275 = sext i32 %269 to i64
  br label %276

276:                                              ; preds = %276, %274
  %277 = phi i64 [ %275, %274 ], [ %282, %276 ]
  %278 = call ptr @get_word(ptr noundef %0, ptr noundef nonnull %5) #44
  %279 = call ptr @util_strsav(ptr noundef nonnull %5) #43
  %280 = load ptr, ptr %14, align 8, !tbaa !58
  %281 = getelementptr inbounds ptr, ptr %280, i64 %277
  store ptr %279, ptr %281, align 8, !tbaa !13
  %282 = add nsw i64 %277, 1
  %283 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  %284 = load i32, ptr %3, align 4, !tbaa !16
  %285 = sext i32 %284 to i64
  %286 = getelementptr inbounds i32, ptr %283, i64 %285
  %287 = load i32, ptr %286, align 4, !tbaa !16
  %288 = sext i32 %287 to i64
  %289 = icmp slt i64 %277, %288
  br i1 %289, label %276, label %378

290:                                              ; preds = %248
  %291 = call i32 @bcmp(ptr noundef nonnull dereferenceable(9) %5, ptr noundef nonnull dereferenceable(9) @.str.37, i64 9)
  %292 = icmp eq i32 %291, 0
  br i1 %292, label %293, label %311

293:                                              ; preds = %290
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #45
  %294 = call i32 @read_symbolic(ptr noundef %0, ptr noundef %1, ptr noundef nonnull %5, ptr noundef nonnull %6) #44, !range !67
  %295 = icmp eq i32 %294, 0
  br i1 %295, label %309, label %296

296:                                              ; preds = %293
  %297 = load ptr, ptr %13, align 8, !tbaa !68
  %298 = icmp eq ptr %297, null
  br i1 %298, label %299, label %301

299:                                              ; preds = %296
  %300 = load ptr, ptr %6, align 8, !tbaa !13
  store ptr %300, ptr %13, align 8, !tbaa !68
  br label %310

301:                                              ; preds = %301, %296
  %302 = phi ptr [ %304, %301 ], [ %297, %296 ]
  %303 = getelementptr inbounds %struct.symbolic_struct, ptr %302, i64 0, i32 4
  %304 = load ptr, ptr %303, align 8, !tbaa !69
  %305 = icmp eq ptr %304, null
  br i1 %305, label %306, label %301

306:                                              ; preds = %301
  %.lcssa2 = phi ptr [ %302, %301 ]
  %307 = getelementptr inbounds %struct.symbolic_struct, ptr %.lcssa2, i64 0, i32 4
  %308 = load ptr, ptr %6, align 8, !tbaa !13
  store ptr %308, ptr %307, align 8, !tbaa !69
  br label %310

309:                                              ; preds = %293
  call void (ptr, ...) @fatal(ptr noundef nonnull @.str.38) #43
  br label %310

310:                                              ; preds = %309, %306, %299
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #45
  br label %378

311:                                              ; preds = %290
  %312 = call i32 @bcmp(ptr noundef nonnull dereferenceable(16) %5, ptr noundef nonnull dereferenceable(16) @.str.39, i64 16)
  %313 = icmp eq i32 %312, 0
  br i1 %313, label %314, label %332

314:                                              ; preds = %311
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #45
  %315 = call i32 @read_symbolic(ptr noundef %0, ptr noundef %1, ptr noundef nonnull %5, ptr noundef nonnull %7) #44, !range !67
  %316 = icmp eq i32 %315, 0
  br i1 %316, label %330, label %317

317:                                              ; preds = %314
  %318 = load ptr, ptr %12, align 8, !tbaa !71
  %319 = icmp eq ptr %318, null
  br i1 %319, label %320, label %322

320:                                              ; preds = %317
  %321 = load ptr, ptr %7, align 8, !tbaa !13
  store ptr %321, ptr %12, align 8, !tbaa !71
  br label %331

322:                                              ; preds = %322, %317
  %323 = phi ptr [ %325, %322 ], [ %318, %317 ]
  %324 = getelementptr inbounds %struct.symbolic_struct, ptr %323, i64 0, i32 4
  %325 = load ptr, ptr %324, align 8, !tbaa !69
  %326 = icmp eq ptr %325, null
  br i1 %326, label %327, label %322

327:                                              ; preds = %322
  %.lcssa1 = phi ptr [ %323, %322 ]
  %328 = getelementptr inbounds %struct.symbolic_struct, ptr %.lcssa1, i64 0, i32 4
  %329 = load ptr, ptr %7, align 8, !tbaa !13
  store ptr %329, ptr %328, align 8, !tbaa !69
  br label %331

330:                                              ; preds = %314
  call void (ptr, ...) @fatal(ptr noundef nonnull @.str.40) #43
  br label %331

331:                                              ; preds = %330, %327, %320
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #45
  br label %378

332:                                              ; preds = %311
  %333 = call i32 @bcmp(ptr noundef nonnull dereferenceable(6) %5, ptr noundef nonnull dereferenceable(6) @.str.41, i64 6)
  %334 = icmp eq i32 %333, 0
  br i1 %334, label %335, label %397

335:                                              ; preds = %332
  %336 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %337 = icmp eq ptr %336, null
  br i1 %337, label %338, label %339

338:                                              ; preds = %335
  call void (ptr, ...) @fatal(ptr noundef nonnull @.str.42) #43
  br label %339

339:                                              ; preds = %338, %335
  %340 = load ptr, ptr %11, align 8, !tbaa !72
  %341 = icmp eq ptr %340, null
  br i1 %341, label %350, label %342

342:                                              ; preds = %339
  %343 = load ptr, ptr @stderr, align 8, !tbaa !13
  %344 = call i64 @fwrite(ptr nonnull @.str.43, i64 21, i64 1, ptr %343) #50
  br label %345

345:                                              ; preds = %345, %342
  %346 = call i32 @getc(ptr noundef %0) #44
  switch i32 %346, label %345 [
    i32 -1, label %347
    i32 10, label %347
  ]

347:                                              ; preds = %345, %345
  %348 = load i32, ptr @lineno, align 4, !tbaa !16
  %349 = add nsw i32 %348, 1
  store i32 %349, ptr @lineno, align 4, !tbaa !16
  br label %378

350:                                              ; preds = %352, %339
  %351 = call i32 @getc(ptr noundef %0) #44
  switch i32 %351, label %353 [
    i32 32, label %352
    i32 9, label %352
  ]

352:                                              ; preds = %350, %350
  br label %350

353:                                              ; preds = %350
  %.lcssa = phi i32 [ %351, %350 ]
  %354 = call i32 @ungetc(i32 noundef %.lcssa, ptr noundef %0) #44
  %355 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %356 = load i32, ptr %355, align 4, !tbaa !16
  %357 = shl i32 %356, 5
  %358 = and i32 %357, 32736
  %359 = icmp ult i32 %358, 33
  %360 = add nsw i32 %358, -1
  %361 = lshr i32 %360, 3
  %362 = and i32 %361, 536870908
  %363 = add nuw nsw i32 %362, 8
  %364 = select i1 %359, i32 8, i32 %363
  %365 = zext i32 %364 to i64
  %366 = call noalias ptr @malloc(i64 noundef %365) #42
  %367 = call ptr (ptr, ptr, ...) @set_copy(ptr noundef %366, ptr noundef nonnull %355) #43
  store ptr %367, ptr %11, align 8, !tbaa !72
  %368 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  %369 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %370 = add nsw i32 %369, -1
  %371 = sext i32 %370 to i64
  %372 = getelementptr inbounds i32, ptr %368, i64 %371
  %373 = load i32, ptr %372, align 4, !tbaa !16
  %374 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %375 = getelementptr inbounds i32, ptr %374, i64 %371
  %376 = load i32, ptr %375, align 4, !tbaa !16
  %377 = icmp sgt i32 %376, %373
  br i1 %377, label %378, label %379

378:                                              ; preds = %491, %478, %465, %458, %394, %353, %347, %331, %310, %276, %264, %234, %221, %183, %180, %168, %165, %146, %136, %132, %89, %76, %59, %45, %38, %23, %20, %18, %18, %18, %18
  br label %18

379:                                              ; preds = %394, %353
  %380 = phi i32 [ %395, %394 ], [ %376, %353 ]
  %381 = call i32 @getc(ptr noundef %0) #44
  switch i32 %381, label %393 [
    i32 48, label %382
    i32 49, label %394
  ]

382:                                              ; preds = %379
  %383 = and i32 %380, 31
  %384 = shl nuw i32 1, %383
  %385 = xor i32 %384, -1
  %386 = load ptr, ptr %11, align 8, !tbaa !72
  %387 = ashr i32 %380, 5
  %388 = add nsw i32 %387, 1
  %389 = sext i32 %388 to i64
  %390 = getelementptr inbounds i32, ptr %386, i64 %389
  %391 = load i32, ptr %390, align 4, !tbaa !16
  %392 = and i32 %391, %385
  store i32 %392, ptr %390, align 4, !tbaa !16
  br label %394

393:                                              ; preds = %379
  call void (ptr, ...) @fatal(ptr noundef nonnull @.str.44) #43
  br label %394

394:                                              ; preds = %393, %382, %379
  %395 = add i32 %380, 1
  %396 = icmp eq i32 %380, %373
  br i1 %396, label %378, label %379

397:                                              ; preds = %332
  %398 = call i32 @bcmp(ptr noundef nonnull dereferenceable(5) %5, ptr noundef nonnull dereferenceable(5) @.str.45, i64 5)
  %399 = icmp eq i32 %398, 0
  br i1 %399, label %400, label %459

400:                                              ; preds = %397
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %8) #45
  %401 = load ptr, ptr %9, align 8, !tbaa !73
  %402 = icmp eq ptr %401, null
  br i1 %402, label %406, label %403

403:                                              ; preds = %400
  %404 = load ptr, ptr @stderr, align 8, !tbaa !13
  %405 = call i64 @fwrite(ptr nonnull @.str.46, i64 20, i64 1, ptr %404) #50
  br label %458

406:                                              ; preds = %400
  %407 = call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #42
  store ptr %407, ptr %9, align 8, !tbaa !73
  %408 = call i32 (ptr, ptr, ...) @__isoc99_fscanf(ptr noundef %0, ptr noundef nonnull @.str.10.17, ptr noundef %407) #43
  %409 = icmp eq i32 %408, 1
  br i1 %409, label %411, label %410

410:                                              ; preds = %406
  call void (ptr, ...) @fatal(ptr noundef nonnull @.str.47) #43
  br label %411

411:                                              ; preds = %410, %406
  %412 = load i32, ptr %407, align 8, !tbaa !74
  %413 = sext i32 %412 to i64
  %414 = shl nsw i64 %413, 2
  %415 = call noalias ptr @malloc(i64 noundef %414) #42
  %416 = getelementptr inbounds %struct.pair_struct, ptr %407, i64 0, i32 1
  store ptr %415, ptr %416, align 8, !tbaa !76
  %417 = call noalias ptr @malloc(i64 noundef %414) #42
  %418 = getelementptr inbounds %struct.pair_struct, ptr %407, i64 0, i32 2
  store ptr %417, ptr %418, align 8, !tbaa !77
  %419 = icmp sgt i32 %412, 0
  br i1 %419, label %420, label %458

420:                                              ; preds = %453, %411
  %421 = phi i64 [ %454, %453 ], [ 0, %411 ]
  %422 = call ptr @get_word(ptr noundef %0, ptr noundef nonnull %5) #44
  %423 = load i8, ptr %5, align 16, !tbaa !56
  %424 = icmp eq i8 %423, 40
  br i1 %424, label %425, label %427

425:                                              ; preds = %420
  %426 = call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %5, ptr noundef nonnull dereferenceable(1) %10) #43
  br label %427

427:                                              ; preds = %425, %420
  %428 = call i32 @label_index(ptr noundef %1, ptr noundef nonnull %5, ptr noundef nonnull %3, ptr noundef nonnull %8) #44, !range !67
  %429 = icmp eq i32 %428, 0
  br i1 %429, label %435, label %430

430:                                              ; preds = %427
  %431 = load i32, ptr %3, align 4, !tbaa !16
  %432 = add nsw i32 %431, 1
  %433 = load ptr, ptr %416, align 8, !tbaa !76
  %434 = getelementptr inbounds i32, ptr %433, i64 %421
  store i32 %432, ptr %434, align 4, !tbaa !16
  br label %436

435:                                              ; preds = %427
  call void (ptr, ...) @fatal(ptr noundef nonnull @.str.47) #43
  br label %436

436:                                              ; preds = %435, %430
  %437 = call ptr @get_word(ptr noundef %0, ptr noundef nonnull %5) #44
  %438 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %5) #48
  %439 = add i64 %438, -1
  %440 = getelementptr inbounds [256 x i8], ptr %5, i64 0, i64 %439
  %441 = load i8, ptr %440, align 1, !tbaa !56
  %442 = icmp eq i8 %441, 41
  br i1 %442, label %443, label %444

443:                                              ; preds = %436
  store i8 0, ptr %440, align 1, !tbaa !56
  br label %444

444:                                              ; preds = %443, %436
  %445 = call i32 @label_index(ptr noundef %1, ptr noundef nonnull %5, ptr noundef nonnull %3, ptr noundef nonnull %8) #44, !range !67
  %446 = icmp eq i32 %445, 0
  br i1 %446, label %452, label %447

447:                                              ; preds = %444
  %448 = load i32, ptr %3, align 4, !tbaa !16
  %449 = add nsw i32 %448, 1
  %450 = load ptr, ptr %418, align 8, !tbaa !77
  %451 = getelementptr inbounds i32, ptr %450, i64 %421
  store i32 %449, ptr %451, align 4, !tbaa !16
  br label %453

452:                                              ; preds = %444
  call void (ptr, ...) @fatal(ptr noundef nonnull @.str.47) #43
  br label %453

453:                                              ; preds = %452, %447
  %454 = add nuw nsw i64 %421, 1
  %455 = load i32, ptr %407, align 8, !tbaa !74
  %456 = sext i32 %455 to i64
  %457 = icmp slt i64 %454, %456
  br i1 %457, label %420, label %458

458:                                              ; preds = %453, %411, %403
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8) #45
  br label %378

459:                                              ; preds = %397
  %460 = load i32, ptr @echo_unknown_commands, align 4, !tbaa !16
  %461 = icmp eq i32 %460, 0
  br i1 %461, label %465, label %462

462:                                              ; preds = %459
  %463 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.48, i32 noundef 46, ptr noundef nonnull %5) #44
  %464 = load i32, ptr @echo_unknown_commands, align 4, !tbaa !16
  br label %465

465:                                              ; preds = %462, %459
  %466 = phi i32 [ %464, %462 ], [ 0, %459 ]
  %467 = load ptr, ptr @stdout, align 8, !tbaa !13
  call void @skip_line(ptr noundef %0, ptr noundef %467, i32 noundef %466) #44
  br label %378

468:                                              ; preds = %18
  %469 = call i32 @ungetc(i32 noundef %19, ptr noundef %0) #44
  %470 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %471 = icmp eq ptr %470, null
  br i1 %471, label %472, label %481

472:                                              ; preds = %468
  %473 = load i32, ptr @echo_comments, align 4, !tbaa !16
  %474 = icmp eq i32 %473, 0
  br i1 %474, label %478, label %475

475:                                              ; preds = %472
  %476 = call i32 @putchar(i32 noundef 35) #44
  %477 = load i32, ptr @echo_comments, align 4, !tbaa !16
  br label %478

478:                                              ; preds = %475, %472
  %479 = phi i32 [ %477, %475 ], [ 0, %472 ]
  %480 = load ptr, ptr @stdout, align 8, !tbaa !13
  call void @skip_line(ptr noundef %0, ptr noundef %480, i32 noundef %479) #44
  br label %378

481:                                              ; preds = %468
  %482 = load ptr, ptr %1, align 8, !tbaa !61
  %483 = icmp eq ptr %482, null
  br i1 %483, label %484, label %491

484:                                              ; preds = %481
  %485 = load i32, ptr @cube, align 8, !tbaa !14
  %486 = call ptr (i32, i32, ...) @sf_new(i32 noundef 10, i32 noundef %485) #43
  store ptr %486, ptr %1, align 8, !tbaa !61
  %487 = load i32, ptr @cube, align 8, !tbaa !14
  %488 = call ptr (i32, i32, ...) @sf_new(i32 noundef 10, i32 noundef %487) #43
  store ptr %488, ptr %16, align 8, !tbaa !62
  %489 = load i32, ptr @cube, align 8, !tbaa !14
  %490 = call ptr (i32, i32, ...) @sf_new(i32 noundef 10, i32 noundef %489) #43
  store ptr %490, ptr %17, align 8, !tbaa !63
  br label %491

491:                                              ; preds = %484, %481
  call void @read_cube(ptr noundef %0, ptr noundef nonnull %1) #44
  br label %378

492:                                              ; preds = %138, %18
  call void @llvm.lifetime.end.p0(i64 256, ptr nonnull %5) #45
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4) #45
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %3) #45
  ret void
}

; Function Attrs: nofree nounwind optsize
declare noundef i32 @ungetc(i32 noundef, ptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare noundef i64 @fwrite(ptr nocapture noundef, i64 noundef, i64 noundef, ptr nocapture noundef) local_unnamed_addr #10

; Function Attrs: nofree nounwind optsize uwtable
define internal i32 @PLA_labels(ptr nocapture noundef %0) #14 {
  %2 = load i32, ptr @cube, align 8, !tbaa !14
  %3 = sext i32 %2 to i64
  %4 = shl nsw i64 %3, 3
  %5 = tail call noalias ptr @malloc(i64 noundef %4) #42
  %6 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 7
  store ptr %5, ptr %6, align 8, !tbaa !58
  %7 = icmp sgt i32 %2, 0
  br i1 %7, label %8, label %16

8:                                                ; preds = %1
  %9 = zext i32 %2 to i64
  br label %10

10:                                               ; preds = %10, %8
  %11 = phi i64 [ 0, %8 ], [ %14, %10 ]
  %12 = load ptr, ptr %6, align 8, !tbaa !58
  %13 = getelementptr inbounds ptr, ptr %12, i64 %11
  store ptr null, ptr %13, align 8, !tbaa !13
  %14 = add nuw nsw i64 %11, 1
  %15 = icmp eq i64 %14, %9
  br i1 %15, label %16, label %10

16:                                               ; preds = %10, %1
  ret i32 undef
}

; Function Attrs: nofree nounwind willreturn memory(argmem: read)
declare i32 @bcmp(ptr nocapture, ptr nocapture, i64) local_unnamed_addr #19

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: read)
declare i64 @strlen(ptr nocapture noundef) local_unnamed_addr #17

; Function Attrs: nofree nounwind optsize
declare noundef i32 @sprintf(ptr noalias nocapture noundef writeonly, ptr nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: nounwind optsize uwtable
define internal i32 @read_symbolic(ptr nocapture noundef %0, ptr nocapture noundef readonly %1, ptr noundef %2, ptr nocapture noundef writeonly %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5) #45
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6) #45
  %7 = tail call noalias dereferenceable_or_null(40) ptr @malloc(i64 noundef 40) #42
  %8 = getelementptr inbounds %struct.symbolic_struct, ptr %7, i64 0, i32 4
  store ptr null, ptr %8, align 8, !tbaa !69
  store ptr null, ptr %7, align 8, !tbaa !78
  %9 = getelementptr inbounds %struct.symbolic_struct, ptr %7, i64 0, i32 1
  store i32 0, ptr %9, align 8, !tbaa !79
  %10 = getelementptr inbounds %struct.symbolic_struct, ptr %7, i64 0, i32 2
  store ptr null, ptr %10, align 8, !tbaa !80
  %11 = getelementptr inbounds %struct.symbolic_struct, ptr %7, i64 0, i32 3
  store i32 0, ptr %11, align 8, !tbaa !81
  br label %12

12:                                               ; preds = %21, %4
  %13 = phi i32 [ 0, %4 ], [ %30, %21 ]
  %14 = phi ptr [ null, %4 ], [ %22, %21 ]
  %15 = call ptr @get_word(ptr noundef %0, ptr noundef %2) #44
  %16 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %2, ptr noundef nonnull dereferenceable(2) @.str.67) #48
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %31, label %18

18:                                               ; preds = %12
  %19 = call i32 @label_index(ptr noundef %1, ptr noundef %2, ptr noundef nonnull %6, ptr noundef nonnull %5) #44, !range !67
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %46, label %21

21:                                               ; preds = %18
  %22 = call noalias dereferenceable_or_null(16) ptr @malloc(i64 noundef 16) #42
  %23 = load i32, ptr %6, align 4, !tbaa !16
  store i32 %23, ptr %22, align 8, !tbaa !82
  %24 = load i32, ptr %5, align 4, !tbaa !16
  %25 = getelementptr inbounds %struct.symbolic_list_struct, ptr %22, i64 0, i32 1
  store i32 %24, ptr %25, align 4, !tbaa !84
  %26 = getelementptr inbounds %struct.symbolic_list_struct, ptr %22, i64 0, i32 2
  store ptr null, ptr %26, align 8, !tbaa !85
  %27 = icmp eq ptr %14, null
  %28 = getelementptr inbounds %struct.symbolic_list_struct, ptr %14, i64 0, i32 2
  %29 = select i1 %27, ptr %7, ptr %28
  store ptr %22, ptr %29, align 8, !tbaa !13
  %30 = add nuw nsw i32 %13, 1
  store i32 %30, ptr %9, align 8, !tbaa !79
  br label %12

31:                                               ; preds = %37, %12
  %32 = phi i32 [ %44, %37 ], [ 0, %12 ]
  %33 = phi ptr [ %38, %37 ], [ null, %12 ]
  %34 = call ptr @get_word(ptr noundef %0, ptr noundef %2) #44
  %35 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %2, ptr noundef nonnull dereferenceable(2) @.str.67) #48
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %45, label %37

37:                                               ; preds = %31
  %38 = call noalias dereferenceable_or_null(16) ptr @malloc(i64 noundef 16) #42
  %39 = call ptr @util_strsav(ptr noundef %2) #43
  store ptr %39, ptr %38, align 8, !tbaa !86
  %40 = getelementptr inbounds %struct.symbolic_label_struct, ptr %38, i64 0, i32 1
  store ptr null, ptr %40, align 8, !tbaa !88
  %41 = icmp eq ptr %33, null
  %42 = getelementptr inbounds %struct.symbolic_label_struct, ptr %33, i64 0, i32 1
  %43 = select i1 %41, ptr %10, ptr %42
  store ptr %38, ptr %43, align 8, !tbaa !13
  %44 = add nuw nsw i32 %32, 1
  store i32 %44, ptr %11, align 8, !tbaa !81
  br label %31

45:                                               ; preds = %31
  store ptr %7, ptr %3, align 8, !tbaa !13
  br label %46

46:                                               ; preds = %45, %18
  %47 = phi i32 [ 1, %45 ], [ 0, %18 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6) #45
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5) #45
  ret i32 %47
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: readwrite)
declare ptr @strcpy(ptr noalias noundef returned writeonly, ptr noalias nocapture noundef readonly) local_unnamed_addr #20

; Function Attrs: nofree nounwind optsize uwtable
define internal i32 @label_index(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr noundef %2, ptr nocapture noundef writeonly %3) #14 {
  %5 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !58
  %7 = icmp eq ptr %6, null
  br i1 %7, label %18, label %8

8:                                                ; preds = %4
  %9 = load ptr, ptr %6, align 8, !tbaa !13
  %10 = icmp eq ptr %9, null
  br i1 %10, label %18, label %11

11:                                               ; preds = %8
  %12 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %13 = icmp sgt i32 %12, 0
  br i1 %13, label %14, label %51

14:                                               ; preds = %11
  %15 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %16 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8
  %17 = zext i32 %12 to i64
  br label %23

18:                                               ; preds = %8, %4
  %19 = tail call i32 (ptr, ptr, ...) @__isoc99_sscanf(ptr noundef %1, ptr noundef nonnull @.str.10.17, ptr noundef %2) #43
  %20 = icmp eq i32 %19, 1
  br i1 %20, label %21, label %51

21:                                               ; preds = %18
  %22 = load i32, ptr %2, align 4, !tbaa !16
  br label %49

23:                                               ; preds = %46, %14
  %24 = phi i64 [ 0, %14 ], [ %47, %46 ]
  %25 = getelementptr inbounds i32, ptr %15, i64 %24
  %26 = load i32, ptr %25, align 4, !tbaa !16
  %27 = icmp sgt i32 %26, 0
  br i1 %27, label %28, label %46

28:                                               ; preds = %23
  %29 = getelementptr inbounds i32, ptr %16, i64 %24
  %30 = load i32, ptr %29, align 4, !tbaa !16
  %31 = sext i32 %30 to i64
  %32 = zext i32 %26 to i64
  br label %33

33:                                               ; preds = %43, %28
  %34 = phi i64 [ 0, %28 ], [ %44, %43 ]
  %35 = add nsw i64 %34, %31
  %36 = getelementptr inbounds ptr, ptr %6, i64 %35
  %37 = load ptr, ptr %36, align 8, !tbaa !13
  %38 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %37, ptr noundef nonnull dereferenceable(1) %1) #48
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %43

40:                                               ; preds = %33
  %.lcssa1 = phi i64 [ %24, %33 ]
  %.lcssa = phi i64 [ %34, %33 ]
  %41 = trunc i64 %.lcssa1 to i32
  %42 = trunc i64 %.lcssa to i32
  store i32 %41, ptr %2, align 4, !tbaa !16
  br label %49

43:                                               ; preds = %33
  %44 = add nuw nsw i64 %34, 1
  %45 = icmp eq i64 %44, %32
  br i1 %45, label %46, label %33

46:                                               ; preds = %43, %23
  %47 = add nuw nsw i64 %24, 1
  %48 = icmp eq i64 %47, %17
  br i1 %48, label %51, label %23

49:                                               ; preds = %40, %21
  %50 = phi i32 [ %42, %40 ], [ %22, %21 ]
  store i32 %50, ptr %3, align 4, !tbaa !16
  br label %51

51:                                               ; preds = %49, %46, %18, %11
  %52 = phi i32 [ 0, %18 ], [ 0, %11 ], [ 1, %49 ], [ 0, %46 ]
  ret i32 %52
}

; Function Attrs: nofree nounwind optsize
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #5

; Function Attrs: nofree nounwind optsize
declare noundef i32 @__isoc99_sscanf(ptr nocapture noundef readonly, ptr nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: nounwind optsize uwtable
define internal i32 @read_pla(ptr noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, ptr nocapture noundef writeonly %4) #0 {
  %6 = alloca %struct.cost_struct, align 4
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %6) #45
  %7 = tail call noalias dereferenceable_or_null(80) ptr @malloc(i64 noundef 80) #42
  %8 = getelementptr inbounds %struct.PLA_t, ptr %7, i64 0, i32 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(36) %7, i8 0, i64 32, i1 false)
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %8, i8 0, i64 40, i1 false)
  store ptr %7, ptr %4, align 8, !tbaa !13
  %9 = getelementptr inbounds %struct.PLA_t, ptr %7, i64 0, i32 4
  store i32 %3, ptr %9, align 8, !tbaa !60
  %10 = tail call i64 (...) @util_cpu_time() #43
  tail call void @parse_pla(ptr noundef %0, ptr noundef %7) #44
  %11 = load ptr, ptr %7, align 8, !tbaa !61
  %12 = icmp eq ptr %11, null
  br i1 %12, label %221, label %13

13:                                               ; preds = %5
  %14 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %15 = icmp sgt i32 %14, 0
  br i1 %15, label %16, label %27

16:                                               ; preds = %13
  %17 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  br label %18

18:                                               ; preds = %18, %16
  %19 = phi i64 [ 0, %16 ], [ %23, %18 ]
  %20 = getelementptr inbounds i32, ptr %17, i64 %19
  %21 = load i32, ptr %20, align 4, !tbaa !16
  %22 = tail call i32 @llvm.abs.i32(i32 %21, i1 true)
  store i32 %22, ptr %20, align 4, !tbaa !16
  %23 = add nuw nsw i64 %19, 1
  %24 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %25 = sext i32 %24 to i64
  %26 = icmp slt i64 %23, %25
  br i1 %26, label %18, label %27

27:                                               ; preds = %18, %13
  %28 = phi i32 [ %14, %13 ], [ %24, %18 ]
  %29 = load i32, ptr @kiss, align 4, !tbaa !16
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %88, label %31

31:                                               ; preds = %27
  %32 = add nsw i32 %28, -3
  %33 = add nsw i32 %28, -2
  %34 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %35 = sext i32 %32 to i64
  %36 = getelementptr inbounds i32, ptr %34, i64 %35
  %37 = load i32, ptr %36, align 4, !tbaa !16
  %38 = sext i32 %33 to i64
  %39 = getelementptr inbounds i32, ptr %34, i64 %38
  %40 = load i32, ptr %39, align 4, !tbaa !16
  %41 = icmp eq i32 %37, %40
  br i1 %41, label %42, label %46

42:                                               ; preds = %31
  %43 = icmp sgt i32 %37, 0
  br i1 %43, label %44, label %76

44:                                               ; preds = %42
  %45 = getelementptr inbounds %struct.PLA_t, ptr %7, i64 0, i32 7
  br label %51

46:                                               ; preds = %31
  %47 = load ptr, ptr @stderr, align 8, !tbaa !13
  %48 = tail call i64 @fwrite(ptr nonnull @.str.49, i64 45, i64 1, ptr %47) #50
  %49 = load ptr, ptr @stderr, align 8, !tbaa !13
  %50 = tail call i64 @fwrite(ptr nonnull @.str.50, i64 41, i64 1, ptr %49) #50
  br label %221

51:                                               ; preds = %51, %44
  %52 = phi i32 [ 0, %44 ], [ %69, %51 ]
  %53 = load ptr, ptr %45, align 8, !tbaa !58
  %54 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %55 = getelementptr inbounds i32, ptr %54, i64 %35
  %56 = load i32, ptr %55, align 4, !tbaa !16
  %57 = add nsw i32 %56, %52
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds ptr, ptr %53, i64 %58
  %60 = load ptr, ptr %59, align 8, !tbaa !13
  %61 = tail call ptr @util_strsav(ptr noundef %60) #43
  %62 = load ptr, ptr %45, align 8, !tbaa !58
  %63 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %64 = getelementptr inbounds i32, ptr %63, i64 %38
  %65 = load i32, ptr %64, align 4, !tbaa !16
  %66 = add nsw i32 %65, %52
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds ptr, ptr %62, i64 %67
  store ptr %61, ptr %68, align 8, !tbaa !13
  %69 = add nuw nsw i32 %52, 1
  %70 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %71 = getelementptr inbounds i32, ptr %70, i64 %38
  %72 = load i32, ptr %71, align 4, !tbaa !16
  %73 = icmp slt i32 %69, %72
  br i1 %73, label %51, label %74

74:                                               ; preds = %51
  %.lcssa1 = phi ptr [ %70, %51 ]
  %.lcssa = phi i32 [ %72, %51 ]
  %75 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  br label %76

76:                                               ; preds = %74, %42
  %77 = phi i32 [ %28, %42 ], [ %75, %74 ]
  %78 = phi ptr [ %34, %42 ], [ %.lcssa1, %74 ]
  %79 = phi i32 [ %37, %42 ], [ %.lcssa, %74 ]
  %80 = getelementptr inbounds i32, ptr %78, i64 %38
  %81 = add nsw i32 %77, -1
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds i32, ptr %78, i64 %82
  %84 = load i32, ptr %83, align 4, !tbaa !16
  %85 = add nsw i32 %84, %79
  store i32 %85, ptr %80, align 4, !tbaa !16
  %86 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %87 = add nsw i32 %86, -1
  store i32 %87, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  tail call void (...) @setdown_cube() #43
  tail call void (...) @cube_setup() #43
  br label %88

88:                                               ; preds = %76, %27
  %89 = load i32, ptr @trace, align 4, !tbaa !16
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %93, label %91

91:                                               ; preds = %88
  %92 = load ptr, ptr %7, align 8, !tbaa !61
  call void (i64, i32, ptr, ptr, ...) @totals(i64 noundef %10, i32 noundef 0, ptr noundef %92, ptr noundef nonnull %6) #43
  br label %93

93:                                               ; preds = %91, %88
  %94 = call i64 (...) @util_cpu_time() #43
  %95 = load i32, ptr @pos, align 4, !tbaa !16
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %97, label %106

97:                                               ; preds = %93
  %98 = load ptr, ptr %8, align 8, !tbaa !72
  %99 = icmp eq ptr %98, null
  br i1 %99, label %100, label %106

100:                                              ; preds = %97
  %101 = getelementptr inbounds %struct.PLA_t, ptr %7, i64 0, i32 9
  %102 = load ptr, ptr %101, align 8, !tbaa !71
  %103 = icmp eq ptr %102, null
  %104 = icmp eq i32 %2, 0
  %105 = and i1 %104, %103
  br i1 %105, label %116, label %106

106:                                              ; preds = %100, %97, %93
  %107 = load i32, ptr %9, align 8, !tbaa !60
  switch i32 %107, label %116 [
    i32 1, label %108
    i32 3, label %108
  ]

108:                                              ; preds = %106, %106
  %109 = getelementptr inbounds %struct.PLA_t, ptr %7, i64 0, i32 2
  %110 = load ptr, ptr %109, align 8, !tbaa !63
  call void (ptr, ...) @sf_free(ptr noundef %110) #43
  %111 = load ptr, ptr %7, align 8, !tbaa !61
  %112 = getelementptr inbounds %struct.PLA_t, ptr %7, i64 0, i32 1
  %113 = load ptr, ptr %112, align 8, !tbaa !62
  %114 = call ptr (ptr, ptr, ...) @cube2list(ptr noundef %111, ptr noundef %113) #43
  %115 = call ptr (ptr, ...) @complement(ptr noundef %114) #43
  store ptr %115, ptr %109, align 8, !tbaa !63
  br label %143

116:                                              ; preds = %106, %100
  %117 = phi i1 [ false, %106 ], [ true, %100 ]
  %118 = icmp ne i32 %1, 0
  %119 = load i32, ptr %9, align 8, !tbaa !60
  %120 = icmp eq i32 %119, 5
  %121 = select i1 %118, i1 %120, i1 false
  br i1 %121, label %122, label %134

122:                                              ; preds = %116
  %123 = getelementptr inbounds %struct.PLA_t, ptr %7, i64 0, i32 1
  %124 = load ptr, ptr %123, align 8, !tbaa !62
  call void (ptr, ...) @sf_free(ptr noundef %124) #43
  %125 = load ptr, ptr %7, align 8, !tbaa !61
  %126 = getelementptr inbounds %struct.PLA_t, ptr %7, i64 0, i32 2
  %127 = load ptr, ptr %126, align 8, !tbaa !63
  %128 = call ptr (ptr, ptr, ...) @sf_join(ptr noundef %125, ptr noundef %127) #43
  %129 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %130 = add nsw i32 %129, -1
  %131 = call ptr (ptr, i32, ...) @d1merge(ptr noundef %128, i32 noundef %130) #43
  %132 = call ptr (ptr, ...) @cube1list(ptr noundef %131) #43
  %133 = call ptr (ptr, ...) @complement(ptr noundef %132) #43
  store ptr %133, ptr %123, align 8, !tbaa !62
  call void (ptr, ...) @sf_free(ptr noundef %131) #43
  br label %143

134:                                              ; preds = %116
  switch i32 %119, label %143 [
    i32 4, label %135
    i32 6, label %135
  ]

135:                                              ; preds = %134, %134
  %136 = load ptr, ptr %7, align 8, !tbaa !61
  call void (ptr, ...) @sf_free(ptr noundef %136) #43
  %137 = getelementptr inbounds %struct.PLA_t, ptr %7, i64 0, i32 1
  %138 = load ptr, ptr %137, align 8, !tbaa !62
  %139 = getelementptr inbounds %struct.PLA_t, ptr %7, i64 0, i32 2
  %140 = load ptr, ptr %139, align 8, !tbaa !63
  %141 = call ptr (ptr, ptr, ...) @cube2list(ptr noundef %138, ptr noundef %140) #43
  %142 = call ptr (ptr, ...) @complement(ptr noundef %141) #43
  store ptr %142, ptr %7, align 8, !tbaa !61
  br label %143

143:                                              ; preds = %135, %134, %122, %108
  %144 = phi i1 [ %117, %134 ], [ %117, %122 ], [ %117, %135 ], [ false, %108 ]
  %145 = load i32, ptr @trace, align 4, !tbaa !16
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %150, label %147

147:                                              ; preds = %143
  %148 = getelementptr inbounds %struct.PLA_t, ptr %7, i64 0, i32 2
  %149 = load ptr, ptr %148, align 8, !tbaa !63
  call void (i64, i32, ptr, ptr, ...) @totals(i64 noundef %94, i32 noundef 1, ptr noundef %149, ptr noundef nonnull %6) #43
  br label %150

150:                                              ; preds = %147, %143
  %151 = load i32, ptr @pos, align 4, !tbaa !16
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %175, label %153

153:                                              ; preds = %150
  %154 = load ptr, ptr %7, align 8, !tbaa !61
  %155 = getelementptr inbounds %struct.PLA_t, ptr %7, i64 0, i32 2
  %156 = load ptr, ptr %155, align 8, !tbaa !63
  store ptr %156, ptr %7, align 8, !tbaa !61
  store ptr %154, ptr %155, align 8, !tbaa !63
  %157 = load i32, ptr @cube, align 8, !tbaa !14
  %158 = icmp slt i32 %157, 33
  %159 = add nsw i32 %157, -1
  %160 = lshr i32 %159, 3
  %161 = and i32 %160, 536870908
  %162 = add nuw nsw i32 %161, 8
  %163 = select i1 %158, i32 8, i32 %162
  %164 = zext i32 %163 to i64
  %165 = call noalias ptr @malloc(i64 noundef %164) #42
  %166 = call ptr (ptr, i32, ...) @set_clear(ptr noundef %165, i32 noundef %157) #43
  store ptr %166, ptr %8, align 8, !tbaa !72
  %167 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %168 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %169 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %170 = add nsw i32 %169, -1
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds ptr, ptr %168, i64 %171
  %173 = load ptr, ptr %172, align 8, !tbaa !13
  %174 = call ptr (ptr, ptr, ptr, ...) @set_diff(ptr noundef %166, ptr noundef %167, ptr noundef %173) #43
  br label %180

175:                                              ; preds = %150
  %176 = load ptr, ptr %8, align 8, !tbaa !72
  %177 = icmp eq ptr %176, null
  br i1 %177, label %180, label %178

178:                                              ; preds = %175
  %179 = call ptr (ptr, ...) @set_phase(ptr noundef nonnull %7) #43
  br label %180

180:                                              ; preds = %178, %175, %153
  %181 = getelementptr inbounds %struct.PLA_t, ptr %7, i64 0, i32 6
  %182 = load ptr, ptr %181, align 8, !tbaa !73
  %183 = icmp eq ptr %182, null
  br i1 %183, label %185, label %184

184:                                              ; preds = %180
  call void (ptr, ...) @set_pair(ptr noundef nonnull %7) #43
  br label %185

185:                                              ; preds = %184, %180
  %186 = getelementptr inbounds %struct.PLA_t, ptr %7, i64 0, i32 8
  %187 = load ptr, ptr %186, align 8, !tbaa !68
  %188 = icmp eq ptr %187, null
  br i1 %188, label %198, label %189

189:                                              ; preds = %185
  %190 = call i64 (...) @util_cpu_time() #43
  %191 = call i32 (ptr, ...) @map_symbolic(ptr noundef nonnull %7) #43
  %192 = load i32, ptr @trace, align 4, !tbaa !16
  %193 = icmp eq i32 %192, 0
  br i1 %193, label %198, label %194

194:                                              ; preds = %189
  %195 = load ptr, ptr %7, align 8, !tbaa !61
  %196 = call i64 (...) @util_cpu_time() #43
  %197 = sub nsw i64 %196, %190
  call void (ptr, ptr, i64, ...) @print_trace(ptr noundef %195, ptr noundef nonnull @.str.51, i64 noundef %197) #43
  br label %198

198:                                              ; preds = %194, %189, %185
  %199 = getelementptr inbounds %struct.PLA_t, ptr %7, i64 0, i32 9
  %200 = load ptr, ptr %199, align 8, !tbaa !71
  %201 = icmp eq ptr %200, null
  br i1 %201, label %221, label %202

202:                                              ; preds = %198
  %203 = call i64 (...) @util_cpu_time() #43
  %204 = call i32 (ptr, ...) @map_output_symbolic(ptr noundef nonnull %7) #43
  %205 = load i32, ptr @trace, align 4, !tbaa !16
  %206 = icmp eq i32 %205, 0
  br i1 %206, label %211, label %207

207:                                              ; preds = %202
  %208 = load ptr, ptr %7, align 8, !tbaa !61
  %209 = call i64 (...) @util_cpu_time() #43
  %210 = sub nsw i64 %209, %203
  call void (ptr, ptr, i64, ...) @print_trace(ptr noundef %208, ptr noundef nonnull @.str.52, i64 noundef %210) #43
  br label %211

211:                                              ; preds = %207, %202
  br i1 %144, label %221, label %212

212:                                              ; preds = %211
  %213 = getelementptr inbounds %struct.PLA_t, ptr %7, i64 0, i32 2
  %214 = load ptr, ptr %213, align 8, !tbaa !63
  call void (ptr, ...) @sf_free(ptr noundef %214) #43
  %215 = call i64 (...) @util_cpu_time() #43
  %216 = load ptr, ptr %7, align 8, !tbaa !61
  %217 = getelementptr inbounds %struct.PLA_t, ptr %7, i64 0, i32 1
  %218 = load ptr, ptr %217, align 8, !tbaa !62
  %219 = call ptr (ptr, ptr, ...) @cube2list(ptr noundef %216, ptr noundef %218) #43
  %220 = call ptr (ptr, ...) @complement(ptr noundef %219) #43
  store ptr %220, ptr %213, align 8, !tbaa !63
  call void (i64, i32, ptr, ptr, ...) @totals(i64 noundef %215, i32 noundef 1, ptr noundef %220, ptr noundef nonnull %6) #43
  br label %221

221:                                              ; preds = %212, %211, %198, %46, %5
  %222 = phi i32 [ -1, %46 ], [ -1, %5 ], [ 1, %211 ], [ 1, %212 ], [ 1, %198 ]
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %6) #45
  ret i32 %222
}

; Function Attrs: nounwind optsize uwtable
define internal void @PLA_summary(ptr nocapture noundef readonly %0) #0 {
  %2 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 3
  %3 = load ptr, ptr %2, align 8, !tbaa !89
  %4 = tail call ptr @strrchr(ptr noundef nonnull dereferenceable(1) %3, i32 noundef 47) #48
  %5 = icmp eq ptr %4, null
  %6 = getelementptr inbounds i8, ptr %4, i64 1
  %7 = select i1 %5, ptr %3, ptr %6
  %8 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.53, ptr noundef %7) #44
  %9 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %10 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %11 = add nsw i32 %10, -1
  %12 = icmp eq i32 %9, %11
  br i1 %12, label %13, label %19

13:                                               ; preds = %1
  %14 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %15 = sext i32 %9 to i64
  %16 = getelementptr inbounds i32, ptr %14, i64 %15
  %17 = load i32, ptr %16, align 4, !tbaa !16
  %18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.54, i32 noundef %9, i32 noundef %17) #44
  br label %38

19:                                               ; preds = %1
  %20 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.55, i32 noundef %10, i32 noundef %9) #44
  %21 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %22 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %23 = icmp slt i32 %21, %22
  br i1 %23, label %24, label %36

24:                                               ; preds = %19
  %25 = sext i32 %21 to i64
  br label %26

26:                                               ; preds = %26, %24
  %27 = phi i64 [ %25, %24 ], [ %32, %26 ]
  %28 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %29 = getelementptr inbounds i32, ptr %28, i64 %27
  %30 = load i32, ptr %29, align 4, !tbaa !16
  %31 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.56, i32 noundef %30) #44
  %32 = add nsw i64 %27, 1
  %33 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %34 = sext i32 %33 to i64
  %35 = icmp slt i64 %32, %34
  br i1 %35, label %26, label %36

36:                                               ; preds = %26, %19
  %37 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.19)
  br label %38

38:                                               ; preds = %36, %13
  %39 = load ptr, ptr %0, align 8, !tbaa !61
  %40 = tail call ptr (ptr, ...) @print_cost(ptr noundef %39) #43
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.58, ptr noundef %40) #44
  %42 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 2
  %43 = load ptr, ptr %42, align 8, !tbaa !63
  %44 = tail call ptr (ptr, ...) @print_cost(ptr noundef %43) #43
  %45 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.59, ptr noundef %44) #44
  %46 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 1
  %47 = load ptr, ptr %46, align 8, !tbaa !62
  %48 = tail call ptr (ptr, ...) @print_cost(ptr noundef %47) #43
  %49 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.60, ptr noundef %48) #44
  %50 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 5
  %51 = load ptr, ptr %50, align 8, !tbaa !72
  %52 = icmp eq ptr %51, null
  br i1 %52, label %56, label %53

53:                                               ; preds = %38
  %54 = tail call ptr (ptr, ...) @pc1(ptr noundef nonnull %51) #43
  %55 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.61, ptr noundef %54) #44
  br label %56

56:                                               ; preds = %53, %38
  %57 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 6
  %58 = load ptr, ptr %57, align 8, !tbaa !73
  %59 = icmp eq ptr %58, null
  br i1 %59, label %84, label %60

60:                                               ; preds = %56
  %61 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.62) #44
  %62 = load ptr, ptr %57, align 8, !tbaa !73
  %63 = load i32, ptr %62, align 8, !tbaa !74
  %64 = icmp sgt i32 %63, 0
  br i1 %64, label %65, label %82

65:                                               ; preds = %65, %60
  %66 = phi i64 [ %77, %65 ], [ 0, %60 ]
  %67 = phi ptr [ %78, %65 ], [ %62, %60 ]
  %68 = getelementptr inbounds %struct.pair_struct, ptr %67, i64 0, i32 1
  %69 = load ptr, ptr %68, align 8, !tbaa !76
  %70 = getelementptr inbounds i32, ptr %69, i64 %66
  %71 = load i32, ptr %70, align 4, !tbaa !16
  %72 = getelementptr inbounds %struct.pair_struct, ptr %67, i64 0, i32 2
  %73 = load ptr, ptr %72, align 8, !tbaa !77
  %74 = getelementptr inbounds i32, ptr %73, i64 %66
  %75 = load i32, ptr %74, align 4, !tbaa !16
  %76 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.63, i32 noundef %71, i32 noundef %75) #44
  %77 = add nuw nsw i64 %66, 1
  %78 = load ptr, ptr %57, align 8, !tbaa !73
  %79 = load i32, ptr %78, align 8, !tbaa !74
  %80 = sext i32 %79 to i64
  %81 = icmp slt i64 %77, %80
  br i1 %81, label %65, label %82

82:                                               ; preds = %65, %60
  %83 = tail call i32 @putchar(i32 10)
  br label %84

84:                                               ; preds = %82, %56
  %85 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 8
  %86 = load ptr, ptr %85, align 8, !tbaa !68
  %87 = icmp eq ptr %86, null
  br i1 %87, label %105, label %88

88:                                               ; preds = %100, %84
  %89 = phi ptr [ %103, %100 ], [ %86, %84 ]
  %90 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.65) #44
  %91 = load ptr, ptr %89, align 8, !tbaa !13
  %92 = icmp eq ptr %91, null
  br i1 %92, label %100, label %93

93:                                               ; preds = %93, %88
  %94 = phi ptr [ %98, %93 ], [ %91, %88 ]
  %95 = load i32, ptr %94, align 8, !tbaa !82
  %96 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.56, i32 noundef %95) #44
  %97 = getelementptr inbounds %struct.symbolic_list_struct, ptr %94, i64 0, i32 2
  %98 = load ptr, ptr %97, align 8, !tbaa !13
  %99 = icmp eq ptr %98, null
  br i1 %99, label %100, label %93

100:                                              ; preds = %93, %88
  %101 = tail call i32 @putchar(i32 10)
  %102 = getelementptr inbounds %struct.symbolic_struct, ptr %89, i64 0, i32 4
  %103 = load ptr, ptr %102, align 8, !tbaa !69
  %104 = icmp eq ptr %103, null
  br i1 %104, label %105, label %88

105:                                              ; preds = %100, %84
  %106 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 9
  %107 = load ptr, ptr %106, align 8, !tbaa !71
  %108 = icmp eq ptr %107, null
  br i1 %108, label %127, label %109

109:                                              ; preds = %122, %105
  %110 = phi ptr [ %125, %122 ], [ %107, %105 ]
  %111 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.66) #44
  %112 = load ptr, ptr %110, align 8, !tbaa !13
  %113 = icmp eq ptr %112, null
  br i1 %113, label %122, label %114

114:                                              ; preds = %114, %109
  %115 = phi ptr [ %120, %114 ], [ %112, %109 ]
  %116 = getelementptr inbounds %struct.symbolic_list_struct, ptr %115, i64 0, i32 1
  %117 = load i32, ptr %116, align 4, !tbaa !84
  %118 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.56, i32 noundef %117) #44
  %119 = getelementptr inbounds %struct.symbolic_list_struct, ptr %115, i64 0, i32 2
  %120 = load ptr, ptr %119, align 8, !tbaa !13
  %121 = icmp eq ptr %120, null
  br i1 %121, label %122, label %114

122:                                              ; preds = %114, %109
  %123 = tail call i32 @putchar(i32 10)
  %124 = getelementptr inbounds %struct.symbolic_struct, ptr %110, i64 0, i32 4
  %125 = load ptr, ptr %124, align 8, !tbaa !69
  %126 = icmp eq ptr %125, null
  br i1 %126, label %127, label %109

127:                                              ; preds = %122, %105
  %128 = load ptr, ptr @stdout, align 8, !tbaa !13
  %129 = tail call i32 @fflush(ptr noundef %128) #44
  ret void
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: read)
declare ptr @strrchr(ptr noundef, i32 noundef) local_unnamed_addr #17

; Function Attrs: nofree nounwind optsize
declare noundef i32 @fflush(ptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write, argmem: none, inaccessiblemem: readwrite) uwtable
define internal noalias ptr @new_PLA() #6 {
  %1 = tail call noalias dereferenceable_or_null(80) ptr @malloc(i64 noundef 80) #42
  %2 = getelementptr inbounds %struct.PLA_t, ptr %1, i64 0, i32 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(36) %1, i8 0, i64 36, i1 false)
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %2, i8 0, i64 40, i1 false)
  ret ptr %1
}

; Function Attrs: nounwind optsize uwtable
define internal void @free_PLA(ptr nocapture noundef %0) #0 {
  %2 = load ptr, ptr %0, align 8, !tbaa !61
  %3 = icmp eq ptr %2, null
  br i1 %3, label %5, label %4

4:                                                ; preds = %1
  tail call void (ptr, ...) @sf_free(ptr noundef nonnull %2) #43
  br label %5

5:                                                ; preds = %4, %1
  %6 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 2
  %7 = load ptr, ptr %6, align 8, !tbaa !63
  %8 = icmp eq ptr %7, null
  br i1 %8, label %10, label %9

9:                                                ; preds = %5
  tail call void (ptr, ...) @sf_free(ptr noundef nonnull %7) #43
  br label %10

10:                                               ; preds = %9, %5
  %11 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 1
  %12 = load ptr, ptr %11, align 8, !tbaa !62
  %13 = icmp eq ptr %12, null
  br i1 %13, label %15, label %14

14:                                               ; preds = %10
  tail call void (ptr, ...) @sf_free(ptr noundef nonnull %12) #43
  br label %15

15:                                               ; preds = %14, %10
  %16 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 5
  %17 = load ptr, ptr %16, align 8, !tbaa !72
  %18 = icmp eq ptr %17, null
  br i1 %18, label %20, label %19

19:                                               ; preds = %15
  tail call void @free(ptr noundef nonnull %17) #43
  store ptr null, ptr %16, align 8, !tbaa !72
  br label %20

20:                                               ; preds = %19, %15
  %21 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 6
  %22 = load ptr, ptr %21, align 8, !tbaa !73
  %23 = icmp eq ptr %22, null
  br i1 %23, label %41, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %struct.pair_struct, ptr %22, i64 0, i32 1
  %26 = load ptr, ptr %25, align 8, !tbaa !76
  %27 = icmp eq ptr %26, null
  br i1 %27, label %31, label %28

28:                                               ; preds = %24
  tail call void @free(ptr noundef nonnull %26) #43
  %29 = load ptr, ptr %21, align 8, !tbaa !73
  %30 = getelementptr inbounds %struct.pair_struct, ptr %29, i64 0, i32 1
  store ptr null, ptr %30, align 8, !tbaa !76
  br label %31

31:                                               ; preds = %28, %24
  %32 = phi ptr [ %29, %28 ], [ %22, %24 ]
  %33 = getelementptr inbounds %struct.pair_struct, ptr %32, i64 0, i32 2
  %34 = load ptr, ptr %33, align 8, !tbaa !77
  %35 = icmp eq ptr %34, null
  br i1 %35, label %39, label %36

36:                                               ; preds = %31
  tail call void @free(ptr noundef nonnull %34) #43
  %37 = load ptr, ptr %21, align 8, !tbaa !73
  %38 = getelementptr inbounds %struct.pair_struct, ptr %37, i64 0, i32 2
  store ptr null, ptr %38, align 8, !tbaa !77
  br label %39

39:                                               ; preds = %36, %31
  %40 = phi ptr [ %37, %36 ], [ %32, %31 ]
  tail call void @free(ptr noundef nonnull %40) #43
  store ptr null, ptr %21, align 8, !tbaa !73
  br label %41

41:                                               ; preds = %39, %20
  %42 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 7
  %43 = load ptr, ptr %42, align 8, !tbaa !58
  %44 = icmp eq ptr %43, null
  br i1 %44, label %69, label %45

45:                                               ; preds = %41
  %46 = load i32, ptr @cube, align 8, !tbaa !14
  %47 = icmp sgt i32 %46, 0
  br i1 %47, label %48, label %67

48:                                               ; preds = %59, %45
  %49 = phi i32 [ %60, %59 ], [ %46, %45 ]
  %50 = phi i64 [ %61, %59 ], [ 0, %45 ]
  %51 = load ptr, ptr %42, align 8, !tbaa !58
  %52 = getelementptr inbounds ptr, ptr %51, i64 %50
  %53 = load ptr, ptr %52, align 8, !tbaa !13
  %54 = icmp eq ptr %53, null
  br i1 %54, label %59, label %55

55:                                               ; preds = %48
  tail call void @free(ptr noundef nonnull %53) #43
  %56 = load ptr, ptr %42, align 8, !tbaa !58
  %57 = getelementptr inbounds ptr, ptr %56, i64 %50
  store ptr null, ptr %57, align 8, !tbaa !13
  %58 = load i32, ptr @cube, align 8, !tbaa !14
  br label %59

59:                                               ; preds = %55, %48
  %60 = phi i32 [ %49, %48 ], [ %58, %55 ]
  %61 = add nuw nsw i64 %50, 1
  %62 = sext i32 %60 to i64
  %63 = icmp slt i64 %61, %62
  br i1 %63, label %48, label %64

64:                                               ; preds = %59
  %65 = load ptr, ptr %42, align 8, !tbaa !58
  %66 = icmp eq ptr %65, null
  br i1 %66, label %69, label %67

67:                                               ; preds = %64, %45
  %68 = phi ptr [ %65, %64 ], [ %43, %45 ]
  tail call void @free(ptr noundef nonnull %68) #43
  store ptr null, ptr %42, align 8, !tbaa !58
  br label %69

69:                                               ; preds = %67, %64, %41
  %70 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 3
  %71 = load ptr, ptr %70, align 8, !tbaa !89
  %72 = icmp eq ptr %71, null
  br i1 %72, label %74, label %73

73:                                               ; preds = %69
  tail call void @free(ptr noundef nonnull %71) #43
  store ptr null, ptr %70, align 8, !tbaa !89
  br label %74

74:                                               ; preds = %73, %69
  %75 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 8
  %76 = load ptr, ptr %75, align 8, !tbaa !68
  %77 = icmp eq ptr %76, null
  br i1 %77, label %91, label %78

78:                                               ; preds = %87, %74
  %79 = phi ptr [ %89, %87 ], [ %76, %74 ]
  %80 = load ptr, ptr %79, align 8, !tbaa !78
  %81 = icmp eq ptr %80, null
  br i1 %81, label %87, label %82

82:                                               ; preds = %82, %78
  %83 = phi ptr [ %85, %82 ], [ %80, %78 ]
  %84 = getelementptr inbounds %struct.symbolic_list_struct, ptr %83, i64 0, i32 2
  %85 = load ptr, ptr %84, align 8, !tbaa !85
  tail call void @free(ptr noundef nonnull %83) #43
  %86 = icmp eq ptr %85, null
  br i1 %86, label %87, label %82

87:                                               ; preds = %82, %78
  %88 = getelementptr inbounds %struct.symbolic_struct, ptr %79, i64 0, i32 4
  %89 = load ptr, ptr %88, align 8, !tbaa !69
  tail call void @free(ptr noundef %79) #43
  %90 = icmp eq ptr %89, null
  br i1 %90, label %91, label %78

91:                                               ; preds = %87, %74
  store ptr null, ptr %75, align 8, !tbaa !68
  %92 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 9
  %93 = load ptr, ptr %92, align 8, !tbaa !71
  %94 = icmp eq ptr %93, null
  br i1 %94, label %108, label %95

95:                                               ; preds = %104, %91
  %96 = phi ptr [ %106, %104 ], [ %93, %91 ]
  %97 = load ptr, ptr %96, align 8, !tbaa !78
  %98 = icmp eq ptr %97, null
  br i1 %98, label %104, label %99

99:                                               ; preds = %99, %95
  %100 = phi ptr [ %102, %99 ], [ %97, %95 ]
  %101 = getelementptr inbounds %struct.symbolic_list_struct, ptr %100, i64 0, i32 2
  %102 = load ptr, ptr %101, align 8, !tbaa !85
  tail call void @free(ptr noundef nonnull %100) #43
  %103 = icmp eq ptr %102, null
  br i1 %103, label %104, label %99

104:                                              ; preds = %99, %95
  %105 = getelementptr inbounds %struct.symbolic_struct, ptr %96, i64 0, i32 4
  %106 = load ptr, ptr %105, align 8, !tbaa !69
  tail call void @free(ptr noundef %96) #43
  %107 = icmp eq ptr %106, null
  br i1 %107, label %108, label %95

108:                                              ; preds = %104, %91
  tail call void @free(ptr noundef %0) #43
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @unravel_range(ptr noundef %0, i32 noundef %1, i32 noundef %2) #0 {
  %4 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 11), align 8, !tbaa !7
  %5 = getelementptr inbounds ptr, ptr %4, i64 1
  %6 = load ptr, ptr %5, align 8, !tbaa !13
  %7 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 13), align 8, !tbaa !52
  %8 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %6, ptr noundef %7) #43
  %9 = icmp sgt i32 %1, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %3
  %11 = zext i32 %1 to i64
  br label %18

12:                                               ; preds = %18, %3
  %13 = add i32 %2, 1
  %14 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %36

16:                                               ; preds = %12
  %17 = sext i32 %13 to i64
  br label %26

18:                                               ; preds = %18, %10
  %19 = phi i64 [ 0, %10 ], [ %24, %18 ]
  %20 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %21 = getelementptr inbounds ptr, ptr %20, i64 %19
  %22 = load ptr, ptr %21, align 8, !tbaa !13
  %23 = tail call ptr (ptr, ptr, ptr, ...) @set_or(ptr noundef %6, ptr noundef %6, ptr noundef %22) #43
  %24 = add nuw nsw i64 %19, 1
  %25 = icmp eq i64 %24, %11
  br i1 %25, label %12, label %18

26:                                               ; preds = %26, %16
  %27 = phi i64 [ %17, %16 ], [ %32, %26 ]
  %28 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %29 = getelementptr inbounds ptr, ptr %28, i64 %27
  %30 = load ptr, ptr %29, align 8, !tbaa !13
  %31 = tail call ptr (ptr, ptr, ptr, ...) @set_or(ptr noundef %6, ptr noundef %6, ptr noundef %30) #43
  %32 = add nsw i64 %27, 1
  %33 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %34 = sext i32 %33 to i64
  %35 = icmp slt i64 %32, %34
  br i1 %35, label %26, label %36

36:                                               ; preds = %26, %12
  %37 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %38 = load ptr, ptr %37, align 8, !tbaa !33
  %39 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %40 = load i32, ptr %39, align 4, !tbaa !31
  %41 = load i32, ptr %0, align 8, !tbaa !34
  %42 = mul nsw i32 %41, %40
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds i32, ptr %38, i64 %43
  %45 = icmp sgt i32 %42, 0
  br i1 %45, label %46, label %79

46:                                               ; preds = %36
  %47 = icmp sgt i32 %1, %2
  %48 = sext i32 %1 to i64
  br label %49

49:                                               ; preds = %72, %46
  %50 = phi i32 [ %41, %46 ], [ %73, %72 ]
  %51 = phi ptr [ %38, %46 ], [ %77, %72 ]
  %52 = phi i32 [ 0, %46 ], [ %75, %72 ]
  br i1 %47, label %72, label %53

53:                                               ; preds = %65, %49
  %54 = phi i64 [ %67, %65 ], [ %48, %49 ]
  %55 = phi i32 [ %66, %65 ], [ 1, %49 ]
  %56 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %57 = getelementptr inbounds ptr, ptr %56, i64 %54
  %58 = load ptr, ptr %57, align 8, !tbaa !13
  %59 = tail call i32 (ptr, ptr, ...) @set_dist(ptr noundef %51, ptr noundef %58) #43
  %60 = icmp sgt i32 %59, 1
  br i1 %60, label %61, label %65

61:                                               ; preds = %53
  %62 = mul nsw i32 %59, %55
  %63 = icmp sgt i32 %62, 1000000
  br i1 %63, label %64, label %65

64:                                               ; preds = %61
  tail call void (ptr, ...) @fatal(ptr noundef nonnull @.str.23) #43
  br label %65

65:                                               ; preds = %64, %61, %53
  %66 = phi i32 [ %62, %64 ], [ %62, %61 ], [ %55, %53 ]
  %67 = add nsw i64 %54, 1
  %68 = trunc i64 %67 to i32
  %69 = icmp eq i32 %13, %68
  br i1 %69, label %70, label %53

70:                                               ; preds = %65
  %.lcssa = phi i32 [ %66, %65 ]
  %71 = load i32, ptr %0, align 8, !tbaa !34
  br label %72

72:                                               ; preds = %70, %49
  %73 = phi i32 [ %50, %49 ], [ %71, %70 ]
  %74 = phi i32 [ 1, %49 ], [ %.lcssa, %70 ]
  %75 = add nsw i32 %74, %52
  %76 = sext i32 %73 to i64
  %77 = getelementptr inbounds i32, ptr %51, i64 %76
  %78 = icmp ult ptr %77, %44
  br i1 %78, label %49, label %79

79:                                               ; preds = %72, %36
  %80 = phi i32 [ 0, %36 ], [ %75, %72 ]
  %81 = load i32, ptr @cube, align 8, !tbaa !14
  %82 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef %80, i32 noundef %81) #43
  %83 = load ptr, ptr %37, align 8, !tbaa !33
  %84 = load i32, ptr %39, align 4, !tbaa !31
  %85 = load i32, ptr %0, align 8, !tbaa !34
  %86 = mul nsw i32 %85, %84
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds i32, ptr %83, i64 %87
  %89 = icmp sgt i32 %86, 0
  br i1 %89, label %90, label %231

90:                                               ; preds = %79
  %91 = icmp sgt i32 %1, %2
  %92 = sext i32 %1 to i64
  %93 = getelementptr inbounds %struct.set_family, ptr %82, i64 0, i32 3
  %94 = getelementptr inbounds %struct.set_family, ptr %82, i64 0, i32 5
  br label %95

95:                                               ; preds = %226, %90
  %96 = phi ptr [ %83, %90 ], [ %229, %226 ]
  %97 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 11), align 8, !tbaa !7
  %98 = load ptr, ptr %97, align 8, !tbaa !13
  %99 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %98, ptr noundef %6) #43
  br i1 %91, label %120, label %100

100:                                              ; preds = %115, %95
  %101 = phi i64 [ %117, %115 ], [ %92, %95 ]
  %102 = phi i32 [ %116, %115 ], [ 1, %95 ]
  %103 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %104 = getelementptr inbounds ptr, ptr %103, i64 %101
  %105 = load ptr, ptr %104, align 8, !tbaa !13
  %106 = tail call i32 (ptr, ptr, ...) @set_dist(ptr noundef %96, ptr noundef %105) #43
  %107 = icmp slt i32 %106, 2
  br i1 %107, label %108, label %113

108:                                              ; preds = %100
  %109 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %110 = getelementptr inbounds ptr, ptr %109, i64 %101
  %111 = load ptr, ptr %110, align 8, !tbaa !13
  %112 = tail call ptr (ptr, ptr, ptr, ...) @set_or(ptr noundef %98, ptr noundef %98, ptr noundef %111) #43
  br label %115

113:                                              ; preds = %100
  %114 = mul nsw i32 %106, %102
  br label %115

115:                                              ; preds = %113, %108
  %116 = phi i32 [ %102, %108 ], [ %114, %113 ]
  %117 = add nsw i64 %101, 1
  %118 = trunc i64 %117 to i32
  %119 = icmp eq i32 %13, %118
  br i1 %119, label %120, label %100

120:                                              ; preds = %115, %95
  %121 = phi i32 [ 1, %95 ], [ %116, %115 ]
  %122 = tail call ptr (ptr, ptr, ptr, ...) @set_and(ptr noundef %98, ptr noundef %96, ptr noundef %98) #43
  %123 = load i32, ptr %93, align 4, !tbaa !31
  %124 = add nsw i32 %123, %121
  store i32 %124, ptr %93, align 4, !tbaa !31
  %125 = load ptr, ptr %94, align 8, !tbaa !33
  %126 = load i32, ptr %82, align 8, !tbaa !34
  %127 = add nsw i32 %123, -1
  %128 = mul nsw i32 %126, %127
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds i32, ptr %125, i64 %129
  %131 = sext i32 %126 to i64
  %132 = getelementptr inbounds i32, ptr %130, i64 %131
  %133 = mul nsw i32 %126, %124
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds i32, ptr %125, i64 %134
  %136 = icmp ult ptr %132, %135
  br i1 %136, label %138, label %137

137:                                              ; preds = %150, %120
  br i1 %91, label %226, label %155

138:                                              ; preds = %150, %120
  %139 = phi ptr [ %153, %150 ], [ %132, %120 ]
  %140 = load i32, ptr %98, align 4, !tbaa !16
  %141 = and i32 %140, 1023
  %142 = zext i32 %141 to i64
  br label %143

143:                                              ; preds = %143, %138
  %144 = phi i64 [ %148, %143 ], [ %142, %138 ]
  %145 = getelementptr inbounds i32, ptr %98, i64 %144
  %146 = load i32, ptr %145, align 4, !tbaa !16
  %147 = getelementptr inbounds i32, ptr %139, i64 %144
  store i32 %146, ptr %147, align 4, !tbaa !16
  %148 = add nsw i64 %144, -1
  %149 = icmp eq i64 %144, 0
  br i1 %149, label %150, label %143

150:                                              ; preds = %143
  %151 = load i32, ptr %82, align 8, !tbaa !34
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds i32, ptr %139, i64 %152
  %154 = icmp ult ptr %153, %135
  br i1 %154, label %138, label %137

155:                                              ; preds = %221, %137
  %156 = phi i64 [ %223, %221 ], [ %92, %137 ]
  %157 = phi i32 [ %222, %221 ], [ %121, %137 ]
  %158 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %159 = getelementptr inbounds ptr, ptr %158, i64 %156
  %160 = load ptr, ptr %159, align 8, !tbaa !13
  %161 = tail call i32 (ptr, ptr, ...) @set_dist(ptr noundef %96, ptr noundef %160) #43
  %162 = icmp sgt i32 %161, 1
  br i1 %162, label %163, label %221

163:                                              ; preds = %155
  %164 = sdiv i32 %157, %161
  %165 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %166 = getelementptr inbounds i32, ptr %165, i64 %156
  %167 = load i32, ptr %166, align 4, !tbaa !16
  %168 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  %169 = getelementptr inbounds i32, ptr %168, i64 %156
  %170 = load i32, ptr %169, align 4, !tbaa !16
  %171 = icmp sgt i32 %167, %170
  br i1 %171, label %221, label %172

172:                                              ; preds = %163
  %173 = icmp sgt i32 %164, 0
  br label %174

174:                                              ; preds = %215, %172
  %175 = phi i32 [ %170, %172 ], [ %216, %215 ]
  %176 = phi i32 [ %170, %172 ], [ %217, %215 ]
  %177 = phi i32 [ 0, %172 ], [ %218, %215 ]
  %178 = phi i32 [ %167, %172 ], [ %219, %215 ]
  %179 = ashr i32 %178, 5
  %180 = add nsw i32 %179, 1
  %181 = sext i32 %180 to i64
  %182 = getelementptr inbounds i32, ptr %96, i64 %181
  %183 = load i32, ptr %182, align 4, !tbaa !16
  %184 = and i32 %178, 31
  %185 = shl nuw i32 1, %184
  %186 = and i32 %185, %183
  %187 = icmp eq i32 %186, 0
  br i1 %187, label %215, label %188

188:                                              ; preds = %174
  %189 = icmp slt i32 %177, %121
  br i1 %189, label %190, label %212

190:                                              ; preds = %207, %188
  %191 = phi i32 [ %208, %207 ], [ %177, %188 ]
  br i1 %173, label %192, label %207

192:                                              ; preds = %190
  %193 = load ptr, ptr %94, align 8, !tbaa !33
  %194 = add i32 %191, %123
  %195 = getelementptr i32, ptr %193, i64 %181
  br label %196

196:                                              ; preds = %196, %192
  %197 = phi i32 [ 0, %192 ], [ %205, %196 ]
  %198 = load i32, ptr %82, align 8, !tbaa !34
  %199 = add i32 %194, %197
  %200 = mul nsw i32 %198, %199
  %201 = sext i32 %200 to i64
  %202 = getelementptr i32, ptr %195, i64 %201
  %203 = load i32, ptr %202, align 4, !tbaa !16
  %204 = or i32 %203, %185
  store i32 %204, ptr %202, align 4, !tbaa !16
  %205 = add nuw nsw i32 %197, 1
  %206 = icmp eq i32 %205, %164
  br i1 %206, label %207, label %196

207:                                              ; preds = %196, %190
  %208 = add nsw i32 %191, %157
  %209 = icmp slt i32 %208, %121
  br i1 %209, label %190, label %210

210:                                              ; preds = %207
  %211 = load i32, ptr %169, align 4, !tbaa !16
  br label %212

212:                                              ; preds = %210, %188
  %213 = phi i32 [ %211, %210 ], [ %175, %188 ]
  %214 = add nsw i32 %177, %164
  br label %215

215:                                              ; preds = %212, %174
  %216 = phi i32 [ %213, %212 ], [ %175, %174 ]
  %217 = phi i32 [ %213, %212 ], [ %176, %174 ]
  %218 = phi i32 [ %214, %212 ], [ %177, %174 ]
  %219 = add nsw i32 %178, 1
  %220 = icmp slt i32 %178, %217
  br i1 %220, label %174, label %221

221:                                              ; preds = %215, %163, %155
  %222 = phi i32 [ %157, %155 ], [ %164, %163 ], [ %164, %215 ]
  %223 = add nsw i64 %156, 1
  %224 = trunc i64 %223 to i32
  %225 = icmp eq i32 %13, %224
  br i1 %225, label %226, label %155

226:                                              ; preds = %221, %137
  %227 = load i32, ptr %0, align 8, !tbaa !34
  %228 = sext i32 %227 to i64
  %229 = getelementptr inbounds i32, ptr %96, i64 %228
  %230 = icmp ult ptr %229, %88
  br i1 %230, label %95, label %231

231:                                              ; preds = %226, %79
  tail call void (ptr, ...) @sf_free(ptr noundef nonnull %0) #43
  ret ptr %82
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @unravel(ptr noundef %0, i32 noundef %1) #0 {
  %3 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %4 = add nsw i32 %3, -1
  %5 = tail call ptr @unravel_range(ptr noundef %0, i32 noundef %1, i32 noundef %4) #44
  ret ptr %5
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @lex_sort(ptr noundef %0) #0 {
  %2 = tail call ptr (ptr, ptr, ...) @sf_sort(ptr noundef %0, ptr noundef nonnull @lex_order) #43
  %3 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %4 = load i32, ptr %3, align 4, !tbaa !31
  %5 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 1
  %6 = load i32, ptr %5, align 4, !tbaa !44
  %7 = tail call ptr (ptr, i32, i32, ...) @sf_unlist(ptr noundef %2, i32 noundef %4, i32 noundef %6) #43
  tail call void (ptr, ...) @sf_free(ptr noundef %0) #43
  ret ptr %7
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @mini_sort(ptr noundef %0, ptr nocapture noundef %1) #0 {
  %3 = load i32, ptr @cube, align 8, !tbaa !14
  %4 = tail call ptr (ptr, ...) @sf_count(ptr noundef %0) #43
  %5 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %6 = load ptr, ptr %5, align 8, !tbaa !33
  %7 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %8 = load i32, ptr %7, align 4, !tbaa !31
  %9 = load i32, ptr %0, align 8, !tbaa !34
  %10 = mul nsw i32 %9, %8
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds i32, ptr %6, i64 %11
  %13 = icmp sgt i32 %10, 0
  br i1 %13, label %14, label %50

14:                                               ; preds = %2
  %15 = icmp sgt i32 %3, 0
  %16 = zext i32 %3 to i64
  br label %17

17:                                               ; preds = %40, %14
  %18 = phi ptr [ %6, %14 ], [ %48, %40 ]
  br i1 %15, label %19, label %40

19:                                               ; preds = %36, %17
  %20 = phi i64 [ %38, %36 ], [ 0, %17 ]
  %21 = phi i32 [ %37, %36 ], [ 0, %17 ]
  %22 = trunc i64 %20 to i32
  %23 = lshr i32 %22, 5
  %24 = add nuw nsw i32 %23, 1
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i32, ptr %18, i64 %25
  %27 = load i32, ptr %26, align 4, !tbaa !16
  %28 = and i32 %22, 31
  %29 = shl nuw i32 1, %28
  %30 = and i32 %27, %29
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %36, label %32

32:                                               ; preds = %19
  %33 = getelementptr inbounds i32, ptr %4, i64 %20
  %34 = load i32, ptr %33, align 4, !tbaa !16
  %35 = add nsw i32 %34, %21
  br label %36

36:                                               ; preds = %32, %19
  %37 = phi i32 [ %35, %32 ], [ %21, %19 ]
  %38 = add nuw nsw i64 %20, 1
  %39 = icmp eq i64 %38, %16
  br i1 %39, label %40, label %19

40:                                               ; preds = %36, %17
  %41 = phi i32 [ 0, %17 ], [ %37, %36 ]
  %42 = load i32, ptr %18, align 4, !tbaa !16
  %43 = and i32 %42, 65535
  %44 = shl i32 %41, 16
  %45 = or i32 %43, %44
  store i32 %45, ptr %18, align 4, !tbaa !16
  %46 = load i32, ptr %0, align 8, !tbaa !34
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i32, ptr %18, i64 %47
  %49 = icmp ult ptr %48, %12
  br i1 %49, label %17, label %50

50:                                               ; preds = %40, %2
  %51 = icmp eq ptr %4, null
  br i1 %51, label %53, label %52

52:                                               ; preds = %50
  tail call void @free(ptr noundef nonnull %4) #43
  br label %53

53:                                               ; preds = %52, %50
  %54 = tail call ptr (ptr, ...) @sf_list(ptr noundef nonnull %0) #43
  %55 = load i32, ptr %7, align 4, !tbaa !31
  %56 = sext i32 %55 to i64
  tail call void @qsort(ptr noundef %54, i64 noundef %56, i64 noundef 8, ptr noundef %1) #43
  %57 = load i32, ptr %7, align 4, !tbaa !31
  %58 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 1
  %59 = load i32, ptr %58, align 4, !tbaa !44
  %60 = tail call ptr (ptr, i32, i32, ...) @sf_unlist(ptr noundef %54, i32 noundef %57, i32 noundef %59) #43
  tail call void (ptr, ...) @sf_free(ptr noundef nonnull %0) #43
  ret ptr %60
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @sort_reduce(ptr noundef %0) #0 {
  %2 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %3 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %4 = load i32, ptr %3, align 4, !tbaa !31
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %62, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %8 = load ptr, ptr %7, align 8, !tbaa !33
  %9 = load i32, ptr %0, align 8, !tbaa !34
  %10 = mul nsw i32 %9, %4
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds i32, ptr %8, i64 %11
  %13 = icmp sgt i32 %10, 0
  br i1 %13, label %14, label %54

14:                                               ; preds = %14, %6
  %15 = phi ptr [ %24, %14 ], [ %8, %6 ]
  %16 = phi ptr [ %21, %14 ], [ null, %6 ]
  %17 = phi i32 [ %20, %14 ], [ -1, %6 ]
  %18 = tail call i32 (ptr, ...) @set_ord(ptr noundef %15) #43
  %19 = icmp sgt i32 %18, %17
  %20 = tail call i32 @llvm.smax.i32(i32 %18, i32 %17)
  %21 = select i1 %19, ptr %15, ptr %16
  %22 = load i32, ptr %0, align 8, !tbaa !34
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds i32, ptr %15, i64 %23
  %25 = icmp ult ptr %24, %12
  br i1 %25, label %14, label %26

26:                                               ; preds = %14
  %.lcssa1 = phi ptr [ %21, %14 ]
  %.lcssa = phi i32 [ %22, %14 ]
  %27 = load ptr, ptr %7, align 8, !tbaa !33
  %28 = load i32, ptr %3, align 4, !tbaa !31
  %29 = mul nsw i32 %.lcssa, %28
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds i32, ptr %27, i64 %30
  %32 = icmp sgt i32 %29, 0
  br i1 %32, label %33, label %54

33:                                               ; preds = %43, %26
  %34 = phi ptr [ %52, %43 ], [ %27, %26 ]
  %35 = load i32, ptr %34, align 4, !tbaa !16
  %36 = and i32 %35, 65535
  store i32 %36, ptr %34, align 4, !tbaa !16
  %37 = tail call i32 (ptr, ptr, ...) @cdist(ptr noundef %.lcssa1, ptr noundef nonnull %34) #43
  %38 = sub nsw i32 %2, %37
  %39 = tail call i32 (ptr, ...) @set_ord(ptr noundef nonnull %34) #43
  %40 = icmp slt i32 %39, 127
  br i1 %40, label %41, label %43

41:                                               ; preds = %33
  %42 = tail call i32 (ptr, ...) @set_ord(ptr noundef nonnull %34) #43
  br label %43

43:                                               ; preds = %41, %33
  %44 = phi i32 [ %42, %41 ], [ 127, %33 ]
  %45 = shl i32 %38, 23
  %46 = shl i32 %44, 16
  %47 = add i32 %46, %45
  %48 = load i32, ptr %34, align 4, !tbaa !16
  %49 = or i32 %47, %48
  store i32 %49, ptr %34, align 4, !tbaa !16
  %50 = load i32, ptr %0, align 8, !tbaa !34
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds i32, ptr %34, i64 %51
  %53 = icmp ult ptr %52, %31
  br i1 %53, label %33, label %54

54:                                               ; preds = %43, %26, %6
  %55 = tail call ptr (ptr, ...) @sf_list(ptr noundef nonnull %0) #43
  %56 = load i32, ptr %3, align 4, !tbaa !31
  %57 = sext i32 %56 to i64
  tail call void @qsort(ptr noundef %55, i64 noundef %57, i64 noundef 8, ptr noundef nonnull @descend) #43
  %58 = load i32, ptr %3, align 4, !tbaa !31
  %59 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 1
  %60 = load i32, ptr %59, align 4, !tbaa !44
  %61 = tail call ptr (ptr, i32, i32, ...) @sf_unlist(ptr noundef %55, i32 noundef %58, i32 noundef %60) #43
  tail call void (ptr, ...) @sf_free(ptr noundef nonnull %0) #43
  br label %62

62:                                               ; preds = %54, %1
  %63 = phi ptr [ %61, %54 ], [ %0, %1 ]
  ret ptr %63
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @random_order(ptr noundef readonly returned %0) #0 {
  %2 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 1
  %3 = load i32, ptr %2, align 4, !tbaa !44
  %4 = icmp slt i32 %3, 33
  %5 = add nsw i32 %3, -1
  %6 = lshr i32 %5, 3
  %7 = and i32 %6, 536870908
  %8 = add nuw nsw i32 %7, 8
  %9 = select i1 %4, i32 8, i32 %8
  %10 = zext i32 %9 to i64
  %11 = tail call noalias ptr @malloc(i64 noundef %10) #42
  %12 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %11, i32 noundef %3) #43
  %13 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %14 = load i32, ptr %13, align 4, !tbaa !31
  %15 = icmp sgt i32 %14, 1
  br i1 %15, label %16, label %46

16:                                               ; preds = %1
  %17 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  br label %18

18:                                               ; preds = %18, %16
  %19 = phi i32 [ %14, %16 ], [ %20, %18 ]
  %20 = add nsw i32 %19, -1
  %21 = mul nsw i32 %20, 23
  %22 = add nsw i32 %21, 997
  %23 = srem i32 %22, %20
  %24 = load ptr, ptr %17, align 8, !tbaa !33
  %25 = load i32, ptr %0, align 8, !tbaa !34
  %26 = mul nsw i32 %25, %23
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i32, ptr %24, i64 %27
  %29 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %12, ptr noundef %28) #43
  %30 = load ptr, ptr %17, align 8, !tbaa !33
  %31 = load i32, ptr %0, align 8, !tbaa !34
  %32 = mul nsw i32 %31, %23
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds i32, ptr %30, i64 %33
  %35 = mul nsw i32 %31, %20
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, ptr %30, i64 %36
  %38 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %34, ptr noundef %37) #43
  %39 = load ptr, ptr %17, align 8, !tbaa !33
  %40 = load i32, ptr %0, align 8, !tbaa !34
  %41 = mul nsw i32 %40, %20
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds i32, ptr %39, i64 %42
  %44 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %43, ptr noundef %12) #43
  %45 = icmp ugt i32 %19, 2
  br i1 %45, label %18, label %46

46:                                               ; preds = %18, %1
  %47 = icmp eq ptr %12, null
  br i1 %47, label %49, label %48

48:                                               ; preds = %46
  tail call void @free(ptr noundef nonnull %12) #43
  br label %49

49:                                               ; preds = %48, %46
  ret ptr %0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @cubelist_partition(ptr noundef %0, ptr nocapture noundef %1, ptr nocapture noundef %2, i32 noundef %3) #0 {
  %5 = getelementptr inbounds ptr, ptr %0, i64 1
  %6 = load ptr, ptr %5, align 8, !tbaa !13
  %7 = ptrtoint ptr %6 to i64
  %8 = ptrtoint ptr %0 to i64
  %9 = sub i64 %7, %8
  %10 = lshr exact i64 %9, 3
  %11 = trunc i64 %10 to i32
  %12 = add i32 %11, -3
  %13 = getelementptr inbounds ptr, ptr %0, i64 2
  %14 = load ptr, ptr %13, align 8, !tbaa !13
  %15 = icmp eq ptr %14, null
  br i1 %15, label %24, label %16

16:                                               ; preds = %16, %4
  %17 = phi ptr [ %22, %16 ], [ %14, %4 ]
  %18 = phi ptr [ %19, %16 ], [ %13, %4 ]
  %19 = getelementptr inbounds ptr, ptr %18, i64 1
  %20 = load i32, ptr %17, align 4, !tbaa !16
  %21 = and i32 %20, -2049
  store i32 %21, ptr %17, align 4, !tbaa !16
  %22 = load ptr, ptr %19, align 8, !tbaa !13
  %23 = icmp eq ptr %22, null
  br i1 %23, label %24, label %16

24:                                               ; preds = %16, %4
  %25 = load i32, ptr %14, align 4, !tbaa !16
  %26 = shl i32 %25, 5
  %27 = and i32 %26, 32736
  %28 = icmp ult i32 %27, 33
  %29 = add nsw i32 %27, -1
  %30 = lshr i32 %29, 3
  %31 = and i32 %30, 536870908
  %32 = add nuw nsw i32 %31, 8
  %33 = select i1 %28, i32 8, i32 %32
  %34 = zext i32 %33 to i64
  %35 = tail call noalias ptr @malloc(i64 noundef %34) #42
  %36 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %35, ptr noundef nonnull %14) #43
  %37 = load ptr, ptr %0, align 8, !tbaa !13
  %38 = load ptr, ptr %13, align 8, !tbaa !13
  %39 = load i32, ptr %38, align 4, !tbaa !16
  %40 = or i32 %39, 2048
  store i32 %40, ptr %38, align 4, !tbaa !16
  %41 = getelementptr inbounds ptr, ptr %0, i64 3
  br label %45

42:                                               ; preds = %83
  %43 = load ptr, ptr %13, align 8, !tbaa !13
  %44 = icmp eq ptr %43, null
  br i1 %44, label %85, label %79

45:                                               ; preds = %79, %24
  %46 = phi ptr [ %38, %24 ], [ %80, %79 ]
  %47 = phi ptr [ %41, %24 ], [ %81, %79 ]
  %48 = phi i32 [ 1, %24 ], [ %75, %79 ]
  %49 = phi i32 [ 0, %24 ], [ %82, %79 ]
  %50 = load i32, ptr %46, align 4, !tbaa !16
  %51 = and i32 %50, 2048
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %73

53:                                               ; preds = %45
  %54 = tail call i32 (ptr, ptr, ptr, ...) @ccommon(ptr noundef nonnull %46, ptr noundef %36, ptr noundef %37) #43
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %73, label %56

56:                                               ; preds = %53
  %57 = load i32, ptr %36, align 4, !tbaa !16
  %58 = and i32 %57, 1023
  %59 = zext i32 %58 to i64
  br label %60

60:                                               ; preds = %60, %56
  %61 = phi i64 [ %67, %60 ], [ %59, %56 ]
  %62 = getelementptr inbounds i32, ptr %36, i64 %61
  %63 = load i32, ptr %62, align 4, !tbaa !16
  %64 = getelementptr inbounds i32, ptr %46, i64 %61
  %65 = load i32, ptr %64, align 4, !tbaa !16
  %66 = and i32 %65, %63
  store i32 %66, ptr %62, align 4, !tbaa !16
  %67 = add nsw i64 %61, -1
  %68 = icmp ugt i64 %61, 1
  br i1 %68, label %60, label %69

69:                                               ; preds = %60
  %70 = load i32, ptr %46, align 4, !tbaa !16
  %71 = or i32 %70, 2048
  store i32 %71, ptr %46, align 4, !tbaa !16
  %72 = add nsw i32 %48, 1
  br label %73

73:                                               ; preds = %69, %53, %45
  %74 = phi i32 [ %49, %45 ], [ 1, %69 ], [ %49, %53 ]
  %75 = phi i32 [ %48, %45 ], [ %72, %69 ], [ %48, %53 ]
  %76 = getelementptr inbounds ptr, ptr %47, i64 1
  %77 = load ptr, ptr %47, align 8, !tbaa !13
  %78 = icmp eq ptr %77, null
  br i1 %78, label %83, label %79

79:                                               ; preds = %73, %42
  %80 = phi ptr [ %77, %73 ], [ %43, %42 ]
  %81 = phi ptr [ %76, %73 ], [ %41, %42 ]
  %82 = phi i32 [ %74, %73 ], [ 0, %42 ]
  br label %45

83:                                               ; preds = %73
  %84 = icmp eq i32 %74, 0
  br i1 %84, label %85, label %42

85:                                               ; preds = %83, %42
  %.lcssa = phi i32 [ %75, %83 ], [ %75, %42 ]
  %86 = icmp eq ptr %36, null
  br i1 %86, label %88, label %87

87:                                               ; preds = %85
  tail call void @free(ptr noundef nonnull %36) #43
  br label %88

88:                                               ; preds = %87, %85
  %89 = icmp eq i32 %3, 0
  br i1 %89, label %93, label %90

90:                                               ; preds = %88
  %91 = sub nsw i32 %12, %.lcssa
  %92 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1.24, i32 noundef %.lcssa, i32 noundef %91) #44
  br label %93

93:                                               ; preds = %90, %88
  %94 = icmp eq i32 %.lcssa, %12
  br i1 %94, label %161, label %95

95:                                               ; preds = %93
  %96 = shl i64 %9, 29
  %97 = ashr exact i64 %96, 29
  %98 = and i64 %97, -8
  %99 = tail call noalias ptr @malloc(i64 noundef %98) #42
  store ptr %99, ptr %1, align 8, !tbaa !13
  %100 = tail call noalias ptr @malloc(i64 noundef %98) #42
  store ptr %100, ptr %2, align 8, !tbaa !13
  %101 = load ptr, ptr %0, align 8, !tbaa !13
  %102 = load i32, ptr %101, align 4, !tbaa !16
  %103 = shl i32 %102, 5
  %104 = and i32 %103, 32736
  %105 = icmp ult i32 %104, 33
  %106 = add nsw i32 %104, -1
  %107 = lshr i32 %106, 3
  %108 = and i32 %107, 536870908
  %109 = add nuw nsw i32 %108, 8
  %110 = select i1 %105, i32 8, i32 %109
  %111 = zext i32 %110 to i64
  %112 = tail call noalias ptr @malloc(i64 noundef %111) #42
  %113 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %112, ptr noundef nonnull %101) #43
  %114 = load ptr, ptr %1, align 8, !tbaa !13
  store ptr %113, ptr %114, align 8, !tbaa !13
  %115 = load ptr, ptr %0, align 8, !tbaa !13
  %116 = load i32, ptr %115, align 4, !tbaa !16
  %117 = shl i32 %116, 5
  %118 = and i32 %117, 32736
  %119 = icmp ult i32 %118, 33
  %120 = add nsw i32 %118, -1
  %121 = lshr i32 %120, 3
  %122 = and i32 %121, 536870908
  %123 = add nuw nsw i32 %122, 8
  %124 = select i1 %119, i32 8, i32 %123
  %125 = zext i32 %124 to i64
  %126 = tail call noalias ptr @malloc(i64 noundef %125) #42
  %127 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %126, ptr noundef nonnull %115) #43
  %128 = load ptr, ptr %2, align 8, !tbaa !13
  store ptr %127, ptr %128, align 8, !tbaa !13
  %129 = load ptr, ptr %1, align 8, !tbaa !13
  %130 = getelementptr inbounds ptr, ptr %129, i64 2
  %131 = load ptr, ptr %2, align 8, !tbaa !13
  %132 = getelementptr inbounds ptr, ptr %131, i64 2
  %133 = load ptr, ptr %13, align 8, !tbaa !13
  %134 = icmp eq ptr %133, null
  br i1 %134, label %152, label %135

135:                                              ; preds = %135, %95
  %136 = phi ptr [ %150, %135 ], [ %133, %95 ]
  %137 = phi ptr [ %149, %135 ], [ %41, %95 ]
  %138 = phi ptr [ %148, %135 ], [ %132, %95 ]
  %139 = phi ptr [ %146, %135 ], [ %130, %95 ]
  %140 = load i32, ptr %136, align 4, !tbaa !16
  %141 = and i32 %140, 2048
  %142 = icmp eq i32 %141, 0
  %143 = select i1 %142, ptr %138, ptr %139
  %144 = lshr exact i32 %141, 11
  %145 = zext i32 %144 to i64
  %146 = getelementptr inbounds ptr, ptr %139, i64 %145
  %147 = zext i1 %142 to i64
  %148 = getelementptr inbounds ptr, ptr %138, i64 %147
  store ptr %136, ptr %143, align 8, !tbaa !13
  %149 = getelementptr inbounds ptr, ptr %137, i64 1
  %150 = load ptr, ptr %137, align 8, !tbaa !13
  %151 = icmp eq ptr %150, null
  br i1 %151, label %152, label %135

152:                                              ; preds = %135, %95
  %153 = phi ptr [ %130, %95 ], [ %146, %135 ]
  %154 = phi ptr [ %132, %95 ], [ %148, %135 ]
  %155 = getelementptr inbounds ptr, ptr %153, i64 1
  store ptr null, ptr %153, align 8, !tbaa !13
  %156 = load ptr, ptr %1, align 8, !tbaa !13
  %157 = getelementptr inbounds ptr, ptr %156, i64 1
  store ptr %155, ptr %157, align 8, !tbaa !13
  %158 = getelementptr inbounds ptr, ptr %154, i64 1
  store ptr null, ptr %154, align 8, !tbaa !13
  %159 = load ptr, ptr %2, align 8, !tbaa !13
  %160 = getelementptr inbounds ptr, ptr %159, i64 1
  store ptr %158, ptr %160, align 8, !tbaa !13
  br label %161

161:                                              ; preds = %152, %93
  %162 = sub nsw i32 %12, %.lcssa
  ret i32 %162
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @cof_output(ptr nocapture noundef readonly %0, i32 noundef %1) #0 {
  %3 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %4 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds ptr, ptr %3, i64 %5
  %7 = load ptr, ptr %6, align 8, !tbaa !13
  %8 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %9 = load i32, ptr %8, align 4, !tbaa !31
  %10 = load i32, ptr @cube, align 8, !tbaa !14
  %11 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef %9, i32 noundef %10) #43
  %12 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %13 = load ptr, ptr %12, align 8, !tbaa !33
  %14 = load i32, ptr %8, align 4, !tbaa !31
  %15 = load i32, ptr %0, align 8, !tbaa !34
  %16 = mul nsw i32 %15, %14
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds i32, ptr %13, i64 %17
  %19 = icmp sgt i32 %16, 0
  br i1 %19, label %20, label %69

20:                                               ; preds = %2
  %21 = ashr i32 %1, 5
  %22 = add nsw i32 %21, 1
  %23 = sext i32 %22 to i64
  %24 = and i32 %1, 31
  %25 = shl nuw i32 1, %24
  %26 = getelementptr inbounds %struct.set_family, ptr %11, i64 0, i32 5
  %27 = getelementptr inbounds %struct.set_family, ptr %11, i64 0, i32 3
  br label %28

28:                                               ; preds = %64, %20
  %29 = phi i32 [ %15, %20 ], [ %65, %64 ]
  %30 = phi ptr [ %13, %20 ], [ %67, %64 ]
  %31 = getelementptr inbounds i32, ptr %30, i64 %23
  %32 = load i32, ptr %31, align 4, !tbaa !16
  %33 = and i32 %32, %25
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %64, label %35

35:                                               ; preds = %28
  %36 = load ptr, ptr %26, align 8, !tbaa !33
  %37 = load i32, ptr %11, align 8, !tbaa !34
  %38 = load i32, ptr %27, align 4, !tbaa !31
  %39 = add nsw i32 %38, 1
  store i32 %39, ptr %27, align 4, !tbaa !31
  %40 = mul nsw i32 %38, %37
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, ptr %36, i64 %41
  %43 = load i32, ptr %30, align 4, !tbaa !16
  %44 = and i32 %43, 1023
  %45 = load i32, ptr %42, align 4, !tbaa !16
  %46 = and i32 %45, -1024
  %47 = or i32 %46, %44
  store i32 %47, ptr %42, align 4, !tbaa !16
  %48 = and i32 %43, 1023
  %49 = zext i32 %48 to i64
  br label %50

50:                                               ; preds = %50, %35
  %51 = phi i64 [ %58, %50 ], [ %49, %35 ]
  %52 = getelementptr inbounds i32, ptr %30, i64 %51
  %53 = load i32, ptr %52, align 4, !tbaa !16
  %54 = getelementptr inbounds i32, ptr %7, i64 %51
  %55 = load i32, ptr %54, align 4, !tbaa !16
  %56 = or i32 %55, %53
  %57 = getelementptr inbounds i32, ptr %42, i64 %51
  store i32 %56, ptr %57, align 4, !tbaa !16
  %58 = add nsw i64 %51, -1
  %59 = icmp ugt i64 %51, 1
  br i1 %59, label %50, label %60

60:                                               ; preds = %50
  %61 = load i32, ptr %42, align 4, !tbaa !16
  %62 = and i32 %61, -32769
  store i32 %62, ptr %42, align 4, !tbaa !16
  %63 = load i32, ptr %0, align 8, !tbaa !34
  br label %64

64:                                               ; preds = %60, %28
  %65 = phi i32 [ %29, %28 ], [ %63, %60 ]
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds i32, ptr %30, i64 %66
  %68 = icmp ult ptr %67, %18
  br i1 %68, label %28, label %69

69:                                               ; preds = %64, %2
  ret ptr %11
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal ptr @uncof_output(ptr noundef readonly returned %0, i32 noundef %1) #21 {
  %3 = icmp eq ptr %0, null
  br i1 %3, label %48, label %4

4:                                                ; preds = %2
  %5 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %6 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds ptr, ptr %5, i64 %7
  %9 = load ptr, ptr %8, align 8, !tbaa !13
  %10 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %11 = load ptr, ptr %10, align 8, !tbaa !33
  %12 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %13 = load i32, ptr %12, align 4, !tbaa !31
  %14 = load i32, ptr %0, align 8, !tbaa !34
  %15 = mul nsw i32 %14, %13
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i32, ptr %11, i64 %16
  %18 = icmp sgt i32 %15, 0
  br i1 %18, label %19, label %48

19:                                               ; preds = %4
  %20 = and i32 %1, 31
  %21 = shl nuw i32 1, %20
  %22 = ashr i32 %1, 5
  %23 = add nsw i32 %22, 1
  %24 = sext i32 %23 to i64
  br label %25

25:                                               ; preds = %40, %19
  %26 = phi ptr [ %11, %19 ], [ %46, %40 ]
  %27 = load i32, ptr %26, align 4, !tbaa !16
  %28 = and i32 %27, 1023
  %29 = zext i32 %28 to i64
  br label %30

30:                                               ; preds = %30, %25
  %31 = phi i64 [ %38, %30 ], [ %29, %25 ]
  %32 = getelementptr inbounds i32, ptr %26, i64 %31
  %33 = load i32, ptr %32, align 4, !tbaa !16
  %34 = getelementptr inbounds i32, ptr %9, i64 %31
  %35 = load i32, ptr %34, align 4, !tbaa !16
  %36 = xor i32 %35, -1
  %37 = and i32 %33, %36
  store i32 %37, ptr %32, align 4, !tbaa !16
  %38 = add nsw i64 %31, -1
  %39 = icmp ugt i64 %31, 1
  br i1 %39, label %30, label %40

40:                                               ; preds = %30
  %41 = getelementptr inbounds i32, ptr %26, i64 %24
  %42 = load i32, ptr %41, align 4, !tbaa !16
  %43 = or i32 %42, %21
  store i32 %43, ptr %41, align 4, !tbaa !16
  %44 = load i32, ptr %0, align 8, !tbaa !34
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i32, ptr %26, i64 %45
  %47 = icmp ult ptr %46, %17
  br i1 %47, label %25, label %48

48:                                               ; preds = %40, %4, %2
  ret ptr %0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @foreach_output_function(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2) #0 {
  %4 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %5 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds i32, ptr %4, i64 %6
  %8 = load i32, ptr %7, align 4, !tbaa !16
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %80

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 2
  %12 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 1
  br label %13

13:                                               ; preds = %71, %10
  %14 = phi i32 [ 0, %10 ], [ %72, %71 ]
  %15 = tail call ptr (...) @new_PLA() #43
  %16 = load ptr, ptr %0, align 8, !tbaa !61
  %17 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %18 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds i32, ptr %17, i64 %19
  %21 = load i32, ptr %20, align 4, !tbaa !16
  %22 = add nsw i32 %21, %14
  %23 = tail call ptr @cof_output(ptr noundef %16, i32 noundef %22) #44
  store ptr %23, ptr %15, align 8, !tbaa !61
  %24 = load ptr, ptr %11, align 8, !tbaa !63
  %25 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %26 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i32, ptr %25, i64 %27
  %29 = load i32, ptr %28, align 4, !tbaa !16
  %30 = add nsw i32 %29, %14
  %31 = tail call ptr @cof_output(ptr noundef %24, i32 noundef %30) #44
  %32 = getelementptr inbounds %struct.PLA_t, ptr %15, i64 0, i32 2
  store ptr %31, ptr %32, align 8, !tbaa !63
  %33 = load ptr, ptr %12, align 8, !tbaa !62
  %34 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %35 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, ptr %34, i64 %36
  %38 = load i32, ptr %37, align 4, !tbaa !16
  %39 = add nsw i32 %38, %14
  %40 = tail call ptr @cof_output(ptr noundef %33, i32 noundef %39) #44
  %41 = getelementptr inbounds %struct.PLA_t, ptr %15, i64 0, i32 1
  store ptr %40, ptr %41, align 8, !tbaa !62
  %42 = tail call i32 (ptr, i32, ...) %1(ptr noundef nonnull %15, i32 noundef %14) #43
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %79, label %44

44:                                               ; preds = %13
  %45 = load ptr, ptr %15, align 8, !tbaa !61
  %46 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %47 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds i32, ptr %46, i64 %48
  %50 = load i32, ptr %49, align 4, !tbaa !16
  %51 = add nsw i32 %50, %14
  %52 = tail call ptr @uncof_output(ptr noundef %45, i32 noundef %51) #44
  store ptr %45, ptr %15, align 8, !tbaa !61
  %53 = load ptr, ptr %32, align 8, !tbaa !63
  %54 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %55 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i32, ptr %54, i64 %56
  %58 = load i32, ptr %57, align 4, !tbaa !16
  %59 = add nsw i32 %58, %14
  %60 = tail call ptr @uncof_output(ptr noundef %53, i32 noundef %59) #44
  store ptr %53, ptr %32, align 8, !tbaa !63
  %61 = load ptr, ptr %41, align 8, !tbaa !62
  %62 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %63 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds i32, ptr %62, i64 %64
  %66 = load i32, ptr %65, align 4, !tbaa !16
  %67 = add nsw i32 %66, %14
  %68 = tail call ptr @uncof_output(ptr noundef %61, i32 noundef %67) #44
  store ptr %61, ptr %41, align 8, !tbaa !62
  %69 = tail call i32 (ptr, i32, ...) %2(ptr noundef nonnull %15, i32 noundef %14) #43
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %79, label %71

71:                                               ; preds = %44
  tail call void (ptr, ...) @free_PLA(ptr noundef nonnull %15) #43
  %72 = add nuw nsw i32 %14, 1
  %73 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %74 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds i32, ptr %73, i64 %75
  %77 = load i32, ptr %76, align 4, !tbaa !16
  %78 = icmp slt i32 %72, %77
  br i1 %78, label %13, label %80

79:                                               ; preds = %44, %13
  %.lcssa = phi ptr [ %15, %44 ], [ %15, %13 ]
  tail call void (ptr, ...) @free_PLA(ptr noundef nonnull %.lcssa) #43
  br label %80

80:                                               ; preds = %79, %71, %3
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal void @so_espresso(ptr nocapture noundef %0, i32 noundef %1) #0 {
  %3 = load ptr, ptr %0, align 8, !tbaa !61
  %4 = getelementptr inbounds %struct.set_family, ptr %3, i64 0, i32 3
  %5 = load i32, ptr %4, align 4, !tbaa !31
  %6 = load i32, ptr @cube, align 8, !tbaa !14
  %7 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef %5, i32 noundef %6) #43
  store ptr %7, ptr @Fmin, align 8, !tbaa !13
  %8 = icmp eq i32 %1, 0
  %9 = select i1 %8, ptr @so_do_espresso, ptr @so_do_exact
  %10 = tail call i32 @foreach_output_function(ptr noundef nonnull %0, ptr noundef nonnull %9, ptr noundef nonnull @so_save) #44
  %11 = load ptr, ptr %0, align 8, !tbaa !61
  tail call void (ptr, ...) @sf_free(ptr noundef %11) #43
  %12 = load ptr, ptr @Fmin, align 8, !tbaa !13
  store ptr %12, ptr %0, align 8, !tbaa !61
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @so_do_espresso(ptr nocapture noundef %0, i32 noundef %1) #0 {
  %3 = alloca [32 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %3) #45
  store i32 1, ptr @skip_make_sparse, align 4, !tbaa !16
  %4 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %3, ptr noundef nonnull dereferenceable(1) @.str.2.26, i32 noundef %1) #43
  %5 = tail call i64 (...) @util_cpu_time() #43
  %6 = load ptr, ptr %0, align 8, !tbaa !61
  %7 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 1
  %8 = load ptr, ptr %7, align 8, !tbaa !62
  %9 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 2
  %10 = load ptr, ptr %9, align 8, !tbaa !63
  %11 = tail call ptr (ptr, ptr, ptr, ...) @espresso(ptr noundef %6, ptr noundef %8, ptr noundef %10) #43
  store ptr %11, ptr %0, align 8, !tbaa !61
  %12 = load i32, ptr @summary, align 4, !tbaa !16
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %17, label %14

14:                                               ; preds = %2
  %15 = tail call i64 (...) @util_cpu_time() #43
  %16 = sub nsw i64 %15, %5
  call void (ptr, ptr, i64, ...) @print_trace(ptr noundef %11, ptr noundef nonnull %3, i64 noundef %16) #43
  br label %17

17:                                               ; preds = %14, %2
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %3) #45
  ret i32 1
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @so_do_exact(ptr nocapture noundef %0, i32 noundef %1) #0 {
  %3 = alloca [32 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %3) #45
  store i32 1, ptr @skip_make_sparse, align 4, !tbaa !16
  %4 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %3, ptr noundef nonnull dereferenceable(1) @.str.3.25, i32 noundef %1) #43
  %5 = tail call i64 (...) @util_cpu_time() #43
  %6 = load ptr, ptr %0, align 8, !tbaa !61
  %7 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 1
  %8 = load ptr, ptr %7, align 8, !tbaa !62
  %9 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 2
  %10 = load ptr, ptr %9, align 8, !tbaa !63
  %11 = tail call ptr (ptr, ptr, ptr, i32, ...) @minimize_exact(ptr noundef %6, ptr noundef %8, ptr noundef %10, i32 noundef 1) #43
  store ptr %11, ptr %0, align 8, !tbaa !61
  %12 = load i32, ptr @summary, align 4, !tbaa !16
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %17, label %14

14:                                               ; preds = %2
  %15 = tail call i64 (...) @util_cpu_time() #43
  %16 = sub nsw i64 %15, %5
  call void (ptr, ptr, i64, ...) @print_trace(ptr noundef %11, ptr noundef nonnull %3, i64 noundef %16) #43
  br label %17

17:                                               ; preds = %14, %2
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %3) #45
  ret i32 1
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @so_save(ptr nocapture noundef %0, i32 %1) #0 {
  %3 = load ptr, ptr @Fmin, align 8, !tbaa !13
  %4 = load ptr, ptr %0, align 8, !tbaa !61
  %5 = tail call ptr (ptr, ptr, ...) @sf_append(ptr noundef %3, ptr noundef %4) #43
  store ptr %5, ptr @Fmin, align 8, !tbaa !13
  store ptr null, ptr %0, align 8, !tbaa !61
  ret i32 1
}

; Function Attrs: nounwind optsize uwtable
define internal void @so_both_espresso(ptr nocapture noundef %0, i32 noundef %1) #0 {
  %3 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %4 = load i32, ptr %3, align 4, !tbaa !16
  %5 = shl i32 %4, 5
  %6 = and i32 %5, 32736
  %7 = icmp ult i32 %6, 33
  %8 = add nsw i32 %6, -1
  %9 = lshr i32 %8, 3
  %10 = and i32 %9, 536870908
  %11 = add nuw nsw i32 %10, 8
  %12 = select i1 %7, i32 8, i32 %11
  %13 = zext i32 %12 to i64
  %14 = tail call noalias ptr @malloc(i64 noundef %13) #42
  %15 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %14, ptr noundef nonnull %3) #43
  store ptr %15, ptr @phase, align 8, !tbaa !13
  %16 = load ptr, ptr %0, align 8, !tbaa !61
  %17 = getelementptr inbounds %struct.set_family, ptr %16, i64 0, i32 3
  %18 = load i32, ptr %17, align 4, !tbaa !31
  %19 = load i32, ptr @cube, align 8, !tbaa !14
  %20 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef %18, i32 noundef %19) #43
  store ptr %20, ptr @Fmin, align 8, !tbaa !13
  %21 = icmp eq i32 %1, 0
  %22 = select i1 %21, ptr @so_both_do_espresso, ptr @so_both_do_exact
  %23 = tail call i32 @foreach_output_function(ptr noundef nonnull %0, ptr noundef nonnull %22, ptr noundef nonnull @so_both_save) #44
  %24 = load ptr, ptr %0, align 8, !tbaa !61
  tail call void (ptr, ...) @sf_free(ptr noundef %24) #43
  %25 = load ptr, ptr @Fmin, align 8, !tbaa !13
  store ptr %25, ptr %0, align 8, !tbaa !61
  %26 = load ptr, ptr @phase, align 8, !tbaa !13
  %27 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 5
  store ptr %26, ptr %27, align 8, !tbaa !72
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @so_both_do_espresso(ptr nocapture noundef %0, i32 noundef %1) #0 {
  %3 = alloca [32 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %3) #45
  %4 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %3, ptr noundef nonnull dereferenceable(1) @.str.2.26, i32 noundef %1) #43
  store i32 1, ptr @skip_make_sparse, align 4, !tbaa !16
  %5 = tail call i64 (...) @util_cpu_time() #43
  %6 = load ptr, ptr %0, align 8, !tbaa !61
  %7 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 1
  %8 = load ptr, ptr %7, align 8, !tbaa !62
  %9 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 2
  %10 = load ptr, ptr %9, align 8, !tbaa !63
  %11 = tail call ptr (ptr, ptr, ptr, ...) @espresso(ptr noundef %6, ptr noundef %8, ptr noundef %10) #43
  store ptr %11, ptr %0, align 8, !tbaa !61
  %12 = load i32, ptr @summary, align 4, !tbaa !16
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %17, label %14

14:                                               ; preds = %2
  %15 = tail call i64 (...) @util_cpu_time() #43
  %16 = sub nsw i64 %15, %5
  call void (ptr, ptr, i64, ...) @print_trace(ptr noundef %11, ptr noundef nonnull %3, i64 noundef %16) #43
  br label %17

17:                                               ; preds = %14, %2
  %18 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %3, ptr noundef nonnull dereferenceable(1) @.str.4.28, i32 noundef %1) #43
  store i32 1, ptr @skip_make_sparse, align 4, !tbaa !16
  %19 = call i64 (...) @util_cpu_time() #43
  %20 = load ptr, ptr %9, align 8, !tbaa !63
  %21 = load ptr, ptr %7, align 8, !tbaa !62
  %22 = load ptr, ptr %0, align 8, !tbaa !61
  %23 = call ptr (ptr, ptr, ptr, ...) @espresso(ptr noundef %20, ptr noundef %21, ptr noundef %22) #43
  store ptr %23, ptr %9, align 8, !tbaa !63
  %24 = load i32, ptr @summary, align 4, !tbaa !16
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %29, label %26

26:                                               ; preds = %17
  %27 = call i64 (...) @util_cpu_time() #43
  %28 = sub nsw i64 %27, %19
  call void (ptr, ptr, i64, ...) @print_trace(ptr noundef %23, ptr noundef nonnull %3, i64 noundef %28) #43
  br label %29

29:                                               ; preds = %26, %17
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %3) #45
  ret i32 1
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @so_both_do_exact(ptr nocapture noundef %0, i32 noundef %1) #0 {
  %3 = alloca [32 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %3) #45
  %4 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %3, ptr noundef nonnull dereferenceable(1) @.str.3.25, i32 noundef %1) #43
  store i32 1, ptr @skip_make_sparse, align 4, !tbaa !16
  %5 = tail call i64 (...) @util_cpu_time() #43
  %6 = load ptr, ptr %0, align 8, !tbaa !61
  %7 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 1
  %8 = load ptr, ptr %7, align 8, !tbaa !62
  %9 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 2
  %10 = load ptr, ptr %9, align 8, !tbaa !63
  %11 = tail call ptr (ptr, ptr, ptr, i32, ...) @minimize_exact(ptr noundef %6, ptr noundef %8, ptr noundef %10, i32 noundef 1) #43
  store ptr %11, ptr %0, align 8, !tbaa !61
  %12 = load i32, ptr @summary, align 4, !tbaa !16
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %17, label %14

14:                                               ; preds = %2
  %15 = tail call i64 (...) @util_cpu_time() #43
  %16 = sub nsw i64 %15, %5
  call void (ptr, ptr, i64, ...) @print_trace(ptr noundef %11, ptr noundef nonnull %3, i64 noundef %16) #43
  br label %17

17:                                               ; preds = %14, %2
  %18 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %3, ptr noundef nonnull dereferenceable(1) @.str.5.27, i32 noundef %1) #43
  store i32 1, ptr @skip_make_sparse, align 4, !tbaa !16
  %19 = call i64 (...) @util_cpu_time() #43
  %20 = load ptr, ptr %9, align 8, !tbaa !63
  %21 = load ptr, ptr %7, align 8, !tbaa !62
  %22 = load ptr, ptr %0, align 8, !tbaa !61
  %23 = call ptr (ptr, ptr, ptr, i32, ...) @minimize_exact(ptr noundef %20, ptr noundef %21, ptr noundef %22, i32 noundef 1) #43
  store ptr %23, ptr %9, align 8, !tbaa !63
  %24 = load i32, ptr @summary, align 4, !tbaa !16
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %29, label %26

26:                                               ; preds = %17
  %27 = call i64 (...) @util_cpu_time() #43
  %28 = sub nsw i64 %27, %19
  call void (ptr, ptr, i64, ...) @print_trace(ptr noundef %23, ptr noundef nonnull %3, i64 noundef %28) #43
  br label %29

29:                                               ; preds = %26, %17
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %3) #45
  ret i32 1
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @so_both_save(ptr nocapture noundef %0, i32 noundef %1) #0 {
  %3 = load ptr, ptr %0, align 8, !tbaa !61
  %4 = getelementptr inbounds %struct.set_family, ptr %3, i64 0, i32 3
  %5 = load i32, ptr %4, align 4, !tbaa !31
  %6 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 2
  %7 = load ptr, ptr %6, align 8, !tbaa !63
  %8 = getelementptr inbounds %struct.set_family, ptr %7, i64 0, i32 3
  %9 = load i32, ptr %8, align 4, !tbaa !31
  %10 = icmp sgt i32 %5, %9
  br i1 %10, label %11, label %29

11:                                               ; preds = %2
  tail call void (ptr, ...) @sf_free(ptr noundef nonnull %3) #43
  %12 = load ptr, ptr %6, align 8, !tbaa !63
  store ptr %12, ptr %0, align 8, !tbaa !61
  %13 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %14 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds i32, ptr %13, i64 %15
  %17 = load i32, ptr %16, align 4, !tbaa !16
  %18 = add nsw i32 %17, %1
  %19 = and i32 %18, 31
  %20 = shl nuw i32 1, %19
  %21 = xor i32 %20, -1
  %22 = load ptr, ptr @phase, align 8, !tbaa !13
  %23 = ashr i32 %18, 5
  %24 = add nsw i32 %23, 1
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i32, ptr %22, i64 %25
  %27 = load i32, ptr %26, align 4, !tbaa !16
  %28 = and i32 %27, %21
  store i32 %28, ptr %26, align 4, !tbaa !16
  br label %31

29:                                               ; preds = %2
  tail call void (ptr, ...) @sf_free(ptr noundef nonnull %7) #43
  %30 = load ptr, ptr %0, align 8, !tbaa !61
  br label %31

31:                                               ; preds = %29, %11
  %32 = phi ptr [ %30, %29 ], [ %12, %11 ]
  store ptr null, ptr %6, align 8
  %33 = load ptr, ptr @Fmin, align 8, !tbaa !13
  %34 = tail call ptr (ptr, ptr, ...) @sf_append(ptr noundef %33, ptr noundef %32) #43
  store ptr %34, ptr @Fmin, align 8, !tbaa !13
  store ptr null, ptr %0, align 8, !tbaa !61
  ret i32 1
}

; Function Attrs: nounwind optsize uwtable
define internal void @cover_cost(ptr noundef %0, ptr nocapture noundef writeonly %1) #0 {
  %3 = tail call ptr (ptr, ...) @cube1list(ptr noundef %0) #43
  tail call void (ptr, ...) @massive_count(ptr noundef %3) #43
  %4 = load ptr, ptr %3, align 8, !tbaa !13
  %5 = icmp eq ptr %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %2
  tail call void @free(ptr noundef nonnull %4) #43
  br label %7

7:                                                ; preds = %6, %2
  tail call void @free(ptr noundef nonnull %3) #43
  %8 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %9 = load i32, ptr %8, align 4, !tbaa !31
  store i32 %9, ptr %1, align 4, !tbaa !90
  %10 = getelementptr inbounds %struct.cost_struct, ptr %1, i64 0, i32 5
  %11 = getelementptr inbounds %struct.cost_struct, ptr %1, i64 0, i32 3
  %12 = getelementptr inbounds %struct.cost_struct, ptr %1, i64 0, i32 2
  %13 = getelementptr inbounds %struct.cost_struct, ptr %1, i64 0, i32 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(20) %13, i8 0, i64 20, i1 false)
  %14 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %15 = icmp sgt i32 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %7
  %17 = load ptr, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 1), align 8, !tbaa !53
  %18 = zext i32 %14 to i64
  br label %30

19:                                               ; preds = %30, %7
  %20 = phi i32 [ 0, %7 ], [ %35, %30 ]
  %21 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %22 = add nsw i32 %21, -1
  %23 = icmp slt i32 %14, %22
  br i1 %23, label %24, label %60

24:                                               ; preds = %19
  %25 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 16), align 8, !tbaa !47
  %26 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8
  %27 = load ptr, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 1), align 8
  %28 = sext i32 %14 to i64
  %29 = sext i32 %22 to i64
  br label %38

30:                                               ; preds = %30, %16
  %31 = phi i64 [ 0, %16 ], [ %36, %30 ]
  %32 = phi i32 [ 0, %16 ], [ %35, %30 ]
  %33 = getelementptr inbounds i32, ptr %17, i64 %31
  %34 = load i32, ptr %33, align 4, !tbaa !16
  %35 = add nsw i32 %32, %34
  store i32 %35, ptr %13, align 4, !tbaa !92
  %36 = add nuw nsw i64 %31, 1
  %37 = icmp eq i64 %36, %18
  br i1 %37, label %19, label %30

38:                                               ; preds = %56, %24
  %39 = phi i64 [ %28, %24 ], [ %58, %56 ]
  %40 = phi i32 [ 0, %24 ], [ %57, %56 ]
  %41 = getelementptr inbounds i32, ptr %25, i64 %39
  %42 = load i32, ptr %41, align 4, !tbaa !16
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %52, label %44

44:                                               ; preds = %38
  %45 = getelementptr inbounds i32, ptr %26, i64 %39
  %46 = load i32, ptr %45, align 4, !tbaa !16
  %47 = mul nsw i32 %46, %9
  %48 = getelementptr inbounds i32, ptr %27, i64 %39
  %49 = load i32, ptr %48, align 4, !tbaa !16
  %50 = sub i32 %47, %49
  %51 = add nsw i32 %50, %40
  br label %56

52:                                               ; preds = %38
  %53 = getelementptr inbounds i32, ptr %27, i64 %39
  %54 = load i32, ptr %53, align 4, !tbaa !16
  %55 = add nsw i32 %40, %54
  br label %56

56:                                               ; preds = %52, %44
  %57 = phi i32 [ %55, %52 ], [ %51, %44 ]
  store i32 %57, ptr %11, align 4, !tbaa !93
  %58 = add nsw i64 %39, 1
  %59 = icmp eq i64 %58, %29
  br i1 %59, label %60, label %38

60:                                               ; preds = %56, %19
  %61 = phi i32 [ 0, %19 ], [ %57, %56 ]
  %62 = icmp eq i32 %14, %21
  br i1 %62, label %73, label %63

63:                                               ; preds = %60
  %64 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %65 = sext i32 %22 to i64
  %66 = getelementptr inbounds i32, ptr %64, i64 %65
  %67 = load i32, ptr %66, align 4, !tbaa !16
  %68 = mul nsw i32 %67, %9
  %69 = load ptr, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 1), align 8, !tbaa !53
  %70 = getelementptr inbounds i32, ptr %69, i64 %65
  %71 = load i32, ptr %70, align 4, !tbaa !16
  %72 = sub nsw i32 %68, %71
  store i32 %72, ptr %12, align 4, !tbaa !94
  br label %73

73:                                               ; preds = %63, %60
  %74 = phi i32 [ %72, %63 ], [ 0, %60 ]
  %75 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %76 = load ptr, ptr %75, align 8, !tbaa !33
  %77 = load i32, ptr %0, align 8, !tbaa !34
  %78 = mul nsw i32 %77, %9
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds i32, ptr %76, i64 %79
  %81 = icmp sgt i32 %78, 0
  br i1 %81, label %82, label %93

82:                                               ; preds = %73
  %83 = sext i32 %77 to i64
  br label %84

84:                                               ; preds = %84, %82
  %85 = phi i32 [ 0, %82 ], [ %90, %84 ]
  %86 = phi ptr [ %76, %82 ], [ %91, %84 ]
  %87 = load i32, ptr %86, align 4, !tbaa !16
  %88 = lshr i32 %87, 15
  %89 = and i32 %88, 1
  %90 = add nuw nsw i32 %89, %85
  store i32 %90, ptr %10, align 4, !tbaa !95
  %91 = getelementptr inbounds i32, ptr %86, i64 %83
  %92 = icmp ult ptr %91, %80
  br i1 %92, label %84, label %93

93:                                               ; preds = %84, %73
  %94 = getelementptr inbounds %struct.cost_struct, ptr %1, i64 0, i32 4
  %95 = add nsw i32 %74, %20
  %96 = add nsw i32 %95, %61
  store i32 %96, ptr %94, align 4, !tbaa !96
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal nonnull ptr @fmt_cost(ptr nocapture noundef readonly %0) #14 {
  %2 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %3 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %4 = add nsw i32 %3, -1
  %5 = icmp eq i32 %2, %4
  %6 = load i32, ptr %0, align 4, !tbaa !90
  %7 = getelementptr inbounds %struct.cost_struct, ptr %0, i64 0, i32 1
  %8 = load i32, ptr %7, align 4, !tbaa !92
  br i1 %5, label %9, label %15

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.cost_struct, ptr %0, i64 0, i32 2
  %11 = load i32, ptr %10, align 4, !tbaa !94
  %12 = getelementptr inbounds %struct.cost_struct, ptr %0, i64 0, i32 4
  %13 = load i32, ptr %12, align 4, !tbaa !96
  %14 = tail call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) @fmt_cost.s, ptr noundef nonnull dereferenceable(1) @.str.29, i32 noundef %6, i32 noundef %8, i32 noundef %11, i32 noundef %13) #43
  br label %21

15:                                               ; preds = %1
  %16 = getelementptr inbounds %struct.cost_struct, ptr %0, i64 0, i32 3
  %17 = load i32, ptr %16, align 4, !tbaa !93
  %18 = getelementptr inbounds %struct.cost_struct, ptr %0, i64 0, i32 2
  %19 = load i32, ptr %18, align 4, !tbaa !94
  %20 = tail call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) @fmt_cost.s, ptr noundef nonnull dereferenceable(1) @.str.1.30, i32 noundef %6, i32 noundef %8, i32 noundef %17, i32 noundef %19) #43
  br label %21

21:                                               ; preds = %15, %9
  ret ptr @fmt_cost.s
}

; Function Attrs: nounwind optsize uwtable
define internal nonnull ptr @print_cost(ptr noundef %0) #0 {
  %2 = alloca %struct.cost_struct, align 4
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %2) #45
  call void @cover_cost(ptr noundef %0, ptr noundef nonnull %2) #44
  %3 = call ptr @fmt_cost(ptr noundef nonnull %2) #44
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %2) #45
  ret ptr @fmt_cost.s
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal void @copy_cost(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1) #22 {
  %3 = load <4 x i32>, ptr %0, align 4, !tbaa !16
  store <4 x i32> %3, ptr %1, align 4, !tbaa !16
  %4 = getelementptr inbounds %struct.cost_struct, ptr %0, i64 0, i32 4
  %5 = getelementptr inbounds %struct.cost_struct, ptr %1, i64 0, i32 4
  %6 = load <2 x i32>, ptr %4, align 4, !tbaa !16
  store <2 x i32> %6, ptr %5, align 4, !tbaa !16
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @size_stamp(ptr noundef %0, ptr noundef %1) #0 {
  %3 = alloca %struct.cost_struct, align 4
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %3) #45
  call void @cover_cost(ptr noundef %0, ptr noundef nonnull %3) #44
  %4 = call ptr @fmt_cost(ptr noundef nonnull %3) #44
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %3) #45
  %5 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.33, ptr noundef %1, ptr noundef nonnull @fmt_cost.s) #44
  %6 = load ptr, ptr @stdout, align 8, !tbaa !13
  %7 = tail call i32 @fflush(ptr noundef %6) #44
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @print_trace(ptr noundef %0, ptr noundef %1, i64 noundef %2) #0 {
  %4 = alloca %struct.cost_struct, align 4
  %5 = tail call ptr @util_print_time(i64 noundef %2) #43
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %4) #45
  call void @cover_cost(ptr noundef %0, ptr noundef nonnull %4) #44
  %6 = call ptr @fmt_cost(ptr noundef nonnull %4) #44
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %4) #45
  %7 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.36, ptr noundef %1, ptr noundef %5, ptr noundef nonnull @fmt_cost.s) #44
  %8 = load ptr, ptr @stdout, align 8, !tbaa !13
  %9 = tail call i32 @fflush(ptr noundef %8) #44
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @totals(i64 noundef %0, i32 noundef %1, ptr noundef %2, ptr nocapture noundef %3) #0 {
  %5 = tail call i64 (...) @util_cpu_time() #43
  %6 = sub nsw i64 %5, %0
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds [16 x i64], ptr @total_time, i64 0, i64 %7
  %9 = load i64, ptr %8, align 8, !tbaa !97
  %10 = add nsw i64 %9, %6
  store i64 %10, ptr %8, align 8, !tbaa !97
  %11 = getelementptr inbounds [16 x i32], ptr @total_calls, i64 0, i64 %7
  %12 = load i32, ptr %11, align 4, !tbaa !16
  %13 = add nsw i32 %12, 1
  store i32 %13, ptr %11, align 4, !tbaa !16
  tail call void @cover_cost(ptr noundef %2, ptr noundef %3) #44
  %14 = load i32, ptr @trace, align 4, !tbaa !16
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %24, label %16

16:                                               ; preds = %4
  %17 = getelementptr inbounds [16 x ptr], ptr @total_name, i64 0, i64 %7
  %18 = load ptr, ptr %17, align 8, !tbaa !13
  %19 = tail call ptr @util_print_time(i64 noundef %6) #43
  %20 = tail call ptr @fmt_cost(ptr noundef %3) #44
  %21 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.36, ptr noundef %18, ptr noundef %19, ptr noundef nonnull @fmt_cost.s) #44
  %22 = load ptr, ptr @stdout, align 8, !tbaa !13
  %23 = tail call i32 @fflush(ptr noundef %22) #44
  br label %24

24:                                               ; preds = %16, %4
  ret void
}

; Function Attrs: noreturn nounwind optsize uwtable
define internal void @fatal(ptr noundef %0) #23 {
  %2 = load ptr, ptr @stderr, align 8, !tbaa !13
  %3 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %2, ptr noundef nonnull @.str.4.41, ptr noundef %0) #47
  tail call void @exit(i32 noundef 1) #49
  unreachable
}

; Function Attrs: nounwind optsize uwtable
define internal void @fprint_pla(ptr nocapture noundef %0, ptr noundef %1, i32 noundef %2) #0 {
  %4 = and i32 %2, 256
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %10, label %6

6:                                                ; preds = %3
  %7 = tail call i32 @output_symbolic_constraints(ptr noundef %0, ptr noundef %1, i32 noundef 0) #44
  %8 = and i32 %2, -257
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %136, label %10

10:                                               ; preds = %6, %3
  %11 = phi i32 [ %8, %6 ], [ %2, %3 ]
  %12 = and i32 %11, 512
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %18, label %14

14:                                               ; preds = %10
  %15 = tail call i32 @output_symbolic_constraints(ptr noundef %0, ptr noundef %1, i32 noundef 1) #44
  %16 = and i32 %11, -513
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %136, label %18

18:                                               ; preds = %14, %10
  %19 = phi i32 [ %16, %14 ], [ %11, %10 ]
  switch i32 %19, label %24 [
    i32 8, label %20
    i32 16, label %21
    i32 128, label %22
  ]

20:                                               ; preds = %18
  tail call void @pls_output(ptr noundef %1) #44
  br label %136

21:                                               ; preds = %18
  tail call void @eqn_output(ptr noundef %1) #44
  br label %136

22:                                               ; preds = %18
  %23 = tail call i32 @kiss_output(ptr noundef %0, ptr noundef %1) #44
  br label %136

24:                                               ; preds = %18
  tail call void @fpr_header(ptr noundef %0, ptr noundef %1, i32 noundef %19) #44
  %25 = and i32 %19, 1
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %31, label %27

27:                                               ; preds = %24
  %28 = load ptr, ptr %1, align 8, !tbaa !61
  %29 = getelementptr inbounds %struct.set_family, ptr %28, i64 0, i32 3
  %30 = load i32, ptr %29, align 4, !tbaa !31
  br label %31

31:                                               ; preds = %27, %24
  %32 = phi i32 [ %30, %27 ], [ 0, %24 ]
  %33 = and i32 %19, 2
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %41, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds %struct.PLA_t, ptr %1, i64 0, i32 1
  %37 = load ptr, ptr %36, align 8, !tbaa !62
  %38 = getelementptr inbounds %struct.set_family, ptr %37, i64 0, i32 3
  %39 = load i32, ptr %38, align 4, !tbaa !31
  %40 = add nsw i32 %39, %32
  br label %41

41:                                               ; preds = %35, %31
  %42 = phi i32 [ %40, %35 ], [ %32, %31 ]
  %43 = and i32 %19, 4
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %52, label %45

45:                                               ; preds = %41
  %46 = getelementptr inbounds %struct.PLA_t, ptr %1, i64 0, i32 2
  %47 = load ptr, ptr %46, align 8, !tbaa !63
  %48 = getelementptr inbounds %struct.set_family, ptr %47, i64 0, i32 3
  %49 = load i32, ptr %48, align 4, !tbaa !31
  %50 = add nsw i32 %49, %42
  %51 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.57, i32 noundef %50) #44
  br label %75

52:                                               ; preds = %41
  %53 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.57, i32 noundef %42) #44
  %54 = icmp eq i32 %19, 1
  br i1 %54, label %55, label %75

55:                                               ; preds = %52
  %56 = load ptr, ptr %1, align 8, !tbaa !61
  %57 = getelementptr inbounds %struct.set_family, ptr %56, i64 0, i32 5
  %58 = load ptr, ptr %57, align 8, !tbaa !33
  %59 = getelementptr inbounds %struct.set_family, ptr %56, i64 0, i32 3
  %60 = load i32, ptr %59, align 4, !tbaa !31
  %61 = load i32, ptr %56, align 8, !tbaa !34
  %62 = mul nsw i32 %61, %60
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds i32, ptr %58, i64 %63
  %65 = icmp sgt i32 %62, 0
  br i1 %65, label %66, label %73

66:                                               ; preds = %66, %55
  %67 = phi ptr [ %71, %66 ], [ %58, %55 ]
  tail call void @print_cube(ptr noundef %0, ptr noundef %67, ptr noundef nonnull @.str.1.58) #44
  %68 = load ptr, ptr %1, align 8, !tbaa !61
  %69 = load i32, ptr %68, align 8, !tbaa !34
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds i32, ptr %67, i64 %70
  %72 = icmp ult ptr %71, %64
  br i1 %72, label %66, label %73

73:                                               ; preds = %66, %55
  %74 = tail call i64 @fwrite(ptr nonnull @.str.2.59, i64 3, i64 1, ptr %0)
  br label %136

75:                                               ; preds = %52, %45
  br i1 %26, label %94, label %76

76:                                               ; preds = %75
  %77 = load ptr, ptr %1, align 8, !tbaa !61
  %78 = getelementptr inbounds %struct.set_family, ptr %77, i64 0, i32 5
  %79 = load ptr, ptr %78, align 8, !tbaa !33
  %80 = getelementptr inbounds %struct.set_family, ptr %77, i64 0, i32 3
  %81 = load i32, ptr %80, align 4, !tbaa !31
  %82 = load i32, ptr %77, align 8, !tbaa !34
  %83 = mul nsw i32 %82, %81
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds i32, ptr %79, i64 %84
  %86 = icmp sgt i32 %83, 0
  br i1 %86, label %87, label %94

87:                                               ; preds = %87, %76
  %88 = phi ptr [ %92, %87 ], [ %79, %76 ]
  tail call void @print_cube(ptr noundef %0, ptr noundef %88, ptr noundef nonnull @.str.3.60) #44
  %89 = load ptr, ptr %1, align 8, !tbaa !61
  %90 = load i32, ptr %89, align 8, !tbaa !34
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds i32, ptr %88, i64 %91
  %93 = icmp ult ptr %92, %85
  br i1 %93, label %87, label %94

94:                                               ; preds = %87, %76, %75
  br i1 %34, label %114, label %95

95:                                               ; preds = %94
  %96 = getelementptr inbounds %struct.PLA_t, ptr %1, i64 0, i32 1
  %97 = load ptr, ptr %96, align 8, !tbaa !62
  %98 = getelementptr inbounds %struct.set_family, ptr %97, i64 0, i32 5
  %99 = load ptr, ptr %98, align 8, !tbaa !33
  %100 = getelementptr inbounds %struct.set_family, ptr %97, i64 0, i32 3
  %101 = load i32, ptr %100, align 4, !tbaa !31
  %102 = load i32, ptr %97, align 8, !tbaa !34
  %103 = mul nsw i32 %102, %101
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds i32, ptr %99, i64 %104
  %106 = icmp sgt i32 %103, 0
  br i1 %106, label %107, label %114

107:                                              ; preds = %107, %95
  %108 = phi ptr [ %112, %107 ], [ %99, %95 ]
  tail call void @print_cube(ptr noundef %0, ptr noundef %108, ptr noundef nonnull @.str.4.61) #44
  %109 = load ptr, ptr %96, align 8, !tbaa !62
  %110 = load i32, ptr %109, align 8, !tbaa !34
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds i32, ptr %108, i64 %111
  %113 = icmp ult ptr %112, %105
  br i1 %113, label %107, label %114

114:                                              ; preds = %107, %95, %94
  br i1 %44, label %134, label %115

115:                                              ; preds = %114
  %116 = getelementptr inbounds %struct.PLA_t, ptr %1, i64 0, i32 2
  %117 = load ptr, ptr %116, align 8, !tbaa !63
  %118 = getelementptr inbounds %struct.set_family, ptr %117, i64 0, i32 5
  %119 = load ptr, ptr %118, align 8, !tbaa !33
  %120 = getelementptr inbounds %struct.set_family, ptr %117, i64 0, i32 3
  %121 = load i32, ptr %120, align 4, !tbaa !31
  %122 = load i32, ptr %117, align 8, !tbaa !34
  %123 = mul nsw i32 %122, %121
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds i32, ptr %119, i64 %124
  %126 = icmp sgt i32 %123, 0
  br i1 %126, label %127, label %134

127:                                              ; preds = %127, %115
  %128 = phi ptr [ %132, %127 ], [ %119, %115 ]
  tail call void @print_cube(ptr noundef %0, ptr noundef %128, ptr noundef nonnull @.str.5.62) #44
  %129 = load ptr, ptr %116, align 8, !tbaa !63
  %130 = load i32, ptr %129, align 8, !tbaa !34
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds i32, ptr %128, i64 %131
  %133 = icmp ult ptr %132, %125
  br i1 %133, label %127, label %134

134:                                              ; preds = %127, %115, %114
  %135 = tail call i64 @fwrite(ptr nonnull @.str.6.63, i64 5, i64 1, ptr %0)
  br label %136

136:                                              ; preds = %134, %73, %22, %21, %20, %14, %6
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @output_symbolic_constraints(ptr nocapture noundef %0, ptr noundef %1, i32 noundef %2) #0 {
  %4 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %5 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %6 = sub nsw i32 %4, %5
  %7 = icmp slt i32 %6, 2
  br i1 %7, label %278, label %8

8:                                                ; preds = %3
  %9 = tail call i32 @makeup_labels(ptr noundef %1) #44
  %10 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %11 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %12 = add nsw i32 %11, -1
  %13 = icmp slt i32 %10, %12
  br i1 %13, label %14, label %278

14:                                               ; preds = %8
  %15 = icmp eq i32 %2, 0
  %16 = getelementptr inbounds %struct.PLA_t, ptr %1, i64 0, i32 7
  %17 = sext i32 %10 to i64
  br label %18

18:                                               ; preds = %272, %14
  %19 = phi i64 [ %17, %14 ], [ %273, %272 ]
  %20 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %21 = getelementptr inbounds i32, ptr %20, i64 %19
  %22 = load i32, ptr %21, align 4, !tbaa !16
  %23 = sext i32 %22 to i64
  %24 = shl nsw i64 %23, 2
  %25 = tail call noalias ptr @malloc(i64 noundef %24) #42
  %26 = icmp sgt i32 %22, 0
  br i1 %26, label %27, label %39

27:                                               ; preds = %18
  %28 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %29 = getelementptr inbounds i32, ptr %28, i64 %19
  %30 = zext i32 %22 to i64
  br label %31

31:                                               ; preds = %31, %27
  %32 = phi i64 [ 0, %27 ], [ %37, %31 ]
  %33 = load i32, ptr %29, align 4, !tbaa !16
  %34 = trunc i64 %32 to i32
  %35 = add nsw i32 %33, %34
  %36 = getelementptr inbounds i32, ptr %25, i64 %32
  store i32 %35, ptr %36, align 4, !tbaa !16
  %37 = add nuw nsw i64 %32, 1
  %38 = icmp eq i64 %37, %30
  br i1 %38, label %39, label %31

39:                                               ; preds = %31, %18
  %40 = load ptr, ptr %1, align 8, !tbaa !61
  %41 = tail call ptr (ptr, ...) @sf_save(ptr noundef %40) #43
  %42 = tail call ptr (ptr, ptr, i32, ...) @sf_permute(ptr noundef %41, ptr noundef %25, i32 noundef %22) #43
  %43 = icmp eq ptr %25, null
  br i1 %43, label %45, label %44

44:                                               ; preds = %39
  tail call void @free(ptr noundef nonnull %25) #43
  br label %45

45:                                               ; preds = %44, %39
  %46 = getelementptr inbounds %struct.set_family, ptr %42, i64 0, i32 3
  %47 = load i32, ptr %46, align 4, !tbaa !31
  %48 = icmp sgt i32 %47, 0
  br i1 %48, label %49, label %74

49:                                               ; preds = %45
  %50 = getelementptr inbounds %struct.set_family, ptr %42, i64 0, i32 5
  %51 = getelementptr inbounds %struct.set_family, ptr %42, i64 0, i32 1
  br label %52

52:                                               ; preds = %68, %49
  %53 = phi i32 [ 0, %49 ], [ %70, %68 ]
  %54 = phi i32 [ 0, %49 ], [ %71, %68 ]
  %55 = load ptr, ptr %50, align 8, !tbaa !33
  %56 = load i32, ptr %42, align 8, !tbaa !34
  %57 = mul nsw i32 %56, %54
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds i32, ptr %55, i64 %58
  %60 = tail call i32 (ptr, ...) @set_ord(ptr noundef %59) #43
  %61 = icmp eq i32 %60, 1
  br i1 %61, label %65, label %62

62:                                               ; preds = %52
  %63 = load i32, ptr %51, align 4, !tbaa !44
  %64 = icmp eq i32 %60, %63
  br i1 %64, label %65, label %68

65:                                               ; preds = %62, %52
  %66 = add nsw i32 %54, -1
  tail call void (ptr, i32, ...) @sf_delset(ptr noundef nonnull %42, i32 noundef %54) #43
  %67 = add nsw i32 %53, 1
  br label %68

68:                                               ; preds = %65, %62
  %69 = phi i32 [ %66, %65 ], [ %54, %62 ]
  %70 = phi i32 [ %67, %65 ], [ %53, %62 ]
  %71 = add nsw i32 %69, 1
  %72 = load i32, ptr %46, align 4, !tbaa !31
  %73 = icmp slt i32 %71, %72
  br i1 %73, label %52, label %74

74:                                               ; preds = %68, %45
  %75 = phi i32 [ 0, %45 ], [ %70, %68 ]
  %76 = phi i32 [ %47, %45 ], [ %72, %68 ]
  %77 = sext i32 %76 to i64
  %78 = shl nsw i64 %77, 2
  %79 = tail call noalias ptr @malloc(i64 noundef %78) #42
  %80 = icmp sgt i32 %76, 0
  br i1 %80, label %81, label %152

81:                                               ; preds = %74
  %82 = getelementptr inbounds %struct.set_family, ptr %42, i64 0, i32 5
  %83 = load ptr, ptr %82, align 8, !tbaa !33
  br label %88

84:                                               ; preds = %88
  %.lcssa = phi i32 [ %97, %88 ]
  %85 = icmp sgt i32 %.lcssa, 0
  br i1 %85, label %86, label %152

86:                                               ; preds = %84
  %87 = getelementptr inbounds %struct.set_family, ptr %42, i64 0, i32 5
  br label %99

88:                                               ; preds = %88, %81
  %89 = phi i32 [ 0, %81 ], [ %96, %88 ]
  %90 = load i32, ptr %42, align 8, !tbaa !34
  %91 = mul nsw i32 %90, %89
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds i32, ptr %83, i64 %92
  %94 = load i32, ptr %93, align 4, !tbaa !16
  %95 = and i32 %94, -2049
  store i32 %95, ptr %93, align 4, !tbaa !16
  %96 = add nuw nsw i32 %89, 1
  %97 = load i32, ptr %46, align 4, !tbaa !31
  %98 = icmp slt i32 %96, %97
  br i1 %98, label %88, label %84

99:                                               ; preds = %147, %86
  %100 = phi i32 [ %.lcssa, %86 ], [ %149, %147 ]
  %101 = phi i64 [ 0, %86 ], [ %148, %147 ]
  %102 = getelementptr inbounds i32, ptr %79, i64 %101
  store i32 0, ptr %102, align 4, !tbaa !16
  %103 = load ptr, ptr %87, align 8, !tbaa !33
  %104 = load i32, ptr %42, align 8, !tbaa !34
  %105 = trunc i64 %101 to i32
  %106 = mul nsw i32 %104, %105
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds i32, ptr %103, i64 %107
  %109 = load i32, ptr %108, align 4, !tbaa !16
  %110 = and i32 %109, 2048
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %114, label %112

112:                                              ; preds = %99
  %113 = add nuw nsw i64 %101, 1
  br label %147

114:                                              ; preds = %99
  store i32 1, ptr %102, align 4, !tbaa !16
  %115 = add nuw nsw i64 %101, 1
  %116 = sext i32 %100 to i64
  %117 = icmp slt i64 %115, %116
  br i1 %117, label %118, label %147

118:                                              ; preds = %114
  %119 = trunc i64 %115 to i32
  br label %120

120:                                              ; preds = %142, %118
  %121 = phi i32 [ %143, %142 ], [ 1, %118 ]
  %122 = phi i32 [ %144, %142 ], [ %119, %118 ]
  %123 = load ptr, ptr %87, align 8, !tbaa !33
  %124 = load i32, ptr %42, align 8, !tbaa !34
  %125 = mul nsw i32 %124, %105
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds i32, ptr %123, i64 %126
  %128 = mul nsw i32 %124, %122
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds i32, ptr %123, i64 %129
  %131 = tail call i32 (ptr, ptr, ...) @setp_equal(ptr noundef %127, ptr noundef %130) #43
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %142, label %133

133:                                              ; preds = %120
  %134 = add nsw i32 %121, 1
  store i32 %134, ptr %102, align 4, !tbaa !16
  %135 = load ptr, ptr %87, align 8, !tbaa !33
  %136 = load i32, ptr %42, align 8, !tbaa !34
  %137 = mul nsw i32 %136, %122
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds i32, ptr %135, i64 %138
  %140 = load i32, ptr %139, align 4, !tbaa !16
  %141 = or i32 %140, 2048
  store i32 %141, ptr %139, align 4, !tbaa !16
  br label %142

142:                                              ; preds = %133, %120
  %143 = phi i32 [ %121, %120 ], [ %134, %133 ]
  %144 = add nuw nsw i32 %122, 1
  %145 = load i32, ptr %46, align 4, !tbaa !31
  %146 = icmp slt i32 %144, %145
  br i1 %146, label %120, label %147

147:                                              ; preds = %142, %114, %112
  %148 = phi i64 [ %113, %112 ], [ %115, %114 ], [ %115, %142 ]
  %149 = phi i32 [ %100, %112 ], [ %100, %114 ], [ %145, %142 ]
  %150 = sext i32 %149 to i64
  %151 = icmp slt i64 %148, %150
  br i1 %151, label %99, label %152

152:                                              ; preds = %147, %84, %74
  %153 = trunc i64 %19 to i32
  br i1 %15, label %154, label %210

154:                                              ; preds = %152
  %155 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.44.89, i32 noundef %153) #44
  %156 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.45.90, i32 noundef %75) #44
  %157 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %158 = getelementptr inbounds i32, ptr %157, i64 %19
  %159 = load i32, ptr %158, align 4, !tbaa !16
  %160 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.46.91, i32 noundef %159) #44
  %161 = load i32, ptr %46, align 4, !tbaa !31
  %162 = icmp sgt i32 %161, 0
  br i1 %162, label %163, label %272

163:                                              ; preds = %154
  %164 = getelementptr inbounds %struct.set_family, ptr %42, i64 0, i32 1
  %165 = getelementptr inbounds %struct.set_family, ptr %42, i64 0, i32 5
  br label %166

166:                                              ; preds = %205, %163
  %167 = phi i32 [ %161, %163 ], [ %206, %205 ]
  %168 = phi i64 [ 0, %163 ], [ %207, %205 ]
  %169 = getelementptr inbounds i32, ptr %79, i64 %168
  %170 = load i32, ptr %169, align 4, !tbaa !16
  %171 = icmp sgt i32 %170, 0
  br i1 %171, label %172, label %205

172:                                              ; preds = %166
  %173 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.47.92, i32 noundef %170) #44
  %174 = load i32, ptr %164, align 4, !tbaa !44
  %175 = icmp sgt i32 %174, 0
  br i1 %175, label %176, label %202

176:                                              ; preds = %172
  %177 = trunc i64 %168 to i32
  br label %178

178:                                              ; preds = %198, %176
  %179 = phi i32 [ %199, %198 ], [ %174, %176 ]
  %180 = phi i32 [ %200, %198 ], [ 0, %176 ]
  %181 = load ptr, ptr %165, align 8, !tbaa !33
  %182 = load i32, ptr %42, align 8, !tbaa !34
  %183 = mul nsw i32 %182, %177
  %184 = sext i32 %183 to i64
  %185 = getelementptr inbounds i32, ptr %181, i64 %184
  %186 = lshr i32 %180, 5
  %187 = add nuw nsw i32 %186, 1
  %188 = zext i32 %187 to i64
  %189 = getelementptr inbounds i32, ptr %185, i64 %188
  %190 = load i32, ptr %189, align 4, !tbaa !16
  %191 = and i32 %180, 31
  %192 = shl nuw i32 1, %191
  %193 = and i32 %190, %192
  %194 = icmp eq i32 %193, 0
  br i1 %194, label %198, label %195

195:                                              ; preds = %178
  %196 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.11.69, i32 noundef %180) #44
  %197 = load i32, ptr %164, align 4, !tbaa !44
  br label %198

198:                                              ; preds = %195, %178
  %199 = phi i32 [ %179, %178 ], [ %197, %195 ]
  %200 = add nuw nsw i32 %180, 1
  %201 = icmp slt i32 %200, %199
  br i1 %201, label %178, label %202

202:                                              ; preds = %198, %172
  %203 = tail call i32 @fputc(i32 10, ptr %0)
  %204 = load i32, ptr %46, align 4, !tbaa !31
  br label %205

205:                                              ; preds = %202, %166
  %206 = phi i32 [ %167, %166 ], [ %204, %202 ]
  %207 = add nuw nsw i64 %168, 1
  %208 = sext i32 %206 to i64
  %209 = icmp slt i64 %207, %208
  br i1 %209, label %166, label %272

210:                                              ; preds = %152
  %211 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.48.93, i32 noundef %153) #44
  %212 = load i32, ptr %46, align 4, !tbaa !31
  %213 = icmp sgt i32 %212, 0
  br i1 %213, label %214, label %269

214:                                              ; preds = %210
  %215 = getelementptr inbounds %struct.set_family, ptr %42, i64 0, i32 1
  %216 = getelementptr inbounds %struct.set_family, ptr %42, i64 0, i32 5
  br label %217

217:                                              ; preds = %264, %214
  %218 = phi i32 [ %212, %214 ], [ %265, %264 ]
  %219 = phi i64 [ 0, %214 ], [ %266, %264 ]
  %220 = getelementptr inbounds i32, ptr %79, i64 %219
  %221 = load i32, ptr %220, align 4, !tbaa !16
  %222 = icmp sgt i32 %221, 0
  br i1 %222, label %223, label %264

223:                                              ; preds = %217
  %224 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.49.94, i32 noundef %221) #44
  %225 = load i32, ptr %215, align 4, !tbaa !44
  %226 = icmp sgt i32 %225, 0
  br i1 %226, label %227, label %261

227:                                              ; preds = %223
  %228 = trunc i64 %219 to i32
  br label %229

229:                                              ; preds = %257, %227
  %230 = phi i32 [ %258, %257 ], [ %225, %227 ]
  %231 = phi i32 [ %259, %257 ], [ 0, %227 ]
  %232 = load ptr, ptr %216, align 8, !tbaa !33
  %233 = load i32, ptr %42, align 8, !tbaa !34
  %234 = mul nsw i32 %233, %228
  %235 = sext i32 %234 to i64
  %236 = getelementptr inbounds i32, ptr %232, i64 %235
  %237 = lshr i32 %231, 5
  %238 = add nuw nsw i32 %237, 1
  %239 = zext i32 %238 to i64
  %240 = getelementptr inbounds i32, ptr %236, i64 %239
  %241 = load i32, ptr %240, align 4, !tbaa !16
  %242 = and i32 %231, 31
  %243 = shl nuw i32 1, %242
  %244 = and i32 %241, %243
  %245 = icmp eq i32 %244, 0
  br i1 %245, label %257, label %246

246:                                              ; preds = %229
  %247 = load ptr, ptr %16, align 8, !tbaa !58
  %248 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %249 = getelementptr inbounds i32, ptr %248, i64 %19
  %250 = load i32, ptr %249, align 4, !tbaa !16
  %251 = add nsw i32 %250, %231
  %252 = sext i32 %251 to i64
  %253 = getelementptr inbounds ptr, ptr %247, i64 %252
  %254 = load ptr, ptr %253, align 8, !tbaa !13
  %255 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.14.71, ptr noundef %254) #44
  %256 = load i32, ptr %215, align 4, !tbaa !44
  br label %257

257:                                              ; preds = %246, %229
  %258 = phi i32 [ %230, %229 ], [ %256, %246 ]
  %259 = add nuw nsw i32 %231, 1
  %260 = icmp slt i32 %259, %258
  br i1 %260, label %229, label %261

261:                                              ; preds = %257, %223
  %262 = tail call i64 @fwrite(ptr nonnull @.str.50.95, i64 3, i64 1, ptr %0)
  %263 = load i32, ptr %46, align 4, !tbaa !31
  br label %264

264:                                              ; preds = %261, %217
  %265 = phi i32 [ %218, %217 ], [ %263, %261 ]
  %266 = add nuw nsw i64 %219, 1
  %267 = sext i32 %265 to i64
  %268 = icmp slt i64 %266, %267
  br i1 %268, label %217, label %269

269:                                              ; preds = %264, %210
  %270 = icmp eq ptr %79, null
  br i1 %270, label %272, label %271

271:                                              ; preds = %269
  tail call void @free(ptr noundef nonnull %79) #43
  br label %272

272:                                              ; preds = %271, %269, %205, %154
  %273 = add nsw i64 %19, 1
  %274 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %275 = add nsw i32 %274, -1
  %276 = sext i32 %275 to i64
  %277 = icmp slt i64 %273, %276
  br i1 %277, label %18, label %278

278:                                              ; preds = %272, %8, %3
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal void @pls_output(ptr noundef %0) #0 {
  %2 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.84)
  %3 = tail call i32 @makeup_labels(ptr noundef %0) #44
  %4 = load ptr, ptr @stdout, align 8, !tbaa !13
  tail call void @pls_label(ptr noundef %0, ptr noundef %4) #44
  %5 = load ptr, ptr @stdout, align 8, !tbaa !13
  tail call void @pls_group(ptr noundef %0, ptr noundef %5) #44
  %6 = load ptr, ptr %0, align 8, !tbaa !61
  %7 = getelementptr inbounds %struct.set_family, ptr %6, i64 0, i32 3
  %8 = load i32, ptr %7, align 4, !tbaa !31
  %9 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.57, i32 noundef %8) #44
  %10 = load ptr, ptr %0, align 8, !tbaa !61
  %11 = getelementptr inbounds %struct.set_family, ptr %10, i64 0, i32 5
  %12 = load ptr, ptr %11, align 8, !tbaa !33
  %13 = getelementptr inbounds %struct.set_family, ptr %10, i64 0, i32 3
  %14 = load i32, ptr %13, align 4, !tbaa !31
  %15 = load i32, ptr %10, align 8, !tbaa !34
  %16 = mul nsw i32 %15, %14
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds i32, ptr %12, i64 %17
  %19 = icmp sgt i32 %16, 0
  br i1 %19, label %20, label %31

20:                                               ; preds = %1
  %21 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 5
  br label %22

22:                                               ; preds = %22, %20
  %23 = phi ptr [ %12, %20 ], [ %29, %22 ]
  %24 = load ptr, ptr @stdout, align 8, !tbaa !13
  %25 = load ptr, ptr %21, align 8, !tbaa !72
  tail call void @print_expanded_cube(ptr noundef %24, ptr noundef %23, ptr noundef %25) #44
  %26 = load ptr, ptr %0, align 8, !tbaa !61
  %27 = load i32, ptr %26, align 8, !tbaa !34
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds i32, ptr %23, i64 %28
  %30 = icmp ult ptr %29, %18
  br i1 %30, label %22, label %31

31:                                               ; preds = %22, %1
  %32 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.51)
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @eqn_output(ptr noundef %0) #0 {
  %2 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %3 = icmp eq i32 %2, -1
  br i1 %3, label %4, label %5

4:                                                ; preds = %1
  tail call void (ptr, ...) @fatal(ptr noundef nonnull @.str.25) #43
  br label %5

5:                                                ; preds = %4, %1
  %6 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 17), align 8, !tbaa !45
  %7 = icmp eq i32 %6, 1
  br i1 %7, label %9, label %8

8:                                                ; preds = %5
  tail call void (ptr, ...) @fatal(ptr noundef nonnull @.str.26.76) #43
  br label %9

9:                                                ; preds = %8, %5
  %10 = tail call i32 @makeup_labels(ptr noundef %0) #44
  %11 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %12 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds i32, ptr %11, i64 %13
  %15 = load i32, ptr %14, align 4, !tbaa !16
  %16 = icmp sgt i32 %15, 0
  br i1 %16, label %17, label %176

17:                                               ; preds = %9
  %18 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 7
  br label %19

19:                                               ; preds = %167, %17
  %20 = phi i64 [ %13, %17 ], [ %172, %167 ]
  %21 = phi i32 [ 0, %17 ], [ %169, %167 ]
  %22 = load ptr, ptr %18, align 8, !tbaa !58
  %23 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %24 = getelementptr inbounds i32, ptr %23, i64 %20
  %25 = load i32, ptr %24, align 4, !tbaa !16
  %26 = add nsw i32 %25, %21
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds ptr, ptr %22, i64 %27
  %29 = load ptr, ptr %28, align 8, !tbaa !13
  %30 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.27.77, ptr noundef %29) #44
  %31 = load ptr, ptr %0, align 8, !tbaa !61
  %32 = getelementptr inbounds %struct.set_family, ptr %31, i64 0, i32 5
  %33 = load ptr, ptr %32, align 8, !tbaa !33
  %34 = getelementptr inbounds %struct.set_family, ptr %31, i64 0, i32 3
  %35 = load i32, ptr %34, align 4, !tbaa !31
  %36 = load i32, ptr %31, align 8, !tbaa !34
  %37 = mul nsw i32 %36, %35
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds i32, ptr %33, i64 %38
  %40 = icmp sgt i32 %37, 0
  br i1 %40, label %41, label %167

41:                                               ; preds = %19
  %42 = load ptr, ptr %18, align 8, !tbaa !58
  %43 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %44 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i32, ptr %43, i64 %45
  %47 = load i32, ptr %46, align 4, !tbaa !16
  %48 = add nsw i32 %47, %21
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds ptr, ptr %42, i64 %49
  %51 = load ptr, ptr %50, align 8, !tbaa !13
  %52 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %51) #48
  %53 = trunc i64 %52 to i32
  %54 = add i32 %53, 3
  br label %55

55:                                               ; preds = %158, %41
  %56 = phi i32 [ %159, %158 ], [ %36, %41 ]
  %57 = phi i32 [ %160, %158 ], [ %44, %41 ]
  %58 = phi ptr [ %161, %158 ], [ %43, %41 ]
  %59 = phi i32 [ %163, %158 ], [ 1, %41 ]
  %60 = phi ptr [ %165, %158 ], [ %33, %41 ]
  %61 = phi i32 [ %162, %158 ], [ %54, %41 ]
  %62 = sext i32 %57 to i64
  %63 = getelementptr inbounds i32, ptr %58, i64 %62
  %64 = load i32, ptr %63, align 4, !tbaa !16
  %65 = add nsw i32 %64, %21
  %66 = ashr i32 %65, 5
  %67 = add nsw i32 %66, 1
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i32, ptr %60, i64 %68
  %70 = load i32, ptr %69, align 4, !tbaa !16
  %71 = and i32 %65, 31
  %72 = shl nuw i32 1, %71
  %73 = and i32 %72, %70
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %158, label %75

75:                                               ; preds = %55
  %76 = icmp eq i32 %59, 0
  br i1 %76, label %79, label %77

77:                                               ; preds = %75
  %78 = tail call i32 @putchar(i32 40)
  br label %81

79:                                               ; preds = %75
  %80 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.29.78) #44
  br label %81

81:                                               ; preds = %79, %77
  %82 = phi i32 [ 4, %79 ], [ 1, %77 ]
  %83 = add nsw i32 %61, %82
  %84 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %85 = icmp sgt i32 %84, 0
  br i1 %85, label %86, label %150

86:                                               ; preds = %143, %81
  %87 = phi i32 [ %144, %143 ], [ %84, %81 ]
  %88 = phi i64 [ %147, %143 ], [ 0, %81 ]
  %89 = phi i32 [ %146, %143 ], [ 1, %81 ]
  %90 = phi i32 [ %145, %143 ], [ %83, %81 ]
  %91 = trunc i64 %88 to i32
  %92 = lshr i32 %91, 4
  %93 = add nuw nsw i32 %92, 1
  %94 = zext i32 %93 to i64
  %95 = getelementptr inbounds i32, ptr %60, i64 %94
  %96 = load i32, ptr %95, align 4, !tbaa !16
  %97 = trunc i64 %88 to i32
  %98 = shl i32 %97, 1
  %99 = and i32 %98, 30
  %100 = lshr i32 %96, %99
  %101 = and i32 %100, 3
  %102 = icmp eq i32 %101, 3
  br i1 %102, label %143, label %103

103:                                              ; preds = %86
  %104 = load ptr, ptr %18, align 8, !tbaa !58
  %105 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %106 = getelementptr inbounds i32, ptr %105, i64 %88
  %107 = load i32, ptr %106, align 4, !tbaa !16
  %108 = add nsw i32 %107, 1
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds ptr, ptr %104, i64 %109
  %111 = load ptr, ptr %110, align 8, !tbaa !13
  %112 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %111) #48
  %113 = trunc i64 %112 to i32
  %114 = add nsw i32 %90, %113
  %115 = icmp sgt i32 %114, 72
  br i1 %115, label %116, label %118

116:                                              ; preds = %103
  %117 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.30.79) #44
  br label %118

118:                                              ; preds = %116, %103
  %119 = phi i32 [ 4, %116 ], [ %90, %103 ]
  %120 = icmp eq i32 %89, 0
  br i1 %120, label %121, label %124

121:                                              ; preds = %118
  %122 = tail call i32 @putchar(i32 38)
  %123 = add nsw i32 %119, 1
  br label %124

124:                                              ; preds = %121, %118
  %125 = phi i32 [ %119, %118 ], [ %123, %121 ]
  %126 = icmp eq i32 %101, 1
  br i1 %126, label %127, label %130

127:                                              ; preds = %124
  %128 = tail call i32 @putchar(i32 33)
  %129 = add nsw i32 %125, 1
  br label %130

130:                                              ; preds = %127, %124
  %131 = phi i32 [ %129, %127 ], [ %125, %124 ]
  %132 = load ptr, ptr %18, align 8, !tbaa !58
  %133 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %134 = getelementptr inbounds i32, ptr %133, i64 %88
  %135 = load i32, ptr %134, align 4, !tbaa !16
  %136 = add nsw i32 %135, 1
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds ptr, ptr %132, i64 %137
  %139 = load ptr, ptr %138, align 8, !tbaa !13
  %140 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.22.80, ptr noundef %139) #44
  %141 = add nsw i32 %131, %113
  %142 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  br label %143

143:                                              ; preds = %130, %86
  %144 = phi i32 [ %142, %130 ], [ %87, %86 ]
  %145 = phi i32 [ %141, %130 ], [ %90, %86 ]
  %146 = phi i32 [ 0, %130 ], [ %89, %86 ]
  %147 = add nuw nsw i64 %88, 1
  %148 = sext i32 %144 to i64
  %149 = icmp slt i64 %147, %148
  br i1 %149, label %86, label %150

150:                                              ; preds = %143, %81
  %151 = phi i32 [ %83, %81 ], [ %145, %143 ]
  %152 = tail call i32 @putchar(i32 41)
  %153 = add nsw i32 %151, 1
  %154 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %155 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %156 = load ptr, ptr %0, align 8, !tbaa !61
  %157 = load i32, ptr %156, align 8, !tbaa !34
  br label %158

158:                                              ; preds = %150, %55
  %159 = phi i32 [ %157, %150 ], [ %56, %55 ]
  %160 = phi i32 [ %155, %150 ], [ %57, %55 ]
  %161 = phi ptr [ %154, %150 ], [ %58, %55 ]
  %162 = phi i32 [ %153, %150 ], [ %61, %55 ]
  %163 = phi i32 [ 0, %150 ], [ %59, %55 ]
  %164 = sext i32 %159 to i64
  %165 = getelementptr inbounds i32, ptr %60, i64 %164
  %166 = icmp ult ptr %165, %39
  br i1 %166, label %55, label %167

167:                                              ; preds = %158, %19
  %168 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.52)
  %169 = add nuw nsw i32 %21, 1
  %170 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %171 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds i32, ptr %170, i64 %172
  %174 = load i32, ptr %173, align 4, !tbaa !16
  %175 = icmp slt i32 %169, %174
  br i1 %175, label %19, label %176

176:                                              ; preds = %167, %9
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @kiss_output(ptr nocapture noundef %0, ptr nocapture noundef readonly %1) #0 {
  %3 = load ptr, ptr %1, align 8, !tbaa !61
  %4 = getelementptr inbounds %struct.set_family, ptr %3, i64 0, i32 5
  %5 = load ptr, ptr %4, align 8, !tbaa !33
  %6 = getelementptr inbounds %struct.set_family, ptr %3, i64 0, i32 3
  %7 = load i32, ptr %6, align 4, !tbaa !31
  %8 = load i32, ptr %3, align 8, !tbaa !34
  %9 = mul nsw i32 %8, %7
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds i32, ptr %5, i64 %10
  %12 = icmp sgt i32 %9, 0
  br i1 %12, label %13, label %21

13:                                               ; preds = %13, %2
  %14 = phi ptr [ %19, %13 ], [ %5, %2 ]
  %15 = tail call i32 @kiss_print_cube(ptr noundef %0, ptr noundef nonnull %1, ptr noundef %14, ptr noundef nonnull @.str.3.60) #44
  %16 = load ptr, ptr %1, align 8, !tbaa !61
  %17 = load i32, ptr %16, align 8, !tbaa !34
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i32, ptr %14, i64 %18
  %20 = icmp ult ptr %19, %11
  br i1 %20, label %13, label %21

21:                                               ; preds = %13, %2
  %22 = getelementptr inbounds %struct.PLA_t, ptr %1, i64 0, i32 1
  %23 = load ptr, ptr %22, align 8, !tbaa !62
  %24 = getelementptr inbounds %struct.set_family, ptr %23, i64 0, i32 5
  %25 = load ptr, ptr %24, align 8, !tbaa !33
  %26 = getelementptr inbounds %struct.set_family, ptr %23, i64 0, i32 3
  %27 = load i32, ptr %26, align 4, !tbaa !31
  %28 = load i32, ptr %23, align 8, !tbaa !34
  %29 = mul nsw i32 %28, %27
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds i32, ptr %25, i64 %30
  %32 = icmp sgt i32 %29, 0
  br i1 %32, label %33, label %41

33:                                               ; preds = %33, %21
  %34 = phi ptr [ %39, %33 ], [ %25, %21 ]
  %35 = tail call i32 @kiss_print_cube(ptr noundef %0, ptr noundef nonnull %1, ptr noundef %34, ptr noundef nonnull @.str.4.61) #44
  %36 = load ptr, ptr %22, align 8, !tbaa !62
  %37 = load i32, ptr %36, align 8, !tbaa !34
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds i32, ptr %34, i64 %38
  %40 = icmp ult ptr %39, %31
  br i1 %40, label %33, label %41

41:                                               ; preds = %33, %21
  ret i32 undef
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @fpr_header(ptr nocapture noundef %0, ptr nocapture noundef readonly %1, i32 noundef %2) #14 {
  %4 = icmp eq i32 %2, 1
  br i1 %4, label %23, label %5

5:                                                ; preds = %3
  %6 = tail call i64 @fwrite(ptr nonnull @.str.7.65, i64 6, i64 1, ptr %0)
  %7 = and i32 %2, 1
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %5
  %10 = tail call i32 @putc(i32 noundef 102, ptr noundef %0) #44
  br label %11

11:                                               ; preds = %9, %5
  %12 = and i32 %2, 2
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %16, label %14

14:                                               ; preds = %11
  %15 = tail call i32 @putc(i32 noundef 100, ptr noundef %0) #44
  br label %16

16:                                               ; preds = %14, %11
  %17 = and i32 %2, 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %21, label %19

19:                                               ; preds = %16
  %20 = tail call i32 @putc(i32 noundef 114, ptr noundef %0) #44
  br label %21

21:                                               ; preds = %19, %16
  %22 = tail call i32 @putc(i32 noundef 10, ptr noundef %0) #44
  br label %23

23:                                               ; preds = %21, %3
  %24 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 17), align 8, !tbaa !45
  %25 = icmp slt i32 %24, 2
  br i1 %25, label %26, label %37

26:                                               ; preds = %23
  %27 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %28 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.8.66, i32 noundef %27) #44
  %29 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %30 = icmp eq i32 %29, -1
  br i1 %30, label %58, label %31

31:                                               ; preds = %26
  %32 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %33 = sext i32 %29 to i64
  %34 = getelementptr inbounds i32, ptr %32, i64 %33
  %35 = load i32, ptr %34, align 4, !tbaa !16
  %36 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.9.67, i32 noundef %35) #44
  br label %58

37:                                               ; preds = %23
  %38 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %39 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %40 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.10.68, i32 noundef %38, i32 noundef %39) #44
  %41 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %42 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %43 = icmp slt i32 %41, %42
  br i1 %43, label %44, label %56

44:                                               ; preds = %37
  %45 = sext i32 %41 to i64
  br label %46

46:                                               ; preds = %46, %44
  %47 = phi i64 [ %45, %44 ], [ %52, %46 ]
  %48 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %49 = getelementptr inbounds i32, ptr %48, i64 %47
  %50 = load i32, ptr %49, align 4, !tbaa !16
  %51 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.11.69, i32 noundef %50) #44
  %52 = add nsw i64 %47, 1
  %53 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %54 = sext i32 %53 to i64
  %55 = icmp slt i64 %52, %54
  br i1 %55, label %46, label %56

56:                                               ; preds = %46, %37
  %57 = tail call i32 @fputc(i32 10, ptr %0)
  br label %58

58:                                               ; preds = %56, %31, %26
  %59 = getelementptr inbounds %struct.PLA_t, ptr %1, i64 0, i32 7
  %60 = load ptr, ptr %59, align 8, !tbaa !58
  %61 = icmp eq ptr %60, null
  br i1 %61, label %134, label %62

62:                                               ; preds = %58
  %63 = getelementptr inbounds ptr, ptr %60, i64 1
  %64 = load ptr, ptr %63, align 8, !tbaa !13
  %65 = icmp ne ptr %64, null
  %66 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8
  %67 = icmp sgt i32 %66, 0
  %68 = select i1 %65, i1 %67, i1 false
  br i1 %68, label %69, label %92

69:                                               ; preds = %62
  %70 = tail call i64 @fwrite(ptr nonnull @.str.13.70, i64 4, i64 1, ptr %0)
  %71 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %72 = icmp sgt i32 %71, 0
  br i1 %72, label %73, label %88

73:                                               ; preds = %73, %69
  %74 = phi i64 [ %84, %73 ], [ 0, %69 ]
  %75 = load ptr, ptr %59, align 8, !tbaa !58
  %76 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %77 = getelementptr inbounds i32, ptr %76, i64 %74
  %78 = load i32, ptr %77, align 4, !tbaa !16
  %79 = add nsw i32 %78, 1
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds ptr, ptr %75, i64 %80
  %82 = load ptr, ptr %81, align 8, !tbaa !13
  %83 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.14.71, ptr noundef %82) #44
  %84 = add nuw nsw i64 %74, 1
  %85 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %86 = sext i32 %85 to i64
  %87 = icmp slt i64 %84, %86
  br i1 %87, label %73, label %88

88:                                               ; preds = %73, %69
  %89 = tail call i32 @putc(i32 noundef 10, ptr noundef %0) #44
  %90 = load ptr, ptr %59, align 8, !tbaa !58
  %91 = icmp eq ptr %90, null
  br i1 %91, label %134, label %92

92:                                               ; preds = %88, %62
  %93 = phi ptr [ %90, %88 ], [ %60, %62 ]
  %94 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %95 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds i32, ptr %94, i64 %96
  %98 = load i32, ptr %97, align 4, !tbaa !16
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds ptr, ptr %93, i64 %99
  %101 = load ptr, ptr %100, align 8, !tbaa !13
  %102 = icmp ne ptr %101, null
  %103 = icmp ne i32 %95, -1
  %104 = and i1 %103, %102
  br i1 %104, label %105, label %134

105:                                              ; preds = %92
  %106 = tail call i64 @fwrite(ptr nonnull @.str.15.72, i64 3, i64 1, ptr %0)
  %107 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %108 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds i32, ptr %107, i64 %109
  %111 = load i32, ptr %110, align 4, !tbaa !16
  %112 = icmp sgt i32 %111, 0
  br i1 %112, label %113, label %132

113:                                              ; preds = %113, %105
  %114 = phi i64 [ %128, %113 ], [ %109, %105 ]
  %115 = phi i32 [ %125, %113 ], [ 0, %105 ]
  %116 = load ptr, ptr %59, align 8, !tbaa !58
  %117 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %118 = getelementptr inbounds i32, ptr %117, i64 %114
  %119 = load i32, ptr %118, align 4, !tbaa !16
  %120 = add nsw i32 %119, %115
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds ptr, ptr %116, i64 %121
  %123 = load ptr, ptr %122, align 8, !tbaa !13
  %124 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.14.71, ptr noundef %123) #44
  %125 = add nuw nsw i32 %115, 1
  %126 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %127 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds i32, ptr %126, i64 %128
  %130 = load i32, ptr %129, align 4, !tbaa !16
  %131 = icmp slt i32 %125, %130
  br i1 %131, label %113, label %132

132:                                              ; preds = %113, %105
  %133 = tail call i32 @putc(i32 noundef 10, ptr noundef %0) #44
  br label %134

134:                                              ; preds = %132, %92, %88, %58
  %135 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %136 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %137 = add nsw i32 %136, -1
  %138 = icmp slt i32 %135, %137
  br i1 %138, label %139, label %187

139:                                              ; preds = %134
  %140 = sext i32 %135 to i64
  %141 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %142 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  br label %143

143:                                              ; preds = %179, %139
  %144 = phi i32 [ %136, %139 ], [ %180, %179 ]
  %145 = phi ptr [ %142, %139 ], [ %181, %179 ]
  %146 = phi ptr [ %141, %139 ], [ %182, %179 ]
  %147 = phi i64 [ %140, %139 ], [ %183, %179 ]
  %148 = getelementptr inbounds i32, ptr %146, i64 %147
  %149 = load i32, ptr %148, align 4, !tbaa !16
  %150 = getelementptr inbounds i32, ptr %145, i64 %147
  %151 = load i32, ptr %150, align 4, !tbaa !16
  %152 = load ptr, ptr %59, align 8, !tbaa !58
  %153 = icmp eq ptr %152, null
  br i1 %153, label %179, label %154

154:                                              ; preds = %143
  %155 = sext i32 %149 to i64
  %156 = getelementptr inbounds ptr, ptr %152, i64 %155
  %157 = load ptr, ptr %156, align 8, !tbaa !13
  %158 = icmp eq ptr %157, null
  br i1 %158, label %179, label %159

159:                                              ; preds = %154
  %160 = trunc i64 %147 to i32
  %161 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.16.73, i32 noundef %160) #44
  %162 = icmp sgt i32 %149, %151
  br i1 %162, label %174, label %163

163:                                              ; preds = %159
  %164 = add i32 %151, 1
  br label %165

165:                                              ; preds = %165, %163
  %166 = phi i64 [ %155, %163 ], [ %171, %165 ]
  %167 = load ptr, ptr %59, align 8, !tbaa !58
  %168 = getelementptr inbounds ptr, ptr %167, i64 %166
  %169 = load ptr, ptr %168, align 8, !tbaa !13
  %170 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.14.71, ptr noundef %169) #44
  %171 = add nsw i64 %166, 1
  %172 = trunc i64 %171 to i32
  %173 = icmp eq i32 %164, %172
  br i1 %173, label %174, label %165

174:                                              ; preds = %165, %159
  %175 = tail call i32 @putc(i32 noundef 10, ptr noundef %0) #44
  %176 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %177 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  %178 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  br label %179

179:                                              ; preds = %174, %154, %143
  %180 = phi i32 [ %144, %143 ], [ %144, %154 ], [ %178, %174 ]
  %181 = phi ptr [ %145, %143 ], [ %145, %154 ], [ %177, %174 ]
  %182 = phi ptr [ %146, %143 ], [ %146, %154 ], [ %176, %174 ]
  %183 = add nsw i64 %147, 1
  %184 = add nsw i32 %180, -1
  %185 = sext i32 %184 to i64
  %186 = icmp slt i64 %183, %185
  br i1 %186, label %143, label %187

187:                                              ; preds = %179, %134
  %188 = getelementptr inbounds %struct.PLA_t, ptr %1, i64 0, i32 5
  %189 = load ptr, ptr %188, align 8, !tbaa !72
  %190 = icmp eq ptr %189, null
  br i1 %190, label %220, label %191

191:                                              ; preds = %187
  %192 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %193 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %194 = sext i32 %193 to i64
  %195 = getelementptr inbounds i32, ptr %192, i64 %194
  %196 = load i32, ptr %195, align 4, !tbaa !16
  %197 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  %198 = getelementptr inbounds i32, ptr %197, i64 %194
  %199 = load i32, ptr %198, align 4, !tbaa !16
  %200 = tail call i64 @fwrite(ptr nonnull @.str.17.74, i64 8, i64 1, ptr %0)
  %201 = icmp sgt i32 %196, %199
  br i1 %201, label %218, label %202

202:                                              ; preds = %202, %191
  %203 = phi i32 [ %216, %202 ], [ %196, %191 ]
  %204 = load ptr, ptr %188, align 8, !tbaa !72
  %205 = ashr i32 %203, 5
  %206 = add nsw i32 %205, 1
  %207 = sext i32 %206 to i64
  %208 = getelementptr inbounds i32, ptr %204, i64 %207
  %209 = load i32, ptr %208, align 4, !tbaa !16
  %210 = and i32 %203, 31
  %211 = shl nuw i32 1, %210
  %212 = and i32 %209, %211
  %213 = icmp eq i32 %212, 0
  %214 = select i1 %213, i32 48, i32 49
  %215 = tail call i32 @putc(i32 noundef %214, ptr noundef %0) #44
  %216 = add i32 %203, 1
  %217 = icmp eq i32 %203, %199
  br i1 %217, label %218, label %202

218:                                              ; preds = %202, %191
  %219 = tail call i32 @fputc(i32 10, ptr %0)
  br label %220

220:                                              ; preds = %218, %187
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @print_cube(ptr nocapture noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2) #14 {
  %4 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %13, label %6

6:                                                ; preds = %13, %3
  %7 = phi i32 [ %4, %3 ], [ %30, %13 ]
  %8 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %9 = add nsw i32 %8, -1
  %10 = icmp slt i32 %7, %9
  br i1 %10, label %11, label %68

11:                                               ; preds = %6
  %12 = sext i32 %7 to i64
  br label %32

13:                                               ; preds = %13, %3
  %14 = phi i32 [ %29, %13 ], [ 0, %3 ]
  %15 = shl nuw nsw i32 %14, 1
  %16 = lshr i32 %14, 4
  %17 = add nuw nsw i32 %16, 1
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds i32, ptr %1, i64 %18
  %20 = load i32, ptr %19, align 4, !tbaa !16
  %21 = and i32 %15, 30
  %22 = lshr i32 %20, %21
  %23 = and i32 %22, 3
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds [5 x i8], ptr @.str.34.64, i64 0, i64 %24
  %26 = load i8, ptr %25, align 1, !tbaa !56
  %27 = sext i8 %26 to i32
  %28 = tail call i32 @putc(i32 noundef %27, ptr noundef %0) #44
  %29 = add nuw nsw i32 %14, 1
  %30 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %31 = icmp slt i32 %29, %30
  br i1 %31, label %13, label %6

32:                                               ; preds = %62, %11
  %33 = phi i64 [ %12, %11 ], [ %63, %62 ]
  %34 = tail call i32 @putc(i32 noundef 32, ptr noundef %0) #44
  %35 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %36 = getelementptr inbounds i32, ptr %35, i64 %33
  %37 = load i32, ptr %36, align 4, !tbaa !16
  %38 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  %39 = getelementptr inbounds i32, ptr %38, i64 %33
  %40 = load i32, ptr %39, align 4, !tbaa !16
  %41 = icmp sgt i32 %37, %40
  br i1 %41, label %62, label %42

42:                                               ; preds = %42, %32
  %43 = phi i32 [ %57, %42 ], [ %37, %32 ]
  %44 = ashr i32 %43, 5
  %45 = add nsw i32 %44, 1
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds i32, ptr %1, i64 %46
  %48 = load i32, ptr %47, align 4, !tbaa !16
  %49 = and i32 %43, 31
  %50 = lshr i32 %48, %49
  %51 = and i32 %50, 1
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds [3 x i8], ptr @.str.1.58, i64 0, i64 %52
  %54 = load i8, ptr %53, align 1, !tbaa !56
  %55 = sext i8 %54 to i32
  %56 = tail call i32 @putc(i32 noundef %55, ptr noundef %0) #44
  %57 = add nsw i32 %43, 1
  %58 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  %59 = getelementptr inbounds i32, ptr %58, i64 %33
  %60 = load i32, ptr %59, align 4, !tbaa !16
  %61 = icmp slt i32 %43, %60
  br i1 %61, label %42, label %62

62:                                               ; preds = %42, %32
  %63 = add nsw i64 %33, 1
  %64 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %65 = add nsw i32 %64, -1
  %66 = sext i32 %65 to i64
  %67 = icmp slt i64 %63, %66
  br i1 %67, label %32, label %68

68:                                               ; preds = %62, %6
  %69 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %70 = icmp eq i32 %69, -1
  br i1 %70, label %100, label %71

71:                                               ; preds = %68
  %72 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  %73 = sext i32 %69 to i64
  %74 = getelementptr inbounds i32, ptr %72, i64 %73
  %75 = load i32, ptr %74, align 4, !tbaa !16
  %76 = tail call i32 @putc(i32 noundef 32, ptr noundef %0) #44
  %77 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %78 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds i32, ptr %77, i64 %79
  %81 = load i32, ptr %80, align 4, !tbaa !16
  %82 = icmp sgt i32 %81, %75
  br i1 %82, label %100, label %83

83:                                               ; preds = %83, %71
  %84 = phi i32 [ %98, %83 ], [ %81, %71 ]
  %85 = ashr i32 %84, 5
  %86 = add nsw i32 %85, 1
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds i32, ptr %1, i64 %87
  %89 = load i32, ptr %88, align 4, !tbaa !16
  %90 = and i32 %84, 31
  %91 = lshr i32 %89, %90
  %92 = and i32 %91, 1
  %93 = zext i32 %92 to i64
  %94 = getelementptr inbounds i8, ptr %2, i64 %93
  %95 = load i8, ptr %94, align 1, !tbaa !56
  %96 = sext i8 %95 to i32
  %97 = tail call i32 @putc(i32 noundef %96, ptr noundef %0) #44
  %98 = add i32 %84, 1
  %99 = icmp eq i32 %84, %75
  br i1 %99, label %100, label %83

100:                                              ; preds = %83, %71, %68
  %101 = tail call i32 @putc(i32 noundef 10, ptr noundef %0) #44
  ret void
}

; Function Attrs: nofree nounwind
declare noundef i32 @fputc(i32 noundef, ptr nocapture noundef) local_unnamed_addr #10

; Function Attrs: nounwind optsize uwtable
define internal i32 @kiss_print_cube(ptr nocapture noundef %0, ptr nocapture noundef readonly %1, ptr noundef %2, ptr nocapture noundef readonly %3) #0 {
  %5 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %15, label %7

7:                                                ; preds = %15, %4
  %8 = phi i32 [ %5, %4 ], [ %32, %15 ]
  %9 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %10 = add nsw i32 %9, -1
  %11 = icmp slt i32 %8, %10
  br i1 %11, label %12, label %92

12:                                               ; preds = %7
  %13 = getelementptr inbounds %struct.PLA_t, ptr %1, i64 0, i32 7
  %14 = sext i32 %8 to i64
  br label %34

15:                                               ; preds = %15, %4
  %16 = phi i32 [ %31, %15 ], [ 0, %4 ]
  %17 = shl nuw nsw i32 %16, 1
  %18 = lshr i32 %16, 4
  %19 = add nuw nsw i32 %18, 1
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds i32, ptr %2, i64 %20
  %22 = load i32, ptr %21, align 4, !tbaa !16
  %23 = and i32 %17, 30
  %24 = lshr i32 %22, %23
  %25 = and i32 %24, 3
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds [5 x i8], ptr @.str.34.64, i64 0, i64 %26
  %28 = load i8, ptr %27, align 1, !tbaa !56
  %29 = sext i8 %28 to i32
  %30 = tail call i32 @putc(i32 noundef %29, ptr noundef %0) #44
  %31 = add nuw nsw i32 %16, 1
  %32 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %33 = icmp slt i32 %31, %32
  br i1 %33, label %15, label %7

34:                                               ; preds = %86, %12
  %35 = phi i64 [ %14, %12 ], [ %87, %86 ]
  %36 = tail call i32 @putc(i32 noundef 32, ptr noundef %0) #44
  %37 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %38 = getelementptr inbounds ptr, ptr %37, i64 %35
  %39 = load ptr, ptr %38, align 8, !tbaa !13
  %40 = tail call i32 (ptr, ptr, ...) @setp_implies(ptr noundef %39, ptr noundef %2) #43
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %44, label %42

42:                                               ; preds = %34
  %43 = tail call i32 @putc(i32 noundef 45, ptr noundef %0) #44
  br label %86

44:                                               ; preds = %34
  %45 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %46 = getelementptr inbounds i32, ptr %45, i64 %35
  %47 = load i32, ptr %46, align 4, !tbaa !16
  %48 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  %49 = getelementptr inbounds i32, ptr %48, i64 %35
  %50 = load i32, ptr %49, align 4, !tbaa !16
  %51 = icmp sgt i32 %47, %50
  br i1 %51, label %78, label %52

52:                                               ; preds = %69, %44
  %53 = phi ptr [ %70, %69 ], [ %48, %44 ]
  %54 = phi i32 [ %71, %69 ], [ -1, %44 ]
  %55 = phi i32 [ %72, %69 ], [ %47, %44 ]
  %56 = ashr i32 %55, 5
  %57 = add nsw i32 %56, 1
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds i32, ptr %2, i64 %58
  %60 = load i32, ptr %59, align 4, !tbaa !16
  %61 = and i32 %55, 31
  %62 = shl nuw i32 1, %61
  %63 = and i32 %60, %62
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %69, label %65

65:                                               ; preds = %52
  %66 = icmp eq i32 %54, -1
  br i1 %66, label %69, label %67

67:                                               ; preds = %65
  tail call void (ptr, ...) @fatal(ptr noundef nonnull @.str.43.75) #43
  %68 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  br label %69

69:                                               ; preds = %67, %65, %52
  %70 = phi ptr [ %53, %52 ], [ %68, %67 ], [ %53, %65 ]
  %71 = phi i32 [ %54, %52 ], [ %55, %67 ], [ %55, %65 ]
  %72 = add nsw i32 %55, 1
  %73 = getelementptr inbounds i32, ptr %70, i64 %35
  %74 = load i32, ptr %73, align 4, !tbaa !16
  %75 = icmp slt i32 %55, %74
  br i1 %75, label %52, label %76

76:                                               ; preds = %69
  %.lcssa = phi i32 [ %71, %69 ]
  %77 = icmp eq i32 %.lcssa, -1
  br i1 %77, label %78, label %80

78:                                               ; preds = %76, %44
  %79 = tail call i32 @putc(i32 noundef 126, ptr noundef %0) #44
  br label %86

80:                                               ; preds = %76
  %81 = load ptr, ptr %13, align 8, !tbaa !58
  %82 = sext i32 %.lcssa to i64
  %83 = getelementptr inbounds ptr, ptr %81, i64 %82
  %84 = load ptr, ptr %83, align 8, !tbaa !13
  %85 = tail call i32 @fputs(ptr noundef %84, ptr noundef %0) #44
  br label %86

86:                                               ; preds = %80, %78, %42
  %87 = add nsw i64 %35, 1
  %88 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %89 = add nsw i32 %88, -1
  %90 = sext i32 %89 to i64
  %91 = icmp slt i64 %87, %90
  br i1 %91, label %34, label %92

92:                                               ; preds = %86, %7
  %93 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %94 = icmp eq i32 %93, -1
  br i1 %94, label %125, label %95

95:                                               ; preds = %92
  %96 = tail call i32 @putc(i32 noundef 32, ptr noundef %0) #44
  %97 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %98 = sext i32 %93 to i64
  %99 = getelementptr inbounds i32, ptr %97, i64 %98
  %100 = load i32, ptr %99, align 4, !tbaa !16
  %101 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  %102 = getelementptr inbounds i32, ptr %101, i64 %98
  %103 = load i32, ptr %102, align 4, !tbaa !16
  %104 = icmp sgt i32 %100, %103
  br i1 %104, label %125, label %105

105:                                              ; preds = %105, %95
  %106 = phi i32 [ %120, %105 ], [ %100, %95 ]
  %107 = ashr i32 %106, 5
  %108 = add nsw i32 %107, 1
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds i32, ptr %2, i64 %109
  %111 = load i32, ptr %110, align 4, !tbaa !16
  %112 = and i32 %106, 31
  %113 = lshr i32 %111, %112
  %114 = and i32 %113, 1
  %115 = zext i32 %114 to i64
  %116 = getelementptr inbounds i8, ptr %3, i64 %115
  %117 = load i8, ptr %116, align 1, !tbaa !56
  %118 = sext i8 %117 to i32
  %119 = tail call i32 @putc(i32 noundef %118, ptr noundef %0) #44
  %120 = add nsw i32 %106, 1
  %121 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  %122 = getelementptr inbounds i32, ptr %121, i64 %98
  %123 = load i32, ptr %122, align 4, !tbaa !16
  %124 = icmp slt i32 %106, %123
  br i1 %124, label %105, label %125

125:                                              ; preds = %105, %95, %92
  %126 = tail call i32 @putc(i32 noundef 10, ptr noundef %0) #44
  ret i32 undef
}

; Function Attrs: nofree nounwind optsize
declare noundef i32 @fputs(ptr nocapture noundef readonly, ptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: nounwind optsize uwtable
define internal i32 @makeup_labels(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 7
  %3 = load ptr, ptr %2, align 8, !tbaa !58
  %4 = icmp eq ptr %3, null
  br i1 %4, label %5, label %7

5:                                                ; preds = %1
  %6 = tail call i32 (ptr, ...) @PLA_labels(ptr noundef nonnull %0) #43
  br label %7

7:                                                ; preds = %5, %1
  %8 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %68

10:                                               ; preds = %7
  %11 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  br label %12

12:                                               ; preds = %62, %10
  %13 = phi i32 [ %8, %10 ], [ %63, %62 ]
  %14 = phi ptr [ %11, %10 ], [ %64, %62 ]
  %15 = phi i64 [ 0, %10 ], [ %65, %62 ]
  %16 = getelementptr inbounds i32, ptr %14, i64 %15
  %17 = load i32, ptr %16, align 4, !tbaa !16
  %18 = icmp sgt i32 %17, 0
  br i1 %18, label %19, label %62

19:                                               ; preds = %12
  %20 = trunc i64 %15 to i32
  %21 = trunc i64 %15 to i32
  %22 = trunc i64 %15 to i32
  br label %23

23:                                               ; preds = %54, %19
  %24 = phi i32 [ %55, %54 ], [ 0, %19 ]
  %25 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %26 = getelementptr inbounds i32, ptr %25, i64 %15
  %27 = load i32, ptr %26, align 4, !tbaa !16
  %28 = add nsw i32 %27, %24
  %29 = load ptr, ptr %2, align 8, !tbaa !58
  %30 = sext i32 %28 to i64
  %31 = getelementptr inbounds ptr, ptr %29, i64 %30
  %32 = load ptr, ptr %31, align 8, !tbaa !13
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %54

34:                                               ; preds = %23
  %35 = tail call noalias dereferenceable_or_null(15) ptr @malloc(i64 noundef 15) #42
  store ptr %35, ptr %31, align 8, !tbaa !13
  %36 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %37 = sext i32 %36 to i64
  %38 = icmp slt i64 %15, %37
  br i1 %38, label %39, label %49

39:                                               ; preds = %34
  %40 = and i32 %24, 1
  %41 = icmp eq i32 %40, 0
  %42 = load ptr, ptr %2, align 8, !tbaa !58
  %43 = getelementptr inbounds ptr, ptr %42, i64 %30
  %44 = load ptr, ptr %43, align 8, !tbaa !13
  br i1 %41, label %45, label %47

45:                                               ; preds = %39
  %46 = tail call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %44, ptr noundef nonnull dereferenceable(1) @.str.40.81, i32 noundef %22) #43
  br label %54

47:                                               ; preds = %39
  %48 = tail call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %44, ptr noundef nonnull dereferenceable(1) @.str.41.82, i32 noundef %21) #43
  br label %54

49:                                               ; preds = %34
  %50 = load ptr, ptr %2, align 8, !tbaa !58
  %51 = getelementptr inbounds ptr, ptr %50, i64 %30
  %52 = load ptr, ptr %51, align 8, !tbaa !13
  %53 = tail call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %52, ptr noundef nonnull dereferenceable(1) @.str.42.83, i32 noundef %20, i32 noundef %24) #43
  br label %54

54:                                               ; preds = %49, %47, %45, %23
  %55 = add nuw nsw i32 %24, 1
  %56 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %57 = getelementptr inbounds i32, ptr %56, i64 %15
  %58 = load i32, ptr %57, align 4, !tbaa !16
  %59 = icmp slt i32 %55, %58
  br i1 %59, label %23, label %60

60:                                               ; preds = %54
  %.lcssa = phi ptr [ %56, %54 ]
  %61 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  br label %62

62:                                               ; preds = %60, %12
  %63 = phi i32 [ %61, %60 ], [ %13, %12 ]
  %64 = phi ptr [ %.lcssa, %60 ], [ %14, %12 ]
  %65 = add nuw nsw i64 %15, 1
  %66 = sext i32 %63 to i64
  %67 = icmp slt i64 %65, %66
  br i1 %67, label %12, label %68

68:                                               ; preds = %62, %7
  ret i32 undef
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @pls_label(ptr nocapture noundef readonly %0, ptr nocapture noundef %1) #14 {
  %3 = tail call i64 @fwrite(ptr nonnull @.str.24, i64 6, i64 1, ptr %1)
  %4 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %59

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 7
  %8 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  br label %9

9:                                                ; preds = %52, %6
  %10 = phi i32 [ %4, %6 ], [ %53, %52 ]
  %11 = phi ptr [ %8, %6 ], [ %54, %52 ]
  %12 = phi i64 [ 0, %6 ], [ %56, %52 ]
  %13 = phi i32 [ 6, %6 ], [ %55, %52 ]
  %14 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %15 = getelementptr inbounds i32, ptr %14, i64 %12
  %16 = load i32, ptr %15, align 4, !tbaa !16
  %17 = getelementptr inbounds i32, ptr %11, i64 %12
  %18 = load i32, ptr %17, align 4, !tbaa !16
  %19 = icmp sgt i32 %16, %18
  br i1 %19, label %52, label %20

20:                                               ; preds = %9
  %21 = sext i32 %16 to i64
  br label %22

22:                                               ; preds = %37, %20
  %23 = phi i64 [ %21, %20 ], [ %44, %37 ]
  %24 = phi i32 [ %13, %20 ], [ %43, %37 ]
  %25 = load ptr, ptr %7, align 8, !tbaa !58
  %26 = getelementptr inbounds ptr, ptr %25, i64 %23
  %27 = load ptr, ptr %26, align 8, !tbaa !13
  %28 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %27) #48
  %29 = trunc i64 %28 to i32
  %30 = add nsw i32 %24, %29
  %31 = icmp sgt i32 %30, 75
  br i1 %31, label %32, label %34

32:                                               ; preds = %22
  %33 = tail call i64 @fwrite(ptr nonnull @.str.21.88, i64 3, i64 1, ptr %1)
  br label %37

34:                                               ; preds = %22
  %35 = tail call i32 @putc(i32 noundef 32, ptr noundef %1) #44
  %36 = add nsw i32 %24, 1
  br label %37

37:                                               ; preds = %34, %32
  %38 = phi i32 [ 0, %32 ], [ %36, %34 ]
  %39 = load ptr, ptr %7, align 8, !tbaa !58
  %40 = getelementptr inbounds ptr, ptr %39, i64 %23
  %41 = load ptr, ptr %40, align 8, !tbaa !13
  %42 = tail call i32 @fputs(ptr %41, ptr %1)
  %43 = add nsw i32 %38, %29
  %44 = add nsw i64 %23, 1
  %45 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  %46 = getelementptr inbounds i32, ptr %45, i64 %12
  %47 = load i32, ptr %46, align 4, !tbaa !16
  %48 = sext i32 %47 to i64
  %49 = icmp slt i64 %23, %48
  br i1 %49, label %22, label %50

50:                                               ; preds = %37
  %.lcssa1 = phi i32 [ %43, %37 ]
  %.lcssa = phi ptr [ %45, %37 ]
  %51 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  br label %52

52:                                               ; preds = %50, %9
  %53 = phi i32 [ %10, %9 ], [ %51, %50 ]
  %54 = phi ptr [ %11, %9 ], [ %.lcssa, %50 ]
  %55 = phi i32 [ %13, %9 ], [ %.lcssa1, %50 ]
  %56 = add nuw nsw i64 %12, 1
  %57 = sext i32 %53 to i64
  %58 = icmp slt i64 %56, %57
  br i1 %58, label %9, label %59

59:                                               ; preds = %52, %2
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @pls_group(ptr nocapture noundef readonly %0, ptr nocapture noundef %1) #14 {
  %3 = tail call i64 @fwrite(ptr nonnull @.str.19.86, i64 7, i64 1, ptr %1)
  %4 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %5 = icmp sgt i32 %4, 1
  br i1 %5, label %6, label %61

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 7
  br label %8

8:                                                ; preds = %52, %6
  %9 = phi i64 [ 0, %6 ], [ %56, %52 ]
  %10 = phi i32 [ 6, %6 ], [ %55, %52 ]
  %11 = tail call i64 @fwrite(ptr nonnull @.str.20.87, i64 2, i64 1, ptr %1)
  %12 = add nsw i32 %10, 2
  %13 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %14 = getelementptr inbounds i32, ptr %13, i64 %9
  %15 = load i32, ptr %14, align 4, !tbaa !16
  %16 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  %17 = getelementptr inbounds i32, ptr %16, i64 %9
  %18 = load i32, ptr %17, align 4, !tbaa !16
  %19 = icmp sgt i32 %15, %18
  br i1 %19, label %52, label %20

20:                                               ; preds = %8
  %21 = sext i32 %15 to i64
  br label %22

22:                                               ; preds = %39, %20
  %23 = phi i64 [ %21, %20 ], [ %46, %39 ]
  %24 = phi i32 [ %12, %20 ], [ %45, %39 ]
  %25 = load ptr, ptr %7, align 8, !tbaa !58
  %26 = getelementptr inbounds ptr, ptr %25, i64 %23
  %27 = load ptr, ptr %26, align 8, !tbaa !13
  %28 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %27) #48
  %29 = trunc i64 %28 to i32
  %30 = add nsw i32 %24, %29
  %31 = icmp sgt i32 %30, 75
  br i1 %31, label %32, label %34

32:                                               ; preds = %22
  %33 = tail call i64 @fwrite(ptr nonnull @.str.21.88, i64 3, i64 1, ptr %1)
  br label %39

34:                                               ; preds = %22
  %35 = icmp eq i64 %23, 0
  br i1 %35, label %39, label %36

36:                                               ; preds = %34
  %37 = tail call i32 @putc(i32 noundef 32, ptr noundef %1) #44
  %38 = add nsw i32 %24, 1
  br label %39

39:                                               ; preds = %36, %34, %32
  %40 = phi i32 [ 0, %32 ], [ %38, %36 ], [ %24, %34 ]
  %41 = load ptr, ptr %7, align 8, !tbaa !58
  %42 = getelementptr inbounds ptr, ptr %41, i64 %23
  %43 = load ptr, ptr %42, align 8, !tbaa !13
  %44 = tail call i32 @fputs(ptr %43, ptr %1)
  %45 = add nsw i32 %40, %29
  %46 = add nsw i64 %23, 1
  %47 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  %48 = getelementptr inbounds i32, ptr %47, i64 %9
  %49 = load i32, ptr %48, align 4, !tbaa !16
  %50 = sext i32 %49 to i64
  %51 = icmp slt i64 %23, %50
  br i1 %51, label %22, label %52

52:                                               ; preds = %39, %8
  %53 = phi i32 [ %12, %8 ], [ %45, %39 ]
  %54 = tail call i32 @fputc(i32 41, ptr %1)
  %55 = add nsw i32 %53, 1
  %56 = add nuw nsw i64 %9, 1
  %57 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %58 = add nsw i32 %57, -1
  %59 = sext i32 %58 to i64
  %60 = icmp slt i64 %56, %59
  br i1 %60, label %8, label %61

61:                                               ; preds = %52, %2
  %62 = tail call i32 @fputc(i32 10, ptr %1)
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @print_expanded_cube(ptr nocapture noundef %0, ptr nocapture noundef readonly %1, ptr noundef readonly %2) #14 {
  %4 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %8

6:                                                ; preds = %3
  %7 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  br label %16

8:                                                ; preds = %48, %3
  %9 = phi i32 [ %4, %3 ], [ %49, %48 ]
  %10 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %11 = add nsw i32 %10, -1
  %12 = icmp slt i32 %9, %11
  br i1 %12, label %13, label %93

13:                                               ; preds = %8
  %14 = sext i32 %9 to i64
  %15 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  br label %54

16:                                               ; preds = %48, %6
  %17 = phi i32 [ %4, %6 ], [ %49, %48 ]
  %18 = phi ptr [ %7, %6 ], [ %50, %48 ]
  %19 = phi i64 [ 0, %6 ], [ %51, %48 ]
  %20 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %21 = getelementptr inbounds i32, ptr %20, i64 %19
  %22 = load i32, ptr %21, align 4, !tbaa !16
  %23 = getelementptr inbounds i32, ptr %18, i64 %19
  %24 = load i32, ptr %23, align 4, !tbaa !16
  %25 = icmp sgt i32 %22, %24
  br i1 %25, label %48, label %26

26:                                               ; preds = %26, %16
  %27 = phi i32 [ %41, %26 ], [ %22, %16 ]
  %28 = ashr i32 %27, 5
  %29 = add nsw i32 %28, 1
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds i32, ptr %1, i64 %30
  %32 = load i32, ptr %31, align 4, !tbaa !16
  %33 = and i32 %27, 31
  %34 = lshr i32 %32, %33
  %35 = and i32 %34, 1
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds [3 x i8], ptr @.str.3.60, i64 0, i64 %36
  %38 = load i8, ptr %37, align 1, !tbaa !56
  %39 = sext i8 %38 to i32
  %40 = tail call i32 @putc(i32 noundef %39, ptr noundef %0) #44
  %41 = add nsw i32 %27, 1
  %42 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  %43 = getelementptr inbounds i32, ptr %42, i64 %19
  %44 = load i32, ptr %43, align 4, !tbaa !16
  %45 = icmp slt i32 %27, %44
  br i1 %45, label %26, label %46

46:                                               ; preds = %26
  %.lcssa1 = phi ptr [ %42, %26 ]
  %47 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  br label %48

48:                                               ; preds = %46, %16
  %49 = phi i32 [ %47, %46 ], [ %17, %16 ]
  %50 = phi ptr [ %.lcssa1, %46 ], [ %18, %16 ]
  %51 = add nuw nsw i64 %19, 1
  %52 = sext i32 %49 to i64
  %53 = icmp slt i64 %51, %52
  br i1 %53, label %16, label %8

54:                                               ; preds = %86, %13
  %55 = phi i32 [ %10, %13 ], [ %87, %86 ]
  %56 = phi ptr [ %15, %13 ], [ %88, %86 ]
  %57 = phi i64 [ %14, %13 ], [ %89, %86 ]
  %58 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %59 = getelementptr inbounds i32, ptr %58, i64 %57
  %60 = load i32, ptr %59, align 4, !tbaa !16
  %61 = getelementptr inbounds i32, ptr %56, i64 %57
  %62 = load i32, ptr %61, align 4, !tbaa !16
  %63 = icmp sgt i32 %60, %62
  br i1 %63, label %86, label %64

64:                                               ; preds = %64, %54
  %65 = phi i32 [ %79, %64 ], [ %60, %54 ]
  %66 = ashr i32 %65, 5
  %67 = add nsw i32 %66, 1
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i32, ptr %1, i64 %68
  %70 = load i32, ptr %69, align 4, !tbaa !16
  %71 = and i32 %65, 31
  %72 = lshr i32 %70, %71
  %73 = and i32 %72, 1
  %74 = zext i32 %73 to i64
  %75 = getelementptr inbounds [3 x i8], ptr @.str.35.85, i64 0, i64 %74
  %76 = load i8, ptr %75, align 1, !tbaa !56
  %77 = sext i8 %76 to i32
  %78 = tail call i32 @putc(i32 noundef %77, ptr noundef %0) #44
  %79 = add nsw i32 %65, 1
  %80 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  %81 = getelementptr inbounds i32, ptr %80, i64 %57
  %82 = load i32, ptr %81, align 4, !tbaa !16
  %83 = icmp slt i32 %65, %82
  br i1 %83, label %64, label %84

84:                                               ; preds = %64
  %.lcssa = phi ptr [ %80, %64 ]
  %85 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  br label %86

86:                                               ; preds = %84, %54
  %87 = phi i32 [ %85, %84 ], [ %55, %54 ]
  %88 = phi ptr [ %.lcssa, %84 ], [ %56, %54 ]
  %89 = add nsw i64 %57, 1
  %90 = add nsw i32 %87, -1
  %91 = sext i32 %90 to i64
  %92 = icmp slt i64 %89, %91
  br i1 %92, label %54, label %93

93:                                               ; preds = %86, %8
  %94 = phi i32 [ %11, %8 ], [ %90, %86 ]
  %95 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %96 = icmp eq i32 %95, -1
  br i1 %96, label %141, label %97

97:                                               ; preds = %93
  %98 = tail call i32 @putc(i32 noundef 32, ptr noundef %0) #44
  %99 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %100 = sext i32 %94 to i64
  %101 = getelementptr inbounds i32, ptr %99, i64 %100
  %102 = load i32, ptr %101, align 4, !tbaa !16
  %103 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  %104 = getelementptr inbounds i32, ptr %103, i64 %100
  %105 = load i32, ptr %104, align 4, !tbaa !16
  %106 = icmp sgt i32 %102, %105
  br i1 %106, label %141, label %107

107:                                              ; preds = %97
  %108 = icmp eq ptr %2, null
  br label %109

109:                                              ; preds = %124, %107
  %110 = phi i32 [ %102, %107 ], [ %136, %124 ]
  %111 = ashr i32 %110, 5
  %112 = add nsw i32 %111, 1
  %113 = sext i32 %112 to i64
  br i1 %108, label %114, label %116

114:                                              ; preds = %109
  %115 = and i32 %110, 31
  br label %124

116:                                              ; preds = %109
  %117 = getelementptr inbounds i32, ptr %2, i64 %113
  %118 = load i32, ptr %117, align 4, !tbaa !16
  %119 = and i32 %110, 31
  %120 = shl nuw i32 1, %119
  %121 = and i32 %118, %120
  %122 = icmp eq i32 %121, 0
  %123 = select i1 %122, ptr @.str.5.62, ptr @.str.3.60
  br label %124

124:                                              ; preds = %116, %114
  %125 = phi i32 [ %115, %114 ], [ %119, %116 ]
  %126 = phi ptr [ @.str.3.60, %114 ], [ %123, %116 ]
  %127 = getelementptr inbounds i32, ptr %1, i64 %113
  %128 = load i32, ptr %127, align 4, !tbaa !16
  %129 = lshr i32 %128, %125
  %130 = and i32 %129, 1
  %131 = zext i32 %130 to i64
  %132 = getelementptr inbounds i8, ptr %126, i64 %131
  %133 = load i8, ptr %132, align 1, !tbaa !56
  %134 = sext i8 %133 to i32
  %135 = tail call i32 @putc(i32 noundef %134, ptr noundef %0) #44
  %136 = add nsw i32 %110, 1
  %137 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  %138 = getelementptr inbounds i32, ptr %137, i64 %100
  %139 = load i32, ptr %138, align 4, !tbaa !16
  %140 = icmp slt i32 %110, %139
  br i1 %140, label %109, label %141

141:                                              ; preds = %124, %97, %93
  %142 = tail call i32 @putc(i32 noundef 10, ptr noundef %0) #44
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal ptr @fmt_cube(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr noundef returned writeonly %2) #24 {
  %4 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %14, label %6

6:                                                ; preds = %14, %3
  %7 = phi i32 [ 0, %3 ], [ %30, %14 ]
  %8 = phi i32 [ %4, %3 ], [ %32, %14 ]
  %9 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %10 = add nsw i32 %9, -1
  %11 = icmp slt i32 %8, %10
  br i1 %11, label %12, label %79

12:                                               ; preds = %6
  %13 = sext i32 %8 to i64
  br label %34

14:                                               ; preds = %14, %3
  %15 = phi i64 [ %29, %14 ], [ 0, %3 ]
  %16 = trunc i64 %15 to i32
  %17 = shl nuw nsw i32 %16, 1
  %18 = lshr i32 %16, 4
  %19 = add nuw nsw i32 %18, 1
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds i32, ptr %0, i64 %20
  %22 = load i32, ptr %21, align 4, !tbaa !16
  %23 = and i32 %17, 30
  %24 = lshr i32 %22, %23
  %25 = and i32 %24, 3
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds [5 x i8], ptr @.str.34.64, i64 0, i64 %26
  %28 = load i8, ptr %27, align 1, !tbaa !56
  %29 = add nuw nsw i64 %15, 1
  %30 = trunc i64 %29 to i32
  %31 = getelementptr inbounds i8, ptr %2, i64 %15
  store i8 %28, ptr %31, align 1, !tbaa !56
  %32 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %33 = icmp sgt i32 %32, %30
  br i1 %33, label %14, label %6

34:                                               ; preds = %72, %12
  %35 = phi i64 [ %13, %12 ], [ %74, %72 ]
  %36 = phi i32 [ %7, %12 ], [ %73, %72 ]
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds i8, ptr %2, i64 %37
  store i8 32, ptr %38, align 1, !tbaa !56
  %39 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %40 = getelementptr inbounds i32, ptr %39, i64 %35
  %41 = load i32, ptr %40, align 4, !tbaa !16
  %42 = add i32 %36, 1
  %43 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  %44 = getelementptr inbounds i32, ptr %43, i64 %35
  %45 = load i32, ptr %44, align 4, !tbaa !16
  %46 = icmp sgt i32 %41, %45
  br i1 %46, label %72, label %47

47:                                               ; preds = %34
  %48 = sext i32 %42 to i64
  br label %49

49:                                               ; preds = %49, %47
  %50 = phi i64 [ %48, %47 ], [ %65, %49 ]
  %51 = phi i32 [ %41, %47 ], [ %64, %49 ]
  %52 = ashr i32 %51, 5
  %53 = add nsw i32 %52, 1
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds i32, ptr %0, i64 %54
  %56 = load i32, ptr %55, align 4, !tbaa !16
  %57 = and i32 %51, 31
  %58 = lshr i32 %56, %57
  %59 = and i32 %58, 1
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds [3 x i8], ptr @.str.1.58, i64 0, i64 %60
  %62 = load i8, ptr %61, align 1, !tbaa !56
  %63 = getelementptr inbounds i8, ptr %2, i64 %50
  store i8 %62, ptr %63, align 1, !tbaa !56
  %64 = add nsw i32 %51, 1
  %65 = add nsw i64 %50, 1
  %66 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  %67 = getelementptr inbounds i32, ptr %66, i64 %35
  %68 = load i32, ptr %67, align 4, !tbaa !16
  %69 = icmp slt i32 %51, %68
  br i1 %69, label %49, label %70

70:                                               ; preds = %49
  %.lcssa1 = phi i64 [ %65, %49 ]
  %71 = trunc i64 %.lcssa1 to i32
  br label %72

72:                                               ; preds = %70, %34
  %73 = phi i32 [ %42, %34 ], [ %71, %70 ]
  %74 = add nsw i64 %35, 1
  %75 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %76 = add nsw i32 %75, -1
  %77 = sext i32 %76 to i64
  %78 = icmp slt i64 %74, %77
  br i1 %78, label %34, label %79

79:                                               ; preds = %72, %6
  %80 = phi i32 [ %7, %6 ], [ %73, %72 ]
  %81 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %82 = icmp eq i32 %81, -1
  br i1 %82, label %119, label %83

83:                                               ; preds = %79
  %84 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  %85 = sext i32 %81 to i64
  %86 = getelementptr inbounds i32, ptr %84, i64 %85
  %87 = load i32, ptr %86, align 4, !tbaa !16
  %88 = sext i32 %80 to i64
  %89 = getelementptr inbounds i8, ptr %2, i64 %88
  store i8 32, ptr %89, align 1, !tbaa !56
  %90 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %91 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds i32, ptr %90, i64 %92
  %94 = load i32, ptr %93, align 4, !tbaa !16
  %95 = add i32 %80, 1
  %96 = icmp sgt i32 %94, %87
  br i1 %96, label %119, label %97

97:                                               ; preds = %83
  %98 = sext i32 %95 to i64
  br label %99

99:                                               ; preds = %99, %97
  %100 = phi i64 [ %98, %97 ], [ %115, %99 ]
  %101 = phi i32 [ %94, %97 ], [ %114, %99 ]
  %102 = ashr i32 %101, 5
  %103 = add nsw i32 %102, 1
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds i32, ptr %0, i64 %104
  %106 = load i32, ptr %105, align 4, !tbaa !16
  %107 = and i32 %101, 31
  %108 = lshr i32 %106, %107
  %109 = and i32 %108, 1
  %110 = zext i32 %109 to i64
  %111 = getelementptr inbounds i8, ptr %1, i64 %110
  %112 = load i8, ptr %111, align 1, !tbaa !56
  %113 = getelementptr inbounds i8, ptr %2, i64 %100
  store i8 %112, ptr %113, align 1, !tbaa !56
  %114 = add i32 %101, 1
  %115 = add nsw i64 %100, 1
  %116 = icmp eq i32 %101, %87
  br i1 %116, label %117, label %99

117:                                              ; preds = %99
  %.lcssa = phi i64 [ %115, %99 ]
  %118 = trunc i64 %.lcssa to i32
  br label %119

119:                                              ; preds = %117, %83, %79
  %120 = phi i32 [ %80, %79 ], [ %95, %83 ], [ %118, %117 ]
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds i8, ptr %2, i64 %121
  store i8 0, ptr %122, align 1, !tbaa !56
  ret ptr %2
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal nonnull ptr @pc1(ptr nocapture noundef readonly %0) #21 {
  %2 = tail call ptr @fmt_cube(ptr noundef %0, ptr noundef nonnull @.str.1.58, ptr noundef nonnull @pc1.s1) #44
  ret ptr @pc1.s1
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal nonnull ptr @pc2(ptr nocapture noundef readonly %0) #21 {
  %2 = tail call ptr @fmt_cube(ptr noundef %0, ptr noundef nonnull @.str.1.58, ptr noundef nonnull @pc2.s2) #44
  ret ptr @pc2.s2
}

; Function Attrs: nounwind optsize uwtable
define internal void @debug_print(ptr noundef %0, ptr noundef %1, i32 noundef %2) #0 {
  %4 = getelementptr inbounds ptr, ptr %0, i64 1
  %5 = load ptr, ptr %4, align 8, !tbaa !13
  %6 = ptrtoint ptr %5 to i64
  %7 = ptrtoint ptr %0 to i64
  %8 = sub i64 %6, %7
  %9 = lshr exact i64 %8, 3
  %10 = trunc i64 %9 to i32
  %11 = add i32 %10, -3
  %12 = load i32, ptr @cube, align 8, !tbaa !14
  %13 = icmp slt i32 %12, 33
  %14 = add nsw i32 %12, -1
  %15 = lshr i32 %14, 3
  %16 = and i32 %15, 536870908
  %17 = add nuw nsw i32 %16, 8
  %18 = select i1 %13, i32 8, i32 %17
  %19 = zext i32 %18 to i64
  %20 = tail call noalias ptr @malloc(i64 noundef %19) #42
  %21 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %20, i32 noundef %12) #43
  %22 = load i32, ptr @verbose_debug, align 4, !tbaa !16
  %23 = icmp ne i32 %22, 0
  %24 = icmp eq i32 %2, 0
  %25 = and i1 %24, %23
  br i1 %25, label %26, label %28

26:                                               ; preds = %3
  %27 = tail call i32 @putchar(i32 10)
  br label %28

28:                                               ; preds = %26, %3
  %29 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.36.102, ptr noundef %1, i32 noundef %2, i32 noundef %11) #44
  %30 = load i32, ptr @verbose_debug, align 4, !tbaa !16
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %51, label %32

32:                                               ; preds = %28
  %33 = load ptr, ptr %0, align 8, !tbaa !13
  %34 = tail call ptr @fmt_cube(ptr noundef %33, ptr noundef nonnull @.str.1.58, ptr noundef nonnull @pc1.s1) #44
  %35 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.37.103, ptr noundef nonnull @pc1.s1) #44
  %36 = getelementptr inbounds ptr, ptr %0, i64 2
  %37 = load ptr, ptr %36, align 8, !tbaa !13
  %38 = icmp eq ptr %37, null
  br i1 %38, label %51, label %39

39:                                               ; preds = %39, %32
  %40 = phi ptr [ %49, %39 ], [ %37, %32 ]
  %41 = phi i32 [ %48, %39 ], [ 1, %32 ]
  %42 = phi ptr [ %43, %39 ], [ %36, %32 ]
  %43 = getelementptr inbounds ptr, ptr %42, i64 1
  %44 = load ptr, ptr %0, align 8, !tbaa !13
  %45 = tail call ptr (ptr, ptr, ptr, ...) @set_or(ptr noundef %21, ptr noundef nonnull %40, ptr noundef %44) #43
  %46 = tail call ptr @fmt_cube(ptr noundef %45, ptr noundef nonnull @.str.1.58, ptr noundef nonnull @pc1.s1) #44
  %47 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.38.104, i32 noundef %41, ptr noundef nonnull @pc1.s1) #44
  %48 = add nuw nsw i32 %41, 1
  %49 = load ptr, ptr %43, align 8, !tbaa !13
  %50 = icmp eq ptr %49, null
  br i1 %50, label %51, label %39

51:                                               ; preds = %39, %32, %28
  %52 = icmp eq ptr %21, null
  br i1 %52, label %54, label %53

53:                                               ; preds = %51
  tail call void @free(ptr noundef nonnull %21) #43
  br label %54

54:                                               ; preds = %53, %51
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @debug1_print(ptr nocapture noundef readonly %0, ptr noundef %1, i32 noundef %2) #14 {
  %4 = load i32, ptr @verbose_debug, align 4, !tbaa !16
  %5 = icmp ne i32 %4, 0
  %6 = icmp eq i32 %2, 0
  %7 = and i1 %6, %5
  br i1 %7, label %8, label %10

8:                                                ; preds = %3
  %9 = tail call i32 @putchar(i32 10)
  br label %10

10:                                               ; preds = %8, %3
  %11 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %12 = load i32, ptr %11, align 4, !tbaa !31
  %13 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.36.102, ptr noundef %1, i32 noundef %2, i32 noundef %12) #44
  %14 = load i32, ptr @verbose_debug, align 4, !tbaa !16
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %35, label %16

16:                                               ; preds = %10
  %17 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %18 = load ptr, ptr %17, align 8, !tbaa !33
  %19 = load i32, ptr %11, align 4, !tbaa !31
  %20 = load i32, ptr %0, align 8, !tbaa !34
  %21 = mul nsw i32 %20, %19
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i32, ptr %18, i64 %22
  %24 = icmp sgt i32 %21, 0
  br i1 %24, label %25, label %35

25:                                               ; preds = %25, %16
  %26 = phi i32 [ %28, %25 ], [ 1, %16 ]
  %27 = phi ptr [ %33, %25 ], [ %18, %16 ]
  %28 = add nuw nsw i32 %26, 1
  %29 = tail call ptr @fmt_cube(ptr noundef %27, ptr noundef nonnull @.str.1.58, ptr noundef nonnull @pc1.s1) #44
  %30 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.38.104, i32 noundef %26, ptr noundef nonnull @pc1.s1) #44
  %31 = load i32, ptr %0, align 8, !tbaa !34
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, ptr %27, i64 %32
  %34 = icmp ult ptr %33, %23
  br i1 %34, label %25, label %35

35:                                               ; preds = %25, %16, %10
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @cprint(ptr nocapture noundef readonly %0) #14 {
  %2 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %3 = load ptr, ptr %2, align 8, !tbaa !33
  %4 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %5 = load i32, ptr %4, align 4, !tbaa !31
  %6 = load i32, ptr %0, align 8, !tbaa !34
  %7 = mul nsw i32 %6, %5
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds i32, ptr %3, i64 %8
  %10 = icmp sgt i32 %7, 0
  br i1 %10, label %11, label %19

11:                                               ; preds = %11, %1
  %12 = phi ptr [ %17, %11 ], [ %3, %1 ]
  %13 = tail call ptr @fmt_cube(ptr noundef %12, ptr noundef nonnull @.str.1.58, ptr noundef nonnull @pc1.s1) #44
  %14 = tail call i32 @puts(ptr nonnull dereferenceable(1) @pc1.s1)
  %15 = load i32, ptr %0, align 8, !tbaa !34
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i32, ptr %12, i64 %16
  %18 = icmp ult ptr %17, %9
  br i1 %18, label %11, label %19

19:                                               ; preds = %11, %1
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @sm_row_dominance(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 6
  %3 = load i32, ptr %2, align 8, !tbaa !99
  %4 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 4
  %5 = load ptr, ptr %4, align 8, !tbaa !13
  %6 = icmp eq ptr %5, null
  br i1 %6, label %102, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 3
  %9 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 2
  %10 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 1
  br label %11

11:                                               ; preds = %96, %7
  %12 = phi ptr [ %5, %7 ], [ %98, %96 ]
  %13 = getelementptr inbounds %struct.sm_col_struct, ptr %12, i64 0, i32 3
  %14 = load ptr, ptr %13, align 8, !tbaa !101
  %15 = getelementptr inbounds %struct.sm_element_struct, ptr %14, i64 0, i32 1
  %16 = load i32, ptr %15, align 4, !tbaa !103
  %17 = icmp sgt i32 %16, -1
  br i1 %17, label %18, label %26

18:                                               ; preds = %11
  %19 = load i32, ptr %8, align 8, !tbaa !104
  %20 = icmp slt i32 %16, %19
  br i1 %20, label %21, label %26

21:                                               ; preds = %18
  %22 = load ptr, ptr %9, align 8, !tbaa !105
  %23 = zext i32 %16 to i64
  %24 = getelementptr inbounds ptr, ptr %22, i64 %23
  %25 = load ptr, ptr %24, align 8, !tbaa !13
  br label %26

26:                                               ; preds = %21, %18, %11
  %27 = phi ptr [ %25, %21 ], [ null, %18 ], [ null, %11 ]
  %28 = getelementptr inbounds %struct.sm_element_struct, ptr %14, i64 0, i32 4
  %29 = load ptr, ptr %28, align 8, !tbaa !106
  %30 = icmp eq ptr %29, null
  br i1 %30, label %56, label %31

31:                                               ; preds = %45, %26
  %32 = phi ptr [ %54, %45 ], [ %29, %26 ]
  %33 = phi ptr [ %52, %45 ], [ %27, %26 ]
  %34 = getelementptr inbounds %struct.sm_element_struct, ptr %32, i64 0, i32 1
  %35 = load i32, ptr %34, align 4, !tbaa !103
  %36 = icmp sgt i32 %35, -1
  br i1 %36, label %37, label %45

37:                                               ; preds = %31
  %38 = load i32, ptr %8, align 8, !tbaa !104
  %39 = icmp slt i32 %35, %38
  br i1 %39, label %40, label %45

40:                                               ; preds = %37
  %41 = load ptr, ptr %9, align 8, !tbaa !105
  %42 = zext i32 %35 to i64
  %43 = getelementptr inbounds ptr, ptr %41, i64 %42
  %44 = load ptr, ptr %43, align 8, !tbaa !13
  br label %45

45:                                               ; preds = %40, %37, %31
  %46 = phi ptr [ %44, %40 ], [ null, %37 ], [ null, %31 ]
  %47 = getelementptr inbounds %struct.sm_col_struct, ptr %46, i64 0, i32 1
  %48 = load i32, ptr %47, align 4, !tbaa !37
  %49 = getelementptr inbounds %struct.sm_col_struct, ptr %33, i64 0, i32 1
  %50 = load i32, ptr %49, align 4, !tbaa !37
  %51 = icmp slt i32 %48, %50
  %52 = select i1 %51, ptr %46, ptr %33
  %53 = getelementptr inbounds %struct.sm_element_struct, ptr %32, i64 0, i32 4
  %54 = load ptr, ptr %53, align 8, !tbaa !106
  %55 = icmp eq ptr %54, null
  br i1 %55, label %56, label %31

56:                                               ; preds = %45, %26
  %57 = phi ptr [ %27, %26 ], [ %52, %45 ]
  %58 = getelementptr inbounds %struct.sm_col_struct, ptr %57, i64 0, i32 3
  %59 = load ptr, ptr %58, align 8, !tbaa !39
  %60 = icmp eq ptr %59, null
  br i1 %60, label %96, label %61

61:                                               ; preds = %56
  %62 = getelementptr inbounds %struct.sm_col_struct, ptr %12, i64 0, i32 1
  br label %63

63:                                               ; preds = %94, %61
  %64 = phi ptr [ %59, %61 ], [ %66, %94 ]
  %65 = getelementptr inbounds %struct.sm_element_struct, ptr %64, i64 0, i32 2
  %66 = load ptr, ptr %65, align 8, !tbaa !40
  %67 = load i32, ptr %64, align 8, !tbaa !42
  %68 = icmp sgt i32 %67, -1
  br i1 %68, label %69, label %77

69:                                               ; preds = %63
  %70 = load i32, ptr %10, align 8, !tbaa !107
  %71 = icmp slt i32 %67, %70
  br i1 %71, label %72, label %77

72:                                               ; preds = %69
  %73 = load ptr, ptr %0, align 8, !tbaa !108
  %74 = zext i32 %67 to i64
  %75 = getelementptr inbounds ptr, ptr %73, i64 %74
  %76 = load ptr, ptr %75, align 8, !tbaa !13
  br label %77

77:                                               ; preds = %72, %69, %63
  %78 = phi ptr [ %76, %72 ], [ null, %69 ], [ null, %63 ]
  %79 = getelementptr inbounds %struct.sm_col_struct, ptr %78, i64 0, i32 1
  %80 = load i32, ptr %79, align 4, !tbaa !109
  %81 = load i32, ptr %62, align 4, !tbaa !109
  %82 = icmp sgt i32 %80, %81
  br i1 %82, label %89, label %83

83:                                               ; preds = %77
  %84 = icmp eq i32 %80, %81
  br i1 %84, label %85, label %94

85:                                               ; preds = %83
  %86 = load i32, ptr %78, align 8, !tbaa !110
  %87 = load i32, ptr %12, align 8, !tbaa !110
  %88 = icmp sgt i32 %86, %87
  br i1 %88, label %89, label %94

89:                                               ; preds = %85, %77
  %90 = tail call i32 (ptr, ptr, ...) @sm_row_contains(ptr noundef nonnull %12, ptr noundef nonnull %78) #43
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %94, label %92

92:                                               ; preds = %89
  %93 = load i32, ptr %78, align 8, !tbaa !110
  tail call void (ptr, i32, ...) @sm_delrow(ptr noundef %0, i32 noundef %93) #43
  br label %94

94:                                               ; preds = %92, %89, %85, %83
  %95 = icmp eq ptr %66, null
  br i1 %95, label %96, label %63

96:                                               ; preds = %94, %56
  %97 = getelementptr inbounds %struct.sm_col_struct, ptr %12, i64 0, i32 5
  %98 = load ptr, ptr %97, align 8, !tbaa !13
  %99 = icmp eq ptr %98, null
  br i1 %99, label %100, label %11

100:                                              ; preds = %96
  %101 = load i32, ptr %2, align 8, !tbaa !99
  br label %102

102:                                              ; preds = %100, %1
  %103 = phi i32 [ %101, %100 ], [ %3, %1 ]
  %104 = sub nsw i32 %3, %103
  ret i32 %104
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @sm_col_dominance(ptr noundef %0, ptr noundef readonly %1) #0 {
  %3 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 9
  %4 = load i32, ptr %3, align 8, !tbaa !111
  %5 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !112
  %7 = icmp eq ptr %6, null
  br i1 %7, label %114, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 1
  %10 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 3
  %11 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 2
  %12 = icmp eq ptr %1, null
  br label %13

13:                                               ; preds = %110, %8
  %14 = phi ptr [ %6, %8 ], [ %16, %110 ]
  %15 = getelementptr inbounds %struct.sm_col_struct, ptr %14, i64 0, i32 5
  %16 = load ptr, ptr %15, align 8, !tbaa !113
  %17 = getelementptr inbounds %struct.sm_col_struct, ptr %14, i64 0, i32 3
  %18 = load ptr, ptr %17, align 8, !tbaa !39
  %19 = load i32, ptr %18, align 8, !tbaa !42
  %20 = icmp sgt i32 %19, -1
  br i1 %20, label %21, label %29

21:                                               ; preds = %13
  %22 = load i32, ptr %9, align 8, !tbaa !107
  %23 = icmp slt i32 %19, %22
  br i1 %23, label %24, label %29

24:                                               ; preds = %21
  %25 = load ptr, ptr %0, align 8, !tbaa !108
  %26 = zext i32 %19 to i64
  %27 = getelementptr inbounds ptr, ptr %25, i64 %26
  %28 = load ptr, ptr %27, align 8, !tbaa !13
  br label %29

29:                                               ; preds = %24, %21, %13
  %30 = phi ptr [ %28, %24 ], [ null, %21 ], [ null, %13 ]
  %31 = getelementptr inbounds %struct.sm_element_struct, ptr %18, i64 0, i32 2
  %32 = load ptr, ptr %31, align 8, !tbaa !40
  %33 = icmp eq ptr %32, null
  br i1 %33, label %58, label %34

34:                                               ; preds = %47, %29
  %35 = phi ptr [ %56, %47 ], [ %32, %29 ]
  %36 = phi ptr [ %54, %47 ], [ %30, %29 ]
  %37 = load i32, ptr %35, align 8, !tbaa !42
  %38 = icmp sgt i32 %37, -1
  br i1 %38, label %39, label %47

39:                                               ; preds = %34
  %40 = load i32, ptr %9, align 8, !tbaa !107
  %41 = icmp slt i32 %37, %40
  br i1 %41, label %42, label %47

42:                                               ; preds = %39
  %43 = load ptr, ptr %0, align 8, !tbaa !108
  %44 = zext i32 %37 to i64
  %45 = getelementptr inbounds ptr, ptr %43, i64 %44
  %46 = load ptr, ptr %45, align 8, !tbaa !13
  br label %47

47:                                               ; preds = %42, %39, %34
  %48 = phi ptr [ %46, %42 ], [ null, %39 ], [ null, %34 ]
  %49 = getelementptr inbounds %struct.sm_col_struct, ptr %48, i64 0, i32 1
  %50 = load i32, ptr %49, align 4, !tbaa !109
  %51 = getelementptr inbounds %struct.sm_col_struct, ptr %36, i64 0, i32 1
  %52 = load i32, ptr %51, align 4, !tbaa !109
  %53 = icmp slt i32 %50, %52
  %54 = select i1 %53, ptr %48, ptr %36
  %55 = getelementptr inbounds %struct.sm_element_struct, ptr %35, i64 0, i32 2
  %56 = load ptr, ptr %55, align 8, !tbaa !40
  %57 = icmp eq ptr %56, null
  br i1 %57, label %58, label %34

58:                                               ; preds = %47, %29
  %59 = phi ptr [ %30, %29 ], [ %54, %47 ]
  %60 = getelementptr inbounds %struct.sm_col_struct, ptr %59, i64 0, i32 3
  %61 = load ptr, ptr %60, align 8, !tbaa !13
  %62 = icmp eq ptr %61, null
  br i1 %62, label %110, label %63

63:                                               ; preds = %58
  %64 = getelementptr inbounds %struct.sm_col_struct, ptr %14, i64 0, i32 1
  br label %65

65:                                               ; preds = %106, %63
  %66 = phi ptr [ %61, %63 ], [ %108, %106 ]
  %67 = getelementptr inbounds %struct.sm_element_struct, ptr %66, i64 0, i32 1
  %68 = load i32, ptr %67, align 4, !tbaa !103
  %69 = icmp sgt i32 %68, -1
  br i1 %69, label %70, label %78

70:                                               ; preds = %65
  %71 = load i32, ptr %10, align 8, !tbaa !104
  %72 = icmp slt i32 %68, %71
  br i1 %72, label %73, label %78

73:                                               ; preds = %70
  %74 = load ptr, ptr %11, align 8, !tbaa !105
  %75 = zext i32 %68 to i64
  %76 = getelementptr inbounds ptr, ptr %74, i64 %75
  %77 = load ptr, ptr %76, align 8, !tbaa !13
  br label %78

78:                                               ; preds = %73, %70, %65
  %79 = phi ptr [ %77, %73 ], [ null, %70 ], [ null, %65 ]
  br i1 %12, label %90, label %80

80:                                               ; preds = %78
  %81 = load i32, ptr %79, align 8, !tbaa !35
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds i32, ptr %1, i64 %82
  %84 = load i32, ptr %83, align 4, !tbaa !16
  %85 = load i32, ptr %14, align 8, !tbaa !35
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds i32, ptr %1, i64 %86
  %88 = load i32, ptr %87, align 4, !tbaa !16
  %89 = icmp sgt i32 %84, %88
  br i1 %89, label %106, label %90

90:                                               ; preds = %80, %78
  %91 = getelementptr inbounds %struct.sm_col_struct, ptr %79, i64 0, i32 1
  %92 = load i32, ptr %91, align 4, !tbaa !37
  %93 = load i32, ptr %64, align 4, !tbaa !37
  %94 = icmp sgt i32 %92, %93
  br i1 %94, label %101, label %95

95:                                               ; preds = %90
  %96 = icmp eq i32 %92, %93
  br i1 %96, label %97, label %106

97:                                               ; preds = %95
  %98 = load i32, ptr %79, align 8, !tbaa !35
  %99 = load i32, ptr %14, align 8, !tbaa !35
  %100 = icmp sgt i32 %98, %99
  br i1 %100, label %101, label %106

101:                                              ; preds = %97, %90
  %102 = tail call i32 (ptr, ptr, ...) @sm_col_contains(ptr noundef nonnull %14, ptr noundef nonnull %79) #43
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %106, label %104

104:                                              ; preds = %101
  %105 = load i32, ptr %14, align 8, !tbaa !35
  tail call void (ptr, i32, ...) @sm_delcol(ptr noundef %0, i32 noundef %105) #43
  br label %110

106:                                              ; preds = %101, %97, %95, %80
  %107 = getelementptr inbounds %struct.sm_element_struct, ptr %66, i64 0, i32 4
  %108 = load ptr, ptr %107, align 8, !tbaa !13
  %109 = icmp eq ptr %108, null
  br i1 %109, label %110, label %65

110:                                              ; preds = %106, %104, %58
  %111 = icmp eq ptr %16, null
  br i1 %111, label %112, label %13

112:                                              ; preds = %110
  %113 = load i32, ptr %3, align 8, !tbaa !111
  br label %114

114:                                              ; preds = %112, %2
  %115 = phi i32 [ %113, %112 ], [ %4, %2 ]
  %116 = sub nsw i32 %4, %115
  ret i32 %116
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @find_equiv_outputs(ptr noundef %0) #0 {
  %2 = tail call i32 (ptr, ...) @makeup_labels(ptr noundef %0) #43
  %3 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %4 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds i32, ptr %3, i64 %5
  %7 = load i32, ptr %6, align 4, !tbaa !16
  %8 = sext i32 %7 to i64
  %9 = shl nsw i64 %8, 3
  %10 = tail call noalias ptr @malloc(i64 noundef %9) #42
  %11 = tail call noalias ptr @malloc(i64 noundef %9) #42
  %12 = icmp sgt i32 %7, 0
  br i1 %12, label %13, label %114

13:                                               ; preds = %1
  %14 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 2
  br label %19

15:                                               ; preds = %19
  %.lcssa5 = phi ptr [ %34, %19 ]
  %.lcssa4 = phi i32 [ %35, %19 ]
  %.lcssa3 = phi i32 [ %38, %19 ]
  %16 = icmp sgt i32 %.lcssa3, 1
  br i1 %16, label %17, label %114

17:                                               ; preds = %15
  %18 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 7
  br label %50

19:                                               ; preds = %19, %13
  %20 = phi i64 [ 0, %13 ], [ %33, %19 ]
  %21 = phi i64 [ %5, %13 ], [ %36, %19 ]
  %22 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %23 = getelementptr inbounds i32, ptr %22, i64 %21
  %24 = load i32, ptr %23, align 4, !tbaa !16
  %25 = trunc i64 %20 to i32
  %26 = add nsw i32 %24, %25
  %27 = load ptr, ptr %14, align 8, !tbaa !63
  %28 = tail call ptr (ptr, i32, ...) @cof_output(ptr noundef %27, i32 noundef %26) #43
  %29 = getelementptr inbounds ptr, ptr %11, i64 %20
  store ptr %28, ptr %29, align 8, !tbaa !13
  %30 = tail call ptr (ptr, ...) @cube1list(ptr noundef %28) #43
  %31 = tail call ptr (ptr, ...) @complement(ptr noundef %30) #43
  %32 = getelementptr inbounds ptr, ptr %10, i64 %20
  store ptr %31, ptr %32, align 8, !tbaa !13
  %33 = add nuw nsw i64 %20, 1
  %34 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %35 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, ptr %34, i64 %36
  %38 = load i32, ptr %37, align 4, !tbaa !16
  %39 = sext i32 %38 to i64
  %40 = icmp slt i64 %33, %39
  br i1 %40, label %19, label %15

41:                                               ; preds = %102, %50
  %42 = phi i32 [ %51, %50 ], [ %109, %102 ]
  %43 = phi i32 [ %52, %50 ], [ %106, %102 ]
  %44 = phi ptr [ %53, %50 ], [ %105, %102 ]
  %45 = phi i32 [ %56, %50 ], [ %103, %102 ]
  %46 = add nsw i32 %42, -1
  %47 = sext i32 %46 to i64
  %48 = icmp slt i64 %57, %47
  %49 = add nuw nsw i64 %55, 1
  br i1 %48, label %50, label %112

50:                                               ; preds = %41, %17
  %51 = phi i32 [ %.lcssa3, %17 ], [ %42, %41 ]
  %52 = phi i32 [ %.lcssa4, %17 ], [ %43, %41 ]
  %53 = phi ptr [ %.lcssa5, %17 ], [ %44, %41 ]
  %54 = phi i64 [ 0, %17 ], [ %57, %41 ]
  %55 = phi i64 [ 1, %17 ], [ %49, %41 ]
  %56 = phi i32 [ 0, %17 ], [ %45, %41 ]
  %57 = add nuw nsw i64 %54, 1
  %58 = sext i32 %51 to i64
  %59 = icmp slt i64 %57, %58
  br i1 %59, label %60, label %41

60:                                               ; preds = %50
  %61 = sext i32 %52 to i64
  %62 = getelementptr inbounds ptr, ptr %10, i64 %54
  %63 = load ptr, ptr %62, align 8, !tbaa !13
  %64 = getelementptr inbounds ptr, ptr %11, i64 %54
  %65 = trunc i64 %54 to i32
  br label %66

66:                                               ; preds = %102, %60
  %67 = phi i64 [ %55, %60 ], [ %104, %102 ]
  %68 = phi i64 [ %61, %60 ], [ %107, %102 ]
  %69 = phi i32 [ %56, %60 ], [ %103, %102 ]
  %70 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %71 = getelementptr inbounds i32, ptr %70, i64 %68
  %72 = load i32, ptr %71, align 4, !tbaa !16
  %73 = add nsw i32 %72, %65
  %74 = trunc i64 %67 to i32
  %75 = add nsw i32 %72, %74
  %76 = getelementptr inbounds ptr, ptr %10, i64 %67
  %77 = load ptr, ptr %76, align 8, !tbaa !13
  %78 = tail call i32 @check_equiv(ptr noundef %63, ptr noundef %77) #44, !range !67
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %92

80:                                               ; preds = %66
  %81 = getelementptr inbounds ptr, ptr %11, i64 %67
  %82 = load ptr, ptr %81, align 8, !tbaa !13
  %83 = tail call i32 @check_equiv(ptr noundef %63, ptr noundef %82) #44, !range !67
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %92

85:                                               ; preds = %80
  %86 = load ptr, ptr %64, align 8, !tbaa !13
  %87 = tail call i32 @check_equiv(ptr noundef %86, ptr noundef %77) #44, !range !67
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %92

89:                                               ; preds = %85
  %90 = tail call i32 @check_equiv(ptr noundef %86, ptr noundef %82) #44, !range !67
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %102, label %92

92:                                               ; preds = %89, %85, %80, %66
  %93 = phi ptr [ @.str.109, %66 ], [ @.str.1.110, %80 ], [ @.str.2.111, %85 ], [ @.str.3.112, %89 ]
  %94 = load ptr, ptr %18, align 8, !tbaa !58
  %95 = sext i32 %73 to i64
  %96 = getelementptr inbounds ptr, ptr %94, i64 %95
  %97 = load ptr, ptr %96, align 8, !tbaa !13
  %98 = sext i32 %75 to i64
  %99 = getelementptr inbounds ptr, ptr %94, i64 %98
  %100 = load ptr, ptr %99, align 8, !tbaa !13
  %101 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) %93, i32 noundef %65, i32 noundef %74, ptr noundef %97, ptr noundef %100) #44
  br label %102

102:                                              ; preds = %92, %89
  %103 = phi i32 [ %69, %89 ], [ 1, %92 ]
  %104 = add nuw nsw i64 %67, 1
  %105 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %106 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds i32, ptr %105, i64 %107
  %109 = load i32, ptr %108, align 4, !tbaa !16
  %110 = trunc i64 %104 to i32
  %111 = icmp sgt i32 %109, %110
  br i1 %111, label %66, label %41

112:                                              ; preds = %41
  %.lcssa2 = phi i32 [ %43, %41 ]
  %.lcssa1 = phi ptr [ %44, %41 ]
  %.lcssa = phi i32 [ %45, %41 ]
  %113 = icmp eq i32 %.lcssa, 0
  br i1 %113, label %114, label %118

114:                                              ; preds = %112, %15, %1
  %115 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.113)
  %116 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %117 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  br label %118

118:                                              ; preds = %114, %112
  %119 = phi i32 [ %117, %114 ], [ %.lcssa2, %112 ]
  %120 = phi ptr [ %116, %114 ], [ %.lcssa1, %112 ]
  %121 = sext i32 %119 to i64
  %122 = getelementptr inbounds i32, ptr %120, i64 %121
  %123 = load i32, ptr %122, align 4, !tbaa !16
  %124 = icmp sgt i32 %123, 0
  br i1 %124, label %125, label %139

125:                                              ; preds = %125, %118
  %126 = phi i64 [ %131, %125 ], [ 0, %118 ]
  %127 = getelementptr inbounds ptr, ptr %10, i64 %126
  %128 = load ptr, ptr %127, align 8, !tbaa !13
  tail call void (ptr, ...) @sf_free(ptr noundef %128) #43
  %129 = getelementptr inbounds ptr, ptr %11, i64 %126
  %130 = load ptr, ptr %129, align 8, !tbaa !13
  tail call void (ptr, ...) @sf_free(ptr noundef %130) #43
  %131 = add nuw nsw i64 %126, 1
  %132 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %133 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds i32, ptr %132, i64 %134
  %136 = load i32, ptr %135, align 4, !tbaa !16
  %137 = sext i32 %136 to i64
  %138 = icmp slt i64 %131, %137
  br i1 %138, label %125, label %141

139:                                              ; preds = %118
  %140 = icmp eq ptr %10, null
  br i1 %140, label %142, label %141

141:                                              ; preds = %139, %125
  tail call void @free(ptr noundef nonnull %10) #43
  br label %142

142:                                              ; preds = %141, %139
  %143 = icmp eq ptr %11, null
  br i1 %143, label %145, label %144

144:                                              ; preds = %142
  tail call void @free(ptr noundef nonnull %11) #43
  br label %145

145:                                              ; preds = %144, %142
  ret i32 undef
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @check_equiv(ptr noundef %0, ptr noundef %1) #0 {
  %3 = tail call ptr (ptr, ...) @cube1list(ptr noundef %0) #43
  %4 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 5
  %5 = load ptr, ptr %4, align 8, !tbaa !33
  %6 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 3
  %7 = load i32, ptr %6, align 4, !tbaa !31
  %8 = load i32, ptr %1, align 8, !tbaa !34
  %9 = mul nsw i32 %8, %7
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds i32, ptr %5, i64 %10
  %12 = icmp sgt i32 %9, 0
  br i1 %12, label %13, label %22

13:                                               ; preds = %17, %2
  %14 = phi ptr [ %20, %17 ], [ %5, %2 ]
  %15 = tail call i32 (ptr, ptr, ...) @cube_is_covered(ptr noundef %3, ptr noundef %14) #43
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %51, label %17

17:                                               ; preds = %13
  %18 = load i32, ptr %1, align 8, !tbaa !34
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds i32, ptr %14, i64 %19
  %21 = icmp ult ptr %20, %11
  br i1 %21, label %13, label %22

22:                                               ; preds = %17, %2
  %23 = load ptr, ptr %3, align 8, !tbaa !13
  %24 = icmp eq ptr %23, null
  br i1 %24, label %26, label %25

25:                                               ; preds = %22
  tail call void @free(ptr noundef nonnull %23) #43
  br label %26

26:                                               ; preds = %25, %22
  tail call void @free(ptr noundef nonnull %3) #43
  %27 = tail call ptr (ptr, ...) @cube1list(ptr noundef nonnull %1) #43
  %28 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %29 = load ptr, ptr %28, align 8, !tbaa !33
  %30 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %31 = load i32, ptr %30, align 4, !tbaa !31
  %32 = load i32, ptr %0, align 8, !tbaa !34
  %33 = mul nsw i32 %32, %31
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds i32, ptr %29, i64 %34
  %36 = icmp sgt i32 %33, 0
  br i1 %36, label %37, label %46

37:                                               ; preds = %41, %26
  %38 = phi ptr [ %44, %41 ], [ %29, %26 ]
  %39 = tail call i32 (ptr, ptr, ...) @cube_is_covered(ptr noundef %27, ptr noundef %38) #43
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %51, label %41

41:                                               ; preds = %37
  %42 = load i32, ptr %0, align 8, !tbaa !34
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds i32, ptr %38, i64 %43
  %45 = icmp ult ptr %44, %35
  br i1 %45, label %37, label %46

46:                                               ; preds = %41, %26
  %47 = load ptr, ptr %27, align 8, !tbaa !13
  %48 = icmp eq ptr %47, null
  br i1 %48, label %50, label %49

49:                                               ; preds = %46
  tail call void @free(ptr noundef nonnull %47) #43
  br label %50

50:                                               ; preds = %49, %46
  tail call void @free(ptr noundef nonnull %27) #43
  br label %51

51:                                               ; preds = %50, %37, %13
  %52 = phi i32 [ 1, %50 ], [ 0, %37 ], [ 0, %13 ]
  ret i32 %52
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @espresso(ptr noundef %0, ptr noundef %1, ptr noundef %2) #0 {
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca %struct.cost_struct, align 4
  %7 = alloca %struct.cost_struct, align 4
  store ptr %0, ptr %4, align 8, !tbaa !13
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #45
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %6) #45
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %7) #45
  %8 = getelementptr inbounds %struct.cost_struct, ptr %6, i64 0, i32 2
  %9 = getelementptr inbounds %struct.cost_struct, ptr %6, i64 0, i32 4
  %10 = getelementptr inbounds %struct.cost_struct, ptr %7, i64 0, i32 4
  br label %11

11:                                               ; preds = %164, %3
  %12 = phi ptr [ %13, %164 ], [ %0, %3 ]
  %13 = call ptr (ptr, ...) @sf_save(ptr noundef %12) #43
  %14 = call ptr (ptr, ...) @sf_save(ptr noundef %1) #43
  store ptr %14, ptr %5, align 8, !tbaa !13
  %15 = load i32, ptr @recompute_onset, align 4, !tbaa !16
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %19

17:                                               ; preds = %11
  %18 = load ptr, ptr %4, align 8, !tbaa !13
  br label %31

19:                                               ; preds = %11
  %20 = call i64 (...) @util_cpu_time() #43
  %21 = load ptr, ptr %4, align 8, !tbaa !13
  %22 = call ptr (ptr, ...) @cube1list(ptr noundef %21) #43
  %23 = call ptr (ptr, ...) @simplify(ptr noundef %22) #43
  %24 = load i32, ptr @trace, align 4, !tbaa !16
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %29, label %26

26:                                               ; preds = %19
  %27 = call i64 (...) @util_cpu_time() #43
  %28 = sub nsw i64 %27, %20
  call void (ptr, ptr, i64, ...) @print_trace(ptr noundef %23, ptr noundef nonnull @.str.116, i64 noundef %28) #43
  br label %29

29:                                               ; preds = %26, %19
  %30 = load ptr, ptr %4, align 8, !tbaa !13
  call void (ptr, ...) @sf_free(ptr noundef %30) #43
  store ptr %23, ptr %4, align 8, !tbaa !13
  br label %31

31:                                               ; preds = %29, %17
  %32 = phi ptr [ %18, %17 ], [ %23, %29 ]
  call void (ptr, ptr, ...) @cover_cost(ptr noundef %32, ptr noundef nonnull %6) #43
  %33 = load i32, ptr @unwrap_onset, align 4, !tbaa !16
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %62, label %35

35:                                               ; preds = %31
  %36 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %37 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %38 = add nsw i32 %37, -1
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i32, ptr %36, i64 %39
  %41 = load i32, ptr %40, align 4, !tbaa !16
  %42 = icmp sgt i32 %41, 1
  br i1 %42, label %43, label %62

43:                                               ; preds = %35
  %44 = load i32, ptr %8, align 4
  %45 = load i32, ptr %6, align 4, !tbaa !90
  %46 = mul nsw i32 %45, %41
  %47 = icmp ne i32 %44, %46
  %48 = icmp slt i32 %44, 5000
  %49 = and i1 %48, %47
  br i1 %49, label %50, label %62

50:                                               ; preds = %43
  %51 = call i64 (...) @util_cpu_time() #43
  %52 = load ptr, ptr %4, align 8, !tbaa !13
  %53 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %54 = add nsw i32 %53, -1
  %55 = call ptr (ptr, i32, ...) @unravel(ptr noundef %52, i32 noundef %54) #43
  %56 = call ptr (ptr, ...) @sf_contain(ptr noundef %55) #43
  store ptr %56, ptr %4, align 8, !tbaa !13
  %57 = load i32, ptr @trace, align 4, !tbaa !16
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %62, label %59

59:                                               ; preds = %50
  %60 = call i64 (...) @util_cpu_time() #43
  %61 = sub nsw i64 %60, %51
  call void (ptr, ptr, i64, ...) @print_trace(ptr noundef %56, ptr noundef nonnull @.str.1.117, i64 noundef %61) #43
  br label %62

62:                                               ; preds = %59, %50, %43, %35, %31
  %63 = load ptr, ptr %4, align 8, !tbaa !13
  %64 = getelementptr inbounds %struct.set_family, ptr %63, i64 0, i32 5
  %65 = load ptr, ptr %64, align 8, !tbaa !33
  %66 = getelementptr inbounds %struct.set_family, ptr %63, i64 0, i32 3
  %67 = load i32, ptr %66, align 4, !tbaa !31
  %68 = load i32, ptr %63, align 8, !tbaa !34
  %69 = mul nsw i32 %68, %67
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds i32, ptr %65, i64 %70
  %72 = icmp sgt i32 %69, 0
  br i1 %72, label %73, label %81

73:                                               ; preds = %73, %62
  %74 = phi ptr [ %79, %73 ], [ %65, %62 ]
  %75 = load i32, ptr %74, align 4, !tbaa !16
  %76 = and i32 %75, -32769
  store i32 %76, ptr %74, align 4, !tbaa !16
  %77 = load i32, ptr %63, align 8, !tbaa !34
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds i32, ptr %74, i64 %78
  %80 = icmp ult ptr %79, %71
  br i1 %80, label %73, label %81

81:                                               ; preds = %73, %62
  %82 = call i64 (...) @util_cpu_time() #43
  %83 = load ptr, ptr %4, align 8, !tbaa !13
  %84 = call ptr (ptr, ptr, i32, ...) @expand(ptr noundef %83, ptr noundef %2, i32 noundef 0) #43
  store ptr %84, ptr %4, align 8, !tbaa !13
  call void (i64, i32, ptr, ptr, ...) @totals(i64 noundef %82, i32 noundef 4, ptr noundef %84, ptr noundef nonnull %6) #43
  %85 = call i64 (...) @util_cpu_time() #43
  %86 = load ptr, ptr %4, align 8, !tbaa !13
  %87 = load ptr, ptr %5, align 8, !tbaa !13
  %88 = call ptr (ptr, ptr, ...) @irredundant(ptr noundef %86, ptr noundef %87) #43
  store ptr %88, ptr %4, align 8, !tbaa !13
  call void (i64, i32, ptr, ptr, ...) @totals(i64 noundef %85, i32 noundef 5, ptr noundef %88, ptr noundef nonnull %6) #43
  %89 = load i32, ptr @single_expand, align 4, !tbaa !16
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %150

91:                                               ; preds = %81
  %92 = load i32, ptr @remove_essential, align 4, !tbaa !16
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %97, label %94

94:                                               ; preds = %91
  %95 = call i64 (...) @util_cpu_time() #43
  %96 = call ptr (ptr, ptr, ...) @essential(ptr noundef nonnull %4, ptr noundef nonnull %5) #43
  call void (i64, i32, ptr, ptr, ...) @totals(i64 noundef %95, i32 noundef 3, ptr noundef %96, ptr noundef nonnull %6) #43
  br label %100

97:                                               ; preds = %91
  %98 = load i32, ptr @cube, align 8, !tbaa !14
  %99 = call ptr (i32, i32, ...) @sf_new(i32 noundef 0, i32 noundef %98) #43
  br label %100

100:                                              ; preds = %97, %94
  %101 = phi ptr [ %96, %94 ], [ %99, %97 ]
  %102 = load ptr, ptr %4, align 8, !tbaa !13
  call void (ptr, ptr, ...) @cover_cost(ptr noundef %102, ptr noundef nonnull %6) #43
  br label %103

103:                                              ; preds = %118, %100
  call void (ptr, ptr, ...) @copy_cost(ptr noundef nonnull %6, ptr noundef nonnull %7) #43
  %104 = call i64 (...) @util_cpu_time() #43
  %105 = load ptr, ptr %4, align 8, !tbaa !13
  %106 = load ptr, ptr %5, align 8, !tbaa !13
  %107 = call ptr (ptr, ptr, ...) @reduce(ptr noundef %105, ptr noundef %106) #43
  store ptr %107, ptr %4, align 8, !tbaa !13
  call void (i64, i32, ptr, ptr, ...) @totals(i64 noundef %104, i32 noundef 6, ptr noundef %107, ptr noundef nonnull %6) #43
  %108 = call i64 (...) @util_cpu_time() #43
  %109 = load ptr, ptr %4, align 8, !tbaa !13
  %110 = call ptr (ptr, ptr, i32, ...) @expand(ptr noundef %109, ptr noundef %2, i32 noundef 0) #43
  store ptr %110, ptr %4, align 8, !tbaa !13
  call void (i64, i32, ptr, ptr, ...) @totals(i64 noundef %108, i32 noundef 4, ptr noundef %110, ptr noundef nonnull %6) #43
  %111 = call i64 (...) @util_cpu_time() #43
  %112 = load ptr, ptr %4, align 8, !tbaa !13
  %113 = load ptr, ptr %5, align 8, !tbaa !13
  %114 = call ptr (ptr, ptr, ...) @irredundant(ptr noundef %112, ptr noundef %113) #43
  store ptr %114, ptr %4, align 8, !tbaa !13
  call void (i64, i32, ptr, ptr, ...) @totals(i64 noundef %111, i32 noundef 5, ptr noundef %114, ptr noundef nonnull %6) #43
  %115 = load i32, ptr %6, align 4, !tbaa !90
  %116 = load i32, ptr %7, align 4, !tbaa !90
  %117 = icmp slt i32 %115, %116
  br i1 %117, label %118, label %119

118:                                              ; preds = %138, %133, %103
  br label %103

119:                                              ; preds = %103
  call void (ptr, ptr, ...) @copy_cost(ptr noundef nonnull %6, ptr noundef nonnull %7) #43
  %120 = load i32, ptr @use_super_gasp, align 4, !tbaa !16
  %121 = icmp eq i32 %120, 0
  %122 = load ptr, ptr %4, align 8, !tbaa !13
  %123 = load ptr, ptr %5, align 8, !tbaa !13
  br i1 %121, label %129, label %124

124:                                              ; preds = %119
  %125 = call ptr (ptr, ptr, ptr, ptr, ...) @super_gasp(ptr noundef %122, ptr noundef %123, ptr noundef %2, ptr noundef nonnull %6) #43
  store ptr %125, ptr %4, align 8, !tbaa !13
  %126 = load i32, ptr %6, align 4, !tbaa !90
  %127 = load i32, ptr %7, align 4, !tbaa !90
  %128 = icmp slt i32 %126, %127
  br i1 %128, label %133, label %144

129:                                              ; preds = %119
  %130 = call ptr (ptr, ptr, ptr, ptr, ...) @last_gasp(ptr noundef %122, ptr noundef %123, ptr noundef %2, ptr noundef nonnull %6) #43
  store ptr %130, ptr %4, align 8, !tbaa !13
  %131 = load i32, ptr %6, align 4, !tbaa !90
  %132 = load i32, ptr %7, align 4, !tbaa !90
  br label %133

133:                                              ; preds = %129, %124
  %134 = phi ptr [ %130, %129 ], [ %125, %124 ]
  %135 = phi i32 [ %132, %129 ], [ %127, %124 ]
  %136 = phi i32 [ %131, %129 ], [ %126, %124 ]
  %137 = icmp slt i32 %136, %135
  br i1 %137, label %118, label %138

138:                                              ; preds = %133
  %139 = icmp eq i32 %136, %135
  %140 = load i32, ptr %9, align 4
  %141 = load i32, ptr %10, align 4
  %142 = icmp slt i32 %140, %141
  %143 = select i1 %139, i1 %142, i1 false
  br i1 %143, label %118, label %144

144:                                              ; preds = %138, %124
  %145 = phi ptr [ %125, %124 ], [ %134, %138 ]
  %146 = call ptr (ptr, ptr, ...) @sf_append(ptr noundef %145, ptr noundef %101) #43
  store ptr %146, ptr %4, align 8, !tbaa !13
  %147 = load i32, ptr @trace, align 4, !tbaa !16
  %148 = icmp eq i32 %147, 0
  br i1 %148, label %150, label %149

149:                                              ; preds = %144
  call void (ptr, ptr, ...) @size_stamp(ptr noundef %146, ptr noundef nonnull @.str.2.118) #43
  br label %150

150:                                              ; preds = %149, %144, %81
  %151 = load ptr, ptr %5, align 8, !tbaa !13
  call void (ptr, ...) @sf_free(ptr noundef %151) #43
  %152 = load i32, ptr @skip_make_sparse, align 4, !tbaa !16
  %153 = icmp eq i32 %152, 0
  %154 = load ptr, ptr %4, align 8, !tbaa !13
  br i1 %153, label %155, label %157

155:                                              ; preds = %150
  %156 = call ptr (ptr, ptr, ptr, ...) @make_sparse(ptr noundef %154, ptr noundef %1, ptr noundef %2) #43
  store ptr %156, ptr %4, align 8, !tbaa !13
  br label %157

157:                                              ; preds = %155, %150
  %158 = phi ptr [ %156, %155 ], [ %154, %150 ]
  %159 = getelementptr inbounds %struct.set_family, ptr %13, i64 0, i32 3
  %160 = load i32, ptr %159, align 4, !tbaa !31
  %161 = getelementptr inbounds %struct.set_family, ptr %158, i64 0, i32 3
  %162 = load i32, ptr %161, align 4, !tbaa !31
  %163 = icmp slt i32 %160, %162
  br i1 %163, label %164, label %165

164:                                              ; preds = %157
  call void (ptr, ...) @sf_free(ptr noundef nonnull %158) #43
  store ptr %13, ptr %4, align 8, !tbaa !13
  store i32 0, ptr @unwrap_onset, align 4, !tbaa !16
  br label %11

165:                                              ; preds = %157
  %.lcssa = phi ptr [ %13, %157 ]
  call void (ptr, ...) @sf_free(ptr noundef nonnull %.lcssa) #43
  %166 = load ptr, ptr %4, align 8, !tbaa !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %7) #45
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %6) #45
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #45
  ret ptr %166
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @essential(ptr nocapture noundef %0, ptr nocapture noundef %1) #0 {
  %3 = load ptr, ptr %0, align 8, !tbaa !13
  %4 = load ptr, ptr %1, align 8, !tbaa !13
  %5 = tail call ptr (ptr, ...) @sf_active(ptr noundef %3) #43
  %6 = load i32, ptr @cube, align 8, !tbaa !14
  %7 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 10, i32 noundef %6) #43
  %8 = getelementptr inbounds %struct.set_family, ptr %3, i64 0, i32 5
  %9 = load ptr, ptr %8, align 8, !tbaa !33
  %10 = getelementptr inbounds %struct.set_family, ptr %3, i64 0, i32 3
  %11 = load i32, ptr %10, align 4, !tbaa !31
  %12 = load i32, ptr %3, align 8, !tbaa !34
  %13 = mul nsw i32 %12, %11
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds i32, ptr %9, i64 %14
  %16 = icmp sgt i32 %13, 0
  br i1 %16, label %17, label %47

17:                                               ; preds = %2
  %18 = getelementptr inbounds %struct.set_family, ptr %3, i64 0, i32 4
  br label %19

19:                                               ; preds = %41, %17
  %20 = phi ptr [ %9, %17 ], [ %45, %41 ]
  %21 = phi ptr [ %7, %17 ], [ %42, %41 ]
  %22 = load i32, ptr %20, align 4, !tbaa !16
  %23 = and i32 %22, 17408
  %24 = icmp eq i32 %23, 1024
  br i1 %24, label %25, label %41

25:                                               ; preds = %19
  %26 = tail call i32 @essen_cube(ptr noundef nonnull %3, ptr noundef %4, ptr noundef nonnull %20) #44, !range !67
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %41, label %28

28:                                               ; preds = %25
  %29 = load i32, ptr @debug, align 4, !tbaa !16
  %30 = and i32 %29, 2
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %35, label %32

32:                                               ; preds = %28
  %33 = tail call ptr (ptr, ...) @pc1(ptr noundef nonnull %20) #43
  %34 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.121, ptr noundef %33) #44
  br label %35

35:                                               ; preds = %32, %28
  %36 = tail call ptr (ptr, ptr, ...) @sf_addset(ptr noundef %21, ptr noundef nonnull %20) #43
  %37 = load i32, ptr %20, align 4, !tbaa !16
  %38 = and i32 %37, -8193
  store i32 %38, ptr %20, align 4, !tbaa !16
  %39 = load i32, ptr %18, align 8, !tbaa !114
  %40 = add nsw i32 %39, -1
  store i32 %40, ptr %18, align 8, !tbaa !114
  br label %41

41:                                               ; preds = %35, %25, %19
  %42 = phi ptr [ %21, %19 ], [ %36, %35 ], [ %21, %25 ]
  %43 = load i32, ptr %3, align 8, !tbaa !34
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i32, ptr %20, i64 %44
  %46 = icmp ult ptr %45, %15
  br i1 %46, label %19, label %47

47:                                               ; preds = %41, %2
  %48 = phi ptr [ %7, %2 ], [ %42, %41 ]
  %49 = tail call ptr (ptr, ...) @sf_inactive(ptr noundef nonnull %3) #43
  store ptr %49, ptr %0, align 8, !tbaa !13
  %50 = tail call ptr (ptr, ptr, ...) @sf_join(ptr noundef %4, ptr noundef %48) #43
  store ptr %50, ptr %1, align 8, !tbaa !13
  tail call void (ptr, ...) @sf_free(ptr noundef %4) #43
  ret ptr %48
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @essen_cube(ptr noundef %0, ptr noundef %1, ptr noundef %2) #0 {
  %4 = tail call ptr (ptr, ptr, ...) @sf_join(ptr noundef %0, ptr noundef %1) #43
  %5 = tail call ptr @cb_consensus(ptr noundef %4, ptr noundef %2) #44
  tail call void (ptr, ...) @sf_free(ptr noundef %4) #43
  %6 = tail call ptr (ptr, ptr, ...) @cube2list(ptr noundef %5, ptr noundef %1) #43
  %7 = tail call i32 (ptr, ptr, ...) @cube_is_covered(ptr noundef %6, ptr noundef %2) #43
  %8 = load ptr, ptr %6, align 8, !tbaa !13
  %9 = icmp eq ptr %8, null
  br i1 %9, label %11, label %10

10:                                               ; preds = %3
  tail call void @free(ptr noundef nonnull %8) #43
  br label %11

11:                                               ; preds = %10, %3
  tail call void @free(ptr noundef nonnull %6) #43
  %12 = icmp eq i32 %7, 0
  %13 = zext i1 %12 to i32
  tail call void (ptr, ...) @sf_free(ptr noundef %5) #43
  ret i32 %13
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @cb_consensus(ptr nocapture noundef readonly %0, ptr noundef %1) #0 {
  %3 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %4 = load i32, ptr %3, align 4, !tbaa !31
  %5 = shl nsw i32 %4, 1
  %6 = load i32, ptr @cube, align 8, !tbaa !14
  %7 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef %5, i32 noundef %6) #43
  %8 = load i32, ptr @cube, align 8, !tbaa !14
  %9 = icmp slt i32 %8, 33
  %10 = add nsw i32 %8, -1
  %11 = lshr i32 %10, 3
  %12 = and i32 %11, 536870908
  %13 = add nuw nsw i32 %12, 8
  %14 = select i1 %9, i32 8, i32 %13
  %15 = zext i32 %14 to i64
  %16 = tail call noalias ptr @malloc(i64 noundef %15) #42
  %17 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %16, i32 noundef %8) #43
  %18 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %19 = load ptr, ptr %18, align 8, !tbaa !33
  %20 = load i32, ptr %3, align 4, !tbaa !31
  %21 = load i32, ptr %0, align 8, !tbaa !34
  %22 = mul nsw i32 %21, %20
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds i32, ptr %19, i64 %23
  %25 = icmp sgt i32 %22, 0
  br i1 %25, label %26, label %42

26:                                               ; preds = %36, %2
  %27 = phi ptr [ %37, %36 ], [ %7, %2 ]
  %28 = phi ptr [ %40, %36 ], [ %19, %2 ]
  %29 = icmp eq ptr %28, %1
  br i1 %29, label %36, label %30

30:                                               ; preds = %26
  %31 = tail call i32 (ptr, ptr, ...) @cdist01(ptr noundef %28, ptr noundef %1) #43
  switch i32 %31, label %36 [
    i32 0, label %32
    i32 1, label %34
  ]

32:                                               ; preds = %30
  %33 = tail call ptr @cb_consensus_dist0(ptr noundef %27, ptr noundef %28, ptr noundef %1) #44
  br label %36

34:                                               ; preds = %30
  tail call void (ptr, ptr, ptr, ...) @consensus(ptr noundef %17, ptr noundef %28, ptr noundef %1) #43
  %35 = tail call ptr (ptr, ptr, ...) @sf_addset(ptr noundef %27, ptr noundef %17) #43
  br label %36

36:                                               ; preds = %34, %32, %30, %26
  %37 = phi ptr [ %27, %30 ], [ %35, %34 ], [ %33, %32 ], [ %27, %26 ]
  %38 = load i32, ptr %0, align 8, !tbaa !34
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i32, ptr %28, i64 %39
  %41 = icmp ult ptr %40, %24
  br i1 %41, label %26, label %42

42:                                               ; preds = %36, %2
  %43 = phi ptr [ %7, %2 ], [ %37, %36 ]
  %44 = icmp eq ptr %17, null
  br i1 %44, label %46, label %45

45:                                               ; preds = %42
  tail call void @free(ptr noundef nonnull %17) #43
  br label %46

46:                                               ; preds = %45, %42
  ret ptr %43
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @cb_consensus_dist0(ptr noundef %0, ptr noundef %1, ptr noundef %2) #0 {
  %4 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 11), align 8, !tbaa !7
  %5 = load ptr, ptr %4, align 8, !tbaa !13
  %6 = getelementptr inbounds ptr, ptr %4, i64 1
  %7 = load ptr, ptr %6, align 8, !tbaa !13
  %8 = tail call i32 (ptr, ptr, ...) @setp_implies(ptr noundef %1, ptr noundef %2) #43
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %137

10:                                               ; preds = %3
  %11 = load i32, ptr @cube, align 8, !tbaa !14
  %12 = icmp slt i32 %11, 33
  %13 = add nsw i32 %11, -1
  %14 = lshr i32 %13, 3
  %15 = and i32 %14, 536870908
  %16 = add nuw nsw i32 %15, 8
  %17 = select i1 %12, i32 8, i32 %16
  %18 = zext i32 %17 to i64
  %19 = tail call noalias ptr @malloc(i64 noundef %18) #42
  %20 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %19, i32 noundef %11) #43
  %21 = load i32, ptr %1, align 4, !tbaa !16
  %22 = and i32 %21, 1023
  %23 = load i32, ptr %5, align 4, !tbaa !16
  %24 = and i32 %23, -1024
  %25 = or i32 %24, %22
  store i32 %25, ptr %5, align 4, !tbaa !16
  %26 = and i32 %21, 1023
  %27 = zext i32 %26 to i64
  br label %28

28:                                               ; preds = %28, %10
  %29 = phi i64 [ %37, %28 ], [ %27, %10 ]
  %30 = getelementptr inbounds i32, ptr %1, i64 %29
  %31 = load i32, ptr %30, align 4, !tbaa !16
  %32 = getelementptr inbounds i32, ptr %2, i64 %29
  %33 = load i32, ptr %32, align 4, !tbaa !16
  %34 = xor i32 %33, -1
  %35 = and i32 %31, %34
  %36 = getelementptr inbounds i32, ptr %5, i64 %29
  store i32 %35, ptr %36, align 4, !tbaa !16
  %37 = add nsw i64 %29, -1
  %38 = icmp ugt i64 %29, 1
  br i1 %38, label %28, label %39

39:                                               ; preds = %28
  %40 = load i32, ptr %1, align 4, !tbaa !16
  %41 = and i32 %40, 1023
  %42 = load i32, ptr %7, align 4, !tbaa !16
  %43 = and i32 %42, -1024
  %44 = or i32 %43, %41
  store i32 %44, ptr %7, align 4, !tbaa !16
  %45 = and i32 %40, 1023
  %46 = zext i32 %45 to i64
  br label %47

47:                                               ; preds = %47, %39
  %48 = phi i64 [ %55, %47 ], [ %46, %39 ]
  %49 = getelementptr inbounds i32, ptr %1, i64 %48
  %50 = load i32, ptr %49, align 4, !tbaa !16
  %51 = getelementptr inbounds i32, ptr %2, i64 %48
  %52 = load i32, ptr %51, align 4, !tbaa !16
  %53 = and i32 %52, %50
  %54 = getelementptr inbounds i32, ptr %7, i64 %48
  store i32 %53, ptr %54, align 4, !tbaa !16
  %55 = add nsw i64 %48, -1
  %56 = icmp ugt i64 %48, 1
  br i1 %56, label %47, label %57

57:                                               ; preds = %47
  %58 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8
  %59 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %60 = icmp slt i32 %58, %59
  br i1 %60, label %61, label %106

61:                                               ; preds = %57
  %62 = sext i32 %58 to i64
  br label %63

63:                                               ; preds = %97, %61
  %64 = phi i64 [ %62, %61 ], [ %100, %97 ]
  %65 = phi ptr [ %0, %61 ], [ %99, %97 ]
  %66 = phi i32 [ 0, %61 ], [ %98, %97 ]
  %67 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %68 = getelementptr inbounds ptr, ptr %67, i64 %64
  %69 = load ptr, ptr %68, align 8, !tbaa !13
  %70 = tail call i32 (ptr, ptr, ...) @setp_disjoint(ptr noundef nonnull %5, ptr noundef %69) #43
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %97

72:                                               ; preds = %63
  %73 = load i32, ptr %2, align 4, !tbaa !16
  %74 = and i32 %73, 1023
  %75 = load i32, ptr %20, align 4, !tbaa !16
  %76 = and i32 %75, -1024
  %77 = or i32 %76, %74
  store i32 %77, ptr %20, align 4, !tbaa !16
  %78 = and i32 %73, 1023
  %79 = zext i32 %78 to i64
  br label %80

80:                                               ; preds = %80, %72
  %81 = phi i64 [ %93, %80 ], [ %79, %72 ]
  %82 = getelementptr inbounds i32, ptr %2, i64 %81
  %83 = load i32, ptr %82, align 4, !tbaa !16
  %84 = getelementptr inbounds i32, ptr %69, i64 %81
  %85 = load i32, ptr %84, align 4, !tbaa !16
  %86 = and i32 %85, %83
  %87 = getelementptr inbounds i32, ptr %7, i64 %81
  %88 = load i32, ptr %87, align 4, !tbaa !16
  %89 = xor i32 %85, -1
  %90 = and i32 %88, %89
  %91 = or i32 %90, %86
  %92 = getelementptr inbounds i32, ptr %20, i64 %81
  store i32 %91, ptr %92, align 4, !tbaa !16
  %93 = add nsw i64 %81, -1
  %94 = icmp ugt i64 %81, 1
  br i1 %94, label %80, label %95

95:                                               ; preds = %80
  %96 = tail call ptr (ptr, ptr, ...) @sf_addset(ptr noundef %65, ptr noundef nonnull %20) #43
  br label %97

97:                                               ; preds = %95, %63
  %98 = phi i32 [ %66, %63 ], [ 1, %95 ]
  %99 = phi ptr [ %65, %63 ], [ %96, %95 ]
  %100 = add nsw i64 %64, 1
  %101 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %102 = sext i32 %101 to i64
  %103 = icmp slt i64 %100, %102
  br i1 %103, label %63, label %104

104:                                              ; preds = %97
  %.lcssa1 = phi i32 [ %98, %97 ]
  %.lcssa = phi ptr [ %99, %97 ]
  %105 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8
  br label %106

106:                                              ; preds = %104, %57
  %107 = phi i32 [ %58, %57 ], [ %105, %104 ]
  %108 = phi i32 [ 0, %57 ], [ %.lcssa1, %104 ]
  %109 = phi ptr [ %0, %57 ], [ %.lcssa, %104 ]
  %110 = icmp eq i32 %108, 0
  %111 = icmp sgt i32 %107, 0
  %112 = select i1 %110, i1 %111, i1 false
  br i1 %112, label %113, label %133

113:                                              ; preds = %106
  %114 = load i32, ptr %1, align 4, !tbaa !16
  %115 = and i32 %114, 1023
  %116 = load i32, ptr %20, align 4, !tbaa !16
  %117 = and i32 %116, -1024
  %118 = or i32 %117, %115
  store i32 %118, ptr %20, align 4, !tbaa !16
  %119 = and i32 %114, 1023
  %120 = zext i32 %119 to i64
  br label %121

121:                                              ; preds = %121, %113
  %122 = phi i64 [ %129, %121 ], [ %120, %113 ]
  %123 = getelementptr inbounds i32, ptr %1, i64 %122
  %124 = load i32, ptr %123, align 4, !tbaa !16
  %125 = getelementptr inbounds i32, ptr %2, i64 %122
  %126 = load i32, ptr %125, align 4, !tbaa !16
  %127 = and i32 %126, %124
  %128 = getelementptr inbounds i32, ptr %20, i64 %122
  store i32 %127, ptr %128, align 4, !tbaa !16
  %129 = add nsw i64 %122, -1
  %130 = icmp ugt i64 %122, 1
  br i1 %130, label %121, label %131

131:                                              ; preds = %121
  %132 = tail call ptr (ptr, ptr, ...) @sf_addset(ptr noundef %109, ptr noundef nonnull %20) #43
  br label %135

133:                                              ; preds = %106
  %134 = icmp eq ptr %20, null
  br i1 %134, label %137, label %135

135:                                              ; preds = %133, %131
  %136 = phi ptr [ %132, %131 ], [ %109, %133 ]
  tail call void @free(ptr noundef nonnull %20) #43
  br label %137

137:                                              ; preds = %135, %133, %3
  %138 = phi ptr [ %0, %3 ], [ %136, %135 ], [ %109, %133 ]
  ret ptr %138
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @minimize_exact(ptr noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %3) #0 {
  %5 = tail call fastcc ptr @do_minimize(ptr noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %3, i32 noundef 0) #44
  ret ptr %5
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc ptr @do_minimize(ptr noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %3, i32 noundef %4) unnamed_addr #0 {
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #45
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #45
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #45
  %9 = load i32, ptr @debug, align 4, !tbaa !16
  %10 = and i32 %9, 1024
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %14, label %12

12:                                               ; preds = %5
  %13 = or i32 %9, 2080
  store i32 %13, ptr @debug, align 4, !tbaa !16
  br label %14

14:                                               ; preds = %12, %5
  %15 = phi i32 [ %13, %12 ], [ %9, %5 ]
  %16 = lshr i32 %15, 9
  %17 = and i32 %16, 4
  %18 = icmp eq i32 %3, 0
  %19 = zext i1 %18 to i32
  %20 = tail call i64 (...) @util_cpu_time() #43
  %21 = tail call ptr (ptr, ptr, ...) @cube2list(ptr noundef %0, ptr noundef %1) #43
  %22 = tail call ptr (ptr, ...) @primes_consensus(ptr noundef %21) #43
  %23 = load i32, ptr @trace, align 4, !tbaa !16
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %28, label %25

25:                                               ; preds = %14
  %26 = tail call i64 (...) @util_cpu_time() #43
  %27 = sub nsw i64 %26, %20
  tail call void (ptr, ptr, i64, ...) @print_trace(ptr noundef %22, ptr noundef nonnull @.str.124, i64 noundef %27) #43
  br label %28

28:                                               ; preds = %25, %14
  %29 = tail call i64 (...) @util_cpu_time() #43
  call void (ptr, ptr, ptr, ptr, ptr, ...) @irred_split_cover(ptr noundef %22, ptr noundef %1, ptr noundef nonnull %6, ptr noundef nonnull %7, ptr noundef nonnull %8) #43
  %30 = load i32, ptr @trace, align 4, !tbaa !16
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %36, label %32

32:                                               ; preds = %28
  %33 = load ptr, ptr %6, align 8, !tbaa !13
  %34 = call i64 (...) @util_cpu_time() #43
  %35 = sub nsw i64 %34, %29
  call void (ptr, ptr, i64, ...) @print_trace(ptr noundef %33, ptr noundef nonnull @.str.1.125, i64 noundef %35) #43
  br label %36

36:                                               ; preds = %32, %28
  %37 = call i64 (...) @util_cpu_time() #43
  %38 = load ptr, ptr %6, align 8, !tbaa !13
  %39 = load ptr, ptr %8, align 8, !tbaa !13
  %40 = call ptr (ptr, ptr, ptr, ...) @irred_derive_table(ptr noundef %1, ptr noundef %38, ptr noundef %39) #43
  %41 = load i32, ptr @trace, align 4, !tbaa !16
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %47, label %43

43:                                               ; preds = %36
  %44 = load ptr, ptr %8, align 8, !tbaa !13
  %45 = call i64 (...) @util_cpu_time() #43
  %46 = sub nsw i64 %45, %37
  call void (ptr, ptr, i64, ...) @print_trace(ptr noundef %44, ptr noundef nonnull @.str.2.126, i64 noundef %46) #43
  br label %47

47:                                               ; preds = %43, %36
  %48 = icmp eq i32 %4, 0
  br i1 %48, label %79, label %49

49:                                               ; preds = %47
  %50 = getelementptr inbounds %struct.set_family, ptr %22, i64 0, i32 3
  %51 = load i32, ptr %50, align 4, !tbaa !31
  %52 = sext i32 %51 to i64
  %53 = shl nsw i64 %52, 2
  %54 = call noalias ptr @malloc(i64 noundef %53) #42
  %55 = load ptr, ptr %8, align 8, !tbaa !13
  %56 = getelementptr inbounds %struct.set_family, ptr %55, i64 0, i32 5
  %57 = load ptr, ptr %56, align 8, !tbaa !33
  %58 = getelementptr inbounds %struct.set_family, ptr %55, i64 0, i32 3
  %59 = load i32, ptr %58, align 4, !tbaa !31
  %60 = load i32, ptr %55, align 8, !tbaa !34
  %61 = mul nsw i32 %60, %59
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds i32, ptr %57, i64 %62
  %64 = icmp sgt i32 %61, 0
  br i1 %64, label %65, label %79

65:                                               ; preds = %65, %49
  %66 = phi ptr [ %77, %65 ], [ %57, %49 ]
  %67 = load i32, ptr @cube, align 8, !tbaa !14
  %68 = call i32 (ptr, ...) @set_ord(ptr noundef %66) #43
  %69 = sub nsw i32 %67, %68
  %70 = load i32, ptr %66, align 4, !tbaa !16
  %71 = lshr i32 %70, 16
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds i32, ptr %54, i64 %72
  store i32 %69, ptr %73, align 4, !tbaa !16
  %74 = load ptr, ptr %8, align 8, !tbaa !13
  %75 = load i32, ptr %74, align 8, !tbaa !34
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds i32, ptr %66, i64 %76
  %78 = icmp ult ptr %77, %63
  br i1 %78, label %65, label %79

79:                                               ; preds = %65, %49, %47
  %80 = phi ptr [ null, %47 ], [ %54, %49 ], [ %54, %65 ]
  %81 = call i64 (...) @util_cpu_time() #43
  %82 = call ptr (ptr, ptr, i32, i32, ...) @sm_minimum_cover(ptr noundef %40, ptr noundef %80, i32 noundef %19, i32 noundef %17) #43
  %83 = load i32, ptr @trace, align 4, !tbaa !16
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %88, label %85

85:                                               ; preds = %79
  %86 = call i64 (...) @util_cpu_time() #43
  %87 = sub nsw i64 %86, %81
  call void (ptr, ptr, i64, ...) @print_trace(ptr noundef %22, ptr noundef nonnull @.str.3.127, i64 noundef %87) #43
  br label %88

88:                                               ; preds = %85, %79
  %89 = icmp eq ptr %80, null
  br i1 %89, label %91, label %90

90:                                               ; preds = %88
  call void @free(ptr noundef nonnull %80) #43
  br label %91

91:                                               ; preds = %90, %88
  %92 = load i32, ptr @debug, align 4, !tbaa !16
  %93 = and i32 %92, 1024
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %202, label %95

95:                                               ; preds = %91
  %96 = load ptr, ptr %6, align 8, !tbaa !13
  %97 = load ptr, ptr %7, align 8, !tbaa !13
  %98 = load ptr, ptr %8, align 8, !tbaa !13
  %99 = load ptr, ptr @filename, align 8, !tbaa !13
  %100 = icmp eq ptr %99, null
  br i1 %100, label %104, label %101

101:                                              ; preds = %95
  %102 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %99, ptr noundef nonnull dereferenceable(8) @.str.4.128) #48
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %104, label %106

104:                                              ; preds = %101, %95
  %105 = load ptr, ptr @stdout, align 8, !tbaa !13
  br label %131

106:                                              ; preds = %101
  %107 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %99) #48
  %108 = add i64 %107, 20
  %109 = call noalias ptr @malloc(i64 noundef %108) #42
  %110 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %109, ptr noundef nonnull dereferenceable(1) @.str.5.129, ptr noundef nonnull %99) #43
  %111 = call noalias ptr @fopen(ptr noundef %109, ptr noundef nonnull @.str.6.130) #44
  %112 = icmp eq ptr %111, null
  br i1 %112, label %113, label %117

113:                                              ; preds = %106
  %114 = load ptr, ptr @stderr, align 8, !tbaa !13
  %115 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %114, ptr noundef nonnull @.str.7.131, ptr noundef %109) #47
  %116 = load ptr, ptr @stdout, align 8, !tbaa !13
  br label %117

117:                                              ; preds = %113, %106
  %118 = phi ptr [ %116, %113 ], [ %111, %106 ]
  %119 = load ptr, ptr @filename, align 8, !tbaa !13
  %120 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %109, ptr noundef nonnull dereferenceable(1) @.str.8.132, ptr noundef %119) #43
  %121 = call noalias ptr @fopen(ptr noundef %109, ptr noundef nonnull @.str.6.130) #44
  %122 = icmp eq ptr %121, null
  br i1 %122, label %123, label %127

123:                                              ; preds = %117
  %124 = load ptr, ptr @stderr, align 8, !tbaa !13
  %125 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %124, ptr noundef nonnull @.str.7.131, ptr noundef %109) #47
  %126 = load ptr, ptr @stdout, align 8, !tbaa !13
  br label %127

127:                                              ; preds = %123, %117
  %128 = phi ptr [ %126, %123 ], [ %121, %117 ]
  %129 = icmp eq ptr %109, null
  br i1 %129, label %131, label %130

130:                                              ; preds = %127
  call void @free(ptr noundef nonnull %109) #43
  br label %131

131:                                              ; preds = %130, %127, %104
  %132 = phi ptr [ %105, %104 ], [ %118, %130 ], [ %118, %127 ]
  %133 = phi ptr [ %105, %104 ], [ %128, %130 ], [ %128, %127 ]
  %134 = call ptr (...) @new_PLA() #43
  %135 = call i32 (ptr, ...) @PLA_labels(ptr noundef %134) #43
  call void (ptr, ptr, i32, ...) @fpr_header(ptr noundef %132, ptr noundef %134, i32 noundef 1) #43
  call void (ptr, ...) @free_PLA(ptr noundef %134) #43
  %136 = call i64 @fwrite(ptr nonnull @.str.9.133, i64 23, i64 1, ptr %132)
  %137 = getelementptr inbounds %struct.set_family, ptr %96, i64 0, i32 5
  %138 = load ptr, ptr %137, align 8, !tbaa !33
  %139 = getelementptr inbounds %struct.set_family, ptr %96, i64 0, i32 3
  %140 = load i32, ptr %139, align 4, !tbaa !31
  %141 = load i32, ptr %96, align 8, !tbaa !34
  %142 = mul nsw i32 %141, %140
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds i32, ptr %138, i64 %143
  %145 = icmp sgt i32 %142, 0
  br i1 %145, label %146, label %154

146:                                              ; preds = %146, %131
  %147 = phi ptr [ %152, %146 ], [ %138, %131 ]
  %148 = call ptr (ptr, ...) @pc1(ptr noundef %147) #43
  %149 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %132, ptr noundef nonnull @.str.10.134, ptr noundef %148) #44
  %150 = load i32, ptr %96, align 8, !tbaa !34
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds i32, ptr %147, i64 %151
  %153 = icmp ult ptr %152, %144
  br i1 %153, label %146, label %154

154:                                              ; preds = %146, %131
  %155 = call i64 @fwrite(ptr nonnull @.str.11.135, i64 31, i64 1, ptr %132)
  %156 = getelementptr inbounds %struct.set_family, ptr %97, i64 0, i32 5
  %157 = load ptr, ptr %156, align 8, !tbaa !33
  %158 = getelementptr inbounds %struct.set_family, ptr %97, i64 0, i32 3
  %159 = load i32, ptr %158, align 4, !tbaa !31
  %160 = load i32, ptr %97, align 8, !tbaa !34
  %161 = mul nsw i32 %160, %159
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds i32, ptr %157, i64 %162
  %164 = icmp sgt i32 %161, 0
  br i1 %164, label %165, label %173

165:                                              ; preds = %165, %154
  %166 = phi ptr [ %171, %165 ], [ %157, %154 ]
  %167 = call ptr (ptr, ...) @pc1(ptr noundef %166) #43
  %168 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %132, ptr noundef nonnull @.str.10.134, ptr noundef %167) #44
  %169 = load i32, ptr %97, align 8, !tbaa !34
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds i32, ptr %166, i64 %170
  %172 = icmp ult ptr %171, %163
  br i1 %172, label %165, label %173

173:                                              ; preds = %165, %154
  %174 = call i64 @fwrite(ptr nonnull @.str.12, i64 33, i64 1, ptr %132)
  %175 = getelementptr inbounds %struct.set_family, ptr %98, i64 0, i32 5
  %176 = load ptr, ptr %175, align 8, !tbaa !33
  %177 = getelementptr inbounds %struct.set_family, ptr %98, i64 0, i32 3
  %178 = load i32, ptr %177, align 4, !tbaa !31
  %179 = load i32, ptr %98, align 8, !tbaa !34
  %180 = mul nsw i32 %179, %178
  %181 = sext i32 %180 to i64
  %182 = getelementptr inbounds i32, ptr %176, i64 %181
  %183 = icmp sgt i32 %180, 0
  br i1 %183, label %184, label %192

184:                                              ; preds = %184, %173
  %185 = phi ptr [ %190, %184 ], [ %176, %173 ]
  %186 = call ptr (ptr, ...) @pc1(ptr noundef %185) #43
  %187 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %132, ptr noundef nonnull @.str.10.134, ptr noundef %186) #44
  %188 = load i32, ptr %98, align 8, !tbaa !34
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds i32, ptr %185, i64 %189
  %191 = icmp ult ptr %190, %182
  br i1 %191, label %184, label %192

192:                                              ; preds = %184, %173
  %193 = load ptr, ptr @stdout, align 8, !tbaa !13
  %194 = icmp eq ptr %132, %193
  br i1 %194, label %197, label %195

195:                                              ; preds = %192
  %196 = call i32 @fclose(ptr noundef %132) #44
  br label %197

197:                                              ; preds = %195, %192
  call void (ptr, ptr, ...) @sm_write(ptr noundef %133, ptr noundef %40) #43
  %198 = load ptr, ptr @stdout, align 8, !tbaa !13
  %199 = icmp eq ptr %133, %198
  br i1 %199, label %202, label %200

200:                                              ; preds = %197
  %201 = call i32 @fclose(ptr noundef %133) #44
  br label %202

202:                                              ; preds = %200, %197, %91
  %203 = load i32, ptr @cube, align 8, !tbaa !14
  %204 = call ptr (i32, i32, ...) @sf_new(i32 noundef 100, i32 noundef %203) #43
  %205 = load ptr, ptr %6, align 8, !tbaa !13
  %206 = getelementptr inbounds %struct.set_family, ptr %205, i64 0, i32 5
  %207 = load ptr, ptr %206, align 8, !tbaa !33
  %208 = getelementptr inbounds %struct.set_family, ptr %205, i64 0, i32 3
  %209 = load i32, ptr %208, align 4, !tbaa !31
  %210 = load i32, ptr %205, align 8, !tbaa !34
  %211 = mul nsw i32 %210, %209
  %212 = sext i32 %211 to i64
  %213 = getelementptr inbounds i32, ptr %207, i64 %212
  %214 = icmp sgt i32 %211, 0
  br i1 %214, label %215, label %224

215:                                              ; preds = %215, %202
  %216 = phi ptr [ %218, %215 ], [ %204, %202 ]
  %217 = phi ptr [ %222, %215 ], [ %207, %202 ]
  %218 = call ptr (ptr, ptr, ...) @sf_addset(ptr noundef %216, ptr noundef %217) #43
  %219 = load ptr, ptr %6, align 8, !tbaa !13
  %220 = load i32, ptr %219, align 8, !tbaa !34
  %221 = sext i32 %220 to i64
  %222 = getelementptr inbounds i32, ptr %217, i64 %221
  %223 = icmp ult ptr %222, %213
  br i1 %223, label %215, label %224

224:                                              ; preds = %215, %202
  %225 = phi ptr [ %205, %202 ], [ %219, %215 ]
  %226 = phi ptr [ %204, %202 ], [ %218, %215 ]
  %227 = getelementptr inbounds %struct.sm_col_struct, ptr %82, i64 0, i32 3
  %228 = load ptr, ptr %227, align 8, !tbaa !13
  %229 = icmp eq ptr %228, null
  br i1 %229, label %248, label %230

230:                                              ; preds = %224
  %231 = getelementptr inbounds %struct.set_family, ptr %22, i64 0, i32 5
  br label %232

232:                                              ; preds = %232, %230
  %233 = phi ptr [ %228, %230 ], [ %244, %232 ]
  %234 = phi ptr [ %226, %230 ], [ %242, %232 ]
  %235 = load ptr, ptr %231, align 8, !tbaa !33
  %236 = load i32, ptr %22, align 8, !tbaa !34
  %237 = getelementptr inbounds %struct.sm_element_struct, ptr %233, i64 0, i32 1
  %238 = load i32, ptr %237, align 4, !tbaa !103
  %239 = mul nsw i32 %238, %236
  %240 = sext i32 %239 to i64
  %241 = getelementptr inbounds i32, ptr %235, i64 %240
  %242 = call ptr (ptr, ptr, ...) @sf_addset(ptr noundef %234, ptr noundef %241) #43
  %243 = getelementptr inbounds %struct.sm_element_struct, ptr %233, i64 0, i32 4
  %244 = load ptr, ptr %243, align 8, !tbaa !13
  %245 = icmp eq ptr %244, null
  br i1 %245, label %246, label %232

246:                                              ; preds = %232
  %.lcssa = phi ptr [ %242, %232 ]
  %247 = load ptr, ptr %6, align 8, !tbaa !13
  br label %248

248:                                              ; preds = %246, %224
  %249 = phi ptr [ %225, %224 ], [ %247, %246 ]
  %250 = phi ptr [ %226, %224 ], [ %.lcssa, %246 ]
  call void (ptr, ...) @sf_free(ptr noundef %249) #43
  %251 = load ptr, ptr %7, align 8, !tbaa !13
  call void (ptr, ...) @sf_free(ptr noundef %251) #43
  %252 = load ptr, ptr %8, align 8, !tbaa !13
  call void (ptr, ...) @sf_free(ptr noundef %252) #43
  call void (ptr, ...) @sm_free(ptr noundef %40) #43
  call void (ptr, ...) @sm_row_free(ptr noundef %82) #43
  call void (ptr, ...) @sf_free(ptr noundef %22) #43
  %253 = load i32, ptr @debug, align 4, !tbaa !16
  %254 = and i32 %253, -10273
  store i32 %254, ptr @debug, align 4, !tbaa !16
  %255 = load i32, ptr @skip_make_sparse, align 4, !tbaa !16
  %256 = icmp eq i32 %255, 0
  %257 = icmp ne ptr %2, null
  %258 = and i1 %257, %256
  br i1 %258, label %259, label %261

259:                                              ; preds = %248
  %260 = call ptr (ptr, ptr, ptr, ...) @make_sparse(ptr noundef %250, ptr noundef %1, ptr noundef nonnull %2) #43
  br label %261

261:                                              ; preds = %259, %248
  %262 = phi ptr [ %260, %259 ], [ %250, %248 ]
  store i32 %9, ptr @debug, align 4, !tbaa !16
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #45
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #45
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #45
  ret ptr %262
}

; Function Attrs: nofree nounwind optsize
declare noalias noundef ptr @fopen(ptr nocapture noundef readonly, ptr nocapture noundef readonly) local_unnamed_addr #5

; Function Attrs: nofree nounwind optsize
declare noundef i32 @fclose(ptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: nounwind optsize uwtable
define internal ptr @expand(ptr noundef %0, ptr nocapture noundef %1, i32 noundef %2) #0 {
  %4 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4) #45
  %5 = load i32, ptr @use_random_order, align 4, !tbaa !16
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = tail call ptr (ptr, ...) @random_order(ptr noundef %0) #43
  br label %11

9:                                                ; preds = %3
  %10 = tail call ptr (ptr, ptr, ...) @mini_sort(ptr noundef %0, ptr noundef nonnull @ascend) #43
  br label %11

11:                                               ; preds = %9, %7
  %12 = phi ptr [ %8, %7 ], [ %10, %9 ]
  %13 = load i32, ptr @cube, align 8, !tbaa !14
  %14 = icmp slt i32 %13, 33
  %15 = add nsw i32 %13, -1
  %16 = lshr i32 %15, 3
  %17 = and i32 %16, 536870908
  %18 = add nuw nsw i32 %17, 8
  %19 = select i1 %14, i32 8, i32 %18
  %20 = zext i32 %19 to i64
  %21 = tail call noalias ptr @malloc(i64 noundef %20) #42
  %22 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %21, i32 noundef %13) #43
  %23 = load i32, ptr @cube, align 8, !tbaa !14
  %24 = icmp slt i32 %23, 33
  %25 = add nsw i32 %23, -1
  %26 = lshr i32 %25, 3
  %27 = and i32 %26, 536870908
  %28 = add nuw nsw i32 %27, 8
  %29 = select i1 %24, i32 8, i32 %28
  %30 = zext i32 %29 to i64
  %31 = tail call noalias ptr @malloc(i64 noundef %30) #42
  %32 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %31, i32 noundef %23) #43
  %33 = load i32, ptr @cube, align 8, !tbaa !14
  %34 = icmp slt i32 %33, 33
  %35 = add nsw i32 %33, -1
  %36 = lshr i32 %35, 3
  %37 = and i32 %36, 536870908
  %38 = add nuw nsw i32 %37, 8
  %39 = select i1 %34, i32 8, i32 %38
  %40 = zext i32 %39 to i64
  %41 = tail call noalias ptr @malloc(i64 noundef %40) #42
  %42 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %41, i32 noundef %33) #43
  %43 = load i32, ptr @cube, align 8, !tbaa !14
  %44 = icmp slt i32 %43, 33
  %45 = add nsw i32 %43, -1
  %46 = lshr i32 %45, 3
  %47 = and i32 %46, 536870908
  %48 = add nuw nsw i32 %47, 8
  %49 = select i1 %44, i32 8, i32 %48
  %50 = zext i32 %49 to i64
  %51 = tail call noalias ptr @malloc(i64 noundef %50) #42
  %52 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %51, i32 noundef %43) #43
  %53 = load i32, ptr @cube, align 8, !tbaa !14
  %54 = icmp slt i32 %53, 33
  %55 = add nsw i32 %53, -1
  %56 = lshr i32 %55, 3
  %57 = and i32 %56, 536870908
  %58 = add nuw nsw i32 %57, 8
  %59 = select i1 %54, i32 8, i32 %58
  %60 = zext i32 %59 to i64
  %61 = tail call noalias ptr @malloc(i64 noundef %60) #42
  %62 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %61, i32 noundef %53) #43
  %63 = icmp ne i32 %2, 0
  %64 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4
  %65 = icmp sgt i32 %64, 0
  %66 = select i1 %63, i1 %65, i1 false
  br i1 %66, label %67, label %89

67:                                               ; preds = %11
  %68 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 16), align 8, !tbaa !47
  br label %69

69:                                               ; preds = %83, %67
  %70 = phi i32 [ %64, %67 ], [ %84, %83 ]
  %71 = phi ptr [ %68, %67 ], [ %85, %83 ]
  %72 = phi i64 [ 0, %67 ], [ %86, %83 ]
  %73 = getelementptr inbounds i32, ptr %71, i64 %72
  %74 = load i32, ptr %73, align 4, !tbaa !16
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %83, label %76

76:                                               ; preds = %69
  %77 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %78 = getelementptr inbounds ptr, ptr %77, i64 %72
  %79 = load ptr, ptr %78, align 8, !tbaa !13
  %80 = tail call ptr (ptr, ptr, ptr, ...) @set_or(ptr noundef %42, ptr noundef %42, ptr noundef %79) #43
  %81 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 16), align 8, !tbaa !47
  %82 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  br label %83

83:                                               ; preds = %76, %69
  %84 = phi i32 [ %70, %69 ], [ %82, %76 ]
  %85 = phi ptr [ %71, %69 ], [ %81, %76 ]
  %86 = add nuw nsw i64 %72, 1
  %87 = sext i32 %84 to i64
  %88 = icmp slt i64 %86, %87
  br i1 %88, label %69, label %89

89:                                               ; preds = %83, %11
  %90 = getelementptr inbounds %struct.set_family, ptr %12, i64 0, i32 5
  %91 = load ptr, ptr %90, align 8, !tbaa !33
  %92 = getelementptr inbounds %struct.set_family, ptr %12, i64 0, i32 3
  %93 = load i32, ptr %92, align 4, !tbaa !31
  %94 = load i32, ptr %12, align 8, !tbaa !34
  %95 = mul nsw i32 %94, %93
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds i32, ptr %91, i64 %96
  %98 = icmp sgt i32 %95, 0
  br i1 %98, label %99, label %146

99:                                               ; preds = %99, %89
  %100 = phi ptr [ %105, %99 ], [ %91, %89 ]
  %101 = load i32, ptr %100, align 4, !tbaa !16
  %102 = and i32 %101, -18433
  store i32 %102, ptr %100, align 4, !tbaa !16
  %103 = load i32, ptr %12, align 8, !tbaa !34
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds i32, ptr %100, i64 %104
  %106 = icmp ult ptr %105, %97
  br i1 %106, label %99, label %107

107:                                              ; preds = %99
  %.lcssa2 = phi i32 [ %103, %99 ]
  %108 = load i32, ptr %92, align 4, !tbaa !31
  %109 = mul nsw i32 %.lcssa2, %108
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds i32, ptr %91, i64 %110
  %112 = icmp sgt i32 %109, 0
  br i1 %112, label %113, label %146

113:                                              ; preds = %141, %107
  %114 = phi ptr [ %144, %141 ], [ %91, %107 ]
  %115 = load i32, ptr %114, align 4, !tbaa !16
  %116 = and i32 %115, 34816
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %118, label %141

118:                                              ; preds = %113
  call void @expand1(ptr noundef %1, ptr noundef nonnull %12, ptr noundef %22, ptr noundef %32, ptr noundef %62, ptr noundef %52, ptr noundef %42, ptr noundef nonnull %4, ptr noundef nonnull %114) #44
  %119 = load i32, ptr @debug, align 4, !tbaa !16
  %120 = and i32 %119, 4
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %126, label %122

122:                                              ; preds = %118
  %123 = tail call ptr (ptr, ...) @pc1(ptr noundef nonnull %114) #43
  %124 = load i32, ptr %4, align 4, !tbaa !16
  %125 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.138, ptr noundef %123, i32 noundef %124) #44
  br label %128

126:                                              ; preds = %118
  %127 = load i32, ptr %4, align 4, !tbaa !16
  br label %128

128:                                              ; preds = %126, %122
  %129 = phi i32 [ %127, %126 ], [ %124, %122 ]
  %130 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef nonnull %114, ptr noundef %22) #43
  %131 = load i32, ptr %114, align 4, !tbaa !16
  %132 = and i32 %131, -34817
  %133 = or i32 %132, 32768
  store i32 %133, ptr %114, align 4, !tbaa !16
  %134 = icmp eq i32 %129, 0
  br i1 %134, label %135, label %141

135:                                              ; preds = %128
  %136 = tail call i32 (ptr, ptr, ...) @setp_equal(ptr noundef nonnull %114, ptr noundef %62) #43
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %138, label %141

138:                                              ; preds = %135
  %139 = load i32, ptr %114, align 4, !tbaa !16
  %140 = or i32 %139, 16384
  store i32 %140, ptr %114, align 4, !tbaa !16
  br label %141

141:                                              ; preds = %138, %135, %128, %113
  %142 = load i32, ptr %12, align 8, !tbaa !34
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds i32, ptr %114, i64 %143
  %145 = icmp ult ptr %144, %111
  br i1 %145, label %113, label %148

146:                                              ; preds = %107, %89
  %147 = getelementptr inbounds %struct.set_family, ptr %12, i64 0, i32 4
  store i32 0, ptr %147, align 8, !tbaa !114
  br label %178

148:                                              ; preds = %141
  %.lcssa1 = phi i32 [ %142, %141 ]
  %149 = load ptr, ptr %90, align 8, !tbaa !33
  %150 = load i32, ptr %92, align 4, !tbaa !31
  %151 = mul nsw i32 %.lcssa1, %150
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds %struct.set_family, ptr %12, i64 0, i32 4
  store i32 0, ptr %153, align 8, !tbaa !114
  %154 = getelementptr inbounds i32, ptr %149, i64 %152
  %155 = icmp sgt i32 %151, 0
  br i1 %155, label %156, label %178

156:                                              ; preds = %168, %148
  %157 = phi i32 [ %169, %168 ], [ 0, %148 ]
  %158 = phi ptr [ %172, %168 ], [ %149, %148 ]
  %159 = load i32, ptr %158, align 4, !tbaa !16
  %160 = and i32 %159, 2048
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %164, label %162

162:                                              ; preds = %156
  %163 = and i32 %159, -8193
  store i32 %163, ptr %158, align 4, !tbaa !16
  br label %168

164:                                              ; preds = %156
  %165 = or i32 %159, 8192
  store i32 %165, ptr %158, align 4, !tbaa !16
  %166 = load i32, ptr %153, align 8, !tbaa !114
  %167 = add nsw i32 %166, 1
  store i32 %167, ptr %153, align 8, !tbaa !114
  br label %168

168:                                              ; preds = %164, %162
  %169 = phi i32 [ 1, %162 ], [ %157, %164 ]
  %170 = load i32, ptr %12, align 8, !tbaa !34
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds i32, ptr %158, i64 %171
  %173 = icmp ult ptr %172, %154
  br i1 %173, label %156, label %174

174:                                              ; preds = %168
  %.lcssa = phi i32 [ %169, %168 ]
  %175 = icmp eq i32 %.lcssa, 0
  br i1 %175, label %178, label %176

176:                                              ; preds = %174
  %177 = tail call ptr (ptr, ...) @sf_inactive(ptr noundef nonnull %12) #43
  br label %178

178:                                              ; preds = %176, %174, %148, %146
  %179 = phi ptr [ %177, %176 ], [ %12, %174 ], [ %12, %148 ], [ %12, %146 ]
  %180 = icmp eq ptr %22, null
  br i1 %180, label %182, label %181

181:                                              ; preds = %178
  tail call void @free(ptr noundef nonnull %22) #43
  br label %182

182:                                              ; preds = %181, %178
  %183 = icmp eq ptr %32, null
  br i1 %183, label %185, label %184

184:                                              ; preds = %182
  tail call void @free(ptr noundef nonnull %32) #43
  br label %185

185:                                              ; preds = %184, %182
  %186 = icmp eq ptr %42, null
  br i1 %186, label %188, label %187

187:                                              ; preds = %185
  tail call void @free(ptr noundef nonnull %42) #43
  br label %188

188:                                              ; preds = %187, %185
  %189 = icmp eq ptr %52, null
  br i1 %189, label %191, label %190

190:                                              ; preds = %188
  tail call void @free(ptr noundef nonnull %52) #43
  br label %191

191:                                              ; preds = %190, %188
  %192 = icmp eq ptr %62, null
  br i1 %192, label %194, label %193

193:                                              ; preds = %191
  tail call void @free(ptr noundef nonnull %62) #43
  br label %194

194:                                              ; preds = %193, %191
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4) #45
  ret ptr %179
}

; Function Attrs: nounwind optsize uwtable
define internal void @expand1(ptr nocapture noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5, ptr noundef %6, ptr nocapture noundef %7, ptr noundef %8) #0 {
  %10 = load i32, ptr @debug, align 4, !tbaa !16
  %11 = and i32 %10, 8
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %16, label %13

13:                                               ; preds = %9
  %14 = tail call ptr (ptr, ...) @pc1(ptr noundef %8) #43
  %15 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1.139, ptr noundef %14) #44
  br label %16

16:                                               ; preds = %13, %9
  %17 = load i32, ptr %8, align 4, !tbaa !16
  %18 = or i32 %17, 32768
  store i32 %18, ptr %8, align 4, !tbaa !16
  tail call void @setup_BB_CC(ptr noundef %0, ptr noundef %1) #44
  store i32 0, ptr %7, align 4, !tbaa !16
  %19 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %5, ptr noundef nonnull %8) #43
  %20 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %2, ptr noundef nonnull %8) #43
  %21 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %22 = tail call ptr (ptr, ptr, ptr, ...) @set_diff(ptr noundef %3, ptr noundef %21, ptr noundef %2) #43
  %23 = tail call i32 (ptr, ...) @setp_empty(ptr noundef %6) #43
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %16
  %26 = tail call ptr (ptr, ptr, ptr, ...) @set_diff(ptr noundef %3, ptr noundef %3, ptr noundef %6) #43
  tail call void @elim_lowering(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #44
  br label %27

27:                                               ; preds = %25, %16
  tail call void @essen_parts(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #44
  %28 = tail call ptr (ptr, ptr, ptr, ...) @set_or(ptr noundef %4, ptr noundef %2, ptr noundef %3) #43
  %29 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 4
  %30 = load i32, ptr %29, align 8, !tbaa !114
  %31 = icmp sgt i32 %30, 0
  br i1 %31, label %32, label %35

32:                                               ; preds = %27
  tail call void @select_feasible(ptr noundef %0, ptr noundef nonnull %1, ptr noundef %2, ptr noundef %3, ptr noundef %5, ptr noundef nonnull %7) #44
  %33 = load i32, ptr %29, align 8, !tbaa !114
  %34 = icmp sgt i32 %33, 0
  br i1 %34, label %39, label %35

35:                                               ; preds = %39, %32, %27
  %36 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 4
  %37 = load i32, ptr %36, align 8, !tbaa !114
  %38 = icmp sgt i32 %37, 0
  br i1 %38, label %55, label %58

39:                                               ; preds = %39, %32
  %40 = tail call i32 @most_frequent(ptr noundef nonnull %1, ptr noundef %3) #44
  %41 = and i32 %40, 31
  %42 = shl nuw i32 1, %41
  %43 = ashr i32 %40, 5
  %44 = add nsw i32 %43, 1
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i32, ptr %2, i64 %45
  %47 = load i32, ptr %46, align 4, !tbaa !16
  %48 = or i32 %42, %47
  store i32 %48, ptr %46, align 4, !tbaa !16
  %49 = xor i32 %42, -1
  %50 = getelementptr inbounds i32, ptr %3, i64 %45
  %51 = load i32, ptr %50, align 4, !tbaa !16
  %52 = and i32 %51, %49
  store i32 %52, ptr %50, align 4, !tbaa !16
  tail call void @essen_parts(ptr noundef %0, ptr noundef nonnull %1, ptr noundef %2, ptr noundef %3) #44
  %53 = load i32, ptr %29, align 8, !tbaa !114
  %54 = icmp sgt i32 %53, 0
  br i1 %54, label %39, label %35

55:                                               ; preds = %55, %35
  tail call void @mincov(ptr noundef nonnull %0, ptr noundef %2, ptr noundef %3) #44
  %56 = load i32, ptr %36, align 8, !tbaa !114
  %57 = icmp sgt i32 %56, 0
  br i1 %57, label %55, label %58

58:                                               ; preds = %55, %35
  %59 = tail call ptr (ptr, ptr, ptr, ...) @set_or(ptr noundef %2, ptr noundef %2, ptr noundef %3) #43
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @setup_BB_CC(ptr nocapture noundef %0, ptr noundef %1) #21 {
  %3 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %4 = load i32, ptr %3, align 4, !tbaa !31
  %5 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 4
  store i32 %4, ptr %5, align 8, !tbaa !114
  %6 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %7 = load ptr, ptr %6, align 8, !tbaa !33
  %8 = load i32, ptr %0, align 8, !tbaa !34
  %9 = mul nsw i32 %8, %4
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds i32, ptr %7, i64 %10
  %12 = icmp sgt i32 %9, 0
  br i1 %12, label %13, label %21

13:                                               ; preds = %13, %2
  %14 = phi ptr [ %19, %13 ], [ %7, %2 ]
  %15 = load i32, ptr %14, align 4, !tbaa !16
  %16 = or i32 %15, 8192
  store i32 %16, ptr %14, align 4, !tbaa !16
  %17 = load i32, ptr %0, align 8, !tbaa !34
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i32, ptr %14, i64 %18
  %20 = icmp ult ptr %19, %11
  br i1 %20, label %13, label %21

21:                                               ; preds = %13, %2
  %22 = icmp eq ptr %1, null
  br i1 %22, label %52, label %23

23:                                               ; preds = %21
  %24 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 3
  %25 = load i32, ptr %24, align 4, !tbaa !31
  %26 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 4
  store i32 %25, ptr %26, align 8, !tbaa !114
  %27 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 5
  %28 = load ptr, ptr %27, align 8, !tbaa !33
  %29 = load i32, ptr %1, align 8, !tbaa !34
  %30 = mul nsw i32 %29, %25
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i32, ptr %28, i64 %31
  %33 = icmp sgt i32 %30, 0
  br i1 %33, label %34, label %52

34:                                               ; preds = %46, %23
  %35 = phi ptr [ %50, %46 ], [ %28, %23 ]
  %36 = load i32, ptr %35, align 4, !tbaa !16
  %37 = and i32 %36, 34816
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %44, label %39

39:                                               ; preds = %34
  %40 = load i32, ptr %26, align 8, !tbaa !114
  %41 = add nsw i32 %40, -1
  store i32 %41, ptr %26, align 8, !tbaa !114
  %42 = load i32, ptr %35, align 4, !tbaa !16
  %43 = and i32 %42, -8193
  br label %46

44:                                               ; preds = %34
  %45 = or i32 %36, 8192
  br label %46

46:                                               ; preds = %44, %39
  %47 = phi i32 [ %45, %44 ], [ %43, %39 ]
  store i32 %47, ptr %35, align 4, !tbaa !16
  %48 = load i32, ptr %1, align 8, !tbaa !34
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i32, ptr %35, i64 %49
  %51 = icmp ult ptr %50, %32
  br i1 %51, label %34, label %52

52:                                               ; preds = %46, %23, %21
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @elim_lowering(ptr nocapture noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #0 {
  %5 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 11), align 8, !tbaa !7
  %6 = load ptr, ptr %5, align 8, !tbaa !13
  %7 = tail call ptr (ptr, ptr, ptr, ...) @set_or(ptr noundef %6, ptr noundef %2, ptr noundef %3) #43
  %8 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %9 = load ptr, ptr %8, align 8, !tbaa !33
  %10 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %11 = load i32, ptr %10, align 4, !tbaa !31
  %12 = load i32, ptr %0, align 8, !tbaa !34
  %13 = mul nsw i32 %12, %11
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds i32, ptr %9, i64 %14
  %16 = icmp sgt i32 %13, 0
  br i1 %16, label %17, label %110

17:                                               ; preds = %4
  %18 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8
  %19 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 7), align 8
  %20 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 6), align 8
  %21 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 4
  br label %22

22:                                               ; preds = %105, %17
  %23 = phi i32 [ %12, %17 ], [ %106, %105 ]
  %24 = phi ptr [ %9, %17 ], [ %108, %105 ]
  %25 = load i32, ptr %24, align 4, !tbaa !16
  %26 = and i32 %25, 8192
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %105, label %28

28:                                               ; preds = %22
  %29 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 15), align 4, !tbaa !50
  %30 = icmp eq i32 %29, -1
  br i1 %30, label %62, label %31

31:                                               ; preds = %28
  %32 = sext i32 %29 to i64
  %33 = getelementptr inbounds i32, ptr %24, i64 %32
  %34 = load i32, ptr %33, align 4, !tbaa !16
  %35 = getelementptr inbounds i32, ptr %7, i64 %32
  %36 = load i32, ptr %35, align 4, !tbaa !16
  %37 = and i32 %36, %34
  %38 = lshr i32 %37, 1
  %39 = or i32 %38, %37
  %40 = xor i32 %39, -1
  %41 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 14), align 8, !tbaa !51
  %42 = and i32 %41, %40
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %99

44:                                               ; preds = %31
  %45 = icmp sgt i32 %29, 1
  br i1 %45, label %46, label %62

46:                                               ; preds = %44
  %47 = zext i32 %29 to i64
  br label %51

48:                                               ; preds = %51
  %49 = add nuw nsw i64 %52, 1
  %50 = icmp eq i64 %49, %47
  br i1 %50, label %62, label %51

51:                                               ; preds = %48, %46
  %52 = phi i64 [ 1, %46 ], [ %49, %48 ]
  %53 = getelementptr inbounds i32, ptr %24, i64 %52
  %54 = load i32, ptr %53, align 4, !tbaa !16
  %55 = getelementptr inbounds i32, ptr %7, i64 %52
  %56 = load i32, ptr %55, align 4, !tbaa !16
  %57 = and i32 %56, %54
  %58 = lshr i32 %57, 1
  %59 = or i32 %58, %57
  %60 = and i32 %59, 1431655765
  %61 = icmp eq i32 %60, 1431655765
  br i1 %61, label %48, label %99

62:                                               ; preds = %48, %44, %28
  %63 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %64 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %65 = icmp slt i32 %63, %64
  br i1 %65, label %66, label %105

66:                                               ; preds = %62
  %67 = sext i32 %63 to i64
  br label %68

68:                                               ; preds = %95, %66
  %69 = phi i64 [ %67, %66 ], [ %96, %95 ]
  %70 = getelementptr inbounds ptr, ptr %18, i64 %69
  %71 = load ptr, ptr %70, align 8, !tbaa !13
  %72 = getelementptr inbounds i32, ptr %19, i64 %69
  %73 = load i32, ptr %72, align 4, !tbaa !16
  %74 = getelementptr inbounds i32, ptr %20, i64 %69
  %75 = load i32, ptr %74, align 4, !tbaa !16
  %76 = icmp sgt i32 %75, %73
  br i1 %76, label %99, label %77

77:                                               ; preds = %68
  %78 = sext i32 %75 to i64
  %79 = add i32 %73, 1
  br label %84

80:                                               ; preds = %84
  %81 = add nsw i64 %85, 1
  %82 = trunc i64 %81 to i32
  %83 = icmp eq i32 %79, %82
  br i1 %83, label %99, label %84

84:                                               ; preds = %80, %77
  %85 = phi i64 [ %78, %77 ], [ %81, %80 ]
  %86 = getelementptr inbounds i32, ptr %24, i64 %85
  %87 = load i32, ptr %86, align 4, !tbaa !16
  %88 = getelementptr inbounds i32, ptr %7, i64 %85
  %89 = load i32, ptr %88, align 4, !tbaa !16
  %90 = and i32 %89, %87
  %91 = getelementptr inbounds i32, ptr %71, i64 %85
  %92 = load i32, ptr %91, align 4, !tbaa !16
  %93 = and i32 %90, %92
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %80, label %95

95:                                               ; preds = %84
  %96 = add nsw i64 %69, 1
  %97 = trunc i64 %96 to i32
  %98 = icmp eq i32 %64, %97
  br i1 %98, label %105, label %68

99:                                               ; preds = %80, %68, %51, %31
  %100 = load i32, ptr %21, align 8, !tbaa !114
  %101 = add nsw i32 %100, -1
  store i32 %101, ptr %21, align 8, !tbaa !114
  %102 = load i32, ptr %24, align 4, !tbaa !16
  %103 = and i32 %102, -8193
  store i32 %103, ptr %24, align 4, !tbaa !16
  %104 = load i32, ptr %0, align 8, !tbaa !34
  br label %105

105:                                              ; preds = %99, %95, %62, %22
  %106 = phi i32 [ %23, %62 ], [ %23, %22 ], [ %104, %99 ], [ %23, %95 ]
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds i32, ptr %24, i64 %107
  %109 = icmp ult ptr %108, %15
  br i1 %109, label %22, label %110

110:                                              ; preds = %105, %4
  %111 = icmp eq ptr %1, null
  br i1 %111, label %161, label %112

112:                                              ; preds = %110
  %113 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 5
  %114 = load ptr, ptr %113, align 8, !tbaa !33
  %115 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 3
  %116 = load i32, ptr %115, align 4, !tbaa !31
  %117 = load i32, ptr %1, align 8, !tbaa !34
  %118 = mul nsw i32 %117, %116
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds i32, ptr %114, i64 %119
  %121 = icmp sgt i32 %118, 0
  br i1 %121, label %122, label %161

122:                                              ; preds = %112
  %123 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 4
  br label %124

124:                                              ; preds = %156, %122
  %125 = phi i32 [ %117, %122 ], [ %157, %156 ]
  %126 = phi ptr [ %114, %122 ], [ %159, %156 ]
  %127 = load i32, ptr %126, align 4, !tbaa !16
  %128 = and i32 %127, 8192
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %156, label %130

130:                                              ; preds = %124
  %131 = and i32 %127, 1023
  %132 = tail call i32 @llvm.smin.i32(i32 %131, i32 1)
  %133 = add nsw i32 %132, -1
  br label %134

134:                                              ; preds = %144, %130
  %135 = phi i32 [ %131, %130 ], [ %145, %144 ]
  %136 = zext i32 %135 to i64
  %137 = getelementptr inbounds i32, ptr %126, i64 %136
  %138 = load i32, ptr %137, align 4, !tbaa !16
  %139 = getelementptr inbounds i32, ptr %7, i64 %136
  %140 = load i32, ptr %139, align 4, !tbaa !16
  %141 = xor i32 %140, -1
  %142 = and i32 %138, %141
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %144, label %147

144:                                              ; preds = %134
  %145 = add nsw i32 %135, -1
  %146 = icmp sgt i32 %135, 1
  br i1 %146, label %134, label %147

147:                                              ; preds = %144, %134
  %148 = phi i32 [ %135, %134 ], [ %133, %144 ]
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %156, label %150

150:                                              ; preds = %147
  %151 = load i32, ptr %123, align 8, !tbaa !114
  %152 = add nsw i32 %151, -1
  store i32 %152, ptr %123, align 8, !tbaa !114
  %153 = load i32, ptr %126, align 4, !tbaa !16
  %154 = and i32 %153, -8193
  store i32 %154, ptr %126, align 4, !tbaa !16
  %155 = load i32, ptr %1, align 8, !tbaa !34
  br label %156

156:                                              ; preds = %150, %147, %124
  %157 = phi i32 [ %125, %147 ], [ %125, %124 ], [ %155, %150 ]
  %158 = sext i32 %157 to i64
  %159 = getelementptr inbounds i32, ptr %126, i64 %158
  %160 = icmp ult ptr %159, %120
  br i1 %160, label %124, label %161

161:                                              ; preds = %156, %112, %110
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @essen_parts(ptr nocapture noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #0 {
  %5 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 11), align 8, !tbaa !7
  %6 = load ptr, ptr %5, align 8, !tbaa !13
  %7 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 13), align 8, !tbaa !52
  %8 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %6, ptr noundef %7) #43
  %9 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %10 = load ptr, ptr %9, align 8, !tbaa !33
  %11 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %12 = load i32, ptr %11, align 4, !tbaa !31
  %13 = load i32, ptr %0, align 8, !tbaa !34
  %14 = mul nsw i32 %13, %12
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds i32, ptr %10, i64 %15
  %17 = icmp sgt i32 %14, 0
  br i1 %17, label %18, label %173

18:                                               ; preds = %4
  %19 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 4
  br label %20

20:                                               ; preds = %168, %18
  %21 = phi ptr [ %10, %18 ], [ %171, %168 ]
  %22 = load i32, ptr %21, align 4, !tbaa !16
  %23 = and i32 %22, 8192
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %168, label %25

25:                                               ; preds = %20
  %26 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 15), align 4, !tbaa !50
  %27 = icmp eq i32 %26, -1
  br i1 %27, label %112, label %28

28:                                               ; preds = %25
  %29 = sext i32 %26 to i64
  %30 = getelementptr inbounds i32, ptr %21, i64 %29
  %31 = load i32, ptr %30, align 4, !tbaa !16
  %32 = getelementptr inbounds i32, ptr %2, i64 %29
  %33 = load i32, ptr %32, align 4, !tbaa !16
  %34 = and i32 %33, %31
  %35 = lshr i32 %34, 1
  %36 = or i32 %35, %34
  %37 = xor i32 %36, -1
  %38 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 14), align 8, !tbaa !51
  %39 = and i32 %38, %37
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %64, label %41

41:                                               ; preds = %28
  %42 = and i32 %39, 255
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %43
  %45 = load i32, ptr %44, align 4, !tbaa !16
  %46 = lshr i32 %39, 8
  %47 = and i32 %46, 255
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %48
  %50 = load i32, ptr %49, align 4, !tbaa !16
  %51 = add nsw i32 %50, %45
  %52 = lshr i32 %39, 16
  %53 = and i32 %52, 255
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %54
  %56 = load i32, ptr %55, align 4, !tbaa !16
  %57 = add nsw i32 %51, %56
  %58 = lshr i32 %39, 24
  %59 = zext i32 %58 to i64
  %60 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %59
  %61 = load i32, ptr %60, align 4, !tbaa !16
  %62 = add nsw i32 %57, %61
  %63 = icmp sgt i32 %62, 1
  br i1 %63, label %168, label %64

64:                                               ; preds = %41, %28
  %65 = phi i32 [ %62, %41 ], [ 0, %28 ]
  %66 = icmp sgt i32 %26, 1
  br i1 %66, label %67, label %112

67:                                               ; preds = %64
  %68 = zext i32 %26 to i64
  br label %69

69:                                               ; preds = %108, %67
  %70 = phi i64 [ 1, %67 ], [ %110, %108 ]
  %71 = phi i32 [ %65, %67 ], [ %109, %108 ]
  %72 = getelementptr inbounds i32, ptr %21, i64 %70
  %73 = load i32, ptr %72, align 4, !tbaa !16
  %74 = getelementptr inbounds i32, ptr %2, i64 %70
  %75 = load i32, ptr %74, align 4, !tbaa !16
  %76 = and i32 %75, %73
  %77 = lshr i32 %76, 1
  %78 = or i32 %77, %76
  %79 = and i32 %78, 1431655765
  %80 = xor i32 %79, 1431655765
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %108, label %82

82:                                               ; preds = %69
  %83 = icmp eq i32 %71, 1
  br i1 %83, label %168, label %84

84:                                               ; preds = %82
  %85 = and i32 %80, 85
  %86 = zext i32 %85 to i64
  %87 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %86
  %88 = load i32, ptr %87, align 4, !tbaa !16
  %89 = lshr i32 %80, 8
  %90 = and i32 %89, 85
  %91 = zext i32 %90 to i64
  %92 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %91
  %93 = load i32, ptr %92, align 4, !tbaa !16
  %94 = lshr i32 %80, 16
  %95 = and i32 %94, 85
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %96
  %98 = load i32, ptr %97, align 4, !tbaa !16
  %99 = lshr i32 %80, 24
  %100 = zext i32 %99 to i64
  %101 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %100
  %102 = load i32, ptr %101, align 4, !tbaa !16
  %103 = add i32 %88, %71
  %104 = add i32 %103, %93
  %105 = add i32 %104, %98
  %106 = add i32 %105, %102
  %107 = icmp sgt i32 %106, 1
  br i1 %107, label %168, label %108

108:                                              ; preds = %84, %69
  %109 = phi i32 [ %106, %84 ], [ %71, %69 ]
  %110 = add nuw nsw i64 %70, 1
  %111 = icmp eq i64 %110, %68
  br i1 %111, label %112, label %69

112:                                              ; preds = %108, %64, %25
  %113 = phi i32 [ 0, %25 ], [ %65, %64 ], [ %109, %108 ]
  %114 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %115 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %116 = icmp slt i32 %114, %115
  br i1 %116, label %117, label %158

117:                                              ; preds = %112
  %118 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %119 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 7), align 8, !tbaa !18
  %120 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 6), align 8, !tbaa !19
  %121 = sext i32 %114 to i64
  br label %122

122:                                              ; preds = %153, %117
  %123 = phi i64 [ %121, %117 ], [ %155, %153 ]
  %124 = phi i32 [ %113, %117 ], [ %154, %153 ]
  %125 = getelementptr inbounds ptr, ptr %118, i64 %123
  %126 = load ptr, ptr %125, align 8, !tbaa !13
  %127 = getelementptr inbounds i32, ptr %119, i64 %123
  %128 = load i32, ptr %127, align 4, !tbaa !16
  %129 = getelementptr inbounds i32, ptr %120, i64 %123
  %130 = load i32, ptr %129, align 4, !tbaa !16
  %131 = icmp sgt i32 %130, %128
  br i1 %131, label %150, label %132

132:                                              ; preds = %122
  %133 = sext i32 %130 to i64
  %134 = add i32 %128, 1
  br label %139

135:                                              ; preds = %139
  %136 = add nsw i64 %140, 1
  %137 = trunc i64 %136 to i32
  %138 = icmp eq i32 %134, %137
  br i1 %138, label %150, label %139

139:                                              ; preds = %135, %132
  %140 = phi i64 [ %133, %132 ], [ %136, %135 ]
  %141 = getelementptr inbounds i32, ptr %21, i64 %140
  %142 = load i32, ptr %141, align 4, !tbaa !16
  %143 = getelementptr inbounds i32, ptr %2, i64 %140
  %144 = load i32, ptr %143, align 4, !tbaa !16
  %145 = and i32 %144, %142
  %146 = getelementptr inbounds i32, ptr %126, i64 %140
  %147 = load i32, ptr %146, align 4, !tbaa !16
  %148 = and i32 %145, %147
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %135, label %153

150:                                              ; preds = %135, %122
  %151 = add nsw i32 %124, 1
  %152 = icmp sgt i32 %124, 0
  br i1 %152, label %168, label %153

153:                                              ; preds = %150, %139
  %154 = phi i32 [ %151, %150 ], [ %124, %139 ]
  %155 = add nsw i64 %123, 1
  %156 = trunc i64 %155 to i32
  %157 = icmp eq i32 %115, %156
  br i1 %157, label %158, label %122

158:                                              ; preds = %153, %112
  %159 = phi i32 [ %113, %112 ], [ %154, %153 ]
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %161, label %162

161:                                              ; preds = %158
  tail call void (ptr, ...) @fatal(ptr noundef nonnull @.str.2.145) #43
  br label %168

162:                                              ; preds = %158
  %163 = tail call ptr (ptr, ptr, ptr, ...) @force_lower(ptr noundef %6, ptr noundef nonnull %21, ptr noundef %2) #43
  %164 = load i32, ptr %19, align 8, !tbaa !114
  %165 = add nsw i32 %164, -1
  store i32 %165, ptr %19, align 8, !tbaa !114
  %166 = load i32, ptr %21, align 4, !tbaa !16
  %167 = and i32 %166, -8193
  store i32 %167, ptr %21, align 4, !tbaa !16
  br label %168

168:                                              ; preds = %162, %161, %150, %84, %82, %41, %20
  %169 = load i32, ptr %0, align 8, !tbaa !34
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds i32, ptr %21, i64 %170
  %172 = icmp ult ptr %171, %16
  br i1 %172, label %20, label %173

173:                                              ; preds = %168, %4
  %174 = tail call i32 (ptr, ...) @setp_empty(ptr noundef %6) #43
  %175 = icmp eq i32 %174, 0
  br i1 %175, label %176, label %178

176:                                              ; preds = %173
  %177 = tail call ptr (ptr, ptr, ptr, ...) @set_diff(ptr noundef %3, ptr noundef %3, ptr noundef %6) #43
  tail call void @elim_lowering(ptr noundef nonnull %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #44
  br label %178

178:                                              ; preds = %176, %173
  %179 = load i32, ptr @debug, align 4, !tbaa !16
  %180 = and i32 %179, 8
  %181 = icmp eq i32 %180, 0
  br i1 %181, label %186, label %182

182:                                              ; preds = %178
  %183 = tail call ptr (ptr, ...) @pc1(ptr noundef %2) #43
  %184 = tail call ptr (ptr, ...) @pc2(ptr noundef %3) #43
  %185 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.146, ptr noundef %183, ptr noundef %184) #44
  br label %186

186:                                              ; preds = %182, %178
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @select_feasible(ptr nocapture noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr nocapture noundef %5) #0 {
  %7 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 4
  %8 = load i32, ptr %7, align 8, !tbaa !114
  %9 = sext i32 %8 to i64
  %10 = shl nsw i64 %9, 3
  %11 = tail call noalias ptr @malloc(i64 noundef %10) #42
  %12 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 5
  %13 = load ptr, ptr %12, align 8, !tbaa !33
  %14 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 3
  %15 = load i32, ptr %14, align 4, !tbaa !31
  %16 = load i32, ptr %1, align 8, !tbaa !34
  %17 = mul nsw i32 %16, %15
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i32, ptr %13, i64 %18
  %20 = icmp sgt i32 %17, 0
  br i1 %20, label %21, label %37

21:                                               ; preds = %6
  %22 = sext i32 %16 to i64
  br label %23

23:                                               ; preds = %33, %21
  %24 = phi ptr [ %13, %21 ], [ %35, %33 ]
  %25 = phi i32 [ 0, %21 ], [ %34, %33 ]
  %26 = load i32, ptr %24, align 4, !tbaa !16
  %27 = and i32 %26, 8192
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %33, label %29

29:                                               ; preds = %23
  %30 = add nsw i32 %25, 1
  %31 = sext i32 %25 to i64
  %32 = getelementptr inbounds ptr, ptr %11, i64 %31
  store ptr %24, ptr %32, align 8, !tbaa !13
  br label %33

33:                                               ; preds = %29, %23
  %34 = phi i32 [ %30, %29 ], [ %25, %23 ]
  %35 = getelementptr inbounds i32, ptr %24, i64 %22
  %36 = icmp ult ptr %35, %19
  br i1 %36, label %23, label %37

37:                                               ; preds = %33, %6
  %38 = phi i32 [ 0, %6 ], [ %34, %33 ]
  %39 = tail call noalias ptr @malloc(i64 noundef %10) #42
  %40 = load i32, ptr @cube, align 8, !tbaa !14
  %41 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef %38, i32 noundef %40) #43
  %42 = icmp sgt i32 %38, 0
  br i1 %42, label %43, label %56

43:                                               ; preds = %37
  %44 = getelementptr inbounds %struct.set_family, ptr %41, i64 0, i32 5
  %45 = load ptr, ptr %44, align 8, !tbaa !33
  %46 = load i32, ptr %41, align 8, !tbaa !34
  %47 = sext i32 %46 to i64
  %48 = zext i32 %38 to i64
  br label %49

49:                                               ; preds = %49, %43
  %50 = phi i64 [ 0, %43 ], [ %54, %49 ]
  %51 = mul nsw i64 %50, %47
  %52 = getelementptr inbounds i32, ptr %45, i64 %51
  %53 = getelementptr inbounds ptr, ptr %39, i64 %50
  store ptr %52, ptr %53, align 8, !tbaa !13
  %54 = add nuw nsw i64 %50, 1
  %55 = icmp eq i64 %54, %48
  br i1 %55, label %56, label %49

56:                                               ; preds = %49, %37
  br label %57

57:                                               ; preds = %162, %56
  %58 = phi i32 [ %97, %162 ], [ %38, %56 ]
  %59 = phi ptr [ %152, %162 ], [ undef, %56 ]
  tail call void @essen_raising(ptr noundef %0, ptr noundef %2, ptr noundef %3) #44
  %60 = icmp sgt i32 %58, 0
  br i1 %60, label %61, label %96

61:                                               ; preds = %57
  %62 = zext i32 %58 to i64
  br label %63

63:                                               ; preds = %92, %61
  %64 = phi i64 [ 0, %61 ], [ %94, %92 ]
  %65 = phi i32 [ 0, %61 ], [ %93, %92 ]
  %66 = getelementptr inbounds ptr, ptr %11, i64 %64
  %67 = load ptr, ptr %66, align 8, !tbaa !13
  %68 = load i32, ptr %67, align 4, !tbaa !16
  %69 = and i32 %68, 8192
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %92, label %71

71:                                               ; preds = %63
  %72 = tail call i32 (ptr, ptr, ...) @setp_implies(ptr noundef nonnull %67, ptr noundef %2) #43
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %83, label %74

74:                                               ; preds = %71
  %75 = load i32, ptr %5, align 4, !tbaa !16
  %76 = add nsw i32 %75, 1
  store i32 %76, ptr %5, align 4, !tbaa !16
  %77 = tail call ptr (ptr, ptr, ptr, ...) @set_or(ptr noundef %4, ptr noundef %4, ptr noundef nonnull %67) #43
  %78 = load i32, ptr %7, align 8, !tbaa !114
  %79 = add nsw i32 %78, -1
  store i32 %79, ptr %7, align 8, !tbaa !114
  %80 = load i32, ptr %67, align 4, !tbaa !16
  %81 = and i32 %80, -10241
  %82 = or i32 %81, 2048
  store i32 %82, ptr %67, align 4, !tbaa !16
  br label %92

83:                                               ; preds = %71
  %84 = sext i32 %65 to i64
  %85 = getelementptr inbounds ptr, ptr %39, i64 %84
  %86 = load ptr, ptr %85, align 8, !tbaa !13
  %87 = tail call i32 @feasibly_covered(ptr noundef %0, ptr noundef nonnull %67, ptr noundef %2, ptr noundef %86) #44
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %92, label %89

89:                                               ; preds = %83
  %90 = getelementptr inbounds ptr, ptr %11, i64 %84
  store ptr %67, ptr %90, align 8, !tbaa !13
  %91 = add nsw i32 %65, 1
  br label %92

92:                                               ; preds = %89, %83, %74, %63
  %93 = phi i32 [ %65, %74 ], [ %91, %89 ], [ %65, %83 ], [ %65, %63 ]
  %94 = add nuw nsw i64 %64, 1
  %95 = icmp eq i64 %94, %62
  br i1 %95, label %96, label %63

96:                                               ; preds = %92, %57
  %97 = phi i32 [ 0, %57 ], [ %93, %92 ]
  %98 = load i32, ptr @debug, align 4, !tbaa !16
  %99 = and i32 %98, 8
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %103, label %101

101:                                              ; preds = %96
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.6.142, i32 noundef %58, i32 noundef %97) #44
  br label %103

103:                                              ; preds = %101, %96
  %104 = icmp eq i32 %97, 0
  br i1 %104, label %109, label %105

105:                                              ; preds = %103
  %106 = icmp sgt i32 %97, 0
  br i1 %106, label %107, label %151

107:                                              ; preds = %105
  %108 = zext i32 %97 to i64
  br label %116

109:                                              ; preds = %103
  %110 = icmp eq ptr %11, null
  br i1 %110, label %112, label %111

111:                                              ; preds = %109
  tail call void @free(ptr noundef nonnull %11) #43
  br label %112

112:                                              ; preds = %111, %109
  %113 = icmp eq ptr %39, null
  br i1 %113, label %115, label %114

114:                                              ; preds = %112
  tail call void @free(ptr noundef nonnull %39) #43
  br label %115

115:                                              ; preds = %114, %112
  tail call void (ptr, ...) @sf_free(ptr noundef %41) #43
  ret void

116:                                              ; preds = %145, %107
  %117 = phi i64 [ 0, %107 ], [ %149, %145 ]
  %118 = phi ptr [ %59, %107 ], [ %148, %145 ]
  %119 = phi i32 [ 9999, %107 ], [ %147, %145 ]
  %120 = phi i32 [ 0, %107 ], [ %146, %145 ]
  %121 = getelementptr inbounds ptr, ptr %11, i64 %117
  %122 = load ptr, ptr %121, align 8, !tbaa !13
  %123 = tail call i32 (ptr, ptr, ...) @set_dist(ptr noundef %122, ptr noundef %3) #43
  %124 = getelementptr inbounds ptr, ptr %39, i64 %117
  %125 = load ptr, ptr %124, align 8, !tbaa !13
  br label %126

126:                                              ; preds = %126, %116
  %127 = phi i64 [ 0, %116 ], [ %135, %126 ]
  %128 = phi i32 [ 0, %116 ], [ %134, %126 ]
  %129 = getelementptr inbounds ptr, ptr %11, i64 %127
  %130 = load ptr, ptr %129, align 8, !tbaa !13
  %131 = tail call i32 (ptr, ptr, ...) @setp_disjoint(ptr noundef %125, ptr noundef %130) #43
  %132 = icmp ne i32 %131, 0
  %133 = zext i1 %132 to i32
  %134 = add nuw nsw i32 %128, %133
  %135 = add nuw nsw i64 %127, 1
  %136 = icmp eq i64 %135, %108
  br i1 %136, label %137, label %126

137:                                              ; preds = %126
  %.lcssa = phi i32 [ %134, %126 ]
  %138 = icmp sgt i32 %.lcssa, %120
  br i1 %138, label %145, label %139

139:                                              ; preds = %137
  %140 = icmp eq i32 %.lcssa, %120
  %141 = icmp slt i32 %123, %119
  %142 = select i1 %140, i1 %141, i1 false
  %143 = select i1 %142, i32 %123, i32 %119
  %144 = select i1 %142, ptr %122, ptr %118
  br label %145

145:                                              ; preds = %139, %137
  %146 = phi i32 [ %.lcssa, %137 ], [ %120, %139 ]
  %147 = phi i32 [ %123, %137 ], [ %143, %139 ]
  %148 = phi ptr [ %122, %137 ], [ %144, %139 ]
  %149 = add nuw nsw i64 %117, 1
  %150 = icmp eq i64 %149, %108
  br i1 %150, label %151, label %116

151:                                              ; preds = %145, %105
  %152 = phi ptr [ %59, %105 ], [ %148, %145 ]
  %153 = tail call ptr (ptr, ptr, ptr, ...) @set_or(ptr noundef %2, ptr noundef %2, ptr noundef %152) #43
  %154 = tail call ptr (ptr, ptr, ptr, ...) @set_diff(ptr noundef %3, ptr noundef %3, ptr noundef %2) #43
  %155 = load i32, ptr @debug, align 4, !tbaa !16
  %156 = and i32 %155, 8
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %162, label %158

158:                                              ; preds = %151
  %159 = tail call ptr (ptr, ...) @pc1(ptr noundef %2) #43
  %160 = tail call ptr (ptr, ...) @pc2(ptr noundef %3) #43
  %161 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.7.143, ptr noundef %159, ptr noundef %160) #44
  br label %162

162:                                              ; preds = %158, %151
  tail call void @essen_parts(ptr noundef %0, ptr noundef nonnull %1, ptr noundef %2, ptr noundef %3) #44
  br label %57
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @most_frequent(ptr noundef readonly %0, ptr noundef %1) #0 {
  %3 = load i32, ptr @cube, align 8, !tbaa !14
  %4 = sext i32 %3 to i64
  %5 = shl nsw i64 %4, 2
  %6 = tail call noalias ptr @malloc(i64 noundef %5) #42
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %2
  %9 = zext i32 %3 to i64
  %10 = shl nuw nsw i64 %9, 2
  tail call void @llvm.memset.p0.i64(ptr align 4 %6, i8 0, i64 %10, i1 false), !tbaa !16
  br label %11

11:                                               ; preds = %8, %2
  %12 = icmp eq ptr %0, null
  br i1 %12, label %38, label %13

13:                                               ; preds = %11
  %14 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %15 = load ptr, ptr %14, align 8, !tbaa !33
  %16 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %17 = load i32, ptr %16, align 4, !tbaa !31
  %18 = load i32, ptr %0, align 8, !tbaa !34
  %19 = mul nsw i32 %18, %17
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, ptr %15, i64 %20
  %22 = icmp sgt i32 %19, 0
  br i1 %22, label %23, label %38

23:                                               ; preds = %31, %13
  %24 = phi i32 [ %32, %31 ], [ %18, %13 ]
  %25 = phi ptr [ %34, %31 ], [ %15, %13 ]
  %26 = load i32, ptr %25, align 4, !tbaa !16
  %27 = and i32 %26, 8192
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %31, label %29

29:                                               ; preds = %23
  tail call void (ptr, ptr, i32, ...) @set_adjcnt(ptr noundef nonnull %25, ptr noundef %6, i32 noundef 1) #43
  %30 = load i32, ptr %0, align 8, !tbaa !34
  br label %31

31:                                               ; preds = %29, %23
  %32 = phi i32 [ %24, %23 ], [ %30, %29 ]
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds i32, ptr %25, i64 %33
  %35 = icmp ult ptr %34, %21
  br i1 %35, label %23, label %36

36:                                               ; preds = %31
  %37 = load i32, ptr @cube, align 8, !tbaa !14
  br label %38

38:                                               ; preds = %36, %13, %11
  %39 = phi i32 [ %37, %36 ], [ %3, %13 ], [ %3, %11 ]
  %40 = icmp sgt i32 %39, 0
  br i1 %40, label %41, label %68

41:                                               ; preds = %38
  %42 = zext i32 %39 to i64
  br label %43

43:                                               ; preds = %63, %41
  %44 = phi i64 [ 0, %41 ], [ %66, %63 ]
  %45 = phi i32 [ -1, %41 ], [ %65, %63 ]
  %46 = phi i32 [ -1, %41 ], [ %64, %63 ]
  %47 = trunc i64 %44 to i32
  %48 = lshr i32 %47, 5
  %49 = add nuw nsw i32 %48, 1
  %50 = zext i32 %49 to i64
  %51 = getelementptr inbounds i32, ptr %1, i64 %50
  %52 = load i32, ptr %51, align 4, !tbaa !16
  %53 = and i32 %47, 31
  %54 = shl nuw i32 1, %53
  %55 = and i32 %52, %54
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %63, label %57

57:                                               ; preds = %43
  %58 = getelementptr inbounds i32, ptr %6, i64 %44
  %59 = load i32, ptr %58, align 4, !tbaa !16
  %60 = icmp sgt i32 %59, %45
  %61 = select i1 %60, i32 %47, i32 %46
  %62 = tail call i32 @llvm.smax.i32(i32 %59, i32 %45)
  br label %63

63:                                               ; preds = %57, %43
  %64 = phi i32 [ %46, %43 ], [ %61, %57 ]
  %65 = phi i32 [ %45, %43 ], [ %62, %57 ]
  %66 = add nuw nsw i64 %44, 1
  %67 = icmp eq i64 %66, %42
  br i1 %67, label %68, label %43

68:                                               ; preds = %63, %38
  %69 = phi i32 [ -1, %38 ], [ %64, %63 ]
  %70 = icmp eq ptr %6, null
  br i1 %70, label %72, label %71

71:                                               ; preds = %68
  tail call void @free(ptr noundef nonnull %6) #43
  br label %72

72:                                               ; preds = %71, %68
  %73 = load i32, ptr @debug, align 4, !tbaa !16
  %74 = and i32 %73, 8
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %79, label %76

76:                                               ; preds = %72
  %77 = tail call ptr (ptr, ...) @pc2(ptr noundef %1) #43
  %78 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.5.141, i32 noundef %69, ptr noundef %77) #44
  br label %79

79:                                               ; preds = %76, %72
  ret i32 %69
}

; Function Attrs: nounwind optsize uwtable
define internal void @mincov(ptr nocapture noundef %0, ptr noundef %1, ptr noundef %2) #0 {
  %4 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 11), align 8, !tbaa !7
  %5 = load ptr, ptr %4, align 8, !tbaa !13
  %6 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 4
  %7 = load i32, ptr %6, align 8, !tbaa !114
  %8 = load i32, ptr @cube, align 8, !tbaa !14
  %9 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef %7, i32 noundef %8) #43
  %10 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %11 = load ptr, ptr %10, align 8, !tbaa !33
  %12 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %13 = load i32, ptr %12, align 4, !tbaa !31
  %14 = load i32, ptr %0, align 8, !tbaa !34
  %15 = mul nsw i32 %14, %13
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i32, ptr %11, i64 %16
  %18 = icmp sgt i32 %15, 0
  br i1 %18, label %19, label %45

19:                                               ; preds = %3
  %20 = getelementptr inbounds %struct.set_family, ptr %9, i64 0, i32 5
  %21 = getelementptr inbounds %struct.set_family, ptr %9, i64 0, i32 3
  br label %22

22:                                               ; preds = %40, %19
  %23 = phi i32 [ %14, %19 ], [ %41, %40 ]
  %24 = phi ptr [ %11, %19 ], [ %43, %40 ]
  %25 = load i32, ptr %24, align 4, !tbaa !16
  %26 = and i32 %25, 8192
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %40, label %28

28:                                               ; preds = %22
  %29 = load ptr, ptr %20, align 8, !tbaa !33
  %30 = load i32, ptr %9, align 8, !tbaa !34
  %31 = load i32, ptr %21, align 4, !tbaa !31
  %32 = add nsw i32 %31, 1
  store i32 %32, ptr %21, align 4, !tbaa !31
  %33 = mul nsw i32 %31, %30
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds i32, ptr %29, i64 %34
  %36 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 13), align 8, !tbaa !52
  %37 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %35, ptr noundef %36) #43
  %38 = tail call ptr (ptr, ptr, ptr, ...) @force_lower(ptr noundef %37, ptr noundef nonnull %24, ptr noundef %1) #43
  %39 = load i32, ptr %0, align 8, !tbaa !34
  br label %40

40:                                               ; preds = %28, %22
  %41 = phi i32 [ %23, %22 ], [ %39, %28 ]
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds i32, ptr %24, i64 %42
  %44 = icmp ult ptr %43, %17
  br i1 %44, label %22, label %45

45:                                               ; preds = %40, %3
  %46 = getelementptr inbounds %struct.set_family, ptr %9, i64 0, i32 5
  %47 = load ptr, ptr %46, align 8, !tbaa !33
  %48 = getelementptr inbounds %struct.set_family, ptr %9, i64 0, i32 3
  %49 = load i32, ptr %48, align 4, !tbaa !31
  %50 = load i32, ptr %9, align 8, !tbaa !34
  %51 = mul nsw i32 %50, %49
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i32, ptr %47, i64 %52
  %54 = icmp sgt i32 %51, 0
  br i1 %54, label %55, label %92

55:                                               ; preds = %45
  %56 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  br label %57

57:                                               ; preds = %87, %55
  %58 = phi i32 [ %83, %87 ], [ %56, %55 ]
  %59 = phi ptr [ %90, %87 ], [ %47, %55 ]
  %60 = phi i32 [ %85, %87 ], [ 0, %55 ]
  %61 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %62 = icmp slt i32 %61, %58
  br i1 %62, label %63, label %82

63:                                               ; preds = %57
  %64 = sext i32 %61 to i64
  br label %65

65:                                               ; preds = %76, %63
  %66 = phi i64 [ %64, %63 ], [ %78, %76 ]
  %67 = phi i32 [ 1, %63 ], [ %77, %76 ]
  %68 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %69 = getelementptr inbounds ptr, ptr %68, i64 %66
  %70 = load ptr, ptr %69, align 8, !tbaa !13
  %71 = tail call i32 (ptr, ptr, ...) @set_dist(ptr noundef %59, ptr noundef %70) #43
  %72 = icmp sgt i32 %71, 1
  br i1 %72, label %73, label %76

73:                                               ; preds = %65
  %74 = mul nsw i32 %71, %67
  %75 = icmp sgt i32 %74, 500
  br i1 %75, label %110, label %76

76:                                               ; preds = %73, %65
  %77 = phi i32 [ %74, %73 ], [ %67, %65 ]
  %78 = add nsw i64 %66, 1
  %79 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %80 = sext i32 %79 to i64
  %81 = icmp slt i64 %78, %80
  br i1 %81, label %65, label %82

82:                                               ; preds = %76, %57
  %83 = phi i32 [ %58, %57 ], [ %79, %76 ]
  %84 = phi i32 [ 1, %57 ], [ %77, %76 ]
  %85 = add nsw i32 %84, %60
  %86 = icmp sgt i32 %85, 500
  br i1 %86, label %110, label %87

87:                                               ; preds = %82
  %88 = load i32, ptr %9, align 8, !tbaa !34
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i32, ptr %59, i64 %89
  %91 = icmp ult ptr %90, %53
  br i1 %91, label %57, label %92

92:                                               ; preds = %87, %45
  %93 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %94 = tail call ptr (ptr, i32, ...) @unravel(ptr noundef nonnull %9, i32 noundef %93) #43
  %95 = tail call ptr (ptr, ...) @do_sm_minimum_cover(ptr noundef %94) #43
  %96 = tail call ptr (ptr, ptr, ptr, ...) @set_diff(ptr noundef %5, ptr noundef %2, ptr noundef %95) #43
  %97 = tail call ptr (ptr, ptr, ptr, ...) @set_or(ptr noundef %1, ptr noundef %1, ptr noundef %96) #43
  %98 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 13), align 8, !tbaa !52
  %99 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %2, ptr noundef %98) #43
  store i32 0, ptr %6, align 8, !tbaa !114
  %100 = load i32, ptr @debug, align 4, !tbaa !16
  %101 = and i32 %100, 8
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %107, label %103

103:                                              ; preds = %92
  %104 = tail call ptr (ptr, ...) @pc1(ptr noundef %1) #43
  %105 = tail call ptr (ptr, ...) @pc2(ptr noundef %2) #43
  %106 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.8.140, ptr noundef %104, ptr noundef %105) #44
  br label %107

107:                                              ; preds = %103, %92
  tail call void (ptr, ...) @sf_free(ptr noundef %94) #43
  %108 = icmp eq ptr %95, null
  br i1 %108, label %122, label %109

109:                                              ; preds = %107
  tail call void @free(ptr noundef nonnull %95) #43
  br label %122

110:                                              ; preds = %82, %73
  tail call void (ptr, ...) @sf_free(ptr noundef nonnull %9) #43
  %111 = tail call i32 @most_frequent(ptr noundef null, ptr noundef %2) #44
  %112 = and i32 %111, 31
  %113 = shl nuw i32 1, %112
  %114 = tail call i32 @most_frequent(ptr noundef null, ptr noundef %2) #44
  %115 = ashr i32 %114, 5
  %116 = add nsw i32 %115, 1
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds i32, ptr %1, i64 %117
  %119 = load i32, ptr %118, align 4, !tbaa !16
  %120 = or i32 %119, %113
  store i32 %120, ptr %118, align 4, !tbaa !16
  %121 = tail call ptr (ptr, ptr, ptr, ...) @set_diff(ptr noundef %2, ptr noundef %2, ptr noundef %1) #43
  tail call void @essen_parts(ptr noundef nonnull %0, ptr noundef null, ptr noundef %1, ptr noundef %2) #44
  br label %122

122:                                              ; preds = %110, %109, %107
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @essen_raising(ptr nocapture noundef readonly %0, ptr noundef %1, ptr noundef %2) #0 {
  %4 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 11), align 8, !tbaa !7
  %5 = load ptr, ptr %4, align 8, !tbaa !13
  %6 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 13), align 8, !tbaa !52
  %7 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %5, ptr noundef %6) #43
  %8 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %9 = load ptr, ptr %8, align 8, !tbaa !33
  %10 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %11 = load i32, ptr %10, align 4, !tbaa !31
  %12 = load i32, ptr %0, align 8, !tbaa !34
  %13 = mul nsw i32 %12, %11
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds i32, ptr %9, i64 %14
  %16 = icmp sgt i32 %13, 0
  br i1 %16, label %17, label %43

17:                                               ; preds = %38, %3
  %18 = phi i32 [ %39, %38 ], [ %12, %3 ]
  %19 = phi ptr [ %41, %38 ], [ %9, %3 ]
  %20 = load i32, ptr %19, align 4, !tbaa !16
  %21 = and i32 %20, 8192
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %38, label %23

23:                                               ; preds = %17
  %24 = load i32, ptr %5, align 4, !tbaa !16
  %25 = and i32 %24, 1023
  %26 = zext i32 %25 to i64
  br label %27

27:                                               ; preds = %27, %23
  %28 = phi i64 [ %34, %27 ], [ %26, %23 ]
  %29 = getelementptr inbounds i32, ptr %5, i64 %28
  %30 = load i32, ptr %29, align 4, !tbaa !16
  %31 = getelementptr inbounds i32, ptr %19, i64 %28
  %32 = load i32, ptr %31, align 4, !tbaa !16
  %33 = or i32 %32, %30
  store i32 %33, ptr %29, align 4, !tbaa !16
  %34 = add nsw i64 %28, -1
  %35 = icmp ugt i64 %28, 1
  br i1 %35, label %27, label %36

36:                                               ; preds = %27
  %37 = load i32, ptr %0, align 8, !tbaa !34
  br label %38

38:                                               ; preds = %36, %17
  %39 = phi i32 [ %37, %36 ], [ %18, %17 ]
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i32, ptr %19, i64 %40
  %42 = icmp ult ptr %41, %15
  br i1 %42, label %17, label %43

43:                                               ; preds = %38, %3
  %44 = tail call ptr (ptr, ptr, ptr, ...) @set_diff(ptr noundef %5, ptr noundef %2, ptr noundef %5) #43
  %45 = tail call ptr (ptr, ptr, ptr, ...) @set_or(ptr noundef %1, ptr noundef %1, ptr noundef %5) #43
  %46 = tail call ptr (ptr, ptr, ptr, ...) @set_diff(ptr noundef %2, ptr noundef %2, ptr noundef %5) #43
  %47 = load i32, ptr @debug, align 4, !tbaa !16
  %48 = and i32 %47, 8
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %54, label %50

50:                                               ; preds = %43
  %51 = tail call ptr (ptr, ...) @pc1(ptr noundef %1) #43
  %52 = tail call ptr (ptr, ...) @pc2(ptr noundef %2) #43
  %53 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.144, ptr noundef %51, ptr noundef %52) #44
  br label %54

54:                                               ; preds = %50, %43
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @feasibly_covered(ptr nocapture noundef readonly %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #0 {
  %5 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 11), align 8, !tbaa !7
  %6 = load ptr, ptr %5, align 8, !tbaa !13
  %7 = tail call ptr (ptr, ptr, ptr, ...) @set_or(ptr noundef %6, ptr noundef %2, ptr noundef %1) #43
  %8 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 13), align 8, !tbaa !52
  %9 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %3, ptr noundef %8) #43
  %10 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %11 = load ptr, ptr %10, align 8, !tbaa !33
  %12 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %13 = load i32, ptr %12, align 4, !tbaa !31
  %14 = load i32, ptr %0, align 8, !tbaa !34
  %15 = mul nsw i32 %14, %13
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i32, ptr %11, i64 %16
  %18 = icmp sgt i32 %15, 0
  br i1 %18, label %19, label %169

19:                                               ; preds = %164, %4
  %20 = phi i32 [ %165, %164 ], [ %14, %4 ]
  %21 = phi ptr [ %167, %164 ], [ %11, %4 ]
  %22 = load i32, ptr %21, align 4, !tbaa !16
  %23 = and i32 %22, 8192
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %164, label %25

25:                                               ; preds = %19
  %26 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 15), align 4, !tbaa !50
  %27 = icmp eq i32 %26, -1
  br i1 %27, label %112, label %28

28:                                               ; preds = %25
  %29 = sext i32 %26 to i64
  %30 = getelementptr inbounds i32, ptr %21, i64 %29
  %31 = load i32, ptr %30, align 4, !tbaa !16
  %32 = getelementptr inbounds i32, ptr %7, i64 %29
  %33 = load i32, ptr %32, align 4, !tbaa !16
  %34 = and i32 %33, %31
  %35 = lshr i32 %34, 1
  %36 = or i32 %35, %34
  %37 = xor i32 %36, -1
  %38 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 14), align 8, !tbaa !51
  %39 = and i32 %38, %37
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %64, label %41

41:                                               ; preds = %28
  %42 = and i32 %39, 255
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %43
  %45 = load i32, ptr %44, align 4, !tbaa !16
  %46 = lshr i32 %39, 8
  %47 = and i32 %46, 255
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %48
  %50 = load i32, ptr %49, align 4, !tbaa !16
  %51 = add nsw i32 %50, %45
  %52 = lshr i32 %39, 16
  %53 = and i32 %52, 255
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %54
  %56 = load i32, ptr %55, align 4, !tbaa !16
  %57 = add nsw i32 %51, %56
  %58 = lshr i32 %39, 24
  %59 = zext i32 %58 to i64
  %60 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %59
  %61 = load i32, ptr %60, align 4, !tbaa !16
  %62 = add nsw i32 %57, %61
  %63 = icmp sgt i32 %62, 1
  br i1 %63, label %164, label %64

64:                                               ; preds = %41, %28
  %65 = phi i32 [ %62, %41 ], [ 0, %28 ]
  %66 = icmp sgt i32 %26, 1
  br i1 %66, label %67, label %112

67:                                               ; preds = %64
  %68 = zext i32 %26 to i64
  br label %69

69:                                               ; preds = %108, %67
  %70 = phi i64 [ 1, %67 ], [ %110, %108 ]
  %71 = phi i32 [ %65, %67 ], [ %109, %108 ]
  %72 = getelementptr inbounds i32, ptr %21, i64 %70
  %73 = load i32, ptr %72, align 4, !tbaa !16
  %74 = getelementptr inbounds i32, ptr %7, i64 %70
  %75 = load i32, ptr %74, align 4, !tbaa !16
  %76 = and i32 %75, %73
  %77 = lshr i32 %76, 1
  %78 = or i32 %77, %76
  %79 = and i32 %78, 1431655765
  %80 = xor i32 %79, 1431655765
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %108, label %82

82:                                               ; preds = %69
  %83 = icmp eq i32 %71, 1
  br i1 %83, label %164, label %84

84:                                               ; preds = %82
  %85 = and i32 %80, 85
  %86 = zext i32 %85 to i64
  %87 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %86
  %88 = load i32, ptr %87, align 4, !tbaa !16
  %89 = lshr i32 %80, 8
  %90 = and i32 %89, 85
  %91 = zext i32 %90 to i64
  %92 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %91
  %93 = load i32, ptr %92, align 4, !tbaa !16
  %94 = lshr i32 %80, 16
  %95 = and i32 %94, 85
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %96
  %98 = load i32, ptr %97, align 4, !tbaa !16
  %99 = lshr i32 %80, 24
  %100 = zext i32 %99 to i64
  %101 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %100
  %102 = load i32, ptr %101, align 4, !tbaa !16
  %103 = add i32 %88, %71
  %104 = add i32 %103, %93
  %105 = add i32 %104, %98
  %106 = add i32 %105, %102
  %107 = icmp sgt i32 %106, 1
  br i1 %107, label %164, label %108

108:                                              ; preds = %84, %69
  %109 = phi i32 [ %106, %84 ], [ %71, %69 ]
  %110 = add nuw nsw i64 %70, 1
  %111 = icmp eq i64 %110, %68
  br i1 %111, label %112, label %69

112:                                              ; preds = %108, %64, %25
  %113 = phi i32 [ 0, %25 ], [ %65, %64 ], [ %109, %108 ]
  %114 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %115 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %116 = icmp slt i32 %114, %115
  br i1 %116, label %117, label %158

117:                                              ; preds = %112
  %118 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %119 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 7), align 8, !tbaa !18
  %120 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 6), align 8, !tbaa !19
  %121 = sext i32 %114 to i64
  br label %122

122:                                              ; preds = %153, %117
  %123 = phi i64 [ %121, %117 ], [ %155, %153 ]
  %124 = phi i32 [ %113, %117 ], [ %154, %153 ]
  %125 = getelementptr inbounds ptr, ptr %118, i64 %123
  %126 = load ptr, ptr %125, align 8, !tbaa !13
  %127 = getelementptr inbounds i32, ptr %119, i64 %123
  %128 = load i32, ptr %127, align 4, !tbaa !16
  %129 = getelementptr inbounds i32, ptr %120, i64 %123
  %130 = load i32, ptr %129, align 4, !tbaa !16
  %131 = icmp sgt i32 %130, %128
  br i1 %131, label %150, label %132

132:                                              ; preds = %122
  %133 = sext i32 %130 to i64
  %134 = add i32 %128, 1
  br label %139

135:                                              ; preds = %139
  %136 = add nsw i64 %140, 1
  %137 = trunc i64 %136 to i32
  %138 = icmp eq i32 %134, %137
  br i1 %138, label %150, label %139

139:                                              ; preds = %135, %132
  %140 = phi i64 [ %133, %132 ], [ %136, %135 ]
  %141 = getelementptr inbounds i32, ptr %21, i64 %140
  %142 = load i32, ptr %141, align 4, !tbaa !16
  %143 = getelementptr inbounds i32, ptr %7, i64 %140
  %144 = load i32, ptr %143, align 4, !tbaa !16
  %145 = and i32 %144, %142
  %146 = getelementptr inbounds i32, ptr %126, i64 %140
  %147 = load i32, ptr %146, align 4, !tbaa !16
  %148 = and i32 %145, %147
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %135, label %153

150:                                              ; preds = %135, %122
  %151 = add nsw i32 %124, 1
  %152 = icmp sgt i32 %124, 0
  br i1 %152, label %164, label %153

153:                                              ; preds = %150, %139
  %154 = phi i32 [ %151, %150 ], [ %124, %139 ]
  %155 = add nsw i64 %123, 1
  %156 = trunc i64 %155 to i32
  %157 = icmp eq i32 %115, %156
  br i1 %157, label %158, label %122

158:                                              ; preds = %153, %112
  %159 = phi i32 [ %113, %112 ], [ %154, %153 ]
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %169, label %161

161:                                              ; preds = %158
  %162 = tail call ptr (ptr, ptr, ptr, ...) @force_lower(ptr noundef %3, ptr noundef nonnull %21, ptr noundef %7) #43
  %163 = load i32, ptr %0, align 8, !tbaa !34
  br label %164

164:                                              ; preds = %161, %150, %84, %82, %41, %19
  %165 = phi i32 [ %20, %41 ], [ %20, %19 ], [ %163, %161 ], [ %20, %150 ], [ %20, %84 ], [ %20, %82 ]
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds i32, ptr %21, i64 %166
  %168 = icmp ult ptr %167, %17
  br i1 %168, label %19, label %169

169:                                              ; preds = %164, %158, %4
  %170 = phi i32 [ 1, %4 ], [ 1, %164 ], [ 0, %158 ]
  ret i32 %170
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @find_all_primes(ptr nocapture noundef readonly %0, ptr noundef %1, ptr nocapture noundef readonly %2) #0 {
  %4 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 4
  %5 = load i32, ptr %4, align 8, !tbaa !114
  %6 = icmp eq i32 %5, 0
  %7 = load i32, ptr @cube, align 8, !tbaa !14
  br i1 %6, label %8, label %22

8:                                                ; preds = %3
  %9 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 1, i32 noundef %7) #43
  %10 = getelementptr inbounds %struct.set_family, ptr %9, i64 0, i32 5
  %11 = load ptr, ptr %10, align 8, !tbaa !33
  %12 = load i32, ptr %9, align 8, !tbaa !34
  %13 = getelementptr inbounds %struct.set_family, ptr %9, i64 0, i32 3
  %14 = load i32, ptr %13, align 4, !tbaa !31
  %15 = add nsw i32 %14, 1
  store i32 %15, ptr %13, align 4, !tbaa !31
  %16 = mul nsw i32 %14, %12
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds i32, ptr %11, i64 %17
  %19 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %18, ptr noundef %1) #43
  %20 = load i32, ptr %18, align 4, !tbaa !16
  %21 = or i32 %20, 32768
  store i32 %21, ptr %18, align 4, !tbaa !16
  br label %113

22:                                               ; preds = %3
  %23 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef %5, i32 noundef %7) #43
  %24 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %25 = load ptr, ptr %24, align 8, !tbaa !33
  %26 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %27 = load i32, ptr %26, align 4, !tbaa !31
  %28 = load i32, ptr %0, align 8, !tbaa !34
  %29 = mul nsw i32 %28, %27
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds i32, ptr %25, i64 %30
  %32 = icmp sgt i32 %29, 0
  br i1 %32, label %33, label %59

33:                                               ; preds = %22
  %34 = getelementptr inbounds %struct.set_family, ptr %23, i64 0, i32 5
  %35 = getelementptr inbounds %struct.set_family, ptr %23, i64 0, i32 3
  br label %36

36:                                               ; preds = %54, %33
  %37 = phi i32 [ %28, %33 ], [ %55, %54 ]
  %38 = phi ptr [ %25, %33 ], [ %57, %54 ]
  %39 = load i32, ptr %38, align 4, !tbaa !16
  %40 = and i32 %39, 8192
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %54, label %42

42:                                               ; preds = %36
  %43 = load ptr, ptr %34, align 8, !tbaa !33
  %44 = load i32, ptr %23, align 8, !tbaa !34
  %45 = load i32, ptr %35, align 4, !tbaa !31
  %46 = add nsw i32 %45, 1
  store i32 %46, ptr %35, align 4, !tbaa !31
  %47 = mul nsw i32 %45, %44
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds i32, ptr %43, i64 %48
  %50 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 13), align 8, !tbaa !52
  %51 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %49, ptr noundef %50) #43
  %52 = tail call ptr (ptr, ptr, ptr, ...) @force_lower(ptr noundef %51, ptr noundef nonnull %38, ptr noundef %1) #43
  %53 = load i32, ptr %0, align 8, !tbaa !34
  br label %54

54:                                               ; preds = %42, %36
  %55 = phi i32 [ %37, %36 ], [ %53, %42 ]
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i32, ptr %38, i64 %56
  %58 = icmp ult ptr %57, %31
  br i1 %58, label %36, label %59

59:                                               ; preds = %54, %22
  %60 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %61 = tail call ptr (ptr, i32, ...) @unravel(ptr noundef %23, i32 noundef %60) #43
  %62 = tail call ptr (ptr, ...) @sf_rev_contain(ptr noundef %61) #43
  %63 = tail call ptr (ptr, ...) @exact_minimum_cover(ptr noundef %62) #43
  %64 = getelementptr inbounds %struct.set_family, ptr %63, i64 0, i32 5
  %65 = load ptr, ptr %64, align 8, !tbaa !33
  %66 = getelementptr inbounds %struct.set_family, ptr %63, i64 0, i32 3
  %67 = load i32, ptr %66, align 4, !tbaa !31
  %68 = load i32, ptr %63, align 8, !tbaa !34
  %69 = mul nsw i32 %68, %67
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds i32, ptr %65, i64 %70
  %72 = icmp sgt i32 %69, 0
  br i1 %72, label %73, label %112

73:                                               ; preds = %105, %59
  %74 = phi ptr [ %110, %105 ], [ %65, %59 ]
  %75 = load i32, ptr %2, align 4, !tbaa !16
  %76 = and i32 %75, 1023
  %77 = load i32, ptr %74, align 4, !tbaa !16
  %78 = and i32 %77, -1024
  %79 = or i32 %78, %76
  store i32 %79, ptr %74, align 4, !tbaa !16
  %80 = and i32 %75, 1023
  %81 = zext i32 %80 to i64
  br label %82

82:                                               ; preds = %82, %73
  %83 = phi i64 [ %90, %82 ], [ %81, %73 ]
  %84 = getelementptr inbounds i32, ptr %2, i64 %83
  %85 = load i32, ptr %84, align 4, !tbaa !16
  %86 = getelementptr inbounds i32, ptr %74, i64 %83
  %87 = load i32, ptr %86, align 4, !tbaa !16
  %88 = xor i32 %87, -1
  %89 = and i32 %85, %88
  store i32 %89, ptr %86, align 4, !tbaa !16
  %90 = add nsw i64 %83, -1
  %91 = icmp ugt i64 %83, 1
  br i1 %91, label %82, label %92

92:                                               ; preds = %82
  %93 = load i32, ptr %74, align 4, !tbaa !16
  %94 = and i32 %93, 1023
  %95 = zext i32 %94 to i64
  br label %96

96:                                               ; preds = %96, %92
  %97 = phi i64 [ %103, %96 ], [ %95, %92 ]
  %98 = getelementptr inbounds i32, ptr %74, i64 %97
  %99 = load i32, ptr %98, align 4, !tbaa !16
  %100 = getelementptr inbounds i32, ptr %1, i64 %97
  %101 = load i32, ptr %100, align 4, !tbaa !16
  %102 = or i32 %101, %99
  store i32 %102, ptr %98, align 4, !tbaa !16
  %103 = add nsw i64 %97, -1
  %104 = icmp ugt i64 %97, 1
  br i1 %104, label %96, label %105

105:                                              ; preds = %96
  %106 = load i32, ptr %74, align 4, !tbaa !16
  %107 = or i32 %106, 32768
  store i32 %107, ptr %74, align 4, !tbaa !16
  %108 = load i32, ptr %63, align 8, !tbaa !34
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds i32, ptr %74, i64 %109
  %111 = icmp ult ptr %110, %71
  br i1 %111, label %73, label %112

112:                                              ; preds = %105, %59
  tail call void (ptr, ...) @sf_free(ptr noundef %62) #43
  br label %113

113:                                              ; preds = %112, %8
  %114 = phi ptr [ %9, %8 ], [ %63, %112 ]
  ret ptr %114
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @all_primes(ptr nocapture noundef readonly %0, ptr nocapture noundef %1) #0 {
  %3 = load i32, ptr @cube, align 8, !tbaa !14
  %4 = icmp slt i32 %3, 33
  %5 = add nsw i32 %3, -1
  %6 = lshr i32 %5, 3
  %7 = and i32 %6, 536870908
  %8 = add nuw nsw i32 %7, 8
  %9 = select i1 %4, i32 8, i32 %8
  %10 = zext i32 %9 to i64
  %11 = tail call noalias ptr @malloc(i64 noundef %10) #42
  %12 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %11, i32 noundef %3) #43
  %13 = load i32, ptr @cube, align 8, !tbaa !14
  %14 = icmp slt i32 %13, 33
  %15 = add nsw i32 %13, -1
  %16 = lshr i32 %15, 3
  %17 = and i32 %16, 536870908
  %18 = add nuw nsw i32 %17, 8
  %19 = select i1 %14, i32 8, i32 %18
  %20 = zext i32 %19 to i64
  %21 = tail call noalias ptr @malloc(i64 noundef %20) #42
  %22 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %21, i32 noundef %13) #43
  %23 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %24 = load i32, ptr %23, align 4, !tbaa !31
  %25 = load i32, ptr @cube, align 8, !tbaa !14
  %26 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef %24, i32 noundef %25) #43
  %27 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %28 = load ptr, ptr %27, align 8, !tbaa !33
  %29 = load i32, ptr %23, align 4, !tbaa !31
  %30 = load i32, ptr %0, align 8, !tbaa !34
  %31 = mul nsw i32 %30, %29
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, ptr %28, i64 %32
  %34 = icmp sgt i32 %31, 0
  br i1 %34, label %35, label %75

35:                                               ; preds = %2
  %36 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 3
  %37 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 4
  %38 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 5
  br label %39

39:                                               ; preds = %69, %35
  %40 = phi ptr [ %28, %35 ], [ %73, %69 ]
  %41 = phi ptr [ %26, %35 ], [ %70, %69 ]
  %42 = load i32, ptr %40, align 4, !tbaa !16
  %43 = and i32 %42, 32768
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = tail call ptr (ptr, ptr, ...) @sf_addset(ptr noundef %41, ptr noundef nonnull %40) #43
  br label %69

47:                                               ; preds = %39
  %48 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %22, ptr noundef nonnull %40) #43
  %49 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %50 = tail call ptr (ptr, ptr, ptr, ...) @set_diff(ptr noundef %12, ptr noundef %49, ptr noundef %22) #43
  %51 = load i32, ptr %36, align 4, !tbaa !31
  store i32 %51, ptr %37, align 8, !tbaa !114
  %52 = load ptr, ptr %38, align 8, !tbaa !33
  %53 = load i32, ptr %1, align 8, !tbaa !34
  %54 = mul nsw i32 %53, %51
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds i32, ptr %52, i64 %55
  %57 = icmp sgt i32 %54, 0
  br i1 %57, label %58, label %66

58:                                               ; preds = %58, %47
  %59 = phi ptr [ %64, %58 ], [ %52, %47 ]
  %60 = load i32, ptr %59, align 4, !tbaa !16
  %61 = or i32 %60, 8192
  store i32 %61, ptr %59, align 4, !tbaa !16
  %62 = load i32, ptr %1, align 8, !tbaa !34
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds i32, ptr %59, i64 %63
  %65 = icmp ult ptr %64, %56
  br i1 %65, label %58, label %66

66:                                               ; preds = %58, %47
  tail call void @essen_parts(ptr noundef nonnull %1, ptr noundef null, ptr noundef %22, ptr noundef %12) #44
  %67 = tail call ptr @find_all_primes(ptr noundef nonnull %1, ptr noundef %22, ptr noundef %12) #44
  %68 = tail call ptr (ptr, ptr, ...) @sf_append(ptr noundef %41, ptr noundef %67) #43
  br label %69

69:                                               ; preds = %66, %45
  %70 = phi ptr [ %46, %45 ], [ %68, %66 ]
  %71 = load i32, ptr %0, align 8, !tbaa !34
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds i32, ptr %40, i64 %72
  %74 = icmp ult ptr %73, %33
  br i1 %74, label %39, label %75

75:                                               ; preds = %69, %2
  %76 = phi ptr [ %26, %2 ], [ %70, %69 ]
  %77 = icmp eq ptr %22, null
  br i1 %77, label %79, label %78

78:                                               ; preds = %75
  tail call void @free(ptr noundef nonnull %22) #43
  br label %79

79:                                               ; preds = %78, %75
  %80 = icmp eq ptr %12, null
  br i1 %80, label %82, label %81

81:                                               ; preds = %79
  tail call void @free(ptr noundef nonnull %12) #43
  br label %82

82:                                               ; preds = %81, %79
  ret ptr %76
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @expand_gasp(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #0 {
  %5 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #45
  %6 = load i32, ptr @cube, align 8, !tbaa !14
  %7 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 10, i32 noundef %6) #43
  store ptr %7, ptr %5, align 8, !tbaa !13
  %8 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %9 = load i32, ptr %8, align 4, !tbaa !31
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %11, label %18

11:                                               ; preds = %11, %4
  %12 = phi i32 [ %13, %11 ], [ 0, %4 ]
  call void @expand1_gasp(ptr noundef nonnull %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, i32 noundef %12, ptr noundef nonnull %5) #44
  %13 = add nuw nsw i32 %12, 1
  %14 = load i32, ptr %8, align 4, !tbaa !31
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %11, label %16

16:                                               ; preds = %11
  %17 = load ptr, ptr %5, align 8, !tbaa !13
  br label %18

18:                                               ; preds = %16, %4
  %19 = phi ptr [ %17, %16 ], [ %7, %4 ]
  %20 = tail call ptr (ptr, ...) @sf_dupl(ptr noundef %19) #43
  %21 = tail call ptr (ptr, ptr, i32, ...) @expand(ptr noundef %20, ptr noundef %2, i32 noundef 0) #43
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #45
  ret ptr %21
}

; Function Attrs: nounwind optsize uwtable
define internal void @expand1_gasp(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, i32 noundef %4, ptr nocapture noundef %5) #0 {
  %7 = load i32, ptr @debug, align 4, !tbaa !16
  %8 = and i32 %7, 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %19, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %12 = load ptr, ptr %11, align 8, !tbaa !33
  %13 = load i32, ptr %0, align 8, !tbaa !34
  %14 = mul nsw i32 %13, %4
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds i32, ptr %12, i64 %15
  %17 = tail call ptr (ptr, ...) @pc1(ptr noundef %16) #43
  %18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.147, ptr noundef %17) #44
  br label %19

19:                                               ; preds = %10, %6
  %20 = load i32, ptr @cube, align 8, !tbaa !14
  %21 = icmp slt i32 %20, 33
  %22 = add nsw i32 %20, -1
  %23 = lshr i32 %22, 3
  %24 = and i32 %23, 536870908
  %25 = add nuw nsw i32 %24, 8
  %26 = select i1 %21, i32 8, i32 %25
  %27 = zext i32 %26 to i64
  %28 = tail call noalias ptr @malloc(i64 noundef %27) #42
  %29 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %28, i32 noundef %20) #43
  %30 = load i32, ptr @cube, align 8, !tbaa !14
  %31 = icmp slt i32 %30, 33
  %32 = add nsw i32 %30, -1
  %33 = lshr i32 %32, 3
  %34 = and i32 %33, 536870908
  %35 = add nuw nsw i32 %34, 8
  %36 = select i1 %31, i32 8, i32 %35
  %37 = zext i32 %36 to i64
  %38 = tail call noalias ptr @malloc(i64 noundef %37) #42
  %39 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %38, i32 noundef %30) #43
  %40 = load i32, ptr @cube, align 8, !tbaa !14
  %41 = icmp slt i32 %40, 33
  %42 = add nsw i32 %40, -1
  %43 = lshr i32 %42, 3
  %44 = and i32 %43, 536870908
  %45 = add nuw nsw i32 %44, 8
  %46 = select i1 %41, i32 8, i32 %45
  %47 = zext i32 %46 to i64
  %48 = tail call noalias ptr @malloc(i64 noundef %47) #42
  %49 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %48, i32 noundef %40) #43
  %50 = getelementptr inbounds %struct.set_family, ptr %2, i64 0, i32 3
  %51 = load i32, ptr %50, align 4, !tbaa !31
  %52 = getelementptr inbounds %struct.set_family, ptr %2, i64 0, i32 4
  store i32 %51, ptr %52, align 8, !tbaa !114
  %53 = getelementptr inbounds %struct.set_family, ptr %2, i64 0, i32 5
  %54 = load ptr, ptr %53, align 8, !tbaa !33
  %55 = load i32, ptr %2, align 8, !tbaa !34
  %56 = mul nsw i32 %55, %51
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, ptr %54, i64 %57
  %59 = icmp sgt i32 %56, 0
  br i1 %59, label %60, label %68

60:                                               ; preds = %60, %19
  %61 = phi ptr [ %66, %60 ], [ %54, %19 ]
  %62 = load i32, ptr %61, align 4, !tbaa !16
  %63 = or i32 %62, 8192
  store i32 %63, ptr %61, align 4, !tbaa !16
  %64 = load i32, ptr %2, align 8, !tbaa !34
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds i32, ptr %61, i64 %65
  %67 = icmp ult ptr %66, %58
  br i1 %67, label %60, label %68

68:                                               ; preds = %60, %19
  %69 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %70 = load i32, ptr %69, align 4, !tbaa !31
  %71 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 4
  store i32 %70, ptr %71, align 8, !tbaa !114
  %72 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %73 = load ptr, ptr %72, align 8, !tbaa !33
  %74 = icmp sgt i32 %70, 0
  br i1 %74, label %77, label %75

75:                                               ; preds = %68
  %76 = load i32, ptr %0, align 8, !tbaa !34
  br label %100

77:                                               ; preds = %92, %68
  %78 = phi i32 [ %97, %92 ], [ 0, %68 ]
  %79 = phi ptr [ %96, %92 ], [ %73, %68 ]
  %80 = icmp eq i32 %78, %4
  br i1 %80, label %85, label %81

81:                                               ; preds = %77
  %82 = load i32, ptr %79, align 4, !tbaa !16
  %83 = and i32 %82, 32768
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %90, label %85

85:                                               ; preds = %81, %77
  %86 = load i32, ptr %71, align 8, !tbaa !114
  %87 = add nsw i32 %86, -1
  store i32 %87, ptr %71, align 8, !tbaa !114
  %88 = load i32, ptr %79, align 4, !tbaa !16
  %89 = and i32 %88, -8193
  br label %92

90:                                               ; preds = %81
  %91 = or i32 %82, 8192
  br label %92

92:                                               ; preds = %90, %85
  %93 = phi i32 [ %91, %90 ], [ %89, %85 ]
  store i32 %93, ptr %79, align 4, !tbaa !16
  %94 = load i32, ptr %0, align 8, !tbaa !34
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds i32, ptr %79, i64 %95
  %97 = add nuw nsw i32 %78, 1
  %98 = load i32, ptr %69, align 4, !tbaa !31
  %99 = icmp slt i32 %97, %98
  br i1 %99, label %77, label %100

100:                                              ; preds = %92, %75
  %101 = phi i32 [ %76, %75 ], [ %94, %92 ]
  %102 = mul nsw i32 %101, %4
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds i32, ptr %73, i64 %103
  %105 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %29, ptr noundef %104) #43
  %106 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %107 = tail call ptr (ptr, ptr, ptr, ...) @set_diff(ptr noundef %39, ptr noundef %106, ptr noundef %29) #43
  tail call void (ptr, ptr, ptr, ptr, ...) @essen_parts(ptr noundef nonnull %2, ptr noundef nonnull %0, ptr noundef %29, ptr noundef %39) #43
  tail call void (ptr, ptr, ptr, ...) @essen_raising(ptr noundef nonnull %2, ptr noundef %29, ptr noundef %39) #43
  %108 = load i32, ptr %69, align 4, !tbaa !31
  %109 = icmp sgt i32 %108, 0
  br i1 %109, label %110, label %167

110:                                              ; preds = %100
  %111 = load ptr, ptr %72, align 8, !tbaa !33
  br label %112

112:                                              ; preds = %160, %110
  %113 = phi i32 [ %164, %160 ], [ 0, %110 ]
  %114 = phi ptr [ %163, %160 ], [ %111, %110 ]
  %115 = load i32, ptr %114, align 4, !tbaa !16
  %116 = and i32 %115, 8192
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %160, label %118

118:                                              ; preds = %112
  %119 = tail call i32 (ptr, ptr, ...) @setp_implies(ptr noundef nonnull %114, ptr noundef %29) #43
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %121, label %124

121:                                              ; preds = %118
  %122 = tail call i32 (ptr, ptr, ptr, ptr, ...) @feasibly_covered(ptr noundef nonnull %2, ptr noundef nonnull %114, ptr noundef %29, ptr noundef %49) #43
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %160, label %124

124:                                              ; preds = %121, %118
  %125 = tail call ptr (ptr, ...) @sf_save(ptr noundef %3) #43
  %126 = getelementptr inbounds %struct.set_family, ptr %125, i64 0, i32 5
  %127 = load ptr, ptr %126, align 8, !tbaa !33
  %128 = load i32, ptr %125, align 8, !tbaa !34
  %129 = mul nsw i32 %128, %4
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds i32, ptr %127, i64 %130
  %132 = load ptr, ptr %72, align 8, !tbaa !33
  %133 = load i32, ptr %0, align 8, !tbaa !34
  %134 = mul nsw i32 %133, %4
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds i32, ptr %132, i64 %135
  %137 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %131, ptr noundef %136) #43
  %138 = tail call ptr (ptr, ptr, ...) @cube2list(ptr noundef nonnull %125, ptr noundef %1) #43
  %139 = load ptr, ptr %126, align 8, !tbaa !33
  %140 = load i32, ptr %125, align 8, !tbaa !34
  %141 = mul nsw i32 %140, %113
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds i32, ptr %139, i64 %142
  %144 = tail call ptr (ptr, ptr, ...) @reduce_cube(ptr noundef %138, ptr noundef %143) #43
  %145 = load ptr, ptr %138, align 8, !tbaa !13
  %146 = icmp eq ptr %145, null
  br i1 %146, label %148, label %147

147:                                              ; preds = %124
  tail call void @free(ptr noundef nonnull %145) #43
  br label %148

148:                                              ; preds = %147, %124
  tail call void @free(ptr noundef nonnull %138) #43
  tail call void (ptr, ...) @sf_free(ptr noundef nonnull %125) #43
  %149 = tail call i32 (ptr, ptr, ptr, ptr, ...) @feasibly_covered(ptr noundef nonnull %2, ptr noundef %144, ptr noundef %29, ptr noundef %49) #43
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %157, label %151

151:                                              ; preds = %148
  %152 = tail call ptr (ptr, ptr, ptr, ...) @set_or(ptr noundef %49, ptr noundef %29, ptr noundef %144) #43
  %153 = load i32, ptr %49, align 4, !tbaa !16
  %154 = and i32 %153, -32769
  store i32 %154, ptr %49, align 4, !tbaa !16
  %155 = load ptr, ptr %5, align 8, !tbaa !13
  %156 = tail call ptr (ptr, ptr, ...) @sf_addset(ptr noundef %155, ptr noundef nonnull %49) #43
  store ptr %156, ptr %5, align 8, !tbaa !13
  br label %157

157:                                              ; preds = %151, %148
  %158 = icmp eq ptr %144, null
  br i1 %158, label %160, label %159

159:                                              ; preds = %157
  tail call void @free(ptr noundef nonnull %144) #43
  br label %160

160:                                              ; preds = %159, %157, %121, %112
  %161 = load i32, ptr %0, align 8, !tbaa !34
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds i32, ptr %114, i64 %162
  %164 = add nuw nsw i32 %113, 1
  %165 = load i32, ptr %69, align 4, !tbaa !31
  %166 = icmp slt i32 %164, %165
  br i1 %166, label %112, label %167

167:                                              ; preds = %160, %100
  %168 = icmp eq ptr %29, null
  br i1 %168, label %170, label %169

169:                                              ; preds = %167
  tail call void @free(ptr noundef nonnull %29) #43
  br label %170

170:                                              ; preds = %169, %167
  %171 = icmp eq ptr %39, null
  br i1 %171, label %173, label %172

172:                                              ; preds = %170
  tail call void @free(ptr noundef nonnull %39) #43
  br label %173

173:                                              ; preds = %172, %170
  %174 = icmp eq ptr %49, null
  br i1 %174, label %176, label %175

175:                                              ; preds = %173
  tail call void @free(ptr noundef nonnull %49) #43
  br label %176

176:                                              ; preds = %175, %173
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @last_gasp(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #0 {
  %5 = tail call i64 (...) @util_cpu_time() #43
  %6 = tail call fastcc ptr @reduce_gasp(ptr noundef %0, ptr noundef %1) #44
  tail call void (i64, i32, ptr, ptr, ...) @totals(i64 noundef %5, i32 noundef 9, ptr noundef %6, ptr noundef %3) #43
  %7 = tail call i64 (...) @util_cpu_time() #43
  %8 = tail call ptr @expand_gasp(ptr noundef %6, ptr noundef %1, ptr noundef %2, ptr noundef %0) #44
  tail call void (i64, i32, ptr, ptr, ...) @totals(i64 noundef %7, i32 noundef 7, ptr noundef %8, ptr noundef %3) #43
  tail call void (ptr, ...) @sf_free(ptr noundef %6) #43
  %9 = tail call i64 (...) @util_cpu_time() #43
  %10 = getelementptr inbounds %struct.set_family, ptr %8, i64 0, i32 3
  %11 = load i32, ptr %10, align 4, !tbaa !31
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %16, label %13

13:                                               ; preds = %4
  %14 = tail call ptr (ptr, ptr, ...) @sf_append(ptr noundef %0, ptr noundef nonnull %8) #43
  %15 = tail call ptr (ptr, ptr, ...) @irredundant(ptr noundef %14, ptr noundef %1) #43
  br label %17

16:                                               ; preds = %4
  tail call void (ptr, ...) @sf_free(ptr noundef nonnull %8) #43
  br label %17

17:                                               ; preds = %16, %13
  %18 = phi ptr [ %15, %13 ], [ %0, %16 ]
  tail call void (i64, i32, ptr, ptr, ...) @totals(i64 noundef %9, i32 noundef 8, ptr noundef %18, ptr noundef %3) #43
  ret ptr %18
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc ptr @reduce_gasp(ptr noundef %0, ptr noundef %1) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %4 = load i32, ptr %3, align 4, !tbaa !31
  %5 = load i32, ptr @cube, align 8, !tbaa !14
  %6 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef %4, i32 noundef %5) #43
  %7 = tail call ptr (ptr, ptr, ...) @cube2list(ptr noundef %0, ptr noundef %1) #43
  %8 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %9 = load ptr, ptr %8, align 8, !tbaa !33
  %10 = load i32, ptr %3, align 4, !tbaa !31
  %11 = load i32, ptr %0, align 8, !tbaa !34
  %12 = mul nsw i32 %11, %10
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds i32, ptr %9, i64 %13
  %15 = icmp sgt i32 %12, 0
  br i1 %15, label %16, label %50

16:                                               ; preds = %45, %2
  %17 = phi ptr [ %34, %45 ], [ %6, %2 ]
  %18 = phi ptr [ %48, %45 ], [ %9, %2 ]
  %19 = tail call ptr (ptr, ptr, ...) @reduce_cube(ptr noundef %7, ptr noundef %18) #43
  %20 = tail call i32 (ptr, ...) @setp_empty(ptr noundef %19) #43
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %23, label %22

22:                                               ; preds = %16
  tail call void (ptr, ...) @fatal(ptr noundef nonnull @.str.2.150) #43
  br label %33

23:                                               ; preds = %16
  %24 = tail call i32 (ptr, ptr, ...) @setp_equal(ptr noundef %19, ptr noundef %18) #43
  %25 = icmp eq i32 %24, 0
  %26 = load i32, ptr %19, align 4, !tbaa !16
  br i1 %25, label %30, label %27

27:                                               ; preds = %23
  %28 = or i32 %26, 32768
  store i32 %28, ptr %19, align 4, !tbaa !16
  %29 = tail call ptr (ptr, ptr, ...) @sf_addset(ptr noundef %17, ptr noundef %18) #43
  br label %33

30:                                               ; preds = %23
  %31 = and i32 %26, -32769
  store i32 %31, ptr %19, align 4, !tbaa !16
  %32 = tail call ptr (ptr, ptr, ...) @sf_addset(ptr noundef %17, ptr noundef nonnull %19) #43
  br label %33

33:                                               ; preds = %30, %27, %22
  %34 = phi ptr [ %17, %22 ], [ %29, %27 ], [ %32, %30 ]
  %35 = load i32, ptr @debug, align 4, !tbaa !16
  %36 = and i32 %35, 16
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %42, label %38

38:                                               ; preds = %33
  %39 = tail call ptr (ptr, ...) @pc1(ptr noundef %18) #43
  %40 = tail call ptr (ptr, ...) @pc2(ptr noundef %19) #43
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.151, ptr noundef %39, ptr noundef %40) #44
  br label %42

42:                                               ; preds = %38, %33
  %43 = icmp eq ptr %19, null
  br i1 %43, label %45, label %44

44:                                               ; preds = %42
  tail call void @free(ptr noundef nonnull %19) #43
  br label %45

45:                                               ; preds = %44, %42
  %46 = load i32, ptr %0, align 8, !tbaa !34
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i32, ptr %18, i64 %47
  %49 = icmp ult ptr %48, %14
  br i1 %49, label %16, label %50

50:                                               ; preds = %45, %2
  %51 = phi ptr [ %6, %2 ], [ %34, %45 ]
  %52 = load ptr, ptr %7, align 8, !tbaa !13
  %53 = icmp eq ptr %52, null
  br i1 %53, label %55, label %54

54:                                               ; preds = %50
  tail call void @free(ptr noundef nonnull %52) #43
  br label %55

55:                                               ; preds = %54, %50
  tail call void @free(ptr noundef nonnull %7) #43
  ret ptr %51
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @super_gasp(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #0 {
  %5 = tail call i64 (...) @util_cpu_time() #43
  %6 = tail call fastcc ptr @reduce_gasp(ptr noundef %0, ptr noundef %1) #44
  tail call void (i64, i32, ptr, ptr, ...) @totals(i64 noundef %5, i32 noundef 9, ptr noundef %6, ptr noundef %3) #43
  %7 = tail call i64 (...) @util_cpu_time() #43
  %8 = tail call ptr (ptr, ptr, ...) @all_primes(ptr noundef %6, ptr noundef %2) #43
  tail call void (i64, i32, ptr, ptr, ...) @totals(i64 noundef %7, i32 noundef 7, ptr noundef %8, ptr noundef %3) #43
  tail call void (ptr, ...) @sf_free(ptr noundef %6) #43
  %9 = tail call i64 (...) @util_cpu_time() #43
  %10 = tail call ptr (ptr, ptr, ...) @sf_append(ptr noundef %0, ptr noundef %8) #43
  %11 = tail call ptr (ptr, ...) @sf_dupl(ptr noundef %10) #43
  %12 = load i32, ptr @trace, align 4, !tbaa !16
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %17, label %14

14:                                               ; preds = %4
  %15 = tail call i64 (...) @util_cpu_time() #43
  %16 = sub nsw i64 %15, %9
  tail call void (ptr, ptr, i64, ...) @print_trace(ptr noundef %11, ptr noundef nonnull @.str.1.154, i64 noundef %16) #43
  br label %17

17:                                               ; preds = %14, %4
  %18 = tail call i64 (...) @util_cpu_time() #43
  %19 = tail call ptr (ptr, ptr, ...) @irredundant(ptr noundef %11, ptr noundef %1) #43
  tail call void (i64, i32, ptr, ptr, ...) @totals(i64 noundef %18, i32 noundef 5, ptr noundef %19, ptr noundef %3) #43
  ret ptr %19
}

; Function Attrs: nofree nounwind optsize uwtable
define internal i32 @espresso_getopt(i32 noundef %0, ptr nocapture noundef readonly %1, ptr noundef readonly %2) #14 {
  store ptr null, ptr @optarg, align 8, !tbaa !13
  %4 = load ptr, ptr @espresso_getopt.scan, align 8, !tbaa !13
  %5 = icmp eq ptr %4, null
  br i1 %5, label %9, label %6

6:                                                ; preds = %3
  %7 = load i8, ptr %4, align 1, !tbaa !56
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %34

9:                                                ; preds = %6, %3
  %10 = load i32, ptr @optind, align 4, !tbaa !16
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  store i32 1, ptr @optind, align 4, !tbaa !16
  br label %13

13:                                               ; preds = %12, %9
  %14 = phi i32 [ 1, %12 ], [ %10, %9 ]
  %15 = icmp slt i32 %14, %0
  br i1 %15, label %16, label %61

16:                                               ; preds = %13
  %17 = sext i32 %14 to i64
  %18 = getelementptr inbounds ptr, ptr %1, i64 %17
  %19 = load ptr, ptr %18, align 8, !tbaa !13
  %20 = load i8, ptr %19, align 1, !tbaa !56
  %21 = icmp eq i8 %20, 45
  br i1 %21, label %22, label %61

22:                                               ; preds = %16
  %23 = getelementptr inbounds i8, ptr %19, i64 1
  %24 = load i8, ptr %23, align 1, !tbaa !56
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %61, label %26

26:                                               ; preds = %22
  %27 = add nsw i32 %14, 1
  store i32 %27, ptr @optind, align 4, !tbaa !16
  %28 = load i8, ptr %23, align 1, !tbaa !56
  %29 = icmp eq i8 %28, 45
  br i1 %29, label %30, label %34

30:                                               ; preds = %26
  %31 = getelementptr inbounds i8, ptr %19, i64 2
  %32 = load i8, ptr %31, align 1, !tbaa !56
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %61, label %34

34:                                               ; preds = %30, %26, %6
  %35 = phi i8 [ %7, %6 ], [ %28, %30 ], [ %28, %26 ]
  %36 = phi ptr [ %4, %6 ], [ %23, %30 ], [ %23, %26 ]
  %37 = getelementptr inbounds i8, ptr %36, i64 1
  store ptr %37, ptr @espresso_getopt.scan, align 8, !tbaa !13
  %38 = sext i8 %35 to i32
  %39 = tail call ptr @strchr(ptr noundef nonnull dereferenceable(1) %2, i32 noundef %38) #48
  %40 = icmp eq ptr %39, null
  %41 = icmp eq i8 %35, 58
  %42 = or i1 %41, %40
  br i1 %42, label %43, label %47

43:                                               ; preds = %34
  %44 = load ptr, ptr @stderr, align 8, !tbaa !13
  %45 = load ptr, ptr %1, align 8, !tbaa !13
  %46 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %44, ptr noundef nonnull @.str.155, ptr noundef %45, i32 noundef %38) #47
  br label %61

47:                                               ; preds = %34
  %48 = getelementptr inbounds i8, ptr %39, i64 1
  %49 = load i8, ptr %48, align 1, !tbaa !56
  %50 = icmp eq i8 %49, 58
  br i1 %50, label %51, label %61

51:                                               ; preds = %47
  %52 = load i8, ptr %37, align 1, !tbaa !56
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %55, label %54

54:                                               ; preds = %51
  store ptr %37, ptr @optarg, align 8, !tbaa !13
  store ptr null, ptr @espresso_getopt.scan, align 8, !tbaa !13
  br label %61

55:                                               ; preds = %51
  %56 = load i32, ptr @optind, align 4, !tbaa !16
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds ptr, ptr %1, i64 %57
  %59 = load ptr, ptr %58, align 8, !tbaa !13
  store ptr %59, ptr @optarg, align 8, !tbaa !13
  %60 = add nsw i32 %56, 1
  store i32 %60, ptr @optind, align 4, !tbaa !16
  br label %61

61:                                               ; preds = %55, %54, %47, %43, %30, %22, %16, %13
  %62 = phi i32 [ 63, %43 ], [ -1, %13 ], [ -1, %22 ], [ -1, %16 ], [ -1, %30 ], [ %38, %54 ], [ %38, %55 ], [ %38, %47 ]
  ret i32 %62
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: read)
declare ptr @strchr(ptr noundef, i32 noundef) local_unnamed_addr #17

; Function Attrs: nounwind optsize uwtable
define internal i32 @gimpel_reduce(ptr noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, ptr noundef %6, ptr nocapture noundef %7) #0 {
  %9 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 4
  %10 = load ptr, ptr %9, align 8, !tbaa !13
  %11 = icmp eq ptr %10, null
  br i1 %11, label %155, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 3
  %14 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 2
  br label %15

15:                                               ; preds = %89, %12
  %16 = phi ptr [ %10, %12 ], [ %91, %89 ]
  %17 = getelementptr inbounds %struct.sm_col_struct, ptr %16, i64 0, i32 1
  %18 = load i32, ptr %17, align 4, !tbaa !109
  %19 = icmp eq i32 %18, 2
  br i1 %19, label %20, label %89

20:                                               ; preds = %15
  %21 = getelementptr inbounds %struct.sm_col_struct, ptr %16, i64 0, i32 3
  %22 = load ptr, ptr %21, align 8, !tbaa !101
  %23 = getelementptr inbounds %struct.sm_element_struct, ptr %22, i64 0, i32 1
  %24 = load i32, ptr %23, align 4, !tbaa !103
  %25 = icmp sgt i32 %24, -1
  br i1 %25, label %26, label %34

26:                                               ; preds = %20
  %27 = load i32, ptr %13, align 8, !tbaa !104
  %28 = icmp slt i32 %24, %27
  br i1 %28, label %29, label %34

29:                                               ; preds = %26
  %30 = load ptr, ptr %14, align 8, !tbaa !105
  %31 = zext i32 %24 to i64
  %32 = getelementptr inbounds ptr, ptr %30, i64 %31
  %33 = load ptr, ptr %32, align 8, !tbaa !13
  br label %34

34:                                               ; preds = %29, %26, %20
  %35 = phi ptr [ %33, %29 ], [ null, %26 ], [ null, %20 ]
  %36 = getelementptr inbounds %struct.sm_col_struct, ptr %16, i64 0, i32 4
  %37 = load ptr, ptr %36, align 8, !tbaa !115
  %38 = getelementptr inbounds %struct.sm_element_struct, ptr %37, i64 0, i32 1
  %39 = load i32, ptr %38, align 4, !tbaa !103
  %40 = icmp sgt i32 %39, -1
  br i1 %40, label %41, label %49

41:                                               ; preds = %34
  %42 = load i32, ptr %13, align 8, !tbaa !104
  %43 = icmp slt i32 %39, %42
  br i1 %43, label %44, label %49

44:                                               ; preds = %41
  %45 = load ptr, ptr %14, align 8, !tbaa !105
  %46 = zext i32 %39 to i64
  %47 = getelementptr inbounds ptr, ptr %45, i64 %46
  %48 = load ptr, ptr %47, align 8, !tbaa !13
  br label %49

49:                                               ; preds = %44, %41, %34
  %50 = phi ptr [ %48, %44 ], [ null, %41 ], [ null, %34 ]
  %51 = getelementptr inbounds %struct.sm_col_struct, ptr %35, i64 0, i32 1
  %52 = load i32, ptr %51, align 4, !tbaa !37
  %53 = icmp eq i32 %52, 2
  br i1 %53, label %77, label %54

54:                                               ; preds = %49
  %55 = getelementptr inbounds %struct.sm_col_struct, ptr %50, i64 0, i32 1
  %56 = load i32, ptr %55, align 4, !tbaa !37
  %57 = icmp eq i32 %56, 2
  br i1 %57, label %58, label %89

58:                                               ; preds = %54
  %.lcssa9 = phi i32 [ %39, %54 ]
  %.lcssa7 = phi i1 [ %40, %54 ]
  %.lcssa5 = phi i32 [ %24, %54 ]
  %.lcssa3 = phi i1 [ %25, %54 ]
  %.lcssa1 = phi ptr [ %16, %54 ]
  br i1 %.lcssa7, label %59, label %67

59:                                               ; preds = %58
  %60 = load i32, ptr %13, align 8, !tbaa !104
  %61 = icmp slt i32 %.lcssa9, %60
  br i1 %61, label %62, label %67

62:                                               ; preds = %59
  %63 = load ptr, ptr %14, align 8, !tbaa !105
  %64 = zext i32 %.lcssa9 to i64
  %65 = getelementptr inbounds ptr, ptr %63, i64 %64
  %66 = load ptr, ptr %65, align 8, !tbaa !13
  br label %67

67:                                               ; preds = %62, %59, %58
  %68 = phi ptr [ %66, %62 ], [ null, %59 ], [ null, %58 ]
  br i1 %.lcssa3, label %69, label %77

69:                                               ; preds = %67
  %70 = load i32, ptr %13, align 8, !tbaa !104
  %71 = icmp slt i32 %.lcssa5, %70
  br i1 %71, label %72, label %77

72:                                               ; preds = %69
  %73 = load ptr, ptr %14, align 8, !tbaa !105
  %74 = zext i32 %.lcssa5 to i64
  %75 = getelementptr inbounds ptr, ptr %73, i64 %74
  %76 = load ptr, ptr %75, align 8, !tbaa !13
  br label %77

77:                                               ; preds = %72, %69, %67, %49
  %.lcssa = phi ptr [ %.lcssa1, %72 ], [ %.lcssa1, %69 ], [ %.lcssa1, %67 ], [ %16, %49 ]
  %78 = phi ptr [ %68, %72 ], [ %68, %69 ], [ %68, %67 ], [ %35, %49 ]
  %79 = phi ptr [ %76, %72 ], [ null, %69 ], [ null, %67 ], [ %50, %49 ]
  %80 = load i32, ptr %.lcssa, align 8, !tbaa !110
  %81 = getelementptr inbounds %struct.sm_col_struct, ptr %78, i64 0, i32 3
  %82 = load ptr, ptr %81, align 8, !tbaa !39
  %83 = load i32, ptr %82, align 8, !tbaa !42
  %84 = icmp eq i32 %83, %80
  br i1 %84, label %85, label %93

85:                                               ; preds = %77
  %86 = getelementptr inbounds %struct.sm_col_struct, ptr %78, i64 0, i32 4
  %87 = load ptr, ptr %86, align 8, !tbaa !116
  %88 = load i32, ptr %87, align 8, !tbaa !42
  br label %93

89:                                               ; preds = %54, %15
  %90 = getelementptr inbounds %struct.sm_col_struct, ptr %16, i64 0, i32 5
  %91 = load ptr, ptr %90, align 8, !tbaa !13
  %92 = icmp eq ptr %91, null
  br i1 %92, label %155, label %15

93:                                               ; preds = %85, %77
  %94 = phi i32 [ %83, %77 ], [ %88, %85 ]
  %95 = load i32, ptr %78, align 8, !tbaa !35
  %96 = load i32, ptr %79, align 8, !tbaa !35
  %97 = icmp sgt i32 %94, -1
  br i1 %97, label %98, label %107

98:                                               ; preds = %93
  %99 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 1
  %100 = load i32, ptr %99, align 8, !tbaa !107
  %101 = icmp slt i32 %94, %100
  br i1 %101, label %102, label %107

102:                                              ; preds = %98
  %103 = load ptr, ptr %0, align 8, !tbaa !108
  %104 = zext i32 %94 to i64
  %105 = getelementptr inbounds ptr, ptr %103, i64 %104
  %106 = load ptr, ptr %105, align 8, !tbaa !13
  br label %107

107:                                              ; preds = %102, %98, %93
  %108 = phi ptr [ %106, %102 ], [ null, %98 ], [ null, %93 ]
  %109 = tail call ptr (ptr, ...) @sm_row_dup(ptr noundef %108) #43
  tail call void (ptr, i32, ...) @sm_row_remove(ptr noundef %109, i32 noundef %95) #43
  %110 = getelementptr inbounds %struct.sm_col_struct, ptr %79, i64 0, i32 3
  %111 = load ptr, ptr %110, align 8, !tbaa !13
  %112 = icmp eq ptr %111, null
  br i1 %112, label %135, label %113

113:                                              ; preds = %107
  %114 = getelementptr inbounds %struct.sm_col_struct, ptr %109, i64 0, i32 3
  br label %115

115:                                              ; preds = %131, %113
  %116 = phi ptr [ %111, %113 ], [ %133, %131 ]
  %117 = load i32, ptr %116, align 8, !tbaa !42
  %118 = icmp eq i32 %117, %80
  br i1 %118, label %131, label %119

119:                                              ; preds = %115
  %120 = load ptr, ptr %114, align 8, !tbaa !13
  %121 = icmp eq ptr %120, null
  br i1 %121, label %131, label %122

122:                                              ; preds = %122, %119
  %123 = phi ptr [ %129, %122 ], [ %120, %119 ]
  %124 = load i32, ptr %116, align 8, !tbaa !42
  %125 = getelementptr inbounds %struct.sm_element_struct, ptr %123, i64 0, i32 1
  %126 = load i32, ptr %125, align 4, !tbaa !103
  %127 = tail call ptr (ptr, i32, i32, ...) @sm_insert(ptr noundef %0, i32 noundef %124, i32 noundef %126) #43
  %128 = getelementptr inbounds %struct.sm_element_struct, ptr %123, i64 0, i32 4
  %129 = load ptr, ptr %128, align 8, !tbaa !13
  %130 = icmp eq ptr %129, null
  br i1 %130, label %131, label %122

131:                                              ; preds = %122, %119, %115
  %132 = getelementptr inbounds %struct.sm_element_struct, ptr %116, i64 0, i32 2
  %133 = load ptr, ptr %132, align 8, !tbaa !13
  %134 = icmp eq ptr %133, null
  br i1 %134, label %135, label %115

135:                                              ; preds = %131, %107
  tail call void (ptr, i32, ...) @sm_delcol(ptr noundef %0, i32 noundef %95) #43
  tail call void (ptr, i32, ...) @sm_delcol(ptr noundef %0, i32 noundef %96) #43
  tail call void (ptr, i32, ...) @sm_delrow(ptr noundef %0, i32 noundef %80) #43
  tail call void (ptr, i32, ...) @sm_delrow(ptr noundef %0, i32 noundef %94) #43
  %136 = getelementptr inbounds %struct.stats_struct, ptr %6, i64 0, i32 6
  %137 = load i32, ptr %136, align 8, !tbaa !117
  %138 = add nsw i32 %137, 1
  store i32 %138, ptr %136, align 8, !tbaa !117
  %139 = getelementptr inbounds %struct.stats_struct, ptr %6, i64 0, i32 7
  %140 = load i32, ptr %139, align 4, !tbaa !119
  %141 = add nsw i32 %140, 1
  store i32 %141, ptr %139, align 4, !tbaa !119
  %142 = add nsw i32 %3, -1
  %143 = add nsw i32 %4, -1
  %144 = tail call ptr (ptr, ptr, ptr, i32, i32, i32, ptr, ...) @sm_mincov(ptr noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %142, i32 noundef %143, i32 noundef %5, ptr noundef %6) #43
  store ptr %144, ptr %7, align 8, !tbaa !13
  %145 = load i32, ptr %139, align 4, !tbaa !119
  %146 = add nsw i32 %145, -1
  store i32 %146, ptr %139, align 4, !tbaa !119
  %147 = icmp eq ptr %144, null
  br i1 %147, label %154, label %148

148:                                              ; preds = %135
  %149 = load ptr, ptr %144, align 8, !tbaa !120
  %150 = tail call i32 (ptr, ptr, ...) @sm_row_intersects(ptr noundef %109, ptr noundef %149) #43
  %151 = icmp eq i32 %150, 0
  %152 = load ptr, ptr %7, align 8, !tbaa !13
  %153 = select i1 %151, i32 %95, i32 %96
  tail call void (ptr, ptr, i32, ...) @solution_add(ptr noundef %152, ptr noundef %2, i32 noundef %153) #43
  br label %154

154:                                              ; preds = %148, %135
  tail call void (ptr, ...) @sm_row_free(ptr noundef %109) #43
  br label %155

155:                                              ; preds = %154, %89, %8
  %156 = phi i32 [ 1, %154 ], [ 0, %8 ], [ 0, %89 ]
  ret i32 %156
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @map_dcset(ptr noundef %0) #0 {
  %2 = alloca ptr, align 8
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #45
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #45
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #45
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #45
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #45
  %7 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 7
  %8 = load ptr, ptr %7, align 8, !tbaa !58
  %9 = icmp eq ptr %8, null
  br i1 %9, label %245, label %10

10:                                               ; preds = %1
  %11 = load ptr, ptr %8, align 8, !tbaa !13
  %12 = icmp eq ptr %11, null
  br i1 %12, label %245, label %13

13:                                               ; preds = %10
  %14 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %15 = icmp sgt i32 %14, 0
  br i1 %15, label %16, label %245

16:                                               ; preds = %13
  %17 = shl nuw i32 %14, 1
  %18 = tail call i32 @llvm.smax.i32(i32 %17, i32 1)
  %19 = zext i32 %18 to i64
  br label %20

20:                                               ; preds = %36, %16
  %21 = phi i32 [ 0, %16 ], [ %39, %36 ]
  %22 = phi i64 [ 0, %16 ], [ %37, %36 ]
  %23 = getelementptr inbounds ptr, ptr %8, i64 %22
  %24 = load ptr, ptr %23, align 8, !tbaa !13
  %25 = tail call i32 @strncmp(ptr noundef nonnull dereferenceable(1) %24, ptr noundef nonnull dereferenceable(10) @.str.222, i64 noundef 9) #48
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %40, label %27

27:                                               ; preds = %20
  %28 = tail call i32 @strncmp(ptr noundef nonnull dereferenceable(1) %24, ptr noundef nonnull dereferenceable(9) @.str.1.223, i64 noundef 8) #48
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %40, label %30

30:                                               ; preds = %27
  %31 = tail call i32 @strncmp(ptr noundef nonnull dereferenceable(1) %24, ptr noundef nonnull dereferenceable(10) @.str.2.224, i64 noundef 9) #48
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %40, label %33

33:                                               ; preds = %30
  %34 = tail call i32 @strncmp(ptr noundef nonnull dereferenceable(1) %24, ptr noundef nonnull dereferenceable(9) @.str.3.225, i64 noundef 8) #48
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %40, label %36

36:                                               ; preds = %33
  %37 = add nuw nsw i64 %22, 1
  %38 = icmp eq i64 %37, %19
  %39 = add nuw nsw i32 %21, 1
  br i1 %38, label %245, label %20

40:                                               ; preds = %33, %30, %27, %20
  %.lcssa1 = phi i32 [ %21, %33 ], [ %21, %30 ], [ %21, %27 ], [ %21, %20 ]
  %.lcssa = phi i64 [ %22, %33 ], [ %22, %30 ], [ %22, %27 ], [ %22, %20 ]
  %41 = trunc i64 %.lcssa to i32
  %42 = lshr i32 %41, 1
  %43 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %44 = load i32, ptr %43, align 4, !tbaa !16
  %45 = shl i32 %44, 5
  %46 = and i32 %45, 32736
  %47 = icmp ult i32 %46, 33
  %48 = add nsw i32 %46, -1
  %49 = lshr i32 %48, 3
  %50 = and i32 %49, 536870908
  %51 = add nuw nsw i32 %50, 8
  %52 = select i1 %47, i32 8, i32 %51
  %53 = zext i32 %52 to i64
  %54 = tail call noalias ptr @malloc(i64 noundef %53) #42
  %55 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %54, ptr noundef nonnull %43) #43
  %56 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %57 = load i32, ptr %56, align 4, !tbaa !16
  %58 = shl i32 %57, 5
  %59 = and i32 %58, 32736
  %60 = icmp ult i32 %59, 33
  %61 = add nsw i32 %59, -1
  %62 = lshr i32 %61, 3
  %63 = and i32 %62, 536870908
  %64 = add nuw nsw i32 %63, 8
  %65 = select i1 %60, i32 8, i32 %64
  %66 = zext i32 %65 to i64
  %67 = tail call noalias ptr @malloc(i64 noundef %66) #42
  %68 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %67, ptr noundef nonnull %56) #43
  %69 = and i32 %41, 2147483646
  %70 = and i32 %41, 30
  %71 = shl nuw nsw i32 1, %70
  %72 = xor i32 %71, -1
  %73 = lshr i32 %41, 5
  %74 = add nuw nsw i32 %73, 1
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds i32, ptr %55, i64 %75
  %77 = load i32, ptr %76, align 4, !tbaa !16
  %78 = and i32 %77, %72
  store i32 %78, ptr %76, align 4, !tbaa !16
  %79 = or i32 %41, 1
  %80 = and i32 %79, 31
  %81 = shl nuw i32 1, %80
  %82 = freeze i32 %81
  %83 = xor i32 %82, -1
  %84 = getelementptr inbounds i32, ptr %68, i64 %75
  %85 = load i32, ptr %84, align 4, !tbaa !16
  %86 = and i32 %85, %83
  store i32 %86, ptr %84, align 4, !tbaa !16
  %87 = tail call i64 (...) @util_cpu_time() #43
  %88 = load ptr, ptr %0, align 8, !tbaa !61
  %89 = tail call ptr (ptr, ...) @cube1list(ptr noundef %88) #43
  %90 = tail call ptr (ptr, ptr, ...) @cofactor(ptr noundef %89, ptr noundef %55) #43
  call void (ptr, ptr, ptr, ...) @simp_comp(ptr noundef %90, ptr noundef nonnull %2, ptr noundef nonnull %4) #43
  %91 = load i32, ptr @trace, align 4, !tbaa !16
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %97, label %93

93:                                               ; preds = %40
  %94 = load ptr, ptr %2, align 8, !tbaa !13
  %95 = call i64 (...) @util_cpu_time() #43
  %96 = sub nsw i64 %95, %87
  call void (ptr, ptr, i64, ...) @print_trace(ptr noundef %94, ptr noundef nonnull @.str.4.226, i64 noundef %96) #43
  br label %97

97:                                               ; preds = %93, %40
  %98 = call i64 (...) @util_cpu_time() #43
  %99 = load ptr, ptr %0, align 8, !tbaa !61
  %100 = call ptr (ptr, ...) @cube1list(ptr noundef %99) #43
  %101 = call ptr (ptr, ptr, ...) @cofactor(ptr noundef %100, ptr noundef nonnull %68) #43
  call void (ptr, ptr, ptr, ...) @simp_comp(ptr noundef %101, ptr noundef nonnull %3, ptr noundef nonnull %5) #43
  %102 = load i32, ptr @trace, align 4, !tbaa !16
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %108, label %104

104:                                              ; preds = %97
  %105 = load ptr, ptr %3, align 8, !tbaa !13
  %106 = call i64 (...) @util_cpu_time() #43
  %107 = sub nsw i64 %106, %98
  call void (ptr, ptr, i64, ...) @print_trace(ptr noundef %105, ptr noundef nonnull @.str.5.227, i64 noundef %107) #43
  br label %108

108:                                              ; preds = %104, %97
  %109 = call i64 (...) @util_cpu_time() #43
  %110 = load ptr, ptr %2, align 8, !tbaa !13
  %111 = load ptr, ptr %5, align 8, !tbaa !13
  %112 = call ptr (ptr, ptr, ...) @cv_intersect(ptr noundef %110, ptr noundef %111) #43
  %113 = load i32, ptr @trace, align 4, !tbaa !16
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %118, label %115

115:                                              ; preds = %108
  %116 = call i64 (...) @util_cpu_time() #43
  %117 = sub nsw i64 %116, %109
  call void (ptr, ptr, i64, ...) @print_trace(ptr noundef %112, ptr noundef nonnull @.str.6.228, i64 noundef %117) #43
  br label %118

118:                                              ; preds = %115, %108
  %119 = call i64 (...) @util_cpu_time() #43
  %120 = load ptr, ptr %3, align 8, !tbaa !13
  %121 = load ptr, ptr %4, align 8, !tbaa !13
  %122 = call ptr (ptr, ptr, ...) @cv_intersect(ptr noundef %120, ptr noundef %121) #43
  %123 = load i32, ptr @trace, align 4, !tbaa !16
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %128, label %125

125:                                              ; preds = %118
  %126 = call i64 (...) @util_cpu_time() #43
  %127 = sub nsw i64 %126, %119
  call void (ptr, ptr, i64, ...) @print_trace(ptr noundef %122, ptr noundef nonnull @.str.7.229, i64 noundef %127) #43
  br label %128

128:                                              ; preds = %125, %118
  %129 = call i64 (...) @util_cpu_time() #43
  %130 = call ptr (ptr, ptr, ...) @sf_union(ptr noundef %112, ptr noundef %122) #43
  %131 = load i32, ptr @trace, align 4, !tbaa !16
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %136, label %133

133:                                              ; preds = %128
  %134 = call i64 (...) @util_cpu_time() #43
  %135 = sub nsw i64 %134, %129
  call void (ptr, ptr, i64, ...) @print_trace(ptr noundef %130, ptr noundef nonnull @.str.8.230, i64 noundef %135) #43
  br label %136

136:                                              ; preds = %133, %128
  %137 = call i64 (...) @util_cpu_time() #43
  %138 = call ptr (ptr, ...) @cube1list(ptr noundef %130) #43
  %139 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 1
  call void (ptr, ptr, ptr, ...) @simp_comp(ptr noundef %138, ptr noundef nonnull %139, ptr noundef nonnull %6) #43
  %140 = load i32, ptr @trace, align 4, !tbaa !16
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %146, label %142

142:                                              ; preds = %136
  %143 = load ptr, ptr %139, align 8, !tbaa !62
  %144 = call i64 (...) @util_cpu_time() #43
  %145 = sub nsw i64 %144, %137
  call void (ptr, ptr, i64, ...) @print_trace(ptr noundef %143, ptr noundef nonnull @.str.9.231, i64 noundef %145) #43
  br label %146

146:                                              ; preds = %142, %136
  %147 = call i64 (...) @util_cpu_time() #43
  %148 = load ptr, ptr %0, align 8, !tbaa !61
  %149 = load ptr, ptr %6, align 8, !tbaa !13
  %150 = call ptr (ptr, ptr, ...) @cv_intersect(ptr noundef %148, ptr noundef %149) #43
  %151 = load i32, ptr @trace, align 4, !tbaa !16
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %157, label %153

153:                                              ; preds = %146
  %154 = load ptr, ptr %0, align 8, !tbaa !61
  %155 = call i64 (...) @util_cpu_time() #43
  %156 = sub nsw i64 %155, %147
  call void (ptr, ptr, i64, ...) @print_trace(ptr noundef %154, ptr noundef nonnull @.str.10.232, i64 noundef %156) #43
  br label %157

157:                                              ; preds = %153, %146
  %158 = load ptr, ptr %0, align 8, !tbaa !61
  call void (ptr, ...) @sf_free(ptr noundef %158) #43
  store ptr %150, ptr %0, align 8, !tbaa !61
  %159 = load ptr, ptr %2, align 8, !tbaa !13
  call void (ptr, ...) @sf_free(ptr noundef %159) #43
  %160 = load ptr, ptr %3, align 8, !tbaa !13
  call void (ptr, ...) @sf_free(ptr noundef %160) #43
  %161 = load ptr, ptr %4, align 8, !tbaa !13
  call void (ptr, ...) @sf_free(ptr noundef %161) #43
  %162 = load ptr, ptr %5, align 8, !tbaa !13
  call void (ptr, ...) @sf_free(ptr noundef %162) #43
  %163 = load ptr, ptr %6, align 8, !tbaa !13
  call void (ptr, ...) @sf_free(ptr noundef %163) #43
  %164 = load ptr, ptr %0, align 8, !tbaa !61
  %165 = call ptr (ptr, ...) @sf_active(ptr noundef %164) #43
  %166 = load ptr, ptr %0, align 8, !tbaa !61
  %167 = getelementptr inbounds %struct.set_family, ptr %166, i64 0, i32 5
  %168 = load ptr, ptr %167, align 8, !tbaa !33
  %169 = getelementptr inbounds %struct.set_family, ptr %166, i64 0, i32 3
  %170 = load i32, ptr %169, align 4, !tbaa !31
  %171 = load i32, ptr %166, align 8, !tbaa !34
  %172 = mul nsw i32 %171, %170
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds i32, ptr %168, i64 %173
  %175 = icmp sgt i32 %172, 0
  br i1 %175, label %176, label %194

176:                                              ; preds = %157
  %177 = or i32 %82, %71
  br label %178

178:                                              ; preds = %189, %176
  %179 = phi i32 [ %171, %176 ], [ %190, %189 ]
  %180 = phi ptr [ %168, %176 ], [ %192, %189 ]
  %181 = getelementptr inbounds i32, ptr %180, i64 %75
  %182 = load i32, ptr %181, align 4, !tbaa !16
  %183 = and i32 %182, %177
  %184 = icmp eq i32 %183, %177
  br i1 %184, label %189, label %185

185:                                              ; preds = %178
  %186 = load i32, ptr %180, align 4, !tbaa !16
  %187 = and i32 %186, -8193
  store i32 %187, ptr %180, align 4, !tbaa !16
  %188 = load i32, ptr %166, align 8, !tbaa !34
  br label %189

189:                                              ; preds = %185, %178
  %190 = phi i32 [ %179, %178 ], [ %188, %185 ]
  %191 = sext i32 %190 to i64
  %192 = getelementptr inbounds i32, ptr %180, i64 %191
  %193 = icmp ult ptr %192, %174
  br i1 %193, label %178, label %194

194:                                              ; preds = %189, %157
  %195 = call ptr (ptr, ...) @sf_inactive(ptr noundef nonnull %166) #43
  store ptr %195, ptr %0, align 8, !tbaa !61
  call void (...) @setdown_cube() #43
  %196 = add nuw nsw i32 %69, 2
  %197 = load i32, ptr @cube, align 8, !tbaa !14
  %198 = icmp slt i32 %196, %197
  br i1 %198, label %199, label %208

199:                                              ; preds = %194
  %200 = and i64 %.lcssa, 9223372036854775806
  %201 = add nuw nsw i64 %200, 2
  %202 = trunc i64 %.lcssa to i32
  %203 = and i32 %202, -2
  %204 = add i32 %197, %203
  %205 = and i32 %.lcssa1, 2147483646
  %206 = sub i32 %204, %205
  %207 = zext i32 %206 to i64
  br label %216

208:                                              ; preds = %216, %194
  %209 = add nuw nsw i32 %42, 1
  %210 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %211 = icmp slt i32 %209, %210
  br i1 %211, label %212, label %236

212:                                              ; preds = %208
  %213 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %214 = lshr i64 %.lcssa, 1
  %215 = add nuw nsw i64 %214, 1
  br label %225

216:                                              ; preds = %216, %199
  %217 = phi i64 [ %201, %199 ], [ %223, %216 ]
  %218 = load ptr, ptr %7, align 8, !tbaa !58
  %219 = getelementptr inbounds ptr, ptr %218, i64 %217
  %220 = load ptr, ptr %219, align 8, !tbaa !13
  %221 = add nsw i64 %217, -2
  %222 = getelementptr inbounds ptr, ptr %218, i64 %221
  store ptr %220, ptr %222, align 8, !tbaa !13
  %223 = add nuw nsw i64 %217, 1
  %224 = icmp eq i64 %223, %207
  br i1 %224, label %208, label %216

225:                                              ; preds = %225, %212
  %226 = phi i64 [ %214, %212 ], [ %235, %225 ]
  %227 = phi i64 [ %215, %212 ], [ %231, %225 ]
  %228 = getelementptr inbounds i32, ptr %213, i64 %227
  %229 = load i32, ptr %228, align 4, !tbaa !16
  %230 = getelementptr inbounds i32, ptr %213, i64 %226
  store i32 %229, ptr %230, align 4, !tbaa !16
  %231 = add nuw nsw i64 %227, 1
  %232 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %233 = sext i32 %232 to i64
  %234 = icmp slt i64 %231, %233
  %235 = add nuw nsw i64 %226, 1
  br i1 %234, label %225, label %236

236:                                              ; preds = %225, %208
  %237 = phi i32 [ %210, %208 ], [ %232, %225 ]
  %238 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %239 = add nsw i32 %238, -1
  store i32 %239, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %240 = add nsw i32 %237, -1
  store i32 %240, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  call void (...) @cube_setup() #43
  %241 = load ptr, ptr %0, align 8, !tbaa !61
  %242 = call ptr (ptr, i32, i32, ...) @sf_delc(ptr noundef %241, i32 noundef %69, i32 noundef %79) #43
  store ptr %242, ptr %0, align 8, !tbaa !61
  %243 = load ptr, ptr %139, align 8, !tbaa !62
  %244 = call ptr (ptr, i32, i32, ...) @sf_delc(ptr noundef %243, i32 noundef %69, i32 noundef %79) #43
  store ptr %244, ptr %139, align 8, !tbaa !62
  br label %245

245:                                              ; preds = %236, %36, %13, %10, %1
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #45
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #45
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #45
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #45
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #45
  ret i32 0
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: read)
declare i32 @strncmp(ptr nocapture noundef, ptr nocapture noundef, i64 noundef) local_unnamed_addr #17

; Function Attrs: nounwind optsize uwtable
define internal i32 @map_output_symbolic(ptr noundef %0) #0 {
  %2 = alloca ptr, align 8
  %3 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #45
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #45
  %4 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8, !tbaa !62
  %6 = getelementptr inbounds %struct.set_family, ptr %5, i64 0, i32 3
  %7 = load i32, ptr %6, align 4, !tbaa !31
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %16

9:                                                ; preds = %1
  %10 = load ptr, ptr %0, align 8, !tbaa !61
  tail call void (ptr, ...) @sf_free(ptr noundef %10) #43
  %11 = load ptr, ptr %4, align 8, !tbaa !62
  %12 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 2
  %13 = load ptr, ptr %12, align 8, !tbaa !63
  %14 = tail call ptr (ptr, ptr, ...) @cube2list(ptr noundef %11, ptr noundef %13) #43
  %15 = tail call ptr (ptr, ...) @complement(ptr noundef %14) #43
  store ptr %15, ptr %0, align 8, !tbaa !61
  br label %16

16:                                               ; preds = %9, %1
  %17 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 9
  %18 = load ptr, ptr %17, align 8, !tbaa !13
  %19 = icmp eq ptr %18, null
  br i1 %19, label %69, label %20

20:                                               ; preds = %45, %16
  %21 = phi ptr [ %51, %45 ], [ %18, %16 ]
  %22 = phi i32 [ %49, %45 ], [ 0, %16 ]
  %23 = load ptr, ptr %21, align 8, !tbaa !13
  %24 = icmp eq ptr %23, null
  br i1 %24, label %45, label %28

25:                                               ; preds = %45
  %.lcssa = phi i32 [ %49, %45 ]
  %26 = load ptr, ptr %17, align 8, !tbaa !13
  %27 = icmp eq ptr %26, null
  br i1 %27, label %69, label %53

28:                                               ; preds = %41, %20
  %29 = phi ptr [ %43, %41 ], [ %23, %20 ]
  %30 = getelementptr inbounds %struct.symbolic_list_struct, ptr %29, i64 0, i32 1
  %31 = load i32, ptr %30, align 4, !tbaa !84
  %32 = icmp slt i32 %31, 0
  br i1 %32, label %40, label %33

33:                                               ; preds = %28
  %34 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %35 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, ptr %34, i64 %36
  %38 = load i32, ptr %37, align 4, !tbaa !16
  %39 = icmp slt i32 %31, %38
  br i1 %39, label %41, label %40

40:                                               ; preds = %33, %28
  tail call void (ptr, ...) @fatal(ptr noundef nonnull @.str.11.235) #43
  br label %41

41:                                               ; preds = %40, %33
  %42 = getelementptr inbounds %struct.symbolic_list_struct, ptr %29, i64 0, i32 2
  %43 = load ptr, ptr %42, align 8, !tbaa !13
  %44 = icmp eq ptr %43, null
  br i1 %44, label %45, label %28

45:                                               ; preds = %41, %20
  %46 = getelementptr inbounds %struct.symbolic_struct, ptr %21, i64 0, i32 1
  %47 = load i32, ptr %46, align 8, !tbaa !79
  %48 = shl nuw i32 1, %47
  %49 = add nsw i32 %48, %22
  %50 = getelementptr inbounds %struct.symbolic_struct, ptr %21, i64 0, i32 4
  %51 = load ptr, ptr %50, align 8, !tbaa !13
  %52 = icmp eq ptr %51, null
  br i1 %52, label %25, label %20

53:                                               ; preds = %65, %25
  %54 = phi ptr [ %67, %65 ], [ %26, %25 ]
  %55 = load ptr, ptr %54, align 8, !tbaa !13
  %56 = icmp eq ptr %55, null
  br i1 %56, label %65, label %57

57:                                               ; preds = %57, %53
  %58 = phi ptr [ %63, %57 ], [ %55, %53 ]
  %59 = getelementptr inbounds %struct.symbolic_list_struct, ptr %58, i64 0, i32 1
  %60 = load i32, ptr %59, align 4, !tbaa !84
  %61 = add nsw i32 %60, %.lcssa
  store i32 %61, ptr %59, align 4, !tbaa !84
  %62 = getelementptr inbounds %struct.symbolic_list_struct, ptr %58, i64 0, i32 2
  %63 = load ptr, ptr %62, align 8, !tbaa !13
  %64 = icmp eq ptr %63, null
  br i1 %64, label %65, label %57

65:                                               ; preds = %57, %53
  %66 = getelementptr inbounds %struct.symbolic_struct, ptr %54, i64 0, i32 4
  %67 = load ptr, ptr %66, align 8, !tbaa !13
  %68 = icmp eq ptr %67, null
  br i1 %68, label %69, label %53

69:                                               ; preds = %65, %25, %16
  %70 = phi i32 [ %.lcssa, %25 ], [ 0, %16 ], [ %.lcssa, %65 ]
  %71 = load i32, ptr @cube, align 8, !tbaa !14
  %72 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %73 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds i32, ptr %72, i64 %74
  %76 = load i32, ptr %75, align 4, !tbaa !16
  %77 = add nsw i32 %76, %70
  store i32 %77, ptr %75, align 4, !tbaa !16
  tail call void (...) @setdown_cube() #43
  tail call void (...) @cube_setup() #43
  %78 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %79 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds i32, ptr %78, i64 %80
  %82 = load i32, ptr %81, align 4, !tbaa !16
  %83 = load ptr, ptr %0, align 8, !tbaa !61
  %84 = tail call ptr (ptr, i32, i32, ...) @sf_addcol(ptr noundef %83, i32 noundef %82, i32 noundef %70) #43
  store ptr %84, ptr %0, align 8, !tbaa !61
  %85 = load ptr, ptr %4, align 8, !tbaa !62
  %86 = tail call ptr (ptr, i32, i32, ...) @sf_addcol(ptr noundef %85, i32 noundef %82, i32 noundef %70) #43
  store ptr %86, ptr %4, align 8, !tbaa !62
  %87 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 2
  %88 = load ptr, ptr %87, align 8, !tbaa !63
  %89 = tail call ptr (ptr, i32, i32, ...) @sf_addcol(ptr noundef %88, i32 noundef %82, i32 noundef %70) #43
  store ptr %89, ptr %87, align 8, !tbaa !63
  %90 = load ptr, ptr %17, align 8, !tbaa !13, !nonnull !122, !noundef !122
  br label %91

91:                                               ; preds = %91, %69
  %92 = phi ptr [ %108, %91 ], [ %90, %69 ]
  %93 = phi i32 [ %106, %91 ], [ %82, %69 ]
  %94 = load i32, ptr @cube, align 8, !tbaa !14
  %95 = call ptr (i32, i32, ...) @sf_new(i32 noundef 100, i32 noundef %94) #43
  store ptr %95, ptr %2, align 8, !tbaa !13
  %96 = load i32, ptr @cube, align 8, !tbaa !14
  %97 = call ptr (i32, i32, ...) @sf_new(i32 noundef 100, i32 noundef %96) #43
  store ptr %97, ptr %3, align 8, !tbaa !13
  %98 = load ptr, ptr %92, align 8, !tbaa !78
  %99 = call i32 @find_inputs(ptr noundef null, ptr noundef nonnull %0, ptr noundef %98, i32 noundef %93, i32 noundef 0, ptr noundef nonnull %2, ptr noundef nonnull %3) #44
  %100 = load ptr, ptr %0, align 8, !tbaa !61
  call void (ptr, ...) @sf_free(ptr noundef %100) #43
  %101 = load ptr, ptr %2, align 8, !tbaa !13
  store ptr %101, ptr %0, align 8, !tbaa !61
  %102 = load ptr, ptr %3, align 8, !tbaa !13
  call void (ptr, ...) @sf_free(ptr noundef %102) #43
  %103 = getelementptr inbounds %struct.symbolic_struct, ptr %92, i64 0, i32 1
  %104 = load i32, ptr %103, align 8, !tbaa !79
  %105 = shl nuw i32 1, %104
  %106 = add nsw i32 %105, %93
  %107 = getelementptr inbounds %struct.symbolic_struct, ptr %92, i64 0, i32 4
  %108 = load ptr, ptr %107, align 8, !tbaa !13
  %109 = icmp eq ptr %108, null
  br i1 %109, label %110, label %91

110:                                              ; preds = %91
  %111 = load ptr, ptr %2, align 8, !tbaa !13
  %112 = getelementptr inbounds %struct.set_family, ptr %111, i64 0, i32 1
  %113 = load i32, ptr %112, align 4, !tbaa !44
  %114 = icmp slt i32 %113, 33
  %115 = add nsw i32 %113, -1
  %116 = lshr i32 %115, 3
  %117 = and i32 %116, 536870908
  %118 = add nuw nsw i32 %117, 8
  %119 = select i1 %114, i32 8, i32 %118
  %120 = zext i32 %119 to i64
  %121 = call noalias ptr @malloc(i64 noundef %120) #42
  %122 = call ptr (ptr, i32, ...) @set_fill(ptr noundef %121, i32 noundef %113) #43
  %123 = load ptr, ptr %17, align 8, !tbaa !13
  %124 = icmp eq ptr %123, null
  br i1 %124, label %156, label %125

125:                                              ; preds = %110
  %126 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8
  br label %127

127:                                              ; preds = %152, %125
  %128 = phi ptr [ %123, %125 ], [ %154, %152 ]
  %129 = load ptr, ptr %128, align 8, !tbaa !13
  %130 = icmp eq ptr %129, null
  br i1 %130, label %152, label %131

131:                                              ; preds = %131, %127
  %132 = phi ptr [ %150, %131 ], [ %129, %127 ]
  %133 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds i32, ptr %126, i64 %134
  %136 = load i32, ptr %135, align 4, !tbaa !16
  %137 = getelementptr inbounds %struct.symbolic_list_struct, ptr %132, i64 0, i32 1
  %138 = load i32, ptr %137, align 4, !tbaa !84
  %139 = add nsw i32 %138, %136
  %140 = and i32 %139, 31
  %141 = shl nuw i32 1, %140
  %142 = xor i32 %141, -1
  %143 = ashr i32 %139, 5
  %144 = add nsw i32 %143, 1
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds i32, ptr %122, i64 %145
  %147 = load i32, ptr %146, align 4, !tbaa !16
  %148 = and i32 %147, %142
  store i32 %148, ptr %146, align 4, !tbaa !16
  %149 = getelementptr inbounds %struct.symbolic_list_struct, ptr %132, i64 0, i32 2
  %150 = load ptr, ptr %149, align 8, !tbaa !13
  %151 = icmp eq ptr %150, null
  br i1 %151, label %152, label %131

152:                                              ; preds = %131, %127
  %153 = getelementptr inbounds %struct.symbolic_struct, ptr %128, i64 0, i32 4
  %154 = load ptr, ptr %153, align 8, !tbaa !13
  %155 = icmp eq ptr %154, null
  br i1 %155, label %156, label %127

156:                                              ; preds = %152, %110
  %157 = load ptr, ptr %2, align 8, !tbaa !13
  %158 = getelementptr inbounds %struct.set_family, ptr %157, i64 0, i32 1
  %159 = load i32, ptr %158, align 4, !tbaa !44
  %160 = call i32 (ptr, ...) @set_ord(ptr noundef %122) #43
  %161 = sub i32 %160, %159
  %162 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %163 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds i32, ptr %162, i64 %164
  %166 = load i32, ptr %165, align 4, !tbaa !16
  %167 = add i32 %161, %166
  store i32 %167, ptr %165, align 4, !tbaa !16
  call void (...) @setdown_cube() #43
  call void (...) @cube_setup() #43
  %168 = load ptr, ptr %0, align 8, !tbaa !61
  %169 = call ptr (ptr, ptr, ...) @sf_compress(ptr noundef %168, ptr noundef %122) #43
  store ptr %169, ptr %0, align 8, !tbaa !61
  %170 = load ptr, ptr %4, align 8, !tbaa !62
  %171 = call ptr (ptr, ptr, ...) @sf_compress(ptr noundef %170, ptr noundef %122) #43
  store ptr %171, ptr %4, align 8, !tbaa !62
  %172 = load i32, ptr @cube, align 8, !tbaa !14
  %173 = load ptr, ptr %0, align 8, !tbaa !61
  %174 = getelementptr inbounds %struct.set_family, ptr %173, i64 0, i32 1
  %175 = load i32, ptr %174, align 4, !tbaa !44
  %176 = icmp eq i32 %172, %175
  br i1 %176, label %179, label %177

177:                                              ; preds = %156
  call void (ptr, ...) @fatal(ptr noundef nonnull @.str.12.236) #43
  %178 = load ptr, ptr %0, align 8, !tbaa !61
  br label %179

179:                                              ; preds = %177, %156
  %180 = phi ptr [ %178, %177 ], [ %173, %156 ]
  %181 = call ptr (ptr, ...) @sf_contain(ptr noundef %180) #43
  store ptr %181, ptr %0, align 8, !tbaa !61
  %182 = load ptr, ptr %4, align 8, !tbaa !62
  %183 = call ptr (ptr, ...) @sf_contain(ptr noundef %182) #43
  store ptr %183, ptr %4, align 8, !tbaa !62
  %184 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %185 = icmp sgt i32 %184, 0
  br i1 %185, label %186, label %195

186:                                              ; preds = %186, %179
  %187 = phi i32 [ %192, %186 ], [ 0, %179 ]
  %188 = load ptr, ptr %0, align 8, !tbaa !61
  %189 = call ptr (ptr, i32, ...) @d1merge(ptr noundef %188, i32 noundef %187) #43
  store ptr %189, ptr %0, align 8, !tbaa !61
  %190 = load ptr, ptr %4, align 8, !tbaa !62
  %191 = call ptr (ptr, i32, ...) @d1merge(ptr noundef %190, i32 noundef %187) #43
  store ptr %191, ptr %4, align 8, !tbaa !62
  %192 = add nuw nsw i32 %187, 1
  %193 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %194 = icmp slt i32 %192, %193
  br i1 %194, label %186, label %195

195:                                              ; preds = %186, %179
  %196 = load ptr, ptr %0, align 8, !tbaa !61
  %197 = call ptr (ptr, ...) @sf_contain(ptr noundef %196) #43
  store ptr %197, ptr %0, align 8, !tbaa !61
  %198 = load ptr, ptr %4, align 8, !tbaa !62
  %199 = call ptr (ptr, ...) @sf_contain(ptr noundef %198) #43
  store ptr %199, ptr %4, align 8, !tbaa !62
  %200 = load ptr, ptr %87, align 8, !tbaa !63
  call void (ptr, ...) @sf_free(ptr noundef %200) #43
  %201 = load i32, ptr @cube, align 8, !tbaa !14
  %202 = call ptr (i32, i32, ...) @sf_new(i32 noundef 0, i32 noundef %201) #43
  store ptr %202, ptr %87, align 8, !tbaa !63
  %203 = load ptr, ptr %17, align 8, !tbaa !71
  %204 = load i32, ptr @cube, align 8, !tbaa !14
  %205 = call i32 @symbolic_hack_labels(ptr noundef nonnull %0, ptr noundef %203, ptr noundef %122, i32 noundef %204, i32 noundef %71, i32 noundef %70) #44
  %206 = icmp eq ptr %122, null
  br i1 %206, label %208, label %207

207:                                              ; preds = %195
  call void @free(ptr noundef nonnull %122) #43
  br label %208

208:                                              ; preds = %207, %195
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #45
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #45
  ret i32 undef
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @find_inputs(ptr noundef %0, ptr noundef %1, ptr noundef readonly %2, i32 noundef %3, i32 noundef %4, ptr noundef %5, ptr noundef %6) #0 {
  %8 = icmp eq ptr %2, null
  br i1 %8, label %9, label %40

9:                                                ; preds = %7
  %10 = load ptr, ptr %1, align 8, !tbaa !61
  %11 = tail call ptr (ptr, ptr, ...) @cv_intersect(ptr noundef %0, ptr noundef %10) #43
  %12 = getelementptr inbounds %struct.set_family, ptr %11, i64 0, i32 5
  %13 = load ptr, ptr %12, align 8, !tbaa !33
  %14 = getelementptr inbounds %struct.set_family, ptr %11, i64 0, i32 3
  %15 = load i32, ptr %14, align 4, !tbaa !31
  %16 = load i32, ptr %11, align 8, !tbaa !34
  %17 = mul nsw i32 %16, %15
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i32, ptr %13, i64 %18
  %20 = icmp sgt i32 %17, 0
  br i1 %20, label %21, label %37

21:                                               ; preds = %9
  %22 = add nsw i32 %4, %3
  %23 = and i32 %22, 31
  %24 = shl nuw i32 1, %23
  %25 = ashr i32 %22, 5
  %26 = add nsw i32 %25, 1
  %27 = sext i32 %26 to i64
  br label %28

28:                                               ; preds = %28, %21
  %29 = phi ptr [ %13, %21 ], [ %35, %28 ]
  %30 = getelementptr inbounds i32, ptr %29, i64 %27
  %31 = load i32, ptr %30, align 4, !tbaa !16
  %32 = or i32 %31, %24
  store i32 %32, ptr %30, align 4, !tbaa !16
  %33 = load i32, ptr %11, align 8, !tbaa !34
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds i32, ptr %29, i64 %34
  %36 = icmp ult ptr %35, %19
  br i1 %36, label %28, label %37

37:                                               ; preds = %28, %9
  %38 = load ptr, ptr %5, align 8, !tbaa !13
  %39 = tail call ptr (ptr, ptr, ...) @sf_append(ptr noundef %38, ptr noundef nonnull %11) #43
  store ptr %39, ptr %5, align 8, !tbaa !13
  br label %72

40:                                               ; preds = %7
  %41 = getelementptr inbounds %struct.PLA_t, ptr %1, i64 0, i32 2
  %42 = load ptr, ptr %41, align 8, !tbaa !63
  %43 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %44 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i32, ptr %43, i64 %45
  %47 = load i32, ptr %46, align 4, !tbaa !16
  %48 = getelementptr inbounds %struct.symbolic_list_struct, ptr %2, i64 0, i32 1
  %49 = load i32, ptr %48, align 4, !tbaa !84
  %50 = add nsw i32 %49, %47
  %51 = tail call ptr (ptr, i32, ...) @cof_output(ptr noundef %42, i32 noundef %50) #43
  %52 = icmp eq ptr %0, null
  br i1 %52, label %55, label %53

53:                                               ; preds = %40
  %54 = tail call ptr (ptr, ptr, ...) @cv_intersect(ptr noundef nonnull %0, ptr noundef %51) #43
  tail call void (ptr, ...) @sf_free(ptr noundef %51) #43
  br label %55

55:                                               ; preds = %53, %40
  %56 = phi ptr [ %54, %53 ], [ %51, %40 ]
  %57 = getelementptr inbounds %struct.symbolic_list_struct, ptr %2, i64 0, i32 2
  %58 = load ptr, ptr %57, align 8, !tbaa !85
  %59 = shl nsw i32 %4, 1
  %60 = tail call i32 @find_inputs(ptr noundef %56, ptr noundef nonnull %1, ptr noundef %58, i32 noundef %3, i32 noundef %59, ptr noundef %5, ptr noundef %6) #44
  tail call void (ptr, ...) @sf_free(ptr noundef %56) #43
  %61 = load ptr, ptr %1, align 8, !tbaa !61
  %62 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %63 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds i32, ptr %62, i64 %64
  %66 = load i32, ptr %65, align 4, !tbaa !16
  %67 = load i32, ptr %48, align 4, !tbaa !84
  %68 = add nsw i32 %67, %66
  %69 = tail call ptr (ptr, i32, ...) @cof_output(ptr noundef %61, i32 noundef %68) #43
  br i1 %52, label %74, label %70

70:                                               ; preds = %55
  %71 = tail call ptr (ptr, ptr, ...) @cv_intersect(ptr noundef nonnull %0, ptr noundef %69) #43
  tail call void (ptr, ...) @sf_free(ptr noundef %69) #43
  br label %74

72:                                               ; preds = %74, %37
  %73 = phi i32 [ undef, %37 ], [ undef, %74 ]
  ret i32 %73

74:                                               ; preds = %70, %55
  %75 = phi ptr [ %71, %70 ], [ %69, %55 ]
  %76 = load ptr, ptr %57, align 8, !tbaa !85
  %77 = or i32 %59, 1
  %78 = tail call i32 @find_inputs(ptr noundef %75, ptr noundef nonnull %1, ptr noundef %76, i32 noundef %3, i32 noundef %77, ptr noundef %5, ptr noundef %6) #44
  tail call void (ptr, ...) @sf_free(ptr noundef %75) #43
  br label %72
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @symbolic_hack_labels(ptr nocapture noundef %0, ptr noundef readonly %1, ptr nocapture noundef readonly %2, i32 noundef %3, i32 noundef %4, i32 noundef %5) #0 {
  %7 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 7
  %8 = load ptr, ptr %7, align 8, !tbaa !58
  %9 = icmp eq ptr %8, null
  br i1 %9, label %158, label %10

10:                                               ; preds = %6
  %11 = sext i32 %3 to i64
  %12 = shl nsw i64 %11, 3
  %13 = tail call noalias ptr @malloc(i64 noundef %12) #42
  store ptr %13, ptr %7, align 8, !tbaa !58
  %14 = icmp sgt i32 %3, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %10
  %16 = zext i32 %3 to i64
  br label %24

17:                                               ; preds = %24, %10
  %18 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %19 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, ptr %18, i64 %20
  %22 = load i32, ptr %21, align 4, !tbaa !16
  %23 = icmp sgt i32 %22, 0
  br i1 %23, label %35, label %30

24:                                               ; preds = %24, %15
  %25 = phi i64 [ 0, %15 ], [ %28, %24 ]
  %26 = load ptr, ptr %7, align 8, !tbaa !58
  %27 = getelementptr inbounds ptr, ptr %26, i64 %25
  store ptr null, ptr %27, align 8, !tbaa !13
  %28 = add nuw nsw i64 %25, 1
  %29 = icmp eq i64 %28, %16
  br i1 %29, label %17, label %24

30:                                               ; preds = %60, %17
  %31 = phi i32 [ %19, %17 ], [ %61, %60 ]
  %32 = phi ptr [ %18, %17 ], [ %64, %60 ]
  %33 = phi i32 [ 0, %17 ], [ %62, %60 ]
  %34 = icmp eq ptr %1, null
  br i1 %34, label %118, label %70

35:                                               ; preds = %60, %17
  %36 = phi i32 [ %61, %60 ], [ %19, %17 ]
  %37 = phi i64 [ %63, %60 ], [ 0, %17 ]
  %38 = phi i32 [ %62, %60 ], [ 0, %17 ]
  %39 = trunc i64 %37 to i32
  %40 = lshr i32 %39, 5
  %41 = add nuw nsw i32 %40, 1
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i32, ptr %2, i64 %42
  %44 = load i32, ptr %43, align 4, !tbaa !16
  %45 = and i32 %39, 31
  %46 = shl nuw i32 1, %45
  %47 = and i32 %44, %46
  %48 = icmp eq i32 %47, 0
  %49 = getelementptr inbounds ptr, ptr %8, i64 %37
  %50 = load ptr, ptr %49, align 8, !tbaa !13
  br i1 %48, label %56, label %51

51:                                               ; preds = %35
  %52 = load ptr, ptr %7, align 8, !tbaa !58
  %53 = add nsw i32 %38, 1
  %54 = sext i32 %38 to i64
  %55 = getelementptr inbounds ptr, ptr %52, i64 %54
  store ptr %50, ptr %55, align 8, !tbaa !13
  br label %60

56:                                               ; preds = %35
  %57 = icmp eq ptr %50, null
  br i1 %57, label %60, label %58

58:                                               ; preds = %56
  tail call void @free(ptr noundef nonnull %50) #43
  store ptr null, ptr %49, align 8, !tbaa !13
  %59 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  br label %60

60:                                               ; preds = %58, %56, %51
  %61 = phi i32 [ %36, %51 ], [ %59, %58 ], [ %36, %56 ]
  %62 = phi i32 [ %53, %51 ], [ %38, %58 ], [ %38, %56 ]
  %63 = add nuw nsw i64 %37, 1
  %64 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %65 = sext i32 %61 to i64
  %66 = getelementptr inbounds i32, ptr %64, i64 %65
  %67 = load i32, ptr %66, align 4, !tbaa !16
  %68 = sext i32 %67 to i64
  %69 = icmp slt i64 %63, %68
  br i1 %69, label %35, label %30

70:                                               ; preds = %109, %30
  %71 = phi ptr [ %113, %109 ], [ %1, %30 ]
  %72 = phi i32 [ %111, %109 ], [ %33, %30 ]
  %73 = getelementptr inbounds %struct.symbolic_struct, ptr %71, i64 0, i32 1
  %74 = load i32, ptr %73, align 8, !tbaa !79
  %75 = icmp eq i32 %74, 31
  br i1 %75, label %109, label %76

76:                                               ; preds = %70
  %77 = getelementptr inbounds %struct.symbolic_struct, ptr %71, i64 0, i32 2
  %78 = load ptr, ptr %77, align 8, !tbaa !80
  %79 = sext i32 %72 to i64
  br label %80

80:                                               ; preds = %102, %76
  %81 = phi i32 [ %74, %76 ], [ %103, %102 ]
  %82 = phi i64 [ 0, %76 ], [ %105, %102 ]
  %83 = phi ptr [ %78, %76 ], [ %104, %102 ]
  %84 = icmp eq ptr %83, null
  %85 = add nsw i64 %82, %79
  br i1 %84, label %86, label %96

86:                                               ; preds = %80
  %87 = tail call noalias dereferenceable_or_null(10) ptr @malloc(i64 noundef 10) #42
  %88 = load ptr, ptr %7, align 8, !tbaa !58
  %89 = getelementptr inbounds ptr, ptr %88, i64 %85
  store ptr %87, ptr %89, align 8, !tbaa !13
  %90 = load ptr, ptr %7, align 8, !tbaa !58
  %91 = getelementptr inbounds ptr, ptr %90, i64 %85
  %92 = load ptr, ptr %91, align 8, !tbaa !13
  %93 = trunc i64 %82 to i32
  %94 = tail call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %92, ptr noundef nonnull dereferenceable(1) @.str.15.237, i32 noundef %93) #43
  %95 = load i32, ptr %73, align 8, !tbaa !79
  br label %102

96:                                               ; preds = %80
  %97 = load ptr, ptr %83, align 8, !tbaa !86
  %98 = load ptr, ptr %7, align 8, !tbaa !58
  %99 = getelementptr inbounds ptr, ptr %98, i64 %85
  store ptr %97, ptr %99, align 8, !tbaa !13
  %100 = getelementptr inbounds %struct.symbolic_label_struct, ptr %83, i64 0, i32 1
  %101 = load ptr, ptr %100, align 8, !tbaa !88
  br label %102

102:                                              ; preds = %96, %86
  %103 = phi i32 [ %95, %86 ], [ %81, %96 ]
  %104 = phi ptr [ null, %86 ], [ %101, %96 ]
  %105 = add nuw nsw i64 %82, 1
  %106 = shl nuw i32 1, %103
  %107 = sext i32 %106 to i64
  %108 = icmp slt i64 %105, %107
  br i1 %108, label %80, label %109

109:                                              ; preds = %102, %70
  %110 = phi i32 [ -2147483648, %70 ], [ %106, %102 ]
  %111 = add nsw i32 %110, %72
  %112 = getelementptr inbounds %struct.symbolic_struct, ptr %71, i64 0, i32 4
  %113 = load ptr, ptr %112, align 8, !tbaa !69
  %114 = icmp eq ptr %113, null
  br i1 %114, label %115, label %70

115:                                              ; preds = %109
  %.lcssa = phi i32 [ %111, %109 ]
  %116 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %117 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  br label %118

118:                                              ; preds = %115, %30
  %119 = phi i32 [ %31, %30 ], [ %117, %115 ]
  %120 = phi ptr [ %32, %30 ], [ %116, %115 ]
  %121 = phi i32 [ %33, %30 ], [ %.lcssa, %115 ]
  %122 = sext i32 %119 to i64
  %123 = getelementptr inbounds i32, ptr %120, i64 %122
  %124 = load i32, ptr %123, align 4, !tbaa !16
  %125 = icmp slt i32 %124, %4
  br i1 %125, label %126, label %157

126:                                              ; preds = %118
  %127 = sext i32 %124 to i64
  %128 = sext i32 %4 to i64
  br label %129

129:                                              ; preds = %153, %126
  %130 = phi i64 [ %127, %126 ], [ %155, %153 ]
  %131 = phi i32 [ %121, %126 ], [ %154, %153 ]
  %132 = trunc i64 %130 to i32
  %133 = add i32 %132, %5
  %134 = ashr i32 %133, 5
  %135 = add nsw i32 %134, 1
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds i32, ptr %2, i64 %136
  %138 = load i32, ptr %137, align 4, !tbaa !16
  %139 = and i32 %133, 31
  %140 = shl nuw i32 1, %139
  %141 = and i32 %138, %140
  %142 = icmp eq i32 %141, 0
  %143 = getelementptr inbounds ptr, ptr %8, i64 %130
  %144 = load ptr, ptr %143, align 8, !tbaa !13
  br i1 %142, label %150, label %145

145:                                              ; preds = %129
  %146 = load ptr, ptr %7, align 8, !tbaa !58
  %147 = add nsw i32 %131, 1
  %148 = sext i32 %131 to i64
  %149 = getelementptr inbounds ptr, ptr %146, i64 %148
  store ptr %144, ptr %149, align 8, !tbaa !13
  br label %153

150:                                              ; preds = %129
  %151 = icmp eq ptr %144, null
  br i1 %151, label %153, label %152

152:                                              ; preds = %150
  tail call void @free(ptr noundef nonnull %144) #43
  store ptr null, ptr %143, align 8, !tbaa !13
  br label %153

153:                                              ; preds = %152, %150, %145
  %154 = phi i32 [ %147, %145 ], [ %131, %152 ], [ %131, %150 ]
  %155 = add nsw i64 %130, 1
  %156 = icmp eq i64 %155, %128
  br i1 %156, label %157, label %129

157:                                              ; preds = %153, %118
  tail call void @free(ptr noundef %8) #43
  br label %158

158:                                              ; preds = %157, %6
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @map_symbolic(ptr nocapture noundef %0) #0 {
  %2 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 8
  %3 = load ptr, ptr %2, align 8, !tbaa !13
  %4 = icmp eq ptr %3, null
  br i1 %4, label %44, label %5

5:                                                ; preds = %28, %1
  %6 = phi ptr [ %30, %28 ], [ %3, %1 ]
  %7 = load ptr, ptr %6, align 8, !tbaa !13
  %8 = icmp eq ptr %7, null
  br i1 %8, label %28, label %9

9:                                                ; preds = %5
  %10 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8
  br label %14

11:                                               ; preds = %28
  %12 = load ptr, ptr %2, align 8, !tbaa !13
  %13 = icmp eq ptr %12, null
  br i1 %13, label %44, label %32

14:                                               ; preds = %23, %9
  %15 = phi i32 [ %24, %23 ], [ %10, %9 ]
  %16 = phi ptr [ %26, %23 ], [ %7, %9 ]
  %17 = load i32, ptr %16, align 8, !tbaa !82
  %18 = icmp sgt i32 %17, -1
  %19 = icmp slt i32 %17, %15
  %20 = select i1 %18, i1 %19, i1 false
  br i1 %20, label %23, label %21

21:                                               ; preds = %14
  tail call void (ptr, ...) @fatal(ptr noundef nonnull @.str.13.240) #43
  %22 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8
  br label %23

23:                                               ; preds = %21, %14
  %24 = phi i32 [ %15, %14 ], [ %22, %21 ]
  %25 = getelementptr inbounds %struct.symbolic_list_struct, ptr %16, i64 0, i32 2
  %26 = load ptr, ptr %25, align 8, !tbaa !13
  %27 = icmp eq ptr %26, null
  br i1 %27, label %28, label %14

28:                                               ; preds = %23, %5
  %29 = getelementptr inbounds %struct.symbolic_struct, ptr %6, i64 0, i32 4
  %30 = load ptr, ptr %29, align 8, !tbaa !13
  %31 = icmp eq ptr %30, null
  br i1 %31, label %11, label %5

32:                                               ; preds = %32, %11
  %33 = phi ptr [ %42, %32 ], [ %12, %11 ]
  %34 = phi i32 [ %40, %32 ], [ 0, %11 ]
  %35 = phi i32 [ %39, %32 ], [ 0, %11 ]
  %36 = getelementptr inbounds %struct.symbolic_struct, ptr %33, i64 0, i32 1
  %37 = load i32, ptr %36, align 8, !tbaa !79
  %38 = shl nuw i32 1, %37
  %39 = add nsw i32 %38, %35
  %40 = add nuw nsw i32 %34, 1
  %41 = getelementptr inbounds %struct.symbolic_struct, ptr %33, i64 0, i32 4
  %42 = load ptr, ptr %41, align 8, !tbaa !13
  %43 = icmp eq ptr %42, null
  br i1 %43, label %44, label %32

44:                                               ; preds = %32, %11, %1
  %45 = phi i32 [ 0, %11 ], [ 0, %1 ], [ %39, %32 ]
  %46 = phi i32 [ 0, %11 ], [ 0, %1 ], [ %40, %32 ]
  %47 = load ptr, ptr %0, align 8, !tbaa !61
  %48 = getelementptr inbounds %struct.set_family, ptr %47, i64 0, i32 1
  %49 = load i32, ptr %48, align 4, !tbaa !44
  %50 = add nsw i32 %49, %45
  %51 = icmp slt i32 %50, 33
  %52 = add nsw i32 %50, -1
  %53 = lshr i32 %52, 3
  %54 = and i32 %53, 536870908
  %55 = add nuw nsw i32 %54, 8
  %56 = select i1 %51, i32 8, i32 %55
  %57 = zext i32 %56 to i64
  %58 = tail call noalias ptr @malloc(i64 noundef %57) #42
  %59 = tail call ptr (ptr, i32, ...) @set_fill(ptr noundef %58, i32 noundef %50) #43
  %60 = load ptr, ptr %2, align 8, !tbaa !13
  %61 = icmp eq ptr %60, null
  br i1 %61, label %98, label %62

62:                                               ; preds = %94, %44
  %63 = phi ptr [ %96, %94 ], [ %60, %44 ]
  %64 = load ptr, ptr %63, align 8, !tbaa !13
  %65 = icmp eq ptr %64, null
  br i1 %65, label %94, label %66

66:                                               ; preds = %66, %62
  %67 = phi ptr [ %92, %66 ], [ %64, %62 ]
  %68 = load i32, ptr %67, align 8, !tbaa !82
  %69 = shl nsw i32 %68, 1
  %70 = and i32 %69, 30
  %71 = shl nuw nsw i32 1, %70
  %72 = xor i32 %71, -1
  %73 = ashr i32 %68, 4
  %74 = add nsw i32 %73, 1
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds i32, ptr %59, i64 %75
  %77 = load i32, ptr %76, align 4, !tbaa !16
  %78 = and i32 %77, %72
  store i32 %78, ptr %76, align 4, !tbaa !16
  %79 = load i32, ptr %67, align 8, !tbaa !82
  %80 = shl nsw i32 %79, 1
  %81 = and i32 %80, 30
  %82 = or i32 %81, 1
  %83 = shl nuw i32 1, %82
  %84 = xor i32 %83, -1
  %85 = ashr i32 %79, 4
  %86 = add nsw i32 %85, 1
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds i32, ptr %59, i64 %87
  %89 = load i32, ptr %88, align 4, !tbaa !16
  %90 = and i32 %89, %84
  store i32 %90, ptr %88, align 4, !tbaa !16
  %91 = getelementptr inbounds %struct.symbolic_list_struct, ptr %67, i64 0, i32 2
  %92 = load ptr, ptr %91, align 8, !tbaa !13
  %93 = icmp eq ptr %92, null
  br i1 %93, label %94, label %66

94:                                               ; preds = %66, %62
  %95 = getelementptr inbounds %struct.symbolic_struct, ptr %63, i64 0, i32 4
  %96 = load ptr, ptr %95, align 8, !tbaa !13
  %97 = icmp eq ptr %96, null
  br i1 %97, label %98, label %62

98:                                               ; preds = %94, %44
  %99 = load ptr, ptr %0, align 8, !tbaa !61
  %100 = getelementptr inbounds %struct.set_family, ptr %99, i64 0, i32 1
  %101 = load i32, ptr %100, align 4, !tbaa !44
  %102 = add nsw i32 %101, %45
  %103 = tail call i32 (ptr, ...) @set_ord(ptr noundef %59) #43
  %104 = sub i32 %102, %103
  %105 = sdiv i32 %104, 2
  %106 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %107 = sub nsw i32 %106, %105
  %108 = add nsw i32 %107, %46
  %109 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %110 = sub nsw i32 %109, %105
  %111 = load i32, ptr @cube, align 8, !tbaa !14
  %112 = shl nsw i32 %105, 1
  %113 = sub i32 %45, %112
  %114 = add i32 %113, %111
  %115 = sext i32 %108 to i64
  %116 = shl nsw i64 %115, 2
  %117 = tail call noalias ptr @malloc(i64 noundef %116) #42
  %118 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %119 = add nsw i32 %106, -1
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds i32, ptr %118, i64 %120
  %122 = load i32, ptr %121, align 4, !tbaa !16
  %123 = add nsw i32 %108, -1
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds i32, ptr %117, i64 %124
  store i32 %122, ptr %125, align 4, !tbaa !16
  %126 = icmp slt i32 %109, %119
  br i1 %126, label %127, label %138

127:                                              ; preds = %98
  %128 = sext i32 %109 to i64
  %129 = sext i32 %105 to i64
  br label %130

130:                                              ; preds = %130, %127
  %131 = phi i64 [ %128, %127 ], [ %136, %130 ]
  %132 = getelementptr inbounds i32, ptr %118, i64 %131
  %133 = load i32, ptr %132, align 4, !tbaa !16
  %134 = sub nsw i64 %131, %129
  %135 = getelementptr inbounds i32, ptr %117, i64 %134
  store i32 %133, ptr %135, align 4, !tbaa !16
  %136 = add nsw i64 %131, 1
  %137 = icmp eq i64 %136, %120
  br i1 %137, label %138, label %130

138:                                              ; preds = %130, %98
  %139 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %140 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds i32, ptr %139, i64 %141
  %143 = load i32, ptr %142, align 4, !tbaa !16
  %144 = load ptr, ptr %0, align 8, !tbaa !61
  %145 = tail call ptr (ptr, i32, i32, ...) @sf_addcol(ptr noundef %144, i32 noundef %143, i32 noundef %45) #43
  store ptr %145, ptr %0, align 8, !tbaa !61
  %146 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 1
  %147 = load ptr, ptr %146, align 8, !tbaa !62
  %148 = tail call ptr (ptr, i32, i32, ...) @sf_addcol(ptr noundef %147, i32 noundef %143, i32 noundef %45) #43
  store ptr %148, ptr %146, align 8, !tbaa !62
  %149 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 2
  %150 = load ptr, ptr %149, align 8, !tbaa !63
  %151 = tail call ptr (ptr, i32, i32, ...) @sf_addcol(ptr noundef %150, i32 noundef %143, i32 noundef %45) #43
  store ptr %151, ptr %149, align 8, !tbaa !63
  %152 = load ptr, ptr %2, align 8, !tbaa !13
  %153 = icmp eq ptr %152, null
  br i1 %153, label %181, label %154

154:                                              ; preds = %138
  %155 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %156 = xor i32 %105, -1
  %157 = add i32 %155, %156
  %158 = sext i32 %157 to i64
  br label %159

159:                                              ; preds = %159, %154
  %160 = phi i64 [ %158, %154 ], [ %176, %159 ]
  %161 = phi ptr [ %152, %154 ], [ %179, %159 ]
  %162 = phi i32 [ %143, %154 ], [ %175, %159 ]
  %163 = load ptr, ptr %0, align 8, !tbaa !61
  %164 = load ptr, ptr %161, align 8, !tbaa !78
  %165 = tail call ptr @map_symbolic_cover(ptr noundef %163, ptr noundef %164, i32 noundef %162) #44
  store ptr %163, ptr %0, align 8, !tbaa !61
  %166 = load ptr, ptr %146, align 8, !tbaa !62
  %167 = load ptr, ptr %161, align 8, !tbaa !78
  %168 = tail call ptr @map_symbolic_cover(ptr noundef %166, ptr noundef %167, i32 noundef %162) #44
  store ptr %166, ptr %146, align 8, !tbaa !62
  %169 = load ptr, ptr %149, align 8, !tbaa !63
  %170 = load ptr, ptr %161, align 8, !tbaa !78
  %171 = tail call ptr @map_symbolic_cover(ptr noundef %169, ptr noundef %170, i32 noundef %162) #44
  store ptr %169, ptr %149, align 8, !tbaa !63
  %172 = getelementptr inbounds %struct.symbolic_struct, ptr %161, i64 0, i32 1
  %173 = load i32, ptr %172, align 8, !tbaa !79
  %174 = shl nuw i32 1, %173
  %175 = add nsw i32 %174, %162
  %176 = add i64 %160, 1
  %177 = getelementptr inbounds i32, ptr %117, i64 %160
  store i32 %174, ptr %177, align 4, !tbaa !16
  %178 = getelementptr inbounds %struct.symbolic_struct, ptr %161, i64 0, i32 4
  %179 = load ptr, ptr %178, align 8, !tbaa !13
  %180 = icmp eq ptr %179, null
  br i1 %180, label %181, label %159

181:                                              ; preds = %159, %138
  %182 = load ptr, ptr %0, align 8, !tbaa !61
  %183 = tail call ptr (ptr, ptr, ...) @sf_compress(ptr noundef %182, ptr noundef %59) #43
  store ptr %183, ptr %0, align 8, !tbaa !61
  %184 = load ptr, ptr %146, align 8, !tbaa !62
  %185 = tail call ptr (ptr, ptr, ...) @sf_compress(ptr noundef %184, ptr noundef %59) #43
  store ptr %185, ptr %146, align 8, !tbaa !62
  %186 = load ptr, ptr %149, align 8, !tbaa !63
  %187 = tail call ptr (ptr, ptr, ...) @sf_compress(ptr noundef %186, ptr noundef %59) #43
  store ptr %187, ptr %149, align 8, !tbaa !63
  %188 = load ptr, ptr %2, align 8, !tbaa !68
  %189 = load i32, ptr @cube, align 8, !tbaa !14
  %190 = tail call i32 @symbolic_hack_labels(ptr noundef nonnull %0, ptr noundef %188, ptr noundef %59, i32 noundef %114, i32 noundef %189, i32 noundef %45) #44
  tail call void (...) @setdown_cube() #43
  %191 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %192 = icmp eq ptr %191, null
  br i1 %192, label %194, label %193

193:                                              ; preds = %181
  tail call void @free(ptr noundef nonnull %191) #43
  br label %194

194:                                              ; preds = %193, %181
  store i32 %108, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  store i32 %110, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  store ptr %117, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  tail call void (...) @cube_setup() #43
  %195 = icmp eq ptr %59, null
  br i1 %195, label %197, label %196

196:                                              ; preds = %194
  tail call void @free(ptr noundef nonnull %59) #43
  br label %197

197:                                              ; preds = %196, %194
  ret i32 undef
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @map_symbolic_cover(ptr noundef readonly returned %0, ptr noundef %1, i32 noundef %2) #0 {
  %4 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %5 = load ptr, ptr %4, align 8, !tbaa !33
  %6 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %7 = load i32, ptr %6, align 4, !tbaa !31
  %8 = load i32, ptr %0, align 8, !tbaa !34
  %9 = mul nsw i32 %8, %7
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds i32, ptr %5, i64 %10
  %12 = icmp sgt i32 %9, 0
  br i1 %12, label %13, label %20

13:                                               ; preds = %13, %3
  %14 = phi ptr [ %18, %13 ], [ %5, %3 ]
  %15 = tail call i32 @form_bitvector(ptr noundef %14, i32 noundef %2, i32 noundef 0, ptr noundef %1) #44
  %16 = load i32, ptr %0, align 8, !tbaa !34
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds i32, ptr %14, i64 %17
  %19 = icmp ult ptr %18, %11
  br i1 %19, label %13, label %20

20:                                               ; preds = %13, %3
  ret ptr %0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @form_bitvector(ptr nocapture noundef %0, i32 noundef %1, i32 noundef %2, ptr noundef readonly %3) #0 {
  %5 = icmp eq ptr %3, null
  br i1 %5, label %6, label %17

6:                                                ; preds = %33, %4
  %7 = phi i32 [ %2, %4 ], [ %34, %33 ]
  %8 = add nsw i32 %7, %1
  %9 = and i32 %8, 31
  %10 = shl nuw i32 1, %9
  %11 = ashr i32 %8, 5
  %12 = add nsw i32 %11, 1
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds i32, ptr %0, i64 %13
  %15 = load i32, ptr %14, align 4, !tbaa !16
  %16 = or i32 %15, %10
  store i32 %16, ptr %14, align 4, !tbaa !16
  br label %49

17:                                               ; preds = %33, %4
  %18 = phi ptr [ %36, %33 ], [ %3, %4 ]
  %19 = phi i32 [ %34, %33 ], [ %2, %4 ]
  %20 = load i32, ptr %18, align 8, !tbaa !82
  %21 = shl nsw i32 %20, 1
  %22 = ashr i32 %20, 4
  %23 = add nsw i32 %22, 1
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds i32, ptr %0, i64 %24
  %26 = load i32, ptr %25, align 4, !tbaa !16
  %27 = and i32 %21, 30
  %28 = lshr i32 %26, %27
  %29 = and i32 %28, 3
  switch i32 %29, label %48 [
    i32 1, label %30
    i32 2, label %38
    i32 3, label %42
  ]

30:                                               ; preds = %17
  %31 = shl nsw i32 %19, 1
  %32 = getelementptr inbounds %struct.symbolic_list_struct, ptr %18, i64 0, i32 2
  br label %33

33:                                               ; preds = %42, %38, %30
  %34 = phi i32 [ %31, %30 ], [ %40, %38 ], [ %47, %42 ]
  %35 = phi ptr [ %32, %30 ], [ %41, %38 ], [ %44, %42 ]
  %36 = load ptr, ptr %35, align 8, !tbaa !85
  %37 = icmp eq ptr %36, null
  br i1 %37, label %6, label %17

38:                                               ; preds = %17
  %39 = shl nsw i32 %19, 1
  %40 = or i32 %39, 1
  %41 = getelementptr inbounds %struct.symbolic_list_struct, ptr %18, i64 0, i32 2
  br label %33

42:                                               ; preds = %17
  %43 = shl nsw i32 %19, 1
  %44 = getelementptr inbounds %struct.symbolic_list_struct, ptr %18, i64 0, i32 2
  %45 = load ptr, ptr %44, align 8, !tbaa !85
  %46 = tail call i32 @form_bitvector(ptr noundef nonnull %0, i32 noundef %1, i32 noundef %43, ptr noundef %45) #44
  %47 = or i32 %43, 1
  br label %33

48:                                               ; preds = %17
  tail call void (ptr, ...) @fatal(ptr noundef nonnull @.str.14.241) #43
  br label %49

49:                                               ; preds = %48, %6
  ret i32 undef
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @disassemble_fsm(ptr noundef %0, i32 noundef %1) #0 {
  %3 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %4 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %5 = sub nsw i32 %3, %4
  %6 = icmp eq i32 %5, 2
  br i1 %6, label %14, label %7

7:                                                ; preds = %2
  %8 = load ptr, ptr @stderr, align 8, !tbaa !13
  %9 = tail call i64 @fwrite(ptr nonnull @.str.16.242, i64 46, i64 1, ptr %8) #50
  %10 = load ptr, ptr @stderr, align 8, !tbaa !13
  %11 = tail call i64 @fwrite(ptr nonnull @.str.17.243, i64 51, i64 1, ptr %10) #50
  tail call void (ptr, ...) @fatal(ptr noundef nonnull @.str.18.244) #43
  %12 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %13 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  br label %14

14:                                               ; preds = %7, %2
  %15 = phi i32 [ %13, %7 ], [ %3, %2 ]
  %16 = phi i32 [ %12, %7 ], [ %4, %2 ]
  %17 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %18 = sext i32 %16 to i64
  %19 = getelementptr inbounds i32, ptr %17, i64 %18
  %20 = load i32, ptr %19, align 4, !tbaa !16
  %21 = add nsw i32 %15, -1
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i32, ptr %17, i64 %22
  %24 = load i32, ptr %23, align 4, !tbaa !16
  %25 = icmp slt i32 %24, %20
  br i1 %25, label %26, label %33

26:                                               ; preds = %14
  %27 = load ptr, ptr @stderr, align 8, !tbaa !13
  %28 = tail call i64 @fwrite(ptr nonnull @.str.16.242, i64 46, i64 1, ptr %27) #50
  %29 = load ptr, ptr @stderr, align 8, !tbaa !13
  %30 = tail call i64 @fwrite(ptr nonnull @.str.17.243, i64 51, i64 1, ptr %29) #50
  tail call void (ptr, ...) @fatal(ptr noundef nonnull @.str.19.245) #43
  %31 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %32 = sext i32 %31 to i64
  br label %33

33:                                               ; preds = %26, %14
  %34 = phi i64 [ %32, %26 ], [ %18, %14 ]
  %35 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %36 = getelementptr inbounds i32, ptr %35, i64 %34
  %37 = load i32, ptr %36, align 4, !tbaa !16
  %38 = load i32, ptr @cube, align 8, !tbaa !14
  %39 = icmp slt i32 %38, 33
  %40 = add nsw i32 %38, -1
  %41 = lshr i32 %40, 3
  %42 = and i32 %41, 536870908
  %43 = add nuw nsw i32 %42, 8
  %44 = select i1 %39, i32 8, i32 %43
  %45 = zext i32 %44 to i64
  %46 = tail call noalias ptr @malloc(i64 noundef %45) #42
  %47 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %46, i32 noundef %38) #43
  %48 = icmp sgt i32 %20, 0
  br i1 %48, label %49, label %62

49:                                               ; preds = %49, %33
  %50 = phi i32 [ %60, %49 ], [ 0, %33 ]
  %51 = add nsw i32 %50, %37
  %52 = and i32 %51, 31
  %53 = shl nuw i32 1, %52
  %54 = ashr i32 %51, 5
  %55 = add nsw i32 %54, 1
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i32, ptr %47, i64 %56
  %58 = load i32, ptr %57, align 4, !tbaa !16
  %59 = or i32 %58, %53
  store i32 %59, ptr %57, align 4, !tbaa !16
  %60 = add nuw nsw i32 %50, 1
  %61 = icmp eq i32 %60, %20
  br i1 %61, label %62, label %49

62:                                               ; preds = %49, %33
  %63 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %64 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %65 = add nsw i32 %64, 1
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds i32, ptr %63, i64 %66
  %68 = load i32, ptr %67, align 4, !tbaa !16
  %69 = load i32, ptr @cube, align 8, !tbaa !14
  %70 = icmp slt i32 %69, 33
  %71 = add nsw i32 %69, -1
  %72 = lshr i32 %71, 3
  %73 = and i32 %72, 536870908
  %74 = add nuw nsw i32 %73, 8
  %75 = select i1 %70, i32 8, i32 %74
  %76 = zext i32 %75 to i64
  %77 = tail call noalias ptr @malloc(i64 noundef %76) #42
  %78 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %77, i32 noundef %69) #43
  br i1 %48, label %79, label %92

79:                                               ; preds = %79, %62
  %80 = phi i32 [ %90, %79 ], [ 0, %62 ]
  %81 = add nsw i32 %80, %68
  %82 = and i32 %81, 31
  %83 = shl nuw i32 1, %82
  %84 = ashr i32 %81, 5
  %85 = add nsw i32 %84, 1
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds i32, ptr %78, i64 %86
  %88 = load i32, ptr %87, align 4, !tbaa !16
  %89 = or i32 %88, %83
  store i32 %89, ptr %87, align 4, !tbaa !16
  %90 = add nuw nsw i32 %80, 1
  %91 = icmp eq i32 %90, %20
  br i1 %91, label %92, label %79

92:                                               ; preds = %79, %62
  %93 = load i32, ptr @cube, align 8, !tbaa !14
  %94 = icmp slt i32 %93, 33
  %95 = add nsw i32 %93, -1
  %96 = lshr i32 %95, 3
  %97 = and i32 %96, 536870908
  %98 = add nuw nsw i32 %97, 8
  %99 = select i1 %94, i32 8, i32 %98
  %100 = zext i32 %99 to i64
  %101 = tail call noalias ptr @malloc(i64 noundef %100) #42
  %102 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %101, i32 noundef %93) #43
  %103 = tail call ptr (ptr, ptr, ptr, ...) @set_or(ptr noundef %102, ptr noundef %78, ptr noundef %47) #43
  %104 = load i32, ptr @cube, align 8, !tbaa !14
  %105 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 10, i32 noundef %104) #43
  br i1 %48, label %106, label %196

106:                                              ; preds = %92
  %107 = icmp eq i32 %1, 0
  br label %108

108:                                              ; preds = %192, %106
  %109 = phi ptr [ %105, %106 ], [ %193, %192 ]
  %110 = phi i32 [ 0, %106 ], [ %194, %192 ]
  %111 = load i32, ptr @cube, align 8, !tbaa !14
  %112 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 10, i32 noundef %111) #43
  %113 = load ptr, ptr %0, align 8, !tbaa !61
  %114 = getelementptr inbounds %struct.set_family, ptr %113, i64 0, i32 5
  %115 = load ptr, ptr %114, align 8, !tbaa !33
  %116 = getelementptr inbounds %struct.set_family, ptr %113, i64 0, i32 3
  %117 = load i32, ptr %116, align 4, !tbaa !31
  %118 = load i32, ptr %113, align 8, !tbaa !34
  %119 = mul nsw i32 %118, %117
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds i32, ptr %115, i64 %120
  %122 = icmp sgt i32 %119, 0
  br i1 %122, label %123, label %149

123:                                              ; preds = %108
  %124 = add nsw i32 %110, %68
  %125 = ashr i32 %124, 5
  %126 = add nsw i32 %125, 1
  %127 = sext i32 %126 to i64
  %128 = and i32 %124, 31
  %129 = shl nuw i32 1, %128
  br label %130

130:                                              ; preds = %142, %123
  %131 = phi ptr [ %112, %123 ], [ %143, %142 ]
  %132 = phi ptr [ %115, %123 ], [ %147, %142 ]
  %133 = tail call i32 (ptr, ptr, ...) @setp_implies(ptr noundef %47, ptr noundef %132) #43
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %142, label %135

135:                                              ; preds = %130
  %136 = getelementptr inbounds i32, ptr %132, i64 %127
  %137 = load i32, ptr %136, align 4, !tbaa !16
  %138 = and i32 %137, %129
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %142, label %140

140:                                              ; preds = %135
  %141 = tail call ptr (ptr, ptr, ...) @sf_addset(ptr noundef %131, ptr noundef nonnull %132) #43
  br label %142

142:                                              ; preds = %140, %135, %130
  %143 = phi ptr [ %141, %140 ], [ %131, %135 ], [ %131, %130 ]
  %144 = load ptr, ptr %0, align 8, !tbaa !61
  %145 = load i32, ptr %144, align 8, !tbaa !34
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds i32, ptr %132, i64 %146
  %148 = icmp ult ptr %147, %121
  br i1 %148, label %130, label %149

149:                                              ; preds = %142, %108
  %150 = phi ptr [ %112, %108 ], [ %143, %142 ]
  %151 = getelementptr inbounds %struct.set_family, ptr %150, i64 0, i32 3
  %152 = load i32, ptr %151, align 4, !tbaa !31
  %153 = icmp sgt i32 %152, 0
  br i1 %153, label %154, label %192

154:                                              ; preds = %149
  %155 = load i32, ptr @cube, align 8, !tbaa !14
  %156 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 0, i32 noundef %155) #43
  %157 = tail call ptr (ptr, ...) @cube1list(ptr noundef nonnull %150) #43
  %158 = tail call ptr (ptr, ...) @complement(ptr noundef %157) #43
  %159 = tail call ptr (ptr, ptr, ptr, ...) @espresso(ptr noundef nonnull %150, ptr noundef %156, ptr noundef %158) #43
  tail call void (ptr, ...) @sf_free(ptr noundef %156) #43
  tail call void (ptr, ...) @sf_free(ptr noundef %158) #43
  %160 = getelementptr inbounds %struct.set_family, ptr %159, i64 0, i32 5
  %161 = load ptr, ptr %160, align 8, !tbaa !33
  %162 = getelementptr inbounds %struct.set_family, ptr %159, i64 0, i32 3
  %163 = load i32, ptr %162, align 4, !tbaa !31
  %164 = load i32, ptr %159, align 8, !tbaa !34
  %165 = mul nsw i32 %164, %163
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds i32, ptr %161, i64 %166
  %168 = icmp sgt i32 %165, 0
  br i1 %168, label %169, label %187

169:                                              ; preds = %154
  %170 = add nsw i32 %110, %68
  %171 = and i32 %170, 31
  %172 = shl nuw i32 1, %171
  %173 = ashr i32 %170, 5
  %174 = add nsw i32 %173, 1
  %175 = sext i32 %174 to i64
  br label %176

176:                                              ; preds = %176, %169
  %177 = phi ptr [ %161, %169 ], [ %183, %176 ]
  %178 = getelementptr inbounds i32, ptr %177, i64 %175
  %179 = load i32, ptr %178, align 4, !tbaa !16
  %180 = or i32 %179, %172
  store i32 %180, ptr %178, align 4, !tbaa !16
  %181 = load i32, ptr %159, align 8, !tbaa !34
  %182 = sext i32 %181 to i64
  %183 = getelementptr inbounds i32, ptr %177, i64 %182
  %184 = icmp ult ptr %183, %167
  br i1 %184, label %176, label %185

185:                                              ; preds = %176
  %186 = load i32, ptr %162, align 4, !tbaa !31
  br label %187

187:                                              ; preds = %185, %154
  %188 = phi i32 [ %186, %185 ], [ %163, %154 ]
  %189 = tail call ptr (ptr, ptr, ...) @sf_append(ptr noundef %109, ptr noundef nonnull %159) #43
  br i1 %107, label %192, label %190

190:                                              ; preds = %187
  %191 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.20.246, i32 noundef %110, i32 noundef %152, i32 noundef %188) #44
  br label %192

192:                                              ; preds = %190, %187, %149
  %193 = phi ptr [ %189, %190 ], [ %189, %187 ], [ %109, %149 ]
  %194 = add nuw nsw i32 %110, 1
  %195 = icmp eq i32 %194, %20
  br i1 %195, label %196, label %108

196:                                              ; preds = %192, %92
  %197 = phi ptr [ %105, %92 ], [ %193, %192 ]
  %198 = load i32, ptr @cube, align 8, !tbaa !14
  %199 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 10, i32 noundef %198) #43
  %200 = load ptr, ptr %0, align 8, !tbaa !61
  %201 = getelementptr inbounds %struct.set_family, ptr %200, i64 0, i32 5
  %202 = load ptr, ptr %201, align 8, !tbaa !33
  %203 = getelementptr inbounds %struct.set_family, ptr %200, i64 0, i32 3
  %204 = load i32, ptr %203, align 4, !tbaa !31
  %205 = load i32, ptr %200, align 8, !tbaa !34
  %206 = mul nsw i32 %205, %204
  %207 = sext i32 %206 to i64
  %208 = getelementptr inbounds i32, ptr %202, i64 %207
  %209 = icmp sgt i32 %206, 0
  br i1 %209, label %210, label %224

210:                                              ; preds = %217, %196
  %211 = phi ptr [ %218, %217 ], [ %199, %196 ]
  %212 = phi ptr [ %222, %217 ], [ %202, %196 ]
  %213 = tail call i32 (ptr, ptr, ...) @setp_disjoint(ptr noundef %212, ptr noundef %78) #43
  %214 = icmp eq i32 %213, 0
  br i1 %214, label %217, label %215

215:                                              ; preds = %210
  %216 = tail call ptr (ptr, ptr, ...) @sf_addset(ptr noundef %211, ptr noundef %212) #43
  br label %217

217:                                              ; preds = %215, %210
  %218 = phi ptr [ %216, %215 ], [ %211, %210 ]
  %219 = load ptr, ptr %0, align 8, !tbaa !61
  %220 = load i32, ptr %219, align 8, !tbaa !34
  %221 = sext i32 %220 to i64
  %222 = getelementptr inbounds i32, ptr %212, i64 %221
  %223 = icmp ult ptr %222, %208
  br i1 %223, label %210, label %224

224:                                              ; preds = %217, %196
  %225 = phi ptr [ %199, %196 ], [ %218, %217 ]
  %226 = getelementptr inbounds %struct.set_family, ptr %225, i64 0, i32 3
  %227 = load i32, ptr %226, align 4, !tbaa !31
  %228 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %229 = tail call ptr (ptr, i32, i32, ...) @unravel_range(ptr noundef %225, i32 noundef %228, i32 noundef %228) #43
  %230 = getelementptr inbounds %struct.set_family, ptr %229, i64 0, i32 3
  %231 = load i32, ptr %230, align 4, !tbaa !31
  %232 = tail call ptr (ptr, ptr, ...) @sf_append(ptr noundef %197, ptr noundef %229) #43
  %233 = icmp eq i32 %1, 0
  br i1 %233, label %236, label %234

234:                                              ; preds = %224
  %235 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.21.247, i32 noundef %227, i32 noundef %231) #44
  br label %236

236:                                              ; preds = %234, %224
  br i1 %48, label %237, label %361

237:                                              ; preds = %358, %236
  %238 = phi ptr [ %.lcssa, %358 ], [ %232, %236 ]
  %239 = phi i32 [ %359, %358 ], [ 0, %236 ]
  %240 = add nsw i32 %239, %37
  %241 = ashr i32 %240, 5
  %242 = add nsw i32 %241, 1
  %243 = sext i32 %242 to i64
  %244 = and i32 %240, 31
  %245 = shl nuw i32 1, %244
  br label %246

246:                                              ; preds = %354, %237
  %247 = phi ptr [ %238, %237 ], [ %355, %354 ]
  %248 = phi i32 [ 0, %237 ], [ %356, %354 ]
  %249 = load i32, ptr @cube, align 8, !tbaa !14
  %250 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 10, i32 noundef %249) #43
  %251 = load ptr, ptr %0, align 8, !tbaa !61
  %252 = getelementptr inbounds %struct.set_family, ptr %251, i64 0, i32 5
  %253 = load ptr, ptr %252, align 8, !tbaa !33
  %254 = getelementptr inbounds %struct.set_family, ptr %251, i64 0, i32 3
  %255 = load i32, ptr %254, align 4, !tbaa !31
  %256 = load i32, ptr %251, align 8, !tbaa !34
  %257 = mul nsw i32 %256, %255
  %258 = sext i32 %257 to i64
  %259 = getelementptr inbounds i32, ptr %253, i64 %258
  %260 = icmp sgt i32 %257, 0
  br i1 %260, label %261, label %311

261:                                              ; preds = %246
  %262 = add nsw i32 %248, %68
  %263 = ashr i32 %262, 5
  %264 = add nsw i32 %263, 1
  %265 = sext i32 %264 to i64
  %266 = and i32 %262, 31
  %267 = shl nuw i32 1, %266
  br label %268

268:                                              ; preds = %304, %261
  %269 = phi ptr [ %250, %261 ], [ %305, %304 ]
  %270 = phi ptr [ %253, %261 ], [ %309, %304 ]
  %271 = tail call i32 (ptr, ptr, ...) @setp_implies(ptr noundef %47, ptr noundef %270) #43
  %272 = icmp eq i32 %271, 0
  br i1 %272, label %273, label %304

273:                                              ; preds = %268
  %274 = getelementptr inbounds i32, ptr %270, i64 %243
  %275 = load i32, ptr %274, align 4, !tbaa !16
  %276 = and i32 %275, %245
  %277 = icmp eq i32 %276, 0
  br i1 %277, label %304, label %278

278:                                              ; preds = %273
  %279 = getelementptr inbounds i32, ptr %270, i64 %265
  %280 = load i32, ptr %279, align 4, !tbaa !16
  %281 = and i32 %280, %267
  %282 = icmp eq i32 %281, 0
  br i1 %282, label %304, label %283

283:                                              ; preds = %278
  %284 = load i32, ptr %270, align 4, !tbaa !16
  %285 = shl i32 %284, 5
  %286 = and i32 %285, 32736
  %287 = icmp ult i32 %286, 33
  %288 = add nsw i32 %286, -1
  %289 = lshr i32 %288, 3
  %290 = and i32 %289, 536870908
  %291 = add nuw nsw i32 %290, 8
  %292 = select i1 %287, i32 8, i32 %291
  %293 = zext i32 %292 to i64
  %294 = tail call noalias ptr @malloc(i64 noundef %293) #42
  %295 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %294, ptr noundef nonnull %270) #43
  %296 = tail call ptr (ptr, ptr, ptr, ...) @set_diff(ptr noundef %295, ptr noundef %295, ptr noundef %103) #43
  %297 = getelementptr inbounds i32, ptr %295, i64 %243
  %298 = load i32, ptr %297, align 4, !tbaa !16
  %299 = or i32 %298, %245
  store i32 %299, ptr %297, align 4, !tbaa !16
  %300 = getelementptr inbounds i32, ptr %295, i64 %265
  %301 = load i32, ptr %300, align 4, !tbaa !16
  %302 = or i32 %301, %267
  store i32 %302, ptr %300, align 4, !tbaa !16
  %303 = tail call ptr (ptr, ptr, ...) @sf_addset(ptr noundef %269, ptr noundef %295) #43
  tail call void @free(ptr noundef %295) #43
  br label %304

304:                                              ; preds = %283, %278, %273, %268
  %305 = phi ptr [ %269, %268 ], [ %303, %283 ], [ %269, %278 ], [ %269, %273 ]
  %306 = load ptr, ptr %0, align 8, !tbaa !61
  %307 = load i32, ptr %306, align 8, !tbaa !34
  %308 = sext i32 %307 to i64
  %309 = getelementptr inbounds i32, ptr %270, i64 %308
  %310 = icmp ult ptr %309, %259
  br i1 %310, label %268, label %311

311:                                              ; preds = %304, %246
  %312 = phi ptr [ %250, %246 ], [ %305, %304 ]
  %313 = getelementptr inbounds %struct.set_family, ptr %312, i64 0, i32 3
  %314 = load i32, ptr %313, align 4, !tbaa !31
  %315 = icmp sgt i32 %314, 0
  br i1 %315, label %316, label %354

316:                                              ; preds = %311
  %317 = load i32, ptr @cube, align 8, !tbaa !14
  %318 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 0, i32 noundef %317) #43
  %319 = tail call ptr (ptr, ...) @cube1list(ptr noundef nonnull %312) #43
  %320 = tail call ptr (ptr, ...) @complement(ptr noundef %319) #43
  %321 = tail call ptr (ptr, ptr, ptr, ...) @espresso(ptr noundef nonnull %312, ptr noundef %318, ptr noundef %320) #43
  tail call void (ptr, ...) @sf_free(ptr noundef %318) #43
  tail call void (ptr, ...) @sf_free(ptr noundef %320) #43
  %322 = getelementptr inbounds %struct.set_family, ptr %321, i64 0, i32 5
  %323 = load ptr, ptr %322, align 8, !tbaa !33
  %324 = getelementptr inbounds %struct.set_family, ptr %321, i64 0, i32 3
  %325 = load i32, ptr %324, align 4, !tbaa !31
  %326 = load i32, ptr %321, align 8, !tbaa !34
  %327 = mul nsw i32 %326, %325
  %328 = sext i32 %327 to i64
  %329 = getelementptr inbounds i32, ptr %323, i64 %328
  %330 = icmp sgt i32 %327, 0
  br i1 %330, label %331, label %349

331:                                              ; preds = %316
  %332 = add nsw i32 %248, %68
  %333 = and i32 %332, 31
  %334 = shl nuw i32 1, %333
  %335 = ashr i32 %332, 5
  %336 = add nsw i32 %335, 1
  %337 = sext i32 %336 to i64
  br label %338

338:                                              ; preds = %338, %331
  %339 = phi ptr [ %323, %331 ], [ %345, %338 ]
  %340 = getelementptr inbounds i32, ptr %339, i64 %337
  %341 = load i32, ptr %340, align 4, !tbaa !16
  %342 = or i32 %341, %334
  store i32 %342, ptr %340, align 4, !tbaa !16
  %343 = load i32, ptr %321, align 8, !tbaa !34
  %344 = sext i32 %343 to i64
  %345 = getelementptr inbounds i32, ptr %339, i64 %344
  %346 = icmp ult ptr %345, %329
  br i1 %346, label %338, label %347

347:                                              ; preds = %338
  %348 = load i32, ptr %324, align 4, !tbaa !31
  br label %349

349:                                              ; preds = %347, %316
  %350 = phi i32 [ %348, %347 ], [ %325, %316 ]
  %351 = tail call ptr (ptr, ptr, ...) @sf_append(ptr noundef %247, ptr noundef nonnull %321) #43
  br i1 %233, label %354, label %352

352:                                              ; preds = %349
  %353 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.22.248, i32 noundef %239, i32 noundef %248, i32 noundef %314, i32 noundef %350) #44
  br label %354

354:                                              ; preds = %352, %349, %311
  %355 = phi ptr [ %351, %352 ], [ %351, %349 ], [ %247, %311 ]
  %356 = add nuw nsw i32 %248, 1
  %357 = icmp eq i32 %356, %20
  br i1 %357, label %358, label %246

358:                                              ; preds = %354
  %.lcssa = phi ptr [ %355, %354 ]
  %359 = add nuw nsw i32 %239, 1
  %360 = icmp eq i32 %359, %20
  br i1 %360, label %361, label %237

361:                                              ; preds = %358, %236
  %362 = phi ptr [ %232, %236 ], [ %.lcssa, %358 ]
  %363 = icmp eq ptr %103, null
  br i1 %363, label %365, label %364

364:                                              ; preds = %361
  tail call void @free(ptr noundef nonnull %103) #43
  br label %365

365:                                              ; preds = %364, %361
  %366 = icmp eq ptr %47, null
  br i1 %366, label %368, label %367

367:                                              ; preds = %365
  tail call void @free(ptr noundef nonnull %47) #43
  br label %368

368:                                              ; preds = %367, %365
  %369 = icmp eq ptr %78, null
  br i1 %369, label %371, label %370

370:                                              ; preds = %368
  tail call void @free(ptr noundef nonnull %78) #43
  br label %371

371:                                              ; preds = %370, %368
  %372 = load ptr, ptr %0, align 8, !tbaa !61
  tail call void (ptr, ...) @sf_free(ptr noundef %372) #43
  store ptr %362, ptr %0, align 8, !tbaa !61
  %373 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 1
  %374 = load ptr, ptr %373, align 8, !tbaa !62
  tail call void (ptr, ...) @sf_free(ptr noundef %374) #43
  %375 = load i32, ptr @cube, align 8, !tbaa !14
  %376 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 0, i32 noundef %375) #43
  store ptr %376, ptr %373, align 8, !tbaa !62
  tail call void (...) @setdown_cube() #43
  %377 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %378 = icmp eq ptr %377, null
  br i1 %378, label %380, label %379

379:                                              ; preds = %371
  tail call void @free(ptr noundef nonnull %377) #43
  br label %380

380:                                              ; preds = %379, %371
  store i32 %16, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %381 = add nsw i32 %16, 3
  store i32 %381, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %382 = sext i32 %381 to i64
  %383 = shl nsw i64 %382, 2
  %384 = tail call noalias ptr @malloc(i64 noundef %383) #42
  store ptr %384, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %385 = getelementptr inbounds i32, ptr %384, i64 %18
  store i32 %20, ptr %385, align 4, !tbaa !16
  %386 = add nsw i32 %16, 1
  %387 = sext i32 %386 to i64
  %388 = getelementptr inbounds i32, ptr %384, i64 %387
  store i32 %20, ptr %388, align 4, !tbaa !16
  %389 = sub nsw i32 %24, %20
  %390 = add nsw i32 %16, 2
  %391 = sext i32 %390 to i64
  %392 = getelementptr inbounds i32, ptr %384, i64 %391
  store i32 %389, ptr %392, align 4, !tbaa !16
  tail call void (...) @cube_setup() #43
  %393 = load ptr, ptr %0, align 8, !tbaa !61
  %394 = getelementptr inbounds %struct.set_family, ptr %393, i64 0, i32 5
  %395 = load ptr, ptr %394, align 8, !tbaa !33
  %396 = getelementptr inbounds %struct.set_family, ptr %393, i64 0, i32 3
  %397 = load i32, ptr %396, align 4, !tbaa !31
  %398 = load i32, ptr %393, align 8, !tbaa !34
  %399 = mul nsw i32 %398, %397
  %400 = sext i32 %399 to i64
  %401 = getelementptr inbounds i32, ptr %395, i64 %400
  %402 = icmp sgt i32 %399, 0
  br i1 %402, label %403, label %412

403:                                              ; preds = %403, %380
  %404 = phi ptr [ %410, %403 ], [ %395, %380 ]
  %405 = load ptr, ptr @stdout, align 8, !tbaa !13
  %406 = tail call i32 (ptr, ptr, ptr, ptr, ...) @kiss_print_cube(ptr noundef %405, ptr noundef nonnull %0, ptr noundef %404, ptr noundef nonnull @.str.23.249) #43
  %407 = load ptr, ptr %0, align 8, !tbaa !61
  %408 = load i32, ptr %407, align 8, !tbaa !34
  %409 = sext i32 %408 to i64
  %410 = getelementptr inbounds i32, ptr %404, i64 %409
  %411 = icmp ult ptr %410, %401
  br i1 %411, label %403, label %412

412:                                              ; preds = %403, %380
  ret i32 undef
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @sm_maximal_independent_set(ptr nocapture noundef readonly %0, ptr noundef readonly %1) #0 {
  %3 = tail call ptr (...) @solution_alloc() #43
  %4 = tail call ptr (...) @sm_alloc() #43
  %5 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 4
  %6 = load ptr, ptr %5, align 8, !tbaa !13
  %7 = icmp eq ptr %6, null
  br i1 %7, label %98, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 3
  %10 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 2
  %11 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 1
  br label %12

12:                                               ; preds = %94, %8
  %13 = phi ptr [ %6, %8 ], [ %96, %94 ]
  %14 = getelementptr inbounds %struct.sm_col_struct, ptr %13, i64 0, i32 3
  %15 = load ptr, ptr %14, align 8, !tbaa !13
  %16 = icmp eq ptr %15, null
  br i1 %16, label %94, label %17

17:                                               ; preds = %12
  %18 = load i32, ptr %9, align 8, !tbaa !104
  %19 = load ptr, ptr %10, align 8, !tbaa !105
  br label %20

20:                                               ; preds = %47, %17
  %21 = phi ptr [ %49, %47 ], [ %15, %17 ]
  %22 = getelementptr inbounds %struct.sm_element_struct, ptr %21, i64 0, i32 1
  %23 = load i32, ptr %22, align 4, !tbaa !103
  %24 = icmp sgt i32 %23, -1
  tail call void @llvm.assume(i1 %24)
  %25 = icmp slt i32 %23, %18
  tail call void @llvm.assume(i1 %25)
  %26 = zext i32 %23 to i64
  %27 = getelementptr inbounds ptr, ptr %19, i64 %26
  %28 = load ptr, ptr %27, align 8, !tbaa !13
  %29 = getelementptr inbounds %struct.sm_col_struct, ptr %28, i64 0, i32 3
  %30 = load ptr, ptr %29, align 8, !tbaa !13
  %31 = icmp eq ptr %30, null
  br i1 %31, label %47, label %32

32:                                               ; preds = %20
  %33 = load i32, ptr %11, align 8, !tbaa !107
  %34 = load ptr, ptr %0, align 8, !tbaa !108
  br label %35

35:                                               ; preds = %35, %32
  %36 = phi ptr [ %30, %32 ], [ %45, %35 ]
  %37 = load i32, ptr %36, align 8, !tbaa !42
  %38 = icmp sgt i32 %37, -1
  tail call void @llvm.assume(i1 %38)
  %39 = icmp slt i32 %37, %33
  tail call void @llvm.assume(i1 %39)
  %40 = zext i32 %37 to i64
  %41 = getelementptr inbounds ptr, ptr %34, i64 %40
  %42 = load ptr, ptr %41, align 8, !tbaa !13
  %43 = getelementptr inbounds %struct.sm_col_struct, ptr %42, i64 0, i32 2
  store i32 0, ptr %43, align 8, !tbaa !123
  %44 = getelementptr inbounds %struct.sm_element_struct, ptr %36, i64 0, i32 2
  %45 = load ptr, ptr %44, align 8, !tbaa !13
  %46 = icmp eq ptr %45, null
  br i1 %46, label %47, label %35

47:                                               ; preds = %35, %20
  %48 = getelementptr inbounds %struct.sm_element_struct, ptr %21, i64 0, i32 4
  %49 = load ptr, ptr %48, align 8, !tbaa !13
  %50 = icmp eq ptr %49, null
  br i1 %50, label %51, label %20

51:                                               ; preds = %90, %47
  %52 = phi ptr [ %92, %90 ], [ %15, %47 ]
  %53 = getelementptr inbounds %struct.sm_element_struct, ptr %52, i64 0, i32 1
  %54 = load i32, ptr %53, align 4, !tbaa !103
  %55 = icmp sgt i32 %54, -1
  tail call void @llvm.assume(i1 %55)
  %56 = load i32, ptr %9, align 8, !tbaa !104
  %57 = icmp slt i32 %54, %56
  tail call void @llvm.assume(i1 %57)
  %58 = load ptr, ptr %10, align 8, !tbaa !105
  %59 = zext i32 %54 to i64
  %60 = getelementptr inbounds ptr, ptr %58, i64 %59
  %61 = load ptr, ptr %60, align 8, !tbaa !13
  %62 = getelementptr inbounds %struct.sm_col_struct, ptr %61, i64 0, i32 3
  %63 = load ptr, ptr %62, align 8, !tbaa !13
  %64 = icmp eq ptr %63, null
  br i1 %64, label %90, label %65

65:                                               ; preds = %86, %51
  %66 = phi ptr [ %88, %86 ], [ %63, %51 ]
  %67 = load i32, ptr %66, align 8, !tbaa !42
  %68 = icmp sgt i32 %67, -1
  br i1 %68, label %69, label %77

69:                                               ; preds = %65
  %70 = load i32, ptr %11, align 8, !tbaa !107
  %71 = icmp slt i32 %67, %70
  br i1 %71, label %72, label %77

72:                                               ; preds = %69
  %73 = load ptr, ptr %0, align 8, !tbaa !108
  %74 = zext i32 %67 to i64
  %75 = getelementptr inbounds ptr, ptr %73, i64 %74
  %76 = load ptr, ptr %75, align 8, !tbaa !13
  br label %77

77:                                               ; preds = %72, %69, %65
  %78 = phi ptr [ %76, %72 ], [ null, %69 ], [ null, %65 ]
  %79 = getelementptr inbounds %struct.sm_col_struct, ptr %78, i64 0, i32 2
  %80 = load i32, ptr %79, align 8, !tbaa !123
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %86

82:                                               ; preds = %77
  store i32 1, ptr %79, align 8, !tbaa !123
  %83 = load i32, ptr %13, align 8, !tbaa !110
  %84 = load i32, ptr %78, align 8, !tbaa !110
  %85 = tail call ptr (ptr, i32, i32, ...) @sm_insert(ptr noundef %4, i32 noundef %83, i32 noundef %84) #43
  br label %86

86:                                               ; preds = %82, %77
  %87 = getelementptr inbounds %struct.sm_element_struct, ptr %66, i64 0, i32 2
  %88 = load ptr, ptr %87, align 8, !tbaa !13
  %89 = icmp eq ptr %88, null
  br i1 %89, label %90, label %65

90:                                               ; preds = %86, %51
  %91 = getelementptr inbounds %struct.sm_element_struct, ptr %52, i64 0, i32 4
  %92 = load ptr, ptr %91, align 8, !tbaa !13
  %93 = icmp eq ptr %92, null
  br i1 %93, label %94, label %51

94:                                               ; preds = %90, %12
  %95 = getelementptr inbounds %struct.sm_col_struct, ptr %13, i64 0, i32 5
  %96 = load ptr, ptr %95, align 8, !tbaa !13
  %97 = icmp eq ptr %96, null
  br i1 %97, label %98, label %12

98:                                               ; preds = %94, %2
  %99 = getelementptr inbounds %struct.sm_matrix_struct, ptr %4, i64 0, i32 6
  %100 = load i32, ptr %99, align 8, !tbaa !99
  %101 = icmp sgt i32 %100, 0
  br i1 %101, label %102, label %178

102:                                              ; preds = %98
  %103 = getelementptr inbounds %struct.sm_matrix_struct, ptr %4, i64 0, i32 4
  %104 = icmp eq ptr %1, null
  %105 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 1
  %106 = getelementptr inbounds %struct.pla_types_struct, ptr %3, i64 0, i32 1
  br label %107

107:                                              ; preds = %175, %102
  %108 = load ptr, ptr %103, align 8, !tbaa !124
  %109 = getelementptr inbounds %struct.sm_col_struct, ptr %108, i64 0, i32 5
  %110 = load ptr, ptr %109, align 8, !tbaa !125
  %111 = icmp eq ptr %110, null
  br i1 %111, label %124, label %112

112:                                              ; preds = %112, %107
  %113 = phi ptr [ %122, %112 ], [ %110, %107 ]
  %114 = phi ptr [ %120, %112 ], [ %108, %107 ]
  %115 = getelementptr inbounds %struct.sm_col_struct, ptr %113, i64 0, i32 1
  %116 = load i32, ptr %115, align 4, !tbaa !109
  %117 = getelementptr inbounds %struct.sm_col_struct, ptr %114, i64 0, i32 1
  %118 = load i32, ptr %117, align 4, !tbaa !109
  %119 = icmp slt i32 %116, %118
  %120 = select i1 %119, ptr %113, ptr %114
  %121 = getelementptr inbounds %struct.sm_col_struct, ptr %113, i64 0, i32 5
  %122 = load ptr, ptr %121, align 8, !tbaa !125
  %123 = icmp eq ptr %122, null
  br i1 %123, label %124, label %112

124:                                              ; preds = %112, %107
  %125 = phi ptr [ %108, %107 ], [ %120, %112 ]
  %126 = load i32, ptr %125, align 8, !tbaa !110
  br i1 %104, label %157, label %127

127:                                              ; preds = %124
  %128 = icmp sgt i32 %126, -1
  tail call void @llvm.assume(i1 %128)
  %129 = load i32, ptr %105, align 8, !tbaa !107
  %130 = icmp slt i32 %126, %129
  tail call void @llvm.assume(i1 %130)
  %131 = load ptr, ptr %0, align 8, !tbaa !108
  %132 = zext i32 %126 to i64
  %133 = getelementptr inbounds ptr, ptr %131, i64 %132
  %134 = load ptr, ptr %133, align 8, !tbaa !13
  %135 = getelementptr inbounds %struct.sm_col_struct, ptr %134, i64 0, i32 3
  %136 = load ptr, ptr %135, align 8, !tbaa !101
  %137 = getelementptr inbounds %struct.sm_element_struct, ptr %136, i64 0, i32 1
  %138 = load i32, ptr %137, align 4, !tbaa !103
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds i32, ptr %1, i64 %139
  %141 = load i32, ptr %140, align 4, !tbaa !16
  %142 = getelementptr inbounds %struct.sm_element_struct, ptr %136, i64 0, i32 4
  %143 = load ptr, ptr %142, align 8, !tbaa !106
  %144 = icmp eq ptr %143, null
  br i1 %144, label %157, label %145

145:                                              ; preds = %145, %127
  %146 = phi ptr [ %155, %145 ], [ %143, %127 ]
  %147 = phi i32 [ %153, %145 ], [ %141, %127 ]
  %148 = getelementptr inbounds %struct.sm_element_struct, ptr %146, i64 0, i32 1
  %149 = load i32, ptr %148, align 4, !tbaa !103
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds i32, ptr %1, i64 %150
  %152 = load i32, ptr %151, align 4, !tbaa !16
  %153 = tail call i32 @llvm.smin.i32(i32 %152, i32 %147)
  %154 = getelementptr inbounds %struct.sm_element_struct, ptr %146, i64 0, i32 4
  %155 = load ptr, ptr %154, align 8, !tbaa !106
  %156 = icmp eq ptr %155, null
  br i1 %156, label %157, label %145

157:                                              ; preds = %145, %127, %124
  %158 = phi i32 [ 1, %124 ], [ %141, %127 ], [ %153, %145 ]
  %159 = load i32, ptr %106, align 8, !tbaa !126
  %160 = add nsw i32 %159, %158
  store i32 %160, ptr %106, align 8, !tbaa !126
  %161 = load ptr, ptr %3, align 8, !tbaa !120
  %162 = tail call ptr (ptr, i32, ...) @sm_row_insert(ptr noundef %161, i32 noundef %126) #43
  %163 = tail call ptr (ptr, ...) @sm_row_dup(ptr noundef nonnull %125) #43
  %164 = getelementptr inbounds %struct.sm_col_struct, ptr %163, i64 0, i32 3
  %165 = load ptr, ptr %164, align 8, !tbaa !13
  %166 = icmp eq ptr %165, null
  br i1 %166, label %175, label %167

167:                                              ; preds = %167, %157
  %168 = phi ptr [ %173, %167 ], [ %165, %157 ]
  %169 = getelementptr inbounds %struct.sm_element_struct, ptr %168, i64 0, i32 1
  %170 = load i32, ptr %169, align 4, !tbaa !103
  tail call void (ptr, i32, ...) @sm_delrow(ptr noundef %4, i32 noundef %170) #43
  %171 = load i32, ptr %169, align 4, !tbaa !103
  tail call void (ptr, i32, ...) @sm_delcol(ptr noundef %4, i32 noundef %171) #43
  %172 = getelementptr inbounds %struct.sm_element_struct, ptr %168, i64 0, i32 4
  %173 = load ptr, ptr %172, align 8, !tbaa !13
  %174 = icmp eq ptr %173, null
  br i1 %174, label %175, label %167

175:                                              ; preds = %167, %157
  tail call void (ptr, ...) @sm_row_free(ptr noundef %163) #43
  %176 = load i32, ptr %99, align 8, !tbaa !99
  %177 = icmp sgt i32 %176, 0
  br i1 %177, label %107, label %178

178:                                              ; preds = %175, %98
  tail call void (ptr, ...) @sm_free(ptr noundef nonnull %4) #43
  ret ptr %3
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite)
declare void @llvm.assume(i1 noundef) #25

; Function Attrs: nounwind optsize uwtable
define internal ptr @irredundant(ptr noundef %0, ptr noundef %1) #0 {
  tail call void @mark_irredundant(ptr noundef %0, ptr noundef %1) #44
  %3 = tail call ptr (ptr, ...) @sf_inactive(ptr noundef %0) #43
  ret ptr %3
}

; Function Attrs: nounwind optsize uwtable
define internal void @mark_irredundant(ptr noundef %0, ptr noundef %1) #0 {
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #45
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #45
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #45
  call void @irred_split_cover(ptr noundef %0, ptr noundef %1, ptr noundef nonnull %3, ptr noundef nonnull %4, ptr noundef nonnull %5) #44
  %6 = load ptr, ptr %3, align 8, !tbaa !13
  %7 = load ptr, ptr %5, align 8, !tbaa !13
  %8 = tail call ptr @irred_derive_table(ptr noundef %1, ptr noundef %6, ptr noundef %7) #44
  %9 = tail call ptr (ptr, ptr, i32, i32, ...) @sm_minimum_cover(ptr noundef %8, ptr noundef null, i32 noundef 1, i32 noundef 0) #43
  %10 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %11 = load ptr, ptr %10, align 8, !tbaa !33
  %12 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %13 = load i32, ptr %12, align 4, !tbaa !31
  %14 = load i32, ptr %0, align 8, !tbaa !34
  %15 = mul nsw i32 %14, %13
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i32, ptr %11, i64 %16
  %18 = icmp sgt i32 %15, 0
  br i1 %18, label %19, label %27

19:                                               ; preds = %19, %2
  %20 = phi ptr [ %25, %19 ], [ %11, %2 ]
  %21 = load i32, ptr %20, align 4, !tbaa !16
  %22 = and i32 %21, -9217
  store i32 %22, ptr %20, align 4, !tbaa !16
  %23 = load i32, ptr %0, align 8, !tbaa !34
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds i32, ptr %20, i64 %24
  %26 = icmp ult ptr %25, %17
  br i1 %26, label %19, label %27

27:                                               ; preds = %19, %2
  %28 = getelementptr inbounds %struct.set_family, ptr %6, i64 0, i32 5
  %29 = load ptr, ptr %28, align 8, !tbaa !33
  %30 = getelementptr inbounds %struct.set_family, ptr %6, i64 0, i32 3
  %31 = load i32, ptr %30, align 4, !tbaa !31
  %32 = load i32, ptr %6, align 8, !tbaa !34
  %33 = mul nsw i32 %32, %31
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds i32, ptr %29, i64 %34
  %36 = icmp sgt i32 %33, 0
  br i1 %36, label %37, label %51

37:                                               ; preds = %37, %27
  %38 = phi ptr [ %49, %37 ], [ %29, %27 ]
  %39 = load i32, ptr %0, align 8, !tbaa !34
  %40 = load i32, ptr %38, align 4, !tbaa !16
  %41 = lshr i32 %40, 16
  %42 = mul i32 %41, %39
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds i32, ptr %11, i64 %43
  %45 = load i32, ptr %44, align 4, !tbaa !16
  %46 = or i32 %45, 9216
  store i32 %46, ptr %44, align 4, !tbaa !16
  %47 = load i32, ptr %6, align 8, !tbaa !34
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds i32, ptr %38, i64 %48
  %50 = icmp ult ptr %49, %35
  br i1 %50, label %37, label %51

51:                                               ; preds = %37, %27
  %52 = getelementptr inbounds %struct.sm_col_struct, ptr %9, i64 0, i32 3
  %53 = load ptr, ptr %52, align 8, !tbaa !13
  %54 = icmp eq ptr %53, null
  br i1 %54, label %68, label %55

55:                                               ; preds = %55, %51
  %56 = phi ptr [ %66, %55 ], [ %53, %51 ]
  %57 = load i32, ptr %0, align 8, !tbaa !34
  %58 = getelementptr inbounds %struct.sm_element_struct, ptr %56, i64 0, i32 1
  %59 = load i32, ptr %58, align 4, !tbaa !103
  %60 = mul nsw i32 %59, %57
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i32, ptr %11, i64 %61
  %63 = load i32, ptr %62, align 4, !tbaa !16
  %64 = or i32 %63, 8192
  store i32 %64, ptr %62, align 4, !tbaa !16
  %65 = getelementptr inbounds %struct.sm_element_struct, ptr %56, i64 0, i32 4
  %66 = load ptr, ptr %65, align 8, !tbaa !13
  %67 = icmp eq ptr %66, null
  br i1 %67, label %68, label %55

68:                                               ; preds = %55, %51
  %69 = load i32, ptr @debug, align 4, !tbaa !16
  %70 = and i32 %69, 32
  %71 = icmp eq i32 %70, 0
  %72 = load ptr, ptr %4, align 8, !tbaa !13
  br i1 %71, label %85, label %73

73:                                               ; preds = %68
  %74 = load i32, ptr %12, align 4, !tbaa !31
  %75 = load i32, ptr %30, align 4, !tbaa !31
  %76 = getelementptr inbounds %struct.set_family, ptr %72, i64 0, i32 3
  %77 = load i32, ptr %76, align 4, !tbaa !31
  %78 = getelementptr inbounds %struct.set_family, ptr %7, i64 0, i32 3
  %79 = load i32, ptr %78, align 4, !tbaa !31
  %80 = add nsw i32 %79, %77
  %81 = getelementptr inbounds %struct.sm_col_struct, ptr %9, i64 0, i32 1
  %82 = load i32, ptr %81, align 4, !tbaa !109
  %83 = add nsw i32 %82, %75
  %84 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.256, i32 noundef %74, i32 noundef %75, i32 noundef %80, i32 noundef %77, i32 noundef %79, i32 noundef %82, i32 noundef %83, i32 noundef 0) #44
  br label %85

85:                                               ; preds = %73, %68
  tail call void (ptr, ...) @sf_free(ptr noundef nonnull %6) #43
  tail call void (ptr, ...) @sf_free(ptr noundef %72) #43
  tail call void (ptr, ...) @sf_free(ptr noundef %7) #43
  tail call void (ptr, ...) @sm_free(ptr noundef %8) #43
  tail call void (ptr, ...) @sm_row_free(ptr noundef %9) #43
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #45
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #45
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #45
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @irred_split_cover(ptr noundef %0, ptr noundef %1, ptr nocapture noundef %2, ptr nocapture noundef %3, ptr nocapture noundef %4) #0 {
  %6 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %7 = load ptr, ptr %6, align 8, !tbaa !33
  %8 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %9 = load i32, ptr %8, align 4, !tbaa !31
  %10 = load i32, ptr %0, align 8, !tbaa !34
  %11 = mul nsw i32 %10, %9
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds i32, ptr %7, i64 %12
  %14 = icmp sgt i32 %11, 0
  br i1 %14, label %15, label %27

15:                                               ; preds = %15, %5
  %16 = phi i32 [ %22, %15 ], [ 0, %5 ]
  %17 = phi ptr [ %25, %15 ], [ %7, %5 ]
  %18 = load i32, ptr %17, align 4, !tbaa !16
  %19 = and i32 %18, 65535
  %20 = shl i32 %16, 16
  %21 = or i32 %19, %20
  store i32 %21, ptr %17, align 4, !tbaa !16
  %22 = add nuw nsw i32 %16, 1
  %23 = load i32, ptr %0, align 8, !tbaa !34
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds i32, ptr %17, i64 %24
  %26 = icmp ult ptr %25, %13
  br i1 %26, label %15, label %27

27:                                               ; preds = %15, %5
  %28 = load i32, ptr @cube, align 8, !tbaa !14
  %29 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 10, i32 noundef %28) #43
  store ptr %29, ptr %2, align 8, !tbaa !13
  %30 = load i32, ptr @cube, align 8, !tbaa !14
  %31 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 10, i32 noundef %30) #43
  store ptr %31, ptr %3, align 8, !tbaa !13
  %32 = load i32, ptr @cube, align 8, !tbaa !14
  %33 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 10, i32 noundef %32) #43
  store ptr %33, ptr %4, align 8, !tbaa !13
  %34 = load i32, ptr @cube, align 8, !tbaa !14
  %35 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 10, i32 noundef %34) #43
  %36 = tail call ptr (ptr, ptr, ...) @cube2list(ptr noundef nonnull %0, ptr noundef %1) #43
  %37 = load ptr, ptr %6, align 8, !tbaa !33
  %38 = load i32, ptr %8, align 4, !tbaa !31
  %39 = load i32, ptr %0, align 8, !tbaa !34
  %40 = mul nsw i32 %39, %38
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, ptr %37, i64 %41
  %43 = icmp sgt i32 %40, 0
  br i1 %43, label %44, label %77

44:                                               ; preds = %72, %27
  %45 = phi ptr [ %56, %72 ], [ %35, %27 ]
  %46 = phi ptr [ %75, %72 ], [ %37, %27 ]
  %47 = tail call ptr (ptr, ptr, ...) @cofactor(ptr noundef %36, ptr noundef %46) #43
  %48 = tail call i32 @tautology(ptr noundef %47) #44, !range !67
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %52, label %50

50:                                               ; preds = %44
  %51 = tail call ptr (ptr, ptr, ...) @sf_addset(ptr noundef %45, ptr noundef %46) #43
  br label %55

52:                                               ; preds = %44
  %53 = load ptr, ptr %2, align 8, !tbaa !13
  %54 = tail call ptr (ptr, ptr, ...) @sf_addset(ptr noundef %53, ptr noundef %46) #43
  store ptr %54, ptr %2, align 8, !tbaa !13
  br label %55

55:                                               ; preds = %52, %50
  %56 = phi ptr [ %51, %50 ], [ %45, %52 ]
  %57 = load i32, ptr @debug, align 4, !tbaa !16
  %58 = and i32 %57, 16384
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %72, label %60

60:                                               ; preds = %55
  %61 = getelementptr inbounds %struct.set_family, ptr %56, i64 0, i32 3
  %62 = load i32, ptr %61, align 4, !tbaa !31
  %63 = load ptr, ptr %2, align 8, !tbaa !13
  %64 = getelementptr inbounds %struct.set_family, ptr %63, i64 0, i32 3
  %65 = load i32, ptr %64, align 4, !tbaa !31
  %66 = load i32, ptr %8, align 4, !tbaa !31
  %67 = add i32 %65, %62
  %68 = sub i32 %66, %67
  %69 = tail call i64 (...) @util_cpu_time() #43
  %70 = tail call ptr @util_print_time(i64 noundef %69) #43
  %71 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1.262, i32 noundef %62, i32 noundef %65, i32 noundef %68, ptr noundef %70) #44
  br label %72

72:                                               ; preds = %60, %55
  %73 = load i32, ptr %0, align 8, !tbaa !34
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds i32, ptr %46, i64 %74
  %76 = icmp ult ptr %75, %42
  br i1 %76, label %44, label %77

77:                                               ; preds = %72, %27
  %78 = phi ptr [ %35, %27 ], [ %56, %72 ]
  %79 = load ptr, ptr %36, align 8, !tbaa !13
  %80 = icmp eq ptr %79, null
  br i1 %80, label %82, label %81

81:                                               ; preds = %77
  tail call void @free(ptr noundef nonnull %79) #43
  br label %82

82:                                               ; preds = %81, %77
  tail call void @free(ptr noundef nonnull %36) #43
  %83 = load ptr, ptr %2, align 8, !tbaa !13
  %84 = tail call ptr (ptr, ptr, ...) @cube2list(ptr noundef %83, ptr noundef %1) #43
  %85 = getelementptr inbounds %struct.set_family, ptr %78, i64 0, i32 5
  %86 = load ptr, ptr %85, align 8, !tbaa !33
  %87 = getelementptr inbounds %struct.set_family, ptr %78, i64 0, i32 3
  %88 = load i32, ptr %87, align 4, !tbaa !31
  %89 = load i32, ptr %78, align 8, !tbaa !34
  %90 = mul nsw i32 %89, %88
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds i32, ptr %86, i64 %91
  %93 = icmp sgt i32 %90, 0
  br i1 %93, label %94, label %123

94:                                               ; preds = %118, %82
  %95 = phi ptr [ %121, %118 ], [ %86, %82 ]
  %96 = tail call ptr (ptr, ptr, ...) @cofactor(ptr noundef %84, ptr noundef %95) #43
  %97 = tail call i32 @tautology(ptr noundef %96) #44, !range !67
  %98 = icmp eq i32 %97, 0
  %99 = select i1 %98, ptr %4, ptr %3
  %100 = load ptr, ptr %99, align 8, !tbaa !13
  %101 = tail call ptr (ptr, ptr, ...) @sf_addset(ptr noundef %100, ptr noundef %95) #43
  store ptr %101, ptr %99, align 8, !tbaa !13
  %102 = load i32, ptr @debug, align 4, !tbaa !16
  %103 = and i32 %102, 16384
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %118, label %105

105:                                              ; preds = %94
  %106 = load ptr, ptr %4, align 8, !tbaa !13
  %107 = getelementptr inbounds %struct.set_family, ptr %106, i64 0, i32 3
  %108 = load i32, ptr %107, align 4, !tbaa !31
  %109 = load ptr, ptr %3, align 8, !tbaa !13
  %110 = getelementptr inbounds %struct.set_family, ptr %109, i64 0, i32 3
  %111 = load i32, ptr %110, align 4, !tbaa !31
  %112 = load i32, ptr %87, align 4, !tbaa !31
  %113 = add i32 %111, %108
  %114 = sub i32 %112, %113
  %115 = tail call i64 (...) @util_cpu_time() #43
  %116 = tail call ptr @util_print_time(i64 noundef %115) #43
  %117 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.263, i32 noundef %108, i32 noundef %111, i32 noundef %114, ptr noundef %116) #44
  br label %118

118:                                              ; preds = %105, %94
  %119 = load i32, ptr %78, align 8, !tbaa !34
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds i32, ptr %95, i64 %120
  %122 = icmp ult ptr %121, %92
  br i1 %122, label %94, label %123

123:                                              ; preds = %118, %82
  %124 = load ptr, ptr %84, align 8, !tbaa !13
  %125 = icmp eq ptr %124, null
  br i1 %125, label %127, label %126

126:                                              ; preds = %123
  tail call void @free(ptr noundef nonnull %124) #43
  br label %127

127:                                              ; preds = %126, %123
  tail call void @free(ptr noundef nonnull %84) #43
  tail call void (ptr, ...) @sf_free(ptr noundef nonnull %78) #43
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @irred_derive_table(ptr noundef %0, ptr noundef %1, ptr noundef %2) #0 {
  %4 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %5 = load ptr, ptr %4, align 8, !tbaa !33
  %6 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %7 = load i32, ptr %6, align 4, !tbaa !31
  %8 = load i32, ptr %0, align 8, !tbaa !34
  %9 = mul nsw i32 %8, %7
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds i32, ptr %5, i64 %10
  %12 = icmp sgt i32 %9, 0
  br i1 %12, label %13, label %21

13:                                               ; preds = %13, %3
  %14 = phi ptr [ %19, %13 ], [ %5, %3 ]
  %15 = load i32, ptr %14, align 4, !tbaa !16
  %16 = and i32 %15, -4097
  store i32 %16, ptr %14, align 4, !tbaa !16
  %17 = load i32, ptr %0, align 8, !tbaa !34
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i32, ptr %14, i64 %18
  %20 = icmp ult ptr %19, %11
  br i1 %20, label %13, label %21

21:                                               ; preds = %13, %3
  %22 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 5
  %23 = load ptr, ptr %22, align 8, !tbaa !33
  %24 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 3
  %25 = load i32, ptr %24, align 4, !tbaa !31
  %26 = load i32, ptr %1, align 8, !tbaa !34
  %27 = mul nsw i32 %26, %25
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds i32, ptr %23, i64 %28
  %30 = icmp sgt i32 %27, 0
  br i1 %30, label %31, label %39

31:                                               ; preds = %31, %21
  %32 = phi ptr [ %37, %31 ], [ %23, %21 ]
  %33 = load i32, ptr %32, align 4, !tbaa !16
  %34 = and i32 %33, -4097
  store i32 %34, ptr %32, align 4, !tbaa !16
  %35 = load i32, ptr %1, align 8, !tbaa !34
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, ptr %32, i64 %36
  %38 = icmp ult ptr %37, %29
  br i1 %38, label %31, label %39

39:                                               ; preds = %31, %21
  %40 = getelementptr inbounds %struct.set_family, ptr %2, i64 0, i32 5
  %41 = load ptr, ptr %40, align 8, !tbaa !33
  %42 = getelementptr inbounds %struct.set_family, ptr %2, i64 0, i32 3
  %43 = load i32, ptr %42, align 4, !tbaa !31
  %44 = load i32, ptr %2, align 8, !tbaa !34
  %45 = mul nsw i32 %44, %43
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds i32, ptr %41, i64 %46
  %48 = icmp sgt i32 %45, 0
  br i1 %48, label %49, label %57

49:                                               ; preds = %49, %39
  %50 = phi ptr [ %55, %49 ], [ %41, %39 ]
  %51 = load i32, ptr %50, align 4, !tbaa !16
  %52 = or i32 %51, 4096
  store i32 %52, ptr %50, align 4, !tbaa !16
  %53 = load i32, ptr %2, align 8, !tbaa !34
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds i32, ptr %50, i64 %54
  %56 = icmp ult ptr %55, %47
  br i1 %56, label %49, label %57

57:                                               ; preds = %49, %39
  %58 = tail call ptr (ptr, ptr, ptr, ...) @cube3list(ptr noundef nonnull %0, ptr noundef nonnull %1, ptr noundef nonnull %2) #43
  %59 = tail call ptr (...) @sm_alloc() #43
  %60 = load ptr, ptr %40, align 8, !tbaa !33
  %61 = load i32, ptr %42, align 4, !tbaa !31
  %62 = load i32, ptr %2, align 8, !tbaa !34
  %63 = mul nsw i32 %62, %61
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds i32, ptr %60, i64 %64
  %66 = icmp sgt i32 %63, 0
  br i1 %66, label %67, label %110

67:                                               ; preds = %57
  %68 = getelementptr inbounds %struct.sm_matrix_struct, ptr %59, i64 0, i32 6
  %69 = getelementptr inbounds %struct.sm_matrix_struct, ptr %59, i64 0, i32 9
  br label %70

70:                                               ; preds = %103, %67
  %71 = phi i32 [ 0, %67 ], [ %105, %103 ]
  %72 = phi i32 [ 0, %67 ], [ %104, %103 ]
  %73 = phi ptr [ %60, %67 ], [ %108, %103 ]
  %74 = load i32, ptr %73, align 4, !tbaa !16
  %75 = lshr i32 %74, 16
  store i32 %75, ptr @Rp_current, align 4, !tbaa !16
  %76 = tail call ptr (ptr, ptr, ...) @cofactor(ptr noundef %58, ptr noundef nonnull %73) #43
  tail call fastcc void @ftautology(ptr noundef %76, ptr noundef %59) #44
  %77 = load i32, ptr %73, align 4, !tbaa !16
  %78 = and i32 %77, -4097
  store i32 %78, ptr %73, align 4, !tbaa !16
  %79 = load i32, ptr @debug, align 4, !tbaa !16
  %80 = and i32 %79, 16384
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %90, label %82

82:                                               ; preds = %70
  %83 = load i32, ptr %42, align 4, !tbaa !31
  %84 = sub nsw i32 %83, %71
  %85 = load i32, ptr %68, align 8, !tbaa !99
  %86 = load i32, ptr %69, align 8, !tbaa !111
  %87 = tail call i64 (...) @util_cpu_time() #43
  %88 = tail call ptr @util_print_time(i64 noundef %87) #43
  %89 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.257, i32 noundef %71, i32 noundef %83, i32 noundef %84, i32 noundef %85, i32 noundef %86, ptr noundef %88) #44
  br label %90

90:                                               ; preds = %82, %70
  %91 = load i32, ptr %68, align 8, !tbaa !99
  %92 = sub nsw i32 %91, %72
  %93 = icmp sgt i32 %92, 1000
  br i1 %93, label %94, label %103

94:                                               ; preds = %90
  %95 = tail call i32 (ptr, ...) @sm_row_dominance(ptr noundef nonnull %59) #43
  %96 = load i32, ptr %68, align 8, !tbaa !99
  %97 = load i32, ptr @debug, align 4, !tbaa !16
  %98 = and i32 %97, 16384
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %103, label %100

100:                                              ; preds = %94
  %101 = load i32, ptr %69, align 8, !tbaa !111
  %102 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.258, i32 noundef %96, i32 noundef %101) #44
  br label %103

103:                                              ; preds = %100, %94, %90
  %104 = phi i32 [ %96, %100 ], [ %96, %94 ], [ %72, %90 ]
  %105 = add nuw nsw i32 %71, 1
  %106 = load i32, ptr %2, align 8, !tbaa !34
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds i32, ptr %73, i64 %107
  %109 = icmp ult ptr %108, %65
  br i1 %109, label %70, label %110

110:                                              ; preds = %103, %57
  %111 = load ptr, ptr %58, align 8, !tbaa !13
  %112 = icmp eq ptr %111, null
  br i1 %112, label %114, label %113

113:                                              ; preds = %110
  tail call void @free(ptr noundef nonnull %111) #43
  br label %114

114:                                              ; preds = %113, %110
  tail call void @free(ptr noundef nonnull %58) #43
  ret ptr %59
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @ftautology(ptr noundef %0, ptr noundef %1) unnamed_addr #0 {
  %3 = load i32, ptr @debug, align 4, !tbaa !16
  %4 = and i32 %3, 512
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %2
  %7 = load i32, ptr @ftautology.ftaut_level, align 4, !tbaa !16
  %8 = add nsw i32 %7, 1
  store i32 %8, ptr @ftautology.ftaut_level, align 4, !tbaa !16
  tail call void (ptr, ptr, i32, ...) @debug_print(ptr noundef %0, ptr noundef nonnull @.str.11.259, i32 noundef %7) #43
  br label %9

9:                                                ; preds = %6, %2
  %10 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 11), align 8, !tbaa !7
  %11 = load ptr, ptr %10, align 8, !tbaa !13
  %12 = getelementptr inbounds ptr, ptr %10, i64 1
  %13 = load ptr, ptr %12, align 8, !tbaa !13
  %14 = getelementptr inbounds ptr, ptr %0, i64 2
  %15 = getelementptr inbounds ptr, ptr %0, i64 3
  %16 = load ptr, ptr %14, align 8, !tbaa !13
  %17 = icmp eq ptr %16, null
  br i1 %17, label %18, label %25

18:                                               ; preds = %38, %9
  tail call void (ptr, ...) @massive_count(ptr noundef %0) #43
  %19 = load i32, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 5), align 4, !tbaa !23
  %20 = load i32, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 4), align 8, !tbaa !22
  %21 = icmp eq i32 %19, %20
  br i1 %21, label %42, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds ptr, ptr %0, i64 1
  %24 = ptrtoint ptr %0 to i64
  br label %76

25:                                               ; preds = %38, %9
  %26 = phi ptr [ %40, %38 ], [ %16, %9 ]
  %27 = phi ptr [ %39, %38 ], [ %15, %9 ]
  %28 = load i32, ptr %26, align 4, !tbaa !16
  %29 = and i32 %28, 4096
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %38

31:                                               ; preds = %25
  %32 = load ptr, ptr %0, align 8, !tbaa !13
  %33 = tail call i32 (ptr, ptr, ...) @full_row(ptr noundef nonnull %26, ptr noundef %32) #43
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %38, label %35

35:                                               ; preds = %31
  %36 = load ptr, ptr %0, align 8, !tbaa !13
  %37 = icmp eq ptr %36, null
  br i1 %37, label %184, label %150

38:                                               ; preds = %31, %25
  %39 = getelementptr inbounds ptr, ptr %27, i64 1
  %40 = load ptr, ptr %27, align 8, !tbaa !13
  %41 = icmp eq ptr %40, null
  br i1 %41, label %18, label %25

42:                                               ; preds = %146, %18
  %43 = getelementptr inbounds %struct.sm_matrix_struct, ptr %1, i64 0, i32 5
  %44 = load ptr, ptr %43, align 8, !tbaa !127
  %45 = icmp eq ptr %44, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %42
  %47 = load i32, ptr %44, align 8, !tbaa !110
  %48 = add nsw i32 %47, 1
  br label %49

49:                                               ; preds = %46, %42
  %50 = phi i32 [ %48, %46 ], [ 0, %42 ]
  %51 = load i32, ptr @Rp_current, align 4, !tbaa !16
  %52 = tail call ptr (ptr, i32, i32, ...) @sm_insert(ptr noundef nonnull %1, i32 noundef %50, i32 noundef %51) #43
  %53 = load ptr, ptr %14, align 8, !tbaa !13
  %54 = icmp eq ptr %53, null
  br i1 %54, label %73, label %55

55:                                               ; preds = %69, %49
  %56 = phi ptr [ %71, %69 ], [ %53, %49 ]
  %57 = phi ptr [ %70, %69 ], [ %15, %49 ]
  %58 = load i32, ptr %56, align 4, !tbaa !16
  %59 = and i32 %58, 4096
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %69, label %61

61:                                               ; preds = %55
  %62 = load ptr, ptr %0, align 8, !tbaa !13
  %63 = tail call i32 (ptr, ptr, ...) @full_row(ptr noundef nonnull %56, ptr noundef %62) #43
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %69, label %65

65:                                               ; preds = %61
  %66 = load i32, ptr %56, align 4, !tbaa !16
  %67 = lshr i32 %66, 16
  %68 = tail call ptr (ptr, i32, i32, ...) @sm_insert(ptr noundef %1, i32 noundef %50, i32 noundef %67) #43
  br label %69

69:                                               ; preds = %65, %61, %55
  %70 = getelementptr inbounds ptr, ptr %57, i64 1
  %71 = load ptr, ptr %57, align 8, !tbaa !13
  %72 = icmp eq ptr %71, null
  br i1 %72, label %73, label %55

73:                                               ; preds = %69, %49
  %74 = load ptr, ptr %0, align 8, !tbaa !13
  %75 = icmp eq ptr %74, null
  br i1 %75, label %184, label %150

76:                                               ; preds = %146, %22
  %77 = phi i32 [ %19, %22 ], [ %147, %146 ]
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %152, label %79

79:                                               ; preds = %76
  %80 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 13), align 8, !tbaa !52
  %81 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %13, ptr noundef %80) #43
  %82 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %83 = icmp sgt i32 %82, 0
  br i1 %83, label %84, label %87

84:                                               ; preds = %79
  %85 = load ptr, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 3), align 8, !tbaa !26
  %86 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8
  br label %90

87:                                               ; preds = %113, %79
  %88 = load ptr, ptr %14, align 8, !tbaa !13
  %89 = icmp eq ptr %88, null
  br i1 %89, label %133, label %118

90:                                               ; preds = %113, %84
  %91 = phi i32 [ %82, %84 ], [ %114, %113 ]
  %92 = phi i64 [ 0, %84 ], [ %115, %113 ]
  %93 = getelementptr inbounds i32, ptr %85, i64 %92
  %94 = load i32, ptr %93, align 4, !tbaa !16
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %113, label %96

96:                                               ; preds = %90
  %97 = load i32, ptr %13, align 4, !tbaa !16
  %98 = getelementptr inbounds ptr, ptr %86, i64 %92
  %99 = load ptr, ptr %98, align 8, !tbaa !13
  %100 = and i32 %97, 1023
  %101 = zext i32 %100 to i64
  br label %102

102:                                              ; preds = %102, %96
  %103 = phi i64 [ %109, %102 ], [ %101, %96 ]
  %104 = getelementptr inbounds i32, ptr %13, i64 %103
  %105 = load i32, ptr %104, align 4, !tbaa !16
  %106 = getelementptr inbounds i32, ptr %99, i64 %103
  %107 = load i32, ptr %106, align 4, !tbaa !16
  %108 = or i32 %107, %105
  store i32 %108, ptr %104, align 4, !tbaa !16
  %109 = add nsw i64 %103, -1
  %110 = icmp ugt i64 %103, 1
  br i1 %110, label %102, label %111

111:                                              ; preds = %102
  %112 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  br label %113

113:                                              ; preds = %111, %90
  %114 = phi i32 [ %112, %111 ], [ %91, %90 ]
  %115 = add nuw nsw i64 %92, 1
  %116 = sext i32 %114 to i64
  %117 = icmp slt i64 %115, %116
  br i1 %117, label %90, label %87

118:                                              ; preds = %128, %87
  %119 = phi ptr [ %131, %128 ], [ %88, %87 ]
  %120 = phi ptr [ %130, %128 ], [ %15, %87 ]
  %121 = phi ptr [ %129, %128 ], [ %14, %87 ]
  %122 = load ptr, ptr %0, align 8, !tbaa !13
  %123 = tail call ptr (ptr, ptr, ptr, ...) @set_or(ptr noundef %11, ptr noundef nonnull %119, ptr noundef %122) #43
  %124 = tail call i32 (ptr, ptr, ...) @setp_implies(ptr noundef %13, ptr noundef %123) #43
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %128, label %126

126:                                              ; preds = %118
  %127 = getelementptr inbounds ptr, ptr %121, i64 1
  store ptr %119, ptr %121, align 8, !tbaa !13
  br label %128

128:                                              ; preds = %126, %118
  %129 = phi ptr [ %127, %126 ], [ %121, %118 ]
  %130 = getelementptr inbounds ptr, ptr %120, i64 1
  %131 = load ptr, ptr %120, align 8, !tbaa !13
  %132 = icmp eq ptr %131, null
  br i1 %132, label %133, label %118

133:                                              ; preds = %128, %87
  %134 = phi ptr [ %14, %87 ], [ %129, %128 ]
  %135 = getelementptr inbounds ptr, ptr %134, i64 1
  store ptr null, ptr %134, align 8, !tbaa !13
  store ptr %135, ptr %23, align 8, !tbaa !13
  %136 = load i32, ptr @debug, align 4, !tbaa !16
  %137 = and i32 %136, 512
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %146, label %139

139:                                              ; preds = %133
  %140 = load i32, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 5), align 4, !tbaa !23
  %141 = ptrtoint ptr %135 to i64
  %142 = sub i64 %141, %24
  %143 = ashr exact i64 %142, 3
  %144 = add nsw i64 %143, -3
  %145 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.10.260, i32 noundef %140, i64 noundef %144) #44
  br label %146

146:                                              ; preds = %139, %133
  tail call void (ptr, ...) @massive_count(ptr noundef nonnull %0) #43
  %147 = load i32, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 5), align 4, !tbaa !23
  %148 = load i32, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 4), align 8, !tbaa !22
  %149 = icmp eq i32 %147, %148
  br i1 %149, label %42, label %76

150:                                              ; preds = %73, %35
  %151 = phi ptr [ %36, %35 ], [ %74, %73 ]
  tail call void @free(ptr noundef nonnull %151) #43
  br label %184

152:                                              ; preds = %76
  %153 = load i32, ptr @cube, align 8, !tbaa !14
  %154 = icmp slt i32 %153, 33
  %155 = add nsw i32 %153, -1
  %156 = lshr i32 %155, 3
  %157 = and i32 %156, 536870908
  %158 = add nuw nsw i32 %157, 8
  %159 = select i1 %154, i32 8, i32 %158
  %160 = zext i32 %159 to i64
  %161 = tail call noalias ptr @malloc(i64 noundef %160) #42
  %162 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %161, i32 noundef %153) #43
  %163 = load i32, ptr @cube, align 8, !tbaa !14
  %164 = icmp slt i32 %163, 33
  %165 = add nsw i32 %163, -1
  %166 = lshr i32 %165, 3
  %167 = and i32 %166, 536870908
  %168 = add nuw nsw i32 %167, 8
  %169 = select i1 %164, i32 8, i32 %168
  %170 = zext i32 %169 to i64
  %171 = tail call noalias ptr @malloc(i64 noundef %170) #42
  %172 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %171, i32 noundef %163) #43
  %173 = tail call i32 (ptr, ptr, ptr, i32, ...) @binate_split_select(ptr noundef %0, ptr noundef %162, ptr noundef %172, i32 noundef 512) #43
  %174 = tail call ptr (ptr, ptr, i32, ...) @scofactor(ptr noundef %0, ptr noundef %162, i32 noundef %173) #43
  tail call fastcc void @ftautology(ptr noundef %174, ptr noundef %1) #44
  %175 = tail call ptr (ptr, ptr, i32, ...) @scofactor(ptr noundef %0, ptr noundef %172, i32 noundef %173) #43
  tail call fastcc void @ftautology(ptr noundef %175, ptr noundef %1) #44
  %176 = load ptr, ptr %0, align 8, !tbaa !13
  %177 = icmp eq ptr %176, null
  br i1 %177, label %179, label %178

178:                                              ; preds = %152
  tail call void @free(ptr noundef nonnull %176) #43
  br label %179

179:                                              ; preds = %178, %152
  tail call void @free(ptr noundef nonnull %0) #43
  %180 = icmp eq ptr %162, null
  br i1 %180, label %182, label %181

181:                                              ; preds = %179
  tail call void @free(ptr noundef nonnull %162) #43
  br label %182

182:                                              ; preds = %181, %179
  %183 = icmp eq ptr %172, null
  br i1 %183, label %186, label %184

184:                                              ; preds = %182, %150, %73, %35
  %185 = phi ptr [ %0, %35 ], [ %0, %73 ], [ %0, %150 ], [ %172, %182 ]
  tail call void @free(ptr noundef nonnull %185) #43
  br label %186

186:                                              ; preds = %184, %182
  %187 = load i32, ptr @debug, align 4, !tbaa !16
  %188 = and i32 %187, 512
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %198, label %190

190:                                              ; preds = %186
  %191 = load i32, ptr @ftautology.ftaut_level, align 4, !tbaa !16
  %192 = add nsw i32 %191, -1
  store i32 %192, ptr @ftautology.ftaut_level, align 4, !tbaa !16
  %193 = getelementptr inbounds %struct.sm_matrix_struct, ptr %1, i64 0, i32 6
  %194 = load i32, ptr %193, align 8, !tbaa !99
  %195 = getelementptr inbounds %struct.sm_matrix_struct, ptr %1, i64 0, i32 9
  %196 = load i32, ptr %195, align 8, !tbaa !111
  %197 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.12.261, i32 noundef %192, i32 noundef %194, i32 noundef %196) #44
  br label %198

198:                                              ; preds = %190, %186
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @tautology(ptr noundef %0) #0 {
  %2 = load i32, ptr @debug, align 4, !tbaa !16
  %3 = and i32 %2, 512
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = load i32, ptr @tautology.taut_level, align 4, !tbaa !16
  %7 = add nsw i32 %6, 1
  store i32 %7, ptr @tautology.taut_level, align 4, !tbaa !16
  tail call void (ptr, ptr, i32, ...) @debug_print(ptr noundef %0, ptr noundef nonnull @.str.5.264, i32 noundef %6) #43
  br label %8

8:                                                ; preds = %5, %1
  %9 = tail call i32 @taut_special_cases(ptr noundef %0) #44, !range !128
  %10 = icmp eq i32 %9, 2
  br i1 %10, label %11, label %50

11:                                               ; preds = %8
  %12 = load i32, ptr @cube, align 8, !tbaa !14
  %13 = icmp slt i32 %12, 33
  %14 = add nsw i32 %12, -1
  %15 = lshr i32 %14, 3
  %16 = and i32 %15, 536870908
  %17 = add nuw nsw i32 %16, 8
  %18 = select i1 %13, i32 8, i32 %17
  %19 = zext i32 %18 to i64
  %20 = tail call noalias ptr @malloc(i64 noundef %19) #42
  %21 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %20, i32 noundef %12) #43
  %22 = load i32, ptr @cube, align 8, !tbaa !14
  %23 = icmp slt i32 %22, 33
  %24 = add nsw i32 %22, -1
  %25 = lshr i32 %24, 3
  %26 = and i32 %25, 536870908
  %27 = add nuw nsw i32 %26, 8
  %28 = select i1 %23, i32 8, i32 %27
  %29 = zext i32 %28 to i64
  %30 = tail call noalias ptr @malloc(i64 noundef %29) #42
  %31 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %30, i32 noundef %22) #43
  %32 = tail call i32 (ptr, ptr, ptr, i32, ...) @binate_split_select(ptr noundef %0, ptr noundef %21, ptr noundef %31, i32 noundef 512) #43
  %33 = tail call ptr (ptr, ptr, i32, ...) @scofactor(ptr noundef %0, ptr noundef %21, i32 noundef %32) #43
  %34 = tail call i32 @tautology(ptr noundef %33) #44, !range !67
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %39, label %36

36:                                               ; preds = %11
  %37 = tail call ptr (ptr, ptr, i32, ...) @scofactor(ptr noundef %0, ptr noundef %31, i32 noundef %32) #43
  %38 = tail call i32 @tautology(ptr noundef %37) #44, !range !67
  br label %39

39:                                               ; preds = %36, %11
  %40 = phi i32 [ 0, %11 ], [ %38, %36 ]
  %41 = load ptr, ptr %0, align 8, !tbaa !13
  %42 = icmp eq ptr %41, null
  br i1 %42, label %44, label %43

43:                                               ; preds = %39
  tail call void @free(ptr noundef nonnull %41) #43
  br label %44

44:                                               ; preds = %43, %39
  tail call void @free(ptr noundef nonnull %0) #43
  %45 = icmp eq ptr %21, null
  br i1 %45, label %47, label %46

46:                                               ; preds = %44
  tail call void @free(ptr noundef nonnull %21) #43
  br label %47

47:                                               ; preds = %46, %44
  %48 = icmp eq ptr %31, null
  br i1 %48, label %50, label %49

49:                                               ; preds = %47
  tail call void @free(ptr noundef nonnull %31) #43
  br label %50

50:                                               ; preds = %49, %47, %8
  %51 = phi i32 [ %40, %49 ], [ %40, %47 ], [ %9, %8 ]
  %52 = load i32, ptr @debug, align 4, !tbaa !16
  %53 = and i32 %52, 512
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %61, label %55

55:                                               ; preds = %50
  %56 = load i32, ptr @tautology.taut_level, align 4, !tbaa !16
  %57 = add nsw i32 %56, -1
  store i32 %57, ptr @tautology.taut_level, align 4, !tbaa !16
  %58 = icmp eq i32 %51, 0
  %59 = select i1 %58, ptr @.str.7.265, ptr @.str.8.266
  %60 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.6.267, i32 noundef %57, ptr noundef nonnull %59) #44
  br label %61

61:                                               ; preds = %55, %50
  ret i32 %51
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @taut_special_cases(ptr noundef %0) #0 {
  %2 = alloca ptr, align 8
  %3 = alloca ptr, align 8
  %4 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 11), align 8, !tbaa !7
  %5 = load ptr, ptr %4, align 8, !tbaa !13
  %6 = getelementptr inbounds ptr, ptr %4, i64 1
  %7 = load ptr, ptr %6, align 8, !tbaa !13
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #45
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #45
  %8 = getelementptr inbounds ptr, ptr %0, i64 2
  br label %9

9:                                                ; preds = %17, %1
  %10 = phi ptr [ %8, %1 ], [ %18, %17 ]
  %11 = load ptr, ptr %10, align 8, !tbaa !13
  %12 = icmp eq ptr %11, null
  br i1 %12, label %13, label %17

13:                                               ; preds = %9
  %14 = getelementptr inbounds ptr, ptr %0, i64 3
  %15 = getelementptr inbounds ptr, ptr %0, i64 1
  %16 = ptrtoint ptr %0 to i64
  br label %27

17:                                               ; preds = %9
  %18 = getelementptr inbounds ptr, ptr %10, i64 1
  %19 = load ptr, ptr %0, align 8, !tbaa !13
  %20 = tail call i32 (ptr, ptr, ...) @full_row(ptr noundef nonnull %11, ptr noundef %19) #43
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %9, label %22

22:                                               ; preds = %17
  %23 = load ptr, ptr %0, align 8, !tbaa !13
  %24 = icmp eq ptr %23, null
  br i1 %24, label %26, label %25

25:                                               ; preds = %22
  tail call void @free(ptr noundef nonnull %23) #43
  br label %26

26:                                               ; preds = %25, %22
  tail call void @free(ptr noundef nonnull %0) #43
  br label %195

27:                                               ; preds = %155, %13
  %28 = load ptr, ptr %0, align 8, !tbaa !13
  %29 = load i32, ptr %28, align 4, !tbaa !16
  %30 = and i32 %29, 1023
  %31 = zext i32 %30 to i64
  br label %32

32:                                               ; preds = %32, %27
  %33 = phi i64 [ %37, %32 ], [ %31, %27 ]
  %34 = getelementptr inbounds i32, ptr %28, i64 %33
  %35 = load i32, ptr %34, align 4, !tbaa !16
  %36 = getelementptr inbounds i32, ptr %5, i64 %33
  store i32 %35, ptr %36, align 4, !tbaa !16
  %37 = add nsw i64 %33, -1
  %38 = icmp eq i64 %33, 0
  br i1 %38, label %39, label %32

39:                                               ; preds = %32
  %40 = load ptr, ptr %8, align 8, !tbaa !13
  %41 = icmp eq ptr %40, null
  br i1 %41, label %61, label %46

42:                                               ; preds = %52
  %43 = getelementptr inbounds ptr, ptr %48, i64 1
  %44 = load ptr, ptr %48, align 8, !tbaa !13
  %45 = icmp eq ptr %44, null
  br i1 %45, label %61, label %46

46:                                               ; preds = %42, %39
  %47 = phi ptr [ %44, %42 ], [ %40, %39 ]
  %48 = phi ptr [ %43, %42 ], [ %14, %39 ]
  %49 = load i32, ptr %5, align 4, !tbaa !16
  %50 = and i32 %49, 1023
  %51 = zext i32 %50 to i64
  br label %52

52:                                               ; preds = %52, %46
  %53 = phi i64 [ %59, %52 ], [ %51, %46 ]
  %54 = getelementptr inbounds i32, ptr %5, i64 %53
  %55 = load i32, ptr %54, align 4, !tbaa !16
  %56 = getelementptr inbounds i32, ptr %47, i64 %53
  %57 = load i32, ptr %56, align 4, !tbaa !16
  %58 = or i32 %57, %55
  store i32 %58, ptr %54, align 4, !tbaa !16
  %59 = add nsw i64 %53, -1
  %60 = icmp ugt i64 %53, 1
  br i1 %60, label %52, label %42

61:                                               ; preds = %42, %39
  %62 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %63 = tail call i32 (ptr, ptr, ...) @setp_equal(ptr noundef nonnull %5, ptr noundef %62) #43
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %70

65:                                               ; preds = %61
  %66 = load ptr, ptr %0, align 8, !tbaa !13
  %67 = icmp eq ptr %66, null
  br i1 %67, label %69, label %68

68:                                               ; preds = %65
  tail call void @free(ptr noundef nonnull %66) #43
  br label %69

69:                                               ; preds = %68, %65
  tail call void @free(ptr noundef nonnull %0) #43
  br label %195

70:                                               ; preds = %61
  tail call void (ptr, ...) @massive_count(ptr noundef nonnull %0) #43
  %71 = load i32, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 5), align 4, !tbaa !23
  %72 = load i32, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 4), align 8, !tbaa !22
  %73 = icmp eq i32 %71, %72
  br i1 %73, label %74, label %79

74:                                               ; preds = %70
  %75 = load ptr, ptr %0, align 8, !tbaa !13
  %76 = icmp eq ptr %75, null
  br i1 %76, label %78, label %77

77:                                               ; preds = %74
  tail call void @free(ptr noundef nonnull %75) #43
  br label %78

78:                                               ; preds = %77, %74
  tail call void @free(ptr noundef nonnull %0) #43
  br label %195

79:                                               ; preds = %70
  %80 = icmp eq i32 %72, 1
  br i1 %80, label %81, label %86

81:                                               ; preds = %79
  %82 = load ptr, ptr %0, align 8, !tbaa !13
  %83 = icmp eq ptr %82, null
  br i1 %83, label %85, label %84

84:                                               ; preds = %81
  tail call void @free(ptr noundef nonnull %82) #43
  br label %85

85:                                               ; preds = %84, %81
  tail call void @free(ptr noundef nonnull %0) #43
  br label %195

86:                                               ; preds = %79
  %87 = icmp eq i32 %71, 0
  br i1 %87, label %156, label %88

88:                                               ; preds = %86
  %89 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 13), align 8, !tbaa !52
  %90 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef nonnull %5, ptr noundef %89) #43
  %91 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %92 = icmp sgt i32 %91, 0
  br i1 %92, label %93, label %96

93:                                               ; preds = %88
  %94 = load ptr, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 3), align 8, !tbaa !26
  %95 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8
  br label %99

96:                                               ; preds = %122, %88
  %97 = load ptr, ptr %8, align 8, !tbaa !13
  %98 = icmp eq ptr %97, null
  br i1 %98, label %142, label %127

99:                                               ; preds = %122, %93
  %100 = phi i32 [ %91, %93 ], [ %123, %122 ]
  %101 = phi i64 [ 0, %93 ], [ %124, %122 ]
  %102 = getelementptr inbounds i32, ptr %94, i64 %101
  %103 = load i32, ptr %102, align 4, !tbaa !16
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %122, label %105

105:                                              ; preds = %99
  %106 = load i32, ptr %5, align 4, !tbaa !16
  %107 = getelementptr inbounds ptr, ptr %95, i64 %101
  %108 = load ptr, ptr %107, align 8, !tbaa !13
  %109 = and i32 %106, 1023
  %110 = zext i32 %109 to i64
  br label %111

111:                                              ; preds = %111, %105
  %112 = phi i64 [ %118, %111 ], [ %110, %105 ]
  %113 = getelementptr inbounds i32, ptr %5, i64 %112
  %114 = load i32, ptr %113, align 4, !tbaa !16
  %115 = getelementptr inbounds i32, ptr %108, i64 %112
  %116 = load i32, ptr %115, align 4, !tbaa !16
  %117 = or i32 %116, %114
  store i32 %117, ptr %113, align 4, !tbaa !16
  %118 = add nsw i64 %112, -1
  %119 = icmp ugt i64 %112, 1
  br i1 %119, label %111, label %120

120:                                              ; preds = %111
  %121 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  br label %122

122:                                              ; preds = %120, %99
  %123 = phi i32 [ %121, %120 ], [ %100, %99 ]
  %124 = add nuw nsw i64 %101, 1
  %125 = sext i32 %123 to i64
  %126 = icmp slt i64 %124, %125
  br i1 %126, label %99, label %96

127:                                              ; preds = %137, %96
  %128 = phi ptr [ %140, %137 ], [ %97, %96 ]
  %129 = phi ptr [ %139, %137 ], [ %14, %96 ]
  %130 = phi ptr [ %138, %137 ], [ %8, %96 ]
  %131 = load ptr, ptr %0, align 8, !tbaa !13
  %132 = tail call ptr (ptr, ptr, ptr, ...) @set_or(ptr noundef %7, ptr noundef nonnull %128, ptr noundef %131) #43
  %133 = tail call i32 (ptr, ptr, ...) @setp_implies(ptr noundef %5, ptr noundef %132) #43
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %137, label %135

135:                                              ; preds = %127
  %136 = getelementptr inbounds ptr, ptr %130, i64 1
  store ptr %128, ptr %130, align 8, !tbaa !13
  br label %137

137:                                              ; preds = %135, %127
  %138 = phi ptr [ %136, %135 ], [ %130, %127 ]
  %139 = getelementptr inbounds ptr, ptr %129, i64 1
  %140 = load ptr, ptr %129, align 8, !tbaa !13
  %141 = icmp eq ptr %140, null
  br i1 %141, label %142, label %127

142:                                              ; preds = %137, %96
  %143 = phi ptr [ %8, %96 ], [ %138, %137 ]
  %144 = getelementptr inbounds ptr, ptr %143, i64 1
  store ptr null, ptr %143, align 8, !tbaa !13
  store ptr %144, ptr %15, align 8, !tbaa !13
  %145 = load i32, ptr @debug, align 4, !tbaa !16
  %146 = and i32 %145, 512
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %155, label %148

148:                                              ; preds = %142
  %149 = load i32, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 5), align 4, !tbaa !23
  %150 = ptrtoint ptr %144 to i64
  %151 = sub i64 %150, %16
  %152 = ashr exact i64 %151, 3
  %153 = add nsw i64 %152, -3
  %154 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.10.260, i32 noundef %149, i64 noundef %153) #44
  br label %155

155:                                              ; preds = %148, %142
  br label %27

156:                                              ; preds = %86
  %157 = load ptr, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 1), align 8, !tbaa !53
  %158 = load i32, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 6), align 8, !tbaa !28
  %159 = sext i32 %158 to i64
  %160 = getelementptr inbounds i32, ptr %157, i64 %159
  %161 = load i32, ptr %160, align 4, !tbaa !16
  %162 = sext i32 %161 to i64
  %163 = load ptr, ptr %15, align 8, !tbaa !13
  %164 = ptrtoint ptr %163 to i64
  %165 = sub i64 %164, %16
  %166 = ashr exact i64 %165, 3
  %167 = add nsw i64 %166, -3
  %168 = sdiv i64 %167, 2
  %169 = icmp sgt i64 %168, %162
  br i1 %169, label %170, label %195

170:                                              ; preds = %156
  %171 = load i32, ptr @debug, align 4, !tbaa !16
  %172 = and i32 %171, 512
  %173 = call i32 (ptr, ptr, ptr, i32, ...) @cubelist_partition(ptr noundef nonnull %0, ptr noundef nonnull %2, ptr noundef nonnull %3, i32 noundef %172) #43
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %195, label %175

175:                                              ; preds = %170
  %176 = load ptr, ptr %0, align 8, !tbaa !13
  %177 = icmp eq ptr %176, null
  br i1 %177, label %179, label %178

178:                                              ; preds = %175
  call void @free(ptr noundef nonnull %176) #43
  br label %179

179:                                              ; preds = %178, %175
  call void @free(ptr noundef nonnull %0) #43
  %180 = load ptr, ptr %2, align 8, !tbaa !13
  %181 = call i32 @tautology(ptr noundef %180) #44, !range !67
  %182 = icmp eq i32 %181, 0
  %183 = load ptr, ptr %3, align 8, !tbaa !13
  br i1 %182, label %193, label %184

184:                                              ; preds = %179
  %185 = load ptr, ptr %183, align 8, !tbaa !13
  %186 = icmp eq ptr %185, null
  br i1 %186, label %191, label %187

187:                                              ; preds = %184
  call void @free(ptr noundef nonnull %185) #43
  %188 = load ptr, ptr %3, align 8, !tbaa !13
  store ptr null, ptr %188, align 8, !tbaa !13
  %189 = load ptr, ptr %3, align 8, !tbaa !13
  %190 = icmp eq ptr %189, null
  br i1 %190, label %195, label %191

191:                                              ; preds = %187, %184
  %192 = phi ptr [ %189, %187 ], [ %183, %184 ]
  call void @free(ptr noundef nonnull %192) #43
  br label %195

193:                                              ; preds = %179
  %194 = call i32 @tautology(ptr noundef %183) #44, !range !67
  br label %195

195:                                              ; preds = %193, %191, %187, %170, %156, %85, %78, %69, %26
  %196 = phi i32 [ 1, %26 ], [ 0, %78 ], [ 1, %85 ], [ %194, %193 ], [ 0, %69 ], [ 2, %170 ], [ 1, %191 ], [ 1, %187 ], [ 2, %156 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #45
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #45
  ret i32 %196
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @cube_is_covered(ptr noundef %0, ptr noundef %1) #0 {
  %3 = tail call ptr (ptr, ptr, ...) @cofactor(ptr noundef %0, ptr noundef %1) #43
  %4 = tail call i32 @tautology(ptr noundef %3) #44, !range !67
  ret i32 %4
}

; Function Attrs: noreturn nounwind optsize uwtable
define dso_local i32 @main(i32 noundef %0, ptr noundef %1) #23 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca ptr, align 8
  %9 = alloca ptr, align 8
  %10 = alloca %struct.cost_struct, align 4
  store i32 %0, ptr %3, align 4, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4) #45
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5) #45
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6) #45
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %7) #45
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #45
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #45
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %10) #45
  %11 = tail call i64 (...) @util_cpu_time() #43
  store ptr @.str.90, ptr @total_name, align 16, !tbaa !13
  store ptr @.str.91, ptr getelementptr inbounds ([16 x ptr], ptr @total_name, i64 0, i64 15), align 8, !tbaa !13
  store ptr @.str.92, ptr getelementptr inbounds ([16 x ptr], ptr @total_name, i64 0, i64 1), align 8, !tbaa !13
  store ptr @.str.93, ptr getelementptr inbounds ([16 x ptr], ptr @total_name, i64 0, i64 6), align 16, !tbaa !13
  store ptr @.str.94, ptr getelementptr inbounds ([16 x ptr], ptr @total_name, i64 0, i64 4), align 16, !tbaa !13
  store ptr @.str.95, ptr getelementptr inbounds ([16 x ptr], ptr @total_name, i64 0, i64 3), align 8, !tbaa !13
  store ptr @.str.96, ptr getelementptr inbounds ([16 x ptr], ptr @total_name, i64 0, i64 5), align 8, !tbaa !13
  store ptr @.str.97, ptr getelementptr inbounds ([16 x ptr], ptr @total_name, i64 0, i64 9), align 8, !tbaa !13
  store ptr @.str.98, ptr getelementptr inbounds ([16 x ptr], ptr @total_name, i64 0, i64 7), align 8, !tbaa !13
  store ptr @.str.99, ptr getelementptr inbounds ([16 x ptr], ptr @total_name, i64 0, i64 8), align 16, !tbaa !13
  store ptr @.str.100, ptr getelementptr inbounds ([16 x ptr], ptr @total_name, i64 0, i64 12), align 16, !tbaa !13
  store ptr @.str.101, ptr getelementptr inbounds ([16 x ptr], ptr @total_name, i64 0, i64 13), align 8, !tbaa !13
  store ptr @.str.102, ptr getelementptr inbounds ([16 x ptr], ptr @total_name, i64 0, i64 14), align 16, !tbaa !13
  store ptr @.str.77, ptr getelementptr inbounds ([16 x ptr], ptr @total_name, i64 0, i64 10), align 16, !tbaa !13
  store ptr @.str.103, ptr getelementptr inbounds ([16 x ptr], ptr @total_name, i64 0, i64 11), align 8, !tbaa !13
  store i32 0, ptr %7, align 4, !tbaa !16
  store i32 1, ptr %6, align 4, !tbaa !16
  store i32 0, ptr @debug, align 4, !tbaa !16
  store i32 0, ptr @verbose_debug, align 4, !tbaa !16
  store i32 1, ptr @print_solution, align 4, !tbaa !16
  store i32 0, ptr @summary, align 4, !tbaa !16
  store i32 0, ptr @trace, align 4, !tbaa !16
  store i32 -1, ptr %4, align 4, !tbaa !16
  store i32 -1, ptr %5, align 4, !tbaa !16
  store i32 1, ptr @remove_essential, align 4, !tbaa !16
  store i32 1, ptr @force_irredundant, align 4, !tbaa !16
  store i32 1, ptr @unwrap_onset, align 4, !tbaa !16
  store i32 0, ptr @single_expand, align 4, !tbaa !16
  store i32 0, ptr @pos, align 4, !tbaa !16
  store i32 0, ptr @recompute_onset, align 4, !tbaa !16
  store i32 0, ptr @use_super_gasp, align 4, !tbaa !16
  store i32 0, ptr @use_random_order, align 4, !tbaa !16
  store i32 0, ptr @kiss, align 4, !tbaa !16
  store i32 1, ptr @echo_comments, align 4, !tbaa !16
  store i32 1, ptr @echo_unknown_commands, align 4, !tbaa !16
  %12 = call i32 @backward_compatibility_hack(ptr noundef nonnull %3, ptr noundef %1, ptr noundef nonnull %7, ptr noundef nonnull %6) #44
  %13 = load i32, ptr %3, align 4, !tbaa !16
  br label %14

14:                                               ; preds = %103, %2
  %15 = phi i32 [ 0, %2 ], [ %104, %103 ]
  %16 = call i32 (i32, ptr, ptr, ...) @espresso_getopt(i32 noundef %13, ptr noundef %1, ptr noundef nonnull @.str.62.270) #43
  switch i32 %16, label %124 [
    i32 -1, label %126
    i32 68, label %25
    i32 111, label %21
    i32 101, label %17
    i32 100, label %82
    i32 118, label %84
    i32 116, label %109
    i32 115, label %110
    i32 120, label %111
    i32 83, label %112
    i32 114, label %115
  ]

17:                                               ; preds = %14
  %18 = load ptr, ptr @esp_opt_table, align 16, !tbaa !129
  %19 = icmp eq ptr %18, null
  %20 = load ptr, ptr @optarg, align 8, !tbaa !13
  br i1 %19, label %78, label %68

21:                                               ; preds = %14
  %22 = load ptr, ptr @pla_types, align 8, !tbaa !64
  %23 = icmp eq ptr %22, null
  %24 = load ptr, ptr @optarg, align 8, !tbaa !13
  br i1 %23, label %59, label %50

25:                                               ; preds = %14
  %26 = load ptr, ptr @option_table, align 16, !tbaa !131
  %27 = icmp eq ptr %26, null
  %28 = load ptr, ptr @optarg, align 8, !tbaa !13
  br i1 %27, label %41, label %29

29:                                               ; preds = %34, %25
  %30 = phi i64 [ %35, %34 ], [ 0, %25 ]
  %31 = phi ptr [ %37, %34 ], [ %26, %25 ]
  %32 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %28, ptr noundef nonnull dereferenceable(1) %31) #48
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %39, label %34

34:                                               ; preds = %29
  %35 = add nuw i64 %30, 1
  %36 = getelementptr inbounds [44 x %struct.anon], ptr @option_table, i64 0, i64 %35
  %37 = load ptr, ptr %36, align 8, !tbaa !131
  %38 = icmp eq ptr %37, null
  br i1 %38, label %41, label %29

39:                                               ; preds = %29
  %.lcssa3 = phi i64 [ %30, %29 ]
  %40 = trunc i64 %.lcssa3 to i32
  store i32 %40, ptr %7, align 4, !tbaa !16
  br label %103

41:                                               ; preds = %34, %25
  %.lcssa14 = phi ptr [ %28, %34 ], [ %28, %25 ]
  %42 = load ptr, ptr @stderr, align 8, !tbaa !13
  %43 = load ptr, ptr %1, align 8, !tbaa !13
  %44 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %42, ptr noundef nonnull @.str.63.271, ptr noundef %43, ptr noundef %.lcssa14) #47
  call void @exit(i32 noundef 1) #49
  unreachable

45:                                               ; preds = %50
  %46 = add nuw i64 %51, 1
  %47 = getelementptr inbounds [0 x %struct.pla_types_struct], ptr @pla_types, i64 0, i64 %46
  %48 = load ptr, ptr %47, align 8, !tbaa !64
  %49 = icmp eq ptr %48, null
  br i1 %49, label %59, label %50

50:                                               ; preds = %45, %21
  %51 = phi i64 [ %46, %45 ], [ 0, %21 ]
  %52 = phi ptr [ %48, %45 ], [ %22, %21 ]
  %53 = getelementptr inbounds i8, ptr %52, i64 1
  %54 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %24, ptr noundef nonnull dereferenceable(1) %53) #48
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %45

56:                                               ; preds = %50
  %.lcssa2 = phi i64 [ %51, %50 ]
  %57 = getelementptr inbounds [0 x %struct.pla_types_struct], ptr @pla_types, i64 0, i64 %.lcssa2, i32 1
  %58 = load i32, ptr %57, align 8, !tbaa !66
  store i32 %58, ptr %6, align 4, !tbaa !16
  br label %103

59:                                               ; preds = %45, %21
  %.lcssa6 = phi ptr [ %24, %45 ], [ %24, %21 ]
  %60 = load ptr, ptr @stderr, align 8, !tbaa !13
  %61 = load ptr, ptr %1, align 8, !tbaa !13
  %62 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %60, ptr noundef nonnull @.str.64, ptr noundef %61, ptr noundef %.lcssa6) #47
  call void @exit(i32 noundef 1) #49
  unreachable

63:                                               ; preds = %68
  %64 = add nuw i64 %69, 1
  %65 = getelementptr inbounds [12 x %struct.anon.1], ptr @esp_opt_table, i64 0, i64 %64
  %66 = load ptr, ptr %65, align 8, !tbaa !129
  %67 = icmp eq ptr %66, null
  br i1 %67, label %78, label %68

68:                                               ; preds = %63, %17
  %69 = phi i64 [ %64, %63 ], [ 0, %17 ]
  %70 = phi ptr [ %66, %63 ], [ %18, %17 ]
  %71 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %20, ptr noundef nonnull dereferenceable(1) %70) #48
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %73, label %63

73:                                               ; preds = %68
  %.lcssa1 = phi i64 [ %69, %68 ]
  %74 = getelementptr inbounds [12 x %struct.anon.1], ptr @esp_opt_table, i64 0, i64 %.lcssa1, i32 2
  %75 = load i32, ptr %74, align 8, !tbaa !133
  %76 = getelementptr inbounds [12 x %struct.anon.1], ptr @esp_opt_table, i64 0, i64 %.lcssa1, i32 1
  %77 = load ptr, ptr %76, align 8, !tbaa !134
  store i32 %75, ptr %77, align 4, !tbaa !16
  br label %103

78:                                               ; preds = %63, %17
  %.lcssa5 = phi ptr [ %20, %63 ], [ %20, %17 ]
  %79 = load ptr, ptr @stderr, align 8, !tbaa !13
  %80 = load ptr, ptr %1, align 8, !tbaa !13
  %81 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %79, ptr noundef nonnull @.str.65.272, ptr noundef %80, ptr noundef %.lcssa5) #47
  call void @exit(i32 noundef 1) #49
  unreachable

82:                                               ; preds = %14
  %83 = load i32, ptr getelementptr inbounds ([17 x %struct.pla_types_struct], ptr @debug_table, i64 0, i64 0, i32 1), align 8, !tbaa !135
  store i32 %83, ptr @debug, align 4, !tbaa !16
  store i32 1, ptr @trace, align 4, !tbaa !16
  store i32 1, ptr @summary, align 4, !tbaa !16
  br label %103

84:                                               ; preds = %14
  store i32 1, ptr @verbose_debug, align 4, !tbaa !16
  %85 = load ptr, ptr @debug_table, align 16, !tbaa !137
  %86 = icmp eq ptr %85, null
  %87 = load ptr, ptr @optarg, align 8, !tbaa !13
  br i1 %86, label %105, label %93

88:                                               ; preds = %93
  %89 = add nuw i64 %94, 1
  %90 = getelementptr inbounds [17 x %struct.pla_types_struct], ptr @debug_table, i64 0, i64 %89
  %91 = load ptr, ptr %90, align 16, !tbaa !137
  %92 = icmp eq ptr %91, null
  br i1 %92, label %105, label %93

93:                                               ; preds = %88, %84
  %94 = phi i64 [ %89, %88 ], [ 0, %84 ]
  %95 = phi ptr [ %91, %88 ], [ %85, %84 ]
  %96 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %87, ptr noundef nonnull dereferenceable(1) %95) #48
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %98, label %88

98:                                               ; preds = %93
  %.lcssa = phi i64 [ %94, %93 ]
  %99 = getelementptr inbounds [17 x %struct.pla_types_struct], ptr @debug_table, i64 0, i64 %.lcssa, i32 1
  %100 = load i32, ptr %99, align 8, !tbaa !135
  %101 = load i32, ptr @debug, align 4, !tbaa !16
  %102 = or i32 %101, %100
  store i32 %102, ptr @debug, align 4, !tbaa !16
  br label %103

103:                                              ; preds = %115, %112, %111, %110, %109, %98, %82, %73, %56, %39
  %104 = phi i32 [ %15, %115 ], [ %114, %112 ], [ %15, %111 ], [ %15, %110 ], [ %15, %109 ], [ %15, %98 ], [ %15, %82 ], [ %15, %73 ], [ %15, %56 ], [ %15, %39 ]
  br label %14

105:                                              ; preds = %88, %84
  %.lcssa4 = phi ptr [ %87, %88 ], [ %87, %84 ]
  %106 = load ptr, ptr @stderr, align 8, !tbaa !13
  %107 = load ptr, ptr %1, align 8, !tbaa !13
  %108 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %106, ptr noundef nonnull @.str.66.273, ptr noundef %107, ptr noundef %.lcssa4) #47
  call void @exit(i32 noundef 1) #49
  unreachable

109:                                              ; preds = %14
  store i32 1, ptr @trace, align 4, !tbaa !16
  br label %103

110:                                              ; preds = %14
  store i32 1, ptr @summary, align 4, !tbaa !16
  br label %103

111:                                              ; preds = %14
  store i32 0, ptr @print_solution, align 4, !tbaa !16
  br label %103

112:                                              ; preds = %14
  %113 = load ptr, ptr @optarg, align 8, !tbaa !13
  %114 = call i32 @atoi(ptr nocapture noundef %113) #48
  br label %103

115:                                              ; preds = %14
  %116 = load ptr, ptr @optarg, align 8, !tbaa !13
  %117 = call i32 (ptr, ptr, ...) @__isoc99_sscanf(ptr noundef %116, ptr noundef nonnull @.str.67.274, ptr noundef nonnull %4, ptr noundef nonnull %5) #43
  %118 = icmp slt i32 %117, 2
  br i1 %118, label %119, label %103

119:                                              ; preds = %115
  %120 = load ptr, ptr @stderr, align 8, !tbaa !13
  %121 = load ptr, ptr %1, align 8, !tbaa !13
  %122 = load ptr, ptr @optarg, align 8, !tbaa !13
  %123 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %120, ptr noundef nonnull @.str.68, ptr noundef %121, ptr noundef %122) #47
  call void @exit(i32 noundef 1) #49
  unreachable

124:                                              ; preds = %14
  %125 = call i32 @usage() #44
  call void @exit(i32 noundef 1) #49
  unreachable

126:                                              ; preds = %14
  %.lcssa8 = phi i32 [ %15, %14 ]
  %127 = load i32, ptr @summary, align 4, !tbaa !16
  %128 = icmp ne i32 %127, 0
  %129 = load i32, ptr @trace, align 4
  %130 = icmp ne i32 %129, 0
  %131 = select i1 %128, i1 true, i1 %130
  br i1 %131, label %132, label %151

132:                                              ; preds = %126
  %133 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.69) #44
  %134 = icmp sgt i32 %13, 1
  br i1 %134, label %135, label %148

135:                                              ; preds = %132
  %136 = zext i32 %13 to i64
  br label %137

137:                                              ; preds = %137, %135
  %138 = phi i64 [ 1, %135 ], [ %146, %137 ]
  %139 = getelementptr inbounds ptr, ptr %1, i64 %138
  %140 = load ptr, ptr %139, align 8, !tbaa !13
  %141 = call ptr @strrchr(ptr noundef nonnull dereferenceable(1) %140, i32 noundef 47) #48
  %142 = icmp eq ptr %141, null
  %143 = getelementptr inbounds i8, ptr %141, i64 1
  %144 = select i1 %142, ptr %140, ptr %143
  %145 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.70, ptr noundef %144) #44
  %146 = add nuw nsw i64 %138, 1
  %147 = icmp eq i64 %146, %136
  br i1 %147, label %148, label %137

148:                                              ; preds = %137, %132
  %149 = call i32 @putchar(i32 10)
  %150 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.72, ptr noundef nonnull @.str.73) #44
  br label %151

151:                                              ; preds = %148, %126
  store ptr null, ptr %9, align 8, !tbaa !13
  store ptr null, ptr %8, align 8, !tbaa !13
  %152 = load i32, ptr %7, align 4, !tbaa !16
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds [44 x %struct.anon], ptr @option_table, i64 0, i64 %153, i32 2
  %155 = load i32, ptr %154, align 4, !tbaa !138
  switch i32 %155, label %182 [
    i32 2, label %156
    i32 1, label %170
  ]

156:                                              ; preds = %151
  %157 = load i32, ptr @optind, align 4, !tbaa !16
  %158 = add nsw i32 %157, 2
  %159 = icmp slt i32 %158, %13
  br i1 %159, label %160, label %162

160:                                              ; preds = %156
  call void (ptr, ...) @fatal(ptr noundef nonnull @.str.74) #43
  %161 = load i32, ptr @optind, align 4, !tbaa !16
  br label %162

162:                                              ; preds = %160, %156
  %163 = phi i32 [ %161, %160 ], [ %157, %156 ]
  %164 = add nsw i32 %163, 1
  store i32 %164, ptr @optind, align 4, !tbaa !16
  %165 = load i32, ptr %6, align 4, !tbaa !16
  %166 = call i32 @getPLA(i32 noundef %163, i32 noundef %13, ptr noundef %1, i32 noundef %152, ptr noundef nonnull %8, i32 noundef %165) #44
  %167 = load i32, ptr @optind, align 4, !tbaa !16
  %168 = add nsw i32 %167, 1
  store i32 %168, ptr @optind, align 4, !tbaa !16
  %169 = call i32 @getPLA(i32 noundef %167, i32 noundef %13, ptr noundef %1, i32 noundef %152, ptr noundef nonnull %9, i32 noundef %165) #44
  br label %182

170:                                              ; preds = %151
  %171 = load i32, ptr @optind, align 4, !tbaa !16
  %172 = add nsw i32 %171, 1
  %173 = icmp slt i32 %172, %13
  br i1 %173, label %174, label %177

174:                                              ; preds = %170
  call void (ptr, ...) @fatal(ptr noundef nonnull @.str.74) #43
  %175 = load i32, ptr @optind, align 4, !tbaa !16
  %176 = add nsw i32 %175, 1
  br label %177

177:                                              ; preds = %174, %170
  %178 = phi i32 [ %176, %174 ], [ %172, %170 ]
  %179 = phi i32 [ %175, %174 ], [ %171, %170 ]
  store i32 %178, ptr @optind, align 4, !tbaa !16
  %180 = load i32, ptr %6, align 4, !tbaa !16
  %181 = call i32 @getPLA(i32 noundef %179, i32 noundef %13, ptr noundef %1, i32 noundef %152, ptr noundef nonnull %8, i32 noundef %180) #44
  br label %182

182:                                              ; preds = %177, %162, %151
  %183 = load i32, ptr @optind, align 4, !tbaa !16
  %184 = icmp slt i32 %183, %13
  br i1 %184, label %185, label %186

185:                                              ; preds = %182
  call void (ptr, ...) @fatal(ptr noundef nonnull @.str.74) #43
  br label %186

186:                                              ; preds = %185, %182
  %187 = load i32, ptr @summary, align 4, !tbaa !16
  %188 = icmp ne i32 %187, 0
  %189 = load i32, ptr @trace, align 4
  %190 = icmp ne i32 %189, 0
  %191 = select i1 %188, i1 true, i1 %190
  br i1 %191, label %192, label %200

192:                                              ; preds = %186
  %193 = load ptr, ptr %8, align 8, !tbaa !13
  %194 = icmp eq ptr %193, null
  br i1 %194, label %196, label %195

195:                                              ; preds = %192
  call void (ptr, ...) @PLA_summary(ptr noundef nonnull %193) #43
  br label %196

196:                                              ; preds = %195, %192
  %197 = load ptr, ptr %9, align 8, !tbaa !13
  %198 = icmp eq ptr %197, null
  br i1 %198, label %200, label %199

199:                                              ; preds = %196
  call void (ptr, ...) @PLA_summary(ptr noundef nonnull %197) #43
  br label %200

200:                                              ; preds = %199, %196, %186
  %201 = getelementptr inbounds [44 x %struct.anon], ptr @option_table, i64 0, i64 %153, i32 1
  %202 = load i32, ptr %201, align 8, !tbaa !139
  switch i32 %202, label %690 [
    i32 0, label %208
    i32 37, label %206
    i32 27, label %271
    i32 28, label %285
    i32 29, label %289
    i32 10, label %293
    i32 13, label %303
    i32 25, label %313
    i32 8, label %323
    i32 31, label %351
    i32 11, label %360
    i32 15, label %369
    i32 9, label %378
    i32 24, label %379
    i32 23, label %406
    i32 16, label %422
    i32 19, label %425
    i32 20, label %427
    i32 21, label %452
    i32 22, label %454
    i32 33, label %640
    i32 32, label %457
    i32 3, label %465
    i32 12, label %470
    i32 35, label %477
    i32 5, label %484
    i32 6, label %489
    i32 26, label %496
    i32 14, label %503
    i32 30, label %508
    i32 18, label %514
    i32 4, label %536
    i32 40, label %203
    i32 1, label %572
    i32 36, label %584
    i32 2, label %600
    i32 17, label %603
    i32 34, label %606
    i32 38, label %609
    i32 39, label %618
    i32 41, label %636
  ]

203:                                              ; preds = %200
  %204 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %205 = icmp sgt i32 %204, 0
  br i1 %205, label %563, label %690

206:                                              ; preds = %200
  %207 = load i32, ptr %6, align 4
  br label %234

208:                                              ; preds = %200
  %209 = load ptr, ptr %8, align 8, !tbaa !13
  %210 = load ptr, ptr %209, align 8, !tbaa !61
  %211 = call ptr (ptr, ...) @sf_save(ptr noundef %210) #43
  %212 = load ptr, ptr %8, align 8, !tbaa !13
  %213 = load ptr, ptr %212, align 8, !tbaa !61
  %214 = getelementptr inbounds %struct.PLA_t, ptr %212, i64 0, i32 1
  %215 = load ptr, ptr %214, align 8, !tbaa !62
  %216 = getelementptr inbounds %struct.PLA_t, ptr %212, i64 0, i32 2
  %217 = load ptr, ptr %216, align 8, !tbaa !63
  %218 = call ptr (ptr, ptr, ptr, ...) @espresso(ptr noundef %213, ptr noundef %215, ptr noundef %217) #43
  %219 = load ptr, ptr %8, align 8, !tbaa !13
  store ptr %218, ptr %219, align 8, !tbaa !61
  %220 = call i64 (...) @util_cpu_time() #43
  %221 = load ptr, ptr %8, align 8, !tbaa !13
  %222 = load ptr, ptr %221, align 8, !tbaa !61
  %223 = getelementptr inbounds %struct.PLA_t, ptr %221, i64 0, i32 1
  %224 = load ptr, ptr %223, align 8, !tbaa !62
  %225 = call i32 (ptr, ptr, ptr, ...) @verify(ptr noundef %222, ptr noundef %211, ptr noundef %224) #43
  %226 = load ptr, ptr %8, align 8, !tbaa !13
  %227 = load ptr, ptr %226, align 8, !tbaa !61
  call void (i64, i32, ptr, ptr, ...) @totals(i64 noundef %220, i32 noundef 14, ptr noundef %227, ptr noundef nonnull %10) #43
  %228 = icmp eq i32 %225, 0
  br i1 %228, label %233, label %229

229:                                              ; preds = %208
  store i32 0, ptr @print_solution, align 4, !tbaa !16
  %230 = load ptr, ptr %8, align 8, !tbaa !13
  store ptr %211, ptr %230, align 8, !tbaa !61
  %231 = load ptr, ptr %8, align 8, !tbaa !13
  %232 = call i32 (ptr, ...) @check_consistency(ptr noundef %231) #43
  br label %690

233:                                              ; preds = %208
  call void (ptr, ...) @sf_free(ptr noundef %211) #43
  br label %690

234:                                              ; preds = %266, %206
  %235 = call i64 (...) @util_cpu_time() #43
  %236 = load ptr, ptr %8, align 8, !tbaa !13
  %237 = load ptr, ptr %236, align 8, !tbaa !61
  %238 = getelementptr inbounds %struct.PLA_t, ptr %236, i64 0, i32 1
  %239 = load ptr, ptr %238, align 8, !tbaa !62
  %240 = getelementptr inbounds %struct.PLA_t, ptr %236, i64 0, i32 2
  %241 = load ptr, ptr %240, align 8, !tbaa !63
  %242 = call ptr (ptr, ptr, ptr, ...) @espresso(ptr noundef %237, ptr noundef %239, ptr noundef %241) #43
  %243 = load ptr, ptr %8, align 8, !tbaa !13
  store ptr %242, ptr %243, align 8, !tbaa !61
  %244 = load i32, ptr @trace, align 4, !tbaa !16
  %245 = icmp eq i32 %244, 0
  br i1 %245, label %251, label %246

246:                                              ; preds = %234
  %247 = load ptr, ptr %8, align 8, !tbaa !13
  %248 = load ptr, ptr %247, align 8, !tbaa !61
  %249 = call i64 (...) @util_cpu_time() #43
  %250 = sub nsw i64 %249, %235
  call void (ptr, ptr, i64, ...) @print_trace(ptr noundef %248, ptr noundef nonnull @.str.75, i64 noundef %250) #43
  br label %251

251:                                              ; preds = %246, %234
  %252 = load i32, ptr @print_solution, align 4, !tbaa !16
  %253 = icmp eq i32 %252, 0
  br i1 %253, label %259, label %254

254:                                              ; preds = %251
  %255 = load ptr, ptr @stdout, align 8, !tbaa !13
  %256 = load ptr, ptr %8, align 8, !tbaa !13
  call void (ptr, ptr, i32, ...) @fprint_pla(ptr noundef %255, ptr noundef %256, i32 noundef %207) #43
  %257 = load ptr, ptr @stdout, align 8, !tbaa !13
  %258 = call i32 @fflush(ptr noundef %257) #44
  br label %259

259:                                              ; preds = %254, %251
  %260 = load ptr, ptr %8, align 8, !tbaa !13
  %261 = getelementptr inbounds %struct.PLA_t, ptr %260, i64 0, i32 4
  %262 = load i32, ptr %261, align 8, !tbaa !60
  call void (ptr, ...) @free_PLA(ptr noundef %260) #43
  call void (...) @setdown_cube() #43
  %263 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %264 = icmp eq ptr %263, null
  br i1 %264, label %266, label %265

265:                                              ; preds = %259
  call void @free(ptr noundef nonnull %263) #43
  store ptr null, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  br label %266

266:                                              ; preds = %265, %259
  %267 = load ptr, ptr @last_fp, align 8, !tbaa !13
  %268 = call i32 (ptr, i32, i32, i32, ptr, ...) @read_pla(ptr noundef %267, i32 noundef 1, i32 noundef 1, i32 noundef %262, ptr noundef nonnull %8) #43
  %269 = icmp eq i32 %268, -1
  br i1 %269, label %270, label %234

270:                                              ; preds = %266
  call void @exit(i32 noundef 0) #49
  unreachable

271:                                              ; preds = %200
  %272 = call i64 (...) @util_cpu_time() #43
  %273 = load ptr, ptr %8, align 8, !tbaa !13
  %274 = load ptr, ptr %273, align 8, !tbaa !61
  %275 = call ptr (ptr, ...) @cube1list(ptr noundef %274) #43
  %276 = call ptr (ptr, ...) @simplify(ptr noundef %275) #43
  %277 = load ptr, ptr %8, align 8, !tbaa !13
  store ptr %276, ptr %277, align 8, !tbaa !61
  %278 = load i32, ptr @trace, align 4
  %279 = icmp eq i32 %278, 0
  br i1 %279, label %698, label %280

280:                                              ; preds = %271
  %281 = load ptr, ptr %8, align 8, !tbaa !13
  %282 = load ptr, ptr %281, align 8, !tbaa !61
  %283 = call i64 (...) @util_cpu_time() #43
  %284 = sub nsw i64 %283, %272
  call void (ptr, ptr, i64, ...) @print_trace(ptr noundef %282, ptr noundef nonnull @.str.76, i64 noundef %284) #43
  br label %690

285:                                              ; preds = %200
  %286 = icmp ugt i32 %.lcssa8, 1
  %287 = select i1 %286, i32 0, i32 %.lcssa8
  %288 = load ptr, ptr %8, align 8, !tbaa !13
  call void (ptr, i32, ...) @so_espresso(ptr noundef %288, i32 noundef %287) #43
  br label %690

289:                                              ; preds = %200
  %290 = icmp ugt i32 %.lcssa8, 1
  %291 = select i1 %290, i32 0, i32 %.lcssa8
  %292 = load ptr, ptr %8, align 8, !tbaa !13
  call void (ptr, i32, ...) @so_both_espresso(ptr noundef %292, i32 noundef %291) #43
  br label %690

293:                                              ; preds = %200
  %294 = call i64 (...) @util_cpu_time() #43
  %295 = load ptr, ptr %8, align 8, !tbaa !13
  %296 = load ptr, ptr %295, align 8, !tbaa !61
  %297 = getelementptr inbounds %struct.PLA_t, ptr %295, i64 0, i32 2
  %298 = load ptr, ptr %297, align 8, !tbaa !63
  %299 = call ptr (ptr, ptr, i32, ...) @expand(ptr noundef %296, ptr noundef %298, i32 noundef 0) #43
  %300 = load ptr, ptr %8, align 8, !tbaa !13
  store ptr %299, ptr %300, align 8, !tbaa !61
  %301 = load ptr, ptr %8, align 8, !tbaa !13
  %302 = load ptr, ptr %301, align 8, !tbaa !61
  call void (i64, i32, ptr, ptr, ...) @totals(i64 noundef %294, i32 noundef 4, ptr noundef %302, ptr noundef nonnull %10) #43
  br label %690

303:                                              ; preds = %200
  %304 = call i64 (...) @util_cpu_time() #43
  %305 = load ptr, ptr %8, align 8, !tbaa !13
  %306 = load ptr, ptr %305, align 8, !tbaa !61
  %307 = getelementptr inbounds %struct.PLA_t, ptr %305, i64 0, i32 1
  %308 = load ptr, ptr %307, align 8, !tbaa !62
  %309 = call ptr (ptr, ptr, ...) @irredundant(ptr noundef %306, ptr noundef %308) #43
  %310 = load ptr, ptr %8, align 8, !tbaa !13
  store ptr %309, ptr %310, align 8, !tbaa !61
  %311 = load ptr, ptr %8, align 8, !tbaa !13
  %312 = load ptr, ptr %311, align 8, !tbaa !61
  call void (i64, i32, ptr, ptr, ...) @totals(i64 noundef %304, i32 noundef 5, ptr noundef %312, ptr noundef nonnull %10) #43
  br label %690

313:                                              ; preds = %200
  %314 = call i64 (...) @util_cpu_time() #43
  %315 = load ptr, ptr %8, align 8, !tbaa !13
  %316 = load ptr, ptr %315, align 8, !tbaa !61
  %317 = getelementptr inbounds %struct.PLA_t, ptr %315, i64 0, i32 1
  %318 = load ptr, ptr %317, align 8, !tbaa !62
  %319 = call ptr (ptr, ptr, ...) @reduce(ptr noundef %316, ptr noundef %318) #43
  %320 = load ptr, ptr %8, align 8, !tbaa !13
  store ptr %319, ptr %320, align 8, !tbaa !61
  %321 = load ptr, ptr %8, align 8, !tbaa !13
  %322 = load ptr, ptr %321, align 8, !tbaa !61
  call void (i64, i32, ptr, ptr, ...) @totals(i64 noundef %314, i32 noundef 6, ptr noundef %322, ptr noundef nonnull %10) #43
  br label %690

323:                                              ; preds = %200
  %324 = load ptr, ptr %8, align 8, !tbaa !13
  %325 = load ptr, ptr %324, align 8, !tbaa !61
  %326 = getelementptr inbounds %struct.set_family, ptr %325, i64 0, i32 5
  %327 = load ptr, ptr %326, align 8, !tbaa !33
  %328 = getelementptr inbounds %struct.set_family, ptr %325, i64 0, i32 3
  %329 = load i32, ptr %328, align 4, !tbaa !31
  %330 = load i32, ptr %325, align 8, !tbaa !34
  %331 = mul nsw i32 %330, %329
  %332 = sext i32 %331 to i64
  %333 = getelementptr inbounds i32, ptr %327, i64 %332
  %334 = icmp sgt i32 %331, 0
  br i1 %334, label %335, label %344

335:                                              ; preds = %335, %323
  %336 = phi ptr [ %342, %335 ], [ %327, %323 ]
  %337 = load i32, ptr %336, align 4, !tbaa !16
  %338 = and i32 %337, -17409
  %339 = or i32 %338, 1024
  store i32 %339, ptr %336, align 4, !tbaa !16
  %340 = load i32, ptr %325, align 8, !tbaa !34
  %341 = sext i32 %340 to i64
  %342 = getelementptr inbounds i32, ptr %336, i64 %341
  %343 = icmp ult ptr %342, %333
  br i1 %343, label %335, label %344

344:                                              ; preds = %335, %323
  %345 = call i64 (...) @util_cpu_time() #43
  %346 = load ptr, ptr %8, align 8, !tbaa !13
  %347 = getelementptr inbounds %struct.PLA_t, ptr %346, i64 0, i32 1
  %348 = call ptr (ptr, ptr, ...) @essential(ptr noundef %346, ptr noundef nonnull %347) #43
  %349 = load ptr, ptr %8, align 8, !tbaa !13
  %350 = load ptr, ptr %349, align 8, !tbaa !61
  call void (i64, i32, ptr, ptr, ...) @totals(i64 noundef %345, i32 noundef 3, ptr noundef %350, ptr noundef nonnull %10) #43
  call void (ptr, ...) @sf_free(ptr noundef %348) #43
  br label %690

351:                                              ; preds = %200
  %352 = load ptr, ptr %8, align 8, !tbaa !13
  %353 = load ptr, ptr %352, align 8, !tbaa !61
  %354 = getelementptr inbounds %struct.PLA_t, ptr %352, i64 0, i32 1
  %355 = load ptr, ptr %354, align 8, !tbaa !62
  %356 = getelementptr inbounds %struct.PLA_t, ptr %352, i64 0, i32 2
  %357 = load ptr, ptr %356, align 8, !tbaa !63
  %358 = call ptr (ptr, ptr, ptr, ptr, ...) @super_gasp(ptr noundef %353, ptr noundef %355, ptr noundef %357, ptr noundef nonnull %10) #43
  %359 = load ptr, ptr %8, align 8, !tbaa !13
  store ptr %358, ptr %359, align 8, !tbaa !61
  br label %690

360:                                              ; preds = %200
  %361 = load ptr, ptr %8, align 8, !tbaa !13
  %362 = load ptr, ptr %361, align 8, !tbaa !61
  %363 = getelementptr inbounds %struct.PLA_t, ptr %361, i64 0, i32 1
  %364 = load ptr, ptr %363, align 8, !tbaa !62
  %365 = getelementptr inbounds %struct.PLA_t, ptr %361, i64 0, i32 2
  %366 = load ptr, ptr %365, align 8, !tbaa !63
  %367 = call ptr (ptr, ptr, ptr, ptr, ...) @last_gasp(ptr noundef %362, ptr noundef %364, ptr noundef %366, ptr noundef nonnull %10) #43
  %368 = load ptr, ptr %8, align 8, !tbaa !13
  store ptr %367, ptr %368, align 8, !tbaa !61
  br label %690

369:                                              ; preds = %200
  %370 = load ptr, ptr %8, align 8, !tbaa !13
  %371 = load ptr, ptr %370, align 8, !tbaa !61
  %372 = getelementptr inbounds %struct.PLA_t, ptr %370, i64 0, i32 1
  %373 = load ptr, ptr %372, align 8, !tbaa !62
  %374 = getelementptr inbounds %struct.PLA_t, ptr %370, i64 0, i32 2
  %375 = load ptr, ptr %374, align 8, !tbaa !63
  %376 = call ptr (ptr, ptr, ptr, ...) @make_sparse(ptr noundef %371, ptr noundef %373, ptr noundef %375) #43
  %377 = load ptr, ptr %8, align 8, !tbaa !13
  store ptr %376, ptr %377, align 8, !tbaa !61
  br label %690

378:                                              ; preds = %200
  br label %379

379:                                              ; preds = %378, %200
  %380 = phi i32 [ 0, %200 ], [ 1, %378 ]
  %381 = load ptr, ptr %8, align 8, !tbaa !13
  %382 = load ptr, ptr %381, align 8, !tbaa !61
  %383 = call ptr (ptr, ...) @sf_save(ptr noundef %382) #43
  %384 = load ptr, ptr %8, align 8, !tbaa !13
  %385 = load ptr, ptr %384, align 8, !tbaa !61
  %386 = getelementptr inbounds %struct.PLA_t, ptr %384, i64 0, i32 1
  %387 = load ptr, ptr %386, align 8, !tbaa !62
  %388 = getelementptr inbounds %struct.PLA_t, ptr %384, i64 0, i32 2
  %389 = load ptr, ptr %388, align 8, !tbaa !63
  %390 = call ptr (ptr, ptr, ptr, i32, ...) @minimize_exact(ptr noundef %385, ptr noundef %387, ptr noundef %389, i32 noundef %380) #43
  %391 = load ptr, ptr %8, align 8, !tbaa !13
  store ptr %390, ptr %391, align 8, !tbaa !61
  %392 = call i64 (...) @util_cpu_time() #43
  %393 = load ptr, ptr %8, align 8, !tbaa !13
  %394 = load ptr, ptr %393, align 8, !tbaa !61
  %395 = getelementptr inbounds %struct.PLA_t, ptr %393, i64 0, i32 1
  %396 = load ptr, ptr %395, align 8, !tbaa !62
  %397 = call i32 (ptr, ptr, ptr, ...) @verify(ptr noundef %394, ptr noundef %383, ptr noundef %396) #43
  %398 = load ptr, ptr %8, align 8, !tbaa !13
  %399 = load ptr, ptr %398, align 8, !tbaa !61
  call void (i64, i32, ptr, ptr, ...) @totals(i64 noundef %392, i32 noundef 14, ptr noundef %399, ptr noundef nonnull %10) #43
  %400 = icmp eq i32 %397, 0
  br i1 %400, label %405, label %401

401:                                              ; preds = %379
  store i32 0, ptr @print_solution, align 4, !tbaa !16
  %402 = load ptr, ptr %8, align 8, !tbaa !13
  store ptr %383, ptr %402, align 8, !tbaa !61
  %403 = load ptr, ptr %8, align 8, !tbaa !13
  %404 = call i32 (ptr, ...) @check_consistency(ptr noundef %403) #43
  br label %405

405:                                              ; preds = %401, %379
  call void (ptr, ...) @sf_free(ptr noundef %383) #43
  br label %690

406:                                              ; preds = %200
  %407 = call i64 (...) @util_cpu_time() #43
  %408 = load ptr, ptr %8, align 8, !tbaa !13
  %409 = load ptr, ptr %408, align 8, !tbaa !61
  %410 = getelementptr inbounds %struct.PLA_t, ptr %408, i64 0, i32 1
  %411 = load ptr, ptr %410, align 8, !tbaa !62
  %412 = call ptr (ptr, ptr, ...) @cube2list(ptr noundef %409, ptr noundef %411) #43
  %413 = call ptr (ptr, ...) @primes_consensus(ptr noundef %412) #43
  %414 = load ptr, ptr %8, align 8, !tbaa !13
  store ptr %413, ptr %414, align 8, !tbaa !61
  %415 = load i32, ptr @trace, align 4
  %416 = icmp eq i32 %415, 0
  br i1 %416, label %698, label %417

417:                                              ; preds = %406
  %418 = load ptr, ptr %8, align 8, !tbaa !13
  %419 = load ptr, ptr %418, align 8, !tbaa !61
  %420 = call i64 (...) @util_cpu_time() #43
  %421 = sub nsw i64 %420, %407
  call void (ptr, ptr, i64, ...) @print_trace(ptr noundef %419, ptr noundef nonnull @.str.77, i64 noundef %421) #43
  br label %690

422:                                              ; preds = %200
  %423 = load ptr, ptr %8, align 8, !tbaa !13
  %424 = load ptr, ptr %423, align 8, !tbaa !61
  call void (ptr, ...) @map(ptr noundef %424) #43
  store i32 0, ptr @print_solution, align 4, !tbaa !16
  br label %690

425:                                              ; preds = %200
  %426 = load ptr, ptr %8, align 8, !tbaa !13
  call void (ptr, i32, ...) @phase_assignment(ptr noundef %426, i32 noundef %.lcssa8) #43
  br label %690

427:                                              ; preds = %200
  %428 = load i32, ptr %4, align 4, !tbaa !16
  %429 = icmp slt i32 %428, 0
  %430 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %431 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  br i1 %429, label %437, label %432

432:                                              ; preds = %427
  %433 = sext i32 %431 to i64
  %434 = getelementptr inbounds i32, ptr %430, i64 %433
  %435 = load i32, ptr %434, align 4, !tbaa !16
  %436 = icmp slt i32 %428, %435
  br i1 %436, label %438, label %437

437:                                              ; preds = %432, %427
  store i32 0, ptr %4, align 4, !tbaa !16
  br label %438

438:                                              ; preds = %437, %432
  %439 = phi i32 [ 0, %437 ], [ %428, %432 ]
  %440 = load i32, ptr %5, align 4, !tbaa !16
  %441 = icmp sgt i32 %440, -1
  %442 = sext i32 %431 to i64
  %443 = getelementptr inbounds i32, ptr %430, i64 %442
  %444 = load i32, ptr %443, align 4, !tbaa !16
  %445 = icmp slt i32 %440, %444
  %446 = select i1 %441, i1 %445, i1 false
  br i1 %446, label %449, label %447

447:                                              ; preds = %438
  %448 = add nsw i32 %444, -1
  store i32 %448, ptr %5, align 4, !tbaa !16
  br label %449

449:                                              ; preds = %447, %438
  %450 = phi i32 [ %448, %447 ], [ %440, %438 ]
  %451 = load ptr, ptr %8, align 8, !tbaa !13
  call void (ptr, i32, i32, i32, ...) @opoall(ptr noundef %451, i32 noundef %439, i32 noundef %450, i32 noundef %.lcssa8) #43
  br label %690

452:                                              ; preds = %200
  %453 = load ptr, ptr %8, align 8, !tbaa !13
  call void (ptr, i32, ...) @find_optimal_pairing(ptr noundef %453, i32 noundef %.lcssa8) #43
  br label %690

454:                                              ; preds = %200
  %455 = load ptr, ptr %8, align 8, !tbaa !13
  %456 = call i32 (ptr, i32, ...) @pair_all(ptr noundef %455, i32 noundef %.lcssa8) #43
  br label %690

457:                                              ; preds = %200
  %458 = load ptr, ptr %8, align 8, !tbaa !13
  %459 = load ptr, ptr %458, align 8, !tbaa !61
  %460 = call ptr (ptr, ...) @cube1list(ptr noundef %459) #43
  %461 = call i32 (ptr, ...) @tautology(ptr noundef %460) #43
  %462 = icmp eq i32 %461, 0
  %463 = select i1 %462, ptr @.str.80, ptr @.str.79
  %464 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.78, ptr noundef nonnull %463) #44
  store i32 0, ptr @print_solution, align 4, !tbaa !16
  br label %690

465:                                              ; preds = %200
  %466 = load ptr, ptr %8, align 8, !tbaa !13
  %467 = load ptr, ptr %466, align 8, !tbaa !61
  %468 = call ptr (ptr, ...) @sf_contain(ptr noundef %467) #43
  %469 = load ptr, ptr %8, align 8, !tbaa !13
  store ptr %468, ptr %469, align 8, !tbaa !61
  br label %690

470:                                              ; preds = %200
  %471 = load ptr, ptr %8, align 8, !tbaa !13
  %472 = load ptr, ptr %471, align 8, !tbaa !61
  %473 = load ptr, ptr %9, align 8, !tbaa !13
  %474 = load ptr, ptr %473, align 8, !tbaa !61
  %475 = call ptr (ptr, ptr, ...) @cv_intersect(ptr noundef %472, ptr noundef %474) #43
  %476 = load ptr, ptr %8, align 8, !tbaa !13
  store ptr %475, ptr %476, align 8, !tbaa !61
  br label %690

477:                                              ; preds = %200
  %478 = load ptr, ptr %8, align 8, !tbaa !13
  %479 = load ptr, ptr %478, align 8, !tbaa !61
  %480 = load ptr, ptr %9, align 8, !tbaa !13
  %481 = load ptr, ptr %480, align 8, !tbaa !61
  %482 = call ptr (ptr, ptr, ...) @sf_union(ptr noundef %479, ptr noundef %481) #43
  %483 = load ptr, ptr %8, align 8, !tbaa !13
  store ptr %482, ptr %483, align 8, !tbaa !61
  br label %690

484:                                              ; preds = %200
  %485 = load ptr, ptr %8, align 8, !tbaa !13
  %486 = load ptr, ptr %485, align 8, !tbaa !61
  %487 = call ptr (ptr, ...) @make_disjoint(ptr noundef %486) #43
  %488 = load ptr, ptr %8, align 8, !tbaa !13
  store ptr %487, ptr %488, align 8, !tbaa !61
  br label %690

489:                                              ; preds = %200
  %490 = load ptr, ptr %8, align 8, !tbaa !13
  %491 = load ptr, ptr %490, align 8, !tbaa !61
  %492 = load ptr, ptr %9, align 8, !tbaa !13
  %493 = load ptr, ptr %492, align 8, !tbaa !61
  %494 = call ptr (ptr, ptr, ...) @cv_dsharp(ptr noundef %491, ptr noundef %493) #43
  %495 = load ptr, ptr %8, align 8, !tbaa !13
  store ptr %494, ptr %495, align 8, !tbaa !61
  br label %690

496:                                              ; preds = %200
  %497 = load ptr, ptr %8, align 8, !tbaa !13
  %498 = load ptr, ptr %497, align 8, !tbaa !61
  %499 = load ptr, ptr %9, align 8, !tbaa !13
  %500 = load ptr, ptr %499, align 8, !tbaa !61
  %501 = call ptr (ptr, ptr, ...) @cv_sharp(ptr noundef %498, ptr noundef %500) #43
  %502 = load ptr, ptr %8, align 8, !tbaa !13
  store ptr %501, ptr %502, align 8, !tbaa !61
  br label %690

503:                                              ; preds = %200
  %504 = load ptr, ptr %8, align 8, !tbaa !13
  %505 = load ptr, ptr %504, align 8, !tbaa !61
  %506 = call ptr (ptr, ...) @lex_sort(ptr noundef %505) #43
  %507 = load ptr, ptr %8, align 8, !tbaa !13
  store ptr %506, ptr %507, align 8, !tbaa !61
  br label %690

508:                                              ; preds = %200
  %509 = load i32, ptr @summary, align 4, !tbaa !16
  %510 = icmp eq i32 %509, 0
  br i1 %510, label %511, label %513

511:                                              ; preds = %508
  %512 = load ptr, ptr %8, align 8, !tbaa !13
  call void (ptr, ...) @PLA_summary(ptr noundef %512) #43
  br label %513

513:                                              ; preds = %511, %508
  store i32 0, ptr @print_solution, align 4, !tbaa !16
  br label %690

514:                                              ; preds = %200
  %515 = load i32, ptr %4, align 4, !tbaa !16
  %516 = icmp sgt i32 %515, -1
  %517 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4
  %518 = icmp slt i32 %515, %517
  %519 = select i1 %516, i1 %518, i1 false
  br i1 %519, label %521, label %520

520:                                              ; preds = %514
  store i32 0, ptr %4, align 4, !tbaa !16
  br label %521

521:                                              ; preds = %520, %514
  %522 = phi i32 [ %515, %514 ], [ 0, %520 ]
  %523 = load i32, ptr %5, align 4, !tbaa !16
  %524 = icmp sgt i32 %523, -1
  %525 = icmp slt i32 %523, %517
  %526 = select i1 %524, i1 %525, i1 false
  br i1 %526, label %529, label %527

527:                                              ; preds = %521
  %528 = add nsw i32 %517, -1
  store i32 %528, ptr %5, align 4, !tbaa !16
  br label %529

529:                                              ; preds = %527, %521
  %530 = phi i32 [ %523, %521 ], [ %528, %527 ]
  %531 = load ptr, ptr %8, align 8, !tbaa !13
  %532 = load ptr, ptr %531, align 8, !tbaa !61
  %533 = call ptr (ptr, i32, i32, ...) @unravel_range(ptr noundef %532, i32 noundef %522, i32 noundef %530) #43
  %534 = call ptr (ptr, ...) @sf_dupl(ptr noundef %533) #43
  %535 = load ptr, ptr %8, align 8, !tbaa !13
  store ptr %534, ptr %535, align 8, !tbaa !61
  br label %690

536:                                              ; preds = %200
  %537 = load i32, ptr %4, align 4, !tbaa !16
  %538 = icmp sgt i32 %537, -1
  %539 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4
  %540 = icmp slt i32 %537, %539
  %541 = select i1 %538, i1 %540, i1 false
  br i1 %541, label %543, label %542

542:                                              ; preds = %536
  store i32 0, ptr %4, align 4, !tbaa !16
  br label %543

543:                                              ; preds = %542, %536
  %544 = phi i32 [ %537, %536 ], [ 0, %542 ]
  %545 = load i32, ptr %5, align 4, !tbaa !16
  %546 = icmp sgt i32 %545, -1
  %547 = icmp slt i32 %545, %539
  %548 = select i1 %546, i1 %547, i1 false
  br i1 %548, label %551, label %549

549:                                              ; preds = %543
  %550 = add nsw i32 %539, -1
  store i32 %550, ptr %5, align 4, !tbaa !16
  br label %551

551:                                              ; preds = %549, %543
  %552 = phi i32 [ %545, %543 ], [ %550, %549 ]
  %553 = icmp sgt i32 %544, %552
  br i1 %553, label %690, label %554

554:                                              ; preds = %554, %551
  %555 = phi i32 [ %560, %554 ], [ %544, %551 ]
  %556 = load ptr, ptr %8, align 8, !tbaa !13
  %557 = load ptr, ptr %556, align 8, !tbaa !61
  %558 = call ptr (ptr, i32, ...) @d1merge(ptr noundef %557, i32 noundef %555) #43
  %559 = load ptr, ptr %8, align 8, !tbaa !13
  store ptr %558, ptr %559, align 8, !tbaa !61
  %560 = add nsw i32 %555, 1
  %561 = load i32, ptr %5, align 4, !tbaa !16
  %562 = icmp slt i32 %555, %561
  br i1 %562, label %554, label %690

563:                                              ; preds = %563, %203
  %564 = phi i32 [ %569, %563 ], [ 0, %203 ]
  %565 = load ptr, ptr %8, align 8, !tbaa !13
  %566 = load ptr, ptr %565, align 8, !tbaa !61
  %567 = call ptr (ptr, i32, ...) @d1merge(ptr noundef %566, i32 noundef %564) #43
  %568 = load ptr, ptr %8, align 8, !tbaa !13
  store ptr %567, ptr %568, align 8, !tbaa !61
  %569 = add nuw nsw i32 %564, 1
  %570 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %571 = icmp slt i32 %569, %570
  br i1 %571, label %563, label %690

572:                                              ; preds = %200
  %573 = call i64 (...) @util_cpu_time() #43
  %574 = load ptr, ptr %8, align 8, !tbaa !13
  %575 = load ptr, ptr %9, align 8, !tbaa !13
  %576 = call i32 (ptr, ptr, ...) @PLA_verify(ptr noundef %574, ptr noundef %575) #43
  %577 = load ptr, ptr %8, align 8, !tbaa !13
  %578 = load ptr, ptr %577, align 8, !tbaa !61
  call void (i64, i32, ptr, ptr, ...) @totals(i64 noundef %573, i32 noundef 14, ptr noundef %578, ptr noundef nonnull %10) #43
  %579 = icmp eq i32 %576, 0
  br i1 %579, label %582, label %580

580:                                              ; preds = %572
  %581 = call i32 @puts(ptr nonnull dereferenceable(1) @str.141)
  call void @exit(i32 noundef 1) #49
  unreachable

582:                                              ; preds = %572
  %583 = call i32 @puts(ptr nonnull dereferenceable(1) @str.140)
  call void @exit(i32 noundef 0) #49
  unreachable

584:                                              ; preds = %200
  %585 = load ptr, ptr %8, align 8, !tbaa !13
  %586 = load ptr, ptr %585, align 8, !tbaa !61
  %587 = getelementptr inbounds %struct.PLA_t, ptr %585, i64 0, i32 1
  %588 = load ptr, ptr %587, align 8, !tbaa !62
  %589 = load ptr, ptr %9, align 8, !tbaa !13
  %590 = load ptr, ptr %589, align 8, !tbaa !61
  %591 = call i64 (...) @util_cpu_time() #43
  %592 = call i32 (ptr, ptr, ptr, ...) @verify(ptr noundef %590, ptr noundef %586, ptr noundef %588) #43
  %593 = load ptr, ptr %8, align 8, !tbaa !13
  %594 = load ptr, ptr %593, align 8, !tbaa !61
  call void (i64, i32, ptr, ptr, ...) @totals(i64 noundef %591, i32 noundef 14, ptr noundef %594, ptr noundef nonnull %10) #43
  %595 = icmp eq i32 %592, 0
  br i1 %595, label %598, label %596

596:                                              ; preds = %584
  %597 = call i32 @puts(ptr nonnull dereferenceable(1) @str.141)
  call void @exit(i32 noundef 1) #49
  unreachable

598:                                              ; preds = %584
  %599 = call i32 @puts(ptr nonnull dereferenceable(1) @str.140)
  call void @exit(i32 noundef 0) #49
  unreachable

600:                                              ; preds = %200
  %601 = load ptr, ptr %8, align 8, !tbaa !13
  %602 = call i32 (ptr, ...) @check_consistency(ptr noundef %601) #43
  store i32 0, ptr @print_solution, align 4, !tbaa !16
  br label %690

603:                                              ; preds = %200
  %604 = load ptr, ptr %8, align 8, !tbaa !13
  %605 = call i32 (ptr, ...) @map_dcset(ptr noundef %604) #43
  store i32 3, ptr %6, align 4, !tbaa !16
  br label %690

606:                                              ; preds = %200
  %607 = load ptr, ptr %8, align 8, !tbaa !13
  %608 = call i32 (ptr, ...) @find_equiv_outputs(ptr noundef %607) #43
  store i32 0, ptr @print_solution, align 4, !tbaa !16
  br label %690

609:                                              ; preds = %200
  %610 = load ptr, ptr %8, align 8, !tbaa !13
  %611 = getelementptr inbounds %struct.PLA_t, ptr %610, i64 0, i32 1
  %612 = load ptr, ptr %611, align 8, !tbaa !62
  %613 = getelementptr inbounds %struct.PLA_t, ptr %610, i64 0, i32 2
  %614 = load ptr, ptr %613, align 8, !tbaa !63
  %615 = call ptr (ptr, ptr, ...) @cube2list(ptr noundef %612, ptr noundef %614) #43
  %616 = call ptr (ptr, ...) @complement(ptr noundef %615) #43
  %617 = load ptr, ptr %8, align 8, !tbaa !13
  store ptr %616, ptr %617, align 8, !tbaa !61
  br label %690

618:                                              ; preds = %200
  %619 = load ptr, ptr %8, align 8, !tbaa !13
  %620 = load ptr, ptr %619, align 8, !tbaa !61
  %621 = load ptr, ptr %9, align 8, !tbaa !13
  %622 = getelementptr inbounds %struct.PLA_t, ptr %621, i64 0, i32 2
  %623 = load ptr, ptr %622, align 8, !tbaa !63
  %624 = call ptr (ptr, ptr, ...) @cv_intersect(ptr noundef %620, ptr noundef %623) #43
  %625 = load ptr, ptr %9, align 8, !tbaa !13
  %626 = load ptr, ptr %625, align 8, !tbaa !61
  %627 = load ptr, ptr %8, align 8, !tbaa !13
  %628 = getelementptr inbounds %struct.PLA_t, ptr %627, i64 0, i32 2
  %629 = load ptr, ptr %628, align 8, !tbaa !63
  %630 = call ptr (ptr, ptr, ...) @cv_intersect(ptr noundef %626, ptr noundef %629) #43
  %631 = load ptr, ptr %8, align 8, !tbaa !13
  %632 = load ptr, ptr %631, align 8, !tbaa !61
  call void (ptr, ...) @sf_free(ptr noundef %632) #43
  %633 = call ptr (ptr, ptr, ...) @sf_join(ptr noundef %624, ptr noundef %630) #43
  %634 = call ptr (ptr, ...) @sf_contain(ptr noundef %633) #43
  %635 = load ptr, ptr %8, align 8, !tbaa !13
  store ptr %634, ptr %635, align 8, !tbaa !61
  call void (ptr, ...) @sf_free(ptr noundef %624) #43
  call void (ptr, ...) @sf_free(ptr noundef %630) #43
  br label %690

636:                                              ; preds = %200
  %637 = load ptr, ptr %8, align 8, !tbaa !13
  %638 = load i32, ptr @summary, align 4, !tbaa !16
  %639 = call i32 (ptr, i32, ...) @disassemble_fsm(ptr noundef %637, i32 noundef %638) #43
  store i32 0, ptr @print_solution, align 4, !tbaa !16
  br label %690

640:                                              ; preds = %200
  %641 = load ptr, ptr %8, align 8, !tbaa !13
  %642 = getelementptr inbounds %struct.PLA_t, ptr %641, i64 0, i32 1
  %643 = load ptr, ptr %642, align 8, !tbaa !62
  %644 = getelementptr inbounds %struct.PLA_t, ptr %641, i64 0, i32 2
  %645 = load ptr, ptr %644, align 8, !tbaa !63
  %646 = call ptr (ptr, ptr, ...) @sf_join(ptr noundef %643, ptr noundef %645) #43
  %647 = load i32, ptr @cube, align 8, !tbaa !14
  %648 = call ptr (i32, i32, ...) @sf_new(i32 noundef 10, i32 noundef %647) #43
  %649 = load ptr, ptr %8, align 8, !tbaa !13
  %650 = load ptr, ptr %649, align 8, !tbaa !61
  call void (ptr, ...) @sf_free(ptr noundef %650) #43
  %651 = call i64 (...) @util_cpu_time() #43
  %652 = call ptr (ptr, ...) @cube1list(ptr noundef %646) #43
  %653 = call ptr (ptr, ...) @complement(ptr noundef %652) #43
  %654 = load ptr, ptr %8, align 8, !tbaa !13
  store ptr %653, ptr %654, align 8, !tbaa !61
  %655 = load ptr, ptr %8, align 8, !tbaa !13
  %656 = load ptr, ptr %655, align 8, !tbaa !61
  call void (i64, i32, ptr, ptr, ...) @totals(i64 noundef %651, i32 noundef 1, ptr noundef %656, ptr noundef nonnull %10) #43
  %657 = call i64 (...) @util_cpu_time() #43
  %658 = load ptr, ptr %8, align 8, !tbaa !13
  %659 = load ptr, ptr %658, align 8, !tbaa !61
  %660 = call ptr (ptr, ptr, i32, ...) @expand(ptr noundef %659, ptr noundef %646, i32 noundef 0) #43
  %661 = load ptr, ptr %8, align 8, !tbaa !13
  store ptr %660, ptr %661, align 8, !tbaa !61
  %662 = load ptr, ptr %8, align 8, !tbaa !13
  %663 = load ptr, ptr %662, align 8, !tbaa !61
  call void (i64, i32, ptr, ptr, ...) @totals(i64 noundef %657, i32 noundef 4, ptr noundef %663, ptr noundef nonnull %10) #43
  %664 = call i64 (...) @util_cpu_time() #43
  %665 = load ptr, ptr %8, align 8, !tbaa !13
  %666 = load ptr, ptr %665, align 8, !tbaa !61
  %667 = call ptr (ptr, ptr, ...) @irredundant(ptr noundef %666, ptr noundef %648) #43
  %668 = load ptr, ptr %8, align 8, !tbaa !13
  store ptr %667, ptr %668, align 8, !tbaa !61
  %669 = load ptr, ptr %8, align 8, !tbaa !13
  %670 = load ptr, ptr %669, align 8, !tbaa !61
  call void (i64, i32, ptr, ptr, ...) @totals(i64 noundef %664, i32 noundef 5, ptr noundef %670, ptr noundef nonnull %10) #43
  call void (ptr, ...) @sf_free(ptr noundef %646) #43
  %671 = load ptr, ptr %8, align 8, !tbaa !13
  %672 = load ptr, ptr %671, align 8, !tbaa !61
  %673 = getelementptr inbounds %struct.PLA_t, ptr %671, i64 0, i32 2
  %674 = load ptr, ptr %673, align 8, !tbaa !63
  %675 = call ptr (ptr, ptr, ...) @sf_join(ptr noundef %672, ptr noundef %674) #43
  %676 = call i64 (...) @util_cpu_time() #43
  %677 = load ptr, ptr %8, align 8, !tbaa !13
  %678 = getelementptr inbounds %struct.PLA_t, ptr %677, i64 0, i32 1
  %679 = load ptr, ptr %678, align 8, !tbaa !62
  %680 = call ptr (ptr, ptr, i32, ...) @expand(ptr noundef %679, ptr noundef %675, i32 noundef 0) #43
  %681 = load ptr, ptr %8, align 8, !tbaa !13
  %682 = getelementptr inbounds %struct.PLA_t, ptr %681, i64 0, i32 1
  store ptr %680, ptr %682, align 8, !tbaa !62
  call void (i64, i32, ptr, ptr, ...) @totals(i64 noundef %676, i32 noundef 4, ptr noundef %680, ptr noundef nonnull %10) #43
  %683 = call i64 (...) @util_cpu_time() #43
  %684 = load ptr, ptr %8, align 8, !tbaa !13
  %685 = getelementptr inbounds %struct.PLA_t, ptr %684, i64 0, i32 1
  %686 = load ptr, ptr %685, align 8, !tbaa !62
  %687 = call ptr (ptr, ptr, ...) @irredundant(ptr noundef %686, ptr noundef %648) #43
  %688 = load ptr, ptr %8, align 8, !tbaa !13
  %689 = getelementptr inbounds %struct.PLA_t, ptr %688, i64 0, i32 1
  store ptr %687, ptr %689, align 8, !tbaa !62
  call void (i64, i32, ptr, ptr, ...) @totals(i64 noundef %683, i32 noundef 5, ptr noundef %687, ptr noundef nonnull %10) #43
  call void (ptr, ...) @sf_free(ptr noundef %675) #43
  call void (ptr, ...) @sf_free(ptr noundef %648) #43
  br label %690

690:                                              ; preds = %640, %636, %618, %609, %606, %603, %600, %563, %554, %551, %529, %513, %503, %496, %489, %484, %477, %470, %465, %457, %454, %452, %449, %425, %422, %417, %405, %369, %360, %351, %344, %313, %303, %293, %289, %285, %280, %233, %229, %203, %200
  %691 = phi i32 [ 0, %417 ], [ 0, %280 ], [ 0, %233 ], [ 1, %229 ], [ 0, %285 ], [ 0, %289 ], [ 0, %293 ], [ 0, %303 ], [ 0, %313 ], [ 0, %344 ], [ 0, %351 ], [ 0, %360 ], [ 0, %369 ], [ %397, %405 ], [ 0, %422 ], [ 0, %425 ], [ 0, %449 ], [ 0, %452 ], [ 0, %454 ], [ 0, %640 ], [ 0, %457 ], [ 0, %465 ], [ 0, %470 ], [ 0, %477 ], [ 0, %484 ], [ 0, %489 ], [ 0, %496 ], [ 0, %503 ], [ 0, %513 ], [ 0, %529 ], [ 0, %600 ], [ 0, %603 ], [ 0, %606 ], [ 0, %609 ], [ 0, %618 ], [ 0, %636 ], [ 0, %200 ], [ 0, %551 ], [ 0, %203 ], [ 0, %554 ], [ 0, %563 ]
  %692 = load i32, ptr @trace, align 4
  %693 = icmp eq i32 %692, 0
  br i1 %693, label %698, label %694

694:                                              ; preds = %690
  %695 = call i32 @runtime() #44
  %696 = load i32, ptr @trace, align 4
  %697 = icmp ne i32 %696, 0
  br label %698

698:                                              ; preds = %694, %690, %406, %271
  %699 = phi i1 [ %697, %694 ], [ false, %690 ], [ false, %406 ], [ false, %271 ]
  %700 = phi i32 [ %691, %694 ], [ %691, %690 ], [ 0, %406 ], [ 0, %271 ]
  %701 = load i32, ptr @summary, align 4, !tbaa !16
  %702 = icmp ne i32 %701, 0
  %703 = select i1 %702, i1 true, i1 %699
  br i1 %703, label %704, label %711

704:                                              ; preds = %698
  %705 = load ptr, ptr %8, align 8, !tbaa !13
  %706 = load ptr, ptr %705, align 8, !tbaa !61
  %707 = getelementptr inbounds [44 x %struct.anon], ptr @option_table, i64 0, i64 %153
  %708 = load ptr, ptr %707, align 8, !tbaa !131
  %709 = call i64 (...) @util_cpu_time() #43
  %710 = sub nsw i64 %709, %11
  call void (ptr, ptr, i64, ...) @print_trace(ptr noundef %706, ptr noundef %708, i64 noundef %710) #43
  br label %711

711:                                              ; preds = %704, %698
  %712 = load i32, ptr @print_solution, align 4, !tbaa !16
  %713 = icmp eq i32 %712, 0
  br i1 %713, label %721, label %714

714:                                              ; preds = %711
  %715 = call i64 (...) @util_cpu_time() #43
  %716 = load ptr, ptr @stdout, align 8, !tbaa !13
  %717 = load ptr, ptr %8, align 8, !tbaa !13
  %718 = load i32, ptr %6, align 4, !tbaa !16
  call void (ptr, ptr, i32, ...) @fprint_pla(ptr noundef %716, ptr noundef %717, i32 noundef %718) #43
  %719 = load ptr, ptr %8, align 8, !tbaa !13
  %720 = load ptr, ptr %719, align 8, !tbaa !61
  call void (i64, i32, ptr, ptr, ...) @totals(i64 noundef %715, i32 noundef 15, ptr noundef %720, ptr noundef nonnull %10) #43
  br label %721

721:                                              ; preds = %714, %711
  %722 = icmp eq i32 %700, 0
  br i1 %722, label %724, label %723

723:                                              ; preds = %721
  call void (ptr, ...) @fatal(ptr noundef nonnull @.str.83) #43
  br label %724

724:                                              ; preds = %723, %721
  %725 = load ptr, ptr %8, align 8, !tbaa !13
  call void (ptr, ...) @free_PLA(ptr noundef %725) #43
  %726 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %727 = icmp eq ptr %726, null
  br i1 %727, label %729, label %728

728:                                              ; preds = %724
  call void @free(ptr noundef nonnull %726) #43
  store ptr null, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  br label %729

729:                                              ; preds = %728, %724
  call void (...) @setdown_cube() #43
  call void (...) @sf_cleanup() #43
  call void (...) @sm_cleanup() #43
  call void @exit(i32 noundef 0) #49
  unreachable
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @backward_compatibility_hack(ptr nocapture noundef %0, ptr nocapture noundef %1, ptr nocapture noundef writeonly %2, ptr nocapture noundef writeonly %3) #0 {
  store i32 0, ptr %2, align 4, !tbaa !16
  %5 = load i32, ptr %0, align 4, !tbaa !16
  %6 = add i32 %5, -1
  %7 = icmp sgt i32 %5, 2
  br i1 %7, label %8, label %156

8:                                                ; preds = %4
  %9 = zext i32 %6 to i64
  br label %10

10:                                               ; preds = %77, %8
  %11 = phi i64 [ 1, %8 ], [ %78, %77 ]
  %12 = getelementptr inbounds ptr, ptr %1, i64 %11
  %13 = load ptr, ptr %12, align 8, !tbaa !13
  %14 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %13, ptr noundef nonnull dereferenceable(4) @.str.132) #48
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %77

16:                                               ; preds = %10
  %.lcssa6 = phi i64 [ %11, %10 ]
  %17 = trunc i64 %.lcssa6 to i32
  %18 = load ptr, ptr @option_table, align 16, !tbaa !131
  %19 = icmp eq ptr %18, null
  br i1 %19, label %20, label %23

20:                                               ; preds = %16
  %21 = add nuw i64 %.lcssa6, 1
  %22 = and i64 %21, 4294967295
  br label %71

23:                                               ; preds = %16
  %24 = add nuw nsw i32 %17, 1
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds ptr, ptr %1, i64 %25
  %27 = load ptr, ptr %26, align 8, !tbaa !13
  br label %28

28:                                               ; preds = %61, %23
  %29 = phi i64 [ 0, %23 ], [ %62, %61 ]
  %30 = phi ptr [ %18, %23 ], [ %64, %61 ]
  %31 = phi ptr [ @option_table, %23 ], [ %63, %61 ]
  %32 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %27, ptr noundef nonnull dereferenceable(1) %30) #48
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %61

34:                                               ; preds = %28
  %.lcssa5 = phi i64 [ %29, %28 ]
  %.lcssa4 = phi ptr [ %31, %28 ]
  %35 = trunc i64 %.lcssa5 to i32
  store i32 %35, ptr %2, align 4, !tbaa !16
  %36 = load i32, ptr %0, align 4, !tbaa !16
  %37 = add nsw i32 %36, -1
  %38 = icmp sgt i32 %37, %24
  br i1 %38, label %39, label %48

39:                                               ; preds = %34
  %40 = sext i32 %37 to i64
  br label %41

41:                                               ; preds = %41, %39
  %42 = phi i64 [ %25, %39 ], [ %43, %41 ]
  %43 = add nuw nsw i64 %42, 1
  %44 = getelementptr inbounds ptr, ptr %1, i64 %43
  %45 = load ptr, ptr %44, align 8, !tbaa !13
  %46 = getelementptr inbounds ptr, ptr %1, i64 %42
  store ptr %45, ptr %46, align 8, !tbaa !13
  %47 = icmp eq i64 %43, %40
  br i1 %47, label %48, label %41

48:                                               ; preds = %41, %34
  %49 = add nsw i32 %36, -2
  store i32 %49, ptr %0, align 4, !tbaa !16
  %50 = icmp sgt i32 %49, %17
  br i1 %50, label %51, label %66

51:                                               ; preds = %48
  %52 = and i64 %.lcssa6, 4294967295
  %53 = sext i32 %49 to i64
  br label %54

54:                                               ; preds = %54, %51
  %55 = phi i64 [ %52, %51 ], [ %56, %54 ]
  %56 = add nuw nsw i64 %55, 1
  %57 = getelementptr inbounds ptr, ptr %1, i64 %56
  %58 = load ptr, ptr %57, align 8, !tbaa !13
  %59 = getelementptr inbounds ptr, ptr %1, i64 %55
  store ptr %58, ptr %59, align 8, !tbaa !13
  %60 = icmp eq i64 %56, %53
  br i1 %60, label %66, label %54

61:                                               ; preds = %28
  %62 = add nuw i64 %29, 1
  %63 = getelementptr inbounds [44 x %struct.anon], ptr @option_table, i64 0, i64 %62
  %64 = load ptr, ptr %63, align 8, !tbaa !131
  %65 = icmp eq ptr %64, null
  br i1 %65, label %71, label %28

66:                                               ; preds = %54, %48
  %67 = load ptr, ptr %.lcssa4, align 8, !tbaa !131
  %68 = icmp eq ptr %67, null
  br i1 %68, label %71, label %69

69:                                               ; preds = %66
  %70 = add i32 %36, -3
  br label %80

71:                                               ; preds = %66, %61, %20
  %72 = phi i64 [ %22, %20 ], [ %25, %66 ], [ %25, %61 ]
  %73 = load ptr, ptr @stderr, align 8, !tbaa !13
  %74 = getelementptr inbounds ptr, ptr %1, i64 %72
  %75 = load ptr, ptr %74, align 8, !tbaa !13
  %76 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %73, ptr noundef nonnull @.str.133, ptr noundef %75) #47
  tail call void @exit(i32 noundef 1) #49
  unreachable

77:                                               ; preds = %10
  %78 = add nuw nsw i64 %11, 1
  %79 = icmp eq i64 %78, %9
  br i1 %79, label %80, label %10

80:                                               ; preds = %77, %69
  %81 = phi i32 [ %70, %69 ], [ %6, %77 ]
  %82 = phi i32 [ %49, %69 ], [ %5, %77 ]
  %83 = icmp sgt i32 %82, 2
  br i1 %83, label %84, label %156

84:                                               ; preds = %80
  %85 = zext i32 %81 to i64
  br label %86

86:                                               ; preds = %153, %84
  %87 = phi i64 [ 1, %84 ], [ %154, %153 ]
  %88 = getelementptr inbounds ptr, ptr %1, i64 %87
  %89 = load ptr, ptr %88, align 8, !tbaa !13
  %90 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %89, ptr noundef nonnull dereferenceable(5) @.str.134) #48
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %153

92:                                               ; preds = %86
  %.lcssa3 = phi i64 [ %87, %86 ]
  %93 = trunc i64 %.lcssa3 to i32
  %94 = load ptr, ptr @pla_types, align 8, !tbaa !64
  %95 = icmp eq ptr %94, null
  br i1 %95, label %96, label %99

96:                                               ; preds = %92
  %97 = add nuw i64 %.lcssa3, 1
  %98 = and i64 %97, 4294967295
  br label %147

99:                                               ; preds = %92
  %100 = add nuw nsw i32 %93, 1
  %101 = zext i32 %100 to i64
  %102 = getelementptr inbounds ptr, ptr %1, i64 %101
  %103 = load ptr, ptr %102, align 8, !tbaa !13
  br label %109

104:                                              ; preds = %109
  %105 = add nuw i64 %110, 1
  %106 = getelementptr inbounds [0 x %struct.pla_types_struct], ptr @pla_types, i64 0, i64 %105
  %107 = load ptr, ptr %106, align 8, !tbaa !64
  %108 = icmp eq ptr %107, null
  br i1 %108, label %147, label %109

109:                                              ; preds = %104, %99
  %110 = phi i64 [ 0, %99 ], [ %105, %104 ]
  %111 = phi ptr [ %94, %99 ], [ %107, %104 ]
  %112 = phi ptr [ @pla_types, %99 ], [ %106, %104 ]
  %113 = getelementptr inbounds i8, ptr %111, i64 1
  %114 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %113, ptr noundef nonnull dereferenceable(1) %103) #48
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %116, label %104

116:                                              ; preds = %109
  %.lcssa2 = phi i64 [ %110, %109 ]
  %.lcssa1 = phi ptr [ %112, %109 ]
  %117 = getelementptr inbounds [0 x %struct.pla_types_struct], ptr @pla_types, i64 0, i64 %.lcssa2, i32 1
  %118 = load i32, ptr %117, align 8, !tbaa !66
  store i32 %118, ptr %3, align 4, !tbaa !16
  %119 = load i32, ptr %0, align 4, !tbaa !16
  %120 = add nsw i32 %119, -1
  %121 = icmp sgt i32 %120, %100
  br i1 %121, label %122, label %131

122:                                              ; preds = %116
  %123 = sext i32 %120 to i64
  br label %124

124:                                              ; preds = %124, %122
  %125 = phi i64 [ %101, %122 ], [ %126, %124 ]
  %126 = add nuw nsw i64 %125, 1
  %127 = getelementptr inbounds ptr, ptr %1, i64 %126
  %128 = load ptr, ptr %127, align 8, !tbaa !13
  %129 = getelementptr inbounds ptr, ptr %1, i64 %125
  store ptr %128, ptr %129, align 8, !tbaa !13
  %130 = icmp eq i64 %126, %123
  br i1 %130, label %131, label %124

131:                                              ; preds = %124, %116
  %132 = add nsw i32 %119, -2
  store i32 %132, ptr %0, align 4, !tbaa !16
  %133 = icmp sgt i32 %132, %93
  br i1 %133, label %134, label %144

134:                                              ; preds = %131
  %135 = and i64 %.lcssa3, 4294967295
  %136 = sext i32 %132 to i64
  br label %137

137:                                              ; preds = %137, %134
  %138 = phi i64 [ %135, %134 ], [ %139, %137 ]
  %139 = add nuw nsw i64 %138, 1
  %140 = getelementptr inbounds ptr, ptr %1, i64 %139
  %141 = load ptr, ptr %140, align 8, !tbaa !13
  %142 = getelementptr inbounds ptr, ptr %1, i64 %138
  store ptr %141, ptr %142, align 8, !tbaa !13
  %143 = icmp eq i64 %139, %136
  br i1 %143, label %144, label %137

144:                                              ; preds = %137, %131
  %145 = load ptr, ptr %.lcssa1, align 8, !tbaa !64
  %146 = icmp eq ptr %145, null
  br i1 %146, label %147, label %156

147:                                              ; preds = %144, %104, %96
  %148 = phi i64 [ %98, %96 ], [ %101, %144 ], [ %101, %104 ]
  %149 = load ptr, ptr @stderr, align 8, !tbaa !13
  %150 = getelementptr inbounds ptr, ptr %1, i64 %148
  %151 = load ptr, ptr %150, align 8, !tbaa !13
  %152 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %149, ptr noundef nonnull @.str.135, ptr noundef %151) #47
  tail call void @exit(i32 noundef 1) #49
  unreachable

153:                                              ; preds = %86
  %154 = add nuw nsw i64 %87, 1
  %155 = icmp eq i64 %154, %85
  br i1 %155, label %156, label %86

156:                                              ; preds = %153, %144, %80, %4
  %157 = phi i32 [ %82, %80 ], [ %132, %144 ], [ %5, %4 ], [ %82, %153 ]
  %158 = icmp sgt i32 %157, 1
  br i1 %158, label %159, label %203

159:                                              ; preds = %198, %156
  %160 = phi i32 [ %199, %198 ], [ %157, %156 ]
  %161 = phi i64 [ %200, %198 ], [ 1, %156 ]
  %162 = getelementptr inbounds ptr, ptr %1, i64 %161
  %163 = load ptr, ptr %162, align 8, !tbaa !13
  %164 = load i8, ptr %163, align 1, !tbaa !56
  %165 = icmp eq i8 %164, 45
  br i1 %165, label %166, label %198

166:                                              ; preds = %159
  %167 = load ptr, ptr @esp_opt_table, align 16, !tbaa !129
  %168 = icmp eq ptr %167, null
  br i1 %168, label %198, label %169

169:                                              ; preds = %166
  %170 = getelementptr inbounds i8, ptr %163, i64 1
  br label %176

171:                                              ; preds = %176
  %172 = add nuw i64 %177, 1
  %173 = getelementptr inbounds [12 x %struct.anon.1], ptr @esp_opt_table, i64 0, i64 %172
  %174 = load ptr, ptr %173, align 8, !tbaa !129
  %175 = icmp eq ptr %174, null
  br i1 %175, label %198, label %176

176:                                              ; preds = %171, %169
  %177 = phi i64 [ 0, %169 ], [ %172, %171 ]
  %178 = phi ptr [ %167, %169 ], [ %174, %171 ]
  %179 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %170, ptr noundef nonnull dereferenceable(1) %178) #48
  %180 = icmp eq i32 %179, 0
  br i1 %180, label %181, label %171

181:                                              ; preds = %176
  %.lcssa = phi i64 [ %177, %176 ]
  %182 = add nsw i32 %160, -1
  store i32 %182, ptr %0, align 4, !tbaa !16
  %183 = sext i32 %182 to i64
  %184 = icmp slt i64 %161, %183
  br i1 %184, label %185, label %192

185:                                              ; preds = %185, %181
  %186 = phi i64 [ %187, %185 ], [ %161, %181 ]
  %187 = add nuw nsw i64 %186, 1
  %188 = getelementptr inbounds ptr, ptr %1, i64 %187
  %189 = load ptr, ptr %188, align 8, !tbaa !13
  %190 = getelementptr inbounds ptr, ptr %1, i64 %186
  store ptr %189, ptr %190, align 8, !tbaa !13
  %191 = icmp eq i64 %187, %183
  br i1 %191, label %192, label %185

192:                                              ; preds = %185, %181
  %193 = getelementptr inbounds [12 x %struct.anon.1], ptr @esp_opt_table, i64 0, i64 %.lcssa, i32 2
  %194 = load i32, ptr %193, align 8, !tbaa !133
  %195 = getelementptr inbounds [12 x %struct.anon.1], ptr @esp_opt_table, i64 0, i64 %.lcssa, i32 1
  %196 = load ptr, ptr %195, align 8, !tbaa !134
  store i32 %194, ptr %196, align 4, !tbaa !16
  %197 = load i32, ptr %0, align 4, !tbaa !16
  br label %198

198:                                              ; preds = %192, %171, %166, %159
  %199 = phi i32 [ %160, %166 ], [ %160, %159 ], [ %197, %192 ], [ %160, %171 ]
  %200 = add nuw nsw i64 %161, 1
  %201 = sext i32 %199 to i64
  %202 = icmp slt i64 %200, %201
  br i1 %202, label %159, label %203

203:                                              ; preds = %198, %156
  %204 = tail call i32 @check_arg(ptr noundef nonnull %0, ptr noundef %1, ptr noundef nonnull @.str.136) #44, !range !67
  %205 = icmp eq i32 %204, 0
  br i1 %205, label %207, label %206

206:                                              ; preds = %203
  store i32 7, ptr @input_type, align 4, !tbaa !16
  br label %207

207:                                              ; preds = %206, %203
  %208 = tail call i32 @check_arg(ptr noundef nonnull %0, ptr noundef %1, ptr noundef nonnull @.str.137) #44, !range !67
  %209 = icmp eq i32 %208, 0
  br i1 %209, label %211, label %210

210:                                              ; preds = %207
  store i32 5, ptr @input_type, align 4, !tbaa !16
  br label %211

211:                                              ; preds = %210, %207
  %212 = tail call i32 @check_arg(ptr noundef nonnull %0, ptr noundef %1, ptr noundef nonnull @.str.138.337) #44, !range !67
  %213 = icmp eq i32 %212, 0
  br i1 %213, label %215, label %214

214:                                              ; preds = %211
  store i32 1, ptr @input_type, align 4, !tbaa !16
  br label %215

215:                                              ; preds = %214, %211
  ret i32 undef
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(read)
declare i32 @atoi(ptr nocapture noundef) local_unnamed_addr #26

; Function Attrs: nofree nounwind optsize uwtable
define internal i32 @usage() #14 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.108, ptr noundef nonnull @.str.73) #44
  %2 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.142)
  %3 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.143)
  %4 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.144)
  %5 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.145)
  %6 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.146)
  %7 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.147)
  %8 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.148)
  %9 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.149)
  %10 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.150)
  %11 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.151)
  %12 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.152)
  %13 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.153)
  %14 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.154)
  %15 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.155)
  %16 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.156)
  %17 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.157)
  %18 = tail call i32 @subcommands() #44
  %19 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.158)
  %20 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.159)
  %21 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.160)
  %22 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.161)
  %23 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.162)
  %24 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.163)
  %25 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.164)
  ret i32 undef
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @getPLA(i32 noundef %0, i32 noundef %1, ptr nocapture noundef readonly %2, i32 noundef %3, ptr noundef %4, i32 noundef %5) #0 {
  %7 = icmp slt i32 %0, %1
  br i1 %7, label %10, label %8

8:                                                ; preds = %6
  %9 = load ptr, ptr @stdin, align 8, !tbaa !13
  br label %25

10:                                               ; preds = %6
  %11 = sext i32 %0 to i64
  %12 = getelementptr inbounds ptr, ptr %2, i64 %11
  %13 = load ptr, ptr %12, align 8, !tbaa !13
  %14 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %13, ptr noundef nonnull dereferenceable(2) @.str.85) #48
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %10
  %17 = load ptr, ptr @stdin, align 8, !tbaa !13
  br label %25

18:                                               ; preds = %10
  %19 = tail call noalias ptr @fopen(ptr noundef %13, ptr noundef nonnull @.str.86) #44
  %20 = icmp eq ptr %19, null
  br i1 %20, label %21, label %25

21:                                               ; preds = %18
  %22 = load ptr, ptr @stderr, align 8, !tbaa !13
  %23 = load ptr, ptr %2, align 8, !tbaa !13
  %24 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.87, ptr noundef %23, ptr noundef %13) #47
  tail call void @exit(i32 noundef 1) #49
  unreachable

25:                                               ; preds = %18, %16, %8
  %26 = phi ptr [ %9, %8 ], [ %17, %16 ], [ %19, %18 ]
  %27 = phi ptr [ @.str.84, %8 ], [ %13, %16 ], [ %13, %18 ]
  %28 = sext i32 %3 to i64
  %29 = getelementptr inbounds [44 x %struct.anon], ptr @option_table, i64 0, i64 %28, i32 1
  %30 = load i32, ptr %29, align 8, !tbaa !139
  %31 = icmp eq i32 %30, 7
  br i1 %31, label %32, label %37

32:                                               ; preds = %25
  %33 = lshr i32 %5, 1
  %34 = and i32 %33, 1
  %35 = lshr i32 %5, 2
  %36 = and i32 %35, 1
  br label %42

37:                                               ; preds = %25
  %38 = getelementptr inbounds [44 x %struct.anon], ptr @option_table, i64 0, i64 %28, i32 4
  %39 = load i32, ptr %38, align 4, !tbaa !140
  %40 = getelementptr inbounds [44 x %struct.anon], ptr @option_table, i64 0, i64 %28, i32 3
  %41 = load i32, ptr %40, align 8, !tbaa !141
  br label %42

42:                                               ; preds = %37, %32
  %43 = phi i32 [ %34, %32 ], [ %39, %37 ]
  %44 = phi i32 [ %36, %32 ], [ %41, %37 ]
  %45 = load i32, ptr @input_type, align 4, !tbaa !16
  %46 = tail call i32 (ptr, i32, i32, i32, ptr, ...) @read_pla(ptr noundef %26, i32 noundef %43, i32 noundef %44, i32 noundef %45, ptr noundef %4) #43
  %47 = icmp eq i32 %46, -1
  br i1 %47, label %48, label %52

48:                                               ; preds = %42
  %49 = load ptr, ptr @stderr, align 8, !tbaa !13
  %50 = load ptr, ptr %2, align 8, !tbaa !13
  %51 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %49, ptr noundef nonnull @.str.88, ptr noundef %50, ptr noundef %27) #47
  tail call void @exit(i32 noundef 1) #49
  unreachable

52:                                               ; preds = %42
  %53 = tail call ptr @util_strsav(ptr noundef %27) #43
  %54 = load ptr, ptr %4, align 8, !tbaa !13
  %55 = getelementptr inbounds %struct.PLA_t, ptr %54, i64 0, i32 3
  store ptr %53, ptr %55, align 8, !tbaa !89
  %56 = load ptr, ptr %4, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.PLA_t, ptr %56, i64 0, i32 3
  %58 = load ptr, ptr %57, align 8, !tbaa !89
  store ptr %58, ptr @filename, align 8, !tbaa !13
  store ptr %26, ptr @last_fp, align 8, !tbaa !13
  ret i32 undef
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @runtime() #0 {
  br label %1

1:                                                ; preds = %13, %0
  %2 = phi i64 [ 0, %0 ], [ %14, %13 ]
  %3 = getelementptr inbounds [16 x i32], ptr @total_calls, i64 0, i64 %2
  %4 = load i32, ptr %3, align 4, !tbaa !16
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %13, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds [16 x i64], ptr @total_time, i64 0, i64 %2
  %8 = load i64, ptr %7, align 8, !tbaa !97
  %9 = getelementptr inbounds [16 x ptr], ptr @total_name, i64 0, i64 %2
  %10 = load ptr, ptr %9, align 8, !tbaa !13
  %11 = tail call ptr @util_print_time(i64 noundef %8) #43
  %12 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.89, ptr noundef %10, i32 noundef %4, ptr noundef %11, i64 noundef 0, i64 noundef 0) #44
  br label %13

13:                                               ; preds = %6, %1
  %14 = add nuw nsw i64 %2, 1
  %15 = icmp eq i64 %14, 16
  br i1 %15, label %16, label %1

16:                                               ; preds = %13
  ret i32 undef
}

; Function Attrs: nofree nounwind optsize uwtable
define internal i32 @subcommands() #14 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.104) #44
  %2 = load ptr, ptr @option_table, align 16, !tbaa !131
  %3 = icmp eq ptr %2, null
  br i1 %3, label %33, label %4

4:                                                ; preds = %20, %0
  %5 = phi i64 [ %29, %20 ], [ 0, %0 ]
  %6 = phi ptr [ %31, %20 ], [ %2, %0 ]
  %7 = phi ptr [ %30, %20 ], [ @option_table, %0 ]
  %8 = phi i32 [ %28, %20 ], [ 16, %0 ]
  %9 = sext i32 %8 to i64
  %10 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %6) #48
  %11 = add nsw i64 %9, -76
  %12 = add i64 %11, %10
  %13 = icmp ult i64 %12, -77
  br i1 %13, label %16, label %14

14:                                               ; preds = %4
  %15 = icmp eq i64 %5, 0
  br i1 %15, label %20, label %16

16:                                               ; preds = %14, %4
  %17 = phi ptr [ @.str.105, %4 ], [ @.str.106, %14 ]
  %18 = phi i32 [ 16, %4 ], [ %8, %14 ]
  %19 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) %17) #44
  br label %20

20:                                               ; preds = %16, %14
  %21 = phi i32 [ %8, %14 ], [ %18, %16 ]
  %22 = load ptr, ptr %7, align 8, !tbaa !131
  %23 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.107, ptr noundef %22) #44
  %24 = load ptr, ptr %7, align 8, !tbaa !131
  %25 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %24) #48
  %26 = trunc i64 %25 to i32
  %27 = add i32 %21, 2
  %28 = add i32 %27, %26
  %29 = add nuw i64 %5, 1
  %30 = getelementptr inbounds [44 x %struct.anon], ptr @option_table, i64 0, i64 %29
  %31 = load ptr, ptr %30, align 8, !tbaa !131
  %32 = icmp eq ptr %31, null
  br i1 %32, label %33, label %4

33:                                               ; preds = %20, %0
  %34 = tail call i32 @putchar(i32 10)
  ret i32 undef
}

; Function Attrs: nofree nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal i32 @check_arg(ptr nocapture noundef %0, ptr nocapture noundef %1, ptr nocapture noundef readonly %2) #27 {
  %4 = load i32, ptr %0, align 4, !tbaa !16
  %5 = icmp sgt i32 %4, 1
  br i1 %5, label %6, label %31

6:                                                ; preds = %3
  %7 = zext i32 %4 to i64
  br label %8

8:                                                ; preds = %28, %6
  %9 = phi i64 [ 1, %6 ], [ %29, %28 ]
  %10 = getelementptr inbounds ptr, ptr %1, i64 %9
  %11 = load ptr, ptr %10, align 8, !tbaa !13
  %12 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %11, ptr noundef nonnull dereferenceable(1) %2) #48
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %28

14:                                               ; preds = %8
  %.lcssa = phi i64 [ %9, %8 ]
  %15 = trunc i64 %.lcssa to i32
  %16 = add nsw i32 %4, -1
  store i32 %16, ptr %0, align 4, !tbaa !16
  %17 = icmp sgt i32 %16, %15
  br i1 %17, label %18, label %31

18:                                               ; preds = %14
  %19 = and i64 %.lcssa, 4294967295
  %20 = sext i32 %16 to i64
  br label %21

21:                                               ; preds = %21, %18
  %22 = phi i64 [ %19, %18 ], [ %23, %21 ]
  %23 = add nuw nsw i64 %22, 1
  %24 = getelementptr inbounds ptr, ptr %1, i64 %23
  %25 = load ptr, ptr %24, align 8, !tbaa !13
  %26 = getelementptr inbounds ptr, ptr %1, i64 %22
  store ptr %25, ptr %26, align 8, !tbaa !13
  %27 = icmp eq i64 %23, %20
  br i1 %27, label %31, label %21

28:                                               ; preds = %8
  %29 = add nuw nsw i64 %9, 1
  %30 = icmp eq i64 %29, %7
  br i1 %30, label %31, label %8

31:                                               ; preds = %28, %21, %14, %3
  %32 = phi i32 [ 1, %14 ], [ 0, %3 ], [ 1, %21 ], [ 0, %28 ]
  ret i32 %32
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @minterms(ptr nocapture noundef readonly %0) #0 {
  %2 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %3 = icmp sgt i32 %2, 0
  br i1 %3, label %4, label %21

4:                                                ; preds = %1
  %5 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %6 = zext i32 %2 to i64
  br label %7

7:                                                ; preds = %7, %4
  %8 = phi i64 [ 0, %4 ], [ %13, %7 ]
  %9 = phi i32 [ 1, %4 ], [ %12, %7 ]
  %10 = getelementptr inbounds i32, ptr %5, i64 %8
  %11 = load i32, ptr %10, align 4, !tbaa !16
  %12 = mul nsw i32 %11, %9
  %13 = add nuw nsw i64 %8, 1
  %14 = icmp eq i64 %13, %6
  br i1 %14, label %15, label %7

15:                                               ; preds = %7
  %.lcssa = phi i32 [ %12, %7 ]
  %16 = icmp slt i32 %.lcssa, 33
  %17 = add nsw i32 %.lcssa, -1
  %18 = lshr i32 %17, 3
  %19 = and i32 %18, 536870908
  %20 = add nuw nsw i32 %19, 8
  br i1 %16, label %21, label %23

21:                                               ; preds = %15, %1
  %22 = phi i32 [ %.lcssa, %15 ], [ 1, %1 ]
  br label %23

23:                                               ; preds = %21, %15
  %24 = phi i32 [ %22, %21 ], [ %.lcssa, %15 ]
  %25 = phi i32 [ 8, %21 ], [ %20, %15 ]
  %26 = zext i32 %25 to i64
  %27 = tail call noalias ptr @malloc(i64 noundef %26) #42
  %28 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %27, i32 noundef %24) #43
  store ptr %28, ptr @Gminterm, align 8, !tbaa !13
  %29 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %30 = load ptr, ptr %29, align 8, !tbaa !33
  store ptr %30, ptr @Gcube, align 8, !tbaa !13
  %31 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %32 = load i32, ptr %31, align 4, !tbaa !31
  %33 = load i32, ptr %0, align 8, !tbaa !34
  %34 = mul nsw i32 %33, %32
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds i32, ptr %30, i64 %35
  %37 = icmp sgt i32 %34, 0
  br i1 %37, label %38, label %48

38:                                               ; preds = %38, %23
  %39 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %40 = add nsw i32 %39, -1
  tail call void @explode(i32 noundef %40, i32 noundef 0) #44
  %41 = load i32, ptr %0, align 8, !tbaa !34
  %42 = load ptr, ptr @Gcube, align 8, !tbaa !13
  %43 = sext i32 %41 to i64
  %44 = getelementptr inbounds i32, ptr %42, i64 %43
  store ptr %44, ptr @Gcube, align 8, !tbaa !13
  %45 = icmp ult ptr %44, %36
  br i1 %45, label %38, label %46

46:                                               ; preds = %38
  %47 = load ptr, ptr @Gminterm, align 8, !tbaa !13
  br label %48

48:                                               ; preds = %46, %23
  %49 = phi ptr [ %47, %46 ], [ %28, %23 ]
  ret ptr %49
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @explode(i32 noundef %0, i32 noundef %1) #3 {
  %3 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  %4 = sext i32 %0 to i64
  %5 = getelementptr inbounds i32, ptr %3, i64 %4
  %6 = load i32, ptr %5, align 4, !tbaa !16
  %7 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %8 = getelementptr inbounds i32, ptr %7, i64 %4
  %9 = load i32, ptr %8, align 4, !tbaa !16
  %10 = icmp sgt i32 %9, %6
  br i1 %10, label %50, label %11

11:                                               ; preds = %2
  %12 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %13 = getelementptr inbounds i32, ptr %12, i64 %4
  %14 = load i32, ptr %13, align 4, !tbaa !16
  %15 = mul nsw i32 %14, %1
  %16 = icmp eq i32 %0, 0
  %17 = add nsw i32 %0, -1
  %18 = load ptr, ptr @Gcube, align 8, !tbaa !13
  br label %19

19:                                               ; preds = %45, %11
  %20 = phi ptr [ %18, %11 ], [ %46, %45 ]
  %21 = phi i32 [ %15, %11 ], [ %48, %45 ]
  %22 = phi i32 [ %9, %11 ], [ %47, %45 ]
  %23 = ashr i32 %22, 5
  %24 = add nsw i32 %23, 1
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i32, ptr %20, i64 %25
  %27 = load i32, ptr %26, align 4, !tbaa !16
  %28 = and i32 %22, 31
  %29 = shl nuw i32 1, %28
  %30 = and i32 %27, %29
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %45, label %32

32:                                               ; preds = %19
  br i1 %16, label %33, label %43

33:                                               ; preds = %32
  %34 = and i32 %21, 31
  %35 = shl nuw i32 1, %34
  %36 = load ptr, ptr @Gminterm, align 8, !tbaa !13
  %37 = ashr i32 %21, 5
  %38 = add nsw i32 %37, 1
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i32, ptr %36, i64 %39
  %41 = load i32, ptr %40, align 4, !tbaa !16
  %42 = or i32 %41, %35
  store i32 %42, ptr %40, align 4, !tbaa !16
  br label %45

43:                                               ; preds = %32
  tail call void @explode(i32 noundef %17, i32 noundef %21) #44
  %44 = load ptr, ptr @Gcube, align 8, !tbaa !13
  br label %45

45:                                               ; preds = %43, %33, %19
  %46 = phi ptr [ %20, %19 ], [ %44, %43 ], [ %20, %33 ]
  %47 = add i32 %22, 1
  %48 = add nsw i32 %21, 1
  %49 = icmp eq i32 %22, %6
  br i1 %49, label %50, label %19

50:                                               ; preds = %45, %2
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @map(ptr nocapture noundef readonly %0) #0 {
  %2 = tail call ptr @minterms(ptr noundef %0) #44
  %3 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %4 = shl nuw i32 1, %3
  %5 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %6 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %7 = add nsw i32 %6, -1
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds i32, ptr %5, i64 %8
  %10 = load i32, ptr %9, align 4, !tbaa !16
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %12, label %89

12:                                               ; preds = %86, %1
  %13 = phi i32 [ %87, %86 ], [ 0, %1 ]
  %14 = shl i32 %13, %3
  %15 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.340, i32 noundef %13) #44
  br label %16

16:                                               ; preds = %80, %12
  %17 = phi i32 [ %81, %80 ], [ 0, %12 ]
  %18 = shl nsw i32 %17, 8
  br label %19

19:                                               ; preds = %78, %16
  %20 = phi i64 [ 0, %16 ], [ %61, %78 ]
  br label %21

21:                                               ; preds = %54, %19
  %22 = phi i64 [ 0, %19 ], [ %43, %54 ]
  %23 = phi i32 [ 0, %19 ], [ %42, %54 ]
  %24 = getelementptr inbounds [16 x [16 x i32]], ptr @mapindex, i64 0, i64 %20, i64 %22
  %25 = load i32, ptr %24, align 4, !tbaa !16
  %26 = add nsw i32 %25, %18
  %27 = icmp slt i32 %26, %4
  br i1 %27, label %28, label %41

28:                                               ; preds = %21
  %29 = add nsw i32 %26, %14
  %30 = ashr i32 %29, 5
  %31 = add nsw i32 %30, 1
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, ptr %2, i64 %32
  %34 = load i32, ptr %33, align 4, !tbaa !16
  %35 = and i32 %29, 31
  %36 = shl nuw i32 1, %35
  %37 = and i32 %34, %36
  %38 = icmp eq i32 %37, 0
  %39 = select i1 %38, i32 46, i32 49
  %40 = tail call i32 @putchar(i32 noundef %39) #44
  br label %41

41:                                               ; preds = %28, %21
  %42 = phi i32 [ 1, %28 ], [ %23, %21 ]
  %43 = add nuw nsw i64 %22, 1
  %44 = trunc i64 %43 to i32
  %45 = and i32 %44, 3
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %49

47:                                               ; preds = %41
  %48 = tail call i32 @putchar(i32 noundef 32) #44
  br label %49

49:                                               ; preds = %47, %41
  %50 = and i32 %44, 7
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %49
  %53 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1.341) #44
  br label %54

54:                                               ; preds = %52, %49
  %55 = icmp eq i64 %43, 16
  br i1 %55, label %56, label %21

56:                                               ; preds = %54
  %.lcssa = phi i32 [ %42, %54 ]
  %57 = icmp eq i32 %.lcssa, 0
  br i1 %57, label %60, label %58

58:                                               ; preds = %56
  %59 = tail call i32 @putchar(i32 noundef 10) #44
  br label %60

60:                                               ; preds = %58, %56
  %61 = add nuw nsw i64 %20, 1
  %62 = trunc i64 %61 to i32
  %63 = and i32 %62, 3
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %73

65:                                               ; preds = %60
  %66 = icmp eq i64 %20, 15
  br i1 %66, label %71, label %67

67:                                               ; preds = %65
  %68 = getelementptr inbounds [16 x [16 x i32]], ptr @mapindex, i64 0, i64 %61
  %69 = load i32, ptr %68, align 16, !tbaa !16
  %70 = icmp slt i32 %69, %4
  br i1 %70, label %71, label %80

71:                                               ; preds = %67, %65
  %72 = tail call i32 @putchar(i32 noundef 10) #44
  br label %73

73:                                               ; preds = %71, %60
  %74 = and i32 %62, 7
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %76, label %78

76:                                               ; preds = %73
  %77 = tail call i32 @putchar(i32 noundef 10) #44
  br label %78

78:                                               ; preds = %76, %73
  %79 = icmp eq i64 %61, 16
  br i1 %79, label %80, label %19

80:                                               ; preds = %78, %67
  %81 = add nuw nsw i32 %17, 1
  %82 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8
  %83 = tail call i32 @llvm.smax.i32(i32 %82, i32 8)
  %84 = add nsw i32 %83, -8
  %85 = icmp ult i32 %17, %84
  br i1 %85, label %16, label %86

86:                                               ; preds = %80
  %87 = add nuw nsw i32 %13, 1
  %88 = icmp eq i32 %87, %10
  br i1 %88, label %89, label %12

89:                                               ; preds = %86, %1
  %90 = icmp eq ptr %2, null
  br i1 %90, label %92, label %91

91:                                               ; preds = %89
  tail call void @free(ptr noundef nonnull %2) #43
  br label %92

92:                                               ; preds = %91, %89
  ret void
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write, argmem: none, inaccessiblemem: readwrite) uwtable
define internal noalias ptr @sm_alloc() #6 {
  %1 = tail call noalias dereferenceable_or_null(88) ptr @malloc(i64 noundef 88) #42
  store ptr null, ptr %1, align 8, !tbaa !108
  %2 = getelementptr inbounds %struct.sm_matrix_struct, ptr %1, i64 0, i32 2
  store ptr null, ptr %2, align 8, !tbaa !105
  %3 = getelementptr inbounds %struct.sm_matrix_struct, ptr %1, i64 0, i32 3
  store i32 0, ptr %3, align 8, !tbaa !104
  %4 = getelementptr inbounds %struct.sm_matrix_struct, ptr %1, i64 0, i32 1
  store i32 0, ptr %4, align 8, !tbaa !107
  %5 = getelementptr inbounds %struct.sm_matrix_struct, ptr %1, i64 0, i32 4
  %6 = getelementptr inbounds %struct.sm_matrix_struct, ptr %1, i64 0, i32 7
  %7 = getelementptr inbounds %struct.sm_matrix_struct, ptr %1, i64 0, i32 10
  store ptr null, ptr %7, align 8, !tbaa !142
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(20) %5, i8 0, i64 20, i1 false)
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(20) %6, i8 0, i64 20, i1 false)
  ret ptr %1
}

; Function Attrs: nounwind optsize uwtable
define internal void @sm_free(ptr nocapture noundef %0) #0 {
  %2 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 4
  %3 = load ptr, ptr %2, align 8, !tbaa !124
  %4 = icmp eq ptr %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %5, %1
  %6 = phi ptr [ %8, %5 ], [ %3, %1 ]
  %7 = getelementptr inbounds %struct.sm_col_struct, ptr %6, i64 0, i32 5
  %8 = load ptr, ptr %7, align 8, !tbaa !125
  tail call void (ptr, ...) @sm_row_free(ptr noundef nonnull %6) #43
  %9 = icmp eq ptr %8, null
  br i1 %9, label %10, label %5

10:                                               ; preds = %5, %1
  %11 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 7
  %12 = load ptr, ptr %11, align 8, !tbaa !112
  %13 = icmp eq ptr %12, null
  br i1 %13, label %20, label %14

14:                                               ; preds = %14, %10
  %15 = phi ptr [ %17, %14 ], [ %12, %10 ]
  %16 = getelementptr inbounds %struct.sm_col_struct, ptr %15, i64 0, i32 5
  %17 = load ptr, ptr %16, align 8, !tbaa !113
  %18 = getelementptr inbounds %struct.sm_col_struct, ptr %15, i64 0, i32 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %18, i8 0, i64 16, i1 false)
  tail call void (ptr, ...) @sm_col_free(ptr noundef nonnull %15) #43
  %19 = icmp eq ptr %17, null
  br i1 %19, label %20, label %14

20:                                               ; preds = %14, %10
  %21 = load ptr, ptr %0, align 8, !tbaa !108
  %22 = icmp eq ptr %21, null
  br i1 %22, label %24, label %23

23:                                               ; preds = %20
  tail call void @free(ptr noundef nonnull %21) #43
  store ptr null, ptr %0, align 8, !tbaa !108
  br label %24

24:                                               ; preds = %23, %20
  %25 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 2
  %26 = load ptr, ptr %25, align 8, !tbaa !105
  %27 = icmp eq ptr %26, null
  br i1 %27, label %29, label %28

28:                                               ; preds = %24
  tail call void @free(ptr noundef nonnull %26) #43
  br label %29

29:                                               ; preds = %28, %24
  tail call void @free(ptr noundef nonnull %0) #43
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal noalias ptr @sm_dup(ptr nocapture noundef readonly %0) #0 {
  %2 = tail call noalias dereferenceable_or_null(88) ptr @malloc(i64 noundef 88) #42
  store ptr null, ptr %2, align 8, !tbaa !108
  %3 = getelementptr inbounds %struct.sm_matrix_struct, ptr %2, i64 0, i32 2
  store ptr null, ptr %3, align 8, !tbaa !105
  %4 = getelementptr inbounds %struct.sm_matrix_struct, ptr %2, i64 0, i32 3
  store i32 0, ptr %4, align 8, !tbaa !104
  %5 = getelementptr inbounds %struct.sm_matrix_struct, ptr %2, i64 0, i32 1
  store i32 0, ptr %5, align 8, !tbaa !107
  %6 = getelementptr inbounds %struct.sm_matrix_struct, ptr %2, i64 0, i32 4
  %7 = getelementptr inbounds %struct.sm_matrix_struct, ptr %2, i64 0, i32 7
  %8 = getelementptr inbounds %struct.sm_matrix_struct, ptr %2, i64 0, i32 10
  store ptr null, ptr %8, align 8, !tbaa !142
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(20) %6, i8 0, i64 20, i1 false)
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(20) %7, i8 0, i64 20, i1 false)
  %9 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 5
  %10 = load ptr, ptr %9, align 8, !tbaa !127
  %11 = icmp eq ptr %10, null
  br i1 %11, label %38, label %12

12:                                               ; preds = %1
  %13 = load i32, ptr %10, align 8, !tbaa !110
  %14 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 8
  %15 = load ptr, ptr %14, align 8, !tbaa !143
  %16 = load i32, ptr %15, align 8, !tbaa !35
  tail call void @sm_resize(ptr noundef nonnull %2, i32 noundef %13, i32 noundef %16) #44
  %17 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 4
  %18 = load ptr, ptr %17, align 8, !tbaa !13
  %19 = icmp eq ptr %18, null
  br i1 %19, label %38, label %20

20:                                               ; preds = %34, %12
  %21 = phi ptr [ %36, %34 ], [ %18, %12 ]
  %22 = getelementptr inbounds %struct.sm_col_struct, ptr %21, i64 0, i32 3
  %23 = load ptr, ptr %22, align 8, !tbaa !13
  %24 = icmp eq ptr %23, null
  br i1 %24, label %34, label %25

25:                                               ; preds = %25, %20
  %26 = phi ptr [ %32, %25 ], [ %23, %20 ]
  %27 = load i32, ptr %26, align 8, !tbaa !42
  %28 = getelementptr inbounds %struct.sm_element_struct, ptr %26, i64 0, i32 1
  %29 = load i32, ptr %28, align 4, !tbaa !103
  %30 = tail call ptr @sm_insert(ptr noundef nonnull %2, i32 noundef %27, i32 noundef %29) #44
  %31 = getelementptr inbounds %struct.sm_element_struct, ptr %26, i64 0, i32 4
  %32 = load ptr, ptr %31, align 8, !tbaa !13
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %25

34:                                               ; preds = %25, %20
  %35 = getelementptr inbounds %struct.sm_col_struct, ptr %21, i64 0, i32 5
  %36 = load ptr, ptr %35, align 8, !tbaa !13
  %37 = icmp eq ptr %36, null
  br i1 %37, label %38, label %20

38:                                               ; preds = %34, %12, %1
  ret ptr %2
}

; Function Attrs: nounwind optsize uwtable
define internal void @sm_resize(ptr nocapture noundef %0, i32 noundef %1, i32 noundef %2) #0 {
  %4 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 1
  %5 = load i32, ptr %4, align 8, !tbaa !107
  %6 = icmp sgt i32 %5, %1
  br i1 %6, label %34, label %7

7:                                                ; preds = %3
  %8 = shl nsw i32 %5, 1
  %9 = add nsw i32 %1, 1
  %10 = tail call i32 @llvm.smax.i32(i32 %8, i32 %9)
  %11 = load ptr, ptr %0, align 8, !tbaa !108
  %12 = icmp eq ptr %11, null
  %13 = sext i32 %10 to i64
  %14 = shl nsw i64 %13, 3
  br i1 %12, label %18, label %15

15:                                               ; preds = %7
  %16 = tail call ptr @realloc(ptr noundef nonnull %11, i64 noundef %14) #51
  %17 = load i32, ptr %4, align 8, !tbaa !107
  br label %20

18:                                               ; preds = %7
  %19 = tail call noalias ptr @malloc(i64 noundef %14) #42
  br label %20

20:                                               ; preds = %18, %15
  %21 = phi i32 [ %17, %15 ], [ %5, %18 ]
  %22 = phi ptr [ %16, %15 ], [ %19, %18 ]
  store ptr %22, ptr %0, align 8, !tbaa !108
  %23 = icmp slt i32 %21, %10
  br i1 %23, label %24, label %33

24:                                               ; preds = %20
  %25 = sext i32 %21 to i64
  %26 = sext i32 %10 to i64
  br label %27

27:                                               ; preds = %27, %24
  %28 = phi i64 [ %25, %24 ], [ %31, %27 ]
  %29 = load ptr, ptr %0, align 8, !tbaa !108
  %30 = getelementptr inbounds ptr, ptr %29, i64 %28
  store ptr null, ptr %30, align 8, !tbaa !13
  %31 = add nsw i64 %28, 1
  %32 = icmp eq i64 %31, %26
  br i1 %32, label %33, label %27

33:                                               ; preds = %27, %20
  store i32 %10, ptr %4, align 8, !tbaa !107
  br label %34

34:                                               ; preds = %33, %3
  %35 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 3
  %36 = load i32, ptr %35, align 8, !tbaa !104
  %37 = icmp sgt i32 %36, %2
  br i1 %37, label %66, label %38

38:                                               ; preds = %34
  %39 = shl nsw i32 %36, 1
  %40 = add nsw i32 %2, 1
  %41 = tail call i32 @llvm.smax.i32(i32 %39, i32 %40)
  %42 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 2
  %43 = load ptr, ptr %42, align 8, !tbaa !105
  %44 = icmp eq ptr %43, null
  %45 = sext i32 %41 to i64
  %46 = shl nsw i64 %45, 3
  br i1 %44, label %50, label %47

47:                                               ; preds = %38
  %48 = tail call ptr @realloc(ptr noundef nonnull %43, i64 noundef %46) #51
  %49 = load i32, ptr %35, align 8, !tbaa !104
  br label %52

50:                                               ; preds = %38
  %51 = tail call noalias ptr @malloc(i64 noundef %46) #42
  br label %52

52:                                               ; preds = %50, %47
  %53 = phi i32 [ %49, %47 ], [ %36, %50 ]
  %54 = phi ptr [ %48, %47 ], [ %51, %50 ]
  store ptr %54, ptr %42, align 8, !tbaa !105
  %55 = icmp slt i32 %53, %41
  br i1 %55, label %56, label %65

56:                                               ; preds = %52
  %57 = sext i32 %53 to i64
  %58 = sext i32 %41 to i64
  br label %59

59:                                               ; preds = %59, %56
  %60 = phi i64 [ %57, %56 ], [ %63, %59 ]
  %61 = load ptr, ptr %42, align 8, !tbaa !105
  %62 = getelementptr inbounds ptr, ptr %61, i64 %60
  store ptr null, ptr %62, align 8, !tbaa !13
  %63 = add nsw i64 %60, 1
  %64 = icmp eq i64 %63, %58
  br i1 %64, label %65, label %59

65:                                               ; preds = %59, %52
  store i32 %41, ptr %35, align 8, !tbaa !104
  br label %66

66:                                               ; preds = %65, %34
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @sm_insert(ptr nocapture noundef %0, i32 noundef %1, i32 noundef %2) #0 {
  %4 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 1
  %5 = load i32, ptr %4, align 8, !tbaa !107
  %6 = icmp sgt i32 %5, %1
  br i1 %6, label %7, label %11

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 3
  %9 = load i32, ptr %8, align 8, !tbaa !104
  %10 = icmp sgt i32 %9, %2
  br i1 %10, label %12, label %11

11:                                               ; preds = %7, %3
  tail call void @sm_resize(ptr noundef nonnull %0, i32 noundef %1, i32 noundef %2) #44
  br label %12

12:                                               ; preds = %11, %7
  %13 = load ptr, ptr %0, align 8, !tbaa !108
  %14 = sext i32 %1 to i64
  %15 = getelementptr inbounds ptr, ptr %13, i64 %14
  %16 = load ptr, ptr %15, align 8, !tbaa !13
  %17 = icmp eq ptr %16, null
  br i1 %17, label %18, label %68

18:                                               ; preds = %12
  %19 = tail call ptr (...) @sm_row_alloc() #43
  %20 = load ptr, ptr %0, align 8, !tbaa !108
  %21 = getelementptr inbounds ptr, ptr %20, i64 %14
  store ptr %19, ptr %21, align 8, !tbaa !13
  store i32 %1, ptr %19, align 8, !tbaa !110
  %22 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 5
  %23 = load ptr, ptr %22, align 8, !tbaa !127
  %24 = icmp eq ptr %23, null
  br i1 %24, label %25, label %28

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 4
  store ptr %19, ptr %26, align 8, !tbaa !124
  store ptr %19, ptr %22, align 8, !tbaa !127
  %27 = getelementptr inbounds %struct.sm_col_struct, ptr %19, i64 0, i32 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %27, i8 0, i64 16, i1 false)
  br label %64

28:                                               ; preds = %18
  %29 = load i32, ptr %23, align 8, !tbaa !110
  %30 = icmp slt i32 %29, %1
  br i1 %30, label %31, label %35

31:                                               ; preds = %28
  %32 = getelementptr inbounds %struct.sm_col_struct, ptr %23, i64 0, i32 5
  store ptr %19, ptr %32, align 8, !tbaa !125
  %33 = getelementptr inbounds %struct.sm_col_struct, ptr %19, i64 0, i32 6
  store ptr %23, ptr %33, align 8, !tbaa !144
  store ptr %19, ptr %22, align 8, !tbaa !127
  %34 = getelementptr inbounds %struct.sm_col_struct, ptr %19, i64 0, i32 5
  store ptr null, ptr %34, align 8, !tbaa !125
  br label %64

35:                                               ; preds = %28
  %36 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 4
  %37 = load ptr, ptr %36, align 8, !tbaa !124
  %38 = load i32, ptr %37, align 8, !tbaa !110
  %39 = icmp sgt i32 %38, %1
  br i1 %39, label %42, label %40

40:                                               ; preds = %35
  %41 = icmp slt i32 %38, %1
  br i1 %41, label %46, label %52

42:                                               ; preds = %35
  %43 = getelementptr inbounds %struct.sm_col_struct, ptr %37, i64 0, i32 6
  store ptr %19, ptr %43, align 8, !tbaa !144
  %44 = getelementptr inbounds %struct.sm_col_struct, ptr %19, i64 0, i32 5
  store ptr %37, ptr %44, align 8, !tbaa !125
  store ptr %19, ptr %36, align 8, !tbaa !124
  %45 = getelementptr inbounds %struct.sm_col_struct, ptr %19, i64 0, i32 6
  store ptr null, ptr %45, align 8, !tbaa !144
  br label %64

46:                                               ; preds = %46, %40
  %47 = phi ptr [ %49, %46 ], [ %37, %40 ]
  %48 = getelementptr inbounds %struct.sm_col_struct, ptr %47, i64 0, i32 5
  %49 = load ptr, ptr %48, align 8, !tbaa !125
  %50 = load i32, ptr %49, align 8, !tbaa !110
  %51 = icmp slt i32 %50, %1
  br i1 %51, label %46, label %52

52:                                               ; preds = %46, %40
  %53 = phi ptr [ %37, %40 ], [ %49, %46 ]
  %54 = phi i32 [ %38, %40 ], [ %50, %46 ]
  %55 = icmp sgt i32 %54, %1
  br i1 %55, label %56, label %68

56:                                               ; preds = %52
  %57 = getelementptr inbounds %struct.sm_col_struct, ptr %53, i64 0, i32 6
  %58 = load ptr, ptr %57, align 8, !tbaa !144
  %59 = getelementptr inbounds %struct.sm_col_struct, ptr %58, i64 0, i32 5
  %60 = load ptr, ptr %59, align 8, !tbaa !125
  %61 = getelementptr inbounds %struct.sm_col_struct, ptr %60, i64 0, i32 6
  store ptr %19, ptr %61, align 8, !tbaa !144
  %62 = getelementptr inbounds %struct.sm_col_struct, ptr %19, i64 0, i32 5
  store ptr %60, ptr %62, align 8, !tbaa !125
  store ptr %19, ptr %59, align 8, !tbaa !125
  %63 = getelementptr inbounds %struct.sm_col_struct, ptr %19, i64 0, i32 6
  store ptr %58, ptr %63, align 8, !tbaa !144
  br label %64

64:                                               ; preds = %56, %42, %31, %25
  %65 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 6
  %66 = load i32, ptr %65, align 8, !tbaa !99
  %67 = add nsw i32 %66, 1
  store i32 %67, ptr %65, align 8, !tbaa !99
  br label %68

68:                                               ; preds = %64, %52, %12
  %69 = phi ptr [ %16, %12 ], [ %53, %52 ], [ %19, %64 ]
  %70 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 2
  %71 = load ptr, ptr %70, align 8, !tbaa !105
  %72 = sext i32 %2 to i64
  %73 = getelementptr inbounds ptr, ptr %71, i64 %72
  %74 = load ptr, ptr %73, align 8, !tbaa !13
  %75 = icmp eq ptr %74, null
  br i1 %75, label %76, label %126

76:                                               ; preds = %68
  %77 = tail call ptr (...) @sm_col_alloc() #43
  %78 = load ptr, ptr %70, align 8, !tbaa !105
  %79 = getelementptr inbounds ptr, ptr %78, i64 %72
  store ptr %77, ptr %79, align 8, !tbaa !13
  store i32 %2, ptr %77, align 8, !tbaa !35
  %80 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 8
  %81 = load ptr, ptr %80, align 8, !tbaa !143
  %82 = icmp eq ptr %81, null
  br i1 %82, label %83, label %86

83:                                               ; preds = %76
  %84 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 7
  store ptr %77, ptr %84, align 8, !tbaa !112
  store ptr %77, ptr %80, align 8, !tbaa !143
  %85 = getelementptr inbounds %struct.sm_col_struct, ptr %77, i64 0, i32 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %85, i8 0, i64 16, i1 false)
  br label %122

86:                                               ; preds = %76
  %87 = load i32, ptr %81, align 8, !tbaa !35
  %88 = icmp slt i32 %87, %2
  br i1 %88, label %89, label %93

89:                                               ; preds = %86
  %90 = getelementptr inbounds %struct.sm_col_struct, ptr %81, i64 0, i32 5
  store ptr %77, ptr %90, align 8, !tbaa !113
  %91 = getelementptr inbounds %struct.sm_col_struct, ptr %77, i64 0, i32 6
  store ptr %81, ptr %91, align 8, !tbaa !145
  store ptr %77, ptr %80, align 8, !tbaa !143
  %92 = getelementptr inbounds %struct.sm_col_struct, ptr %77, i64 0, i32 5
  store ptr null, ptr %92, align 8, !tbaa !113
  br label %122

93:                                               ; preds = %86
  %94 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 7
  %95 = load ptr, ptr %94, align 8, !tbaa !112
  %96 = load i32, ptr %95, align 8, !tbaa !35
  %97 = icmp sgt i32 %96, %2
  br i1 %97, label %100, label %98

98:                                               ; preds = %93
  %99 = icmp slt i32 %96, %2
  br i1 %99, label %104, label %110

100:                                              ; preds = %93
  %101 = getelementptr inbounds %struct.sm_col_struct, ptr %95, i64 0, i32 6
  store ptr %77, ptr %101, align 8, !tbaa !145
  %102 = getelementptr inbounds %struct.sm_col_struct, ptr %77, i64 0, i32 5
  store ptr %95, ptr %102, align 8, !tbaa !113
  store ptr %77, ptr %94, align 8, !tbaa !112
  %103 = getelementptr inbounds %struct.sm_col_struct, ptr %77, i64 0, i32 6
  store ptr null, ptr %103, align 8, !tbaa !145
  br label %122

104:                                              ; preds = %104, %98
  %105 = phi ptr [ %107, %104 ], [ %95, %98 ]
  %106 = getelementptr inbounds %struct.sm_col_struct, ptr %105, i64 0, i32 5
  %107 = load ptr, ptr %106, align 8, !tbaa !113
  %108 = load i32, ptr %107, align 8, !tbaa !35
  %109 = icmp slt i32 %108, %2
  br i1 %109, label %104, label %110

110:                                              ; preds = %104, %98
  %111 = phi ptr [ %95, %98 ], [ %107, %104 ]
  %112 = phi i32 [ %96, %98 ], [ %108, %104 ]
  %113 = icmp sgt i32 %112, %2
  br i1 %113, label %114, label %126

114:                                              ; preds = %110
  %115 = getelementptr inbounds %struct.sm_col_struct, ptr %111, i64 0, i32 6
  %116 = load ptr, ptr %115, align 8, !tbaa !145
  %117 = getelementptr inbounds %struct.sm_col_struct, ptr %116, i64 0, i32 5
  %118 = load ptr, ptr %117, align 8, !tbaa !113
  %119 = getelementptr inbounds %struct.sm_col_struct, ptr %118, i64 0, i32 6
  store ptr %77, ptr %119, align 8, !tbaa !145
  %120 = getelementptr inbounds %struct.sm_col_struct, ptr %77, i64 0, i32 5
  store ptr %118, ptr %120, align 8, !tbaa !113
  store ptr %77, ptr %117, align 8, !tbaa !113
  %121 = getelementptr inbounds %struct.sm_col_struct, ptr %77, i64 0, i32 6
  store ptr %116, ptr %121, align 8, !tbaa !145
  br label %122

122:                                              ; preds = %114, %100, %89, %83
  %123 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 9
  %124 = load i32, ptr %123, align 8, !tbaa !111
  %125 = add nsw i32 %124, 1
  store i32 %125, ptr %123, align 8, !tbaa !111
  br label %126

126:                                              ; preds = %122, %110, %68
  %127 = phi ptr [ %74, %68 ], [ %111, %110 ], [ %77, %122 ]
  %128 = tail call noalias dereferenceable_or_null(48) ptr @malloc(i64 noundef 48) #42
  %129 = getelementptr inbounds %struct.sm_element_struct, ptr %128, i64 0, i32 6
  store ptr null, ptr %129, align 8, !tbaa !146
  %130 = getelementptr inbounds %struct.sm_col_struct, ptr %69, i64 0, i32 4
  %131 = load ptr, ptr %130, align 8, !tbaa !115
  %132 = icmp eq ptr %131, null
  br i1 %132, label %133, label %137

133:                                              ; preds = %126
  %134 = getelementptr inbounds %struct.sm_element_struct, ptr %128, i64 0, i32 1
  store i32 %2, ptr %134, align 4, !tbaa !103
  %135 = getelementptr inbounds %struct.sm_col_struct, ptr %69, i64 0, i32 3
  store ptr %128, ptr %135, align 8, !tbaa !101
  store ptr %128, ptr %130, align 8, !tbaa !115
  %136 = getelementptr inbounds %struct.sm_element_struct, ptr %128, i64 0, i32 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %136, i8 0, i64 16, i1 false)
  br label %181

137:                                              ; preds = %126
  %138 = getelementptr inbounds %struct.sm_element_struct, ptr %131, i64 0, i32 1
  %139 = load i32, ptr %138, align 4, !tbaa !103
  %140 = icmp slt i32 %139, %2
  br i1 %140, label %141, label %146

141:                                              ; preds = %137
  %142 = getelementptr inbounds %struct.sm_element_struct, ptr %128, i64 0, i32 1
  store i32 %2, ptr %142, align 4, !tbaa !103
  %143 = getelementptr inbounds %struct.sm_element_struct, ptr %131, i64 0, i32 4
  store ptr %128, ptr %143, align 8, !tbaa !106
  %144 = getelementptr inbounds %struct.sm_element_struct, ptr %128, i64 0, i32 5
  store ptr %131, ptr %144, align 8, !tbaa !147
  store ptr %128, ptr %130, align 8, !tbaa !115
  %145 = getelementptr inbounds %struct.sm_element_struct, ptr %128, i64 0, i32 4
  store ptr null, ptr %145, align 8, !tbaa !106
  br label %181

146:                                              ; preds = %137
  %147 = getelementptr inbounds %struct.sm_col_struct, ptr %69, i64 0, i32 3
  %148 = load ptr, ptr %147, align 8, !tbaa !101
  %149 = getelementptr inbounds %struct.sm_element_struct, ptr %148, i64 0, i32 1
  %150 = load i32, ptr %149, align 4, !tbaa !103
  %151 = icmp sgt i32 %150, %2
  br i1 %151, label %154, label %152

152:                                              ; preds = %146
  %153 = icmp slt i32 %150, %2
  br i1 %153, label %159, label %166

154:                                              ; preds = %146
  %155 = getelementptr inbounds %struct.sm_element_struct, ptr %128, i64 0, i32 1
  store i32 %2, ptr %155, align 4, !tbaa !103
  %156 = getelementptr inbounds %struct.sm_element_struct, ptr %148, i64 0, i32 5
  store ptr %128, ptr %156, align 8, !tbaa !147
  %157 = getelementptr inbounds %struct.sm_element_struct, ptr %128, i64 0, i32 4
  store ptr %148, ptr %157, align 8, !tbaa !106
  store ptr %128, ptr %147, align 8, !tbaa !101
  %158 = getelementptr inbounds %struct.sm_element_struct, ptr %128, i64 0, i32 5
  store ptr null, ptr %158, align 8, !tbaa !147
  br label %181

159:                                              ; preds = %159, %152
  %160 = phi ptr [ %162, %159 ], [ %148, %152 ]
  %161 = getelementptr inbounds %struct.sm_element_struct, ptr %160, i64 0, i32 4
  %162 = load ptr, ptr %161, align 8, !tbaa !106
  %163 = getelementptr inbounds %struct.sm_element_struct, ptr %162, i64 0, i32 1
  %164 = load i32, ptr %163, align 4, !tbaa !103
  %165 = icmp slt i32 %164, %2
  br i1 %165, label %159, label %166

166:                                              ; preds = %159, %152
  %167 = phi ptr [ %148, %152 ], [ %162, %159 ]
  %168 = phi i32 [ %150, %152 ], [ %164, %159 ]
  %169 = icmp sgt i32 %168, %2
  br i1 %169, label %170, label %179

170:                                              ; preds = %166
  %171 = getelementptr inbounds %struct.sm_element_struct, ptr %128, i64 0, i32 1
  store i32 %2, ptr %171, align 4, !tbaa !103
  %172 = getelementptr inbounds %struct.sm_element_struct, ptr %167, i64 0, i32 5
  %173 = load ptr, ptr %172, align 8, !tbaa !147
  %174 = getelementptr inbounds %struct.sm_element_struct, ptr %173, i64 0, i32 4
  %175 = load ptr, ptr %174, align 8, !tbaa !106
  %176 = getelementptr inbounds %struct.sm_element_struct, ptr %175, i64 0, i32 5
  store ptr %128, ptr %176, align 8, !tbaa !147
  %177 = getelementptr inbounds %struct.sm_element_struct, ptr %128, i64 0, i32 4
  store ptr %175, ptr %177, align 8, !tbaa !106
  store ptr %128, ptr %174, align 8, !tbaa !106
  %178 = getelementptr inbounds %struct.sm_element_struct, ptr %128, i64 0, i32 5
  store ptr %173, ptr %178, align 8, !tbaa !147
  br label %181

179:                                              ; preds = %166
  %180 = icmp eq ptr %167, %128
  br i1 %180, label %185, label %240

181:                                              ; preds = %170, %154, %141, %133
  %182 = getelementptr inbounds %struct.sm_col_struct, ptr %69, i64 0, i32 1
  %183 = load i32, ptr %182, align 4, !tbaa !109
  %184 = add nsw i32 %183, 1
  store i32 %184, ptr %182, align 4, !tbaa !109
  br label %185

185:                                              ; preds = %181, %179
  %186 = getelementptr inbounds %struct.sm_col_struct, ptr %127, i64 0, i32 4
  %187 = load ptr, ptr %186, align 8, !tbaa !116
  %188 = icmp eq ptr %187, null
  br i1 %188, label %189, label %195

189:                                              ; preds = %185
  store i32 %1, ptr %128, align 8, !tbaa !42
  %190 = getelementptr inbounds %struct.sm_col_struct, ptr %127, i64 0, i32 3
  store ptr %128, ptr %190, align 8, !tbaa !39
  store ptr %128, ptr %186, align 8, !tbaa !116
  %191 = getelementptr inbounds %struct.sm_element_struct, ptr %128, i64 0, i32 2
  %192 = getelementptr inbounds %struct.sm_col_struct, ptr %127, i64 0, i32 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %191, i8 0, i64 16, i1 false)
  %193 = load i32, ptr %192, align 4, !tbaa !37
  %194 = add nsw i32 %193, 1
  store i32 %194, ptr %192, align 4, !tbaa !37
  br label %243

195:                                              ; preds = %185
  %196 = load i32, ptr %187, align 8, !tbaa !42
  %197 = icmp slt i32 %196, %1
  br i1 %197, label %198, label %205

198:                                              ; preds = %195
  store i32 %1, ptr %128, align 8, !tbaa !42
  %199 = getelementptr inbounds %struct.sm_element_struct, ptr %187, i64 0, i32 2
  store ptr %128, ptr %199, align 8, !tbaa !40
  %200 = getelementptr inbounds %struct.sm_element_struct, ptr %128, i64 0, i32 3
  store ptr %187, ptr %200, align 8, !tbaa !43
  store ptr %128, ptr %186, align 8, !tbaa !116
  %201 = getelementptr inbounds %struct.sm_element_struct, ptr %128, i64 0, i32 2
  store ptr null, ptr %201, align 8, !tbaa !40
  %202 = getelementptr inbounds %struct.sm_col_struct, ptr %127, i64 0, i32 1
  %203 = load i32, ptr %202, align 4, !tbaa !37
  %204 = add nsw i32 %203, 1
  store i32 %204, ptr %202, align 4, !tbaa !37
  br label %243

205:                                              ; preds = %195
  %206 = getelementptr inbounds %struct.sm_col_struct, ptr %127, i64 0, i32 3
  %207 = load ptr, ptr %206, align 8, !tbaa !39
  %208 = load i32, ptr %207, align 8, !tbaa !42
  %209 = icmp sgt i32 %208, %1
  br i1 %209, label %212, label %210

210:                                              ; preds = %205
  %211 = icmp slt i32 %208, %1
  br i1 %211, label %219, label %225

212:                                              ; preds = %205
  store i32 %1, ptr %128, align 8, !tbaa !42
  %213 = getelementptr inbounds %struct.sm_element_struct, ptr %207, i64 0, i32 3
  store ptr %128, ptr %213, align 8, !tbaa !43
  %214 = getelementptr inbounds %struct.sm_element_struct, ptr %128, i64 0, i32 2
  store ptr %207, ptr %214, align 8, !tbaa !40
  store ptr %128, ptr %206, align 8, !tbaa !39
  %215 = getelementptr inbounds %struct.sm_element_struct, ptr %128, i64 0, i32 3
  store ptr null, ptr %215, align 8, !tbaa !43
  %216 = getelementptr inbounds %struct.sm_col_struct, ptr %127, i64 0, i32 1
  %217 = load i32, ptr %216, align 4, !tbaa !37
  %218 = add nsw i32 %217, 1
  store i32 %218, ptr %216, align 4, !tbaa !37
  br label %243

219:                                              ; preds = %219, %210
  %220 = phi ptr [ %222, %219 ], [ %207, %210 ]
  %221 = getelementptr inbounds %struct.sm_element_struct, ptr %220, i64 0, i32 2
  %222 = load ptr, ptr %221, align 8, !tbaa !40
  %223 = load i32, ptr %222, align 8, !tbaa !42
  %224 = icmp slt i32 %223, %1
  br i1 %224, label %219, label %225

225:                                              ; preds = %219, %210
  %226 = phi ptr [ %207, %210 ], [ %222, %219 ]
  %227 = phi i32 [ %208, %210 ], [ %223, %219 ]
  %228 = icmp sgt i32 %227, %1
  br i1 %228, label %229, label %243

229:                                              ; preds = %225
  store i32 %1, ptr %128, align 8, !tbaa !42
  %230 = getelementptr inbounds %struct.sm_element_struct, ptr %226, i64 0, i32 3
  %231 = load ptr, ptr %230, align 8, !tbaa !43
  %232 = getelementptr inbounds %struct.sm_element_struct, ptr %231, i64 0, i32 2
  %233 = load ptr, ptr %232, align 8, !tbaa !40
  %234 = getelementptr inbounds %struct.sm_element_struct, ptr %233, i64 0, i32 3
  store ptr %128, ptr %234, align 8, !tbaa !43
  %235 = getelementptr inbounds %struct.sm_element_struct, ptr %128, i64 0, i32 2
  store ptr %233, ptr %235, align 8, !tbaa !40
  store ptr %128, ptr %232, align 8, !tbaa !40
  %236 = getelementptr inbounds %struct.sm_element_struct, ptr %128, i64 0, i32 3
  store ptr %231, ptr %236, align 8, !tbaa !43
  %237 = getelementptr inbounds %struct.sm_col_struct, ptr %127, i64 0, i32 1
  %238 = load i32, ptr %237, align 4, !tbaa !37
  %239 = add nsw i32 %238, 1
  store i32 %239, ptr %237, align 4, !tbaa !37
  br label %243

240:                                              ; preds = %179
  %241 = icmp eq ptr %128, null
  br i1 %241, label %243, label %242

242:                                              ; preds = %240
  tail call void @free(ptr noundef nonnull %128) #43
  br label %243

243:                                              ; preds = %242, %240, %229, %225, %212, %198, %189
  %244 = phi ptr [ %128, %189 ], [ %128, %198 ], [ %128, %212 ], [ %167, %242 ], [ %167, %240 ], [ %128, %229 ], [ %226, %225 ]
  ret ptr %244
}

; Function Attrs: mustprogress nounwind optsize willreturn allockind("realloc") allocsize(1) memory(argmem: readwrite, inaccessiblemem: readwrite)
declare noalias noundef ptr @realloc(ptr allocptr nocapture noundef, i64 noundef) local_unnamed_addr #28

; Function Attrs: nounwind optsize uwtable
define internal void @sm_delrow(ptr nocapture noundef %0, i32 noundef %1) #0 {
  %3 = icmp sgt i32 %1, -1
  br i1 %3, label %4, label %70

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 1
  %6 = load i32, ptr %5, align 8, !tbaa !107
  %7 = icmp sgt i32 %6, %1
  br i1 %7, label %8, label %70

8:                                                ; preds = %4
  %9 = load ptr, ptr %0, align 8, !tbaa !108
  %10 = zext i32 %1 to i64
  %11 = getelementptr inbounds ptr, ptr %9, i64 %10
  %12 = load ptr, ptr %11, align 8, !tbaa !13
  %13 = icmp eq ptr %12, null
  br i1 %13, label %70, label %14

14:                                               ; preds = %8
  %15 = getelementptr inbounds %struct.sm_col_struct, ptr %12, i64 0, i32 3
  %16 = load ptr, ptr %15, align 8, !tbaa !101
  %17 = icmp eq ptr %16, null
  br i1 %17, label %47, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 3
  %20 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 2
  br label %21

21:                                               ; preds = %43, %18
  %22 = phi ptr [ %16, %18 ], [ %24, %43 ]
  %23 = getelementptr inbounds %struct.sm_element_struct, ptr %22, i64 0, i32 4
  %24 = load ptr, ptr %23, align 8, !tbaa !106
  %25 = getelementptr inbounds %struct.sm_element_struct, ptr %22, i64 0, i32 1
  %26 = load i32, ptr %25, align 4, !tbaa !103
  %27 = icmp sgt i32 %26, -1
  br i1 %27, label %28, label %36

28:                                               ; preds = %21
  %29 = load i32, ptr %19, align 8, !tbaa !104
  %30 = icmp slt i32 %26, %29
  br i1 %30, label %31, label %36

31:                                               ; preds = %28
  %32 = load ptr, ptr %20, align 8, !tbaa !105
  %33 = zext i32 %26 to i64
  %34 = getelementptr inbounds ptr, ptr %32, i64 %33
  %35 = load ptr, ptr %34, align 8, !tbaa !13
  br label %36

36:                                               ; preds = %31, %28, %21
  %37 = phi ptr [ %35, %31 ], [ null, %28 ], [ null, %21 ]
  tail call void (ptr, ptr, ...) @sm_col_remove_element(ptr noundef %37, ptr noundef nonnull %22) #43
  %38 = getelementptr inbounds %struct.sm_col_struct, ptr %37, i64 0, i32 3
  %39 = load ptr, ptr %38, align 8, !tbaa !39
  %40 = icmp eq ptr %39, null
  br i1 %40, label %41, label %43

41:                                               ; preds = %36
  %42 = load i32, ptr %37, align 8, !tbaa !35
  tail call void @sm_delcol(ptr noundef nonnull %0, i32 noundef %42) #44
  br label %43

43:                                               ; preds = %41, %36
  %44 = icmp eq ptr %24, null
  br i1 %44, label %45, label %21

45:                                               ; preds = %43
  %46 = load ptr, ptr %0, align 8, !tbaa !108
  br label %47

47:                                               ; preds = %45, %14
  %48 = phi ptr [ %46, %45 ], [ %9, %14 ]
  %49 = sext i32 %1 to i64
  %50 = getelementptr inbounds ptr, ptr %48, i64 %49
  store ptr null, ptr %50, align 8, !tbaa !13
  %51 = getelementptr inbounds %struct.sm_col_struct, ptr %12, i64 0, i32 6
  %52 = load ptr, ptr %51, align 8, !tbaa !144
  %53 = icmp eq ptr %52, null
  %54 = getelementptr inbounds %struct.sm_col_struct, ptr %12, i64 0, i32 5
  %55 = load ptr, ptr %54, align 8, !tbaa !125
  br i1 %53, label %56, label %58

56:                                               ; preds = %47
  %57 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 4
  store ptr %55, ptr %57, align 8, !tbaa !124
  br label %61

58:                                               ; preds = %47
  %59 = getelementptr inbounds %struct.sm_col_struct, ptr %52, i64 0, i32 5
  store ptr %55, ptr %59, align 8, !tbaa !125
  %60 = load ptr, ptr %54, align 8, !tbaa !125
  br label %61

61:                                               ; preds = %58, %56
  %62 = phi ptr [ %60, %58 ], [ %55, %56 ]
  %63 = icmp eq ptr %62, null
  %64 = getelementptr inbounds %struct.sm_col_struct, ptr %62, i64 0, i32 6
  %65 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 5
  %66 = select i1 %63, ptr %65, ptr %64
  store ptr %52, ptr %66, align 8, !tbaa !13
  %67 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 6
  %68 = load i32, ptr %67, align 8, !tbaa !99
  %69 = add nsw i32 %68, -1
  store i32 %69, ptr %67, align 8, !tbaa !99
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %15, i8 0, i64 16, i1 false)
  tail call void (ptr, ...) @sm_row_free(ptr noundef nonnull %12) #43
  br label %70

70:                                               ; preds = %61, %8, %4, %2
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @sm_delcol(ptr nocapture noundef %0, i32 noundef %1) #0 {
  %3 = icmp sgt i32 %1, -1
  br i1 %3, label %4, label %69

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 3
  %6 = load i32, ptr %5, align 8, !tbaa !104
  %7 = icmp sgt i32 %6, %1
  br i1 %7, label %8, label %69

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 2
  %10 = load ptr, ptr %9, align 8, !tbaa !105
  %11 = zext i32 %1 to i64
  %12 = getelementptr inbounds ptr, ptr %10, i64 %11
  %13 = load ptr, ptr %12, align 8, !tbaa !13
  %14 = icmp eq ptr %13, null
  br i1 %14, label %69, label %15

15:                                               ; preds = %8
  %16 = getelementptr inbounds %struct.sm_col_struct, ptr %13, i64 0, i32 3
  %17 = load ptr, ptr %16, align 8, !tbaa !39
  %18 = icmp eq ptr %17, null
  br i1 %18, label %46, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 1
  br label %21

21:                                               ; preds = %42, %19
  %22 = phi ptr [ %17, %19 ], [ %24, %42 ]
  %23 = getelementptr inbounds %struct.sm_element_struct, ptr %22, i64 0, i32 2
  %24 = load ptr, ptr %23, align 8, !tbaa !40
  %25 = load i32, ptr %22, align 8, !tbaa !42
  %26 = icmp sgt i32 %25, -1
  br i1 %26, label %27, label %35

27:                                               ; preds = %21
  %28 = load i32, ptr %20, align 8, !tbaa !107
  %29 = icmp slt i32 %25, %28
  br i1 %29, label %30, label %35

30:                                               ; preds = %27
  %31 = load ptr, ptr %0, align 8, !tbaa !108
  %32 = zext i32 %25 to i64
  %33 = getelementptr inbounds ptr, ptr %31, i64 %32
  %34 = load ptr, ptr %33, align 8, !tbaa !13
  br label %35

35:                                               ; preds = %30, %27, %21
  %36 = phi ptr [ %34, %30 ], [ null, %27 ], [ null, %21 ]
  tail call void (ptr, ptr, ...) @sm_row_remove_element(ptr noundef %36, ptr noundef nonnull %22) #43
  %37 = getelementptr inbounds %struct.sm_col_struct, ptr %36, i64 0, i32 3
  %38 = load ptr, ptr %37, align 8, !tbaa !101
  %39 = icmp eq ptr %38, null
  br i1 %39, label %40, label %42

40:                                               ; preds = %35
  %41 = load i32, ptr %36, align 8, !tbaa !110
  tail call void @sm_delrow(ptr noundef %0, i32 noundef %41) #44
  br label %42

42:                                               ; preds = %40, %35
  %43 = icmp eq ptr %24, null
  br i1 %43, label %44, label %21

44:                                               ; preds = %42
  %45 = load ptr, ptr %9, align 8, !tbaa !105
  br label %46

46:                                               ; preds = %44, %15
  %47 = phi ptr [ %45, %44 ], [ %10, %15 ]
  %48 = sext i32 %1 to i64
  %49 = getelementptr inbounds ptr, ptr %47, i64 %48
  store ptr null, ptr %49, align 8, !tbaa !13
  %50 = getelementptr inbounds %struct.sm_col_struct, ptr %13, i64 0, i32 6
  %51 = load ptr, ptr %50, align 8, !tbaa !145
  %52 = icmp eq ptr %51, null
  %53 = getelementptr inbounds %struct.sm_col_struct, ptr %13, i64 0, i32 5
  %54 = load ptr, ptr %53, align 8, !tbaa !113
  br i1 %52, label %55, label %57

55:                                               ; preds = %46
  %56 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 7
  store ptr %54, ptr %56, align 8, !tbaa !112
  br label %60

57:                                               ; preds = %46
  %58 = getelementptr inbounds %struct.sm_col_struct, ptr %51, i64 0, i32 5
  store ptr %54, ptr %58, align 8, !tbaa !113
  %59 = load ptr, ptr %53, align 8, !tbaa !113
  br label %60

60:                                               ; preds = %57, %55
  %61 = phi ptr [ %59, %57 ], [ %54, %55 ]
  %62 = icmp eq ptr %61, null
  %63 = getelementptr inbounds %struct.sm_col_struct, ptr %61, i64 0, i32 6
  %64 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 8
  %65 = select i1 %62, ptr %64, ptr %63
  store ptr %51, ptr %65, align 8, !tbaa !13
  %66 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 9
  %67 = load i32, ptr %66, align 8, !tbaa !111
  %68 = add nsw i32 %67, -1
  store i32 %68, ptr %66, align 8, !tbaa !111
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %16, i8 0, i64 16, i1 false)
  tail call void (ptr, ...) @sm_col_free(ptr noundef nonnull %13) #43
  br label %69

69:                                               ; preds = %60, %8, %4, %2
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @sm_write(ptr nocapture noundef %0, ptr nocapture noundef readonly %1) #14 {
  %3 = getelementptr inbounds %struct.sm_matrix_struct, ptr %1, i64 0, i32 4
  %4 = load ptr, ptr %3, align 8, !tbaa !13
  %5 = icmp eq ptr %4, null
  br i1 %5, label %24, label %6

6:                                                ; preds = %20, %2
  %7 = phi ptr [ %22, %20 ], [ %4, %2 ]
  %8 = getelementptr inbounds %struct.sm_col_struct, ptr %7, i64 0, i32 3
  %9 = load ptr, ptr %8, align 8, !tbaa !13
  %10 = icmp eq ptr %9, null
  br i1 %10, label %20, label %11

11:                                               ; preds = %11, %6
  %12 = phi ptr [ %18, %11 ], [ %9, %6 ]
  %13 = load i32, ptr %12, align 8, !tbaa !42
  %14 = getelementptr inbounds %struct.sm_element_struct, ptr %12, i64 0, i32 1
  %15 = load i32, ptr %14, align 4, !tbaa !103
  %16 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.2.354, i32 noundef %13, i32 noundef %15) #44
  %17 = getelementptr inbounds %struct.sm_element_struct, ptr %12, i64 0, i32 4
  %18 = load ptr, ptr %17, align 8, !tbaa !13
  %19 = icmp eq ptr %18, null
  br i1 %19, label %20, label %11

20:                                               ; preds = %11, %6
  %21 = getelementptr inbounds %struct.sm_col_struct, ptr %7, i64 0, i32 5
  %22 = load ptr, ptr %21, align 8, !tbaa !13
  %23 = icmp eq ptr %22, null
  br i1 %23, label %24, label %6

24:                                               ; preds = %20, %2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal void @sm_cleanup() #29 {
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @sm_minimum_cover(ptr noundef %0, ptr noundef %1, i32 noundef %2, i32 noundef %3) #0 {
  %5 = alloca %struct.stats_struct, align 8
  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %5) #45
  %6 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 6
  %7 = load i32, ptr %6, align 8, !tbaa !99
  %8 = icmp slt i32 %7, 1
  br i1 %8, label %9, label %11

9:                                                ; preds = %4
  %10 = tail call ptr (...) @sm_row_alloc() #43
  br label %123

11:                                               ; preds = %4
  %12 = tail call i64 (...) @util_cpu_time() #43
  %13 = getelementptr inbounds %struct.stats_struct, ptr %5, i64 0, i32 8
  store i64 %12, ptr %13, align 8, !tbaa !148
  %14 = icmp sgt i32 %3, 0
  %15 = zext i1 %14 to i32
  store i32 %15, ptr %5, align 8, !tbaa !149
  %16 = getelementptr inbounds %struct.stats_struct, ptr %5, i64 0, i32 1
  store i32 %3, ptr %16, align 4, !tbaa !150
  %17 = getelementptr inbounds %struct.stats_struct, ptr %5, i64 0, i32 2
  store i32 -1, ptr %17, align 8, !tbaa !151
  %18 = getelementptr inbounds %struct.stats_struct, ptr %5, i64 0, i32 3
  %19 = getelementptr inbounds %struct.stats_struct, ptr %5, i64 0, i32 5
  %20 = getelementptr inbounds %struct.stats_struct, ptr %5, i64 0, i32 6
  %21 = icmp ne i32 %2, 0
  %22 = zext i1 %21 to i32
  %23 = getelementptr inbounds %struct.stats_struct, ptr %5, i64 0, i32 9
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(20) %18, i8 0, i64 20, i1 false)
  store i32 %22, ptr %23, align 8, !tbaa !152
  %24 = getelementptr inbounds %struct.stats_struct, ptr %5, i64 0, i32 10
  store i32 -1, ptr %24, align 4, !tbaa !153
  %25 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 4
  %26 = load ptr, ptr %25, align 8, !tbaa !13
  %27 = icmp eq ptr %26, null
  br i1 %27, label %37, label %28

28:                                               ; preds = %28, %11
  %29 = phi ptr [ %35, %28 ], [ %26, %11 ]
  %30 = phi i32 [ %33, %28 ], [ 0, %11 ]
  %31 = getelementptr inbounds %struct.sm_col_struct, ptr %29, i64 0, i32 1
  %32 = load i32, ptr %31, align 4, !tbaa !109
  %33 = add nsw i32 %32, %30
  %34 = getelementptr inbounds %struct.sm_col_struct, ptr %29, i64 0, i32 5
  %35 = load ptr, ptr %34, align 8, !tbaa !13
  %36 = icmp eq ptr %35, null
  br i1 %36, label %37, label %28

37:                                               ; preds = %28, %11
  %38 = phi i32 [ 0, %11 ], [ %33, %28 ]
  %39 = sitofp i32 %38 to double
  %40 = load i32, ptr %6, align 8, !tbaa !99
  %41 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 9
  %42 = load i32, ptr %41, align 8, !tbaa !111
  %43 = mul nsw i32 %42, %40
  %44 = sitofp i32 %43 to double
  %45 = fdiv double %39, %44
  %46 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 7
  %47 = load ptr, ptr %46, align 8, !tbaa !13
  %48 = icmp eq ptr %47, null
  br i1 %48, label %65, label %49

49:                                               ; preds = %37
  %50 = icmp eq ptr %1, null
  br label %51

51:                                               ; preds = %59, %49
  %52 = phi ptr [ %47, %49 ], [ %63, %59 ]
  %53 = phi i32 [ 1, %49 ], [ %61, %59 ]
  br i1 %50, label %59, label %54

54:                                               ; preds = %51
  %55 = load i32, ptr %52, align 8, !tbaa !35
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i32, ptr %1, i64 %56
  %58 = load i32, ptr %57, align 4, !tbaa !16
  br label %59

59:                                               ; preds = %54, %51
  %60 = phi i32 [ %58, %54 ], [ 1, %51 ]
  %61 = add nsw i32 %60, %53
  %62 = getelementptr inbounds %struct.sm_col_struct, ptr %52, i64 0, i32 5
  %63 = load ptr, ptr %62, align 8, !tbaa !13
  %64 = icmp eq ptr %63, null
  br i1 %64, label %65, label %51

65:                                               ; preds = %59, %37
  %66 = phi i32 [ 1, %37 ], [ %61, %59 ]
  %67 = tail call ptr (...) @solution_alloc() #43
  %68 = tail call ptr (ptr, ...) @sm_dup(ptr noundef %0) #43
  %69 = call ptr @sm_mincov(ptr noundef %68, ptr noundef %67, ptr noundef %1, i32 noundef 0, i32 noundef %66, i32 noundef 0, ptr noundef nonnull %5) #44
  call void (ptr, ...) @sm_free(ptr noundef %68) #43
  call void (ptr, ...) @solution_free(ptr noundef %67) #43
  %70 = load i32, ptr %5, align 8, !tbaa !149
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %104, label %72

72:                                               ; preds = %65
  %73 = load i32, ptr %23, align 8, !tbaa !152
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %79, label %75

75:                                               ; preds = %72
  %76 = call i32 @puts(ptr nonnull dereferenceable(1) @str.361)
  %77 = load i32, ptr %24, align 4, !tbaa !153
  %78 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1.362, i32 noundef %77) #44
  br label %79

79:                                               ; preds = %75, %72
  %80 = load i32, ptr %6, align 8, !tbaa !99
  %81 = load i32, ptr %41, align 8, !tbaa !111
  %82 = fmul double %45, 1.000000e+02
  %83 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.363, i32 noundef %80, i32 noundef %81, i32 noundef %38, double noundef %82) #44
  %84 = load ptr, ptr %69, align 8, !tbaa !120
  %85 = getelementptr inbounds %struct.sm_col_struct, ptr %84, i64 0, i32 1
  %86 = load i32, ptr %85, align 4, !tbaa !109
  %87 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.364, i32 noundef %86) #44
  %88 = getelementptr inbounds %struct.pla_types_struct, ptr %69, i64 0, i32 1
  %89 = load i32, ptr %88, align 8, !tbaa !126
  %90 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.365, i32 noundef %89) #44
  %91 = call i64 (...) @util_cpu_time() #43
  %92 = load i64, ptr %13, align 8, !tbaa !148
  %93 = sub nsw i64 %91, %92
  %94 = call ptr @util_print_time(i64 noundef %93) #43
  %95 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.5.366, ptr noundef %94) #44
  %96 = load i32, ptr %19, align 4, !tbaa !154
  %97 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.6.367, i32 noundef %96) #44
  %98 = load i32, ptr %20, align 8, !tbaa !117
  %99 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.7.368, i32 noundef %98) #44
  %100 = load i32, ptr %18, align 4, !tbaa !155
  %101 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.8.369, i32 noundef %100) #44
  %102 = load i32, ptr %17, align 8, !tbaa !151
  %103 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.9.370, i32 noundef %102) #44
  br label %104

104:                                              ; preds = %79, %65
  %105 = load ptr, ptr %69, align 8, !tbaa !120
  %106 = call ptr (ptr, ...) @sm_row_dup(ptr noundef %105) #43
  %107 = load ptr, ptr %25, align 8, !tbaa !13
  %108 = icmp eq ptr %107, null
  br i1 %108, label %122, label %113

109:                                              ; preds = %113
  %110 = getelementptr inbounds %struct.sm_col_struct, ptr %114, i64 0, i32 5
  %111 = load ptr, ptr %110, align 8, !tbaa !13
  %112 = icmp eq ptr %111, null
  br i1 %112, label %122, label %113

113:                                              ; preds = %109, %104
  %114 = phi ptr [ %111, %109 ], [ %107, %104 ]
  %115 = call i32 (ptr, ptr, ...) @sm_row_intersects(ptr noundef nonnull %114, ptr noundef %106) #43
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %117, label %109

117:                                              ; preds = %113
  %118 = load ptr, ptr @stderr, align 8, !tbaa !13
  %119 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %118, ptr noundef nonnull @.str.10.371, ptr noundef nonnull @.str.11.372, i32 noundef 91, ptr noundef nonnull @.str.12.373) #47
  %120 = load ptr, ptr @stdout, align 8, !tbaa !13
  %121 = call i32 @fflush(ptr noundef %120) #44
  call void @abort() #49
  unreachable

122:                                              ; preds = %109, %104
  call void (ptr, ...) @solution_free(ptr noundef nonnull %69) #43
  br label %123

123:                                              ; preds = %122, %9
  %124 = phi ptr [ %10, %9 ], [ %106, %122 ]
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %5) #45
  ret ptr %124
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @sm_mincov(ptr noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, ptr noundef %6) #0 {
  %8 = alloca ptr, align 8
  %9 = alloca ptr, align 8
  %10 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #45
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #45
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10) #45
  %11 = getelementptr inbounds %struct.stats_struct, ptr %6, i64 0, i32 3
  %12 = load i32, ptr %11, align 4, !tbaa !155
  %13 = add nsw i32 %12, 1
  store i32 %13, ptr %11, align 4, !tbaa !155
  %14 = getelementptr inbounds %struct.stats_struct, ptr %6, i64 0, i32 2
  %15 = load i32, ptr %14, align 8, !tbaa !151
  %16 = icmp slt i32 %15, %5
  br i1 %16, label %17, label %18

17:                                               ; preds = %7
  store i32 %5, ptr %14, align 8, !tbaa !151
  br label %18

18:                                               ; preds = %17, %7
  %19 = load i32, ptr %6, align 8, !tbaa !149
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %25, label %21

21:                                               ; preds = %18
  %22 = getelementptr inbounds %struct.stats_struct, ptr %6, i64 0, i32 1
  %23 = load i32, ptr %22, align 4, !tbaa !150
  %24 = icmp sge i32 %23, %5
  br label %25

25:                                               ; preds = %21, %18
  %26 = phi i1 [ false, %18 ], [ %24, %21 ]
  %27 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 4
  %28 = getelementptr inbounds %struct.pla_types_struct, ptr %1, i64 0, i32 1
  br label %29

29:                                               ; preds = %64, %25
  %30 = tail call i32 (ptr, ptr, ...) @sm_col_dominance(ptr noundef %0, ptr noundef %2) #43
  %31 = tail call ptr (...) @sm_row_alloc() #43
  %32 = load ptr, ptr %27, align 8, !tbaa !13
  %33 = icmp eq ptr %32, null
  br i1 %33, label %49, label %34

34:                                               ; preds = %45, %29
  %35 = phi ptr [ %47, %45 ], [ %32, %29 ]
  %36 = getelementptr inbounds %struct.sm_col_struct, ptr %35, i64 0, i32 1
  %37 = load i32, ptr %36, align 4, !tbaa !109
  %38 = icmp eq i32 %37, 1
  br i1 %38, label %39, label %45

39:                                               ; preds = %34
  %40 = getelementptr inbounds %struct.sm_col_struct, ptr %35, i64 0, i32 3
  %41 = load ptr, ptr %40, align 8, !tbaa !101
  %42 = getelementptr inbounds %struct.sm_element_struct, ptr %41, i64 0, i32 1
  %43 = load i32, ptr %42, align 4, !tbaa !103
  %44 = tail call ptr (ptr, i32, ...) @sm_row_insert(ptr noundef %31, i32 noundef %43) #43
  br label %45

45:                                               ; preds = %39, %34
  %46 = getelementptr inbounds %struct.sm_col_struct, ptr %35, i64 0, i32 5
  %47 = load ptr, ptr %46, align 8, !tbaa !13
  %48 = icmp eq ptr %47, null
  br i1 %48, label %49, label %34

49:                                               ; preds = %45, %29
  %50 = getelementptr inbounds %struct.sm_col_struct, ptr %31, i64 0, i32 3
  %51 = load ptr, ptr %50, align 8, !tbaa !13
  %52 = icmp eq ptr %51, null
  br i1 %52, label %64, label %57

53:                                               ; preds = %57
  %54 = getelementptr inbounds %struct.sm_element_struct, ptr %58, i64 0, i32 4
  %55 = load ptr, ptr %54, align 8, !tbaa !13
  %56 = icmp eq ptr %55, null
  br i1 %56, label %64, label %57

57:                                               ; preds = %53, %49
  %58 = phi ptr [ %55, %53 ], [ %51, %49 ]
  %59 = getelementptr inbounds %struct.sm_element_struct, ptr %58, i64 0, i32 1
  %60 = load i32, ptr %59, align 4, !tbaa !103
  tail call void (ptr, ptr, ptr, i32, ...) @solution_accept(ptr noundef %1, ptr noundef %0, ptr noundef %2, i32 noundef %60) #43
  %61 = load i32, ptr %28, align 8, !tbaa !126
  %62 = icmp slt i32 %61, %4
  br i1 %62, label %53, label %63

63:                                               ; preds = %57
  %.lcssa = phi ptr [ %31, %57 ]
  tail call void (ptr, ...) @sm_row_free(ptr noundef %.lcssa) #43
  br label %73

64:                                               ; preds = %53, %49
  %65 = getelementptr inbounds %struct.sm_col_struct, ptr %31, i64 0, i32 1
  %66 = load i32, ptr %65, align 4, !tbaa !109
  tail call void (ptr, ...) @sm_row_free(ptr noundef %31) #43
  %67 = tail call i32 (ptr, ...) @sm_row_dominance(ptr noundef %0) #43
  %68 = icmp sgt i32 %30, 0
  %69 = icmp sgt i32 %67, 0
  %70 = select i1 %68, i1 true, i1 %69
  %71 = icmp sgt i32 %66, 0
  %72 = select i1 %70, i1 true, i1 %71
  br i1 %72, label %29, label %73

73:                                               ; preds = %64, %63
  %74 = load i32, ptr %28, align 8, !tbaa !126
  %75 = icmp slt i32 %74, %4
  br i1 %75, label %76, label %340

76:                                               ; preds = %73
  %77 = icmp eq ptr %2, null
  br i1 %77, label %78, label %83

78:                                               ; preds = %76
  %79 = call i32 (ptr, ptr, ptr, i32, i32, i32, ptr, ptr, ...) @gimpel_reduce(ptr noundef %0, ptr noundef nonnull %1, ptr noundef null, i32 noundef %3, i32 noundef %4, i32 noundef %5, ptr noundef nonnull %6, ptr noundef nonnull %10) #43
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %83, label %81

81:                                               ; preds = %78
  %82 = load ptr, ptr %10, align 8, !tbaa !13
  br label %340

83:                                               ; preds = %78, %76
  %84 = call ptr (ptr, ptr, ...) @sm_maximal_independent_set(ptr noundef %0, ptr noundef %2) #43
  %85 = load i32, ptr %28, align 8, !tbaa !126
  %86 = getelementptr inbounds %struct.pla_types_struct, ptr %84, i64 0, i32 1
  %87 = load i32, ptr %86, align 8, !tbaa !126
  %88 = add nsw i32 %87, %85
  %89 = call i32 @llvm.smax.i32(i32 %88, i32 %3)
  %90 = call ptr (...) @sm_row_alloc() #43
  %91 = load ptr, ptr %84, align 8, !tbaa !120
  %92 = getelementptr inbounds %struct.sm_col_struct, ptr %91, i64 0, i32 3
  %93 = load ptr, ptr %92, align 8, !tbaa !13
  %94 = icmp eq ptr %93, null
  br i1 %94, label %123, label %95

95:                                               ; preds = %83
  %96 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 1
  br label %97

97:                                               ; preds = %119, %95
  %98 = phi ptr [ %93, %95 ], [ %121, %119 ]
  %99 = getelementptr inbounds %struct.sm_element_struct, ptr %98, i64 0, i32 1
  %100 = load i32, ptr %99, align 4, !tbaa !103
  %101 = icmp sgt i32 %100, -1
  call void @llvm.assume(i1 %101)
  %102 = load i32, ptr %96, align 8, !tbaa !107
  %103 = icmp slt i32 %100, %102
  call void @llvm.assume(i1 %103)
  %104 = load ptr, ptr %0, align 8, !tbaa !108
  %105 = zext i32 %100 to i64
  %106 = getelementptr inbounds ptr, ptr %104, i64 %105
  %107 = load ptr, ptr %106, align 8, !tbaa !13
  %108 = getelementptr inbounds %struct.sm_col_struct, ptr %107, i64 0, i32 3
  %109 = load ptr, ptr %108, align 8, !tbaa !13
  %110 = icmp eq ptr %109, null
  br i1 %110, label %119, label %111

111:                                              ; preds = %111, %97
  %112 = phi ptr [ %117, %111 ], [ %109, %97 ]
  %113 = getelementptr inbounds %struct.sm_element_struct, ptr %112, i64 0, i32 1
  %114 = load i32, ptr %113, align 4, !tbaa !103
  %115 = call ptr (ptr, i32, ...) @sm_row_insert(ptr noundef %90, i32 noundef %114) #43
  %116 = getelementptr inbounds %struct.sm_element_struct, ptr %112, i64 0, i32 4
  %117 = load ptr, ptr %116, align 8, !tbaa !13
  %118 = icmp eq ptr %117, null
  br i1 %118, label %119, label %111

119:                                              ; preds = %111, %97
  %120 = getelementptr inbounds %struct.sm_element_struct, ptr %98, i64 0, i32 4
  %121 = load ptr, ptr %120, align 8, !tbaa !13
  %122 = icmp eq ptr %121, null
  br i1 %122, label %123, label %97

123:                                              ; preds = %119, %83
  %124 = getelementptr inbounds %struct.sm_col_struct, ptr %90, i64 0, i32 3
  %125 = load ptr, ptr %124, align 8, !tbaa !13
  %126 = icmp eq ptr %125, null
  br i1 %126, label %192, label %127

127:                                              ; preds = %123
  %128 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 3
  %129 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 2
  %130 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 1
  br label %131

131:                                              ; preds = %186, %127
  %132 = phi ptr [ %125, %127 ], [ %190, %186 ]
  %133 = phi i32 [ -1, %127 ], [ %188, %186 ]
  %134 = phi double [ -1.000000e+00, %127 ], [ %187, %186 ]
  %135 = getelementptr inbounds %struct.sm_element_struct, ptr %132, i64 0, i32 1
  %136 = load i32, ptr %135, align 4, !tbaa !103
  %137 = icmp sgt i32 %136, -1
  br i1 %137, label %138, label %146

138:                                              ; preds = %131
  %139 = load i32, ptr %128, align 8, !tbaa !104
  %140 = icmp slt i32 %136, %139
  br i1 %140, label %141, label %146

141:                                              ; preds = %138
  %142 = load ptr, ptr %129, align 8, !tbaa !105
  %143 = zext i32 %136 to i64
  %144 = getelementptr inbounds ptr, ptr %142, i64 %143
  %145 = load ptr, ptr %144, align 8, !tbaa !13
  br label %146

146:                                              ; preds = %141, %138, %131
  %147 = phi ptr [ %145, %141 ], [ null, %138 ], [ null, %131 ]
  %148 = getelementptr inbounds %struct.sm_col_struct, ptr %147, i64 0, i32 3
  %149 = load ptr, ptr %148, align 8, !tbaa !13
  %150 = icmp eq ptr %149, null
  br i1 %150, label %172, label %151

151:                                              ; preds = %146
  %152 = load i32, ptr %130, align 8, !tbaa !107
  %153 = load ptr, ptr %0, align 8, !tbaa !108
  br label %154

154:                                              ; preds = %154, %151
  %155 = phi ptr [ %149, %151 ], [ %170, %154 ]
  %156 = phi double [ 0.000000e+00, %151 ], [ %168, %154 ]
  %157 = load i32, ptr %155, align 8, !tbaa !42
  %158 = icmp sgt i32 %157, -1
  call void @llvm.assume(i1 %158)
  %159 = icmp slt i32 %157, %152
  call void @llvm.assume(i1 %159)
  %160 = zext i32 %157 to i64
  %161 = getelementptr inbounds ptr, ptr %153, i64 %160
  %162 = load ptr, ptr %161, align 8, !tbaa !13
  %163 = getelementptr inbounds %struct.sm_col_struct, ptr %162, i64 0, i32 1
  %164 = load i32, ptr %163, align 4, !tbaa !109
  %165 = sitofp i32 %164 to double
  %166 = fadd double %165, -1.000000e+00
  %167 = fdiv double 1.000000e+00, %166
  %168 = fadd double %156, %167
  %169 = getelementptr inbounds %struct.sm_element_struct, ptr %155, i64 0, i32 2
  %170 = load ptr, ptr %169, align 8, !tbaa !13
  %171 = icmp eq ptr %170, null
  br i1 %171, label %172, label %154

172:                                              ; preds = %154, %146
  %173 = phi double [ 0.000000e+00, %146 ], [ %168, %154 ]
  br i1 %77, label %179, label %174

174:                                              ; preds = %172
  %175 = load i32, ptr %147, align 8, !tbaa !35
  %176 = sext i32 %175 to i64
  %177 = getelementptr inbounds i32, ptr %2, i64 %176
  %178 = load i32, ptr %177, align 4, !tbaa !16
  br label %179

179:                                              ; preds = %174, %172
  %180 = phi i32 [ %178, %174 ], [ 1, %172 ]
  %181 = sitofp i32 %180 to double
  %182 = fdiv double %173, %181
  %183 = fcmp ogt double %182, %134
  br i1 %183, label %184, label %186

184:                                              ; preds = %179
  %185 = load i32, ptr %147, align 8, !tbaa !35
  br label %186

186:                                              ; preds = %184, %179
  %187 = phi double [ %182, %184 ], [ %134, %179 ]
  %188 = phi i32 [ %185, %184 ], [ %133, %179 ]
  %189 = getelementptr inbounds %struct.sm_element_struct, ptr %132, i64 0, i32 4
  %190 = load ptr, ptr %189, align 8, !tbaa !13
  %191 = icmp eq ptr %190, null
  br i1 %191, label %192, label %131

192:                                              ; preds = %186, %123
  %193 = phi i32 [ -1, %123 ], [ %188, %186 ]
  call void (ptr, ...) @sm_row_free(ptr noundef %90) #43
  call void (ptr, ...) @solution_free(ptr noundef nonnull %84) #43
  %194 = icmp eq i32 %5, 0
  br i1 %194, label %195, label %200

195:                                              ; preds = %192
  %196 = getelementptr inbounds %struct.stats_struct, ptr %6, i64 0, i32 7
  %197 = load i32, ptr %196, align 4, !tbaa !119
  %198 = add nsw i32 %197, %89
  %199 = getelementptr inbounds %struct.stats_struct, ptr %6, i64 0, i32 10
  store i32 %198, ptr %199, align 4, !tbaa !153
  br label %200

200:                                              ; preds = %195, %192
  br i1 %26, label %201, label %224

201:                                              ; preds = %200
  %202 = getelementptr inbounds %struct.stats_struct, ptr %6, i64 0, i32 4
  %203 = load i32, ptr %202, align 8, !tbaa !156
  %204 = icmp eq i32 %203, 0
  %205 = select i1 %204, ptr @.str.15.374, ptr @.str.14.375
  %206 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.13.376, i32 noundef %5, ptr noundef nonnull %205) #44
  %207 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 6
  %208 = load i32, ptr %207, align 8, !tbaa !99
  %209 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 9
  %210 = load i32, ptr %209, align 8, !tbaa !111
  %211 = load i32, ptr %28, align 8, !tbaa !126
  %212 = getelementptr inbounds %struct.stats_struct, ptr %6, i64 0, i32 7
  %213 = load i32, ptr %212, align 4, !tbaa !119
  %214 = add nsw i32 %213, %211
  %215 = add nsw i32 %213, %4
  %216 = add nsw i32 %213, %89
  %217 = call i64 (...) @util_cpu_time() #43
  %218 = getelementptr inbounds %struct.stats_struct, ptr %6, i64 0, i32 8
  %219 = load i64, ptr %218, align 8, !tbaa !148
  %220 = sub nsw i64 %217, %219
  %221 = call ptr @util_print_time(i64 noundef %220) #43
  %222 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.16.377, i32 noundef %208, i32 noundef %210, i32 noundef %214, i32 noundef %215, i32 noundef %216, ptr noundef %221) #44
  %223 = icmp slt i32 %89, %4
  br i1 %223, label %229, label %226

224:                                              ; preds = %200
  %225 = icmp slt i32 %89, %4
  br i1 %225, label %229, label %228

226:                                              ; preds = %201
  %227 = call i32 @puts(ptr nonnull dereferenceable(1) @str.23)
  br label %228

228:                                              ; preds = %226, %224
  store ptr null, ptr %10, align 8, !tbaa !13
  br label %338

229:                                              ; preds = %224, %201
  %230 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 6
  %231 = load i32, ptr %230, align 8, !tbaa !99
  %232 = icmp eq i32 %231, 0
  br i1 %232, label %233, label %257

233:                                              ; preds = %229
  %234 = call ptr (ptr, ...) @solution_dup(ptr noundef %1) #43
  store ptr %234, ptr %10, align 8, !tbaa !13
  br i1 %26, label %235, label %237

235:                                              ; preds = %233
  %236 = call i32 @puts(ptr nonnull dereferenceable(1) @str.22)
  br label %237

237:                                              ; preds = %235, %233
  %238 = load i32, ptr %6, align 8, !tbaa !149
  %239 = icmp eq i32 %238, 0
  br i1 %239, label %338, label %240

240:                                              ; preds = %237
  %241 = getelementptr inbounds %struct.stats_struct, ptr %6, i64 0, i32 4
  %242 = load i32, ptr %241, align 8, !tbaa !156
  %243 = icmp eq i32 %242, 0
  br i1 %243, label %244, label %338

244:                                              ; preds = %240
  %245 = load ptr, ptr %10, align 8, !tbaa !13
  %246 = getelementptr inbounds %struct.pla_types_struct, ptr %245, i64 0, i32 1
  %247 = load i32, ptr %246, align 8, !tbaa !126
  %248 = getelementptr inbounds %struct.stats_struct, ptr %6, i64 0, i32 7
  %249 = load i32, ptr %248, align 4, !tbaa !119
  %250 = add nsw i32 %249, %247
  %251 = call i64 (...) @util_cpu_time() #43
  %252 = getelementptr inbounds %struct.stats_struct, ptr %6, i64 0, i32 8
  %253 = load i64, ptr %252, align 8, !tbaa !148
  %254 = sub nsw i64 %251, %253
  %255 = call ptr @util_print_time(i64 noundef %254) #43
  %256 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.19.378, i32 noundef %250, i32 noundef %5, ptr noundef %255) #44
  br label %338

257:                                              ; preds = %229
  %258 = call i32 (ptr, ptr, ptr, ...) @sm_block_partition(ptr noundef nonnull %0, ptr noundef nonnull %8, ptr noundef nonnull %9) #43
  %259 = icmp eq i32 %258, 0
  br i1 %259, label %313, label %260

260:                                              ; preds = %257
  %261 = load ptr, ptr %8, align 8, !tbaa !13
  %262 = getelementptr inbounds %struct.sm_matrix_struct, ptr %261, i64 0, i32 9
  %263 = load i32, ptr %262, align 8, !tbaa !111
  %264 = load ptr, ptr %9, align 8, !tbaa !13
  %265 = getelementptr inbounds %struct.sm_matrix_struct, ptr %264, i64 0, i32 9
  %266 = load i32, ptr %265, align 8, !tbaa !111
  %267 = icmp sgt i32 %263, %266
  br i1 %267, label %268, label %269

268:                                              ; preds = %260
  store ptr %264, ptr %8, align 8, !tbaa !13
  store ptr %261, ptr %9, align 8, !tbaa !13
  br label %269

269:                                              ; preds = %268, %260
  %270 = phi ptr [ %261, %268 ], [ %264, %260 ]
  %271 = phi ptr [ %264, %268 ], [ %261, %260 ]
  br i1 %26, label %272, label %278

272:                                              ; preds = %269
  %273 = getelementptr inbounds %struct.sm_matrix_struct, ptr %271, i64 0, i32 6
  %274 = load i32, ptr %273, align 8, !tbaa !99
  %275 = getelementptr inbounds %struct.sm_matrix_struct, ptr %270, i64 0, i32 6
  %276 = load i32, ptr %275, align 8, !tbaa !99
  %277 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.20.379, i32 noundef %274, i32 noundef %276) #44
  br label %278

278:                                              ; preds = %272, %269
  %279 = getelementptr inbounds %struct.stats_struct, ptr %6, i64 0, i32 5
  %280 = load i32, ptr %279, align 4, !tbaa !154
  %281 = add nsw i32 %280, 1
  store i32 %281, ptr %279, align 4, !tbaa !154
  %282 = call ptr (...) @solution_alloc() #43
  %283 = getelementptr inbounds %struct.stats_struct, ptr %6, i64 0, i32 4
  %284 = load i32, ptr %283, align 8, !tbaa !156
  %285 = add nsw i32 %284, 1
  store i32 %285, ptr %283, align 8, !tbaa !156
  %286 = load ptr, ptr %8, align 8, !tbaa !13
  %287 = load i32, ptr %28, align 8, !tbaa !126
  %288 = sub nsw i32 %4, %287
  %289 = add nsw i32 %5, 1
  %290 = call ptr @sm_mincov(ptr noundef %286, ptr noundef %282, ptr noundef %2, i32 noundef 0, i32 noundef %288, i32 noundef %289, ptr noundef nonnull %6) #44
  %291 = load i32, ptr %283, align 8, !tbaa !156
  %292 = add nsw i32 %291, -1
  store i32 %292, ptr %283, align 8, !tbaa !156
  call void (ptr, ...) @solution_free(ptr noundef %282) #43
  %293 = load ptr, ptr %8, align 8, !tbaa !13
  call void (ptr, ...) @sm_free(ptr noundef %293) #43
  %294 = icmp eq ptr %290, null
  br i1 %294, label %310, label %295

295:                                              ; preds = %278
  %296 = load ptr, ptr %290, align 8, !tbaa !120
  %297 = getelementptr inbounds %struct.sm_col_struct, ptr %296, i64 0, i32 3
  %298 = load ptr, ptr %297, align 8, !tbaa !13
  %299 = icmp eq ptr %298, null
  br i1 %299, label %307, label %300

300:                                              ; preds = %300, %295
  %301 = phi ptr [ %305, %300 ], [ %298, %295 ]
  %302 = getelementptr inbounds %struct.sm_element_struct, ptr %301, i64 0, i32 1
  %303 = load i32, ptr %302, align 4, !tbaa !103
  call void (ptr, ptr, i32, ...) @solution_add(ptr noundef %1, ptr noundef %2, i32 noundef %303) #43
  %304 = getelementptr inbounds %struct.sm_element_struct, ptr %301, i64 0, i32 4
  %305 = load ptr, ptr %304, align 8, !tbaa !13
  %306 = icmp eq ptr %305, null
  br i1 %306, label %307, label %300

307:                                              ; preds = %300, %295
  call void (ptr, ...) @solution_free(ptr noundef nonnull %290) #43
  %308 = load ptr, ptr %9, align 8, !tbaa !13
  %309 = call ptr @sm_mincov(ptr noundef %308, ptr noundef %1, ptr noundef %2, i32 noundef %89, i32 noundef %4, i32 noundef %289, ptr noundef nonnull %6) #44
  br label %310

310:                                              ; preds = %307, %278
  %311 = phi ptr [ %309, %307 ], [ null, %278 ]
  store ptr %311, ptr %10, align 8, !tbaa !13
  %312 = load ptr, ptr %9, align 8, !tbaa !13
  call void (ptr, ...) @sm_free(ptr noundef %312) #43
  br label %338

313:                                              ; preds = %257
  br i1 %26, label %314, label %316

314:                                              ; preds = %313
  %315 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.21.380, i32 noundef %193) #44
  br label %316

316:                                              ; preds = %314, %313
  %317 = call ptr (ptr, ...) @sm_dup(ptr noundef nonnull %0) #43
  %318 = call ptr (ptr, ...) @solution_dup(ptr noundef %1) #43
  call void (ptr, ptr, ptr, i32, ...) @solution_accept(ptr noundef %318, ptr noundef %317, ptr noundef %2, i32 noundef %193) #43
  %319 = add nsw i32 %5, 1
  %320 = call ptr @sm_mincov(ptr noundef %317, ptr noundef %318, ptr noundef %2, i32 noundef %89, i32 noundef %4, i32 noundef %319, ptr noundef nonnull %6) #44
  call void (ptr, ...) @solution_free(ptr noundef %318) #43
  call void (ptr, ...) @sm_free(ptr noundef %317) #43
  %321 = icmp eq ptr %320, null
  %322 = getelementptr inbounds %struct.stats_struct, ptr %6, i64 0, i32 9
  %323 = load i32, ptr %322, align 8, !tbaa !152
  %324 = icmp eq i32 %323, 0
  br i1 %321, label %325, label %326

325:                                              ; preds = %316
  br i1 %324, label %332, label %340

326:                                              ; preds = %316
  br i1 %324, label %327, label %340

327:                                              ; preds = %326
  %328 = getelementptr inbounds %struct.pla_types_struct, ptr %320, i64 0, i32 1
  %329 = load i32, ptr %328, align 8, !tbaa !126
  %330 = call i32 @llvm.smin.i32(i32 %329, i32 %4)
  %331 = icmp eq i32 %329, %89
  br i1 %331, label %340, label %332

332:                                              ; preds = %327, %325
  %333 = phi i32 [ %330, %327 ], [ %4, %325 ]
  %334 = call ptr (ptr, ...) @sm_dup(ptr noundef nonnull %0) #43
  %335 = call ptr (ptr, ...) @solution_dup(ptr noundef %1) #43
  call void (ptr, ptr, ptr, i32, ...) @solution_reject(ptr noundef %335, ptr noundef %334, ptr noundef %2, i32 noundef %193) #43
  %336 = call ptr @sm_mincov(ptr noundef %334, ptr noundef %335, ptr noundef %2, i32 noundef %89, i32 noundef %333, i32 noundef %319, ptr noundef nonnull %6) #44
  call void (ptr, ...) @solution_free(ptr noundef %335) #43
  call void (ptr, ...) @sm_free(ptr noundef %334) #43
  %337 = call ptr (ptr, ptr, ...) @solution_choose_best(ptr noundef %320, ptr noundef %336) #43
  store ptr %337, ptr %10, align 8, !tbaa !13
  br label %338

338:                                              ; preds = %332, %310, %244, %240, %237, %228
  %339 = load ptr, ptr %10, align 8, !tbaa !13
  br label %340

340:                                              ; preds = %338, %327, %326, %325, %81, %73
  %341 = phi ptr [ %82, %81 ], [ %339, %338 ], [ null, %73 ], [ null, %325 ], [ %320, %327 ], [ %320, %326 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10) #45
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #45
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #45
  ret ptr %341
}

; Function Attrs: noreturn nounwind optsize
declare void @abort() local_unnamed_addr #18

; Function Attrs: nounwind optsize uwtable
define internal void @phase_assignment(ptr noundef %0, i32 noundef %1) #0 {
  %3 = srem i32 %1, 2
  store i32 %3, ptr @skip_make_sparse, align 4, !tbaa !16
  %4 = sdiv i32 %1, 2
  %5 = sdiv i32 %1, 4
  %6 = srem i32 %5, 2
  store i32 %6, ptr @opo_exact, align 4, !tbaa !16
  %7 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 5
  %8 = load ptr, ptr %7, align 8, !tbaa !72
  %9 = icmp eq ptr %8, null
  br i1 %9, label %11, label %10

10:                                               ; preds = %2
  tail call void @free(ptr noundef nonnull %8) #43
  store ptr null, ptr %7, align 8, !tbaa !72
  br label %11

11:                                               ; preds = %10, %2
  %12 = and i32 %4, 1
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %28, label %14

14:                                               ; preds = %11
  %15 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %16 = load i32, ptr %15, align 4, !tbaa !16
  %17 = shl i32 %16, 5
  %18 = and i32 %17, 32736
  %19 = icmp ult i32 %18, 33
  %20 = add nsw i32 %18, -1
  %21 = lshr i32 %20, 3
  %22 = and i32 %21, 536870908
  %23 = add nuw nsw i32 %22, 8
  %24 = select i1 %19, i32 8, i32 %23
  %25 = zext i32 %24 to i64
  %26 = tail call noalias ptr @malloc(i64 noundef %25) #42
  %27 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %26, ptr noundef nonnull %15) #43
  store ptr %27, ptr %7, align 8, !tbaa !72
  tail call void @repeated_phase_assignment(ptr noundef nonnull %0) #44
  br label %30

28:                                               ; preds = %11
  %29 = tail call ptr @find_phase(ptr noundef nonnull %0, i32 noundef 0, ptr noundef null) #44
  store ptr %29, ptr %7, align 8, !tbaa !72
  br label %30

30:                                               ; preds = %28, %14
  store i32 0, ptr @skip_make_sparse, align 4, !tbaa !16
  %31 = tail call ptr @set_phase(ptr noundef nonnull %0) #44
  tail call fastcc void @minimize(ptr noundef nonnull %0) #44
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @repeated_phase_assignment(ptr nocapture noundef readonly %0) #0 {
  %2 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %3 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds i32, ptr %2, i64 %4
  %6 = load i32, ptr %5, align 4, !tbaa !16
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %56

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 5
  br label %10

10:                                               ; preds = %48, %8
  %11 = phi i32 [ 0, %8 ], [ %49, %48 ]
  %12 = load ptr, ptr %9, align 8, !tbaa !72
  %13 = tail call ptr @find_phase(ptr noundef %0, i32 noundef %11, ptr noundef %12) #44
  %14 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %15 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i32, ptr %14, i64 %16
  %18 = load i32, ptr %17, align 4, !tbaa !16
  %19 = add nsw i32 %18, %11
  %20 = ashr i32 %19, 5
  %21 = add nsw i32 %20, 1
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i32, ptr %13, i64 %22
  %24 = load i32, ptr %23, align 4, !tbaa !16
  %25 = and i32 %19, 31
  %26 = shl nuw i32 1, %25
  %27 = and i32 %26, %24
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %35

29:                                               ; preds = %10
  %30 = xor i32 %26, -1
  %31 = load ptr, ptr %9, align 8, !tbaa !72
  %32 = getelementptr inbounds i32, ptr %31, i64 %22
  %33 = load i32, ptr %32, align 4, !tbaa !16
  %34 = and i32 %33, %30
  store i32 %34, ptr %32, align 4, !tbaa !16
  br label %35

35:                                               ; preds = %29, %10
  %36 = load i32, ptr @trace, align 4, !tbaa !16
  %37 = icmp ne i32 %36, 0
  %38 = load i32, ptr @summary, align 4
  %39 = icmp ne i32 %38, 0
  %40 = select i1 %37, i1 true, i1 %39
  br i1 %40, label %41, label %48

41:                                               ; preds = %35
  %42 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.392, i32 noundef %11) #44
  %43 = load ptr, ptr %9, align 8, !tbaa !72
  %44 = tail call ptr (ptr, ...) @pc1(ptr noundef %43) #43
  %45 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1.393, ptr noundef %44) #44
  %46 = tail call ptr (ptr, ...) @pc1(ptr noundef nonnull %13) #43
  %47 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.394, ptr noundef %46) #44
  br label %48

48:                                               ; preds = %41, %35
  tail call void @free(ptr noundef nonnull %13) #43
  %49 = add nuw nsw i32 %11, 1
  %50 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %51 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i32, ptr %50, i64 %52
  %54 = load i32, ptr %53, align 4, !tbaa !16
  %55 = icmp slt i32 %49, %54
  br i1 %55, label %10, label %56

56:                                               ; preds = %48, %1
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @find_phase(ptr nocapture noundef readonly %0, i32 noundef %1, ptr noundef %2) #0 {
  %4 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %5 = load i32, ptr %4, align 4, !tbaa !16
  %6 = shl i32 %5, 5
  %7 = and i32 %6, 32736
  %8 = icmp ult i32 %7, 33
  %9 = add nsw i32 %7, -1
  %10 = lshr i32 %9, 3
  %11 = and i32 %10, 536870908
  %12 = add nuw nsw i32 %11, 8
  %13 = select i1 %8, i32 8, i32 %12
  %14 = zext i32 %13 to i64
  %15 = tail call noalias ptr @malloc(i64 noundef %14) #42
  %16 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %15, ptr noundef nonnull %4) #43
  %17 = tail call ptr (...) @new_PLA() #43
  %18 = load ptr, ptr %0, align 8, !tbaa !61
  %19 = tail call ptr (ptr, ...) @sf_save(ptr noundef %18) #43
  store ptr %19, ptr %17, align 8, !tbaa !61
  %20 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 2
  %21 = load ptr, ptr %20, align 8, !tbaa !63
  %22 = tail call ptr (ptr, ...) @sf_save(ptr noundef %21) #43
  %23 = getelementptr inbounds %struct.PLA_t, ptr %17, i64 0, i32 2
  store ptr %22, ptr %23, align 8, !tbaa !63
  %24 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 1
  %25 = load ptr, ptr %24, align 8, !tbaa !62
  %26 = tail call ptr (ptr, ...) @sf_save(ptr noundef %25) #43
  %27 = getelementptr inbounds %struct.PLA_t, ptr %17, i64 0, i32 1
  store ptr %26, ptr %27, align 8, !tbaa !62
  %28 = icmp eq ptr %2, null
  br i1 %28, label %44, label %29

29:                                               ; preds = %3
  %30 = load i32, ptr %2, align 4, !tbaa !16
  %31 = shl i32 %30, 5
  %32 = and i32 %31, 32736
  %33 = icmp ult i32 %32, 33
  %34 = add nsw i32 %32, -1
  %35 = lshr i32 %34, 3
  %36 = and i32 %35, 536870908
  %37 = add nuw nsw i32 %36, 8
  %38 = select i1 %33, i32 8, i32 %37
  %39 = zext i32 %38 to i64
  %40 = tail call noalias ptr @malloc(i64 noundef %39) #42
  %41 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %40, ptr noundef nonnull %2) #43
  %42 = getelementptr inbounds %struct.PLA_t, ptr %17, i64 0, i32 5
  store ptr %41, ptr %42, align 8, !tbaa !72
  %43 = tail call ptr @set_phase(ptr noundef nonnull %17) #44
  br label %44

44:                                               ; preds = %29, %3
  %45 = tail call i64 (...) @util_cpu_time() #43
  %46 = tail call i32 @output_phase_setup(ptr noundef nonnull %17, i32 noundef %1) #44
  %47 = load i32, ptr @summary, align 4, !tbaa !16
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %53, label %49

49:                                               ; preds = %44
  %50 = load ptr, ptr %17, align 8, !tbaa !61
  %51 = tail call i64 (...) @util_cpu_time() #43
  %52 = sub nsw i64 %51, %45
  tail call void (ptr, ptr, i64, ...) @print_trace(ptr noundef %50, ptr noundef nonnull @.str.3.387, i64 noundef %52) #43
  br label %53

53:                                               ; preds = %49, %44
  tail call fastcc void @minimize(ptr noundef nonnull %17) #44
  %54 = tail call i64 (...) @util_cpu_time() #43
  %55 = load ptr, ptr %17, align 8, !tbaa !61
  %56 = load ptr, ptr %27, align 8, !tbaa !62
  %57 = tail call ptr @opo(ptr noundef %16, ptr noundef %55, ptr noundef %56, ptr poison, i32 noundef %1) #44
  store ptr %57, ptr %17, align 8, !tbaa !61
  %58 = load i32, ptr @summary, align 4, !tbaa !16
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %63, label %60

60:                                               ; preds = %53
  %61 = tail call i64 (...) @util_cpu_time() #43
  %62 = sub nsw i64 %61, %54
  tail call void (ptr, ptr, i64, ...) @print_trace(ptr noundef %57, ptr noundef nonnull @.str.4.388, i64 noundef %62) #43
  br label %63

63:                                               ; preds = %60, %53
  tail call void (ptr, ...) @free_PLA(ptr noundef nonnull %17) #43
  tail call void (...) @setdown_cube() #43
  %64 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %65 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds i32, ptr %64, i64 %66
  %68 = load i32, ptr %67, align 4, !tbaa !16
  %69 = sub nsw i32 %68, %1
  %70 = sdiv i32 %69, -2
  %71 = add i32 %70, %68
  store i32 %71, ptr %67, align 4, !tbaa !16
  tail call void (...) @cube_setup() #43
  ret ptr %16
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @set_phase(ptr noundef returned %0) #0 {
  %2 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 11), align 8, !tbaa !7
  %3 = load ptr, ptr %2, align 8, !tbaa !13
  %4 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 5
  %5 = load ptr, ptr %4, align 8, !tbaa !72
  %6 = getelementptr inbounds ptr, ptr %2, i64 1
  %7 = load ptr, ptr %6, align 8, !tbaa !13
  %8 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %9 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %10 = add nsw i32 %9, -1
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds ptr, ptr %8, i64 %11
  %13 = load ptr, ptr %12, align 8, !tbaa !13
  %14 = tail call ptr (ptr, ptr, ptr, ...) @set_diff(ptr noundef %7, ptr noundef %13, ptr noundef %5) #43
  %15 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %16 = tail call ptr (ptr, ptr, ptr, ...) @set_diff(ptr noundef %3, ptr noundef %15, ptr noundef %13) #43
  %17 = tail call ptr (ptr, ptr, ptr, ...) @set_or(ptr noundef %7, ptr noundef %16, ptr noundef %7) #43
  %18 = load ptr, ptr %0, align 8, !tbaa !61
  %19 = getelementptr inbounds %struct.set_family, ptr %18, i64 0, i32 3
  %20 = load i32, ptr %19, align 4, !tbaa !31
  %21 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 2
  %22 = load ptr, ptr %21, align 8, !tbaa !63
  %23 = getelementptr inbounds %struct.set_family, ptr %22, i64 0, i32 3
  %24 = load i32, ptr %23, align 4, !tbaa !31
  %25 = add nsw i32 %24, %20
  %26 = load i32, ptr @cube, align 8, !tbaa !14
  %27 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef %25, i32 noundef %26) #43
  %28 = load ptr, ptr %0, align 8, !tbaa !61
  %29 = getelementptr inbounds %struct.set_family, ptr %28, i64 0, i32 3
  %30 = load i32, ptr %29, align 4, !tbaa !31
  %31 = load ptr, ptr %21, align 8, !tbaa !63
  %32 = getelementptr inbounds %struct.set_family, ptr %31, i64 0, i32 3
  %33 = load i32, ptr %32, align 4, !tbaa !31
  %34 = add nsw i32 %33, %30
  %35 = load i32, ptr @cube, align 8, !tbaa !14
  %36 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef %34, i32 noundef %35) #43
  %37 = load ptr, ptr %0, align 8, !tbaa !61
  %38 = getelementptr inbounds %struct.set_family, ptr %37, i64 0, i32 5
  %39 = load ptr, ptr %38, align 8, !tbaa !33
  %40 = getelementptr inbounds %struct.set_family, ptr %37, i64 0, i32 3
  %41 = load i32, ptr %40, align 4, !tbaa !31
  %42 = load i32, ptr %37, align 8, !tbaa !34
  %43 = mul nsw i32 %42, %41
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i32, ptr %39, i64 %44
  %46 = icmp sgt i32 %43, 0
  br i1 %46, label %47, label %85

47:                                               ; preds = %1
  %48 = getelementptr inbounds %struct.set_family, ptr %27, i64 0, i32 5
  %49 = getelementptr inbounds %struct.set_family, ptr %27, i64 0, i32 3
  %50 = getelementptr inbounds %struct.set_family, ptr %36, i64 0, i32 5
  %51 = getelementptr inbounds %struct.set_family, ptr %36, i64 0, i32 3
  br label %52

52:                                               ; preds = %79, %47
  %53 = phi ptr [ %39, %47 ], [ %83, %79 ]
  %54 = tail call ptr (ptr, ptr, ptr, ...) @set_and(ptr noundef %3, ptr noundef %53, ptr noundef %5) #43
  %55 = tail call i32 (ptr, ptr, ...) @setp_disjoint(ptr noundef %54, ptr noundef %13) #43
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %66

57:                                               ; preds = %52
  %58 = load ptr, ptr %48, align 8, !tbaa !33
  %59 = load i32, ptr %27, align 8, !tbaa !34
  %60 = load i32, ptr %49, align 4, !tbaa !31
  %61 = add nsw i32 %60, 1
  store i32 %61, ptr %49, align 4, !tbaa !31
  %62 = mul nsw i32 %60, %59
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds i32, ptr %58, i64 %63
  %65 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %64, ptr noundef %3) #43
  br label %66

66:                                               ; preds = %57, %52
  %67 = tail call ptr (ptr, ptr, ptr, ...) @set_and(ptr noundef %3, ptr noundef %53, ptr noundef %7) #43
  %68 = tail call i32 (ptr, ptr, ...) @setp_disjoint(ptr noundef %67, ptr noundef %13) #43
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %79

70:                                               ; preds = %66
  %71 = load ptr, ptr %50, align 8, !tbaa !33
  %72 = load i32, ptr %36, align 8, !tbaa !34
  %73 = load i32, ptr %51, align 4, !tbaa !31
  %74 = add nsw i32 %73, 1
  store i32 %74, ptr %51, align 4, !tbaa !31
  %75 = mul nsw i32 %73, %72
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds i32, ptr %71, i64 %76
  %78 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %77, ptr noundef %3) #43
  br label %79

79:                                               ; preds = %70, %66
  %80 = load ptr, ptr %0, align 8, !tbaa !61
  %81 = load i32, ptr %80, align 8, !tbaa !34
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds i32, ptr %53, i64 %82
  %84 = icmp ult ptr %83, %45
  br i1 %84, label %52, label %85

85:                                               ; preds = %79, %1
  %86 = phi ptr [ %37, %1 ], [ %80, %79 ]
  %87 = load ptr, ptr %21, align 8, !tbaa !63
  %88 = getelementptr inbounds %struct.set_family, ptr %87, i64 0, i32 5
  %89 = load ptr, ptr %88, align 8, !tbaa !33
  %90 = getelementptr inbounds %struct.set_family, ptr %87, i64 0, i32 3
  %91 = load i32, ptr %90, align 4, !tbaa !31
  %92 = load i32, ptr %87, align 8, !tbaa !34
  %93 = mul nsw i32 %92, %91
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds i32, ptr %89, i64 %94
  %96 = icmp sgt i32 %93, 0
  br i1 %96, label %97, label %137

97:                                               ; preds = %85
  %98 = getelementptr inbounds %struct.set_family, ptr %36, i64 0, i32 5
  %99 = getelementptr inbounds %struct.set_family, ptr %36, i64 0, i32 3
  %100 = getelementptr inbounds %struct.set_family, ptr %27, i64 0, i32 5
  %101 = getelementptr inbounds %struct.set_family, ptr %27, i64 0, i32 3
  br label %102

102:                                              ; preds = %129, %97
  %103 = phi ptr [ %89, %97 ], [ %133, %129 ]
  %104 = tail call ptr (ptr, ptr, ptr, ...) @set_and(ptr noundef %3, ptr noundef %103, ptr noundef %5) #43
  %105 = tail call i32 (ptr, ptr, ...) @setp_disjoint(ptr noundef %104, ptr noundef %13) #43
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %116

107:                                              ; preds = %102
  %108 = load ptr, ptr %98, align 8, !tbaa !33
  %109 = load i32, ptr %36, align 8, !tbaa !34
  %110 = load i32, ptr %99, align 4, !tbaa !31
  %111 = add nsw i32 %110, 1
  store i32 %111, ptr %99, align 4, !tbaa !31
  %112 = mul nsw i32 %110, %109
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds i32, ptr %108, i64 %113
  %115 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %114, ptr noundef %3) #43
  br label %116

116:                                              ; preds = %107, %102
  %117 = tail call ptr (ptr, ptr, ptr, ...) @set_and(ptr noundef %3, ptr noundef %103, ptr noundef %7) #43
  %118 = tail call i32 (ptr, ptr, ...) @setp_disjoint(ptr noundef %117, ptr noundef %13) #43
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %120, label %129

120:                                              ; preds = %116
  %121 = load ptr, ptr %100, align 8, !tbaa !33
  %122 = load i32, ptr %27, align 8, !tbaa !34
  %123 = load i32, ptr %101, align 4, !tbaa !31
  %124 = add nsw i32 %123, 1
  store i32 %124, ptr %101, align 4, !tbaa !31
  %125 = mul nsw i32 %123, %122
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds i32, ptr %121, i64 %126
  %128 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %127, ptr noundef %3) #43
  br label %129

129:                                              ; preds = %120, %116
  %130 = load ptr, ptr %21, align 8, !tbaa !63
  %131 = load i32, ptr %130, align 8, !tbaa !34
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds i32, ptr %103, i64 %132
  %134 = icmp ult ptr %133, %95
  br i1 %134, label %102, label %135

135:                                              ; preds = %129
  %136 = load ptr, ptr %0, align 8, !tbaa !61
  br label %137

137:                                              ; preds = %135, %85
  %138 = phi ptr [ %136, %135 ], [ %86, %85 ]
  tail call void (ptr, ...) @sf_free(ptr noundef %138) #43
  %139 = load ptr, ptr %21, align 8, !tbaa !63
  tail call void (ptr, ...) @sf_free(ptr noundef %139) #43
  store ptr %27, ptr %0, align 8, !tbaa !61
  store ptr %36, ptr %21, align 8, !tbaa !63
  ret ptr %0
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @minimize(ptr nocapture noundef %0) unnamed_addr #0 {
  %2 = load i32, ptr @opo_exact, align 4, !tbaa !16
  %3 = icmp eq i32 %2, 0
  %4 = tail call i64 (...) @util_cpu_time() #43
  %5 = load ptr, ptr %0, align 8, !tbaa !61
  %6 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 1
  %7 = load ptr, ptr %6, align 8, !tbaa !62
  %8 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 2
  %9 = load ptr, ptr %8, align 8, !tbaa !63
  br i1 %3, label %17, label %10

10:                                               ; preds = %1
  %11 = tail call ptr (ptr, ptr, ptr, i32, ...) @minimize_exact(ptr noundef %5, ptr noundef %7, ptr noundef %9, i32 noundef 1) #43
  store ptr %11, ptr %0, align 8, !tbaa !61
  %12 = load i32, ptr @summary, align 4, !tbaa !16
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %24, label %14

14:                                               ; preds = %10
  %15 = tail call i64 (...) @util_cpu_time() #43
  %16 = sub nsw i64 %15, %4
  tail call void (ptr, ptr, i64, ...) @print_trace(ptr noundef %11, ptr noundef nonnull @.str.9.385, i64 noundef %16) #43
  br label %24

17:                                               ; preds = %1
  %18 = tail call ptr (ptr, ptr, ptr, ...) @espresso(ptr noundef %5, ptr noundef %7, ptr noundef %9) #43
  store ptr %18, ptr %0, align 8, !tbaa !61
  %19 = load i32, ptr @summary, align 4, !tbaa !16
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %24, label %21

21:                                               ; preds = %17
  %22 = tail call i64 (...) @util_cpu_time() #43
  %23 = sub nsw i64 %22, %4
  tail call void (ptr, ptr, i64, ...) @print_trace(ptr noundef %18, ptr noundef nonnull @.str.10.386, i64 noundef %23) #43
  br label %24

24:                                               ; preds = %21, %17, %14, %10
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @output_phase_setup(ptr nocapture noundef %0, i32 noundef %1) #0 {
  %3 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %4 = icmp eq i32 %3, -1
  br i1 %4, label %5, label %7

5:                                                ; preds = %2
  tail call void (ptr, ...) @fatal(ptr noundef nonnull @.str.7.391) #43
  %6 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  br label %7

7:                                                ; preds = %5, %2
  %8 = phi i32 [ %6, %5 ], [ %3, %2 ]
  %9 = load ptr, ptr %0, align 8, !tbaa !61
  %10 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 1
  %11 = load ptr, ptr %10, align 8, !tbaa !62
  %12 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 2
  %13 = load ptr, ptr %12, align 8, !tbaa !63
  %14 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %15 = sext i32 %8 to i64
  %16 = getelementptr inbounds i32, ptr %14, i64 %15
  %17 = load i32, ptr %16, align 4, !tbaa !16
  %18 = add i32 %17, %1
  %19 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  %20 = getelementptr inbounds i32, ptr %19, i64 %15
  %21 = load i32, ptr %20, align 4, !tbaa !16
  %22 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %23 = getelementptr inbounds i32, ptr %22, i64 %15
  %24 = load i32, ptr %23, align 4, !tbaa !16
  %25 = sub nsw i32 %24, %1
  tail call void (...) @setdown_cube() #43
  %26 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %27 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds i32, ptr %26, i64 %28
  %30 = load i32, ptr %29, align 4, !tbaa !16
  %31 = add nsw i32 %30, %25
  store i32 %31, ptr %29, align 4, !tbaa !16
  tail call void (...) @cube_setup() #43
  %32 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %33 = load i32, ptr %32, align 4, !tbaa !16
  %34 = shl i32 %33, 5
  %35 = and i32 %34, 32736
  %36 = icmp ult i32 %35, 33
  %37 = add nsw i32 %35, -1
  %38 = lshr i32 %37, 3
  %39 = and i32 %38, 536870908
  %40 = add nuw nsw i32 %39, 8
  %41 = select i1 %36, i32 8, i32 %40
  %42 = zext i32 %41 to i64
  %43 = tail call noalias ptr @malloc(i64 noundef %42) #42
  %44 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %43, ptr noundef nonnull %32) #43
  %45 = load i32, ptr @cube, align 8, !tbaa !14
  %46 = icmp slt i32 %18, %45
  br i1 %46, label %47, label %61

47:                                               ; preds = %47, %7
  %48 = phi i32 [ %58, %47 ], [ %18, %7 ]
  %49 = and i32 %48, 31
  %50 = shl nuw i32 1, %49
  %51 = xor i32 %50, -1
  %52 = ashr i32 %48, 5
  %53 = add nsw i32 %52, 1
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds i32, ptr %44, i64 %54
  %56 = load i32, ptr %55, align 4, !tbaa !16
  %57 = and i32 %56, %51
  store i32 %57, ptr %55, align 4, !tbaa !16
  %58 = add nsw i32 %48, 1
  %59 = load i32, ptr @cube, align 8, !tbaa !14
  %60 = icmp slt i32 %58, %59
  br i1 %60, label %47, label %61

61:                                               ; preds = %47, %7
  %62 = load i32, ptr %44, align 4, !tbaa !16
  %63 = shl i32 %62, 5
  %64 = and i32 %63, 32736
  %65 = icmp ult i32 %64, 33
  %66 = add nsw i32 %64, -1
  %67 = lshr i32 %66, 3
  %68 = and i32 %67, 536870908
  %69 = add nuw nsw i32 %68, 8
  %70 = select i1 %65, i32 8, i32 %69
  %71 = zext i32 %70 to i64
  %72 = tail call noalias ptr @malloc(i64 noundef %71) #42
  %73 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %72, ptr noundef nonnull %44) #43
  %74 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %75 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds i32, ptr %74, i64 %76
  %78 = load i32, ptr %77, align 4, !tbaa !16
  %79 = icmp slt i32 %78, %18
  br i1 %79, label %80, label %93

80:                                               ; preds = %80, %61
  %81 = phi i32 [ %91, %80 ], [ %78, %61 ]
  %82 = and i32 %81, 31
  %83 = shl nuw i32 1, %82
  %84 = xor i32 %83, -1
  %85 = ashr i32 %81, 5
  %86 = add nsw i32 %85, 1
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds i32, ptr %73, i64 %87
  %89 = load i32, ptr %88, align 4, !tbaa !16
  %90 = and i32 %89, %84
  store i32 %90, ptr %88, align 4, !tbaa !16
  %91 = add nsw i32 %81, 1
  %92 = icmp eq i32 %91, %18
  br i1 %92, label %93, label %80

93:                                               ; preds = %80, %61
  %94 = getelementptr inbounds %struct.set_family, ptr %9, i64 0, i32 3
  %95 = load i32, ptr %94, align 4, !tbaa !31
  %96 = getelementptr inbounds %struct.set_family, ptr %13, i64 0, i32 3
  %97 = load i32, ptr %96, align 4, !tbaa !31
  %98 = add nsw i32 %97, %95
  %99 = load i32, ptr @cube, align 8, !tbaa !14
  %100 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef %98, i32 noundef %99) #43
  store ptr %100, ptr %0, align 8, !tbaa !61
  %101 = load i32, ptr %94, align 4, !tbaa !31
  %102 = load i32, ptr %96, align 4, !tbaa !31
  %103 = add nsw i32 %102, %101
  %104 = load i32, ptr @cube, align 8, !tbaa !14
  %105 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef %103, i32 noundef %104) #43
  store ptr %105, ptr %12, align 8, !tbaa !63
  %106 = getelementptr inbounds %struct.set_family, ptr %11, i64 0, i32 3
  %107 = load i32, ptr %106, align 4, !tbaa !31
  %108 = load i32, ptr @cube, align 8, !tbaa !14
  %109 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef %107, i32 noundef %108) #43
  store ptr %109, ptr %10, align 8, !tbaa !62
  %110 = getelementptr inbounds %struct.set_family, ptr %9, i64 0, i32 5
  %111 = load ptr, ptr %110, align 8, !tbaa !33
  %112 = load i32, ptr %94, align 4, !tbaa !31
  %113 = load i32, ptr %9, align 8, !tbaa !34
  %114 = mul nsw i32 %113, %112
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds i32, ptr %111, i64 %115
  %117 = icmp sgt i32 %114, 0
  br i1 %117, label %118, label %233

118:                                              ; preds = %93
  %119 = load ptr, ptr %0, align 8, !tbaa !61
  %120 = getelementptr inbounds %struct.set_family, ptr %119, i64 0, i32 5
  %121 = load ptr, ptr %120, align 8, !tbaa !33
  %122 = getelementptr inbounds %struct.set_family, ptr %119, i64 0, i32 3
  %123 = load ptr, ptr %12, align 8, !tbaa !63
  %124 = getelementptr inbounds %struct.set_family, ptr %123, i64 0, i32 5
  %125 = load ptr, ptr %124, align 8, !tbaa !33
  %126 = getelementptr inbounds %struct.set_family, ptr %123, i64 0, i32 3
  %127 = icmp sgt i32 %18, %21
  br label %128

128:                                              ; preds = %228, %118
  %129 = phi ptr [ %111, %118 ], [ %231, %228 ]
  %130 = load i32, ptr %119, align 8, !tbaa !34
  %131 = load i32, ptr %122, align 4, !tbaa !31
  %132 = add nsw i32 %131, 1
  store i32 %132, ptr %122, align 4, !tbaa !31
  %133 = mul nsw i32 %131, %130
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds i32, ptr %121, i64 %134
  %136 = load i32, ptr %123, align 8, !tbaa !34
  %137 = load i32, ptr %126, align 4, !tbaa !31
  %138 = add nsw i32 %137, 1
  store i32 %138, ptr %126, align 4, !tbaa !31
  %139 = mul nsw i32 %137, %136
  %140 = sext i32 %139 to i64
  %141 = load i32, ptr %44, align 4, !tbaa !16
  %142 = and i32 %141, 1023
  %143 = load i32, ptr %135, align 4, !tbaa !16
  %144 = and i32 %143, -1024
  %145 = or i32 %144, %142
  store i32 %145, ptr %135, align 4, !tbaa !16
  %146 = and i32 %141, 1023
  %147 = zext i32 %146 to i64
  br label %148

148:                                              ; preds = %148, %128
  %149 = phi i64 [ %156, %148 ], [ %147, %128 ]
  %150 = getelementptr inbounds i32, ptr %44, i64 %149
  %151 = load i32, ptr %150, align 4, !tbaa !16
  %152 = getelementptr inbounds i32, ptr %129, i64 %149
  %153 = load i32, ptr %152, align 4, !tbaa !16
  %154 = and i32 %153, %151
  %155 = getelementptr inbounds i32, ptr %135, i64 %149
  store i32 %154, ptr %155, align 4, !tbaa !16
  %156 = add nsw i64 %149, -1
  %157 = icmp ugt i64 %149, 1
  br i1 %157, label %148, label %158

158:                                              ; preds = %148
  %159 = getelementptr inbounds i32, ptr %125, i64 %140
  %160 = load i32, ptr %73, align 4, !tbaa !16
  %161 = and i32 %160, 1023
  %162 = load i32, ptr %159, align 4, !tbaa !16
  %163 = and i32 %162, -1024
  %164 = or i32 %163, %161
  store i32 %164, ptr %159, align 4, !tbaa !16
  %165 = and i32 %160, 1023
  %166 = zext i32 %165 to i64
  br label %167

167:                                              ; preds = %167, %158
  %168 = phi i64 [ %175, %167 ], [ %166, %158 ]
  %169 = getelementptr inbounds i32, ptr %73, i64 %168
  %170 = load i32, ptr %169, align 4, !tbaa !16
  %171 = getelementptr inbounds i32, ptr %129, i64 %168
  %172 = load i32, ptr %171, align 4, !tbaa !16
  %173 = and i32 %172, %170
  %174 = getelementptr inbounds i32, ptr %159, i64 %168
  store i32 %173, ptr %174, align 4, !tbaa !16
  %175 = add nsw i64 %168, -1
  %176 = icmp ugt i64 %168, 1
  br i1 %176, label %167, label %177

177:                                              ; preds = %167
  br i1 %127, label %225, label %179

178:                                              ; preds = %194
  br i1 %127, label %225, label %197

179:                                              ; preds = %194, %177
  %180 = phi i32 [ %195, %194 ], [ %18, %177 ]
  %181 = ashr i32 %180, 5
  %182 = add nsw i32 %181, 1
  %183 = sext i32 %182 to i64
  %184 = getelementptr inbounds i32, ptr %129, i64 %183
  %185 = load i32, ptr %184, align 4, !tbaa !16
  %186 = and i32 %180, 31
  %187 = shl nuw i32 1, %186
  %188 = and i32 %185, %187
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %194, label %190

190:                                              ; preds = %179
  %191 = getelementptr inbounds i32, ptr %135, i64 %183
  %192 = load i32, ptr %191, align 4, !tbaa !16
  %193 = or i32 %192, %187
  store i32 %193, ptr %191, align 4, !tbaa !16
  br label %194

194:                                              ; preds = %190, %179
  %195 = add i32 %180, 1
  %196 = icmp eq i32 %180, %21
  br i1 %196, label %178, label %179

197:                                              ; preds = %219, %178
  %198 = phi i32 [ %221, %219 ], [ %18, %178 ]
  %199 = phi i32 [ %220, %219 ], [ 0, %178 ]
  %200 = ashr i32 %198, 5
  %201 = add nsw i32 %200, 1
  %202 = sext i32 %201 to i64
  %203 = getelementptr inbounds i32, ptr %129, i64 %202
  %204 = load i32, ptr %203, align 4, !tbaa !16
  %205 = and i32 %198, 31
  %206 = shl nuw i32 1, %205
  %207 = and i32 %204, %206
  %208 = icmp eq i32 %207, 0
  br i1 %208, label %219, label %209

209:                                              ; preds = %197
  %210 = add nsw i32 %198, %25
  %211 = and i32 %210, 31
  %212 = shl nuw i32 1, %211
  %213 = ashr i32 %210, 5
  %214 = add nsw i32 %213, 1
  %215 = sext i32 %214 to i64
  %216 = getelementptr inbounds i32, ptr %159, i64 %215
  %217 = load i32, ptr %216, align 4, !tbaa !16
  %218 = or i32 %217, %212
  store i32 %218, ptr %216, align 4, !tbaa !16
  br label %219

219:                                              ; preds = %209, %197
  %220 = phi i32 [ 1, %209 ], [ %199, %197 ]
  %221 = add i32 %198, 1
  %222 = icmp eq i32 %198, %21
  br i1 %222, label %223, label %197

223:                                              ; preds = %219
  %.lcssa1 = phi i32 [ %220, %219 ]
  %224 = icmp eq i32 %.lcssa1, 0
  br i1 %224, label %225, label %228

225:                                              ; preds = %223, %178, %177
  %226 = load i32, ptr %126, align 4, !tbaa !31
  %227 = add nsw i32 %226, -1
  store i32 %227, ptr %126, align 4, !tbaa !31
  br label %228

228:                                              ; preds = %225, %223
  %229 = load i32, ptr %9, align 8, !tbaa !34
  %230 = sext i32 %229 to i64
  %231 = getelementptr inbounds i32, ptr %129, i64 %230
  %232 = icmp ult ptr %231, %116
  br i1 %232, label %128, label %233

233:                                              ; preds = %228, %93
  %234 = getelementptr inbounds %struct.set_family, ptr %13, i64 0, i32 5
  %235 = load ptr, ptr %234, align 8, !tbaa !33
  %236 = load i32, ptr %96, align 4, !tbaa !31
  %237 = load i32, ptr %13, align 8, !tbaa !34
  %238 = mul nsw i32 %237, %236
  %239 = sext i32 %238 to i64
  %240 = getelementptr inbounds i32, ptr %235, i64 %239
  %241 = icmp sgt i32 %238, 0
  br i1 %241, label %242, label %357

242:                                              ; preds = %233
  %243 = load ptr, ptr %0, align 8, !tbaa !61
  %244 = getelementptr inbounds %struct.set_family, ptr %243, i64 0, i32 5
  %245 = load ptr, ptr %244, align 8, !tbaa !33
  %246 = getelementptr inbounds %struct.set_family, ptr %243, i64 0, i32 3
  %247 = load ptr, ptr %12, align 8, !tbaa !63
  %248 = getelementptr inbounds %struct.set_family, ptr %247, i64 0, i32 5
  %249 = load ptr, ptr %248, align 8, !tbaa !33
  %250 = getelementptr inbounds %struct.set_family, ptr %247, i64 0, i32 3
  %251 = icmp sgt i32 %18, %21
  br label %252

252:                                              ; preds = %352, %242
  %253 = phi ptr [ %235, %242 ], [ %355, %352 ]
  %254 = load i32, ptr %243, align 8, !tbaa !34
  %255 = load i32, ptr %246, align 4, !tbaa !31
  %256 = add nsw i32 %255, 1
  store i32 %256, ptr %246, align 4, !tbaa !31
  %257 = mul nsw i32 %255, %254
  %258 = sext i32 %257 to i64
  %259 = getelementptr inbounds i32, ptr %245, i64 %258
  %260 = load i32, ptr %247, align 8, !tbaa !34
  %261 = load i32, ptr %250, align 4, !tbaa !31
  %262 = add nsw i32 %261, 1
  store i32 %262, ptr %250, align 4, !tbaa !31
  %263 = mul nsw i32 %261, %260
  %264 = sext i32 %263 to i64
  %265 = load i32, ptr %73, align 4, !tbaa !16
  %266 = and i32 %265, 1023
  %267 = load i32, ptr %259, align 4, !tbaa !16
  %268 = and i32 %267, -1024
  %269 = or i32 %268, %266
  store i32 %269, ptr %259, align 4, !tbaa !16
  %270 = and i32 %265, 1023
  %271 = zext i32 %270 to i64
  br label %272

272:                                              ; preds = %272, %252
  %273 = phi i64 [ %280, %272 ], [ %271, %252 ]
  %274 = getelementptr inbounds i32, ptr %73, i64 %273
  %275 = load i32, ptr %274, align 4, !tbaa !16
  %276 = getelementptr inbounds i32, ptr %253, i64 %273
  %277 = load i32, ptr %276, align 4, !tbaa !16
  %278 = and i32 %277, %275
  %279 = getelementptr inbounds i32, ptr %259, i64 %273
  store i32 %278, ptr %279, align 4, !tbaa !16
  %280 = add nsw i64 %273, -1
  %281 = icmp ugt i64 %273, 1
  br i1 %281, label %272, label %282

282:                                              ; preds = %272
  %283 = getelementptr inbounds i32, ptr %249, i64 %264
  %284 = load i32, ptr %44, align 4, !tbaa !16
  %285 = and i32 %284, 1023
  %286 = load i32, ptr %283, align 4, !tbaa !16
  %287 = and i32 %286, -1024
  %288 = or i32 %287, %285
  store i32 %288, ptr %283, align 4, !tbaa !16
  %289 = and i32 %284, 1023
  %290 = zext i32 %289 to i64
  br label %291

291:                                              ; preds = %291, %282
  %292 = phi i64 [ %299, %291 ], [ %290, %282 ]
  %293 = getelementptr inbounds i32, ptr %44, i64 %292
  %294 = load i32, ptr %293, align 4, !tbaa !16
  %295 = getelementptr inbounds i32, ptr %253, i64 %292
  %296 = load i32, ptr %295, align 4, !tbaa !16
  %297 = and i32 %296, %294
  %298 = getelementptr inbounds i32, ptr %283, i64 %292
  store i32 %297, ptr %298, align 4, !tbaa !16
  %299 = add nsw i64 %292, -1
  %300 = icmp ugt i64 %292, 1
  br i1 %300, label %291, label %301

301:                                              ; preds = %291
  br i1 %251, label %330, label %302

302:                                              ; preds = %324, %301
  %303 = phi i32 [ %326, %324 ], [ %18, %301 ]
  %304 = phi i32 [ %325, %324 ], [ 0, %301 ]
  %305 = ashr i32 %303, 5
  %306 = add nsw i32 %305, 1
  %307 = sext i32 %306 to i64
  %308 = getelementptr inbounds i32, ptr %253, i64 %307
  %309 = load i32, ptr %308, align 4, !tbaa !16
  %310 = and i32 %303, 31
  %311 = shl nuw i32 1, %310
  %312 = and i32 %309, %311
  %313 = icmp eq i32 %312, 0
  br i1 %313, label %324, label %314

314:                                              ; preds = %302
  %315 = add nsw i32 %303, %25
  %316 = and i32 %315, 31
  %317 = shl nuw i32 1, %316
  %318 = ashr i32 %315, 5
  %319 = add nsw i32 %318, 1
  %320 = sext i32 %319 to i64
  %321 = getelementptr inbounds i32, ptr %259, i64 %320
  %322 = load i32, ptr %321, align 4, !tbaa !16
  %323 = or i32 %322, %317
  store i32 %323, ptr %321, align 4, !tbaa !16
  br label %324

324:                                              ; preds = %314, %302
  %325 = phi i32 [ 1, %314 ], [ %304, %302 ]
  %326 = add i32 %303, 1
  %327 = icmp eq i32 %303, %21
  br i1 %327, label %328, label %302

328:                                              ; preds = %324
  %.lcssa = phi i32 [ %325, %324 ]
  %329 = icmp eq i32 %.lcssa, 0
  br i1 %329, label %330, label %333

330:                                              ; preds = %328, %301
  %331 = load i32, ptr %246, align 4, !tbaa !31
  %332 = add nsw i32 %331, -1
  store i32 %332, ptr %246, align 4, !tbaa !31
  br label %333

333:                                              ; preds = %330, %328
  br i1 %251, label %352, label %334

334:                                              ; preds = %349, %333
  %335 = phi i32 [ %350, %349 ], [ %18, %333 ]
  %336 = ashr i32 %335, 5
  %337 = add nsw i32 %336, 1
  %338 = sext i32 %337 to i64
  %339 = getelementptr inbounds i32, ptr %253, i64 %338
  %340 = load i32, ptr %339, align 4, !tbaa !16
  %341 = and i32 %335, 31
  %342 = shl nuw i32 1, %341
  %343 = and i32 %340, %342
  %344 = icmp eq i32 %343, 0
  br i1 %344, label %349, label %345

345:                                              ; preds = %334
  %346 = getelementptr inbounds i32, ptr %283, i64 %338
  %347 = load i32, ptr %346, align 4, !tbaa !16
  %348 = or i32 %347, %342
  store i32 %348, ptr %346, align 4, !tbaa !16
  br label %349

349:                                              ; preds = %345, %334
  %350 = add i32 %335, 1
  %351 = icmp eq i32 %335, %21
  br i1 %351, label %352, label %334

352:                                              ; preds = %349, %333
  %353 = load i32, ptr %13, align 8, !tbaa !34
  %354 = sext i32 %353 to i64
  %355 = getelementptr inbounds i32, ptr %253, i64 %354
  %356 = icmp ult ptr %355, %240
  br i1 %356, label %252, label %357

357:                                              ; preds = %352, %233
  %358 = getelementptr inbounds %struct.set_family, ptr %11, i64 0, i32 5
  %359 = load ptr, ptr %358, align 8, !tbaa !33
  %360 = load i32, ptr %106, align 4, !tbaa !31
  %361 = load i32, ptr %11, align 8, !tbaa !34
  %362 = mul nsw i32 %361, %360
  %363 = sext i32 %362 to i64
  %364 = getelementptr inbounds i32, ptr %359, i64 %363
  %365 = icmp sgt i32 %362, 0
  br i1 %365, label %366, label %429

366:                                              ; preds = %357
  %367 = getelementptr inbounds %struct.set_family, ptr %109, i64 0, i32 5
  %368 = load ptr, ptr %367, align 8, !tbaa !33
  %369 = getelementptr inbounds %struct.set_family, ptr %109, i64 0, i32 3
  %370 = icmp sgt i32 %18, %21
  br label %371

371:                                              ; preds = %424, %366
  %372 = phi ptr [ %359, %366 ], [ %427, %424 ]
  %373 = load i32, ptr %109, align 8, !tbaa !34
  %374 = load i32, ptr %369, align 4, !tbaa !31
  %375 = add nsw i32 %374, 1
  store i32 %375, ptr %369, align 4, !tbaa !31
  %376 = mul nsw i32 %374, %373
  %377 = sext i32 %376 to i64
  %378 = getelementptr inbounds i32, ptr %368, i64 %377
  %379 = load i32, ptr %44, align 4, !tbaa !16
  %380 = and i32 %379, 1023
  %381 = load i32, ptr %378, align 4, !tbaa !16
  %382 = and i32 %381, -1024
  %383 = or i32 %382, %380
  store i32 %383, ptr %378, align 4, !tbaa !16
  %384 = and i32 %379, 1023
  %385 = zext i32 %384 to i64
  br label %386

386:                                              ; preds = %386, %371
  %387 = phi i64 [ %394, %386 ], [ %385, %371 ]
  %388 = getelementptr inbounds i32, ptr %44, i64 %387
  %389 = load i32, ptr %388, align 4, !tbaa !16
  %390 = getelementptr inbounds i32, ptr %372, i64 %387
  %391 = load i32, ptr %390, align 4, !tbaa !16
  %392 = and i32 %391, %389
  %393 = getelementptr inbounds i32, ptr %378, i64 %387
  store i32 %392, ptr %393, align 4, !tbaa !16
  %394 = add nsw i64 %387, -1
  %395 = icmp ugt i64 %387, 1
  br i1 %395, label %386, label %396

396:                                              ; preds = %386
  br i1 %370, label %424, label %397

397:                                              ; preds = %421, %396
  %398 = phi i32 [ %422, %421 ], [ %18, %396 ]
  %399 = ashr i32 %398, 5
  %400 = add nsw i32 %399, 1
  %401 = sext i32 %400 to i64
  %402 = getelementptr inbounds i32, ptr %372, i64 %401
  %403 = load i32, ptr %402, align 4, !tbaa !16
  %404 = and i32 %398, 31
  %405 = shl nuw i32 1, %404
  %406 = and i32 %403, %405
  %407 = icmp eq i32 %406, 0
  br i1 %407, label %421, label %408

408:                                              ; preds = %397
  %409 = getelementptr inbounds i32, ptr %378, i64 %401
  %410 = load i32, ptr %409, align 4, !tbaa !16
  %411 = or i32 %410, %405
  store i32 %411, ptr %409, align 4, !tbaa !16
  %412 = add nsw i32 %398, %25
  %413 = and i32 %412, 31
  %414 = shl nuw i32 1, %413
  %415 = ashr i32 %412, 5
  %416 = add nsw i32 %415, 1
  %417 = sext i32 %416 to i64
  %418 = getelementptr inbounds i32, ptr %378, i64 %417
  %419 = load i32, ptr %418, align 4, !tbaa !16
  %420 = or i32 %419, %414
  store i32 %420, ptr %418, align 4, !tbaa !16
  br label %421

421:                                              ; preds = %408, %397
  %422 = add i32 %398, 1
  %423 = icmp eq i32 %398, %21
  br i1 %423, label %424, label %397

424:                                              ; preds = %421, %396
  %425 = load i32, ptr %11, align 8, !tbaa !34
  %426 = sext i32 %425 to i64
  %427 = getelementptr inbounds i32, ptr %372, i64 %426
  %428 = icmp ult ptr %427, %364
  br i1 %428, label %371, label %429

429:                                              ; preds = %424, %357
  tail call void (ptr, ...) @sf_free(ptr noundef nonnull %9) #43
  tail call void (ptr, ...) @sf_free(ptr noundef nonnull %11) #43
  tail call void (ptr, ...) @sf_free(ptr noundef nonnull %13) #43
  tail call void @free(ptr noundef %44) #43
  %430 = icmp eq ptr %73, null
  br i1 %430, label %432, label %431

431:                                              ; preds = %429
  tail call void @free(ptr noundef nonnull %73) #43
  br label %432

432:                                              ; preds = %431, %429
  ret i32 undef
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @opo(ptr nocapture noundef %0, ptr noundef %1, ptr noundef %2, ptr nocapture readnone %3, i32 noundef %4) #0 {
  %6 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 3
  %7 = load i32, ptr %6, align 4, !tbaa !31
  %8 = icmp slt i32 %7, 33
  %9 = add nsw i32 %7, -1
  %10 = lshr i32 %9, 3
  %11 = and i32 %10, 536870908
  %12 = add nuw nsw i32 %11, 8
  %13 = select i1 %8, i32 8, i32 %12
  %14 = zext i32 %13 to i64
  %15 = tail call noalias ptr @malloc(i64 noundef %14) #42
  %16 = tail call ptr (ptr, i32, ...) @set_fill(ptr noundef %15, i32 noundef %7) #43
  %17 = icmp sgt i32 %4, 0
  br i1 %17, label %18, label %70

18:                                               ; preds = %5
  %19 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %20 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 5
  %21 = load ptr, ptr %20, align 8, !tbaa !33
  %22 = load i32, ptr %6, align 4, !tbaa !31
  br label %23

23:                                               ; preds = %65, %18
  %24 = phi i32 [ %22, %18 ], [ %66, %65 ]
  %25 = phi i32 [ %22, %18 ], [ %67, %65 ]
  %26 = phi i32 [ 0, %18 ], [ %68, %65 ]
  %27 = icmp sgt i32 %25, 0
  br i1 %27, label %28, label %65

28:                                               ; preds = %23
  %29 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds i32, ptr %19, i64 %30
  %32 = load i32, ptr %31, align 4, !tbaa !16
  %33 = add nsw i32 %32, %26
  %34 = ashr i32 %33, 5
  %35 = add nsw i32 %34, 1
  %36 = sext i32 %35 to i64
  %37 = and i32 %33, 31
  %38 = shl nuw i32 1, %37
  br label %39

39:                                               ; preds = %58, %28
  %40 = phi i32 [ %24, %28 ], [ %59, %58 ]
  %41 = phi i32 [ 0, %28 ], [ %63, %58 ]
  %42 = phi ptr [ %21, %28 ], [ %62, %58 ]
  %43 = getelementptr inbounds i32, ptr %42, i64 %36
  %44 = load i32, ptr %43, align 4, !tbaa !16
  %45 = and i32 %44, %38
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %58, label %47

47:                                               ; preds = %39
  %48 = and i32 %41, 31
  %49 = shl nuw i32 1, %48
  %50 = xor i32 %49, -1
  %51 = lshr i32 %41, 5
  %52 = add nuw nsw i32 %51, 1
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds i32, ptr %16, i64 %53
  %55 = load i32, ptr %54, align 4, !tbaa !16
  %56 = and i32 %55, %50
  store i32 %56, ptr %54, align 4, !tbaa !16
  %57 = load i32, ptr %6, align 4, !tbaa !31
  br label %58

58:                                               ; preds = %47, %39
  %59 = phi i32 [ %40, %39 ], [ %57, %47 ]
  %60 = load i32, ptr %1, align 8, !tbaa !34
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i32, ptr %42, i64 %61
  %63 = add nuw nsw i32 %41, 1
  %64 = icmp slt i32 %63, %59
  br i1 %64, label %39, label %65

65:                                               ; preds = %58, %23
  %66 = phi i32 [ %24, %23 ], [ %59, %58 ]
  %67 = phi i32 [ %25, %23 ], [ %59, %58 ]
  %68 = add nuw nsw i32 %26, 1
  %69 = icmp eq i32 %68, %4
  br i1 %69, label %70, label %23

70:                                               ; preds = %65, %5
  %71 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %72 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds i32, ptr %71, i64 %73
  %75 = load i32, ptr %74, align 4, !tbaa !16
  %76 = sub nsw i32 %75, %4
  %77 = sdiv i32 %76, 2
  %78 = add nsw i32 %77, %4
  %79 = add nsw i32 %78, -1
  %80 = tail call ptr @opo_recur(ptr noundef nonnull %1, ptr noundef %2, ptr noundef %16, i32 noundef %77, i32 noundef %4, i32 noundef %79) #44
  %81 = getelementptr inbounds %struct.set_family, ptr %80, i64 0, i32 5
  %82 = load ptr, ptr %81, align 8, !tbaa !33
  %83 = load i32, ptr %6, align 4, !tbaa !31
  %84 = load i32, ptr @cube, align 8, !tbaa !14
  %85 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef %83, i32 noundef %84) #43
  %86 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 5
  %87 = load i32, ptr %6, align 4, !tbaa !31
  %88 = icmp sgt i32 %87, 0
  br i1 %88, label %89, label %116

89:                                               ; preds = %70
  %90 = load ptr, ptr %86, align 8, !tbaa !33
  br label %91

91:                                               ; preds = %108, %89
  %92 = phi i32 [ %109, %108 ], [ %87, %89 ]
  %93 = phi ptr [ %110, %108 ], [ %85, %89 ]
  %94 = phi i32 [ %114, %108 ], [ 0, %89 ]
  %95 = phi ptr [ %113, %108 ], [ %90, %89 ]
  %96 = lshr i32 %94, 5
  %97 = add nuw nsw i32 %96, 1
  %98 = zext i32 %97 to i64
  %99 = getelementptr inbounds i32, ptr %82, i64 %98
  %100 = load i32, ptr %99, align 4, !tbaa !16
  %101 = and i32 %94, 31
  %102 = shl nuw i32 1, %101
  %103 = and i32 %100, %102
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %105, label %108

105:                                              ; preds = %91
  %106 = tail call ptr (ptr, ptr, ...) @sf_addset(ptr noundef %93, ptr noundef %95) #43
  %107 = load i32, ptr %6, align 4, !tbaa !31
  br label %108

108:                                              ; preds = %105, %91
  %109 = phi i32 [ %92, %91 ], [ %107, %105 ]
  %110 = phi ptr [ %93, %91 ], [ %106, %105 ]
  %111 = load i32, ptr %1, align 8, !tbaa !34
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds i32, ptr %95, i64 %112
  %114 = add nuw nsw i32 %94, 1
  %115 = icmp slt i32 %114, %109
  br i1 %115, label %91, label %116

116:                                              ; preds = %108, %70
  %117 = phi ptr [ %85, %70 ], [ %110, %108 ]
  %118 = icmp eq ptr %16, null
  br i1 %118, label %120, label %119

119:                                              ; preds = %116
  tail call void @free(ptr noundef nonnull %16) #43
  br label %120

120:                                              ; preds = %119, %116
  tail call void (ptr, ...) @sf_free(ptr noundef %80) #43
  %121 = tail call ptr (ptr, ...) @cube1list(ptr noundef %117) #43
  %122 = tail call ptr (ptr, ...) @complement(ptr noundef %121) #43
  %123 = load i32, ptr @cube, align 8, !tbaa !14
  %124 = icmp slt i32 %123, 33
  %125 = add nsw i32 %123, -1
  %126 = lshr i32 %125, 3
  %127 = and i32 %126, 536870908
  %128 = add nuw nsw i32 %127, 8
  %129 = select i1 %124, i32 8, i32 %128
  %130 = zext i32 %129 to i64
  %131 = tail call noalias ptr @malloc(i64 noundef %130) #42
  %132 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %131, i32 noundef %123) #43
  %133 = load i32, ptr @cube, align 8, !tbaa !14
  %134 = icmp slt i32 %133, 33
  %135 = add nsw i32 %133, -1
  %136 = lshr i32 %135, 3
  %137 = and i32 %136, 536870908
  %138 = add nuw nsw i32 %137, 8
  %139 = select i1 %134, i32 8, i32 %138
  %140 = zext i32 %139 to i64
  %141 = tail call noalias ptr @malloc(i64 noundef %140) #42
  %142 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %141, i32 noundef %133) #43
  %143 = load ptr, ptr %86, align 8, !tbaa !33
  %144 = load i32, ptr %6, align 4, !tbaa !31
  %145 = load i32, ptr %1, align 8, !tbaa !34
  %146 = mul nsw i32 %145, %144
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds i32, ptr %143, i64 %147
  %149 = icmp sgt i32 %146, 0
  br i1 %149, label %150, label %184

150:                                              ; preds = %120
  %151 = getelementptr inbounds %struct.set_family, ptr %122, i64 0, i32 5
  %152 = getelementptr inbounds %struct.set_family, ptr %122, i64 0, i32 3
  %153 = load i32, ptr %122, align 8, !tbaa !34
  br label %154

154:                                              ; preds = %178, %150
  %155 = phi i32 [ %145, %150 ], [ %179, %178 ]
  %156 = phi i32 [ %153, %150 ], [ %180, %178 ]
  %157 = phi ptr [ %143, %150 ], [ %182, %178 ]
  %158 = load ptr, ptr %151, align 8, !tbaa !33
  %159 = load i32, ptr %152, align 4, !tbaa !31
  %160 = mul nsw i32 %156, %159
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds i32, ptr %158, i64 %161
  %163 = icmp sgt i32 %160, 0
  br i1 %163, label %164, label %178

164:                                              ; preds = %171, %154
  %165 = phi ptr [ %174, %171 ], [ %158, %154 ]
  %166 = tail call i32 (ptr, ptr, ...) @cdist0(ptr noundef %157, ptr noundef %165) #43
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %171, label %168

168:                                              ; preds = %164
  %169 = tail call ptr (ptr, ptr, ptr, ...) @set_and(ptr noundef %142, ptr noundef %157, ptr noundef %165) #43
  %170 = tail call ptr (ptr, ptr, ptr, ...) @set_or(ptr noundef %132, ptr noundef %132, ptr noundef %169) #43
  br label %171

171:                                              ; preds = %168, %164
  %172 = load i32, ptr %122, align 8, !tbaa !34
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds i32, ptr %165, i64 %173
  %175 = icmp ult ptr %174, %162
  br i1 %175, label %164, label %176

176:                                              ; preds = %171
  %.lcssa = phi i32 [ %172, %171 ]
  %177 = load i32, ptr %1, align 8, !tbaa !34
  br label %178

178:                                              ; preds = %176, %154
  %179 = phi i32 [ %177, %176 ], [ %155, %154 ]
  %180 = phi i32 [ %.lcssa, %176 ], [ %156, %154 ]
  %181 = sext i32 %179 to i64
  %182 = getelementptr inbounds i32, ptr %157, i64 %181
  %183 = icmp ult ptr %182, %148
  br i1 %183, label %154, label %184

184:                                              ; preds = %178, %120
  tail call void (ptr, ...) @sf_free(ptr noundef nonnull %1) #43
  tail call void (ptr, ...) @sf_free(ptr noundef %122) #43
  %185 = icmp eq ptr %142, null
  br i1 %185, label %187, label %186

186:                                              ; preds = %184
  tail call void @free(ptr noundef nonnull %142) #43
  br label %187

187:                                              ; preds = %186, %184
  %188 = icmp sgt i32 %76, 1
  br i1 %188, label %189, label %230

189:                                              ; preds = %187
  %190 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  br label %191

191:                                              ; preds = %226, %189
  %192 = phi ptr [ %227, %226 ], [ %190, %189 ]
  %193 = phi i32 [ %228, %226 ], [ %4, %189 ]
  %194 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds i32, ptr %192, i64 %195
  %197 = load i32, ptr %196, align 4, !tbaa !16
  %198 = add nsw i32 %197, %193
  %199 = ashr i32 %198, 5
  %200 = add nsw i32 %199, 1
  %201 = sext i32 %200 to i64
  %202 = getelementptr inbounds i32, ptr %132, i64 %201
  %203 = load i32, ptr %202, align 4, !tbaa !16
  %204 = and i32 %198, 31
  %205 = shl nuw i32 1, %204
  %206 = and i32 %205, %203
  %207 = icmp eq i32 %206, 0
  br i1 %207, label %226, label %208

208:                                              ; preds = %191
  %209 = add nsw i32 %198, %77
  %210 = ashr i32 %209, 5
  %211 = add nsw i32 %210, 1
  %212 = sext i32 %211 to i64
  %213 = getelementptr inbounds i32, ptr %132, i64 %212
  %214 = load i32, ptr %213, align 4, !tbaa !16
  %215 = and i32 %209, 31
  %216 = shl nuw i32 1, %215
  %217 = and i32 %214, %216
  %218 = icmp eq i32 %217, 0
  br i1 %218, label %221, label %219

219:                                              ; preds = %208
  tail call void (ptr, ...) @fatal(ptr noundef nonnull @.str.5.389) #43
  %220 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  br label %226

221:                                              ; preds = %208
  %222 = xor i32 %205, -1
  %223 = getelementptr inbounds i32, ptr %0, i64 %201
  %224 = load i32, ptr %223, align 4, !tbaa !16
  %225 = and i32 %224, %222
  store i32 %225, ptr %223, align 4, !tbaa !16
  br label %226

226:                                              ; preds = %221, %219, %191
  %227 = phi ptr [ %192, %191 ], [ %192, %221 ], [ %220, %219 ]
  %228 = add nsw i32 %193, 1
  %229 = icmp slt i32 %228, %78
  br i1 %229, label %191, label %232

230:                                              ; preds = %187
  %231 = icmp eq ptr %132, null
  br i1 %231, label %233, label %232

232:                                              ; preds = %230, %226
  tail call void @free(ptr noundef nonnull %132) #43
  br label %233

233:                                              ; preds = %232, %230
  ret ptr %117
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @opo_recur(ptr noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5) #0 {
  %7 = load i32, ptr @opo_recur.level, align 4, !tbaa !16
  %8 = add nsw i32 %7, 1
  store i32 %8, ptr @opo_recur.level, align 4, !tbaa !16
  %9 = icmp eq i32 %4, %5
  br i1 %9, label %10, label %13

10:                                               ; preds = %6
  %11 = add nsw i32 %4, %3
  %12 = tail call ptr @opo_leaf(ptr noundef %0, ptr noundef %2, i32 noundef %4, i32 noundef %11) #44
  br label %40

13:                                               ; preds = %6
  %14 = add nsw i32 %5, %4
  %15 = sdiv i32 %14, 2
  %16 = tail call ptr @opo_recur(ptr noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %15) #44
  %17 = add nsw i32 %15, 1
  %18 = tail call ptr @opo_recur(ptr noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %3, i32 noundef %17, i32 noundef %5) #44
  %19 = load i32, ptr @opo_recur.level, align 4, !tbaa !16
  %20 = icmp eq i32 %19, 1
  %21 = zext i1 %20 to i32
  %22 = tail call ptr (ptr, ptr, i32, ...) @unate_intersect(ptr noundef %16, ptr noundef %18, i32 noundef %21) #43
  %23 = load i32, ptr @trace, align 4, !tbaa !16
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %39, label %25

25:                                               ; preds = %13
  %26 = load i32, ptr @opo_recur.level, align 4, !tbaa !16
  %27 = add nsw i32 %26, -1
  %28 = getelementptr inbounds %struct.set_family, ptr %22, i64 0, i32 3
  %29 = load i32, ptr %28, align 4, !tbaa !31
  %30 = getelementptr inbounds %struct.set_family, ptr %16, i64 0, i32 3
  %31 = load i32, ptr %30, align 4, !tbaa !31
  %32 = getelementptr inbounds %struct.set_family, ptr %18, i64 0, i32 3
  %33 = load i32, ptr %32, align 4, !tbaa !31
  %34 = tail call i64 (...) @util_cpu_time() #43
  %35 = tail call ptr @util_print_time(i64 noundef %34) #43
  %36 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.6.390, i32 noundef %27, i32 noundef %29, i32 noundef %31, i32 noundef %33, ptr noundef %35) #44
  %37 = load ptr, ptr @stdout, align 8, !tbaa !13
  %38 = tail call i32 @fflush(ptr noundef %37) #44
  br label %39

39:                                               ; preds = %25, %13
  tail call void (ptr, ...) @sf_free(ptr noundef %16) #43
  tail call void (ptr, ...) @sf_free(ptr noundef %18) #43
  br label %40

40:                                               ; preds = %39, %10
  %41 = phi ptr [ %12, %10 ], [ %22, %39 ]
  %42 = load i32, ptr @opo_recur.level, align 4, !tbaa !16
  %43 = add nsw i32 %42, -1
  store i32 %43, ptr @opo_recur.level, align 4, !tbaa !16
  ret ptr %41
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @opo_leaf(ptr nocapture noundef readonly %0, ptr noundef %1, i32 noundef %2, i32 noundef %3) #0 {
  %5 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %6 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds i32, ptr %5, i64 %7
  %9 = load i32, ptr %8, align 4, !tbaa !16
  %10 = add nsw i32 %9, %3
  %11 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %12 = load i32, ptr %11, align 4, !tbaa !31
  %13 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 2, i32 noundef %12) #43
  %14 = getelementptr inbounds %struct.set_family, ptr %13, i64 0, i32 5
  %15 = load ptr, ptr %14, align 8, !tbaa !33
  %16 = load i32, ptr %13, align 8, !tbaa !34
  %17 = getelementptr inbounds %struct.set_family, ptr %13, i64 0, i32 3
  %18 = load i32, ptr %17, align 4, !tbaa !31
  %19 = add nsw i32 %18, 1
  store i32 %19, ptr %17, align 4, !tbaa !31
  %20 = mul nsw i32 %18, %16
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i32, ptr %15, i64 %21
  %23 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %22, ptr noundef %1) #43
  %24 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %25 = load i32, ptr %11, align 4, !tbaa !31
  %26 = icmp sgt i32 %25, 0
  br i1 %26, label %27, label %61

27:                                               ; preds = %4
  %28 = load ptr, ptr %24, align 8, !tbaa !33
  %29 = add nsw i32 %9, %2
  %30 = ashr i32 %29, 5
  %31 = add nsw i32 %30, 1
  %32 = sext i32 %31 to i64
  %33 = and i32 %29, 31
  %34 = shl nuw i32 1, %33
  br label %35

35:                                               ; preds = %54, %27
  %36 = phi i32 [ %25, %27 ], [ %55, %54 ]
  %37 = phi i32 [ 0, %27 ], [ %59, %54 ]
  %38 = phi ptr [ %28, %27 ], [ %58, %54 ]
  %39 = getelementptr inbounds i32, ptr %38, i64 %32
  %40 = load i32, ptr %39, align 4, !tbaa !16
  %41 = and i32 %40, %34
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %54, label %43

43:                                               ; preds = %35
  %44 = and i32 %37, 31
  %45 = shl nuw i32 1, %44
  %46 = xor i32 %45, -1
  %47 = lshr i32 %37, 5
  %48 = add nuw nsw i32 %47, 1
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds i32, ptr %22, i64 %49
  %51 = load i32, ptr %50, align 4, !tbaa !16
  %52 = and i32 %51, %46
  store i32 %52, ptr %50, align 4, !tbaa !16
  %53 = load i32, ptr %11, align 4, !tbaa !31
  br label %54

54:                                               ; preds = %43, %35
  %55 = phi i32 [ %36, %35 ], [ %53, %43 ]
  %56 = load i32, ptr %0, align 8, !tbaa !34
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, ptr %38, i64 %57
  %59 = add nuw nsw i32 %37, 1
  %60 = icmp slt i32 %59, %55
  br i1 %60, label %35, label %61

61:                                               ; preds = %54, %4
  %62 = load ptr, ptr %14, align 8, !tbaa !33
  %63 = load i32, ptr %13, align 8, !tbaa !34
  %64 = load i32, ptr %17, align 4, !tbaa !31
  %65 = add nsw i32 %64, 1
  store i32 %65, ptr %17, align 4, !tbaa !31
  %66 = mul nsw i32 %64, %63
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds i32, ptr %62, i64 %67
  %69 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %68, ptr noundef %1) #43
  %70 = load i32, ptr %11, align 4, !tbaa !31
  %71 = icmp sgt i32 %70, 0
  br i1 %71, label %72, label %105

72:                                               ; preds = %61
  %73 = load ptr, ptr %24, align 8, !tbaa !33
  %74 = ashr i32 %10, 5
  %75 = add nsw i32 %74, 1
  %76 = sext i32 %75 to i64
  %77 = and i32 %10, 31
  %78 = shl nuw i32 1, %77
  br label %79

79:                                               ; preds = %98, %72
  %80 = phi i32 [ %70, %72 ], [ %99, %98 ]
  %81 = phi i32 [ 0, %72 ], [ %103, %98 ]
  %82 = phi ptr [ %73, %72 ], [ %102, %98 ]
  %83 = getelementptr inbounds i32, ptr %82, i64 %76
  %84 = load i32, ptr %83, align 4, !tbaa !16
  %85 = and i32 %84, %78
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %98, label %87

87:                                               ; preds = %79
  %88 = and i32 %81, 31
  %89 = shl nuw i32 1, %88
  %90 = xor i32 %89, -1
  %91 = lshr i32 %81, 5
  %92 = add nuw nsw i32 %91, 1
  %93 = zext i32 %92 to i64
  %94 = getelementptr inbounds i32, ptr %68, i64 %93
  %95 = load i32, ptr %94, align 4, !tbaa !16
  %96 = and i32 %95, %90
  store i32 %96, ptr %94, align 4, !tbaa !16
  %97 = load i32, ptr %11, align 4, !tbaa !31
  br label %98

98:                                               ; preds = %87, %79
  %99 = phi i32 [ %80, %79 ], [ %97, %87 ]
  %100 = load i32, ptr %0, align 8, !tbaa !34
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds i32, ptr %82, i64 %101
  %103 = add nuw nsw i32 %81, 1
  %104 = icmp slt i32 %103, %99
  br i1 %104, label %79, label %105

105:                                              ; preds = %98, %61
  ret ptr %13
}

; Function Attrs: nounwind optsize uwtable
define internal void @opoall(ptr noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3) #0 {
  store i32 %3, ptr @opo_exact, align 4, !tbaa !16
  %5 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 5
  %6 = load ptr, ptr %5, align 8, !tbaa !72
  %7 = icmp eq ptr %6, null
  br i1 %7, label %9, label %8

8:                                                ; preds = %4
  tail call void @free(ptr noundef nonnull %6) #43
  store ptr null, ptr %5, align 8, !tbaa !72
  br label %9

9:                                                ; preds = %8, %4
  %10 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %11 = load i32, ptr %10, align 4, !tbaa !16
  %12 = shl i32 %11, 5
  %13 = and i32 %12, 32736
  %14 = icmp ult i32 %13, 33
  %15 = add nsw i32 %13, -1
  %16 = lshr i32 %15, 3
  %17 = and i32 %16, 536870908
  %18 = add nuw nsw i32 %17, 8
  %19 = select i1 %14, i32 8, i32 %18
  %20 = zext i32 %19 to i64
  %21 = tail call noalias ptr @malloc(i64 noundef %20) #42
  %22 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %21, ptr noundef nonnull %10) #43
  %23 = load ptr, ptr %0, align 8, !tbaa !61
  %24 = tail call ptr (ptr, ...) @sf_save(ptr noundef %23) #43
  %25 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 1
  %26 = load ptr, ptr %25, align 8, !tbaa !62
  %27 = tail call ptr (ptr, ...) @sf_save(ptr noundef %26) #43
  %28 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 2
  %29 = load ptr, ptr %28, align 8, !tbaa !63
  %30 = tail call ptr (ptr, ...) @sf_save(ptr noundef %29) #43
  %31 = sub i32 %2, %1
  %32 = add i32 %31, 1
  %33 = icmp eq i32 %32, 31
  %34 = load ptr, ptr %0, align 8, !tbaa !61
  br i1 %33, label %119, label %35

35:                                               ; preds = %9
  %36 = shl nuw nsw i32 1, %32
  %37 = icmp slt i32 %2, %1
  %38 = tail call i32 @llvm.smax.i32(i32 %36, i32 1)
  br label %39

39:                                               ; preds = %116, %35
  %40 = phi ptr [ %34, %35 ], [ %45, %116 ]
  %41 = phi ptr [ %24, %35 ], [ %112, %116 ]
  %42 = phi ptr [ %27, %35 ], [ %111, %116 ]
  %43 = phi i32 [ 0, %35 ], [ %117, %116 ]
  %44 = phi ptr [ %30, %35 ], [ %110, %116 ]
  %45 = tail call ptr (ptr, ...) @sf_save(ptr noundef %40) #43
  %46 = load ptr, ptr %25, align 8, !tbaa !62
  %47 = tail call ptr (ptr, ...) @sf_save(ptr noundef %46) #43
  %48 = load ptr, ptr %28, align 8, !tbaa !63
  %49 = tail call ptr (ptr, ...) @sf_save(ptr noundef %48) #43
  %50 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %51 = load i32, ptr %50, align 4, !tbaa !16
  %52 = shl i32 %51, 5
  %53 = and i32 %52, 32736
  %54 = icmp ult i32 %53, 33
  %55 = add nsw i32 %53, -1
  %56 = lshr i32 %55, 3
  %57 = and i32 %56, 536870908
  %58 = add nuw nsw i32 %57, 8
  %59 = select i1 %54, i32 8, i32 %58
  %60 = zext i32 %59 to i64
  %61 = tail call noalias ptr @malloc(i64 noundef %60) #42
  %62 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %61, ptr noundef nonnull %50) #43
  store ptr %62, ptr %5, align 8, !tbaa !72
  br i1 %37, label %89, label %63

63:                                               ; preds = %39
  %64 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8
  br label %65

65:                                               ; preds = %85, %63
  %66 = phi i32 [ %43, %63 ], [ %86, %85 ]
  %67 = phi i32 [ %2, %63 ], [ %87, %85 ]
  %68 = and i32 %66, 1
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %85

70:                                               ; preds = %65
  %71 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 18), align 4, !tbaa !46
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds i32, ptr %64, i64 %72
  %74 = load i32, ptr %73, align 4, !tbaa !16
  %75 = add nsw i32 %74, %67
  %76 = and i32 %75, 31
  %77 = shl nuw i32 1, %76
  %78 = xor i32 %77, -1
  %79 = ashr i32 %75, 5
  %80 = add nsw i32 %79, 1
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds i32, ptr %62, i64 %81
  %83 = load i32, ptr %82, align 4, !tbaa !16
  %84 = and i32 %83, %78
  store i32 %84, ptr %82, align 4, !tbaa !16
  br label %85

85:                                               ; preds = %70, %65
  %86 = sdiv i32 %66, 2
  %87 = add nsw i32 %67, -1
  %88 = icmp sgt i32 %67, %1
  br i1 %88, label %65, label %89

89:                                               ; preds = %85, %39
  %90 = tail call ptr @set_phase(ptr noundef nonnull %0) #44
  %91 = load ptr, ptr %5, align 8, !tbaa !72
  %92 = tail call ptr (ptr, ...) @pc1(ptr noundef %91) #43
  %93 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.8.397, ptr noundef %92) #44
  store i32 1, ptr @summary, align 4, !tbaa !16
  tail call fastcc void @minimize(ptr noundef nonnull %0) #44
  %94 = load ptr, ptr %0, align 8, !tbaa !61
  %95 = getelementptr inbounds %struct.set_family, ptr %94, i64 0, i32 3
  %96 = load i32, ptr %95, align 4, !tbaa !31
  %97 = getelementptr inbounds %struct.set_family, ptr %41, i64 0, i32 3
  %98 = load i32, ptr %97, align 4, !tbaa !31
  %99 = icmp slt i32 %96, %98
  br i1 %99, label %100, label %106

100:                                              ; preds = %89
  %101 = load ptr, ptr %5, align 8, !tbaa !72
  %102 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %22, ptr noundef %101) #43
  tail call void (ptr, ...) @sf_free(ptr noundef nonnull %41) #43
  tail call void (ptr, ...) @sf_free(ptr noundef %42) #43
  tail call void (ptr, ...) @sf_free(ptr noundef %44) #43
  %103 = load ptr, ptr %0, align 8, !tbaa !61
  %104 = load ptr, ptr %25, align 8, !tbaa !62
  %105 = load ptr, ptr %28, align 8, !tbaa !63
  br label %109

106:                                              ; preds = %89
  tail call void (ptr, ...) @sf_free(ptr noundef nonnull %94) #43
  %107 = load ptr, ptr %25, align 8, !tbaa !62
  tail call void (ptr, ...) @sf_free(ptr noundef %107) #43
  %108 = load ptr, ptr %28, align 8, !tbaa !63
  tail call void (ptr, ...) @sf_free(ptr noundef %108) #43
  br label %109

109:                                              ; preds = %106, %100
  %110 = phi ptr [ %105, %100 ], [ %44, %106 ]
  %111 = phi ptr [ %104, %100 ], [ %42, %106 ]
  %112 = phi ptr [ %103, %100 ], [ %41, %106 ]
  %113 = load ptr, ptr %5, align 8, !tbaa !72
  %114 = icmp eq ptr %113, null
  br i1 %114, label %116, label %115

115:                                              ; preds = %109
  tail call void @free(ptr noundef nonnull %113) #43
  store ptr null, ptr %5, align 8, !tbaa !72
  br label %116

116:                                              ; preds = %115, %109
  store ptr %45, ptr %0, align 8, !tbaa !61
  store ptr %47, ptr %25, align 8, !tbaa !62
  store ptr %49, ptr %28, align 8, !tbaa !63
  %117 = add nuw nsw i32 %43, 1
  %118 = icmp eq i32 %117, %38
  br i1 %118, label %119, label %39

119:                                              ; preds = %116, %9
  %120 = phi ptr [ %34, %9 ], [ %45, %116 ]
  %121 = phi ptr [ %30, %9 ], [ %110, %116 ]
  %122 = phi ptr [ %27, %9 ], [ %111, %116 ]
  %123 = phi ptr [ %24, %9 ], [ %112, %116 ]
  store ptr %22, ptr %5, align 8, !tbaa !72
  tail call void (ptr, ...) @sf_free(ptr noundef %120) #43
  %124 = load ptr, ptr %25, align 8, !tbaa !62
  tail call void (ptr, ...) @sf_free(ptr noundef %124) #43
  %125 = load ptr, ptr %28, align 8, !tbaa !63
  tail call void (ptr, ...) @sf_free(ptr noundef %125) #43
  store ptr %123, ptr %0, align 8, !tbaa !61
  store ptr %122, ptr %25, align 8, !tbaa !62
  store ptr %121, ptr %28, align 8, !tbaa !63
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @set_pair(ptr noundef %0) #0 {
  tail call void @set_pair1(ptr noundef %0, i32 noundef 1) #44
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @set_pair1(ptr noundef %0, i32 noundef %1) #0 {
  %3 = alloca [1000 x i8], align 16
  %4 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 6
  %5 = load ptr, ptr %4, align 8, !tbaa !73
  call void @llvm.lifetime.start.p0(i64 1000, ptr nonnull %3) #45
  %6 = icmp eq i32 %1, 0
  br i1 %6, label %9, label %7

7:                                                ; preds = %2
  %8 = tail call i32 (ptr, ...) @makeup_labels(ptr noundef nonnull %0) #43
  br label %9

9:                                                ; preds = %7, %2
  %10 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %11 = sext i32 %10 to i64
  %12 = shl nsw i64 %11, 2
  %13 = tail call noalias ptr @malloc(i64 noundef %12) #42
  %14 = icmp sgt i32 %10, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %9
  %16 = zext i32 %10 to i64
  %17 = shl nuw nsw i64 %16, 2
  tail call void @llvm.memset.p0.i64(ptr align 4 %13, i8 0, i64 %17, i1 false), !tbaa !16
  br label %18

18:                                               ; preds = %15, %9
  %19 = load i32, ptr %5, align 8, !tbaa !74
  %20 = icmp sgt i32 %19, 0
  br i1 %20, label %21, label %55

21:                                               ; preds = %18
  %22 = getelementptr inbounds %struct.pair_struct, ptr %5, i64 0, i32 1
  %23 = getelementptr inbounds %struct.pair_struct, ptr %5, i64 0, i32 2
  br label %24

24:                                               ; preds = %50, %21
  %25 = phi i32 [ %19, %21 ], [ %51, %50 ]
  %26 = phi i64 [ 0, %21 ], [ %52, %50 ]
  %27 = load ptr, ptr %22, align 8, !tbaa !76
  %28 = getelementptr inbounds i32, ptr %27, i64 %26
  %29 = load i32, ptr %28, align 4, !tbaa !16
  %30 = icmp sgt i32 %29, 0
  br i1 %30, label %31, label %48

31:                                               ; preds = %24
  %32 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %33 = icmp sgt i32 %29, %32
  br i1 %33, label %48, label %34

34:                                               ; preds = %31
  %35 = load ptr, ptr %23, align 8, !tbaa !77
  %36 = getelementptr inbounds i32, ptr %35, i64 %26
  %37 = load i32, ptr %36, align 4, !tbaa !16
  %38 = icmp slt i32 %37, 1
  %39 = icmp sgt i32 %37, %32
  %40 = or i1 %38, %39
  br i1 %40, label %48, label %41

41:                                               ; preds = %34
  %42 = add nsw i32 %29, -1
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds i32, ptr %13, i64 %43
  store i32 1, ptr %44, align 4, !tbaa !16
  %45 = add nsw i32 %37, -1
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds i32, ptr %13, i64 %46
  store i32 1, ptr %47, align 4, !tbaa !16
  br label %50

48:                                               ; preds = %34, %31, %24
  tail call void (ptr, ...) @fatal(ptr noundef nonnull @.str.400) #43
  %49 = load i32, ptr %5, align 8, !tbaa !74
  br label %50

50:                                               ; preds = %48, %41
  %51 = phi i32 [ %25, %41 ], [ %49, %48 ]
  %52 = add nuw nsw i64 %26, 1
  %53 = sext i32 %51 to i64
  %54 = icmp slt i64 %52, %53
  br i1 %54, label %24, label %55

55:                                               ; preds = %50, %18
  %56 = load ptr, ptr %0, align 8, !tbaa !61
  %57 = tail call ptr @pairvar(ptr noundef %56, ptr noundef nonnull %5) #44
  %58 = tail call ptr @delvar(ptr noundef %57, ptr noundef %13) #44
  store ptr %58, ptr %0, align 8, !tbaa !61
  %59 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 2
  %60 = load ptr, ptr %59, align 8, !tbaa !63
  %61 = tail call ptr @pairvar(ptr noundef %60, ptr noundef nonnull %5) #44
  %62 = tail call ptr @delvar(ptr noundef %61, ptr noundef %13) #44
  store ptr %62, ptr %59, align 8, !tbaa !63
  %63 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 1
  %64 = load ptr, ptr %63, align 8, !tbaa !62
  %65 = tail call ptr @pairvar(ptr noundef %64, ptr noundef nonnull %5) #44
  %66 = tail call ptr @delvar(ptr noundef %65, ptr noundef %13) #44
  store ptr %66, ptr %63, align 8, !tbaa !62
  %67 = load i32, ptr @cube, align 8, !tbaa !14
  %68 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %69 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %70 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %71 = sext i32 %69 to i64
  %72 = getelementptr inbounds i32, ptr %70, i64 %71
  %73 = load i32, ptr %72, align 4, !tbaa !16
  %74 = icmp sgt i32 %69, 0
  br i1 %74, label %75, label %87

75:                                               ; preds = %55
  %76 = zext i32 %69 to i64
  br label %77

77:                                               ; preds = %77, %75
  %78 = phi i64 [ 0, %75 ], [ %85, %77 ]
  %79 = phi i32 [ 0, %75 ], [ %84, %77 ]
  %80 = getelementptr inbounds i32, ptr %13, i64 %78
  %81 = load i32, ptr %80, align 4, !tbaa !16
  %82 = icmp eq i32 %81, 0
  %83 = zext i1 %82 to i32
  %84 = add nuw nsw i32 %79, %83
  %85 = add nuw nsw i64 %78, 1
  %86 = icmp eq i64 %85, %76
  br i1 %86, label %87, label %77

87:                                               ; preds = %77, %55
  %88 = phi i32 [ 0, %55 ], [ %84, %77 ]
  %89 = load i32, ptr %5, align 8, !tbaa !74
  %90 = sub nsw i32 %68, %69
  %91 = add i32 %88, %90
  %92 = add i32 %91, %89
  %93 = sext i32 %92 to i64
  %94 = shl nsw i64 %93, 2
  %95 = tail call noalias ptr @malloc(i64 noundef %94) #42
  %96 = icmp sgt i32 %89, 0
  br i1 %96, label %97, label %99

97:                                               ; preds = %87
  %98 = zext i32 %88 to i64
  br label %104

99:                                               ; preds = %104, %87
  %100 = icmp sgt i32 %90, 0
  br i1 %100, label %101, label %125

101:                                              ; preds = %99
  %102 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %103 = zext i32 %90 to i64
  br label %112

104:                                              ; preds = %104, %97
  %105 = phi i64 [ 0, %97 ], [ %108, %104 ]
  %106 = add nuw nsw i64 %105, %98
  %107 = getelementptr inbounds i32, ptr %95, i64 %106
  store i32 4, ptr %107, align 4, !tbaa !16
  %108 = add nuw nsw i64 %105, 1
  %109 = load i32, ptr %5, align 8, !tbaa !74
  %110 = sext i32 %109 to i64
  %111 = icmp slt i64 %108, %110
  br i1 %111, label %104, label %99

112:                                              ; preds = %112, %101
  %113 = phi i64 [ 0, %101 ], [ %123, %112 ]
  %114 = add nsw i64 %113, %71
  %115 = getelementptr inbounds i32, ptr %102, i64 %114
  %116 = load i32, ptr %115, align 4, !tbaa !16
  %117 = load i32, ptr %5, align 8, !tbaa !74
  %118 = trunc i64 %113 to i32
  %119 = add i32 %88, %118
  %120 = add i32 %119, %117
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds i32, ptr %95, i64 %121
  store i32 %116, ptr %122, align 4, !tbaa !16
  %123 = add nuw nsw i64 %113, 1
  %124 = icmp eq i64 %123, %103
  br i1 %124, label %125, label %112

125:                                              ; preds = %112, %99
  tail call void (...) @setdown_cube() #43
  %126 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %127 = icmp eq ptr %126, null
  br i1 %127, label %129, label %128

128:                                              ; preds = %125
  tail call void @free(ptr noundef nonnull %126) #43
  br label %129

129:                                              ; preds = %128, %125
  store i32 %92, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  store i32 %88, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  store ptr %95, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  tail call void (...) @cube_setup() #43
  br i1 %6, label %267, label %130

130:                                              ; preds = %129
  %131 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 7
  %132 = load ptr, ptr %131, align 8, !tbaa !58
  %133 = load i32, ptr @cube, align 8, !tbaa !14
  %134 = sext i32 %133 to i64
  %135 = shl nsw i64 %134, 3
  %136 = tail call noalias ptr @malloc(i64 noundef %135) #42
  store ptr %136, ptr %131, align 8, !tbaa !58
  %137 = load i32, ptr %5, align 8, !tbaa !74
  %138 = icmp sgt i32 %137, 0
  br i1 %138, label %139, label %142

139:                                              ; preds = %130
  %140 = getelementptr inbounds %struct.pair_struct, ptr %5, i64 0, i32 1
  %141 = getelementptr inbounds %struct.pair_struct, ptr %5, i64 0, i32 2
  br label %146

142:                                              ; preds = %146, %130
  %143 = phi i32 [ %137, %130 ], [ %201, %146 ]
  br i1 %74, label %144, label %230

144:                                              ; preds = %142
  %145 = zext i32 %69 to i64
  br label %204

146:                                              ; preds = %146, %139
  %147 = phi i64 [ 0, %139 ], [ %200, %146 ]
  %148 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %149 = shl nsw i32 %148, 1
  %150 = trunc i64 %147 to i32
  %151 = shl nsw i32 %150, 2
  %152 = add nsw i32 %149, %151
  %153 = load ptr, ptr %140, align 8, !tbaa !76
  %154 = getelementptr inbounds i32, ptr %153, i64 %147
  %155 = load i32, ptr %154, align 4, !tbaa !16
  %156 = shl i32 %155, 1
  %157 = add i32 %156, -2
  %158 = add i32 %156, -1
  %159 = sext i32 %158 to i64
  %160 = getelementptr inbounds ptr, ptr %132, i64 %159
  %161 = load ptr, ptr %160, align 8, !tbaa !13
  %162 = load ptr, ptr %141, align 8, !tbaa !77
  %163 = getelementptr inbounds i32, ptr %162, i64 %147
  %164 = load i32, ptr %163, align 4, !tbaa !16
  %165 = shl i32 %164, 1
  %166 = add i32 %165, -2
  %167 = add i32 %165, -1
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds ptr, ptr %132, i64 %168
  %170 = load ptr, ptr %169, align 8, !tbaa !13
  %171 = sext i32 %157 to i64
  %172 = getelementptr inbounds ptr, ptr %132, i64 %171
  %173 = load ptr, ptr %172, align 8, !tbaa !13
  %174 = sext i32 %166 to i64
  %175 = getelementptr inbounds ptr, ptr %132, i64 %174
  %176 = load ptr, ptr %175, align 8, !tbaa !13
  %177 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %3, ptr noundef nonnull dereferenceable(1) @.str.1.401, ptr noundef %173, ptr noundef %176) #43
  %178 = call ptr @util_strsav(ptr noundef nonnull %3) #43
  %179 = load ptr, ptr %131, align 8, !tbaa !58
  %180 = sext i32 %152 to i64
  %181 = getelementptr inbounds ptr, ptr %179, i64 %180
  store ptr %178, ptr %181, align 8, !tbaa !13
  %182 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %3, ptr noundef nonnull dereferenceable(1) @.str.1.401, ptr noundef %173, ptr noundef %170) #43
  %183 = call ptr @util_strsav(ptr noundef nonnull %3) #43
  %184 = load ptr, ptr %131, align 8, !tbaa !58
  %185 = or i32 %152, 1
  %186 = sext i32 %185 to i64
  %187 = getelementptr inbounds ptr, ptr %184, i64 %186
  store ptr %183, ptr %187, align 8, !tbaa !13
  %188 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %3, ptr noundef nonnull dereferenceable(1) @.str.1.401, ptr noundef %161, ptr noundef %176) #43
  %189 = call ptr @util_strsav(ptr noundef nonnull %3) #43
  %190 = load ptr, ptr %131, align 8, !tbaa !58
  %191 = add nsw i32 %152, 2
  %192 = sext i32 %191 to i64
  %193 = getelementptr inbounds ptr, ptr %190, i64 %192
  store ptr %189, ptr %193, align 8, !tbaa !13
  %194 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %3, ptr noundef nonnull dereferenceable(1) @.str.1.401, ptr noundef %161, ptr noundef %170) #43
  %195 = call ptr @util_strsav(ptr noundef nonnull %3) #43
  %196 = load ptr, ptr %131, align 8, !tbaa !58
  %197 = add nsw i32 %152, 3
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds ptr, ptr %196, i64 %198
  store ptr %195, ptr %199, align 8, !tbaa !13
  %200 = add nuw nsw i64 %147, 1
  %201 = load i32, ptr %5, align 8, !tbaa !74
  %202 = sext i32 %201 to i64
  %203 = icmp slt i64 %200, %202
  br i1 %203, label %146, label %142

204:                                              ; preds = %226, %144
  %205 = phi i64 [ 0, %144 ], [ %228, %226 ]
  %206 = phi i32 [ 0, %144 ], [ %227, %226 ]
  %207 = getelementptr inbounds i32, ptr %13, i64 %205
  %208 = load i32, ptr %207, align 4, !tbaa !16
  %209 = icmp eq i32 %208, 0
  br i1 %209, label %210, label %226

210:                                              ; preds = %204
  %211 = shl nuw nsw i64 %205, 1
  %212 = getelementptr inbounds ptr, ptr %132, i64 %211
  %213 = load ptr, ptr %212, align 8, !tbaa !13
  %214 = load ptr, ptr %131, align 8, !tbaa !58
  %215 = shl nsw i32 %206, 1
  %216 = sext i32 %215 to i64
  %217 = getelementptr inbounds ptr, ptr %214, i64 %216
  store ptr %213, ptr %217, align 8, !tbaa !13
  %218 = or i64 %211, 1
  %219 = getelementptr inbounds ptr, ptr %132, i64 %218
  %220 = load ptr, ptr %219, align 8, !tbaa !13
  %221 = load ptr, ptr %131, align 8, !tbaa !58
  %222 = or i32 %215, 1
  %223 = sext i32 %222 to i64
  %224 = getelementptr inbounds ptr, ptr %221, i64 %223
  store ptr %220, ptr %224, align 8, !tbaa !13
  store ptr null, ptr %219, align 8, !tbaa !13
  store ptr null, ptr %212, align 8, !tbaa !13
  %225 = add nsw i32 %206, 1
  br label %226

226:                                              ; preds = %210, %204
  %227 = phi i32 [ %225, %210 ], [ %206, %204 ]
  %228 = add nuw nsw i64 %205, 1
  %229 = icmp eq i64 %228, %145
  br i1 %229, label %230, label %204

230:                                              ; preds = %226, %142
  %231 = icmp slt i32 %73, %67
  br i1 %231, label %232, label %240

232:                                              ; preds = %230
  %233 = shl nsw i32 %143, 2
  %234 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %235 = shl nsw i32 %234, 1
  %236 = sub i32 %233, %73
  %237 = add i32 %236, %235
  %238 = sext i32 %73 to i64
  %239 = sext i32 %67 to i64
  br label %244

240:                                              ; preds = %244, %230
  %241 = icmp sgt i32 %67, 0
  br i1 %241, label %242, label %264

242:                                              ; preds = %240
  %243 = zext i32 %67 to i64
  br label %255

244:                                              ; preds = %244, %232
  %245 = phi i64 [ %238, %232 ], [ %253, %244 ]
  %246 = getelementptr inbounds ptr, ptr %132, i64 %245
  %247 = load ptr, ptr %246, align 8, !tbaa !13
  %248 = load ptr, ptr %131, align 8, !tbaa !58
  %249 = trunc i64 %245 to i32
  %250 = add i32 %237, %249
  %251 = sext i32 %250 to i64
  %252 = getelementptr inbounds ptr, ptr %248, i64 %251
  store ptr %247, ptr %252, align 8, !tbaa !13
  store ptr null, ptr %246, align 8, !tbaa !13
  %253 = add nsw i64 %245, 1
  %254 = icmp eq i64 %253, %239
  br i1 %254, label %240, label %244

255:                                              ; preds = %261, %242
  %256 = phi i64 [ 0, %242 ], [ %262, %261 ]
  %257 = getelementptr inbounds ptr, ptr %132, i64 %256
  %258 = load ptr, ptr %257, align 8, !tbaa !13
  %259 = icmp eq ptr %258, null
  br i1 %259, label %261, label %260

260:                                              ; preds = %255
  call void @free(ptr noundef nonnull %258) #43
  store ptr null, ptr %257, align 8, !tbaa !13
  br label %261

261:                                              ; preds = %260, %255
  %262 = add nuw nsw i64 %256, 1
  %263 = icmp eq i64 %262, %243
  br i1 %263, label %266, label %255

264:                                              ; preds = %240
  %265 = icmp eq ptr %132, null
  br i1 %265, label %267, label %266

266:                                              ; preds = %264, %261
  call void @free(ptr noundef nonnull %132) #43
  br label %267

267:                                              ; preds = %266, %264, %129
  %268 = load i32, ptr %5, align 8, !tbaa !74
  %269 = icmp sgt i32 %268, 0
  br i1 %269, label %270, label %281

270:                                              ; preds = %267
  %271 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 16), align 8, !tbaa !47
  br label %272

272:                                              ; preds = %272, %270
  %273 = phi i32 [ 0, %270 ], [ %278, %272 ]
  %274 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %275 = add nsw i32 %274, %273
  %276 = sext i32 %275 to i64
  %277 = getelementptr inbounds i32, ptr %271, i64 %276
  store i32 0, ptr %277, align 4, !tbaa !16
  %278 = add nuw nsw i32 %273, 1
  %279 = load i32, ptr %5, align 8, !tbaa !74
  %280 = icmp slt i32 %278, %279
  br i1 %280, label %272, label %281

281:                                              ; preds = %272, %267
  %282 = icmp eq ptr %13, null
  br i1 %282, label %284, label %283

283:                                              ; preds = %281
  call void @free(ptr noundef nonnull %13) #43
  br label %284

284:                                              ; preds = %283, %281
  call void @llvm.lifetime.end.p0(i64 1000, ptr nonnull %3) #45
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @pairvar(ptr noundef %0, ptr nocapture noundef readonly %1) #0 {
  %3 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %4 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %5 = add nsw i32 %4, -1
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds i32, ptr %3, i64 %6
  %8 = load i32, ptr %7, align 4, !tbaa !16
  %9 = load i32, ptr %1, align 8, !tbaa !74
  %10 = mul nsw i32 %9, -4
  %11 = tail call ptr (ptr, i32, i32, ...) @sf_delcol(ptr noundef %0, i32 noundef %8, i32 noundef %10) #43
  %12 = getelementptr inbounds %struct.set_family, ptr %11, i64 0, i32 5
  %13 = load ptr, ptr %12, align 8, !tbaa !33
  %14 = getelementptr inbounds %struct.set_family, ptr %11, i64 0, i32 3
  %15 = load i32, ptr %14, align 4, !tbaa !31
  %16 = load i32, ptr %11, align 8, !tbaa !34
  %17 = mul nsw i32 %16, %15
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i32, ptr %13, i64 %18
  %20 = icmp sgt i32 %17, 0
  br i1 %20, label %21, label %148

21:                                               ; preds = %2
  %22 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8
  %23 = getelementptr inbounds %struct.pair_struct, ptr %1, i64 0, i32 1
  %24 = getelementptr inbounds %struct.pair_struct, ptr %1, i64 0, i32 2
  %25 = load i32, ptr %1, align 8, !tbaa !74
  br label %26

26:                                               ; preds = %142, %21
  %27 = phi i32 [ %16, %21 ], [ %143, %142 ]
  %28 = phi i32 [ %25, %21 ], [ %144, %142 ]
  %29 = phi ptr [ %13, %21 ], [ %146, %142 ]
  %30 = icmp sgt i32 %28, 0
  br i1 %30, label %31, label %142

31:                                               ; preds = %26
  %32 = load ptr, ptr %23, align 8, !tbaa !76
  %33 = load ptr, ptr %24, align 8, !tbaa !77
  br label %34

34:                                               ; preds = %135, %31
  %35 = phi i64 [ 0, %31 ], [ %136, %135 ]
  %36 = getelementptr inbounds i32, ptr %32, i64 %35
  %37 = load i32, ptr %36, align 4, !tbaa !16
  %38 = add nsw i32 %37, -1
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i32, ptr %22, i64 %39
  %41 = load i32, ptr %40, align 4, !tbaa !16
  %42 = getelementptr inbounds i32, ptr %33, i64 %35
  %43 = load i32, ptr %42, align 4, !tbaa !16
  %44 = add nsw i32 %43, -1
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i32, ptr %22, i64 %45
  %47 = load i32, ptr %46, align 4, !tbaa !16
  %48 = add nsw i32 %47, 1
  %49 = ashr i32 %48, 5
  %50 = add nsw i32 %49, 1
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds i32, ptr %29, i64 %51
  %53 = load i32, ptr %52, align 4, !tbaa !16
  %54 = and i32 %48, 31
  %55 = shl nuw i32 1, %54
  %56 = and i32 %55, %53
  %57 = ashr i32 %47, 5
  %58 = add nsw i32 %57, 1
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i32, ptr %29, i64 %59
  %61 = load i32, ptr %60, align 4, !tbaa !16
  %62 = and i32 %47, 31
  %63 = shl nuw i32 1, %62
  %64 = and i32 %61, %63
  %65 = trunc i64 %35 to i32
  %66 = shl nsw i32 %65, 2
  %67 = add nsw i32 %66, %8
  %68 = ashr i32 %41, 5
  %69 = add nsw i32 %68, 1
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds i32, ptr %29, i64 %70
  %72 = load i32, ptr %71, align 4, !tbaa !16
  %73 = and i32 %41, 31
  %74 = shl nuw i32 1, %73
  %75 = and i32 %72, %74
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %101, label %77

77:                                               ; preds = %34
  %78 = icmp eq i32 %64, 0
  br i1 %78, label %89, label %79

79:                                               ; preds = %77
  %80 = add nsw i32 %67, 3
  %81 = and i32 %80, 31
  %82 = shl nuw i32 1, %81
  %83 = ashr i32 %80, 5
  %84 = add nsw i32 %83, 1
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds i32, ptr %29, i64 %85
  %87 = load i32, ptr %86, align 4, !tbaa !16
  %88 = or i32 %87, %82
  store i32 %88, ptr %86, align 4, !tbaa !16
  br label %89

89:                                               ; preds = %79, %77
  %90 = icmp eq i32 %56, 0
  br i1 %90, label %101, label %91

91:                                               ; preds = %89
  %92 = add nsw i32 %67, 2
  %93 = and i32 %92, 31
  %94 = shl nuw i32 1, %93
  %95 = ashr i32 %92, 5
  %96 = add nsw i32 %95, 1
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds i32, ptr %29, i64 %97
  %99 = load i32, ptr %98, align 4, !tbaa !16
  %100 = or i32 %99, %94
  store i32 %100, ptr %98, align 4, !tbaa !16
  br label %101

101:                                              ; preds = %91, %89, %34
  %102 = add nsw i32 %41, 1
  %103 = ashr i32 %102, 5
  %104 = add nsw i32 %103, 1
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds i32, ptr %29, i64 %105
  %107 = load i32, ptr %106, align 4, !tbaa !16
  %108 = and i32 %102, 31
  %109 = shl nuw i32 1, %108
  %110 = and i32 %107, %109
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %135, label %112

112:                                              ; preds = %101
  %113 = icmp eq i32 %64, 0
  br i1 %113, label %124, label %114

114:                                              ; preds = %112
  %115 = add nsw i32 %67, 1
  %116 = and i32 %115, 31
  %117 = shl nuw i32 1, %116
  %118 = ashr i32 %115, 5
  %119 = add nsw i32 %118, 1
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds i32, ptr %29, i64 %120
  %122 = load i32, ptr %121, align 4, !tbaa !16
  %123 = or i32 %122, %117
  store i32 %123, ptr %121, align 4, !tbaa !16
  br label %124

124:                                              ; preds = %114, %112
  %125 = icmp eq i32 %56, 0
  br i1 %125, label %135, label %126

126:                                              ; preds = %124
  %127 = and i32 %67, 31
  %128 = shl nuw i32 1, %127
  %129 = ashr i32 %67, 5
  %130 = add nsw i32 %129, 1
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds i32, ptr %29, i64 %131
  %133 = load i32, ptr %132, align 4, !tbaa !16
  %134 = or i32 %133, %128
  store i32 %134, ptr %132, align 4, !tbaa !16
  br label %135

135:                                              ; preds = %126, %124, %101
  %136 = add nuw nsw i64 %35, 1
  %137 = load i32, ptr %1, align 8, !tbaa !74
  %138 = sext i32 %137 to i64
  %139 = icmp slt i64 %136, %138
  br i1 %139, label %34, label %140

140:                                              ; preds = %135
  %.lcssa = phi i32 [ %137, %135 ]
  %141 = load i32, ptr %11, align 8, !tbaa !34
  br label %142

142:                                              ; preds = %140, %26
  %143 = phi i32 [ %141, %140 ], [ %27, %26 ]
  %144 = phi i32 [ %.lcssa, %140 ], [ %28, %26 ]
  %145 = sext i32 %143 to i64
  %146 = getelementptr inbounds i32, ptr %29, i64 %145
  %147 = icmp ult ptr %146, %19
  br i1 %147, label %26, label %148

148:                                              ; preds = %142, %2
  ret ptr %11
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @delvar(ptr noundef %0, ptr nocapture noundef readonly %1) #0 {
  %3 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %5, label %50

5:                                                ; preds = %36, %2
  %6 = phi i32 [ %37, %36 ], [ %3, %2 ]
  %7 = phi i64 [ %43, %36 ], [ 0, %2 ]
  %8 = phi i32 [ %42, %36 ], [ 0, %2 ]
  %9 = phi i32 [ %41, %36 ], [ 0, %2 ]
  %10 = phi i32 [ %40, %36 ], [ undef, %2 ]
  %11 = phi i32 [ %39, %36 ], [ 0, %2 ]
  %12 = phi ptr [ %38, %36 ], [ %0, %2 ]
  %13 = getelementptr inbounds i32, ptr %1, i64 %7
  %14 = load i32, ptr %13, align 4, !tbaa !16
  %15 = icmp eq i32 %14, 0
  %16 = icmp eq i32 %11, 0
  br i1 %15, label %30, label %17

17:                                               ; preds = %5
  br i1 %16, label %23, label %18

18:                                               ; preds = %17
  %19 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %20 = getelementptr inbounds i32, ptr %19, i64 %7
  %21 = load i32, ptr %20, align 4, !tbaa !16
  %22 = add nsw i32 %21, %9
  br label %36

23:                                               ; preds = %17
  %24 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %25 = getelementptr inbounds i32, ptr %24, i64 %7
  %26 = load i32, ptr %25, align 4, !tbaa !16
  %27 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %28 = getelementptr inbounds i32, ptr %27, i64 %7
  %29 = load i32, ptr %28, align 4, !tbaa !16
  br label %36

30:                                               ; preds = %5
  br i1 %16, label %36, label %31

31:                                               ; preds = %30
  %32 = sub nsw i32 %10, %8
  %33 = tail call ptr (ptr, i32, i32, ...) @sf_delcol(ptr noundef %12, i32 noundef %32, i32 noundef %9) #43
  %34 = add nsw i32 %8, %9
  %35 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  br label %36

36:                                               ; preds = %31, %30, %23, %18
  %37 = phi i32 [ %6, %18 ], [ %6, %23 ], [ %35, %31 ], [ %6, %30 ]
  %38 = phi ptr [ %12, %18 ], [ %12, %23 ], [ %33, %31 ], [ %12, %30 ]
  %39 = phi i32 [ 1, %18 ], [ 1, %23 ], [ 0, %31 ], [ 0, %30 ]
  %40 = phi i32 [ %10, %18 ], [ %26, %23 ], [ %10, %31 ], [ %10, %30 ]
  %41 = phi i32 [ %22, %18 ], [ %29, %23 ], [ %9, %31 ], [ %9, %30 ]
  %42 = phi i32 [ %8, %18 ], [ %8, %23 ], [ %34, %31 ], [ %8, %30 ]
  %43 = add nuw nsw i64 %7, 1
  %44 = sext i32 %37 to i64
  %45 = icmp slt i64 %43, %44
  br i1 %45, label %5, label %46

46:                                               ; preds = %36
  %.lcssa4 = phi ptr [ %38, %36 ]
  %.lcssa3 = phi i32 [ %40, %36 ]
  %.lcssa2 = phi i32 [ %41, %36 ]
  %.lcssa1 = phi i32 [ %42, %36 ]
  %.lcssa = phi i1 [ %15, %36 ]
  br i1 %.lcssa, label %50, label %47

47:                                               ; preds = %46
  %48 = sub nsw i32 %.lcssa3, %.lcssa1
  %49 = tail call ptr (ptr, i32, i32, ...) @sf_delcol(ptr noundef %.lcssa4, i32 noundef %48, i32 noundef %.lcssa2) #43
  br label %50

50:                                               ; preds = %47, %46, %2
  %51 = phi ptr [ %49, %47 ], [ %.lcssa4, %46 ], [ %0, %2 ]
  ret ptr %51
}

; Function Attrs: nounwind optsize uwtable
define internal void @find_optimal_pairing(ptr noundef %0, i32 noundef %1) #0 {
  %3 = tail call ptr @find_pairing_cost(ptr noundef %0, i32 noundef %1) #44
  %4 = load i32, ptr @summary, align 4, !tbaa !16
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %44, label %6

6:                                                ; preds = %2
  %7 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.404) #44
  %8 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %16

10:                                               ; preds = %10, %6
  %11 = phi i32 [ %12, %10 ], [ 0, %6 ]
  %12 = add nuw nsw i32 %11, 1
  %13 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.405, i32 noundef %12) #44
  %14 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %15 = icmp slt i32 %12, %14
  br i1 %15, label %10, label %16

16:                                               ; preds = %10, %6
  %17 = tail call i32 @putchar(i32 10)
  %18 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %19 = icmp sgt i32 %18, 0
  br i1 %19, label %20, label %49

20:                                               ; preds = %39, %16
  %21 = phi i64 [ %22, %39 ], [ 0, %16 ]
  %22 = add nuw nsw i64 %21, 1
  %23 = trunc i64 %22 to i32
  %24 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.405, i32 noundef %23) #44
  %25 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %26 = icmp sgt i32 %25, 0
  br i1 %26, label %27, label %39

27:                                               ; preds = %20
  %28 = getelementptr inbounds ptr, ptr %3, i64 %21
  br label %29

29:                                               ; preds = %29, %27
  %30 = phi i64 [ 0, %27 ], [ %35, %29 ]
  %31 = load ptr, ptr %28, align 8, !tbaa !13
  %32 = getelementptr inbounds i32, ptr %31, i64 %30
  %33 = load i32, ptr %32, align 4, !tbaa !16
  %34 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.405, i32 noundef %33) #44
  %35 = add nuw nsw i64 %30, 1
  %36 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %37 = sext i32 %36 to i64
  %38 = icmp slt i64 %35, %37
  br i1 %38, label %29, label %39

39:                                               ; preds = %29, %20
  %40 = tail call i32 @putchar(i32 10)
  %41 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %42 = sext i32 %41 to i64
  %43 = icmp slt i64 %22, %42
  br i1 %43, label %20, label %46

44:                                               ; preds = %2
  %45 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  br label %46

46:                                               ; preds = %44, %39
  %47 = phi i32 [ %45, %44 ], [ %41, %39 ]
  %48 = icmp slt i32 %47, 15
  br i1 %48, label %49, label %52

49:                                               ; preds = %46, %16
  %50 = tail call ptr @pair_best_cost(ptr noundef %3) #44
  %51 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 6
  store ptr %50, ptr %51, align 8, !tbaa !73
  br label %55

52:                                               ; preds = %46
  %53 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 6
  %54 = tail call i32 @greedy_best_cost(ptr noundef %3, ptr noundef nonnull %53) #44
  br label %55

55:                                               ; preds = %52, %49
  %56 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.5.406) #44
  %57 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 6
  %58 = load ptr, ptr %57, align 8, !tbaa !73
  %59 = tail call i32 @print_pair(ptr noundef %58) #44
  %60 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %61 = icmp sgt i32 %60, 0
  br i1 %61, label %62, label %75

62:                                               ; preds = %70, %55
  %63 = phi i32 [ %71, %70 ], [ %60, %55 ]
  %64 = phi i64 [ %72, %70 ], [ 0, %55 ]
  %65 = getelementptr inbounds ptr, ptr %3, i64 %64
  %66 = load ptr, ptr %65, align 8, !tbaa !13
  %67 = icmp eq ptr %66, null
  br i1 %67, label %70, label %68

68:                                               ; preds = %62
  tail call void @free(ptr noundef nonnull %66) #43
  store ptr null, ptr %65, align 8, !tbaa !13
  %69 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  br label %70

70:                                               ; preds = %68, %62
  %71 = phi i32 [ %63, %62 ], [ %69, %68 ]
  %72 = add nuw nsw i64 %64, 1
  %73 = sext i32 %71 to i64
  %74 = icmp slt i64 %72, %73
  br i1 %74, label %62, label %77

75:                                               ; preds = %55
  %76 = icmp eq ptr %3, null
  br i1 %76, label %78, label %77

77:                                               ; preds = %75, %70
  tail call void @free(ptr noundef nonnull %3) #43
  br label %78

78:                                               ; preds = %77, %75
  tail call void @set_pair1(ptr noundef %0, i32 noundef 1) #44
  %79 = tail call i64 (...) @util_cpu_time() #43
  %80 = load ptr, ptr %0, align 8, !tbaa !61
  %81 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 1
  %82 = load ptr, ptr %81, align 8, !tbaa !62
  %83 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 2
  %84 = load ptr, ptr %83, align 8, !tbaa !63
  %85 = tail call ptr (ptr, ptr, ptr, ...) @espresso(ptr noundef %80, ptr noundef %82, ptr noundef %84) #43
  store ptr %85, ptr %0, align 8, !tbaa !61
  %86 = load i32, ptr @summary, align 4, !tbaa !16
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %91, label %88

88:                                               ; preds = %78
  %89 = tail call i64 (...) @util_cpu_time() #43
  %90 = sub nsw i64 %89, %79
  tail call void (ptr, ptr, i64, ...) @print_trace(ptr noundef %85, ptr noundef nonnull @.str.6.407, i64 noundef %90) #43
  br label %91

91:                                               ; preds = %88, %78
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @find_pairing_cost(ptr noundef %0, i32 noundef %1) #0 {
  %3 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %4 = sext i32 %3 to i64
  %5 = shl nsw i64 %4, 3
  %6 = tail call noalias ptr @malloc(i64 noundef %5) #42
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %39

8:                                                ; preds = %2
  %9 = shl nsw i64 %4, 2
  %10 = zext i32 %3 to i64
  br label %12

11:                                               ; preds = %12
  br i1 %7, label %18, label %39

12:                                               ; preds = %12, %8
  %13 = phi i64 [ 0, %8 ], [ %16, %12 ]
  %14 = tail call noalias ptr @malloc(i64 noundef %9) #42
  %15 = getelementptr inbounds ptr, ptr %6, i64 %13
  store ptr %14, ptr %15, align 8, !tbaa !13
  %16 = add nuw nsw i64 %13, 1
  %17 = icmp eq i64 %16, %10
  br i1 %17, label %11, label %12

18:                                               ; preds = %34, %11
  %19 = phi i32 [ %36, %34 ], [ %3, %11 ]
  %20 = phi i64 [ %37, %34 ], [ 0, %11 ]
  %21 = icmp sgt i32 %19, 0
  br i1 %21, label %24, label %22

22:                                               ; preds = %18
  %23 = sext i32 %19 to i64
  br label %34

24:                                               ; preds = %18
  %25 = getelementptr inbounds ptr, ptr %6, i64 %20
  %26 = load ptr, ptr %25, align 8, !tbaa !13
  br label %27

27:                                               ; preds = %27, %24
  %28 = phi i64 [ 0, %24 ], [ %30, %27 ]
  %29 = getelementptr inbounds i32, ptr %26, i64 %28
  store i32 0, ptr %29, align 4, !tbaa !16
  %30 = add nuw nsw i64 %28, 1
  %31 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %32 = sext i32 %31 to i64
  %33 = icmp slt i64 %30, %32
  br i1 %33, label %27, label %34

34:                                               ; preds = %27, %22
  %35 = phi i64 [ %23, %22 ], [ %32, %27 ]
  %36 = phi i32 [ %19, %22 ], [ %31, %27 ]
  %37 = add nuw nsw i64 %20, 1
  %38 = icmp slt i64 %37, %35
  br i1 %38, label %18, label %39

39:                                               ; preds = %34, %11, %2
  %40 = tail call ptr @pair_new(i32 noundef 1) #44
  %41 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 6
  store ptr %40, ptr %41, align 8, !tbaa !73
  store i32 1, ptr %40, align 8, !tbaa !74
  %42 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %43 = icmp sgt i32 %42, 1
  br i1 %43, label %44, label %199

44:                                               ; preds = %39
  %45 = icmp sgt i32 %1, 0
  %46 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 1
  %47 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 2
  br label %60

48:                                               ; preds = %191, %60
  %49 = phi i32 [ %61, %60 ], [ %194, %191 ]
  %50 = phi ptr [ %68, %60 ], [ %116, %191 ]
  %51 = phi i32 [ %67, %60 ], [ %192, %191 ]
  %52 = phi ptr [ %66, %60 ], [ %117, %191 ]
  %53 = phi ptr [ %65, %60 ], [ %118, %191 ]
  %54 = phi ptr [ %64, %60 ], [ %119, %191 ]
  %55 = phi <2 x i32> [ %69, %60 ], [ %120, %191 ]
  %56 = add nsw i32 %49, -1
  %57 = sext i32 %56 to i64
  %58 = icmp slt i64 %70, %57
  %59 = add nuw nsw i64 %63, 1
  br i1 %58, label %60, label %197

60:                                               ; preds = %48, %44
  %61 = phi i32 [ %42, %44 ], [ %49, %48 ]
  %62 = phi i64 [ 0, %44 ], [ %70, %48 ]
  %63 = phi i64 [ 1, %44 ], [ %59, %48 ]
  %64 = phi ptr [ undef, %44 ], [ %54, %48 ]
  %65 = phi ptr [ undef, %44 ], [ %53, %48 ]
  %66 = phi ptr [ undef, %44 ], [ %52, %48 ]
  %67 = phi i32 [ undef, %44 ], [ %51, %48 ]
  %68 = phi ptr [ undef, %44 ], [ %50, %48 ]
  %69 = phi <2 x i32> [ undef, %44 ], [ %55, %48 ]
  %70 = add nuw nsw i64 %62, 1
  %71 = sext i32 %61 to i64
  %72 = icmp slt i64 %70, %71
  br i1 %72, label %73, label %48

73:                                               ; preds = %60
  %74 = getelementptr inbounds ptr, ptr %6, i64 %62
  %75 = trunc i64 %70 to i32
  br label %76

76:                                               ; preds = %191, %73
  %77 = phi i64 [ %63, %73 ], [ %193, %191 ]
  %78 = phi ptr [ %64, %73 ], [ %119, %191 ]
  %79 = phi ptr [ %65, %73 ], [ %118, %191 ]
  %80 = phi ptr [ %66, %73 ], [ %117, %191 ]
  %81 = phi i32 [ %67, %73 ], [ %192, %191 ]
  %82 = phi ptr [ %68, %73 ], [ %116, %191 ]
  %83 = phi <2 x i32> [ %69, %73 ], [ %120, %191 ]
  br i1 %45, label %84, label %115

84:                                               ; preds = %76
  %85 = load ptr, ptr %0, align 8, !tbaa !61
  %86 = tail call ptr (ptr, ...) @sf_save(ptr noundef %85) #43
  %87 = load ptr, ptr %46, align 8, !tbaa !62
  %88 = tail call ptr (ptr, ...) @sf_save(ptr noundef %87) #43
  %89 = load ptr, ptr %47, align 8, !tbaa !63
  %90 = tail call ptr (ptr, ...) @sf_save(ptr noundef %89) #43
  %91 = load <2 x i32>, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !16
  %92 = extractelement <2 x i32> %91, i64 0
  %93 = sext i32 %92 to i64
  %94 = shl nsw i64 %93, 2
  %95 = tail call noalias ptr @malloc(i64 noundef %94) #42
  %96 = icmp sgt i32 %92, 0
  br i1 %96, label %97, label %107

97:                                               ; preds = %84
  %98 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %99 = zext i32 %92 to i64
  br label %100

100:                                              ; preds = %100, %97
  %101 = phi i64 [ 0, %97 ], [ %105, %100 ]
  %102 = getelementptr inbounds i32, ptr %98, i64 %101
  %103 = load i32, ptr %102, align 4, !tbaa !16
  %104 = getelementptr inbounds i32, ptr %95, i64 %101
  store i32 %103, ptr %104, align 4, !tbaa !16
  %105 = add nuw nsw i64 %101, 1
  %106 = icmp eq i64 %105, %99
  br i1 %106, label %107, label %100

107:                                              ; preds = %100, %84
  %108 = load ptr, ptr %41, align 8, !tbaa !73
  %109 = getelementptr inbounds %struct.pair_struct, ptr %108, i64 0, i32 1
  %110 = load ptr, ptr %109, align 8, !tbaa !76
  store i32 %75, ptr %110, align 4, !tbaa !16
  %111 = getelementptr inbounds %struct.pair_struct, ptr %108, i64 0, i32 2
  %112 = load ptr, ptr %111, align 8, !tbaa !77
  %113 = trunc i64 %77 to i32
  %114 = add i32 %113, 1
  store i32 %114, ptr %112, align 4, !tbaa !16
  tail call void @set_pair1(ptr noundef nonnull %0, i32 noundef 0) #44
  br label %115

115:                                              ; preds = %107, %76
  %116 = phi ptr [ %95, %107 ], [ %82, %76 ]
  %117 = phi ptr [ %86, %107 ], [ %80, %76 ]
  %118 = phi ptr [ %88, %107 ], [ %79, %76 ]
  %119 = phi ptr [ %90, %107 ], [ %78, %76 ]
  %120 = phi <2 x i32> [ %91, %107 ], [ %83, %76 ]
  switch i32 %1, label %179 [
    i32 3, label %121
    i32 2, label %126
    i32 1, label %131
    i32 0, label %139
  ]

121:                                              ; preds = %115
  %122 = load ptr, ptr %0, align 8, !tbaa !61
  %123 = load ptr, ptr %46, align 8, !tbaa !62
  %124 = load ptr, ptr %47, align 8, !tbaa !63
  %125 = tail call ptr (ptr, ptr, ptr, i32, ...) @minimize_exact(ptr noundef %122, ptr noundef %123, ptr noundef %124, i32 noundef 1) #43
  br label %167

126:                                              ; preds = %115
  %127 = load ptr, ptr %0, align 8, !tbaa !61
  %128 = load ptr, ptr %46, align 8, !tbaa !62
  %129 = load ptr, ptr %47, align 8, !tbaa !63
  %130 = tail call ptr (ptr, ptr, ptr, ...) @espresso(ptr noundef %127, ptr noundef %128, ptr noundef %129) #43
  br label %167

131:                                              ; preds = %115
  %132 = load ptr, ptr %0, align 8, !tbaa !61
  %133 = load ptr, ptr %46, align 8, !tbaa !62
  %134 = tail call ptr (ptr, ptr, ...) @reduce(ptr noundef %132, ptr noundef %133) #43
  store ptr %134, ptr %0, align 8, !tbaa !61
  %135 = load ptr, ptr %47, align 8, !tbaa !63
  %136 = tail call ptr (ptr, ptr, i32, ...) @expand(ptr noundef %134, ptr noundef %135, i32 noundef 0) #43
  store ptr %136, ptr %0, align 8, !tbaa !61
  %137 = load ptr, ptr %46, align 8, !tbaa !62
  %138 = tail call ptr (ptr, ptr, ...) @irredundant(ptr noundef %136, ptr noundef %137) #43
  br label %167

139:                                              ; preds = %115
  %140 = load i32, ptr @cube, align 8, !tbaa !14
  %141 = icmp slt i32 %140, 33
  %142 = add nsw i32 %140, -1
  %143 = lshr i32 %142, 3
  %144 = and i32 %143, 536870908
  %145 = add nuw nsw i32 %144, 8
  %146 = select i1 %141, i32 8, i32 %145
  %147 = zext i32 %146 to i64
  %148 = tail call noalias ptr @malloc(i64 noundef %147) #42
  %149 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %148, i32 noundef %140) #43
  %150 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %151 = getelementptr inbounds ptr, ptr %150, i64 %62
  %152 = load ptr, ptr %151, align 8, !tbaa !13
  %153 = getelementptr inbounds ptr, ptr %150, i64 %77
  %154 = load ptr, ptr %153, align 8, !tbaa !13
  %155 = tail call ptr (ptr, ptr, ptr, ...) @set_or(ptr noundef %149, ptr noundef %152, ptr noundef %154) #43
  %156 = load ptr, ptr %0, align 8, !tbaa !61
  %157 = tail call ptr (ptr, ...) @sf_save(ptr noundef %156) #43
  %158 = tail call ptr (ptr, ptr, ...) @dist_merge(ptr noundef %157, ptr noundef %149) #43
  %159 = load ptr, ptr %0, align 8, !tbaa !61
  %160 = getelementptr inbounds %struct.set_family, ptr %159, i64 0, i32 3
  %161 = load i32, ptr %160, align 4, !tbaa !31
  %162 = getelementptr inbounds %struct.set_family, ptr %158, i64 0, i32 3
  %163 = load i32, ptr %162, align 4, !tbaa !31
  %164 = sub nsw i32 %161, %163
  tail call void (ptr, ...) @sf_free(ptr noundef %158) #43
  %165 = icmp eq ptr %149, null
  br i1 %165, label %176, label %166

166:                                              ; preds = %139
  tail call void @free(ptr noundef nonnull %149) #43
  br label %176

167:                                              ; preds = %131, %126, %121
  %168 = phi ptr [ %138, %131 ], [ %130, %126 ], [ %125, %121 ]
  store ptr %168, ptr %0, align 8, !tbaa !61
  %169 = getelementptr inbounds %struct.set_family, ptr %117, i64 0, i32 3
  %170 = load i32, ptr %169, align 4, !tbaa !31
  %171 = getelementptr inbounds %struct.set_family, ptr %168, i64 0, i32 3
  %172 = load i32, ptr %171, align 4, !tbaa !31
  %173 = sub nsw i32 %170, %172
  %174 = load ptr, ptr %74, align 8, !tbaa !13
  %175 = getelementptr inbounds i32, ptr %174, i64 %77
  store i32 %173, ptr %175, align 4, !tbaa !16
  br label %182

176:                                              ; preds = %166, %139
  %177 = load ptr, ptr %74, align 8, !tbaa !13
  %178 = getelementptr inbounds i32, ptr %177, i64 %77
  store i32 %164, ptr %178, align 4, !tbaa !16
  br label %191

179:                                              ; preds = %115
  %180 = load ptr, ptr %74, align 8, !tbaa !13
  %181 = getelementptr inbounds i32, ptr %180, i64 %77
  store i32 %81, ptr %181, align 4, !tbaa !16
  br i1 %45, label %182, label %191

182:                                              ; preds = %179, %167
  %183 = phi i32 [ %173, %167 ], [ %81, %179 ]
  tail call void (...) @setdown_cube() #43
  %184 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %185 = icmp eq ptr %184, null
  br i1 %185, label %187, label %186

186:                                              ; preds = %182
  tail call void @free(ptr noundef nonnull %184) #43
  br label %187

187:                                              ; preds = %186, %182
  store <2 x i32> %120, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !16
  store ptr %116, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  tail call void (...) @cube_setup() #43
  %188 = load ptr, ptr %0, align 8, !tbaa !61
  tail call void (ptr, ...) @sf_free(ptr noundef %188) #43
  %189 = load ptr, ptr %46, align 8, !tbaa !62
  tail call void (ptr, ...) @sf_free(ptr noundef %189) #43
  %190 = load ptr, ptr %47, align 8, !tbaa !63
  tail call void (ptr, ...) @sf_free(ptr noundef %190) #43
  store ptr %117, ptr %0, align 8, !tbaa !61
  store ptr %118, ptr %46, align 8, !tbaa !62
  store ptr %119, ptr %47, align 8, !tbaa !63
  br label %191

191:                                              ; preds = %187, %179, %176
  %192 = phi i32 [ %81, %179 ], [ %183, %187 ], [ %164, %176 ]
  %193 = add nuw nsw i64 %77, 1
  %194 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %195 = trunc i64 %193 to i32
  %196 = icmp sgt i32 %194, %195
  br i1 %196, label %76, label %48

197:                                              ; preds = %48
  %198 = load ptr, ptr %41, align 8, !tbaa !73
  br label %199

199:                                              ; preds = %197, %39
  %200 = phi ptr [ %198, %197 ], [ %40, %39 ]
  %201 = tail call i32 @pair_free(ptr noundef %200) #44
  store ptr null, ptr %41, align 8, !tbaa !73
  ret ptr %6
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @pair_best_cost(ptr noundef %0) #0 {
  store i32 -1, ptr @best_cost, align 4, !tbaa !16
  store ptr null, ptr @best_pair, align 8, !tbaa !13
  store ptr %0, ptr @cost_array, align 8, !tbaa !13
  %2 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %3 = tail call ptr @pair_new(i32 noundef %2) #44
  %4 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %5 = icmp slt i32 %4, 33
  %6 = add nsw i32 %4, -1
  %7 = lshr i32 %6, 3
  %8 = and i32 %7, 536870908
  %9 = add nuw nsw i32 %8, 8
  %10 = select i1 %5, i32 8, i32 %9
  %11 = zext i32 %10 to i64
  %12 = tail call noalias ptr @malloc(i64 noundef %11) #42
  %13 = tail call ptr (ptr, i32, ...) @set_fill(ptr noundef %12, i32 noundef %4) #43
  %14 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %15 = tail call i32 @generate_all_pairs(ptr noundef %3, i32 noundef %14, ptr noundef %13, ptr noundef nonnull @find_best_cost) #44
  %16 = tail call i32 @pair_free(ptr noundef %3) #44
  %17 = icmp eq ptr %13, null
  br i1 %17, label %19, label %18

18:                                               ; preds = %1
  tail call void @free(ptr noundef nonnull %13) #43
  br label %19

19:                                               ; preds = %18, %1
  %20 = load ptr, ptr @best_pair, align 8, !tbaa !13
  ret ptr %20
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @greedy_best_cost(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1) #0 {
  %3 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %4 = tail call ptr @pair_new(i32 noundef %3) #44
  %5 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %6 = icmp slt i32 %5, 33
  %7 = add nsw i32 %5, -1
  %8 = lshr i32 %7, 3
  %9 = and i32 %8, 536870908
  %10 = add nuw nsw i32 %9, 8
  %11 = select i1 %6, i32 8, i32 %10
  %12 = zext i32 %11 to i64
  %13 = tail call noalias ptr @malloc(i64 noundef %12) #42
  %14 = tail call ptr (ptr, i32, ...) @set_fill(ptr noundef %13, i32 noundef %5) #43
  %15 = tail call i32 (ptr, ...) @set_ord(ptr noundef %14) #43
  %16 = icmp sgt i32 %15, 1
  br i1 %16, label %17, label %120

17:                                               ; preds = %2
  %18 = getelementptr inbounds %struct.pair_struct, ptr %4, i64 0, i32 1
  %19 = getelementptr inbounds %struct.pair_struct, ptr %4, i64 0, i32 2
  br label %20

20:                                               ; preds = %83, %17
  %21 = phi i32 [ 0, %17 ], [ %117, %83 ]
  %22 = phi i32 [ undef, %17 ], [ %85, %83 ]
  %23 = phi i32 [ undef, %17 ], [ %84, %83 ]
  %24 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %25 = icmp sgt i32 %24, 0
  br i1 %25, label %26, label %83

26:                                               ; preds = %20
  %27 = zext i32 %24 to i64
  %28 = zext i32 %24 to i64
  br label %29

29:                                               ; preds = %77, %26
  %30 = phi i64 [ 0, %26 ], [ %45, %77 ]
  %31 = phi i64 [ 1, %26 ], [ %81, %77 ]
  %32 = phi i32 [ -1, %26 ], [ %80, %77 ]
  %33 = phi i32 [ %22, %26 ], [ %79, %77 ]
  %34 = phi i32 [ %23, %26 ], [ %78, %77 ]
  %35 = trunc i64 %30 to i32
  %36 = lshr i32 %35, 5
  %37 = add nuw nsw i32 %36, 1
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds i32, ptr %14, i64 %38
  %40 = load i32, ptr %39, align 4, !tbaa !16
  %41 = and i32 %35, 31
  %42 = shl nuw i32 1, %41
  %43 = and i32 %40, %42
  %44 = icmp ne i32 %43, 0
  %45 = add nuw nsw i64 %30, 1
  %46 = icmp ult i64 %45, %27
  %47 = select i1 %44, i1 %46, i1 false
  br i1 %47, label %48, label %77

48:                                               ; preds = %29
  %49 = getelementptr inbounds ptr, ptr %0, i64 %30
  br label %50

50:                                               ; preds = %71, %48
  %51 = phi i64 [ %31, %48 ], [ %75, %71 ]
  %52 = phi i32 [ %32, %48 ], [ %74, %71 ]
  %53 = phi i32 [ %33, %48 ], [ %73, %71 ]
  %54 = phi i32 [ %34, %48 ], [ %72, %71 ]
  %55 = trunc i64 %51 to i32
  %56 = lshr i32 %55, 5
  %57 = add nuw nsw i32 %56, 1
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds i32, ptr %14, i64 %58
  %60 = load i32, ptr %59, align 4, !tbaa !16
  %61 = and i32 %55, 31
  %62 = shl nuw i32 1, %61
  %63 = and i32 %60, %62
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %71, label %65

65:                                               ; preds = %50
  %66 = load ptr, ptr %49, align 8, !tbaa !13
  %67 = getelementptr inbounds i32, ptr %66, i64 %51
  %68 = load i32, ptr %67, align 4, !tbaa !16
  %69 = icmp sgt i32 %68, %52
  br i1 %69, label %70, label %71

70:                                               ; preds = %65
  br label %71

71:                                               ; preds = %70, %65, %50
  %72 = phi i32 [ %35, %70 ], [ %54, %65 ], [ %54, %50 ]
  %73 = phi i32 [ %55, %70 ], [ %53, %65 ], [ %53, %50 ]
  %74 = phi i32 [ %68, %70 ], [ %52, %65 ], [ %52, %50 ]
  %75 = add nuw nsw i64 %51, 1
  %76 = icmp eq i64 %75, %28
  br i1 %76, label %77, label %50

77:                                               ; preds = %71, %29
  %78 = phi i32 [ %34, %29 ], [ %72, %71 ]
  %79 = phi i32 [ %33, %29 ], [ %73, %71 ]
  %80 = phi i32 [ %32, %29 ], [ %74, %71 ]
  %81 = add nuw nsw i64 %31, 1
  %82 = icmp eq i64 %45, %28
  br i1 %82, label %83, label %29

83:                                               ; preds = %77, %20
  %84 = phi i32 [ %23, %20 ], [ %78, %77 ]
  %85 = phi i32 [ %22, %20 ], [ %79, %77 ]
  %86 = phi i32 [ -1, %20 ], [ %80, %77 ]
  %87 = add nsw i32 %84, 1
  %88 = load ptr, ptr %18, align 8, !tbaa !76
  %89 = load i32, ptr %4, align 8, !tbaa !74
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds i32, ptr %88, i64 %90
  store i32 %87, ptr %91, align 4, !tbaa !16
  %92 = add nsw i32 %85, 1
  %93 = load ptr, ptr %19, align 8, !tbaa !77
  %94 = load i32, ptr %4, align 8, !tbaa !74
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds i32, ptr %93, i64 %95
  store i32 %92, ptr %96, align 4, !tbaa !16
  %97 = load i32, ptr %4, align 8, !tbaa !74
  %98 = add nsw i32 %97, 1
  store i32 %98, ptr %4, align 8, !tbaa !74
  %99 = and i32 %84, 31
  %100 = shl nuw i32 1, %99
  %101 = xor i32 %100, -1
  %102 = ashr i32 %84, 5
  %103 = add nsw i32 %102, 1
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds i32, ptr %14, i64 %104
  %106 = load i32, ptr %105, align 4, !tbaa !16
  %107 = and i32 %106, %101
  store i32 %107, ptr %105, align 4, !tbaa !16
  %108 = and i32 %85, 31
  %109 = shl nuw i32 1, %108
  %110 = xor i32 %109, -1
  %111 = ashr i32 %85, 5
  %112 = add nsw i32 %111, 1
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds i32, ptr %14, i64 %113
  %115 = load i32, ptr %114, align 4, !tbaa !16
  %116 = and i32 %115, %110
  store i32 %116, ptr %114, align 4, !tbaa !16
  %117 = add nsw i32 %86, %21
  %118 = tail call i32 (ptr, ...) @set_ord(ptr noundef %14) #43
  %119 = icmp sgt i32 %118, 1
  br i1 %119, label %20, label %122

120:                                              ; preds = %2
  %121 = icmp eq ptr %14, null
  br i1 %121, label %124, label %122

122:                                              ; preds = %120, %83
  %123 = phi i32 [ 0, %120 ], [ %117, %83 ]
  tail call void @free(ptr noundef nonnull %14) #43
  br label %124

124:                                              ; preds = %122, %120
  %125 = phi i32 [ %123, %122 ], [ 0, %120 ]
  store ptr %4, ptr %1, align 8, !tbaa !13
  ret i32 %125
}

; Function Attrs: nofree nounwind optsize uwtable
define internal i32 @print_pair(ptr nocapture noundef readonly %0) #14 {
  %2 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.7.408) #44
  %3 = load i32, ptr %0, align 8, !tbaa !74
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %5, label %21

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.pair_struct, ptr %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.pair_struct, ptr %0, i64 0, i32 2
  br label %8

8:                                                ; preds = %8, %5
  %9 = phi i64 [ 0, %5 ], [ %17, %8 ]
  %10 = load ptr, ptr %6, align 8, !tbaa !76
  %11 = getelementptr inbounds i32, ptr %10, i64 %9
  %12 = load i32, ptr %11, align 4, !tbaa !16
  %13 = load ptr, ptr %7, align 8, !tbaa !77
  %14 = getelementptr inbounds i32, ptr %13, i64 %9
  %15 = load i32, ptr %14, align 4, !tbaa !16
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.8.409, i32 noundef %12, i32 noundef %15) #44
  %17 = add nuw nsw i64 %9, 1
  %18 = load i32, ptr %0, align 8, !tbaa !74
  %19 = sext i32 %18 to i64
  %20 = icmp slt i64 %17, %19
  br i1 %20, label %8, label %21

21:                                               ; preds = %8, %1
  %22 = tail call i32 @putchar(i32 10)
  ret i32 undef
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write, argmem: none, inaccessiblemem: readwrite) uwtable
define internal noalias ptr @pair_new(i32 noundef %0) #6 {
  %2 = tail call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #42
  store i32 0, ptr %2, align 8, !tbaa !74
  %3 = sext i32 %0 to i64
  %4 = shl nsw i64 %3, 2
  %5 = tail call noalias ptr @malloc(i64 noundef %4) #42
  %6 = getelementptr inbounds %struct.pair_struct, ptr %2, i64 0, i32 1
  store ptr %5, ptr %6, align 8, !tbaa !76
  %7 = tail call noalias ptr @malloc(i64 noundef %4) #42
  %8 = getelementptr inbounds %struct.pair_struct, ptr %2, i64 0, i32 2
  store ptr %7, ptr %8, align 8, !tbaa !77
  ret ptr %2
}

; Function Attrs: nofree nounwind optsize uwtable
define internal i32 @find_best_cost(ptr nocapture noundef readonly %0) #14 {
  %2 = load i32, ptr %0, align 8, !tbaa !74
  %3 = icmp sgt i32 %2, 0
  br i1 %3, label %4, label %29

4:                                                ; preds = %1
  %5 = load ptr, ptr @cost_array, align 8, !tbaa !13
  %6 = getelementptr inbounds %struct.pair_struct, ptr %0, i64 0, i32 1
  %7 = load ptr, ptr %6, align 8, !tbaa !76
  %8 = getelementptr inbounds %struct.pair_struct, ptr %0, i64 0, i32 2
  %9 = load ptr, ptr %8, align 8, !tbaa !77
  %10 = zext i32 %2 to i64
  br label %11

11:                                               ; preds = %11, %4
  %12 = phi i64 [ 0, %4 ], [ %27, %11 ]
  %13 = phi i32 [ 0, %4 ], [ %26, %11 ]
  %14 = getelementptr inbounds i32, ptr %7, i64 %12
  %15 = load i32, ptr %14, align 4, !tbaa !16
  %16 = add nsw i32 %15, -1
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds ptr, ptr %5, i64 %17
  %19 = load ptr, ptr %18, align 8, !tbaa !13
  %20 = getelementptr inbounds i32, ptr %9, i64 %12
  %21 = load i32, ptr %20, align 4, !tbaa !16
  %22 = add nsw i32 %21, -1
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds i32, ptr %19, i64 %23
  %25 = load i32, ptr %24, align 4, !tbaa !16
  %26 = add nsw i32 %25, %13
  %27 = add nuw nsw i64 %12, 1
  %28 = icmp eq i64 %27, %10
  br i1 %28, label %29, label %11

29:                                               ; preds = %11, %1
  %30 = phi i32 [ 0, %1 ], [ %26, %11 ]
  %31 = load i32, ptr @best_cost, align 4, !tbaa !16
  %32 = icmp sgt i32 %30, %31
  br i1 %32, label %33, label %35

33:                                               ; preds = %29
  store i32 %30, ptr @best_cost, align 4, !tbaa !16
  %34 = tail call ptr @pair_save(ptr noundef nonnull %0, i32 noundef %2) #44
  store ptr %34, ptr @best_pair, align 8, !tbaa !13
  br label %35

35:                                               ; preds = %33, %29
  %36 = load i32, ptr @debug, align 4, !tbaa !16
  %37 = and i32 %36, 2048
  %38 = icmp ne i32 %37, 0
  %39 = load i32, ptr @trace, align 4
  %40 = icmp ne i32 %39, 0
  %41 = select i1 %38, i1 %40, i1 false
  br i1 %41, label %42, label %45

42:                                               ; preds = %35
  %43 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.9.410, i32 noundef %30) #44
  %44 = tail call i32 @print_pair(ptr noundef nonnull %0) #44
  br label %45

45:                                               ; preds = %42, %35
  ret i32 undef
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @generate_all_pairs(ptr noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3) #0 {
  %5 = tail call i32 (ptr, ...) @set_ord(ptr noundef %2) #43
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %7, label %9

7:                                                ; preds = %4
  %8 = tail call i32 (ptr, ...) %3(ptr noundef %0) #43
  br label %113

9:                                                ; preds = %4
  %10 = tail call ptr @pair_save(ptr noundef %0, i32 noundef %1) #44
  %11 = load i32, ptr %2, align 4, !tbaa !16
  %12 = shl i32 %11, 5
  %13 = and i32 %12, 32736
  %14 = icmp ult i32 %13, 33
  %15 = add nsw i32 %13, -1
  %16 = lshr i32 %15, 3
  %17 = and i32 %16, 536870908
  %18 = add nuw nsw i32 %17, 8
  %19 = select i1 %14, i32 8, i32 %18
  %20 = zext i32 %19 to i64
  %21 = tail call noalias ptr @malloc(i64 noundef %20) #42
  %22 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %21, ptr noundef nonnull %2) #43
  %23 = icmp sgt i32 %1, 0
  br i1 %23, label %24, label %38

24:                                               ; preds = %35, %9
  %25 = phi i32 [ %36, %35 ], [ 0, %9 ]
  %26 = lshr i32 %25, 5
  %27 = add nuw nsw i32 %26, 1
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds i32, ptr %2, i64 %28
  %30 = load i32, ptr %29, align 4, !tbaa !16
  %31 = and i32 %25, 31
  %32 = shl nuw i32 1, %31
  %33 = and i32 %30, %32
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %38

35:                                               ; preds = %24
  %36 = add nuw nsw i32 %25, 1
  %37 = icmp eq i32 %36, %1
  br i1 %37, label %38, label %24

38:                                               ; preds = %35, %24, %9
  %39 = phi i32 [ 0, %9 ], [ %25, %24 ], [ %1, %35 ]
  %40 = add nuw nsw i32 %39, 1
  %41 = icmp slt i32 %40, %1
  br i1 %41, label %42, label %93

42:                                               ; preds = %38
  %43 = and i32 %39, 31
  %44 = shl nuw i32 1, %43
  %45 = xor i32 %44, -1
  %46 = lshr i32 %39, 5
  %47 = add nuw nsw i32 %46, 1
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds i32, ptr %22, i64 %48
  %50 = getelementptr inbounds %struct.pair_struct, ptr %10, i64 0, i32 1
  %51 = getelementptr inbounds %struct.pair_struct, ptr %10, i64 0, i32 2
  br label %52

52:                                               ; preds = %90, %42
  %53 = phi i32 [ %40, %42 ], [ %91, %90 ]
  %54 = lshr i32 %53, 5
  %55 = add nuw nsw i32 %54, 1
  %56 = zext i32 %55 to i64
  %57 = getelementptr inbounds i32, ptr %2, i64 %56
  %58 = load i32, ptr %57, align 4, !tbaa !16
  %59 = and i32 %53, 31
  %60 = shl nuw i32 1, %59
  %61 = and i32 %58, %60
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %65

63:                                               ; preds = %52
  %64 = add i32 %53, 1
  br label %90

65:                                               ; preds = %52
  %66 = load i32, ptr %49, align 4, !tbaa !16
  %67 = and i32 %66, %45
  store i32 %67, ptr %49, align 4, !tbaa !16
  %68 = xor i32 %60, -1
  %69 = getelementptr inbounds i32, ptr %22, i64 %56
  %70 = load i32, ptr %69, align 4, !tbaa !16
  %71 = and i32 %70, %68
  store i32 %71, ptr %69, align 4, !tbaa !16
  %72 = load ptr, ptr %50, align 8, !tbaa !76
  %73 = load i32, ptr %10, align 8, !tbaa !74
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds i32, ptr %72, i64 %74
  store i32 %40, ptr %75, align 4, !tbaa !16
  %76 = add i32 %53, 1
  %77 = load ptr, ptr %51, align 8, !tbaa !77
  %78 = load i32, ptr %10, align 8, !tbaa !74
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds i32, ptr %77, i64 %79
  store i32 %76, ptr %80, align 4, !tbaa !16
  %81 = load i32, ptr %10, align 8, !tbaa !74
  %82 = add nsw i32 %81, 1
  store i32 %82, ptr %10, align 8, !tbaa !74
  %83 = tail call i32 @generate_all_pairs(ptr noundef nonnull %10, i32 noundef %1, ptr noundef %22, ptr noundef %3) #44
  %84 = load i32, ptr %10, align 8, !tbaa !74
  %85 = add nsw i32 %84, -1
  store i32 %85, ptr %10, align 8, !tbaa !74
  %86 = load i32, ptr %49, align 4, !tbaa !16
  %87 = or i32 %86, %44
  store i32 %87, ptr %49, align 4, !tbaa !16
  %88 = load i32, ptr %69, align 4, !tbaa !16
  %89 = or i32 %88, %60
  store i32 %89, ptr %69, align 4, !tbaa !16
  br label %90

90:                                               ; preds = %65, %63
  %91 = phi i32 [ %64, %63 ], [ %76, %65 ]
  %92 = icmp eq i32 %91, %1
  br i1 %92, label %93, label %52

93:                                               ; preds = %90, %38
  %94 = tail call i32 (ptr, ...) @set_ord(ptr noundef nonnull %2) #43
  %95 = and i32 %94, -2147483647
  %96 = icmp eq i32 %95, 1
  br i1 %96, label %97, label %109

97:                                               ; preds = %93
  %98 = and i32 %39, 31
  %99 = shl nuw i32 1, %98
  %100 = xor i32 %99, -1
  %101 = lshr i32 %39, 5
  %102 = add nuw nsw i32 %101, 1
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds i32, ptr %22, i64 %103
  %105 = load i32, ptr %104, align 4, !tbaa !16
  %106 = and i32 %105, %100
  store i32 %106, ptr %104, align 4, !tbaa !16
  %107 = tail call i32 @generate_all_pairs(ptr noundef %10, i32 noundef %1, ptr noundef %22, ptr noundef %3) #44
  %108 = tail call i32 @pair_free(ptr noundef %10) #44
  br label %112

109:                                              ; preds = %93
  %110 = tail call i32 @pair_free(ptr noundef %10) #44
  %111 = icmp eq ptr %22, null
  br i1 %111, label %113, label %112

112:                                              ; preds = %109, %97
  tail call void @free(ptr noundef nonnull %22) #43
  br label %113

113:                                              ; preds = %112, %109, %7
  ret i32 0
}

; Function Attrs: mustprogress nounwind optsize willreturn uwtable
define internal i32 @pair_free(ptr nocapture noundef %0) #30 {
  %2 = getelementptr inbounds %struct.pair_struct, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !76
  %4 = icmp eq ptr %3, null
  br i1 %4, label %6, label %5

5:                                                ; preds = %1
  tail call void @free(ptr noundef nonnull %3) #43
  store ptr null, ptr %2, align 8, !tbaa !76
  br label %6

6:                                                ; preds = %5, %1
  %7 = getelementptr inbounds %struct.pair_struct, ptr %0, i64 0, i32 2
  %8 = load ptr, ptr %7, align 8, !tbaa !77
  %9 = icmp eq ptr %8, null
  br i1 %9, label %11, label %10

10:                                               ; preds = %6
  tail call void @free(ptr noundef nonnull %8) #43
  br label %11

11:                                               ; preds = %10, %6
  tail call void @free(ptr noundef nonnull %0) #43
  ret i32 undef
}

; Function Attrs: nofree nounwind optsize uwtable
define internal noalias ptr @pair_save(ptr nocapture noundef readonly %0, i32 noundef %1) #14 {
  %3 = tail call ptr @pair_new(i32 noundef %1) #44
  %4 = load i32, ptr %0, align 8, !tbaa !74
  store i32 %4, ptr %3, align 8, !tbaa !74
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %27

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.pair_struct, ptr %0, i64 0, i32 1
  %8 = load ptr, ptr %7, align 8, !tbaa !76
  %9 = getelementptr inbounds %struct.pair_struct, ptr %3, i64 0, i32 1
  %10 = load ptr, ptr %9, align 8, !tbaa !76
  %11 = getelementptr inbounds %struct.pair_struct, ptr %0, i64 0, i32 2
  %12 = load ptr, ptr %11, align 8, !tbaa !77
  %13 = getelementptr inbounds %struct.pair_struct, ptr %3, i64 0, i32 2
  %14 = load ptr, ptr %13, align 8, !tbaa !77
  br label %15

15:                                               ; preds = %15, %6
  %16 = phi i64 [ 0, %6 ], [ %23, %15 ]
  %17 = getelementptr inbounds i32, ptr %8, i64 %16
  %18 = load i32, ptr %17, align 4, !tbaa !16
  %19 = getelementptr inbounds i32, ptr %10, i64 %16
  store i32 %18, ptr %19, align 4, !tbaa !16
  %20 = getelementptr inbounds i32, ptr %12, i64 %16
  %21 = load i32, ptr %20, align 4, !tbaa !16
  %22 = getelementptr inbounds i32, ptr %14, i64 %16
  store i32 %21, ptr %22, align 4, !tbaa !16
  %23 = add nuw nsw i64 %16, 1
  %24 = load i32, ptr %0, align 8, !tbaa !74
  %25 = sext i32 %24 to i64
  %26 = icmp slt i64 %23, %25
  br i1 %26, label %15, label %27

27:                                               ; preds = %15, %2
  ret ptr %3
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @pair_all(ptr noundef %0, i32 noundef %1) #0 {
  store ptr %0, ptr @global_PLA, align 8, !tbaa !13
  store i32 %1, ptr @pair_minim_strategy, align 4, !tbaa !16
  %3 = load ptr, ptr %0, align 8, !tbaa !61
  %4 = getelementptr inbounds %struct.set_family, ptr %3, i64 0, i32 3
  %5 = load i32, ptr %4, align 4, !tbaa !31
  %6 = add nsw i32 %5, 1
  store i32 %6, ptr @best_cost, align 4, !tbaa !16
  store ptr null, ptr @best_pair, align 8, !tbaa !13
  store ptr null, ptr @best_phase, align 8, !tbaa !13
  store ptr null, ptr @best_R, align 8, !tbaa !13
  store ptr null, ptr @best_D, align 8, !tbaa !13
  store ptr null, ptr @best_F, align 8, !tbaa !13
  %7 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %8 = tail call ptr @pair_new(i32 noundef %7) #44
  %9 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %10 = icmp slt i32 %9, 33
  %11 = add nsw i32 %9, -1
  %12 = lshr i32 %11, 3
  %13 = and i32 %12, 536870908
  %14 = add nuw nsw i32 %13, 8
  %15 = select i1 %10, i32 8, i32 %14
  %16 = zext i32 %15 to i64
  %17 = tail call noalias ptr @malloc(i64 noundef %16) #42
  %18 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %17, i32 noundef %9) #43
  %19 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %20 = tail call ptr (ptr, i32, ...) @set_fill(ptr noundef %18, i32 noundef %19) #43
  %21 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %22 = tail call i32 @generate_all_pairs(ptr noundef %8, i32 noundef %21, ptr noundef %20, ptr noundef nonnull @minimize_pair) #44
  %23 = tail call i32 @pair_free(ptr noundef %8) #44
  %24 = icmp eq ptr %20, null
  br i1 %24, label %26, label %25

25:                                               ; preds = %2
  tail call void @free(ptr noundef nonnull %20) #43
  br label %26

26:                                               ; preds = %25, %2
  %27 = load ptr, ptr @best_pair, align 8, !tbaa !13
  %28 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 6
  store ptr %27, ptr %28, align 8, !tbaa !73
  %29 = load ptr, ptr @best_phase, align 8, !tbaa !13
  %30 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 5
  store ptr %29, ptr %30, align 8, !tbaa !72
  tail call void @set_pair1(ptr noundef nonnull %0, i32 noundef 1) #44
  %31 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.5.406) #44
  %32 = load ptr, ptr %28, align 8, !tbaa !73
  %33 = tail call i32 @print_pair(ptr noundef %32) #44
  %34 = load ptr, ptr %0, align 8, !tbaa !61
  tail call void (ptr, ...) @sf_free(ptr noundef %34) #43
  %35 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 1
  %36 = load ptr, ptr %35, align 8, !tbaa !62
  tail call void (ptr, ...) @sf_free(ptr noundef %36) #43
  %37 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 2
  %38 = load ptr, ptr %37, align 8, !tbaa !63
  tail call void (ptr, ...) @sf_free(ptr noundef %38) #43
  %39 = load ptr, ptr @best_F, align 8, !tbaa !13
  store ptr %39, ptr %0, align 8, !tbaa !61
  %40 = load ptr, ptr @best_D, align 8, !tbaa !13
  store ptr %40, ptr %35, align 8, !tbaa !62
  %41 = load ptr, ptr @best_R, align 8, !tbaa !13
  store ptr %41, ptr %37, align 8, !tbaa !63
  ret i32 undef
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @minimize_pair(ptr noundef %0) #0 {
  %2 = load ptr, ptr @global_PLA, align 8, !tbaa !13
  %3 = load ptr, ptr %2, align 8, !tbaa !61
  %4 = tail call ptr (ptr, ...) @sf_save(ptr noundef %3) #43
  %5 = load ptr, ptr @global_PLA, align 8, !tbaa !13
  %6 = getelementptr inbounds %struct.PLA_t, ptr %5, i64 0, i32 1
  %7 = load ptr, ptr %6, align 8, !tbaa !62
  %8 = tail call ptr (ptr, ...) @sf_save(ptr noundef %7) #43
  %9 = load ptr, ptr @global_PLA, align 8, !tbaa !13
  %10 = getelementptr inbounds %struct.PLA_t, ptr %9, i64 0, i32 2
  %11 = load ptr, ptr %10, align 8, !tbaa !63
  %12 = tail call ptr (ptr, ...) @sf_save(ptr noundef %11) #43
  %13 = load <2 x i32>, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !16
  %14 = extractelement <2 x i32> %13, i64 0
  %15 = sext i32 %14 to i64
  %16 = shl nsw i64 %15, 2
  %17 = tail call noalias ptr @malloc(i64 noundef %16) #42
  %18 = icmp sgt i32 %14, 0
  br i1 %18, label %19, label %29

19:                                               ; preds = %1
  %20 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %21 = zext i32 %14 to i64
  br label %22

22:                                               ; preds = %22, %19
  %23 = phi i64 [ 0, %19 ], [ %27, %22 ]
  %24 = getelementptr inbounds i32, ptr %20, i64 %23
  %25 = load i32, ptr %24, align 4, !tbaa !16
  %26 = getelementptr inbounds i32, ptr %17, i64 %23
  store i32 %25, ptr %26, align 4, !tbaa !16
  %27 = add nuw nsw i64 %23, 1
  %28 = icmp eq i64 %27, %21
  br i1 %28, label %29, label %22

29:                                               ; preds = %22, %1
  %30 = load ptr, ptr @global_PLA, align 8, !tbaa !13
  %31 = getelementptr inbounds %struct.PLA_t, ptr %30, i64 0, i32 6
  store ptr %0, ptr %31, align 8, !tbaa !73
  tail call void @set_pair1(ptr noundef %30, i32 noundef 0) #44
  %32 = load i32, ptr @summary, align 4, !tbaa !16
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %36, label %34

34:                                               ; preds = %29
  %35 = tail call i32 @print_pair(ptr noundef %0) #44
  br label %36

36:                                               ; preds = %34, %29
  %37 = load i32, ptr @pair_minim_strategy, align 4, !tbaa !16
  switch i32 %37, label %86 [
    i32 2, label %38
    i32 1, label %56
    i32 0, label %71
  ]

38:                                               ; preds = %36
  %39 = tail call i64 (...) @util_cpu_time() #43
  %40 = load ptr, ptr @global_PLA, align 8, !tbaa !13
  tail call void (ptr, i32, ...) @phase_assignment(ptr noundef %40, i32 noundef 0) #43
  %41 = load i32, ptr @summary, align 4, !tbaa !16
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %86, label %43

43:                                               ; preds = %38
  %44 = load ptr, ptr @global_PLA, align 8, !tbaa !13
  %45 = load ptr, ptr %44, align 8, !tbaa !61
  %46 = tail call i64 (...) @util_cpu_time() #43
  %47 = sub nsw i64 %46, %39
  tail call void (ptr, ptr, i64, ...) @print_trace(ptr noundef %45, ptr noundef nonnull @.str.10.413, i64 noundef %47) #43
  %48 = load i32, ptr @summary, align 4, !tbaa !16
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %86, label %50

50:                                               ; preds = %43
  %51 = load ptr, ptr @global_PLA, align 8, !tbaa !13
  %52 = getelementptr inbounds %struct.PLA_t, ptr %51, i64 0, i32 5
  %53 = load ptr, ptr %52, align 8, !tbaa !72
  %54 = tail call ptr (ptr, ...) @pc1(ptr noundef %53) #43
  %55 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.11.414, ptr noundef %54) #44
  br label %86

56:                                               ; preds = %36
  %57 = tail call i64 (...) @util_cpu_time() #43
  %58 = load ptr, ptr @global_PLA, align 8, !tbaa !13
  %59 = load ptr, ptr %58, align 8, !tbaa !61
  %60 = getelementptr inbounds %struct.PLA_t, ptr %58, i64 0, i32 1
  %61 = load ptr, ptr %60, align 8, !tbaa !62
  %62 = getelementptr inbounds %struct.PLA_t, ptr %58, i64 0, i32 2
  %63 = load ptr, ptr %62, align 8, !tbaa !63
  %64 = tail call ptr (ptr, ptr, ptr, i32, ...) @minimize_exact(ptr noundef %59, ptr noundef %61, ptr noundef %63, i32 noundef 1) #43
  %65 = load ptr, ptr @global_PLA, align 8, !tbaa !13
  store ptr %64, ptr %65, align 8, !tbaa !61
  %66 = load i32, ptr @summary, align 4, !tbaa !16
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %86, label %68

68:                                               ; preds = %56
  %69 = tail call i64 (...) @util_cpu_time() #43
  %70 = sub nsw i64 %69, %57
  tail call void (ptr, ptr, i64, ...) @print_trace(ptr noundef %64, ptr noundef nonnull @.str.12.415, i64 noundef %70) #43
  br label %86

71:                                               ; preds = %36
  %72 = tail call i64 (...) @util_cpu_time() #43
  %73 = load ptr, ptr @global_PLA, align 8, !tbaa !13
  %74 = load ptr, ptr %73, align 8, !tbaa !61
  %75 = getelementptr inbounds %struct.PLA_t, ptr %73, i64 0, i32 1
  %76 = load ptr, ptr %75, align 8, !tbaa !62
  %77 = getelementptr inbounds %struct.PLA_t, ptr %73, i64 0, i32 2
  %78 = load ptr, ptr %77, align 8, !tbaa !63
  %79 = tail call ptr (ptr, ptr, ptr, ...) @espresso(ptr noundef %74, ptr noundef %76, ptr noundef %78) #43
  %80 = load ptr, ptr @global_PLA, align 8, !tbaa !13
  store ptr %79, ptr %80, align 8, !tbaa !61
  %81 = load i32, ptr @summary, align 4, !tbaa !16
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %86, label %83

83:                                               ; preds = %71
  %84 = tail call i64 (...) @util_cpu_time() #43
  %85 = sub nsw i64 %84, %72
  tail call void (ptr, ptr, i64, ...) @print_trace(ptr noundef %79, ptr noundef nonnull @.str.6.407, i64 noundef %85) #43
  br label %86

86:                                               ; preds = %83, %71, %68, %56, %50, %43, %38, %36
  %87 = load ptr, ptr @global_PLA, align 8, !tbaa !13
  %88 = load ptr, ptr %87, align 8, !tbaa !61
  %89 = getelementptr inbounds %struct.set_family, ptr %88, i64 0, i32 3
  %90 = load i32, ptr %89, align 4, !tbaa !31
  %91 = load i32, ptr @best_cost, align 4, !tbaa !16
  %92 = icmp slt i32 %90, %91
  br i1 %92, label %93, label %138

93:                                               ; preds = %86
  store i32 %90, ptr @best_cost, align 4, !tbaa !16
  %94 = load i32, ptr %0, align 8, !tbaa !74
  %95 = tail call ptr @pair_save(ptr noundef nonnull %0, i32 noundef %94) #44
  store ptr %95, ptr @best_pair, align 8, !tbaa !13
  %96 = load ptr, ptr @global_PLA, align 8, !tbaa !13
  %97 = getelementptr inbounds %struct.PLA_t, ptr %96, i64 0, i32 5
  %98 = load ptr, ptr %97, align 8, !tbaa !72
  %99 = icmp eq ptr %98, null
  br i1 %99, label %113, label %100

100:                                              ; preds = %93
  %101 = load i32, ptr %98, align 4, !tbaa !16
  %102 = shl i32 %101, 5
  %103 = and i32 %102, 32736
  %104 = icmp ult i32 %103, 33
  %105 = add nsw i32 %103, -1
  %106 = lshr i32 %105, 3
  %107 = and i32 %106, 536870908
  %108 = add nuw nsw i32 %107, 8
  %109 = select i1 %104, i32 8, i32 %108
  %110 = zext i32 %109 to i64
  %111 = tail call noalias ptr @malloc(i64 noundef %110) #42
  %112 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %111, ptr noundef nonnull %98) #43
  br label %113

113:                                              ; preds = %100, %93
  %114 = phi ptr [ %112, %100 ], [ null, %93 ]
  store ptr %114, ptr @best_phase, align 8, !tbaa !13
  %115 = load ptr, ptr @best_F, align 8, !tbaa !13
  %116 = icmp eq ptr %115, null
  br i1 %116, label %118, label %117

117:                                              ; preds = %113
  tail call void (ptr, ...) @sf_free(ptr noundef nonnull %115) #43
  br label %118

118:                                              ; preds = %117, %113
  %119 = load ptr, ptr @best_D, align 8, !tbaa !13
  %120 = icmp eq ptr %119, null
  br i1 %120, label %122, label %121

121:                                              ; preds = %118
  tail call void (ptr, ...) @sf_free(ptr noundef nonnull %119) #43
  br label %122

122:                                              ; preds = %121, %118
  %123 = load ptr, ptr @best_R, align 8, !tbaa !13
  %124 = icmp eq ptr %123, null
  br i1 %124, label %126, label %125

125:                                              ; preds = %122
  tail call void (ptr, ...) @sf_free(ptr noundef nonnull %123) #43
  br label %126

126:                                              ; preds = %125, %122
  %127 = load ptr, ptr @global_PLA, align 8, !tbaa !13
  %128 = load ptr, ptr %127, align 8, !tbaa !61
  %129 = tail call ptr (ptr, ...) @sf_save(ptr noundef %128) #43
  store ptr %129, ptr @best_F, align 8, !tbaa !13
  %130 = load ptr, ptr @global_PLA, align 8, !tbaa !13
  %131 = getelementptr inbounds %struct.PLA_t, ptr %130, i64 0, i32 1
  %132 = load ptr, ptr %131, align 8, !tbaa !62
  %133 = tail call ptr (ptr, ...) @sf_save(ptr noundef %132) #43
  store ptr %133, ptr @best_D, align 8, !tbaa !13
  %134 = load ptr, ptr @global_PLA, align 8, !tbaa !13
  %135 = getelementptr inbounds %struct.PLA_t, ptr %134, i64 0, i32 2
  %136 = load ptr, ptr %135, align 8, !tbaa !63
  %137 = tail call ptr (ptr, ...) @sf_save(ptr noundef %136) #43
  store ptr %137, ptr @best_R, align 8, !tbaa !13
  br label %138

138:                                              ; preds = %126, %86
  tail call void (...) @setdown_cube() #43
  %139 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  %140 = icmp eq ptr %139, null
  br i1 %140, label %142, label %141

141:                                              ; preds = %138
  tail call void @free(ptr noundef nonnull %139) #43
  br label %142

142:                                              ; preds = %141, %138
  store <2 x i32> %13, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !16
  store ptr %17, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 5), align 8, !tbaa !57
  tail call void (...) @cube_setup() #43
  %143 = load ptr, ptr @global_PLA, align 8, !tbaa !13
  %144 = load ptr, ptr %143, align 8, !tbaa !61
  tail call void (ptr, ...) @sf_free(ptr noundef %144) #43
  %145 = load ptr, ptr @global_PLA, align 8, !tbaa !13
  %146 = getelementptr inbounds %struct.PLA_t, ptr %145, i64 0, i32 1
  %147 = load ptr, ptr %146, align 8, !tbaa !62
  tail call void (ptr, ...) @sf_free(ptr noundef %147) #43
  %148 = load ptr, ptr @global_PLA, align 8, !tbaa !13
  %149 = getelementptr inbounds %struct.PLA_t, ptr %148, i64 0, i32 2
  %150 = load ptr, ptr %149, align 8, !tbaa !63
  tail call void (ptr, ...) @sf_free(ptr noundef %150) #43
  %151 = load ptr, ptr @global_PLA, align 8, !tbaa !13
  store ptr %4, ptr %151, align 8, !tbaa !61
  %152 = getelementptr inbounds %struct.PLA_t, ptr %151, i64 0, i32 1
  store ptr %8, ptr %152, align 8, !tbaa !62
  %153 = getelementptr inbounds %struct.PLA_t, ptr %151, i64 0, i32 2
  store ptr %12, ptr %153, align 8, !tbaa !63
  %154 = getelementptr inbounds %struct.PLA_t, ptr %151, i64 0, i32 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %154, i8 0, i64 16, i1 false)
  ret i32 undef
}

; Function Attrs: nofree nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: readwrite) uwtable
define internal i32 @visit_col(ptr nocapture noundef readonly %0, ptr nocapture noundef %1, ptr nocapture noundef %2, ptr nocapture noundef %3) #31 {
  %5 = getelementptr inbounds %struct.sm_col_struct, ptr %1, i64 0, i32 2
  %6 = load i32, ptr %5, align 8, !tbaa !38
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %43

8:                                                ; preds = %4
  store i32 1, ptr %5, align 8, !tbaa !38
  %9 = load i32, ptr %3, align 4, !tbaa !16
  %10 = add nsw i32 %9, 1
  store i32 %10, ptr %3, align 4, !tbaa !16
  %11 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 9
  %12 = load i32, ptr %11, align 8, !tbaa !111
  %13 = icmp eq i32 %10, %12
  br i1 %13, label %43, label %14

14:                                               ; preds = %8
  %15 = getelementptr inbounds %struct.sm_col_struct, ptr %1, i64 0, i32 3
  %16 = load ptr, ptr %15, align 8, !tbaa !13
  %17 = icmp eq ptr %16, null
  br i1 %17, label %43, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 1
  %20 = load ptr, ptr %0, align 8, !tbaa !108
  br label %21

21:                                               ; preds = %38, %18
  %22 = phi ptr [ %20, %18 ], [ %39, %38 ]
  %23 = phi ptr [ %16, %18 ], [ %41, %38 ]
  %24 = load i32, ptr %23, align 8, !tbaa !42
  %25 = icmp sgt i32 %24, -1
  tail call void @llvm.assume(i1 %25)
  %26 = load i32, ptr %19, align 8, !tbaa !107
  %27 = icmp slt i32 %24, %26
  tail call void @llvm.assume(i1 %27)
  %28 = zext i32 %24 to i64
  %29 = getelementptr inbounds ptr, ptr %22, i64 %28
  %30 = load ptr, ptr %29, align 8, !tbaa !13
  %31 = getelementptr inbounds %struct.sm_col_struct, ptr %30, i64 0, i32 2
  %32 = load i32, ptr %31, align 8, !tbaa !123
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %38

34:                                               ; preds = %21
  %35 = tail call fastcc i32 @visit_row(ptr noundef nonnull %0, ptr noundef nonnull %30, ptr noundef %2, ptr noundef nonnull %3) #44, !range !67
  %36 = icmp eq i32 %35, 0
  %37 = load ptr, ptr %0, align 8, !tbaa !108
  br i1 %36, label %38, label %43

38:                                               ; preds = %34, %21
  %39 = phi ptr [ %22, %21 ], [ %37, %34 ]
  %40 = getelementptr inbounds %struct.sm_element_struct, ptr %23, i64 0, i32 2
  %41 = load ptr, ptr %40, align 8, !tbaa !13
  %42 = icmp eq ptr %41, null
  br i1 %42, label %43, label %21

43:                                               ; preds = %38, %34, %14, %8, %4
  %44 = phi i32 [ 1, %8 ], [ 0, %4 ], [ 0, %14 ], [ 1, %34 ], [ 0, %38 ]
  ret i32 %44
}

; Function Attrs: nofree nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: readwrite) uwtable
define internal fastcc i32 @visit_row(ptr nocapture noundef readonly %0, ptr nocapture noundef %1, ptr nocapture noundef %2, ptr nocapture noundef %3) unnamed_addr #31 {
  %5 = getelementptr inbounds %struct.sm_col_struct, ptr %1, i64 0, i32 2
  %6 = load i32, ptr %5, align 8, !tbaa !123
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %42

8:                                                ; preds = %4
  store i32 1, ptr %5, align 8, !tbaa !123
  %9 = load i32, ptr %2, align 4, !tbaa !16
  %10 = add nsw i32 %9, 1
  store i32 %10, ptr %2, align 4, !tbaa !16
  %11 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 6
  %12 = load i32, ptr %11, align 8, !tbaa !99
  %13 = icmp eq i32 %10, %12
  br i1 %13, label %42, label %14

14:                                               ; preds = %8
  %15 = getelementptr inbounds %struct.sm_col_struct, ptr %1, i64 0, i32 3
  %16 = load ptr, ptr %15, align 8, !tbaa !13
  %17 = icmp eq ptr %16, null
  br i1 %17, label %42, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 3
  %20 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 2
  br label %21

21:                                               ; preds = %38, %18
  %22 = phi ptr [ %16, %18 ], [ %40, %38 ]
  %23 = getelementptr inbounds %struct.sm_element_struct, ptr %22, i64 0, i32 1
  %24 = load i32, ptr %23, align 4, !tbaa !103
  %25 = icmp sgt i32 %24, -1
  tail call void @llvm.assume(i1 %25)
  %26 = load i32, ptr %19, align 8, !tbaa !104
  %27 = icmp slt i32 %24, %26
  tail call void @llvm.assume(i1 %27)
  %28 = load ptr, ptr %20, align 8, !tbaa !105
  %29 = zext i32 %24 to i64
  %30 = getelementptr inbounds ptr, ptr %28, i64 %29
  %31 = load ptr, ptr %30, align 8, !tbaa !13
  %32 = getelementptr inbounds %struct.sm_col_struct, ptr %31, i64 0, i32 2
  %33 = load i32, ptr %32, align 8, !tbaa !38
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %38

35:                                               ; preds = %21
  %36 = tail call i32 @visit_col(ptr noundef nonnull %0, ptr noundef nonnull %31, ptr noundef nonnull %2, ptr noundef %3) #44, !range !67
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %42

38:                                               ; preds = %35, %21
  %39 = getelementptr inbounds %struct.sm_element_struct, ptr %22, i64 0, i32 4
  %40 = load ptr, ptr %39, align 8, !tbaa !13
  %41 = icmp eq ptr %40, null
  br i1 %41, label %42, label %21

42:                                               ; preds = %38, %35, %14, %8, %4
  %43 = phi i32 [ 1, %8 ], [ 0, %4 ], [ 0, %14 ], [ 1, %35 ], [ 0, %38 ]
  ret i32 %43
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @sm_block_partition(ptr nocapture noundef readonly %0, ptr nocapture noundef %1, ptr nocapture noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4) #45
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5) #45
  %6 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 6
  %7 = load i32, ptr %6, align 8, !tbaa !99
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %72, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 4
  %11 = load ptr, ptr %10, align 8, !tbaa !13
  %12 = icmp eq ptr %11, null
  br i1 %12, label %19, label %13

13:                                               ; preds = %13, %9
  %14 = phi ptr [ %17, %13 ], [ %11, %9 ]
  %15 = getelementptr inbounds %struct.sm_col_struct, ptr %14, i64 0, i32 2
  store i32 0, ptr %15, align 8, !tbaa !123
  %16 = getelementptr inbounds %struct.sm_col_struct, ptr %14, i64 0, i32 5
  %17 = load ptr, ptr %16, align 8, !tbaa !13
  %18 = icmp eq ptr %17, null
  br i1 %18, label %19, label %13

19:                                               ; preds = %13, %9
  %20 = getelementptr inbounds %struct.sm_matrix_struct, ptr %0, i64 0, i32 7
  %21 = load ptr, ptr %20, align 8, !tbaa !13
  %22 = icmp eq ptr %21, null
  br i1 %22, label %29, label %23

23:                                               ; preds = %23, %19
  %24 = phi ptr [ %27, %23 ], [ %21, %19 ]
  %25 = getelementptr inbounds %struct.sm_col_struct, ptr %24, i64 0, i32 2
  store i32 0, ptr %25, align 8, !tbaa !38
  %26 = getelementptr inbounds %struct.sm_col_struct, ptr %24, i64 0, i32 5
  %27 = load ptr, ptr %26, align 8, !tbaa !13
  %28 = icmp eq ptr %27, null
  br i1 %28, label %29, label %23

29:                                               ; preds = %23, %19
  store i32 0, ptr %5, align 4, !tbaa !16
  store i32 0, ptr %4, align 4, !tbaa !16
  %30 = load ptr, ptr %10, align 8, !tbaa !124
  %31 = call fastcc i32 @visit_row(ptr noundef %0, ptr noundef %30, ptr noundef nonnull %5, ptr noundef nonnull %4) #44, !range !67
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %72

33:                                               ; preds = %29
  %34 = tail call ptr (...) @sm_alloc() #43
  store ptr %34, ptr %1, align 8, !tbaa !13
  %35 = tail call ptr (...) @sm_alloc() #43
  store ptr %35, ptr %2, align 8, !tbaa !13
  %36 = load ptr, ptr %10, align 8, !tbaa !13
  %37 = icmp eq ptr %36, null
  br i1 %37, label %72, label %38

38:                                               ; preds = %68, %33
  %39 = phi ptr [ %70, %68 ], [ %36, %33 ]
  %40 = getelementptr inbounds %struct.sm_col_struct, ptr %39, i64 0, i32 2
  %41 = load i32, ptr %40, align 8, !tbaa !123
  %42 = icmp eq i32 %41, 0
  %43 = getelementptr inbounds %struct.sm_col_struct, ptr %39, i64 0, i32 3
  %44 = load ptr, ptr %43, align 8, !tbaa !13
  %45 = icmp eq ptr %44, null
  br i1 %42, label %57, label %46

46:                                               ; preds = %38
  %47 = load ptr, ptr %1, align 8, !tbaa !13
  br i1 %45, label %68, label %48

48:                                               ; preds = %48, %46
  %49 = phi ptr [ %55, %48 ], [ %44, %46 ]
  %50 = load i32, ptr %49, align 8, !tbaa !42
  %51 = getelementptr inbounds %struct.sm_element_struct, ptr %49, i64 0, i32 1
  %52 = load i32, ptr %51, align 4, !tbaa !103
  %53 = tail call ptr (ptr, i32, i32, ...) @sm_insert(ptr noundef %47, i32 noundef %50, i32 noundef %52) #43
  %54 = getelementptr inbounds %struct.sm_element_struct, ptr %49, i64 0, i32 4
  %55 = load ptr, ptr %54, align 8, !tbaa !13
  %56 = icmp eq ptr %55, null
  br i1 %56, label %68, label %48

57:                                               ; preds = %38
  %58 = load ptr, ptr %2, align 8, !tbaa !13
  br i1 %45, label %68, label %59

59:                                               ; preds = %59, %57
  %60 = phi ptr [ %66, %59 ], [ %44, %57 ]
  %61 = load i32, ptr %60, align 8, !tbaa !42
  %62 = getelementptr inbounds %struct.sm_element_struct, ptr %60, i64 0, i32 1
  %63 = load i32, ptr %62, align 4, !tbaa !103
  %64 = tail call ptr (ptr, i32, i32, ...) @sm_insert(ptr noundef %58, i32 noundef %61, i32 noundef %63) #43
  %65 = getelementptr inbounds %struct.sm_element_struct, ptr %60, i64 0, i32 4
  %66 = load ptr, ptr %65, align 8, !tbaa !13
  %67 = icmp eq ptr %66, null
  br i1 %67, label %68, label %59

68:                                               ; preds = %59, %57, %48, %46
  %69 = getelementptr inbounds %struct.sm_col_struct, ptr %39, i64 0, i32 5
  %70 = load ptr, ptr %69, align 8, !tbaa !13
  %71 = icmp eq ptr %70, null
  br i1 %71, label %72, label %38

72:                                               ; preds = %68, %33, %29, %3
  %73 = phi i32 [ 0, %3 ], [ 0, %29 ], [ 1, %33 ], [ 1, %68 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5) #45
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4) #45
  ret i32 %73
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @primes_consensus(ptr noundef %0) #0 {
  %2 = load ptr, ptr %0, align 8, !tbaa !13
  %3 = getelementptr inbounds ptr, ptr %0, i64 2
  %4 = load ptr, ptr %3, align 8, !tbaa !13
  %5 = icmp eq ptr %4, null
  br i1 %5, label %6, label %11

6:                                                ; preds = %1
  %7 = load i32, ptr @cube, align 8, !tbaa !14
  %8 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 0, i32 noundef %7) #43
  %9 = load ptr, ptr %0, align 8, !tbaa !13
  %10 = icmp eq ptr %9, null
  br i1 %10, label %266, label %263

11:                                               ; preds = %1
  %12 = getelementptr inbounds ptr, ptr %0, i64 3
  %13 = load ptr, ptr %12, align 8, !tbaa !13
  %14 = icmp eq ptr %13, null
  br i1 %14, label %15, label %23

15:                                               ; preds = %11
  %16 = load i32, ptr @cube, align 8, !tbaa !14
  %17 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 1, i32 noundef %16) #43
  %18 = load ptr, ptr %3, align 8, !tbaa !13
  %19 = tail call ptr (ptr, ptr, ptr, ...) @set_or(ptr noundef %2, ptr noundef %2, ptr noundef %18) #43
  %20 = tail call ptr (ptr, ptr, ...) @sf_addset(ptr noundef %17, ptr noundef %19) #43
  %21 = load ptr, ptr %0, align 8, !tbaa !13
  %22 = icmp eq ptr %21, null
  br i1 %22, label %266, label %263

23:                                               ; preds = %27, %11
  %24 = phi ptr [ %28, %27 ], [ %3, %11 ]
  %25 = load ptr, ptr %24, align 8, !tbaa !13
  %26 = icmp eq ptr %25, null
  br i1 %26, label %38, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds ptr, ptr %24, i64 1
  %29 = tail call i32 (ptr, ptr, ...) @full_row(ptr noundef nonnull %25, ptr noundef %2) #43
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %23, label %31

31:                                               ; preds = %27
  %32 = load i32, ptr @cube, align 8, !tbaa !14
  %33 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 1, i32 noundef %32) #43
  %34 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %35 = tail call ptr (ptr, ptr, ...) @sf_addset(ptr noundef %33, ptr noundef %34) #43
  %36 = load ptr, ptr %0, align 8, !tbaa !13
  %37 = icmp eq ptr %36, null
  br i1 %37, label %266, label %263

38:                                               ; preds = %23
  %39 = load i32, ptr %2, align 4, !tbaa !16
  %40 = shl i32 %39, 5
  %41 = and i32 %40, 32736
  %42 = icmp ult i32 %41, 33
  %43 = add nsw i32 %41, -1
  %44 = lshr i32 %43, 3
  %45 = and i32 %44, 536870908
  %46 = add nuw nsw i32 %45, 8
  %47 = select i1 %42, i32 8, i32 %46
  %48 = zext i32 %47 to i64
  %49 = tail call noalias ptr @malloc(i64 noundef %48) #42
  %50 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %49, ptr noundef nonnull %2) #43
  %51 = load ptr, ptr %3, align 8, !tbaa !13
  %52 = icmp eq ptr %51, null
  br i1 %52, label %72, label %57

53:                                               ; preds = %63
  %54 = getelementptr inbounds ptr, ptr %59, i64 1
  %55 = load ptr, ptr %59, align 8, !tbaa !13
  %56 = icmp eq ptr %55, null
  br i1 %56, label %72, label %57

57:                                               ; preds = %53, %38
  %58 = phi ptr [ %55, %53 ], [ %51, %38 ]
  %59 = phi ptr [ %54, %53 ], [ %12, %38 ]
  %60 = load i32, ptr %50, align 4, !tbaa !16
  %61 = and i32 %60, 1023
  %62 = zext i32 %61 to i64
  br label %63

63:                                               ; preds = %63, %57
  %64 = phi i64 [ %70, %63 ], [ %62, %57 ]
  %65 = getelementptr inbounds i32, ptr %50, i64 %64
  %66 = load i32, ptr %65, align 4, !tbaa !16
  %67 = getelementptr inbounds i32, ptr %58, i64 %64
  %68 = load i32, ptr %67, align 4, !tbaa !16
  %69 = or i32 %68, %66
  store i32 %69, ptr %65, align 4, !tbaa !16
  %70 = add nsw i64 %64, -1
  %71 = icmp ugt i64 %64, 1
  br i1 %71, label %63, label %53

72:                                               ; preds = %53, %38
  %73 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %74 = tail call i32 (ptr, ptr, ...) @setp_equal(ptr noundef %50, ptr noundef %73) #43
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %76, label %124

76:                                               ; preds = %72
  %77 = load i32, ptr @cube, align 8, !tbaa !14
  %78 = icmp slt i32 %77, 33
  %79 = add nsw i32 %77, -1
  %80 = lshr i32 %79, 3
  %81 = and i32 %80, 536870908
  %82 = add nuw nsw i32 %81, 8
  %83 = select i1 %78, i32 8, i32 %82
  %84 = zext i32 %83 to i64
  %85 = tail call noalias ptr @malloc(i64 noundef %84) #42
  %86 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %85, i32 noundef %77) #43
  %87 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %88 = tail call ptr (ptr, ptr, ptr, ...) @set_diff(ptr noundef %86, ptr noundef %87, ptr noundef %50) #43
  %89 = tail call ptr (ptr, ptr, ptr, ...) @set_or(ptr noundef nonnull %2, ptr noundef nonnull %2, ptr noundef %86) #43
  %90 = icmp eq ptr %86, null
  br i1 %90, label %92, label %91

91:                                               ; preds = %76
  tail call void @free(ptr noundef nonnull %86) #43
  br label %92

92:                                               ; preds = %91, %76
  %93 = tail call ptr @primes_consensus(ptr noundef nonnull %0) #44
  %94 = getelementptr inbounds %struct.set_family, ptr %93, i64 0, i32 5
  %95 = load ptr, ptr %94, align 8, !tbaa !33
  %96 = getelementptr inbounds %struct.set_family, ptr %93, i64 0, i32 3
  %97 = load i32, ptr %96, align 4, !tbaa !31
  %98 = load i32, ptr %93, align 8, !tbaa !34
  %99 = mul nsw i32 %98, %97
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds i32, ptr %95, i64 %100
  %102 = icmp sgt i32 %99, 0
  br i1 %102, label %103, label %122

103:                                              ; preds = %117, %92
  %104 = phi ptr [ %120, %117 ], [ %95, %92 ]
  %105 = load i32, ptr %104, align 4, !tbaa !16
  %106 = and i32 %105, 1023
  %107 = zext i32 %106 to i64
  br label %108

108:                                              ; preds = %108, %103
  %109 = phi i64 [ %115, %108 ], [ %107, %103 ]
  %110 = getelementptr inbounds i32, ptr %104, i64 %109
  %111 = load i32, ptr %110, align 4, !tbaa !16
  %112 = getelementptr inbounds i32, ptr %50, i64 %109
  %113 = load i32, ptr %112, align 4, !tbaa !16
  %114 = and i32 %113, %111
  store i32 %114, ptr %110, align 4, !tbaa !16
  %115 = add nsw i64 %109, -1
  %116 = icmp ugt i64 %109, 1
  br i1 %116, label %108, label %117

117:                                              ; preds = %108
  %118 = load i32, ptr %93, align 8, !tbaa !34
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds i32, ptr %104, i64 %119
  %121 = icmp ult ptr %120, %101
  br i1 %121, label %103, label %266

122:                                              ; preds = %92
  %123 = icmp eq ptr %50, null
  br i1 %123, label %269, label %266

124:                                              ; preds = %72
  %125 = icmp eq ptr %50, null
  br i1 %125, label %127, label %126

126:                                              ; preds = %124
  tail call void @free(ptr noundef nonnull %50) #43
  br label %127

127:                                              ; preds = %126, %124
  tail call void (ptr, ...) @massive_count(ptr noundef nonnull %0) #43
  %128 = load i32, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 4), align 8, !tbaa !22
  %129 = icmp eq i32 %128, 1
  br i1 %129, label %130, label %137

130:                                              ; preds = %127
  %131 = load i32, ptr @cube, align 8, !tbaa !14
  %132 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 1, i32 noundef %131) #43
  %133 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %134 = tail call ptr (ptr, ptr, ...) @sf_addset(ptr noundef %132, ptr noundef %133) #43
  %135 = load ptr, ptr %0, align 8, !tbaa !13
  %136 = icmp eq ptr %135, null
  br i1 %136, label %266, label %263

137:                                              ; preds = %127
  %138 = load i32, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 5), align 4, !tbaa !23
  %139 = icmp eq i32 %138, %128
  br i1 %139, label %140, label %145

140:                                              ; preds = %137
  %141 = tail call ptr (ptr, ...) @cubeunlist(ptr noundef nonnull %0) #43
  %142 = tail call ptr (ptr, ...) @sf_contain(ptr noundef %141) #43
  %143 = load ptr, ptr %0, align 8, !tbaa !13
  %144 = icmp eq ptr %143, null
  br i1 %144, label %266, label %263

145:                                              ; preds = %137
  %146 = load i32, ptr @cube, align 8, !tbaa !14
  %147 = icmp slt i32 %146, 33
  %148 = add nsw i32 %146, -1
  %149 = lshr i32 %148, 3
  %150 = and i32 %149, 536870908
  %151 = add nuw nsw i32 %150, 8
  %152 = select i1 %147, i32 8, i32 %151
  %153 = zext i32 %152 to i64
  %154 = tail call noalias ptr @malloc(i64 noundef %153) #42
  %155 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %154, i32 noundef %146) #43
  %156 = load i32, ptr @cube, align 8, !tbaa !14
  %157 = icmp slt i32 %156, 33
  %158 = add nsw i32 %156, -1
  %159 = lshr i32 %158, 3
  %160 = and i32 %159, 536870908
  %161 = add nuw nsw i32 %160, 8
  %162 = select i1 %157, i32 8, i32 %161
  %163 = zext i32 %162 to i64
  %164 = tail call noalias ptr @malloc(i64 noundef %163) #42
  %165 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %164, i32 noundef %156) #43
  %166 = tail call i32 (ptr, ptr, ptr, i32, ...) @binate_split_select(ptr noundef nonnull %0, ptr noundef %155, ptr noundef %165, i32 noundef 1) #43
  %167 = tail call ptr (ptr, ptr, i32, ...) @scofactor(ptr noundef nonnull %0, ptr noundef %155, i32 noundef %166) #43
  %168 = tail call ptr @primes_consensus(ptr noundef %167) #44
  %169 = tail call ptr (ptr, ptr, i32, ...) @scofactor(ptr noundef nonnull %0, ptr noundef %165, i32 noundef %166) #43
  %170 = tail call ptr @primes_consensus(ptr noundef %169) #44
  %171 = tail call fastcc ptr @and_with_cofactor(ptr noundef %168, ptr noundef %155) #44
  %172 = tail call fastcc ptr @and_with_cofactor(ptr noundef %170, ptr noundef %165) #44
  %173 = getelementptr inbounds %struct.set_family, ptr %171, i64 0, i32 1
  %174 = load i32, ptr %173, align 4, !tbaa !44
  %175 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 500, i32 noundef %174) #43
  %176 = getelementptr inbounds %struct.set_family, ptr %175, i64 0, i32 5
  %177 = load ptr, ptr %176, align 8, !tbaa !33
  %178 = tail call ptr (ptr, ptr, ...) @sf_join(ptr noundef %171, ptr noundef %172) #43
  %179 = tail call ptr (ptr, ...) @sf_contain(ptr noundef %178) #43
  %180 = getelementptr inbounds %struct.set_family, ptr %171, i64 0, i32 5
  %181 = load ptr, ptr %180, align 8, !tbaa !33
  %182 = getelementptr inbounds %struct.set_family, ptr %171, i64 0, i32 3
  %183 = load i32, ptr %182, align 4, !tbaa !31
  %184 = load i32, ptr %171, align 8, !tbaa !34
  %185 = mul nsw i32 %184, %183
  %186 = sext i32 %185 to i64
  %187 = getelementptr inbounds i32, ptr %181, i64 %186
  %188 = icmp sgt i32 %185, 0
  br i1 %188, label %189, label %250

189:                                              ; preds = %145
  %190 = getelementptr inbounds %struct.set_family, ptr %172, i64 0, i32 5
  %191 = getelementptr inbounds %struct.set_family, ptr %172, i64 0, i32 3
  %192 = load i32, ptr %172, align 8, !tbaa !34
  br label %193

193:                                              ; preds = %241, %189
  %194 = phi i32 [ %184, %189 ], [ %242, %241 ]
  %195 = phi i32 [ %192, %189 ], [ %243, %241 ]
  %196 = phi ptr [ %179, %189 ], [ %246, %241 ]
  %197 = phi ptr [ %175, %189 ], [ %245, %241 ]
  %198 = phi ptr [ %177, %189 ], [ %244, %241 ]
  %199 = phi ptr [ %181, %189 ], [ %248, %241 ]
  %200 = load ptr, ptr %190, align 8, !tbaa !33
  %201 = load i32, ptr %191, align 4, !tbaa !31
  %202 = mul nsw i32 %201, %195
  %203 = sext i32 %202 to i64
  %204 = getelementptr inbounds i32, ptr %200, i64 %203
  %205 = icmp sgt i32 %202, 0
  br i1 %205, label %206, label %241

206:                                              ; preds = %231, %193
  %207 = phi ptr [ %234, %231 ], [ %196, %193 ]
  %208 = phi ptr [ %233, %231 ], [ %197, %193 ]
  %209 = phi ptr [ %232, %231 ], [ %198, %193 ]
  %210 = phi ptr [ %237, %231 ], [ %200, %193 ]
  %211 = tail call i32 (ptr, ptr, ...) @cdist01(ptr noundef %199, ptr noundef %210) #43
  %212 = icmp eq i32 %211, 1
  br i1 %212, label %213, label %231

213:                                              ; preds = %206
  tail call void (ptr, ptr, ptr, ...) @consensus(ptr noundef %209, ptr noundef %199, ptr noundef %210) #43
  %214 = getelementptr inbounds %struct.set_family, ptr %208, i64 0, i32 3
  %215 = load i32, ptr %214, align 4, !tbaa !31
  %216 = add nsw i32 %215, 1
  store i32 %216, ptr %214, align 4, !tbaa !31
  %217 = getelementptr inbounds %struct.set_family, ptr %208, i64 0, i32 2
  %218 = load i32, ptr %217, align 8, !tbaa !157
  %219 = icmp slt i32 %216, %218
  br i1 %219, label %227, label %220

220:                                              ; preds = %213
  %221 = tail call ptr (ptr, ...) @sf_contain(ptr noundef nonnull %208) #43
  %222 = tail call ptr (ptr, ptr, ...) @sf_union(ptr noundef %207, ptr noundef %221) #43
  %223 = load i32, ptr %173, align 4, !tbaa !44
  %224 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 500, i32 noundef %223) #43
  %225 = getelementptr inbounds %struct.set_family, ptr %224, i64 0, i32 5
  %226 = load ptr, ptr %225, align 8, !tbaa !33
  br label %231

227:                                              ; preds = %213
  %228 = load i32, ptr %208, align 8, !tbaa !34
  %229 = sext i32 %228 to i64
  %230 = getelementptr inbounds i32, ptr %209, i64 %229
  br label %231

231:                                              ; preds = %227, %220, %206
  %232 = phi ptr [ %226, %220 ], [ %230, %227 ], [ %209, %206 ]
  %233 = phi ptr [ %224, %220 ], [ %208, %227 ], [ %208, %206 ]
  %234 = phi ptr [ %222, %220 ], [ %207, %227 ], [ %207, %206 ]
  %235 = load i32, ptr %172, align 8, !tbaa !34
  %236 = sext i32 %235 to i64
  %237 = getelementptr inbounds i32, ptr %210, i64 %236
  %238 = icmp ult ptr %237, %204
  br i1 %238, label %206, label %239

239:                                              ; preds = %231
  %.lcssa3 = phi ptr [ %232, %231 ]
  %.lcssa2 = phi ptr [ %233, %231 ]
  %.lcssa1 = phi ptr [ %234, %231 ]
  %.lcssa = phi i32 [ %235, %231 ]
  %240 = load i32, ptr %171, align 8, !tbaa !34
  br label %241

241:                                              ; preds = %239, %193
  %242 = phi i32 [ %194, %193 ], [ %240, %239 ]
  %243 = phi i32 [ %195, %193 ], [ %.lcssa, %239 ]
  %244 = phi ptr [ %198, %193 ], [ %.lcssa3, %239 ]
  %245 = phi ptr [ %197, %193 ], [ %.lcssa2, %239 ]
  %246 = phi ptr [ %196, %193 ], [ %.lcssa1, %239 ]
  %247 = sext i32 %242 to i64
  %248 = getelementptr inbounds i32, ptr %199, i64 %247
  %249 = icmp ult ptr %248, %187
  br i1 %249, label %193, label %250

250:                                              ; preds = %241, %145
  %251 = phi ptr [ %175, %145 ], [ %245, %241 ]
  %252 = phi ptr [ %179, %145 ], [ %246, %241 ]
  tail call void (ptr, ...) @sf_free(ptr noundef nonnull %171) #43
  tail call void (ptr, ...) @sf_free(ptr noundef %172) #43
  %253 = tail call ptr (ptr, ...) @sf_contain(ptr noundef %251) #43
  %254 = tail call ptr (ptr, ptr, ...) @sf_union(ptr noundef %252, ptr noundef %253) #43
  %255 = icmp eq ptr %155, null
  br i1 %255, label %257, label %256

256:                                              ; preds = %250
  tail call void @free(ptr noundef nonnull %155) #43
  br label %257

257:                                              ; preds = %256, %250
  %258 = icmp eq ptr %165, null
  br i1 %258, label %260, label %259

259:                                              ; preds = %257
  tail call void @free(ptr noundef nonnull %165) #43
  br label %260

260:                                              ; preds = %259, %257
  %261 = load ptr, ptr %0, align 8, !tbaa !13
  %262 = icmp eq ptr %261, null
  br i1 %262, label %266, label %263

263:                                              ; preds = %260, %140, %130, %31, %15, %6
  %264 = phi ptr [ %9, %6 ], [ %21, %15 ], [ %36, %31 ], [ %135, %130 ], [ %143, %140 ], [ %261, %260 ]
  %265 = phi ptr [ %8, %6 ], [ %20, %15 ], [ %35, %31 ], [ %134, %130 ], [ %142, %140 ], [ %254, %260 ]
  tail call void @free(ptr noundef nonnull %264) #43
  br label %266

266:                                              ; preds = %263, %260, %140, %130, %122, %117, %31, %15, %6
  %267 = phi ptr [ %0, %6 ], [ %0, %15 ], [ %0, %31 ], [ %50, %122 ], [ %0, %130 ], [ %0, %140 ], [ %0, %260 ], [ %0, %263 ], [ %50, %117 ]
  %268 = phi ptr [ %8, %6 ], [ %20, %15 ], [ %35, %31 ], [ %93, %122 ], [ %134, %130 ], [ %142, %140 ], [ %254, %260 ], [ %265, %263 ], [ %93, %117 ]
  tail call void @free(ptr noundef nonnull %267) #43
  br label %269

269:                                              ; preds = %266, %122
  %270 = phi ptr [ %93, %122 ], [ %268, %266 ]
  ret ptr %270
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc ptr @and_with_cofactor(ptr noundef %0, ptr nocapture noundef readonly %1) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %4 = load ptr, ptr %3, align 8, !tbaa !33
  %5 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %6 = load i32, ptr %5, align 4, !tbaa !31
  %7 = load i32, ptr %0, align 8, !tbaa !34
  %8 = mul nsw i32 %7, %6
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds i32, ptr %4, i64 %9
  %11 = icmp sgt i32 %8, 0
  br i1 %11, label %12, label %38

12:                                               ; preds = %26, %2
  %13 = phi ptr [ %36, %26 ], [ %4, %2 ]
  %14 = load i32, ptr %13, align 4, !tbaa !16
  %15 = and i32 %14, 1023
  %16 = zext i32 %15 to i64
  br label %17

17:                                               ; preds = %17, %12
  %18 = phi i64 [ %24, %17 ], [ %16, %12 ]
  %19 = getelementptr inbounds i32, ptr %13, i64 %18
  %20 = load i32, ptr %19, align 4, !tbaa !16
  %21 = getelementptr inbounds i32, ptr %1, i64 %18
  %22 = load i32, ptr %21, align 4, !tbaa !16
  %23 = and i32 %22, %20
  store i32 %23, ptr %19, align 4, !tbaa !16
  %24 = add nsw i64 %18, -1
  %25 = icmp ugt i64 %18, 1
  br i1 %25, label %17, label %26

26:                                               ; preds = %17
  %27 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %28 = tail call i32 (ptr, ptr, ...) @cdist(ptr noundef nonnull %13, ptr noundef %27) #43
  %29 = icmp sgt i32 %28, 0
  %30 = load i32, ptr %13, align 4, !tbaa !16
  %31 = and i32 %30, -8193
  %32 = select i1 %29, i32 0, i32 8192
  %33 = or i32 %31, %32
  store i32 %33, ptr %13, align 4, !tbaa !16
  %34 = load i32, ptr %0, align 8, !tbaa !34
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds i32, ptr %13, i64 %35
  %37 = icmp ult ptr %36, %10
  br i1 %37, label %12, label %38

38:                                               ; preds = %26, %2
  %39 = tail call ptr (ptr, ...) @sf_inactive(ptr noundef nonnull %0) #43
  ret ptr %39
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @reduce(ptr noundef %0, ptr noundef %1) #0 {
  %3 = load i32, ptr @use_random_order, align 4, !tbaa !16
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %7, label %5

5:                                                ; preds = %2
  %6 = tail call ptr (ptr, ...) @random_order(ptr noundef %0) #43
  br label %19

7:                                                ; preds = %2
  %8 = load i32, ptr @toggle, align 4, !tbaa !16
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %12, label %10

10:                                               ; preds = %7
  %11 = tail call ptr (ptr, ...) @sort_reduce(ptr noundef %0) #43
  br label %14

12:                                               ; preds = %7
  %13 = tail call ptr (ptr, ptr, ...) @mini_sort(ptr noundef %0, ptr noundef nonnull @descend) #43
  br label %14

14:                                               ; preds = %12, %10
  %15 = phi ptr [ %11, %10 ], [ %13, %12 ]
  %16 = load i32, ptr @toggle, align 4, !tbaa !16
  %17 = icmp eq i32 %16, 0
  %18 = zext i1 %17 to i32
  store i32 %18, ptr @toggle, align 4, !tbaa !16
  br label %19

19:                                               ; preds = %14, %5
  %20 = phi ptr [ %6, %5 ], [ %15, %14 ]
  %21 = tail call ptr (ptr, ptr, ...) @cube2list(ptr noundef %20, ptr noundef %1) #43
  %22 = getelementptr inbounds %struct.set_family, ptr %20, i64 0, i32 5
  %23 = load ptr, ptr %22, align 8, !tbaa !33
  %24 = getelementptr inbounds %struct.set_family, ptr %20, i64 0, i32 3
  %25 = load i32, ptr %24, align 4, !tbaa !31
  %26 = load i32, ptr %20, align 8, !tbaa !34
  %27 = mul nsw i32 %26, %25
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds i32, ptr %23, i64 %28
  %30 = icmp sgt i32 %27, 0
  br i1 %30, label %31, label %71

31:                                               ; preds = %66, %19
  %32 = phi ptr [ %69, %66 ], [ %23, %19 ]
  %33 = tail call ptr (ptr, ptr, ...) @cofactor(ptr noundef %21, ptr noundef %32) #43
  %34 = tail call ptr @sccc(ptr noundef %33) #44
  %35 = tail call ptr (ptr, ptr, ptr, ...) @set_and(ptr noundef %34, ptr noundef %34, ptr noundef %32) #43
  %36 = tail call i32 (ptr, ptr, ...) @setp_equal(ptr noundef %35, ptr noundef %32) #43
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %31
  %39 = load i32, ptr %32, align 4, !tbaa !16
  %40 = or i32 %39, 40960
  br label %62

41:                                               ; preds = %31
  %42 = load i32, ptr @debug, align 4, !tbaa !16
  %43 = and i32 %42, 64
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %51, label %45

45:                                               ; preds = %41
  %46 = tail call ptr (ptr, ...) @pc1(ptr noundef %32) #43
  %47 = tail call ptr (ptr, ...) @pc2(ptr noundef %35) #43
  %48 = tail call i64 (...) @util_cpu_time() #43
  %49 = tail call ptr @util_print_time(i64 noundef %48) #43
  %50 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.422, ptr noundef %46, ptr noundef %47, ptr noundef %49) #44
  br label %51

51:                                               ; preds = %45, %41
  %52 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %32, ptr noundef %35) #43
  %53 = load i32, ptr %32, align 4, !tbaa !16
  %54 = and i32 %53, -32769
  store i32 %54, ptr %32, align 4, !tbaa !16
  %55 = tail call i32 (ptr, ...) @setp_empty(ptr noundef %35) #43
  %56 = icmp eq i32 %55, 0
  %57 = load i32, ptr %32, align 4, !tbaa !16
  br i1 %56, label %60, label %58

58:                                               ; preds = %51
  %59 = and i32 %57, -8193
  br label %62

60:                                               ; preds = %51
  %61 = or i32 %57, 8192
  br label %62

62:                                               ; preds = %60, %58, %38
  %63 = phi i32 [ %59, %58 ], [ %61, %60 ], [ %40, %38 ]
  store i32 %63, ptr %32, align 4, !tbaa !16
  %64 = icmp eq ptr %35, null
  br i1 %64, label %66, label %65

65:                                               ; preds = %62
  tail call void @free(ptr noundef nonnull %35) #43
  br label %66

66:                                               ; preds = %65, %62
  %67 = load i32, ptr %20, align 8, !tbaa !34
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i32, ptr %32, i64 %68
  %70 = icmp ult ptr %69, %29
  br i1 %70, label %31, label %71

71:                                               ; preds = %66, %19
  %72 = load ptr, ptr %21, align 8, !tbaa !13
  %73 = icmp eq ptr %72, null
  br i1 %73, label %75, label %74

74:                                               ; preds = %71
  tail call void @free(ptr noundef nonnull %72) #43
  br label %75

75:                                               ; preds = %74, %71
  tail call void @free(ptr noundef nonnull %21) #43
  %76 = tail call ptr (ptr, ...) @sf_inactive(ptr noundef nonnull %20) #43
  ret ptr %76
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @sccc(ptr noundef %0) #0 {
  %2 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #45
  %3 = load i32, ptr @debug, align 4, !tbaa !16
  %4 = and i32 %3, 128
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, ptr @sccc.sccc_level, align 4, !tbaa !16
  %8 = add nsw i32 %7, 1
  store i32 %8, ptr @sccc.sccc_level, align 4, !tbaa !16
  tail call void (ptr, ptr, i32, ...) @debug_print(ptr noundef %0, ptr noundef nonnull @.str.1.423, i32 noundef %7) #43
  br label %9

9:                                                ; preds = %6, %1
  %10 = call i32 @sccc_special_cases(ptr noundef %0, ptr noundef nonnull %2) #44, !range !158
  %11 = icmp eq i32 %10, 2
  br i1 %11, label %14, label %12

12:                                               ; preds = %9
  %13 = load ptr, ptr %2, align 8, !tbaa !13
  br label %45

14:                                               ; preds = %9
  %15 = load i32, ptr @cube, align 8, !tbaa !14
  %16 = icmp slt i32 %15, 33
  %17 = add nsw i32 %15, -1
  %18 = lshr i32 %17, 3
  %19 = and i32 %18, 536870908
  %20 = add nuw nsw i32 %19, 8
  %21 = select i1 %16, i32 8, i32 %20
  %22 = zext i32 %21 to i64
  %23 = tail call noalias ptr @malloc(i64 noundef %22) #42
  %24 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %23, i32 noundef %15) #43
  %25 = load i32, ptr @cube, align 8, !tbaa !14
  %26 = icmp slt i32 %25, 33
  %27 = add nsw i32 %25, -1
  %28 = lshr i32 %27, 3
  %29 = and i32 %28, 536870908
  %30 = add nuw nsw i32 %29, 8
  %31 = select i1 %26, i32 8, i32 %30
  %32 = zext i32 %31 to i64
  %33 = tail call noalias ptr @malloc(i64 noundef %32) #42
  %34 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %33, i32 noundef %25) #43
  %35 = tail call i32 (ptr, ptr, ptr, i32, ...) @binate_split_select(ptr noundef %0, ptr noundef %24, ptr noundef %34, i32 noundef 128) #43
  %36 = tail call ptr (ptr, ptr, i32, ...) @scofactor(ptr noundef %0, ptr noundef %24, i32 noundef %35) #43
  %37 = tail call ptr @sccc(ptr noundef %36) #44
  %38 = tail call ptr (ptr, ptr, i32, ...) @scofactor(ptr noundef %0, ptr noundef %34, i32 noundef %35) #43
  %39 = tail call ptr @sccc(ptr noundef %38) #44
  %40 = tail call ptr @sccc_merge(ptr noundef %37, ptr noundef %39, ptr noundef %24, ptr noundef %34) #44
  %41 = load ptr, ptr %0, align 8, !tbaa !13
  %42 = icmp eq ptr %41, null
  br i1 %42, label %44, label %43

43:                                               ; preds = %14
  tail call void @free(ptr noundef nonnull %41) #43
  br label %44

44:                                               ; preds = %43, %14
  tail call void @free(ptr noundef nonnull %0) #43
  br label %45

45:                                               ; preds = %44, %12
  %46 = phi ptr [ %13, %12 ], [ %37, %44 ]
  %47 = load i32, ptr @debug, align 4, !tbaa !16
  %48 = and i32 %47, 128
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %55, label %50

50:                                               ; preds = %45
  %51 = load i32, ptr @sccc.sccc_level, align 4, !tbaa !16
  %52 = add nsw i32 %51, -1
  store i32 %52, ptr @sccc.sccc_level, align 4, !tbaa !16
  %53 = tail call ptr (ptr, ...) @pc1(ptr noundef %46) #43
  %54 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.424, i32 noundef %52, ptr noundef %53) #44
  br label %55

55:                                               ; preds = %50, %45
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #45
  ret ptr %46
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @sccc_special_cases(ptr noundef %0, ptr nocapture noundef %1) #0 {
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 11), align 8, !tbaa !7
  %6 = getelementptr inbounds ptr, ptr %5, i64 1
  %7 = load ptr, ptr %6, align 8, !tbaa !13
  %8 = load ptr, ptr %0, align 8, !tbaa !13
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #45
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #45
  %9 = getelementptr inbounds ptr, ptr %0, i64 2
  %10 = load ptr, ptr %9, align 8, !tbaa !13
  %11 = icmp eq ptr %10, null
  br i1 %11, label %12, label %34

12:                                               ; preds = %2
  %13 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %14 = load i32, ptr %13, align 4, !tbaa !16
  %15 = shl i32 %14, 5
  %16 = and i32 %15, 32736
  %17 = icmp ult i32 %16, 33
  %18 = add nsw i32 %16, -1
  %19 = lshr i32 %18, 3
  %20 = and i32 %19, 536870908
  %21 = add nuw nsw i32 %20, 8
  %22 = select i1 %17, i32 8, i32 %21
  %23 = zext i32 %22 to i64
  %24 = tail call noalias ptr @malloc(i64 noundef %23) #42
  %25 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %24, ptr noundef nonnull %13) #43
  store ptr %25, ptr %1, align 8, !tbaa !13
  %26 = load ptr, ptr %0, align 8, !tbaa !13
  %27 = icmp eq ptr %26, null
  br i1 %27, label %29, label %28

28:                                               ; preds = %12
  tail call void @free(ptr noundef nonnull %26) #43
  br label %29

29:                                               ; preds = %28, %12
  tail call void @free(ptr noundef nonnull %0) #43
  br label %229

30:                                               ; preds = %34
  %31 = getelementptr inbounds ptr, ptr %35, i64 1
  %32 = load ptr, ptr %31, align 8, !tbaa !13
  %33 = icmp eq ptr %32, null
  br i1 %33, label %54, label %34

34:                                               ; preds = %30, %2
  %35 = phi ptr [ %31, %30 ], [ %9, %2 ]
  %36 = phi ptr [ %32, %30 ], [ %10, %2 ]
  %37 = tail call i32 (ptr, ptr, ...) @full_row(ptr noundef nonnull %36, ptr noundef %8) #43
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %30, label %39

39:                                               ; preds = %34
  %40 = load i32, ptr @cube, align 8, !tbaa !14
  %41 = icmp slt i32 %40, 33
  %42 = add nsw i32 %40, -1
  %43 = lshr i32 %42, 3
  %44 = and i32 %43, 536870908
  %45 = add nuw nsw i32 %44, 8
  %46 = select i1 %41, i32 8, i32 %45
  %47 = zext i32 %46 to i64
  %48 = tail call noalias ptr @malloc(i64 noundef %47) #42
  %49 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %48, i32 noundef %40) #43
  store ptr %49, ptr %1, align 8, !tbaa !13
  %50 = load ptr, ptr %0, align 8, !tbaa !13
  %51 = icmp eq ptr %50, null
  br i1 %51, label %53, label %52

52:                                               ; preds = %39
  tail call void @free(ptr noundef nonnull %50) #43
  br label %53

53:                                               ; preds = %52, %39
  tail call void @free(ptr noundef nonnull %0) #43
  br label %229

54:                                               ; preds = %30
  tail call void (ptr, ...) @massive_count(ptr noundef nonnull %0) #43
  %55 = load i32, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 5), align 4, !tbaa !23
  %56 = load i32, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 4), align 8, !tbaa !22
  %57 = icmp eq i32 %55, %56
  br i1 %57, label %62, label %58

58:                                               ; preds = %54
  %59 = getelementptr inbounds ptr, ptr %0, i64 3
  %60 = load ptr, ptr %59, align 8, !tbaa !13
  %61 = icmp eq ptr %60, null
  br i1 %61, label %62, label %92

62:                                               ; preds = %58, %54
  %63 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %64 = load i32, ptr %63, align 4, !tbaa !16
  %65 = shl i32 %64, 5
  %66 = and i32 %65, 32736
  %67 = icmp ult i32 %66, 33
  %68 = add nsw i32 %66, -1
  %69 = lshr i32 %68, 3
  %70 = and i32 %69, 536870908
  %71 = add nuw nsw i32 %70, 8
  %72 = select i1 %67, i32 8, i32 %71
  %73 = zext i32 %72 to i64
  %74 = tail call noalias ptr @malloc(i64 noundef %73) #42
  %75 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %74, ptr noundef nonnull %63) #43
  store ptr %75, ptr %1, align 8, !tbaa !13
  %76 = load ptr, ptr %9, align 8, !tbaa !13
  %77 = icmp eq ptr %76, null
  br i1 %77, label %87, label %78

78:                                               ; preds = %78, %62
  %79 = phi ptr [ %85, %78 ], [ %76, %62 ]
  %80 = phi ptr [ %81, %78 ], [ %9, %62 ]
  %81 = getelementptr inbounds ptr, ptr %80, i64 1
  %82 = load ptr, ptr %1, align 8, !tbaa !13
  %83 = tail call ptr (ptr, ptr, ptr, ...) @set_or(ptr noundef %7, ptr noundef nonnull %79, ptr noundef %8) #43
  %84 = tail call ptr @sccc_cube(ptr noundef %82, ptr noundef %83) #44
  %85 = load ptr, ptr %81, align 8, !tbaa !13
  %86 = icmp eq ptr %85, null
  br i1 %86, label %87, label %78

87:                                               ; preds = %78, %62
  %88 = load ptr, ptr %0, align 8, !tbaa !13
  %89 = icmp eq ptr %88, null
  br i1 %89, label %91, label %90

90:                                               ; preds = %87
  tail call void @free(ptr noundef nonnull %88) #43
  br label %91

91:                                               ; preds = %90, %87
  tail call void @free(ptr noundef nonnull %0) #43
  br label %229

92:                                               ; preds = %58
  %93 = load i32, ptr %8, align 4, !tbaa !16
  %94 = shl i32 %93, 5
  %95 = and i32 %94, 32736
  %96 = icmp ult i32 %95, 33
  %97 = add nsw i32 %95, -1
  %98 = lshr i32 %97, 3
  %99 = and i32 %98, 536870908
  %100 = add nuw nsw i32 %99, 8
  %101 = select i1 %96, i32 8, i32 %100
  %102 = zext i32 %101 to i64
  %103 = tail call noalias ptr @malloc(i64 noundef %102) #42
  %104 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %103, ptr noundef nonnull %8) #43
  %105 = load ptr, ptr %9, align 8, !tbaa !13
  %106 = icmp eq ptr %105, null
  br i1 %106, label %126, label %111

107:                                              ; preds = %117
  %108 = getelementptr inbounds ptr, ptr %113, i64 1
  %109 = load ptr, ptr %113, align 8, !tbaa !13
  %110 = icmp eq ptr %109, null
  br i1 %110, label %126, label %111

111:                                              ; preds = %107, %92
  %112 = phi ptr [ %109, %107 ], [ %105, %92 ]
  %113 = phi ptr [ %108, %107 ], [ %59, %92 ]
  %114 = load i32, ptr %104, align 4, !tbaa !16
  %115 = and i32 %114, 1023
  %116 = zext i32 %115 to i64
  br label %117

117:                                              ; preds = %117, %111
  %118 = phi i64 [ %124, %117 ], [ %116, %111 ]
  %119 = getelementptr inbounds i32, ptr %104, i64 %118
  %120 = load i32, ptr %119, align 4, !tbaa !16
  %121 = getelementptr inbounds i32, ptr %112, i64 %118
  %122 = load i32, ptr %121, align 4, !tbaa !16
  %123 = or i32 %122, %120
  store i32 %123, ptr %119, align 4, !tbaa !16
  %124 = add nsw i64 %118, -1
  %125 = icmp ugt i64 %118, 1
  br i1 %125, label %117, label %107

126:                                              ; preds = %107, %92
  %127 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %128 = tail call i32 (ptr, ptr, ...) @setp_equal(ptr noundef %104, ptr noundef %127) #43
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %130, label %174

130:                                              ; preds = %126
  %131 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %132 = load i32, ptr %131, align 4, !tbaa !16
  %133 = shl i32 %132, 5
  %134 = and i32 %133, 32736
  %135 = icmp ult i32 %134, 33
  %136 = add nsw i32 %134, -1
  %137 = lshr i32 %136, 3
  %138 = and i32 %137, 536870908
  %139 = add nuw nsw i32 %138, 8
  %140 = select i1 %135, i32 8, i32 %139
  %141 = zext i32 %140 to i64
  %142 = tail call noalias ptr @malloc(i64 noundef %141) #42
  %143 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %142, ptr noundef nonnull %131) #43
  %144 = tail call ptr @sccc_cube(ptr noundef %143, ptr noundef %104) #44
  store ptr %143, ptr %1, align 8, !tbaa !13
  %145 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %146 = tail call i32 (ptr, ptr, ...) @setp_equal(ptr noundef %143, ptr noundef %145) #43
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %151, label %148

148:                                              ; preds = %130
  %149 = icmp eq ptr %104, null
  br i1 %149, label %169, label %150

150:                                              ; preds = %148
  tail call void @free(ptr noundef nonnull %104) #43
  br label %169

151:                                              ; preds = %130
  %152 = tail call ptr (ptr, ptr, ...) @cofactor(ptr noundef nonnull %0, ptr noundef %104) #43
  %153 = tail call ptr @sccc(ptr noundef %152) #44
  %154 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  %155 = load i32, ptr %154, align 4, !tbaa !16
  %156 = shl i32 %155, 5
  %157 = and i32 %156, 32736
  %158 = icmp ult i32 %157, 33
  %159 = add nsw i32 %157, -1
  %160 = lshr i32 %159, 3
  %161 = and i32 %160, 536870908
  %162 = add nuw nsw i32 %161, 8
  %163 = select i1 %158, i32 8, i32 %162
  %164 = zext i32 %163 to i64
  %165 = tail call noalias ptr @malloc(i64 noundef %164) #42
  %166 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %165, ptr noundef nonnull %154) #43
  %167 = load ptr, ptr %1, align 8, !tbaa !13
  %168 = tail call ptr @sccc_merge(ptr noundef %153, ptr noundef %166, ptr noundef %104, ptr noundef %167) #44
  store ptr %153, ptr %1, align 8, !tbaa !13
  br label %169

169:                                              ; preds = %151, %150, %148
  %170 = load ptr, ptr %0, align 8, !tbaa !13
  %171 = icmp eq ptr %170, null
  br i1 %171, label %173, label %172

172:                                              ; preds = %169
  tail call void @free(ptr noundef nonnull %170) #43
  br label %173

173:                                              ; preds = %172, %169
  tail call void @free(ptr noundef nonnull %0) #43
  br label %229

174:                                              ; preds = %126
  %175 = icmp eq ptr %104, null
  br i1 %175, label %177, label %176

176:                                              ; preds = %174
  tail call void @free(ptr noundef nonnull %104) #43
  br label %177

177:                                              ; preds = %176, %174
  %178 = load i32, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 4), align 8, !tbaa !22
  %179 = icmp eq i32 %178, 1
  br i1 %179, label %180, label %195

180:                                              ; preds = %177
  %181 = load i32, ptr @cube, align 8, !tbaa !14
  %182 = icmp slt i32 %181, 33
  %183 = add nsw i32 %181, -1
  %184 = lshr i32 %183, 3
  %185 = and i32 %184, 536870908
  %186 = add nuw nsw i32 %185, 8
  %187 = select i1 %182, i32 8, i32 %186
  %188 = zext i32 %187 to i64
  %189 = tail call noalias ptr @malloc(i64 noundef %188) #42
  %190 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %189, i32 noundef %181) #43
  store ptr %190, ptr %1, align 8, !tbaa !13
  %191 = load ptr, ptr %0, align 8, !tbaa !13
  %192 = icmp eq ptr %191, null
  br i1 %192, label %194, label %193

193:                                              ; preds = %180
  tail call void @free(ptr noundef nonnull %191) #43
  br label %194

194:                                              ; preds = %193, %180
  tail call void @free(ptr noundef nonnull %0) #43
  br label %229

195:                                              ; preds = %177
  %196 = load ptr, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 1), align 8, !tbaa !53
  %197 = load i32, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 6), align 8, !tbaa !28
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds i32, ptr %196, i64 %198
  %200 = load i32, ptr %199, align 4, !tbaa !16
  %201 = sext i32 %200 to i64
  %202 = getelementptr inbounds ptr, ptr %0, i64 1
  %203 = load ptr, ptr %202, align 8, !tbaa !13
  %204 = ptrtoint ptr %203 to i64
  %205 = ptrtoint ptr %0 to i64
  %206 = sub i64 %204, %205
  %207 = ashr exact i64 %206, 3
  %208 = add nsw i64 %207, -3
  %209 = sdiv i64 %208, 2
  %210 = icmp sgt i64 %209, %201
  br i1 %210, label %211, label %229

211:                                              ; preds = %195
  %212 = load i32, ptr @debug, align 4, !tbaa !16
  %213 = and i32 %212, 128
  %214 = call i32 (ptr, ptr, ptr, i32, ...) @cubelist_partition(ptr noundef nonnull %0, ptr noundef nonnull %3, ptr noundef nonnull %4, i32 noundef %213) #43
  %215 = icmp eq i32 %214, 0
  br i1 %215, label %229, label %216

216:                                              ; preds = %211
  %217 = load ptr, ptr %0, align 8, !tbaa !13
  %218 = icmp eq ptr %217, null
  br i1 %218, label %220, label %219

219:                                              ; preds = %216
  call void @free(ptr noundef nonnull %217) #43
  br label %220

220:                                              ; preds = %219, %216
  call void @free(ptr noundef nonnull %0) #43
  %221 = load ptr, ptr %3, align 8, !tbaa !13
  %222 = call ptr @sccc(ptr noundef %221) #44
  store ptr %222, ptr %1, align 8, !tbaa !13
  %223 = load ptr, ptr %4, align 8, !tbaa !13
  %224 = call ptr @sccc(ptr noundef %223) #44
  %225 = load ptr, ptr %1, align 8, !tbaa !13
  %226 = call ptr (ptr, ptr, ptr, ...) @set_and(ptr noundef %225, ptr noundef %225, ptr noundef %224) #43
  %227 = icmp eq ptr %224, null
  br i1 %227, label %229, label %228

228:                                              ; preds = %220
  call void @free(ptr noundef nonnull %224) #43
  br label %229

229:                                              ; preds = %228, %220, %211, %195, %194, %173, %91, %53, %29
  %230 = phi i32 [ 1, %29 ], [ 1, %53 ], [ 1, %91 ], [ 1, %194 ], [ 1, %173 ], [ 2, %211 ], [ 1, %228 ], [ 1, %220 ], [ 2, %195 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #45
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #45
  ret i32 %230
}

; Function Attrs: nounwind optsize memory(argmem: readwrite, inaccessiblemem: readwrite) uwtable
define internal ptr @sccc_merge(ptr noundef returned %0, ptr nocapture noundef %1, ptr noundef %2, ptr noundef %3) #32 {
  %5 = load i32, ptr %0, align 4, !tbaa !16
  %6 = and i32 %5, 1023
  %7 = zext i32 %6 to i64
  br label %8

8:                                                ; preds = %8, %4
  %9 = phi i64 [ %15, %8 ], [ %7, %4 ]
  %10 = getelementptr inbounds i32, ptr %0, i64 %9
  %11 = load i32, ptr %10, align 4, !tbaa !16
  %12 = getelementptr inbounds i32, ptr %2, i64 %9
  %13 = load i32, ptr %12, align 4, !tbaa !16
  %14 = and i32 %13, %11
  store i32 %14, ptr %10, align 4, !tbaa !16
  %15 = add nsw i64 %9, -1
  %16 = icmp ugt i64 %9, 1
  br i1 %16, label %8, label %17

17:                                               ; preds = %8
  %18 = load i32, ptr %1, align 4, !tbaa !16
  %19 = and i32 %18, 1023
  %20 = zext i32 %19 to i64
  br label %21

21:                                               ; preds = %21, %17
  %22 = phi i64 [ %28, %21 ], [ %20, %17 ]
  %23 = getelementptr inbounds i32, ptr %1, i64 %22
  %24 = load i32, ptr %23, align 4, !tbaa !16
  %25 = getelementptr inbounds i32, ptr %3, i64 %22
  %26 = load i32, ptr %25, align 4, !tbaa !16
  %27 = and i32 %26, %24
  store i32 %27, ptr %23, align 4, !tbaa !16
  %28 = add nsw i64 %22, -1
  %29 = icmp ugt i64 %22, 1
  br i1 %29, label %21, label %30

30:                                               ; preds = %21
  %31 = load i32, ptr %0, align 4, !tbaa !16
  %32 = and i32 %31, 1023
  %33 = zext i32 %32 to i64
  br label %34

34:                                               ; preds = %34, %30
  %35 = phi i64 [ %41, %34 ], [ %33, %30 ]
  %36 = getelementptr inbounds i32, ptr %0, i64 %35
  %37 = load i32, ptr %36, align 4, !tbaa !16
  %38 = getelementptr inbounds i32, ptr %1, i64 %35
  %39 = load i32, ptr %38, align 4, !tbaa !16
  %40 = or i32 %39, %37
  store i32 %40, ptr %36, align 4, !tbaa !16
  %41 = add nsw i64 %35, -1
  %42 = icmp ugt i64 %35, 1
  br i1 %42, label %34, label %43

43:                                               ; preds = %34
  tail call void @free(ptr noundef nonnull %1) #43
  %44 = icmp eq ptr %2, null
  br i1 %44, label %46, label %45

45:                                               ; preds = %43
  tail call void @free(ptr noundef nonnull %2) #43
  br label %46

46:                                               ; preds = %45, %43
  %47 = icmp eq ptr %3, null
  br i1 %47, label %49, label %48

48:                                               ; preds = %46
  tail call void @free(ptr noundef nonnull %3) #43
  br label %49

49:                                               ; preds = %48, %46
  ret ptr %0
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @sccc_cube(ptr noundef returned %0, ptr noundef %1) #0 {
  %3 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 11), align 8, !tbaa !7
  %4 = load ptr, ptr %3, align 8, !tbaa !13
  %5 = tail call i32 (ptr, ...) @cactive(ptr noundef %1) #43
  %6 = icmp sgt i32 %5, -1
  br i1 %6, label %7, label %42

7:                                                ; preds = %2
  %8 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %9 = zext i32 %5 to i64
  %10 = getelementptr inbounds ptr, ptr %8, i64 %9
  %11 = load ptr, ptr %10, align 8, !tbaa !13
  %12 = load i32, ptr %1, align 4, !tbaa !16
  %13 = and i32 %12, 1023
  %14 = load i32, ptr %4, align 4, !tbaa !16
  %15 = and i32 %14, -1024
  %16 = or i32 %15, %13
  store i32 %16, ptr %4, align 4, !tbaa !16
  %17 = and i32 %12, 1023
  %18 = zext i32 %17 to i64
  br label %19

19:                                               ; preds = %19, %7
  %20 = phi i64 [ %27, %19 ], [ %18, %7 ]
  %21 = getelementptr inbounds i32, ptr %1, i64 %20
  %22 = load i32, ptr %21, align 4, !tbaa !16
  %23 = getelementptr inbounds i32, ptr %11, i64 %20
  %24 = load i32, ptr %23, align 4, !tbaa !16
  %25 = xor i32 %24, %22
  %26 = getelementptr inbounds i32, ptr %4, i64 %20
  store i32 %25, ptr %26, align 4, !tbaa !16
  %27 = add nsw i64 %20, -1
  %28 = icmp ugt i64 %20, 1
  br i1 %28, label %19, label %29

29:                                               ; preds = %19
  %30 = load i32, ptr %0, align 4, !tbaa !16
  %31 = and i32 %30, 1023
  %32 = zext i32 %31 to i64
  br label %33

33:                                               ; preds = %33, %29
  %34 = phi i64 [ %40, %33 ], [ %32, %29 ]
  %35 = getelementptr inbounds i32, ptr %0, i64 %34
  %36 = load i32, ptr %35, align 4, !tbaa !16
  %37 = getelementptr inbounds i32, ptr %4, i64 %34
  %38 = load i32, ptr %37, align 4, !tbaa !16
  %39 = and i32 %38, %36
  store i32 %39, ptr %35, align 4, !tbaa !16
  %40 = add nsw i64 %34, -1
  %41 = icmp ugt i64 %34, 1
  br i1 %41, label %33, label %42

42:                                               ; preds = %33, %2
  ret ptr %0
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @reduce_cube(ptr noundef %0, ptr noundef %1) #0 {
  %3 = tail call ptr (ptr, ptr, ...) @cofactor(ptr noundef %0, ptr noundef %1) #43
  %4 = tail call ptr @sccc(ptr noundef %3) #44
  %5 = tail call ptr (ptr, ptr, ptr, ...) @set_and(ptr noundef %4, ptr noundef %4, ptr noundef %1) #43
  ret ptr %5
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write, argmem: none, inaccessiblemem: readwrite) uwtable
define internal noalias ptr @sm_row_alloc() #6 {
  %1 = tail call noalias dereferenceable_or_null(56) ptr @malloc(i64 noundef 56) #42
  store i32 0, ptr %1, align 8, !tbaa !110
  %2 = getelementptr inbounds %struct.sm_col_struct, ptr %1, i64 0, i32 1
  store i32 0, ptr %2, align 4, !tbaa !109
  %3 = getelementptr inbounds %struct.sm_col_struct, ptr %1, i64 0, i32 3
  %4 = getelementptr inbounds %struct.sm_col_struct, ptr %1, i64 0, i32 2
  store i32 0, ptr %4, align 8, !tbaa !123
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %3, i8 0, i64 40, i1 false)
  ret ptr %1
}

; Function Attrs: nounwind optsize uwtable
define internal void @sm_row_free(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.sm_col_struct, ptr %0, i64 0, i32 3
  %3 = load ptr, ptr %2, align 8, !tbaa !101
  %4 = icmp eq ptr %3, null
  br i1 %4, label %12, label %5

5:                                                ; preds = %5, %1
  %6 = phi ptr [ %8, %5 ], [ %3, %1 ]
  %7 = getelementptr inbounds %struct.sm_element_struct, ptr %6, i64 0, i32 4
  %8 = load ptr, ptr %7, align 8, !tbaa !106
  tail call void @free(ptr noundef nonnull %6) #43
  %9 = icmp eq ptr %8, null
  br i1 %9, label %10, label %5

10:                                               ; preds = %5
  %11 = icmp eq ptr %0, null
  br i1 %11, label %13, label %12

12:                                               ; preds = %10, %1
  tail call void @free(ptr noundef nonnull %0) #43
  br label %13

13:                                               ; preds = %12, %10
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal noalias ptr @sm_row_dup(ptr nocapture noundef readonly %0) #0 {
  %2 = tail call noalias dereferenceable_or_null(56) ptr @malloc(i64 noundef 56) #42
  store i32 0, ptr %2, align 8, !tbaa !110
  %3 = getelementptr inbounds %struct.sm_col_struct, ptr %2, i64 0, i32 1
  store i32 0, ptr %3, align 4, !tbaa !109
  %4 = getelementptr inbounds %struct.sm_col_struct, ptr %2, i64 0, i32 3
  %5 = getelementptr inbounds %struct.sm_col_struct, ptr %2, i64 0, i32 2
  store i32 0, ptr %5, align 8, !tbaa !123
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %4, i8 0, i64 40, i1 false)
  %6 = getelementptr inbounds %struct.sm_col_struct, ptr %0, i64 0, i32 3
  %7 = load ptr, ptr %6, align 8, !tbaa !13
  %8 = icmp eq ptr %7, null
  br i1 %8, label %17, label %9

9:                                                ; preds = %9, %1
  %10 = phi ptr [ %15, %9 ], [ %7, %1 ]
  %11 = getelementptr inbounds %struct.sm_element_struct, ptr %10, i64 0, i32 1
  %12 = load i32, ptr %11, align 4, !tbaa !103
  %13 = tail call ptr @sm_row_insert(ptr noundef nonnull %2, i32 noundef %12) #44
  %14 = getelementptr inbounds %struct.sm_element_struct, ptr %10, i64 0, i32 4
  %15 = load ptr, ptr %14, align 8, !tbaa !13
  %16 = icmp eq ptr %15, null
  br i1 %16, label %17, label %9

17:                                               ; preds = %9, %1
  ret ptr %2
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @sm_row_insert(ptr nocapture noundef %0, i32 noundef %1) #0 {
  %3 = tail call noalias dereferenceable_or_null(48) ptr @malloc(i64 noundef 48) #42
  %4 = getelementptr inbounds %struct.sm_element_struct, ptr %3, i64 0, i32 6
  store ptr null, ptr %4, align 8, !tbaa !146
  %5 = getelementptr inbounds %struct.sm_col_struct, ptr %0, i64 0, i32 4
  %6 = load ptr, ptr %5, align 8, !tbaa !115
  %7 = icmp eq ptr %6, null
  br i1 %7, label %8, label %15

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.sm_element_struct, ptr %3, i64 0, i32 1
  store i32 %1, ptr %9, align 4, !tbaa !103
  %10 = getelementptr inbounds %struct.sm_col_struct, ptr %0, i64 0, i32 3
  store ptr %3, ptr %10, align 8, !tbaa !101
  store ptr %3, ptr %5, align 8, !tbaa !115
  %11 = getelementptr inbounds %struct.sm_element_struct, ptr %3, i64 0, i32 4
  %12 = getelementptr inbounds %struct.sm_col_struct, ptr %0, i64 0, i32 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %11, i8 0, i64 16, i1 false)
  %13 = load i32, ptr %12, align 4, !tbaa !109
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %12, align 4, !tbaa !109
  br label %71

15:                                               ; preds = %2
  %16 = getelementptr inbounds %struct.sm_element_struct, ptr %6, i64 0, i32 1
  %17 = load i32, ptr %16, align 4, !tbaa !103
  %18 = icmp slt i32 %17, %1
  br i1 %18, label %19, label %27

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.sm_element_struct, ptr %3, i64 0, i32 1
  store i32 %1, ptr %20, align 4, !tbaa !103
  %21 = getelementptr inbounds %struct.sm_element_struct, ptr %6, i64 0, i32 4
  store ptr %3, ptr %21, align 8, !tbaa !106
  %22 = getelementptr inbounds %struct.sm_element_struct, ptr %3, i64 0, i32 5
  store ptr %6, ptr %22, align 8, !tbaa !147
  store ptr %3, ptr %5, align 8, !tbaa !115
  %23 = getelementptr inbounds %struct.sm_element_struct, ptr %3, i64 0, i32 4
  store ptr null, ptr %23, align 8, !tbaa !106
  %24 = getelementptr inbounds %struct.sm_col_struct, ptr %0, i64 0, i32 1
  %25 = load i32, ptr %24, align 4, !tbaa !109
  %26 = add nsw i32 %25, 1
  store i32 %26, ptr %24, align 4, !tbaa !109
  br label %71

27:                                               ; preds = %15
  %28 = getelementptr inbounds %struct.sm_col_struct, ptr %0, i64 0, i32 3
  %29 = load ptr, ptr %28, align 8, !tbaa !101
  %30 = getelementptr inbounds %struct.sm_element_struct, ptr %29, i64 0, i32 1
  %31 = load i32, ptr %30, align 4, !tbaa !103
  %32 = icmp sgt i32 %31, %1
  br i1 %32, label %35, label %33

33:                                               ; preds = %27
  %34 = icmp slt i32 %31, %1
  br i1 %34, label %43, label %50

35:                                               ; preds = %27
  %36 = getelementptr inbounds %struct.sm_element_struct, ptr %3, i64 0, i32 1
  store i32 %1, ptr %36, align 4, !tbaa !103
  %37 = getelementptr inbounds %struct.sm_element_struct, ptr %29, i64 0, i32 5
  store ptr %3, ptr %37, align 8, !tbaa !147
  %38 = getelementptr inbounds %struct.sm_element_struct, ptr %3, i64 0, i32 4
  store ptr %29, ptr %38, align 8, !tbaa !106
  store ptr %3, ptr %28, align 8, !tbaa !101
  %39 = getelementptr inbounds %struct.sm_element_struct, ptr %3, i64 0, i32 5
  store ptr null, ptr %39, align 8, !tbaa !147
  %40 = getelementptr inbounds %struct.sm_col_struct, ptr %0, i64 0, i32 1
  %41 = load i32, ptr %40, align 4, !tbaa !109
  %42 = add nsw i32 %41, 1
  store i32 %42, ptr %40, align 4, !tbaa !109
  br label %71

43:                                               ; preds = %43, %33
  %44 = phi ptr [ %46, %43 ], [ %29, %33 ]
  %45 = getelementptr inbounds %struct.sm_element_struct, ptr %44, i64 0, i32 4
  %46 = load ptr, ptr %45, align 8, !tbaa !106
  %47 = getelementptr inbounds %struct.sm_element_struct, ptr %46, i64 0, i32 1
  %48 = load i32, ptr %47, align 4, !tbaa !103
  %49 = icmp slt i32 %48, %1
  br i1 %49, label %43, label %50

50:                                               ; preds = %43, %33
  %51 = phi ptr [ %29, %33 ], [ %46, %43 ]
  %52 = phi i32 [ %31, %33 ], [ %48, %43 ]
  %53 = icmp sgt i32 %52, %1
  br i1 %53, label %54, label %66

54:                                               ; preds = %50
  %55 = getelementptr inbounds %struct.sm_element_struct, ptr %3, i64 0, i32 1
  store i32 %1, ptr %55, align 4, !tbaa !103
  %56 = getelementptr inbounds %struct.sm_element_struct, ptr %51, i64 0, i32 5
  %57 = load ptr, ptr %56, align 8, !tbaa !147
  %58 = getelementptr inbounds %struct.sm_element_struct, ptr %57, i64 0, i32 4
  %59 = load ptr, ptr %58, align 8, !tbaa !106
  %60 = getelementptr inbounds %struct.sm_element_struct, ptr %59, i64 0, i32 5
  store ptr %3, ptr %60, align 8, !tbaa !147
  %61 = getelementptr inbounds %struct.sm_element_struct, ptr %3, i64 0, i32 4
  store ptr %59, ptr %61, align 8, !tbaa !106
  store ptr %3, ptr %58, align 8, !tbaa !106
  %62 = getelementptr inbounds %struct.sm_element_struct, ptr %3, i64 0, i32 5
  store ptr %57, ptr %62, align 8, !tbaa !147
  %63 = getelementptr inbounds %struct.sm_col_struct, ptr %0, i64 0, i32 1
  %64 = load i32, ptr %63, align 4, !tbaa !109
  %65 = add nsw i32 %64, 1
  store i32 %65, ptr %63, align 4, !tbaa !109
  br label %71

66:                                               ; preds = %50
  %67 = icmp ne ptr %3, %51
  %68 = icmp ne ptr %3, null
  %69 = and i1 %68, %67
  br i1 %69, label %70, label %71

70:                                               ; preds = %66
  tail call void @free(ptr noundef nonnull %3) #43
  br label %71

71:                                               ; preds = %70, %66, %54, %35, %19, %8
  %72 = phi ptr [ %51, %70 ], [ %51, %66 ], [ %3, %8 ], [ %3, %19 ], [ %3, %35 ], [ %3, %54 ]
  ret ptr %72
}

; Function Attrs: nounwind optsize uwtable
define internal void @sm_row_remove(ptr nocapture noundef %0, i32 noundef %1) #0 {
  %3 = getelementptr inbounds %struct.sm_col_struct, ptr %0, i64 0, i32 3
  %4 = load ptr, ptr %3, align 8, !tbaa !13
  %5 = icmp eq ptr %4, null
  br i1 %5, label %36, label %6

6:                                                ; preds = %11, %2
  %7 = phi ptr [ %13, %11 ], [ %4, %2 ]
  %8 = getelementptr inbounds %struct.sm_element_struct, ptr %7, i64 0, i32 1
  %9 = load i32, ptr %8, align 4, !tbaa !103
  %10 = icmp slt i32 %9, %1
  br i1 %10, label %11, label %15

11:                                               ; preds = %6
  %12 = getelementptr inbounds %struct.sm_element_struct, ptr %7, i64 0, i32 4
  %13 = load ptr, ptr %12, align 8, !tbaa !13
  %14 = icmp eq ptr %13, null
  br i1 %14, label %36, label %6

15:                                               ; preds = %6
  %.lcssa1 = phi ptr [ %7, %6 ]
  %.lcssa = phi i32 [ %9, %6 ]
  %16 = icmp eq i32 %.lcssa, %1
  br i1 %16, label %17, label %36

17:                                               ; preds = %15
  %18 = getelementptr inbounds %struct.sm_element_struct, ptr %.lcssa1, i64 0, i32 5
  %19 = load ptr, ptr %18, align 8, !tbaa !147
  %20 = icmp eq ptr %19, null
  %21 = getelementptr inbounds %struct.sm_element_struct, ptr %.lcssa1, i64 0, i32 4
  %22 = load ptr, ptr %21, align 8, !tbaa !106
  br i1 %20, label %23, label %24

23:                                               ; preds = %17
  store ptr %22, ptr %3, align 8, !tbaa !101
  br label %27

24:                                               ; preds = %17
  %25 = getelementptr inbounds %struct.sm_element_struct, ptr %19, i64 0, i32 4
  store ptr %22, ptr %25, align 8, !tbaa !106
  %26 = load ptr, ptr %21, align 8, !tbaa !106
  br label %27

27:                                               ; preds = %24, %23
  %28 = phi ptr [ %26, %24 ], [ %22, %23 ]
  %29 = icmp eq ptr %28, null
  %30 = getelementptr inbounds %struct.sm_element_struct, ptr %28, i64 0, i32 5
  %31 = getelementptr inbounds %struct.sm_col_struct, ptr %0, i64 0, i32 4
  %32 = select i1 %29, ptr %31, ptr %30
  store ptr %19, ptr %32, align 8, !tbaa !13
  %33 = getelementptr inbounds %struct.sm_col_struct, ptr %0, i64 0, i32 1
  %34 = load i32, ptr %33, align 4, !tbaa !109
  %35 = add nsw i32 %34, -1
  store i32 %35, ptr %33, align 4, !tbaa !109
  tail call void @free(ptr noundef nonnull %.lcssa1) #43
  br label %36

36:                                               ; preds = %27, %15, %11, %2
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @sm_row_contains(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #8 {
  %3 = getelementptr inbounds %struct.sm_col_struct, ptr %0, i64 0, i32 3
  %4 = load ptr, ptr %3, align 8, !tbaa !101
  %5 = icmp eq ptr %4, null
  br i1 %5, label %28, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.sm_col_struct, ptr %1, i64 0, i32 3
  br label %8

8:                                                ; preds = %24, %6
  %9 = phi ptr [ %26, %24 ], [ %7, %6 ]
  %10 = phi ptr [ %25, %24 ], [ %4, %6 ]
  %11 = load ptr, ptr %9, align 8, !tbaa !13
  %12 = icmp eq ptr %11, null
  br i1 %12, label %28, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.sm_element_struct, ptr %10, i64 0, i32 1
  %15 = load i32, ptr %14, align 4, !tbaa !103
  %16 = getelementptr inbounds %struct.sm_element_struct, ptr %11, i64 0, i32 1
  %17 = load i32, ptr %16, align 4, !tbaa !103
  %18 = icmp slt i32 %15, %17
  br i1 %18, label %28, label %19

19:                                               ; preds = %13
  %20 = icmp eq i32 %15, %17
  br i1 %20, label %21, label %24

21:                                               ; preds = %19
  %22 = getelementptr inbounds %struct.sm_element_struct, ptr %10, i64 0, i32 4
  %23 = load ptr, ptr %22, align 8, !tbaa !106
  br label %24

24:                                               ; preds = %21, %19
  %25 = phi ptr [ %23, %21 ], [ %10, %19 ]
  %26 = getelementptr inbounds %struct.sm_element_struct, ptr %11, i64 0, i32 4
  %27 = icmp eq ptr %25, null
  br i1 %27, label %28, label %8

28:                                               ; preds = %24, %13, %8, %2
  %29 = phi i32 [ 1, %2 ], [ 1, %24 ], [ 0, %8 ], [ 0, %13 ]
  ret i32 %29
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @sm_row_intersects(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #8 {
  %3 = getelementptr inbounds %struct.sm_col_struct, ptr %0, i64 0, i32 3
  %4 = load ptr, ptr %3, align 8, !tbaa !101
  %5 = getelementptr inbounds %struct.sm_col_struct, ptr %1, i64 0, i32 3
  %6 = load ptr, ptr %5, align 8, !tbaa !101
  %7 = icmp eq ptr %4, null
  %8 = icmp eq ptr %6, null
  %9 = select i1 %7, i1 true, i1 %8
  br i1 %9, label %30, label %10

10:                                               ; preds = %20, %2
  %11 = phi ptr [ %22, %20 ], [ %4, %2 ]
  %12 = phi ptr [ %.lcssa, %20 ], [ %6, %2 ]
  %13 = getelementptr inbounds %struct.sm_element_struct, ptr %11, i64 0, i32 1
  %14 = load i32, ptr %13, align 4, !tbaa !103
  br label %15

15:                                               ; preds = %26, %10
  %16 = phi ptr [ %28, %26 ], [ %12, %10 ]
  %17 = getelementptr inbounds %struct.sm_element_struct, ptr %16, i64 0, i32 1
  %18 = load i32, ptr %17, align 4, !tbaa !103
  %19 = icmp slt i32 %14, %18
  br i1 %19, label %20, label %24

20:                                               ; preds = %15
  %.lcssa = phi ptr [ %16, %15 ]
  %21 = getelementptr inbounds %struct.sm_element_struct, ptr %11, i64 0, i32 4
  %22 = load ptr, ptr %21, align 8, !tbaa !106
  %23 = icmp eq ptr %22, null
  br i1 %23, label %30, label %10

24:                                               ; preds = %15
  %25 = icmp sgt i32 %14, %18
  br i1 %25, label %26, label %30

26:                                               ; preds = %24
  %27 = getelementptr inbounds %struct.sm_element_struct, ptr %16, i64 0, i32 4
  %28 = load ptr, ptr %27, align 8, !tbaa !106
  %29 = icmp eq ptr %28, null
  br i1 %29, label %30, label %15

30:                                               ; preds = %26, %24, %20, %2
  %31 = phi i32 [ 0, %2 ], [ 0, %26 ], [ 1, %24 ], [ 0, %20 ]
  ret i32 %31
}

; Function Attrs: mustprogress nounwind optsize willreturn memory(write, argmem: readwrite, inaccessiblemem: readwrite) uwtable
define internal void @sm_row_remove_element(ptr nocapture noundef %0, ptr nocapture noundef %1) #9 {
  %3 = getelementptr inbounds %struct.sm_element_struct, ptr %1, i64 0, i32 5
  %4 = load ptr, ptr %3, align 8, !tbaa !147
  %5 = icmp eq ptr %4, null
  %6 = getelementptr inbounds %struct.sm_element_struct, ptr %1, i64 0, i32 4
  %7 = load ptr, ptr %6, align 8, !tbaa !106
  br i1 %5, label %8, label %10

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.sm_col_struct, ptr %0, i64 0, i32 3
  store ptr %7, ptr %9, align 8, !tbaa !101
  br label %13

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.sm_element_struct, ptr %4, i64 0, i32 4
  store ptr %7, ptr %11, align 8, !tbaa !106
  %12 = load ptr, ptr %6, align 8, !tbaa !106
  br label %13

13:                                               ; preds = %10, %8
  %14 = phi ptr [ %12, %10 ], [ %7, %8 ]
  %15 = icmp eq ptr %14, null
  %16 = getelementptr inbounds %struct.sm_element_struct, ptr %14, i64 0, i32 5
  %17 = getelementptr inbounds %struct.sm_col_struct, ptr %0, i64 0, i32 4
  %18 = select i1 %15, ptr %17, ptr %16
  store ptr %4, ptr %18, align 8, !tbaa !13
  %19 = getelementptr inbounds %struct.sm_col_struct, ptr %0, i64 0, i32 1
  %20 = load i32, ptr %19, align 4, !tbaa !109
  %21 = add nsw i32 %20, -1
  store i32 %21, ptr %19, align 4, !tbaa !109
  tail call void @free(ptr noundef nonnull %1) #43
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(none) uwtable
define internal i32 @bit_index(i32 noundef %0) #33 {
  %2 = icmp eq i32 %0, 0
  br i1 %2, label %13, label %3

3:                                                ; preds = %1
  %4 = and i32 %0, 1
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %13

6:                                                ; preds = %6, %3
  %7 = phi i32 [ %10, %6 ], [ 0, %3 ]
  %8 = phi i32 [ %9, %6 ], [ %0, %3 ]
  %9 = lshr i32 %8, 1
  %10 = add nuw nsw i32 %7, 1
  %11 = and i32 %8, 2
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %6, label %13

13:                                               ; preds = %6, %3, %1
  %14 = phi i32 [ -1, %1 ], [ 0, %3 ], [ %10, %6 ]
  ret i32 %14
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @set_ord(ptr nocapture noundef readonly %0) #8 {
  %2 = load i32, ptr %0, align 4, !tbaa !16
  %3 = and i32 %2, 1023
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %41, label %5

5:                                                ; preds = %1
  %6 = and i32 %2, 1023
  %7 = zext i32 %6 to i64
  br label %8

8:                                                ; preds = %37, %5
  %9 = phi i64 [ %7, %5 ], [ %39, %37 ]
  %10 = phi i32 [ 0, %5 ], [ %38, %37 ]
  %11 = getelementptr inbounds i32, ptr %0, i64 %9
  %12 = load i32, ptr %11, align 4, !tbaa !16
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %37, label %14

14:                                               ; preds = %8
  %15 = and i32 %12, 255
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %16
  %18 = load i32, ptr %17, align 4, !tbaa !16
  %19 = lshr i32 %12, 8
  %20 = and i32 %19, 255
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %21
  %23 = load i32, ptr %22, align 4, !tbaa !16
  %24 = lshr i32 %12, 16
  %25 = and i32 %24, 255
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %26
  %28 = load i32, ptr %27, align 4, !tbaa !16
  %29 = lshr i32 %12, 24
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %30
  %32 = load i32, ptr %31, align 4, !tbaa !16
  %33 = add i32 %18, %10
  %34 = add i32 %33, %23
  %35 = add i32 %34, %28
  %36 = add i32 %35, %32
  br label %37

37:                                               ; preds = %14, %8
  %38 = phi i32 [ %36, %14 ], [ %10, %8 ]
  %39 = add nsw i64 %9, -1
  %40 = icmp sgt i64 %9, 1
  br i1 %40, label %8, label %41

41:                                               ; preds = %37, %1
  %42 = phi i32 [ 0, %1 ], [ %38, %37 ]
  ret i32 %42
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @set_dist(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #8 {
  %3 = load i32, ptr %0, align 4, !tbaa !16
  %4 = and i32 %3, 1023
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %45, label %6

6:                                                ; preds = %2
  %7 = and i32 %3, 1023
  %8 = zext i32 %7 to i64
  br label %9

9:                                                ; preds = %41, %6
  %10 = phi i64 [ %8, %6 ], [ %43, %41 ]
  %11 = phi i32 [ 0, %6 ], [ %42, %41 ]
  %12 = getelementptr inbounds i32, ptr %0, i64 %10
  %13 = load i32, ptr %12, align 4, !tbaa !16
  %14 = getelementptr inbounds i32, ptr %1, i64 %10
  %15 = load i32, ptr %14, align 4, !tbaa !16
  %16 = and i32 %15, %13
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %41, label %18

18:                                               ; preds = %9
  %19 = and i32 %16, 255
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %20
  %22 = load i32, ptr %21, align 4, !tbaa !16
  %23 = lshr i32 %16, 8
  %24 = and i32 %23, 255
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %25
  %27 = load i32, ptr %26, align 4, !tbaa !16
  %28 = lshr i32 %16, 16
  %29 = and i32 %28, 255
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %30
  %32 = load i32, ptr %31, align 4, !tbaa !16
  %33 = lshr i32 %16, 24
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %34
  %36 = load i32, ptr %35, align 4, !tbaa !16
  %37 = add i32 %22, %11
  %38 = add i32 %37, %27
  %39 = add i32 %38, %32
  %40 = add i32 %39, %36
  br label %41

41:                                               ; preds = %18, %9
  %42 = phi i32 [ %40, %18 ], [ %11, %9 ]
  %43 = add nsw i64 %10, -1
  %44 = icmp sgt i64 %10, 1
  br i1 %44, label %9, label %45

45:                                               ; preds = %41, %2
  %46 = phi i32 [ 0, %2 ], [ %42, %41 ]
  ret i32 %46
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal ptr @set_clear(ptr noundef returned writeonly %0, i32 noundef %1) #34 {
  %3 = icmp slt i32 %1, 33
  %4 = add nsw i32 %1, -1
  %5 = lshr i32 %4, 5
  %6 = add nuw nsw i32 %5, 1
  %7 = select i1 %3, i32 1, i32 %6
  store i32 %7, ptr %0, align 4, !tbaa !16
  %8 = shl nuw nsw i32 %7, 2
  %9 = zext i32 %8 to i64
  %10 = add nsw i32 %7, -1
  %11 = zext i32 %10 to i64
  %12 = shl nuw nsw i64 %11, 2
  %13 = sub nsw i64 %9, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = add nuw nsw i64 %12, 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(1) %14, i8 0, i64 %15, i1 false), !tbaa !16
  ret ptr %0
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal ptr @set_fill(ptr noundef returned writeonly %0, i32 noundef %1) #34 {
  %3 = icmp slt i32 %1, 33
  %4 = add nsw i32 %1, -1
  %5 = lshr i32 %4, 5
  %6 = add nuw nsw i32 %5, 1
  %7 = select i1 %3, i32 1, i32 %6
  store i32 %7, ptr %0, align 4, !tbaa !16
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds i32, ptr %0, i64 %8
  %10 = shl nsw i32 %7, 5
  %11 = sub nsw i32 %10, %1
  %12 = lshr i32 -1, %11
  store i32 %12, ptr %9, align 4, !tbaa !16
  %13 = icmp ugt i32 %7, 1
  br i1 %13, label %14, label %24

14:                                               ; preds = %2
  %15 = add nsw i32 %7, -1
  %16 = zext i32 %15 to i64
  %17 = add nsw i32 %7, -2
  %18 = zext i32 %17 to i64
  %19 = shl nuw nsw i64 %18, 2
  %20 = sub nsw i64 %16, %18
  %21 = shl nsw i64 %20, 2
  %22 = getelementptr i8, ptr %0, i64 %21
  %23 = add nuw nsw i64 %19, 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(1) %22, i8 -1, i64 %23, i1 false), !tbaa !16
  br label %24

24:                                               ; preds = %14, %2
  ret ptr %0
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(argmem: readwrite) uwtable
define internal ptr @set_copy(ptr noundef returned writeonly %0, ptr nocapture noundef readonly %1) #35 {
  %3 = load i32, ptr %1, align 4, !tbaa !16
  %4 = and i32 %3, 1023
  %5 = zext i32 %4 to i64
  br label %6

6:                                                ; preds = %6, %2
  %7 = phi i64 [ %11, %6 ], [ %5, %2 ]
  %8 = getelementptr inbounds i32, ptr %1, i64 %7
  %9 = load i32, ptr %8, align 4, !tbaa !16
  %10 = getelementptr inbounds i32, ptr %0, i64 %7
  store i32 %9, ptr %10, align 4, !tbaa !16
  %11 = add nsw i64 %7, -1
  %12 = icmp eq i64 %7, 0
  br i1 %12, label %13, label %6

13:                                               ; preds = %6
  ret ptr %0
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(argmem: readwrite) uwtable
define internal ptr @set_and(ptr noundef returned %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2) #35 {
  %4 = load i32, ptr %1, align 4, !tbaa !16
  %5 = and i32 %4, 1023
  %6 = load i32, ptr %0, align 4, !tbaa !16
  %7 = and i32 %6, -1024
  %8 = or i32 %7, %5
  store i32 %8, ptr %0, align 4, !tbaa !16
  %9 = and i32 %4, 1023
  %10 = zext i32 %9 to i64
  br label %11

11:                                               ; preds = %11, %3
  %12 = phi i64 [ %19, %11 ], [ %10, %3 ]
  %13 = getelementptr inbounds i32, ptr %1, i64 %12
  %14 = load i32, ptr %13, align 4, !tbaa !16
  %15 = getelementptr inbounds i32, ptr %2, i64 %12
  %16 = load i32, ptr %15, align 4, !tbaa !16
  %17 = and i32 %16, %14
  %18 = getelementptr inbounds i32, ptr %0, i64 %12
  store i32 %17, ptr %18, align 4, !tbaa !16
  %19 = add nsw i64 %12, -1
  %20 = icmp ugt i64 %12, 1
  br i1 %20, label %11, label %21

21:                                               ; preds = %11
  ret ptr %0
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(argmem: readwrite) uwtable
define internal ptr @set_or(ptr noundef returned %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2) #35 {
  %4 = load i32, ptr %1, align 4, !tbaa !16
  %5 = and i32 %4, 1023
  %6 = load i32, ptr %0, align 4, !tbaa !16
  %7 = and i32 %6, -1024
  %8 = or i32 %7, %5
  store i32 %8, ptr %0, align 4, !tbaa !16
  %9 = and i32 %4, 1023
  %10 = zext i32 %9 to i64
  br label %11

11:                                               ; preds = %11, %3
  %12 = phi i64 [ %19, %11 ], [ %10, %3 ]
  %13 = getelementptr inbounds i32, ptr %1, i64 %12
  %14 = load i32, ptr %13, align 4, !tbaa !16
  %15 = getelementptr inbounds i32, ptr %2, i64 %12
  %16 = load i32, ptr %15, align 4, !tbaa !16
  %17 = or i32 %16, %14
  %18 = getelementptr inbounds i32, ptr %0, i64 %12
  store i32 %17, ptr %18, align 4, !tbaa !16
  %19 = add nsw i64 %12, -1
  %20 = icmp ugt i64 %12, 1
  br i1 %20, label %11, label %21

21:                                               ; preds = %11
  ret ptr %0
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(argmem: readwrite) uwtable
define internal ptr @set_diff(ptr noundef returned %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2) #35 {
  %4 = load i32, ptr %1, align 4, !tbaa !16
  %5 = and i32 %4, 1023
  %6 = load i32, ptr %0, align 4, !tbaa !16
  %7 = and i32 %6, -1024
  %8 = or i32 %7, %5
  store i32 %8, ptr %0, align 4, !tbaa !16
  %9 = and i32 %4, 1023
  %10 = zext i32 %9 to i64
  br label %11

11:                                               ; preds = %11, %3
  %12 = phi i64 [ %20, %11 ], [ %10, %3 ]
  %13 = getelementptr inbounds i32, ptr %1, i64 %12
  %14 = load i32, ptr %13, align 4, !tbaa !16
  %15 = getelementptr inbounds i32, ptr %2, i64 %12
  %16 = load i32, ptr %15, align 4, !tbaa !16
  %17 = xor i32 %16, -1
  %18 = and i32 %14, %17
  %19 = getelementptr inbounds i32, ptr %0, i64 %12
  store i32 %18, ptr %19, align 4, !tbaa !16
  %20 = add nsw i64 %12, -1
  %21 = icmp ugt i64 %12, 1
  br i1 %21, label %11, label %22

22:                                               ; preds = %11
  ret ptr %0
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(argmem: readwrite) uwtable
define internal ptr @set_xor(ptr noundef returned %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2) #35 {
  %4 = load i32, ptr %1, align 4, !tbaa !16
  %5 = and i32 %4, 1023
  %6 = load i32, ptr %0, align 4, !tbaa !16
  %7 = and i32 %6, -1024
  %8 = or i32 %7, %5
  store i32 %8, ptr %0, align 4, !tbaa !16
  %9 = and i32 %4, 1023
  %10 = zext i32 %9 to i64
  br label %11

11:                                               ; preds = %11, %3
  %12 = phi i64 [ %19, %11 ], [ %10, %3 ]
  %13 = getelementptr inbounds i32, ptr %1, i64 %12
  %14 = load i32, ptr %13, align 4, !tbaa !16
  %15 = getelementptr inbounds i32, ptr %2, i64 %12
  %16 = load i32, ptr %15, align 4, !tbaa !16
  %17 = xor i32 %16, %14
  %18 = getelementptr inbounds i32, ptr %0, i64 %12
  store i32 %17, ptr %18, align 4, !tbaa !16
  %19 = add nsw i64 %12, -1
  %20 = icmp ugt i64 %12, 1
  br i1 %20, label %11, label %21

21:                                               ; preds = %11
  ret ptr %0
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(argmem: readwrite) uwtable
define internal ptr @set_merge(ptr noundef returned %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3) #35 {
  %5 = load i32, ptr %1, align 4, !tbaa !16
  %6 = and i32 %5, 1023
  %7 = load i32, ptr %0, align 4, !tbaa !16
  %8 = and i32 %7, -1024
  %9 = or i32 %8, %6
  store i32 %9, ptr %0, align 4, !tbaa !16
  %10 = and i32 %5, 1023
  %11 = zext i32 %10 to i64
  br label %12

12:                                               ; preds = %12, %4
  %13 = phi i64 [ %25, %12 ], [ %11, %4 ]
  %14 = getelementptr inbounds i32, ptr %1, i64 %13
  %15 = load i32, ptr %14, align 4, !tbaa !16
  %16 = getelementptr inbounds i32, ptr %3, i64 %13
  %17 = load i32, ptr %16, align 4, !tbaa !16
  %18 = and i32 %17, %15
  %19 = getelementptr inbounds i32, ptr %2, i64 %13
  %20 = load i32, ptr %19, align 4, !tbaa !16
  %21 = xor i32 %17, -1
  %22 = and i32 %20, %21
  %23 = or i32 %22, %18
  %24 = getelementptr inbounds i32, ptr %0, i64 %13
  store i32 %23, ptr %24, align 4, !tbaa !16
  %25 = add nsw i64 %13, -1
  %26 = icmp ugt i64 %13, 1
  br i1 %26, label %12, label %27

27:                                               ; preds = %12
  ret ptr %0
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(argmem: readwrite) uwtable
define internal i32 @set_andp(ptr nocapture noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2) #35 {
  %4 = load i32, ptr %1, align 4, !tbaa !16
  %5 = and i32 %4, 1023
  %6 = load i32, ptr %0, align 4, !tbaa !16
  %7 = and i32 %6, -1024
  %8 = or i32 %7, %5
  store i32 %8, ptr %0, align 4, !tbaa !16
  %9 = and i32 %4, 1023
  %10 = zext i32 %9 to i64
  br label %11

11:                                               ; preds = %11, %3
  %12 = phi i64 [ %21, %11 ], [ %10, %3 ]
  %13 = phi i32 [ %20, %11 ], [ 0, %3 ]
  %14 = getelementptr inbounds i32, ptr %1, i64 %12
  %15 = load i32, ptr %14, align 4, !tbaa !16
  %16 = getelementptr inbounds i32, ptr %2, i64 %12
  %17 = load i32, ptr %16, align 4, !tbaa !16
  %18 = and i32 %17, %15
  %19 = getelementptr inbounds i32, ptr %0, i64 %12
  store i32 %18, ptr %19, align 4, !tbaa !16
  %20 = or i32 %18, %13
  %21 = add nsw i64 %12, -1
  %22 = icmp ugt i64 %12, 1
  br i1 %22, label %11, label %23

23:                                               ; preds = %11
  %.lcssa = phi i32 [ %20, %11 ]
  %24 = icmp ne i32 %.lcssa, 0
  %25 = zext i1 %24 to i32
  ret i32 %25
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(argmem: read) uwtable
define internal i32 @setp_empty(ptr nocapture noundef readonly %0) #36 {
  %2 = load i32, ptr %0, align 4, !tbaa !16
  %3 = and i32 %2, 1023
  br label %4

4:                                                ; preds = %10, %1
  %5 = phi i32 [ %3, %1 ], [ %11, %10 ]
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds i32, ptr %0, i64 %6
  %8 = load i32, ptr %7, align 4, !tbaa !16
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %13

10:                                               ; preds = %4
  %11 = add nsw i32 %5, -1
  %12 = icmp sgt i32 %5, 1
  br i1 %12, label %4, label %13

13:                                               ; preds = %10, %4
  %14 = phi i32 [ 0, %4 ], [ 1, %10 ]
  ret i32 %14
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(argmem: read) uwtable
define internal i32 @setp_equal(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #36 {
  %3 = load i32, ptr %0, align 4, !tbaa !16
  %4 = and i32 %3, 1023
  br label %5

5:                                                ; preds = %13, %2
  %6 = phi i32 [ %4, %2 ], [ %14, %13 ]
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds i32, ptr %0, i64 %7
  %9 = load i32, ptr %8, align 4, !tbaa !16
  %10 = getelementptr inbounds i32, ptr %1, i64 %7
  %11 = load i32, ptr %10, align 4, !tbaa !16
  %12 = icmp eq i32 %9, %11
  br i1 %12, label %13, label %16

13:                                               ; preds = %5
  %14 = add nsw i32 %6, -1
  %15 = icmp sgt i32 %6, 1
  br i1 %15, label %5, label %16

16:                                               ; preds = %13, %5
  %17 = phi i32 [ 0, %5 ], [ 1, %13 ]
  ret i32 %17
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(argmem: read) uwtable
define internal i32 @setp_disjoint(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #36 {
  %3 = load i32, ptr %0, align 4, !tbaa !16
  %4 = and i32 %3, 1023
  br label %5

5:                                                ; preds = %14, %2
  %6 = phi i32 [ %4, %2 ], [ %15, %14 ]
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds i32, ptr %0, i64 %7
  %9 = load i32, ptr %8, align 4, !tbaa !16
  %10 = getelementptr inbounds i32, ptr %1, i64 %7
  %11 = load i32, ptr %10, align 4, !tbaa !16
  %12 = and i32 %11, %9
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %17

14:                                               ; preds = %5
  %15 = add nsw i32 %6, -1
  %16 = icmp sgt i32 %6, 1
  br i1 %16, label %5, label %17

17:                                               ; preds = %14, %5
  %18 = phi i32 [ 0, %5 ], [ 1, %14 ]
  ret i32 %18
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(argmem: read) uwtable
define internal i32 @setp_implies(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #36 {
  %3 = load i32, ptr %0, align 4, !tbaa !16
  %4 = and i32 %3, 1023
  br label %5

5:                                                ; preds = %15, %2
  %6 = phi i32 [ %4, %2 ], [ %16, %15 ]
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds i32, ptr %0, i64 %7
  %9 = load i32, ptr %8, align 4, !tbaa !16
  %10 = getelementptr inbounds i32, ptr %1, i64 %7
  %11 = load i32, ptr %10, align 4, !tbaa !16
  %12 = xor i32 %11, -1
  %13 = and i32 %9, %12
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %5
  %16 = add nsw i32 %6, -1
  %17 = icmp sgt i32 %6, 1
  br i1 %17, label %5, label %18

18:                                               ; preds = %15, %5
  %19 = phi i32 [ 0, %5 ], [ 1, %15 ]
  ret i32 %19
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal ptr @sf_active(ptr noundef returned %0) #21 {
  %2 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %3 = load ptr, ptr %2, align 8, !tbaa !33
  %4 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %5 = load i32, ptr %4, align 4, !tbaa !31
  %6 = load i32, ptr %0, align 8, !tbaa !34
  %7 = mul nsw i32 %6, %5
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds i32, ptr %3, i64 %8
  %10 = icmp sgt i32 %7, 0
  br i1 %10, label %11, label %21

11:                                               ; preds = %11, %1
  %12 = phi ptr [ %17, %11 ], [ %3, %1 ]
  %13 = load i32, ptr %12, align 4, !tbaa !16
  %14 = or i32 %13, 8192
  store i32 %14, ptr %12, align 4, !tbaa !16
  %15 = load i32, ptr %0, align 8, !tbaa !34
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i32, ptr %12, i64 %16
  %18 = icmp ult ptr %17, %9
  br i1 %18, label %11, label %19

19:                                               ; preds = %11
  %20 = load i32, ptr %4, align 4, !tbaa !31
  br label %21

21:                                               ; preds = %19, %1
  %22 = phi i32 [ %20, %19 ], [ %5, %1 ]
  %23 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 4
  store i32 %22, ptr %23, align 8, !tbaa !114
  ret ptr %0
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal ptr @sf_inactive(ptr noundef returned %0) #21 {
  %2 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %3 = load ptr, ptr %2, align 8, !tbaa !33
  %4 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %5 = load i32, ptr %4, align 4, !tbaa !31
  %6 = load i32, ptr %0, align 8, !tbaa !34
  %7 = mul nsw i32 %6, %5
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds i32, ptr %3, i64 %8
  %10 = icmp sgt i32 %7, 0
  br i1 %10, label %11, label %46

11:                                               ; preds = %40, %1
  %12 = phi i32 [ %42, %40 ], [ %6, %1 ]
  %13 = phi ptr [ %43, %40 ], [ %3, %1 ]
  %14 = phi ptr [ %44, %40 ], [ %3, %1 ]
  %15 = load i32, ptr %14, align 4, !tbaa !16
  %16 = and i32 %15, 8192
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %36, label %18

18:                                               ; preds = %11
  %19 = icmp eq ptr %13, %14
  br i1 %19, label %32, label %20

20:                                               ; preds = %18
  %21 = and i32 %15, 1023
  %22 = zext i32 %21 to i64
  br label %23

23:                                               ; preds = %23, %20
  %24 = phi i64 [ %28, %23 ], [ %22, %20 ]
  %25 = getelementptr inbounds i32, ptr %14, i64 %24
  %26 = load i32, ptr %25, align 4, !tbaa !16
  %27 = getelementptr inbounds i32, ptr %13, i64 %24
  store i32 %26, ptr %27, align 4, !tbaa !16
  %28 = add nsw i64 %24, -1
  %29 = icmp eq i64 %24, 0
  br i1 %29, label %30, label %23

30:                                               ; preds = %23
  %31 = load i32, ptr %0, align 8, !tbaa !34
  br label %32

32:                                               ; preds = %30, %18
  %33 = phi i32 [ %31, %30 ], [ %12, %18 ]
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds i32, ptr %13, i64 %34
  br label %40

36:                                               ; preds = %11
  %37 = load i32, ptr %4, align 4, !tbaa !31
  %38 = add nsw i32 %37, -1
  store i32 %38, ptr %4, align 4, !tbaa !31
  %39 = sext i32 %12 to i64
  br label %40

40:                                               ; preds = %36, %32
  %41 = phi i64 [ %34, %32 ], [ %39, %36 ]
  %42 = phi i32 [ %33, %32 ], [ %12, %36 ]
  %43 = phi ptr [ %35, %32 ], [ %13, %36 ]
  %44 = getelementptr inbounds i32, ptr %14, i64 %41
  %45 = icmp ult ptr %44, %9
  br i1 %45, label %11, label %46

46:                                               ; preds = %40, %1
  ret ptr %0
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal ptr @sf_copy(ptr noundef returned %0, ptr nocapture noundef readonly %1) #21 {
  %3 = load <2 x i32>, ptr %1, align 8, !tbaa !16
  store <2 x i32> %3, ptr %0, align 8, !tbaa !16
  %4 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 3
  %5 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %6 = load <2 x i32>, ptr %4, align 4, !tbaa !16
  store <2 x i32> %6, ptr %5, align 4, !tbaa !16
  %7 = load i32, ptr %1, align 8, !tbaa !34
  %8 = sext i32 %7 to i64
  %9 = load i32, ptr %4, align 4, !tbaa !31
  %10 = sext i32 %9 to i64
  %11 = mul nsw i64 %10, %8
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %13, label %27

13:                                               ; preds = %2
  %14 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 5
  %15 = load ptr, ptr %14, align 8, !tbaa !33
  %16 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %17 = load ptr, ptr %16, align 8, !tbaa !33
  br label %18

18:                                               ; preds = %18, %13
  %19 = phi i64 [ %25, %18 ], [ 0, %13 ]
  %20 = phi ptr [ %24, %18 ], [ %17, %13 ]
  %21 = phi ptr [ %22, %18 ], [ %15, %13 ]
  %22 = getelementptr inbounds i32, ptr %21, i64 1
  %23 = load i32, ptr %21, align 4, !tbaa !16
  %24 = getelementptr inbounds i32, ptr %20, i64 1
  store i32 %23, ptr %20, align 4, !tbaa !16
  %25 = add nuw nsw i64 %19, 1
  %26 = icmp eq i64 %25, %11
  br i1 %26, label %27, label %18

27:                                               ; preds = %18, %2
  ret ptr %0
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @sf_join(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #0 {
  %3 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %4 = load i32, ptr %3, align 4, !tbaa !31
  %5 = load i32, ptr %0, align 8, !tbaa !34
  %6 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 3
  %7 = load i32, ptr %6, align 4, !tbaa !31
  %8 = load i32, ptr %1, align 8, !tbaa !34
  %9 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 1
  %10 = load i32, ptr %9, align 4, !tbaa !44
  %11 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 1
  %12 = load i32, ptr %11, align 4, !tbaa !44
  %13 = icmp eq i32 %10, %12
  br i1 %13, label %18, label %14

14:                                               ; preds = %2
  tail call void (ptr, ...) @fatal(ptr noundef nonnull @.str.477) #43
  %15 = load i32, ptr %3, align 4, !tbaa !31
  %16 = load i32, ptr %6, align 4, !tbaa !31
  %17 = load i32, ptr %9, align 4, !tbaa !44
  br label %18

18:                                               ; preds = %14, %2
  %19 = phi i32 [ %17, %14 ], [ %10, %2 ]
  %20 = phi i32 [ %16, %14 ], [ %7, %2 ]
  %21 = phi i32 [ %15, %14 ], [ %4, %2 ]
  %22 = mul nsw i32 %8, %7
  %23 = sext i32 %22 to i64
  %24 = mul nsw i32 %5, %4
  %25 = sext i32 %24 to i64
  %26 = add nsw i32 %20, %21
  %27 = tail call ptr @sf_new(i32 noundef %26, i32 noundef %19) #44
  %28 = getelementptr inbounds %struct.set_family, ptr %27, i64 0, i32 3
  %29 = load <2 x i32>, ptr %3, align 4, !tbaa !16
  %30 = load <2 x i32>, ptr %6, align 4, !tbaa !16
  %31 = add nsw <2 x i32> %30, %29
  store <2 x i32> %31, ptr %28, align 4, !tbaa !16
  %32 = getelementptr inbounds %struct.set_family, ptr %27, i64 0, i32 5
  %33 = load ptr, ptr %32, align 8, !tbaa !33
  %34 = icmp sgt i32 %24, 0
  br i1 %34, label %35, label %47

35:                                               ; preds = %18
  %36 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %37 = load ptr, ptr %36, align 8, !tbaa !33
  br label %38

38:                                               ; preds = %38, %35
  %39 = phi i64 [ %45, %38 ], [ 0, %35 ]
  %40 = phi ptr [ %44, %38 ], [ %33, %35 ]
  %41 = phi ptr [ %42, %38 ], [ %37, %35 ]
  %42 = getelementptr inbounds i32, ptr %41, i64 1
  %43 = load i32, ptr %41, align 4, !tbaa !16
  %44 = getelementptr inbounds i32, ptr %40, i64 1
  store i32 %43, ptr %40, align 4, !tbaa !16
  %45 = add nuw nsw i64 %39, 1
  %46 = icmp eq i64 %45, %25
  br i1 %46, label %47, label %38

47:                                               ; preds = %38, %18
  %48 = icmp sgt i32 %22, 0
  br i1 %48, label %49, label %62

49:                                               ; preds = %47
  %50 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 5
  %51 = load ptr, ptr %50, align 8, !tbaa !33
  %52 = getelementptr i32, ptr %33, i64 %25
  br label %53

53:                                               ; preds = %53, %49
  %54 = phi i64 [ %60, %53 ], [ 0, %49 ]
  %55 = phi ptr [ %59, %53 ], [ %52, %49 ]
  %56 = phi ptr [ %57, %53 ], [ %51, %49 ]
  %57 = getelementptr inbounds i32, ptr %56, i64 1
  %58 = load i32, ptr %56, align 4, !tbaa !16
  %59 = getelementptr inbounds i32, ptr %55, i64 1
  store i32 %58, ptr %55, align 4, !tbaa !16
  %60 = add nuw nsw i64 %54, 1
  %61 = icmp eq i64 %60, %23
  br i1 %61, label %62, label %53

62:                                               ; preds = %53, %47
  ret ptr %27
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn uwtable
define internal ptr @sf_new(i32 noundef %0, i32 noundef %1) #37 {
  %3 = load ptr, ptr @set_family_garbage, align 8, !tbaa !13
  %4 = icmp eq ptr %3, null
  br i1 %4, label %5, label %7

5:                                                ; preds = %2
  %6 = tail call noalias dereferenceable_or_null(40) ptr @malloc(i64 noundef 40) #42
  br label %10

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.set_family, ptr %3, i64 0, i32 6
  %9 = load ptr, ptr %8, align 8, !tbaa !159
  store ptr %9, ptr @set_family_garbage, align 8, !tbaa !13
  br label %10

10:                                               ; preds = %7, %5
  %11 = phi ptr [ %6, %5 ], [ %3, %7 ]
  %12 = getelementptr inbounds %struct.set_family, ptr %11, i64 0, i32 1
  store i32 %1, ptr %12, align 4, !tbaa !44
  %13 = icmp slt i32 %1, 33
  %14 = add nsw i32 %1, -1
  %15 = lshr i32 %14, 5
  %16 = add nuw nsw i32 %15, 2
  %17 = select i1 %13, i32 2, i32 %16
  store i32 %17, ptr %11, align 8, !tbaa !34
  %18 = getelementptr inbounds %struct.set_family, ptr %11, i64 0, i32 2
  store i32 %0, ptr %18, align 8, !tbaa !157
  %19 = sext i32 %0 to i64
  %20 = zext i32 %17 to i64
  %21 = shl nsw i64 %19, 2
  %22 = mul nsw i64 %21, %20
  %23 = tail call noalias ptr @malloc(i64 noundef %22) #42
  %24 = getelementptr inbounds %struct.set_family, ptr %11, i64 0, i32 5
  store ptr %23, ptr %24, align 8, !tbaa !33
  %25 = getelementptr inbounds %struct.set_family, ptr %11, i64 0, i32 3
  store i32 0, ptr %25, align 4, !tbaa !31
  %26 = getelementptr inbounds %struct.set_family, ptr %11, i64 0, i32 4
  store i32 0, ptr %26, align 8, !tbaa !114
  ret ptr %11
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @sf_append(ptr noundef returned %0, ptr noundef %1) #0 {
  %3 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %4 = load i32, ptr %3, align 4, !tbaa !31
  %5 = load i32, ptr %0, align 8, !tbaa !34
  %6 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 3
  %7 = load i32, ptr %6, align 4, !tbaa !31
  %8 = load i32, ptr %1, align 8, !tbaa !34
  %9 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 1
  %10 = load i32, ptr %9, align 4, !tbaa !44
  %11 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 1
  %12 = load i32, ptr %11, align 4, !tbaa !44
  %13 = icmp eq i32 %10, %12
  br i1 %13, label %17, label %14

14:                                               ; preds = %2
  tail call void (ptr, ...) @fatal(ptr noundef nonnull @.str.1.482) #43
  %15 = load i32, ptr %3, align 4, !tbaa !31
  %16 = load i32, ptr %6, align 4, !tbaa !31
  br label %17

17:                                               ; preds = %14, %2
  %18 = phi i32 [ %16, %14 ], [ %7, %2 ]
  %19 = phi i32 [ %15, %14 ], [ %4, %2 ]
  %20 = add nsw i32 %18, %19
  %21 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 2
  store i32 %20, ptr %21, align 8, !tbaa !157
  %22 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %23 = load ptr, ptr %22, align 8, !tbaa !33
  %24 = icmp eq ptr %23, null
  %25 = sext i32 %20 to i64
  %26 = load i32, ptr %0, align 8, !tbaa !34
  %27 = sext i32 %26 to i64
  %28 = shl nsw i64 %25, 2
  %29 = mul i64 %28, %27
  br i1 %24, label %32, label %30

30:                                               ; preds = %17
  %31 = tail call ptr @realloc(ptr noundef nonnull %23, i64 noundef %29) #51
  br label %34

32:                                               ; preds = %17
  %33 = tail call noalias ptr @malloc(i64 noundef %29) #42
  br label %34

34:                                               ; preds = %32, %30
  %35 = phi ptr [ %31, %30 ], [ %33, %32 ]
  %36 = mul nsw i32 %8, %7
  %37 = sext i32 %36 to i64
  store ptr %35, ptr %22, align 8, !tbaa !33
  %38 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 5
  %39 = load ptr, ptr %38, align 8, !tbaa !33
  %40 = icmp sgt i32 %36, 0
  br i1 %40, label %41, label %54

41:                                               ; preds = %34
  %42 = mul nsw i32 %5, %4
  %43 = sext i32 %42 to i64
  %44 = getelementptr i32, ptr %35, i64 %43
  br label %45

45:                                               ; preds = %45, %41
  %46 = phi i64 [ %52, %45 ], [ 0, %41 ]
  %47 = phi ptr [ %51, %45 ], [ %44, %41 ]
  %48 = phi ptr [ %49, %45 ], [ %39, %41 ]
  %49 = getelementptr inbounds i32, ptr %48, i64 1
  %50 = load i32, ptr %48, align 4, !tbaa !16
  %51 = getelementptr inbounds i32, ptr %47, i64 1
  store i32 %50, ptr %47, align 4, !tbaa !16
  %52 = add nuw nsw i64 %46, 1
  %53 = icmp eq i64 %52, %37
  br i1 %53, label %54, label %45

54:                                               ; preds = %45, %34
  %55 = load <2 x i32>, ptr %6, align 4, !tbaa !16
  %56 = load <2 x i32>, ptr %3, align 4, !tbaa !16
  %57 = add nsw <2 x i32> %56, %55
  store <2 x i32> %57, ptr %3, align 4, !tbaa !16
  %58 = icmp eq ptr %39, null
  br i1 %58, label %60, label %59

59:                                               ; preds = %54
  tail call void @free(ptr noundef nonnull %39) #43
  store ptr null, ptr %38, align 8, !tbaa !33
  br label %60

60:                                               ; preds = %59, %54
  %61 = load ptr, ptr @set_family_garbage, align 8, !tbaa !13
  %62 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 6
  store ptr %61, ptr %62, align 8, !tbaa !159
  store ptr %1, ptr @set_family_garbage, align 8, !tbaa !13
  ret ptr %0
}

; Function Attrs: nofree nounwind optsize uwtable
define internal ptr @sf_save(ptr nocapture noundef readonly %0) #14 {
  %2 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %3 = load i32, ptr %2, align 4, !tbaa !31
  %4 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 1
  %5 = load i32, ptr %4, align 4, !tbaa !44
  %6 = tail call ptr @sf_new(i32 noundef %3, i32 noundef %5) #44
  %7 = tail call ptr @sf_copy(ptr noundef %6, ptr noundef %0) #44
  ret ptr %6
}

; Function Attrs: mustprogress nounwind optsize willreturn uwtable
define internal void @sf_free(ptr noundef %0) #30 {
  %2 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %3 = load ptr, ptr %2, align 8, !tbaa !33
  %4 = icmp eq ptr %3, null
  br i1 %4, label %6, label %5

5:                                                ; preds = %1
  tail call void @free(ptr noundef nonnull %3) #43
  store ptr null, ptr %2, align 8, !tbaa !33
  br label %6

6:                                                ; preds = %5, %1
  %7 = load ptr, ptr @set_family_garbage, align 8, !tbaa !13
  %8 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 6
  store ptr %7, ptr %8, align 8, !tbaa !159
  store ptr %0, ptr @set_family_garbage, align 8, !tbaa !13
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @sf_cleanup() #0 {
  %1 = load ptr, ptr @set_family_garbage, align 8, !tbaa !13
  %2 = icmp eq ptr %1, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %3, %0
  %4 = phi ptr [ %6, %3 ], [ %1, %0 ]
  %5 = getelementptr inbounds %struct.set_family, ptr %4, i64 0, i32 6
  %6 = load ptr, ptr %5, align 8, !tbaa !159
  tail call void @free(ptr noundef nonnull %4) #43
  %7 = icmp eq ptr %6, null
  br i1 %7, label %8, label %3

8:                                                ; preds = %3, %0
  store ptr null, ptr @set_family_garbage, align 8, !tbaa !13
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @sf_addset(ptr noundef returned %0, ptr nocapture noundef readonly %1) #0 {
  %3 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %4 = load i32, ptr %3, align 4, !tbaa !31
  %5 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 2
  %6 = load i32, ptr %5, align 8, !tbaa !157
  %7 = icmp slt i32 %4, %6
  br i1 %7, label %8, label %11

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %10 = load ptr, ptr %9, align 8, !tbaa !33
  br label %31

11:                                               ; preds = %2
  %12 = sdiv i32 %6, 2
  %13 = add i32 %6, 1
  %14 = add i32 %13, %12
  store i32 %14, ptr %5, align 8, !tbaa !157
  %15 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %16 = load ptr, ptr %15, align 8, !tbaa !33
  %17 = icmp eq ptr %16, null
  %18 = sext i32 %14 to i64
  %19 = load i32, ptr %0, align 8, !tbaa !34
  %20 = sext i32 %19 to i64
  %21 = shl nsw i64 %18, 2
  %22 = mul i64 %21, %20
  br i1 %17, label %26, label %23

23:                                               ; preds = %11
  %24 = tail call ptr @realloc(ptr noundef nonnull %16, i64 noundef %22) #51
  %25 = load i32, ptr %3, align 4, !tbaa !31
  br label %28

26:                                               ; preds = %11
  %27 = tail call noalias ptr @malloc(i64 noundef %22) #42
  br label %28

28:                                               ; preds = %26, %23
  %29 = phi i32 [ %25, %23 ], [ %4, %26 ]
  %30 = phi ptr [ %24, %23 ], [ %27, %26 ]
  store ptr %30, ptr %15, align 8, !tbaa !33
  br label %31

31:                                               ; preds = %28, %8
  %32 = phi i32 [ %4, %8 ], [ %29, %28 ]
  %33 = phi ptr [ %10, %8 ], [ %30, %28 ]
  %34 = load i32, ptr %0, align 8, !tbaa !34
  %35 = add nsw i32 %32, 1
  store i32 %35, ptr %3, align 4, !tbaa !31
  %36 = mul nsw i32 %32, %34
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds i32, ptr %33, i64 %37
  %39 = load i32, ptr %1, align 4, !tbaa !16
  %40 = and i32 %39, 1023
  %41 = zext i32 %40 to i64
  br label %42

42:                                               ; preds = %42, %31
  %43 = phi i64 [ %47, %42 ], [ %41, %31 ]
  %44 = getelementptr inbounds i32, ptr %1, i64 %43
  %45 = load i32, ptr %44, align 4, !tbaa !16
  %46 = getelementptr inbounds i32, ptr %38, i64 %43
  store i32 %45, ptr %46, align 4, !tbaa !16
  %47 = add nsw i64 %43, -1
  %48 = icmp eq i64 %43, 0
  br i1 %48, label %49, label %42

49:                                               ; preds = %42
  ret ptr %0
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @sf_delset(ptr nocapture noundef %0, i32 noundef %1) #21 {
  %3 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %4 = load ptr, ptr %3, align 8, !tbaa !33
  %5 = load i32, ptr %0, align 8, !tbaa !34
  %6 = mul nsw i32 %5, %1
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds i32, ptr %4, i64 %7
  %9 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %10 = load i32, ptr %9, align 4, !tbaa !31
  %11 = add nsw i32 %10, -1
  store i32 %11, ptr %9, align 4, !tbaa !31
  %12 = mul nsw i32 %11, %5
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds i32, ptr %4, i64 %13
  %15 = load i32, ptr %14, align 4, !tbaa !16
  %16 = and i32 %15, 1023
  %17 = zext i32 %16 to i64
  br label %18

18:                                               ; preds = %18, %2
  %19 = phi i64 [ %23, %18 ], [ %17, %2 ]
  %20 = getelementptr inbounds i32, ptr %14, i64 %19
  %21 = load i32, ptr %20, align 4, !tbaa !16
  %22 = getelementptr inbounds i32, ptr %8, i64 %19
  store i32 %21, ptr %22, align 4, !tbaa !16
  %23 = add nsw i64 %19, -1
  %24 = icmp eq i64 %19, 0
  br i1 %24, label %25, label %18

25:                                               ; preds = %18
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @sf_print(ptr nocapture noundef readonly %0) #14 {
  %2 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %3 = load i32, ptr %2, align 4, !tbaa !31
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %5, label %19

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %7 = load ptr, ptr %6, align 8, !tbaa !33
  br label %8

8:                                                ; preds = %8, %5
  %9 = phi i32 [ %16, %8 ], [ 0, %5 ]
  %10 = phi ptr [ %15, %8 ], [ %7, %5 ]
  %11 = tail call ptr @ps1(ptr noundef %10) #44
  %12 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.493, i32 noundef %9, ptr noundef nonnull @s1) #44
  %13 = load i32, ptr %0, align 8, !tbaa !34
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds i32, ptr %10, i64 %14
  %16 = add nuw nsw i32 %9, 1
  %17 = load i32, ptr %2, align 4, !tbaa !31
  %18 = icmp slt i32 %16, %17
  br i1 %18, label %8, label %19

19:                                               ; preds = %8, %1
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(write, argmem: read, inaccessiblemem: none) uwtable
define internal nonnull ptr @ps1(ptr nocapture noundef readonly %0) #38 {
  %2 = alloca [20 x i8], align 16
  %3 = load i32, ptr %0, align 4, !tbaa !16
  %4 = shl i32 %3, 5
  %5 = and i32 %4, 32736
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %2) #45
  store i8 91, ptr @s1, align 16, !tbaa !56
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %71, label %7

7:                                                ; preds = %66, %1
  %8 = phi i32 [ %68, %66 ], [ 1, %1 ]
  %9 = phi i32 [ %69, %66 ], [ 0, %1 ]
  %10 = phi i32 [ %67, %66 ], [ 1, %1 ]
  %11 = lshr i32 %9, 5
  %12 = add nuw nsw i32 %11, 1
  %13 = zext i32 %12 to i64
  %14 = getelementptr inbounds i32, ptr %0, i64 %13
  %15 = load i32, ptr %14, align 4, !tbaa !16
  %16 = and i32 %9, 31
  %17 = shl nuw i32 1, %16
  %18 = and i32 %15, %17
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %66, label %20

20:                                               ; preds = %7
  %21 = icmp eq i32 %8, 0
  br i1 %21, label %22, label %26

22:                                               ; preds = %20
  %23 = add nsw i32 %10, 1
  %24 = sext i32 %10 to i64
  %25 = getelementptr inbounds [120 x i8], ptr @s1, i64 0, i64 %24
  store i8 44, ptr %25, align 1, !tbaa !56
  br label %26

26:                                               ; preds = %22, %20
  %27 = phi i32 [ %10, %20 ], [ %23, %22 ]
  br label %28

28:                                               ; preds = %28, %26
  %29 = phi i32 [ %39, %28 ], [ 1, %26 ]
  %30 = phi i64 [ %35, %28 ], [ 0, %26 ]
  %31 = phi i32 [ %37, %28 ], [ %9, %26 ]
  %32 = urem i32 %31, 10
  %33 = trunc i32 %32 to i8
  %34 = or i8 %33, 48
  %35 = add nuw i64 %30, 1
  %36 = getelementptr inbounds [20 x i8], ptr %2, i64 0, i64 %30
  store i8 %34, ptr %36, align 1, !tbaa !56
  %37 = udiv i32 %31, 10
  %38 = icmp ugt i32 %31, 9
  %39 = add nuw i32 %29, 1
  br i1 %38, label %28, label %40

40:                                               ; preds = %28
  %.lcssa = phi i32 [ %29, %28 ]
  %41 = sext i32 %.lcssa to i64
  %42 = sext i32 %27 to i64
  br label %43

43:                                               ; preds = %43, %40
  %44 = phi i64 [ %42, %40 ], [ %49, %43 ]
  %45 = phi i64 [ %41, %40 ], [ %46, %43 ]
  %46 = add nsw i64 %45, -1
  %47 = getelementptr inbounds [20 x i8], ptr %2, i64 0, i64 %46
  %48 = load i8, ptr %47, align 1, !tbaa !56
  %49 = add nsw i64 %44, 1
  %50 = getelementptr inbounds [120 x i8], ptr @s1, i64 0, i64 %44
  store i8 %48, ptr %50, align 1, !tbaa !56
  %51 = icmp sgt i64 %45, 1
  br i1 %51, label %43, label %52

52:                                               ; preds = %43
  %.lcssa2 = phi i64 [ %44, %43 ]
  %.lcssa1 = phi i64 [ %49, %43 ]
  %53 = trunc i64 %.lcssa2 to i32
  %54 = trunc i64 %.lcssa1 to i32
  %55 = icmp sgt i32 %53, 104
  br i1 %55, label %56, label %66

56:                                               ; preds = %52
  %.lcssa3 = phi i32 [ %53, %52 ]
  %.lcssa2.lcssa = phi i64 [ %.lcssa2, %52 ]
  %.lcssa1.lcssa = phi i64 [ %.lcssa1, %52 ]
  %57 = add i64 %.lcssa2.lcssa, 2
  %58 = and i64 %.lcssa1.lcssa, 4294967295
  %59 = getelementptr inbounds [120 x i8], ptr @s1, i64 0, i64 %58
  store i8 46, ptr %59, align 1, !tbaa !56
  %60 = add i64 %.lcssa2.lcssa, 3
  %61 = and i64 %57, 4294967295
  %62 = getelementptr inbounds [120 x i8], ptr @s1, i64 0, i64 %61
  store i8 46, ptr %62, align 1, !tbaa !56
  %63 = add nuw nsw i32 %.lcssa3, 4
  %64 = and i64 %60, 4294967295
  %65 = getelementptr inbounds [120 x i8], ptr @s1, i64 0, i64 %64
  store i8 46, ptr %65, align 1, !tbaa !56
  br label %71

66:                                               ; preds = %52, %7
  %67 = phi i32 [ %54, %52 ], [ %10, %7 ]
  %68 = phi i32 [ 0, %52 ], [ %8, %7 ]
  %69 = add nuw nsw i32 %9, 1
  %70 = icmp eq i32 %69, %5
  br i1 %70, label %71, label %7

71:                                               ; preds = %66, %56, %1
  %72 = phi i32 [ %63, %56 ], [ 1, %1 ], [ %67, %66 ]
  %73 = add nsw i32 %72, 1
  %74 = sext i32 %72 to i64
  %75 = getelementptr inbounds [120 x i8], ptr @s1, i64 0, i64 %74
  store i8 93, ptr %75, align 1, !tbaa !56
  %76 = sext i32 %73 to i64
  %77 = getelementptr inbounds [120 x i8], ptr @s1, i64 0, i64 %76
  store i8 0, ptr %77, align 1, !tbaa !56
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %2) #45
  ret ptr @s1
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(argmem: readwrite) uwtable
define internal void @set_adjcnt(ptr nocapture noundef readonly %0, ptr nocapture noundef %1, i32 noundef %2) #35 {
  %4 = load i32, ptr %0, align 4, !tbaa !16
  %5 = and i32 %4, 1023
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %36, label %7

7:                                                ; preds = %3
  %8 = shl nuw nsw i32 %5, 5
  %9 = and i32 %4, 1023
  %10 = zext i32 %9 to i64
  br label %13

11:                                               ; preds = %32, %13
  %12 = icmp sgt i64 %14, 1
  br i1 %12, label %13, label %36

13:                                               ; preds = %11, %7
  %14 = phi i64 [ %10, %7 ], [ %19, %11 ]
  %15 = phi i32 [ %8, %7 ], [ %16, %11 ]
  %16 = add nsw i32 %15, -32
  %17 = getelementptr inbounds i32, ptr %0, i64 %14
  %18 = load i32, ptr %17, align 4, !tbaa !16
  %19 = add nsw i64 %14, -1
  %20 = icmp eq i32 %18, 0
  br i1 %20, label %11, label %21

21:                                               ; preds = %13
  %22 = zext i32 %16 to i64
  br label %23

23:                                               ; preds = %32, %21
  %24 = phi i64 [ %22, %21 ], [ %33, %32 ]
  %25 = phi i32 [ %18, %21 ], [ %34, %32 ]
  %26 = and i32 %25, 1
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %23
  %29 = getelementptr inbounds i32, ptr %1, i64 %24
  %30 = load i32, ptr %29, align 4, !tbaa !16
  %31 = add nsw i32 %30, %2
  store i32 %31, ptr %29, align 4, !tbaa !16
  br label %32

32:                                               ; preds = %28, %23
  %33 = add nuw nsw i64 %24, 1
  %34 = lshr i32 %25, 1
  %35 = icmp ult i32 %25, 2
  br i1 %35, label %11, label %23

36:                                               ; preds = %11, %3
  ret void
}

; Function Attrs: nofree nounwind optsize memory(readwrite, argmem: read) uwtable
define internal noalias ptr @sf_count(ptr nocapture noundef readonly %0) #39 {
  %2 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 1
  %3 = load i32, ptr %2, align 4, !tbaa !44
  %4 = sext i32 %3 to i64
  %5 = shl nsw i64 %4, 2
  %6 = tail call noalias ptr @malloc(i64 noundef %5) #42
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %1
  %9 = zext i32 %3 to i64
  %10 = shl nuw nsw i64 %9, 2
  tail call void @llvm.memset.p0.i64(ptr align 4 %6, i8 0, i64 %10, i1 false), !tbaa !16
  br label %11

11:                                               ; preds = %8, %1
  %12 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %13 = load ptr, ptr %12, align 8, !tbaa !33
  %14 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %15 = load i32, ptr %14, align 4, !tbaa !31
  %16 = load i32, ptr %0, align 8, !tbaa !34
  %17 = mul nsw i32 %16, %15
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i32, ptr %13, i64 %18
  %20 = icmp sgt i32 %17, 0
  br i1 %20, label %21, label %60

21:                                               ; preds = %11
  %22 = sext i32 %16 to i64
  br label %23

23:                                               ; preds = %57, %21
  %24 = phi ptr [ %13, %21 ], [ %58, %57 ]
  %25 = load i32, ptr %24, align 4, !tbaa !16
  %26 = and i32 %25, 1023
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %57, label %28

28:                                               ; preds = %23
  %29 = shl nuw nsw i32 %26, 5
  %30 = and i32 %25, 1023
  %31 = zext i32 %30 to i64
  br label %34

32:                                               ; preds = %53, %34
  %33 = icmp sgt i64 %35, 1
  br i1 %33, label %34, label %57

34:                                               ; preds = %32, %28
  %35 = phi i64 [ %31, %28 ], [ %40, %32 ]
  %36 = phi i32 [ %29, %28 ], [ %37, %32 ]
  %37 = add nsw i32 %36, -32
  %38 = getelementptr inbounds i32, ptr %24, i64 %35
  %39 = load i32, ptr %38, align 4, !tbaa !16
  %40 = add nsw i64 %35, -1
  %41 = icmp eq i32 %39, 0
  br i1 %41, label %32, label %42

42:                                               ; preds = %34
  %43 = zext i32 %37 to i64
  br label %44

44:                                               ; preds = %53, %42
  %45 = phi i64 [ %43, %42 ], [ %54, %53 ]
  %46 = phi i32 [ %39, %42 ], [ %55, %53 ]
  %47 = and i32 %46, 1
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %53, label %49

49:                                               ; preds = %44
  %50 = getelementptr inbounds i32, ptr %6, i64 %45
  %51 = load i32, ptr %50, align 4, !tbaa !16
  %52 = add nsw i32 %51, 1
  store i32 %52, ptr %50, align 4, !tbaa !16
  br label %53

53:                                               ; preds = %49, %44
  %54 = add nuw nsw i64 %45, 1
  %55 = lshr i32 %46, 1
  %56 = icmp ult i32 %46, 2
  br i1 %56, label %32, label %44

57:                                               ; preds = %32, %23
  %58 = getelementptr inbounds i32, ptr %24, i64 %22
  %59 = icmp ult ptr %58, %19
  br i1 %59, label %23, label %60

60:                                               ; preds = %57, %11
  ret ptr %6
}

; Function Attrs: nofree nounwind optsize memory(readwrite, argmem: read) uwtable
define internal noalias ptr @sf_count_restricted(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #39 {
  %3 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 1
  %4 = load i32, ptr %3, align 4, !tbaa !44
  %5 = sext i32 %4 to i64
  %6 = shl nsw i64 %5, 2
  %7 = tail call noalias ptr @malloc(i64 noundef %6) #42
  %8 = icmp sgt i32 %4, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = shl nuw nsw i64 %10, 2
  tail call void @llvm.memset.p0.i64(ptr align 4 %7, i8 0, i64 %11, i1 false), !tbaa !16
  br label %12

12:                                               ; preds = %9, %2
  %13 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %14 = load ptr, ptr %13, align 8, !tbaa !33
  %15 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %16 = load i32, ptr %15, align 4, !tbaa !31
  %17 = load i32, ptr %0, align 8, !tbaa !34
  %18 = mul nsw i32 %17, %16
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds i32, ptr %14, i64 %19
  %21 = icmp sgt i32 %18, 0
  br i1 %21, label %22, label %67

22:                                               ; preds = %12
  %23 = sext i32 %17 to i64
  br label %24

24:                                               ; preds = %64, %22
  %25 = phi ptr [ %14, %22 ], [ %65, %64 ]
  %26 = tail call i32 @set_ord(ptr noundef %25) #44
  %27 = add nsw i32 %26, -1
  %28 = sdiv i32 1024, %27
  %29 = load i32, ptr %25, align 4, !tbaa !16
  %30 = and i32 %29, 1023
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %64, label %32

32:                                               ; preds = %24
  %33 = shl nuw nsw i32 %30, 5
  %34 = and i32 %29, 1023
  %35 = zext i32 %34 to i64
  br label %38

36:                                               ; preds = %60, %38
  %37 = icmp sgt i64 %39, 1
  br i1 %37, label %38, label %64

38:                                               ; preds = %36, %32
  %39 = phi i64 [ %35, %32 ], [ %47, %36 ]
  %40 = phi i32 [ %33, %32 ], [ %41, %36 ]
  %41 = add nsw i32 %40, -32
  %42 = getelementptr inbounds i32, ptr %25, i64 %39
  %43 = load i32, ptr %42, align 4, !tbaa !16
  %44 = getelementptr inbounds i32, ptr %1, i64 %39
  %45 = load i32, ptr %44, align 4, !tbaa !16
  %46 = and i32 %45, %43
  %47 = add nsw i64 %39, -1
  %48 = icmp eq i32 %46, 0
  br i1 %48, label %36, label %49

49:                                               ; preds = %38
  %50 = zext i32 %41 to i64
  br label %51

51:                                               ; preds = %60, %49
  %52 = phi i64 [ %50, %49 ], [ %61, %60 ]
  %53 = phi i32 [ %46, %49 ], [ %62, %60 ]
  %54 = and i32 %53, 1
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %60, label %56

56:                                               ; preds = %51
  %57 = getelementptr inbounds i32, ptr %7, i64 %52
  %58 = load i32, ptr %57, align 4, !tbaa !16
  %59 = add nsw i32 %58, %28
  store i32 %59, ptr %57, align 4, !tbaa !16
  br label %60

60:                                               ; preds = %56, %51
  %61 = add nuw nsw i64 %52, 1
  %62 = lshr i32 %53, 1
  %63 = icmp ult i32 %53, 2
  br i1 %63, label %36, label %51

64:                                               ; preds = %36, %24
  %65 = getelementptr inbounds i32, ptr %25, i64 %23
  %66 = icmp ult ptr %65, %20
  br i1 %66, label %24, label %67

67:                                               ; preds = %64, %12
  ret ptr %7
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @sf_delc(ptr noundef %0, i32 noundef %1, i32 noundef %2) #0 {
  %4 = sub i32 %2, %1
  %5 = add i32 %4, 1
  %6 = tail call ptr @sf_delcol(ptr noundef %0, i32 noundef %1, i32 noundef %5) #44
  ret ptr %6
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @sf_delcol(ptr noundef %0, i32 noundef %1, i32 noundef %2) #0 {
  %4 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %5 = load i32, ptr %4, align 4, !tbaa !31
  %6 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 1
  %7 = load i32, ptr %6, align 4, !tbaa !44
  %8 = sub nsw i32 %7, %2
  %9 = tail call ptr @sf_new(i32 noundef %5, i32 noundef %8) #44
  %10 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %11 = load ptr, ptr %10, align 8, !tbaa !33
  %12 = load i32, ptr %4, align 4, !tbaa !31
  %13 = load i32, ptr %0, align 8, !tbaa !34
  %14 = mul nsw i32 %13, %12
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds i32, ptr %11, i64 %15
  %17 = icmp sgt i32 %14, 0
  br i1 %17, label %18, label %103

18:                                               ; preds = %3
  %19 = getelementptr inbounds %struct.set_family, ptr %9, i64 0, i32 5
  %20 = load ptr, ptr %19, align 8, !tbaa !33
  %21 = getelementptr inbounds %struct.set_family, ptr %9, i64 0, i32 3
  %22 = getelementptr inbounds %struct.set_family, ptr %9, i64 0, i32 1
  %23 = icmp sgt i32 %1, 0
  %24 = tail call i32 @llvm.smax.i32(i32 %2, i32 0)
  %25 = add nsw i32 %24, %1
  br label %26

26:                                               ; preds = %98, %18
  %27 = phi ptr [ %11, %18 ], [ %101, %98 ]
  %28 = load i32, ptr %9, align 8, !tbaa !34
  %29 = load i32, ptr %21, align 4, !tbaa !31
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %21, align 4, !tbaa !31
  %31 = mul nsw i32 %29, %28
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, ptr %20, i64 %32
  %34 = load i32, ptr %22, align 4, !tbaa !44
  %35 = icmp slt i32 %34, 33
  %36 = add nsw i32 %34, -1
  %37 = lshr i32 %36, 5
  %38 = add nuw nsw i32 %37, 1
  %39 = select i1 %35, i32 1, i32 %38
  store i32 %39, ptr %33, align 4, !tbaa !16
  %40 = shl nsw i64 %32, 2
  %41 = shl nuw nsw i32 %39, 2
  %42 = zext i32 %41 to i64
  %43 = add nsw i64 %40, %42
  %44 = add nsw i32 %39, -1
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 2
  %47 = sub nsw i64 %43, %46
  %48 = getelementptr i8, ptr %20, i64 %47
  %49 = add nuw nsw i64 %46, 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(1) %48, i8 0, i64 %49, i1 false), !tbaa !16
  br i1 %23, label %50, label %68

50:                                               ; preds = %65, %26
  %51 = phi i32 [ %66, %65 ], [ 0, %26 ]
  %52 = lshr i32 %51, 5
  %53 = add nuw nsw i32 %52, 1
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds i32, ptr %27, i64 %54
  %56 = load i32, ptr %55, align 4, !tbaa !16
  %57 = and i32 %51, 31
  %58 = shl nuw i32 1, %57
  %59 = and i32 %56, %58
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %65, label %61

61:                                               ; preds = %50
  %62 = getelementptr inbounds i32, ptr %33, i64 %54
  %63 = load i32, ptr %62, align 4, !tbaa !16
  %64 = or i32 %63, %58
  store i32 %64, ptr %62, align 4, !tbaa !16
  br label %65

65:                                               ; preds = %61, %50
  %66 = add nuw nsw i32 %51, 1
  %67 = icmp eq i32 %66, %1
  br i1 %67, label %68, label %50

68:                                               ; preds = %65, %26
  %69 = load i32, ptr %6, align 4, !tbaa !44
  %70 = icmp slt i32 %25, %69
  br i1 %70, label %71, label %98

71:                                               ; preds = %94, %68
  %72 = phi i32 [ %95, %94 ], [ %69, %68 ]
  %73 = phi i32 [ %96, %94 ], [ %25, %68 ]
  %74 = ashr i32 %73, 5
  %75 = add nsw i32 %74, 1
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds i32, ptr %27, i64 %76
  %78 = load i32, ptr %77, align 4, !tbaa !16
  %79 = and i32 %73, 31
  %80 = shl nuw i32 1, %79
  %81 = and i32 %78, %80
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %94, label %83

83:                                               ; preds = %71
  %84 = sub nsw i32 %73, %2
  %85 = and i32 %84, 31
  %86 = shl nuw i32 1, %85
  %87 = ashr i32 %84, 5
  %88 = add nsw i32 %87, 1
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i32, ptr %33, i64 %89
  %91 = load i32, ptr %90, align 4, !tbaa !16
  %92 = or i32 %91, %86
  store i32 %92, ptr %90, align 4, !tbaa !16
  %93 = load i32, ptr %6, align 4, !tbaa !44
  br label %94

94:                                               ; preds = %83, %71
  %95 = phi i32 [ %72, %71 ], [ %93, %83 ]
  %96 = add nsw i32 %73, 1
  %97 = icmp slt i32 %96, %95
  br i1 %97, label %71, label %98

98:                                               ; preds = %94, %68
  %99 = load i32, ptr %0, align 8, !tbaa !34
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds i32, ptr %27, i64 %100
  %102 = icmp ult ptr %101, %16
  br i1 %102, label %26, label %103

103:                                              ; preds = %98, %3
  %104 = icmp eq ptr %11, null
  br i1 %104, label %106, label %105

105:                                              ; preds = %103
  tail call void @free(ptr noundef nonnull %11) #43
  store ptr null, ptr %10, align 8, !tbaa !33
  br label %106

106:                                              ; preds = %105, %103
  %107 = load ptr, ptr @set_family_garbage, align 8, !tbaa !13
  %108 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 6
  store ptr %107, ptr %108, align 8, !tbaa !159
  store ptr %0, ptr @set_family_garbage, align 8, !tbaa !13
  ret ptr %9
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @sf_addcol(ptr noundef %0, i32 noundef %1, i32 noundef %2) #0 {
  %4 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 1
  %5 = load i32, ptr %4, align 4, !tbaa !44
  %6 = icmp eq i32 %5, %1
  br i1 %6, label %7, label %16

7:                                                ; preds = %3
  %8 = add nsw i32 %1, -1
  %9 = and i32 %8, -32
  %10 = add i32 %9, 32
  %11 = icmp sgt i32 %1, 32
  %12 = select i1 %11, i32 %10, i32 32
  %13 = add nsw i32 %1, %2
  %14 = icmp sgt i32 %13, %12
  br i1 %14, label %16, label %15

15:                                               ; preds = %7
  store i32 %13, ptr %4, align 4, !tbaa !44
  br label %19

16:                                               ; preds = %7, %3
  %17 = sub nsw i32 0, %2
  %18 = tail call ptr @sf_delcol(ptr noundef nonnull %0, i32 noundef %1, i32 noundef %17) #44
  br label %19

19:                                               ; preds = %16, %15
  %20 = phi ptr [ %0, %15 ], [ %18, %16 ]
  ret ptr %20
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal ptr @sf_copy_col(ptr noundef readonly returned %0, i32 noundef %1, ptr nocapture noundef readonly %2, i32 noundef %3) #21 {
  %5 = and i32 %3, 31
  %6 = shl nuw i32 1, %5
  %7 = and i32 %1, 31
  %8 = shl nuw i32 1, %7
  %9 = getelementptr inbounds %struct.set_family, ptr %2, i64 0, i32 5
  %10 = load ptr, ptr %9, align 8, !tbaa !33
  %11 = getelementptr inbounds %struct.set_family, ptr %2, i64 0, i32 3
  %12 = load i32, ptr %11, align 4, !tbaa !31
  %13 = load i32, ptr %2, align 8, !tbaa !34
  %14 = mul nsw i32 %13, %12
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds i32, ptr %10, i64 %15
  %17 = icmp sgt i32 %14, 0
  br i1 %17, label %18, label %48

18:                                               ; preds = %4
  %19 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %20 = load ptr, ptr %19, align 8, !tbaa !33
  %21 = ashr i32 %1, 5
  %22 = add nsw i32 %21, 1
  %23 = ashr i32 %3, 5
  %24 = add nsw i32 %23, 1
  %25 = sext i32 %24 to i64
  %26 = sext i32 %22 to i64
  br label %27

27:                                               ; preds = %40, %18
  %28 = phi i32 [ %13, %18 ], [ %41, %40 ]
  %29 = phi ptr [ %10, %18 ], [ %46, %40 ]
  %30 = phi ptr [ %20, %18 ], [ %44, %40 ]
  %31 = getelementptr inbounds i32, ptr %29, i64 %25
  %32 = load i32, ptr %31, align 4, !tbaa !16
  %33 = and i32 %32, %6
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %40, label %35

35:                                               ; preds = %27
  %36 = getelementptr inbounds i32, ptr %30, i64 %26
  %37 = load i32, ptr %36, align 4, !tbaa !16
  %38 = or i32 %37, %8
  store i32 %38, ptr %36, align 4, !tbaa !16
  %39 = load i32, ptr %2, align 8, !tbaa !34
  br label %40

40:                                               ; preds = %35, %27
  %41 = phi i32 [ %39, %35 ], [ %28, %27 ]
  %42 = load i32, ptr %0, align 8, !tbaa !34
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds i32, ptr %30, i64 %43
  %45 = sext i32 %41 to i64
  %46 = getelementptr inbounds i32, ptr %29, i64 %45
  %47 = icmp ult ptr %46, %16
  br i1 %47, label %27, label %48

48:                                               ; preds = %40, %4
  ret ptr %0
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @sf_compress(ptr noundef %0, ptr nocapture noundef readonly %1) #0 {
  %3 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %4 = load i32, ptr %3, align 4, !tbaa !31
  %5 = tail call i32 @set_ord(ptr noundef %1) #44
  %6 = tail call ptr @sf_new(i32 noundef %4, i32 noundef %5) #44
  %7 = load i32, ptr %3, align 4, !tbaa !31
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %14

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.set_family, ptr %6, i64 0, i32 5
  %11 = load ptr, ptr %10, align 8, !tbaa !33
  %12 = getelementptr inbounds %struct.set_family, ptr %6, i64 0, i32 3
  %13 = getelementptr inbounds %struct.set_family, ptr %6, i64 0, i32 1
  br label %18

14:                                               ; preds = %18, %2
  %15 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 1
  %16 = load i32, ptr %15, align 4, !tbaa !44
  %17 = icmp sgt i32 %16, 0
  br i1 %17, label %45, label %67

18:                                               ; preds = %18, %9
  %19 = phi i32 [ 0, %9 ], [ %42, %18 ]
  %20 = load i32, ptr %6, align 8, !tbaa !34
  %21 = load i32, ptr %12, align 4, !tbaa !31
  %22 = add nsw i32 %21, 1
  store i32 %22, ptr %12, align 4, !tbaa !31
  %23 = mul nsw i32 %21, %20
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds i32, ptr %11, i64 %24
  %26 = load i32, ptr %13, align 4, !tbaa !44
  %27 = icmp slt i32 %26, 33
  %28 = add nsw i32 %26, -1
  %29 = lshr i32 %28, 5
  %30 = add nuw nsw i32 %29, 1
  %31 = select i1 %27, i32 1, i32 %30
  store i32 %31, ptr %25, align 4, !tbaa !16
  %32 = shl nsw i64 %24, 2
  %33 = shl nuw nsw i32 %31, 2
  %34 = zext i32 %33 to i64
  %35 = add nsw i64 %32, %34
  %36 = add nsw i32 %31, -1
  %37 = zext i32 %36 to i64
  %38 = shl nuw nsw i64 %37, 2
  %39 = sub nsw i64 %35, %38
  %40 = getelementptr i8, ptr %11, i64 %39
  %41 = add nuw nsw i64 %38, 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(1) %40, i8 0, i64 %41, i1 false), !tbaa !16
  %42 = add nuw nsw i32 %19, 1
  %43 = load i32, ptr %3, align 4, !tbaa !31
  %44 = icmp slt i32 %42, %43
  br i1 %44, label %18, label %14

45:                                               ; preds = %62, %14
  %46 = phi i32 [ %63, %62 ], [ %16, %14 ]
  %47 = phi i32 [ %65, %62 ], [ 0, %14 ]
  %48 = phi i32 [ %64, %62 ], [ 0, %14 ]
  %49 = lshr i32 %47, 5
  %50 = add nuw nsw i32 %49, 1
  %51 = zext i32 %50 to i64
  %52 = getelementptr inbounds i32, ptr %1, i64 %51
  %53 = load i32, ptr %52, align 4, !tbaa !16
  %54 = and i32 %47, 31
  %55 = shl nuw i32 1, %54
  %56 = and i32 %53, %55
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %62, label %58

58:                                               ; preds = %45
  %59 = add nsw i32 %48, 1
  %60 = tail call ptr @sf_copy_col(ptr noundef %6, i32 noundef %48, ptr noundef nonnull %0, i32 noundef %47) #44
  %61 = load i32, ptr %15, align 4, !tbaa !44
  br label %62

62:                                               ; preds = %58, %45
  %63 = phi i32 [ %61, %58 ], [ %46, %45 ]
  %64 = phi i32 [ %59, %58 ], [ %48, %45 ]
  %65 = add nuw nsw i32 %47, 1
  %66 = icmp slt i32 %65, %63
  br i1 %66, label %45, label %67

67:                                               ; preds = %62, %14
  %68 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %69 = load ptr, ptr %68, align 8, !tbaa !33
  %70 = icmp eq ptr %69, null
  br i1 %70, label %72, label %71

71:                                               ; preds = %67
  tail call void @free(ptr noundef nonnull %69) #43
  store ptr null, ptr %68, align 8, !tbaa !33
  br label %72

72:                                               ; preds = %71, %67
  %73 = load ptr, ptr @set_family_garbage, align 8, !tbaa !13
  %74 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 6
  store ptr %73, ptr %74, align 8, !tbaa !159
  store ptr %0, ptr @set_family_garbage, align 8, !tbaa !13
  ret ptr %6
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @sf_permute(ptr noundef %0, ptr nocapture noundef readonly %1, i32 noundef %2) #0 {
  %4 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %5 = load i32, ptr %4, align 4, !tbaa !31
  %6 = tail call ptr @sf_new(i32 noundef %5, i32 noundef %2) #44
  %7 = load i32, ptr %4, align 4, !tbaa !31
  %8 = getelementptr inbounds %struct.set_family, ptr %6, i64 0, i32 3
  store i32 %7, ptr %8, align 4, !tbaa !31
  %9 = getelementptr inbounds %struct.set_family, ptr %6, i64 0, i32 5
  %10 = load ptr, ptr %9, align 8, !tbaa !33
  %11 = load i32, ptr %6, align 8, !tbaa !34
  %12 = mul nsw i32 %11, %7
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds i32, ptr %10, i64 %13
  %15 = icmp sgt i32 %12, 0
  br i1 %15, label %16, label %36

16:                                               ; preds = %3
  %17 = icmp slt i32 %2, 33
  %18 = add nsw i32 %2, -1
  %19 = lshr i32 %18, 5
  %20 = add nuw nsw i32 %19, 1
  %21 = select i1 %17, i32 1, i32 %20
  %22 = shl nuw nsw i32 %21, 2
  %23 = zext i32 %22 to i64
  %24 = add nsw i32 %21, -1
  %25 = zext i32 %24 to i64
  %26 = shl nuw nsw i64 %25, 2
  %27 = sub nsw i64 %23, %26
  %28 = add nuw nsw i64 %26, 4
  br label %29

29:                                               ; preds = %29, %16
  %30 = phi ptr [ %10, %16 ], [ %34, %29 ]
  store i32 %21, ptr %30, align 4, !tbaa !16
  %31 = getelementptr i8, ptr %30, i64 %27
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(1) %31, i8 0, i64 %28, i1 false), !tbaa !16
  %32 = load i32, ptr %6, align 8, !tbaa !34
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds i32, ptr %30, i64 %33
  %35 = icmp ult ptr %34, %14
  br i1 %35, label %29, label %36

36:                                               ; preds = %29, %3
  %37 = phi i32 [ %11, %3 ], [ %32, %29 ]
  %38 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %39 = load ptr, ptr %38, align 8, !tbaa !33
  %40 = load i32, ptr %4, align 4, !tbaa !31
  %41 = load i32, ptr %0, align 8, !tbaa !34
  %42 = mul nsw i32 %41, %40
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds i32, ptr %39, i64 %43
  %45 = icmp sgt i32 %42, 0
  br i1 %45, label %46, label %91

46:                                               ; preds = %36
  %47 = icmp sgt i32 %2, 0
  %48 = zext i32 %2 to i64
  br label %49

49:                                               ; preds = %83, %46
  %50 = phi i32 [ %41, %46 ], [ %84, %83 ]
  %51 = phi i32 [ %37, %46 ], [ %85, %83 ]
  %52 = phi ptr [ %10, %46 ], [ %87, %83 ]
  %53 = phi ptr [ %39, %46 ], [ %89, %83 ]
  br i1 %47, label %54, label %83

54:                                               ; preds = %77, %49
  %55 = phi i64 [ %78, %77 ], [ 0, %49 ]
  %56 = getelementptr inbounds i32, ptr %1, i64 %55
  %57 = load i32, ptr %56, align 4, !tbaa !16
  %58 = ashr i32 %57, 5
  %59 = add nsw i32 %58, 1
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds i32, ptr %53, i64 %60
  %62 = load i32, ptr %61, align 4, !tbaa !16
  %63 = and i32 %57, 31
  %64 = shl nuw i32 1, %63
  %65 = and i32 %64, %62
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %77, label %67

67:                                               ; preds = %54
  %68 = trunc i64 %55 to i32
  %69 = and i32 %68, 31
  %70 = shl nuw i32 1, %69
  %71 = lshr i32 %68, 5
  %72 = add nuw nsw i32 %71, 1
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds i32, ptr %52, i64 %73
  %75 = load i32, ptr %74, align 4, !tbaa !16
  %76 = or i32 %75, %70
  store i32 %76, ptr %74, align 4, !tbaa !16
  br label %77

77:                                               ; preds = %67, %54
  %78 = add nuw nsw i64 %55, 1
  %79 = icmp eq i64 %78, %48
  br i1 %79, label %80, label %54

80:                                               ; preds = %77
  %81 = load i32, ptr %6, align 8, !tbaa !34
  %82 = load i32, ptr %0, align 8, !tbaa !34
  br label %83

83:                                               ; preds = %80, %49
  %84 = phi i32 [ %82, %80 ], [ %50, %49 ]
  %85 = phi i32 [ %81, %80 ], [ %51, %49 ]
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds i32, ptr %52, i64 %86
  %88 = sext i32 %84 to i64
  %89 = getelementptr inbounds i32, ptr %53, i64 %88
  %90 = icmp ult ptr %89, %44
  br i1 %90, label %49, label %91

91:                                               ; preds = %83, %36
  %92 = icmp eq ptr %39, null
  br i1 %92, label %94, label %93

93:                                               ; preds = %91
  tail call void @free(ptr noundef nonnull %39) #43
  store ptr null, ptr %38, align 8, !tbaa !33
  br label %94

94:                                               ; preds = %93, %91
  %95 = load ptr, ptr @set_family_garbage, align 8, !tbaa !13
  %96 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 6
  store ptr %95, ptr %96, align 8, !tbaa !159
  store ptr %0, ptr @set_family_garbage, align 8, !tbaa !13
  ret ptr %6
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @full_row(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #8 {
  %3 = load i32, ptr %0, align 4, !tbaa !16
  %4 = and i32 %3, 1023
  %5 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 12), align 8, !tbaa !15
  br label %6

6:                                                ; preds = %17, %2
  %7 = phi i32 [ %4, %2 ], [ %18, %17 ]
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds i32, ptr %0, i64 %8
  %10 = load i32, ptr %9, align 4, !tbaa !16
  %11 = getelementptr inbounds i32, ptr %1, i64 %8
  %12 = load i32, ptr %11, align 4, !tbaa !16
  %13 = or i32 %12, %10
  %14 = getelementptr inbounds i32, ptr %5, i64 %8
  %15 = load i32, ptr %14, align 4, !tbaa !16
  %16 = icmp eq i32 %13, %15
  br i1 %16, label %17, label %20

17:                                               ; preds = %6
  %18 = add nsw i32 %7, -1
  %19 = icmp sgt i32 %7, 1
  br i1 %19, label %6, label %20

20:                                               ; preds = %17, %6
  %21 = phi i32 [ 0, %6 ], [ 1, %17 ]
  ret i32 %21
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @cdist0(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #8 {
  %3 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 15), align 4, !tbaa !50
  %4 = icmp eq i32 %3, -1
  br i1 %4, label %36, label %5

5:                                                ; preds = %2
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i32, ptr %0, i64 %6
  %8 = load i32, ptr %7, align 4, !tbaa !16
  %9 = getelementptr inbounds i32, ptr %1, i64 %6
  %10 = load i32, ptr %9, align 4, !tbaa !16
  %11 = and i32 %10, %8
  %12 = lshr i32 %11, 1
  %13 = or i32 %12, %11
  %14 = xor i32 %13, -1
  %15 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 14), align 8, !tbaa !51
  %16 = and i32 %15, %14
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %82

18:                                               ; preds = %5
  %19 = icmp sgt i32 %3, 1
  br i1 %19, label %20, label %36

20:                                               ; preds = %18
  %21 = zext i32 %3 to i64
  br label %25

22:                                               ; preds = %25
  %23 = add nuw nsw i64 %26, 1
  %24 = icmp eq i64 %23, %21
  br i1 %24, label %36, label %25

25:                                               ; preds = %22, %20
  %26 = phi i64 [ 1, %20 ], [ %23, %22 ]
  %27 = getelementptr inbounds i32, ptr %0, i64 %26
  %28 = load i32, ptr %27, align 4, !tbaa !16
  %29 = getelementptr inbounds i32, ptr %1, i64 %26
  %30 = load i32, ptr %29, align 4, !tbaa !16
  %31 = and i32 %30, %28
  %32 = lshr i32 %31, 1
  %33 = or i32 %32, %31
  %34 = and i32 %33, 1431655765
  %35 = icmp eq i32 %34, 1431655765
  br i1 %35, label %22, label %82

36:                                               ; preds = %22, %18, %2
  %37 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %38 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %40, label %79

40:                                               ; preds = %36
  %41 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %42 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 7), align 8, !tbaa !18
  %43 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 6), align 8, !tbaa !19
  %44 = sext i32 %37 to i64
  %45 = sext i32 %38 to i64
  br label %46

46:                                               ; preds = %74, %40
  %47 = phi i64 [ %44, %40 ], [ %75, %74 ]
  %48 = phi i1 [ false, %40 ], [ %76, %74 ]
  %49 = getelementptr inbounds ptr, ptr %41, i64 %47
  %50 = load ptr, ptr %49, align 8, !tbaa !13
  %51 = getelementptr inbounds i32, ptr %42, i64 %47
  %52 = load i32, ptr %51, align 4, !tbaa !16
  %53 = getelementptr inbounds i32, ptr %43, i64 %47
  %54 = load i32, ptr %53, align 4, !tbaa !16
  %55 = icmp sgt i32 %54, %52
  br i1 %55, label %79, label %56

56:                                               ; preds = %46
  %57 = sext i32 %54 to i64
  %58 = add i32 %52, 1
  br label %63

59:                                               ; preds = %63
  %60 = add nsw i64 %64, 1
  %61 = trunc i64 %60 to i32
  %62 = icmp eq i32 %58, %61
  br i1 %62, label %79, label %63

63:                                               ; preds = %59, %56
  %64 = phi i64 [ %57, %56 ], [ %60, %59 ]
  %65 = getelementptr inbounds i32, ptr %0, i64 %64
  %66 = load i32, ptr %65, align 4, !tbaa !16
  %67 = getelementptr inbounds i32, ptr %1, i64 %64
  %68 = load i32, ptr %67, align 4, !tbaa !16
  %69 = and i32 %68, %66
  %70 = getelementptr inbounds i32, ptr %50, i64 %64
  %71 = load i32, ptr %70, align 4, !tbaa !16
  %72 = and i32 %69, %71
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %59, label %74

74:                                               ; preds = %63
  %75 = add nsw i64 %47, 1
  %76 = icmp sge i64 %75, %45
  %77 = trunc i64 %75 to i32
  %78 = icmp eq i32 %38, %77
  br i1 %78, label %79, label %46

79:                                               ; preds = %74, %59, %46, %36
  %80 = phi i1 [ true, %36 ], [ %48, %59 ], [ %48, %46 ], [ %76, %74 ]
  %81 = zext i1 %80 to i32
  br label %82

82:                                               ; preds = %79, %25, %5
  %83 = phi i32 [ %81, %79 ], [ 0, %5 ], [ 0, %25 ]
  ret i32 %83
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @cdist01(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #8 {
  %3 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 15), align 4, !tbaa !50
  %4 = icmp eq i32 %3, -1
  br i1 %4, label %89, label %5

5:                                                ; preds = %2
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i32, ptr %0, i64 %6
  %8 = load i32, ptr %7, align 4, !tbaa !16
  %9 = getelementptr inbounds i32, ptr %1, i64 %6
  %10 = load i32, ptr %9, align 4, !tbaa !16
  %11 = and i32 %10, %8
  %12 = lshr i32 %11, 1
  %13 = or i32 %12, %11
  %14 = xor i32 %13, -1
  %15 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 14), align 8, !tbaa !51
  %16 = and i32 %15, %14
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %41, label %18

18:                                               ; preds = %5
  %19 = and i32 %16, 255
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %20
  %22 = load i32, ptr %21, align 4, !tbaa !16
  %23 = lshr i32 %16, 8
  %24 = and i32 %23, 255
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %25
  %27 = load i32, ptr %26, align 4, !tbaa !16
  %28 = add nsw i32 %27, %22
  %29 = lshr i32 %16, 16
  %30 = and i32 %29, 255
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %31
  %33 = load i32, ptr %32, align 4, !tbaa !16
  %34 = add nsw i32 %28, %33
  %35 = lshr i32 %16, 24
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %36
  %38 = load i32, ptr %37, align 4, !tbaa !16
  %39 = add nsw i32 %34, %38
  %40 = icmp sgt i32 %39, 1
  br i1 %40, label %135, label %41

41:                                               ; preds = %18, %5
  %42 = phi i32 [ %39, %18 ], [ 0, %5 ]
  %43 = icmp sgt i32 %3, 1
  br i1 %43, label %44, label %89

44:                                               ; preds = %41
  %45 = zext i32 %3 to i64
  br label %46

46:                                               ; preds = %85, %44
  %47 = phi i64 [ 1, %44 ], [ %87, %85 ]
  %48 = phi i32 [ %42, %44 ], [ %86, %85 ]
  %49 = getelementptr inbounds i32, ptr %0, i64 %47
  %50 = load i32, ptr %49, align 4, !tbaa !16
  %51 = getelementptr inbounds i32, ptr %1, i64 %47
  %52 = load i32, ptr %51, align 4, !tbaa !16
  %53 = and i32 %52, %50
  %54 = lshr i32 %53, 1
  %55 = or i32 %54, %53
  %56 = and i32 %55, 1431655765
  %57 = xor i32 %56, 1431655765
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %85, label %59

59:                                               ; preds = %46
  %60 = icmp eq i32 %48, 1
  br i1 %60, label %135, label %61

61:                                               ; preds = %59
  %62 = and i32 %57, 85
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %63
  %65 = load i32, ptr %64, align 4, !tbaa !16
  %66 = lshr i32 %57, 8
  %67 = and i32 %66, 85
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %68
  %70 = load i32, ptr %69, align 4, !tbaa !16
  %71 = lshr i32 %57, 16
  %72 = and i32 %71, 85
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %73
  %75 = load i32, ptr %74, align 4, !tbaa !16
  %76 = lshr i32 %57, 24
  %77 = zext i32 %76 to i64
  %78 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %77
  %79 = load i32, ptr %78, align 4, !tbaa !16
  %80 = add i32 %65, %48
  %81 = add i32 %80, %70
  %82 = add i32 %81, %75
  %83 = add i32 %82, %79
  %84 = icmp sgt i32 %83, 1
  br i1 %84, label %135, label %85

85:                                               ; preds = %61, %46
  %86 = phi i32 [ %83, %61 ], [ %48, %46 ]
  %87 = add nuw nsw i64 %47, 1
  %88 = icmp eq i64 %87, %45
  br i1 %88, label %89, label %46

89:                                               ; preds = %85, %41, %2
  %90 = phi i32 [ 0, %2 ], [ %42, %41 ], [ %86, %85 ]
  %91 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %92 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %93 = icmp slt i32 %91, %92
  br i1 %93, label %94, label %135

94:                                               ; preds = %89
  %95 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %96 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 7), align 8, !tbaa !18
  %97 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 6), align 8, !tbaa !19
  %98 = sext i32 %91 to i64
  br label %99

99:                                               ; preds = %130, %94
  %100 = phi i64 [ %98, %94 ], [ %132, %130 ]
  %101 = phi i32 [ %90, %94 ], [ %131, %130 ]
  %102 = getelementptr inbounds ptr, ptr %95, i64 %100
  %103 = load ptr, ptr %102, align 8, !tbaa !13
  %104 = getelementptr inbounds i32, ptr %96, i64 %100
  %105 = load i32, ptr %104, align 4, !tbaa !16
  %106 = getelementptr inbounds i32, ptr %97, i64 %100
  %107 = load i32, ptr %106, align 4, !tbaa !16
  %108 = icmp sgt i32 %107, %105
  br i1 %108, label %127, label %109

109:                                              ; preds = %99
  %110 = sext i32 %107 to i64
  %111 = add i32 %105, 1
  br label %116

112:                                              ; preds = %116
  %113 = add nsw i64 %117, 1
  %114 = trunc i64 %113 to i32
  %115 = icmp eq i32 %111, %114
  br i1 %115, label %127, label %116

116:                                              ; preds = %112, %109
  %117 = phi i64 [ %110, %109 ], [ %113, %112 ]
  %118 = getelementptr inbounds i32, ptr %0, i64 %117
  %119 = load i32, ptr %118, align 4, !tbaa !16
  %120 = getelementptr inbounds i32, ptr %1, i64 %117
  %121 = load i32, ptr %120, align 4, !tbaa !16
  %122 = and i32 %121, %119
  %123 = getelementptr inbounds i32, ptr %103, i64 %117
  %124 = load i32, ptr %123, align 4, !tbaa !16
  %125 = and i32 %122, %124
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %112, label %130

127:                                              ; preds = %112, %99
  %128 = add nsw i32 %101, 1
  %129 = icmp sgt i32 %101, 0
  br i1 %129, label %135, label %130

130:                                              ; preds = %127, %116
  %131 = phi i32 [ %128, %127 ], [ %101, %116 ]
  %132 = add nsw i64 %100, 1
  %133 = trunc i64 %132 to i32
  %134 = icmp eq i32 %92, %133
  br i1 %134, label %135, label %99

135:                                              ; preds = %130, %127, %89, %61, %59, %18
  %136 = phi i32 [ 2, %18 ], [ %90, %89 ], [ %131, %130 ], [ 2, %127 ], [ 2, %61 ], [ 2, %59 ]
  ret i32 %136
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @cdist(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #8 {
  %3 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 15), align 4, !tbaa !50
  %4 = icmp eq i32 %3, -1
  br i1 %4, label %85, label %5

5:                                                ; preds = %2
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i32, ptr %0, i64 %6
  %8 = load i32, ptr %7, align 4, !tbaa !16
  %9 = getelementptr inbounds i32, ptr %1, i64 %6
  %10 = load i32, ptr %9, align 4, !tbaa !16
  %11 = and i32 %10, %8
  %12 = lshr i32 %11, 1
  %13 = or i32 %12, %11
  %14 = xor i32 %13, -1
  %15 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 14), align 8, !tbaa !51
  %16 = and i32 %15, %14
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %40, label %18

18:                                               ; preds = %5
  %19 = and i32 %16, 255
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %20
  %22 = load i32, ptr %21, align 4, !tbaa !16
  %23 = lshr i32 %16, 8
  %24 = and i32 %23, 255
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %25
  %27 = load i32, ptr %26, align 4, !tbaa !16
  %28 = add nsw i32 %27, %22
  %29 = lshr i32 %16, 16
  %30 = and i32 %29, 255
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %31
  %33 = load i32, ptr %32, align 4, !tbaa !16
  %34 = add nsw i32 %28, %33
  %35 = lshr i32 %16, 24
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %36
  %38 = load i32, ptr %37, align 4, !tbaa !16
  %39 = add nsw i32 %34, %38
  br label %40

40:                                               ; preds = %18, %5
  %41 = phi i32 [ %39, %18 ], [ 0, %5 ]
  %42 = icmp sgt i32 %3, 1
  br i1 %42, label %43, label %85

43:                                               ; preds = %40
  %44 = zext i32 %3 to i64
  br label %45

45:                                               ; preds = %81, %43
  %46 = phi i64 [ 1, %43 ], [ %83, %81 ]
  %47 = phi i32 [ %41, %43 ], [ %82, %81 ]
  %48 = getelementptr inbounds i32, ptr %0, i64 %46
  %49 = load i32, ptr %48, align 4, !tbaa !16
  %50 = getelementptr inbounds i32, ptr %1, i64 %46
  %51 = load i32, ptr %50, align 4, !tbaa !16
  %52 = and i32 %51, %49
  %53 = lshr i32 %52, 1
  %54 = or i32 %53, %52
  %55 = and i32 %54, 1431655765
  %56 = xor i32 %55, 1431655765
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %81, label %58

58:                                               ; preds = %45
  %59 = and i32 %56, 85
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %60
  %62 = load i32, ptr %61, align 4, !tbaa !16
  %63 = lshr i32 %56, 8
  %64 = and i32 %63, 85
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %65
  %67 = load i32, ptr %66, align 4, !tbaa !16
  %68 = lshr i32 %56, 16
  %69 = and i32 %68, 85
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %70
  %72 = load i32, ptr %71, align 4, !tbaa !16
  %73 = lshr i32 %56, 24
  %74 = zext i32 %73 to i64
  %75 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %74
  %76 = load i32, ptr %75, align 4, !tbaa !16
  %77 = add i32 %62, %47
  %78 = add i32 %77, %67
  %79 = add i32 %78, %72
  %80 = add i32 %79, %76
  br label %81

81:                                               ; preds = %58, %45
  %82 = phi i32 [ %80, %58 ], [ %47, %45 ]
  %83 = add nuw nsw i64 %46, 1
  %84 = icmp eq i64 %83, %44
  br i1 %84, label %85, label %45

85:                                               ; preds = %81, %40, %2
  %86 = phi i32 [ 0, %2 ], [ %41, %40 ], [ %82, %81 ]
  %87 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %88 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %89 = icmp slt i32 %87, %88
  br i1 %89, label %90, label %130

90:                                               ; preds = %85
  %91 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %92 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 7), align 8, !tbaa !18
  %93 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 6), align 8, !tbaa !19
  %94 = sext i32 %87 to i64
  %95 = sext i32 %88 to i64
  br label %96

96:                                               ; preds = %126, %90
  %97 = phi i64 [ %94, %90 ], [ %128, %126 ]
  %98 = phi i32 [ %86, %90 ], [ %127, %126 ]
  %99 = getelementptr inbounds ptr, ptr %91, i64 %97
  %100 = load ptr, ptr %99, align 8, !tbaa !13
  %101 = getelementptr inbounds i32, ptr %92, i64 %97
  %102 = load i32, ptr %101, align 4, !tbaa !16
  %103 = getelementptr inbounds i32, ptr %93, i64 %97
  %104 = load i32, ptr %103, align 4, !tbaa !16
  %105 = icmp sgt i32 %104, %102
  br i1 %105, label %124, label %106

106:                                              ; preds = %96
  %107 = sext i32 %104 to i64
  %108 = add i32 %102, 1
  br label %113

109:                                              ; preds = %113
  %110 = add nsw i64 %114, 1
  %111 = trunc i64 %110 to i32
  %112 = icmp eq i32 %108, %111
  br i1 %112, label %124, label %113

113:                                              ; preds = %109, %106
  %114 = phi i64 [ %107, %106 ], [ %110, %109 ]
  %115 = getelementptr inbounds i32, ptr %0, i64 %114
  %116 = load i32, ptr %115, align 4, !tbaa !16
  %117 = getelementptr inbounds i32, ptr %1, i64 %114
  %118 = load i32, ptr %117, align 4, !tbaa !16
  %119 = and i32 %118, %116
  %120 = getelementptr inbounds i32, ptr %100, i64 %114
  %121 = load i32, ptr %120, align 4, !tbaa !16
  %122 = and i32 %119, %121
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %109, label %126

124:                                              ; preds = %109, %96
  %125 = add nsw i32 %98, 1
  br label %126

126:                                              ; preds = %124, %113
  %127 = phi i32 [ %125, %124 ], [ %98, %113 ]
  %128 = add nsw i64 %97, 1
  %129 = icmp eq i64 %128, %95
  br i1 %129, label %130, label %96

130:                                              ; preds = %126, %85
  %131 = phi i32 [ %86, %85 ], [ %127, %126 ]
  ret i32 %131
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal ptr @force_lower(ptr noundef returned %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2) #24 {
  %4 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 15), align 4, !tbaa !50
  %5 = icmp eq i32 %4, -1
  br i1 %5, label %51, label %6

6:                                                ; preds = %3
  %7 = sext i32 %4 to i64
  %8 = getelementptr inbounds i32, ptr %1, i64 %7
  %9 = load i32, ptr %8, align 4, !tbaa !16
  %10 = getelementptr inbounds i32, ptr %2, i64 %7
  %11 = load i32, ptr %10, align 4, !tbaa !16
  %12 = and i32 %11, %9
  %13 = lshr i32 %12, 1
  %14 = or i32 %13, %12
  %15 = xor i32 %14, -1
  %16 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 14), align 8, !tbaa !51
  %17 = and i32 %16, %15
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %26, label %19

19:                                               ; preds = %6
  %20 = shl i32 %17, 1
  %21 = or i32 %20, %17
  %22 = and i32 %21, %9
  %23 = getelementptr inbounds i32, ptr %0, i64 %7
  %24 = load i32, ptr %23, align 4, !tbaa !16
  %25 = or i32 %24, %22
  store i32 %25, ptr %23, align 4, !tbaa !16
  br label %26

26:                                               ; preds = %19, %6
  %27 = icmp sgt i32 %4, 1
  br i1 %27, label %28, label %51

28:                                               ; preds = %26
  %29 = zext i32 %4 to i64
  br label %30

30:                                               ; preds = %48, %28
  %31 = phi i64 [ 1, %28 ], [ %49, %48 ]
  %32 = getelementptr inbounds i32, ptr %1, i64 %31
  %33 = load i32, ptr %32, align 4, !tbaa !16
  %34 = getelementptr inbounds i32, ptr %2, i64 %31
  %35 = load i32, ptr %34, align 4, !tbaa !16
  %36 = and i32 %35, %33
  %37 = lshr i32 %36, 1
  %38 = or i32 %37, %36
  %39 = and i32 %38, 1431655765
  %40 = xor i32 %39, 1431655765
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %48, label %42

42:                                               ; preds = %30
  %43 = mul nuw i32 %40, 3
  %44 = and i32 %43, %33
  %45 = getelementptr inbounds i32, ptr %0, i64 %31
  %46 = load i32, ptr %45, align 4, !tbaa !16
  %47 = or i32 %46, %44
  store i32 %47, ptr %45, align 4, !tbaa !16
  br label %48

48:                                               ; preds = %42, %30
  %49 = add nuw nsw i64 %31, 1
  %50 = icmp eq i64 %49, %29
  br i1 %50, label %51, label %30

51:                                               ; preds = %48, %26, %3
  %52 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %53 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %54 = icmp slt i32 %52, %53
  br i1 %54, label %55, label %112

55:                                               ; preds = %51
  %56 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %57 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 7), align 8, !tbaa !18
  %58 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 6), align 8, !tbaa !19
  %59 = sext i32 %52 to i64
  br label %60

60:                                               ; preds = %107, %55
  %61 = phi i32 [ %53, %55 ], [ %108, %107 ]
  %62 = phi i64 [ %59, %55 ], [ %109, %107 ]
  %63 = getelementptr inbounds ptr, ptr %56, i64 %62
  %64 = load ptr, ptr %63, align 8, !tbaa !13
  %65 = getelementptr inbounds i32, ptr %57, i64 %62
  %66 = load i32, ptr %65, align 4, !tbaa !16
  %67 = getelementptr inbounds i32, ptr %58, i64 %62
  %68 = load i32, ptr %67, align 4, !tbaa !16
  %69 = icmp sgt i32 %68, %66
  br i1 %69, label %107, label %70

70:                                               ; preds = %60
  %71 = sext i32 %68 to i64
  %72 = add i32 %66, 1
  br label %81

73:                                               ; preds = %81
  %74 = add nsw i64 %82, 1
  %75 = trunc i64 %74 to i32
  %76 = icmp eq i32 %72, %75
  br i1 %76, label %77, label %81

77:                                               ; preds = %73
  br i1 %69, label %107, label %78

78:                                               ; preds = %77
  %79 = sext i32 %68 to i64
  %80 = add i32 %66, 1
  br label %92

81:                                               ; preds = %73, %70
  %82 = phi i64 [ %71, %70 ], [ %74, %73 ]
  %83 = getelementptr inbounds i32, ptr %1, i64 %82
  %84 = load i32, ptr %83, align 4, !tbaa !16
  %85 = getelementptr inbounds i32, ptr %2, i64 %82
  %86 = load i32, ptr %85, align 4, !tbaa !16
  %87 = and i32 %86, %84
  %88 = getelementptr inbounds i32, ptr %64, i64 %82
  %89 = load i32, ptr %88, align 4, !tbaa !16
  %90 = and i32 %87, %89
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %73, label %107

92:                                               ; preds = %92, %78
  %93 = phi i64 [ %79, %78 ], [ %102, %92 ]
  %94 = getelementptr inbounds i32, ptr %1, i64 %93
  %95 = load i32, ptr %94, align 4, !tbaa !16
  %96 = getelementptr inbounds i32, ptr %64, i64 %93
  %97 = load i32, ptr %96, align 4, !tbaa !16
  %98 = and i32 %97, %95
  %99 = getelementptr inbounds i32, ptr %0, i64 %93
  %100 = load i32, ptr %99, align 4, !tbaa !16
  %101 = or i32 %100, %98
  store i32 %101, ptr %99, align 4, !tbaa !16
  %102 = add nsw i64 %93, 1
  %103 = trunc i64 %102 to i32
  %104 = icmp eq i32 %80, %103
  br i1 %104, label %105, label %92

105:                                              ; preds = %92
  %106 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  br label %107

107:                                              ; preds = %105, %81, %77, %60
  %108 = phi i32 [ %106, %105 ], [ %61, %77 ], [ %61, %60 ], [ %61, %81 ]
  %109 = add nsw i64 %62, 1
  %110 = sext i32 %108 to i64
  %111 = icmp slt i64 %109, %110
  br i1 %111, label %60, label %112

112:                                              ; preds = %107, %51
  ret ptr %0
}

; Function Attrs: nofree nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal void @consensus(ptr nocapture noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2) #40 {
  %4 = load i32, ptr @cube, align 8
  %5 = icmp slt i32 %4, 33
  %6 = add nsw i32 %4, -1
  %7 = ashr i32 %6, 5
  %8 = add nsw i32 %7, 1
  %9 = select i1 %5, i32 1, i32 %8
  store i32 %9, ptr %0, align 4, !tbaa !16
  %10 = sext i32 %9 to i64
  %11 = tail call i32 @llvm.smin.i32(i32 %9, i32 1)
  %12 = sub nsw i32 %9, %11
  %13 = zext i32 %12 to i64
  %14 = shl nuw nsw i64 %13, 2
  %15 = sub nsw i64 %10, %13
  %16 = shl nsw i64 %15, 2
  %17 = getelementptr i8, ptr %0, i64 %16
  %18 = add nuw nsw i64 %14, 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(1) %17, i8 0, i64 %18, i1 false), !tbaa !16
  %19 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 15), align 4, !tbaa !50
  %20 = icmp eq i32 %19, -1
  br i1 %20, label %70, label %21

21:                                               ; preds = %3
  %22 = sext i32 %19 to i64
  %23 = getelementptr inbounds i32, ptr %1, i64 %22
  %24 = load i32, ptr %23, align 4, !tbaa !16
  %25 = getelementptr inbounds i32, ptr %2, i64 %22
  %26 = load i32, ptr %25, align 4, !tbaa !16
  %27 = and i32 %26, %24
  %28 = getelementptr inbounds i32, ptr %0, i64 %22
  store i32 %27, ptr %28, align 4, !tbaa !16
  %29 = lshr i32 %27, 1
  %30 = or i32 %29, %27
  %31 = xor i32 %30, -1
  %32 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 14), align 8, !tbaa !51
  %33 = and i32 %32, %31
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %43, label %35

35:                                               ; preds = %21
  %36 = shl i32 %33, 1
  %37 = or i32 %36, %33
  %38 = load i32, ptr %23, align 4, !tbaa !16
  %39 = load i32, ptr %25, align 4, !tbaa !16
  %40 = or i32 %39, %38
  %41 = and i32 %40, %37
  %42 = or i32 %41, %27
  store i32 %42, ptr %28, align 4, !tbaa !16
  br label %43

43:                                               ; preds = %35, %21
  %44 = icmp sgt i32 %19, 1
  br i1 %44, label %45, label %70

45:                                               ; preds = %43
  %46 = zext i32 %19 to i64
  br label %47

47:                                               ; preds = %67, %45
  %48 = phi i64 [ 1, %45 ], [ %68, %67 ]
  %49 = getelementptr inbounds i32, ptr %1, i64 %48
  %50 = load i32, ptr %49, align 4, !tbaa !16
  %51 = getelementptr inbounds i32, ptr %2, i64 %48
  %52 = load i32, ptr %51, align 4, !tbaa !16
  %53 = and i32 %52, %50
  %54 = getelementptr inbounds i32, ptr %0, i64 %48
  store i32 %53, ptr %54, align 4, !tbaa !16
  %55 = lshr i32 %53, 1
  %56 = or i32 %55, %53
  %57 = and i32 %56, 1431655765
  %58 = xor i32 %57, 1431655765
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %67, label %60

60:                                               ; preds = %47
  %61 = mul nuw i32 %58, 3
  %62 = load i32, ptr %49, align 4, !tbaa !16
  %63 = load i32, ptr %51, align 4, !tbaa !16
  %64 = or i32 %63, %62
  %65 = and i32 %64, %61
  %66 = or i32 %65, %53
  store i32 %66, ptr %54, align 4, !tbaa !16
  br label %67

67:                                               ; preds = %60, %47
  %68 = add nuw nsw i64 %48, 1
  %69 = icmp eq i64 %68, %46
  br i1 %69, label %70, label %47

70:                                               ; preds = %67, %43, %3
  %71 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %72 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %73 = icmp slt i32 %71, %72
  br i1 %73, label %74, label %141

74:                                               ; preds = %70
  %75 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %76 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 7), align 8, !tbaa !18
  %77 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 6), align 8, !tbaa !19
  %78 = sext i32 %71 to i64
  br label %79

79:                                               ; preds = %136, %74
  %80 = phi i64 [ %78, %74 ], [ %137, %136 ]
  %81 = getelementptr inbounds ptr, ptr %75, i64 %80
  %82 = load ptr, ptr %81, align 8, !tbaa !13
  %83 = getelementptr inbounds i32, ptr %76, i64 %80
  %84 = load i32, ptr %83, align 4, !tbaa !16
  %85 = getelementptr inbounds i32, ptr %77, i64 %80
  %86 = load i32, ptr %85, align 4, !tbaa !16
  %87 = icmp sgt i32 %86, %84
  br i1 %87, label %114, label %88

88:                                               ; preds = %79
  %89 = sext i32 %86 to i64
  %90 = add i32 %84, 1
  br label %91

91:                                               ; preds = %107, %88
  %92 = phi i64 [ %89, %88 ], [ %109, %107 ]
  %93 = phi i32 [ 1, %88 ], [ %108, %107 ]
  %94 = getelementptr inbounds i32, ptr %1, i64 %92
  %95 = load i32, ptr %94, align 4, !tbaa !16
  %96 = getelementptr inbounds i32, ptr %2, i64 %92
  %97 = load i32, ptr %96, align 4, !tbaa !16
  %98 = and i32 %97, %95
  %99 = getelementptr inbounds i32, ptr %82, i64 %92
  %100 = load i32, ptr %99, align 4, !tbaa !16
  %101 = and i32 %98, %100
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %107, label %103

103:                                              ; preds = %91
  %104 = getelementptr inbounds i32, ptr %0, i64 %92
  %105 = load i32, ptr %104, align 4, !tbaa !16
  %106 = or i32 %105, %101
  store i32 %106, ptr %104, align 4, !tbaa !16
  br label %107

107:                                              ; preds = %103, %91
  %108 = phi i32 [ 0, %103 ], [ %93, %91 ]
  %109 = add nsw i64 %92, 1
  %110 = trunc i64 %109 to i32
  %111 = icmp eq i32 %90, %110
  br i1 %111, label %112, label %91

112:                                              ; preds = %107
  %.lcssa = phi i32 [ %108, %107 ]
  %113 = icmp eq i32 %.lcssa, 0
  br i1 %113, label %136, label %114

114:                                              ; preds = %112, %79
  %115 = load i32, ptr %85, align 4, !tbaa !16
  %116 = icmp sgt i32 %115, %84
  br i1 %116, label %136, label %117

117:                                              ; preds = %114
  %118 = sext i32 %115 to i64
  %119 = add i32 %84, 1
  br label %120

120:                                              ; preds = %120, %117
  %121 = phi i64 [ %118, %117 ], [ %133, %120 ]
  %122 = getelementptr inbounds i32, ptr %82, i64 %121
  %123 = load i32, ptr %122, align 4, !tbaa !16
  %124 = getelementptr inbounds i32, ptr %1, i64 %121
  %125 = load i32, ptr %124, align 4, !tbaa !16
  %126 = getelementptr inbounds i32, ptr %2, i64 %121
  %127 = load i32, ptr %126, align 4, !tbaa !16
  %128 = or i32 %127, %125
  %129 = and i32 %128, %123
  %130 = getelementptr inbounds i32, ptr %0, i64 %121
  %131 = load i32, ptr %130, align 4, !tbaa !16
  %132 = or i32 %129, %131
  store i32 %132, ptr %130, align 4, !tbaa !16
  %133 = add nsw i64 %121, 1
  %134 = trunc i64 %133 to i32
  %135 = icmp eq i32 %119, %134
  br i1 %135, label %136, label %120

136:                                              ; preds = %120, %114, %112
  %137 = add nsw i64 %80, 1
  %138 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %139 = sext i32 %138 to i64
  %140 = icmp slt i64 %137, %139
  br i1 %140, label %79, label %141

141:                                              ; preds = %136, %70
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @cactive(ptr nocapture noundef readonly %0) #0 {
  %2 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 15), align 4, !tbaa !50
  %3 = icmp eq i32 %2, -1
  br i1 %3, label %96, label %4

4:                                                ; preds = %1
  %5 = sext i32 %2 to i64
  %6 = getelementptr inbounds i32, ptr %0, i64 %5
  %7 = load i32, ptr %6, align 4, !tbaa !16
  %8 = lshr i32 %7, 1
  %9 = and i32 %8, %7
  %10 = xor i32 %9, -1
  %11 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 14), align 8, !tbaa !51
  %12 = and i32 %11, %10
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %43, label %14

14:                                               ; preds = %4
  %15 = and i32 %12, 255
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %16
  %18 = load i32, ptr %17, align 4, !tbaa !16
  %19 = lshr i32 %12, 8
  %20 = and i32 %19, 255
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %21
  %23 = load i32, ptr %22, align 4, !tbaa !16
  %24 = add nsw i32 %23, %18
  %25 = lshr i32 %12, 16
  %26 = and i32 %25, 255
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %27
  %29 = load i32, ptr %28, align 4, !tbaa !16
  %30 = add nsw i32 %24, %29
  %31 = lshr i32 %12, 24
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %32
  %34 = load i32, ptr %33, align 4, !tbaa !16
  %35 = add nsw i32 %30, %34
  %36 = icmp sgt i32 %35, 1
  br i1 %36, label %145, label %37

37:                                               ; preds = %14
  %38 = shl i32 %2, 4
  %39 = add i32 %38, -16
  %40 = tail call i32 (i32, ...) @bit_index(i32 noundef %12) #43
  %41 = sdiv i32 %40, 2
  %42 = add nsw i32 %39, %41
  br label %43

43:                                               ; preds = %37, %4
  %44 = phi i32 [ %35, %37 ], [ 0, %4 ]
  %45 = phi i32 [ %42, %37 ], [ -1, %4 ]
  %46 = icmp sgt i32 %2, 1
  br i1 %46, label %47, label %96

47:                                               ; preds = %43
  %48 = zext i32 %2 to i64
  br label %49

49:                                               ; preds = %91, %47
  %50 = phi i64 [ 1, %47 ], [ %94, %91 ]
  %51 = phi i32 [ %45, %47 ], [ %93, %91 ]
  %52 = phi i32 [ %44, %47 ], [ %92, %91 ]
  %53 = getelementptr inbounds i32, ptr %0, i64 %50
  %54 = load i32, ptr %53, align 4, !tbaa !16
  %55 = lshr i32 %54, 1
  %56 = and i32 %54, 1431655765
  %57 = and i32 %56, %55
  %58 = xor i32 %57, 1431655765
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %91, label %60

60:                                               ; preds = %49
  %61 = and i32 %58, 85
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %62
  %64 = load i32, ptr %63, align 4, !tbaa !16
  %65 = lshr i32 %58, 8
  %66 = and i32 %65, 85
  %67 = zext i32 %66 to i64
  %68 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %67
  %69 = load i32, ptr %68, align 4, !tbaa !16
  %70 = lshr i32 %58, 16
  %71 = and i32 %70, 85
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %72
  %74 = load i32, ptr %73, align 4, !tbaa !16
  %75 = lshr i32 %58, 24
  %76 = zext i32 %75 to i64
  %77 = getelementptr inbounds [256 x i32], ptr @bit_count, i64 0, i64 %76
  %78 = load i32, ptr %77, align 4, !tbaa !16
  %79 = add i32 %64, %52
  %80 = add i32 %79, %69
  %81 = add i32 %80, %74
  %82 = add i32 %81, %78
  %83 = icmp sgt i32 %82, 1
  br i1 %83, label %145, label %84

84:                                               ; preds = %60
  %85 = trunc i64 %50 to i32
  %86 = shl i32 %85, 4
  %87 = add i32 %86, -16
  %88 = tail call i32 (i32, ...) @bit_index(i32 noundef %58) #43
  %89 = sdiv i32 %88, 2
  %90 = add nsw i32 %87, %89
  br label %91

91:                                               ; preds = %84, %49
  %92 = phi i32 [ %82, %84 ], [ %52, %49 ]
  %93 = phi i32 [ %90, %84 ], [ %51, %49 ]
  %94 = add nuw nsw i64 %50, 1
  %95 = icmp eq i64 %94, %48
  br i1 %95, label %96, label %49

96:                                               ; preds = %91, %43, %1
  %97 = phi i32 [ 0, %1 ], [ %44, %43 ], [ %92, %91 ]
  %98 = phi i32 [ -1, %1 ], [ %45, %43 ], [ %93, %91 ]
  %99 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %100 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %101 = icmp slt i32 %99, %100
  br i1 %101, label %102, label %145

102:                                              ; preds = %96
  %103 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %104 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 7), align 8, !tbaa !18
  %105 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 6), align 8, !tbaa !19
  %106 = sext i32 %99 to i64
  br label %107

107:                                              ; preds = %139, %102
  %108 = phi i64 [ %106, %102 ], [ %142, %139 ]
  %109 = phi i32 [ %98, %102 ], [ %141, %139 ]
  %110 = phi i32 [ %97, %102 ], [ %140, %139 ]
  %111 = getelementptr inbounds ptr, ptr %103, i64 %108
  %112 = load ptr, ptr %111, align 8, !tbaa !13
  %113 = getelementptr inbounds i32, ptr %104, i64 %108
  %114 = load i32, ptr %113, align 4, !tbaa !16
  %115 = getelementptr inbounds i32, ptr %105, i64 %108
  %116 = load i32, ptr %115, align 4, !tbaa !16
  %117 = icmp sgt i32 %116, %114
  br i1 %117, label %139, label %118

118:                                              ; preds = %107
  %119 = sext i32 %116 to i64
  %120 = add i32 %114, 1
  br label %125

121:                                              ; preds = %125
  %122 = add nsw i64 %126, 1
  %123 = trunc i64 %122 to i32
  %124 = icmp eq i32 %120, %123
  br i1 %124, label %139, label %125

125:                                              ; preds = %121, %118
  %126 = phi i64 [ %119, %118 ], [ %122, %121 ]
  %127 = getelementptr inbounds i32, ptr %112, i64 %126
  %128 = load i32, ptr %127, align 4, !tbaa !16
  %129 = getelementptr inbounds i32, ptr %0, i64 %126
  %130 = load i32, ptr %129, align 4, !tbaa !16
  %131 = xor i32 %130, -1
  %132 = and i32 %128, %131
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %121, label %134

134:                                              ; preds = %125
  %135 = icmp sgt i32 %110, 0
  br i1 %135, label %145, label %136

136:                                              ; preds = %134
  %137 = add nsw i32 %110, 1
  %138 = trunc i64 %108 to i32
  br label %139

139:                                              ; preds = %136, %121, %107
  %140 = phi i32 [ %137, %136 ], [ %110, %107 ], [ %110, %121 ]
  %141 = phi i32 [ %138, %136 ], [ %109, %107 ], [ %109, %121 ]
  %142 = add nsw i64 %108, 1
  %143 = trunc i64 %142 to i32
  %144 = icmp eq i32 %100, %143
  br i1 %144, label %145, label %107

145:                                              ; preds = %139, %134, %96, %60, %14
  %146 = phi i32 [ -1, %14 ], [ %98, %96 ], [ %141, %139 ], [ -1, %134 ], [ -1, %60 ]
  ret i32 %146
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @ccommon(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2) #8 {
  %4 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 15), align 4, !tbaa !50
  %5 = icmp eq i32 %4, -1
  br i1 %5, label %49, label %6

6:                                                ; preds = %3
  %7 = sext i32 %4 to i64
  %8 = getelementptr inbounds i32, ptr %0, i64 %7
  %9 = load i32, ptr %8, align 4, !tbaa !16
  %10 = getelementptr inbounds i32, ptr %2, i64 %7
  %11 = load i32, ptr %10, align 4, !tbaa !16
  %12 = or i32 %11, %9
  %13 = getelementptr inbounds i32, ptr %1, i64 %7
  %14 = load i32, ptr %13, align 4, !tbaa !16
  %15 = or i32 %14, %11
  %16 = lshr i32 %12, 1
  %17 = and i32 %16, %12
  %18 = lshr i32 %15, 1
  %19 = and i32 %18, %15
  %20 = or i32 %19, %17
  %21 = xor i32 %20, -1
  %22 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 14), align 8, !tbaa !51
  %23 = and i32 %22, %21
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %112

25:                                               ; preds = %6
  %26 = icmp sgt i32 %4, 1
  br i1 %26, label %27, label %49

27:                                               ; preds = %25
  %28 = zext i32 %4 to i64
  br label %32

29:                                               ; preds = %32
  %30 = add nuw nsw i64 %33, 1
  %31 = icmp eq i64 %30, %28
  br i1 %31, label %49, label %32

32:                                               ; preds = %29, %27
  %33 = phi i64 [ 1, %27 ], [ %30, %29 ]
  %34 = getelementptr inbounds i32, ptr %0, i64 %33
  %35 = load i32, ptr %34, align 4, !tbaa !16
  %36 = getelementptr inbounds i32, ptr %2, i64 %33
  %37 = load i32, ptr %36, align 4, !tbaa !16
  %38 = or i32 %37, %35
  %39 = getelementptr inbounds i32, ptr %1, i64 %33
  %40 = load i32, ptr %39, align 4, !tbaa !16
  %41 = or i32 %40, %37
  %42 = lshr i32 %38, 1
  %43 = and i32 %42, %38
  %44 = lshr i32 %41, 1
  %45 = and i32 %44, %41
  %46 = or i32 %45, %43
  %47 = and i32 %46, 1431655765
  %48 = icmp eq i32 %47, 1431655765
  br i1 %48, label %29, label %112

49:                                               ; preds = %29, %25, %3
  %50 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 2), align 8, !tbaa !27
  %51 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %52 = icmp slt i32 %50, %51
  br i1 %52, label %53, label %109

53:                                               ; preds = %49
  %54 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %55 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 7), align 8, !tbaa !18
  %56 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 6), align 8, !tbaa !19
  %57 = sext i32 %50 to i64
  %58 = sext i32 %51 to i64
  br label %59

59:                                               ; preds = %104, %53
  %60 = phi i64 [ %57, %53 ], [ %105, %104 ]
  %61 = phi i1 [ true, %53 ], [ %106, %104 ]
  %62 = getelementptr inbounds ptr, ptr %54, i64 %60
  %63 = load ptr, ptr %62, align 8, !tbaa !13
  %64 = getelementptr inbounds i32, ptr %55, i64 %60
  %65 = load i32, ptr %64, align 4, !tbaa !16
  %66 = getelementptr inbounds i32, ptr %56, i64 %60
  %67 = load i32, ptr %66, align 4, !tbaa !16
  %68 = icmp sgt i32 %67, %65
  br i1 %68, label %104, label %69

69:                                               ; preds = %59
  %70 = sext i32 %67 to i64
  %71 = add i32 %65, 1
  br label %76

72:                                               ; preds = %76
  %73 = add nsw i64 %77, 1
  %74 = trunc i64 %73 to i32
  %75 = icmp eq i32 %71, %74
  br i1 %75, label %104, label %76

76:                                               ; preds = %72, %69
  %77 = phi i64 [ %70, %69 ], [ %73, %72 ]
  %78 = getelementptr inbounds i32, ptr %63, i64 %77
  %79 = load i32, ptr %78, align 4, !tbaa !16
  %80 = getelementptr inbounds i32, ptr %0, i64 %77
  %81 = load i32, ptr %80, align 4, !tbaa !16
  %82 = getelementptr inbounds i32, ptr %2, i64 %77
  %83 = load i32, ptr %82, align 4, !tbaa !16
  %84 = or i32 %83, %81
  %85 = xor i32 %84, -1
  %86 = and i32 %79, %85
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %72, label %92

88:                                               ; preds = %92
  %89 = add nsw i64 %93, 1
  %90 = trunc i64 %89 to i32
  %91 = icmp eq i32 %71, %90
  br i1 %91, label %104, label %92

92:                                               ; preds = %88, %76
  %93 = phi i64 [ %89, %88 ], [ %70, %76 ]
  %94 = getelementptr inbounds i32, ptr %63, i64 %93
  %95 = load i32, ptr %94, align 4, !tbaa !16
  %96 = getelementptr inbounds i32, ptr %1, i64 %93
  %97 = load i32, ptr %96, align 4, !tbaa !16
  %98 = getelementptr inbounds i32, ptr %2, i64 %93
  %99 = load i32, ptr %98, align 4, !tbaa !16
  %100 = or i32 %99, %97
  %101 = xor i32 %100, -1
  %102 = and i32 %95, %101
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %88, label %109

104:                                              ; preds = %88, %72, %59
  %105 = add nsw i64 %60, 1
  %106 = icmp slt i64 %105, %58
  %107 = trunc i64 %105 to i32
  %108 = icmp eq i32 %51, %107
  br i1 %108, label %109, label %59

109:                                              ; preds = %104, %92, %49
  %110 = phi i1 [ false, %49 ], [ %61, %92 ], [ %106, %104 ]
  %111 = zext i1 %110 to i32
  br label %112

112:                                              ; preds = %109, %32, %6
  %113 = phi i32 [ %111, %109 ], [ 1, %6 ], [ 1, %32 ]
  ret i32 %113
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @descend(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #8 {
  %3 = load ptr, ptr %0, align 8, !tbaa !13
  %4 = load ptr, ptr %1, align 8, !tbaa !13
  %5 = load i32, ptr %3, align 4, !tbaa !16
  %6 = lshr i32 %5, 16
  %7 = load i32, ptr %4, align 4, !tbaa !16
  %8 = lshr i32 %7, 16
  %9 = icmp ugt i32 %6, %8
  br i1 %9, label %27, label %10

10:                                               ; preds = %2
  %11 = icmp ult i32 %6, %8
  br i1 %11, label %27, label %12

12:                                               ; preds = %10
  %13 = and i32 %5, 1023
  br label %14

14:                                               ; preds = %24, %12
  %15 = phi i32 [ %13, %12 ], [ %25, %24 ]
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds i32, ptr %3, i64 %16
  %18 = load i32, ptr %17, align 4, !tbaa !16
  %19 = getelementptr inbounds i32, ptr %4, i64 %16
  %20 = load i32, ptr %19, align 4, !tbaa !16
  %21 = icmp ugt i32 %18, %20
  br i1 %21, label %27, label %22

22:                                               ; preds = %14
  %23 = icmp ult i32 %18, %20
  br i1 %23, label %27, label %24

24:                                               ; preds = %22
  %25 = add nsw i32 %15, -1
  %26 = icmp sgt i32 %15, 1
  br i1 %26, label %14, label %27

27:                                               ; preds = %24, %22, %14, %10, %2
  %28 = phi i32 [ -1, %2 ], [ 1, %10 ], [ -1, %14 ], [ 1, %22 ], [ 0, %24 ]
  ret i32 %28
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @ascend(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #8 {
  %3 = load ptr, ptr %0, align 8, !tbaa !13
  %4 = load ptr, ptr %1, align 8, !tbaa !13
  %5 = load i32, ptr %3, align 4, !tbaa !16
  %6 = lshr i32 %5, 16
  %7 = load i32, ptr %4, align 4, !tbaa !16
  %8 = lshr i32 %7, 16
  %9 = icmp ugt i32 %6, %8
  br i1 %9, label %27, label %10

10:                                               ; preds = %2
  %11 = icmp ult i32 %6, %8
  br i1 %11, label %27, label %12

12:                                               ; preds = %10
  %13 = and i32 %5, 1023
  br label %14

14:                                               ; preds = %24, %12
  %15 = phi i32 [ %13, %12 ], [ %25, %24 ]
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds i32, ptr %3, i64 %16
  %18 = load i32, ptr %17, align 4, !tbaa !16
  %19 = getelementptr inbounds i32, ptr %4, i64 %16
  %20 = load i32, ptr %19, align 4, !tbaa !16
  %21 = icmp ugt i32 %18, %20
  br i1 %21, label %27, label %22

22:                                               ; preds = %14
  %23 = icmp ult i32 %18, %20
  br i1 %23, label %27, label %24

24:                                               ; preds = %22
  %25 = add nsw i32 %15, -1
  %26 = icmp sgt i32 %15, 1
  br i1 %26, label %14, label %27

27:                                               ; preds = %24, %22, %14, %10, %2
  %28 = phi i32 [ 1, %2 ], [ -1, %10 ], [ 1, %14 ], [ -1, %22 ], [ 0, %24 ]
  ret i32 %28
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @lex_order(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #8 {
  %3 = load ptr, ptr %0, align 8, !tbaa !13
  %4 = load ptr, ptr %1, align 8, !tbaa !13
  %5 = load i32, ptr %3, align 4, !tbaa !16
  %6 = and i32 %5, 1023
  br label %7

7:                                                ; preds = %17, %2
  %8 = phi i32 [ %6, %2 ], [ %18, %17 ]
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds i32, ptr %3, i64 %9
  %11 = load i32, ptr %10, align 4, !tbaa !16
  %12 = getelementptr inbounds i32, ptr %4, i64 %9
  %13 = load i32, ptr %12, align 4, !tbaa !16
  %14 = icmp ugt i32 %11, %13
  br i1 %14, label %20, label %15

15:                                               ; preds = %7
  %16 = icmp ult i32 %11, %13
  br i1 %16, label %20, label %17

17:                                               ; preds = %15
  %18 = add nsw i32 %8, -1
  %19 = icmp sgt i32 %8, 1
  br i1 %19, label %7, label %20

20:                                               ; preds = %17, %15, %7
  %21 = phi i32 [ -1, %7 ], [ 1, %15 ], [ 0, %17 ]
  ret i32 %21
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @d1_order(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #8 {
  %3 = load ptr, ptr %0, align 8, !tbaa !13
  %4 = load ptr, ptr %1, align 8, !tbaa !13
  %5 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 11), align 8, !tbaa !7
  %6 = load ptr, ptr %5, align 8, !tbaa !13
  %7 = load i32, ptr %3, align 4, !tbaa !16
  %8 = and i32 %7, 1023
  br label %9

9:                                                ; preds = %23, %2
  %10 = phi i32 [ %8, %2 ], [ %24, %23 ]
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds i32, ptr %3, i64 %11
  %13 = load i32, ptr %12, align 4, !tbaa !16
  %14 = getelementptr inbounds i32, ptr %6, i64 %11
  %15 = load i32, ptr %14, align 4, !tbaa !16
  %16 = or i32 %15, %13
  %17 = getelementptr inbounds i32, ptr %4, i64 %11
  %18 = load i32, ptr %17, align 4, !tbaa !16
  %19 = or i32 %18, %15
  %20 = icmp ugt i32 %16, %19
  br i1 %20, label %26, label %21

21:                                               ; preds = %9
  %22 = icmp ult i32 %16, %19
  br i1 %22, label %26, label %23

23:                                               ; preds = %21
  %24 = add nsw i32 %10, -1
  %25 = icmp sgt i32 %10, 1
  br i1 %25, label %9, label %26

26:                                               ; preds = %23, %21, %9
  %27 = phi i32 [ -1, %9 ], [ 1, %21 ], [ 0, %23 ]
  ret i32 %27
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(argmem: read) uwtable
define internal i32 @desc1(ptr noundef readonly %0, ptr noundef readonly %1) #36 {
  %3 = icmp eq ptr %0, null
  br i1 %3, label %4, label %7

4:                                                ; preds = %2
  %5 = icmp ne ptr %1, null
  %6 = zext i1 %5 to i32
  br label %32

7:                                                ; preds = %2
  %8 = icmp eq ptr %1, null
  br i1 %8, label %32, label %9

9:                                                ; preds = %7
  %10 = load i32, ptr %0, align 4, !tbaa !16
  %11 = lshr i32 %10, 16
  %12 = load i32, ptr %1, align 4, !tbaa !16
  %13 = lshr i32 %12, 16
  %14 = icmp ugt i32 %11, %13
  br i1 %14, label %32, label %15

15:                                               ; preds = %9
  %16 = icmp ult i32 %11, %13
  br i1 %16, label %32, label %17

17:                                               ; preds = %15
  %18 = and i32 %10, 1023
  br label %19

19:                                               ; preds = %29, %17
  %20 = phi i32 [ %18, %17 ], [ %30, %29 ]
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds i32, ptr %0, i64 %21
  %23 = load i32, ptr %22, align 4, !tbaa !16
  %24 = getelementptr inbounds i32, ptr %1, i64 %21
  %25 = load i32, ptr %24, align 4, !tbaa !16
  %26 = icmp ugt i32 %23, %25
  br i1 %26, label %32, label %27

27:                                               ; preds = %19
  %28 = icmp ult i32 %23, %25
  br i1 %28, label %32, label %29

29:                                               ; preds = %27
  %30 = add nsw i32 %20, -1
  %31 = icmp sgt i32 %20, 1
  br i1 %31, label %19, label %32

32:                                               ; preds = %29, %27, %19, %15, %9, %7, %4
  %33 = phi i32 [ %6, %4 ], [ -1, %7 ], [ -1, %9 ], [ 1, %15 ], [ -1, %19 ], [ 1, %27 ], [ 0, %29 ]
  ret i32 %33
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @cv_sharp(ptr nocapture noundef readonly %0, ptr noundef %1) #0 {
  %3 = load i32, ptr @cube, align 8, !tbaa !14
  %4 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 0, i32 noundef %3) #43
  %5 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %6 = load ptr, ptr %5, align 8, !tbaa !33
  %7 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %8 = load i32, ptr %7, align 4, !tbaa !31
  %9 = load i32, ptr %0, align 8, !tbaa !34
  %10 = mul nsw i32 %9, %8
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds i32, ptr %6, i64 %11
  %13 = icmp sgt i32 %10, 0
  br i1 %13, label %14, label %23

14:                                               ; preds = %14, %2
  %15 = phi ptr [ %18, %14 ], [ %4, %2 ]
  %16 = phi ptr [ %21, %14 ], [ %6, %2 ]
  %17 = tail call ptr @cb_sharp(ptr noundef %16, ptr noundef %1) #44
  %18 = tail call ptr (ptr, ptr, ...) @sf_union(ptr noundef %15, ptr noundef %17) #43
  %19 = load i32, ptr %0, align 8, !tbaa !34
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, ptr %16, i64 %20
  %22 = icmp ult ptr %21, %12
  br i1 %22, label %14, label %23

23:                                               ; preds = %14, %2
  %24 = phi ptr [ %4, %2 ], [ %18, %14 ]
  ret ptr %24
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @cb_sharp(ptr noundef %0, ptr noundef %1) #0 {
  %3 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 3
  %4 = load i32, ptr %3, align 4, !tbaa !31
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %10

6:                                                ; preds = %2
  %7 = load i32, ptr @cube, align 8, !tbaa !14
  %8 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 1, i32 noundef %7) #43
  %9 = tail call ptr (ptr, ptr, ...) @sf_addset(ptr noundef %8, ptr noundef %0) #43
  br label %15

10:                                               ; preds = %2
  %11 = tail call i64 (...) @util_cpu_time() #43
  store i64 %11, ptr @start_time, align 8, !tbaa !97
  %12 = load i32, ptr %3, align 4, !tbaa !31
  %13 = add nsw i32 %12, -1
  %14 = tail call ptr @cb_recur_sharp(ptr noundef %0, ptr noundef nonnull %1, i32 noundef 0, i32 noundef %13, i32 noundef 0) #44
  br label %15

15:                                               ; preds = %10, %6
  %16 = phi ptr [ %9, %6 ], [ %14, %10 ]
  ret ptr %16
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @cb_recur_sharp(ptr noundef %0, ptr noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4) #0 {
  %6 = icmp eq i32 %2, %3
  br i1 %6, label %7, label %15

7:                                                ; preds = %5
  %8 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 5
  %9 = load ptr, ptr %8, align 8, !tbaa !33
  %10 = load i32, ptr %1, align 8, !tbaa !34
  %11 = mul nsw i32 %10, %2
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds i32, ptr %9, i64 %12
  %14 = tail call ptr @sharp(ptr noundef %0, ptr noundef %13) #44
  br label %43

15:                                               ; preds = %5
  %16 = add nsw i32 %3, %2
  %17 = sdiv i32 %16, 2
  %18 = add nsw i32 %4, 1
  %19 = tail call ptr @cb_recur_sharp(ptr noundef %0, ptr noundef %1, i32 noundef %2, i32 noundef %17, i32 noundef %18) #44
  %20 = add nsw i32 %17, 1
  %21 = tail call ptr @cb_recur_sharp(ptr noundef %0, ptr noundef %1, i32 noundef %20, i32 noundef %3, i32 noundef %18) #44
  %22 = tail call ptr @cv_intersect(ptr noundef %19, ptr noundef %21) #44
  %23 = load i32, ptr @debug, align 4, !tbaa !16
  %24 = and i32 %23, 8192
  %25 = icmp ne i32 %24, 0
  %26 = icmp slt i32 %4, 4
  %27 = and i1 %26, %25
  br i1 %27, label %28, label %42

28:                                               ; preds = %15
  %29 = getelementptr inbounds %struct.set_family, ptr %22, i64 0, i32 3
  %30 = load i32, ptr %29, align 4, !tbaa !31
  %31 = getelementptr inbounds %struct.set_family, ptr %19, i64 0, i32 3
  %32 = load i32, ptr %31, align 4, !tbaa !31
  %33 = getelementptr inbounds %struct.set_family, ptr %21, i64 0, i32 3
  %34 = load i32, ptr %33, align 4, !tbaa !31
  %35 = tail call i64 (...) @util_cpu_time() #43
  %36 = load i64, ptr @start_time, align 8, !tbaa !97
  %37 = sub nsw i64 %35, %36
  %38 = tail call ptr @util_print_time(i64 noundef %37) #43
  %39 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.538, i32 noundef %4, i32 noundef %30, i32 noundef %32, i32 noundef %34, ptr noundef %38) #44
  %40 = load ptr, ptr @stdout, align 8, !tbaa !13
  %41 = tail call i32 @fflush(ptr noundef %40) #44
  br label %42

42:                                               ; preds = %28, %15
  tail call void (ptr, ...) @sf_free(ptr noundef %19) #43
  tail call void (ptr, ...) @sf_free(ptr noundef %21) #43
  br label %43

43:                                               ; preds = %42, %7
  %44 = phi ptr [ %14, %7 ], [ %22, %42 ]
  ret ptr %44
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @sharp(ptr noundef %0, ptr noundef %1) #0 {
  %3 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 11), align 8, !tbaa !7
  %4 = load ptr, ptr %3, align 8, !tbaa !13
  %5 = getelementptr inbounds ptr, ptr %3, i64 1
  %6 = load ptr, ptr %5, align 8, !tbaa !13
  %7 = getelementptr inbounds ptr, ptr %3, i64 2
  %8 = load ptr, ptr %7, align 8, !tbaa !13
  %9 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %10 = load i32, ptr @cube, align 8, !tbaa !14
  %11 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef %9, i32 noundef %10) #43
  %12 = tail call i32 (ptr, ptr, ...) @cdist0(ptr noundef %0, ptr noundef %1) #43
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %47, label %14

14:                                               ; preds = %2
  %15 = tail call ptr (ptr, ptr, ptr, ...) @set_diff(ptr noundef %4, ptr noundef %0, ptr noundef %1) #43
  %16 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %17 = icmp sgt i32 %16, 0
  br i1 %17, label %18, label %49

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.set_family, ptr %11, i64 0, i32 5
  %20 = getelementptr inbounds %struct.set_family, ptr %11, i64 0, i32 3
  br label %21

21:                                               ; preds = %42, %18
  %22 = phi i64 [ 0, %18 ], [ %43, %42 ]
  %23 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %24 = getelementptr inbounds ptr, ptr %23, i64 %22
  %25 = load ptr, ptr %24, align 8, !tbaa !13
  %26 = tail call ptr (ptr, ptr, ptr, ...) @set_and(ptr noundef %6, ptr noundef %4, ptr noundef %25) #43
  %27 = tail call i32 (ptr, ...) @setp_empty(ptr noundef %26) #43
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %42

29:                                               ; preds = %21
  %30 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %31 = getelementptr inbounds ptr, ptr %30, i64 %22
  %32 = load ptr, ptr %31, align 8, !tbaa !13
  %33 = tail call ptr (ptr, ptr, ptr, ...) @set_diff(ptr noundef %8, ptr noundef %0, ptr noundef %32) #43
  %34 = load ptr, ptr %19, align 8, !tbaa !33
  %35 = load i32, ptr %11, align 8, !tbaa !34
  %36 = load i32, ptr %20, align 4, !tbaa !31
  %37 = add nsw i32 %36, 1
  store i32 %37, ptr %20, align 4, !tbaa !31
  %38 = mul nsw i32 %36, %35
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i32, ptr %34, i64 %39
  %41 = tail call ptr (ptr, ptr, ptr, ...) @set_or(ptr noundef %40, ptr noundef %6, ptr noundef %8) #43
  br label %42

42:                                               ; preds = %29, %21
  %43 = add nuw nsw i64 %22, 1
  %44 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %45 = sext i32 %44 to i64
  %46 = icmp slt i64 %43, %45
  br i1 %46, label %21, label %49

47:                                               ; preds = %2
  %48 = tail call ptr (ptr, ptr, ...) @sf_addset(ptr noundef %11, ptr noundef %0) #43
  br label %49

49:                                               ; preds = %47, %42, %14
  %50 = phi ptr [ %48, %47 ], [ %11, %14 ], [ %11, %42 ]
  ret ptr %50
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @cv_intersect(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #0 {
  %3 = load i32, ptr @cube, align 8, !tbaa !14
  %4 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 500, i32 noundef %3) #43
  %5 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %6 = load ptr, ptr %5, align 8, !tbaa !33
  %7 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %8 = load i32, ptr %7, align 4, !tbaa !31
  %9 = load i32, ptr %0, align 8, !tbaa !34
  %10 = mul nsw i32 %9, %8
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds i32, ptr %6, i64 %11
  %13 = icmp sgt i32 %10, 0
  br i1 %13, label %14, label %84

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.set_family, ptr %4, i64 0, i32 5
  %16 = load ptr, ptr %15, align 8, !tbaa !33
  %17 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 5
  %18 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 3
  %19 = load i32, ptr %1, align 8, !tbaa !34
  br label %20

20:                                               ; preds = %73, %14
  %21 = phi i32 [ %9, %14 ], [ %74, %73 ]
  %22 = phi i32 [ %19, %14 ], [ %75, %73 ]
  %23 = phi ptr [ null, %14 ], [ %78, %73 ]
  %24 = phi ptr [ %4, %14 ], [ %77, %73 ]
  %25 = phi ptr [ %16, %14 ], [ %76, %73 ]
  %26 = phi ptr [ %6, %14 ], [ %80, %73 ]
  %27 = load ptr, ptr %17, align 8, !tbaa !33
  %28 = load i32, ptr %18, align 4, !tbaa !31
  %29 = mul nsw i32 %22, %28
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds i32, ptr %27, i64 %30
  %32 = icmp sgt i32 %29, 0
  br i1 %32, label %33, label %73

33:                                               ; preds = %63, %20
  %34 = phi ptr [ %66, %63 ], [ %23, %20 ]
  %35 = phi ptr [ %65, %63 ], [ %24, %20 ]
  %36 = phi ptr [ %64, %63 ], [ %25, %20 ]
  %37 = phi ptr [ %69, %63 ], [ %27, %20 ]
  %38 = tail call i32 (ptr, ptr, ...) @cdist0(ptr noundef %26, ptr noundef %37) #43
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %63, label %40

40:                                               ; preds = %33
  %41 = tail call ptr (ptr, ptr, ptr, ...) @set_and(ptr noundef %36, ptr noundef %26, ptr noundef %37) #43
  %42 = getelementptr inbounds %struct.set_family, ptr %35, i64 0, i32 3
  %43 = load i32, ptr %42, align 4, !tbaa !31
  %44 = add nsw i32 %43, 1
  store i32 %44, ptr %42, align 4, !tbaa !31
  %45 = getelementptr inbounds %struct.set_family, ptr %35, i64 0, i32 2
  %46 = load i32, ptr %45, align 8, !tbaa !157
  %47 = icmp slt i32 %44, %46
  br i1 %47, label %59, label %48

48:                                               ; preds = %40
  %49 = icmp eq ptr %34, null
  %50 = tail call ptr (ptr, ...) @sf_contain(ptr noundef nonnull %35) #43
  br i1 %49, label %53, label %51

51:                                               ; preds = %48
  %52 = tail call ptr (ptr, ptr, ...) @sf_union(ptr noundef nonnull %34, ptr noundef %50) #43
  br label %53

53:                                               ; preds = %51, %48
  %54 = phi ptr [ %52, %51 ], [ %50, %48 ]
  %55 = load i32, ptr @cube, align 8, !tbaa !14
  %56 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 500, i32 noundef %55) #43
  %57 = getelementptr inbounds %struct.set_family, ptr %56, i64 0, i32 5
  %58 = load ptr, ptr %57, align 8, !tbaa !33
  br label %63

59:                                               ; preds = %40
  %60 = load i32, ptr %35, align 8, !tbaa !34
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i32, ptr %36, i64 %61
  br label %63

63:                                               ; preds = %59, %53, %33
  %64 = phi ptr [ %58, %53 ], [ %62, %59 ], [ %36, %33 ]
  %65 = phi ptr [ %56, %53 ], [ %35, %59 ], [ %35, %33 ]
  %66 = phi ptr [ %54, %53 ], [ %34, %59 ], [ %34, %33 ]
  %67 = load i32, ptr %1, align 8, !tbaa !34
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i32, ptr %37, i64 %68
  %70 = icmp ult ptr %69, %31
  br i1 %70, label %33, label %71

71:                                               ; preds = %63
  %.lcssa3 = phi ptr [ %64, %63 ]
  %.lcssa2 = phi ptr [ %65, %63 ]
  %.lcssa1 = phi ptr [ %66, %63 ]
  %.lcssa = phi i32 [ %67, %63 ]
  %72 = load i32, ptr %0, align 8, !tbaa !34
  br label %73

73:                                               ; preds = %71, %20
  %74 = phi i32 [ %21, %20 ], [ %72, %71 ]
  %75 = phi i32 [ %22, %20 ], [ %.lcssa, %71 ]
  %76 = phi ptr [ %25, %20 ], [ %.lcssa3, %71 ]
  %77 = phi ptr [ %24, %20 ], [ %.lcssa2, %71 ]
  %78 = phi ptr [ %23, %20 ], [ %.lcssa1, %71 ]
  %79 = sext i32 %74 to i64
  %80 = getelementptr inbounds i32, ptr %26, i64 %79
  %81 = icmp ult ptr %80, %12
  br i1 %81, label %20, label %82

82:                                               ; preds = %73
  %.lcssa5 = phi ptr [ %77, %73 ]
  %.lcssa4 = phi ptr [ %78, %73 ]
  %83 = icmp eq ptr %.lcssa4, null
  br i1 %83, label %84, label %87

84:                                               ; preds = %82, %2
  %85 = phi ptr [ %.lcssa5, %82 ], [ %4, %2 ]
  %86 = tail call ptr (ptr, ...) @sf_contain(ptr noundef %85) #43
  br label %90

87:                                               ; preds = %82
  %88 = tail call ptr (ptr, ...) @sf_contain(ptr noundef %.lcssa5) #43
  %89 = tail call ptr (ptr, ptr, ...) @sf_union(ptr noundef nonnull %.lcssa4, ptr noundef %88) #43
  br label %90

90:                                               ; preds = %87, %84
  %91 = phi ptr [ %86, %84 ], [ %89, %87 ]
  ret ptr %91
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @make_disjoint(ptr nocapture noundef readonly %0) #0 {
  %2 = load i32, ptr @cube, align 8, !tbaa !14
  %3 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 0, i32 noundef %2) #43
  %4 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %5 = load ptr, ptr %4, align 8, !tbaa !33
  %6 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %7 = load i32, ptr %6, align 4, !tbaa !31
  %8 = load i32, ptr %0, align 8, !tbaa !34
  %9 = mul nsw i32 %8, %7
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds i32, ptr %5, i64 %10
  %12 = icmp sgt i32 %9, 0
  br i1 %12, label %13, label %22

13:                                               ; preds = %13, %1
  %14 = phi ptr [ %20, %13 ], [ %5, %1 ]
  %15 = phi ptr [ %17, %13 ], [ %3, %1 ]
  %16 = tail call ptr @cb_dsharp(ptr noundef %14, ptr noundef %15) #44
  %17 = tail call ptr (ptr, ptr, ...) @sf_append(ptr noundef %15, ptr noundef %16) #43
  %18 = load i32, ptr %0, align 8, !tbaa !34
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds i32, ptr %14, i64 %19
  %21 = icmp ult ptr %20, %11
  br i1 %21, label %13, label %22

22:                                               ; preds = %13, %1
  %23 = phi ptr [ %3, %1 ], [ %17, %13 ]
  ret ptr %23
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @cb_dsharp(ptr noundef %0, ptr nocapture noundef readonly %1) #0 {
  %3 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 3
  %4 = load i32, ptr %3, align 4, !tbaa !31
  %5 = icmp eq i32 %4, 0
  %6 = load i32, ptr @cube, align 8, !tbaa !14
  br i1 %5, label %7, label %10

7:                                                ; preds = %2
  %8 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 1, i32 noundef %6) #43
  %9 = tail call ptr (ptr, ptr, ...) @sf_addset(ptr noundef %8, ptr noundef %0) #43
  br label %38

10:                                               ; preds = %2
  %11 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef %4, i32 noundef %6) #43
  %12 = getelementptr inbounds %struct.set_family, ptr %11, i64 0, i32 5
  %13 = load ptr, ptr %12, align 8, !tbaa !33
  %14 = load i32, ptr %11, align 8, !tbaa !34
  %15 = getelementptr inbounds %struct.set_family, ptr %11, i64 0, i32 3
  %16 = load i32, ptr %15, align 4, !tbaa !31
  %17 = add nsw i32 %16, 1
  store i32 %17, ptr %15, align 4, !tbaa !31
  %18 = mul nsw i32 %16, %14
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds i32, ptr %13, i64 %19
  %21 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %20, ptr noundef %0) #43
  %22 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 5
  %23 = load ptr, ptr %22, align 8, !tbaa !33
  %24 = load i32, ptr %3, align 4, !tbaa !31
  %25 = load i32, ptr %1, align 8, !tbaa !34
  %26 = mul nsw i32 %25, %24
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i32, ptr %23, i64 %27
  %29 = icmp sgt i32 %26, 0
  br i1 %29, label %30, label %38

30:                                               ; preds = %30, %10
  %31 = phi ptr [ %36, %30 ], [ %23, %10 ]
  %32 = phi ptr [ %33, %30 ], [ %11, %10 ]
  %33 = tail call ptr @cb1_dsharp(ptr noundef %32, ptr noundef %31) #44
  tail call void (ptr, ...) @sf_free(ptr noundef %32) #43
  %34 = load i32, ptr %1, align 8, !tbaa !34
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds i32, ptr %31, i64 %35
  %37 = icmp ult ptr %36, %28
  br i1 %37, label %30, label %38

38:                                               ; preds = %30, %10, %7
  %39 = phi ptr [ %9, %7 ], [ %11, %10 ], [ %33, %30 ]
  ret ptr %39
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @cb1_dsharp(ptr nocapture noundef readonly %0, ptr noundef %1) #0 {
  %3 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %4 = load i32, ptr %3, align 4, !tbaa !31
  %5 = load i32, ptr @cube, align 8, !tbaa !14
  %6 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef %4, i32 noundef %5) #43
  %7 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %8 = load ptr, ptr %7, align 8, !tbaa !33
  %9 = load i32, ptr %3, align 4, !tbaa !31
  %10 = load i32, ptr %0, align 8, !tbaa !34
  %11 = mul nsw i32 %10, %9
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds i32, ptr %8, i64 %12
  %14 = icmp sgt i32 %11, 0
  br i1 %14, label %15, label %24

15:                                               ; preds = %15, %2
  %16 = phi ptr [ %19, %15 ], [ %6, %2 ]
  %17 = phi ptr [ %22, %15 ], [ %8, %2 ]
  %18 = tail call ptr @dsharp(ptr noundef %17, ptr noundef %1) #44
  %19 = tail call ptr (ptr, ptr, ...) @sf_union(ptr noundef %16, ptr noundef %18) #43
  %20 = load i32, ptr %0, align 8, !tbaa !34
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i32, ptr %17, i64 %21
  %23 = icmp ult ptr %22, %13
  br i1 %23, label %15, label %24

24:                                               ; preds = %15, %2
  %25 = phi ptr [ %6, %2 ], [ %19, %15 ]
  ret ptr %25
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @dsharp(ptr noundef %0, ptr noundef %1) #0 {
  %3 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 11), align 8, !tbaa !7
  %4 = load ptr, ptr %3, align 8, !tbaa !13
  %5 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %6 = load i32, ptr @cube, align 8, !tbaa !14
  %7 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef %5, i32 noundef %6) #43
  %8 = tail call i32 (ptr, ptr, ...) @cdist0(ptr noundef %0, ptr noundef %1) #43
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %147, label %10

10:                                               ; preds = %2
  %11 = load i32, ptr @cube, align 8, !tbaa !14
  %12 = icmp slt i32 %11, 33
  %13 = add nsw i32 %11, -1
  %14 = lshr i32 %13, 3
  %15 = and i32 %14, 536870908
  %16 = add nuw nsw i32 %15, 8
  %17 = select i1 %12, i32 8, i32 %16
  %18 = zext i32 %17 to i64
  %19 = tail call noalias ptr @malloc(i64 noundef %18) #42
  %20 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %19, i32 noundef %11) #43
  %21 = tail call ptr (ptr, ptr, ptr, ...) @set_diff(ptr noundef %20, ptr noundef %0, ptr noundef %1) #43
  %22 = load i32, ptr @cube, align 8, !tbaa !14
  %23 = icmp slt i32 %22, 33
  %24 = add nsw i32 %22, -1
  %25 = lshr i32 %24, 3
  %26 = and i32 %25, 536870908
  %27 = add nuw nsw i32 %26, 8
  %28 = select i1 %23, i32 8, i32 %27
  %29 = zext i32 %28 to i64
  %30 = tail call noalias ptr @malloc(i64 noundef %29) #42
  %31 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %30, i32 noundef %22) #43
  %32 = tail call ptr (ptr, ptr, ptr, ...) @set_and(ptr noundef %31, ptr noundef %0, ptr noundef %1) #43
  %33 = load i32, ptr @cube, align 8, !tbaa !14
  %34 = icmp slt i32 %33, 33
  %35 = add nsw i32 %33, -1
  %36 = lshr i32 %35, 3
  %37 = and i32 %36, 536870908
  %38 = add nuw nsw i32 %37, 8
  %39 = select i1 %34, i32 8, i32 %38
  %40 = zext i32 %39 to i64
  %41 = tail call noalias ptr @malloc(i64 noundef %40) #42
  %42 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %41, i32 noundef %33) #43
  %43 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %44 = icmp sgt i32 %43, 0
  br i1 %44, label %45, label %138

45:                                               ; preds = %10
  %46 = getelementptr inbounds %struct.set_family, ptr %7, i64 0, i32 5
  %47 = getelementptr inbounds %struct.set_family, ptr %7, i64 0, i32 3
  br label %48

48:                                               ; preds = %133, %45
  %49 = phi i64 [ 0, %45 ], [ %134, %133 ]
  %50 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %51 = getelementptr inbounds ptr, ptr %50, i64 %49
  %52 = load ptr, ptr %51, align 8, !tbaa !13
  %53 = tail call i32 (ptr, ptr, ...) @setp_disjoint(ptr noundef %21, ptr noundef %52) #43
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %133

55:                                               ; preds = %48
  %56 = load ptr, ptr %46, align 8, !tbaa !33
  %57 = load i32, ptr %7, align 8, !tbaa !34
  %58 = load i32, ptr %47, align 4, !tbaa !31
  %59 = add nsw i32 %58, 1
  store i32 %59, ptr %47, align 4, !tbaa !31
  %60 = mul nsw i32 %58, %57
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i32, ptr %56, i64 %61
  %63 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %64 = getelementptr inbounds ptr, ptr %63, i64 %49
  %65 = load ptr, ptr %64, align 8, !tbaa !13
  %66 = tail call ptr (ptr, ptr, ptr, ...) @set_and(ptr noundef %62, ptr noundef %21, ptr noundef %65) #43
  %67 = load i32, ptr %32, align 4, !tbaa !16
  %68 = and i32 %67, 1023
  %69 = load i32, ptr %4, align 4, !tbaa !16
  %70 = and i32 %69, -1024
  %71 = or i32 %70, %68
  store i32 %71, ptr %4, align 4, !tbaa !16
  %72 = and i32 %67, 1023
  %73 = zext i32 %72 to i64
  br label %74

74:                                               ; preds = %74, %55
  %75 = phi i64 [ %82, %74 ], [ %73, %55 ]
  %76 = getelementptr inbounds i32, ptr %32, i64 %75
  %77 = load i32, ptr %76, align 4, !tbaa !16
  %78 = getelementptr inbounds i32, ptr %42, i64 %75
  %79 = load i32, ptr %78, align 4, !tbaa !16
  %80 = and i32 %79, %77
  %81 = getelementptr inbounds i32, ptr %4, i64 %75
  store i32 %80, ptr %81, align 4, !tbaa !16
  %82 = add nsw i64 %75, -1
  %83 = icmp ugt i64 %75, 1
  br i1 %83, label %74, label %84

84:                                               ; preds = %74
  %85 = load i32, ptr %62, align 4, !tbaa !16
  %86 = and i32 %85, 1023
  %87 = zext i32 %86 to i64
  br label %88

88:                                               ; preds = %88, %84
  %89 = phi i64 [ %95, %88 ], [ %87, %84 ]
  %90 = getelementptr inbounds i32, ptr %62, i64 %89
  %91 = load i32, ptr %90, align 4, !tbaa !16
  %92 = getelementptr inbounds i32, ptr %4, i64 %89
  %93 = load i32, ptr %92, align 4, !tbaa !16
  %94 = or i32 %93, %91
  store i32 %94, ptr %90, align 4, !tbaa !16
  %95 = add nsw i64 %89, -1
  %96 = icmp ugt i64 %89, 1
  br i1 %96, label %88, label %97

97:                                               ; preds = %88
  %98 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %99 = getelementptr inbounds ptr, ptr %98, i64 %49
  %100 = load ptr, ptr %99, align 8, !tbaa !13
  %101 = tail call ptr (ptr, ptr, ptr, ...) @set_or(ptr noundef %42, ptr noundef %42, ptr noundef %100) #43
  %102 = load i32, ptr %0, align 4, !tbaa !16
  %103 = and i32 %102, 1023
  %104 = load i32, ptr %4, align 4, !tbaa !16
  %105 = and i32 %104, -1024
  %106 = or i32 %105, %103
  store i32 %106, ptr %4, align 4, !tbaa !16
  %107 = and i32 %102, 1023
  %108 = zext i32 %107 to i64
  br label %109

109:                                              ; preds = %109, %97
  %110 = phi i64 [ %118, %109 ], [ %108, %97 ]
  %111 = getelementptr inbounds i32, ptr %0, i64 %110
  %112 = load i32, ptr %111, align 4, !tbaa !16
  %113 = getelementptr inbounds i32, ptr %42, i64 %110
  %114 = load i32, ptr %113, align 4, !tbaa !16
  %115 = xor i32 %114, -1
  %116 = and i32 %112, %115
  %117 = getelementptr inbounds i32, ptr %4, i64 %110
  store i32 %116, ptr %117, align 4, !tbaa !16
  %118 = add nsw i64 %110, -1
  %119 = icmp ugt i64 %110, 1
  br i1 %119, label %109, label %120

120:                                              ; preds = %109
  %121 = load i32, ptr %62, align 4, !tbaa !16
  %122 = and i32 %121, 1023
  %123 = zext i32 %122 to i64
  br label %124

124:                                              ; preds = %124, %120
  %125 = phi i64 [ %131, %124 ], [ %123, %120 ]
  %126 = getelementptr inbounds i32, ptr %62, i64 %125
  %127 = load i32, ptr %126, align 4, !tbaa !16
  %128 = getelementptr inbounds i32, ptr %4, i64 %125
  %129 = load i32, ptr %128, align 4, !tbaa !16
  %130 = or i32 %129, %127
  store i32 %130, ptr %126, align 4, !tbaa !16
  %131 = add nsw i64 %125, -1
  %132 = icmp ugt i64 %125, 1
  br i1 %132, label %124, label %133

133:                                              ; preds = %124, %48
  %134 = add nuw nsw i64 %49, 1
  %135 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %136 = sext i32 %135 to i64
  %137 = icmp slt i64 %134, %136
  br i1 %137, label %48, label %138

138:                                              ; preds = %133, %10
  %139 = icmp eq ptr %21, null
  br i1 %139, label %141, label %140

140:                                              ; preds = %138
  tail call void @free(ptr noundef nonnull %21) #43
  br label %141

141:                                              ; preds = %140, %138
  %142 = icmp eq ptr %32, null
  br i1 %142, label %144, label %143

143:                                              ; preds = %141
  tail call void @free(ptr noundef nonnull %32) #43
  br label %144

144:                                              ; preds = %143, %141
  %145 = icmp eq ptr %42, null
  br i1 %145, label %149, label %146

146:                                              ; preds = %144
  tail call void @free(ptr noundef nonnull %42) #43
  br label %149

147:                                              ; preds = %2
  %148 = tail call ptr (ptr, ptr, ...) @sf_addset(ptr noundef %7, ptr noundef %0) #43
  br label %149

149:                                              ; preds = %147, %146, %144
  %150 = phi ptr [ %7, %146 ], [ %7, %144 ], [ %148, %147 ]
  ret ptr %150
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @cv_dsharp(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #0 {
  %3 = load i32, ptr @cube, align 8, !tbaa !14
  %4 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 0, i32 noundef %3) #43
  %5 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %6 = load ptr, ptr %5, align 8, !tbaa !33
  %7 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %8 = load i32, ptr %7, align 4, !tbaa !31
  %9 = load i32, ptr %0, align 8, !tbaa !34
  %10 = mul nsw i32 %9, %8
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds i32, ptr %6, i64 %11
  %13 = icmp sgt i32 %10, 0
  br i1 %13, label %14, label %23

14:                                               ; preds = %14, %2
  %15 = phi ptr [ %18, %14 ], [ %4, %2 ]
  %16 = phi ptr [ %21, %14 ], [ %6, %2 ]
  %17 = tail call ptr @cb_dsharp(ptr noundef %16, ptr noundef %1) #44
  %18 = tail call ptr (ptr, ptr, ...) @sf_union(ptr noundef %15, ptr noundef %17) #43
  %19 = load i32, ptr %0, align 8, !tbaa !34
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, ptr %16, i64 %20
  %22 = icmp ult ptr %21, %12
  br i1 %22, label %14, label %23

23:                                               ; preds = %14, %2
  %24 = phi ptr [ %4, %2 ], [ %18, %14 ]
  ret ptr %24
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @do_sm_minimum_cover(ptr nocapture noundef readonly %0) #0 {
  %2 = tail call ptr (...) @sm_alloc() #43
  %3 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %4 = load ptr, ptr %3, align 8, !tbaa !33
  %5 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %6 = load i32, ptr %5, align 4, !tbaa !31
  %7 = load i32, ptr %0, align 8, !tbaa !34
  %8 = mul nsw i32 %7, %6
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds i32, ptr %4, i64 %9
  %11 = icmp sgt i32 %8, 0
  br i1 %11, label %12, label %52

12:                                               ; preds = %46, %1
  %13 = phi i32 [ %47, %46 ], [ %7, %1 ]
  %14 = phi ptr [ %50, %46 ], [ %4, %1 ]
  %15 = phi i32 [ %48, %46 ], [ 0, %1 ]
  %16 = load i32, ptr %14, align 4, !tbaa !16
  %17 = and i32 %16, 1023
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %46, label %19

19:                                               ; preds = %12
  %20 = and i32 %16, 1023
  %21 = zext i32 %20 to i64
  br label %24

22:                                               ; preds = %40, %24
  %23 = icmp sgt i64 %25, 1
  br i1 %23, label %24, label %44

24:                                               ; preds = %22, %19
  %25 = phi i64 [ %21, %19 ], [ %28, %22 ]
  %26 = getelementptr inbounds i32, ptr %14, i64 %25
  %27 = load i32, ptr %26, align 4, !tbaa !16
  %28 = add nsw i64 %25, -1
  %29 = icmp eq i32 %27, 0
  br i1 %29, label %22, label %30

30:                                               ; preds = %24
  %31 = trunc i64 %28 to i32
  %32 = shl i32 %31, 5
  br label %33

33:                                               ; preds = %40, %30
  %34 = phi i32 [ %42, %40 ], [ %27, %30 ]
  %35 = phi i32 [ %41, %40 ], [ %32, %30 ]
  %36 = and i32 %34, 1
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %40, label %38

38:                                               ; preds = %33
  %39 = tail call ptr (ptr, i32, i32, ...) @sm_insert(ptr noundef %2, i32 noundef %15, i32 noundef %35) #43
  br label %40

40:                                               ; preds = %38, %33
  %41 = add nuw nsw i32 %35, 1
  %42 = lshr i32 %34, 1
  %43 = icmp ult i32 %34, 2
  br i1 %43, label %22, label %33

44:                                               ; preds = %22
  %45 = load i32, ptr %0, align 8, !tbaa !34
  br label %46

46:                                               ; preds = %44, %12
  %47 = phi i32 [ %45, %44 ], [ %13, %12 ]
  %48 = add nuw nsw i32 %15, 1
  %49 = sext i32 %47 to i64
  %50 = getelementptr inbounds i32, ptr %14, i64 %49
  %51 = icmp ult ptr %50, %10
  br i1 %51, label %12, label %52

52:                                               ; preds = %46, %1
  %53 = tail call ptr (ptr, ptr, i32, i32, ...) @sm_minimum_cover(ptr noundef %2, ptr noundef null, i32 noundef 1, i32 noundef 0) #43
  tail call void (ptr, ...) @sm_free(ptr noundef %2) #43
  %54 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 1
  %55 = load i32, ptr %54, align 4, !tbaa !44
  %56 = icmp slt i32 %55, 33
  %57 = add nsw i32 %55, -1
  %58 = lshr i32 %57, 3
  %59 = and i32 %58, 536870908
  %60 = add nuw nsw i32 %59, 8
  %61 = select i1 %56, i32 8, i32 %60
  %62 = zext i32 %61 to i64
  %63 = tail call noalias ptr @malloc(i64 noundef %62) #42
  %64 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %63, i32 noundef %55) #43
  %65 = getelementptr inbounds %struct.sm_col_struct, ptr %53, i64 0, i32 3
  %66 = load ptr, ptr %65, align 8, !tbaa !13
  %67 = icmp eq ptr %66, null
  br i1 %67, label %83, label %68

68:                                               ; preds = %68, %52
  %69 = phi ptr [ %81, %68 ], [ %66, %52 ]
  %70 = getelementptr inbounds %struct.sm_element_struct, ptr %69, i64 0, i32 1
  %71 = load i32, ptr %70, align 4, !tbaa !103
  %72 = and i32 %71, 31
  %73 = shl nuw i32 1, %72
  %74 = ashr i32 %71, 5
  %75 = add nsw i32 %74, 1
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds i32, ptr %64, i64 %76
  %78 = load i32, ptr %77, align 4, !tbaa !16
  %79 = or i32 %73, %78
  store i32 %79, ptr %77, align 4, !tbaa !16
  %80 = getelementptr inbounds %struct.sm_element_struct, ptr %69, i64 0, i32 4
  %81 = load ptr, ptr %80, align 8, !tbaa !13
  %82 = icmp eq ptr %81, null
  br i1 %82, label %83, label %68

83:                                               ; preds = %68, %52
  tail call void (ptr, ...) @sm_row_free(ptr noundef %53) #43
  ret ptr %64
}

; Function Attrs: nounwind optsize uwtable
define internal noalias ptr @solution_alloc() #0 {
  %1 = tail call noalias dereferenceable_or_null(16) ptr @malloc(i64 noundef 16) #42
  %2 = getelementptr inbounds %struct.pla_types_struct, ptr %1, i64 0, i32 1
  store i32 0, ptr %2, align 8, !tbaa !126
  %3 = tail call ptr (...) @sm_row_alloc() #43
  store ptr %3, ptr %1, align 8, !tbaa !120
  ret ptr %1
}

; Function Attrs: nounwind optsize uwtable
define internal void @solution_free(ptr nocapture noundef %0) #0 {
  %2 = load ptr, ptr %0, align 8, !tbaa !120
  tail call void (ptr, ...) @sm_row_free(ptr noundef %2) #43
  tail call void @free(ptr noundef %0) #43
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @solution_dup(ptr nocapture noundef readonly %0) #0 {
  %2 = tail call noalias dereferenceable_or_null(16) ptr @malloc(i64 noundef 16) #42
  %3 = getelementptr inbounds %struct.pla_types_struct, ptr %0, i64 0, i32 1
  %4 = load i32, ptr %3, align 8, !tbaa !126
  %5 = getelementptr inbounds %struct.pla_types_struct, ptr %2, i64 0, i32 1
  store i32 %4, ptr %5, align 8, !tbaa !126
  %6 = load ptr, ptr %0, align 8, !tbaa !120
  %7 = tail call ptr (ptr, ...) @sm_row_dup(ptr noundef %6) #43
  store ptr %7, ptr %2, align 8, !tbaa !120
  ret ptr %2
}

; Function Attrs: nounwind optsize uwtable
define internal void @solution_add(ptr nocapture noundef %0, ptr noundef readonly %1, i32 noundef %2) #0 {
  %4 = load ptr, ptr %0, align 8, !tbaa !120
  %5 = tail call ptr (ptr, i32, ...) @sm_row_insert(ptr noundef %4, i32 noundef %2) #43
  %6 = icmp eq ptr %1, null
  br i1 %6, label %11, label %7

7:                                                ; preds = %3
  %8 = sext i32 %2 to i64
  %9 = getelementptr inbounds i32, ptr %1, i64 %8
  %10 = load i32, ptr %9, align 4, !tbaa !16
  br label %11

11:                                               ; preds = %7, %3
  %12 = phi i32 [ %10, %7 ], [ 1, %3 ]
  %13 = getelementptr inbounds %struct.pla_types_struct, ptr %0, i64 0, i32 1
  %14 = load i32, ptr %13, align 8, !tbaa !126
  %15 = add nsw i32 %14, %12
  store i32 %15, ptr %13, align 8, !tbaa !126
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @solution_accept(ptr nocapture noundef %0, ptr noundef %1, ptr noundef readonly %2, i32 noundef %3) #0 {
  %5 = load ptr, ptr %0, align 8, !tbaa !120
  %6 = tail call ptr (ptr, i32, ...) @sm_row_insert(ptr noundef %5, i32 noundef %3) #43
  %7 = icmp eq ptr %2, null
  br i1 %7, label %12, label %8

8:                                                ; preds = %4
  %9 = sext i32 %3 to i64
  %10 = getelementptr inbounds i32, ptr %2, i64 %9
  %11 = load i32, ptr %10, align 4, !tbaa !16
  br label %12

12:                                               ; preds = %8, %4
  %13 = phi i32 [ %11, %8 ], [ 1, %4 ]
  %14 = getelementptr inbounds %struct.pla_types_struct, ptr %0, i64 0, i32 1
  %15 = load i32, ptr %14, align 8, !tbaa !126
  %16 = add nsw i32 %15, %13
  store i32 %16, ptr %14, align 8, !tbaa !126
  %17 = icmp sgt i32 %3, -1
  tail call void @llvm.assume(i1 %17)
  %18 = getelementptr inbounds %struct.sm_matrix_struct, ptr %1, i64 0, i32 3
  %19 = load i32, ptr %18, align 8, !tbaa !104
  %20 = icmp sgt i32 %19, %3
  tail call void @llvm.assume(i1 %20)
  %21 = getelementptr inbounds %struct.sm_matrix_struct, ptr %1, i64 0, i32 2
  %22 = load ptr, ptr %21, align 8, !tbaa !105
  %23 = zext i32 %3 to i64
  %24 = getelementptr inbounds ptr, ptr %22, i64 %23
  %25 = load ptr, ptr %24, align 8, !tbaa !13
  %26 = getelementptr inbounds %struct.sm_col_struct, ptr %25, i64 0, i32 3
  %27 = load ptr, ptr %26, align 8, !tbaa !39
  %28 = icmp eq ptr %27, null
  br i1 %28, label %35, label %29

29:                                               ; preds = %29, %12
  %30 = phi ptr [ %32, %29 ], [ %27, %12 ]
  %31 = getelementptr inbounds %struct.sm_element_struct, ptr %30, i64 0, i32 2
  %32 = load ptr, ptr %31, align 8, !tbaa !40
  %33 = load i32, ptr %30, align 8, !tbaa !42
  tail call void (ptr, i32, ...) @sm_delrow(ptr noundef %1, i32 noundef %33) #43
  %34 = icmp eq ptr %32, null
  br i1 %34, label %35, label %29

35:                                               ; preds = %29, %12
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @solution_reject(ptr nocapture noundef readnone %0, ptr noundef %1, ptr nocapture noundef readnone %2, i32 noundef %3) #0 {
  tail call void (ptr, i32, ...) @sm_delcol(ptr noundef %1, i32 noundef %3) #43
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @solution_choose_best(ptr noundef %0, ptr noundef %1) #0 {
  %3 = icmp eq ptr %0, null
  br i1 %3, label %15, label %4

4:                                                ; preds = %2
  %5 = icmp eq ptr %1, null
  br i1 %5, label %15, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %struct.pla_types_struct, ptr %0, i64 0, i32 1
  %8 = load i32, ptr %7, align 8, !tbaa !126
  %9 = getelementptr inbounds %struct.pla_types_struct, ptr %1, i64 0, i32 1
  %10 = load i32, ptr %9, align 8, !tbaa !126
  %11 = icmp sgt i32 %8, %10
  %12 = select i1 %11, ptr %0, ptr %1
  %13 = select i1 %11, ptr %1, ptr %0
  %14 = load ptr, ptr %12, align 8, !tbaa !120
  tail call void (ptr, ...) @sm_row_free(ptr noundef %14) #43
  tail call void @free(ptr noundef nonnull %12) #43
  br label %15

15:                                               ; preds = %6, %4, %2
  %16 = phi ptr [ %0, %4 ], [ %1, %2 ], [ %13, %6 ]
  ret ptr %16
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @make_sparse(ptr noundef %0, ptr nocapture noundef readonly %1, ptr noundef %2) #0 {
  %4 = alloca %struct.cost_struct, align 4
  %5 = alloca %struct.cost_struct, align 4
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %4) #45
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %5) #45
  call void (ptr, ptr, ...) @cover_cost(ptr noundef %0, ptr noundef nonnull %5) #43
  %6 = getelementptr inbounds %struct.cost_struct, ptr %4, i64 0, i32 4
  %7 = getelementptr inbounds %struct.cost_struct, ptr %5, i64 0, i32 4
  br label %8

8:                                                ; preds = %21, %3
  %9 = phi ptr [ %0, %3 ], [ %17, %21 ]
  %10 = call i64 (...) @util_cpu_time() #43
  %11 = call ptr @mv_reduce(ptr noundef %9, ptr noundef %1) #44
  call void (i64, i32, ptr, ptr, ...) @totals(i64 noundef %10, i32 noundef 12, ptr noundef %11, ptr noundef nonnull %4) #43
  %12 = load i32, ptr %6, align 4, !tbaa !96
  %13 = load i32, ptr %7, align 4, !tbaa !96
  %14 = icmp eq i32 %12, %13
  br i1 %14, label %24, label %15

15:                                               ; preds = %8
  call void (ptr, ptr, ...) @copy_cost(ptr noundef nonnull %4, ptr noundef nonnull %5) #43
  %16 = call i64 (...) @util_cpu_time() #43
  %17 = call ptr (ptr, ptr, i32, ...) @expand(ptr noundef %11, ptr noundef %2, i32 noundef 1) #43
  call void (i64, i32, ptr, ptr, ...) @totals(i64 noundef %16, i32 noundef 13, ptr noundef %17, ptr noundef nonnull %4) #43
  %18 = load i32, ptr %6, align 4, !tbaa !96
  %19 = load i32, ptr %7, align 4, !tbaa !96
  %20 = icmp eq i32 %18, %19
  br i1 %20, label %24, label %21

21:                                               ; preds = %15
  call void (ptr, ptr, ...) @copy_cost(ptr noundef nonnull %4, ptr noundef nonnull %5) #43
  %22 = load i32, ptr @force_irredundant, align 4, !tbaa !16
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %8

24:                                               ; preds = %21, %15, %8
  %25 = phi ptr [ %11, %8 ], [ %17, %15 ], [ %17, %21 ]
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %5) #45
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %4) #45
  ret ptr %25
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @mv_reduce(ptr noundef %0, ptr nocapture noundef readonly %1) #0 {
  %3 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %5, label %192

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %7 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %8 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 3
  %9 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 5
  br label %10

10:                                               ; preds = %187, %5
  %11 = phi i32 [ %3, %5 ], [ %188, %187 ]
  %12 = phi i64 [ 0, %5 ], [ %189, %187 ]
  %13 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 16), align 8, !tbaa !47
  %14 = getelementptr inbounds i32, ptr %13, i64 %12
  %15 = load i32, ptr %14, align 4, !tbaa !16
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %187, label %17

17:                                               ; preds = %10
  %18 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8, !tbaa !30
  %19 = getelementptr inbounds i32, ptr %18, i64 %12
  %20 = load i32, ptr %19, align 4, !tbaa !16
  %21 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  %22 = getelementptr inbounds i32, ptr %21, i64 %12
  %23 = load i32, ptr %22, align 4, !tbaa !16
  %24 = icmp sgt i32 %20, %23
  br i1 %24, label %187, label %25

25:                                               ; preds = %179, %17
  %26 = phi i32 [ %180, %179 ], [ %20, %17 ]
  %27 = load i32, ptr %6, align 4, !tbaa !31
  %28 = sext i32 %27 to i64
  %29 = shl nsw i64 %28, 3
  %30 = tail call noalias ptr @malloc(i64 noundef %29) #42
  %31 = load i32, ptr @cube, align 8, !tbaa !14
  %32 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef %27, i32 noundef %31) #43
  %33 = load ptr, ptr %7, align 8, !tbaa !33
  %34 = load i32, ptr %6, align 4, !tbaa !31
  %35 = load i32, ptr %0, align 8, !tbaa !34
  %36 = mul nsw i32 %35, %34
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds i32, ptr %33, i64 %37
  %39 = icmp sgt i32 %36, 0
  br i1 %39, label %40, label %78

40:                                               ; preds = %25
  %41 = ashr i32 %26, 5
  %42 = add nsw i32 %41, 1
  %43 = sext i32 %42 to i64
  %44 = and i32 %26, 31
  %45 = shl nuw i32 1, %44
  %46 = getelementptr inbounds %struct.set_family, ptr %32, i64 0, i32 3
  %47 = getelementptr inbounds %struct.set_family, ptr %32, i64 0, i32 5
  br label %48

48:                                               ; preds = %73, %40
  %49 = phi i32 [ %35, %40 ], [ %74, %73 ]
  %50 = phi ptr [ %33, %40 ], [ %76, %73 ]
  %51 = getelementptr inbounds i32, ptr %50, i64 %43
  %52 = load i32, ptr %51, align 4, !tbaa !16
  %53 = and i32 %52, %45
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %73, label %55

55:                                               ; preds = %48
  %56 = load i32, ptr %46, align 4, !tbaa !31
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds ptr, ptr %30, i64 %57
  store ptr %50, ptr %58, align 8, !tbaa !13
  %59 = load ptr, ptr %47, align 8, !tbaa !33
  %60 = load i32, ptr %32, align 8, !tbaa !34
  %61 = add nsw i32 %56, 1
  store i32 %61, ptr %46, align 4, !tbaa !31
  %62 = mul nsw i32 %60, %56
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds i32, ptr %59, i64 %63
  %65 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %66 = getelementptr inbounds ptr, ptr %65, i64 %12
  %67 = load ptr, ptr %66, align 8, !tbaa !13
  %68 = tail call ptr (ptr, ptr, ptr, ...) @set_diff(ptr noundef %64, ptr noundef nonnull %50, ptr noundef %67) #43
  %69 = getelementptr inbounds i32, ptr %64, i64 %43
  %70 = load i32, ptr %69, align 4, !tbaa !16
  %71 = or i32 %70, %45
  store i32 %71, ptr %69, align 4, !tbaa !16
  %72 = load i32, ptr %0, align 8, !tbaa !34
  br label %73

73:                                               ; preds = %55, %48
  %74 = phi i32 [ %49, %48 ], [ %72, %55 ]
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds i32, ptr %50, i64 %75
  %77 = icmp ult ptr %76, %38
  br i1 %77, label %48, label %78

78:                                               ; preds = %73, %25
  %79 = load i32, ptr %8, align 4, !tbaa !31
  %80 = load i32, ptr @cube, align 8, !tbaa !14
  %81 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef %79, i32 noundef %80) #43
  %82 = load ptr, ptr %9, align 8, !tbaa !33
  %83 = load i32, ptr %8, align 4, !tbaa !31
  %84 = load i32, ptr %1, align 8, !tbaa !34
  %85 = mul nsw i32 %84, %83
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds i32, ptr %82, i64 %86
  %88 = icmp sgt i32 %85, 0
  br i1 %88, label %89, label %125

89:                                               ; preds = %78
  %90 = ashr i32 %26, 5
  %91 = add nsw i32 %90, 1
  %92 = sext i32 %91 to i64
  %93 = and i32 %26, 31
  %94 = shl nuw i32 1, %93
  %95 = getelementptr inbounds %struct.set_family, ptr %81, i64 0, i32 5
  %96 = getelementptr inbounds %struct.set_family, ptr %81, i64 0, i32 3
  br label %97

97:                                               ; preds = %120, %89
  %98 = phi i32 [ %84, %89 ], [ %121, %120 ]
  %99 = phi ptr [ %82, %89 ], [ %123, %120 ]
  %100 = getelementptr inbounds i32, ptr %99, i64 %92
  %101 = load i32, ptr %100, align 4, !tbaa !16
  %102 = and i32 %101, %94
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %120, label %104

104:                                              ; preds = %97
  %105 = load ptr, ptr %95, align 8, !tbaa !33
  %106 = load i32, ptr %81, align 8, !tbaa !34
  %107 = load i32, ptr %96, align 4, !tbaa !31
  %108 = add nsw i32 %107, 1
  store i32 %108, ptr %96, align 4, !tbaa !31
  %109 = mul nsw i32 %107, %106
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds i32, ptr %105, i64 %110
  %112 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %113 = getelementptr inbounds ptr, ptr %112, i64 %12
  %114 = load ptr, ptr %113, align 8, !tbaa !13
  %115 = tail call ptr (ptr, ptr, ptr, ...) @set_diff(ptr noundef %111, ptr noundef nonnull %99, ptr noundef %114) #43
  %116 = getelementptr inbounds i32, ptr %111, i64 %92
  %117 = load i32, ptr %116, align 4, !tbaa !16
  %118 = or i32 %117, %94
  store i32 %118, ptr %116, align 4, !tbaa !16
  %119 = load i32, ptr %1, align 8, !tbaa !34
  br label %120

120:                                              ; preds = %104, %97
  %121 = phi i32 [ %98, %97 ], [ %119, %104 ]
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds i32, ptr %99, i64 %122
  %124 = icmp ult ptr %123, %87
  br i1 %124, label %97, label %125

125:                                              ; preds = %120, %78
  tail call void (ptr, ptr, ...) @mark_irredundant(ptr noundef %32, ptr noundef %81) #43
  %126 = getelementptr inbounds %struct.set_family, ptr %32, i64 0, i32 5
  %127 = load ptr, ptr %126, align 8, !tbaa !33
  %128 = getelementptr inbounds %struct.set_family, ptr %32, i64 0, i32 3
  %129 = load i32, ptr %128, align 4, !tbaa !31
  %130 = load i32, ptr %32, align 8, !tbaa !34
  %131 = mul nsw i32 %130, %129
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds i32, ptr %127, i64 %132
  %134 = icmp sgt i32 %131, 0
  br i1 %134, label %135, label %176

135:                                              ; preds = %125
  %136 = and i32 %26, 31
  %137 = shl nuw i32 1, %136
  %138 = xor i32 %137, -1
  %139 = ashr i32 %26, 5
  %140 = add nsw i32 %139, 1
  %141 = sext i32 %140 to i64
  br label %142

142:                                              ; preds = %170, %135
  %143 = phi i32 [ %130, %135 ], [ %171, %170 ]
  %144 = phi i64 [ 0, %135 ], [ %172, %170 ]
  %145 = phi ptr [ %127, %135 ], [ %174, %170 ]
  %146 = load i32, ptr %145, align 4, !tbaa !16
  %147 = and i32 %146, 8192
  %148 = icmp eq i32 %147, 0
  br i1 %148, label %149, label %170

149:                                              ; preds = %142
  %150 = getelementptr inbounds ptr, ptr %30, i64 %144
  %151 = load ptr, ptr %150, align 8, !tbaa !13
  %152 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %153 = add nsw i32 %152, -1
  %154 = zext i32 %153 to i64
  %155 = icmp eq i64 %12, %154
  br i1 %155, label %162, label %156

156:                                              ; preds = %149
  %157 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %158 = getelementptr inbounds ptr, ptr %157, i64 %12
  %159 = load ptr, ptr %158, align 8, !tbaa !13
  %160 = tail call i32 (ptr, ptr, ...) @setp_implies(ptr noundef %159, ptr noundef %151) #43
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %162, label %166

162:                                              ; preds = %156, %149
  %163 = getelementptr inbounds i32, ptr %151, i64 %141
  %164 = load i32, ptr %163, align 4, !tbaa !16
  %165 = and i32 %164, %138
  store i32 %165, ptr %163, align 4, !tbaa !16
  br label %166

166:                                              ; preds = %162, %156
  %167 = load i32, ptr %151, align 4, !tbaa !16
  %168 = and i32 %167, -32769
  store i32 %168, ptr %151, align 4, !tbaa !16
  %169 = load i32, ptr %32, align 8, !tbaa !34
  br label %170

170:                                              ; preds = %166, %142
  %171 = phi i32 [ %169, %166 ], [ %143, %142 ]
  %172 = add nuw i64 %144, 1
  %173 = sext i32 %171 to i64
  %174 = getelementptr inbounds i32, ptr %145, i64 %173
  %175 = icmp ult ptr %174, %133
  br i1 %175, label %142, label %176

176:                                              ; preds = %170, %125
  tail call void (ptr, ...) @sf_free(ptr noundef nonnull %32) #43
  tail call void (ptr, ...) @sf_free(ptr noundef %81) #43
  %177 = icmp eq ptr %30, null
  br i1 %177, label %179, label %178

178:                                              ; preds = %176
  tail call void @free(ptr noundef nonnull %30) #43
  br label %179

179:                                              ; preds = %178, %176
  %180 = add nsw i32 %26, 1
  %181 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8, !tbaa !29
  %182 = getelementptr inbounds i32, ptr %181, i64 %12
  %183 = load i32, ptr %182, align 4, !tbaa !16
  %184 = icmp slt i32 %26, %183
  br i1 %184, label %25, label %185

185:                                              ; preds = %179
  %186 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  br label %187

187:                                              ; preds = %185, %17, %10
  %188 = phi i32 [ %186, %185 ], [ %11, %17 ], [ %11, %10 ]
  %189 = add nuw nsw i64 %12, 1
  %190 = sext i32 %188 to i64
  %191 = icmp slt i64 %189, %190
  br i1 %191, label %10, label %192

192:                                              ; preds = %187, %2
  %193 = tail call ptr (ptr, ...) @sf_active(ptr noundef %0) #43
  %194 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %195 = icmp sgt i32 %194, 0
  br i1 %195, label %196, label %243

196:                                              ; preds = %192
  %197 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %198 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %199 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 4
  br label %200

200:                                              ; preds = %238, %196
  %201 = phi i32 [ %194, %196 ], [ %239, %238 ]
  %202 = phi i64 [ 0, %196 ], [ %240, %238 ]
  %203 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 16), align 8, !tbaa !47
  %204 = getelementptr inbounds i32, ptr %203, i64 %202
  %205 = load i32, ptr %204, align 4, !tbaa !16
  %206 = icmp eq i32 %205, 0
  br i1 %206, label %238, label %207

207:                                              ; preds = %200
  %208 = load ptr, ptr %197, align 8, !tbaa !33
  %209 = load i32, ptr %198, align 4, !tbaa !31
  %210 = load i32, ptr %0, align 8, !tbaa !34
  %211 = mul nsw i32 %210, %209
  %212 = sext i32 %211 to i64
  %213 = getelementptr inbounds i32, ptr %208, i64 %212
  %214 = icmp sgt i32 %211, 0
  br i1 %214, label %215, label %238

215:                                              ; preds = %231, %207
  %216 = phi ptr [ %234, %231 ], [ %208, %207 ]
  %217 = load i32, ptr %216, align 4, !tbaa !16
  %218 = and i32 %217, 8192
  %219 = icmp eq i32 %218, 0
  br i1 %219, label %231, label %220

220:                                              ; preds = %215
  %221 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 10), align 8, !tbaa !17
  %222 = getelementptr inbounds ptr, ptr %221, i64 %202
  %223 = load ptr, ptr %222, align 8, !tbaa !13
  %224 = tail call i32 (ptr, ptr, ...) @setp_disjoint(ptr noundef nonnull %216, ptr noundef %223) #43
  %225 = icmp eq i32 %224, 0
  br i1 %225, label %231, label %226

226:                                              ; preds = %220
  %227 = load i32, ptr %216, align 4, !tbaa !16
  %228 = and i32 %227, -8193
  store i32 %228, ptr %216, align 4, !tbaa !16
  %229 = load i32, ptr %199, align 8, !tbaa !114
  %230 = add nsw i32 %229, -1
  store i32 %230, ptr %199, align 8, !tbaa !114
  br label %231

231:                                              ; preds = %226, %220, %215
  %232 = load i32, ptr %0, align 8, !tbaa !34
  %233 = sext i32 %232 to i64
  %234 = getelementptr inbounds i32, ptr %216, i64 %233
  %235 = icmp ult ptr %234, %213
  br i1 %235, label %215, label %236

236:                                              ; preds = %231
  %237 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  br label %238

238:                                              ; preds = %236, %207, %200
  %239 = phi i32 [ %237, %236 ], [ %201, %207 ], [ %201, %200 ]
  %240 = add nuw nsw i64 %202, 1
  %241 = sext i32 %239 to i64
  %242 = icmp slt i64 %240, %241
  br i1 %242, label %200, label %243

243:                                              ; preds = %238, %192
  %244 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %245 = load i32, ptr %244, align 4, !tbaa !31
  %246 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 4
  %247 = load i32, ptr %246, align 8, !tbaa !114
  %248 = icmp eq i32 %245, %247
  br i1 %248, label %251, label %249

249:                                              ; preds = %243
  %250 = tail call ptr (ptr, ...) @sf_inactive(ptr noundef nonnull %0) #43
  br label %251

251:                                              ; preds = %249, %243
  %252 = phi ptr [ %250, %249 ], [ %0, %243 ]
  ret ptr %252
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @map_cover_to_unate(ptr noundef %0) #0 {
  %2 = getelementptr inbounds ptr, ptr %0, i64 1
  %3 = load ptr, ptr %2, align 8, !tbaa !13
  %4 = ptrtoint ptr %3 to i64
  %5 = ptrtoint ptr %0 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 3
  %8 = add nsw i64 %7, -3
  %9 = load i32, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 5), align 4, !tbaa !23
  %10 = tail call ptr (i64, i32, ...) @sf_new(i64 noundef %8, i32 noundef %9) #43
  %11 = load ptr, ptr %2, align 8, !tbaa !13
  %12 = ptrtoint ptr %11 to i64
  %13 = sub i64 %12, %5
  %14 = lshr exact i64 %13, 3
  %15 = trunc i64 %14 to i32
  %16 = add i32 %15, -3
  %17 = getelementptr inbounds %struct.set_family, ptr %10, i64 0, i32 3
  store i32 %16, ptr %17, align 4, !tbaa !31
  %18 = getelementptr inbounds %struct.set_family, ptr %10, i64 0, i32 5
  %19 = icmp sgt i32 %16, 0
  br i1 %19, label %20, label %23

20:                                               ; preds = %1
  %21 = load ptr, ptr %18, align 8, !tbaa !33
  %22 = getelementptr inbounds %struct.set_family, ptr %10, i64 0, i32 1
  br label %30

23:                                               ; preds = %30, %1
  %24 = load i32, ptr @cube, align 8, !tbaa !14
  %25 = icmp sgt i32 %24, 0
  br i1 %25, label %26, label %96

26:                                               ; preds = %23
  %27 = load ptr, ptr @cdata, align 8, !tbaa !20
  %28 = getelementptr inbounds ptr, ptr %0, i64 2
  %29 = getelementptr inbounds ptr, ptr %0, i64 3
  br label %41

30:                                               ; preds = %30, %20
  %31 = phi i32 [ 0, %20 ], [ %38, %30 ]
  %32 = phi ptr [ %21, %20 ], [ %37, %30 ]
  %33 = load i32, ptr %22, align 4, !tbaa !44
  %34 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %32, i32 noundef %33) #43
  %35 = load i32, ptr %10, align 8, !tbaa !34
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, ptr %32, i64 %36
  %38 = add nuw nsw i32 %31, 1
  %39 = load i32, ptr %17, align 4, !tbaa !31
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %30, label %23

41:                                               ; preds = %89, %26
  %42 = phi i32 [ %24, %26 ], [ %90, %89 ]
  %43 = phi i32 [ %24, %26 ], [ %91, %89 ]
  %44 = phi i64 [ 0, %26 ], [ %93, %89 ]
  %45 = phi i32 [ 0, %26 ], [ %92, %89 ]
  %46 = getelementptr inbounds i32, ptr %27, i64 %44
  %47 = load i32, ptr %46, align 4, !tbaa !16
  %48 = icmp sgt i32 %47, 0
  br i1 %48, label %49, label %89

49:                                               ; preds = %41
  %50 = trunc i64 %44 to i32
  %51 = and i32 %50, 31
  %52 = shl nuw i32 1, %51
  %53 = and i32 %45, 31
  %54 = shl nuw i32 1, %53
  %55 = load ptr, ptr %28, align 8, !tbaa !13
  %56 = icmp eq ptr %55, null
  br i1 %56, label %86, label %57

57:                                               ; preds = %49
  %58 = load ptr, ptr %18, align 8, !tbaa !33
  %59 = ashr i32 %45, 5
  %60 = add nsw i32 %59, 1
  %61 = lshr i32 %50, 5
  %62 = add nuw nsw i32 %61, 1
  %63 = zext i32 %62 to i64
  %64 = zext i32 %60 to i64
  br label %65

65:                                               ; preds = %77, %57
  %66 = phi ptr [ %55, %57 ], [ %82, %77 ]
  %67 = phi ptr [ %29, %57 ], [ %81, %77 ]
  %68 = phi ptr [ %58, %57 ], [ %80, %77 ]
  %69 = getelementptr inbounds i32, ptr %66, i64 %63
  %70 = load i32, ptr %69, align 4, !tbaa !16
  %71 = and i32 %70, %52
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %73, label %77

73:                                               ; preds = %65
  %74 = getelementptr inbounds i32, ptr %68, i64 %64
  %75 = load i32, ptr %74, align 4, !tbaa !16
  %76 = or i32 %75, %54
  store i32 %76, ptr %74, align 4, !tbaa !16
  br label %77

77:                                               ; preds = %73, %65
  %78 = load i32, ptr %10, align 8, !tbaa !34
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds i32, ptr %68, i64 %79
  %81 = getelementptr inbounds ptr, ptr %67, i64 1
  %82 = load ptr, ptr %67, align 8, !tbaa !13
  %83 = icmp eq ptr %82, null
  br i1 %83, label %84, label %65

84:                                               ; preds = %77
  %85 = load i32, ptr @cube, align 8, !tbaa !14
  br label %86

86:                                               ; preds = %84, %49
  %87 = phi i32 [ %85, %84 ], [ %42, %49 ]
  %88 = add nsw i32 %45, 1
  br label %89

89:                                               ; preds = %86, %41
  %90 = phi i32 [ %87, %86 ], [ %42, %41 ]
  %91 = phi i32 [ %87, %86 ], [ %43, %41 ]
  %92 = phi i32 [ %88, %86 ], [ %45, %41 ]
  %93 = add nuw nsw i64 %44, 1
  %94 = sext i32 %91 to i64
  %95 = icmp slt i64 %93, %94
  br i1 %95, label %41, label %96

96:                                               ; preds = %89, %23
  ret ptr %10
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @map_unate_to_cover(ptr nocapture noundef readonly %0) #0 {
  %2 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %3 = load i32, ptr %2, align 4, !tbaa !31
  %4 = load i32, ptr @cube, align 8, !tbaa !14
  %5 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef %3, i32 noundef %4) #43
  %6 = load i32, ptr %2, align 4, !tbaa !31
  %7 = getelementptr inbounds %struct.set_family, ptr %5, i64 0, i32 3
  store i32 %6, ptr %7, align 4, !tbaa !31
  %8 = load i32, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 1), align 4, !tbaa !24
  %9 = sext i32 %8 to i64
  %10 = shl nsw i64 %9, 2
  %11 = tail call noalias ptr @malloc(i64 noundef %10) #42
  %12 = icmp sgt i32 %8, 0
  br i1 %12, label %13, label %31

13:                                               ; preds = %1
  %14 = load ptr, ptr getelementptr inbounds (%struct.cdata_struct, ptr @cdata, i64 0, i32 3), align 8, !tbaa !26
  %15 = zext i32 %8 to i64
  br label %16

16:                                               ; preds = %27, %13
  %17 = phi i64 [ 0, %13 ], [ %29, %27 ]
  %18 = phi i32 [ 0, %13 ], [ %28, %27 ]
  %19 = getelementptr inbounds i32, ptr %14, i64 %17
  %20 = load i32, ptr %19, align 4, !tbaa !16
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %16
  %23 = add nsw i32 %18, 1
  %24 = sext i32 %18 to i64
  %25 = getelementptr inbounds i32, ptr %11, i64 %24
  %26 = trunc i64 %17 to i32
  store i32 %26, ptr %25, align 4, !tbaa !16
  br label %27

27:                                               ; preds = %22, %16
  %28 = phi i32 [ %23, %22 ], [ %18, %16 ]
  %29 = add nuw nsw i64 %17, 1
  %30 = icmp eq i64 %29, %15
  br i1 %30, label %31, label %16

31:                                               ; preds = %27, %1
  %32 = phi i32 [ 0, %1 ], [ %28, %27 ]
  %33 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %34 = load ptr, ptr %33, align 8, !tbaa !33
  %35 = load i32, ptr %2, align 4, !tbaa !31
  %36 = load i32, ptr %0, align 8, !tbaa !34
  %37 = mul nsw i32 %36, %35
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds i32, ptr %34, i64 %38
  %40 = icmp sgt i32 %37, 0
  br i1 %40, label %41, label %131

41:                                               ; preds = %31
  %42 = getelementptr inbounds %struct.set_family, ptr %5, i64 0, i32 5
  %43 = load ptr, ptr %42, align 8, !tbaa !33
  %44 = icmp sgt i32 %32, 0
  %45 = zext i32 %32 to i64
  br label %46

46:                                               ; preds = %123, %41
  %47 = phi ptr [ %43, %41 ], [ %126, %123 ]
  %48 = phi ptr [ %34, %41 ], [ %129, %123 ]
  %49 = load i32, ptr @cube, align 8
  %50 = icmp slt i32 %49, 33
  %51 = add nsw i32 %49, -1
  %52 = ashr i32 %51, 5
  %53 = add nsw i32 %52, 1
  %54 = select i1 %50, i32 1, i32 %53
  store i32 %54, ptr %47, align 4, !tbaa !16
  %55 = shl nsw i32 %54, 5
  %56 = load i32, ptr @cube, align 8, !tbaa !14
  %57 = sub nsw i32 %55, %56
  %58 = lshr i32 -1, %57
  %59 = sext i32 %54 to i64
  %60 = getelementptr inbounds i32, ptr %47, i64 %59
  store i32 %58, ptr %60, align 4, !tbaa !16
  %61 = icmp sgt i32 %54, 1
  br i1 %61, label %62, label %71

62:                                               ; preds = %46
  %63 = add nsw i32 %54, -1
  %64 = zext i32 %63 to i64
  %65 = shl nuw nsw i64 %64, 2
  %66 = add nsw i32 %54, -2
  %67 = zext i32 %66 to i64
  %68 = sub nsw i64 %64, %67
  %69 = shl nsw i64 %68, 2
  %70 = getelementptr i8, ptr %47, i64 %69
  tail call void @llvm.memset.p0.i64(ptr align 4 %70, i8 -1, i64 %65, i1 false), !tbaa !16
  br label %71

71:                                               ; preds = %62, %46
  br i1 %44, label %72, label %123

72:                                               ; preds = %71
  %73 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 4), align 8
  %74 = load ptr, ptr getelementptr inbounds (%struct.cube_struct, ptr @cube, i64 0, i32 3), align 8
  %75 = load ptr, ptr @cdata, align 8
  br label %76

76:                                               ; preds = %120, %72
  %77 = phi i64 [ 0, %72 ], [ %121, %120 ]
  %78 = trunc i64 %77 to i32
  %79 = lshr i32 %78, 5
  %80 = add nuw nsw i32 %79, 1
  %81 = zext i32 %80 to i64
  %82 = getelementptr inbounds i32, ptr %48, i64 %81
  %83 = load i32, ptr %82, align 4, !tbaa !16
  %84 = and i32 %78, 31
  %85 = shl nuw i32 1, %84
  %86 = and i32 %83, %85
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %120, label %88

88:                                               ; preds = %76
  %89 = getelementptr inbounds i32, ptr %11, i64 %77
  %90 = load i32, ptr %89, align 4, !tbaa !16
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds i32, ptr %73, i64 %91
  %93 = load i32, ptr %92, align 4, !tbaa !16
  %94 = getelementptr inbounds i32, ptr %74, i64 %91
  %95 = load i32, ptr %94, align 4, !tbaa !16
  %96 = icmp sgt i32 %95, %93
  br i1 %96, label %120, label %97

97:                                               ; preds = %88
  %98 = sext i32 %95 to i64
  %99 = add i32 %93, 1
  br label %100

100:                                              ; preds = %116, %97
  %101 = phi i64 [ %98, %97 ], [ %117, %116 ]
  %102 = getelementptr inbounds i32, ptr %75, i64 %101
  %103 = load i32, ptr %102, align 4, !tbaa !16
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %105, label %116

105:                                              ; preds = %100
  %106 = trunc i64 %101 to i32
  %107 = and i32 %106, 31
  %108 = shl nuw i32 1, %107
  %109 = xor i32 %108, -1
  %110 = ashr i32 %106, 5
  %111 = add nsw i32 %110, 1
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds i32, ptr %47, i64 %112
  %114 = load i32, ptr %113, align 4, !tbaa !16
  %115 = and i32 %114, %109
  store i32 %115, ptr %113, align 4, !tbaa !16
  br label %116

116:                                              ; preds = %105, %100
  %117 = add nsw i64 %101, 1
  %118 = trunc i64 %117 to i32
  %119 = icmp eq i32 %99, %118
  br i1 %119, label %120, label %100

120:                                              ; preds = %116, %88, %76
  %121 = add nuw nsw i64 %77, 1
  %122 = icmp eq i64 %121, %45
  br i1 %122, label %123, label %76

123:                                              ; preds = %120, %71
  %124 = load i32, ptr %5, align 8, !tbaa !34
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds i32, ptr %47, i64 %125
  %127 = load i32, ptr %0, align 8, !tbaa !34
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds i32, ptr %48, i64 %128
  %130 = icmp ult ptr %129, %39
  br i1 %130, label %46, label %131

131:                                              ; preds = %123, %31
  %132 = icmp eq ptr %11, null
  br i1 %132, label %134, label %133

133:                                              ; preds = %131
  tail call void @free(ptr noundef nonnull %11) #43
  br label %134

134:                                              ; preds = %133, %131
  ret ptr %5
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @unate_compl(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %3 = load ptr, ptr %2, align 8, !tbaa !33
  %4 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %5 = load i32, ptr %4, align 4, !tbaa !31
  %6 = load i32, ptr %0, align 8, !tbaa !34
  %7 = mul nsw i32 %6, %5
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds i32, ptr %3, i64 %8
  %10 = icmp sgt i32 %7, 0
  br i1 %10, label %11, label %23

11:                                               ; preds = %11, %1
  %12 = phi ptr [ %21, %11 ], [ %3, %1 ]
  %13 = load i32, ptr %12, align 4, !tbaa !16
  %14 = and i32 %13, 65535
  store i32 %14, ptr %12, align 4, !tbaa !16
  %15 = tail call i32 (ptr, ...) @set_ord(ptr noundef nonnull %12) #43
  %16 = shl i32 %15, 16
  %17 = load i32, ptr %12, align 4, !tbaa !16
  %18 = or i32 %17, %16
  store i32 %18, ptr %12, align 4, !tbaa !16
  %19 = load i32, ptr %0, align 8, !tbaa !34
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, ptr %12, i64 %20
  %22 = icmp ult ptr %21, %9
  br i1 %22, label %11, label %23

23:                                               ; preds = %11, %1
  %24 = tail call ptr @unate_complement(ptr noundef nonnull %0) #44
  %25 = tail call ptr (ptr, ...) @sf_rev_contain(ptr noundef %24) #43
  ret ptr %25
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @unate_complement(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %3 = load i32, ptr %2, align 4, !tbaa !31
  switch i32 %3, label %60 [
    i32 0, label %4
    i32 1, label %19
  ]

4:                                                ; preds = %1
  tail call void (ptr, ...) @sf_free(ptr noundef nonnull %0) #43
  %5 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 1
  %6 = load i32, ptr %5, align 4, !tbaa !44
  %7 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 1, i32 noundef %6) #43
  %8 = getelementptr inbounds %struct.set_family, ptr %7, i64 0, i32 5
  %9 = load ptr, ptr %8, align 8, !tbaa !33
  %10 = load i32, ptr %7, align 8, !tbaa !34
  %11 = getelementptr inbounds %struct.set_family, ptr %7, i64 0, i32 3
  %12 = load i32, ptr %11, align 4, !tbaa !31
  %13 = add nsw i32 %12, 1
  store i32 %13, ptr %11, align 4, !tbaa !31
  %14 = mul nsw i32 %12, %10
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds i32, ptr %9, i64 %15
  %17 = load i32, ptr %5, align 4, !tbaa !44
  %18 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %16, i32 noundef %17) #43
  br label %309

19:                                               ; preds = %1
  %20 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %21 = load ptr, ptr %20, align 8, !tbaa !33
  %22 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 1
  %23 = load i32, ptr %22, align 4, !tbaa !44
  %24 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef %23, i32 noundef %23) #43
  %25 = load i32, ptr %22, align 4, !tbaa !44
  %26 = icmp sgt i32 %25, 0
  br i1 %26, label %27, label %59

27:                                               ; preds = %19
  %28 = getelementptr inbounds %struct.set_family, ptr %24, i64 0, i32 5
  %29 = getelementptr inbounds %struct.set_family, ptr %24, i64 0, i32 3
  br label %30

30:                                               ; preds = %55, %27
  %31 = phi i32 [ %25, %27 ], [ %56, %55 ]
  %32 = phi i32 [ 0, %27 ], [ %57, %55 ]
  %33 = lshr i32 %32, 5
  %34 = add nuw nsw i32 %33, 1
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds i32, ptr %21, i64 %35
  %37 = load i32, ptr %36, align 4, !tbaa !16
  %38 = and i32 %32, 31
  %39 = shl nuw i32 1, %38
  %40 = and i32 %37, %39
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %55, label %42

42:                                               ; preds = %30
  %43 = load ptr, ptr %28, align 8, !tbaa !33
  %44 = load i32, ptr %24, align 8, !tbaa !34
  %45 = load i32, ptr %29, align 4, !tbaa !31
  %46 = add nsw i32 %45, 1
  store i32 %46, ptr %29, align 4, !tbaa !31
  %47 = mul nsw i32 %45, %44
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds i32, ptr %43, i64 %48
  %50 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %49, i32 noundef %31) #43
  %51 = getelementptr inbounds i32, ptr %50, i64 %35
  %52 = load i32, ptr %51, align 4, !tbaa !16
  %53 = or i32 %52, %39
  store i32 %53, ptr %51, align 4, !tbaa !16
  %54 = load i32, ptr %22, align 4, !tbaa !44
  br label %55

55:                                               ; preds = %42, %30
  %56 = phi i32 [ %31, %30 ], [ %54, %42 ]
  %57 = add nuw nsw i32 %32, 1
  %58 = icmp slt i32 %57, %56
  br i1 %58, label %30, label %59

59:                                               ; preds = %55, %19
  tail call void (ptr, ...) @sf_free(ptr noundef nonnull %0) #43
  br label %309

60:                                               ; preds = %1
  %61 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 1
  %62 = load i32, ptr %61, align 4, !tbaa !44
  %63 = icmp slt i32 %62, 33
  %64 = add nsw i32 %62, -1
  %65 = lshr i32 %64, 3
  %66 = and i32 %65, 536870908
  %67 = add nuw nsw i32 %66, 8
  %68 = select i1 %63, i32 8, i32 %67
  %69 = zext i32 %68 to i64
  %70 = tail call noalias ptr @malloc(i64 noundef %69) #42
  %71 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %70, i32 noundef %62) #43
  %72 = load i32, ptr %61, align 4, !tbaa !44
  %73 = add nsw i32 %72, 1
  %74 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %75 = load i32, ptr %2, align 4, !tbaa !31
  %76 = icmp sgt i32 %75, 0
  br i1 %76, label %77, label %102

77:                                               ; preds = %60
  %78 = load ptr, ptr %74, align 8, !tbaa !33
  br label %79

79:                                               ; preds = %94, %77
  %80 = phi i32 [ %95, %94 ], [ %73, %77 ]
  %81 = phi ptr [ %98, %94 ], [ %78, %77 ]
  %82 = phi i32 [ %99, %94 ], [ 0, %77 ]
  %83 = load i32, ptr %81, align 4, !tbaa !16
  %84 = lshr i32 %83, 16
  %85 = icmp ult i32 %84, %80
  br i1 %85, label %86, label %90

86:                                               ; preds = %79
  %87 = tail call ptr (ptr, ptr, ...) @set_copy(ptr noundef %71, ptr noundef nonnull %81) #43
  %88 = load i32, ptr %81, align 4, !tbaa !16
  %89 = lshr i32 %88, 16
  br label %94

90:                                               ; preds = %79
  %91 = icmp eq i32 %84, %80
  br i1 %91, label %92, label %94

92:                                               ; preds = %90
  %93 = tail call ptr (ptr, ptr, ptr, ...) @set_or(ptr noundef %71, ptr noundef %71, ptr noundef nonnull %81) #43
  br label %94

94:                                               ; preds = %92, %90, %86
  %95 = phi i32 [ %89, %86 ], [ %80, %92 ], [ %80, %90 ]
  %96 = load i32, ptr %0, align 8, !tbaa !34
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds i32, ptr %81, i64 %97
  %99 = add nuw nsw i32 %82, 1
  %100 = load i32, ptr %2, align 4, !tbaa !31
  %101 = icmp slt i32 %99, %100
  br i1 %101, label %79, label %102

102:                                              ; preds = %94, %60
  %103 = phi i32 [ %73, %60 ], [ %95, %94 ]
  %104 = phi i32 [ %75, %60 ], [ %100, %94 ]
  switch i32 %103, label %166 [
    i32 0, label %105
    i32 1, label %106
  ]

105:                                              ; preds = %102
  store i32 0, ptr %2, align 4, !tbaa !31
  br label %305

106:                                              ; preds = %102
  %107 = load i32, ptr %61, align 4, !tbaa !44
  %108 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef %104, i32 noundef %107) #43
  %109 = load ptr, ptr %74, align 8, !tbaa !33
  %110 = load i32, ptr %2, align 4, !tbaa !31
  %111 = load i32, ptr %0, align 8, !tbaa !34
  %112 = mul nsw i32 %111, %110
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds i32, ptr %109, i64 %113
  %115 = icmp sgt i32 %112, 0
  br i1 %115, label %116, label %148

116:                                              ; preds = %106
  %117 = getelementptr inbounds %struct.set_family, ptr %108, i64 0, i32 5
  %118 = load ptr, ptr %117, align 8, !tbaa !33
  %119 = getelementptr inbounds %struct.set_family, ptr %108, i64 0, i32 3
  br label %120

120:                                              ; preds = %142, %116
  %121 = phi ptr [ %109, %116 ], [ %146, %142 ]
  %122 = phi ptr [ %118, %116 ], [ %143, %142 ]
  %123 = tail call i32 (ptr, ptr, ...) @setp_disjoint(ptr noundef %121, ptr noundef %71) #43
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %142, label %125

125:                                              ; preds = %120
  %126 = load i32, ptr %121, align 4, !tbaa !16
  %127 = and i32 %126, 1023
  %128 = zext i32 %127 to i64
  br label %129

129:                                              ; preds = %129, %125
  %130 = phi i64 [ %134, %129 ], [ %128, %125 ]
  %131 = getelementptr inbounds i32, ptr %121, i64 %130
  %132 = load i32, ptr %131, align 4, !tbaa !16
  %133 = getelementptr inbounds i32, ptr %122, i64 %130
  store i32 %132, ptr %133, align 4, !tbaa !16
  %134 = add nsw i64 %130, -1
  %135 = icmp eq i64 %130, 0
  br i1 %135, label %136, label %129

136:                                              ; preds = %129
  %137 = load i32, ptr %119, align 4, !tbaa !31
  %138 = add nsw i32 %137, 1
  store i32 %138, ptr %119, align 4, !tbaa !31
  %139 = load i32, ptr %108, align 8, !tbaa !34
  %140 = sext i32 %139 to i64
  %141 = getelementptr inbounds i32, ptr %122, i64 %140
  br label %142

142:                                              ; preds = %136, %120
  %143 = phi ptr [ %141, %136 ], [ %122, %120 ]
  %144 = load i32, ptr %0, align 8, !tbaa !34
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds i32, ptr %121, i64 %145
  %147 = icmp ult ptr %146, %114
  br i1 %147, label %120, label %148

148:                                              ; preds = %142, %106
  %149 = tail call ptr @unate_complement(ptr noundef %108) #44
  tail call void (ptr, ...) @sf_free(ptr noundef nonnull %0) #43
  %150 = getelementptr inbounds %struct.set_family, ptr %149, i64 0, i32 3
  %151 = load i32, ptr %150, align 4, !tbaa !31
  %152 = icmp sgt i32 %151, 0
  br i1 %152, label %153, label %305

153:                                              ; preds = %148
  %154 = getelementptr inbounds %struct.set_family, ptr %149, i64 0, i32 5
  %155 = load ptr, ptr %154, align 8, !tbaa !33
  br label %156

156:                                              ; preds = %156, %153
  %157 = phi ptr [ %162, %156 ], [ %155, %153 ]
  %158 = phi i32 [ %163, %156 ], [ 0, %153 ]
  %159 = tail call ptr (ptr, ptr, ptr, ...) @set_or(ptr noundef %157, ptr noundef %157, ptr noundef %71) #43
  %160 = load i32, ptr %149, align 8, !tbaa !34
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds i32, ptr %157, i64 %161
  %163 = add nuw nsw i32 %158, 1
  %164 = load i32, ptr %150, align 4, !tbaa !31
  %165 = icmp slt i32 %163, %164
  br i1 %165, label %156, label %305

166:                                              ; preds = %102
  %167 = tail call ptr (ptr, ptr, ...) @sf_count_restricted(ptr noundef nonnull %0, ptr noundef %71) #43
  %168 = load i32, ptr %61, align 4, !tbaa !44
  %169 = icmp sgt i32 %168, 0
  br i1 %169, label %170, label %184

170:                                              ; preds = %166
  %171 = zext i32 %168 to i64
  br label %172

172:                                              ; preds = %172, %170
  %173 = phi i64 [ 0, %170 ], [ %182, %172 ]
  %174 = phi i32 [ 0, %170 ], [ %181, %172 ]
  %175 = phi i32 [ -1, %170 ], [ %180, %172 ]
  %176 = getelementptr inbounds i32, ptr %167, i64 %173
  %177 = load i32, ptr %176, align 4, !tbaa !16
  %178 = icmp sgt i32 %177, %174
  %179 = trunc i64 %173 to i32
  %180 = select i1 %178, i32 %179, i32 %175
  %181 = tail call i32 @llvm.smax.i32(i32 %177, i32 %174)
  %182 = add nuw nsw i64 %173, 1
  %183 = icmp eq i64 %182, %171
  br i1 %183, label %187, label %172

184:                                              ; preds = %166
  %185 = icmp eq ptr %167, null
  br i1 %185, label %189, label %186

186:                                              ; preds = %184
  tail call void @free(ptr noundef nonnull %167) #43
  br label %189

187:                                              ; preds = %172
  %.lcssa = phi i32 [ %180, %172 ]
  tail call void @free(ptr noundef nonnull %167) #43
  %188 = icmp eq i32 %.lcssa, -1
  br i1 %188, label %189, label %190

189:                                              ; preds = %187, %186, %184
  tail call void (ptr, ...) @fatal(ptr noundef nonnull @.str.2.567) #43
  br label %190

190:                                              ; preds = %189, %187
  %191 = phi i32 [ -1, %189 ], [ %.lcssa, %187 ]
  %192 = load i32, ptr %2, align 4, !tbaa !31
  %193 = load i32, ptr %61, align 4, !tbaa !44
  %194 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef %192, i32 noundef %193) #43
  %195 = load ptr, ptr %74, align 8, !tbaa !33
  %196 = load i32, ptr %2, align 4, !tbaa !31
  %197 = load i32, ptr %0, align 8, !tbaa !34
  %198 = mul nsw i32 %197, %196
  %199 = sext i32 %198 to i64
  %200 = getelementptr inbounds i32, ptr %195, i64 %199
  %201 = icmp sgt i32 %198, 0
  br i1 %201, label %202, label %243

202:                                              ; preds = %190
  %203 = getelementptr inbounds %struct.set_family, ptr %194, i64 0, i32 5
  %204 = load ptr, ptr %203, align 8, !tbaa !33
  %205 = ashr i32 %191, 5
  %206 = add nsw i32 %205, 1
  %207 = sext i32 %206 to i64
  %208 = and i32 %191, 31
  %209 = shl nuw i32 1, %208
  %210 = getelementptr inbounds %struct.set_family, ptr %194, i64 0, i32 3
  br label %211

211:                                              ; preds = %237, %202
  %212 = phi i32 [ %197, %202 ], [ %238, %237 ]
  %213 = phi ptr [ %195, %202 ], [ %241, %237 ]
  %214 = phi ptr [ %204, %202 ], [ %239, %237 ]
  %215 = getelementptr inbounds i32, ptr %213, i64 %207
  %216 = load i32, ptr %215, align 4, !tbaa !16
  %217 = and i32 %216, %209
  %218 = icmp eq i32 %217, 0
  br i1 %218, label %219, label %237

219:                                              ; preds = %211
  %220 = load i32, ptr %213, align 4, !tbaa !16
  %221 = and i32 %220, 1023
  %222 = zext i32 %221 to i64
  br label %223

223:                                              ; preds = %223, %219
  %224 = phi i64 [ %228, %223 ], [ %222, %219 ]
  %225 = getelementptr inbounds i32, ptr %213, i64 %224
  %226 = load i32, ptr %225, align 4, !tbaa !16
  %227 = getelementptr inbounds i32, ptr %214, i64 %224
  store i32 %226, ptr %227, align 4, !tbaa !16
  %228 = add nsw i64 %224, -1
  %229 = icmp eq i64 %224, 0
  br i1 %229, label %230, label %223

230:                                              ; preds = %223
  %231 = load i32, ptr %210, align 4, !tbaa !31
  %232 = add nsw i32 %231, 1
  store i32 %232, ptr %210, align 4, !tbaa !31
  %233 = load i32, ptr %194, align 8, !tbaa !34
  %234 = sext i32 %233 to i64
  %235 = getelementptr inbounds i32, ptr %214, i64 %234
  %236 = load i32, ptr %0, align 8, !tbaa !34
  br label %237

237:                                              ; preds = %230, %211
  %238 = phi i32 [ %212, %211 ], [ %236, %230 ]
  %239 = phi ptr [ %214, %211 ], [ %235, %230 ]
  %240 = sext i32 %238 to i64
  %241 = getelementptr inbounds i32, ptr %213, i64 %240
  %242 = icmp ult ptr %241, %200
  br i1 %242, label %211, label %243

243:                                              ; preds = %237, %190
  %244 = tail call ptr @unate_complement(ptr noundef %194) #44
  %245 = getelementptr inbounds %struct.set_family, ptr %244, i64 0, i32 3
  %246 = load i32, ptr %245, align 4, !tbaa !31
  %247 = icmp sgt i32 %246, 0
  br i1 %247, label %248, label %268

248:                                              ; preds = %243
  %249 = getelementptr inbounds %struct.set_family, ptr %244, i64 0, i32 5
  %250 = load ptr, ptr %249, align 8, !tbaa !33
  %251 = and i32 %191, 31
  %252 = shl nuw i32 1, %251
  %253 = ashr i32 %191, 5
  %254 = add nsw i32 %253, 1
  %255 = sext i32 %254 to i64
  br label %256

256:                                              ; preds = %256, %248
  %257 = phi ptr [ %250, %248 ], [ %264, %256 ]
  %258 = phi i32 [ 0, %248 ], [ %265, %256 ]
  %259 = getelementptr inbounds i32, ptr %257, i64 %255
  %260 = load i32, ptr %259, align 4, !tbaa !16
  %261 = or i32 %260, %252
  store i32 %261, ptr %259, align 4, !tbaa !16
  %262 = load i32, ptr %244, align 8, !tbaa !34
  %263 = sext i32 %262 to i64
  %264 = getelementptr inbounds i32, ptr %257, i64 %263
  %265 = add nuw nsw i32 %258, 1
  %266 = load i32, ptr %245, align 4, !tbaa !31
  %267 = icmp slt i32 %265, %266
  br i1 %267, label %256, label %268

268:                                              ; preds = %256, %243
  %269 = load i32, ptr %2, align 4, !tbaa !31
  %270 = icmp sgt i32 %269, 0
  br i1 %270, label %271, label %302

271:                                              ; preds = %268
  %272 = load ptr, ptr %74, align 8, !tbaa !33
  %273 = ashr i32 %191, 5
  %274 = add nsw i32 %273, 1
  %275 = sext i32 %274 to i64
  %276 = and i32 %191, 31
  %277 = shl nuw i32 1, %276
  %278 = xor i32 %277, -1
  br label %279

279:                                              ; preds = %295, %271
  %280 = phi i32 [ %269, %271 ], [ %296, %295 ]
  %281 = phi ptr [ %272, %271 ], [ %299, %295 ]
  %282 = phi i32 [ 0, %271 ], [ %300, %295 ]
  %283 = getelementptr inbounds i32, ptr %281, i64 %275
  %284 = load i32, ptr %283, align 4, !tbaa !16
  %285 = and i32 %284, %277
  %286 = icmp eq i32 %285, 0
  br i1 %286, label %295, label %287

287:                                              ; preds = %279
  %288 = and i32 %284, %278
  store i32 %288, ptr %283, align 4, !tbaa !16
  %289 = load i32, ptr %281, align 4, !tbaa !16
  %290 = and i32 %289, -65536
  %291 = and i32 %289, 65535
  %292 = add i32 %290, -65536
  %293 = or i32 %292, %291
  store i32 %293, ptr %281, align 4, !tbaa !16
  %294 = load i32, ptr %2, align 4, !tbaa !31
  br label %295

295:                                              ; preds = %287, %279
  %296 = phi i32 [ %280, %279 ], [ %294, %287 ]
  %297 = load i32, ptr %0, align 8, !tbaa !34
  %298 = sext i32 %297 to i64
  %299 = getelementptr inbounds i32, ptr %281, i64 %298
  %300 = add nuw nsw i32 %282, 1
  %301 = icmp slt i32 %300, %296
  br i1 %301, label %279, label %302

302:                                              ; preds = %295, %268
  %303 = tail call ptr @unate_complement(ptr noundef nonnull %0) #44
  %304 = tail call ptr (ptr, ptr, ...) @sf_append(ptr noundef %244, ptr noundef %303) #43
  br label %305

305:                                              ; preds = %302, %156, %148, %105
  %306 = phi ptr [ %0, %105 ], [ %304, %302 ], [ %149, %148 ], [ %149, %156 ]
  %307 = icmp eq ptr %71, null
  br i1 %307, label %309, label %308

308:                                              ; preds = %305
  tail call void @free(ptr noundef nonnull %71) #43
  br label %309

309:                                              ; preds = %308, %305, %59, %4
  %310 = phi ptr [ %7, %4 ], [ %24, %59 ], [ %306, %308 ], [ %306, %305 ]
  ret ptr %310
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @exact_minimum_cover(ptr noundef %0) #0 {
  %2 = alloca [32 x %struct.pla_types_struct], align 16
  %3 = tail call i64 (...) @util_cpu_time() #43
  call void @llvm.lifetime.start.p0(i64 512, ptr nonnull %2) #45
  %4 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %5 = load i32, ptr %4, align 4, !tbaa !31
  %6 = icmp slt i32 %5, 1
  br i1 %6, label %7, label %11

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 1
  %9 = load i32, ptr %8, align 4, !tbaa !44
  %10 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 1, i32 noundef %9) #43
  br label %206

11:                                               ; preds = %11, %1
  %12 = phi i32 [ %15, %11 ], [ 0, %1 ]
  %13 = phi i32 [ %14, %11 ], [ %5, %1 ]
  %14 = lshr i32 %13, 1
  %15 = add nuw nsw i32 %12, 1
  %16 = icmp ult i32 %13, 2
  br i1 %16, label %17, label %11

17:                                               ; preds = %11
  %.lcssa1 = phi i32 [ %15, %11 ]
  %18 = tail call ptr (ptr, ...) @sf_save(ptr noundef %0) #43
  %19 = tail call ptr (ptr, ...) @lex_sort(ptr noundef %18) #43
  %20 = getelementptr inbounds %struct.set_family, ptr %19, i64 0, i32 1
  %21 = load i32, ptr %20, align 4, !tbaa !44
  %22 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 1, i32 noundef %21) #43
  store ptr %22, ptr %2, align 16, !tbaa !137
  %23 = getelementptr inbounds %struct.pla_types_struct, ptr %2, i64 0, i32 1
  store i32 %.lcssa1, ptr %23, align 8, !tbaa !135
  %24 = getelementptr inbounds %struct.set_family, ptr %22, i64 0, i32 5
  %25 = load ptr, ptr %24, align 8, !tbaa !33
  %26 = load i32, ptr %22, align 8, !tbaa !34
  %27 = getelementptr inbounds %struct.set_family, ptr %22, i64 0, i32 3
  %28 = load i32, ptr %27, align 4, !tbaa !31
  %29 = add nsw i32 %28, 1
  store i32 %29, ptr %27, align 4, !tbaa !31
  %30 = mul nsw i32 %28, %26
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i32, ptr %25, i64 %31
  %33 = load i32, ptr %20, align 4, !tbaa !44
  %34 = tail call ptr (ptr, i32, ...) @set_fill(ptr noundef %32, i32 noundef %33) #43
  %35 = getelementptr inbounds %struct.set_family, ptr %19, i64 0, i32 5
  %36 = load ptr, ptr %35, align 8, !tbaa !33
  %37 = load i32, ptr %19, align 8, !tbaa !34
  %38 = getelementptr inbounds %struct.set_family, ptr %19, i64 0, i32 3
  %39 = load i32, ptr %38, align 4, !tbaa !31
  %40 = add nsw i32 %39, -1
  %41 = mul nsw i32 %40, %37
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds i32, ptr %36, i64 %42
  %44 = mul nsw i32 %39, %37
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i32, ptr %36, i64 %45
  %47 = icmp sgt i32 %44, 0
  br i1 %47, label %48, label %149

48:                                               ; preds = %141, %17
  %49 = phi ptr [ %145, %141 ], [ %36, %17 ]
  %50 = phi i32 [ %142, %141 ], [ 1, %17 ]
  %51 = tail call i32 (ptr, ...) @set_ord(ptr noundef %49) #43
  %52 = load i32, ptr %20, align 4, !tbaa !44
  %53 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef %51, i32 noundef %52) #43
  %54 = load i32, ptr %20, align 4, !tbaa !44
  %55 = icmp sgt i32 %54, 0
  br i1 %55, label %56, label %89

56:                                               ; preds = %48
  %57 = getelementptr inbounds %struct.set_family, ptr %53, i64 0, i32 5
  %58 = getelementptr inbounds %struct.set_family, ptr %53, i64 0, i32 3
  br label %59

59:                                               ; preds = %85, %56
  %60 = phi i32 [ %54, %56 ], [ %86, %85 ]
  %61 = phi i32 [ 0, %56 ], [ %87, %85 ]
  %62 = lshr i32 %61, 5
  %63 = add nuw nsw i32 %62, 1
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds i32, ptr %49, i64 %64
  %66 = load i32, ptr %65, align 4, !tbaa !16
  %67 = and i32 %61, 31
  %68 = shl nuw i32 1, %67
  %69 = and i32 %66, %68
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %85, label %71

71:                                               ; preds = %59
  %72 = load ptr, ptr %57, align 8, !tbaa !33
  %73 = load i32, ptr %53, align 8, !tbaa !34
  %74 = load i32, ptr %58, align 4, !tbaa !31
  %75 = add nsw i32 %74, 1
  store i32 %75, ptr %58, align 4, !tbaa !31
  %76 = mul nsw i32 %74, %73
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds i32, ptr %72, i64 %77
  %79 = tail call ptr (ptr, i32, ...) @set_fill(ptr noundef %78, i32 noundef %60) #43
  %80 = xor i32 %68, -1
  %81 = getelementptr inbounds i32, ptr %79, i64 %64
  %82 = load i32, ptr %81, align 4, !tbaa !16
  %83 = and i32 %82, %80
  store i32 %83, ptr %81, align 4, !tbaa !16
  %84 = load i32, ptr %20, align 4, !tbaa !44
  br label %85

85:                                               ; preds = %71, %59
  %86 = phi i32 [ %60, %59 ], [ %84, %71 ]
  %87 = add nuw nsw i32 %61, 1
  %88 = icmp slt i32 %87, %86
  br i1 %88, label %59, label %89

89:                                               ; preds = %85, %48
  %90 = sext i32 %50 to i64
  %91 = getelementptr inbounds [32 x %struct.pla_types_struct], ptr %2, i64 0, i64 %90
  store ptr %53, ptr %91, align 16, !tbaa !137
  %92 = add i32 %50, 1
  %93 = getelementptr inbounds [32 x %struct.pla_types_struct], ptr %2, i64 0, i64 %90, i32 1
  store i32 %.lcssa1, ptr %93, align 8, !tbaa !135
  %94 = icmp sgt i32 %50, 0
  br i1 %94, label %95, label %141

95:                                               ; preds = %89
  %96 = icmp eq ptr %49, %43
  %97 = zext i32 %92 to i64
  br label %98

98:                                               ; preds = %137, %95
  %99 = phi i64 [ %97, %95 ], [ %100, %137 ]
  %100 = add nsw i64 %99, -1
  %101 = and i64 %100, 4294967295
  %102 = getelementptr inbounds [32 x %struct.pla_types_struct], ptr %2, i64 0, i64 %101, i32 1
  %103 = load i32, ptr %102, align 8, !tbaa !135
  %104 = trunc i64 %99 to i32
  %105 = add i64 %99, 4294967294
  %106 = and i64 %105, 4294967295
  %107 = getelementptr inbounds [32 x %struct.pla_types_struct], ptr %2, i64 0, i64 %106
  %108 = getelementptr inbounds [32 x %struct.pla_types_struct], ptr %2, i64 0, i64 %106, i32 1
  %109 = load i32, ptr %108, align 8, !tbaa !135
  %110 = icmp eq i32 %103, %109
  %111 = select i1 %110, i1 true, i1 %96
  br i1 %111, label %112, label %141

112:                                              ; preds = %98
  %113 = getelementptr inbounds [32 x %struct.pla_types_struct], ptr %2, i64 0, i64 %101
  %114 = load ptr, ptr %113, align 16, !tbaa !137
  %115 = load ptr, ptr %107, align 16, !tbaa !137
  %116 = tail call ptr @unate_intersect(ptr noundef %114, ptr noundef %115, i32 noundef 0) #44
  %117 = tail call i32 @llvm.smin.i32(i32 %103, i32 %109)
  %118 = add nsw i32 %117, -1
  %119 = load i32, ptr @debug, align 4, !tbaa !16
  %120 = and i32 %119, 2048
  %121 = icmp ne i32 %120, 0
  %122 = icmp slt i32 %117, 11
  %123 = and i1 %122, %121
  br i1 %123, label %124, label %137

124:                                              ; preds = %112
  %125 = getelementptr inbounds %struct.set_family, ptr %116, i64 0, i32 3
  %126 = load i32, ptr %125, align 4, !tbaa !31
  %127 = getelementptr inbounds %struct.set_family, ptr %114, i64 0, i32 3
  %128 = load i32, ptr %127, align 4, !tbaa !31
  %129 = getelementptr inbounds %struct.set_family, ptr %115, i64 0, i32 3
  %130 = load i32, ptr %129, align 4, !tbaa !31
  %131 = tail call i64 (...) @util_cpu_time() #43
  %132 = sub nsw i64 %131, %3
  %133 = tail call ptr @util_print_time(i64 noundef %132) #43
  %134 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.572, i32 noundef %118, i32 noundef %126, i32 noundef %128, i32 noundef %130, ptr noundef %133) #44
  %135 = load ptr, ptr @stdout, align 8, !tbaa !13
  %136 = tail call i32 @fflush(ptr noundef %135) #44
  br label %137

137:                                              ; preds = %124, %112
  tail call void (ptr, ...) @sf_free(ptr noundef %115) #43
  tail call void (ptr, ...) @sf_free(ptr noundef %114) #43
  store ptr %116, ptr %107, align 16, !tbaa !137
  store i32 %118, ptr %108, align 8, !tbaa !135
  %138 = icmp sgt i32 %104, 2
  br i1 %138, label %98, label %139

139:                                              ; preds = %137
  %.lcssa = phi i64 [ %100, %137 ]
  %140 = trunc i64 %.lcssa to i32
  br label %141

141:                                              ; preds = %139, %98, %89
  %142 = phi i32 [ %92, %89 ], [ %140, %139 ], [ %104, %98 ]
  %143 = load i32, ptr %19, align 8, !tbaa !34
  %144 = sext i32 %143 to i64
  %145 = getelementptr inbounds i32, ptr %49, i64 %144
  %146 = icmp ult ptr %145, %46
  br i1 %146, label %48, label %147

147:                                              ; preds = %141
  %148 = load ptr, ptr %2, align 16, !tbaa !137
  br label %149

149:                                              ; preds = %147, %17
  %150 = phi ptr [ %148, %147 ], [ %22, %17 ]
  %151 = load i32, ptr %20, align 4, !tbaa !44
  %152 = icmp slt i32 %151, 33
  %153 = add nsw i32 %151, -1
  %154 = lshr i32 %153, 3
  %155 = and i32 %154, 536870908
  %156 = add nuw nsw i32 %155, 8
  %157 = select i1 %152, i32 8, i32 %156
  %158 = zext i32 %157 to i64
  %159 = tail call noalias ptr @malloc(i64 noundef %158) #42
  %160 = tail call ptr (ptr, i32, ...) @set_clear(ptr noundef %159, i32 noundef %151) #43
  %161 = load i32, ptr %20, align 4, !tbaa !44
  %162 = tail call ptr (ptr, i32, ...) @set_fill(ptr noundef %160, i32 noundef %161) #43
  %163 = getelementptr inbounds %struct.set_family, ptr %150, i64 0, i32 5
  %164 = load ptr, ptr %163, align 8, !tbaa !33
  %165 = getelementptr inbounds %struct.set_family, ptr %150, i64 0, i32 3
  %166 = load i32, ptr %165, align 4, !tbaa !31
  %167 = load i32, ptr %150, align 8, !tbaa !34
  %168 = mul nsw i32 %167, %166
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds i32, ptr %164, i64 %169
  %171 = icmp sgt i32 %168, 0
  br i1 %171, label %172, label %196

172:                                              ; preds = %191, %149
  %173 = phi ptr [ %194, %191 ], [ %164, %149 ]
  %174 = load i32, ptr %162, align 4, !tbaa !16
  %175 = and i32 %174, 1023
  %176 = load i32, ptr %173, align 4, !tbaa !16
  %177 = and i32 %176, -1024
  %178 = or i32 %177, %175
  store i32 %178, ptr %173, align 4, !tbaa !16
  %179 = and i32 %174, 1023
  %180 = zext i32 %179 to i64
  br label %181

181:                                              ; preds = %181, %172
  %182 = phi i64 [ %189, %181 ], [ %180, %172 ]
  %183 = getelementptr inbounds i32, ptr %162, i64 %182
  %184 = load i32, ptr %183, align 4, !tbaa !16
  %185 = getelementptr inbounds i32, ptr %173, i64 %182
  %186 = load i32, ptr %185, align 4, !tbaa !16
  %187 = xor i32 %186, -1
  %188 = and i32 %184, %187
  store i32 %188, ptr %185, align 4, !tbaa !16
  %189 = add nsw i64 %182, -1
  %190 = icmp ugt i64 %182, 1
  br i1 %190, label %181, label %191

191:                                              ; preds = %181
  %192 = load i32, ptr %150, align 8, !tbaa !34
  %193 = sext i32 %192 to i64
  %194 = getelementptr inbounds i32, ptr %173, i64 %193
  %195 = icmp ult ptr %194, %170
  br i1 %195, label %172, label %198

196:                                              ; preds = %149
  %197 = icmp eq ptr %162, null
  br i1 %197, label %199, label %198

198:                                              ; preds = %196, %191
  tail call void @free(ptr noundef nonnull %162) #43
  br label %199

199:                                              ; preds = %198, %196
  %200 = load i32, ptr @debug, align 4, !tbaa !16
  %201 = and i32 %200, 4096
  %202 = icmp eq i32 %201, 0
  br i1 %202, label %205, label %203

203:                                              ; preds = %199
  %204 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.573)
  tail call void (ptr, ...) @sf_print(ptr noundef nonnull %150) #43
  br label %205

205:                                              ; preds = %203, %199
  tail call void (ptr, ...) @sf_free(ptr noundef nonnull %19) #43
  br label %206

206:                                              ; preds = %205, %7
  %207 = phi ptr [ %10, %7 ], [ %150, %205 ]
  call void @llvm.lifetime.end.p0(i64 512, ptr nonnull %2) #45
  ret ptr %207
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @unate_intersect(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 noundef %2) #0 {
  %4 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 1
  %5 = load i32, ptr %4, align 4, !tbaa !44
  %6 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 500, i32 noundef %5) #43
  %7 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %8 = load ptr, ptr %7, align 8, !tbaa !33
  %9 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %10 = load i32, ptr %9, align 4, !tbaa !31
  %11 = load i32, ptr %0, align 8, !tbaa !34
  %12 = mul nsw i32 %11, %10
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds i32, ptr %8, i64 %13
  %15 = icmp sgt i32 %12, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %3
  %17 = tail call ptr (ptr, ...) @sf_contain(ptr noundef %6) #43
  br label %114

18:                                               ; preds = %3
  %19 = getelementptr inbounds %struct.set_family, ptr %6, i64 0, i32 5
  %20 = load ptr, ptr %19, align 8, !tbaa !33
  %21 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 5
  %22 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 3
  %23 = icmp ne i32 %2, 0
  %24 = load i32, ptr %1, align 8, !tbaa !34
  br label %25

25:                                               ; preds = %99, %18
  %26 = phi i32 [ %11, %18 ], [ %100, %99 ]
  %27 = phi i32 [ %24, %18 ], [ %101, %99 ]
  %28 = phi ptr [ %8, %18 ], [ %107, %99 ]
  %29 = phi i32 [ 0, %18 ], [ %105, %99 ]
  %30 = phi ptr [ null, %18 ], [ %104, %99 ]
  %31 = phi ptr [ %6, %18 ], [ %103, %99 ]
  %32 = phi ptr [ %20, %18 ], [ %102, %99 ]
  %33 = load ptr, ptr %21, align 8, !tbaa !33
  %34 = load i32, ptr %22, align 4, !tbaa !31
  %35 = mul nsw i32 %27, %34
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, ptr %33, i64 %36
  %38 = icmp sgt i32 %35, 0
  br i1 %38, label %39, label %99

39:                                               ; preds = %88, %25
  %40 = phi i32 [ %89, %88 ], [ %29, %25 ]
  %41 = phi ptr [ %92, %88 ], [ %30, %25 ]
  %42 = phi ptr [ %91, %88 ], [ %31, %25 ]
  %43 = phi ptr [ %90, %88 ], [ %32, %25 ]
  %44 = phi ptr [ %95, %88 ], [ %33, %25 ]
  %45 = tail call i32 (ptr, ptr, ptr, ...) @set_andp(ptr noundef %43, ptr noundef %28, ptr noundef %44) #43
  %46 = icmp ne i32 %45, 0
  %47 = and i1 %23, %46
  br i1 %47, label %48, label %61

48:                                               ; preds = %39
  %49 = tail call i32 (ptr, ...) @set_ord(ptr noundef %43) #43
  %50 = icmp sgt i32 %49, %40
  br i1 %50, label %51, label %59

51:                                               ; preds = %48
  %52 = icmp eq ptr %41, null
  br i1 %52, label %54, label %53

53:                                               ; preds = %51
  tail call void (ptr, ...) @sf_free(ptr noundef nonnull %41) #43
  br label %54

54:                                               ; preds = %53, %51
  %55 = getelementptr inbounds %struct.set_family, ptr %42, i64 0, i32 5
  %56 = load ptr, ptr %55, align 8, !tbaa !33
  %57 = getelementptr inbounds %struct.set_family, ptr %42, i64 0, i32 3
  store i32 0, ptr %57, align 4, !tbaa !31
  %58 = tail call ptr (ptr, ptr, ptr, ...) @set_and(ptr noundef %56, ptr noundef %28, ptr noundef %44) #43
  br label %63

59:                                               ; preds = %48
  %60 = icmp slt i32 %49, %40
  br i1 %60, label %88, label %63

61:                                               ; preds = %39
  %62 = icmp eq i32 %45, 0
  br i1 %62, label %88, label %63

63:                                               ; preds = %61, %59, %54
  %64 = phi i32 [ %40, %61 ], [ %40, %59 ], [ %49, %54 ]
  %65 = phi ptr [ %41, %61 ], [ %41, %59 ], [ null, %54 ]
  %66 = phi ptr [ %43, %61 ], [ %43, %59 ], [ %56, %54 ]
  %67 = getelementptr inbounds %struct.set_family, ptr %42, i64 0, i32 3
  %68 = load i32, ptr %67, align 4, !tbaa !31
  %69 = add nsw i32 %68, 1
  store i32 %69, ptr %67, align 4, !tbaa !31
  %70 = getelementptr inbounds %struct.set_family, ptr %42, i64 0, i32 2
  %71 = load i32, ptr %70, align 8, !tbaa !157
  %72 = icmp slt i32 %69, %71
  br i1 %72, label %84, label %73

73:                                               ; preds = %63
  %74 = tail call ptr (ptr, ...) @sf_contain(ptr noundef nonnull %42) #43
  %75 = icmp eq ptr %65, null
  br i1 %75, label %78, label %76

76:                                               ; preds = %73
  %77 = tail call ptr (ptr, ptr, ...) @sf_union(ptr noundef nonnull %65, ptr noundef %74) #43
  br label %78

78:                                               ; preds = %76, %73
  %79 = phi ptr [ %77, %76 ], [ %74, %73 ]
  %80 = load i32, ptr %4, align 4, !tbaa !44
  %81 = tail call ptr (i32, i32, ...) @sf_new(i32 noundef 500, i32 noundef %80) #43
  %82 = getelementptr inbounds %struct.set_family, ptr %81, i64 0, i32 5
  %83 = load ptr, ptr %82, align 8, !tbaa !33
  br label %88

84:                                               ; preds = %63
  %85 = load i32, ptr %42, align 8, !tbaa !34
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds i32, ptr %66, i64 %86
  br label %88

88:                                               ; preds = %84, %78, %61, %59
  %89 = phi i32 [ %64, %78 ], [ %64, %84 ], [ %40, %61 ], [ %40, %59 ]
  %90 = phi ptr [ %83, %78 ], [ %87, %84 ], [ %43, %61 ], [ %43, %59 ]
  %91 = phi ptr [ %81, %78 ], [ %42, %84 ], [ %42, %61 ], [ %42, %59 ]
  %92 = phi ptr [ %79, %78 ], [ %65, %84 ], [ %41, %61 ], [ %41, %59 ]
  %93 = load i32, ptr %1, align 8, !tbaa !34
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds i32, ptr %44, i64 %94
  %96 = icmp ult ptr %95, %37
  br i1 %96, label %39, label %97

97:                                               ; preds = %88
  %.lcssa4 = phi i32 [ %89, %88 ]
  %.lcssa3 = phi ptr [ %90, %88 ]
  %.lcssa2 = phi ptr [ %91, %88 ]
  %.lcssa1 = phi ptr [ %92, %88 ]
  %.lcssa = phi i32 [ %93, %88 ]
  %98 = load i32, ptr %0, align 8, !tbaa !34
  br label %99

99:                                               ; preds = %97, %25
  %100 = phi i32 [ %26, %25 ], [ %98, %97 ]
  %101 = phi i32 [ %27, %25 ], [ %.lcssa, %97 ]
  %102 = phi ptr [ %32, %25 ], [ %.lcssa3, %97 ]
  %103 = phi ptr [ %31, %25 ], [ %.lcssa2, %97 ]
  %104 = phi ptr [ %30, %25 ], [ %.lcssa1, %97 ]
  %105 = phi i32 [ %29, %25 ], [ %.lcssa4, %97 ]
  %106 = sext i32 %100 to i64
  %107 = getelementptr inbounds i32, ptr %28, i64 %106
  %108 = icmp ult ptr %107, %14
  br i1 %108, label %25, label %109

109:                                              ; preds = %99
  %.lcssa6 = phi ptr [ %103, %99 ]
  %.lcssa5 = phi ptr [ %104, %99 ]
  %110 = tail call ptr (ptr, ...) @sf_contain(ptr noundef %.lcssa6) #43
  %111 = icmp eq ptr %.lcssa5, null
  br i1 %111, label %114, label %112

112:                                              ; preds = %109
  %113 = tail call ptr (ptr, ptr, ...) @sf_union(ptr noundef nonnull %.lcssa5, ptr noundef %110) #43
  br label %114

114:                                              ; preds = %112, %109, %16
  %115 = phi ptr [ %113, %112 ], [ %110, %109 ], [ %17, %16 ]
  ret ptr %115
}

; Function Attrs: nounwind optsize uwtable
define internal i64 @util_cpu_time() #0 {
  %1 = alloca %struct.rusage, align 8
  call void @llvm.lifetime.start.p0(i64 144, ptr nonnull %1) #45
  %2 = call i32 @getrusage(i32 noundef 0, ptr noundef nonnull %1) #43
  %3 = load i64, ptr %1, align 8, !tbaa !160
  %4 = mul nsw i64 %3, 1000
  %5 = getelementptr inbounds %struct.timeval, ptr %1, i64 0, i32 1
  %6 = load i64, ptr %5, align 8, !tbaa !163
  %7 = sdiv i64 %6, 1000
  %8 = add nsw i64 %7, %4
  call void @llvm.lifetime.end.p0(i64 144, ptr nonnull %1) #45
  ret i64 %8
}

; Function Attrs: nounwind optsize
declare i32 @getrusage(i32 noundef, ptr noundef) local_unnamed_addr #41

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal nonnull ptr @util_print_time(i64 noundef %0) #29 {
  ret ptr @.str.578
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn uwtable
define internal ptr @util_strsav(ptr nocapture noundef readonly %0) #37 {
  %2 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %0) #48
  %3 = add i64 %2, 1
  %4 = tail call noalias ptr @malloc(i64 noundef %3) #42
  %5 = tail call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %4, ptr noundef nonnull dereferenceable(1) %0) #43
  ret ptr %4
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @verify(ptr noundef %0, ptr noundef %1, ptr noundef %2) #0 {
  %4 = tail call ptr (ptr, ptr, ...) @cube2list(ptr noundef %1, ptr noundef %2) #43
  %5 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 5
  %6 = load ptr, ptr %5, align 8, !tbaa !33
  %7 = getelementptr inbounds %struct.set_family, ptr %0, i64 0, i32 3
  %8 = load i32, ptr %7, align 4, !tbaa !31
  %9 = load i32, ptr %0, align 8, !tbaa !34
  %10 = mul nsw i32 %9, %8
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds i32, ptr %6, i64 %11
  %13 = icmp sgt i32 %10, 0
  br i1 %13, label %14, label %32

14:                                               ; preds = %26, %3
  %15 = phi i32 [ %27, %26 ], [ 0, %3 ]
  %16 = phi ptr [ %30, %26 ], [ %6, %3 ]
  %17 = tail call i32 (ptr, ptr, ...) @cube_is_covered(ptr noundef %4, ptr noundef %16) #43
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %26

19:                                               ; preds = %14
  %20 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.13)
  %21 = load i32, ptr @verbose_debug, align 4, !tbaa !16
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %32, label %23

23:                                               ; preds = %19
  %24 = tail call ptr (ptr, ...) @pc1(ptr noundef %16) #43
  %25 = tail call i32 @puts(ptr nonnull dereferenceable(1) %24)
  br label %26

26:                                               ; preds = %23, %14
  %27 = phi i32 [ %15, %14 ], [ 1, %23 ]
  %28 = load i32, ptr %0, align 8, !tbaa !34
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i32, ptr %16, i64 %29
  %31 = icmp ult ptr %30, %12
  br i1 %31, label %14, label %32

32:                                               ; preds = %26, %19, %3
  %33 = phi i32 [ 0, %3 ], [ 1, %19 ], [ %27, %26 ]
  %34 = load ptr, ptr %4, align 8, !tbaa !13
  %35 = icmp eq ptr %34, null
  br i1 %35, label %37, label %36

36:                                               ; preds = %32
  tail call void @free(ptr noundef nonnull %34) #43
  br label %37

37:                                               ; preds = %36, %32
  tail call void @free(ptr noundef nonnull %4) #43
  %38 = tail call ptr (ptr, ptr, ...) @cube2list(ptr noundef nonnull %0, ptr noundef %2) #43
  %39 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 5
  %40 = load ptr, ptr %39, align 8, !tbaa !33
  %41 = getelementptr inbounds %struct.set_family, ptr %1, i64 0, i32 3
  %42 = load i32, ptr %41, align 4, !tbaa !31
  %43 = load i32, ptr %1, align 8, !tbaa !34
  %44 = mul nsw i32 %43, %42
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i32, ptr %40, i64 %45
  %47 = icmp sgt i32 %44, 0
  br i1 %47, label %48, label %66

48:                                               ; preds = %60, %37
  %49 = phi i32 [ %61, %60 ], [ %33, %37 ]
  %50 = phi ptr [ %64, %60 ], [ %40, %37 ]
  %51 = tail call i32 (ptr, ptr, ...) @cube_is_covered(ptr noundef %38, ptr noundef %50) #43
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %60

53:                                               ; preds = %48
  %54 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.583)
  %55 = load i32, ptr @verbose_debug, align 4, !tbaa !16
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %66, label %57

57:                                               ; preds = %53
  %58 = tail call ptr (ptr, ...) @pc1(ptr noundef %50) #43
  %59 = tail call i32 @puts(ptr nonnull dereferenceable(1) %58)
  br label %60

60:                                               ; preds = %57, %48
  %61 = phi i32 [ %49, %48 ], [ 1, %57 ]
  %62 = load i32, ptr %1, align 8, !tbaa !34
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds i32, ptr %50, i64 %63
  %65 = icmp ult ptr %64, %46
  br i1 %65, label %48, label %66

66:                                               ; preds = %60, %53, %37
  %67 = phi i32 [ %33, %37 ], [ 1, %53 ], [ %61, %60 ]
  %68 = load ptr, ptr %38, align 8, !tbaa !13
  %69 = icmp eq ptr %68, null
  br i1 %69, label %71, label %70

70:                                               ; preds = %66
  tail call void @free(ptr noundef nonnull %68) #43
  br label %71

71:                                               ; preds = %70, %66
  tail call void @free(ptr noundef nonnull %38) #43
  ret i32 %67
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @PLA_verify(ptr nocapture noundef %0, ptr nocapture noundef readonly %1) #0 {
  %3 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 7
  %4 = load ptr, ptr %3, align 8, !tbaa !58
  %5 = icmp eq ptr %4, null
  br i1 %5, label %25, label %6

6:                                                ; preds = %2
  %7 = load ptr, ptr %4, align 8, !tbaa !13
  %8 = icmp eq ptr %7, null
  br i1 %8, label %25, label %9

9:                                                ; preds = %6
  %10 = getelementptr inbounds %struct.PLA_t, ptr %1, i64 0, i32 7
  %11 = load ptr, ptr %10, align 8, !tbaa !58
  %12 = icmp eq ptr %11, null
  br i1 %12, label %25, label %13

13:                                               ; preds = %9
  %14 = load ptr, ptr %11, align 8, !tbaa !13
  %15 = icmp eq ptr %14, null
  br i1 %15, label %25, label %16

16:                                               ; preds = %13
  %17 = tail call i32 @PLA_permute(ptr noundef nonnull %0, ptr noundef nonnull %1) #44
  %18 = load ptr, ptr %0, align 8, !tbaa !61
  %19 = getelementptr inbounds %struct.set_family, ptr %18, i64 0, i32 1
  %20 = load i32, ptr %19, align 4, !tbaa !44
  %21 = load ptr, ptr %1, align 8, !tbaa !61
  %22 = getelementptr inbounds %struct.set_family, ptr %21, i64 0, i32 1
  %23 = load i32, ptr %22, align 4, !tbaa !44
  %24 = icmp eq i32 %20, %23
  br i1 %24, label %31, label %28

25:                                               ; preds = %13, %9, %6, %2
  %26 = load ptr, ptr @stderr, align 8, !tbaa !13
  %27 = tail call i64 @fwrite(ptr nonnull @.str.3.586, i64 46, i64 1, ptr %26) #50
  br label %35

28:                                               ; preds = %16
  %29 = load ptr, ptr @stderr, align 8, !tbaa !13
  %30 = tail call i64 @fwrite(ptr nonnull @.str.4.587, i64 40, i64 1, ptr %29) #50
  br label %35

31:                                               ; preds = %16
  %32 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 1
  %33 = load ptr, ptr %32, align 8, !tbaa !62
  %34 = tail call i32 @verify(ptr noundef nonnull %21, ptr noundef nonnull %18, ptr noundef %33) #44, !range !67
  br label %35

35:                                               ; preds = %31, %28, %25
  %36 = phi i32 [ 1, %28 ], [ %34, %31 ], [ 1, %25 ]
  ret i32 %36
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @PLA_permute(ptr nocapture noundef %0, ptr nocapture noundef readonly %1) #0 {
  %3 = load ptr, ptr %1, align 8, !tbaa !61
  %4 = getelementptr inbounds %struct.set_family, ptr %3, i64 0, i32 1
  %5 = load i32, ptr %4, align 4, !tbaa !44
  %6 = sext i32 %5 to i64
  %7 = shl nsw i64 %6, 2
  %8 = tail call noalias ptr @malloc(i64 noundef %7) #42
  %9 = icmp sgt i32 %5, 0
  %10 = load ptr, ptr %0, align 8, !tbaa !61
  br i1 %9, label %11, label %48

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.PLA_t, ptr %1, i64 0, i32 7
  %13 = load ptr, ptr %12, align 8, !tbaa !58
  %14 = getelementptr inbounds %struct.set_family, ptr %10, i64 0, i32 1
  %15 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 7
  br label %16

16:                                               ; preds = %42, %11
  %17 = phi i32 [ %5, %11 ], [ %43, %42 ]
  %18 = phi i64 [ 0, %11 ], [ %45, %42 ]
  %19 = phi i32 [ 0, %11 ], [ %44, %42 ]
  %20 = getelementptr inbounds ptr, ptr %13, i64 %18
  %21 = load ptr, ptr %20, align 8, !tbaa !13
  %22 = load i32, ptr %14, align 4, !tbaa !44
  %23 = icmp sgt i32 %22, 0
  br i1 %23, label %24, label %42

24:                                               ; preds = %16
  %25 = load ptr, ptr %15, align 8, !tbaa !58
  %26 = zext i32 %22 to i64
  br label %27

27:                                               ; preds = %39, %24
  %28 = phi i64 [ 0, %24 ], [ %40, %39 ]
  %29 = getelementptr inbounds ptr, ptr %25, i64 %28
  %30 = load ptr, ptr %29, align 8, !tbaa !13
  %31 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %21, ptr noundef nonnull dereferenceable(1) %30) #48
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %39

33:                                               ; preds = %27
  %.lcssa = phi i64 [ %28, %27 ]
  %34 = trunc i64 %.lcssa to i32
  %35 = add nsw i32 %19, 1
  %36 = sext i32 %19 to i64
  %37 = getelementptr inbounds i32, ptr %8, i64 %36
  store i32 %34, ptr %37, align 4, !tbaa !16
  %38 = load i32, ptr %4, align 4, !tbaa !44
  br label %42

39:                                               ; preds = %27
  %40 = add nuw nsw i64 %28, 1
  %41 = icmp eq i64 %40, %26
  br i1 %41, label %42, label %27

42:                                               ; preds = %39, %33, %16
  %43 = phi i32 [ %38, %33 ], [ %17, %16 ], [ %17, %39 ]
  %44 = phi i32 [ %35, %33 ], [ %19, %16 ], [ %19, %39 ]
  %45 = add nuw nsw i64 %18, 1
  %46 = sext i32 %43 to i64
  %47 = icmp slt i64 %45, %46
  br i1 %47, label %16, label %48

48:                                               ; preds = %42, %2
  %49 = phi i32 [ 0, %2 ], [ %44, %42 ]
  %50 = icmp eq ptr %10, null
  br i1 %50, label %53, label %51

51:                                               ; preds = %48
  %52 = tail call ptr (ptr, ptr, i32, ...) @sf_permute(ptr noundef nonnull %10, ptr noundef %8, i32 noundef %49) #43
  store ptr %52, ptr %0, align 8, !tbaa !61
  br label %53

53:                                               ; preds = %51, %48
  %54 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 2
  %55 = load ptr, ptr %54, align 8, !tbaa !63
  %56 = icmp eq ptr %55, null
  br i1 %56, label %59, label %57

57:                                               ; preds = %53
  %58 = tail call ptr (ptr, ptr, i32, ...) @sf_permute(ptr noundef nonnull %55, ptr noundef %8, i32 noundef %49) #43
  store ptr %58, ptr %54, align 8, !tbaa !63
  br label %59

59:                                               ; preds = %57, %53
  %60 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 1
  %61 = load ptr, ptr %60, align 8, !tbaa !62
  %62 = icmp eq ptr %61, null
  br i1 %62, label %65, label %63

63:                                               ; preds = %59
  %64 = tail call ptr (ptr, ptr, i32, ...) @sf_permute(ptr noundef nonnull %61, ptr noundef %8, i32 noundef %49) #43
  store ptr %64, ptr %60, align 8, !tbaa !62
  br label %65

65:                                               ; preds = %63, %59
  %66 = load i32, ptr @cube, align 8, !tbaa !14
  %67 = sext i32 %66 to i64
  %68 = shl nsw i64 %67, 3
  %69 = tail call noalias ptr @malloc(i64 noundef %68) #42
  %70 = icmp sgt i32 %49, 0
  br i1 %70, label %71, label %75

71:                                               ; preds = %65
  %72 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 7
  %73 = load ptr, ptr %72, align 8, !tbaa !58
  %74 = zext i32 %49 to i64
  br label %86

75:                                               ; preds = %86, %65
  %76 = icmp slt i32 %49, %66
  br i1 %76, label %77, label %96

77:                                               ; preds = %75
  %78 = sext i32 %49 to i64
  %79 = shl nsw i64 %78, 3
  %80 = getelementptr i8, ptr %69, i64 %79
  %81 = xor i32 %49, -1
  %82 = add i32 %66, %81
  %83 = zext i32 %82 to i64
  %84 = shl nuw nsw i64 %83, 3
  %85 = add nuw nsw i64 %84, 8
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(1) %80, i8 0, i64 %85, i1 false), !tbaa !13
  br label %96

86:                                               ; preds = %86, %71
  %87 = phi i64 [ 0, %71 ], [ %94, %86 ]
  %88 = getelementptr inbounds i32, ptr %8, i64 %87
  %89 = load i32, ptr %88, align 4, !tbaa !16
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds ptr, ptr %73, i64 %90
  %92 = load ptr, ptr %91, align 8, !tbaa !13
  %93 = getelementptr inbounds ptr, ptr %69, i64 %87
  store ptr %92, ptr %93, align 8, !tbaa !13
  %94 = add nuw nsw i64 %87, 1
  %95 = icmp eq i64 %94, %74
  br i1 %95, label %75, label %86

96:                                               ; preds = %77, %75
  %97 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 7
  %98 = load ptr, ptr %97, align 8, !tbaa !58
  %99 = icmp eq ptr %98, null
  br i1 %99, label %101, label %100

100:                                              ; preds = %96
  tail call void @free(ptr noundef nonnull %98) #43
  br label %101

101:                                              ; preds = %100, %96
  store ptr %69, ptr %97, align 8, !tbaa !58
  %102 = icmp eq ptr %8, null
  br i1 %102, label %104, label %103

103:                                              ; preds = %101
  tail call void @free(ptr noundef nonnull %8) #43
  br label %104

104:                                              ; preds = %103, %101
  ret i32 undef
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @check_consistency(ptr nocapture noundef readonly %0) #0 {
  %2 = load ptr, ptr %0, align 8, !tbaa !61
  %3 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %3, align 8, !tbaa !62
  %5 = tail call ptr (ptr, ptr, ...) @cv_intersect(ptr noundef %2, ptr noundef %4) #43
  %6 = getelementptr inbounds %struct.set_family, ptr %5, i64 0, i32 3
  %7 = load i32, ptr %6, align 4, !tbaa !31
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %11

9:                                                ; preds = %1
  %10 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.21)
  br label %16

11:                                               ; preds = %1
  %12 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.14)
  %13 = load i32, ptr @verbose_debug, align 4, !tbaa !16
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %16, label %15

15:                                               ; preds = %11
  tail call void (ptr, ...) @cprint(ptr noundef nonnull %5) #43
  br label %16

16:                                               ; preds = %15, %11, %9
  %17 = phi i32 [ 0, %9 ], [ 1, %15 ], [ 1, %11 ]
  %18 = load ptr, ptr @stdout, align 8, !tbaa !13
  %19 = tail call i32 @fflush(ptr noundef %18) #44
  tail call void (ptr, ...) @sf_free(ptr noundef nonnull %5) #43
  %20 = load ptr, ptr %0, align 8, !tbaa !61
  %21 = getelementptr inbounds %struct.PLA_t, ptr %0, i64 0, i32 2
  %22 = load ptr, ptr %21, align 8, !tbaa !63
  %23 = tail call ptr (ptr, ptr, ...) @cv_intersect(ptr noundef %20, ptr noundef %22) #43
  %24 = getelementptr inbounds %struct.set_family, ptr %23, i64 0, i32 3
  %25 = load i32, ptr %24, align 4, !tbaa !31
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %29

27:                                               ; preds = %16
  %28 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.20)
  br label %34

29:                                               ; preds = %16
  %30 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.15)
  %31 = load i32, ptr @verbose_debug, align 4, !tbaa !16
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %34, label %33

33:                                               ; preds = %29
  tail call void (ptr, ...) @cprint(ptr noundef nonnull %23) #43
  br label %34

34:                                               ; preds = %33, %29, %27
  %35 = phi i32 [ %17, %27 ], [ 1, %33 ], [ 1, %29 ]
  %36 = load ptr, ptr @stdout, align 8, !tbaa !13
  %37 = tail call i32 @fflush(ptr noundef %36) #44
  tail call void (ptr, ...) @sf_free(ptr noundef nonnull %23) #43
  %38 = load ptr, ptr %3, align 8, !tbaa !62
  %39 = load ptr, ptr %21, align 8, !tbaa !63
  %40 = tail call ptr (ptr, ptr, ...) @cv_intersect(ptr noundef %38, ptr noundef %39) #43
  %41 = getelementptr inbounds %struct.set_family, ptr %40, i64 0, i32 3
  %42 = load i32, ptr %41, align 4, !tbaa !31
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %46

44:                                               ; preds = %34
  %45 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.19.590)
  br label %51

46:                                               ; preds = %34
  %47 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.16)
  %48 = load i32, ptr @verbose_debug, align 4, !tbaa !16
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %51, label %50

50:                                               ; preds = %46
  tail call void (ptr, ...) @cprint(ptr noundef nonnull %40) #43
  br label %51

51:                                               ; preds = %50, %46, %44
  %52 = phi i32 [ %35, %44 ], [ 1, %50 ], [ 1, %46 ]
  %53 = load ptr, ptr @stdout, align 8, !tbaa !13
  %54 = tail call i32 @fflush(ptr noundef %53) #44
  tail call void (ptr, ...) @sf_free(ptr noundef nonnull %40) #43
  %55 = load ptr, ptr %0, align 8, !tbaa !61
  %56 = load ptr, ptr %3, align 8, !tbaa !62
  %57 = load ptr, ptr %21, align 8, !tbaa !63
  %58 = tail call ptr (ptr, ptr, ptr, ...) @cube3list(ptr noundef %55, ptr noundef %56, ptr noundef %57) #43
  %59 = tail call i32 (ptr, ...) @tautology(ptr noundef %58) #43
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %63, label %61

61:                                               ; preds = %51
  %62 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.18)
  br label %74

63:                                               ; preds = %51
  %64 = load ptr, ptr %0, align 8, !tbaa !61
  %65 = load ptr, ptr %3, align 8, !tbaa !62
  %66 = load ptr, ptr %21, align 8, !tbaa !63
  %67 = tail call ptr (ptr, ptr, ptr, ...) @cube3list(ptr noundef %64, ptr noundef %65, ptr noundef %66) #43
  %68 = tail call ptr (ptr, ...) @complement(ptr noundef %67) #43
  %69 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.17)
  %70 = load i32, ptr @verbose_debug, align 4, !tbaa !16
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %73, label %72

72:                                               ; preds = %63
  tail call void (ptr, ...) @cprint(ptr noundef %68) #43
  br label %73

73:                                               ; preds = %72, %63
  tail call void (ptr, ...) @sf_free(ptr noundef %68) #43
  br label %74

74:                                               ; preds = %73, %61
  %75 = phi i32 [ %52, %61 ], [ 1, %73 ]
  %76 = load ptr, ptr @stdout, align 8, !tbaa !13
  %77 = tail call i32 @fflush(ptr noundef %76) #44
  ret i32 %75
}

attributes #0 = { nounwind optsize uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #5 = { nofree nounwind optsize "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { mustprogress nofree nounwind optsize willreturn memory(write, argmem: none, inaccessiblemem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { mustprogress nounwind optsize willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #9 = { mustprogress nounwind optsize willreturn memory(write, argmem: readwrite, inaccessiblemem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #10 = { nofree nounwind }
attributes #11 = { nofree optsize "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #12 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #13 = { nofree nounwind optsize memory(write, argmem: readwrite, inaccessiblemem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #14 = { nofree nounwind optsize uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #15 = { mustprogress nofree nosync nounwind optsize willreturn memory(none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #16 = { optsize "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #17 = { mustprogress nofree nounwind optsize willreturn memory(argmem: read) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #18 = { noreturn nounwind optsize "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #19 = { nofree nounwind willreturn memory(argmem: read) }
attributes #20 = { mustprogress nofree nounwind optsize willreturn memory(argmem: readwrite) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #21 = { nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #22 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #23 = { noreturn nounwind optsize uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #24 = { nofree norecurse nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #25 = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite) }
attributes #26 = { mustprogress nofree nounwind optsize willreturn memory(read) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #27 = { nofree nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #28 = { mustprogress nounwind optsize willreturn allockind("realloc") allocsize(1) memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #29 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #30 = { mustprogress nounwind optsize willreturn uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #31 = { nofree nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #32 = { nounwind optsize memory(argmem: readwrite, inaccessiblemem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #33 = { nofree norecurse nosync nounwind optsize memory(none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #34 = { mustprogress nofree nosync nounwind optsize willreturn memory(argmem: write) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #35 = { nofree norecurse nosync nounwind optsize memory(argmem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #36 = { nofree norecurse nosync nounwind optsize memory(argmem: read) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #37 = { mustprogress nofree nounwind optsize willreturn uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #38 = { nofree nosync nounwind optsize memory(write, argmem: read, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #39 = { nofree nounwind optsize memory(readwrite, argmem: read) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #40 = { nofree nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #41 = { nounwind optsize "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #42 = { nounwind optsize allocsize(0) }
attributes #43 = { nounwind optsize }
attributes #44 = { optsize }
attributes #45 = { nounwind }
attributes #46 = { nounwind optsize willreturn memory(none) }
attributes #47 = { cold optsize }
attributes #48 = { nounwind optsize willreturn memory(read) }
attributes #49 = { noreturn nounwind optsize }
attributes #50 = { cold }
attributes #51 = { nounwind optsize allocsize(1) }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0}
!llvm.module.flags = !{!1, !2, !3, !4, !5, !6}

!0 = !{!"clang version 17.0.6 (https://github.com/Casperento/llvm-project.git 9b0073551ece0d22bf3378af2b03e456a26031b6)"}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 8, !"PIC Level", i32 2}
!3 = !{i32 7, !"PIE Level", i32 2}
!4 = !{i32 7, !"uwtable", i32 2}
!5 = !{i32 1, !"ThinLTO", i32 0}
!6 = !{i32 1, !"EnableSplitLTOUnit", i32 1}
!7 = !{!8, !12, i64 80}
!8 = !{!"cube_struct", !9, i64 0, !9, i64 4, !9, i64 8, !12, i64 16, !12, i64 24, !12, i64 32, !12, i64 40, !12, i64 48, !12, i64 56, !12, i64 64, !12, i64 72, !12, i64 80, !12, i64 88, !12, i64 96, !9, i64 104, !9, i64 108, !12, i64 112, !9, i64 120, !9, i64 124}
!9 = !{!"int", !10, i64 0}
!10 = !{!"omnipotent char", !11, i64 0}
!11 = !{!"Simple C/C++ TBAA"}
!12 = !{!"any pointer", !10, i64 0}
!13 = !{!12, !12, i64 0}
!14 = !{!8, !9, i64 0}
!15 = !{!8, !12, i64 88}
!16 = !{!9, !9, i64 0}
!17 = !{!8, !12, i64 72}
!18 = !{!8, !12, i64 48}
!19 = !{!8, !12, i64 40}
!20 = !{!21, !12, i64 0}
!21 = !{!"cdata_struct", !12, i64 0, !12, i64 8, !12, i64 16, !12, i64 24, !9, i64 32, !9, i64 36, !9, i64 40}
!22 = !{!21, !9, i64 32}
!23 = !{!21, !9, i64 36}
!24 = !{!8, !9, i64 4}
!25 = !{!21, !12, i64 16}
!26 = !{!21, !12, i64 24}
!27 = !{!8, !9, i64 8}
!28 = !{!21, !9, i64 40}
!29 = !{!8, !12, i64 24}
!30 = !{!8, !12, i64 16}
!31 = !{!32, !9, i64 12}
!32 = !{!"set_family", !9, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !12, i64 24, !12, i64 32}
!33 = !{!32, !12, i64 24}
!34 = !{!32, !9, i64 0}
!35 = !{!36, !9, i64 0}
!36 = !{!"sm_col_struct", !9, i64 0, !9, i64 4, !9, i64 8, !12, i64 16, !12, i64 24, !12, i64 32, !12, i64 40, !12, i64 48}
!37 = !{!36, !9, i64 4}
!38 = !{!36, !9, i64 8}
!39 = !{!36, !12, i64 16}
!40 = !{!41, !12, i64 8}
!41 = !{!"sm_element_struct", !9, i64 0, !9, i64 4, !12, i64 8, !12, i64 16, !12, i64 24, !12, i64 32, !12, i64 40}
!42 = !{!41, !9, i64 0}
!43 = !{!41, !12, i64 16}
!44 = !{!32, !9, i64 4}
!45 = !{!8, !9, i64 120}
!46 = !{!8, !9, i64 124}
!47 = !{!8, !12, i64 112}
!48 = !{!8, !12, i64 56}
!49 = !{!8, !12, i64 64}
!50 = !{!8, !9, i64 108}
!51 = !{!8, !9, i64 104}
!52 = !{!8, !12, i64 96}
!53 = !{!21, !12, i64 8}
!54 = !{!55, !55, i64 0}
!55 = !{!"short", !10, i64 0}
!56 = !{!10, !10, i64 0}
!57 = !{!8, !12, i64 32}
!58 = !{!59, !12, i64 56}
!59 = !{!"", !12, i64 0, !12, i64 8, !12, i64 16, !12, i64 24, !9, i64 32, !12, i64 40, !12, i64 48, !12, i64 56, !12, i64 64, !12, i64 72}
!60 = !{!59, !9, i64 32}
!61 = !{!59, !12, i64 0}
!62 = !{!59, !12, i64 8}
!63 = !{!59, !12, i64 16}
!64 = !{!65, !12, i64 0}
!65 = !{!"pla_types_struct", !12, i64 0, !9, i64 8}
!66 = !{!65, !9, i64 8}
!67 = !{i32 0, i32 2}
!68 = !{!59, !12, i64 64}
!69 = !{!70, !12, i64 32}
!70 = !{!"symbolic_struct", !12, i64 0, !9, i64 8, !12, i64 16, !9, i64 24, !12, i64 32}
!71 = !{!59, !12, i64 72}
!72 = !{!59, !12, i64 40}
!73 = !{!59, !12, i64 48}
!74 = !{!75, !9, i64 0}
!75 = !{!"pair_struct", !9, i64 0, !12, i64 8, !12, i64 16}
!76 = !{!75, !12, i64 8}
!77 = !{!75, !12, i64 16}
!78 = !{!70, !12, i64 0}
!79 = !{!70, !9, i64 8}
!80 = !{!70, !12, i64 16}
!81 = !{!70, !9, i64 24}
!82 = !{!83, !9, i64 0}
!83 = !{!"symbolic_list_struct", !9, i64 0, !9, i64 4, !12, i64 8}
!84 = !{!83, !9, i64 4}
!85 = !{!83, !12, i64 8}
!86 = !{!87, !12, i64 0}
!87 = !{!"symbolic_label_struct", !12, i64 0, !12, i64 8}
!88 = !{!87, !12, i64 8}
!89 = !{!59, !12, i64 24}
!90 = !{!91, !9, i64 0}
!91 = !{!"cost_struct", !9, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20}
!92 = !{!91, !9, i64 4}
!93 = !{!91, !9, i64 12}
!94 = !{!91, !9, i64 8}
!95 = !{!91, !9, i64 20}
!96 = !{!91, !9, i64 16}
!97 = !{!98, !98, i64 0}
!98 = !{!"long", !10, i64 0}
!99 = !{!100, !9, i64 48}
!100 = !{!"sm_matrix_struct", !12, i64 0, !9, i64 8, !12, i64 16, !9, i64 24, !12, i64 32, !12, i64 40, !9, i64 48, !12, i64 56, !12, i64 64, !9, i64 72, !12, i64 80}
!101 = !{!102, !12, i64 16}
!102 = !{!"sm_row_struct", !9, i64 0, !9, i64 4, !9, i64 8, !12, i64 16, !12, i64 24, !12, i64 32, !12, i64 40, !12, i64 48}
!103 = !{!41, !9, i64 4}
!104 = !{!100, !9, i64 24}
!105 = !{!100, !12, i64 16}
!106 = !{!41, !12, i64 24}
!107 = !{!100, !9, i64 8}
!108 = !{!100, !12, i64 0}
!109 = !{!102, !9, i64 4}
!110 = !{!102, !9, i64 0}
!111 = !{!100, !9, i64 72}
!112 = !{!100, !12, i64 56}
!113 = !{!36, !12, i64 32}
!114 = !{!32, !9, i64 16}
!115 = !{!102, !12, i64 24}
!116 = !{!36, !12, i64 24}
!117 = !{!118, !9, i64 24}
!118 = !{!"stats_struct", !9, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24, !9, i64 28, !98, i64 32, !9, i64 40, !9, i64 44}
!119 = !{!118, !9, i64 28}
!120 = !{!121, !12, i64 0}
!121 = !{!"solution_struct", !12, i64 0, !9, i64 8}
!122 = !{}
!123 = !{!102, !9, i64 8}
!124 = !{!100, !12, i64 32}
!125 = !{!102, !12, i64 32}
!126 = !{!121, !9, i64 8}
!127 = !{!100, !12, i64 40}
!128 = !{i32 0, i32 3}
!129 = !{!130, !12, i64 0}
!130 = !{!"", !12, i64 0, !12, i64 8, !9, i64 16}
!131 = !{!132, !12, i64 0}
!132 = !{!"", !12, i64 0, !10, i64 8, !9, i64 12, !9, i64 16, !9, i64 20}
!133 = !{!130, !9, i64 16}
!134 = !{!130, !12, i64 8}
!135 = !{!136, !9, i64 8}
!136 = !{!"", !12, i64 0, !9, i64 8}
!137 = !{!136, !12, i64 0}
!138 = !{!132, !9, i64 12}
!139 = !{!132, !10, i64 8}
!140 = !{!132, !9, i64 20}
!141 = !{!132, !9, i64 16}
!142 = !{!100, !12, i64 80}
!143 = !{!100, !12, i64 64}
!144 = !{!102, !12, i64 40}
!145 = !{!36, !12, i64 40}
!146 = !{!41, !12, i64 40}
!147 = !{!41, !12, i64 32}
!148 = !{!118, !98, i64 32}
!149 = !{!118, !9, i64 0}
!150 = !{!118, !9, i64 4}
!151 = !{!118, !9, i64 8}
!152 = !{!118, !9, i64 40}
!153 = !{!118, !9, i64 44}
!154 = !{!118, !9, i64 20}
!155 = !{!118, !9, i64 12}
!156 = !{!118, !9, i64 16}
!157 = !{!32, !9, i64 8}
!158 = !{i32 1, i32 3}
!159 = !{!32, !12, i64 32}
!160 = !{!161, !98, i64 0}
!161 = !{!"rusage", !162, i64 0, !162, i64 16, !10, i64 32, !10, i64 40, !10, i64 48, !10, i64 56, !10, i64 64, !10, i64 72, !10, i64 80, !10, i64 88, !10, i64 96, !10, i64 104, !10, i64 112, !10, i64 120, !10, i64 128, !10, i64 136}
!162 = !{!"timeval", !98, i64 0, !98, i64 8}
!163 = !{!161, !98, i64 8}

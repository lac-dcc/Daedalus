; ModuleID = '/src/llvm-test-suite/build/MultiSource/Benchmarks/MiBench/consumer-lame/consumer-lame.e.bc'
source_filename = "ld-temp.o"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.bit_stream_struc = type { ptr, i32, ptr, ptr, i32, i64, i32, i32 }
%struct.III_side_info_t = type { i32, i32, i32, [2 x [4 x i32]], [2 x %struct.anon] }
%struct.anon = type { [2 x %struct.gr_info_ss] }
%struct.gr_info_ss = type { %struct.gr_info }
%struct.gr_info = type { i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], [3 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, [4 x i32] }
%struct.bandInfoStruct = type { [23 x i16], [22 x i16], [14 x i16], [13 x i16] }
%struct.BF_BitstreamPart = type { i32, ptr }
%struct.mpstr = type { ptr, ptr, i32, i32, i32, %struct.frame, [2 x [2304 x i8]], [2 x [2 x [576 x double]]], [2 x i32], i64, i32, [2 x [2 x [272 x double]]], i32 }
%struct.frame = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ID3TAGDATA = type { i32, i32, [31 x i8], [31 x i8], [31 x i8], [5 x i8], [31 x i8], [128 x i8], [1 x i8], i8 }
%struct.III_psy_xmin = type { [22 x double], [13 x [3 x double]] }
%struct.scalefac_struct = type { [23 x i32], [14 x i32] }
%struct.anon.56 = type { i32, i32 }
%struct.huffcodetab = type { i32, i32, ptr, ptr }
%struct.VBRTAGDATA = type { i32, i32, i32, i32, i32, i32, [100 x i8] }
%struct.BF_FrameData = type { i32, i32, i32, ptr, ptr, [2 x ptr], [2 x [2 x ptr]], [2 x [2 x ptr]], [2 x [2 x ptr]], [2 x [2 x ptr]], ptr }
%struct.side_info_link = type { ptr, %struct.MYSideInfo }
%struct.MYSideInfo = type { i32, i32, i32, i32, ptr, ptr, [2 x ptr], [2 x [2 x ptr]] }
%struct.BF_BitstreamElement = type { i32, i16 }
%struct.BF_FrameResults = type { i32, i32, i32 }
%struct.lame_global_flags = type { i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, i32, i32, float, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }
%struct.buf = type { ptr, i64, i64, ptr, ptr }
%struct.III_scalefac_t = type { [22 x i32], [13 x [3 x i32]] }
%struct.III_psy_ratio = type { %struct.III_psy_xmin, %struct.III_psy_xmin }
%struct.III_sideinfo = type { i32, i32, [2 x %struct.anon.15] }
%struct.anon.15 = type { [2 x %struct.gr_info_s] }
%struct.gr_info_s = type { i32, i32, i32, i32, i32, i32, [3 x i32], [3 x i32], [3 x i32], i32, i32, i32, i32, i32, i32, i32, [3 x ptr], ptr }
%union.anon = type { i32 }

@SizeOfEmptyFrame = internal global [2 x [2 x i32]] [[2 x i32] [i32 32, i32 17], [2 x i32] [i32 17, i32 9]], align 16
@pVbrFrames = internal global ptr null, align 8
@nVbrNumFrames = internal global i32 0, align 4
@nVbrFrameBufferSize = internal global i32 0, align 4
@GetVbrTag.sr_table = internal unnamed_addr constant [4 x i32] [i32 44100, i32 48000, i32 32000, i32 99999], align 16
@pbtStreamBuffer = internal global [216 x i8] zeroinitializer, align 16
@nZeroStreamSize = internal unnamed_addr global i32 0, align 4
@InitVbrTag.framesize = internal unnamed_addr constant [3 x i32] [i32 208, i32 192, i32 288], align 4
@.str = private unnamed_addr constant [34 x i8] c"illegal sampling frequency index\0A\00", align 1
@TotalFrameSize = internal unnamed_addr global i32 0, align 4
@.str.1 = private unnamed_addr constant [34 x i8] c"Xing VBR header problem...use -t\0A\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"rb+\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"LAME%s\00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"Stream error\0A\00", align 1
@.str.1.5 = private unnamed_addr constant [28 x i8] c"Free format not supported.\0A\00", align 1
@.str.2.6 = private unnamed_addr constant [24 x i8] c"layer=1 Not supported!\0A\00", align 1
@.str.3.7 = private unnamed_addr constant [24 x i8] c"layer=2 Not supported!\0A\00", align 1
@.str.4.8 = private unnamed_addr constant [28 x i8] c"Sorry, unknown layer type.\0A\00", align 1
@rv_tbl = internal unnamed_addr constant [128 x i16] [i16 0, i16 128, i16 64, i16 192, i16 32, i16 160, i16 96, i16 224, i16 16, i16 144, i16 80, i16 208, i16 48, i16 176, i16 112, i16 240, i16 8, i16 136, i16 72, i16 200, i16 40, i16 168, i16 104, i16 232, i16 24, i16 152, i16 88, i16 216, i16 56, i16 184, i16 120, i16 248, i16 4, i16 132, i16 68, i16 196, i16 36, i16 164, i16 100, i16 228, i16 20, i16 148, i16 84, i16 212, i16 52, i16 180, i16 116, i16 244, i16 12, i16 140, i16 76, i16 204, i16 44, i16 172, i16 108, i16 236, i16 28, i16 156, i16 92, i16 220, i16 60, i16 188, i16 124, i16 252, i16 2, i16 130, i16 66, i16 194, i16 34, i16 162, i16 98, i16 226, i16 18, i16 146, i16 82, i16 210, i16 50, i16 178, i16 114, i16 242, i16 10, i16 138, i16 74, i16 202, i16 42, i16 170, i16 106, i16 234, i16 26, i16 154, i16 90, i16 218, i16 58, i16 186, i16 122, i16 250, i16 6, i16 134, i16 70, i16 198, i16 38, i16 166, i16 102, i16 230, i16 22, i16 150, i16 86, i16 214, i16 54, i16 182, i16 118, i16 246, i16 14, i16 142, i16 78, i16 206, i16 46, i16 174, i16 110, i16 238, i16 30, i16 158, i16 94, i16 222, i16 62, i16 190, i16 126, i16 254], align 16
@window_s = internal unnamed_addr global [128 x float] zeroinitializer, align 16
@window = internal unnamed_addr global [512 x float] zeroinitializer, align 16
@costab = internal unnamed_addr global [8 x float] zeroinitializer, align 16
@BitCount = internal unnamed_addr global i32 0, align 4
@ThisFrameSize = internal unnamed_addr global i32 0, align 4
@BitsRemaining = internal unnamed_addr global i32 0, align 4
@forwardFrameLength = internal unnamed_addr global i32 0, align 4
@forwardSILength = internal unnamed_addr global i32 0, align 4
@elements = internal unnamed_addr global i32 0, align 4
@side_queue_free = internal unnamed_addr global ptr null, align 8
@side_queue_head = internal unnamed_addr global ptr null, align 8
@.str.9 = private unnamed_addr constant [31 x i8] c"cannot allocate side_info_link\00", align 1
@count_samples_carefully = internal unnamed_addr global i1 false, align 4
@get_audio.num_samples_read = internal unnamed_addr global i64 0, align 8
@num_samples = internal global i64 0, align 8
@musicin = internal unnamed_addr global ptr null, align 8
@input_bitrate = internal global i32 0, align 4
@.str.17 = private unnamed_addr constant [34 x i8] c"Could not close audio input file\0A\00", align 1
@samp_freq = internal global i32 0, align 4
@num_channels = internal global i32 0, align 4
@.str.1.10 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@stdin = external local_unnamed_addr global ptr, align 8
@.str.2.11 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@.str.3.12 = private unnamed_addr constant [22 x i8] c"Could not find \22%s\22.\0A\00", align 1
@.str.4.13 = private unnamed_addr constant [45 x i8] c"Error reading headers in mp3 input file %s.\0A\00", align 1
@.str.5 = private unnamed_addr constant [28 x i8] c"Assuming raw pcm input file\00", align 1
@.str.6 = private unnamed_addr constant [26 x i8] c" : Forcing byte-swapping\0A\00", align 1
@.str.8 = private unnamed_addr constant [26 x i8] c"Error reading input file\0A\00", align 1
@.str.9.18 = private unnamed_addr constant [27 x i8] c"byte order not determined\0A\00", align 1
@.str.10 = private unnamed_addr constant [5 x i8] c"name\00", align 1
@.str.11 = private unnamed_addr constant [38 x i8] c"%d-bit sample-size is not supported!\0A\00", align 1
@.str.13 = private unnamed_addr constant [36 x i8] c"Sound data is not %d bits in \22%s\22.\0A\00", align 1
@.str.14 = private unnamed_addr constant [43 x i8] c"Sound data is not mono or stereo in \22%s\22.\0A\00", align 1
@.str.15 = private unnamed_addr constant [37 x i8] c"Block size is not %d bytes in \22%s\22.\0A\00", align 1
@.str.16 = private unnamed_addr constant [39 x i8] c"Block offset is not %d bytes in \22%s\22.\0A\00", align 1
@.str.2.19 = private unnamed_addr constant [4 x i8] c"rb+\00", align 1
@.str.3.20 = private unnamed_addr constant [6 x i8] c"Blues\00", align 1
@.str.4.21 = private unnamed_addr constant [13 x i8] c"Classic Rock\00", align 1
@.str.5.22 = private unnamed_addr constant [8 x i8] c"Country\00", align 1
@.str.6.23 = private unnamed_addr constant [6 x i8] c"Dance\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"Disco\00", align 1
@.str.8.24 = private unnamed_addr constant [5 x i8] c"Funk\00", align 1
@.str.9.25 = private unnamed_addr constant [7 x i8] c"Grunge\00", align 1
@.str.10.26 = private unnamed_addr constant [8 x i8] c"Hip-Hop\00", align 1
@.str.11.27 = private unnamed_addr constant [5 x i8] c"Jazz\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"Metal\00", align 1
@.str.13.28 = private unnamed_addr constant [8 x i8] c"New Age\00", align 1
@.str.14.29 = private unnamed_addr constant [7 x i8] c"Oldies\00", align 1
@.str.15.30 = private unnamed_addr constant [6 x i8] c"Other\00", align 1
@.str.16.31 = private unnamed_addr constant [4 x i8] c"Pop\00", align 1
@.str.17.32 = private unnamed_addr constant [4 x i8] c"R&B\00", align 1
@.str.18 = private unnamed_addr constant [4 x i8] c"Rap\00", align 1
@.str.19 = private unnamed_addr constant [7 x i8] c"Reggae\00", align 1
@.str.20 = private unnamed_addr constant [5 x i8] c"Rock\00", align 1
@.str.21 = private unnamed_addr constant [7 x i8] c"Techno\00", align 1
@.str.22 = private unnamed_addr constant [11 x i8] c"Industrial\00", align 1
@.str.23 = private unnamed_addr constant [12 x i8] c"Alternative\00", align 1
@.str.24 = private unnamed_addr constant [4 x i8] c"Ska\00", align 1
@.str.25 = private unnamed_addr constant [12 x i8] c"Death Metal\00", align 1
@.str.26 = private unnamed_addr constant [7 x i8] c"Pranks\00", align 1
@.str.27 = private unnamed_addr constant [11 x i8] c"Soundtrack\00", align 1
@.str.28 = private unnamed_addr constant [12 x i8] c"Euro-Techno\00", align 1
@.str.29 = private unnamed_addr constant [8 x i8] c"Ambient\00", align 1
@.str.30 = private unnamed_addr constant [9 x i8] c"Trip-Hop\00", align 1
@.str.31 = private unnamed_addr constant [6 x i8] c"Vocal\00", align 1
@.str.32 = private unnamed_addr constant [10 x i8] c"Jazz+Funk\00", align 1
@.str.33 = private unnamed_addr constant [7 x i8] c"Fusion\00", align 1
@.str.34 = private unnamed_addr constant [7 x i8] c"Trance\00", align 1
@.str.35 = private unnamed_addr constant [10 x i8] c"Classical\00", align 1
@.str.36 = private unnamed_addr constant [13 x i8] c"Instrumental\00", align 1
@.str.37 = private unnamed_addr constant [5 x i8] c"Acid\00", align 1
@.str.38 = private unnamed_addr constant [6 x i8] c"House\00", align 1
@.str.39 = private unnamed_addr constant [5 x i8] c"Game\00", align 1
@.str.40 = private unnamed_addr constant [11 x i8] c"Sound Clip\00", align 1
@.str.41 = private unnamed_addr constant [7 x i8] c"Gospel\00", align 1
@.str.42 = private unnamed_addr constant [6 x i8] c"Noise\00", align 1
@.str.43 = private unnamed_addr constant [11 x i8] c"AlternRock\00", align 1
@.str.44 = private unnamed_addr constant [5 x i8] c"Bass\00", align 1
@.str.45 = private unnamed_addr constant [5 x i8] c"Soul\00", align 1
@.str.46 = private unnamed_addr constant [5 x i8] c"Punk\00", align 1
@.str.47 = private unnamed_addr constant [6 x i8] c"Space\00", align 1
@.str.48 = private unnamed_addr constant [11 x i8] c"Meditative\00", align 1
@.str.49 = private unnamed_addr constant [17 x i8] c"Instrumental Pop\00", align 1
@.str.50 = private unnamed_addr constant [18 x i8] c"Instrumental Rock\00", align 1
@.str.51 = private unnamed_addr constant [7 x i8] c"Ethnic\00", align 1
@.str.52 = private unnamed_addr constant [7 x i8] c"Gothic\00", align 1
@.str.53 = private unnamed_addr constant [9 x i8] c"Darkwave\00", align 1
@.str.54 = private unnamed_addr constant [18 x i8] c"Techno-Industrial\00", align 1
@.str.55 = private unnamed_addr constant [11 x i8] c"Electronic\00", align 1
@.str.56 = private unnamed_addr constant [9 x i8] c"Pop-Folk\00", align 1
@.str.57 = private unnamed_addr constant [10 x i8] c"Eurodance\00", align 1
@.str.58 = private unnamed_addr constant [6 x i8] c"Dream\00", align 1
@.str.59 = private unnamed_addr constant [14 x i8] c"Southern Rock\00", align 1
@.str.60 = private unnamed_addr constant [7 x i8] c"Comedy\00", align 1
@.str.61 = private unnamed_addr constant [5 x i8] c"Cult\00", align 1
@.str.62 = private unnamed_addr constant [8 x i8] c"Gangsta\00", align 1
@.str.63 = private unnamed_addr constant [7 x i8] c"Top 40\00", align 1
@.str.64 = private unnamed_addr constant [14 x i8] c"Christian Rap\00", align 1
@.str.65 = private unnamed_addr constant [9 x i8] c"Pop/Funk\00", align 1
@.str.66 = private unnamed_addr constant [7 x i8] c"Jungle\00", align 1
@.str.67 = private unnamed_addr constant [16 x i8] c"Native American\00", align 1
@.str.68 = private unnamed_addr constant [8 x i8] c"Cabaret\00", align 1
@.str.69 = private unnamed_addr constant [9 x i8] c"New Wave\00", align 1
@.str.70 = private unnamed_addr constant [12 x i8] c"Psychadelic\00", align 1
@.str.71 = private unnamed_addr constant [5 x i8] c"Rave\00", align 1
@.str.72 = private unnamed_addr constant [10 x i8] c"Showtunes\00", align 1
@.str.73 = private unnamed_addr constant [8 x i8] c"Trailer\00", align 1
@.str.74 = private unnamed_addr constant [6 x i8] c"Lo-Fi\00", align 1
@.str.75 = private unnamed_addr constant [7 x i8] c"Tribal\00", align 1
@.str.76 = private unnamed_addr constant [10 x i8] c"Acid Punk\00", align 1
@.str.77 = private unnamed_addr constant [10 x i8] c"Acid Jazz\00", align 1
@.str.78 = private unnamed_addr constant [6 x i8] c"Polka\00", align 1
@.str.79 = private unnamed_addr constant [6 x i8] c"Retro\00", align 1
@.str.80 = private unnamed_addr constant [8 x i8] c"Musical\00", align 1
@.str.81 = private unnamed_addr constant [12 x i8] c"Rock & Roll\00", align 1
@.str.82 = private unnamed_addr constant [10 x i8] c"Hard Rock\00", align 1
@.str.83 = private unnamed_addr constant [5 x i8] c"Folk\00", align 1
@.str.84 = private unnamed_addr constant [10 x i8] c"Folk/Rock\00", align 1
@.str.85 = private unnamed_addr constant [14 x i8] c"National Folk\00", align 1
@.str.86 = private unnamed_addr constant [6 x i8] c"Swing\00", align 1
@.str.87 = private unnamed_addr constant [12 x i8] c"Fast-Fusion\00", align 1
@.str.88 = private unnamed_addr constant [6 x i8] c"Bebob\00", align 1
@.str.89 = private unnamed_addr constant [6 x i8] c"Latin\00", align 1
@.str.90 = private unnamed_addr constant [8 x i8] c"Revival\00", align 1
@.str.91 = private unnamed_addr constant [7 x i8] c"Celtic\00", align 1
@.str.92 = private unnamed_addr constant [10 x i8] c"Bluegrass\00", align 1
@.str.93 = private unnamed_addr constant [11 x i8] c"Avantgarde\00", align 1
@.str.94 = private unnamed_addr constant [12 x i8] c"Gothic Rock\00", align 1
@.str.95 = private unnamed_addr constant [17 x i8] c"Progressive Rock\00", align 1
@.str.96 = private unnamed_addr constant [17 x i8] c"Psychedelic Rock\00", align 1
@.str.97 = private unnamed_addr constant [15 x i8] c"Symphonic Rock\00", align 1
@.str.98 = private unnamed_addr constant [10 x i8] c"Slow Rock\00", align 1
@.str.99 = private unnamed_addr constant [9 x i8] c"Big Band\00", align 1
@.str.100 = private unnamed_addr constant [7 x i8] c"Chorus\00", align 1
@.str.101 = private unnamed_addr constant [15 x i8] c"Easy Listening\00", align 1
@.str.102 = private unnamed_addr constant [9 x i8] c"Acoustic\00", align 1
@.str.103 = private unnamed_addr constant [7 x i8] c"Humour\00", align 1
@.str.104 = private unnamed_addr constant [7 x i8] c"Speech\00", align 1
@.str.105 = private unnamed_addr constant [8 x i8] c"Chanson\00", align 1
@.str.106 = private unnamed_addr constant [6 x i8] c"Opera\00", align 1
@.str.107 = private unnamed_addr constant [14 x i8] c"Chamber Music\00", align 1
@.str.108 = private unnamed_addr constant [7 x i8] c"Sonata\00", align 1
@.str.109 = private unnamed_addr constant [9 x i8] c"Symphony\00", align 1
@.str.110 = private unnamed_addr constant [11 x i8] c"Booty Bass\00", align 1
@.str.111 = private unnamed_addr constant [7 x i8] c"Primus\00", align 1
@.str.112 = private unnamed_addr constant [12 x i8] c"Porn Groove\00", align 1
@.str.113 = private unnamed_addr constant [7 x i8] c"Satire\00", align 1
@.str.114 = private unnamed_addr constant [9 x i8] c"Slow Jam\00", align 1
@.str.115 = private unnamed_addr constant [5 x i8] c"Club\00", align 1
@.str.116 = private unnamed_addr constant [6 x i8] c"Tango\00", align 1
@.str.117 = private unnamed_addr constant [6 x i8] c"Samba\00", align 1
@.str.118 = private unnamed_addr constant [9 x i8] c"Folklore\00", align 1
@.str.119 = private unnamed_addr constant [7 x i8] c"Ballad\00", align 1
@.str.120 = private unnamed_addr constant [13 x i8] c"Power Ballad\00", align 1
@.str.121 = private unnamed_addr constant [14 x i8] c"Rhythmic Soul\00", align 1
@.str.122 = private unnamed_addr constant [10 x i8] c"Freestyle\00", align 1
@.str.123 = private unnamed_addr constant [5 x i8] c"Duet\00", align 1
@.str.124 = private unnamed_addr constant [10 x i8] c"Punk Rock\00", align 1
@.str.125 = private unnamed_addr constant [10 x i8] c"Drum Solo\00", align 1
@.str.126 = private unnamed_addr constant [10 x i8] c"A capella\00", align 1
@.str.127 = private unnamed_addr constant [11 x i8] c"Euro-House\00", align 1
@.str.128 = private unnamed_addr constant [11 x i8] c"Dance Hall\00", align 1
@.str.129 = private unnamed_addr constant [4 x i8] c"Goa\00", align 1
@.str.130 = private unnamed_addr constant [12 x i8] c"Drum & Bass\00", align 1
@.str.131 = private unnamed_addr constant [11 x i8] c"Club House\00", align 1
@.str.132 = private unnamed_addr constant [9 x i8] c"Hardcore\00", align 1
@.str.133 = private unnamed_addr constant [7 x i8] c"Terror\00", align 1
@.str.134 = private unnamed_addr constant [6 x i8] c"Indie\00", align 1
@.str.135 = private unnamed_addr constant [8 x i8] c"BritPop\00", align 1
@.str.136 = private unnamed_addr constant [10 x i8] c"NegerPunk\00", align 1
@.str.137 = private unnamed_addr constant [11 x i8] c"Polsk Punk\00", align 1
@.str.138 = private unnamed_addr constant [5 x i8] c"Beat\00", align 1
@.str.139 = private unnamed_addr constant [18 x i8] c"Christian Gangsta\00", align 1
@.str.140 = private unnamed_addr constant [12 x i8] c"Heavy Metal\00", align 1
@.str.141 = private unnamed_addr constant [12 x i8] c"Black Metal\00", align 1
@.str.142 = private unnamed_addr constant [10 x i8] c"Crossover\00", align 1
@.str.143 = private unnamed_addr constant [15 x i8] c"Contemporary C\00", align 1
@.str.144 = private unnamed_addr constant [15 x i8] c"Christian Rock\00", align 1
@.str.145 = private unnamed_addr constant [9 x i8] c"Merengue\00", align 1
@.str.146 = private unnamed_addr constant [6 x i8] c"Salsa\00", align 1
@.str.147 = private unnamed_addr constant [13 x i8] c"Thrash Metal\00", align 1
@.str.148 = private unnamed_addr constant [6 x i8] c"Anime\00", align 1
@.str.149 = private unnamed_addr constant [5 x i8] c"JPop\00", align 1
@.str.150 = private unnamed_addr constant [9 x i8] c"SynthPop\00", align 1
@.str.151 = private unnamed_addr constant [19 x i8] c"To less out space\0A\00", align 1
@.str.1.154 = private unnamed_addr constant [22 x i8] c"Can't step back %ld!\0A\00", align 1
@.str.2.152 = private unnamed_addr constant [16 x i8] c"Out of memory!\0A\00", align 1
@.str.3.153 = private unnamed_addr constant [14 x i8] c"Fatal error!\0A\00", align 1
@frameData = internal global ptr null, align 8
@frameResults = internal global ptr null, align 8
@PartHoldersInitialized = internal global i32 0, align 4
@bs = internal unnamed_addr global ptr null, align 8
@headerPH = internal global ptr null, align 8
@frameSIPH = internal global ptr null, align 8
@channelSIPH = internal global [2 x ptr] zeroinitializer, align 16
@spectrumSIPH = internal global [2 x [2 x ptr]] zeroinitializer, align 16
@scaleFactorsPH = internal global [2 x [2 x ptr]] zeroinitializer, align 16
@codedDataPH = internal global [2 x [2 x ptr]] zeroinitializer, align 16
@userSpectrumPH = internal global [2 x [2 x ptr]] zeroinitializer, align 16
@userFrameDataPH = internal global ptr null, align 8
@slen1_tab = internal unnamed_addr constant [16 x i32] [i32 0, i32 0, i32 0, i32 0, i32 3, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 4, i32 4], align 16
@slen2_tab = internal unnamed_addr constant [16 x i32] [i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 1, i32 2, i32 3, i32 1, i32 2, i32 3, i32 2, i32 3], align 16
@.str.157 = private unnamed_addr constant [35 x i8] c"opps - adding stuffing bits = %i.\0A\00", align 1
@.str.1.158 = private unnamed_addr constant [27 x i8] c"this should not happen...\0A\00", align 1
@crc = internal unnamed_addr global i32 0, align 4
@bs.159 = internal global %struct.bit_stream_struc zeroinitializer, align 8
@l3_side = internal global %struct.III_side_info_t zeroinitializer, align 8
@.str.160 = private unnamed_addr constant [65 x i8] c"Warning: highpass filter disabled.  highpass frequency to small\0A\00", align 1
@lame_print_config.mode_names = internal unnamed_addr constant [4 x ptr] [ptr @.str.1.172, ptr @.str.2.173, ptr @.str.3.174, ptr @.str.4.175], align 16
@.str.1.172 = private unnamed_addr constant [7 x i8] c"stereo\00", align 1
@.str.2.173 = private unnamed_addr constant [9 x i8] c"j-stereo\00", align 1
@.str.3.174 = private unnamed_addr constant [8 x i8] c"dual-ch\00", align 1
@.str.4.175 = private unnamed_addr constant [10 x i8] c"single-ch\00", align 1
@.str.5.161 = private unnamed_addr constant [68 x i8] c"Autoconverting from stereo to mono. Setting encoding to mono mode.\0A\00", align 1
@.str.6.162 = private unnamed_addr constant [40 x i8] c"Resampling:  input=%ikHz  output=%ikHz\0A\00", align 1
@.str.7.163 = private unnamed_addr constant [70 x i8] c"Using polyphase highpass filter, transition band: %.0f Hz -  %.0f Hz\0A\00", align 1
@.str.8.164 = private unnamed_addr constant [70 x i8] c"Using polyphase lowpass filter,  transition band:  %.0f Hz - %.0f Hz\0A\00", align 1
@.str.9.165 = private unnamed_addr constant [15 x i8] c"Analyzing %s \0A\00", align 1
@.str.10.169 = private unnamed_addr constant [19 x i8] c"Encoding %s to %s\0A\00", align 1
@.str.11.166 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.12.167 = private unnamed_addr constant [6 x i8] c"stdin\00", align 1
@.str.13.168 = private unnamed_addr constant [7 x i8] c"stdout\00", align 1
@.str.14.170 = private unnamed_addr constant [59 x i8] c"Encoding as %.1fkHz VBR(q=%i) %s MPEG%i LayerIII  qval=%i\0A\00", align 1
@.str.15.171 = private unnamed_addr constant [67 x i8] c"Encoding as %.1f kHz %d kbps %s MPEG%i LayerIII (%4.1fx)  qval=%i\0A\00", align 1
@lame_encode_frame.frameBits = internal unnamed_addr global i64 0, align 8
@lame_encode_frame.frac_SpF = internal unnamed_addr global double 0.000000e+00, align 8
@lame_encode_frame.slot_lag = internal unnamed_addr global double 0.000000e+00, align 8
@lame_encode_frame.sentBits = internal unnamed_addr global i64 0, align 8
@lame_encode_frame.ms_ratio = internal global [2 x double] zeroinitializer, align 16
@lame_encode_frame.ms_ener_ratio = internal global [2 x double] zeroinitializer, align 16
@.str.16.176 = private unnamed_addr constant [36 x i8] c"Sent %ld bits = %ld slots plus %ld\0A\00", align 1
@fill_buffer_resample.itime = internal unnamed_addr global [2 x double] zeroinitializer, align 16
@fill_buffer_resample.inbuf_old = internal unnamed_addr global [2 x [5 x i16]] zeroinitializer, align 16
@fill_buffer_resample.init = internal unnamed_addr global [2 x i32] zeroinitializer, align 4
@lame_encode_buffer.frame_buffered = internal unnamed_addr global i1 false, align 4
@mfbuf = internal global [2 x [3056 x i16]] zeroinitializer, align 16
@mf_samples_to_encode = internal unnamed_addr global i32 0, align 4
@mf_size = internal unnamed_addr global i32 0, align 4
@bandInfo = internal global [9 x %struct.bandInfoStruct] [%struct.bandInfoStruct { [23 x i16] [i16 0, i16 4, i16 8, i16 12, i16 16, i16 20, i16 24, i16 30, i16 36, i16 44, i16 52, i16 62, i16 74, i16 90, i16 110, i16 134, i16 162, i16 196, i16 238, i16 288, i16 342, i16 418, i16 576], [22 x i16] [i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 6, i16 6, i16 8, i16 8, i16 10, i16 12, i16 16, i16 20, i16 24, i16 28, i16 34, i16 42, i16 50, i16 54, i16 76, i16 158], [14 x i16] [i16 0, i16 12, i16 24, i16 36, i16 48, i16 66, i16 90, i16 120, i16 156, i16 198, i16 252, i16 318, i16 408, i16 576], [13 x i16] [i16 4, i16 4, i16 4, i16 4, i16 6, i16 8, i16 10, i16 12, i16 14, i16 18, i16 22, i16 30, i16 56] }, %struct.bandInfoStruct { [23 x i16] [i16 0, i16 4, i16 8, i16 12, i16 16, i16 20, i16 24, i16 30, i16 36, i16 42, i16 50, i16 60, i16 72, i16 88, i16 106, i16 128, i16 156, i16 190, i16 230, i16 276, i16 330, i16 384, i16 576], [22 x i16] [i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 6, i16 6, i16 6, i16 8, i16 10, i16 12, i16 16, i16 18, i16 22, i16 28, i16 34, i16 40, i16 46, i16 54, i16 54, i16 192], [14 x i16] [i16 0, i16 12, i16 24, i16 36, i16 48, i16 66, i16 84, i16 114, i16 150, i16 192, i16 240, i16 300, i16 378, i16 576], [13 x i16] [i16 4, i16 4, i16 4, i16 4, i16 6, i16 6, i16 10, i16 12, i16 14, i16 16, i16 20, i16 26, i16 66] }, %struct.bandInfoStruct { [23 x i16] [i16 0, i16 4, i16 8, i16 12, i16 16, i16 20, i16 24, i16 30, i16 36, i16 44, i16 54, i16 66, i16 82, i16 102, i16 126, i16 156, i16 194, i16 240, i16 296, i16 364, i16 448, i16 550, i16 576], [22 x i16] [i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 6, i16 6, i16 8, i16 10, i16 12, i16 16, i16 20, i16 24, i16 30, i16 38, i16 46, i16 56, i16 68, i16 84, i16 102, i16 26], [14 x i16] [i16 0, i16 12, i16 24, i16 36, i16 48, i16 66, i16 90, i16 126, i16 174, i16 234, i16 312, i16 414, i16 540, i16 576], [13 x i16] [i16 4, i16 4, i16 4, i16 4, i16 6, i16 8, i16 12, i16 16, i16 20, i16 26, i16 34, i16 42, i16 12] }, %struct.bandInfoStruct { [23 x i16] [i16 0, i16 6, i16 12, i16 18, i16 24, i16 30, i16 36, i16 44, i16 54, i16 66, i16 80, i16 96, i16 116, i16 140, i16 168, i16 200, i16 238, i16 284, i16 336, i16 396, i16 464, i16 522, i16 576], [22 x i16] [i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 8, i16 10, i16 12, i16 14, i16 16, i16 20, i16 24, i16 28, i16 32, i16 38, i16 46, i16 52, i16 60, i16 68, i16 58, i16 54], [14 x i16] [i16 0, i16 12, i16 24, i16 36, i16 54, i16 72, i16 96, i16 126, i16 168, i16 222, i16 300, i16 396, i16 522, i16 576], [13 x i16] [i16 4, i16 4, i16 4, i16 6, i16 6, i16 8, i16 10, i16 14, i16 18, i16 26, i16 32, i16 42, i16 18] }, %struct.bandInfoStruct { [23 x i16] [i16 0, i16 6, i16 12, i16 18, i16 24, i16 30, i16 36, i16 44, i16 54, i16 66, i16 80, i16 96, i16 114, i16 136, i16 162, i16 194, i16 232, i16 278, i16 332, i16 394, i16 464, i16 540, i16 576], [22 x i16] [i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 8, i16 10, i16 12, i16 14, i16 16, i16 18, i16 22, i16 26, i16 32, i16 38, i16 46, i16 52, i16 64, i16 70, i16 76, i16 36], [14 x i16] [i16 0, i16 12, i16 24, i16 36, i16 54, i16 78, i16 108, i16 144, i16 186, i16 240, i16 312, i16 408, i16 540, i16 576], [13 x i16] [i16 4, i16 4, i16 4, i16 6, i16 8, i16 10, i16 12, i16 14, i16 18, i16 24, i16 32, i16 44, i16 12] }, %struct.bandInfoStruct { [23 x i16] [i16 0, i16 6, i16 12, i16 18, i16 24, i16 30, i16 36, i16 44, i16 54, i16 66, i16 80, i16 96, i16 116, i16 140, i16 168, i16 200, i16 238, i16 284, i16 336, i16 396, i16 464, i16 522, i16 576], [22 x i16] [i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 8, i16 10, i16 12, i16 14, i16 16, i16 20, i16 24, i16 28, i16 32, i16 38, i16 46, i16 52, i16 60, i16 68, i16 58, i16 54], [14 x i16] [i16 0, i16 12, i16 24, i16 36, i16 54, i16 78, i16 108, i16 144, i16 186, i16 240, i16 312, i16 402, i16 522, i16 576], [13 x i16] [i16 4, i16 4, i16 4, i16 6, i16 8, i16 10, i16 12, i16 14, i16 18, i16 24, i16 30, i16 40, i16 18] }, %struct.bandInfoStruct { [23 x i16] [i16 0, i16 6, i16 12, i16 18, i16 24, i16 30, i16 36, i16 44, i16 54, i16 66, i16 80, i16 96, i16 116, i16 140, i16 168, i16 200, i16 238, i16 284, i16 336, i16 396, i16 464, i16 522, i16 576], [22 x i16] [i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 8, i16 10, i16 12, i16 14, i16 16, i16 20, i16 24, i16 28, i16 32, i16 38, i16 46, i16 52, i16 60, i16 68, i16 58, i16 54], [14 x i16] [i16 0, i16 12, i16 24, i16 36, i16 54, i16 78, i16 108, i16 144, i16 186, i16 240, i16 312, i16 402, i16 522, i16 576], [13 x i16] [i16 4, i16 4, i16 4, i16 6, i16 8, i16 10, i16 12, i16 14, i16 18, i16 24, i16 30, i16 40, i16 18] }, %struct.bandInfoStruct { [23 x i16] [i16 0, i16 6, i16 12, i16 18, i16 24, i16 30, i16 36, i16 44, i16 54, i16 66, i16 80, i16 96, i16 116, i16 140, i16 168, i16 200, i16 238, i16 284, i16 336, i16 396, i16 464, i16 522, i16 576], [22 x i16] [i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 8, i16 10, i16 12, i16 14, i16 16, i16 20, i16 24, i16 28, i16 32, i16 38, i16 46, i16 52, i16 60, i16 68, i16 58, i16 54], [14 x i16] [i16 0, i16 12, i16 24, i16 36, i16 54, i16 78, i16 108, i16 144, i16 186, i16 240, i16 312, i16 402, i16 522, i16 576], [13 x i16] [i16 4, i16 4, i16 4, i16 6, i16 8, i16 10, i16 12, i16 14, i16 18, i16 24, i16 30, i16 40, i16 18] }, %struct.bandInfoStruct { [23 x i16] [i16 0, i16 12, i16 24, i16 36, i16 48, i16 60, i16 72, i16 88, i16 108, i16 132, i16 160, i16 192, i16 232, i16 280, i16 336, i16 400, i16 476, i16 566, i16 568, i16 570, i16 572, i16 574, i16 576], [22 x i16] [i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 16, i16 20, i16 24, i16 28, i16 32, i16 40, i16 48, i16 56, i16 64, i16 76, i16 90, i16 2, i16 2, i16 2, i16 2, i16 2], [14 x i16] [i16 0, i16 24, i16 48, i16 72, i16 108, i16 156, i16 216, i16 288, i16 372, i16 480, i16 486, i16 492, i16 498, i16 576], [13 x i16] [i16 8, i16 8, i16 8, i16 12, i16 16, i16 20, i16 24, i16 28, i16 36, i16 2, i16 2, i16 2, i16 26] }], align 16
@gainpow2 = internal global [378 x double] zeroinitializer, align 16
@ispow = internal unnamed_addr global [8207 x double] zeroinitializer, align 16
@init_layer3.Ci = internal unnamed_addr constant [8 x double] [double -6.000000e-01, double -5.350000e-01, double -3.300000e-01, double -1.850000e-01, double -9.500000e-02, double -4.100000e-02, double -1.420000e-02, double -3.700000e-03], align 16
@aa_cs = internal unnamed_addr global [8 x double] zeroinitializer, align 16
@aa_ca = internal unnamed_addr global [8 x double] zeroinitializer, align 16
@win = internal global [4 x [36 x double]] zeroinitializer, align 16
@COS9 = internal unnamed_addr global [9 x double] zeroinitializer, align 16
@tfcos36 = internal unnamed_addr global [9 x double] zeroinitializer, align 16
@tfcos12 = internal unnamed_addr global [3 x double] zeroinitializer, align 16
@COS6_1 = internal unnamed_addr global double 0.000000e+00, align 8
@COS6_2 = internal unnamed_addr global double 0.000000e+00, align 8
@init_layer3.len = internal unnamed_addr constant [4 x i32] [i32 36, i32 36, i32 12, i32 36], align 16
@win1 = internal global [4 x [36 x double]] zeroinitializer, align 16
@tan1_1 = internal unnamed_addr global [16 x double] zeroinitializer, align 16
@tan2_1 = internal unnamed_addr global [16 x double] zeroinitializer, align 16
@tan1_2 = internal unnamed_addr global [16 x double] zeroinitializer, align 16
@tan2_2 = internal unnamed_addr global [16 x double] zeroinitializer, align 16
@pow1_1 = internal unnamed_addr global [2 x [16 x double]] zeroinitializer, align 16
@pow2_1 = internal unnamed_addr global [2 x [16 x double]] zeroinitializer, align 16
@pow1_2 = internal unnamed_addr global [2 x [16 x double]] zeroinitializer, align 16
@pow2_2 = internal unnamed_addr global [2 x [16 x double]] zeroinitializer, align 16
@mapbuf0 = internal global [9 x [152 x i32]] zeroinitializer, align 16
@map = internal unnamed_addr global [9 x [3 x ptr]] zeroinitializer, align 16
@mapend = internal unnamed_addr global [9 x [3 x ptr]] zeroinitializer, align 16
@mapbuf1 = internal global [9 x [156 x i32]] zeroinitializer, align 16
@mapbuf2 = internal global [9 x [44 x i32]] zeroinitializer, align 16
@longLimit = internal global [9 x [23 x i32]] zeroinitializer, align 16
@shortLimit = internal global [9 x [14 x i32]] zeroinitializer, align 16
@i_slen2 = internal unnamed_addr global [256 x i32] zeroinitializer, align 16
@n_slen2 = internal unnamed_addr global [512 x i32] zeroinitializer, align 16
@do_layer3.hybridIn = internal global [2 x [32 x [18 x double]]] zeroinitializer, align 16
@do_layer3.hybridOut = internal global [2 x [18 x [32 x double]]] zeroinitializer, align 16
@.str.181 = private unnamed_addr constant [23 x i8] c"big_values too large!\0A\00", align 1
@.str.1.182 = private unnamed_addr constant [55 x i8] c"Blocktype == 0 and window-switching == 1 not allowed.\0A\00", align 1
@wordpointer = internal global ptr null, align 8
@bitindex = internal global i32 0, align 4
@III_get_scale_factors_2.stab = internal unnamed_addr constant [3 x [6 x [4 x i8]]] [[6 x [4 x i8]] [[4 x i8] c"\06\05\05\05", [4 x i8] c"\06\05\07\03", [4 x i8] c"\0B\0A\00\00", [4 x i8] c"\07\07\07\00", [4 x i8] c"\06\06\06\03", [4 x i8] c"\08\08\05\00"], [6 x [4 x i8]] [[4 x i8] c"\09\09\09\09", [4 x i8] c"\09\09\0C\06", [4 x i8] c"\12\12\00\00", [4 x i8] c"\0C\0C\0C\00", [4 x i8] c"\0C\09\09\06", [4 x i8] c"\0F\0C\09\00"], [6 x [4 x i8]] [[4 x i8] c"\06\09\09\09", [4 x i8] c"\06\09\0C\06", [4 x i8] c"\0F\12\00\00", [4 x i8] c"\06\0F\0C\00", [4 x i8] c"\06\0C\09\06", [4 x i8] c"\06\12\09\00"]], align 16
@III_get_scale_factors_1.slen = internal unnamed_addr constant [2 x [16 x i8]] [[16 x i8] c"\00\00\00\00\03\01\01\01\02\02\02\03\03\03\04\04", [16 x i8] c"\00\01\02\03\00\01\02\03\01\02\03\01\02\03\02\03"], align 16
@ht.183 = internal unnamed_addr constant [32 x %struct.BF_BitstreamPart] [%struct.BF_BitstreamPart { i32 0, ptr @tab0 }, %struct.BF_BitstreamPart { i32 0, ptr @tab1 }, %struct.BF_BitstreamPart { i32 0, ptr @tab2 }, %struct.BF_BitstreamPart { i32 0, ptr @tab3 }, %struct.BF_BitstreamPart { i32 0, ptr @tab0 }, %struct.BF_BitstreamPart { i32 0, ptr @tab5 }, %struct.BF_BitstreamPart { i32 0, ptr @tab6 }, %struct.BF_BitstreamPart { i32 0, ptr @tab7 }, %struct.BF_BitstreamPart { i32 0, ptr @tab8 }, %struct.BF_BitstreamPart { i32 0, ptr @tab9 }, %struct.BF_BitstreamPart { i32 0, ptr @tab10 }, %struct.BF_BitstreamPart { i32 0, ptr @tab11 }, %struct.BF_BitstreamPart { i32 0, ptr @tab12 }, %struct.BF_BitstreamPart { i32 0, ptr @tab13 }, %struct.BF_BitstreamPart { i32 0, ptr @tab0 }, %struct.BF_BitstreamPart { i32 0, ptr @tab15 }, %struct.BF_BitstreamPart { i32 1, ptr @tab16 }, %struct.BF_BitstreamPart { i32 2, ptr @tab16 }, %struct.BF_BitstreamPart { i32 3, ptr @tab16 }, %struct.BF_BitstreamPart { i32 4, ptr @tab16 }, %struct.BF_BitstreamPart { i32 6, ptr @tab16 }, %struct.BF_BitstreamPart { i32 8, ptr @tab16 }, %struct.BF_BitstreamPart { i32 10, ptr @tab16 }, %struct.BF_BitstreamPart { i32 13, ptr @tab16 }, %struct.BF_BitstreamPart { i32 4, ptr @tab24 }, %struct.BF_BitstreamPart { i32 5, ptr @tab24 }, %struct.BF_BitstreamPart { i32 6, ptr @tab24 }, %struct.BF_BitstreamPart { i32 7, ptr @tab24 }, %struct.BF_BitstreamPart { i32 8, ptr @tab24 }, %struct.BF_BitstreamPart { i32 9, ptr @tab24 }, %struct.BF_BitstreamPart { i32 11, ptr @tab24 }, %struct.BF_BitstreamPart { i32 13, ptr @tab24 }], align 16
@htc = internal unnamed_addr constant [2 x %struct.BF_BitstreamPart] [%struct.BF_BitstreamPart { i32 0, ptr @tab_c0 }, %struct.BF_BitstreamPart { i32 0, ptr @tab_c1 }], align 16
@pretab1 = internal unnamed_addr constant [22 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 3, i32 2, i32 0], align 16
@pretab2 = internal unnamed_addr constant [22 x i32] zeroinitializer, align 16
@.str.2.184 = private unnamed_addr constant [41 x i8] c"mpg123: Can't rewind stream by %d bits!\0A\00", align 1
@tab0 = internal global [1 x i16] zeroinitializer, align 2
@tab1 = internal global [7 x i16] [i16 -5, i16 -3, i16 -1, i16 17, i16 1, i16 16, i16 0], align 2
@tab2 = internal global [17 x i16] [i16 -15, i16 -11, i16 -9, i16 -5, i16 -3, i16 -1, i16 34, i16 2, i16 18, i16 -1, i16 33, i16 32, i16 17, i16 -1, i16 1, i16 16, i16 0], align 16
@tab3 = internal global [17 x i16] [i16 -13, i16 -11, i16 -9, i16 -5, i16 -3, i16 -1, i16 34, i16 2, i16 18, i16 -1, i16 33, i16 32, i16 16, i16 17, i16 -1, i16 1, i16 0], align 16
@tab5 = internal global [31 x i16] [i16 -29, i16 -25, i16 -23, i16 -15, i16 -7, i16 -5, i16 -3, i16 -1, i16 51, i16 35, i16 50, i16 49, i16 -3, i16 -1, i16 19, i16 3, i16 -1, i16 48, i16 34, i16 -3, i16 -1, i16 18, i16 33, i16 -1, i16 2, i16 32, i16 17, i16 -1, i16 1, i16 16, i16 0], align 16
@tab6 = internal global [31 x i16] [i16 -25, i16 -19, i16 -13, i16 -9, i16 -5, i16 -3, i16 -1, i16 51, i16 3, i16 35, i16 -1, i16 50, i16 48, i16 -1, i16 19, i16 49, i16 -3, i16 -1, i16 34, i16 2, i16 18, i16 -3, i16 -1, i16 33, i16 32, i16 1, i16 -1, i16 17, i16 -1, i16 16, i16 0], align 16
@tab7 = internal global [71 x i16] [i16 -69, i16 -65, i16 -57, i16 -39, i16 -29, i16 -17, i16 -11, i16 -7, i16 -3, i16 -1, i16 85, i16 69, i16 -1, i16 84, i16 83, i16 -1, i16 53, i16 68, i16 -3, i16 -1, i16 37, i16 82, i16 21, i16 -5, i16 -1, i16 81, i16 -1, i16 5, i16 52, i16 -1, i16 80, i16 -1, i16 67, i16 51, i16 -5, i16 -3, i16 -1, i16 36, i16 66, i16 20, i16 -1, i16 65, i16 64, i16 -11, i16 -7, i16 -3, i16 -1, i16 4, i16 35, i16 -1, i16 50, i16 3, i16 -1, i16 19, i16 49, i16 -3, i16 -1, i16 48, i16 34, i16 18, i16 -5, i16 -1, i16 33, i16 -1, i16 2, i16 32, i16 17, i16 -1, i16 1, i16 16, i16 0], align 16
@tab8 = internal global [71 x i16] [i16 -65, i16 -63, i16 -59, i16 -45, i16 -31, i16 -19, i16 -13, i16 -7, i16 -5, i16 -3, i16 -1, i16 85, i16 84, i16 69, i16 83, i16 -3, i16 -1, i16 53, i16 68, i16 37, i16 -3, i16 -1, i16 82, i16 5, i16 21, i16 -5, i16 -1, i16 81, i16 -1, i16 52, i16 67, i16 -3, i16 -1, i16 80, i16 51, i16 36, i16 -5, i16 -3, i16 -1, i16 66, i16 20, i16 65, i16 -3, i16 -1, i16 4, i16 64, i16 -1, i16 35, i16 50, i16 -9, i16 -7, i16 -3, i16 -1, i16 19, i16 49, i16 -1, i16 3, i16 48, i16 34, i16 -1, i16 2, i16 32, i16 -1, i16 18, i16 33, i16 17, i16 -3, i16 -1, i16 1, i16 16, i16 0], align 16
@tab9 = internal global [71 x i16] [i16 -63, i16 -53, i16 -41, i16 -29, i16 -19, i16 -11, i16 -5, i16 -3, i16 -1, i16 85, i16 69, i16 53, i16 -1, i16 83, i16 -1, i16 84, i16 5, i16 -3, i16 -1, i16 68, i16 37, i16 -1, i16 82, i16 21, i16 -3, i16 -1, i16 81, i16 52, i16 -1, i16 67, i16 -1, i16 80, i16 4, i16 -7, i16 -3, i16 -1, i16 36, i16 66, i16 -1, i16 51, i16 64, i16 -1, i16 20, i16 65, i16 -5, i16 -3, i16 -1, i16 35, i16 50, i16 19, i16 -1, i16 49, i16 -1, i16 3, i16 48, i16 -5, i16 -3, i16 -1, i16 34, i16 2, i16 18, i16 -1, i16 33, i16 32, i16 -3, i16 -1, i16 17, i16 1, i16 -1, i16 16, i16 0], align 16
@tab10 = internal global [127 x i16] [i16 -125, i16 -121, i16 -111, i16 -83, i16 -55, i16 -35, i16 -21, i16 -13, i16 -7, i16 -3, i16 -1, i16 119, i16 103, i16 -1, i16 118, i16 87, i16 -3, i16 -1, i16 117, i16 102, i16 71, i16 -3, i16 -1, i16 116, i16 86, i16 -1, i16 101, i16 55, i16 -9, i16 -3, i16 -1, i16 115, i16 70, i16 -3, i16 -1, i16 85, i16 84, i16 99, i16 -1, i16 39, i16 114, i16 -11, i16 -5, i16 -3, i16 -1, i16 100, i16 7, i16 112, i16 -1, i16 98, i16 -1, i16 69, i16 53, i16 -5, i16 -1, i16 6, i16 -1, i16 83, i16 68, i16 23, i16 -17, i16 -5, i16 -1, i16 113, i16 -1, i16 54, i16 38, i16 -5, i16 -3, i16 -1, i16 37, i16 82, i16 21, i16 -1, i16 81, i16 -1, i16 52, i16 67, i16 -3, i16 -1, i16 22, i16 97, i16 -1, i16 96, i16 -1, i16 5, i16 80, i16 -19, i16 -11, i16 -7, i16 -3, i16 -1, i16 36, i16 66, i16 -1, i16 51, i16 4, i16 -1, i16 20, i16 65, i16 -3, i16 -1, i16 64, i16 35, i16 -1, i16 50, i16 3, i16 -3, i16 -1, i16 19, i16 49, i16 -1, i16 48, i16 34, i16 -7, i16 -3, i16 -1, i16 18, i16 33, i16 -1, i16 2, i16 32, i16 17, i16 -1, i16 1, i16 16, i16 0], align 16
@tab11 = internal global [127 x i16] [i16 -121, i16 -113, i16 -89, i16 -59, i16 -43, i16 -27, i16 -17, i16 -7, i16 -3, i16 -1, i16 119, i16 103, i16 -1, i16 118, i16 117, i16 -3, i16 -1, i16 102, i16 71, i16 -1, i16 116, i16 -1, i16 87, i16 85, i16 -5, i16 -3, i16 -1, i16 86, i16 101, i16 55, i16 -1, i16 115, i16 70, i16 -9, i16 -7, i16 -3, i16 -1, i16 69, i16 84, i16 -1, i16 53, i16 83, i16 39, i16 -1, i16 114, i16 -1, i16 100, i16 7, i16 -5, i16 -1, i16 113, i16 -1, i16 23, i16 112, i16 -3, i16 -1, i16 54, i16 99, i16 -1, i16 96, i16 -1, i16 68, i16 37, i16 -13, i16 -7, i16 -5, i16 -3, i16 -1, i16 82, i16 5, i16 21, i16 98, i16 -3, i16 -1, i16 38, i16 6, i16 22, i16 -5, i16 -1, i16 97, i16 -1, i16 81, i16 52, i16 -5, i16 -1, i16 80, i16 -1, i16 67, i16 51, i16 -1, i16 36, i16 66, i16 -15, i16 -11, i16 -7, i16 -3, i16 -1, i16 20, i16 65, i16 -1, i16 4, i16 64, i16 -1, i16 35, i16 50, i16 -1, i16 19, i16 49, i16 -5, i16 -3, i16 -1, i16 3, i16 48, i16 34, i16 33, i16 -5, i16 -1, i16 18, i16 -1, i16 2, i16 32, i16 17, i16 -3, i16 -1, i16 1, i16 16, i16 0], align 16
@tab12 = internal global [127 x i16] [i16 -115, i16 -99, i16 -73, i16 -45, i16 -27, i16 -17, i16 -9, i16 -5, i16 -3, i16 -1, i16 119, i16 103, i16 118, i16 -1, i16 87, i16 117, i16 -3, i16 -1, i16 102, i16 71, i16 -1, i16 116, i16 101, i16 -3, i16 -1, i16 86, i16 55, i16 -3, i16 -1, i16 115, i16 85, i16 39, i16 -7, i16 -3, i16 -1, i16 114, i16 70, i16 -1, i16 100, i16 23, i16 -5, i16 -1, i16 113, i16 -1, i16 7, i16 112, i16 -1, i16 54, i16 99, i16 -13, i16 -9, i16 -3, i16 -1, i16 69, i16 84, i16 -1, i16 68, i16 -1, i16 6, i16 5, i16 -1, i16 38, i16 98, i16 -5, i16 -1, i16 97, i16 -1, i16 22, i16 96, i16 -3, i16 -1, i16 53, i16 83, i16 -1, i16 37, i16 82, i16 -17, i16 -7, i16 -3, i16 -1, i16 21, i16 81, i16 -1, i16 52, i16 67, i16 -5, i16 -3, i16 -1, i16 80, i16 4, i16 36, i16 -1, i16 66, i16 20, i16 -3, i16 -1, i16 51, i16 65, i16 -1, i16 35, i16 50, i16 -11, i16 -7, i16 -5, i16 -3, i16 -1, i16 64, i16 3, i16 48, i16 19, i16 -1, i16 49, i16 34, i16 -1, i16 18, i16 33, i16 -7, i16 -5, i16 -3, i16 -1, i16 2, i16 32, i16 0, i16 17, i16 -1, i16 1, i16 16], align 16
@tab13 = internal global [511 x i16] [i16 -509, i16 -503, i16 -475, i16 -405, i16 -333, i16 -265, i16 -205, i16 -153, i16 -115, i16 -83, i16 -53, i16 -35, i16 -21, i16 -13, i16 -9, i16 -7, i16 -5, i16 -3, i16 -1, i16 254, i16 252, i16 253, i16 237, i16 255, i16 -1, i16 239, i16 223, i16 -3, i16 -1, i16 238, i16 207, i16 -1, i16 222, i16 191, i16 -9, i16 -3, i16 -1, i16 251, i16 206, i16 -1, i16 220, i16 -1, i16 175, i16 233, i16 -1, i16 236, i16 221, i16 -9, i16 -5, i16 -3, i16 -1, i16 250, i16 205, i16 190, i16 -1, i16 235, i16 159, i16 -3, i16 -1, i16 249, i16 234, i16 -1, i16 189, i16 219, i16 -17, i16 -9, i16 -3, i16 -1, i16 143, i16 248, i16 -1, i16 204, i16 -1, i16 174, i16 158, i16 -5, i16 -1, i16 142, i16 -1, i16 127, i16 126, i16 247, i16 -5, i16 -1, i16 218, i16 -1, i16 173, i16 188, i16 -3, i16 -1, i16 203, i16 246, i16 111, i16 -15, i16 -7, i16 -3, i16 -1, i16 232, i16 95, i16 -1, i16 157, i16 217, i16 -3, i16 -1, i16 245, i16 231, i16 -1, i16 172, i16 187, i16 -9, i16 -3, i16 -1, i16 79, i16 244, i16 -3, i16 -1, i16 202, i16 230, i16 243, i16 -1, i16 63, i16 -1, i16 141, i16 216, i16 -21, i16 -9, i16 -3, i16 -1, i16 47, i16 242, i16 -3, i16 -1, i16 110, i16 156, i16 15, i16 -5, i16 -3, i16 -1, i16 201, i16 94, i16 171, i16 -3, i16 -1, i16 125, i16 215, i16 78, i16 -11, i16 -5, i16 -3, i16 -1, i16 200, i16 214, i16 62, i16 -1, i16 185, i16 -1, i16 155, i16 170, i16 -1, i16 31, i16 241, i16 -23, i16 -13, i16 -5, i16 -1, i16 240, i16 -1, i16 186, i16 229, i16 -3, i16 -1, i16 228, i16 140, i16 -1, i16 109, i16 227, i16 -5, i16 -1, i16 226, i16 -1, i16 46, i16 14, i16 -1, i16 30, i16 225, i16 -15, i16 -7, i16 -3, i16 -1, i16 224, i16 93, i16 -1, i16 213, i16 124, i16 -3, i16 -1, i16 199, i16 77, i16 -1, i16 139, i16 184, i16 -7, i16 -3, i16 -1, i16 212, i16 154, i16 -1, i16 169, i16 108, i16 -1, i16 198, i16 61, i16 -37, i16 -21, i16 -9, i16 -5, i16 -3, i16 -1, i16 211, i16 123, i16 45, i16 -1, i16 210, i16 29, i16 -5, i16 -1, i16 183, i16 -1, i16 92, i16 197, i16 -3, i16 -1, i16 153, i16 122, i16 195, i16 -7, i16 -5, i16 -3, i16 -1, i16 167, i16 151, i16 75, i16 209, i16 -3, i16 -1, i16 13, i16 208, i16 -1, i16 138, i16 168, i16 -11, i16 -7, i16 -3, i16 -1, i16 76, i16 196, i16 -1, i16 107, i16 182, i16 -1, i16 60, i16 44, i16 -3, i16 -1, i16 194, i16 91, i16 -3, i16 -1, i16 181, i16 137, i16 28, i16 -43, i16 -23, i16 -11, i16 -5, i16 -1, i16 193, i16 -1, i16 152, i16 12, i16 -1, i16 192, i16 -1, i16 180, i16 106, i16 -5, i16 -3, i16 -1, i16 166, i16 121, i16 59, i16 -1, i16 179, i16 -1, i16 136, i16 90, i16 -11, i16 -5, i16 -1, i16 43, i16 -1, i16 165, i16 105, i16 -1, i16 164, i16 -1, i16 120, i16 135, i16 -5, i16 -1, i16 148, i16 -1, i16 119, i16 118, i16 178, i16 -11, i16 -3, i16 -1, i16 27, i16 177, i16 -3, i16 -1, i16 11, i16 176, i16 -1, i16 150, i16 74, i16 -7, i16 -3, i16 -1, i16 58, i16 163, i16 -1, i16 89, i16 149, i16 -1, i16 42, i16 162, i16 -47, i16 -23, i16 -9, i16 -3, i16 -1, i16 26, i16 161, i16 -3, i16 -1, i16 10, i16 104, i16 160, i16 -5, i16 -3, i16 -1, i16 134, i16 73, i16 147, i16 -3, i16 -1, i16 57, i16 88, i16 -1, i16 133, i16 103, i16 -9, i16 -3, i16 -1, i16 41, i16 146, i16 -3, i16 -1, i16 87, i16 117, i16 56, i16 -5, i16 -1, i16 131, i16 -1, i16 102, i16 71, i16 -3, i16 -1, i16 116, i16 86, i16 -1, i16 101, i16 115, i16 -11, i16 -3, i16 -1, i16 25, i16 145, i16 -3, i16 -1, i16 9, i16 144, i16 -1, i16 72, i16 132, i16 -7, i16 -5, i16 -1, i16 114, i16 -1, i16 70, i16 100, i16 40, i16 -1, i16 130, i16 24, i16 -41, i16 -27, i16 -11, i16 -5, i16 -3, i16 -1, i16 55, i16 39, i16 23, i16 -1, i16 113, i16 -1, i16 85, i16 7, i16 -7, i16 -3, i16 -1, i16 112, i16 54, i16 -1, i16 99, i16 69, i16 -3, i16 -1, i16 84, i16 38, i16 -1, i16 98, i16 53, i16 -5, i16 -1, i16 129, i16 -1, i16 8, i16 128, i16 -3, i16 -1, i16 22, i16 97, i16 -1, i16 6, i16 96, i16 -13, i16 -9, i16 -5, i16 -3, i16 -1, i16 83, i16 68, i16 37, i16 -1, i16 82, i16 5, i16 -1, i16 21, i16 81, i16 -7, i16 -3, i16 -1, i16 52, i16 67, i16 -1, i16 80, i16 36, i16 -3, i16 -1, i16 66, i16 51, i16 20, i16 -19, i16 -11, i16 -5, i16 -1, i16 65, i16 -1, i16 4, i16 64, i16 -3, i16 -1, i16 35, i16 50, i16 19, i16 -3, i16 -1, i16 49, i16 3, i16 -1, i16 48, i16 34, i16 -3, i16 -1, i16 18, i16 33, i16 -1, i16 2, i16 32, i16 -3, i16 -1, i16 17, i16 1, i16 16, i16 0], align 16
@tab15 = internal global [511 x i16] [i16 -495, i16 -445, i16 -355, i16 -263, i16 -183, i16 -115, i16 -77, i16 -43, i16 -27, i16 -13, i16 -7, i16 -3, i16 -1, i16 255, i16 239, i16 -1, i16 254, i16 223, i16 -1, i16 238, i16 -1, i16 253, i16 207, i16 -7, i16 -3, i16 -1, i16 252, i16 222, i16 -1, i16 237, i16 191, i16 -1, i16 251, i16 -1, i16 206, i16 236, i16 -7, i16 -3, i16 -1, i16 221, i16 175, i16 -1, i16 250, i16 190, i16 -3, i16 -1, i16 235, i16 205, i16 -1, i16 220, i16 159, i16 -15, i16 -7, i16 -3, i16 -1, i16 249, i16 234, i16 -1, i16 189, i16 219, i16 -3, i16 -1, i16 143, i16 248, i16 -1, i16 204, i16 158, i16 -7, i16 -3, i16 -1, i16 233, i16 127, i16 -1, i16 247, i16 173, i16 -3, i16 -1, i16 218, i16 188, i16 -1, i16 111, i16 -1, i16 174, i16 15, i16 -19, i16 -11, i16 -3, i16 -1, i16 203, i16 246, i16 -3, i16 -1, i16 142, i16 232, i16 -1, i16 95, i16 157, i16 -3, i16 -1, i16 245, i16 126, i16 -1, i16 231, i16 172, i16 -9, i16 -3, i16 -1, i16 202, i16 187, i16 -3, i16 -1, i16 217, i16 141, i16 79, i16 -3, i16 -1, i16 244, i16 63, i16 -1, i16 243, i16 216, i16 -33, i16 -17, i16 -9, i16 -3, i16 -1, i16 230, i16 47, i16 -1, i16 242, i16 -1, i16 110, i16 240, i16 -3, i16 -1, i16 31, i16 241, i16 -1, i16 156, i16 201, i16 -7, i16 -3, i16 -1, i16 94, i16 171, i16 -1, i16 186, i16 229, i16 -3, i16 -1, i16 125, i16 215, i16 -1, i16 78, i16 228, i16 -15, i16 -7, i16 -3, i16 -1, i16 140, i16 200, i16 -1, i16 62, i16 109, i16 -3, i16 -1, i16 214, i16 227, i16 -1, i16 155, i16 185, i16 -7, i16 -3, i16 -1, i16 46, i16 170, i16 -1, i16 226, i16 30, i16 -5, i16 -1, i16 225, i16 -1, i16 14, i16 224, i16 -1, i16 93, i16 213, i16 -45, i16 -25, i16 -13, i16 -7, i16 -3, i16 -1, i16 124, i16 199, i16 -1, i16 77, i16 139, i16 -1, i16 212, i16 -1, i16 184, i16 154, i16 -7, i16 -3, i16 -1, i16 169, i16 108, i16 -1, i16 198, i16 61, i16 -1, i16 211, i16 210, i16 -9, i16 -5, i16 -3, i16 -1, i16 45, i16 13, i16 29, i16 -1, i16 123, i16 183, i16 -5, i16 -1, i16 209, i16 -1, i16 92, i16 208, i16 -1, i16 197, i16 138, i16 -17, i16 -7, i16 -3, i16 -1, i16 168, i16 76, i16 -1, i16 196, i16 107, i16 -5, i16 -1, i16 182, i16 -1, i16 153, i16 12, i16 -1, i16 60, i16 195, i16 -9, i16 -3, i16 -1, i16 122, i16 167, i16 -1, i16 166, i16 -1, i16 192, i16 11, i16 -1, i16 194, i16 -1, i16 44, i16 91, i16 -55, i16 -29, i16 -15, i16 -7, i16 -3, i16 -1, i16 181, i16 28, i16 -1, i16 137, i16 152, i16 -3, i16 -1, i16 193, i16 75, i16 -1, i16 180, i16 106, i16 -5, i16 -3, i16 -1, i16 59, i16 121, i16 179, i16 -3, i16 -1, i16 151, i16 136, i16 -1, i16 43, i16 90, i16 -11, i16 -5, i16 -1, i16 178, i16 -1, i16 165, i16 27, i16 -1, i16 177, i16 -1, i16 176, i16 105, i16 -7, i16 -3, i16 -1, i16 150, i16 74, i16 -1, i16 164, i16 120, i16 -3, i16 -1, i16 135, i16 58, i16 163, i16 -17, i16 -7, i16 -3, i16 -1, i16 89, i16 149, i16 -1, i16 42, i16 162, i16 -3, i16 -1, i16 26, i16 161, i16 -3, i16 -1, i16 10, i16 160, i16 104, i16 -7, i16 -3, i16 -1, i16 134, i16 73, i16 -1, i16 148, i16 57, i16 -5, i16 -1, i16 147, i16 -1, i16 119, i16 9, i16 -1, i16 88, i16 133, i16 -53, i16 -29, i16 -13, i16 -7, i16 -3, i16 -1, i16 41, i16 103, i16 -1, i16 118, i16 146, i16 -1, i16 145, i16 -1, i16 25, i16 144, i16 -7, i16 -3, i16 -1, i16 72, i16 132, i16 -1, i16 87, i16 117, i16 -3, i16 -1, i16 56, i16 131, i16 -1, i16 102, i16 71, i16 -7, i16 -3, i16 -1, i16 40, i16 130, i16 -1, i16 24, i16 129, i16 -7, i16 -3, i16 -1, i16 116, i16 8, i16 -1, i16 128, i16 86, i16 -3, i16 -1, i16 101, i16 55, i16 -1, i16 115, i16 70, i16 -17, i16 -7, i16 -3, i16 -1, i16 39, i16 114, i16 -1, i16 100, i16 23, i16 -3, i16 -1, i16 85, i16 113, i16 -3, i16 -1, i16 7, i16 112, i16 54, i16 -7, i16 -3, i16 -1, i16 99, i16 69, i16 -1, i16 84, i16 38, i16 -3, i16 -1, i16 98, i16 22, i16 -3, i16 -1, i16 6, i16 96, i16 53, i16 -33, i16 -19, i16 -9, i16 -5, i16 -1, i16 97, i16 -1, i16 83, i16 68, i16 -1, i16 37, i16 82, i16 -3, i16 -1, i16 21, i16 81, i16 -3, i16 -1, i16 5, i16 80, i16 52, i16 -7, i16 -3, i16 -1, i16 67, i16 36, i16 -1, i16 66, i16 51, i16 -1, i16 65, i16 -1, i16 20, i16 4, i16 -9, i16 -3, i16 -1, i16 35, i16 50, i16 -3, i16 -1, i16 64, i16 3, i16 19, i16 -3, i16 -1, i16 49, i16 48, i16 34, i16 -9, i16 -7, i16 -3, i16 -1, i16 18, i16 33, i16 -1, i16 2, i16 32, i16 17, i16 -3, i16 -1, i16 1, i16 16, i16 0], align 16
@tab16 = internal global [511 x i16] [i16 -509, i16 -503, i16 -461, i16 -323, i16 -103, i16 -37, i16 -27, i16 -15, i16 -7, i16 -3, i16 -1, i16 239, i16 254, i16 -1, i16 223, i16 253, i16 -3, i16 -1, i16 207, i16 252, i16 -1, i16 191, i16 251, i16 -5, i16 -1, i16 175, i16 -1, i16 250, i16 159, i16 -3, i16 -1, i16 249, i16 248, i16 143, i16 -7, i16 -3, i16 -1, i16 127, i16 247, i16 -1, i16 111, i16 246, i16 255, i16 -9, i16 -5, i16 -3, i16 -1, i16 95, i16 245, i16 79, i16 -1, i16 244, i16 243, i16 -53, i16 -1, i16 240, i16 -1, i16 63, i16 -29, i16 -19, i16 -13, i16 -7, i16 -5, i16 -1, i16 206, i16 -1, i16 236, i16 221, i16 222, i16 -1, i16 233, i16 -1, i16 234, i16 217, i16 -1, i16 238, i16 -1, i16 237, i16 235, i16 -3, i16 -1, i16 190, i16 205, i16 -3, i16 -1, i16 220, i16 219, i16 174, i16 -11, i16 -5, i16 -1, i16 204, i16 -1, i16 173, i16 218, i16 -3, i16 -1, i16 126, i16 172, i16 202, i16 -5, i16 -3, i16 -1, i16 201, i16 125, i16 94, i16 189, i16 242, i16 -93, i16 -5, i16 -3, i16 -1, i16 47, i16 15, i16 31, i16 -1, i16 241, i16 -49, i16 -25, i16 -13, i16 -5, i16 -1, i16 158, i16 -1, i16 188, i16 203, i16 -3, i16 -1, i16 142, i16 232, i16 -1, i16 157, i16 231, i16 -7, i16 -3, i16 -1, i16 187, i16 141, i16 -1, i16 216, i16 110, i16 -1, i16 230, i16 156, i16 -13, i16 -7, i16 -3, i16 -1, i16 171, i16 186, i16 -1, i16 229, i16 215, i16 -1, i16 78, i16 -1, i16 228, i16 140, i16 -3, i16 -1, i16 200, i16 62, i16 -1, i16 109, i16 -1, i16 214, i16 155, i16 -19, i16 -11, i16 -5, i16 -3, i16 -1, i16 185, i16 170, i16 225, i16 -1, i16 212, i16 -1, i16 184, i16 169, i16 -5, i16 -1, i16 123, i16 -1, i16 183, i16 208, i16 227, i16 -7, i16 -3, i16 -1, i16 14, i16 224, i16 -1, i16 93, i16 213, i16 -3, i16 -1, i16 124, i16 199, i16 -1, i16 77, i16 139, i16 -75, i16 -45, i16 -27, i16 -13, i16 -7, i16 -3, i16 -1, i16 154, i16 108, i16 -1, i16 198, i16 61, i16 -3, i16 -1, i16 92, i16 197, i16 13, i16 -7, i16 -3, i16 -1, i16 138, i16 168, i16 -1, i16 153, i16 76, i16 -3, i16 -1, i16 182, i16 122, i16 60, i16 -11, i16 -5, i16 -3, i16 -1, i16 91, i16 137, i16 28, i16 -1, i16 192, i16 -1, i16 152, i16 121, i16 -1, i16 226, i16 -1, i16 46, i16 30, i16 -15, i16 -7, i16 -3, i16 -1, i16 211, i16 45, i16 -1, i16 210, i16 209, i16 -5, i16 -1, i16 59, i16 -1, i16 151, i16 136, i16 29, i16 -7, i16 -3, i16 -1, i16 196, i16 107, i16 -1, i16 195, i16 167, i16 -1, i16 44, i16 -1, i16 194, i16 181, i16 -23, i16 -13, i16 -7, i16 -3, i16 -1, i16 193, i16 12, i16 -1, i16 75, i16 180, i16 -3, i16 -1, i16 106, i16 166, i16 179, i16 -5, i16 -3, i16 -1, i16 90, i16 165, i16 43, i16 -1, i16 178, i16 27, i16 -13, i16 -5, i16 -1, i16 177, i16 -1, i16 11, i16 176, i16 -3, i16 -1, i16 105, i16 150, i16 -1, i16 74, i16 164, i16 -5, i16 -3, i16 -1, i16 120, i16 135, i16 163, i16 -3, i16 -1, i16 58, i16 89, i16 42, i16 -97, i16 -57, i16 -33, i16 -19, i16 -11, i16 -5, i16 -3, i16 -1, i16 149, i16 104, i16 161, i16 -3, i16 -1, i16 134, i16 119, i16 148, i16 -5, i16 -3, i16 -1, i16 73, i16 87, i16 103, i16 162, i16 -5, i16 -1, i16 26, i16 -1, i16 10, i16 160, i16 -3, i16 -1, i16 57, i16 147, i16 -1, i16 88, i16 133, i16 -9, i16 -3, i16 -1, i16 41, i16 146, i16 -3, i16 -1, i16 118, i16 9, i16 25, i16 -5, i16 -1, i16 145, i16 -1, i16 144, i16 72, i16 -3, i16 -1, i16 132, i16 117, i16 -1, i16 56, i16 131, i16 -21, i16 -11, i16 -5, i16 -3, i16 -1, i16 102, i16 40, i16 130, i16 -3, i16 -1, i16 71, i16 116, i16 24, i16 -3, i16 -1, i16 129, i16 128, i16 -3, i16 -1, i16 8, i16 86, i16 55, i16 -9, i16 -5, i16 -1, i16 115, i16 -1, i16 101, i16 70, i16 -1, i16 39, i16 114, i16 -5, i16 -3, i16 -1, i16 100, i16 85, i16 7, i16 23, i16 -23, i16 -13, i16 -5, i16 -1, i16 113, i16 -1, i16 112, i16 54, i16 -3, i16 -1, i16 99, i16 69, i16 -1, i16 84, i16 38, i16 -3, i16 -1, i16 98, i16 22, i16 -1, i16 97, i16 -1, i16 6, i16 96, i16 -9, i16 -5, i16 -1, i16 83, i16 -1, i16 53, i16 68, i16 -1, i16 37, i16 82, i16 -1, i16 81, i16 -1, i16 21, i16 5, i16 -33, i16 -23, i16 -13, i16 -7, i16 -3, i16 -1, i16 52, i16 67, i16 -1, i16 80, i16 36, i16 -3, i16 -1, i16 66, i16 51, i16 20, i16 -5, i16 -1, i16 65, i16 -1, i16 4, i16 64, i16 -1, i16 35, i16 50, i16 -3, i16 -1, i16 19, i16 49, i16 -3, i16 -1, i16 3, i16 48, i16 34, i16 -3, i16 -1, i16 18, i16 33, i16 -1, i16 2, i16 32, i16 -3, i16 -1, i16 17, i16 1, i16 16, i16 0], align 16
@tab24 = internal global [511 x i16] [i16 -451, i16 -117, i16 -43, i16 -25, i16 -15, i16 -7, i16 -3, i16 -1, i16 239, i16 254, i16 -1, i16 223, i16 253, i16 -3, i16 -1, i16 207, i16 252, i16 -1, i16 191, i16 251, i16 -5, i16 -1, i16 250, i16 -1, i16 175, i16 159, i16 -1, i16 249, i16 248, i16 -9, i16 -5, i16 -3, i16 -1, i16 143, i16 127, i16 247, i16 -1, i16 111, i16 246, i16 -3, i16 -1, i16 95, i16 245, i16 -1, i16 79, i16 244, i16 -71, i16 -7, i16 -3, i16 -1, i16 63, i16 243, i16 -1, i16 47, i16 242, i16 -5, i16 -1, i16 241, i16 -1, i16 31, i16 240, i16 -25, i16 -9, i16 -1, i16 15, i16 -3, i16 -1, i16 238, i16 222, i16 -1, i16 237, i16 206, i16 -7, i16 -3, i16 -1, i16 236, i16 221, i16 -1, i16 190, i16 235, i16 -3, i16 -1, i16 205, i16 220, i16 -1, i16 174, i16 234, i16 -15, i16 -7, i16 -3, i16 -1, i16 189, i16 219, i16 -1, i16 204, i16 158, i16 -3, i16 -1, i16 233, i16 173, i16 -1, i16 218, i16 188, i16 -7, i16 -3, i16 -1, i16 203, i16 142, i16 -1, i16 232, i16 157, i16 -3, i16 -1, i16 217, i16 126, i16 -1, i16 231, i16 172, i16 255, i16 -235, i16 -143, i16 -77, i16 -45, i16 -25, i16 -15, i16 -7, i16 -3, i16 -1, i16 202, i16 187, i16 -1, i16 141, i16 216, i16 -5, i16 -3, i16 -1, i16 14, i16 224, i16 13, i16 230, i16 -5, i16 -3, i16 -1, i16 110, i16 156, i16 201, i16 -1, i16 94, i16 186, i16 -9, i16 -5, i16 -1, i16 229, i16 -1, i16 171, i16 125, i16 -1, i16 215, i16 228, i16 -3, i16 -1, i16 140, i16 200, i16 -3, i16 -1, i16 78, i16 46, i16 62, i16 -15, i16 -7, i16 -3, i16 -1, i16 109, i16 214, i16 -1, i16 227, i16 155, i16 -3, i16 -1, i16 185, i16 170, i16 -1, i16 226, i16 30, i16 -7, i16 -3, i16 -1, i16 225, i16 93, i16 -1, i16 213, i16 124, i16 -3, i16 -1, i16 199, i16 77, i16 -1, i16 139, i16 184, i16 -31, i16 -15, i16 -7, i16 -3, i16 -1, i16 212, i16 154, i16 -1, i16 169, i16 108, i16 -3, i16 -1, i16 198, i16 61, i16 -1, i16 211, i16 45, i16 -7, i16 -3, i16 -1, i16 210, i16 29, i16 -1, i16 123, i16 183, i16 -3, i16 -1, i16 209, i16 92, i16 -1, i16 197, i16 138, i16 -17, i16 -7, i16 -3, i16 -1, i16 168, i16 153, i16 -1, i16 76, i16 196, i16 -3, i16 -1, i16 107, i16 182, i16 -3, i16 -1, i16 208, i16 12, i16 60, i16 -7, i16 -3, i16 -1, i16 195, i16 122, i16 -1, i16 167, i16 44, i16 -3, i16 -1, i16 194, i16 91, i16 -1, i16 181, i16 28, i16 -57, i16 -35, i16 -19, i16 -7, i16 -3, i16 -1, i16 137, i16 152, i16 -1, i16 193, i16 75, i16 -5, i16 -3, i16 -1, i16 192, i16 11, i16 59, i16 -3, i16 -1, i16 176, i16 10, i16 26, i16 -5, i16 -1, i16 180, i16 -1, i16 106, i16 166, i16 -3, i16 -1, i16 121, i16 151, i16 -3, i16 -1, i16 160, i16 9, i16 144, i16 -9, i16 -3, i16 -1, i16 179, i16 136, i16 -3, i16 -1, i16 43, i16 90, i16 178, i16 -7, i16 -3, i16 -1, i16 165, i16 27, i16 -1, i16 177, i16 105, i16 -1, i16 150, i16 164, i16 -17, i16 -9, i16 -5, i16 -3, i16 -1, i16 74, i16 120, i16 135, i16 -1, i16 58, i16 163, i16 -3, i16 -1, i16 89, i16 149, i16 -1, i16 42, i16 162, i16 -7, i16 -3, i16 -1, i16 161, i16 104, i16 -1, i16 134, i16 119, i16 -3, i16 -1, i16 73, i16 148, i16 -1, i16 57, i16 147, i16 -63, i16 -31, i16 -15, i16 -7, i16 -3, i16 -1, i16 88, i16 133, i16 -1, i16 41, i16 103, i16 -3, i16 -1, i16 118, i16 146, i16 -1, i16 25, i16 145, i16 -7, i16 -3, i16 -1, i16 72, i16 132, i16 -1, i16 87, i16 117, i16 -3, i16 -1, i16 56, i16 131, i16 -1, i16 102, i16 40, i16 -17, i16 -7, i16 -3, i16 -1, i16 130, i16 24, i16 -1, i16 71, i16 116, i16 -5, i16 -1, i16 129, i16 -1, i16 8, i16 128, i16 -1, i16 86, i16 101, i16 -7, i16 -5, i16 -1, i16 23, i16 -1, i16 7, i16 112, i16 115, i16 -3, i16 -1, i16 55, i16 39, i16 114, i16 -15, i16 -7, i16 -3, i16 -1, i16 70, i16 100, i16 -1, i16 85, i16 113, i16 -3, i16 -1, i16 54, i16 99, i16 -1, i16 69, i16 84, i16 -7, i16 -3, i16 -1, i16 38, i16 98, i16 -1, i16 22, i16 97, i16 -5, i16 -3, i16 -1, i16 6, i16 96, i16 53, i16 -1, i16 83, i16 68, i16 -51, i16 -37, i16 -23, i16 -15, i16 -9, i16 -3, i16 -1, i16 37, i16 82, i16 -1, i16 21, i16 -1, i16 5, i16 80, i16 -1, i16 81, i16 -1, i16 52, i16 67, i16 -3, i16 -1, i16 36, i16 66, i16 -1, i16 51, i16 20, i16 -9, i16 -5, i16 -1, i16 65, i16 -1, i16 4, i16 64, i16 -1, i16 35, i16 50, i16 -1, i16 19, i16 49, i16 -7, i16 -5, i16 -3, i16 -1, i16 3, i16 48, i16 34, i16 18, i16 -1, i16 33, i16 -1, i16 2, i16 32, i16 -3, i16 -1, i16 17, i16 1, i16 -1, i16 16, i16 0], align 16
@tab_c0 = internal global [31 x i16] [i16 -29, i16 -21, i16 -13, i16 -7, i16 -3, i16 -1, i16 11, i16 15, i16 -1, i16 13, i16 14, i16 -3, i16 -1, i16 7, i16 5, i16 9, i16 -3, i16 -1, i16 6, i16 3, i16 -1, i16 10, i16 12, i16 -3, i16 -1, i16 2, i16 1, i16 -1, i16 4, i16 8, i16 0], align 16
@tab_c1 = internal global [31 x i16] [i16 -15, i16 -7, i16 -3, i16 -1, i16 15, i16 14, i16 -1, i16 13, i16 12, i16 -3, i16 -1, i16 11, i16 10, i16 -1, i16 9, i16 8, i16 -7, i16 -3, i16 -1, i16 7, i16 6, i16 -1, i16 5, i16 4, i16 -3, i16 -1, i16 3, i16 2, i16 -1, i16 1, i16 0], align 16
@gmp = internal global ptr null, align 8
@.str.185 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.1.186 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.2.187 = private unnamed_addr constant [24 x i8] c"Could not create \22%s\22.\0A\00", align 1
@.str.3.188 = private unnamed_addr constant [34 x i8] c"mp3 buffer is not big enough... \0A\00", align 1
@.str.4.189 = private unnamed_addr constant [25 x i8] c"Error writing mp3 output\00", align 1
@mp = internal global %struct.mpstr zeroinitializer, align 8
@buf = internal global [16384 x i8] zeroinitializer, align 16
@out = internal global [8192 x i8] zeroinitializer, align 16
@.str.192 = private unnamed_addr constant [50 x i8] c"Opps: first frame of mpglib output will be lost \0A\00", align 1
@freqs = internal global [9 x i64] [i64 44100, i64 48000, i64 32000, i64 22050, i64 24000, i64 16000, i64 11025, i64 12000, i64 8000], align 16
@tabsel_123 = internal global [2 x [3 x [16 x i32]]] [[3 x [16 x i32]] [[16 x i32] [i32 0, i32 32, i32 64, i32 96, i32 128, i32 160, i32 192, i32 224, i32 256, i32 288, i32 320, i32 352, i32 384, i32 416, i32 448, i32 0], [16 x i32] [i32 0, i32 32, i32 48, i32 56, i32 64, i32 80, i32 96, i32 112, i32 128, i32 160, i32 192, i32 224, i32 256, i32 320, i32 384, i32 0], [16 x i32] [i32 0, i32 32, i32 40, i32 48, i32 56, i32 64, i32 80, i32 96, i32 112, i32 128, i32 160, i32 192, i32 224, i32 256, i32 320, i32 0]], [3 x [16 x i32]] [[16 x i32] [i32 0, i32 32, i32 48, i32 56, i32 64, i32 80, i32 96, i32 112, i32 128, i32 144, i32 160, i32 176, i32 192, i32 224, i32 256, i32 0], [16 x i32] [i32 0, i32 8, i32 16, i32 24, i32 32, i32 40, i32 48, i32 56, i32 64, i32 80, i32 96, i32 112, i32 128, i32 144, i32 160, i32 0], [16 x i32] [i32 0, i32 8, i32 16, i32 24, i32 32, i32 40, i32 48, i32 56, i32 64, i32 80, i32 96, i32 112, i32 128, i32 144, i32 160, i32 0]]], align 16
@.str.1.195 = private unnamed_addr constant [66 x i8] c"Opps: mpg123 returned more than one frame!  Cant handle this... \0A\00", align 1
@mdct_sub48.init = internal unnamed_addr global i32 0, align 4
@sb_sample = internal global [2 x [2 x [18 x [32 x double]]]] zeroinitializer, align 16
@win.198 = internal unnamed_addr global [4 x [36 x double]] zeroinitializer, align 16
@ca = internal unnamed_addr global [8 x double] zeroinitializer, align 16
@cs = internal unnamed_addr global [8 x double] zeroinitializer, align 16
@mdct_init48.c = internal unnamed_addr constant [8 x double] [double -6.000000e-01, double -5.350000e-01, double -3.300000e-01, double -1.850000e-01, double -9.500000e-02, double -4.100000e-02, double -1.420000e-02, double -3.700000e-03], align 16
@cos_l = internal unnamed_addr global [244 x double] zeroinitializer, align 16
@mdct_init48.d3 = internal unnamed_addr constant [4 x i32] [i32 1, i32 7, i32 10, i32 16], align 16
@all = internal unnamed_addr constant [12 x i32] [i32 0, i32 2, i32 3, i32 5, i32 6, i32 8, i32 9, i32 11, i32 12, i32 14, i32 15, i32 17], align 16
@enwindow = internal unnamed_addr global [256 x double] [double 0x3FA251E002C5BE4C, double 0x3F924E1FFC2760F6, double 0x3F69ADFFBE4CE877, double 0x3F642100110318CA, double 9.713170e-04, double 2.188680e-04, double 1.015660e-04, double 1.382800e-05, double 0x3FA24EFFFE8EA200, double 0x3F6BDDFFD89B6AB3, double 9.837150e-04, double 9.918200e-05, double -4.770000e-07, double 1.039510e-04, double 0x3F4F3FFF520DC771, double 0x3F67470033705EA7, double 1.239800e-05, double 1.912120e-04, double 0x3F62B3FFD4EA8624, double 0x3F9166FFFA87D736, double 0x3F9334FFF82E8B95, double 0x3F658D0036BA2EEE, double 2.474780e-04, double 1.478200e-05, double 0x3FA2467FFD4C82A1, double 0x3F6DD8000F4D029B, double 0x3F503FFFB08B08EE, double 9.632100e-05, double -4.770000e-07, double 1.058580e-04, double 0x3F4E7FFFB6FC4D65, double 0x3F64A8000EC3923C, double 1.144400e-05, double 1.654620e-04, double 0x3F6148FFC594EC83, double 0x3F907FDFF8E84D76, double 0x3F941B0002FC8112, double 0x3F66F7002FAE4C0C, double 2.770420e-04, double 1.668900e-05, double 0x3FA2385FFEFF602E, double 0x3F6F9BFFD8F150EE, double 9.951590e-04, double 9.346000e-05, double -4.770000e-07, double 1.072880e-04, double 9.026530e-04, double 0x3F61D0FFD9B6E277, double 1.001400e-05, double 1.401900e-04, double 0x3F5FBDFF99419ECB, double 0x3F8F32C00A8B630F, double 0x3F94FFC002FEA6D3, double 0x3F685CFFCF1C771E, double 3.075600e-04, double 1.812000e-05, double 3.543520e-02, double 0x3F7095FFF5DDD6FA, double 9.942050e-04, double 9.059900e-05, double -4.770000e-07, double 1.082420e-04, double 8.687970e-04, double 0x3F5D7FFFE1EF6B2A, double 0x3EE3000CEB1FF411, double 1.163480e-04, double 0x3F5CF2005A6548A7, double 0x3F8D680010E953B9, double 0x3F95E29FFB661AF0, double 3.141880e-03, double 3.390310e-04, double 1.955000e-05, double 0x3FA20B4002AD0C1B, double 4.215240e-03, double 9.894370e-04, double 8.726100e-05, double -4.770000e-07, double 1.087190e-04, double 0x3F4B2C0063FE014D, double 0x3F56EDFFEFB14AB3, double 8.106000e-06, double 9.393700e-05, double 0x3F5A2DFFA8D35995, double 0x3F8BA03FF357727A, double 0x3F96C320035E36F6, double 0x3F6B17002A4FE853, double 3.714560e-04, double 2.145800e-05, double 3.500700e-02, double 0x3F71D9800E83258F, double 9.808540e-04, double 8.392300e-05, double -4.770000e-07, double 1.087190e-04, double 7.839200e-04, double 9.713170e-04, double 7.629000e-06, double 7.295600e-05, double 0x3F577800309639AD, double 0x3F89DC800CEF6B77, double 0x3F97A0BFFE8830BC, double 0x3F6C6700031EDD2A, double 4.043580e-04, double 2.336500e-05, double 0x3FA1C82FFC6969F3, double 0x3F72567FFA9D50C4, double 9.689330e-04, double 8.058500e-05, double -9.540000e-07, double 1.082420e-04, double 7.319450e-04, double 5.159380e-04, double 6.676000e-06, double 5.292900e-05, double 0x3F54CDFF9F2972E2, double 0x3F881D80076614A1, double 0x3F987B2006DB9161, double 0x3F6DAD000EFFB365, double 4.382130e-04, double 2.527200e-05, double 0x3FA19E90011D1416, double 0x3F72BBFFFE860AFA, double 0x3F4F43FFAB93B97D, double 7.677100e-05, double -9.540000e-07, double 1.068120e-04, double 6.742480e-04, double 3.337900e-05, double 6.199000e-06, double 3.433200e-05, double 0x3F52340073D47447, double 0x3F86643FF91CEA7A, double 0x3F99519FFD2D5F2B, double 0x3F6EE6000ACDF57D, double 4.725460e-04, double 2.765700e-05, double 0x3FA16FC0016255B6, double 0x3F730AFFEBE6A112, double 9.355550e-04, double 0x3F13400155732CA6, double -9.540000e-07, double 1.053810e-04, double 6.103520e-04, double -4.758830e-04, double 5.245000e-06, double 1.716600e-05, double 9.565350e-04, double 0x3F84B1400FA0C315, double 2.552700e-02, double 0x3F70087FF0141377, double 5.073550e-04, double 3.004100e-05, double 0x3FA13BE000055E64, double 0x3F734380077742AD, double 0x3F4DFC010F4107FF, double 7.009500e-05, double -9.540000e-07, double 1.025200e-04, double 5.393030e-04, double 0xBF5093FF8462AE54, double 4.768000e-06, double 9.540000e-07, double 8.068080e-04, double 0x3F83057FFA3ED383, double 0x3F9AF14004E3FBA4, double 0x3F70957FEAAD18B9, double 5.421640e-04, double 3.242500e-05, double 0x3FA102EFFD062E20, double 0x3F73677FF48A898F, double 8.916850e-04, double 6.628000e-05, double -1.431000e-06, double 9.918200e-05, double 4.625320e-04, double 0xBF59C80067E27000, double 4.292000e-06, double -1.382800e-05, double 6.618500e-04, double 0x3F8161C00E7868C7, double 0x3F9BB93FFD1B1E3F, double 0x3F71197FEA014C42, double 5.769730e-04, double 3.480900e-05, double 0x3FA0C53FFF633BD3, double 0x3F7376FFF7D8A559, double 8.664130e-04, double 6.294300e-05, double -1.431000e-06, double 9.536700e-05, double 3.786090e-04, double 0xBF61B500163F206B, double 3.815000e-06, double -2.718000e-05, double 5.221370e-04, double 0x3F7F8D7FEC04B1A7, double 0x3F9C7BA000DE43BA, double 0x3F7193001136A2EE, double 6.117820e-04, double 3.767000e-05, double 0x3FA082CFFE85818A, double 0x3F73737FEE3BA130, double 0x3F4B7C00F1307329, double 5.960500e-05, double -1.907000e-06, double 9.012200e-05, double 2.884860e-04, double 0xBF66BA0038D75965, double 3.338000e-06, double -3.957700e-05, double 3.881450e-04, double 0x3F7C6A00018B2312, double 0x3F9D37C002307E44, double 0x3F72018010642EDC, double 6.465910e-04, double 4.053100e-05, double 0x3FA03BE000055E64, double 0x3F735DFFEE14F995, double 0x3F4A87FEF0132B89, double 5.579000e-05, double -1.907000e-06, double 8.440000e-05, double 1.916890e-04, double 0xBF6BF1FFFBE8072A, double 3.338000e-06, double -5.054500e-05, double 2.598760e-04, double 0x3F7959FFEA754312, double 0x3F9DED20070F1B84, double 0x3F72640015E0A32A, double 6.809230e-04, double 4.339200e-05, double 0x3F9FE13FFEFC278C, double 0x3F73370002956CCA, double 7.791520e-04, double 5.292900e-05, double -2.384000e-06, double 7.772400e-05, double 8.821500e-05, double 0xBF70ADFFE940063C, double 2.861000e-06, double -6.055800e-05, double 1.373290e-04, double 5.462170e-03, double 0x3F9E9B7FF8B3B071, double 0x3F72B87FF4E906D0, double 7.143020e-04, double 4.625300e-05, double 0x3F9F425FFF77A281, double 0x3F72FF7FFD6647B3, double 7.472040e-04, double 4.959100e-05, double 0x3F737B8017D72606, double 2.145800e-05, double 0xBF123FFC220291DE, double 2.384000e-06], align 16
@mm = internal unnamed_addr global [16 x [31 x double]] zeroinitializer, align 16
@cos_s = internal unnamed_addr global [6 x [6 x double]] zeroinitializer, align 16
@.str.1.201 = private unnamed_addr constant [44 x i8] c"USAGE   :  %s [options] <infile> [outfile]\0A\00", align 1
@.str.2.202 = private unnamed_addr constant [66 x i8] c"\0A<infile> and/or <outfile> can be \22-\22, which means stdin/stdout.\0A\00", align 1
@.str.3.203 = private unnamed_addr constant [38 x i8] c"Try \22%s --help\22 for more information\0A\00", align 1
@stdout = external local_unnamed_addr global ptr, align 8
@.str.4.204 = private unnamed_addr constant [11 x i8] c"OPTIONS :\0A\00", align 1
@.str.5.205 = private unnamed_addr constant [18 x i8] c"  Input options:\0A\00", align 1
@.str.6.206 = private unnamed_addr constant [38 x i8] c"    -r              input is raw pcm\0A\00", align 1
@.str.7.207 = private unnamed_addr constant [50 x i8] c"    -x              force byte-swapping of input\0A\00", align 1
@.str.8.208 = private unnamed_addr constant [77 x i8] c"    -s sfreq        sampling frequency of input file(kHz) - default 44.1kHz\0A\00", align 1
@.str.9.209 = private unnamed_addr constant [46 x i8] c"    --mp3input      input file is a MP3 file\0A\00", align 1
@.str.10.210 = private unnamed_addr constant [19 x i8] c"  Filter options:\0A\00", align 1
@.str.11.211 = private unnamed_addr constant [65 x i8] c"    -k              keep ALL frequencies (disables all filters)\0A\00", align 1
@.str.12.212 = private unnamed_addr constant [75 x i8] c"  --lowpass freq         frequency(kHz), lowpass filter cutoff above freq\0A\00", align 1
@.str.13.213 = private unnamed_addr constant [72 x i8] c"  --lowpass-width freq   frequency(kHz) - default 15%% of lowpass freq\0A\00", align 1
@.str.14.214 = private unnamed_addr constant [76 x i8] c"  --highpass freq        frequency(kHz), highpass filter cutoff below freq\0A\00", align 1
@.str.15.215 = private unnamed_addr constant [73 x i8] c"  --highpass-width freq  frequency(kHz) - default 15%% of highpass freq\0A\00", align 1
@.str.16.216 = private unnamed_addr constant [81 x i8] c"  --resample sfreq  sampling frequency of output file(kHz)- default=input sfreq\0A\00", align 1
@.str.17.217 = private unnamed_addr constant [73 x i8] c"  --cwlimit freq    compute tonality up to freq (in kHz) default 8.8717\0A\00", align 1
@.str.18.218 = private unnamed_addr constant [24 x i8] c"  Operational options:\0A\00", align 1
@.str.19.219 = private unnamed_addr constant [71 x i8] c"    -m mode         (s)tereo, (j)oint, (f)orce or (m)ono  (default j)\0A\00", align 1
@.str.20.220 = private unnamed_addr constant [67 x i8] c"                    force = force ms_stereo on all frames. Faster\0A\00", align 1
@.str.21.221 = private unnamed_addr constant [72 x i8] c"    -a              downmix from stereo to mono file for mono encoding\0A\00", align 1
@.str.22.222 = private unnamed_addr constant [65 x i8] c"    -d              allow channels to have different blocktypes\0A\00", align 1
@.str.23.223 = private unnamed_addr constant [65 x i8] c"    -S              don't print progress report, VBR histograms\0A\00", align 1
@.str.24.224 = private unnamed_addr constant [50 x i8] c"    --athonly       only use the ATH for masking\0A\00", align 1
@.str.25.225 = private unnamed_addr constant [49 x i8] c"    --noath         disable the ATH for masking\0A\00", align 1
@.str.26.226 = private unnamed_addr constant [45 x i8] c"    --noshort       do not use short blocks\0A\00", align 1
@.str.27.227 = private unnamed_addr constant [45 x i8] c"    --voice         experimental voice mode\0A\00", align 1
@.str.28.228 = private unnamed_addr constant [77 x i8] c"    --preset type   type must be phone, voice, fm, tape, hifi, cd or studio\0A\00", align 1
@.str.29.229 = private unnamed_addr constant [57 x i8] c"                    help gives some more infos on these\0A\00", align 1
@.str.30.230 = private unnamed_addr constant [48 x i8] c"  CBR (constant bitrate, the default) options:\0A\00", align 1
@.str.31.231 = private unnamed_addr constant [72 x i8] c"    -h              higher quality, but a little slower.  Recommended.\0A\00", align 1
@.str.32.232 = private unnamed_addr constant [50 x i8] c"    -f              fast mode (very low quality)\0A\00", align 1
@.str.33.233 = private unnamed_addr constant [54 x i8] c"    -b bitrate      set the bitrate, default 128kbps\0A\00", align 1
@.str.34.234 = private unnamed_addr constant [16 x i8] c"  VBR options:\0A\00", align 1
@.str.35.235 = private unnamed_addr constant [48 x i8] c"    -v              use variable bitrate (VBR)\0A\00", align 1
@.str.36.236 = private unnamed_addr constant [60 x i8] c"    -V n            quality setting for VBR.  default n=%i\0A\00", align 1
@.str.37.237 = private unnamed_addr constant [66 x i8] c"                    0=high quality,bigger files. 9=smaller files\0A\00", align 1
@.str.38.238 = private unnamed_addr constant [68 x i8] c"    -b bitrate      specify minimum allowed bitrate, default 32kbs\0A\00", align 1
@.str.39.239 = private unnamed_addr constant [69 x i8] c"    -B bitrate      specify maximum allowed bitrate, default 256kbs\0A\00", align 1
@.str.40.240 = private unnamed_addr constant [56 x i8] c"    -t              disable Xing VBR informational tag\0A\00", align 1
@.str.41.241 = private unnamed_addr constant [51 x i8] c"    --nohist        disable VBR histogram display\0A\00", align 1
@.str.42.242 = private unnamed_addr constant [30 x i8] c"  MP3 header/stream options:\0A\00", align 1
@.str.43.243 = private unnamed_addr constant [51 x i8] c"    -e emp          de-emphasis n/5/c  (obsolete)\0A\00", align 1
@.str.44.244 = private unnamed_addr constant [39 x i8] c"    -c              mark as copyright\0A\00", align 1
@.str.45.245 = private unnamed_addr constant [42 x i8] c"    -o              mark as non-original\0A\00", align 1
@.str.46.246 = private unnamed_addr constant [75 x i8] c"    -p              error protection.  adds 16bit checksum to every frame\0A\00", align 1
@.str.47.247 = private unnamed_addr constant [58 x i8] c"                    (the checksum is computed correctly)\0A\00", align 1
@.str.48.248 = private unnamed_addr constant [47 x i8] c"    --nores         disable the bit reservoir\0A\00", align 1
@.str.49.249 = private unnamed_addr constant [64 x i8] c"  Specifying any of the following options will add an ID3 tag:\0A\00", align 1
@.str.50.250 = private unnamed_addr constant [52 x i8] c"     --tt \22title\22     title of song (max 30 chars)\0A\00", align 1
@.str.51.251 = private unnamed_addr constant [62 x i8] c"     --ta \22artist\22    artist who did the song (max 30 chars)\0A\00", align 1
@.str.52.252 = private unnamed_addr constant [63 x i8] c"     --tl \22album\22     album where it came from (max 30 chars)\0A\00", align 1
@.str.53.253 = private unnamed_addr constant [75 x i8] c"     --ty \22year\22      year in which the song/album was made (max 4 chars)\0A\00", align 1
@.str.54.254 = private unnamed_addr constant [54 x i8] c"     --tc \22comment\22   additional info (max 30 chars)\0A\00", align 1
@.str.55.255 = private unnamed_addr constant [69 x i8] c"                      (or max 28 chars if using the \22track\22 option)\0A\00", align 1
@.str.56.256 = private unnamed_addr constant [68 x i8] c"     --tn \22track\22     track number of the song on the CD (1 to 99)\0A\00", align 1
@.str.57.257 = private unnamed_addr constant [67 x i8] c"                      (using this option will add an ID3v1.1 tag)\0A\00", align 1
@.str.58.258 = private unnamed_addr constant [54 x i8] c"     --tg \22genre\22     genre of song (name or number)\0A\00", align 1
@.str.59.259 = private unnamed_addr constant [49 x i8] c"Presets are some shortcuts for common settings.\0A\00", align 1
@.str.60.260 = private unnamed_addr constant [52 x i8] c"They can be combined with -v if you want VBR MP3s.\0A\00", align 1
@.str.61.261 = private unnamed_addr constant [44 x i8] c"  --preset phone    =>  --resample      16\0A\00", align 1
@.str.62.262 = private unnamed_addr constant [48 x i8] c"                        --highpass       0.260\0A\00", align 1
@.str.63.263 = private unnamed_addr constant [48 x i8] c"                        --highpasswidth  0.040\0A\00", align 1
@.str.64.264 = private unnamed_addr constant [48 x i8] c"                        --lowpass        3.700\0A\00", align 1
@.str.65.265 = private unnamed_addr constant [48 x i8] c"                        --lowpasswidth   0.300\0A\00", align 1
@.str.66.266 = private unnamed_addr constant [35 x i8] c"                        --noshort\0A\00", align 1
@.str.67.267 = private unnamed_addr constant [32 x i8] c"                        -m   m\0A\00", align 1
@.str.68.268 = private unnamed_addr constant [32 x i8] c"                        -b  16\0A\00", align 1
@.str.69.269 = private unnamed_addr constant [35 x i8] c"                  plus  -b   8  \\\0A\00", align 1
@.str.70.270 = private unnamed_addr constant [59 x i8] c"                        -B  56   > in combination with -v\0A\00", align 1
@.str.71.271 = private unnamed_addr constant [35 x i8] c"                        -V   5  /\0A\00", align 1
@.str.72.272 = private unnamed_addr constant [44 x i8] c"  --preset voice:   =>  --resample      24\0A\00", align 1
@.str.73.273 = private unnamed_addr constant [48 x i8] c"                        --highpass       0.100\0A\00", align 1
@.str.74.274 = private unnamed_addr constant [48 x i8] c"                        --highpasswidth  0.020\0A\00", align 1
@.str.75.275 = private unnamed_addr constant [44 x i8] c"                        --lowpass       11\0A\00", align 1
@.str.76.276 = private unnamed_addr constant [44 x i8] c"                        --lowpasswidth   2\0A\00", align 1
@.str.77.277 = private unnamed_addr constant [32 x i8] c"                        -b  32\0A\00", align 1
@.str.78.278 = private unnamed_addr constant [59 x i8] c"                        -B  96   > in combination with -v\0A\00", align 1
@.str.79.279 = private unnamed_addr constant [35 x i8] c"                        -V   4  /\0A\00", align 1
@.str.80.280 = private unnamed_addr constant [44 x i8] c"  --preset fm:      =>  --resample      32\0A\00", align 1
@.str.81.281 = private unnamed_addr constant [48 x i8] c"                        --highpass       0.030\0A\00", align 1
@.str.82.282 = private unnamed_addr constant [44 x i8] c"                        --highpasswidth  0\0A\00", align 1
@.str.83.283 = private unnamed_addr constant [46 x i8] c"                        --lowpass       11.4\0A\00", align 1
@.str.84.284 = private unnamed_addr constant [44 x i8] c"                        --lowpasswidth   0\0A\00", align 1
@.str.85.285 = private unnamed_addr constant [32 x i8] c"                        -m   j\0A\00", align 1
@.str.86.286 = private unnamed_addr constant [32 x i8] c"                        -b  96\0A\00", align 1
@.str.87.287 = private unnamed_addr constant [35 x i8] c"                  plus  -b  32  \\\0A\00", align 1
@.str.88.288 = private unnamed_addr constant [59 x i8] c"                        -B 192   > in combination with -v\0A\00", align 1
@.str.89.289 = private unnamed_addr constant [44 x i8] c"  --preset tape:    =>  --lowpass       17\0A\00", align 1
@.str.90.290 = private unnamed_addr constant [48 x i8] c"                        --highpass       0.015\0A\00", align 1
@.str.91.291 = private unnamed_addr constant [48 x i8] c"                        --highpasswidth  0.015\0A\00", align 1
@.str.92.292 = private unnamed_addr constant [32 x i8] c"                        -b 128\0A\00", align 1
@.str.93.293 = private unnamed_addr constant [44 x i8] c"  --preset hifi:    =>  --lowpass       20\0A\00", align 1
@.str.94.294 = private unnamed_addr constant [44 x i8] c"                        --lowpasswidth   3\0A\00", align 1
@.str.95.295 = private unnamed_addr constant [28 x i8] c"                        -h\0A\00", align 1
@.str.96.296 = private unnamed_addr constant [32 x i8] c"                        -b 160\0A\00", align 1
@.str.97.297 = private unnamed_addr constant [59 x i8] c"                        -B 224   > in combination with -v\0A\00", align 1
@.str.98.298 = private unnamed_addr constant [35 x i8] c"                        -V   3  /\0A\00", align 1
@.str.99.299 = private unnamed_addr constant [28 x i8] c"  --preset cd:      =>  -k\0A\00", align 1
@.str.100.300 = private unnamed_addr constant [32 x i8] c"                        -m   s\0A\00", align 1
@.str.101.301 = private unnamed_addr constant [32 x i8] c"                        -b 192\0A\00", align 1
@.str.102.302 = private unnamed_addr constant [35 x i8] c"                  plus  -b  80  \\\0A\00", align 1
@.str.103.303 = private unnamed_addr constant [59 x i8] c"                        -B 256   > in combination with -v\0A\00", align 1
@.str.104.304 = private unnamed_addr constant [35 x i8] c"                        -V   2  /\0A\00", align 1
@.str.105.305 = private unnamed_addr constant [28 x i8] c"  --preset studio:  =>  -k\0A\00", align 1
@.str.106.306 = private unnamed_addr constant [32 x i8] c"                        -b 256\0A\00", align 1
@.str.107.307 = private unnamed_addr constant [35 x i8] c"                  plus  -b 112  \\\0A\00", align 1
@.str.108.308 = private unnamed_addr constant [59 x i8] c"                        -B 320   > in combination with -v\0A\00", align 1
@.str.109.309 = private unnamed_addr constant [35 x i8] c"                        -V   0  /\0A\00", align 1
@inPath = internal global [300 x i8] zeroinitializer, align 16
@outPath = internal global [300 x i8] zeroinitializer, align 16
@id3tag = internal global %struct.ID3TAGDATA zeroinitializer, align 4
@.str.110.312 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.111.313 = private unnamed_addr constant [9 x i8] c"resample\00", align 1
@.str.112.314 = private unnamed_addr constant [43 x i8] c"Must specify a samplerate with --resample\0A\00", align 1
@.str.113.315 = private unnamed_addr constant [9 x i8] c"mp3input\00", align 1
@.str.114.316 = private unnamed_addr constant [6 x i8] c"voice\00", align 1
@.str.115.317 = private unnamed_addr constant [8 x i8] c"noshort\00", align 1
@.str.116.318 = private unnamed_addr constant [6 x i8] c"noath\00", align 1
@.str.117.319 = private unnamed_addr constant [6 x i8] c"nores\00", align 1
@.str.118.320 = private unnamed_addr constant [8 x i8] c"athonly\00", align 1
@.str.119.321 = private unnamed_addr constant [7 x i8] c"nohist\00", align 1
@.str.120.322 = private unnamed_addr constant [3 x i8] c"tt\00", align 1
@.str.121.323 = private unnamed_addr constant [3 x i8] c"ta\00", align 1
@.str.122.324 = private unnamed_addr constant [3 x i8] c"tl\00", align 1
@.str.123.325 = private unnamed_addr constant [3 x i8] c"ty\00", align 1
@.str.124.326 = private unnamed_addr constant [3 x i8] c"tc\00", align 1
@.str.125.327 = private unnamed_addr constant [3 x i8] c"tn\00", align 1
@.str.126.328 = private unnamed_addr constant [3 x i8] c"tg\00", align 1
@genre_last = internal global i32 147, align 4
@genre_list = internal global [148 x ptr] [ptr @.str.3.20, ptr @.str.4.21, ptr @.str.5.22, ptr @.str.6.23, ptr @.str.7, ptr @.str.8.24, ptr @.str.9.25, ptr @.str.10.26, ptr @.str.11.27, ptr @.str.12, ptr @.str.13.28, ptr @.str.14.29, ptr @.str.15.30, ptr @.str.16.31, ptr @.str.17.32, ptr @.str.18, ptr @.str.19, ptr @.str.20, ptr @.str.21, ptr @.str.22, ptr @.str.23, ptr @.str.24, ptr @.str.25, ptr @.str.26, ptr @.str.27, ptr @.str.28, ptr @.str.29, ptr @.str.30, ptr @.str.31, ptr @.str.32, ptr @.str.33, ptr @.str.34, ptr @.str.35, ptr @.str.36, ptr @.str.37, ptr @.str.38, ptr @.str.39, ptr @.str.40, ptr @.str.41, ptr @.str.42, ptr @.str.43, ptr @.str.44, ptr @.str.45, ptr @.str.46, ptr @.str.47, ptr @.str.48, ptr @.str.49, ptr @.str.50, ptr @.str.51, ptr @.str.52, ptr @.str.53, ptr @.str.54, ptr @.str.55, ptr @.str.56, ptr @.str.57, ptr @.str.58, ptr @.str.59, ptr @.str.60, ptr @.str.61, ptr @.str.62, ptr @.str.63, ptr @.str.64, ptr @.str.65, ptr @.str.66, ptr @.str.67, ptr @.str.68, ptr @.str.69, ptr @.str.70, ptr @.str.71, ptr @.str.72, ptr @.str.73, ptr @.str.74, ptr @.str.75, ptr @.str.76, ptr @.str.77, ptr @.str.78, ptr @.str.79, ptr @.str.80, ptr @.str.81, ptr @.str.82, ptr @.str.83, ptr @.str.84, ptr @.str.85, ptr @.str.86, ptr @.str.87, ptr @.str.88, ptr @.str.89, ptr @.str.90, ptr @.str.91, ptr @.str.92, ptr @.str.93, ptr @.str.94, ptr @.str.95, ptr @.str.96, ptr @.str.97, ptr @.str.98, ptr @.str.99, ptr @.str.100, ptr @.str.101, ptr @.str.102, ptr @.str.103, ptr @.str.104, ptr @.str.105, ptr @.str.106, ptr @.str.107, ptr @.str.108, ptr @.str.109, ptr @.str.110, ptr @.str.111, ptr @.str.112, ptr @.str.113, ptr @.str.114, ptr @.str.115, ptr @.str.116, ptr @.str.117, ptr @.str.118, ptr @.str.119, ptr @.str.120, ptr @.str.121, ptr @.str.122, ptr @.str.123, ptr @.str.124, ptr @.str.125, ptr @.str.126, ptr @.str.127, ptr @.str.128, ptr @.str.129, ptr @.str.130, ptr @.str.131, ptr @.str.132, ptr @.str.133, ptr @.str.134, ptr @.str.135, ptr @.str.136, ptr @.str.137, ptr @.str.138, ptr @.str.139, ptr @.str.140, ptr @.str.141, ptr @.str.142, ptr @.str.143, ptr @.str.144, ptr @.str.145, ptr @.str.146, ptr @.str.147, ptr @.str.148, ptr @.str.149, ptr @.str.150], align 16
@.str.127.329 = private unnamed_addr constant [44 x i8] c"Unknown genre: %s.  Specifiy genre number \0A\00", align 1
@.str.128.330 = private unnamed_addr constant [8 x i8] c"lowpass\00", align 1
@.str.129.331 = private unnamed_addr constant [61 x i8] c"Must specify lowpass with --lowpass freq, freq >= 0.001 kHz\0A\00", align 1
@.str.130.332 = private unnamed_addr constant [14 x i8] c"lowpass-width\00", align 1
@.str.131.333 = private unnamed_addr constant [69 x i8] c"Must specify lowpass width with --lowpass-width freq, freq >= 0 kHz\0A\00", align 1
@.str.132.334 = private unnamed_addr constant [9 x i8] c"highpass\00", align 1
@.str.133.335 = private unnamed_addr constant [63 x i8] c"Must specify highpass with --highpass freq, freq >= 0.001 kHz\0A\00", align 1
@.str.134.336 = private unnamed_addr constant [15 x i8] c"highpass-width\00", align 1
@.str.135.337 = private unnamed_addr constant [71 x i8] c"Must specify highpass width with --highpass-width freq, freq >= 0 kHz\0A\00", align 1
@.str.136.338 = private unnamed_addr constant [8 x i8] c"cwlimit\00", align 1
@.str.137.339 = private unnamed_addr constant [29 x i8] c"Must specify cwlimit in kHz\0A\00", align 1
@.str.138.340 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@.str.139.341 = private unnamed_addr constant [6 x i8] c"usage\00", align 1
@.str.140.342 = private unnamed_addr constant [7 x i8] c"preset\00", align 1
@.str.141.343 = private unnamed_addr constant [6 x i8] c"phone\00", align 1
@.str.142.344 = private unnamed_addr constant [3 x i8] c"fm\00", align 1
@.str.143.345 = private unnamed_addr constant [5 x i8] c"tape\00", align 1
@.str.144.346 = private unnamed_addr constant [5 x i8] c"hifi\00", align 1
@.str.145.347 = private unnamed_addr constant [3 x i8] c"cd\00", align 1
@.str.146.348 = private unnamed_addr constant [7 x i8] c"studio\00", align 1
@.str.147.349 = private unnamed_addr constant [84 x i8] c"%s: --preset type, type must be phone, voice, fm, tape, hifi, cd or studio, not %s\0A\00", align 1
@.str.148.350 = private unnamed_addr constant [23 x i8] c"%s: unrec option --%s\0A\00", align 1
@.str.149.351 = private unnamed_addr constant [38 x i8] c"%s: -m mode must be s/d/j/f/m not %s\0A\00", align 1
@.str.150.352 = private unnamed_addr constant [30 x i8] c"%s: -X n must be 0-6, not %s\0A\00", align 1
@.str.151.353 = private unnamed_addr constant [55 x i8] c"LAME not compiled with GTK support, -g not supported.\0A\00", align 1
@.str.152 = private unnamed_addr constant [33 x i8] c"%s: -e emp must be n/5/c not %s\0A\00", align 1
@.str.153 = private unnamed_addr constant [21 x i8] c"%s: unrec option %c\0A\00", align 1
@.str.154 = private unnamed_addr constant [19 x i8] c"%s: excess arg %s\0A\00", align 1
@.str.156 = private unnamed_addr constant [5 x i8] c".mp3\00", align 1
@.str.157.354 = private unnamed_addr constant [55 x i8] c"id3tag ignored: id3 tagging not supported for stdout.\0A\00", align 1
@L3psycho_anal.minval = internal global [63 x double] zeroinitializer, align 16
@L3psycho_anal.qthr_l = internal global [63 x double] zeroinitializer, align 16
@L3psycho_anal.qthr_s = internal global [63 x double] zeroinitializer, align 16
@L3psycho_anal.nb_1 = internal unnamed_addr global [4 x [63 x double]] zeroinitializer, align 16
@L3psycho_anal.nb_2 = internal unnamed_addr global [4 x [63 x double]] zeroinitializer, align 16
@L3psycho_anal.s3_s = internal global [64 x [64 x double]] zeroinitializer, align 16
@L3psycho_anal.s3_l = internal global [64 x [64 x double]] zeroinitializer, align 16
@L3psycho_anal.thm = internal unnamed_addr global [4 x %struct.III_psy_xmin] zeroinitializer, align 16
@L3psycho_anal.en = internal unnamed_addr global [4 x %struct.III_psy_xmin] zeroinitializer, align 16
@L3psycho_anal.cw_upper_index = internal unnamed_addr global i32 0, align 4
@L3psycho_anal.cw_lower_index = internal unnamed_addr global i1 false, align 4
@L3psycho_anal.ax_sav = internal unnamed_addr global [4 x [2 x [513 x float]]] zeroinitializer, align 16
@L3psycho_anal.bx_sav = internal unnamed_addr global [4 x [2 x [513 x float]]] zeroinitializer, align 16
@L3psycho_anal.rx_sav = internal unnamed_addr global [4 x [2 x [513 x float]]] zeroinitializer, align 16
@L3psycho_anal.cw = internal unnamed_addr global [513 x float] zeroinitializer, align 16
@L3psycho_anal.wsamp_L = internal global [2 x [1024 x float]] zeroinitializer, align 16
@L3psycho_anal.energy = internal unnamed_addr global [513 x float] zeroinitializer, align 16
@L3psycho_anal.wsamp_S = internal global [2 x [3 x [256 x float]]] zeroinitializer, align 16
@L3psycho_anal.energy_s = internal unnamed_addr global [3 x [129 x float]] zeroinitializer, align 16
@L3psycho_anal.eb = internal unnamed_addr global [63 x double] zeroinitializer, align 16
@L3psycho_anal.cb = internal unnamed_addr global [63 x double] zeroinitializer, align 16
@L3psycho_anal.thr = internal unnamed_addr global [63 x double] zeroinitializer, align 16
@L3psycho_anal.w1_l = internal global [21 x double] zeroinitializer, align 16
@L3psycho_anal.w2_l = internal global [21 x double] zeroinitializer, align 16
@L3psycho_anal.w1_s = internal global [12 x double] zeroinitializer, align 16
@L3psycho_anal.w2_s = internal global [12 x double] zeroinitializer, align 16
@L3psycho_anal.mld_l = internal unnamed_addr global [21 x double] zeroinitializer, align 16
@L3psycho_anal.mld_s = internal unnamed_addr global [12 x double] zeroinitializer, align 16
@L3psycho_anal.bu_l = internal global [21 x i32] zeroinitializer, align 16
@L3psycho_anal.bo_l = internal global [21 x i32] zeroinitializer, align 16
@L3psycho_anal.bu_s = internal global [12 x i32] zeroinitializer, align 16
@L3psycho_anal.bo_s = internal global [12 x i32] zeroinitializer, align 16
@L3psycho_anal.npart_l = internal unnamed_addr global i32 0, align 4
@L3psycho_anal.npart_s = internal unnamed_addr global i32 0, align 4
@L3psycho_anal.npart_l_orig = internal unnamed_addr global i32 0, align 4
@L3psycho_anal.npart_s_orig = internal unnamed_addr global i32 0, align 4
@L3psycho_anal.s3ind = internal unnamed_addr global [63 x [2 x i32]] zeroinitializer, align 16
@L3psycho_anal.s3ind_s = internal unnamed_addr global [63 x [2 x i32]] zeroinitializer, align 16
@L3psycho_anal.numlines_s = internal global [63 x i32] zeroinitializer, align 16
@L3psycho_anal.numlines_l = internal global [63 x i32] zeroinitializer, align 16
@L3psycho_anal.partition_l = internal global [513 x i32] zeroinitializer, align 16
@L3psycho_anal.pe = internal unnamed_addr global [4 x double] zeroinitializer, align 16
@L3psycho_anal.ms_ratio_s_old = internal unnamed_addr global double 0.000000e+00, align 8
@L3psycho_anal.ms_ratio_l_old = internal unnamed_addr global double 0.000000e+00, align 8
@L3psycho_anal.ms_ener_ratio_old = internal unnamed_addr global double 2.500000e-01, align 8
@L3psycho_anal.blocktype_old = internal unnamed_addr global [2 x i32] zeroinitializer, align 4
@.str.367 = private unnamed_addr constant [42 x i8] c"error, invalid sampling frequency: %d Hz\0A\00", align 1
@.str.1.368 = private unnamed_addr constant [26 x i8] c"Error in block selecting\0A\00", align 1
@.str.2.369 = private unnamed_addr constant [27 x i8] c"1. please check \22psy_data\22\00", align 1
@.str.3.370 = private unnamed_addr constant [27 x i8] c"3. please check \22psy_data\22\00", align 1
@.str.4.371 = private unnamed_addr constant [28 x i8] c"30:please check \22psy_data\22\0A\00", align 1
@.str.5.372 = private unnamed_addr constant [31 x i8] c"31l: please check \22psy_data.\22\0A\00", align 1
@.str.6.373 = private unnamed_addr constant [15 x i8] c"w1,w2: %f %f \0A\00", align 1
@.str.7.374 = private unnamed_addr constant [31 x i8] c"31s: please check \22psy_data.\22\0A\00", align 1
@sfBandIndex = internal global [6 x %struct.scalefac_struct] [%struct.scalefac_struct { [23 x i32] [i32 0, i32 6, i32 12, i32 18, i32 24, i32 30, i32 36, i32 44, i32 54, i32 66, i32 80, i32 96, i32 116, i32 140, i32 168, i32 200, i32 238, i32 284, i32 336, i32 396, i32 464, i32 522, i32 576], [14 x i32] [i32 0, i32 4, i32 8, i32 12, i32 18, i32 24, i32 32, i32 42, i32 56, i32 74, i32 100, i32 132, i32 174, i32 192] }, %struct.scalefac_struct { [23 x i32] [i32 0, i32 6, i32 12, i32 18, i32 24, i32 30, i32 36, i32 44, i32 54, i32 66, i32 80, i32 96, i32 114, i32 136, i32 162, i32 194, i32 232, i32 278, i32 332, i32 394, i32 464, i32 540, i32 576], [14 x i32] [i32 0, i32 4, i32 8, i32 12, i32 18, i32 26, i32 36, i32 48, i32 62, i32 80, i32 104, i32 136, i32 180, i32 192] }, %struct.scalefac_struct { [23 x i32] [i32 0, i32 6, i32 12, i32 18, i32 24, i32 30, i32 36, i32 44, i32 54, i32 66, i32 80, i32 96, i32 116, i32 140, i32 168, i32 200, i32 238, i32 284, i32 336, i32 396, i32 464, i32 522, i32 576], [14 x i32] [i32 0, i32 4, i32 8, i32 12, i32 18, i32 26, i32 36, i32 48, i32 62, i32 80, i32 104, i32 134, i32 174, i32 192] }, %struct.scalefac_struct { [23 x i32] [i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 30, i32 36, i32 44, i32 52, i32 62, i32 74, i32 90, i32 110, i32 134, i32 162, i32 196, i32 238, i32 288, i32 342, i32 418, i32 576], [14 x i32] [i32 0, i32 4, i32 8, i32 12, i32 16, i32 22, i32 30, i32 40, i32 52, i32 66, i32 84, i32 106, i32 136, i32 192] }, %struct.scalefac_struct { [23 x i32] [i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 30, i32 36, i32 42, i32 50, i32 60, i32 72, i32 88, i32 106, i32 128, i32 156, i32 190, i32 230, i32 276, i32 330, i32 384, i32 576], [14 x i32] [i32 0, i32 4, i32 8, i32 12, i32 16, i32 22, i32 28, i32 38, i32 50, i32 64, i32 80, i32 100, i32 126, i32 192] }, %struct.scalefac_struct { [23 x i32] [i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 30, i32 36, i32 44, i32 54, i32 66, i32 82, i32 102, i32 126, i32 156, i32 194, i32 240, i32 296, i32 364, i32 448, i32 550, i32 576], [14 x i32] [i32 0, i32 4, i32 8, i32 12, i32 16, i32 22, i32 30, i32 42, i32 58, i32 78, i32 104, i32 138, i32 180, i32 192] }], align 16
@ATH_l = internal global [21 x double] zeroinitializer, align 16
@ATH_s = internal global [21 x double] zeroinitializer, align 16
@adj43 = internal unnamed_addr global [8208 x double] zeroinitializer, align 16
@scale_bitcount.slen1 = internal unnamed_addr constant [16 x i32] [i32 1, i32 1, i32 1, i32 1, i32 8, i32 2, i32 2, i32 2, i32 4, i32 4, i32 4, i32 8, i32 8, i32 8, i32 16, i32 16], align 16
@scale_bitcount.slen2 = internal unnamed_addr constant [16 x i32] [i32 1, i32 2, i32 4, i32 8, i32 1, i32 2, i32 4, i32 8, i32 2, i32 4, i32 8, i32 2, i32 4, i32 8, i32 4, i32 8], align 16
@scale_bitcount.slen1_tab = internal unnamed_addr constant [16 x i32] [i32 0, i32 18, i32 36, i32 54, i32 54, i32 36, i32 54, i32 72, i32 54, i32 72, i32 90, i32 72, i32 90, i32 108, i32 108, i32 126], align 16
@scale_bitcount.slen2_tab = internal unnamed_addr constant [16 x i32] [i32 0, i32 10, i32 20, i32 30, i32 33, i32 21, i32 31, i32 41, i32 32, i32 42, i32 52, i32 43, i32 53, i32 63, i32 64, i32 74], align 16
@max_range_sfac_tab = internal unnamed_addr constant [6 x [4 x i32]] [[4 x i32] [i32 15, i32 15, i32 7, i32 7], [4 x i32] [i32 15, i32 15, i32 7, i32 0], [4 x i32] [i32 7, i32 3, i32 0, i32 0], [4 x i32] [i32 15, i32 31, i32 31, i32 0], [4 x i32] [i32 7, i32 7, i32 7, i32 0], [4 x i32] [i32 3, i32 3, i32 0, i32 0]], align 16
@scale_bitcount_lsf.log2tab = internal unnamed_addr constant [16 x i32] [i32 0, i32 1, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4], align 16
@bin_search_StepSize2.CurrentStep = internal unnamed_addr global i32 4, align 4
@reduce_sidechannel = internal global i32 0, align 4
@nr_of_sfb_block = internal global [6 x [3 x [4 x i32]]] [[3 x [4 x i32]] [[4 x i32] [i32 6, i32 5, i32 5, i32 5], [4 x i32] [i32 9, i32 9, i32 9, i32 9], [4 x i32] [i32 6, i32 9, i32 9, i32 9]], [3 x [4 x i32]] [[4 x i32] [i32 6, i32 5, i32 7, i32 3], [4 x i32] [i32 9, i32 9, i32 12, i32 6], [4 x i32] [i32 6, i32 9, i32 12, i32 6]], [3 x [4 x i32]] [[4 x i32] [i32 11, i32 10, i32 0, i32 0], [4 x i32] [i32 18, i32 18, i32 0, i32 0], [4 x i32] [i32 15, i32 18, i32 0, i32 0]], [3 x [4 x i32]] [[4 x i32] [i32 7, i32 7, i32 7, i32 0], [4 x i32] [i32 12, i32 12, i32 12, i32 0], [4 x i32] [i32 6, i32 15, i32 12, i32 0]], [3 x [4 x i32]] [[4 x i32] [i32 6, i32 6, i32 6, i32 3], [4 x i32] [i32 12, i32 9, i32 9, i32 6], [4 x i32] [i32 6, i32 12, i32 9, i32 6]], [3 x [4 x i32]] [[4 x i32] [i32 8, i32 8, i32 5, i32 0], [4 x i32] [i32 15, i32 12, i32 9, i32 0], [4 x i32] [i32 6, i32 18, i32 9, i32 0]]], align 16
@outer_loop.OldValue = internal unnamed_addr global [2 x i32] [i32 180, i32 180], align 4
@pow20 = internal global [256 x double] zeroinitializer, align 16
@ResvSize = internal unnamed_addr global i32 0, align 4
@ResvMax = internal unnamed_addr global i32 0, align 4
@cos64 = internal global [16 x double] zeroinitializer, align 16
@cos32 = internal global [8 x double] zeroinitializer, align 16
@cos16 = internal global [4 x double] zeroinitializer, align 16
@cos8 = internal global [2 x double] zeroinitializer, align 16
@cos4 = internal global [1 x double] zeroinitializer, align 8
@pnts = internal global [5 x ptr] [ptr @cos64, ptr @cos32, ptr @cos16, ptr @cos8, ptr @cos4], align 16
@decwin = internal global [544 x double] zeroinitializer, align 16
@intwinbase = internal unnamed_addr constant [257 x i64] [i64 0, i64 -1, i64 -1, i64 -1, i64 -1, i64 -1, i64 -1, i64 -2, i64 -2, i64 -2, i64 -2, i64 -3, i64 -3, i64 -4, i64 -4, i64 -5, i64 -5, i64 -6, i64 -7, i64 -7, i64 -8, i64 -9, i64 -10, i64 -11, i64 -13, i64 -14, i64 -16, i64 -17, i64 -19, i64 -21, i64 -24, i64 -26, i64 -29, i64 -31, i64 -35, i64 -38, i64 -41, i64 -45, i64 -49, i64 -53, i64 -58, i64 -63, i64 -68, i64 -73, i64 -79, i64 -85, i64 -91, i64 -97, i64 -104, i64 -111, i64 -117, i64 -125, i64 -132, i64 -139, i64 -147, i64 -154, i64 -161, i64 -169, i64 -176, i64 -183, i64 -190, i64 -196, i64 -202, i64 -208, i64 -213, i64 -218, i64 -222, i64 -225, i64 -227, i64 -228, i64 -228, i64 -227, i64 -224, i64 -221, i64 -215, i64 -208, i64 -200, i64 -189, i64 -177, i64 -163, i64 -146, i64 -127, i64 -106, i64 -83, i64 -57, i64 -29, i64 2, i64 36, i64 72, i64 111, i64 153, i64 197, i64 244, i64 294, i64 347, i64 401, i64 459, i64 519, i64 581, i64 645, i64 711, i64 779, i64 848, i64 919, i64 991, i64 1064, i64 1137, i64 1210, i64 1283, i64 1356, i64 1428, i64 1498, i64 1567, i64 1634, i64 1698, i64 1759, i64 1817, i64 1870, i64 1919, i64 1962, i64 2001, i64 2032, i64 2057, i64 2075, i64 2085, i64 2087, i64 2080, i64 2063, i64 2037, i64 2000, i64 1952, i64 1893, i64 1822, i64 1739, i64 1644, i64 1535, i64 1414, i64 1280, i64 1131, i64 970, i64 794, i64 605, i64 402, i64 185, i64 -45, i64 -288, i64 -545, i64 -814, i64 -1095, i64 -1388, i64 -1692, i64 -2006, i64 -2330, i64 -2663, i64 -3004, i64 -3351, i64 -3705, i64 -4063, i64 -4425, i64 -4788, i64 -5153, i64 -5517, i64 -5879, i64 -6237, i64 -6589, i64 -6935, i64 -7271, i64 -7597, i64 -7910, i64 -8209, i64 -8491, i64 -8755, i64 -8998, i64 -9219, i64 -9416, i64 -9585, i64 -9727, i64 -9838, i64 -9916, i64 -9959, i64 -9966, i64 -9935, i64 -9863, i64 -9750, i64 -9592, i64 -9389, i64 -9139, i64 -8840, i64 -8492, i64 -8092, i64 -7640, i64 -7134, i64 -6574, i64 -5959, i64 -5288, i64 -4561, i64 -3776, i64 -2935, i64 -2037, i64 -1082, i64 -70, i64 998, i64 2122, i64 3300, i64 4533, i64 5818, i64 7154, i64 8540, i64 9975, i64 11455, i64 12980, i64 14548, i64 16155, i64 17799, i64 19478, i64 21189, i64 22929, i64 24694, i64 26482, i64 28289, i64 30112, i64 31947, i64 33791, i64 35640, i64 37489, i64 39336, i64 41176, i64 43006, i64 44821, i64 46617, i64 48390, i64 50137, i64 51853, i64 53534, i64 55178, i64 56778, i64 58333, i64 59838, i64 61289, i64 62684, i64 64019, i64 65290, i64 66494, i64 67629, i64 68692, i64 69679, i64 70590, i64 71420, i64 72169, i64 72835, i64 73415, i64 73908, i64 74313, i64 74630, i64 74856, i64 74992, i64 75038], align 16
@t1HB = internal global [18 x i64] [i64 1, i64 1, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 1, i64 0], align 16
@t1l = internal global [18 x i8] c"\01\03\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\03", align 16
@t2HB = internal global [35 x i64] [i64 1, i64 2, i64 1, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 3, i64 1, i64 1, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 3, i64 2, i64 0], align 16
@t2l = internal global [35 x i8] c"\01\03\06\00\00\00\00\00\00\00\00\00\00\00\00\00\03\03\05\00\00\00\00\00\00\00\00\00\00\00\00\00\05\05\06", align 16
@t3HB = internal global [35 x i64] [i64 3, i64 2, i64 1, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 1, i64 1, i64 1, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 3, i64 2, i64 0], align 16
@t3l = internal global [35 x i8] c"\02\02\06\00\00\00\00\00\00\00\00\00\00\00\00\00\03\02\05\00\00\00\00\00\00\00\00\00\00\00\00\00\05\05\06", align 16
@t5HB = internal global [52 x i64] [i64 1, i64 2, i64 6, i64 5, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 3, i64 1, i64 4, i64 4, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 5, i64 7, i64 1, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 1, i64 1, i64 0], align 16
@t5l = internal global [52 x i8] c"\01\03\06\07\00\00\00\00\00\00\00\00\00\00\00\00\03\03\06\07\00\00\00\00\00\00\00\00\00\00\00\00\06\06\07\08\00\00\00\00\00\00\00\00\00\00\00\00\07\06\07\08", align 16
@t6HB = internal global [52 x i64] [i64 7, i64 3, i64 5, i64 1, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 2, i64 3, i64 2, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 4, i64 4, i64 1, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 3, i64 3, i64 2, i64 0], align 16
@t6l = internal global [52 x i8] c"\03\03\05\07\00\00\00\00\00\00\00\00\00\00\00\00\03\02\04\05\00\00\00\00\00\00\00\00\00\00\00\00\04\04\05\06\00\00\00\00\00\00\00\00\00\00\00\00\06\05\06\07", align 16
@t7HB = internal global [86 x i64] [i64 1, i64 2, i64 10, i64 19, i64 16, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 3, i64 3, i64 7, i64 10, i64 5, i64 3, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 4, i64 13, i64 17, i64 8, i64 4, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 12, i64 11, i64 18, i64 15, i64 11, i64 2, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 6, i64 9, i64 14, i64 3, i64 1, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 4, i64 5, i64 3, i64 2, i64 0], align 16
@t7l = internal global [86 x i8] c"\01\03\06\08\08\09\00\00\00\00\00\00\00\00\00\00\03\04\06\07\07\08\00\00\00\00\00\00\00\00\00\00\06\05\07\08\08\09\00\00\00\00\00\00\00\00\00\00\07\07\08\09\09\09\00\00\00\00\00\00\00\00\00\00\07\07\08\09\09\0A\00\00\00\00\00\00\00\00\00\00\08\08\09\0A\0A\0A", align 16
@t8HB = internal global [86 x i64] [i64 3, i64 4, i64 6, i64 18, i64 12, i64 5, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 1, i64 2, i64 16, i64 9, i64 3, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 3, i64 5, i64 14, i64 7, i64 3, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 19, i64 17, i64 15, i64 13, i64 10, i64 4, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 13, i64 5, i64 8, i64 11, i64 5, i64 1, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 12, i64 4, i64 4, i64 1, i64 1, i64 0], align 16
@t8l = internal global [86 x i8] c"\02\03\06\08\08\09\00\00\00\00\00\00\00\00\00\00\03\02\04\08\08\08\00\00\00\00\00\00\00\00\00\00\06\04\06\08\08\09\00\00\00\00\00\00\00\00\00\00\08\08\08\09\09\0A\00\00\00\00\00\00\00\00\00\00\08\07\08\09\0A\0A\00\00\00\00\00\00\00\00\00\00\09\08\09\09\0B\0B", align 16
@t9HB = internal global [86 x i64] [i64 7, i64 5, i64 9, i64 14, i64 15, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 4, i64 5, i64 5, i64 6, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 6, i64 8, i64 8, i64 8, i64 5, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 15, i64 6, i64 9, i64 10, i64 5, i64 1, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 7, i64 9, i64 6, i64 4, i64 1, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 14, i64 4, i64 6, i64 2, i64 6, i64 0], align 16
@t9l = internal global [86 x i8] c"\03\03\05\06\08\09\00\00\00\00\00\00\00\00\00\00\03\03\04\05\06\08\00\00\00\00\00\00\00\00\00\00\04\04\05\06\07\08\00\00\00\00\00\00\00\00\00\00\06\05\06\07\07\08\00\00\00\00\00\00\00\00\00\00\07\06\07\07\08\09\00\00\00\00\00\00\00\00\00\00\08\07\08\08\09\09", align 16
@t10HB = internal global [120 x i64] [i64 1, i64 2, i64 10, i64 23, i64 35, i64 30, i64 12, i64 17, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 3, i64 3, i64 8, i64 12, i64 18, i64 21, i64 12, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 9, i64 15, i64 21, i64 32, i64 40, i64 19, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 14, i64 13, i64 22, i64 34, i64 46, i64 23, i64 18, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 20, i64 19, i64 33, i64 47, i64 27, i64 22, i64 9, i64 3, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 31, i64 22, i64 41, i64 26, i64 21, i64 20, i64 5, i64 3, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 14, i64 13, i64 10, i64 11, i64 16, i64 6, i64 5, i64 1, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 8, i64 7, i64 8, i64 4, i64 4, i64 2, i64 0], align 16
@t10l = internal global [120 x i8] c"\01\03\06\08\09\09\09\0A\00\00\00\00\00\00\00\00\03\04\06\07\08\09\08\08\00\00\00\00\00\00\00\00\06\06\07\08\09\0A\09\09\00\00\00\00\00\00\00\00\07\07\08\09\0A\0A\09\0A\00\00\00\00\00\00\00\00\08\08\09\0A\0A\0A\0A\0A\00\00\00\00\00\00\00\00\09\09\0A\0A\0B\0B\0A\0B\00\00\00\00\00\00\00\00\08\08\09\0A\0A\0A\0B\0B\00\00\00\00\00\00\00\00\09\08\09\0A\0A\0B\0B\0B", align 16
@t11HB = internal global [120 x i64] [i64 3, i64 4, i64 10, i64 24, i64 34, i64 33, i64 21, i64 15, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 3, i64 4, i64 10, i64 32, i64 17, i64 11, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 7, i64 13, i64 18, i64 30, i64 31, i64 20, i64 5, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 25, i64 11, i64 19, i64 59, i64 27, i64 18, i64 12, i64 5, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 35, i64 33, i64 31, i64 58, i64 30, i64 16, i64 7, i64 5, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 28, i64 26, i64 32, i64 19, i64 17, i64 15, i64 8, i64 14, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 14, i64 12, i64 9, i64 13, i64 14, i64 9, i64 4, i64 1, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 4, i64 6, i64 6, i64 6, i64 3, i64 2, i64 0], align 16
@t11l = internal global [120 x i8] c"\02\03\05\07\08\09\08\09\00\00\00\00\00\00\00\00\03\03\04\06\08\08\07\08\00\00\00\00\00\00\00\00\05\05\06\07\08\09\08\08\00\00\00\00\00\00\00\00\07\06\07\09\08\0A\08\09\00\00\00\00\00\00\00\00\08\08\08\09\09\0A\09\0A\00\00\00\00\00\00\00\00\08\08\09\0A\0A\0B\0A\0B\00\00\00\00\00\00\00\00\08\07\07\08\09\0A\0A\0A\00\00\00\00\00\00\00\00\08\07\08\09\0A\0A\0A\0A", align 16
@t12HB = internal global [120 x i64] [i64 9, i64 6, i64 16, i64 33, i64 41, i64 39, i64 38, i64 26, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 5, i64 6, i64 9, i64 23, i64 16, i64 26, i64 11, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 17, i64 7, i64 11, i64 14, i64 21, i64 30, i64 10, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 17, i64 10, i64 15, i64 12, i64 18, i64 28, i64 14, i64 5, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 32, i64 13, i64 22, i64 19, i64 18, i64 16, i64 9, i64 5, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 40, i64 17, i64 31, i64 29, i64 17, i64 13, i64 4, i64 2, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 27, i64 12, i64 11, i64 15, i64 10, i64 7, i64 4, i64 1, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 27, i64 12, i64 8, i64 12, i64 6, i64 3, i64 1, i64 0], align 16
@t12l = internal global [120 x i8] c"\04\03\05\07\08\09\09\09\00\00\00\00\00\00\00\00\03\03\04\05\07\07\08\08\00\00\00\00\00\00\00\00\05\04\05\06\07\08\07\08\00\00\00\00\00\00\00\00\06\05\06\06\07\08\08\08\00\00\00\00\00\00\00\00\07\06\07\07\08\08\08\09\00\00\00\00\00\00\00\00\08\07\08\08\08\09\08\09\00\00\00\00\00\00\00\00\08\07\07\08\08\09\09\0A\00\00\00\00\00\00\00\00\09\08\08\09\09\09\09\0A", align 16
@t13HB = internal global [256 x i64] [i64 1, i64 5, i64 14, i64 21, i64 34, i64 51, i64 46, i64 71, i64 42, i64 52, i64 68, i64 52, i64 67, i64 44, i64 43, i64 19, i64 3, i64 4, i64 12, i64 19, i64 31, i64 26, i64 44, i64 33, i64 31, i64 24, i64 32, i64 24, i64 31, i64 35, i64 22, i64 14, i64 15, i64 13, i64 23, i64 36, i64 59, i64 49, i64 77, i64 65, i64 29, i64 40, i64 30, i64 40, i64 27, i64 33, i64 42, i64 16, i64 22, i64 20, i64 37, i64 61, i64 56, i64 79, i64 73, i64 64, i64 43, i64 76, i64 56, i64 37, i64 26, i64 31, i64 25, i64 14, i64 35, i64 16, i64 60, i64 57, i64 97, i64 75, i64 114, i64 91, i64 54, i64 73, i64 55, i64 41, i64 48, i64 53, i64 23, i64 24, i64 58, i64 27, i64 50, i64 96, i64 76, i64 70, i64 93, i64 84, i64 77, i64 58, i64 79, i64 29, i64 74, i64 49, i64 41, i64 17, i64 47, i64 45, i64 78, i64 74, i64 115, i64 94, i64 90, i64 79, i64 69, i64 83, i64 71, i64 50, i64 59, i64 38, i64 36, i64 15, i64 72, i64 34, i64 56, i64 95, i64 92, i64 85, i64 91, i64 90, i64 86, i64 73, i64 77, i64 65, i64 51, i64 44, i64 43, i64 42, i64 43, i64 20, i64 30, i64 44, i64 55, i64 78, i64 72, i64 87, i64 78, i64 61, i64 46, i64 54, i64 37, i64 30, i64 20, i64 16, i64 53, i64 25, i64 41, i64 37, i64 44, i64 59, i64 54, i64 81, i64 66, i64 76, i64 57, i64 54, i64 37, i64 18, i64 39, i64 11, i64 35, i64 33, i64 31, i64 57, i64 42, i64 82, i64 72, i64 80, i64 47, i64 58, i64 55, i64 21, i64 22, i64 26, i64 38, i64 22, i64 53, i64 25, i64 23, i64 38, i64 70, i64 60, i64 51, i64 36, i64 55, i64 26, i64 34, i64 23, i64 27, i64 14, i64 9, i64 7, i64 34, i64 32, i64 28, i64 39, i64 49, i64 75, i64 30, i64 52, i64 48, i64 40, i64 52, i64 28, i64 18, i64 17, i64 9, i64 5, i64 45, i64 21, i64 34, i64 64, i64 56, i64 50, i64 49, i64 45, i64 31, i64 19, i64 12, i64 15, i64 10, i64 7, i64 6, i64 3, i64 48, i64 23, i64 20, i64 39, i64 36, i64 35, i64 53, i64 21, i64 16, i64 23, i64 13, i64 10, i64 6, i64 1, i64 4, i64 2, i64 16, i64 15, i64 17, i64 27, i64 25, i64 20, i64 29, i64 11, i64 17, i64 12, i64 16, i64 8, i64 1, i64 1, i64 0, i64 1], align 16
@t13l = internal global [256 x i8] c"\01\04\06\07\08\09\09\0A\09\0A\0B\0B\0C\0C\0D\0D\03\04\06\07\08\08\09\09\09\09\0A\0A\0B\0C\0C\0C\06\06\07\08\09\09\0A\0A\09\0A\0A\0B\0B\0C\0D\0D\07\07\08\09\09\0A\0A\0A\0A\0B\0B\0B\0B\0C\0D\0D\08\07\09\09\0A\0A\0B\0B\0A\0B\0B\0C\0C\0D\0D\0E\09\08\09\0A\0A\0A\0B\0B\0B\0B\0C\0B\0D\0D\0E\0E\09\09\0A\0A\0B\0B\0B\0B\0B\0C\0C\0C\0D\0D\0E\0E\0A\09\0A\0B\0B\0B\0C\0C\0C\0C\0D\0D\0D\0E\10\10\09\08\09\0A\0A\0B\0B\0C\0C\0C\0C\0D\0D\0E\0F\0F\0A\09\0A\0A\0B\0B\0B\0D\0C\0D\0D\0E\0E\0E\10\0F\0A\0A\0A\0B\0B\0C\0C\0D\0C\0D\0E\0D\0E\0F\10\11\0B\0A\0A\0B\0C\0C\0C\0C\0D\0D\0D\0E\0F\0F\0F\10\0B\0B\0B\0C\0C\0D\0C\0D\0E\0E\0F\0F\0F\10\10\10\0C\0B\0C\0D\0D\0D\0E\0E\0E\0E\0E\0F\10\0F\10\10\0D\0C\0C\0D\0D\0D\0F\0E\0E\11\0F\0F\0F\11\10\10\0C\0C\0D\0E\0E\0E\0F\0E\0F\0F\10\10\13\12\13\10", align 16
@t15HB = internal global [256 x i64] [i64 7, i64 12, i64 18, i64 53, i64 47, i64 76, i64 124, i64 108, i64 89, i64 123, i64 108, i64 119, i64 107, i64 81, i64 122, i64 63, i64 13, i64 5, i64 16, i64 27, i64 46, i64 36, i64 61, i64 51, i64 42, i64 70, i64 52, i64 83, i64 65, i64 41, i64 59, i64 36, i64 19, i64 17, i64 15, i64 24, i64 41, i64 34, i64 59, i64 48, i64 40, i64 64, i64 50, i64 78, i64 62, i64 80, i64 56, i64 33, i64 29, i64 28, i64 25, i64 43, i64 39, i64 63, i64 55, i64 93, i64 76, i64 59, i64 93, i64 72, i64 54, i64 75, i64 50, i64 29, i64 52, i64 22, i64 42, i64 40, i64 67, i64 57, i64 95, i64 79, i64 72, i64 57, i64 89, i64 69, i64 49, i64 66, i64 46, i64 27, i64 77, i64 37, i64 35, i64 66, i64 58, i64 52, i64 91, i64 74, i64 62, i64 48, i64 79, i64 63, i64 90, i64 62, i64 40, i64 38, i64 125, i64 32, i64 60, i64 56, i64 50, i64 92, i64 78, i64 65, i64 55, i64 87, i64 71, i64 51, i64 73, i64 51, i64 70, i64 30, i64 109, i64 53, i64 49, i64 94, i64 88, i64 75, i64 66, i64 122, i64 91, i64 73, i64 56, i64 42, i64 64, i64 44, i64 21, i64 25, i64 90, i64 43, i64 41, i64 77, i64 73, i64 63, i64 56, i64 92, i64 77, i64 66, i64 47, i64 67, i64 48, i64 53, i64 36, i64 20, i64 71, i64 34, i64 67, i64 60, i64 58, i64 49, i64 88, i64 76, i64 67, i64 106, i64 71, i64 54, i64 38, i64 39, i64 23, i64 15, i64 109, i64 53, i64 51, i64 47, i64 90, i64 82, i64 58, i64 57, i64 48, i64 72, i64 57, i64 41, i64 23, i64 27, i64 62, i64 9, i64 86, i64 42, i64 40, i64 37, i64 70, i64 64, i64 52, i64 43, i64 70, i64 55, i64 42, i64 25, i64 29, i64 18, i64 11, i64 11, i64 118, i64 68, i64 30, i64 55, i64 50, i64 46, i64 74, i64 65, i64 49, i64 39, i64 24, i64 16, i64 22, i64 13, i64 14, i64 7, i64 91, i64 44, i64 39, i64 38, i64 34, i64 63, i64 52, i64 45, i64 31, i64 52, i64 28, i64 19, i64 14, i64 8, i64 9, i64 3, i64 123, i64 60, i64 58, i64 53, i64 47, i64 43, i64 32, i64 22, i64 37, i64 24, i64 17, i64 12, i64 15, i64 10, i64 2, i64 1, i64 71, i64 37, i64 34, i64 30, i64 28, i64 20, i64 17, i64 26, i64 21, i64 16, i64 10, i64 6, i64 8, i64 6, i64 2, i64 0], align 16
@t15l = internal global [256 x i8] calign 16
@t16HB = internal global [256 x i64] [i64 1, i64 5, i64 14, i64 44, i64 74, i64 63, i64 110, i64 93, i64 172, i64 149, i64 138, i64 242, i64 225, i64 195, i64 376, i64 17, i64 3, i64 4, i64 12, i64 20, i64 35, i64 62, i64 53, i64 47, i64 83, i64 75, i64 68, i64 119, i64 201, i64 107, i64 207, i64 9, i64 15, i64 13, i64 23, i64 38, i64 67, i64 58, i64 103, i64 90, i64 161, i64 72, i64 127, i64 117, i64 110, i64 209, i64 206, i64 16, i64 45, i64 21, i64 39, i64 69, i64 64, i64 114, i64 99, i64 87, i64 158, i64 140, i64 252, i64 212, i64 199, i64 387, i64 365, i64 26, i64 75, i64 36, i64 68, i64 65, i64 115, i64 101, i64 179, i64 164, i64 155, i64 264, i64 246, i64 226, i64 395, i64 382, i64 362, i64 9, i64 66, i64 30, i64 59, i64 56, i64 102, i64 185, i64 173, i64 265, i64 142, i64 253, i64 232, i64 400, i64 388, i64 378, i64 445, i64 16, i64 111, i64 54, i64 52, i64 100, i64 184, i64 178, i64 160, i64 133, i64 257, i64 244, i64 228, i64 217, i64 385, i64 366, i64 715, i64 10, i64 98, i64 48, i64 91, i64 88, i64 165, i64 157, i64 148, i64 261, i64 248, i64 407, i64 397, i64 372, i64 380, i64 889, i64 884, i64 8, i64 85, i64 84, i64 81, i64 159, i64 156, i64 143, i64 260, i64 249, i64 427, i64 401, i64 392, i64 383, i64 727, i64 713, i64 708, i64 7, i64 154, i64 76, i64 73, i64 141, i64 131, i64 256, i64 245, i64 426, i64 406, i64 394, i64 384, i64 735, i64 359, i64 710, i64 352, i64 11, i64 139, i64 129, i64 67, i64 125, i64 247, i64 233, i64 229, i64 219, i64 393, i64 743, i64 737, i64 720, i64 885, i64 882, i64 439, i64 4, i64 243, i64 120, i64 118, i64 115, i64 227, i64 223, i64 396, i64 746, i64 742, i64 736, i64 721, i64 712, i64 706, i64 223, i64 436, i64 6, i64 202, i64 224, i64 222, i64 218, i64 216, i64 389, i64 386, i64 381, i64 364, i64 888, i64 443, i64 707, i64 440, i64 437, i64 1728, i64 4, i64 747, i64 211, i64 210, i64 208, i64 370, i64 379, i64 734, i64 723, i64 714, i64 1735, i64 883, i64 877, i64 876, i64 3459, i64 865, i64 2, i64 377, i64 369, i64 102, i64 187, i64 726, i64 722, i64 358, i64 711, i64 709, i64 866, i64 1734, i64 871, i64 3458, i64 870, i64 434, i64 0, i64 12, i64 10, i64 7, i64 11, i64 10, i64 17, i64 11, i64 9, i64 13, i64 12, i64 10, i64 7, i64 5, i64 3, i64 1, i64 3], align 16
@t16l = internal global [256 x i8] c"\01\04\06\08\09\09\0A\0A\0B\0B\0B\0C\0C\0C\0D\09\03\04\06\07\08\09\09\09\0A\0A\0A\0B\0C\0B\0C\08\06\06\07\08\09\09\0A\0A\0B\0A\0B\0B\0B\0C\0C\09\08\07\08\09\09\0A\0A\0A\0B\0B\0C\0C\0C\0D\0D\0A\09\08\09\09\0A\0A\0B\0B\0B\0C\0C\0C\0D\0D\0D\09\09\08\09\09\0A\0B\0B\0C\0B\0C\0C\0D\0D\0D\0E\0A\0A\09\09\0A\0B\0B\0B\0B\0C\0C\0C\0C\0D\0D\0E\0A\0A\09\0A\0A\0B\0B\0B\0C\0C\0D\0D\0D\0D\0F\0F\0A\0A\0A\0A\0B\0B\0B\0C\0C\0D\0D\0D\0D\0E\0E\0E\0A\0B\0A\0A\0B\0B\0C\0C\0D\0D\0D\0D\0E\0D\0E\0D\0B\0B\0B\0A\0B\0C\0C\0C\0C\0D\0E\0E\0E\0F\0F\0E\0A\0C\0B\0B\0B\0C\0C\0D\0E\0E\0E\0E\0E\0E\0D\0E\0B\0C\0C\0C\0C\0C\0D\0D\0D\0D\0F\0E\0E\0E\0E\10\0B\0E\0C\0C\0C\0D\0D\0E\0E\0E\10\0F\0F\0F\11\0F\0B\0D\0D\0B\0C\0E\0E\0D\0E\0E\0F\10\0F\11\0F\0E\0B\09\08\08\09\09\0A\0A\0A\0B\0B\0B\0B\0B\0B\0B\08", align 16
@t24HB = internal global [256 x i64] [i64 15, i64 13, i64 46, i64 80, i64 146, i64 262, i64 248, i64 434, i64 426, i64 669, i64 653, i64 649, i64 621, i64 517, i64 1032, i64 88, i64 14, i64 12, i64 21, i64 38, i64 71, i64 130, i64 122, i64 216, i64 209, i64 198, i64 327, i64 345, i64 319, i64 297, i64 279, i64 42, i64 47, i64 22, i64 41, i64 74, i64 68, i64 128, i64 120, i64 221, i64 207, i64 194, i64 182, i64 340, i64 315, i64 295, i64 541, i64 18, i64 81, i64 39, i64 75, i64 70, i64 134, i64 125, i64 116, i64 220, i64 204, i64 190, i64 178, i64 325, i64 311, i64 293, i64 271, i64 16, i64 147, i64 72, i64 69, i64 135, i64 127, i64 118, i64 112, i64 210, i64 200, i64 188, i64 352, i64 323, i64 306, i64 285, i64 540, i64 14, i64 263, i64 66, i64 129, i64 126, i64 119, i64 114, i64 214, i64 202, i64 192, i64 180, i64 341, i64 317, i64 301, i64 281, i64 262, i64 12, i64 249, i64 123, i64 121, i64 117, i64 113, i64 215, i64 206, i64 195, i64 185, i64 347, i64 330, i64 308, i64 291, i64 272, i64 520, i64 10, i64 435, i64 115, i64 111, i64 109, i64 211, i64 203, i64 196, i64 187, i64 353, i64 332, i64 313, i64 298, i64 283, i64 531, i64 381, i64 17, i64 427, i64 212, i64 208, i64 205, i64 201, i64 193, i64 186, i64 177, i64 169, i64 320, i64 303, i64 286, i64 268, i64 514, i64 377, i64 16, i64 335, i64 199, i64 197, i64 191, i64 189, i64 181, i64 174, i64 333, i64 321, i64 305, i64 289, i64 275, i64 521, i64 379, i64 371, i64 11, i64 668, i64 184, i64 183, i64 179, i64 175, i64 344, i64 331, i64 314, i64 304, i64 290, i64 277, i64 530, i64 383, i64 373, i64 366, i64 10, i64 652, i64 346, i64 171, i64 168, i64 164, i64 318, i64 309, i64 299, i64 287, i64 276, i64 263, i64 513, i64 375, i64 368, i64 362, i64 6, i64 648, i64 322, i64 316, i64 312, i64 307, i64 302, i64 292, i64 284, i64 269, i64 261, i64 512, i64 376, i64 370, i64 364, i64 359, i64 4, i64 620, i64 300, i64 296, i64 294, i64 288, i64 282, i64 273, i64 266, i64 515, i64 380, i64 374, i64 369, i64 365, i64 361, i64 357, i64 2, i64 1033, i64 280, i64 278, i64 274, i64 267, i64 264, i64 259, i64 382, i64 378, i64 372, i64 367, i64 363, i64 360, i64 358, i64 356, i64 0, i64 43, i64 20, i64 19, i64 17, i64 15, i64 13, i64 11, i64 9, i64 7, i64 6, i64 4, i64 7, i64 5, i64 3, i64 1, i64 3], align 16
@t24l = internal global [256 x i8] calign 16
@t32HB = internal global [16 x i64] [i64 1, i64 5, i64 4, i64 5, i64 6, i64 5, i64 4, i64 4, i64 7, i64 3, i64 6, i64 0, i64 7, i64 2, i64 3, i64 1], align 16
@t32l = internal global [16 x i8] c"\01\04\04\05\04\06\05\06\04\05\05\06\05\06\06\06", align 16
@t33HB = internal global [16 x i64] [i64 15, i64 14, i64 13, i64 12, i64 11, i64 10, i64 9, i64 8, i64 7, i64 6, i64 5, i64 4, i64 3, i64 2, i64 1, i64 0], align 16
@t33l = internal global [16 x i8] c"\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04", align 16
@psy_data = internal global [4926 x double] [double 4.800000e+04, double 6.100000e+01, double 0.000000e+00, double 1.000000e+00, double 2.450000e+01, double 4.532000e+00, double 0x3FEF0A3D70A3D70A, double 0.000000e+00, double 1.000000e+00, double 1.000000e+00, double 2.450000e+01, double 4.532000e+00, double 7.550000e-01, double 4.690000e-01, double 2.000000e+00, double 1.000000e+00, double 2.450000e+01, double 4.532000e+00, double 7.380000e-01, double 0x3FEE04189374BC6A, double 3.000000e+00, double 1.000000e+00, double 2.450000e+01, double 9.040000e-01, double 7.300000e-01, double 1.406000e+00, double 4.000000e+00, double 1.000000e+00, double 2.450000e+01, double 9.040000e-01, double 0x3FE72B020C49BA5E, double 1.875000e+00, double 5.000000e+00, double 1.000000e+00, double 2.000000e+01, double 0x3FB70A3D70A3D70A, double 7.230000e-01, double 2.344000e+00, double 6.000000e+00, double 1.000000e+00, double 2.000000e+01, double 0x3FB70A3D70A3D70A, double 7.230000e-01, double 2.813000e+00, double 7.000000e+00, double 1.000000e+00, double 2.000000e+01, double 2.900000e-02, double 7.230000e-01, double 3.281000e+00, double 8.000000e+00, double 1.000000e+00, double 2.000000e+01, double 2.900000e-02, double 7.180000e-01, double 3.750000e+00, double 9.000000e+00, double 1.000000e+00, double 2.000000e+01, double 0x3F826E978D4FDF3B, double 6.900000e-01, double 4.199000e+00, double 1.000000e+01, double 1.000000e+00, double 2.000000e+01, double 0x3F826E978D4FDF3B, double 6.600000e-01, double 4.625000e+00, double 1.100000e+01, double 1.000000e+00, double 1.800000e+01, double 0x3F826E978D4FDF3B, double 6.410000e-01, double 5.047000e+00, double 1.200000e+01, double 1.000000e+00, double 1.800000e+01, double 0x3F826E978D4FDF3B, double 6.000000e-01, double 5.438000e+00, double 1.300000e+01, double 1.000000e+00, double 1.800000e+01, double 0x3F826E978D4FDF3B, double 5.840000e-01, double 5.828000e+00, double 1.400000e+01, double 1.000000e+00, double 1.200000e+01, double 0x3F826E978D4FDF3B, double 5.320000e-01, double 6.188000e+00, double 1.500000e+01, double 1.000000e+00, double 1.200000e+01, double 0x3F826E978D4FDF3B, double 5.370000e-01, double 6.522000e+00, double 1.600000e+01, double 2.000000e+00, double 6.000000e+00, double 1.800000e-02, double 0x3FEB6C8B43958106, double 7.174000e+00, double 1.700000e+01, double 2.000000e+00, double 6.000000e+00, double 1.800000e-02, double 8.580000e-01, double 7.801000e+00, double 1.800000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 0x3FEB4BC6A7EF9DB2, double 8.402000e+00, double 1.900000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 8.240000e-01, double 8.966000e+00, double 2.000000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 7.780000e-01, double 0x4022F7CED916872B, double 2.100000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 0x3FE7AE147AE147AE, double 0x4023EE978D4FDF3B, double 2.200000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 7.090000e-01, double 1.042600e+01, double 2.300000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 6.760000e-01, double 1.086600e+01, double 2.400000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 6.320000e-01, double 1.127900e+01, double 2.500000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 5.920000e-01, double 1.166900e+01, double 2.600000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 5.530000e-01, double 1.204200e+01, double 2.700000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 5.100000e-01, double 1.238600e+01, double 2.800000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 5.130000e-01, double 1.272100e+01, double 2.900000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 6.080000e-01, double 1.311500e+01, double 3.000000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 6.730000e-01, double 1.356200e+01, double 3.100000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 6.370000e-01, double 1.398400e+01, double 3.200000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 5.860000e-01, double 1.437100e+01, double 3.300000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 5.710000e-01, double 1.474100e+01, double 3.400000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 6.160000e-01, double 1.514000e+01, double 3.500000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 6.400000e-01, double 1.556300e+01, double 3.600000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 5.980000e-01, double 1.596200e+01, double 3.700000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 5.380000e-01, double 1.632400e+01, double 3.800000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 5.120000e-01, double 1.666500e+01, double 3.900000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 5.280000e-01, double 1.702000e+01, double 4.000000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 5.170000e-01, double 1.737300e+01, double 4.100000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 4.930000e-01, double 1.770800e+01, double 4.200000e+01, double 6.000000e+00, double 0.000000e+00, double 5.400000e-02, double 4.990000e-01, double 1.804500e+01, double 4.300000e+01, double 7.000000e+00, double 0.000000e+00, double 6.300000e-02, double 5.250000e-01, double 1.839800e+01, double 4.400000e+01, double 7.000000e+00, double 0.000000e+00, double 6.300000e-02, double 5.410000e-01, double 1.876200e+01, double 4.500000e+01, double 8.000000e+00, double 0.000000e+00, double 0x3FB26E978D4FDF3B, double 5.280000e-01, double 1.912000e+01, double 4.600000e+01, double 8.000000e+00, double 0.000000e+00, double 0x3FB26E978D4FDF3B, double 5.100000e-01, double 1.946600e+01, double 4.700000e+01, double 8.000000e+00, double 0.000000e+00, double 0x3FB26E978D4FDF3B, double 5.060000e-01, double 1.980700e+01, double 4.800000e+01, double 1.000000e+01, double 0.000000e+00, double 1.800000e-01, double 5.250000e-01, double 2.015900e+01, double 4.900000e+01, double 1.000000e+01, double 0.000000e+00, double 1.800000e-01, double 5.360000e-01, double 2.052200e+01, double 5.000000e+01, double 1.000000e+01, double 0.000000e+00, double 1.800000e-01, double 5.180000e-01, double 2.087400e+01, double 5.100000e+01, double 1.300000e+01, double 0.000000e+00, double 3.720000e-01, double 5.010000e-01, double 2.121400e+01, double 5.200000e+01, double 1.300000e+01, double 0.000000e+00, double 3.720000e-01, double 4.970000e-01, double 2.155300e+01, double 5.300000e+01, double 1.400000e+01, double 0.000000e+00, double 4.000000e-01, double 4.970000e-01, double 2.189200e+01, double 5.400000e+01, double 1.800000e+01, double 0.000000e+00, double 1.627000e+00, double 4.950000e-01, double 2.223100e+01, double 5.500000e+01, double 1.800000e+01, double 0.000000e+00, double 1.627000e+00, double 4.940000e-01, double 2.256900e+01, double 5.600000e+01, double 2.000000e+01, double 0.000000e+00, double 1.808000e+00, double 4.970000e-01, double 2.290900e+01, double 5.700000e+01, double 2.500000e+01, double 0.000000e+00, double 2.260700e+01, double 4.940000e-01, double 2.324800e+01, double 5.800000e+01, double 2.500000e+01, double 0.000000e+00, double 2.260700e+01, double 4.870000e-01, double 2.358300e+01, double 5.900000e+01, double 3.500000e+01, double 0.000000e+00, double 3.165000e+01, double 4.830000e-01, double 2.391500e+01, double 6.000000e+01, double 6.700000e+01, double 0.000000e+00, double 6.058670e+02, double 4.820000e-01, double 2.424600e+01, double 6.100000e+01, double 6.700000e+01, double 0.000000e+00, double 6.058670e+02, double 5.240000e-01, double 2.457600e+01, double 4.410000e+04, double 6.200000e+01, double 0.000000e+00, double 1.000000e+00, double 2.450000e+01, double 4.532000e+00, double 9.510000e-01, double 0.000000e+00, double 1.000000e+00, double 1.000000e+00, double 2.450000e+01, double 4.532000e+00, double 0x3FE6666666666666, double 4.310000e-01, double 2.000000e+00, double 1.000000e+00, double 2.450000e+01, double 4.532000e+00, double 6.810000e-01, double 0x3FEB8D4FDF3B645A, double 3.000000e+00, double 1.000000e+00, double 2.450000e+01, double 9.040000e-01, double 6.750000e-01, double 1.292000e+00, double 4.000000e+00, double 1.000000e+00, double 2.450000e+01, double 9.040000e-01, double 6.670000e-01, double 1.723000e+00, double 5.000000e+00, double 1.000000e+00, double 2.000000e+01, double 0x3FB70A3D70A3D70A, double 6.650000e-01, double 2.153000e+00, double 6.000000e+00, double 1.000000e+00, double 2.000000e+01, double 0x3FB70A3D70A3D70A, double 6.640000e-01, double 2.584000e+00, double 7.000000e+00, double 1.000000e+00, double 2.000000e+01, double 2.900000e-02, double 6.640000e-01, double 3.015000e+00, double 8.000000e+00, double 1.000000e+00, double 2.000000e+01, double 2.900000e-02, double 6.640000e-01, double 3.445000e+00, double 9.000000e+00, double 1.000000e+00, double 2.000000e+01, double 2.900000e-02, double 6.550000e-01, double 3.876000e+00, double 1.000000e+01, double 1.000000e+00, double 2.000000e+01, double 0x3F826E978D4FDF3B, double 6.160000e-01, double 4.279000e+00, double 1.100000e+01, double 1.000000e+00, double 2.000000e+01, double 0x3F826E978D4FDF3B, double 5.970000e-01, double 4.670000e+00, double 1.200000e+01, double 1.000000e+00, double 1.800000e+01, double 0x3F826E978D4FDF3B, double 5.780000e-01, double 5.057000e+00, double 1.300000e+01, double 1.000000e+00, double 1.800000e+01, double 0x3F826E978D4FDF3B, double 5.410000e-01, double 5.416000e+00, double 1.400000e+01, double 1.000000e+00, double 1.800000e+01, double 0x3F826E978D4FDF3B, double 5.750000e-01, double 5.774000e+00, double 1.500000e+01, double 2.000000e+00, double 1.200000e+01, double 1.800000e-02, double 8.560000e-01, double 6.422000e+00, double 1.600000e+01, double 2.000000e+00, double 6.000000e+00, double 1.800000e-02, double 8.460000e-01, double 0x401C1A9FBE76C8B4, double 1.700000e+01, double 2.000000e+00, double 6.000000e+00, double 1.800000e-02, double 8.400000e-01, double 7.609000e+00, double 1.800000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 8.220000e-01, double 0x40205604189374BC, double 1.900000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 8.000000e-01, double 8.710000e+00, double 2.000000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 7.530000e-01, double 9.207000e+00, double 2.100000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 0x3FE6872B020C49BA, double 9.662000e+00, double 2.200000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 6.740000e-01, double 1.009900e+01, double 2.300000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 6.400000e-01, double 1.051500e+01, double 2.400000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 0x3FE37CED916872B0, double 1.091700e+01, double 2.500000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 5.660000e-01, double 1.129300e+01, double 2.600000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 5.350000e-01, double 1.165200e+01, double 2.700000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 5.310000e-01, double 1.199700e+01, double 2.800000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 0x3FE3AE147AE147AE, double 1.239400e+01, double 2.900000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 6.860000e-01, double 1.285000e+01, double 3.000000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 6.500000e-01, double 1.327700e+01, double 3.100000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 6.120000e-01, double 1.368100e+01, double 3.200000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 5.670000e-01, double 1.406200e+01, double 3.300000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 5.200000e-01, double 1.441100e+01, double 3.400000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 5.130000e-01, double 1.475100e+01, double 3.500000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 5.570000e-01, double 1.511900e+01, double 3.600000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 5.840000e-01, double 1.550800e+01, double 3.700000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 5.700000e-01, double 1.588300e+01, double 3.800000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 5.790000e-01, double 1.626300e+01, double 3.900000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 5.850000e-01, double 1.665400e+01, double 4.000000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 5.480000e-01, double 1.702000e+01, double 4.100000e+01, double 6.000000e+00, double 0.000000e+00, double 5.400000e-02, double 5.360000e-01, double 1.737400e+01, double 4.200000e+01, double 6.000000e+00, double 0.000000e+00, double 5.400000e-02, double 5.500000e-01, double 1.774400e+01, double 4.300000e+01, double 7.000000e+00, double 0.000000e+00, double 6.300000e-02, double 5.320000e-01, double 1.810400e+01, double 4.400000e+01, double 7.000000e+00, double 0.000000e+00, double 6.300000e-02, double 5.040000e-01, double 1.844700e+01, double 4.500000e+01, double 7.000000e+00, double 0.000000e+00, double 6.300000e-02, double 4.960000e-01, double 1.878200e+01, double 4.600000e+01, double 9.000000e+00, double 0.000000e+00, double 8.100000e-02, double 5.170000e-01, double 1.913000e+01, double 4.700000e+01, double 9.000000e+00, double 0.000000e+00, double 8.100000e-02, double 5.270000e-01, double 1.948700e+01, double 4.800000e+01, double 9.000000e+00, double 0.000000e+00, double 8.100000e-02, double 5.160000e-01, double 1.983800e+01, double 4.900000e+01, double 1.000000e+01, double 0.000000e+00, double 1.800000e-01, double 4.970000e-01, double 2.017900e+01, double 5.000000e+01, double 1.000000e+01, double 0.000000e+00, double 1.800000e-01, double 4.890000e-01, double 2.051000e+01, double 5.100000e+01, double 1.100000e+01, double 0.000000e+00, double 1.980000e-01, double 5.020000e-01, double 2.085200e+01, double 5.200000e+01, double 1.400000e+01, double 0.000000e+00, double 4.000000e-01, double 5.010000e-01, double 2.119600e+01, double 5.300000e+01, double 1.400000e+01, double 0.000000e+00, double 4.000000e-01, double 4.910000e-01, double 2.153100e+01, double 5.400000e+01, double 1.500000e+01, double 0.000000e+00, double 4.290000e-01, double 4.970000e-01, double 2.187000e+01, double 5.500000e+01, double 2.000000e+01, double 0.000000e+00, double 1.808000e+00, double 5.040000e-01, double 2.221400e+01, double 5.600000e+01, double 2.000000e+01, double 0.000000e+00, double 1.808000e+00, double 5.040000e-01, double 2.255800e+01, double 5.700000e+01, double 2.100000e+01, double 0.000000e+00, double 1.898000e+00, double 4.950000e-01, double 2.289800e+01, double 5.800000e+01, double 2.700000e+01, double 0.000000e+00, double 2.441600e+01, double 4.860000e-01, double 2.323200e+01, double 5.900000e+01, double 2.700000e+01, double 0.000000e+00, double 2.441600e+01, double 4.840000e-01, double 2.356400e+01, double 6.000000e+01, double 3.600000e+01, double 0.000000e+00, double 3.255400e+01, double 4.830000e-01, double 2.389700e+01, double 6.100000e+01, double 7.300000e+01, double 0.000000e+00, double 6.601240e+02, double 4.750000e-01, double 2.422900e+01, double 6.200000e+01, double 1.800000e+01, double 0.000000e+00, double 1.627700e+02, double 5.150000e-01, double 2.444200e+01, double 3.200000e+04, double 5.800000e+01, double 0.000000e+00, double 2.000000e+00, double 2.450000e+01, double 4.532000e+00, double 0x3FEFE76C8B439581, double 3.130000e-01, double 1.000000e+00, double 2.000000e+00, double 2.450000e+01, double 4.532000e+00, double 8.930000e-01, double 0x3FEE04189374BC6A, double 2.000000e+00, double 2.000000e+00, double 2.450000e+01, double 1.809000e+00, double 8.810000e-01, double 1.563000e+00, double 3.000000e+00, double 2.000000e+00, double 2.000000e+01, double 1.810000e-01, double 0x3FEBEF9DB22D0E56, double 2.188000e+00, double 4.000000e+00, double 2.000000e+00, double 2.000000e+01, double 1.810000e-01, double 8.720000e-01, double 2.813000e+00, double 5.000000e+00, double 2.000000e+00, double 2.000000e+01, double 5.700000e-02, double 0x3FEBDF3B645A1CAC, double 3.438000e+00, double 6.000000e+00, double 2.000000e+00, double 2.000000e+01, double 1.800000e-02, double 8.600000e-01, double 4.045000e+00, double 7.000000e+00, double 2.000000e+00, double 2.000000e+01, double 1.800000e-02, double 0x3FEAD916872B020C, double 4.625000e+00, double 8.000000e+00, double 2.000000e+00, double 1.800000e+01, double 1.800000e-02, double 8.120000e-01, double 5.173000e+00, double 9.000000e+00, double 2.000000e+00, double 1.800000e+01, double 1.800000e-02, double 7.840000e-01, double 5.698000e+00, double 1.000000e+01, double 2.000000e+00, double 1.200000e+01, double 1.800000e-02, double 7.410000e-01, double 6.185000e+00, double 1.100000e+01, double 2.000000e+00, double 1.200000e+01, double 1.800000e-02, double 6.970000e-01, double 6.634000e+00, double 1.200000e+01, double 2.000000e+00, double 6.000000e+00, double 1.800000e-02, double 6.740000e-01, double 7.070000e+00, double 1.300000e+01, double 2.000000e+00, double 6.000000e+00, double 1.800000e-02, double 6.510000e-01, double 0x401DF7CED916872B, double 1.400000e+01, double 2.000000e+00, double 6.000000e+00, double 1.800000e-02, double 6.330000e-01, double 7.905000e+00, double 1.500000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 0x3FE38D4FDF3B645A, double 0x40209C28F5C28F5C, double 1.600000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 5.890000e-01, double 8.695000e+00, double 1.700000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 5.750000e-01, double 9.064000e+00, double 1.800000e+01, double 3.000000e+00, double 3.000000e+00, double 2.700000e-02, double 6.540000e-01, double 0x4022F7CED916872B, double 1.900000e+01, double 3.000000e+00, double 3.000000e+00, double 2.700000e-02, double 0x3FE72B020C49BA5E, double 0x4023EE978D4FDF3B, double 2.000000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 7.010000e-01, double 1.042600e+01, double 2.100000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 6.730000e-01, double 1.086600e+01, double 2.200000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 6.310000e-01, double 1.127900e+01, double 2.300000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 5.920000e-01, double 1.166900e+01, double 2.400000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 5.530000e-01, double 1.204200e+01, double 2.500000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 5.100000e-01, double 1.238600e+01, double 2.600000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 5.060000e-01, double 1.272100e+01, double 2.700000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 5.620000e-01, double 1.309100e+01, double 2.800000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 5.980000e-01, double 1.348800e+01, double 2.900000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 5.890000e-01, double 1.387300e+01, double 3.000000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 0x3FE36C8B43958106, double 1.426800e+01, double 3.100000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 6.200000e-01, double 1.467900e+01, double 3.200000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 5.800000e-01, double 1.506700e+01, double 3.300000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 5.320000e-01, double 1.542400e+01, double 3.400000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 5.170000e-01, double 1.577100e+01, double 3.500000e+01, double 6.000000e+00, double 0.000000e+00, double 5.400000e-02, double 5.170000e-01, double 1.612000e+01, double 3.600000e+01, double 6.000000e+00, double 0.000000e+00, double 5.400000e-02, double 5.090000e-01, double 1.646600e+01, double 3.700000e+01, double 6.000000e+00, double 0.000000e+00, double 5.400000e-02, double 5.060000e-01, double 1.680700e+01, double 3.800000e+01, double 8.000000e+00, double 0.000000e+00, double 0x3FB26E978D4FDF3B, double 5.220000e-01, double 1.715800e+01, double 3.900000e+01, double 8.000000e+00, double 0.000000e+00, double 0x3FB26E978D4FDF3B, double 5.310000e-01, double 1.751800e+01, double 4.000000e+01, double 8.000000e+00, double 0.000000e+00, double 0x3FB26E978D4FDF3B, double 5.190000e-01, double 1.786900e+01, double 4.100000e+01, double 1.000000e+01, double 0.000000e+00, double 0x3FB70A3D70A3D70A, double 5.120000e-01, double 1.821500e+01, double 4.200000e+01, double 1.000000e+01, double 0.000000e+00, double 0x3FB70A3D70A3D70A, double 5.090000e-01, double 1.856300e+01, double 4.300000e+01, double 1.000000e+01, double 0.000000e+00, double 0x3FB70A3D70A3D70A, double 4.980000e-01, double 1.890200e+01, double 4.400000e+01, double 1.200000e+01, double 0.000000e+00, double 1.090000e-01, double 4.940000e-01, double 1.923900e+01, double 4.500000e+01, double 1.200000e+01, double 0.000000e+00, double 1.090000e-01, double 5.010000e-01, double 1.958000e+01, double 4.600000e+01, double 1.300000e+01, double 0.000000e+00, double 1.180000e-01, double 5.080000e-01, double 1.992500e+01, double 4.700000e+01, double 1.400000e+01, double 0.000000e+00, double 2.520000e-01, double 5.020000e-01, double 2.026900e+01, double 4.800000e+01, double 1.400000e+01, double 0.000000e+00, double 2.520000e-01, double 4.930000e-01, double 2.060600e+01, double 4.900000e+01, double 1.600000e+01, double 0.000000e+00, double 2.880000e-01, double 4.970000e-01, double 2.094400e+01, double 5.000000e+01, double 2.000000e+01, double 0.000000e+00, double 5.720000e-01, double 5.060000e-01, double 2.128800e+01, double 5.100000e+01, double 2.000000e+01, double 0.000000e+00, double 5.720000e-01, double 5.100000e-01, double 2.163500e+01, double 5.200000e+01, double 2.300000e+01, double 0.000000e+00, double 6.580000e-01, double 5.040000e-01, double 2.198000e+01, double 5.300000e+01, double 2.700000e+01, double 0.000000e+00, double 2.441000e+00, double 4.960000e-01, double 2.231900e+01, double 5.400000e+01, double 2.700000e+01, double 0.000000e+00, double 2.441000e+00, double 4.930000e-01, double 2.265600e+01, double 5.500000e+01, double 3.200000e+01, double 0.000000e+00, double 2.893000e+00, double 4.900000e-01, double 2.299300e+01, double 5.600000e+01, double 3.700000e+01, double 0.000000e+00, double 3.345800e+01, double 4.820000e-01, double 2.332600e+01, double 5.700000e+01, double 3.700000e+01, double 0.000000e+00, double 3.345800e+01, double 4.580000e-01, double 2.365600e+01, double 5.800000e+01, double 1.200000e+01, double 0.000000e+00, double 1.085100e+01, double 5.000000e-01, double 2.393700e+01, double 2.400000e+04, double 5.900000e+01, double 0.000000e+00, double 2.000000e+00, double 1.500000e+01, double 0x4031D3345F831D56, double 0x3FE650E39FF80286, double 0x3FCE51E6FFA05619, double 1.000000e+00, double 2.000000e+00, double 1.500000e+01, double 0x4031D3345F831D56, double 0x3FDD1F206061836C, double 0x3FE6B9A39FD7CC2F, double 2.000000e+00, double 2.000000e+00, double 1.500000e+01, double 0x3FFC8520A0DF5E1F, double 0x3FDB9CB86036D507, double 0x3FF2E93260D04F63, double 3.000000e+00, double 2.000000e+00, double 1.500000e+01, double 0x3FFC8520A0DF5E1F, double 0x3FDB21719F7F8CA8, double 0x3FFA6A9B9F833D8D, double 4.000000e+00, double 2.000000e+00, double 1.300000e+01, double 0x3FC6D0E700DE29F5, double 0x3FDAC3E65FD7115B, double 0x4000EE3C206CB205, double 5.000000e+00, double 2.000000e+00, double 1.300000e+01, double 0x3FC6D0E700DE29F5, double 0x3FDA576A7FD09AB8, double 0x40049D383F6194C5, double 6.000000e+00, double 2.000000e+00, double 1.300000e+01, double 0x3FACDC38C02EE771, double 0x3FD9F2393FB4176C, double 0x4008403BBF73C8D0, double 7.000000e+00, double 2.000000e+00, double 1.300000e+01, double 0x3FACDC38C02EE771, double 0x3FD9949C602EA515, double 0x400BD56B9F605804, double 8.000000e+00, double 2.000000e+00, double 1.300000e+01, double 0x3FACDC38C02EE771, double 0x3FD93340C075B7A3, double 0x400F5B1C407D739E, double 9.000000e+00, double 2.000000e+00, double 1.200000e+01, double 0x3F9240B8BFC0180A, double 0x3FD8CA76FF995B64, double 0x401167EA3FFA40F9, double 1.000000e+01, double 2.000000e+00, double 1.200000e+01, double 0x3F9240B8BFC0180A, double 0x3FD8595E1FF0E129, double 0x4013192760413351, double 1.100000e+01, double 2.000000e+00, double 1.000000e+01, double 0x3F9240B8BFC0180A, double 0x3FD7E01D7FA051CD, double 0x4014C0BCBFB968ED, double 1.200000e+01, double 2.000000e+00, double 1.000000e+01, double 0x3F9240B8BFC0180A, double 0x3FD75F3E00382B8D, double 0x40165E3AFFDB4206, double 1.300000e+01, double 2.000000e+00, double 1.000000e+01, double 0x3F9240B8BFC0180A, double 0x3FD6D769BF9D7582, double 0x4017F14BA01182DF, double 1.400000e+01, double 2.000000e+00, double 9.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD6511C603B879E, double 0x401979AEFFB2524D, double 1.500000e+01, double 2.000000e+00, double 9.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD5C6D2002C3989, double 0x401AF73B7FDDDBBE, double 1.600000e+01, double 2.000000e+00, double 6.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD545135FD92E85, double 0x401C69DAFFEB5D31, double 1.700000e+01, double 2.000000e+00, double 6.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD5264D9FCE9A8B, double 0x401DD18900444884, double 1.800000e+01, double 2.000000e+00, double 6.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD61DCAC01BFE27, double 0x401F2E51400E8DE2, double 1.900000e+01, double 3.000000e+00, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD82EDA3FF45925, double 0x402068BBC00A1BB8, double 2.000000e+01, double 3.000000e+00, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD9635C00060A30, double 0x40215A51400E8DE2, double 2.100000e+01, double 3.000000e+00, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD90A0AA041FF54, double 0x4022404FFFF29407, double 2.200000e+01, double 3.000000e+00, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD82ACEC06CED13, double 0x40231B20601CCB3D, double 2.300000e+01, double 3.000000e+00, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD738B7E0094831, double 0x4023EB37BFDFD466, double 2.400000e+01, double 3.000000e+00, double 0.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD65630A07E31AC, double 0x4024B113800F84D8, double 2.500000e+01, double 3.000000e+00, double 0.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD5BD35DFA4AF91, double 0x40256D35A1A27C97, double 2.600000e+01, double 3.000000e+00, double 0.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD601917FEFA468, double 0x40262021C044284E, double 2.700000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD6C5CC7F975C4A, double 0x4026E51F81A5870E, double 2.800000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD6EB2E7FCDC92A, double 0x4027B9BB7EC6AF7C, double 2.900000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD63CB0E05D2270, double 0x402881097FDB8272, double 3.000000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD56F75808212E2, double 0x40293C1B7FB84704, double 3.100000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD539A4A0779E0B, double 0x4029EBF180E13BF0, double 3.200000e+01, double 5.000000e+00, double 0.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD555EA7F879705, double 0x402AA4D3613B843B, double 3.300000e+01, double 5.000000e+00, double 0.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD5449DBFD528CD, double 0x402B6536BED8EE43, double 3.400000e+01, double 5.000000e+00, double 0.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD536573F81F60F, double 0x402C187980F55DE6, double 3.500000e+01, double 6.000000e+00, double 0.000000e+00, double 0x3FAB61151FA0240F, double 0x3FD52E3D20831381, double 0x402CCF83BE6601BD, double 3.600000e+01, double 6.000000e+00, double 0.000000e+00, double 0x3FAB61151FA0240F, double 0x3FD547508039E5EF, double 0x402D89763FF83D94, double 3.700000e+01, double 7.000000e+00, double 0.000000e+00, double 0x3FAFF1435FE24EFB, double 0x3FD54A18DFC23F4D, double 0x402E43607F9C9852, double 3.800000e+01, double 7.000000e+00, double 0.000000e+00, double 0x3FAFF1435FE24EFB, double 0x3FD52C81A02012E7, double 0x402EFCF3DF604D48, double 3.900000e+01, double 8.000000e+00, double 0.000000e+00, double 0x3FB240B8C02E0B8A, double 0x3FD4FA2E604BD653, double 0x402FB406FFCE81D9, double 4.000000e+01, double 8.000000e+00, double 0.000000e+00, double 0x3FB240B8C02E0B8A, double 0x3FD4C5CC9FCDB29D, double 0x403034628027D88C, double 4.100000e+01, double 9.000000e+00, double 0.000000e+00, double 0x3FB488CFDFE12D80, double 0x3FD4B98C804DE588, double 0x40308CDBBFAED719, double 4.200000e+01, double 1.000000e+01, double 0.000000e+00, double 0x3FB6D0E7000242F6, double 0x3FD4920F5F77118D, double 0x4030E8209FB2B84F, double 4.300000e+01, double 1.000000e+01, double 0.000000e+00, double 0x3FB6D0E7000242F6, double 0x3FD45D369FD7D4C6, double 0x403140F3FF40BD5F, double 4.400000e+01, double 1.100000e+01, double 0.000000e+00, double 0x3FB918FDFFED0219, double 0x3FD43843DF8F0278, double 0x40319711805B0433, double 4.500000e+01, double 1.200000e+01, double 0.000000e+00, double 0x3FBB61152157F20D, double 0x3FD4336F1FBFDB44, double 0x4031EE709FA54C55, double 4.600000e+01, double 1.300000e+01, double 0.000000e+00, double 0x3FBDA92C409D2084, double 0x3FD442AE200E684E, double 0x4032466B20098AC3, double 4.700000e+01, double 1.400000e+01, double 0.000000e+00, double 0x3FBFF1435FE24EFB, double 3.165600e-01, double 0x40329E814006804D, double 4.800000e+01, double 1.500000e+01, double 0.000000e+00, double 0x3FC11CAD3F93BEB9, double 0x3FD4309820143EF4, double 0x4032F65120840406, double 4.900000e+01, double 1.600000e+01, double 0.000000e+00, double 0x3FC240B8C02E0B8A, double 0x3FD411A280593CEE, double 0x40334D8EDF2B7422, double 5.000000e+01, double 1.700000e+01, double 0.000000e+00, double 0x3FC364C440C8585A, double 0x3FD3F1D7FFECF0EB, double 0x4033A3FD80C9BEFB, double 5.100000e+01, double 1.800000e+01, double 0.000000e+00, double 0x3FC488CFDF733A01, double 0x3FD3E8846018E6CE, double 0x4033F969C08DFA29, double 5.200000e+01, double 2.000000e+01, double 0.000000e+00, double 0x3FD6C310E03BD939, double 0x3FD3EF0DA037D494, double 0x40344FC47FF73124, double 5.300000e+01, double 2.100000e+01, double 0.000000e+00, double 0x3FD7E66B5FDB98FF, double 0x3FD3F5B5FF80D426, double 0x4034A6997F986694, double 5.400000e+01, double 2.300000e+01, double 0.000000e+00, double 0x3FDA2D203FF7A2F5, double 0x3FD3E7AF807A7D8E, double 0x4034FD347F638D6E, double 5.500000e+01, double 2.400000e+01, double 0.000000e+00, double 0x3FE5A52AA022DBDE, double 0x3FD3CA0F2061FDD5, double 0x4035533ABFEF6EB8, double 5.600000e+01, double 2.600000e+01, double 0.000000e+00, double 0x3FE772EE1FBEF357, double 0x3FD3B81EBFDEA7C1, double 0x4035A816BF5F2600, double 5.700000e+01, double 2.800000e+01, double 0.000000e+00, double 0x3FE940B19FE47B2E, double 0x3FD3D725E0532B3A, double 0x4035FCF7C0965DA5, double 5.800000e+01, double 3.100000e+01, double 0.000000e+00, double 0x40061A5FBFD91E6A, double 0x3FD4EF6BC00EF0AB, double 0x403652814006804D, double 5.900000e+01, double 3.400000e+01, double 0.000000e+00, double 0x40083DF55FBE00AC, double 0x3FDAA117DF9218BE, double 0x4036A917BF396653, double 2.205000e+04, double 5.900000e+01, double 0.000000e+00, double 2.000000e+00, double 1.500000e+01, double 0x4031D3345F831D56, double 0x3FE513EF9FFA4AA3, double 0x3FCBDB8CDF882188, double 1.000000e+00, double 2.000000e+00, double 1.500000e+01, double 0x4031D3345F831D56, double 0x3FDBAEFAC0613FC7, double 0x3FE4E1CCC0266508, double 2.000000e+00, double 2.000000e+00, double 1.500000e+01, double 0x3FFC8520A0DF5E1F, double 0x3FD9ED61802B3C21, double 0x3FF1619D00AC4D50, double 3.000000e+00, double 2.000000e+00, double 1.500000e+01, double 0x3FFC8520A0DF5E1F, double 0x3FD96C3EDF862F51, double 0x3FF849DF3F153EAC, double 4.000000e+00, double 2.000000e+00, double 1.500000e+01, double 0x3FFC8520A0DF5E1F, double 0x3FD917FB1F81B6B5, double 0x3FFF2614BF54BF1F, double 5.000000e+00, double 2.000000e+00, double 1.300000e+01, double 0x3FC6D0E700DE29F5, double 0x3FD8C123A031FDEE, double 0x4002F967003F4007, double 6.000000e+00, double 2.000000e+00, double 1.300000e+01, double 0x3FC6D0E700DE29F5, double 0x3FD85B55C06AAD8D, double 0x40065666FF688072, double 7.000000e+00, double 2.000000e+00, double 1.300000e+01, double 0x3FACDC38C02EE771, double 0x3FD805133FA2D832, double 0x4009A889006F3BA2, double 8.000000e+00, double 2.000000e+00, double 1.300000e+01, double 0x3FACDC38C02EE771, double 0x3FD7AF84006EFF81, double 0x400CEE6BBF6BBB3A, double 9.000000e+00, double 2.000000e+00, double 1.200000e+01, double 0x3F9240B8BFC0180A, double 0x3FD755175FA94418, double 0x40101368C032E07D, double 1.000000e+01, double 2.000000e+00, double 1.200000e+01, double 0x3F9240B8BFC0180A, double 0x3FD6F93160307D87, double 0x4011A84FE01223EF, double 1.100000e+01, double 2.000000e+00, double 1.200000e+01, double 0x3F9240B8BFC0180A, double 0x3FD6968A606BA595, double 0x40133570FFC775F6, double 1.200000e+01, double 2.000000e+00, double 1.000000e+01, double 0x3F9240B8BFC0180A, double 0x3FD62D1A7FDE06B1, double 0x4014BA64401B7902, double 1.300000e+01, double 2.000000e+00, double 1.000000e+01, double 0x3F9240B8BFC0180A, double 0x3FD5BD552017F86F, double 0x401636D3DFBB91E7, double 1.400000e+01, double 2.000000e+00, double 1.000000e+01, double 0x3F9240B8BFC0180A, double 0x3FD548DA00895F31, double 0x4017AA7B7FFE1214, double 1.500000e+01, double 2.000000e+00, double 9.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD4DD70BFC1DD97, double 0x40191527C03869D4, double 1.600000e+01, double 2.000000e+00, double 9.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD4D40AE0140D8F, double 0x401A76B48024D374, double 1.700000e+01, double 2.000000e+00, double 9.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD5D81AFFF1CE75, double 0x401BCF0C402A3C95, double 1.800000e+01, double 3.000000e+00, double 6.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD7FFBEBFCC66D4, double 0x401D6F0B000E42B9, double 1.900000e+01, double 3.000000e+00, double 6.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD95A53A032875E, double 0x401F50FD9FD36F7E, double 2.000000e+01, double 3.000000e+00, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD9224F1FCDD0AE, double 0x40208F3C40222EFF, double 2.100000e+01, double 3.000000e+00, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD85E4A3FB69BAA, double 0x40216BF2000D1613, double 2.200000e+01, double 3.000000e+00, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD78341DFAF8EB5, double 0x40223EE4FFF46C79, double 2.300000e+01, double 3.000000e+00, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD6ADB3FF98C95C, double 0x40230866DFDDF696, double 2.400000e+01, double 3.000000e+00, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD5DB460084232A, double 0x4023C8D23FFE47C4, double 2.500000e+01, double 3.000000e+00, double 0.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD559571FDDA721, double 0x4024808821A21137, double 2.600000e+01, double 3.000000e+00, double 0.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD5A392DFC9B244, double 0x40252FECA0A7AAD4, double 2.700000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD672990027D441, double 0x4025F1D7C11C9562, double 2.800000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD6B0726067155A, double 0x4026C3F3E0370CDD, double 2.900000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD618F83FD365D4, double 0x402789BA1E745F4D, double 3.000000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD55D73A0581C18, double 0x4028440DE16A12C3, double 3.100000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD536422024D261, double 0x4028F3C73EEE5259, double 3.200000e+01, double 5.000000e+00, double 0.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD56315605BD7BA, double 0x4029AD2740B6A975, double 3.300000e+01, double 5.000000e+00, double 0.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD560A9C07AA65C, double 0x402A6E9B2159161C, double 3.400000e+01, double 5.000000e+00, double 0.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD55F0C5FB4C671, double 0x402B235A3F10B707, double 3.500000e+01, double 6.000000e+00, double 0.000000e+00, double 0x3FAB61151FA0240F, double 0x3FD563D5FFF3B815, double 0x402BDC5CBF1DB7A1, double 3.600000e+01, double 6.000000e+00, double 0.000000e+00, double 0x3FAB61151FA0240F, double 0x3FD587A9002DBC15, double 0x402C98ACC0BDCAD1, double 3.700000e+01, double 7.000000e+00, double 0.000000e+00, double 0x3FAFF1435FE24EFB, double 0x3FD592B99FB83077, double 0x402D5547BEDB7282, double 3.800000e+01, double 7.000000e+00, double 0.000000e+00, double 0x3FAFF1435FE24EFB, double 0x3FD57A873FCFCEB5, double 0x402E11C30171F007, double 3.900000e+01, double 8.000000e+00, double 0.000000e+00, double 0x3FB240B8C02E0B8A, double 0x3FD547F0A077C067, double 0x402ECBD8E0008638, double 4.000000e+01, double 8.000000e+00, double 0.000000e+00, double 0x3FB240B8C02E0B8A, double 0x3FD4F97D1FF77D61, double 0x402F839B7E7627A5, double 4.100000e+01, double 9.000000e+00, double 0.000000e+00, double 0x3FB488CFDFE12D80, double 0x3FD4A1549FA5B36A, double 0x40301BBC5F973F4C, double 4.200000e+01, double 9.000000e+00, double 0.000000e+00, double 0x3FB488CFDFE12D80, double 0x3FD45326DF790810, double 0x403073EE1F2CEBF1, double 4.300000e+01, double 1.000000e+01, double 0.000000e+00, double 0x3FB6D0E7000242F6, double 0x3FD43EBD5FC765DB, double 0x4030C9E260B2C83F, double 4.400000e+01, double 1.100000e+01, double 0.000000e+00, double 0x3FB918FDFFED0219, double 0x3FD4539A9F86A122, double 1.713200e+01, double 4.500000e+01, double 1.200000e+01, double 0.000000e+00, double 0x3FBB61152157F20D, double 0x3FD479FB5F987D20, double 0x40317AC73FC511ED, double 4.600000e+01, double 1.300000e+01, double 0.000000e+00, double 0x3FBDA92C409D2084, double 0x3FD489539FD40A1D, double 0x4031D42A00848A3E, double 4.700000e+01, double 1.400000e+01, double 0.000000e+00, double 0x3FBFF1435FE24EFB, double 0x3FD4808EBFBAAF58, double 0x40322D701F4CCC61, double 4.800000e+01, double 1.500000e+01, double 0.000000e+00, double 0x3FC11CAD3F93BEB9, double 0x3FD46469803B1294, double 0x40328639A034BE4E, double 4.900000e+01, double 1.600000e+01, double 0.000000e+00, double 0x3FC240B8C02E0B8A, double 0x3FD43B67807DFAE9, double 0x4032DE40A0034026, double 5.000000e+01, double 1.700000e+01, double 0.000000e+00, double 0x3FC364C440C8585A, double 0x3FD4146ADFE1964C, double 0x403335515F6E24A1, double 5.100000e+01, double 1.800000e+01, double 0.000000e+00, double 0x3FC488CFDF733A01, double 0x3FD407BAC0410971, double 0x40338B43BF727137, double 5.200000e+01, double 2.000000e+01, double 0.000000e+00, double 0x3FC6D0E700DE29F5, double 0x3FD40CC2FF7721A8, double 0x4033E2189F33368E, double 5.300000e+01, double 2.100000e+01, double 0.000000e+00, double 0x3FD7E66B5FDB98FF, double 0x3FD4143E5F7AFE93, double 0x40343968405B39E2, double 5.400000e+01, double 2.300000e+01, double 0.000000e+00, double 0x3FDA2D203FF7A2F5, double 0x3FD409955FCE1BD7, double 0x4034908B7FFB62E2, double 5.500000e+01, double 2.400000e+01, double 0.000000e+00, double 0x3FDB507AA073ED26, double 0x3FD3F0A2E0145247, double 0x4034E7343FA2AD3F, double 5.600000e+01, double 2.600000e+01, double 0.000000e+00, double 0x3FE772EE1FBEF357, double 0x3FD3DE2DDFD9914E, double 0x40353CD83FC7962C, double 5.700000e+01, double 2.800000e+01, double 0.000000e+00, double 0x3FE940B19FE47B2E, double 0x3FD3ECB51F8703EB, double 0x403592B4004D2CD9, double 5.800000e+01, double 3.000000e+01, double 0.000000e+00, double 0x3FEB0E7540405959, double 0x3FD4F28A00746F13, double 0x4035E81C40A866BC, double 5.900000e+01, double 3.300000e+01, double 0.000000e+00, double 0x4007876E2099FE6E, double 0x3FDA89C9007E43ED, double 0x40363DB9C0808E30, double 1.600000e+04, double 5.500000e+01, double 0.000000e+00, double 3.000000e+00, double 1.500000e+01, double 0x403ABCCE9F34E40D, double 0x3FE650E39FF80286, double 0x3FCE51E6FFA05619, double 1.000000e+00, double 3.000000e+00, double 1.500000e+01, double 0x403ABCCE9F34E40D, double 0x3FDD1F206061836C, double 0x3FE6B9A39FD7CC2F, double 2.000000e+00, double 3.000000e+00, double 1.500000e+01, double 0x400563D87F5D833E, double 0x3FDB9CB86036D507, double 0x3FF2E93260D04F63, double 3.000000e+00, double 3.000000e+00, double 1.500000e+01, double 0x400563D87F5D833E, double 0x3FDB21719F7F8CA8, double 0x3FFA6A9B9F833D8D, double 4.000000e+00, double 3.000000e+00, double 1.300000e+01, double 0x3FD11CAD3F93BEB9, double 0x3FDAC3E65FD7115B, double 0x4000EE3C206CB205, double 5.000000e+00, double 3.000000e+00, double 1.300000e+01, double 0x3FD11CAD3F93BEB9, double 0x3FDA576A7FD09AB8, double 0x40049D383F6194C5, double 6.000000e+00, double 3.000000e+00, double 1.300000e+01, double 0x3FB5A52A9FD0653F, double 0x3FD9F2393FB4176C, double 0x4008403BBF73C8D0, double 7.000000e+00, double 3.000000e+00, double 1.300000e+01, double 0x3FB5A52A9FD0653F, double 0x3FD9949C602EA515, double 0x400BD56B9F605804, double 8.000000e+00, double 3.000000e+00, double 1.300000e+01, double 0x3FB5A52A9FD0653F, double 0x3FD93340C075B7A3, double 0x400F5B1C407D739E, double 9.000000e+00, double 3.000000e+00, double 1.200000e+01, double 0x3F9B61151FA0240F, double 0x3FD8CA76FF995B64, double 0x401167EA3FFA40F9, double 1.000000e+01, double 3.000000e+00, double 1.200000e+01, double 0x3F9B61151FA0240F, double 0x3FD8595E1FF0E129, double 0x4013192760413351, double 1.100000e+01, double 3.000000e+00, double 1.000000e+01, double 0x3F9B61151FA0240F, double 0x3FD7E01D7FA051CD, double 0x4014C0BCBFB968ED, double 1.200000e+01, double 3.000000e+00, double 1.000000e+01, double 0x3F9B61151FA0240F, double 0x3FD75F3E00382B8D, double 0x40165E3AFFDB4206, double 1.300000e+01, double 3.000000e+00, double 1.000000e+01, double 0x3F9B61151FA0240F, double 0x3FD6D769A079FFEE, double 0x4017F14BA01182DF, double 1.400000e+01, double 3.000000e+00, double 9.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD651180051DF71, double 0x401979AEFFB2524D, double 1.500000e+01, double 3.000000e+00, double 9.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD5C684606ECD0A, double 0x401AF73B7FDDDBBE, double 1.600000e+01, double 3.000000e+00, double 6.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD540F42011B21E, double 0x401C69DAFFEB5D31, double 1.700000e+01, double 3.000000e+00, double 6.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD502BF4024E6C8, double 0x401DD18900444884, double 1.800000e+01, double 3.000000e+00, double 6.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD58A710025F337, double 0x401F2E51400E8DE2, double 1.900000e+01, double 4.000000e+00, double 3.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD6B1C63FD9A38F, double 0x40205B4740057E9A, double 2.000000e+01, double 4.000000e+00, double 3.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD75166BFD29360, double 0x4021332CA01C14B4, double 2.100000e+01, double 4.000000e+00, double 3.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD6FFE85F9CC00C, double 0x402201DC9FFE8D8F, double 2.200000e+01, double 4.000000e+00, double 3.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD641F5A04D096B, double 0x4022C79E5FFCEACD, double 2.300000e+01, double 4.000000e+00, double 3.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD579DB803B461F, double 0x402384C1FFEA308B, double 2.400000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD4ED61802B3C21, double 0x4024399D3E69C81B, double 2.500000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD4FD65FFC1CA43, double 0x4024E68A3F8982CB, double 2.600000e+01, double 5.000000e+00, double 0.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD567A4207D9B59, double 0x40259F8BDEC5F395, double 2.700000e+01, double 5.000000e+00, double 0.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD57460BFDE51DA, double 0x40266315E112D4EF, double 2.800000e+01, double 5.000000e+00, double 0.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD518183F91E647, double 0x40271C1FA0AF3791, double 2.900000e+01, double 5.000000e+00, double 0.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD4E860BFBBF5C3, double 0x4027CB567F6895EC, double 3.000000e+01, double 6.000000e+00, double 0.000000e+00, double 0x3FAB61151FA0240F, double 0x3FD4ED58FFB1B7AF, double 0x402881097FDB8272, double 3.100000e+01, double 6.000000e+00, double 0.000000e+00, double 0x3FAB61151FA0240F, double 0x3FD4CDFB9FE2CDAF, double 0x40293C1B7FB84704, double 3.200000e+01, double 6.000000e+00, double 0.000000e+00, double 0x3FAB61151FA0240F, double 0x3FD4B53620561467, double 0x4029EBF180E13BF0, double 3.300000e+01, double 7.000000e+00, double 0.000000e+00, double 0x3FAFF1435FE24EFB, double 0x3FD4A3BF1FC39D57, double 0x402A9E67E190A930, double 3.400000e+01, double 7.000000e+00, double 0.000000e+00, double 0x3FAFF1435FE24EFB, double 0x3FD4B2A46024B676, double 0x402B52CD5EC303F6, double 3.500000e+01, double 8.000000e+00, double 0.000000e+00, double 0x3FB240B8C02E0B8A, double 0x3FD4AFD6C0493962, double 0x402C06E51ED329DE, double 3.600000e+01, double 8.000000e+00, double 0.000000e+00, double 0x3FB240B8C02E0B8A, double 0x3FD4A6801FA89A71, double 0x402CBA5B6078E69C, double 3.700000e+01, double 9.000000e+00, double 0.000000e+00, double 0x3FB488CFDFE12D80, double 0x3FD4BD4DFFCE6814, double 0x402D6B71001D5C31, double 3.800000e+01, double 1.000000e+01, double 0.000000e+00, double 0x3FB6D0E7000242F6, double 0x3FD4AFC7DFB949C9, double 0x402E2326A15478FE, double 3.900000e+01, double 1.000000e+01, double 0.000000e+00, double 0x3FB6D0E7000242F6, double 0x3FD48732C02CE77B, double 0x402ED694BF3F4590, double 4.000000e+01, double 1.100000e+01, double 0.000000e+00, double 0x3FB918FDFFED0219, double 0x3FD4679A007A56E7, double 0x402F84D0BEC9D4CB, double 4.100000e+01, double 1.200000e+01, double 0.000000e+00, double 0x3FBB61152157F20D, double 0x3FD460F8C06806F2, double 0x40301AC43F5F9160, double 4.200000e+01, double 1.300000e+01, double 0.000000e+00, double 0x3FBDA92C409D2084, double 0x3FD46699407224CF, double 0x4030738FFFBCE421, double 4.300000e+01, double 1.400000e+01, double 0.000000e+00, double 0x3FBFF1435FE24EFB, double 0x3FD456F0A0194326, double 0x4030CC2B80B74A85, double 4.400000e+01, double 1.500000e+01, double 0.000000e+00, double 0x3FC11CAD3F93BEB9, double 0x3FD433ABDFD375F0, double 0x4031241F3F606820, double 4.500000e+01, double 1.600000e+01, double 0.000000e+00, double 0x3FC240B8C02E0B8A, double 0x3FD40E3D004CBD2E, double 0x40317B16C035E595, double 4.600000e+01, double 1.700000e+01, double 0.000000e+00, double 0x3FC364C440C8585A, double 0x3FD4003A1FEA08D0, double 0x4031D0D9A019E65B, double 4.700000e+01, double 1.900000e+01, double 0.000000e+00, double 0x3FC5ACDB600D86D1, double 0x3FD404ABE031F331, double 0x403227829F8210E7, double 4.800000e+01, double 2.000000e+01, double 0.000000e+00, double 0x3FC6D0E700DE29F5, double 0x3FD40F5D1FEBADB9, double 0x40327EAF00332BA6, double 4.900000e+01, double 2.200000e+01, double 0.000000e+00, double 0x3FC918FDFFED0219, double 0x3FD40C6E7FDCD174, double 0x4032D5C37F46313D, double 5.000000e+01, double 2.300000e+01, double 0.000000e+00, double 0x3FCA3D09A0BDA53D, double 0x3FD40127601ED739, double 0x40332C8FE0B3339F, double 5.100000e+01, double 2.500000e+01, double 0.000000e+00, double 0x3FCC85209FCC7D60, double 0x3FD401313FB56F05, double 0x403382AABF5BCB02, double 5.200000e+01, double 2.700000e+01, double 0.000000e+00, double 0x3FCECD37BF11ABD8, double 0x3FD408F9DFE69633, double 0x4033D98A6040B278, double 5.300000e+01, double 2.900000e+01, double 0.000000e+00, double 0x3FE0809F80410B97, double 0x3FD429701FE76ACD, double 0x403430A80064A9CE, double 5.400000e+01, double 3.100000e+01, double 0.000000e+00, double 0x3FE1A3F9E033E568, double 0x3FD528C5FFDCA235, double 0x4034878CFF576394, double 5.500000e+01, double 3.300000e+01, double 0.000000e+00, double 0x3FE2C7545FD3A52E, double 0x3FDAC3C7C073781D, double 0x4034DDCEFFACF3E9, double 4.800000e+04, double 3.700000e+01, double 0.000000e+00, double 1.000000e+00, double 4.532000e+00, double 1.000000e+00, double -8.240000e+00, double 0.000000e+00, double 1.000000e+00, double 1.000000e+00, double 9.040000e-01, double 0x3FEFA5E353F7CED9, double -8.240000e+00, double 1.875000e+00, double 2.000000e+00, double 1.000000e+00, double 2.900000e-02, double 0x3FEFA5E353F7CED9, double -8.240000e+00, double 3.750000e+00, double 3.000000e+00, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 0x3FEF645A1CAC0831, double -8.240000e+00, double 5.438000e+00, double 4.000000e+00, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 0x3FEF851EB851EB85, double -8.240000e+00, double 6.857000e+00, double 5.000000e+00, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 0x3FEF7CED916872B0, double -8.240000e+00, double 8.109000e+00, double 6.000000e+00, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 0x3FEF5C28F5C28F5C, double -8.240000e+00, double 9.237000e+00, double 7.000000e+00, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 0x3FEEF9DB22D0E560, double -8.240000e+00, double 1.020200e+01, double 8.000000e+00, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 0x3FEE872B020C49BA, double -8.240000e+00, double 1.108300e+01, double 9.000000e+00, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 9.290000e-01, double -8.240000e+00, double 1.186500e+01, double 1.000000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 9.060000e-01, double -7.447000e+00, double 1.255400e+01, double 1.100000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 8.830000e-01, double -7.447000e+00, double 1.319500e+01, double 1.200000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 8.440000e-01, double -7.447000e+00, double 1.378100e+01, double 1.300000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 7.920000e-01, double -7.447000e+00, double 1.430900e+01, double 1.400000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 7.470000e-01, double -7.447000e+00, double 1.480300e+01, double 1.500000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 6.890000e-01, double -7.447000e+00, double 1.525000e+01, double 1.600000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 6.440000e-01, double -7.447000e+00, double 1.566700e+01, double 1.700000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 5.920000e-01, double -7.447000e+00, double 1.606800e+01, double 1.800000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 5.530000e-01, double -7.447000e+00, double 1.640900e+01, double 1.900000e+01, double 2.000000e+00, double 1.800000e-02, double 8.500000e-01, double -7.447000e+00, double 1.704500e+01, double 2.000000e+01, double 2.000000e+00, double 1.800000e-02, double 8.110000e-01, double -6.990000e+00, double 1.760700e+01, double 2.100000e+01, double 2.000000e+00, double 1.800000e-02, double 0x3FE78D4FDF3B645A, double -6.990000e+00, double 1.809700e+01, double 2.200000e+01, double 2.000000e+00, double 1.800000e-02, double 6.650000e-01, double -6.990000e+00, double 1.852800e+01, double 2.300000e+01, double 2.000000e+00, double 1.800000e-02, double 6.100000e-01, double -6.990000e+00, double 1.893100e+01, double 2.400000e+01, double 2.000000e+00, double 1.800000e-02, double 5.440000e-01, double -6.990000e+00, double 1.929500e+01, double 2.500000e+01, double 2.000000e+00, double 1.800000e-02, double 5.280000e-01, double -6.990000e+00, double 1.963600e+01, double 2.600000e+01, double 3.000000e+00, double 5.400000e-02, double 6.210000e-01, double -6.990000e+00, double 2.003800e+01, double 2.700000e+01, double 3.000000e+00, double 5.400000e-02, double 6.730000e-01, double -6.990000e+00, double 2.048600e+01, double 2.800000e+01, double 3.000000e+00, double 5.400000e-02, double 6.350000e-01, double -6.990000e+00, double 2.090000e+01, double 2.900000e+01, double 4.000000e+00, double 1.140000e-01, double 6.260000e-01, double -6.990000e+00, double 2.130600e+01, double 3.000000e+01, double 4.000000e+00, double 1.140000e-01, double 6.360000e-01, double 0xC018147AE147AE14, double 2.172200e+01, double 3.100000e+01, double 5.000000e+00, double 4.520000e-01, double 0x3FE3AE147AE147AE, double 0xC018147AE147AE14, double 2.212800e+01, double 3.200000e+01, double 5.000000e+00, double 4.520000e-01, double 5.790000e-01, double 0xC018147AE147AE14, double 2.251300e+01, double 3.300000e+01, double 5.000000e+00, double 4.520000e-01, double 5.510000e-01, double 0xC018147AE147AE14, double 2.287700e+01, double 3.400000e+01, double 7.000000e+00, double 6.330000e+00, double 5.520000e-01, double -5.229000e+00, double 2.324100e+01, double 3.500000e+01, double 7.000000e+00, double 6.330000e+00, double 5.590000e-01, double -5.229000e+00, double 2.361600e+01, double 3.600000e+01, double 1.100000e+01, double 0x4023E4DD2F1A9FBE, double 5.280000e-01, double -5.229000e+00, double 2.397400e+01, double 3.700000e+01, double 1.700000e+01, double 1.537270e+02, double 4.790000e-01, double -5.229000e+00, double 2.431300e+01, double 4.410000e+04, double 3.800000e+01, double 0.000000e+00, double 1.000000e+00, double 4.532000e+00, double 1.000000e+00, double -8.240000e+00, double 0.000000e+00, double 1.000000e+00, double 1.000000e+00, double 9.040000e-01, double 0x3FEF74BC6A7EF9DB, double -8.240000e+00, double 1.723000e+00, double 2.000000e+00, double 1.000000e+00, double 2.900000e-02, double 0x3FEF74BC6A7EF9DB, double -8.240000e+00, double 3.445000e+00, double 3.000000e+00, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 0x3FEF6C8B43958106, double -8.240000e+00, double 5.057000e+00, double 4.000000e+00, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 0x3FEF851EB851EB85, double -8.240000e+00, double 6.422000e+00, double 5.000000e+00, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 0x3FEF74BC6A7EF9DB, double -8.240000e+00, double 7.609000e+00, double 6.000000e+00, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 0x3FEF4BC6A7EF9DB2, double -8.240000e+00, double 8.710000e+00, double 7.000000e+00, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 0x3FEEF1A9FBE76C8B, double -8.240000e+00, double 9.662000e+00, double 8.000000e+00, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 0x3FEE5604189374BC, double -8.240000e+00, double 1.051500e+01, double 9.000000e+00, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 9.300000e-01, double -8.240000e+00, double 1.129300e+01, double 1.000000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 9.140000e-01, double -7.447000e+00, double 1.200900e+01, double 1.100000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 8.700000e-01, double -7.447000e+00, double 1.262500e+01, double 1.200000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 0x3FEB0A3D70A3D70A, double -7.447000e+00, double 1.321000e+01, double 1.300000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 8.000000e-01, double -7.447000e+00, double 1.374800e+01, double 1.400000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 7.490000e-01, double -7.447000e+00, double 1.424100e+01, double 1.500000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 7.010000e-01, double -7.447000e+00, double 1.469500e+01, double 1.600000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 6.530000e-01, double -7.447000e+00, double 1.512500e+01, double 1.700000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 5.900000e-01, double -7.447000e+00, double 1.550800e+01, double 1.800000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 6.160000e-01, double -7.447000e+00, double 1.589100e+01, double 1.900000e+01, double 2.000000e+00, double 1.800000e-02, double 8.600000e-01, double -7.447000e+00, double 1.653700e+01, double 2.000000e+01, double 2.000000e+00, double 1.800000e-02, double 0x3FEA5604189374BC, double -6.990000e+00, double 1.711200e+01, double 2.100000e+01, double 2.000000e+00, double 1.800000e-02, double 7.620000e-01, double -6.990000e+00, double 1.762100e+01, double 2.200000e+01, double 2.000000e+00, double 1.800000e-02, double 0x3FE604189374BC6A, double -6.990000e+00, double 1.807300e+01, double 2.300000e+01, double 2.000000e+00, double 1.800000e-02, double 6.120000e-01, double -6.990000e+00, double 1.847000e+01, double 2.400000e+01, double 2.000000e+00, double 1.800000e-02, double 5.940000e-01, double -6.990000e+00, double 1.884900e+01, double 2.500000e+01, double 3.000000e+00, double 2.700000e-02, double 6.580000e-01, double -6.990000e+00, double 1.927100e+01, double 2.600000e+01, double 3.000000e+00, double 2.700000e-02, double 7.060000e-01, double -6.990000e+00, double 1.974100e+01, double 2.700000e+01, double 3.000000e+00, double 5.400000e-02, double 6.600000e-01, double -6.990000e+00, double 2.017700e+01, double 2.800000e+01, double 3.000000e+00, double 5.400000e-02, double 6.060000e-01, double -6.990000e+00, double 2.057600e+01, double 2.900000e+01, double 3.000000e+00, double 5.400000e-02, double 5.650000e-01, double -6.990000e+00, double 2.095000e+01, double 3.000000e+01, double 4.000000e+00, double 1.140000e-01, double 5.600000e-01, double 0xC018147AE147AE14, double 2.131600e+01, double 3.100000e+01, double 4.000000e+00, double 1.140000e-01, double 5.790000e-01, double 0xC018147AE147AE14, double 2.169900e+01, double 3.200000e+01, double 5.000000e+00, double 4.520000e-01, double 5.670000e-01, double 0xC018147AE147AE14, double 2.207800e+01, double 3.300000e+01, double 5.000000e+00, double 4.520000e-01, double 5.340000e-01, double 0xC018147AE147AE14, double 2.243800e+01, double 3.400000e+01, double 5.000000e+00, double 4.520000e-01, double 5.140000e-01, double -5.229000e+00, double 2.278200e+01, double 3.500000e+01, double 7.000000e+00, double 6.330000e+00, double 5.200000e-01, double -5.229000e+00, double 2.313300e+01, double 3.600000e+01, double 7.000000e+00, double 6.330000e+00, double 5.180000e-01, double -5.229000e+00, double 2.348400e+01, double 3.700000e+01, double 7.000000e+00, double 6.330000e+00, double 5.070000e-01, double -5.229000e+00, double 2.382800e+01, double 3.800000e+01, double 1.900000e+01, double 1.718130e+02, double 4.470000e-01, double -4.559000e+00, double 2.417300e+01, double 3.200000e+04, double 4.100000e+01, double 0.000000e+00, double 1.000000e+00, double 4.532000e+00, double 1.000000e+00, double -8.240000e+00, double 0.000000e+00, double 1.000000e+00, double 1.000000e+00, double 9.040000e-01, double 0x3FEF851EB851EB85, double -8.240000e+00, double 1.250000e+00, double 2.000000e+00, double 1.000000e+00, double 0x3FB70A3D70A3D70A, double 0x3FEF74BC6A7EF9DB, double -8.240000e+00, double 2.500000e+00, double 3.000000e+00, double 1.000000e+00, double 2.900000e-02, double 0x3FEF74BC6A7EF9DB, double -8.240000e+00, double 3.750000e+00, double 4.000000e+00, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 0x3FEF645A1CAC0831, double -8.240000e+00, double 4.909000e+00, double 5.000000e+00, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 0x3FEF333333333333, double -8.240000e+00, double 5.958000e+00, double 6.000000e+00, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 0x3FEEB020C49BA5E3, double -8.240000e+00, double 6.857000e+00, double 7.000000e+00, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 0x3FEE353F7CED9168, double -8.240000e+00, double 7.700000e+00, double 8.000000e+00, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 9.330000e-01, double -8.240000e+00, double 8.500000e+00, double 9.000000e+00, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 9.200000e-01, double -8.240000e+00, double 9.237000e+00, double 1.000000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 8.920000e-01, double -7.447000e+00, double 0x4023CA3D70A3D70A, double 1.100000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 0x3FEB9DB22D0E5604, double -7.447000e+00, double 1.050000e+01, double 1.200000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 0x3FEAD916872B020C, double -7.447000e+00, double 1.108300e+01, double 1.300000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 7.860000e-01, double -7.447000e+00, double 1.160400e+01, double 1.400000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 7.550000e-01, double -7.447000e+00, double 1.210700e+01, double 1.500000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 6.980000e-01, double -7.447000e+00, double 1.255400e+01, double 1.600000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 6.730000e-01, double -7.447000e+00, double 1.300000e+01, double 1.700000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 6.050000e-01, double -7.447000e+00, double 1.339100e+01, double 1.800000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 6.290000e-01, double -7.447000e+00, double 1.378100e+01, double 1.900000e+01, double 2.000000e+00, double 1.800000e-02, double 8.830000e-01, double -7.447000e+00, double 1.447400e+01, double 2.000000e+01, double 2.000000e+00, double 1.800000e-02, double 8.580000e-01, double -6.990000e+00, double 1.509600e+01, double 2.100000e+01, double 2.000000e+00, double 1.800000e-02, double 0x3FEA872B020C49BA, double -6.990000e+00, double 1.566700e+01, double 2.200000e+01, double 2.000000e+00, double 1.800000e-02, double 7.670000e-01, double -6.990000e+00, double 1.617700e+01, double 2.300000e+01, double 2.000000e+00, double 1.800000e-02, double 7.050000e-01, double -6.990000e+00, double 1.663600e+01, double 2.400000e+01, double 2.000000e+00, double 1.800000e-02, double 6.370000e-01, double -6.990000e+00, double 1.705700e+01, double 2.500000e+01, double 2.000000e+00, double 1.800000e-02, double 5.640000e-01, double -6.990000e+00, double 1.742900e+01, double 2.600000e+01, double 2.000000e+00, double 1.800000e-02, double 5.500000e-01, double -6.990000e+00, double 1.778600e+01, double 2.700000e+01, double 3.000000e+00, double 2.700000e-02, double 0x3FE34BC6A7EF9DB2, double -6.990000e+00, double 1.817700e+01, double 2.800000e+01, double 3.000000e+00, double 2.700000e-02, double 6.350000e-01, double -6.990000e+00, double 1.859700e+01, double 2.900000e+01, double 3.000000e+00, double 2.700000e-02, double 5.920000e-01, double -6.990000e+00, double 1.899400e+01, double 3.000000e+01, double 3.000000e+00, double 2.700000e-02, double 5.330000e-01, double 0xC018147AE147AE14, double 1.935200e+01, double 3.100000e+01, double 3.000000e+00, double 2.700000e-02, double 5.180000e-01, double 0xC018147AE147AE14, double 1.969300e+01, double 3.200000e+01, double 4.000000e+00, double 0x3FB26E978D4FDF3B, double 5.680000e-01, double 0xC018147AE147AE14, double 2.006600e+01, double 3.300000e+01, double 4.000000e+00, double 0x3FB26E978D4FDF3B, double 5.940000e-01, double 0xC018147AE147AE14, double 2.046200e+01, double 3.400000e+01, double 4.000000e+00, double 0x3FB26E978D4FDF3B, double 5.680000e-01, double -5.229000e+00, double 2.084100e+01, double 3.500000e+01, double 5.000000e+00, double 1.430000e-01, double 5.360000e-01, double -5.229000e+00, double 2.120100e+01, double 3.600000e+01, double 5.000000e+00, double 1.430000e-01, double 5.220000e-01, double -5.229000e+00, double 2.154900e+01, double 3.700000e+01, double 6.000000e+00, double 1.720000e-01, double 5.420000e-01, double -5.229000e+00, double 2.191100e+01, double 3.800000e+01, double 7.000000e+00, double 6.330000e-01, double 5.390000e-01, double -4.559000e+00, double 2.227500e+01, double 3.900000e+01, double 7.000000e+00, double 6.330000e-01, double 5.190000e-01, double -4.559000e+00, double 2.262500e+01, double 4.000000e+01, double 8.000000e+00, double 7.230000e-01, double 5.140000e-01, double -3.980000e+00, double 2.297100e+01, double 4.100000e+01, double 1.000000e+01, double 0x40221604189374BC, double 5.180000e-01, double -3.980000e+00, double 2.332100e+01, double 2.400000e+04, double 4.400000e+01, double 0.000000e+00, double 1.000000e+00, double 0x4021D3345FD90392, double 0x3FEF1965403A7185, double 0x3FC333334015BC21, double 0.000000e+00, double 1.000000e+00, double 1.000000e+00, double 0x4021D3345FD90392, double 0x3FEBFDC57FC8DA71, double 0x3FC333334015BC21, double 0x3FEE4A53BFDF6D52, double 2.000000e+00, double 1.000000e+00, double 0x3FEC85209FCC7D60, double 0x3FEB7317FFFBF935, double 0x3FC333334015BC21, double 0x3FFE27FC608E3537, double 3.000000e+00, double 1.000000e+00, double 0x3FB6D0E7000242F6, double 0x3FEADF2E8034DD71, double 0x3FC333334015BC21, double 0x400671F65F6D4DE1, double 4.000000e+00, double 1.000000e+00, double 0x3F9CDC38BF530072, double 0x3FEA52C29FF82D79, double 0x3FC333334015BC21, double 0x400D9C56209E0539, double 5.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE99B1F2000D161, double 0x3FC333334015BC21, double 0x401242E33FAAE5C7, double 6.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE8AFECC00FD899, double 0x3FC333334015BC21, double 0x4015920DDFBC939A, double 7.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE798B2E022D122, double 0x3FC333334015BC21, double 0x4018B82F2029154D, double 8.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE66F80602F0C29, double 0x3FC333334015BC21, double 0x401BB3481FD45BB7, double 9.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE51CE34000CC03, double 0x3FC333334015BC21, double 0x401E82A44010BC3B, double 1.000000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE3AE62FFDD230F, double 0x3FC333334015BC21, double 0x4020934DDFDCC9F0, double 1.100000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE2327260112F1F, double 0x3FC333334015BC21, double 0x4021D02A3FEF8432, double 1.200000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE0B65C000EA136, double 0x3FC70A3D7FAC2175, double 0x4022F8C4202AEDBF, double 1.300000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDEA65940382967, double 0x3FC70A3D7FAC2175, double 0x40240E2901810980, double 1.400000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDC099BE01ADD51, double 0x3FC70A3D7FAC2175, double 0x40251182814F1FF9, double 1.500000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDA667E005861E3, double 0x3FC70A3D7FAC2175, double 0x40260406FFCE81D9, double 1.600000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD9015C005BF06C, double 0x3FC70A3D7FAC2175, double 0x4026E6ED3F331BB6, double 1.700000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD7CCFFA06746BF, double 0x3FC70A3D7FAC2175, double 0x4027BB64E054690E, double 1.800000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD7870C20164259, double 0x3FC70A3D7FAC2175, double 0x4028829080156415, double 1.900000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDB05A9804A1ADF, double 0x3FC70A3D7FAC2175, double 0x40293D82814F1FF9, double 2.000000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FE2146600317590, double 0x3FC70A3D7FAC2175, double 0x402A8DEE3F0D5C09, double 2.100000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FE0A163DFC5C53E, double 0x3FC70A3D7FAC2175, double 0x402BBDF9DF548ECE, double 2.200000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FDD24A12031DFDD, double 0x3FC99999A00ADE11, double 0x402CCE0C7F6A436B, double 2.300000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FDA2AE45F908950, double 0x3FC99999A00ADE11, double 0x402DC3288128898C, double 2.400000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD86B21804726F5, double 0x3FC99999A00ADE11, double 0x402EA1733F92BD07, double 2.500000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD730DD9FFB29FA, double 0x3FC99999A00ADE11, double 0x402F6C58FF759685, double 2.600000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD768379FB21519, double 0x3FC99999A00ADE11, double 0x403013569F490603, double 2.700000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 3.806400e-01, double 0x3FC99999A00ADE11, double 0x40307CFB407D9E91, double 2.800000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD8448A60381B72, double 0x3FC99999A00ADE11, double 0x4030F0EBE08E4AB1, double 2.900000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD71542FFA66049, double 0x3FC99999A00ADE11, double 0x403159F0FFB1FC67, double 3.000000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD5F4CAFFE5755D, double 0x3FC99999A00ADE11, double 0x4031B9F81F60EE57, double 3.100000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD5B6EE7FB629D9, double 0x3FC99999A00ADE11, double 0x4032127EC0D03F48, double 3.200000e+01, double 4.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD5F31F407BDFE4, double 0x3FC99999A00ADE11, double 0x40327152007DD441, double 3.300000e+01, double 4.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD5F5D10040CB2A, double 0x3FC99999A00ADE11, double 0x4032D59BBFE486FE, double 3.400000e+01, double 4.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD603E86003D454, double 2.500000e-01, double 0x403332117F84449E, double 3.500000e+01, double 5.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD602EC4051F710, double 2.500000e-01, double 0x403391D7FF2FF668, double 3.600000e+01, double 5.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD5BAD25F99FFAC, double 2.500000e-01, double 0x4033F482A058D07C, double 3.700000e+01, double 5.000000e+00, double 0x3FB6C310E004DF79, double 0x3FD589E59FB51A31, double 0x3FD1EB851FCB32AA, double 0x40344FC47FF73124, double 3.800000e+01, double 6.000000e+00, double 0x3FBB507A9F610C68, double 0x3FD56FE7C0296189, double 0x3FD1EB851FCB32AA, double 0x4034AC7C7FAD5F49, double 3.900000e+01, double 6.000000e+00, double 0x3FC5A52AA0AC4C3E, double 0x3FD57A7EFFC2F6E9, double 0x3FD333334015BC21, double 0x40350A5DFF8F97B8, double 4.000000e+01, double 7.000000e+00, double 0x3FC940B1A0F75BED, double 0x3FD56C005FB27E53, double 0x3FD333334015BC21, double 0x403567F0FFB1FC67, double 4.100000e+01, double 7.000000e+00, double 0x3FC940B1A0F75BED, double 0x3FD53A30C008BB88, double 0x3FD333334015BC21, double 0x4035C50A40CBA22A, double 4.200000e+01, double 8.000000e+00, double 0x3FE6D0E6FFCB4936, double 0x3FD506FAA06FA1A3, double 0x3FD99999A00ADE11, double 0x40362070DF662C85, double 4.300000e+01, double 8.000000e+00, double 0x3FE6D0E6FFCB4936, double 0x3FD5B623E0515B5F, double 0x3FD99999A00ADE11, double 0x40367A17C01025E8, double 4.400000e+01, double 9.000000e+00, double 0x3FE9AB03DFE70E75, double 0x3FDB369A001BD9A5, double 0x3FD99999A00ADE11, double 0x4036D10540B1A0F7, double 2.205000e+04, double 4.400000e+01, double 0.000000e+00, double 1.000000e+00, double 0x4021D3345FD90392, double 0x3FEE878AE0072B06, double 0x3FC333334015BC21, double 0.000000e+00, double 1.000000e+00, double 1.000000e+00, double 0x4021D3345FD90392, double 0x3FEAAB10001715E0, double 0x3FC333334015BC21, double 0x3FEBD5D3201A7417, double 2.000000e+00, double 1.000000e+00, double 0x3FEC85209FCC7D60, double 0x3FEA1C3A9FD2DD77, double 0x3FC333334015BC21, double 0x3FFBBB6DDF818551, double 3.000000e+00, double 1.000000e+00, double 0x3FB6D0E7000242F6, double 0x3FE96A73FFDFA74E, double 0x3FC333334015BC21, double 0x4004AA703FAE15D2, double 4.000000e+00, double 1.000000e+00, double 0x3F9CDC38BF530072, double 0x3FE8D8FAA019BB68, double 0x3FC333334015BC21, double 0x400B4EB4202D9CF1, double 5.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE82B17E00A5B12, double 0x3FC333334015BC21, double 0x4010DFBFA0138645, double 6.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE764EEA0426668, double 0x3FC333334015BC21, double 0x4013FA01FFB480A6, double 7.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE674F2A0127BFB, double 0x3FC333334015BC21, double 0x4016F2E12015F50A, double 8.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE55F3DBFCB7EE6, double 0x3FC333334015BC21, double 0x4019C83980544E36, double 9.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE42B4980044FCE, double 0x3FC333334015BC21, double 0x401C78E8FFB35400, double 1.000000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE2E2ACE014CA8A, double 0x3FC333334015BC21, double 0x401F04AA601060F6, double 1.100000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE18FAD004289D7, double 0x3FC333334015BC21, double 0x4020B5F5DFEB8D82, double 1.200000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE03FDC602C7F54, double 0x3FC333334015BC21, double 0x4021D7D2A0207165, double 1.300000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDE0C8B9FED0106, double 0x3FC70A3D7FAC2175, double 0x4022E89A3FDCB9D5, double 1.400000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDBAAAADFA34F61, double 0x3FC70A3D7FAC2175, double 0x4023E91D7FEDA103, double 1.500000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDA4FF91F99ABEC, double 0x3FC70A3D7FAC2175, double 0x4024DA4200559055, double 1.600000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD902669FFABA4E, double 0x3FC70A3D7FAC2175, double 0x4025BCF780D57D75, double 1.700000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD7E471408171D2, double 0x3FC70A3D7FAC2175, double 0x4026922FDFC19C17, double 1.800000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD7A6E0FFDF9EB7, double 0x3FC70A3D7FAC2175, double 0x40275AD9209825FC, double 1.900000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDB42E39FA21C4A, double 0x3FC70A3D7FAC2175, double 0x402817D9414F55A9, double 2.000000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FE275F72007875E, double 0x3FC70A3D7FAC2175, double 0x40296DA1412DC7B9, double 2.100000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FE10F469FD52594, double 0x3FC70A3D7FAC2175, double 0x402AA3B480A5ACCD, double 2.200000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FDE13F29FB3FEB9, double 0x3FC70A3D7FAC2175, double 0x402BBA1B5FD7D6EC, double 2.300000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FDAB4871F884A56, double 0x3FC99999A00ADE11, double 0x402CB579BFDF7E80, double 2.400000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD8EA46DF7C40B2, double 0x3FC99999A00ADE11, double 0x402D99BB7EC6AF7C, double 2.500000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD73885BFBF6A86, double 0x3FC99999A00ADE11, double 0x402E6A2CC1292A9C, double 2.600000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD631FE0006C72B, double 0x3FC99999A00ADE11, double 0x402F2990DEDFF4C8, double 2.700000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD65C91FF79FBCD, double 0x3FC99999A00ADE11, double 0x402FDA393EE5EEDD, double 2.800000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD74C37A0192961, double 0x3FC99999A00ADE11, double 0x403051CA3F53D2E6, double 2.900000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD766103FBE30FE, double 0x3FC99999A00ADE11, double 0x4030C0BE40420F6F, double 3.000000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD6AC721F93546C, double 0x3FC99999A00ADE11, double 0x403125A7206AD993, double 3.100000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD67A61005C2C8D, double 0x3FC99999A00ADE11, double 0x40318234FFBC0D62, double 3.200000e+01, double 4.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD6ADE6BFDF75E9, double 0x3FC99999A00ADE11, double 0x4031E4D100383424, double 3.300000e+01, double 4.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD654A36041DF1E, double 0x3FC99999A00ADE11, double 0x40324C9E2011177F, double 3.400000e+01, double 4.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD59C0BFF929CD0, double 0x3FC99999A00ADE11, double 0x4032ABE0C09F97E0, double 3.500000e+01, double 4.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD540BF5F9E4298, double 2.500000e-01, double 0x403304016052502F, double 3.600000e+01, double 5.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD52BB6E084EE1A, double 2.500000e-01, double 0x40335F973F4C462A, double 3.700000e+01, double 5.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD4F6391FE4D560, double 2.500000e-01, double 0x4033BE37C060ADC0, double 3.800000e+01, double 5.000000e+00, double 0x3FB6C310E004DF79, double 0x3FD4D52ADF7CA7C6, double 0x3FD1EB851FCB32AA, double 0x403416018032C047, double 3.900000e+01, double 6.000000e+00, double 0x3FBB507A9F610C68, double 0x3FD4C392BF935BF0, double 0x3FD1EB851FCB32AA, double 0x40346F7CE0256F25, double 4.000000e+01, double 6.000000e+00, double 0x3FBB507A9F610C68, double 0x3FD4DA7B3FD61D9D, double 0x3FD1EB851FCB32AA, double 0x4034CA6200A6182D, double 4.100000e+01, double 7.000000e+00, double 0x3FC940B1A0F75BED, double 0x3FD4E0D1805492EE, double 0x3FD333334015BC21, double 0x4035255380B09488, double 4.200000e+01, double 7.000000e+00, double 0x3FC940B1A0F75BED, double 0x3FD4DC8B80401B12, double 0x3FD333334015BC21, double 0x40358027001F09B1, double 4.300000e+01, double 8.000000e+00, double 0x3FCCDC38BF530072, double 0x3FD5B27E600AE036, double 0x3FD333334015BC21, double 0x4035D9B73F9CCE02, double 4.400000e+01, double 8.000000e+00, double 0x3FE6D0E6FFCB4936, double 0x3FDB5184204F6F99, double 0x3FD99999A00ADE11, double 0x403631F27FE4BCAE, double 1.600000e+04, double 4.500000e+01, double 0.000000e+00, double 1.000000e+00, double 0x4021D3345FD90392, double 0x3FEAB62F803179DC, double 0x3FC333334015BC21, double 0.000000e+00, double 1.000000e+00, double 1.000000e+00, double 0x4021D3345FD90392, double 0x3FE3F5D140240771, double 0x3FC333334015BC21, double 0x3FE435666020150D, double 2.000000e+00, double 1.000000e+00, double 0x3FEC85209FCC7D60, double 0x3FE355A36016EC00, double 0x3FC333334015BC21, double 0x3FF42BCABED59345, double 3.000000e+00, double 1.000000e+00, double 0x3FEC85209FCC7D60, double 0x3FE2F173FFC5E23C, double 0x3FC333334015BC21, double 0x3FFE27FC608E3537, double 4.000000e+00, double 1.000000e+00, double 0x3FB6D0E7000242F6, double 0x3FE268DEE0397FED, double 0x3FC333334015BC21, double 0x4004024B1FB902EB, double 5.000000e+00, double 1.000000e+00, double 0x3F9CDC38BF530072, double 0x3FE1F832E0384AB0, double 0x3FC333334015BC21, double 0x4008DBDFDFCF0810, double 6.000000e+00, double 1.000000e+00, double 0x3F9CDC38BF530072, double 0x3FE17E495FD69081, double 0x3FC333334015BC21, double 0x400D9C56209E0539, double 7.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE0F4A63FC53CE1, double 0x3FC333334015BC21, double 0x40111FEF9FB59274, double 8.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE05B9D602B4180, double 0x3FC333334015BC21, double 0x401361A7602BB9C2, double 9.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDF6AF19F83D82B, double 0x3FC333334015BC21, double 0x4015920DDFBC939A, double 1.000000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDE0A595FC2B343, double 0x3FC333334015BC21, double 0x4017B02F9FAAD5AC, double 1.100000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDC9BB5C038364A, double 0x3FC333334015BC21, double 0x4019BB64002FA5B5, double 1.200000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDB6725A06FEEF3, double 0x3FC333334015BC21, double 0x401BB3481FD45BB7, double 1.300000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDA87C49FD7A13C, double 0x3FC333334015BC21, double 0x401D97B65FCDF0E4, double 1.400000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD9AA86A05C7032, double 0x3FC333334015BC21, double 0x401F68BE200BB91C, double 1.500000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD8D190204920B0, double 0x3FC333334015BC21, double 0x4020934DDFDCC9F0, double 1.600000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD7F3643F89719D, double 0x3FC333334015BC21, double 0x402168D7E02645E5, double 1.700000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD71335E03F4DFC, double 0x3FC70A3D7FAC2175, double 0x4022353C000B6894, double 1.800000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD649D65F95085D, double 0x3FC70A3D7FAC2175, double 0x4022F8C4202AEDBF, double 1.900000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD66BC2001523A9, double 0x3FC70A3D7FAC2175, double 0x4023B3C2600C5A2B, double 2.000000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDA0153001BF36A, double 0x3FC70A3D7FAC2175, double 0x4024668E3EF28416, double 2.100000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FE1BB2C3FBDC9E9, double 0x3FC70A3D7FAC2175, double 0x4025B16C3FC43B2E, double 2.200000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FE0E7EF9FD7EE8B, double 0x3FC70A3D7FAC2175, double 0x4026E3B8404DCDE9, double 2.300000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FDE7F6B1F88B16A, double 0x3FC70A3D7FAC2175, double 0x4027FC557F8E5599, double 2.400000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FDB67B8C0144678, double 0x3FC70A3D7FAC2175, double 0x4028FDEC80C73ABD, double 2.500000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD9BED2BF91362F, double 0x3FC70A3D7FAC2175, double 0x4029EAF13E9C1D02, double 2.600000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD8318D5FE93882, double 0x3FC70A3D7FAC2175, double 0x402AC59DC14686CD, double 2.700000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD733F83F9744AB, double 0x3FC70A3D7FAC2175, double 0x402B8FF180E13BF0, double 2.800000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD78E459FE9B736, double 0x3FC99999A00ADE11, double 0x402C4BB360143CCE, double 2.900000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD8B39F3FDCF5F6, double 0x3FC99999A00ADE11, double 0x402D2286BFA241DF, double 3.000000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD8BADCC009F0C5, double 0x3FC99999A00ADE11, double 0x402E0F9BC1920627, double 3.100000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD78A97DF966441, double 0x3FC99999A00ADE11, double 0x402EE7163F06A60C, double 3.200000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD66143BFFBE196, double 0x3FC99999A00ADE11, double 0x402FAC2C7FBACB43, double 3.300000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD6201A3F79F110, double 0x3FC99999A00ADE11, double 0x403030C29F4C6102, double 3.400000e+01, double 4.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD6516A202F4A70, double 0x3FC99999A00ADE11, double 0x4030917F7F3C2042, double 3.500000e+01, double 4.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD636235F780212, double 0x3FC99999A00ADE11, double 0x4030F74D7FE5936D, double 3.600000e+01, double 4.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD62A453FF280B3, double 0x3FC99999A00ADE11, double 0x4031549840D405A6, double 3.700000e+01, double 5.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD60EE2800130F1, double 0x3FC99999A00ADE11, double 0x4031B49F806367AE, double 3.800000e+01, double 5.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD5AE8F40607E81, double 0x3FC99999A00ADE11, double 0x403217090059C213, double 3.900000e+01, double 5.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD56EA6FFE7340A, double 0x3FC99999A00ADE11, double 0x403271AD7F29ABCB, double 4.000000e+01, double 6.000000e+00, double 0x3FAB61151FA0240F, double 0x3FD54CC8BF90BDED, double 0x3FC99999A00ADE11, double 0x4032CD91BFB08498, double 4.100000e+01, double 6.000000e+00, double 0x3FAB61151FA0240F, double 0x3FD55BA1006B34D7, double 2.500000e-01, double 0x40332AA18017E854, double 4.200000e+01, double 7.000000e+00, double 0x3FAFF1435FE24EFB, double 0x3FD5600880798473, double 2.500000e-01, double 0x403387A9DF61FAC7, double 4.300000e+01, double 7.000000e+00, double 0x3FAFF1435FE24EFB, double 0x3FD56297BFA4C61E, double 2.500000e-01, double 0x4033E4BBBF5E4F41, double 4.400000e+01, double 8.000000e+00, double 0x3FC235A71EF0E48D, double 0x3FD6318CBFEC69A0, double 0x3FD1EB851FCB32AA, double 0x403440EA00BA3A23, double 4.500000e+01, double 8.000000e+00, double 0x3FC235A71EF0E48D, double 0x3FDBEB97E07E51E2, double 0x3FD1EB851FCB32AA, double 0x40349C4E3FFEF391, double 4.800000e+04, double 2.000000e+01, double 0.000000e+00, double 3.000000e+00, double 0.000000e+00, double 4.000000e+00, double 1.000000e+00, double 5.600000e-02, double 1.000000e+00, double 3.000000e+00, double 4.000000e+00, double 7.000000e+00, double 0x3FEE353F7CED9168, double 0x3FE38D4FDF3B645A, double 2.000000e+00, double 4.000000e+00, double 7.000000e+00, double 1.100000e+01, double 3.890000e-01, double 1.670000e-01, double 3.000000e+00, double 3.000000e+00, double 1.100000e+01, double 1.400000e+01, double 0x3FEAA7EF9DB22D0E, double 7.220000e-01, double 4.000000e+00, double 3.000000e+00, double 1.400000e+01, double 1.700000e+01, double 2.780000e-01, double 6.390000e-01, double 5.000000e+00, double 2.000000e+00, double 1.700000e+01, double 1.900000e+01, double 3.610000e-01, double 4.170000e-01, double 6.000000e+00, double 3.000000e+00, double 1.900000e+01, double 2.200000e+01, double 5.830000e-01, double 8.300000e-02, double 7.000000e+00, double 2.000000e+00, double 2.200000e+01, double 2.400000e+01, double 9.170000e-01, double 7.500000e-01, double 8.000000e+00, double 3.000000e+00, double 2.400000e+01, double 2.700000e+01, double 2.500000e-01, double 4.170000e-01, double 9.000000e+00, double 3.000000e+00, double 2.700000e+01, double 3.000000e+01, double 5.830000e-01, double 6.480000e-01, double 1.000000e+01, double 3.000000e+00, double 3.000000e+01, double 3.300000e+01, double 3.520000e-01, double 0x3FE38D4FDF3B645A, double 1.100000e+01, double 3.000000e+00, double 3.300000e+01, double 3.600000e+01, double 3.890000e-01, double 6.250000e-01, double 1.200000e+01, double 4.000000e+00, double 3.600000e+01, double 4.000000e+01, double 3.750000e-01, double 1.440000e-01, double 1.300000e+01, double 3.000000e+00, double 4.000000e+01, double 4.300000e+01, double 8.560000e-01, double 3.890000e-01, double 1.400000e+01, double 3.000000e+00, double 4.300000e+01, double 4.600000e+01, double 0x3FE38D4FDF3B645A, double 1.600000e-01, double 1.500000e+01, double 3.000000e+00, double 4.600000e+01, double 4.900000e+01, double 8.400000e-01, double 2.170000e-01, double 1.600000e+01, double 3.000000e+00, double 4.900000e+01, double 5.200000e+01, double 7.830000e-01, double 1.840000e-01, double 1.700000e+01, double 2.000000e+00, double 5.200000e+01, double 5.400000e+01, double 8.160000e-01, double 8.860000e-01, double 1.800000e+01, double 3.000000e+00, double 5.400000e+01, double 5.700000e+01, double 1.140000e-01, double 3.130000e-01, double 1.900000e+01, double 2.000000e+00, double 5.700000e+01, double 5.900000e+01, double 6.870000e-01, double 4.520000e-01, double 2.000000e+01, double 1.000000e+00, double 5.900000e+01, double 6.000000e+01, double 5.480000e-01, double 9.080000e-01, double 4.410000e+04, double 2.000000e+01, double 0.000000e+00, double 3.000000e+00, double 0.000000e+00, double 4.000000e+00, double 1.000000e+00, double 5.600000e-02, double 1.000000e+00, double 3.000000e+00, double 4.000000e+00, double 7.000000e+00, double 0x3FEE353F7CED9168, double 0x3FE38D4FDF3B645A, double 2.000000e+00, double 4.000000e+00, double 7.000000e+00, double 1.100000e+01, double 3.890000e-01, double 1.670000e-01, double 3.000000e+00, double 3.000000e+00, double 1.100000e+01, double 1.400000e+01, double 0x3FEAA7EF9DB22D0E, double 7.220000e-01, double 4.000000e+00, double 3.000000e+00, double 1.400000e+01, double 1.700000e+01, double 2.780000e-01, double 1.390000e-01, double 5.000000e+00, double 1.000000e+00, double 1.700000e+01, double 1.800000e+01, double 0x3FEB8D4FDF3B645A, double 9.170000e-01, double 6.000000e+00, double 3.000000e+00, double 1.800000e+01, double 2.100000e+01, double 8.300000e-02, double 5.830000e-01, double 7.000000e+00, double 3.000000e+00, double 2.100000e+01, double 2.400000e+01, double 4.170000e-01, double 2.500000e-01, double 8.000000e+00, double 3.000000e+00, double 2.400000e+01, double 2.700000e+01, double 7.500000e-01, double 8.050000e-01, double 9.000000e+00, double 3.000000e+00, double 2.700000e+01, double 3.000000e+01, double 1.940000e-01, double 5.740000e-01, double 1.000000e+01, double 3.000000e+00, double 3.000000e+01, double 3.300000e+01, double 4.260000e-01, double 5.370000e-01, double 1.100000e+01, double 3.000000e+00, double 3.300000e+01, double 3.600000e+01, double 4.630000e-01, double 8.190000e-01, double 1.200000e+01, double 4.000000e+00, double 3.600000e+01, double 4.000000e+01, double 1.800000e-01, double 1.000000e-01, double 1.300000e+01, double 3.000000e+00, double 4.000000e+01, double 4.300000e+01, double 9.000000e-01, double 4.680000e-01, double 1.400000e+01, double 3.000000e+00, double 4.300000e+01, double 4.600000e+01, double 5.320000e-01, double 0x3FE3EF9DB22D0E56, double 1.500000e+01, double 3.000000e+00, double 4.600000e+01, double 4.900000e+01, double 3.760000e-01, double 4.500000e-01, double 1.600000e+01, double 3.000000e+00, double 4.900000e+01, double 5.200000e+01, double 5.500000e-01, double 5.520000e-01, double 1.700000e+01, double 3.000000e+00, double 5.200000e+01, double 5.500000e+01, double 4.480000e-01, double 4.030000e-01, double 1.800000e+01, double 2.000000e+00, double 5.500000e+01, double 5.700000e+01, double 5.970000e-01, double 6.430000e-01, double 1.900000e+01, double 2.000000e+00, double 5.700000e+01, double 5.900000e+01, double 3.570000e-01, double 7.220000e-01, double 2.000000e+01, double 2.000000e+00, double 5.900000e+01, double 6.100000e+01, double 2.780000e-01, double 0x3FEEB851EB851EB8, double 3.200000e+04, double 2.000000e+01, double 0.000000e+00, double 1.000000e+00, double 0.000000e+00, double 2.000000e+00, double 1.000000e+00, double 5.280000e-01, double 1.000000e+00, double 2.000000e+00, double 2.000000e+00, double 4.000000e+00, double 4.720000e-01, double 3.050000e-01, double 2.000000e+00, double 2.000000e+00, double 4.000000e+00, double 6.000000e+00, double 6.940000e-01, double 8.300000e-02, double 3.000000e+00, double 1.000000e+00, double 6.000000e+00, double 7.000000e+00, double 9.170000e-01, double 0x3FEB8D4FDF3B645A, double 4.000000e+00, double 2.000000e+00, double 7.000000e+00, double 9.000000e+00, double 1.390000e-01, double 6.390000e-01, double 5.000000e+00, double 2.000000e+00, double 9.000000e+00, double 1.100000e+01, double 3.610000e-01, double 4.170000e-01, double 6.000000e+00, double 3.000000e+00, double 1.100000e+01, double 1.400000e+01, double 5.830000e-01, double 8.300000e-02, double 7.000000e+00, double 2.000000e+00, double 1.400000e+01, double 1.600000e+01, double 9.170000e-01, double 7.500000e-01, double 8.000000e+00, double 3.000000e+00, double 1.600000e+01, double 1.900000e+01, double 2.500000e-01, double 8.700000e-01, double 9.000000e+00, double 3.000000e+00, double 1.900000e+01, double 2.200000e+01, double 1.300000e-01, double 0x3FEAA7EF9DB22D0E, double 1.000000e+01, double 4.000000e+00, double 2.200000e+01, double 2.600000e+01, double 1.670000e-01, double 3.890000e-01, double 1.100000e+01, double 4.000000e+00, double 2.600000e+01, double 3.000000e+01, double 0x3FE38D4FDF3B645A, double 4.780000e-01, double 1.200000e+01, double 4.000000e+00, double 3.000000e+01, double 3.400000e+01, double 5.220000e-01, double 3.300000e-02, double 1.300000e+01, double 3.000000e+00, double 3.400000e+01, double 3.700000e+01, double 0x3FEEF1A9FBE76C8B, double 9.170000e-01, double 1.400000e+01, double 4.000000e+00, double 3.700000e+01, double 4.100000e+01, double 8.300000e-02, double 6.170000e-01, double 1.500000e+01, double 3.000000e+00, double 4.100000e+01, double 4.400000e+01, double 3.830000e-01, double 0x3FEFD70A3D70A3D7, double 1.600000e+01, double 4.000000e+00, double 4.400000e+01, double 4.800000e+01, double 5.000000e-03, double 2.740000e-01, double 1.700000e+01, double 3.000000e+00, double 4.800000e+01, double 5.100000e+01, double 7.260000e-01, double 4.800000e-01, double 1.800000e+01, double 3.000000e+00, double 5.100000e+01, double 5.400000e+01, double 5.190000e-01, double 2.610000e-01, double 1.900000e+01, double 2.000000e+00, double 5.400000e+01, double 5.600000e+01, double 7.390000e-01, double 8.840000e-01, double 2.000000e+01, double 2.000000e+00, double 5.600000e+01, double 5.800000e+01, double 1.160000e-01, double 1.000000e+00, double 2.400000e+04, double 2.000000e+01, double 0.000000e+00, double 2.000000e+00, double 0.000000e+00, double 3.000000e+00, double 1.000000e+00, double 0x3FED55557FECD2DA, double 1.000000e+00, double 3.000000e+00, double 3.000000e+00, double 6.000000e+00, double 0x3FB55554002B75AF, double 0x3FE2AAAAFFD9A5B4, double 2.000000e+00, double 3.000000e+00, double 6.000000e+00, double 9.000000e+00, double 0x3FDAAAAA004CB497, double 2.500000e-01, double 3.000000e+00, double 2.000000e+00, double 9.000000e+00, double 1.100000e+01, double 7.500000e-01, double 0x3FED5556003CBBC8, double 4.000000e+00, double 3.000000e+00, double 1.100000e+01, double 1.400000e+01, double 0x3FB5554FFFD1EFBD, double 0x3FE2AAABFFF00731, double 5.000000e+00, double 3.000000e+00, double 1.400000e+01, double 1.700000e+01, double 0x3FDAAAA8001FF19E, double 2.500000e-01, double 6.000000e+00, double 3.000000e+00, double 1.700000e+01, double 2.000000e+01, double 7.500000e-01, double 0x3FE12F6800221760, double 7.000000e+00, double 3.000000e+00, double 2.000000e+01, double 2.300000e+01, double 0x3FDDA12FFFBBD141, double 5.000000e-01, double 8.000000e+00, double 4.000000e+00, double 2.300000e+01, double 2.700000e+01, double 5.000000e-01, double 0x3FAC71D6002E2171, double 9.000000e+00, double 3.000000e+00, double 2.700000e+01, double 3.000000e+01, double 0x3FEE38E2A0265939, double 0x3FD9C71FFF79C843, double 1.000000e+01, double 3.000000e+00, double 3.000000e+01, double 3.300000e+01, double 0x3FE31C7000431BDF, double 0x3FE888899FE29A25, double 1.100000e+01, double 3.000000e+00, double 3.300000e+01, double 3.600000e+01, double 0x3FCDDDD9A0ABEDC0, double 0x3FE9C71D5FD9A6C7, double 1.200000e+01, double 3.000000e+00, double 3.600000e+01, double 3.900000e+01, double 0x3FC8E38AA0CFBB36, double 0x3FE8A28B7FC7D8BF, double 1.300000e+01, double 3.000000e+00, double 3.900000e+01, double 4.200000e+01, double 0x3FCD75D23F27882F, double 0x3FE38E38DFBCE0E9, double 1.400000e+01, double 3.000000e+00, double 4.200000e+01, double 4.500000e+01, double 0x3FD8E38E40863E2E, double 0x3FDCC485BFE1C69E, double 1.500000e+01, double 3.000000e+00, double 4.500000e+01, double 4.800000e+01, double 0x3FE19DBD200F1CB1, double 0x3FC8E3927F26AF4A, double 1.600000e+01, double 2.000000e+00, double 4.800000e+01, double 5.000000e+01, double 0x3FE9C71B6036542E, double 0x3FED38E3FFCCDCF1, double 1.700000e+01, double 3.000000e+00, double 5.000000e+01, double 5.300000e+01, double 0x3FB638DFFFE14A7E, double 0x3FE293E99FFD7217, double 1.800000e+01, double 3.000000e+00, double 5.300000e+01, double 5.600000e+01, double 0x3FDAD82CC0051BD1, double 0x3FBD097FFDDE8A06, double 1.900000e+01, double 2.000000e+00, double 5.600000e+01, double 5.800000e+01, double 0x3FEC5ED000442EBF, double 0x3FE114523FF1653B, double 2.000000e+01, double 2.000000e+00, double 5.800000e+01, double 6.000000e+01, double 0x3FDDD75B5FE6DF36, double 0x3FE61E1E1FF306EB, double 2.205000e+04, double 2.000000e+01, double 0.000000e+00, double 2.000000e+00, double 0.000000e+00, double 3.000000e+00, double 1.000000e+00, double 0x3FED55557FECD2DA, double 1.000000e+00, double 3.000000e+00, double 3.000000e+00, double 6.000000e+00, double 0x3FB55554002B75AF, double 0x3FE2AAAAFFD9A5B4, double 2.000000e+00, double 3.000000e+00, double 6.000000e+00, double 9.000000e+00, double 0x3FDAAAAA004CB497, double 2.500000e-01, double 3.000000e+00, double 2.000000e+00, double 9.000000e+00, double 1.100000e+01, double 7.500000e-01, double 0x3FED5556003CBBC8, double 4.000000e+00, double 3.000000e+00, double 1.100000e+01, double 1.400000e+01, double 0x3FB5554FFFD1EFBD, double 0x3FE2AAABFFF00731, double 5.000000e+00, double 3.000000e+00, double 1.400000e+01, double 1.700000e+01, double 0x3FDAAAA8001FF19E, double 2.500000e-01, double 6.000000e+00, double 3.000000e+00, double 1.700000e+01, double 2.000000e+01, double 7.500000e-01, double 0x3FCA12F57F624F9A, double 7.000000e+00, double 3.000000e+00, double 2.000000e+01, double 2.300000e+01, double 0x3FE97B42A0276C19, double 0x3FC5555580FFB399, double 8.000000e+00, double 3.000000e+00, double 2.300000e+01, double 2.600000e+01, double 0x3FEAAAAA9FC0131A, double 0x3FE71C72C01993AD, double 9.000000e+00, double 4.000000e+00, double 2.600000e+01, double 3.000000e+01, double 0x3FD1C71AA0032EF8, double 0x3FC38E3FFEF39086, double 1.000000e+01, double 3.000000e+00, double 3.000000e+01, double 3.300000e+01, double 0x3FEB1C7000431BDF, double 0x3FE222233FED7835, double 1.100000e+01, double 3.000000e+00, double 3.300000e+01, double 3.600000e+01, double 0x3FDBBBB9A05B65E8, double 0x3FEDED0A9FC125FB, double 1.200000e+01, double 4.000000e+00, double 3.600000e+01, double 4.000000e+01, double 0x3FB097AAA009F2B3, double 0x3FBE38EFFEB3AD4A, double 1.300000e+01, double 3.000000e+00, double 4.000000e+01, double 4.300000e+01, double 0x3FEC38E200298A57, double 0x3FB7B43900046548, double 1.400000e+01, double 2.000000e+00, double 4.300000e+01, double 4.500000e+01, double 0x3FED0978E0442B87, double 0x3FEDE625BFBE57A5, double 1.500000e+01, double 3.000000e+00, double 4.500000e+01, double 4.800000e+01, double 0x3FB0CED17FEA0F0B, double 0x3FE269A9200E2C2C, double 1.600000e+01, double 3.000000e+00, double 4.800000e+01, double 5.100000e+01, double 0x3FDB2CADBFE3A7A7, double 0x3FCDB30F00CEDCF2, double 1.700000e+01, double 2.000000e+00, double 5.100000e+01, double 5.300000e+01, double 0x3FE8933C3FCC48C3, double 0x3FE84446602E0A77, double 1.800000e+01, double 3.000000e+00, double 5.300000e+01, double 5.600000e+01, double 0x3FCEEEE65F117FD2, double 0x3FC8000A80A6476C, double 1.900000e+01, double 2.000000e+00, double 5.600000e+01, double 5.800000e+01, double 0x3FE9FFFD5FD66E25, double 0x3FE114548001647B, double 2.000000e+01, double 2.000000e+00, double 5.800000e+01, double 6.000000e+01, double 0x3FDDD756DFC6E0B6, double 0x3FD07C26BFE5E72E, double 1.600000e+04, double 2.000000e+01, double 0.000000e+00, double 1.000000e+00, double 0.000000e+00, double 2.000000e+00, double 1.000000e+00, double 0x3FEE38E3A03CBAB5, double 1.000000e+00, double 2.000000e+00, double 2.000000e+00, double 4.000000e+00, double 0x3FAC71C55FDE1B86, double 0x3FE71C71FFE66E78, double 2.000000e+00, double 2.000000e+00, double 4.000000e+00, double 6.000000e+00, double 0x3FD1C71C0033230F, double 5.000000e-01, double 3.000000e+00, double 2.000000e+00, double 6.000000e+00, double 8.000000e+00, double 5.000000e-01, double 0x3FD1C71D402CC0D3, double 4.000000e+00, double 2.000000e+00, double 8.000000e+00, double 1.000000e+01, double 0x3FE71C715FE99F96, double 0x3FAC71D6002E2171, double 5.000000e+00, double 1.000000e+00, double 1.000000e+01, double 1.100000e+01, double 0x3FEE38E2A0265939, double 0x3FEAAAAA9FC0131A, double 6.000000e+00, double 3.000000e+00, double 1.100000e+01, double 1.400000e+01, double 0x3FC5555560C95D45, double 0x3FCA12F57F624F9A, double 7.000000e+00, double 3.000000e+00, double 1.400000e+01, double 1.700000e+01, double 0x3FE97B42A0276C19, double 0x3FC5555580FFB399, double 8.000000e+00, double 3.000000e+00, double 1.700000e+01, double 2.000000e+01, double 0x3FEAAAAA9FC0131A, double 0x3FE15555FD8D89EC, double 9.000000e+00, double 3.000000e+00, double 2.000000e+01, double 2.300000e+01, double 0x3FDD5553FF868870, double 0x3FE4E38FFFBCE421, double 1.000000e+01, double 4.000000e+00, double 2.300000e+01, double 2.700000e+01, double 0x3FD638E0008637BD, double 0x3FC555597F33780E, double 1.100000e+01, double 3.000000e+00, double 2.700000e+01, double 3.000000e+01, double 0x3FEAAAA9A03321FD, double 0x3FE71C733FE00C3C, double 1.200000e+01, double 4.000000e+00, double 3.000000e+01, double 3.400000e+01, double 0x3FD1C719A0763DDB, double 0x3FD1C71FFF79C843, double 1.300000e+01, double 3.000000e+00, double 3.400000e+01, double 3.700000e+01, double 0x3FE71C7000431BDF, double 0x3FE35557FFE00E62, double 1.400000e+01, double 3.000000e+00, double 3.700000e+01, double 4.000000e+01, double 0x3FD95550003FE33C, double 0x3FE416C33FD2A043, double 1.500000e+01, double 3.000000e+00, double 4.000000e+01, double 4.300000e+01, double 0x3FD7D2799F7E350F, double 0x3FE15E189FBCA6ED, double 1.600000e+01, double 3.000000e+00, double 4.300000e+01, double 4.600000e+01, double 0x3FDD43CEC086B225, double 0x3FD7C71FFF79C843, double 1.700000e+01, double 3.000000e+00, double 4.600000e+01, double 4.900000e+01, double 0x3FE41C7000431BDF, double 0x3F811198002BE7C2, double 1.800000e+01, double 2.000000e+00, double 4.900000e+01, double 5.100000e+01, double 0x3FEFBBB99FD1F589, double 0x3FE00002BFD677CF, double 1.900000e+01, double 2.000000e+00, double 5.100000e+01, double 5.300000e+01, double 0x3FDFFFFA601CBA0F, double 0x3FEC60EF600E7756, double 2.000000e+01, double 2.000000e+00, double 5.300000e+01, double 5.500000e+01, double 0x3FBCF884BF1F98AA, double 0x3FE4210C5FE85094, double 4.800000e+04, double 1.100000e+01, double 0.000000e+00, double 2.000000e+00, double 0.000000e+00, double 2.000000e+00, double 1.000000e+00, double 1.670000e-01, double 1.000000e+00, double 2.000000e+00, double 3.000000e+00, double 5.000000e+00, double 0x3FEAA7EF9DB22D0E, double 0x3FEAA7EF9DB22D0E, double 2.000000e+00, double 3.000000e+00, double 5.000000e+00, double 8.000000e+00, double 1.670000e-01, double 5.000000e-01, double 3.000000e+00, double 3.000000e+00, double 8.000000e+00, double 1.100000e+01, double 5.000000e-01, double 1.670000e-01, double 4.000000e+00, double 4.000000e+00, double 1.100000e+01, double 1.500000e+01, double 0x3FEAA7EF9DB22D0E, double 1.670000e-01, double 5.000000e+00, double 4.000000e+00, double 1.500000e+01, double 1.900000e+01, double 0x3FEAA7EF9DB22D0E, double 5.830000e-01, double 6.000000e+00, double 3.000000e+00, double 1.900000e+01, double 2.200000e+01, double 4.170000e-01, double 9.170000e-01, double 7.000000e+00, double 4.000000e+00, double 2.200000e+01, double 2.600000e+01, double 8.300000e-02, double 0x3FEE353F7CED9168, double 8.000000e+00, double 4.000000e+00, double 2.600000e+01, double 3.000000e+01, double 5.500000e-02, double 4.200000e-02, double 9.000000e+00, double 2.000000e+00, double 3.000000e+01, double 3.200000e+01, double 0x3FEEA7EF9DB22D0E, double 5.670000e-01, double 1.000000e+01, double 3.000000e+00, double 3.200000e+01, double 3.500000e+01, double 4.330000e-01, double 1.670000e-01, double 1.100000e+01, double 2.000000e+00, double 3.500000e+01, double 3.700000e+01, double 0x3FEAA7EF9DB22D0E, double 6.180000e-01, double 4.410000e+04, double 1.100000e+01, double 0.000000e+00, double 2.000000e+00, double 0.000000e+00, double 2.000000e+00, double 1.000000e+00, double 1.670000e-01, double 1.000000e+00, double 2.000000e+00, double 3.000000e+00, double 5.000000e+00, double 0x3FEAA7EF9DB22D0E, double 0x3FEAA7EF9DB22D0E, double 2.000000e+00, double 3.000000e+00, double 5.000000e+00, double 8.000000e+00, double 1.670000e-01, double 5.000000e-01, double 3.000000e+00, double 3.000000e+00, double 8.000000e+00, double 1.100000e+01, double 5.000000e-01, double 1.670000e-01, double 4.000000e+00, double 4.000000e+00, double 1.100000e+01, double 1.500000e+01, double 0x3FEAA7EF9DB22D0E, double 1.670000e-01, double 5.000000e+00, double 5.000000e+00, double 1.500000e+01, double 2.000000e+01, double 0x3FEAA7EF9DB22D0E, double 2.500000e-01, double 6.000000e+00, double 3.000000e+00, double 2.000000e+01, double 2.300000e+01, double 7.500000e-01, double 5.830000e-01, double 7.000000e+00, double 4.000000e+00, double 2.300000e+01, double 2.700000e+01, double 4.170000e-01, double 5.500000e-02, double 8.000000e+00, double 3.000000e+00, double 2.700000e+01, double 3.000000e+01, double 0x3FEE353F7CED9168, double 3.750000e-01, double 9.000000e+00, double 3.000000e+00, double 3.000000e+01, double 3.300000e+01, double 6.250000e-01, double 3.000000e-01, double 1.000000e+01, double 3.000000e+00, double 3.300000e+01, double 3.600000e+01, double 0x3FE6666666666666, double 1.670000e-01, double 1.100000e+01, double 2.000000e+00, double 3.600000e+01, double 3.800000e+01, double 0x3FEAA7EF9DB22D0E, double 1.000000e+00, double 3.200000e+04, double 1.100000e+01, double 0.000000e+00, double 2.000000e+00, double 0.000000e+00, double 2.000000e+00, double 1.000000e+00, double 1.670000e-01, double 1.000000e+00, double 2.000000e+00, double 3.000000e+00, double 5.000000e+00, double 0x3FEAA7EF9DB22D0E, double 0x3FEAA7EF9DB22D0E, double 2.000000e+00, double 3.000000e+00, double 5.000000e+00, double 8.000000e+00, double 1.670000e-01, double 5.000000e-01, double 3.000000e+00, double 3.000000e+00, double 8.000000e+00, double 1.100000e+01, double 5.000000e-01, double 1.670000e-01, double 4.000000e+00, double 4.000000e+00, double 1.100000e+01, double 1.500000e+01, double 0x3FEAA7EF9DB22D0E, double 1.670000e-01, double 5.000000e+00, double 5.000000e+00, double 1.500000e+01, double 2.000000e+01, double 0x3FEAA7EF9DB22D0E, double 2.500000e-01, double 6.000000e+00, double 4.000000e+00, double 2.000000e+01, double 2.400000e+01, double 7.500000e-01, double 2.500000e-01, double 7.000000e+00, double 5.000000e+00, double 2.400000e+01, double 2.900000e+01, double 7.500000e-01, double 5.500000e-02, double 8.000000e+00, double 4.000000e+00, double 2.900000e+01, double 3.300000e+01, double 0x3FEE353F7CED9168, double 3.750000e-01, double 9.000000e+00, double 4.000000e+00, double 3.300000e+01, double 3.700000e+01, double 6.250000e-01, double 4.720000e-01, double 1.000000e+01, double 3.000000e+00, double 3.700000e+01, double 4.000000e+01, double 5.280000e-01, double 9.370000e-01, double 1.100000e+01, double 1.000000e+00, double 4.000000e+01, double 4.100000e+01, double 6.200000e-02, double 1.000000e+00, double 2.400000e+04, double 1.100000e+01, double 0.000000e+00, double 3.000000e+00, double 0.000000e+00, double 4.000000e+00, double 1.000000e+00, double 0x3FC55555FFB34B69, double 1.000000e+00, double 2.000000e+00, double 4.000000e+00, double 6.000000e+00, double 0x3FEAAAAA80132D26, double 0x3FEAAAAAFFD9A5B4, double 2.000000e+00, double 3.000000e+00, double 6.000000e+00, double 9.000000e+00, double 0x3FC555540099692E, double 5.000000e-01, double 3.000000e+00, double 4.000000e+00, double 9.000000e+00, double 1.300000e+01, double 5.000000e-01, double 5.000000e-01, double 4.000000e+00, double 5.000000e+00, double 1.300000e+01, double 1.800000e+01, double 5.000000e-01, double 0x3FEAAAABFFF00731, double 5.000000e+00, double 5.000000e+00, double 1.800000e+01, double 2.300000e+01, double 0x3FC55550003FE33C, double 2.500000e-01, double 6.000000e+00, double 4.000000e+00, double 2.300000e+01, double 2.700000e+01, double 7.500000e-01, double 2.500000e-01, double 7.000000e+00, double 3.000000e+00, double 2.700000e+01, double 3.000000e+01, double 7.500000e-01, double 0x3FE38E3AC03CBDEE, double 8.000000e+00, double 4.000000e+00, double 3.000000e+01, double 3.400000e+01, double 0x3FD8E38A9FBCDA78, double 0x3FCAAAAFFFC01CC4, double 9.000000e+00, double 3.000000e+00, double 3.400000e+01, double 3.700000e+01, double 0x3FE95554000FF8CF, double 0x3FE888899FE29A25, double 1.000000e+01, double 4.000000e+00, double 3.700000e+01, double 4.100000e+01, double 0x3FCDDDD9A0ABEDC0, double 0x3FDCF3D23F7D6E6B, double 1.100000e+01, double 4.000000e+00, double 4.100000e+01, double 4.500000e+01, double 0x3FE18616E04148CB, double 0x3FD1C71FFF79C843, double 2.205000e+04, double 1.100000e+01, double 0.000000e+00, double 3.000000e+00, double 0.000000e+00, double 4.000000e+00, double 1.000000e+00, double 0x3FC55555FFB34B69, double 1.000000e+00, double 2.000000e+00, double 4.000000e+00, double 6.000000e+00, double 0x3FEAAAAA80132D26, double 0x3FEAAAAAFFD9A5B4, double 2.000000e+00, double 3.000000e+00, double 6.000000e+00, double 9.000000e+00, double 0x3FC555540099692E, double 5.000000e-01, double 3.000000e+00, double 4.000000e+00, double 9.000000e+00, double 1.300000e+01, double 5.000000e-01, double 5.000000e-01, double 4.000000e+00, double 4.000000e+00, double 1.300000e+01, double 1.700000e+01, double 5.000000e-01, double 5.000000e-01, double 5.000000e+00, double 4.000000e+00, double 1.700000e+01, double 2.100000e+01, double 5.000000e-01, double 0x3FED5556003CBBC8, double 6.000000e+00, double 4.000000e+00, double 2.100000e+01, double 2.500000e+01, double 0x3FB5554FFFD1EFBD, double 2.500000e-01, double 7.000000e+00, double 4.000000e+00, double 2.500000e+01, double 2.900000e+01, double 7.500000e-01, double 0x3FE38E3AC03CBDEE, double 8.000000e+00, double 4.000000e+00, double 2.900000e+01, double 3.300000e+01, double 0x3FD8E38A9FBCDA78, double 0x3FDD5557FFE00E62, double 9.000000e+00, double 4.000000e+00, double 3.300000e+01, double 3.700000e+01, double 0x3FE15554000FF8CF, double 0x3FE44446602E0A77, double 1.000000e+01, double 4.000000e+00, double 3.700000e+01, double 4.100000e+01, double 0x3FD777733FA3EB12, double 0x3FE2AAAD3FE9A4F5, double 1.100000e+01, double 4.000000e+00, double 4.100000e+01, double 4.500000e+01, double 0x3FDAAAA55FF65FC3, double 0x3FDC0004005985F2, double 1.600000e+04, double 1.100000e+01, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 4.000000e+00, double 1.000000e+00, double 0x3FC55555FFB34B69, double 1.000000e+00, double 0.000000e+00, double 4.000000e+00, double 6.000000e+00, double 0x3FEAAAAA80132D26, double 0x3FEAAAAAFFD9A5B4, double 2.000000e+00, double 0.000000e+00, double 6.000000e+00, double 9.000000e+00, double 0x3FC555540099692E, double 5.000000e-01, double 3.000000e+00, double 0.000000e+00, double 9.000000e+00, double 1.300000e+01, double 5.000000e-01, double 5.000000e-01, double 4.000000e+00, double 0.000000e+00, double 1.300000e+01, double 1.800000e+01, double 5.000000e-01, double 0x3FEAAAABFFF00731, double 5.000000e+00, double 0.000000e+00, double 1.800000e+01, double 2.300000e+01, double 0x3FC55550003FE33C, double 7.500000e-01, double 6.000000e+00, double 0.000000e+00, double 2.300000e+01, double 2.700000e+01, double 2.500000e-01, double 7.500000e-01, double 7.000000e+00, double 0.000000e+00, double 2.700000e+01, double 3.100000e+01, double 2.500000e-01, double 0x3FE38E3AC03CBDEE, double 8.000000e+00, double 0.000000e+00, double 3.100000e+01, double 3.500000e+01, double 0x3FD8E38A9FBCDA78, double 0x3FDD5557FFE00E62, double 9.000000e+00, double 0.000000e+00, double 3.500000e+01, double 3.900000e+01, double 0x3FE15554000FF8CF, double 0x3FC555597F33780E, double 1.000000e+01, double 0.000000e+00, double 3.900000e+01, double 4.200000e+01, double 0x3FEAAAA9A03321FD, double 0x3FE9C71D5FD9A6C7, double 1.100000e+01, double 0.000000e+00, double 4.200000e+01, double 4.600000e+01, double 0x3FC8E38AA0CFBB36, double 4.375000e-01], align 16
@subdv_table = internal global [23 x %struct.anon.56] [%struct.anon.56 zeroinitializer, %struct.anon.56 zeroinitializer, %struct.anon.56 zeroinitializer, %struct.anon.56 zeroinitializer, %struct.anon.56 zeroinitializer, %struct.anon.56 { i32 0, i32 1 }, %struct.anon.56 { i32 1, i32 1 }, %struct.anon.56 { i32 1, i32 1 }, %struct.anon.56 { i32 1, i32 2 }, %struct.anon.56 { i32 2, i32 2 }, %struct.anon.56 { i32 2, i32 3 }, %struct.anon.56 { i32 2, i32 3 }, %struct.anon.56 { i32 3, i32 4 }, %struct.anon.56 { i32 3, i32 4 }, %struct.anon.56 { i32 3, i32 4 }, %struct.anon.56 { i32 4, i32 5 }, %struct.anon.56 { i32 4, i32 5 }, %struct.anon.56 { i32 4, i32 6 }, %struct.anon.56 { i32 5, i32 6 }, %struct.anon.56 { i32 5, i32 6 }, %struct.anon.56 { i32 5, i32 7 }, %struct.anon.56 { i32 6, i32 7 }, %struct.anon.56 { i32 6, i32 7 }], align 16
@ipow20 = internal global [256 x double] zeroinitializer, align 16
@huf_tbl_noESC = internal unnamed_addr constant [15 x i32] [i32 1, i32 2, i32 5, i32 7, i32 7, i32 10, i32 10, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13], align 16
@ht = internal global [34 x %struct.huffcodetab] [%struct.huffcodetab zeroinitializer, %struct.huffcodetab { i32 2, i32 0, ptr @t1HB, ptr @t1l }, %struct.huffcodetab { i32 3, i32 0, ptr @t2HB, ptr @t2l }, %struct.huffcodetab { i32 3, i32 0, ptr @t3HB, ptr @t3l }, %struct.huffcodetab zeroinitializer, %struct.huffcodetab { i32 4, i32 0, ptr @t5HB, ptr @t5l }, %struct.huffcodetab { i32 4, i32 0, ptr @t6HB, ptr @t6l }, %struct.huffcodetab { i32 6, i32 0, ptr @t7HB, ptr @t7l }, %struct.huffcodetab { i32 6, i32 0, ptr @t8HB, ptr @t8l }, %struct.huffcodetab { i32 6, i32 0, ptr @t9HB, ptr @t9l }, %struct.huffcodetab { i32 8, i32 0, ptr @t10HB, ptr @t10l }, %struct.huffcodetab { i32 8, i32 0, ptr @t11HB, ptr @t11l }, %struct.huffcodetab { i32 8, i32 0, ptr @t12HB, ptr @t12l }, %struct.huffcodetab { i32 16, i32 0, ptr @t13HB, ptr @t13l }, %struct.huffcodetab zeroinitializer, %struct.huffcodetab { i32 16, i32 0, ptr @t15HB, ptr @t15l }, %struct.huffcodetab { i32 1, i32 1, ptr @t16HB, ptr @t16l }, %struct.huffcodetab { i32 2, i32 3, ptr @t16HB, ptr @t16l }, %struct.huffcodetab { i32 3, i32 7, ptr @t16HB, ptr @t16l }, %struct.huffcodetab { i32 4, i32 15, ptr @t16HB, ptr @t16l }, %struct.huffcodetab { i32 6, i32 63, ptr @t16HB, ptr @t16l }, %struct.huffcodetab { i32 8, i32 255, ptr @t16HB, ptr @t16l }, %struct.huffcodetab { i32 10, i32 1023, ptr @t16HB, ptr @t16l }, %struct.huffcodetab { i32 13, i32 8191, ptr @t16HB, ptr @t16l }, %struct.huffcodetab { i32 4, i32 15, ptr @t24HB, ptr @t24l }, %struct.huffcodetab { i32 5, i32 31, ptr @t24HB, ptr @t24l }, %struct.huffcodetab { i32 6, i32 63, ptr @t24HB, ptr @t24l }, %struct.huffcodetab { i32 7, i32 127, ptr @t24HB, ptr @t24l }, %struct.huffcodetab { i32 8, i32 255, ptr @t24HB, ptr @t24l }, %struct.huffcodetab { i32 9, i32 511, ptr @t24HB, ptr @t24l }, %struct.huffcodetab { i32 11, i32 2047, ptr @t24HB, ptr @t24l }, %struct.huffcodetab { i32 13, i32 8191, ptr @t24HB, ptr @t24l }, %struct.huffcodetab { i32 0, i32 0, ptr @t32HB, ptr @t32l }, %struct.huffcodetab { i32 0, i32 0, ptr @t33HB, ptr @t33l }], align 16
@cb_esc_buf = internal global [288 x i32] zeroinitializer, align 16
@cb_esc_end = internal unnamed_addr global ptr null, align 8
@scfsi_calc.scfsi_band = internal unnamed_addr constant [5 x i32] [i32 0, i32 6, i32 11, i32 16, i32 21], align 16
@scfsi_calc.slen1_n = internal unnamed_addr constant [16 x i32] [i32 0, i32 1, i32 1, i32 1, i32 8, i32 2, i32 2, i32 2, i32 4, i32 4, i32 4, i32 8, i32 8, i32 8, i32 16, i32 16], align 16
@scfsi_calc.slen2_n = internal unnamed_addr constant [16 x i32] [i32 0, i32 2, i32 4, i32 8, i32 1, i32 2, i32 4, i32 8, i32 2, i32 4, i32 8, i32 2, i32 4, i32 8, i32 4, i32 8], align 16
@scfsi_calc.slen1_tab = internal unnamed_addr constant [16 x i32] [i32 0, i32 0, i32 0, i32 0, i32 3, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 4, i32 4], align 16
@scfsi_calc.slen2_tab = internal unnamed_addr constant [16 x i32] [i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 1, i32 2, i32 3, i32 1, i32 2, i32 3, i32 2, i32 3], align 16
@ts_real_time.initial_time = internal unnamed_addr global i64 0, align 8
@ts_process_time.initial_time = internal unnamed_addr global i64 0, align 8
@.str.409 = private unnamed_addr constant [75 x i8] c"    Frame          |  CPU/estimated  |  time/estimated | play/CPU |   ETA\0A\00", align 1
@.str.1.410 = private unnamed_addr constant [96 x i8] c"\0D%6ld/%6ld(%3d%%)|%2d:%02d:%02d/%2d:%02d:%02d|%2d:%02d:%02d/%2d:%02d:%02d|%10.4f|%2d:%02d:%02d \00", align 1
@bitrate_table = internal global [2 x [15 x i32]] [[15 x i32] [i32 0, i32 8, i32 16, i32 24, i32 32, i32 40, i32 48, i32 56, i32 64, i32 80, i32 96, i32 112, i32 128, i32 144, i32 160], [15 x i32] [i32 0, i32 32, i32 40, i32 48, i32 56, i32 64, i32 80, i32 96, i32 112, i32 128, i32 160, i32 192, i32 224, i32 256, i32 320]], align 16
@NativeByteOrder = internal global i32 0, align 4
@.str.1.415 = private unnamed_addr constant [37 x i8] c"MPEG1 samplerates(kHz): 32 44.1 48 \0A\00", align 1
@.str.2.416 = private unnamed_addr constant [16 x i8] c"bitrates(kbs): \00", align 1
@.str.3.417 = private unnamed_addr constant [4 x i8] c"%i \00", align 1
@.str.4.418 = private unnamed_addr constant [38 x i8] c"MPEG2 samplerates(kHz): 16 22.05 24 \0A\00", align 1
@stderr = external local_unnamed_addr global ptr, align 8
@.str.5.421 = private unnamed_addr constant [51 x i8] c"Bitrate %dkbs not legal for %iHz output sampling.\0A\00", align 1
@.str.6.424 = private unnamed_addr constant [47 x i8] c"SmpFrqIndex: %ldHz is not a legal sample rate\0A\00", align 1
@.str.7.425 = private unnamed_addr constant [23 x i8] c"Unable to allocate %s\0A\00", align 1
@.str.8.428 = private unnamed_addr constant [5 x i8] c"ABCD\00", align 1
@.str.9.429 = private unnamed_addr constant [5 x i8] c"DCBA\00", align 1
@.str.10.436 = private unnamed_addr constant [7 x i8] c"buffer\00", align 1
@putmask = internal global [9 x i32] [i32 0, i32 1, i32 3, i32 7, i32 15, i32 31, i32 63, i32 127, i32 255], align 16
@.str.11.441 = private unnamed_addr constant [51 x i8] c"Cannot read or write more than %d bits at a time.\0A\00", align 1
@pow43 = internal global [8208 x double] zeroinitializer, align 16
@pretab = internal global [21 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 3, i32 2], align 16
@masking_lower = internal global float 1.000000e+00, align 4
@convert_mdct = internal global i32 0, align 4
@scalefac_band = internal global %struct.scalefac_struct zeroinitializer, align 4
@.str.447 = private unnamed_addr constant [39 x i8] c"LAME version %s (www.sulaco.org/mp3) \0A\00", align 1
@.str.1.448 = private unnamed_addr constant [67 x i8] c"GPSYCHO: GPL psycho-acoustic and noise shaping model version %s. \0A\00", align 1
@lpszVersion = internal global [80 x i8] zeroinitializer, align 16
@.str.2.446 = private unnamed_addr constant [8 x i8] c"%d.%02d\00", align 1

; Function Attrs: mustprogress nounwind optsize willreturn uwtable
define internal void @AddVbrFrame(i32 noundef %0) #0 {
  %2 = load ptr, ptr @pVbrFrames, align 8, !tbaa !7
  %3 = icmp eq ptr %2, null
  %4 = load i32, ptr @nVbrFrameBufferSize, align 4
  %5 = icmp eq i32 %4, 0
  %6 = select i1 %3, i1 true, i1 %5
  br i1 %6, label %7, label %9

7:                                                ; preds = %1
  store i32 100, ptr @nVbrFrameBufferSize, align 4, !tbaa !11
  %8 = tail call noalias dereferenceable_or_null(400) ptr @malloc(i64 noundef 400) #51
  store ptr %8, ptr @pVbrFrames, align 8, !tbaa !7
  br label %9

9:                                                ; preds = %7, %1
  %10 = phi ptr [ %2, %1 ], [ %8, %7 ]
  %11 = phi i32 [ %4, %1 ], [ 100, %7 ]
  %12 = load i32, ptr @nVbrNumFrames, align 4, !tbaa !11
  %13 = icmp eq i32 %12, %11
  br i1 %13, label %14, label %20

14:                                               ; preds = %9
  %15 = shl nsw i32 %11, 1
  store i32 %15, ptr @nVbrFrameBufferSize, align 4, !tbaa !11
  %16 = sext i32 %15 to i64
  %17 = shl nsw i64 %16, 2
  %18 = tail call ptr @realloc(ptr noundef %10, i64 noundef %17) #52
  store ptr %18, ptr @pVbrFrames, align 8, !tbaa !7
  %19 = load i32, ptr @nVbrNumFrames, align 4, !tbaa !11
  br label %20

20:                                               ; preds = %14, %9
  %21 = phi i32 [ %19, %14 ], [ %12, %9 ]
  %22 = phi ptr [ %18, %14 ], [ %10, %9 ]
  %23 = add nsw i32 %21, 1
  store i32 %23, ptr @nVbrNumFrames, align 4, !tbaa !11
  %24 = sext i32 %21 to i64
  %25 = getelementptr inbounds i32, ptr %22, i64 %24
  store i32 %0, ptr %25, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #1

; Function Attrs: mustprogress nounwind optsize willreturn allockind("realloc") allocsize(1) memory(argmem: readwrite, inaccessiblemem: readwrite)
declare noalias noundef ptr @realloc(ptr allocptr nocapture noundef, i64 noundef) local_unnamed_addr #2

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal i32 @GetVbrTag(ptr nocapture noundef writeonly %0, ptr nocapture noundef readonly %1) #3 {
  %3 = getelementptr inbounds %struct.VBRTAGDATA, ptr %0, i64 0, i32 2
  store i32 0, ptr %3, align 4, !tbaa !13
  %4 = getelementptr inbounds i8, ptr %1, i64 1
  %5 = load i8, ptr %4, align 1, !tbaa !15
  %6 = lshr i8 %5, 3
  %7 = and i8 %6, 1
  %8 = zext i8 %7 to i32
  %9 = getelementptr inbounds i8, ptr %1, i64 2
  %10 = load i8, ptr %9, align 1, !tbaa !15
  %11 = lshr i8 %10, 2
  %12 = and i8 %11, 3
  %13 = getelementptr inbounds i8, ptr %1, i64 3
  %14 = load i8, ptr %13, align 1, !tbaa !15
  %15 = icmp eq i8 %7, 0
  %16 = icmp ugt i8 %14, -65
  %17 = select i1 %16, i64 21, i64 36
  %18 = select i1 %16, i64 13, i64 21
  %19 = select i1 %15, i64 %18, i64 %17
  %20 = getelementptr inbounds i8, ptr %1, i64 %19
  %21 = load i8, ptr %20, align 1, !tbaa !15
  %22 = icmp eq i8 %21, 88
  br i1 %22, label %23, label %143

23:                                               ; preds = %2
  %24 = getelementptr inbounds i8, ptr %20, i64 1
  %25 = load i8, ptr %24, align 1, !tbaa !15
  %26 = icmp eq i8 %25, 105
  br i1 %26, label %27, label %143

27:                                               ; preds = %23
  %28 = getelementptr inbounds i8, ptr %20, i64 2
  %29 = load i8, ptr %28, align 1, !tbaa !15
  %30 = icmp eq i8 %29, 110
  br i1 %30, label %31, label %143

31:                                               ; preds = %27
  %32 = getelementptr inbounds i8, ptr %20, i64 3
  %33 = load i8, ptr %32, align 1, !tbaa !15
  %34 = icmp eq i8 %33, 103
  br i1 %34, label %35, label %143

35:                                               ; preds = %31
  %36 = getelementptr inbounds i8, ptr %20, i64 4
  store i32 %8, ptr %0, align 4, !tbaa !16
  %37 = zext i8 %12 to i64
  %38 = getelementptr inbounds [4 x i32], ptr @GetVbrTag.sr_table, i64 0, i64 %37
  %39 = load i32, ptr %38, align 4, !tbaa !11
  %40 = getelementptr inbounds %struct.VBRTAGDATA, ptr %0, i64 0, i32 1
  %41 = zext i1 %15 to i32
  %42 = ashr i32 %39, %41
  store i32 %42, ptr %40, align 4, !tbaa !17
  %43 = load i8, ptr %36, align 1, !tbaa !15
  %44 = zext i8 %43 to i32
  %45 = getelementptr inbounds i8, ptr %20, i64 5
  %46 = load i8, ptr %45, align 1, !tbaa !15
  %47 = zext i8 %46 to i32
  %48 = shl nuw nsw i32 %44, 16
  %49 = shl nuw nsw i32 %47, 8
  %50 = or i32 %49, %48
  %51 = getelementptr inbounds i8, ptr %20, i64 6
  %52 = load i8, ptr %51, align 1, !tbaa !15
  %53 = zext i8 %52 to i32
  %54 = or i32 %50, %53
  %55 = shl nuw i32 %54, 8
  %56 = getelementptr inbounds i8, ptr %20, i64 7
  %57 = load i8, ptr %56, align 1, !tbaa !15
  %58 = zext i8 %57 to i32
  %59 = or i32 %55, %58
  store i32 %59, ptr %3, align 4, !tbaa !13
  %60 = getelementptr inbounds i8, ptr %20, i64 8
  %61 = and i32 %58, 1
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %83, label %63

63:                                               ; preds = %35
  %64 = load i8, ptr %60, align 1, !tbaa !15
  %65 = zext i8 %64 to i32
  %66 = getelementptr inbounds i8, ptr %20, i64 9
  %67 = load i8, ptr %66, align 1, !tbaa !15
  %68 = zext i8 %67 to i32
  %69 = shl nuw nsw i32 %65, 16
  %70 = shl nuw nsw i32 %68, 8
  %71 = or i32 %70, %69
  %72 = getelementptr inbounds i8, ptr %20, i64 10
  %73 = load i8, ptr %72, align 1, !tbaa !15
  %74 = zext i8 %73 to i32
  %75 = or i32 %71, %74
  %76 = shl nuw i32 %75, 8
  %77 = getelementptr inbounds i8, ptr %20, i64 11
  %78 = load i8, ptr %77, align 1, !tbaa !15
  %79 = zext i8 %78 to i32
  %80 = or i32 %76, %79
  %81 = getelementptr inbounds %struct.VBRTAGDATA, ptr %0, i64 0, i32 3
  store i32 %80, ptr %81, align 4, !tbaa !18
  %82 = getelementptr inbounds i8, ptr %20, i64 12
  br label %83

83:                                               ; preds = %63, %35
  %84 = phi ptr [ %82, %63 ], [ %60, %35 ]
  %85 = and i32 %58, 2
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %107, label %87

87:                                               ; preds = %83
  %88 = load i8, ptr %84, align 1, !tbaa !15
  %89 = zext i8 %88 to i32
  %90 = getelementptr inbounds i8, ptr %84, i64 1
  %91 = load i8, ptr %90, align 1, !tbaa !15
  %92 = zext i8 %91 to i32
  %93 = shl nuw nsw i32 %89, 16
  %94 = shl nuw nsw i32 %92, 8
  %95 = or i32 %94, %93
  %96 = getelementptr inbounds i8, ptr %84, i64 2
  %97 = load i8, ptr %96, align 1, !tbaa !15
  %98 = zext i8 %97 to i32
  %99 = or i32 %95, %98
  %100 = shl nuw i32 %99, 8
  %101 = getelementptr inbounds i8, ptr %84, i64 3
  %102 = load i8, ptr %101, align 1, !tbaa !15
  %103 = zext i8 %102 to i32
  %104 = or i32 %100, %103
  %105 = getelementptr inbounds %struct.VBRTAGDATA, ptr %0, i64 0, i32 4
  store i32 %104, ptr %105, align 4, !tbaa !19
  %106 = getelementptr inbounds i8, ptr %84, i64 4
  br label %107

107:                                              ; preds = %87, %83
  %108 = phi ptr [ %106, %87 ], [ %84, %83 ]
  %109 = and i32 %58, 4
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %120, label %111

111:                                              ; preds = %111, %107
  %112 = phi i64 [ %116, %111 ], [ 0, %107 ]
  %113 = getelementptr inbounds i8, ptr %108, i64 %112
  %114 = load i8, ptr %113, align 1, !tbaa !15
  %115 = getelementptr inbounds %struct.VBRTAGDATA, ptr %0, i64 0, i32 6, i64 %112
  store i8 %114, ptr %115, align 1, !tbaa !15
  %116 = add nuw nsw i64 %112, 1
  %117 = icmp eq i64 %116, 100
  br i1 %117, label %118, label %111, !llvm.loop !20

118:                                              ; preds = %111
  %119 = getelementptr inbounds i8, ptr %108, i64 100
  br label %120

120:                                              ; preds = %118, %107
  %121 = phi ptr [ %119, %118 ], [ %108, %107 ]
  %122 = getelementptr inbounds %struct.VBRTAGDATA, ptr %0, i64 0, i32 5
  store i32 -1, ptr %122, align 4, !tbaa !22
  %123 = and i32 %58, 8
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %143, label %125

125:                                              ; preds = %120
  %126 = load i8, ptr %121, align 1, !tbaa !15
  %127 = zext i8 %126 to i32
  %128 = getelementptr inbounds i8, ptr %121, i64 1
  %129 = load i8, ptr %128, align 1, !tbaa !15
  %130 = zext i8 %129 to i32
  %131 = shl nuw nsw i32 %127, 16
  %132 = shl nuw nsw i32 %130, 8
  %133 = or i32 %132, %131
  %134 = getelementptr inbounds i8, ptr %121, i64 2
  %135 = load i8, ptr %134, align 1, !tbaa !15
  %136 = zext i8 %135 to i32
  %137 = or i32 %133, %136
  %138 = shl nuw i32 %137, 8
  %139 = getelementptr inbounds i8, ptr %121, i64 3
  %140 = load i8, ptr %139, align 1, !tbaa !15
  %141 = zext i8 %140 to i32
  %142 = or i32 %138, %141
  store i32 %142, ptr %122, align 4, !tbaa !22
  br label %143

143:                                              ; preds = %125, %120, %31, %27, %23, %2
  %144 = phi i32 [ 0, %2 ], [ 0, %23 ], [ 0, %27 ], [ 0, %31 ], [ 1, %125 ], [ 1, %120 ]
  ret i32 %144
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @InitVbrTag(ptr noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3) #4 {
  store ptr null, ptr @pVbrFrames, align 8, !tbaa !7
  store i32 0, ptr @nVbrNumFrames, align 4, !tbaa !11
  store i32 0, ptr @nVbrFrameBufferSize, align 4, !tbaa !11
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(216) @pbtStreamBuffer, i8 0, i64 216, i1 false)
  %5 = icmp eq i32 %2, 3
  %6 = sext i32 %1 to i64
  %7 = getelementptr inbounds [2 x [2 x i32]], ptr @SizeOfEmptyFrame, i64 0, i64 %6
  %8 = getelementptr inbounds [2 x [2 x i32]], ptr @SizeOfEmptyFrame, i64 0, i64 %6, i64 1
  %9 = select i1 %5, ptr %8, ptr %7
  %10 = load i32, ptr %9, align 4, !tbaa !11
  %11 = add nsw i32 %10, 4
  store i32 %11, ptr @nZeroStreamSize, align 4, !tbaa !11
  %12 = icmp sgt i32 %3, 2
  br i1 %12, label %13, label %16

13:                                               ; preds = %4
  %14 = load ptr, ptr @stderr, align 8, !tbaa !7
  %15 = tail call i64 @fwrite(ptr nonnull @.str, i64 33, i64 1, ptr %14) #53
  tail call void @exit(i32 noundef -1) #54
  unreachable

16:                                               ; preds = %4
  %17 = sext i32 %3 to i64
  %18 = getelementptr inbounds [3 x i32], ptr @InitVbrTag.framesize, i64 0, i64 %17
  %19 = load i32, ptr %18, align 4, !tbaa !11
  store i32 %19, ptr @TotalFrameSize, align 4, !tbaa !11
  %20 = add nsw i32 %10, 144
  %21 = icmp slt i32 %19, %20
  br i1 %21, label %22, label %25

22:                                               ; preds = %16
  %23 = load ptr, ptr @stderr, align 8, !tbaa !7
  %24 = tail call i64 @fwrite(ptr nonnull @.str.1, i64 33, i64 1, ptr %23) #53
  tail call void @exit(i32 noundef -1) #54
  unreachable

25:                                               ; preds = %25, %16
  %26 = phi i32 [ %27, %25 ], [ 0, %16 ]
  tail call void @putbits(ptr noundef %0, i32 noundef 0, i32 noundef 8) #55
  %27 = add nuw nsw i32 %26, 1
  %28 = load i32, ptr @TotalFrameSize, align 4, !tbaa !11
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %25, label %30, !llvm.loop !23

30:                                               ; preds = %25
  ret i32 0
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #5

; Function Attrs: nofree nounwind optsize
declare noundef i64 @fwrite(ptr nocapture noundef, i64 noundef, i64 noundef, ptr nocapture noundef) local_unnamed_addr #6

; Function Attrs: noreturn nounwind optsize
declare void @exit(i32 noundef) local_unnamed_addr #7

; Function Attrs: nounwind optsize uwtable
define internal i32 @PutVbrTag(ptr nocapture noundef readonly %0, i32 noundef %1, i32 noundef %2) #4 {
  %4 = alloca [100 x i8], align 16
  %5 = alloca [80 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 100, ptr nonnull %4) #56
  call void @llvm.lifetime.start.p0(i64 80, ptr nonnull %5) #56
  %6 = load i32, ptr @nVbrNumFrames, align 4, !tbaa !11
  %7 = icmp eq i32 %6, 0
  %8 = load ptr, ptr @pVbrFrames, align 8
  %9 = icmp eq ptr %8, null
  %10 = select i1 %7, i1 true, i1 %9
  br i1 %10, label %113, label %11

11:                                               ; preds = %3
  %12 = tail call noalias ptr @fopen(ptr noundef %0, ptr noundef nonnull @.str.2) #57
  %13 = icmp eq ptr %12, null
  br i1 %13, label %113, label %14

14:                                               ; preds = %11
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(216) @pbtStreamBuffer, i8 0, i64 216, i1 false)
  %15 = tail call i32 @fseek(ptr noundef nonnull %12, i64 noundef 0, i32 noundef 2) #57
  %16 = tail call i64 @ftell(ptr noundef nonnull %12) #57
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %113, label %18

18:                                               ; preds = %14
  %19 = load i32, ptr @TotalFrameSize, align 4, !tbaa !11
  %20 = sext i32 %19 to i64
  %21 = tail call i32 @fseek(ptr noundef nonnull %12, i64 noundef %20, i32 noundef 0) #57
  %22 = tail call i64 @fread(ptr noundef nonnull @pbtStreamBuffer, i64 noundef 4, i64 noundef 1, ptr noundef nonnull %12) #57
  store i8 -1, ptr @pbtStreamBuffer, align 16, !tbaa !15
  %23 = icmp eq i32 %2, 0
  %24 = load i8, ptr getelementptr inbounds ([216 x i8], ptr @pbtStreamBuffer, i64 0, i64 2), align 2, !tbaa !15
  %25 = and i8 %24, 12
  %26 = select i1 %23, i8 80, i8 -128
  %27 = select i1 %23, i8 -5, i8 -13
  %28 = or i8 %25, %26
  store i8 %27, ptr getelementptr inbounds ([216 x i8], ptr @pbtStreamBuffer, i64 0, i64 1), align 1
  store i8 %28, ptr getelementptr inbounds ([216 x i8], ptr @pbtStreamBuffer, i64 0, i64 2), align 2, !tbaa !15
  %29 = tail call i32 @fseek(ptr noundef nonnull %12, i64 noundef 0, i32 noundef 0) #57
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(100) %4, i8 0, i64 100, i1 false)
  %30 = load i32, ptr @nVbrNumFrames, align 4, !tbaa !11
  %31 = sitofp i32 %30 to double
  %32 = load ptr, ptr @pVbrFrames, align 8, !tbaa !7
  %33 = sitofp i64 %16 to float
  br label %34

34:                                               ; preds = %34, %18
  %35 = phi i64 [ 1, %18 ], [ %52, %34 ]
  %36 = trunc i64 %35 to i32
  %37 = sitofp i32 %36 to double
  %38 = fmul double %37, 1.000000e-02
  %39 = fmul double %38, %31
  %40 = tail call double @llvm.floor.f64(double %39)
  %41 = fptosi double %40 to i32
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds i32, ptr %32, i64 %42
  %44 = load i32, ptr %43, align 4, !tbaa !11
  %45 = sitofp i32 %44 to float
  %46 = fmul float %45, 2.560000e+02
  %47 = fdiv float %46, %33
  %48 = fcmp ogt float %47, 2.550000e+02
  %49 = select i1 %48, float 2.550000e+02, float %47
  %50 = fptoui float %49 to i8
  %51 = getelementptr inbounds [100 x i8], ptr %4, i64 0, i64 %35
  store i8 %50, ptr %51, align 1, !tbaa !15
  %52 = add nuw nsw i64 %35, 1
  %53 = icmp eq i64 %52, 100
  br i1 %53, label %54, label %34, !llvm.loop !24

54:                                               ; preds = %34
  %55 = load i32, ptr @nZeroStreamSize, align 4, !tbaa !11
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds [216 x i8], ptr @pbtStreamBuffer, i64 0, i64 %56
  store <8 x i8> <i8 88, i8 105, i8 110, i8 103, i8 0, i8 0, i8 0, i8 15>, ptr %57, align 1, !tbaa !15
  %58 = add nsw i32 %55, 8
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds [216 x i8], ptr @pbtStreamBuffer, i64 0, i64 %59
  %61 = lshr i32 %30, 24
  %62 = trunc i32 %61 to i8
  store i8 %62, ptr %60, align 1, !tbaa !15
  %63 = lshr i32 %30, 16
  %64 = trunc i32 %63 to i8
  %65 = getelementptr inbounds i8, ptr %60, i64 1
  store i8 %64, ptr %65, align 1, !tbaa !15
  %66 = lshr i32 %30, 8
  %67 = trunc i32 %66 to i8
  %68 = getelementptr inbounds i8, ptr %60, i64 2
  store i8 %67, ptr %68, align 1, !tbaa !15
  %69 = trunc i32 %30 to i8
  %70 = getelementptr inbounds i8, ptr %60, i64 3
  store i8 %69, ptr %70, align 1, !tbaa !15
  %71 = add nsw i32 %55, 12
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds [216 x i8], ptr @pbtStreamBuffer, i64 0, i64 %72
  %74 = lshr i64 %16, 24
  %75 = trunc i64 %74 to i8
  store i8 %75, ptr %73, align 1, !tbaa !15
  %76 = lshr i64 %16, 16
  %77 = trunc i64 %76 to i8
  %78 = getelementptr inbounds i8, ptr %73, i64 1
  store i8 %77, ptr %78, align 1, !tbaa !15
  %79 = lshr i64 %16, 8
  %80 = trunc i64 %79 to i8
  %81 = getelementptr inbounds i8, ptr %73, i64 2
  store i8 %80, ptr %81, align 1, !tbaa !15
  %82 = trunc i64 %16 to i8
  %83 = getelementptr inbounds i8, ptr %73, i64 3
  store i8 %82, ptr %83, align 1, !tbaa !15
  %84 = add nsw i32 %55, 16
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds [216 x i8], ptr @pbtStreamBuffer, i64 0, i64 %85
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(100) %86, ptr noundef nonnull align 16 dereferenceable(100) %4, i64 100, i1 false)
  %87 = add i32 %55, 116
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds [216 x i8], ptr @pbtStreamBuffer, i64 0, i64 %88
  %90 = lshr i32 %1, 24
  %91 = trunc i32 %90 to i8
  store i8 %91, ptr %89, align 1, !tbaa !15
  %92 = lshr i32 %1, 16
  %93 = trunc i32 %92 to i8
  %94 = getelementptr inbounds i8, ptr %89, i64 1
  store i8 %93, ptr %94, align 1, !tbaa !15
  %95 = lshr i32 %1, 8
  %96 = trunc i32 %95 to i8
  %97 = getelementptr inbounds i8, ptr %89, i64 2
  store i8 %96, ptr %97, align 1, !tbaa !15
  %98 = trunc i32 %1 to i8
  %99 = getelementptr inbounds i8, ptr %89, i64 3
  store i8 %98, ptr %99, align 1, !tbaa !15
  %100 = add i32 %55, 120
  %101 = tail call ptr @get_lame_version() #55
  %102 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %5, ptr noundef nonnull dereferenceable(1) @.str.3, ptr noundef %101) #55
  %103 = sext i32 %100 to i64
  %104 = getelementptr inbounds [216 x i8], ptr @pbtStreamBuffer, i64 0, i64 %103
  %105 = call ptr @strncpy(ptr noundef nonnull dereferenceable(1) %104, ptr noundef nonnull dereferenceable(1) %5, i64 noundef 20) #55
  %106 = load i32, ptr @TotalFrameSize, align 4, !tbaa !11
  %107 = sext i32 %106 to i64
  %108 = tail call i64 @fwrite(ptr noundef nonnull @pbtStreamBuffer, i64 noundef %107, i64 noundef 1, ptr noundef nonnull %12) #57
  %109 = icmp eq i64 %108, 1
  br i1 %109, label %110, label %113

110:                                              ; preds = %54
  %111 = tail call i32 @fclose(ptr noundef nonnull %12) #57
  %112 = load ptr, ptr @pVbrFrames, align 8, !tbaa !7
  tail call void @free(ptr noundef %112) #55
  store ptr null, ptr @pVbrFrames, align 8, !tbaa !7
  br label %113

113:                                              ; preds = %110, %54, %14, %11, %3
  %114 = phi i32 [ 0, %110 ], [ -1, %3 ], [ -1, %11 ], [ -1, %14 ], [ -1, %54 ]
  call void @llvm.lifetime.end.p0(i64 80, ptr nonnull %5) #56
  call void @llvm.lifetime.end.p0(i64 100, ptr nonnull %4) #56
  ret i32 %114
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #8

; Function Attrs: nofree nounwind optsize
declare noalias noundef ptr @fopen(ptr nocapture noundef readonly, ptr nocapture noundef readonly) local_unnamed_addr #6

; Function Attrs: nofree nounwind optsize
declare noundef i32 @fseek(ptr nocapture noundef, i64 noundef, i32 noundef) local_unnamed_addr #6

; Function Attrs: nofree nounwind optsize
declare noundef i64 @ftell(ptr nocapture noundef) local_unnamed_addr #6

; Function Attrs: nofree nounwind optsize
declare noundef i64 @fread(ptr nocapture noundef, i64 noundef, i64 noundef, ptr nocapture noundef) local_unnamed_addr #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.floor.f64(double) #9

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #10

; Function Attrs: nofree nounwind optsize
declare noundef i32 @sprintf(ptr noalias nocapture noundef writeonly, ptr nocapture noundef readonly, ...) local_unnamed_addr #6

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: readwrite)
declare ptr @strncpy(ptr noalias noundef returned writeonly, ptr noalias nocapture noundef readonly, i64 noundef) local_unnamed_addr #11

; Function Attrs: nofree nounwind optsize
declare noundef i32 @fclose(ptr nocapture noundef) local_unnamed_addr #6

; Function Attrs: mustprogress nounwind optsize willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) local_unnamed_addr #12

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #8

; Function Attrs: nounwind optsize uwtable
define internal i32 @decode_header(ptr nocapture noundef writeonly %0, i64 noundef %1) #4 {
  %3 = and i64 %1, 1048576
  %4 = icmp eq i64 %3, 0
  %5 = and i64 %1, 1572864
  %6 = icmp ne i64 %5, 1572864
  %7 = zext i1 %6 to i32
  %8 = zext i1 %4 to i32
  %9 = getelementptr inbounds %struct.frame, ptr %0, i64 0, i32 3
  store i32 %7, ptr %9, align 4
  %10 = getelementptr inbounds %struct.frame, ptr %0, i64 0, i32 4
  store i32 %8, ptr %10, align 4
  %11 = trunc i64 %1 to i32
  %12 = lshr i32 %11, 17
  %13 = and i32 %12, 3
  %14 = sub nuw nsw i32 4, %13
  %15 = getelementptr inbounds %struct.frame, ptr %0, i64 0, i32 6
  store i32 %14, ptr %15, align 4, !tbaa !25
  %16 = lshr i64 %1, 10
  %17 = and i64 %16, 3
  %18 = icmp eq i64 %17, 3
  br i1 %18, label %19, label %22

19:                                               ; preds = %2
  %20 = load ptr, ptr @stderr, align 8, !tbaa !7
  %21 = tail call i64 @fwrite(ptr nonnull @.str.4, i64 13, i64 1, ptr %20) #53
  tail call void @exit(i32 noundef 1) #54
  unreachable

22:                                               ; preds = %2
  %23 = select i1 %6, i32 3, i32 0
  %24 = trunc i64 %17 to i32
  %25 = trunc i64 %17 to i32
  %26 = select i1 %4, i32 6, i32 %24
  %27 = select i1 %4, i32 %25, i32 %23
  %28 = add nuw nsw i32 %27, %26
  %29 = lshr i32 %11, 12
  %30 = and i32 %29, 15
  %31 = lshr i32 %11, 16
  %32 = and i32 %31, 1
  %33 = xor i32 %32, 1
  %34 = getelementptr inbounds %struct.frame, ptr %0, i64 0, i32 9
  store i32 %28, ptr %34, align 4
  %35 = getelementptr inbounds %struct.frame, ptr %0, i64 0, i32 7
  store i32 %33, ptr %35, align 4
  %36 = getelementptr inbounds %struct.frame, ptr %0, i64 0, i32 8
  store i32 %30, ptr %36, align 4, !tbaa !27
  %37 = lshr i32 %11, 9
  %38 = and i32 %37, 1
  %39 = getelementptr inbounds %struct.frame, ptr %0, i64 0, i32 10
  store i32 %38, ptr %39, align 4, !tbaa !28
  %40 = lshr i32 %11, 8
  %41 = and i32 %40, 1
  %42 = getelementptr inbounds %struct.frame, ptr %0, i64 0, i32 11
  store i32 %41, ptr %42, align 4, !tbaa !29
  %43 = lshr i32 %11, 6
  %44 = and i32 %43, 3
  %45 = getelementptr inbounds %struct.frame, ptr %0, i64 0, i32 12
  store i32 %44, ptr %45, align 4, !tbaa !30
  %46 = lshr i32 %11, 4
  %47 = and i32 %46, 3
  %48 = getelementptr inbounds %struct.frame, ptr %0, i64 0, i32 13
  store i32 %47, ptr %48, align 4, !tbaa !31
  %49 = lshr i32 %11, 3
  %50 = and i32 %49, 1
  %51 = getelementptr inbounds %struct.frame, ptr %0, i64 0, i32 14
  store i32 %50, ptr %51, align 4, !tbaa !32
  %52 = lshr i32 %11, 2
  %53 = and i32 %52, 1
  %54 = getelementptr inbounds %struct.frame, ptr %0, i64 0, i32 15
  store i32 %53, ptr %54, align 4, !tbaa !33
  %55 = and i32 %11, 3
  %56 = getelementptr inbounds %struct.frame, ptr %0, i64 0, i32 16
  store i32 %55, ptr %56, align 4, !tbaa !34
  %57 = icmp eq i32 %44, 3
  %58 = select i1 %57, i32 1, i32 2
  store i32 %58, ptr %0, align 4, !tbaa !35
  %59 = icmp eq i32 %30, 0
  br i1 %59, label %60, label %63

60:                                               ; preds = %22
  %61 = load ptr, ptr @stderr, align 8, !tbaa !7
  %62 = tail call i64 @fwrite(ptr nonnull @.str.1.5, i64 27, i64 1, ptr %61) #53
  br label %90

63:                                               ; preds = %22
  switch i32 %14, label %87 [
    i32 1, label %64
    i32 2, label %67
    i32 3, label %70
  ]

64:                                               ; preds = %63
  %65 = load ptr, ptr @stderr, align 8, !tbaa !7
  %66 = tail call i64 @fwrite(ptr nonnull @.str.2.6, i64 23, i64 1, ptr %65) #53
  br label %90

67:                                               ; preds = %63
  %68 = load ptr, ptr @stderr, align 8, !tbaa !7
  %69 = tail call i64 @fwrite(ptr nonnull @.str.3.7, i64 23, i64 1, ptr %68) #53
  br label %90

70:                                               ; preds = %63
  %71 = zext i1 %6 to i64
  %72 = zext i32 %30 to i64
  %73 = getelementptr inbounds [2 x [3 x [16 x i32]]], ptr @tabsel_123, i64 0, i64 %71, i64 2, i64 %72
  %74 = load i32, ptr %73, align 4, !tbaa !11
  %75 = mul i32 %74, 144000
  %76 = getelementptr inbounds %struct.frame, ptr %0, i64 0, i32 17
  %77 = zext i32 %28 to i64
  %78 = getelementptr inbounds [9 x i64], ptr @freqs, i64 0, i64 %77
  %79 = load i64, ptr %78, align 8, !tbaa !36
  %80 = zext i1 %6 to i64
  %81 = shl i64 %79, %80
  %82 = sext i32 %75 to i64
  %83 = sdiv i64 %82, %81
  %84 = trunc i64 %83 to i32
  %85 = or i32 %38, -4
  %86 = add i32 %85, %84
  store i32 %86, ptr %76, align 4, !tbaa !38
  br label %90

87:                                               ; preds = %63
  %88 = load ptr, ptr @stderr, align 8, !tbaa !7
  %89 = tail call i64 @fwrite(ptr nonnull @.str.4.8, i64 27, i64 1, ptr %88) #53
  br label %90

90:                                               ; preds = %87, %70, %67, %64, %60
  %91 = phi i32 [ 0, %87 ], [ 0, %60 ], [ 1, %70 ], [ 1, %67 ], [ 1, %64 ]
  ret i32 %91
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, argmem: read, inaccessiblemem: none) uwtable
define internal i32 @getbits(i32 noundef %0) #13 {
  %2 = icmp eq i32 %0, 0
  br i1 %2, label %30, label %3

3:                                                ; preds = %1
  %4 = load ptr, ptr @wordpointer, align 8, !tbaa !7
  %5 = load i8, ptr %4, align 1, !tbaa !15
  %6 = zext i8 %5 to i64
  %7 = getelementptr inbounds i8, ptr %4, i64 1
  %8 = load i8, ptr %7, align 1, !tbaa !15
  %9 = zext i8 %8 to i64
  %10 = shl nuw nsw i64 %6, 16
  %11 = shl nuw nsw i64 %9, 8
  %12 = or i64 %11, %10
  %13 = getelementptr inbounds i8, ptr %4, i64 2
  %14 = load i8, ptr %13, align 1, !tbaa !15
  %15 = zext i8 %14 to i64
  %16 = or i64 %12, %15
  %17 = load i32, ptr @bitindex, align 4, !tbaa !11
  %18 = zext i32 %17 to i64
  %19 = shl i64 %16, %18
  %20 = and i64 %19, 16777215
  %21 = add nsw i32 %17, %0
  %22 = sub nsw i32 24, %0
  %23 = zext i32 %22 to i64
  %24 = lshr i64 %20, %23
  %25 = ashr i32 %21, 3
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i8, ptr %4, i64 %26
  store ptr %27, ptr @wordpointer, align 8, !tbaa !7
  %28 = and i32 %21, 7
  store i32 %28, ptr @bitindex, align 4, !tbaa !11
  %29 = trunc i64 %24 to i32
  br label %30

30:                                               ; preds = %3, %1
  %31 = phi i32 [ %29, %3 ], [ 0, %1 ]
  ret i32 %31
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, argmem: read, inaccessiblemem: none) uwtable
define internal i32 @getbits_fast(i32 noundef %0) #13 {
  %2 = load ptr, ptr @wordpointer, align 8, !tbaa !7
  %3 = load i8, ptr %2, align 1, !tbaa !15
  %4 = zext i8 %3 to i64
  %5 = shl nuw nsw i64 %4, 8
  %6 = getelementptr inbounds i8, ptr %2, i64 1
  %7 = load i8, ptr %6, align 1, !tbaa !15
  %8 = zext i8 %7 to i64
  %9 = or i64 %5, %8
  %10 = load i32, ptr @bitindex, align 4, !tbaa !11
  %11 = zext i32 %10 to i64
  %12 = shl i64 %9, %11
  %13 = and i64 %12, 65535
  %14 = add nsw i32 %10, %0
  %15 = sub nsw i32 16, %0
  %16 = zext i32 %15 to i64
  %17 = lshr i64 %13, %16
  %18 = ashr i32 %14, 3
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds i8, ptr %2, i64 %19
  store ptr %20, ptr @wordpointer, align 8, !tbaa !7
  %21 = and i32 %14, 7
  store i32 %21, ptr @bitindex, align 4, !tbaa !11
  %22 = trunc i64 %17 to i32
  ret i32 %22
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal void @dct64(ptr nocapture noundef writeonly %0, ptr nocapture noundef writeonly %1, ptr nocapture noundef readonly %2) #14 {
  %4 = load ptr, ptr @pnts, align 16, !tbaa !7
  %5 = load double, ptr %2, align 8, !tbaa !39
  %6 = getelementptr inbounds double, ptr %2, i64 31
  %7 = load double, ptr %6, align 8, !tbaa !39
  %8 = fadd double %5, %7
  %9 = fsub double %5, %7
  %10 = load double, ptr %4, align 8, !tbaa !39
  %11 = fmul double %9, %10
  %12 = getelementptr inbounds double, ptr %2, i64 1
  %13 = load double, ptr %12, align 8, !tbaa !39
  %14 = getelementptr inbounds double, ptr %2, i64 30
  %15 = load double, ptr %14, align 8, !tbaa !39
  %16 = fadd double %13, %15
  %17 = fsub double %13, %15
  %18 = getelementptr inbounds double, ptr %4, i64 1
  %19 = load double, ptr %18, align 8, !tbaa !39
  %20 = fmul double %17, %19
  %21 = getelementptr inbounds double, ptr %2, i64 2
  %22 = load double, ptr %21, align 8, !tbaa !39
  %23 = getelementptr inbounds double, ptr %2, i64 29
  %24 = load double, ptr %23, align 8, !tbaa !39
  %25 = fadd double %22, %24
  %26 = fsub double %22, %24
  %27 = getelementptr inbounds double, ptr %4, i64 2
  %28 = load double, ptr %27, align 8, !tbaa !39
  %29 = fmul double %26, %28
  %30 = getelementptr inbounds double, ptr %2, i64 3
  %31 = load double, ptr %30, align 8, !tbaa !39
  %32 = getelementptr inbounds double, ptr %2, i64 28
  %33 = load double, ptr %32, align 8, !tbaa !39
  %34 = fadd double %31, %33
  %35 = fsub double %31, %33
  %36 = getelementptr inbounds double, ptr %4, i64 3
  %37 = load double, ptr %36, align 8, !tbaa !39
  %38 = fmul double %35, %37
  %39 = getelementptr inbounds double, ptr %2, i64 4
  %40 = load double, ptr %39, align 8, !tbaa !39
  %41 = getelementptr inbounds double, ptr %2, i64 27
  %42 = load double, ptr %41, align 8, !tbaa !39
  %43 = fadd double %40, %42
  %44 = fsub double %40, %42
  %45 = getelementptr inbounds double, ptr %4, i64 4
  %46 = load double, ptr %45, align 8, !tbaa !39
  %47 = fmul double %44, %46
  %48 = getelementptr inbounds double, ptr %2, i64 5
  %49 = load double, ptr %48, align 8, !tbaa !39
  %50 = getelementptr inbounds double, ptr %2, i64 26
  %51 = load double, ptr %50, align 8, !tbaa !39
  %52 = fadd double %49, %51
  %53 = fsub double %49, %51
  %54 = getelementptr inbounds double, ptr %4, i64 5
  %55 = load double, ptr %54, align 8, !tbaa !39
  %56 = fmul double %53, %55
  %57 = getelementptr inbounds double, ptr %2, i64 6
  %58 = load double, ptr %57, align 8, !tbaa !39
  %59 = getelementptr inbounds double, ptr %2, i64 25
  %60 = load double, ptr %59, align 8, !tbaa !39
  %61 = fadd double %58, %60
  %62 = fsub double %58, %60
  %63 = getelementptr inbounds double, ptr %4, i64 6
  %64 = load double, ptr %63, align 8, !tbaa !39
  %65 = fmul double %62, %64
  %66 = getelementptr inbounds double, ptr %2, i64 7
  %67 = load double, ptr %66, align 8, !tbaa !39
  %68 = getelementptr inbounds double, ptr %2, i64 24
  %69 = load double, ptr %68, align 8, !tbaa !39
  %70 = fadd double %67, %69
  %71 = fsub double %67, %69
  %72 = getelementptr inbounds double, ptr %4, i64 7
  %73 = load double, ptr %72, align 8, !tbaa !39
  %74 = fmul double %71, %73
  %75 = getelementptr inbounds double, ptr %2, i64 8
  %76 = load double, ptr %75, align 8, !tbaa !39
  %77 = getelementptr inbounds double, ptr %2, i64 23
  %78 = load double, ptr %77, align 8, !tbaa !39
  %79 = fadd double %76, %78
  %80 = fsub double %76, %78
  %81 = getelementptr inbounds double, ptr %4, i64 8
  %82 = load double, ptr %81, align 8, !tbaa !39
  %83 = fmul double %80, %82
  %84 = getelementptr inbounds double, ptr %2, i64 9
  %85 = load double, ptr %84, align 8, !tbaa !39
  %86 = getelementptr inbounds double, ptr %2, i64 22
  %87 = load double, ptr %86, align 8, !tbaa !39
  %88 = fadd double %85, %87
  %89 = fsub double %85, %87
  %90 = getelementptr inbounds double, ptr %4, i64 9
  %91 = load double, ptr %90, align 8, !tbaa !39
  %92 = fmul double %89, %91
  %93 = getelementptr inbounds double, ptr %2, i64 10
  %94 = load double, ptr %93, align 8, !tbaa !39
  %95 = getelementptr inbounds double, ptr %2, i64 21
  %96 = load double, ptr %95, align 8, !tbaa !39
  %97 = fadd double %94, %96
  %98 = fsub double %94, %96
  %99 = getelementptr inbounds double, ptr %4, i64 10
  %100 = load double, ptr %99, align 8, !tbaa !39
  %101 = fmul double %98, %100
  %102 = getelementptr inbounds double, ptr %2, i64 11
  %103 = load double, ptr %102, align 8, !tbaa !39
  %104 = getelementptr inbounds double, ptr %2, i64 20
  %105 = load double, ptr %104, align 8, !tbaa !39
  %106 = fadd double %103, %105
  %107 = fsub double %103, %105
  %108 = getelementptr inbounds double, ptr %4, i64 11
  %109 = load double, ptr %108, align 8, !tbaa !39
  %110 = fmul double %107, %109
  %111 = getelementptr inbounds double, ptr %2, i64 12
  %112 = load double, ptr %111, align 8, !tbaa !39
  %113 = getelementptr inbounds double, ptr %2, i64 19
  %114 = load double, ptr %113, align 8, !tbaa !39
  %115 = fadd double %112, %114
  %116 = fsub double %112, %114
  %117 = getelementptr inbounds double, ptr %4, i64 12
  %118 = load double, ptr %117, align 8, !tbaa !39
  %119 = fmul double %116, %118
  %120 = getelementptr inbounds double, ptr %2, i64 13
  %121 = load double, ptr %120, align 8, !tbaa !39
  %122 = getelementptr inbounds double, ptr %2, i64 18
  %123 = load double, ptr %122, align 8, !tbaa !39
  %124 = fadd double %121, %123
  %125 = fsub double %121, %123
  %126 = getelementptr inbounds double, ptr %4, i64 13
  %127 = load double, ptr %126, align 8, !tbaa !39
  %128 = fmul double %125, %127
  %129 = getelementptr inbounds double, ptr %2, i64 14
  %130 = load double, ptr %129, align 8, !tbaa !39
  %131 = getelementptr inbounds double, ptr %2, i64 17
  %132 = load double, ptr %131, align 8, !tbaa !39
  %133 = fadd double %130, %132
  %134 = fsub double %130, %132
  %135 = getelementptr inbounds double, ptr %4, i64 14
  %136 = load double, ptr %135, align 8, !tbaa !39
  %137 = fmul double %134, %136
  %138 = getelementptr inbounds double, ptr %2, i64 15
  %139 = load double, ptr %138, align 8, !tbaa !39
  %140 = getelementptr inbounds double, ptr %2, i64 16
  %141 = load double, ptr %140, align 8, !tbaa !39
  %142 = fadd double %139, %141
  %143 = fsub double %139, %141
  %144 = getelementptr inbounds double, ptr %4, i64 15
  %145 = load double, ptr %144, align 8, !tbaa !39
  %146 = fmul double %143, %145
  %147 = load ptr, ptr getelementptr inbounds ([5 x ptr], ptr @pnts, i64 0, i64 1), align 8, !tbaa !7
  %148 = fadd double %8, %142
  %149 = fsub double %8, %142
  %150 = load double, ptr %147, align 8, !tbaa !39
  %151 = fmul double %149, %150
  %152 = fadd double %16, %133
  %153 = fsub double %16, %133
  %154 = getelementptr inbounds double, ptr %147, i64 1
  %155 = load double, ptr %154, align 8, !tbaa !39
  %156 = fmul double %153, %155
  %157 = fadd double %25, %124
  %158 = fsub double %25, %124
  %159 = getelementptr inbounds double, ptr %147, i64 2
  %160 = load double, ptr %159, align 8, !tbaa !39
  %161 = fmul double %158, %160
  %162 = fadd double %34, %115
  %163 = fsub double %34, %115
  %164 = getelementptr inbounds double, ptr %147, i64 3
  %165 = load double, ptr %164, align 8, !tbaa !39
  %166 = fmul double %163, %165
  %167 = fadd double %43, %106
  %168 = fsub double %43, %106
  %169 = getelementptr inbounds double, ptr %147, i64 4
  %170 = load double, ptr %169, align 8, !tbaa !39
  %171 = fmul double %168, %170
  %172 = fadd double %52, %97
  %173 = fsub double %52, %97
  %174 = getelementptr inbounds double, ptr %147, i64 5
  %175 = load double, ptr %174, align 8, !tbaa !39
  %176 = fmul double %173, %175
  %177 = fadd double %61, %88
  %178 = fsub double %61, %88
  %179 = getelementptr inbounds double, ptr %147, i64 6
  %180 = load double, ptr %179, align 8, !tbaa !39
  %181 = fmul double %178, %180
  %182 = fadd double %70, %79
  %183 = fsub double %70, %79
  %184 = getelementptr inbounds double, ptr %147, i64 7
  %185 = load double, ptr %184, align 8, !tbaa !39
  %186 = fmul double %183, %185
  %187 = fadd double %11, %146
  %188 = fsub double %11, %146
  %189 = fmul double %188, %150
  %190 = fadd double %20, %137
  %191 = fsub double %20, %137
  %192 = fmul double %191, %155
  %193 = fadd double %29, %128
  %194 = fsub double %29, %128
  %195 = fmul double %194, %160
  %196 = fadd double %38, %119
  %197 = fsub double %38, %119
  %198 = fmul double %197, %165
  %199 = fadd double %47, %110
  %200 = fsub double %47, %110
  %201 = fmul double %200, %170
  %202 = fadd double %56, %101
  %203 = fsub double %56, %101
  %204 = fmul double %203, %175
  %205 = fadd double %65, %92
  %206 = fsub double %65, %92
  %207 = fmul double %206, %180
  %208 = fadd double %74, %83
  %209 = fsub double %74, %83
  %210 = fmul double %209, %185
  %211 = load ptr, ptr getelementptr inbounds ([5 x ptr], ptr @pnts, i64 0, i64 2), align 16, !tbaa !7
  %212 = fadd double %182, %148
  %213 = fsub double %148, %182
  %214 = load double, ptr %211, align 8, !tbaa !39
  %215 = fmul double %213, %214
  %216 = fadd double %177, %152
  %217 = fsub double %152, %177
  %218 = getelementptr inbounds double, ptr %211, i64 1
  %219 = load double, ptr %218, align 8, !tbaa !39
  %220 = fmul double %217, %219
  %221 = fadd double %172, %157
  %222 = fsub double %157, %172
  %223 = getelementptr inbounds double, ptr %211, i64 2
  %224 = load double, ptr %223, align 8, !tbaa !39
  %225 = fmul double %222, %224
  %226 = fadd double %167, %162
  %227 = fsub double %162, %167
  %228 = getelementptr inbounds double, ptr %211, i64 3
  %229 = load double, ptr %228, align 8, !tbaa !39
  %230 = fmul double %227, %229
  %231 = fadd double %151, %186
  %232 = fsub double %151, %186
  %233 = fmul double %232, %214
  %234 = fadd double %156, %181
  %235 = fsub double %156, %181
  %236 = fmul double %235, %219
  %237 = fadd double %161, %176
  %238 = fsub double %161, %176
  %239 = fmul double %238, %224
  %240 = fadd double %166, %171
  %241 = fsub double %166, %171
  %242 = fmul double %241, %229
  %243 = fadd double %208, %187
  %244 = fsub double %187, %208
  %245 = fmul double %244, %214
  %246 = fadd double %205, %190
  %247 = fsub double %190, %205
  %248 = fmul double %247, %219
  %249 = fadd double %202, %193
  %250 = fsub double %193, %202
  %251 = fmul double %250, %224
  %252 = fadd double %199, %196
  %253 = fsub double %196, %199
  %254 = fmul double %253, %229
  %255 = fadd double %189, %210
  %256 = fsub double %189, %210
  %257 = fmul double %256, %214
  %258 = fadd double %192, %207
  %259 = fsub double %192, %207
  %260 = fmul double %259, %219
  %261 = fadd double %195, %204
  %262 = fsub double %195, %204
  %263 = fmul double %262, %224
  %264 = fadd double %198, %201
  %265 = fsub double %198, %201
  %266 = fmul double %265, %229
  %267 = load ptr, ptr getelementptr inbounds ([5 x ptr], ptr @pnts, i64 0, i64 3), align 8, !tbaa !7
  %268 = load double, ptr %267, align 8, !tbaa !39
  %269 = getelementptr inbounds double, ptr %267, i64 1
  %270 = load double, ptr %269, align 8, !tbaa !39
  %271 = fadd double %226, %212
  %272 = fsub double %212, %226
  %273 = fmul double %272, %268
  %274 = fadd double %221, %216
  %275 = fsub double %216, %221
  %276 = fmul double %275, %270
  %277 = fadd double %215, %230
  %278 = fsub double %215, %230
  %279 = fmul double %268, %278
  %280 = fadd double %220, %225
  %281 = fsub double %220, %225
  %282 = fmul double %281, %270
  %283 = fadd double %240, %231
  %284 = fsub double %231, %240
  %285 = fmul double %284, %268
  %286 = fadd double %237, %234
  %287 = fsub double %234, %237
  %288 = fmul double %287, %270
  %289 = fadd double %233, %242
  %290 = fsub double %233, %242
  %291 = fmul double %268, %290
  %292 = fadd double %236, %239
  %293 = fsub double %236, %239
  %294 = fmul double %293, %270
  %295 = fadd double %252, %243
  %296 = fsub double %243, %252
  %297 = fmul double %296, %268
  %298 = fadd double %249, %246
  %299 = fsub double %246, %249
  %300 = fmul double %299, %270
  %301 = fadd double %245, %254
  %302 = fsub double %245, %254
  %303 = fmul double %268, %302
  %304 = fadd double %248, %251
  %305 = fsub double %248, %251
  %306 = fmul double %305, %270
  %307 = fadd double %264, %255
  %308 = fsub double %255, %264
  %309 = fmul double %308, %268
  %310 = fadd double %261, %258
  %311 = fsub double %258, %261
  %312 = fmul double %311, %270
  %313 = fadd double %257, %266
  %314 = fsub double %257, %266
  %315 = fmul double %268, %314
  %316 = fadd double %260, %263
  %317 = fsub double %260, %263
  %318 = fmul double %317, %270
  %319 = load ptr, ptr getelementptr inbounds ([5 x ptr], ptr @pnts, i64 0, i64 4), align 16, !tbaa !7
  %320 = load double, ptr %319, align 8, !tbaa !39
  %321 = fadd double %274, %271
  %322 = fsub double %271, %274
  %323 = fmul double %322, %320
  %324 = fadd double %273, %276
  %325 = fsub double %273, %276
  %326 = fmul double %320, %325
  %327 = fadd double %324, %326
  %328 = fadd double %280, %277
  %329 = fsub double %277, %280
  %330 = fmul double %329, %320
  %331 = fadd double %279, %282
  %332 = fsub double %279, %282
  %333 = fmul double %320, %332
  %334 = fadd double %331, %333
  %335 = fadd double %328, %334
  %336 = fadd double %330, %334
  %337 = fadd double %330, %333
  %338 = fadd double %286, %283
  %339 = fsub double %283, %286
  %340 = fmul double %339, %320
  %341 = fadd double %285, %288
  %342 = fsub double %285, %288
  %343 = fmul double %320, %342
  %344 = fadd double %341, %343
  %345 = fadd double %292, %289
  %346 = fsub double %289, %292
  %347 = fmul double %346, %320
  %348 = fadd double %291, %294
  %349 = fsub double %291, %294
  %350 = fmul double %320, %349
  %351 = fadd double %348, %350
  %352 = fadd double %345, %351
  %353 = fadd double %347, %351
  %354 = fadd double %347, %350
  %355 = fadd double %298, %295
  %356 = fsub double %295, %298
  %357 = fmul double %356, %320
  %358 = fadd double %297, %300
  %359 = fsub double %297, %300
  %360 = fmul double %320, %359
  %361 = fadd double %358, %360
  %362 = fadd double %304, %301
  %363 = fsub double %301, %304
  %364 = fmul double %363, %320
  %365 = fadd double %303, %306
  %366 = fsub double %303, %306
  %367 = fmul double %320, %366
  %368 = fadd double %365, %367
  %369 = fadd double %362, %368
  %370 = fadd double %364, %368
  %371 = fadd double %364, %367
  %372 = fadd double %310, %307
  %373 = fsub double %307, %310
  %374 = fmul double %373, %320
  %375 = fadd double %309, %312
  %376 = fsub double %309, %312
  %377 = fmul double %320, %376
  %378 = fadd double %375, %377
  %379 = fadd double %316, %313
  %380 = fsub double %313, %316
  %381 = fmul double %380, %320
  %382 = fadd double %315, %318
  %383 = fsub double %315, %318
  %384 = fmul double %320, %383
  %385 = fadd double %382, %384
  %386 = fadd double %379, %385
  %387 = fadd double %381, %385
  %388 = fadd double %381, %384
  %389 = getelementptr inbounds double, ptr %0, i64 256
  store double %321, ptr %389, align 8, !tbaa !39
  %390 = getelementptr inbounds double, ptr %0, i64 192
  store double %335, ptr %390, align 8, !tbaa !39
  %391 = getelementptr inbounds double, ptr %0, i64 128
  store double %327, ptr %391, align 8, !tbaa !39
  %392 = getelementptr inbounds double, ptr %0, i64 64
  store double %336, ptr %392, align 8, !tbaa !39
  store double %323, ptr %0, align 8, !tbaa !39
  store double %323, ptr %1, align 8, !tbaa !39
  %393 = getelementptr inbounds double, ptr %1, i64 64
  store double %337, ptr %393, align 8, !tbaa !39
  %394 = getelementptr inbounds double, ptr %1, i64 128
  store double %326, ptr %394, align 8, !tbaa !39
  %395 = getelementptr inbounds double, ptr %1, i64 192
  store double %333, ptr %395, align 8, !tbaa !39
  %396 = fadd double %338, %352
  %397 = getelementptr inbounds double, ptr %0, i64 224
  store double %396, ptr %397, align 8, !tbaa !39
  %398 = fadd double %344, %352
  %399 = getelementptr inbounds double, ptr %0, i64 160
  store double %398, ptr %399, align 8, !tbaa !39
  %400 = fadd double %344, %353
  %401 = getelementptr inbounds double, ptr %0, i64 96
  store double %400, ptr %401, align 8, !tbaa !39
  %402 = fadd double %340, %353
  %403 = getelementptr inbounds double, ptr %0, i64 32
  store double %402, ptr %403, align 8, !tbaa !39
  %404 = fadd double %340, %354
  %405 = getelementptr inbounds double, ptr %1, i64 32
  store double %404, ptr %405, align 8, !tbaa !39
  %406 = fadd double %343, %354
  %407 = getelementptr inbounds double, ptr %1, i64 96
  store double %406, ptr %407, align 8, !tbaa !39
  %408 = fadd double %350, %343
  %409 = getelementptr inbounds double, ptr %1, i64 160
  store double %408, ptr %409, align 8, !tbaa !39
  %410 = getelementptr inbounds double, ptr %1, i64 224
  store double %350, ptr %410, align 8, !tbaa !39
  %411 = fadd double %372, %386
  %412 = fadd double %355, %411
  %413 = getelementptr inbounds double, ptr %0, i64 240
  store double %412, ptr %413, align 8, !tbaa !39
  %414 = fadd double %369, %411
  %415 = getelementptr inbounds double, ptr %0, i64 208
  store double %414, ptr %415, align 8, !tbaa !39
  %416 = fadd double %378, %386
  %417 = fadd double %369, %416
  %418 = getelementptr inbounds double, ptr %0, i64 176
  store double %417, ptr %418, align 8, !tbaa !39
  %419 = fadd double %361, %416
  %420 = getelementptr inbounds double, ptr %0, i64 144
  store double %419, ptr %420, align 8, !tbaa !39
  %421 = fadd double %378, %387
  %422 = fadd double %361, %421
  %423 = getelementptr inbounds double, ptr %0, i64 112
  store double %422, ptr %423, align 8, !tbaa !39
  %424 = fadd double %370, %421
  %425 = getelementptr inbounds double, ptr %0, i64 80
  store double %424, ptr %425, align 8, !tbaa !39
  %426 = fadd double %374, %387
  %427 = fadd double %370, %426
  %428 = getelementptr inbounds double, ptr %0, i64 48
  store double %427, ptr %428, align 8, !tbaa !39
  %429 = fadd double %357, %426
  %430 = getelementptr inbounds double, ptr %0, i64 16
  store double %429, ptr %430, align 8, !tbaa !39
  %431 = fadd double %374, %388
  %432 = fadd double %357, %431
  %433 = getelementptr inbounds double, ptr %1, i64 16
  store double %432, ptr %433, align 8, !tbaa !39
  %434 = fadd double %371, %431
  %435 = getelementptr inbounds double, ptr %1, i64 48
  store double %434, ptr %435, align 8, !tbaa !39
  %436 = fadd double %377, %388
  %437 = fadd double %371, %436
  %438 = getelementptr inbounds double, ptr %1, i64 80
  store double %437, ptr %438, align 8, !tbaa !39
  %439 = fadd double %360, %436
  %440 = getelementptr inbounds double, ptr %1, i64 112
  store double %439, ptr %440, align 8, !tbaa !39
  %441 = fadd double %384, %377
  %442 = fadd double %360, %441
  %443 = getelementptr inbounds double, ptr %1, i64 144
  store double %442, ptr %443, align 8, !tbaa !39
  %444 = fadd double %367, %441
  %445 = getelementptr inbounds double, ptr %1, i64 176
  store double %444, ptr %445, align 8, !tbaa !39
  %446 = fadd double %367, %384
  %447 = getelementptr inbounds double, ptr %1, i64 208
  store double %446, ptr %447, align 8, !tbaa !39
  %448 = getelementptr inbounds double, ptr %1, i64 240
  store double %384, ptr %448, align 8, !tbaa !39
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @synth_1to1_mono(ptr noundef %0, ptr nocapture noundef writeonly %1, ptr nocapture noundef %2) #4 {
  %4 = alloca [64 x i16], align 16
  %5 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 128, ptr nonnull %4) #56
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5) #56
  store i32 0, ptr %5, align 4, !tbaa !11
  %6 = call i32 @synth_1to1(ptr noundef %0, i32 noundef 0, ptr noundef nonnull %4, ptr noundef nonnull %5) #57
  %7 = load i32, ptr %2, align 4, !tbaa !11
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds i8, ptr %1, i64 %8
  br label %10

10:                                               ; preds = %10, %3
  %11 = phi ptr [ %9, %3 ], [ %15, %10 ]
  %12 = phi i32 [ 0, %3 ], [ %17, %10 ]
  %13 = phi ptr [ %4, %3 ], [ %16, %10 ]
  %14 = load i16, ptr %13, align 2, !tbaa !41
  store i16 %14, ptr %11, align 2, !tbaa !41
  %15 = getelementptr inbounds i8, ptr %11, i64 2
  %16 = getelementptr inbounds i16, ptr %13, i64 2
  %17 = add nuw nsw i32 %12, 1
  %18 = icmp eq i32 %17, 32
  br i1 %18, label %19, label %10, !llvm.loop !43

19:                                               ; preds = %10
  %20 = add nsw i32 %7, 64
  store i32 %20, ptr %2, align 4, !tbaa !11
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5) #56
  call void @llvm.lifetime.end.p0(i64 128, ptr nonnull %4) #56
  ret i32 %6
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @synth_1to1(ptr noundef %0, i32 noundef %1, ptr nocapture noundef writeonly %2, ptr nocapture noundef %3) #4 {
  %5 = load i32, ptr %3, align 4, !tbaa !11
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds i8, ptr %2, i64 %6
  %8 = load ptr, ptr @gmp, align 8, !tbaa !7
  %9 = getelementptr inbounds %struct.mpstr, ptr %8, i64 0, i32 12
  %10 = load i32, ptr %9, align 8, !tbaa !44
  %11 = icmp ne i32 %1, 0
  %12 = getelementptr inbounds %struct.mpstr, ptr %8, i64 0, i32 11, i64 1
  %13 = add i32 %10, 15
  %14 = and i32 %13, 15
  %15 = getelementptr inbounds %struct.mpstr, ptr %8, i64 0, i32 11
  %16 = select i1 %11, i32 %10, i32 %14
  %17 = zext i1 %11 to i64
  %18 = getelementptr inbounds i16, ptr %7, i64 %17
  %19 = select i1 %11, ptr %12, ptr %15
  %20 = and i32 %16, 1
  %21 = icmp eq i32 %20, 0
  %22 = getelementptr inbounds [272 x double], ptr %19, i64 1
  %23 = add nsw i32 %16, 1
  br i1 %21, label %30, label %24

24:                                               ; preds = %4
  %25 = and i32 %23, 15
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds double, ptr %22, i64 %26
  %28 = sext i32 %16 to i64
  %29 = getelementptr inbounds double, ptr %19, i64 %28
  tail call void @dct64(ptr noundef nonnull %27, ptr noundef nonnull %29, ptr noundef %0) #55
  br label %36

30:                                               ; preds = %4
  %31 = sext i32 %16 to i64
  %32 = getelementptr inbounds double, ptr %19, i64 %31
  %33 = getelementptr inbounds double, ptr %22, i64 %31
  %34 = getelementptr inbounds double, ptr %33, i64 1
  tail call void @dct64(ptr noundef nonnull %32, ptr noundef nonnull %34, ptr noundef %0) #55
  %35 = sext i32 %23 to i64
  br label %36

36:                                               ; preds = %30, %24
  %37 = phi i64 [ %35, %30 ], [ %28, %24 ]
  %38 = phi ptr [ %22, %30 ], [ %19, %24 ]
  %39 = phi i32 [ %23, %30 ], [ %16, %24 ]
  %40 = load ptr, ptr @gmp, align 8, !tbaa !7
  %41 = getelementptr inbounds %struct.mpstr, ptr %40, i64 0, i32 12
  store i32 %16, ptr %41, align 8, !tbaa !44
  %42 = sub nsw i64 0, %37
  %43 = getelementptr inbounds double, ptr getelementptr inbounds ([544 x double], ptr @decwin, i64 0, i64 16), i64 %42
  br label %44

44:                                               ; preds = %145, %36
  %45 = phi ptr [ %43, %36 ], [ %149, %145 ]
  %46 = phi i32 [ 16, %36 ], [ %147, %145 ]
  %47 = phi i32 [ 0, %36 ], [ %146, %145 ]
  %48 = phi ptr [ %38, %36 ], [ %148, %145 ]
  %49 = phi ptr [ %18, %36 ], [ %150, %145 ]
  %50 = load double, ptr %45, align 8, !tbaa !39
  %51 = load double, ptr %48, align 8, !tbaa !39
  %52 = fmul double %50, %51
  %53 = getelementptr inbounds double, ptr %45, i64 1
  %54 = load double, ptr %53, align 8, !tbaa !39
  %55 = getelementptr inbounds double, ptr %48, i64 1
  %56 = load double, ptr %55, align 8, !tbaa !39
  %57 = fneg double %54
  %58 = tail call double @llvm.fmuladd.f64(double %57, double %56, double %52)
  %59 = getelementptr inbounds double, ptr %45, i64 2
  %60 = load double, ptr %59, align 8, !tbaa !39
  %61 = getelementptr inbounds double, ptr %48, i64 2
  %62 = load double, ptr %61, align 8, !tbaa !39
  %63 = tail call double @llvm.fmuladd.f64(double %60, double %62, double %58)
  %64 = getelementptr inbounds double, ptr %45, i64 3
  %65 = load double, ptr %64, align 8, !tbaa !39
  %66 = getelementptr inbounds double, ptr %48, i64 3
  %67 = load double, ptr %66, align 8, !tbaa !39
  %68 = fneg double %65
  %69 = tail call double @llvm.fmuladd.f64(double %68, double %67, double %63)
  %70 = getelementptr inbounds double, ptr %45, i64 4
  %71 = load double, ptr %70, align 8, !tbaa !39
  %72 = getelementptr inbounds double, ptr %48, i64 4
  %73 = load double, ptr %72, align 8, !tbaa !39
  %74 = tail call double @llvm.fmuladd.f64(double %71, double %73, double %69)
  %75 = getelementptr inbounds double, ptr %45, i64 5
  %76 = load double, ptr %75, align 8, !tbaa !39
  %77 = getelementptr inbounds double, ptr %48, i64 5
  %78 = load double, ptr %77, align 8, !tbaa !39
  %79 = fneg double %76
  %80 = tail call double @llvm.fmuladd.f64(double %79, double %78, double %74)
  %81 = getelementptr inbounds double, ptr %45, i64 6
  %82 = load double, ptr %81, align 8, !tbaa !39
  %83 = getelementptr inbounds double, ptr %48, i64 6
  %84 = load double, ptr %83, align 8, !tbaa !39
  %85 = tail call double @llvm.fmuladd.f64(double %82, double %84, double %80)
  %86 = getelementptr inbounds double, ptr %45, i64 7
  %87 = load double, ptr %86, align 8, !tbaa !39
  %88 = getelementptr inbounds double, ptr %48, i64 7
  %89 = load double, ptr %88, align 8, !tbaa !39
  %90 = fneg double %87
  %91 = tail call double @llvm.fmuladd.f64(double %90, double %89, double %85)
  %92 = getelementptr inbounds double, ptr %45, i64 8
  %93 = load double, ptr %92, align 8, !tbaa !39
  %94 = getelementptr inbounds double, ptr %48, i64 8
  %95 = load double, ptr %94, align 8, !tbaa !39
  %96 = tail call double @llvm.fmuladd.f64(double %93, double %95, double %91)
  %97 = getelementptr inbounds double, ptr %45, i64 9
  %98 = load double, ptr %97, align 8, !tbaa !39
  %99 = getelementptr inbounds double, ptr %48, i64 9
  %100 = load double, ptr %99, align 8, !tbaa !39
  %101 = fneg double %98
  %102 = tail call double @llvm.fmuladd.f64(double %101, double %100, double %96)
  %103 = getelementptr inbounds double, ptr %45, i64 10
  %104 = load double, ptr %103, align 8, !tbaa !39
  %105 = getelementptr inbounds double, ptr %48, i64 10
  %106 = load double, ptr %105, align 8, !tbaa !39
  %107 = tail call double @llvm.fmuladd.f64(double %104, double %106, double %102)
  %108 = getelementptr inbounds double, ptr %45, i64 11
  %109 = load double, ptr %108, align 8, !tbaa !39
  %110 = getelementptr inbounds double, ptr %48, i64 11
  %111 = load double, ptr %110, align 8, !tbaa !39
  %112 = fneg double %109
  %113 = tail call double @llvm.fmuladd.f64(double %112, double %111, double %107)
  %114 = getelementptr inbounds double, ptr %45, i64 12
  %115 = load double, ptr %114, align 8, !tbaa !39
  %116 = getelementptr inbounds double, ptr %48, i64 12
  %117 = load double, ptr %116, align 8, !tbaa !39
  %118 = tail call double @llvm.fmuladd.f64(double %115, double %117, double %113)
  %119 = getelementptr inbounds double, ptr %45, i64 13
  %120 = load double, ptr %119, align 8, !tbaa !39
  %121 = getelementptr inbounds double, ptr %48, i64 13
  %122 = load double, ptr %121, align 8, !tbaa !39
  %123 = fneg double %120
  %124 = tail call double @llvm.fmuladd.f64(double %123, double %122, double %118)
  %125 = getelementptr inbounds double, ptr %45, i64 14
  %126 = load double, ptr %125, align 8, !tbaa !39
  %127 = getelementptr inbounds double, ptr %48, i64 14
  %128 = load double, ptr %127, align 8, !tbaa !39
  %129 = tail call double @llvm.fmuladd.f64(double %126, double %128, double %124)
  %130 = getelementptr inbounds double, ptr %45, i64 15
  %131 = load double, ptr %130, align 8, !tbaa !39
  %132 = getelementptr inbounds double, ptr %48, i64 15
  %133 = load double, ptr %132, align 8, !tbaa !39
  %134 = fneg double %131
  %135 = tail call double @llvm.fmuladd.f64(double %134, double %133, double %129)
  %136 = fcmp ogt double %135, 3.276700e+04
  br i1 %136, label %137, label %139

137:                                              ; preds = %44
  store i16 32767, ptr %49, align 2, !tbaa !41
  %138 = add nsw i32 %47, 1
  br label %145

139:                                              ; preds = %44
  %140 = fcmp olt double %135, -3.276800e+04
  br i1 %140, label %141, label %143

141:                                              ; preds = %139
  store i16 -32768, ptr %49, align 2, !tbaa !41
  %142 = add nsw i32 %47, 1
  br label %145

143:                                              ; preds = %139
  %144 = fptosi double %135 to i16
  store i16 %144, ptr %49, align 2, !tbaa !41
  br label %145

145:                                              ; preds = %143, %141, %137
  %146 = phi i32 [ %138, %137 ], [ %142, %141 ], [ %47, %143 ]
  %147 = add nsw i32 %46, -1
  %148 = getelementptr inbounds double, ptr %48, i64 16
  %149 = getelementptr inbounds double, ptr %45, i64 32
  %150 = getelementptr inbounds i16, ptr %49, i64 2
  %151 = icmp eq i32 %147, 0
  br i1 %151, label %152, label %44, !llvm.loop !46

152:                                              ; preds = %145
  %.lcssa7 = phi i32 [ %146, %145 ]
  %.lcssa6 = phi ptr [ %148, %145 ]
  %.lcssa5 = phi ptr [ %149, %145 ]
  %.lcssa4 = phi ptr [ %150, %145 ]
  %.lcssa3 = phi ptr [ %45, %145 ]
  %.lcssa2 = phi ptr [ %48, %145 ]
  %.lcssa1 = phi ptr [ %49, %145 ]
  %153 = load double, ptr %.lcssa5, align 8, !tbaa !39
  %154 = load double, ptr %.lcssa6, align 8, !tbaa !39
  %155 = fmul double %153, %154
  %156 = getelementptr inbounds double, ptr %.lcssa3, i64 34
  %157 = load double, ptr %156, align 8, !tbaa !39
  %158 = getelementptr inbounds double, ptr %.lcssa2, i64 18
  %159 = load double, ptr %158, align 8, !tbaa !39
  %160 = tail call double @llvm.fmuladd.f64(double %157, double %159, double %155)
  %161 = getelementptr inbounds double, ptr %.lcssa3, i64 36
  %162 = load double, ptr %161, align 8, !tbaa !39
  %163 = getelementptr inbounds double, ptr %.lcssa2, i64 20
  %164 = load double, ptr %163, align 8, !tbaa !39
  %165 = tail call double @llvm.fmuladd.f64(double %162, double %164, double %160)
  %166 = getelementptr inbounds double, ptr %.lcssa3, i64 38
  %167 = load double, ptr %166, align 8, !tbaa !39
  %168 = getelementptr inbounds double, ptr %.lcssa2, i64 22
  %169 = load double, ptr %168, align 8, !tbaa !39
  %170 = tail call double @llvm.fmuladd.f64(double %167, double %169, double %165)
  %171 = getelementptr inbounds double, ptr %.lcssa3, i64 40
  %172 = load double, ptr %171, align 8, !tbaa !39
  %173 = getelementptr inbounds double, ptr %.lcssa2, i64 24
  %174 = load double, ptr %173, align 8, !tbaa !39
  %175 = tail call double @llvm.fmuladd.f64(double %172, double %174, double %170)
  %176 = getelementptr inbounds double, ptr %.lcssa3, i64 42
  %177 = load double, ptr %176, align 8, !tbaa !39
  %178 = getelementptr inbounds double, ptr %.lcssa2, i64 26
  %179 = load double, ptr %178, align 8, !tbaa !39
  %180 = tail call double @llvm.fmuladd.f64(double %177, double %179, double %175)
  %181 = getelementptr inbounds double, ptr %.lcssa3, i64 44
  %182 = load double, ptr %181, align 8, !tbaa !39
  %183 = getelementptr inbounds double, ptr %.lcssa2, i64 28
  %184 = load double, ptr %183, align 8, !tbaa !39
  %185 = tail call double @llvm.fmuladd.f64(double %182, double %184, double %180)
  %186 = getelementptr inbounds double, ptr %.lcssa3, i64 46
  %187 = load double, ptr %186, align 8, !tbaa !39
  %188 = getelementptr inbounds double, ptr %.lcssa2, i64 30
  %189 = load double, ptr %188, align 8, !tbaa !39
  %190 = tail call double @llvm.fmuladd.f64(double %187, double %189, double %185)
  %191 = fcmp ogt double %190, 3.276700e+04
  br i1 %191, label %192, label %194

192:                                              ; preds = %152
  store i16 32767, ptr %.lcssa4, align 2, !tbaa !41
  %193 = add nsw i32 %.lcssa7, 1
  br label %200

194:                                              ; preds = %152
  %195 = fcmp olt double %190, -3.276800e+04
  br i1 %195, label %196, label %198

196:                                              ; preds = %194
  store i16 -32768, ptr %.lcssa4, align 2, !tbaa !41
  %197 = add nsw i32 %.lcssa7, 1
  br label %200

198:                                              ; preds = %194
  %199 = fptosi double %190 to i16
  store i16 %199, ptr %.lcssa4, align 2, !tbaa !41
  br label %200

200:                                              ; preds = %198, %196, %192
  %201 = phi i32 [ %193, %192 ], [ %197, %196 ], [ %.lcssa7, %198 ]
  %202 = shl i32 %39, 1
  %203 = sext i32 %202 to i64
  %204 = getelementptr inbounds double, ptr %.lcssa3, i64 %203
  %205 = getelementptr inbounds i16, ptr %.lcssa1, i64 4
  br label %206

206:                                              ; preds = %316, %200
  %207 = phi ptr [ %205, %200 ], [ %321, %316 ]
  %208 = phi ptr [ %.lcssa2, %200 ], [ %320, %316 ]
  %209 = phi ptr [ %204, %200 ], [ %319, %316 ]
  %210 = phi i32 [ 15, %200 ], [ %318, %316 ]
  %211 = phi i32 [ %201, %200 ], [ %317, %316 ]
  %212 = phi ptr [ %.lcssa6, %200 ], [ %208, %316 ]
  %213 = getelementptr inbounds double, ptr %209, i64 -1
  %214 = load double, ptr %213, align 8, !tbaa !39
  %215 = fneg double %214
  %216 = load double, ptr %208, align 8, !tbaa !39
  %217 = fmul double %216, %215
  %218 = getelementptr inbounds double, ptr %209, i64 -2
  %219 = load double, ptr %218, align 8, !tbaa !39
  %220 = getelementptr inbounds double, ptr %212, i64 -15
  %221 = load double, ptr %220, align 8, !tbaa !39
  %222 = fneg double %219
  %223 = tail call double @llvm.fmuladd.f64(double %222, double %221, double %217)
  %224 = getelementptr inbounds double, ptr %209, i64 -3
  %225 = load double, ptr %224, align 8, !tbaa !39
  %226 = getelementptr inbounds double, ptr %212, i64 -14
  %227 = load double, ptr %226, align 8, !tbaa !39
  %228 = fneg double %225
  %229 = tail call double @llvm.fmuladd.f64(double %228, double %227, double %223)
  %230 = getelementptr inbounds double, ptr %209, i64 -4
  %231 = load double, ptr %230, align 8, !tbaa !39
  %232 = getelementptr inbounds double, ptr %212, i64 -13
  %233 = load double, ptr %232, align 8, !tbaa !39
  %234 = fneg double %231
  %235 = tail call double @llvm.fmuladd.f64(double %234, double %233, double %229)
  %236 = getelementptr inbounds double, ptr %209, i64 -5
  %237 = load double, ptr %236, align 8, !tbaa !39
  %238 = getelementptr inbounds double, ptr %212, i64 -12
  %239 = load double, ptr %238, align 8, !tbaa !39
  %240 = fneg double %237
  %241 = tail call double @llvm.fmuladd.f64(double %240, double %239, double %235)
  %242 = getelementptr inbounds double, ptr %209, i64 -6
  %243 = load double, ptr %242, align 8, !tbaa !39
  %244 = getelementptr inbounds double, ptr %212, i64 -11
  %245 = load double, ptr %244, align 8, !tbaa !39
  %246 = fneg double %243
  %247 = tail call double @llvm.fmuladd.f64(double %246, double %245, double %241)
  %248 = getelementptr inbounds double, ptr %209, i64 -7
  %249 = load double, ptr %248, align 8, !tbaa !39
  %250 = getelementptr inbounds double, ptr %212, i64 -10
  %251 = load double, ptr %250, align 8, !tbaa !39
  %252 = fneg double %249
  %253 = tail call double @llvm.fmuladd.f64(double %252, double %251, double %247)
  %254 = getelementptr inbounds double, ptr %209, i64 -8
  %255 = load double, ptr %254, align 8, !tbaa !39
  %256 = getelementptr inbounds double, ptr %212, i64 -9
  %257 = load double, ptr %256, align 8, !tbaa !39
  %258 = fneg double %255
  %259 = tail call double @llvm.fmuladd.f64(double %258, double %257, double %253)
  %260 = getelementptr inbounds double, ptr %209, i64 -9
  %261 = load double, ptr %260, align 8, !tbaa !39
  %262 = getelementptr inbounds double, ptr %212, i64 -8
  %263 = load double, ptr %262, align 8, !tbaa !39
  %264 = fneg double %261
  %265 = tail call double @llvm.fmuladd.f64(double %264, double %263, double %259)
  %266 = getelementptr inbounds double, ptr %209, i64 -10
  %267 = load double, ptr %266, align 8, !tbaa !39
  %268 = getelementptr inbounds double, ptr %212, i64 -7
  %269 = load double, ptr %268, align 8, !tbaa !39
  %270 = fneg double %267
  %271 = tail call double @llvm.fmuladd.f64(double %270, double %269, double %265)
  %272 = getelementptr inbounds double, ptr %209, i64 -11
  %273 = load double, ptr %272, align 8, !tbaa !39
  %274 = getelementptr inbounds double, ptr %212, i64 -6
  %275 = load double, ptr %274, align 8, !tbaa !39
  %276 = fneg double %273
  %277 = tail call double @llvm.fmuladd.f64(double %276, double %275, double %271)
  %278 = getelementptr inbounds double, ptr %209, i64 -12
  %279 = load double, ptr %278, align 8, !tbaa !39
  %280 = getelementptr inbounds double, ptr %212, i64 -5
  %281 = load double, ptr %280, align 8, !tbaa !39
  %282 = fneg double %279
  %283 = tail call double @llvm.fmuladd.f64(double %282, double %281, double %277)
  %284 = getelementptr inbounds double, ptr %209, i64 -13
  %285 = load double, ptr %284, align 8, !tbaa !39
  %286 = getelementptr inbounds double, ptr %212, i64 -4
  %287 = load double, ptr %286, align 8, !tbaa !39
  %288 = fneg double %285
  %289 = tail call double @llvm.fmuladd.f64(double %288, double %287, double %283)
  %290 = getelementptr inbounds double, ptr %209, i64 -14
  %291 = load double, ptr %290, align 8, !tbaa !39
  %292 = getelementptr inbounds double, ptr %212, i64 -3
  %293 = load double, ptr %292, align 8, !tbaa !39
  %294 = fneg double %291
  %295 = tail call double @llvm.fmuladd.f64(double %294, double %293, double %289)
  %296 = getelementptr inbounds double, ptr %209, i64 -15
  %297 = load double, ptr %296, align 8, !tbaa !39
  %298 = getelementptr inbounds double, ptr %212, i64 -2
  %299 = load double, ptr %298, align 8, !tbaa !39
  %300 = fneg double %297
  %301 = tail call double @llvm.fmuladd.f64(double %300, double %299, double %295)
  %302 = load double, ptr %209, align 8, !tbaa !39
  %303 = getelementptr inbounds double, ptr %212, i64 -1
  %304 = load double, ptr %303, align 8, !tbaa !39
  %305 = fneg double %302
  %306 = tail call double @llvm.fmuladd.f64(double %305, double %304, double %301)
  %307 = fcmp ogt double %306, 3.276700e+04
  br i1 %307, label %308, label %310

308:                                              ; preds = %206
  store i16 32767, ptr %207, align 2, !tbaa !41
  %309 = add nsw i32 %211, 1
  br label %316

310:                                              ; preds = %206
  %311 = fcmp olt double %306, -3.276800e+04
  br i1 %311, label %312, label %314

312:                                              ; preds = %310
  store i16 -32768, ptr %207, align 2, !tbaa !41
  %313 = add nsw i32 %211, 1
  br label %316

314:                                              ; preds = %310
  %315 = fptosi double %306 to i16
  store i16 %315, ptr %207, align 2, !tbaa !41
  br label %316

316:                                              ; preds = %314, %312, %308
  %317 = phi i32 [ %309, %308 ], [ %313, %312 ], [ %211, %314 ]
  %318 = add nsw i32 %210, -1
  %319 = getelementptr inbounds double, ptr %209, i64 -32
  %320 = getelementptr inbounds double, ptr %208, i64 -16
  %321 = getelementptr inbounds i16, ptr %207, i64 2
  %322 = icmp eq i32 %318, 0
  br i1 %322, label %323, label %206, !llvm.loop !47

323:                                              ; preds = %316
  %.lcssa = phi i32 [ %317, %316 ]
  %324 = load i32, ptr %3, align 4, !tbaa !11
  %325 = add nsw i32 %324, 128
  store i32 %325, ptr %3, align 4, !tbaa !11
  ret i32 %.lcssa
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.fmuladd.f64(double, double, double) #9

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @fft_short(ptr noundef %0, i32 noundef %1, ptr nocapture noundef readonly %2) #15 {
  %4 = icmp slt i32 %1, 2
  %5 = icmp eq i32 %1, 2
  %6 = getelementptr inbounds ptr, ptr %2, i64 1
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds ptr, ptr %2, i64 %7
  br label %9

9:                                                ; preds = %452, %3
  %10 = phi i64 [ 0, %3 ], [ %454, %452 ]
  %11 = getelementptr inbounds [256 x float], ptr %0, i64 %10, i64 128
  %12 = trunc i64 %10 to i32
  %13 = mul i32 %12, 192
  %14 = add i32 %13, 192
  br i1 %4, label %15, label %129

15:                                               ; preds = %9
  %16 = load ptr, ptr %8, align 8, !tbaa !7
  br label %17

17:                                               ; preds = %17, %15
  %18 = phi i64 [ 31, %15 ], [ %127, %17 ]
  %19 = phi ptr [ %11, %15 ], [ %67, %17 ]
  %20 = shl nuw nsw i64 %18, 2
  %21 = getelementptr inbounds [128 x i16], ptr @rv_tbl, i64 0, i64 %20
  %22 = load i16, ptr %21, align 8, !tbaa !41
  %23 = sext i16 %22 to i64
  %24 = getelementptr inbounds [128 x float], ptr @window_s, i64 0, i64 %23
  %25 = load float, ptr %24, align 4, !tbaa !48
  %26 = sext i16 %22 to i32
  %27 = add nsw i32 %14, %26
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds i16, ptr %16, i64 %28
  %30 = load i16, ptr %29, align 2, !tbaa !41
  %31 = sitofp i16 %30 to float
  %32 = fmul float %25, %31
  %33 = sub nsw i32 127, %26
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds [128 x float], ptr @window_s, i64 0, i64 %34
  %36 = load float, ptr %35, align 4, !tbaa !48
  %37 = add nsw i32 %27, 128
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds i16, ptr %16, i64 %38
  %40 = load i16, ptr %39, align 2, !tbaa !41
  %41 = sitofp i16 %40 to float
  %42 = fmul float %36, %41
  %43 = fsub float %32, %42
  %44 = fadd float %32, %42
  %45 = add nsw i32 %26, 64
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds [128 x float], ptr @window_s, i64 0, i64 %46
  %48 = load float, ptr %47, align 4, !tbaa !48
  %49 = add nsw i32 %27, 64
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i16, ptr %16, i64 %50
  %52 = load i16, ptr %51, align 2, !tbaa !41
  %53 = sitofp i16 %52 to float
  %54 = fmul float %48, %53
  %55 = sub nsw i32 63, %26
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds [128 x float], ptr @window_s, i64 0, i64 %56
  %58 = load float, ptr %57, align 4, !tbaa !48
  %59 = add nsw i32 %27, 192
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds i16, ptr %16, i64 %60
  %62 = load i16, ptr %61, align 2, !tbaa !41
  %63 = sitofp i16 %62 to float
  %64 = fmul float %58, %63
  %65 = fsub float %54, %64
  %66 = fadd float %54, %64
  %67 = getelementptr inbounds float, ptr %19, i64 -4
  %68 = fadd float %44, %66
  store float %68, ptr %67, align 4, !tbaa !48
  %69 = fsub float %44, %66
  %70 = getelementptr inbounds float, ptr %19, i64 -2
  store float %69, ptr %70, align 4, !tbaa !48
  %71 = fadd float %43, %65
  %72 = getelementptr inbounds float, ptr %19, i64 -3
  store float %71, ptr %72, align 4, !tbaa !48
  %73 = fsub float %43, %65
  %74 = getelementptr inbounds float, ptr %19, i64 -1
  store float %73, ptr %74, align 4, !tbaa !48
  %75 = add nsw i32 %26, 1
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds [128 x float], ptr @window_s, i64 0, i64 %76
  %78 = load float, ptr %77, align 4, !tbaa !48
  %79 = add nsw i32 %27, 1
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds i16, ptr %16, i64 %80
  %82 = load i16, ptr %81, align 2, !tbaa !41
  %83 = sitofp i16 %82 to float
  %84 = fmul float %78, %83
  %85 = sub nsw i32 126, %26
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds [128 x float], ptr @window_s, i64 0, i64 %86
  %88 = load float, ptr %87, align 4, !tbaa !48
  %89 = add nsw i32 %27, 129
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds i16, ptr %16, i64 %90
  %92 = load i16, ptr %91, align 2, !tbaa !41
  %93 = sitofp i16 %92 to float
  %94 = fmul float %88, %93
  %95 = fsub float %84, %94
  %96 = fadd float %84, %94
  %97 = add nsw i32 %26, 65
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds [128 x float], ptr @window_s, i64 0, i64 %98
  %100 = load float, ptr %99, align 4, !tbaa !48
  %101 = add nsw i32 %27, 65
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds i16, ptr %16, i64 %102
  %104 = load i16, ptr %103, align 2, !tbaa !41
  %105 = sitofp i16 %104 to float
  %106 = fmul float %100, %105
  %107 = sub nsw i32 62, %26
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds [128 x float], ptr @window_s, i64 0, i64 %108
  %110 = load float, ptr %109, align 4, !tbaa !48
  %111 = add nsw i32 %27, 193
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds i16, ptr %16, i64 %112
  %114 = load i16, ptr %113, align 2, !tbaa !41
  %115 = sitofp i16 %114 to float
  %116 = fmul float %110, %115
  %117 = fsub float %106, %116
  %118 = fadd float %106, %116
  %119 = fadd float %96, %118
  %120 = getelementptr inbounds float, ptr %19, i64 124
  store float %119, ptr %120, align 4, !tbaa !48
  %121 = fsub float %96, %118
  %122 = getelementptr inbounds float, ptr %19, i64 126
  store float %121, ptr %122, align 4, !tbaa !48
  %123 = fadd float %95, %117
  %124 = getelementptr inbounds float, ptr %19, i64 125
  store float %123, ptr %124, align 4, !tbaa !48
  %125 = fsub float %95, %117
  %126 = getelementptr inbounds float, ptr %19, i64 127
  store float %125, ptr %126, align 4, !tbaa !48
  %127 = add nsw i64 %18, -1
  %128 = icmp eq i64 %18, 0
  br i1 %128, label %452, label %17, !llvm.loop !50

129:                                              ; preds = %9
  %130 = load ptr, ptr %2, align 8, !tbaa !7
  %131 = load ptr, ptr %6, align 8, !tbaa !7
  br i1 %5, label %132, label %292

132:                                              ; preds = %132, %129
  %133 = phi i64 [ %290, %132 ], [ 31, %129 ]
  %134 = phi ptr [ %206, %132 ], [ %11, %129 ]
  %135 = shl nuw nsw i64 %133, 2
  %136 = getelementptr inbounds [128 x i16], ptr @rv_tbl, i64 0, i64 %135
  %137 = load i16, ptr %136, align 8, !tbaa !41
  %138 = sext i16 %137 to i64
  %139 = getelementptr inbounds [128 x float], ptr @window_s, i64 0, i64 %138
  %140 = load float, ptr %139, align 4, !tbaa !48
  %141 = sext i16 %137 to i32
  %142 = add nsw i32 %14, %141
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds i16, ptr %130, i64 %143
  %145 = load i16, ptr %144, align 2, !tbaa !41
  %146 = sext i16 %145 to i32
  %147 = getelementptr inbounds i16, ptr %131, i64 %143
  %148 = load i16, ptr %147, align 2, !tbaa !41
  %149 = sext i16 %148 to i32
  %150 = add nsw i32 %149, %146
  %151 = sitofp i32 %150 to float
  %152 = fmul float %151, 0x3FE6A09E60000000
  %153 = fmul float %140, %152
  %154 = sub nsw i32 127, %141
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds [128 x float], ptr @window_s, i64 0, i64 %155
  %157 = load float, ptr %156, align 4, !tbaa !48
  %158 = add nsw i32 %142, 128
  %159 = sext i32 %158 to i64
  %160 = getelementptr inbounds i16, ptr %130, i64 %159
  %161 = load i16, ptr %160, align 2, !tbaa !41
  %162 = sext i16 %161 to i32
  %163 = getelementptr inbounds i16, ptr %131, i64 %159
  %164 = load i16, ptr %163, align 2, !tbaa !41
  %165 = sext i16 %164 to i32
  %166 = add nsw i32 %165, %162
  %167 = sitofp i32 %166 to float
  %168 = fmul float %167, 0x3FE6A09E60000000
  %169 = fmul float %157, %168
  %170 = fsub float %153, %169
  %171 = fadd float %153, %169
  %172 = add nsw i32 %141, 64
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds [128 x float], ptr @window_s, i64 0, i64 %173
  %175 = load float, ptr %174, align 4, !tbaa !48
  %176 = add nsw i32 %142, 64
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds i16, ptr %130, i64 %177
  %179 = load i16, ptr %178, align 2, !tbaa !41
  %180 = sext i16 %179 to i32
  %181 = getelementptr inbounds i16, ptr %131, i64 %177
  %182 = load i16, ptr %181, align 2, !tbaa !41
  %183 = sext i16 %182 to i32
  %184 = add nsw i32 %183, %180
  %185 = sitofp i32 %184 to float
  %186 = fmul float %185, 0x3FE6A09E60000000
  %187 = fmul float %175, %186
  %188 = sub nsw i32 63, %141
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds [128 x float], ptr @window_s, i64 0, i64 %189
  %191 = load float, ptr %190, align 4, !tbaa !48
  %192 = add nsw i32 %142, 192
  %193 = sext i32 %192 to i64
  %194 = getelementptr inbounds i16, ptr %130, i64 %193
  %195 = load i16, ptr %194, align 2, !tbaa !41
  %196 = sext i16 %195 to i32
  %197 = getelementptr inbounds i16, ptr %131, i64 %193
  %198 = load i16, ptr %197, align 2, !tbaa !41
  %199 = sext i16 %198 to i32
  %200 = add nsw i32 %199, %196
  %201 = sitofp i32 %200 to float
  %202 = fmul float %201, 0x3FE6A09E60000000
  %203 = fmul float %191, %202
  %204 = fsub float %187, %203
  %205 = fadd float %187, %203
  %206 = getelementptr inbounds float, ptr %134, i64 -4
  %207 = fadd float %171, %205
  store float %207, ptr %206, align 4, !tbaa !48
  %208 = fsub float %171, %205
  %209 = getelementptr inbounds float, ptr %134, i64 -2
  store float %208, ptr %209, align 4, !tbaa !48
  %210 = fadd float %170, %204
  %211 = getelementptr inbounds float, ptr %134, i64 -3
  store float %210, ptr %211, align 4, !tbaa !48
  %212 = fsub float %170, %204
  %213 = getelementptr inbounds float, ptr %134, i64 -1
  store float %212, ptr %213, align 4, !tbaa !48
  %214 = add nsw i32 %141, 1
  %215 = sext i32 %214 to i64
  %216 = getelementptr inbounds [128 x float], ptr @window_s, i64 0, i64 %215
  %217 = load float, ptr %216, align 4, !tbaa !48
  %218 = add nsw i32 %142, 1
  %219 = sext i32 %218 to i64
  %220 = getelementptr inbounds i16, ptr %130, i64 %219
  %221 = load i16, ptr %220, align 2, !tbaa !41
  %222 = sext i16 %221 to i32
  %223 = getelementptr inbounds i16, ptr %131, i64 %219
  %224 = load i16, ptr %223, align 2, !tbaa !41
  %225 = sext i16 %224 to i32
  %226 = add nsw i32 %225, %222
  %227 = sitofp i32 %226 to float
  %228 = fmul float %227, 0x3FE6A09E60000000
  %229 = fmul float %217, %228
  %230 = sub nsw i32 126, %141
  %231 = sext i32 %230 to i64
  %232 = getelementptr inbounds [128 x float], ptr @window_s, i64 0, i64 %231
  %233 = load float, ptr %232, align 4, !tbaa !48
  %234 = add nsw i32 %142, 129
  %235 = sext i32 %234 to i64
  %236 = getelementptr inbounds i16, ptr %130, i64 %235
  %237 = load i16, ptr %236, align 2, !tbaa !41
  %238 = sext i16 %237 to i32
  %239 = getelementptr inbounds i16, ptr %131, i64 %235
  %240 = load i16, ptr %239, align 2, !tbaa !41
  %241 = sext i16 %240 to i32
  %242 = add nsw i32 %241, %238
  %243 = sitofp i32 %242 to float
  %244 = fmul float %243, 0x3FE6A09E60000000
  %245 = fmul float %233, %244
  %246 = fsub float %229, %245
  %247 = fadd float %229, %245
  %248 = add nsw i32 %141, 65
  %249 = sext i32 %248 to i64
  %250 = getelementptr inbounds [128 x float], ptr @window_s, i64 0, i64 %249
  %251 = load float, ptr %250, align 4, !tbaa !48
  %252 = add nsw i32 %142, 65
  %253 = sext i32 %252 to i64
  %254 = getelementptr inbounds i16, ptr %130, i64 %253
  %255 = load i16, ptr %254, align 2, !tbaa !41
  %256 = sext i16 %255 to i32
  %257 = getelementptr inbounds i16, ptr %131, i64 %253
  %258 = load i16, ptr %257, align 2, !tbaa !41
  %259 = sext i16 %258 to i32
  %260 = add nsw i32 %259, %256
  %261 = sitofp i32 %260 to float
  %262 = fmul float %261, 0x3FE6A09E60000000
  %263 = fmul float %251, %262
  %264 = sub nsw i32 62, %141
  %265 = sext i32 %264 to i64
  %266 = getelementptr inbounds [128 x float], ptr @window_s, i64 0, i64 %265
  %267 = load float, ptr %266, align 4, !tbaa !48
  %268 = add nsw i32 %142, 193
  %269 = sext i32 %268 to i64
  %270 = getelementptr inbounds i16, ptr %130, i64 %269
  %271 = load i16, ptr %270, align 2, !tbaa !41
  %272 = sext i16 %271 to i32
  %273 = getelementptr inbounds i16, ptr %131, i64 %269
  %274 = load i16, ptr %273, align 2, !tbaa !41
  %275 = sext i16 %274 to i32
  %276 = add nsw i32 %275, %272
  %277 = sitofp i32 %276 to float
  %278 = fmul float %277, 0x3FE6A09E60000000
  %279 = fmul float %267, %278
  %280 = fsub float %263, %279
  %281 = fadd float %263, %279
  %282 = fadd float %247, %281
  %283 = getelementptr inbounds float, ptr %134, i64 124
  store float %282, ptr %283, align 4, !tbaa !48
  %284 = fsub float %247, %281
  %285 = getelementptr inbounds float, ptr %134, i64 126
  store float %284, ptr %285, align 4, !tbaa !48
  %286 = fadd float %246, %280
  %287 = getelementptr inbounds float, ptr %134, i64 125
  store float %286, ptr %287, align 4, !tbaa !48
  %288 = fsub float %246, %280
  %289 = getelementptr inbounds float, ptr %134, i64 127
  store float %288, ptr %289, align 4, !tbaa !48
  %290 = add nsw i64 %133, -1
  %291 = icmp eq i64 %133, 0
  br i1 %291, label %452, label %132, !llvm.loop !51

292:                                              ; preds = %292, %129
  %293 = phi i64 [ %450, %292 ], [ 31, %129 ]
  %294 = phi ptr [ %366, %292 ], [ %11, %129 ]
  %295 = shl nuw nsw i64 %293, 2
  %296 = getelementptr inbounds [128 x i16], ptr @rv_tbl, i64 0, i64 %295
  %297 = load i16, ptr %296, align 8, !tbaa !41
  %298 = sext i16 %297 to i64
  %299 = getelementptr inbounds [128 x float], ptr @window_s, i64 0, i64 %298
  %300 = load float, ptr %299, align 4, !tbaa !48
  %301 = sext i16 %297 to i32
  %302 = add nsw i32 %14, %301
  %303 = sext i32 %302 to i64
  %304 = getelementptr inbounds i16, ptr %130, i64 %303
  %305 = load i16, ptr %304, align 2, !tbaa !41
  %306 = sext i16 %305 to i32
  %307 = getelementptr inbounds i16, ptr %131, i64 %303
  %308 = load i16, ptr %307, align 2, !tbaa !41
  %309 = sext i16 %308 to i32
  %310 = sub nsw i32 %306, %309
  %311 = sitofp i32 %310 to float
  %312 = fmul float %311, 0x3FE6A09E60000000
  %313 = fmul float %300, %312
  %314 = sub nsw i32 127, %301
  %315 = sext i32 %314 to i64
  %316 = getelementptr inbounds [128 x float], ptr @window_s, i64 0, i64 %315
  %317 = load float, ptr %316, align 4, !tbaa !48
  %318 = add nsw i32 %302, 128
  %319 = sext i32 %318 to i64
  %320 = getelementptr inbounds i16, ptr %130, i64 %319
  %321 = load i16, ptr %320, align 2, !tbaa !41
  %322 = sext i16 %321 to i32
  %323 = getelementptr inbounds i16, ptr %131, i64 %319
  %324 = load i16, ptr %323, align 2, !tbaa !41
  %325 = sext i16 %324 to i32
  %326 = sub nsw i32 %322, %325
  %327 = sitofp i32 %326 to float
  %328 = fmul float %327, 0x3FE6A09E60000000
  %329 = fmul float %317, %328
  %330 = fsub float %313, %329
  %331 = fadd float %313, %329
  %332 = add nsw i32 %301, 64
  %333 = sext i32 %332 to i64
  %334 = getelementptr inbounds [128 x float], ptr @window_s, i64 0, i64 %333
  %335 = load float, ptr %334, align 4, !tbaa !48
  %336 = add nsw i32 %302, 64
  %337 = sext i32 %336 to i64
  %338 = getelementptr inbounds i16, ptr %130, i64 %337
  %339 = load i16, ptr %338, align 2, !tbaa !41
  %340 = sext i16 %339 to i32
  %341 = getelementptr inbounds i16, ptr %131, i64 %337
  %342 = load i16, ptr %341, align 2, !tbaa !41
  %343 = sext i16 %342 to i32
  %344 = sub nsw i32 %340, %343
  %345 = sitofp i32 %344 to float
  %346 = fmul float %345, 0x3FE6A09E60000000
  %347 = fmul float %335, %346
  %348 = sub nsw i32 63, %301
  %349 = sext i32 %348 to i64
  %350 = getelementptr inbounds [128 x float], ptr @window_s, i64 0, i64 %349
  %351 = load float, ptr %350, align 4, !tbaa !48
  %352 = add nsw i32 %302, 192
  %353 = sext i32 %352 to i64
  %354 = getelementptr inbounds i16, ptr %130, i64 %353
  %355 = load i16, ptr %354, align 2, !tbaa !41
  %356 = sext i16 %355 to i32
  %357 = getelementptr inbounds i16, ptr %131, i64 %353
  %358 = load i16, ptr %357, align 2, !tbaa !41
  %359 = sext i16 %358 to i32
  %360 = sub nsw i32 %356, %359
  %361 = sitofp i32 %360 to float
  %362 = fmul float %361, 0x3FE6A09E60000000
  %363 = fmul float %351, %362
  %364 = fsub float %347, %363
  %365 = fadd float %347, %363
  %366 = getelementptr inbounds float, ptr %294, i64 -4
  %367 = fadd float %331, %365
  store float %367, ptr %366, align 4, !tbaa !48
  %368 = fsub float %331, %365
  %369 = getelementptr inbounds float, ptr %294, i64 -2
  store float %368, ptr %369, align 4, !tbaa !48
  %370 = fadd float %330, %364
  %371 = getelementptr inbounds float, ptr %294, i64 -3
  store float %370, ptr %371, align 4, !tbaa !48
  %372 = fsub float %330, %364
  %373 = getelementptr inbounds float, ptr %294, i64 -1
  store float %372, ptr %373, align 4, !tbaa !48
  %374 = add nsw i32 %301, 1
  %375 = sext i32 %374 to i64
  %376 = getelementptr inbounds [128 x float], ptr @window_s, i64 0, i64 %375
  %377 = load float, ptr %376, align 4, !tbaa !48
  %378 = add nsw i32 %302, 1
  %379 = sext i32 %378 to i64
  %380 = getelementptr inbounds i16, ptr %130, i64 %379
  %381 = load i16, ptr %380, align 2, !tbaa !41
  %382 = sext i16 %381 to i32
  %383 = getelementptr inbounds i16, ptr %131, i64 %379
  %384 = load i16, ptr %383, align 2, !tbaa !41
  %385 = sext i16 %384 to i32
  %386 = sub nsw i32 %382, %385
  %387 = sitofp i32 %386 to float
  %388 = fmul float %387, 0x3FE6A09E60000000
  %389 = fmul float %377, %388
  %390 = sub nsw i32 126, %301
  %391 = sext i32 %390 to i64
  %392 = getelementptr inbounds [128 x float], ptr @window_s, i64 0, i64 %391
  %393 = load float, ptr %392, align 4, !tbaa !48
  %394 = add nsw i32 %302, 129
  %395 = sext i32 %394 to i64
  %396 = getelementptr inbounds i16, ptr %130, i64 %395
  %397 = load i16, ptr %396, align 2, !tbaa !41
  %398 = sext i16 %397 to i32
  %399 = getelementptr inbounds i16, ptr %131, i64 %395
  %400 = load i16, ptr %399, align 2, !tbaa !41
  %401 = sext i16 %400 to i32
  %402 = sub nsw i32 %398, %401
  %403 = sitofp i32 %402 to float
  %404 = fmul float %403, 0x3FE6A09E60000000
  %405 = fmul float %393, %404
  %406 = fsub float %389, %405
  %407 = fadd float %389, %405
  %408 = add nsw i32 %301, 65
  %409 = sext i32 %408 to i64
  %410 = getelementptr inbounds [128 x float], ptr @window_s, i64 0, i64 %409
  %411 = load float, ptr %410, align 4, !tbaa !48
  %412 = add nsw i32 %302, 65
  %413 = sext i32 %412 to i64
  %414 = getelementptr inbounds i16, ptr %130, i64 %413
  %415 = load i16, ptr %414, align 2, !tbaa !41
  %416 = sext i16 %415 to i32
  %417 = getelementptr inbounds i16, ptr %131, i64 %413
  %418 = load i16, ptr %417, align 2, !tbaa !41
  %419 = sext i16 %418 to i32
  %420 = sub nsw i32 %416, %419
  %421 = sitofp i32 %420 to float
  %422 = fmul float %421, 0x3FE6A09E60000000
  %423 = fmul float %411, %422
  %424 = sub nsw i32 62, %301
  %425 = sext i32 %424 to i64
  %426 = getelementptr inbounds [128 x float], ptr @window_s, i64 0, i64 %425
  %427 = load float, ptr %426, align 4, !tbaa !48
  %428 = add nsw i32 %302, 193
  %429 = sext i32 %428 to i64
  %430 = getelementptr inbounds i16, ptr %130, i64 %429
  %431 = load i16, ptr %430, align 2, !tbaa !41
  %432 = sext i16 %431 to i32
  %433 = getelementptr inbounds i16, ptr %131, i64 %429
  %434 = load i16, ptr %433, align 2, !tbaa !41
  %435 = sext i16 %434 to i32
  %436 = sub nsw i32 %432, %435
  %437 = sitofp i32 %436 to float
  %438 = fmul float %437, 0x3FE6A09E60000000
  %439 = fmul float %427, %438
  %440 = fsub float %423, %439
  %441 = fadd float %423, %439
  %442 = fadd float %407, %441
  %443 = getelementptr inbounds float, ptr %294, i64 124
  store float %442, ptr %443, align 4, !tbaa !48
  %444 = fsub float %407, %441
  %445 = getelementptr inbounds float, ptr %294, i64 126
  store float %444, ptr %445, align 4, !tbaa !48
  %446 = fadd float %406, %440
  %447 = getelementptr inbounds float, ptr %294, i64 125
  store float %446, ptr %447, align 4, !tbaa !48
  %448 = fsub float %406, %440
  %449 = getelementptr inbounds float, ptr %294, i64 127
  store float %448, ptr %449, align 4, !tbaa !48
  %450 = add nsw i64 %293, -1
  %451 = icmp eq i64 %293, 0
  br i1 %451, label %452, label %292, !llvm.loop !52

452:                                              ; preds = %292, %132, %17
  %453 = phi ptr [ %67, %17 ], [ %206, %132 ], [ %366, %292 ]
  tail call fastcc void @fht(ptr noundef nonnull %453, i16 noundef signext 256) #57
  %454 = add nuw nsw i64 %10, 1
  %455 = icmp eq i64 %454, 3
  br i1 %455, label %456, label %9, !llvm.loop !53

456:                                              ; preds = %452
  ret void
}

; Function Attrs: inlinehint nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal fastcc void @fht(ptr noundef %0, i16 noundef signext %1) unnamed_addr #16 {
  %3 = zext i16 %1 to i32
  %4 = zext i16 %1 to i64
  %5 = getelementptr inbounds float, ptr %0, i64 %4
  br label %6

6:                                                ; preds = %144, %2
  %7 = phi ptr [ @costab, %2 ], [ %145, %144 ]
  %8 = phi i16 [ 4, %2 ], [ %12, %144 ]
  %9 = ashr exact i16 %8, 1
  %10 = shl i16 %8, 1
  %11 = mul i16 %8, 3
  %12 = shl i16 %8, 2
  %13 = sext i16 %9 to i64
  %14 = getelementptr inbounds float, ptr %0, i64 %13
  %15 = sext i16 %8 to i64
  %16 = sext i16 %10 to i64
  %17 = sext i16 %11 to i64
  %18 = sext i16 %12 to i64
  br label %19

19:                                               ; preds = %19, %6
  %20 = phi ptr [ %14, %6 ], [ %56, %19 ]
  %21 = phi ptr [ %0, %6 ], [ %57, %19 ]
  %22 = load float, ptr %21, align 4, !tbaa !48
  %23 = getelementptr inbounds float, ptr %21, i64 %15
  %24 = load float, ptr %23, align 4, !tbaa !48
  %25 = fsub float %22, %24
  %26 = fadd float %22, %24
  %27 = getelementptr inbounds float, ptr %21, i64 %16
  %28 = load float, ptr %27, align 4, !tbaa !48
  %29 = getelementptr inbounds float, ptr %21, i64 %17
  %30 = load float, ptr %29, align 4, !tbaa !48
  %31 = fsub float %28, %30
  %32 = fadd float %28, %30
  %33 = fsub float %26, %32
  store float %33, ptr %27, align 4, !tbaa !48
  %34 = fadd float %26, %32
  store float %34, ptr %21, align 4, !tbaa !48
  %35 = fsub float %25, %31
  store float %35, ptr %29, align 4, !tbaa !48
  %36 = fadd float %25, %31
  store float %36, ptr %23, align 4, !tbaa !48
  %37 = load float, ptr %20, align 4, !tbaa !48
  %38 = getelementptr inbounds float, ptr %20, i64 %15
  %39 = load float, ptr %38, align 4, !tbaa !48
  %40 = fsub float %37, %39
  %41 = fadd float %37, %39
  %42 = getelementptr inbounds float, ptr %20, i64 %17
  %43 = load float, ptr %42, align 4, !tbaa !48
  %44 = fpext float %43 to double
  %45 = fmul double %44, 0x3FF6A09E667F3BCD
  %46 = fptrunc double %45 to float
  %47 = getelementptr inbounds float, ptr %20, i64 %16
  %48 = load float, ptr %47, align 4, !tbaa !48
  %49 = fpext float %48 to double
  %50 = fmul double %49, 0x3FF6A09E667F3BCD
  %51 = fptrunc double %50 to float
  %52 = fsub float %41, %51
  store float %52, ptr %47, align 4, !tbaa !48
  %53 = fadd float %41, %51
  store float %53, ptr %20, align 4, !tbaa !48
  %54 = fsub float %40, %46
  store float %54, ptr %42, align 4, !tbaa !48
  %55 = fadd float %40, %46
  store float %55, ptr %38, align 4, !tbaa !48
  %56 = getelementptr inbounds float, ptr %20, i64 %18
  %57 = getelementptr inbounds float, ptr %21, i64 %18
  %58 = icmp ult ptr %57, %5
  br i1 %58, label %19, label %59, !llvm.loop !54

59:                                               ; preds = %19
  %60 = sext i16 %12 to i32
  %61 = icmp sgt i16 %8, 2
  br i1 %61, label %62, label %144

62:                                               ; preds = %59
  %63 = load <2 x float>, ptr %7, align 4, !tbaa !48
  %64 = getelementptr inbounds float, ptr %0, i64 %15
  %65 = tail call i16 @llvm.smax.i16(i16 %9, i16 2)
  %66 = zext i16 %65 to i64
  br label %67

67:                                               ; preds = %134, %62
  %68 = phi i64 [ 1, %62 ], [ %142, %134 ]
  %69 = phi <2 x float> [ %63, %62 ], [ %141, %134 ]
  %70 = extractelement <2 x float> %69, i64 1
  %71 = fmul float %70, 2.000000e+00
  %72 = fneg float %71
  %73 = tail call float @llvm.fmuladd.f32(float %72, float %70, float 1.000000e+00)
  %74 = extractelement <2 x float> %69, i64 0
  %75 = fmul float %74, %71
  %76 = getelementptr inbounds float, ptr %0, i64 %68
  %77 = sub nsw i64 0, %68
  %78 = getelementptr inbounds float, ptr %64, i64 %77
  %79 = fneg float %73
  %80 = fneg float %74
  %81 = fneg float %70
  br label %82

82:                                               ; preds = %82, %67
  %83 = phi ptr [ %78, %67 ], [ %131, %82 ]
  %84 = phi ptr [ %76, %67 ], [ %132, %82 ]
  %85 = getelementptr inbounds float, ptr %84, i64 %15
  %86 = load float, ptr %85, align 4, !tbaa !48
  %87 = getelementptr inbounds float, ptr %83, i64 %15
  %88 = load float, ptr %87, align 4, !tbaa !48
  %89 = fmul float %88, %79
  %90 = tail call float @llvm.fmuladd.f32(float %75, float %86, float %89)
  %91 = fmul float %75, %88
  %92 = tail call float @llvm.fmuladd.f32(float %73, float %86, float %91)
  %93 = load float, ptr %84, align 4, !tbaa !48
  %94 = fsub float %93, %92
  %95 = fadd float %93, %92
  %96 = load float, ptr %83, align 4, !tbaa !48
  %97 = fsub float %96, %90
  %98 = fadd float %96, %90
  %99 = getelementptr inbounds float, ptr %84, i64 %17
  %100 = load float, ptr %99, align 4, !tbaa !48
  %101 = getelementptr inbounds float, ptr %83, i64 %17
  %102 = load float, ptr %101, align 4, !tbaa !48
  %103 = fmul float %102, %79
  %104 = tail call float @llvm.fmuladd.f32(float %75, float %100, float %103)
  %105 = fmul float %75, %102
  %106 = tail call float @llvm.fmuladd.f32(float %73, float %100, float %105)
  %107 = getelementptr inbounds float, ptr %84, i64 %16
  %108 = load float, ptr %107, align 4, !tbaa !48
  %109 = fsub float %108, %106
  %110 = fadd float %108, %106
  %111 = getelementptr inbounds float, ptr %83, i64 %16
  %112 = load float, ptr %111, align 4, !tbaa !48
  %113 = fsub float %112, %104
  %114 = fadd float %112, %104
  %115 = fmul float %113, %80
  %116 = tail call float @llvm.fmuladd.f32(float %70, float %110, float %115)
  %117 = fmul float %70, %113
  %118 = tail call float @llvm.fmuladd.f32(float %74, float %110, float %117)
  %119 = fsub float %95, %118
  store float %119, ptr %107, align 4, !tbaa !48
  %120 = fadd float %95, %118
  store float %120, ptr %84, align 4, !tbaa !48
  %121 = fsub float %97, %116
  store float %121, ptr %101, align 4, !tbaa !48
  %122 = fadd float %97, %116
  store float %122, ptr %87, align 4, !tbaa !48
  %123 = fmul float %109, %81
  %124 = tail call float @llvm.fmuladd.f32(float %74, float %114, float %123)
  %125 = fmul float %74, %109
  %126 = tail call float @llvm.fmuladd.f32(float %70, float %114, float %125)
  %127 = fsub float %98, %126
  store float %127, ptr %111, align 4, !tbaa !48
  %128 = fadd float %98, %126
  store float %128, ptr %83, align 4, !tbaa !48
  %129 = fsub float %94, %124
  store float %129, ptr %99, align 4, !tbaa !48
  %130 = fadd float %94, %124
  store float %130, ptr %85, align 4, !tbaa !48
  %131 = getelementptr inbounds float, ptr %83, i64 %18
  %132 = getelementptr inbounds float, ptr %84, i64 %18
  %133 = icmp ult ptr %132, %5
  br i1 %133, label %82, label %134, !llvm.loop !55

134:                                              ; preds = %82
  %135 = load <2 x float>, ptr %7, align 4, !tbaa !48
  %136 = shufflevector <2 x float> %69, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %137 = insertelement <2 x float> %136, float %81, i64 1
  %138 = fmul <2 x float> %137, %135
  %139 = shufflevector <2 x float> %138, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  %140 = shufflevector <2 x float> %69, <2 x float> poison, <2 x i32> zeroinitializer
  %141 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %140, <2 x float> %135, <2 x float> %139)
  %142 = add nuw nsw i64 %68, 1
  %143 = icmp eq i64 %142, %66
  br i1 %143, label %144, label %67, !llvm.loop !56

144:                                              ; preds = %134, %59
  %145 = getelementptr inbounds float, ptr %7, i64 2
  %146 = icmp slt i32 %60, %3
  br i1 %146, label %6, label %147, !llvm.loop !57

147:                                              ; preds = %144
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i16 @llvm.smax.i16(i16, i16) #9

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fmuladd.f32(float, float, float) #9

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fmuladd.v2f32(<2 x float>, <2 x float>, <2 x float>) #9

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @fft_long(ptr noundef %0, i32 noundef %1, ptr nocapture noundef readonly %2) #15 {
  %4 = getelementptr inbounds float, ptr %0, i64 512
  %5 = icmp slt i32 %1, 2
  br i1 %5, label %6, label %113

6:                                                ; preds = %3
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds ptr, ptr %2, i64 %7
  %9 = load ptr, ptr %8, align 8, !tbaa !7
  br label %10

10:                                               ; preds = %10, %6
  %11 = phi i64 [ 127, %6 ], [ %111, %10 ]
  %12 = phi ptr [ %4, %6 ], [ %55, %10 ]
  %13 = getelementptr inbounds [128 x i16], ptr @rv_tbl, i64 0, i64 %11
  %14 = load i16, ptr %13, align 2, !tbaa !41
  %15 = sext i16 %14 to i64
  %16 = getelementptr inbounds [512 x float], ptr @window, i64 0, i64 %15
  %17 = load float, ptr %16, align 4, !tbaa !48
  %18 = getelementptr inbounds i16, ptr %9, i64 %15
  %19 = load i16, ptr %18, align 2, !tbaa !41
  %20 = sitofp i16 %19 to float
  %21 = fmul float %17, %20
  %22 = sext i16 %14 to i32
  %23 = sub nsw i32 511, %22
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds [512 x float], ptr @window, i64 0, i64 %24
  %26 = load float, ptr %25, align 4, !tbaa !48
  %27 = add nsw i32 %22, 512
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds i16, ptr %9, i64 %28
  %30 = load i16, ptr %29, align 2, !tbaa !41
  %31 = sitofp i16 %30 to float
  %32 = fmul float %26, %31
  %33 = fsub float %21, %32
  %34 = fadd float %21, %32
  %35 = add nsw i32 %22, 256
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds [512 x float], ptr @window, i64 0, i64 %36
  %38 = load float, ptr %37, align 4, !tbaa !48
  %39 = getelementptr inbounds i16, ptr %9, i64 %36
  %40 = load i16, ptr %39, align 2, !tbaa !41
  %41 = sitofp i16 %40 to float
  %42 = fmul float %38, %41
  %43 = sub nsw i32 255, %22
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds [512 x float], ptr @window, i64 0, i64 %44
  %46 = load float, ptr %45, align 4, !tbaa !48
  %47 = add nsw i32 %22, 768
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds i16, ptr %9, i64 %48
  %50 = load i16, ptr %49, align 2, !tbaa !41
  %51 = sitofp i16 %50 to float
  %52 = fmul float %46, %51
  %53 = fsub float %42, %52
  %54 = fadd float %42, %52
  %55 = getelementptr inbounds float, ptr %12, i64 -4
  %56 = fadd float %34, %54
  store float %56, ptr %55, align 4, !tbaa !48
  %57 = fsub float %34, %54
  %58 = getelementptr inbounds float, ptr %12, i64 -2
  store float %57, ptr %58, align 4, !tbaa !48
  %59 = fadd float %33, %53
  %60 = getelementptr inbounds float, ptr %12, i64 -3
  store float %59, ptr %60, align 4, !tbaa !48
  %61 = fsub float %33, %53
  %62 = getelementptr inbounds float, ptr %12, i64 -1
  store float %61, ptr %62, align 4, !tbaa !48
  %63 = add nsw i32 %22, 1
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds [512 x float], ptr @window, i64 0, i64 %64
  %66 = load float, ptr %65, align 4, !tbaa !48
  %67 = getelementptr inbounds i16, ptr %9, i64 %64
  %68 = load i16, ptr %67, align 2, !tbaa !41
  %69 = sitofp i16 %68 to float
  %70 = fmul float %66, %69
  %71 = sub nsw i32 510, %22
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds [512 x float], ptr @window, i64 0, i64 %72
  %74 = load float, ptr %73, align 4, !tbaa !48
  %75 = add nsw i32 %22, 513
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds i16, ptr %9, i64 %76
  %78 = load i16, ptr %77, align 2, !tbaa !41
  %79 = sitofp i16 %78 to float
  %80 = fmul float %74, %79
  %81 = fsub float %70, %80
  %82 = fadd float %70, %80
  %83 = add nsw i32 %22, 257
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds [512 x float], ptr @window, i64 0, i64 %84
  %86 = load float, ptr %85, align 4, !tbaa !48
  %87 = getelementptr inbounds i16, ptr %9, i64 %84
  %88 = load i16, ptr %87, align 2, !tbaa !41
  %89 = sitofp i16 %88 to float
  %90 = fmul float %86, %89
  %91 = sub nsw i32 254, %22
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds [512 x float], ptr @window, i64 0, i64 %92
  %94 = load float, ptr %93, align 4, !tbaa !48
  %95 = add nsw i32 %22, 769
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds i16, ptr %9, i64 %96
  %98 = load i16, ptr %97, align 2, !tbaa !41
  %99 = sitofp i16 %98 to float
  %100 = fmul float %94, %99
  %101 = fsub float %90, %100
  %102 = fadd float %90, %100
  %103 = fadd float %82, %102
  %104 = getelementptr inbounds float, ptr %12, i64 508
  store float %103, ptr %104, align 4, !tbaa !48
  %105 = fsub float %82, %102
  %106 = getelementptr inbounds float, ptr %12, i64 510
  store float %105, ptr %106, align 4, !tbaa !48
  %107 = fadd float %81, %101
  %108 = getelementptr inbounds float, ptr %12, i64 509
  store float %107, ptr %108, align 4, !tbaa !48
  %109 = fsub float %81, %101
  %110 = getelementptr inbounds float, ptr %12, i64 511
  store float %109, ptr %110, align 4, !tbaa !48
  %111 = add nsw i64 %11, -1
  %112 = icmp eq i64 %11, 0
  br i1 %112, label %420, label %10, !llvm.loop !58

113:                                              ; preds = %3
  %114 = icmp eq i32 %1, 2
  %115 = load ptr, ptr %2, align 8, !tbaa !7
  %116 = getelementptr inbounds ptr, ptr %2, i64 1
  %117 = load ptr, ptr %116, align 8, !tbaa !7
  br i1 %114, label %118, label %269

118:                                              ; preds = %118, %113
  %119 = phi i64 [ %267, %118 ], [ 127, %113 ]
  %120 = phi ptr [ %187, %118 ], [ %4, %113 ]
  %121 = getelementptr inbounds [128 x i16], ptr @rv_tbl, i64 0, i64 %119
  %122 = load i16, ptr %121, align 2, !tbaa !41
  %123 = sext i16 %122 to i64
  %124 = getelementptr inbounds [512 x float], ptr @window, i64 0, i64 %123
  %125 = load float, ptr %124, align 4, !tbaa !48
  %126 = getelementptr inbounds i16, ptr %115, i64 %123
  %127 = load i16, ptr %126, align 2, !tbaa !41
  %128 = sext i16 %127 to i32
  %129 = getelementptr inbounds i16, ptr %117, i64 %123
  %130 = load i16, ptr %129, align 2, !tbaa !41
  %131 = sext i16 %130 to i32
  %132 = add nsw i32 %131, %128
  %133 = sitofp i32 %132 to float
  %134 = fmul float %133, 0x3FE6A09E60000000
  %135 = fmul float %125, %134
  %136 = sext i16 %122 to i32
  %137 = sub nsw i32 511, %136
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds [512 x float], ptr @window, i64 0, i64 %138
  %140 = load float, ptr %139, align 4, !tbaa !48
  %141 = add nsw i32 %136, 512
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds i16, ptr %115, i64 %142
  %144 = load i16, ptr %143, align 2, !tbaa !41
  %145 = sext i16 %144 to i32
  %146 = getelementptr inbounds i16, ptr %117, i64 %142
  %147 = load i16, ptr %146, align 2, !tbaa !41
  %148 = sext i16 %147 to i32
  %149 = add nsw i32 %148, %145
  %150 = sitofp i32 %149 to float
  %151 = fmul float %150, 0x3FE6A09E60000000
  %152 = fmul float %140, %151
  %153 = fsub float %135, %152
  %154 = fadd float %135, %152
  %155 = add nsw i32 %136, 256
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds [512 x float], ptr @window, i64 0, i64 %156
  %158 = load float, ptr %157, align 4, !tbaa !48
  %159 = getelementptr inbounds i16, ptr %115, i64 %156
  %160 = load i16, ptr %159, align 2, !tbaa !41
  %161 = sext i16 %160 to i32
  %162 = getelementptr inbounds i16, ptr %117, i64 %156
  %163 = load i16, ptr %162, align 2, !tbaa !41
  %164 = sext i16 %163 to i32
  %165 = add nsw i32 %164, %161
  %166 = sitofp i32 %165 to float
  %167 = fmul float %166, 0x3FE6A09E60000000
  %168 = fmul float %158, %167
  %169 = sub nsw i32 255, %136
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds [512 x float], ptr @window, i64 0, i64 %170
  %172 = load float, ptr %171, align 4, !tbaa !48
  %173 = add nsw i32 %136, 768
  %174 = sext i32 %173 to i64
  %175 = getelementptr inbounds i16, ptr %115, i64 %174
  %176 = load i16, ptr %175, align 2, !tbaa !41
  %177 = sext i16 %176 to i32
  %178 = getelementptr inbounds i16, ptr %117, i64 %174
  %179 = load i16, ptr %178, align 2, !tbaa !41
  %180 = sext i16 %179 to i32
  %181 = add nsw i32 %180, %177
  %182 = sitofp i32 %181 to float
  %183 = fmul float %182, 0x3FE6A09E60000000
  %184 = fmul float %172, %183
  %185 = fsub float %168, %184
  %186 = fadd float %168, %184
  %187 = getelementptr inbounds float, ptr %120, i64 -4
  %188 = fadd float %154, %186
  store float %188, ptr %187, align 4, !tbaa !48
  %189 = fsub float %154, %186
  %190 = getelementptr inbounds float, ptr %120, i64 -2
  store float %189, ptr %190, align 4, !tbaa !48
  %191 = fadd float %153, %185
  %192 = getelementptr inbounds float, ptr %120, i64 -3
  store float %191, ptr %192, align 4, !tbaa !48
  %193 = fsub float %153, %185
  %194 = getelementptr inbounds float, ptr %120, i64 -1
  store float %193, ptr %194, align 4, !tbaa !48
  %195 = add nsw i32 %136, 1
  %196 = sext i32 %195 to i64
  %197 = getelementptr inbounds [512 x float], ptr @window, i64 0, i64 %196
  %198 = load float, ptr %197, align 4, !tbaa !48
  %199 = getelementptr inbounds i16, ptr %115, i64 %196
  %200 = load i16, ptr %199, align 2, !tbaa !41
  %201 = sext i16 %200 to i32
  %202 = getelementptr inbounds i16, ptr %117, i64 %196
  %203 = load i16, ptr %202, align 2, !tbaa !41
  %204 = sext i16 %203 to i32
  %205 = add nsw i32 %204, %201
  %206 = sitofp i32 %205 to float
  %207 = fmul float %206, 0x3FE6A09E60000000
  %208 = fmul float %198, %207
  %209 = sub nsw i32 510, %136
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds [512 x float], ptr @window, i64 0, i64 %210
  %212 = load float, ptr %211, align 4, !tbaa !48
  %213 = add nsw i32 %136, 513
  %214 = sext i32 %213 to i64
  %215 = getelementptr inbounds i16, ptr %115, i64 %214
  %216 = load i16, ptr %215, align 2, !tbaa !41
  %217 = sext i16 %216 to i32
  %218 = getelementptr inbounds i16, ptr %117, i64 %214
  %219 = load i16, ptr %218, align 2, !tbaa !41
  %220 = sext i16 %219 to i32
  %221 = add nsw i32 %220, %217
  %222 = sitofp i32 %221 to float
  %223 = fmul float %222, 0x3FE6A09E60000000
  %224 = fmul float %212, %223
  %225 = fsub float %208, %224
  %226 = fadd float %208, %224
  %227 = add nsw i32 %136, 257
  %228 = sext i32 %227 to i64
  %229 = getelementptr inbounds [512 x float], ptr @window, i64 0, i64 %228
  %230 = load float, ptr %229, align 4, !tbaa !48
  %231 = getelementptr inbounds i16, ptr %115, i64 %228
  %232 = load i16, ptr %231, align 2, !tbaa !41
  %233 = sext i16 %232 to i32
  %234 = getelementptr inbounds i16, ptr %117, i64 %228
  %235 = load i16, ptr %234, align 2, !tbaa !41
  %236 = sext i16 %235 to i32
  %237 = add nsw i32 %236, %233
  %238 = sitofp i32 %237 to float
  %239 = fmul float %238, 0x3FE6A09E60000000
  %240 = fmul float %230, %239
  %241 = sub nsw i32 254, %136
  %242 = sext i32 %241 to i64
  %243 = getelementptr inbounds [512 x float], ptr @window, i64 0, i64 %242
  %244 = load float, ptr %243, align 4, !tbaa !48
  %245 = add nsw i32 %136, 769
  %246 = sext i32 %245 to i64
  %247 = getelementptr inbounds i16, ptr %115, i64 %246
  %248 = load i16, ptr %247, align 2, !tbaa !41
  %249 = sext i16 %248 to i32
  %250 = getelementptr inbounds i16, ptr %117, i64 %246
  %251 = load i16, ptr %250, align 2, !tbaa !41
  %252 = sext i16 %251 to i32
  %253 = add nsw i32 %252, %249
  %254 = sitofp i32 %253 to float
  %255 = fmul float %254, 0x3FE6A09E60000000
  %256 = fmul float %244, %255
  %257 = fsub float %240, %256
  %258 = fadd float %240, %256
  %259 = fadd float %226, %258
  %260 = getelementptr inbounds float, ptr %120, i64 508
  store float %259, ptr %260, align 4, !tbaa !48
  %261 = fsub float %226, %258
  %262 = getelementptr inbounds float, ptr %120, i64 510
  store float %261, ptr %262, align 4, !tbaa !48
  %263 = fadd float %225, %257
  %264 = getelementptr inbounds float, ptr %120, i64 509
  store float %263, ptr %264, align 4, !tbaa !48
  %265 = fsub float %225, %257
  %266 = getelementptr inbounds float, ptr %120, i64 511
  store float %265, ptr %266, align 4, !tbaa !48
  %267 = add nsw i64 %119, -1
  %268 = icmp eq i64 %119, 0
  br i1 %268, label %420, label %118, !llvm.loop !59

269:                                              ; preds = %269, %113
  %270 = phi i64 [ %418, %269 ], [ 127, %113 ]
  %271 = phi ptr [ %338, %269 ], [ %4, %113 ]
  %272 = getelementptr inbounds [128 x i16], ptr @rv_tbl, i64 0, i64 %270
  %273 = load i16, ptr %272, align 2, !tbaa !41
  %274 = sext i16 %273 to i64
  %275 = getelementptr inbounds [512 x float], ptr @window, i64 0, i64 %274
  %276 = load float, ptr %275, align 4, !tbaa !48
  %277 = getelementptr inbounds i16, ptr %115, i64 %274
  %278 = load i16, ptr %277, align 2, !tbaa !41
  %279 = sext i16 %278 to i32
  %280 = getelementptr inbounds i16, ptr %117, i64 %274
  %281 = load i16, ptr %280, align 2, !tbaa !41
  %282 = sext i16 %281 to i32
  %283 = sub nsw i32 %279, %282
  %284 = sitofp i32 %283 to float
  %285 = fmul float %284, 0x3FE6A09E60000000
  %286 = fmul float %276, %285
  %287 = sext i16 %273 to i32
  %288 = sub nsw i32 511, %287
  %289 = sext i32 %288 to i64
  %290 = getelementptr inbounds [512 x float], ptr @window, i64 0, i64 %289
  %291 = load float, ptr %290, align 4, !tbaa !48
  %292 = add nsw i32 %287, 512
  %293 = sext i32 %292 to i64
  %294 = getelementptr inbounds i16, ptr %115, i64 %293
  %295 = load i16, ptr %294, align 2, !tbaa !41
  %296 = sext i16 %295 to i32
  %297 = getelementptr inbounds i16, ptr %117, i64 %293
  %298 = load i16, ptr %297, align 2, !tbaa !41
  %299 = sext i16 %298 to i32
  %300 = sub nsw i32 %296, %299
  %301 = sitofp i32 %300 to float
  %302 = fmul float %301, 0x3FE6A09E60000000
  %303 = fmul float %291, %302
  %304 = fsub float %286, %303
  %305 = fadd float %286, %303
  %306 = add nsw i32 %287, 256
  %307 = sext i32 %306 to i64
  %308 = getelementptr inbounds [512 x float], ptr @window, i64 0, i64 %307
  %309 = load float, ptr %308, align 4, !tbaa !48
  %310 = getelementptr inbounds i16, ptr %115, i64 %307
  %311 = load i16, ptr %310, align 2, !tbaa !41
  %312 = sext i16 %311 to i32
  %313 = getelementptr inbounds i16, ptr %117, i64 %307
  %314 = load i16, ptr %313, align 2, !tbaa !41
  %315 = sext i16 %314 to i32
  %316 = sub nsw i32 %312, %315
  %317 = sitofp i32 %316 to float
  %318 = fmul float %317, 0x3FE6A09E60000000
  %319 = fmul float %309, %318
  %320 = sub nsw i32 255, %287
  %321 = sext i32 %320 to i64
  %322 = getelementptr inbounds [512 x float], ptr @window, i64 0, i64 %321
  %323 = load float, ptr %322, align 4, !tbaa !48
  %324 = add nsw i32 %287, 768
  %325 = sext i32 %324 to i64
  %326 = getelementptr inbounds i16, ptr %115, i64 %325
  %327 = load i16, ptr %326, align 2, !tbaa !41
  %328 = sext i16 %327 to i32
  %329 = getelementptr inbounds i16, ptr %117, i64 %325
  %330 = load i16, ptr %329, align 2, !tbaa !41
  %331 = sext i16 %330 to i32
  %332 = sub nsw i32 %328, %331
  %333 = sitofp i32 %332 to float
  %334 = fmul float %333, 0x3FE6A09E60000000
  %335 = fmul float %323, %334
  %336 = fsub float %319, %335
  %337 = fadd float %319, %335
  %338 = getelementptr inbounds float, ptr %271, i64 -4
  %339 = fadd float %305, %337
  store float %339, ptr %338, align 4, !tbaa !48
  %340 = fsub float %305, %337
  %341 = getelementptr inbounds float, ptr %271, i64 -2
  store float %340, ptr %341, align 4, !tbaa !48
  %342 = fadd float %304, %336
  %343 = getelementptr inbounds float, ptr %271, i64 -3
  store float %342, ptr %343, align 4, !tbaa !48
  %344 = fsub float %304, %336
  %345 = getelementptr inbounds float, ptr %271, i64 -1
  store float %344, ptr %345, align 4, !tbaa !48
  %346 = add nsw i32 %287, 1
  %347 = sext i32 %346 to i64
  %348 = getelementptr inbounds [512 x float], ptr @window, i64 0, i64 %347
  %349 = load float, ptr %348, align 4, !tbaa !48
  %350 = getelementptr inbounds i16, ptr %115, i64 %347
  %351 = load i16, ptr %350, align 2, !tbaa !41
  %352 = sext i16 %351 to i32
  %353 = getelementptr inbounds i16, ptr %117, i64 %347
  %354 = load i16, ptr %353, align 2, !tbaa !41
  %355 = sext i16 %354 to i32
  %356 = sub nsw i32 %352, %355
  %357 = sitofp i32 %356 to float
  %358 = fmul float %357, 0x3FE6A09E60000000
  %359 = fmul float %349, %358
  %360 = sub nsw i32 510, %287
  %361 = sext i32 %360 to i64
  %362 = getelementptr inbounds [512 x float], ptr @window, i64 0, i64 %361
  %363 = load float, ptr %362, align 4, !tbaa !48
  %364 = add nsw i32 %287, 513
  %365 = sext i32 %364 to i64
  %366 = getelementptr inbounds i16, ptr %115, i64 %365
  %367 = load i16, ptr %366, align 2, !tbaa !41
  %368 = sext i16 %367 to i32
  %369 = getelementptr inbounds i16, ptr %117, i64 %365
  %370 = load i16, ptr %369, align 2, !tbaa !41
  %371 = sext i16 %370 to i32
  %372 = sub nsw i32 %368, %371
  %373 = sitofp i32 %372 to float
  %374 = fmul float %373, 0x3FE6A09E60000000
  %375 = fmul float %363, %374
  %376 = fsub float %359, %375
  %377 = fadd float %359, %375
  %378 = add nsw i32 %287, 257
  %379 = sext i32 %378 to i64
  %380 = getelementptr inbounds [512 x float], ptr @window, i64 0, i64 %379
  %381 = load float, ptr %380, align 4, !tbaa !48
  %382 = getelementptr inbounds i16, ptr %115, i64 %379
  %383 = load i16, ptr %382, align 2, !tbaa !41
  %384 = sext i16 %383 to i32
  %385 = getelementptr inbounds i16, ptr %117, i64 %379
  %386 = load i16, ptr %385, align 2, !tbaa !41
  %387 = sext i16 %386 to i32
  %388 = sub nsw i32 %384, %387
  %389 = sitofp i32 %388 to float
  %390 = fmul float %389, 0x3FE6A09E60000000
  %391 = fmul float %381, %390
  %392 = sub nsw i32 254, %287
  %393 = sext i32 %392 to i64
  %394 = getelementptr inbounds [512 x float], ptr @window, i64 0, i64 %393
  %395 = load float, ptr %394, align 4, !tbaa !48
  %396 = add nsw i32 %287, 769
  %397 = sext i32 %396 to i64
  %398 = getelementptr inbounds i16, ptr %115, i64 %397
  %399 = load i16, ptr %398, align 2, !tbaa !41
  %400 = sext i16 %399 to i32
  %401 = getelementptr inbounds i16, ptr %117, i64 %397
  %402 = load i16, ptr %401, align 2, !tbaa !41
  %403 = sext i16 %402 to i32
  %404 = sub nsw i32 %400, %403
  %405 = sitofp i32 %404 to float
  %406 = fmul float %405, 0x3FE6A09E60000000
  %407 = fmul float %395, %406
  %408 = fsub float %391, %407
  %409 = fadd float %391, %407
  %410 = fadd float %377, %409
  %411 = getelementptr inbounds float, ptr %271, i64 508
  store float %410, ptr %411, align 4, !tbaa !48
  %412 = fsub float %377, %409
  %413 = getelementptr inbounds float, ptr %271, i64 510
  store float %412, ptr %413, align 4, !tbaa !48
  %414 = fadd float %376, %408
  %415 = getelementptr inbounds float, ptr %271, i64 509
  store float %414, ptr %415, align 4, !tbaa !48
  %416 = fsub float %376, %408
  %417 = getelementptr inbounds float, ptr %271, i64 511
  store float %416, ptr %417, align 4, !tbaa !48
  %418 = add nsw i64 %270, -1
  %419 = icmp eq i64 %270, 0
  br i1 %419, label %420, label %269, !llvm.loop !60

420:                                              ; preds = %269, %118, %10
  tail call fastcc void @fht(ptr noundef nonnull %0, i16 noundef signext 1024) #57
  ret void
}

; Function Attrs: nofree nounwind optsize memory(write) uwtable
define internal void @init_fft() #17 {
  br label %1

1:                                                ; preds = %1, %0
  %2 = phi i64 [ 0, %0 ], [ %14, %1 ]
  %3 = phi float [ 0x3FD921FB60000000, %0 ], [ %13, %1 ]
  %4 = fpext float %3 to double
  %5 = tail call double @cos(double noundef %4) #55
  %6 = fptrunc double %5 to float
  %7 = shl nuw nsw i64 %2, 1
  %8 = getelementptr inbounds [8 x float], ptr @costab, i64 0, i64 %7
  store float %6, ptr %8, align 8, !tbaa !48
  %9 = tail call double @sin(double noundef %4) #55
  %10 = fptrunc double %9 to float
  %11 = or i64 %7, 1
  %12 = getelementptr inbounds [8 x float], ptr @costab, i64 0, i64 %11
  store float %10, ptr %12, align 4, !tbaa !48
  %13 = fmul float %3, 2.500000e-01
  %14 = add nuw nsw i64 %2, 1
  %15 = icmp eq i64 %14, 4
  br i1 %15, label %16, label %1, !llvm.loop !61

16:                                               ; preds = %16, %1
  %17 = phi i64 [ %28, %16 ], [ 0, %1 ]
  %18 = trunc i64 %17 to i32
  %19 = sitofp i32 %18 to double
  %20 = fadd double %19, 5.000000e-01
  %21 = fmul double %20, 0x401921FB54442D18
  %22 = fmul double %21, 0x3F50000000000000
  %23 = tail call double @cos(double noundef %22) #55
  %24 = fsub double 1.000000e+00, %23
  %25 = fmul double %24, 5.000000e-01
  %26 = fptrunc double %25 to float
  %27 = getelementptr inbounds [512 x float], ptr @window, i64 0, i64 %17
  store float %26, ptr %27, align 4, !tbaa !48
  %28 = add nuw nsw i64 %17, 1
  %29 = icmp eq i64 %28, 512
  br i1 %29, label %30, label %16, !llvm.loop !62

30:                                               ; preds = %30, %16
  %31 = phi i64 [ %42, %30 ], [ 0, %16 ]
  %32 = trunc i64 %31 to i32
  %33 = sitofp i32 %32 to double
  %34 = fadd double %33, 5.000000e-01
  %35 = fmul double %34, 0x401921FB54442D18
  %36 = fmul double %35, 3.906250e-03
  %37 = tail call double @cos(double noundef %36) #55
  %38 = fsub double 1.000000e+00, %37
  %39 = fmul double %38, 5.000000e-01
  %40 = fptrunc double %39 to float
  %41 = getelementptr inbounds [128 x float], ptr @window_s, i64 0, i64 %31
  store float %40, ptr %41, align 4, !tbaa !48
  %42 = add nuw nsw i64 %31, 1
  %43 = icmp eq i64 %42, 128
  br i1 %43, label %44, label %30, !llvm.loop !63

44:                                               ; preds = %30
  ret void
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write)
declare double @cos(double noundef) local_unnamed_addr #18

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write)
declare double @sin(double noundef) local_unnamed_addr #18

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(write, argmem: none, inaccessiblemem: none) uwtable
define internal void @InitFormatBitStream() #19 {
  store i32 0, ptr @BitCount, align 4, !tbaa !11
  store i32 0, ptr @ThisFrameSize, align 4, !tbaa !11
  store i32 0, ptr @BitsRemaining, align 4, !tbaa !11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @BF_BitstreamFrame(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1) #4 {
  %3 = load ptr, ptr @side_queue_free, align 8, !tbaa !7
  %4 = icmp eq ptr %3, null
  br i1 %4, label %5, label %65

5:                                                ; preds = %2
  %6 = tail call noalias dereferenceable_or_null(88) ptr @calloc(i64 noundef 1, i64 noundef 88) #58
  %7 = icmp eq ptr %6, null
  br i1 %7, label %8, label %11

8:                                                ; preds = %5
  %9 = load ptr, ptr @stderr, align 8, !tbaa !7
  %10 = tail call i64 @fwrite(ptr nonnull @.str.9, i64 30, i64 1, ptr %9) #53
  tail call void @exit(i32 noundef 1) #54
  unreachable

11:                                               ; preds = %5
  %12 = getelementptr inbounds %struct.BF_FrameData, ptr %0, i64 0, i32 3
  %13 = load ptr, ptr %12, align 8, !tbaa !64
  %14 = load i32, ptr %13, align 8, !tbaa !66
  %15 = tail call ptr @BF_newPartHolder(i32 noundef %14) #57
  %16 = getelementptr inbounds %struct.side_info_link, ptr %6, i64 0, i32 1, i32 4
  store ptr %15, ptr %16, align 8, !tbaa !68
  %17 = getelementptr inbounds %struct.BF_FrameData, ptr %0, i64 0, i32 4
  %18 = load ptr, ptr %17, align 8, !tbaa !71
  %19 = load i32, ptr %18, align 8, !tbaa !66
  %20 = tail call ptr @BF_newPartHolder(i32 noundef %19) #57
  %21 = getelementptr inbounds %struct.side_info_link, ptr %6, i64 0, i32 1, i32 5
  store ptr %20, ptr %21, align 8, !tbaa !72
  %22 = getelementptr inbounds %struct.BF_FrameData, ptr %0, i64 0, i32 2
  %23 = load i32, ptr %22, align 8, !tbaa !73
  %24 = icmp sgt i32 %23, 0
  br i1 %24, label %30, label %25

25:                                               ; preds = %30, %11
  %26 = phi i32 [ %23, %11 ], [ %38, %30 ]
  %27 = getelementptr inbounds %struct.BF_FrameData, ptr %0, i64 0, i32 1
  %28 = load i32, ptr %27, align 4, !tbaa !74
  %29 = icmp sgt i32 %28, 0
  br i1 %29, label %41, label %71

30:                                               ; preds = %30, %11
  %31 = phi i64 [ %37, %30 ], [ 0, %11 ]
  %32 = getelementptr inbounds %struct.BF_FrameData, ptr %0, i64 0, i32 5, i64 %31
  %33 = load ptr, ptr %32, align 8, !tbaa !7
  %34 = load i32, ptr %33, align 8, !tbaa !66
  %35 = tail call ptr @BF_newPartHolder(i32 noundef %34) #57
  %36 = getelementptr inbounds %struct.side_info_link, ptr %6, i64 0, i32 1, i32 6, i64 %31
  store ptr %35, ptr %36, align 8, !tbaa !7
  %37 = add nuw nsw i64 %31, 1
  %38 = load i32, ptr %22, align 8, !tbaa !73
  %39 = sext i32 %38 to i64
  %40 = icmp slt i64 %37, %39
  br i1 %40, label %30, label %25, !llvm.loop !75

41:                                               ; preds = %59, %25
  %42 = phi i32 [ %60, %59 ], [ %28, %25 ]
  %43 = phi i32 [ %61, %59 ], [ %26, %25 ]
  %44 = phi i64 [ %62, %59 ], [ 0, %25 ]
  %45 = icmp sgt i32 %43, 0
  br i1 %45, label %46, label %59

46:                                               ; preds = %46, %41
  %47 = phi i64 [ %53, %46 ], [ 0, %41 ]
  %48 = getelementptr inbounds %struct.BF_FrameData, ptr %0, i64 0, i32 6, i64 %44, i64 %47
  %49 = load ptr, ptr %48, align 8, !tbaa !7
  %50 = load i32, ptr %49, align 8, !tbaa !66
  %51 = tail call ptr @BF_newPartHolder(i32 noundef %50) #57
  %52 = getelementptr inbounds %struct.side_info_link, ptr %6, i64 0, i32 1, i32 7, i64 %44, i64 %47
  store ptr %51, ptr %52, align 8, !tbaa !7
  %53 = add nuw nsw i64 %47, 1
  %54 = load i32, ptr %22, align 8, !tbaa !73
  %55 = sext i32 %54 to i64
  %56 = icmp slt i64 %53, %55
  br i1 %56, label %46, label %57, !llvm.loop !76

57:                                               ; preds = %46
  %.lcssa7 = phi i32 [ %54, %46 ]
  %58 = load i32, ptr %27, align 4, !tbaa !74
  br label %59

59:                                               ; preds = %57, %41
  %60 = phi i32 [ %58, %57 ], [ %42, %41 ]
  %61 = phi i32 [ %.lcssa7, %57 ], [ %43, %41 ]
  %62 = add nuw nsw i64 %44, 1
  %63 = sext i32 %60 to i64
  %64 = icmp slt i64 %62, %63
  br i1 %64, label %41, label %71, !llvm.loop !77

65:                                               ; preds = %2
  %66 = load ptr, ptr %3, align 8, !tbaa !78
  store ptr %66, ptr @side_queue_free, align 8, !tbaa !7
  store ptr null, ptr %3, align 8, !tbaa !78
  %67 = getelementptr inbounds %struct.BF_FrameData, ptr %0, i64 0, i32 1
  %68 = load i32, ptr %67, align 4, !tbaa !74
  %69 = getelementptr inbounds %struct.BF_FrameData, ptr %0, i64 0, i32 2
  %70 = load i32, ptr %69, align 8, !tbaa !73
  br label %71

71:                                               ; preds = %65, %59, %25
  %72 = phi i32 [ %70, %65 ], [ %26, %25 ], [ %61, %59 ]
  %73 = phi i32 [ %68, %65 ], [ %28, %25 ], [ %60, %59 ]
  %74 = phi ptr [ %3, %65 ], [ %6, %25 ], [ %6, %59 ]
  %75 = load i32, ptr %0, align 8, !tbaa !79
  %76 = getelementptr inbounds %struct.side_info_link, ptr %74, i64 0, i32 1
  store i32 %75, ptr %76, align 8, !tbaa !80
  %77 = getelementptr inbounds %struct.BF_FrameData, ptr %0, i64 0, i32 1
  %78 = getelementptr inbounds %struct.side_info_link, ptr %74, i64 0, i32 1, i32 2
  store i32 %73, ptr %78, align 8, !tbaa !81
  %79 = getelementptr inbounds %struct.BF_FrameData, ptr %0, i64 0, i32 2
  %80 = getelementptr inbounds %struct.side_info_link, ptr %74, i64 0, i32 1, i32 3
  store i32 %72, ptr %80, align 4, !tbaa !82
  %81 = getelementptr inbounds %struct.side_info_link, ptr %74, i64 0, i32 1, i32 4
  %82 = load ptr, ptr %81, align 8, !tbaa !68
  %83 = getelementptr inbounds %struct.BF_FrameData, ptr %0, i64 0, i32 3
  %84 = load ptr, ptr %83, align 8, !tbaa !64
  %85 = tail call ptr @BF_LoadHolderFromBitstreamPart(ptr noundef %82, ptr noundef %84) #57
  store ptr %85, ptr %81, align 8, !tbaa !68
  %86 = getelementptr inbounds %struct.side_info_link, ptr %74, i64 0, i32 1, i32 5
  %87 = load ptr, ptr %86, align 8, !tbaa !72
  %88 = getelementptr inbounds %struct.BF_FrameData, ptr %0, i64 0, i32 4
  %89 = load ptr, ptr %88, align 8, !tbaa !71
  %90 = tail call ptr @BF_LoadHolderFromBitstreamPart(ptr noundef %87, ptr noundef %89) #57
  store ptr %90, ptr %86, align 8, !tbaa !72
  %91 = load ptr, ptr %83, align 8, !tbaa !64
  %92 = load i32, ptr %91, align 8, !tbaa !66
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %108, label %94

94:                                               ; preds = %71
  %95 = getelementptr inbounds %struct.BF_BitstreamPart, ptr %91, i64 0, i32 1
  %96 = load ptr, ptr %95, align 8, !tbaa !83
  br label %97

97:                                               ; preds = %97, %94
  %98 = phi i32 [ %104, %97 ], [ 0, %94 ]
  %99 = phi i32 [ %105, %97 ], [ 0, %94 ]
  %100 = phi ptr [ %106, %97 ], [ %96, %94 ]
  %101 = getelementptr inbounds %struct.BF_BitstreamElement, ptr %100, i64 0, i32 1
  %102 = load i16, ptr %101, align 4, !tbaa !84
  %103 = zext i16 %102 to i32
  %104 = add nuw nsw i32 %98, %103
  %105 = add nuw i32 %99, 1
  %106 = getelementptr inbounds %struct.BF_BitstreamElement, ptr %100, i64 1
  %107 = icmp eq i32 %105, %92
  br i1 %107, label %108, label %97, !llvm.loop !86

108:                                              ; preds = %97, %71
  %109 = phi i32 [ 0, %71 ], [ %104, %97 ]
  %110 = load ptr, ptr %88, align 8, !tbaa !71
  %111 = load i32, ptr %110, align 8, !tbaa !66
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %127, label %113

113:                                              ; preds = %108
  %114 = getelementptr inbounds %struct.BF_BitstreamPart, ptr %110, i64 0, i32 1
  %115 = load ptr, ptr %114, align 8, !tbaa !83
  br label %116

116:                                              ; preds = %116, %113
  %117 = phi i32 [ %123, %116 ], [ 0, %113 ]
  %118 = phi i32 [ %124, %116 ], [ 0, %113 ]
  %119 = phi ptr [ %125, %116 ], [ %115, %113 ]
  %120 = getelementptr inbounds %struct.BF_BitstreamElement, ptr %119, i64 0, i32 1
  %121 = load i16, ptr %120, align 4, !tbaa !84
  %122 = zext i16 %121 to i32
  %123 = add nuw nsw i32 %117, %122
  %124 = add nuw i32 %118, 1
  %125 = getelementptr inbounds %struct.BF_BitstreamElement, ptr %119, i64 1
  %126 = icmp eq i32 %124, %111
  br i1 %126, label %127, label %116, !llvm.loop !86

127:                                              ; preds = %116, %108
  %128 = phi i32 [ 0, %108 ], [ %123, %116 ]
  %129 = add nsw i32 %128, %109
  %130 = load i32, ptr %79, align 8, !tbaa !73
  %131 = icmp sgt i32 %130, 0
  br i1 %131, label %137, label %132

132:                                              ; preds = %162, %127
  %133 = phi i32 [ %130, %127 ], [ %166, %162 ]
  %134 = phi i32 [ %129, %127 ], [ %164, %162 ]
  %135 = load i32, ptr %77, align 4, !tbaa !74
  %136 = icmp sgt i32 %135, 0
  br i1 %136, label %169, label %216

137:                                              ; preds = %162, %127
  %138 = phi i64 [ %165, %162 ], [ 0, %127 ]
  %139 = phi i32 [ %164, %162 ], [ %129, %127 ]
  %140 = getelementptr inbounds %struct.side_info_link, ptr %74, i64 0, i32 1, i32 6, i64 %138
  %141 = load ptr, ptr %140, align 8, !tbaa !7
  %142 = getelementptr inbounds %struct.BF_FrameData, ptr %0, i64 0, i32 5, i64 %138
  %143 = load ptr, ptr %142, align 8, !tbaa !7
  %144 = tail call ptr @BF_LoadHolderFromBitstreamPart(ptr noundef %141, ptr noundef %143) #57
  store ptr %144, ptr %140, align 8, !tbaa !7
  %145 = load ptr, ptr %142, align 8, !tbaa !7
  %146 = load i32, ptr %145, align 8, !tbaa !66
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %162, label %148

148:                                              ; preds = %137
  %149 = getelementptr inbounds %struct.BF_BitstreamPart, ptr %145, i64 0, i32 1
  %150 = load ptr, ptr %149, align 8, !tbaa !83
  br label %151

151:                                              ; preds = %151, %148
  %152 = phi i32 [ %158, %151 ], [ 0, %148 ]
  %153 = phi i32 [ %159, %151 ], [ 0, %148 ]
  %154 = phi ptr [ %160, %151 ], [ %150, %148 ]
  %155 = getelementptr inbounds %struct.BF_BitstreamElement, ptr %154, i64 0, i32 1
  %156 = load i16, ptr %155, align 4, !tbaa !84
  %157 = zext i16 %156 to i32
  %158 = add nuw nsw i32 %152, %157
  %159 = add nuw i32 %153, 1
  %160 = getelementptr inbounds %struct.BF_BitstreamElement, ptr %154, i64 1
  %161 = icmp eq i32 %159, %146
  br i1 %161, label %162, label %151, !llvm.loop !86

162:                                              ; preds = %151, %137
  %163 = phi i32 [ 0, %137 ], [ %158, %151 ]
  %164 = add nsw i32 %163, %139
  %165 = add nuw nsw i64 %138, 1
  %166 = load i32, ptr %79, align 8, !tbaa !73
  %167 = sext i32 %166 to i64
  %168 = icmp slt i64 %165, %167
  br i1 %168, label %137, label %132, !llvm.loop !87

169:                                              ; preds = %209, %132
  %170 = phi i32 [ %210, %209 ], [ %135, %132 ]
  %171 = phi i32 [ %211, %209 ], [ %133, %132 ]
  %172 = phi i64 [ %213, %209 ], [ 0, %132 ]
  %173 = phi i32 [ %212, %209 ], [ %134, %132 ]
  %174 = icmp sgt i32 %171, 0
  br i1 %174, label %175, label %209

175:                                              ; preds = %200, %169
  %176 = phi i64 [ %203, %200 ], [ 0, %169 ]
  %177 = phi i32 [ %202, %200 ], [ %173, %169 ]
  %178 = getelementptr inbounds %struct.side_info_link, ptr %74, i64 0, i32 1, i32 7, i64 %172, i64 %176
  %179 = load ptr, ptr %178, align 8, !tbaa !7
  %180 = getelementptr inbounds %struct.BF_FrameData, ptr %0, i64 0, i32 6, i64 %172, i64 %176
  %181 = load ptr, ptr %180, align 8, !tbaa !7
  %182 = tail call ptr @BF_LoadHolderFromBitstreamPart(ptr noundef %179, ptr noundef %181) #57
  store ptr %182, ptr %178, align 8, !tbaa !7
  %183 = load ptr, ptr %180, align 8, !tbaa !7
  %184 = load i32, ptr %183, align 8, !tbaa !66
  %185 = icmp eq i32 %184, 0
  br i1 %185, label %200, label %186

186:                                              ; preds = %175
  %187 = getelementptr inbounds %struct.BF_BitstreamPart, ptr %183, i64 0, i32 1
  %188 = load ptr, ptr %187, align 8, !tbaa !83
  br label %189

189:                                              ; preds = %189, %186
  %190 = phi i32 [ %196, %189 ], [ 0, %186 ]
  %191 = phi i32 [ %197, %189 ], [ 0, %186 ]
  %192 = phi ptr [ %198, %189 ], [ %188, %186 ]
  %193 = getelementptr inbounds %struct.BF_BitstreamElement, ptr %192, i64 0, i32 1
  %194 = load i16, ptr %193, align 4, !tbaa !84
  %195 = zext i16 %194 to i32
  %196 = add nuw nsw i32 %190, %195
  %197 = add nuw i32 %191, 1
  %198 = getelementptr inbounds %struct.BF_BitstreamElement, ptr %192, i64 1
  %199 = icmp eq i32 %197, %184
  br i1 %199, label %200, label %189, !llvm.loop !86

200:                                              ; preds = %189, %175
  %201 = phi i32 [ 0, %175 ], [ %196, %189 ]
  %202 = add nsw i32 %201, %177
  %203 = add nuw nsw i64 %176, 1
  %204 = load i32, ptr %79, align 8, !tbaa !73
  %205 = sext i32 %204 to i64
  %206 = icmp slt i64 %203, %205
  br i1 %206, label %175, label %207, !llvm.loop !88

207:                                              ; preds = %200
  %.lcssa6 = phi i32 [ %202, %200 ]
  %.lcssa5 = phi i32 [ %204, %200 ]
  %208 = load i32, ptr %77, align 4, !tbaa !74
  br label %209

209:                                              ; preds = %207, %169
  %210 = phi i32 [ %170, %169 ], [ %208, %207 ]
  %211 = phi i32 [ %171, %169 ], [ %.lcssa5, %207 ]
  %212 = phi i32 [ %173, %169 ], [ %.lcssa6, %207 ]
  %213 = add nuw nsw i64 %172, 1
  %214 = sext i32 %210 to i64
  %215 = icmp slt i64 %213, %214
  br i1 %215, label %169, label %216, !llvm.loop !89

216:                                              ; preds = %209, %132
  %217 = phi i32 [ %133, %132 ], [ %211, %209 ]
  %218 = phi i32 [ %135, %132 ], [ %210, %209 ]
  %219 = phi i32 [ %134, %132 ], [ %212, %209 ]
  %220 = getelementptr inbounds %struct.side_info_link, ptr %74, i64 0, i32 1, i32 1
  store i32 %219, ptr %220, align 4, !tbaa !90
  %221 = load ptr, ptr @side_queue_head, align 8, !tbaa !7
  %222 = icmp eq ptr %221, null
  br i1 %222, label %227, label %223

223:                                              ; preds = %223, %216
  %224 = phi ptr [ %225, %223 ], [ %221, %216 ]
  %225 = load ptr, ptr %224, align 8, !tbaa !78
  %226 = icmp eq ptr %225, null
  br i1 %226, label %227, label %223, !llvm.loop !91

227:                                              ; preds = %223, %216
  %228 = phi ptr [ @side_queue_head, %216 ], [ %224, %223 ]
  store ptr %74, ptr %228, align 8, !tbaa !7
  store i32 %219, ptr %1, align 4, !tbaa !92
  %229 = getelementptr inbounds %struct.BF_FrameResults, ptr %1, i64 0, i32 1
  store i32 0, ptr %229, align 4, !tbaa !94
  %230 = icmp sgt i32 %218, 0
  br i1 %230, label %231, label %265

231:                                              ; preds = %258, %227
  %232 = phi i32 [ %259, %258 ], [ %218, %227 ]
  %233 = phi i32 [ %260, %258 ], [ %217, %227 ]
  %234 = phi i64 [ %262, %258 ], [ 0, %227 ]
  %235 = phi i32 [ %261, %258 ], [ 0, %227 ]
  %236 = icmp sgt i32 %233, 0
  br i1 %236, label %237, label %258

237:                                              ; preds = %237, %231
  %238 = phi i64 [ %252, %237 ], [ 0, %231 ]
  %239 = phi i32 [ %251, %237 ], [ %235, %231 ]
  %240 = getelementptr inbounds %struct.BF_FrameData, ptr %0, i64 0, i32 7, i64 %234, i64 %238
  %241 = load ptr, ptr %240, align 8, !tbaa !7
  %242 = tail call fastcc i32 @writePartMainData(ptr noundef %241) #57
  %243 = add nsw i32 %242, %239
  %244 = getelementptr inbounds %struct.BF_FrameData, ptr %0, i64 0, i32 8, i64 %234, i64 %238
  %245 = load ptr, ptr %244, align 8, !tbaa !7
  %246 = tail call fastcc i32 @writePartMainData(ptr noundef %245) #57
  %247 = add nsw i32 %243, %246
  %248 = getelementptr inbounds %struct.BF_FrameData, ptr %0, i64 0, i32 9, i64 %234, i64 %238
  %249 = load ptr, ptr %248, align 8, !tbaa !7
  %250 = tail call fastcc i32 @writePartMainData(ptr noundef %249) #57
  %251 = add nsw i32 %247, %250
  %252 = add nuw nsw i64 %238, 1
  %253 = load i32, ptr %79, align 8, !tbaa !73
  %254 = sext i32 %253 to i64
  %255 = icmp slt i64 %252, %254
  br i1 %255, label %237, label %256, !llvm.loop !95

256:                                              ; preds = %237
  %.lcssa4 = phi i32 [ %251, %237 ]
  %.lcssa3 = phi i32 [ %253, %237 ]
  %257 = load i32, ptr %77, align 4, !tbaa !74
  br label %258

258:                                              ; preds = %256, %231
  %259 = phi i32 [ %232, %231 ], [ %257, %256 ]
  %260 = phi i32 [ %233, %231 ], [ %.lcssa3, %256 ]
  %261 = phi i32 [ %235, %231 ], [ %.lcssa4, %256 ]
  %262 = add nuw nsw i64 %234, 1
  %263 = sext i32 %259 to i64
  %264 = icmp slt i64 %262, %263
  br i1 %264, label %231, label %265, !llvm.loop !96

265:                                              ; preds = %258, %227
  %266 = phi i32 [ 0, %227 ], [ %261, %258 ]
  %267 = getelementptr inbounds %struct.BF_FrameData, ptr %0, i64 0, i32 10
  %268 = load ptr, ptr %267, align 8, !tbaa !97
  %269 = tail call fastcc i32 @writePartMainData(ptr noundef %268) #57
  %270 = add nsw i32 %269, %266
  store i32 %270, ptr %229, align 4, !tbaa !94
  store i32 0, ptr @forwardFrameLength, align 4, !tbaa !11
  %271 = load ptr, ptr @side_queue_head, align 8, !tbaa !7
  %272 = icmp eq ptr %271, null
  br i1 %272, label %289, label %273

273:                                              ; preds = %273, %265
  %274 = phi ptr [ %285, %273 ], [ %271, %265 ]
  %275 = phi i32 [ %278, %273 ], [ 0, %265 ]
  %276 = phi i32 [ %284, %273 ], [ 0, %265 ]
  %277 = phi i32 [ %281, %273 ], [ 0, %265 ]
  %278 = add nuw nsw i32 %275, 1
  %279 = getelementptr inbounds %struct.side_info_link, ptr %274, i64 0, i32 1
  %280 = load i32, ptr %279, align 8, !tbaa !80
  %281 = add nsw i32 %280, %277
  %282 = getelementptr inbounds %struct.side_info_link, ptr %274, i64 0, i32 1, i32 1
  %283 = load i32, ptr %282, align 4, !tbaa !90
  %284 = add nsw i32 %283, %276
  %285 = load ptr, ptr %274, align 8, !tbaa !7
  %286 = icmp eq ptr %285, null
  br i1 %286, label %287, label %273, !llvm.loop !98

287:                                              ; preds = %273
  %.lcssa2 = phi i32 [ %278, %273 ]
  %.lcssa1 = phi i32 [ %281, %273 ]
  %.lcssa = phi i32 [ %284, %273 ]
  store i32 %.lcssa1, ptr @forwardFrameLength, align 4, !tbaa !11
  %288 = sdiv i32 %.lcssa1, 8
  br label %289

289:                                              ; preds = %287, %265
  %290 = phi i32 [ %288, %287 ], [ 0, %265 ]
  %291 = phi i32 [ %.lcssa, %287 ], [ 0, %265 ]
  %292 = phi i32 [ %.lcssa2, %287 ], [ 0, %265 ]
  store i32 %291, ptr @forwardSILength, align 4, !tbaa !11
  store i32 %292, ptr @elements, align 4, !tbaa !11
  %293 = load i32, ptr @BitsRemaining, align 4, !tbaa !11
  %294 = sdiv i32 %293, 8
  %295 = sdiv i32 %291, -8
  %296 = add nsw i32 %294, %295
  %297 = add nsw i32 %296, %290
  %298 = getelementptr inbounds %struct.BF_FrameResults, ptr %1, i64 0, i32 2
  store i32 %297, ptr %298, align 4, !tbaa !99
  ret void
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn allockind("alloc,zeroed") allocsize(0,1) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @calloc(i64 noundef, i64 noundef) local_unnamed_addr #20

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write, argmem: none, inaccessiblemem: readwrite) uwtable
define internal noalias ptr @BF_newPartHolder(i32 noundef %0) #21 {
  %2 = tail call noalias dereferenceable_or_null(16) ptr @calloc(i64 noundef 1, i64 noundef 16) #58
  store i32 %0, ptr %2, align 8, !tbaa !100
  %3 = tail call noalias dereferenceable_or_null(16) ptr @calloc(i64 noundef 1, i64 noundef 16) #58
  %4 = getelementptr inbounds %struct.BF_BitstreamPart, ptr %2, i64 0, i32 1
  store ptr %3, ptr %4, align 8, !tbaa !102
  %5 = sext i32 %0 to i64
  %6 = tail call noalias ptr @calloc(i64 noundef %5, i64 noundef 8) #58
  %7 = getelementptr inbounds %struct.BF_BitstreamPart, ptr %3, i64 0, i32 1
  store ptr %6, ptr %7, align 8, !tbaa !83
  ret ptr %2
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @BF_LoadHolderFromBitstreamPart(ptr noundef %0, ptr nocapture noundef readonly %1) #4 {
  %3 = getelementptr inbounds %struct.BF_BitstreamPart, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %3, align 8, !tbaa !102
  store i32 0, ptr %4, align 8, !tbaa !66
  %5 = load i32, ptr %1, align 8, !tbaa !66
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %19, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.BF_BitstreamPart, ptr %1, i64 0, i32 1
  br label %9

9:                                                ; preds = %9, %7
  %10 = phi i64 [ 0, %7 ], [ %15, %9 ]
  %11 = phi ptr [ %0, %7 ], [ %14, %9 ]
  %12 = load ptr, ptr %8, align 8, !tbaa !83
  %13 = getelementptr inbounds %struct.BF_BitstreamElement, ptr %12, i64 %10
  %14 = tail call ptr @BF_addElement(ptr noundef %11, ptr noundef %13) #57
  %15 = add nuw nsw i64 %10, 1
  %16 = load i32, ptr %1, align 8, !tbaa !66
  %17 = zext i32 %16 to i64
  %18 = icmp ult i64 %15, %17
  br i1 %18, label %9, label %19, !llvm.loop !103

19:                                               ; preds = %9, %2
  %20 = phi ptr [ %0, %2 ], [ %14, %9 ]
  ret ptr %20
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc i32 @writePartMainData(ptr nocapture noundef readonly %0) unnamed_addr #4 {
  %2 = load i32, ptr %0, align 8, !tbaa !66
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %22, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.BF_BitstreamPart, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8, !tbaa !83
  br label %7

7:                                                ; preds = %7, %4
  %8 = phi i32 [ %17, %7 ], [ 0, %4 ]
  %9 = phi i32 [ %18, %7 ], [ 0, %4 ]
  %10 = phi ptr [ %19, %7 ], [ %6, %4 ]
  %11 = load i32, ptr %10, align 4, !tbaa !104
  %12 = getelementptr inbounds %struct.BF_BitstreamElement, ptr %10, i64 0, i32 1
  %13 = load i16, ptr %12, align 4, !tbaa !84
  %14 = zext i16 %13 to i32
  tail call fastcc void @WriteMainDataBits(i32 noundef %11, i32 noundef %14) #57
  %15 = load i16, ptr %12, align 4, !tbaa !84
  %16 = zext i16 %15 to i32
  %17 = add nuw nsw i32 %8, %16
  %18 = add nuw i32 %9, 1
  %19 = getelementptr inbounds %struct.BF_BitstreamElement, ptr %10, i64 1
  %20 = load i32, ptr %0, align 8, !tbaa !66
  %21 = icmp ult i32 %18, %20
  br i1 %21, label %7, label %22, !llvm.loop !105

22:                                               ; preds = %7, %1
  %23 = phi i32 [ 0, %1 ], [ %17, %7 ]
  ret i32 %23
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @WriteMainDataBits(i32 noundef %0, i32 noundef %1) unnamed_addr #4 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %29, label %4

4:                                                ; preds = %2
  %5 = load i32, ptr @BitCount, align 4, !tbaa !11
  %6 = load i32, ptr @ThisFrameSize, align 4, !tbaa !11
  %7 = icmp eq i32 %5, %6
  br i1 %7, label %10, label %8

8:                                                ; preds = %4
  %9 = load i32, ptr @BitsRemaining, align 4, !tbaa !11
  br label %14

10:                                               ; preds = %4
  %11 = tail call fastcc i32 @write_side_info() #57
  store i32 %11, ptr @BitCount, align 4, !tbaa !11
  %12 = load i32, ptr @ThisFrameSize, align 4, !tbaa !11
  %13 = sub nsw i32 %12, %11
  store i32 %13, ptr @BitsRemaining, align 4, !tbaa !11
  br label %14

14:                                               ; preds = %10, %8
  %15 = phi i32 [ %9, %8 ], [ %13, %10 ]
  %16 = icmp ult i32 %15, %1
  br i1 %16, label %17, label %23

17:                                               ; preds = %14
  %18 = sub i32 %1, %15
  %19 = lshr i32 %0, %18
  tail call void @putMyBits(i32 noundef %19, i32 noundef %15) #55
  %20 = tail call fastcc i32 @write_side_info() #57
  store i32 %20, ptr @BitCount, align 4, !tbaa !11
  %21 = load i32, ptr @ThisFrameSize, align 4, !tbaa !11
  %22 = sub nsw i32 %21, %20
  store i32 %22, ptr @BitsRemaining, align 4, !tbaa !11
  br label %23

23:                                               ; preds = %17, %14
  %24 = phi i32 [ %18, %17 ], [ %1, %14 ]
  tail call void @putMyBits(i32 noundef %0, i32 noundef %24) #55
  %25 = load i32, ptr @BitCount, align 4, !tbaa !11
  %26 = add i32 %25, %24
  store i32 %26, ptr @BitCount, align 4, !tbaa !11
  %27 = load i32, ptr @BitsRemaining, align 4, !tbaa !11
  %28 = sub i32 %27, %24
  store i32 %28, ptr @BitsRemaining, align 4, !tbaa !11
  br label %29

29:                                               ; preds = %23, %2
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc i32 @write_side_info() unnamed_addr #4 {
  %1 = load ptr, ptr @side_queue_free, align 8, !tbaa !7
  %2 = load ptr, ptr @side_queue_head, align 8, !tbaa !7
  %3 = load ptr, ptr %2, align 8, !tbaa !78
  store ptr %3, ptr @side_queue_head, align 8, !tbaa !7
  store ptr %2, ptr @side_queue_free, align 8, !tbaa !7
  store ptr %1, ptr %2, align 8, !tbaa !78
  %4 = getelementptr inbounds %struct.side_info_link, ptr %2, i64 0, i32 1
  %5 = load i32, ptr %4, align 8, !tbaa !106
  store i32 %5, ptr @ThisFrameSize, align 4, !tbaa !11
  %6 = getelementptr inbounds %struct.side_info_link, ptr %2, i64 0, i32 1, i32 4
  %7 = load ptr, ptr %6, align 8, !tbaa !107
  %8 = getelementptr inbounds %struct.BF_BitstreamPart, ptr %7, i64 0, i32 1
  %9 = load ptr, ptr %8, align 8, !tbaa !102
  %10 = tail call fastcc i32 @writePartSideInfo(ptr noundef %9) #57
  %11 = getelementptr inbounds %struct.side_info_link, ptr %2, i64 0, i32 1, i32 5
  %12 = load ptr, ptr %11, align 8, !tbaa !108
  %13 = getelementptr inbounds %struct.BF_BitstreamPart, ptr %12, i64 0, i32 1
  %14 = load ptr, ptr %13, align 8, !tbaa !102
  %15 = tail call fastcc i32 @writePartSideInfo(ptr noundef %14) #57
  %16 = add nsw i32 %15, %10
  %17 = getelementptr inbounds %struct.side_info_link, ptr %2, i64 0, i32 1, i32 3
  %18 = load i32, ptr %17, align 4, !tbaa !109
  %19 = icmp sgt i32 %18, 0
  br i1 %19, label %26, label %20

20:                                               ; preds = %26, %0
  %21 = phi i32 [ %18, %0 ], [ %36, %26 ]
  %22 = phi i32 [ %16, %0 ], [ %34, %26 ]
  %23 = getelementptr inbounds %struct.side_info_link, ptr %2, i64 0, i32 1, i32 2
  %24 = load i32, ptr %23, align 8, !tbaa !110
  %25 = icmp sgt i32 %24, 0
  br i1 %25, label %39, label %67

26:                                               ; preds = %26, %0
  %27 = phi i64 [ %35, %26 ], [ 0, %0 ]
  %28 = phi i32 [ %34, %26 ], [ %16, %0 ]
  %29 = getelementptr inbounds %struct.side_info_link, ptr %2, i64 0, i32 1, i32 6, i64 %27
  %30 = load ptr, ptr %29, align 8, !tbaa !7
  %31 = getelementptr inbounds %struct.BF_BitstreamPart, ptr %30, i64 0, i32 1
  %32 = load ptr, ptr %31, align 8, !tbaa !102
  %33 = tail call fastcc i32 @writePartSideInfo(ptr noundef %32) #57
  %34 = add nsw i32 %33, %28
  %35 = add nuw nsw i64 %27, 1
  %36 = load i32, ptr %17, align 4, !tbaa !109
  %37 = sext i32 %36 to i64
  %38 = icmp slt i64 %35, %37
  br i1 %38, label %26, label %20, !llvm.loop !111

39:                                               ; preds = %60, %20
  %40 = phi i32 [ %61, %60 ], [ %24, %20 ]
  %41 = phi i32 [ %62, %60 ], [ %21, %20 ]
  %42 = phi i64 [ %64, %60 ], [ 0, %20 ]
  %43 = phi i32 [ %63, %60 ], [ %22, %20 ]
  %44 = icmp sgt i32 %41, 0
  br i1 %44, label %45, label %60

45:                                               ; preds = %45, %39
  %46 = phi i64 [ %54, %45 ], [ 0, %39 ]
  %47 = phi i32 [ %53, %45 ], [ %43, %39 ]
  %48 = getelementptr inbounds %struct.side_info_link, ptr %2, i64 0, i32 1, i32 7, i64 %42, i64 %46
  %49 = load ptr, ptr %48, align 8, !tbaa !7
  %50 = getelementptr inbounds %struct.BF_BitstreamPart, ptr %49, i64 0, i32 1
  %51 = load ptr, ptr %50, align 8, !tbaa !102
  %52 = tail call fastcc i32 @writePartSideInfo(ptr noundef %51) #57
  %53 = add nsw i32 %52, %47
  %54 = add nuw nsw i64 %46, 1
  %55 = load i32, ptr %17, align 4, !tbaa !109
  %56 = sext i32 %55 to i64
  %57 = icmp slt i64 %54, %56
  br i1 %57, label %45, label %58, !llvm.loop !112

58:                                               ; preds = %45
  %.lcssa1 = phi i32 [ %53, %45 ]
  %.lcssa = phi i32 [ %55, %45 ]
  %59 = load i32, ptr %23, align 8, !tbaa !110
  br label %60

60:                                               ; preds = %58, %39
  %61 = phi i32 [ %40, %39 ], [ %59, %58 ]
  %62 = phi i32 [ %41, %39 ], [ %.lcssa, %58 ]
  %63 = phi i32 [ %43, %39 ], [ %.lcssa1, %58 ]
  %64 = add nuw nsw i64 %42, 1
  %65 = sext i32 %61 to i64
  %66 = icmp slt i64 %64, %65
  br i1 %66, label %39, label %67, !llvm.loop !113

67:                                               ; preds = %60, %20
  %68 = phi i32 [ %22, %20 ], [ %63, %60 ]
  ret i32 %68
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc i32 @writePartSideInfo(ptr nocapture noundef readonly %0) unnamed_addr #4 {
  %2 = load i32, ptr %0, align 8, !tbaa !66
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %22, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.BF_BitstreamPart, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8, !tbaa !83
  br label %7

7:                                                ; preds = %7, %4
  %8 = phi i32 [ %17, %7 ], [ 0, %4 ]
  %9 = phi i32 [ %18, %7 ], [ 0, %4 ]
  %10 = phi ptr [ %19, %7 ], [ %6, %4 ]
  %11 = load i32, ptr %10, align 4, !tbaa !104
  %12 = getelementptr inbounds %struct.BF_BitstreamElement, ptr %10, i64 0, i32 1
  %13 = load i16, ptr %12, align 4, !tbaa !84
  %14 = zext i16 %13 to i32
  tail call void @putMyBits(i32 noundef %11, i32 noundef %14) #55
  %15 = load i16, ptr %12, align 4, !tbaa !84
  %16 = zext i16 %15 to i32
  %17 = add nuw nsw i32 %8, %16
  %18 = add nuw i32 %9, 1
  %19 = getelementptr inbounds %struct.BF_BitstreamElement, ptr %10, i64 1
  %20 = load i32, ptr %0, align 8, !tbaa !66
  %21 = icmp ult i32 %18, %20
  br i1 %21, label %7, label %22, !llvm.loop !114

22:                                               ; preds = %7, %1
  %23 = phi i32 [ 0, %1 ], [ %17, %7 ]
  ret i32 %23
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @BF_addElement(ptr noundef %0, ptr nocapture noundef readonly %1) #4 {
  %3 = getelementptr inbounds %struct.BF_BitstreamPart, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %3, align 8, !tbaa !102
  %5 = load i32, ptr %4, align 8, !tbaa !66
  %6 = add i32 %5, 1
  %7 = load i32, ptr %0, align 8, !tbaa !100
  %8 = icmp sgt i32 %6, %7
  br i1 %8, label %9, label %16

9:                                                ; preds = %2
  %10 = add i32 %5, 9
  %11 = tail call ptr @BF_resizePartHolder(ptr noundef nonnull %0, i32 noundef %10) #57
  %12 = getelementptr inbounds %struct.BF_BitstreamPart, ptr %11, i64 0, i32 1
  %13 = load ptr, ptr %12, align 8, !tbaa !102
  %14 = load i32, ptr %13, align 8, !tbaa !66
  %15 = add i32 %14, 1
  br label %16

16:                                               ; preds = %9, %2
  %17 = phi i32 [ %15, %9 ], [ %6, %2 ]
  %18 = phi i32 [ %14, %9 ], [ %5, %2 ]
  %19 = phi ptr [ %13, %9 ], [ %4, %2 ]
  %20 = phi ptr [ %11, %9 ], [ %0, %2 ]
  %21 = getelementptr inbounds %struct.BF_BitstreamPart, ptr %19, i64 0, i32 1
  %22 = load ptr, ptr %21, align 8, !tbaa !83
  store i32 %17, ptr %19, align 8, !tbaa !66
  %23 = zext i32 %18 to i64
  %24 = getelementptr inbounds %struct.BF_BitstreamElement, ptr %22, i64 %23
  %25 = load i64, ptr %1, align 4
  store i64 %25, ptr %24, align 4
  ret ptr %20
}

; Function Attrs: nounwind optsize uwtable
define internal noalias ptr @BF_resizePartHolder(ptr nocapture noundef %0, i32 noundef %1) #4 {
  %3 = tail call ptr @BF_newPartHolder(i32 noundef %1) #57
  %4 = load i32, ptr %0, align 8, !tbaa !100
  %5 = tail call i32 @llvm.smin.i32(i32 %4, i32 %1)
  %6 = getelementptr inbounds %struct.BF_BitstreamPart, ptr %3, i64 0, i32 1
  %7 = load ptr, ptr %6, align 8, !tbaa !102
  store i32 %5, ptr %7, align 8, !tbaa !66
  %8 = icmp sgt i32 %5, 0
  br i1 %8, label %9, label %24

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.BF_BitstreamPart, ptr %7, i64 0, i32 1
  %11 = getelementptr inbounds %struct.BF_BitstreamPart, ptr %0, i64 0, i32 1
  %12 = zext i32 %5 to i64
  br label %13

13:                                               ; preds = %13, %9
  %14 = phi i64 [ 0, %9 ], [ %22, %13 ]
  %15 = load ptr, ptr %10, align 8, !tbaa !83
  %16 = getelementptr inbounds %struct.BF_BitstreamElement, ptr %15, i64 %14
  %17 = load ptr, ptr %11, align 8, !tbaa !102
  %18 = getelementptr inbounds %struct.BF_BitstreamPart, ptr %17, i64 0, i32 1
  %19 = load ptr, ptr %18, align 8, !tbaa !83
  %20 = getelementptr inbounds %struct.BF_BitstreamElement, ptr %19, i64 %14
  %21 = load i64, ptr %20, align 4
  store i64 %21, ptr %16, align 4
  %22 = add nuw nsw i64 %14, 1
  %23 = icmp eq i64 %22, %12
  br i1 %23, label %24, label %13, !llvm.loop !115

24:                                               ; preds = %13, %2
  %25 = tail call ptr @BF_freePartHolder(ptr noundef nonnull %0) #57
  ret ptr %3
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #9

; Function Attrs: mustprogress nounwind optsize willreturn uwtable
define internal noalias ptr @BF_freePartHolder(ptr nocapture noundef %0) #0 {
  %2 = getelementptr inbounds %struct.BF_BitstreamPart, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !102
  %4 = getelementptr inbounds %struct.BF_BitstreamPart, ptr %3, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8, !tbaa !83
  tail call void @free(ptr noundef %5) #55
  %6 = load ptr, ptr %2, align 8, !tbaa !102
  tail call void @free(ptr noundef %6) #55
  tail call void @free(ptr noundef %0) #55
  ret ptr null
}

; Function Attrs: nounwind optsize uwtable
define internal void @BF_FlushBitstream(ptr nocapture noundef readnone %0, ptr nocapture noundef writeonly %1) #4 {
  %3 = load i32, ptr @elements, align 4, !tbaa !11
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %19, label %5

5:                                                ; preds = %2
  %6 = load i32, ptr @forwardFrameLength, align 4, !tbaa !11
  %7 = load i32, ptr @forwardSILength, align 4, !tbaa !11
  %8 = sub nsw i32 %6, %7
  %9 = add i32 %8, 31
  %10 = icmp ult i32 %9, 63
  br i1 %10, label %17, label %11

11:                                               ; preds = %5
  %12 = sdiv i32 %8, 32
  br label %13

13:                                               ; preds = %13, %11
  %14 = phi i32 [ %15, %13 ], [ %12, %11 ]
  %15 = add nsw i32 %14, -1
  tail call fastcc void @WriteMainDataBits(i32 noundef 0, i32 noundef 32) #57
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %13, !llvm.loop !116

17:                                               ; preds = %13, %5
  %18 = srem i32 %8, 32
  tail call fastcc void @WriteMainDataBits(i32 noundef 0, i32 noundef %18) #57
  br label %19

19:                                               ; preds = %17, %2
  %20 = load i32, ptr @forwardFrameLength, align 4, !tbaa !11
  %21 = load i32, ptr @forwardSILength, align 4, !tbaa !11
  %22 = sub nsw i32 %20, %21
  %23 = getelementptr inbounds %struct.BF_FrameResults, ptr %1, i64 0, i32 1
  store i32 %22, ptr %23, align 4, !tbaa !94
  store i32 %21, ptr %1, align 4, !tbaa !92
  %24 = getelementptr inbounds %struct.BF_FrameResults, ptr %1, i64 0, i32 2
  store i32 0, ptr %24, align 4, !tbaa !99
  %25 = load ptr, ptr @side_queue_head, align 8, !tbaa !7
  %26 = icmp eq ptr %25, null
  br i1 %26, label %31, label %27

27:                                               ; preds = %27, %19
  %28 = phi ptr [ %29, %27 ], [ %25, %19 ]
  %29 = load ptr, ptr %28, align 8, !tbaa !78
  tail call fastcc void @free_side_info_link(ptr noundef nonnull %28) #57
  %30 = icmp eq ptr %29, null
  br i1 %30, label %31, label %27, !llvm.loop !117

31:                                               ; preds = %27, %19
  store ptr null, ptr @side_queue_head, align 8, !tbaa !7
  %32 = load ptr, ptr @side_queue_free, align 8, !tbaa !7
  %33 = icmp eq ptr %32, null
  br i1 %33, label %38, label %34

34:                                               ; preds = %34, %31
  %35 = phi ptr [ %36, %34 ], [ %32, %31 ]
  %36 = load ptr, ptr %35, align 8, !tbaa !78
  tail call fastcc void @free_side_info_link(ptr noundef nonnull %35) #57
  %37 = icmp eq ptr %36, null
  br i1 %37, label %38, label %34, !llvm.loop !118

38:                                               ; preds = %34, %31
  store ptr null, ptr @side_queue_free, align 8, !tbaa !7
  store i32 0, ptr @BitCount, align 4, !tbaa !11
  store i32 0, ptr @ThisFrameSize, align 4, !tbaa !11
  store i32 0, ptr @BitsRemaining, align 4, !tbaa !11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @free_side_info_link(ptr nocapture noundef %0) unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.side_info_link, ptr %0, i64 0, i32 1, i32 4
  %3 = load ptr, ptr %2, align 8, !tbaa !68
  %4 = tail call ptr @BF_freePartHolder(ptr noundef %3) #57
  store ptr null, ptr %2, align 8, !tbaa !68
  %5 = getelementptr inbounds %struct.side_info_link, ptr %0, i64 0, i32 1, i32 5
  %6 = load ptr, ptr %5, align 8, !tbaa !72
  %7 = tail call ptr @BF_freePartHolder(ptr noundef %6) #57
  store ptr null, ptr %5, align 8, !tbaa !72
  %8 = getelementptr inbounds %struct.side_info_link, ptr %0, i64 0, i32 1, i32 3
  %9 = load i32, ptr %8, align 4, !tbaa !82
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %16, label %11

11:                                               ; preds = %16, %1
  %12 = phi i32 [ %9, %1 ], [ %22, %16 ]
  %13 = getelementptr inbounds %struct.side_info_link, ptr %0, i64 0, i32 1, i32 2
  %14 = load i32, ptr %13, align 8, !tbaa !81
  %15 = icmp sgt i32 %14, 0
  br i1 %15, label %25, label %47

16:                                               ; preds = %16, %1
  %17 = phi i64 [ %21, %16 ], [ 0, %1 ]
  %18 = getelementptr inbounds %struct.side_info_link, ptr %0, i64 0, i32 1, i32 6, i64 %17
  %19 = load ptr, ptr %18, align 8, !tbaa !7
  %20 = tail call ptr @BF_freePartHolder(ptr noundef %19) #57
  store ptr null, ptr %18, align 8, !tbaa !7
  %21 = add nuw nsw i64 %17, 1
  %22 = load i32, ptr %8, align 4, !tbaa !82
  %23 = sext i32 %22 to i64
  %24 = icmp slt i64 %21, %23
  br i1 %24, label %16, label %11, !llvm.loop !119

25:                                               ; preds = %41, %11
  %26 = phi i32 [ %42, %41 ], [ %14, %11 ]
  %27 = phi i32 [ %43, %41 ], [ %12, %11 ]
  %28 = phi i64 [ %44, %41 ], [ 0, %11 ]
  %29 = icmp sgt i32 %27, 0
  br i1 %29, label %30, label %41

30:                                               ; preds = %30, %25
  %31 = phi i64 [ %35, %30 ], [ 0, %25 ]
  %32 = getelementptr inbounds %struct.side_info_link, ptr %0, i64 0, i32 1, i32 7, i64 %28, i64 %31
  %33 = load ptr, ptr %32, align 8, !tbaa !7
  %34 = tail call ptr @BF_freePartHolder(ptr noundef %33) #57
  store ptr null, ptr %32, align 8, !tbaa !7
  %35 = add nuw nsw i64 %31, 1
  %36 = load i32, ptr %8, align 4, !tbaa !82
  %37 = sext i32 %36 to i64
  %38 = icmp slt i64 %35, %37
  br i1 %38, label %30, label %39, !llvm.loop !120

39:                                               ; preds = %30
  %.lcssa = phi i32 [ %36, %30 ]
  %40 = load i32, ptr %13, align 8, !tbaa !81
  br label %41

41:                                               ; preds = %39, %25
  %42 = phi i32 [ %40, %39 ], [ %26, %25 ]
  %43 = phi i32 [ %.lcssa, %39 ], [ %27, %25 ]
  %44 = add nuw nsw i64 %28, 1
  %45 = sext i32 %42 to i64
  %46 = icmp slt i64 %44, %45
  br i1 %46, label %25, label %47, !llvm.loop !121

47:                                               ; preds = %41, %11
  tail call void @free(ptr noundef nonnull %0) #55
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @BF_addEntry(ptr noundef %0, i32 noundef %1, i32 noundef %2) #4 {
  %4 = alloca %struct.BF_BitstreamElement, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #56
  store i32 %1, ptr %4, align 4, !tbaa !104
  %5 = trunc i32 %2 to i16
  %6 = getelementptr inbounds %struct.BF_BitstreamElement, ptr %4, i64 0, i32 1
  store i16 %5, ptr %6, align 4, !tbaa !84
  %7 = icmp eq i32 %2, 0
  br i1 %7, label %10, label %8

8:                                                ; preds = %3
  %9 = call ptr @BF_addElement(ptr noundef %0, ptr noundef nonnull %4) #57
  br label %10

10:                                               ; preds = %8, %3
  %11 = phi ptr [ %9, %8 ], [ %0, %3 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #56
  ret ptr %11
}

; Function Attrs: nounwind optsize uwtable
define internal void @lame_init_infile(ptr nocapture noundef %0) #4 {
  store i1 false, ptr @count_samples_carefully, align 4
  %2 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 31
  %3 = load ptr, ptr %2, align 8, !tbaa !122
  %4 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 2
  %5 = load i32, ptr %4, align 4, !tbaa !124
  %6 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 1
  %7 = load i32, ptr %6, align 8, !tbaa !125
  %8 = tail call ptr @OpenSndFile(ptr noundef %0, ptr noundef %3, i32 noundef %5, i32 noundef %7) #57
  %9 = load i32, ptr @samp_freq, align 4, !tbaa !11
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %12, label %11

11:                                               ; preds = %1
  store i32 %9, ptr %4, align 4, !tbaa !124
  br label %12

12:                                               ; preds = %11, %1
  %13 = load i32, ptr @num_channels, align 4, !tbaa !11
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %16, label %15

15:                                               ; preds = %12
  store i32 %13, ptr %6, align 8, !tbaa !125
  br label %16

16:                                               ; preds = %15, %12
  %17 = load i64, ptr @num_samples, align 8, !tbaa !36
  store i64 %17, ptr %0, align 8, !tbaa !126
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @OpenSndFile(ptr nocapture noundef %0, ptr noundef %1, i32 noundef %2, i32 noundef %3) #4 {
  %5 = alloca %struct.stat, align 8
  call void @llvm.lifetime.start.p0(i64 144, ptr nonnull %5) #56
  store i64 4294967295, ptr @num_samples, align 8, !tbaa !36
  store i32 %2, ptr @samp_freq, align 4, !tbaa !11
  store i32 %3, ptr @num_channels, align 4, !tbaa !11
  %6 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %1, ptr noundef nonnull dereferenceable(2) @.str.1.10) #59
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %10

8:                                                ; preds = %4
  %9 = load ptr, ptr @stdin, align 8, !tbaa !7
  store ptr %9, ptr @musicin, align 8, !tbaa !7
  br label %16

10:                                               ; preds = %4
  %11 = tail call noalias ptr @fopen(ptr noundef %1, ptr noundef nonnull @.str.2.11) #57
  store ptr %11, ptr @musicin, align 8, !tbaa !7
  %12 = icmp eq ptr %11, null
  br i1 %12, label %13, label %16

13:                                               ; preds = %10
  %14 = load ptr, ptr @stderr, align 8, !tbaa !7
  %15 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %14, ptr noundef nonnull @.str.3.12, ptr noundef %1) #60
  tail call void @exit(i32 noundef 1) #54
  unreachable

16:                                               ; preds = %10, %8
  %17 = phi ptr [ %11, %10 ], [ %9, %8 ]
  store i32 0, ptr @input_bitrate, align 4, !tbaa !11
  %18 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 29
  %19 = load i32, ptr %18, align 8, !tbaa !127
  switch i32 %19, label %26 [
    i32 3, label %20
    i32 4, label %29
  ]

20:                                               ; preds = %16
  %21 = tail call i32 @lame_decode_initfile(ptr noundef %17, ptr noundef nonnull @num_channels, ptr noundef nonnull @samp_freq, ptr noundef nonnull @input_bitrate, ptr noundef nonnull @num_samples) #55
  %22 = icmp eq i32 %21, -1
  br i1 %22, label %23, label %40

23:                                               ; preds = %20
  %24 = load ptr, ptr @stderr, align 8, !tbaa !7
  %25 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %24, ptr noundef nonnull @.str.4.13, ptr noundef %1) #60
  tail call void @exit(i32 noundef 1) #54
  unreachable

26:                                               ; preds = %16
  tail call void @parse_file_header(ptr noundef nonnull %0, ptr noundef %17) #57
  %27 = load i32, ptr %18, align 8, !tbaa !127
  %28 = icmp eq i32 %27, 4
  br i1 %28, label %29, label %40

29:                                               ; preds = %26, %16
  %30 = load ptr, ptr @stderr, align 8, !tbaa !7
  %31 = tail call i64 @fwrite(ptr nonnull @.str.5, i64 27, i64 1, ptr %30) #53
  %32 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 30
  %33 = load i32, ptr %32, align 4, !tbaa !128
  %34 = icmp eq i32 %33, 1
  %35 = load ptr, ptr @stderr, align 8, !tbaa !7
  br i1 %34, label %36, label %38

36:                                               ; preds = %29
  %37 = tail call i64 @fwrite(ptr nonnull @.str.6, i64 25, i64 1, ptr %35) #53
  br label %40

38:                                               ; preds = %29
  %39 = tail call i32 @fputc(i32 10, ptr %35)
  br label %40

40:                                               ; preds = %38, %36, %26, %20
  %41 = load i64, ptr @num_samples, align 8, !tbaa !36
  %42 = icmp eq i64 %41, 4294967295
  br i1 %42, label %43, label %74

43:                                               ; preds = %40
  %44 = load ptr, ptr @musicin, align 8, !tbaa !7
  %45 = load ptr, ptr @stdin, align 8, !tbaa !7
  %46 = icmp eq ptr %44, %45
  br i1 %46, label %74, label %47

47:                                               ; preds = %43
  %48 = call i32 @stat(ptr noundef %1, ptr noundef nonnull %5) #55
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %74

50:                                               ; preds = %47
  %51 = load i32, ptr %18, align 8, !tbaa !127
  %52 = icmp eq i32 %51, 3
  %53 = getelementptr inbounds %struct.stat, ptr %5, i64 0, i32 8
  %54 = load i64, ptr %53, align 8, !tbaa !129
  br i1 %52, label %55, label %67

55:                                               ; preds = %50
  %56 = sitofp i64 %54 to double
  %57 = fmul double %56, 8.000000e+00
  %58 = load i32, ptr @input_bitrate, align 4, !tbaa !11
  %59 = sitofp i32 %58 to double
  %60 = fmul double %59, 1.000000e+03
  %61 = fdiv double %57, %60
  %62 = fptrunc double %61 to float
  %63 = load i32, ptr @samp_freq, align 4, !tbaa !11
  %64 = sitofp i32 %63 to float
  %65 = fmul float %64, %62
  %66 = fptoui float %65 to i64
  br label %72

67:                                               ; preds = %50
  %68 = load i32, ptr @num_channels, align 4, !tbaa !11
  %69 = shl nsw i32 %68, 1
  %70 = sext i32 %69 to i64
  %71 = sdiv i64 %54, %70
  br label %72

72:                                               ; preds = %67, %55
  %73 = phi i64 [ %71, %67 ], [ %66, %55 ]
  store i64 %73, ptr @num_samples, align 8, !tbaa !36
  br label %74

74:                                               ; preds = %72, %47, %43, %40
  %75 = load ptr, ptr @musicin, align 8, !tbaa !7
  call void @llvm.lifetime.end.p0(i64 144, ptr nonnull %5) #56
  ret ptr %75
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: read)
declare i32 @strcmp(ptr nocapture noundef, ptr nocapture noundef) local_unnamed_addr #22

; Function Attrs: nofree nounwind optsize
declare noundef i32 @fprintf(ptr nocapture noundef, ptr nocapture noundef readonly, ...) local_unnamed_addr #6

; Function Attrs: nounwind optsize uwtable
define internal void @parse_file_header(ptr nocapture noundef %0, ptr noundef %1) #4 {
  %3 = alloca [1024 x i8], align 16
  %4 = alloca [1024 x i8], align 16
  %5 = alloca [1024 x i8], align 16
  %6 = alloca [1024 x i8], align 16
  %7 = alloca [1024 x i8], align 16
  %8 = tail call i32 @Read32BitsHighLow(ptr noundef %1) #55
  store i1 false, ptr @count_samples_carefully, align 4
  %9 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 29
  store i32 4, ptr %9, align 8, !tbaa !127
  switch i32 %8, label %181 [
    i32 1380533830, label %10
    i32 1179603533, label %77
  ]

10:                                               ; preds = %2
  %11 = tail call i32 @Read32BitsHighLow(ptr noundef %1) #55
  %12 = tail call i32 @Read32BitsHighLow(ptr noundef %1) #55
  %13 = icmp eq i32 %12, 1463899717
  br i1 %13, label %14, label %178

14:                                               ; preds = %59, %10
  %15 = phi i32 [ %63, %59 ], [ 0, %10 ]
  %16 = phi i16 [ %62, %59 ], [ 0, %10 ]
  %17 = phi i32 [ %61, %59 ], [ 0, %10 ]
  %18 = phi i16 [ %60, %59 ], [ 0, %10 ]
  %19 = tail call i32 @Read32BitsHighLow(ptr noundef %1) #55
  switch i32 %19, label %45 [
    i32 1718449184, label %20
    i32 1684108385, label %65
  ]

20:                                               ; preds = %14
  %21 = tail call i32 @Read32Bits(ptr noundef %1) #55
  %22 = icmp slt i32 %21, 16
  br i1 %22, label %178, label %23

23:                                               ; preds = %20
  %24 = tail call i32 @Read16BitsLowHigh(ptr noundef %1) #55
  %25 = tail call i32 @Read16BitsLowHigh(ptr noundef %1) #55
  %26 = trunc i32 %25 to i16
  %27 = tail call i32 @Read32Bits(ptr noundef %1) #55
  %28 = tail call i32 @Read32Bits(ptr noundef %1) #55
  %29 = tail call i32 @Read16BitsLowHigh(ptr noundef %1) #55
  %30 = tail call i32 @Read16BitsLowHigh(ptr noundef %1) #55
  %31 = trunc i32 %30 to i16
  %32 = icmp eq i32 %21, 16
  br i1 %32, label %59, label %33

33:                                               ; preds = %23
  %34 = zext i32 %21 to i64
  %35 = add nsw i64 %34, -16
  call void @llvm.lifetime.start.p0(i64 1024, ptr nonnull %7) #56
  br label %36

36:                                               ; preds = %36, %33
  %37 = phi i64 [ %40, %36 ], [ %35, %33 ]
  %38 = tail call i64 @llvm.smin.i64(i64 %37, i64 1024)
  %39 = call i64 @fread(ptr noundef nonnull %7, i64 noundef 1, i64 noundef %38, ptr noundef %1) #57
  %40 = sub i64 %37, %39
  %41 = icmp sgt i64 %40, 0
  br i1 %41, label %36, label %42, !llvm.loop !132

42:                                               ; preds = %36
  %.lcssa = phi i64 [ %40, %36 ]
  call void @llvm.lifetime.end.p0(i64 1024, ptr nonnull %7) #56
  %43 = and i64 %.lcssa, 4294967295
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %59, label %178

45:                                               ; preds = %14
  %46 = tail call i32 @Read32Bits(ptr noundef %1) #55
  %47 = sext i32 %46 to i64
  call void @llvm.lifetime.start.p0(i64 1024, ptr nonnull %6) #56
  %48 = icmp sgt i32 %46, 0
  br i1 %48, label %49, label %55

49:                                               ; preds = %49, %45
  %50 = phi i64 [ %53, %49 ], [ %47, %45 ]
  %51 = tail call i64 @llvm.smin.i64(i64 %50, i64 1024)
  %52 = call i64 @fread(ptr noundef nonnull %6, i64 noundef 1, i64 noundef %51, ptr noundef %1) #57
  %53 = sub i64 %50, %52
  %54 = icmp sgt i64 %53, 0
  br i1 %54, label %49, label %55, !llvm.loop !132

55:                                               ; preds = %49, %45
  %56 = phi i64 [ %47, %45 ], [ %53, %49 ]
  call void @llvm.lifetime.end.p0(i64 1024, ptr nonnull %6) #56
  %57 = and i64 %56, 4294967295
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %178

59:                                               ; preds = %55, %42, %23
  %60 = phi i16 [ %18, %55 ], [ %26, %23 ], [ %26, %42 ]
  %61 = phi i32 [ %17, %55 ], [ %27, %23 ], [ %27, %42 ]
  %62 = phi i16 [ %16, %55 ], [ %31, %23 ], [ %31, %42 ]
  %63 = add nuw nsw i32 %15, 1
  %64 = icmp eq i32 %63, 20
  br i1 %64, label %178, label %14, !llvm.loop !133

65:                                               ; preds = %14
  %.lcssa3 = phi i16 [ %16, %14 ]
  %.lcssa2 = phi i32 [ %17, %14 ]
  %.lcssa1 = phi i16 [ %18, %14 ]
  %66 = tail call i32 @Read32Bits(ptr noundef %1) #55
  %67 = icmp eq i16 %.lcssa3, 16
  br i1 %67, label %72, label %68

68:                                               ; preds = %65
  %69 = zext i16 %.lcssa3 to i32
  %70 = load ptr, ptr @stderr, align 8, !tbaa !7
  %71 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %70, ptr noundef nonnull @.str.11, i32 noundef %69) #60
  tail call void @exit(i32 noundef 1) #54
  unreachable

72:                                               ; preds = %65
  %73 = zext i16 %.lcssa1 to i32
  store i32 %73, ptr @num_channels, align 4, !tbaa !11
  store i32 %.lcssa2, ptr @samp_freq, align 4, !tbaa !11
  %74 = shl nuw nsw i32 %73, 1
  %75 = sdiv i32 %66, %74
  %76 = sext i32 %75 to i64
  store i64 %76, ptr @num_samples, align 8, !tbaa !36
  store i32 1, ptr %9, align 8, !tbaa !127
  store i1 true, ptr @count_samples_carefully, align 4
  br label %183

77:                                               ; preds = %2
  %78 = tail call i32 @Read32BitsHighLow(ptr noundef %1) #55
  %79 = tail call i32 @Read32BitsHighLow(ptr noundef %1) #55
  %80 = icmp eq i32 %79, 1095321158
  %81 = icmp sgt i32 %78, 0
  %82 = select i1 %80, i1 %81, i1 false
  br i1 %82, label %83, label %178

83:                                               ; preds = %77
  %84 = zext i32 %78 to i64
  br label %85

85:                                               ; preds = %146, %83
  %86 = phi i64 [ %152, %146 ], [ %84, %83 ]
  %87 = phi float [ %150, %146 ], [ 0.000000e+00, %83 ]
  %88 = phi i16 [ %149, %146 ], [ 0, %83 ]
  %89 = phi i16 [ %148, %146 ], [ 0, %83 ]
  %90 = phi i64 [ %147, %146 ], [ 0, %83 ]
  %91 = add nsw i64 %86, -4
  %92 = tail call i32 @Read32BitsHighLow(ptr noundef %1) #55
  switch i32 %92, label %132 [
    i32 1129270605, label %93
    i32 1397968452, label %116
  ]

93:                                               ; preds = %85
  %94 = tail call i32 @Read32BitsHighLow(ptr noundef %1) #55
  %95 = sext i32 %94 to i64
  %96 = tail call i32 @Read16BitsHighLow(ptr noundef %1) #55
  %97 = trunc i32 %96 to i16
  %98 = tail call i32 @Read32BitsHighLow(ptr noundef %1) #55
  %99 = sext i32 %98 to i64
  %100 = tail call i32 @Read16BitsHighLow(ptr noundef %1) #55
  %101 = trunc i32 %100 to i16
  %102 = tail call double @ReadIeeeExtendedHighLow(ptr noundef %1) #55
  %103 = fptrunc double %102 to float
  %104 = add nsw i64 %95, -18
  call void @llvm.lifetime.start.p0(i64 1024, ptr nonnull %5) #56
  %105 = icmp sgt i32 %94, 18
  br i1 %105, label %106, label %112

106:                                              ; preds = %106, %93
  %107 = phi i64 [ %110, %106 ], [ %104, %93 ]
  %108 = tail call i64 @llvm.smin.i64(i64 %107, i64 1024)
  %109 = call i64 @fread(ptr noundef nonnull %5, i64 noundef 1, i64 noundef %108, ptr noundef %1) #57
  %110 = sub i64 %107, %109
  %111 = icmp sgt i64 %110, 0
  br i1 %111, label %106, label %112, !llvm.loop !132

112:                                              ; preds = %106, %93
  %113 = phi i64 [ %104, %93 ], [ %110, %106 ]
  call void @llvm.lifetime.end.p0(i64 1024, ptr nonnull %5) #56
  %114 = and i64 %113, 4294967295
  %115 = icmp eq i64 %114, 0
  br i1 %115, label %146, label %178

116:                                              ; preds = %85
  %.lcssa7 = phi float [ %87, %85 ]
  %.lcssa6 = phi i16 [ %88, %85 ]
  %.lcssa5 = phi i16 [ %89, %85 ]
  %.lcssa4 = phi i64 [ %90, %85 ]
  %117 = tail call i32 @Read32BitsHighLow(ptr noundef %1) #55
  %118 = tail call i32 @Read32BitsHighLow(ptr noundef %1) #55
  %119 = sext i32 %118 to i64
  %120 = tail call i32 @Read32BitsHighLow(ptr noundef %1) #55
  call void @llvm.lifetime.start.p0(i64 1024, ptr nonnull %4) #56
  %121 = icmp sgt i32 %118, 0
  br i1 %121, label %122, label %128

122:                                              ; preds = %122, %116
  %123 = phi i64 [ %126, %122 ], [ %119, %116 ]
  %124 = tail call i64 @llvm.smin.i64(i64 %123, i64 1024)
  %125 = call i64 @fread(ptr noundef nonnull %4, i64 noundef 1, i64 noundef %124, ptr noundef %1) #57
  %126 = sub i64 %123, %125
  %127 = icmp sgt i64 %126, 0
  br i1 %127, label %122, label %128, !llvm.loop !132

128:                                              ; preds = %122, %116
  %129 = phi i64 [ %119, %116 ], [ %126, %122 ]
  call void @llvm.lifetime.end.p0(i64 1024, ptr nonnull %4) #56
  %130 = and i64 %129, 4294967295
  %131 = icmp eq i64 %130, 0
  br i1 %131, label %154, label %178

132:                                              ; preds = %85
  %133 = tail call i32 @Read32BitsHighLow(ptr noundef %1) #55
  %134 = sext i32 %133 to i64
  call void @llvm.lifetime.start.p0(i64 1024, ptr nonnull %3) #56
  %135 = icmp sgt i32 %133, 0
  br i1 %135, label %136, label %142

136:                                              ; preds = %136, %132
  %137 = phi i64 [ %140, %136 ], [ %134, %132 ]
  %138 = tail call i64 @llvm.smin.i64(i64 %137, i64 1024)
  %139 = call i64 @fread(ptr noundef nonnull %3, i64 noundef 1, i64 noundef %138, ptr noundef %1) #57
  %140 = sub i64 %137, %139
  %141 = icmp sgt i64 %140, 0
  br i1 %141, label %136, label %142, !llvm.loop !132

142:                                              ; preds = %136, %132
  %143 = phi i64 [ %134, %132 ], [ %140, %136 ]
  call void @llvm.lifetime.end.p0(i64 1024, ptr nonnull %3) #56
  %144 = and i64 %143, 4294967295
  %145 = icmp eq i64 %144, 0
  br i1 %145, label %146, label %178

146:                                              ; preds = %142, %112
  %147 = phi i64 [ %90, %142 ], [ %99, %112 ]
  %148 = phi i16 [ %89, %142 ], [ %101, %112 ]
  %149 = phi i16 [ %88, %142 ], [ %97, %112 ]
  %150 = phi float [ %87, %142 ], [ %103, %112 ]
  %151 = phi i64 [ %134, %142 ], [ %95, %112 ]
  %152 = sub i64 %91, %151
  %153 = icmp sgt i64 %152, 0
  br i1 %153, label %85, label %178

154:                                              ; preds = %128
  %155 = icmp eq i16 %.lcssa5, 16
  br i1 %155, label %159, label %156

156:                                              ; preds = %154
  %157 = load ptr, ptr @stderr, align 8, !tbaa !7
  %158 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %157, ptr noundef nonnull @.str.13, i32 noundef 16, ptr noundef nonnull @.str.10) #60
  tail call void @exit(i32 noundef 1) #54
  unreachable

159:                                              ; preds = %154
  %160 = add i16 %.lcssa6, -1
  %161 = icmp ult i16 %160, 2
  br i1 %161, label %165, label %162

162:                                              ; preds = %159
  %163 = load ptr, ptr @stderr, align 8, !tbaa !7
  %164 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %163, ptr noundef nonnull @.str.14, ptr noundef nonnull @.str.10) #60
  tail call void @exit(i32 noundef 1) #54
  unreachable

165:                                              ; preds = %159
  %166 = icmp eq i32 %120, 0
  br i1 %166, label %170, label %167

167:                                              ; preds = %165
  %168 = load ptr, ptr @stderr, align 8, !tbaa !7
  %169 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %168, ptr noundef nonnull @.str.15, i32 noundef 0, ptr noundef nonnull @.str.10) #60
  tail call void @exit(i32 noundef 1) #54
  unreachable

170:                                              ; preds = %165
  %171 = icmp eq i32 %118, 0
  br i1 %171, label %175, label %172

172:                                              ; preds = %170
  %173 = load ptr, ptr @stderr, align 8, !tbaa !7
  %174 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %173, ptr noundef nonnull @.str.16, i32 noundef 0, ptr noundef nonnull @.str.10) #60
  tail call void @exit(i32 noundef 1) #54
  unreachable

175:                                              ; preds = %170
  %176 = zext i16 %.lcssa6 to i32
  store i32 %176, ptr @num_channels, align 4, !tbaa !11
  %177 = fptosi float %.lcssa7 to i32
  store i32 %177, ptr @samp_freq, align 4, !tbaa !11
  store i64 %.lcssa4, ptr @num_samples, align 8, !tbaa !36
  store i32 2, ptr %9, align 8, !tbaa !127
  store i1 true, ptr @count_samples_carefully, align 4
  br label %183

178:                                              ; preds = %146, %142, %128, %112, %77, %59, %55, %42, %20, %10
  %179 = load i32, ptr %9, align 8, !tbaa !127
  %180 = icmp eq i32 %179, 4
  br i1 %180, label %181, label %183

181:                                              ; preds = %178, %2
  %182 = tail call i32 @fseek(ptr noundef %1, i64 noundef 0, i32 noundef 0) #57
  store i32 4, ptr %9, align 8, !tbaa !127
  br label %183

183:                                              ; preds = %181, %178, %175, %72
  ret void
}

; Function Attrs: nofree nounwind
declare noundef i32 @fputc(i32 noundef, ptr nocapture noundef) local_unnamed_addr #23

; Function Attrs: nofree nounwind optsize
declare noundef i32 @stat(ptr nocapture noundef readonly, ptr nocapture noundef) local_unnamed_addr #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #9

; Function Attrs: nounwind optsize uwtable
define internal void @lame_close_infile(ptr nocapture noundef readnone %0) #4 {
  tail call void @CloseSndFile(ptr poison) #57
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @CloseSndFile(ptr nocapture readnone %0) #4 {
  %2 = load ptr, ptr @musicin, align 8, !tbaa !7
  %3 = tail call i32 @fclose(ptr noundef %2) #57
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = load ptr, ptr @stderr, align 8, !tbaa !7
  %7 = tail call i64 @fwrite(ptr nonnull @.str.17, i64 33, i64 1, ptr %6) #53
  tail call void @exit(i32 noundef 2) #54
  unreachable

8:                                                ; preds = %1
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @lame_readframe(ptr nocapture noundef %0, ptr noundef %1) #4 {
  %3 = tail call i32 @get_audio(ptr noundef %0, ptr noundef %1, i32 poison) #57
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %10, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 39
  %7 = load i64, ptr %6, align 8, !tbaa !134
  %8 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 40
  %9 = load i64, ptr %8, align 8, !tbaa !135
  br label %17

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 40
  %12 = load i64, ptr %11, align 8, !tbaa !135
  %13 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 39
  %14 = load i64, ptr %13, align 8, !tbaa !134
  %15 = add nsw i64 %14, 2
  %16 = tail call i64 @llvm.smin.i64(i64 %12, i64 %15)
  store i64 %16, ptr %11, align 8, !tbaa !135
  br label %17

17:                                               ; preds = %10, %5
  %18 = phi i64 [ %9, %5 ], [ %16, %10 ]
  %19 = phi i64 [ %7, %5 ], [ %14, %10 ]
  %20 = icmp slt i64 %19, %18
  br i1 %20, label %23, label %21

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 40
  store i64 %19, ptr %22, align 8, !tbaa !135
  br label %23

23:                                               ; preds = %21, %17
  ret i32 %3
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @get_audio(ptr nocapture noundef readonly %0, ptr noundef %1, i32 %2) #4 {
  %4 = alloca [2304 x i16], align 16
  call void @llvm.lifetime.start.p0(i64 4608, ptr nonnull %4) #56
  %5 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 1
  %6 = load i32, ptr %5, align 8, !tbaa !125
  %7 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 39
  %8 = load i64, ptr %7, align 8, !tbaa !134
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %3
  store i64 0, ptr @get_audio.num_samples_read, align 8, !tbaa !36
  br label %11

11:                                               ; preds = %10, %3
  %12 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 45
  %13 = load i32, ptr %12, align 8, !tbaa !136
  %14 = mul i32 %13, 576
  %15 = load i1, ptr @count_samples_carefully, align 4
  br i1 %15, label %16, label %24

16:                                               ; preds = %11
  %17 = load i64, ptr @num_samples, align 8
  %18 = load i64, ptr @get_audio.num_samples_read, align 8
  %19 = tail call i64 @llvm.usub.sat.i64(i64 %17, i64 %18)
  %20 = sext i32 %14 to i64
  %21 = icmp ult i64 %19, %20
  %22 = trunc i64 %19 to i32
  %23 = select i1 %21, i32 %22, i32 %14
  br label %24

24:                                               ; preds = %16, %11
  %25 = phi i32 [ %14, %11 ], [ %23, %16 ]
  %26 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 29
  %27 = load i32, ptr %26, align 8, !tbaa !127
  %28 = icmp eq i32 %27, 3
  br i1 %28, label %29, label %35

29:                                               ; preds = %24
  %30 = load ptr, ptr @musicin, align 8, !tbaa !7
  %31 = getelementptr [1152 x i16], ptr %1, i64 1
  %32 = tail call i32 @lame_decode_fromfile(ptr noundef %30, ptr noundef %1, ptr noundef nonnull %31) #55
  %33 = icmp eq i32 %32, -1
  br i1 %33, label %34, label %62

34:                                               ; preds = %29
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 2 dereferenceable(4608) %1, i8 0, i64 4608, i1 false)
  br label %62

35:                                               ; preds = %24
  %36 = mul nsw i32 %14, %6
  %37 = mul nsw i32 %25, %6
  %38 = call i32 @read_samples_pcm(ptr noundef nonnull %0, ptr noundef nonnull %4, i32 noundef %36, i32 noundef %37) #57
  %39 = sdiv i32 %38, %6
  %40 = icmp sgt i32 %13, 0
  br i1 %40, label %41, label %62

41:                                               ; preds = %35
  %42 = icmp eq i32 %6, 2
  %43 = sext i32 %6 to i64
  %44 = call i32 @llvm.smax.i32(i32 %14, i32 1)
  %45 = zext i32 %44 to i64
  br label %46

46:                                               ; preds = %57, %41
  %47 = phi i64 [ 0, %41 ], [ %60, %57 ]
  %48 = mul nsw i64 %47, %43
  %49 = getelementptr inbounds [2304 x i16], ptr %4, i64 0, i64 %48
  %50 = load i16, ptr %49, align 2, !tbaa !41
  %51 = getelementptr inbounds [1152 x i16], ptr %1, i64 0, i64 %47
  store i16 %50, ptr %51, align 2, !tbaa !41
  br i1 %42, label %52, label %57

52:                                               ; preds = %46
  %53 = shl nuw nsw i64 %47, 1
  %54 = or i64 %53, 1
  %55 = getelementptr inbounds [2304 x i16], ptr %4, i64 0, i64 %54
  %56 = load i16, ptr %55, align 2, !tbaa !41
  br label %57

57:                                               ; preds = %52, %46
  %58 = phi i16 [ %56, %52 ], [ 0, %46 ]
  %59 = getelementptr inbounds [1152 x i16], ptr %1, i64 1, i64 %47
  store i16 %58, ptr %59, align 2
  %60 = add nuw nsw i64 %47, 1
  %61 = icmp eq i64 %60, %45
  br i1 %61, label %62, label %46, !llvm.loop !137

62:                                               ; preds = %57, %35, %34, %29
  %63 = phi i32 [ %32, %29 ], [ 0, %34 ], [ %39, %35 ], [ %39, %57 ]
  %64 = load i64, ptr @num_samples, align 8, !tbaa !36
  %65 = icmp eq i64 %64, 4294967295
  br i1 %65, label %70, label %66

66:                                               ; preds = %62
  %67 = sext i32 %63 to i64
  %68 = load i64, ptr @get_audio.num_samples_read, align 8, !tbaa !36
  %69 = add i64 %68, %67
  store i64 %69, ptr @get_audio.num_samples_read, align 8, !tbaa !36
  br label %70

70:                                               ; preds = %66, %62
  call void @llvm.lifetime.end.p0(i64 4608, ptr nonnull %4) #56
  ret i32 %63
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.usub.sat.i64(i64, i64) #9

; Function Attrs: nounwind optsize uwtable
define internal i32 @read_samples_pcm(ptr nocapture noundef readonly %0, ptr noundef %1, i32 noundef %2, i32 noundef %3) #4 {
  %5 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 29
  %6 = load i32, ptr %5, align 8, !tbaa !127
  %7 = icmp eq i32 %6, 1
  %8 = sext i32 %3 to i64
  %9 = load ptr, ptr @musicin, align 8, !tbaa !7
  %10 = tail call i64 @fread(ptr noundef %1, i64 noundef 2, i64 noundef %8, ptr noundef %9) #57
  %11 = trunc i64 %10 to i32
  %12 = load ptr, ptr @musicin, align 8, !tbaa !7
  %13 = tail call i32 @ferror(ptr noundef %12) #55
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %18, label %15

15:                                               ; preds = %4
  %16 = load ptr, ptr @stderr, align 8, !tbaa !7
  %17 = tail call i64 @fwrite(ptr nonnull @.str.8, i64 25, i64 1, ptr %16) #53
  tail call void @exit(i32 noundef 2) #54
  unreachable

18:                                               ; preds = %4
  %19 = load i32, ptr @NativeByteOrder, align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %27

21:                                               ; preds = %18
  %22 = tail call i32 @DetermineByteOrder() #55
  store i32 %22, ptr @NativeByteOrder, align 4, !tbaa !15
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %27

24:                                               ; preds = %21
  %25 = load ptr, ptr @stderr, align 8, !tbaa !7
  %26 = tail call i64 @fwrite(ptr nonnull @.str.9.18, i64 26, i64 1, ptr %25) #53
  tail call void @exit(i32 noundef 1) #54
  unreachable

27:                                               ; preds = %21, %18
  %28 = phi i32 [ %22, %21 ], [ %19, %18 ]
  %29 = select i1 %7, i32 1, i32 2
  %30 = icmp eq i32 %28, %29
  br i1 %30, label %31, label %32

31:                                               ; preds = %27
  tail call void @SwapBytesInWords(ptr noundef %1, i32 noundef %11) #55
  br label %32

32:                                               ; preds = %31, %27
  %33 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 30
  %34 = load i32, ptr %33, align 4, !tbaa !128
  %35 = icmp eq i32 %34, 1
  br i1 %35, label %36, label %37

36:                                               ; preds = %32
  tail call void @SwapBytesInWords(ptr noundef %1, i32 noundef %11) #55
  br label %37

37:                                               ; preds = %36, %32
  %38 = icmp slt i32 %11, %2
  %39 = tail call i32 @llvm.smax.i32(i32 %11, i32 0)
  %40 = icmp slt i32 %39, %2
  %41 = and i1 %38, %40
  br i1 %41, label %42, label %51

42:                                               ; preds = %37
  %43 = shl nuw i32 %39, 1
  %44 = zext i32 %43 to i64
  %45 = getelementptr i8, ptr %1, i64 %44
  %46 = xor i32 %39, -1
  %47 = add i32 %46, %2
  %48 = zext i32 %47 to i64
  %49 = shl nuw nsw i64 %48, 1
  %50 = add nuw nsw i64 %49, 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 2 dereferenceable(1) %45, i8 0, i64 %50, i1 false), !tbaa !41
  br label %51

51:                                               ; preds = %42, %37
  ret i32 %11
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #9

; Function Attrs: nofree nounwind optsize memory(read)
declare noundef i32 @ferror(ptr nocapture noundef) local_unnamed_addr #24

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal void @id3_inittag(ptr nocapture noundef writeonly %0) #25 {
  %2 = getelementptr inbounds %struct.ID3TAGDATA, ptr %0, i64 0, i32 2
  store i8 0, ptr %2, align 1
  %3 = getelementptr inbounds %struct.ID3TAGDATA, ptr %0, i64 0, i32 3
  store i8 0, ptr %3, align 1
  %4 = getelementptr inbounds %struct.ID3TAGDATA, ptr %0, i64 0, i32 4
  store i8 0, ptr %4, align 1
  %5 = getelementptr inbounds %struct.ID3TAGDATA, ptr %0, i64 0, i32 5
  store i8 0, ptr %5, align 1
  %6 = getelementptr inbounds %struct.ID3TAGDATA, ptr %0, i64 0, i32 6
  store i8 0, ptr %6, align 1
  %7 = getelementptr inbounds %struct.ID3TAGDATA, ptr %0, i64 0, i32 8
  store i8 -1, ptr %7, align 1, !tbaa !15
  %8 = getelementptr inbounds %struct.ID3TAGDATA, ptr %0, i64 0, i32 9
  store i8 0, ptr %8, align 2, !tbaa !138
  %9 = getelementptr inbounds %struct.ID3TAGDATA, ptr %0, i64 0, i32 1
  store i32 0, ptr %9, align 4, !tbaa !140
  ret void
}

; Function Attrs: nofree nounwind optsize memory(argmem: readwrite) uwtable
define internal void @id3_buildtag(ptr noundef %0) #26 {
  %2 = getelementptr inbounds %struct.ID3TAGDATA, ptr %0, i64 0, i32 7
  store i32 4669780, ptr %2, align 1
  %3 = getelementptr inbounds %struct.ID3TAGDATA, ptr %0, i64 0, i32 2
  tail call fastcc void @id3_pad(ptr noundef nonnull %3, i32 noundef 30) #57
  %4 = tail call ptr @strncat(ptr noundef nonnull dereferenceable(1) %2, ptr noundef nonnull dereferenceable(1) %3, i64 noundef 30) #55
  %5 = getelementptr inbounds %struct.ID3TAGDATA, ptr %0, i64 0, i32 3
  tail call fastcc void @id3_pad(ptr noundef nonnull %5, i32 noundef 30) #57
  %6 = tail call ptr @strncat(ptr noundef nonnull dereferenceable(1) %2, ptr noundef nonnull dereferenceable(1) %5, i64 noundef 30) #55
  %7 = getelementptr inbounds %struct.ID3TAGDATA, ptr %0, i64 0, i32 4
  tail call fastcc void @id3_pad(ptr noundef nonnull %7, i32 noundef 30) #57
  %8 = tail call ptr @strncat(ptr noundef nonnull dereferenceable(1) %2, ptr noundef nonnull dereferenceable(1) %7, i64 noundef 30) #55
  %9 = getelementptr inbounds %struct.ID3TAGDATA, ptr %0, i64 0, i32 5
  tail call fastcc void @id3_pad(ptr noundef nonnull %9, i32 noundef 4) #57
  %10 = tail call ptr @strncat(ptr noundef nonnull dereferenceable(1) %2, ptr noundef nonnull dereferenceable(1) %9, i64 noundef 4) #55
  %11 = getelementptr inbounds %struct.ID3TAGDATA, ptr %0, i64 0, i32 6
  tail call fastcc void @id3_pad(ptr noundef nonnull %11, i32 noundef 30) #57
  %12 = tail call ptr @strncat(ptr noundef nonnull dereferenceable(1) %2, ptr noundef nonnull dereferenceable(1) %11, i64 noundef 30) #55
  %13 = getelementptr inbounds %struct.ID3TAGDATA, ptr %0, i64 0, i32 8
  tail call fastcc void @id3_pad(ptr noundef nonnull %13, i32 noundef 1) #57
  %14 = tail call ptr @strncat(ptr noundef nonnull dereferenceable(1) %2, ptr noundef nonnull dereferenceable(1) %13, i64 noundef 1) #55
  %15 = getelementptr inbounds %struct.ID3TAGDATA, ptr %0, i64 0, i32 9
  %16 = load i8, ptr %15, align 2, !tbaa !138
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %21, label %18

18:                                               ; preds = %1
  %19 = getelementptr inbounds %struct.ID3TAGDATA, ptr %0, i64 0, i32 7, i64 125
  store i8 0, ptr %19, align 1, !tbaa !15
  %20 = getelementptr inbounds %struct.ID3TAGDATA, ptr %0, i64 0, i32 7, i64 126
  store i8 %16, ptr %20, align 1, !tbaa !15
  br label %21

21:                                               ; preds = %18, %1
  %22 = getelementptr inbounds %struct.ID3TAGDATA, ptr %0, i64 0, i32 1
  store i32 1, ptr %22, align 4, !tbaa !140
  ret void
}

; Function Attrs: nofree nounwind optsize memory(argmem: readwrite) uwtable
define internal fastcc void @id3_pad(ptr nocapture noundef %0, i32 noundef %1) unnamed_addr #26 {
  %3 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %0) #59
  %4 = trunc i64 %3 to i32
  %5 = icmp slt i32 %4, %1
  br i1 %5, label %6, label %14

6:                                                ; preds = %2
  %7 = shl i64 %3, 32
  %8 = ashr exact i64 %7, 32
  %9 = getelementptr i8, ptr %0, i64 %8
  %10 = xor i32 %4, -1
  %11 = add i32 %10, %1
  %12 = zext i32 %11 to i64
  %13 = add nuw nsw i64 %12, 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(1) %9, i8 32, i64 %13, i1 false), !tbaa !15
  br label %14

14:                                               ; preds = %6, %2
  %15 = phi i32 [ %4, %2 ], [ %1, %6 ]
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds i8, ptr %0, i64 %16
  store i8 0, ptr %17, align 1, !tbaa !15
  ret void
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: readwrite)
declare ptr @strncat(ptr noalias noundef returned, ptr noalias nocapture noundef readonly, i64 noundef) local_unnamed_addr #11

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: read)
declare i64 @strlen(ptr nocapture noundef) local_unnamed_addr #22

; Function Attrs: nofree nounwind optsize uwtable
define internal i32 @id3_writetag(ptr nocapture noundef readonly %0, ptr nocapture noundef %1) #27 {
  %3 = getelementptr inbounds %struct.ID3TAGDATA, ptr %1, i64 0, i32 1
  %4 = load i32, ptr %3, align 4, !tbaa !140
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %14, label %6

6:                                                ; preds = %2
  %7 = tail call noalias ptr @fopen(ptr noundef %0, ptr noundef nonnull @.str.2.19) #57
  %8 = icmp eq ptr %7, null
  br i1 %8, label %14, label %9

9:                                                ; preds = %6
  %10 = tail call i32 @fseek(ptr noundef nonnull %7, i64 noundef 0, i32 noundef 2) #57
  %11 = getelementptr inbounds %struct.ID3TAGDATA, ptr %1, i64 0, i32 7
  %12 = tail call i64 @fwrite(ptr noundef nonnull %11, i64 noundef 1, i64 noundef 128, ptr noundef nonnull %7) #57
  %13 = tail call i32 @fclose(ptr noundef nonnull %7) #57
  br label %14

14:                                               ; preds = %9, %6, %2
  %15 = phi i32 [ 0, %9 ], [ -1, %2 ], [ -1, %6 ]
  ret i32 %15
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn uwtable
define internal double @ConvertFromIeeeExtended(ptr nocapture noundef readonly %0) #28 {
  %2 = load i8, ptr %0, align 1, !tbaa !15
  %3 = and i8 %2, 127
  %4 = zext i8 %3 to i64
  %5 = shl nuw nsw i64 %4, 8
  %6 = getelementptr inbounds i8, ptr %0, i64 1
  %7 = load i8, ptr %6, align 1, !tbaa !15
  %8 = zext i8 %7 to i64
  %9 = or i64 %5, %8
  %10 = getelementptr inbounds i8, ptr %0, i64 2
  %11 = load i8, ptr %10, align 1, !tbaa !15
  %12 = zext i8 %11 to i64
  %13 = shl nuw nsw i64 %12, 24
  %14 = getelementptr inbounds i8, ptr %0, i64 3
  %15 = load i8, ptr %14, align 1, !tbaa !15
  %16 = zext i8 %15 to i64
  %17 = shl nuw nsw i64 %16, 16
  %18 = or i64 %17, %13
  %19 = getelementptr inbounds i8, ptr %0, i64 4
  %20 = load i8, ptr %19, align 1, !tbaa !15
  %21 = zext i8 %20 to i64
  %22 = shl nuw nsw i64 %21, 8
  %23 = or i64 %18, %22
  %24 = getelementptr inbounds i8, ptr %0, i64 5
  %25 = load i8, ptr %24, align 1, !tbaa !15
  %26 = zext i8 %25 to i64
  %27 = or i64 %23, %26
  %28 = getelementptr inbounds i8, ptr %0, i64 6
  %29 = load i8, ptr %28, align 1, !tbaa !15
  %30 = zext i8 %29 to i64
  %31 = shl nuw nsw i64 %30, 24
  %32 = getelementptr inbounds i8, ptr %0, i64 7
  %33 = load i8, ptr %32, align 1, !tbaa !15
  %34 = zext i8 %33 to i64
  %35 = shl nuw nsw i64 %34, 16
  %36 = or i64 %35, %31
  %37 = getelementptr inbounds i8, ptr %0, i64 8
  %38 = load i8, ptr %37, align 1, !tbaa !15
  %39 = zext i8 %38 to i64
  %40 = shl nuw nsw i64 %39, 8
  %41 = or i64 %36, %40
  %42 = getelementptr inbounds i8, ptr %0, i64 9
  %43 = load i8, ptr %42, align 1, !tbaa !15
  %44 = zext i8 %43 to i64
  %45 = or i64 %41, %44
  %46 = icmp eq i64 %9, 0
  %47 = icmp eq i64 %27, 0
  %48 = select i1 %46, i1 %47, i1 false
  %49 = icmp eq i64 %45, 0
  %50 = select i1 %48, i1 %49, i1 false
  br i1 %50, label %67, label %51

51:                                               ; preds = %1
  %52 = icmp eq i64 %9, 32767
  br i1 %52, label %67, label %53

53:                                               ; preds = %51
  %54 = add nsw i64 %27, -2147483648
  %55 = sitofp i64 %54 to double
  %56 = fadd double %55, 0x41E0000000000000
  %57 = trunc i64 %9 to i32
  %58 = add nsw i32 %57, -16414
  %59 = tail call double @ldexp(double noundef %56, i32 noundef %58) #55
  %60 = add nsw i64 %45, -2147483648
  %61 = sitofp i64 %60 to double
  %62 = fadd double %61, 0x41E0000000000000
  %63 = add nsw i32 %57, -16446
  %64 = tail call double @ldexp(double noundef %62, i32 noundef %63) #55
  %65 = fadd double %59, %64
  %66 = load i8, ptr %0, align 1, !tbaa !15
  br label %67

67:                                               ; preds = %53, %51, %1
  %68 = phi i8 [ %66, %53 ], [ %2, %1 ], [ %2, %51 ]
  %69 = phi double [ %65, %53 ], [ 0.000000e+00, %1 ], [ 0x7FF0000000000000, %51 ]
  %70 = fneg double %69
  %71 = icmp slt i8 %68, 0
  %72 = select i1 %71, double %70, double %69
  ret double %72
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn
declare double @ldexp(double noundef, i32 noundef) local_unnamed_addr #29

; Function Attrs: nounwind optsize uwtable
define internal i32 @InitMP3(ptr nocapture noundef writeonly %0) #4 {
  %2 = getelementptr inbounds %struct.mpstr, ptr %0, i64 0, i32 4
  %3 = getelementptr inbounds i8, ptr %0, i64 16
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(31864) %3, i8 0, i64 31864, i1 false)
  store i32 -1, ptr %2, align 8, !tbaa !141
  %4 = getelementptr inbounds %struct.mpstr, ptr %0, i64 0, i32 5, i32 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(20) %0, i8 0, i64 20, i1 false)
  store i32 -1, ptr %4, align 4, !tbaa !142
  %5 = getelementptr inbounds %struct.mpstr, ptr %0, i64 0, i32 12
  store i32 1, ptr %5, align 8, !tbaa !44
  tail call void @make_decode_tables(i64 noundef 32767) #55
  tail call void @init_layer3(i32 noundef 32) #55
  ret i32 1
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @decodeMP3(ptr noundef %0, ptr noundef readonly %1, i32 noundef %2, ptr noundef %3, i32 noundef %4, ptr noundef %5) #4 {
  store ptr %0, ptr @gmp, align 8, !tbaa !7
  %7 = icmp slt i32 %4, 4608
  br i1 %7, label %8, label %11

8:                                                ; preds = %6
  %9 = load ptr, ptr @stderr, align 8, !tbaa !7
  %10 = tail call i64 @fwrite(ptr nonnull @.str.151, i64 18, i64 1, ptr %9) #53
  br label %125

11:                                               ; preds = %6
  %12 = icmp eq ptr %1, null
  br i1 %12, label %38, label %13

13:                                               ; preds = %11
  %14 = tail call noalias dereferenceable_or_null(40) ptr @malloc(i64 noundef 40) #51
  %15 = icmp eq ptr %14, null
  br i1 %15, label %16, label %19

16:                                               ; preds = %13
  %17 = load ptr, ptr @stderr, align 8, !tbaa !7
  %18 = tail call i64 @fwrite(ptr nonnull @.str.2.152, i64 15, i64 1, ptr %17) #53
  br label %125

19:                                               ; preds = %13
  %20 = sext i32 %2 to i64
  %21 = tail call noalias ptr @malloc(i64 noundef %20) #51
  store ptr %21, ptr %14, align 8, !tbaa !143
  %22 = icmp eq ptr %21, null
  br i1 %22, label %23, label %24

23:                                               ; preds = %19
  tail call void @free(ptr noundef nonnull %14) #55
  br label %125

24:                                               ; preds = %19
  %25 = getelementptr inbounds %struct.buf, ptr %14, i64 0, i32 1
  store i64 %20, ptr %25, align 8, !tbaa !145
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %21, ptr nonnull align 1 %1, i64 %20, i1 false)
  %26 = getelementptr inbounds %struct.buf, ptr %14, i64 0, i32 3
  store ptr null, ptr %26, align 8, !tbaa !146
  %27 = load ptr, ptr %0, align 8, !tbaa !147
  %28 = getelementptr inbounds %struct.buf, ptr %14, i64 0, i32 4
  store ptr %27, ptr %28, align 8, !tbaa !148
  %29 = getelementptr inbounds %struct.buf, ptr %14, i64 0, i32 2
  store i64 0, ptr %29, align 8, !tbaa !149
  %30 = getelementptr inbounds %struct.mpstr, ptr %0, i64 0, i32 1
  %31 = load ptr, ptr %30, align 8, !tbaa !150
  %32 = icmp eq ptr %31, null
  %33 = getelementptr inbounds %struct.buf, ptr %27, i64 0, i32 3
  %34 = select i1 %32, ptr %30, ptr %33
  store ptr %14, ptr %34, align 8, !tbaa !7
  store ptr %14, ptr %0, align 8, !tbaa !147
  %35 = getelementptr inbounds %struct.mpstr, ptr %0, i64 0, i32 2
  %36 = load i32, ptr %35, align 8, !tbaa !151
  %37 = add nsw i32 %36, %2
  store i32 %37, ptr %35, align 8, !tbaa !151
  br label %38

38:                                               ; preds = %24, %11
  %39 = getelementptr inbounds %struct.mpstr, ptr %0, i64 0, i32 3
  %40 = load i32, ptr %39, align 4, !tbaa !152
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %45, label %42

42:                                               ; preds = %38
  %43 = getelementptr inbounds %struct.mpstr, ptr %0, i64 0, i32 5, i32 17
  %44 = load i32, ptr %43, align 4, !tbaa !153
  br label %66

45:                                               ; preds = %38
  %46 = getelementptr inbounds %struct.mpstr, ptr %0, i64 0, i32 2
  %47 = load i32, ptr %46, align 8, !tbaa !151
  %48 = icmp slt i32 %47, 4
  br i1 %48, label %125, label %49

49:                                               ; preds = %45
  %50 = tail call fastcc i32 @read_buf_byte(ptr noundef nonnull %0) #57, !range !154
  %51 = tail call fastcc i32 @read_buf_byte(ptr noundef nonnull %0) #57, !range !154
  %52 = shl nuw nsw i32 %50, 16
  %53 = shl nuw nsw i32 %51, 8
  %54 = or i32 %53, %52
  %55 = tail call fastcc i32 @read_buf_byte(ptr noundef nonnull %0) #57, !range !154
  %56 = or i32 %54, %55
  %57 = shl nuw i32 %56, 8
  %58 = tail call fastcc i32 @read_buf_byte(ptr noundef nonnull %0) #57, !range !154
  %59 = or i32 %57, %58
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds %struct.mpstr, ptr %0, i64 0, i32 9
  store i64 %60, ptr %61, align 8, !tbaa !155
  %62 = getelementptr inbounds %struct.mpstr, ptr %0, i64 0, i32 5
  %63 = tail call i32 @decode_header(ptr noundef nonnull %62, i64 noundef %60) #55
  %64 = getelementptr inbounds %struct.mpstr, ptr %0, i64 0, i32 5, i32 17
  %65 = load i32, ptr %64, align 4, !tbaa !153
  store i32 %65, ptr %39, align 4, !tbaa !152
  br label %66

66:                                               ; preds = %49, %42
  %67 = phi i32 [ %40, %42 ], [ %65, %49 ]
  %68 = phi i32 [ %44, %42 ], [ %65, %49 ]
  %69 = getelementptr inbounds %struct.mpstr, ptr %0, i64 0, i32 5
  %70 = getelementptr inbounds %struct.mpstr, ptr %0, i64 0, i32 2
  %71 = load i32, ptr %70, align 8, !tbaa !151
  %72 = icmp sgt i32 %68, %71
  br i1 %72, label %125, label %73

73:                                               ; preds = %66
  %74 = getelementptr inbounds %struct.mpstr, ptr %0, i64 0, i32 10
  %75 = load i32, ptr %74, align 8, !tbaa !156
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds %struct.mpstr, ptr %0, i64 0, i32 6, i64 %76, i64 512
  store ptr %77, ptr @wordpointer, align 8, !tbaa !7
  %78 = and i32 %75, 1
  %79 = xor i32 %78, 1
  store i32 %79, ptr %74, align 8, !tbaa !156
  store i32 0, ptr @bitindex, align 4, !tbaa !11
  %80 = icmp sgt i32 %67, 0
  br i1 %80, label %81, label %115

81:                                               ; preds = %73
  %82 = getelementptr inbounds %struct.mpstr, ptr %0, i64 0, i32 1
  br label %83

83:                                               ; preds = %112, %81
  %84 = phi i32 [ %67, %81 ], [ %113, %112 ]
  %85 = phi i32 [ 0, %81 ], [ %101, %112 ]
  %86 = load ptr, ptr %82, align 8, !tbaa !150
  %87 = getelementptr inbounds %struct.buf, ptr %86, i64 0, i32 1
  %88 = load i64, ptr %87, align 8, !tbaa !145
  %89 = getelementptr inbounds %struct.buf, ptr %86, i64 0, i32 2
  %90 = load i64, ptr %89, align 8, !tbaa !149
  %91 = sub nsw i64 %88, %90
  %92 = trunc i64 %91 to i32
  %93 = sub nsw i32 %84, %85
  %94 = tail call i32 @llvm.smin.i32(i32 %93, i32 %92)
  %95 = load ptr, ptr @wordpointer, align 8, !tbaa !7
  %96 = sext i32 %85 to i64
  %97 = getelementptr inbounds i8, ptr %95, i64 %96
  %98 = load ptr, ptr %86, align 8, !tbaa !143
  %99 = getelementptr inbounds i8, ptr %98, i64 %90
  %100 = sext i32 %94 to i64
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 1 %97, ptr align 1 %99, i64 %100, i1 false)
  %101 = add nsw i32 %94, %85
  %102 = load ptr, ptr %82, align 8, !tbaa !150
  %103 = getelementptr inbounds %struct.buf, ptr %102, i64 0, i32 2
  %104 = load i64, ptr %103, align 8, !tbaa !149
  %105 = add nsw i64 %104, %100
  store i64 %105, ptr %103, align 8, !tbaa !149
  %106 = load i32, ptr %70, align 8, !tbaa !151
  %107 = sub nsw i32 %106, %94
  store i32 %107, ptr %70, align 8, !tbaa !151
  %108 = getelementptr inbounds %struct.buf, ptr %102, i64 0, i32 1
  %109 = load i64, ptr %108, align 8, !tbaa !145
  %110 = icmp eq i64 %105, %109
  br i1 %110, label %111, label %112

111:                                              ; preds = %83
  tail call fastcc void @remove_buf(ptr noundef nonnull %0) #57
  br label %112

112:                                              ; preds = %111, %83
  %113 = load i32, ptr %39, align 4, !tbaa !152
  %114 = icmp slt i32 %101, %113
  br i1 %114, label %83, label %115, !llvm.loop !157

115:                                              ; preds = %112, %73
  store i32 0, ptr %5, align 4, !tbaa !11
  %116 = getelementptr inbounds %struct.mpstr, ptr %0, i64 0, i32 5, i32 7
  %117 = load i32, ptr %116, align 4, !tbaa !158
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %121, label %119

119:                                              ; preds = %115
  %120 = tail call i32 @getbits(i32 noundef 16) #55
  br label %121

121:                                              ; preds = %119, %115
  %122 = tail call i32 @do_layer3(ptr noundef nonnull %69, ptr noundef %3, ptr noundef nonnull %5) #55
  %123 = load i32, ptr %39, align 4, !tbaa !152
  %124 = getelementptr inbounds %struct.mpstr, ptr %0, i64 0, i32 4
  store i32 %123, ptr %124, align 8, !tbaa !141
  store i32 0, ptr %39, align 4, !tbaa !152
  br label %125

125:                                              ; preds = %121, %66, %45, %23, %16, %8
  %126 = phi i32 [ -1, %8 ], [ 0, %121 ], [ 1, %45 ], [ 1, %66 ], [ -1, %23 ], [ -1, %16 ]
  ret i32 %126
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc i32 @read_buf_byte(ptr nocapture noundef %0) unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.mpstr, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !150
  br label %4

4:                                                ; preds = %13, %1
  %5 = phi ptr [ %3, %1 ], [ %14, %13 ]
  %6 = getelementptr inbounds %struct.buf, ptr %5, i64 0, i32 2
  %7 = load i64, ptr %6, align 8, !tbaa !149
  %8 = shl i64 %7, 32
  %9 = ashr exact i64 %8, 32
  %10 = getelementptr inbounds %struct.buf, ptr %5, i64 0, i32 1
  %11 = load i64, ptr %10, align 8, !tbaa !145
  %12 = icmp slt i64 %9, %11
  br i1 %12, label %19, label %13

13:                                               ; preds = %4
  tail call fastcc void @remove_buf(ptr noundef nonnull %0) #57
  %14 = load ptr, ptr %2, align 8, !tbaa !150
  %15 = icmp eq ptr %14, null
  br i1 %15, label %16, label %4, !llvm.loop !159

16:                                               ; preds = %13
  %17 = load ptr, ptr @stderr, align 8, !tbaa !7
  %18 = tail call i64 @fwrite(ptr nonnull @.str.3.153, i64 13, i64 1, ptr %17) #53
  tail call void @exit(i32 noundef 1) #54
  unreachable

19:                                               ; preds = %4
  %.lcssa4 = phi ptr [ %5, %4 ]
  %.lcssa2 = phi i64 [ %7, %4 ]
  %.lcssa = phi i64 [ %9, %4 ]
  %20 = getelementptr inbounds %struct.buf, ptr %.lcssa4, i64 0, i32 2
  %21 = load ptr, ptr %.lcssa4, align 8, !tbaa !143
  %22 = getelementptr inbounds i8, ptr %21, i64 %.lcssa
  %23 = load i8, ptr %22, align 1, !tbaa !15
  %24 = zext i8 %23 to i32
  %25 = getelementptr inbounds %struct.mpstr, ptr %0, i64 0, i32 2
  %26 = load i32, ptr %25, align 8, !tbaa !151
  %27 = add nsw i32 %26, -1
  store i32 %27, ptr %25, align 8, !tbaa !151
  %28 = add nsw i64 %.lcssa2, 1
  store i64 %28, ptr %20, align 8, !tbaa !149
  ret i32 %24
}

; Function Attrs: mustprogress nounwind optsize willreturn uwtable
define internal fastcc void @remove_buf(ptr nocapture noundef %0) unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.mpstr, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !150
  %4 = getelementptr inbounds %struct.buf, ptr %3, i64 0, i32 3
  %5 = load ptr, ptr %4, align 8, !tbaa !146
  store ptr %5, ptr %2, align 8, !tbaa !150
  %6 = icmp eq ptr %5, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.buf, ptr %5, i64 0, i32 4
  store ptr null, ptr %8, align 8, !tbaa !148
  br label %10

9:                                                ; preds = %1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %0, i8 0, i64 16, i1 false)
  br label %10

10:                                               ; preds = %9, %7
  %11 = load ptr, ptr %3, align 8, !tbaa !143
  tail call void @free(ptr noundef %11) #55
  tail call void @free(ptr noundef nonnull %3) #55
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal i32 @set_pointer(i64 noundef %0) #27 {
  %2 = load ptr, ptr @gmp, align 8, !tbaa !7
  %3 = getelementptr inbounds %struct.mpstr, ptr %2, i64 0, i32 4
  %4 = load i32, ptr %3, align 8, !tbaa !141
  %5 = icmp slt i32 %4, 0
  %6 = icmp sgt i64 %0, 0
  %7 = and i1 %6, %5
  br i1 %7, label %8, label %11

8:                                                ; preds = %1
  %9 = load ptr, ptr @stderr, align 8, !tbaa !7
  %10 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %9, ptr noundef nonnull @.str.1.154, i64 noundef %0) #60
  br label %25

11:                                               ; preds = %1
  %12 = getelementptr inbounds %struct.mpstr, ptr %2, i64 0, i32 10
  %13 = load i32, ptr %12, align 8, !tbaa !156
  %14 = load ptr, ptr @wordpointer, align 8, !tbaa !7
  %15 = sub i64 0, %0
  %16 = getelementptr inbounds i8, ptr %14, i64 %15
  store ptr %16, ptr @wordpointer, align 8, !tbaa !7
  %17 = icmp eq i64 %0, 0
  br i1 %17, label %24, label %18

18:                                               ; preds = %11
  %19 = sext i32 %13 to i64
  %20 = getelementptr inbounds %struct.mpstr, ptr %2, i64 0, i32 6, i64 %19, i64 512
  %21 = sext i32 %4 to i64
  %22 = getelementptr inbounds i8, ptr %20, i64 %21
  %23 = getelementptr inbounds i8, ptr %22, i64 %15
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %16, ptr nonnull align 1 %23, i64 %0, i1 false)
  br label %24

24:                                               ; preds = %18, %11
  store i32 0, ptr @bitindex, align 4, !tbaa !11
  br label %25

25:                                               ; preds = %24, %8
  %26 = phi i32 [ -1, %8 ], [ 0, %24 ]
  ret i32 %26
}

; Function Attrs: nounwind optsize uwtable
define internal void @putMyBits(i32 noundef %0, i32 noundef %1) #4 {
  %3 = load ptr, ptr @bs, align 8, !tbaa !7
  tail call void @putbits(ptr noundef %3, i32 noundef %0, i32 noundef %1) #55
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @III_format_bitstream(ptr nocapture noundef readonly %0, i32 noundef %1, ptr nocapture noundef readonly %2, ptr nocapture noundef %3, ptr nocapture noundef readonly %4, ptr noundef %5) #4 {
  store ptr %5, ptr @bs, align 8, !tbaa !7
  %7 = load ptr, ptr @frameData, align 8, !tbaa !7
  %8 = icmp eq ptr %7, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %6
  %10 = tail call noalias dereferenceable_or_null(184) ptr @calloc(i64 noundef 1, i64 noundef 184) #58
  store ptr %10, ptr @frameData, align 8, !tbaa !7
  br label %11

11:                                               ; preds = %9, %6
  %12 = load ptr, ptr @frameResults, align 8, !tbaa !7
  %13 = icmp eq ptr %12, null
  br i1 %13, label %14, label %16

14:                                               ; preds = %11
  %15 = tail call noalias dereferenceable_or_null(12) ptr @calloc(i64 noundef 1, i64 noundef 12) #58
  store ptr %15, ptr @frameResults, align 8, !tbaa !7
  br label %16

16:                                               ; preds = %14, %11
  %17 = load i32, ptr @PartHoldersInitialized, align 4, !tbaa !11
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %41

19:                                               ; preds = %16
  %20 = tail call ptr @BF_newPartHolder(i32 noundef 14) #55
  store ptr %20, ptr @headerPH, align 8, !tbaa !7
  %21 = tail call ptr @BF_newPartHolder(i32 noundef 12) #55
  store ptr %21, ptr @frameSIPH, align 8, !tbaa !7
  %22 = tail call ptr @BF_newPartHolder(i32 noundef 8) #55
  store ptr %22, ptr @channelSIPH, align 16, !tbaa !7
  %23 = tail call ptr @BF_newPartHolder(i32 noundef 8) #55
  store ptr %23, ptr getelementptr inbounds ([2 x ptr], ptr @channelSIPH, i64 0, i64 1), align 8, !tbaa !7
  br label %24

24:                                               ; preds = %38, %19
  %25 = phi i1 [ false, %38 ], [ true, %19 ]
  %26 = phi i64 [ 1, %38 ], [ 0, %19 ]
  br label %27

27:                                               ; preds = %27, %24
  %28 = phi i1 [ true, %24 ], [ false, %27 ]
  %29 = phi i64 [ 0, %24 ], [ 1, %27 ]
  %30 = tail call ptr @BF_newPartHolder(i32 noundef 32) #55
  %31 = getelementptr inbounds [2 x [2 x ptr]], ptr @spectrumSIPH, i64 0, i64 %26, i64 %29
  store ptr %30, ptr %31, align 8, !tbaa !7
  %32 = tail call ptr @BF_newPartHolder(i32 noundef 64) #55
  %33 = getelementptr inbounds [2 x [2 x ptr]], ptr @scaleFactorsPH, i64 0, i64 %26, i64 %29
  store ptr %32, ptr %33, align 8, !tbaa !7
  %34 = tail call ptr @BF_newPartHolder(i32 noundef 576) #55
  %35 = getelementptr inbounds [2 x [2 x ptr]], ptr @codedDataPH, i64 0, i64 %26, i64 %29
  store ptr %34, ptr %35, align 8, !tbaa !7
  %36 = tail call ptr @BF_newPartHolder(i32 noundef 4) #55
  %37 = getelementptr inbounds [2 x [2 x ptr]], ptr @userSpectrumPH, i64 0, i64 %26, i64 %29
  store ptr %36, ptr %37, align 8, !tbaa !7
  br i1 %28, label %27, label %38, !llvm.loop !160

38:                                               ; preds = %27
  br i1 %25, label %24, label %39, !llvm.loop !161

39:                                               ; preds = %38
  %40 = tail call ptr @BF_newPartHolder(i32 noundef 8) #55
  store ptr %40, ptr @userFrameDataPH, align 8, !tbaa !7
  store i32 1, ptr @PartHoldersInitialized, align 4, !tbaa !11
  br label %41

41:                                               ; preds = %39, %16
  store i32 65535, ptr @crc, align 4, !tbaa !11
  %42 = load ptr, ptr @headerPH, align 8, !tbaa !7
  %43 = getelementptr inbounds %struct.BF_BitstreamPart, ptr %42, i64 0, i32 1
  %44 = load ptr, ptr %43, align 8, !tbaa !102
  store i32 0, ptr %44, align 8, !tbaa !66
  %45 = tail call ptr @BF_addEntry(ptr noundef %42, i32 noundef 4095, i32 noundef 12) #55
  store ptr %45, ptr @headerPH, align 8, !tbaa !7
  %46 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 43
  %47 = load i32, ptr %46, align 8, !tbaa !162
  %48 = tail call ptr @BF_addEntry(ptr noundef %45, i32 noundef %47, i32 noundef 1) #55
  store ptr %48, ptr @headerPH, align 8, !tbaa !7
  %49 = tail call ptr @BF_addEntry(ptr noundef %48, i32 noundef 1, i32 noundef 2) #55
  store ptr %49, ptr @headerPH, align 8, !tbaa !7
  %50 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 14
  %51 = load i32, ptr %50, align 4, !tbaa !163
  %52 = icmp eq i32 %51, 0
  %53 = zext i1 %52 to i32
  %54 = tail call ptr @BF_addEntry(ptr noundef %49, i32 noundef %53, i32 noundef 1) #55
  store ptr %54, ptr @headerPH, align 8, !tbaa !7
  %55 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 50
  %56 = load i32, ptr %55, align 4, !tbaa !164
  %57 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %54, i32 noundef %56, i32 noundef 4) #57
  store ptr %57, ptr @headerPH, align 8, !tbaa !7
  %58 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 51
  %59 = load i32, ptr %58, align 8, !tbaa !165
  %60 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %57, i32 noundef %59, i32 noundef 2) #57
  store ptr %60, ptr @headerPH, align 8, !tbaa !7
  %61 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 44
  %62 = load i32, ptr %61, align 4, !tbaa !166
  %63 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %60, i32 noundef %62, i32 noundef 1) #57
  store ptr %63, ptr @headerPH, align 8, !tbaa !7
  %64 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 16
  %65 = load i32, ptr %64, align 4, !tbaa !167
  %66 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %63, i32 noundef %65, i32 noundef 1) #57
  store ptr %66, ptr @headerPH, align 8, !tbaa !7
  %67 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 8
  %68 = load i32, ptr %67, align 4, !tbaa !168
  %69 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %66, i32 noundef %68, i32 noundef 2) #57
  store ptr %69, ptr @headerPH, align 8, !tbaa !7
  %70 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 52
  %71 = load i32, ptr %70, align 4, !tbaa !169
  %72 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %69, i32 noundef %71, i32 noundef 2) #57
  store ptr %72, ptr @headerPH, align 8, !tbaa !7
  %73 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 12
  %74 = load i32, ptr %73, align 4, !tbaa !170
  %75 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %72, i32 noundef %74, i32 noundef 1) #57
  store ptr %75, ptr @headerPH, align 8, !tbaa !7
  %76 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 13
  %77 = load i32, ptr %76, align 8, !tbaa !171
  %78 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %75, i32 noundef %77, i32 noundef 1) #57
  store ptr %78, ptr @headerPH, align 8, !tbaa !7
  %79 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 38
  %80 = load i32, ptr %79, align 4, !tbaa !172
  %81 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %78, i32 noundef %80, i32 noundef 2) #57
  store ptr %81, ptr @headerPH, align 8, !tbaa !7
  %82 = load ptr, ptr @frameSIPH, align 8, !tbaa !7
  %83 = getelementptr inbounds %struct.BF_BitstreamPart, ptr %82, i64 0, i32 1
  %84 = load ptr, ptr %83, align 8, !tbaa !102
  store i32 0, ptr %84, align 8, !tbaa !66
  %85 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 46
  %86 = load i32, ptr %85, align 4, !tbaa !173
  %87 = icmp sgt i32 %86, 0
  br i1 %87, label %88, label %90

88:                                               ; preds = %41
  %89 = zext i32 %86 to i64
  br label %97

90:                                               ; preds = %97, %41
  %91 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 45
  %92 = load i32, ptr %91, align 8, !tbaa !136
  %93 = icmp sgt i32 %92, 0
  br i1 %93, label %94, label %118

94:                                               ; preds = %90
  %95 = zext i32 %92 to i64
  %96 = zext i32 %86 to i64
  br label %105

97:                                               ; preds = %97, %88
  %98 = phi i64 [ 0, %88 ], [ %103, %97 ]
  %99 = getelementptr inbounds [2 x ptr], ptr @channelSIPH, i64 0, i64 %98
  %100 = load ptr, ptr %99, align 8, !tbaa !7
  %101 = getelementptr inbounds %struct.BF_BitstreamPart, ptr %100, i64 0, i32 1
  %102 = load ptr, ptr %101, align 8, !tbaa !102
  store i32 0, ptr %102, align 8, !tbaa !66
  %103 = add nuw nsw i64 %98, 1
  %104 = icmp eq i64 %103, %89
  br i1 %104, label %90, label %97, !llvm.loop !174

105:                                              ; preds = %115, %94
  %106 = phi i64 [ 0, %94 ], [ %116, %115 ]
  br i1 %87, label %107, label %115

107:                                              ; preds = %107, %105
  %108 = phi i64 [ %113, %107 ], [ 0, %105 ]
  %109 = getelementptr inbounds [2 x [2 x ptr]], ptr @spectrumSIPH, i64 0, i64 %106, i64 %108
  %110 = load ptr, ptr %109, align 8, !tbaa !7
  %111 = getelementptr inbounds %struct.BF_BitstreamPart, ptr %110, i64 0, i32 1
  %112 = load ptr, ptr %111, align 8, !tbaa !102
  store i32 0, ptr %112, align 8, !tbaa !66
  %113 = add nuw nsw i64 %108, 1
  %114 = icmp eq i64 %113, %96
  br i1 %114, label %115, label %107, !llvm.loop !175

115:                                              ; preds = %107, %105
  %116 = add nuw nsw i64 %106, 1
  %117 = icmp eq i64 %116, %95
  br i1 %117, label %118, label %105, !llvm.loop !176

118:                                              ; preds = %115, %90
  %119 = load i32, ptr %46, align 8, !tbaa !162
  %120 = icmp eq i32 %119, 1
  %121 = load i32, ptr %3, align 8, !tbaa !177
  %122 = getelementptr inbounds %struct.III_side_info_t, ptr %3, i64 0, i32 1
  br i1 %120, label %123, label %233

123:                                              ; preds = %118
  %124 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %82, i32 noundef %121, i32 noundef 9) #57
  store ptr %124, ptr @frameSIPH, align 8, !tbaa !7
  %125 = load i32, ptr %85, align 4, !tbaa !173
  %126 = icmp eq i32 %125, 2
  %127 = load i32, ptr %122, align 4, !tbaa !179
  %128 = select i1 %126, i32 3, i32 5
  %129 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %124, i32 noundef %127, i32 noundef %128) #57
  store ptr %129, ptr @frameSIPH, align 8, !tbaa !7
  %130 = load i32, ptr %85, align 4, !tbaa !173
  %131 = icmp sgt i32 %130, 0
  br i1 %131, label %132, label %149

132:                                              ; preds = %144, %123
  %133 = phi i64 [ %145, %144 ], [ 0, %123 ]
  %134 = getelementptr inbounds [2 x ptr], ptr @channelSIPH, i64 0, i64 %133
  %135 = load ptr, ptr %134, align 8, !tbaa !7
  br label %136

136:                                              ; preds = %136, %132
  %137 = phi ptr [ %135, %132 ], [ %141, %136 ]
  %138 = phi i64 [ 0, %132 ], [ %142, %136 ]
  %139 = getelementptr inbounds %struct.III_side_info_t, ptr %3, i64 0, i32 3, i64 %133, i64 %138
  %140 = load i32, ptr %139, align 4, !tbaa !11
  %141 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %137, i32 noundef %140, i32 noundef 1) #57
  store ptr %141, ptr %134, align 8, !tbaa !7
  %142 = add nuw nsw i64 %138, 1
  %143 = icmp eq i64 %142, 4
  br i1 %143, label %144, label %136, !llvm.loop !180

144:                                              ; preds = %136
  %145 = add nuw nsw i64 %133, 1
  %146 = load i32, ptr %85, align 4, !tbaa !173
  %147 = sext i32 %146 to i64
  %148 = icmp slt i64 %145, %147
  br i1 %148, label %132, label %149, !llvm.loop !181

149:                                              ; preds = %144, %123
  %150 = phi i32 [ %130, %123 ], [ %146, %144 ]
  br label %151

151:                                              ; preds = %231, %149
  %152 = phi i32 [ %232, %231 ], [ %150, %149 ]
  %153 = phi i1 [ false, %231 ], [ true, %149 ]
  %154 = phi i64 [ 1, %231 ], [ 0, %149 ]
  %155 = icmp sgt i32 %152, 0
  br i1 %155, label %156, label %231

156:                                              ; preds = %151
  %157 = getelementptr inbounds %struct.III_side_info_t, ptr %3, i64 0, i32 4, i64 %154
  br label %158

158:                                              ; preds = %216, %156
  %159 = phi i64 [ 0, %156 ], [ %227, %216 ]
  %160 = getelementptr inbounds [2 x [2 x ptr]], ptr @spectrumSIPH, i64 0, i64 %154, i64 %159
  %161 = getelementptr inbounds [2 x %struct.gr_info_ss], ptr %157, i64 0, i64 %159
  %162 = load ptr, ptr %160, align 8, !tbaa !7
  %163 = load i32, ptr %161, align 8, !tbaa !182
  %164 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %162, i32 noundef %163, i32 noundef 12) #57
  store ptr %164, ptr %160, align 8, !tbaa !7
  %165 = getelementptr inbounds %struct.gr_info, ptr %161, i64 0, i32 1
  %166 = load i32, ptr %165, align 4, !tbaa !184
  %167 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %164, i32 noundef %166, i32 noundef 9) #57
  store ptr %167, ptr %160, align 8, !tbaa !7
  %168 = getelementptr inbounds %struct.gr_info, ptr %161, i64 0, i32 3
  %169 = load i32, ptr %168, align 4, !tbaa !185
  %170 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %167, i32 noundef %169, i32 noundef 8) #57
  store ptr %170, ptr %160, align 8, !tbaa !7
  %171 = getelementptr inbounds %struct.gr_info, ptr %161, i64 0, i32 4
  %172 = load i32, ptr %171, align 8, !tbaa !186
  %173 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %170, i32 noundef %172, i32 noundef 4) #57
  store ptr %173, ptr %160, align 8, !tbaa !7
  %174 = getelementptr inbounds %struct.gr_info, ptr %161, i64 0, i32 5
  %175 = load i32, ptr %174, align 4, !tbaa !187
  %176 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %173, i32 noundef %175, i32 noundef 1) #57
  store ptr %176, ptr %160, align 8, !tbaa !7
  %177 = load i32, ptr %174, align 4, !tbaa !187
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %201, label %179

179:                                              ; preds = %158
  %180 = getelementptr inbounds %struct.gr_info, ptr %161, i64 0, i32 6
  %181 = load i32, ptr %180, align 8, !tbaa !188
  %182 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %176, i32 noundef %181, i32 noundef 2) #57
  store ptr %182, ptr %160, align 8, !tbaa !7
  %183 = getelementptr inbounds %struct.gr_info, ptr %161, i64 0, i32 7
  %184 = load i32, ptr %183, align 4, !tbaa !189
  %185 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %182, i32 noundef %184, i32 noundef 1) #57
  store ptr %185, ptr %160, align 8, !tbaa !7
  br label %186

186:                                              ; preds = %186, %179
  %187 = phi ptr [ %185, %179 ], [ %192, %186 ]
  %188 = phi i1 [ true, %179 ], [ false, %186 ]
  %189 = phi i64 [ 0, %179 ], [ 1, %186 ]
  %190 = getelementptr inbounds %struct.gr_info, ptr %161, i64 0, i32 8, i64 %189
  %191 = load i32, ptr %190, align 4, !tbaa !11
  %192 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %187, i32 noundef %191, i32 noundef 5) #57
  store ptr %192, ptr %160, align 8, !tbaa !7
  br i1 %188, label %186, label %193, !llvm.loop !190

193:                                              ; preds = %193, %186
  %194 = phi ptr [ %198, %193 ], [ %192, %186 ]
  %195 = phi i64 [ %199, %193 ], [ 0, %186 ]
  %196 = getelementptr inbounds %struct.gr_info, ptr %161, i64 0, i32 9, i64 %195
  %197 = load i32, ptr %196, align 4, !tbaa !11
  %198 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %194, i32 noundef %197, i32 noundef 3) #57
  store ptr %198, ptr %160, align 8, !tbaa !7
  %199 = add nuw nsw i64 %195, 1
  %200 = icmp eq i64 %199, 3
  br i1 %200, label %216, label %193, !llvm.loop !191

201:                                              ; preds = %201, %158
  %202 = phi ptr [ %206, %201 ], [ %176, %158 ]
  %203 = phi i64 [ %207, %201 ], [ 0, %158 ]
  %204 = getelementptr inbounds %struct.gr_info, ptr %161, i64 0, i32 8, i64 %203
  %205 = load i32, ptr %204, align 4, !tbaa !11
  %206 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %202, i32 noundef %205, i32 noundef 5) #57
  store ptr %206, ptr %160, align 8, !tbaa !7
  %207 = add nuw nsw i64 %203, 1
  %208 = icmp eq i64 %207, 3
  br i1 %208, label %209, label %201, !llvm.loop !192

209:                                              ; preds = %201
  %.lcssa8 = phi ptr [ %206, %201 ]
  %210 = getelementptr inbounds %struct.gr_info, ptr %161, i64 0, i32 10
  %211 = load i32, ptr %210, align 8, !tbaa !193
  %212 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %.lcssa8, i32 noundef %211, i32 noundef 4) #57
  store ptr %212, ptr %160, align 8, !tbaa !7
  %213 = getelementptr inbounds %struct.gr_info, ptr %161, i64 0, i32 11
  %214 = load i32, ptr %213, align 4, !tbaa !194
  %215 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %212, i32 noundef %214, i32 noundef 3) #57
  store ptr %215, ptr %160, align 8, !tbaa !7
  br label %216

216:                                              ; preds = %209, %193
  %217 = phi ptr [ %215, %209 ], [ %198, %193 ]
  %218 = getelementptr inbounds %struct.gr_info, ptr %161, i64 0, i32 12
  %219 = load i32, ptr %218, align 8, !tbaa !195
  %220 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %217, i32 noundef %219, i32 noundef 1) #57
  store ptr %220, ptr %160, align 8, !tbaa !7
  %221 = getelementptr inbounds %struct.gr_info, ptr %161, i64 0, i32 13
  %222 = load i32, ptr %221, align 4, !tbaa !196
  %223 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %220, i32 noundef %222, i32 noundef 1) #57
  store ptr %223, ptr %160, align 8, !tbaa !7
  %224 = getelementptr inbounds %struct.gr_info, ptr %161, i64 0, i32 14
  %225 = load i32, ptr %224, align 8, !tbaa !197
  %226 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %223, i32 noundef %225, i32 noundef 1) #57
  store ptr %226, ptr %160, align 8, !tbaa !7
  %227 = add nuw nsw i64 %159, 1
  %228 = load i32, ptr %85, align 4, !tbaa !173
  %229 = sext i32 %228 to i64
  %230 = icmp slt i64 %227, %229
  br i1 %230, label %158, label %231, !llvm.loop !198

231:                                              ; preds = %216, %151
  %232 = phi i32 [ %152, %151 ], [ %228, %216 ]
  br i1 %153, label %151, label %314, !llvm.loop !199

233:                                              ; preds = %118
  %234 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %82, i32 noundef %121, i32 noundef 8) #57
  store ptr %234, ptr @frameSIPH, align 8, !tbaa !7
  %235 = load i32, ptr %85, align 4, !tbaa !173
  %236 = icmp eq i32 %235, 2
  %237 = load i32, ptr %122, align 4, !tbaa !179
  %238 = select i1 %236, i32 2, i32 1
  %239 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %234, i32 noundef %237, i32 noundef %238) #57
  store ptr %239, ptr @frameSIPH, align 8, !tbaa !7
  %240 = load i32, ptr %85, align 4, !tbaa !173
  %241 = icmp sgt i32 %240, 0
  br i1 %241, label %242, label %314

242:                                              ; preds = %233
  %243 = getelementptr inbounds %struct.III_side_info_t, ptr %3, i64 0, i32 4
  br label %244

244:                                              ; preds = %302, %242
  %245 = phi i64 [ 0, %242 ], [ %310, %302 ]
  %246 = getelementptr inbounds [2 x ptr], ptr @spectrumSIPH, i64 0, i64 %245
  %247 = getelementptr inbounds [2 x %struct.gr_info_ss], ptr %243, i64 0, i64 %245
  %248 = load ptr, ptr %246, align 8, !tbaa !7
  %249 = load i32, ptr %247, align 8, !tbaa !182
  %250 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %248, i32 noundef %249, i32 noundef 12) #57
  store ptr %250, ptr %246, align 8, !tbaa !7
  %251 = getelementptr inbounds %struct.gr_info, ptr %247, i64 0, i32 1
  %252 = load i32, ptr %251, align 4, !tbaa !184
  %253 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %250, i32 noundef %252, i32 noundef 9) #57
  store ptr %253, ptr %246, align 8, !tbaa !7
  %254 = getelementptr inbounds %struct.gr_info, ptr %247, i64 0, i32 3
  %255 = load i32, ptr %254, align 4, !tbaa !185
  %256 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %253, i32 noundef %255, i32 noundef 8) #57
  store ptr %256, ptr %246, align 8, !tbaa !7
  %257 = getelementptr inbounds %struct.gr_info, ptr %247, i64 0, i32 4
  %258 = load i32, ptr %257, align 8, !tbaa !186
  %259 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %256, i32 noundef %258, i32 noundef 9) #57
  store ptr %259, ptr %246, align 8, !tbaa !7
  %260 = getelementptr inbounds %struct.gr_info, ptr %247, i64 0, i32 5
  %261 = load i32, ptr %260, align 4, !tbaa !187
  %262 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %259, i32 noundef %261, i32 noundef 1) #57
  store ptr %262, ptr %246, align 8, !tbaa !7
  %263 = load i32, ptr %260, align 4, !tbaa !187
  %264 = icmp eq i32 %263, 0
  br i1 %264, label %287, label %265

265:                                              ; preds = %244
  %266 = getelementptr inbounds %struct.gr_info, ptr %247, i64 0, i32 6
  %267 = load i32, ptr %266, align 8, !tbaa !188
  %268 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %262, i32 noundef %267, i32 noundef 2) #57
  store ptr %268, ptr %246, align 8, !tbaa !7
  %269 = getelementptr inbounds %struct.gr_info, ptr %247, i64 0, i32 7
  %270 = load i32, ptr %269, align 4, !tbaa !189
  %271 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %268, i32 noundef %270, i32 noundef 1) #57
  store ptr %271, ptr %246, align 8, !tbaa !7
  br label %272

272:                                              ; preds = %272, %265
  %273 = phi ptr [ %271, %265 ], [ %278, %272 ]
  %274 = phi i1 [ true, %265 ], [ false, %272 ]
  %275 = phi i64 [ 0, %265 ], [ 1, %272 ]
  %276 = getelementptr inbounds %struct.gr_info, ptr %247, i64 0, i32 8, i64 %275
  %277 = load i32, ptr %276, align 4, !tbaa !11
  %278 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %273, i32 noundef %277, i32 noundef 5) #57
  store ptr %278, ptr %246, align 8, !tbaa !7
  br i1 %274, label %272, label %279, !llvm.loop !200

279:                                              ; preds = %279, %272
  %280 = phi ptr [ %284, %279 ], [ %278, %272 ]
  %281 = phi i64 [ %285, %279 ], [ 0, %272 ]
  %282 = getelementptr inbounds %struct.gr_info, ptr %247, i64 0, i32 9, i64 %281
  %283 = load i32, ptr %282, align 4, !tbaa !11
  %284 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %280, i32 noundef %283, i32 noundef 3) #57
  store ptr %284, ptr %246, align 8, !tbaa !7
  %285 = add nuw nsw i64 %281, 1
  %286 = icmp eq i64 %285, 3
  br i1 %286, label %302, label %279, !llvm.loop !201

287:                                              ; preds = %287, %244
  %288 = phi ptr [ %292, %287 ], [ %262, %244 ]
  %289 = phi i64 [ %293, %287 ], [ 0, %244 ]
  %290 = getelementptr inbounds %struct.gr_info, ptr %247, i64 0, i32 8, i64 %289
  %291 = load i32, ptr %290, align 4, !tbaa !11
  %292 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %288, i32 noundef %291, i32 noundef 5) #57
  store ptr %292, ptr %246, align 8, !tbaa !7
  %293 = add nuw nsw i64 %289, 1
  %294 = icmp eq i64 %293, 3
  br i1 %294, label %295, label %287, !llvm.loop !202

295:                                              ; preds = %287
  %.lcssa9 = phi ptr [ %292, %287 ]
  %296 = getelementptr inbounds %struct.gr_info, ptr %247, i64 0, i32 10
  %297 = load i32, ptr %296, align 8, !tbaa !193
  %298 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %.lcssa9, i32 noundef %297, i32 noundef 4) #57
  store ptr %298, ptr %246, align 8, !tbaa !7
  %299 = getelementptr inbounds %struct.gr_info, ptr %247, i64 0, i32 11
  %300 = load i32, ptr %299, align 4, !tbaa !194
  %301 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %298, i32 noundef %300, i32 noundef 3) #57
  store ptr %301, ptr %246, align 8, !tbaa !7
  br label %302

302:                                              ; preds = %295, %279
  %303 = phi ptr [ %301, %295 ], [ %284, %279 ]
  %304 = getelementptr inbounds %struct.gr_info, ptr %247, i64 0, i32 13
  %305 = load i32, ptr %304, align 4, !tbaa !196
  %306 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %303, i32 noundef %305, i32 noundef 1) #57
  store ptr %306, ptr %246, align 8, !tbaa !7
  %307 = getelementptr inbounds %struct.gr_info, ptr %247, i64 0, i32 14
  %308 = load i32, ptr %307, align 8, !tbaa !197
  %309 = tail call fastcc ptr @CRC_BF_addEntry(ptr noundef %306, i32 noundef %308, i32 noundef 1) #57
  store ptr %309, ptr %246, align 8, !tbaa !7
  %310 = add nuw nsw i64 %245, 1
  %311 = load i32, ptr %85, align 4, !tbaa !173
  %312 = sext i32 %311 to i64
  %313 = icmp slt i64 %310, %312
  br i1 %313, label %244, label %314, !llvm.loop !203

314:                                              ; preds = %302, %233, %231
  %315 = phi i32 [ %240, %233 ], [ %232, %231 ], [ %311, %302 ]
  %316 = load i32, ptr %50, align 4, !tbaa !163
  %317 = icmp eq i32 %316, 0
  br i1 %317, label %323, label %318

318:                                              ; preds = %314
  %319 = load ptr, ptr @headerPH, align 8, !tbaa !7
  %320 = load i32, ptr @crc, align 4, !tbaa !11
  %321 = tail call ptr @BF_addEntry(ptr noundef %319, i32 noundef %320, i32 noundef 16) #55
  store ptr %321, ptr @headerPH, align 8, !tbaa !7
  %322 = load i32, ptr %85, align 4, !tbaa !173
  br label %323

323:                                              ; preds = %318, %314
  %324 = phi i32 [ %315, %314 ], [ %322, %318 ]
  %325 = load i32, ptr %91, align 8, !tbaa !136
  %326 = icmp sgt i32 %325, 0
  br i1 %326, label %327, label %357

327:                                              ; preds = %323
  %328 = icmp sgt i32 %324, 0
  %329 = zext i32 %325 to i64
  %330 = zext i32 %324 to i64
  br label %331

331:                                              ; preds = %341, %327
  %332 = phi i64 [ 0, %327 ], [ %342, %341 ]
  br i1 %328, label %333, label %341

333:                                              ; preds = %333, %331
  %334 = phi i64 [ %339, %333 ], [ 0, %331 ]
  %335 = getelementptr inbounds [2 x [2 x ptr]], ptr @scaleFactorsPH, i64 0, i64 %332, i64 %334
  %336 = load ptr, ptr %335, align 8, !tbaa !7
  %337 = getelementptr inbounds %struct.BF_BitstreamPart, ptr %336, i64 0, i32 1
  %338 = load ptr, ptr %337, align 8, !tbaa !102
  store i32 0, ptr %338, align 8, !tbaa !66
  %339 = add nuw nsw i64 %334, 1
  %340 = icmp eq i64 %339, %330
  br i1 %340, label %341, label %333, !llvm.loop !204

341:                                              ; preds = %333, %331
  %342 = add nuw nsw i64 %332, 1
  %343 = icmp eq i64 %342, %329
  br i1 %343, label %344, label %331, !llvm.loop !205

344:                                              ; preds = %354, %341
  %345 = phi i64 [ %355, %354 ], [ 0, %341 ]
  br i1 %328, label %346, label %354

346:                                              ; preds = %346, %344
  %347 = phi i64 [ %352, %346 ], [ 0, %344 ]
  %348 = getelementptr inbounds [2 x [2 x ptr]], ptr @codedDataPH, i64 0, i64 %345, i64 %347
  %349 = load ptr, ptr %348, align 8, !tbaa !7
  %350 = getelementptr inbounds %struct.BF_BitstreamPart, ptr %349, i64 0, i32 1
  %351 = load ptr, ptr %350, align 8, !tbaa !102
  store i32 0, ptr %351, align 8, !tbaa !66
  %352 = add nuw nsw i64 %347, 1
  %353 = icmp eq i64 %352, %330
  br i1 %353, label %354, label %346, !llvm.loop !206

354:                                              ; preds = %346, %344
  %355 = add nuw nsw i64 %345, 1
  %356 = icmp eq i64 %355, %329
  br i1 %356, label %357, label %344, !llvm.loop !207

357:                                              ; preds = %354, %323
  %358 = load i32, ptr %46, align 8, !tbaa !162
  %359 = icmp eq i32 %358, 1
  br i1 %359, label %364, label %360

360:                                              ; preds = %357
  %361 = icmp sgt i32 %324, 0
  br i1 %361, label %362, label %574

362:                                              ; preds = %360
  %363 = getelementptr inbounds %struct.III_side_info_t, ptr %3, i64 0, i32 4
  br label %494

364:                                              ; preds = %492, %357
  %365 = phi i32 [ %493, %492 ], [ %324, %357 ]
  %366 = phi i1 [ false, %492 ], [ true, %357 ]
  %367 = phi i64 [ 1, %492 ], [ 0, %357 ]
  %368 = icmp sgt i32 %365, 0
  br i1 %368, label %369, label %492

369:                                              ; preds = %364
  %370 = getelementptr inbounds %struct.III_side_info_t, ptr %3, i64 0, i32 4, i64 %367
  br label %371

371:                                              ; preds = %486, %369
  %372 = phi i64 [ 0, %369 ], [ %488, %486 ]
  %373 = getelementptr inbounds [2 x [2 x ptr]], ptr @scaleFactorsPH, i64 0, i64 %367, i64 %372
  %374 = getelementptr inbounds [2 x %struct.gr_info_ss], ptr %370, i64 0, i64 %372
  %375 = getelementptr inbounds %struct.gr_info, ptr %374, i64 0, i32 4
  %376 = load i32, ptr %375, align 8, !tbaa !186
  %377 = zext i32 %376 to i64
  %378 = getelementptr inbounds [16 x i32], ptr @slen1_tab, i64 0, i64 %377
  %379 = load i32, ptr %378, align 4, !tbaa !11
  %380 = getelementptr inbounds [16 x i32], ptr @slen2_tab, i64 0, i64 %377
  %381 = load i32, ptr %380, align 4, !tbaa !11
  %382 = getelementptr inbounds [2 x [576 x i32]], ptr %2, i64 %367, i64 %372
  %383 = getelementptr inbounds %struct.gr_info, ptr %374, i64 0, i32 6
  %384 = load i32, ptr %383, align 8, !tbaa !188
  %385 = icmp eq i32 %384, 2
  br i1 %385, label %386, label %416

386:                                              ; preds = %371
  %387 = load ptr, ptr %373, align 8, !tbaa !7
  br label %388

388:                                              ; preds = %399, %386
  %389 = phi ptr [ %387, %386 ], [ %.lcssa3, %399 ]
  %390 = phi i64 [ 0, %386 ], [ %400, %399 ]
  br label %391

391:                                              ; preds = %391, %388
  %392 = phi ptr [ %389, %388 ], [ %396, %391 ]
  %393 = phi i64 [ 0, %388 ], [ %397, %391 ]
  %394 = getelementptr inbounds [2 x %struct.III_scalefac_t], ptr %4, i64 %367, i64 %372, i32 1, i64 %390, i64 %393
  %395 = load i32, ptr %394, align 4, !tbaa !11
  %396 = tail call ptr @BF_addEntry(ptr noundef %392, i32 noundef %395, i32 noundef %379) #55
  store ptr %396, ptr %373, align 8, !tbaa !7
  %397 = add nuw nsw i64 %393, 1
  %398 = icmp eq i64 %397, 3
  br i1 %398, label %399, label %391, !llvm.loop !208

399:                                              ; preds = %391
  %.lcssa3 = phi ptr [ %396, %391 ]
  %400 = add nuw nsw i64 %390, 1
  %401 = icmp eq i64 %400, 6
  br i1 %401, label %402, label %388, !llvm.loop !209

402:                                              ; preds = %413, %399
  %403 = phi ptr [ %.lcssa4, %413 ], [ %.lcssa3, %399 ]
  %404 = phi i64 [ %414, %413 ], [ 6, %399 ]
  br label %405

405:                                              ; preds = %405, %402
  %406 = phi ptr [ %403, %402 ], [ %410, %405 ]
  %407 = phi i64 [ 0, %402 ], [ %411, %405 ]
  %408 = getelementptr inbounds [2 x %struct.III_scalefac_t], ptr %4, i64 %367, i64 %372, i32 1, i64 %404, i64 %407
  %409 = load i32, ptr %408, align 4, !tbaa !11
  %410 = tail call ptr @BF_addEntry(ptr noundef %406, i32 noundef %409, i32 noundef %381) #55
  store ptr %410, ptr %373, align 8, !tbaa !7
  %411 = add nuw nsw i64 %407, 1
  %412 = icmp eq i64 %411, 3
  br i1 %412, label %413, label %405, !llvm.loop !210

413:                                              ; preds = %405
  %.lcssa4 = phi ptr [ %410, %405 ]
  %414 = add nuw nsw i64 %404, 1
  %415 = icmp eq i64 %414, 12
  br i1 %415, label %486, label %402, !llvm.loop !211

416:                                              ; preds = %371
  br i1 %366, label %421, label %417

417:                                              ; preds = %416
  %418 = getelementptr inbounds %struct.III_side_info_t, ptr %3, i64 0, i32 3, i64 %372
  %419 = load i32, ptr %418, align 4, !tbaa !11
  %420 = icmp eq i32 %419, 0
  br i1 %420, label %421, label %433

421:                                              ; preds = %417, %416
  %422 = getelementptr inbounds [2 x %struct.III_scalefac_t], ptr %4, i64 %367, i64 %372
  %423 = load ptr, ptr %373, align 8, !tbaa !7
  br label %424

424:                                              ; preds = %424, %421
  %425 = phi ptr [ %423, %421 ], [ %429, %424 ]
  %426 = phi i64 [ 0, %421 ], [ %430, %424 ]
  %427 = getelementptr inbounds [22 x i32], ptr %422, i64 0, i64 %426
  %428 = load i32, ptr %427, align 4, !tbaa !11
  %429 = tail call ptr @BF_addEntry(ptr noundef %425, i32 noundef %428, i32 noundef %379) #55
  store ptr %429, ptr %373, align 8, !tbaa !7
  %430 = add nuw nsw i64 %426, 1
  %431 = icmp eq i64 %430, 6
  br i1 %431, label %432, label %424, !llvm.loop !212

432:                                              ; preds = %424
  %.lcssa = phi ptr [ %429, %424 ]
  br i1 %366, label %439, label %433

433:                                              ; preds = %432, %417
  %434 = getelementptr inbounds %struct.III_side_info_t, ptr %3, i64 0, i32 3, i64 %372, i64 1
  %435 = load i32, ptr %434, align 4, !tbaa !11
  %436 = icmp eq i32 %435, 0
  br i1 %436, label %437, label %451

437:                                              ; preds = %433
  %438 = load ptr, ptr %373, align 8, !tbaa !7
  br label %439

439:                                              ; preds = %437, %432
  %440 = phi ptr [ %438, %437 ], [ %.lcssa, %432 ]
  %441 = getelementptr inbounds [2 x %struct.III_scalefac_t], ptr %4, i64 %367, i64 %372
  br label %442

442:                                              ; preds = %442, %439
  %443 = phi ptr [ %440, %439 ], [ %447, %442 ]
  %444 = phi i64 [ 6, %439 ], [ %448, %442 ]
  %445 = getelementptr inbounds [22 x i32], ptr %441, i64 0, i64 %444
  %446 = load i32, ptr %445, align 4, !tbaa !11
  %447 = tail call ptr @BF_addEntry(ptr noundef %443, i32 noundef %446, i32 noundef %379) #55
  store ptr %447, ptr %373, align 8, !tbaa !7
  %448 = add nuw nsw i64 %444, 1
  %449 = icmp eq i64 %448, 11
  br i1 %449, label %450, label %442, !llvm.loop !213

450:                                              ; preds = %442
  %.lcssa1 = phi ptr [ %447, %442 ]
  br i1 %366, label %457, label %451

451:                                              ; preds = %450, %433
  %452 = getelementptr inbounds %struct.III_side_info_t, ptr %3, i64 0, i32 3, i64 %372, i64 2
  %453 = load i32, ptr %452, align 4, !tbaa !11
  %454 = icmp eq i32 %453, 0
  br i1 %454, label %455, label %469

455:                                              ; preds = %451
  %456 = load ptr, ptr %373, align 8, !tbaa !7
  br label %457

457:                                              ; preds = %455, %450
  %458 = phi ptr [ %456, %455 ], [ %.lcssa1, %450 ]
  %459 = getelementptr inbounds [2 x %struct.III_scalefac_t], ptr %4, i64 %367, i64 %372
  br label %460

460:                                              ; preds = %460, %457
  %461 = phi ptr [ %458, %457 ], [ %465, %460 ]
  %462 = phi i64 [ 11, %457 ], [ %466, %460 ]
  %463 = getelementptr inbounds [22 x i32], ptr %459, i64 0, i64 %462
  %464 = load i32, ptr %463, align 4, !tbaa !11
  %465 = tail call ptr @BF_addEntry(ptr noundef %461, i32 noundef %464, i32 noundef %381) #55
  store ptr %465, ptr %373, align 8, !tbaa !7
  %466 = add nuw nsw i64 %462, 1
  %467 = icmp eq i64 %466, 16
  br i1 %467, label %468, label %460, !llvm.loop !214

468:                                              ; preds = %460
  %.lcssa2 = phi ptr [ %465, %460 ]
  br i1 %366, label %475, label %469

469:                                              ; preds = %468, %451
  %470 = getelementptr inbounds %struct.III_side_info_t, ptr %3, i64 0, i32 3, i64 %372, i64 3
  %471 = load i32, ptr %470, align 4, !tbaa !11
  %472 = icmp eq i32 %471, 0
  br i1 %472, label %473, label %486

473:                                              ; preds = %469
  %474 = load ptr, ptr %373, align 8, !tbaa !7
  br label %475

475:                                              ; preds = %473, %468
  %476 = phi ptr [ %474, %473 ], [ %.lcssa2, %468 ]
  %477 = getelementptr inbounds [2 x %struct.III_scalefac_t], ptr %4, i64 %367, i64 %372
  br label %478

478:                                              ; preds = %478, %475
  %479 = phi ptr [ %476, %475 ], [ %483, %478 ]
  %480 = phi i64 [ 16, %475 ], [ %484, %478 ]
  %481 = getelementptr inbounds [22 x i32], ptr %477, i64 0, i64 %480
  %482 = load i32, ptr %481, align 4, !tbaa !11
  %483 = tail call ptr @BF_addEntry(ptr noundef %479, i32 noundef %482, i32 noundef %381) #55
  store ptr %483, ptr %373, align 8, !tbaa !7
  %484 = add nuw nsw i64 %480, 1
  %485 = icmp eq i64 %484, 21
  br i1 %485, label %486, label %478, !llvm.loop !215

486:                                              ; preds = %478, %469, %413
  %487 = getelementptr inbounds [2 x [2 x ptr]], ptr @codedDataPH, i64 0, i64 %367, i64 %372
  tail call fastcc void @Huffmancodebits(ptr noundef nonnull %487, ptr noundef %382, ptr noundef nonnull %374) #57
  %488 = add nuw nsw i64 %372, 1
  %489 = load i32, ptr %85, align 4, !tbaa !173
  %490 = sext i32 %489 to i64
  %491 = icmp slt i64 %488, %490
  br i1 %491, label %371, label %492, !llvm.loop !216

492:                                              ; preds = %486, %364
  %493 = phi i32 [ %365, %364 ], [ %489, %486 ]
  br i1 %366, label %364, label %574, !llvm.loop !217

494:                                              ; preds = %568, %362
  %495 = phi i64 [ 0, %362 ], [ %570, %568 ]
  %496 = getelementptr inbounds [2 x ptr], ptr @scaleFactorsPH, i64 0, i64 %495
  %497 = getelementptr inbounds [2 x %struct.gr_info_ss], ptr %363, i64 0, i64 %495
  %498 = getelementptr inbounds [2 x [576 x i32]], ptr %2, i64 0, i64 %495
  %499 = getelementptr inbounds %struct.gr_info, ptr %497, i64 0, i32 6
  %500 = load i32, ptr %499, align 8, !tbaa !188
  %501 = icmp eq i32 %500, 2
  %502 = getelementptr inbounds %struct.gr_info, ptr %497, i64 0, i32 19
  br i1 %501, label %505, label %503

503:                                              ; preds = %494
  %504 = getelementptr inbounds [2 x %struct.III_scalefac_t], ptr %4, i64 0, i64 %495
  br label %540

505:                                              ; preds = %536, %494
  %506 = phi i64 [ %538, %536 ], [ 0, %494 ]
  %507 = phi i32 [ %537, %536 ], [ 0, %494 ]
  %508 = load ptr, ptr %502, align 8, !tbaa !218
  %509 = getelementptr inbounds i32, ptr %508, i64 %506
  %510 = load i32, ptr %509, align 4, !tbaa !11
  %511 = getelementptr inbounds %struct.gr_info, ptr %497, i64 0, i32 20, i64 %506
  %512 = load i32, ptr %511, align 4, !tbaa !11
  %513 = icmp ult i32 %510, 3
  br i1 %513, label %536, label %514

514:                                              ; preds = %505
  %515 = udiv i32 %510, 3
  %516 = sext i32 %507 to i64
  %517 = load ptr, ptr %496, align 8, !tbaa !7
  br label %518

518:                                              ; preds = %530, %514
  %519 = phi ptr [ %517, %514 ], [ %.lcssa6, %530 ]
  %520 = phi i64 [ %516, %514 ], [ %532, %530 ]
  %521 = phi i32 [ 0, %514 ], [ %531, %530 ]
  br label %522

522:                                              ; preds = %522, %518
  %523 = phi ptr [ %519, %518 ], [ %527, %522 ]
  %524 = phi i64 [ 0, %518 ], [ %528, %522 ]
  %525 = getelementptr inbounds [2 x %struct.III_scalefac_t], ptr %4, i64 0, i64 %495, i32 1, i64 %520, i64 %524
  %526 = load i32, ptr %525, align 4, !tbaa !11
  %527 = tail call ptr @BF_addEntry(ptr noundef %523, i32 noundef %526, i32 noundef %512) #55
  store ptr %527, ptr %496, align 8, !tbaa !7
  %528 = add nuw nsw i64 %524, 1
  %529 = icmp eq i64 %528, 3
  br i1 %529, label %530, label %522, !llvm.loop !219

530:                                              ; preds = %522
  %.lcssa6 = phi ptr [ %527, %522 ]
  %531 = add nuw nsw i32 %521, 1
  %532 = add nsw i64 %520, 1
  %533 = icmp eq i32 %531, %515
  br i1 %533, label %534, label %518, !llvm.loop !220

534:                                              ; preds = %530
  %.lcssa7 = phi i64 [ %532, %530 ]
  %535 = trunc i64 %.lcssa7 to i32
  br label %536

536:                                              ; preds = %534, %505
  %537 = phi i32 [ %507, %505 ], [ %535, %534 ]
  %538 = add nuw nsw i64 %506, 1
  %539 = icmp eq i64 %538, 4
  br i1 %539, label %568, label %505, !llvm.loop !221

540:                                              ; preds = %564, %503
  %541 = phi i64 [ 0, %503 ], [ %566, %564 ]
  %542 = phi i32 [ 0, %503 ], [ %565, %564 ]
  %543 = load ptr, ptr %502, align 8, !tbaa !218
  %544 = getelementptr inbounds i32, ptr %543, i64 %541
  %545 = load i32, ptr %544, align 4, !tbaa !11
  %546 = getelementptr inbounds %struct.gr_info, ptr %497, i64 0, i32 20, i64 %541
  %547 = load i32, ptr %546, align 4, !tbaa !11
  %548 = icmp sgt i32 %545, 0
  br i1 %548, label %549, label %564

549:                                              ; preds = %540
  %550 = sext i32 %542 to i64
  %551 = load ptr, ptr %496, align 8, !tbaa !7
  br label %552

552:                                              ; preds = %552, %549
  %553 = phi ptr [ %551, %549 ], [ %558, %552 ]
  %554 = phi i64 [ %550, %549 ], [ %560, %552 ]
  %555 = phi i32 [ 0, %549 ], [ %559, %552 ]
  %556 = getelementptr inbounds [22 x i32], ptr %504, i64 0, i64 %554
  %557 = load i32, ptr %556, align 4, !tbaa !11
  %558 = tail call ptr @BF_addEntry(ptr noundef %553, i32 noundef %557, i32 noundef %547) #55
  store ptr %558, ptr %496, align 8, !tbaa !7
  %559 = add nuw nsw i32 %555, 1
  %560 = add nsw i64 %554, 1
  %561 = icmp eq i32 %559, %545
  br i1 %561, label %562, label %552, !llvm.loop !222

562:                                              ; preds = %552
  %.lcssa5 = phi i64 [ %560, %552 ]
  %563 = trunc i64 %.lcssa5 to i32
  br label %564

564:                                              ; preds = %562, %540
  %565 = phi i32 [ %542, %540 ], [ %563, %562 ]
  %566 = add nuw nsw i64 %541, 1
  %567 = icmp eq i64 %566, 4
  br i1 %567, label %568, label %540, !llvm.loop !223

568:                                              ; preds = %564, %536
  %569 = getelementptr inbounds [2 x ptr], ptr @codedDataPH, i64 0, i64 %495
  tail call fastcc void @Huffmancodebits(ptr noundef nonnull %569, ptr noundef %498, ptr noundef nonnull %497) #57
  %570 = add nuw nsw i64 %495, 1
  %571 = load i32, ptr %85, align 4, !tbaa !173
  %572 = sext i32 %571 to i64
  %573 = icmp slt i64 %570, %572
  br i1 %573, label %494, label %574, !llvm.loop !224

574:                                              ; preds = %568, %492, %360
  %575 = getelementptr inbounds %struct.III_side_info_t, ptr %3, i64 0, i32 2
  %576 = load i32, ptr %575, align 8, !tbaa !225
  %577 = sdiv i32 %576, 32
  %578 = srem i32 %576, 32
  %579 = load ptr, ptr @userFrameDataPH, align 8, !tbaa !7
  %580 = getelementptr inbounds %struct.BF_BitstreamPart, ptr %579, i64 0, i32 1
  %581 = load ptr, ptr %580, align 8, !tbaa !102
  store i32 0, ptr %581, align 8, !tbaa !66
  %582 = icmp sgt i32 %576, 31
  br i1 %582, label %583, label %589

583:                                              ; preds = %583, %574
  %584 = phi ptr [ %586, %583 ], [ %579, %574 ]
  %585 = phi i32 [ %587, %583 ], [ 0, %574 ]
  %586 = tail call ptr @BF_addEntry(ptr noundef %584, i32 noundef 0, i32 noundef 32) #55
  store ptr %586, ptr @userFrameDataPH, align 8, !tbaa !7
  %587 = add nuw nsw i32 %585, 1
  %588 = icmp eq i32 %587, %577
  br i1 %588, label %589, label %583, !llvm.loop !226

589:                                              ; preds = %583, %574
  %590 = phi ptr [ %579, %574 ], [ %586, %583 ]
  %591 = icmp eq i32 %578, 0
  br i1 %591, label %594, label %592

592:                                              ; preds = %589
  %593 = tail call ptr @BF_addEntry(ptr noundef %590, i32 noundef 0, i32 noundef %578) #55
  store ptr %593, ptr @userFrameDataPH, align 8, !tbaa !7
  br label %594

594:                                              ; preds = %592, %589
  %595 = load ptr, ptr @frameData, align 8, !tbaa !7
  store i32 %1, ptr %595, align 8, !tbaa !79
  %596 = load i32, ptr %91, align 8, !tbaa !136
  %597 = getelementptr inbounds %struct.BF_FrameData, ptr %595, i64 0, i32 1
  store i32 %596, ptr %597, align 4, !tbaa !74
  %598 = load i32, ptr %85, align 4, !tbaa !173
  %599 = getelementptr inbounds %struct.BF_FrameData, ptr %595, i64 0, i32 2
  store i32 %598, ptr %599, align 8, !tbaa !73
  %600 = load ptr, ptr @headerPH, align 8, !tbaa !7
  %601 = getelementptr inbounds %struct.BF_BitstreamPart, ptr %600, i64 0, i32 1
  %602 = load ptr, ptr %601, align 8, !tbaa !102
  %603 = getelementptr inbounds %struct.BF_FrameData, ptr %595, i64 0, i32 3
  store ptr %602, ptr %603, align 8, !tbaa !64
  %604 = load ptr, ptr @frameSIPH, align 8, !tbaa !7
  %605 = getelementptr inbounds %struct.BF_BitstreamPart, ptr %604, i64 0, i32 1
  %606 = load ptr, ptr %605, align 8, !tbaa !102
  %607 = getelementptr inbounds %struct.BF_FrameData, ptr %595, i64 0, i32 4
  store ptr %606, ptr %607, align 8, !tbaa !71
  %608 = icmp sgt i32 %598, 0
  br i1 %608, label %609, label %611

609:                                              ; preds = %594
  %610 = zext i32 %598 to i64
  br label %616

611:                                              ; preds = %616, %594
  %612 = icmp sgt i32 %596, 0
  br i1 %612, label %613, label %659

613:                                              ; preds = %611
  %614 = zext i32 %596 to i64
  %615 = zext i32 %598 to i64
  br label %626

616:                                              ; preds = %616, %609
  %617 = phi i64 [ 0, %609 ], [ %624, %616 ]
  %618 = getelementptr inbounds [2 x ptr], ptr @channelSIPH, i64 0, i64 %617
  %619 = load ptr, ptr %618, align 8, !tbaa !7
  %620 = getelementptr inbounds %struct.BF_BitstreamPart, ptr %619, i64 0, i32 1
  %621 = load ptr, ptr %620, align 8, !tbaa !102
  %622 = load ptr, ptr @frameData, align 8, !tbaa !7
  %623 = getelementptr inbounds %struct.BF_FrameData, ptr %622, i64 0, i32 5, i64 %617
  store ptr %621, ptr %623, align 8, !tbaa !7
  %624 = add nuw nsw i64 %617, 1
  %625 = icmp eq i64 %624, %610
  br i1 %625, label %611, label %616, !llvm.loop !227

626:                                              ; preds = %656, %613
  %627 = phi i64 [ 0, %613 ], [ %657, %656 ]
  br i1 %608, label %628, label %656

628:                                              ; preds = %628, %626
  %629 = phi i64 [ %654, %628 ], [ 0, %626 ]
  %630 = getelementptr inbounds [2 x [2 x ptr]], ptr @spectrumSIPH, i64 0, i64 %627, i64 %629
  %631 = load ptr, ptr %630, align 8, !tbaa !7
  %632 = getelementptr inbounds %struct.BF_BitstreamPart, ptr %631, i64 0, i32 1
  %633 = load ptr, ptr %632, align 8, !tbaa !102
  %634 = load ptr, ptr @frameData, align 8, !tbaa !7
  %635 = getelementptr inbounds %struct.BF_FrameData, ptr %634, i64 0, i32 6, i64 %627, i64 %629
  store ptr %633, ptr %635, align 8, !tbaa !7
  %636 = getelementptr inbounds [2 x [2 x ptr]], ptr @scaleFactorsPH, i64 0, i64 %627, i64 %629
  %637 = load ptr, ptr %636, align 8, !tbaa !7
  %638 = getelementptr inbounds %struct.BF_BitstreamPart, ptr %637, i64 0, i32 1
  %639 = load ptr, ptr %638, align 8, !tbaa !102
  %640 = load ptr, ptr @frameData, align 8, !tbaa !7
  %641 = getelementptr inbounds %struct.BF_FrameData, ptr %640, i64 0, i32 7, i64 %627, i64 %629
  store ptr %639, ptr %641, align 8, !tbaa !7
  %642 = getelementptr inbounds [2 x [2 x ptr]], ptr @codedDataPH, i64 0, i64 %627, i64 %629
  %643 = load ptr, ptr %642, align 8, !tbaa !7
  %644 = getelementptr inbounds %struct.BF_BitstreamPart, ptr %643, i64 0, i32 1
  %645 = load ptr, ptr %644, align 8, !tbaa !102
  %646 = load ptr, ptr @frameData, align 8, !tbaa !7
  %647 = getelementptr inbounds %struct.BF_FrameData, ptr %646, i64 0, i32 8, i64 %627, i64 %629
  store ptr %645, ptr %647, align 8, !tbaa !7
  %648 = getelementptr inbounds [2 x [2 x ptr]], ptr @userSpectrumPH, i64 0, i64 %627, i64 %629
  %649 = load ptr, ptr %648, align 8, !tbaa !7
  %650 = getelementptr inbounds %struct.BF_BitstreamPart, ptr %649, i64 0, i32 1
  %651 = load ptr, ptr %650, align 8, !tbaa !102
  %652 = load ptr, ptr @frameData, align 8, !tbaa !7
  %653 = getelementptr inbounds %struct.BF_FrameData, ptr %652, i64 0, i32 9, i64 %627, i64 %629
  store ptr %651, ptr %653, align 8, !tbaa !7
  %654 = add nuw nsw i64 %629, 1
  %655 = icmp eq i64 %654, %615
  br i1 %655, label %656, label %628, !llvm.loop !228

656:                                              ; preds = %628, %626
  %657 = add nuw nsw i64 %627, 1
  %658 = icmp eq i64 %657, %614
  br i1 %658, label %659, label %626, !llvm.loop !229

659:                                              ; preds = %656, %611
  %660 = load ptr, ptr @userFrameDataPH, align 8, !tbaa !7
  %661 = getelementptr inbounds %struct.BF_BitstreamPart, ptr %660, i64 0, i32 1
  %662 = load ptr, ptr %661, align 8, !tbaa !102
  %663 = load ptr, ptr @frameData, align 8, !tbaa !7
  %664 = getelementptr inbounds %struct.BF_FrameData, ptr %663, i64 0, i32 10
  store ptr %662, ptr %664, align 8, !tbaa !97
  %665 = load ptr, ptr @frameResults, align 8, !tbaa !7
  tail call void @BF_BitstreamFrame(ptr noundef %663, ptr noundef %665) #55
  %666 = load ptr, ptr @frameResults, align 8, !tbaa !7
  %667 = getelementptr inbounds %struct.BF_FrameResults, ptr %666, i64 0, i32 2
  %668 = load i32, ptr %667, align 4, !tbaa !99
  store i32 %668, ptr %3, align 8, !tbaa !177
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc ptr @CRC_BF_addEntry(ptr noundef %0, i32 noundef %1, i32 noundef %2) unnamed_addr #4 {
  %4 = load i32, ptr @crc, align 4, !tbaa !11
  %5 = icmp eq i32 %2, 0
  br i1 %5, label %21, label %6

6:                                                ; preds = %3
  %7 = shl nuw nsw i32 1, %2
  br label %8

8:                                                ; preds = %8, %6
  %9 = phi i32 [ %11, %8 ], [ %7, %6 ]
  %10 = phi i32 [ %19, %8 ], [ %4, %6 ]
  %11 = lshr i32 %9, 1
  %12 = shl i32 %10, 1
  %13 = and i32 %11, %1
  %14 = icmp ne i32 %13, 0
  %15 = and i32 %10, 32768
  %16 = icmp ne i32 %15, 0
  %17 = xor i1 %14, %16
  %18 = xor i32 %12, 32773
  %19 = select i1 %17, i32 %18, i32 %12
  %20 = icmp ult i32 %9, 4
  br i1 %20, label %21, label %8, !llvm.loop !230

21:                                               ; preds = %8, %3
  %22 = phi i32 [ %4, %3 ], [ %19, %8 ]
  %23 = and i32 %22, 65535
  store i32 %23, ptr @crc, align 4, !tbaa !11
  %24 = tail call ptr @BF_addEntry(ptr noundef %0, i32 noundef %1, i32 noundef %2) #55
  ret ptr %24
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @Huffmancodebits(ptr nocapture noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2) unnamed_addr #4 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4) #56
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5) #56
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6) #56
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %7) #56
  %8 = getelementptr inbounds %struct.gr_info, ptr %2, i64 0, i32 1
  %9 = load i32, ptr %8, align 4, !tbaa !184
  %10 = shl i32 %9, 1
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %118, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %struct.gr_info, ptr %2, i64 0, i32 7
  %14 = load i32, ptr %13, align 4, !tbaa !189
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %81

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.gr_info, ptr %2, i64 0, i32 6
  %18 = load i32, ptr %17, align 8, !tbaa !188
  %19 = icmp eq i32 %18, 2
  br i1 %19, label %20, label %65

20:                                               ; preds = %16
  %21 = getelementptr inbounds %struct.gr_info, ptr %2, i64 0, i32 8
  %22 = getelementptr inbounds %struct.gr_info, ptr %2, i64 0, i32 8, i64 1
  br label %25

23:                                               ; preds = %61
  %.lcssa = phi i32 [ %62, %61 ]
  %24 = icmp eq i64 %30, 13
  br i1 %24, label %118, label %25, !llvm.loop !231

25:                                               ; preds = %23, %20
  %26 = phi i64 [ 0, %20 ], [ %30, %23 ]
  %27 = phi i32 [ 0, %20 ], [ %.lcssa, %23 ]
  %28 = getelementptr inbounds %struct.scalefac_struct, ptr @scalefac_band, i64 0, i32 1, i64 %26
  %29 = load i32, ptr %28, align 4, !tbaa !11
  %30 = add nuw nsw i64 %26, 1
  %31 = getelementptr inbounds %struct.scalefac_struct, ptr @scalefac_band, i64 0, i32 1, i64 %30
  %32 = load i32, ptr %31, align 4, !tbaa !11
  %33 = icmp slt i32 %29, 12
  %34 = select i1 %33, ptr %21, ptr %22
  %35 = load i32, ptr %34, align 4, !tbaa !11
  %36 = icmp slt i32 %29, %32
  %37 = sext i32 %29 to i64
  %38 = sext i32 %32 to i64
  br label %39

39:                                               ; preds = %61, %25
  %40 = phi i64 [ 0, %25 ], [ %63, %61 ]
  %41 = phi i32 [ %27, %25 ], [ %62, %61 ]
  br i1 %36, label %42, label %61

42:                                               ; preds = %42, %39
  %43 = phi i64 [ %59, %42 ], [ %37, %39 ]
  %44 = phi i32 [ %58, %42 ], [ %41, %39 ]
  %45 = getelementptr inbounds [192 x [3 x i32]], ptr %1, i64 0, i64 %43, i64 %40
  %46 = load i32, ptr %45, align 4, !tbaa !11
  %47 = add nsw i64 %43, 1
  %48 = getelementptr inbounds [192 x [3 x i32]], ptr %1, i64 0, i64 %47, i64 %40
  %49 = load i32, ptr %48, align 4, !tbaa !11
  %50 = call i32 @HuffmanCode(i32 noundef %35, i32 noundef %46, i32 noundef %49, ptr noundef nonnull %6, ptr noundef nonnull %7, ptr noundef nonnull %4, ptr noundef nonnull %5) #57
  %51 = load ptr, ptr %0, align 8, !tbaa !7
  %52 = load i32, ptr %6, align 4, !tbaa !11
  %53 = load i32, ptr %4, align 4, !tbaa !11
  %54 = tail call ptr @BF_addEntry(ptr noundef %51, i32 noundef %52, i32 noundef %53) #55
  store ptr %54, ptr %0, align 8, !tbaa !7
  %55 = load i32, ptr %7, align 4, !tbaa !11
  %56 = load i32, ptr %5, align 4, !tbaa !11
  %57 = tail call ptr @BF_addEntry(ptr noundef %54, i32 noundef %55, i32 noundef %56) #55
  store ptr %57, ptr %0, align 8, !tbaa !7
  %58 = add nsw i32 %50, %44
  %59 = add nsw i64 %43, 2
  %60 = icmp slt i64 %59, %38
  br i1 %60, label %42, label %61, !llvm.loop !232

61:                                               ; preds = %42, %39
  %62 = phi i32 [ %41, %39 ], [ %58, %42 ]
  %63 = add nuw nsw i64 %40, 1
  %64 = icmp eq i64 %63, 3
  br i1 %64, label %23, label %39, !llvm.loop !233

65:                                               ; preds = %16
  %66 = getelementptr inbounds %struct.gr_info, ptr %2, i64 0, i32 10
  %67 = load i32, ptr %66, align 8, !tbaa !193
  %68 = add i32 %67, 1
  %69 = zext i32 %68 to i64
  %70 = getelementptr inbounds [23 x i32], ptr @scalefac_band, i64 0, i64 %69
  %71 = load i32, ptr %70, align 4, !tbaa !11
  %72 = getelementptr inbounds %struct.gr_info, ptr %2, i64 0, i32 11
  %73 = load i32, ptr %72, align 4, !tbaa !194
  %74 = add i32 %67, 2
  %75 = add i32 %74, %73
  %76 = zext i32 %75 to i64
  %77 = getelementptr inbounds [23 x i32], ptr @scalefac_band, i64 0, i64 %76
  %78 = load i32, ptr %77, align 4, !tbaa !11
  %79 = sext i32 %78 to i64
  %80 = sext i32 %71 to i64
  br label %81

81:                                               ; preds = %65, %12
  %82 = phi i64 [ %79, %65 ], [ 576, %12 ]
  %83 = phi i64 [ %80, %65 ], [ 36, %12 ]
  %84 = icmp sgt i32 %10, 0
  br i1 %84, label %85, label %118

85:                                               ; preds = %81
  %86 = getelementptr inbounds %struct.gr_info, ptr %2, i64 0, i32 8, i64 2
  %87 = getelementptr inbounds %struct.gr_info, ptr %2, i64 0, i32 8, i64 1
  %88 = getelementptr inbounds %struct.gr_info, ptr %2, i64 0, i32 8
  %89 = zext i32 %10 to i64
  br label %90

90:                                               ; preds = %114, %85
  %91 = phi i64 [ 0, %85 ], [ %116, %114 ]
  %92 = phi i32 [ 0, %85 ], [ %115, %114 ]
  %93 = icmp slt i64 %91, %83
  %94 = icmp slt i64 %91, %82
  %95 = select i1 %94, ptr %87, ptr %86
  %96 = select i1 %93, ptr %88, ptr %95
  %97 = load i32, ptr %96, align 4, !tbaa !11
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %114, label %99

99:                                               ; preds = %90
  %100 = or i64 %91, 1
  %101 = getelementptr inbounds i32, ptr %1, i64 %100
  %102 = load i32, ptr %101, align 4, !tbaa !11
  %103 = getelementptr inbounds i32, ptr %1, i64 %91
  %104 = load i32, ptr %103, align 4, !tbaa !11
  %105 = call i32 @HuffmanCode(i32 noundef %97, i32 noundef %104, i32 noundef %102, ptr noundef nonnull %6, ptr noundef nonnull %7, ptr noundef nonnull %4, ptr noundef nonnull %5) #57
  %106 = load ptr, ptr %0, align 8, !tbaa !7
  %107 = load i32, ptr %6, align 4, !tbaa !11
  %108 = load i32, ptr %4, align 4, !tbaa !11
  %109 = tail call ptr @BF_addEntry(ptr noundef %106, i32 noundef %107, i32 noundef %108) #55
  store ptr %109, ptr %0, align 8, !tbaa !7
  %110 = load i32, ptr %7, align 4, !tbaa !11
  %111 = load i32, ptr %5, align 4, !tbaa !11
  %112 = tail call ptr @BF_addEntry(ptr noundef %109, i32 noundef %110, i32 noundef %111) #55
  store ptr %112, ptr %0, align 8, !tbaa !7
  %113 = add nsw i32 %105, %92
  br label %114

114:                                              ; preds = %99, %90
  %115 = phi i32 [ %113, %99 ], [ %92, %90 ]
  %116 = add nuw nsw i64 %91, 2
  %117 = icmp ult i64 %116, %89
  br i1 %117, label %90, label %118, !llvm.loop !234

118:                                              ; preds = %114, %81, %23, %3
  %119 = phi i32 [ 0, %3 ], [ 0, %81 ], [ %.lcssa, %23 ], [ %115, %114 ]
  %120 = getelementptr inbounds %struct.gr_info, ptr %2, i64 0, i32 2
  %121 = load i32, ptr %120, align 8, !tbaa !235
  %122 = shl i32 %121, 2
  %123 = add i32 %122, %10
  %124 = icmp slt i32 %10, %123
  br i1 %124, label %125, label %151

125:                                              ; preds = %118
  %126 = getelementptr inbounds %struct.gr_info, ptr %2, i64 0, i32 14
  %127 = sext i32 %10 to i64
  %128 = sext i32 %123 to i64
  br label %129

129:                                              ; preds = %129, %125
  %130 = phi i64 [ %127, %125 ], [ %149, %129 ]
  %131 = phi i32 [ %119, %125 ], [ %148, %129 ]
  %132 = getelementptr inbounds i32, ptr %1, i64 %130
  %133 = load i32, ptr %132, align 4, !tbaa !11
  %134 = or i64 %130, 1
  %135 = getelementptr inbounds i32, ptr %1, i64 %134
  %136 = load i32, ptr %135, align 4, !tbaa !11
  %137 = add nsw i64 %130, 2
  %138 = getelementptr inbounds i32, ptr %1, i64 %137
  %139 = load i32, ptr %138, align 4, !tbaa !11
  %140 = add nsw i64 %130, 3
  %141 = getelementptr inbounds i32, ptr %1, i64 %140
  %142 = load i32, ptr %141, align 4, !tbaa !11
  %143 = load i32, ptr %126, align 8, !tbaa !197
  %144 = add i32 %143, 32
  %145 = zext i32 %144 to i64
  %146 = getelementptr inbounds [34 x %struct.huffcodetab], ptr @ht, i64 0, i64 %145
  %147 = tail call i32 @L3_huffman_coder_count1(ptr noundef %0, ptr noundef nonnull %146, i32 noundef %133, i32 noundef %136, i32 noundef %139, i32 noundef %142) #57
  %148 = add nsw i32 %147, %131
  %149 = add nsw i64 %130, 4
  %150 = icmp slt i64 %149, %128
  br i1 %150, label %129, label %151, !llvm.loop !236

151:                                              ; preds = %129, %118
  %152 = phi i32 [ %119, %118 ], [ %148, %129 ]
  %153 = load i32, ptr %2, align 8, !tbaa !182
  %154 = getelementptr inbounds %struct.gr_info, ptr %2, i64 0, i32 15
  %155 = load i32, ptr %154, align 4, !tbaa !237
  %156 = add i32 %155, %152
  %157 = icmp eq i32 %153, %156
  br i1 %157, label %181, label %158

158:                                              ; preds = %151
  %159 = sub i32 %153, %156
  %160 = srem i32 %159, 32
  %161 = sdiv i32 %159, 32
  %162 = load ptr, ptr @stderr, align 8, !tbaa !7
  %163 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %162, ptr noundef nonnull @.str.157, i32 noundef %159) #60
  %164 = load ptr, ptr @stderr, align 8, !tbaa !7
  %165 = tail call i64 @fwrite(ptr nonnull @.str.1.158, i64 26, i64 1, ptr %164) #53
  %166 = add i32 %159, 31
  %167 = icmp ult i32 %166, 63
  br i1 %167, label %176, label %168

168:                                              ; preds = %158
  %169 = load ptr, ptr %0, align 8, !tbaa !7
  br label %170

170:                                              ; preds = %170, %168
  %171 = phi ptr [ %174, %170 ], [ %169, %168 ]
  %172 = phi i32 [ %173, %170 ], [ %161, %168 ]
  %173 = add nsw i32 %172, -1
  %174 = tail call ptr @BF_addEntry(ptr noundef %171, i32 noundef -1, i32 noundef 32) #55
  store ptr %174, ptr %0, align 8, !tbaa !7
  %175 = icmp eq i32 %173, 0
  br i1 %175, label %176, label %170, !llvm.loop !238

176:                                              ; preds = %170, %158
  %177 = icmp eq i32 %160, 0
  br i1 %177, label %181, label %178

178:                                              ; preds = %176
  %179 = load ptr, ptr %0, align 8, !tbaa !7
  %180 = tail call ptr @BF_addEntry(ptr noundef %179, i32 noundef -1, i32 noundef %160) #55
  store ptr %180, ptr %0, align 8, !tbaa !7
  br label %181

181:                                              ; preds = %178, %176, %151
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7) #56
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6) #56
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5) #56
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4) #56
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @HuffmanCode(i32 noundef %0, i32 noundef %1, i32 noundef %2, ptr nocapture noundef %3, ptr nocapture noundef %4, ptr nocapture noundef %5, ptr nocapture noundef %6) #30 {
  store i32 0, ptr %5, align 4, !tbaa !11
  store i32 0, ptr %6, align 4, !tbaa !11
  store i32 0, ptr %3, align 4, !tbaa !11
  store i32 0, ptr %4, align 4, !tbaa !11
  %8 = icmp eq i32 %0, 0
  br i1 %8, label %99, label %9

9:                                                ; preds = %7
  %10 = icmp slt i32 %1, 1
  %11 = tail call i32 @llvm.abs.i32(i32 %1, i1 true)
  %12 = zext i1 %10 to i32
  %13 = icmp slt i32 %2, 1
  %14 = tail call i32 @llvm.abs.i32(i32 %2, i1 true)
  %15 = zext i1 %13 to i32
  %16 = sext i32 %0 to i64
  %17 = icmp sgt i32 %0, 15
  br i1 %17, label %18, label %62

18:                                               ; preds = %9
  %19 = getelementptr inbounds [34 x %struct.huffcodetab], ptr @ht, i64 0, i64 %16
  %20 = load i32, ptr %19, align 8, !tbaa !239
  %21 = icmp ugt i32 %11, 14
  %22 = shl nuw nsw i32 %11, 4
  %23 = icmp ugt i32 %14, 14
  %24 = add nsw i32 %14, -15
  %25 = select i1 %23, i32 15, i32 %14
  %26 = select i1 %21, i32 240, i32 %22
  %27 = add nuw nsw i32 %26, %25
  %28 = getelementptr inbounds [34 x %struct.huffcodetab], ptr @ht, i64 0, i64 %16, i32 2
  %29 = load ptr, ptr %28, align 8, !tbaa !241
  %30 = zext i32 %27 to i64
  %31 = getelementptr inbounds i64, ptr %29, i64 %30
  %32 = load i64, ptr %31, align 8, !tbaa !36
  %33 = trunc i64 %32 to i32
  store i32 %33, ptr %3, align 4, !tbaa !11
  %34 = getelementptr inbounds [34 x %struct.huffcodetab], ptr @ht, i64 0, i64 %16, i32 3
  %35 = load ptr, ptr %34, align 8, !tbaa !242
  %36 = getelementptr inbounds i8, ptr %35, i64 %30
  %37 = load i8, ptr %36, align 1, !tbaa !15
  %38 = zext i8 %37 to i32
  store i32 %38, ptr %5, align 4, !tbaa !11
  br i1 %21, label %39, label %45

39:                                               ; preds = %18
  %40 = add nsw i32 %11, -15
  %41 = load i32, ptr %4, align 4, !tbaa !11
  %42 = or i32 %41, %40
  store i32 %42, ptr %4, align 4, !tbaa !11
  %43 = load i32, ptr %6, align 4, !tbaa !11
  %44 = add i32 %43, %20
  store i32 %44, ptr %6, align 4, !tbaa !11
  br label %47

45:                                               ; preds = %18
  %46 = icmp eq i32 %1, 0
  br i1 %46, label %53, label %47

47:                                               ; preds = %45, %39
  %48 = load i32, ptr %4, align 4, !tbaa !11
  %49 = shl i32 %48, 1
  %50 = or i32 %49, %12
  store i32 %50, ptr %4, align 4, !tbaa !11
  %51 = load i32, ptr %6, align 4, !tbaa !11
  %52 = add nsw i32 %51, 1
  store i32 %52, ptr %6, align 4, !tbaa !11
  br label %53

53:                                               ; preds = %47, %45
  br i1 %23, label %54, label %60

54:                                               ; preds = %53
  %55 = load i32, ptr %4, align 4, !tbaa !11
  %56 = shl i32 %55, %20
  %57 = or i32 %56, %24
  store i32 %57, ptr %4, align 4, !tbaa !11
  %58 = load i32, ptr %6, align 4, !tbaa !11
  %59 = add i32 %58, %20
  store i32 %59, ptr %6, align 4, !tbaa !11
  br label %87

60:                                               ; preds = %53
  %61 = icmp eq i32 %2, 0
  br i1 %61, label %95, label %87

62:                                               ; preds = %9
  %63 = shl nsw i32 %11, 4
  %64 = add nuw nsw i32 %63, %14
  %65 = getelementptr inbounds [34 x %struct.huffcodetab], ptr @ht, i64 0, i64 %16, i32 2
  %66 = load ptr, ptr %65, align 8, !tbaa !241
  %67 = zext i32 %64 to i64
  %68 = getelementptr inbounds i64, ptr %66, i64 %67
  %69 = load i64, ptr %68, align 8, !tbaa !36
  %70 = trunc i64 %69 to i32
  store i32 %70, ptr %3, align 4, !tbaa !11
  %71 = getelementptr inbounds [34 x %struct.huffcodetab], ptr @ht, i64 0, i64 %16, i32 3
  %72 = load ptr, ptr %71, align 8, !tbaa !242
  %73 = getelementptr inbounds i8, ptr %72, i64 %67
  %74 = load i8, ptr %73, align 1, !tbaa !15
  %75 = zext i8 %74 to i32
  %76 = load i32, ptr %5, align 4, !tbaa !11
  %77 = add nsw i32 %76, %75
  store i32 %77, ptr %5, align 4, !tbaa !11
  %78 = icmp eq i32 %1, 0
  br i1 %78, label %85, label %79

79:                                               ; preds = %62
  %80 = load i32, ptr %3, align 4, !tbaa !11
  %81 = shl i32 %80, 1
  %82 = or i32 %81, %12
  store i32 %82, ptr %3, align 4, !tbaa !11
  %83 = load i32, ptr %5, align 4, !tbaa !11
  %84 = add nsw i32 %83, 1
  store i32 %84, ptr %5, align 4, !tbaa !11
  br label %85

85:                                               ; preds = %79, %62
  %86 = icmp eq i32 %2, 0
  br i1 %86, label %95, label %87

87:                                               ; preds = %85, %60, %54
  %88 = phi ptr [ %4, %54 ], [ %4, %60 ], [ %3, %85 ]
  %89 = phi ptr [ %6, %54 ], [ %6, %60 ], [ %5, %85 ]
  %90 = load i32, ptr %88, align 4, !tbaa !11
  %91 = shl i32 %90, 1
  %92 = or i32 %91, %15
  store i32 %92, ptr %88, align 4, !tbaa !11
  %93 = load i32, ptr %89, align 4, !tbaa !11
  %94 = add nsw i32 %93, 1
  store i32 %94, ptr %89, align 4, !tbaa !11
  br label %95

95:                                               ; preds = %87, %85, %60
  %96 = load i32, ptr %5, align 4, !tbaa !11
  %97 = load i32, ptr %6, align 4, !tbaa !11
  %98 = add nsw i32 %97, %96
  br label %99

99:                                               ; preds = %95, %7
  %100 = phi i32 [ %98, %95 ], [ 0, %7 ]
  ret i32 %100
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @L3_huffman_coder_count1(ptr nocapture noundef %0, ptr nocapture noundef readonly %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5) #4 {
  %7 = tail call i32 @llvm.abs.i32(i32 %2, i1 true)
  %8 = icmp slt i32 %3, 1
  %9 = tail call i32 @llvm.abs.i32(i32 %3, i1 true)
  %10 = zext i1 %8 to i32
  %11 = icmp slt i32 %4, 1
  %12 = tail call i32 @llvm.abs.i32(i32 %4, i1 true)
  %13 = zext i1 %11 to i32
  %14 = icmp slt i32 %5, 1
  %15 = tail call i32 @llvm.abs.i32(i32 %5, i1 true)
  %16 = zext i1 %14 to i32
  %17 = shl i32 %7, 3
  %18 = shl i32 %9, 2
  %19 = add nsw i32 %18, %17
  %20 = shl nuw i32 %12, 1
  %21 = add nsw i32 %19, %20
  %22 = add nsw i32 %21, %15
  %23 = getelementptr inbounds %struct.huffcodetab, ptr %1, i64 0, i32 2
  %24 = load ptr, ptr %23, align 8, !tbaa !241
  %25 = zext i32 %22 to i64
  %26 = getelementptr inbounds i64, ptr %24, i64 %25
  %27 = load i64, ptr %26, align 8, !tbaa !36
  %28 = getelementptr inbounds %struct.huffcodetab, ptr %1, i64 0, i32 3
  %29 = load ptr, ptr %28, align 8, !tbaa !242
  %30 = getelementptr inbounds i8, ptr %29, i64 %25
  %31 = load i8, ptr %30, align 1, !tbaa !15
  %32 = zext i8 %31 to i32
  %33 = load ptr, ptr %0, align 8, !tbaa !7
  %34 = trunc i64 %27 to i32
  %35 = tail call ptr @BF_addEntry(ptr noundef %33, i32 noundef %34, i32 noundef %32) #55
  store ptr %35, ptr %0, align 8, !tbaa !7
  %36 = icmp ne i32 %2, 0
  %37 = lshr i32 %2, 31
  %38 = zext i1 %36 to i32
  %39 = icmp eq i32 %3, 0
  %40 = shl nuw nsw i32 %37, 1
  %41 = or i32 %40, %10
  %42 = select i1 %36, i32 2, i32 1
  %43 = select i1 %39, i32 %37, i32 %41
  %44 = select i1 %39, i32 %38, i32 %42
  %45 = icmp ne i32 %4, 0
  %46 = shl nuw nsw i32 %43, 1
  %47 = or i32 %46, %13
  %48 = select i1 %45, i32 %47, i32 %43
  %49 = zext i1 %45 to i32
  %50 = add nuw nsw i32 %44, %49
  %51 = icmp ne i32 %5, 0
  %52 = shl nuw nsw i32 %48, 1
  %53 = or i32 %52, %16
  %54 = select i1 %51, i32 %53, i32 %48
  %55 = zext i1 %51 to i32
  %56 = add nuw nsw i32 %50, %55
  %57 = tail call ptr @BF_addEntry(ptr noundef %35, i32 noundef %54, i32 noundef %56) #55
  store ptr %57, ptr %0, align 8, !tbaa !7
  %58 = add nuw nsw i32 %56, %32
  ret i32 %58
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #9

; Function Attrs: nounwind optsize uwtable
define internal void @III_FlushBitstream() #4 {
  %1 = load i32, ptr @PartHoldersInitialized, align 4, !tbaa !11
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %6, label %3

3:                                                ; preds = %0
  %4 = load ptr, ptr @frameData, align 8, !tbaa !7
  %5 = load ptr, ptr @frameResults, align 8, !tbaa !7
  tail call void @BF_FlushBitstream(ptr noundef %4, ptr noundef %5) #55
  br label %6

6:                                                ; preds = %3, %0
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @lame_init_params(ptr noundef %0) #4 {
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(56) @bs.159, i8 0, i64 56, i1 false)
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(528) @l3_side, i8 0, i64 528, i1 false)
  %2 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 39
  store i64 0, ptr %2, align 8, !tbaa !134
  tail call void @InitFormatBitStream() #55
  %3 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 1
  %4 = load i32, ptr %3, align 8, !tbaa !125
  %5 = icmp eq i32 %4, 1
  %6 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 8
  br i1 %5, label %9, label %7

7:                                                ; preds = %1
  %8 = load i32, ptr %6, align 4, !tbaa !168
  br label %10

9:                                                ; preds = %1
  store i32 3, ptr %6, align 4, !tbaa !168
  br label %10

10:                                               ; preds = %9, %7
  %11 = phi i32 [ %8, %7 ], [ 3, %9 ]
  %12 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 46
  %13 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 8
  %14 = icmp ne i32 %11, 3
  %15 = select i1 %14, i32 2, i32 1
  store i32 %15, ptr %12, align 4
  %16 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 3
  %17 = load i32, ptr %16, align 8, !tbaa !243
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %22, label %19

19:                                               ; preds = %10
  %20 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 11
  %21 = load i32, ptr %20, align 8, !tbaa !244
  br label %75

22:                                               ; preds = %10
  %23 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 2
  %24 = load i32, ptr %23, align 4, !tbaa !124
  %25 = icmp sgt i32 %24, 47999
  br i1 %25, label %35, label %26

26:                                               ; preds = %22
  %27 = icmp sgt i32 %24, 44099
  br i1 %27, label %35, label %28

28:                                               ; preds = %26
  %29 = icmp sgt i32 %24, 31999
  br i1 %29, label %35, label %30

30:                                               ; preds = %28
  %31 = icmp sgt i32 %24, 23999
  br i1 %31, label %35, label %32

32:                                               ; preds = %30
  %33 = icmp slt i32 %24, 22050
  %34 = select i1 %33, i32 16000, i32 22050
  br label %35

35:                                               ; preds = %32, %30, %28, %26, %22
  %36 = phi i32 [ 48000, %22 ], [ 44100, %26 ], [ 32000, %28 ], [ 24000, %30 ], [ %34, %32 ]
  store i32 %36, ptr %16, align 8, !tbaa !243
  %37 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 11
  %38 = load i32, ptr %37, align 8, !tbaa !244
  %39 = icmp sgt i32 %38, 0
  br i1 %39, label %40, label %75

40:                                               ; preds = %35
  %41 = shl nuw nsw i32 %36, 4
  %42 = zext i1 %14 to i32
  %43 = shl nuw nsw i32 %41, %42
  %44 = sitofp i32 %43 to double
  %45 = sitofp i32 %38 to double
  %46 = fmul double %45, 1.000000e+03
  %47 = fdiv double %44, %46
  %48 = fptrunc double %47 to float
  %49 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 21
  %50 = load i32, ptr %49, align 8, !tbaa !245
  %51 = icmp eq i32 %50, 0
  %52 = fcmp ogt float %48, 1.300000e+01
  %53 = select i1 %51, i1 %52, i1 false
  br i1 %53, label %54, label %75

54:                                               ; preds = %40
  %55 = fmul double %45, 1.000000e+04
  %56 = shl nuw nsw i32 %15, 4
  %57 = sitofp i32 %56 to double
  %58 = fdiv double %55, %57
  %59 = fptosi double %58 to i32
  %60 = icmp slt i32 %59, 16001
  br i1 %60, label %61, label %62

61:                                               ; preds = %54
  store i32 16000, ptr %16, align 8, !tbaa !243
  br label %75

62:                                               ; preds = %54
  %63 = icmp ult i32 %59, 22051
  br i1 %63, label %64, label %65

64:                                               ; preds = %62
  store i32 22050, ptr %16, align 8, !tbaa !243
  br label %75

65:                                               ; preds = %62
  %66 = icmp ult i32 %59, 24001
  br i1 %66, label %67, label %68

67:                                               ; preds = %65
  store i32 24000, ptr %16, align 8, !tbaa !243
  br label %75

68:                                               ; preds = %65
  %69 = icmp ult i32 %59, 32001
  br i1 %69, label %70, label %71

70:                                               ; preds = %68
  store i32 32000, ptr %16, align 8, !tbaa !243
  br label %75

71:                                               ; preds = %68
  %72 = icmp ult i32 %59, 44101
  br i1 %72, label %73, label %74

73:                                               ; preds = %71
  store i32 44100, ptr %16, align 8, !tbaa !243
  br label %75

74:                                               ; preds = %71
  store i32 48000, ptr %16, align 8, !tbaa !243
  br label %75

75:                                               ; preds = %74, %73, %70, %67, %64, %61, %40, %35, %19
  %76 = phi i32 [ %38, %35 ], [ %38, %61 ], [ %38, %67 ], [ %38, %73 ], [ %38, %74 ], [ %38, %70 ], [ %38, %64 ], [ %38, %40 ], [ %21, %19 ]
  %77 = phi i32 [ %36, %35 ], [ 16000, %61 ], [ 24000, %67 ], [ 44100, %73 ], [ 48000, %74 ], [ 32000, %70 ], [ 22050, %64 ], [ %36, %40 ], [ %17, %19 ]
  %78 = icmp sgt i32 %77, 24000
  %79 = select i1 %78, i32 2, i32 1
  %80 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 45
  store i32 %79, ptr %80, align 8, !tbaa !136
  %81 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 41
  store i32 800, ptr %81, align 8, !tbaa !246
  %82 = zext i1 %78 to i32
  %83 = shl nuw nsw i32 576, %82
  %84 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 42
  store i32 %83, ptr %84, align 4, !tbaa !247
  %85 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 11
  %86 = icmp eq i32 %76, 0
  br i1 %86, label %87, label %89

87:                                               ; preds = %75
  %88 = select i1 %78, i32 128, i32 64
  store i32 %88, ptr %85, align 8
  br label %89

89:                                               ; preds = %87, %75
  %90 = phi i32 [ %88, %87 ], [ %76, %75 ]
  %91 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 49
  store float 1.000000e+00, ptr %91, align 8, !tbaa !248
  %92 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 2
  %93 = load i32, ptr %92, align 4, !tbaa !124
  %94 = icmp eq i32 %77, %93
  br i1 %94, label %99, label %95

95:                                               ; preds = %89
  %96 = sitofp i32 %93 to float
  %97 = sitofp i32 %77 to float
  %98 = fdiv float %96, %97
  store float %98, ptr %91, align 8, !tbaa !248
  br label %99

99:                                               ; preds = %95, %89
  %100 = phi float [ %98, %95 ], [ 1.000000e+00, %89 ]
  %101 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 40
  %102 = load i64, ptr %0, align 8, !tbaa !126
  %103 = uitofp i64 %102 to float
  %104 = sitofp i32 %83 to float
  %105 = fmul float %100, %104
  %106 = fdiv float %103, %105
  %107 = fadd float %106, 2.000000e+00
  %108 = fptosi float %107 to i64
  store i64 %108, ptr %101, align 8, !tbaa !135
  %109 = icmp sgt i32 %90, 319
  %110 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 21
  br i1 %109, label %113, label %111

111:                                              ; preds = %99
  %112 = load i32, ptr %110, align 8, !tbaa !245
  br label %114

113:                                              ; preds = %99
  store i32 0, ptr %110, align 8, !tbaa !245
  br label %114

114:                                              ; preds = %113, %111
  %115 = phi i32 [ %112, %111 ], [ 0, %113 ]
  %116 = shl nsw i32 %77, 4
  %117 = zext i1 %14 to i32
  %118 = shl i32 %116, %117
  %119 = sitofp i32 %118 to double
  %120 = sitofp i32 %90 to double
  %121 = fmul double %120, 1.000000e+03
  %122 = fdiv double %119, %121
  %123 = fptrunc double %122 to float
  %124 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 21
  %125 = icmp ne i32 %115, 0
  %126 = fcmp ogt float %123, 1.100000e+01
  %127 = select i1 %125, i1 %126, i1 false
  br i1 %127, label %128, label %134

128:                                              ; preds = %114
  %129 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 22
  %130 = load i32, ptr %129, align 4, !tbaa !249
  %131 = sitofp i32 %130 to double
  %132 = fadd double %131, 4.400000e+00
  %133 = fptrunc double %132 to float
  br label %134

134:                                              ; preds = %128, %114
  %135 = phi float [ %133, %128 ], [ %123, %114 ]
  %136 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 9
  %137 = load i32, ptr %136, align 8, !tbaa !250
  %138 = icmp eq i32 %137, 0
  %139 = fcmp olt float %135, 9.000000e+00
  %140 = select i1 %138, i1 %14, i1 false
  %141 = select i1 %140, i1 %139, i1 false
  br i1 %141, label %142, label %143

142:                                              ; preds = %134
  store i32 0, ptr %13, align 4, !tbaa !168
  br label %143

143:                                              ; preds = %142, %134
  %144 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 25
  %145 = load i32, ptr %144, align 8, !tbaa !251
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %147, label %162

147:                                              ; preds = %143
  %148 = fpext float %135 to double
  %149 = fmul double %148, 6.250000e-02
  %150 = tail call double @log(double noundef %149) #55
  %151 = tail call double @llvm.fmuladd.f64(double %150, double -1.800000e+01, double 1.450000e+01)
  %152 = tail call double @llvm.floor.f64(double %151)
  %153 = fadd double %152, 1.000000e+00
  %154 = fptosi double %153 to i32
  %155 = icmp slt i32 %154, 31
  br i1 %155, label %156, label %162

156:                                              ; preds = %147
  %157 = sitofp i32 %154 to double
  %158 = fdiv double %157, 3.100000e+01
  %159 = fptrunc double %158 to float
  %160 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 53
  store float %159, ptr %160, align 8, !tbaa !252
  %161 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 54
  store float %159, ptr %161, align 4, !tbaa !253
  br label %162

162:                                              ; preds = %156, %147, %143
  %163 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 26
  %164 = load i32, ptr %163, align 4, !tbaa !254
  %165 = icmp sgt i32 %164, 0
  br i1 %165, label %166, label %189

166:                                              ; preds = %162
  %167 = sitofp i32 %164 to double
  %168 = fmul double %167, 2.000000e+00
  %169 = load i32, ptr %16, align 8, !tbaa !243
  %170 = sitofp i32 %169 to double
  %171 = fdiv double %168, %170
  %172 = fptrunc double %171 to float
  %173 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 55
  %174 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 28
  %175 = load i32, ptr %174, align 4, !tbaa !255
  %176 = icmp sgt i32 %175, -1
  br i1 %176, label %177, label %183

177:                                              ; preds = %166
  %178 = add nuw nsw i32 %175, %164
  %179 = sitofp i32 %178 to double
  %180 = fmul double %179, 2.000000e+00
  %181 = fdiv double %180, %170
  %182 = fptrunc double %181 to float
  br label %183

183:                                              ; preds = %177, %166
  %184 = phi float [ %182, %177 ], [ %172, %166 ]
  %185 = insertelement <2 x float> poison, float %172, i64 0
  %186 = insertelement <2 x float> %185, float %184, i64 1
  %187 = fcmp ogt <2 x float> %186, <float 1.000000e+00, float 1.000000e+00>
  %188 = select <2 x i1> %187, <2 x float> <float 1.000000e+00, float 1.000000e+00>, <2 x float> %186
  store <2 x float> %188, ptr %173, align 8, !tbaa !48
  br label %189

189:                                              ; preds = %183, %162
  %190 = load i32, ptr %144, align 8, !tbaa !251
  %191 = icmp sgt i32 %190, 0
  br i1 %191, label %192, label %217

192:                                              ; preds = %189
  %193 = sitofp i32 %190 to double
  %194 = fmul double %193, 2.000000e+00
  %195 = load i32, ptr %16, align 8, !tbaa !243
  %196 = sitofp i32 %195 to double
  %197 = fdiv double %194, %196
  %198 = fptrunc double %197 to float
  %199 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 27
  %200 = load i32, ptr %199, align 8, !tbaa !256
  %201 = icmp sgt i32 %200, -1
  br i1 %201, label %202, label %210

202:                                              ; preds = %192
  %203 = sub nsw i32 %190, %200
  %204 = sitofp i32 %203 to double
  %205 = fmul double %204, 2.000000e+00
  %206 = fdiv double %205, %196
  %207 = fptrunc double %206 to float
  %208 = fcmp olt float %207, 0.000000e+00
  br i1 %208, label %209, label %210

209:                                              ; preds = %202
  br label %210

210:                                              ; preds = %209, %202, %192
  %211 = phi float [ %207, %202 ], [ 0.000000e+00, %209 ], [ %198, %192 ]
  %212 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 53
  %213 = insertelement <2 x float> poison, float %211, i64 0
  %214 = insertelement <2 x float> %213, float %198, i64 1
  %215 = fcmp ogt <2 x float> %214, <float 1.000000e+00, float 1.000000e+00>
  %216 = select <2 x i1> %215, <2 x float> <float 1.000000e+00, float 1.000000e+00>, <2 x float> %214
  store <2 x float> %216, ptr %212, align 8, !tbaa !48
  br label %217

217:                                              ; preds = %210, %189
  %218 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 59
  %219 = load i32, ptr %218, align 8, !tbaa !257
  %220 = icmp eq i32 %219, 0
  br i1 %220, label %221, label %326

221:                                              ; preds = %217
  %222 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 53
  %223 = load float, ptr %222, align 8, !tbaa !252
  %224 = fcmp ogt float %223, 0.000000e+00
  br i1 %224, label %225, label %268

225:                                              ; preds = %221
  %226 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 54
  %227 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 57
  br label %228

228:                                              ; preds = %253, %225
  %229 = phi i32 [ 999, %225 ], [ %254, %253 ]
  %230 = phi i32 [ 0, %225 ], [ %255, %253 ]
  %231 = sitofp i32 %230 to double
  %232 = fdiv double %231, 3.100000e+01
  %233 = load float, ptr %226, align 4, !tbaa !253
  %234 = fpext float %233 to double
  %235 = fcmp ult double %232, %234
  br i1 %235, label %239, label %236

236:                                              ; preds = %228
  %237 = load i32, ptr %227, align 8, !tbaa !258
  %238 = tail call i32 @llvm.smin.i32(i32 %237, i32 %230)
  store i32 %238, ptr %227, align 8, !tbaa !258
  br label %239

239:                                              ; preds = %236, %228
  %240 = load float, ptr %222, align 8, !tbaa !252
  %241 = fpext float %240 to double
  %242 = fcmp ogt double %232, %241
  %243 = fcmp olt double %232, %234
  %244 = and i1 %243, %242
  br i1 %244, label %245, label %253

245:                                              ; preds = %239
  %246 = tail call i32 @llvm.smin.i32(i32 %229, i32 %230)
  %247 = fsub double %241, %232
  %248 = fmul double %247, 0x3FF921FB54442D18
  %249 = fsub float %233, %240
  %250 = fpext float %249 to double
  %251 = fdiv double %248, %250
  %252 = tail call double @cos(double noundef %251) #55
  br label %253

253:                                              ; preds = %245, %239
  %254 = phi i32 [ %246, %245 ], [ %229, %239 ]
  %255 = add nuw nsw i32 %230, 1
  %256 = icmp eq i32 %255, 32
  br i1 %256, label %257, label %228, !llvm.loop !259

257:                                              ; preds = %253
  %.lcssa1 = phi i32 [ %254, %253 ]
  %258 = icmp eq i32 %.lcssa1, 999
  %259 = load i32, ptr %227, align 8, !tbaa !258
  %260 = select i1 %258, i32 %259, i32 %.lcssa1
  %261 = sitofp i32 %260 to double
  %262 = fadd double %261, -7.500000e-01
  %263 = sitofp i32 %259 to double
  %264 = insertelement <2 x double> poison, double %262, i64 0
  %265 = insertelement <2 x double> %264, double %263, i64 1
  %266 = fdiv <2 x double> %265, <double 3.100000e+01, double 3.100000e+01>
  %267 = fptrunc <2 x double> %266 to <2 x float>
  store <2 x float> %267, ptr %222, align 8, !tbaa !48
  br label %268

268:                                              ; preds = %257, %221
  %269 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 56
  %270 = load float, ptr %269, align 4, !tbaa !260
  %271 = fcmp ogt float %270, 0.000000e+00
  %272 = fpext float %270 to double
  %273 = fcmp olt double %272, 0x3F964BF964BF964C
  %274 = and i1 %271, %273
  br i1 %274, label %275, label %280

275:                                              ; preds = %268
  %276 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 55
  store <2 x float> zeroinitializer, ptr %276, align 8, !tbaa !48
  %277 = load ptr, ptr @stderr, align 8, !tbaa !7
  %278 = tail call i64 @fwrite(ptr nonnull @.str.160, i64 64, i64 1, ptr %277) #53
  %279 = load float, ptr %269, align 4, !tbaa !260
  br label %280

280:                                              ; preds = %275, %268
  %281 = phi float [ %279, %275 ], [ %270, %268 ]
  %282 = fcmp ogt float %281, 0.000000e+00
  br i1 %282, label %283, label %326

283:                                              ; preds = %280
  %284 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 55
  %285 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 58
  br label %286

286:                                              ; preds = %311, %283
  %287 = phi i32 [ -1, %283 ], [ %312, %311 ]
  %288 = phi i32 [ 0, %283 ], [ %313, %311 ]
  %289 = sitofp i32 %288 to double
  %290 = fdiv double %289, 3.100000e+01
  %291 = load float, ptr %284, align 8, !tbaa !261
  %292 = fpext float %291 to double
  %293 = fcmp ugt double %290, %292
  br i1 %293, label %297, label %294

294:                                              ; preds = %286
  %295 = load i32, ptr %285, align 4, !tbaa !262
  %296 = tail call i32 @llvm.smax.i32(i32 %295, i32 %288)
  store i32 %296, ptr %285, align 4, !tbaa !262
  br label %297

297:                                              ; preds = %294, %286
  %298 = fcmp ogt double %290, %292
  br i1 %298, label %299, label %311

299:                                              ; preds = %297
  %300 = load float, ptr %269, align 4, !tbaa !260
  %301 = fpext float %300 to double
  %302 = fcmp olt double %290, %301
  br i1 %302, label %303, label %311

303:                                              ; preds = %299
  %304 = tail call i32 @llvm.smax.i32(i32 %287, i32 %288)
  %305 = fsub double %301, %290
  %306 = fmul double %305, 0x3FF921FB54442D18
  %307 = fsub float %300, %291
  %308 = fpext float %307 to double
  %309 = fdiv double %306, %308
  %310 = tail call double @cos(double noundef %309) #55
  br label %311

311:                                              ; preds = %303, %299, %297
  %312 = phi i32 [ %304, %303 ], [ %287, %299 ], [ %287, %297 ]
  %313 = add nuw nsw i32 %288, 1
  %314 = icmp eq i32 %313, 32
  br i1 %314, label %315, label %286, !llvm.loop !263

315:                                              ; preds = %311
  %.lcssa = phi i32 [ %312, %311 ]
  %316 = load i32, ptr %285, align 4, !tbaa !262
  %317 = sitofp i32 %316 to double
  %318 = icmp eq i32 %.lcssa, -1
  %319 = sitofp i32 %.lcssa to double
  %320 = select i1 %318, double %317, double %319
  %321 = fadd double %320, 7.500000e-01
  %322 = insertelement <2 x double> poison, double %317, i64 0
  %323 = insertelement <2 x double> %322, double %321, i64 1
  %324 = fdiv <2 x double> %323, <double 3.100000e+01, double 3.100000e+01>
  %325 = fptrunc <2 x double> %324 to <2 x float>
  store <2 x float> %325, ptr %284, align 8, !tbaa !48
  br label %326

326:                                              ; preds = %315, %280, %217
  %327 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 52
  store i32 0, ptr %327, align 4, !tbaa !169
  %328 = load i32, ptr %13, align 4, !tbaa !168
  %329 = icmp eq i32 %328, 3
  %330 = select i1 %329, i32 1, i32 2
  store i32 %330, ptr %12, align 4, !tbaa !173
  %331 = load i32, ptr %16, align 8, !tbaa !243
  %332 = sext i32 %331 to i64
  %333 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 43
  %334 = tail call i32 @SmpFrqIndex(i64 noundef %332, ptr noundef nonnull %333) #55
  %335 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 51
  store i32 %334, ptr %335, align 8, !tbaa !165
  %336 = icmp slt i32 %334, 0
  br i1 %336, label %337, label %339

337:                                              ; preds = %326
  %338 = load ptr, ptr @stderr, align 8, !tbaa !7
  tail call void @display_bitrates(ptr noundef %338) #55
  tail call void @exit(i32 noundef 1) #54
  unreachable

339:                                              ; preds = %326
  %340 = load i32, ptr %85, align 8, !tbaa !244
  %341 = load i32, ptr %333, align 8, !tbaa !162
  %342 = load i32, ptr %16, align 8, !tbaa !243
  %343 = tail call i32 @BitrateIndex(i32 noundef %340, i32 noundef %341, i32 noundef %342) #55
  %344 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 50
  store i32 %343, ptr %344, align 4, !tbaa !164
  %345 = icmp slt i32 %343, 0
  br i1 %345, label %346, label %348

346:                                              ; preds = %339
  %347 = load ptr, ptr @stderr, align 8, !tbaa !7
  tail call void @display_bitrates(ptr noundef %347) #55
  tail call void @exit(i32 noundef 1) #54
  unreachable

348:                                              ; preds = %339
  %349 = load i32, ptr %124, align 8, !tbaa !245
  %350 = icmp eq i32 %349, 0
  br i1 %350, label %400, label %351

351:                                              ; preds = %348
  %352 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 24
  %353 = load i32, ptr %352, align 4, !tbaa !264
  %354 = icmp eq i32 %353, 0
  br i1 %354, label %355, label %369

355:                                              ; preds = %351
  %356 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 48
  %357 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 23
  %358 = load i32, ptr %357, align 8, !tbaa !265
  %359 = icmp sgt i32 %358, 255
  %360 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 22
  %361 = load i32, ptr %360, align 4, !tbaa !249
  %362 = icmp eq i32 %361, 0
  %363 = select i1 %362, i1 true, i1 %359
  %364 = select i1 %363, i32 14, i32 13
  %365 = icmp sgt i32 %361, 3
  %366 = select i1 %365, i32 12, i32 %364
  %367 = icmp sgt i32 %361, 7
  %368 = select i1 %367, i32 9, i32 %366
  store i32 %368, ptr %356, align 4
  br label %380

369:                                              ; preds = %351
  %370 = load i32, ptr %333, align 8, !tbaa !162
  %371 = load i32, ptr %16, align 8, !tbaa !243
  %372 = tail call i32 @BitrateIndex(i32 noundef %353, i32 noundef %370, i32 noundef %371) #55
  %373 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 48
  store i32 %372, ptr %373, align 4, !tbaa !266
  %374 = icmp slt i32 %372, 0
  br i1 %374, label %378, label %375

375:                                              ; preds = %369
  %376 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 23
  %377 = load i32, ptr %376, align 8, !tbaa !265
  br label %380

378:                                              ; preds = %369
  %379 = load ptr, ptr @stderr, align 8, !tbaa !7
  tail call void @display_bitrates(ptr noundef %379) #55
  tail call void @exit(i32 noundef 1) #54
  unreachable

380:                                              ; preds = %375, %355
  %381 = phi i32 [ %377, %375 ], [ %358, %355 ]
  %382 = icmp eq i32 %381, 0
  br i1 %382, label %383, label %385

383:                                              ; preds = %380
  %384 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 47
  store i32 1, ptr %384, align 8, !tbaa !267
  br label %393

385:                                              ; preds = %380
  %386 = load i32, ptr %333, align 8, !tbaa !162
  %387 = load i32, ptr %16, align 8, !tbaa !243
  %388 = tail call i32 @BitrateIndex(i32 noundef %381, i32 noundef %386, i32 noundef %387) #55
  %389 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 47
  store i32 %388, ptr %389, align 8, !tbaa !267
  %390 = icmp slt i32 %388, 0
  br i1 %390, label %391, label %393

391:                                              ; preds = %385
  %392 = load ptr, ptr @stderr, align 8, !tbaa !7
  tail call void @display_bitrates(ptr noundef %392) #55
  tail call void @exit(i32 noundef 1) #54
  unreachable

393:                                              ; preds = %385, %383
  %394 = load i32, ptr %124, align 8, !tbaa !245
  %395 = icmp eq i32 %394, 0
  br i1 %395, label %400, label %396

396:                                              ; preds = %393
  %397 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 6
  %398 = load i32, ptr %397, align 4, !tbaa !268
  %399 = tail call i32 @llvm.smin.i32(i32 %398, i32 2)
  store i32 %399, ptr %397, align 4, !tbaa !268
  br label %400

400:                                              ; preds = %396, %393, %348
  %401 = phi i1 [ false, %396 ], [ true, %393 ], [ true, %348 ]
  %402 = load i32, ptr %13, align 4, !tbaa !168
  %403 = icmp eq i32 %402, 3
  br i1 %403, label %404, label %406

404:                                              ; preds = %400
  %405 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 10
  store i32 0, ptr %405, align 4, !tbaa !269
  br label %406

406:                                              ; preds = %404, %400
  br i1 %401, label %407, label %409

407:                                              ; preds = %406
  %408 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 5
  store i32 0, ptr %408, align 8, !tbaa !270
  br label %409

409:                                              ; preds = %407, %406
  %410 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 32
  %411 = load ptr, ptr %410, align 8, !tbaa !271
  %412 = icmp eq ptr %411, null
  br i1 %412, label %420, label %413

413:                                              ; preds = %409
  %414 = load i8, ptr %411, align 1, !tbaa !15
  %415 = icmp eq i8 %414, 45
  br i1 %415, label %416, label %421

416:                                              ; preds = %413
  %417 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 5
  store i32 0, ptr %417, align 8, !tbaa !270
  %418 = load i8, ptr %411, align 1, !tbaa !15
  %419 = icmp eq i8 %418, 45
  br i1 %419, label %420, label %421

420:                                              ; preds = %416, %409
  store i32 0, ptr @id3tag, align 4, !tbaa !272
  br label %421

421:                                              ; preds = %420, %416, %413
  %422 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 4
  %423 = load i32, ptr %422, align 4, !tbaa !273
  %424 = icmp eq i32 %423, 0
  br i1 %424, label %427, label %425

425:                                              ; preds = %421
  %426 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 5
  store i32 0, ptr %426, align 8, !tbaa !270
  br label %427

427:                                              ; preds = %425, %421
  tail call void @init_bit_stream_w(ptr noundef nonnull @bs.159) #55
  %428 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 6
  %429 = load i32, ptr %428, align 4, !tbaa !268
  switch i32 %429, label %443 [
    i32 9, label %430
    i32 8, label %431
    i32 7, label %432
    i32 6, label %435
    i32 5, label %436
    i32 4, label %439
    i32 3, label %439
    i32 2, label %440
    i32 1, label %444
    i32 0, label %447
  ]

430:                                              ; preds = %427
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %218, i8 0, i64 24, i1 false)
  br label %443

431:                                              ; preds = %427
  store i32 7, ptr %428, align 4, !tbaa !268
  br label %432

432:                                              ; preds = %431, %427
  %433 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 63
  store i32 1, ptr %433, align 8, !tbaa !274
  store <4 x i32> zeroinitializer, ptr %218, align 8, !tbaa !11
  %434 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 64
  store i32 0, ptr %434, align 4, !tbaa !275
  br label %443

435:                                              ; preds = %427
  store i32 5, ptr %428, align 4, !tbaa !268
  br label %436

436:                                              ; preds = %435, %427
  %437 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 63
  store i32 1, ptr %437, align 8, !tbaa !274
  store <4 x i32> <i32 0, i32 0, i32 1, i32 0>, ptr %218, align 8, !tbaa !11
  %438 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 64
  store i32 0, ptr %438, align 4, !tbaa !275
  br label %443

439:                                              ; preds = %427, %427
  store i32 2, ptr %428, align 4, !tbaa !268
  br label %440

440:                                              ; preds = %439, %427
  %441 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 63
  store i32 1, ptr %441, align 8, !tbaa !274
  store <4 x i32> <i32 0, i32 1, i32 1, i32 0>, ptr %218, align 8, !tbaa !11
  %442 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 64
  store i32 1, ptr %442, align 4, !tbaa !275
  br label %443

443:                                              ; preds = %444, %440, %436, %432, %430, %427
  br label %450

444:                                              ; preds = %427
  %445 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 63
  store i32 1, ptr %445, align 8, !tbaa !274
  store <4 x i32> <i32 0, i32 1, i32 1, i32 1>, ptr %218, align 8, !tbaa !11
  %446 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 64
  store i32 1, ptr %446, align 4, !tbaa !275
  br label %443

447:                                              ; preds = %427
  %448 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 63
  store i32 1, ptr %448, align 8, !tbaa !274
  store <4 x i32> <i32 1, i32 1, i32 3, i32 2>, ptr %218, align 8, !tbaa !11
  %449 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 64
  store i32 2, ptr %449, align 4, !tbaa !275
  tail call void @exit(i32 noundef -99) #54
  unreachable

450:                                              ; preds = %450, %443
  %451 = phi i64 [ %461, %450 ], [ 0, %443 ]
  %452 = load i32, ptr %335, align 8, !tbaa !165
  %453 = load i32, ptr %333, align 8, !tbaa !162
  %454 = mul nsw i32 %453, 3
  %455 = add nsw i32 %454, %452
  %456 = sext i32 %455 to i64
  %457 = getelementptr inbounds [6 x %struct.scalefac_struct], ptr @sfBandIndex, i64 0, i64 %456
  %458 = getelementptr inbounds [23 x i32], ptr %457, i64 0, i64 %451
  %459 = load i32, ptr %458, align 4, !tbaa !11
  %460 = getelementptr inbounds [23 x i32], ptr @scalefac_band, i64 0, i64 %451
  store i32 %459, ptr %460, align 4, !tbaa !11
  %461 = add nuw nsw i64 %451, 1
  %462 = icmp eq i64 %461, 23
  br i1 %462, label %463, label %450, !llvm.loop !276

463:                                              ; preds = %463, %450
  %464 = phi i64 [ %473, %463 ], [ 0, %450 ]
  %465 = load i32, ptr %335, align 8, !tbaa !165
  %466 = load i32, ptr %333, align 8, !tbaa !162
  %467 = mul nsw i32 %466, 3
  %468 = add nsw i32 %467, %465
  %469 = sext i32 %468 to i64
  %470 = getelementptr inbounds [6 x %struct.scalefac_struct], ptr @sfBandIndex, i64 0, i64 %469, i32 1, i64 %464
  %471 = load i32, ptr %470, align 4, !tbaa !11
  %472 = getelementptr inbounds %struct.scalefac_struct, ptr @scalefac_band, i64 0, i32 1, i64 %464
  store i32 %471, ptr %472, align 4, !tbaa !11
  %473 = add nuw nsw i64 %464, 1
  %474 = icmp eq i64 %473, 14
  br i1 %474, label %475, label %463, !llvm.loop !277

475:                                              ; preds = %463
  %476 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 5
  %477 = load i32, ptr %476, align 8, !tbaa !270
  %478 = icmp eq i32 %477, 0
  br i1 %478, label %485, label %479

479:                                              ; preds = %475
  %480 = load i32, ptr %333, align 8, !tbaa !162
  %481 = sub nsw i32 1, %480
  %482 = load i32, ptr %13, align 4, !tbaa !168
  %483 = load i32, ptr %335, align 8, !tbaa !165
  %484 = tail call i32 @InitVbrTag(ptr noundef nonnull @bs.159, i32 noundef %481, i32 noundef %482, i32 noundef %483) #55
  br label %485

485:                                              ; preds = %479, %475
  ret void
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write)
declare double @log(double noundef) local_unnamed_addr #18

; Function Attrs: nounwind optsize uwtable
define internal void @lame_print_config(ptr nocapture noundef readonly %0) #4 {
  %2 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 3
  %3 = load i32, ptr %2, align 8, !tbaa !243
  %4 = sitofp i32 %3 to double
  %5 = fdiv double %4, 1.000000e+03
  %6 = fptrunc double %5 to float
  %7 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 49
  %8 = load float, ptr %7, align 8, !tbaa !248
  %9 = fmul float %8, %6
  %10 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 46
  %11 = load i32, ptr %10, align 4, !tbaa !173
  %12 = shl nsw i32 %11, 4
  %13 = sitofp i32 %12 to float
  %14 = fmul float %6, %13
  %15 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 11
  %16 = load i32, ptr %15, align 8, !tbaa !244
  %17 = sitofp i32 %16 to float
  %18 = fdiv float %14, %17
  %19 = load ptr, ptr @stderr, align 8, !tbaa !7
  tail call void @lame_print_version(ptr noundef %19) #55
  %20 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 1
  %21 = load i32, ptr %20, align 8, !tbaa !125
  %22 = icmp eq i32 %21, 2
  br i1 %22, label %23, label %29

23:                                               ; preds = %1
  %24 = load i32, ptr %10, align 4, !tbaa !173
  %25 = icmp eq i32 %24, 1
  br i1 %25, label %26, label %29

26:                                               ; preds = %23
  %27 = load ptr, ptr @stderr, align 8, !tbaa !7
  %28 = tail call i64 @fwrite(ptr nonnull @.str.5.161, i64 67, i64 1, ptr %27) #53
  br label %29

29:                                               ; preds = %26, %23, %1
  %30 = load float, ptr %7, align 8, !tbaa !248
  %31 = fcmp une float %30, 1.000000e+00
  br i1 %31, label %32, label %37

32:                                               ; preds = %29
  %33 = load ptr, ptr @stderr, align 8, !tbaa !7
  %34 = fptosi float %9 to i32
  %35 = fptosi float %6 to i32
  %36 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %33, ptr noundef nonnull @.str.6.162, i32 noundef %34, i32 noundef %35) #60
  br label %37

37:                                               ; preds = %32, %29
  %38 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 56
  %39 = load float, ptr %38, align 4, !tbaa !260
  %40 = fcmp ogt float %39, 0.000000e+00
  br i1 %40, label %41, label %52

41:                                               ; preds = %37
  %42 = load ptr, ptr @stderr, align 8, !tbaa !7
  %43 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 55
  %44 = load float, ptr %43, align 8, !tbaa !261
  %45 = fmul float %44, %6
  %46 = fmul float %45, 5.000000e+02
  %47 = fpext float %46 to double
  %48 = fmul float %39, %6
  %49 = fmul float %48, 5.000000e+02
  %50 = fpext float %49 to double
  %51 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %42, ptr noundef nonnull @.str.7.163, double noundef %47, double noundef %50) #60
  br label %52

52:                                               ; preds = %41, %37
  %53 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 53
  %54 = load float, ptr %53, align 8, !tbaa !252
  %55 = fcmp ogt float %54, 0.000000e+00
  br i1 %55, label %56, label %67

56:                                               ; preds = %52
  %57 = load ptr, ptr @stderr, align 8, !tbaa !7
  %58 = fmul float %54, %6
  %59 = fmul float %58, 5.000000e+02
  %60 = fpext float %59 to double
  %61 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 54
  %62 = load float, ptr %61, align 4, !tbaa !253
  %63 = fmul float %62, %6
  %64 = fmul float %63, 5.000000e+02
  %65 = fpext float %64 to double
  %66 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %57, ptr noundef nonnull @.str.8.164, double noundef %60, double noundef %65) #60
  br label %67

67:                                               ; preds = %56, %52
  %68 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 4
  %69 = load i32, ptr %68, align 4, !tbaa !273
  %70 = icmp eq i32 %69, 0
  %71 = load ptr, ptr @stderr, align 8, !tbaa !7
  %72 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 31
  %73 = load ptr, ptr %72, align 8, !tbaa !122
  br i1 %70, label %76, label %74

74:                                               ; preds = %67
  %75 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %71, ptr noundef nonnull @.str.9.165, ptr noundef %73) #60
  br label %131

76:                                               ; preds = %67
  %77 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %73, ptr noundef nonnull dereferenceable(2) @.str.11.166) #59
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %84, label %79

79:                                               ; preds = %76
  %80 = tail call ptr @strrchr(ptr noundef nonnull dereferenceable(1) %73, i32 noundef 47) #59
  %81 = icmp eq ptr %80, null
  %82 = getelementptr inbounds i8, ptr %80, i64 1
  %83 = select i1 %81, ptr %73, ptr %82
  br label %84

84:                                               ; preds = %79, %76
  %85 = phi ptr [ %83, %79 ], [ @.str.12.167, %76 ]
  %86 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 32
  %87 = load ptr, ptr %86, align 8, !tbaa !271
  %88 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %87, ptr noundef nonnull dereferenceable(2) @.str.11.166) #59
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %95, label %90

90:                                               ; preds = %84
  %91 = tail call ptr @strrchr(ptr noundef nonnull dereferenceable(1) %87, i32 noundef 47) #59
  %92 = icmp eq ptr %91, null
  %93 = getelementptr inbounds i8, ptr %91, i64 1
  %94 = select i1 %92, ptr %87, ptr %93
  br label %95

95:                                               ; preds = %90, %84
  %96 = phi ptr [ %94, %90 ], [ @.str.13.168, %84 ]
  %97 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %71, ptr noundef nonnull @.str.10.169, ptr noundef %85, ptr noundef %96) #60
  %98 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 21
  %99 = load i32, ptr %98, align 8, !tbaa !245
  %100 = icmp eq i32 %99, 0
  %101 = load ptr, ptr @stderr, align 8, !tbaa !7
  %102 = load i32, ptr %2, align 8, !tbaa !243
  %103 = sitofp i32 %102 to double
  %104 = fdiv double %103, 1.000000e+03
  %105 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 6
  %106 = load i32, ptr %105, align 4, !tbaa !268
  br i1 %100, label %119, label %107

107:                                              ; preds = %95
  %108 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 22
  %109 = load i32, ptr %108, align 4, !tbaa !249
  %110 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 8
  %111 = load i32, ptr %110, align 4, !tbaa !168
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds [4 x ptr], ptr @lame_print_config.mode_names, i64 0, i64 %112
  %114 = load ptr, ptr %113, align 8, !tbaa !7
  %115 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 43
  %116 = load i32, ptr %115, align 8, !tbaa !162
  %117 = sub nsw i32 2, %116
  %118 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %101, ptr noundef nonnull @.str.14.170, double noundef %104, i32 noundef %109, ptr noundef %114, i32 noundef %117, i32 noundef %106) #60
  br label %131

119:                                              ; preds = %95
  %120 = load i32, ptr %15, align 8, !tbaa !244
  %121 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 8
  %122 = load i32, ptr %121, align 4, !tbaa !168
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds [4 x ptr], ptr @lame_print_config.mode_names, i64 0, i64 %123
  %125 = load ptr, ptr %124, align 8, !tbaa !7
  %126 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 43
  %127 = load i32, ptr %126, align 8, !tbaa !162
  %128 = sub nsw i32 2, %127
  %129 = fpext float %18 to double
  %130 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %101, ptr noundef nonnull @.str.15.171, double noundef %104, i32 noundef %120, ptr noundef %125, i32 noundef %128, double noundef %129, i32 noundef %106) #60
  br label %131

131:                                              ; preds = %119, %107, %74
  %132 = load ptr, ptr @stderr, align 8, !tbaa !7
  %133 = tail call i32 @fflush(ptr noundef %132) #57
  ret void
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: read)
declare ptr @strrchr(ptr noundef, i32 noundef) local_unnamed_addr #22

; Function Attrs: nofree nounwind optsize
declare noundef i32 @fflush(ptr nocapture noundef) local_unnamed_addr #6

; Function Attrs: nounwind optsize uwtable
define internal i32 @lame_encode_frame(ptr noundef %0, ptr noundef %1, ptr noundef %2, i32 %3, ptr noundef %4, i32 noundef %5) #4 {
  %7 = alloca [2 x [2 x [576 x double]]], align 16
  %8 = alloca [2 x [2 x [576 x i32]]], align 16
  %9 = alloca [2 x [2 x %struct.III_psy_ratio]], align 16
  %10 = alloca [2 x [2 x %struct.III_psy_ratio]], align 16
  %11 = alloca [2 x [2 x %struct.III_scalefac_t]], align 16
  %12 = alloca [2 x ptr], align 16
  %13 = alloca [2 x [2 x double]], align 16
  %14 = alloca [2 x [2 x double]], align 16
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca double, align 8
  %18 = alloca [2 x ptr], align 16
  %19 = alloca [2 x i32], align 4
  call void @llvm.lifetime.start.p0(i64 18432, ptr nonnull %7) #56
  call void @llvm.lifetime.start.p0(i64 9216, ptr nonnull %8) #56
  call void @llvm.lifetime.start.p0(i64 3904, ptr nonnull %9) #56
  call void @llvm.lifetime.start.p0(i64 3904, ptr nonnull %10) #56
  call void @llvm.lifetime.start.p0(i64 976, ptr nonnull %11) #56
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %12) #56
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %13) #56
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %14) #56
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %15) #56
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %16) #56
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %17) #56
  store double 0.000000e+00, ptr %17, align 8, !tbaa !39
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(3904) %9, i8 0, i64 3904, i1 false)
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(3904) %10, i8 0, i64 3904, i1 false)
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(976) %11, i8 0, i64 976, i1 false)
  store ptr %1, ptr %12, align 16, !tbaa !7
  %20 = getelementptr inbounds [2 x ptr], ptr %12, i64 0, i64 1
  store ptr %2, ptr %20, align 8, !tbaa !7
  %21 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 52
  store i32 0, ptr %21, align 4, !tbaa !169
  %22 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 39
  %23 = load i64, ptr %22, align 8, !tbaa !134
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %25, label %48

25:                                               ; preds = %6
  %26 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 3
  %27 = load i32, ptr %26, align 8, !tbaa !243
  %28 = sitofp i32 %27 to double
  %29 = fdiv double %28, 1.000000e+03
  %30 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 11
  %31 = load i32, ptr %30, align 8, !tbaa !244
  store i64 0, ptr @lame_encode_frame.sentBits, align 8, !tbaa !36
  %32 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 42
  %33 = load i32, ptr %32, align 4, !tbaa !247
  %34 = mul nsw i32 %33, %31
  %35 = sitofp i32 %34 to double
  %36 = fmul double %29, 8.000000e+00
  %37 = fdiv double %35, %36
  %38 = fadd double %37, 1.000000e-09
  %39 = tail call double @llvm.floor.f64(double %38)
  %40 = fsub double %37, %39
  %41 = tail call double @llvm.fabs.f64(double %40)
  %42 = fcmp olt double %41, 1.000000e-09
  %43 = select i1 %42, double 0.000000e+00, double %40
  store double %43, ptr @lame_encode_frame.frac_SpF, align 8, !tbaa !39
  %44 = fneg double %43
  store double %44, ptr @lame_encode_frame.slot_lag, align 8, !tbaa !39
  %45 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 44
  %46 = fcmp une double %43, 0.000000e+00
  %47 = zext i1 %46 to i32
  store i32 %47, ptr %45, align 4, !tbaa !166
  br label %48

48:                                               ; preds = %25, %6
  %49 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 15
  %50 = load i32, ptr %49, align 8, !tbaa !278
  switch i32 %50, label %55 [
    i32 0, label %51
    i32 1, label %53
  ]

51:                                               ; preds = %48
  %52 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 44
  store i32 0, ptr %52, align 4, !tbaa !166
  br label %81

53:                                               ; preds = %48
  %54 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 44
  store i32 1, ptr %54, align 4, !tbaa !166
  br label %81

55:                                               ; preds = %48
  %56 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 21
  %57 = load i32, ptr %56, align 8, !tbaa !245
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %61, label %59

59:                                               ; preds = %55
  %60 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 44
  store i32 0, ptr %60, align 4, !tbaa !166
  br label %81

61:                                               ; preds = %55
  %62 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 17
  %63 = load i32, ptr %62, align 8, !tbaa !279
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %67, label %65

65:                                               ; preds = %61
  %66 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 44
  store i32 0, ptr %66, align 4, !tbaa !166
  br label %81

67:                                               ; preds = %61
  %68 = load double, ptr @lame_encode_frame.frac_SpF, align 8, !tbaa !39
  %69 = fcmp une double %68, 0.000000e+00
  br i1 %69, label %70, label %81

70:                                               ; preds = %67
  %71 = load double, ptr @lame_encode_frame.slot_lag, align 8, !tbaa !39
  %72 = fadd double %68, -1.000000e+00
  %73 = fcmp ogt double %71, %72
  br i1 %73, label %74, label %77

74:                                               ; preds = %70
  %75 = fsub double %71, %68
  store double %75, ptr @lame_encode_frame.slot_lag, align 8, !tbaa !39
  %76 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 44
  store i32 0, ptr %76, align 4, !tbaa !166
  br label %81

77:                                               ; preds = %70
  %78 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 44
  store i32 1, ptr %78, align 4, !tbaa !166
  %79 = fsub double 1.000000e+00, %68
  %80 = fadd double %79, %71
  store double %80, ptr @lame_encode_frame.slot_lag, align 8, !tbaa !39
  br label %81

81:                                               ; preds = %77, %74, %67, %65, %59, %53, %51
  %82 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 4
  %83 = load i32, ptr %82, align 4, !tbaa !273
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %103

85:                                               ; preds = %81
  %86 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 7
  %87 = load i32, ptr %86, align 8, !tbaa !280
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %103

89:                                               ; preds = %85
  %90 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 43
  %91 = load i32, ptr %90, align 8, !tbaa !162
  %92 = icmp eq i32 %91, 0
  %93 = select i1 %92, i64 200, i64 50
  %94 = srem i64 %23, %93
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %96, label %103

96:                                               ; preds = %89
  %97 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 3
  %98 = load i32, ptr %97, align 8, !tbaa !243
  %99 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 40
  %100 = load i64, ptr %99, align 8, !tbaa !135
  %101 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 42
  %102 = load i32, ptr %101, align 4, !tbaa !247
  tail call void @timestatus(i32 noundef %98, i64 noundef %23, i64 noundef %100, i32 noundef %102) #55
  br label %103

103:                                              ; preds = %96, %89, %85, %81
  %104 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 63
  %105 = load i32, ptr %104, align 8, !tbaa !274
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %117

107:                                              ; preds = %103
  %108 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 45
  %109 = load i32, ptr %108, align 8, !tbaa !136
  %110 = icmp sgt i32 %109, 0
  br i1 %110, label %111, label %211

111:                                              ; preds = %107
  %112 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 46
  %113 = load i32, ptr %112, align 4, !tbaa !173
  %114 = icmp sgt i32 %113, 0
  %115 = zext i32 %109 to i64
  %116 = zext i32 %113 to i64
  br label %170

117:                                              ; preds = %103
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %18) #56
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %19) #56
  %118 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 45
  %119 = load i32, ptr %118, align 8, !tbaa !136
  %120 = add nsw i32 %119, -1
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds [2 x double], ptr @lame_encode_frame.ms_ratio, i64 0, i64 %121
  %123 = load double, ptr %122, align 8, !tbaa !39
  %124 = icmp sgt i32 %119, 0
  br i1 %124, label %125, label %168

125:                                              ; preds = %117
  %126 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 46
  %127 = load i32, ptr %126, align 4, !tbaa !173
  br label %128

128:                                              ; preds = %163, %125
  %129 = phi i32 [ %127, %125 ], [ %151, %163 ]
  %130 = phi i64 [ 0, %125 ], [ %164, %163 ]
  %131 = icmp sgt i32 %129, 0
  br i1 %131, label %132, label %145

132:                                              ; preds = %128
  %133 = mul i64 %130, 576
  %134 = add i64 %133, 304
  %135 = and i64 %134, 4294967280
  %136 = zext i32 %129 to i64
  br label %137

137:                                              ; preds = %137, %132
  %138 = phi i64 [ 0, %132 ], [ %143, %137 ]
  %139 = getelementptr inbounds [2 x ptr], ptr %12, i64 0, i64 %138
  %140 = load ptr, ptr %139, align 8, !tbaa !7
  %141 = getelementptr inbounds i16, ptr %140, i64 %135
  %142 = getelementptr inbounds [2 x ptr], ptr %18, i64 0, i64 %138
  store ptr %141, ptr %142, align 8, !tbaa !7
  %143 = add nuw nsw i64 %138, 1
  %144 = icmp eq i64 %143, %136
  br i1 %144, label %145, label %137, !llvm.loop !281

145:                                              ; preds = %137, %128
  %146 = trunc i64 %130 to i32
  %147 = getelementptr inbounds [2 x double], ptr @lame_encode_frame.ms_ratio, i64 0, i64 %130
  %148 = getelementptr inbounds [2 x double], ptr @lame_encode_frame.ms_ener_ratio, i64 0, i64 %130
  %149 = getelementptr inbounds [2 x [2 x double]], ptr %13, i64 0, i64 %130
  %150 = getelementptr inbounds [2 x [2 x double]], ptr %14, i64 0, i64 %130
  call void @L3psycho_anal(ptr noundef nonnull %0, ptr noundef nonnull %18, i32 noundef %146, ptr noundef nonnull %147, ptr noundef nonnull %17, ptr noundef nonnull %148, ptr noundef nonnull %9, ptr noundef nonnull %10, ptr noundef nonnull %149, ptr noundef nonnull %150, ptr noundef nonnull %19) #55
  %151 = load i32, ptr %126, align 4, !tbaa !173
  %152 = icmp sgt i32 %151, 0
  br i1 %152, label %153, label %163

153:                                              ; preds = %145
  %154 = getelementptr inbounds %struct.III_side_info_t, ptr @l3_side, i64 0, i32 4, i64 %130
  %155 = zext i32 %151 to i64
  br label %156

156:                                              ; preds = %156, %153
  %157 = phi i64 [ 0, %153 ], [ %161, %156 ]
  %158 = getelementptr inbounds [2 x i32], ptr %19, i64 0, i64 %157
  %159 = load i32, ptr %158, align 4, !tbaa !11
  %160 = getelementptr inbounds [2 x %struct.gr_info_ss], ptr %154, i64 0, i64 %157, i32 0, i32 6
  store i32 %159, ptr %160, align 8, !tbaa !282
  %161 = add nuw nsw i64 %157, 1
  %162 = icmp eq i64 %161, %155
  br i1 %162, label %163, label %156, !llvm.loop !284

163:                                              ; preds = %156, %145
  %164 = add nuw nsw i64 %130, 1
  %165 = load i32, ptr %118, align 8, !tbaa !136
  %166 = sext i32 %165 to i64
  %167 = icmp slt i64 %164, %166
  br i1 %167, label %128, label %168, !llvm.loop !285

168:                                              ; preds = %163, %117
  %169 = phi i32 [ %119, %117 ], [ %165, %163 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %19) #56
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %18) #56
  br label %183

170:                                              ; preds = %180, %111
  %171 = phi i64 [ 0, %111 ], [ %181, %180 ]
  br i1 %114, label %172, label %180

172:                                              ; preds = %170
  %173 = getelementptr inbounds %struct.III_side_info_t, ptr @l3_side, i64 0, i32 4, i64 %171
  br label %174

174:                                              ; preds = %174, %172
  %175 = phi i64 [ 0, %172 ], [ %178, %174 ]
  %176 = getelementptr inbounds [2 x %struct.gr_info_ss], ptr %173, i64 0, i64 %175, i32 0, i32 6
  store i32 0, ptr %176, align 8, !tbaa !282
  %177 = getelementptr inbounds [2 x [2 x double]], ptr %13, i64 0, i64 %171, i64 %175
  store double 7.000000e+02, ptr %177, align 8, !tbaa !39
  %178 = add nuw nsw i64 %175, 1
  %179 = icmp eq i64 %178, %116
  br i1 %179, label %180, label %174, !llvm.loop !286

180:                                              ; preds = %174, %170
  %181 = add nuw nsw i64 %171, 1
  %182 = icmp eq i64 %181, %115
  br i1 %182, label %183, label %170, !llvm.loop !287

183:                                              ; preds = %180, %168
  %184 = phi i32 [ %169, %168 ], [ %109, %180 ]
  %185 = phi double [ %123, %168 ], [ 0.000000e+00, %180 ]
  %186 = icmp sgt i32 %184, 0
  br i1 %186, label %187, label %211

187:                                              ; preds = %183
  %188 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 46
  %189 = load i32, ptr %188, align 4, !tbaa !173
  %190 = icmp sgt i32 %189, 0
  %191 = zext i32 %184 to i64
  %192 = zext i32 %189 to i64
  br label %193

193:                                              ; preds = %208, %187
  %194 = phi i64 [ 0, %187 ], [ %209, %208 ]
  br i1 %190, label %195, label %208

195:                                              ; preds = %193
  %196 = getelementptr inbounds %struct.III_side_info_t, ptr @l3_side, i64 0, i32 4, i64 %194
  br label %197

197:                                              ; preds = %197, %195
  %198 = phi i64 [ 0, %195 ], [ %206, %197 ]
  %199 = getelementptr inbounds [2 x %struct.gr_info_ss], ptr %196, i64 0, i64 %198
  %200 = getelementptr inbounds %struct.gr_info, ptr %199, i64 0, i32 7
  store i32 0, ptr %200, align 4, !tbaa !189
  %201 = getelementptr inbounds %struct.gr_info, ptr %199, i64 0, i32 6
  %202 = load i32, ptr %201, align 8, !tbaa !188
  %203 = icmp ne i32 %202, 0
  %204 = zext i1 %203 to i32
  %205 = getelementptr inbounds %struct.gr_info, ptr %199, i64 0, i32 5
  store i32 %204, ptr %205, align 4
  %206 = add nuw nsw i64 %198, 1
  %207 = icmp eq i64 %206, %192
  br i1 %207, label %208, label %197, !llvm.loop !288

208:                                              ; preds = %197, %193
  %209 = add nuw nsw i64 %194, 1
  %210 = icmp eq i64 %209, %191
  br i1 %210, label %211, label %193, !llvm.loop !289

211:                                              ; preds = %208, %183, %107
  %212 = phi double [ %185, %183 ], [ 0.000000e+00, %107 ], [ %185, %208 ]
  call void @mdct_sub48(ptr noundef nonnull %0, ptr noundef %1, ptr noundef %2, ptr noundef nonnull %7, ptr noundef nonnull @l3_side) #55
  %213 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 8
  %214 = load i32, ptr %213, align 4, !tbaa !168
  %215 = icmp eq i32 %214, 1
  br i1 %215, label %216, label %234

216:                                              ; preds = %211
  %217 = load i32, ptr getelementptr inbounds (%struct.III_side_info_t, ptr @l3_side, i64 0, i32 4, i64 0, i32 0, i64 0, i32 0, i32 6), align 8, !tbaa !282
  %218 = load i32, ptr getelementptr inbounds (%struct.III_side_info_t, ptr @l3_side, i64 0, i32 4, i64 0, i32 0, i64 1, i32 0, i32 6), align 8, !tbaa !282
  %219 = icmp eq i32 %217, %218
  %220 = load i32, ptr getelementptr inbounds (%struct.III_side_info_t, ptr @l3_side, i64 0, i32 4, i64 1, i32 0, i64 0, i32 0, i32 6), align 8
  %221 = load i32, ptr getelementptr inbounds (%struct.III_side_info_t, ptr @l3_side, i64 0, i32 4, i64 1, i32 0, i64 1, i32 0, i32 6), align 8
  %222 = icmp eq i32 %220, %221
  %223 = select i1 %219, i1 %222, i1 false
  br i1 %223, label %224, label %234

224:                                              ; preds = %216
  %225 = load double, ptr @lame_encode_frame.ms_ratio, align 16, !tbaa !39
  %226 = load double, ptr getelementptr inbounds ([2 x double], ptr @lame_encode_frame.ms_ratio, i64 0, i64 1), align 8, !tbaa !39
  %227 = fadd double %225, %226
  %228 = fadd double %212, %227
  %229 = load double, ptr %17, align 8, !tbaa !39
  %230 = fadd double %229, %228
  %231 = fmul double %230, 2.500000e-01
  %232 = fcmp olt double %231, 3.500000e-01
  br i1 %232, label %233, label %234

233:                                              ; preds = %224
  store i32 2, ptr %21, align 4, !tbaa !169
  br label %234

234:                                              ; preds = %233, %224, %216, %211
  %235 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 10
  %236 = load i32, ptr %235, align 4, !tbaa !269
  %237 = icmp eq i32 %236, 0
  br i1 %237, label %239, label %238

238:                                              ; preds = %234
  store i32 2, ptr %21, align 4, !tbaa !169
  br label %243

239:                                              ; preds = %234
  %240 = load i32, ptr %21, align 4, !tbaa !169
  %241 = freeze i32 %240
  %242 = icmp eq i32 %241, 2
  br i1 %242, label %243, label %245

243:                                              ; preds = %239, %238
  %244 = phi i1 [ true, %238 ], [ %242, %239 ]
  br label %245

245:                                              ; preds = %243, %239
  %246 = phi i1 [ %244, %243 ], [ %242, %239 ]
  %247 = phi ptr [ %14, %243 ], [ %13, %239 ]
  %248 = select i1 %246, ptr %10, ptr %9
  %249 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 21
  %250 = load i32, ptr %249, align 8, !tbaa !245
  %251 = icmp eq i32 %250, 0
  br i1 %251, label %253, label %252

252:                                              ; preds = %245
  call void @VBR_iteration_loop(ptr noundef nonnull %0, ptr noundef nonnull %247, ptr noundef nonnull @lame_encode_frame.ms_ratio, ptr noundef nonnull %7, ptr noundef nonnull %248, ptr noundef nonnull @l3_side, ptr noundef nonnull %8, ptr noundef nonnull %11) #55
  br label %254

253:                                              ; preds = %245
  call void @iteration_loop(ptr noundef nonnull %0, ptr noundef nonnull %247, ptr noundef nonnull @lame_encode_frame.ms_ratio, ptr noundef nonnull %7, ptr noundef nonnull %248, ptr noundef nonnull @l3_side, ptr noundef nonnull %8, ptr noundef nonnull %11) #55
  br label %254

254:                                              ; preds = %253, %252
  call void @getframebits(ptr noundef nonnull %0, ptr noundef nonnull %16, ptr noundef nonnull %15) #55
  %255 = load i32, ptr %16, align 4, !tbaa !11
  call void @III_format_bitstream(ptr noundef nonnull %0, i32 noundef %255, ptr noundef nonnull %8, ptr noundef nonnull @l3_side, ptr noundef nonnull %11, ptr noundef nonnull @bs.159) #55
  %256 = load i64, ptr getelementptr inbounds (%struct.bit_stream_struc, ptr @bs.159, i64 0, i32 5), align 8, !tbaa !290
  %257 = load i64, ptr @lame_encode_frame.sentBits, align 8, !tbaa !36
  %258 = sub i64 %256, %257
  store i64 %258, ptr @lame_encode_frame.frameBits, align 8, !tbaa !36
  %259 = and i64 %258, 7
  %260 = icmp eq i64 %259, 0
  br i1 %260, label %267, label %261

261:                                              ; preds = %254
  %262 = load ptr, ptr @stderr, align 8, !tbaa !7
  %263 = lshr i64 %258, 3
  %264 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %262, ptr noundef nonnull @.str.16.176, i64 noundef %258, i64 noundef %263, i64 noundef %259) #60
  %265 = load i64, ptr @lame_encode_frame.frameBits, align 8, !tbaa !36
  %266 = load i64, ptr @lame_encode_frame.sentBits, align 8, !tbaa !36
  br label %267

267:                                              ; preds = %261, %254
  %268 = phi i64 [ %266, %261 ], [ %257, %254 ]
  %269 = phi i64 [ %265, %261 ], [ %258, %254 ]
  %270 = add i64 %268, %269
  store i64 %270, ptr @lame_encode_frame.sentBits, align 8, !tbaa !36
  %271 = call i32 @copy_buffer(ptr noundef %4, i32 noundef %5, ptr noundef nonnull @bs.159) #55
  %272 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 5
  %273 = load i32, ptr %272, align 8, !tbaa !270
  %274 = icmp eq i32 %273, 0
  br i1 %274, label %279, label %275

275:                                              ; preds = %267
  %276 = load i64, ptr @lame_encode_frame.sentBits, align 8, !tbaa !36
  %277 = lshr i64 %276, 3
  %278 = trunc i64 %277 to i32
  call void @AddVbrFrame(i32 noundef %278) #55
  br label %279

279:                                              ; preds = %275, %267
  %280 = load i64, ptr %22, align 8, !tbaa !134
  %281 = add nsw i64 %280, 1
  store i64 %281, ptr %22, align 8, !tbaa !134
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17) #56
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %16) #56
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %15) #56
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %14) #56
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %13) #56
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %12) #56
  call void @llvm.lifetime.end.p0(i64 976, ptr nonnull %11) #56
  call void @llvm.lifetime.end.p0(i64 3904, ptr nonnull %10) #56
  call void @llvm.lifetime.end.p0(i64 3904, ptr nonnull %9) #56
  call void @llvm.lifetime.end.p0(i64 9216, ptr nonnull %8) #56
  call void @llvm.lifetime.end.p0(i64 18432, ptr nonnull %7) #56
  ret i32 %271
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.fabs.f64(double) #9

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @fill_buffer_resample(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1, i32 noundef %2, ptr nocapture noundef readonly %3, i32 noundef %4, ptr nocapture noundef writeonly %5, i32 noundef %6) #15 {
  %8 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 39
  %9 = load i64, ptr %8, align 8, !tbaa !134
  %10 = icmp eq i64 %9, 0
  %11 = sext i32 %6 to i64
  br i1 %10, label %12, label %21

12:                                               ; preds = %7
  %13 = getelementptr inbounds [2 x i32], ptr @fill_buffer_resample.init, i64 0, i64 %11
  %14 = load i32, ptr %13, align 4, !tbaa !11
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %23

16:                                               ; preds = %12
  store i32 1, ptr %13, align 4, !tbaa !11
  %17 = getelementptr inbounds [2 x double], ptr @fill_buffer_resample.itime, i64 0, i64 %11
  store double 0.000000e+00, ptr %17, align 8, !tbaa !39
  %18 = getelementptr inbounds [2 x [5 x i16]], ptr @fill_buffer_resample.inbuf_old, i64 0, i64 %11
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 2 dereferenceable(10) %18, i8 0, i64 10, i1 false)
  %19 = load i64, ptr %8, align 8, !tbaa !134
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %23, label %21

21:                                               ; preds = %16, %7
  %22 = getelementptr inbounds [2 x i32], ptr @fill_buffer_resample.init, i64 0, i64 %11
  store i32 0, ptr %22, align 4, !tbaa !11
  br label %23

23:                                               ; preds = %21, %16, %12
  %24 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 49
  %25 = load float, ptr %24, align 8, !tbaa !248
  %26 = fpext float %25 to double
  %27 = fadd double %26, 5.000000e-01
  %28 = tail call double @llvm.floor.f64(double %27)
  %29 = fsub double %26, %28
  %30 = tail call double @llvm.fabs.f64(double %29)
  %31 = fcmp olt double %30, 1.000000e-04
  %32 = icmp sgt i32 %2, 0
  %33 = sext i32 %6 to i64
  %34 = getelementptr inbounds [2 x double], ptr @fill_buffer_resample.itime, i64 0, i64 %33
  %35 = load double, ptr %34, align 8, !tbaa !39
  br i1 %32, label %36, label %140

36:                                               ; preds = %23
  %37 = zext i32 %2 to i64
  br label %38

38:                                               ; preds = %132, %36
  %39 = phi i64 [ 0, %36 ], [ %135, %132 ]
  %40 = trunc i64 %39 to i32
  %41 = sitofp i32 %40 to float
  %42 = fmul float %25, %41
  %43 = fpext float %42 to double
  %44 = fsub double %43, %35
  %45 = tail call double @llvm.floor.f64(double %44)
  %46 = fptosi double %45 to i32
  %47 = add nsw i32 %46, 2
  %48 = icmp slt i32 %47, %4
  br i1 %48, label %49, label %137

49:                                               ; preds = %38
  %50 = sitofp i32 %46 to double
  %51 = fadd double %35, %50
  %52 = fsub double %43, %51
  %53 = fadd double %52, -1.000000e+00
  %54 = icmp slt i32 %46, 0
  %55 = add nsw i32 %46, 5
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds [2 x [5 x i16]], ptr @fill_buffer_resample.inbuf_old, i64 0, i64 %33, i64 %56
  %58 = zext i32 %46 to i64
  %59 = getelementptr inbounds i16, ptr %3, i64 %58
  %60 = select i1 %54, ptr %57, ptr %59
  %61 = load i16, ptr %60, align 2, !tbaa !41
  %62 = icmp slt i32 %46, -1
  %63 = add nsw i32 %46, 6
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds [2 x [5 x i16]], ptr @fill_buffer_resample.inbuf_old, i64 0, i64 %33, i64 %64
  %66 = add nsw i32 %46, 1
  %67 = zext i32 %66 to i64
  %68 = getelementptr inbounds i16, ptr %3, i64 %67
  %69 = select i1 %62, ptr %65, ptr %68
  %70 = load i16, ptr %69, align 2, !tbaa !41
  br i1 %31, label %71, label %80

71:                                               ; preds = %49
  %72 = sitofp i16 %70 to double
  %73 = sitofp i16 %61 to double
  %74 = fneg double %53
  %75 = fmul double %74, %73
  %76 = tail call double @llvm.fmuladd.f64(double %72, double %52, double %75)
  %77 = fadd double %76, 5.000000e-01
  %78 = tail call double @llvm.floor.f64(double %77)
  %79 = fptosi double %78 to i16
  br label %132

80:                                               ; preds = %49
  %81 = fadd double %52, 1.000000e+00
  %82 = fadd double %52, -2.000000e+00
  %83 = icmp slt i32 %46, 1
  %84 = add nsw i32 %46, 4
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds [2 x [5 x i16]], ptr @fill_buffer_resample.inbuf_old, i64 0, i64 %33, i64 %85
  %87 = add nsw i32 %46, -1
  %88 = zext i32 %87 to i64
  %89 = getelementptr inbounds i16, ptr %3, i64 %88
  %90 = select i1 %83, ptr %86, ptr %89
  %91 = load i16, ptr %90, align 2, !tbaa !41
  %92 = sext i16 %91 to i32
  %93 = icmp slt i32 %46, -2
  %94 = add nsw i32 %46, 7
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds [2 x [5 x i16]], ptr @fill_buffer_resample.inbuf_old, i64 0, i64 %33, i64 %95
  %97 = zext i32 %47 to i64
  %98 = getelementptr inbounds i16, ptr %3, i64 %97
  %99 = select i1 %93, ptr %96, ptr %98
  %100 = load i16, ptr %99, align 2, !tbaa !41
  %101 = sub nsw i32 0, %92
  %102 = sitofp i32 %101 to double
  %103 = fmul double %52, %102
  %104 = fmul double %53, %103
  %105 = fmul double %82, %104
  %106 = fdiv double %105, 6.000000e+00
  %107 = fadd double %106, 5.000000e-01
  %108 = sitofp i16 %61 to double
  %109 = fmul double %81, %108
  %110 = fmul double %53, %109
  %111 = fmul double %82, %110
  %112 = fmul double %111, 5.000000e-01
  %113 = fadd double %112, %107
  %114 = sitofp i16 %70 to double
  %115 = fmul double %81, %114
  %116 = fmul double %52, %115
  %117 = fmul double %82, %116
  %118 = fmul double %117, 5.000000e-01
  %119 = fsub double %113, %118
  %120 = sitofp i16 %100 to double
  %121 = fmul double %81, %120
  %122 = fmul double %52, %121
  %123 = fmul double %53, %122
  %124 = fdiv double %123, 6.000000e+00
  %125 = fadd double %124, %119
  %126 = tail call double @llvm.floor.f64(double %125)
  %127 = fptosi double %126 to i32
  %128 = icmp sgt i32 %127, 32767
  br i1 %128, label %132, label %129

129:                                              ; preds = %80
  %130 = tail call i32 @llvm.smax.i32(i32 %127, i32 -32767)
  %131 = trunc i32 %130 to i16
  br label %132

132:                                              ; preds = %129, %80, %71
  %133 = phi i16 [ %79, %71 ], [ 32767, %80 ], [ %131, %129 ]
  %134 = getelementptr inbounds i16, ptr %1, i64 %39
  store i16 %133, ptr %134, align 2, !tbaa !41
  %135 = add nuw nsw i64 %39, 1
  %136 = icmp eq i64 %135, %37
  br i1 %136, label %137, label %38, !llvm.loop !292

137:                                              ; preds = %132, %38
  %.lcssa = phi i32 [ %46, %132 ], [ %46, %38 ]
  %138 = phi i32 [ %2, %132 ], [ %40, %38 ]
  %139 = add nsw i32 %.lcssa, 2
  br label %140

140:                                              ; preds = %137, %23
  %141 = phi i32 [ %138, %137 ], [ 0, %23 ]
  %142 = phi i32 [ %139, %137 ], [ 2, %23 ]
  %143 = tail call i32 @llvm.smin.i32(i32 %142, i32 %4)
  store i32 %143, ptr %5, align 4, !tbaa !11
  %144 = sitofp i32 %143 to float
  %145 = sitofp i32 %141 to float
  %146 = fneg float %145
  %147 = tail call float @llvm.fmuladd.f32(float %146, float %25, float %144)
  %148 = fpext float %147 to double
  %149 = getelementptr inbounds [2 x double], ptr @fill_buffer_resample.itime, i64 0, i64 %33
  %150 = fadd double %35, %148
  store double %150, ptr %149, align 8, !tbaa !39
  %151 = add i32 %143, -5
  br label %152

152:                                              ; preds = %152, %140
  %153 = phi i64 [ 0, %140 ], [ %160, %152 ]
  %154 = trunc i64 %153 to i32
  %155 = add i32 %151, %154
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds i16, ptr %3, i64 %156
  %158 = load i16, ptr %157, align 2, !tbaa !41
  %159 = getelementptr inbounds [2 x [5 x i16]], ptr @fill_buffer_resample.inbuf_old, i64 0, i64 %33, i64 %153
  store i16 %158, ptr %159, align 2, !tbaa !41
  %160 = add nuw nsw i64 %153, 1
  %161 = icmp eq i64 %160, 5
  br i1 %161, label %162, label %152, !llvm.loop !293

162:                                              ; preds = %152
  ret i32 %141
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @lame_encode_buffer(ptr noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %3, ptr noundef %4, i32 noundef %5) #4 {
  %7 = alloca [2 x ptr], align 16
  %8 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %7) #56
  store ptr %1, ptr %7, align 16, !tbaa !7
  %9 = getelementptr inbounds [2 x ptr], ptr %7, i64 0, i64 1
  store ptr %2, ptr %9, align 8, !tbaa !7
  %10 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 42
  %11 = load i32, ptr %10, align 4, !tbaa !247
  %12 = add nsw i32 %11, 752
  %13 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 39
  %14 = load i64, ptr %13, align 8, !tbaa !134
  %15 = icmp ne i64 %14, 0
  %16 = load i1, ptr @lame_encode_buffer.frame_buffered, align 4
  %17 = select i1 %15, i1 true, i1 %16
  br i1 %17, label %20, label %18

18:                                               ; preds = %6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(12224) @mfbuf, i8 0, i64 12224, i1 false)
  store i1 true, ptr @lame_encode_buffer.frame_buffered, align 4
  store i32 1088, ptr @mf_samples_to_encode, align 4, !tbaa !11
  store i32 752, ptr @mf_size, align 4, !tbaa !11
  %19 = load i64, ptr %13, align 8, !tbaa !134
  br label %20

20:                                               ; preds = %18, %6
  %21 = phi i64 [ %19, %18 ], [ %14, %6 ]
  %22 = icmp eq i64 %21, 1
  br i1 %22, label %23, label %24

23:                                               ; preds = %20
  store i1 false, ptr @lame_encode_buffer.frame_buffered, align 4
  br label %24

24:                                               ; preds = %23, %20
  %25 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 1
  %26 = load i32, ptr %25, align 8, !tbaa !125
  %27 = icmp eq i32 %26, 2
  br i1 %27, label %28, label %49

28:                                               ; preds = %24
  %29 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 46
  %30 = load i32, ptr %29, align 4, !tbaa !173
  %31 = icmp eq i32 %30, 1
  %32 = icmp sgt i32 %3, 0
  %33 = and i1 %31, %32
  br i1 %33, label %34, label %49

34:                                               ; preds = %28
  %35 = zext i32 %3 to i64
  br label %36

36:                                               ; preds = %36, %34
  %37 = phi i64 [ 0, %34 ], [ %47, %36 ]
  %38 = getelementptr inbounds i16, ptr %1, i64 %37
  %39 = load i16, ptr %38, align 2, !tbaa !41
  %40 = sext i16 %39 to i32
  %41 = getelementptr inbounds i16, ptr %2, i64 %37
  %42 = load i16, ptr %41, align 2, !tbaa !41
  %43 = sext i16 %42 to i32
  %44 = add nsw i32 %43, %40
  %45 = sdiv i32 %44, 2
  %46 = trunc i32 %45 to i16
  store i16 %46, ptr %38, align 2, !tbaa !41
  store i16 0, ptr %41, align 2, !tbaa !41
  %47 = add nuw nsw i64 %37, 1
  %48 = icmp eq i64 %47, %35
  br i1 %48, label %49, label %36, !llvm.loop !294

49:                                               ; preds = %36, %28, %24
  %50 = icmp sgt i32 %3, 0
  br i1 %50, label %51, label %138

51:                                               ; preds = %49
  %52 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 46
  %53 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 49
  %54 = load i32, ptr %52, align 4, !tbaa !173
  br label %55

55:                                               ; preds = %133, %51
  %56 = phi i32 [ %54, %51 ], [ %134, %133 ]
  %57 = phi i32 [ %3, %51 ], [ %94, %133 ]
  %58 = phi i32 [ 0, %51 ], [ %136, %133 ]
  %59 = phi ptr [ %4, %51 ], [ %135, %133 ]
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %8) #56
  store i32 0, ptr %8, align 4, !tbaa !11
  %60 = icmp sgt i32 %56, 0
  br i1 %60, label %61, label %90

61:                                               ; preds = %80, %55
  %62 = phi i64 [ %86, %80 ], [ 0, %55 ]
  %63 = load float, ptr %53, align 8, !tbaa !248
  %64 = fcmp une float %63, 1.000000e+00
  %65 = load i32, ptr @mf_size, align 4, !tbaa !11
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds [2 x [3056 x i16]], ptr @mfbuf, i64 0, i64 %62, i64 %66
  %68 = load i32, ptr %10, align 4, !tbaa !247
  %69 = getelementptr inbounds [2 x ptr], ptr %7, i64 0, i64 %62
  %70 = load ptr, ptr %69, align 8, !tbaa !7
  br i1 %64, label %71, label %76

71:                                               ; preds = %61
  %72 = trunc i64 %62 to i32
  %73 = call i32 @fill_buffer_resample(ptr noundef nonnull %0, ptr noundef nonnull %67, i32 noundef %68, ptr noundef %70, i32 noundef %57, ptr noundef nonnull %8, i32 noundef %72) #57
  %74 = load i32, ptr %8, align 4, !tbaa !11
  %75 = sext i32 %74 to i64
  br label %80

76:                                               ; preds = %61
  %77 = tail call i32 @llvm.smin.i32(i32 %68, i32 %57)
  %78 = sext i32 %77 to i64
  %79 = shl nsw i64 %78, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %67, ptr align 1 %70, i64 %79, i1 false)
  store i32 %77, ptr %8, align 4, !tbaa !11
  br label %80

80:                                               ; preds = %76, %71
  %81 = phi i64 [ %78, %76 ], [ %75, %71 ]
  %82 = phi i32 [ %77, %76 ], [ %74, %71 ]
  %83 = phi i32 [ %77, %76 ], [ %73, %71 ]
  %84 = getelementptr inbounds [2 x ptr], ptr %7, i64 0, i64 %62
  %85 = getelementptr inbounds i16, ptr %70, i64 %81
  store ptr %85, ptr %84, align 8, !tbaa !7
  %86 = add nuw nsw i64 %62, 1
  %87 = load i32, ptr %52, align 4, !tbaa !173
  %88 = sext i32 %87 to i64
  %89 = icmp slt i64 %86, %88
  br i1 %89, label %61, label %90, !llvm.loop !295

90:                                               ; preds = %80, %55
  %91 = phi i32 [ 0, %55 ], [ %82, %80 ]
  %92 = phi i32 [ %56, %55 ], [ %87, %80 ]
  %93 = phi i32 [ 0, %55 ], [ %83, %80 ]
  %94 = sub nsw i32 %57, %91
  %95 = load i32, ptr @mf_size, align 4, !tbaa !11
  %96 = add nsw i32 %95, %93
  store i32 %96, ptr @mf_size, align 4, !tbaa !11
  %97 = load i32, ptr @mf_samples_to_encode, align 4, !tbaa !11
  %98 = add nsw i32 %97, %93
  store i32 %98, ptr @mf_samples_to_encode, align 4, !tbaa !11
  %99 = icmp slt i32 %96, %12
  br i1 %99, label %133, label %100

100:                                              ; preds = %90
  %101 = tail call i32 @lame_encode_frame(ptr noundef %0, ptr noundef nonnull @mfbuf, ptr noundef nonnull getelementptr inbounds ([2 x [3056 x i16]], ptr @mfbuf, i64 0, i64 1), i32 poison, ptr noundef %59, i32 noundef %5) #57
  %102 = icmp eq i32 %101, -1
  br i1 %102, label %103, label %104

103:                                              ; preds = %100
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8) #56
  br label %138

104:                                              ; preds = %100
  %105 = sext i32 %101 to i64
  %106 = getelementptr inbounds i8, ptr %59, i64 %105
  %107 = add nsw i32 %101, %58
  %108 = load i32, ptr %10, align 4, !tbaa !247
  %109 = load i32, ptr @mf_size, align 4, !tbaa !11
  %110 = sub i32 %109, %108
  store i32 %110, ptr @mf_size, align 4, !tbaa !11
  %111 = load i32, ptr @mf_samples_to_encode, align 4, !tbaa !11
  %112 = sub nsw i32 %111, %108
  store i32 %112, ptr @mf_samples_to_encode, align 4, !tbaa !11
  %113 = load i32, ptr %52, align 4, !tbaa !173
  %114 = icmp sgt i32 %113, 0
  br i1 %114, label %115, label %133

115:                                              ; preds = %104
  %116 = icmp sgt i32 %110, 0
  %117 = sext i32 %108 to i64
  %118 = zext i32 %113 to i64
  %119 = zext i32 %110 to i64
  br label %120

120:                                              ; preds = %130, %115
  %121 = phi i64 [ 0, %115 ], [ %131, %130 ]
  br i1 %116, label %122, label %130

122:                                              ; preds = %122, %120
  %123 = phi i64 [ %128, %122 ], [ 0, %120 ]
  %124 = add nsw i64 %123, %117
  %125 = getelementptr inbounds [2 x [3056 x i16]], ptr @mfbuf, i64 0, i64 %121, i64 %124
  %126 = load i16, ptr %125, align 2, !tbaa !41
  %127 = getelementptr inbounds [2 x [3056 x i16]], ptr @mfbuf, i64 0, i64 %121, i64 %123
  store i16 %126, ptr %127, align 2, !tbaa !41
  %128 = add nuw nsw i64 %123, 1
  %129 = icmp eq i64 %128, %119
  br i1 %129, label %130, label %122, !llvm.loop !296

130:                                              ; preds = %122, %120
  %131 = add nuw nsw i64 %121, 1
  %132 = icmp eq i64 %131, %118
  br i1 %132, label %133, label %120, !llvm.loop !297

133:                                              ; preds = %130, %104, %90
  %134 = phi i32 [ %92, %90 ], [ %113, %104 ], [ %113, %130 ]
  %135 = phi ptr [ %59, %90 ], [ %106, %104 ], [ %106, %130 ]
  %136 = phi i32 [ %58, %90 ], [ %107, %104 ], [ %107, %130 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8) #56
  %137 = icmp sgt i32 %94, 0
  br i1 %137, label %55, label %138, !llvm.loop !298

138:                                              ; preds = %133, %103, %49
  %139 = phi i32 [ -1, %103 ], [ 0, %49 ], [ %136, %133 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %7) #56
  ret i32 %139
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(write, inaccessiblemem: none) uwtable
define internal void @lame_init(ptr nocapture noundef writeonly %0) #31 {
  %2 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 36
  store i32 0, ptr %2, align 4, !tbaa !299
  %3 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 33
  store i32 0, ptr %3, align 8, !tbaa !300
  %4 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 34
  store i32 0, ptr %4, align 4, !tbaa !301
  %5 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 5
  %6 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 35
  store float 0.000000e+00, ptr %6, align 8, !tbaa !302
  %7 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 17
  %8 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 39
  store i64 0, ptr %8, align 8, !tbaa !134
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %7, i8 0, i64 16, i1 false)
  %9 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 29
  store i32 0, ptr %9, align 8, !tbaa !127
  %10 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 59
  store i32 0, ptr %10, align 8, !tbaa !257
  %11 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 25
  store <4 x i32> <i32 0, i32 0, i32 -1, i32 -1>, ptr %11, align 8, !tbaa !11
  %12 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 53
  %13 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 57
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %12, i8 0, i64 16, i1 false)
  store i32 32, ptr %13, align 8, !tbaa !258
  %14 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 58
  store i32 -1, ptr %14, align 4, !tbaa !262
  %15 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 37
  store i32 0, ptr %15, align 8, !tbaa !303
  %16 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 49
  store float 1.000000e+00, ptr %16, align 8, !tbaa !248
  %17 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 44
  store i32 0, ptr %17, align 4, !tbaa !166
  %18 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 30
  store i32 0, ptr %18, align 4, !tbaa !128
  %19 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 40
  store i64 0, ptr %19, align 8, !tbaa !135
  %20 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 21
  store <4 x i32> <i32 0, i32 4, i32 0, i32 0>, ptr %20, align 8, !tbaa !11
  %21 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 47
  store i32 1, ptr %21, align 8, !tbaa !267
  %22 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 48
  store i32 13, ptr %22, align 4, !tbaa !266
  %23 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 43
  store i32 1, ptr %23, align 8, !tbaa !162
  store <4 x i32> <i32 1, i32 5, i32 0, i32 1>, ptr %5, align 8, !tbaa !11
  %24 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 9
  %25 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 13
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %24, i8 0, i64 16, i1 false)
  store <4 x i32> <i32 1, i32 0, i32 2, i32 0>, ptr %25, align 8, !tbaa !11
  %26 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 38
  store i32 0, ptr %26, align 4, !tbaa !172
  %27 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 1
  store <4 x i32> <i32 2, i32 44100, i32 0, i32 0>, ptr %27, align 8, !tbaa !11
  store i64 4294967295, ptr %0, align 8, !tbaa !126
  %28 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 31
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %28, i8 0, i64 16, i1 false)
  store i32 0, ptr @id3tag, align 4, !tbaa !272
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @lame_encode_finish(ptr noundef %0, ptr noundef %1, i32 noundef %2) #4 {
  %4 = alloca [2 x [1152 x i16]], align 16
  call void @llvm.lifetime.start.p0(i64 4608, ptr nonnull %4) #56
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(4608) %4, i8 0, i64 4608, i1 false)
  %5 = load i32, ptr @mf_samples_to_encode, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp eq i32 %2, 0
  %9 = getelementptr inbounds [1152 x i16], ptr %4, i64 1
  %10 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 45
  %11 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 42
  br label %12

12:                                               ; preds = %22, %7
  %13 = phi i32 [ 0, %7 ], [ %25, %22 ]
  %14 = phi ptr [ %1, %7 ], [ %24, %22 ]
  %15 = phi i32 [ %5, %7 ], [ %27, %22 ]
  %16 = sub nsw i32 %2, %13
  %17 = select i1 %8, i32 0, i32 %16
  %18 = load i32, ptr %10, align 8, !tbaa !136
  %19 = mul nsw i32 %18, 576
  %20 = call i32 @lame_encode_buffer(ptr noundef %0, ptr noundef nonnull %4, ptr noundef nonnull %9, i32 noundef %19, ptr noundef %14, i32 noundef %17) #57
  store i32 %15, ptr @mf_samples_to_encode, align 4, !tbaa !11
  %21 = icmp eq i32 %20, -1
  br i1 %21, label %61, label %22

22:                                               ; preds = %12
  %23 = sext i32 %20 to i64
  %24 = getelementptr inbounds i8, ptr %14, i64 %23
  %25 = add nsw i32 %20, %13
  %26 = load i32, ptr %11, align 4, !tbaa !247
  %27 = sub nsw i32 %15, %26
  store i32 %27, ptr @mf_samples_to_encode, align 4, !tbaa !11
  %28 = icmp sgt i32 %27, 0
  br i1 %28, label %12, label %29, !llvm.loop !304

29:                                               ; preds = %22, %3
  %30 = phi ptr [ %1, %3 ], [ %24, %22 ]
  %31 = phi i32 [ 0, %3 ], [ %25, %22 ]
  %32 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 39
  %33 = load i64, ptr %32, align 8, !tbaa !134
  %34 = add nsw i64 %33, -1
  store i64 %34, ptr %32, align 8, !tbaa !134
  %35 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 4
  %36 = load i32, ptr %35, align 4, !tbaa !273
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %53

38:                                               ; preds = %29
  %39 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 7
  %40 = load i32, ptr %39, align 8, !tbaa !280
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %53

42:                                               ; preds = %38
  %43 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 3
  %44 = load i32, ptr %43, align 8, !tbaa !243
  %45 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 40
  %46 = load i64, ptr %45, align 8, !tbaa !135
  %47 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 42
  %48 = load i32, ptr %47, align 4, !tbaa !247
  call void @timestatus(i32 noundef %44, i64 noundef %34, i64 noundef %46, i32 noundef %48) #55
  %49 = load ptr, ptr @stderr, align 8, !tbaa !7
  %50 = call i32 @fputc(i32 10, ptr %49)
  %51 = load ptr, ptr @stderr, align 8, !tbaa !7
  %52 = call i32 @fflush(ptr noundef %51) #57
  br label %53

53:                                               ; preds = %42, %38, %29
  call void @III_FlushBitstream() #55
  %54 = sub nsw i32 %2, %31
  %55 = icmp eq i32 %2, 0
  %56 = select i1 %55, i32 0, i32 %54
  %57 = call i32 @copy_buffer(ptr noundef %30, i32 noundef %56, ptr noundef nonnull @bs.159) #55
  %58 = icmp eq i32 %57, -1
  %59 = add nsw i32 %57, %31
  %60 = select i1 %58, i32 -1, i32 %59
  br label %61

61:                                               ; preds = %53, %12
  %62 = phi i32 [ %60, %53 ], [ -1, %12 ]
  call void @desalloc_buffer(ptr noundef nonnull @bs.159) #55
  call void @llvm.lifetime.end.p0(i64 4608, ptr nonnull %4) #56
  ret i32 %62
}

; Function Attrs: nounwind optsize uwtable
define internal void @lame_mp3_tags(ptr nocapture noundef readonly %0) #4 {
  %2 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 5
  %3 = load i32, ptr %2, align 8, !tbaa !270
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %16, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 22
  %7 = load i32, ptr %6, align 4, !tbaa !249
  %8 = mul nsw i32 %7, 100
  %9 = sdiv i32 %8, 9
  %10 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 32
  %11 = load ptr, ptr %10, align 8, !tbaa !271
  %12 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 43
  %13 = load i32, ptr %12, align 8, !tbaa !162
  %14 = sub nsw i32 1, %13
  %15 = tail call i32 @PutVbrTag(ptr noundef %11, i32 noundef %9, i32 noundef %14) #55
  br label %16

16:                                               ; preds = %5, %1
  %17 = load i32, ptr @id3tag, align 4, !tbaa !272
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %16
  tail call void @id3_buildtag(ptr noundef nonnull @id3tag) #55
  %20 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 32
  %21 = load ptr, ptr %20, align 8, !tbaa !271
  %22 = tail call i32 @id3_writetag(ptr noundef %21, ptr noundef nonnull @id3tag) #55
  br label %23

23:                                               ; preds = %19, %16
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @init_layer3(i32 noundef %0) #4 {
  br label %2

2:                                                ; preds = %2, %1
  %3 = phi i64 [ -256, %1 ], [ %11, %2 ]
  %4 = trunc i64 %3 to i32
  %5 = add i32 %4, 210
  %6 = sitofp i32 %5 to double
  %7 = fmul double %6, -2.500000e-01
  %8 = tail call double @exp2(double %7) #56
  %9 = add nsw i64 %3, 256
  %10 = getelementptr inbounds [378 x double], ptr @gainpow2, i64 0, i64 %9
  store double %8, ptr %10, align 8, !tbaa !39
  %11 = add nsw i64 %3, 1
  %12 = icmp eq i64 %11, 122
  br i1 %12, label %13, label %2, !llvm.loop !305

13:                                               ; preds = %13, %2
  %14 = phi i64 [ %19, %13 ], [ 0, %2 ]
  %15 = trunc i64 %14 to i32
  %16 = sitofp i32 %15 to double
  %17 = tail call double @pow(double noundef %16, double noundef 0x3FF5555555555555) #55
  %18 = getelementptr inbounds [8207 x double], ptr @ispow, i64 0, i64 %14
  store double %17, ptr %18, align 8, !tbaa !39
  %19 = add nuw nsw i64 %14, 1
  %20 = icmp eq i64 %19, 8207
  br i1 %20, label %21, label %13, !llvm.loop !306

21:                                               ; preds = %21, %13
  %22 = phi i64 [ %31, %21 ], [ 0, %13 ]
  %23 = getelementptr inbounds [8 x double], ptr @init_layer3.Ci, i64 0, i64 %22
  %24 = load <2 x double>, ptr %23, align 16, !tbaa !39
  %25 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %24, <2 x double> %24, <2 x double> <double 1.000000e+00, double 1.000000e+00>)
  %26 = tail call <2 x double> @llvm.sqrt.v2f64(<2 x double> %25)
  %27 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %26
  %28 = getelementptr inbounds [8 x double], ptr @aa_cs, i64 0, i64 %22
  store <2 x double> %27, ptr %28, align 16, !tbaa !39
  %29 = fdiv <2 x double> %24, %26
  %30 = getelementptr inbounds [8 x double], ptr @aa_ca, i64 0, i64 %22
  store <2 x double> %29, ptr %30, align 16, !tbaa !39
  %31 = add nuw i64 %22, 2
  %32 = icmp eq i64 %31, 8
  br i1 %32, label %33, label %21, !llvm.loop !307

33:                                               ; preds = %33, %21
  %34 = phi i64 [ %68, %33 ], [ 0, %21 ]
  %35 = shl nuw nsw i64 %34, 1
  %36 = trunc i64 %35 to i32
  %37 = or i32 %36, 1
  %38 = sitofp i32 %37 to double
  %39 = fmul double %38, 0x3FA657184AE74487
  %40 = tail call double @sin(double noundef %39) #55
  %41 = fmul double %40, 5.000000e-01
  %42 = trunc i64 %35 to i32
  %43 = add i32 %42, 19
  %44 = sitofp i32 %43 to double
  %45 = fmul double %44, 0x400921FB54442D18
  %46 = fdiv double %45, 7.200000e+01
  %47 = tail call double @cos(double noundef %46) #55
  %48 = fdiv double %41, %47
  %49 = getelementptr inbounds [4 x [36 x double]], ptr @win, i64 0, i64 1, i64 %34
  store double %48, ptr %49, align 8, !tbaa !39
  %50 = getelementptr inbounds [36 x double], ptr @win, i64 0, i64 %34
  store double %48, ptr %50, align 8, !tbaa !39
  %51 = add nuw nsw i64 %34, 18
  %52 = shl nuw nsw i64 %51, 1
  %53 = trunc i64 %52 to i32
  %54 = or i32 %53, 1
  %55 = sitofp i32 %54 to double
  %56 = fmul double %55, 0x3FA657184AE74487
  %57 = tail call double @sin(double noundef %56) #55
  %58 = fmul double %57, 5.000000e-01
  %59 = trunc i64 %52 to i32
  %60 = add i32 %59, 19
  %61 = sitofp i32 %60 to double
  %62 = fmul double %61, 0x400921FB54442D18
  %63 = fdiv double %62, 7.200000e+01
  %64 = tail call double @cos(double noundef %63) #55
  %65 = fdiv double %58, %64
  %66 = getelementptr inbounds [4 x [36 x double]], ptr @win, i64 0, i64 3, i64 %51
  store double %65, ptr %66, align 8, !tbaa !39
  %67 = getelementptr inbounds [36 x double], ptr @win, i64 0, i64 %51
  store double %65, ptr %67, align 8, !tbaa !39
  %68 = add nuw nsw i64 %34, 1
  %69 = icmp eq i64 %68, 18
  br i1 %69, label %70, label %33, !llvm.loop !310

70:                                               ; preds = %70, %33
  %71 = phi i64 [ %128, %70 ], [ 0, %33 ]
  %72 = add nuw nsw i64 %71, 18
  %73 = trunc i64 %72 to i32
  %74 = shl i32 %73, 1
  %75 = add i32 %74, 19
  %76 = sitofp i32 %75 to double
  %77 = fmul double %76, 0x400921FB54442D18
  %78 = fdiv double %77, 7.200000e+01
  %79 = tail call double @cos(double noundef %78) #55
  %80 = fdiv double 5.000000e-01, %79
  %81 = getelementptr inbounds [4 x [36 x double]], ptr @win, i64 0, i64 1, i64 %72
  store double %80, ptr %81, align 8, !tbaa !39
  %82 = add nuw nsw i64 %71, 12
  %83 = trunc i64 %82 to i32
  %84 = shl i32 %83, 1
  %85 = add i32 %84, 19
  %86 = sitofp i32 %85 to double
  %87 = fmul double %86, 0x400921FB54442D18
  %88 = fdiv double %87, 7.200000e+01
  %89 = tail call double @cos(double noundef %88) #55
  %90 = fdiv double 5.000000e-01, %89
  %91 = getelementptr inbounds [4 x [36 x double]], ptr @win, i64 0, i64 3, i64 %82
  store double %90, ptr %91, align 8, !tbaa !39
  %92 = shl nuw nsw i64 %71, 1
  %93 = trunc i64 %92 to i32
  %94 = add i32 %93, 13
  %95 = sitofp i32 %94 to double
  %96 = fmul double %95, 0x3FC0C152382D7365
  %97 = tail call double @sin(double noundef %96) #55
  %98 = fmul double %97, 5.000000e-01
  %99 = add nuw nsw i64 %71, 24
  %100 = trunc i64 %99 to i32
  %101 = shl i32 %100, 1
  %102 = add i32 %101, 19
  %103 = sitofp i32 %102 to double
  %104 = fmul double %103, 0x400921FB54442D18
  %105 = fdiv double %104, 7.200000e+01
  %106 = tail call double @cos(double noundef %105) #55
  %107 = fdiv double %98, %106
  %108 = getelementptr inbounds [4 x [36 x double]], ptr @win, i64 0, i64 1, i64 %99
  store double %107, ptr %108, align 8, !tbaa !39
  %109 = getelementptr inbounds [4 x [36 x double]], ptr @win, i64 0, i64 3, i64 %71
  store double 0.000000e+00, ptr %109, align 8, !tbaa !39
  %110 = add nuw nsw i64 %71, 30
  %111 = getelementptr inbounds [4 x [36 x double]], ptr @win, i64 0, i64 1, i64 %110
  store double 0.000000e+00, ptr %111, align 8, !tbaa !39
  %112 = trunc i64 %92 to i32
  %113 = or i32 %112, 1
  %114 = sitofp i32 %113 to double
  %115 = fmul double %114, 0x3FC0C152382D7365
  %116 = tail call double @sin(double noundef %115) #55
  %117 = fmul double %116, 5.000000e-01
  %118 = add nuw nsw i64 %71, 6
  %119 = trunc i64 %118 to i32
  %120 = shl i32 %119, 1
  %121 = add i32 %120, 19
  %122 = sitofp i32 %121 to double
  %123 = fmul double %122, 0x400921FB54442D18
  %124 = fdiv double %123, 7.200000e+01
  %125 = tail call double @cos(double noundef %124) #55
  %126 = fdiv double %117, %125
  %127 = getelementptr inbounds [4 x [36 x double]], ptr @win, i64 0, i64 3, i64 %118
  store double %126, ptr %127, align 8, !tbaa !39
  %128 = add nuw nsw i64 %71, 1
  %129 = icmp eq i64 %128, 6
  br i1 %129, label %130, label %70, !llvm.loop !311

130:                                              ; preds = %130, %70
  %131 = phi i64 [ %137, %130 ], [ 0, %70 ]
  %132 = trunc i64 %131 to i32
  %133 = sitofp i32 %132 to double
  %134 = fmul double %133, 0x3FC657184AE74487
  %135 = tail call double @cos(double noundef %134) #55
  %136 = getelementptr inbounds [9 x double], ptr @COS9, i64 0, i64 %131
  store double %135, ptr %136, align 8, !tbaa !39
  %137 = add nuw nsw i64 %131, 1
  %138 = icmp eq i64 %137, 9
  br i1 %138, label %139, label %130, !llvm.loop !312

139:                                              ; preds = %139, %130
  %140 = phi i64 [ %150, %139 ], [ 0, %130 ]
  %141 = trunc i64 %140 to i32
  %142 = shl i32 %141, 1
  %143 = or i32 %142, 1
  %144 = sitofp i32 %143 to double
  %145 = fmul double %144, 0x400921FB54442D18
  %146 = fdiv double %145, 3.600000e+01
  %147 = tail call double @cos(double noundef %146) #55
  %148 = fdiv double 5.000000e-01, %147
  %149 = getelementptr inbounds [9 x double], ptr @tfcos36, i64 0, i64 %140
  store double %148, ptr %149, align 8, !tbaa !39
  %150 = add nuw nsw i64 %140, 1
  %151 = icmp eq i64 %150, 9
  br i1 %151, label %152, label %139, !llvm.loop !313

152:                                              ; preds = %152, %139
  %153 = phi i64 [ %163, %152 ], [ 0, %139 ]
  %154 = trunc i64 %153 to i32
  %155 = shl i32 %154, 1
  %156 = or i32 %155, 1
  %157 = sitofp i32 %156 to double
  %158 = fmul double %157, 0x400921FB54442D18
  %159 = fdiv double %158, 1.200000e+01
  %160 = tail call double @cos(double noundef %159) #55
  %161 = fdiv double 5.000000e-01, %160
  %162 = getelementptr inbounds [3 x double], ptr @tfcos12, i64 0, i64 %153
  store double %161, ptr %162, align 8, !tbaa !39
  %163 = add nuw nsw i64 %153, 1
  %164 = icmp eq i64 %163, 3
  br i1 %164, label %165, label %152, !llvm.loop !314

165:                                              ; preds = %152
  store double 0x3FEBB67AE8584CAB, ptr @COS6_1, align 8, !tbaa !39
  store double 0x3FE0000000000001, ptr @COS6_2, align 8, !tbaa !39
  br label %166

166:                                              ; preds = %193, %165
  %167 = phi i64 [ 0, %165 ], [ %194, %193 ]
  %168 = shl nuw nsw i64 %167, 1
  %169 = trunc i64 %168 to i32
  %170 = or i32 %169, 1
  %171 = sitofp i32 %170 to double
  %172 = fmul double %171, 0x3FC0C152382D7365
  %173 = tail call double @sin(double noundef %172) #55
  %174 = fmul double %173, 5.000000e-01
  %175 = trunc i64 %168 to i32
  %176 = add i32 %175, 7
  %177 = sitofp i32 %176 to double
  %178 = fmul double %177, 0x400921FB54442D18
  %179 = fdiv double %178, 2.400000e+01
  %180 = tail call double @cos(double noundef %179) #55
  %181 = fdiv double %174, %180
  %182 = getelementptr inbounds [4 x [36 x double]], ptr @win, i64 0, i64 2, i64 %167
  store double %181, ptr %182, align 8, !tbaa !39
  br label %183

183:                                              ; preds = %183, %166
  %184 = phi i32 [ 0, %166 ], [ %191, %183 ]
  %185 = shl nuw nsw i32 %184, 1
  %186 = or i32 %185, 1
  %187 = mul nuw nsw i32 %186, %176
  %188 = sitofp i32 %187 to double
  %189 = fmul double %188, 0x3FC0C152382D7365
  %190 = tail call double @cos(double noundef %189) #55
  %191 = add nuw nsw i32 %184, 1
  %192 = icmp eq i32 %191, 6
  br i1 %192, label %193, label %183, !llvm.loop !315

193:                                              ; preds = %183
  %194 = add nuw nsw i64 %167, 1
  %195 = icmp eq i64 %194, 12
  br i1 %195, label %196, label %166, !llvm.loop !316

196:                                              ; preds = %218, %193
  %197 = phi i64 [ %219, %218 ], [ 0, %193 ]
  %198 = getelementptr inbounds [4 x i32], ptr @init_layer3.len, i64 0, i64 %197
  %199 = load i32, ptr %198, align 4, !tbaa !11
  %200 = sext i32 %199 to i64
  br label %203

201:                                              ; preds = %203
  %202 = sext i32 %199 to i64
  br label %210

203:                                              ; preds = %203, %196
  %204 = phi i64 [ 0, %196 ], [ %208, %203 ]
  %205 = getelementptr inbounds [4 x [36 x double]], ptr @win, i64 0, i64 %197, i64 %204
  %206 = load double, ptr %205, align 16, !tbaa !39
  %207 = getelementptr inbounds [4 x [36 x double]], ptr @win1, i64 0, i64 %197, i64 %204
  store double %206, ptr %207, align 16, !tbaa !39
  %208 = add nuw nsw i64 %204, 2
  %209 = icmp slt i64 %208, %200
  br i1 %209, label %203, label %201, !llvm.loop !317

210:                                              ; preds = %210, %201
  %211 = phi i64 [ 1, %201 ], [ %216, %210 ]
  %212 = getelementptr inbounds [4 x [36 x double]], ptr @win, i64 0, i64 %197, i64 %211
  %213 = load double, ptr %212, align 8, !tbaa !39
  %214 = fneg double %213
  %215 = getelementptr inbounds [4 x [36 x double]], ptr @win1, i64 0, i64 %197, i64 %211
  store double %214, ptr %215, align 8, !tbaa !39
  %216 = add nuw nsw i64 %211, 2
  %217 = icmp slt i64 %216, %202
  br i1 %217, label %210, label %218, !llvm.loop !318

218:                                              ; preds = %210
  %219 = add nuw nsw i64 %197, 1
  %220 = icmp eq i64 %219, 4
  br i1 %220, label %221, label %196, !llvm.loop !319

221:                                              ; preds = %266, %218
  %222 = phi i64 [ %267, %266 ], [ 0, %218 ]
  %223 = trunc i64 %222 to i32
  %224 = sitofp i32 %223 to double
  %225 = fmul double %224, 0x400921FB54442D18
  %226 = fdiv double %225, 1.200000e+01
  %227 = tail call double @tan(double noundef %226) #55
  %228 = fadd double %227, 1.000000e+00
  %229 = fdiv double %227, %228
  %230 = getelementptr inbounds [16 x double], ptr @tan1_1, i64 0, i64 %222
  store double %229, ptr %230, align 8, !tbaa !39
  %231 = fdiv double 1.000000e+00, %228
  %232 = getelementptr inbounds [16 x double], ptr @tan2_1, i64 0, i64 %222
  store double %231, ptr %232, align 8, !tbaa !39
  %233 = fmul double %227, 0x3FF6A09E667F3BCD
  %234 = fdiv double %233, %228
  %235 = getelementptr inbounds [16 x double], ptr @tan1_2, i64 0, i64 %222
  store double %234, ptr %235, align 8, !tbaa !39
  %236 = fdiv double 0x3FF6A09E667F3BCD, %228
  %237 = getelementptr inbounds [16 x double], ptr @tan2_2, i64 0, i64 %222
  store double %236, ptr %237, align 8, !tbaa !39
  %238 = icmp eq i64 %222, 0
  %239 = and i32 %223, 1
  %240 = icmp eq i32 %239, 0
  %241 = fadd double %224, 1.000000e+00
  %242 = fmul double %241, 5.000000e-01
  %243 = fmul double %224, 5.000000e-01
  br label %244

244:                                              ; preds = %257, %221
  %245 = phi i1 [ true, %221 ], [ false, %257 ]
  %246 = phi i64 [ 0, %221 ], [ 1, %257 ]
  %247 = trunc i64 %246 to i32
  %248 = add nuw nsw i32 %247, 1
  %249 = sitofp i32 %248 to double
  %250 = fmul double %249, -2.500000e-01
  %251 = tail call double @exp2(double %250) #56
  br i1 %238, label %257, label %252

252:                                              ; preds = %244
  br i1 %240, label %255, label %253

253:                                              ; preds = %252
  %254 = tail call double @pow(double noundef %251, double noundef %242) #55
  br label %257

255:                                              ; preds = %252
  %256 = tail call double @pow(double noundef %251, double noundef %243) #55
  br label %257

257:                                              ; preds = %255, %253, %244
  %258 = phi double [ 1.000000e+00, %253 ], [ %256, %255 ], [ 1.000000e+00, %244 ]
  %259 = phi double [ %254, %253 ], [ 1.000000e+00, %255 ], [ 1.000000e+00, %244 ]
  %260 = getelementptr inbounds [2 x [16 x double]], ptr @pow1_1, i64 0, i64 %246, i64 %222
  store double %259, ptr %260, align 8, !tbaa !39
  %261 = getelementptr inbounds [2 x [16 x double]], ptr @pow2_1, i64 0, i64 %246, i64 %222
  store double %258, ptr %261, align 8, !tbaa !39
  %262 = fmul double %259, 0x3FF6A09E667F3BCD
  %263 = getelementptr inbounds [2 x [16 x double]], ptr @pow1_2, i64 0, i64 %246, i64 %222
  store double %262, ptr %263, align 8, !tbaa !39
  %264 = fmul double %258, 0x3FF6A09E667F3BCD
  %265 = getelementptr inbounds [2 x [16 x double]], ptr @pow2_2, i64 0, i64 %246, i64 %222
  store double %264, ptr %265, align 8, !tbaa !39
  br i1 %245, label %244, label %266, !llvm.loop !320

266:                                              ; preds = %257
  %267 = add nuw nsw i64 %222, 1
  %268 = icmp eq i64 %267, 16
  br i1 %268, label %269, label %221, !llvm.loop !321

269:                                              ; preds = %362, %266
  %270 = phi i64 [ %364, %362 ], [ 0, %266 ]
  %271 = getelementptr inbounds [9 x [152 x i32]], ptr @mapbuf0, i64 0, i64 %270
  %272 = getelementptr inbounds [9 x [3 x ptr]], ptr @map, i64 0, i64 %270
  store ptr %271, ptr %272, align 8, !tbaa !7
  %273 = getelementptr inbounds [9 x %struct.bandInfoStruct], ptr @bandInfo, i64 0, i64 %270, i32 1
  br label %274

274:                                              ; preds = %274, %269
  %275 = phi i32 [ 0, %269 ], [ %289, %274 ]
  %276 = phi ptr [ %271, %269 ], [ %285, %274 ]
  %277 = phi ptr [ %273, %269 ], [ %287, %274 ]
  %278 = phi i32 [ 0, %269 ], [ %286, %274 ]
  %279 = load i16, ptr %277, align 2, !tbaa !41
  %280 = ashr i16 %279, 1
  %281 = sext i16 %280 to i32
  %282 = getelementptr inbounds i32, ptr %276, i64 1
  store i32 %281, ptr %276, align 4, !tbaa !11
  %283 = getelementptr inbounds i32, ptr %276, i64 2
  store i32 %275, ptr %282, align 4, !tbaa !11
  %284 = getelementptr inbounds i32, ptr %276, i64 3
  store i32 3, ptr %283, align 4, !tbaa !11
  %285 = getelementptr inbounds i32, ptr %276, i64 4
  store i32 %278, ptr %284, align 4, !tbaa !11
  %286 = add nuw nsw i32 %278, 1
  %287 = getelementptr inbounds i16, ptr %277, i64 1
  %288 = sext i16 %279 to i32
  %289 = add nsw i32 %275, %288
  %290 = icmp eq i32 %286, 8
  br i1 %290, label %291, label %274, !llvm.loop !322

291:                                              ; preds = %274
  %.lcssa1 = phi ptr [ %285, %274 ]
  %.lcssa = phi i32 [ %289, %274 ]
  %292 = getelementptr inbounds [9 x %struct.bandInfoStruct], ptr @bandInfo, i64 0, i64 %270, i32 3
  %293 = getelementptr inbounds i16, ptr %292, i64 3
  br label %294

294:                                              ; preds = %312, %291
  %295 = phi i32 [ %.lcssa, %291 ], [ %315, %312 ]
  %296 = phi ptr [ %.lcssa1, %291 ], [ %.lcssa2, %312 ]
  %297 = phi ptr [ %293, %291 ], [ %313, %312 ]
  %298 = phi i32 [ 3, %291 ], [ %316, %312 ]
  %299 = load i16, ptr %297, align 2, !tbaa !41
  %300 = ashr i16 %299, 1
  %301 = sext i16 %300 to i32
  br label %302

302:                                              ; preds = %302, %294
  %303 = phi ptr [ %296, %294 ], [ %309, %302 ]
  %304 = phi i32 [ 0, %294 ], [ %310, %302 ]
  %305 = getelementptr inbounds i32, ptr %303, i64 1
  store i32 %301, ptr %303, align 4, !tbaa !11
  %306 = add nsw i32 %304, %295
  %307 = getelementptr inbounds i32, ptr %303, i64 2
  store i32 %306, ptr %305, align 4, !tbaa !11
  %308 = getelementptr inbounds i32, ptr %303, i64 3
  store i32 %304, ptr %307, align 4, !tbaa !11
  %309 = getelementptr inbounds i32, ptr %303, i64 4
  store i32 %298, ptr %308, align 4, !tbaa !11
  %310 = add nuw nsw i32 %304, 1
  %311 = icmp eq i32 %310, 3
  br i1 %311, label %312, label %302, !llvm.loop !323

312:                                              ; preds = %302
  %.lcssa2 = phi ptr [ %309, %302 ]
  %313 = getelementptr inbounds i16, ptr %297, i64 1
  %314 = mul nsw i32 %301, 6
  %315 = add nsw i32 %314, %295
  %316 = add nuw nsw i32 %298, 1
  %317 = icmp eq i32 %316, 13
  br i1 %317, label %318, label %294, !llvm.loop !324

318:                                              ; preds = %312
  %.lcssa2.lcssa = phi ptr [ %.lcssa2, %312 ]
  %319 = getelementptr inbounds [9 x [3 x ptr]], ptr @mapend, i64 0, i64 %270
  store ptr %.lcssa2.lcssa, ptr %319, align 8, !tbaa !7
  %320 = getelementptr inbounds [9 x [156 x i32]], ptr @mapbuf1, i64 0, i64 %270
  %321 = getelementptr inbounds [9 x [3 x ptr]], ptr @map, i64 0, i64 %270, i64 1
  store ptr %320, ptr %321, align 8, !tbaa !7
  br label %322

322:                                              ; preds = %340, %318
  %323 = phi i32 [ 0, %318 ], [ %343, %340 ]
  %324 = phi ptr [ %320, %318 ], [ %.lcssa3, %340 ]
  %325 = phi ptr [ %292, %318 ], [ %341, %340 ]
  %326 = phi i32 [ 0, %318 ], [ %344, %340 ]
  %327 = load i16, ptr %325, align 2, !tbaa !41
  %328 = ashr i16 %327, 1
  %329 = sext i16 %328 to i32
  br label %330

330:                                              ; preds = %330, %322
  %331 = phi ptr [ %324, %322 ], [ %337, %330 ]
  %332 = phi i32 [ 0, %322 ], [ %338, %330 ]
  %333 = getelementptr inbounds i32, ptr %331, i64 1
  store i32 %329, ptr %331, align 4, !tbaa !11
  %334 = add nsw i32 %332, %323
  %335 = getelementptr inbounds i32, ptr %331, i64 2
  store i32 %334, ptr %333, align 4, !tbaa !11
  %336 = getelementptr inbounds i32, ptr %331, i64 3
  store i32 %332, ptr %335, align 4, !tbaa !11
  %337 = getelementptr inbounds i32, ptr %331, i64 4
  store i32 %326, ptr %336, align 4, !tbaa !11
  %338 = add nuw nsw i32 %332, 1
  %339 = icmp eq i32 %338, 3
  br i1 %339, label %340, label %330, !llvm.loop !325

340:                                              ; preds = %330
  %.lcssa3 = phi ptr [ %337, %330 ]
  %341 = getelementptr inbounds i16, ptr %325, i64 1
  %342 = mul nsw i32 %329, 6
  %343 = add nsw i32 %342, %323
  %344 = add nuw nsw i32 %326, 1
  %345 = icmp eq i32 %344, 13
  br i1 %345, label %346, label %322, !llvm.loop !326

346:                                              ; preds = %340
  %.lcssa3.lcssa = phi ptr [ %.lcssa3, %340 ]
  %347 = getelementptr inbounds [9 x [3 x ptr]], ptr @mapend, i64 0, i64 %270, i64 1
  store ptr %.lcssa3.lcssa, ptr %347, align 8, !tbaa !7
  %348 = getelementptr inbounds [9 x [44 x i32]], ptr @mapbuf2, i64 0, i64 %270
  %349 = getelementptr inbounds [9 x [3 x ptr]], ptr @map, i64 0, i64 %270, i64 2
  store ptr %348, ptr %349, align 8, !tbaa !7
  br label %350

350:                                              ; preds = %350, %346
  %351 = phi ptr [ %348, %346 ], [ %359, %350 ]
  %352 = phi ptr [ %273, %346 ], [ %354, %350 ]
  %353 = phi i32 [ 0, %346 ], [ %360, %350 ]
  %354 = getelementptr inbounds i16, ptr %352, i64 1
  %355 = load i16, ptr %352, align 2, !tbaa !41
  %356 = ashr i16 %355, 1
  %357 = sext i16 %356 to i32
  %358 = getelementptr inbounds i32, ptr %351, i64 1
  store i32 %357, ptr %351, align 4, !tbaa !11
  %359 = getelementptr inbounds i32, ptr %351, i64 2
  store i32 %353, ptr %358, align 4, !tbaa !11
  %360 = add nuw nsw i32 %353, 1
  %361 = icmp eq i32 %360, 22
  br i1 %361, label %362, label %350, !llvm.loop !327

362:                                              ; preds = %350
  %.lcssa4 = phi ptr [ %359, %350 ]
  %363 = getelementptr inbounds [9 x [3 x ptr]], ptr @mapend, i64 0, i64 %270, i64 2
  store ptr %.lcssa4, ptr %363, align 8, !tbaa !7
  %364 = add nuw nsw i64 %270, 1
  %365 = icmp eq i64 %364, 9
  br i1 %365, label %366, label %269, !llvm.loop !328

366:                                              ; preds = %395, %362
  %367 = phi i64 [ %396, %395 ], [ 0, %362 ]
  %368 = getelementptr inbounds [9 x %struct.bandInfoStruct], ptr @bandInfo, i64 0, i64 %367
  br label %369

369:                                              ; preds = %369, %366
  %370 = phi i64 [ 0, %366 ], [ %380, %369 ]
  %371 = getelementptr inbounds [23 x i16], ptr %368, i64 0, i64 %370
  %372 = load i16, ptr %371, align 2, !tbaa !41
  %373 = sext i16 %372 to i32
  %374 = add nsw i32 %373, 7
  %375 = sdiv i32 %374, 18
  %376 = add nsw i32 %375, 1
  %377 = getelementptr inbounds [9 x [23 x i32]], ptr @longLimit, i64 0, i64 %367, i64 %370
  %378 = icmp slt i32 %375, %0
  %379 = select i1 %378, i32 %376, i32 %0
  store i32 %379, ptr %377, align 4, !tbaa !11
  %380 = add nuw nsw i64 %370, 1
  %381 = icmp eq i64 %380, 23
  br i1 %381, label %382, label %369, !llvm.loop !329

382:                                              ; preds = %382, %369
  %383 = phi i64 [ %393, %382 ], [ 0, %369 ]
  %384 = getelementptr inbounds [9 x %struct.bandInfoStruct], ptr @bandInfo, i64 0, i64 %367, i32 2, i64 %383
  %385 = load i16, ptr %384, align 2, !tbaa !41
  %386 = sext i16 %385 to i32
  %387 = add nsw i32 %386, -1
  %388 = sdiv i32 %387, 18
  %389 = add nsw i32 %388, 1
  %390 = getelementptr inbounds [9 x [14 x i32]], ptr @shortLimit, i64 0, i64 %367, i64 %383
  %391 = icmp slt i32 %388, %0
  %392 = select i1 %391, i32 %389, i32 %0
  store i32 %392, ptr %390, align 4, !tbaa !11
  %393 = add nuw nsw i64 %383, 1
  %394 = icmp eq i64 %393, 14
  br i1 %394, label %395, label %382, !llvm.loop !330

395:                                              ; preds = %382
  %396 = add nuw nsw i64 %367, 1
  %397 = icmp eq i64 %396, 9
  br i1 %397, label %398, label %366, !llvm.loop !331

398:                                              ; preds = %439, %395
  %399 = phi i64 [ %440, %439 ], [ 0, %395 ]
  %400 = mul nuw nsw i64 %399, 36
  %401 = trunc i64 %399 to i32
  br label %402

402:                                              ; preds = %436, %398
  %403 = phi i64 [ 0, %398 ], [ %437, %436 ]
  %404 = mul nuw nsw i64 %403, 6
  %405 = add nuw nsw i64 %404, %400
  %406 = trunc i64 %403 to i32
  %407 = shl i32 %406, 3
  br label %408

408:                                              ; preds = %432, %402
  %409 = phi i64 [ 0, %402 ], [ %433, %432 ]
  %410 = phi <2 x i64> [ <i64 0, i64 1>, %402 ], [ %434, %432 ]
  %411 = trunc i64 %409 to i32
  %412 = icmp ult <2 x i64> %410, <i64 6, i64 6>
  %413 = extractelement <2 x i1> %412, i64 0
  br i1 %413, label %414, label %421

414:                                              ; preds = %408
  %415 = shl i32 %411, 6
  %416 = or i32 %407, %415
  %417 = add nuw nsw i64 %405, %409
  %418 = or i32 %416, %401
  %419 = getelementptr inbounds [256 x i32], ptr @i_slen2, i64 0, i64 %417
  %420 = or i32 %418, 12288
  store i32 %420, ptr %419, align 8, !tbaa !11
  br label %421

421:                                              ; preds = %414, %408
  %422 = extractelement <2 x i1> %412, i64 1
  br i1 %422, label %423, label %432

423:                                              ; preds = %421
  %424 = shl i32 %411, 6
  %425 = or i32 %424, 64
  %426 = or i64 %409, 1
  %427 = or i32 %407, %425
  %428 = add nuw nsw i64 %405, %426
  %429 = or i32 %427, %401
  %430 = getelementptr inbounds [256 x i32], ptr @i_slen2, i64 0, i64 %428
  %431 = or i32 %429, 12288
  store i32 %431, ptr %430, align 4, !tbaa !11
  br label %432

432:                                              ; preds = %423, %421
  %433 = add i64 %409, 2
  %434 = add <2 x i64> %410, <i64 2, i64 2>
  %435 = icmp eq i64 %433, 6
  br i1 %435, label %436, label %408, !llvm.loop !332

436:                                              ; preds = %432
  %437 = add nuw nsw i64 %403, 1
  %438 = icmp eq i64 %437, 6
  br i1 %438, label %439, label %402, !llvm.loop !333

439:                                              ; preds = %436
  %440 = add nuw nsw i64 %399, 1
  %441 = icmp eq i64 %440, 5
  br i1 %441, label %442, label %398, !llvm.loop !334

442:                                              ; preds = %460, %439
  %443 = phi i64 [ %461, %460 ], [ 0, %439 ]
  %444 = shl nsw i64 %443, 4
  %445 = add nuw nsw i64 %444, 180
  %446 = trunc i64 %443 to i32
  br label %447

447:                                              ; preds = %447, %442
  %448 = phi i64 [ 0, %442 ], [ %458, %447 ]
  %449 = shl nsw i64 %448, 2
  %450 = add nuw nsw i64 %445, %449
  %451 = trunc i64 %448 to i32
  %452 = shl i32 %451, 3
  %453 = or i32 %452, %446
  %454 = insertelement <4 x i32> poison, i32 %453, i64 0
  %455 = shufflevector <4 x i32> %454, <4 x i32> poison, <4 x i32> zeroinitializer
  %456 = or <4 x i32> %455, <i32 16384, i32 16448, i32 16512, i32 16576>
  %457 = getelementptr inbounds [256 x i32], ptr @i_slen2, i64 0, i64 %450
  store <4 x i32> %456, ptr %457, align 16, !tbaa !11
  %458 = add nuw nsw i64 %448, 1
  %459 = icmp eq i64 %458, 4
  br i1 %459, label %460, label %447, !llvm.loop !335

460:                                              ; preds = %447
  %461 = add nuw nsw i64 %443, 1
  %462 = icmp eq i64 %461, 4
  br i1 %462, label %463, label %442, !llvm.loop !336

463:                                              ; preds = %481, %460
  %464 = phi i64 [ %482, %481 ], [ 0, %460 ]
  %465 = mul nuw nsw i64 %464, 3
  %466 = trunc i64 %464 to i32
  br label %467

467:                                              ; preds = %467, %463
  %468 = phi i64 [ 0, %463 ], [ %479, %467 ]
  %469 = add nuw nsw i64 %468, %465
  %470 = trunc i64 %468 to i32
  %471 = shl i32 %470, 3
  %472 = or i32 %471, %466
  %473 = or i32 %472, 20480
  %474 = add nuw nsw i64 %469, 244
  %475 = getelementptr inbounds [256 x i32], ptr @i_slen2, i64 0, i64 %474
  store i32 %473, ptr %475, align 4, !tbaa !11
  %476 = or i32 %472, 40960
  %477 = add nuw nsw i64 %469, 500
  %478 = getelementptr inbounds [512 x i32], ptr @n_slen2, i64 0, i64 %477
  store i32 %476, ptr %478, align 4, !tbaa !11
  %479 = add nuw nsw i64 %468, 1
  %480 = icmp eq i64 %479, 3
  br i1 %480, label %481, label %467, !llvm.loop !337

481:                                              ; preds = %467
  %482 = add nuw nsw i64 %464, 1
  %483 = icmp eq i64 %482, 4
  br i1 %483, label %484, label %463, !llvm.loop !338

484:                                              ; preds = %511, %481
  %485 = phi i64 [ %512, %511 ], [ 0, %481 ]
  %486 = mul nuw nsw i64 %485, 80
  %487 = trunc i64 %485 to i32
  br label %488

488:                                              ; preds = %508, %484
  %489 = phi i64 [ 0, %484 ], [ %509, %508 ]
  %490 = shl nsw i64 %489, 4
  %491 = add nuw nsw i64 %490, %486
  %492 = trunc i64 %489 to i32
  %493 = shl i32 %492, 3
  br label %494

494:                                              ; preds = %494, %488
  %495 = phi i64 [ 0, %488 ], [ %506, %494 ]
  %496 = shl nsw i64 %495, 2
  %497 = add nuw nsw i64 %491, %496
  %498 = trunc i64 %495 to i32
  %499 = shl i32 %498, 6
  %500 = or i32 %493, %499
  %501 = or i32 %500, %487
  %502 = insertelement <4 x i32> poison, i32 %501, i64 0
  %503 = shufflevector <4 x i32> %502, <4 x i32> poison, <4 x i32> zeroinitializer
  %504 = or <4 x i32> %503, <i32 0, i32 512, i32 1024, i32 1536>
  %505 = getelementptr inbounds [512 x i32], ptr @n_slen2, i64 0, i64 %497
  store <4 x i32> %504, ptr %505, align 16, !tbaa !11
  %506 = add nuw nsw i64 %495, 1
  %507 = icmp eq i64 %506, 4
  br i1 %507, label %508, label %494, !llvm.loop !339

508:                                              ; preds = %494
  %509 = add nuw nsw i64 %489, 1
  %510 = icmp eq i64 %509, 5
  br i1 %510, label %511, label %488, !llvm.loop !340

511:                                              ; preds = %508
  %512 = add nuw nsw i64 %485, 1
  %513 = icmp eq i64 %512, 5
  br i1 %513, label %514, label %484, !llvm.loop !341

514:                                              ; preds = %532, %511
  %515 = phi i64 [ %533, %532 ], [ 0, %511 ]
  %516 = mul nuw nsw i64 %515, 20
  %517 = add nuw nsw i64 %516, 400
  %518 = trunc i64 %515 to i32
  br label %519

519:                                              ; preds = %519, %514
  %520 = phi i64 [ 0, %514 ], [ %530, %519 ]
  %521 = shl nsw i64 %520, 2
  %522 = add nuw nsw i64 %517, %521
  %523 = trunc i64 %520 to i32
  %524 = shl i32 %523, 3
  %525 = or i32 %524, %518
  %526 = insertelement <4 x i32> poison, i32 %525, i64 0
  %527 = shufflevector <4 x i32> %526, <4 x i32> poison, <4 x i32> zeroinitializer
  %528 = or <4 x i32> %527, <i32 4096, i32 4160, i32 4224, i32 4288>
  %529 = getelementptr inbounds [512 x i32], ptr @n_slen2, i64 0, i64 %522
  store <4 x i32> %528, ptr %529, align 16, !tbaa !11
  %530 = add nuw nsw i64 %520, 1
  %531 = icmp eq i64 %530, 5
  br i1 %531, label %532, label %519, !llvm.loop !342

532:                                              ; preds = %519
  %533 = add nuw nsw i64 %515, 1
  %534 = icmp eq i64 %533, 5
  br i1 %534, label %535, label %514, !llvm.loop !343

535:                                              ; preds = %532
  ret void
}

declare double @exp2(double) local_unnamed_addr

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write)
declare double @pow(double noundef, double noundef) local_unnamed_addr #18

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x double> @llvm.fmuladd.v2f64(<2 x double>, <2 x double>, <2 x double>) #9

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x double> @llvm.sqrt.v2f64(<2 x double>) #9

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write)
declare double @tan(double noundef) local_unnamed_addr #18

; Function Attrs: nounwind optsize uwtable
define internal i32 @do_layer3(ptr nocapture noundef readonly %0, ptr noundef %1, ptr noundef %2) #4 {
  %4 = alloca [2 x [39 x i32]], align 16
  %5 = alloca %struct.III_sideinfo, align 8
  %6 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 312, ptr nonnull %4) #56
  call void @llvm.lifetime.start.p0(i64 488, ptr nonnull %5) #56
  %7 = load i32, ptr %0, align 4, !tbaa !35
  %8 = getelementptr inbounds %struct.frame, ptr %0, i64 0, i32 2
  %9 = load i32, ptr %8, align 4, !tbaa !344
  %10 = getelementptr inbounds %struct.frame, ptr %0, i64 0, i32 9
  %11 = load i32, ptr %10, align 4, !tbaa !345
  %12 = icmp ne i32 %7, 1
  %13 = icmp slt i32 %9, 0
  %14 = select i1 %12, i32 %9, i32 0
  %15 = select i1 %12, i1 %13, i1 false
  %16 = getelementptr inbounds %struct.frame, ptr %0, i64 0, i32 12
  %17 = load i32, ptr %16, align 4, !tbaa !30
  %18 = icmp eq i32 %17, 1
  br i1 %18, label %19, label %24

19:                                               ; preds = %3
  %20 = getelementptr inbounds %struct.frame, ptr %0, i64 0, i32 13
  %21 = load i32, ptr %20, align 4, !tbaa !31
  %22 = and i32 %21, 2
  %23 = and i32 %21, 1
  br label %24

24:                                               ; preds = %19, %3
  %25 = phi i32 [ %22, %19 ], [ 0, %3 ]
  %26 = phi i32 [ %23, %19 ], [ 0, %3 ]
  %27 = getelementptr inbounds %struct.frame, ptr %0, i64 0, i32 3
  %28 = load i32, ptr %27, align 4, !tbaa !346
  %29 = icmp eq i32 %28, 0
  %30 = sext i32 %11 to i64
  %31 = icmp eq i32 %14, 3
  %32 = select i1 %31, i64 4, i64 0
  br i1 %29, label %188, label %33

33:                                               ; preds = %24
  %34 = tail call i32 @getbits(i32 noundef 8) #55
  store i32 %34, ptr %5, align 8, !tbaa !347
  br i1 %12, label %49, label %35

35:                                               ; preds = %33
  %36 = load ptr, ptr @wordpointer, align 8, !tbaa !7
  %37 = load i8, ptr %36, align 1, !tbaa !15
  %38 = zext i8 %37 to i32
  %39 = load i32, ptr @bitindex, align 4, !tbaa !11
  %40 = shl i32 %38, %39
  %41 = add nsw i32 %39, 1
  %42 = ashr i32 %41, 3
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds i8, ptr %36, i64 %43
  store ptr %44, ptr @wordpointer, align 8, !tbaa !7
  %45 = and i32 %41, 7
  store i32 %45, ptr @bitindex, align 4, !tbaa !11
  %46 = lshr i32 %40, 7
  %47 = and i32 %46, 1
  %48 = getelementptr inbounds %struct.III_sideinfo, ptr %5, i64 0, i32 1
  store i32 %47, ptr %48, align 4
  br label %53

49:                                               ; preds = %33
  %50 = tail call i32 @getbits_fast(i32 noundef 2) #55
  %51 = getelementptr inbounds %struct.III_sideinfo, ptr %5, i64 0, i32 1
  store i32 %50, ptr %51, align 4
  %52 = icmp sgt i32 %7, 0
  br i1 %52, label %53, label %353

53:                                               ; preds = %49, %35
  %54 = getelementptr double, ptr getelementptr inbounds ([378 x double], ptr @gainpow2, i64 0, i64 256), i64 %32
  %55 = icmp eq i32 %25, 0
  %56 = select i1 %55, i64 0, i64 2
  %57 = getelementptr double, ptr %54, i64 %56
  %58 = icmp eq i32 %11, 8
  %59 = getelementptr inbounds [9 x %struct.bandInfoStruct], ptr @bandInfo, i64 0, i64 %30
  %60 = zext i32 %7 to i64
  br label %61

61:                                               ; preds = %161, %53
  %62 = phi i64 [ 0, %53 ], [ %186, %161 ]
  %63 = getelementptr inbounds %struct.III_sideinfo, ptr %5, i64 0, i32 2, i64 %62
  %64 = tail call i32 @getbits(i32 noundef 12) #55
  %65 = getelementptr inbounds %struct.gr_info_s, ptr %63, i64 0, i32 1
  store i32 %64, ptr %65, align 4, !tbaa !349
  %66 = tail call i32 @getbits_fast(i32 noundef 9) #55
  %67 = getelementptr inbounds %struct.gr_info_s, ptr %63, i64 0, i32 2
  store i32 %66, ptr %67, align 8, !tbaa !351
  %68 = icmp ugt i32 %66, 288
  br i1 %68, label %69, label %72

69:                                               ; preds = %61
  %70 = load ptr, ptr @stderr, align 8, !tbaa !7
  %71 = tail call i64 @fwrite(ptr nonnull @.str.181, i64 22, i64 1, ptr %70) #53
  store i32 288, ptr %67, align 8, !tbaa !351
  br label %72

72:                                               ; preds = %69, %61
  %73 = tail call i32 @getbits_fast(i32 noundef 8) #55
  %74 = zext i32 %73 to i64
  %75 = sub nsw i64 0, %74
  %76 = getelementptr inbounds %struct.gr_info_s, ptr %63, i64 0, i32 17
  %77 = getelementptr double, ptr %57, i64 %75
  store ptr %77, ptr %76, align 8, !tbaa !352
  %78 = tail call i32 @getbits(i32 noundef 9) #55
  %79 = getelementptr inbounds %struct.gr_info_s, ptr %63, i64 0, i32 3
  store i32 %78, ptr %79, align 4, !tbaa !353
  %80 = load ptr, ptr @wordpointer, align 8, !tbaa !7
  %81 = load i8, ptr %80, align 1, !tbaa !15
  %82 = zext i8 %81 to i32
  %83 = load i32, ptr @bitindex, align 4, !tbaa !11
  %84 = add nsw i32 %83, 1
  %85 = ashr i32 %84, 3
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds i8, ptr %80, i64 %86
  store ptr %87, ptr @wordpointer, align 8, !tbaa !7
  %88 = and i32 %84, 7
  store i32 %88, ptr @bitindex, align 4, !tbaa !11
  %89 = lshr i32 128, %83
  %90 = and i32 %89, %82
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %135, label %92

92:                                               ; preds = %72
  %93 = tail call i32 @getbits_fast(i32 noundef 2) #55
  %94 = getelementptr inbounds %struct.gr_info_s, ptr %63, i64 0, i32 4
  store i32 %93, ptr %94, align 8, !tbaa !354
  %95 = load ptr, ptr @wordpointer, align 8, !tbaa !7
  %96 = load i8, ptr %95, align 1, !tbaa !15
  %97 = zext i8 %96 to i32
  %98 = load i32, ptr @bitindex, align 4, !tbaa !11
  %99 = shl i32 %97, %98
  %100 = add nsw i32 %98, 1
  %101 = ashr i32 %100, 3
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds i8, ptr %95, i64 %102
  store ptr %103, ptr @wordpointer, align 8, !tbaa !7
  %104 = and i32 %100, 7
  store i32 %104, ptr @bitindex, align 4, !tbaa !11
  %105 = lshr i32 %99, 7
  %106 = and i32 %105, 1
  %107 = getelementptr inbounds %struct.gr_info_s, ptr %63, i64 0, i32 5
  store i32 %106, ptr %107, align 4, !tbaa !355
  %108 = tail call i32 @getbits_fast(i32 noundef 5) #55
  %109 = getelementptr inbounds %struct.gr_info_s, ptr %63, i64 0, i32 6
  store i32 %108, ptr %109, align 8, !tbaa !11
  %110 = tail call i32 @getbits_fast(i32 noundef 5) #55
  %111 = getelementptr inbounds %struct.gr_info_s, ptr %63, i64 0, i32 6, i64 1
  store i32 %110, ptr %111, align 4, !tbaa !11
  %112 = getelementptr inbounds %struct.gr_info_s, ptr %63, i64 0, i32 6, i64 2
  store i32 0, ptr %112, align 8, !tbaa !11
  br label %113

113:                                              ; preds = %113, %92
  %114 = phi i64 [ 0, %92 ], [ %121, %113 ]
  %115 = tail call i32 @getbits_fast(i32 noundef 3) #55
  %116 = shl i32 %115, 3
  %117 = load ptr, ptr %76, align 8, !tbaa !352
  %118 = zext i32 %116 to i64
  %119 = getelementptr inbounds double, ptr %117, i64 %118
  %120 = getelementptr inbounds %struct.gr_info_s, ptr %63, i64 0, i32 16, i64 %114
  store ptr %119, ptr %120, align 8, !tbaa !7
  %121 = add nuw nsw i64 %114, 1
  %122 = icmp eq i64 %121, 3
  br i1 %122, label %123, label %113, !llvm.loop !356

123:                                              ; preds = %113
  switch i32 %93, label %129 [
    i32 0, label %124
    i32 2, label %127
  ]

124:                                              ; preds = %123
  %125 = load ptr, ptr @stderr, align 8, !tbaa !7
  %126 = tail call i64 @fwrite(ptr nonnull @.str.1.182, i64 54, i64 1, ptr %125) #53
  tail call void @exit(i32 noundef 1) #54
  unreachable

127:                                              ; preds = %123
  %128 = getelementptr inbounds %struct.gr_info_s, ptr %63, i64 0, i32 11
  store i32 18, ptr %128, align 4, !tbaa !357
  br label %133

129:                                              ; preds = %123
  %130 = getelementptr inbounds %struct.gr_info_s, ptr %63, i64 0, i32 11
  br i1 %58, label %131, label %132

131:                                              ; preds = %129
  store i32 54, ptr %130, align 4, !tbaa !357
  br label %133

132:                                              ; preds = %129
  store i32 27, ptr %130, align 4, !tbaa !357
  br label %133

133:                                              ; preds = %132, %131, %127
  %134 = getelementptr inbounds %struct.gr_info_s, ptr %63, i64 0, i32 12
  store i32 288, ptr %134, align 8, !tbaa !358
  br label %161

135:                                              ; preds = %135, %72
  %136 = phi i64 [ %139, %135 ], [ 0, %72 ]
  %137 = tail call i32 @getbits_fast(i32 noundef 5) #55
  %138 = getelementptr inbounds %struct.gr_info_s, ptr %63, i64 0, i32 6, i64 %136
  store i32 %137, ptr %138, align 4, !tbaa !11
  %139 = add nuw nsw i64 %136, 1
  %140 = icmp eq i64 %139, 3
  br i1 %140, label %141, label %135, !llvm.loop !359

141:                                              ; preds = %135
  %142 = tail call i32 @getbits_fast(i32 noundef 4) #55
  %143 = tail call i32 @getbits_fast(i32 noundef 3) #55
  %144 = add nsw i32 %142, 1
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds [23 x i16], ptr %59, i64 0, i64 %145
  %147 = load i16, ptr %146, align 2, !tbaa !41
  %148 = ashr i16 %147, 1
  %149 = sext i16 %148 to i32
  %150 = getelementptr inbounds %struct.gr_info_s, ptr %63, i64 0, i32 11
  store i32 %149, ptr %150, align 4, !tbaa !357
  %151 = add i32 %143, 1
  %152 = add i32 %151, %144
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds [23 x i16], ptr %59, i64 0, i64 %153
  %155 = load i16, ptr %154, align 2, !tbaa !41
  %156 = ashr i16 %155, 1
  %157 = sext i16 %156 to i32
  %158 = getelementptr inbounds %struct.gr_info_s, ptr %63, i64 0, i32 12
  store i32 %157, ptr %158, align 8, !tbaa !358
  %159 = getelementptr inbounds %struct.gr_info_s, ptr %63, i64 0, i32 4
  store i32 0, ptr %159, align 8, !tbaa !354
  %160 = getelementptr inbounds %struct.gr_info_s, ptr %63, i64 0, i32 5
  store i32 0, ptr %160, align 4, !tbaa !355
  br label %161

161:                                              ; preds = %141, %133
  %162 = load ptr, ptr @wordpointer, align 8, !tbaa !7
  %163 = load i8, ptr %162, align 1, !tbaa !15
  %164 = zext i8 %163 to i32
  %165 = load i32, ptr @bitindex, align 4, !tbaa !11
  %166 = shl i32 %164, %165
  %167 = add nsw i32 %165, 1
  %168 = ashr i32 %167, 3
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds i8, ptr %162, i64 %169
  store ptr %170, ptr @wordpointer, align 8, !tbaa !7
  %171 = and i32 %167, 7
  store i32 %171, ptr @bitindex, align 4, !tbaa !11
  %172 = lshr i32 %166, 7
  %173 = and i32 %172, 1
  %174 = getelementptr inbounds %struct.gr_info_s, ptr %63, i64 0, i32 14
  store i32 %173, ptr %174, align 8, !tbaa !360
  %175 = load i8, ptr %170, align 1, !tbaa !15
  %176 = zext i8 %175 to i32
  %177 = shl nuw nsw i32 %176, %171
  %178 = add nuw nsw i32 %171, 1
  %179 = lshr i32 %178, 3
  %180 = zext i32 %179 to i64
  %181 = getelementptr inbounds i8, ptr %170, i64 %180
  store ptr %181, ptr @wordpointer, align 8, !tbaa !7
  %182 = and i32 %178, 7
  store i32 %182, ptr @bitindex, align 4, !tbaa !11
  %183 = lshr i32 %177, 7
  %184 = and i32 %183, 1
  %185 = getelementptr inbounds %struct.gr_info_s, ptr %63, i64 0, i32 15
  store i32 %184, ptr %185, align 4, !tbaa !361
  %186 = add nuw nsw i64 %62, 1
  %187 = icmp eq i64 %186, %60
  br i1 %187, label %353, label %61, !llvm.loop !362

188:                                              ; preds = %24
  %189 = tail call i32 @getbits(i32 noundef 9) #55
  store i32 %189, ptr %5, align 8, !tbaa !347
  %190 = getelementptr inbounds %struct.III_sideinfo, ptr %5, i64 0, i32 1
  br i1 %12, label %193, label %191

191:                                              ; preds = %188
  %192 = tail call i32 @getbits_fast(i32 noundef 5) #55
  store i32 %192, ptr %190, align 4
  br label %198

193:                                              ; preds = %188
  %194 = tail call i32 @getbits_fast(i32 noundef 3) #55
  store i32 %194, ptr %190, align 4
  %195 = icmp sgt i32 %7, 0
  br i1 %195, label %198, label %196

196:                                              ; preds = %193
  %197 = zext i32 %7 to i64
  br label %200

198:                                              ; preds = %193, %191
  %199 = zext i32 %7 to i64
  br label %208

200:                                              ; preds = %208, %196
  %201 = phi i64 [ %197, %196 ], [ %199, %208 ]
  %202 = phi i1 [ false, %196 ], [ true, %208 ]
  %203 = getelementptr double, ptr getelementptr inbounds ([378 x double], ptr @gainpow2, i64 0, i64 256), i64 %32
  %204 = icmp eq i32 %25, 0
  %205 = select i1 %204, i64 0, i64 2
  %206 = getelementptr double, ptr %203, i64 %205
  %207 = getelementptr inbounds [9 x %struct.bandInfoStruct], ptr @bandInfo, i64 0, i64 %30
  br label %215

208:                                              ; preds = %208, %198
  %209 = phi i64 [ 0, %198 ], [ %213, %208 ]
  %210 = getelementptr inbounds %struct.III_sideinfo, ptr %5, i64 0, i32 2, i64 %209
  store i32 -1, ptr %210, align 8, !tbaa !363
  %211 = tail call i32 @getbits_fast(i32 noundef 4) #55
  %212 = getelementptr inbounds [2 x %struct.gr_info_s], ptr %210, i64 0, i64 1
  store i32 %211, ptr %212, align 8, !tbaa !363
  %213 = add nuw nsw i64 %209, 1
  %214 = icmp eq i64 %213, %199
  br i1 %214, label %200, label %208, !llvm.loop !364

215:                                              ; preds = %352, %200
  %216 = phi i1 [ true, %200 ], [ false, %352 ]
  %217 = phi i64 [ 0, %200 ], [ 1, %352 ]
  br i1 %202, label %218, label %352

218:                                              ; preds = %314, %215
  %219 = phi i64 [ %350, %314 ], [ 0, %215 ]
  %220 = getelementptr inbounds %struct.III_sideinfo, ptr %5, i64 0, i32 2, i64 %219
  %221 = tail call i32 @getbits(i32 noundef 12) #55
  %222 = getelementptr inbounds [2 x %struct.gr_info_s], ptr %220, i64 0, i64 %217, i32 1
  store i32 %221, ptr %222, align 4, !tbaa !349
  %223 = tail call i32 @getbits_fast(i32 noundef 9) #55
  %224 = getelementptr inbounds [2 x %struct.gr_info_s], ptr %220, i64 0, i64 %217, i32 2
  store i32 %223, ptr %224, align 8, !tbaa !351
  %225 = icmp ugt i32 %223, 288
  br i1 %225, label %226, label %229

226:                                              ; preds = %218
  %227 = load ptr, ptr @stderr, align 8, !tbaa !7
  %228 = tail call i64 @fwrite(ptr nonnull @.str.181, i64 22, i64 1, ptr %227) #53
  store i32 288, ptr %224, align 8, !tbaa !351
  br label %229

229:                                              ; preds = %226, %218
  %230 = tail call i32 @getbits_fast(i32 noundef 8) #55
  %231 = zext i32 %230 to i64
  %232 = sub nsw i64 0, %231
  %233 = getelementptr inbounds [2 x %struct.gr_info_s], ptr %220, i64 0, i64 %217, i32 17
  %234 = getelementptr double, ptr %206, i64 %232
  store ptr %234, ptr %233, align 8, !tbaa !352
  %235 = tail call i32 @getbits_fast(i32 noundef 4) #55
  %236 = getelementptr inbounds [2 x %struct.gr_info_s], ptr %220, i64 0, i64 %217, i32 3
  store i32 %235, ptr %236, align 4, !tbaa !353
  %237 = load ptr, ptr @wordpointer, align 8, !tbaa !7
  %238 = load i8, ptr %237, align 1, !tbaa !15
  %239 = zext i8 %238 to i32
  %240 = load i32, ptr @bitindex, align 4, !tbaa !11
  %241 = add nsw i32 %240, 1
  %242 = ashr i32 %241, 3
  %243 = sext i32 %242 to i64
  %244 = getelementptr inbounds i8, ptr %237, i64 %243
  store ptr %244, ptr @wordpointer, align 8, !tbaa !7
  %245 = and i32 %241, 7
  store i32 %245, ptr @bitindex, align 4, !tbaa !11
  %246 = lshr i32 128, %240
  %247 = and i32 %246, %239
  %248 = icmp eq i32 %247, 0
  br i1 %248, label %288, label %249

249:                                              ; preds = %229
  %250 = tail call i32 @getbits_fast(i32 noundef 2) #55
  %251 = getelementptr inbounds [2 x %struct.gr_info_s], ptr %220, i64 0, i64 %217, i32 4
  store i32 %250, ptr %251, align 8, !tbaa !354
  %252 = load ptr, ptr @wordpointer, align 8, !tbaa !7
  %253 = load i8, ptr %252, align 1, !tbaa !15
  %254 = zext i8 %253 to i32
  %255 = load i32, ptr @bitindex, align 4, !tbaa !11
  %256 = shl i32 %254, %255
  %257 = add nsw i32 %255, 1
  %258 = ashr i32 %257, 3
  %259 = sext i32 %258 to i64
  %260 = getelementptr inbounds i8, ptr %252, i64 %259
  store ptr %260, ptr @wordpointer, align 8, !tbaa !7
  %261 = and i32 %257, 7
  store i32 %261, ptr @bitindex, align 4, !tbaa !11
  %262 = lshr i32 %256, 7
  %263 = and i32 %262, 1
  %264 = getelementptr inbounds [2 x %struct.gr_info_s], ptr %220, i64 0, i64 %217, i32 5
  store i32 %263, ptr %264, align 4, !tbaa !355
  %265 = tail call i32 @getbits_fast(i32 noundef 5) #55
  %266 = getelementptr inbounds [2 x %struct.gr_info_s], ptr %220, i64 0, i64 %217, i32 6
  store i32 %265, ptr %266, align 8, !tbaa !11
  %267 = tail call i32 @getbits_fast(i32 noundef 5) #55
  %268 = getelementptr inbounds [2 x %struct.gr_info_s], ptr %220, i64 0, i64 %217, i32 6, i64 1
  store i32 %267, ptr %268, align 4, !tbaa !11
  %269 = getelementptr inbounds [2 x %struct.gr_info_s], ptr %220, i64 0, i64 %217, i32 6, i64 2
  store i32 0, ptr %269, align 8, !tbaa !11
  br label %270

270:                                              ; preds = %270, %249
  %271 = phi i64 [ 0, %249 ], [ %278, %270 ]
  %272 = tail call i32 @getbits_fast(i32 noundef 3) #55
  %273 = shl i32 %272, 3
  %274 = load ptr, ptr %233, align 8, !tbaa !352
  %275 = zext i32 %273 to i64
  %276 = getelementptr inbounds double, ptr %274, i64 %275
  %277 = getelementptr inbounds [2 x %struct.gr_info_s], ptr %220, i64 0, i64 %217, i32 16, i64 %271
  store ptr %276, ptr %277, align 8, !tbaa !7
  %278 = add nuw nsw i64 %271, 1
  %279 = icmp eq i64 %278, 3
  br i1 %279, label %280, label %270, !llvm.loop !365

280:                                              ; preds = %270
  %281 = icmp eq i32 %250, 0
  br i1 %281, label %282, label %285

282:                                              ; preds = %280
  %283 = load ptr, ptr @stderr, align 8, !tbaa !7
  %284 = tail call i64 @fwrite(ptr nonnull @.str.1.182, i64 54, i64 1, ptr %283) #53
  tail call void @exit(i32 noundef 1) #54
  unreachable

285:                                              ; preds = %280
  %286 = getelementptr inbounds [2 x %struct.gr_info_s], ptr %220, i64 0, i64 %217, i32 11
  store i32 18, ptr %286, align 4, !tbaa !357
  %287 = getelementptr inbounds [2 x %struct.gr_info_s], ptr %220, i64 0, i64 %217, i32 12
  store i32 288, ptr %287, align 8, !tbaa !358
  br label %314

288:                                              ; preds = %288, %229
  %289 = phi i64 [ %292, %288 ], [ 0, %229 ]
  %290 = tail call i32 @getbits_fast(i32 noundef 5) #55
  %291 = getelementptr inbounds [2 x %struct.gr_info_s], ptr %220, i64 0, i64 %217, i32 6, i64 %289
  store i32 %290, ptr %291, align 4, !tbaa !11
  %292 = add nuw nsw i64 %289, 1
  %293 = icmp eq i64 %292, 3
  br i1 %293, label %294, label %288, !llvm.loop !366

294:                                              ; preds = %288
  %295 = tail call i32 @getbits_fast(i32 noundef 4) #55
  %296 = tail call i32 @getbits_fast(i32 noundef 3) #55
  %297 = add nsw i32 %295, 1
  %298 = sext i32 %297 to i64
  %299 = getelementptr inbounds [23 x i16], ptr %207, i64 0, i64 %298
  %300 = load i16, ptr %299, align 2, !tbaa !41
  %301 = ashr i16 %300, 1
  %302 = sext i16 %301 to i32
  %303 = getelementptr inbounds [2 x %struct.gr_info_s], ptr %220, i64 0, i64 %217, i32 11
  store i32 %302, ptr %303, align 4, !tbaa !357
  %304 = add i32 %296, 1
  %305 = add i32 %304, %297
  %306 = sext i32 %305 to i64
  %307 = getelementptr inbounds [23 x i16], ptr %207, i64 0, i64 %306
  %308 = load i16, ptr %307, align 2, !tbaa !41
  %309 = ashr i16 %308, 1
  %310 = sext i16 %309 to i32
  %311 = getelementptr inbounds [2 x %struct.gr_info_s], ptr %220, i64 0, i64 %217, i32 12
  store i32 %310, ptr %311, align 8, !tbaa !358
  %312 = getelementptr inbounds [2 x %struct.gr_info_s], ptr %220, i64 0, i64 %217, i32 4
  store i32 0, ptr %312, align 8, !tbaa !354
  %313 = getelementptr inbounds [2 x %struct.gr_info_s], ptr %220, i64 0, i64 %217, i32 5
  store i32 0, ptr %313, align 4, !tbaa !355
  br label %314

314:                                              ; preds = %294, %285
  %315 = load ptr, ptr @wordpointer, align 8, !tbaa !7
  %316 = load i8, ptr %315, align 1, !tbaa !15
  %317 = zext i8 %316 to i32
  %318 = load i32, ptr @bitindex, align 4, !tbaa !11
  %319 = shl i32 %317, %318
  %320 = add nsw i32 %318, 1
  %321 = ashr i32 %320, 3
  %322 = sext i32 %321 to i64
  %323 = getelementptr inbounds i8, ptr %315, i64 %322
  store ptr %323, ptr @wordpointer, align 8, !tbaa !7
  %324 = and i32 %320, 7
  store i32 %324, ptr @bitindex, align 4, !tbaa !11
  %325 = lshr i32 %319, 7
  %326 = and i32 %325, 1
  %327 = getelementptr inbounds [2 x %struct.gr_info_s], ptr %220, i64 0, i64 %217, i32 13
  store i32 %326, ptr %327, align 4, !tbaa !367
  %328 = load i8, ptr %323, align 1, !tbaa !15
  %329 = zext i8 %328 to i32
  %330 = shl nuw nsw i32 %329, %324
  %331 = add nuw nsw i32 %324, 1
  %332 = lshr i32 %331, 3
  %333 = zext i32 %332 to i64
  %334 = getelementptr inbounds i8, ptr %323, i64 %333
  store ptr %334, ptr @wordpointer, align 8, !tbaa !7
  %335 = and i32 %331, 7
  store i32 %335, ptr @bitindex, align 4, !tbaa !11
  %336 = lshr i32 %330, 7
  %337 = and i32 %336, 1
  %338 = getelementptr inbounds [2 x %struct.gr_info_s], ptr %220, i64 0, i64 %217, i32 14
  store i32 %337, ptr %338, align 8, !tbaa !360
  %339 = load i8, ptr %334, align 1, !tbaa !15
  %340 = zext i8 %339 to i32
  %341 = shl nuw nsw i32 %340, %335
  %342 = add nuw nsw i32 %335, 1
  %343 = lshr i32 %342, 3
  %344 = zext i32 %343 to i64
  %345 = getelementptr inbounds i8, ptr %334, i64 %344
  store ptr %345, ptr @wordpointer, align 8, !tbaa !7
  %346 = and i32 %342, 7
  store i32 %346, ptr @bitindex, align 4, !tbaa !11
  %347 = lshr i32 %341, 7
  %348 = and i32 %347, 1
  %349 = getelementptr inbounds [2 x %struct.gr_info_s], ptr %220, i64 0, i64 %217, i32 15
  store i32 %348, ptr %349, align 4, !tbaa !361
  %350 = add nuw nsw i64 %219, 1
  %351 = icmp eq i64 %350, %201
  br i1 %351, label %352, label %218, !llvm.loop !368

352:                                              ; preds = %314, %215
  br i1 %216, label %215, label %353, !llvm.loop !369

353:                                              ; preds = %352, %161, %49
  %354 = phi i64 [ 1, %49 ], [ 2, %352 ], [ 1, %161 ]
  %355 = load i32, ptr %5, align 8, !tbaa !347
  %356 = zext i32 %355 to i64
  %357 = tail call i32 @set_pointer(i64 noundef %356) #55
  %358 = icmp eq i32 %357, -1
  br i1 %358, label %873, label %359

359:                                              ; preds = %353
  %360 = getelementptr inbounds %struct.III_sideinfo, ptr %5, i64 0, i32 2
  %361 = icmp eq i32 %7, 2
  %362 = getelementptr inbounds %struct.III_sideinfo, ptr %5, i64 0, i32 2, i64 1
  %363 = getelementptr inbounds [2 x [39 x i32]], ptr %4, i64 0, i64 1
  %364 = icmp eq i32 %25, 0
  %365 = icmp eq i32 %26, 0
  %366 = sext i32 %11 to i64
  %367 = getelementptr inbounds [9 x %struct.bandInfoStruct], ptr @bandInfo, i64 0, i64 %366
  %368 = select i1 %364, ptr @tan2_1, ptr @tan2_2
  %369 = select i1 %364, ptr @tan1_1, ptr @tan1_2
  %370 = getelementptr inbounds [2 x [39 x i32]], ptr %4, i64 0, i64 1, i64 20
  %371 = getelementptr inbounds [9 x %struct.bandInfoStruct], ptr @bandInfo, i64 0, i64 %366, i32 1, i64 21
  %372 = getelementptr inbounds [9 x %struct.bandInfoStruct], ptr @bandInfo, i64 0, i64 %366, i32 2, i64 12
  %373 = getelementptr inbounds [9 x %struct.bandInfoStruct], ptr @bandInfo, i64 0, i64 %366, i32 3, i64 12
  %374 = or i32 %26, %25
  %375 = icmp ne i32 %374, 0
  %376 = icmp eq i32 %14, 3
  %377 = select i1 %375, i1 true, i1 %376
  %378 = icmp sgt i32 %14, -1
  br label %379

379:                                              ; preds = %870, %359
  %380 = phi i64 [ 0, %359 ], [ %871, %870 ]
  %381 = phi i32 [ 0, %359 ], [ %.lcssa6, %870 ]
  %382 = getelementptr inbounds [2 x %struct.gr_info_s], ptr %360, i64 0, i64 %380
  %383 = load i32, ptr %27, align 4, !tbaa !346
  %384 = icmp eq i32 %383, 0
  br i1 %384, label %387, label %385

385:                                              ; preds = %379
  %386 = call fastcc i32 @III_get_scale_factors_2(ptr noundef nonnull %4, ptr noundef nonnull %382, i32 noundef 0) #57
  br label %389

387:                                              ; preds = %379
  %388 = call fastcc i32 @III_get_scale_factors_1(ptr noundef nonnull %4, ptr noundef nonnull %382) #57, !range !370
  br label %389

389:                                              ; preds = %387, %385
  %390 = phi i32 [ %386, %385 ], [ %388, %387 ]
  %391 = call fastcc i32 @III_dequantize_sample(ptr noundef nonnull @do_layer3.hybridIn, ptr noundef nonnull %4, ptr noundef nonnull %382, i32 noundef %11, i32 noundef %390) #57, !range !371
  %392 = icmp eq i32 %391, 0
  br i1 %392, label %393, label %873

393:                                              ; preds = %389
  br i1 %361, label %394, label %688

394:                                              ; preds = %393
  %395 = getelementptr inbounds [2 x %struct.gr_info_s], ptr %362, i64 0, i64 %380
  %396 = load i32, ptr %27, align 4, !tbaa !346
  %397 = icmp eq i32 %396, 0
  br i1 %397, label %400, label %398

398:                                              ; preds = %394
  %399 = call fastcc i32 @III_get_scale_factors_2(ptr noundef nonnull %363, ptr noundef nonnull %395, i32 noundef %26) #57
  br label %402

400:                                              ; preds = %394
  %401 = call fastcc i32 @III_get_scale_factors_1(ptr noundef nonnull %363, ptr noundef nonnull %395) #57, !range !370
  br label %402

402:                                              ; preds = %400, %398
  %403 = phi i32 [ %399, %398 ], [ %401, %400 ]
  %404 = call fastcc i32 @III_dequantize_sample(ptr noundef nonnull getelementptr inbounds ([2 x [32 x [18 x double]]], ptr @do_layer3.hybridIn, i64 0, i64 1), ptr noundef nonnull %363, ptr noundef nonnull %395, i32 noundef %11, i32 noundef %403) #57, !range !371
  %405 = icmp eq i32 %404, 0
  br i1 %405, label %406, label %873

406:                                              ; preds = %402
  br i1 %364, label %417, label %407

407:                                              ; preds = %407, %406
  %408 = phi i64 [ %415, %407 ], [ 0, %406 ]
  %409 = getelementptr inbounds double, ptr @do_layer3.hybridIn, i64 %408
  %410 = load <2 x double>, ptr %409, align 16, !tbaa !39
  %411 = getelementptr inbounds double, ptr getelementptr inbounds ([2 x [32 x [18 x double]]], ptr @do_layer3.hybridIn, i64 0, i64 1), i64 %408
  %412 = load <2 x double>, ptr %411, align 16, !tbaa !39
  %413 = fsub <2 x double> %410, %412
  store <2 x double> %413, ptr %411, align 16, !tbaa !39
  %414 = fadd <2 x double> %410, %412
  store <2 x double> %414, ptr %409, align 16, !tbaa !39
  %415 = add nuw i64 %408, 2
  %416 = icmp eq i64 %415, 576
  br i1 %416, label %417, label %407, !llvm.loop !372

417:                                              ; preds = %407, %406
  br i1 %365, label %652, label %418

418:                                              ; preds = %417
  %419 = load i32, ptr %27, align 4, !tbaa !346
  %420 = icmp eq i32 %419, 0
  br i1 %420, label %432, label %421

421:                                              ; preds = %418
  %422 = getelementptr inbounds [2 x %struct.gr_info_s], ptr %362, i64 0, i64 %380, i32 3
  %423 = load i32, ptr %422, align 4, !tbaa !353
  %424 = and i32 %423, 1
  %425 = zext i32 %424 to i64
  %426 = getelementptr inbounds [2 x [16 x double]], ptr @pow1_2, i64 0, i64 %425
  %427 = getelementptr inbounds [2 x [16 x double]], ptr @pow2_2, i64 0, i64 %425
  %428 = getelementptr inbounds [2 x [16 x double]], ptr @pow1_1, i64 0, i64 %425
  %429 = getelementptr inbounds [2 x [16 x double]], ptr @pow2_1, i64 0, i64 %425
  %430 = select i1 %364, ptr %429, ptr %427
  %431 = select i1 %364, ptr %428, ptr %426
  br label %432

432:                                              ; preds = %421, %418
  %433 = phi ptr [ %430, %421 ], [ %368, %418 ]
  %434 = phi ptr [ %431, %421 ], [ %369, %418 ]
  %435 = getelementptr inbounds [2 x %struct.gr_info_s], ptr %362, i64 0, i64 %380, i32 4
  %436 = load i32, ptr %435, align 8, !tbaa !354
  %437 = icmp eq i32 %436, 2
  br i1 %437, label %438, label %580

438:                                              ; preds = %432
  %439 = getelementptr inbounds [2 x %struct.gr_info_s], ptr %362, i64 0, i64 %380, i32 5
  %440 = load i32, ptr %439, align 4, !tbaa !355
  %441 = icmp ne i32 %440, 0
  %442 = zext i1 %441 to i32
  br label %443

443:                                              ; preds = %528, %438
  %444 = phi i64 [ 0, %438 ], [ %529, %528 ]
  %445 = phi i32 [ %442, %438 ], [ %449, %528 ]
  %446 = getelementptr inbounds [2 x %struct.gr_info_s], ptr %362, i64 0, i64 %380, i32 8, i64 %444
  %447 = load i32, ptr %446, align 4, !tbaa !11
  %448 = icmp sgt i32 %447, 3
  %449 = select i1 %448, i32 0, i32 %445
  %450 = icmp slt i32 %447, 12
  %451 = trunc i64 %444 to i32
  %452 = sub i32 %451, %440
  br i1 %450, label %453, label %496

453:                                              ; preds = %443
  %454 = sext i32 %447 to i64
  br label %455

455:                                              ; preds = %492, %453
  %456 = phi i64 [ %454, %453 ], [ %493, %492 ]
  %457 = trunc i64 %456 to i32
  %458 = mul i32 %457, 3
  %459 = add i32 %458, %452
  %460 = zext i32 %459 to i64
  %461 = getelementptr inbounds i32, ptr %363, i64 %460
  %462 = load i32, ptr %461, align 4, !tbaa !11
  %463 = icmp eq i32 %462, 7
  br i1 %463, label %492, label %464

464:                                              ; preds = %455
  %465 = getelementptr inbounds [9 x %struct.bandInfoStruct], ptr @bandInfo, i64 0, i64 %366, i32 3, i64 %456
  %466 = load i16, ptr %465, align 2, !tbaa !41
  %467 = sext i32 %462 to i64
  %468 = getelementptr inbounds double, ptr %434, i64 %467
  %469 = load double, ptr %468, align 8, !tbaa !39
  %470 = getelementptr inbounds double, ptr %433, i64 %467
  %471 = load double, ptr %470, align 8, !tbaa !39
  %472 = icmp sgt i16 %466, 0
  br i1 %472, label %473, label %492

473:                                              ; preds = %464
  %474 = getelementptr inbounds [9 x %struct.bandInfoStruct], ptr @bandInfo, i64 0, i64 %366, i32 2, i64 %456
  %475 = load i16, ptr %474, align 2, !tbaa !41
  %476 = sext i16 %475 to i64
  %477 = zext i16 %466 to i32
  %478 = add i64 %444, %476
  %479 = shl i64 %478, 32
  %480 = ashr exact i64 %479, 32
  br label %481

481:                                              ; preds = %481, %473
  %482 = phi i64 [ %480, %473 ], [ %490, %481 ]
  %483 = phi i32 [ %477, %473 ], [ %489, %481 ]
  %484 = getelementptr inbounds [576 x double], ptr @do_layer3.hybridIn, i64 0, i64 %482
  %485 = load double, ptr %484, align 8, !tbaa !39
  %486 = fmul double %469, %485
  store double %486, ptr %484, align 8, !tbaa !39
  %487 = fmul double %471, %485
  %488 = getelementptr inbounds [576 x double], ptr getelementptr inbounds ([2 x [32 x [18 x double]]], ptr @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 0), i64 0, i64 %482
  store double %487, ptr %488, align 8, !tbaa !39
  %489 = add nsw i32 %483, -1
  %490 = add nsw i64 %482, 3
  %491 = icmp ugt i32 %483, 1
  br i1 %491, label %481, label %492, !llvm.loop !373

492:                                              ; preds = %481, %464, %455
  %493 = add nsw i64 %456, 1
  %494 = and i64 %493, 4294967295
  %495 = icmp eq i64 %494, 12
  br i1 %495, label %496, label %455, !llvm.loop !374

496:                                              ; preds = %492, %443
  %497 = add i32 %452, 33
  %498 = zext i32 %497 to i64
  %499 = getelementptr inbounds i32, ptr %363, i64 %498
  %500 = load i32, ptr %499, align 4, !tbaa !11
  %501 = icmp eq i32 %500, 7
  br i1 %501, label %528, label %502

502:                                              ; preds = %496
  %503 = load i16, ptr %373, align 2, !tbaa !41
  %504 = sext i32 %500 to i64
  %505 = getelementptr inbounds double, ptr %434, i64 %504
  %506 = load double, ptr %505, align 8, !tbaa !39
  %507 = getelementptr inbounds double, ptr %433, i64 %504
  %508 = load double, ptr %507, align 8, !tbaa !39
  %509 = icmp sgt i16 %503, 0
  br i1 %509, label %510, label %528

510:                                              ; preds = %502
  %511 = zext i16 %503 to i32
  %512 = load i16, ptr %372, align 2, !tbaa !41
  %513 = sext i16 %512 to i64
  %514 = add i64 %444, %513
  %515 = shl i64 %514, 32
  %516 = ashr exact i64 %515, 32
  br label %517

517:                                              ; preds = %517, %510
  %518 = phi i64 [ %516, %510 ], [ %526, %517 ]
  %519 = phi i32 [ %511, %510 ], [ %525, %517 ]
  %520 = getelementptr inbounds [576 x double], ptr @do_layer3.hybridIn, i64 0, i64 %518
  %521 = load double, ptr %520, align 8, !tbaa !39
  %522 = fmul double %506, %521
  store double %522, ptr %520, align 8, !tbaa !39
  %523 = fmul double %508, %521
  %524 = getelementptr inbounds [576 x double], ptr getelementptr inbounds ([2 x [32 x [18 x double]]], ptr @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 0), i64 0, i64 %518
  store double %523, ptr %524, align 8, !tbaa !39
  %525 = add nsw i32 %519, -1
  %526 = add nsw i64 %518, 3
  %527 = icmp ugt i32 %519, 1
  br i1 %527, label %517, label %528, !llvm.loop !375

528:                                              ; preds = %517, %502, %496
  %529 = add nuw nsw i64 %444, 1
  %530 = icmp eq i64 %529, 3
  br i1 %530, label %531, label %443, !llvm.loop !376

531:                                              ; preds = %528
  %.lcssa1 = phi i32 [ %449, %528 ]
  %532 = icmp eq i32 %.lcssa1, 0
  br i1 %532, label %652, label %533

533:                                              ; preds = %531
  %534 = getelementptr inbounds [2 x %struct.gr_info_s], ptr %362, i64 0, i64 %380, i32 9
  %535 = load i32, ptr %534, align 4, !tbaa !377
  %536 = icmp slt i32 %535, 8
  br i1 %536, label %537, label %652

537:                                              ; preds = %533
  %538 = sext i32 %535 to i64
  %539 = getelementptr inbounds [23 x i16], ptr %367, i64 0, i64 %538
  %540 = load i16, ptr %539, align 2, !tbaa !41
  %541 = sext i16 %540 to i32
  br label %542

542:                                              ; preds = %575, %537
  %543 = phi i64 [ %538, %537 ], [ %577, %575 ]
  %544 = phi i32 [ %541, %537 ], [ %576, %575 ]
  %545 = getelementptr inbounds [9 x %struct.bandInfoStruct], ptr @bandInfo, i64 0, i64 %366, i32 1, i64 %543
  %546 = load i16, ptr %545, align 2, !tbaa !41
  %547 = sext i16 %546 to i32
  %548 = getelementptr inbounds i32, ptr %363, i64 %543
  %549 = load i32, ptr %548, align 4, !tbaa !11
  %550 = icmp eq i32 %549, 7
  br i1 %550, label %571, label %551

551:                                              ; preds = %542
  %552 = sext i32 %549 to i64
  %553 = getelementptr inbounds double, ptr %434, i64 %552
  %554 = load double, ptr %553, align 8, !tbaa !39
  %555 = getelementptr inbounds double, ptr %433, i64 %552
  %556 = load double, ptr %555, align 8, !tbaa !39
  %557 = icmp sgt i16 %546, 0
  br i1 %557, label %558, label %575

558:                                              ; preds = %551
  %559 = sext i32 %544 to i64
  br label %560

560:                                              ; preds = %560, %558
  %561 = phi i64 [ %559, %558 ], [ %569, %560 ]
  %562 = phi i32 [ %547, %558 ], [ %568, %560 ]
  %563 = getelementptr inbounds [576 x double], ptr @do_layer3.hybridIn, i64 0, i64 %561
  %564 = load double, ptr %563, align 8, !tbaa !39
  %565 = fmul double %554, %564
  store double %565, ptr %563, align 8, !tbaa !39
  %566 = fmul double %556, %564
  %567 = getelementptr inbounds [576 x double], ptr getelementptr inbounds ([2 x [32 x [18 x double]]], ptr @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 0), i64 0, i64 %561
  store double %566, ptr %567, align 8, !tbaa !39
  %568 = add nsw i32 %562, -1
  %569 = add nsw i64 %561, 1
  %570 = icmp sgt i32 %562, 1
  br i1 %570, label %560, label %573, !llvm.loop !378

571:                                              ; preds = %542
  %572 = add nsw i32 %544, %547
  br label %575

573:                                              ; preds = %560
  %.lcssa2 = phi i64 [ %569, %560 ]
  %574 = trunc i64 %.lcssa2 to i32
  br label %575

575:                                              ; preds = %573, %571, %551
  %576 = phi i32 [ %572, %571 ], [ %544, %551 ], [ %574, %573 ]
  %577 = add nsw i64 %543, 1
  %578 = and i64 %577, 4294967295
  %579 = icmp eq i64 %578, 8
  br i1 %579, label %652, label %542, !llvm.loop !379

580:                                              ; preds = %432
  %581 = getelementptr inbounds [2 x %struct.gr_info_s], ptr %362, i64 0, i64 %380, i32 9
  %582 = load i32, ptr %581, align 4, !tbaa !377
  %583 = sext i32 %582 to i64
  %584 = getelementptr inbounds [23 x i16], ptr %367, i64 0, i64 %583
  %585 = load i16, ptr %584, align 2, !tbaa !41
  %586 = sext i16 %585 to i32
  %587 = icmp slt i32 %582, 21
  br i1 %587, label %588, label %626

588:                                              ; preds = %621, %580
  %589 = phi i64 [ %623, %621 ], [ %583, %580 ]
  %590 = phi i32 [ %622, %621 ], [ %586, %580 ]
  %591 = getelementptr inbounds [9 x %struct.bandInfoStruct], ptr @bandInfo, i64 0, i64 %366, i32 1, i64 %589
  %592 = load i16, ptr %591, align 2, !tbaa !41
  %593 = sext i16 %592 to i32
  %594 = getelementptr inbounds i32, ptr %363, i64 %589
  %595 = load i32, ptr %594, align 4, !tbaa !11
  %596 = icmp eq i32 %595, 7
  br i1 %596, label %617, label %597

597:                                              ; preds = %588
  %598 = sext i32 %595 to i64
  %599 = getelementptr inbounds double, ptr %434, i64 %598
  %600 = load double, ptr %599, align 8, !tbaa !39
  %601 = getelementptr inbounds double, ptr %433, i64 %598
  %602 = load double, ptr %601, align 8, !tbaa !39
  %603 = icmp sgt i16 %592, 0
  br i1 %603, label %604, label %621

604:                                              ; preds = %597
  %605 = sext i32 %590 to i64
  br label %606

606:                                              ; preds = %606, %604
  %607 = phi i64 [ %605, %604 ], [ %615, %606 ]
  %608 = phi i32 [ %593, %604 ], [ %614, %606 ]
  %609 = getelementptr inbounds [576 x double], ptr @do_layer3.hybridIn, i64 0, i64 %607
  %610 = load double, ptr %609, align 8, !tbaa !39
  %611 = fmul double %600, %610
  store double %611, ptr %609, align 8, !tbaa !39
  %612 = fmul double %602, %610
  %613 = getelementptr inbounds [576 x double], ptr getelementptr inbounds ([2 x [32 x [18 x double]]], ptr @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 0), i64 0, i64 %607
  store double %612, ptr %613, align 8, !tbaa !39
  %614 = add nsw i32 %608, -1
  %615 = add nsw i64 %607, 1
  %616 = icmp sgt i32 %608, 1
  br i1 %616, label %606, label %619, !llvm.loop !380

617:                                              ; preds = %588
  %618 = add nsw i32 %590, %593
  br label %621

619:                                              ; preds = %606
  %.lcssa = phi i64 [ %615, %606 ]
  %620 = trunc i64 %.lcssa to i32
  br label %621

621:                                              ; preds = %619, %617, %597
  %622 = phi i32 [ %618, %617 ], [ %590, %597 ], [ %620, %619 ]
  %623 = add nsw i64 %589, 1
  %624 = and i64 %623, 4294967295
  %625 = icmp eq i64 %624, 21
  br i1 %625, label %626, label %588, !llvm.loop !381

626:                                              ; preds = %621, %580
  %627 = phi i32 [ %586, %580 ], [ %622, %621 ]
  %628 = load i32, ptr %370, align 4, !tbaa !11
  %629 = icmp eq i32 %628, 7
  br i1 %629, label %652, label %630

630:                                              ; preds = %626
  %631 = sext i32 %628 to i64
  %632 = getelementptr inbounds double, ptr %434, i64 %631
  %633 = load double, ptr %632, align 8, !tbaa !39
  %634 = getelementptr inbounds double, ptr %433, i64 %631
  %635 = load double, ptr %634, align 8, !tbaa !39
  %636 = load i16, ptr %371, align 8, !tbaa !41
  %637 = icmp sgt i16 %636, 0
  br i1 %637, label %638, label %652

638:                                              ; preds = %630
  %639 = zext i16 %636 to i32
  %640 = sext i32 %627 to i64
  br label %641

641:                                              ; preds = %641, %638
  %642 = phi i64 [ %640, %638 ], [ %650, %641 ]
  %643 = phi i32 [ %639, %638 ], [ %649, %641 ]
  %644 = getelementptr inbounds [576 x double], ptr @do_layer3.hybridIn, i64 0, i64 %642
  %645 = load double, ptr %644, align 8, !tbaa !39
  %646 = fmul double %633, %645
  store double %646, ptr %644, align 8, !tbaa !39
  %647 = fmul double %635, %645
  %648 = getelementptr inbounds [576 x double], ptr getelementptr inbounds ([2 x [32 x [18 x double]]], ptr @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 0), i64 0, i64 %642
  store double %647, ptr %648, align 8, !tbaa !39
  %649 = add nsw i32 %643, -1
  %650 = add nsw i64 %642, 1
  %651 = icmp ugt i32 %643, 1
  br i1 %651, label %641, label %652, !llvm.loop !382

652:                                              ; preds = %641, %630, %626, %575, %533, %531, %417
  br i1 %377, label %653, label %661

653:                                              ; preds = %652
  %654 = getelementptr inbounds [2 x %struct.gr_info_s], ptr %362, i64 0, i64 %380, i32 10
  %655 = load i32, ptr %654, align 8, !tbaa !383
  %656 = getelementptr inbounds [2 x %struct.gr_info_s], ptr %360, i64 0, i64 %380, i32 10
  %657 = load i32, ptr %656, align 8, !tbaa !383
  %658 = icmp ugt i32 %655, %657
  br i1 %658, label %659, label %660

659:                                              ; preds = %653
  store i32 %655, ptr %656, align 8, !tbaa !383
  br label %661

660:                                              ; preds = %653
  store i32 %657, ptr %654, align 8, !tbaa !383
  br label %661

661:                                              ; preds = %660, %659, %652
  switch i32 %14, label %688 [
    i32 3, label %670
    i32 1, label %662
  ]

662:                                              ; preds = %661
  %663 = getelementptr inbounds [2 x %struct.gr_info_s], ptr %362, i64 0, i64 %380, i32 10
  %664 = load i32, ptr %663, align 8, !tbaa !383
  %665 = mul i32 %664, 18
  %666 = icmp eq i32 %665, 0
  br i1 %666, label %688, label %667

667:                                              ; preds = %662
  %668 = zext i32 %665 to i64
  %669 = shl nuw nsw i64 %668, 3
  call void @llvm.memmove.p0.p0.i64(ptr nonnull align 16 @do_layer3.hybridIn, ptr nonnull align 16 getelementptr inbounds ([2 x [32 x [18 x double]]], ptr @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 0), i64 %669, i1 false), !tbaa !39
  br label %688

670:                                              ; preds = %661
  %671 = getelementptr inbounds [2 x %struct.gr_info_s], ptr %362, i64 0, i64 %380, i32 10
  %672 = load i32, ptr %671, align 8, !tbaa !383
  %673 = mul i32 %672, 18
  %674 = icmp eq i32 %673, 0
  br i1 %674, label %688, label %675

675:                                              ; preds = %670
  %676 = zext i32 %673 to i64
  br label %677

677:                                              ; preds = %677, %675
  %678 = phi i64 [ 0, %675 ], [ %686, %677 ]
  %679 = shl i64 %678, 3
  %680 = getelementptr i8, ptr getelementptr inbounds ([2 x [32 x [18 x double]]], ptr @do_layer3.hybridIn, i64 0, i64 1), i64 %679
  %681 = shl i64 %678, 3
  %682 = getelementptr i8, ptr @do_layer3.hybridIn, i64 %681
  %683 = load <2 x double>, ptr %682, align 16, !tbaa !39
  %684 = load <2 x double>, ptr %680, align 16, !tbaa !39
  %685 = fadd <2 x double> %683, %684
  store <2 x double> %685, ptr %682, align 16, !tbaa !39
  %686 = add nuw i64 %678, 2
  %687 = icmp eq i64 %686, %676
  br i1 %687, label %688, label %677, !llvm.loop !384

688:                                              ; preds = %677, %670, %667, %662, %661, %393
  br label %689

689:                                              ; preds = %849, %688
  %690 = phi i1 [ false, %849 ], [ true, %688 ]
  %691 = phi i64 [ 1, %849 ], [ 0, %688 ]
  %692 = getelementptr inbounds %struct.III_sideinfo, ptr %5, i64 0, i32 2, i64 %691
  %693 = getelementptr inbounds [2 x [32 x [18 x double]]], ptr @do_layer3.hybridIn, i64 0, i64 %691
  %694 = getelementptr inbounds [2 x %struct.gr_info_s], ptr %692, i64 0, i64 %380, i32 4
  %695 = load i32, ptr %694, align 8, !tbaa !354
  %696 = icmp eq i32 %695, 2
  br i1 %696, label %697, label %701

697:                                              ; preds = %689
  %698 = getelementptr inbounds [2 x %struct.gr_info_s], ptr %692, i64 0, i64 %380, i32 5
  %699 = load i32, ptr %698, align 4, !tbaa !355
  %700 = icmp eq i32 %699, 0
  br i1 %700, label %739, label %706

701:                                              ; preds = %689
  %702 = getelementptr inbounds [2 x %struct.gr_info_s], ptr %692, i64 0, i64 %380, i32 10
  %703 = load i32, ptr %702, align 8, !tbaa !383
  %704 = add i32 %703, -1
  %705 = icmp eq i32 %704, 0
  br i1 %705, label %739, label %706

706:                                              ; preds = %701, %697
  %707 = phi i32 [ %704, %701 ], [ 1, %697 ]
  %708 = getelementptr inbounds [18 x double], ptr %693, i64 1
  br label %709

709:                                              ; preds = %735, %706
  %710 = phi ptr [ %737, %735 ], [ %708, %706 ]
  %711 = phi i32 [ %736, %735 ], [ %707, %706 ]
  br label %712

712:                                              ; preds = %712, %709
  %713 = phi ptr [ %710, %709 ], [ %718, %712 ]
  %714 = phi ptr [ @aa_ca, %709 ], [ %728, %712 ]
  %715 = phi ptr [ @aa_cs, %709 ], [ %726, %712 ]
  %716 = phi i32 [ 7, %709 ], [ %733, %712 ]
  %717 = phi ptr [ %710, %709 ], [ %732, %712 ]
  %718 = getelementptr inbounds double, ptr %713, i64 -1
  %719 = load double, ptr %718, align 8, !tbaa !39
  %720 = load double, ptr %717, align 8, !tbaa !39
  %721 = load double, ptr %715, align 8, !tbaa !39
  %722 = load double, ptr %714, align 8, !tbaa !39
  %723 = fneg double %720
  %724 = fmul double %722, %723
  %725 = call double @llvm.fmuladd.f64(double %719, double %721, double %724)
  store double %725, ptr %718, align 8, !tbaa !39
  %726 = getelementptr inbounds double, ptr %715, i64 1
  %727 = load double, ptr %715, align 8, !tbaa !39
  %728 = getelementptr inbounds double, ptr %714, i64 1
  %729 = load double, ptr %714, align 8, !tbaa !39
  %730 = fmul double %719, %729
  %731 = call double @llvm.fmuladd.f64(double %720, double %727, double %730)
  %732 = getelementptr inbounds double, ptr %717, i64 1
  store double %731, ptr %717, align 8, !tbaa !39
  %733 = add nsw i32 %716, -1
  %734 = icmp eq i32 %716, 0
  br i1 %734, label %735, label %712, !llvm.loop !385

735:                                              ; preds = %712
  %.lcssa3 = phi ptr [ %717, %712 ]
  %736 = add nsw i32 %711, -1
  %737 = getelementptr inbounds double, ptr %.lcssa3, i64 11
  %738 = icmp eq i32 %736, 0
  br i1 %738, label %739, label %709, !llvm.loop !386

739:                                              ; preds = %735, %701, %697
  %740 = getelementptr inbounds [2 x [18 x [32 x double]]], ptr @do_layer3.hybridOut, i64 0, i64 %691
  %741 = load ptr, ptr @gmp, align 8, !tbaa !7
  %742 = getelementptr inbounds %struct.mpstr, ptr %741, i64 0, i32 7
  %743 = getelementptr inbounds %struct.mpstr, ptr %741, i64 0, i32 8
  %744 = getelementptr inbounds i32, ptr %743, i64 %691
  %745 = load i32, ptr %744, align 4, !tbaa !11
  %746 = sext i32 %745 to i64
  %747 = getelementptr inbounds [2 x [576 x double]], ptr %742, i64 %746, i64 %691
  %748 = sub i32 1, %745
  %749 = sext i32 %748 to i64
  %750 = getelementptr inbounds [2 x [576 x double]], ptr %742, i64 %749, i64 %691
  store i32 %748, ptr %744, align 4, !tbaa !11
  %751 = getelementptr inbounds [2 x %struct.gr_info_s], ptr %692, i64 0, i64 %380, i32 5
  %752 = load i32, ptr %751, align 4, !tbaa !355
  %753 = icmp eq i32 %752, 0
  br i1 %753, label %762, label %754

754:                                              ; preds = %739
  call fastcc void @dct36(ptr noundef nonnull %693, ptr noundef nonnull %747, ptr noundef nonnull %750, ptr noundef nonnull @win, ptr noundef nonnull %740) #57
  %755 = getelementptr inbounds [18 x double], ptr %693, i64 1
  %756 = getelementptr inbounds double, ptr %747, i64 18
  %757 = getelementptr inbounds double, ptr %750, i64 18
  %758 = getelementptr inbounds double, ptr %740, i64 1
  call fastcc void @dct36(ptr noundef nonnull %755, ptr noundef nonnull %756, ptr noundef nonnull %757, ptr noundef nonnull @win1, ptr noundef nonnull %758) #57
  %759 = getelementptr inbounds double, ptr %747, i64 36
  %760 = getelementptr inbounds double, ptr %750, i64 36
  %761 = getelementptr inbounds double, ptr %740, i64 2
  br label %762

762:                                              ; preds = %754, %739
  %763 = phi ptr [ %760, %754 ], [ %750, %739 ]
  %764 = phi ptr [ %759, %754 ], [ %747, %739 ]
  %765 = phi i32 [ 2, %754 ], [ 0, %739 ]
  %766 = phi ptr [ %761, %754 ], [ %740, %739 ]
  %767 = load i32, ptr %694, align 8, !tbaa !354
  %768 = icmp eq i32 %767, 2
  %769 = getelementptr inbounds [2 x %struct.gr_info_s], ptr %692, i64 0, i64 %380, i32 10
  %770 = load i32, ptr %769, align 8, !tbaa !383
  %771 = icmp ult i32 %765, %770
  br i1 %768, label %778, label %772

772:                                              ; preds = %762
  br i1 %771, label %773, label %824

773:                                              ; preds = %772
  %774 = sext i32 %767 to i64
  %775 = getelementptr inbounds [4 x [36 x double]], ptr @win, i64 0, i64 %774
  %776 = getelementptr inbounds [4 x [36 x double]], ptr @win1, i64 0, i64 %774
  %777 = zext i32 %765 to i64
  br label %799

778:                                              ; preds = %762
  br i1 %771, label %779, label %824

779:                                              ; preds = %778
  %780 = zext i32 %765 to i64
  br label %781

781:                                              ; preds = %781, %779
  %782 = phi i64 [ %780, %779 ], [ %792, %781 ]
  %783 = phi ptr [ %766, %779 ], [ %793, %781 ]
  %784 = phi ptr [ %764, %779 ], [ %794, %781 ]
  %785 = phi ptr [ %763, %779 ], [ %795, %781 ]
  %786 = getelementptr inbounds [18 x double], ptr %693, i64 %782
  call fastcc void @dct12(ptr noundef nonnull %786, ptr noundef nonnull %784, ptr noundef nonnull %785, ptr noundef nonnull getelementptr inbounds ([4 x [36 x double]], ptr @win, i64 0, i64 2), ptr noundef nonnull %783) #57
  %787 = or i64 %782, 1
  %788 = getelementptr inbounds [18 x double], ptr %693, i64 %787
  %789 = getelementptr inbounds double, ptr %784, i64 18
  %790 = getelementptr inbounds double, ptr %785, i64 18
  %791 = getelementptr inbounds double, ptr %783, i64 1
  call fastcc void @dct12(ptr noundef nonnull %788, ptr noundef nonnull %789, ptr noundef nonnull %790, ptr noundef nonnull getelementptr inbounds ([4 x [36 x double]], ptr @win1, i64 0, i64 2), ptr noundef nonnull %791) #57
  %792 = add nuw nsw i64 %782, 2
  %793 = getelementptr inbounds double, ptr %783, i64 2
  %794 = getelementptr inbounds double, ptr %784, i64 36
  %795 = getelementptr inbounds double, ptr %785, i64 36
  %796 = load i32, ptr %769, align 8, !tbaa !383
  %797 = zext i32 %796 to i64
  %798 = icmp ult i64 %792, %797
  br i1 %798, label %781, label %817, !llvm.loop !387

799:                                              ; preds = %799, %773
  %800 = phi i64 [ %777, %773 ], [ %810, %799 ]
  %801 = phi ptr [ %766, %773 ], [ %811, %799 ]
  %802 = phi ptr [ %764, %773 ], [ %812, %799 ]
  %803 = phi ptr [ %763, %773 ], [ %813, %799 ]
  %804 = getelementptr inbounds [18 x double], ptr %693, i64 %800
  call fastcc void @dct36(ptr noundef nonnull %804, ptr noundef nonnull %802, ptr noundef nonnull %803, ptr noundef nonnull %775, ptr noundef nonnull %801) #57
  %805 = or i64 %800, 1
  %806 = getelementptr inbounds [18 x double], ptr %693, i64 %805
  %807 = getelementptr inbounds double, ptr %802, i64 18
  %808 = getelementptr inbounds double, ptr %803, i64 18
  %809 = getelementptr inbounds double, ptr %801, i64 1
  call fastcc void @dct36(ptr noundef nonnull %806, ptr noundef nonnull %807, ptr noundef nonnull %808, ptr noundef nonnull %776, ptr noundef nonnull %809) #57
  %810 = add nuw nsw i64 %800, 2
  %811 = getelementptr inbounds double, ptr %801, i64 2
  %812 = getelementptr inbounds double, ptr %802, i64 36
  %813 = getelementptr inbounds double, ptr %803, i64 36
  %814 = load i32, ptr %769, align 8, !tbaa !383
  %815 = zext i32 %814 to i64
  %816 = icmp ult i64 %810, %815
  br i1 %816, label %799, label %817, !llvm.loop !388

817:                                              ; preds = %799, %781
  %818 = phi i64 [ %792, %781 ], [ %810, %799 ]
  %819 = phi ptr [ %795, %781 ], [ %813, %799 ]
  %820 = phi ptr [ %794, %781 ], [ %812, %799 ]
  %821 = phi ptr [ %793, %781 ], [ %811, %799 ]
  %822 = trunc i64 %818 to i32
  %823 = icmp slt i32 %822, 32
  br i1 %823, label %824, label %849

824:                                              ; preds = %817, %778, %772
  %825 = phi ptr [ %766, %772 ], [ %766, %778 ], [ %821, %817 ]
  %826 = phi i32 [ %765, %772 ], [ %765, %778 ], [ %822, %817 ]
  %827 = phi ptr [ %764, %772 ], [ %764, %778 ], [ %820, %817 ]
  %828 = phi ptr [ %763, %772 ], [ %763, %778 ], [ %819, %817 ]
  br label %829

829:                                              ; preds = %845, %824
  %830 = phi ptr [ %847, %845 ], [ %825, %824 ]
  %831 = phi i32 [ %846, %845 ], [ %826, %824 ]
  %832 = phi ptr [ %.lcssa5, %845 ], [ %827, %824 ]
  %833 = phi ptr [ %.lcssa4, %845 ], [ %828, %824 ]
  br label %834

834:                                              ; preds = %834, %829
  %835 = phi i64 [ 0, %829 ], [ %843, %834 ]
  %836 = phi ptr [ %832, %829 ], [ %838, %834 ]
  %837 = phi ptr [ %833, %829 ], [ %842, %834 ]
  %838 = getelementptr inbounds double, ptr %836, i64 1
  %839 = load double, ptr %836, align 8, !tbaa !39
  %840 = shl nuw nsw i64 %835, 5
  %841 = getelementptr inbounds double, ptr %830, i64 %840
  store double %839, ptr %841, align 8, !tbaa !39
  %842 = getelementptr inbounds double, ptr %837, i64 1
  store double 0.000000e+00, ptr %837, align 8, !tbaa !39
  %843 = add nuw nsw i64 %835, 1
  %844 = icmp eq i64 %843, 18
  br i1 %844, label %845, label %834, !llvm.loop !389

845:                                              ; preds = %834
  %.lcssa5 = phi ptr [ %838, %834 ]
  %.lcssa4 = phi ptr [ %842, %834 ]
  %846 = add nuw nsw i32 %831, 1
  %847 = getelementptr inbounds double, ptr %830, i64 1
  %848 = icmp eq i32 %846, 32
  br i1 %848, label %849, label %829, !llvm.loop !390

849:                                              ; preds = %845, %817
  %850 = and i1 %15, %690
  br i1 %850, label %689, label %851, !llvm.loop !391

851:                                              ; preds = %866, %849
  %852 = phi i64 [ %868, %866 ], [ 0, %849 ]
  %853 = phi i32 [ %867, %866 ], [ %381, %849 ]
  br i1 %378, label %854, label %858

854:                                              ; preds = %851
  %855 = getelementptr inbounds [18 x [32 x double]], ptr @do_layer3.hybridOut, i64 0, i64 %852
  %856 = call i32 @synth_1to1_mono(ptr noundef nonnull %855, ptr noundef %1, ptr noundef %2) #55
  %857 = add nsw i32 %856, %853
  br label %866

858:                                              ; preds = %851
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6) #56
  %859 = load i32, ptr %2, align 4, !tbaa !11
  store i32 %859, ptr %6, align 4, !tbaa !11
  %860 = getelementptr inbounds [18 x [32 x double]], ptr @do_layer3.hybridOut, i64 0, i64 %852
  %861 = call i32 @synth_1to1(ptr noundef nonnull %860, i32 noundef 0, ptr noundef %1, ptr noundef nonnull %6) #55
  %862 = add nsw i32 %861, %853
  %863 = getelementptr inbounds [2 x [18 x [32 x double]]], ptr @do_layer3.hybridOut, i64 0, i64 1, i64 %852
  %864 = call i32 @synth_1to1(ptr noundef nonnull %863, i32 noundef 1, ptr noundef %1, ptr noundef nonnull %2) #55
  %865 = add nsw i32 %862, %864
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6) #56
  br label %866

866:                                              ; preds = %858, %854
  %867 = phi i32 [ %857, %854 ], [ %865, %858 ]
  %868 = add nuw nsw i64 %852, 1
  %869 = icmp eq i64 %868, 18
  br i1 %869, label %870, label %851, !llvm.loop !392

870:                                              ; preds = %866
  %.lcssa6 = phi i32 [ %867, %866 ]
  %871 = add nuw nsw i64 %380, 1
  %872 = icmp eq i64 %871, %354
  br i1 %872, label %873, label %379, !llvm.loop !393

873:                                              ; preds = %870, %402, %389, %353
  %874 = phi i32 [ 0, %353 ], [ %381, %389 ], [ %.lcssa6, %870 ], [ %381, %402 ]
  call void @llvm.lifetime.end.p0(i64 488, ptr nonnull %5) #56
  call void @llvm.lifetime.end.p0(i64 312, ptr nonnull %4) #56
  ret i32 %874
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc i32 @III_get_scale_factors_2(ptr nocapture noundef writeonly %0, ptr nocapture noundef %1, i32 noundef %2) unnamed_addr #4 {
  %4 = icmp eq i32 %2, 0
  %5 = getelementptr inbounds %struct.gr_info_s, ptr %1, i64 0, i32 3
  %6 = load i32, ptr %5, align 4, !tbaa !353
  %7 = lshr i32 %6, 1
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds [256 x i32], ptr @i_slen2, i64 0, i64 %8
  %10 = zext i32 %6 to i64
  %11 = getelementptr inbounds [512 x i32], ptr @n_slen2, i64 0, i64 %10
  %12 = select i1 %4, ptr %11, ptr %9
  %13 = load i32, ptr %12, align 4, !tbaa !11
  %14 = lshr i32 %13, 15
  %15 = and i32 %14, 1
  %16 = getelementptr inbounds %struct.gr_info_s, ptr %1, i64 0, i32 13
  store i32 %15, ptr %16, align 4, !tbaa !367
  %17 = getelementptr inbounds %struct.gr_info_s, ptr %1, i64 0, i32 4
  %18 = load i32, ptr %17, align 8, !tbaa !354
  %19 = icmp eq i32 %18, 2
  br i1 %19, label %20, label %25

20:                                               ; preds = %3
  %21 = getelementptr inbounds %struct.gr_info_s, ptr %1, i64 0, i32 5
  %22 = load i32, ptr %21, align 4, !tbaa !355
  %23 = icmp eq i32 %22, 0
  %24 = select i1 %23, i64 1, i64 2
  br label %25

25:                                               ; preds = %20, %3
  %26 = phi i64 [ 0, %3 ], [ %24, %20 ]
  %27 = lshr i32 %13, 12
  %28 = and i32 %27, 7
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds [3 x [6 x [4 x i8]]], ptr @III_get_scale_factors_2.stab, i64 0, i64 %26, i64 %29
  br label %31

31:                                               ; preds = %66, %25
  %32 = phi i64 [ 0, %25 ], [ %69, %66 ]
  %33 = phi ptr [ %0, %25 ], [ %68, %66 ]
  %34 = phi i32 [ 0, %25 ], [ %67, %66 ]
  %35 = phi i32 [ %13, %25 ], [ %37, %66 ]
  %36 = and i32 %35, 7
  %37 = lshr i32 %35, 3
  %38 = icmp eq i32 %36, 0
  %39 = getelementptr inbounds i8, ptr %30, i64 %32
  %40 = load i8, ptr %39, align 1, !tbaa !15
  br i1 %38, label %44, label %41

41:                                               ; preds = %31
  %42 = zext i8 %40 to i32
  %43 = icmp eq i8 %40, 0
  br i1 %43, label %62, label %55

44:                                               ; preds = %31
  %45 = icmp eq i8 %40, 0
  br i1 %45, label %66, label %46

46:                                               ; preds = %44
  %47 = zext i8 %40 to i64
  %48 = zext i8 %40 to i64
  %49 = shl nuw nsw i64 %48, 2
  tail call void @llvm.memset.p0.i64(ptr align 4 %33, i8 0, i64 %49, i1 false), !tbaa !11
  %50 = shl nuw nsw i64 %47, 2
  %51 = add nuw nsw i64 %50, 17179869180
  %52 = and i64 %51, 17179869180
  %53 = getelementptr i8, ptr %33, i64 4
  %54 = getelementptr i8, ptr %53, i64 %52
  br label %66

55:                                               ; preds = %55, %41
  %56 = phi ptr [ %59, %55 ], [ %33, %41 ]
  %57 = phi i32 [ %60, %55 ], [ 0, %41 ]
  %58 = tail call i32 @getbits_fast(i32 noundef %36) #55
  %59 = getelementptr inbounds i32, ptr %56, i64 1
  store i32 %58, ptr %56, align 4, !tbaa !11
  %60 = add nuw nsw i32 %57, 1
  %61 = icmp eq i32 %60, %42
  br i1 %61, label %62, label %55, !llvm.loop !394

62:                                               ; preds = %55, %41
  %63 = phi ptr [ %33, %41 ], [ %59, %55 ]
  %64 = mul nuw nsw i32 %36, %42
  %65 = add nsw i32 %64, %34
  br label %66

66:                                               ; preds = %62, %46, %44
  %67 = phi i32 [ %65, %62 ], [ %34, %44 ], [ %34, %46 ]
  %68 = phi ptr [ %63, %62 ], [ %33, %44 ], [ %54, %46 ]
  %69 = add nuw nsw i64 %32, 1
  %70 = icmp eq i64 %69, 4
  br i1 %70, label %71, label %31, !llvm.loop !395

71:                                               ; preds = %66
  %.lcssa1 = phi i32 [ %67, %66 ]
  %.lcssa = phi ptr [ %68, %66 ]
  %72 = shl nuw nsw i64 %26, 3
  %73 = or i64 %72, 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(1) %.lcssa, i8 0, i64 %73, i1 false), !tbaa !11
  ret i32 %.lcssa1
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc i32 @III_get_scale_factors_1(ptr nocapture noundef writeonly %0, ptr nocapture noundef readonly %1) unnamed_addr #4 {
  %3 = getelementptr inbounds %struct.gr_info_s, ptr %1, i64 0, i32 3
  %4 = load i32, ptr %3, align 4, !tbaa !353
  %5 = zext i32 %4 to i64
  %6 = getelementptr inbounds [16 x i8], ptr @III_get_scale_factors_1.slen, i64 0, i64 %5
  %7 = load i8, ptr %6, align 1, !tbaa !15
  %8 = zext i8 %7 to i32
  %9 = getelementptr inbounds [2 x [16 x i8]], ptr @III_get_scale_factors_1.slen, i64 0, i64 1, i64 %5
  %10 = load i8, ptr %9, align 1, !tbaa !15
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds %struct.gr_info_s, ptr %1, i64 0, i32 4
  %13 = load i32, ptr %12, align 8, !tbaa !354
  %14 = icmp eq i32 %13, 2
  br i1 %14, label %15, label %51

15:                                               ; preds = %2
  %16 = add nuw nsw i32 %11, %8
  %17 = mul nuw nsw i32 %16, 18
  %18 = getelementptr inbounds %struct.gr_info_s, ptr %1, i64 0, i32 5
  %19 = load i32, ptr %18, align 4, !tbaa !355
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %30, label %21

21:                                               ; preds = %21, %15
  %22 = phi ptr [ %25, %21 ], [ %0, %15 ]
  %23 = phi i32 [ %26, %21 ], [ 8, %15 ]
  %24 = tail call i32 @getbits_fast(i32 noundef %8) #55
  %25 = getelementptr inbounds i32, ptr %22, i64 1
  store i32 %24, ptr %22, align 4, !tbaa !11
  %26 = add nsw i32 %23, -1
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %21, !llvm.loop !396

28:                                               ; preds = %21
  %.lcssa2 = phi ptr [ %25, %21 ]
  %29 = sub nsw i32 %17, %8
  br label %30

30:                                               ; preds = %28, %15
  %31 = phi i32 [ %29, %28 ], [ %17, %15 ]
  %32 = phi i32 [ 9, %28 ], [ 18, %15 ]
  %33 = phi ptr [ %.lcssa2, %28 ], [ %0, %15 ]
  br label %34

34:                                               ; preds = %34, %30
  %35 = phi ptr [ %33, %30 ], [ %38, %34 ]
  %36 = phi i32 [ %32, %30 ], [ %39, %34 ]
  %37 = tail call i32 @getbits_fast(i32 noundef %8) #55
  %38 = getelementptr inbounds i32, ptr %35, i64 1
  store i32 %37, ptr %35, align 4, !tbaa !11
  %39 = add nsw i32 %36, -1
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %34, !llvm.loop !397

41:                                               ; preds = %41, %34
  %42 = phi ptr [ %45, %41 ], [ %38, %34 ]
  %43 = phi i32 [ %46, %41 ], [ 18, %34 ]
  %44 = tail call i32 @getbits_fast(i32 noundef %11) #55
  %45 = getelementptr inbounds i32, ptr %42, i64 1
  store i32 %44, ptr %42, align 4, !tbaa !11
  %46 = add nsw i32 %43, -1
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %41, !llvm.loop !398

48:                                               ; preds = %41
  %.lcssa1 = phi ptr [ %42, %41 ]
  %.lcssa = phi ptr [ %45, %41 ]
  %49 = getelementptr inbounds i32, ptr %.lcssa1, i64 2
  store i32 0, ptr %.lcssa, align 4, !tbaa !11
  %50 = getelementptr inbounds i32, ptr %.lcssa1, i64 3
  store i32 0, ptr %49, align 4, !tbaa !11
  br label %137

51:                                               ; preds = %2
  %52 = load i32, ptr %1, align 8, !tbaa !363
  %53 = icmp slt i32 %52, 0
  br i1 %53, label %54, label %72

54:                                               ; preds = %54, %51
  %55 = phi ptr [ %58, %54 ], [ %0, %51 ]
  %56 = phi i32 [ %59, %54 ], [ 11, %51 ]
  %57 = tail call i32 @getbits_fast(i32 noundef %8) #55
  %58 = getelementptr inbounds i32, ptr %55, i64 1
  store i32 %57, ptr %55, align 4, !tbaa !11
  %59 = add nsw i32 %56, -1
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %54, !llvm.loop !399

61:                                               ; preds = %61, %54
  %62 = phi ptr [ %65, %61 ], [ %58, %54 ]
  %63 = phi i32 [ %66, %61 ], [ 10, %54 ]
  %64 = tail call i32 @getbits_fast(i32 noundef %11) #55
  %65 = getelementptr inbounds i32, ptr %62, i64 1
  store i32 %64, ptr %62, align 4, !tbaa !11
  %66 = add nsw i32 %63, -1
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %61, !llvm.loop !400

68:                                               ; preds = %61
  %.lcssa3 = phi ptr [ %65, %61 ]
  %69 = add nuw nsw i32 %11, %8
  %70 = mul nuw nsw i32 %69, 10
  %71 = add nuw nsw i32 %70, %8
  br label %137

72:                                               ; preds = %51
  %73 = and i32 %52, 8
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %75, label %84

75:                                               ; preds = %75, %72
  %76 = phi ptr [ %79, %75 ], [ %0, %72 ]
  %77 = phi i32 [ %80, %75 ], [ 6, %72 ]
  %78 = tail call i32 @getbits_fast(i32 noundef %8) #55
  %79 = getelementptr inbounds i32, ptr %76, i64 1
  store i32 %78, ptr %76, align 4, !tbaa !11
  %80 = add nsw i32 %77, -1
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %75, !llvm.loop !401

82:                                               ; preds = %75
  %.lcssa7 = phi ptr [ %79, %75 ]
  %83 = mul nuw nsw i32 %8, 6
  br label %86

84:                                               ; preds = %72
  %85 = getelementptr inbounds i32, ptr %0, i64 6
  br label %86

86:                                               ; preds = %84, %82
  %87 = phi i32 [ 0, %84 ], [ %83, %82 ]
  %88 = phi ptr [ %85, %84 ], [ %.lcssa7, %82 ]
  %89 = and i32 %52, 4
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %101

91:                                               ; preds = %91, %86
  %92 = phi ptr [ %95, %91 ], [ %88, %86 ]
  %93 = phi i32 [ %96, %91 ], [ 5, %86 ]
  %94 = tail call i32 @getbits_fast(i32 noundef %8) #55
  %95 = getelementptr inbounds i32, ptr %92, i64 1
  store i32 %94, ptr %92, align 4, !tbaa !11
  %96 = add nsw i32 %93, -1
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %98, label %91, !llvm.loop !402

98:                                               ; preds = %91
  %.lcssa6 = phi ptr [ %95, %91 ]
  %99 = mul nuw nsw i32 %8, 5
  %100 = add nuw nsw i32 %87, %99
  br label %103

101:                                              ; preds = %86
  %102 = getelementptr inbounds i32, ptr %88, i64 5
  br label %103

103:                                              ; preds = %101, %98
  %104 = phi i32 [ %87, %101 ], [ %100, %98 ]
  %105 = phi ptr [ %102, %101 ], [ %.lcssa6, %98 ]
  %106 = and i32 %52, 2
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %108, label %118

108:                                              ; preds = %108, %103
  %109 = phi ptr [ %112, %108 ], [ %105, %103 ]
  %110 = phi i32 [ %113, %108 ], [ 5, %103 ]
  %111 = tail call i32 @getbits_fast(i32 noundef %11) #55
  %112 = getelementptr inbounds i32, ptr %109, i64 1
  store i32 %111, ptr %109, align 4, !tbaa !11
  %113 = add nsw i32 %110, -1
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %108, !llvm.loop !403

115:                                              ; preds = %108
  %.lcssa5 = phi ptr [ %112, %108 ]
  %116 = mul nuw nsw i32 %11, 5
  %117 = add nuw nsw i32 %104, %116
  br label %120

118:                                              ; preds = %103
  %119 = getelementptr inbounds i32, ptr %105, i64 5
  br label %120

120:                                              ; preds = %118, %115
  %121 = phi i32 [ %104, %118 ], [ %117, %115 ]
  %122 = phi ptr [ %119, %118 ], [ %.lcssa5, %115 ]
  %123 = and i32 %52, 1
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %125, label %135

125:                                              ; preds = %125, %120
  %126 = phi ptr [ %129, %125 ], [ %122, %120 ]
  %127 = phi i32 [ %130, %125 ], [ 5, %120 ]
  %128 = tail call i32 @getbits_fast(i32 noundef %11) #55
  %129 = getelementptr inbounds i32, ptr %126, i64 1
  store i32 %128, ptr %126, align 4, !tbaa !11
  %130 = add nsw i32 %127, -1
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %132, label %125, !llvm.loop !404

132:                                              ; preds = %125
  %.lcssa4 = phi ptr [ %129, %125 ]
  %133 = mul nuw nsw i32 %11, 5
  %134 = add nuw nsw i32 %121, %133
  br label %137

135:                                              ; preds = %120
  %136 = getelementptr inbounds i32, ptr %122, i64 5
  br label %137

137:                                              ; preds = %135, %132, %68, %48
  %138 = phi ptr [ %50, %48 ], [ %.lcssa3, %68 ], [ %136, %135 ], [ %.lcssa4, %132 ]
  %139 = phi i32 [ %31, %48 ], [ %71, %68 ], [ %121, %135 ], [ %134, %132 ]
  store i32 0, ptr %138, align 4, !tbaa !11
  ret i32 %139
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc i32 @III_dequantize_sample(ptr noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef %2, i32 noundef %3, i32 noundef %4) unnamed_addr #4 {
  %6 = alloca [3 x i32], align 4
  %7 = alloca [4 x i32], align 16
  %8 = getelementptr inbounds %struct.gr_info_s, ptr %2, i64 0, i32 14
  %9 = load i32, ptr %8, align 8, !tbaa !360
  %10 = add i32 %9, 1
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %6) #56
  %11 = getelementptr inbounds %struct.gr_info_s, ptr %2, i64 0, i32 1
  %12 = load i32, ptr %11, align 4, !tbaa !349
  %13 = sub i32 %12, %4
  %14 = getelementptr inbounds %struct.gr_info_s, ptr %2, i64 0, i32 2
  %15 = load i32, ptr %14, align 8, !tbaa !351
  %16 = getelementptr inbounds %struct.gr_info_s, ptr %2, i64 0, i32 11
  %17 = load i32, ptr %16, align 4, !tbaa !357
  %18 = getelementptr inbounds %struct.gr_info_s, ptr %2, i64 0, i32 12
  %19 = load i32, ptr %18, align 8, !tbaa !358
  %20 = sub nsw i32 288, %15
  %21 = ashr i32 %20, 1
  %22 = icmp sgt i32 %15, %17
  br i1 %22, label %25, label %23

23:                                               ; preds = %5
  store i32 %15, ptr %6, align 4, !tbaa !11
  %24 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 1
  store i32 0, ptr %24, align 4, !tbaa !11
  br label %33

25:                                               ; preds = %5
  store i32 %17, ptr %6, align 4, !tbaa !11
  %26 = icmp sgt i32 %15, %19
  %27 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 1
  br i1 %26, label %30, label %28

28:                                               ; preds = %25
  %29 = sub nsw i32 %15, %17
  store i32 %29, ptr %27, align 4, !tbaa !11
  br label %33

30:                                               ; preds = %25
  %31 = sub nsw i32 %19, %17
  store i32 %31, ptr %27, align 4, !tbaa !11
  %32 = sub nsw i32 %15, %19
  br label %33

33:                                               ; preds = %30, %28, %23
  %34 = phi i32 [ 0, %28 ], [ %32, %30 ], [ 0, %23 ]
  %35 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 2
  store i32 %34, ptr %35, align 4, !tbaa !11
  %36 = getelementptr inbounds %struct.gr_info_s, ptr %2, i64 0, i32 4
  %37 = load i32, ptr %36, align 8, !tbaa !354
  %38 = icmp eq i32 %37, 2
  %39 = sext i32 %3 to i64
  br i1 %38, label %40, label %493

40:                                               ; preds = %33
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %7) #56
  %41 = getelementptr inbounds %struct.gr_info_s, ptr %2, i64 0, i32 5
  %42 = load i32, ptr %41, align 4, !tbaa !355
  %43 = icmp eq i32 %42, 0
  %44 = getelementptr inbounds [9 x [3 x ptr]], ptr @map, i64 0, i64 %39, i64 1
  %45 = getelementptr inbounds [9 x [3 x ptr]], ptr @mapend, i64 0, i64 %39, i64 1
  %46 = getelementptr inbounds [9 x [3 x ptr]], ptr @map, i64 0, i64 %39
  %47 = getelementptr inbounds [9 x [3 x ptr]], ptr @mapend, i64 0, i64 %39
  %48 = select i1 %43, i32 -1, i32 2
  %49 = select i1 %43, ptr %45, ptr %47
  %50 = select i1 %43, ptr %44, ptr %46
  %51 = getelementptr inbounds [4 x i32], ptr %7, i64 0, i64 3
  store i32 -1, ptr %51, align 4
  %52 = getelementptr inbounds [4 x i32], ptr %7, i64 0, i64 2
  store i32 %48, ptr %52, align 8
  %53 = getelementptr inbounds [4 x i32], ptr %7, i64 0, i64 1
  store i32 %48, ptr %53, align 4
  store i32 %48, ptr %7, align 16
  %54 = load ptr, ptr %50, align 8, !tbaa !7
  %55 = load ptr, ptr %49, align 8, !tbaa !7
  %56 = getelementptr inbounds %struct.gr_info_s, ptr %2, i64 0, i32 17
  br label %71

57:                                               ; preds = %286
  %.lcssa19 = phi i32 [ %287, %286 ]
  %.lcssa18 = phi i32 [ %288, %286 ]
  %.lcssa17 = phi i32 [ %289, %286 ]
  %.lcssa16 = phi i32 [ %290, %286 ]
  %.lcssa15 = phi double [ %291, %286 ]
  %.lcssa14 = phi ptr [ %292, %286 ]
  %.lcssa13 = phi i32 [ %293, %286 ]
  %.lcssa12 = phi ptr [ %294, %286 ]
  %.lcssa11 = phi ptr [ %295, %286 ]
  %58 = icmp ugt i32 %20, 1
  %59 = icmp sgt i32 %.lcssa19, 0
  %60 = select i1 %58, i1 %59, i1 false
  br i1 %60, label %61, label %296

61:                                               ; preds = %57
  %62 = load i32, ptr @bitindex, align 4, !tbaa !11
  %63 = load ptr, ptr @wordpointer, align 8, !tbaa !7
  %64 = getelementptr inbounds %struct.gr_info_s, ptr %2, i64 0, i32 15
  %65 = load i32, ptr %64, align 4, !tbaa !361
  %66 = zext i32 %65 to i64
  %67 = getelementptr inbounds %struct.BF_BitstreamPart, ptr @htc, i64 %66, i32 1
  %68 = load ptr, ptr %67, align 8, !tbaa !405
  %69 = load i16, ptr %68, align 2, !tbaa !41
  %70 = icmp slt i16 %69, 0
  br label %303

71:                                               ; preds = %286, %40
  %72 = phi i1 [ true, %40 ], [ false, %286 ]
  %73 = phi i64 [ 0, %40 ], [ 1, %286 ]
  %74 = phi ptr [ %1, %40 ], [ %295, %286 ]
  %75 = phi ptr [ %0, %40 ], [ %294, %286 ]
  %76 = phi i32 [ 0, %40 ], [ %293, %286 ]
  %77 = phi ptr [ %54, %40 ], [ %292, %286 ]
  %78 = phi double [ 0.000000e+00, %40 ], [ %291, %286 ]
  %79 = phi i32 [ 0, %40 ], [ %290, %286 ]
  %80 = phi i32 [ 0, %40 ], [ %289, %286 ]
  %81 = phi i32 [ 0, %40 ], [ %288, %286 ]
  %82 = phi i32 [ %13, %40 ], [ %287, %286 ]
  %83 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 %73
  %84 = load i32, ptr %83, align 4, !tbaa !11
  %85 = getelementptr inbounds %struct.gr_info_s, ptr %2, i64 0, i32 6, i64 %73
  %86 = load i32, ptr %85, align 4, !tbaa !11
  %87 = zext i32 %86 to i64
  %88 = getelementptr inbounds %struct.BF_BitstreamPart, ptr @ht.183, i64 %87
  %89 = icmp eq i32 %84, 0
  br i1 %89, label %286, label %90

90:                                               ; preds = %71
  %91 = getelementptr inbounds %struct.BF_BitstreamPart, ptr @ht.183, i64 %87, i32 1
  %92 = load ptr, ptr %91, align 8, !tbaa !405
  br label %93

93:                                               ; preds = %280, %90
  %94 = phi ptr [ %74, %90 ], [ %136, %280 ]
  %95 = phi ptr [ %75, %90 ], [ %282, %280 ]
  %96 = phi i32 [ %84, %90 ], [ %283, %280 ]
  %97 = phi i32 [ %76, %90 ], [ %284, %280 ]
  %98 = phi ptr [ %77, %90 ], [ %133, %280 ]
  %99 = phi double [ %78, %90 ], [ %132, %280 ]
  %100 = phi i32 [ %79, %90 ], [ %131, %280 ]
  %101 = phi i32 [ %80, %90 ], [ %130, %280 ]
  %102 = phi i32 [ %81, %90 ], [ %129, %280 ]
  %103 = phi i32 [ %82, %90 ], [ %281, %280 ]
  %104 = icmp eq i32 %97, 0
  br i1 %104, label %105, label %128

105:                                              ; preds = %93
  %106 = getelementptr inbounds i32, ptr %98, i64 1
  %107 = load i32, ptr %98, align 4, !tbaa !11
  %108 = getelementptr inbounds i32, ptr %98, i64 2
  %109 = load i32, ptr %106, align 4, !tbaa !11
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds double, ptr %0, i64 %110
  %112 = getelementptr inbounds i32, ptr %98, i64 3
  %113 = load i32, ptr %108, align 4, !tbaa !11
  %114 = getelementptr inbounds i32, ptr %98, i64 4
  %115 = load i32, ptr %112, align 4, !tbaa !11
  %116 = icmp eq i32 %113, 3
  %117 = sext i32 %113 to i64
  %118 = getelementptr inbounds %struct.gr_info_s, ptr %2, i64 0, i32 16, i64 %117
  %119 = select i1 %116, ptr %56, ptr %118
  %120 = select i1 %116, i32 1, i32 3
  %121 = load ptr, ptr %119, align 8, !tbaa !7
  %122 = getelementptr inbounds i32, ptr %94, i64 1
  %123 = load i32, ptr %94, align 4, !tbaa !11
  %124 = shl i32 %123, %10
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds double, ptr %121, i64 %125
  %127 = load double, ptr %126, align 8, !tbaa !39
  br label %128

128:                                              ; preds = %105, %93
  %129 = phi i32 [ %102, %93 ], [ %120, %105 ]
  %130 = phi i32 [ %101, %93 ], [ %113, %105 ]
  %131 = phi i32 [ %100, %93 ], [ %115, %105 ]
  %132 = phi double [ %99, %93 ], [ %127, %105 ]
  %133 = phi ptr [ %98, %93 ], [ %114, %105 ]
  %134 = phi i32 [ %97, %93 ], [ %107, %105 ]
  %135 = phi ptr [ %95, %93 ], [ %111, %105 ]
  %136 = phi ptr [ %94, %93 ], [ %122, %105 ]
  %137 = load ptr, ptr @wordpointer, align 8, !tbaa !7
  %138 = load i32, ptr @bitindex, align 4, !tbaa !11
  %139 = load i16, ptr %92, align 2, !tbaa !41
  %140 = icmp slt i16 %139, 0
  br i1 %140, label %141, label %165

141:                                              ; preds = %141, %128
  %142 = phi i16 [ %163, %141 ], [ %139, %128 ]
  %143 = phi ptr [ %161, %141 ], [ %92, %128 ]
  %144 = phi i32 [ %162, %141 ], [ %103, %128 ]
  %145 = phi ptr [ %153, %141 ], [ %137, %128 ]
  %146 = phi i32 [ %154, %141 ], [ %138, %128 ]
  %147 = getelementptr inbounds i16, ptr %143, i64 1
  %148 = load i8, ptr %145, align 1, !tbaa !15
  %149 = zext i8 %148 to i32
  %150 = add nsw i32 %146, 1
  %151 = ashr i32 %150, 3
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds i8, ptr %145, i64 %152
  store ptr %153, ptr @wordpointer, align 8, !tbaa !7
  %154 = and i32 %150, 7
  store i32 %154, ptr @bitindex, align 4, !tbaa !11
  %155 = lshr i32 128, %146
  %156 = and i32 %155, %149
  %157 = icmp eq i32 %156, 0
  %158 = sext i16 %142 to i64
  %159 = sub nsw i64 0, %158
  %160 = select i1 %157, i64 0, i64 %159
  %161 = getelementptr inbounds i16, ptr %147, i64 %160
  %162 = add nsw i32 %144, -1
  %163 = load i16, ptr %161, align 2, !tbaa !41
  %164 = icmp slt i16 %163, 0
  br i1 %164, label %141, label %165, !llvm.loop !407

165:                                              ; preds = %141, %128
  %166 = phi i32 [ %138, %128 ], [ %154, %141 ]
  %167 = phi ptr [ %137, %128 ], [ %153, %141 ]
  %168 = phi i32 [ %103, %128 ], [ %162, %141 ]
  %169 = phi i16 [ %139, %128 ], [ %163, %141 ]
  %170 = zext i16 %169 to i32
  %171 = lshr i32 %170, 4
  %172 = and i32 %170, 15
  %173 = icmp eq i32 %171, 15
  br i1 %173, label %174, label %202

174:                                              ; preds = %165
  %175 = sext i32 %130 to i64
  %176 = getelementptr inbounds [4 x i32], ptr %7, i64 0, i64 %175
  store i32 %131, ptr %176, align 4, !tbaa !11
  %177 = load i32, ptr %88, align 16, !tbaa !408
  %178 = xor i32 %177, -1
  %179 = add i32 %168, %178
  %180 = tail call i32 @getbits(i32 noundef %177) #55
  %181 = add i32 %180, 15
  %182 = load ptr, ptr @wordpointer, align 8, !tbaa !7
  %183 = load i8, ptr %182, align 1, !tbaa !15
  %184 = zext i8 %183 to i32
  %185 = load i32, ptr @bitindex, align 4, !tbaa !11
  %186 = add nsw i32 %185, 1
  %187 = ashr i32 %186, 3
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds i8, ptr %182, i64 %188
  store ptr %189, ptr @wordpointer, align 8, !tbaa !7
  %190 = and i32 %186, 7
  store i32 %190, ptr @bitindex, align 4, !tbaa !11
  %191 = lshr i32 128, %185
  %192 = and i32 %191, %184
  %193 = icmp eq i32 %192, 0
  %194 = sext i32 %181 to i64
  %195 = getelementptr inbounds [8207 x double], ptr @ispow, i64 0, i64 %194
  %196 = load double, ptr %195, align 8, !tbaa !39
  br i1 %193, label %200, label %197

197:                                              ; preds = %174
  %198 = fneg double %196
  %199 = fmul double %132, %198
  store double %199, ptr %135, align 8, !tbaa !39
  br label %225

200:                                              ; preds = %174
  %201 = fmul double %132, %196
  store double %201, ptr %135, align 8, !tbaa !39
  br label %225

202:                                              ; preds = %165
  %203 = icmp ult i16 %169, 16
  br i1 %203, label %224, label %204

204:                                              ; preds = %202
  %205 = sext i32 %130 to i64
  %206 = getelementptr inbounds [4 x i32], ptr %7, i64 0, i64 %205
  store i32 %131, ptr %206, align 4, !tbaa !11
  %207 = load i8, ptr %167, align 1, !tbaa !15
  %208 = zext i8 %207 to i32
  %209 = add nsw i32 %166, 1
  %210 = ashr i32 %209, 3
  %211 = sext i32 %210 to i64
  %212 = getelementptr inbounds i8, ptr %167, i64 %211
  store ptr %212, ptr @wordpointer, align 8, !tbaa !7
  %213 = and i32 %209, 7
  store i32 %213, ptr @bitindex, align 4, !tbaa !11
  %214 = lshr i32 128, %166
  %215 = and i32 %214, %208
  %216 = icmp eq i32 %215, 0
  %217 = zext i32 %171 to i64
  %218 = getelementptr inbounds [8207 x double], ptr @ispow, i64 0, i64 %217
  %219 = load double, ptr %218, align 8, !tbaa !39
  %220 = fneg double %219
  %221 = select i1 %216, double %219, double %220
  %222 = fmul double %132, %221
  store double %222, ptr %135, align 8, !tbaa !39
  %223 = add nsw i32 %168, -1
  br label %225

224:                                              ; preds = %202
  store double 0.000000e+00, ptr %135, align 8, !tbaa !39
  br label %225

225:                                              ; preds = %224, %204, %200, %197
  %226 = phi i32 [ %190, %197 ], [ %190, %200 ], [ %213, %204 ], [ %166, %224 ]
  %227 = phi ptr [ %189, %197 ], [ %189, %200 ], [ %212, %204 ], [ %167, %224 ]
  %228 = phi i32 [ %179, %197 ], [ %179, %200 ], [ %223, %204 ], [ %168, %224 ]
  %229 = zext i32 %129 to i64
  %230 = getelementptr inbounds double, ptr %135, i64 %229
  switch i32 %172, label %259 [
    i32 15, label %231
    i32 0, label %279
  ]

231:                                              ; preds = %225
  %232 = sext i32 %130 to i64
  %233 = getelementptr inbounds [4 x i32], ptr %7, i64 0, i64 %232
  store i32 %131, ptr %233, align 4, !tbaa !11
  %234 = load i32, ptr %88, align 16, !tbaa !408
  %235 = xor i32 %234, -1
  %236 = add i32 %228, %235
  %237 = tail call i32 @getbits(i32 noundef %234) #55
  %238 = add i32 %237, 15
  %239 = load ptr, ptr @wordpointer, align 8, !tbaa !7
  %240 = load i8, ptr %239, align 1, !tbaa !15
  %241 = zext i8 %240 to i32
  %242 = load i32, ptr @bitindex, align 4, !tbaa !11
  %243 = add nsw i32 %242, 1
  %244 = ashr i32 %243, 3
  %245 = sext i32 %244 to i64
  %246 = getelementptr inbounds i8, ptr %239, i64 %245
  store ptr %246, ptr @wordpointer, align 8, !tbaa !7
  %247 = and i32 %243, 7
  store i32 %247, ptr @bitindex, align 4, !tbaa !11
  %248 = lshr i32 128, %242
  %249 = and i32 %248, %241
  %250 = icmp eq i32 %249, 0
  %251 = sext i32 %238 to i64
  %252 = getelementptr inbounds [8207 x double], ptr @ispow, i64 0, i64 %251
  %253 = load double, ptr %252, align 8, !tbaa !39
  br i1 %250, label %257, label %254

254:                                              ; preds = %231
  %255 = fneg double %253
  %256 = fmul double %132, %255
  store double %256, ptr %230, align 8, !tbaa !39
  br label %280

257:                                              ; preds = %231
  %258 = fmul double %132, %253
  store double %258, ptr %230, align 8, !tbaa !39
  br label %280

259:                                              ; preds = %225
  %260 = sext i32 %130 to i64
  %261 = getelementptr inbounds [4 x i32], ptr %7, i64 0, i64 %260
  store i32 %131, ptr %261, align 4, !tbaa !11
  %262 = load i8, ptr %227, align 1, !tbaa !15
  %263 = zext i8 %262 to i32
  %264 = add nsw i32 %226, 1
  %265 = ashr i32 %264, 3
  %266 = sext i32 %265 to i64
  %267 = getelementptr inbounds i8, ptr %227, i64 %266
  store ptr %267, ptr @wordpointer, align 8, !tbaa !7
  %268 = and i32 %264, 7
  store i32 %268, ptr @bitindex, align 4, !tbaa !11
  %269 = lshr i32 128, %226
  %270 = and i32 %269, %263
  %271 = icmp eq i32 %270, 0
  %272 = zext i32 %172 to i64
  %273 = getelementptr inbounds [8207 x double], ptr @ispow, i64 0, i64 %272
  %274 = load double, ptr %273, align 8, !tbaa !39
  %275 = fneg double %274
  %276 = select i1 %271, double %274, double %275
  %277 = fmul double %132, %276
  store double %277, ptr %230, align 8, !tbaa !39
  %278 = add nsw i32 %228, -1
  br label %280

279:                                              ; preds = %225
  store double 0.000000e+00, ptr %230, align 8, !tbaa !39
  br label %280

280:                                              ; preds = %279, %259, %257, %254
  %281 = phi i32 [ %236, %254 ], [ %236, %257 ], [ %278, %259 ], [ %228, %279 ]
  %282 = getelementptr inbounds double, ptr %230, i64 %229
  %283 = add nsw i32 %96, -1
  %284 = add nsw i32 %134, -1
  %285 = icmp eq i32 %283, 0
  br i1 %285, label %286, label %93, !llvm.loop !409

286:                                              ; preds = %280, %71
  %287 = phi i32 [ %82, %71 ], [ %281, %280 ]
  %288 = phi i32 [ %81, %71 ], [ %129, %280 ]
  %289 = phi i32 [ %80, %71 ], [ %130, %280 ]
  %290 = phi i32 [ %79, %71 ], [ %131, %280 ]
  %291 = phi double [ %78, %71 ], [ %132, %280 ]
  %292 = phi ptr [ %77, %71 ], [ %133, %280 ]
  %293 = phi i32 [ %76, %71 ], [ %284, %280 ]
  %294 = phi ptr [ %75, %71 ], [ %282, %280 ]
  %295 = phi ptr [ %74, %71 ], [ %136, %280 ]
  br i1 %72, label %71, label %57, !llvm.loop !410

296:                                              ; preds = %441, %412, %57
  %297 = phi i32 [ %.lcssa19, %57 ], [ %360, %412 ], [ %.lcssa8, %441 ]
  %298 = phi i32 [ %.lcssa18, %57 ], [ %401, %412 ], [ %.lcssa6, %441 ]
  %299 = phi ptr [ %.lcssa14, %57 ], [ %405, %412 ], [ %.lcssa2, %441 ]
  %300 = phi i32 [ %.lcssa13, %57 ], [ %406, %412 ], [ %.lcssa1, %441 ]
  %301 = phi ptr [ %.lcssa12, %57 ], [ %407, %412 ], [ %.lcssa7, %441 ]
  %302 = icmp ult ptr %299, %55
  br i1 %302, label %446, label %473

303:                                              ; preds = %441, %61
  %304 = phi ptr [ %.lcssa11, %61 ], [ %.lcssa, %441 ]
  %305 = phi ptr [ %.lcssa12, %61 ], [ %.lcssa7, %441 ]
  %306 = phi i32 [ %21, %61 ], [ %442, %441 ]
  %307 = phi i32 [ %.lcssa13, %61 ], [ %.lcssa1, %441 ]
  %308 = phi ptr [ %.lcssa14, %61 ], [ %.lcssa2, %441 ]
  %309 = phi double [ %.lcssa15, %61 ], [ %.lcssa3, %441 ]
  %310 = phi i32 [ %.lcssa16, %61 ], [ %.lcssa4, %441 ]
  %311 = phi i32 [ %.lcssa17, %61 ], [ %.lcssa5, %441 ]
  %312 = phi i32 [ %.lcssa18, %61 ], [ %.lcssa6, %441 ]
  %313 = phi i32 [ %.lcssa19, %61 ], [ %.lcssa8, %441 ]
  %314 = phi ptr [ %63, %61 ], [ %.lcssa9, %441 ]
  %315 = phi i32 [ %62, %61 ], [ %.lcssa10, %441 ]
  br i1 %70, label %316, label %342

316:                                              ; preds = %323, %303
  %317 = phi i32 [ %332, %323 ], [ %315, %303 ]
  %318 = phi ptr [ %331, %323 ], [ %314, %303 ]
  %319 = phi i16 [ %340, %323 ], [ %69, %303 ]
  %320 = phi ptr [ %339, %323 ], [ %68, %303 ]
  %321 = phi i32 [ %325, %323 ], [ %313, %303 ]
  %322 = icmp slt i32 %321, 1
  br i1 %322, label %342, label %323

323:                                              ; preds = %316
  %324 = getelementptr inbounds i16, ptr %320, i64 1
  %325 = add nsw i32 %321, -1
  %326 = load i8, ptr %318, align 1, !tbaa !15
  %327 = zext i8 %326 to i32
  %328 = add nsw i32 %317, 1
  %329 = ashr i32 %328, 3
  %330 = sext i32 %329 to i64
  %331 = getelementptr inbounds i8, ptr %318, i64 %330
  store ptr %331, ptr @wordpointer, align 8, !tbaa !7
  %332 = and i32 %328, 7
  store i32 %332, ptr @bitindex, align 4, !tbaa !11
  %333 = lshr i32 128, %317
  %334 = and i32 %333, %327
  %335 = icmp eq i32 %334, 0
  %336 = sext i16 %319 to i64
  %337 = sub nsw i64 0, %336
  %338 = select i1 %335, i64 0, i64 %337
  %339 = getelementptr inbounds i16, ptr %324, i64 %338
  %340 = load i16, ptr %339, align 2, !tbaa !41
  %341 = icmp slt i16 %340, 0
  br i1 %341, label %316, label %342, !llvm.loop !411

342:                                              ; preds = %323, %316, %303
  %343 = phi i32 [ %315, %303 ], [ %317, %316 ], [ %332, %323 ]
  %344 = phi ptr [ %314, %303 ], [ %318, %316 ], [ %331, %323 ]
  %345 = phi i32 [ %313, %303 ], [ 0, %316 ], [ %325, %323 ]
  %346 = phi i16 [ %69, %303 ], [ 0, %316 ], [ %340, %323 ]
  %347 = zext i16 %346 to i32
  br label %348

348:                                              ; preds = %430, %342
  %349 = phi i32 [ %343, %342 ], [ %432, %430 ]
  %350 = phi ptr [ %344, %342 ], [ %433, %430 ]
  %351 = phi ptr [ %304, %342 ], [ %408, %430 ]
  %352 = phi ptr [ %305, %342 ], [ %438, %430 ]
  %353 = phi i32 [ %307, %342 ], [ %406, %430 ]
  %354 = phi ptr [ %308, %342 ], [ %405, %430 ]
  %355 = phi double [ %309, %342 ], [ %404, %430 ]
  %356 = phi i32 [ %310, %342 ], [ %403, %430 ]
  %357 = phi i32 [ %311, %342 ], [ %402, %430 ]
  %358 = phi i32 [ %312, %342 ], [ %401, %430 ]
  %359 = phi i32 [ 0, %342 ], [ %439, %430 ]
  %360 = phi i32 [ %345, %342 ], [ %436, %430 ]
  %361 = phi ptr [ %344, %342 ], [ %435, %430 ]
  %362 = phi i32 [ %343, %342 ], [ %434, %430 ]
  %363 = and i32 %359, 1
  %364 = icmp eq i32 %363, 0
  br i1 %364, label %365, label %400

365:                                              ; preds = %348
  %366 = icmp eq i32 %353, 0
  br i1 %366, label %367, label %390

367:                                              ; preds = %365
  %368 = getelementptr inbounds i32, ptr %354, i64 1
  %369 = load i32, ptr %354, align 4, !tbaa !11
  %370 = getelementptr inbounds i32, ptr %354, i64 2
  %371 = load i32, ptr %368, align 4, !tbaa !11
  %372 = sext i32 %371 to i64
  %373 = getelementptr inbounds double, ptr %0, i64 %372
  %374 = getelementptr inbounds i32, ptr %354, i64 3
  %375 = load i32, ptr %370, align 4, !tbaa !11
  %376 = getelementptr inbounds i32, ptr %354, i64 4
  %377 = load i32, ptr %374, align 4, !tbaa !11
  %378 = icmp eq i32 %375, 3
  %379 = sext i32 %375 to i64
  %380 = getelementptr inbounds %struct.gr_info_s, ptr %2, i64 0, i32 16, i64 %379
  %381 = select i1 %378, ptr %56, ptr %380
  %382 = select i1 %378, i32 1, i32 3
  %383 = load ptr, ptr %381, align 8, !tbaa !7
  %384 = getelementptr inbounds i32, ptr %351, i64 1
  %385 = load i32, ptr %351, align 4, !tbaa !11
  %386 = shl i32 %385, %10
  %387 = sext i32 %386 to i64
  %388 = getelementptr inbounds double, ptr %383, i64 %387
  %389 = load double, ptr %388, align 8, !tbaa !39
  br label %390

390:                                              ; preds = %367, %365
  %391 = phi i32 [ %358, %365 ], [ %382, %367 ]
  %392 = phi i32 [ %357, %365 ], [ %375, %367 ]
  %393 = phi i32 [ %356, %365 ], [ %377, %367 ]
  %394 = phi double [ %355, %365 ], [ %389, %367 ]
  %395 = phi ptr [ %354, %365 ], [ %376, %367 ]
  %396 = phi i32 [ %353, %365 ], [ %369, %367 ]
  %397 = phi ptr [ %352, %365 ], [ %373, %367 ]
  %398 = phi ptr [ %351, %365 ], [ %384, %367 ]
  %399 = add nsw i32 %396, -1
  br label %400

400:                                              ; preds = %390, %348
  %401 = phi i32 [ %358, %348 ], [ %391, %390 ]
  %402 = phi i32 [ %357, %348 ], [ %392, %390 ]
  %403 = phi i32 [ %356, %348 ], [ %393, %390 ]
  %404 = phi double [ %355, %348 ], [ %394, %390 ]
  %405 = phi ptr [ %354, %348 ], [ %395, %390 ]
  %406 = phi i32 [ %353, %348 ], [ %399, %390 ]
  %407 = phi ptr [ %352, %348 ], [ %397, %390 ]
  %408 = phi ptr [ %351, %348 ], [ %398, %390 ]
  %409 = lshr i32 8, %359
  %410 = and i32 %409, %347
  %411 = icmp eq i32 %410, 0
  br i1 %411, label %430, label %412

412:                                              ; preds = %400
  %413 = sext i32 %402 to i64
  %414 = getelementptr inbounds [4 x i32], ptr %7, i64 0, i64 %413
  store i32 %403, ptr %414, align 4, !tbaa !11
  %415 = add nsw i32 %360, -1
  %416 = icmp slt i32 %360, 1
  br i1 %416, label %296, label %417

417:                                              ; preds = %412
  %418 = load i8, ptr %361, align 1, !tbaa !15
  %419 = zext i8 %418 to i32
  %420 = add nsw i32 %362, 1
  %421 = ashr i32 %420, 3
  %422 = sext i32 %421 to i64
  %423 = getelementptr inbounds i8, ptr %361, i64 %422
  store ptr %423, ptr @wordpointer, align 8, !tbaa !7
  %424 = and i32 %420, 7
  store i32 %424, ptr @bitindex, align 4, !tbaa !11
  %425 = lshr i32 128, %362
  %426 = and i32 %425, %419
  %427 = icmp eq i32 %426, 0
  br i1 %427, label %430, label %428

428:                                              ; preds = %417
  %429 = fneg double %404
  br label %430

430:                                              ; preds = %428, %417, %400
  %431 = phi double [ %429, %428 ], [ %404, %417 ], [ 0.000000e+00, %400 ]
  %432 = phi i32 [ %424, %428 ], [ %424, %417 ], [ %349, %400 ]
  %433 = phi ptr [ %423, %428 ], [ %423, %417 ], [ %350, %400 ]
  %434 = phi i32 [ %424, %428 ], [ %424, %417 ], [ %362, %400 ]
  %435 = phi ptr [ %423, %428 ], [ %423, %417 ], [ %361, %400 ]
  %436 = phi i32 [ %415, %428 ], [ %415, %417 ], [ %360, %400 ]
  store double %431, ptr %407, align 8, !tbaa !39
  %437 = zext i32 %401 to i64
  %438 = getelementptr inbounds double, ptr %407, i64 %437
  %439 = add nuw nsw i32 %359, 1
  %440 = icmp eq i32 %439, 4
  br i1 %440, label %441, label %348, !llvm.loop !412

441:                                              ; preds = %430
  %.lcssa10 = phi i32 [ %432, %430 ]
  %.lcssa9 = phi ptr [ %433, %430 ]
  %.lcssa8 = phi i32 [ %436, %430 ]
  %.lcssa7 = phi ptr [ %438, %430 ]
  %.lcssa6 = phi i32 [ %401, %430 ]
  %.lcssa5 = phi i32 [ %402, %430 ]
  %.lcssa4 = phi i32 [ %403, %430 ]
  %.lcssa3 = phi double [ %404, %430 ]
  %.lcssa2 = phi ptr [ %405, %430 ]
  %.lcssa1 = phi i32 [ %406, %430 ]
  %.lcssa = phi ptr [ %408, %430 ]
  %442 = add nsw i32 %306, -1
  %443 = icmp ne i32 %442, 0
  %444 = icmp sgt i32 %.lcssa8, 0
  %445 = select i1 %443, i1 %444, i1 false
  br i1 %445, label %303, label %296, !llvm.loop !413

446:                                              ; preds = %463, %296
  %447 = phi ptr [ %471, %463 ], [ %301, %296 ]
  %448 = phi i32 [ %468, %463 ], [ %300, %296 ]
  %449 = phi ptr [ %465, %463 ], [ %299, %296 ]
  %450 = phi i32 [ %464, %463 ], [ %298, %296 ]
  %451 = icmp eq i32 %448, 0
  br i1 %451, label %452, label %463

452:                                              ; preds = %446
  %453 = getelementptr inbounds i32, ptr %449, i64 1
  %454 = load i32, ptr %449, align 4, !tbaa !11
  %455 = getelementptr inbounds i32, ptr %449, i64 2
  %456 = load i32, ptr %453, align 4, !tbaa !11
  %457 = sext i32 %456 to i64
  %458 = getelementptr inbounds double, ptr %0, i64 %457
  %459 = load i32, ptr %455, align 4, !tbaa !11
  %460 = icmp eq i32 %459, 3
  %461 = select i1 %460, i32 1, i32 3
  %462 = getelementptr inbounds i32, ptr %449, i64 4
  br label %463

463:                                              ; preds = %452, %446
  %464 = phi i32 [ %450, %446 ], [ %461, %452 ]
  %465 = phi ptr [ %449, %446 ], [ %462, %452 ]
  %466 = phi i32 [ %448, %446 ], [ %454, %452 ]
  %467 = phi ptr [ %447, %446 ], [ %458, %452 ]
  %468 = add nsw i32 %466, -1
  store double 0.000000e+00, ptr %467, align 8, !tbaa !39
  %469 = zext i32 %464 to i64
  %470 = getelementptr inbounds double, ptr %467, i64 %469
  store double 0.000000e+00, ptr %470, align 8, !tbaa !39
  %471 = getelementptr inbounds double, ptr %470, i64 %469
  %472 = icmp ult ptr %465, %55
  br i1 %472, label %446, label %473, !llvm.loop !414

473:                                              ; preds = %463, %296
  %474 = getelementptr inbounds %struct.gr_info_s, ptr %2, i64 0, i32 8
  %475 = load <4 x i32>, ptr %7, align 16
  %476 = add nsw <4 x i32> %475, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %476, ptr %474, align 8, !tbaa !11
  %477 = extractelement <4 x i32> %475, i64 0
  %478 = extractelement <4 x i32> %475, i64 1
  %479 = tail call i32 @llvm.smax.i32(i32 %477, i32 %478)
  %480 = extractelement <4 x i32> %475, i64 2
  %481 = tail call i32 @llvm.smax.i32(i32 %479, i32 %480)
  %482 = add nsw i32 %481, 1
  %483 = icmp eq i32 %482, 0
  %484 = sext i32 %3 to i64
  %485 = sext i32 %482 to i64
  %486 = getelementptr inbounds [9 x [14 x i32]], ptr @shortLimit, i64 0, i64 %484, i64 %485
  %487 = extractelement <4 x i32> %476, i64 3
  %488 = sext i32 %487 to i64
  %489 = getelementptr inbounds [9 x [23 x i32]], ptr @longLimit, i64 0, i64 %484, i64 %488
  %490 = select i1 %483, ptr %489, ptr %486
  %491 = load i32, ptr %490, align 4, !tbaa !11
  %492 = getelementptr inbounds %struct.gr_info_s, ptr %2, i64 0, i32 10
  store i32 %491, ptr %492, align 8, !tbaa !383
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %7) #56
  br label %872

493:                                              ; preds = %33
  %494 = getelementptr inbounds %struct.gr_info_s, ptr %2, i64 0, i32 13
  %495 = load i32, ptr %494, align 4, !tbaa !367
  %496 = icmp eq i32 %495, 0
  %497 = select i1 %496, ptr @pretab2, ptr @pretab1
  %498 = getelementptr inbounds [9 x [3 x ptr]], ptr @map, i64 0, i64 %39, i64 2
  %499 = load ptr, ptr %498, align 8, !tbaa !7
  %500 = getelementptr inbounds %struct.gr_info_s, ptr %2, i64 0, i32 17
  br label %515

501:                                              ; preds = %712
  %.lcssa39 = phi i32 [ %713, %712 ]
  %.lcssa38 = phi ptr [ %714, %712 ]
  %.lcssa37 = phi ptr [ %715, %712 ]
  %.lcssa36 = phi i32 [ %716, %712 ]
  %.lcssa35 = phi i32 [ %717, %712 ]
  %.lcssa34 = phi ptr [ %718, %712 ]
  %.lcssa33 = phi double [ %719, %712 ]
  %.lcssa32 = phi i32 [ %720, %712 ]
  %.lcssa31 = phi ptr [ %721, %712 ]
  %502 = icmp ugt i32 %20, 1
  %503 = icmp sgt i32 %.lcssa39, 0
  %504 = select i1 %502, i1 %503, i1 false
  br i1 %504, label %505, label %853

505:                                              ; preds = %501
  %506 = load i32, ptr @bitindex, align 4, !tbaa !11
  %507 = load ptr, ptr @wordpointer, align 8, !tbaa !7
  %508 = getelementptr inbounds %struct.gr_info_s, ptr %2, i64 0, i32 15
  %509 = load i32, ptr %508, align 4, !tbaa !361
  %510 = zext i32 %509 to i64
  %511 = getelementptr inbounds %struct.BF_BitstreamPart, ptr @htc, i64 %510, i32 1
  %512 = load ptr, ptr %511, align 8, !tbaa !405
  %513 = load i16, ptr %512, align 2, !tbaa !41
  %514 = icmp slt i16 %513, 0
  br label %724

515:                                              ; preds = %712, %493
  %516 = phi i64 [ 0, %493 ], [ %722, %712 ]
  %517 = phi ptr [ %1, %493 ], [ %721, %712 ]
  %518 = phi i32 [ 0, %493 ], [ %720, %712 ]
  %519 = phi double [ 0.000000e+00, %493 ], [ %719, %712 ]
  %520 = phi ptr [ %499, %493 ], [ %718, %712 ]
  %521 = phi i32 [ 0, %493 ], [ %717, %712 ]
  %522 = phi i32 [ -1, %493 ], [ %716, %712 ]
  %523 = phi ptr [ %497, %493 ], [ %715, %712 ]
  %524 = phi ptr [ %0, %493 ], [ %714, %712 ]
  %525 = phi i32 [ %13, %493 ], [ %713, %712 ]
  %526 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 %516
  %527 = load i32, ptr %526, align 4, !tbaa !11
  %528 = getelementptr inbounds %struct.gr_info_s, ptr %2, i64 0, i32 6, i64 %516
  %529 = load i32, ptr %528, align 4, !tbaa !11
  %530 = zext i32 %529 to i64
  %531 = getelementptr inbounds %struct.BF_BitstreamPart, ptr @ht.183, i64 %530
  %532 = icmp eq i32 %527, 0
  br i1 %532, label %712, label %533

533:                                              ; preds = %515
  %534 = getelementptr inbounds %struct.BF_BitstreamPart, ptr @ht.183, i64 %530, i32 1
  %535 = load ptr, ptr %534, align 8, !tbaa !405
  br label %536

536:                                              ; preds = %705, %533
  %537 = phi ptr [ %517, %533 ], [ %569, %705 ]
  %538 = phi i32 [ %527, %533 ], [ %709, %705 ]
  %539 = phi i32 [ %518, %533 ], [ %710, %705 ]
  %540 = phi double [ %519, %533 ], [ %567, %705 ]
  %541 = phi ptr [ %520, %533 ], [ %566, %705 ]
  %542 = phi i32 [ %521, %533 ], [ %565, %705 ]
  %543 = phi i32 [ %522, %533 ], [ %707, %705 ]
  %544 = phi ptr [ %523, %533 ], [ %564, %705 ]
  %545 = phi ptr [ %524, %533 ], [ %708, %705 ]
  %546 = phi i32 [ %525, %533 ], [ %706, %705 ]
  %547 = icmp eq i32 %539, 0
  br i1 %547, label %548, label %563

548:                                              ; preds = %536
  %549 = getelementptr inbounds i32, ptr %541, i64 1
  %550 = load i32, ptr %541, align 4, !tbaa !11
  %551 = load ptr, ptr %500, align 8, !tbaa !352
  %552 = getelementptr inbounds i32, ptr %537, i64 1
  %553 = load i32, ptr %537, align 4, !tbaa !11
  %554 = getelementptr inbounds i32, ptr %544, i64 1
  %555 = load i32, ptr %544, align 4, !tbaa !11
  %556 = add nsw i32 %555, %553
  %557 = shl i32 %556, %10
  %558 = sext i32 %557 to i64
  %559 = getelementptr inbounds double, ptr %551, i64 %558
  %560 = load double, ptr %559, align 8, !tbaa !39
  %561 = getelementptr inbounds i32, ptr %541, i64 2
  %562 = load i32, ptr %549, align 4, !tbaa !11
  br label %563

563:                                              ; preds = %548, %536
  %564 = phi ptr [ %544, %536 ], [ %554, %548 ]
  %565 = phi i32 [ %542, %536 ], [ %562, %548 ]
  %566 = phi ptr [ %541, %536 ], [ %561, %548 ]
  %567 = phi double [ %540, %536 ], [ %560, %548 ]
  %568 = phi i32 [ %539, %536 ], [ %550, %548 ]
  %569 = phi ptr [ %537, %536 ], [ %552, %548 ]
  %570 = load ptr, ptr @wordpointer, align 8, !tbaa !7
  %571 = load i32, ptr @bitindex, align 4, !tbaa !11
  %572 = load i16, ptr %535, align 2, !tbaa !41
  %573 = icmp slt i16 %572, 0
  br i1 %573, label %574, label %598

574:                                              ; preds = %574, %563
  %575 = phi i16 [ %596, %574 ], [ %572, %563 ]
  %576 = phi ptr [ %594, %574 ], [ %535, %563 ]
  %577 = phi i32 [ %595, %574 ], [ %546, %563 ]
  %578 = phi ptr [ %586, %574 ], [ %570, %563 ]
  %579 = phi i32 [ %587, %574 ], [ %571, %563 ]
  %580 = getelementptr inbounds i16, ptr %576, i64 1
  %581 = load i8, ptr %578, align 1, !tbaa !15
  %582 = zext i8 %581 to i32
  %583 = add nsw i32 %579, 1
  %584 = ashr i32 %583, 3
  %585 = sext i32 %584 to i64
  %586 = getelementptr inbounds i8, ptr %578, i64 %585
  store ptr %586, ptr @wordpointer, align 8, !tbaa !7
  %587 = and i32 %583, 7
  store i32 %587, ptr @bitindex, align 4, !tbaa !11
  %588 = lshr i32 128, %579
  %589 = and i32 %588, %582
  %590 = icmp eq i32 %589, 0
  %591 = sext i16 %575 to i64
  %592 = sub nsw i64 0, %591
  %593 = select i1 %590, i64 0, i64 %592
  %594 = getelementptr inbounds i16, ptr %580, i64 %593
  %595 = add nsw i32 %577, -1
  %596 = load i16, ptr %594, align 2, !tbaa !41
  %597 = icmp slt i16 %596, 0
  br i1 %597, label %574, label %598, !llvm.loop !415

598:                                              ; preds = %574, %563
  %599 = phi i32 [ %571, %563 ], [ %587, %574 ]
  %600 = phi ptr [ %570, %563 ], [ %586, %574 ]
  %601 = phi i32 [ %546, %563 ], [ %595, %574 ]
  %602 = phi i16 [ %572, %563 ], [ %596, %574 ]
  %603 = zext i16 %602 to i32
  %604 = lshr i32 %603, 4
  %605 = and i32 %603, 15
  %606 = icmp eq i32 %604, 15
  br i1 %606, label %607, label %633

607:                                              ; preds = %598
  %608 = load i32, ptr %531, align 16, !tbaa !408
  %609 = xor i32 %608, -1
  %610 = add i32 %601, %609
  %611 = tail call i32 @getbits(i32 noundef %608) #55
  %612 = add i32 %611, 15
  %613 = load ptr, ptr @wordpointer, align 8, !tbaa !7
  %614 = load i8, ptr %613, align 1, !tbaa !15
  %615 = zext i8 %614 to i32
  %616 = load i32, ptr @bitindex, align 4, !tbaa !11
  %617 = add nsw i32 %616, 1
  %618 = ashr i32 %617, 3
  %619 = sext i32 %618 to i64
  %620 = getelementptr inbounds i8, ptr %613, i64 %619
  store ptr %620, ptr @wordpointer, align 8, !tbaa !7
  %621 = and i32 %617, 7
  store i32 %621, ptr @bitindex, align 4, !tbaa !11
  %622 = lshr i32 128, %616
  %623 = and i32 %622, %615
  %624 = icmp eq i32 %623, 0
  %625 = sext i32 %612 to i64
  %626 = getelementptr inbounds [8207 x double], ptr @ispow, i64 0, i64 %625
  %627 = load double, ptr %626, align 8, !tbaa !39
  br i1 %624, label %631, label %628

628:                                              ; preds = %607
  %629 = fneg double %627
  %630 = fmul double %567, %629
  store double %630, ptr %545, align 8, !tbaa !39
  br label %654

631:                                              ; preds = %607
  %632 = fmul double %567, %627
  store double %632, ptr %545, align 8, !tbaa !39
  br label %654

633:                                              ; preds = %598
  %634 = icmp ult i16 %602, 16
  br i1 %634, label %653, label %635

635:                                              ; preds = %633
  %636 = load i8, ptr %600, align 1, !tbaa !15
  %637 = zext i8 %636 to i32
  %638 = add nsw i32 %599, 1
  %639 = ashr i32 %638, 3
  %640 = sext i32 %639 to i64
  %641 = getelementptr inbounds i8, ptr %600, i64 %640
  store ptr %641, ptr @wordpointer, align 8, !tbaa !7
  %642 = and i32 %638, 7
  store i32 %642, ptr @bitindex, align 4, !tbaa !11
  %643 = lshr i32 128, %599
  %644 = and i32 %643, %637
  %645 = icmp eq i32 %644, 0
  %646 = zext i32 %604 to i64
  %647 = getelementptr inbounds [8207 x double], ptr @ispow, i64 0, i64 %646
  %648 = load double, ptr %647, align 8, !tbaa !39
  %649 = fneg double %648
  %650 = select i1 %645, double %648, double %649
  %651 = fmul double %567, %650
  store double %651, ptr %545, align 8, !tbaa !39
  %652 = add nsw i32 %601, -1
  br label %654

653:                                              ; preds = %633
  store double 0.000000e+00, ptr %545, align 8, !tbaa !39
  br label %654

654:                                              ; preds = %653, %635, %631, %628
  %655 = phi i32 [ %621, %628 ], [ %621, %631 ], [ %642, %635 ], [ %599, %653 ]
  %656 = phi ptr [ %620, %628 ], [ %620, %631 ], [ %641, %635 ], [ %600, %653 ]
  %657 = phi i32 [ %610, %628 ], [ %610, %631 ], [ %652, %635 ], [ %601, %653 ]
  %658 = phi i32 [ %565, %628 ], [ %565, %631 ], [ %565, %635 ], [ %543, %653 ]
  %659 = getelementptr inbounds double, ptr %545, i64 1
  switch i32 %605, label %686 [
    i32 15, label %660
    i32 0, label %704
  ]

660:                                              ; preds = %654
  %661 = load i32, ptr %531, align 16, !tbaa !408
  %662 = xor i32 %661, -1
  %663 = add i32 %657, %662
  %664 = tail call i32 @getbits(i32 noundef %661) #55
  %665 = add i32 %664, 15
  %666 = load ptr, ptr @wordpointer, align 8, !tbaa !7
  %667 = load i8, ptr %666, align 1, !tbaa !15
  %668 = zext i8 %667 to i32
  %669 = load i32, ptr @bitindex, align 4, !tbaa !11
  %670 = add nsw i32 %669, 1
  %671 = ashr i32 %670, 3
  %672 = sext i32 %671 to i64
  %673 = getelementptr inbounds i8, ptr %666, i64 %672
  store ptr %673, ptr @wordpointer, align 8, !tbaa !7
  %674 = and i32 %670, 7
  store i32 %674, ptr @bitindex, align 4, !tbaa !11
  %675 = lshr i32 128, %669
  %676 = and i32 %675, %668
  %677 = icmp eq i32 %676, 0
  %678 = sext i32 %665 to i64
  %679 = getelementptr inbounds [8207 x double], ptr @ispow, i64 0, i64 %678
  %680 = load double, ptr %679, align 8, !tbaa !39
  br i1 %677, label %684, label %681

681:                                              ; preds = %660
  %682 = fneg double %680
  %683 = fmul double %567, %682
  store double %683, ptr %659, align 8, !tbaa !39
  br label %705

684:                                              ; preds = %660
  %685 = fmul double %567, %680
  store double %685, ptr %659, align 8, !tbaa !39
  br label %705

686:                                              ; preds = %654
  %687 = load i8, ptr %656, align 1, !tbaa !15
  %688 = zext i8 %687 to i32
  %689 = add nsw i32 %655, 1
  %690 = ashr i32 %689, 3
  %691 = sext i32 %690 to i64
  %692 = getelementptr inbounds i8, ptr %656, i64 %691
  store ptr %692, ptr @wordpointer, align 8, !tbaa !7
  %693 = and i32 %689, 7
  store i32 %693, ptr @bitindex, align 4, !tbaa !11
  %694 = lshr i32 128, %655
  %695 = and i32 %694, %688
  %696 = icmp eq i32 %695, 0
  %697 = zext i32 %605 to i64
  %698 = getelementptr inbounds [8207 x double], ptr @ispow, i64 0, i64 %697
  %699 = load double, ptr %698, align 8, !tbaa !39
  %700 = fneg double %699
  %701 = select i1 %696, double %699, double %700
  %702 = fmul double %567, %701
  store double %702, ptr %659, align 8, !tbaa !39
  %703 = add nsw i32 %657, -1
  br label %705

704:                                              ; preds = %654
  store double 0.000000e+00, ptr %659, align 8, !tbaa !39
  br label %705

705:                                              ; preds = %704, %686, %684, %681
  %706 = phi i32 [ %663, %681 ], [ %663, %684 ], [ %703, %686 ], [ %657, %704 ]
  %707 = phi i32 [ %565, %681 ], [ %565, %684 ], [ %565, %686 ], [ %658, %704 ]
  %708 = getelementptr inbounds double, ptr %545, i64 2
  %709 = add nsw i32 %538, -1
  %710 = add nsw i32 %568, -1
  %711 = icmp eq i32 %709, 0
  br i1 %711, label %712, label %536, !llvm.loop !416

712:                                              ; preds = %705, %515
  %713 = phi i32 [ %525, %515 ], [ %706, %705 ]
  %714 = phi ptr [ %524, %515 ], [ %708, %705 ]
  %715 = phi ptr [ %523, %515 ], [ %564, %705 ]
  %716 = phi i32 [ %522, %515 ], [ %707, %705 ]
  %717 = phi i32 [ %521, %515 ], [ %565, %705 ]
  %718 = phi ptr [ %520, %515 ], [ %566, %705 ]
  %719 = phi double [ %519, %515 ], [ %567, %705 ]
  %720 = phi i32 [ %518, %515 ], [ %710, %705 ]
  %721 = phi ptr [ %517, %515 ], [ %569, %705 ]
  %722 = add nuw nsw i64 %516, 1
  %723 = icmp eq i64 %722, 3
  br i1 %723, label %501, label %515, !llvm.loop !417

724:                                              ; preds = %848, %505
  %725 = phi ptr [ %.lcssa31, %505 ], [ %.lcssa20, %848 ]
  %726 = phi i32 [ %.lcssa32, %505 ], [ %.lcssa21, %848 ]
  %727 = phi double [ %.lcssa33, %505 ], [ %.lcssa22, %848 ]
  %728 = phi ptr [ %.lcssa34, %505 ], [ %.lcssa23, %848 ]
  %729 = phi i32 [ %.lcssa35, %505 ], [ %.lcssa24, %848 ]
  %730 = phi i32 [ %.lcssa36, %505 ], [ %.lcssa27, %848 ]
  %731 = phi ptr [ %.lcssa37, %505 ], [ %.lcssa25, %848 ]
  %732 = phi ptr [ %.lcssa38, %505 ], [ %.lcssa26, %848 ]
  %733 = phi i32 [ %21, %505 ], [ %849, %848 ]
  %734 = phi i32 [ %.lcssa39, %505 ], [ %.lcssa28, %848 ]
  %735 = phi ptr [ %507, %505 ], [ %.lcssa29, %848 ]
  %736 = phi i32 [ %506, %505 ], [ %.lcssa30, %848 ]
  br i1 %514, label %737, label %763

737:                                              ; preds = %744, %724
  %738 = phi i32 [ %753, %744 ], [ %736, %724 ]
  %739 = phi ptr [ %752, %744 ], [ %735, %724 ]
  %740 = phi i16 [ %761, %744 ], [ %513, %724 ]
  %741 = phi ptr [ %760, %744 ], [ %512, %724 ]
  %742 = phi i32 [ %746, %744 ], [ %734, %724 ]
  %743 = icmp slt i32 %742, 1
  br i1 %743, label %763, label %744

744:                                              ; preds = %737
  %745 = getelementptr inbounds i16, ptr %741, i64 1
  %746 = add nsw i32 %742, -1
  %747 = load i8, ptr %739, align 1, !tbaa !15
  %748 = zext i8 %747 to i32
  %749 = add nsw i32 %738, 1
  %750 = ashr i32 %749, 3
  %751 = sext i32 %750 to i64
  %752 = getelementptr inbounds i8, ptr %739, i64 %751
  store ptr %752, ptr @wordpointer, align 8, !tbaa !7
  %753 = and i32 %749, 7
  store i32 %753, ptr @bitindex, align 4, !tbaa !11
  %754 = lshr i32 128, %738
  %755 = and i32 %754, %748
  %756 = icmp eq i32 %755, 0
  %757 = sext i16 %740 to i64
  %758 = sub nsw i64 0, %757
  %759 = select i1 %756, i64 0, i64 %758
  %760 = getelementptr inbounds i16, ptr %745, i64 %759
  %761 = load i16, ptr %760, align 2, !tbaa !41
  %762 = icmp slt i16 %761, 0
  br i1 %762, label %737, label %763, !llvm.loop !418

763:                                              ; preds = %744, %737, %724
  %764 = phi i32 [ %736, %724 ], [ %738, %737 ], [ %753, %744 ]
  %765 = phi ptr [ %735, %724 ], [ %739, %737 ], [ %752, %744 ]
  %766 = phi i32 [ %734, %724 ], [ 0, %737 ], [ %746, %744 ]
  %767 = phi i16 [ %513, %724 ], [ 0, %737 ], [ %761, %744 ]
  %768 = zext i16 %767 to i32
  br label %769

769:                                              ; preds = %837, %763
  %770 = phi i32 [ %764, %763 ], [ %839, %837 ]
  %771 = phi ptr [ %765, %763 ], [ %840, %837 ]
  %772 = phi ptr [ %725, %763 ], [ %817, %837 ]
  %773 = phi i32 [ %726, %763 ], [ %816, %837 ]
  %774 = phi double [ %727, %763 ], [ %815, %837 ]
  %775 = phi ptr [ %728, %763 ], [ %814, %837 ]
  %776 = phi i32 [ %729, %763 ], [ %813, %837 ]
  %777 = phi i32 [ %730, %763 ], [ %844, %837 ]
  %778 = phi i32 [ 0, %763 ], [ %846, %837 ]
  %779 = phi ptr [ %731, %763 ], [ %812, %837 ]
  %780 = phi ptr [ %732, %763 ], [ %845, %837 ]
  %781 = phi i32 [ %766, %763 ], [ %843, %837 ]
  %782 = phi ptr [ %765, %763 ], [ %842, %837 ]
  %783 = phi i32 [ %764, %763 ], [ %841, %837 ]
  %784 = and i32 %778, 1
  %785 = icmp eq i32 %784, 0
  br i1 %785, label %786, label %811

786:                                              ; preds = %769
  %787 = icmp eq i32 %773, 0
  br i1 %787, label %788, label %803

788:                                              ; preds = %786
  %789 = getelementptr inbounds i32, ptr %775, i64 1
  %790 = load i32, ptr %775, align 4, !tbaa !11
  %791 = getelementptr inbounds i32, ptr %775, i64 2
  %792 = load i32, ptr %789, align 4, !tbaa !11
  %793 = load ptr, ptr %500, align 8, !tbaa !352
  %794 = getelementptr inbounds i32, ptr %772, i64 1
  %795 = load i32, ptr %772, align 4, !tbaa !11
  %796 = getelementptr inbounds i32, ptr %779, i64 1
  %797 = load i32, ptr %779, align 4, !tbaa !11
  %798 = add nsw i32 %797, %795
  %799 = shl i32 %798, %10
  %800 = sext i32 %799 to i64
  %801 = getelementptr inbounds double, ptr %793, i64 %800
  %802 = load double, ptr %801, align 8, !tbaa !39
  br label %803

803:                                              ; preds = %788, %786
  %804 = phi ptr [ %779, %786 ], [ %796, %788 ]
  %805 = phi i32 [ %776, %786 ], [ %792, %788 ]
  %806 = phi ptr [ %775, %786 ], [ %791, %788 ]
  %807 = phi double [ %774, %786 ], [ %802, %788 ]
  %808 = phi i32 [ %773, %786 ], [ %790, %788 ]
  %809 = phi ptr [ %772, %786 ], [ %794, %788 ]
  %810 = add nsw i32 %808, -1
  br label %811

811:                                              ; preds = %803, %769
  %812 = phi ptr [ %779, %769 ], [ %804, %803 ]
  %813 = phi i32 [ %776, %769 ], [ %805, %803 ]
  %814 = phi ptr [ %775, %769 ], [ %806, %803 ]
  %815 = phi double [ %774, %769 ], [ %807, %803 ]
  %816 = phi i32 [ %773, %769 ], [ %810, %803 ]
  %817 = phi ptr [ %772, %769 ], [ %809, %803 ]
  %818 = lshr i32 8, %778
  %819 = and i32 %818, %768
  %820 = icmp eq i32 %819, 0
  br i1 %820, label %837, label %821

821:                                              ; preds = %811
  %822 = add nsw i32 %781, -1
  %823 = icmp slt i32 %781, 1
  br i1 %823, label %853, label %824

824:                                              ; preds = %821
  %825 = load i8, ptr %782, align 1, !tbaa !15
  %826 = zext i8 %825 to i32
  %827 = add nsw i32 %783, 1
  %828 = ashr i32 %827, 3
  %829 = sext i32 %828 to i64
  %830 = getelementptr inbounds i8, ptr %782, i64 %829
  store ptr %830, ptr @wordpointer, align 8, !tbaa !7
  %831 = and i32 %827, 7
  store i32 %831, ptr @bitindex, align 4, !tbaa !11
  %832 = lshr i32 128, %783
  %833 = and i32 %832, %826
  %834 = icmp eq i32 %833, 0
  br i1 %834, label %837, label %835

835:                                              ; preds = %824
  %836 = fneg double %815
  br label %837

837:                                              ; preds = %835, %824, %811
  %838 = phi double [ %836, %835 ], [ %815, %824 ], [ 0.000000e+00, %811 ]
  %839 = phi i32 [ %831, %835 ], [ %831, %824 ], [ %770, %811 ]
  %840 = phi ptr [ %830, %835 ], [ %830, %824 ], [ %771, %811 ]
  %841 = phi i32 [ %831, %835 ], [ %831, %824 ], [ %783, %811 ]
  %842 = phi ptr [ %830, %835 ], [ %830, %824 ], [ %782, %811 ]
  %843 = phi i32 [ %822, %835 ], [ %822, %824 ], [ %781, %811 ]
  %844 = phi i32 [ %813, %835 ], [ %813, %824 ], [ %777, %811 ]
  store double %838, ptr %780, align 8, !tbaa !39
  %845 = getelementptr inbounds double, ptr %780, i64 1
  %846 = add nuw nsw i32 %778, 1
  %847 = icmp eq i32 %846, 4
  br i1 %847, label %848, label %769, !llvm.loop !419

848:                                              ; preds = %837
  %.lcssa30 = phi i32 [ %839, %837 ]
  %.lcssa29 = phi ptr [ %840, %837 ]
  %.lcssa28 = phi i32 [ %843, %837 ]
  %.lcssa27 = phi i32 [ %844, %837 ]
  %.lcssa26 = phi ptr [ %845, %837 ]
  %.lcssa25 = phi ptr [ %812, %837 ]
  %.lcssa24 = phi i32 [ %813, %837 ]
  %.lcssa23 = phi ptr [ %814, %837 ]
  %.lcssa22 = phi double [ %815, %837 ]
  %.lcssa21 = phi i32 [ %816, %837 ]
  %.lcssa20 = phi ptr [ %817, %837 ]
  %849 = add nsw i32 %733, -1
  %850 = icmp ne i32 %849, 0
  %851 = icmp sgt i32 %.lcssa28, 0
  %852 = select i1 %850, i1 %851, i1 false
  br i1 %852, label %724, label %853, !llvm.loop !420

853:                                              ; preds = %848, %821, %501
  %854 = phi i32 [ %.lcssa39, %501 ], [ %781, %821 ], [ %.lcssa28, %848 ]
  %855 = phi ptr [ %.lcssa38, %501 ], [ %780, %821 ], [ %.lcssa26, %848 ]
  %856 = phi i32 [ %.lcssa36, %501 ], [ %813, %821 ], [ %.lcssa27, %848 ]
  %857 = getelementptr inbounds [18 x double], ptr %0, i64 32
  %858 = ptrtoint ptr %857 to i64
  %859 = ptrtoint ptr %855 to i64
  %860 = sub i64 %858, %859
  %861 = and i64 %860, 68719476720
  %862 = icmp eq i64 %861, 0
  br i1 %862, label %865, label %863

863:                                              ; preds = %853
  %864 = and i64 %860, 68719476720
  tail call void @llvm.memset.p0.i64(ptr align 8 %855, i8 0, i64 %864, i1 false), !tbaa !39
  br label %865

865:                                              ; preds = %863, %853
  %866 = add nsw i32 %856, 1
  %867 = getelementptr inbounds %struct.gr_info_s, ptr %2, i64 0, i32 9
  store i32 %866, ptr %867, align 4, !tbaa !377
  %868 = zext i32 %866 to i64
  %869 = getelementptr inbounds [9 x [23 x i32]], ptr @longLimit, i64 0, i64 %39, i64 %868
  %870 = load i32, ptr %869, align 4, !tbaa !11
  %871 = getelementptr inbounds %struct.gr_info_s, ptr %2, i64 0, i32 10
  store i32 %870, ptr %871, align 8, !tbaa !383
  br label %872

872:                                              ; preds = %865, %473
  %873 = phi i32 [ %297, %473 ], [ %854, %865 ]
  %874 = icmp sgt i32 %873, 16
  br i1 %874, label %875, label %880

875:                                              ; preds = %875, %872
  %876 = phi i32 [ %878, %875 ], [ %873, %872 ]
  %877 = tail call i32 @getbits(i32 noundef 16) #55
  %878 = add nsw i32 %876, -16
  %879 = icmp ugt i32 %876, 32
  br i1 %879, label %875, label %882, !llvm.loop !421

880:                                              ; preds = %872
  %881 = icmp sgt i32 %873, 0
  br i1 %881, label %882, label %885

882:                                              ; preds = %880, %875
  %883 = phi i32 [ %873, %880 ], [ %878, %875 ]
  %884 = tail call i32 @getbits(i32 noundef %883) #55
  br label %891

885:                                              ; preds = %880
  %886 = icmp slt i32 %873, 0
  br i1 %886, label %887, label %891

887:                                              ; preds = %885
  %888 = load ptr, ptr @stderr, align 8, !tbaa !7
  %889 = sub nsw i32 0, %873
  %890 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %888, ptr noundef nonnull @.str.2.184, i32 noundef %889) #60
  br label %891

891:                                              ; preds = %887, %885, %882
  %892 = phi i32 [ 1, %887 ], [ 0, %885 ], [ 0, %882 ]
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %6) #56
  ret i32 %892
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memmove.p0.p0.i64(ptr nocapture writeonly, ptr nocapture readonly, i64, i1 immarg) #10

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal fastcc void @dct36(ptr noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef writeonly %2, ptr nocapture noundef readonly %3, ptr nocapture noundef writeonly %4) unnamed_addr #32 {
  %6 = getelementptr inbounds double, ptr %0, i64 16
  %7 = load double, ptr %6, align 8, !tbaa !39
  %8 = getelementptr inbounds double, ptr %0, i64 17
  %9 = load double, ptr %8, align 8, !tbaa !39
  %10 = fadd double %7, %9
  %11 = getelementptr inbounds double, ptr %0, i64 15
  %12 = load double, ptr %11, align 8, !tbaa !39
  %13 = fadd double %7, %12
  store double %13, ptr %6, align 8, !tbaa !39
  %14 = getelementptr inbounds double, ptr %0, i64 14
  %15 = load double, ptr %14, align 8, !tbaa !39
  %16 = fadd double %12, %15
  %17 = getelementptr inbounds double, ptr %0, i64 13
  %18 = load double, ptr %17, align 8, !tbaa !39
  %19 = fadd double %15, %18
  store double %19, ptr %14, align 8, !tbaa !39
  %20 = getelementptr inbounds double, ptr %0, i64 12
  %21 = load double, ptr %20, align 8, !tbaa !39
  %22 = fadd double %18, %21
  %23 = getelementptr inbounds double, ptr %0, i64 11
  %24 = load double, ptr %23, align 8, !tbaa !39
  %25 = fadd double %21, %24
  store double %25, ptr %20, align 8, !tbaa !39
  %26 = getelementptr inbounds double, ptr %0, i64 10
  %27 = load double, ptr %26, align 8, !tbaa !39
  %28 = fadd double %24, %27
  %29 = getelementptr inbounds double, ptr %0, i64 9
  %30 = load double, ptr %29, align 8, !tbaa !39
  %31 = fadd double %27, %30
  store double %31, ptr %26, align 8, !tbaa !39
  %32 = getelementptr inbounds double, ptr %0, i64 8
  %33 = load double, ptr %32, align 8, !tbaa !39
  %34 = fadd double %30, %33
  %35 = getelementptr inbounds double, ptr %0, i64 7
  %36 = load double, ptr %35, align 8, !tbaa !39
  %37 = fadd double %33, %36
  store double %37, ptr %32, align 8, !tbaa !39
  %38 = getelementptr inbounds double, ptr %0, i64 6
  %39 = load double, ptr %38, align 8, !tbaa !39
  %40 = fadd double %36, %39
  %41 = getelementptr inbounds double, ptr %0, i64 5
  %42 = load double, ptr %41, align 8, !tbaa !39
  %43 = fadd double %39, %42
  store double %43, ptr %38, align 8, !tbaa !39
  %44 = getelementptr inbounds double, ptr %0, i64 4
  %45 = load double, ptr %44, align 8, !tbaa !39
  %46 = fadd double %42, %45
  %47 = getelementptr inbounds double, ptr %0, i64 3
  %48 = load double, ptr %47, align 8, !tbaa !39
  %49 = fadd double %45, %48
  store double %49, ptr %44, align 8, !tbaa !39
  %50 = getelementptr inbounds double, ptr %0, i64 2
  %51 = getelementptr inbounds double, ptr %0, i64 1
  %52 = load double, ptr %0, align 8, !tbaa !39
  %53 = load <2 x double>, ptr %51, align 8, !tbaa !39
  %54 = extractelement <2 x double> %53, i64 1
  %55 = fadd double %48, %54
  %56 = insertelement <2 x double> poison, double %52, i64 0
  %57 = shufflevector <2 x double> %56, <2 x double> %53, <2 x i32> <i32 0, i32 2>
  %58 = fadd <2 x double> %53, %57
  store <2 x double> %58, ptr %51, align 8, !tbaa !39
  %59 = fadd double %10, %16
  store double %59, ptr %8, align 8, !tbaa !39
  %60 = fadd double %16, %22
  store double %60, ptr %11, align 8, !tbaa !39
  %61 = fadd double %22, %28
  store double %61, ptr %17, align 8, !tbaa !39
  %62 = fadd double %28, %34
  store double %62, ptr %23, align 8, !tbaa !39
  %63 = fadd double %34, %40
  store double %63, ptr %29, align 8, !tbaa !39
  %64 = fadd double %40, %46
  store double %64, ptr %35, align 8, !tbaa !39
  %65 = fadd double %46, %55
  store double %65, ptr %41, align 8, !tbaa !39
  %66 = extractelement <2 x double> %58, i64 0
  %67 = fadd double %55, %66
  store double %67, ptr %47, align 8, !tbaa !39
  %68 = load double, ptr getelementptr inbounds ([9 x double], ptr @COS9, i64 0, i64 3), align 8, !tbaa !39
  %69 = fmul double %43, %68
  %70 = load double, ptr getelementptr inbounds ([9 x double], ptr @COS9, i64 0, i64 6), align 16, !tbaa !39
  %71 = fmul double %25, %70
  %72 = fmul double %64, %68
  %73 = fmul double %61, %70
  %74 = load double, ptr getelementptr inbounds ([9 x double], ptr @COS9, i64 0, i64 1), align 8, !tbaa !39
  %75 = extractelement <2 x double> %58, i64 1
  %76 = tail call double @llvm.fmuladd.f64(double %75, double %74, double %69)
  %77 = load double, ptr getelementptr inbounds ([9 x double], ptr @COS9, i64 0, i64 5), align 8, !tbaa !39
  %78 = tail call double @llvm.fmuladd.f64(double %31, double %77, double %76)
  %79 = load double, ptr getelementptr inbounds ([9 x double], ptr @COS9, i64 0, i64 7), align 8, !tbaa !39
  %80 = tail call double @llvm.fmuladd.f64(double %19, double %79, double %78)
  %81 = tail call double @llvm.fmuladd.f64(double %67, double %74, double %72)
  %82 = tail call double @llvm.fmuladd.f64(double %62, double %77, double %81)
  %83 = tail call double @llvm.fmuladd.f64(double %60, double %79, double %82)
  %84 = load double, ptr getelementptr inbounds ([9 x double], ptr @COS9, i64 0, i64 2), align 16, !tbaa !39
  %85 = tail call double @llvm.fmuladd.f64(double %49, double %84, double %52)
  %86 = load double, ptr getelementptr inbounds ([9 x double], ptr @COS9, i64 0, i64 4), align 16, !tbaa !39
  %87 = tail call double @llvm.fmuladd.f64(double %37, double %86, double %85)
  %88 = fadd double %71, %87
  %89 = load double, ptr getelementptr inbounds ([9 x double], ptr @COS9, i64 0, i64 8), align 16, !tbaa !39
  %90 = tail call double @llvm.fmuladd.f64(double %13, double %89, double %88)
  %91 = tail call double @llvm.fmuladd.f64(double %65, double %84, double %66)
  %92 = tail call double @llvm.fmuladd.f64(double %63, double %86, double %91)
  %93 = fadd double %73, %92
  %94 = tail call double @llvm.fmuladd.f64(double %59, double %89, double %93)
  %95 = fadd double %80, %90
  %96 = fadd double %83, %94
  %97 = load double, ptr @tfcos36, align 16, !tbaa !39
  %98 = fmul double %97, %96
  %99 = fadd double %95, %98
  %100 = getelementptr inbounds double, ptr %3, i64 27
  %101 = load double, ptr %100, align 8, !tbaa !39
  %102 = fmul double %101, %99
  %103 = getelementptr inbounds double, ptr %2, i64 9
  store double %102, ptr %103, align 8, !tbaa !39
  %104 = getelementptr inbounds double, ptr %3, i64 26
  %105 = load double, ptr %104, align 8, !tbaa !39
  %106 = fmul double %105, %99
  %107 = getelementptr inbounds double, ptr %2, i64 8
  store double %106, ptr %107, align 8, !tbaa !39
  %108 = fsub double %95, %98
  %109 = getelementptr inbounds double, ptr %1, i64 8
  %110 = load double, ptr %109, align 8, !tbaa !39
  %111 = getelementptr inbounds double, ptr %3, i64 8
  %112 = load double, ptr %111, align 8, !tbaa !39
  %113 = tail call double @llvm.fmuladd.f64(double %108, double %112, double %110)
  %114 = getelementptr inbounds double, ptr %4, i64 256
  store double %113, ptr %114, align 8, !tbaa !39
  %115 = getelementptr inbounds double, ptr %1, i64 9
  %116 = load double, ptr %115, align 8, !tbaa !39
  %117 = getelementptr inbounds double, ptr %3, i64 9
  %118 = load double, ptr %117, align 8, !tbaa !39
  %119 = tail call double @llvm.fmuladd.f64(double %108, double %118, double %116)
  %120 = getelementptr inbounds double, ptr %4, i64 288
  store double %119, ptr %120, align 8, !tbaa !39
  %121 = fsub double %90, %80
  %122 = fsub double %94, %83
  %123 = load double, ptr getelementptr inbounds ([9 x double], ptr @tfcos36, i64 0, i64 8), align 16, !tbaa !39
  %124 = fmul double %122, %123
  %125 = fadd double %121, %124
  %126 = getelementptr inbounds double, ptr %3, i64 35
  %127 = load double, ptr %126, align 8, !tbaa !39
  %128 = fmul double %127, %125
  %129 = getelementptr inbounds double, ptr %2, i64 17
  store double %128, ptr %129, align 8, !tbaa !39
  %130 = getelementptr inbounds double, ptr %3, i64 18
  %131 = load double, ptr %130, align 8, !tbaa !39
  %132 = fmul double %125, %131
  store double %132, ptr %2, align 8, !tbaa !39
  %133 = fsub double %121, %124
  %134 = load double, ptr %1, align 8, !tbaa !39
  %135 = load double, ptr %3, align 8, !tbaa !39
  %136 = tail call double @llvm.fmuladd.f64(double %133, double %135, double %134)
  store double %136, ptr %4, align 8, !tbaa !39
  %137 = getelementptr inbounds double, ptr %1, i64 17
  %138 = load double, ptr %137, align 8, !tbaa !39
  %139 = getelementptr inbounds double, ptr %3, i64 17
  %140 = load double, ptr %139, align 8, !tbaa !39
  %141 = tail call double @llvm.fmuladd.f64(double %133, double %140, double %138)
  %142 = getelementptr inbounds double, ptr %4, i64 544
  store double %141, ptr %142, align 8, !tbaa !39
  %143 = load double, ptr %50, align 8, !tbaa !39
  %144 = load double, ptr %26, align 8, !tbaa !39
  %145 = fsub double %143, %144
  %146 = load double, ptr %14, align 8, !tbaa !39
  %147 = fsub double %145, %146
  %148 = fmul double %68, %147
  %149 = load double, ptr %47, align 8, !tbaa !39
  %150 = load double, ptr %23, align 8, !tbaa !39
  %151 = fsub double %149, %150
  %152 = load double, ptr %11, align 8, !tbaa !39
  %153 = fsub double %151, %152
  %154 = fmul double %68, %153
  %155 = load double, ptr %44, align 8, !tbaa !39
  %156 = load double, ptr %32, align 8, !tbaa !39
  %157 = fsub double %155, %156
  %158 = load double, ptr %6, align 8, !tbaa !39
  %159 = fsub double %157, %158
  %160 = load double, ptr %20, align 8, !tbaa !39
  %161 = fneg double %160
  %162 = tail call double @llvm.fmuladd.f64(double %159, double %70, double %161)
  %163 = load double, ptr %0, align 8, !tbaa !39
  %164 = fadd double %162, %163
  %165 = load double, ptr %41, align 8, !tbaa !39
  %166 = load double, ptr %29, align 8, !tbaa !39
  %167 = fsub double %165, %166
  %168 = load double, ptr %8, align 8, !tbaa !39
  %169 = fsub double %167, %168
  %170 = load double, ptr %17, align 8, !tbaa !39
  %171 = fneg double %170
  %172 = tail call double @llvm.fmuladd.f64(double %169, double %70, double %171)
  %173 = load double, ptr %51, align 8, !tbaa !39
  %174 = fadd double %172, %173
  %175 = fadd double %148, %164
  %176 = fadd double %154, %174
  %177 = load double, ptr getelementptr inbounds ([9 x double], ptr @tfcos36, i64 0, i64 1), align 8, !tbaa !39
  %178 = fmul double %177, %176
  %179 = fadd double %175, %178
  %180 = getelementptr inbounds double, ptr %3, i64 28
  %181 = load double, ptr %180, align 8, !tbaa !39
  %182 = fmul double %181, %179
  %183 = getelementptr inbounds double, ptr %2, i64 10
  store double %182, ptr %183, align 8, !tbaa !39
  %184 = getelementptr inbounds double, ptr %3, i64 25
  %185 = load double, ptr %184, align 8, !tbaa !39
  %186 = fmul double %179, %185
  %187 = getelementptr inbounds double, ptr %2, i64 7
  store double %186, ptr %187, align 8, !tbaa !39
  %188 = fsub double %175, %178
  %189 = getelementptr inbounds double, ptr %1, i64 7
  %190 = load double, ptr %189, align 8, !tbaa !39
  %191 = getelementptr inbounds double, ptr %3, i64 7
  %192 = load double, ptr %191, align 8, !tbaa !39
  %193 = tail call double @llvm.fmuladd.f64(double %188, double %192, double %190)
  %194 = getelementptr inbounds double, ptr %4, i64 224
  store double %193, ptr %194, align 8, !tbaa !39
  %195 = getelementptr inbounds double, ptr %1, i64 10
  %196 = load double, ptr %195, align 8, !tbaa !39
  %197 = getelementptr inbounds double, ptr %3, i64 10
  %198 = load double, ptr %197, align 8, !tbaa !39
  %199 = tail call double @llvm.fmuladd.f64(double %188, double %198, double %196)
  %200 = getelementptr inbounds double, ptr %4, i64 320
  store double %199, ptr %200, align 8, !tbaa !39
  %201 = fsub double %164, %148
  %202 = fsub double %174, %154
  %203 = load double, ptr getelementptr inbounds ([9 x double], ptr @tfcos36, i64 0, i64 7), align 8, !tbaa !39
  %204 = fmul double %202, %203
  %205 = fadd double %201, %204
  %206 = getelementptr inbounds double, ptr %3, i64 34
  %207 = load double, ptr %206, align 8, !tbaa !39
  %208 = fmul double %207, %205
  %209 = getelementptr inbounds double, ptr %2, i64 16
  store double %208, ptr %209, align 8, !tbaa !39
  %210 = getelementptr inbounds double, ptr %3, i64 19
  %211 = load double, ptr %210, align 8, !tbaa !39
  %212 = fmul double %205, %211
  %213 = getelementptr inbounds double, ptr %2, i64 1
  store double %212, ptr %213, align 8, !tbaa !39
  %214 = fsub double %201, %204
  %215 = getelementptr inbounds double, ptr %1, i64 1
  %216 = load double, ptr %215, align 8, !tbaa !39
  %217 = getelementptr inbounds double, ptr %3, i64 1
  %218 = load double, ptr %217, align 8, !tbaa !39
  %219 = tail call double @llvm.fmuladd.f64(double %214, double %218, double %216)
  %220 = getelementptr inbounds double, ptr %4, i64 32
  store double %219, ptr %220, align 8, !tbaa !39
  %221 = getelementptr inbounds double, ptr %1, i64 16
  %222 = load double, ptr %221, align 8, !tbaa !39
  %223 = getelementptr inbounds double, ptr %3, i64 16
  %224 = load double, ptr %223, align 8, !tbaa !39
  %225 = tail call double @llvm.fmuladd.f64(double %214, double %224, double %222)
  %226 = getelementptr inbounds double, ptr %4, i64 512
  store double %225, ptr %226, align 8, !tbaa !39
  %227 = load double, ptr %50, align 8, !tbaa !39
  %228 = fneg double %69
  %229 = tail call double @llvm.fmuladd.f64(double %227, double %77, double %228)
  %230 = load double, ptr %26, align 8, !tbaa !39
  %231 = fneg double %230
  %232 = tail call double @llvm.fmuladd.f64(double %231, double %79, double %229)
  %233 = load double, ptr %14, align 8, !tbaa !39
  %234 = tail call double @llvm.fmuladd.f64(double %233, double %74, double %232)
  %235 = load double, ptr %47, align 8, !tbaa !39
  %236 = fneg double %72
  %237 = tail call double @llvm.fmuladd.f64(double %235, double %77, double %236)
  %238 = load double, ptr %23, align 8, !tbaa !39
  %239 = fneg double %238
  %240 = tail call double @llvm.fmuladd.f64(double %239, double %79, double %237)
  %241 = load double, ptr %11, align 8, !tbaa !39
  %242 = tail call double @llvm.fmuladd.f64(double %241, double %74, double %240)
  %243 = load double, ptr %0, align 8, !tbaa !39
  %244 = load double, ptr %44, align 8, !tbaa !39
  %245 = fneg double %244
  %246 = tail call double @llvm.fmuladd.f64(double %245, double %89, double %243)
  %247 = load double, ptr %32, align 8, !tbaa !39
  %248 = fneg double %247
  %249 = tail call double @llvm.fmuladd.f64(double %248, double %84, double %246)
  %250 = fadd double %71, %249
  %251 = load double, ptr %6, align 8, !tbaa !39
  %252 = tail call double @llvm.fmuladd.f64(double %251, double %86, double %250)
  %253 = load double, ptr %51, align 8, !tbaa !39
  %254 = load double, ptr %41, align 8, !tbaa !39
  %255 = fneg double %254
  %256 = tail call double @llvm.fmuladd.f64(double %255, double %89, double %253)
  %257 = load double, ptr %29, align 8, !tbaa !39
  %258 = fneg double %257
  %259 = tail call double @llvm.fmuladd.f64(double %258, double %84, double %256)
  %260 = fadd double %73, %259
  %261 = load double, ptr %8, align 8, !tbaa !39
  %262 = tail call double @llvm.fmuladd.f64(double %261, double %86, double %260)
  %263 = fadd double %234, %252
  %264 = fadd double %242, %262
  %265 = load double, ptr getelementptr inbounds ([9 x double], ptr @tfcos36, i64 0, i64 2), align 16, !tbaa !39
  %266 = fmul double %265, %264
  %267 = fadd double %263, %266
  %268 = getelementptr inbounds double, ptr %3, i64 29
  %269 = load double, ptr %268, align 8, !tbaa !39
  %270 = fmul double %269, %267
  %271 = getelementptr inbounds double, ptr %2, i64 11
  store double %270, ptr %271, align 8, !tbaa !39
  %272 = getelementptr inbounds double, ptr %3, i64 24
  %273 = load double, ptr %272, align 8, !tbaa !39
  %274 = fmul double %273, %267
  %275 = getelementptr inbounds double, ptr %2, i64 6
  store double %274, ptr %275, align 8, !tbaa !39
  %276 = fsub double %263, %266
  %277 = getelementptr inbounds double, ptr %1, i64 6
  %278 = load double, ptr %277, align 8, !tbaa !39
  %279 = getelementptr inbounds double, ptr %3, i64 6
  %280 = load double, ptr %279, align 8, !tbaa !39
  %281 = tail call double @llvm.fmuladd.f64(double %276, double %280, double %278)
  %282 = getelementptr inbounds double, ptr %4, i64 192
  store double %281, ptr %282, align 8, !tbaa !39
  %283 = getelementptr inbounds double, ptr %1, i64 11
  %284 = load double, ptr %283, align 8, !tbaa !39
  %285 = getelementptr inbounds double, ptr %3, i64 11
  %286 = load double, ptr %285, align 8, !tbaa !39
  %287 = tail call double @llvm.fmuladd.f64(double %276, double %286, double %284)
  %288 = getelementptr inbounds double, ptr %4, i64 352
  store double %287, ptr %288, align 8, !tbaa !39
  %289 = fsub double %252, %234
  %290 = fsub double %262, %242
  %291 = load double, ptr getelementptr inbounds ([9 x double], ptr @tfcos36, i64 0, i64 6), align 16, !tbaa !39
  %292 = fmul double %290, %291
  %293 = fadd double %289, %292
  %294 = getelementptr inbounds double, ptr %3, i64 33
  %295 = load double, ptr %294, align 8, !tbaa !39
  %296 = fmul double %295, %293
  %297 = getelementptr inbounds double, ptr %2, i64 15
  store double %296, ptr %297, align 8, !tbaa !39
  %298 = getelementptr inbounds double, ptr %3, i64 20
  %299 = load double, ptr %298, align 8, !tbaa !39
  %300 = fmul double %293, %299
  %301 = getelementptr inbounds double, ptr %2, i64 2
  store double %300, ptr %301, align 8, !tbaa !39
  %302 = fsub double %289, %292
  %303 = getelementptr inbounds double, ptr %1, i64 2
  %304 = load double, ptr %303, align 8, !tbaa !39
  %305 = getelementptr inbounds double, ptr %3, i64 2
  %306 = load double, ptr %305, align 8, !tbaa !39
  %307 = tail call double @llvm.fmuladd.f64(double %302, double %306, double %304)
  %308 = getelementptr inbounds double, ptr %4, i64 64
  store double %307, ptr %308, align 8, !tbaa !39
  %309 = getelementptr inbounds double, ptr %1, i64 15
  %310 = load double, ptr %309, align 8, !tbaa !39
  %311 = getelementptr inbounds double, ptr %3, i64 15
  %312 = load double, ptr %311, align 8, !tbaa !39
  %313 = tail call double @llvm.fmuladd.f64(double %302, double %312, double %310)
  %314 = getelementptr inbounds double, ptr %4, i64 480
  store double %313, ptr %314, align 8, !tbaa !39
  %315 = load double, ptr %50, align 8, !tbaa !39
  %316 = tail call double @llvm.fmuladd.f64(double %315, double %79, double %228)
  %317 = load double, ptr %26, align 8, !tbaa !39
  %318 = tail call double @llvm.fmuladd.f64(double %317, double %74, double %316)
  %319 = load double, ptr %14, align 8, !tbaa !39
  %320 = fneg double %319
  %321 = tail call double @llvm.fmuladd.f64(double %320, double %77, double %318)
  %322 = load double, ptr %47, align 8, !tbaa !39
  %323 = tail call double @llvm.fmuladd.f64(double %322, double %79, double %236)
  %324 = load double, ptr %23, align 8, !tbaa !39
  %325 = tail call double @llvm.fmuladd.f64(double %324, double %74, double %323)
  %326 = load double, ptr %11, align 8, !tbaa !39
  %327 = fneg double %326
  %328 = tail call double @llvm.fmuladd.f64(double %327, double %77, double %325)
  %329 = load double, ptr %0, align 8, !tbaa !39
  %330 = load double, ptr %44, align 8, !tbaa !39
  %331 = fneg double %330
  %332 = tail call double @llvm.fmuladd.f64(double %331, double %86, double %329)
  %333 = load double, ptr %32, align 8, !tbaa !39
  %334 = tail call double @llvm.fmuladd.f64(double %333, double %89, double %332)
  %335 = fadd double %71, %334
  %336 = load double, ptr %6, align 8, !tbaa !39
  %337 = fneg double %336
  %338 = tail call double @llvm.fmuladd.f64(double %337, double %84, double %335)
  %339 = load double, ptr %51, align 8, !tbaa !39
  %340 = load double, ptr %41, align 8, !tbaa !39
  %341 = fneg double %340
  %342 = tail call double @llvm.fmuladd.f64(double %341, double %86, double %339)
  %343 = load double, ptr %29, align 8, !tbaa !39
  %344 = tail call double @llvm.fmuladd.f64(double %343, double %89, double %342)
  %345 = fadd double %73, %344
  %346 = load double, ptr %8, align 8, !tbaa !39
  %347 = fneg double %346
  %348 = tail call double @llvm.fmuladd.f64(double %347, double %84, double %345)
  %349 = fadd double %321, %338
  %350 = fadd double %328, %348
  %351 = load double, ptr getelementptr inbounds ([9 x double], ptr @tfcos36, i64 0, i64 3), align 8, !tbaa !39
  %352 = fmul double %351, %350
  %353 = fadd double %349, %352
  %354 = getelementptr inbounds double, ptr %3, i64 30
  %355 = load double, ptr %354, align 8, !tbaa !39
  %356 = fmul double %355, %353
  %357 = getelementptr inbounds double, ptr %2, i64 12
  store double %356, ptr %357, align 8, !tbaa !39
  %358 = getelementptr inbounds double, ptr %3, i64 23
  %359 = load double, ptr %358, align 8, !tbaa !39
  %360 = fmul double %359, %353
  %361 = getelementptr inbounds double, ptr %2, i64 5
  store double %360, ptr %361, align 8, !tbaa !39
  %362 = fsub double %349, %352
  %363 = getelementptr inbounds double, ptr %1, i64 5
  %364 = load double, ptr %363, align 8, !tbaa !39
  %365 = getelementptr inbounds double, ptr %3, i64 5
  %366 = load double, ptr %365, align 8, !tbaa !39
  %367 = tail call double @llvm.fmuladd.f64(double %362, double %366, double %364)
  %368 = getelementptr inbounds double, ptr %4, i64 160
  store double %367, ptr %368, align 8, !tbaa !39
  %369 = getelementptr inbounds double, ptr %1, i64 12
  %370 = load double, ptr %369, align 8, !tbaa !39
  %371 = getelementptr inbounds double, ptr %3, i64 12
  %372 = load double, ptr %371, align 8, !tbaa !39
  %373 = tail call double @llvm.fmuladd.f64(double %362, double %372, double %370)
  %374 = getelementptr inbounds double, ptr %4, i64 384
  store double %373, ptr %374, align 8, !tbaa !39
  %375 = fsub double %338, %321
  %376 = fsub double %348, %328
  %377 = load double, ptr getelementptr inbounds ([9 x double], ptr @tfcos36, i64 0, i64 5), align 8, !tbaa !39
  %378 = fmul double %376, %377
  %379 = fadd double %375, %378
  %380 = getelementptr inbounds double, ptr %3, i64 32
  %381 = load double, ptr %380, align 8, !tbaa !39
  %382 = fmul double %381, %379
  %383 = getelementptr inbounds double, ptr %2, i64 14
  store double %382, ptr %383, align 8, !tbaa !39
  %384 = getelementptr inbounds double, ptr %3, i64 21
  %385 = load double, ptr %384, align 8, !tbaa !39
  %386 = fmul double %379, %385
  %387 = getelementptr inbounds double, ptr %2, i64 3
  store double %386, ptr %387, align 8, !tbaa !39
  %388 = fsub double %375, %378
  %389 = getelementptr inbounds double, ptr %1, i64 3
  %390 = load double, ptr %389, align 8, !tbaa !39
  %391 = getelementptr inbounds double, ptr %3, i64 3
  %392 = load double, ptr %391, align 8, !tbaa !39
  %393 = tail call double @llvm.fmuladd.f64(double %388, double %392, double %390)
  %394 = getelementptr inbounds double, ptr %4, i64 96
  store double %393, ptr %394, align 8, !tbaa !39
  %395 = getelementptr inbounds double, ptr %1, i64 14
  %396 = load double, ptr %395, align 8, !tbaa !39
  %397 = getelementptr inbounds double, ptr %3, i64 14
  %398 = load double, ptr %397, align 8, !tbaa !39
  %399 = tail call double @llvm.fmuladd.f64(double %388, double %398, double %396)
  %400 = getelementptr inbounds double, ptr %4, i64 448
  store double %399, ptr %400, align 8, !tbaa !39
  %401 = load double, ptr %0, align 8, !tbaa !39
  %402 = load double, ptr %44, align 8, !tbaa !39
  %403 = fsub double %401, %402
  %404 = load double, ptr %32, align 8, !tbaa !39
  %405 = fadd double %403, %404
  %406 = load double, ptr %20, align 8, !tbaa !39
  %407 = fsub double %405, %406
  %408 = load double, ptr %6, align 8, !tbaa !39
  %409 = fadd double %407, %408
  %410 = load double, ptr %51, align 8, !tbaa !39
  %411 = load double, ptr %41, align 8, !tbaa !39
  %412 = fsub double %410, %411
  %413 = load double, ptr %29, align 8, !tbaa !39
  %414 = fadd double %412, %413
  %415 = load double, ptr %17, align 8, !tbaa !39
  %416 = fsub double %414, %415
  %417 = load double, ptr %8, align 8, !tbaa !39
  %418 = fadd double %416, %417
  %419 = load double, ptr getelementptr inbounds ([9 x double], ptr @tfcos36, i64 0, i64 4), align 16, !tbaa !39
  %420 = fmul double %418, %419
  %421 = fadd double %409, %420
  %422 = getelementptr inbounds double, ptr %3, i64 31
  %423 = load double, ptr %422, align 8, !tbaa !39
  %424 = fmul double %423, %421
  %425 = getelementptr inbounds double, ptr %2, i64 13
  store double %424, ptr %425, align 8, !tbaa !39
  %426 = getelementptr inbounds double, ptr %3, i64 22
  %427 = load double, ptr %426, align 8, !tbaa !39
  %428 = fmul double %421, %427
  %429 = getelementptr inbounds double, ptr %2, i64 4
  store double %428, ptr %429, align 8, !tbaa !39
  %430 = fsub double %409, %420
  %431 = getelementptr inbounds double, ptr %1, i64 4
  %432 = load double, ptr %431, align 8, !tbaa !39
  %433 = getelementptr inbounds double, ptr %3, i64 4
  %434 = load double, ptr %433, align 8, !tbaa !39
  %435 = tail call double @llvm.fmuladd.f64(double %430, double %434, double %432)
  %436 = getelementptr inbounds double, ptr %4, i64 128
  store double %435, ptr %436, align 8, !tbaa !39
  %437 = getelementptr inbounds double, ptr %1, i64 13
  %438 = load double, ptr %437, align 8, !tbaa !39
  %439 = getelementptr inbounds double, ptr %3, i64 13
  %440 = load double, ptr %439, align 8, !tbaa !39
  %441 = tail call double @llvm.fmuladd.f64(double %430, double %440, double %438)
  %442 = getelementptr inbounds double, ptr %4, i64 416
  store double %441, ptr %442, align 8, !tbaa !39
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal fastcc void @dct12(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef %2, ptr nocapture noundef readonly %3, ptr nocapture noundef %4) unnamed_addr #32 {
  %6 = load double, ptr %1, align 8, !tbaa !39
  store double %6, ptr %4, align 8, !tbaa !39
  %7 = getelementptr inbounds double, ptr %1, i64 1
  %8 = load double, ptr %7, align 8, !tbaa !39
  %9 = getelementptr inbounds double, ptr %4, i64 32
  store double %8, ptr %9, align 8, !tbaa !39
  %10 = getelementptr inbounds double, ptr %1, i64 2
  %11 = load double, ptr %10, align 8, !tbaa !39
  %12 = getelementptr inbounds double, ptr %4, i64 64
  store double %11, ptr %12, align 8, !tbaa !39
  %13 = getelementptr inbounds double, ptr %1, i64 3
  %14 = load double, ptr %13, align 8, !tbaa !39
  %15 = getelementptr inbounds double, ptr %4, i64 96
  store double %14, ptr %15, align 8, !tbaa !39
  %16 = getelementptr inbounds double, ptr %1, i64 4
  %17 = load double, ptr %16, align 8, !tbaa !39
  %18 = getelementptr inbounds double, ptr %4, i64 128
  store double %17, ptr %18, align 8, !tbaa !39
  %19 = getelementptr inbounds double, ptr %1, i64 5
  %20 = load double, ptr %19, align 8, !tbaa !39
  %21 = getelementptr inbounds double, ptr %4, i64 160
  store double %20, ptr %21, align 8, !tbaa !39
  %22 = getelementptr inbounds double, ptr %0, i64 15
  %23 = load double, ptr %22, align 8, !tbaa !39
  %24 = getelementptr inbounds double, ptr %0, i64 12
  %25 = load double, ptr %24, align 8, !tbaa !39
  %26 = fadd double %23, %25
  %27 = getelementptr inbounds double, ptr %0, i64 9
  %28 = load double, ptr %27, align 8, !tbaa !39
  %29 = fadd double %25, %28
  %30 = getelementptr inbounds double, ptr %0, i64 6
  %31 = load double, ptr %30, align 8, !tbaa !39
  %32 = fadd double %28, %31
  %33 = getelementptr inbounds double, ptr %0, i64 3
  %34 = load double, ptr %33, align 8, !tbaa !39
  %35 = fadd double %31, %34
  %36 = load double, ptr %0, align 8, !tbaa !39
  %37 = fadd double %34, %36
  %38 = fadd double %26, %32
  %39 = fadd double %32, %37
  %40 = load double, ptr @COS6_1, align 8, !tbaa !39
  %41 = fmul double %35, %40
  %42 = fmul double %40, %39
  %43 = fsub double %36, %29
  %44 = fsub double %37, %38
  %45 = load double, ptr getelementptr inbounds ([3 x double], ptr @tfcos12, i64 0, i64 1), align 8, !tbaa !39
  %46 = fmul double %44, %45
  %47 = fadd double %43, %46
  %48 = fsub double %43, %46
  %49 = getelementptr inbounds double, ptr %1, i64 16
  %50 = load double, ptr %49, align 8, !tbaa !39
  %51 = getelementptr inbounds double, ptr %3, i64 10
  %52 = load double, ptr %51, align 8, !tbaa !39
  %53 = tail call double @llvm.fmuladd.f64(double %47, double %52, double %50)
  %54 = getelementptr inbounds double, ptr %4, i64 512
  store double %53, ptr %54, align 8, !tbaa !39
  %55 = getelementptr inbounds double, ptr %1, i64 13
  %56 = load double, ptr %55, align 8, !tbaa !39
  %57 = getelementptr inbounds double, ptr %3, i64 7
  %58 = load double, ptr %57, align 8, !tbaa !39
  %59 = tail call double @llvm.fmuladd.f64(double %47, double %58, double %56)
  %60 = getelementptr inbounds double, ptr %4, i64 416
  store double %59, ptr %60, align 8, !tbaa !39
  %61 = getelementptr inbounds double, ptr %1, i64 7
  %62 = load double, ptr %61, align 8, !tbaa !39
  %63 = getelementptr inbounds double, ptr %3, i64 1
  %64 = load double, ptr %63, align 8, !tbaa !39
  %65 = tail call double @llvm.fmuladd.f64(double %48, double %64, double %62)
  %66 = getelementptr inbounds double, ptr %4, i64 224
  store double %65, ptr %66, align 8, !tbaa !39
  %67 = getelementptr inbounds double, ptr %1, i64 10
  %68 = load double, ptr %67, align 8, !tbaa !39
  %69 = getelementptr inbounds double, ptr %3, i64 4
  %70 = load double, ptr %69, align 8, !tbaa !39
  %71 = tail call double @llvm.fmuladd.f64(double %48, double %70, double %68)
  %72 = getelementptr inbounds double, ptr %4, i64 320
  store double %71, ptr %72, align 8, !tbaa !39
  %73 = load double, ptr @COS6_2, align 8, !tbaa !39
  %74 = tail call double @llvm.fmuladd.f64(double %29, double %73, double %36)
  %75 = fadd double %41, %74
  %76 = fsub double %74, %41
  %77 = tail call double @llvm.fmuladd.f64(double %38, double %73, double %37)
  %78 = fadd double %42, %77
  %79 = load double, ptr @tfcos12, align 16, !tbaa !39
  %80 = fmul double %79, %78
  %81 = fsub double %77, %42
  %82 = load double, ptr getelementptr inbounds ([3 x double], ptr @tfcos12, i64 0, i64 2), align 16, !tbaa !39
  %83 = fmul double %81, %82
  %84 = fadd double %75, %80
  %85 = fsub double %75, %80
  %86 = fadd double %76, %83
  %87 = fsub double %76, %83
  %88 = getelementptr inbounds double, ptr %1, i64 17
  %89 = load double, ptr %88, align 8, !tbaa !39
  %90 = getelementptr inbounds double, ptr %3, i64 11
  %91 = load double, ptr %90, align 8, !tbaa !39
  %92 = tail call double @llvm.fmuladd.f64(double %86, double %91, double %89)
  %93 = getelementptr inbounds double, ptr %4, i64 544
  store double %92, ptr %93, align 8, !tbaa !39
  %94 = getelementptr inbounds double, ptr %1, i64 12
  %95 = load double, ptr %94, align 8, !tbaa !39
  %96 = getelementptr inbounds double, ptr %3, i64 6
  %97 = load double, ptr %96, align 8, !tbaa !39
  %98 = tail call double @llvm.fmuladd.f64(double %86, double %97, double %95)
  %99 = getelementptr inbounds double, ptr %4, i64 384
  store double %98, ptr %99, align 8, !tbaa !39
  %100 = getelementptr inbounds double, ptr %1, i64 14
  %101 = load double, ptr %100, align 8, !tbaa !39
  %102 = getelementptr inbounds double, ptr %3, i64 8
  %103 = load double, ptr %102, align 8, !tbaa !39
  %104 = tail call double @llvm.fmuladd.f64(double %84, double %103, double %101)
  %105 = getelementptr inbounds double, ptr %4, i64 448
  store double %104, ptr %105, align 8, !tbaa !39
  %106 = getelementptr inbounds double, ptr %1, i64 15
  %107 = load double, ptr %106, align 8, !tbaa !39
  %108 = getelementptr inbounds double, ptr %3, i64 9
  %109 = load double, ptr %108, align 8, !tbaa !39
  %110 = tail call double @llvm.fmuladd.f64(double %84, double %109, double %107)
  %111 = getelementptr inbounds double, ptr %4, i64 480
  store double %110, ptr %111, align 8, !tbaa !39
  %112 = getelementptr inbounds double, ptr %1, i64 6
  %113 = load double, ptr %112, align 8, !tbaa !39
  %114 = load double, ptr %3, align 8, !tbaa !39
  %115 = tail call double @llvm.fmuladd.f64(double %87, double %114, double %113)
  %116 = getelementptr inbounds double, ptr %4, i64 192
  store double %115, ptr %116, align 8, !tbaa !39
  %117 = getelementptr inbounds double, ptr %1, i64 11
  %118 = load double, ptr %117, align 8, !tbaa !39
  %119 = getelementptr inbounds double, ptr %3, i64 5
  %120 = load double, ptr %119, align 8, !tbaa !39
  %121 = tail call double @llvm.fmuladd.f64(double %87, double %120, double %118)
  %122 = getelementptr inbounds double, ptr %4, i64 352
  store double %121, ptr %122, align 8, !tbaa !39
  %123 = getelementptr inbounds double, ptr %1, i64 8
  %124 = load double, ptr %123, align 8, !tbaa !39
  %125 = getelementptr inbounds double, ptr %3, i64 2
  %126 = load double, ptr %125, align 8, !tbaa !39
  %127 = tail call double @llvm.fmuladd.f64(double %85, double %126, double %124)
  %128 = getelementptr inbounds double, ptr %4, i64 256
  store double %127, ptr %128, align 8, !tbaa !39
  %129 = getelementptr inbounds double, ptr %1, i64 9
  %130 = load double, ptr %129, align 8, !tbaa !39
  %131 = getelementptr inbounds double, ptr %3, i64 3
  %132 = load double, ptr %131, align 8, !tbaa !39
  %133 = tail call double @llvm.fmuladd.f64(double %85, double %132, double %130)
  %134 = getelementptr inbounds double, ptr %4, i64 288
  store double %133, ptr %134, align 8, !tbaa !39
  %135 = getelementptr inbounds double, ptr %0, i64 1
  %136 = getelementptr inbounds double, ptr %0, i64 16
  %137 = load double, ptr %136, align 8, !tbaa !39
  %138 = getelementptr inbounds double, ptr %0, i64 13
  %139 = load double, ptr %138, align 8, !tbaa !39
  %140 = fadd double %137, %139
  %141 = getelementptr inbounds double, ptr %0, i64 10
  %142 = load double, ptr %141, align 8, !tbaa !39
  %143 = fadd double %139, %142
  %144 = getelementptr inbounds double, ptr %0, i64 7
  %145 = load double, ptr %144, align 8, !tbaa !39
  %146 = fadd double %142, %145
  %147 = getelementptr inbounds double, ptr %0, i64 4
  %148 = load double, ptr %147, align 8, !tbaa !39
  %149 = fadd double %145, %148
  %150 = load double, ptr %135, align 8, !tbaa !39
  %151 = fadd double %148, %150
  %152 = fadd double %140, %146
  %153 = fadd double %146, %151
  %154 = fmul double %40, %149
  %155 = fmul double %40, %153
  %156 = fsub double %150, %143
  %157 = fsub double %151, %152
  %158 = fmul double %45, %157
  %159 = fadd double %156, %158
  %160 = fsub double %156, %158
  %161 = load double, ptr %51, align 8, !tbaa !39
  %162 = fmul double %161, %159
  %163 = getelementptr inbounds double, ptr %2, i64 4
  store double %162, ptr %163, align 8, !tbaa !39
  %164 = load double, ptr %57, align 8, !tbaa !39
  %165 = fmul double %164, %159
  %166 = getelementptr inbounds double, ptr %2, i64 1
  store double %165, ptr %166, align 8, !tbaa !39
  %167 = load double, ptr %63, align 8, !tbaa !39
  %168 = load double, ptr %60, align 8, !tbaa !39
  %169 = tail call double @llvm.fmuladd.f64(double %160, double %167, double %168)
  store double %169, ptr %60, align 8, !tbaa !39
  %170 = load double, ptr %69, align 8, !tbaa !39
  %171 = load double, ptr %54, align 8, !tbaa !39
  %172 = tail call double @llvm.fmuladd.f64(double %160, double %170, double %171)
  store double %172, ptr %54, align 8, !tbaa !39
  %173 = tail call double @llvm.fmuladd.f64(double %143, double %73, double %150)
  %174 = fadd double %173, %154
  %175 = fsub double %173, %154
  %176 = tail call double @llvm.fmuladd.f64(double %152, double %73, double %151)
  %177 = fadd double %176, %155
  %178 = fmul double %79, %177
  %179 = fsub double %176, %155
  %180 = fmul double %82, %179
  %181 = fadd double %174, %178
  %182 = fsub double %174, %178
  %183 = fadd double %175, %180
  %184 = fsub double %175, %180
  %185 = load double, ptr %90, align 8, !tbaa !39
  %186 = fmul double %183, %185
  %187 = getelementptr inbounds double, ptr %2, i64 5
  store double %186, ptr %187, align 8, !tbaa !39
  %188 = load double, ptr %96, align 8, !tbaa !39
  %189 = fmul double %183, %188
  store double %189, ptr %2, align 8, !tbaa !39
  %190 = load double, ptr %102, align 8, !tbaa !39
  %191 = fmul double %181, %190
  %192 = getelementptr inbounds double, ptr %2, i64 2
  store double %191, ptr %192, align 8, !tbaa !39
  %193 = load double, ptr %108, align 8, !tbaa !39
  %194 = fmul double %181, %193
  %195 = getelementptr inbounds double, ptr %2, i64 3
  store double %194, ptr %195, align 8, !tbaa !39
  %196 = load double, ptr %3, align 8, !tbaa !39
  %197 = load double, ptr %99, align 8, !tbaa !39
  %198 = tail call double @llvm.fmuladd.f64(double %184, double %196, double %197)
  store double %198, ptr %99, align 8, !tbaa !39
  %199 = load double, ptr %119, align 8, !tbaa !39
  %200 = load double, ptr %93, align 8, !tbaa !39
  %201 = tail call double @llvm.fmuladd.f64(double %184, double %199, double %200)
  store double %201, ptr %93, align 8, !tbaa !39
  %202 = load double, ptr %125, align 8, !tbaa !39
  %203 = load double, ptr %105, align 8, !tbaa !39
  %204 = tail call double @llvm.fmuladd.f64(double %182, double %202, double %203)
  store double %204, ptr %105, align 8, !tbaa !39
  %205 = load double, ptr %131, align 8, !tbaa !39
  %206 = load double, ptr %111, align 8, !tbaa !39
  %207 = tail call double @llvm.fmuladd.f64(double %182, double %205, double %206)
  store double %207, ptr %111, align 8, !tbaa !39
  %208 = getelementptr inbounds double, ptr %0, i64 2
  %209 = getelementptr inbounds double, ptr %2, i64 12
  %210 = getelementptr inbounds double, ptr %0, i64 17
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(48) %209, i8 0, i64 48, i1 false)
  %211 = load double, ptr %210, align 8, !tbaa !39
  %212 = getelementptr inbounds double, ptr %0, i64 14
  %213 = load double, ptr %212, align 8, !tbaa !39
  %214 = fadd double %211, %213
  %215 = getelementptr inbounds double, ptr %0, i64 11
  %216 = load double, ptr %215, align 8, !tbaa !39
  %217 = fadd double %213, %216
  %218 = getelementptr inbounds double, ptr %0, i64 8
  %219 = load double, ptr %218, align 8, !tbaa !39
  %220 = fadd double %216, %219
  %221 = getelementptr inbounds double, ptr %0, i64 5
  %222 = load double, ptr %221, align 8, !tbaa !39
  %223 = fadd double %219, %222
  %224 = load double, ptr %208, align 8, !tbaa !39
  %225 = fadd double %222, %224
  %226 = fadd double %214, %220
  %227 = fadd double %220, %225
  %228 = fmul double %40, %223
  %229 = fmul double %40, %227
  %230 = fsub double %224, %217
  %231 = fsub double %225, %226
  %232 = fmul double %45, %231
  %233 = fadd double %230, %232
  %234 = fsub double %230, %232
  %235 = load double, ptr %51, align 8, !tbaa !39
  %236 = fmul double %235, %233
  %237 = getelementptr inbounds double, ptr %2, i64 10
  store double %236, ptr %237, align 8, !tbaa !39
  %238 = load double, ptr %57, align 8, !tbaa !39
  %239 = fmul double %238, %233
  %240 = getelementptr inbounds double, ptr %2, i64 7
  store double %239, ptr %240, align 8, !tbaa !39
  %241 = load double, ptr %63, align 8, !tbaa !39
  %242 = load double, ptr %166, align 8, !tbaa !39
  %243 = tail call double @llvm.fmuladd.f64(double %234, double %241, double %242)
  store double %243, ptr %166, align 8, !tbaa !39
  %244 = load double, ptr %69, align 8, !tbaa !39
  %245 = load double, ptr %163, align 8, !tbaa !39
  %246 = tail call double @llvm.fmuladd.f64(double %234, double %244, double %245)
  store double %246, ptr %163, align 8, !tbaa !39
  %247 = tail call double @llvm.fmuladd.f64(double %217, double %73, double %224)
  %248 = fadd double %247, %228
  %249 = fsub double %247, %228
  %250 = tail call double @llvm.fmuladd.f64(double %226, double %73, double %225)
  %251 = fadd double %250, %229
  %252 = fmul double %79, %251
  %253 = fsub double %250, %229
  %254 = fmul double %82, %253
  %255 = fadd double %248, %252
  %256 = fsub double %248, %252
  %257 = fadd double %249, %254
  %258 = fsub double %249, %254
  %259 = load double, ptr %90, align 8, !tbaa !39
  %260 = fmul double %257, %259
  %261 = getelementptr inbounds double, ptr %2, i64 11
  store double %260, ptr %261, align 8, !tbaa !39
  %262 = load double, ptr %96, align 8, !tbaa !39
  %263 = fmul double %257, %262
  %264 = getelementptr inbounds double, ptr %2, i64 6
  store double %263, ptr %264, align 8, !tbaa !39
  %265 = load double, ptr %102, align 8, !tbaa !39
  %266 = fmul double %255, %265
  %267 = getelementptr inbounds double, ptr %2, i64 8
  store double %266, ptr %267, align 8, !tbaa !39
  %268 = load double, ptr %108, align 8, !tbaa !39
  %269 = fmul double %255, %268
  %270 = getelementptr inbounds double, ptr %2, i64 9
  store double %269, ptr %270, align 8, !tbaa !39
  %271 = load double, ptr %3, align 8, !tbaa !39
  %272 = load double, ptr %2, align 8, !tbaa !39
  %273 = tail call double @llvm.fmuladd.f64(double %258, double %271, double %272)
  store double %273, ptr %2, align 8, !tbaa !39
  %274 = load double, ptr %119, align 8, !tbaa !39
  %275 = load double, ptr %187, align 8, !tbaa !39
  %276 = tail call double @llvm.fmuladd.f64(double %258, double %274, double %275)
  store double %276, ptr %187, align 8, !tbaa !39
  %277 = load double, ptr %125, align 8, !tbaa !39
  %278 = load double, ptr %192, align 8, !tbaa !39
  %279 = tail call double @llvm.fmuladd.f64(double %256, double %277, double %278)
  store double %279, ptr %192, align 8, !tbaa !39
  %280 = load double, ptr %131, align 8, !tbaa !39
  %281 = load double, ptr %195, align 8, !tbaa !39
  %282 = tail call double @llvm.fmuladd.f64(double %256, double %280, double %281)
  store double %282, ptr %195, align 8, !tbaa !39
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local i32 @main(i32 noundef %0, ptr noundef %1) #4 {
  %3 = alloca [16384 x i8], align 16
  %4 = alloca [2 x [1152 x i16]], align 16
  %5 = alloca %struct.lame_global_flags, align 8
  call void @llvm.lifetime.start.p0(i64 16384, ptr nonnull %3) #56
  call void @llvm.lifetime.start.p0(i64 4608, ptr nonnull %4) #56
  call void @llvm.lifetime.start.p0(i64 280, ptr nonnull %5) #56
  call void @lame_init(ptr noundef nonnull %5) #55
  %6 = icmp eq i32 %0, 1
  br i1 %6, label %7, label %9

7:                                                ; preds = %2
  %8 = load ptr, ptr %1, align 8, !tbaa !7
  call void @lame_usage(ptr noundef nonnull %5, ptr noundef %8) #55
  br label %9

9:                                                ; preds = %7, %2
  call void @lame_parse_args(ptr noundef nonnull %5, i32 noundef %0, ptr noundef %1) #55
  %10 = getelementptr inbounds %struct.lame_global_flags, ptr %5, i64 0, i32 4
  %11 = load i32, ptr %10, align 4, !tbaa !273
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %27

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.lame_global_flags, ptr %5, i64 0, i32 32
  %15 = load ptr, ptr %14, align 8, !tbaa !271
  %16 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %15, ptr noundef nonnull dereferenceable(2) @.str.185) #59
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %20

18:                                               ; preds = %13
  %19 = load ptr, ptr @stdout, align 8, !tbaa !7
  br label %27

20:                                               ; preds = %13
  %21 = call noalias ptr @fopen(ptr noundef %15, ptr noundef nonnull @.str.1.186) #57
  %22 = icmp eq ptr %21, null
  br i1 %22, label %23, label %27

23:                                               ; preds = %20
  %24 = load ptr, ptr @stderr, align 8, !tbaa !7
  %25 = load ptr, ptr %14, align 8, !tbaa !271
  %26 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %24, ptr noundef nonnull @.str.2.187, ptr noundef %25) #60
  call void @exit(i32 noundef 1) #54
  unreachable

27:                                               ; preds = %20, %18, %9
  %28 = phi ptr [ undef, %9 ], [ %21, %20 ], [ %19, %18 ]
  call void @lame_init_infile(ptr noundef nonnull %5) #55
  call void @lame_init_params(ptr noundef nonnull %5) #55
  call void @lame_print_config(ptr noundef nonnull %5) #55
  %29 = getelementptr inbounds [2 x [1152 x i16]], ptr %4, i64 0, i64 1
  br label %30

30:                                               ; preds = %44, %27
  %31 = call i32 @lame_readframe(ptr noundef nonnull %5, ptr noundef nonnull %4) #55
  %32 = call i32 @lame_encode_buffer(ptr noundef nonnull %5, ptr noundef nonnull %4, ptr noundef nonnull %29, i32 noundef %31, ptr noundef nonnull %3, i32 noundef 16384) #55
  %33 = icmp eq i32 %32, -1
  br i1 %33, label %34, label %37

34:                                               ; preds = %30
  %35 = load ptr, ptr @stderr, align 8, !tbaa !7
  %36 = call i64 @fwrite(ptr nonnull @.str.3.188, i64 33, i64 1, ptr %35) #53
  call void @exit(i32 noundef 1) #54
  unreachable

37:                                               ; preds = %30
  %38 = sext i32 %32 to i64
  %39 = call i64 @fwrite(ptr noundef nonnull %3, i64 noundef 1, i64 noundef %38, ptr noundef %28) #57
  %40 = icmp eq i64 %39, %38
  br i1 %40, label %44, label %41

41:                                               ; preds = %37
  %42 = load ptr, ptr @stderr, align 8, !tbaa !7
  %43 = call i64 @fwrite(ptr nonnull @.str.4.189, i64 24, i64 1, ptr %42) #53
  call void @exit(i32 noundef 1) #54
  unreachable

44:                                               ; preds = %37
  %45 = icmp eq i32 %31, 0
  br i1 %45, label %46, label %30, !llvm.loop !422

46:                                               ; preds = %44
  %47 = call i32 @lame_encode_finish(ptr noundef nonnull %5, ptr noundef nonnull %3, i32 noundef 16384) #55
  %48 = sext i32 %47 to i64
  %49 = call i64 @fwrite(ptr noundef nonnull %3, i64 noundef 1, i64 noundef %48, ptr noundef %28) #57
  %50 = call i32 @fclose(ptr noundef %28) #57
  call void @lame_close_infile(ptr noundef nonnull %5) #55
  call void @lame_mp3_tags(ptr noundef nonnull %5) #55
  call void @llvm.lifetime.end.p0(i64 280, ptr nonnull %5) #56
  call void @llvm.lifetime.end.p0(i64 4608, ptr nonnull %4) #56
  call void @llvm.lifetime.end.p0(i64 16384, ptr nonnull %3) #56
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @lame_decode_initfile(ptr nocapture noundef %0, ptr nocapture noundef writeonly %1, ptr nocapture noundef writeonly %2, ptr nocapture noundef writeonly %3, ptr nocapture noundef writeonly %4) #4 {
  %6 = alloca %struct.VBRTAGDATA, align 4
  %7 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 124, ptr nonnull %6) #56
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %7) #56
  %8 = tail call i32 @InitMP3(ptr noundef nonnull @mp) #55
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(16384) @buf, i8 0, i64 16384, i1 false)
  br label %15

9:                                                ; preds = %15
  %10 = load i8, ptr @buf, align 16, !tbaa !15
  %11 = icmp ne i8 %10, -1
  %12 = load i8, ptr getelementptr inbounds ([16384 x i8], ptr @buf, i64 0, i64 1), align 1
  %13 = icmp ult i8 %12, -16
  %14 = select i1 %11, i1 true, i1 %13
  br i1 %14, label %15, label %19

15:                                               ; preds = %9, %5
  %16 = phi i8 [ 0, %5 ], [ %12, %9 ]
  store i8 %16, ptr @buf, align 16, !tbaa !15
  %17 = tail call i64 @fread(ptr noundef nonnull getelementptr inbounds ([16384 x i8], ptr @buf, i64 0, i64 1), i64 noundef 1, i64 noundef 1, ptr noundef %0) #57
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %63, label %9, !llvm.loop !423

19:                                               ; preds = %9
  %20 = tail call i64 @fread(ptr noundef nonnull getelementptr inbounds ([16384 x i8], ptr @buf, i64 0, i64 2), i64 noundef 1, i64 noundef 46, ptr noundef %0) #57
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %63, label %22

22:                                               ; preds = %19
  %23 = call i32 @GetVbrTag(ptr noundef nonnull %6, ptr noundef nonnull @buf) #55
  %24 = icmp ne i32 %23, 0
  %25 = getelementptr inbounds %struct.VBRTAGDATA, ptr %6, i64 0, i32 3
  %26 = load i32, ptr %25, align 4
  %27 = select i1 %24, i32 %26, i32 0
  %28 = sext i32 %27 to i64
  store i32 0, ptr %7, align 4, !tbaa !11
  %29 = trunc i64 %20 to i32
  %30 = add i32 %29, 2
  %31 = call i32 @decodeMP3(ptr noundef nonnull @mp, ptr noundef nonnull @buf, i32 noundef %30, ptr noundef nonnull @out, i32 noundef 8192, ptr noundef nonnull %7) #55
  %32 = load i32, ptr %7, align 4, !tbaa !11
  %33 = icmp slt i32 %32, 1
  %34 = or i1 %24, %33
  br i1 %34, label %38, label %35

35:                                               ; preds = %22
  %36 = load ptr, ptr @stderr, align 8, !tbaa !7
  %37 = call i64 @fwrite(ptr nonnull @.str.192, i64 49, i64 1, ptr %36) #53
  br label %38

38:                                               ; preds = %35, %22
  %39 = load i32, ptr getelementptr inbounds (%struct.mpstr, ptr @mp, i64 0, i32 5), align 4, !tbaa !424
  store i32 %39, ptr %1, align 4, !tbaa !11
  %40 = load i32, ptr getelementptr inbounds (%struct.mpstr, ptr @mp, i64 0, i32 5, i32 9), align 8, !tbaa !425
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds [9 x i64], ptr @freqs, i64 0, i64 %41
  %43 = load i64, ptr %42, align 8, !tbaa !36
  %44 = trunc i64 %43 to i32
  store i32 %44, ptr %2, align 4, !tbaa !11
  %45 = load i32, ptr getelementptr inbounds (%struct.mpstr, ptr @mp, i64 0, i32 5, i32 3), align 8, !tbaa !426
  %46 = sext i32 %45 to i64
  %47 = load i32, ptr getelementptr inbounds (%struct.mpstr, ptr @mp, i64 0, i32 5, i32 6), align 4, !tbaa !427
  %48 = add nsw i32 %47, -1
  %49 = sext i32 %48 to i64
  %50 = load i32, ptr getelementptr inbounds (%struct.mpstr, ptr @mp, i64 0, i32 5, i32 8), align 4, !tbaa !428
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds [2 x [3 x [16 x i32]]], ptr @tabsel_123, i64 0, i64 %46, i64 %49, i64 %51
  %53 = load i32, ptr %52, align 4, !tbaa !11
  store i32 %53, ptr %3, align 4, !tbaa !11
  %54 = icmp ne i32 %27, 0
  %55 = select i1 %24, i1 %54, i1 false
  br i1 %55, label %56, label %61

56:                                               ; preds = %38
  %57 = load i32, ptr getelementptr inbounds (%struct.mpstr, ptr @mp, i64 0, i32 5, i32 3), align 8, !tbaa !426
  %58 = icmp eq i32 %57, 0
  %59 = select i1 %58, i64 1152, i64 576
  %60 = mul nsw i64 %59, %28
  br label %61

61:                                               ; preds = %56, %38
  %62 = phi i64 [ %60, %56 ], [ 4294967295, %38 ]
  store i64 %62, ptr %4, align 8, !tbaa !36
  br label %63

63:                                               ; preds = %61, %19, %15
  %64 = phi i32 [ 0, %61 ], [ -1, %19 ], [ -1, %15 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7) #56
  call void @llvm.lifetime.end.p0(i64 124, ptr nonnull %6) #56
  ret i32 %64
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @lame_decode_fromfile(ptr nocapture noundef %0, ptr nocapture noundef writeonly %1, ptr nocapture noundef writeonly %2) #4 {
  %4 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4) #56
  store i32 0, ptr %4, align 4, !tbaa !11
  %5 = tail call i64 @fread(ptr noundef nonnull @buf, i64 noundef 1, i64 noundef 64, ptr noundef %0) #57
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %61, label %7

7:                                                ; preds = %3
  %8 = trunc i64 %5 to i32
  %9 = call i32 @decodeMP3(ptr noundef nonnull @mp, ptr noundef nonnull @buf, i32 noundef %8, ptr noundef nonnull @out, i32 noundef 8192, ptr noundef nonnull %4) #55
  %10 = icmp eq i32 %9, 1
  %11 = load i32, ptr %4, align 4
  %12 = icmp eq i32 %11, 0
  %13 = select i1 %10, i1 true, i1 %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %17, %7
  %15 = call i64 @fread(ptr noundef nonnull @buf, i64 noundef 1, i64 noundef 100, ptr noundef %0) #57
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %61, label %17

17:                                               ; preds = %14
  %18 = trunc i64 %15 to i32
  %19 = call i32 @decodeMP3(ptr noundef nonnull @mp, ptr noundef nonnull @buf, i32 noundef %18, ptr noundef nonnull @out, i32 noundef 8192, ptr noundef nonnull %4) #55
  %20 = icmp eq i32 %19, 1
  %21 = load i32, ptr %4, align 4
  %22 = icmp eq i32 %21, 0
  %23 = select i1 %20, i1 true, i1 %22
  br i1 %23, label %14, label %24, !llvm.loop !429

24:                                               ; preds = %17, %7
  %25 = phi i32 [ %9, %7 ], [ %19, %17 ]
  %26 = phi i32 [ %11, %7 ], [ %21, %17 ]
  %27 = load i32, ptr getelementptr inbounds (%struct.mpstr, ptr @mp, i64 0, i32 5), align 4, !tbaa !424
  %28 = icmp eq i32 %25, 0
  br i1 %28, label %29, label %57

29:                                               ; preds = %24
  %30 = shl nsw i32 %27, 1
  %31 = sdiv i32 %26, %30
  switch i32 %31, label %32 [
    i32 1152, label %35
    i32 576, label %35
  ]

32:                                               ; preds = %29
  %33 = load ptr, ptr @stderr, align 8, !tbaa !7
  %34 = call i64 @fwrite(ptr nonnull @.str.1.195, i64 65, i64 1, ptr %33) #53
  call void @exit(i32 noundef -50) #54
  unreachable

35:                                               ; preds = %29, %29
  %36 = icmp sgt i32 %27, 0
  br i1 %36, label %37, label %57

37:                                               ; preds = %35
  %38 = zext i32 %27 to i64
  %39 = zext i32 %27 to i64
  %40 = zext i32 %31 to i64
  br label %41

41:                                               ; preds = %54, %37
  %42 = phi i64 [ 0, %37 ], [ %55, %54 ]
  %43 = icmp eq i64 %42, 0
  %44 = select i1 %43, ptr %1, ptr %2
  br label %45

45:                                               ; preds = %45, %41
  %46 = phi i64 [ 0, %41 ], [ %52, %45 ]
  %47 = mul nsw i64 %46, %38
  %48 = add nuw nsw i64 %47, %42
  %49 = getelementptr inbounds i16, ptr @out, i64 %48
  %50 = load i16, ptr %49, align 2, !tbaa !41
  %51 = getelementptr inbounds i16, ptr %44, i64 %46
  store i16 %50, ptr %51, align 2, !tbaa !41
  %52 = add nuw nsw i64 %46, 1
  %53 = icmp eq i64 %52, %40
  br i1 %53, label %54, label %45, !llvm.loop !430

54:                                               ; preds = %45
  %55 = add nuw nsw i64 %42, 1
  %56 = icmp eq i64 %55, %39
  br i1 %56, label %57, label %41, !llvm.loop !431

57:                                               ; preds = %54, %35, %24
  %58 = phi i32 [ 0, %24 ], [ %31, %35 ], [ %31, %54 ]
  %59 = icmp eq i32 %25, -1
  %60 = select i1 %59, i32 -1, i32 %58
  br label %61

61:                                               ; preds = %57, %14, %3
  %62 = phi i32 [ 0, %3 ], [ %60, %57 ], [ -1, %14 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4) #56
  ret i32 %62
}

; Function Attrs: nofree nounwind optsize memory(readwrite, inaccessiblemem: write) uwtable
define internal void @mdct_sub48(ptr nocapture noundef readonly %0, ptr noundef %1, ptr noundef %2, ptr nocapture noundef %3, ptr nocapture noundef readonly %4) #33 {
  %6 = load i32, ptr @mdct_sub48.init, align 4, !tbaa !11
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %5
  tail call void @mdct_init48() #57
  %9 = load i32, ptr @mdct_sub48.init, align 4, !tbaa !11
  %10 = add nsw i32 %9, 1
  store i32 %10, ptr @mdct_sub48.init, align 4, !tbaa !11
  br label %11

11:                                               ; preds = %8, %5
  %12 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 46
  %13 = load i32, ptr %12, align 4, !tbaa !173
  %14 = icmp sgt i32 %13, 0
  br i1 %14, label %15, label %508

15:                                               ; preds = %11
  %16 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 45
  %17 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 59
  %18 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 58
  %19 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 57
  %20 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 53
  %21 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 54
  %22 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 55
  %23 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 56
  br label %24

24:                                               ; preds = %503, %15
  %25 = phi i64 [ 0, %15 ], [ %504, %503 ]
  %26 = phi ptr [ %1, %15 ], [ %2, %503 ]
  %27 = load i32, ptr %16, align 8, !tbaa !136
  %28 = icmp sgt i32 %27, 0
  br i1 %28, label %29, label %503

29:                                               ; preds = %24
  %30 = getelementptr inbounds [2 x %struct.gr_info_ss], ptr %4, i64 0, i64 %25, i32 0, i32 6
  br label %31

31:                                               ; preds = %493, %29
  %32 = phi i64 [ 0, %29 ], [ %494, %493 ]
  %33 = phi ptr [ %26, %29 ], [ %.lcssa, %493 ]
  %34 = sub nsw i64 1, %32
  %35 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], ptr @sb_sample, i64 0, i64 %25, i64 %34
  br label %36

36:                                               ; preds = %50, %31
  %37 = phi i32 [ 0, %31 ], [ %53, %50 ]
  %38 = phi ptr [ %33, %31 ], [ %52, %50 ]
  %39 = phi ptr [ %35, %31 ], [ %51, %50 ]
  tail call fastcc void @window_subband(ptr noundef %38, ptr noundef nonnull %39) #57
  %40 = getelementptr inbounds i16, ptr %38, i64 32
  %41 = getelementptr inbounds double, ptr %39, i64 32
  tail call fastcc void @window_subband(ptr noundef nonnull %40, ptr noundef nonnull %41) #57
  br label %42

42:                                               ; preds = %42, %36
  %43 = phi i64 [ 1, %36 ], [ %48, %42 ]
  %44 = add nuw nsw i64 %43, 32
  %45 = getelementptr inbounds double, ptr %39, i64 %44
  %46 = load double, ptr %45, align 8, !tbaa !39
  %47 = fneg double %46
  store double %47, ptr %45, align 8, !tbaa !39
  %48 = add nuw nsw i64 %43, 2
  %49 = icmp ult i64 %43, 30
  br i1 %49, label %42, label %50, !llvm.loop !432

50:                                               ; preds = %42
  %51 = getelementptr inbounds double, ptr %39, i64 64
  %52 = getelementptr inbounds i16, ptr %38, i64 64
  %53 = add nuw nsw i32 %37, 1
  %54 = icmp eq i32 %53, 9
  br i1 %54, label %55, label %36, !llvm.loop !433

55:                                               ; preds = %50
  %.lcssa = phi ptr [ %52, %50 ]
  %56 = getelementptr inbounds [2 x [576 x double]], ptr %3, i64 %32, i64 %25
  %57 = load i32, ptr %17, align 8, !tbaa !257
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %120

59:                                               ; preds = %55
  %60 = load i32, ptr %18, align 4, !tbaa !262
  %61 = add nsw i32 %60, 1
  %62 = load i32, ptr %19, align 8, !tbaa !258
  %63 = icmp slt i32 %61, %62
  br i1 %63, label %64, label %120

64:                                               ; preds = %59
  %65 = sext i32 %60 to i64
  %66 = add nsw i64 %65, 1
  br label %67

67:                                               ; preds = %115, %64
  %68 = phi i64 [ %66, %64 ], [ %116, %115 ]
  %69 = trunc i64 %68 to i32
  %70 = sitofp i32 %69 to double
  %71 = fdiv double %70, 3.100000e+01
  %72 = load float, ptr %20, align 8, !tbaa !252
  %73 = fpext float %72 to double
  %74 = fcmp ogt double %71, %73
  br i1 %74, label %75, label %93

75:                                               ; preds = %67
  %76 = load float, ptr %21, align 4, !tbaa !253
  %77 = fpext float %76 to double
  %78 = fcmp olt double %71, %77
  br i1 %78, label %79, label %93

79:                                               ; preds = %75
  %80 = fsub double %73, %71
  %81 = fmul double %80, 0x3FF921FB54442D18
  %82 = fsub float %76, %72
  %83 = fpext float %82 to double
  %84 = fdiv double %81, %83
  %85 = tail call double @cos(double noundef %84) #55
  br label %86

86:                                               ; preds = %86, %79
  %87 = phi i64 [ 0, %79 ], [ %91, %86 ]
  %88 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], ptr @sb_sample, i64 0, i64 %25, i64 %34, i64 %87, i64 %68
  %89 = load double, ptr %88, align 8, !tbaa !39
  %90 = fmul double %85, %89
  store double %90, ptr %88, align 8, !tbaa !39
  %91 = add nuw nsw i64 %87, 1
  %92 = icmp eq i64 %91, 18
  br i1 %92, label %93, label %86, !llvm.loop !434

93:                                               ; preds = %86, %75, %67
  %94 = load float, ptr %22, align 8, !tbaa !261
  %95 = fpext float %94 to double
  %96 = fcmp ogt double %71, %95
  br i1 %96, label %97, label %115

97:                                               ; preds = %93
  %98 = load float, ptr %23, align 4, !tbaa !260
  %99 = fpext float %98 to double
  %100 = fcmp olt double %71, %99
  br i1 %100, label %101, label %115

101:                                              ; preds = %97
  %102 = fsub double %99, %71
  %103 = fmul double %102, 0x3FF921FB54442D18
  %104 = fsub float %98, %94
  %105 = fpext float %104 to double
  %106 = fdiv double %103, %105
  %107 = tail call double @cos(double noundef %106) #55
  br label %108

108:                                              ; preds = %108, %101
  %109 = phi i64 [ 0, %101 ], [ %113, %108 ]
  %110 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], ptr @sb_sample, i64 0, i64 %25, i64 %34, i64 %109, i64 %68
  %111 = load double, ptr %110, align 8, !tbaa !39
  %112 = fmul double %107, %111
  store double %112, ptr %110, align 8, !tbaa !39
  %113 = add nuw nsw i64 %109, 1
  %114 = icmp eq i64 %113, 18
  br i1 %114, label %115, label %108, !llvm.loop !435

115:                                              ; preds = %108, %97, %93
  %116 = add nsw i64 %68, 1
  %117 = load i32, ptr %19, align 8, !tbaa !258
  %118 = sext i32 %117 to i64
  %119 = icmp slt i64 %116, %118
  br i1 %119, label %67, label %120, !llvm.loop !436

120:                                              ; preds = %115, %59, %55
  %121 = getelementptr inbounds %struct.III_side_info_t, ptr %30, i64 0, i32 4, i64 %32
  br label %122

122:                                              ; preds = %489, %120
  %123 = phi i64 [ 0, %120 ], [ %490, %489 ]
  %124 = phi ptr [ %56, %120 ], [ %491, %489 ]
  %125 = load i32, ptr %121, align 8, !tbaa !188
  %126 = load i32, ptr %19, align 8, !tbaa !258
  %127 = sext i32 %126 to i64
  %128 = icmp slt i64 %123, %127
  br i1 %128, label %129, label %133

129:                                              ; preds = %122
  %130 = load i32, ptr %18, align 4, !tbaa !262
  %131 = sext i32 %130 to i64
  %132 = icmp sgt i64 %123, %131
  br i1 %132, label %134, label %133

133:                                              ; preds = %129, %122
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(144) %124, i8 0, i64 144, i1 false)
  br label %467

134:                                              ; preds = %129
  %135 = icmp eq i32 %125, 2
  br i1 %135, label %138, label %136

136:                                              ; preds = %134
  %137 = sext i32 %125 to i64
  br label %231

138:                                              ; preds = %138, %134
  %139 = phi i64 [ %181, %138 ], [ 2, %134 ]
  %140 = getelementptr inbounds [4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 %139
  %141 = load double, ptr %140, align 8, !tbaa !39
  %142 = add nuw nsw i64 %139, 6
  %143 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], ptr @sb_sample, i64 0, i64 %25, i64 %32, i64 %142, i64 %123
  %144 = load double, ptr %143, align 8, !tbaa !39
  %145 = sub nuw nsw i64 11, %139
  %146 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], ptr @sb_sample, i64 0, i64 %25, i64 %32, i64 %145, i64 %123
  %147 = load double, ptr %146, align 8, !tbaa !39
  %148 = fneg double %147
  %149 = tail call double @llvm.fmuladd.f64(double %144, double %141, double %148)
  %150 = getelementptr inbounds double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 4), i64 %139
  store double %149, ptr %150, align 8, !tbaa !39
  %151 = add nuw nsw i64 %139, 12
  %152 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], ptr @sb_sample, i64 0, i64 %25, i64 %32, i64 %151, i64 %123
  %153 = load double, ptr %152, align 8, !tbaa !39
  %154 = sub nuw nsw i64 17, %139
  %155 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], ptr @sb_sample, i64 0, i64 %25, i64 %32, i64 %154, i64 %123
  %156 = load double, ptr %155, align 8, !tbaa !39
  %157 = tail call double @llvm.fmuladd.f64(double %156, double %141, double %153)
  %158 = add nuw nsw i64 %139, 3
  %159 = getelementptr inbounds double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 4), i64 %158
  store double %157, ptr %159, align 8, !tbaa !39
  %160 = fneg double %156
  %161 = tail call double @llvm.fmuladd.f64(double %153, double %141, double %160)
  %162 = getelementptr inbounds double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 4), i64 %142
  store double %161, ptr %162, align 8, !tbaa !39
  %163 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], ptr @sb_sample, i64 0, i64 %25, i64 %34, i64 %139, i64 %123
  %164 = load double, ptr %163, align 8, !tbaa !39
  %165 = sub nuw nsw i64 5, %139
  %166 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], ptr @sb_sample, i64 0, i64 %25, i64 %34, i64 %165, i64 %123
  %167 = load double, ptr %166, align 8, !tbaa !39
  %168 = tail call double @llvm.fmuladd.f64(double %167, double %141, double %164)
  %169 = add nuw nsw i64 %139, 9
  %170 = getelementptr inbounds double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 4), i64 %169
  store double %168, ptr %170, align 8, !tbaa !39
  %171 = fneg double %167
  %172 = tail call double @llvm.fmuladd.f64(double %164, double %141, double %171)
  %173 = getelementptr inbounds double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 4), i64 %151
  store double %172, ptr %173, align 8, !tbaa !39
  %174 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], ptr @sb_sample, i64 0, i64 %25, i64 %34, i64 %142, i64 %123
  %175 = load double, ptr %174, align 8, !tbaa !39
  %176 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], ptr @sb_sample, i64 0, i64 %25, i64 %34, i64 %145, i64 %123
  %177 = load double, ptr %176, align 8, !tbaa !39
  %178 = tail call double @llvm.fmuladd.f64(double %177, double %141, double %175)
  %179 = add nuw nsw i64 %139, 15
  %180 = getelementptr inbounds double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 4), i64 %179
  store double %178, ptr %180, align 8, !tbaa !39
  %181 = add nsw i64 %139, -1
  %182 = icmp eq i64 %139, 0
  br i1 %182, label %183, label %138, !llvm.loop !437

183:                                              ; preds = %228, %138
  %184 = phi i64 [ %229, %228 ], [ 5, %138 ]
  %185 = getelementptr inbounds [6 x [6 x double]], ptr @cos_s, i64 0, i64 %184
  %186 = load double, ptr %185, align 16, !tbaa !39
  %187 = getelementptr inbounds [6 x [6 x double]], ptr @cos_s, i64 0, i64 %184, i64 1
  %188 = load double, ptr %187, align 8, !tbaa !39
  %189 = getelementptr inbounds [6 x [6 x double]], ptr @cos_s, i64 0, i64 %184, i64 2
  %190 = load double, ptr %189, align 16, !tbaa !39
  %191 = getelementptr inbounds [6 x [6 x double]], ptr @cos_s, i64 0, i64 %184, i64 3
  %192 = load double, ptr %191, align 8, !tbaa !39
  %193 = getelementptr inbounds [6 x [6 x double]], ptr @cos_s, i64 0, i64 %184, i64 4
  %194 = load double, ptr %193, align 16, !tbaa !39
  %195 = getelementptr inbounds [6 x [6 x double]], ptr @cos_s, i64 0, i64 %184, i64 5
  %196 = load double, ptr %195, align 8, !tbaa !39
  %197 = mul nuw nsw i64 %184, 3
  br label %198

198:                                              ; preds = %198, %183
  %199 = phi i64 [ 2, %183 ], [ %226, %198 ]
  %200 = mul nuw nsw i64 %199, 6
  %201 = getelementptr inbounds double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 4), i64 %200
  %202 = load double, ptr %201, align 16, !tbaa !39
  %203 = or i64 %200, 1
  %204 = getelementptr inbounds double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 4), i64 %203
  %205 = load double, ptr %204, align 8, !tbaa !39
  %206 = fmul double %188, %205
  %207 = tail call double @llvm.fmuladd.f64(double %186, double %202, double %206)
  %208 = add nuw nsw i64 %200, 2
  %209 = getelementptr inbounds double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 4), i64 %208
  %210 = load double, ptr %209, align 16, !tbaa !39
  %211 = tail call double @llvm.fmuladd.f64(double %190, double %210, double %207)
  %212 = add nuw nsw i64 %200, 3
  %213 = getelementptr inbounds double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 4), i64 %212
  %214 = load double, ptr %213, align 8, !tbaa !39
  %215 = tail call double @llvm.fmuladd.f64(double %192, double %214, double %211)
  %216 = add nuw nsw i64 %200, 4
  %217 = getelementptr inbounds double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 4), i64 %216
  %218 = load double, ptr %217, align 16, !tbaa !39
  %219 = tail call double @llvm.fmuladd.f64(double %194, double %218, double %215)
  %220 = add nuw nsw i64 %200, 5
  %221 = getelementptr inbounds double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 4), i64 %220
  %222 = load double, ptr %221, align 8, !tbaa !39
  %223 = tail call double @llvm.fmuladd.f64(double %196, double %222, double %219)
  %224 = add nuw nsw i64 %199, %197
  %225 = getelementptr inbounds double, ptr %124, i64 %224
  store double %223, ptr %225, align 8, !tbaa !39
  %226 = add nsw i64 %199, -1
  %227 = icmp eq i64 %199, 0
  br i1 %227, label %228, label %198, !llvm.loop !438

228:                                              ; preds = %198
  %229 = add nsw i64 %184, -1
  %230 = icmp eq i64 %184, 0
  br i1 %230, label %467, label %183, !llvm.loop !439

231:                                              ; preds = %231, %136
  %232 = phi i64 [ 8, %136 ], [ %260, %231 ]
  %233 = getelementptr inbounds [4 x [36 x double]], ptr @win.198, i64 0, i64 %137, i64 %232
  %234 = load double, ptr %233, align 8, !tbaa !39
  %235 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], ptr @sb_sample, i64 0, i64 %25, i64 %32, i64 %232, i64 %123
  %236 = load double, ptr %235, align 8, !tbaa !39
  %237 = add nuw nsw i64 %232, 9
  %238 = getelementptr inbounds [4 x [36 x double]], ptr @win.198, i64 0, i64 %137, i64 %237
  %239 = load double, ptr %238, align 8, !tbaa !39
  %240 = sub nuw nsw i64 17, %232
  %241 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], ptr @sb_sample, i64 0, i64 %25, i64 %32, i64 %240, i64 %123
  %242 = load double, ptr %241, align 8, !tbaa !39
  %243 = fneg double %239
  %244 = fmul double %242, %243
  %245 = tail call double @llvm.fmuladd.f64(double %234, double %236, double %244)
  %246 = getelementptr inbounds double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 4), i64 %232
  store double %245, ptr %246, align 8, !tbaa !39
  %247 = add nuw nsw i64 %232, 18
  %248 = getelementptr inbounds [4 x [36 x double]], ptr @win.198, i64 0, i64 %137, i64 %247
  %249 = load double, ptr %248, align 8, !tbaa !39
  %250 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], ptr @sb_sample, i64 0, i64 %25, i64 %34, i64 %232, i64 %123
  %251 = load double, ptr %250, align 8, !tbaa !39
  %252 = add nuw nsw i64 %232, 27
  %253 = getelementptr inbounds [4 x [36 x double]], ptr @win.198, i64 0, i64 %137, i64 %252
  %254 = load double, ptr %253, align 8, !tbaa !39
  %255 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], ptr @sb_sample, i64 0, i64 %25, i64 %34, i64 %240, i64 %123
  %256 = load double, ptr %255, align 8, !tbaa !39
  %257 = fmul double %254, %256
  %258 = tail call double @llvm.fmuladd.f64(double %249, double %251, double %257)
  %259 = getelementptr inbounds double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 4), i64 %237
  store double %258, ptr %259, align 8, !tbaa !39
  %260 = add nsw i64 %232, -1
  %261 = icmp eq i64 %232, 0
  br i1 %261, label %262, label %231, !llvm.loop !440

262:                                              ; preds = %262, %231
  %263 = phi i64 [ %341, %262 ], [ 11, %231 ]
  %264 = phi ptr [ %340, %262 ], [ @cos_l, %231 ]
  %265 = load double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 4), align 16, !tbaa !39
  %266 = load double, ptr %264, align 8, !tbaa !39
  %267 = load double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 5), align 8, !tbaa !39
  %268 = getelementptr inbounds double, ptr %264, i64 1
  %269 = load double, ptr %268, align 8, !tbaa !39
  %270 = fmul double %267, %269
  %271 = tail call double @llvm.fmuladd.f64(double %265, double %266, double %270)
  %272 = load double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 6), align 16, !tbaa !39
  %273 = getelementptr inbounds double, ptr %264, i64 2
  %274 = load double, ptr %273, align 8, !tbaa !39
  %275 = tail call double @llvm.fmuladd.f64(double %272, double %274, double %271)
  %276 = load double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 7), align 8, !tbaa !39
  %277 = getelementptr inbounds double, ptr %264, i64 3
  %278 = load double, ptr %277, align 8, !tbaa !39
  %279 = tail call double @llvm.fmuladd.f64(double %276, double %278, double %275)
  %280 = load double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 8), align 16, !tbaa !39
  %281 = getelementptr inbounds double, ptr %264, i64 4
  %282 = load double, ptr %281, align 8, !tbaa !39
  %283 = tail call double @llvm.fmuladd.f64(double %280, double %282, double %279)
  %284 = load double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 9), align 8, !tbaa !39
  %285 = getelementptr inbounds double, ptr %264, i64 5
  %286 = load double, ptr %285, align 8, !tbaa !39
  %287 = tail call double @llvm.fmuladd.f64(double %284, double %286, double %283)
  %288 = load double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 10), align 16, !tbaa !39
  %289 = getelementptr inbounds double, ptr %264, i64 6
  %290 = load double, ptr %289, align 8, !tbaa !39
  %291 = tail call double @llvm.fmuladd.f64(double %288, double %290, double %287)
  %292 = load double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 11), align 8, !tbaa !39
  %293 = getelementptr inbounds double, ptr %264, i64 7
  %294 = load double, ptr %293, align 8, !tbaa !39
  %295 = tail call double @llvm.fmuladd.f64(double %292, double %294, double %291)
  %296 = load double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 12), align 16, !tbaa !39
  %297 = getelementptr inbounds double, ptr %264, i64 8
  %298 = load double, ptr %297, align 8, !tbaa !39
  %299 = tail call double @llvm.fmuladd.f64(double %296, double %298, double %295)
  %300 = load double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 13), align 8, !tbaa !39
  %301 = getelementptr inbounds double, ptr %264, i64 9
  %302 = load double, ptr %301, align 8, !tbaa !39
  %303 = tail call double @llvm.fmuladd.f64(double %300, double %302, double %299)
  %304 = load double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 14), align 16, !tbaa !39
  %305 = getelementptr inbounds double, ptr %264, i64 10
  %306 = load double, ptr %305, align 8, !tbaa !39
  %307 = tail call double @llvm.fmuladd.f64(double %304, double %306, double %303)
  %308 = load double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 15), align 8, !tbaa !39
  %309 = getelementptr inbounds double, ptr %264, i64 11
  %310 = load double, ptr %309, align 8, !tbaa !39
  %311 = tail call double @llvm.fmuladd.f64(double %308, double %310, double %307)
  %312 = load double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 16), align 16, !tbaa !39
  %313 = getelementptr inbounds double, ptr %264, i64 12
  %314 = load double, ptr %313, align 8, !tbaa !39
  %315 = tail call double @llvm.fmuladd.f64(double %312, double %314, double %311)
  %316 = load double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 17), align 8, !tbaa !39
  %317 = getelementptr inbounds double, ptr %264, i64 13
  %318 = load double, ptr %317, align 8, !tbaa !39
  %319 = tail call double @llvm.fmuladd.f64(double %316, double %318, double %315)
  %320 = load double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 18), align 16, !tbaa !39
  %321 = getelementptr inbounds double, ptr %264, i64 14
  %322 = load double, ptr %321, align 8, !tbaa !39
  %323 = tail call double @llvm.fmuladd.f64(double %320, double %322, double %319)
  %324 = load double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 19), align 8, !tbaa !39
  %325 = getelementptr inbounds double, ptr %264, i64 15
  %326 = load double, ptr %325, align 8, !tbaa !39
  %327 = tail call double @llvm.fmuladd.f64(double %324, double %326, double %323)
  %328 = load double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 20), align 16, !tbaa !39
  %329 = getelementptr inbounds double, ptr %264, i64 16
  %330 = load double, ptr %329, align 8, !tbaa !39
  %331 = tail call double @llvm.fmuladd.f64(double %328, double %330, double %327)
  %332 = load double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 21), align 8, !tbaa !39
  %333 = getelementptr inbounds double, ptr %264, i64 17
  %334 = load double, ptr %333, align 8, !tbaa !39
  %335 = tail call double @llvm.fmuladd.f64(double %332, double %334, double %331)
  %336 = getelementptr inbounds [12 x i32], ptr @all, i64 0, i64 %263
  %337 = load i32, ptr %336, align 4, !tbaa !11
  %338 = sext i32 %337 to i64
  %339 = getelementptr inbounds double, ptr %124, i64 %338
  store double %335, ptr %339, align 8, !tbaa !39
  %340 = getelementptr inbounds double, ptr %264, i64 18
  %341 = add nsw i64 %263, -1
  %342 = icmp eq i64 %263, 0
  br i1 %342, label %343, label %262, !llvm.loop !441

343:                                              ; preds = %262
  %.lcssa2 = phi ptr [ %264, %262 ]
  %.lcssa1 = phi ptr [ %340, %262 ]
  %344 = load double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 4), align 16, !tbaa !39
  %345 = load double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 9), align 8, !tbaa !39
  %346 = fadd double %344, %345
  %347 = load double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 19), align 8, !tbaa !39
  %348 = fadd double %346, %347
  %349 = load double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 5), align 8, !tbaa !39
  %350 = load double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 8), align 16, !tbaa !39
  %351 = fadd double %349, %350
  %352 = load double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 20), align 16, !tbaa !39
  %353 = fadd double %351, %352
  %354 = load double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 6), align 16, !tbaa !39
  %355 = load double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 7), align 8, !tbaa !39
  %356 = fadd double %354, %355
  %357 = load double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 21), align 8, !tbaa !39
  %358 = fadd double %356, %357
  %359 = load double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 10), align 16, !tbaa !39
  %360 = load double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 13), align 8, !tbaa !39
  %361 = fsub double %359, %360
  %362 = load double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 18), align 16, !tbaa !39
  %363 = fadd double %361, %362
  %364 = load double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 11), align 8, !tbaa !39
  %365 = load double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 14), align 16, !tbaa !39
  %366 = fsub double %364, %365
  %367 = load double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 17), align 8, !tbaa !39
  %368 = fadd double %366, %367
  %369 = load double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 12), align 16, !tbaa !39
  %370 = load double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 15), align 8, !tbaa !39
  %371 = fsub double %369, %370
  %372 = load double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 16), align 16, !tbaa !39
  %373 = fadd double %371, %372
  %374 = load double, ptr %.lcssa1, align 8, !tbaa !39
  %375 = getelementptr inbounds double, ptr %.lcssa2, i64 19
  %376 = load double, ptr %375, align 8, !tbaa !39
  %377 = fmul double %353, %376
  %378 = tail call double @llvm.fmuladd.f64(double %348, double %374, double %377)
  %379 = getelementptr inbounds double, ptr %.lcssa2, i64 20
  %380 = load double, ptr %379, align 8, !tbaa !39
  %381 = tail call double @llvm.fmuladd.f64(double %358, double %380, double %378)
  %382 = getelementptr inbounds double, ptr %.lcssa2, i64 21
  %383 = load double, ptr %382, align 8, !tbaa !39
  %384 = tail call double @llvm.fmuladd.f64(double %363, double %383, double %381)
  %385 = getelementptr inbounds double, ptr %.lcssa2, i64 22
  %386 = load double, ptr %385, align 8, !tbaa !39
  %387 = tail call double @llvm.fmuladd.f64(double %368, double %386, double %384)
  %388 = getelementptr inbounds double, ptr %.lcssa2, i64 23
  %389 = load double, ptr %388, align 8, !tbaa !39
  %390 = tail call double @llvm.fmuladd.f64(double %373, double %389, double %387)
  %391 = getelementptr inbounds double, ptr %124, i64 16
  store double %390, ptr %391, align 8, !tbaa !39
  %392 = getelementptr inbounds double, ptr %.lcssa2, i64 24
  %393 = load double, ptr %392, align 8, !tbaa !39
  %394 = getelementptr inbounds double, ptr %.lcssa2, i64 25
  %395 = load double, ptr %394, align 8, !tbaa !39
  %396 = fmul double %353, %395
  %397 = tail call double @llvm.fmuladd.f64(double %348, double %393, double %396)
  %398 = getelementptr inbounds double, ptr %.lcssa2, i64 26
  %399 = load double, ptr %398, align 8, !tbaa !39
  %400 = tail call double @llvm.fmuladd.f64(double %358, double %399, double %397)
  %401 = getelementptr inbounds double, ptr %.lcssa2, i64 27
  %402 = load double, ptr %401, align 8, !tbaa !39
  %403 = tail call double @llvm.fmuladd.f64(double %363, double %402, double %400)
  %404 = getelementptr inbounds double, ptr %.lcssa2, i64 28
  %405 = load double, ptr %404, align 8, !tbaa !39
  %406 = tail call double @llvm.fmuladd.f64(double %368, double %405, double %403)
  %407 = getelementptr inbounds double, ptr %.lcssa2, i64 29
  %408 = load double, ptr %407, align 8, !tbaa !39
  %409 = tail call double @llvm.fmuladd.f64(double %373, double %408, double %406)
  %410 = getelementptr inbounds double, ptr %124, i64 10
  store double %409, ptr %410, align 8, !tbaa !39
  %411 = getelementptr inbounds double, ptr %.lcssa2, i64 30
  %412 = load double, ptr %411, align 8, !tbaa !39
  %413 = getelementptr inbounds double, ptr %.lcssa2, i64 31
  %414 = load double, ptr %413, align 8, !tbaa !39
  %415 = fmul double %353, %414
  %416 = tail call double @llvm.fmuladd.f64(double %348, double %412, double %415)
  %417 = getelementptr inbounds double, ptr %.lcssa2, i64 32
  %418 = load double, ptr %417, align 8, !tbaa !39
  %419 = tail call double @llvm.fmuladd.f64(double %358, double %418, double %416)
  %420 = getelementptr inbounds double, ptr %.lcssa2, i64 33
  %421 = load double, ptr %420, align 8, !tbaa !39
  %422 = tail call double @llvm.fmuladd.f64(double %363, double %421, double %419)
  %423 = getelementptr inbounds double, ptr %.lcssa2, i64 34
  %424 = load double, ptr %423, align 8, !tbaa !39
  %425 = tail call double @llvm.fmuladd.f64(double %368, double %424, double %422)
  %426 = getelementptr inbounds double, ptr %.lcssa2, i64 35
  %427 = load double, ptr %426, align 8, !tbaa !39
  %428 = tail call double @llvm.fmuladd.f64(double %373, double %427, double %425)
  %429 = getelementptr inbounds double, ptr %124, i64 7
  store double %428, ptr %429, align 8, !tbaa !39
  %430 = getelementptr inbounds double, ptr %.lcssa2, i64 36
  %431 = load double, ptr %430, align 8, !tbaa !39
  %432 = getelementptr inbounds double, ptr %.lcssa2, i64 37
  %433 = load double, ptr %432, align 8, !tbaa !39
  %434 = fmul double %353, %433
  %435 = tail call double @llvm.fmuladd.f64(double %348, double %431, double %434)
  %436 = getelementptr inbounds double, ptr %.lcssa2, i64 38
  %437 = load double, ptr %436, align 8, !tbaa !39
  %438 = tail call double @llvm.fmuladd.f64(double %358, double %437, double %435)
  %439 = getelementptr inbounds double, ptr %.lcssa2, i64 39
  %440 = load double, ptr %439, align 8, !tbaa !39
  %441 = tail call double @llvm.fmuladd.f64(double %363, double %440, double %438)
  %442 = getelementptr inbounds double, ptr %.lcssa2, i64 40
  %443 = load double, ptr %442, align 8, !tbaa !39
  %444 = tail call double @llvm.fmuladd.f64(double %368, double %443, double %441)
  %445 = getelementptr inbounds double, ptr %.lcssa2, i64 41
  %446 = load double, ptr %445, align 8, !tbaa !39
  %447 = tail call double @llvm.fmuladd.f64(double %373, double %446, double %444)
  %448 = getelementptr inbounds double, ptr %124, i64 1
  store double %447, ptr %448, align 8, !tbaa !39
  %449 = getelementptr inbounds double, ptr %.lcssa2, i64 42
  %450 = fsub double %348, %353
  %451 = fadd double %450, %373
  %452 = fsub double %358, %363
  %453 = fsub double %452, %368
  %454 = load double, ptr %449, align 8, !tbaa !39
  %455 = getelementptr inbounds double, ptr %.lcssa2, i64 43
  %456 = load double, ptr %455, align 8, !tbaa !39
  %457 = fmul double %453, %456
  %458 = tail call double @llvm.fmuladd.f64(double %451, double %454, double %457)
  %459 = getelementptr inbounds double, ptr %124, i64 13
  store double %458, ptr %459, align 8, !tbaa !39
  %460 = getelementptr inbounds double, ptr %.lcssa2, i64 44
  %461 = load double, ptr %460, align 8, !tbaa !39
  %462 = getelementptr inbounds double, ptr %.lcssa2, i64 45
  %463 = load double, ptr %462, align 8, !tbaa !39
  %464 = fmul double %453, %463
  %465 = tail call double @llvm.fmuladd.f64(double %451, double %461, double %464)
  %466 = getelementptr inbounds double, ptr %124, i64 4
  store double %465, ptr %466, align 8, !tbaa !39
  br label %467

467:                                              ; preds = %343, %228, %133
  %468 = icmp eq i32 %125, 2
  %469 = icmp eq i64 %123, 0
  %470 = or i1 %469, %468
  br i1 %470, label %489, label %471

471:                                              ; preds = %471, %467
  %472 = phi i64 [ %487, %471 ], [ 7, %467 ]
  %473 = getelementptr inbounds double, ptr %124, i64 %472
  %474 = load double, ptr %473, align 8, !tbaa !39
  %475 = getelementptr inbounds [8 x double], ptr @ca, i64 0, i64 %472
  %476 = load double, ptr %475, align 8, !tbaa !39
  %477 = xor i64 %472, -1
  %478 = getelementptr inbounds double, ptr %124, i64 %477
  %479 = load double, ptr %478, align 8, !tbaa !39
  %480 = getelementptr inbounds [8 x double], ptr @cs, i64 0, i64 %472
  %481 = load double, ptr %480, align 8, !tbaa !39
  %482 = fmul double %479, %481
  %483 = tail call double @llvm.fmuladd.f64(double %474, double %476, double %482)
  %484 = fneg double %479
  %485 = fmul double %476, %484
  %486 = tail call double @llvm.fmuladd.f64(double %474, double %481, double %485)
  store double %483, ptr %478, align 8, !tbaa !39
  store double %486, ptr %473, align 8, !tbaa !39
  %487 = add nsw i64 %472, -1
  %488 = icmp eq i64 %472, 0
  br i1 %488, label %489, label %471, !llvm.loop !442

489:                                              ; preds = %471, %467
  %490 = add nuw nsw i64 %123, 1
  %491 = getelementptr inbounds double, ptr %124, i64 18
  %492 = icmp eq i64 %490, 32
  br i1 %492, label %493, label %122, !llvm.loop !443

493:                                              ; preds = %489
  %494 = add nuw nsw i64 %32, 1
  %495 = load i32, ptr %16, align 8, !tbaa !136
  %496 = sext i32 %495 to i64
  %497 = icmp slt i64 %494, %496
  br i1 %497, label %31, label %498, !llvm.loop !444

498:                                              ; preds = %493
  %.lcssa3 = phi i32 [ %495, %493 ]
  %499 = icmp eq i32 %.lcssa3, 1
  br i1 %499, label %500, label %503

500:                                              ; preds = %498
  %501 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], ptr @sb_sample, i64 0, i64 %25
  %502 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], ptr @sb_sample, i64 0, i64 %25, i64 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 16 dereferenceable(4608) %501, ptr noundef nonnull align 16 dereferenceable(4608) %502, i64 4608, i1 false)
  br label %503

503:                                              ; preds = %500, %498, %24
  %504 = add nuw nsw i64 %25, 1
  %505 = load i32, ptr %12, align 4, !tbaa !173
  %506 = sext i32 %505 to i64
  %507 = icmp slt i64 %504, %506
  br i1 %507, label %24, label %508, !llvm.loop !445

508:                                              ; preds = %503, %11
  ret void
}

; Function Attrs: nofree nounwind optsize memory(readwrite, inaccessiblemem: write) uwtable
define internal void @mdct_init48() #33 {
  %1 = alloca [31 x double], align 16
  br label %2

2:                                                ; preds = %2, %0
  %3 = phi i64 [ 0, %0 ], [ %12, %2 ]
  %4 = getelementptr inbounds [8 x double], ptr @mdct_init48.c, i64 0, i64 %3
  %5 = load <2 x double>, ptr %4, align 16, !tbaa !39
  %6 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %5, <2 x double> %5, <2 x double> <double 1.000000e+00, double 1.000000e+00>)
  %7 = tail call <2 x double> @llvm.sqrt.v2f64(<2 x double> %6)
  %8 = fdiv <2 x double> %5, %7
  %9 = getelementptr inbounds [8 x double], ptr @ca, i64 0, i64 %3
  store <2 x double> %8, ptr %9, align 16, !tbaa !39
  %10 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %7
  %11 = getelementptr inbounds [8 x double], ptr @cs, i64 0, i64 %3
  store <2 x double> %10, ptr %11, align 16, !tbaa !39
  %12 = add nuw i64 %3, 2
  %13 = icmp eq i64 %12, 8
  br i1 %13, label %14, label %2, !llvm.loop !446

14:                                               ; preds = %14, %2
  %15 = phi i64 [ %22, %14 ], [ 0, %2 ]
  %16 = trunc i64 %15 to i32
  %17 = sitofp i32 %16 to double
  %18 = fadd double %17, 5.000000e-01
  %19 = fmul double %18, 0x3FB657184AE74487
  %20 = tail call double @sin(double noundef %19) #55
  %21 = getelementptr inbounds [36 x double], ptr @win.198, i64 0, i64 %15
  store double %20, ptr %21, align 8, !tbaa !39
  %22 = add nuw nsw i64 %15, 1
  %23 = icmp eq i64 %22, 36
  br i1 %23, label %24, label %14, !llvm.loop !447

24:                                               ; preds = %24, %14
  %25 = phi i64 [ %29, %24 ], [ 0, %14 ]
  %26 = getelementptr inbounds [36 x double], ptr @win.198, i64 0, i64 %25
  %27 = load <2 x double>, ptr %26, align 16, !tbaa !39
  %28 = getelementptr inbounds [4 x [36 x double]], ptr @win.198, i64 0, i64 1, i64 %25
  store <2 x double> %27, ptr %28, align 16, !tbaa !39
  %29 = add nuw i64 %25, 2
  %30 = icmp eq i64 %29, 18
  br i1 %30, label %31, label %24, !llvm.loop !448

31:                                               ; preds = %31, %24
  %32 = phi i64 [ %35, %31 ], [ 0, %24 ]
  %33 = add i64 %32, 18
  %34 = getelementptr inbounds [4 x [36 x double]], ptr @win.198, i64 0, i64 1, i64 %33
  store <2 x double> <double 1.000000e+00, double 1.000000e+00>, ptr %34, align 16, !tbaa !39
  %35 = add nuw i64 %32, 2
  %36 = icmp eq i64 %35, 6
  br i1 %36, label %37, label %31, !llvm.loop !449

37:                                               ; preds = %37, %31
  %38 = phi i64 [ %45, %37 ], [ 24, %31 ]
  %39 = trunc i64 %38 to i32
  %40 = sitofp i32 %39 to double
  %41 = fadd double %40, 5.000000e-01
  %42 = fmul double %41, 0x3FD0C152382D7365
  %43 = tail call double @cos(double noundef %42) #55
  %44 = getelementptr inbounds [4 x [36 x double]], ptr @win.198, i64 0, i64 1, i64 %38
  store double %43, ptr %44, align 8, !tbaa !39
  %45 = add nuw nsw i64 %38, 1
  %46 = icmp eq i64 %45, 30
  br i1 %46, label %47, label %37, !llvm.loop !450

47:                                               ; preds = %37
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(48) getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 1, i64 30), i8 0, i64 48, i1 false), !tbaa !39
  br label %48

48:                                               ; preds = %48, %47
  %49 = phi i64 [ 0, %47 ], [ %54, %48 ]
  %50 = sub nuw nsw i64 35, %49
  %51 = getelementptr inbounds [4 x [36 x double]], ptr @win.198, i64 0, i64 1, i64 %50
  %52 = load double, ptr %51, align 8, !tbaa !39
  %53 = getelementptr inbounds [4 x [36 x double]], ptr @win.198, i64 0, i64 3, i64 %49
  store double %52, ptr %53, align 8, !tbaa !39
  %54 = add nuw nsw i64 %49, 1
  %55 = icmp eq i64 %54, 36
  br i1 %55, label %56, label %48, !llvm.loop !451

56:                                               ; preds = %89, %48
  %57 = phi i64 [ %90, %89 ], [ 11, %48 ]
  %58 = phi ptr [ %.lcssa5, %89 ], [ @cos_l, %48 ]
  %59 = getelementptr inbounds [12 x i32], ptr @all, i64 0, i64 %57
  %60 = load i32, ptr %59, align 4, !tbaa !11
  %61 = shl nsw i32 %60, 1
  %62 = or i32 %61, 1
  %63 = sitofp i32 %62 to double
  %64 = fmul double %63, 0x3F9657184AE74487
  br label %65

65:                                               ; preds = %65, %56
  %66 = phi i32 [ 0, %56 ], [ %75, %65 ]
  %67 = phi ptr [ %58, %56 ], [ %74, %65 ]
  %68 = shl nuw nsw i32 %66, 2
  %69 = add nuw nsw i32 %68, 38
  %70 = sitofp i32 %69 to double
  %71 = fmul double %64, %70
  %72 = tail call double @cos(double noundef %71) #55
  %73 = fmul double %72, 0x3FBC71C71C71C71C
  %74 = getelementptr inbounds double, ptr %67, i64 1
  store double %73, ptr %67, align 8, !tbaa !39
  %75 = add nuw nsw i32 %66, 1
  %76 = icmp eq i32 %75, 9
  br i1 %76, label %77, label %65, !llvm.loop !452

77:                                               ; preds = %77, %65
  %78 = phi i32 [ %87, %77 ], [ 0, %65 ]
  %79 = phi ptr [ %86, %77 ], [ %74, %65 ]
  %80 = shl nuw nsw i32 %78, 2
  %81 = add nuw nsw i32 %80, 110
  %82 = sitofp i32 %81 to double
  %83 = fmul double %64, %82
  %84 = tail call double @cos(double noundef %83) #55
  %85 = fmul double %84, 0x3FBC71C71C71C71C
  %86 = getelementptr inbounds double, ptr %79, i64 1
  store double %85, ptr %79, align 8, !tbaa !39
  %87 = add nuw nsw i32 %78, 1
  %88 = icmp eq i32 %87, 9
  br i1 %88, label %89, label %77, !llvm.loop !453

89:                                               ; preds = %77
  %.lcssa5 = phi ptr [ %86, %77 ]
  %90 = add nsw i64 %57, -1
  %91 = icmp eq i64 %57, 0
  br i1 %91, label %92, label %56, !llvm.loop !454

92:                                               ; preds = %125, %89
  %93 = phi i64 [ %126, %125 ], [ 3, %89 ]
  %94 = phi ptr [ %.lcssa3, %125 ], [ %.lcssa5, %89 ]
  %95 = getelementptr inbounds [4 x i32], ptr @mdct_init48.d3, i64 0, i64 %93
  %96 = load i32, ptr %95, align 4, !tbaa !11
  %97 = shl nsw i32 %96, 1
  %98 = or i32 %97, 1
  %99 = sitofp i32 %98 to double
  %100 = fmul double %99, 0x3F9657184AE74487
  br label %101

101:                                              ; preds = %101, %92
  %102 = phi i32 [ 0, %92 ], [ %111, %101 ]
  %103 = phi ptr [ %94, %92 ], [ %110, %101 ]
  %104 = shl nuw nsw i32 %102, 2
  %105 = add nuw nsw i32 %104, 38
  %106 = sitofp i32 %105 to double
  %107 = fmul double %100, %106
  %108 = tail call double @cos(double noundef %107) #55
  %109 = fmul double %108, 0x3FBC71C71C71C71C
  %110 = getelementptr inbounds double, ptr %103, i64 1
  store double %109, ptr %103, align 8, !tbaa !39
  %111 = add nuw nsw i32 %102, 1
  %112 = icmp eq i32 %111, 3
  br i1 %112, label %113, label %101, !llvm.loop !455

113:                                              ; preds = %113, %101
  %114 = phi i32 [ %123, %113 ], [ 6, %101 ]
  %115 = phi ptr [ %122, %113 ], [ %110, %101 ]
  %116 = shl nuw nsw i32 %114, 2
  %117 = add nuw nsw i32 %116, 38
  %118 = sitofp i32 %117 to double
  %119 = fmul double %100, %118
  %120 = tail call double @cos(double noundef %119) #55
  %121 = fmul double %120, 0x3FBC71C71C71C71C
  %122 = getelementptr inbounds double, ptr %115, i64 1
  store double %121, ptr %115, align 8, !tbaa !39
  %123 = add nuw nsw i32 %114, 1
  %124 = icmp eq i32 %123, 9
  br i1 %124, label %125, label %113, !llvm.loop !456

125:                                              ; preds = %113
  %.lcssa4 = phi ptr [ %115, %113 ]
  %.lcssa3 = phi ptr [ %122, %113 ]
  %126 = add nsw i64 %93, -1
  %127 = icmp eq i64 %93, 0
  br i1 %127, label %128, label %92, !llvm.loop !457

128:                                              ; preds = %125
  %.lcssa4.lcssa = phi ptr [ %.lcssa4, %125 ]
  %.lcssa3.lcssa = phi ptr [ %.lcssa3, %125 ]
  %129 = getelementptr inbounds double, ptr %.lcssa4.lcssa, i64 3
  store <2 x double> <double 0xBFBA477C4665D2F0, double 0xBFA5C53B3ED424C1>, ptr %.lcssa3.lcssa, align 8, !tbaa !39
  store <2 x double> <double 0x3FA5C53B3ED424D4, double 0xBFBA477C4665D2E6>, ptr %129, align 8, !tbaa !39
  %130 = load double, ptr getelementptr inbounds ([256 x double], ptr @enwindow, i64 0, i64 248), align 16, !tbaa !39
  call void @llvm.lifetime.start.p0(i64 248, ptr nonnull %1) #56
  %131 = load double, ptr @enwindow, align 16, !tbaa !39
  %132 = fdiv double %131, %130
  %133 = getelementptr inbounds [31 x double], ptr %1, i64 0, i64 15
  store double %132, ptr %133, align 8, !tbaa !39
  br label %134

134:                                              ; preds = %134, %128
  %135 = phi i32 [ 0, %128 ], [ %142, %134 ]
  %136 = phi ptr [ @enwindow, %128 ], [ %141, %134 ]
  %137 = phi ptr [ getelementptr inbounds ([256 x double], ptr @enwindow, i64 0, i64 1), %128 ], [ %138, %134 ]
  %138 = getelementptr inbounds double, ptr %137, i64 1
  %139 = load double, ptr %137, align 8, !tbaa !39
  %140 = fdiv double %139, %131
  %141 = getelementptr inbounds double, ptr %136, i64 1
  store double %140, ptr %136, align 8, !tbaa !39
  %142 = add nuw nsw i32 %135, 1
  %143 = icmp eq i32 %142, 7
  br i1 %143, label %144, label %134, !llvm.loop !458

144:                                              ; preds = %164, %134
  %145 = phi i64 [ %165, %164 ], [ 14, %134 ]
  %146 = phi ptr [ %.lcssa2, %164 ], [ %141, %134 ]
  %147 = phi ptr [ %.lcssa1, %164 ], [ %138, %134 ]
  %148 = load double, ptr %147, align 8, !tbaa !39
  %149 = fdiv double %148, %130
  %150 = sub nuw nsw i64 30, %145
  %151 = getelementptr inbounds [31 x double], ptr %1, i64 0, i64 %150
  store double %149, ptr %151, align 8, !tbaa !39
  %152 = getelementptr inbounds [31 x double], ptr %1, i64 0, i64 %145
  store double %149, ptr %152, align 8, !tbaa !39
  %153 = getelementptr inbounds double, ptr %147, i64 1
  br label %154

154:                                              ; preds = %154, %144
  %155 = phi ptr [ %153, %144 ], [ %162, %154 ]
  %156 = phi i32 [ 0, %144 ], [ %161, %154 ]
  %157 = phi ptr [ %146, %144 ], [ %160, %154 ]
  %158 = load double, ptr %155, align 8, !tbaa !39
  %159 = fdiv double %158, %148
  %160 = getelementptr inbounds double, ptr %157, i64 1
  store double %159, ptr %157, align 8, !tbaa !39
  %161 = add nuw nsw i32 %156, 1
  %162 = getelementptr inbounds double, ptr %155, i64 1
  %163 = icmp eq i32 %161, 15
  br i1 %163, label %164, label %154, !llvm.loop !459

164:                                              ; preds = %154
  %.lcssa2 = phi ptr [ %160, %154 ]
  %.lcssa1 = phi ptr [ %162, %154 ]
  %165 = add nsw i64 %145, -1
  %166 = icmp eq i64 %145, 0
  br i1 %166, label %167, label %144, !llvm.loop !460

167:                                              ; preds = %167, %164
  %168 = phi i32 [ %175, %167 ], [ 0, %164 ]
  %169 = phi ptr [ %174, %167 ], [ %.lcssa2, %164 ]
  %170 = phi ptr [ %171, %167 ], [ %.lcssa1, %164 ]
  %171 = getelementptr inbounds double, ptr %170, i64 1
  %172 = load double, ptr %171, align 8, !tbaa !39
  %173 = fdiv double %172, %130
  %174 = getelementptr inbounds double, ptr %169, i64 1
  store double %173, ptr %169, align 8, !tbaa !39
  %175 = add nuw nsw i32 %168, 1
  %176 = icmp eq i32 %175, 7
  br i1 %176, label %177, label %167, !llvm.loop !461

177:                                              ; preds = %198, %167
  %178 = phi i64 [ %199, %198 ], [ 15, %167 ]
  %179 = phi ptr [ %.lcssa, %198 ], [ @mm, %167 ]
  %180 = shl nuw nsw i64 %178, 1
  %181 = or i64 %180, 1
  br label %182

182:                                              ; preds = %182, %177
  %183 = phi i64 [ 1, %177 ], [ %196, %182 ]
  %184 = phi ptr [ %179, %177 ], [ %195, %182 ]
  %185 = mul nuw nsw i64 %183, %181
  %186 = trunc i64 %185 to i32
  %187 = sitofp i32 %186 to double
  %188 = fmul double %187, 0x400921FB54442D18
  %189 = fmul double %188, 1.562500e-02
  %190 = tail call double @cos(double noundef %189) #55
  %191 = add nsw i64 %183, -1
  %192 = getelementptr inbounds [31 x double], ptr %1, i64 0, i64 %191
  %193 = load double, ptr %192, align 8, !tbaa !39
  %194 = fmul double %190, %193
  %195 = getelementptr inbounds double, ptr %184, i64 1
  store double %194, ptr %184, align 8, !tbaa !39
  %196 = add nuw nsw i64 %183, 1
  %197 = icmp eq i64 %196, 32
  br i1 %197, label %198, label %182, !llvm.loop !462

198:                                              ; preds = %182
  %.lcssa = phi ptr [ %195, %182 ]
  %199 = add nsw i64 %178, -1
  %200 = icmp eq i64 %178, 0
  br i1 %200, label %201, label %177, !llvm.loop !463

201:                                              ; preds = %198
  call void @llvm.lifetime.end.p0(i64 248, ptr nonnull %1) #56
  br label %219

202:                                              ; preds = %219
  %203 = fmul double %130, 0x3F00000000000000
  %204 = insertelement <2 x double> poison, double %203, i64 0
  %205 = shufflevector <2 x double> %204, <2 x double> poison, <2 x i32> zeroinitializer
  br label %206

206:                                              ; preds = %206, %202
  %207 = phi i64 [ 0, %202 ], [ %217, %206 ]
  %208 = getelementptr inbounds [36 x double], ptr @win.198, i64 0, i64 %207
  %209 = load <2 x double>, ptr %208, align 16, !tbaa !39
  %210 = fmul <2 x double> %205, %209
  store <2 x double> %210, ptr %208, align 16, !tbaa !39
  %211 = getelementptr inbounds [4 x [36 x double]], ptr @win.198, i64 0, i64 1, i64 %207
  %212 = load <2 x double>, ptr %211, align 16, !tbaa !39
  %213 = fmul <2 x double> %205, %212
  store <2 x double> %213, ptr %211, align 16, !tbaa !39
  %214 = getelementptr inbounds [4 x [36 x double]], ptr @win.198, i64 0, i64 3, i64 %207
  %215 = load <2 x double>, ptr %214, align 16, !tbaa !39
  %216 = fmul <2 x double> %205, %215
  store <2 x double> %216, ptr %214, align 16, !tbaa !39
  %217 = add nuw i64 %207, 2
  %218 = icmp eq i64 %217, 36
  br i1 %218, label %251, label %206, !llvm.loop !464

219:                                              ; preds = %219, %201
  %220 = phi i64 [ 0, %201 ], [ %249, %219 ]
  %221 = sub nuw nsw i64 17, %220
  %222 = getelementptr inbounds [36 x double], ptr @win.198, i64 0, i64 %221
  %223 = load double, ptr %222, align 8, !tbaa !39
  %224 = add nuw nsw i64 %220, 9
  %225 = getelementptr inbounds [36 x double], ptr @win.198, i64 0, i64 %224
  %226 = load double, ptr %225, align 8, !tbaa !39
  store double %226, ptr %222, align 8, !tbaa !39
  store double %223, ptr %225, align 8, !tbaa !39
  %227 = sub nuw nsw i64 35, %220
  %228 = getelementptr inbounds [36 x double], ptr @win.198, i64 0, i64 %227
  %229 = load double, ptr %228, align 8, !tbaa !39
  %230 = add nuw nsw i64 %220, 27
  %231 = getelementptr inbounds [36 x double], ptr @win.198, i64 0, i64 %230
  %232 = load double, ptr %231, align 8, !tbaa !39
  store double %232, ptr %228, align 8, !tbaa !39
  store double %229, ptr %231, align 8, !tbaa !39
  %233 = getelementptr inbounds [4 x [36 x double]], ptr @win.198, i64 0, i64 1, i64 %221
  %234 = load double, ptr %233, align 8, !tbaa !39
  %235 = getelementptr inbounds [4 x [36 x double]], ptr @win.198, i64 0, i64 1, i64 %224
  %236 = load double, ptr %235, align 8, !tbaa !39
  store double %236, ptr %233, align 8, !tbaa !39
  store double %234, ptr %235, align 8, !tbaa !39
  %237 = getelementptr inbounds [4 x [36 x double]], ptr @win.198, i64 0, i64 1, i64 %227
  %238 = load double, ptr %237, align 8, !tbaa !39
  %239 = getelementptr inbounds [4 x [36 x double]], ptr @win.198, i64 0, i64 1, i64 %230
  %240 = load double, ptr %239, align 8, !tbaa !39
  store double %240, ptr %237, align 8, !tbaa !39
  store double %238, ptr %239, align 8, !tbaa !39
  %241 = getelementptr inbounds [4 x [36 x double]], ptr @win.198, i64 0, i64 3, i64 %221
  %242 = load double, ptr %241, align 8, !tbaa !39
  %243 = getelementptr inbounds [4 x [36 x double]], ptr @win.198, i64 0, i64 3, i64 %224
  %244 = load double, ptr %243, align 8, !tbaa !39
  store double %244, ptr %241, align 8, !tbaa !39
  store double %242, ptr %243, align 8, !tbaa !39
  %245 = getelementptr inbounds [4 x [36 x double]], ptr @win.198, i64 0, i64 3, i64 %227
  %246 = load double, ptr %245, align 8, !tbaa !39
  %247 = getelementptr inbounds [4 x [36 x double]], ptr @win.198, i64 0, i64 3, i64 %230
  %248 = load double, ptr %247, align 8, !tbaa !39
  store double %248, ptr %245, align 8, !tbaa !39
  store double %246, ptr %247, align 8, !tbaa !39
  %249 = add nuw nsw i64 %220, 1
  %250 = icmp eq i64 %249, 4
  br i1 %250, label %202, label %219, !llvm.loop !465

251:                                              ; preds = %288, %206
  %252 = phi i64 [ %289, %288 ], [ 0, %206 ]
  %253 = trunc i64 %252 to i32
  %254 = sitofp i32 %253 to double
  %255 = fadd double %254, 5.000000e-01
  %256 = fmul double %255, 0x3FD0C152382D7365
  %257 = tail call double @cos(double noundef %256) #55
  %258 = fmul double %130, %257
  %259 = fmul double %258, 0x3F00000000000000
  %260 = fmul double %259, 0x3FD5555555555555
  %261 = tail call double @tan(double noundef %256) #55
  %262 = getelementptr inbounds [4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 %252
  store double %261, ptr %262, align 8, !tbaa !39
  %263 = shl nsw i64 %252, 2
  %264 = trunc i64 %263 to i32
  %265 = add i32 %264, 14
  %266 = sitofp i32 %265 to double
  %267 = trunc i64 %263 to i32
  %268 = add i32 %267, 38
  %269 = sitofp i32 %268 to double
  %270 = add nuw nsw i64 %252, 3
  br label %271

271:                                              ; preds = %271, %251
  %272 = phi i64 [ 0, %251 ], [ %286, %271 ]
  %273 = trunc i64 %272 to i32
  %274 = shl i32 %273, 1
  %275 = or i32 %274, 1
  %276 = sitofp i32 %275 to double
  %277 = fmul double %276, 0x3FB0C152382D7365
  %278 = fmul double %277, %266
  %279 = tail call double @cos(double noundef %278) #55
  %280 = fmul double %260, %279
  %281 = getelementptr inbounds [6 x [6 x double]], ptr @cos_s, i64 0, i64 %272, i64 %252
  store double %280, ptr %281, align 8, !tbaa !39
  %282 = fmul double %277, %269
  %283 = tail call double @cos(double noundef %282) #55
  %284 = fmul double %260, %283
  %285 = getelementptr inbounds [6 x [6 x double]], ptr @cos_s, i64 0, i64 %272, i64 %270
  store double %284, ptr %285, align 8, !tbaa !39
  %286 = add nuw nsw i64 %272, 1
  %287 = icmp eq i64 %286, 6
  br i1 %287, label %288, label %271, !llvm.loop !466

288:                                              ; preds = %271
  %289 = add nuw nsw i64 %252, 1
  %290 = icmp eq i64 %289, 3
  br i1 %290, label %291, label %251, !llvm.loop !467

291:                                              ; preds = %288
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal fastcc void @window_subband(ptr noundef readonly %0, ptr nocapture noundef writeonly %1) unnamed_addr #15 {
  %3 = getelementptr inbounds i16, ptr %0, i64 255
  %4 = load i16, ptr %3, align 2, !tbaa !41
  %5 = sitofp i16 %4 to double
  %6 = getelementptr inbounds i16, ptr %0, i64 223
  %7 = load i16, ptr %6, align 2, !tbaa !41
  %8 = sext i16 %7 to i32
  %9 = getelementptr inbounds i16, ptr %0, i64 287
  %10 = load i16, ptr %9, align 2, !tbaa !41
  %11 = sext i16 %10 to i32
  %12 = sub nsw i32 %8, %11
  %13 = sitofp i32 %12 to double
  %14 = load double, ptr @enwindow, align 16, !tbaa !39
  %15 = tail call double @llvm.fmuladd.f64(double %13, double %14, double %5)
  %16 = getelementptr inbounds i16, ptr %0, i64 191
  %17 = load i16, ptr %16, align 2, !tbaa !41
  %18 = sext i16 %17 to i32
  %19 = getelementptr inbounds i16, ptr %0, i64 319
  %20 = load i16, ptr %19, align 2, !tbaa !41
  %21 = sext i16 %20 to i32
  %22 = add nsw i32 %21, %18
  %23 = sitofp i32 %22 to double
  %24 = load double, ptr getelementptr inbounds ([256 x double], ptr @enwindow, i64 0, i64 1), align 8, !tbaa !39
  %25 = tail call double @llvm.fmuladd.f64(double %23, double %24, double %15)
  %26 = getelementptr inbounds i16, ptr %0, i64 159
  %27 = load i16, ptr %26, align 2, !tbaa !41
  %28 = sext i16 %27 to i32
  %29 = getelementptr inbounds i16, ptr %0, i64 351
  %30 = load i16, ptr %29, align 2, !tbaa !41
  %31 = sext i16 %30 to i32
  %32 = sub nsw i32 %28, %31
  %33 = sitofp i32 %32 to double
  %34 = load double, ptr getelementptr inbounds ([256 x double], ptr @enwindow, i64 0, i64 2), align 16, !tbaa !39
  %35 = tail call double @llvm.fmuladd.f64(double %33, double %34, double %25)
  %36 = getelementptr inbounds i16, ptr %0, i64 127
  %37 = load i16, ptr %36, align 2, !tbaa !41
  %38 = sext i16 %37 to i32
  %39 = getelementptr inbounds i16, ptr %0, i64 383
  %40 = load i16, ptr %39, align 2, !tbaa !41
  %41 = sext i16 %40 to i32
  %42 = add nsw i32 %41, %38
  %43 = sitofp i32 %42 to double
  %44 = load double, ptr getelementptr inbounds ([256 x double], ptr @enwindow, i64 0, i64 3), align 8, !tbaa !39
  %45 = tail call double @llvm.fmuladd.f64(double %43, double %44, double %35)
  %46 = getelementptr inbounds i16, ptr %0, i64 95
  %47 = load i16, ptr %46, align 2, !tbaa !41
  %48 = sext i16 %47 to i32
  %49 = getelementptr inbounds i16, ptr %0, i64 415
  %50 = load i16, ptr %49, align 2, !tbaa !41
  %51 = sext i16 %50 to i32
  %52 = sub nsw i32 %48, %51
  %53 = sitofp i32 %52 to double
  %54 = load double, ptr getelementptr inbounds ([256 x double], ptr @enwindow, i64 0, i64 4), align 16, !tbaa !39
  %55 = tail call double @llvm.fmuladd.f64(double %53, double %54, double %45)
  %56 = getelementptr inbounds i16, ptr %0, i64 63
  %57 = load i16, ptr %56, align 2, !tbaa !41
  %58 = sext i16 %57 to i32
  %59 = getelementptr inbounds i16, ptr %0, i64 447
  %60 = load i16, ptr %59, align 2, !tbaa !41
  %61 = sext i16 %60 to i32
  %62 = add nsw i32 %61, %58
  %63 = sitofp i32 %62 to double
  %64 = load double, ptr getelementptr inbounds ([256 x double], ptr @enwindow, i64 0, i64 5), align 8, !tbaa !39
  %65 = tail call double @llvm.fmuladd.f64(double %63, double %64, double %55)
  %66 = getelementptr inbounds i16, ptr %0, i64 31
  %67 = load i16, ptr %66, align 2, !tbaa !41
  %68 = sext i16 %67 to i32
  %69 = getelementptr inbounds i16, ptr %0, i64 479
  %70 = load i16, ptr %69, align 2, !tbaa !41
  %71 = sext i16 %70 to i32
  %72 = sub nsw i32 %68, %71
  %73 = sitofp i32 %72 to double
  %74 = load double, ptr getelementptr inbounds ([256 x double], ptr @enwindow, i64 0, i64 6), align 16, !tbaa !39
  %75 = tail call double @llvm.fmuladd.f64(double %73, double %74, double %65)
  store double %75, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 19), align 8, !tbaa !39
  br label %76

76:                                               ; preds = %76, %2
  %77 = phi i64 [ 14, %2 ], [ %249, %76 ]
  %78 = phi ptr [ getelementptr inbounds ([256 x double], ptr @enwindow, i64 0, i64 7), %2 ], [ %235, %76 ]
  %79 = getelementptr inbounds i16, ptr %0, i64 %77
  %80 = sub nsw i64 0, %77
  %81 = getelementptr inbounds i16, ptr %0, i64 %80
  %82 = getelementptr inbounds i16, ptr %81, i64 270
  %83 = load i16, ptr %82, align 2, !tbaa !41
  %84 = sitofp i16 %83 to double
  %85 = getelementptr inbounds i16, ptr %79, i64 240
  %86 = load i16, ptr %85, align 2, !tbaa !41
  %87 = sitofp i16 %86 to double
  %88 = getelementptr inbounds double, ptr %78, i64 1
  %89 = load double, ptr %78, align 8, !tbaa !39
  %90 = getelementptr inbounds i16, ptr %81, i64 334
  %91 = load i16, ptr %90, align 2, !tbaa !41
  %92 = sitofp i16 %91 to double
  %93 = tail call double @llvm.fmuladd.f64(double %92, double %89, double %84)
  %94 = getelementptr inbounds i16, ptr %79, i64 176
  %95 = load i16, ptr %94, align 2, !tbaa !41
  %96 = sitofp i16 %95 to double
  %97 = tail call double @llvm.fmuladd.f64(double %96, double %89, double %87)
  %98 = getelementptr inbounds double, ptr %78, i64 2
  %99 = load double, ptr %88, align 8, !tbaa !39
  %100 = getelementptr inbounds i16, ptr %81, i64 398
  %101 = load i16, ptr %100, align 2, !tbaa !41
  %102 = sitofp i16 %101 to double
  %103 = tail call double @llvm.fmuladd.f64(double %102, double %99, double %93)
  %104 = getelementptr inbounds i16, ptr %79, i64 112
  %105 = load i16, ptr %104, align 2, !tbaa !41
  %106 = sitofp i16 %105 to double
  %107 = tail call double @llvm.fmuladd.f64(double %106, double %99, double %97)
  %108 = getelementptr inbounds double, ptr %78, i64 3
  %109 = load double, ptr %98, align 8, !tbaa !39
  %110 = getelementptr inbounds i16, ptr %81, i64 462
  %111 = load i16, ptr %110, align 2, !tbaa !41
  %112 = sitofp i16 %111 to double
  %113 = tail call double @llvm.fmuladd.f64(double %112, double %109, double %103)
  %114 = getelementptr inbounds i16, ptr %79, i64 48
  %115 = load i16, ptr %114, align 2, !tbaa !41
  %116 = sitofp i16 %115 to double
  %117 = tail call double @llvm.fmuladd.f64(double %116, double %109, double %107)
  %118 = getelementptr inbounds double, ptr %78, i64 4
  %119 = load double, ptr %108, align 8, !tbaa !39
  %120 = getelementptr inbounds i16, ptr %81, i64 14
  %121 = load i16, ptr %120, align 2, !tbaa !41
  %122 = sitofp i16 %121 to double
  %123 = tail call double @llvm.fmuladd.f64(double %122, double %119, double %113)
  %124 = getelementptr inbounds i16, ptr %79, i64 496
  %125 = load i16, ptr %124, align 2, !tbaa !41
  %126 = sitofp i16 %125 to double
  %127 = tail call double @llvm.fmuladd.f64(double %126, double %119, double %117)
  %128 = getelementptr inbounds double, ptr %78, i64 5
  %129 = load double, ptr %118, align 8, !tbaa !39
  %130 = getelementptr inbounds i16, ptr %81, i64 78
  %131 = load i16, ptr %130, align 2, !tbaa !41
  %132 = sitofp i16 %131 to double
  %133 = tail call double @llvm.fmuladd.f64(double %132, double %129, double %123)
  %134 = getelementptr inbounds i16, ptr %79, i64 432
  %135 = load i16, ptr %134, align 2, !tbaa !41
  %136 = sitofp i16 %135 to double
  %137 = tail call double @llvm.fmuladd.f64(double %136, double %129, double %127)
  %138 = getelementptr inbounds double, ptr %78, i64 6
  %139 = load double, ptr %128, align 8, !tbaa !39
  %140 = getelementptr inbounds i16, ptr %81, i64 142
  %141 = load i16, ptr %140, align 2, !tbaa !41
  %142 = sitofp i16 %141 to double
  %143 = tail call double @llvm.fmuladd.f64(double %142, double %139, double %133)
  %144 = getelementptr inbounds i16, ptr %79, i64 368
  %145 = load i16, ptr %144, align 2, !tbaa !41
  %146 = sitofp i16 %145 to double
  %147 = tail call double @llvm.fmuladd.f64(double %146, double %139, double %137)
  %148 = getelementptr inbounds double, ptr %78, i64 7
  %149 = load double, ptr %138, align 8, !tbaa !39
  %150 = getelementptr inbounds i16, ptr %81, i64 206
  %151 = load i16, ptr %150, align 2, !tbaa !41
  %152 = sitofp i16 %151 to double
  %153 = tail call double @llvm.fmuladd.f64(double %152, double %149, double %143)
  %154 = getelementptr inbounds i16, ptr %79, i64 304
  %155 = load i16, ptr %154, align 2, !tbaa !41
  %156 = sitofp i16 %155 to double
  %157 = tail call double @llvm.fmuladd.f64(double %156, double %149, double %147)
  %158 = getelementptr inbounds double, ptr %78, i64 8
  %159 = load double, ptr %148, align 8, !tbaa !39
  %160 = getelementptr inbounds i16, ptr %79, i64 16
  %161 = load i16, ptr %160, align 2, !tbaa !41
  %162 = sitofp i16 %161 to double
  %163 = tail call double @llvm.fmuladd.f64(double %162, double %159, double %153)
  %164 = getelementptr inbounds i16, ptr %81, i64 494
  %165 = load i16, ptr %164, align 2, !tbaa !41
  %166 = sitofp i16 %165 to double
  %167 = fneg double %166
  %168 = tail call double @llvm.fmuladd.f64(double %167, double %159, double %157)
  %169 = getelementptr inbounds double, ptr %78, i64 9
  %170 = load double, ptr %158, align 8, !tbaa !39
  %171 = getelementptr inbounds i16, ptr %79, i64 80
  %172 = load i16, ptr %171, align 2, !tbaa !41
  %173 = sitofp i16 %172 to double
  %174 = tail call double @llvm.fmuladd.f64(double %173, double %170, double %163)
  %175 = getelementptr inbounds i16, ptr %81, i64 430
  %176 = load i16, ptr %175, align 2, !tbaa !41
  %177 = sitofp i16 %176 to double
  %178 = fneg double %177
  %179 = tail call double @llvm.fmuladd.f64(double %178, double %170, double %168)
  %180 = getelementptr inbounds double, ptr %78, i64 10
  %181 = load double, ptr %169, align 8, !tbaa !39
  %182 = getelementptr inbounds i16, ptr %79, i64 144
  %183 = load i16, ptr %182, align 2, !tbaa !41
  %184 = sitofp i16 %183 to double
  %185 = tail call double @llvm.fmuladd.f64(double %184, double %181, double %174)
  %186 = getelementptr inbounds i16, ptr %81, i64 366
  %187 = load i16, ptr %186, align 2, !tbaa !41
  %188 = sitofp i16 %187 to double
  %189 = fneg double %188
  %190 = tail call double @llvm.fmuladd.f64(double %189, double %181, double %179)
  %191 = getelementptr inbounds double, ptr %78, i64 11
  %192 = load double, ptr %180, align 8, !tbaa !39
  %193 = getelementptr inbounds i16, ptr %79, i64 208
  %194 = load i16, ptr %193, align 2, !tbaa !41
  %195 = sitofp i16 %194 to double
  %196 = tail call double @llvm.fmuladd.f64(double %195, double %192, double %185)
  %197 = getelementptr inbounds i16, ptr %81, i64 302
  %198 = load i16, ptr %197, align 2, !tbaa !41
  %199 = sitofp i16 %198 to double
  %200 = fneg double %199
  %201 = tail call double @llvm.fmuladd.f64(double %200, double %192, double %190)
  %202 = getelementptr inbounds double, ptr %78, i64 12
  %203 = load double, ptr %191, align 8, !tbaa !39
  %204 = getelementptr inbounds i16, ptr %79, i64 272
  %205 = load i16, ptr %204, align 2, !tbaa !41
  %206 = sitofp i16 %205 to double
  %207 = fneg double %206
  %208 = tail call double @llvm.fmuladd.f64(double %207, double %203, double %196)
  %209 = getelementptr inbounds i16, ptr %81, i64 238
  %210 = load i16, ptr %209, align 2, !tbaa !41
  %211 = sitofp i16 %210 to double
  %212 = tail call double @llvm.fmuladd.f64(double %211, double %203, double %201)
  %213 = getelementptr inbounds double, ptr %78, i64 13
  %214 = load double, ptr %202, align 8, !tbaa !39
  %215 = getelementptr inbounds i16, ptr %79, i64 336
  %216 = load i16, ptr %215, align 2, !tbaa !41
  %217 = sitofp i16 %216 to double
  %218 = fneg double %217
  %219 = tail call double @llvm.fmuladd.f64(double %218, double %214, double %208)
  %220 = getelementptr inbounds i16, ptr %81, i64 174
  %221 = load i16, ptr %220, align 2, !tbaa !41
  %222 = sitofp i16 %221 to double
  %223 = tail call double @llvm.fmuladd.f64(double %222, double %214, double %212)
  %224 = getelementptr inbounds double, ptr %78, i64 14
  %225 = load double, ptr %213, align 8, !tbaa !39
  %226 = getelementptr inbounds i16, ptr %79, i64 400
  %227 = load i16, ptr %226, align 2, !tbaa !41
  %228 = sitofp i16 %227 to double
  %229 = fneg double %228
  %230 = tail call double @llvm.fmuladd.f64(double %229, double %225, double %219)
  %231 = getelementptr inbounds i16, ptr %81, i64 110
  %232 = load i16, ptr %231, align 2, !tbaa !41
  %233 = sitofp i16 %232 to double
  %234 = tail call double @llvm.fmuladd.f64(double %233, double %225, double %223)
  %235 = getelementptr inbounds double, ptr %78, i64 15
  %236 = load double, ptr %224, align 8, !tbaa !39
  %237 = getelementptr inbounds i16, ptr %79, i64 464
  %238 = load i16, ptr %237, align 2, !tbaa !41
  %239 = sitofp i16 %238 to double
  %240 = fneg double %239
  %241 = tail call double @llvm.fmuladd.f64(double %240, double %236, double %230)
  %242 = getelementptr inbounds i16, ptr %81, i64 46
  %243 = load i16, ptr %242, align 2, !tbaa !41
  %244 = sitofp i16 %243 to double
  %245 = tail call double @llvm.fmuladd.f64(double %244, double %236, double %234)
  %246 = sub nuw nsw i64 30, %77
  %247 = getelementptr inbounds double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 4), i64 %246
  store double %241, ptr %247, align 8, !tbaa !39
  %248 = getelementptr inbounds double, ptr getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 4), i64 %77
  store double %245, ptr %248, align 8, !tbaa !39
  %249 = add nsw i64 %77, -1
  %250 = icmp eq i64 %77, 0
  br i1 %250, label %251, label %76, !llvm.loop !468

251:                                              ; preds = %76
  %.lcssa3 = phi ptr [ %78, %76 ]
  %.lcssa2 = phi ptr [ %235, %76 ]
  %.lcssa1 = phi double [ %245, %76 ]
  %252 = getelementptr inbounds i16, ptr %0, i64 239
  %253 = load i16, ptr %252, align 2, !tbaa !41
  %254 = sitofp i16 %253 to double
  %255 = getelementptr inbounds i16, ptr %0, i64 175
  %256 = load i16, ptr %255, align 2, !tbaa !41
  %257 = sitofp i16 %256 to double
  %258 = getelementptr inbounds double, ptr %.lcssa3, i64 16
  %259 = load double, ptr %.lcssa2, align 8, !tbaa !39
  %260 = tail call double @llvm.fmuladd.f64(double %257, double %259, double %254)
  %261 = getelementptr inbounds i16, ptr %0, i64 111
  %262 = load i16, ptr %261, align 2, !tbaa !41
  %263 = sitofp i16 %262 to double
  %264 = getelementptr inbounds double, ptr %.lcssa3, i64 17
  %265 = load double, ptr %258, align 8, !tbaa !39
  %266 = tail call double @llvm.fmuladd.f64(double %263, double %265, double %260)
  %267 = getelementptr inbounds i16, ptr %0, i64 47
  %268 = load i16, ptr %267, align 2, !tbaa !41
  %269 = sitofp i16 %268 to double
  %270 = getelementptr inbounds double, ptr %.lcssa3, i64 18
  %271 = load double, ptr %264, align 8, !tbaa !39
  %272 = tail call double @llvm.fmuladd.f64(double %269, double %271, double %266)
  %273 = getelementptr inbounds i16, ptr %0, i64 303
  %274 = load i16, ptr %273, align 2, !tbaa !41
  %275 = sitofp i16 %274 to double
  %276 = getelementptr inbounds double, ptr %.lcssa3, i64 19
  %277 = load double, ptr %270, align 8, !tbaa !39
  %278 = fneg double %275
  %279 = tail call double @llvm.fmuladd.f64(double %278, double %277, double %272)
  %280 = getelementptr inbounds i16, ptr %0, i64 367
  %281 = load i16, ptr %280, align 2, !tbaa !41
  %282 = sitofp i16 %281 to double
  %283 = getelementptr inbounds double, ptr %.lcssa3, i64 20
  %284 = load double, ptr %276, align 8, !tbaa !39
  %285 = fneg double %282
  %286 = tail call double @llvm.fmuladd.f64(double %285, double %284, double %279)
  %287 = getelementptr inbounds i16, ptr %0, i64 431
  %288 = load i16, ptr %287, align 2, !tbaa !41
  %289 = sitofp i16 %288 to double
  %290 = getelementptr inbounds double, ptr %.lcssa3, i64 21
  %291 = load double, ptr %283, align 8, !tbaa !39
  %292 = fneg double %289
  %293 = tail call double @llvm.fmuladd.f64(double %292, double %291, double %286)
  %294 = getelementptr inbounds i16, ptr %0, i64 495
  %295 = load i16, ptr %294, align 2, !tbaa !41
  %296 = sitofp i16 %295 to double
  %297 = load double, ptr %290, align 8, !tbaa !39
  %298 = fneg double %296
  %299 = tail call double @llvm.fmuladd.f64(double %298, double %297, double %293)
  %300 = insertelement <2 x double> poison, double %299, i64 0
  br label %301

301:                                              ; preds = %320, %251
  %302 = phi i64 [ 15, %251 ], [ %329, %320 ]
  %303 = phi ptr [ @mm, %251 ], [ %321, %320 ]
  %304 = getelementptr inbounds double, ptr %303, i64 1
  %305 = load double, ptr %303, align 8, !tbaa !39
  %306 = fmul double %.lcssa1, %305
  %307 = insertelement <2 x double> %300, double %306, i64 1
  br label %308

308:                                              ; preds = %308, %301
  %309 = phi i32 [ 14, %301 ], [ %318, %308 ]
  %310 = phi ptr [ getelementptr inbounds ([4 x [36 x double]], ptr @win.198, i64 0, i64 2, i64 5), %301 ], [ %314, %308 ]
  %311 = phi ptr [ %304, %301 ], [ %313, %308 ]
  %312 = phi <2 x double> [ %307, %301 ], [ %317, %308 ]
  %313 = getelementptr inbounds double, ptr %311, i64 2
  %314 = getelementptr inbounds double, ptr %310, i64 2
  %315 = load <2 x double>, ptr %311, align 8, !tbaa !39
  %316 = load <2 x double>, ptr %310, align 8, !tbaa !39
  %317 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %315, <2 x double> %316, <2 x double> %312)
  %318 = add nsw i32 %309, -1
  %319 = icmp eq i32 %309, 0
  br i1 %319, label %320, label %308, !llvm.loop !469

320:                                              ; preds = %308
  %.lcssa = phi <2 x double> [ %317, %308 ]
  %321 = getelementptr i8, ptr %303, i64 248
  %322 = extractelement <2 x double> %.lcssa, i64 0
  %323 = extractelement <2 x double> %.lcssa, i64 1
  %324 = fadd double %322, %323
  %325 = getelementptr inbounds double, ptr %1, i64 %302
  store double %324, ptr %325, align 8, !tbaa !39
  %326 = fsub double %322, %323
  %327 = sub nuw nsw i64 31, %302
  %328 = getelementptr inbounds double, ptr %1, i64 %327
  store double %326, ptr %328, align 8, !tbaa !39
  %329 = add nsw i64 %302, -1
  %330 = icmp eq i64 %302, 0
  br i1 %330, label %331, label %301, !llvm.loop !470

331:                                              ; preds = %320
  ret void
}

; Function Attrs: noreturn nounwind optsize uwtable
define internal void @lame_usage(ptr nocapture readnone %0, ptr noundef %1) #34 {
  %3 = load ptr, ptr @stderr, align 8, !tbaa !7
  tail call void @lame_print_version(ptr noundef %3) #55
  %4 = load ptr, ptr @stderr, align 8, !tbaa !7
  %5 = tail call i32 @fputc(i32 10, ptr %4)
  %6 = load ptr, ptr @stderr, align 8, !tbaa !7
  %7 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %6, ptr noundef nonnull @.str.1.201, ptr noundef %1) #60
  %8 = load ptr, ptr @stderr, align 8, !tbaa !7
  %9 = tail call i64 @fwrite(ptr nonnull @.str.2.202, i64 65, i64 1, ptr %8) #53
  %10 = load ptr, ptr @stderr, align 8, !tbaa !7
  %11 = tail call i32 @fputc(i32 10, ptr %10)
  %12 = load ptr, ptr @stderr, align 8, !tbaa !7
  %13 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %12, ptr noundef nonnull @.str.3.203, ptr noundef %1) #60
  tail call void @exit(i32 noundef 1) #54
  unreachable
}

; Function Attrs: noreturn nounwind optsize uwtable
define internal void @lame_help(ptr nocapture noundef readonly %0, ptr noundef %1) #34 {
  %3 = load ptr, ptr @stdout, align 8, !tbaa !7
  tail call void @lame_print_version(ptr noundef %3) #55
  %4 = load ptr, ptr @stdout, align 8, !tbaa !7
  %5 = tail call i32 @fputc(i32 10, ptr %4)
  %6 = load ptr, ptr @stdout, align 8, !tbaa !7
  %7 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %6, ptr noundef nonnull @.str.1.201, ptr noundef %1) #57
  %8 = load ptr, ptr @stdout, align 8, !tbaa !7
  %9 = tail call i64 @fwrite(ptr nonnull @.str.2.202, i64 65, i64 1, ptr %8)
  %10 = load ptr, ptr @stdout, align 8, !tbaa !7
  %11 = tail call i32 @fputc(i32 10, ptr %10)
  %12 = load ptr, ptr @stdout, align 8, !tbaa !7
  %13 = tail call i64 @fwrite(ptr nonnull @.str.4.204, i64 10, i64 1, ptr %12)
  %14 = load ptr, ptr @stdout, align 8, !tbaa !7
  %15 = tail call i64 @fwrite(ptr nonnull @.str.5.205, i64 17, i64 1, ptr %14)
  %16 = load ptr, ptr @stdout, align 8, !tbaa !7
  %17 = tail call i64 @fwrite(ptr nonnull @.str.6.206, i64 37, i64 1, ptr %16)
  %18 = load ptr, ptr @stdout, align 8, !tbaa !7
  %19 = tail call i64 @fwrite(ptr nonnull @.str.7.207, i64 49, i64 1, ptr %18)
  %20 = load ptr, ptr @stdout, align 8, !tbaa !7
  %21 = tail call i64 @fwrite(ptr nonnull @.str.8.208, i64 76, i64 1, ptr %20)
  %22 = load ptr, ptr @stdout, align 8, !tbaa !7
  %23 = tail call i64 @fwrite(ptr nonnull @.str.9.209, i64 45, i64 1, ptr %22)
  %24 = load ptr, ptr @stdout, align 8, !tbaa !7
  %25 = tail call i32 @fputc(i32 10, ptr %24)
  %26 = load ptr, ptr @stdout, align 8, !tbaa !7
  %27 = tail call i64 @fwrite(ptr nonnull @.str.10.210, i64 18, i64 1, ptr %26)
  %28 = load ptr, ptr @stdout, align 8, !tbaa !7
  %29 = tail call i64 @fwrite(ptr nonnull @.str.11.211, i64 64, i64 1, ptr %28)
  %30 = load ptr, ptr @stdout, align 8, !tbaa !7
  %31 = tail call i64 @fwrite(ptr nonnull @.str.12.212, i64 74, i64 1, ptr %30)
  %32 = load ptr, ptr @stdout, align 8, !tbaa !7
  %33 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %32, ptr noundef nonnull @.str.13.213) #57
  %34 = load ptr, ptr @stdout, align 8, !tbaa !7
  %35 = tail call i64 @fwrite(ptr nonnull @.str.14.214, i64 75, i64 1, ptr %34)
  %36 = load ptr, ptr @stdout, align 8, !tbaa !7
  %37 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %36, ptr noundef nonnull @.str.15.215) #57
  %38 = load ptr, ptr @stdout, align 8, !tbaa !7
  %39 = tail call i64 @fwrite(ptr nonnull @.str.16.216, i64 80, i64 1, ptr %38)
  %40 = load ptr, ptr @stdout, align 8, !tbaa !7
  %41 = tail call i64 @fwrite(ptr nonnull @.str.17.217, i64 72, i64 1, ptr %40)
  %42 = load ptr, ptr @stdout, align 8, !tbaa !7
  %43 = tail call i32 @fputc(i32 10, ptr %42)
  %44 = load ptr, ptr @stdout, align 8, !tbaa !7
  %45 = tail call i64 @fwrite(ptr nonnull @.str.18.218, i64 23, i64 1, ptr %44)
  %46 = load ptr, ptr @stdout, align 8, !tbaa !7
  %47 = tail call i64 @fwrite(ptr nonnull @.str.19.219, i64 70, i64 1, ptr %46)
  %48 = load ptr, ptr @stdout, align 8, !tbaa !7
  %49 = tail call i64 @fwrite(ptr nonnull @.str.20.220, i64 66, i64 1, ptr %48)
  %50 = load ptr, ptr @stdout, align 8, !tbaa !7
  %51 = tail call i64 @fwrite(ptr nonnull @.str.21.221, i64 71, i64 1, ptr %50)
  %52 = load ptr, ptr @stdout, align 8, !tbaa !7
  %53 = tail call i64 @fwrite(ptr nonnull @.str.22.222, i64 64, i64 1, ptr %52)
  %54 = load ptr, ptr @stdout, align 8, !tbaa !7
  %55 = tail call i64 @fwrite(ptr nonnull @.str.23.223, i64 64, i64 1, ptr %54)
  %56 = load ptr, ptr @stdout, align 8, !tbaa !7
  %57 = tail call i64 @fwrite(ptr nonnull @.str.24.224, i64 49, i64 1, ptr %56)
  %58 = load ptr, ptr @stdout, align 8, !tbaa !7
  %59 = tail call i64 @fwrite(ptr nonnull @.str.25.225, i64 48, i64 1, ptr %58)
  %60 = load ptr, ptr @stdout, align 8, !tbaa !7
  %61 = tail call i64 @fwrite(ptr nonnull @.str.26.226, i64 44, i64 1, ptr %60)
  %62 = load ptr, ptr @stdout, align 8, !tbaa !7
  %63 = tail call i64 @fwrite(ptr nonnull @.str.27.227, i64 44, i64 1, ptr %62)
  %64 = load ptr, ptr @stdout, align 8, !tbaa !7
  %65 = tail call i64 @fwrite(ptr nonnull @.str.28.228, i64 76, i64 1, ptr %64)
  %66 = load ptr, ptr @stdout, align 8, !tbaa !7
  %67 = tail call i64 @fwrite(ptr nonnull @.str.29.229, i64 56, i64 1, ptr %66)
  %68 = load ptr, ptr @stdout, align 8, !tbaa !7
  %69 = tail call i32 @fputc(i32 10, ptr %68)
  %70 = load ptr, ptr @stdout, align 8, !tbaa !7
  %71 = tail call i64 @fwrite(ptr nonnull @.str.30.230, i64 47, i64 1, ptr %70)
  %72 = load ptr, ptr @stdout, align 8, !tbaa !7
  %73 = tail call i64 @fwrite(ptr nonnull @.str.31.231, i64 71, i64 1, ptr %72)
  %74 = load ptr, ptr @stdout, align 8, !tbaa !7
  %75 = tail call i64 @fwrite(ptr nonnull @.str.32.232, i64 49, i64 1, ptr %74)
  %76 = load ptr, ptr @stdout, align 8, !tbaa !7
  %77 = tail call i64 @fwrite(ptr nonnull @.str.33.233, i64 53, i64 1, ptr %76)
  %78 = load ptr, ptr @stdout, align 8, !tbaa !7
  %79 = tail call i32 @fputc(i32 10, ptr %78)
  %80 = load ptr, ptr @stdout, align 8, !tbaa !7
  %81 = tail call i64 @fwrite(ptr nonnull @.str.34.234, i64 15, i64 1, ptr %80)
  %82 = load ptr, ptr @stdout, align 8, !tbaa !7
  %83 = tail call i64 @fwrite(ptr nonnull @.str.35.235, i64 47, i64 1, ptr %82)
  %84 = load ptr, ptr @stdout, align 8, !tbaa !7
  %85 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 22
  %86 = load i32, ptr %85, align 4, !tbaa !249
  %87 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %84, ptr noundef nonnull @.str.36.236, i32 noundef %86) #57
  %88 = load ptr, ptr @stdout, align 8, !tbaa !7
  %89 = tail call i64 @fwrite(ptr nonnull @.str.37.237, i64 65, i64 1, ptr %88)
  %90 = load ptr, ptr @stdout, align 8, !tbaa !7
  %91 = tail call i64 @fwrite(ptr nonnull @.str.38.238, i64 67, i64 1, ptr %90)
  %92 = load ptr, ptr @stdout, align 8, !tbaa !7
  %93 = tail call i64 @fwrite(ptr nonnull @.str.39.239, i64 68, i64 1, ptr %92)
  %94 = load ptr, ptr @stdout, align 8, !tbaa !7
  %95 = tail call i64 @fwrite(ptr nonnull @.str.40.240, i64 55, i64 1, ptr %94)
  %96 = load ptr, ptr @stdout, align 8, !tbaa !7
  %97 = tail call i64 @fwrite(ptr nonnull @.str.41.241, i64 50, i64 1, ptr %96)
  %98 = load ptr, ptr @stdout, align 8, !tbaa !7
  %99 = tail call i32 @fputc(i32 10, ptr %98)
  %100 = load ptr, ptr @stdout, align 8, !tbaa !7
  %101 = tail call i64 @fwrite(ptr nonnull @.str.42.242, i64 29, i64 1, ptr %100)
  %102 = load ptr, ptr @stdout, align 8, !tbaa !7
  %103 = tail call i64 @fwrite(ptr nonnull @.str.43.243, i64 50, i64 1, ptr %102)
  %104 = load ptr, ptr @stdout, align 8, !tbaa !7
  %105 = tail call i64 @fwrite(ptr nonnull @.str.44.244, i64 38, i64 1, ptr %104)
  %106 = load ptr, ptr @stdout, align 8, !tbaa !7
  %107 = tail call i64 @fwrite(ptr nonnull @.str.45.245, i64 41, i64 1, ptr %106)
  %108 = load ptr, ptr @stdout, align 8, !tbaa !7
  %109 = tail call i64 @fwrite(ptr nonnull @.str.46.246, i64 74, i64 1, ptr %108)
  %110 = load ptr, ptr @stdout, align 8, !tbaa !7
  %111 = tail call i64 @fwrite(ptr nonnull @.str.47.247, i64 57, i64 1, ptr %110)
  %112 = load ptr, ptr @stdout, align 8, !tbaa !7
  %113 = tail call i64 @fwrite(ptr nonnull @.str.48.248, i64 46, i64 1, ptr %112)
  %114 = load ptr, ptr @stdout, align 8, !tbaa !7
  %115 = tail call i32 @fputc(i32 10, ptr %114)
  %116 = load ptr, ptr @stdout, align 8, !tbaa !7
  %117 = tail call i64 @fwrite(ptr nonnull @.str.49.249, i64 63, i64 1, ptr %116)
  %118 = load ptr, ptr @stdout, align 8, !tbaa !7
  %119 = tail call i64 @fwrite(ptr nonnull @.str.50.250, i64 51, i64 1, ptr %118)
  %120 = load ptr, ptr @stdout, align 8, !tbaa !7
  %121 = tail call i64 @fwrite(ptr nonnull @.str.51.251, i64 61, i64 1, ptr %120)
  %122 = load ptr, ptr @stdout, align 8, !tbaa !7
  %123 = tail call i64 @fwrite(ptr nonnull @.str.52.252, i64 62, i64 1, ptr %122)
  %124 = load ptr, ptr @stdout, align 8, !tbaa !7
  %125 = tail call i64 @fwrite(ptr nonnull @.str.53.253, i64 74, i64 1, ptr %124)
  %126 = load ptr, ptr @stdout, align 8, !tbaa !7
  %127 = tail call i64 @fwrite(ptr nonnull @.str.54.254, i64 53, i64 1, ptr %126)
  %128 = load ptr, ptr @stdout, align 8, !tbaa !7
  %129 = tail call i64 @fwrite(ptr nonnull @.str.55.255, i64 68, i64 1, ptr %128)
  %130 = load ptr, ptr @stdout, align 8, !tbaa !7
  %131 = tail call i64 @fwrite(ptr nonnull @.str.56.256, i64 67, i64 1, ptr %130)
  %132 = load ptr, ptr @stdout, align 8, !tbaa !7
  %133 = tail call i64 @fwrite(ptr nonnull @.str.57.257, i64 66, i64 1, ptr %132)
  %134 = load ptr, ptr @stdout, align 8, !tbaa !7
  %135 = tail call i64 @fwrite(ptr nonnull @.str.58.258, i64 53, i64 1, ptr %134)
  %136 = load ptr, ptr @stdout, align 8, !tbaa !7
  %137 = tail call i32 @fputc(i32 10, ptr %136)
  %138 = load ptr, ptr @stdout, align 8, !tbaa !7
  tail call void @display_bitrates(ptr noundef %138) #55
  tail call void @exit(i32 noundef 0) #54
  unreachable
}

; Function Attrs: noreturn nounwind optsize uwtable
define internal void @lame_presets_info(ptr nocapture readnone %0, ptr nocapture readnone %1) #34 {
  %3 = load ptr, ptr @stdout, align 8, !tbaa !7
  tail call void @lame_print_version(ptr noundef %3) #55
  %4 = load ptr, ptr @stdout, align 8, !tbaa !7
  %5 = tail call i32 @fputc(i32 10, ptr %4)
  %6 = load ptr, ptr @stdout, align 8, !tbaa !7
  %7 = tail call i64 @fwrite(ptr nonnull @.str.59.259, i64 48, i64 1, ptr %6)
  %8 = load ptr, ptr @stdout, align 8, !tbaa !7
  %9 = tail call i64 @fwrite(ptr nonnull @.str.60.260, i64 51, i64 1, ptr %8)
  %10 = load ptr, ptr @stdout, align 8, !tbaa !7
  %11 = tail call i32 @fputc(i32 10, ptr %10)
  %12 = load ptr, ptr @stdout, align 8, !tbaa !7
  %13 = tail call i64 @fwrite(ptr nonnull @.str.61.261, i64 43, i64 1, ptr %12)
  %14 = load ptr, ptr @stdout, align 8, !tbaa !7
  %15 = tail call i64 @fwrite(ptr nonnull @.str.62.262, i64 47, i64 1, ptr %14)
  %16 = load ptr, ptr @stdout, align 8, !tbaa !7
  %17 = tail call i64 @fwrite(ptr nonnull @.str.63.263, i64 47, i64 1, ptr %16)
  %18 = load ptr, ptr @stdout, align 8, !tbaa !7
  %19 = tail call i64 @fwrite(ptr nonnull @.str.64.264, i64 47, i64 1, ptr %18)
  %20 = load ptr, ptr @stdout, align 8, !tbaa !7
  %21 = tail call i64 @fwrite(ptr nonnull @.str.65.265, i64 47, i64 1, ptr %20)
  %22 = load ptr, ptr @stdout, align 8, !tbaa !7
  %23 = tail call i64 @fwrite(ptr nonnull @.str.66.266, i64 34, i64 1, ptr %22)
  %24 = load ptr, ptr @stdout, align 8, !tbaa !7
  %25 = tail call i64 @fwrite(ptr nonnull @.str.67.267, i64 31, i64 1, ptr %24)
  %26 = load ptr, ptr @stdout, align 8, !tbaa !7
  %27 = tail call i64 @fwrite(ptr nonnull @.str.68.268, i64 31, i64 1, ptr %26)
  %28 = load ptr, ptr @stdout, align 8, !tbaa !7
  %29 = tail call i64 @fwrite(ptr nonnull @.str.69.269, i64 34, i64 1, ptr %28)
  %30 = load ptr, ptr @stdout, align 8, !tbaa !7
  %31 = tail call i64 @fwrite(ptr nonnull @.str.70.270, i64 58, i64 1, ptr %30)
  %32 = load ptr, ptr @stdout, align 8, !tbaa !7
  %33 = tail call i64 @fwrite(ptr nonnull @.str.71.271, i64 34, i64 1, ptr %32)
  %34 = load ptr, ptr @stdout, align 8, !tbaa !7
  %35 = tail call i32 @fputc(i32 10, ptr %34)
  %36 = load ptr, ptr @stdout, align 8, !tbaa !7
  %37 = tail call i64 @fwrite(ptr nonnull @.str.72.272, i64 43, i64 1, ptr %36)
  %38 = load ptr, ptr @stdout, align 8, !tbaa !7
  %39 = tail call i64 @fwrite(ptr nonnull @.str.73.273, i64 47, i64 1, ptr %38)
  %40 = load ptr, ptr @stdout, align 8, !tbaa !7
  %41 = tail call i64 @fwrite(ptr nonnull @.str.74.274, i64 47, i64 1, ptr %40)
  %42 = load ptr, ptr @stdout, align 8, !tbaa !7
  %43 = tail call i64 @fwrite(ptr nonnull @.str.75.275, i64 43, i64 1, ptr %42)
  %44 = load ptr, ptr @stdout, align 8, !tbaa !7
  %45 = tail call i64 @fwrite(ptr nonnull @.str.76.276, i64 43, i64 1, ptr %44)
  %46 = load ptr, ptr @stdout, align 8, !tbaa !7
  %47 = tail call i64 @fwrite(ptr nonnull @.str.66.266, i64 34, i64 1, ptr %46)
  %48 = load ptr, ptr @stdout, align 8, !tbaa !7
  %49 = tail call i64 @fwrite(ptr nonnull @.str.67.267, i64 31, i64 1, ptr %48)
  %50 = load ptr, ptr @stdout, align 8, !tbaa !7
  %51 = tail call i64 @fwrite(ptr nonnull @.str.77.277, i64 31, i64 1, ptr %50)
  %52 = load ptr, ptr @stdout, align 8, !tbaa !7
  %53 = tail call i64 @fwrite(ptr nonnull @.str.69.269, i64 34, i64 1, ptr %52)
  %54 = load ptr, ptr @stdout, align 8, !tbaa !7
  %55 = tail call i64 @fwrite(ptr nonnull @.str.78.278, i64 58, i64 1, ptr %54)
  %56 = load ptr, ptr @stdout, align 8, !tbaa !7
  %57 = tail call i64 @fwrite(ptr nonnull @.str.79.279, i64 34, i64 1, ptr %56)
  %58 = load ptr, ptr @stdout, align 8, !tbaa !7
  %59 = tail call i32 @fputc(i32 10, ptr %58)
  %60 = load ptr, ptr @stdout, align 8, !tbaa !7
  %61 = tail call i64 @fwrite(ptr nonnull @.str.80.280, i64 43, i64 1, ptr %60)
  %62 = load ptr, ptr @stdout, align 8, !tbaa !7
  %63 = tail call i64 @fwrite(ptr nonnull @.str.81.281, i64 47, i64 1, ptr %62)
  %64 = load ptr, ptr @stdout, align 8, !tbaa !7
  %65 = tail call i64 @fwrite(ptr nonnull @.str.82.282, i64 43, i64 1, ptr %64)
  %66 = load ptr, ptr @stdout, align 8, !tbaa !7
  %67 = tail call i64 @fwrite(ptr nonnull @.str.83.283, i64 45, i64 1, ptr %66)
  %68 = load ptr, ptr @stdout, align 8, !tbaa !7
  %69 = tail call i64 @fwrite(ptr nonnull @.str.84.284, i64 43, i64 1, ptr %68)
  %70 = load ptr, ptr @stdout, align 8, !tbaa !7
  %71 = tail call i64 @fwrite(ptr nonnull @.str.85.285, i64 31, i64 1, ptr %70)
  %72 = load ptr, ptr @stdout, align 8, !tbaa !7
  %73 = tail call i64 @fwrite(ptr nonnull @.str.86.286, i64 31, i64 1, ptr %72)
  %74 = load ptr, ptr @stdout, align 8, !tbaa !7
  %75 = tail call i64 @fwrite(ptr nonnull @.str.87.287, i64 34, i64 1, ptr %74)
  %76 = load ptr, ptr @stdout, align 8, !tbaa !7
  %77 = tail call i64 @fwrite(ptr nonnull @.str.88.288, i64 58, i64 1, ptr %76)
  %78 = load ptr, ptr @stdout, align 8, !tbaa !7
  %79 = tail call i64 @fwrite(ptr nonnull @.str.79.279, i64 34, i64 1, ptr %78)
  %80 = load ptr, ptr @stdout, align 8, !tbaa !7
  %81 = tail call i32 @fputc(i32 10, ptr %80)
  %82 = load ptr, ptr @stdout, align 8, !tbaa !7
  %83 = tail call i64 @fwrite(ptr nonnull @.str.89.289, i64 43, i64 1, ptr %82)
  %84 = load ptr, ptr @stdout, align 8, !tbaa !7
  %85 = tail call i64 @fwrite(ptr nonnull @.str.76.276, i64 43, i64 1, ptr %84)
  %86 = load ptr, ptr @stdout, align 8, !tbaa !7
  %87 = tail call i64 @fwrite(ptr nonnull @.str.90.290, i64 47, i64 1, ptr %86)
  %88 = load ptr, ptr @stdout, align 8, !tbaa !7
  %89 = tail call i64 @fwrite(ptr nonnull @.str.91.291, i64 47, i64 1, ptr %88)
  %90 = load ptr, ptr @stdout, align 8, !tbaa !7
  %91 = tail call i64 @fwrite(ptr nonnull @.str.85.285, i64 31, i64 1, ptr %90)
  %92 = load ptr, ptr @stdout, align 8, !tbaa !7
  %93 = tail call i64 @fwrite(ptr nonnull @.str.92.292, i64 31, i64 1, ptr %92)
  %94 = load ptr, ptr @stdout, align 8, !tbaa !7
  %95 = tail call i64 @fwrite(ptr nonnull @.str.87.287, i64 34, i64 1, ptr %94)
  %96 = load ptr, ptr @stdout, align 8, !tbaa !7
  %97 = tail call i64 @fwrite(ptr nonnull @.str.88.288, i64 58, i64 1, ptr %96)
  %98 = load ptr, ptr @stdout, align 8, !tbaa !7
  %99 = tail call i64 @fwrite(ptr nonnull @.str.79.279, i64 34, i64 1, ptr %98)
  %100 = load ptr, ptr @stdout, align 8, !tbaa !7
  %101 = tail call i32 @fputc(i32 10, ptr %100)
  %102 = load ptr, ptr @stdout, align 8, !tbaa !7
  %103 = tail call i64 @fwrite(ptr nonnull @.str.93.293, i64 43, i64 1, ptr %102)
  %104 = load ptr, ptr @stdout, align 8, !tbaa !7
  %105 = tail call i64 @fwrite(ptr nonnull @.str.94.294, i64 43, i64 1, ptr %104)
  %106 = load ptr, ptr @stdout, align 8, !tbaa !7
  %107 = tail call i64 @fwrite(ptr nonnull @.str.90.290, i64 47, i64 1, ptr %106)
  %108 = load ptr, ptr @stdout, align 8, !tbaa !7
  %109 = tail call i64 @fwrite(ptr nonnull @.str.91.291, i64 47, i64 1, ptr %108)
  %110 = load ptr, ptr @stdout, align 8, !tbaa !7
  %111 = tail call i64 @fwrite(ptr nonnull @.str.95.295, i64 27, i64 1, ptr %110)
  %112 = load ptr, ptr @stdout, align 8, !tbaa !7
  %113 = tail call i64 @fwrite(ptr nonnull @.str.85.285, i64 31, i64 1, ptr %112)
  %114 = load ptr, ptr @stdout, align 8, !tbaa !7
  %115 = tail call i64 @fwrite(ptr nonnull @.str.96.296, i64 31, i64 1, ptr %114)
  %116 = load ptr, ptr @stdout, align 8, !tbaa !7
  %117 = tail call i64 @fwrite(ptr nonnull @.str.87.287, i64 34, i64 1, ptr %116)
  %118 = load ptr, ptr @stdout, align 8, !tbaa !7
  %119 = tail call i64 @fwrite(ptr nonnull @.str.97.297, i64 58, i64 1, ptr %118)
  %120 = load ptr, ptr @stdout, align 8, !tbaa !7
  %121 = tail call i64 @fwrite(ptr nonnull @.str.98.298, i64 34, i64 1, ptr %120)
  %122 = load ptr, ptr @stdout, align 8, !tbaa !7
  %123 = tail call i32 @fputc(i32 10, ptr %122)
  %124 = load ptr, ptr @stdout, align 8, !tbaa !7
  %125 = tail call i64 @fwrite(ptr nonnull @.str.99.299, i64 27, i64 1, ptr %124)
  %126 = load ptr, ptr @stdout, align 8, !tbaa !7
  %127 = tail call i64 @fwrite(ptr nonnull @.str.95.295, i64 27, i64 1, ptr %126)
  %128 = load ptr, ptr @stdout, align 8, !tbaa !7
  %129 = tail call i64 @fwrite(ptr nonnull @.str.100.300, i64 31, i64 1, ptr %128)
  %130 = load ptr, ptr @stdout, align 8, !tbaa !7
  %131 = tail call i64 @fwrite(ptr nonnull @.str.101.301, i64 31, i64 1, ptr %130)
  %132 = load ptr, ptr @stdout, align 8, !tbaa !7
  %133 = tail call i64 @fwrite(ptr nonnull @.str.102.302, i64 34, i64 1, ptr %132)
  %134 = load ptr, ptr @stdout, align 8, !tbaa !7
  %135 = tail call i64 @fwrite(ptr nonnull @.str.103.303, i64 58, i64 1, ptr %134)
  %136 = load ptr, ptr @stdout, align 8, !tbaa !7
  %137 = tail call i64 @fwrite(ptr nonnull @.str.104.304, i64 34, i64 1, ptr %136)
  %138 = load ptr, ptr @stdout, align 8, !tbaa !7
  %139 = tail call i32 @fputc(i32 10, ptr %138)
  %140 = load ptr, ptr @stdout, align 8, !tbaa !7
  %141 = tail call i64 @fwrite(ptr nonnull @.str.105.305, i64 27, i64 1, ptr %140)
  %142 = load ptr, ptr @stdout, align 8, !tbaa !7
  %143 = tail call i64 @fwrite(ptr nonnull @.str.95.295, i64 27, i64 1, ptr %142)
  %144 = load ptr, ptr @stdout, align 8, !tbaa !7
  %145 = tail call i64 @fwrite(ptr nonnull @.str.100.300, i64 31, i64 1, ptr %144)
  %146 = load ptr, ptr @stdout, align 8, !tbaa !7
  %147 = tail call i64 @fwrite(ptr nonnull @.str.106.306, i64 31, i64 1, ptr %146)
  %148 = load ptr, ptr @stdout, align 8, !tbaa !7
  %149 = tail call i64 @fwrite(ptr nonnull @.str.107.307, i64 34, i64 1, ptr %148)
  %150 = load ptr, ptr @stdout, align 8, !tbaa !7
  %151 = tail call i64 @fwrite(ptr nonnull @.str.108.308, i64 58, i64 1, ptr %150)
  %152 = load ptr, ptr @stdout, align 8, !tbaa !7
  %153 = tail call i64 @fwrite(ptr nonnull @.str.109.309, i64 34, i64 1, ptr %152)
  %154 = load ptr, ptr @stdout, align 8, !tbaa !7
  %155 = tail call i32 @fputc(i32 10, ptr %154)
  tail call void @exit(i32 noundef 0) #54
  unreachable
}

; Function Attrs: nounwind optsize uwtable
define internal void @lame_parse_args(ptr noundef %0, i32 noundef %1, ptr nocapture noundef readonly %2) #4 {
  %4 = alloca ptr, align 8
  %5 = load ptr, ptr %2, align 8, !tbaa !7
  store i8 0, ptr @inPath, align 16, !tbaa !15
  store i8 0, ptr @outPath, align 16, !tbaa !15
  %6 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 31
  store ptr @inPath, ptr %6, align 8, !tbaa !122
  %7 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 32
  store ptr @outPath, ptr %7, align 8, !tbaa !271
  tail call void @id3_inittag(ptr noundef nonnull @id3tag) #55
  store i32 0, ptr @id3tag, align 4, !tbaa !272
  %8 = icmp sgt i32 %1, 1
  br i1 %8, label %9, label %409

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 13
  %11 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 12
  %12 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 38
  %13 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 6
  %14 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 20
  %15 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 19
  %16 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 18
  %17 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 7
  %18 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 21
  %19 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 36
  %20 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 25
  %21 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 26
  %22 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 8
  %23 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 9
  %24 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 14
  %25 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 30
  %26 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 29
  %27 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 5
  %28 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 24
  %29 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 11
  %30 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 23
  %31 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 2
  %32 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 22
  %33 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 10
  %34 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 28
  %35 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 27
  %36 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 37
  %37 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 3
  %38 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 35
  %39 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 33
  %40 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 17
  %41 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 44
  %42 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 34
  br label %43

43:                                               ; preds = %400, %9
  %44 = phi i32 [ 1, %9 ], [ %405, %400 ]
  %45 = phi i32 [ 0, %9 ], [ %404, %400 ]
  %46 = phi i32 [ 0, %9 ], [ %403, %400 ]
  %47 = phi i32 [ 0, %9 ], [ %402, %400 ]
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #56
  %48 = sext i32 %44 to i64
  %49 = getelementptr inbounds ptr, ptr %2, i64 %48
  %50 = load ptr, ptr %49, align 8, !tbaa !7
  %51 = getelementptr inbounds i8, ptr %50, i64 1
  store ptr %51, ptr %4, align 8, !tbaa !7
  %52 = load i8, ptr %50, align 1, !tbaa !15
  %53 = icmp eq i8 %52, 45
  br i1 %53, label %54, label %387

54:                                               ; preds = %43
  %55 = add nsw i32 %47, 2
  %56 = icmp slt i32 %55, %1
  br i1 %56, label %57, label %61

57:                                               ; preds = %54
  %58 = sext i32 %55 to i64
  %59 = getelementptr inbounds ptr, ptr %2, i64 %58
  %60 = load ptr, ptr %59, align 8, !tbaa !7
  br label %61

61:                                               ; preds = %57, %54
  %62 = phi ptr [ %60, %57 ], [ @.str.110.312, %54 ]
  %63 = load i8, ptr %51, align 1, !tbaa !15
  %64 = icmp eq i8 %63, 0
  br i1 %64, label %65, label %76

65:                                               ; preds = %61
  %66 = load i8, ptr @inPath, align 16, !tbaa !15
  %67 = icmp eq i8 %66, 0
  br i1 %67, label %71, label %68

68:                                               ; preds = %65
  %69 = load i8, ptr @outPath, align 16, !tbaa !15
  %70 = icmp eq i8 %69, 0
  br i1 %70, label %71, label %74

71:                                               ; preds = %68, %65
  %72 = phi ptr [ @inPath, %65 ], [ @outPath, %68 ]
  %73 = tail call ptr @strncpy(ptr noundef nonnull dereferenceable(1) %72, ptr noundef nonnull dereferenceable(1) %50, i64 noundef 300) #55
  br label %74

74:                                               ; preds = %71, %68
  %75 = load i8, ptr %51, align 1, !tbaa !15
  br label %76

76:                                               ; preds = %74, %61
  %77 = phi i8 [ %75, %74 ], [ %63, %61 ]
  %78 = getelementptr inbounds i8, ptr %50, i64 2
  switch i8 %77, label %291 [
    i8 45, label %79
    i8 0, label %400
  ]

79:                                               ; preds = %76
  store ptr %78, ptr %4, align 8, !tbaa !7
  %80 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %78, ptr noundef nonnull dereferenceable(9) @.str.111.313) #59
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %92

82:                                               ; preds = %79
  %83 = tail call double @atof(ptr noundef %62) #59
  %84 = fptrunc double %83 to float
  %85 = fpext float %84 to double
  %86 = tail call double @llvm.fmuladd.f64(double %85, double 1.000000e+03, double 5.000000e-01)
  %87 = fptosi double %86 to i32
  store i32 %87, ptr %37, align 8, !tbaa !243
  %88 = fcmp olt float %84, 1.000000e+00
  br i1 %88, label %89, label %288

89:                                               ; preds = %82
  %90 = load ptr, ptr @stderr, align 8, !tbaa !7
  %91 = tail call i64 @fwrite(ptr nonnull @.str.112.314, i64 42, i64 1, ptr %90) #53
  tail call void @exit(i32 noundef 1) #54
  unreachable

92:                                               ; preds = %79
  %93 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %78, ptr noundef nonnull dereferenceable(9) @.str.113.315) #59
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %96

95:                                               ; preds = %92
  store i32 3, ptr %26, align 8, !tbaa !127
  br label %288

96:                                               ; preds = %92
  %97 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %78, ptr noundef nonnull dereferenceable(6) @.str.114.316) #59
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %99, label %100

99:                                               ; preds = %96
  store i32 12000, ptr %20, align 8, !tbaa !251
  store i32 160, ptr %28, align 4, !tbaa !264
  store i32 1, ptr %36, align 8, !tbaa !303
  br label %288

100:                                              ; preds = %96
  %101 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %78, ptr noundef nonnull dereferenceable(8) @.str.115.317) #59
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %103, label %104

103:                                              ; preds = %100
  store i32 1, ptr %36, align 8, !tbaa !303
  br label %288

104:                                              ; preds = %100
  %105 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %78, ptr noundef nonnull dereferenceable(6) @.str.116.318) #59
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %108

107:                                              ; preds = %104
  store i32 1, ptr %42, align 4, !tbaa !301
  br label %288

108:                                              ; preds = %104
  %109 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %78, ptr noundef nonnull dereferenceable(6) @.str.117.319) #59
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %111, label %112

111:                                              ; preds = %108
  store i32 1, ptr %40, align 8, !tbaa !279
  store i32 0, ptr %41, align 4, !tbaa !166
  br label %288

112:                                              ; preds = %108
  %113 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %78, ptr noundef nonnull dereferenceable(8) @.str.118.320) #59
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %116

115:                                              ; preds = %112
  store i32 1, ptr %39, align 8, !tbaa !300
  br label %288

116:                                              ; preds = %112
  %117 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %78, ptr noundef nonnull dereferenceable(7) @.str.119.321) #59
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %288, label %119

119:                                              ; preds = %116
  %120 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %78, ptr noundef nonnull dereferenceable(3) @.str.120.322) #59
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %124

122:                                              ; preds = %119
  store i32 1, ptr @id3tag, align 4, !tbaa !272
  %123 = tail call ptr @strncpy(ptr noundef nonnull dereferenceable(1) getelementptr inbounds (%struct.ID3TAGDATA, ptr @id3tag, i64 0, i32 2), ptr noundef nonnull dereferenceable(1) %62, i64 noundef 30) #55
  br label %288

124:                                              ; preds = %119
  %125 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %78, ptr noundef nonnull dereferenceable(3) @.str.121.323) #59
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %129

127:                                              ; preds = %124
  store i32 1, ptr @id3tag, align 4, !tbaa !272
  %128 = tail call ptr @strncpy(ptr noundef nonnull dereferenceable(1) getelementptr inbounds (%struct.ID3TAGDATA, ptr @id3tag, i64 0, i32 3), ptr noundef nonnull dereferenceable(1) %62, i64 noundef 30) #55
  br label %288

129:                                              ; preds = %124
  %130 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %78, ptr noundef nonnull dereferenceable(3) @.str.122.324) #59
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %132, label %134

132:                                              ; preds = %129
  store i32 1, ptr @id3tag, align 4, !tbaa !272
  %133 = tail call ptr @strncpy(ptr noundef nonnull dereferenceable(1) getelementptr inbounds (%struct.ID3TAGDATA, ptr @id3tag, i64 0, i32 4), ptr noundef nonnull dereferenceable(1) %62, i64 noundef 30) #55
  br label %288

134:                                              ; preds = %129
  %135 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %78, ptr noundef nonnull dereferenceable(3) @.str.123.325) #59
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %137, label %139

137:                                              ; preds = %134
  store i32 1, ptr @id3tag, align 4, !tbaa !272
  %138 = tail call ptr @strncpy(ptr noundef nonnull dereferenceable(1) getelementptr inbounds (%struct.ID3TAGDATA, ptr @id3tag, i64 0, i32 5), ptr noundef nonnull dereferenceable(1) %62, i64 noundef 4) #55
  br label %288

139:                                              ; preds = %134
  %140 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %78, ptr noundef nonnull dereferenceable(3) @.str.124.326) #59
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %142, label %144

142:                                              ; preds = %139
  store i32 1, ptr @id3tag, align 4, !tbaa !272
  %143 = tail call ptr @strncpy(ptr noundef nonnull dereferenceable(1) getelementptr inbounds (%struct.ID3TAGDATA, ptr @id3tag, i64 0, i32 6), ptr noundef nonnull dereferenceable(1) %62, i64 noundef 30) #55
  br label %288

144:                                              ; preds = %139
  %145 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %78, ptr noundef nonnull dereferenceable(3) @.str.125.327) #59
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %147, label %152

147:                                              ; preds = %144
  store i32 1, ptr @id3tag, align 4, !tbaa !272
  %148 = tail call i32 @atoi(ptr nocapture noundef %62) #59
  %149 = tail call i32 @llvm.smax.i32(i32 %148, i32 1)
  %150 = tail call i32 @llvm.umin.i32(i32 %149, i32 99)
  %151 = trunc i32 %150 to i8
  store i8 %151, ptr getelementptr inbounds (%struct.ID3TAGDATA, ptr @id3tag, i64 0, i32 9), align 2, !tbaa !138
  br label %288

152:                                              ; preds = %144
  %153 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %78, ptr noundef nonnull dereferenceable(3) @.str.126.328) #59
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %155, label %186

155:                                              ; preds = %152
  %156 = call i64 @strtol(ptr noundef %62, ptr noundef nonnull %4, i32 noundef 10) #55
  %157 = trunc i64 %156 to i32
  %158 = load ptr, ptr %4, align 8, !tbaa !7
  %159 = icmp eq ptr %62, %158
  %160 = load i32, ptr @genre_last, align 4, !tbaa !11
  br i1 %159, label %161, label %177

161:                                              ; preds = %155
  %162 = icmp slt i32 %160, 0
  br i1 %162, label %177, label %163

163:                                              ; preds = %161
  %164 = add nuw i32 %160, 1
  %165 = zext i32 %164 to i64
  br label %166

166:                                              ; preds = %172, %163
  %167 = phi i64 [ 0, %163 ], [ %173, %172 ]
  %168 = getelementptr inbounds [0 x ptr], ptr @genre_list, i64 0, i64 %167
  %169 = load ptr, ptr %168, align 8, !tbaa !7
  %170 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %169, ptr noundef nonnull dereferenceable(1) %62) #59
  %171 = icmp eq i32 %170, 0
  br i1 %171, label %175, label %172

172:                                              ; preds = %166
  %173 = add nuw nsw i64 %167, 1
  %174 = icmp eq i64 %173, %165
  br i1 %174, label %177, label %166, !llvm.loop !471

175:                                              ; preds = %166
  %.lcssa = phi i64 [ %167, %166 ]
  %176 = trunc i64 %.lcssa to i32
  br label %177

177:                                              ; preds = %175, %172, %161, %155
  %178 = phi i32 [ %157, %155 ], [ 0, %161 ], [ %176, %175 ], [ %164, %172 ]
  %179 = icmp sgt i32 %178, %160
  br i1 %179, label %180, label %183

180:                                              ; preds = %177
  %181 = load ptr, ptr @stderr, align 8, !tbaa !7
  %182 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %181, ptr noundef nonnull @.str.127.329, ptr noundef %62) #60
  br label %183

183:                                              ; preds = %180, %177
  %184 = phi i32 [ 255, %180 ], [ %178, %177 ]
  %185 = trunc i32 %184 to i8
  store i32 1, ptr @id3tag, align 4, !tbaa !272
  store i8 %185, ptr getelementptr inbounds (%struct.ID3TAGDATA, ptr @id3tag, i64 0, i32 8), align 1
  br label %288

186:                                              ; preds = %152
  %187 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %78, ptr noundef nonnull dereferenceable(8) @.str.128.330) #59
  %188 = icmp eq i32 %187, 0
  br i1 %188, label %189, label %197

189:                                              ; preds = %186
  %190 = tail call double @atof(ptr noundef %62) #59
  %191 = tail call double @llvm.fmuladd.f64(double %190, double 1.000000e+03, double 5.000000e-01)
  %192 = fptosi double %191 to i32
  store i32 %192, ptr %20, align 8, !tbaa !251
  %193 = icmp slt i32 %192, 1
  br i1 %193, label %194, label %288

194:                                              ; preds = %189
  %195 = load ptr, ptr @stderr, align 8, !tbaa !7
  %196 = tail call i64 @fwrite(ptr nonnull @.str.129.331, i64 60, i64 1, ptr %195) #53
  tail call void @exit(i32 noundef 1) #54
  unreachable

197:                                              ; preds = %186
  %198 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %78, ptr noundef nonnull dereferenceable(14) @.str.130.332) #59
  %199 = icmp eq i32 %198, 0
  br i1 %199, label %200, label %208

200:                                              ; preds = %197
  %201 = tail call double @atof(ptr noundef %62) #59
  %202 = tail call double @llvm.fmuladd.f64(double %201, double 1.000000e+03, double 5.000000e-01)
  %203 = fptosi double %202 to i32
  store i32 %203, ptr %35, align 8, !tbaa !256
  %204 = icmp slt i32 %203, 0
  br i1 %204, label %205, label %288

205:                                              ; preds = %200
  %206 = load ptr, ptr @stderr, align 8, !tbaa !7
  %207 = tail call i64 @fwrite(ptr nonnull @.str.131.333, i64 68, i64 1, ptr %206) #53
  tail call void @exit(i32 noundef 1) #54
  unreachable

208:                                              ; preds = %197
  %209 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %78, ptr noundef nonnull dereferenceable(9) @.str.132.334) #59
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %211, label %219

211:                                              ; preds = %208
  %212 = tail call double @atof(ptr noundef %62) #59
  %213 = tail call double @llvm.fmuladd.f64(double %212, double 1.000000e+03, double 5.000000e-01)
  %214 = fptosi double %213 to i32
  store i32 %214, ptr %21, align 4, !tbaa !254
  %215 = icmp slt i32 %214, 1
  br i1 %215, label %216, label %288

216:                                              ; preds = %211
  %217 = load ptr, ptr @stderr, align 8, !tbaa !7
  %218 = tail call i64 @fwrite(ptr nonnull @.str.133.335, i64 62, i64 1, ptr %217) #53
  tail call void @exit(i32 noundef 1) #54
  unreachable

219:                                              ; preds = %208
  %220 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %78, ptr noundef nonnull dereferenceable(15) @.str.134.336) #59
  %221 = icmp eq i32 %220, 0
  br i1 %221, label %222, label %230

222:                                              ; preds = %219
  %223 = tail call double @atof(ptr noundef %62) #59
  %224 = tail call double @llvm.fmuladd.f64(double %223, double 1.000000e+03, double 5.000000e-01)
  %225 = fptosi double %224 to i32
  store i32 %225, ptr %34, align 4, !tbaa !255
  %226 = icmp slt i32 %225, 0
  br i1 %226, label %227, label %288

227:                                              ; preds = %222
  %228 = load ptr, ptr @stderr, align 8, !tbaa !7
  %229 = tail call i64 @fwrite(ptr nonnull @.str.135.337, i64 70, i64 1, ptr %228) #53
  tail call void @exit(i32 noundef 1) #54
  unreachable

230:                                              ; preds = %219
  %231 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %78, ptr noundef nonnull dereferenceable(8) @.str.136.338) #59
  %232 = icmp eq i32 %231, 0
  br i1 %232, label %233, label %240

233:                                              ; preds = %230
  %234 = tail call double @atof(ptr noundef %62) #59
  %235 = fptrunc double %234 to float
  store float %235, ptr %38, align 8, !tbaa !302
  %236 = fcmp ugt float %235, 0.000000e+00
  br i1 %236, label %288, label %237

237:                                              ; preds = %233
  %238 = load ptr, ptr @stderr, align 8, !tbaa !7
  %239 = tail call i64 @fwrite(ptr nonnull @.str.137.339, i64 28, i64 1, ptr %238) #53
  tail call void @exit(i32 noundef 1) #54
  unreachable

240:                                              ; preds = %230
  %241 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %78, ptr noundef nonnull dereferenceable(5) @.str.138.340) #59
  %242 = icmp eq i32 %241, 0
  br i1 %242, label %246, label %243

243:                                              ; preds = %240
  %244 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %78, ptr noundef nonnull dereferenceable(6) @.str.139.341) #59
  %245 = icmp eq i32 %244, 0
  br i1 %245, label %246, label %247

246:                                              ; preds = %243, %240
  tail call void @lame_help(ptr noundef %0, ptr noundef %5) #57
  unreachable

247:                                              ; preds = %243
  %248 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %78, ptr noundef nonnull dereferenceable(7) @.str.140.342) #59
  %249 = icmp eq i32 %248, 0
  br i1 %249, label %250, label %285

250:                                              ; preds = %247
  %251 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %62, ptr noundef nonnull dereferenceable(6) @.str.141.343) #59
  %252 = icmp eq i32 %251, 0
  br i1 %252, label %253, label %254

253:                                              ; preds = %250
  store i32 16, ptr %29, align 8, !tbaa !244
  store i32 260, ptr %21, align 4, !tbaa !254
  store i32 40, ptr %34, align 4, !tbaa !255
  store i32 300, ptr %35, align 8, !tbaa !256
  store <4 x i32> <i32 5, i32 8, i32 56, i32 3700>, ptr %32, align 4, !tbaa !11
  store i32 1, ptr %36, align 8, !tbaa !303
  store i32 16000, ptr %37, align 8, !tbaa !243
  store i32 3, ptr %22, align 4, !tbaa !168
  store i32 1, ptr %23, align 8, !tbaa !250
  store i32 5, ptr %13, align 4, !tbaa !268
  br label %288

254:                                              ; preds = %250
  %255 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %62, ptr noundef nonnull dereferenceable(6) @.str.114.316) #59
  %256 = icmp eq i32 %255, 0
  br i1 %256, label %257, label %258

257:                                              ; preds = %254
  store i32 56, ptr %29, align 8, !tbaa !244
  store i32 100, ptr %21, align 4, !tbaa !254
  store i32 20, ptr %34, align 4, !tbaa !255
  store i32 2000, ptr %35, align 8, !tbaa !256
  store <4 x i32> <i32 4, i32 8, i32 96, i32 11000>, ptr %32, align 4, !tbaa !11
  store i32 1, ptr %36, align 8, !tbaa !303
  store i32 3, ptr %22, align 4, !tbaa !168
  store i32 1, ptr %23, align 8, !tbaa !250
  store i32 24000, ptr %37, align 8, !tbaa !243
  store i32 5, ptr %13, align 4, !tbaa !268
  br label %288

258:                                              ; preds = %254
  %259 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %62, ptr noundef nonnull dereferenceable(3) @.str.142.344) #59
  %260 = icmp eq i32 %259, 0
  br i1 %260, label %261, label %262

261:                                              ; preds = %258
  store i32 96, ptr %29, align 8, !tbaa !244
  store i32 30, ptr %21, align 4, !tbaa !254
  store i32 0, ptr %34, align 4, !tbaa !255
  store i32 0, ptr %35, align 8, !tbaa !256
  store <4 x i32> <i32 4, i32 32, i32 192, i32 15000>, ptr %32, align 4, !tbaa !11
  store i32 1, ptr %22, align 4, !tbaa !168
  store i32 1, ptr %23, align 8, !tbaa !250
  store i32 5, ptr %13, align 4, !tbaa !268
  br label %288

262:                                              ; preds = %258
  %263 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %62, ptr noundef nonnull dereferenceable(5) @.str.143.345) #59
  %264 = icmp eq i32 %263, 0
  br i1 %264, label %265, label %266

265:                                              ; preds = %262
  store i32 128, ptr %29, align 8, !tbaa !244
  store i32 15, ptr %21, align 4, !tbaa !254
  store i32 15, ptr %34, align 4, !tbaa !255
  store i32 2000, ptr %35, align 8, !tbaa !256
  store <4 x i32> <i32 4, i32 32, i32 192, i32 17000>, ptr %32, align 4, !tbaa !11
  store i32 1, ptr %22, align 4, !tbaa !168
  store i32 1, ptr %23, align 8, !tbaa !250
  store i32 5, ptr %13, align 4, !tbaa !268
  br label %288

266:                                              ; preds = %262
  %267 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %62, ptr noundef nonnull dereferenceable(5) @.str.144.346) #59
  %268 = icmp eq i32 %267, 0
  br i1 %268, label %269, label %270

269:                                              ; preds = %266
  store i32 160, ptr %29, align 8, !tbaa !244
  store i32 15, ptr %21, align 4, !tbaa !254
  store i32 15, ptr %34, align 4, !tbaa !255
  store i32 3000, ptr %35, align 8, !tbaa !256
  store <4 x i32> <i32 3, i32 32, i32 224, i32 20000>, ptr %32, align 4, !tbaa !11
  store i32 1, ptr %22, align 4, !tbaa !168
  store i32 1, ptr %23, align 8, !tbaa !250
  store i32 2, ptr %13, align 4, !tbaa !268
  br label %288

270:                                              ; preds = %266
  %271 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %62, ptr noundef nonnull dereferenceable(3) @.str.145.347) #59
  %272 = icmp eq i32 %271, 0
  br i1 %272, label %273, label %274

273:                                              ; preds = %270
  store i32 192, ptr %29, align 8, !tbaa !244
  store i32 -1, ptr %21, align 4, !tbaa !254
  store <4 x i32> <i32 2, i32 80, i32 256, i32 -1>, ptr %32, align 4, !tbaa !11
  store i32 0, ptr %22, align 4, !tbaa !168
  store i32 1, ptr %23, align 8, !tbaa !250
  store i32 2, ptr %13, align 4, !tbaa !268
  br label %288

274:                                              ; preds = %270
  %275 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %62, ptr noundef nonnull dereferenceable(7) @.str.146.348) #59
  %276 = icmp eq i32 %275, 0
  br i1 %276, label %277, label %278

277:                                              ; preds = %274
  store i32 256, ptr %29, align 8, !tbaa !244
  store i32 -1, ptr %21, align 4, !tbaa !254
  store <4 x i32> <i32 0, i32 112, i32 320, i32 -1>, ptr %32, align 4, !tbaa !11
  store i32 0, ptr %22, align 4, !tbaa !168
  store i32 1, ptr %23, align 8, !tbaa !250
  store i32 2, ptr %13, align 4, !tbaa !268
  br label %288

278:                                              ; preds = %274
  %.lcssa12 = phi ptr [ %62, %274 ]
  %279 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %.lcssa12, ptr noundef nonnull dereferenceable(5) @.str.138.340) #59
  %280 = icmp eq i32 %279, 0
  br i1 %280, label %281, label %282

281:                                              ; preds = %278
  tail call void @lame_presets_info(ptr poison, ptr poison) #57
  unreachable

282:                                              ; preds = %278
  %283 = load ptr, ptr @stderr, align 8, !tbaa !7
  %284 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %283, ptr noundef nonnull @.str.147.349, ptr noundef %5, ptr noundef %.lcssa12) #60
  tail call void @exit(i32 noundef 1) #54
  unreachable

285:                                              ; preds = %247
  %286 = load ptr, ptr @stderr, align 8, !tbaa !7
  %287 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %286, ptr noundef nonnull @.str.148.350, ptr noundef %5, ptr noundef nonnull %78) #60
  br label %288

288:                                              ; preds = %285, %277, %273, %269, %265, %261, %257, %253, %233, %222, %211, %200, %189, %183, %147, %142, %137, %132, %127, %122, %116, %115, %111, %107, %103, %99, %95, %82
  %289 = phi i32 [ 1, %82 ], [ 0, %95 ], [ 0, %99 ], [ 0, %103 ], [ 0, %107 ], [ 0, %111 ], [ 0, %115 ], [ 0, %116 ], [ 1, %122 ], [ 1, %127 ], [ 1, %132 ], [ 1, %137 ], [ 1, %142 ], [ 1, %147 ], [ 1, %183 ], [ 1, %189 ], [ 1, %200 ], [ 1, %211 ], [ 1, %222 ], [ 1, %233 ], [ 1, %253 ], [ 1, %257 ], [ 1, %261 ], [ 1, %265 ], [ 1, %269 ], [ 1, %273 ], [ 1, %277 ], [ 0, %285 ]
  %290 = add nsw i32 %289, %44
  br label %400

291:                                              ; preds = %378, %76
  %292 = phi i8 [ %385, %378 ], [ %77, %76 ]
  %293 = phi ptr [ %384, %378 ], [ %78, %76 ]
  %294 = phi i32 [ %380, %378 ], [ %45, %76 ]
  %295 = phi i32 [ %381, %378 ], [ %46, %76 ]
  %296 = phi i32 [ %383, %378 ], [ %44, %76 ]
  %297 = phi i32 [ %382, %378 ], [ 0, %76 ]
  %298 = load i8, ptr %293, align 1, !tbaa !15
  %299 = icmp eq i8 %298, 0
  %300 = select i1 %299, ptr %62, ptr %293
  %301 = sext i8 %292 to i32
  switch i32 %301, label %368 [
    i32 109, label %302
    i32 86, label %312
    i32 113, label %316
    i32 115, label %320
    i32 98, label %326
    i32 66, label %328
    i32 116, label %330
    i32 114, label %331
    i32 120, label %332
    i32 112, label %333
    i32 97, label %334
    i32 104, label %335
    i32 107, label %336
    i32 100, label %337
    i32 118, label %338
    i32 83, label %339
    i32 88, label %340
    i32 89, label %351
    i32 90, label %352
    i32 102, label %353
    i32 103, label %354
    i32 101, label %357
    i32 99, label %365
    i32 111, label %366
    i32 63, label %367
  ]

302:                                              ; preds = %291
  store i32 1, ptr %23, align 8, !tbaa !250
  %303 = load i8, ptr %300, align 1, !tbaa !15
  switch i8 %303, label %309 [
    i8 115, label %304
    i8 100, label %305
    i8 106, label %306
    i8 102, label %307
    i8 109, label %308
  ]

304:                                              ; preds = %302
  store i32 0, ptr %22, align 4, !tbaa !168
  br label %371

305:                                              ; preds = %302
  store i32 2, ptr %22, align 4, !tbaa !168
  br label %371

306:                                              ; preds = %302
  store i32 1, ptr %22, align 4, !tbaa !168
  br label %371

307:                                              ; preds = %302
  store i32 1, ptr %22, align 4, !tbaa !168
  store i32 1, ptr %33, align 4, !tbaa !269
  br label %371

308:                                              ; preds = %302
  store i32 3, ptr %22, align 4, !tbaa !168
  br label %371

309:                                              ; preds = %302
  %310 = load ptr, ptr @stderr, align 8, !tbaa !7
  %311 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %310, ptr noundef nonnull @.str.149.351, ptr noundef %5, ptr noundef nonnull %300) #60
  br label %371

312:                                              ; preds = %291
  store i32 1, ptr %18, align 8, !tbaa !245
  %313 = tail call i32 @atoi(ptr nocapture noundef %300) #59
  %314 = tail call i32 @llvm.smax.i32(i32 %313, i32 0)
  %315 = tail call i32 @llvm.umin.i32(i32 %314, i32 9)
  store i32 %315, ptr %32, align 4
  br label %371

316:                                              ; preds = %291
  %317 = tail call i32 @atoi(ptr nocapture noundef %300) #59
  %318 = tail call i32 @llvm.smax.i32(i32 %317, i32 0)
  %319 = tail call i32 @llvm.umin.i32(i32 %318, i32 9)
  br label %371

320:                                              ; preds = %291
  %321 = tail call double @atof(ptr noundef %300) #59
  %322 = fptrunc double %321 to float
  %323 = fpext float %322 to double
  %324 = tail call double @llvm.fmuladd.f64(double %323, double 1.000000e+03, double 5.000000e-01)
  %325 = fptosi double %324 to i32
  store i32 %325, ptr %31, align 4, !tbaa !124
  br label %371

326:                                              ; preds = %291
  %327 = tail call i32 @atoi(ptr nocapture noundef %300) #59
  store i32 %327, ptr %29, align 8, !tbaa !244
  store i32 %327, ptr %30, align 8, !tbaa !265
  br label %371

328:                                              ; preds = %291
  %329 = tail call i32 @atoi(ptr nocapture noundef %300) #59
  store i32 %329, ptr %28, align 4, !tbaa !264
  br label %371

330:                                              ; preds = %291
  store i32 0, ptr %27, align 8, !tbaa !270
  br label %378

331:                                              ; preds = %291
  store i32 4, ptr %26, align 8, !tbaa !127
  br label %378

332:                                              ; preds = %291
  store i32 1, ptr %25, align 4, !tbaa !128
  br label %378

333:                                              ; preds = %291
  store i32 1, ptr %24, align 4, !tbaa !163
  br label %378

334:                                              ; preds = %291
  store i32 3, ptr %22, align 4, !tbaa !168
  store i32 1, ptr %23, align 8, !tbaa !250
  br label %378

335:                                              ; preds = %291
  store i32 2, ptr %13, align 4, !tbaa !268
  br label %378

336:                                              ; preds = %291
  store i32 -1, ptr %20, align 8, !tbaa !251
  store i32 -1, ptr %21, align 4, !tbaa !254
  br label %378

337:                                              ; preds = %291
  store i32 1, ptr %19, align 4, !tbaa !299
  br label %378

338:                                              ; preds = %291
  store i32 1, ptr %18, align 8, !tbaa !245
  br label %378

339:                                              ; preds = %291
  store i32 1, ptr %17, align 8, !tbaa !280
  br label %378

340:                                              ; preds = %291
  store i32 0, ptr %16, align 4, !tbaa !472
  %341 = load i8, ptr %300, align 1, !tbaa !15
  switch i8 %341, label %348 [
    i8 48, label %371
    i8 49, label %342
    i8 50, label %343
    i8 51, label %344
    i8 52, label %345
    i8 53, label %346
    i8 54, label %347
  ]

342:                                              ; preds = %340
  store i32 1, ptr %16, align 4, !tbaa !472
  br label %371

343:                                              ; preds = %340
  store i32 2, ptr %16, align 4, !tbaa !472
  br label %371

344:                                              ; preds = %340
  store i32 3, ptr %16, align 4, !tbaa !472
  br label %371

345:                                              ; preds = %340
  store i32 4, ptr %16, align 4, !tbaa !472
  br label %371

346:                                              ; preds = %340
  store i32 5, ptr %16, align 4, !tbaa !472
  br label %371

347:                                              ; preds = %340
  store i32 6, ptr %16, align 4, !tbaa !472
  br label %371

348:                                              ; preds = %340
  %349 = load ptr, ptr @stderr, align 8, !tbaa !7
  %350 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %349, ptr noundef nonnull @.str.150.352, ptr noundef %5, ptr noundef nonnull %300) #60
  br label %371

351:                                              ; preds = %291
  store i32 1, ptr %15, align 8, !tbaa !473
  br label %378

352:                                              ; preds = %291
  store i32 1, ptr %14, align 4, !tbaa !474
  br label %378

353:                                              ; preds = %291
  store i32 9, ptr %13, align 4, !tbaa !268
  br label %378

354:                                              ; preds = %291
  %355 = load ptr, ptr @stderr, align 8, !tbaa !7
  %356 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %355, ptr noundef nonnull @.str.151.353, ptr noundef %5, ptr noundef %300) #60
  br label %378

357:                                              ; preds = %291
  %358 = load i8, ptr %300, align 1, !tbaa !15
  switch i8 %358, label %362 [
    i8 110, label %359
    i8 53, label %360
    i8 99, label %361
  ]

359:                                              ; preds = %357
  store i32 0, ptr %12, align 4, !tbaa !172
  br label %371

360:                                              ; preds = %357
  store i32 1, ptr %12, align 4, !tbaa !172
  br label %371

361:                                              ; preds = %357
  store i32 3, ptr %12, align 4, !tbaa !172
  br label %371

362:                                              ; preds = %357
  %363 = load ptr, ptr @stderr, align 8, !tbaa !7
  %364 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %363, ptr noundef nonnull @.str.152, ptr noundef %5, ptr noundef nonnull %300) #60
  br label %371

365:                                              ; preds = %291
  store i32 1, ptr %11, align 4, !tbaa !170
  br label %378

366:                                              ; preds = %291
  store i32 0, ptr %10, align 8, !tbaa !171
  br label %378

367:                                              ; preds = %291
  tail call void @lame_help(ptr noundef %0, ptr noundef %5) #57
  unreachable

368:                                              ; preds = %291
  %369 = load ptr, ptr @stderr, align 8, !tbaa !7
  %370 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %369, ptr noundef nonnull @.str.153, ptr noundef %5, i32 noundef %301) #60
  br label %378

371:                                              ; preds = %362, %361, %360, %359, %348, %347, %346, %345, %344, %343, %342, %340, %328, %326, %320, %316, %312, %309, %308, %307, %306, %305, %304
  %372 = phi i32 [ %297, %312 ], [ 1, %309 ], [ %297, %308 ], [ %297, %307 ], [ %297, %306 ], [ %297, %305 ], [ %297, %304 ], [ %297, %316 ], [ %297, %320 ], [ %297, %326 ], [ %297, %328 ], [ 1, %348 ], [ %297, %347 ], [ %297, %346 ], [ %297, %345 ], [ %297, %344 ], [ %297, %343 ], [ %297, %342 ], [ 1, %362 ], [ %297, %361 ], [ %297, %360 ], [ %297, %359 ], [ %297, %340 ]
  %373 = phi i32 [ %294, %312 ], [ %294, %309 ], [ %294, %308 ], [ %294, %307 ], [ %294, %306 ], [ %294, %305 ], [ %294, %304 ], [ %319, %316 ], [ %294, %320 ], [ %294, %326 ], [ %294, %328 ], [ %294, %348 ], [ %294, %347 ], [ %294, %346 ], [ %294, %345 ], [ %294, %344 ], [ %294, %343 ], [ %294, %342 ], [ %294, %362 ], [ %294, %361 ], [ %294, %360 ], [ %294, %359 ], [ %294, %340 ]
  %374 = icmp ne ptr %300, %293
  %375 = select i1 %374, ptr %293, ptr @.str.110.312
  %376 = zext i1 %374 to i32
  %377 = add nsw i32 %296, %376
  br label %378

378:                                              ; preds = %371, %368, %366, %365, %354, %353, %352, %351, %339, %338, %337, %336, %335, %334, %333, %332, %331, %330
  %379 = phi ptr [ %293, %368 ], [ %293, %366 ], [ %293, %365 ], [ %293, %354 ], [ %293, %353 ], [ %293, %352 ], [ %293, %351 ], [ %293, %339 ], [ %293, %338 ], [ %293, %337 ], [ %293, %336 ], [ %293, %335 ], [ %293, %334 ], [ %293, %333 ], [ %293, %332 ], [ %293, %331 ], [ %293, %330 ], [ %375, %371 ]
  %380 = phi i32 [ %294, %368 ], [ %294, %366 ], [ %294, %365 ], [ %294, %354 ], [ %294, %353 ], [ %294, %352 ], [ %294, %351 ], [ %294, %339 ], [ %294, %338 ], [ %294, %337 ], [ %294, %336 ], [ %294, %335 ], [ %294, %334 ], [ %294, %333 ], [ %294, %332 ], [ %294, %331 ], [ %294, %330 ], [ %373, %371 ]
  %381 = phi i32 [ %295, %368 ], [ %295, %366 ], [ %295, %365 ], [ %295, %354 ], [ %295, %353 ], [ %295, %352 ], [ %295, %351 ], [ %295, %339 ], [ %295, %338 ], [ %295, %337 ], [ %295, %336 ], [ %295, %335 ], [ 1, %334 ], [ %295, %333 ], [ %295, %332 ], [ %295, %331 ], [ %295, %330 ], [ %295, %371 ]
  %382 = phi i32 [ 1, %368 ], [ %297, %366 ], [ %297, %365 ], [ %297, %354 ], [ %297, %353 ], [ %297, %352 ], [ %297, %351 ], [ %297, %339 ], [ %297, %338 ], [ %297, %337 ], [ %297, %336 ], [ %297, %335 ], [ %297, %334 ], [ %297, %333 ], [ %297, %332 ], [ %297, %331 ], [ %297, %330 ], [ %372, %371 ]
  %383 = phi i32 [ %296, %368 ], [ %296, %366 ], [ %296, %365 ], [ %296, %354 ], [ %296, %353 ], [ %296, %352 ], [ %296, %351 ], [ %296, %339 ], [ %296, %338 ], [ %296, %337 ], [ %296, %336 ], [ %296, %335 ], [ %296, %334 ], [ %296, %333 ], [ %296, %332 ], [ %296, %331 ], [ %296, %330 ], [ %377, %371 ]
  %384 = getelementptr inbounds i8, ptr %379, i64 1
  %385 = load i8, ptr %379, align 1, !tbaa !15
  %386 = icmp eq i8 %385, 0
  br i1 %386, label %400, label %291, !llvm.loop !475

387:                                              ; preds = %43
  %388 = load i8, ptr @inPath, align 16, !tbaa !15
  %389 = icmp eq i8 %388, 0
  br i1 %389, label %390, label %392

390:                                              ; preds = %387
  %391 = tail call ptr @strncpy(ptr noundef nonnull dereferenceable(1) @inPath, ptr noundef nonnull dereferenceable(1) %50, i64 noundef 300) #55
  br label %400

392:                                              ; preds = %387
  %393 = load i8, ptr @outPath, align 16, !tbaa !15
  %394 = icmp eq i8 %393, 0
  br i1 %394, label %395, label %397

395:                                              ; preds = %392
  %396 = tail call ptr @strncpy(ptr noundef nonnull dereferenceable(1) @outPath, ptr noundef nonnull dereferenceable(1) %50, i64 noundef 300) #55
  br label %400

397:                                              ; preds = %392
  %.lcssa1 = phi ptr [ %50, %392 ]
  %398 = load ptr, ptr @stderr, align 8, !tbaa !7
  %399 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %398, ptr noundef nonnull @.str.154, ptr noundef %5, ptr noundef nonnull %.lcssa1) #60
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #56
  br label %417

400:                                              ; preds = %395, %390, %378, %288, %76
  %401 = phi i32 [ 0, %288 ], [ 0, %390 ], [ 0, %395 ], [ 0, %76 ], [ %382, %378 ]
  %402 = phi i32 [ %290, %288 ], [ %44, %390 ], [ %44, %395 ], [ %44, %76 ], [ %383, %378 ]
  %403 = phi i32 [ %46, %288 ], [ %46, %390 ], [ %46, %395 ], [ %46, %76 ], [ %381, %378 ]
  %404 = phi i32 [ %45, %288 ], [ %45, %390 ], [ %45, %395 ], [ %45, %76 ], [ %380, %378 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #56
  %405 = add nsw i32 %402, 1
  %406 = icmp slt i32 %405, %1
  %407 = icmp eq i32 %401, 0
  %408 = select i1 %406, i1 %407, i1 false
  br i1 %408, label %43, label %409, !llvm.loop !476

409:                                              ; preds = %400, %3
  %410 = phi i32 [ 0, %3 ], [ %401, %400 ]
  %411 = phi i32 [ 0, %3 ], [ %403, %400 ]
  %412 = phi i32 [ 0, %3 ], [ %404, %400 ]
  %413 = icmp ne i32 %410, 0
  %414 = load i8, ptr @inPath, align 16
  %415 = icmp eq i8 %414, 0
  %416 = select i1 %413, i1 true, i1 %415
  br i1 %416, label %417, label %418

417:                                              ; preds = %409, %397
  tail call void @lame_usage(ptr poison, ptr noundef %5) #57
  unreachable

418:                                              ; preds = %409
  %419 = icmp eq i8 %414, 45
  br i1 %419, label %420, label %424

420:                                              ; preds = %418
  %421 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 7
  store i32 1, ptr %421, align 8, !tbaa !280
  %422 = load i8, ptr @outPath, align 16, !tbaa !15
  %423 = icmp eq i8 %422, 0
  br i1 %423, label %427, label %433

424:                                              ; preds = %418
  %425 = load i8, ptr @outPath, align 16, !tbaa !15
  %426 = icmp eq i8 %425, 0
  br i1 %426, label %428, label %433

427:                                              ; preds = %420
  store i16 45, ptr @outPath, align 16
  br label %436

428:                                              ; preds = %424
  %429 = tail call ptr @strncpy(ptr noundef nonnull dereferenceable(1) @outPath, ptr noundef nonnull dereferenceable(1) @inPath, i64 noundef 296) #55
  %430 = tail call i64 @strlen(ptr nonnull dereferenceable(1) @outPath)
  %431 = getelementptr inbounds i8, ptr @outPath, i64 %430
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(5) %431, ptr noundef nonnull align 1 dereferenceable(5) @.str.156, i64 5, i1 false)
  %432 = load i8, ptr @outPath, align 16, !tbaa !15
  br label %433

433:                                              ; preds = %428, %424, %420
  %434 = phi i8 [ %425, %424 ], [ %432, %428 ], [ %422, %420 ]
  %435 = icmp eq i8 %434, 45
  br i1 %435, label %436, label %443

436:                                              ; preds = %433, %427
  %437 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 5
  store i32 0, ptr %437, align 8, !tbaa !270
  %438 = load i32, ptr @id3tag, align 4, !tbaa !272
  %439 = icmp eq i32 %438, 0
  br i1 %439, label %443, label %440

440:                                              ; preds = %436
  store i32 0, ptr @id3tag, align 4, !tbaa !272
  %441 = load ptr, ptr @stderr, align 8, !tbaa !7
  %442 = tail call i64 @fwrite(ptr nonnull @.str.157.354, i64 54, i64 1, ptr %441) #53
  br label %443

443:                                              ; preds = %440, %436, %433
  %444 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 29
  %445 = load i32, ptr %444, align 8, !tbaa !127
  %446 = icmp eq i32 %445, 3
  br i1 %446, label %454, label %447

447:                                              ; preds = %443
  %448 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) @inPath) #59
  %449 = add i64 %448, -4
  %450 = getelementptr inbounds [300 x i8], ptr @inPath, i64 0, i64 %449
  %451 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %450, ptr noundef nonnull dereferenceable(5) @.str.156) #59
  %452 = icmp eq i32 %451, 0
  br i1 %452, label %453, label %454

453:                                              ; preds = %447
  store i32 3, ptr %444, align 8, !tbaa !127
  br label %454

454:                                              ; preds = %453, %447, %443
  %455 = icmp eq i32 %411, 0
  br i1 %455, label %458, label %456

456:                                              ; preds = %454
  %457 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 1
  store i32 2, ptr %457, align 8, !tbaa !125
  br label %465

458:                                              ; preds = %454
  %459 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 8
  %460 = load i32, ptr %459, align 4, !tbaa !168
  %461 = icmp eq i32 %460, 3
  %462 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 1
  br i1 %461, label %463, label %464

463:                                              ; preds = %458
  store i32 1, ptr %462, align 8, !tbaa !125
  br label %465

464:                                              ; preds = %458
  store i32 2, ptr %462, align 8, !tbaa !125
  br label %465

465:                                              ; preds = %464, %463, %456
  %466 = icmp eq i32 %412, 0
  br i1 %466, label %469, label %467

467:                                              ; preds = %465
  %468 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 6
  store i32 %412, ptr %468, align 4, !tbaa !268
  br label %469

469:                                              ; preds = %467, %465
  ret void
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(read)
declare double @atof(ptr nocapture noundef) local_unnamed_addr #35

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(read)
declare i32 @atoi(ptr nocapture noundef) local_unnamed_addr #35

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.umin.i32(i32, i32) #9

; Function Attrs: mustprogress nofree nounwind optsize willreturn
declare i64 @strtol(ptr noundef readonly, ptr nocapture noundef, i32 noundef) local_unnamed_addr #29

; Function Attrs: nofree nounwind optsize uwtable
define internal i32 @Read16BitsLowHigh(ptr nocapture noundef %0) #27 {
  %2 = tail call i32 @getc(ptr noundef %0) #57
  %3 = and i32 %2, 255
  %4 = tail call i32 @getc(ptr noundef %0) #57
  %5 = shl i32 %4, 8
  %6 = and i32 %5, 65280
  %7 = or i32 %6, %3
  %8 = and i32 %4, 128
  %9 = icmp eq i32 %8, 0
  %10 = or i32 %7, -65536
  %11 = select i1 %9, i32 %7, i32 %10
  ret i32 %11
}

; Function Attrs: nofree nounwind optsize
declare noundef i32 @getc(ptr nocapture noundef) local_unnamed_addr #6

; Function Attrs: nofree nounwind optsize uwtable
define internal i32 @Read16BitsHighLow(ptr nocapture noundef %0) #27 {
  %2 = tail call i32 @getc(ptr noundef %0) #57
  %3 = tail call i32 @getc(ptr noundef %0) #57
  %4 = and i32 %3, 255
  %5 = shl i32 %2, 8
  %6 = and i32 %5, 65280
  %7 = or i32 %6, %4
  %8 = and i32 %2, 128
  %9 = icmp eq i32 %8, 0
  %10 = or i32 %7, -65536
  %11 = select i1 %9, i32 %7, i32 %10
  ret i32 %11
}

; Function Attrs: nofree nounwind optsize uwtable
define internal i32 @Read32Bits(ptr nocapture noundef %0) #27 {
  %2 = tail call i32 @Read16BitsLowHigh(ptr noundef %0) #57, !range !477
  %3 = and i32 %2, 65535
  %4 = tail call i32 @Read16BitsLowHigh(ptr noundef %0) #57, !range !477
  %5 = shl i32 %4, 16
  %6 = or i32 %5, %3
  ret i32 %6
}

; Function Attrs: nofree nounwind optsize uwtable
define internal i32 @Read32BitsHighLow(ptr nocapture noundef %0) #27 {
  %2 = tail call i32 @Read16BitsHighLow(ptr noundef %0) #57, !range !477
  %3 = tail call i32 @Read16BitsHighLow(ptr noundef %0) #57, !range !477
  %4 = and i32 %3, 65535
  %5 = shl i32 %2, 16
  %6 = or i32 %4, %5
  ret i32 %6
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @ReadBytes(ptr nocapture noundef %0, ptr nocapture noundef writeonly %1, i32 noundef %2) #27 {
  br label %4

4:                                                ; preds = %11, %3
  %5 = phi ptr [ %1, %3 ], [ %15, %11 ]
  %6 = phi i32 [ %2, %3 ], [ %12, %11 ]
  %7 = tail call i32 @feof(ptr noundef %0) #55
  %8 = icmp eq i32 %7, 0
  %9 = icmp sgt i32 %6, 0
  %10 = and i1 %9, %8
  br i1 %10, label %11, label %16

11:                                               ; preds = %4
  %12 = add nsw i32 %6, -1
  %13 = tail call i32 @getc(ptr noundef %0) #57
  %14 = trunc i32 %13 to i8
  %15 = getelementptr inbounds i8, ptr %5, i64 1
  store i8 %14, ptr %5, align 1, !tbaa !15
  br label %4, !llvm.loop !478

16:                                               ; preds = %4
  ret void
}

; Function Attrs: nofree nounwind optsize
declare noundef i32 @feof(ptr nocapture noundef) local_unnamed_addr #6

; Function Attrs: nounwind optsize uwtable
define internal double @ReadIeeeExtendedHighLow(ptr nocapture noundef %0) #4 {
  %2 = alloca [10 x i8], align 1
  call void @llvm.lifetime.start.p0(i64 10, ptr nonnull %2) #56
  call void @ReadBytes(ptr noundef %0, ptr noundef nonnull %2, i32 noundef 10) #57
  %3 = call double @ConvertFromIeeeExtended(ptr noundef nonnull %2) #55
  call void @llvm.lifetime.end.p0(i64 10, ptr nonnull %2) #56
  ret double %3
}

; Function Attrs: nounwind optsize uwtable
define internal void @L3psycho_anal(ptr nocapture noundef readonly %0, ptr noundef %1, i32 noundef %2, ptr nocapture noundef writeonly %3, ptr nocapture noundef writeonly %4, ptr nocapture noundef writeonly %5, ptr nocapture noundef writeonly %6, ptr nocapture noundef writeonly %7, ptr nocapture noundef writeonly %8, ptr nocapture noundef writeonly %9, ptr nocapture noundef %10) #4 {
  %12 = alloca [4 x float], align 16
  %13 = alloca [2 x i32], align 4
  %14 = alloca [2 x i32], align 4
  %15 = alloca [63 x double], align 16
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %12) #56
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13) #56
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %14) #56
  %16 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 39
  %17 = load i64, ptr %16, align 8, !tbaa !134
  %18 = icmp eq i64 %17, 0
  %19 = icmp eq i32 %2, 0
  %20 = and i1 %19, %18
  br i1 %20, label %21, label %302

21:                                               ; preds = %11
  call void @llvm.lifetime.start.p0(i64 504, ptr nonnull %15) #56
  store i32 3, ptr @L3psycho_anal.blocktype_old, align 4, !tbaa !11
  store i32 3, ptr getelementptr inbounds ([2 x i32], ptr @L3psycho_anal.blocktype_old, i64 0, i64 1), align 4, !tbaa !11
  %22 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 3
  %23 = load i32, ptr %22, align 8, !tbaa !243
  switch i32 %23, label %24 [
    i32 32000, label %27
    i32 44100, label %27
    i32 48000, label %27
    i32 16000, label %27
    i32 22050, label %27
    i32 24000, label %27
  ]

24:                                               ; preds = %21
  %25 = load ptr, ptr @stderr, align 8, !tbaa !7
  %26 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %25, ptr noundef nonnull @.str.367, i32 noundef %23) #60
  tail call void @exit(i32 noundef -1) #54
  unreachable

27:                                               ; preds = %21, %21, %21, %21, %21, %21
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(16416) @L3psycho_anal.rx_sav, i8 0, i64 16416, i1 false)
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(16416) @L3psycho_anal.ax_sav, i8 0, i64 16416, i1 false)
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(16416) @L3psycho_anal.bx_sav, i8 0, i64 16416, i1 false)
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(1952) @L3psycho_anal.en, i8 0, i64 1952, i1 false)
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(1952) @L3psycho_anal.thm, i8 0, i64 1952, i1 false)
  store i1 true, ptr @L3psycho_anal.cw_lower_index, align 4
  %28 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 35
  %29 = load float, ptr %28, align 8, !tbaa !302
  %30 = fcmp ogt float %29, 0.000000e+00
  %31 = select i1 %30, float %29, float 0x4021BE4F80000000
  %32 = fpext float %31 to double
  %33 = fmul double %32, 1.000000e+03
  %34 = fmul double %33, 1.024000e+03
  %35 = sitofp i32 %23 to double
  %36 = fdiv double %34, %35
  %37 = fptosi double %36 to i32
  %38 = tail call i32 @llvm.smin.i32(i32 %37, i32 509)
  %39 = tail call i32 @llvm.smax.i32(i32 %38, i32 6)
  store i32 %39, ptr @L3psycho_anal.cw_upper_index, align 4, !tbaa !11
  br label %40

40:                                               ; preds = %62, %27
  %41 = phi i64 [ 0, %27 ], [ %63, %62 ]
  %42 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %27 ], [ %64, %62 ]
  %43 = icmp ult <4 x i64> %42, <i64 513, i64 513, i64 513, i64 513>
  %44 = extractelement <4 x i1> %43, i64 0
  br i1 %44, label %45, label %47

45:                                               ; preds = %40
  %46 = getelementptr inbounds [513 x float], ptr @L3psycho_anal.cw, i64 0, i64 %41
  store float 0x3FD99999A0000000, ptr %46, align 16, !tbaa !48
  br label %47

47:                                               ; preds = %45, %40
  %48 = extractelement <4 x i1> %43, i64 1
  br i1 %48, label %49, label %52

49:                                               ; preds = %47
  %50 = or i64 %41, 1
  %51 = getelementptr inbounds [513 x float], ptr @L3psycho_anal.cw, i64 0, i64 %50
  store float 0x3FD99999A0000000, ptr %51, align 4, !tbaa !48
  br label %52

52:                                               ; preds = %49, %47
  %53 = extractelement <4 x i1> %43, i64 2
  br i1 %53, label %54, label %57

54:                                               ; preds = %52
  %55 = or i64 %41, 2
  %56 = getelementptr inbounds [513 x float], ptr @L3psycho_anal.cw, i64 0, i64 %55
  store float 0x3FD99999A0000000, ptr %56, align 8, !tbaa !48
  br label %57

57:                                               ; preds = %54, %52
  %58 = extractelement <4 x i1> %43, i64 3
  br i1 %58, label %59, label %62

59:                                               ; preds = %57
  %60 = or i64 %41, 3
  %61 = getelementptr inbounds [513 x float], ptr @L3psycho_anal.cw, i64 0, i64 %60
  store float 0x3FD99999A0000000, ptr %61, align 4, !tbaa !48
  br label %62

62:                                               ; preds = %59, %57
  %63 = add i64 %41, 4
  %64 = add <4 x i64> %42, <i64 4, i64 4, i64 4, i64 4>
  %65 = icmp eq i64 %63, 516
  br i1 %65, label %66, label %40, !llvm.loop !479

66:                                               ; preds = %66, %62
  %67 = phi i64 [ %77, %66 ], [ 0, %62 ]
  %68 = trunc i64 %67 to i32
  %69 = sitofp i32 %68 to double
  %70 = fmul double %69, 0x400921FB54442D18
  %71 = fdiv double %70, 1.200000e+01
  %72 = tail call double @cos(double noundef %71) #55
  %73 = fsub double 1.000000e+00, %72
  %74 = tail call double @llvm.fmuladd.f64(double %73, double 1.250000e+00, double -2.500000e+00)
  %75 = tail call double @pow(double noundef 1.000000e+01, double noundef %74) #55
  %76 = getelementptr inbounds [12 x double], ptr @L3psycho_anal.mld_s, i64 0, i64 %67
  store double %75, ptr %76, align 8, !tbaa !39
  %77 = add nuw nsw i64 %67, 1
  %78 = icmp eq i64 %77, 12
  br i1 %78, label %79, label %66, !llvm.loop !480

79:                                               ; preds = %79, %66
  %80 = phi i64 [ %90, %79 ], [ 0, %66 ]
  %81 = trunc i64 %80 to i32
  %82 = sitofp i32 %81 to double
  %83 = fmul double %82, 0x400921FB54442D18
  %84 = fdiv double %83, 2.100000e+01
  %85 = tail call double @cos(double noundef %84) #55
  %86 = fsub double 1.000000e+00, %85
  %87 = tail call double @llvm.fmuladd.f64(double %86, double 1.250000e+00, double -2.500000e+00)
  %88 = tail call double @pow(double noundef 1.000000e+01, double noundef %87) #55
  %89 = getelementptr inbounds [21 x double], ptr @L3psycho_anal.mld_l, i64 0, i64 %80
  store double %88, ptr %89, align 8, !tbaa !39
  %90 = add nuw nsw i64 %80, 1
  %91 = icmp eq i64 %90, 21
  br i1 %91, label %92, label %79, !llvm.loop !481

92:                                               ; preds = %79
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(2052) @L3psycho_anal.partition_l, i8 -1, i64 2052, i1 false), !tbaa !11
  %93 = load i32, ptr %22, align 8, !tbaa !243
  %94 = sitofp i32 %93 to double
  call void @L3para_read(double noundef %94, ptr noundef nonnull @L3psycho_anal.numlines_l, ptr noundef nonnull @L3psycho_anal.numlines_s, ptr noundef nonnull @L3psycho_anal.partition_l, ptr noundef nonnull @L3psycho_anal.minval, ptr noundef nonnull @L3psycho_anal.qthr_l, ptr noundef nonnull @L3psycho_anal.s3_l, ptr noundef nonnull @L3psycho_anal.s3_s, ptr noundef nonnull @L3psycho_anal.qthr_s, ptr noundef nonnull %15, ptr noundef nonnull @L3psycho_anal.bu_l, ptr noundef nonnull @L3psycho_anal.bo_l, ptr noundef nonnull @L3psycho_anal.w1_l, ptr noundef nonnull @L3psycho_anal.w2_l, ptr noundef nonnull @L3psycho_anal.bu_s, ptr noundef nonnull @L3psycho_anal.bo_s, ptr noundef nonnull @L3psycho_anal.w1_s, ptr noundef nonnull @L3psycho_anal.w2_s) #57
  br label %95

95:                                               ; preds = %95, %92
  %96 = phi i64 [ 0, %92 ], [ %101, %95 ]
  %97 = phi i32 [ 0, %92 ], [ %100, %95 ]
  %98 = getelementptr inbounds [513 x i32], ptr @L3psycho_anal.partition_l, i64 0, i64 %96
  %99 = load i32, ptr %98, align 4, !tbaa !11
  %100 = tail call i32 @llvm.smax.i32(i32 %99, i32 %97)
  %101 = add nuw nsw i64 %96, 1
  %102 = icmp eq i64 %101, 513
  br i1 %102, label %103, label %95, !llvm.loop !482

103:                                              ; preds = %95
  %.lcssa22 = phi i32 [ %100, %95 ]
  %104 = add i32 %.lcssa22, 1
  store i32 %104, ptr @L3psycho_anal.npart_l_orig, align 4, !tbaa !11
  br label %105

105:                                              ; preds = %105, %103
  %106 = phi i32 [ %112, %105 ], [ 0, %103 ]
  %107 = phi i64 [ %111, %105 ], [ 0, %103 ]
  %108 = getelementptr inbounds [63 x i32], ptr @L3psycho_anal.numlines_s, i64 0, i64 %107
  %109 = load i32, ptr %108, align 4, !tbaa !11
  %110 = icmp sgt i32 %109, -1
  %111 = add nuw i64 %107, 1
  %112 = add nuw i32 %106, 1
  br i1 %110, label %105, label %113, !llvm.loop !483

113:                                              ; preds = %105
  %.lcssa21 = phi i32 [ %106, %105 ]
  %.lcssa20 = phi i64 [ %107, %105 ]
  %114 = trunc i64 %.lcssa20 to i32
  store i32 %114, ptr @L3psycho_anal.npart_s_orig, align 4, !tbaa !11
  %115 = load i32, ptr getelementptr inbounds ([21 x i32], ptr @L3psycho_anal.bo_l, i64 0, i64 20), align 16, !tbaa !11
  %116 = add nsw i32 %115, 1
  store i32 %116, ptr @L3psycho_anal.npart_l, align 4, !tbaa !11
  %117 = load i32, ptr getelementptr inbounds ([12 x i32], ptr @L3psycho_anal.bo_s, i64 0, i64 11), align 4, !tbaa !11
  %118 = add nsw i32 %117, 1
  store i32 %118, ptr @L3psycho_anal.npart_s, align 4, !tbaa !11
  %119 = icmp sgt i32 %115, %.lcssa22
  br i1 %119, label %120, label %121

120:                                              ; preds = %113
  store i32 %104, ptr @L3psycho_anal.npart_l, align 4, !tbaa !11
  store i32 %.lcssa22, ptr getelementptr inbounds ([21 x i32], ptr @L3psycho_anal.bo_l, i64 0, i64 20), align 16, !tbaa !11
  store double 1.000000e+00, ptr getelementptr inbounds ([21 x double], ptr @L3psycho_anal.w2_l, i64 0, i64 20), align 16, !tbaa !39
  br label %121

121:                                              ; preds = %120, %113
  %122 = phi i32 [ %104, %120 ], [ %116, %113 ]
  %123 = icmp slt i32 %117, %114
  br i1 %123, label %126, label %124

124:                                              ; preds = %121
  store i32 %114, ptr @L3psycho_anal.npart_s, align 4, !tbaa !11
  %125 = add nsw i32 %114, -1
  store i32 %125, ptr getelementptr inbounds ([12 x i32], ptr @L3psycho_anal.bo_s, i64 0, i64 11), align 4, !tbaa !11
  store double 1.000000e+00, ptr getelementptr inbounds ([12 x double], ptr @L3psycho_anal.w2_s, i64 0, i64 11), align 8, !tbaa !39
  br label %126

126:                                              ; preds = %124, %121
  %127 = phi i32 [ %114, %124 ], [ %118, %121 ]
  %128 = icmp sgt i32 %122, 0
  br i1 %128, label %129, label %137

129:                                              ; preds = %126
  %130 = icmp slt i32 %.lcssa22, 0
  %131 = zext i32 %104 to i64
  %132 = tail call i32 @llvm.smin.i32(i32 %104, i32 1)
  %133 = add i32 %132, -1
  %134 = zext i32 %122 to i64
  br label %135

135:                                              ; preds = %170, %129
  %136 = phi i64 [ 0, %129 ], [ %173, %170 ]
  br i1 %130, label %155, label %145

137:                                              ; preds = %170, %126
  %138 = icmp sgt i32 %127, 0
  br i1 %138, label %139, label %177

139:                                              ; preds = %137
  %140 = icmp eq i32 %114, 0
  %141 = tail call i32 @llvm.smin.i32(i32 %.lcssa21, i32 1)
  %142 = add nsw i32 %141, -1
  %143 = zext i32 %127 to i64
  %144 = zext i32 %.lcssa21 to i64
  br label %175

145:                                              ; preds = %150, %135
  %146 = phi i64 [ %151, %150 ], [ 0, %135 ]
  %147 = getelementptr inbounds [64 x [64 x double]], ptr @L3psycho_anal.s3_l, i64 0, i64 %136, i64 %146
  %148 = load double, ptr %147, align 8, !tbaa !39
  %149 = fcmp une double %148, 0.000000e+00
  br i1 %149, label %153, label %150

150:                                              ; preds = %145
  %151 = add nuw nsw i64 %146, 1
  %152 = icmp eq i64 %151, %131
  br i1 %152, label %155, label %145, !llvm.loop !484

153:                                              ; preds = %145
  %.lcssa18 = phi i64 [ %146, %145 ]
  %154 = trunc i64 %.lcssa18 to i32
  br label %155

155:                                              ; preds = %153, %150, %135
  %156 = phi i32 [ 0, %135 ], [ %154, %153 ], [ %104, %150 ]
  %157 = getelementptr inbounds [63 x [2 x i32]], ptr @L3psycho_anal.s3ind, i64 0, i64 %136
  store i32 %156, ptr %157, align 8, !tbaa !11
  br label %158

158:                                              ; preds = %162, %155
  %159 = phi i64 [ %163, %162 ], [ %131, %155 ]
  %160 = trunc i64 %159 to i32
  %161 = icmp sgt i32 %160, 1
  br i1 %161, label %162, label %170

162:                                              ; preds = %158
  %163 = add nsw i64 %159, -1
  %164 = and i64 %163, 4294967295
  %165 = getelementptr inbounds [64 x [64 x double]], ptr @L3psycho_anal.s3_l, i64 0, i64 %136, i64 %164
  %166 = load double, ptr %165, align 8, !tbaa !39
  %167 = fcmp une double %166, 0.000000e+00
  br i1 %167, label %168, label %158, !llvm.loop !485

168:                                              ; preds = %162
  %.lcssa19 = phi i64 [ %163, %162 ]
  %169 = trunc i64 %.lcssa19 to i32
  br label %170

170:                                              ; preds = %168, %158
  %171 = phi i32 [ %169, %168 ], [ %133, %158 ]
  %172 = getelementptr inbounds [63 x [2 x i32]], ptr @L3psycho_anal.s3ind, i64 0, i64 %136, i64 1
  store i32 %171, ptr %172, align 4, !tbaa !11
  %173 = add nuw nsw i64 %136, 1
  %174 = icmp eq i64 %173, %134
  br i1 %174, label %137, label %135, !llvm.loop !486

175:                                              ; preds = %204, %139
  %176 = phi i64 [ 0, %139 ], [ %207, %204 ]
  br i1 %140, label %190, label %180

177:                                              ; preds = %204, %137
  br i1 %128, label %178, label %244

178:                                              ; preds = %177
  %179 = zext i32 %122 to i64
  br label %209

180:                                              ; preds = %185, %175
  %181 = phi i64 [ %186, %185 ], [ 0, %175 ]
  %182 = getelementptr inbounds [64 x [64 x double]], ptr @L3psycho_anal.s3_s, i64 0, i64 %176, i64 %181
  %183 = load double, ptr %182, align 8, !tbaa !39
  %184 = fcmp une double %183, 0.000000e+00
  br i1 %184, label %188, label %185

185:                                              ; preds = %180
  %186 = add nuw nsw i64 %181, 1
  %187 = icmp eq i64 %186, %144
  br i1 %187, label %190, label %180, !llvm.loop !487

188:                                              ; preds = %180
  %.lcssa16 = phi i64 [ %181, %180 ]
  %189 = trunc i64 %.lcssa16 to i32
  br label %190

190:                                              ; preds = %188, %185, %175
  %191 = phi i32 [ 0, %175 ], [ %189, %188 ], [ %.lcssa21, %185 ]
  %192 = getelementptr inbounds [63 x [2 x i32]], ptr @L3psycho_anal.s3ind_s, i64 0, i64 %176
  store i32 %191, ptr %192, align 8, !tbaa !11
  br label %193

193:                                              ; preds = %196, %190
  %194 = phi i64 [ %197, %196 ], [ %.lcssa20, %190 ]
  %195 = icmp sgt i64 %194, 1
  br i1 %195, label %196, label %204

196:                                              ; preds = %193
  %197 = add nsw i64 %194, -1
  %198 = and i64 %197, 4294967295
  %199 = getelementptr inbounds [64 x [64 x double]], ptr @L3psycho_anal.s3_s, i64 0, i64 %176, i64 %198
  %200 = load double, ptr %199, align 8, !tbaa !39
  %201 = fcmp une double %200, 0.000000e+00
  br i1 %201, label %202, label %193, !llvm.loop !488

202:                                              ; preds = %196
  %.lcssa17 = phi i64 [ %197, %196 ]
  %203 = trunc i64 %.lcssa17 to i32
  br label %204

204:                                              ; preds = %202, %193
  %205 = phi i32 [ %203, %202 ], [ %142, %193 ]
  %206 = getelementptr inbounds [63 x [2 x i32]], ptr @L3psycho_anal.s3ind_s, i64 0, i64 %176, i64 1
  store i32 %205, ptr %206, align 4, !tbaa !11
  %207 = add nuw nsw i64 %176, 1
  %208 = icmp eq i64 %207, %143
  br i1 %208, label %177, label %175, !llvm.loop !489

209:                                              ; preds = %241, %178
  %210 = phi i64 [ 0, %178 ], [ %242, %241 ]
  %211 = getelementptr inbounds [63 x [2 x i32]], ptr @L3psycho_anal.s3ind, i64 0, i64 %210
  %212 = load i32, ptr %211, align 8, !tbaa !11
  %213 = getelementptr inbounds [63 x [2 x i32]], ptr @L3psycho_anal.s3ind, i64 0, i64 %210, i64 1
  %214 = load i32, ptr %213, align 4, !tbaa !11
  %215 = icmp sgt i32 %212, %214
  br i1 %215, label %241, label %216

216:                                              ; preds = %209
  %217 = sext i32 %212 to i64
  %218 = add i32 %214, 1
  br label %224

219:                                              ; preds = %224
  %.lcssa15 = phi double [ %229, %224 ]
  br i1 %215, label %241, label %220

220:                                              ; preds = %219
  %221 = fdiv double 0x3FD0137987DD704C, %.lcssa15
  %222 = sext i32 %212 to i64
  %223 = add i32 %214, 1
  br label %233

224:                                              ; preds = %224, %216
  %225 = phi i64 [ %217, %216 ], [ %230, %224 ]
  %226 = phi double [ 0.000000e+00, %216 ], [ %229, %224 ]
  %227 = getelementptr inbounds [64 x [64 x double]], ptr @L3psycho_anal.s3_l, i64 0, i64 %210, i64 %225
  %228 = load double, ptr %227, align 8, !tbaa !39
  %229 = fadd double %226, %228
  %230 = add nsw i64 %225, 1
  %231 = trunc i64 %230 to i32
  %232 = icmp eq i32 %218, %231
  br i1 %232, label %219, label %224, !llvm.loop !490

233:                                              ; preds = %233, %220
  %234 = phi i64 [ %222, %220 ], [ %238, %233 ]
  %235 = getelementptr inbounds [64 x [64 x double]], ptr @L3psycho_anal.s3_l, i64 0, i64 %210, i64 %234
  %236 = load double, ptr %235, align 8, !tbaa !39
  %237 = fmul double %221, %236
  store double %237, ptr %235, align 8, !tbaa !39
  %238 = add nsw i64 %234, 1
  %239 = trunc i64 %238 to i32
  %240 = icmp eq i32 %223, %239
  br i1 %240, label %241, label %233, !llvm.loop !491

241:                                              ; preds = %233, %219, %209
  %242 = add nuw nsw i64 %210, 1
  %243 = icmp eq i64 %242, %179
  br i1 %243, label %244, label %209, !llvm.loop !492

244:                                              ; preds = %241, %177
  %245 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 43
  %246 = load i32, ptr %245, align 8, !tbaa !162
  %247 = icmp eq i32 %246, 1
  %248 = and i1 %247, %138
  br i1 %248, label %249, label %259

249:                                              ; preds = %249, %244
  %250 = phi i64 [ %255, %249 ], [ 0, %244 ]
  %251 = getelementptr inbounds [63 x double], ptr %15, i64 0, i64 %250
  %252 = load double, ptr %251, align 8, !tbaa !39
  %253 = fmul double %252, 0x3FCD791C5F888823
  %254 = tail call double @exp(double noundef %253) #55
  store double %254, ptr %251, align 8, !tbaa !39
  %255 = add nuw nsw i64 %250, 1
  %256 = load i32, ptr @L3psycho_anal.npart_s, align 4, !tbaa !11
  %257 = sext i32 %256 to i64
  %258 = icmp slt i64 %255, %257
  br i1 %258, label %249, label %259, !llvm.loop !493

259:                                              ; preds = %249, %244
  %260 = phi i32 [ %127, %244 ], [ %256, %249 ]
  %261 = icmp sgt i32 %260, 0
  br i1 %261, label %262, label %301

262:                                              ; preds = %259
  %263 = zext i32 %260 to i64
  br label %264

264:                                              ; preds = %298, %262
  %265 = phi i64 [ 0, %262 ], [ %299, %298 ]
  %266 = getelementptr inbounds [63 x [2 x i32]], ptr @L3psycho_anal.s3ind_s, i64 0, i64 %265
  %267 = load i32, ptr %266, align 8, !tbaa !11
  %268 = getelementptr inbounds [63 x [2 x i32]], ptr @L3psycho_anal.s3ind_s, i64 0, i64 %265, i64 1
  %269 = load i32, ptr %268, align 4, !tbaa !11
  %270 = icmp sgt i32 %267, %269
  br i1 %270, label %298, label %271

271:                                              ; preds = %264
  %272 = sext i32 %267 to i64
  %273 = add i32 %269, 1
  br label %281

274:                                              ; preds = %281
  %.lcssa14 = phi double [ %286, %281 ]
  br i1 %270, label %298, label %275

275:                                              ; preds = %274
  %276 = getelementptr inbounds [63 x double], ptr %15, i64 0, i64 %265
  %277 = load double, ptr %276, align 8, !tbaa !39
  %278 = fdiv double %277, %.lcssa14
  %279 = sext i32 %267 to i64
  %280 = add i32 %269, 1
  br label %290

281:                                              ; preds = %281, %271
  %282 = phi i64 [ %272, %271 ], [ %287, %281 ]
  %283 = phi double [ 0.000000e+00, %271 ], [ %286, %281 ]
  %284 = getelementptr inbounds [64 x [64 x double]], ptr @L3psycho_anal.s3_s, i64 0, i64 %265, i64 %282
  %285 = load double, ptr %284, align 8, !tbaa !39
  %286 = fadd double %283, %285
  %287 = add nsw i64 %282, 1
  %288 = trunc i64 %287 to i32
  %289 = icmp eq i32 %273, %288
  br i1 %289, label %274, label %281, !llvm.loop !494

290:                                              ; preds = %290, %275
  %291 = phi i64 [ %279, %275 ], [ %295, %290 ]
  %292 = getelementptr inbounds [64 x [64 x double]], ptr @L3psycho_anal.s3_s, i64 0, i64 %265, i64 %291
  %293 = load double, ptr %292, align 8, !tbaa !39
  %294 = fmul double %293, %278
  store double %294, ptr %292, align 8, !tbaa !39
  %295 = add nsw i64 %291, 1
  %296 = trunc i64 %295 to i32
  %297 = icmp eq i32 %280, %296
  br i1 %297, label %298, label %290, !llvm.loop !495

298:                                              ; preds = %290, %274, %264
  %299 = add nuw nsw i64 %265, 1
  %300 = icmp eq i64 %299, %263
  br i1 %300, label %301, label %264, !llvm.loop !496

301:                                              ; preds = %298, %259
  tail call void @init_fft() #55
  call void @llvm.lifetime.end.p0(i64 504, ptr nonnull %15) #56
  br label %302

302:                                              ; preds = %301, %11
  %303 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 46
  %304 = load i32, ptr %303, align 4, !tbaa !173
  %305 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 8
  %306 = load i32, ptr %305, align 4, !tbaa !168
  %307 = icmp eq i32 %306, 1
  %308 = select i1 %307, i32 4, i32 %304
  %309 = icmp sgt i32 %308, 0
  br i1 %309, label %310, label %1102

310:                                              ; preds = %302
  %311 = sext i32 %2 to i64
  %312 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 37
  %313 = zext i32 %308 to i64
  br label %314

314:                                              ; preds = %1020, %310
  %315 = phi i64 [ 0, %310 ], [ %1021, %1020 ]
  %316 = and i64 %315, 1
  %317 = getelementptr inbounds [3 x [256 x float]], ptr @L3psycho_anal.wsamp_S, i64 %316
  %318 = getelementptr inbounds [1024 x float], ptr @L3psycho_anal.wsamp_L, i64 %316
  %319 = icmp ult i64 %315, 2
  br i1 %319, label %320, label %329

320:                                              ; preds = %314
  %321 = trunc i64 %315 to i32
  tail call void @fft_long(ptr noundef nonnull %318, i32 noundef %321, ptr noundef %1) #55
  tail call void @fft_short(ptr noundef nonnull %317, i32 noundef %321, ptr noundef %1) #55
  %322 = getelementptr inbounds [4 x double], ptr @L3psycho_anal.pe, i64 0, i64 %315
  %323 = load double, ptr %322, align 8, !tbaa !39
  %324 = getelementptr inbounds double, ptr %8, i64 %315
  store double %323, ptr %324, align 8, !tbaa !39
  %325 = getelementptr inbounds [2 x %struct.III_psy_ratio], ptr %6, i64 %311, i64 %315
  %326 = getelementptr inbounds [4 x %struct.III_psy_xmin], ptr @L3psycho_anal.thm, i64 0, i64 %315
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(488) %325, ptr noundef nonnull align 8 dereferenceable(488) %326, i64 488, i1 false), !tbaa.struct !497
  %327 = getelementptr inbounds [2 x %struct.III_psy_ratio], ptr %6, i64 %311, i64 %315, i32 1
  %328 = getelementptr inbounds [4 x %struct.III_psy_xmin], ptr @L3psycho_anal.en, i64 0, i64 %315
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(488) %327, ptr noundef nonnull align 8 dereferenceable(488) %328, i64 488, i1 false), !tbaa.struct !497
  br label %379

329:                                              ; preds = %314
  %330 = getelementptr inbounds [4 x double], ptr @L3psycho_anal.pe, i64 0, i64 %315
  %331 = load double, ptr %330, align 8, !tbaa !39
  %332 = add nuw i64 %315, 4294967294
  %333 = and i64 %332, 4294967295
  %334 = getelementptr inbounds double, ptr %9, i64 %333
  store double %331, ptr %334, align 8, !tbaa !39
  %335 = getelementptr inbounds [2 x %struct.III_psy_ratio], ptr %7, i64 %311, i64 %333
  %336 = getelementptr inbounds [2 x %struct.III_psy_ratio], ptr %7, i64 %311, i64 %333, i32 1
  %337 = getelementptr inbounds [4 x %struct.III_psy_xmin], ptr @L3psycho_anal.en, i64 0, i64 %315
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(488) %336, ptr noundef nonnull align 8 dereferenceable(488) %337, i64 488, i1 false), !tbaa.struct !497
  %338 = getelementptr inbounds [4 x %struct.III_psy_xmin], ptr @L3psycho_anal.thm, i64 0, i64 %315
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(488) %335, ptr noundef nonnull align 8 dereferenceable(488) %338, i64 488, i1 false), !tbaa.struct !497
  %339 = icmp eq i64 %315, 2
  br i1 %339, label %340, label %379

340:                                              ; preds = %340, %329
  %341 = phi i64 [ %355, %340 ], [ 0, %329 ]
  %342 = sub i64 1023, %341
  %343 = getelementptr [1024 x float], ptr getelementptr (float, ptr @L3psycho_anal.wsamp_L, i64 -3), i64 0, i64 %342
  %344 = load <4 x float>, ptr %343, align 16, !tbaa !48
  %345 = shufflevector <4 x float> %344, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %346 = getelementptr [2 x [1024 x float]], ptr getelementptr (float, ptr @L3psycho_anal.wsamp_L, i64 -3), i64 0, i64 1, i64 %342
  %347 = load <4 x float>, ptr %346, align 16, !tbaa !48
  %348 = shufflevector <4 x float> %347, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %349 = fadd <4 x float> %345, %348
  %350 = fmul <4 x float> %349, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %351 = shufflevector <4 x float> %350, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  store <4 x float> %351, ptr %343, align 16, !tbaa !48
  %352 = fsub <4 x float> %345, %348
  %353 = fmul <4 x float> %352, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %354 = shufflevector <4 x float> %353, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  store <4 x float> %354, ptr %346, align 16, !tbaa !48
  %355 = add nuw i64 %341, 4
  %356 = icmp eq i64 %355, 1024
  br i1 %356, label %357, label %340, !llvm.loop !498

357:                                              ; preds = %376, %340
  %358 = phi i64 [ %377, %376 ], [ 2, %340 ]
  br label %359

359:                                              ; preds = %359, %357
  %360 = phi i64 [ 0, %357 ], [ %374, %359 ]
  %361 = sub i64 255, %360
  %362 = getelementptr [3 x [256 x float]], ptr getelementptr (float, ptr @L3psycho_anal.wsamp_S, i64 -3), i64 0, i64 %358, i64 %361
  %363 = load <4 x float>, ptr %362, align 16, !tbaa !48
  %364 = shufflevector <4 x float> %363, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %365 = getelementptr [2 x [3 x [256 x float]]], ptr getelementptr (float, ptr @L3psycho_anal.wsamp_S, i64 -3), i64 0, i64 1, i64 %358, i64 %361
  %366 = load <4 x float>, ptr %365, align 16, !tbaa !48
  %367 = shufflevector <4 x float> %366, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %368 = fadd <4 x float> %364, %367
  %369 = fmul <4 x float> %368, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %370 = shufflevector <4 x float> %369, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  store <4 x float> %370, ptr %362, align 16, !tbaa !48
  %371 = fsub <4 x float> %364, %367
  %372 = fmul <4 x float> %371, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %373 = shufflevector <4 x float> %372, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  store <4 x float> %373, ptr %365, align 16, !tbaa !48
  %374 = add nuw i64 %360, 4
  %375 = icmp eq i64 %374, 256
  br i1 %375, label %376, label %359, !llvm.loop !499

376:                                              ; preds = %359
  %377 = add nsw i64 %358, -1
  %378 = icmp eq i64 %358, 0
  br i1 %378, label %379, label %357, !llvm.loop !500

379:                                              ; preds = %376, %329, %320
  %380 = load float, ptr %318, align 16, !tbaa !48
  %381 = fmul float %380, %380
  store float %381, ptr @L3psycho_anal.energy, align 16, !tbaa !48
  %382 = getelementptr inbounds [4 x float], ptr %12, i64 0, i64 %315
  br label %384

383:                                              ; preds = %384
  %.lcssa4 = phi float [ %397, %384 ]
  store float %.lcssa4, ptr %382, align 4, !tbaa !48
  br label %406

384:                                              ; preds = %384, %379
  %385 = phi i64 [ 511, %379 ], [ %398, %384 ]
  %386 = phi float [ %381, %379 ], [ %397, %384 ]
  %387 = sub nuw nsw i64 512, %385
  %388 = getelementptr inbounds [1024 x float], ptr @L3psycho_anal.wsamp_L, i64 %316, i64 %387
  %389 = load float, ptr %388, align 4, !tbaa !48
  %390 = add nuw nsw i64 %385, 512
  %391 = getelementptr inbounds [1024 x float], ptr @L3psycho_anal.wsamp_L, i64 %316, i64 %390
  %392 = load float, ptr %391, align 4, !tbaa !48
  %393 = fmul float %392, %392
  %394 = tail call float @llvm.fmuladd.f32(float %389, float %389, float %393)
  %395 = fmul float %394, 5.000000e-01
  %396 = getelementptr inbounds [513 x float], ptr @L3psycho_anal.energy, i64 0, i64 %387
  store float %395, ptr %396, align 4, !tbaa !48
  %397 = fadd float %386, %395
  %398 = add nsw i64 %385, -1
  %399 = icmp eq i64 %385, 0
  br i1 %399, label %383, label %384, !llvm.loop !501

400:                                              ; preds = %427
  %401 = load i1, ptr @L3psycho_anal.cw_lower_index, align 4
  br i1 %401, label %402, label %430

402:                                              ; preds = %400
  %403 = getelementptr inbounds [4 x [2 x [513 x float]]], ptr @L3psycho_anal.ax_sav, i64 0, i64 %315
  %404 = getelementptr inbounds [4 x [2 x [513 x float]]], ptr @L3psycho_anal.bx_sav, i64 0, i64 %315
  %405 = getelementptr inbounds [4 x [2 x [513 x float]]], ptr @L3psycho_anal.rx_sav, i64 0, i64 %315
  br label %436

406:                                              ; preds = %427, %383
  %407 = phi i64 [ 2, %383 ], [ %428, %427 ]
  %408 = getelementptr inbounds [3 x [256 x float]], ptr @L3psycho_anal.wsamp_S, i64 %316, i64 %407
  %409 = load float, ptr %408, align 16, !tbaa !48
  %410 = getelementptr inbounds [3 x [129 x float]], ptr @L3psycho_anal.energy_s, i64 0, i64 %407
  %411 = fmul float %409, %409
  store float %411, ptr %410, align 4, !tbaa !48
  br label %412

412:                                              ; preds = %412, %406
  %413 = phi i64 [ 0, %406 ], [ %425, %412 ]
  %414 = or i64 %413, 1
  %415 = getelementptr inbounds [3 x [256 x float]], ptr @L3psycho_anal.wsamp_S, i64 %316, i64 %407, i64 %414
  %416 = load <4 x float>, ptr %415, align 4, !tbaa !48
  %417 = sub i64 255, %413
  %418 = getelementptr [3 x [256 x float]], ptr getelementptr (float, ptr @L3psycho_anal.wsamp_S, i64 -3), i64 %316, i64 %407, i64 %417
  %419 = load <4 x float>, ptr %418, align 16, !tbaa !48
  %420 = fmul <4 x float> %419, %419
  %421 = shufflevector <4 x float> %420, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %422 = tail call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %416, <4 x float> %416, <4 x float> %421)
  %423 = fmul <4 x float> %422, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %424 = getelementptr inbounds [3 x [129 x float]], ptr @L3psycho_anal.energy_s, i64 0, i64 %407, i64 %414
  store <4 x float> %423, ptr %424, align 4, !tbaa !48
  %425 = add nuw i64 %413, 4
  %426 = icmp eq i64 %425, 128
  br i1 %426, label %427, label %412, !llvm.loop !502

427:                                              ; preds = %412
  %428 = add nsw i64 %407, -1
  %429 = icmp eq i64 %407, 0
  br i1 %429, label %400, label %406, !llvm.loop !503

430:                                              ; preds = %509, %400
  %431 = phi i32 [ 0, %400 ], [ %514, %509 ]
  %432 = load i32, ptr @L3psycho_anal.cw_upper_index, align 4, !tbaa !11
  %433 = icmp slt i32 %431, %432
  br i1 %433, label %434, label %517

434:                                              ; preds = %430
  %435 = zext i32 %431 to i64
  br label %520

436:                                              ; preds = %509, %402
  %437 = phi i64 [ 0, %402 ], [ %512, %509 ]
  %438 = getelementptr inbounds [4 x [2 x [513 x float]]], ptr @L3psycho_anal.ax_sav, i64 0, i64 %315, i64 1, i64 %437
  %439 = load float, ptr %438, align 4, !tbaa !48
  %440 = getelementptr inbounds [4 x [2 x [513 x float]]], ptr @L3psycho_anal.bx_sav, i64 0, i64 %315, i64 1, i64 %437
  %441 = load float, ptr %440, align 4, !tbaa !48
  %442 = getelementptr inbounds [4 x [2 x [513 x float]]], ptr @L3psycho_anal.rx_sav, i64 0, i64 %315, i64 1, i64 %437
  %443 = load float, ptr %442, align 4, !tbaa !48
  %444 = getelementptr inbounds [513 x float], ptr %403, i64 0, i64 %437
  %445 = load float, ptr %444, align 4, !tbaa !48
  store float %445, ptr %438, align 4, !tbaa !48
  %446 = getelementptr inbounds [513 x float], ptr %404, i64 0, i64 %437
  %447 = load float, ptr %446, align 4, !tbaa !48
  store float %447, ptr %440, align 4, !tbaa !48
  %448 = getelementptr inbounds [513 x float], ptr %405, i64 0, i64 %437
  %449 = load float, ptr %448, align 4, !tbaa !48
  store float %449, ptr %442, align 4, !tbaa !48
  %450 = getelementptr inbounds [1024 x float], ptr @L3psycho_anal.wsamp_L, i64 %316, i64 %437
  %451 = load float, ptr %450, align 4, !tbaa !48
  store float %451, ptr %444, align 4, !tbaa !48
  %452 = icmp eq i64 %437, 0
  %453 = sub nuw nsw i64 1024, %437
  %454 = getelementptr inbounds [1024 x float], ptr @L3psycho_anal.wsamp_L, i64 %316, i64 %453
  %455 = select i1 %452, ptr %318, ptr %454
  %456 = load float, ptr %455, align 4, !tbaa !48
  store float %456, ptr %446, align 4, !tbaa !48
  %457 = getelementptr inbounds [513 x float], ptr @L3psycho_anal.energy, i64 0, i64 %437
  %458 = load float, ptr %457, align 4, !tbaa !48
  %459 = tail call float @sqrtf(float noundef %458) #18
  store float %459, ptr %448, align 4, !tbaa !48
  %460 = fcmp une float %449, 0.000000e+00
  br i1 %460, label %461, label %468

461:                                              ; preds = %436
  %462 = fmul float %445, %447
  %463 = fneg float %447
  %464 = fmul float %447, %463
  %465 = tail call float @llvm.fmuladd.f32(float %445, float %445, float %464)
  %466 = fmul float %465, 5.000000e-01
  %467 = fmul float %449, %449
  br label %468

468:                                              ; preds = %461, %436
  %469 = phi float [ %467, %461 ], [ 1.000000e+00, %436 ]
  %470 = phi float [ %466, %461 ], [ 0.000000e+00, %436 ]
  %471 = phi float [ %462, %461 ], [ 1.000000e+00, %436 ]
  %472 = fcmp une float %443, 0.000000e+00
  br i1 %472, label %473, label %483

473:                                              ; preds = %468
  %474 = fadd float %470, %471
  %475 = fadd float %439, %441
  %476 = fmul float %475, %474
  %477 = fmul float %476, 5.000000e-01
  %478 = fneg float %439
  %479 = tail call float @llvm.fmuladd.f32(float %478, float %471, float %477)
  %480 = fneg float %441
  %481 = tail call float @llvm.fmuladd.f32(float %480, float %470, float %477)
  %482 = fmul float %443, %469
  br label %483

483:                                              ; preds = %473, %468
  %484 = phi float [ %482, %473 ], [ %469, %468 ]
  %485 = phi float [ %479, %473 ], [ %470, %468 ]
  %486 = phi float [ %481, %473 ], [ %471, %468 ]
  %487 = fneg float %443
  %488 = tail call float @llvm.fmuladd.f32(float %449, float 2.000000e+00, float %487)
  %489 = tail call float @llvm.fabs.f32(float %488)
  %490 = fadd float %489, %459
  %491 = fcmp une float %490, 0.000000e+00
  br i1 %491, label %492, label %509

492:                                              ; preds = %483
  %493 = fdiv float %488, %484
  %494 = fadd float %451, %456
  %495 = fneg float %486
  %496 = fmul float %493, %495
  %497 = tail call float @llvm.fmuladd.f32(float %494, float 5.000000e-01, float %496)
  %498 = fsub float %451, %456
  %499 = fneg float %485
  %500 = fmul float %493, %499
  %501 = tail call float @llvm.fmuladd.f32(float %498, float 5.000000e-01, float %500)
  %502 = fmul float %501, %501
  %503 = tail call float @llvm.fmuladd.f32(float %497, float %497, float %502)
  %504 = fpext float %503 to double
  %505 = tail call double @llvm.sqrt.f64(double %504)
  %506 = fpext float %490 to double
  %507 = fdiv double %505, %506
  %508 = fptrunc double %507 to float
  br label %509

509:                                              ; preds = %492, %483
  %510 = phi float [ %508, %492 ], [ %490, %483 ]
  %511 = getelementptr inbounds [513 x float], ptr @L3psycho_anal.cw, i64 0, i64 %437
  store float %510, ptr %511, align 4, !tbaa !48
  %512 = add nuw nsw i64 %437, 1
  %513 = load i1, ptr @L3psycho_anal.cw_lower_index, align 4
  %514 = select i1 %513, i32 6, i32 0
  %515 = zext i32 %514 to i64
  %516 = icmp ult i64 %512, %515
  br i1 %516, label %436, label %430, !llvm.loop !504

517:                                              ; preds = %598, %430
  %518 = phi i32 [ %432, %430 ], [ %609, %598 ]
  %519 = icmp sgt i32 %518, 0
  br i1 %519, label %621, label %614

520:                                              ; preds = %598, %434
  %521 = phi i64 [ %435, %434 ], [ %608, %598 ]
  %522 = add nuw nsw i64 %521, 2
  %523 = lshr i64 %522, 2
  %524 = getelementptr inbounds [129 x float], ptr @L3psycho_anal.energy_s, i64 0, i64 %523
  %525 = load float, ptr %524, align 4, !tbaa !48
  %526 = fcmp une float %525, 0.000000e+00
  br i1 %526, label %527, label %539

527:                                              ; preds = %520
  %528 = getelementptr inbounds [256 x float], ptr %317, i64 0, i64 %523
  %529 = load float, ptr %528, align 4, !tbaa !48
  %530 = sub nsw i64 256, %523
  %531 = getelementptr inbounds [256 x float], ptr %317, i64 0, i64 %530
  %532 = load float, ptr %531, align 4, !tbaa !48
  %533 = fmul float %529, %532
  %534 = fneg float %532
  %535 = fmul float %532, %534
  %536 = tail call float @llvm.fmuladd.f32(float %529, float %529, float %535)
  %537 = fmul float %536, 5.000000e-01
  %538 = tail call float @sqrtf(float noundef %525) #18
  br label %539

539:                                              ; preds = %527, %520
  %540 = phi float [ %538, %527 ], [ %525, %520 ]
  %541 = phi float [ %533, %527 ], [ 1.000000e+00, %520 ]
  %542 = phi float [ %537, %527 ], [ 0.000000e+00, %520 ]
  %543 = phi float [ %525, %527 ], [ 1.000000e+00, %520 ]
  %544 = getelementptr inbounds [3 x [129 x float]], ptr @L3psycho_anal.energy_s, i64 0, i64 2, i64 %523
  %545 = load float, ptr %544, align 4, !tbaa !48
  %546 = fcmp une float %545, 0.000000e+00
  br i1 %546, label %547, label %563

547:                                              ; preds = %539
  %548 = getelementptr inbounds [3 x [256 x float]], ptr @L3psycho_anal.wsamp_S, i64 %316, i64 2, i64 %523
  %549 = load float, ptr %548, align 4, !tbaa !48
  %550 = sub nsw i64 256, %523
  %551 = getelementptr inbounds [3 x [256 x float]], ptr @L3psycho_anal.wsamp_S, i64 %316, i64 2, i64 %550
  %552 = load float, ptr %551, align 4, !tbaa !48
  %553 = fadd float %541, %542
  %554 = fadd float %549, %552
  %555 = fmul float %553, %554
  %556 = fmul float %555, 5.000000e-01
  %557 = fneg float %549
  %558 = tail call float @llvm.fmuladd.f32(float %557, float %541, float %556)
  %559 = fneg float %552
  %560 = tail call float @llvm.fmuladd.f32(float %559, float %542, float %556)
  %561 = tail call float @sqrtf(float noundef %545) #18
  %562 = fmul float %543, %561
  br label %563

563:                                              ; preds = %547, %539
  %564 = phi float [ %561, %547 ], [ %545, %539 ]
  %565 = phi float [ %560, %547 ], [ %541, %539 ]
  %566 = phi float [ %558, %547 ], [ %542, %539 ]
  %567 = phi float [ %562, %547 ], [ %543, %539 ]
  %568 = fneg float %564
  %569 = tail call float @llvm.fmuladd.f32(float %540, float 2.000000e+00, float %568)
  %570 = getelementptr inbounds [3 x [129 x float]], ptr @L3psycho_anal.energy_s, i64 0, i64 1, i64 %523
  %571 = load float, ptr %570, align 4, !tbaa !48
  %572 = tail call float @sqrtf(float noundef %571) #18
  %573 = tail call float @llvm.fabs.f32(float %569)
  %574 = fadd float %573, %572
  %575 = fcmp une float %574, 0.000000e+00
  br i1 %575, label %576, label %598

576:                                              ; preds = %563
  %577 = fdiv float %569, %567
  %578 = getelementptr inbounds [3 x [256 x float]], ptr @L3psycho_anal.wsamp_S, i64 %316, i64 1, i64 %523
  %579 = load float, ptr %578, align 4, !tbaa !48
  %580 = sub nsw i64 256, %523
  %581 = getelementptr inbounds [3 x [256 x float]], ptr @L3psycho_anal.wsamp_S, i64 %316, i64 1, i64 %580
  %582 = load float, ptr %581, align 4, !tbaa !48
  %583 = fadd float %579, %582
  %584 = fneg float %565
  %585 = fmul float %577, %584
  %586 = tail call float @llvm.fmuladd.f32(float %583, float 5.000000e-01, float %585)
  %587 = fsub float %579, %582
  %588 = fneg float %566
  %589 = fmul float %577, %588
  %590 = tail call float @llvm.fmuladd.f32(float %587, float 5.000000e-01, float %589)
  %591 = fmul float %590, %590
  %592 = tail call float @llvm.fmuladd.f32(float %586, float %586, float %591)
  %593 = fpext float %592 to double
  %594 = tail call double @llvm.sqrt.f64(double %593)
  %595 = fpext float %574 to double
  %596 = fdiv double %594, %595
  %597 = fptrunc double %596 to float
  br label %598

598:                                              ; preds = %576, %563
  %599 = phi float [ %597, %576 ], [ %574, %563 ]
  %600 = getelementptr inbounds [513 x float], ptr @L3psycho_anal.cw, i64 0, i64 %521
  store float %599, ptr %600, align 8, !tbaa !48
  %601 = add nuw i64 %521, 3
  %602 = and i64 %601, 4294967295
  %603 = getelementptr inbounds [513 x float], ptr @L3psycho_anal.cw, i64 0, i64 %602
  store float %599, ptr %603, align 4, !tbaa !48
  %604 = getelementptr inbounds [513 x float], ptr @L3psycho_anal.cw, i64 0, i64 %522
  store float %599, ptr %604, align 8, !tbaa !48
  %605 = and i64 %521, 4294967294
  %606 = or i64 %605, 1
  %607 = getelementptr inbounds [513 x float], ptr @L3psycho_anal.cw, i64 0, i64 %606
  store float %599, ptr %607, align 4, !tbaa !48
  %608 = add nuw nsw i64 %521, 4
  %609 = load i32, ptr @L3psycho_anal.cw_upper_index, align 4, !tbaa !11
  %610 = sext i32 %609 to i64
  %611 = icmp slt i64 %608, %610
  br i1 %611, label %520, label %517, !llvm.loop !505

612:                                              ; preds = %657
  %.lcssa7 = phi i32 [ %658, %657 ]
  %.lcssa6 = phi i64 [ %664, %657 ]
  %613 = trunc i64 %.lcssa6 to i32
  br label %614

614:                                              ; preds = %612, %517
  %615 = phi i32 [ 0, %517 ], [ %.lcssa7, %612 ]
  %616 = phi i32 [ 0, %517 ], [ %613, %612 ]
  %617 = load i32, ptr @L3psycho_anal.npart_l_orig, align 4, !tbaa !11
  %618 = icmp slt i32 %616, %617
  br i1 %618, label %619, label %701

619:                                              ; preds = %614
  %620 = zext i32 %616 to i64
  br label %666

621:                                              ; preds = %657, %517
  %622 = phi i64 [ %664, %657 ], [ 0, %517 ]
  %623 = phi i32 [ %658, %657 ], [ 0, %517 ]
  %624 = sext i32 %623 to i64
  %625 = getelementptr inbounds [513 x float], ptr @L3psycho_anal.energy, i64 0, i64 %624
  %626 = load float, ptr %625, align 4, !tbaa !48
  %627 = getelementptr inbounds [513 x float], ptr @L3psycho_anal.cw, i64 0, i64 %624
  %628 = load float, ptr %627, align 4, !tbaa !48
  %629 = fmul float %626, %628
  %630 = insertelement <2 x float> poison, float %626, i64 0
  %631 = insertelement <2 x float> %630, float %629, i64 1
  %632 = fpext <2 x float> %631 to <2 x double>
  %633 = getelementptr inbounds [63 x i32], ptr @L3psycho_anal.numlines_l, i64 0, i64 %622
  %634 = load i32, ptr %633, align 4, !tbaa !11
  %635 = add nsw i32 %623, 1
  %636 = icmp sgt i32 %634, 1
  br i1 %636, label %637, label %657

637:                                              ; preds = %621
  %638 = sext i32 %635 to i64
  br label %639

639:                                              ; preds = %639, %637
  %640 = phi i64 [ %638, %637 ], [ %653, %639 ]
  %641 = phi i32 [ %634, %637 ], [ %643, %639 ]
  %642 = phi <2 x double> [ %632, %637 ], [ %652, %639 ]
  %643 = add nsw i32 %641, -1
  %644 = getelementptr inbounds [513 x float], ptr @L3psycho_anal.energy, i64 0, i64 %640
  %645 = load float, ptr %644, align 4, !tbaa !48
  %646 = getelementptr inbounds [513 x float], ptr @L3psycho_anal.cw, i64 0, i64 %640
  %647 = load float, ptr %646, align 4, !tbaa !48
  %648 = fmul float %645, %647
  %649 = insertelement <2 x float> poison, float %645, i64 0
  %650 = insertelement <2 x float> %649, float %648, i64 1
  %651 = fpext <2 x float> %650 to <2 x double>
  %652 = fadd <2 x double> %642, %651
  %653 = add nsw i64 %640, 1
  %654 = icmp ugt i32 %641, 2
  br i1 %654, label %639, label %655, !llvm.loop !506

655:                                              ; preds = %639
  %.lcssa5 = phi <2 x double> [ %652, %639 ]
  %656 = add i32 %623, %634
  br label %657

657:                                              ; preds = %655, %621
  %658 = phi i32 [ %635, %621 ], [ %656, %655 ]
  %659 = phi <2 x double> [ %632, %621 ], [ %.lcssa5, %655 ]
  %660 = getelementptr inbounds [63 x double], ptr @L3psycho_anal.eb, i64 0, i64 %622
  %661 = extractelement <2 x double> %659, i64 0
  store double %661, ptr %660, align 8, !tbaa !39
  %662 = getelementptr inbounds [63 x double], ptr @L3psycho_anal.cb, i64 0, i64 %622
  %663 = extractelement <2 x double> %659, i64 1
  store double %663, ptr %662, align 8, !tbaa !39
  %664 = add nuw i64 %622, 1
  %665 = icmp slt i32 %658, %518
  br i1 %665, label %621, label %612, !llvm.loop !507

666:                                              ; preds = %692, %619
  %667 = phi i64 [ %620, %619 ], [ %698, %692 ]
  %668 = phi i32 [ %615, %619 ], [ %694, %692 ]
  %669 = sext i32 %668 to i64
  %670 = getelementptr inbounds [513 x float], ptr @L3psycho_anal.energy, i64 0, i64 %669
  %671 = load float, ptr %670, align 4, !tbaa !48
  %672 = fpext float %671 to double
  %673 = getelementptr inbounds [63 x i32], ptr @L3psycho_anal.numlines_l, i64 0, i64 %667
  %674 = load i32, ptr %673, align 4, !tbaa !11
  %675 = add i32 %668, 1
  %676 = icmp sgt i32 %674, 1
  br i1 %676, label %677, label %692

677:                                              ; preds = %666
  %678 = sext i32 %675 to i64
  br label %679

679:                                              ; preds = %679, %677
  %680 = phi i64 [ %678, %677 ], [ %688, %679 ]
  %681 = phi double [ %672, %677 ], [ %687, %679 ]
  %682 = phi i32 [ %674, %677 ], [ %683, %679 ]
  %683 = add nsw i32 %682, -1
  %684 = getelementptr inbounds [513 x float], ptr @L3psycho_anal.energy, i64 0, i64 %680
  %685 = load float, ptr %684, align 4, !tbaa !48
  %686 = fpext float %685 to double
  %687 = fadd double %681, %686
  %688 = add nsw i64 %680, 1
  %689 = icmp ugt i32 %682, 2
  br i1 %689, label %679, label %690, !llvm.loop !508

690:                                              ; preds = %679
  %.lcssa8 = phi double [ %687, %679 ]
  %691 = add i32 %668, %674
  br label %692

692:                                              ; preds = %690, %666
  %693 = phi double [ %672, %666 ], [ %.lcssa8, %690 ]
  %694 = phi i32 [ %675, %666 ], [ %691, %690 ]
  %695 = getelementptr inbounds [63 x double], ptr @L3psycho_anal.eb, i64 0, i64 %667
  store double %693, ptr %695, align 8, !tbaa !39
  %696 = fmul double %693, 4.000000e-01
  %697 = getelementptr inbounds [63 x double], ptr @L3psycho_anal.cb, i64 0, i64 %667
  store double %696, ptr %697, align 8, !tbaa !39
  %698 = add nuw nsw i64 %667, 1
  %699 = trunc i64 %698 to i32
  %700 = icmp sgt i32 %617, %699
  br i1 %700, label %666, label %701, !llvm.loop !509

701:                                              ; preds = %692, %614
  %702 = getelementptr inbounds [4 x double], ptr @L3psycho_anal.pe, i64 0, i64 %315
  store double 0.000000e+00, ptr %702, align 8, !tbaa !39
  %703 = load i32, ptr @L3psycho_anal.npart_l, align 4, !tbaa !11
  %704 = icmp sgt i32 %703, 0
  br i1 %704, label %705, label %785

705:                                              ; preds = %780, %701
  %706 = phi i64 [ %781, %780 ], [ 0, %701 ]
  %707 = getelementptr inbounds [63 x [2 x i32]], ptr @L3psycho_anal.s3ind, i64 0, i64 %706
  %708 = load i32, ptr %707, align 8, !tbaa !11
  %709 = getelementptr inbounds [63 x [2 x i32]], ptr @L3psycho_anal.s3ind, i64 0, i64 %706, i64 1
  %710 = load i32, ptr %709, align 4, !tbaa !11
  %711 = icmp sgt i32 %708, %710
  br i1 %711, label %745, label %712

712:                                              ; preds = %705
  %713 = sext i32 %708 to i64
  %714 = add i32 %710, 1
  br label %715

715:                                              ; preds = %715, %712
  %716 = phi i64 [ %713, %712 ], [ %729, %715 ]
  %717 = phi <2 x double> [ zeroinitializer, %712 ], [ %728, %715 ]
  %718 = getelementptr inbounds [64 x [64 x double]], ptr @L3psycho_anal.s3_l, i64 0, i64 %706, i64 %716
  %719 = load double, ptr %718, align 8, !tbaa !39
  %720 = getelementptr inbounds [63 x double], ptr @L3psycho_anal.eb, i64 0, i64 %716
  %721 = load double, ptr %720, align 8, !tbaa !39
  %722 = getelementptr inbounds [63 x double], ptr @L3psycho_anal.cb, i64 0, i64 %716
  %723 = load double, ptr %722, align 8, !tbaa !39
  %724 = insertelement <2 x double> poison, double %719, i64 0
  %725 = shufflevector <2 x double> %724, <2 x double> poison, <2 x i32> zeroinitializer
  %726 = insertelement <2 x double> poison, double %723, i64 0
  %727 = insertelement <2 x double> %726, double %721, i64 1
  %728 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %725, <2 x double> %727, <2 x double> %717)
  %729 = add nsw i64 %716, 1
  %730 = trunc i64 %729 to i32
  %731 = icmp eq i32 %714, %730
  br i1 %731, label %732, label %715, !llvm.loop !510

732:                                              ; preds = %715
  %.lcssa9 = phi <2 x double> [ %728, %715 ]
  %733 = extractelement <2 x double> %.lcssa9, i64 1
  %734 = fcmp une double %733, 0.000000e+00
  br i1 %734, label %735, label %745

735:                                              ; preds = %732
  %736 = extractelement <2 x double> %.lcssa9, i64 0
  %737 = fdiv double %736, %733
  %738 = fcmp ugt double %737, 0x3FA8F6869E6F084D
  br i1 %738, label %739, label %745

739:                                              ; preds = %735
  %740 = fcmp ogt double %737, 0x3FDFEDFBDEEA22F7
  br i1 %740, label %745, label %741

741:                                              ; preds = %739
  %742 = tail call double @log(double noundef %737) #55
  %743 = tail call double @llvm.fmuladd.f64(double %742, double 0x3FF30298B36105E3, double 0x3FEA6FF6E4078667)
  %744 = tail call double @exp(double noundef %743) #55
  br label %745

745:                                              ; preds = %741, %739, %735, %732, %705
  %746 = phi double [ %733, %741 ], [ %733, %732 ], [ %733, %735 ], [ %733, %739 ], [ 0.000000e+00, %705 ]
  %747 = phi double [ %744, %741 ], [ %733, %732 ], [ 0x3FB0270AC3F8A9F9, %735 ], [ 1.000000e+00, %739 ], [ 0.000000e+00, %705 ]
  %748 = getelementptr inbounds [63 x double], ptr @L3psycho_anal.minval, i64 0, i64 %706
  %749 = load double, ptr %748, align 8, !tbaa !39
  %750 = fcmp olt double %749, %747
  %751 = select i1 %750, double %749, double %747
  %752 = fmul double %746, %751
  %753 = getelementptr inbounds [4 x [63 x double]], ptr @L3psycho_anal.nb_1, i64 0, i64 %315, i64 %706
  %754 = load double, ptr %753, align 8, !tbaa !39
  %755 = fmul double %754, 2.000000e+00
  %756 = getelementptr inbounds [4 x [63 x double]], ptr @L3psycho_anal.nb_2, i64 0, i64 %315, i64 %706
  %757 = load double, ptr %756, align 8, !tbaa !39
  %758 = fmul double %757, 1.600000e+01
  %759 = fcmp olt double %755, %758
  %760 = select i1 %759, double %755, double %758
  %761 = fcmp olt double %752, %760
  %762 = select i1 %761, double %752, double %760
  %763 = getelementptr inbounds [63 x double], ptr @L3psycho_anal.qthr_l, i64 0, i64 %706
  %764 = load double, ptr %763, align 8, !tbaa !39
  %765 = fcmp ogt double %764, %762
  %766 = select i1 %765, double %764, double %762
  %767 = getelementptr inbounds [63 x double], ptr @L3psycho_anal.thr, i64 0, i64 %706
  store double %766, ptr %767, align 8, !tbaa !39
  store double %754, ptr %756, align 8, !tbaa !39
  store double %752, ptr %753, align 8, !tbaa !39
  %768 = getelementptr inbounds [63 x double], ptr @L3psycho_anal.eb, i64 0, i64 %706
  %769 = load double, ptr %768, align 8, !tbaa !39
  %770 = fcmp olt double %766, %769
  br i1 %770, label %771, label %780

771:                                              ; preds = %745
  %772 = getelementptr inbounds [63 x i32], ptr @L3psycho_anal.numlines_l, i64 0, i64 %706
  %773 = load i32, ptr %772, align 4, !tbaa !11
  %774 = sitofp i32 %773 to double
  %775 = fdiv double %766, %769
  %776 = tail call double @log(double noundef %775) #55
  %777 = load double, ptr %702, align 8, !tbaa !39
  %778 = fneg double %774
  %779 = tail call double @llvm.fmuladd.f64(double %778, double %776, double %777)
  store double %779, ptr %702, align 8, !tbaa !39
  br label %780

780:                                              ; preds = %771, %745
  %781 = add nuw nsw i64 %706, 1
  %782 = load i32, ptr @L3psycho_anal.npart_l, align 4, !tbaa !11
  %783 = sext i32 %782 to i64
  %784 = icmp slt i64 %781, %783
  br i1 %784, label %705, label %785, !llvm.loop !511

785:                                              ; preds = %780, %701
  br i1 %319, label %786, label %831

786:                                              ; preds = %785
  %787 = load i32, ptr %312, align 8, !tbaa !303
  %788 = icmp eq i32 %787, 0
  br i1 %788, label %791, label %789

789:                                              ; preds = %786
  %790 = getelementptr inbounds [2 x i32], ptr %14, i64 0, i64 %315
  store i32 1, ptr %790, align 4, !tbaa !11
  br label %831

791:                                              ; preds = %786
  %792 = load double, ptr %702, align 8, !tbaa !39
  %793 = fcmp ogt double %792, 3.000000e+03
  br i1 %793, label %794, label %796

794:                                              ; preds = %791
  %795 = getelementptr inbounds [2 x i32], ptr %14, i64 0, i64 %315
  store i32 0, ptr %795, align 4, !tbaa !11
  br label %831

796:                                              ; preds = %796, %791
  %797 = phi i64 [ %810, %796 ], [ 64, %791 ]
  %798 = phi float [ %809, %796 ], [ 0.000000e+00, %791 ]
  %799 = phi float [ %806, %796 ], [ 0.000000e+00, %791 ]
  %800 = phi float [ %803, %796 ], [ 0.000000e+00, %791 ]
  %801 = getelementptr inbounds [129 x float], ptr @L3psycho_anal.energy_s, i64 0, i64 %797
  %802 = load float, ptr %801, align 4, !tbaa !48
  %803 = fadd float %800, %802
  %804 = getelementptr inbounds [3 x [129 x float]], ptr @L3psycho_anal.energy_s, i64 0, i64 1, i64 %797
  %805 = load float, ptr %804, align 4, !tbaa !48
  %806 = fadd float %799, %805
  %807 = getelementptr inbounds [3 x [129 x float]], ptr @L3psycho_anal.energy_s, i64 0, i64 2, i64 %797
  %808 = load float, ptr %807, align 4, !tbaa !48
  %809 = fadd float %798, %808
  %810 = add nuw nsw i64 %797, 1
  %811 = icmp eq i64 %810, 129
  br i1 %811, label %812, label %796, !llvm.loop !512

812:                                              ; preds = %796
  %.lcssa12 = phi float [ %803, %796 ]
  %.lcssa11 = phi float [ %806, %796 ]
  %.lcssa10 = phi float [ %809, %796 ]
  %813 = fcmp olt float %.lcssa12, %.lcssa11
  %814 = select i1 %813, float %.lcssa12, float %.lcssa11
  %815 = fcmp olt float %814, %.lcssa10
  %816 = select i1 %815, float %814, float %.lcssa10
  %817 = fcmp ogt float %.lcssa12, %.lcssa11
  %818 = select i1 %817, float %.lcssa12, float %.lcssa11
  %819 = fcmp ogt float %818, %.lcssa10
  %820 = select i1 %819, float %818, float %.lcssa10
  %821 = getelementptr inbounds [2 x i32], ptr %14, i64 0, i64 %315
  store i32 1, ptr %821, align 4, !tbaa !11
  %822 = fmul float %816, 3.000000e+01
  %823 = fcmp ogt float %820, %822
  br i1 %823, label %824, label %825

824:                                              ; preds = %812
  store i32 0, ptr %821, align 4, !tbaa !11
  br label %831

825:                                              ; preds = %812
  %826 = fmul float %816, 1.000000e+01
  %827 = fcmp ogt float %820, %826
  %828 = fcmp ogt double %792, 1.000000e+03
  %829 = and i1 %828, %827
  br i1 %829, label %830, label %831

830:                                              ; preds = %825
  store i32 0, ptr %821, align 4, !tbaa !11
  br label %831

831:                                              ; preds = %830, %825, %824, %794, %789, %785
  %832 = getelementptr inbounds [4 x %struct.III_psy_xmin], ptr @L3psycho_anal.en, i64 0, i64 %315
  %833 = getelementptr inbounds [4 x %struct.III_psy_xmin], ptr @L3psycho_anal.thm, i64 0, i64 %315
  br label %841

834:                                              ; preds = %888
  %835 = load i32, ptr @L3psycho_anal.npart_s_orig, align 4, !tbaa !11
  %836 = icmp sgt i32 %835, 0
  %837 = load i32, ptr @L3psycho_anal.npart_s, align 4, !tbaa !11
  %838 = icmp sgt i32 %837, 0
  %839 = zext i32 %835 to i64
  %840 = zext i32 %837 to i64
  br label %896

841:                                              ; preds = %888, %831
  %842 = phi i64 [ 0, %831 ], [ %894, %888 ]
  %843 = getelementptr inbounds [21 x double], ptr @L3psycho_anal.w1_l, i64 0, i64 %842
  %844 = load double, ptr %843, align 8, !tbaa !39
  %845 = getelementptr inbounds [21 x i32], ptr @L3psycho_anal.bu_l, i64 0, i64 %842
  %846 = load i32, ptr %845, align 4, !tbaa !11
  %847 = sext i32 %846 to i64
  %848 = getelementptr inbounds [63 x double], ptr @L3psycho_anal.eb, i64 0, i64 %847
  %849 = load double, ptr %848, align 8, !tbaa !39
  %850 = getelementptr inbounds [21 x double], ptr @L3psycho_anal.w2_l, i64 0, i64 %842
  %851 = load double, ptr %850, align 8, !tbaa !39
  %852 = getelementptr inbounds [21 x i32], ptr @L3psycho_anal.bo_l, i64 0, i64 %842
  %853 = load i32, ptr %852, align 4, !tbaa !11
  %854 = sext i32 %853 to i64
  %855 = getelementptr inbounds [63 x double], ptr @L3psycho_anal.eb, i64 0, i64 %854
  %856 = load double, ptr %855, align 8, !tbaa !39
  %857 = getelementptr inbounds [63 x double], ptr @L3psycho_anal.thr, i64 0, i64 %847
  %858 = load double, ptr %857, align 8, !tbaa !39
  %859 = getelementptr inbounds [63 x double], ptr @L3psycho_anal.thr, i64 0, i64 %854
  %860 = load double, ptr %859, align 8, !tbaa !39
  %861 = insertelement <2 x double> poison, double %851, i64 0
  %862 = shufflevector <2 x double> %861, <2 x double> poison, <2 x i32> zeroinitializer
  %863 = insertelement <2 x double> poison, double %856, i64 0
  %864 = insertelement <2 x double> %863, double %860, i64 1
  %865 = fmul <2 x double> %862, %864
  %866 = insertelement <2 x double> poison, double %844, i64 0
  %867 = shufflevector <2 x double> %866, <2 x double> poison, <2 x i32> zeroinitializer
  %868 = insertelement <2 x double> poison, double %849, i64 0
  %869 = insertelement <2 x double> %868, double %858, i64 1
  %870 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %867, <2 x double> %869, <2 x double> %865)
  %871 = add nsw i32 %846, 1
  %872 = icmp slt i32 %871, %853
  br i1 %872, label %873, label %888

873:                                              ; preds = %841
  %874 = add nsw i64 %847, 1
  br label %875

875:                                              ; preds = %875, %873
  %876 = phi i64 [ %874, %873 ], [ %885, %875 ]
  %877 = phi <2 x double> [ %870, %873 ], [ %884, %875 ]
  %878 = getelementptr inbounds [63 x double], ptr @L3psycho_anal.eb, i64 0, i64 %876
  %879 = load double, ptr %878, align 8, !tbaa !39
  %880 = getelementptr inbounds [63 x double], ptr @L3psycho_anal.thr, i64 0, i64 %876
  %881 = load double, ptr %880, align 8, !tbaa !39
  %882 = insertelement <2 x double> poison, double %879, i64 0
  %883 = insertelement <2 x double> %882, double %881, i64 1
  %884 = fadd <2 x double> %877, %883
  %885 = add nsw i64 %876, 1
  %886 = trunc i64 %885 to i32
  %887 = icmp eq i32 %853, %886
  br i1 %887, label %888, label %875, !llvm.loop !513

888:                                              ; preds = %875, %841
  %889 = phi <2 x double> [ %870, %841 ], [ %884, %875 ]
  %890 = getelementptr inbounds [22 x double], ptr %832, i64 0, i64 %842
  %891 = extractelement <2 x double> %889, i64 0
  store double %891, ptr %890, align 8, !tbaa !39
  %892 = getelementptr inbounds [22 x double], ptr %833, i64 0, i64 %842
  %893 = extractelement <2 x double> %889, i64 1
  store double %893, ptr %892, align 8, !tbaa !39
  %894 = add nuw nsw i64 %842, 1
  %895 = icmp eq i64 %894, 21
  br i1 %895, label %834, label %841, !llvm.loop !514

896:                                              ; preds = %1017, %834
  %897 = phi i64 [ 0, %834 ], [ %1018, %1017 ]
  br i1 %836, label %899, label %898

898:                                              ; preds = %924, %896
  br i1 %838, label %931, label %961

899:                                              ; preds = %924, %896
  %900 = phi i64 [ %929, %924 ], [ 0, %896 ]
  %901 = phi i32 [ %926, %924 ], [ 0, %896 ]
  %902 = sext i32 %901 to i64
  %903 = getelementptr inbounds [3 x [129 x float]], ptr @L3psycho_anal.energy_s, i64 0, i64 %897, i64 %902
  %904 = load float, ptr %903, align 4, !tbaa !48
  %905 = getelementptr inbounds [63 x i32], ptr @L3psycho_anal.numlines_s, i64 0, i64 %900
  %906 = load i32, ptr %905, align 4, !tbaa !11
  %907 = add i32 %901, 1
  %908 = icmp sgt i32 %906, 0
  br i1 %908, label %909, label %924

909:                                              ; preds = %899
  %910 = sext i32 %907 to i64
  br label %911

911:                                              ; preds = %911, %909
  %912 = phi i64 [ %910, %909 ], [ %919, %911 ]
  %913 = phi float [ %904, %909 ], [ %917, %911 ]
  %914 = phi i32 [ %906, %909 ], [ %918, %911 ]
  %915 = getelementptr inbounds [3 x [129 x float]], ptr @L3psycho_anal.energy_s, i64 0, i64 %897, i64 %912
  %916 = load float, ptr %915, align 4, !tbaa !48
  %917 = fadd float %913, %916
  %918 = add nsw i32 %914, -1
  %919 = add nsw i64 %912, 1
  %920 = icmp ugt i32 %914, 1
  br i1 %920, label %911, label %921, !llvm.loop !515

921:                                              ; preds = %911
  %.lcssa13 = phi float [ %917, %911 ]
  %922 = add i32 %901, %906
  %923 = add i32 %922, 1
  br label %924

924:                                              ; preds = %921, %899
  %925 = phi float [ %904, %899 ], [ %.lcssa13, %921 ]
  %926 = phi i32 [ %907, %899 ], [ %923, %921 ]
  %927 = fpext float %925 to double
  %928 = getelementptr inbounds [63 x double], ptr @L3psycho_anal.eb, i64 0, i64 %900
  store double %927, ptr %928, align 8, !tbaa !39
  %929 = add nuw nsw i64 %900, 1
  %930 = icmp eq i64 %929, %839
  br i1 %930, label %898, label %899, !llvm.loop !516

931:                                              ; preds = %952, %898
  %932 = phi i64 [ %959, %952 ], [ 0, %898 ]
  %933 = getelementptr inbounds [63 x [2 x i32]], ptr @L3psycho_anal.s3ind_s, i64 0, i64 %932
  %934 = load i32, ptr %933, align 8, !tbaa !11
  %935 = getelementptr inbounds [63 x [2 x i32]], ptr @L3psycho_anal.s3ind_s, i64 0, i64 %932, i64 1
  %936 = load i32, ptr %935, align 4, !tbaa !11
  %937 = icmp sgt i32 %934, %936
  br i1 %937, label %952, label %938

938:                                              ; preds = %931
  %939 = sext i32 %934 to i64
  %940 = add i32 %936, 1
  br label %941

941:                                              ; preds = %941, %938
  %942 = phi i64 [ %939, %938 ], [ %949, %941 ]
  %943 = phi double [ 0.000000e+00, %938 ], [ %948, %941 ]
  %944 = getelementptr inbounds [64 x [64 x double]], ptr @L3psycho_anal.s3_s, i64 0, i64 %932, i64 %942
  %945 = load double, ptr %944, align 8, !tbaa !39
  %946 = getelementptr inbounds [63 x double], ptr @L3psycho_anal.eb, i64 0, i64 %942
  %947 = load double, ptr %946, align 8, !tbaa !39
  %948 = tail call double @llvm.fmuladd.f64(double %945, double %947, double %943)
  %949 = add nsw i64 %942, 1
  %950 = trunc i64 %949 to i32
  %951 = icmp eq i32 %940, %950
  br i1 %951, label %952, label %941, !llvm.loop !517

952:                                              ; preds = %941, %931
  %953 = phi double [ 0.000000e+00, %931 ], [ %948, %941 ]
  %954 = getelementptr inbounds [63 x double], ptr @L3psycho_anal.qthr_s, i64 0, i64 %932
  %955 = load double, ptr %954, align 8, !tbaa !39
  %956 = fcmp ogt double %955, %953
  %957 = select i1 %956, double %955, double %953
  %958 = getelementptr inbounds [63 x double], ptr @L3psycho_anal.thr, i64 0, i64 %932
  store double %957, ptr %958, align 8, !tbaa !39
  %959 = add nuw nsw i64 %932, 1
  %960 = icmp eq i64 %959, %840
  br i1 %960, label %961, label %931, !llvm.loop !518

961:                                              ; preds = %952, %898
  br label %962

962:                                              ; preds = %1009, %961
  %963 = phi i64 [ %1015, %1009 ], [ 0, %961 ]
  %964 = getelementptr inbounds [12 x double], ptr @L3psycho_anal.w1_s, i64 0, i64 %963
  %965 = load double, ptr %964, align 8, !tbaa !39
  %966 = getelementptr inbounds [12 x i32], ptr @L3psycho_anal.bu_s, i64 0, i64 %963
  %967 = load i32, ptr %966, align 4, !tbaa !11
  %968 = sext i32 %967 to i64
  %969 = getelementptr inbounds [63 x double], ptr @L3psycho_anal.eb, i64 0, i64 %968
  %970 = load double, ptr %969, align 8, !tbaa !39
  %971 = getelementptr inbounds [12 x double], ptr @L3psycho_anal.w2_s, i64 0, i64 %963
  %972 = load double, ptr %971, align 8, !tbaa !39
  %973 = getelementptr inbounds [12 x i32], ptr @L3psycho_anal.bo_s, i64 0, i64 %963
  %974 = load i32, ptr %973, align 4, !tbaa !11
  %975 = sext i32 %974 to i64
  %976 = getelementptr inbounds [63 x double], ptr @L3psycho_anal.eb, i64 0, i64 %975
  %977 = load double, ptr %976, align 8, !tbaa !39
  %978 = getelementptr inbounds [63 x double], ptr @L3psycho_anal.thr, i64 0, i64 %968
  %979 = load double, ptr %978, align 8, !tbaa !39
  %980 = getelementptr inbounds [63 x double], ptr @L3psycho_anal.thr, i64 0, i64 %975
  %981 = load double, ptr %980, align 8, !tbaa !39
  %982 = insertelement <2 x double> poison, double %972, i64 0
  %983 = shufflevector <2 x double> %982, <2 x double> poison, <2 x i32> zeroinitializer
  %984 = insertelement <2 x double> poison, double %977, i64 0
  %985 = insertelement <2 x double> %984, double %981, i64 1
  %986 = fmul <2 x double> %983, %985
  %987 = insertelement <2 x double> poison, double %965, i64 0
  %988 = shufflevector <2 x double> %987, <2 x double> poison, <2 x i32> zeroinitializer
  %989 = insertelement <2 x double> poison, double %970, i64 0
  %990 = insertelement <2 x double> %989, double %979, i64 1
  %991 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %988, <2 x double> %990, <2 x double> %986)
  %992 = add nsw i32 %967, 1
  %993 = icmp slt i32 %992, %974
  br i1 %993, label %994, label %1009

994:                                              ; preds = %962
  %995 = add nsw i64 %968, 1
  br label %996

996:                                              ; preds = %996, %994
  %997 = phi i64 [ %995, %994 ], [ %1006, %996 ]
  %998 = phi <2 x double> [ %991, %994 ], [ %1005, %996 ]
  %999 = getelementptr inbounds [63 x double], ptr @L3psycho_anal.eb, i64 0, i64 %997
  %1000 = load double, ptr %999, align 8, !tbaa !39
  %1001 = getelementptr inbounds [63 x double], ptr @L3psycho_anal.thr, i64 0, i64 %997
  %1002 = load double, ptr %1001, align 8, !tbaa !39
  %1003 = insertelement <2 x double> poison, double %1000, i64 0
  %1004 = insertelement <2 x double> %1003, double %1002, i64 1
  %1005 = fadd <2 x double> %998, %1004
  %1006 = add nsw i64 %997, 1
  %1007 = trunc i64 %1006 to i32
  %1008 = icmp eq i32 %974, %1007
  br i1 %1008, label %1009, label %996, !llvm.loop !519

1009:                                             ; preds = %996, %962
  %1010 = phi <2 x double> [ %991, %962 ], [ %1005, %996 ]
  %1011 = getelementptr inbounds [4 x %struct.III_psy_xmin], ptr @L3psycho_anal.en, i64 0, i64 %315, i32 1, i64 %963, i64 %897
  %1012 = extractelement <2 x double> %1010, i64 0
  store double %1012, ptr %1011, align 8, !tbaa !39
  %1013 = getelementptr inbounds [4 x %struct.III_psy_xmin], ptr @L3psycho_anal.thm, i64 0, i64 %315, i32 1, i64 %963, i64 %897
  %1014 = extractelement <2 x double> %1010, i64 1
  store double %1014, ptr %1013, align 8, !tbaa !39
  %1015 = add nuw nsw i64 %963, 1
  %1016 = icmp eq i64 %1015, 12
  br i1 %1016, label %1017, label %962, !llvm.loop !520

1017:                                             ; preds = %1009
  %1018 = add nuw nsw i64 %897, 1
  %1019 = icmp eq i64 %1018, 3
  br i1 %1019, label %1020, label %896, !llvm.loop !521

1020:                                             ; preds = %1017
  %1021 = add nuw nsw i64 %315, 1
  %1022 = icmp eq i64 %1021, %313
  br i1 %1022, label %1023, label %314, !llvm.loop !522

1023:                                             ; preds = %1020
  %1024 = icmp eq i32 %308, 4
  br i1 %1024, label %1025, label %1100

1025:                                             ; preds = %1057, %1023
  %1026 = phi i64 [ %1058, %1057 ], [ 0, %1023 ]
  %1027 = getelementptr inbounds [22 x double], ptr @L3psycho_anal.thm, i64 0, i64 %1026
  %1028 = load double, ptr %1027, align 8, !tbaa !39
  %1029 = getelementptr inbounds [22 x double], ptr getelementptr inbounds ([4 x %struct.III_psy_xmin], ptr @L3psycho_anal.thm, i64 0, i64 1), i64 0, i64 %1026
  %1030 = load double, ptr %1029, align 8, !tbaa !39
  %1031 = fmul double %1030, 1.580000e+00
  %1032 = fcmp ugt double %1028, %1031
  %1033 = fmul double %1028, 1.580000e+00
  %1034 = fcmp ugt double %1030, %1033
  %1035 = or i1 %1034, %1032
  br i1 %1035, label %1057, label %1036

1036:                                             ; preds = %1025
  %1037 = getelementptr inbounds [21 x double], ptr @L3psycho_anal.mld_l, i64 0, i64 %1026
  %1038 = load double, ptr %1037, align 8, !tbaa !39
  %1039 = getelementptr inbounds [22 x double], ptr getelementptr inbounds ([4 x %struct.III_psy_xmin], ptr @L3psycho_anal.en, i64 0, i64 3), i64 0, i64 %1026
  %1040 = load double, ptr %1039, align 8, !tbaa !39
  %1041 = fmul double %1038, %1040
  %1042 = getelementptr inbounds [22 x double], ptr getelementptr inbounds ([4 x %struct.III_psy_xmin], ptr @L3psycho_anal.thm, i64 0, i64 2), i64 0, i64 %1026
  %1043 = load double, ptr %1042, align 8, !tbaa !39
  %1044 = getelementptr inbounds [22 x double], ptr getelementptr inbounds ([4 x %struct.III_psy_xmin], ptr @L3psycho_anal.thm, i64 0, i64 3), i64 0, i64 %1026
  %1045 = load double, ptr %1044, align 8, !tbaa !39
  %1046 = fcmp olt double %1045, %1041
  %1047 = select i1 %1046, double %1045, double %1041
  %1048 = fcmp ogt double %1043, %1047
  %1049 = select i1 %1048, double %1043, double %1047
  %1050 = getelementptr inbounds [22 x double], ptr getelementptr inbounds ([4 x %struct.III_psy_xmin], ptr @L3psycho_anal.en, i64 0, i64 2), i64 0, i64 %1026
  %1051 = load double, ptr %1050, align 8, !tbaa !39
  %1052 = fmul double %1038, %1051
  %1053 = fcmp olt double %1043, %1052
  %1054 = select i1 %1053, double %1043, double %1052
  %1055 = fcmp ogt double %1045, %1054
  %1056 = select i1 %1055, double %1045, double %1054
  store double %1049, ptr %1042, align 8, !tbaa !39
  store double %1056, ptr %1044, align 8, !tbaa !39
  br label %1057

1057:                                             ; preds = %1036, %1025
  %1058 = add nuw nsw i64 %1026, 1
  %1059 = icmp eq i64 %1058, 21
  br i1 %1059, label %1060, label %1025, !llvm.loop !523

1060:                                             ; preds = %1097, %1057
  %1061 = phi i64 [ %1098, %1097 ], [ 0, %1057 ]
  %1062 = getelementptr inbounds [12 x double], ptr @L3psycho_anal.mld_s, i64 0, i64 %1061
  br label %1063

1063:                                             ; preds = %1094, %1060
  %1064 = phi i64 [ 0, %1060 ], [ %1095, %1094 ]
  %1065 = getelementptr inbounds [4 x %struct.III_psy_xmin], ptr @L3psycho_anal.thm, i64 0, i64 0, i32 1, i64 %1061, i64 %1064
  %1066 = load double, ptr %1065, align 8, !tbaa !39
  %1067 = getelementptr inbounds [4 x %struct.III_psy_xmin], ptr @L3psycho_anal.thm, i64 0, i64 1, i32 1, i64 %1061, i64 %1064
  %1068 = load double, ptr %1067, align 8, !tbaa !39
  %1069 = fmul double %1068, 1.580000e+00
  %1070 = fcmp ugt double %1066, %1069
  %1071 = fmul double %1066, 1.580000e+00
  %1072 = fcmp ugt double %1068, %1071
  %1073 = or i1 %1072, %1070
  br i1 %1073, label %1094, label %1074

1074:                                             ; preds = %1063
  %1075 = load double, ptr %1062, align 8, !tbaa !39
  %1076 = getelementptr inbounds [4 x %struct.III_psy_xmin], ptr @L3psycho_anal.en, i64 0, i64 3, i32 1, i64 %1061, i64 %1064
  %1077 = load double, ptr %1076, align 8, !tbaa !39
  %1078 = fmul double %1075, %1077
  %1079 = getelementptr inbounds [4 x %struct.III_psy_xmin], ptr @L3psycho_anal.thm, i64 0, i64 2, i32 1, i64 %1061, i64 %1064
  %1080 = load double, ptr %1079, align 8, !tbaa !39
  %1081 = getelementptr inbounds [4 x %struct.III_psy_xmin], ptr @L3psycho_anal.thm, i64 0, i64 3, i32 1, i64 %1061, i64 %1064
  %1082 = load double, ptr %1081, align 8, !tbaa !39
  %1083 = fcmp olt double %1082, %1078
  %1084 = select i1 %1083, double %1082, double %1078
  %1085 = fcmp ogt double %1080, %1084
  %1086 = select i1 %1085, double %1080, double %1084
  %1087 = getelementptr inbounds [4 x %struct.III_psy_xmin], ptr @L3psycho_anal.en, i64 0, i64 2, i32 1, i64 %1061, i64 %1064
  %1088 = load double, ptr %1087, align 8, !tbaa !39
  %1089 = fmul double %1075, %1088
  %1090 = fcmp olt double %1080, %1089
  %1091 = select i1 %1090, double %1080, double %1089
  %1092 = fcmp ogt double %1082, %1091
  %1093 = select i1 %1092, double %1082, double %1091
  store double %1086, ptr %1079, align 8, !tbaa !39
  store double %1093, ptr %1081, align 8, !tbaa !39
  br label %1094

1094:                                             ; preds = %1074, %1063
  %1095 = add nuw nsw i64 %1064, 1
  %1096 = icmp eq i64 %1095, 3
  br i1 %1096, label %1097, label %1063, !llvm.loop !524

1097:                                             ; preds = %1094
  %1098 = add nuw nsw i64 %1061, 1
  %1099 = icmp eq i64 %1098, 12
  br i1 %1099, label %1100, label %1060, !llvm.loop !525

1100:                                             ; preds = %1097, %1023
  %1101 = load i32, ptr %305, align 4, !tbaa !168
  br label %1102

1102:                                             ; preds = %1100, %302
  %1103 = phi i32 [ %1101, %1100 ], [ %306, %302 ]
  %1104 = phi i1 [ %1024, %1100 ], [ false, %302 ]
  %1105 = icmp eq i32 %1103, 1
  br i1 %1105, label %1106, label %1169

1106:                                             ; preds = %1123, %1102
  %1107 = phi i64 [ %1127, %1123 ], [ 5, %1102 ]
  %1108 = phi double [ %1126, %1123 ], [ 0.000000e+00, %1102 ]
  %1109 = phi double [ %1125, %1123 ], [ 0.000000e+00, %1102 ]
  %1110 = getelementptr inbounds [22 x double], ptr @L3psycho_anal.thm, i64 0, i64 %1107
  %1111 = load double, ptr %1110, align 8, !tbaa !39
  %1112 = getelementptr inbounds [22 x double], ptr getelementptr inbounds ([4 x %struct.III_psy_xmin], ptr @L3psycho_anal.thm, i64 0, i64 1), i64 0, i64 %1107
  %1113 = load double, ptr %1112, align 8, !tbaa !39
  %1114 = fcmp olt double %1111, %1113
  %1115 = select i1 %1114, double %1111, double %1113
  %1116 = fcmp ogt double %1111, %1113
  %1117 = select i1 %1116, double %1111, double %1113
  %1118 = fmul double %1115, 1.000000e+03
  %1119 = fcmp ult double %1117, %1118
  br i1 %1119, label %1120, label %1123

1120:                                             ; preds = %1106
  %1121 = fdiv double %1117, %1115
  %1122 = tail call double @log10(double noundef %1121) #55
  br label %1123

1123:                                             ; preds = %1120, %1106
  %1124 = phi double [ %1122, %1120 ], [ 3.000000e+00, %1106 ]
  %1125 = fadd double %1109, %1124
  %1126 = fadd double %1108, 1.000000e+00
  %1127 = add nuw nsw i64 %1107, 1
  %1128 = icmp eq i64 %1127, 21
  br i1 %1128, label %1129, label %1106, !llvm.loop !526

1129:                                             ; preds = %1123
  %.lcssa3 = phi double [ %1125, %1123 ]
  %.lcssa2 = phi double [ %1126, %1123 ]
  %1130 = fdiv double %.lcssa3, %.lcssa2
  %1131 = fmul double %1130, 0x3FE6666666666666
  %1132 = fcmp olt double %1131, 5.000000e-01
  br label %1133

1133:                                             ; preds = %1160, %1129
  %1134 = phi i64 [ 0, %1129 ], [ %1161, %1160 ]
  %1135 = phi double [ 0.000000e+00, %1129 ], [ %.lcssa, %1160 ]
  %1136 = phi double [ 0.000000e+00, %1129 ], [ %.lcssa1, %1160 ]
  br label %1137

1137:                                             ; preds = %1154, %1133
  %1138 = phi i64 [ 3, %1133 ], [ %1158, %1154 ]
  %1139 = phi double [ %1135, %1133 ], [ %1157, %1154 ]
  %1140 = phi double [ %1136, %1133 ], [ %1156, %1154 ]
  %1141 = getelementptr inbounds [4 x %struct.III_psy_xmin], ptr @L3psycho_anal.thm, i64 0, i64 0, i32 1, i64 %1138, i64 %1134
  %1142 = load double, ptr %1141, align 8, !tbaa !39
  %1143 = getelementptr inbounds [4 x %struct.III_psy_xmin], ptr @L3psycho_anal.thm, i64 0, i64 1, i32 1, i64 %1138, i64 %1134
  %1144 = load double, ptr %1143, align 8, !tbaa !39
  %1145 = fcmp olt double %1142, %1144
  %1146 = select i1 %1145, double %1142, double %1144
  %1147 = fcmp ogt double %1142, %1144
  %1148 = select i1 %1147, double %1142, double %1144
  %1149 = fmul double %1146, 1.000000e+03
  %1150 = fcmp ult double %1148, %1149
  br i1 %1150, label %1151, label %1154

1151:                                             ; preds = %1137
  %1152 = fdiv double %1148, %1146
  %1153 = tail call double @log10(double noundef %1152) #55
  br label %1154

1154:                                             ; preds = %1151, %1137
  %1155 = phi double [ %1153, %1151 ], [ 3.000000e+00, %1137 ]
  %1156 = fadd double %1140, %1155
  %1157 = fadd double %1139, 1.000000e+00
  %1158 = add nuw nsw i64 %1138, 1
  %1159 = icmp eq i64 %1158, 12
  br i1 %1159, label %1160, label %1137, !llvm.loop !527

1160:                                             ; preds = %1154
  %.lcssa1 = phi double [ %1156, %1154 ]
  %.lcssa = phi double [ %1157, %1154 ]
  %1161 = add nuw nsw i64 %1134, 1
  %1162 = icmp eq i64 %1161, 3
  br i1 %1162, label %1163, label %1133, !llvm.loop !528

1163:                                             ; preds = %1160
  %.lcssa1.lcssa = phi double [ %.lcssa1, %1160 ]
  %.lcssa.lcssa = phi double [ %.lcssa, %1160 ]
  %1164 = select i1 %1132, double %1131, double 5.000000e-01
  %1165 = fdiv double %.lcssa1.lcssa, %.lcssa.lcssa
  %1166 = fmul double %1165, 0x3FE6666666666666
  %1167 = fcmp olt double %1166, 5.000000e-01
  %1168 = select i1 %1167, double %1166, double 5.000000e-01
  br label %1169

1169:                                             ; preds = %1163, %1102
  %1170 = phi double [ %1168, %1163 ], [ 0.000000e+00, %1102 ]
  %1171 = phi double [ %1164, %1163 ], [ 0.000000e+00, %1102 ]
  %1172 = load i32, ptr %303, align 4, !tbaa !173
  %1173 = icmp sgt i32 %1172, 0
  br i1 %1173, label %1174, label %1227

1174:                                             ; preds = %1169
  %1175 = zext i32 %1172 to i64
  %1176 = shl nuw nsw i64 %1175, 2
  call void @llvm.memset.p0.i64(ptr nonnull align 4 %13, i8 0, i64 %1176, i1 false), !tbaa !11
  %1177 = icmp eq i32 %1172, 2
  br i1 %1177, label %1178, label %1193

1178:                                             ; preds = %1174
  %1179 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 36
  %1180 = load i32, ptr %1179, align 4, !tbaa !299
  %1181 = icmp eq i32 %1180, 0
  br i1 %1181, label %1185, label %1182

1182:                                             ; preds = %1178
  %1183 = load i32, ptr %305, align 4, !tbaa !168
  %1184 = icmp eq i32 %1183, 1
  br i1 %1184, label %1185, label %1193

1185:                                             ; preds = %1182, %1178
  %1186 = load i32, ptr %14, align 4, !tbaa !11
  %1187 = icmp ne i32 %1186, 0
  %1188 = getelementptr inbounds [2 x i32], ptr %14, i64 0, i64 1
  %1189 = load i32, ptr %1188, align 4
  %1190 = icmp ne i32 %1189, 0
  %1191 = select i1 %1187, i1 %1190, i1 false
  br i1 %1191, label %1193, label %1192

1192:                                             ; preds = %1185
  store i32 0, ptr %14, align 4, !tbaa !11
  store i32 0, ptr %1188, align 4, !tbaa !11
  br label %1193

1193:                                             ; preds = %1192, %1185, %1182, %1174
  br label %1194

1194:                                             ; preds = %1218, %1193
  %1195 = phi i64 [ %1223, %1218 ], [ 0, %1193 ]
  %1196 = getelementptr inbounds [2 x i32], ptr %14, i64 0, i64 %1195
  %1197 = load i32, ptr %1196, align 4, !tbaa !11
  %1198 = icmp eq i32 %1197, 0
  br i1 %1198, label %1212, label %1199

1199:                                             ; preds = %1194
  %1200 = getelementptr inbounds [2 x i32], ptr @L3psycho_anal.blocktype_old, i64 0, i64 %1195
  %1201 = load i32, ptr %1200, align 4, !tbaa !11
  switch i32 %1201, label %1202 [
    i32 0, label %1205
    i32 3, label %1205
    i32 2, label %1207
    i32 1, label %1209
  ]

1202:                                             ; preds = %1199
  %1203 = getelementptr inbounds [2 x i32], ptr %13, i64 0, i64 %1195
  %1204 = load i32, ptr %1203, align 4, !tbaa !11
  br label %1218

1205:                                             ; preds = %1199, %1199
  %1206 = getelementptr inbounds [2 x i32], ptr %13, i64 0, i64 %1195
  store i32 0, ptr %1206, align 4, !tbaa !11
  br label %1218

1207:                                             ; preds = %1199
  %1208 = getelementptr inbounds [2 x i32], ptr %13, i64 0, i64 %1195
  store i32 3, ptr %1208, align 4, !tbaa !11
  br label %1218

1209:                                             ; preds = %1199
  %1210 = load ptr, ptr @stderr, align 8, !tbaa !7
  %1211 = tail call i64 @fwrite(ptr nonnull @.str.1.368, i64 25, i64 1, ptr %1210) #53
  tail call void @abort() #54
  unreachable

1212:                                             ; preds = %1194
  %1213 = getelementptr inbounds [2 x i32], ptr %13, i64 0, i64 %1195
  store i32 2, ptr %1213, align 4, !tbaa !11
  %1214 = getelementptr inbounds [2 x i32], ptr @L3psycho_anal.blocktype_old, i64 0, i64 %1195
  %1215 = load i32, ptr %1214, align 4, !tbaa !11
  switch i32 %1215, label %1218 [
    i32 0, label %1216
    i32 3, label %1217
  ]

1216:                                             ; preds = %1212
  br label %1218

1217:                                             ; preds = %1212
  br label %1218

1218:                                             ; preds = %1217, %1216, %1212, %1207, %1205, %1202
  %1219 = phi i32 [ 2, %1212 ], [ 2, %1216 ], [ 2, %1217 ], [ 0, %1205 ], [ 3, %1207 ], [ %1204, %1202 ]
  %1220 = phi i32 [ %1215, %1212 ], [ 1, %1216 ], [ 2, %1217 ], [ %1201, %1205 ], [ 2, %1207 ], [ %1201, %1202 ]
  %1221 = getelementptr inbounds [2 x i32], ptr @L3psycho_anal.blocktype_old, i64 0, i64 %1195
  %1222 = getelementptr inbounds i32, ptr %10, i64 %1195
  store i32 %1220, ptr %1222, align 4, !tbaa !11
  store i32 %1219, ptr %1221, align 4, !tbaa !11
  %1223 = add nuw nsw i64 %1195, 1
  %1224 = load i32, ptr %303, align 4, !tbaa !173
  %1225 = sext i32 %1224 to i64
  %1226 = icmp slt i64 %1223, %1225
  br i1 %1226, label %1194, label %1227, !llvm.loop !529

1227:                                             ; preds = %1218, %1169
  %1228 = load i32, ptr %10, align 4, !tbaa !11
  %1229 = icmp eq i32 %1228, 2
  %1230 = load double, ptr @L3psycho_anal.ms_ratio_s_old, align 8
  %1231 = load double, ptr @L3psycho_anal.ms_ratio_l_old, align 8
  %1232 = select i1 %1229, double %1230, double %1231
  store double %1232, ptr %3, align 8, !tbaa !39
  store double %1170, ptr @L3psycho_anal.ms_ratio_s_old, align 8, !tbaa !39
  store double %1171, ptr @L3psycho_anal.ms_ratio_l_old, align 8, !tbaa !39
  store double %1171, ptr %4, align 8, !tbaa !39
  br i1 %1104, label %1233, label %1244

1233:                                             ; preds = %1227
  %1234 = getelementptr inbounds [4 x float], ptr %12, i64 0, i64 3
  %1235 = load float, ptr %1234, align 4, !tbaa !48
  %1236 = getelementptr inbounds [4 x float], ptr %12, i64 0, i64 2
  %1237 = load float, ptr %1236, align 8, !tbaa !48
  %1238 = fadd float %1235, %1237
  %1239 = load double, ptr @L3psycho_anal.ms_ener_ratio_old, align 8, !tbaa !39
  store double %1239, ptr %5, align 8, !tbaa !39
  store double 0.000000e+00, ptr @L3psycho_anal.ms_ener_ratio_old, align 8, !tbaa !39
  %1240 = fcmp ogt float %1238, 0.000000e+00
  br i1 %1240, label %1241, label %1245

1241:                                             ; preds = %1233
  %1242 = fdiv float %1235, %1238
  %1243 = fpext float %1242 to double
  store double %1243, ptr @L3psycho_anal.ms_ener_ratio_old, align 8, !tbaa !39
  br label %1245

1244:                                             ; preds = %1227
  store double 0.000000e+00, ptr %5, align 8, !tbaa !39
  br label %1245

1245:                                             ; preds = %1244, %1241, %1233
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14) #56
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13) #56
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %12) #56
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @L3para_read(double noundef %0, ptr nocapture noundef %1, ptr nocapture noundef writeonly %2, ptr nocapture noundef writeonly %3, ptr nocapture noundef writeonly %4, ptr nocapture noundef writeonly %5, ptr nocapture noundef writeonly %6, ptr nocapture noundef writeonly %7, ptr nocapture noundef writeonly %8, ptr nocapture noundef writeonly %9, ptr nocapture noundef writeonly %10, ptr nocapture noundef writeonly %11, ptr nocapture noundef %12, ptr nocapture noundef %13, ptr nocapture noundef writeonly %14, ptr nocapture noundef writeonly %15, ptr nocapture noundef %16, ptr nocapture noundef %17) #4 {
  %19 = alloca [63 x double], align 16
  %20 = alloca [63 x double], align 16
  call void @llvm.lifetime.start.p0(i64 504, ptr nonnull %19) #56
  call void @llvm.lifetime.start.p0(i64 504, ptr nonnull %20) #56
  br label %26

21:                                               ; preds = %93
  %.lcssa8 = phi ptr [ %94, %93 ]
  %.lcssa7 = phi i32 [ %95, %93 ]
  %22 = icmp sgt i32 %.lcssa7, 0
  br i1 %22, label %24, label %23

23:                                               ; preds = %135, %21
  br label %142

24:                                               ; preds = %21
  %25 = zext i32 %.lcssa7 to i64
  br label %98

26:                                               ; preds = %93, %18
  %27 = phi i32 [ 0, %18 ], [ %95, %93 ]
  %28 = phi ptr [ @psy_data, %18 ], [ %94, %93 ]
  %29 = phi i32 [ 0, %18 ], [ %96, %93 ]
  %30 = getelementptr inbounds double, ptr %28, i64 1
  %31 = load double, ptr %28, align 8, !tbaa !39
  %32 = getelementptr inbounds double, ptr %28, i64 2
  %33 = load double, ptr %30, align 8, !tbaa !39
  %34 = fptosi double %33 to i32
  %35 = add i32 %34, 1
  %36 = fcmp oeq double %31, %0
  br i1 %36, label %37, label %89

37:                                               ; preds = %26
  %38 = icmp slt i32 %34, 0
  br i1 %38, label %93, label %39

39:                                               ; preds = %37
  %40 = zext i32 %35 to i64
  br label %41

41:                                               ; preds = %85, %39
  %42 = phi i64 [ 0, %39 ], [ %87, %85 ]
  %43 = phi ptr [ %32, %39 ], [ %61, %85 ]
  %44 = phi i32 [ 0, %39 ], [ %86, %85 ]
  %45 = getelementptr inbounds double, ptr %43, i64 1
  %46 = load double, ptr %43, align 8, !tbaa !39
  %47 = fptosi double %46 to i32
  %48 = getelementptr inbounds double, ptr %43, i64 2
  %49 = load double, ptr %45, align 8, !tbaa !39
  %50 = fptosi double %49 to i32
  %51 = getelementptr inbounds i32, ptr %1, i64 %42
  store i32 %50, ptr %51, align 4, !tbaa !11
  %52 = getelementptr inbounds double, ptr %43, i64 3
  %53 = load double, ptr %48, align 8, !tbaa !39
  %54 = fadd double %53, -6.000000e+00
  %55 = fmul double %54, 0xBFCD791C5F888823
  %56 = tail call double @exp(double noundef %55) #55
  %57 = getelementptr inbounds double, ptr %4, i64 %42
  store double %56, ptr %57, align 8, !tbaa !39
  %58 = load double, ptr %52, align 8, !tbaa !39
  %59 = getelementptr inbounds double, ptr %5, i64 %42
  store double %58, ptr %59, align 8, !tbaa !39
  %60 = getelementptr inbounds double, ptr %43, i64 5
  %61 = getelementptr inbounds double, ptr %43, i64 6
  %62 = load double, ptr %60, align 8, !tbaa !39
  %63 = getelementptr inbounds [63 x double], ptr %19, i64 0, i64 %42
  store double %62, ptr %63, align 8, !tbaa !39
  %64 = zext i32 %47 to i64
  %65 = icmp eq i64 %42, %64
  br i1 %65, label %66, label %72

66:                                               ; preds = %41
  %67 = load i32, ptr %51, align 4, !tbaa !11
  %68 = icmp sgt i32 %67, 0
  br i1 %68, label %69, label %85

69:                                               ; preds = %66
  %70 = sext i32 %44 to i64
  %71 = trunc i64 %42 to i32
  br label %75

72:                                               ; preds = %41
  %73 = load ptr, ptr @stderr, align 8, !tbaa !7
  %74 = tail call i64 @fwrite(ptr nonnull @.str.2.369, i64 26, i64 1, ptr %73) #53
  tail call void @exit(i32 noundef -1) #54
  unreachable

75:                                               ; preds = %75, %69
  %76 = phi i64 [ %70, %69 ], [ %78, %75 ]
  %77 = phi i32 [ 0, %69 ], [ %80, %75 ]
  %78 = add nsw i64 %76, 1
  %79 = getelementptr inbounds i32, ptr %3, i64 %76
  store i32 %71, ptr %79, align 4, !tbaa !11
  %80 = add nuw nsw i32 %77, 1
  %81 = load i32, ptr %51, align 4, !tbaa !11
  %82 = icmp slt i32 %80, %81
  br i1 %82, label %75, label %83, !llvm.loop !530

83:                                               ; preds = %75
  %.lcssa6 = phi i64 [ %78, %75 ]
  %84 = trunc i64 %.lcssa6 to i32
  br label %85

85:                                               ; preds = %83, %66
  %86 = phi i32 [ %44, %66 ], [ %84, %83 ]
  %87 = add nuw nsw i64 %42, 1
  %88 = icmp eq i64 %87, %40
  br i1 %88, label %93, label %41, !llvm.loop !531

89:                                               ; preds = %26
  %90 = mul nsw i32 %35, 6
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds double, ptr %32, i64 %91
  br label %93

93:                                               ; preds = %89, %85, %37
  %94 = phi ptr [ %92, %89 ], [ %32, %37 ], [ %61, %85 ]
  %95 = phi i32 [ %27, %89 ], [ %35, %37 ], [ %35, %85 ]
  %96 = add nuw nsw i32 %29, 1
  %97 = icmp eq i32 %96, 6
  br i1 %97, label %21, label %26, !llvm.loop !532

98:                                               ; preds = %135, %24
  %99 = phi i64 [ 0, %24 ], [ %136, %135 ]
  %100 = getelementptr inbounds [63 x double], ptr %19, i64 0, i64 %99
  %101 = load double, ptr %100, align 8, !tbaa !39
  br label %102

102:                                              ; preds = %130, %98
  %103 = phi i64 [ 0, %98 ], [ %133, %130 ]
  %104 = icmp ult i64 %99, %103
  %105 = getelementptr inbounds [63 x double], ptr %19, i64 0, i64 %103
  %106 = load double, ptr %105, align 8, !tbaa !39
  %107 = fsub double %101, %106
  %108 = select i1 %104, double 1.500000e+00, double 3.000000e+00
  %109 = fmul double %107, %108
  %110 = fcmp oge double %109, 5.000000e-01
  %111 = fcmp ole double %109, 2.500000e+00
  %112 = and i1 %110, %111
  br i1 %112, label %113, label %118

113:                                              ; preds = %102
  %114 = fadd double %109, -5.000000e-01
  %115 = fmul double %114, -2.000000e+00
  %116 = tail call double @llvm.fmuladd.f64(double %114, double %114, double %115)
  %117 = fmul double %116, 8.000000e+00
  br label %118

118:                                              ; preds = %113, %102
  %119 = phi double [ %117, %113 ], [ 0.000000e+00, %102 ]
  %120 = fadd double %109, 4.740000e-01
  %121 = tail call double @llvm.fmuladd.f64(double %120, double 7.500000e+00, double 0x402F9F6E6106AB15)
  %122 = tail call double @llvm.fmuladd.f64(double %120, double %120, double 1.000000e+00)
  %123 = tail call double @llvm.sqrt.f64(double %122)
  %124 = tail call double @llvm.fmuladd.f64(double %123, double -1.750000e+01, double %121)
  %125 = fcmp ugt double %124, -6.000000e+01
  br i1 %125, label %126, label %130

126:                                              ; preds = %118
  %127 = fadd double %124, %119
  %128 = fmul double %127, 0x3FCD791C5F888823
  %129 = tail call double @exp(double noundef %128) #55
  br label %130

130:                                              ; preds = %126, %118
  %131 = phi double [ %129, %126 ], [ 0.000000e+00, %118 ]
  %132 = getelementptr inbounds [64 x double], ptr %6, i64 %99, i64 %103
  store double %131, ptr %132, align 8
  %133 = add nuw nsw i64 %103, 1
  %134 = icmp eq i64 %133, %25
  br i1 %134, label %135, label %102, !llvm.loop !533

135:                                              ; preds = %130
  %136 = add nuw nsw i64 %99, 1
  %137 = icmp eq i64 %136, %25
  br i1 %137, label %23, label %98, !llvm.loop !534

138:                                              ; preds = %194
  %.lcssa5 = phi ptr [ %195, %194 ]
  %.lcssa = phi i32 [ %196, %194 ]
  %139 = icmp sgt i32 %.lcssa, 0
  br i1 %139, label %140, label %239

140:                                              ; preds = %138
  %141 = zext i32 %.lcssa to i64
  br label %199

142:                                              ; preds = %194, %23
  %143 = phi i32 [ %196, %194 ], [ %.lcssa7, %23 ]
  %144 = phi ptr [ %195, %194 ], [ %.lcssa8, %23 ]
  %145 = phi i32 [ %197, %194 ], [ 0, %23 ]
  %146 = getelementptr inbounds double, ptr %144, i64 1
  %147 = load double, ptr %144, align 8, !tbaa !39
  %148 = getelementptr inbounds double, ptr %144, i64 2
  %149 = load double, ptr %146, align 8, !tbaa !39
  %150 = fptosi double %149 to i32
  %151 = add i32 %150, 1
  %152 = fcmp oeq double %147, %0
  br i1 %152, label %153, label %190

153:                                              ; preds = %142
  %154 = icmp slt i32 %150, 0
  br i1 %154, label %185, label %155

155:                                              ; preds = %153
  %156 = zext i32 %151 to i64
  br label %157

157:                                              ; preds = %180, %155
  %158 = phi i64 [ 0, %155 ], [ %183, %180 ]
  %159 = phi ptr [ %148, %155 ], [ %181, %180 ]
  %160 = getelementptr inbounds double, ptr %159, i64 1
  %161 = load double, ptr %159, align 8, !tbaa !39
  %162 = fptosi double %161 to i32
  %163 = getelementptr inbounds double, ptr %159, i64 2
  %164 = load double, ptr %160, align 8, !tbaa !39
  %165 = fptosi double %164 to i32
  %166 = getelementptr inbounds i32, ptr %2, i64 %158
  store i32 %165, ptr %166, align 4, !tbaa !11
  %167 = load double, ptr %163, align 8, !tbaa !39
  %168 = getelementptr inbounds double, ptr %8, i64 %158
  store double %167, ptr %168, align 8, !tbaa !39
  %169 = getelementptr inbounds double, ptr %159, i64 4
  %170 = getelementptr inbounds double, ptr %159, i64 5
  %171 = load double, ptr %169, align 8, !tbaa !39
  %172 = getelementptr inbounds double, ptr %9, i64 %158
  store double %171, ptr %172, align 8, !tbaa !39
  %173 = load double, ptr %170, align 8, !tbaa !39
  %174 = getelementptr inbounds [63 x double], ptr %20, i64 0, i64 %158
  store double %173, ptr %174, align 8, !tbaa !39
  %175 = zext i32 %162 to i64
  %176 = icmp eq i64 %158, %175
  br i1 %176, label %180, label %177

177:                                              ; preds = %157
  %178 = load ptr, ptr @stderr, align 8, !tbaa !7
  %179 = tail call i64 @fwrite(ptr nonnull @.str.3.370, i64 26, i64 1, ptr %178) #53
  tail call void @exit(i32 noundef -1) #54
  unreachable

180:                                              ; preds = %157
  %181 = getelementptr inbounds double, ptr %159, i64 6
  %182 = add nsw i32 %165, -1
  store i32 %182, ptr %166, align 4, !tbaa !11
  %183 = add nuw nsw i64 %158, 1
  %184 = icmp eq i64 %183, %156
  br i1 %184, label %185, label %157, !llvm.loop !535

185:                                              ; preds = %180, %153
  %186 = phi i32 [ 0, %153 ], [ %151, %180 ]
  %187 = phi ptr [ %148, %153 ], [ %181, %180 ]
  %188 = zext i32 %186 to i64
  %189 = getelementptr inbounds i32, ptr %2, i64 %188
  store i32 -1, ptr %189, align 4, !tbaa !11
  br label %194

190:                                              ; preds = %142
  %191 = mul nsw i32 %151, 6
  %192 = sext i32 %191 to i64
  %193 = getelementptr inbounds double, ptr %148, i64 %192
  br label %194

194:                                              ; preds = %190, %185
  %195 = phi ptr [ %187, %185 ], [ %193, %190 ]
  %196 = phi i32 [ %151, %185 ], [ %143, %190 ]
  %197 = add nuw nsw i32 %145, 1
  %198 = icmp eq i32 %197, 6
  br i1 %198, label %138, label %142, !llvm.loop !536

199:                                              ; preds = %236, %140
  %200 = phi i64 [ 0, %140 ], [ %237, %236 ]
  %201 = getelementptr inbounds [63 x double], ptr %20, i64 0, i64 %200
  %202 = load double, ptr %201, align 8, !tbaa !39
  br label %203

203:                                              ; preds = %231, %199
  %204 = phi i64 [ 0, %199 ], [ %234, %231 ]
  %205 = icmp ult i64 %200, %204
  %206 = getelementptr inbounds [63 x double], ptr %20, i64 0, i64 %204
  %207 = load double, ptr %206, align 8, !tbaa !39
  %208 = fsub double %202, %207
  %209 = select i1 %205, double 1.500000e+00, double 3.000000e+00
  %210 = fmul double %208, %209
  %211 = fcmp oge double %210, 5.000000e-01
  %212 = fcmp ole double %210, 2.500000e+00
  %213 = and i1 %211, %212
  br i1 %213, label %214, label %219

214:                                              ; preds = %203
  %215 = fadd double %210, -5.000000e-01
  %216 = fmul double %215, -2.000000e+00
  %217 = tail call double @llvm.fmuladd.f64(double %215, double %215, double %216)
  %218 = fmul double %217, 8.000000e+00
  br label %219

219:                                              ; preds = %214, %203
  %220 = phi double [ %218, %214 ], [ 0.000000e+00, %203 ]
  %221 = fadd double %210, 4.740000e-01
  %222 = tail call double @llvm.fmuladd.f64(double %221, double 7.500000e+00, double 0x402F9F6E6106AB15)
  %223 = tail call double @llvm.fmuladd.f64(double %221, double %221, double 1.000000e+00)
  %224 = tail call double @llvm.sqrt.f64(double %223)
  %225 = tail call double @llvm.fmuladd.f64(double %224, double -1.750000e+01, double %222)
  %226 = fcmp ugt double %225, -6.000000e+01
  br i1 %226, label %227, label %231

227:                                              ; preds = %219
  %228 = fadd double %225, %220
  %229 = fmul double %228, 0x3FCD791C5F888823
  %230 = tail call double @exp(double noundef %229) #55
  br label %231

231:                                              ; preds = %227, %219
  %232 = phi double [ %230, %227 ], [ 0.000000e+00, %219 ]
  %233 = getelementptr inbounds [64 x double], ptr %7, i64 %200, i64 %204
  store double %232, ptr %233, align 8
  %234 = add nuw nsw i64 %204, 1
  %235 = icmp eq i64 %234, %141
  br i1 %235, label %236, label %203, !llvm.loop !537

236:                                              ; preds = %231
  %237 = add nuw nsw i64 %200, 1
  %238 = icmp eq i64 %237, %141
  br i1 %238, label %239, label %199, !llvm.loop !538

239:                                              ; preds = %236, %138
  br label %240

240:                                              ; preds = %306, %239
  %241 = phi ptr [ %307, %306 ], [ %.lcssa5, %239 ]
  %242 = phi i32 [ %308, %306 ], [ 0, %239 ]
  %243 = getelementptr inbounds double, ptr %241, i64 1
  %244 = load double, ptr %241, align 8, !tbaa !39
  %245 = getelementptr inbounds double, ptr %241, i64 2
  %246 = load double, ptr %243, align 8, !tbaa !39
  %247 = fptosi double %246 to i32
  %248 = fcmp oeq double %244, %0
  br i1 %248, label %249, label %301

249:                                              ; preds = %240
  %250 = icmp slt i32 %247, 0
  br i1 %250, label %306, label %251

251:                                              ; preds = %249
  %252 = add nuw i32 %247, 1
  %253 = zext i32 %252 to i64
  br label %254

254:                                              ; preds = %298, %251
  %255 = phi i64 [ 0, %251 ], [ %299, %298 ]
  %256 = phi ptr [ %245, %251 ], [ %271, %298 ]
  %257 = load double, ptr %256, align 8, !tbaa !39
  %258 = fptosi double %257 to i32
  %259 = getelementptr inbounds double, ptr %256, i64 2
  %260 = getelementptr inbounds double, ptr %256, i64 3
  %261 = load double, ptr %259, align 8, !tbaa !39
  %262 = fptosi double %261 to i32
  %263 = getelementptr inbounds i32, ptr %10, i64 %255
  store i32 %262, ptr %263, align 4, !tbaa !11
  %264 = getelementptr inbounds double, ptr %256, i64 4
  %265 = load double, ptr %260, align 8, !tbaa !39
  %266 = fptosi double %265 to i32
  %267 = getelementptr inbounds i32, ptr %11, i64 %255
  store i32 %266, ptr %267, align 4, !tbaa !11
  %268 = getelementptr inbounds double, ptr %256, i64 5
  %269 = load double, ptr %264, align 8, !tbaa !39
  %270 = getelementptr inbounds double, ptr %12, i64 %255
  store double %269, ptr %270, align 8, !tbaa !39
  %271 = getelementptr inbounds double, ptr %256, i64 6
  %272 = load double, ptr %268, align 8, !tbaa !39
  %273 = getelementptr inbounds double, ptr %13, i64 %255
  store double %272, ptr %273, align 8, !tbaa !39
  %274 = zext i32 %258 to i64
  %275 = icmp eq i64 %255, %274
  br i1 %275, label %279, label %276

276:                                              ; preds = %254
  %277 = load ptr, ptr @stderr, align 8, !tbaa !7
  %278 = tail call i64 @fwrite(ptr nonnull @.str.4.371, i64 27, i64 1, ptr %277) #53
  tail call void @exit(i32 noundef -1) #54
  unreachable

279:                                              ; preds = %254
  %280 = icmp eq i64 %255, 0
  br i1 %280, label %298, label %281

281:                                              ; preds = %279
  %282 = load double, ptr %270, align 8, !tbaa !39
  %283 = fsub double 1.000000e+00, %282
  %284 = add nsw i64 %255, -1
  %285 = getelementptr inbounds double, ptr %13, i64 %284
  %286 = load double, ptr %285, align 8, !tbaa !39
  %287 = fsub double %283, %286
  %288 = tail call double @llvm.fabs.f64(double %287)
  %289 = fcmp ogt double %288, 1.000000e-02
  br i1 %289, label %290, label %298

290:                                              ; preds = %281
  %.lcssa4 = phi i64 [ %284, %281 ]
  %.lcssa3 = phi ptr [ %270, %281 ]
  %291 = getelementptr inbounds double, ptr %13, i64 %.lcssa4
  %292 = load ptr, ptr @stderr, align 8, !tbaa !7
  %293 = tail call i64 @fwrite(ptr nonnull @.str.5.372, i64 30, i64 1, ptr %292) #53
  %294 = load ptr, ptr @stderr, align 8, !tbaa !7
  %295 = load double, ptr %.lcssa3, align 8, !tbaa !39
  %296 = load double, ptr %291, align 8, !tbaa !39
  %297 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %294, ptr noundef nonnull @.str.6.373, double noundef %295, double noundef %296) #60
  tail call void @exit(i32 noundef -1) #54
  unreachable

298:                                              ; preds = %281, %279
  %299 = add nuw nsw i64 %255, 1
  %300 = icmp eq i64 %299, %253
  br i1 %300, label %306, label %254, !llvm.loop !539

301:                                              ; preds = %240
  %302 = mul i32 %247, 6
  %303 = add i32 %302, 6
  %304 = sext i32 %303 to i64
  %305 = getelementptr inbounds double, ptr %245, i64 %304
  br label %306

306:                                              ; preds = %301, %298, %249
  %307 = phi ptr [ %305, %301 ], [ %245, %249 ], [ %271, %298 ]
  %308 = add nuw nsw i32 %242, 1
  %309 = icmp eq i32 %308, 6
  br i1 %309, label %310, label %240, !llvm.loop !540

310:                                              ; preds = %376, %306
  %311 = phi ptr [ %377, %376 ], [ %307, %306 ]
  %312 = phi i32 [ %378, %376 ], [ 0, %306 ]
  %313 = getelementptr inbounds double, ptr %311, i64 1
  %314 = load double, ptr %311, align 8, !tbaa !39
  %315 = getelementptr inbounds double, ptr %311, i64 2
  %316 = load double, ptr %313, align 8, !tbaa !39
  %317 = fptosi double %316 to i32
  %318 = fcmp oeq double %314, %0
  br i1 %318, label %319, label %371

319:                                              ; preds = %310
  %320 = icmp slt i32 %317, 0
  br i1 %320, label %376, label %321

321:                                              ; preds = %319
  %322 = add nuw i32 %317, 1
  %323 = zext i32 %322 to i64
  br label %324

324:                                              ; preds = %368, %321
  %325 = phi i64 [ 0, %321 ], [ %369, %368 ]
  %326 = phi ptr [ %315, %321 ], [ %341, %368 ]
  %327 = load double, ptr %326, align 8, !tbaa !39
  %328 = fptosi double %327 to i32
  %329 = getelementptr inbounds double, ptr %326, i64 2
  %330 = getelementptr inbounds double, ptr %326, i64 3
  %331 = load double, ptr %329, align 8, !tbaa !39
  %332 = fptosi double %331 to i32
  %333 = getelementptr inbounds i32, ptr %14, i64 %325
  store i32 %332, ptr %333, align 4, !tbaa !11
  %334 = getelementptr inbounds double, ptr %326, i64 4
  %335 = load double, ptr %330, align 8, !tbaa !39
  %336 = fptosi double %335 to i32
  %337 = getelementptr inbounds i32, ptr %15, i64 %325
  store i32 %336, ptr %337, align 4, !tbaa !11
  %338 = getelementptr inbounds double, ptr %326, i64 5
  %339 = load double, ptr %334, align 8, !tbaa !39
  %340 = getelementptr inbounds double, ptr %16, i64 %325
  store double %339, ptr %340, align 8, !tbaa !39
  %341 = getelementptr inbounds double, ptr %326, i64 6
  %342 = load double, ptr %338, align 8, !tbaa !39
  %343 = getelementptr inbounds double, ptr %17, i64 %325
  store double %342, ptr %343, align 8, !tbaa !39
  %344 = zext i32 %328 to i64
  %345 = icmp eq i64 %325, %344
  br i1 %345, label %349, label %346

346:                                              ; preds = %324
  %347 = load ptr, ptr @stderr, align 8, !tbaa !7
  %348 = tail call i64 @fwrite(ptr nonnull @.str.4.371, i64 27, i64 1, ptr %347) #53
  tail call void @exit(i32 noundef -1) #54
  unreachable

349:                                              ; preds = %324
  %350 = icmp eq i64 %325, 0
  br i1 %350, label %368, label %351

351:                                              ; preds = %349
  %352 = load double, ptr %340, align 8, !tbaa !39
  %353 = fsub double 1.000000e+00, %352
  %354 = add nsw i64 %325, -1
  %355 = getelementptr inbounds double, ptr %17, i64 %354
  %356 = load double, ptr %355, align 8, !tbaa !39
  %357 = fsub double %353, %356
  %358 = tail call double @llvm.fabs.f64(double %357)
  %359 = fcmp ogt double %358, 1.000000e-02
  br i1 %359, label %360, label %368

360:                                              ; preds = %351
  %.lcssa2 = phi i64 [ %354, %351 ]
  %.lcssa1 = phi ptr [ %340, %351 ]
  %361 = getelementptr inbounds double, ptr %17, i64 %.lcssa2
  %362 = load ptr, ptr @stderr, align 8, !tbaa !7
  %363 = tail call i64 @fwrite(ptr nonnull @.str.7.374, i64 30, i64 1, ptr %362) #53
  %364 = load ptr, ptr @stderr, align 8, !tbaa !7
  %365 = load double, ptr %.lcssa1, align 8, !tbaa !39
  %366 = load double, ptr %361, align 8, !tbaa !39
  %367 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %364, ptr noundef nonnull @.str.6.373, double noundef %365, double noundef %366) #60
  tail call void @exit(i32 noundef -1) #54
  unreachable

368:                                              ; preds = %351, %349
  %369 = add nuw nsw i64 %325, 1
  %370 = icmp eq i64 %369, %323
  br i1 %370, label %376, label %324, !llvm.loop !541

371:                                              ; preds = %310
  %372 = mul i32 %317, 6
  %373 = add i32 %372, 6
  %374 = sext i32 %373 to i64
  %375 = getelementptr inbounds double, ptr %315, i64 %374
  br label %376

376:                                              ; preds = %371, %368, %319
  %377 = phi ptr [ %375, %371 ], [ %315, %319 ], [ %341, %368 ]
  %378 = add nuw nsw i32 %312, 1
  %379 = icmp eq i32 %378, 6
  br i1 %379, label %380, label %310, !llvm.loop !542

380:                                              ; preds = %376
  call void @llvm.lifetime.end.p0(i64 504, ptr nonnull %20) #56
  call void @llvm.lifetime.end.p0(i64 504, ptr nonnull %19) #56
  ret void
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write)
declare double @exp(double noundef) local_unnamed_addr #18

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <4 x float> @llvm.fmuladd.v4f32(<4 x float>, <4 x float>, <4 x float>) #9

declare float @sqrtf(float) local_unnamed_addr

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #9

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.sqrt.f64(double) #9

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write)
declare double @log10(double noundef) local_unnamed_addr #18

; Function Attrs: noreturn nounwind optsize
declare void @abort() local_unnamed_addr #7

; Function Attrs: nounwind optsize uwtable
define internal void @iteration_init(ptr nocapture noundef readonly %0, ptr nocapture noundef %1, ptr nocapture noundef readnone %2) #4 {
  %4 = getelementptr inbounds %struct.III_side_info_t, ptr %1, i64 0, i32 2
  store i32 0, ptr %4, align 8, !tbaa !225
  %5 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 39
  %6 = load i64, ptr %5, align 8, !tbaa !134
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %8, label %86

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 51
  %10 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 43
  br label %11

11:                                               ; preds = %11, %8
  %12 = phi i64 [ 0, %8 ], [ %22, %11 ]
  %13 = load i32, ptr %9, align 8, !tbaa !165
  %14 = load i32, ptr %10, align 8, !tbaa !162
  %15 = mul nsw i32 %14, 3
  %16 = add nsw i32 %15, %13
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds [6 x %struct.scalefac_struct], ptr @sfBandIndex, i64 0, i64 %17
  %19 = getelementptr inbounds [23 x i32], ptr %18, i64 0, i64 %12
  %20 = load i32, ptr %19, align 4, !tbaa !11
  %21 = getelementptr inbounds [23 x i32], ptr @scalefac_band, i64 0, i64 %12
  store i32 %20, ptr %21, align 4, !tbaa !11
  %22 = add nuw nsw i64 %12, 1
  %23 = icmp eq i64 %22, 23
  br i1 %23, label %24, label %11, !llvm.loop !543

24:                                               ; preds = %24, %11
  %25 = phi i64 [ %34, %24 ], [ 0, %11 ]
  %26 = load i32, ptr %9, align 8, !tbaa !165
  %27 = load i32, ptr %10, align 8, !tbaa !162
  %28 = mul nsw i32 %27, 3
  %29 = add nsw i32 %28, %26
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds [6 x %struct.scalefac_struct], ptr @sfBandIndex, i64 0, i64 %30, i32 1, i64 %25
  %32 = load i32, ptr %31, align 4, !tbaa !11
  %33 = getelementptr inbounds %struct.scalefac_struct, ptr @scalefac_band, i64 0, i32 1, i64 %25
  store i32 %32, ptr %33, align 4, !tbaa !11
  %34 = add nuw nsw i64 %25, 1
  %35 = icmp eq i64 %34, 14
  br i1 %35, label %36, label %24, !llvm.loop !544

36:                                               ; preds = %24
  store i32 0, ptr %1, align 8, !tbaa !177
  tail call void @compute_ath(ptr noundef nonnull %0, ptr noundef nonnull @ATH_l, ptr noundef nonnull @ATH_s) #57
  br label %37

37:                                               ; preds = %37, %36
  %38 = phi i64 [ 0, %36 ], [ %43, %37 ]
  %39 = trunc i64 %38 to i32
  %40 = sitofp i32 %39 to double
  %41 = tail call double @pow(double noundef %40, double noundef 0x3FF5555555555555) #55
  %42 = getelementptr inbounds [8208 x double], ptr @pow43, i64 0, i64 %38
  store double %41, ptr %42, align 8, !tbaa !39
  %43 = add nuw nsw i64 %38, 1
  %44 = icmp eq i64 %43, 8208
  br i1 %44, label %45, label %37, !llvm.loop !545

45:                                               ; preds = %45, %37
  %46 = phi i64 [ %47, %45 ], [ 0, %37 ]
  %47 = add nuw nsw i64 %46, 1
  %48 = trunc i64 %47 to i32
  %49 = sitofp i32 %48 to double
  %50 = getelementptr inbounds [8208 x double], ptr @pow43, i64 0, i64 %46
  %51 = load double, ptr %50, align 8, !tbaa !39
  %52 = getelementptr inbounds [8208 x double], ptr @pow43, i64 0, i64 %47
  %53 = load double, ptr %52, align 8, !tbaa !39
  %54 = fadd double %51, %53
  %55 = fmul double %54, 5.000000e-01
  %56 = tail call double @pow(double noundef %55, double noundef 7.500000e-01) #55
  %57 = fsub double %49, %56
  %58 = getelementptr inbounds [8208 x double], ptr @adj43, i64 0, i64 %46
  store double %57, ptr %58, align 8, !tbaa !39
  %59 = icmp eq i64 %47, 8207
  br i1 %59, label %60, label %45, !llvm.loop !546

60:                                               ; preds = %45
  store double 5.000000e-01, ptr getelementptr inbounds ([8208 x double], ptr @adj43, i64 0, i64 8207), align 8, !tbaa !39
  br label %61

61:                                               ; preds = %61, %60
  %62 = phi i64 [ 1, %60 ], [ %71, %61 ]
  %63 = add nsw i64 %62, -1
  %64 = getelementptr inbounds [8208 x double], ptr @pow43, i64 0, i64 %63
  %65 = load double, ptr %64, align 8, !tbaa !39
  %66 = getelementptr inbounds [8208 x double], ptr @pow43, i64 0, i64 %62
  %67 = load double, ptr %66, align 8, !tbaa !39
  %68 = fadd double %65, %67
  %69 = fmul double %68, 5.000000e-01
  %70 = tail call double @pow(double noundef %69, double noundef 7.500000e-01) #55
  %71 = add nuw nsw i64 %62, 1
  %72 = icmp eq i64 %71, 8208
  br i1 %72, label %73, label %61, !llvm.loop !547

73:                                               ; preds = %73, %61
  %74 = phi i64 [ %84, %73 ], [ 0, %61 ]
  %75 = trunc i64 %74 to i32
  %76 = add i32 %75, -210
  %77 = sitofp i32 %76 to double
  %78 = fmul double %77, -1.875000e-01
  %79 = tail call double @exp2(double %78) #56
  %80 = getelementptr inbounds [256 x double], ptr @ipow20, i64 0, i64 %74
  store double %79, ptr %80, align 8, !tbaa !39
  %81 = fmul double %77, 2.500000e-01
  %82 = tail call double @exp2(double %81) #56
  %83 = getelementptr inbounds [256 x double], ptr @pow20, i64 0, i64 %74
  store double %82, ptr %83, align 8, !tbaa !39
  %84 = add nuw nsw i64 %74, 1
  %85 = icmp eq i64 %84, 256
  br i1 %85, label %86, label %73, !llvm.loop !548

86:                                               ; preds = %73, %3
  store i32 0, ptr @convert_mdct, align 4, !tbaa !11
  store i32 0, ptr @reduce_sidechannel, align 4, !tbaa !11
  %87 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 52
  %88 = load i32, ptr %87, align 4, !tbaa !169
  %89 = icmp eq i32 %88, 2
  br i1 %89, label %90, label %91

90:                                               ; preds = %86
  store i32 1, ptr @convert_mdct, align 4, !tbaa !11
  store i32 1, ptr @reduce_sidechannel, align 4, !tbaa !11
  br label %91

91:                                               ; preds = %90, %86
  %92 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 45
  %93 = load i32, ptr %92, align 8, !tbaa !136
  %94 = icmp sgt i32 %93, 0
  br i1 %94, label %95, label %105

95:                                               ; preds = %91
  %96 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 46
  %97 = load i32, ptr %96, align 4, !tbaa !173
  %98 = icmp sgt i32 %97, 0
  %99 = zext i32 %93 to i64
  %100 = zext i32 %97 to i64
  br label %101

101:                                              ; preds = %121, %95
  %102 = phi i64 [ 0, %95 ], [ %122, %121 ]
  br i1 %98, label %103, label %121

103:                                              ; preds = %101
  %104 = getelementptr inbounds %struct.III_side_info_t, ptr %1, i64 0, i32 4, i64 %102
  br label %109

105:                                              ; preds = %121, %91
  %106 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 46
  %107 = load i32, ptr %106, align 4, !tbaa !173
  %108 = icmp sgt i32 %107, 0
  br i1 %108, label %124, label %133

109:                                              ; preds = %109, %103
  %110 = phi i64 [ 0, %103 ], [ %119, %109 ]
  %111 = getelementptr inbounds [2 x %struct.gr_info_ss], ptr %104, i64 0, i64 %110
  %112 = getelementptr inbounds %struct.gr_info, ptr %111, i64 0, i32 6
  %113 = load i32, ptr %112, align 8, !tbaa !188
  %114 = icmp eq i32 %113, 2
  %115 = select i1 %114, i32 0, i32 21
  %116 = select i1 %114, i32 0, i32 12
  %117 = getelementptr inbounds %struct.gr_info, ptr %111, i64 0, i32 16
  store i32 %115, ptr %117, align 8
  %118 = getelementptr inbounds %struct.gr_info, ptr %111, i64 0, i32 17
  store i32 %116, ptr %118, align 4
  %119 = add nuw nsw i64 %110, 1
  %120 = icmp eq i64 %119, %100
  br i1 %120, label %121, label %109, !llvm.loop !549

121:                                              ; preds = %109, %101
  %122 = add nuw nsw i64 %102, 1
  %123 = icmp eq i64 %122, %99
  br i1 %123, label %105, label %101, !llvm.loop !550

124:                                              ; preds = %124, %105
  %125 = phi i64 [ %129, %124 ], [ 0, %105 ]
  %126 = shl nuw nsw i64 %125, 4
  %127 = or i64 %126, 12
  %128 = getelementptr i8, ptr %1, i64 %127
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %128, i8 0, i64 16, i1 false), !tbaa !11
  %129 = add nuw nsw i64 %125, 1
  %130 = trunc i64 %129 to i32
  %131 = load i32, ptr %106, align 4, !tbaa !173
  %132 = icmp sgt i32 %131, %130
  br i1 %132, label %124, label %133, !llvm.loop !551

133:                                              ; preds = %124, %105
  ret void
}

; Function Attrs: nofree nounwind optsize memory(readwrite, inaccessiblemem: write) uwtable
define internal void @compute_ath(ptr nocapture noundef readonly %0, ptr nocapture noundef %1, ptr nocapture noundef %2) #33 {
  %4 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 3
  %5 = load i32, ptr %4, align 8, !tbaa !243
  %6 = sitofp i32 %5 to double
  %7 = fdiv double %6, 1.000000e+03
  br label %10

8:                                                ; preds = %19, %10
  %9 = icmp eq i64 %14, 21
  br i1 %9, label %32, label %10, !llvm.loop !552

10:                                               ; preds = %8, %3
  %11 = phi i64 [ 0, %3 ], [ %14, %8 ]
  %12 = getelementptr inbounds [23 x i32], ptr @scalefac_band, i64 0, i64 %11
  %13 = load i32, ptr %12, align 4, !tbaa !11
  %14 = add nuw nsw i64 %11, 1
  %15 = getelementptr inbounds [23 x i32], ptr @scalefac_band, i64 0, i64 %14
  %16 = load i32, ptr %15, align 4, !tbaa !11
  %17 = getelementptr inbounds double, ptr %1, i64 %11
  store double 0x547D42AEA2879F2E, ptr %17, align 8, !tbaa !39
  %18 = icmp slt i32 %13, %16
  br i1 %18, label %19, label %8

19:                                               ; preds = %19, %10
  %20 = phi i32 [ %28, %19 ], [ %13, %10 ]
  %21 = sitofp i32 %20 to double
  %22 = fmul double %7, %21
  %23 = fdiv double %22, 1.152000e+03
  %24 = tail call double @ATHformula(ptr noundef %0, double noundef %23) #57
  %25 = load double, ptr %17, align 8, !tbaa !39
  %26 = fcmp olt double %25, %24
  %27 = select i1 %26, double %25, double %24
  store double %27, ptr %17, align 8, !tbaa !39
  %28 = add nsw i32 %20, 1
  %29 = icmp eq i32 %28, %16
  br i1 %29, label %8, label %19, !llvm.loop !553

30:                                               ; preds = %41, %32
  %31 = icmp eq i64 %36, 12
  br i1 %31, label %52, label %32, !llvm.loop !554

32:                                               ; preds = %30, %8
  %33 = phi i64 [ %36, %30 ], [ 0, %8 ]
  %34 = getelementptr inbounds %struct.scalefac_struct, ptr @scalefac_band, i64 0, i32 1, i64 %33
  %35 = load i32, ptr %34, align 4, !tbaa !11
  %36 = add nuw nsw i64 %33, 1
  %37 = getelementptr inbounds %struct.scalefac_struct, ptr @scalefac_band, i64 0, i32 1, i64 %36
  %38 = load i32, ptr %37, align 4, !tbaa !11
  %39 = getelementptr inbounds double, ptr %2, i64 %33
  store double 0x547D42AEA2879F2E, ptr %39, align 8, !tbaa !39
  %40 = icmp slt i32 %35, %38
  br i1 %40, label %41, label %30

41:                                               ; preds = %41, %32
  %42 = phi i32 [ %50, %41 ], [ %35, %32 ]
  %43 = sitofp i32 %42 to double
  %44 = fmul double %7, %43
  %45 = fdiv double %44, 3.840000e+02
  %46 = tail call double @ATHformula(ptr noundef %0, double noundef %45) #57
  %47 = load double, ptr %39, align 8, !tbaa !39
  %48 = fcmp olt double %47, %46
  %49 = select i1 %48, double %47, double %46
  store double %49, ptr %39, align 8, !tbaa !39
  %50 = add nsw i32 %42, 1
  %51 = icmp eq i32 %50, %38
  br i1 %51, label %30, label %41, !llvm.loop !555

52:                                               ; preds = %30
  ret void
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write, argmem: readwrite) uwtable
define internal double @ATHformula(ptr nocapture noundef readonly %0, double noundef %1) #36 {
  %3 = fcmp olt double %1, 2.000000e-02
  %4 = select i1 %3, double 2.000000e-02, double %1
  %5 = tail call double @pow(double noundef %4, double noundef -8.000000e-01) #55
  %6 = fadd double %4, -3.300000e+00
  %7 = fmul double %6, %6
  %8 = fmul double %7, -6.000000e-01
  %9 = tail call double @exp(double noundef %8) #55
  %10 = fmul double %9, -6.500000e+00
  %11 = tail call double @llvm.fmuladd.f64(double %5, double 3.640000e+00, double %10)
  %12 = tail call double @pow(double noundef %4, double noundef 4.000000e+00) #55
  %13 = tail call double @llvm.fmuladd.f64(double %12, double 1.000000e-03, double %11)
  %14 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 34
  %15 = load i32, ptr %14, align 4, !tbaa !301
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, double -1.140000e+02, double -2.000000e+02
  %18 = fadd double %13, %17
  %19 = fdiv double %18, 1.000000e+01
  %20 = tail call double @pow(double noundef 1.000000e+01, double noundef %19) #55
  ret double %20
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(argmem: readwrite) uwtable
define internal void @ms_convert(ptr nocapture noundef writeonly %0, ptr nocapture noundef readonly %1) #37 {
  br label %3

3:                                                ; preds = %3, %2
  %4 = phi i64 [ 0, %2 ], [ %15, %3 ]
  %5 = getelementptr inbounds [576 x double], ptr %1, i64 0, i64 %4
  %6 = load double, ptr %5, align 8, !tbaa !39
  %7 = getelementptr inbounds [576 x double], ptr %1, i64 1, i64 %4
  %8 = load double, ptr %7, align 8, !tbaa !39
  %9 = fadd double %6, %8
  %10 = fmul double %9, 0x3FE6A09E667F3BCD
  %11 = getelementptr inbounds [576 x double], ptr %0, i64 0, i64 %4
  store double %10, ptr %11, align 8, !tbaa !39
  %12 = fsub double %6, %8
  %13 = fmul double %12, 0x3FE6A09E667F3BCD
  %14 = getelementptr inbounds [576 x double], ptr %0, i64 1, i64 %4
  store double %13, ptr %14, align 8, !tbaa !39
  %15 = add nuw nsw i64 %4, 1
  %16 = icmp eq i64 %15, 576
  br i1 %16, label %17, label %3, !llvm.loop !556

17:                                               ; preds = %3
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @on_pe(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr nocapture noundef writeonly %3, i32 noundef %4, i32 noundef %5) #4 {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %7) #56
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %8) #56
  call void @ResvMaxBits(i32 noundef %4, ptr noundef nonnull %8, ptr noundef nonnull %7, i32 noundef %5) #55
  %9 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 46
  %10 = load i32, ptr %9, align 4, !tbaa !173
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %12, label %46

12:                                               ; preds = %6
  %13 = load i32, ptr %7, align 4, !tbaa !11
  %14 = sext i32 %5 to i64
  %15 = getelementptr inbounds %struct.III_side_info_t, ptr %2, i64 0, i32 4, i64 %14
  %16 = load i32, ptr %8, align 4, !tbaa !11
  br label %17

17:                                               ; preds = %17, %12
  %18 = phi i64 [ 0, %12 ], [ %42, %17 ]
  %19 = phi i32 [ %10, %12 ], [ %43, %17 ]
  %20 = phi i32 [ %13, %12 ], [ %41, %17 ]
  %21 = sdiv i32 %16, %19
  %22 = getelementptr inbounds i32, ptr %3, i64 %18
  store i32 %21, ptr %22, align 4, !tbaa !11
  %23 = getelementptr inbounds [2 x double], ptr %1, i64 %14, i64 %18
  %24 = load double, ptr %23, align 8, !tbaa !39
  %25 = fadd double %24, -7.500000e+02
  %26 = fdiv double %25, 1.550000e+00
  %27 = fptosi double %26 to i32
  %28 = getelementptr inbounds [2 x %struct.gr_info_ss], ptr %15, i64 0, i64 %18, i32 0, i32 6
  %29 = load i32, ptr %28, align 8, !tbaa !188
  %30 = icmp eq i32 %29, 2
  %31 = icmp slt i32 %27, 500
  %32 = select i1 %30, i1 %31, i1 false
  %33 = call i32 @llvm.smax.i32(i32 %27, i32 0)
  %34 = select i1 %32, i32 500, i32 %33
  %35 = call i32 @llvm.smin.i32(i32 %34, i32 %20)
  %36 = add nsw i32 %35, %21
  %37 = icmp sgt i32 %36, 4095
  %38 = sub nsw i32 4095, %21
  %39 = select i1 %37, i32 %38, i32 %35
  %40 = add nsw i32 %39, %21
  store i32 %40, ptr %22, align 4, !tbaa !11
  %41 = sub nsw i32 %20, %39
  %42 = add nuw nsw i64 %18, 1
  %43 = load i32, ptr %9, align 4, !tbaa !173
  %44 = sext i32 %43 to i64
  %45 = icmp slt i64 %42, %44
  br i1 %45, label %17, label %46, !llvm.loop !557

46:                                               ; preds = %17, %6
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8) #56
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7) #56
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(argmem: readwrite) uwtable
define internal void @reduce_side(ptr nocapture noundef %0, double noundef %1, i32 noundef %2) #38 {
  %4 = fsub double 5.000000e-01, %1
  %5 = fmul double %4, 3.300000e-01
  %6 = fmul double %5, 2.000000e+00
  %7 = fptrunc double %6 to float
  %8 = fcmp olt float %7, 0.000000e+00
  %9 = select i1 %8, float 0.000000e+00, float %7
  %10 = getelementptr inbounds i32, ptr %0, i64 1
  %11 = load i32, ptr %10, align 4, !tbaa !11
  %12 = icmp sgt i32 %11, 124
  br i1 %12, label %13, label %30

13:                                               ; preds = %3
  %14 = sitofp i32 %11 to float
  %15 = fneg float %14
  %16 = tail call float @llvm.fmuladd.f32(float %15, float %9, float %14)
  %17 = fcmp ogt float %16, 1.250000e+02
  br i1 %17, label %18, label %24

18:                                               ; preds = %13
  %19 = load i32, ptr %0, align 4, !tbaa !11
  %20 = sitofp i32 %19 to float
  %21 = tail call float @llvm.fmuladd.f32(float %14, float %9, float %20)
  %22 = fptosi float %21 to i32
  store i32 %22, ptr %0, align 4, !tbaa !11
  %23 = fptosi float %16 to i32
  br label %28

24:                                               ; preds = %13
  %25 = add nsw i32 %11, -125
  %26 = load i32, ptr %0, align 4, !tbaa !11
  %27 = add nsw i32 %25, %26
  store i32 %27, ptr %0, align 4, !tbaa !11
  br label %28

28:                                               ; preds = %24, %18
  %29 = phi i32 [ %23, %18 ], [ 125, %24 ]
  store i32 %29, ptr %10, align 4, !tbaa !11
  br label %30

30:                                               ; preds = %28, %3
  %31 = icmp sgt i32 %2, 5791
  %32 = sdiv i32 %2, 2
  %33 = add nsw i32 %32, 1200
  %34 = select i1 %31, i32 4095, i32 %33
  br label %35

35:                                               ; preds = %42, %30
  %36 = phi i1 [ true, %30 ], [ false, %42 ]
  %37 = phi i64 [ 0, %30 ], [ 1, %42 ]
  %38 = getelementptr inbounds i32, ptr %0, i64 %37
  %39 = load i32, ptr %38, align 4, !tbaa !11
  %40 = icmp sgt i32 %39, %34
  br i1 %40, label %41, label %42

41:                                               ; preds = %35
  store i32 %34, ptr %38, align 4, !tbaa !11
  br label %42

42:                                               ; preds = %41, %35
  br i1 %36, label %35, label %43, !llvm.loop !558

43:                                               ; preds = %42
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @inner_loop(ptr noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %3, ptr noundef %4) #4 {
  %6 = getelementptr inbounds %struct.gr_info, ptr %4, i64 0, i32 3
  %7 = load i32, ptr %6, align 4, !tbaa !185
  %8 = add i32 %7, -1
  store i32 %8, ptr %6, align 4, !tbaa !185
  br label %9

9:                                                ; preds = %9, %5
  %10 = load i32, ptr %6, align 4, !tbaa !185
  %11 = add i32 %10, 1
  store i32 %11, ptr %6, align 4, !tbaa !185
  %12 = tail call i32 @count_bits(ptr noundef %0, ptr noundef %2, ptr noundef %1, ptr noundef nonnull %4) #55
  %13 = icmp sgt i32 %12, %3
  br i1 %13, label %9, label %14, !llvm.loop !559

14:                                               ; preds = %9
  %.lcssa = phi i32 [ %12, %9 ]
  ret i32 %.lcssa
}

; Function Attrs: nofree nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal i32 @scale_bitcount(ptr nocapture noundef %0, ptr nocapture noundef %1) #39 {
  %3 = getelementptr inbounds %struct.gr_info, ptr %1, i64 0, i32 6
  %4 = load i32, ptr %3, align 8, !tbaa !188
  %5 = icmp eq i32 %4, 2
  br i1 %5, label %6, label %29

6:                                                ; preds = %26, %2
  %7 = phi i64 [ %27, %26 ], [ 0, %2 ]
  %8 = phi i32 [ %.lcssa2, %26 ], [ 0, %2 ]
  %9 = phi i32 [ %.lcssa1.lcssa, %26 ], [ 0, %2 ]
  br label %10

10:                                               ; preds = %10, %6
  %11 = phi i64 [ 0, %6 ], [ %16, %10 ]
  %12 = phi i32 [ %9, %6 ], [ %15, %10 ]
  %13 = getelementptr inbounds %struct.III_scalefac_t, ptr %0, i64 0, i32 1, i64 %11, i64 %7
  %14 = load i32, ptr %13, align 4, !tbaa !11
  %15 = tail call i32 @llvm.smax.i32(i32 %14, i32 %12)
  %16 = add nuw nsw i64 %11, 1
  %17 = icmp eq i64 %16, 6
  br i1 %17, label %18, label %10, !llvm.loop !560

18:                                               ; preds = %18, %10
  %.lcssa1 = phi i32 [ %.lcssa1, %18 ], [ %15, %10 ]
  %19 = phi i64 [ %24, %18 ], [ 6, %10 ]
  %20 = phi i32 [ %23, %18 ], [ %8, %10 ]
  %21 = getelementptr inbounds %struct.III_scalefac_t, ptr %0, i64 0, i32 1, i64 %19, i64 %7
  %22 = load i32, ptr %21, align 4, !tbaa !11
  %23 = tail call i32 @llvm.smax.i32(i32 %22, i32 %20)
  %24 = add nuw nsw i64 %19, 1
  %25 = icmp eq i64 %24, 12
  br i1 %25, label %26, label %18, !llvm.loop !561

26:                                               ; preds = %18
  %.lcssa2 = phi i32 [ %23, %18 ]
  %.lcssa1.lcssa = phi i32 [ %.lcssa1, %18 ]
  %27 = add nuw nsw i64 %7, 1
  %28 = icmp eq i64 %27, 3
  br i1 %28, label %70, label %6, !llvm.loop !562

29:                                               ; preds = %29, %2
  %30 = phi i64 [ %35, %29 ], [ 0, %2 ]
  %31 = phi i32 [ %34, %29 ], [ 0, %2 ]
  %32 = getelementptr inbounds [22 x i32], ptr %0, i64 0, i64 %30
  %33 = load i32, ptr %32, align 4, !tbaa !11
  %34 = tail call i32 @llvm.smax.i32(i32 %33, i32 %31)
  %35 = add nuw nsw i64 %30, 1
  %36 = icmp eq i64 %35, 11
  br i1 %36, label %37, label %29, !llvm.loop !563

37:                                               ; preds = %29
  %.lcssa3 = phi i32 [ %34, %29 ]
  %38 = getelementptr inbounds %struct.gr_info, ptr %1, i64 0, i32 12
  %39 = load i32, ptr %38, align 8, !tbaa !195
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %61

41:                                               ; preds = %48, %37
  %42 = phi i64 [ %49, %48 ], [ 11, %37 ]
  %43 = getelementptr inbounds [22 x i32], ptr %0, i64 0, i64 %42
  %44 = load i32, ptr %43, align 4, !tbaa !11
  %45 = getelementptr inbounds [21 x i32], ptr @pretab, i64 0, i64 %42
  %46 = load i32, ptr %45, align 4, !tbaa !11
  %47 = icmp slt i32 %44, %46
  br i1 %47, label %61, label %48

48:                                               ; preds = %41
  %49 = add nuw nsw i64 %42, 1
  %50 = icmp eq i64 %49, 21
  br i1 %50, label %51, label %41, !llvm.loop !564

51:                                               ; preds = %48
  store i32 1, ptr %38, align 8, !tbaa !195
  br label %52

52:                                               ; preds = %52, %51
  %53 = phi i64 [ 11, %51 ], [ %59, %52 ]
  %54 = getelementptr inbounds [21 x i32], ptr @pretab, i64 0, i64 %53
  %55 = load i32, ptr %54, align 4, !tbaa !11
  %56 = getelementptr inbounds [22 x i32], ptr %0, i64 0, i64 %53
  %57 = load i32, ptr %56, align 4, !tbaa !11
  %58 = sub nsw i32 %57, %55
  store i32 %58, ptr %56, align 4, !tbaa !11
  %59 = add nuw nsw i64 %53, 1
  %60 = icmp eq i64 %59, 21
  br i1 %60, label %61, label %52, !llvm.loop !565

61:                                               ; preds = %52, %41, %37
  br label %62

62:                                               ; preds = %62, %61
  %63 = phi i64 [ %68, %62 ], [ 11, %61 ]
  %64 = phi i32 [ %67, %62 ], [ 0, %61 ]
  %65 = getelementptr inbounds [22 x i32], ptr %0, i64 0, i64 %63
  %66 = load i32, ptr %65, align 4, !tbaa !11
  %67 = tail call i32 @llvm.smax.i32(i32 %66, i32 %64)
  %68 = add nuw nsw i64 %63, 1
  %69 = icmp eq i64 %68, 21
  br i1 %69, label %70, label %62, !llvm.loop !566

70:                                               ; preds = %62, %26
  %71 = phi i32 [ %.lcssa1.lcssa, %26 ], [ %.lcssa3, %62 ]
  %72 = phi i32 [ %.lcssa2, %26 ], [ %67, %62 ]
  %73 = phi ptr [ @scale_bitcount.slen1_tab, %26 ], [ @scale_bitcount.slen2_tab, %62 ]
  %74 = getelementptr inbounds %struct.gr_info, ptr %1, i64 0, i32 15
  store i32 100000, ptr %74, align 4, !tbaa !237
  %75 = getelementptr inbounds %struct.gr_info, ptr %1, i64 0, i32 4
  br label %76

76:                                               ; preds = %93, %70
  %77 = phi i32 [ 100000, %70 ], [ %94, %93 ]
  %78 = phi i64 [ 0, %70 ], [ %96, %93 ]
  %79 = phi i32 [ 2, %70 ], [ %95, %93 ]
  %80 = getelementptr inbounds [16 x i32], ptr @scale_bitcount.slen1, i64 0, i64 %78
  %81 = load i32, ptr %80, align 4, !tbaa !11
  %82 = icmp slt i32 %71, %81
  br i1 %82, label %83, label %93

83:                                               ; preds = %76
  %84 = getelementptr inbounds [16 x i32], ptr @scale_bitcount.slen2, i64 0, i64 %78
  %85 = load i32, ptr %84, align 4, !tbaa !11
  %86 = icmp slt i32 %72, %85
  br i1 %86, label %87, label %93

87:                                               ; preds = %83
  %88 = getelementptr inbounds i32, ptr %73, i64 %78
  %89 = load i32, ptr %88, align 4, !tbaa !11
  %90 = icmp sgt i32 %77, %89
  br i1 %90, label %91, label %93

91:                                               ; preds = %87
  store i32 %89, ptr %74, align 4, !tbaa !237
  %92 = trunc i64 %78 to i32
  store i32 %92, ptr %75, align 8, !tbaa !186
  br label %93

93:                                               ; preds = %91, %87, %83, %76
  %94 = phi i32 [ %89, %91 ], [ %77, %87 ], [ %77, %83 ], [ %77, %76 ]
  %95 = phi i32 [ 0, %91 ], [ %79, %87 ], [ %79, %83 ], [ %79, %76 ]
  %96 = add nuw nsw i64 %78, 1
  %97 = icmp eq i64 %96, 16
  br i1 %97, label %98, label %76, !llvm.loop !567

98:                                               ; preds = %93
  %.lcssa = phi i32 [ %95, %93 ]
  ret i32 %.lcssa
}

; Function Attrs: nofree nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal i32 @scale_bitcount_lsf(ptr nocapture noundef readonly %0, ptr nocapture noundef %1) #39 {
  %3 = alloca [4 x i32], align 16
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %3) #56
  %4 = getelementptr inbounds %struct.gr_info, ptr %1, i64 0, i32 12
  %5 = load i32, ptr %4, align 8, !tbaa !195
  %6 = icmp eq i32 %5, 0
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(16) %3, i8 0, i64 16, i1 false), !tbaa !11
  %7 = select i1 %6, i64 0, i64 2
  %8 = getelementptr inbounds %struct.gr_info, ptr %1, i64 0, i32 6
  %9 = load i32, ptr %8, align 8, !tbaa !188
  %10 = icmp eq i32 %9, 2
  br i1 %10, label %11, label %46

11:                                               ; preds = %2
  %12 = getelementptr inbounds [6 x [3 x [4 x i32]]], ptr @nr_of_sfb_block, i64 0, i64 %7, i64 1
  br label %13

13:                                               ; preds = %42, %11
  %14 = phi i64 [ 0, %11 ], [ %44, %42 ]
  %15 = phi i32 [ 0, %11 ], [ %43, %42 ]
  %16 = getelementptr inbounds i32, ptr %12, i64 %14
  %17 = load i32, ptr %16, align 4, !tbaa !11
  %18 = icmp ult i32 %17, 3
  br i1 %18, label %42, label %19

19:                                               ; preds = %13
  %20 = udiv i32 %17, 3
  %21 = getelementptr inbounds [4 x i32], ptr %3, i64 0, i64 %14
  %22 = load i32, ptr %21, align 4
  %23 = sext i32 %15 to i64
  br label %24

24:                                               ; preds = %36, %19
  %25 = phi i64 [ %23, %19 ], [ %38, %36 ]
  %26 = phi i32 [ %22, %19 ], [ %.lcssa, %36 ]
  %27 = phi i32 [ 0, %19 ], [ %37, %36 ]
  br label %28

28:                                               ; preds = %28, %24
  %29 = phi i64 [ 0, %24 ], [ %34, %28 ]
  %30 = phi i32 [ %26, %24 ], [ %33, %28 ]
  %31 = getelementptr inbounds %struct.III_scalefac_t, ptr %0, i64 0, i32 1, i64 %25, i64 %29
  %32 = load i32, ptr %31, align 4, !tbaa !11
  %33 = tail call i32 @llvm.smax.i32(i32 %32, i32 %30)
  %34 = add nuw nsw i64 %29, 1
  %35 = icmp eq i64 %34, 3
  br i1 %35, label %36, label %28, !llvm.loop !568

36:                                               ; preds = %28
  %.lcssa = phi i32 [ %33, %28 ]
  %37 = add nuw nsw i32 %27, 1
  %38 = add nsw i64 %25, 1
  %39 = icmp eq i32 %37, %20
  br i1 %39, label %40, label %24, !llvm.loop !569

40:                                               ; preds = %36
  %.lcssa1 = phi i64 [ %38, %36 ]
  %.lcssa.lcssa = phi i32 [ %.lcssa, %36 ]
  %41 = trunc i64 %.lcssa1 to i32
  store i32 %.lcssa.lcssa, ptr %21, align 4
  br label %42

42:                                               ; preds = %40, %13
  %43 = phi i32 [ %41, %40 ], [ %15, %13 ]
  %44 = add nuw nsw i64 %14, 1
  %45 = icmp eq i64 %44, 4
  br i1 %45, label %74, label %13, !llvm.loop !570

46:                                               ; preds = %2
  %47 = getelementptr inbounds [6 x [3 x [4 x i32]]], ptr @nr_of_sfb_block, i64 0, i64 %7
  br label %48

48:                                               ; preds = %70, %46
  %49 = phi i64 [ 0, %46 ], [ %72, %70 ]
  %50 = phi i32 [ 0, %46 ], [ %71, %70 ]
  %51 = getelementptr inbounds i32, ptr %47, i64 %49
  %52 = load i32, ptr %51, align 4, !tbaa !11
  %53 = icmp sgt i32 %52, 0
  br i1 %53, label %54, label %70

54:                                               ; preds = %48
  %55 = getelementptr inbounds [4 x i32], ptr %3, i64 0, i64 %49
  %56 = load i32, ptr %55, align 4
  %57 = sext i32 %50 to i64
  br label %58

58:                                               ; preds = %58, %54
  %59 = phi i64 [ %57, %54 ], [ %66, %58 ]
  %60 = phi i32 [ %56, %54 ], [ %64, %58 ]
  %61 = phi i32 [ 0, %54 ], [ %65, %58 ]
  %62 = getelementptr inbounds [22 x i32], ptr %0, i64 0, i64 %59
  %63 = load i32, ptr %62, align 4, !tbaa !11
  %64 = tail call i32 @llvm.smax.i32(i32 %63, i32 %60)
  %65 = add nuw nsw i32 %61, 1
  %66 = add nsw i64 %59, 1
  %67 = icmp eq i32 %65, %52
  br i1 %67, label %68, label %58, !llvm.loop !571

68:                                               ; preds = %58
  %.lcssa2 = phi i32 [ %64, %58 ]
  %69 = add i32 %50, %52
  store i32 %.lcssa2, ptr %55, align 4
  br label %70

70:                                               ; preds = %68, %48
  %71 = phi i32 [ %69, %68 ], [ %50, %48 ]
  %72 = add nuw nsw i64 %49, 1
  %73 = icmp eq i64 %72, 4
  br i1 %73, label %74, label %48, !llvm.loop !572

74:                                               ; preds = %70, %42
  %75 = phi i64 [ 1, %42 ], [ 0, %70 ]
  %76 = load <4 x i32>, ptr %3, align 16, !tbaa !11
  %77 = getelementptr inbounds [6 x [4 x i32]], ptr @max_range_sfac_tab, i64 0, i64 %7, i64 0
  %78 = load <4 x i32>, ptr %77, align 16, !tbaa !11
  %79 = icmp sgt <4 x i32> %76, %78
  %80 = bitcast <4 x i1> %79 to i4
  %81 = icmp eq i4 %80, 0
  br i1 %81, label %82, label %130

82:                                               ; preds = %74
  %83 = getelementptr inbounds [6 x [3 x [4 x i32]]], ptr @nr_of_sfb_block, i64 0, i64 %7, i64 %75
  %84 = getelementptr inbounds %struct.gr_info, ptr %1, i64 0, i32 19
  store ptr %83, ptr %84, align 8, !tbaa !218
  br label %85

85:                                               ; preds = %85, %82
  %86 = phi i64 [ 0, %82 ], [ %93, %85 ]
  %87 = getelementptr inbounds [4 x i32], ptr %3, i64 0, i64 %86
  %88 = load i32, ptr %87, align 4, !tbaa !11
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds [16 x i32], ptr @scale_bitcount_lsf.log2tab, i64 0, i64 %89
  %91 = load i32, ptr %90, align 4, !tbaa !11
  %92 = getelementptr inbounds %struct.gr_info, ptr %1, i64 0, i32 20, i64 %86
  store i32 %91, ptr %92, align 4, !tbaa !11
  %93 = add nuw nsw i64 %86, 1
  %94 = icmp eq i64 %93, 4
  br i1 %94, label %95, label %85, !llvm.loop !573

95:                                               ; preds = %85
  %96 = getelementptr inbounds %struct.gr_info, ptr %1, i64 0, i32 20
  %97 = load i32, ptr %96, align 8, !tbaa !11
  %98 = getelementptr inbounds %struct.gr_info, ptr %1, i64 0, i32 20, i64 1
  %99 = load i32, ptr %98, align 4, !tbaa !11
  br i1 %6, label %100, label %111

100:                                              ; preds = %95
  %101 = getelementptr inbounds %struct.gr_info, ptr %1, i64 0, i32 20, i64 2
  %102 = load i32, ptr %101, align 8, !tbaa !11
  %103 = getelementptr inbounds %struct.gr_info, ptr %1, i64 0, i32 20, i64 3
  %104 = load i32, ptr %103, align 4, !tbaa !11
  %105 = mul i32 %97, 5
  %106 = add i32 %105, %99
  %107 = shl i32 %106, 4
  %108 = shl i32 %102, 2
  %109 = add i32 %108, %107
  %110 = add i32 %109, %104
  br label %115

111:                                              ; preds = %95
  %112 = mul i32 %97, 3
  %113 = add i32 %112, 500
  %114 = add i32 %113, %99
  br label %115

115:                                              ; preds = %111, %100
  %116 = phi i32 [ %110, %100 ], [ %114, %111 ]
  %117 = getelementptr inbounds %struct.gr_info, ptr %1, i64 0, i32 4
  store i32 %116, ptr %117, align 8
  %118 = getelementptr inbounds %struct.gr_info, ptr %1, i64 0, i32 15
  store i32 0, ptr %118, align 4, !tbaa !237
  br label %119

119:                                              ; preds = %119, %115
  %120 = phi i64 [ 0, %115 ], [ %128, %119 ]
  %121 = phi i32 [ 0, %115 ], [ %127, %119 ]
  %122 = getelementptr inbounds %struct.gr_info, ptr %1, i64 0, i32 20, i64 %120
  %123 = load i32, ptr %122, align 4, !tbaa !11
  %124 = getelementptr inbounds i32, ptr %83, i64 %120
  %125 = load i32, ptr %124, align 4, !tbaa !11
  %126 = mul i32 %125, %123
  %127 = add i32 %121, %126
  store i32 %127, ptr %118, align 4, !tbaa !237
  %128 = add nuw nsw i64 %120, 1
  %129 = icmp eq i64 %128, 4
  br i1 %129, label %130, label %119, !llvm.loop !574

130:                                              ; preds = %119, %74
  %131 = tail call i4 @llvm.ctpop.i4(i4 %80), !range !575
  %132 = zext i4 %131 to i32
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %3) #56
  ret i32 %132
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i4 @llvm.ctpop.i4(i4) #9

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal i32 @calc_xmin(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, ptr nocapture noundef writeonly %4) #3 {
  %6 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 33
  %7 = load i32, ptr %6, align 8, !tbaa !300
  %8 = icmp eq i32 %7, 0
  %9 = getelementptr inbounds %struct.gr_info, ptr %3, i64 0, i32 17
  %10 = load i32, ptr %9, align 4, !tbaa !576
  %11 = icmp ult i32 %10, 12
  br i1 %8, label %40, label %12

12:                                               ; preds = %5
  br i1 %11, label %13, label %18

13:                                               ; preds = %12
  %14 = zext i32 %10 to i64
  br label %15

15:                                               ; preds = %30, %13
  %16 = phi i64 [ %14, %13 ], [ %31, %30 ]
  %17 = getelementptr inbounds [21 x double], ptr @ATH_s, i64 0, i64 %16
  br label %24

18:                                               ; preds = %30, %12
  %19 = getelementptr inbounds %struct.gr_info, ptr %3, i64 0, i32 16
  %20 = load i32, ptr %19, align 8, !tbaa !577
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %157, label %22

22:                                               ; preds = %18
  %23 = zext i32 %20 to i64
  br label %33

24:                                               ; preds = %24, %15
  %25 = phi i64 [ 0, %15 ], [ %28, %24 ]
  %26 = load double, ptr %17, align 8, !tbaa !39
  %27 = getelementptr inbounds %struct.III_psy_xmin, ptr %4, i64 0, i32 1, i64 %16, i64 %25
  store double %26, ptr %27, align 8, !tbaa !39
  %28 = add nuw nsw i64 %25, 1
  %29 = icmp eq i64 %28, 3
  br i1 %29, label %30, label %24, !llvm.loop !578

30:                                               ; preds = %24
  %31 = add nuw nsw i64 %16, 1
  %32 = icmp eq i64 %31, 12
  br i1 %32, label %18, label %15, !llvm.loop !579

33:                                               ; preds = %33, %22
  %34 = phi i64 [ 0, %22 ], [ %38, %33 ]
  %35 = getelementptr inbounds [21 x double], ptr @ATH_l, i64 0, i64 %34
  %36 = load double, ptr %35, align 8, !tbaa !39
  %37 = getelementptr inbounds [22 x double], ptr %4, i64 0, i64 %34
  store double %36, ptr %37, align 8, !tbaa !39
  %38 = add nuw nsw i64 %34, 1
  %39 = icmp eq i64 %38, %23
  br i1 %39, label %157, label %33, !llvm.loop !580

40:                                               ; preds = %5
  br i1 %11, label %41, label %49

41:                                               ; preds = %40
  %42 = load float, ptr @masking_lower, align 4
  %43 = fpext float %42 to double
  %44 = zext i32 %10 to i64
  %45 = getelementptr inbounds %struct.scalefac_struct, ptr @scalefac_band, i64 0, i32 1, i64 %44
  %46 = load i32, ptr %45, align 4, !tbaa !11
  br label %60

47:                                               ; preds = %99
  %.lcssa = phi i32 [ %108, %99 ]
  %48 = icmp eq i64 %64, 12
  br i1 %48, label %49, label %60, !llvm.loop !581

49:                                               ; preds = %47, %40
  %50 = phi i32 [ 0, %40 ], [ %.lcssa, %47 ]
  %51 = getelementptr inbounds %struct.gr_info, ptr %3, i64 0, i32 16
  %52 = load i32, ptr %51, align 8, !tbaa !577
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %157, label %54

54:                                               ; preds = %49
  %55 = getelementptr inbounds %struct.III_psy_ratio, ptr %2, i64 0, i32 1
  %56 = load float, ptr @masking_lower, align 4
  %57 = fpext float %56 to double
  %58 = zext i32 %52 to i64
  %59 = load i32, ptr @scalefac_band, align 4, !tbaa !11
  br label %111

60:                                               ; preds = %47, %41
  %61 = phi i32 [ %46, %41 ], [ %66, %47 ]
  %62 = phi i64 [ %44, %41 ], [ %64, %47 ]
  %63 = phi i32 [ 0, %41 ], [ %.lcssa, %47 ]
  %64 = add nuw nsw i64 %62, 1
  %65 = getelementptr inbounds %struct.scalefac_struct, ptr @scalefac_band, i64 0, i32 1, i64 %64
  %66 = load i32, ptr %65, align 4, !tbaa !11
  %67 = sub nsw i32 %66, %61
  %68 = icmp slt i32 %61, %66
  %69 = sitofp i32 %67 to double
  %70 = getelementptr inbounds [21 x double], ptr @ATH_s, i64 0, i64 %62
  %71 = sext i32 %61 to i64
  %72 = sext i32 %66 to i64
  br label %73

73:                                               ; preds = %99, %60
  %74 = phi i64 [ 0, %60 ], [ %109, %99 ]
  %75 = phi i32 [ %63, %60 ], [ %108, %99 ]
  br i1 %68, label %76, label %87

76:                                               ; preds = %76, %73
  %77 = phi i64 [ %85, %76 ], [ %71, %73 ]
  %78 = phi double [ %84, %76 ], [ 0.000000e+00, %73 ]
  %79 = mul nsw i64 %77, 3
  %80 = add nsw i64 %79, %74
  %81 = getelementptr inbounds double, ptr %1, i64 %80
  %82 = load double, ptr %81, align 8, !tbaa !39
  %83 = fmul double %82, %82
  %84 = fadd double %78, %83
  %85 = add nsw i64 %77, 1
  %86 = icmp eq i64 %85, %72
  br i1 %86, label %87, label %76, !llvm.loop !582

87:                                               ; preds = %76, %73
  %88 = phi double [ 0.000000e+00, %73 ], [ %84, %76 ]
  %89 = fdiv double %88, %69
  %90 = getelementptr inbounds %struct.III_psy_ratio, ptr %2, i64 0, i32 1, i32 1, i64 %62, i64 %74
  %91 = load double, ptr %90, align 8, !tbaa !39
  %92 = fcmp ogt double %91, 0.000000e+00
  br i1 %92, label %93, label %99

93:                                               ; preds = %87
  %94 = getelementptr inbounds %struct.III_psy_xmin, ptr %2, i64 0, i32 1, i64 %62, i64 %74
  %95 = load double, ptr %94, align 8, !tbaa !39
  %96 = fmul double %89, %95
  %97 = fmul double %96, %43
  %98 = fdiv double %97, %91
  br label %99

99:                                               ; preds = %93, %87
  %100 = phi double [ %98, %93 ], [ %91, %87 ]
  %101 = load double, ptr %70, align 8, !tbaa !39
  %102 = fcmp ogt double %101, %100
  %103 = select i1 %102, double %101, double %100
  %104 = getelementptr inbounds %struct.III_psy_xmin, ptr %4, i64 0, i32 1, i64 %62, i64 %74
  store double %103, ptr %104, align 8, !tbaa !39
  %105 = load double, ptr %70, align 8, !tbaa !39
  %106 = fcmp ogt double %89, %105
  %107 = zext i1 %106 to i32
  %108 = add nsw i32 %75, %107
  %109 = add nuw nsw i64 %74, 1
  %110 = icmp eq i64 %109, 3
  br i1 %110, label %47, label %73, !llvm.loop !583

111:                                              ; preds = %145, %54
  %112 = phi i32 [ %59, %54 ], [ %117, %145 ]
  %113 = phi i64 [ 0, %54 ], [ %115, %145 ]
  %114 = phi i32 [ %50, %54 ], [ %155, %145 ]
  %115 = add nuw nsw i64 %113, 1
  %116 = getelementptr inbounds [23 x i32], ptr @scalefac_band, i64 0, i64 %115
  %117 = load i32, ptr %116, align 4, !tbaa !11
  %118 = sub nsw i32 %117, %112
  %119 = icmp slt i32 %112, %117
  br i1 %119, label %120, label %132

120:                                              ; preds = %111
  %121 = sext i32 %112 to i64
  %122 = sext i32 %117 to i64
  br label %123

123:                                              ; preds = %123, %120
  %124 = phi i64 [ %121, %120 ], [ %130, %123 ]
  %125 = phi double [ 0.000000e+00, %120 ], [ %129, %123 ]
  %126 = getelementptr inbounds double, ptr %1, i64 %124
  %127 = load double, ptr %126, align 8, !tbaa !39
  %128 = fmul double %127, %127
  %129 = fadd double %125, %128
  %130 = add nsw i64 %124, 1
  %131 = icmp eq i64 %130, %122
  br i1 %131, label %132, label %123, !llvm.loop !584

132:                                              ; preds = %123, %111
  %133 = phi double [ 0.000000e+00, %111 ], [ %129, %123 ]
  %134 = sitofp i32 %118 to double
  %135 = fdiv double %133, %134
  %136 = getelementptr inbounds [22 x double], ptr %55, i64 0, i64 %113
  %137 = load double, ptr %136, align 8, !tbaa !39
  %138 = fcmp ogt double %137, 0.000000e+00
  br i1 %138, label %139, label %145

139:                                              ; preds = %132
  %140 = getelementptr inbounds [22 x double], ptr %2, i64 0, i64 %113
  %141 = load double, ptr %140, align 8, !tbaa !39
  %142 = fmul double %135, %141
  %143 = fmul double %142, %57
  %144 = fdiv double %143, %137
  br label %145

145:                                              ; preds = %139, %132
  %146 = phi double [ %144, %139 ], [ %137, %132 ]
  %147 = getelementptr inbounds [21 x double], ptr @ATH_l, i64 0, i64 %113
  %148 = load double, ptr %147, align 8, !tbaa !39
  %149 = fcmp ogt double %148, %146
  %150 = select i1 %149, double %148, double %146
  %151 = getelementptr inbounds [22 x double], ptr %4, i64 0, i64 %113
  store double %150, ptr %151, align 8, !tbaa !39
  %152 = load double, ptr %147, align 8, !tbaa !39
  %153 = fcmp ogt double %135, %152
  %154 = zext i1 %153 to i32
  %155 = add nsw i32 %114, %154
  %156 = icmp eq i64 %115, %58
  br i1 %156, label %157, label %111, !llvm.loop !585

157:                                              ; preds = %145, %49, %33, %18
  %158 = phi i32 [ %50, %49 ], [ 0, %18 ], [ %155, %145 ], [ 0, %33 ]
  ret i32 %158
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(argmem: read) uwtable
define internal i32 @loop_break(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #40 {
  %3 = getelementptr inbounds %struct.gr_info, ptr %1, i64 0, i32 16
  %4 = load i32, ptr %3, align 8, !tbaa !577
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %16, label %6

6:                                                ; preds = %2
  %7 = zext i32 %4 to i64
  br label %11

8:                                                ; preds = %11
  %9 = add nuw nsw i64 %12, 1
  %10 = icmp eq i64 %9, %7
  br i1 %10, label %16, label %11, !llvm.loop !586

11:                                               ; preds = %8, %6
  %12 = phi i64 [ 0, %6 ], [ %9, %8 ]
  %13 = getelementptr inbounds [22 x i32], ptr %0, i64 0, i64 %12
  %14 = load i32, ptr %13, align 4, !tbaa !11
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %35, label %8

16:                                               ; preds = %8, %2
  %17 = getelementptr inbounds %struct.gr_info, ptr %1, i64 0, i32 17
  %18 = load i32, ptr %17, align 4, !tbaa !576
  %19 = icmp ult i32 %18, 12
  br i1 %19, label %20, label %35

20:                                               ; preds = %16
  %21 = zext i32 %18 to i64
  br label %22

22:                                               ; preds = %32, %20
  %23 = phi i64 [ %21, %20 ], [ %33, %32 ]
  br label %27

24:                                               ; preds = %27
  %25 = add nuw nsw i64 %28, 1
  %26 = icmp eq i64 %25, 3
  br i1 %26, label %32, label %27, !llvm.loop !587

27:                                               ; preds = %24, %22
  %28 = phi i64 [ 0, %22 ], [ %25, %24 ]
  %29 = getelementptr inbounds %struct.III_scalefac_t, ptr %0, i64 0, i32 1, i64 %23, i64 %28
  %30 = load i32, ptr %29, align 4, !tbaa !11
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %35, label %24

32:                                               ; preds = %24
  %33 = add nuw nsw i64 %23, 1
  %34 = icmp eq i64 %33, 12
  br i1 %34, label %35, label %22, !llvm.loop !588

35:                                               ; preds = %32, %27, %16, %11
  %36 = phi i32 [ 1, %16 ], [ 0, %27 ], [ 1, %32 ], [ 0, %11 ]
  ret i32 %36
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @bin_search_StepSize2(ptr noundef %0, i32 noundef %1, i32 noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5) #4 {
  %7 = getelementptr inbounds %struct.gr_info, ptr %5, i64 0, i32 3
  br label %8

8:                                                ; preds = %32, %6
  %9 = phi i32 [ 0, %6 ], [ %33, %32 ]
  %10 = phi i32 [ %2, %6 ], [ %34, %32 ]
  %11 = phi i1 [ true, %6 ], [ %22, %32 ]
  %12 = phi i1 [ true, %6 ], [ %35, %32 ]
  store i32 %10, ptr %7, align 4, !tbaa !185
  %13 = tail call i32 @count_bits(ptr noundef %0, ptr noundef %3, ptr noundef %4, ptr noundef %5) #55
  %14 = load i32, ptr @bin_search_StepSize2.CurrentStep, align 4, !tbaa !11
  %15 = icmp eq i32 %14, 1
  br i1 %15, label %47, label %16

16:                                               ; preds = %8
  %17 = icmp ne i32 %9, 0
  br i1 %17, label %18, label %20

18:                                               ; preds = %16
  %19 = sdiv i32 %14, 2
  store i32 %19, ptr @bin_search_StepSize2.CurrentStep, align 4, !tbaa !11
  br label %20

20:                                               ; preds = %18, %16
  %21 = phi i32 [ %19, %18 ], [ %14, %16 ]
  %22 = icmp sle i32 %13, %1
  br i1 %22, label %36, label %23

23:                                               ; preds = %20
  %24 = or i1 %17, %12
  br i1 %24, label %27, label %25

25:                                               ; preds = %23
  %26 = sdiv i32 %21, 2
  store i32 %26, ptr @bin_search_StepSize2.CurrentStep, align 4, !tbaa !11
  br label %27

27:                                               ; preds = %25, %23
  %28 = phi i32 [ %21, %23 ], [ %26, %25 ]
  %29 = phi i32 [ %9, %23 ], [ 1, %25 ]
  %30 = add nsw i32 %28, %10
  %31 = icmp sgt i32 %30, 255
  br i1 %31, label %47, label %32

32:                                               ; preds = %42, %27
  %33 = phi i32 [ %29, %27 ], [ %44, %42 ]
  %34 = phi i32 [ %30, %27 ], [ %45, %42 ]
  %35 = xor i1 %22, true
  br label %8

36:                                               ; preds = %20
  %37 = icmp slt i32 %13, %1
  br i1 %37, label %38, label %47

38:                                               ; preds = %36
  %39 = or i1 %17, %11
  br i1 %39, label %42, label %40

40:                                               ; preds = %38
  %41 = sdiv i32 %21, 2
  store i32 %41, ptr @bin_search_StepSize2.CurrentStep, align 4, !tbaa !11
  br label %42

42:                                               ; preds = %40, %38
  %43 = phi i32 [ %21, %38 ], [ %41, %40 ]
  %44 = phi i32 [ %9, %38 ], [ 1, %40 ]
  %45 = sub nsw i32 %10, %43
  %46 = icmp slt i32 %45, 0
  br i1 %46, label %47, label %32

47:                                               ; preds = %42, %36, %27, %8
  %.lcssa = phi i32 [ %13, %42 ], [ %13, %36 ], [ %13, %27 ], [ %13, %8 ]
  %48 = phi i32 [ %10, %8 ], [ %30, %27 ], [ %45, %42 ], [ %10, %36 ]
  %49 = sub nsw i32 %2, %48
  %50 = tail call i32 @llvm.abs.i32(i32 %49, i1 true)
  %51 = icmp ult i32 %50, 4
  %52 = select i1 %51, i32 2, i32 4
  store i32 %52, ptr @bin_search_StepSize2.CurrentStep, align 4, !tbaa !11
  ret i32 %.lcssa
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @quantize_xrpow(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1, ptr nocapture noundef readonly %2) #41 {
  %4 = getelementptr inbounds %struct.gr_info, ptr %2, i64 0, i32 3
  %5 = load i32, ptr %4, align 4, !tbaa !185
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds [256 x double], ptr @ipow20, i64 0, i64 %6
  %8 = load double, ptr %7, align 8, !tbaa !39
  %9 = insertelement <4 x double> poison, double %8, i64 0
  %10 = shufflevector <4 x double> %9, <4 x double> poison, <4 x i32> zeroinitializer
  br label %11

11:                                               ; preds = %11, %3
  %12 = phi ptr [ %0, %3 ], [ %16, %11 ]
  %13 = phi ptr [ %1, %3 ], [ %46, %11 ]
  %14 = phi i32 [ 72, %3 ], [ %75, %11 ]
  %15 = getelementptr inbounds double, ptr %12, i64 4
  %16 = getelementptr inbounds double, ptr %12, i64 8
  %17 = getelementptr inbounds i32, ptr %13, i64 4
  %18 = load <4 x double>, ptr %12, align 8, !tbaa !39
  %19 = fmul <4 x double> %10, %18
  %20 = extractelement <4 x double> %19, i64 0
  %21 = fptosi double %20 to i32
  %22 = extractelement <4 x double> %19, i64 1
  %23 = fptosi double %22 to i32
  %24 = extractelement <4 x double> %19, i64 2
  %25 = fptosi double %24 to i32
  %26 = extractelement <4 x double> %19, i64 3
  %27 = fptosi double %26 to i32
  %28 = sext i32 %21 to i64
  %29 = getelementptr inbounds [8208 x double], ptr @adj43, i64 0, i64 %28
  %30 = load double, ptr %29, align 8, !tbaa !39
  %31 = sext i32 %23 to i64
  %32 = getelementptr inbounds [8208 x double], ptr @adj43, i64 0, i64 %31
  %33 = load double, ptr %32, align 8, !tbaa !39
  %34 = sext i32 %25 to i64
  %35 = getelementptr inbounds [8208 x double], ptr @adj43, i64 0, i64 %34
  %36 = load double, ptr %35, align 8, !tbaa !39
  %37 = sext i32 %27 to i64
  %38 = getelementptr inbounds [8208 x double], ptr @adj43, i64 0, i64 %37
  %39 = load double, ptr %38, align 8, !tbaa !39
  %40 = insertelement <4 x double> poison, double %30, i64 0
  %41 = insertelement <4 x double> %40, double %33, i64 1
  %42 = insertelement <4 x double> %41, double %36, i64 2
  %43 = insertelement <4 x double> %42, double %39, i64 3
  %44 = fadd <4 x double> %19, %43
  %45 = fptosi <4 x double> %44 to <4 x i32>
  store <4 x i32> %45, ptr %13, align 4, !tbaa !11
  %46 = getelementptr inbounds i32, ptr %13, i64 8
  %47 = load <4 x double>, ptr %15, align 8, !tbaa !39
  %48 = fmul <4 x double> %10, %47
  %49 = extractelement <4 x double> %48, i64 0
  %50 = fptosi double %49 to i32
  %51 = extractelement <4 x double> %48, i64 1
  %52 = fptosi double %51 to i32
  %53 = extractelement <4 x double> %48, i64 2
  %54 = fptosi double %53 to i32
  %55 = extractelement <4 x double> %48, i64 3
  %56 = fptosi double %55 to i32
  %57 = sext i32 %50 to i64
  %58 = getelementptr inbounds [8208 x double], ptr @adj43, i64 0, i64 %57
  %59 = load double, ptr %58, align 8, !tbaa !39
  %60 = sext i32 %52 to i64
  %61 = getelementptr inbounds [8208 x double], ptr @adj43, i64 0, i64 %60
  %62 = load double, ptr %61, align 8, !tbaa !39
  %63 = sext i32 %54 to i64
  %64 = getelementptr inbounds [8208 x double], ptr @adj43, i64 0, i64 %63
  %65 = load double, ptr %64, align 8, !tbaa !39
  %66 = sext i32 %56 to i64
  %67 = getelementptr inbounds [8208 x double], ptr @adj43, i64 0, i64 %66
  %68 = load double, ptr %67, align 8, !tbaa !39
  %69 = insertelement <4 x double> poison, double %59, i64 0
  %70 = insertelement <4 x double> %69, double %62, i64 1
  %71 = insertelement <4 x double> %70, double %65, i64 2
  %72 = insertelement <4 x double> %71, double %68, i64 3
  %73 = fadd <4 x double> %48, %72
  %74 = fptosi <4 x double> %73 to <4 x i32>
  store <4 x i32> %74, ptr %17, align 4, !tbaa !11
  %75 = add nsw i32 %14, -1
  %76 = icmp ugt i32 %14, 1
  br i1 %76, label %11, label %77, !llvm.loop !589

77:                                               ; preds = %11
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @quantize_xrpow_ISO(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1, ptr nocapture noundef readonly %2) #15 {
  %4 = getelementptr inbounds %struct.gr_info, ptr %2, i64 0, i32 3
  %5 = load i32, ptr %4, align 4, !tbaa !185
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds [256 x double], ptr @ipow20, i64 0, i64 %6
  %8 = load double, ptr %7, align 8, !tbaa !39
  %9 = fdiv double 5.946000e-01, %8
  %10 = insertelement <2 x double> poison, double %9, i64 0
  %11 = shufflevector <2 x double> %10, <2 x double> poison, <2 x i32> zeroinitializer
  %12 = insertelement <2 x double> poison, double %8, i64 0
  %13 = shufflevector <2 x double> %12, <2 x double> poison, <2 x i32> zeroinitializer
  br label %14

14:                                               ; preds = %14, %3
  %15 = phi i64 [ 0, %3 ], [ %25, %14 ]
  %16 = shl i64 %15, 3
  %17 = getelementptr i8, ptr %0, i64 %16
  %18 = shl i64 %15, 2
  %19 = getelementptr i8, ptr %1, i64 %18
  %20 = load <2 x double>, ptr %17, align 8, !tbaa !39
  %21 = fcmp ogt <2 x double> %11, %20
  %22 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %13, <2 x double> %20, <2 x double> <double 4.054000e-01, double 4.054000e-01>)
  %23 = fptosi <2 x double> %22 to <2 x i32>
  %24 = select <2 x i1> %21, <2 x i32> zeroinitializer, <2 x i32> %23
  store <2 x i32> %24, ptr %19, align 4, !tbaa !11
  %25 = add nuw i64 %15, 2
  %26 = icmp eq i64 %25, 576
  br i1 %26, label %27, label %14, !llvm.loop !590

27:                                               ; preds = %14
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @iteration_loop(ptr noundef %0, ptr noundef %1, ptr nocapture noundef readonly %2, ptr noundef %3, ptr noundef %4, ptr noundef %5, ptr noundef %6, ptr noundef %7) #4 {
  %9 = alloca [4 x double], align 16
  %10 = alloca [2 x %struct.III_psy_xmin], align 16
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca [2 x i32], align 4
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %9) #56
  call void @llvm.lifetime.start.p0(i64 976, ptr nonnull %10) #56
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %11) #56
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %12) #56
  tail call void @iteration_init(ptr noundef %0, ptr noundef %5, ptr noundef %6) #55
  call void @getframebits(ptr noundef %0, ptr noundef nonnull %11, ptr noundef nonnull %12) #55
  %14 = load i32, ptr %12, align 4, !tbaa !11
  %15 = load i32, ptr %11, align 4, !tbaa !11
  %16 = call i32 @ResvFrameBegin(ptr noundef %0, ptr noundef %5, i32 noundef %14, i32 noundef %15) #55
  %17 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 45
  %18 = load i32, ptr %17, align 8, !tbaa !136
  %19 = icmp sgt i32 %18, 0
  br i1 %19, label %20, label %96

20:                                               ; preds = %8
  %21 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 46
  %22 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 64
  br label %23

23:                                               ; preds = %91, %20
  %24 = phi i64 [ 0, %20 ], [ %92, %91 ]
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13) #56
  %25 = load i32, ptr @convert_mdct, align 4, !tbaa !11
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %29, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds [2 x [576 x double]], ptr %3, i64 %24
  call void @ms_convert(ptr noundef %28, ptr noundef %28) #55
  br label %29

29:                                               ; preds = %27, %23
  %30 = load i32, ptr %12, align 4, !tbaa !11
  %31 = trunc i64 %24 to i32
  call void @on_pe(ptr noundef nonnull %0, ptr noundef %1, ptr noundef %5, ptr noundef nonnull %13, i32 noundef %30, i32 noundef %31) #55
  %32 = load i32, ptr @reduce_sidechannel, align 4, !tbaa !11
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %38, label %34

34:                                               ; preds = %29
  %35 = getelementptr inbounds double, ptr %2, i64 %24
  %36 = load double, ptr %35, align 8, !tbaa !39
  %37 = load i32, ptr %12, align 4, !tbaa !11
  call void @reduce_side(ptr noundef nonnull %13, double noundef %36, i32 noundef %37) #55
  br label %38

38:                                               ; preds = %34, %29
  %39 = load i32, ptr %21, align 4, !tbaa !173
  %40 = icmp sgt i32 %39, 0
  br i1 %40, label %41, label %91

41:                                               ; preds = %38
  %42 = getelementptr inbounds %struct.III_side_info_t, ptr %5, i64 0, i32 4, i64 %24
  br label %43

43:                                               ; preds = %86, %41
  %44 = phi i64 [ 0, %41 ], [ %87, %86 ]
  %45 = getelementptr inbounds [2 x %struct.gr_info_ss], ptr %42, i64 0, i64 %44
  %46 = getelementptr inbounds [2 x [576 x double]], ptr %3, i64 %24, i64 %44
  %47 = call i32 @init_outer_loop(ptr noundef nonnull %0, ptr noundef %46, ptr noundef nonnull %45) #57
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %53

49:                                               ; preds = %43
  %50 = getelementptr inbounds [2 x %struct.III_scalefac_t], ptr %7, i64 %24, i64 %44
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(244) %50, i8 0, i64 244, i1 false)
  %51 = getelementptr inbounds [2 x [576 x i32]], ptr %6, i64 %24, i64 %44
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(2304) %51, i8 0, i64 2304, i1 false)
  %52 = trunc i64 %44 to i32
  br label %62

53:                                               ; preds = %43
  %54 = getelementptr inbounds [2 x %struct.III_psy_ratio], ptr %4, i64 %24, i64 %44
  %55 = getelementptr inbounds [2 x %struct.III_psy_xmin], ptr %10, i64 0, i64 %44
  %56 = call i32 @calc_xmin(ptr noundef nonnull %0, ptr noundef %46, ptr noundef %54, ptr noundef nonnull %45, ptr noundef nonnull %55) #55
  %57 = getelementptr inbounds [2 x i32], ptr %13, i64 0, i64 %44
  %58 = load i32, ptr %57, align 4, !tbaa !11
  %59 = getelementptr inbounds [2 x [576 x i32]], ptr %6, i64 %24, i64 %44
  %60 = getelementptr inbounds [2 x %struct.III_scalefac_t], ptr %7, i64 %24, i64 %44
  %61 = trunc i64 %44 to i32
  call void @outer_loop(ptr noundef nonnull %0, ptr noundef %46, i32 noundef %58, ptr noundef nonnull %9, ptr noundef nonnull %55, ptr noundef %59, ptr noundef %60, ptr noundef nonnull %45, ptr nonnull poison, i32 noundef %61) #57
  br label %62

62:                                               ; preds = %53, %49
  %63 = phi i32 [ %61, %53 ], [ %52, %49 ]
  call void @best_scalefac_store(ptr noundef nonnull %0, i32 noundef %31, i32 noundef %63, ptr noundef %6, ptr noundef %5, ptr noundef %7) #55
  %64 = load i32, ptr %22, align 4, !tbaa !275
  %65 = icmp eq i32 %64, 1
  br i1 %65, label %66, label %72

66:                                               ; preds = %62
  %67 = getelementptr inbounds %struct.gr_info, ptr %45, i64 0, i32 6
  %68 = load i32, ptr %67, align 8, !tbaa !188
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %72

70:                                               ; preds = %66
  %71 = getelementptr inbounds [2 x [576 x i32]], ptr %6, i64 %24, i64 %44
  call void @best_huffman_divide(i32 noundef %31, i32 noundef %63, ptr noundef nonnull %45, ptr noundef %71) #55
  br label %72

72:                                               ; preds = %70, %66, %62
  %73 = load i32, ptr %12, align 4, !tbaa !11
  call void @ResvAdjust(ptr noundef nonnull %0, ptr noundef nonnull %45, ptr noundef %5, i32 noundef %73) #55
  br label %74

74:                                               ; preds = %83, %72
  %75 = phi i64 [ 0, %72 ], [ %84, %83 ]
  %76 = getelementptr inbounds [2 x [576 x double]], ptr %3, i64 %24, i64 %44, i64 %75
  %77 = load double, ptr %76, align 8, !tbaa !39
  %78 = fcmp olt double %77, 0.000000e+00
  br i1 %78, label %79, label %83

79:                                               ; preds = %74
  %80 = getelementptr inbounds [2 x [576 x i32]], ptr %6, i64 %24, i64 %44, i64 %75
  %81 = load i32, ptr %80, align 4, !tbaa !11
  %82 = sub nsw i32 0, %81
  store i32 %82, ptr %80, align 4, !tbaa !11
  br label %83

83:                                               ; preds = %79, %74
  %84 = add nuw nsw i64 %75, 1
  %85 = icmp eq i64 %84, 576
  br i1 %85, label %86, label %74, !llvm.loop !591

86:                                               ; preds = %83
  %87 = add nuw nsw i64 %44, 1
  %88 = load i32, ptr %21, align 4, !tbaa !173
  %89 = sext i32 %88 to i64
  %90 = icmp slt i64 %87, %89
  br i1 %90, label %43, label %91, !llvm.loop !592

91:                                               ; preds = %86, %38
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13) #56
  %92 = add nuw nsw i64 %24, 1
  %93 = load i32, ptr %17, align 8, !tbaa !136
  %94 = sext i32 %93 to i64
  %95 = icmp slt i64 %92, %94
  br i1 %95, label %23, label %96, !llvm.loop !593

96:                                               ; preds = %91, %8
  %97 = load i32, ptr %12, align 4, !tbaa !11
  call void @ResvFrameEnd(ptr noundef nonnull %0, ptr noundef %5, i32 noundef %97) #55
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %12) #56
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %11) #56
  call void @llvm.lifetime.end.p0(i64 976, ptr nonnull %10) #56
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %9) #56
  ret void
}

; Function Attrs: nofree nounwind optsize memory(write, argmem: readwrite) uwtable
define internal i32 @init_outer_loop(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef %2) #42 {
  %4 = alloca [3 x double], align 16
  %5 = getelementptr i8, ptr %2, i64 104
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %5, i8 0, i64 16, i1 false), !tbaa !11
  %6 = getelementptr inbounds %struct.gr_info, ptr %2, i64 0, i32 19
  store ptr @nr_of_sfb_block, ptr %6, align 8, !tbaa !218
  %7 = getelementptr inbounds %struct.gr_info, ptr %2, i64 0, i32 4
  store i32 0, ptr %7, align 8, !tbaa !186
  %8 = getelementptr inbounds %struct.gr_info, ptr %2, i64 0, i32 8
  %9 = getelementptr inbounds %struct.gr_info, ptr %2, i64 0, i32 15
  store i32 0, ptr %9, align 4, !tbaa !237
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %8, i8 0, i64 40, i1 false)
  store <4 x i32> <i32 0, i32 0, i32 0, i32 210>, ptr %2, align 8, !tbaa !11
  %10 = getelementptr inbounds %struct.gr_info, ptr %2, i64 0, i32 14
  store i32 0, ptr %10, align 8, !tbaa !197
  %11 = getelementptr inbounds %struct.gr_info, ptr %2, i64 0, i32 18
  store i32 0, ptr %11, align 8, !tbaa !594
  %12 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 20
  %13 = load i32, ptr %12, align 4, !tbaa !474
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %16

15:                                               ; preds = %21, %3
  br label %86

16:                                               ; preds = %3
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %4) #56
  %17 = getelementptr inbounds %struct.gr_info, ptr %2, i64 0, i32 6
  %18 = load i32, ptr %17, align 8, !tbaa !188
  %19 = icmp eq i32 %18, 2
  br i1 %19, label %20, label %21

20:                                               ; preds = %16
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(24) %4, i8 0, i64 24, i1 false), !tbaa !39
  br label %22

21:                                               ; preds = %16
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %4) #56
  br label %15

22:                                               ; preds = %38, %20
  %23 = phi i32 [ %39, %38 ], [ 0, %20 ]
  %24 = phi i64 [ %.lcssa1, %38 ], [ 0, %20 ]
  %25 = shl i64 %24, 32
  %26 = ashr exact i64 %25, 32
  br label %27

27:                                               ; preds = %27, %22
  %28 = phi i64 [ %26, %22 ], [ %35, %27 ]
  %29 = phi i64 [ 0, %22 ], [ %36, %27 ]
  %30 = getelementptr inbounds double, ptr %1, i64 %28
  %31 = load double, ptr %30, align 8, !tbaa !39
  %32 = getelementptr inbounds [3 x double], ptr %4, i64 0, i64 %29
  %33 = load double, ptr %32, align 8, !tbaa !39
  %34 = tail call double @llvm.fmuladd.f64(double %31, double %31, double %33)
  store double %34, ptr %32, align 8, !tbaa !39
  %35 = add nsw i64 %28, 1
  %36 = add nuw nsw i64 %29, 1
  %37 = icmp eq i64 %36, 3
  br i1 %37, label %38, label %27, !llvm.loop !595

38:                                               ; preds = %27
  %.lcssa1 = phi i64 [ %35, %27 ]
  %39 = add nuw nsw i32 %23, 1
  %40 = icmp eq i32 %39, 192
  br i1 %40, label %41, label %22, !llvm.loop !596

41:                                               ; preds = %41, %38
  %42 = phi i64 [ %48, %41 ], [ 0, %38 ]
  %43 = phi double [ %47, %41 ], [ 0x3D719799812DEA11, %38 ]
  %44 = getelementptr inbounds [3 x double], ptr %4, i64 0, i64 %42
  %45 = load double, ptr %44, align 8, !tbaa !39
  %46 = fcmp ogt double %43, %45
  %47 = select i1 %46, double %43, double %45
  %48 = add nuw nsw i64 %42, 1
  %49 = icmp eq i64 %48, 3
  br i1 %49, label %50, label %41, !llvm.loop !597

50:                                               ; preds = %50, %41
  %.lcssa = phi double [ %.lcssa, %50 ], [ %47, %41 ]
  %51 = phi i64 [ %57, %50 ], [ 0, %41 ]
  %52 = getelementptr inbounds [3 x double], ptr %4, i64 0, i64 %51
  %53 = load double, ptr %52, align 8, !tbaa !39
  %54 = fcmp ogt double %53, 0x3D719799812DEA11
  %55 = select i1 %54, double %53, double 0x3D719799812DEA11
  %56 = fdiv double %55, %.lcssa
  store double %56, ptr %52, align 8, !tbaa !39
  %57 = add nuw nsw i64 %51, 1
  %58 = icmp eq i64 %57, 3
  br i1 %58, label %59, label %50, !llvm.loop !598

59:                                               ; preds = %59, %50
  %60 = phi i64 [ %71, %59 ], [ 0, %50 ]
  %61 = getelementptr inbounds [3 x double], ptr %4, i64 0, i64 %60
  %62 = load double, ptr %61, align 8, !tbaa !39
  %63 = tail call double @log(double noundef %62) #55
  %64 = fmul double %63, 5.000000e-01
  %65 = fdiv double %64, 0x3FE62E42FEFA39EF
  %66 = fsub double 5.000000e-01, %65
  %67 = fptosi double %66 to i32
  %68 = getelementptr inbounds %struct.gr_info, ptr %2, i64 0, i32 9, i64 %60
  %69 = tail call i32 @llvm.smin.i32(i32 %67, i32 2)
  %70 = tail call i32 @llvm.smax.i32(i32 %69, i32 0)
  store i32 %70, ptr %68, align 4, !tbaa !11
  %71 = add nuw nsw i64 %60, 1
  %72 = icmp eq i64 %71, 3
  br i1 %72, label %73, label %59, !llvm.loop !599

73:                                               ; preds = %59
  %74 = load double, ptr %4, align 16, !tbaa !39
  %75 = getelementptr inbounds [3 x double], ptr %4, i64 0, i64 1
  %76 = load double, ptr %75, align 8, !tbaa !39
  %77 = fadd double %74, %76
  %78 = getelementptr inbounds [3 x double], ptr %4, i64 0, i64 2
  %79 = load double, ptr %78, align 16, !tbaa !39
  %80 = fadd double %77, %79
  %81 = fcmp ogt double %80, 1.000000e-99
  %82 = zext i1 %81 to i32
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %4) #56
  br label %92

83:                                               ; preds = %86
  %84 = add nuw nsw i64 %87, 1
  %85 = icmp eq i64 %84, 576
  br i1 %85, label %92, label %86, !llvm.loop !600

86:                                               ; preds = %83, %15
  %87 = phi i64 [ %84, %83 ], [ 0, %15 ]
  %88 = getelementptr inbounds double, ptr %1, i64 %87
  %89 = load double, ptr %88, align 8, !tbaa !39
  %90 = tail call double @llvm.fabs.f64(double %89)
  %91 = fcmp ogt double %90, 1.000000e-99
  br i1 %91, label %92, label %83

92:                                               ; preds = %86, %83, %73
  %93 = phi i32 [ %82, %73 ], [ 0, %83 ], [ 1, %86 ]
  ret i32 %93
}

; Function Attrs: nounwind optsize uwtable
define internal void @outer_loop(ptr noundef %0, ptr nocapture noundef readonly %1, i32 noundef %2, ptr nocapture noundef writeonly %3, ptr nocapture noundef readonly %4, ptr nocapture noundef writeonly %5, ptr nocapture noundef writeonly %6, ptr noundef %7, ptr nocapture readnone %8, i32 noundef %9) #4 {
  %11 = alloca %struct.III_scalefac_t, align 4
  %12 = alloca %struct.gr_info, align 8
  %13 = alloca [576 x i32], align 16
  %14 = alloca [576 x double], align 16
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca double, align 8
  %18 = alloca [4 x [21 x double]], align 16
  %19 = alloca [4 x [21 x double]], align 16
  call void @llvm.lifetime.start.p0(i64 244, ptr nonnull %11) #56
  call void @llvm.lifetime.start.p0(i64 120, ptr nonnull %12)
  call void @llvm.lifetime.start.p0(i64 2304, ptr nonnull %13) #56
  call void @llvm.lifetime.start.p0(i64 4608, ptr nonnull %14) #56
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %15) #56
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %16) #56
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %17) #56
  call void @llvm.lifetime.start.p0(i64 672, ptr nonnull %18) #56
  call void @llvm.lifetime.start.p0(i64 672, ptr nonnull %19) #56
  %20 = sext i32 %9 to i64
  %21 = getelementptr inbounds [2 x i32], ptr @outer_loop.OldValue, i64 0, i64 %20
  %22 = getelementptr inbounds %struct.gr_info, ptr %7, i64 0, i32 3
  %23 = getelementptr inbounds %struct.gr_info, ptr %7, i64 0, i32 15
  %24 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 61
  %25 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 18
  %26 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 62
  %27 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 43
  %28 = getelementptr inbounds %struct.gr_info, ptr %7, i64 0, i32 13
  %29 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 19
  br label %30

30:                                               ; preds = %127, %10
  %31 = phi double [ undef, %10 ], [ %83, %127 ]
  %32 = phi double [ undef, %10 ], [ %84, %127 ]
  %33 = phi double [ undef, %10 ], [ %85, %127 ]
  %34 = phi i32 [ 1, %10 ], [ %128, %127 ]
  %35 = phi double [ 0.000000e+00, %10 ], [ %96, %127 ]
  %36 = phi double [ 0.000000e+00, %10 ], [ %95, %127 ]
  %37 = phi double [ 0.000000e+00, %10 ], [ %94, %127 ]
  %38 = phi i32 [ 100, %10 ], [ %93, %127 ]
  %39 = phi i32 [ 0, %10 ], [ %41, %127 ]
  %40 = phi i32 [ 0, %10 ], [ %60, %127 ]
  %41 = add nuw nsw i32 %39, 1
  %42 = icmp eq i32 %34, 0
  br i1 %42, label %59, label %43

43:                                               ; preds = %30
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(244) %11, i8 0, i64 244, i1 false)
  br label %44

44:                                               ; preds = %44, %43
  %45 = phi i64 [ 0, %43 ], [ %53, %44 ]
  %46 = getelementptr inbounds double, ptr %1, i64 %45
  %47 = load double, ptr %46, align 8, !tbaa !39
  %48 = call double @llvm.fabs.f64(double %47)
  %49 = call double @llvm.sqrt.f64(double %48)
  %50 = fmul double %48, %49
  %51 = call double @sqrt(double noundef %50) #55
  %52 = getelementptr inbounds [576 x double], ptr %14, i64 0, i64 %45
  store double %51, ptr %52, align 8, !tbaa !39
  %53 = add nuw nsw i64 %45, 1
  %54 = icmp eq i64 %53, 576
  br i1 %54, label %55, label %44, !llvm.loop !601

55:                                               ; preds = %44
  %56 = load i32, ptr %21, align 4, !tbaa !11
  %57 = call i32 @bin_search_StepSize2(ptr noundef %0, i32 noundef %2, i32 noundef %56, ptr noundef nonnull %13, ptr noundef nonnull %14, ptr noundef %7) #55
  %58 = load i32, ptr %22, align 4, !tbaa !185
  store i32 %58, ptr %21, align 4, !tbaa !11
  br label %59

59:                                               ; preds = %55, %30
  %60 = phi i32 [ %57, %55 ], [ %40, %30 ]
  %61 = load i32, ptr %23, align 4, !tbaa !237
  %62 = sub i32 %2, %61
  %63 = icmp slt i32 %62, 0
  br i1 %63, label %131, label %64

64:                                               ; preds = %59
  %65 = icmp eq i32 %39, 0
  br i1 %65, label %66, label %71

66:                                               ; preds = %64
  %67 = icmp sgt i32 %60, %62
  br i1 %67, label %68, label %73

68:                                               ; preds = %66
  %69 = load i32, ptr %22, align 4, !tbaa !185
  %70 = add i32 %69, 1
  store i32 %70, ptr %22, align 4, !tbaa !185
  br label %71

71:                                               ; preds = %68, %64
  %72 = call i32 @inner_loop(ptr noundef %0, ptr noundef nonnull %14, ptr noundef nonnull %13, i32 noundef %62, ptr noundef nonnull %7) #55
  br label %73

73:                                               ; preds = %71, %66
  %74 = phi i32 [ %60, %66 ], [ %72, %71 ]
  store i32 %74, ptr %7, align 8, !tbaa !182
  %75 = load i32, ptr %24, align 8, !tbaa !602
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %82, label %77

77:                                               ; preds = %73
  %78 = call i32 @calc_noise1(ptr noundef %1, ptr noundef nonnull %13, ptr noundef nonnull %7, ptr noundef nonnull %18, ptr noundef nonnull %19, ptr noundef %4, ptr noundef nonnull %11, ptr noundef nonnull %16, ptr noundef nonnull %17, ptr noundef nonnull %15) #57
  %79 = load double, ptr %15, align 8, !tbaa !39
  %80 = load double, ptr %16, align 8, !tbaa !39
  %81 = load double, ptr %17, align 8, !tbaa !39
  br label %82

82:                                               ; preds = %77, %73
  %83 = phi double [ %81, %77 ], [ %31, %73 ]
  %84 = phi double [ %80, %77 ], [ %32, %73 ]
  %85 = phi double [ %79, %77 ], [ %33, %73 ]
  %86 = phi i32 [ %78, %77 ], [ 0, %73 ]
  br i1 %65, label %91, label %87

87:                                               ; preds = %82
  %88 = load i32, ptr %25, align 4, !tbaa !472
  %89 = call i32 @quant_compare(i32 noundef %88, i32 noundef %38, double noundef %35, double noundef %36, double noundef %37, i32 noundef %86, double noundef %83, double noundef %84, double noundef %85) #57, !range !371
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %92, label %91

91:                                               ; preds = %87, %82
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(244) %6, ptr noundef nonnull align 4 dereferenceable(244) %11, i64 244, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(2304) %5, ptr noundef nonnull align 16 dereferenceable(2304) %13, i64 2304, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(120) %12, ptr noundef nonnull align 8 dereferenceable(120) %7, i64 120, i1 false)
  br label %92

92:                                               ; preds = %91, %87
  %93 = phi i32 [ %86, %91 ], [ %38, %87 ]
  %94 = phi double [ %85, %91 ], [ %37, %87 ]
  %95 = phi double [ %84, %91 ], [ %36, %87 ]
  %96 = phi double [ %83, %91 ], [ %35, %87 ]
  %97 = load i32, ptr %26, align 4, !tbaa !603
  %98 = icmp eq i32 %97, 0
  %99 = icmp eq i32 %86, 0
  %100 = select i1 %98, i1 %99, i1 false
  %101 = or i1 %63, %100
  br i1 %101, label %131, label %102

102:                                              ; preds = %92
  call void @amp_scalefac_bands(ptr noundef nonnull %14, ptr noundef nonnull %7, ptr noundef nonnull %11, ptr noundef nonnull %19) #57
  %103 = call i32 @loop_break(ptr noundef nonnull %11, ptr noundef nonnull %7) #55
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %105, label %118

105:                                              ; preds = %102
  %106 = load i32, ptr %27, align 8, !tbaa !162
  %107 = icmp eq i32 %106, 1
  br i1 %107, label %108, label %110

108:                                              ; preds = %105
  %109 = call i32 @scale_bitcount(ptr noundef nonnull %11, ptr noundef nonnull %7) #55
  br label %112

110:                                              ; preds = %105
  %111 = call i32 @scale_bitcount_lsf(ptr noundef nonnull %11, ptr noundef nonnull %7) #55
  br label %112

112:                                              ; preds = %110, %108
  %113 = phi i32 [ %109, %108 ], [ %111, %110 ]
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %118, label %115

115:                                              ; preds = %112
  %116 = load i32, ptr %28, align 4, !tbaa !196
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %122, label %118

118:                                              ; preds = %115, %112, %102
  %119 = phi i32 [ 1, %115 ], [ %103, %102 ], [ 0, %112 ]
  %120 = icmp eq i32 %119, 0
  %121 = zext i1 %120 to i32
  br label %127

122:                                              ; preds = %115
  %123 = load i32, ptr %29, align 8, !tbaa !473
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %131, label %125

125:                                              ; preds = %122
  %126 = call i32 @init_outer_loop(ptr noundef nonnull %0, ptr noundef %1, ptr noundef nonnull %7) #57
  store i32 1, ptr %28, align 4, !tbaa !196
  br label %127

127:                                              ; preds = %125, %118
  %128 = phi i32 [ 1, %125 ], [ 0, %118 ]
  %129 = phi i32 [ 1, %125 ], [ %121, %118 ]
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %131, label %30, !llvm.loop !604

131:                                              ; preds = %127, %122, %92, %59
  %132 = phi i32 [ %93, %127 ], [ %93, %92 ], [ %93, %122 ], [ %38, %59 ]
  %133 = phi double [ %94, %127 ], [ %94, %92 ], [ %94, %122 ], [ %37, %59 ]
  %134 = phi double [ %95, %127 ], [ %95, %92 ], [ %95, %122 ], [ %36, %59 ]
  %135 = phi double [ %96, %127 ], [ %96, %92 ], [ %96, %122 ], [ %35, %59 ]
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(120) %7, ptr noundef nonnull align 8 dereferenceable(120) %12, i64 120, i1 false)
  %136 = load i32, ptr %23, align 4, !tbaa !237
  %137 = load i32, ptr %7, align 8, !tbaa !182
  %138 = add i32 %137, %136
  store i32 %138, ptr %7, align 8, !tbaa !182
  %139 = sitofp i32 %132 to double
  store double %139, ptr %3, align 8, !tbaa !39
  %140 = getelementptr inbounds double, ptr %3, i64 1
  store double %133, ptr %140, align 8, !tbaa !39
  %141 = getelementptr inbounds double, ptr %3, i64 2
  store double %134, ptr %141, align 8, !tbaa !39
  %142 = getelementptr inbounds double, ptr %3, i64 3
  store double %135, ptr %142, align 8, !tbaa !39
  call void @llvm.lifetime.end.p0(i64 672, ptr nonnull %19) #56
  call void @llvm.lifetime.end.p0(i64 672, ptr nonnull %18) #56
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17) #56
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %16) #56
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %15) #56
  call void @llvm.lifetime.end.p0(i64 4608, ptr nonnull %14) #56
  call void @llvm.lifetime.end.p0(i64 2304, ptr nonnull %13) #56
  call void @llvm.lifetime.end.p0(i64 120, ptr nonnull %12)
  call void @llvm.lifetime.end.p0(i64 244, ptr nonnull %11) #56
  ret void
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write)
declare double @sqrt(double noundef) local_unnamed_addr #18

; Function Attrs: nofree nounwind optsize memory(readwrite, inaccessiblemem: write) uwtable
define internal i32 @calc_noise1(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr nocapture noundef writeonly %3, ptr nocapture noundef writeonly %4, ptr nocapture noundef readonly %5, ptr nocapture noundef readonly %6, ptr nocapture noundef %7, ptr nocapture noundef %8, ptr nocapture noundef %9) #33 {
  store double 0.000000e+00, ptr %7, align 8, !tbaa !39
  store double 0.000000e+00, ptr %8, align 8, !tbaa !39
  store double -9.990000e+02, ptr %9, align 8, !tbaa !39
  %11 = getelementptr inbounds %struct.gr_info, ptr %2, i64 0, i32 16
  %12 = load i32, ptr %11, align 8, !tbaa !577
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.gr_info, ptr %2, i64 0, i32 12
  %16 = getelementptr inbounds %struct.gr_info, ptr %2, i64 0, i32 3
  %17 = getelementptr inbounds %struct.gr_info, ptr %2, i64 0, i32 13
  br label %26

18:                                               ; preds = %91
  %.lcssa4 = phi i32 [ %92, %91 ]
  %.lcssa3 = phi i64 [ %49, %91 ]
  %19 = trunc i64 %.lcssa3 to i32
  br label %20

20:                                               ; preds = %18, %10
  %21 = phi i32 [ 0, %10 ], [ %.lcssa4, %18 ]
  %22 = phi i32 [ 0, %10 ], [ %19, %18 ]
  %23 = getelementptr inbounds %struct.gr_info, ptr %2, i64 0, i32 17
  %24 = getelementptr inbounds %struct.gr_info, ptr %2, i64 0, i32 13
  %25 = getelementptr inbounds %struct.gr_info, ptr %2, i64 0, i32 3
  br label %101

26:                                               ; preds = %91, %14
  %27 = phi i64 [ 0, %14 ], [ %49, %91 ]
  %28 = phi i32 [ 0, %14 ], [ %92, %91 ]
  %29 = getelementptr inbounds [22 x i32], ptr %6, i64 0, i64 %27
  %30 = load i32, ptr %29, align 4, !tbaa !11
  %31 = load i32, ptr %15, align 8, !tbaa !195
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %37, label %33

33:                                               ; preds = %26
  %34 = getelementptr inbounds [21 x i32], ptr @pretab, i64 0, i64 %27
  %35 = load i32, ptr %34, align 4, !tbaa !11
  %36 = add nsw i32 %35, %30
  br label %37

37:                                               ; preds = %33, %26
  %38 = phi i32 [ %36, %33 ], [ %30, %26 ]
  %39 = load i32, ptr %16, align 4, !tbaa !185
  %40 = load i32, ptr %17, align 4, !tbaa !196
  %41 = add i32 %40, 1
  %42 = shl i32 %38, %41
  %43 = sub i32 %39, %42
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds [256 x double], ptr @pow20, i64 0, i64 %44
  %46 = load double, ptr %45, align 8, !tbaa !39
  %47 = getelementptr inbounds [23 x i32], ptr @scalefac_band, i64 0, i64 %27
  %48 = load i32, ptr %47, align 4, !tbaa !11
  %49 = add nuw nsw i64 %27, 1
  %50 = getelementptr inbounds [23 x i32], ptr @scalefac_band, i64 0, i64 %49
  %51 = load i32, ptr %50, align 4, !tbaa !11
  %52 = sub nsw i32 %51, %48
  %53 = sitofp i32 %52 to double
  %54 = icmp slt i32 %48, %51
  br i1 %54, label %55, label %74

55:                                               ; preds = %37
  %56 = sext i32 %48 to i64
  %57 = sext i32 %51 to i64
  br label %58

58:                                               ; preds = %58, %55
  %59 = phi i64 [ %56, %55 ], [ %72, %58 ]
  %60 = phi double [ 0.000000e+00, %55 ], [ %71, %58 ]
  %61 = getelementptr inbounds double, ptr %0, i64 %59
  %62 = load double, ptr %61, align 8, !tbaa !39
  %63 = tail call double @llvm.fabs.f64(double %62)
  %64 = getelementptr inbounds i32, ptr %1, i64 %59
  %65 = load i32, ptr %64, align 4, !tbaa !11
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds [8208 x double], ptr @pow43, i64 0, i64 %66
  %68 = load double, ptr %67, align 8, !tbaa !39
  %69 = fneg double %68
  %70 = tail call double @llvm.fmuladd.f64(double %69, double %46, double %63)
  %71 = tail call double @llvm.fmuladd.f64(double %70, double %70, double %60)
  %72 = add nsw i64 %59, 1
  %73 = icmp eq i64 %72, %57
  br i1 %73, label %74, label %58, !llvm.loop !605

74:                                               ; preds = %58, %37
  %75 = phi double [ 0.000000e+00, %37 ], [ %71, %58 ]
  %76 = fdiv double %75, %53
  %77 = getelementptr inbounds [21 x double], ptr %3, i64 0, i64 %27
  store double %76, ptr %77, align 8, !tbaa !39
  %78 = getelementptr inbounds [22 x double], ptr %5, i64 0, i64 %27
  %79 = load double, ptr %78, align 8, !tbaa !39
  %80 = fdiv double %76, %79
  %81 = fcmp olt double %80, 1.000000e-03
  %82 = select i1 %81, double 1.000000e-03, double %80
  %83 = tail call double @log10(double noundef %82) #55
  %84 = fmul double %83, 1.000000e+01
  %85 = getelementptr inbounds [21 x double], ptr %4, i64 0, i64 %27
  store double %84, ptr %85, align 8, !tbaa !39
  %86 = fcmp ogt double %84, 0.000000e+00
  br i1 %86, label %87, label %91

87:                                               ; preds = %74
  %88 = add nsw i32 %28, 1
  %89 = load double, ptr %7, align 8, !tbaa !39
  %90 = fadd double %84, %89
  store double %90, ptr %7, align 8, !tbaa !39
  br label %91

91:                                               ; preds = %87, %74
  %92 = phi i32 [ %88, %87 ], [ %28, %74 ]
  %93 = load double, ptr %8, align 8, !tbaa !39
  %94 = fadd double %84, %93
  store double %94, ptr %8, align 8, !tbaa !39
  %95 = load double, ptr %9, align 8, !tbaa !39
  %96 = fcmp ogt double %95, %84
  %97 = select i1 %96, double %95, double %84
  store double %97, ptr %9, align 8, !tbaa !39
  %98 = load i32, ptr %11, align 8, !tbaa !577
  %99 = zext i32 %98 to i64
  %100 = icmp ult i64 %49, %99
  br i1 %100, label %26, label %18, !llvm.loop !606

101:                                              ; preds = %186, %20
  %102 = phi i64 [ 0, %20 ], [ %187, %186 ]
  %103 = phi i32 [ %22, %20 ], [ %189, %186 ]
  %104 = phi i32 [ %21, %20 ], [ %188, %186 ]
  %105 = load i32, ptr %23, align 4, !tbaa !576
  %106 = icmp ult i32 %105, 12
  br i1 %106, label %109, label %107

107:                                              ; preds = %101
  %108 = add nuw nsw i64 %102, 1
  br label %186

109:                                              ; preds = %101
  %110 = getelementptr inbounds %struct.gr_info, ptr %2, i64 0, i32 9, i64 %102
  %111 = add nuw nsw i64 %102, 1
  %112 = zext i32 %105 to i64
  %113 = add i32 %103, 12
  br label %114

114:                                              ; preds = %176, %109
  %115 = phi i64 [ %112, %109 ], [ %132, %176 ]
  %116 = phi i32 [ %104, %109 ], [ %177, %176 ]
  %117 = getelementptr inbounds %struct.III_scalefac_t, ptr %6, i64 0, i32 1, i64 %115, i64 %102
  %118 = load i32, ptr %117, align 4, !tbaa !11
  %119 = load i32, ptr %24, align 4, !tbaa !196
  %120 = add i32 %119, 1
  %121 = shl i32 %118, %120
  %122 = load i32, ptr %110, align 4, !tbaa !11
  %123 = load i32, ptr %25, align 4, !tbaa !185
  %124 = mul i32 %122, -8
  %125 = sub i32 %124, %121
  %126 = add i32 %125, %123
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds [256 x double], ptr @pow20, i64 0, i64 %127
  %129 = load double, ptr %128, align 8, !tbaa !39
  %130 = getelementptr inbounds %struct.scalefac_struct, ptr @scalefac_band, i64 0, i32 1, i64 %115
  %131 = load i32, ptr %130, align 4, !tbaa !11
  %132 = add nuw nsw i64 %115, 1
  %133 = getelementptr inbounds %struct.scalefac_struct, ptr @scalefac_band, i64 0, i32 1, i64 %132
  %134 = load i32, ptr %133, align 4, !tbaa !11
  %135 = sub nsw i32 %134, %131
  %136 = sitofp i32 %135 to double
  %137 = icmp slt i32 %131, %134
  br i1 %137, label %138, label %159

138:                                              ; preds = %114
  %139 = sext i32 %131 to i64
  %140 = sext i32 %134 to i64
  br label %141

141:                                              ; preds = %141, %138
  %142 = phi i64 [ %139, %138 ], [ %157, %141 ]
  %143 = phi double [ 0.000000e+00, %138 ], [ %156, %141 ]
  %144 = mul nsw i64 %142, 3
  %145 = add nsw i64 %144, %102
  %146 = getelementptr inbounds double, ptr %0, i64 %145
  %147 = load double, ptr %146, align 8, !tbaa !39
  %148 = tail call double @llvm.fabs.f64(double %147)
  %149 = getelementptr inbounds i32, ptr %1, i64 %145
  %150 = load i32, ptr %149, align 4, !tbaa !11
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds [8208 x double], ptr @pow43, i64 0, i64 %151
  %153 = load double, ptr %152, align 8, !tbaa !39
  %154 = fneg double %153
  %155 = tail call double @llvm.fmuladd.f64(double %154, double %129, double %148)
  %156 = tail call double @llvm.fmuladd.f64(double %155, double %155, double %143)
  %157 = add nsw i64 %142, 1
  %158 = icmp eq i64 %157, %140
  br i1 %158, label %159, label %141, !llvm.loop !607

159:                                              ; preds = %141, %114
  %160 = phi double [ 0.000000e+00, %114 ], [ %156, %141 ]
  %161 = fdiv double %160, %136
  %162 = getelementptr inbounds [21 x double], ptr %3, i64 %111, i64 %115
  store double %161, ptr %162, align 8, !tbaa !39
  %163 = getelementptr inbounds %struct.III_psy_xmin, ptr %5, i64 0, i32 1, i64 %115, i64 %102
  %164 = load double, ptr %163, align 8, !tbaa !39
  %165 = fdiv double %161, %164
  %166 = fcmp olt double %165, 1.000000e-03
  %167 = select i1 %166, double 1.000000e-03, double %165
  %168 = tail call double @log10(double noundef %167) #55
  %169 = fmul double %168, 1.000000e+01
  %170 = getelementptr inbounds [21 x double], ptr %4, i64 %111, i64 %115
  store double %169, ptr %170, align 8, !tbaa !39
  %171 = fcmp ogt double %169, 0.000000e+00
  br i1 %171, label %172, label %176

172:                                              ; preds = %159
  %173 = add nsw i32 %116, 1
  %174 = load double, ptr %7, align 8, !tbaa !39
  %175 = fadd double %169, %174
  store double %175, ptr %7, align 8, !tbaa !39
  br label %176

176:                                              ; preds = %172, %159
  %177 = phi i32 [ %173, %172 ], [ %116, %159 ]
  %178 = load double, ptr %8, align 8, !tbaa !39
  %179 = fadd double %169, %178
  store double %179, ptr %8, align 8, !tbaa !39
  %180 = load double, ptr %9, align 8, !tbaa !39
  %181 = fcmp ogt double %180, %169
  %182 = select i1 %181, double %180, double %169
  store double %182, ptr %9, align 8, !tbaa !39
  %183 = icmp eq i64 %132, 12
  br i1 %183, label %184, label %114, !llvm.loop !608

184:                                              ; preds = %176
  %.lcssa = phi i32 [ %177, %176 ]
  %185 = sub i32 %113, %105
  br label %186

186:                                              ; preds = %184, %107
  %187 = phi i64 [ %108, %107 ], [ %111, %184 ]
  %188 = phi i32 [ %104, %107 ], [ %.lcssa, %184 ]
  %189 = phi i32 [ %103, %107 ], [ %185, %184 ]
  %190 = icmp eq i64 %187, 3
  br i1 %190, label %191, label %101, !llvm.loop !609

191:                                              ; preds = %186
  %.lcssa2 = phi i32 [ %188, %186 ]
  %.lcssa1 = phi i32 [ %189, %186 ]
  %192 = icmp sgt i32 %.lcssa1, 1
  br i1 %192, label %193, label %197

193:                                              ; preds = %191
  %194 = sitofp i32 %.lcssa1 to double
  %195 = load double, ptr %8, align 8, !tbaa !39
  %196 = fdiv double %195, %194
  store double %196, ptr %8, align 8, !tbaa !39
  br label %197

197:                                              ; preds = %193, %191
  %198 = icmp sgt i32 %.lcssa2, 1
  br i1 %198, label %199, label %203

199:                                              ; preds = %197
  %200 = sitofp i32 %.lcssa2 to double
  %201 = load double, ptr %7, align 8, !tbaa !39
  %202 = fdiv double %201, %200
  store double %202, ptr %7, align 8, !tbaa !39
  br label %203

203:                                              ; preds = %199, %197
  ret i32 %.lcssa2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @quant_compare(i32 noundef %0, i32 noundef %1, double noundef %2, double noundef %3, double noundef %4, i32 noundef %5, double noundef %6, double noundef %7, double noundef %8) #43 {
  %10 = icmp eq i32 %0, 0
  br i1 %10, label %11, label %17

11:                                               ; preds = %9
  %12 = icmp slt i32 %5, %1
  %13 = icmp eq i32 %5, %1
  %14 = fcmp ole double %7, %3
  %15 = and i1 %13, %14
  %16 = or i1 %12, %15
  br label %81

17:                                               ; preds = %9
  %18 = icmp eq i32 %0, 1
  %19 = fcmp olt double %8, %4
  %20 = and i1 %18, %19
  %21 = icmp eq i32 %0, 2
  %22 = fcmp olt double %6, %2
  %23 = select i1 %21, i1 %22, i1 %20
  switch i32 %0, label %81 [
    i32 3, label %24
    i32 4, label %28
    i32 5, label %66
    i32 6, label %71
  ]

24:                                               ; preds = %17
  %25 = fadd double %4, 2.000000e+00
  %26 = fcmp ogt double %25, %8
  %27 = and i1 %22, %26
  br label %81

28:                                               ; preds = %17
  %29 = fcmp ole double %8, 0.000000e+00
  %30 = fcmp ogt double %4, 2.000000e+00
  %31 = and i1 %30, %29
  br i1 %31, label %81, label %32

32:                                               ; preds = %28
  %33 = fcmp olt double %4, 0.000000e+00
  %34 = and i1 %33, %29
  %35 = fadd double %4, 2.000000e+00
  %36 = fcmp ogt double %35, %8
  %37 = and i1 %36, %34
  %38 = and i1 %22, %37
  br i1 %38, label %81, label %39

39:                                               ; preds = %32
  %40 = fcmp ogt double %4, 0.000000e+00
  %41 = fadd double %2, %3
  %42 = fcmp ogt double %41, %6
  %43 = and i1 %40, %42
  %44 = and i1 %43, %29
  %45 = and i1 %36, %44
  br i1 %45, label %81, label %46

46:                                               ; preds = %39
  %47 = fcmp ogt double %8, 0.000000e+00
  %48 = fcmp ogt double %4, -5.000000e-01
  %49 = fadd double %4, 1.000000e+00
  %50 = fcmp ogt double %49, %8
  %51 = and i1 %48, %50
  %52 = fadd double %6, %7
  %53 = fcmp olt double %52, %41
  %54 = and i1 %53, %51
  %55 = and i1 %47, %54
  br i1 %55, label %81, label %56

56:                                               ; preds = %46
  %57 = fcmp ogt double %4, -1.000000e+00
  %58 = fadd double %4, 1.500000e+00
  %59 = fcmp ogt double %58, %8
  %60 = and i1 %57, %59
  %61 = and i1 %47, %60
  br i1 %61, label %62, label %81

62:                                               ; preds = %56
  %63 = fadd double %52, %7
  %64 = fadd double %41, %3
  %65 = fcmp olt double %63, %64
  br label %81

66:                                               ; preds = %17
  %67 = fcmp olt double %7, %3
  %68 = fcmp oeq double %7, %3
  %69 = and i1 %22, %68
  %70 = or i1 %67, %69
  br label %81

71:                                               ; preds = %17
  %72 = fcmp olt double %7, %3
  br i1 %72, label %81, label %73

73:                                               ; preds = %71
  %74 = fcmp une double %7, %3
  %75 = or i1 %74, %19
  %76 = xor i1 %74, true
  br i1 %75, label %81, label %77

77:                                               ; preds = %73
  %78 = fcmp oeq double %8, %4
  %79 = fcmp ole double %6, %2
  %80 = and i1 %79, %78
  br label %81

81:                                               ; preds = %77, %73, %71, %66, %62, %56, %46, %39, %32, %28, %24, %17, %11
  %82 = phi i1 [ true, %71 ], [ %76, %73 ], [ %80, %77 ], [ %70, %66 ], [ %27, %24 ], [ true, %39 ], [ true, %32 ], [ %65, %62 ], [ false, %56 ], [ true, %28 ], [ true, %46 ], [ %23, %17 ], [ %16, %11 ]
  %83 = zext i1 %82 to i32
  ret i32 %83
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal void @amp_scalefac_bands(ptr nocapture noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef %2, ptr nocapture noundef readonly %3) #3 {
  %5 = getelementptr inbounds %struct.gr_info, ptr %1, i64 0, i32 13
  %6 = load i32, ptr %5, align 4, !tbaa !196
  %7 = icmp eq i32 %6, 0
  %8 = select i1 %7, double 0x3FF4BFDAD5362A27, double 0x3FFAE89F995AD3AE
  %9 = getelementptr inbounds %struct.gr_info, ptr %1, i64 0, i32 16
  %10 = load i32, ptr %9, align 8, !tbaa !577
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %23, label %12

12:                                               ; preds = %4
  %13 = zext i32 %10 to i64
  br label %14

14:                                               ; preds = %14, %12
  %15 = phi i64 [ 0, %12 ], [ %21, %14 ]
  %16 = phi double [ -9.000000e+02, %12 ], [ %20, %14 ]
  %17 = getelementptr inbounds [21 x double], ptr %3, i64 0, i64 %15
  %18 = load double, ptr %17, align 8, !tbaa !39
  %19 = fcmp ogt double %18, %16
  %20 = select i1 %19, double %18, double %16
  %21 = add nuw nsw i64 %15, 1
  %22 = icmp eq i64 %21, %13
  br i1 %22, label %23, label %14, !llvm.loop !610

23:                                               ; preds = %14, %4
  %24 = phi double [ -9.000000e+02, %4 ], [ %20, %14 ]
  %25 = getelementptr inbounds %struct.gr_info, ptr %1, i64 0, i32 17
  %26 = load i32, ptr %25, align 4, !tbaa !576
  %27 = icmp ult i32 %26, 12
  br i1 %27, label %28, label %45

28:                                               ; preds = %23
  %29 = zext i32 %26 to i64
  br label %30

30:                                               ; preds = %42, %28
  %31 = phi i64 [ %29, %28 ], [ %43, %42 ]
  %32 = phi double [ %24, %28 ], [ %.lcssa, %42 ]
  br label %33

33:                                               ; preds = %33, %30
  %34 = phi i64 [ 0, %30 ], [ %36, %33 ]
  %35 = phi double [ %32, %30 ], [ %40, %33 ]
  %36 = add nuw nsw i64 %34, 1
  %37 = getelementptr inbounds [21 x double], ptr %3, i64 %36, i64 %31
  %38 = load double, ptr %37, align 8, !tbaa !39
  %39 = fcmp ogt double %38, %35
  %40 = select i1 %39, double %38, double %35
  %41 = icmp eq i64 %36, 3
  br i1 %41, label %42, label %33, !llvm.loop !611

42:                                               ; preds = %33
  %.lcssa = phi double [ %40, %33 ]
  %43 = add nuw nsw i64 %31, 1
  %44 = icmp eq i64 %43, 12
  br i1 %44, label %45, label %30, !llvm.loop !612

45:                                               ; preds = %42, %23
  %46 = phi double [ %24, %23 ], [ %.lcssa, %42 ]
  %47 = fmul double %46, 1.050000e+00
  %48 = fcmp olt double %47, 0.000000e+00
  %49 = select i1 %48, double %47, double 0.000000e+00
  br i1 %11, label %82, label %50

50:                                               ; preds = %77, %45
  %51 = phi i64 [ %78, %77 ], [ 0, %45 ]
  %52 = getelementptr inbounds [21 x double], ptr %3, i64 0, i64 %51
  %53 = load double, ptr %52, align 8, !tbaa !39
  %54 = fcmp ogt double %53, %49
  br i1 %54, label %57, label %55

55:                                               ; preds = %50
  %56 = add nuw nsw i64 %51, 1
  br label %77

57:                                               ; preds = %50
  %58 = getelementptr inbounds [22 x i32], ptr %2, i64 0, i64 %51
  %59 = load i32, ptr %58, align 4, !tbaa !11
  %60 = add nsw i32 %59, 1
  store i32 %60, ptr %58, align 4, !tbaa !11
  %61 = getelementptr inbounds [23 x i32], ptr @scalefac_band, i64 0, i64 %51
  %62 = load i32, ptr %61, align 4, !tbaa !11
  %63 = add nuw nsw i64 %51, 1
  %64 = getelementptr inbounds [23 x i32], ptr @scalefac_band, i64 0, i64 %63
  %65 = load i32, ptr %64, align 4, !tbaa !11
  %66 = icmp slt i32 %62, %65
  br i1 %66, label %67, label %77

67:                                               ; preds = %57
  %68 = sext i32 %62 to i64
  %69 = sext i32 %65 to i64
  br label %70

70:                                               ; preds = %70, %67
  %71 = phi i64 [ %68, %67 ], [ %75, %70 ]
  %72 = getelementptr inbounds double, ptr %0, i64 %71
  %73 = load double, ptr %72, align 8, !tbaa !39
  %74 = fmul double %8, %73
  store double %74, ptr %72, align 8, !tbaa !39
  %75 = add nsw i64 %71, 1
  %76 = icmp eq i64 %75, %69
  br i1 %76, label %77, label %70, !llvm.loop !613

77:                                               ; preds = %70, %57, %55
  %78 = phi i64 [ %56, %55 ], [ %63, %57 ], [ %63, %70 ]
  %79 = load i32, ptr %9, align 8, !tbaa !577
  %80 = zext i32 %79 to i64
  %81 = icmp ult i64 %78, %80
  br i1 %81, label %50, label %82, !llvm.loop !614

82:                                               ; preds = %77, %45
  br label %83

83:                                               ; preds = %122, %82
  %84 = phi i64 [ %87, %122 ], [ 0, %82 ]
  %85 = load i32, ptr %25, align 4, !tbaa !576
  %86 = icmp ult i32 %85, 12
  %87 = add nuw nsw i64 %84, 1
  br i1 %86, label %88, label %122

88:                                               ; preds = %83
  %89 = zext i32 %85 to i64
  br label %90

90:                                               ; preds = %119, %88
  %91 = phi i64 [ %89, %88 ], [ %120, %119 ]
  %92 = getelementptr inbounds [21 x double], ptr %3, i64 %87, i64 %91
  %93 = load double, ptr %92, align 8, !tbaa !39
  %94 = fcmp ogt double %93, %49
  br i1 %94, label %97, label %95

95:                                               ; preds = %90
  %96 = add nuw nsw i64 %91, 1
  br label %119

97:                                               ; preds = %90
  %98 = getelementptr inbounds %struct.III_scalefac_t, ptr %2, i64 0, i32 1, i64 %91, i64 %84
  %99 = load i32, ptr %98, align 4, !tbaa !11
  %100 = add nsw i32 %99, 1
  store i32 %100, ptr %98, align 4, !tbaa !11
  %101 = getelementptr inbounds %struct.scalefac_struct, ptr @scalefac_band, i64 0, i32 1, i64 %91
  %102 = load i32, ptr %101, align 4, !tbaa !11
  %103 = add nuw nsw i64 %91, 1
  %104 = getelementptr inbounds %struct.scalefac_struct, ptr @scalefac_band, i64 0, i32 1, i64 %103
  %105 = load i32, ptr %104, align 4, !tbaa !11
  %106 = icmp slt i32 %102, %105
  br i1 %106, label %107, label %119

107:                                              ; preds = %97
  %108 = sext i32 %102 to i64
  %109 = sext i32 %105 to i64
  br label %110

110:                                              ; preds = %110, %107
  %111 = phi i64 [ %108, %107 ], [ %117, %110 ]
  %112 = mul nsw i64 %111, 3
  %113 = add nsw i64 %112, %84
  %114 = getelementptr inbounds double, ptr %0, i64 %113
  %115 = load double, ptr %114, align 8, !tbaa !39
  %116 = fmul double %8, %115
  store double %116, ptr %114, align 8, !tbaa !39
  %117 = add nsw i64 %111, 1
  %118 = icmp eq i64 %117, %109
  br i1 %118, label %119, label %110, !llvm.loop !615

119:                                              ; preds = %110, %97, %95
  %120 = phi i64 [ %96, %95 ], [ %103, %97 ], [ %103, %110 ]
  %121 = icmp eq i64 %120, 12
  br i1 %121, label %122, label %90, !llvm.loop !616

122:                                              ; preds = %119, %83
  %123 = icmp eq i64 %87, 3
  br i1 %123, label %124, label %83, !llvm.loop !617

124:                                              ; preds = %122
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @VBR_iteration_loop(ptr noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr noundef %3, ptr noundef %4, ptr noundef %5, ptr noundef %6, ptr noundef %7) #4 {
  %9 = alloca %struct.gr_info, align 8
  %10 = alloca %struct.gr_info, align 8
  %11 = alloca %struct.III_scalefac_t, align 4
  %12 = alloca [576 x i32], align 16
  %13 = alloca %struct.III_psy_xmin, align 8
  %14 = alloca [2 x [2 x i32]], align 16
  %15 = alloca [4 x double], align 16
  %16 = alloca [15 x i32], align 16
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 120, ptr nonnull %9)
  call void @llvm.lifetime.start.p0(i64 120, ptr nonnull %10)
  call void @llvm.lifetime.start.p0(i64 244, ptr nonnull %11)
  call void @llvm.lifetime.start.p0(i64 2304, ptr nonnull %12)
  call void @llvm.lifetime.start.p0(i64 488, ptr nonnull %13) #56
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %14) #56
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %15) #56
  call void @llvm.lifetime.start.p0(i64 60, ptr nonnull %16) #56
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %17) #56
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %18) #56
  tail call void @iteration_init(ptr noundef %0, ptr noundef %5, ptr noundef %6) #55
  %19 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 50
  %20 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 48
  store i32 1, ptr %19, align 4, !tbaa !164
  %21 = load i32, ptr %20, align 4, !tbaa !266
  %22 = icmp slt i32 %21, 1
  br i1 %22, label %45, label %23

23:                                               ; preds = %8
  %24 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 47
  %25 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 46
  br label %26

26:                                               ; preds = %35, %23
  %27 = phi i32 [ 0, %23 ], [ %36, %35 ]
  call void @getframebits(ptr noundef nonnull %0, ptr noundef nonnull %17, ptr noundef nonnull %18) #55
  %28 = load i32, ptr %19, align 4, !tbaa !164
  %29 = load i32, ptr %24, align 8, !tbaa !267
  %30 = icmp eq i32 %28, %29
  %31 = load i32, ptr %18, align 4, !tbaa !11
  br i1 %30, label %32, label %35

32:                                               ; preds = %26
  %33 = load i32, ptr %25, align 4, !tbaa !173
  %34 = sdiv i32 %31, %33
  br label %35

35:                                               ; preds = %32, %26
  %36 = phi i32 [ %34, %32 ], [ %27, %26 ]
  %37 = load i32, ptr %17, align 4, !tbaa !11
  %38 = call i32 @ResvFrameBegin(ptr noundef nonnull %0, ptr noundef %5, i32 noundef %31, i32 noundef %37) #55
  %39 = load i32, ptr %19, align 4, !tbaa !164
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [15 x i32], ptr %16, i64 0, i64 %40
  store i32 %38, ptr %41, align 4, !tbaa !11
  %42 = add nsw i32 %39, 1
  store i32 %42, ptr %19, align 4, !tbaa !164
  %43 = load i32, ptr %20, align 4, !tbaa !266
  %44 = icmp slt i32 %39, %43
  br i1 %44, label %26, label %45, !llvm.loop !618

45:                                               ; preds = %35, %8
  %46 = phi i32 [ 0, %8 ], [ %36, %35 ]
  %47 = phi i32 [ %21, %8 ], [ %43, %35 ]
  store i32 %47, ptr %19, align 4, !tbaa !164
  %48 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 45
  %49 = load i32, ptr %48, align 8, !tbaa !136
  %50 = icmp sgt i32 %49, 0
  br i1 %50, label %51, label %230

51:                                               ; preds = %45
  %52 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 46
  %53 = call i32 @llvm.smax.i32(i32 %46, i32 125)
  %54 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 22
  %55 = getelementptr inbounds [4 x double], ptr %15, i64 0, i64 3
  %56 = getelementptr inbounds [4 x double], ptr %15, i64 0, i64 2
  %57 = getelementptr inbounds [4 x double], ptr %15, i64 0, i64 1
  br label %58

58:                                               ; preds = %192, %51
  %59 = phi i64 [ 0, %51 ], [ %195, %192 ]
  %60 = phi i32 [ 0, %51 ], [ %194, %192 ]
  %61 = phi i32 [ 0, %51 ], [ %193, %192 ]
  %62 = load i32, ptr %52, align 4, !tbaa !173
  %63 = load i32, ptr @reduce_sidechannel, align 4, !tbaa !11
  %64 = icmp eq i32 %63, 0
  %65 = select i1 %64, i32 %62, i32 1
  %66 = load i32, ptr @convert_mdct, align 4, !tbaa !11
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %70, label %68

68:                                               ; preds = %58
  %69 = getelementptr inbounds [2 x [576 x double]], ptr %3, i64 %59
  call void @ms_convert(ptr noundef %69, ptr noundef %69) #55
  br label %70

70:                                               ; preds = %68, %58
  %71 = icmp sgt i32 %65, 0
  br i1 %71, label %72, label %192

72:                                               ; preds = %70
  %73 = getelementptr inbounds %struct.III_side_info_t, ptr %5, i64 0, i32 4, i64 %59
  %74 = zext i32 %65 to i64
  br label %75

75:                                               ; preds = %187, %72
  %76 = phi i64 [ 0, %72 ], [ %190, %187 ]
  %77 = phi i32 [ %60, %72 ], [ %189, %187 ]
  %78 = phi i32 [ %61, %72 ], [ %188, %187 ]
  %79 = getelementptr inbounds [2 x %struct.gr_info_ss], ptr %73, i64 0, i64 %76
  %80 = getelementptr inbounds [2 x [576 x double]], ptr %3, i64 %59, i64 %76
  %81 = call i32 @init_outer_loop(ptr noundef %0, ptr noundef %80, ptr noundef nonnull %79) #57
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %87

83:                                               ; preds = %75
  %84 = getelementptr inbounds [2 x %struct.III_scalefac_t], ptr %7, i64 %59, i64 %76
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(244) %84, i8 0, i64 244, i1 false)
  %85 = getelementptr inbounds [2 x [576 x i32]], ptr %6, i64 %59, i64 %76
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(2304) %85, i8 0, i64 2304, i1 false)
  %86 = getelementptr inbounds [2 x [2 x i32]], ptr %14, i64 0, i64 %59, i64 %76
  store i32 0, ptr %86, align 4, !tbaa !11
  br label %187

87:                                               ; preds = %75
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(120) %10, ptr noundef nonnull align 8 dereferenceable(120) %79, i64 120, i1 false)
  %88 = load i32, ptr %54, align 4, !tbaa !249
  %89 = shl nsw i32 %88, 1
  %90 = add nsw i32 %89, -6
  %91 = sitofp i32 %90 to float
  %92 = fdiv float %91, 1.000000e+01
  %93 = fpext float %92 to double
  %94 = call double @pow(double noundef 1.000000e+01, double noundef %93) #55
  %95 = fptrunc double %94 to float
  store float %95, ptr @masking_lower, align 4, !tbaa !48
  %96 = getelementptr inbounds [2 x %struct.III_psy_ratio], ptr %4, i64 %59, i64 %76
  %97 = call i32 @calc_xmin(ptr noundef %0, ptr noundef %80, ptr noundef %96, ptr noundef nonnull %79, ptr noundef nonnull %13) #55
  %98 = icmp eq i32 %97, 0
  %99 = select i1 %98, i32 125, i32 %53
  %100 = select i1 %98, i32 1, i32 %77
  %101 = getelementptr inbounds %struct.gr_info, ptr %79, i64 0, i32 6
  %102 = load i32, ptr %101, align 8, !tbaa !188
  %103 = icmp eq i32 %102, 2
  br i1 %103, label %104, label %113

104:                                              ; preds = %87
  %105 = getelementptr inbounds [2 x double], ptr %1, i64 %59, i64 %76
  %106 = load double, ptr %105, align 8, !tbaa !39
  %107 = fcmp olt double %106, 1.100000e+03
  %108 = select i1 %107, double 1.100000e+03, double %106
  %109 = sitofp i32 %99 to double
  %110 = fadd double %108, %109
  %111 = fptosi double %110 to i32
  %112 = call i32 @llvm.smin.i32(i32 %111, i32 1800)
  br label %113

113:                                              ; preds = %104, %87
  %114 = phi i32 [ %112, %104 ], [ %99, %87 ]
  %115 = load i32, ptr %20, align 4, !tbaa !266
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds [15 x i32], ptr %16, i64 0, i64 %116
  %118 = load i32, ptr %117, align 4, !tbaa !11
  %119 = load i32, ptr %52, align 4, !tbaa !173
  %120 = load i32, ptr %48, align 8, !tbaa !136
  %121 = mul nsw i32 %120, %119
  %122 = sdiv i32 %118, %121
  %123 = call i32 @llvm.smin.i32(i32 %122, i32 1300)
  %124 = add nsw i32 %123, 1200
  %125 = call i32 @llvm.smax.i32(i32 %124, i32 %114)
  %126 = sub nsw i32 %125, %114
  %127 = sdiv i32 %126, 4
  %128 = add nsw i32 %125, %114
  %129 = sdiv i32 %128, 2
  %130 = add nsw i32 %125, 1
  %131 = getelementptr inbounds [2 x [576 x i32]], ptr %6, i64 %59, i64 %76
  %132 = getelementptr inbounds [2 x %struct.III_scalefac_t], ptr %7, i64 %59, i64 %76
  %133 = trunc i64 %76 to i32
  br label %134

134:                                              ; preds = %175, %113
  %135 = phi i32 [ %127, %113 ], [ %178, %175 ]
  %136 = phi i32 [ %130, %113 ], [ %176, %175 ]
  %137 = phi i32 [ %129, %113 ], [ %177, %175 ]
  %138 = icmp slt i32 %137, %136
  br i1 %138, label %141, label %139

139:                                              ; preds = %134
  %140 = sub nsw i32 %137, %135
  br label %175

141:                                              ; preds = %134
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(120) %79, ptr noundef nonnull align 8 dereferenceable(120) %10, i64 120, i1 false)
  %142 = load i32, ptr %54, align 4, !tbaa !249
  %143 = shl nsw i32 %142, 1
  %144 = add nsw i32 %143, -6
  %145 = sitofp i32 %144 to float
  %146 = add nsw i32 %137, -125
  %147 = sitofp i32 %146 to double
  %148 = fdiv double %147, 2.375000e+03
  %149 = fptrunc double %148 to float
  %150 = fadd float %149, -1.000000e+00
  %151 = fmul float %150, 4.000000e+00
  %152 = fadd float %151, %145
  %153 = fdiv float %152, 1.000000e+01
  %154 = fpext float %153 to double
  %155 = call double @pow(double noundef 1.000000e+01, double noundef %154) #55
  %156 = fptrunc double %155 to float
  store float %156, ptr @masking_lower, align 4, !tbaa !48
  %157 = call i32 @calc_xmin(ptr noundef %0, ptr noundef %80, ptr noundef %96, ptr noundef nonnull %79, ptr noundef nonnull %13) #55
  call void @outer_loop(ptr noundef %0, ptr noundef %80, i32 noundef %137, ptr noundef nonnull %15, ptr noundef nonnull %13, ptr noundef %131, ptr noundef %132, ptr noundef nonnull %79, ptr nonnull poison, i32 noundef %133) #57
  %158 = load double, ptr %15, align 16, !tbaa !39
  %159 = fptosi double %158 to i32
  %160 = load double, ptr %55, align 8, !tbaa !39
  %161 = load double, ptr %56, align 16, !tbaa !39
  %162 = load double, ptr %57, align 8, !tbaa !39
  %163 = icmp sgt i32 %159, 0
  %164 = fcmp ugt double %161, 0.000000e+00
  %165 = or i1 %163, %164
  %166 = fcmp ugt double %160, 0.000000e+00
  %167 = or i1 %166, %165
  %168 = fcmp ugt double %162, 0.000000e+00
  %169 = or i1 %168, %167
  br i1 %169, label %173, label %170

170:                                              ; preds = %141
  %171 = load i32, ptr %79, align 8, !tbaa !182
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(244) %11, ptr noundef nonnull align 4 dereferenceable(244) %132, i64 244, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 16 dereferenceable(2304) %12, ptr noundef nonnull align 4 dereferenceable(2304) %131, i64 2304, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(120) %9, ptr noundef nonnull align 8 dereferenceable(120) %79, i64 120, i1 false)
  %172 = sub nsw i32 %137, %135
  br label %175

173:                                              ; preds = %141
  %174 = add nsw i32 %137, %135
  br label %175

175:                                              ; preds = %173, %170, %139
  %176 = phi i32 [ %136, %139 ], [ %171, %170 ], [ %136, %173 ]
  %177 = phi i32 [ %140, %139 ], [ %172, %170 ], [ %174, %173 ]
  %178 = lshr i32 %135, 1
  %179 = icmp sgt i32 %135, 21
  br i1 %179, label %134, label %180, !llvm.loop !619

180:                                              ; preds = %175
  %.lcssa6 = phi i32 [ %176, %175 ]
  %181 = icmp sgt i32 %.lcssa6, %125
  br i1 %181, label %183, label %182

182:                                              ; preds = %180
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(120) %79, ptr noundef nonnull align 8 dereferenceable(120) %9, i64 120, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(244) %132, ptr noundef nonnull align 4 dereferenceable(244) %11, i64 244, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(2304) %131, ptr noundef nonnull align 16 dereferenceable(2304) %12, i64 2304, i1 false)
  br label %183

183:                                              ; preds = %182, %180
  %184 = load i32, ptr %79, align 8, !tbaa !182
  %185 = getelementptr inbounds [2 x [2 x i32]], ptr %14, i64 0, i64 %59, i64 %76
  store i32 %184, ptr %185, align 4, !tbaa !11
  %186 = add nsw i32 %184, %78
  br label %187

187:                                              ; preds = %183, %83
  %188 = phi i32 [ %186, %183 ], [ %78, %83 ]
  %189 = phi i32 [ %100, %183 ], [ 1, %83 ]
  %190 = add nuw nsw i64 %76, 1
  %191 = icmp eq i64 %190, %74
  br i1 %191, label %192, label %75, !llvm.loop !620

192:                                              ; preds = %187, %70
  %193 = phi i32 [ %61, %70 ], [ %188, %187 ]
  %194 = phi i32 [ %60, %70 ], [ %189, %187 ]
  %195 = add nuw nsw i64 %59, 1
  %196 = load i32, ptr %48, align 8, !tbaa !136
  %197 = sext i32 %196 to i64
  %198 = icmp slt i64 %195, %197
  br i1 %198, label %58, label %199, !llvm.loop !621

199:                                              ; preds = %192
  %.lcssa9 = phi i32 [ %193, %192 ]
  %.lcssa8 = phi i32 [ %194, %192 ]
  %.lcssa7 = phi i32 [ %196, %192 ]
  %200 = load i32, ptr @reduce_sidechannel, align 4, !tbaa !11
  %201 = icmp ne i32 %200, 0
  %202 = icmp sgt i32 %.lcssa7, 0
  %203 = and i1 %201, %202
  br i1 %203, label %204, label %227

204:                                              ; preds = %199
  %205 = zext i32 %.lcssa7 to i64
  br label %206

206:                                              ; preds = %206, %204
  %207 = phi i64 [ 0, %204 ], [ %225, %206 ]
  %208 = phi i32 [ %.lcssa9, %204 ], [ %224, %206 ]
  %209 = getelementptr inbounds double, ptr %2, i64 %207
  %210 = load double, ptr %209, align 8, !tbaa !39
  %211 = fsub double 5.000000e-01, %210
  %212 = fmul double %211, 3.300000e-01
  %213 = fmul double %212, 2.000000e+00
  %214 = fsub double 1.000000e+00, %213
  %215 = fadd double %213, 1.000000e+00
  %216 = fdiv double %214, %215
  %217 = getelementptr inbounds [2 x [2 x i32]], ptr %14, i64 0, i64 %207
  %218 = load i32, ptr %217, align 8, !tbaa !11
  %219 = sitofp i32 %218 to double
  %220 = fmul double %216, %219
  %221 = fptosi double %220 to i32
  %222 = getelementptr inbounds [2 x [2 x i32]], ptr %14, i64 0, i64 %207, i64 1
  %223 = call i32 @llvm.smax.i32(i32 %221, i32 125)
  store i32 %223, ptr %222, align 4, !tbaa !11
  %224 = add nsw i32 %223, %208
  %225 = add nuw nsw i64 %207, 1
  %226 = icmp eq i64 %225, %205
  br i1 %226, label %227, label %206, !llvm.loop !622

227:                                              ; preds = %206, %199
  %228 = phi i32 [ %.lcssa9, %199 ], [ %224, %206 ]
  %229 = icmp eq i32 %.lcssa8, 0
  br i1 %229, label %230, label %234

230:                                              ; preds = %227, %45
  %231 = phi i32 [ %228, %227 ], [ 0, %45 ]
  %232 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 47
  %233 = load i32, ptr %232, align 8, !tbaa !267
  br label %234

234:                                              ; preds = %230, %227
  %235 = phi i32 [ %231, %230 ], [ %228, %227 ]
  %236 = phi i32 [ %233, %230 ], [ 1, %227 ]
  %237 = load i32, ptr %20, align 4, !tbaa !266
  %238 = icmp slt i32 %236, %237
  br i1 %238, label %239, label %252

239:                                              ; preds = %234
  %240 = sext i32 %236 to i64
  br label %241

241:                                              ; preds = %246, %239
  %242 = phi i64 [ %240, %239 ], [ %247, %246 ]
  %243 = getelementptr inbounds [15 x i32], ptr %16, i64 0, i64 %242
  %244 = load i32, ptr %243, align 4, !tbaa !11
  %245 = icmp sgt i32 %235, %244
  br i1 %245, label %246, label %250

246:                                              ; preds = %241
  %247 = add nsw i64 %242, 1
  %248 = trunc i64 %247 to i32
  %249 = icmp eq i32 %237, %248
  br i1 %249, label %252, label %241, !llvm.loop !623

250:                                              ; preds = %241
  %.lcssa5 = phi i64 [ %242, %241 ]
  %251 = trunc i64 %.lcssa5 to i32
  br label %252

252:                                              ; preds = %250, %246, %234
  %253 = phi i32 [ %236, %234 ], [ %251, %250 ], [ %237, %246 ]
  store i32 %253, ptr %19, align 4, !tbaa !164
  call void @getframebits(ptr noundef nonnull %0, ptr noundef nonnull %17, ptr noundef nonnull %18) #55
  %254 = load i32, ptr %18, align 4, !tbaa !11
  %255 = load i32, ptr %17, align 4, !tbaa !11
  %256 = call i32 @ResvFrameBegin(ptr noundef nonnull %0, ptr noundef %5, i32 noundef %254, i32 noundef %255) #55
  %257 = icmp sgt i32 %235, %256
  %258 = load i32, ptr %48, align 8, !tbaa !136
  br i1 %257, label %259, label %285

259:                                              ; preds = %252
  %260 = icmp sgt i32 %258, 0
  br i1 %260, label %261, label %422

261:                                              ; preds = %259
  %262 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 46
  %263 = load i32, ptr %262, align 4, !tbaa !173
  %264 = icmp sgt i32 %263, 0
  %265 = zext i32 %263 to i64
  %266 = sext i32 %258 to i64
  br label %267

267:                                              ; preds = %282, %261
  %268 = phi i64 [ 0, %261 ], [ %283, %282 ]
  br i1 %264, label %269, label %282

269:                                              ; preds = %267
  %270 = load i32, ptr %19, align 4, !tbaa !164
  %271 = sext i32 %270 to i64
  %272 = getelementptr inbounds [15 x i32], ptr %16, i64 0, i64 %271
  %273 = load i32, ptr %272, align 4, !tbaa !11
  br label %274

274:                                              ; preds = %274, %269
  %275 = phi i64 [ 0, %269 ], [ %280, %274 ]
  %276 = getelementptr inbounds [2 x [2 x i32]], ptr %14, i64 0, i64 %268, i64 %275
  %277 = load i32, ptr %276, align 4, !tbaa !11
  %278 = mul nsw i32 %273, %277
  %279 = sdiv i32 %278, %235
  store i32 %279, ptr %276, align 4, !tbaa !11
  %280 = add nuw nsw i64 %275, 1
  %281 = icmp eq i64 %280, %265
  br i1 %281, label %282, label %274, !llvm.loop !624

282:                                              ; preds = %274, %267
  %283 = add nuw nsw i64 %268, 1
  %284 = icmp slt i64 %283, %266
  br i1 %284, label %267, label %285, !llvm.loop !625

285:                                              ; preds = %282, %252
  %286 = icmp sgt i32 %258, 0
  br i1 %286, label %287, label %422

287:                                              ; preds = %285
  %288 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 46
  %289 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 22
  %290 = load i32, ptr %288, align 4, !tbaa !173
  br label %291

291:                                              ; preds = %348, %287
  %292 = phi i32 [ %258, %287 ], [ %349, %348 ]
  %293 = phi i32 [ %290, %287 ], [ %350, %348 ]
  %294 = phi i64 [ 0, %287 ], [ %351, %348 ]
  %295 = icmp sgt i32 %293, 0
  br i1 %295, label %296, label %348

296:                                              ; preds = %291
  %297 = getelementptr inbounds %struct.III_side_info_t, ptr %5, i64 0, i32 4, i64 %294
  br label %303

298:                                              ; preds = %348
  %.lcssa4 = phi i32 [ %349, %348 ]
  %299 = icmp sgt i32 %.lcssa4, 0
  br i1 %299, label %300, label %422

300:                                              ; preds = %298
  %301 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 46
  %302 = load i32, ptr %301, align 4, !tbaa !173
  br label %354

303:                                              ; preds = %341, %296
  %304 = phi i64 [ 0, %296 ], [ %342, %341 ]
  br i1 %257, label %310, label %305

305:                                              ; preds = %303
  %306 = load i32, ptr @reduce_sidechannel, align 4, !tbaa !11
  %307 = icmp ne i32 %306, 0
  %308 = icmp eq i64 %304, 1
  %309 = and i1 %308, %307
  br i1 %309, label %310, label %341

310:                                              ; preds = %305, %303
  %311 = getelementptr inbounds [2 x %struct.gr_info_ss], ptr %297, i64 0, i64 %304
  %312 = getelementptr inbounds [2 x [576 x double]], ptr %3, i64 %294, i64 %304
  %313 = call i32 @init_outer_loop(ptr noundef nonnull %0, ptr noundef %312, ptr noundef nonnull %311) #57
  %314 = icmp eq i32 %313, 0
  br i1 %314, label %315, label %318

315:                                              ; preds = %310
  %316 = getelementptr inbounds [2 x %struct.III_scalefac_t], ptr %7, i64 %294, i64 %304
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(244) %316, i8 0, i64 244, i1 false)
  %317 = getelementptr inbounds [2 x [576 x i32]], ptr %6, i64 %294, i64 %304
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(2304) %317, i8 0, i64 2304, i1 false)
  br label %341

318:                                              ; preds = %310
  %319 = load i32, ptr %289, align 4, !tbaa !249
  %320 = getelementptr inbounds [2 x [2 x i32]], ptr %14, i64 0, i64 %294, i64 %304
  %321 = load i32, ptr %320, align 4, !tbaa !11
  %322 = shl nsw i32 %319, 1
  %323 = add nsw i32 %322, -6
  %324 = sitofp i32 %323 to float
  %325 = add nsw i32 %321, -125
  %326 = sitofp i32 %325 to double
  %327 = fdiv double %326, 2.375000e+03
  %328 = fptrunc double %327 to float
  %329 = fadd float %328, -1.000000e+00
  %330 = fmul float %329, 4.000000e+00
  %331 = fadd float %330, %324
  %332 = fdiv float %331, 1.000000e+01
  %333 = fpext float %332 to double
  %334 = call double @pow(double noundef 1.000000e+01, double noundef %333) #55
  %335 = fptrunc double %334 to float
  store float %335, ptr @masking_lower, align 4, !tbaa !48
  %336 = getelementptr inbounds [2 x %struct.III_psy_ratio], ptr %4, i64 %294, i64 %304
  %337 = call i32 @calc_xmin(ptr noundef nonnull %0, ptr noundef %312, ptr noundef %336, ptr noundef nonnull %311, ptr noundef nonnull %13) #55
  %338 = getelementptr inbounds [2 x [576 x i32]], ptr %6, i64 %294, i64 %304
  %339 = getelementptr inbounds [2 x %struct.III_scalefac_t], ptr %7, i64 %294, i64 %304
  %340 = trunc i64 %304 to i32
  call void @outer_loop(ptr noundef nonnull %0, ptr noundef %312, i32 noundef %321, ptr noundef nonnull %15, ptr noundef nonnull %13, ptr noundef %338, ptr noundef %339, ptr noundef nonnull %311, ptr nonnull poison, i32 noundef %340) #57
  br label %341

341:                                              ; preds = %318, %315, %305
  %342 = add nuw nsw i64 %304, 1
  %343 = load i32, ptr %288, align 4, !tbaa !173
  %344 = sext i32 %343 to i64
  %345 = icmp slt i64 %342, %344
  br i1 %345, label %303, label %346, !llvm.loop !626

346:                                              ; preds = %341
  %.lcssa3 = phi i32 [ %343, %341 ]
  %347 = load i32, ptr %48, align 8, !tbaa !136
  br label %348

348:                                              ; preds = %346, %291
  %349 = phi i32 [ %347, %346 ], [ %292, %291 ]
  %350 = phi i32 [ %.lcssa3, %346 ], [ %293, %291 ]
  %351 = add nuw nsw i64 %294, 1
  %352 = sext i32 %349 to i64
  %353 = icmp slt i64 %351, %352
  br i1 %353, label %291, label %298, !llvm.loop !627

354:                                              ; preds = %384, %300
  %355 = phi i32 [ %.lcssa4, %300 ], [ %385, %384 ]
  %356 = phi i32 [ %302, %300 ], [ %386, %384 ]
  %357 = phi i64 [ 0, %300 ], [ %387, %384 ]
  %358 = icmp sgt i32 %356, 0
  br i1 %358, label %359, label %384

359:                                              ; preds = %354
  %360 = getelementptr inbounds %struct.III_side_info_t, ptr %5, i64 0, i32 4, i64 %357
  %361 = trunc i64 %357 to i32
  br label %367

362:                                              ; preds = %384
  %.lcssa2 = phi i32 [ %385, %384 ]
  %363 = icmp sgt i32 %.lcssa2, 0
  br i1 %363, label %364, label %422

364:                                              ; preds = %362
  %365 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 46
  %366 = load i32, ptr %365, align 4, !tbaa !173
  br label %390

367:                                              ; preds = %376, %359
  %368 = phi i64 [ 0, %359 ], [ %378, %376 ]
  %369 = getelementptr inbounds [2 x %struct.gr_info_ss], ptr %360, i64 0, i64 %368
  %370 = trunc i64 %368 to i32
  call void @best_scalefac_store(ptr noundef nonnull %0, i32 noundef %361, i32 noundef %370, ptr noundef %6, ptr noundef %5, ptr noundef %7) #55
  %371 = getelementptr inbounds %struct.gr_info, ptr %369, i64 0, i32 6
  %372 = load i32, ptr %371, align 8, !tbaa !188
  %373 = icmp eq i32 %372, 0
  br i1 %373, label %374, label %376

374:                                              ; preds = %367
  %375 = getelementptr inbounds [2 x [576 x i32]], ptr %6, i64 %357, i64 %368
  call void @best_huffman_divide(i32 noundef %361, i32 noundef %370, ptr noundef nonnull %369, ptr noundef %375) #55
  br label %376

376:                                              ; preds = %374, %367
  %377 = load i32, ptr %18, align 4, !tbaa !11
  call void @ResvAdjust(ptr noundef %0, ptr noundef nonnull %369, ptr noundef nonnull %5, i32 noundef %377) #55
  %378 = add nuw nsw i64 %368, 1
  %379 = load i32, ptr %301, align 4, !tbaa !173
  %380 = sext i32 %379 to i64
  %381 = icmp slt i64 %378, %380
  br i1 %381, label %367, label %382, !llvm.loop !628

382:                                              ; preds = %376
  %.lcssa1 = phi i32 [ %379, %376 ]
  %383 = load i32, ptr %48, align 8, !tbaa !136
  br label %384

384:                                              ; preds = %382, %354
  %385 = phi i32 [ %383, %382 ], [ %355, %354 ]
  %386 = phi i32 [ %.lcssa1, %382 ], [ %356, %354 ]
  %387 = add nuw nsw i64 %357, 1
  %388 = sext i32 %385 to i64
  %389 = icmp slt i64 %387, %388
  br i1 %389, label %354, label %362, !llvm.loop !629

390:                                              ; preds = %416, %364
  %391 = phi i32 [ %.lcssa2, %364 ], [ %417, %416 ]
  %392 = phi i32 [ %366, %364 ], [ %418, %416 ]
  %393 = phi i64 [ 0, %364 ], [ %419, %416 ]
  %394 = icmp sgt i32 %392, 0
  br i1 %394, label %395, label %416

395:                                              ; preds = %409, %390
  %396 = phi i64 [ %410, %409 ], [ 0, %390 ]
  br label %397

397:                                              ; preds = %406, %395
  %398 = phi i64 [ 0, %395 ], [ %407, %406 ]
  %399 = getelementptr inbounds [2 x [576 x double]], ptr %3, i64 %393, i64 %396, i64 %398
  %400 = load double, ptr %399, align 8, !tbaa !39
  %401 = fcmp olt double %400, 0.000000e+00
  br i1 %401, label %402, label %406

402:                                              ; preds = %397
  %403 = getelementptr inbounds [2 x [576 x i32]], ptr %6, i64 %393, i64 %396, i64 %398
  %404 = load i32, ptr %403, align 4, !tbaa !11
  %405 = sub nsw i32 0, %404
  store i32 %405, ptr %403, align 4, !tbaa !11
  br label %406

406:                                              ; preds = %402, %397
  %407 = add nuw nsw i64 %398, 1
  %408 = icmp eq i64 %407, 576
  br i1 %408, label %409, label %397, !llvm.loop !630

409:                                              ; preds = %406
  %410 = add nuw nsw i64 %396, 1
  %411 = load i32, ptr %365, align 4, !tbaa !173
  %412 = sext i32 %411 to i64
  %413 = icmp slt i64 %410, %412
  br i1 %413, label %395, label %414, !llvm.loop !631

414:                                              ; preds = %409
  %.lcssa = phi i32 [ %411, %409 ]
  %415 = load i32, ptr %48, align 8, !tbaa !136
  br label %416

416:                                              ; preds = %414, %390
  %417 = phi i32 [ %415, %414 ], [ %391, %390 ]
  %418 = phi i32 [ %.lcssa, %414 ], [ %392, %390 ]
  %419 = add nuw nsw i64 %393, 1
  %420 = sext i32 %417 to i64
  %421 = icmp slt i64 %419, %420
  br i1 %421, label %390, label %422, !llvm.loop !632

422:                                              ; preds = %416, %362, %298, %285, %259
  %423 = load i32, ptr %18, align 4, !tbaa !11
  call void @ResvFrameEnd(ptr noundef nonnull %0, ptr noundef %5, i32 noundef %423) #55
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %18) #56
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %17) #56
  call void @llvm.lifetime.end.p0(i64 60, ptr nonnull %16) #56
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %15) #56
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %14) #56
  call void @llvm.lifetime.end.p0(i64 488, ptr nonnull %13) #56
  call void @llvm.lifetime.end.p0(i64 2304, ptr nonnull %12)
  call void @llvm.lifetime.end.p0(i64 244, ptr nonnull %11)
  call void @llvm.lifetime.end.p0(i64 120, ptr nonnull %10)
  call void @llvm.lifetime.end.p0(i64 120, ptr nonnull %9)
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, argmem: read, inaccessiblemem: none) uwtable
define internal i32 @ResvFrameBegin(ptr nocapture noundef readonly %0, ptr nocapture noundef readnone %1, i32 noundef %2, i32 noundef %3) #44 {
  %5 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 39
  %6 = load i64, ptr %5, align 8, !tbaa !134
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %10, label %8

8:                                                ; preds = %4
  %9 = load i32, ptr @ResvSize, align 4, !tbaa !11
  br label %11

10:                                               ; preds = %4
  store i32 0, ptr @ResvSize, align 4, !tbaa !11
  br label %11

11:                                               ; preds = %10, %8
  %12 = phi i32 [ %9, %8 ], [ 0, %10 ]
  %13 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 43
  %14 = load i32, ptr %13, align 8, !tbaa !162
  %15 = icmp eq i32 %14, 1
  %16 = select i1 %15, i32 4088, i32 2040
  %17 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 45
  %18 = load i32, ptr %17, align 8, !tbaa !136
  %19 = icmp sgt i32 %3, 7680
  %20 = sub nsw i32 7680, %3
  %21 = select i1 %19, i32 0, i32 %20
  %22 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 17
  %23 = load i32, ptr %22, align 8, !tbaa !279
  %24 = icmp eq i32 %23, 0
  %25 = select i1 %24, i32 %21, i32 0
  %26 = tail call i32 @llvm.smin.i32(i32 %25, i32 %16)
  store i32 %26, ptr @ResvMax, align 4
  %27 = mul nsw i32 %18, %2
  %28 = add nsw i32 %27, %12
  ret i32 %28
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(read, argmem: write, inaccessiblemem: none) uwtable
define internal void @ResvMaxBits(i32 noundef %0, ptr nocapture noundef writeonly %1, ptr nocapture noundef writeonly %2, i32 noundef %3) #45 {
  %5 = load i32, ptr @ResvSize, align 4, !tbaa !11
  %6 = load i32, ptr @ResvMax, align 4, !tbaa !11
  %7 = mul nsw i32 %6, 9
  %8 = sdiv i32 %7, 10
  %9 = icmp sgt i32 %5, %8
  br i1 %9, label %10, label %13

10:                                               ; preds = %4
  %11 = sub nsw i32 %5, %8
  %12 = add nsw i32 %11, %0
  br label %18

13:                                               ; preds = %4
  %14 = sitofp i32 %0 to double
  %15 = fdiv double %14, 1.520000e+01
  %16 = fptosi double %15 to i32
  %17 = sub nsw i32 %0, %16
  br label %18

18:                                               ; preds = %13, %10
  %19 = phi i32 [ %17, %13 ], [ %12, %10 ]
  %20 = phi i32 [ 0, %13 ], [ %11, %10 ]
  store i32 %19, ptr %1, align 4, !tbaa !11
  %21 = mul nsw i32 %6, 6
  %22 = sdiv i32 %21, 10
  %23 = tail call i32 @llvm.smin.i32(i32 %5, i32 %22)
  %24 = sub nsw i32 %23, %20
  %25 = tail call i32 @llvm.smax.i32(i32 %24, i32 0)
  store i32 %25, ptr %2, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, argmem: read, inaccessiblemem: none) uwtable
define internal void @ResvAdjust(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readnone %2, i32 noundef %3) #13 {
  %5 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 46
  %6 = load i32, ptr %5, align 4, !tbaa !173
  %7 = sdiv i32 %3, %6
  %8 = load i32, ptr %1, align 8, !tbaa !182
  %9 = sub i32 %7, %8
  %10 = load i32, ptr @ResvSize, align 4, !tbaa !11
  %11 = add i32 %9, %10
  store i32 %11, ptr @ResvSize, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal void @ResvFrameEnd(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1, i32 noundef %2) #30 {
  %4 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 46
  %5 = load i32, ptr %4, align 4, !tbaa !173
  %6 = icmp eq i32 %5, 2
  %7 = and i32 %2, 1
  %8 = icmp ne i32 %7, 0
  %9 = and i1 %8, %6
  %10 = load i32, ptr @ResvSize, align 4, !tbaa !11
  %11 = zext i1 %9 to i32
  %12 = add nsw i32 %10, %11
  %13 = load i32, ptr @ResvMax, align 4, !tbaa !11
  %14 = sub nsw i32 %12, %13
  %15 = tail call i32 @llvm.smax.i32(i32 %14, i32 0)
  %16 = tail call i32 @llvm.smin.i32(i32 %12, i32 %13)
  %17 = srem i32 %16, 8
  %18 = add nsw i32 %15, %17
  %19 = sub nsw i32 %16, %17
  store i32 %19, ptr @ResvSize, align 4, !tbaa !11
  %20 = getelementptr inbounds %struct.III_side_info_t, ptr %1, i64 0, i32 2
  store i32 %18, ptr %20, align 8, !tbaa !225
  ret void
}

; Function Attrs: nofree nounwind optsize memory(readwrite, argmem: write, inaccessiblemem: write) uwtable
define internal void @make_decode_tables(i64 noundef %0) #46 {
  br label %2

2:                                                ; preds = %25, %1
  %3 = phi i64 [ 0, %1 ], [ %26, %25 ]
  %4 = getelementptr inbounds [5 x ptr], ptr @pnts, i64 0, i64 %3
  %5 = load ptr, ptr %4, align 8, !tbaa !7
  %6 = trunc i64 %3 to i32
  %7 = lshr i32 16, %6
  %8 = lshr i32 64, %6
  %9 = sitofp i32 %8 to double
  %10 = tail call i32 @llvm.umax.i32(i32 %7, i32 1)
  %11 = zext i32 %10 to i64
  br label %12

12:                                               ; preds = %12, %2
  %13 = phi i64 [ 0, %2 ], [ %23, %12 ]
  %14 = trunc i64 %13 to i32
  %15 = sitofp i32 %14 to double
  %16 = tail call double @llvm.fmuladd.f64(double %15, double 2.000000e+00, double 1.000000e+00)
  %17 = fmul double %16, 0x400921FB54442D18
  %18 = fdiv double %17, %9
  %19 = tail call double @cos(double noundef %18) #55
  %20 = fmul double %19, 2.000000e+00
  %21 = fdiv double 1.000000e+00, %20
  %22 = getelementptr inbounds double, ptr %5, i64 %13
  store double %21, ptr %22, align 8, !tbaa !39
  %23 = add nuw nsw i64 %13, 1
  %24 = icmp eq i64 %23, %11
  br i1 %24, label %25, label %12, !llvm.loop !633

25:                                               ; preds = %12
  %26 = add nuw nsw i64 %3, 1
  %27 = icmp eq i64 %26, 5
  br i1 %27, label %28, label %2, !llvm.loop !634

28:                                               ; preds = %25
  %29 = sub nsw i64 0, %0
  br label %30

30:                                               ; preds = %44, %28
  %31 = phi i64 [ 0, %28 ], [ %53, %44 ]
  %32 = phi i64 [ %29, %28 ], [ %52, %44 ]
  %33 = phi ptr [ @decwin, %28 ], [ %54, %44 ]
  %34 = trunc i64 %31 to i32
  %35 = icmp ult ptr %33, getelementptr inbounds ([544 x double], ptr @decwin, i64 0, i64 528)
  br i1 %35, label %36, label %44

36:                                               ; preds = %30
  %37 = getelementptr inbounds [257 x i64], ptr @intwinbase, i64 0, i64 %31
  %38 = load i64, ptr %37, align 8, !tbaa !36
  %39 = sitofp i64 %38 to double
  %40 = fmul double %39, 0x3EF0000000000000
  %41 = sitofp i64 %32 to double
  %42 = fmul double %40, %41
  store double %42, ptr %33, align 8, !tbaa !39
  %43 = getelementptr inbounds double, ptr %33, i64 16
  store double %42, ptr %43, align 8, !tbaa !39
  br label %44

44:                                               ; preds = %36, %30
  %45 = and i32 %34, 31
  %46 = icmp eq i32 %45, 31
  %47 = select i1 %46, i64 -1023, i64 0
  %48 = getelementptr inbounds double, ptr %33, i64 %47
  %49 = and i32 %34, 63
  %50 = icmp eq i32 %49, 63
  %51 = sub nsw i64 0, %32
  %52 = select i1 %50, i64 %51, i64 %32
  %53 = add nuw nsw i64 %31, 1
  %54 = getelementptr inbounds double, ptr %48, i64 32
  %55 = icmp eq i64 %53, 256
  br i1 %55, label %56, label %30, !llvm.loop !635

56:                                               ; preds = %70, %44
  %57 = phi i64 [ %80, %70 ], [ 256, %44 ]
  %58 = phi i64 [ %78, %70 ], [ %52, %44 ]
  %59 = phi ptr [ %81, %70 ], [ %54, %44 ]
  %60 = phi i32 [ %79, %70 ], [ 256, %44 ]
  %61 = icmp ult ptr %59, getelementptr inbounds ([544 x double], ptr @decwin, i64 0, i64 528)
  br i1 %61, label %62, label %70

62:                                               ; preds = %56
  %63 = getelementptr inbounds [257 x i64], ptr @intwinbase, i64 0, i64 %57
  %64 = load i64, ptr %63, align 8, !tbaa !36
  %65 = sitofp i64 %64 to double
  %66 = fmul double %65, 0x3EF0000000000000
  %67 = sitofp i64 %58 to double
  %68 = fmul double %66, %67
  store double %68, ptr %59, align 8, !tbaa !39
  %69 = getelementptr inbounds double, ptr %59, i64 16
  store double %68, ptr %69, align 8, !tbaa !39
  br label %70

70:                                               ; preds = %62, %56
  %71 = and i32 %60, 31
  %72 = icmp eq i32 %71, 31
  %73 = select i1 %72, i64 -1023, i64 0
  %74 = getelementptr inbounds double, ptr %59, i64 %73
  %75 = and i32 %60, 63
  %76 = icmp eq i32 %75, 63
  %77 = sub nsw i64 0, %58
  %78 = select i1 %76, i64 %77, i64 %58
  %79 = add nuw nsw i32 %60, 1
  %80 = add nsw i64 %57, -1
  %81 = getelementptr inbounds double, ptr %74, i64 32
  %82 = icmp eq i32 %79, 512
  br i1 %82, label %83, label %56, !llvm.loop !636

83:                                               ; preds = %70
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.umax.i32(i32, i32) #9

; Function Attrs: nounwind optsize uwtable
define internal i32 @count_bits(ptr nocapture noundef readonly %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #4 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6) #56
  store i32 0, ptr %6, align 4, !tbaa !11
  %7 = getelementptr inbounds %struct.gr_info, ptr %3, i64 0, i32 3
  %8 = load i32, ptr %7, align 4, !tbaa !185
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds [256 x double], ptr @ipow20, i64 0, i64 %9
  %11 = load double, ptr %10, align 8, !tbaa !39
  %12 = fdiv double 8.206000e+03, %11
  br label %16

13:                                               ; preds = %16
  %14 = add nuw nsw i64 %17, 1
  %15 = icmp eq i64 %14, 576
  br i1 %15, label %21, label %16, !llvm.loop !637

16:                                               ; preds = %13, %4
  %17 = phi i64 [ 0, %4 ], [ %14, %13 ]
  %18 = getelementptr inbounds double, ptr %2, i64 %17
  %19 = load double, ptr %18, align 8, !tbaa !39
  %20 = fcmp ogt double %19, %12
  br i1 %20, label %202, label %13

21:                                               ; preds = %13
  %22 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 60
  %23 = load i32, ptr %22, align 4, !tbaa !638
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %26, label %25

25:                                               ; preds = %21
  tail call void @quantize_xrpow(ptr noundef nonnull %2, ptr noundef %1, ptr noundef %3) #55
  br label %27

26:                                               ; preds = %21
  tail call void @quantize_xrpow_ISO(ptr noundef nonnull %2, ptr noundef %1, ptr noundef %3) #55
  br label %27

27:                                               ; preds = %26, %25
  %28 = getelementptr inbounds %struct.gr_info, ptr %3, i64 0, i32 6
  %29 = load i32, ptr %28, align 8, !tbaa !188
  %30 = icmp eq i32 %29, 2
  br i1 %30, label %31, label %40

31:                                               ; preds = %27
  %32 = getelementptr inbounds i32, ptr %1, i64 36
  %33 = call fastcc i32 @choose_table_short(ptr noundef %1, ptr noundef nonnull %32, ptr noundef nonnull %6) #57
  %34 = getelementptr inbounds %struct.gr_info, ptr %3, i64 0, i32 8
  store i32 %33, ptr %34, align 8, !tbaa !11
  %35 = getelementptr inbounds i32, ptr %1, i64 576
  %36 = call fastcc i32 @choose_table_short(ptr noundef nonnull %32, ptr noundef nonnull %35, ptr noundef nonnull %6) #57
  %37 = getelementptr inbounds %struct.gr_info, ptr %3, i64 0, i32 8, i64 1
  store i32 %36, ptr %37, align 4, !tbaa !11
  %38 = getelementptr inbounds %struct.gr_info, ptr %3, i64 0, i32 1
  store i32 288, ptr %38, align 4, !tbaa !184
  %39 = load i32, ptr %6, align 4, !tbaa !11
  br label %202

40:                                               ; preds = %27
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5) #56
  br label %41

41:                                               ; preds = %46, %40
  %42 = phi i64 [ %51, %46 ], [ 576, %40 ]
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %46

44:                                               ; preds = %41
  %45 = getelementptr inbounds %struct.gr_info, ptr %3, i64 0, i32 2
  store i32 0, ptr %45, align 8, !tbaa !235
  br label %115

46:                                               ; preds = %41
  %47 = add nuw nsw i64 %42, 4294967295
  %48 = and i64 %47, 4294967295
  %49 = getelementptr inbounds i32, ptr %1, i64 %48
  %50 = load i32, ptr %49, align 4, !tbaa !11
  %51 = add nsw i64 %42, -2
  %52 = and i64 %51, 4294967294
  %53 = getelementptr inbounds i32, ptr %1, i64 %52
  %54 = load i32, ptr %53, align 4, !tbaa !11
  %55 = or i32 %54, %50
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %41, label %57, !llvm.loop !639

57:                                               ; preds = %46
  %.lcssa6 = phi i64 [ %42, %46 ]
  %58 = trunc i64 %.lcssa6 to i32
  %59 = getelementptr inbounds %struct.gr_info, ptr %3, i64 0, i32 2
  store i32 %58, ptr %59, align 8, !tbaa !235
  %60 = icmp sgt i32 %58, 3
  br i1 %60, label %61, label %115

61:                                               ; preds = %57
  %62 = load ptr, ptr getelementptr inbounds ([34 x %struct.huffcodetab], ptr @ht, i64 0, i64 32, i32 3), align 16
  br label %63

63:                                               ; preds = %87, %61
  %64 = phi i64 [ %79, %87 ], [ %.lcssa6, %61 ]
  %65 = phi i32 [ %108, %87 ], [ 0, %61 ]
  %66 = phi i32 [ %102, %87 ], [ 0, %61 ]
  %67 = add i64 %64, 4294967295
  %68 = and i64 %67, 4294967295
  %69 = getelementptr inbounds i32, ptr %1, i64 %68
  %70 = load i32, ptr %69, align 4, !tbaa !11
  %71 = add i64 %64, 4294967294
  %72 = and i64 %71, 4294967294
  %73 = getelementptr inbounds i32, ptr %1, i64 %72
  %74 = load i32, ptr %73, align 4, !tbaa !11
  %75 = add i64 %64, 4294967293
  %76 = and i64 %75, 4294967295
  %77 = getelementptr inbounds i32, ptr %1, i64 %76
  %78 = load i32, ptr %77, align 4, !tbaa !11
  %79 = add nsw i64 %64, -4
  %80 = and i64 %79, 4294967294
  %81 = getelementptr inbounds i32, ptr %1, i64 %80
  %82 = load i32, ptr %81, align 4, !tbaa !11
  %83 = or i32 %74, %70
  %84 = or i32 %83, %78
  %85 = or i32 %84, %82
  %86 = icmp ugt i32 %85, 1
  br i1 %86, label %110, label %87

87:                                               ; preds = %63
  %88 = add nsw i32 %70, %66
  %89 = icmp ne i32 %74, 0
  %90 = add nuw nsw i32 %70, 2
  %91 = zext i1 %89 to i32
  %92 = add nsw i32 %88, %91
  %93 = select i1 %89, i32 %90, i32 %70
  %94 = icmp ne i32 %78, 0
  %95 = add nuw nsw i32 %93, 4
  %96 = zext i1 %94 to i32
  %97 = add nsw i32 %92, %96
  %98 = select i1 %94, i32 %95, i32 %93
  %99 = icmp ne i32 %82, 0
  %100 = add nuw nsw i32 %98, 8
  %101 = zext i1 %99 to i32
  %102 = add nsw i32 %97, %101
  %103 = select i1 %99, i32 %100, i32 %98
  %104 = zext i32 %103 to i64
  %105 = getelementptr inbounds i8, ptr %62, i64 %104
  %106 = load i8, ptr %105, align 1, !tbaa !15
  %107 = zext i8 %106 to i32
  %108 = add nuw nsw i32 %65, %107
  %109 = icmp ugt i64 %64, 7
  br i1 %109, label %63, label %110, !llvm.loop !640

110:                                              ; preds = %87, %63
  %111 = phi i32 [ %102, %87 ], [ %66, %63 ]
  %112 = phi i64 [ %79, %87 ], [ %64, %63 ]
  %113 = phi i32 [ %108, %87 ], [ %65, %63 ]
  %114 = trunc i64 %112 to i32
  br label %115

115:                                              ; preds = %110, %57, %44
  %116 = phi i32 [ %58, %57 ], [ 0, %44 ], [ %58, %110 ]
  %117 = phi i32 [ 0, %57 ], [ 0, %44 ], [ %111, %110 ]
  %118 = phi i32 [ %58, %57 ], [ 0, %44 ], [ %114, %110 ]
  %119 = phi i32 [ 0, %57 ], [ 0, %44 ], [ %113, %110 ]
  %120 = sub i32 %116, %118
  %121 = icmp sge i32 %119, %120
  %122 = tail call i32 @llvm.smin.i32(i32 %119, i32 %120)
  %123 = zext i1 %121 to i32
  %124 = add nsw i32 %122, %117
  store i32 %124, ptr %5, align 4
  %125 = getelementptr inbounds %struct.gr_info, ptr %3, i64 0, i32 14
  store i32 %123, ptr %125, align 8
  %126 = getelementptr inbounds %struct.gr_info, ptr %3, i64 0, i32 18
  store i32 %124, ptr %126, align 8, !tbaa !594
  %127 = getelementptr inbounds %struct.gr_info, ptr %3, i64 0, i32 1
  store i32 %118, ptr %127, align 4, !tbaa !184
  %128 = icmp eq i32 %118, 0
  br i1 %128, label %194, label %129

129:                                              ; preds = %115
  %130 = icmp eq i32 %29, 0
  br i1 %130, label %131, label %174

131:                                              ; preds = %131, %129
  %132 = phi i64 [ %133, %131 ], [ 0, %129 ]
  %133 = add nuw nsw i64 %132, 1
  %134 = getelementptr inbounds [23 x i32], ptr @scalefac_band, i64 0, i64 %133
  %135 = load i32, ptr %134, align 4, !tbaa !11
  %136 = icmp slt i32 %135, %118
  br i1 %136, label %131, label %137, !llvm.loop !641

137:                                              ; preds = %131
  %.lcssa4 = phi i64 [ %133, %131 ]
  %138 = getelementptr inbounds [23 x %struct.anon.56], ptr @subdv_table, i64 0, i64 %.lcssa4
  %139 = load i32, ptr %138, align 8, !tbaa !642
  %140 = sext i32 %139 to i64
  br label %141

141:                                              ; preds = %141, %137
  %142 = phi i64 [ %147, %141 ], [ %140, %137 ]
  %143 = add nsw i64 %142, 1
  %144 = getelementptr inbounds [23 x i32], ptr @scalefac_band, i64 0, i64 %143
  %145 = load i32, ptr %144, align 4, !tbaa !11
  %146 = icmp sgt i32 %145, %118
  %147 = add i64 %142, -1
  br i1 %146, label %141, label %148, !llvm.loop !644

148:                                              ; preds = %141
  %.lcssa3 = phi i64 [ %142, %141 ]
  %.lcssa2 = phi i64 [ %143, %141 ]
  %149 = trunc i64 %.lcssa3 to i32
  %150 = getelementptr inbounds %struct.gr_info, ptr %3, i64 0, i32 10
  store i32 %149, ptr %150, align 8, !tbaa !193
  %151 = getelementptr inbounds [23 x %struct.anon.56], ptr @subdv_table, i64 0, i64 %.lcssa4, i32 1
  %152 = load i32, ptr %151, align 4, !tbaa !645
  %153 = add i32 %149, 2
  br label %154

154:                                              ; preds = %154, %148
  %155 = phi i32 [ %152, %148 ], [ %161, %154 ]
  %156 = add i32 %153, %155
  %157 = zext i32 %156 to i64
  %158 = getelementptr inbounds [23 x i32], ptr @scalefac_band, i64 0, i64 %157
  %159 = load i32, ptr %158, align 4, !tbaa !11
  %160 = icmp sgt i32 %159, %118
  %161 = add nsw i32 %155, -1
  br i1 %160, label %154, label %162, !llvm.loop !646

162:                                              ; preds = %154
  %.lcssa1 = phi i32 [ %155, %154 ]
  %.lcssa = phi ptr [ %158, %154 ]
  %163 = getelementptr inbounds %struct.gr_info, ptr %3, i64 0, i32 11
  store i32 %.lcssa1, ptr %163, align 4, !tbaa !194
  %164 = and i64 %.lcssa2, 4294967295
  %165 = getelementptr inbounds [23 x i32], ptr @scalefac_band, i64 0, i64 %164
  %166 = load i32, ptr %165, align 4, !tbaa !11
  %167 = load i32, ptr %.lcssa, align 4, !tbaa !11
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds i32, ptr %1, i64 %168
  %170 = sext i32 %118 to i64
  %171 = getelementptr inbounds i32, ptr %1, i64 %170
  %172 = call fastcc i32 @choose_table(ptr noundef %169, ptr noundef nonnull %171, ptr noundef nonnull %5) #57
  %173 = getelementptr inbounds %struct.gr_info, ptr %3, i64 0, i32 8, i64 2
  store i32 %172, ptr %173, align 8, !tbaa !11
  br label %180

174:                                              ; preds = %129
  %175 = getelementptr inbounds %struct.gr_info, ptr %3, i64 0, i32 10
  store i32 7, ptr %175, align 8, !tbaa !193
  %176 = getelementptr inbounds %struct.gr_info, ptr %3, i64 0, i32 11
  store i32 13, ptr %176, align 4, !tbaa !194
  %177 = load i32, ptr getelementptr inbounds (%struct.scalefac_struct, ptr @scalefac_band, i64 0, i32 0, i64 8), align 4, !tbaa !11
  %178 = tail call i32 @llvm.smin.i32(i32 %177, i32 %118)
  %179 = sext i32 %118 to i64
  br label %180

180:                                              ; preds = %174, %162
  %181 = phi i64 [ %179, %174 ], [ %168, %162 ]
  %182 = phi i32 [ %178, %174 ], [ %166, %162 ]
  %183 = sext i32 %182 to i64
  %184 = getelementptr inbounds i32, ptr %1, i64 %183
  %185 = call fastcc i32 @choose_table(ptr noundef %1, ptr noundef %184, ptr noundef nonnull %5) #57
  %186 = getelementptr inbounds %struct.gr_info, ptr %3, i64 0, i32 8
  store i32 %185, ptr %186, align 8, !tbaa !11
  %187 = getelementptr inbounds i32, ptr %1, i64 %181
  %188 = call fastcc i32 @choose_table(ptr noundef %184, ptr noundef %187, ptr noundef nonnull %5) #57
  %189 = getelementptr inbounds %struct.gr_info, ptr %3, i64 0, i32 8, i64 1
  store i32 %188, ptr %189, align 4, !tbaa !11
  %190 = load i32, ptr %5, align 4, !tbaa !11
  %191 = getelementptr inbounds %struct.gr_info, ptr %3, i64 0, i32 2
  %192 = load i32, ptr %191, align 8, !tbaa !235
  %193 = load i32, ptr %127, align 4, !tbaa !184
  br label %194

194:                                              ; preds = %180, %115
  %195 = phi i32 [ 0, %115 ], [ %193, %180 ]
  %196 = phi i32 [ %116, %115 ], [ %192, %180 ]
  %197 = phi i32 [ %124, %115 ], [ %190, %180 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5) #56
  %198 = getelementptr inbounds %struct.gr_info, ptr %3, i64 0, i32 2
  %199 = sub i32 %196, %195
  %200 = lshr i32 %199, 2
  store i32 %200, ptr %198, align 8, !tbaa !235
  %201 = lshr i32 %195, 1
  store i32 %201, ptr %127, align 4, !tbaa !184
  br label %202

202:                                              ; preds = %194, %31, %16
  %203 = phi i32 [ %197, %194 ], [ %39, %31 ], [ 100000, %16 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6) #56
  ret i32 %203
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal fastcc i32 @choose_table_short(ptr noundef readonly %0, ptr noundef readnone %1, ptr nocapture noundef %2) unnamed_addr #15 {
  %4 = icmp ult ptr %0, %1
  br i1 %4, label %5, label %244

5:                                                ; preds = %5, %3
  %6 = phi i32 [ %13, %5 ], [ 0, %3 ]
  %7 = phi ptr [ %11, %5 ], [ %0, %3 ]
  %8 = getelementptr inbounds i32, ptr %7, i64 1
  %9 = load i32, ptr %7, align 4, !tbaa !11
  %10 = tail call i32 @llvm.smax.i32(i32 %6, i32 %9)
  %11 = getelementptr inbounds i32, ptr %7, i64 2
  %12 = load i32, ptr %8, align 4, !tbaa !11
  %13 = tail call i32 @llvm.smax.i32(i32 %10, i32 %12)
  %14 = icmp ult ptr %11, %1
  br i1 %14, label %5, label %15, !llvm.loop !647

15:                                               ; preds = %5
  %.lcssa13 = phi i32 [ %13, %5 ]
  %16 = icmp ugt i32 %.lcssa13, 8206
  br i1 %16, label %241, label %17

17:                                               ; preds = %15
  %18 = icmp ult i32 %.lcssa13, 16
  br i1 %18, label %19, label %127

19:                                               ; preds = %17
  %20 = icmp eq i32 %.lcssa13, 0
  br i1 %20, label %244, label %21

21:                                               ; preds = %19
  %22 = add nsw i32 %.lcssa13, -1
  %23 = zext i32 %22 to i64
  %24 = getelementptr inbounds [15 x i32], ptr @huf_tbl_noESC, i64 0, i64 %23
  %25 = load i32, ptr %24, align 4, !tbaa !11
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds [34 x %struct.huffcodetab], ptr @ht, i64 0, i64 %26, i32 3
  %28 = load ptr, ptr %27, align 8, !tbaa !242
  br label %29

29:                                               ; preds = %55, %21
  %30 = phi ptr [ %0, %21 ], [ %56, %55 ]
  %31 = phi i32 [ 0, %21 ], [ %57, %55 ]
  %32 = phi ptr [ @cb_esc_buf, %21 ], [ %47, %55 ]
  %33 = phi i32 [ 0, %21 ], [ %52, %55 ]
  %34 = phi i32 [ 0, %21 ], [ %46, %55 ]
  %35 = getelementptr inbounds i32, ptr %30, i64 3
  %36 = load i32, ptr %35, align 4, !tbaa !11
  %37 = getelementptr inbounds i32, ptr %30, i64 1
  %38 = load i32, ptr %30, align 4, !tbaa !11
  %39 = icmp ne i32 %38, 0
  %40 = shl i32 %38, 4
  %41 = zext i1 %39 to i32
  %42 = icmp ne i32 %36, 0
  %43 = add nsw i32 %40, %36
  %44 = zext i1 %42 to i32
  %45 = add i32 %34, %44
  %46 = add i32 %45, %41
  %47 = getelementptr inbounds i32, ptr %32, i64 1
  store i32 %43, ptr %32, align 4, !tbaa !11
  %48 = sext i32 %43 to i64
  %49 = getelementptr inbounds i8, ptr %28, i64 %48
  %50 = load i8, ptr %49, align 1, !tbaa !15
  %51 = zext i8 %50 to i32
  %52 = add nuw nsw i32 %33, %51
  %53 = add nuw nsw i32 %31, 1
  %54 = icmp eq i32 %53, 3
  br i1 %54, label %58, label %55

55:                                               ; preds = %58, %29
  %56 = phi ptr [ %37, %29 ], [ %59, %58 ]
  %57 = phi i32 [ %53, %29 ], [ 0, %58 ]
  br label %29, !llvm.loop !648

58:                                               ; preds = %29
  %59 = getelementptr inbounds i32, ptr %30, i64 4
  %60 = icmp ult ptr %59, %1
  br i1 %60, label %55, label %61

61:                                               ; preds = %58
  %.lcssa6 = phi ptr [ %32, %58 ]
  %.lcssa5 = phi i32 [ %46, %58 ]
  %.lcssa4 = phi ptr [ %47, %58 ]
  %.lcssa3 = phi i32 [ %52, %58 ]
  store ptr %.lcssa4, ptr @cb_esc_end, align 8, !tbaa !7
  %62 = add nsw i32 %.lcssa3, %.lcssa5
  switch i32 %25, label %123 [
    i32 7, label %63
    i32 10, label %63
    i32 2, label %83
    i32 5, label %83
    i32 13, label %106
  ]

63:                                               ; preds = %61, %61
  %64 = add nuw nsw i32 %25, 1
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds [34 x %struct.huffcodetab], ptr @ht, i64 0, i64 %65, i32 3
  %67 = load ptr, ptr %66, align 8, !tbaa !242
  br label %68

68:                                               ; preds = %68, %63
  %69 = phi i32 [ %.lcssa5, %63 ], [ %77, %68 ]
  %70 = phi ptr [ @cb_esc_buf, %63 ], [ %71, %68 ]
  %71 = getelementptr inbounds i32, ptr %70, i64 1
  %72 = load i32, ptr %70, align 4, !tbaa !11
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds i8, ptr %67, i64 %73
  %75 = load i8, ptr %74, align 1, !tbaa !15
  %76 = zext i8 %75 to i32
  %77 = add nsw i32 %69, %76
  %78 = icmp ult ptr %70, %.lcssa6
  br i1 %78, label %68, label %79, !llvm.loop !649

79:                                               ; preds = %68
  %.lcssa1 = phi i32 [ %77, %68 ]
  %80 = icmp sgt i32 %62, %.lcssa1
  %81 = select i1 %80, i32 %64, i32 %25
  %82 = tail call i32 @llvm.smin.i32(i32 %62, i32 %.lcssa1)
  br label %83

83:                                               ; preds = %79, %61, %61
  %84 = phi i32 [ %25, %61 ], [ %25, %61 ], [ %81, %79 ]
  %85 = phi i32 [ %62, %61 ], [ %62, %61 ], [ %82, %79 ]
  %86 = phi i32 [ %25, %61 ], [ %25, %61 ], [ %64, %79 ]
  %87 = add nsw i32 %86, 1
  %88 = zext i32 %87 to i64
  %89 = getelementptr inbounds [34 x %struct.huffcodetab], ptr @ht, i64 0, i64 %88, i32 3
  %90 = load ptr, ptr %89, align 8, !tbaa !242
  br label %91

91:                                               ; preds = %91, %83
  %92 = phi i32 [ %.lcssa5, %83 ], [ %100, %91 ]
  %93 = phi ptr [ @cb_esc_buf, %83 ], [ %94, %91 ]
  %94 = getelementptr inbounds i32, ptr %93, i64 1
  %95 = load i32, ptr %93, align 4, !tbaa !11
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds i8, ptr %90, i64 %96
  %98 = load i8, ptr %97, align 1, !tbaa !15
  %99 = zext i8 %98 to i32
  %100 = add nsw i32 %92, %99
  %101 = icmp ult ptr %93, %.lcssa6
  br i1 %101, label %91, label %102, !llvm.loop !649

102:                                              ; preds = %91
  %.lcssa = phi i32 [ %100, %91 ]
  %103 = icmp sgt i32 %85, %.lcssa
  %104 = select i1 %103, i32 %87, i32 %84
  %105 = tail call i32 @llvm.smin.i32(i32 %85, i32 %.lcssa)
  br label %123

106:                                              ; preds = %61
  %107 = load ptr, ptr getelementptr inbounds ([34 x %struct.huffcodetab], ptr @ht, i64 0, i64 15, i32 3), align 8, !tbaa !242
  br label %108

108:                                              ; preds = %108, %106
  %109 = phi i32 [ %.lcssa5, %106 ], [ %117, %108 ]
  %110 = phi ptr [ @cb_esc_buf, %106 ], [ %111, %108 ]
  %111 = getelementptr inbounds i32, ptr %110, i64 1
  %112 = load i32, ptr %110, align 4, !tbaa !11
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds i8, ptr %107, i64 %113
  %115 = load i8, ptr %114, align 1, !tbaa !15
  %116 = zext i8 %115 to i32
  %117 = add nsw i32 %109, %116
  %118 = icmp ult ptr %110, %.lcssa6
  br i1 %118, label %108, label %119, !llvm.loop !649

119:                                              ; preds = %108
  %.lcssa2 = phi i32 [ %117, %108 ]
  %120 = icmp sgt i32 %62, %.lcssa2
  %121 = select i1 %120, i32 15, i32 13
  %122 = tail call i32 @llvm.smin.i32(i32 %62, i32 %.lcssa2)
  br label %123

123:                                              ; preds = %119, %102, %61
  %124 = phi i32 [ %25, %61 ], [ %104, %102 ], [ %121, %119 ]
  %125 = phi i32 [ %62, %61 ], [ %105, %102 ], [ %122, %119 ]
  %126 = load i32, ptr %2, align 4, !tbaa !11
  br label %236

127:                                              ; preds = %17
  %128 = add nsw i32 %.lcssa13, -15
  br label %129

129:                                              ; preds = %134, %127
  %130 = phi i64 [ 24, %127 ], [ %135, %134 ]
  %131 = getelementptr inbounds [34 x %struct.huffcodetab], ptr @ht, i64 0, i64 %130, i32 1
  %132 = load i32, ptr %131, align 4, !tbaa !650
  %133 = icmp slt i32 %132, %128
  br i1 %133, label %134, label %137

134:                                              ; preds = %129
  %135 = add nuw nsw i64 %130, 1
  %136 = icmp eq i64 %135, 32
  br i1 %136, label %141, label %129, !llvm.loop !651

137:                                              ; preds = %129
  %.lcssa11 = phi i64 [ %130, %129 ]
  %138 = trunc i64 %.lcssa11 to i32
  %139 = add i32 %138, -8
  %140 = icmp slt i32 %138, 32
  br i1 %140, label %145, label %141

141:                                              ; preds = %137, %134
  %142 = phi i32 [ %139, %137 ], [ 24, %134 ]
  %143 = phi i32 [ %138, %137 ], [ 32, %134 ]
  %144 = zext i32 %143 to i64
  br label %160

145:                                              ; preds = %137
  %146 = and i64 %.lcssa11, 4294967295
  %147 = add nsw i64 %146, -8
  %148 = tail call i32 @llvm.smax.i32(i32 %139, i32 23)
  %149 = add nuw nsw i32 %148, 1
  br label %150

150:                                              ; preds = %155, %145
  %151 = phi i64 [ %147, %145 ], [ %156, %155 ]
  %152 = getelementptr inbounds [34 x %struct.huffcodetab], ptr @ht, i64 0, i64 %151, i32 1
  %153 = load i32, ptr %152, align 4, !tbaa !650
  %154 = icmp slt i32 %153, %128
  br i1 %154, label %155, label %158

155:                                              ; preds = %150
  %156 = add nuw nsw i64 %151, 1
  %157 = icmp ult i64 %151, 23
  br i1 %157, label %150, label %160, !llvm.loop !652

158:                                              ; preds = %150
  %.lcssa10 = phi i64 [ %151, %150 ]
  %159 = trunc i64 %.lcssa10 to i32
  br label %160

160:                                              ; preds = %158, %155, %141
  %161 = phi i32 [ %143, %141 ], [ %138, %158 ], [ %138, %155 ]
  %162 = phi i64 [ %144, %141 ], [ %146, %158 ], [ %146, %155 ]
  %163 = phi i32 [ %142, %141 ], [ %159, %158 ], [ %149, %155 ]
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds [34 x %struct.huffcodetab], ptr @ht, i64 0, i64 %164
  %166 = load i32, ptr %165, align 8, !tbaa !239
  %167 = getelementptr inbounds [34 x %struct.huffcodetab], ptr @ht, i64 0, i64 %162
  %168 = load i32, ptr %167, align 8, !tbaa !239
  %169 = load ptr, ptr getelementptr inbounds ([34 x %struct.huffcodetab], ptr @ht, i64 0, i64 16, i32 3), align 16, !tbaa !242
  %170 = load ptr, ptr getelementptr inbounds ([34 x %struct.huffcodetab], ptr @ht, i64 0, i64 24, i32 3), align 16, !tbaa !242
  br label %171

171:                                              ; preds = %227, %160
  %172 = phi ptr [ %0, %160 ], [ %228, %227 ]
  %173 = phi i32 [ 0, %160 ], [ %.lcssa9, %227 ]
  %174 = phi i32 [ 0, %160 ], [ %.lcssa8, %227 ]
  %175 = phi i32 [ 0, %160 ], [ %.lcssa7, %227 ]
  br label %176

176:                                              ; preds = %211, %171
  %177 = phi i32 [ 0, %171 ], [ %225, %211 ]
  %178 = phi i32 [ %175, %171 ], [ %224, %211 ]
  %179 = phi i32 [ %174, %171 ], [ %220, %211 ]
  %180 = phi i32 [ %173, %171 ], [ %212, %211 ]
  %181 = phi ptr [ %172, %171 ], [ %184, %211 ]
  %182 = getelementptr inbounds i32, ptr %181, i64 3
  %183 = load i32, ptr %182, align 4, !tbaa !11
  %184 = getelementptr inbounds i32, ptr %181, i64 1
  %185 = load i32, ptr %181, align 4, !tbaa !11
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %196, label %187

187:                                              ; preds = %176
  %188 = add nsw i32 %180, 1
  %189 = icmp sgt i32 %185, 14
  %190 = select i1 %189, i32 %166, i32 0
  %191 = add nsw i32 %190, %179
  %192 = select i1 %189, i32 %168, i32 0
  %193 = add nsw i32 %192, %178
  %194 = shl nsw i32 %185, 4
  %195 = select i1 %189, i32 240, i32 %194
  br label %196

196:                                              ; preds = %187, %176
  %197 = phi i32 [ %188, %187 ], [ %180, %176 ]
  %198 = phi i32 [ %191, %187 ], [ %179, %176 ]
  %199 = phi i32 [ %193, %187 ], [ %178, %176 ]
  %200 = phi i32 [ %195, %187 ], [ 0, %176 ]
  %201 = icmp eq i32 %183, 0
  br i1 %201, label %211, label %202

202:                                              ; preds = %196
  %203 = add nsw i32 %197, 1
  %204 = icmp sgt i32 %183, 14
  %205 = select i1 %204, i32 %166, i32 0
  %206 = add nsw i32 %198, %205
  %207 = select i1 %204, i32 %168, i32 0
  %208 = add nsw i32 %199, %207
  %209 = select i1 %204, i32 15, i32 %183
  %210 = add nsw i32 %200, %209
  br label %211

211:                                              ; preds = %202, %196
  %212 = phi i32 [ %203, %202 ], [ %197, %196 ]
  %213 = phi i32 [ %206, %202 ], [ %198, %196 ]
  %214 = phi i32 [ %208, %202 ], [ %199, %196 ]
  %215 = phi i32 [ %210, %202 ], [ %200, %196 ]
  %216 = sext i32 %215 to i64
  %217 = getelementptr inbounds i8, ptr %169, i64 %216
  %218 = load i8, ptr %217, align 1, !tbaa !15
  %219 = zext i8 %218 to i32
  %220 = add nsw i32 %213, %219
  %221 = getelementptr inbounds i8, ptr %170, i64 %216
  %222 = load i8, ptr %221, align 1, !tbaa !15
  %223 = zext i8 %222 to i32
  %224 = add nsw i32 %214, %223
  %225 = add nuw nsw i32 %177, 1
  %226 = icmp eq i32 %225, 3
  br i1 %226, label %227, label %176, !llvm.loop !653

227:                                              ; preds = %211
  %.lcssa9 = phi i32 [ %212, %211 ]
  %.lcssa8 = phi i32 [ %220, %211 ]
  %.lcssa7 = phi i32 [ %224, %211 ]
  %228 = getelementptr i8, ptr %172, i64 24
  %229 = icmp ult ptr %228, %1
  br i1 %229, label %171, label %230, !llvm.loop !654

230:                                              ; preds = %227
  %.lcssa9.lcssa = phi i32 [ %.lcssa9, %227 ]
  %.lcssa8.lcssa = phi i32 [ %.lcssa8, %227 ]
  %.lcssa7.lcssa = phi i32 [ %.lcssa7, %227 ]
  %231 = icmp sgt i32 %.lcssa8.lcssa, %.lcssa7.lcssa
  %232 = select i1 %231, i32 %161, i32 %163
  %233 = tail call i32 @llvm.smin.i32(i32 %.lcssa8.lcssa, i32 %.lcssa7.lcssa)
  %234 = add nsw i32 %233, %.lcssa9.lcssa
  %235 = load i32, ptr %2, align 4, !tbaa !11
  br label %236

236:                                              ; preds = %230, %123
  %237 = phi i32 [ %235, %230 ], [ %125, %123 ]
  %238 = phi i32 [ %234, %230 ], [ %126, %123 ]
  %239 = phi i32 [ %232, %230 ], [ %124, %123 ]
  %240 = add nsw i32 %238, %237
  br label %241

241:                                              ; preds = %236, %15
  %242 = phi i32 [ 100000, %15 ], [ %240, %236 ]
  %243 = phi i32 [ -1, %15 ], [ %239, %236 ]
  store i32 %242, ptr %2, align 4, !tbaa !11
  br label %244

244:                                              ; preds = %241, %19, %3
  %245 = phi i32 [ 0, %19 ], [ 0, %3 ], [ %243, %241 ]
  ret i32 %245
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal fastcc i32 @choose_table(ptr noundef readonly %0, ptr noundef readnone %1, ptr nocapture noundef %2) unnamed_addr #15 {
  %4 = icmp ult ptr %0, %1
  br i1 %4, label %5, label %226

5:                                                ; preds = %5, %3
  %6 = phi i32 [ %13, %5 ], [ 0, %3 ]
  %7 = phi ptr [ %11, %5 ], [ %0, %3 ]
  %8 = getelementptr inbounds i32, ptr %7, i64 1
  %9 = load i32, ptr %7, align 4, !tbaa !11
  %10 = tail call i32 @llvm.smax.i32(i32 %6, i32 %9)
  %11 = getelementptr inbounds i32, ptr %7, i64 2
  %12 = load i32, ptr %8, align 4, !tbaa !11
  %13 = tail call i32 @llvm.smax.i32(i32 %10, i32 %12)
  %14 = icmp ult ptr %11, %1
  br i1 %14, label %5, label %15, !llvm.loop !647

15:                                               ; preds = %5
  %.lcssa13 = phi i32 [ %13, %5 ]
  %16 = icmp ugt i32 %.lcssa13, 8206
  br i1 %16, label %223, label %17

17:                                               ; preds = %15
  %18 = icmp ult i32 %.lcssa13, 16
  br i1 %18, label %19, label %119

19:                                               ; preds = %17
  %20 = icmp eq i32 %.lcssa13, 0
  br i1 %20, label %226, label %21

21:                                               ; preds = %19
  %22 = add nsw i32 %.lcssa13, -1
  %23 = zext i32 %22 to i64
  %24 = getelementptr inbounds [15 x i32], ptr @huf_tbl_noESC, i64 0, i64 %23
  %25 = load i32, ptr %24, align 4, !tbaa !11
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds [34 x %struct.huffcodetab], ptr @ht, i64 0, i64 %26, i32 3
  %28 = load ptr, ptr %27, align 8, !tbaa !242
  br label %29

29:                                               ; preds = %29, %21
  %30 = phi i32 [ 0, %21 ], [ %45, %29 ]
  %31 = phi i32 [ 0, %21 ], [ %51, %29 ]
  %32 = phi ptr [ @cb_esc_buf, %21 ], [ %46, %29 ]
  %33 = phi ptr [ %0, %21 ], [ %36, %29 ]
  %34 = getelementptr inbounds i32, ptr %33, i64 1
  %35 = load i32, ptr %33, align 4, !tbaa !11
  %36 = getelementptr inbounds i32, ptr %33, i64 2
  %37 = load i32, ptr %34, align 4, !tbaa !11
  %38 = icmp ne i32 %35, 0
  %39 = shl i32 %35, 4
  %40 = zext i1 %38 to i32
  %41 = add nsw i32 %30, %40
  %42 = icmp ne i32 %37, 0
  %43 = add nsw i32 %39, %37
  %44 = zext i1 %42 to i32
  %45 = add nsw i32 %41, %44
  %46 = getelementptr inbounds i32, ptr %32, i64 1
  store i32 %43, ptr %32, align 4, !tbaa !11
  %47 = sext i32 %43 to i64
  %48 = getelementptr inbounds i8, ptr %28, i64 %47
  %49 = load i8, ptr %48, align 1, !tbaa !15
  %50 = zext i8 %49 to i32
  %51 = add nuw nsw i32 %31, %50
  %52 = icmp ult ptr %36, %1
  br i1 %52, label %29, label %53, !llvm.loop !655

53:                                               ; preds = %29
  %.lcssa6 = phi ptr [ %32, %29 ]
  %.lcssa5 = phi i32 [ %45, %29 ]
  %.lcssa4 = phi ptr [ %46, %29 ]
  %.lcssa3 = phi i32 [ %51, %29 ]
  store ptr %.lcssa4, ptr @cb_esc_end, align 8, !tbaa !7
  %54 = add nsw i32 %.lcssa3, %.lcssa5
  switch i32 %25, label %115 [
    i32 7, label %55
    i32 10, label %55
    i32 2, label %75
    i32 5, label %75
    i32 13, label %98
  ]

55:                                               ; preds = %53, %53
  %56 = add nuw nsw i32 %25, 1
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds [34 x %struct.huffcodetab], ptr @ht, i64 0, i64 %57, i32 3
  %59 = load ptr, ptr %58, align 8, !tbaa !242
  br label %60

60:                                               ; preds = %60, %55
  %61 = phi i32 [ %.lcssa5, %55 ], [ %69, %60 ]
  %62 = phi ptr [ @cb_esc_buf, %55 ], [ %63, %60 ]
  %63 = getelementptr inbounds i32, ptr %62, i64 1
  %64 = load i32, ptr %62, align 4, !tbaa !11
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds i8, ptr %59, i64 %65
  %67 = load i8, ptr %66, align 1, !tbaa !15
  %68 = zext i8 %67 to i32
  %69 = add nsw i32 %61, %68
  %70 = icmp ult ptr %62, %.lcssa6
  br i1 %70, label %60, label %71, !llvm.loop !649

71:                                               ; preds = %60
  %.lcssa1 = phi i32 [ %69, %60 ]
  %72 = icmp sgt i32 %54, %.lcssa1
  %73 = select i1 %72, i32 %56, i32 %25
  %74 = tail call i32 @llvm.smin.i32(i32 %54, i32 %.lcssa1)
  br label %75

75:                                               ; preds = %71, %53, %53
  %76 = phi i32 [ %25, %53 ], [ %25, %53 ], [ %73, %71 ]
  %77 = phi i32 [ %54, %53 ], [ %54, %53 ], [ %74, %71 ]
  %78 = phi i32 [ %25, %53 ], [ %25, %53 ], [ %56, %71 ]
  %79 = add nsw i32 %78, 1
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds [34 x %struct.huffcodetab], ptr @ht, i64 0, i64 %80, i32 3
  %82 = load ptr, ptr %81, align 8, !tbaa !242
  br label %83

83:                                               ; preds = %83, %75
  %84 = phi i32 [ %.lcssa5, %75 ], [ %92, %83 ]
  %85 = phi ptr [ @cb_esc_buf, %75 ], [ %86, %83 ]
  %86 = getelementptr inbounds i32, ptr %85, i64 1
  %87 = load i32, ptr %85, align 4, !tbaa !11
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds i8, ptr %82, i64 %88
  %90 = load i8, ptr %89, align 1, !tbaa !15
  %91 = zext i8 %90 to i32
  %92 = add nsw i32 %84, %91
  %93 = icmp ult ptr %85, %.lcssa6
  br i1 %93, label %83, label %94, !llvm.loop !649

94:                                               ; preds = %83
  %.lcssa = phi i32 [ %92, %83 ]
  %95 = icmp sgt i32 %77, %.lcssa
  %96 = select i1 %95, i32 %79, i32 %76
  %97 = tail call i32 @llvm.smin.i32(i32 %77, i32 %.lcssa)
  br label %115

98:                                               ; preds = %53
  %99 = load ptr, ptr getelementptr inbounds ([34 x %struct.huffcodetab], ptr @ht, i64 0, i64 15, i32 3), align 8, !tbaa !242
  br label %100

100:                                              ; preds = %100, %98
  %101 = phi i32 [ %.lcssa5, %98 ], [ %109, %100 ]
  %102 = phi ptr [ @cb_esc_buf, %98 ], [ %103, %100 ]
  %103 = getelementptr inbounds i32, ptr %102, i64 1
  %104 = load i32, ptr %102, align 4, !tbaa !11
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds i8, ptr %99, i64 %105
  %107 = load i8, ptr %106, align 1, !tbaa !15
  %108 = zext i8 %107 to i32
  %109 = add nsw i32 %101, %108
  %110 = icmp ult ptr %102, %.lcssa6
  br i1 %110, label %100, label %111, !llvm.loop !649

111:                                              ; preds = %100
  %.lcssa2 = phi i32 [ %109, %100 ]
  %112 = icmp sgt i32 %54, %.lcssa2
  %113 = select i1 %112, i32 15, i32 13
  %114 = tail call i32 @llvm.smin.i32(i32 %54, i32 %.lcssa2)
  br label %115

115:                                              ; preds = %111, %94, %53
  %116 = phi i32 [ %25, %53 ], [ %96, %94 ], [ %113, %111 ]
  %117 = phi i32 [ %54, %53 ], [ %97, %94 ], [ %114, %111 ]
  %118 = load i32, ptr %2, align 4, !tbaa !11
  br label %218

119:                                              ; preds = %17
  %120 = add nsw i32 %.lcssa13, -15
  br label %121

121:                                              ; preds = %126, %119
  %122 = phi i64 [ 24, %119 ], [ %127, %126 ]
  %123 = getelementptr inbounds [34 x %struct.huffcodetab], ptr @ht, i64 0, i64 %122, i32 1
  %124 = load i32, ptr %123, align 4, !tbaa !650
  %125 = icmp slt i32 %124, %120
  br i1 %125, label %126, label %129

126:                                              ; preds = %121
  %127 = add nuw nsw i64 %122, 1
  %128 = icmp eq i64 %127, 32
  br i1 %128, label %133, label %121, !llvm.loop !656

129:                                              ; preds = %121
  %.lcssa11 = phi i64 [ %122, %121 ]
  %130 = trunc i64 %.lcssa11 to i32
  %131 = add i32 %130, -8
  %132 = icmp slt i32 %130, 32
  br i1 %132, label %137, label %133

133:                                              ; preds = %129, %126
  %134 = phi i32 [ %131, %129 ], [ 24, %126 ]
  %135 = phi i32 [ %130, %129 ], [ 32, %126 ]
  %136 = zext i32 %135 to i64
  br label %152

137:                                              ; preds = %129
  %138 = and i64 %.lcssa11, 4294967295
  %139 = add nsw i64 %138, -8
  %140 = tail call i32 @llvm.smax.i32(i32 %131, i32 23)
  %141 = add nuw nsw i32 %140, 1
  br label %142

142:                                              ; preds = %147, %137
  %143 = phi i64 [ %139, %137 ], [ %148, %147 ]
  %144 = getelementptr inbounds [34 x %struct.huffcodetab], ptr @ht, i64 0, i64 %143, i32 1
  %145 = load i32, ptr %144, align 4, !tbaa !650
  %146 = icmp slt i32 %145, %120
  br i1 %146, label %147, label %150

147:                                              ; preds = %142
  %148 = add nuw nsw i64 %143, 1
  %149 = icmp ult i64 %143, 23
  br i1 %149, label %142, label %152, !llvm.loop !657

150:                                              ; preds = %142
  %.lcssa10 = phi i64 [ %143, %142 ]
  %151 = trunc i64 %.lcssa10 to i32
  br label %152

152:                                              ; preds = %150, %147, %133
  %153 = phi i32 [ %135, %133 ], [ %130, %150 ], [ %130, %147 ]
  %154 = phi i64 [ %136, %133 ], [ %138, %150 ], [ %138, %147 ]
  %155 = phi i32 [ %134, %133 ], [ %151, %150 ], [ %141, %147 ]
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds [34 x %struct.huffcodetab], ptr @ht, i64 0, i64 %156
  %158 = load i32, ptr %157, align 8, !tbaa !239
  %159 = getelementptr inbounds [34 x %struct.huffcodetab], ptr @ht, i64 0, i64 %154
  %160 = load i32, ptr %159, align 8, !tbaa !239
  %161 = load ptr, ptr getelementptr inbounds ([34 x %struct.huffcodetab], ptr @ht, i64 0, i64 16, i32 3), align 16, !tbaa !242
  %162 = load ptr, ptr getelementptr inbounds ([34 x %struct.huffcodetab], ptr @ht, i64 0, i64 24, i32 3), align 16, !tbaa !242
  br label %163

163:                                              ; preds = %197, %152
  %164 = phi i32 [ 0, %152 ], [ %210, %197 ]
  %165 = phi i32 [ 0, %152 ], [ %206, %197 ]
  %166 = phi i32 [ 0, %152 ], [ %198, %197 ]
  %167 = phi ptr [ %0, %152 ], [ %170, %197 ]
  %168 = getelementptr inbounds i32, ptr %167, i64 1
  %169 = load i32, ptr %167, align 4, !tbaa !11
  %170 = getelementptr inbounds i32, ptr %167, i64 2
  %171 = load i32, ptr %168, align 4, !tbaa !11
  %172 = icmp eq i32 %169, 0
  br i1 %172, label %182, label %173

173:                                              ; preds = %163
  %174 = add nsw i32 %166, 1
  %175 = icmp sgt i32 %169, 14
  %176 = select i1 %175, i32 %158, i32 0
  %177 = add nsw i32 %176, %165
  %178 = select i1 %175, i32 %160, i32 0
  %179 = add nsw i32 %178, %164
  %180 = shl nsw i32 %169, 4
  %181 = select i1 %175, i32 240, i32 %180
  br label %182

182:                                              ; preds = %173, %163
  %183 = phi i32 [ %174, %173 ], [ %166, %163 ]
  %184 = phi i32 [ %177, %173 ], [ %165, %163 ]
  %185 = phi i32 [ %179, %173 ], [ %164, %163 ]
  %186 = phi i32 [ %181, %173 ], [ 0, %163 ]
  %187 = icmp eq i32 %171, 0
  br i1 %187, label %197, label %188

188:                                              ; preds = %182
  %189 = add nsw i32 %183, 1
  %190 = icmp sgt i32 %171, 14
  %191 = select i1 %190, i32 %158, i32 0
  %192 = add nsw i32 %184, %191
  %193 = select i1 %190, i32 %160, i32 0
  %194 = add nsw i32 %185, %193
  %195 = select i1 %190, i32 15, i32 %171
  %196 = add nsw i32 %186, %195
  br label %197

197:                                              ; preds = %188, %182
  %198 = phi i32 [ %189, %188 ], [ %183, %182 ]
  %199 = phi i32 [ %192, %188 ], [ %184, %182 ]
  %200 = phi i32 [ %194, %188 ], [ %185, %182 ]
  %201 = phi i32 [ %196, %188 ], [ %186, %182 ]
  %202 = sext i32 %201 to i64
  %203 = getelementptr inbounds i8, ptr %161, i64 %202
  %204 = load i8, ptr %203, align 1, !tbaa !15
  %205 = zext i8 %204 to i32
  %206 = add nsw i32 %199, %205
  %207 = getelementptr inbounds i8, ptr %162, i64 %202
  %208 = load i8, ptr %207, align 1, !tbaa !15
  %209 = zext i8 %208 to i32
  %210 = add nsw i32 %200, %209
  %211 = icmp ult ptr %170, %1
  br i1 %211, label %163, label %212, !llvm.loop !658

212:                                              ; preds = %197
  %.lcssa9 = phi i32 [ %198, %197 ]
  %.lcssa8 = phi i32 [ %206, %197 ]
  %.lcssa7 = phi i32 [ %210, %197 ]
  %213 = icmp sgt i32 %.lcssa8, %.lcssa7
  %214 = select i1 %213, i32 %153, i32 %155
  %215 = tail call i32 @llvm.smin.i32(i32 %.lcssa8, i32 %.lcssa7)
  %216 = add nsw i32 %215, %.lcssa9
  %217 = load i32, ptr %2, align 4, !tbaa !11
  br label %218

218:                                              ; preds = %212, %115
  %219 = phi i32 [ %217, %212 ], [ %117, %115 ]
  %220 = phi i32 [ %216, %212 ], [ %118, %115 ]
  %221 = phi i32 [ %214, %212 ], [ %116, %115 ]
  %222 = add nsw i32 %220, %219
  br label %223

223:                                              ; preds = %218, %15
  %224 = phi i32 [ 100000, %15 ], [ %222, %218 ]
  %225 = phi i32 [ -1, %15 ], [ %221, %218 ]
  store i32 %224, ptr %2, align 4, !tbaa !11
  br label %226

226:                                              ; preds = %223, %19, %3
  %227 = phi i32 [ 0, %19 ], [ 0, %3 ], [ %225, %223 ]
  ret i32 %227
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @best_huffman_divide(i32 noundef %0, i32 noundef %1, ptr nocapture noundef %2, ptr noundef %3) #15 {
  %5 = alloca i32, align 4
  %6 = alloca [25 x i32], align 16
  %7 = alloca [25 x i32], align 16
  %8 = alloca %struct.gr_info, align 8
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5) #56
  call void @llvm.lifetime.start.p0(i64 100, ptr nonnull %6) #56
  call void @llvm.lifetime.start.p0(i64 100, ptr nonnull %7) #56
  call void @llvm.lifetime.start.p0(i64 120, ptr nonnull %8) #56
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(120) %8, ptr noundef nonnull align 8 dereferenceable(120) %2, i64 120, i1 false)
  %9 = getelementptr inbounds %struct.gr_info, ptr %8, i64 0, i32 1
  %10 = load i32, ptr %9, align 4, !tbaa !184
  %11 = shl i32 %10, 1
  %12 = getelementptr inbounds %struct.gr_info, ptr %8, i64 0, i32 18
  %13 = load i32, ptr %12, align 8
  %14 = getelementptr inbounds %struct.gr_info, ptr %8, i64 0, i32 15
  %15 = load i32, ptr %14, align 4
  %16 = add i32 %15, %13
  %17 = sext i32 %11 to i64
  %18 = getelementptr inbounds i32, ptr %3, i64 %17
  br label %19

19:                                               ; preds = %24, %4
  %20 = phi i64 [ 2, %4 ], [ %30, %24 ]
  %21 = getelementptr inbounds [23 x i32], ptr @scalefac_band, i64 0, i64 %20
  %22 = load i32, ptr %21, align 4, !tbaa !11
  %23 = icmp sgt i32 %22, %11
  br i1 %23, label %32, label %24

24:                                               ; preds = %19
  %25 = getelementptr inbounds [25 x i32], ptr %6, i64 0, i64 %20
  store i32 %16, ptr %25, align 4, !tbaa !11
  %26 = sext i32 %22 to i64
  %27 = getelementptr inbounds i32, ptr %3, i64 %26
  %28 = call fastcc i32 @choose_table(ptr noundef %27, ptr noundef %18, ptr noundef nonnull %25) #57
  %29 = getelementptr inbounds [25 x i32], ptr %7, i64 0, i64 %20
  store i32 %28, ptr %29, align 4, !tbaa !11
  %30 = add nuw nsw i64 %20, 1
  %31 = icmp eq i64 %30, 23
  br i1 %31, label %35, label %19, !llvm.loop !659

32:                                               ; preds = %19
  %.lcssa = phi i64 [ %20, %19 ]
  %33 = trunc i64 %.lcssa to i32
  %34 = icmp ult i32 %33, 25
  br i1 %34, label %35, label %38

35:                                               ; preds = %32, %24
  %36 = phi i64 [ %.lcssa, %32 ], [ 23, %24 ]
  %37 = and i64 %36, 4294967295
  br label %44

38:                                               ; preds = %44, %32
  %39 = getelementptr inbounds %struct.gr_info, ptr %8, i64 0, i32 10
  %40 = getelementptr inbounds %struct.gr_info, ptr %8, i64 0, i32 8
  %41 = getelementptr inbounds %struct.gr_info, ptr %8, i64 0, i32 8, i64 1
  %42 = getelementptr inbounds %struct.gr_info, ptr %8, i64 0, i32 11
  %43 = getelementptr inbounds %struct.gr_info, ptr %8, i64 0, i32 8, i64 2
  br label %51

44:                                               ; preds = %44, %35
  %45 = phi i64 [ %37, %35 ], [ %47, %44 ]
  %46 = getelementptr inbounds [25 x i32], ptr %6, i64 0, i64 %45
  store i32 100000, ptr %46, align 4, !tbaa !11
  %47 = add nuw nsw i64 %45, 1
  %48 = icmp eq i64 %47, 25
  br i1 %48, label %38, label %44, !llvm.loop !660

49:                                               ; preds = %88
  %50 = icmp eq i64 %53, 16
  br i1 %50, label %91, label %51, !llvm.loop !661

51:                                               ; preds = %49, %38
  %52 = phi i64 [ 0, %38 ], [ %53, %49 ]
  %53 = add nuw nsw i64 %52, 1
  %54 = getelementptr inbounds [23 x i32], ptr @scalefac_band, i64 0, i64 %53
  %55 = load i32, ptr %54, align 4, !tbaa !11
  %56 = icmp sgt i32 %55, %11
  br i1 %56, label %91, label %57

57:                                               ; preds = %51
  %58 = trunc i64 %52 to i32
  store i32 %58, ptr %39, align 8, !tbaa !193
  store i32 0, ptr %5, align 4, !tbaa !11
  %59 = sext i32 %55 to i64
  %60 = getelementptr inbounds i32, ptr %3, i64 %59
  %61 = call fastcc i32 @choose_table(ptr noundef %3, ptr noundef %60, ptr noundef nonnull %5) #57
  store i32 %61, ptr %40, align 8, !tbaa !11
  %62 = load i32, ptr %2, align 8, !tbaa !182
  %63 = load i32, ptr %5, align 4, !tbaa !11
  %64 = icmp slt i32 %62, %63
  br i1 %64, label %91, label %65

65:                                               ; preds = %57
  %66 = add nuw nsw i64 %52, 2
  br label %67

67:                                               ; preds = %88, %65
  %68 = phi i64 [ 0, %65 ], [ %89, %88 ]
  %69 = add nuw nsw i64 %66, %68
  %70 = getelementptr inbounds [25 x i32], ptr %6, i64 0, i64 %69
  %71 = load i32, ptr %70, align 4, !tbaa !11
  %72 = add nsw i32 %71, %63
  store i32 %72, ptr %8, align 8, !tbaa !11
  %73 = load i32, ptr %2, align 8, !tbaa !182
  %74 = icmp slt i32 %73, %72
  br i1 %74, label %88, label %75

75:                                               ; preds = %67
  %76 = getelementptr inbounds [23 x i32], ptr @scalefac_band, i64 0, i64 %69
  %77 = load i32, ptr %76, align 4, !tbaa !11
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds i32, ptr %3, i64 %78
  %80 = call fastcc i32 @choose_table(ptr noundef %60, ptr noundef %79, ptr noundef nonnull %8) #57
  store i32 %80, ptr %41, align 4, !tbaa !11
  %81 = load i32, ptr %2, align 8, !tbaa !182
  %82 = load i32, ptr %8, align 8, !tbaa !11
  %83 = icmp slt i32 %81, %82
  br i1 %83, label %88, label %84

84:                                               ; preds = %75
  %85 = trunc i64 %68 to i32
  store i32 %85, ptr %42, align 4, !tbaa !194
  %86 = getelementptr inbounds [25 x i32], ptr %7, i64 0, i64 %69
  %87 = load i32, ptr %86, align 4, !tbaa !11
  store i32 %87, ptr %43, align 8, !tbaa !11
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(120) %2, ptr noundef nonnull align 8 dereferenceable(120) %8, i64 120, i1 false)
  br label %88

88:                                               ; preds = %84, %75, %67
  %89 = add nuw nsw i64 %68, 1
  %90 = icmp eq i64 %89, 8
  br i1 %90, label %49, label %67, !llvm.loop !662

91:                                               ; preds = %57, %51, %49
  call void @llvm.lifetime.end.p0(i64 120, ptr nonnull %8) #56
  call void @llvm.lifetime.end.p0(i64 100, ptr nonnull %7) #56
  call void @llvm.lifetime.end.p0(i64 100, ptr nonnull %6) #56
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5) #56
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @best_scalefac_store(ptr nocapture noundef readonly %0, i32 noundef %1, i32 noundef %2, ptr nocapture noundef readonly %3, ptr noundef %4, ptr noundef %5) #4 {
  %7 = getelementptr inbounds %struct.III_side_info_t, ptr %4, i64 0, i32 4
  %8 = sext i32 %1 to i64
  %9 = getelementptr inbounds %struct.III_side_info_t, ptr %4, i64 0, i32 4, i64 %8
  %10 = sext i32 %2 to i64
  %11 = getelementptr inbounds [2 x %struct.gr_info_ss], ptr %9, i64 0, i64 %10
  %12 = getelementptr inbounds %struct.gr_info, ptr %11, i64 0, i32 16
  %13 = load i32, ptr %12, align 8, !tbaa !577
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %17, label %15

15:                                               ; preds = %6
  %16 = getelementptr inbounds [2 x %struct.III_scalefac_t], ptr %5, i64 %8, i64 %10
  br label %19

17:                                               ; preds = %52, %6
  %18 = getelementptr inbounds %struct.gr_info, ptr %11, i64 0, i32 17
  br label %57

19:                                               ; preds = %52, %15
  %20 = phi i32 [ %13, %15 ], [ %54, %52 ]
  %21 = phi i64 [ 0, %15 ], [ %53, %52 ]
  %22 = getelementptr inbounds [22 x i32], ptr %16, i64 0, i64 %21
  %23 = load i32, ptr %22, align 4, !tbaa !11
  %24 = icmp sgt i32 %23, 0
  br i1 %24, label %27, label %25

25:                                               ; preds = %19
  %26 = add nuw nsw i64 %21, 1
  br label %52

27:                                               ; preds = %19
  %28 = getelementptr inbounds [23 x i32], ptr @scalefac_band, i64 0, i64 %21
  %29 = load i32, ptr %28, align 4, !tbaa !11
  %30 = add nuw nsw i64 %21, 1
  %31 = getelementptr inbounds [23 x i32], ptr @scalefac_band, i64 0, i64 %30
  %32 = load i32, ptr %31, align 4, !tbaa !11
  %33 = icmp slt i32 %29, %32
  br i1 %33, label %34, label %47

34:                                               ; preds = %27
  %35 = sext i32 %29 to i64
  br label %36

36:                                               ; preds = %41, %34
  %37 = phi i64 [ %35, %34 ], [ %42, %41 ]
  %38 = getelementptr inbounds [2 x [576 x i32]], ptr %3, i64 %8, i64 %10, i64 %37
  %39 = load i32, ptr %38, align 4, !tbaa !11
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %45

41:                                               ; preds = %36
  %42 = add nsw i64 %37, 1
  %43 = trunc i64 %42 to i32
  %44 = icmp eq i32 %32, %43
  br i1 %44, label %50, label %36, !llvm.loop !663

45:                                               ; preds = %36
  %.lcssa7 = phi i64 [ %37, %36 ]
  %46 = trunc i64 %.lcssa7 to i32
  br label %47

47:                                               ; preds = %45, %27
  %48 = phi i32 [ %29, %27 ], [ %46, %45 ]
  %49 = icmp eq i32 %48, %32
  br i1 %49, label %50, label %52

50:                                               ; preds = %47, %41
  store i32 0, ptr %22, align 4, !tbaa !11
  %51 = load i32, ptr %12, align 8, !tbaa !577
  br label %52

52:                                               ; preds = %50, %47, %25
  %53 = phi i64 [ %26, %25 ], [ %30, %50 ], [ %30, %47 ]
  %54 = phi i32 [ %20, %25 ], [ %51, %50 ], [ %20, %47 ]
  %55 = zext i32 %54 to i64
  %56 = icmp ult i64 %53, %55
  br i1 %56, label %19, label %17, !llvm.loop !664

57:                                               ; preds = %99, %17
  %58 = phi i64 [ 0, %17 ], [ %100, %99 ]
  %59 = load i32, ptr %18, align 4, !tbaa !576
  %60 = icmp slt i32 %59, 12
  br i1 %60, label %61, label %99

61:                                               ; preds = %57
  %62 = sext i32 %59 to i64
  br label %63

63:                                               ; preds = %96, %61
  %64 = phi i64 [ %62, %61 ], [ %97, %96 ]
  %65 = getelementptr inbounds [2 x %struct.III_scalefac_t], ptr %5, i64 %8, i64 %10, i32 1, i64 %64, i64 %58
  %66 = load i32, ptr %65, align 4, !tbaa !11
  %67 = icmp sgt i32 %66, 0
  br i1 %67, label %70, label %68

68:                                               ; preds = %63
  %69 = add nsw i64 %64, 1
  br label %96

70:                                               ; preds = %63
  %71 = getelementptr inbounds %struct.scalefac_struct, ptr @scalefac_band, i64 0, i32 1, i64 %64
  %72 = load i32, ptr %71, align 4, !tbaa !11
  %73 = add nsw i64 %64, 1
  %74 = getelementptr inbounds %struct.scalefac_struct, ptr @scalefac_band, i64 0, i32 1, i64 %73
  %75 = load i32, ptr %74, align 4, !tbaa !11
  %76 = icmp slt i32 %72, %75
  br i1 %76, label %77, label %92

77:                                               ; preds = %70
  %78 = sext i32 %72 to i64
  br label %79

79:                                               ; preds = %86, %77
  %80 = phi i64 [ %78, %77 ], [ %87, %86 ]
  %81 = mul nsw i64 %80, 3
  %82 = add nsw i64 %81, %58
  %83 = getelementptr inbounds [2 x [576 x i32]], ptr %3, i64 %8, i64 %10, i64 %82
  %84 = load i32, ptr %83, align 4, !tbaa !11
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %90

86:                                               ; preds = %79
  %87 = add nsw i64 %80, 1
  %88 = trunc i64 %87 to i32
  %89 = icmp eq i32 %75, %88
  br i1 %89, label %95, label %79, !llvm.loop !665

90:                                               ; preds = %79
  %.lcssa6 = phi i64 [ %80, %79 ]
  %91 = trunc i64 %.lcssa6 to i32
  br label %92

92:                                               ; preds = %90, %70
  %93 = phi i32 [ %72, %70 ], [ %91, %90 ]
  %94 = icmp eq i32 %93, %75
  br i1 %94, label %95, label %96

95:                                               ; preds = %92, %86
  store i32 0, ptr %65, align 4, !tbaa !11
  br label %96

96:                                               ; preds = %95, %92, %68
  %97 = phi i64 [ %69, %68 ], [ %73, %95 ], [ %73, %92 ]
  %98 = icmp eq i64 %97, 12
  br i1 %98, label %99, label %63, !llvm.loop !666

99:                                               ; preds = %96, %57
  %100 = add nuw nsw i64 %58, 1
  %101 = icmp eq i64 %100, 3
  br i1 %101, label %102, label %57, !llvm.loop !667

102:                                              ; preds = %99
  %103 = getelementptr inbounds %struct.gr_info, ptr %11, i64 0, i32 15
  %104 = load i32, ptr %103, align 4, !tbaa !237
  %105 = load i32, ptr %11, align 8, !tbaa !182
  %106 = sub i32 %105, %104
  store i32 %106, ptr %11, align 8, !tbaa !182
  %107 = getelementptr inbounds %struct.gr_info, ptr %11, i64 0, i32 13
  %108 = load i32, ptr %107, align 4, !tbaa !196
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %110, label %194

110:                                              ; preds = %102
  %111 = getelementptr inbounds %struct.gr_info, ptr %11, i64 0, i32 12
  %112 = load i32, ptr %111, align 8, !tbaa !195
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %114, label %194

114:                                              ; preds = %110
  %115 = load i32, ptr %12, align 8, !tbaa !577
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %128, label %117

117:                                              ; preds = %114
  %118 = getelementptr inbounds [2 x %struct.III_scalefac_t], ptr %5, i64 %8, i64 %10
  %119 = zext i32 %115 to i64
  br label %120

120:                                              ; preds = %120, %117
  %121 = phi i64 [ 0, %117 ], [ %126, %120 ]
  %122 = phi i32 [ 0, %117 ], [ %125, %120 ]
  %123 = getelementptr inbounds [22 x i32], ptr %118, i64 0, i64 %121
  %124 = load i32, ptr %123, align 4, !tbaa !11
  %125 = or i32 %124, %122
  %126 = add nuw nsw i64 %121, 1
  %127 = icmp eq i64 %126, %119
  br i1 %127, label %128, label %120, !llvm.loop !668

128:                                              ; preds = %120, %114
  %129 = phi i32 [ 0, %114 ], [ %125, %120 ]
  %130 = load i32, ptr %18, align 4, !tbaa !576
  %131 = icmp ult i32 %130, 12
  br i1 %131, label %132, label %148

132:                                              ; preds = %128
  %133 = zext i32 %130 to i64
  br label %134

134:                                              ; preds = %145, %132
  %135 = phi i64 [ %133, %132 ], [ %146, %145 ]
  %136 = phi i32 [ %129, %132 ], [ %.lcssa5, %145 ]
  br label %137

137:                                              ; preds = %137, %134
  %138 = phi i64 [ 0, %134 ], [ %143, %137 ]
  %139 = phi i32 [ %136, %134 ], [ %142, %137 ]
  %140 = getelementptr inbounds [2 x %struct.III_scalefac_t], ptr %5, i64 %8, i64 %10, i32 1, i64 %135, i64 %138
  %141 = load i32, ptr %140, align 4, !tbaa !11
  %142 = or i32 %141, %139
  %143 = add nuw nsw i64 %138, 1
  %144 = icmp eq i64 %143, 3
  br i1 %144, label %145, label %137, !llvm.loop !669

145:                                              ; preds = %137
  %.lcssa5 = phi i32 [ %142, %137 ]
  %146 = add nuw nsw i64 %135, 1
  %147 = icmp eq i64 %146, 12
  br i1 %147, label %148, label %134, !llvm.loop !670

148:                                              ; preds = %145, %128
  %149 = phi i32 [ %129, %128 ], [ %.lcssa5, %145 ]
  %150 = and i32 %149, 1
  %151 = icmp eq i32 %150, 0
  %152 = icmp ne i32 %149, 0
  %153 = and i1 %152, %151
  br i1 %153, label %154, label %194

154:                                              ; preds = %148
  br i1 %116, label %168, label %155

155:                                              ; preds = %154
  %156 = getelementptr inbounds [2 x %struct.III_scalefac_t], ptr %5, i64 %8, i64 %10
  br label %157

157:                                              ; preds = %157, %155
  %158 = phi i64 [ 0, %155 ], [ %162, %157 ]
  %159 = getelementptr inbounds [22 x i32], ptr %156, i64 0, i64 %158
  %160 = load i32, ptr %159, align 4, !tbaa !11
  %161 = sdiv i32 %160, 2
  store i32 %161, ptr %159, align 4, !tbaa !11
  %162 = add nuw nsw i64 %158, 1
  %163 = load i32, ptr %12, align 8, !tbaa !577
  %164 = zext i32 %163 to i64
  %165 = icmp ult i64 %162, %164
  br i1 %165, label %157, label %166, !llvm.loop !671

166:                                              ; preds = %157
  %167 = load i32, ptr %18, align 4, !tbaa !576
  br label %168

168:                                              ; preds = %166, %154
  %169 = phi i32 [ %167, %166 ], [ %130, %154 ]
  %170 = icmp ult i32 %169, 12
  br i1 %170, label %171, label %185

171:                                              ; preds = %168
  %172 = zext i32 %169 to i64
  br label %173

173:                                              ; preds = %182, %171
  %174 = phi i64 [ %172, %171 ], [ %183, %182 ]
  br label %175

175:                                              ; preds = %175, %173
  %176 = phi i64 [ 0, %173 ], [ %180, %175 ]
  %177 = getelementptr inbounds [2 x %struct.III_scalefac_t], ptr %5, i64 %8, i64 %10, i32 1, i64 %174, i64 %176
  %178 = load i32, ptr %177, align 4, !tbaa !11
  %179 = sdiv i32 %178, 2
  store i32 %179, ptr %177, align 4, !tbaa !11
  %180 = add nuw nsw i64 %176, 1
  %181 = icmp eq i64 %180, 3
  br i1 %181, label %182, label %175, !llvm.loop !672

182:                                              ; preds = %175
  %183 = add nuw nsw i64 %174, 1
  %184 = icmp eq i64 %183, 12
  br i1 %184, label %185, label %173, !llvm.loop !673

185:                                              ; preds = %182, %168
  store i32 1, ptr %107, align 4, !tbaa !196
  store i32 99999999, ptr %103, align 4, !tbaa !237
  %186 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 45
  %187 = load i32, ptr %186, align 8, !tbaa !136
  %188 = icmp eq i32 %187, 2
  %189 = getelementptr inbounds [2 x %struct.III_scalefac_t], ptr %5, i64 %8, i64 %10
  br i1 %188, label %190, label %192

190:                                              ; preds = %185
  %191 = tail call i32 @scale_bitcount(ptr noundef %189, ptr noundef nonnull %11) #55
  br label %194

192:                                              ; preds = %185
  %193 = tail call i32 @scale_bitcount_lsf(ptr noundef %189, ptr noundef nonnull %11) #55
  br label %194

194:                                              ; preds = %192, %190, %148, %110, %102
  %195 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 45
  %196 = load i32, ptr %195, align 8, !tbaa !136
  %197 = icmp eq i32 %196, 2
  %198 = icmp eq i32 %1, 1
  %199 = and i1 %198, %197
  br i1 %199, label %200, label %324

200:                                              ; preds = %194
  %201 = getelementptr inbounds [2 x %struct.gr_info_ss], ptr %7, i64 0, i64 %10
  %202 = getelementptr inbounds %struct.gr_info, ptr %201, i64 0, i32 6
  %203 = load i32, ptr %202, align 8, !tbaa !282
  %204 = icmp eq i32 %203, 2
  br i1 %204, label %324, label %205

205:                                              ; preds = %200
  %206 = getelementptr inbounds %struct.III_side_info_t, ptr %4, i64 0, i32 4, i64 1
  %207 = getelementptr inbounds [2 x %struct.gr_info_ss], ptr %206, i64 0, i64 %10
  %208 = getelementptr inbounds %struct.gr_info, ptr %207, i64 0, i32 6
  %209 = load i32, ptr %208, align 8, !tbaa !282
  %210 = icmp eq i32 %209, 2
  br i1 %210, label %324, label %211

211:                                              ; preds = %205
  %212 = getelementptr inbounds %struct.gr_info, ptr %201, i64 0, i32 13
  %213 = load i32, ptr %212, align 4, !tbaa !674
  %214 = getelementptr inbounds %struct.gr_info, ptr %207, i64 0, i32 13
  %215 = load i32, ptr %214, align 4, !tbaa !674
  %216 = icmp eq i32 %213, %215
  br i1 %216, label %217, label %324

217:                                              ; preds = %211
  %218 = getelementptr inbounds %struct.gr_info, ptr %201, i64 0, i32 12
  %219 = load i32, ptr %218, align 8, !tbaa !675
  %220 = getelementptr inbounds %struct.gr_info, ptr %207, i64 0, i32 12
  %221 = load i32, ptr %220, align 8, !tbaa !675
  %222 = icmp eq i32 %219, %221
  br i1 %222, label %223, label %324

223:                                              ; preds = %217
  %224 = shl nsw i64 %10, 4
  %225 = or i64 %224, 12
  %226 = getelementptr i8, ptr %4, i64 %225
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %226, i8 0, i64 16, i1 false), !tbaa !11
  %227 = getelementptr inbounds [2 x %struct.III_scalefac_t], ptr %5, i64 0, i64 %10
  %228 = getelementptr inbounds [2 x %struct.III_scalefac_t], ptr %5, i64 1, i64 %10
  %229 = mul nsw i64 %10, 244
  %230 = add nsw i64 %229, 488
  %231 = getelementptr i8, ptr %5, i64 %230
  br label %232

232:                                              ; preds = %269, %223
  %233 = phi i32 [ 0, %223 ], [ %237, %269 ]
  %234 = phi i64 [ 0, %223 ], [ %235, %269 ]
  %235 = add nuw nsw i64 %234, 1
  %236 = getelementptr inbounds [5 x i32], ptr @scfsi_calc.scfsi_band, i64 0, i64 %235
  %237 = load i32, ptr %236, align 4, !tbaa !11
  %238 = icmp slt i32 %233, %237
  br i1 %238, label %239, label %254

239:                                              ; preds = %232
  %240 = sext i32 %233 to i64
  br label %241

241:                                              ; preds = %248, %239
  %242 = phi i64 [ %240, %239 ], [ %249, %248 ]
  %243 = getelementptr inbounds [22 x i32], ptr %227, i64 0, i64 %242
  %244 = load i32, ptr %243, align 4, !tbaa !11
  %245 = getelementptr inbounds [22 x i32], ptr %228, i64 0, i64 %242
  %246 = load i32, ptr %245, align 4, !tbaa !11
  %247 = icmp eq i32 %244, %246
  br i1 %247, label %248, label %252

248:                                              ; preds = %241
  %249 = add nsw i64 %242, 1
  %250 = trunc i64 %249 to i32
  %251 = icmp eq i32 %237, %250
  br i1 %251, label %257, label %241, !llvm.loop !676

252:                                              ; preds = %241
  %.lcssa4 = phi i64 [ %242, %241 ]
  %253 = trunc i64 %.lcssa4 to i32
  br label %254

254:                                              ; preds = %252, %232
  %255 = phi i32 [ %233, %232 ], [ %253, %252 ]
  %256 = icmp eq i32 %255, %237
  br i1 %256, label %257, label %269

257:                                              ; preds = %254, %248
  br i1 %238, label %258, label %267

258:                                              ; preds = %257
  %259 = sext i32 %233 to i64
  %260 = shl nsw i64 %259, 2
  %261 = getelementptr i8, ptr %231, i64 %260
  %262 = xor i32 %233, -1
  %263 = add i32 %237, %262
  %264 = zext i32 %263 to i64
  %265 = shl nuw nsw i64 %264, 2
  %266 = add nuw nsw i64 %265, 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(1) %261, i8 -1, i64 %266, i1 false), !tbaa !11
  br label %267

267:                                              ; preds = %258, %257
  %268 = getelementptr inbounds %struct.III_side_info_t, ptr %4, i64 0, i32 3, i64 %10, i64 %234
  store i32 1, ptr %268, align 4, !tbaa !11
  br label %269

269:                                              ; preds = %267, %254
  %270 = icmp eq i64 %235, 4
  br i1 %270, label %271, label %232, !llvm.loop !677

271:                                              ; preds = %271, %269
  %272 = phi i64 [ %282, %271 ], [ 0, %269 ]
  %273 = phi i32 [ %281, %271 ], [ 0, %269 ]
  %274 = phi i32 [ %280, %271 ], [ 0, %269 ]
  %275 = getelementptr inbounds [22 x i32], ptr %228, i64 0, i64 %272
  %276 = load i32, ptr %275, align 4, !tbaa !11
  %277 = icmp sgt i32 %276, -1
  %278 = tail call i32 @llvm.smax.i32(i32 %273, i32 %276)
  %279 = zext i1 %277 to i32
  %280 = add nuw nsw i32 %274, %279
  %281 = select i1 %277, i32 %278, i32 %273
  %282 = add nuw nsw i64 %272, 1
  %283 = icmp eq i64 %282, 11
  br i1 %283, label %287, label %271, !llvm.loop !678

284:                                              ; preds = %287
  %.lcssa3.lcssa = phi i32 [ %.lcssa3, %287 ]
  %.lcssa2.lcssa = phi i32 [ %.lcssa2, %287 ]
  %.lcssa1 = phi i32 [ %295, %287 ]
  %.lcssa = phi i32 [ %297, %287 ]
  %285 = getelementptr inbounds %struct.gr_info, ptr %207, i64 0, i32 15
  %286 = getelementptr inbounds %struct.gr_info, ptr %207, i64 0, i32 4
  br label %300

287:                                              ; preds = %287, %271
  %.lcssa3 = phi i32 [ %.lcssa3, %287 ], [ %280, %271 ]
  %.lcssa2 = phi i32 [ %.lcssa2, %287 ], [ %281, %271 ]
  %288 = phi i64 [ %298, %287 ], [ 11, %271 ]
  %289 = phi i32 [ %297, %287 ], [ 0, %271 ]
  %290 = phi i32 [ %295, %287 ], [ 0, %271 ]
  %291 = getelementptr inbounds [22 x i32], ptr %228, i64 0, i64 %288
  %292 = load i32, ptr %291, align 4, !tbaa !11
  %293 = icmp sgt i32 %292, -1
  %294 = tail call i32 @llvm.smax.i32(i32 %290, i32 %292)
  %295 = select i1 %293, i32 %294, i32 %290
  %296 = zext i1 %293 to i32
  %297 = add nuw nsw i32 %289, %296
  %298 = add nuw nsw i64 %288, 1
  %299 = icmp eq i64 %298, 21
  br i1 %299, label %284, label %287, !llvm.loop !679

300:                                              ; preds = %321, %284
  %301 = phi i64 [ 0, %284 ], [ %322, %321 ]
  %302 = getelementptr inbounds [16 x i32], ptr @scfsi_calc.slen1_n, i64 0, i64 %301
  %303 = load i32, ptr %302, align 4, !tbaa !11
  %304 = icmp slt i32 %.lcssa2.lcssa, %303
  br i1 %304, label %305, label %321

305:                                              ; preds = %300
  %306 = getelementptr inbounds [16 x i32], ptr @scfsi_calc.slen2_n, i64 0, i64 %301
  %307 = load i32, ptr %306, align 4, !tbaa !11
  %308 = icmp slt i32 %.lcssa1, %307
  br i1 %308, label %309, label %321

309:                                              ; preds = %305
  %310 = getelementptr inbounds [16 x i32], ptr @scfsi_calc.slen1_tab, i64 0, i64 %301
  %311 = load i32, ptr %310, align 4, !tbaa !11
  %312 = mul nsw i32 %311, %.lcssa3.lcssa
  %313 = getelementptr inbounds [16 x i32], ptr @scfsi_calc.slen2_tab, i64 0, i64 %301
  %314 = load i32, ptr %313, align 4, !tbaa !11
  %315 = mul nsw i32 %314, %.lcssa
  %316 = add nsw i32 %315, %312
  %317 = load i32, ptr %285, align 4, !tbaa !237
  %318 = icmp sgt i32 %317, %316
  br i1 %318, label %319, label %321

319:                                              ; preds = %309
  store i32 %316, ptr %285, align 4, !tbaa !237
  %320 = trunc i64 %301 to i32
  store i32 %320, ptr %286, align 8, !tbaa !186
  br label %321

321:                                              ; preds = %319, %309, %305, %300
  %322 = add nuw nsw i64 %301, 1
  %323 = icmp eq i64 %322, 16
  br i1 %323, label %324, label %300, !llvm.loop !680

324:                                              ; preds = %321, %217, %211, %205, %200, %194
  %325 = load i32, ptr %103, align 4, !tbaa !237
  %326 = load i32, ptr %11, align 8, !tbaa !182
  %327 = add i32 %326, %325
  store i32 %327, ptr %11, align 8, !tbaa !182
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal float @ts_real_time(i64 noundef %0) #4 {
  %2 = alloca i64, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #56
  %3 = call i64 @time(ptr noundef nonnull %2) #55
  %4 = icmp eq i64 %0, 0
  %5 = load i64, ptr %2, align 8, !tbaa !36
  br i1 %4, label %8, label %6

6:                                                ; preds = %1
  %7 = load i64, ptr @ts_real_time.initial_time, align 8, !tbaa !36
  br label %9

8:                                                ; preds = %1
  store i64 %5, ptr @ts_real_time.initial_time, align 8, !tbaa !36
  br label %9

9:                                                ; preds = %8, %6
  %10 = phi i64 [ %7, %6 ], [ %5, %8 ]
  %11 = call double @difftime(i64 noundef %5, i64 noundef %10) #61
  %12 = fptrunc double %11 to float
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #56
  ret float %12
}

; Function Attrs: nounwind optsize
declare i64 @time(ptr noundef) local_unnamed_addr #47

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(none)
declare double @difftime(i64 noundef, i64 noundef) local_unnamed_addr #48

; Function Attrs: nounwind optsize uwtable
define internal void @timestatus(i32 noundef %0, i64 noundef %1, i64 noundef %2, i32 noundef %3) #4 {
  %5 = tail call float @ts_real_time(i64 noundef %1) #57
  %6 = tail call i64 @clock() #55
  %7 = icmp eq i64 %1, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %4
  store i64 %6, ptr @ts_process_time.initial_time, align 8, !tbaa !36
  %9 = load ptr, ptr @stderr, align 8, !tbaa !7
  %10 = tail call i64 @fwrite(ptr nonnull @.str.409, i64 74, i64 1, ptr %9) #53
  br label %114

11:                                               ; preds = %4
  %12 = load i64, ptr @ts_process_time.initial_time, align 8, !tbaa !36
  %13 = sub nsw i64 %6, %12
  %14 = sitofp i64 %13 to float
  %15 = fdiv float %14, 1.000000e+06
  %16 = icmp sgt i64 %1, 0
  br i1 %16, label %17, label %41

17:                                               ; preds = %11
  %18 = sitofp i64 %2 to float
  %19 = fmul float %5, %18
  %20 = sitofp i64 %1 to float
  %21 = fdiv float %19, %20
  %22 = fsub float %21, %5
  %23 = fmul float %15, %18
  %24 = fdiv float %23, %20
  %25 = sitofp i32 %0 to float
  %26 = fmul float %24, %25
  %27 = fcmp ogt float %26, 0.000000e+00
  br i1 %27, label %28, label %33

28:                                               ; preds = %17
  %29 = sext i32 %3 to i64
  %30 = mul nsw i64 %29, %2
  %31 = sitofp i64 %30 to float
  %32 = fdiv float %31, %26
  br label %33

33:                                               ; preds = %28, %17
  %34 = phi float [ %32, %28 ], [ 0.000000e+00, %17 ]
  %35 = fpext float %24 to double
  %36 = fadd double %35, 5.000000e-01
  %37 = insertelement <2 x float> poison, float %22, i64 0
  %38 = insertelement <2 x float> %37, float %21, i64 1
  %39 = fpext <2 x float> %38 to <2 x double>
  %40 = fadd <2 x double> %39, <double 5.000000e-01, double 5.000000e-01>
  br label %41

41:                                               ; preds = %33, %11
  %42 = phi float [ %34, %33 ], [ 0.000000e+00, %11 ]
  %43 = phi double [ %36, %33 ], [ 5.000000e-01, %11 ]
  %44 = phi <2 x double> [ %40, %33 ], [ <double 5.000000e-01, double 5.000000e-01>, %11 ]
  %45 = icmp sgt i64 %2, 1
  br i1 %45, label %48, label %46

46:                                               ; preds = %41
  %47 = add nsw i64 %2, -1
  br label %55

48:                                               ; preds = %41
  %49 = sitofp i64 %1 to double
  %50 = fmul double %49, 1.000000e+02
  %51 = add nsw i64 %2, -1
  %52 = sitofp i64 %51 to double
  %53 = fdiv double %50, %52
  %54 = fptosi double %53 to i32
  br label %55

55:                                               ; preds = %48, %46
  %56 = phi i64 [ %47, %46 ], [ %51, %48 ]
  %57 = phi i32 [ 100, %46 ], [ %54, %48 ]
  %58 = load ptr, ptr @stderr, align 8, !tbaa !7
  %59 = fpext float %15 to double
  %60 = fadd double %59, 5.000000e-01
  %61 = fptosi double %60 to i64
  %62 = sdiv i64 %61, 3600
  %63 = trunc i64 %62 to i32
  %64 = fdiv double %60, 6.000000e+01
  %65 = fptosi double %64 to i64
  %66 = srem i64 %65, 60
  %67 = trunc i64 %66 to i32
  %68 = srem i64 %61, 60
  %69 = trunc i64 %68 to i32
  %70 = fptosi double %43 to i64
  %71 = sdiv i64 %70, 3600
  %72 = trunc i64 %71 to i32
  %73 = fdiv double %43, 6.000000e+01
  %74 = fptosi double %73 to i64
  %75 = srem i64 %74, 60
  %76 = trunc i64 %75 to i32
  %77 = srem i64 %70, 60
  %78 = trunc i64 %77 to i32
  %79 = fpext float %5 to double
  %80 = fadd double %79, 5.000000e-01
  %81 = fptosi double %80 to i64
  %82 = sdiv i64 %81, 3600
  %83 = trunc i64 %82 to i32
  %84 = fdiv double %80, 6.000000e+01
  %85 = fptosi double %84 to i64
  %86 = srem i64 %85, 60
  %87 = trunc i64 %86 to i32
  %88 = srem i64 %81, 60
  %89 = trunc i64 %88 to i32
  %90 = extractelement <2 x double> %44, i64 1
  %91 = fptosi double %90 to i64
  %92 = sdiv i64 %91, 3600
  %93 = trunc i64 %92 to i32
  %94 = fdiv double %90, 6.000000e+01
  %95 = fptosi double %94 to i64
  %96 = srem i64 %95, 60
  %97 = trunc i64 %96 to i32
  %98 = srem i64 %91, 60
  %99 = trunc i64 %98 to i32
  %100 = fpext float %42 to double
  %101 = extractelement <2 x double> %44, i64 0
  %102 = fptosi double %101 to i64
  %103 = sdiv i64 %102, 3600
  %104 = trunc i64 %103 to i32
  %105 = fdiv double %101, 6.000000e+01
  %106 = fptosi double %105 to i64
  %107 = srem i64 %106, 60
  %108 = trunc i64 %107 to i32
  %109 = srem i64 %102, 60
  %110 = trunc i64 %109 to i32
  %111 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %58, ptr noundef nonnull @.str.1.410, i64 noundef %1, i64 noundef %56, i32 noundef %57, i32 noundef %63, i32 noundef %67, i32 noundef %69, i32 noundef %72, i32 noundef %76, i32 noundef %78, i32 noundef %83, i32 noundef %87, i32 noundef %89, i32 noundef %93, i32 noundef %97, i32 noundef %99, double noundef %100, i32 noundef %104, i32 noundef %108, i32 noundef %110) #60
  %112 = load ptr, ptr @stderr, align 8, !tbaa !7
  %113 = tail call i32 @fflush(ptr noundef %112) #57
  br label %114

114:                                              ; preds = %55, %8
  ret void
}

; Function Attrs: nounwind optsize
declare i64 @clock() local_unnamed_addr #47

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal void @getframebits(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1, ptr nocapture noundef writeonly %2) #32 {
  %4 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 3
  %5 = load i32, ptr %4, align 8, !tbaa !243
  %6 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 43
  %7 = load i32, ptr %6, align 8, !tbaa !162
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 50
  %10 = load i32, ptr %9, align 4, !tbaa !164
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds [2 x [15 x i32]], ptr @bitrate_table, i64 0, i64 %8, i64 %11
  %13 = load i32, ptr %12, align 4, !tbaa !11
  %14 = icmp eq i32 %7, 1
  %15 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 46
  %16 = load i32, ptr %15, align 4, !tbaa !173
  %17 = icmp eq i32 %16, 1
  %18 = select i1 %17, i32 168, i32 288
  %19 = select i1 %17, i32 104, i32 168
  %20 = select i1 %14, i32 %18, i32 %19
  %21 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 14
  %22 = load i32, ptr %21, align 4, !tbaa !163
  %23 = icmp eq i32 %22, 0
  %24 = or i32 %20, 16
  %25 = select i1 %23, i32 %20, i32 %24
  %26 = sitofp i32 %13 to double
  %27 = sitofp i32 %5 to double
  %28 = fdiv double %27, 1.000000e+03
  %29 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 42
  %30 = load i32, ptr %29, align 4, !tbaa !247
  %31 = sitofp i32 %30 to double
  %32 = fdiv double %31, %28
  %33 = fmul double %26, 1.250000e-01
  %34 = tail call double @llvm.fmuladd.f64(double %32, double %33, double 1.000000e-09)
  %35 = tail call double @llvm.floor.f64(double %34)
  %36 = fptosi double %35 to i32
  %37 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 44
  %38 = load i32, ptr %37, align 4, !tbaa !166
  %39 = add i32 %38, %36
  %40 = shl i32 %39, 3
  store i32 %40, ptr %1, align 4, !tbaa !11
  %41 = sub nsw i32 %40, %25
  %42 = getelementptr inbounds %struct.lame_global_flags, ptr %0, i64 0, i32 45
  %43 = load i32, ptr %42, align 8, !tbaa !136
  %44 = sdiv i32 %41, %43
  store i32 %44, ptr %2, align 4, !tbaa !11
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @display_bitrates(ptr nocapture noundef %0) #27 {
  %2 = tail call i32 @fputc(i32 10, ptr %0)
  %3 = tail call i64 @fwrite(ptr nonnull @.str.1.415, i64 36, i64 1, ptr %0)
  %4 = tail call i64 @fwrite(ptr nonnull @.str.2.416, i64 15, i64 1, ptr %0)
  br label %5

5:                                                ; preds = %5, %1
  %6 = phi i64 [ 1, %1 ], [ %10, %5 ]
  %7 = getelementptr inbounds [2 x [15 x i32]], ptr @bitrate_table, i64 0, i64 1, i64 %6
  %8 = load i32, ptr %7, align 4, !tbaa !11
  %9 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.3.417, i32 noundef %8) #57
  %10 = add nuw nsw i64 %6, 1
  %11 = icmp eq i64 %10, 15
  br i1 %11, label %12, label %5, !llvm.loop !681

12:                                               ; preds = %5
  %13 = tail call i32 @fputc(i32 10, ptr %0)
  %14 = tail call i32 @fputc(i32 10, ptr %0)
  %15 = tail call i64 @fwrite(ptr nonnull @.str.4.418, i64 37, i64 1, ptr %0)
  %16 = tail call i64 @fwrite(ptr nonnull @.str.2.416, i64 15, i64 1, ptr %0)
  br label %17

17:                                               ; preds = %17, %12
  %18 = phi i64 [ 1, %12 ], [ %22, %17 ]
  %19 = getelementptr inbounds [15 x i32], ptr @bitrate_table, i64 0, i64 %18
  %20 = load i32, ptr %19, align 4, !tbaa !11
  %21 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.3.417, i32 noundef %20) #57
  %22 = add nuw nsw i64 %18, 1
  %23 = icmp eq i64 %22, 15
  br i1 %23, label %24, label %17, !llvm.loop !682

24:                                               ; preds = %17
  %25 = tail call i32 @fputc(i32 10, ptr %0)
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal i32 @BitrateIndex(i32 noundef %0, i32 noundef %1, i32 noundef %2) #27 {
  %4 = sext i32 %1 to i64
  br label %5

5:                                                ; preds = %5, %3
  %6 = phi i32 [ 0, %3 ], [ %12, %5 ]
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds [2 x [15 x i32]], ptr @bitrate_table, i64 0, i64 %4, i64 %7
  %9 = load i32, ptr %8, align 4, !tbaa !11
  %10 = icmp ne i32 %9, %0
  %11 = zext i1 %10 to i32
  %12 = add nuw nsw i32 %6, %11
  %13 = icmp ult i32 %12, 15
  %14 = select i1 %10, i1 %13, i1 false
  br i1 %14, label %5, label %15, !llvm.loop !683

15:                                               ; preds = %5
  %.lcssa1 = phi i1 [ %10, %5 ]
  %.lcssa = phi i32 [ %12, %5 ]
  br i1 %.lcssa1, label %16, label %19

16:                                               ; preds = %15
  %17 = load ptr, ptr @stderr, align 8, !tbaa !7
  %18 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %17, ptr noundef nonnull @.str.5.421, i32 noundef %0, i32 noundef %2) #60
  br label %19

19:                                               ; preds = %16, %15
  %20 = phi i32 [ -1, %16 ], [ %.lcssa, %15 ]
  ret i32 %20
}

; Function Attrs: nofree nounwind optsize uwtable
define internal i32 @SmpFrqIndex(i64 noundef %0, ptr nocapture noundef writeonly %1) #27 {
  store i32 0, ptr %1, align 4, !tbaa !11
  switch i64 %0, label %8 [
    i64 44100, label %3
    i64 48000, label %4
    i64 32000, label %5
    i64 24000, label %11
    i64 22050, label %6
    i64 16000, label %7
  ]

3:                                                ; preds = %2
  store i32 1, ptr %1, align 4, !tbaa !11
  br label %11

4:                                                ; preds = %2
  store i32 1, ptr %1, align 4, !tbaa !11
  br label %11

5:                                                ; preds = %2
  store i32 1, ptr %1, align 4, !tbaa !11
  br label %11

6:                                                ; preds = %2
  br label %11

7:                                                ; preds = %2
  br label %11

8:                                                ; preds = %2
  %9 = load ptr, ptr @stderr, align 8, !tbaa !7
  %10 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %9, ptr noundef nonnull @.str.6.424, i64 noundef %0) #60
  br label %11

11:                                               ; preds = %8, %7, %6, %5, %4, %3, %2
  %12 = phi i32 [ 0, %3 ], [ 1, %4 ], [ 2, %5 ], [ 0, %6 ], [ 2, %7 ], [ -1, %8 ], [ 1, %2 ]
  ret i32 %12
}

; Function Attrs: nounwind optsize uwtable
define internal noalias ptr @mem_alloc(i64 noundef %0, ptr noundef %1) #4 {
  %3 = tail call ptr @calloc(i64 1, i64 %0)
  %4 = icmp eq ptr %3, null
  br i1 %4, label %6, label %5

5:                                                ; preds = %2
  ret ptr %3

6:                                                ; preds = %2
  %7 = load ptr, ptr @stderr, align 8, !tbaa !7
  %8 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %7, ptr noundef nonnull @.str.7.425, ptr noundef %1) #60
  tail call void @exit(i32 noundef 1) #54
  unreachable
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @DetermineByteOrder() #49 {
  %1 = alloca [5 x i8], align 1
  %2 = alloca %union.anon, align 4
  call void @llvm.lifetime.start.p0(i64 5, ptr nonnull %1) #56
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #56
  store i32 1094861636, ptr %2, align 4, !tbaa !15
  %3 = call ptr @strncpy(ptr noundef nonnull dereferenceable(1) %1, ptr noundef nonnull dereferenceable(1) %2, i64 noundef 4) #55
  %4 = getelementptr inbounds [5 x i8], ptr %1, i64 0, i64 4
  store i8 0, ptr %4, align 1, !tbaa !15
  %5 = call i32 @bcmp(ptr noundef nonnull dereferenceable(5) %1, ptr noundef nonnull dereferenceable(5) @.str.8.428, i64 5)
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %11, label %7

7:                                                ; preds = %0
  %8 = call i32 @bcmp(ptr noundef nonnull dereferenceable(5) %1, ptr noundef nonnull dereferenceable(5) @.str.9.429, i64 5)
  %9 = icmp eq i32 %8, 0
  %10 = select i1 %9, i32 2, i32 0
  br label %11

11:                                               ; preds = %7, %0
  %12 = phi i32 [ 1, %0 ], [ %10, %7 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #56
  call void @llvm.lifetime.end.p0(i64 5, ptr nonnull %1) #56
  ret i32 %12
}

; Function Attrs: nofree nounwind willreturn memory(argmem: read)
declare i32 @bcmp(ptr nocapture, ptr nocapture, i64) local_unnamed_addr #50

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @SwapBytesInWords(ptr nocapture noundef %0, i32 noundef %1) #41 {
  %3 = icmp sgt i32 %1, 0
  br i1 %3, label %4, label %15

4:                                                ; preds = %4, %2
  %5 = phi ptr [ %11, %4 ], [ %0, %2 ]
  %6 = phi i32 [ %13, %4 ], [ 0, %2 ]
  %7 = load i16, ptr %5, align 2, !tbaa !41
  %8 = trunc i16 %7 to i8
  %9 = lshr i16 %7, 8
  %10 = trunc i16 %9 to i8
  %11 = getelementptr inbounds i16, ptr %5, i64 1
  store i8 %10, ptr %5, align 1, !tbaa !15
  %12 = getelementptr inbounds i8, ptr %5, i64 1
  store i8 %8, ptr %12, align 1, !tbaa !15
  %13 = add nuw nsw i32 %6, 1
  %14 = icmp eq i32 %13, %1
  br i1 %14, label %15, label %4, !llvm.loop !684

15:                                               ; preds = %4, %2
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @copy_buffer(ptr nocapture noundef writeonly %0, i32 noundef %1, ptr nocapture noundef %2) #41 {
  %4 = icmp eq i32 %1, 0
  %5 = getelementptr inbounds %struct.bit_stream_struc, ptr %2, i64 0, i32 4
  %6 = load i32, ptr %5, align 8, !tbaa !685
  %7 = getelementptr inbounds %struct.bit_stream_struc, ptr %2, i64 0, i32 6
  %8 = load i32, ptr %7, align 8, !tbaa !686
  br i1 %4, label %13, label %9

9:                                                ; preds = %3
  %10 = xor i32 %8, -1
  %11 = add i32 %6, %10
  %12 = icmp sgt i32 %11, %1
  br i1 %12, label %51, label %13

13:                                               ; preds = %9, %3
  %14 = getelementptr inbounds %struct.bit_stream_struc, ptr %2, i64 0, i32 4
  %15 = getelementptr inbounds %struct.bit_stream_struc, ptr %2, i64 0, i32 6
  %16 = add nsw i32 %6, -1
  %17 = icmp sgt i32 %16, %8
  br i1 %17, label %18, label %37

18:                                               ; preds = %13
  %19 = getelementptr inbounds %struct.bit_stream_struc, ptr %2, i64 0, i32 3
  %20 = sext i32 %6 to i64
  %21 = add nsw i64 %20, -1
  br label %22

22:                                               ; preds = %22, %18
  %23 = phi i64 [ 0, %18 ], [ %28, %22 ]
  %24 = phi i64 [ %21, %18 ], [ %30, %22 ]
  %25 = load ptr, ptr %19, align 8, !tbaa !687
  %26 = getelementptr inbounds i8, ptr %25, i64 %24
  %27 = load i8, ptr %26, align 1, !tbaa !15
  %28 = add nuw i64 %23, 1
  %29 = getelementptr inbounds i8, ptr %0, i64 %23
  store i8 %27, ptr %29, align 1, !tbaa !15
  %30 = add nsw i64 %24, -1
  %31 = load i32, ptr %15, align 8, !tbaa !686
  %32 = sext i32 %31 to i64
  %33 = icmp sgt i64 %30, %32
  br i1 %33, label %22, label %34, !llvm.loop !688

34:                                               ; preds = %22
  %.lcssa1 = phi i64 [ %28, %22 ]
  %.lcssa = phi i32 [ %31, %22 ]
  %35 = trunc i64 %.lcssa1 to i32
  %36 = load i32, ptr %14, align 8, !tbaa !685
  br label %37

37:                                               ; preds = %34, %13
  %38 = phi i32 [ %6, %13 ], [ %36, %34 ]
  %39 = phi i32 [ 0, %13 ], [ %35, %34 ]
  %40 = phi i32 [ %8, %13 ], [ %.lcssa, %34 ]
  %41 = xor i32 %40, -1
  %42 = add i32 %38, %41
  %43 = icmp slt i32 %42, 1
  br i1 %43, label %51, label %44

44:                                               ; preds = %37
  %45 = add nsw i32 %38, -1
  store i32 %45, ptr %15, align 8, !tbaa !686
  %46 = getelementptr inbounds %struct.bit_stream_struc, ptr %2, i64 0, i32 7
  store i32 8, ptr %46, align 4, !tbaa !689
  %47 = getelementptr inbounds %struct.bit_stream_struc, ptr %2, i64 0, i32 3
  %48 = load ptr, ptr %47, align 8, !tbaa !687
  %49 = sext i32 %45 to i64
  %50 = getelementptr inbounds i8, ptr %48, i64 %49
  store i8 0, ptr %50, align 1, !tbaa !15
  br label %51

51:                                               ; preds = %44, %37, %9
  %52 = phi i32 [ -1, %9 ], [ %39, %37 ], [ %39, %44 ]
  ret i32 %52
}

; Function Attrs: nounwind optsize uwtable
define internal void @init_bit_stream_w(ptr nocapture noundef writeonly %0) #4 {
  %2 = tail call ptr @mem_alloc(i64 noundef 16384, ptr noundef nonnull @.str.10.436) #57
  %3 = getelementptr inbounds %struct.bit_stream_struc, ptr %0, i64 0, i32 3
  store ptr %2, ptr %3, align 8, !tbaa !687
  %4 = getelementptr inbounds %struct.bit_stream_struc, ptr %0, i64 0, i32 4
  store i32 16384, ptr %4, align 8, !tbaa !685
  %5 = getelementptr inbounds %struct.bit_stream_struc, ptr %0, i64 0, i32 6
  store i32 16383, ptr %5, align 8, !tbaa !686
  %6 = getelementptr inbounds %struct.bit_stream_struc, ptr %0, i64 0, i32 7
  store i32 8, ptr %6, align 4, !tbaa !689
  %7 = getelementptr inbounds %struct.bit_stream_struc, ptr %0, i64 0, i32 5
  store i64 0, ptr %7, align 8, !tbaa !290
  ret void
}

; Function Attrs: mustprogress nounwind optsize willreturn uwtable
define internal void @desalloc_buffer(ptr nocapture noundef readonly %0) #0 {
  %2 = getelementptr inbounds %struct.bit_stream_struc, ptr %0, i64 0, i32 3
  %3 = load ptr, ptr %2, align 8, !tbaa !687
  tail call void @free(ptr noundef %3) #55
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @putbits(ptr nocapture noundef %0, i32 noundef %1, i32 noundef %2) #27 {
  %4 = icmp sgt i32 %2, 32
  br i1 %4, label %5, label %12

5:                                                ; preds = %3
  %6 = load ptr, ptr @stderr, align 8, !tbaa !7
  %7 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %6, ptr noundef nonnull @.str.11.441, i32 noundef 32) #60
  %8 = zext i32 %2 to i64
  %9 = getelementptr inbounds %struct.bit_stream_struc, ptr %0, i64 0, i32 5
  %10 = load i64, ptr %9, align 8, !tbaa !290
  %11 = add i64 %10, %8
  store i64 %11, ptr %9, align 8, !tbaa !290
  br label %18

12:                                               ; preds = %3
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds %struct.bit_stream_struc, ptr %0, i64 0, i32 5
  %15 = load i64, ptr %14, align 8, !tbaa !290
  %16 = add i64 %15, %13
  store i64 %16, ptr %14, align 8, !tbaa !290
  %17 = icmp sgt i32 %2, 0
  br i1 %17, label %18, label %52

18:                                               ; preds = %12, %5
  %19 = getelementptr inbounds %struct.bit_stream_struc, ptr %0, i64 0, i32 7
  %20 = getelementptr inbounds %struct.bit_stream_struc, ptr %0, i64 0, i32 3
  %21 = getelementptr inbounds %struct.bit_stream_struc, ptr %0, i64 0, i32 6
  br label %22

22:                                               ; preds = %50, %18
  %23 = phi i32 [ %2, %18 ], [ %26, %50 ]
  %24 = load i32, ptr %19, align 4, !tbaa !689
  %25 = tail call i32 @llvm.smin.i32(i32 %23, i32 %24)
  %26 = sub nsw i32 %23, %25
  %27 = lshr i32 %1, %26
  %28 = sext i32 %25 to i64
  %29 = getelementptr inbounds [9 x i32], ptr @putmask, i64 0, i64 %28
  %30 = load i32, ptr %29, align 4, !tbaa !11
  %31 = and i32 %27, %30
  %32 = sub nsw i32 %24, %25
  %33 = shl i32 %31, %32
  %34 = load ptr, ptr %20, align 8, !tbaa !687
  %35 = load i32, ptr %21, align 8, !tbaa !686
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i8, ptr %34, i64 %36
  %38 = load i8, ptr %37, align 1, !tbaa !15
  %39 = trunc i32 %33 to i8
  %40 = or i8 %38, %39
  store i8 %40, ptr %37, align 1, !tbaa !15
  %41 = load i32, ptr %19, align 4, !tbaa !689
  %42 = sub nsw i32 %41, %25
  store i32 %42, ptr %19, align 4, !tbaa !689
  %43 = icmp eq i32 %41, %25
  br i1 %43, label %44, label %50

44:                                               ; preds = %22
  store i32 8, ptr %19, align 4, !tbaa !689
  %45 = load i32, ptr %21, align 8, !tbaa !686
  %46 = add nsw i32 %45, -1
  store i32 %46, ptr %21, align 8, !tbaa !686
  %47 = load ptr, ptr %20, align 8, !tbaa !687
  %48 = sext i32 %46 to i64
  %49 = getelementptr inbounds i8, ptr %47, i64 %48
  store i8 0, ptr %49, align 1, !tbaa !15
  br label %50

50:                                               ; preds = %44, %22
  %51 = icmp sgt i32 %26, 0
  br i1 %51, label %22, label %52, !llvm.loop !690

52:                                               ; preds = %50, %12
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @lame_print_version(ptr nocapture noundef %0) #27 {
  %2 = tail call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) @lpszVersion, ptr noundef nonnull dereferenceable(1) @.str.2.446, i32 noundef 3, i32 noundef 70) #55
  %3 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.447, ptr noundef nonnull @lpszVersion) #57
  %4 = tail call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) @lpszVersion, ptr noundef nonnull dereferenceable(1) @.str.2.446, i32 noundef 0, i32 noundef 77) #55
  %5 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.1.448, ptr noundef nonnull @lpszVersion) #57
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal nonnull ptr @get_lame_version() #27 {
  %1 = tail call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) @lpszVersion, ptr noundef nonnull dereferenceable(1) @.str.2.446, i32 noundef 3, i32 noundef 70) #55
  ret ptr @lpszVersion
}

attributes #0 = { mustprogress nounwind optsize willreturn uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { mustprogress nounwind optsize willreturn allockind("realloc") allocsize(1) memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nofree norecurse nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind optsize uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #6 = { nofree nounwind optsize "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { noreturn nounwind optsize "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #9 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #10 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #11 = { mustprogress nofree nounwind optsize willreturn memory(argmem: readwrite) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #12 = { mustprogress nounwind optsize willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #13 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, argmem: read, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #14 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, argmem: readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #15 = { nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #16 = { inlinehint nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #17 = { nofree nounwind optsize memory(write) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #18 = { mustprogress nofree nounwind optsize willreturn memory(write) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #19 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(write, argmem: none, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #20 = { mustprogress nofree nounwind optsize willreturn allockind("alloc,zeroed") allocsize(0,1) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #21 = { mustprogress nofree nounwind optsize willreturn memory(write, argmem: none, inaccessiblemem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #22 = { mustprogress nofree nounwind optsize willreturn memory(argmem: read) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #23 = { nofree nounwind }
attributes #24 = { nofree nounwind optsize memory(read) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #25 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #26 = { nofree nounwind optsize memory(argmem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #27 = { nofree nounwind optsize uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #28 = { mustprogress nofree nounwind optsize willreturn uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #29 = { mustprogress nofree nounwind optsize willreturn "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #30 = { mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #31 = { mustprogress nofree nosync nounwind optsize willreturn memory(write, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #32 = { mustprogress nofree nosync nounwind optsize willreturn memory(read, argmem: readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #33 = { nofree nounwind optsize memory(readwrite, inaccessiblemem: write) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #34 = { noreturn nounwind optsize uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #35 = { mustprogress nofree nounwind optsize willreturn memory(read) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #36 = { mustprogress nofree nounwind optsize willreturn memory(write, argmem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #37 = { nofree norecurse nosync nounwind optsize memory(argmem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #38 = { nofree nosync nounwind optsize memory(argmem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #39 = { nofree nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #40 = { nofree norecurse nosync nounwind optsize memory(argmem: read) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #41 = { nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #42 = { nofree nounwind optsize memory(write, argmem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #43 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #44 = { mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, argmem: read, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #45 = { mustprogress nofree nosync nounwind optsize willreturn memory(read, argmem: write, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #46 = { nofree nounwind optsize memory(readwrite, argmem: write, inaccessiblemem: write) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #47 = { nounwind optsize "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #48 = { mustprogress nofree nosync nounwind optsize willreturn memory(none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #49 = { mustprogress nofree nosync nounwind optsize willreturn memory(none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #50 = { nofree nounwind willreturn memory(argmem: read) }
attributes #51 = { nounwind optsize allocsize(0) }
attributes #52 = { nounwind optsize allocsize(1) }
attributes #53 = { cold }
attributes #54 = { noreturn nounwind optsize }
attributes #55 = { nounwind optsize }
attributes #56 = { nounwind }
attributes #57 = { optsize }
attributes #58 = { nounwind optsize allocsize(0,1) }
attributes #59 = { nounwind optsize willreturn memory(read) }
attributes #60 = { cold optsize }
attributes #61 = { nounwind optsize willreturn memory(none) }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0}
!llvm.module.flags = !{!1, !2, !3, !4, !5, !6}

!0 = !{!"clang version 17.0.6 (https://github.com/Casperento/llvm-project.git 9b0073551ece0d22bf3378af2b03e456a26031b6)"}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 8, !"PIC Level", i32 2}
!3 = !{i32 7, !"PIE Level", i32 2}
!4 = !{i32 7, !"uwtable", i32 2}
!5 = !{i32 1, !"ThinLTO", i32 0}
!6 = !{i32 1, !"EnableSplitLTOUnit", i32 1}
!7 = !{!8, !8, i64 0}
!8 = !{!"any pointer", !9, i64 0}
!9 = !{!"omnipotent char", !10, i64 0}
!10 = !{!"Simple C/C++ TBAA"}
!11 = !{!12, !12, i64 0}
!12 = !{!"int", !9, i64 0}
!13 = !{!14, !12, i64 8}
!14 = !{!"", !12, i64 0, !12, i64 4, !12, i64 8, !12, i64 12, !12, i64 16, !12, i64 20, !9, i64 24}
!15 = !{!9, !9, i64 0}
!16 = !{!14, !12, i64 0}
!17 = !{!14, !12, i64 4}
!18 = !{!14, !12, i64 12}
!19 = !{!14, !12, i64 16}
!20 = distinct !{!20, !21}
!21 = !{!"llvm.loop.mustprogress"}
!22 = !{!14, !12, i64 20}
!23 = distinct !{!23, !21}
!24 = distinct !{!24, !21}
!25 = !{!26, !12, i64 24}
!26 = !{!"frame", !12, i64 0, !12, i64 4, !12, i64 8, !12, i64 12, !12, i64 16, !12, i64 20, !12, i64 24, !12, i64 28, !12, i64 32, !12, i64 36, !12, i64 40, !12, i64 44, !12, i64 48, !12, i64 52, !12, i64 56, !12, i64 60, !12, i64 64, !12, i64 68}
!27 = !{!26, !12, i64 32}
!28 = !{!26, !12, i64 40}
!29 = !{!26, !12, i64 44}
!30 = !{!26, !12, i64 48}
!31 = !{!26, !12, i64 52}
!32 = !{!26, !12, i64 56}
!33 = !{!26, !12, i64 60}
!34 = !{!26, !12, i64 64}
!35 = !{!26, !12, i64 0}
!36 = !{!37, !37, i64 0}
!37 = !{!"long", !9, i64 0}
!38 = !{!26, !12, i64 68}
!39 = !{!40, !40, i64 0}
!40 = !{!"double", !9, i64 0}
!41 = !{!42, !42, i64 0}
!42 = !{!"short", !9, i64 0}
!43 = distinct !{!43, !21}
!44 = !{!45, !12, i64 31872}
!45 = !{!"mpstr", !8, i64 0, !8, i64 8, !12, i64 16, !12, i64 20, !12, i64 24, !26, i64 28, !9, i64 100, !9, i64 4712, !9, i64 23144, !37, i64 23152, !12, i64 23160, !9, i64 23168, !12, i64 31872}
!46 = distinct !{!46, !21}
!47 = distinct !{!47, !21}
!48 = !{!49, !49, i64 0}
!49 = !{!"float", !9, i64 0}
!50 = distinct !{!50, !21}
!51 = distinct !{!51, !21}
!52 = distinct !{!52, !21}
!53 = distinct !{!53, !21}
!54 = distinct !{!54, !21}
!55 = distinct !{!55, !21}
!56 = distinct !{!56, !21}
!57 = distinct !{!57, !21}
!58 = distinct !{!58, !21}
!59 = distinct !{!59, !21}
!60 = distinct !{!60, !21}
!61 = distinct !{!61, !21}
!62 = distinct !{!62, !21}
!63 = distinct !{!63, !21}
!64 = !{!65, !8, i64 16}
!65 = !{!"BF_FrameData", !12, i64 0, !12, i64 4, !12, i64 8, !8, i64 16, !8, i64 24, !9, i64 32, !9, i64 48, !9, i64 80, !9, i64 112, !9, i64 144, !8, i64 176}
!66 = !{!67, !12, i64 0}
!67 = !{!"", !12, i64 0, !8, i64 8}
!68 = !{!69, !8, i64 24}
!69 = !{!"side_info_link", !8, i64 0, !70, i64 8}
!70 = !{!"", !12, i64 0, !12, i64 4, !12, i64 8, !12, i64 12, !8, i64 16, !8, i64 24, !9, i64 32, !9, i64 48}
!71 = !{!65, !8, i64 24}
!72 = !{!69, !8, i64 32}
!73 = !{!65, !12, i64 8}
!74 = !{!65, !12, i64 4}
!75 = distinct !{!75, !21}
!76 = distinct !{!76, !21}
!77 = distinct !{!77, !21}
!78 = !{!69, !8, i64 0}
!79 = !{!65, !12, i64 0}
!80 = !{!69, !12, i64 8}
!81 = !{!69, !12, i64 16}
!82 = !{!69, !12, i64 20}
!83 = !{!67, !8, i64 8}
!84 = !{!85, !42, i64 4}
!85 = !{!"", !12, i64 0, !42, i64 4}
!86 = distinct !{!86, !21}
!87 = distinct !{!87, !21}
!88 = distinct !{!88, !21}
!89 = distinct !{!89, !21}
!90 = !{!69, !12, i64 12}
!91 = distinct !{!91, !21}
!92 = !{!93, !12, i64 0}
!93 = !{!"BF_FrameResults", !12, i64 0, !12, i64 4, !12, i64 8}
!94 = !{!93, !12, i64 4}
!95 = distinct !{!95, !21}
!96 = distinct !{!96, !21}
!97 = !{!65, !8, i64 176}
!98 = distinct !{!98, !21}
!99 = !{!93, !12, i64 8}
!100 = !{!101, !12, i64 0}
!101 = !{!"BF_PartHolder", !12, i64 0, !8, i64 8}
!102 = !{!101, !8, i64 8}
!103 = distinct !{!103, !21}
!104 = !{!85, !12, i64 0}
!105 = distinct !{!105, !21}
!106 = !{!70, !12, i64 0}
!107 = !{!70, !8, i64 16}
!108 = !{!70, !8, i64 24}
!109 = !{!70, !12, i64 12}
!110 = !{!70, !12, i64 8}
!111 = distinct !{!111, !21}
!112 = distinct !{!112, !21}
!113 = distinct !{!113, !21}
!114 = distinct !{!114, !21}
!115 = distinct !{!115, !21}
!116 = distinct !{!116, !21}
!117 = distinct !{!117, !21}
!118 = distinct !{!118, !21}
!119 = distinct !{!119, !21}
!120 = distinct !{!120, !21}
!121 = distinct !{!121, !21}
!122 = !{!123, !8, i64 128}
!123 = !{!"", !37, i64 0, !12, i64 8, !12, i64 12, !12, i64 16, !12, i64 20, !12, i64 24, !12, i64 28, !12, i64 32, !12, i64 36, !12, i64 40, !12, i64 44, !12, i64 48, !12, i64 52, !12, i64 56, !12, i64 60, !12, i64 64, !12, i64 68, !12, i64 72, !12, i64 76, !12, i64 80, !12, i64 84, !12, i64 88, !12, i64 92, !12, i64 96, !12, i64 100, !12, i64 104, !12, i64 108, !12, i64 112, !12, i64 116, !9, i64 120, !12, i64 124, !8, i64 128, !8, i64 136, !12, i64 144, !12, i64 148, !49, i64 152, !12, i64 156, !12, i64 160, !12, i64 164, !37, i64 168, !37, i64 176, !12, i64 184, !12, i64 188, !12, i64 192, !12, i64 196, !12, i64 200, !12, i64 204, !12, i64 208, !12, i64 212, !49, i64 216, !12, i64 220, !12, i64 224, !12, i64 228, !49, i64 232, !49, i64 236, !49, i64 240, !49, i64 244, !12, i64 248, !12, i64 252, !12, i64 256, !12, i64 260, !12, i64 264, !12, i64 268, !12, i64 272, !12, i64 276}
!124 = !{!123, !12, i64 12}
!125 = !{!123, !12, i64 8}
!126 = !{!123, !37, i64 0}
!127 = !{!123, !9, i64 120}
!128 = !{!123, !12, i64 124}
!129 = !{!130, !37, i64 48}
!130 = !{!"stat", !37, i64 0, !37, i64 8, !37, i64 16, !12, i64 24, !12, i64 28, !12, i64 32, !12, i64 36, !37, i64 40, !37, i64 48, !37, i64 56, !37, i64 64, !131, i64 72, !131, i64 88, !131, i64 104, !9, i64 120}
!131 = !{!"timespec", !37, i64 0, !37, i64 8}
!132 = distinct !{!132, !21}
!133 = distinct !{!133, !21}
!134 = !{!123, !37, i64 168}
!135 = !{!123, !37, i64 176}
!136 = !{!123, !12, i64 200}
!137 = distinct !{!137, !21}
!138 = !{!139, !9, i64 266}
!139 = !{!"", !12, i64 0, !12, i64 4, !9, i64 8, !9, i64 39, !9, i64 70, !9, i64 101, !9, i64 106, !9, i64 137, !9, i64 265, !9, i64 266}
!140 = !{!139, !12, i64 4}
!141 = !{!45, !12, i64 24}
!142 = !{!45, !12, i64 36}
!143 = !{!144, !8, i64 0}
!144 = !{!"buf", !8, i64 0, !37, i64 8, !37, i64 16, !8, i64 24, !8, i64 32}
!145 = !{!144, !37, i64 8}
!146 = !{!144, !8, i64 24}
!147 = !{!45, !8, i64 0}
!148 = !{!144, !8, i64 32}
!149 = !{!144, !37, i64 16}
!150 = !{!45, !8, i64 8}
!151 = !{!45, !12, i64 16}
!152 = !{!45, !12, i64 20}
!153 = !{!45, !12, i64 96}
!154 = !{i32 0, i32 256}
!155 = !{!45, !37, i64 23152}
!156 = !{!45, !12, i64 23160}
!157 = distinct !{!157, !21}
!158 = !{!45, !12, i64 56}
!159 = distinct !{!159, !21}
!160 = distinct !{!160, !21}
!161 = distinct !{!161, !21}
!162 = !{!123, !12, i64 192}
!163 = !{!123, !12, i64 60}
!164 = !{!123, !12, i64 220}
!165 = !{!123, !12, i64 224}
!166 = !{!123, !12, i64 196}
!167 = !{!123, !12, i64 68}
!168 = !{!123, !12, i64 36}
!169 = !{!123, !12, i64 228}
!170 = !{!123, !12, i64 52}
!171 = !{!123, !12, i64 56}
!172 = !{!123, !12, i64 164}
!173 = !{!123, !12, i64 204}
!174 = distinct !{!174, !21}
!175 = distinct !{!175, !21}
!176 = distinct !{!176, !21}
!177 = !{!178, !12, i64 0}
!178 = !{!"", !12, i64 0, !12, i64 4, !12, i64 8, !9, i64 12, !9, i64 48}
!179 = !{!178, !12, i64 4}
!180 = distinct !{!180, !21}
!181 = distinct !{!181, !21}
!182 = !{!183, !12, i64 0}
!183 = !{!"", !12, i64 0, !12, i64 4, !12, i64 8, !12, i64 12, !12, i64 16, !12, i64 20, !12, i64 24, !12, i64 28, !9, i64 32, !9, i64 44, !12, i64 56, !12, i64 60, !12, i64 64, !12, i64 68, !12, i64 72, !12, i64 76, !12, i64 80, !12, i64 84, !12, i64 88, !8, i64 96, !9, i64 104}
!184 = !{!183, !12, i64 4}
!185 = !{!183, !12, i64 12}
!186 = !{!183, !12, i64 16}
!187 = !{!183, !12, i64 20}
!188 = !{!183, !12, i64 24}
!189 = !{!183, !12, i64 28}
!190 = distinct !{!190, !21}
!191 = distinct !{!191, !21}
!192 = distinct !{!192, !21}
!193 = !{!183, !12, i64 56}
!194 = !{!183, !12, i64 60}
!195 = !{!183, !12, i64 64}
!196 = !{!183, !12, i64 68}
!197 = !{!183, !12, i64 72}
!198 = distinct !{!198, !21}
!199 = distinct !{!199, !21}
!200 = distinct !{!200, !21}
!201 = distinct !{!201, !21}
!202 = distinct !{!202, !21}
!203 = distinct !{!203, !21}
!204 = distinct !{!204, !21}
!205 = distinct !{!205, !21}
!206 = distinct !{!206, !21}
!207 = distinct !{!207, !21}
!208 = distinct !{!208, !21}
!209 = distinct !{!209, !21}
!210 = distinct !{!210, !21}
!211 = distinct !{!211, !21}
!212 = distinct !{!212, !21}
!213 = distinct !{!213, !21}
!214 = distinct !{!214, !21}
!215 = distinct !{!215, !21}
!216 = distinct !{!216, !21}
!217 = distinct !{!217, !21}
!218 = !{!183, !8, i64 96}
!219 = distinct !{!219, !21}
!220 = distinct !{!220, !21}
!221 = distinct !{!221, !21}
!222 = distinct !{!222, !21}
!223 = distinct !{!223, !21}
!224 = distinct !{!224, !21}
!225 = !{!178, !12, i64 8}
!226 = distinct !{!226, !21}
!227 = distinct !{!227, !21}
!228 = distinct !{!228, !21}
!229 = distinct !{!229, !21}
!230 = distinct !{!230, !21}
!231 = distinct !{!231, !21}
!232 = distinct !{!232, !21}
!233 = distinct !{!233, !21}
!234 = distinct !{!234, !21}
!235 = !{!183, !12, i64 8}
!236 = distinct !{!236, !21}
!237 = !{!183, !12, i64 76}
!238 = distinct !{!238, !21}
!239 = !{!240, !12, i64 0}
!240 = !{!"huffcodetab", !12, i64 0, !12, i64 4, !8, i64 8, !8, i64 16}
!241 = !{!240, !8, i64 8}
!242 = !{!240, !8, i64 16}
!243 = !{!123, !12, i64 16}
!244 = !{!123, !12, i64 48}
!245 = !{!123, !12, i64 88}
!246 = !{!123, !12, i64 184}
!247 = !{!123, !12, i64 188}
!248 = !{!123, !49, i64 216}
!249 = !{!123, !12, i64 92}
!250 = !{!123, !12, i64 40}
!251 = !{!123, !12, i64 104}
!252 = !{!123, !49, i64 232}
!253 = !{!123, !49, i64 236}
!254 = !{!123, !12, i64 108}
!255 = !{!123, !12, i64 116}
!256 = !{!123, !12, i64 112}
!257 = !{!123, !12, i64 256}
!258 = !{!123, !12, i64 248}
!259 = distinct !{!259, !21}
!260 = !{!123, !49, i64 244}
!261 = !{!123, !49, i64 240}
!262 = !{!123, !12, i64 252}
!263 = distinct !{!263, !21}
!264 = !{!123, !12, i64 100}
!265 = !{!123, !12, i64 96}
!266 = !{!123, !12, i64 212}
!267 = !{!123, !12, i64 208}
!268 = !{!123, !12, i64 28}
!269 = !{!123, !12, i64 44}
!270 = !{!123, !12, i64 24}
!271 = !{!123, !8, i64 136}
!272 = !{!139, !12, i64 0}
!273 = !{!123, !12, i64 20}
!274 = !{!123, !12, i64 272}
!275 = !{!123, !12, i64 276}
!276 = distinct !{!276, !21}
!277 = distinct !{!277, !21}
!278 = !{!123, !12, i64 64}
!279 = !{!123, !12, i64 72}
!280 = !{!123, !12, i64 32}
!281 = distinct !{!281, !21}
!282 = !{!283, !12, i64 24}
!283 = !{!"gr_info_ss", !183, i64 0}
!284 = distinct !{!284, !21}
!285 = distinct !{!285, !21}
!286 = distinct !{!286, !21}
!287 = distinct !{!287, !21}
!288 = distinct !{!288, !21}
!289 = distinct !{!289, !21}
!290 = !{!291, !37, i64 40}
!291 = !{!"bit_stream_struc", !8, i64 0, !12, i64 8, !8, i64 16, !8, i64 24, !12, i64 32, !37, i64 40, !12, i64 48, !12, i64 52}
!292 = distinct !{!292, !21}
!293 = distinct !{!293, !21}
!294 = distinct !{!294, !21}
!295 = distinct !{!295, !21}
!296 = distinct !{!296, !21}
!297 = distinct !{!297, !21}
!298 = distinct !{!298, !21}
!299 = !{!123, !12, i64 156}
!300 = !{!123, !12, i64 144}
!301 = !{!123, !12, i64 148}
!302 = !{!123, !49, i64 152}
!303 = !{!123, !12, i64 160}
!304 = distinct !{!304, !21}
!305 = distinct !{!305, !21}
!306 = distinct !{!306, !21}
!307 = distinct !{!307, !21, !308, !309}
!308 = !{!"llvm.loop.isvectorized", i32 1}
!309 = !{!"llvm.loop.unroll.runtime.disable"}
!310 = distinct !{!310, !21}
!311 = distinct !{!311, !21}
!312 = distinct !{!312, !21}
!313 = distinct !{!313, !21}
!314 = distinct !{!314, !21}
!315 = distinct !{!315, !21}
!316 = distinct !{!316, !21}
!317 = distinct !{!317, !21}
!318 = distinct !{!318, !21}
!319 = distinct !{!319, !21}
!320 = distinct !{!320, !21}
!321 = distinct !{!321, !21}
!322 = distinct !{!322, !21}
!323 = distinct !{!323, !21}
!324 = distinct !{!324, !21}
!325 = distinct !{!325, !21}
!326 = distinct !{!326, !21}
!327 = distinct !{!327, !21}
!328 = distinct !{!328, !21}
!329 = distinct !{!329, !21}
!330 = distinct !{!330, !21}
!331 = distinct !{!331, !21}
!332 = distinct !{!332, !21, !308, !309}
!333 = distinct !{!333, !21}
!334 = distinct !{!334, !21}
!335 = distinct !{!335, !21}
!336 = distinct !{!336, !21}
!337 = distinct !{!337, !21}
!338 = distinct !{!338, !21}
!339 = distinct !{!339, !21}
!340 = distinct !{!340, !21}
!341 = distinct !{!341, !21}
!342 = distinct !{!342, !21}
!343 = distinct !{!343, !21}
!344 = !{!26, !12, i64 8}
!345 = !{!26, !12, i64 36}
!346 = !{!26, !12, i64 12}
!347 = !{!348, !12, i64 0}
!348 = !{!"III_sideinfo", !12, i64 0, !12, i64 4, !9, i64 8}
!349 = !{!350, !12, i64 4}
!350 = !{!"gr_info_s", !12, i64 0, !12, i64 4, !12, i64 8, !12, i64 12, !12, i64 16, !12, i64 20, !9, i64 24, !9, i64 36, !9, i64 48, !12, i64 60, !12, i64 64, !12, i64 68, !12, i64 72, !12, i64 76, !12, i64 80, !12, i64 84, !9, i64 88, !8, i64 112}
!351 = !{!350, !12, i64 8}
!352 = !{!350, !8, i64 112}
!353 = !{!350, !12, i64 12}
!354 = !{!350, !12, i64 16}
!355 = !{!350, !12, i64 20}
!356 = distinct !{!356, !21}
!357 = !{!350, !12, i64 68}
!358 = !{!350, !12, i64 72}
!359 = distinct !{!359, !21}
!360 = !{!350, !12, i64 80}
!361 = !{!350, !12, i64 84}
!362 = distinct !{!362, !21}
!363 = !{!350, !12, i64 0}
!364 = distinct !{!364, !21}
!365 = distinct !{!365, !21}
!366 = distinct !{!366, !21}
!367 = !{!350, !12, i64 76}
!368 = distinct !{!368, !21}
!369 = distinct !{!369, !21}
!370 = !{i32 -255, i32 9181}
!371 = !{i32 0, i32 2}
!372 = distinct !{!372, !21, !308, !309}
!373 = distinct !{!373, !21}
!374 = distinct !{!374, !21}
!375 = distinct !{!375, !21}
!376 = distinct !{!376, !21}
!377 = !{!350, !12, i64 60}
!378 = distinct !{!378, !21}
!379 = distinct !{!379, !21}
!380 = distinct !{!380, !21}
!381 = distinct !{!381, !21}
!382 = distinct !{!382, !21}
!383 = !{!350, !12, i64 64}
!384 = distinct !{!384, !21, !308, !309}
!385 = distinct !{!385, !21}
!386 = distinct !{!386, !21}
!387 = distinct !{!387, !21}
!388 = distinct !{!388, !21}
!389 = distinct !{!389, !21}
!390 = distinct !{!390, !21}
!391 = distinct !{!391, !21}
!392 = distinct !{!392, !21}
!393 = distinct !{!393, !21}
!394 = distinct !{!394, !21}
!395 = distinct !{!395, !21}
!396 = distinct !{!396, !21}
!397 = distinct !{!397, !21}
!398 = distinct !{!398, !21}
!399 = distinct !{!399, !21}
!400 = distinct !{!400, !21}
!401 = distinct !{!401, !21}
!402 = distinct !{!402, !21}
!403 = distinct !{!403, !21}
!404 = distinct !{!404, !21}
!405 = !{!406, !8, i64 8}
!406 = !{!"newhuff", !12, i64 0, !8, i64 8}
!407 = distinct !{!407, !21}
!408 = !{!406, !12, i64 0}
!409 = distinct !{!409, !21}
!410 = distinct !{!410, !21}
!411 = distinct !{!411, !21}
!412 = distinct !{!412, !21}
!413 = distinct !{!413, !21}
!414 = distinct !{!414, !21}
!415 = distinct !{!415, !21}
!416 = distinct !{!416, !21}
!417 = distinct !{!417, !21}
!418 = distinct !{!418, !21}
!419 = distinct !{!419, !21}
!420 = distinct !{!420, !21}
!421 = distinct !{!421, !21}
!422 = distinct !{!422, !21}
!423 = distinct !{!423, !21}
!424 = !{!45, !12, i64 28}
!425 = !{!45, !12, i64 64}
!426 = !{!45, !12, i64 40}
!427 = !{!45, !12, i64 52}
!428 = !{!45, !12, i64 60}
!429 = distinct !{!429, !21}
!430 = distinct !{!430, !21}
!431 = distinct !{!431, !21}
!432 = distinct !{!432, !21}
!433 = distinct !{!433, !21}
!434 = distinct !{!434, !21}
!435 = distinct !{!435, !21}
!436 = distinct !{!436, !21}
!437 = distinct !{!437, !21}
!438 = distinct !{!438, !21}
!439 = distinct !{!439, !21}
!440 = distinct !{!440, !21}
!441 = distinct !{!441, !21}
!442 = distinct !{!442, !21}
!443 = distinct !{!443, !21}
!444 = distinct !{!444, !21}
!445 = distinct !{!445, !21}
!446 = distinct !{!446, !21, !308, !309}
!447 = distinct !{!447, !21}
!448 = distinct !{!448, !21, !308, !309}
!449 = distinct !{!449, !21, !308, !309}
!450 = distinct !{!450, !21}
!451 = distinct !{!451, !21}
!452 = distinct !{!452, !21}
!453 = distinct !{!453, !21}
!454 = distinct !{!454, !21}
!455 = distinct !{!455, !21}
!456 = distinct !{!456, !21}
!457 = distinct !{!457, !21}
!458 = distinct !{!458, !21}
!459 = distinct !{!459, !21}
!460 = distinct !{!460, !21}
!461 = distinct !{!461, !21}
!462 = distinct !{!462, !21}
!463 = distinct !{!463, !21}
!464 = distinct !{!464, !21, !308, !309}
!465 = distinct !{!465, !21}
!466 = distinct !{!466, !21}
!467 = distinct !{!467, !21}
!468 = distinct !{!468, !21}
!469 = distinct !{!469, !21}
!470 = distinct !{!470, !21}
!471 = distinct !{!471, !21}
!472 = !{!123, !12, i64 76}
!473 = !{!123, !12, i64 80}
!474 = !{!123, !12, i64 84}
!475 = distinct !{!475, !21}
!476 = distinct !{!476, !21}
!477 = !{i32 -65536, i32 65536}
!478 = distinct !{!478, !21}
!479 = distinct !{!479, !21, !308, !309}
!480 = distinct !{!480, !21}
!481 = distinct !{!481, !21}
!482 = distinct !{!482, !21}
!483 = distinct !{!483, !21}
!484 = distinct !{!484, !21}
!485 = distinct !{!485, !21}
!486 = distinct !{!486, !21}
!487 = distinct !{!487, !21}
!488 = distinct !{!488, !21}
!489 = distinct !{!489, !21}
!490 = distinct !{!490, !21}
!491 = distinct !{!491, !21}
!492 = distinct !{!492, !21}
!493 = distinct !{!493, !21}
!494 = distinct !{!494, !21}
!495 = distinct !{!495, !21}
!496 = distinct !{!496, !21}
!497 = !{i64 0, i64 176, !15, i64 176, i64 312, !15}
!498 = distinct !{!498, !21, !308, !309}
!499 = distinct !{!499, !21, !308, !309}
!500 = distinct !{!500, !21}
!501 = distinct !{!501, !21}
!502 = distinct !{!502, !21, !308, !309}
!503 = distinct !{!503, !21}
!504 = distinct !{!504, !21}
!505 = distinct !{!505, !21}
!506 = distinct !{!506, !21}
!507 = distinct !{!507, !21}
!508 = distinct !{!508, !21}
!509 = distinct !{!509, !21}
!510 = distinct !{!510, !21}
!511 = distinct !{!511, !21}
!512 = distinct !{!512, !21}
!513 = distinct !{!513, !21}
!514 = distinct !{!514, !21}
!515 = distinct !{!515, !21}
!516 = distinct !{!516, !21}
!517 = distinct !{!517, !21}
!518 = distinct !{!518, !21}
!519 = distinct !{!519, !21}
!520 = distinct !{!520, !21}
!521 = distinct !{!521, !21}
!522 = distinct !{!522, !21}
!523 = distinct !{!523, !21}
!524 = distinct !{!524, !21}
!525 = distinct !{!525, !21}
!526 = distinct !{!526, !21}
!527 = distinct !{!527, !21}
!528 = distinct !{!528, !21}
!529 = distinct !{!529, !21}
!530 = distinct !{!530, !21}
!531 = distinct !{!531, !21}
!532 = distinct !{!532, !21}
!533 = distinct !{!533, !21}
!534 = distinct !{!534, !21}
!535 = distinct !{!535, !21}
!536 = distinct !{!536, !21}
!537 = distinct !{!537, !21}
!538 = distinct !{!538, !21}
!539 = distinct !{!539, !21}
!540 = distinct !{!540, !21}
!541 = distinct !{!541, !21}
!542 = distinct !{!542, !21}
!543 = distinct !{!543, !21}
!544 = distinct !{!544, !21}
!545 = distinct !{!545, !21}
!546 = distinct !{!546, !21}
!547 = distinct !{!547, !21}
!548 = distinct !{!548, !21}
!549 = distinct !{!549, !21}
!550 = distinct !{!550, !21}
!551 = distinct !{!551, !21}
!552 = distinct !{!552, !21}
!553 = distinct !{!553, !21}
!554 = distinct !{!554, !21}
!555 = distinct !{!555, !21}
!556 = distinct !{!556, !21}
!557 = distinct !{!557, !21}
!558 = distinct !{!558, !21}
!559 = distinct !{!559, !21}
!560 = distinct !{!560, !21}
!561 = distinct !{!561, !21}
!562 = distinct !{!562, !21}
!563 = distinct !{!563, !21}
!564 = distinct !{!564, !21}
!565 = distinct !{!565, !21}
!566 = distinct !{!566, !21}
!567 = distinct !{!567, !21}
!568 = distinct !{!568, !21}
!569 = distinct !{!569, !21}
!570 = distinct !{!570, !21}
!571 = distinct !{!571, !21}
!572 = distinct !{!572, !21}
!573 = distinct !{!573, !21}
!574 = distinct !{!574, !21}
!575 = !{i4 0, i4 5}
!576 = !{!183, !12, i64 84}
!577 = !{!183, !12, i64 80}
!578 = distinct !{!578, !21}
!579 = distinct !{!579, !21}
!580 = distinct !{!580, !21}
!581 = distinct !{!581, !21}
!582 = distinct !{!582, !21}
!583 = distinct !{!583, !21}
!584 = distinct !{!584, !21}
!585 = distinct !{!585, !21}
!586 = distinct !{!586, !21}
!587 = distinct !{!587, !21}
!588 = distinct !{!588, !21}
!589 = distinct !{!589, !21}
!590 = distinct !{!590, !21, !308, !309}
!591 = distinct !{!591, !21}
!592 = distinct !{!592, !21}
!593 = distinct !{!593, !21}
!594 = !{!183, !12, i64 88}
!595 = distinct !{!595, !21}
!596 = distinct !{!596, !21}
!597 = distinct !{!597, !21}
!598 = distinct !{!598, !21}
!599 = distinct !{!599, !21}
!600 = distinct !{!600, !21}
!601 = distinct !{!601, !21}
!602 = !{!123, !12, i64 264}
!603 = !{!123, !12, i64 268}
!604 = distinct !{!604, !21}
!605 = distinct !{!605, !21}
!606 = distinct !{!606, !21}
!607 = distinct !{!607, !21}
!608 = distinct !{!608, !21}
!609 = distinct !{!609, !21}
!610 = distinct !{!610, !21}
!611 = distinct !{!611, !21}
!612 = distinct !{!612, !21}
!613 = distinct !{!613, !21}
!614 = distinct !{!614, !21}
!615 = distinct !{!615, !21}
!616 = distinct !{!616, !21}
!617 = distinct !{!617, !21}
!618 = distinct !{!618, !21}
!619 = distinct !{!619, !21}
!620 = distinct !{!620, !21}
!621 = distinct !{!621, !21}
!622 = distinct !{!622, !21}
!623 = distinct !{!623, !21}
!624 = distinct !{!624, !21}
!625 = distinct !{!625, !21}
!626 = distinct !{!626, !21}
!627 = distinct !{!627, !21}
!628 = distinct !{!628, !21}
!629 = distinct !{!629, !21}
!630 = distinct !{!630, !21}
!631 = distinct !{!631, !21}
!632 = distinct !{!632, !21}
!633 = distinct !{!633, !21}
!634 = distinct !{!634, !21}
!635 = distinct !{!635, !21}
!636 = distinct !{!636, !21}
!637 = distinct !{!637, !21}
!638 = !{!123, !12, i64 260}
!639 = distinct !{!639, !21}
!640 = distinct !{!640, !21}
!641 = distinct !{!641, !21}
!642 = !{!643, !12, i64 0}
!643 = !{!"", !12, i64 0, !12, i64 4}
!644 = distinct !{!644, !21}
!645 = !{!643, !12, i64 4}
!646 = distinct !{!646, !21}
!647 = distinct !{!647, !21}
!648 = distinct !{!648, !21}
!649 = distinct !{!649, !21}
!650 = !{!240, !12, i64 4}
!651 = distinct !{!651, !21}
!652 = distinct !{!652, !21}
!653 = distinct !{!653, !21}
!654 = distinct !{!654, !21}
!655 = distinct !{!655, !21}
!656 = distinct !{!656, !21}
!657 = distinct !{!657, !21}
!658 = distinct !{!658, !21}
!659 = distinct !{!659, !21}
!660 = distinct !{!660, !21}
!661 = distinct !{!661, !21}
!662 = distinct !{!662, !21}
!663 = distinct !{!663, !21}
!664 = distinct !{!664, !21}
!665 = distinct !{!665, !21}
!666 = distinct !{!666, !21}
!667 = distinct !{!667, !21}
!668 = distinct !{!668, !21}
!669 = distinct !{!669, !21}
!670 = distinct !{!670, !21}
!671 = distinct !{!671, !21}
!672 = distinct !{!672, !21}
!673 = distinct !{!673, !21}
!674 = !{!283, !12, i64 68}
!675 = !{!283, !12, i64 64}
!676 = distinct !{!676, !21}
!677 = distinct !{!677, !21}
!678 = distinct !{!678, !21}
!679 = distinct !{!679, !21}
!680 = distinct !{!680, !21}
!681 = distinct !{!681, !21}
!682 = distinct !{!682, !21}
!683 = distinct !{!683, !21}
!684 = distinct !{!684, !21}
!685 = !{!291, !12, i64 32}
!686 = !{!291, !12, i64 48}
!687 = !{!291, !8, i64 24}
!688 = distinct !{!688, !21}
!689 = !{!291, !12, i64 52}
!690 = distinct !{!690, !21}
